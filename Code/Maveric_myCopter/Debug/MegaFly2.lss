
MegaFly2.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002008  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0002f4be  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  80031600  80031600  00031a00  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000644  80031800  80031800  00031c00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .dalign       00000004  80031e44  80031e44  00032244  2**0
                  ALLOC
  6 .data.rel.ro  00000178  00000004  80031e48  00032404  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .got          000008e0  0000017c  80031fc0  0003257c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000019d4  00000a5c  800328a0  00032e5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000072a8  00002430  80034274  00034830  2**2
                  ALLOC
 10 .comment      00000030  00000000  00000000  00034830  2**0
                  CONTENTS, READONLY
 11 .debug_aranges 00000c08  00000000  00000000  00034860  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubnames 00007a1c  00000000  00000000  00035468  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_info   0005e4ce  00000000  00000000  0003ce84  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00009320  00000000  00000000  0009b352  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00011719  00000000  00000000  000a4672  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00008898  00000000  00000000  000b5d8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    0000ec0c  00000000  00000000  000be624  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc    0000da02  00000000  00000000  000cd230  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .stack        00001000  0000f000  0000f000  00000400  2**0
                  ALLOC
 20 .debug_ranges 000005f0  00000000  00000000  000dac38  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_trampoline>:

  .global _trampoline
  .type _trampoline, @function
_trampoline:
  // Jump to program start.
  rjmp    program_start
80000000:	e0 8f 10 00 	bral	80002000 <program_start>
	...

80002000 <program_start>:

  .org  PROGRAM_START_OFFSET
program_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80002000:	fe ff 00 04 	ld.w	pc,pc[4]
80002004:	80 02       	ld.sh	r2,r0[0x0]
80002006:	bd 98       	lsr	r8,0x1d

Disassembly of section .text:

80002008 <byte_swap_2>:
	return msg->len + MAVLINK_NUM_NON_PAYLOAD_BYTES;
}

#if MAVLINK_NEED_BYTE_SWAP
static inline void byte_swap_2(char *dst, const char *src)
{
80002008:	eb cd 40 80 	pushm	r7,lr
8000200c:	1a 97       	mov	r7,sp
8000200e:	20 2d       	sub	sp,8
80002010:	ef 4c ff fc 	st.w	r7[-4],r12
80002014:	ef 4b ff f8 	st.w	r7[-8],r11
	dst[0] = src[1];
80002018:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000201c:	2f f8       	sub	r8,-1
8000201e:	11 88       	ld.ub	r8,r8[0x0]
80002020:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002024:	b2 88       	st.b	r9[0x0],r8
	dst[1] = src[0];
80002026:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000202a:	f0 c9 ff ff 	sub	r9,r8,-1
8000202e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002032:	11 88       	ld.ub	r8,r8[0x0]
80002034:	b2 88       	st.b	r9[0x0],r8
}
80002036:	2f ed       	sub	sp,-8
80002038:	e3 cd 80 80 	ldm	sp++,r7,pc

8000203c <byte_swap_4>:
static inline void byte_swap_4(char *dst, const char *src)
{
8000203c:	eb cd 40 80 	pushm	r7,lr
80002040:	1a 97       	mov	r7,sp
80002042:	20 2d       	sub	sp,8
80002044:	ef 4c ff fc 	st.w	r7[-4],r12
80002048:	ef 4b ff f8 	st.w	r7[-8],r11
	dst[0] = src[3];
8000204c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002050:	2f d8       	sub	r8,-3
80002052:	11 88       	ld.ub	r8,r8[0x0]
80002054:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002058:	b2 88       	st.b	r9[0x0],r8
	dst[1] = src[2];
8000205a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000205e:	f0 c9 ff ff 	sub	r9,r8,-1
80002062:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002066:	2f e8       	sub	r8,-2
80002068:	11 88       	ld.ub	r8,r8[0x0]
8000206a:	b2 88       	st.b	r9[0x0],r8
	dst[2] = src[1];
8000206c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002070:	f0 c9 ff fe 	sub	r9,r8,-2
80002074:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002078:	2f f8       	sub	r8,-1
8000207a:	11 88       	ld.ub	r8,r8[0x0]
8000207c:	b2 88       	st.b	r9[0x0],r8
	dst[3] = src[0];
8000207e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002082:	f0 c9 ff fd 	sub	r9,r8,-3
80002086:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000208a:	11 88       	ld.ub	r8,r8[0x0]
8000208c:	b2 88       	st.b	r9[0x0],r8
}
8000208e:	2f ed       	sub	sp,-8
80002090:	e3 cd 80 80 	ldm	sp++,r7,pc

80002094 <mav_array_memcpy>:

/*
  like memcpy(), but if src is NULL, do a memset to zero
*/
static void mav_array_memcpy(void *dest, const void *src, size_t n)
{
80002094:	eb cd 40 c0 	pushm	r6-r7,lr
80002098:	1a 97       	mov	r7,sp
8000209a:	20 3d       	sub	sp,12
8000209c:	49 06       	lddpc	r6,800020dc <mav_array_memcpy+0x48>
8000209e:	1e 26       	rsub	r6,pc
800020a0:	ef 4c ff fc 	st.w	r7[-4],r12
800020a4:	ef 4b ff f8 	st.w	r7[-8],r11
800020a8:	ef 4a ff f4 	st.w	r7[-12],r10
	if (src == NULL) {
800020ac:	ee f8 ff f8 	ld.w	r8,r7[-8]
800020b0:	58 08       	cp.w	r8,0
800020b2:	c0 91       	brne	800020c4 <mav_array_memcpy+0x30>
		memset(dest, 0, n);
800020b4:	ee fa ff f4 	ld.w	r10,r7[-12]
800020b8:	30 0b       	mov	r11,0
800020ba:	ee fc ff fc 	ld.w	r12,r7[-4]
800020be:	f0 16 00 30 	mcall	r6[192]
800020c2:	c0 98       	rjmp	800020d4 <mav_array_memcpy+0x40>
	} else {
		memcpy(dest, src, n);
800020c4:	ee fa ff f4 	ld.w	r10,r7[-12]
800020c8:	ee fb ff f8 	ld.w	r11,r7[-8]
800020cc:	ee fc ff fc 	ld.w	r12,r7[-4]
800020d0:	f0 16 00 20 	mcall	r6[128]
	}
}
800020d4:	2f dd       	sub	sp,-12
800020d6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800020da:	00 00       	add	r0,r0
800020dc:	80 00       	ld.sh	r0,r0[0x0]
800020de:	1f 22       	ld.uh	r2,pc++

800020e0 <_MAV_RETURN_uint16_t>:
#if MAVLINK_NEED_BYTE_SWAP
#define _MAV_MSG_RETURN_TYPE(TYPE, SIZE) \
static inline TYPE _MAV_RETURN_## TYPE(const mavlink_message_t *msg, uint8_t ofs) \
{ TYPE r; byte_swap_## SIZE((char*)&r, &_MAV_PAYLOAD(msg)[ofs]); return r; }

_MAV_MSG_RETURN_TYPE(uint16_t, 2)
800020e0:	eb cd 40 c0 	pushm	r6-r7,lr
800020e4:	1a 97       	mov	r7,sp
800020e6:	20 3d       	sub	sp,12
800020e8:	48 d6       	lddpc	r6,8000211c <_MAV_RETURN_uint16_t+0x3c>
800020ea:	1e 26       	rsub	r6,pc
800020ec:	ef 4c ff f8 	st.w	r7[-8],r12
800020f0:	16 98       	mov	r8,r11
800020f2:	ef 68 ff f4 	st.b	r7[-12],r8
800020f6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800020fa:	2f 88       	sub	r8,-8
800020fc:	10 99       	mov	r9,r8
800020fe:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80002102:	10 09       	add	r9,r8
80002104:	ee c8 00 02 	sub	r8,r7,2
80002108:	12 9b       	mov	r11,r9
8000210a:	10 9c       	mov	r12,r8
8000210c:	c7 ef       	rcall	80002008 <byte_swap_2>
8000210e:	ef 08 ff fe 	ld.sh	r8,r7[-2]
80002112:	10 9c       	mov	r12,r8
80002114:	2f dd       	sub	sp,-12
80002116:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000211a:	00 00       	add	r0,r0
8000211c:	80 00       	ld.sh	r0,r0[0x0]
8000211e:	1f 6e       	ld.uh	lr,--pc

80002120 <_MAV_RETURN_int16_t>:
_MAV_MSG_RETURN_TYPE(int16_t,  2)
80002120:	eb cd 40 c0 	pushm	r6-r7,lr
80002124:	1a 97       	mov	r7,sp
80002126:	20 3d       	sub	sp,12
80002128:	48 d6       	lddpc	r6,8000215c <_MAV_RETURN_int16_t+0x3c>
8000212a:	1e 26       	rsub	r6,pc
8000212c:	ef 4c ff f8 	st.w	r7[-8],r12
80002130:	16 98       	mov	r8,r11
80002132:	ef 68 ff f4 	st.b	r7[-12],r8
80002136:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000213a:	2f 88       	sub	r8,-8
8000213c:	10 99       	mov	r9,r8
8000213e:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80002142:	10 09       	add	r9,r8
80002144:	ee c8 00 02 	sub	r8,r7,2
80002148:	12 9b       	mov	r11,r9
8000214a:	10 9c       	mov	r12,r8
8000214c:	c5 ef       	rcall	80002008 <byte_swap_2>
8000214e:	ef 08 ff fe 	ld.sh	r8,r7[-2]
80002152:	10 9c       	mov	r12,r8
80002154:	2f dd       	sub	sp,-12
80002156:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000215a:	00 00       	add	r0,r0
8000215c:	80 00       	ld.sh	r0,r0[0x0]
8000215e:	1f ae       	ld.ub	lr,pc[0x2]

80002160 <_MAV_RETURN_uint32_t>:
_MAV_MSG_RETURN_TYPE(uint32_t, 4)
80002160:	eb cd 40 c0 	pushm	r6-r7,lr
80002164:	1a 97       	mov	r7,sp
80002166:	20 3d       	sub	sp,12
80002168:	48 d6       	lddpc	r6,8000219c <_MAV_RETURN_uint32_t+0x3c>
8000216a:	1e 26       	rsub	r6,pc
8000216c:	ef 4c ff f8 	st.w	r7[-8],r12
80002170:	16 98       	mov	r8,r11
80002172:	ef 68 ff f4 	st.b	r7[-12],r8
80002176:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000217a:	2f 88       	sub	r8,-8
8000217c:	10 99       	mov	r9,r8
8000217e:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80002182:	10 09       	add	r9,r8
80002184:	ee c8 00 04 	sub	r8,r7,4
80002188:	12 9b       	mov	r11,r9
8000218a:	10 9c       	mov	r12,r8
8000218c:	c5 8f       	rcall	8000203c <byte_swap_4>
8000218e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002192:	10 9c       	mov	r12,r8
80002194:	2f dd       	sub	sp,-12
80002196:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000219a:	00 00       	add	r0,r0
8000219c:	80 00       	ld.sh	r0,r0[0x0]
8000219e:	1f ee       	ld.ub	lr,pc[0x6]

800021a0 <_MAV_RETURN_int32_t>:
_MAV_MSG_RETURN_TYPE(int32_t,  4)
800021a0:	eb cd 40 c0 	pushm	r6-r7,lr
800021a4:	1a 97       	mov	r7,sp
800021a6:	20 3d       	sub	sp,12
800021a8:	48 d6       	lddpc	r6,800021dc <_MAV_RETURN_int32_t+0x3c>
800021aa:	1e 26       	rsub	r6,pc
800021ac:	ef 4c ff f8 	st.w	r7[-8],r12
800021b0:	16 98       	mov	r8,r11
800021b2:	ef 68 ff f4 	st.b	r7[-12],r8
800021b6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800021ba:	2f 88       	sub	r8,-8
800021bc:	10 99       	mov	r9,r8
800021be:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800021c2:	10 09       	add	r9,r8
800021c4:	ee c8 00 04 	sub	r8,r7,4
800021c8:	12 9b       	mov	r11,r9
800021ca:	10 9c       	mov	r12,r8
800021cc:	c3 8f       	rcall	8000203c <byte_swap_4>
800021ce:	ee f8 ff fc 	ld.w	r8,r7[-4]
800021d2:	10 9c       	mov	r12,r8
800021d4:	2f dd       	sub	sp,-12
800021d6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800021da:	00 00       	add	r0,r0
800021dc:	80 00       	ld.sh	r0,r0[0x0]
800021de:	20 2e       	sub	lr,2

800021e0 <mavlink_msg_global_position_int_get_time_boot_ms>:
 * @brief Get field time_boot_ms from global_position_int message
 *
 * @return Timestamp (milliseconds since system boot)
 */
static inline uint32_t mavlink_msg_global_position_int_get_time_boot_ms(const mavlink_message_t* msg)
{
800021e0:	eb cd 40 c0 	pushm	r6-r7,lr
800021e4:	1a 97       	mov	r7,sp
800021e6:	20 1d       	sub	sp,4
800021e8:	48 76       	lddpc	r6,80002204 <mavlink_msg_global_position_int_get_time_boot_ms+0x24>
800021ea:	1e 26       	rsub	r6,pc
800021ec:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint32_t(msg,  0);
800021f0:	30 0b       	mov	r11,0
800021f2:	ee fc ff fc 	ld.w	r12,r7[-4]
800021f6:	cb 5f       	rcall	80002160 <_MAV_RETURN_uint32_t>
800021f8:	18 98       	mov	r8,r12
}
800021fa:	10 9c       	mov	r12,r8
800021fc:	2f fd       	sub	sp,-4
800021fe:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002202:	00 00       	add	r0,r0
80002204:	80 00       	ld.sh	r0,r0[0x0]
80002206:	20 6e       	sub	lr,6

80002208 <mavlink_msg_global_position_int_get_lat>:
 * @brief Get field lat from global_position_int message
 *
 * @return Latitude, expressed as * 1E7
 */
static inline int32_t mavlink_msg_global_position_int_get_lat(const mavlink_message_t* msg)
{
80002208:	eb cd 40 c0 	pushm	r6-r7,lr
8000220c:	1a 97       	mov	r7,sp
8000220e:	20 1d       	sub	sp,4
80002210:	48 76       	lddpc	r6,8000222c <mavlink_msg_global_position_int_get_lat+0x24>
80002212:	1e 26       	rsub	r6,pc
80002214:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_int32_t(msg,  4);
80002218:	30 4b       	mov	r11,4
8000221a:	ee fc ff fc 	ld.w	r12,r7[-4]
8000221e:	cc 1f       	rcall	800021a0 <_MAV_RETURN_int32_t>
80002220:	18 98       	mov	r8,r12
}
80002222:	10 9c       	mov	r12,r8
80002224:	2f fd       	sub	sp,-4
80002226:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000222a:	00 00       	add	r0,r0
8000222c:	80 00       	ld.sh	r0,r0[0x0]
8000222e:	20 96       	sub	r6,9

80002230 <mavlink_msg_global_position_int_get_lon>:
 * @brief Get field lon from global_position_int message
 *
 * @return Longitude, expressed as * 1E7
 */
static inline int32_t mavlink_msg_global_position_int_get_lon(const mavlink_message_t* msg)
{
80002230:	eb cd 40 c0 	pushm	r6-r7,lr
80002234:	1a 97       	mov	r7,sp
80002236:	20 1d       	sub	sp,4
80002238:	48 76       	lddpc	r6,80002254 <mavlink_msg_global_position_int_get_lon+0x24>
8000223a:	1e 26       	rsub	r6,pc
8000223c:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_int32_t(msg,  8);
80002240:	30 8b       	mov	r11,8
80002242:	ee fc ff fc 	ld.w	r12,r7[-4]
80002246:	ca df       	rcall	800021a0 <_MAV_RETURN_int32_t>
80002248:	18 98       	mov	r8,r12
}
8000224a:	10 9c       	mov	r12,r8
8000224c:	2f fd       	sub	sp,-4
8000224e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002252:	00 00       	add	r0,r0
80002254:	80 00       	ld.sh	r0,r0[0x0]
80002256:	20 be       	sub	lr,11

80002258 <mavlink_msg_global_position_int_get_alt>:
 * @brief Get field alt from global_position_int message
 *
 * @return Altitude in meters, expressed as * 1000 (millimeters), above MSL
 */
static inline int32_t mavlink_msg_global_position_int_get_alt(const mavlink_message_t* msg)
{
80002258:	eb cd 40 c0 	pushm	r6-r7,lr
8000225c:	1a 97       	mov	r7,sp
8000225e:	20 1d       	sub	sp,4
80002260:	48 76       	lddpc	r6,8000227c <mavlink_msg_global_position_int_get_alt+0x24>
80002262:	1e 26       	rsub	r6,pc
80002264:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_int32_t(msg,  12);
80002268:	30 cb       	mov	r11,12
8000226a:	ee fc ff fc 	ld.w	r12,r7[-4]
8000226e:	c9 9f       	rcall	800021a0 <_MAV_RETURN_int32_t>
80002270:	18 98       	mov	r8,r12
}
80002272:	10 9c       	mov	r12,r8
80002274:	2f fd       	sub	sp,-4
80002276:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000227a:	00 00       	add	r0,r0
8000227c:	80 00       	ld.sh	r0,r0[0x0]
8000227e:	20 e6       	sub	r6,14

80002280 <mavlink_msg_global_position_int_get_relative_alt>:
 * @brief Get field relative_alt from global_position_int message
 *
 * @return Altitude above ground in meters, expressed as * 1000 (millimeters)
 */
static inline int32_t mavlink_msg_global_position_int_get_relative_alt(const mavlink_message_t* msg)
{
80002280:	eb cd 40 c0 	pushm	r6-r7,lr
80002284:	1a 97       	mov	r7,sp
80002286:	20 1d       	sub	sp,4
80002288:	48 76       	lddpc	r6,800022a4 <mavlink_msg_global_position_int_get_relative_alt+0x24>
8000228a:	1e 26       	rsub	r6,pc
8000228c:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_int32_t(msg,  16);
80002290:	31 0b       	mov	r11,16
80002292:	ee fc ff fc 	ld.w	r12,r7[-4]
80002296:	c8 5f       	rcall	800021a0 <_MAV_RETURN_int32_t>
80002298:	18 98       	mov	r8,r12
}
8000229a:	10 9c       	mov	r12,r8
8000229c:	2f fd       	sub	sp,-4
8000229e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800022a2:	00 00       	add	r0,r0
800022a4:	80 00       	ld.sh	r0,r0[0x0]
800022a6:	21 0e       	sub	lr,16

800022a8 <mavlink_msg_global_position_int_get_vx>:
 * @brief Get field vx from global_position_int message
 *
 * @return Ground X Speed (Latitude), expressed as m/s * 100
 */
static inline int16_t mavlink_msg_global_position_int_get_vx(const mavlink_message_t* msg)
{
800022a8:	eb cd 40 c0 	pushm	r6-r7,lr
800022ac:	1a 97       	mov	r7,sp
800022ae:	20 1d       	sub	sp,4
800022b0:	48 76       	lddpc	r6,800022cc <mavlink_msg_global_position_int_get_vx+0x24>
800022b2:	1e 26       	rsub	r6,pc
800022b4:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_int16_t(msg,  20);
800022b8:	31 4b       	mov	r11,20
800022ba:	ee fc ff fc 	ld.w	r12,r7[-4]
800022be:	c3 1f       	rcall	80002120 <_MAV_RETURN_int16_t>
800022c0:	18 98       	mov	r8,r12
}
800022c2:	10 9c       	mov	r12,r8
800022c4:	2f fd       	sub	sp,-4
800022c6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800022ca:	00 00       	add	r0,r0
800022cc:	80 00       	ld.sh	r0,r0[0x0]
800022ce:	21 36       	sub	r6,19

800022d0 <mavlink_msg_global_position_int_get_vy>:
 * @brief Get field vy from global_position_int message
 *
 * @return Ground Y Speed (Longitude), expressed as m/s * 100
 */
static inline int16_t mavlink_msg_global_position_int_get_vy(const mavlink_message_t* msg)
{
800022d0:	eb cd 40 c0 	pushm	r6-r7,lr
800022d4:	1a 97       	mov	r7,sp
800022d6:	20 1d       	sub	sp,4
800022d8:	48 76       	lddpc	r6,800022f4 <mavlink_msg_global_position_int_get_vy+0x24>
800022da:	1e 26       	rsub	r6,pc
800022dc:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_int16_t(msg,  22);
800022e0:	31 6b       	mov	r11,22
800022e2:	ee fc ff fc 	ld.w	r12,r7[-4]
800022e6:	c1 df       	rcall	80002120 <_MAV_RETURN_int16_t>
800022e8:	18 98       	mov	r8,r12
}
800022ea:	10 9c       	mov	r12,r8
800022ec:	2f fd       	sub	sp,-4
800022ee:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800022f2:	00 00       	add	r0,r0
800022f4:	80 00       	ld.sh	r0,r0[0x0]
800022f6:	21 5e       	sub	lr,21

800022f8 <mavlink_msg_global_position_int_get_vz>:
 * @brief Get field vz from global_position_int message
 *
 * @return Ground Z Speed (Altitude), expressed as m/s * 100
 */
static inline int16_t mavlink_msg_global_position_int_get_vz(const mavlink_message_t* msg)
{
800022f8:	eb cd 40 c0 	pushm	r6-r7,lr
800022fc:	1a 97       	mov	r7,sp
800022fe:	20 1d       	sub	sp,4
80002300:	48 76       	lddpc	r6,8000231c <mavlink_msg_global_position_int_get_vz+0x24>
80002302:	1e 26       	rsub	r6,pc
80002304:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_int16_t(msg,  24);
80002308:	31 8b       	mov	r11,24
8000230a:	ee fc ff fc 	ld.w	r12,r7[-4]
8000230e:	c0 9f       	rcall	80002120 <_MAV_RETURN_int16_t>
80002310:	18 98       	mov	r8,r12
}
80002312:	10 9c       	mov	r12,r8
80002314:	2f fd       	sub	sp,-4
80002316:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000231a:	00 00       	add	r0,r0
8000231c:	80 00       	ld.sh	r0,r0[0x0]
8000231e:	21 86       	sub	r6,24

80002320 <mavlink_msg_global_position_int_get_hdg>:
 * @brief Get field hdg from global_position_int message
 *
 * @return Compass heading in degrees * 100, 0.0..359.99 degrees. If unknown, set to: UINT16_MAX
 */
static inline uint16_t mavlink_msg_global_position_int_get_hdg(const mavlink_message_t* msg)
{
80002320:	eb cd 40 c0 	pushm	r6-r7,lr
80002324:	1a 97       	mov	r7,sp
80002326:	20 1d       	sub	sp,4
80002328:	48 86       	lddpc	r6,80002348 <mavlink_msg_global_position_int_get_hdg+0x28>
8000232a:	1e 26       	rsub	r6,pc
8000232c:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint16_t(msg,  26);
80002330:	31 ab       	mov	r11,26
80002332:	ee fc ff fc 	ld.w	r12,r7[-4]
80002336:	cd 5e       	rcall	800020e0 <_MAV_RETURN_uint16_t>
80002338:	18 98       	mov	r8,r12
8000233a:	5c 88       	casts.h	r8
8000233c:	5c 88       	casts.h	r8
}
8000233e:	10 9c       	mov	r12,r8
80002340:	2f fd       	sub	sp,-4
80002342:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002346:	00 00       	add	r0,r0
80002348:	80 00       	ld.sh	r0,r0[0x0]
8000234a:	21 ae       	sub	lr,26

8000234c <mavlink_msg_global_position_int_decode>:
 *
 * @param msg The message to decode
 * @param global_position_int C-struct to decode the message contents into
 */
static inline void mavlink_msg_global_position_int_decode(const mavlink_message_t* msg, mavlink_global_position_int_t* global_position_int)
{
8000234c:	eb cd 40 c0 	pushm	r6-r7,lr
80002350:	1a 97       	mov	r7,sp
80002352:	20 2d       	sub	sp,8
80002354:	4a 76       	lddpc	r6,800023f0 <mavlink_msg_global_position_int_decode+0xa4>
80002356:	1e 26       	rsub	r6,pc
80002358:	ef 4c ff fc 	st.w	r7[-4],r12
8000235c:	ef 4b ff f8 	st.w	r7[-8],r11
#if MAVLINK_NEED_BYTE_SWAP
	global_position_int->time_boot_ms = mavlink_msg_global_position_int_get_time_boot_ms(msg);
80002360:	ee fc ff fc 	ld.w	r12,r7[-4]
80002364:	c3 ef       	rcall	800021e0 <mavlink_msg_global_position_int_get_time_boot_ms>
80002366:	18 99       	mov	r9,r12
80002368:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000236c:	91 09       	st.w	r8[0x0],r9
	global_position_int->lat = mavlink_msg_global_position_int_get_lat(msg);
8000236e:	ee fc ff fc 	ld.w	r12,r7[-4]
80002372:	c4 bf       	rcall	80002208 <mavlink_msg_global_position_int_get_lat>
80002374:	18 99       	mov	r9,r12
80002376:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000237a:	91 19       	st.w	r8[0x4],r9
	global_position_int->lon = mavlink_msg_global_position_int_get_lon(msg);
8000237c:	ee fc ff fc 	ld.w	r12,r7[-4]
80002380:	c5 8f       	rcall	80002230 <mavlink_msg_global_position_int_get_lon>
80002382:	18 99       	mov	r9,r12
80002384:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002388:	91 29       	st.w	r8[0x8],r9
	global_position_int->alt = mavlink_msg_global_position_int_get_alt(msg);
8000238a:	ee fc ff fc 	ld.w	r12,r7[-4]
8000238e:	c6 5f       	rcall	80002258 <mavlink_msg_global_position_int_get_alt>
80002390:	18 99       	mov	r9,r12
80002392:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002396:	91 39       	st.w	r8[0xc],r9
	global_position_int->relative_alt = mavlink_msg_global_position_int_get_relative_alt(msg);
80002398:	ee fc ff fc 	ld.w	r12,r7[-4]
8000239c:	c7 2f       	rcall	80002280 <mavlink_msg_global_position_int_get_relative_alt>
8000239e:	18 99       	mov	r9,r12
800023a0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800023a4:	91 49       	st.w	r8[0x10],r9
	global_position_int->vx = mavlink_msg_global_position_int_get_vx(msg);
800023a6:	ee fc ff fc 	ld.w	r12,r7[-4]
800023aa:	c7 ff       	rcall	800022a8 <mavlink_msg_global_position_int_get_vx>
800023ac:	18 98       	mov	r8,r12
800023ae:	ee f9 ff f8 	ld.w	r9,r7[-8]
800023b2:	f3 58 00 14 	st.h	r9[20],r8
	global_position_int->vy = mavlink_msg_global_position_int_get_vy(msg);
800023b6:	ee fc ff fc 	ld.w	r12,r7[-4]
800023ba:	c8 bf       	rcall	800022d0 <mavlink_msg_global_position_int_get_vy>
800023bc:	18 98       	mov	r8,r12
800023be:	ee f9 ff f8 	ld.w	r9,r7[-8]
800023c2:	f3 58 00 16 	st.h	r9[22],r8
	global_position_int->vz = mavlink_msg_global_position_int_get_vz(msg);
800023c6:	ee fc ff fc 	ld.w	r12,r7[-4]
800023ca:	c9 7f       	rcall	800022f8 <mavlink_msg_global_position_int_get_vz>
800023cc:	18 98       	mov	r8,r12
800023ce:	ee f9 ff f8 	ld.w	r9,r7[-8]
800023d2:	f3 58 00 18 	st.h	r9[24],r8
	global_position_int->hdg = mavlink_msg_global_position_int_get_hdg(msg);
800023d6:	ee fc ff fc 	ld.w	r12,r7[-4]
800023da:	ca 3f       	rcall	80002320 <mavlink_msg_global_position_int_get_hdg>
800023dc:	18 98       	mov	r8,r12
800023de:	5c 88       	casts.h	r8
800023e0:	ee f9 ff f8 	ld.w	r9,r7[-8]
800023e4:	f3 58 00 1a 	st.h	r9[26],r8
#else
	memcpy(global_position_int, _MAV_PAYLOAD(msg), MAVLINK_MSG_ID_GLOBAL_POSITION_INT_LEN);
#endif
}
800023e8:	2f ed       	sub	sp,-8
800023ea:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800023ee:	00 00       	add	r0,r0
800023f0:	80 00       	ld.sh	r0,r0[0x0]
800023f2:	21 da       	sub	r10,29

800023f4 <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
800023f4:	eb cd 40 c0 	pushm	r6-r7,lr
800023f8:	1a 97       	mov	r7,sp
800023fa:	20 6d       	sub	sp,24
800023fc:	49 e6       	lddpc	r6,80002474 <interpolate+0x80>
800023fe:	1e 26       	rsub	r6,pc
80002400:	ef 4c ff f8 	st.w	r7[-8],r12
80002404:	ef 4b ff f4 	st.w	r7[-12],r11
80002408:	ef 4a ff f0 	st.w	r7[-16],r10
8000240c:	ef 49 ff ec 	st.w	r7[-20],r9
80002410:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
80002414:	ee f9 ff f4 	ld.w	r9,r7[-12]
80002418:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000241c:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
80002420:	c0 41       	brne	80002428 <interpolate+0x34>
	{
		return y1;
80002422:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002426:	c2 38       	rjmp	8000246c <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
80002428:	ee f9 ff e8 	ld.w	r9,r7[-24]
8000242c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002430:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80002434:	ee fa ff f8 	ld.w	r10,r7[-8]
80002438:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000243c:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80002440:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80002444:	ee fa ff f0 	ld.w	r10,r7[-16]
80002448:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000244c:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80002450:	12 9b       	mov	r11,r9
80002452:	10 9c       	mov	r12,r8
80002454:	f0 16 00 08 	mcall	r6[32]
80002458:	18 98       	mov	r8,r12
8000245a:	10 99       	mov	r9,r8
8000245c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002460:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80002464:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
80002468:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
8000246c:	10 9c       	mov	r12,r8
8000246e:	2f ad       	sub	sp,-24
80002470:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002474:	80 00       	ld.sh	r0,r0[0x0]
80002476:	22 82       	sub	r2,40

80002478 <init_neighbors>:
#include <stdbool.h>

central_data_t *centralData;

void init_neighbors()
{
80002478:	eb cd 40 c0 	pushm	r6-r7,lr
8000247c:	1a 97       	mov	r7,sp
8000247e:	48 96       	lddpc	r6,800024a0 <init_neighbors+0x28>
80002480:	1e 26       	rsub	r6,pc
	centralData = get_central_data();
80002482:	f0 16 00 32 	mcall	r6[200]
80002486:	18 99       	mov	r9,r12
80002488:	ec f8 00 00 	ld.w	r8,r6[0]
8000248c:	91 09       	st.w	r8[0x0],r9
	centralData->number_of_neighbors = 0;
8000248e:	ec f8 00 00 	ld.w	r8,r6[0]
80002492:	70 09       	ld.w	r9,r8[0x0]
80002494:	30 08       	mov	r8,0
80002496:	f3 68 10 fc 	st.b	r9[4348],r8
}
8000249a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000249e:	00 00       	add	r0,r0
800024a0:	80 00       	ld.sh	r0,r0[0x0]
800024a2:	23 04       	sub	r4,48
800024a4:	54 68       	stdsp	sp[0x118],r8
800024a6:	65 72       	ld.w	r2,r2[0x5c]
800024a8:	65 20       	ld.w	r0,r2[0x48]
800024aa:	69 73       	ld.w	r3,r4[0x5c]
800024ac:	20 6d       	sub	sp,24
800024ae:	6f 72       	ld.w	r2,r7[0x5c]
800024b0:	65 20       	ld.w	r0,r2[0x48]
800024b2:	6e 65       	ld.w	r5,r7[0x18]
800024b4:	69 67       	ld.w	r7,r4[0x58]
800024b6:	68 62       	ld.w	r2,r4[0x18]
800024b8:	6f 72       	ld.w	r2,r7[0x5c]
800024ba:	73 20       	ld.w	r0,r9[0x48]
800024bc:	74 68       	ld.w	r8,r10[0x18]
800024be:	61 6e       	ld.w	lr,r0[0x58]
800024c0:	20 70       	sub	r0,7
800024c2:	6c 61       	ld.w	r1,r6[0x18]
800024c4:	6e 6e       	ld.w	lr,r7[0x18]
800024c6:	65 64       	ld.w	r4,r2[0x58]
800024c8:	21 0a       	sub	r10,16
	...

800024cc <read_msg_from_neighbors>:


void read_msg_from_neighbors(Mavlink_Received_t* rec)
{
800024cc:	eb cd 40 e8 	pushm	r3,r5-r7,lr
800024d0:	1a 97       	mov	r7,sp
800024d2:	fa cd 00 a0 	sub	sp,sp,160
800024d6:	fe f6 03 66 	ld.w	r6,pc[870]
800024da:	1e 26       	rsub	r6,pc
800024dc:	ef 4c ff 90 	st.w	r7[-112],r12
	uint8_t i;
	
	mavlink_global_position_int_t packet;
	mavlink_msg_global_position_int_decode(&rec->msg,&packet);
800024e0:	ee f8 ff 90 	ld.w	r8,r7[-112]
800024e4:	ee c9 00 20 	sub	r9,r7,32
800024e8:	12 9b       	mov	r11,r9
800024ea:	10 9c       	mov	r12,r8
800024ec:	c3 0f       	rcall	8000234c <mavlink_msg_global_position_int_decode>
	//Check if coming from a neighbor
	
	if (rec->msg.sysid != mavlink_system.sysid)
800024ee:	ee f8 ff 90 	ld.w	r8,r7[-112]
800024f2:	11 d9       	ld.ub	r9,r8[0x5]
800024f4:	ec f8 00 70 	ld.w	r8,r6[112]
800024f8:	11 88       	ld.ub	r8,r8[0x0]
800024fa:	f0 09 18 00 	cp.b	r9,r8
800024fe:	e0 80 01 9c 	breq	80002836 <read_msg_from_neighbors+0x36a>
	{
		global_position_t globalPosNeighbor;
		local_coordinates_t localPosNeighbor;
		uint8_t actualNeighbor;
		
		globalPosNeighbor.longitude = packet.lon / 10000000.0;
80002502:	ee f8 ff e8 	ld.w	r8,r7[-24]
80002506:	10 9c       	mov	r12,r8
80002508:	f0 16 00 1a 	mcall	r6[104]
8000250c:	30 08       	mov	r8,0
8000250e:	e0 69 12 d0 	mov	r9,4816
80002512:	ea 19 41 63 	orh	r9,0x4163
80002516:	f0 16 00 0c 	mcall	r6[48]
8000251a:	14 98       	mov	r8,r10
8000251c:	16 99       	mov	r9,r11
8000251e:	ee e9 ff c4 	st.d	r7[-60],r8
		globalPosNeighbor.latitude = packet.lat / 10000000.0;
80002522:	ee f8 ff e4 	ld.w	r8,r7[-28]
80002526:	10 9c       	mov	r12,r8
80002528:	f0 16 00 1a 	mcall	r6[104]
8000252c:	30 08       	mov	r8,0
8000252e:	e0 69 12 d0 	mov	r9,4816
80002532:	ea 19 41 63 	orh	r9,0x4163
80002536:	f0 16 00 0c 	mcall	r6[48]
8000253a:	14 98       	mov	r8,r10
8000253c:	16 99       	mov	r9,r11
8000253e:	ee e9 ff cc 	st.d	r7[-52],r8
		globalPosNeighbor.altitude = packet.alt / 1000.0;
80002542:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002546:	10 9c       	mov	r12,r8
80002548:	f0 16 00 1a 	mcall	r6[104]
8000254c:	30 08       	mov	r8,0
8000254e:	e0 69 40 00 	mov	r9,16384
80002552:	ea 19 40 8f 	orh	r9,0x408f
80002556:	f0 16 00 0c 	mcall	r6[48]
8000255a:	14 98       	mov	r8,r10
8000255c:	16 99       	mov	r9,r11
8000255e:	10 9a       	mov	r10,r8
80002560:	12 9b       	mov	r11,r9
80002562:	f0 16 00 09 	mcall	r6[36]
80002566:	18 98       	mov	r8,r12
80002568:	ef 48 ff d4 	st.w	r7[-44],r8
		globalPosNeighbor.heading = packet.hdg;
8000256c:	ef 08 ff fa 	ld.sh	r8,r7[-6]
80002570:	5c 78       	castu.h	r8
80002572:	e5 a4 08 08 	cop	cp0,cr8,cr0,cr8,0x48
80002576:	ef 48 ff d8 	st.w	r7[-40],r8
		
		localPosNeighbor = global_to_local_position(globalPosNeighbor,centralData->position_estimator.localPosition.origin);
8000257a:	ec f8 00 00 	ld.w	r8,r6[0]
8000257e:	70 08       	ld.w	r8,r8[0x0]
80002580:	ee cc 00 a0 	sub	r12,r7,160
80002584:	20 7d       	sub	sp,28
80002586:	1a 99       	mov	r9,sp
80002588:	12 9a       	mov	r10,r9
8000258a:	f0 cb f2 54 	sub	r11,r8,-3500
8000258e:	f4 c8 00 00 	sub	r8,r10,0
80002592:	f6 c9 00 00 	sub	r9,r11,0
80002596:	72 0e       	ld.w	lr,r9[0x0]
80002598:	91 0e       	st.w	r8[0x0],lr
8000259a:	72 1e       	ld.w	lr,r9[0x4]
8000259c:	91 1e       	st.w	r8[0x4],lr
8000259e:	72 2e       	ld.w	lr,r9[0x8]
800025a0:	91 2e       	st.w	r8[0x8],lr
800025a2:	72 39       	ld.w	r9,r9[0xc]
800025a4:	91 39       	st.w	r8[0xc],r9
800025a6:	f6 e8 00 10 	ld.d	r8,r11[16]
800025aa:	f4 e9 00 10 	st.d	r10[16],r8
800025ae:	76 68       	ld.w	r8,r11[0x18]
800025b0:	95 68       	st.w	r10[0x18],r8
800025b2:	20 7d       	sub	sp,28
800025b4:	1a 98       	mov	r8,sp
800025b6:	10 9a       	mov	r10,r8
800025b8:	ee cb 00 3c 	sub	r11,r7,60
800025bc:	f4 c8 00 00 	sub	r8,r10,0
800025c0:	f6 c9 00 00 	sub	r9,r11,0
800025c4:	72 0e       	ld.w	lr,r9[0x0]
800025c6:	91 0e       	st.w	r8[0x0],lr
800025c8:	72 1e       	ld.w	lr,r9[0x4]
800025ca:	91 1e       	st.w	r8[0x4],lr
800025cc:	72 2e       	ld.w	lr,r9[0x8]
800025ce:	91 2e       	st.w	r8[0x8],lr
800025d0:	72 39       	ld.w	r9,r9[0xc]
800025d2:	91 39       	st.w	r8[0xc],r9
800025d4:	f6 e8 00 10 	ld.d	r8,r11[16]
800025d8:	f4 e9 00 10 	st.d	r10[16],r8
800025dc:	76 68       	ld.w	r8,r11[0x18]
800025de:	95 68       	st.w	r10[0x18],r8
800025e0:	f0 16 00 73 	mcall	r6[460]
800025e4:	2f 2d       	sub	sp,-56
800025e6:	ee cb 00 6c 	sub	r11,r7,108
800025ea:	ee ca 00 a0 	sub	r10,r7,160
800025ee:	f6 c8 00 00 	sub	r8,r11,0
800025f2:	f4 c9 00 00 	sub	r9,r10,0
800025f6:	72 0c       	ld.w	r12,r9[0x0]
800025f8:	91 0c       	st.w	r8[0x0],r12
800025fa:	72 1c       	ld.w	r12,r9[0x4]
800025fc:	91 1c       	st.w	r8[0x4],r12
800025fe:	72 2c       	ld.w	r12,r9[0x8]
80002600:	91 2c       	st.w	r8[0x8],r12
80002602:	72 39       	ld.w	r9,r9[0xc]
80002604:	91 39       	st.w	r8[0xc],r9
80002606:	f6 c8 ff f0 	sub	r8,r11,-16
8000260a:	f4 c9 ff f0 	sub	r9,r10,-16
8000260e:	72 0c       	ld.w	r12,r9[0x0]
80002610:	91 0c       	st.w	r8[0x0],r12
80002612:	72 1c       	ld.w	r12,r9[0x4]
80002614:	91 1c       	st.w	r8[0x4],r12
80002616:	72 2c       	ld.w	r12,r9[0x8]
80002618:	91 2c       	st.w	r8[0x8],r12
8000261a:	72 39       	ld.w	r9,r9[0xc]
8000261c:	91 39       	st.w	r8[0xc],r9
8000261e:	f6 c8 ff e0 	sub	r8,r11,-32
80002622:	f4 c9 ff e0 	sub	r9,r10,-32
80002626:	72 0a       	ld.w	r10,r9[0x0]
80002628:	91 0a       	st.w	r8[0x0],r10
8000262a:	72 1a       	ld.w	r10,r9[0x4]
8000262c:	91 1a       	st.w	r8[0x4],r10
8000262e:	72 2a       	ld.w	r10,r9[0x8]
80002630:	91 2a       	st.w	r8[0x8],r10
80002632:	72 39       	ld.w	r9,r9[0xc]
80002634:	91 39       	st.w	r8[0xc],r9
		
		bool ID_found = false;
80002636:	30 08       	mov	r8,0
80002638:	ef 68 ff ff 	st.b	r7[-1],r8
		i = 0;
8000263c:	30 08       	mov	r8,0
8000263e:	ef 68 ff fd 	st.b	r7[-3],r8
		while ((!ID_found)&&(i<centralData->number_of_neighbors))
80002642:	c1 b8       	rjmp	80002678 <read_msg_from_neighbors+0x1ac>
		{
			if (rec->msg.sysid == centralData->listNeighbors[i].neighborID)
80002644:	ee f8 ff 90 	ld.w	r8,r7[-112]
80002648:	11 d9       	ld.ub	r9,r8[0x5]
8000264a:	ec f8 00 00 	ld.w	r8,r6[0]
8000264e:	70 0a       	ld.w	r10,r8[0x0]
80002650:	ef 38 ff fd 	ld.ub	r8,r7[-3]
80002654:	a5 78       	lsl	r8,0x5
80002656:	f4 08 00 08 	add	r8,r10,r8
8000265a:	f0 c8 ee fc 	sub	r8,r8,-4356
8000265e:	11 88       	ld.ub	r8,r8[0x0]
80002660:	f0 09 18 00 	cp.b	r9,r8
80002664:	c0 51       	brne	8000266e <read_msg_from_neighbors+0x1a2>
			{
				ID_found = true;
80002666:	30 18       	mov	r8,1
80002668:	ef 68 ff ff 	st.b	r7[-1],r8
8000266c:	c0 68       	rjmp	80002678 <read_msg_from_neighbors+0x1ac>
			}else{
				i++;
8000266e:	ef 38 ff fd 	ld.ub	r8,r7[-3]
80002672:	2f f8       	sub	r8,-1
80002674:	ef 68 ff fd 	st.b	r7[-3],r8
		
		localPosNeighbor = global_to_local_position(globalPosNeighbor,centralData->position_estimator.localPosition.origin);
		
		bool ID_found = false;
		i = 0;
		while ((!ID_found)&&(i<centralData->number_of_neighbors))
80002678:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000267c:	ec 18 00 01 	eorl	r8,0x1
80002680:	5c 58       	castu.b	r8
80002682:	c0 b0       	breq	80002698 <read_msg_from_neighbors+0x1cc>
80002684:	ec f8 00 00 	ld.w	r8,r6[0]
80002688:	70 08       	ld.w	r8,r8[0x0]
8000268a:	f1 38 10 fc 	ld.ub	r8,r8[4348]
8000268e:	ef 39 ff fd 	ld.ub	r9,r7[-3]
80002692:	f0 09 18 00 	cp.b	r9,r8
80002696:	cd 73       	brcs	80002644 <read_msg_from_neighbors+0x178>
			//{
				//ID_found = true;
			//}
		}
		
		if (i>=centralData->number_of_neighbors)
80002698:	ec f8 00 00 	ld.w	r8,r6[0]
8000269c:	70 08       	ld.w	r8,r8[0x0]
8000269e:	f1 38 10 fc 	ld.ub	r8,r8[4348]
800026a2:	ef 39 ff fd 	ld.ub	r9,r7[-3]
800026a6:	f0 09 18 00 	cp.b	r9,r8
800026aa:	c2 93       	brcs	800026fc <read_msg_from_neighbors+0x230>
		{
			if (centralData->number_of_neighbors < MAX_NUM_NEIGHBORS)
800026ac:	ec f8 00 00 	ld.w	r8,r6[0]
800026b0:	70 08       	ld.w	r8,r8[0x0]
800026b2:	f1 39 10 fc 	ld.ub	r9,r8[4348]
800026b6:	30 e8       	mov	r8,14
800026b8:	f0 09 18 00 	cp.b	r9,r8
800026bc:	e0 8b 00 13 	brhi	800026e2 <read_msg_from_neighbors+0x216>
			{
				actualNeighbor = centralData->number_of_neighbors;
800026c0:	ec f8 00 00 	ld.w	r8,r6[0]
800026c4:	70 08       	ld.w	r8,r8[0x0]
800026c6:	f1 38 10 fc 	ld.ub	r8,r8[4348]
800026ca:	ef 68 ff fe 	st.b	r7[-2],r8
				centralData->number_of_neighbors++;
800026ce:	ec f8 00 00 	ld.w	r8,r6[0]
800026d2:	70 08       	ld.w	r8,r8[0x0]
800026d4:	f1 39 10 fc 	ld.ub	r9,r8[4348]
800026d8:	2f f9       	sub	r9,-1
800026da:	5c 59       	castu.b	r9
800026dc:	f1 69 10 fc 	st.b	r8[4348],r9
800026e0:	c1 28       	rjmp	80002704 <read_msg_from_neighbors+0x238>
			}else{
				// This case shouldn't happen
				dbg_print("There is more neighbors than planned!\n");
800026e2:	fe cc 02 3e 	sub	r12,pc,574
800026e6:	f0 16 00 01 	mcall	r6[4]
				actualNeighbor = centralData->number_of_neighbors-1;
800026ea:	ec f8 00 00 	ld.w	r8,r6[0]
800026ee:	70 08       	ld.w	r8,r8[0x0]
800026f0:	f1 38 10 fc 	ld.ub	r8,r8[4348]
800026f4:	20 18       	sub	r8,1
800026f6:	ef 68 ff fe 	st.b	r7[-2],r8
800026fa:	c0 58       	rjmp	80002704 <read_msg_from_neighbors+0x238>
			}
		}else{
			actualNeighbor = i;
800026fc:	ef 38 ff fd 	ld.ub	r8,r7[-3]
80002700:	ef 68 ff fe 	st.b	r7[-2],r8
		}
		
		
		
		centralData->listNeighbors[actualNeighbor].neighborID = rec->msg.sysid;
80002704:	ec f8 00 00 	ld.w	r8,r6[0]
80002708:	70 0a       	ld.w	r10,r8[0x0]
8000270a:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8000270e:	ee f8 ff 90 	ld.w	r8,r7[-112]
80002712:	11 d8       	ld.ub	r8,r8[0x5]
80002714:	a5 79       	lsl	r9,0x5
80002716:	f4 09 00 09 	add	r9,r10,r9
8000271a:	f2 c9 ee fc 	sub	r9,r9,-4356
8000271e:	b2 88       	st.b	r9[0x0],r8
		
		for (i=0;i<3;i++)
80002720:	30 08       	mov	r8,0
80002722:	ef 68 ff fd 	st.b	r7[-3],r8
80002726:	c1 b8       	rjmp	8000275c <read_msg_from_neighbors+0x290>
		{
			centralData->listNeighbors[actualNeighbor].position[i] = localPosNeighbor.pos[i];
80002728:	ec f8 00 00 	ld.w	r8,r6[0]
8000272c:	70 09       	ld.w	r9,r8[0x0]
8000272e:	ef 3c ff fe 	ld.ub	r12,r7[-2]
80002732:	ef 3b ff fd 	ld.ub	r11,r7[-3]
80002736:	ef 38 ff fd 	ld.ub	r8,r7[-3]
8000273a:	a3 68       	lsl	r8,0x2
8000273c:	ee 08 00 08 	add	r8,r7,r8
80002740:	f0 fa ff 94 	ld.w	r10,r8[-108]
80002744:	f8 08 15 03 	lsl	r8,r12,0x3
80002748:	16 08       	add	r8,r11
8000274a:	f0 c8 fb be 	sub	r8,r8,-1090
8000274e:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
		
		
		
		centralData->listNeighbors[actualNeighbor].neighborID = rec->msg.sysid;
		
		for (i=0;i<3;i++)
80002752:	ef 38 ff fd 	ld.ub	r8,r7[-3]
80002756:	2f f8       	sub	r8,-1
80002758:	ef 68 ff fd 	st.b	r7[-3],r8
8000275c:	ef 39 ff fd 	ld.ub	r9,r7[-3]
80002760:	30 28       	mov	r8,2
80002762:	f0 09 18 00 	cp.b	r9,r8
80002766:	fe 98 ff e1 	brls	80002728 <read_msg_from_neighbors+0x25c>
		{
			centralData->listNeighbors[actualNeighbor].position[i] = localPosNeighbor.pos[i];
		}
		centralData->listNeighbors[actualNeighbor].velocity[X] = packet.vx / 100.0;
8000276a:	ec f8 00 00 	ld.w	r8,r6[0]
8000276e:	70 05       	ld.w	r5,r8[0x0]
80002770:	ef 33 ff fe 	ld.ub	r3,r7[-2]
80002774:	ef 08 ff f4 	ld.sh	r8,r7[-12]
80002778:	10 9c       	mov	r12,r8
8000277a:	f0 16 00 1a 	mcall	r6[104]
8000277e:	30 08       	mov	r8,0
80002780:	fc 19 40 59 	movh	r9,0x4059
80002784:	f0 16 00 0c 	mcall	r6[48]
80002788:	14 98       	mov	r8,r10
8000278a:	16 99       	mov	r9,r11
8000278c:	10 9a       	mov	r10,r8
8000278e:	12 9b       	mov	r11,r9
80002790:	f0 16 00 09 	mcall	r6[36]
80002794:	18 99       	mov	r9,r12
80002796:	e6 08 15 01 	lsl	r8,r3,0x1
8000279a:	2f f8       	sub	r8,-1
8000279c:	a5 68       	lsl	r8,0x4
8000279e:	ea 08 00 08 	add	r8,r5,r8
800027a2:	f0 c8 ee fc 	sub	r8,r8,-4356
800027a6:	91 09       	st.w	r8[0x0],r9
		centralData->listNeighbors[actualNeighbor].velocity[Y] = packet.vy / 100.0;
800027a8:	ec f8 00 00 	ld.w	r8,r6[0]
800027ac:	70 05       	ld.w	r5,r8[0x0]
800027ae:	ef 33 ff fe 	ld.ub	r3,r7[-2]
800027b2:	ef 08 ff f6 	ld.sh	r8,r7[-10]
800027b6:	10 9c       	mov	r12,r8
800027b8:	f0 16 00 1a 	mcall	r6[104]
800027bc:	30 08       	mov	r8,0
800027be:	fc 19 40 59 	movh	r9,0x4059
800027c2:	f0 16 00 0c 	mcall	r6[48]
800027c6:	14 98       	mov	r8,r10
800027c8:	16 99       	mov	r9,r11
800027ca:	10 9a       	mov	r10,r8
800027cc:	12 9b       	mov	r11,r9
800027ce:	f0 16 00 09 	mcall	r6[36]
800027d2:	18 99       	mov	r9,r12
800027d4:	e6 08 15 05 	lsl	r8,r3,0x5
800027d8:	ea 08 00 08 	add	r8,r5,r8
800027dc:	f0 c8 ee e8 	sub	r8,r8,-4376
800027e0:	91 09       	st.w	r8[0x0],r9
		centralData->listNeighbors[actualNeighbor].velocity[Z] = packet.vz / 100.0;
800027e2:	ec f8 00 00 	ld.w	r8,r6[0]
800027e6:	70 05       	ld.w	r5,r8[0x0]
800027e8:	ef 33 ff fe 	ld.ub	r3,r7[-2]
800027ec:	ef 08 ff f8 	ld.sh	r8,r7[-8]
800027f0:	10 9c       	mov	r12,r8
800027f2:	f0 16 00 1a 	mcall	r6[104]
800027f6:	30 08       	mov	r8,0
800027f8:	fc 19 40 59 	movh	r9,0x4059
800027fc:	f0 16 00 0c 	mcall	r6[48]
80002800:	14 98       	mov	r8,r10
80002802:	16 99       	mov	r9,r11
80002804:	10 9a       	mov	r10,r8
80002806:	12 9b       	mov	r11,r9
80002808:	f0 16 00 09 	mcall	r6[36]
8000280c:	18 99       	mov	r9,r12
8000280e:	e6 08 15 05 	lsl	r8,r3,0x5
80002812:	ea 08 00 08 	add	r8,r5,r8
80002816:	f0 c8 ee e4 	sub	r8,r8,-4380
8000281a:	91 09       	st.w	r8[0x0],r9
		
		centralData->listNeighbors[actualNeighbor].size = SIZE_VHC_ORCA;
8000281c:	ec f8 00 00 	ld.w	r8,r6[0]
80002820:	70 09       	ld.w	r9,r8[0x0]
80002822:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80002826:	f0 c8 ff 77 	sub	r8,r8,-137
8000282a:	a5 78       	lsl	r8,0x5
8000282c:	f2 08 00 08 	add	r8,r9,r8
80002830:	fc 19 40 a0 	movh	r9,0x40a0
80002834:	91 09       	st.w	r8[0x0],r9
		//dbg_print(" with velocity ");
		//dbg_print_vector(centralData->listNeighbors[actualNeighbor].velocity,2);
		//dbg_print("\n");
		
	}
80002836:	2d 8d       	sub	sp,-160
80002838:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
8000283c:	80 00       	ld.sh	r0,r0[0x0]
8000283e:	23 5e       	sub	lr,53

80002840 <mav_array_memcpy>:

/*
  like memcpy(), but if src is NULL, do a memset to zero
*/
static void mav_array_memcpy(void *dest, const void *src, size_t n)
{
80002840:	eb cd 40 c0 	pushm	r6-r7,lr
80002844:	1a 97       	mov	r7,sp
80002846:	20 3d       	sub	sp,12
80002848:	49 06       	lddpc	r6,80002888 <mav_array_memcpy+0x48>
8000284a:	1e 26       	rsub	r6,pc
8000284c:	ef 4c ff fc 	st.w	r7[-4],r12
80002850:	ef 4b ff f8 	st.w	r7[-8],r11
80002854:	ef 4a ff f4 	st.w	r7[-12],r10
	if (src == NULL) {
80002858:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000285c:	58 08       	cp.w	r8,0
8000285e:	c0 91       	brne	80002870 <mav_array_memcpy+0x30>
		memset(dest, 0, n);
80002860:	ee fa ff f4 	ld.w	r10,r7[-12]
80002864:	30 0b       	mov	r11,0
80002866:	ee fc ff fc 	ld.w	r12,r7[-4]
8000286a:	f0 16 00 30 	mcall	r6[192]
8000286e:	c0 98       	rjmp	80002880 <mav_array_memcpy+0x40>
	} else {
		memcpy(dest, src, n);
80002870:	ee fa ff f4 	ld.w	r10,r7[-12]
80002874:	ee fb ff f8 	ld.w	r11,r7[-8]
80002878:	ee fc ff fc 	ld.w	r12,r7[-4]
8000287c:	f0 16 00 20 	mcall	r6[128]
	}
}
80002880:	2f dd       	sub	sp,-12
80002882:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002886:	00 00       	add	r0,r0
80002888:	80 00       	ld.sh	r0,r0[0x0]
8000288a:	26 ce       	sub	lr,108

8000288c <scalar_product>:
	return out;
}


float static inline scalar_product(const float u[], const float v[])
{
8000288c:	eb cd 40 80 	pushm	r7,lr
80002890:	1a 97       	mov	r7,sp
80002892:	20 3d       	sub	sp,12
80002894:	ef 4c ff f8 	st.w	r7[-8],r12
80002898:	ef 4b ff f4 	st.w	r7[-12],r11
	float scp = (u[0]*v[0]+u[1]*v[1]+u[2]*v[2]);
8000289c:	ee f8 ff f8 	ld.w	r8,r7[-8]
800028a0:	70 09       	ld.w	r9,r8[0x0]
800028a2:	ee f8 ff f4 	ld.w	r8,r7[-12]
800028a6:	70 08       	ld.w	r8,r8[0x0]
800028a8:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
800028ac:	ee f8 ff f8 	ld.w	r8,r7[-8]
800028b0:	2f c8       	sub	r8,-4
800028b2:	70 0a       	ld.w	r10,r8[0x0]
800028b4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800028b8:	2f c8       	sub	r8,-4
800028ba:	70 08       	ld.w	r8,r8[0x0]
800028bc:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
800028c0:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
800028c4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800028c8:	2f 88       	sub	r8,-8
800028ca:	70 0a       	ld.w	r10,r8[0x0]
800028cc:	ee f8 ff f4 	ld.w	r8,r7[-12]
800028d0:	2f 88       	sub	r8,-8
800028d2:	70 08       	ld.w	r8,r8[0x0]
800028d4:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
800028d8:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
800028dc:	ef 48 ff fc 	st.w	r7[-4],r8
	return scp;
800028e0:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
800028e4:	10 9c       	mov	r12,r8
800028e6:	2f dd       	sub	sp,-12
800028e8:	e3 cd 80 80 	ldm	sp++,r7,pc

800028ec <quat_multi>:
	out[2] = u[0] * v[1] - u[1] * v[0];
}


UQuat_t static inline quat_multi(const UQuat_t q1, const UQuat_t q2)
{
800028ec:	eb cd 40 e8 	pushm	r3,r5-r7,lr
800028f0:	1a 97       	mov	r7,sp
800028f2:	20 7d       	sub	sp,28
800028f4:	4b d6       	lddpc	r6,800029e8 <quat_multi+0xfc>
800028f6:	1e 26       	rsub	r6,pc
800028f8:	ee c8 ff ec 	sub	r8,r7,-20
800028fc:	18 95       	mov	r5,r12
	float tmp[3];
	UQuat_t out;
	tmp[0] = q1.v[1] * q2.v[2] - q1.v[2]*q2.v[1];
800028fe:	70 2a       	ld.w	r10,r8[0x8]
80002900:	70 79       	ld.w	r9,r8[0x1c]
80002902:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
80002906:	70 3b       	ld.w	r11,r8[0xc]
80002908:	70 69       	ld.w	r9,r8[0x18]
8000290a:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8000290e:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80002912:	ef 49 ff f4 	st.w	r7[-12],r9
	tmp[1] = q1.v[2] * q2.v[0] - q1.v[0]*q2.v[2];
80002916:	70 3a       	ld.w	r10,r8[0xc]
80002918:	70 59       	ld.w	r9,r8[0x14]
8000291a:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8000291e:	70 1b       	ld.w	r11,r8[0x4]
80002920:	70 79       	ld.w	r9,r8[0x1c]
80002922:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
80002926:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8000292a:	ef 49 ff f8 	st.w	r7[-8],r9
	tmp[2] = q1.v[0] * q2.v[1] - q1.v[1]*q2.v[0];
8000292e:	70 1a       	ld.w	r10,r8[0x4]
80002930:	70 69       	ld.w	r9,r8[0x18]
80002932:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
80002936:	70 2b       	ld.w	r11,r8[0x8]
80002938:	70 59       	ld.w	r9,r8[0x14]
8000293a:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8000293e:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80002942:	ef 49 ff fc 	st.w	r7[-4],r9
	out.v[0] = q2.s*q1.v[0] + q1.s *q2.v[0] +tmp[0];
80002946:	70 4a       	ld.w	r10,r8[0x10]
80002948:	70 19       	ld.w	r9,r8[0x4]
8000294a:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8000294e:	70 0b       	ld.w	r11,r8[0x0]
80002950:	70 59       	ld.w	r9,r8[0x14]
80002952:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
80002956:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
8000295a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000295e:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
80002962:	ef 49 ff e8 	st.w	r7[-24],r9
	out.v[1] = q2.s*q1.v[1] + q1.s *q2.v[1] +tmp[1];
80002966:	70 4a       	ld.w	r10,r8[0x10]
80002968:	70 29       	ld.w	r9,r8[0x8]
8000296a:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8000296e:	70 0b       	ld.w	r11,r8[0x0]
80002970:	70 69       	ld.w	r9,r8[0x18]
80002972:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
80002976:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
8000297a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000297e:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
80002982:	ef 49 ff ec 	st.w	r7[-20],r9
	out.v[2] = q2.s*q1.v[2] + q1.s *q2.v[2] +tmp[2];
80002986:	70 4a       	ld.w	r10,r8[0x10]
80002988:	70 39       	ld.w	r9,r8[0xc]
8000298a:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8000298e:	70 0b       	ld.w	r11,r8[0x0]
80002990:	70 79       	ld.w	r9,r8[0x1c]
80002992:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
80002996:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
8000299a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000299e:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
800029a2:	ef 49 ff f0 	st.w	r7[-16],r9
	out.s= q1.s*q2.s - scalar_product(q1.v, q2.v);
800029a6:	70 0a       	ld.w	r10,r8[0x0]
800029a8:	70 49       	ld.w	r9,r8[0x10]
800029aa:	e5 a2 03 a9 	cop	cp0,cr3,cr10,cr9,0x44
800029ae:	f0 c9 ff f0 	sub	r9,r8,-16
800029b2:	2f c9       	sub	r9,-4
800029b4:	2f c8       	sub	r8,-4
800029b6:	12 9b       	mov	r11,r9
800029b8:	10 9c       	mov	r12,r8
800029ba:	c6 9f       	rcall	8000288c <scalar_product>
800029bc:	18 98       	mov	r8,r12
800029be:	e5 a1 08 38 	cop	cp0,cr8,cr3,cr8,0x42
800029c2:	ef 48 ff e4 	st.w	r7[-28],r8
	
	return out;
800029c6:	0a 98       	mov	r8,r5
800029c8:	ee c9 00 1c 	sub	r9,r7,28
800029cc:	20 08       	sub	r8,0
800029ce:	20 09       	sub	r9,0
800029d0:	72 0a       	ld.w	r10,r9[0x0]
800029d2:	91 0a       	st.w	r8[0x0],r10
800029d4:	72 1a       	ld.w	r10,r9[0x4]
800029d6:	91 1a       	st.w	r8[0x4],r10
800029d8:	72 2a       	ld.w	r10,r9[0x8]
800029da:	91 2a       	st.w	r8[0x8],r10
800029dc:	72 39       	ld.w	r9,r9[0xc]
800029de:	91 39       	st.w	r8[0xc],r9
}
800029e0:	0a 9c       	mov	r12,r5
800029e2:	2f 9d       	sub	sp,-28
800029e4:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
800029e8:	80 00       	ld.sh	r0,r0[0x0]
800029ea:	27 7a       	sub	r10,119

800029ec <quat_inv>:

UQuat_t static inline quat_inv(const UQuat_t q)
{
800029ec:	eb cd 40 80 	pushm	r7,lr
800029f0:	1a 97       	mov	r7,sp
800029f2:	20 5d       	sub	sp,20
800029f4:	ee c9 ff f8 	sub	r9,r7,-8
800029f8:	18 9a       	mov	r10,r12
	int i;
	
	UQuat_t qinv;
	qinv.s = q.s;
800029fa:	72 08       	ld.w	r8,r9[0x0]
800029fc:	ef 48 ff ec 	st.w	r7[-20],r8
	for (i=0;i<3;i++)
80002a00:	30 08       	mov	r8,0
80002a02:	ef 48 ff fc 	st.w	r7[-4],r8
80002a06:	c1 58       	rjmp	80002a30 <quat_inv+0x44>
	{
		qinv.v[i] = -q.v[i];
80002a08:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002a0c:	ee fb ff fc 	ld.w	r11,r7[-4]
80002a10:	2f fb       	sub	r11,-1
80002a12:	f2 0b 03 2b 	ld.w	r11,r9[r11<<0x2]
80002a16:	ee 1b 80 00 	eorh	r11,0x8000
80002a1a:	2f f8       	sub	r8,-1
80002a1c:	a3 68       	lsl	r8,0x2
80002a1e:	ee 08 00 08 	add	r8,r7,r8
80002a22:	f1 4b ff ec 	st.w	r8[-20],r11
{
	int i;
	
	UQuat_t qinv;
	qinv.s = q.s;
	for (i=0;i<3;i++)
80002a26:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002a2a:	2f f8       	sub	r8,-1
80002a2c:	ef 48 ff fc 	st.w	r7[-4],r8
80002a30:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002a34:	58 28       	cp.w	r8,2
80002a36:	fe 9a ff e9 	brle	80002a08 <quat_inv+0x1c>
	{
		qinv.v[i] = -q.v[i];
	}
	return qinv;
80002a3a:	14 98       	mov	r8,r10
80002a3c:	ee c9 00 14 	sub	r9,r7,20
80002a40:	20 08       	sub	r8,0
80002a42:	20 09       	sub	r9,0
80002a44:	72 0b       	ld.w	r11,r9[0x0]
80002a46:	91 0b       	st.w	r8[0x0],r11
80002a48:	72 1b       	ld.w	r11,r9[0x4]
80002a4a:	91 1b       	st.w	r8[0x4],r11
80002a4c:	72 2b       	ld.w	r11,r9[0x8]
80002a4e:	91 2b       	st.w	r8[0x8],r11
80002a50:	72 39       	ld.w	r9,r9[0xc]
80002a52:	91 39       	st.w	r8[0xc],r9
}
80002a54:	14 9c       	mov	r12,r10
80002a56:	2f bd       	sub	sp,-20
80002a58:	e3 cd 80 80 	ldm	sp++,r7,pc

80002a5c <quat_global_to_local>:

UQuat_t static inline quat_global_to_local(const UQuat_t qe, const UQuat_t qvect)
{
80002a5c:	eb cd 40 e8 	pushm	r3,r5-r7,lr
80002a60:	1a 97       	mov	r7,sp
80002a62:	20 cd       	sub	sp,48
80002a64:	4b c6       	lddpc	r6,80002b54 <quat_global_to_local+0xf8>
80002a66:	1e 26       	rsub	r6,pc
80002a68:	ee c5 ff ec 	sub	r5,r7,-20
80002a6c:	18 93       	mov	r3,r12
	UQuat_t qinv, qtmp;
	
	qinv = quat_inv(qe);
80002a6e:	ee ca 00 10 	sub	r10,r7,16
80002a72:	20 4d       	sub	sp,16
80002a74:	1a 98       	mov	r8,sp
80002a76:	0a 99       	mov	r9,r5
80002a78:	20 08       	sub	r8,0
80002a7a:	20 09       	sub	r9,0
80002a7c:	72 0b       	ld.w	r11,r9[0x0]
80002a7e:	91 0b       	st.w	r8[0x0],r11
80002a80:	72 1b       	ld.w	r11,r9[0x4]
80002a82:	91 1b       	st.w	r8[0x4],r11
80002a84:	72 2b       	ld.w	r11,r9[0x8]
80002a86:	91 2b       	st.w	r8[0x8],r11
80002a88:	72 39       	ld.w	r9,r9[0xc]
80002a8a:	91 39       	st.w	r8[0xc],r9
80002a8c:	14 9c       	mov	r12,r10
80002a8e:	ca ff       	rcall	800029ec <quat_inv>
80002a90:	2f cd       	sub	sp,-16
	qtmp = quat_multi(qinv,qvect);
80002a92:	ee ca 00 20 	sub	r10,r7,32
80002a96:	20 4d       	sub	sp,16
80002a98:	1a 98       	mov	r8,sp
80002a9a:	ea c9 ff f0 	sub	r9,r5,-16
80002a9e:	20 08       	sub	r8,0
80002aa0:	20 09       	sub	r9,0
80002aa2:	72 0b       	ld.w	r11,r9[0x0]
80002aa4:	91 0b       	st.w	r8[0x0],r11
80002aa6:	72 1b       	ld.w	r11,r9[0x4]
80002aa8:	91 1b       	st.w	r8[0x4],r11
80002aaa:	72 2b       	ld.w	r11,r9[0x8]
80002aac:	91 2b       	st.w	r8[0x8],r11
80002aae:	72 39       	ld.w	r9,r9[0xc]
80002ab0:	91 39       	st.w	r8[0xc],r9
80002ab2:	20 4d       	sub	sp,16
80002ab4:	1a 98       	mov	r8,sp
80002ab6:	ee c9 00 10 	sub	r9,r7,16
80002aba:	20 08       	sub	r8,0
80002abc:	20 09       	sub	r9,0
80002abe:	72 0b       	ld.w	r11,r9[0x0]
80002ac0:	91 0b       	st.w	r8[0x0],r11
80002ac2:	72 1b       	ld.w	r11,r9[0x4]
80002ac4:	91 1b       	st.w	r8[0x4],r11
80002ac6:	72 2b       	ld.w	r11,r9[0x8]
80002ac8:	91 2b       	st.w	r8[0x8],r11
80002aca:	72 39       	ld.w	r9,r9[0xc]
80002acc:	91 39       	st.w	r8[0xc],r9
80002ace:	14 9c       	mov	r12,r10
80002ad0:	c0 ef       	rcall	800028ec <quat_multi>
80002ad2:	2f 8d       	sub	sp,-32
	qtmp = quat_multi(qtmp,qe);
80002ad4:	ee ca 00 30 	sub	r10,r7,48
80002ad8:	20 4d       	sub	sp,16
80002ada:	1a 98       	mov	r8,sp
80002adc:	0a 99       	mov	r9,r5
80002ade:	20 08       	sub	r8,0
80002ae0:	20 09       	sub	r9,0
80002ae2:	72 0b       	ld.w	r11,r9[0x0]
80002ae4:	91 0b       	st.w	r8[0x0],r11
80002ae6:	72 1b       	ld.w	r11,r9[0x4]
80002ae8:	91 1b       	st.w	r8[0x4],r11
80002aea:	72 2b       	ld.w	r11,r9[0x8]
80002aec:	91 2b       	st.w	r8[0x8],r11
80002aee:	72 39       	ld.w	r9,r9[0xc]
80002af0:	91 39       	st.w	r8[0xc],r9
80002af2:	20 4d       	sub	sp,16
80002af4:	1a 98       	mov	r8,sp
80002af6:	ee c9 00 20 	sub	r9,r7,32
80002afa:	20 08       	sub	r8,0
80002afc:	20 09       	sub	r9,0
80002afe:	72 0b       	ld.w	r11,r9[0x0]
80002b00:	91 0b       	st.w	r8[0x0],r11
80002b02:	72 1b       	ld.w	r11,r9[0x4]
80002b04:	91 1b       	st.w	r8[0x4],r11
80002b06:	72 2b       	ld.w	r11,r9[0x8]
80002b08:	91 2b       	st.w	r8[0x8],r11
80002b0a:	72 39       	ld.w	r9,r9[0xc]
80002b0c:	91 39       	st.w	r8[0xc],r9
80002b0e:	14 9c       	mov	r12,r10
80002b10:	ce ee       	rcall	800028ec <quat_multi>
80002b12:	2f 8d       	sub	sp,-32
80002b14:	ee c8 00 20 	sub	r8,r7,32
80002b18:	ee c9 00 30 	sub	r9,r7,48
80002b1c:	20 08       	sub	r8,0
80002b1e:	20 09       	sub	r9,0
80002b20:	72 0a       	ld.w	r10,r9[0x0]
80002b22:	91 0a       	st.w	r8[0x0],r10
80002b24:	72 1a       	ld.w	r10,r9[0x4]
80002b26:	91 1a       	st.w	r8[0x4],r10
80002b28:	72 2a       	ld.w	r10,r9[0x8]
80002b2a:	91 2a       	st.w	r8[0x8],r10
80002b2c:	72 39       	ld.w	r9,r9[0xc]
80002b2e:	91 39       	st.w	r8[0xc],r9

	return qtmp;
80002b30:	06 98       	mov	r8,r3
80002b32:	ee c9 00 20 	sub	r9,r7,32
80002b36:	20 08       	sub	r8,0
80002b38:	20 09       	sub	r9,0
80002b3a:	72 0a       	ld.w	r10,r9[0x0]
80002b3c:	91 0a       	st.w	r8[0x0],r10
80002b3e:	72 1a       	ld.w	r10,r9[0x4]
80002b40:	91 1a       	st.w	r8[0x4],r10
80002b42:	72 2a       	ld.w	r10,r9[0x8]
80002b44:	91 2a       	st.w	r8[0x8],r10
80002b46:	72 39       	ld.w	r9,r9[0xc]
80002b48:	91 39       	st.w	r8[0xc],r9
}
80002b4a:	06 9c       	mov	r12,r3
80002b4c:	2f 4d       	sub	sp,-48
80002b4e:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
80002b52:	00 00       	add	r0,r0
80002b54:	80 00       	ld.sh	r0,r0[0x0]
80002b56:	28 ea       	sub	r10,-114

80002b58 <fast_sqrt>:
	
	return qtmp;
}

// fast newton iteration for approximate square root
float static inline fast_sqrt(float input) {
80002b58:	eb cd 40 c0 	pushm	r6-r7,lr
80002b5c:	1a 97       	mov	r7,sp
80002b5e:	20 2d       	sub	sp,8
80002b60:	4b 26       	lddpc	r6,80002c28 <fast_sqrt+0xd0>
80002b62:	1e 26       	rsub	r6,pc
80002b64:	ef 4c ff f8 	st.w	r7[-8],r12
	if (input<0) {
80002b68:	30 18       	mov	r8,1
80002b6a:	ee fa ff f8 	ld.w	r10,r7[-8]
80002b6e:	30 09       	mov	r9,0
80002b70:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80002b74:	e0 8c 00 03 	brvs	80002b7a <fast_sqrt+0x22>
80002b78:	c0 25       	brlt	80002b7c <fast_sqrt+0x24>
80002b7a:	30 08       	mov	r8,0
80002b7c:	5c 58       	castu.b	r8
80002b7e:	c0 30       	breq	80002b84 <fast_sqrt+0x2c>
		//dbg_print("negative root");
		return 0.0;
80002b80:	30 08       	mov	r8,0
80002b82:	c4 f8       	rjmp	80002c20 <fast_sqrt+0xc8>
	}
	float result=1.0;
80002b84:	fc 18 3f 80 	movh	r8,0x3f80
80002b88:	ef 48 ff fc 	st.w	r7[-4],r8
	result=0.5*(result+(input/result));
80002b8c:	ee fb ff fc 	ld.w	r11,r7[-4]
80002b90:	ee fc ff f8 	ld.w	r12,r7[-8]
80002b94:	f0 16 00 08 	mcall	r6[32]
80002b98:	18 98       	mov	r8,r12
80002b9a:	10 99       	mov	r9,r8
80002b9c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002ba0:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80002ba4:	fc 18 3f 00 	movh	r8,0x3f00
80002ba8:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80002bac:	ef 48 ff fc 	st.w	r7[-4],r8
	result=0.5*(result+(input/result));
80002bb0:	ee fb ff fc 	ld.w	r11,r7[-4]
80002bb4:	ee fc ff f8 	ld.w	r12,r7[-8]
80002bb8:	f0 16 00 08 	mcall	r6[32]
80002bbc:	18 98       	mov	r8,r12
80002bbe:	10 99       	mov	r9,r8
80002bc0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002bc4:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80002bc8:	fc 18 3f 00 	movh	r8,0x3f00
80002bcc:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80002bd0:	ef 48 ff fc 	st.w	r7[-4],r8
	result=0.5*(result+(input/result));
80002bd4:	ee fb ff fc 	ld.w	r11,r7[-4]
80002bd8:	ee fc ff f8 	ld.w	r12,r7[-8]
80002bdc:	f0 16 00 08 	mcall	r6[32]
80002be0:	18 98       	mov	r8,r12
80002be2:	10 99       	mov	r9,r8
80002be4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002be8:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80002bec:	fc 18 3f 00 	movh	r8,0x3f00
80002bf0:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80002bf4:	ef 48 ff fc 	st.w	r7[-4],r8
	result=0.5*(result+(input/result));
80002bf8:	ee fb ff fc 	ld.w	r11,r7[-4]
80002bfc:	ee fc ff f8 	ld.w	r12,r7[-8]
80002c00:	f0 16 00 08 	mcall	r6[32]
80002c04:	18 98       	mov	r8,r12
80002c06:	10 99       	mov	r9,r8
80002c08:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002c0c:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80002c10:	fc 18 3f 00 	movh	r8,0x3f00
80002c14:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80002c18:	ef 48 ff fc 	st.w	r7[-4],r8
	return result;
80002c1c:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80002c20:	10 9c       	mov	r12,r8
80002c22:	2f ed       	sub	sp,-8
80002c24:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002c28:	80 00       	ld.sh	r0,r0[0x0]
80002c2a:	29 e6       	sub	r6,-98

80002c2c <vector_norm_sqr>:

float static inline vector_norm_sqr(float u[])
{
80002c2c:	eb cd 40 c0 	pushm	r6-r7,lr
80002c30:	1a 97       	mov	r7,sp
80002c32:	20 2d       	sub	sp,8
80002c34:	48 96       	lddpc	r6,80002c58 <vector_norm_sqr+0x2c>
80002c36:	1e 26       	rsub	r6,pc
80002c38:	ef 4c ff f8 	st.w	r7[-8],r12
	float norm = scalar_product(u,u);
80002c3c:	ee fb ff f8 	ld.w	r11,r7[-8]
80002c40:	ee fc ff f8 	ld.w	r12,r7[-8]
80002c44:	c2 4e       	rcall	8000288c <scalar_product>
80002c46:	18 98       	mov	r8,r12
80002c48:	ef 48 ff fc 	st.w	r7[-4],r8
	return norm;
80002c4c:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80002c50:	10 9c       	mov	r12,r8
80002c52:	2f ed       	sub	sp,-8
80002c54:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002c58:	80 00       	ld.sh	r0,r0[0x0]
80002c5a:	2a ba       	sub	r10,-85

80002c5c <vector_norm>:

float static inline vector_norm(float u[])
{
80002c5c:	eb cd 40 c0 	pushm	r6-r7,lr
80002c60:	1a 97       	mov	r7,sp
80002c62:	20 1d       	sub	sp,4
80002c64:	48 86       	lddpc	r6,80002c84 <vector_norm+0x28>
80002c66:	1e 26       	rsub	r6,pc
80002c68:	ef 4c ff fc 	st.w	r7[-4],r12
	return fast_sqrt(vector_norm_sqr(u));
80002c6c:	ee fc ff fc 	ld.w	r12,r7[-4]
80002c70:	cd ef       	rcall	80002c2c <vector_norm_sqr>
80002c72:	18 98       	mov	r8,r12
80002c74:	10 9c       	mov	r12,r8
80002c76:	c7 1f       	rcall	80002b58 <fast_sqrt>
80002c78:	18 98       	mov	r8,r12
}
80002c7a:	10 9c       	mov	r12,r8
80002c7c:	2f fd       	sub	sp,-4
80002c7e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002c82:	00 00       	add	r0,r0
80002c84:	80 00       	ld.sh	r0,r0[0x0]
80002c86:	2a ea       	sub	r10,-82

80002c88 <f_min>:
	}else{
		return -a;
	}
}

static inline float f_min(const float a, const float b){
80002c88:	eb cd 40 80 	pushm	r7,lr
80002c8c:	1a 97       	mov	r7,sp
80002c8e:	20 2d       	sub	sp,8
80002c90:	ef 4c ff fc 	st.w	r7[-4],r12
80002c94:	ef 4b ff f8 	st.w	r7[-8],r11
	if (a <= b)
80002c98:	30 18       	mov	r8,1
80002c9a:	ee fa ff fc 	ld.w	r10,r7[-4]
80002c9e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002ca2:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80002ca6:	e0 8c 00 04 	brvs	80002cae <f_min+0x26>
80002caa:	e0 8a 00 03 	brle	80002cb0 <f_min+0x28>
80002cae:	30 08       	mov	r8,0
80002cb0:	5c 58       	castu.b	r8
80002cb2:	c0 40       	breq	80002cba <f_min+0x32>
	{
		return a;
80002cb4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002cb8:	c0 38       	rjmp	80002cbe <f_min+0x36>
	}else{
		return b;
80002cba:	ee f8 ff f8 	ld.w	r8,r7[-8]
	}
}
80002cbe:	10 9c       	mov	r12,r8
80002cc0:	2f ed       	sub	sp,-8
80002cc2:	e3 cd 80 80 	ldm	sp++,r7,pc

80002cc6 <f_max>:

static inline float f_max(const float a, const float b){
80002cc6:	eb cd 40 80 	pushm	r7,lr
80002cca:	1a 97       	mov	r7,sp
80002ccc:	20 2d       	sub	sp,8
80002cce:	ef 4c ff fc 	st.w	r7[-4],r12
80002cd2:	ef 4b ff f8 	st.w	r7[-8],r11
	if (a >= b)
80002cd6:	30 18       	mov	r8,1
80002cd8:	ee fa ff fc 	ld.w	r10,r7[-4]
80002cdc:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002ce0:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80002ce4:	e0 8c 00 03 	brvs	80002cea <f_max+0x24>
80002ce8:	c0 24       	brge	80002cec <f_max+0x26>
80002cea:	30 08       	mov	r8,0
80002cec:	5c 58       	castu.b	r8
80002cee:	c0 40       	breq	80002cf6 <f_max+0x30>
	{
		return a;
80002cf0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002cf4:	c0 38       	rjmp	80002cfa <f_max+0x34>
	}else{
		return b;
80002cf6:	ee f8 ff f8 	ld.w	r8,r7[-8]
	}
}
80002cfa:	10 9c       	mov	r12,r8
80002cfc:	2f ed       	sub	sp,-8
80002cfe:	e3 cd 80 80 	ldm	sp++,r7,pc

80002d02 <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
80002d02:	eb cd 40 c0 	pushm	r6-r7,lr
80002d06:	1a 97       	mov	r7,sp
80002d08:	20 6d       	sub	sp,24
80002d0a:	49 f6       	lddpc	r6,80002d84 <interpolate+0x82>
80002d0c:	1e 26       	rsub	r6,pc
80002d0e:	ef 4c ff f8 	st.w	r7[-8],r12
80002d12:	ef 4b ff f4 	st.w	r7[-12],r11
80002d16:	ef 4a ff f0 	st.w	r7[-16],r10
80002d1a:	ef 49 ff ec 	st.w	r7[-20],r9
80002d1e:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
80002d22:	ee f9 ff f4 	ld.w	r9,r7[-12]
80002d26:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002d2a:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
80002d2e:	c0 41       	brne	80002d36 <interpolate+0x34>
	{
		return y1;
80002d30:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002d34:	c2 38       	rjmp	80002d7a <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
80002d36:	ee f9 ff e8 	ld.w	r9,r7[-24]
80002d3a:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002d3e:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80002d42:	ee fa ff f8 	ld.w	r10,r7[-8]
80002d46:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002d4a:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80002d4e:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80002d52:	ee fa ff f0 	ld.w	r10,r7[-16]
80002d56:	ee f9 ff f4 	ld.w	r9,r7[-12]
80002d5a:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80002d5e:	12 9b       	mov	r11,r9
80002d60:	10 9c       	mov	r12,r8
80002d62:	f0 16 00 08 	mcall	r6[32]
80002d66:	18 98       	mov	r8,r12
80002d68:	10 99       	mov	r9,r8
80002d6a:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002d6e:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80002d72:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
80002d76:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
80002d7a:	10 9c       	mov	r12,r8
80002d7c:	2f ad       	sub	sp,-24
80002d7e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002d82:	00 00       	add	r0,r0
80002d84:	80 00       	ld.sh	r0,r0[0x0]
80002d86:	2b 90       	sub	r0,-71

80002d88 <init_orca>:
float timeHorizon, invTimeHorizon;

int8_t loop_count_orca = 0;

void init_orca()
{
80002d88:	eb cd 40 c0 	pushm	r6-r7,lr
80002d8c:	1a 97       	mov	r7,sp
80002d8e:	49 26       	lddpc	r6,80002dd4 <init_orca+0x4c>
80002d90:	1e 26       	rsub	r6,pc
	centralData = get_central_data();
80002d92:	f0 16 00 32 	mcall	r6[200]
80002d96:	18 99       	mov	r9,r12
80002d98:	ec f8 00 00 	ld.w	r8,r6[0]
80002d9c:	91 09       	st.w	r8[0x0],r9
	centralData->safe_size = SIZE_VHC_ORCA;
80002d9e:	ec f8 00 00 	ld.w	r8,r6[0]
80002da2:	70 08       	ld.w	r8,r8[0x0]
80002da4:	fc 19 40 a0 	movh	r9,0x40a0
80002da8:	f1 49 11 00 	st.w	r8[4352],r9
		
	timeHorizon = 8.0;
80002dac:	ec f8 04 10 	ld.w	r8,r6[1040]
80002db0:	fc 19 41 00 	movh	r9,0x4100
80002db4:	91 09       	st.w	r8[0x0],r9
	invTimeHorizon = 1.0/timeHorizon;
80002db6:	ec f8 04 10 	ld.w	r8,r6[1040]
80002dba:	70 08       	ld.w	r8,r8[0x0]
80002dbc:	10 9b       	mov	r11,r8
80002dbe:	fc 1c 3f 80 	movh	r12,0x3f80
80002dc2:	f0 16 00 08 	mcall	r6[32]
80002dc6:	18 98       	mov	r8,r12
80002dc8:	10 99       	mov	r9,r8
80002dca:	ec f8 02 90 	ld.w	r8,r6[656]
80002dce:	91 09       	st.w	r8[0x0],r9
}
80002dd0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002dd4:	80 00       	ld.sh	r0,r0[0x0]
80002dd6:	2c 14       	sub	r4,-63
80002dd8:	43 6f       	lddsp	pc,sp[0xd8]
80002dda:	6c 6c       	ld.w	r12,r6[0x18]
80002ddc:	69 73       	ld.w	r3,r4[0x5c]
80002dde:	69 6f       	ld.w	pc,r4[0x58]
80002de0:	6e 21       	ld.w	r1,r7[0x8]
80002de2:	20 00       	sub	r0,0
80002de4:	44 69       	lddsp	r9,sp[0x118]
80002de6:	73 74       	ld.w	r4,r9[0x5c]
80002de8:	61 6e       	ld.w	lr,r0[0x58]
80002dea:	63 65       	ld.w	r5,r1[0x58]
80002dec:	20 77       	sub	r7,7
80002dee:	69 74       	ld.w	r4,r4[0x5c]
80002df0:	68 20       	ld.w	r0,r4[0x8]
80002df2:	6e 65       	ld.w	r5,r7[0x18]
80002df4:	69 67       	ld.w	r7,r4[0x58]
80002df6:	68 62       	ld.w	r2,r4[0x18]
80002df8:	6f 72       	ld.w	r2,r7[0x5c]
80002dfa:	20 00       	sub	r0,0
80002dfc:	28 78       	sub	r8,-121
80002dfe:	31 30       	mov	r0,19
80002e00:	30 29       	mov	r9,2
80002e02:	3a 00       	mov	r0,-96
80002e04:	0a 00       	add	r0,r5
80002e06:	00 00       	add	r0,r0
80002e08:	4f 72       	lddpc	r2,80002fe4 <computeNewVelocity+0x1b8>
80002e0a:	63 61       	ld.w	r1,r1[0x58]
80002e0c:	20 64       	sub	r4,6
80002e0e:	69 66       	ld.w	r6,r4[0x58]
80002e10:	66 76       	ld.w	r6,r3[0x1c]
80002e12:	65 6c       	ld.w	r12,r2[0x58]
80002e14:	3a 00       	mov	r0,-96
80002e16:	00 00       	add	r0,r0
80002e18:	2c 20       	sub	r0,-62
80002e1a:	4f 70       	lddpc	r0,80002ff4 <computeNewVelocity+0x1c8>
80002e1c:	74 69       	ld.w	r9,r10[0x18]
80002e1e:	6d 61       	ld.w	r1,r6[0x58]
80002e20:	6c 3a       	ld.w	r10,r6[0xc]
80002e22:	00 00       	add	r0,r0
80002e24:	2c 20       	sub	r0,-62
80002e26:	4e 65       	lddpc	r5,80002fbc <computeNewVelocity+0x190>
80002e28:	77 3a       	ld.w	r10,r11[0x4c]
	...

80002e2c <computeNewVelocity>:

void computeNewVelocity(float OptimalVelocity[], float NewVelocity[])
{
80002e2c:	eb cd 40 ee 	pushm	r1-r3,r5-r7,lr
80002e30:	1a 97       	mov	r7,sp
80002e32:	fa cd 02 34 	sub	sp,sp,564
80002e36:	fe f6 09 ee 	ld.w	r6,pc[2542]
80002e3a:	1e 26       	rsub	r6,pc
80002e3c:	ef 4c fd e0 	st.w	r7[-544],r12
80002e40:	ef 4b fd dc 	st.w	r7[-548],r11
	float relativePosition[3], relativeVelocity[3];
	float combinedRadius, distSq, combinedRadiusSq, dotProduct, wLength, wLenghtSq;
	
	float w[3], unitW[3], u[3], neighor_bf[3];
	
	for (i=0;i<3;i++)
80002e44:	30 08       	mov	r8,0
80002e46:	ef 68 ff cf 	st.b	r7[-49],r8
80002e4a:	c1 68       	rjmp	80002e76 <computeNewVelocity+0x4a>
	{
		NewVelocity[i] = OptimalVelocity[i];
80002e4c:	ef 28 ff cf 	ld.sb	r8,r7[-49]
80002e50:	a3 68       	lsl	r8,0x2
80002e52:	ee f9 fd dc 	ld.w	r9,r7[-548]
80002e56:	f2 08 00 08 	add	r8,r9,r8
80002e5a:	ef 29 ff cf 	ld.sb	r9,r7[-49]
80002e5e:	a3 69       	lsl	r9,0x2
80002e60:	ee fa fd e0 	ld.w	r10,r7[-544]
80002e64:	f4 09 00 09 	add	r9,r10,r9
80002e68:	72 09       	ld.w	r9,r9[0x0]
80002e6a:	91 09       	st.w	r8[0x0],r9
	float relativePosition[3], relativeVelocity[3];
	float combinedRadius, distSq, combinedRadiusSq, dotProduct, wLength, wLenghtSq;
	
	float w[3], unitW[3], u[3], neighor_bf[3];
	
	for (i=0;i<3;i++)
80002e6c:	ef 38 ff cf 	ld.ub	r8,r7[-49]
80002e70:	2f f8       	sub	r8,-1
80002e72:	ef 68 ff cf 	st.b	r7[-49],r8
80002e76:	ef 39 ff cf 	ld.ub	r9,r7[-49]
80002e7a:	30 28       	mov	r8,2
80002e7c:	f0 09 18 00 	cp.b	r9,r8
80002e80:	fe 9a ff e6 	brle	80002e4c <computeNewVelocity+0x20>
	{
		NewVelocity[i] = OptimalVelocity[i];
	}
	
	/* Create agent ORCA planes. */
	for (ind=0; ind<centralData->number_of_neighbors; ind++)
80002e84:	30 08       	mov	r8,0
80002e86:	ef 68 ff ce 	st.b	r7[-50],r8
80002e8a:	e0 8f 04 22 	bral	800036ce <computeNewVelocity+0x8a2>
		//{
			//relativePosition[i] = centralData->listNeighbors[ind].position[i] - centralData->position_estimator.localPosition.pos[i];
			//relativeVelocity[i] = centralData->position_estimator.vel_bf[i] - neighor_bf[i];
		//}
		
		for (i=0;i<3;i++)
80002e8e:	30 08       	mov	r8,0
80002e90:	ef 68 ff cf 	st.b	r7[-49],r8
80002e94:	c4 68       	rjmp	80002f20 <computeNewVelocity+0xf4>
		{
			relativePosition[i] = centralData->listNeighbors[ind].position[i] - centralData->position_estimator.localPosition.pos[i];
80002e96:	ef 28 ff cf 	ld.sb	r8,r7[-49]
80002e9a:	ec f9 00 00 	ld.w	r9,r6[0]
80002e9e:	72 09       	ld.w	r9,r9[0x0]
80002ea0:	ef 2b ff ce 	ld.sb	r11,r7[-50]
80002ea4:	ef 2a ff cf 	ld.sb	r10,r7[-49]
80002ea8:	a3 7b       	lsl	r11,0x3
80002eaa:	f6 0a 00 0a 	add	r10,r11,r10
80002eae:	f4 ca fb be 	sub	r10,r10,-1090
80002eb2:	f2 0a 03 2a 	ld.w	r10,r9[r10<<0x2]
80002eb6:	ec f9 00 00 	ld.w	r9,r6[0]
80002eba:	72 09       	ld.w	r9,r9[0x0]
80002ebc:	ef 2b ff cf 	ld.sb	r11,r7[-49]
80002ec0:	f6 cb fc 99 	sub	r11,r11,-871
80002ec4:	f2 0b 03 29 	ld.w	r9,r9[r11<<0x2]
80002ec8:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80002ecc:	a3 68       	lsl	r8,0x2
80002ece:	ee 08 00 08 	add	r8,r7,r8
80002ed2:	f1 49 fe 38 	st.w	r8[-456],r9
			relativeVelocity[i] = centralData->position_estimator.vel[i] - centralData->listNeighbors[ind].velocity[i];
80002ed6:	ef 28 ff cf 	ld.sb	r8,r7[-49]
80002eda:	ec f9 00 00 	ld.w	r9,r6[0]
80002ede:	72 09       	ld.w	r9,r9[0x0]
80002ee0:	ef 2a ff cf 	ld.sb	r10,r7[-49]
80002ee4:	f4 ca fc a3 	sub	r10,r10,-861
80002ee8:	f2 0a 03 2a 	ld.w	r10,r9[r10<<0x2]
80002eec:	ec f9 00 00 	ld.w	r9,r6[0]
80002ef0:	72 09       	ld.w	r9,r9[0x0]
80002ef2:	ef 2c ff ce 	ld.sb	r12,r7[-50]
80002ef6:	ef 2b ff cf 	ld.sb	r11,r7[-49]
80002efa:	a3 7c       	lsl	r12,0x3
80002efc:	f8 0b 00 0b 	add	r11,r12,r11
80002f00:	f6 cb fb bb 	sub	r11,r11,-1093
80002f04:	f2 0b 03 29 	ld.w	r9,r9[r11<<0x2]
80002f08:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80002f0c:	a3 68       	lsl	r8,0x2
80002f0e:	ee 08 00 08 	add	r8,r7,r8
80002f12:	f1 49 fe 2c 	st.w	r8[-468],r9
		//{
			//relativePosition[i] = centralData->listNeighbors[ind].position[i] - centralData->position_estimator.localPosition.pos[i];
			//relativeVelocity[i] = centralData->position_estimator.vel_bf[i] - neighor_bf[i];
		//}
		
		for (i=0;i<3;i++)
80002f16:	ef 38 ff cf 	ld.ub	r8,r7[-49]
80002f1a:	2f f8       	sub	r8,-1
80002f1c:	ef 68 ff cf 	st.b	r7[-49],r8
80002f20:	ef 39 ff cf 	ld.ub	r9,r7[-49]
80002f24:	30 28       	mov	r8,2
80002f26:	f0 09 18 00 	cp.b	r9,r8
80002f2a:	fe 9a ff b6 	brle	80002e96 <computeNewVelocity+0x6a>
		{
			relativePosition[i] = centralData->listNeighbors[ind].position[i] - centralData->position_estimator.localPosition.pos[i];
			relativeVelocity[i] = centralData->position_estimator.vel[i] - centralData->listNeighbors[ind].velocity[i];
		}
		
		q_neighbor.s = 0.0;
80002f2e:	30 08       	mov	r8,0
80002f30:	ef 48 fe 54 	st.w	r7[-428],r8
		q_neighbor.v[0] = relativeVelocity[0];
80002f34:	ee f8 fe 2c 	ld.w	r8,r7[-468]
80002f38:	ef 48 fe 58 	st.w	r7[-424],r8
		q_neighbor.v[1] = relativeVelocity[1];
80002f3c:	ee f8 fe 30 	ld.w	r8,r7[-464]
80002f40:	ef 48 fe 5c 	st.w	r7[-420],r8
		q_neighbor.v[2] = relativeVelocity[2];
80002f44:	ee f8 fe 34 	ld.w	r8,r7[-460]
80002f48:	ef 48 fe 60 	st.w	r7[-416],r8
		q_neighbor_bf = quat_global_to_local(centralData->imu1.attitude.qe,q_neighbor);
80002f4c:	ec f8 00 00 	ld.w	r8,r6[0]
80002f50:	70 0b       	ld.w	r11,r8[0x0]
80002f52:	ee ca 01 bc 	sub	r10,r7,444
80002f56:	20 4d       	sub	sp,16
80002f58:	1a 98       	mov	r8,sp
80002f5a:	ee c9 01 ac 	sub	r9,r7,428
80002f5e:	20 08       	sub	r8,0
80002f60:	20 09       	sub	r9,0
80002f62:	72 0c       	ld.w	r12,r9[0x0]
80002f64:	91 0c       	st.w	r8[0x0],r12
80002f66:	72 1c       	ld.w	r12,r9[0x4]
80002f68:	91 1c       	st.w	r8[0x4],r12
80002f6a:	72 2c       	ld.w	r12,r9[0x8]
80002f6c:	91 2c       	st.w	r8[0x8],r12
80002f6e:	72 39       	ld.w	r9,r9[0xc]
80002f70:	91 39       	st.w	r8[0xc],r9
80002f72:	20 4d       	sub	sp,16
80002f74:	1a 98       	mov	r8,sp
80002f76:	16 99       	mov	r9,r11
80002f78:	20 08       	sub	r8,0
80002f7a:	20 09       	sub	r9,0
80002f7c:	72 0b       	ld.w	r11,r9[0x0]
80002f7e:	91 0b       	st.w	r8[0x0],r11
80002f80:	72 1b       	ld.w	r11,r9[0x4]
80002f82:	91 1b       	st.w	r8[0x4],r11
80002f84:	72 2b       	ld.w	r11,r9[0x8]
80002f86:	91 2b       	st.w	r8[0x8],r11
80002f88:	72 39       	ld.w	r9,r9[0xc]
80002f8a:	91 39       	st.w	r8[0xc],r9
80002f8c:	14 9c       	mov	r12,r10
80002f8e:	fe b0 fd 67 	rcall	80002a5c <quat_global_to_local>
80002f92:	2f 8d       	sub	sp,-32
		
		neighor_bf[0] = q_neighbor_bf.v[0];
80002f94:	ee f8 fe 48 	ld.w	r8,r7[-440]
80002f98:	ef 48 fd fc 	st.w	r7[-516],r8
		neighor_bf[1] = q_neighbor_bf.v[1];
80002f9c:	ee f8 fe 4c 	ld.w	r8,r7[-436]
80002fa0:	ef 48 fe 00 	st.w	r7[-512],r8
		neighor_bf[2] = q_neighbor_bf.v[2];
80002fa4:	ee f8 fe 50 	ld.w	r8,r7[-432]
80002fa8:	ef 48 fe 04 	st.w	r7[-508],r8
		
		for (i=0;i<3;i++)
80002fac:	30 08       	mov	r8,0
80002fae:	ef 68 ff cf 	st.b	r7[-49],r8
80002fb2:	c1 58       	rjmp	80002fdc <computeNewVelocity+0x1b0>
		{
			relativeVelocity[i] = neighor_bf[i];
80002fb4:	ef 2a ff cf 	ld.sb	r10,r7[-49]
80002fb8:	ef 28 ff cf 	ld.sb	r8,r7[-49]
80002fbc:	a3 68       	lsl	r8,0x2
80002fbe:	ee 08 00 08 	add	r8,r7,r8
80002fc2:	f0 f9 fd fc 	ld.w	r9,r8[-516]
80002fc6:	f4 08 15 02 	lsl	r8,r10,0x2
80002fca:	ee 08 00 08 	add	r8,r7,r8
80002fce:	f1 49 fe 2c 	st.w	r8[-468],r9
		
		neighor_bf[0] = q_neighbor_bf.v[0];
		neighor_bf[1] = q_neighbor_bf.v[1];
		neighor_bf[2] = q_neighbor_bf.v[2];
		
		for (i=0;i<3;i++)
80002fd2:	ef 38 ff cf 	ld.ub	r8,r7[-49]
80002fd6:	2f f8       	sub	r8,-1
80002fd8:	ef 68 ff cf 	st.b	r7[-49],r8
80002fdc:	ef 39 ff cf 	ld.ub	r9,r7[-49]
80002fe0:	30 28       	mov	r8,2
80002fe2:	f0 09 18 00 	cp.b	r9,r8
80002fe6:	fe 9a ff e7 	brle	80002fb4 <computeNewVelocity+0x188>
		{
			relativeVelocity[i] = neighor_bf[i];
		}
		
		q_neighbor.s = 0.0;
80002fea:	30 08       	mov	r8,0
80002fec:	ef 48 fe 54 	st.w	r7[-428],r8
		q_neighbor.v[0] = relativePosition[0];
80002ff0:	ee f8 fe 38 	ld.w	r8,r7[-456]
80002ff4:	ef 48 fe 58 	st.w	r7[-424],r8
		q_neighbor.v[1] = relativePosition[1];
80002ff8:	ee f8 fe 3c 	ld.w	r8,r7[-452]
80002ffc:	ef 48 fe 5c 	st.w	r7[-420],r8
		q_neighbor.v[2] = relativePosition[2];
80003000:	ee f8 fe 40 	ld.w	r8,r7[-448]
80003004:	ef 48 fe 60 	st.w	r7[-416],r8
		q_neighbor_bf = quat_global_to_local(centralData->imu1.attitude.qe,q_neighbor);
80003008:	ec f8 00 00 	ld.w	r8,r6[0]
8000300c:	70 0b       	ld.w	r11,r8[0x0]
8000300e:	ee ca 02 34 	sub	r10,r7,564
80003012:	20 4d       	sub	sp,16
80003014:	1a 98       	mov	r8,sp
80003016:	ee c9 01 ac 	sub	r9,r7,428
8000301a:	20 08       	sub	r8,0
8000301c:	20 09       	sub	r9,0
8000301e:	72 0c       	ld.w	r12,r9[0x0]
80003020:	91 0c       	st.w	r8[0x0],r12
80003022:	72 1c       	ld.w	r12,r9[0x4]
80003024:	91 1c       	st.w	r8[0x4],r12
80003026:	72 2c       	ld.w	r12,r9[0x8]
80003028:	91 2c       	st.w	r8[0x8],r12
8000302a:	72 39       	ld.w	r9,r9[0xc]
8000302c:	91 39       	st.w	r8[0xc],r9
8000302e:	20 4d       	sub	sp,16
80003030:	1a 98       	mov	r8,sp
80003032:	16 99       	mov	r9,r11
80003034:	20 08       	sub	r8,0
80003036:	20 09       	sub	r9,0
80003038:	72 0b       	ld.w	r11,r9[0x0]
8000303a:	91 0b       	st.w	r8[0x0],r11
8000303c:	72 1b       	ld.w	r11,r9[0x4]
8000303e:	91 1b       	st.w	r8[0x4],r11
80003040:	72 2b       	ld.w	r11,r9[0x8]
80003042:	91 2b       	st.w	r8[0x8],r11
80003044:	72 39       	ld.w	r9,r9[0xc]
80003046:	91 39       	st.w	r8[0xc],r9
80003048:	14 9c       	mov	r12,r10
8000304a:	fe b0 fd 09 	rcall	80002a5c <quat_global_to_local>
8000304e:	2f 8d       	sub	sp,-32
80003050:	ee c8 01 bc 	sub	r8,r7,444
80003054:	ee c9 02 34 	sub	r9,r7,564
80003058:	20 08       	sub	r8,0
8000305a:	20 09       	sub	r9,0
8000305c:	72 0a       	ld.w	r10,r9[0x0]
8000305e:	91 0a       	st.w	r8[0x0],r10
80003060:	72 1a       	ld.w	r10,r9[0x4]
80003062:	91 1a       	st.w	r8[0x4],r10
80003064:	72 2a       	ld.w	r10,r9[0x8]
80003066:	91 2a       	st.w	r8[0x8],r10
80003068:	72 39       	ld.w	r9,r9[0xc]
8000306a:	91 39       	st.w	r8[0xc],r9
		
		neighor_bf[0] = q_neighbor_bf.v[0];
8000306c:	ee f8 fe 48 	ld.w	r8,r7[-440]
80003070:	ef 48 fd fc 	st.w	r7[-516],r8
		neighor_bf[1] = q_neighbor_bf.v[1];
80003074:	ee f8 fe 4c 	ld.w	r8,r7[-436]
80003078:	ef 48 fe 00 	st.w	r7[-512],r8
		neighor_bf[2] = q_neighbor_bf.v[2];
8000307c:	ee f8 fe 50 	ld.w	r8,r7[-432]
80003080:	ef 48 fe 04 	st.w	r7[-508],r8
		
		for (i=0;i<3;i++)
80003084:	30 08       	mov	r8,0
80003086:	ef 68 ff cf 	st.b	r7[-49],r8
8000308a:	c1 58       	rjmp	800030b4 <computeNewVelocity+0x288>
		{
			relativePosition[i] = neighor_bf[i];
8000308c:	ef 2a ff cf 	ld.sb	r10,r7[-49]
80003090:	ef 28 ff cf 	ld.sb	r8,r7[-49]
80003094:	a3 68       	lsl	r8,0x2
80003096:	ee 08 00 08 	add	r8,r7,r8
8000309a:	f0 f9 fd fc 	ld.w	r9,r8[-516]
8000309e:	f4 08 15 02 	lsl	r8,r10,0x2
800030a2:	ee 08 00 08 	add	r8,r7,r8
800030a6:	f1 49 fe 38 	st.w	r8[-456],r9
		
		neighor_bf[0] = q_neighbor_bf.v[0];
		neighor_bf[1] = q_neighbor_bf.v[1];
		neighor_bf[2] = q_neighbor_bf.v[2];
		
		for (i=0;i<3;i++)
800030aa:	ef 38 ff cf 	ld.ub	r8,r7[-49]
800030ae:	2f f8       	sub	r8,-1
800030b0:	ef 68 ff cf 	st.b	r7[-49],r8
800030b4:	ef 39 ff cf 	ld.ub	r9,r7[-49]
800030b8:	30 28       	mov	r8,2
800030ba:	f0 09 18 00 	cp.b	r9,r8
800030be:	fe 9a ff e7 	brle	8000308c <computeNewVelocity+0x260>
		{
			relativePosition[i] = neighor_bf[i];
		}
		
		distSq = vector_norm_sqr(relativePosition);
800030c2:	ee c8 01 c8 	sub	r8,r7,456
800030c6:	10 9c       	mov	r12,r8
800030c8:	fe b0 fd b2 	rcall	80002c2c <vector_norm_sqr>
800030cc:	18 98       	mov	r8,r12
800030ce:	ef 48 ff d4 	st.w	r7[-44],r8
		combinedRadius = centralData->safe_size + centralData->listNeighbors[ind].size;
800030d2:	ec f8 00 00 	ld.w	r8,r6[0]
800030d6:	70 08       	ld.w	r8,r8[0x0]
800030d8:	f0 f9 11 00 	ld.w	r9,r8[4352]
800030dc:	ec f8 00 00 	ld.w	r8,r6[0]
800030e0:	70 0a       	ld.w	r10,r8[0x0]
800030e2:	ef 28 ff ce 	ld.sb	r8,r7[-50]
800030e6:	f0 c8 ff 77 	sub	r8,r8,-137
800030ea:	a5 78       	lsl	r8,0x5
800030ec:	f4 08 00 08 	add	r8,r10,r8
800030f0:	70 08       	ld.w	r8,r8[0x0]
800030f2:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
800030f6:	ef 48 ff d0 	st.w	r7[-48],r8
		combinedRadiusSq = SQR(combinedRadius);
800030fa:	ee f9 ff d0 	ld.w	r9,r7[-48]
800030fe:	ee f8 ff d0 	ld.w	r8,r7[-48]
80003102:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80003106:	ef 48 ff d8 	st.w	r7[-40],r8
		
		
		if (distSq > combinedRadiusSq)
8000310a:	30 18       	mov	r8,1
8000310c:	ee fa ff d4 	ld.w	r10,r7[-44]
80003110:	ee f9 ff d8 	ld.w	r9,r7[-40]
80003114:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80003118:	e0 8c 00 04 	brvs	80003120 <computeNewVelocity+0x2f4>
8000311c:	e0 89 00 03 	brgt	80003122 <computeNewVelocity+0x2f6>
80003120:	30 08       	mov	r8,0
80003122:	5c 58       	castu.b	r8
80003124:	e0 80 01 c7 	breq	800034b2 <computeNewVelocity+0x686>
		{
			for (i=0;i<3;i++)
80003128:	30 08       	mov	r8,0
8000312a:	ef 68 ff cf 	st.b	r7[-49],r8
8000312e:	c2 38       	rjmp	80003174 <computeNewVelocity+0x348>
			{
				w[i] = relativeVelocity[i] - invTimeHorizon * relativePosition[i];
80003130:	ef 2a ff cf 	ld.sb	r10,r7[-49]
80003134:	ef 28 ff cf 	ld.sb	r8,r7[-49]
80003138:	a3 68       	lsl	r8,0x2
8000313a:	ee 08 00 08 	add	r8,r7,r8
8000313e:	f0 f9 fe 2c 	ld.w	r9,r8[-468]
80003142:	ef 28 ff cf 	ld.sb	r8,r7[-49]
80003146:	a3 68       	lsl	r8,0x2
80003148:	ee 08 00 08 	add	r8,r7,r8
8000314c:	f0 fb fe 38 	ld.w	r11,r8[-456]
80003150:	ec f8 02 90 	ld.w	r8,r6[656]
80003154:	70 08       	ld.w	r8,r8[0x0]
80003156:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
8000315a:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8000315e:	f4 08 15 02 	lsl	r8,r10,0x2
80003162:	ee 08 00 08 	add	r8,r7,r8
80003166:	f1 49 fe 20 	st.w	r8[-480],r9
		combinedRadiusSq = SQR(combinedRadius);
		
		
		if (distSq > combinedRadiusSq)
		{
			for (i=0;i<3;i++)
8000316a:	ef 38 ff cf 	ld.ub	r8,r7[-49]
8000316e:	2f f8       	sub	r8,-1
80003170:	ef 68 ff cf 	st.b	r7[-49],r8
80003174:	ef 39 ff cf 	ld.ub	r9,r7[-49]
80003178:	30 28       	mov	r8,2
8000317a:	f0 09 18 00 	cp.b	r9,r8
8000317e:	fe 9a ff d9 	brle	80003130 <computeNewVelocity+0x304>
			{
				w[i] = relativeVelocity[i] - invTimeHorizon * relativePosition[i];
			}
			wLenghtSq = vector_norm_sqr(w);
80003182:	ee c8 01 e0 	sub	r8,r7,480
80003186:	10 9c       	mov	r12,r8
80003188:	fe b0 fd 52 	rcall	80002c2c <vector_norm_sqr>
8000318c:	18 98       	mov	r8,r12
8000318e:	ef 48 ff e4 	st.w	r7[-28],r8
			
			dotProduct = scalar_product(w,relativePosition);
80003192:	ee c9 01 c8 	sub	r9,r7,456
80003196:	ee c8 01 e0 	sub	r8,r7,480
8000319a:	12 9b       	mov	r11,r9
8000319c:	10 9c       	mov	r12,r8
8000319e:	fe b0 fb 77 	rcall	8000288c <scalar_product>
800031a2:	18 98       	mov	r8,r12
800031a4:	ef 48 ff dc 	st.w	r7[-36],r8
			
			if ((dotProduct < 0.0)&&(SQR(dotProduct) > (combinedRadiusSq * wLenghtSq)))
800031a8:	30 18       	mov	r8,1
800031aa:	ee fa ff dc 	ld.w	r10,r7[-36]
800031ae:	30 09       	mov	r9,0
800031b0:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
800031b4:	e0 8c 00 03 	brvs	800031ba <computeNewVelocity+0x38e>
800031b8:	c0 25       	brlt	800031bc <computeNewVelocity+0x390>
800031ba:	30 08       	mov	r8,0
800031bc:	5c 58       	castu.b	r8
800031be:	c7 70       	breq	800032ac <computeNewVelocity+0x480>
800031c0:	ee f9 ff dc 	ld.w	r9,r7[-36]
800031c4:	ee f8 ff dc 	ld.w	r8,r7[-36]
800031c8:	e5 a2 0a 98 	cop	cp0,cr10,cr9,cr8,0x44
800031cc:	ee f9 ff d8 	ld.w	r9,r7[-40]
800031d0:	ee f8 ff e4 	ld.w	r8,r7[-28]
800031d4:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
800031d8:	30 18       	mov	r8,1
800031da:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
800031de:	e0 8c 00 04 	brvs	800031e6 <computeNewVelocity+0x3ba>
800031e2:	e0 89 00 03 	brgt	800031e8 <computeNewVelocity+0x3bc>
800031e6:	30 08       	mov	r8,0
800031e8:	5c 58       	castu.b	r8
800031ea:	c6 10       	breq	800032ac <computeNewVelocity+0x480>
			{
				/* Project on cut-off circle. */
				wLength = fast_sqrt(wLenghtSq);
800031ec:	ee fc ff e4 	ld.w	r12,r7[-28]
800031f0:	fe b0 fc b4 	rcall	80002b58 <fast_sqrt>
800031f4:	18 98       	mov	r8,r12
800031f6:	ef 48 ff e0 	st.w	r7[-32],r8
				for (i=0;i<3;i++)
800031fa:	30 08       	mov	r8,0
800031fc:	ef 68 ff cf 	st.b	r7[-49],r8
80003200:	c4 d8       	rjmp	8000329a <computeNewVelocity+0x46e>
				{
					unitW[i] = w[i] / wLength;
80003202:	ef 25 ff cf 	ld.sb	r5,r7[-49]
80003206:	ef 28 ff cf 	ld.sb	r8,r7[-49]
8000320a:	a3 68       	lsl	r8,0x2
8000320c:	ee 08 00 08 	add	r8,r7,r8
80003210:	f0 f8 fe 20 	ld.w	r8,r8[-480]
80003214:	ee fb ff e0 	ld.w	r11,r7[-32]
80003218:	10 9c       	mov	r12,r8
8000321a:	f0 16 00 08 	mcall	r6[32]
8000321e:	18 98       	mov	r8,r12
80003220:	10 99       	mov	r9,r8
80003222:	ea 08 15 02 	lsl	r8,r5,0x2
80003226:	ee 08 00 08 	add	r8,r7,r8
8000322a:	f1 49 fe 14 	st.w	r8[-492],r9
					planes[ind].normal[i] = unitW[i];
8000322e:	ef 29 ff ce 	ld.sb	r9,r7[-50]
80003232:	ef 2b ff cf 	ld.sb	r11,r7[-49]
80003236:	ef 28 ff cf 	ld.sb	r8,r7[-49]
8000323a:	a3 68       	lsl	r8,0x2
8000323c:	ee 08 00 08 	add	r8,r7,r8
80003240:	f0 fa fe 14 	ld.w	r10,r8[-492]
80003244:	12 98       	mov	r8,r9
80003246:	a1 78       	lsl	r8,0x1
80003248:	12 08       	add	r8,r9
8000324a:	a1 78       	lsl	r8,0x1
8000324c:	16 08       	add	r8,r11
8000324e:	a3 68       	lsl	r8,0x2
80003250:	ee 08 00 08 	add	r8,r7,r8
80003254:	f1 4a fe 64 	st.w	r8[-412],r10
					u[i] = (combinedRadius * invTimeHorizon - wLength) * unitW[i];
80003258:	ef 2a ff cf 	ld.sb	r10,r7[-49]
8000325c:	ec f8 02 90 	ld.w	r8,r6[656]
80003260:	70 09       	ld.w	r9,r8[0x0]
80003262:	ee f8 ff d0 	ld.w	r8,r7[-48]
80003266:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000326a:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000326e:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80003272:	ef 28 ff cf 	ld.sb	r8,r7[-49]
80003276:	a3 68       	lsl	r8,0x2
80003278:	ee 08 00 08 	add	r8,r7,r8
8000327c:	f0 f8 fe 14 	ld.w	r8,r8[-492]
80003280:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80003284:	f4 08 15 02 	lsl	r8,r10,0x2
80003288:	ee 08 00 08 	add	r8,r7,r8
8000328c:	f1 49 fe 08 	st.w	r8[-504],r9
			
			if ((dotProduct < 0.0)&&(SQR(dotProduct) > (combinedRadiusSq * wLenghtSq)))
			{
				/* Project on cut-off circle. */
				wLength = fast_sqrt(wLenghtSq);
				for (i=0;i<3;i++)
80003290:	ef 38 ff cf 	ld.ub	r8,r7[-49]
80003294:	2f f8       	sub	r8,-1
80003296:	ef 68 ff cf 	st.b	r7[-49],r8
8000329a:	ef 39 ff cf 	ld.ub	r9,r7[-49]
8000329e:	30 28       	mov	r8,2
800032a0:	f0 09 18 00 	cp.b	r9,r8
800032a4:	fe 9a ff af 	brle	80003202 <computeNewVelocity+0x3d6>
			}
			wLenghtSq = vector_norm_sqr(w);
			
			dotProduct = scalar_product(w,relativePosition);
			
			if ((dotProduct < 0.0)&&(SQR(dotProduct) > (combinedRadiusSq * wLenghtSq)))
800032a8:	e0 8f 01 c5 	bral	80003632 <computeNewVelocity+0x806>
					planes[ind].normal[i] = unitW[i];
					u[i] = (combinedRadius * invTimeHorizon - wLength) * unitW[i];
				}
			}else{
				/* Project on cone. */
				float a = distSq;
800032ac:	ee f8 ff d4 	ld.w	r8,r7[-44]
800032b0:	ef 48 ff ec 	st.w	r7[-20],r8
				float b = scalar_product(relativePosition,relativeVelocity);
800032b4:	ee c9 01 d4 	sub	r9,r7,468
800032b8:	ee c8 01 c8 	sub	r8,r7,456
800032bc:	12 9b       	mov	r11,r9
800032be:	10 9c       	mov	r12,r8
800032c0:	fe b0 fa e6 	rcall	8000288c <scalar_product>
800032c4:	18 98       	mov	r8,r12
800032c6:	ef 48 ff f0 	st.w	r7[-16],r8
				float crossProduct[3];
				CROSS(relativePosition,relativeVelocity,crossProduct);
800032ca:	ee f9 fe 3c 	ld.w	r9,r7[-452]
800032ce:	ee f8 fe 34 	ld.w	r8,r7[-460]
800032d2:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
800032d6:	ee fa fe 40 	ld.w	r10,r7[-448]
800032da:	ee f8 fe 30 	ld.w	r8,r7[-464]
800032de:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
800032e2:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
800032e6:	ef 48 fd e4 	st.w	r7[-540],r8
800032ea:	ee f9 fe 40 	ld.w	r9,r7[-448]
800032ee:	ee f8 fe 2c 	ld.w	r8,r7[-468]
800032f2:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
800032f6:	ee fa fe 38 	ld.w	r10,r7[-456]
800032fa:	ee f8 fe 34 	ld.w	r8,r7[-460]
800032fe:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80003302:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80003306:	ef 48 fd e8 	st.w	r7[-536],r8
8000330a:	ee f9 fe 38 	ld.w	r9,r7[-456]
8000330e:	ee f8 fe 30 	ld.w	r8,r7[-464]
80003312:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80003316:	ee fa fe 3c 	ld.w	r10,r7[-452]
8000331a:	ee f8 fe 2c 	ld.w	r8,r7[-468]
8000331e:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80003322:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80003326:	ef 48 fd ec 	st.w	r7[-532],r8
				float c = vector_norm_sqr(relativeVelocity) - vector_norm_sqr(crossProduct) / (distSq - combinedRadiusSq);
8000332a:	ee c8 01 d4 	sub	r8,r7,468
8000332e:	10 9c       	mov	r12,r8
80003330:	fe b0 fc 7e 	rcall	80002c2c <vector_norm_sqr>
80003334:	18 95       	mov	r5,r12
80003336:	ee c8 02 1c 	sub	r8,r7,540
8000333a:	10 9c       	mov	r12,r8
8000333c:	fe b0 fc 78 	rcall	80002c2c <vector_norm_sqr>
80003340:	18 98       	mov	r8,r12
80003342:	ee fa ff d4 	ld.w	r10,r7[-44]
80003346:	ee f9 ff d8 	ld.w	r9,r7[-40]
8000334a:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8000334e:	12 9b       	mov	r11,r9
80003350:	10 9c       	mov	r12,r8
80003352:	f0 16 00 08 	mcall	r6[32]
80003356:	18 98       	mov	r8,r12
80003358:	e5 a1 08 58 	cop	cp0,cr8,cr5,cr8,0x42
8000335c:	ef 48 ff f4 	st.w	r7[-12],r8
				float t = (b + fast_sqrt(SQR(b) - a*c)) / a;
80003360:	ee f9 ff f0 	ld.w	r9,r7[-16]
80003364:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003368:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000336c:	ee fa ff ec 	ld.w	r10,r7[-20]
80003370:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003374:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80003378:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8000337c:	10 9c       	mov	r12,r8
8000337e:	fe b0 fb ed 	rcall	80002b58 <fast_sqrt>
80003382:	18 99       	mov	r9,r12
80003384:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003388:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8000338c:	ee fb ff ec 	ld.w	r11,r7[-20]
80003390:	10 9c       	mov	r12,r8
80003392:	f0 16 00 08 	mcall	r6[32]
80003396:	18 98       	mov	r8,r12
80003398:	ef 48 ff f8 	st.w	r7[-8],r8
				for (i=0;i<3;i++)
8000339c:	30 08       	mov	r8,0
8000339e:	ef 68 ff cf 	st.b	r7[-49],r8
800033a2:	c2 28       	rjmp	800033e6 <computeNewVelocity+0x5ba>
				{
					w[i] = relativeVelocity[i] - t * relativePosition[i];
800033a4:	ef 2a ff cf 	ld.sb	r10,r7[-49]
800033a8:	ef 28 ff cf 	ld.sb	r8,r7[-49]
800033ac:	a3 68       	lsl	r8,0x2
800033ae:	ee 08 00 08 	add	r8,r7,r8
800033b2:	f0 f9 fe 2c 	ld.w	r9,r8[-468]
800033b6:	ef 28 ff cf 	ld.sb	r8,r7[-49]
800033ba:	a3 68       	lsl	r8,0x2
800033bc:	ee 08 00 08 	add	r8,r7,r8
800033c0:	f0 fb fe 38 	ld.w	r11,r8[-456]
800033c4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800033c8:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
800033cc:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
800033d0:	f4 08 15 02 	lsl	r8,r10,0x2
800033d4:	ee 08 00 08 	add	r8,r7,r8
800033d8:	f1 49 fe 20 	st.w	r8[-480],r9
				float b = scalar_product(relativePosition,relativeVelocity);
				float crossProduct[3];
				CROSS(relativePosition,relativeVelocity,crossProduct);
				float c = vector_norm_sqr(relativeVelocity) - vector_norm_sqr(crossProduct) / (distSq - combinedRadiusSq);
				float t = (b + fast_sqrt(SQR(b) - a*c)) / a;
				for (i=0;i<3;i++)
800033dc:	ef 38 ff cf 	ld.ub	r8,r7[-49]
800033e0:	2f f8       	sub	r8,-1
800033e2:	ef 68 ff cf 	st.b	r7[-49],r8
800033e6:	ef 39 ff cf 	ld.ub	r9,r7[-49]
800033ea:	30 28       	mov	r8,2
800033ec:	f0 09 18 00 	cp.b	r9,r8
800033f0:	fe 9a ff da 	brle	800033a4 <computeNewVelocity+0x578>
				{
					w[i] = relativeVelocity[i] - t * relativePosition[i];
				}
				wLength = vector_norm(w);
800033f4:	ee c8 01 e0 	sub	r8,r7,480
800033f8:	10 9c       	mov	r12,r8
800033fa:	fe b0 fc 31 	rcall	80002c5c <vector_norm>
800033fe:	18 98       	mov	r8,r12
80003400:	ef 48 ff e0 	st.w	r7[-32],r8
				for (i=0;i<3;i++)
80003404:	30 08       	mov	r8,0
80003406:	ef 68 ff cf 	st.b	r7[-49],r8
8000340a:	c4 c8       	rjmp	800034a2 <computeNewVelocity+0x676>
				{
					unitW[i] = w[i] / wLength;
8000340c:	ef 25 ff cf 	ld.sb	r5,r7[-49]
80003410:	ef 28 ff cf 	ld.sb	r8,r7[-49]
80003414:	a3 68       	lsl	r8,0x2
80003416:	ee 08 00 08 	add	r8,r7,r8
8000341a:	f0 f8 fe 20 	ld.w	r8,r8[-480]
8000341e:	ee fb ff e0 	ld.w	r11,r7[-32]
80003422:	10 9c       	mov	r12,r8
80003424:	f0 16 00 08 	mcall	r6[32]
80003428:	18 98       	mov	r8,r12
8000342a:	10 99       	mov	r9,r8
8000342c:	ea 08 15 02 	lsl	r8,r5,0x2
80003430:	ee 08 00 08 	add	r8,r7,r8
80003434:	f1 49 fe 14 	st.w	r8[-492],r9
					planes[ind].normal[i] = unitW[i];
80003438:	ef 29 ff ce 	ld.sb	r9,r7[-50]
8000343c:	ef 2b ff cf 	ld.sb	r11,r7[-49]
80003440:	ef 28 ff cf 	ld.sb	r8,r7[-49]
80003444:	a3 68       	lsl	r8,0x2
80003446:	ee 08 00 08 	add	r8,r7,r8
8000344a:	f0 fa fe 14 	ld.w	r10,r8[-492]
8000344e:	12 98       	mov	r8,r9
80003450:	a1 78       	lsl	r8,0x1
80003452:	12 08       	add	r8,r9
80003454:	a1 78       	lsl	r8,0x1
80003456:	16 08       	add	r8,r11
80003458:	a3 68       	lsl	r8,0x2
8000345a:	ee 08 00 08 	add	r8,r7,r8
8000345e:	f1 4a fe 64 	st.w	r8[-412],r10
					u[i] = (combinedRadius * t - wLength) * unitW[i];
80003462:	ef 2a ff cf 	ld.sb	r10,r7[-49]
80003466:	ee f9 ff d0 	ld.w	r9,r7[-48]
8000346a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000346e:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80003472:	ee f8 ff e0 	ld.w	r8,r7[-32]
80003476:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8000347a:	ef 28 ff cf 	ld.sb	r8,r7[-49]
8000347e:	a3 68       	lsl	r8,0x2
80003480:	ee 08 00 08 	add	r8,r7,r8
80003484:	f0 f8 fe 14 	ld.w	r8,r8[-492]
80003488:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000348c:	f4 08 15 02 	lsl	r8,r10,0x2
80003490:	ee 08 00 08 	add	r8,r7,r8
80003494:	f1 49 fe 08 	st.w	r8[-504],r9
				for (i=0;i<3;i++)
				{
					w[i] = relativeVelocity[i] - t * relativePosition[i];
				}
				wLength = vector_norm(w);
				for (i=0;i<3;i++)
80003498:	ef 38 ff cf 	ld.ub	r8,r7[-49]
8000349c:	2f f8       	sub	r8,-1
8000349e:	ef 68 ff cf 	st.b	r7[-49],r8
800034a2:	ef 39 ff cf 	ld.ub	r9,r7[-49]
800034a6:	30 28       	mov	r8,2
800034a8:	f0 09 18 00 	cp.b	r9,r8
800034ac:	fe 9a ff b0 	brle	8000340c <computeNewVelocity+0x5e0>
800034b0:	cc 18       	rjmp	80003632 <computeNewVelocity+0x806>
					u[i] = (combinedRadius * t - wLength) * unitW[i];
				}
			}
		}else{
			/* Collisions */
			dbg_print("Collision! ");
800034b2:	fe cc 06 da 	sub	r12,pc,1754
800034b6:	f0 16 00 01 	mcall	r6[4]
			dbg_print("Distance with neighbor ");
800034ba:	fe cc 06 d6 	sub	r12,pc,1750
800034be:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(ind,10);
800034c2:	ef 28 ff ce 	ld.sb	r8,r7[-50]
800034c6:	30 ab       	mov	r11,10
800034c8:	10 9c       	mov	r12,r8
800034ca:	f0 16 00 04 	mcall	r6[16]
			dbg_print("(x100):");
800034ce:	fe cc 06 d2 	sub	r12,pc,1746
800034d2:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(sqrt(distSq)*100.0,10);
800034d6:	ee fc ff d4 	ld.w	r12,r7[-44]
800034da:	f0 16 00 02 	mcall	r6[8]
800034de:	14 98       	mov	r8,r10
800034e0:	16 99       	mov	r9,r11
800034e2:	10 9a       	mov	r10,r8
800034e4:	12 9b       	mov	r11,r9
800034e6:	f0 16 00 65 	mcall	r6[404]
800034ea:	30 08       	mov	r8,0
800034ec:	fc 19 40 59 	movh	r9,0x4059
800034f0:	f0 16 00 03 	mcall	r6[12]
800034f4:	14 98       	mov	r8,r10
800034f6:	16 99       	mov	r9,r11
800034f8:	10 9a       	mov	r10,r8
800034fa:	12 9b       	mov	r11,r9
800034fc:	f0 16 00 14 	mcall	r6[80]
80003500:	18 98       	mov	r8,r12
80003502:	30 ab       	mov	r11,10
80003504:	10 9c       	mov	r12,r8
80003506:	f0 16 00 04 	mcall	r6[16]
			dbg_print("\n");
8000350a:	fe cc 07 06 	sub	r12,pc,1798
8000350e:	f0 16 00 01 	mcall	r6[4]
			
			float invTimeStep = 1.0 / ORCA_TIME_STEP_MILLIS; //PROBLEM wrong time step
80003512:	e0 68 cc cd 	mov	r8,52429
80003516:	ea 18 3d cc 	orh	r8,0x3dcc
8000351a:	ef 48 ff fc 	st.w	r7[-4],r8
			for (i=0;i<3;i++)
8000351e:	30 08       	mov	r8,0
80003520:	ef 68 ff cf 	st.b	r7[-49],r8
80003524:	c2 28       	rjmp	80003568 <computeNewVelocity+0x73c>
			{
				w[i] = relativeVelocity[i] - invTimeStep * relativePosition[i];
80003526:	ef 2a ff cf 	ld.sb	r10,r7[-49]
8000352a:	ef 28 ff cf 	ld.sb	r8,r7[-49]
8000352e:	a3 68       	lsl	r8,0x2
80003530:	ee 08 00 08 	add	r8,r7,r8
80003534:	f0 f9 fe 2c 	ld.w	r9,r8[-468]
80003538:	ef 28 ff cf 	ld.sb	r8,r7[-49]
8000353c:	a3 68       	lsl	r8,0x2
8000353e:	ee 08 00 08 	add	r8,r7,r8
80003542:	f0 fb fe 38 	ld.w	r11,r8[-456]
80003546:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000354a:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
8000354e:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80003552:	f4 08 15 02 	lsl	r8,r10,0x2
80003556:	ee 08 00 08 	add	r8,r7,r8
8000355a:	f1 49 fe 20 	st.w	r8[-480],r9
			dbg_print("(x100):");
			dbg_print_num(sqrt(distSq)*100.0,10);
			dbg_print("\n");
			
			float invTimeStep = 1.0 / ORCA_TIME_STEP_MILLIS; //PROBLEM wrong time step
			for (i=0;i<3;i++)
8000355e:	ef 38 ff cf 	ld.ub	r8,r7[-49]
80003562:	2f f8       	sub	r8,-1
80003564:	ef 68 ff cf 	st.b	r7[-49],r8
80003568:	ef 39 ff cf 	ld.ub	r9,r7[-49]
8000356c:	30 28       	mov	r8,2
8000356e:	f0 09 18 00 	cp.b	r9,r8
80003572:	fe 9a ff da 	brle	80003526 <computeNewVelocity+0x6fa>
			{
				w[i] = relativeVelocity[i] - invTimeStep * relativePosition[i];
			}
			wLength = vector_norm(w);
80003576:	ee c8 01 e0 	sub	r8,r7,480
8000357a:	10 9c       	mov	r12,r8
8000357c:	fe b0 fb 70 	rcall	80002c5c <vector_norm>
80003580:	18 98       	mov	r8,r12
80003582:	ef 48 ff e0 	st.w	r7[-32],r8
			for (i=0;i<3;i++)
80003586:	30 08       	mov	r8,0
80003588:	ef 68 ff cf 	st.b	r7[-49],r8
8000358c:	c4 c8       	rjmp	80003624 <computeNewVelocity+0x7f8>
			{
				unitW[i] = w[i] / wLength;
8000358e:	ef 25 ff cf 	ld.sb	r5,r7[-49]
80003592:	ef 28 ff cf 	ld.sb	r8,r7[-49]
80003596:	a3 68       	lsl	r8,0x2
80003598:	ee 08 00 08 	add	r8,r7,r8
8000359c:	f0 f8 fe 20 	ld.w	r8,r8[-480]
800035a0:	ee fb ff e0 	ld.w	r11,r7[-32]
800035a4:	10 9c       	mov	r12,r8
800035a6:	f0 16 00 08 	mcall	r6[32]
800035aa:	18 98       	mov	r8,r12
800035ac:	10 99       	mov	r9,r8
800035ae:	ea 08 15 02 	lsl	r8,r5,0x2
800035b2:	ee 08 00 08 	add	r8,r7,r8
800035b6:	f1 49 fe 14 	st.w	r8[-492],r9
				planes[ind].normal[i] = unitW[i];
800035ba:	ef 29 ff ce 	ld.sb	r9,r7[-50]
800035be:	ef 2b ff cf 	ld.sb	r11,r7[-49]
800035c2:	ef 28 ff cf 	ld.sb	r8,r7[-49]
800035c6:	a3 68       	lsl	r8,0x2
800035c8:	ee 08 00 08 	add	r8,r7,r8
800035cc:	f0 fa fe 14 	ld.w	r10,r8[-492]
800035d0:	12 98       	mov	r8,r9
800035d2:	a1 78       	lsl	r8,0x1
800035d4:	12 08       	add	r8,r9
800035d6:	a1 78       	lsl	r8,0x1
800035d8:	16 08       	add	r8,r11
800035da:	a3 68       	lsl	r8,0x2
800035dc:	ee 08 00 08 	add	r8,r7,r8
800035e0:	f1 4a fe 64 	st.w	r8[-412],r10
				u[i] = (combinedRadius * invTimeStep - wLength) * unitW[i];
800035e4:	ef 2a ff cf 	ld.sb	r10,r7[-49]
800035e8:	ee f9 ff d0 	ld.w	r9,r7[-48]
800035ec:	ee f8 ff fc 	ld.w	r8,r7[-4]
800035f0:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
800035f4:	ee f8 ff e0 	ld.w	r8,r7[-32]
800035f8:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
800035fc:	ef 28 ff cf 	ld.sb	r8,r7[-49]
80003600:	a3 68       	lsl	r8,0x2
80003602:	ee 08 00 08 	add	r8,r7,r8
80003606:	f0 f8 fe 14 	ld.w	r8,r8[-492]
8000360a:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000360e:	f4 08 15 02 	lsl	r8,r10,0x2
80003612:	ee 08 00 08 	add	r8,r7,r8
80003616:	f1 49 fe 08 	st.w	r8[-504],r9
			for (i=0;i<3;i++)
			{
				w[i] = relativeVelocity[i] - invTimeStep * relativePosition[i];
			}
			wLength = vector_norm(w);
			for (i=0;i<3;i++)
8000361a:	ef 38 ff cf 	ld.ub	r8,r7[-49]
8000361e:	2f f8       	sub	r8,-1
80003620:	ef 68 ff cf 	st.b	r7[-49],r8
80003624:	ef 39 ff cf 	ld.ub	r9,r7[-49]
80003628:	30 28       	mov	r8,2
8000362a:	f0 09 18 00 	cp.b	r9,r8
8000362e:	fe 9a ff b0 	brle	8000358e <computeNewVelocity+0x762>
				planes[ind].normal[i] = unitW[i];
				u[i] = (combinedRadius * invTimeStep - wLength) * unitW[i];
			}
		}
		
		for (i=0;i<3;i++)
80003632:	30 08       	mov	r8,0
80003634:	ef 68 ff cf 	st.b	r7[-49],r8
80003638:	c3 f8       	rjmp	800036b6 <computeNewVelocity+0x88a>
		{
			planes[ind].point[i] = centralData->position_estimator.vel_bf[i] + 0.5 * u[i];
8000363a:	ef 25 ff ce 	ld.sb	r5,r7[-50]
8000363e:	ef 21 ff cf 	ld.sb	r1,r7[-49]
80003642:	ec f8 00 00 	ld.w	r8,r6[0]
80003646:	70 08       	ld.w	r8,r8[0x0]
80003648:	ef 29 ff cf 	ld.sb	r9,r7[-49]
8000364c:	f2 c9 fc a6 	sub	r9,r9,-858
80003650:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80003654:	10 9c       	mov	r12,r8
80003656:	f0 16 00 02 	mcall	r6[8]
8000365a:	14 92       	mov	r2,r10
8000365c:	16 93       	mov	r3,r11
8000365e:	ef 28 ff cf 	ld.sb	r8,r7[-49]
80003662:	a3 68       	lsl	r8,0x2
80003664:	ee 08 00 08 	add	r8,r7,r8
80003668:	f0 f8 fe 08 	ld.w	r8,r8[-504]
8000366c:	10 9c       	mov	r12,r8
8000366e:	f0 16 00 02 	mcall	r6[8]
80003672:	30 08       	mov	r8,0
80003674:	fc 19 3f e0 	movh	r9,0x3fe0
80003678:	f0 16 00 03 	mcall	r6[12]
8000367c:	14 98       	mov	r8,r10
8000367e:	16 99       	mov	r9,r11
80003680:	04 9a       	mov	r10,r2
80003682:	06 9b       	mov	r11,r3
80003684:	f0 16 00 05 	mcall	r6[20]
80003688:	14 98       	mov	r8,r10
8000368a:	16 99       	mov	r9,r11
8000368c:	10 9a       	mov	r10,r8
8000368e:	12 9b       	mov	r11,r9
80003690:	f0 16 00 09 	mcall	r6[36]
80003694:	18 99       	mov	r9,r12
80003696:	0a 98       	mov	r8,r5
80003698:	a1 78       	lsl	r8,0x1
8000369a:	0a 08       	add	r8,r5
8000369c:	a1 78       	lsl	r8,0x1
8000369e:	02 08       	add	r8,r1
800036a0:	2f d8       	sub	r8,-3
800036a2:	a3 68       	lsl	r8,0x2
800036a4:	ee 08 00 08 	add	r8,r7,r8
800036a8:	f1 49 fe 64 	st.w	r8[-412],r9
				planes[ind].normal[i] = unitW[i];
				u[i] = (combinedRadius * invTimeStep - wLength) * unitW[i];
			}
		}
		
		for (i=0;i<3;i++)
800036ac:	ef 38 ff cf 	ld.ub	r8,r7[-49]
800036b0:	2f f8       	sub	r8,-1
800036b2:	ef 68 ff cf 	st.b	r7[-49],r8
800036b6:	ef 39 ff cf 	ld.ub	r9,r7[-49]
800036ba:	30 28       	mov	r8,2
800036bc:	f0 09 18 00 	cp.b	r9,r8
800036c0:	fe 9a ff bd 	brle	8000363a <computeNewVelocity+0x80e>
	{
		NewVelocity[i] = OptimalVelocity[i];
	}
	
	/* Create agent ORCA planes. */
	for (ind=0; ind<centralData->number_of_neighbors; ind++)
800036c4:	ef 38 ff ce 	ld.ub	r8,r7[-50]
800036c8:	2f f8       	sub	r8,-1
800036ca:	ef 68 ff ce 	st.b	r7[-50],r8
800036ce:	ef 29 ff ce 	ld.sb	r9,r7[-50]
800036d2:	ec f8 00 00 	ld.w	r8,r6[0]
800036d6:	70 08       	ld.w	r8,r8[0x0]
800036d8:	f1 38 10 fc 	ld.ub	r8,r8[4348]
800036dc:	10 39       	cp.w	r9,r8
800036de:	fe 95 fb d8 	brlt	80002e8e <computeNewVelocity+0x62>
		{
			planes[ind].point[i] = centralData->position_estimator.vel_bf[i] + 0.5 * u[i];
		}
		
	}
	float planeFail = linearProgram3(planes, OptimalVelocity, MAXSPEED, NewVelocity, false);
800036e2:	ee cc 01 9c 	sub	r12,r7,412
800036e6:	30 08       	mov	r8,0
800036e8:	ee f9 fd dc 	ld.w	r9,r7[-548]
800036ec:	fc 1a 40 90 	movh	r10,0x4090
800036f0:	ee fb fd e0 	ld.w	r11,r7[-544]
800036f4:	f0 16 01 07 	mcall	r6[1052]
800036f8:	18 98       	mov	r8,r12
800036fa:	ef 48 ff e8 	st.w	r7[-24],r8
	if (planeFail < centralData->number_of_neighbors)
800036fe:	ec f8 00 00 	ld.w	r8,r6[0]
80003702:	70 08       	ld.w	r8,r8[0x0]
80003704:	f1 38 10 fc 	ld.ub	r8,r8[4348]
80003708:	e5 a6 0a 08 	cop	cp0,cr10,cr0,cr8,0x4c
8000370c:	30 18       	mov	r8,1
8000370e:	ee f9 ff e8 	ld.w	r9,r7[-24]
80003712:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80003716:	e0 8c 00 04 	brvs	8000371e <computeNewVelocity+0x8f2>
8000371a:	e0 89 00 03 	brgt	80003720 <computeNewVelocity+0x8f4>
8000371e:	30 08       	mov	r8,0
80003720:	5c 58       	castu.b	r8
80003722:	c1 10       	breq	80003744 <computeNewVelocity+0x918>
	{
		linearProgram4(planes,planeFail,MAXSPEED,NewVelocity);
80003724:	ee f8 ff e8 	ld.w	r8,r7[-24]
80003728:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000372c:	5c 58       	castu.b	r8
8000372e:	f7 d8 b0 08 	bfexts	r11,r8,0x0,0x8
80003732:	ee c8 01 9c 	sub	r8,r7,412
80003736:	ee f9 fd dc 	ld.w	r9,r7[-548]
8000373a:	fc 1a 40 90 	movh	r10,0x4090
8000373e:	10 9c       	mov	r12,r8
80003740:	f0 16 02 06 	mcall	r6[2072]
	}
	
	loop_count_orca = loop_count_orca++ % 100;
80003744:	ec f8 02 14 	ld.w	r8,r6[532]
80003748:	11 89       	ld.ub	r9,r8[0x0]
8000374a:	f1 d9 b0 08 	bfexts	r8,r9,0x0,0x8
8000374e:	e0 6a 85 1f 	mov	r10,34079
80003752:	ea 1a 51 eb 	orh	r10,0x51eb
80003756:	f0 0a 04 4a 	muls.d	r10,r8,r10
8000375a:	a5 5b       	asr	r11,0x5
8000375c:	f0 0a 14 1f 	asr	r10,r8,0x1f
80003760:	f6 0a 01 0a 	sub	r10,r11,r10
80003764:	f4 0a 10 64 	mul	r10,r10,100
80003768:	14 18       	sub	r8,r10
8000376a:	5c 58       	castu.b	r8
8000376c:	ec fa 02 14 	ld.w	r10,r6[532]
80003770:	b4 88       	st.b	r10[0x0],r8
80003772:	f2 c8 ff ff 	sub	r8,r9,-1
80003776:	5c 58       	castu.b	r8
80003778:	ec f9 02 14 	ld.w	r9,r6[532]
8000377c:	b2 88       	st.b	r9[0x0],r8
	
	float orca_diff[3];
	for (i=0;i<3;i++)
8000377e:	30 08       	mov	r8,0
80003780:	ef 68 ff cf 	st.b	r7[-49],r8
80003784:	c1 f8       	rjmp	800037c2 <computeNewVelocity+0x996>
	{
		orca_diff[i] = OptimalVelocity[i] - NewVelocity[i];
80003786:	ef 28 ff cf 	ld.sb	r8,r7[-49]
8000378a:	ef 29 ff cf 	ld.sb	r9,r7[-49]
8000378e:	a3 69       	lsl	r9,0x2
80003790:	ee fa fd e0 	ld.w	r10,r7[-544]
80003794:	f4 09 00 09 	add	r9,r10,r9
80003798:	72 0a       	ld.w	r10,r9[0x0]
8000379a:	ef 29 ff cf 	ld.sb	r9,r7[-49]
8000379e:	a3 69       	lsl	r9,0x2
800037a0:	ee fb fd dc 	ld.w	r11,r7[-548]
800037a4:	f6 09 00 09 	add	r9,r11,r9
800037a8:	72 09       	ld.w	r9,r9[0x0]
800037aa:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
800037ae:	a3 68       	lsl	r8,0x2
800037b0:	ee 08 00 08 	add	r8,r7,r8
800037b4:	f1 49 fd f0 	st.w	r8[-528],r9
	}
	
	loop_count_orca = loop_count_orca++ % 100;
	
	float orca_diff[3];
	for (i=0;i<3;i++)
800037b8:	ef 38 ff cf 	ld.ub	r8,r7[-49]
800037bc:	2f f8       	sub	r8,-1
800037be:	ef 68 ff cf 	st.b	r7[-49],r8
800037c2:	ef 39 ff cf 	ld.ub	r9,r7[-49]
800037c6:	30 28       	mov	r8,2
800037c8:	f0 09 18 00 	cp.b	r9,r8
800037cc:	fe 9a ff dd 	brle	80003786 <computeNewVelocity+0x95a>
	{
		orca_diff[i] = OptimalVelocity[i] - NewVelocity[i];
	}
	
	if (loop_count_orca == 0)
800037d0:	ec f8 02 14 	ld.w	r8,r6[532]
800037d4:	11 88       	ld.ub	r8,r8[0x0]
800037d6:	58 08       	cp.w	r8,0
800037d8:	c2 11       	brne	8000381a <computeNewVelocity+0x9ee>
	{
		dbg_print("Orca diffvel:");
800037da:	fe cc 09 d2 	sub	r12,pc,2514
800037de:	f0 16 00 01 	mcall	r6[4]
		dbg_print_vector(orca_diff,2);
800037e2:	ee c8 02 10 	sub	r8,r7,528
800037e6:	30 2b       	mov	r11,2
800037e8:	10 9c       	mov	r12,r8
800037ea:	f0 16 00 c4 	mcall	r6[784]
		dbg_print(", Optimal:");
800037ee:	fe cc 09 d6 	sub	r12,pc,2518
800037f2:	f0 16 00 01 	mcall	r6[4]
		dbg_print_vector(OptimalVelocity,2);
800037f6:	30 2b       	mov	r11,2
800037f8:	ee fc fd e0 	ld.w	r12,r7[-544]
800037fc:	f0 16 00 c4 	mcall	r6[784]
		dbg_print(", New:");
80003800:	fe cc 09 dc 	sub	r12,pc,2524
80003804:	f0 16 00 01 	mcall	r6[4]
		dbg_print_vector(NewVelocity,2);
80003808:	30 2b       	mov	r11,2
8000380a:	ee fc fd dc 	ld.w	r12,r7[-548]
8000380e:	f0 16 00 c4 	mcall	r6[784]
		dbg_print("\n");
80003812:	fe cc 0a 0e 	sub	r12,pc,2574
80003816:	f0 16 00 01 	mcall	r6[4]
			//dbg_print_vector(NewVelocity,2);
			//dbg_print("\n");
		//}
	}

}
8000381a:	fe 3d fd cc 	sub	sp,-564
8000381e:	e3 cd 80 ee 	ldm	sp++,r1-r3,r5-r7,pc
80003822:	00 00       	add	r0,r0
80003824:	80 00       	ld.sh	r0,r0[0x0]
80003826:	2c be       	sub	lr,-53

80003828 <linearProgram1>:

bool linearProgram1(plane_t planes[], int8_t index, line_t line, float maxSpeed, float OptimalVelocity[], float NewVelocity[], bool directionOpt)
{
80003828:	eb cd 40 e8 	pushm	r3,r5-r7,lr
8000382c:	1a 97       	mov	r7,sp
8000382e:	21 7d       	sub	sp,92
80003830:	fe f6 04 a8 	ld.w	r6,pc[1192]
80003834:	1e 26       	rsub	r6,pc
80003836:	ee c5 ff ec 	sub	r5,r7,-20
8000383a:	ef 4c ff b8 	st.w	r7[-72],r12
8000383e:	ef 4a ff b0 	st.w	r7[-80],r10
80003842:	ef 49 ff ac 	st.w	r7[-84],r9
80003846:	ef 48 ff a8 	st.w	r7[-88],r8
8000384a:	6a 68       	ld.w	r8,r5[0x18]
8000384c:	16 99       	mov	r9,r11
8000384e:	ef 69 ff b4 	st.b	r7[-76],r9
80003852:	ef 68 ff a4 	st.b	r7[-92],r8
	int8_t i;
	
	float dotProduct = scalar_product(line.point,line.direction);
80003856:	ea c8 ff f4 	sub	r8,r5,-12
8000385a:	0a 9b       	mov	r11,r5
8000385c:	10 9c       	mov	r12,r8
8000385e:	fe b0 f8 17 	rcall	8000288c <scalar_product>
80003862:	18 98       	mov	r8,r12
80003864:	ef 48 ff d8 	st.w	r7[-40],r8
	float discriminant = SQR(dotProduct) + SQR(maxSpeed) - vector_norm_sqr(line.point);
80003868:	ee f9 ff d8 	ld.w	r9,r7[-40]
8000386c:	ee f8 ff d8 	ld.w	r8,r7[-40]
80003870:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80003874:	ee fa ff b0 	ld.w	r10,r7[-80]
80003878:	ee f8 ff b0 	ld.w	r8,r7[-80]
8000387c:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80003880:	e5 a0 03 98 	cop	cp0,cr3,cr9,cr8,0x40
80003884:	ea c8 ff f4 	sub	r8,r5,-12
80003888:	10 9c       	mov	r12,r8
8000388a:	fe b0 f9 d1 	rcall	80002c2c <vector_norm_sqr>
8000388e:	18 98       	mov	r8,r12
80003890:	e5 a1 08 38 	cop	cp0,cr8,cr3,cr8,0x42
80003894:	ef 48 ff dc 	st.w	r7[-36],r8
	
	if (discriminant < 0.0)
80003898:	30 18       	mov	r8,1
8000389a:	ee fa ff dc 	ld.w	r10,r7[-36]
8000389e:	30 09       	mov	r9,0
800038a0:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
800038a4:	e0 8c 00 03 	brvs	800038aa <linearProgram1+0x82>
800038a8:	c0 25       	brlt	800038ac <linearProgram1+0x84>
800038aa:	30 08       	mov	r8,0
800038ac:	5c 58       	castu.b	r8
800038ae:	c0 40       	breq	800038b6 <linearProgram1+0x8e>
	{
		/* Max speed sphere fully invalidates line. */
		return false;
800038b0:	30 08       	mov	r8,0
800038b2:	e0 8f 02 0e 	bral	80003cce <linearProgram1+0x4a6>
	}
	
	float sqrtDiscriminant = fast_sqrt(discriminant);
800038b6:	ee fc ff dc 	ld.w	r12,r7[-36]
800038ba:	fe b0 f9 4f 	rcall	80002b58 <fast_sqrt>
800038be:	18 98       	mov	r8,r12
800038c0:	ef 48 ff e0 	st.w	r7[-32],r8
	float tLeft = -dotProduct - sqrtDiscriminant;
800038c4:	ee f8 ff d8 	ld.w	r8,r7[-40]
800038c8:	10 99       	mov	r9,r8
800038ca:	ee 19 80 00 	eorh	r9,0x8000
800038ce:	ee f8 ff e0 	ld.w	r8,r7[-32]
800038d2:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
800038d6:	ef 48 ff e4 	st.w	r7[-28],r8
	float tRight = -dotProduct + sqrtDiscriminant;
800038da:	ee f9 ff e0 	ld.w	r9,r7[-32]
800038de:	ee f8 ff d8 	ld.w	r8,r7[-40]
800038e2:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
800038e6:	ef 48 ff e8 	st.w	r7[-24],r8
	
	int8_t index2;
	for (index2=0;index2<index;index2++)
800038ea:	30 08       	mov	r8,0
800038ec:	ef 68 ff ef 	st.b	r7[-17],r8
800038f0:	cb e8       	rjmp	80003a6c <linearProgram1+0x244>
	{
		float diffPoints[3];
		for (i=0;i<3;i++)
800038f2:	30 08       	mov	r8,0
800038f4:	ef 68 ff d7 	st.b	r7[-41],r8
800038f8:	c2 48       	rjmp	80003940 <linearProgram1+0x118>
		{
			diffPoints[i] = planes[index2].point[i] - line.point[i];
800038fa:	ef 2a ff d7 	ld.sb	r10,r7[-41]
800038fe:	ef 29 ff ef 	ld.sb	r9,r7[-17]
80003902:	12 98       	mov	r8,r9
80003904:	a1 78       	lsl	r8,0x1
80003906:	12 08       	add	r8,r9
80003908:	a3 78       	lsl	r8,0x3
8000390a:	ee f9 ff b8 	ld.w	r9,r7[-72]
8000390e:	f2 08 00 08 	add	r8,r9,r8
80003912:	ef 29 ff d7 	ld.sb	r9,r7[-41]
80003916:	2f d9       	sub	r9,-3
80003918:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
8000391c:	ef 28 ff d7 	ld.sb	r8,r7[-41]
80003920:	2f d8       	sub	r8,-3
80003922:	ea 08 03 28 	ld.w	r8,r5[r8<<0x2]
80003926:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8000392a:	f4 08 15 02 	lsl	r8,r10,0x2
8000392e:	ee 08 00 08 	add	r8,r7,r8
80003932:	f1 49 ff c8 	st.w	r8[-56],r9
	
	int8_t index2;
	for (index2=0;index2<index;index2++)
	{
		float diffPoints[3];
		for (i=0;i<3;i++)
80003936:	ef 38 ff d7 	ld.ub	r8,r7[-41]
8000393a:	2f f8       	sub	r8,-1
8000393c:	ef 68 ff d7 	st.b	r7[-41],r8
80003940:	ef 39 ff d7 	ld.ub	r9,r7[-41]
80003944:	30 28       	mov	r8,2
80003946:	f0 09 18 00 	cp.b	r9,r8
8000394a:	fe 9a ff d8 	brle	800038fa <linearProgram1+0xd2>
		{
			diffPoints[i] = planes[index2].point[i] - line.point[i];
		}
		float numerator = scalar_product(diffPoints, planes[index2].normal);
8000394e:	ef 29 ff ef 	ld.sb	r9,r7[-17]
80003952:	12 98       	mov	r8,r9
80003954:	a1 78       	lsl	r8,0x1
80003956:	12 08       	add	r8,r9
80003958:	a3 78       	lsl	r8,0x3
8000395a:	ee f9 ff b8 	ld.w	r9,r7[-72]
8000395e:	f2 08 00 08 	add	r8,r9,r8
80003962:	10 99       	mov	r9,r8
80003964:	ee c8 00 38 	sub	r8,r7,56
80003968:	12 9b       	mov	r11,r9
8000396a:	10 9c       	mov	r12,r8
8000396c:	fe b0 f7 90 	rcall	8000288c <scalar_product>
80003970:	18 98       	mov	r8,r12
80003972:	ef 48 ff f0 	st.w	r7[-16],r8
		float denominator = scalar_product(line.direction, planes[index2].normal);
80003976:	ef 29 ff ef 	ld.sb	r9,r7[-17]
8000397a:	12 98       	mov	r8,r9
8000397c:	a1 78       	lsl	r8,0x1
8000397e:	12 08       	add	r8,r9
80003980:	a3 78       	lsl	r8,0x3
80003982:	ee f9 ff b8 	ld.w	r9,r7[-72]
80003986:	f2 08 00 08 	add	r8,r9,r8
8000398a:	10 9b       	mov	r11,r8
8000398c:	0a 9c       	mov	r12,r5
8000398e:	fe b0 f7 7f 	rcall	8000288c <scalar_product>
80003992:	18 98       	mov	r8,r12
80003994:	ef 48 ff f4 	st.w	r7[-12],r8
		
		if (SQR(denominator) <= RVO_EPSILON)
80003998:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000399c:	ee f8 ff f4 	ld.w	r8,r7[-12]
800039a0:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
800039a4:	10 9c       	mov	r12,r8
800039a6:	f0 16 00 02 	mcall	r6[8]
800039aa:	14 98       	mov	r8,r10
800039ac:	16 99       	mov	r9,r11
800039ae:	30 03       	mov	r3,0
800039b0:	e0 6a 43 2d 	mov	r10,17197
800039b4:	ea 1a eb 1c 	orh	r10,0xeb1c
800039b8:	e0 6b 36 e2 	mov	r11,14050
800039bc:	ea 1b 3f 1a 	orh	r11,0x3f1a
800039c0:	f0 16 00 76 	mcall	r6[472]
800039c4:	18 98       	mov	r8,r12
800039c6:	58 08       	cp.w	r8,0
800039c8:	c0 20       	breq	800039cc <linearProgram1+0x1a4>
800039ca:	30 13       	mov	r3,1
800039cc:	f1 d3 c0 08 	bfextu	r8,r3,0x0,0x8
800039d0:	c1 00       	breq	800039f0 <linearProgram1+0x1c8>
		{
			/* Lines line is (almost) parallel to plane i. */
			if (numerator > 0.0)
800039d2:	30 18       	mov	r8,1
800039d4:	ee fa ff f0 	ld.w	r10,r7[-16]
800039d8:	30 09       	mov	r9,0
800039da:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
800039de:	e0 8c 00 04 	brvs	800039e6 <linearProgram1+0x1be>
800039e2:	e0 89 00 03 	brgt	800039e8 <linearProgram1+0x1c0>
800039e6:	30 08       	mov	r8,0
800039e8:	5c 58       	castu.b	r8
800039ea:	c3 b0       	breq	80003a60 <linearProgram1+0x238>
			{
				return false;
800039ec:	30 08       	mov	r8,0
800039ee:	c7 09       	rjmp	80003cce <linearProgram1+0x4a6>
			}else{
				continue;
			}
		}
		
		float t = numerator / denominator;
800039f0:	ee fb ff f4 	ld.w	r11,r7[-12]
800039f4:	ee fc ff f0 	ld.w	r12,r7[-16]
800039f8:	f0 16 00 08 	mcall	r6[32]
800039fc:	18 98       	mov	r8,r12
800039fe:	ef 48 ff f8 	st.w	r7[-8],r8
		
		if (denominator >= 0.0)
80003a02:	30 18       	mov	r8,1
80003a04:	ee fa ff f4 	ld.w	r10,r7[-12]
80003a08:	30 09       	mov	r9,0
80003a0a:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80003a0e:	e0 8c 00 03 	brvs	80003a14 <linearProgram1+0x1ec>
80003a12:	c0 24       	brge	80003a16 <linearProgram1+0x1ee>
80003a14:	30 08       	mov	r8,0
80003a16:	5c 58       	castu.b	r8
80003a18:	c0 b0       	breq	80003a2e <linearProgram1+0x206>
		{
			/* Plane i bounds line on the left. */
			tLeft = f_max(tLeft, t);
80003a1a:	ee fb ff f8 	ld.w	r11,r7[-8]
80003a1e:	ee fc ff e4 	ld.w	r12,r7[-28]
80003a22:	fe b0 f9 52 	rcall	80002cc6 <f_max>
80003a26:	18 98       	mov	r8,r12
80003a28:	ef 48 ff e4 	st.w	r7[-28],r8
80003a2c:	c0 a8       	rjmp	80003a40 <linearProgram1+0x218>
		}else{
			/* Plane i bounds line on the right. */
			tRight = f_min(tRight, t);
80003a2e:	ee fb ff f8 	ld.w	r11,r7[-8]
80003a32:	ee fc ff e8 	ld.w	r12,r7[-24]
80003a36:	fe b0 f9 29 	rcall	80002c88 <f_min>
80003a3a:	18 98       	mov	r8,r12
80003a3c:	ef 48 ff e8 	st.w	r7[-24],r8
		}
		
		if (tLeft > tRight)
80003a40:	30 18       	mov	r8,1
80003a42:	ee fa ff e4 	ld.w	r10,r7[-28]
80003a46:	ee f9 ff e8 	ld.w	r9,r7[-24]
80003a4a:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80003a4e:	e0 8c 00 04 	brvs	80003a56 <linearProgram1+0x22e>
80003a52:	e0 89 00 03 	brgt	80003a58 <linearProgram1+0x230>
80003a56:	30 08       	mov	r8,0
80003a58:	5c 58       	castu.b	r8
80003a5a:	c0 40       	breq	80003a62 <linearProgram1+0x23a>
		{
			return false;
80003a5c:	30 08       	mov	r8,0
80003a5e:	c3 89       	rjmp	80003cce <linearProgram1+0x4a6>
			/* Lines line is (almost) parallel to plane i. */
			if (numerator > 0.0)
			{
				return false;
			}else{
				continue;
80003a60:	d7 03       	nop
	float sqrtDiscriminant = fast_sqrt(discriminant);
	float tLeft = -dotProduct - sqrtDiscriminant;
	float tRight = -dotProduct + sqrtDiscriminant;
	
	int8_t index2;
	for (index2=0;index2<index;index2++)
80003a62:	ef 38 ff ef 	ld.ub	r8,r7[-17]
80003a66:	2f f8       	sub	r8,-1
80003a68:	ef 68 ff ef 	st.b	r7[-17],r8
80003a6c:	ef 39 ff ef 	ld.ub	r9,r7[-17]
80003a70:	ef 38 ff b4 	ld.ub	r8,r7[-76]
80003a74:	f0 09 18 00 	cp.b	r9,r8
80003a78:	fe 95 ff 3d 	brlt	800038f2 <linearProgram1+0xca>
		{
			return false;
		}
	}
	
	if (directionOpt)
80003a7c:	ef 39 ff a4 	ld.ub	r9,r7[-92]
80003a80:	30 08       	mov	r8,0
80003a82:	f0 09 18 00 	cp.b	r9,r8
80003a86:	c6 20       	breq	80003b4a <linearProgram1+0x322>
	{
		/* Optimize direction. */
		if (scalar_product(OptimalVelocity, line.direction) > 0.0f) {
80003a88:	0a 9b       	mov	r11,r5
80003a8a:	ee fc ff ac 	ld.w	r12,r7[-84]
80003a8e:	fe b0 f6 ff 	rcall	8000288c <scalar_product>
80003a92:	18 9a       	mov	r10,r12
80003a94:	30 18       	mov	r8,1
80003a96:	30 09       	mov	r9,0
80003a98:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80003a9c:	e0 8c 00 04 	brvs	80003aa4 <linearProgram1+0x27c>
80003aa0:	e0 89 00 03 	brgt	80003aa6 <linearProgram1+0x27e>
80003aa4:	30 08       	mov	r8,0
80003aa6:	5c 58       	castu.b	r8
80003aa8:	c2 90       	breq	80003afa <linearProgram1+0x2d2>
			/* Take right extreme. */
			for (i=0;i<3;i++)
80003aaa:	30 08       	mov	r8,0
80003aac:	ef 68 ff d7 	st.b	r7[-41],r8
80003ab0:	c1 d8       	rjmp	80003aea <linearProgram1+0x2c2>
			{
				NewVelocity[i] = line.point[i] + tRight * line.direction[i];
80003ab2:	ef 28 ff d7 	ld.sb	r8,r7[-41]
80003ab6:	a3 68       	lsl	r8,0x2
80003ab8:	ee f9 ff a8 	ld.w	r9,r7[-88]
80003abc:	f2 08 00 08 	add	r8,r9,r8
80003ac0:	ef 29 ff d7 	ld.sb	r9,r7[-41]
80003ac4:	2f d9       	sub	r9,-3
80003ac6:	ea 09 03 2a 	ld.w	r10,r5[r9<<0x2]
80003aca:	ef 29 ff d7 	ld.sb	r9,r7[-41]
80003ace:	ea 09 03 2b 	ld.w	r11,r5[r9<<0x2]
80003ad2:	ee f9 ff e8 	ld.w	r9,r7[-24]
80003ad6:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
80003ada:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
80003ade:	91 09       	st.w	r8[0x0],r9
	if (directionOpt)
	{
		/* Optimize direction. */
		if (scalar_product(OptimalVelocity, line.direction) > 0.0f) {
			/* Take right extreme. */
			for (i=0;i<3;i++)
80003ae0:	ef 38 ff d7 	ld.ub	r8,r7[-41]
80003ae4:	2f f8       	sub	r8,-1
80003ae6:	ef 68 ff d7 	st.b	r7[-41],r8
80003aea:	ef 39 ff d7 	ld.ub	r9,r7[-41]
80003aee:	30 28       	mov	r8,2
80003af0:	f0 09 18 00 	cp.b	r9,r8
80003af4:	fe 9a ff df 	brle	80003ab2 <linearProgram1+0x28a>
80003af8:	ce a8       	rjmp	80003ccc <linearProgram1+0x4a4>
			{
				NewVelocity[i] = line.point[i] + tRight * line.direction[i];
			}
		}else {
			/* Take left extreme. */
			for (i=0;i<3;i++)
80003afa:	30 08       	mov	r8,0
80003afc:	ef 68 ff d7 	st.b	r7[-41],r8
80003b00:	c1 d8       	rjmp	80003b3a <linearProgram1+0x312>
			{
				NewVelocity[i] = line.point[i] + tLeft * line.direction[i];
80003b02:	ef 28 ff d7 	ld.sb	r8,r7[-41]
80003b06:	a3 68       	lsl	r8,0x2
80003b08:	ee f9 ff a8 	ld.w	r9,r7[-88]
80003b0c:	f2 08 00 08 	add	r8,r9,r8
80003b10:	ef 29 ff d7 	ld.sb	r9,r7[-41]
80003b14:	2f d9       	sub	r9,-3
80003b16:	ea 09 03 2a 	ld.w	r10,r5[r9<<0x2]
80003b1a:	ef 29 ff d7 	ld.sb	r9,r7[-41]
80003b1e:	ea 09 03 2b 	ld.w	r11,r5[r9<<0x2]
80003b22:	ee f9 ff e4 	ld.w	r9,r7[-28]
80003b26:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
80003b2a:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
80003b2e:	91 09       	st.w	r8[0x0],r9
			{
				NewVelocity[i] = line.point[i] + tRight * line.direction[i];
			}
		}else {
			/* Take left extreme. */
			for (i=0;i<3;i++)
80003b30:	ef 38 ff d7 	ld.ub	r8,r7[-41]
80003b34:	2f f8       	sub	r8,-1
80003b36:	ef 68 ff d7 	st.b	r7[-41],r8
80003b3a:	ef 39 ff d7 	ld.ub	r9,r7[-41]
80003b3e:	30 28       	mov	r8,2
80003b40:	f0 09 18 00 	cp.b	r9,r8
80003b44:	fe 9a ff df 	brle	80003b02 <linearProgram1+0x2da>
80003b48:	cc 28       	rjmp	80003ccc <linearProgram1+0x4a4>
			}
		}
	}else{
		/* Optimize closest point. */
		float diffVelPoint[3];
		for (i=0;i<3;i++)
80003b4a:	30 08       	mov	r8,0
80003b4c:	ef 68 ff d7 	st.b	r7[-41],r8
80003b50:	c1 c8       	rjmp	80003b88 <linearProgram1+0x360>
		{
			diffVelPoint[i] = OptimalVelocity[i] - line.point[i];
80003b52:	ef 28 ff d7 	ld.sb	r8,r7[-41]
80003b56:	ef 29 ff d7 	ld.sb	r9,r7[-41]
80003b5a:	a3 69       	lsl	r9,0x2
80003b5c:	ee fa ff ac 	ld.w	r10,r7[-84]
80003b60:	f4 09 00 09 	add	r9,r10,r9
80003b64:	72 0a       	ld.w	r10,r9[0x0]
80003b66:	ef 29 ff d7 	ld.sb	r9,r7[-41]
80003b6a:	2f d9       	sub	r9,-3
80003b6c:	ea 09 03 29 	ld.w	r9,r5[r9<<0x2]
80003b70:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80003b74:	a3 68       	lsl	r8,0x2
80003b76:	ee 08 00 08 	add	r8,r7,r8
80003b7a:	f1 49 ff bc 	st.w	r8[-68],r9
			}
		}
	}else{
		/* Optimize closest point. */
		float diffVelPoint[3];
		for (i=0;i<3;i++)
80003b7e:	ef 38 ff d7 	ld.ub	r8,r7[-41]
80003b82:	2f f8       	sub	r8,-1
80003b84:	ef 68 ff d7 	st.b	r7[-41],r8
80003b88:	ef 39 ff d7 	ld.ub	r9,r7[-41]
80003b8c:	30 28       	mov	r8,2
80003b8e:	f0 09 18 00 	cp.b	r9,r8
80003b92:	fe 9a ff e0 	brle	80003b52 <linearProgram1+0x32a>
		{
			diffVelPoint[i] = OptimalVelocity[i] - line.point[i];
		}
		
		float t = scalar_product(line.direction, diffVelPoint);
80003b96:	ee c8 00 44 	sub	r8,r7,68
80003b9a:	10 9b       	mov	r11,r8
80003b9c:	0a 9c       	mov	r12,r5
80003b9e:	fe b0 f6 77 	rcall	8000288c <scalar_product>
80003ba2:	18 98       	mov	r8,r12
80003ba4:	ef 48 ff fc 	st.w	r7[-4],r8

		if (t < tLeft)
80003ba8:	30 18       	mov	r8,1
80003baa:	ee fa ff fc 	ld.w	r10,r7[-4]
80003bae:	ee f9 ff e4 	ld.w	r9,r7[-28]
80003bb2:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80003bb6:	e0 8c 00 03 	brvs	80003bbc <linearProgram1+0x394>
80003bba:	c0 25       	brlt	80003bbe <linearProgram1+0x396>
80003bbc:	30 08       	mov	r8,0
80003bbe:	5c 58       	castu.b	r8
80003bc0:	c2 90       	breq	80003c12 <linearProgram1+0x3ea>
		{
			for (i=0;i<3;i++)
80003bc2:	30 08       	mov	r8,0
80003bc4:	ef 68 ff d7 	st.b	r7[-41],r8
80003bc8:	c1 d8       	rjmp	80003c02 <linearProgram1+0x3da>
			{
				NewVelocity[i] = line.point[i] + tLeft * line.direction[i];
80003bca:	ef 28 ff d7 	ld.sb	r8,r7[-41]
80003bce:	a3 68       	lsl	r8,0x2
80003bd0:	ee f9 ff a8 	ld.w	r9,r7[-88]
80003bd4:	f2 08 00 08 	add	r8,r9,r8
80003bd8:	ef 29 ff d7 	ld.sb	r9,r7[-41]
80003bdc:	2f d9       	sub	r9,-3
80003bde:	ea 09 03 2a 	ld.w	r10,r5[r9<<0x2]
80003be2:	ef 29 ff d7 	ld.sb	r9,r7[-41]
80003be6:	ea 09 03 2b 	ld.w	r11,r5[r9<<0x2]
80003bea:	ee f9 ff e4 	ld.w	r9,r7[-28]
80003bee:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
80003bf2:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
80003bf6:	91 09       	st.w	r8[0x0],r9
		
		float t = scalar_product(line.direction, diffVelPoint);

		if (t < tLeft)
		{
			for (i=0;i<3;i++)
80003bf8:	ef 38 ff d7 	ld.ub	r8,r7[-41]
80003bfc:	2f f8       	sub	r8,-1
80003bfe:	ef 68 ff d7 	st.b	r7[-41],r8
80003c02:	ef 39 ff d7 	ld.ub	r9,r7[-41]
80003c06:	30 28       	mov	r8,2
80003c08:	f0 09 18 00 	cp.b	r9,r8
80003c0c:	fe 9a ff df 	brle	80003bca <linearProgram1+0x3a2>
80003c10:	c5 e8       	rjmp	80003ccc <linearProgram1+0x4a4>
			{
				NewVelocity[i] = line.point[i] + tLeft * line.direction[i];
			}
		}else if (t > tRight){
80003c12:	30 18       	mov	r8,1
80003c14:	ee fa ff fc 	ld.w	r10,r7[-4]
80003c18:	ee f9 ff e8 	ld.w	r9,r7[-24]
80003c1c:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80003c20:	e0 8c 00 04 	brvs	80003c28 <linearProgram1+0x400>
80003c24:	e0 89 00 03 	brgt	80003c2a <linearProgram1+0x402>
80003c28:	30 08       	mov	r8,0
80003c2a:	5c 58       	castu.b	r8
80003c2c:	c2 90       	breq	80003c7e <linearProgram1+0x456>
			for (i=0;i<3;i++)
80003c2e:	30 08       	mov	r8,0
80003c30:	ef 68 ff d7 	st.b	r7[-41],r8
80003c34:	c1 d8       	rjmp	80003c6e <linearProgram1+0x446>
			{
				NewVelocity[i] = line.point[i] + tRight * line.direction[i];
80003c36:	ef 28 ff d7 	ld.sb	r8,r7[-41]
80003c3a:	a3 68       	lsl	r8,0x2
80003c3c:	ee f9 ff a8 	ld.w	r9,r7[-88]
80003c40:	f2 08 00 08 	add	r8,r9,r8
80003c44:	ef 29 ff d7 	ld.sb	r9,r7[-41]
80003c48:	2f d9       	sub	r9,-3
80003c4a:	ea 09 03 2a 	ld.w	r10,r5[r9<<0x2]
80003c4e:	ef 29 ff d7 	ld.sb	r9,r7[-41]
80003c52:	ea 09 03 2b 	ld.w	r11,r5[r9<<0x2]
80003c56:	ee f9 ff e8 	ld.w	r9,r7[-24]
80003c5a:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
80003c5e:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
80003c62:	91 09       	st.w	r8[0x0],r9
			for (i=0;i<3;i++)
			{
				NewVelocity[i] = line.point[i] + tLeft * line.direction[i];
			}
		}else if (t > tRight){
			for (i=0;i<3;i++)
80003c64:	ef 38 ff d7 	ld.ub	r8,r7[-41]
80003c68:	2f f8       	sub	r8,-1
80003c6a:	ef 68 ff d7 	st.b	r7[-41],r8
80003c6e:	ef 39 ff d7 	ld.ub	r9,r7[-41]
80003c72:	30 28       	mov	r8,2
80003c74:	f0 09 18 00 	cp.b	r9,r8
80003c78:	fe 9a ff df 	brle	80003c36 <linearProgram1+0x40e>
80003c7c:	c2 88       	rjmp	80003ccc <linearProgram1+0x4a4>
			{
				NewVelocity[i] = line.point[i] + tRight * line.direction[i];
			}
		}else{
			for (i=0;i<3;i++)
80003c7e:	30 08       	mov	r8,0
80003c80:	ef 68 ff d7 	st.b	r7[-41],r8
80003c84:	c1 d8       	rjmp	80003cbe <linearProgram1+0x496>
			{
				NewVelocity[i] = line.point[i] + t * line.direction[i];
80003c86:	ef 28 ff d7 	ld.sb	r8,r7[-41]
80003c8a:	a3 68       	lsl	r8,0x2
80003c8c:	ee f9 ff a8 	ld.w	r9,r7[-88]
80003c90:	f2 08 00 08 	add	r8,r9,r8
80003c94:	ef 29 ff d7 	ld.sb	r9,r7[-41]
80003c98:	2f d9       	sub	r9,-3
80003c9a:	ea 09 03 2a 	ld.w	r10,r5[r9<<0x2]
80003c9e:	ef 29 ff d7 	ld.sb	r9,r7[-41]
80003ca2:	ea 09 03 2b 	ld.w	r11,r5[r9<<0x2]
80003ca6:	ee f9 ff fc 	ld.w	r9,r7[-4]
80003caa:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
80003cae:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
80003cb2:	91 09       	st.w	r8[0x0],r9
			for (i=0;i<3;i++)
			{
				NewVelocity[i] = line.point[i] + tRight * line.direction[i];
			}
		}else{
			for (i=0;i<3;i++)
80003cb4:	ef 38 ff d7 	ld.ub	r8,r7[-41]
80003cb8:	2f f8       	sub	r8,-1
80003cba:	ef 68 ff d7 	st.b	r7[-41],r8
80003cbe:	ef 39 ff d7 	ld.ub	r9,r7[-41]
80003cc2:	30 28       	mov	r8,2
80003cc4:	f0 09 18 00 	cp.b	r9,r8
80003cc8:	fe 9a ff df 	brle	80003c86 <linearProgram1+0x45e>
			{
				NewVelocity[i] = line.point[i] + t * line.direction[i];
			}
		}
	}
	return true;
80003ccc:	30 18       	mov	r8,1
}
80003cce:	10 9c       	mov	r12,r8
80003cd0:	2e 9d       	sub	sp,-92
80003cd2:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
80003cd6:	00 00       	add	r0,r0
80003cd8:	80 00       	ld.sh	r0,r0[0x0]
80003cda:	36 b8       	mov	r8,107

80003cdc <linearProgram2>:

bool linearProgram2(plane_t planes[], int8_t ind, float maxSpeed, float OptimalVelocity[], float NewVelocity[], bool directionOpt)
{
80003cdc:	eb cd 40 e8 	pushm	r3,r5-r7,lr
80003ce0:	1a 97       	mov	r7,sp
80003ce2:	fa cd 00 cc 	sub	sp,sp,204
80003ce6:	fe f6 09 6e 	ld.w	r6,pc[2414]
80003cea:	1e 26       	rsub	r6,pc
80003cec:	ee ce ff ec 	sub	lr,r7,-20
80003cf0:	ef 4c ff 48 	st.w	r7[-184],r12
80003cf4:	ef 4a ff 40 	st.w	r7[-192],r10
80003cf8:	ef 49 ff 3c 	st.w	r7[-196],r9
80003cfc:	ef 48 ff 38 	st.w	r7[-200],r8
80003d00:	7c 08       	ld.w	r8,lr[0x0]
80003d02:	16 99       	mov	r9,r11
80003d04:	ef 69 ff 44 	st.b	r7[-188],r9
80003d08:	ef 68 ff 34 	st.b	r7[-204],r8
	int8_t i;
	
	float planeDist = scalar_product(planes[ind].point,planes[ind].normal);
80003d0c:	ef 29 ff 44 	ld.sb	r9,r7[-188]
80003d10:	12 98       	mov	r8,r9
80003d12:	a1 78       	lsl	r8,0x1
80003d14:	12 08       	add	r8,r9
80003d16:	a3 78       	lsl	r8,0x3
80003d18:	ee f9 ff 48 	ld.w	r9,r7[-184]
80003d1c:	f2 08 00 08 	add	r8,r9,r8
80003d20:	10 9a       	mov	r10,r8
80003d22:	ef 29 ff 44 	ld.sb	r9,r7[-188]
80003d26:	12 98       	mov	r8,r9
80003d28:	a1 78       	lsl	r8,0x1
80003d2a:	12 08       	add	r8,r9
80003d2c:	a3 78       	lsl	r8,0x3
80003d2e:	ee f9 ff 48 	ld.w	r9,r7[-184]
80003d32:	f2 08 00 08 	add	r8,r9,r8
80003d36:	2f 48       	sub	r8,-12
80003d38:	14 9b       	mov	r11,r10
80003d3a:	10 9c       	mov	r12,r8
80003d3c:	fe b0 f5 a8 	rcall	8000288c <scalar_product>
80003d40:	18 98       	mov	r8,r12
80003d42:	ef 48 ff c8 	st.w	r7[-56],r8
	float planeDistSq = SQR(planeDist);
80003d46:	ee f9 ff c8 	ld.w	r9,r7[-56]
80003d4a:	ee f8 ff c8 	ld.w	r8,r7[-56]
80003d4e:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80003d52:	ef 48 ff cc 	st.w	r7[-52],r8
	float radiusSq = SQR(maxSpeed);
80003d56:	ee f9 ff 40 	ld.w	r9,r7[-192]
80003d5a:	ee f8 ff 40 	ld.w	r8,r7[-192]
80003d5e:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80003d62:	ef 48 ff d0 	st.w	r7[-48],r8
	
	if (planeDistSq > radiusSq)
80003d66:	30 18       	mov	r8,1
80003d68:	ee fa ff cc 	ld.w	r10,r7[-52]
80003d6c:	ee f9 ff d0 	ld.w	r9,r7[-48]
80003d70:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80003d74:	e0 8c 00 04 	brvs	80003d7c <linearProgram2+0xa0>
80003d78:	e0 89 00 03 	brgt	80003d7e <linearProgram2+0xa2>
80003d7c:	30 08       	mov	r8,0
80003d7e:	5c 58       	castu.b	r8
80003d80:	c0 40       	breq	80003d88 <linearProgram2+0xac>
	{
		/* Max speed sphere fully invalidates plane planeNo. */
		return false;
80003d82:	30 08       	mov	r8,0
80003d84:	e0 8f 04 64 	bral	8000464c <linearProgram2+0x970>
	}
	
	float planeRadiusSq = radiusSq - planeDistSq;
80003d88:	ee f9 ff d0 	ld.w	r9,r7[-48]
80003d8c:	ee f8 ff cc 	ld.w	r8,r7[-52]
80003d90:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80003d94:	ef 48 ff d4 	st.w	r7[-44],r8
	
	float planeCenter[3];
	for(i=0;i<3;i++)
80003d98:	30 08       	mov	r8,0
80003d9a:	ef 68 ff c7 	st.b	r7[-57],r8
80003d9e:	c2 08       	rjmp	80003dde <linearProgram2+0x102>
	{
		planeCenter[i] = planeDist * planes[ind].normal[i];
80003da0:	ef 2a ff c7 	ld.sb	r10,r7[-57]
80003da4:	ef 29 ff 44 	ld.sb	r9,r7[-188]
80003da8:	12 98       	mov	r8,r9
80003daa:	a1 78       	lsl	r8,0x1
80003dac:	12 08       	add	r8,r9
80003dae:	a3 78       	lsl	r8,0x3
80003db0:	ee f9 ff 48 	ld.w	r9,r7[-184]
80003db4:	f2 08 00 08 	add	r8,r9,r8
80003db8:	ef 29 ff c7 	ld.sb	r9,r7[-57]
80003dbc:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80003dc0:	ee f8 ff c8 	ld.w	r8,r7[-56]
80003dc4:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80003dc8:	f4 08 15 02 	lsl	r8,r10,0x2
80003dcc:	ee 08 00 08 	add	r8,r7,r8
80003dd0:	f1 49 ff b8 	st.w	r8[-72],r9
	}
	
	float planeRadiusSq = radiusSq - planeDistSq;
	
	float planeCenter[3];
	for(i=0;i<3;i++)
80003dd4:	ef 38 ff c7 	ld.ub	r8,r7[-57]
80003dd8:	2f f8       	sub	r8,-1
80003dda:	ef 68 ff c7 	st.b	r7[-57],r8
80003dde:	ef 39 ff c7 	ld.ub	r9,r7[-57]
80003de2:	30 28       	mov	r8,2
80003de4:	f0 09 18 00 	cp.b	r9,r8
80003de8:	fe 9a ff dc 	brle	80003da0 <linearProgram2+0xc4>
	{
		planeCenter[i] = planeDist * planes[ind].normal[i];
	}
	
	if (directionOpt)
80003dec:	ef 39 ff 34 	ld.ub	r9,r7[-204]
80003df0:	30 08       	mov	r8,0
80003df2:	f0 09 18 00 	cp.b	r9,r8
80003df6:	e0 80 00 c0 	breq	80003f76 <linearProgram2+0x29a>
	{
		/* Project direction optVelocity on plane ind. */
		float planeOptVelocity[3];
		float scalarProduct = scalar_product(OptimalVelocity,planes[ind].normal);
80003dfa:	ef 29 ff 44 	ld.sb	r9,r7[-188]
80003dfe:	12 98       	mov	r8,r9
80003e00:	a1 78       	lsl	r8,0x1
80003e02:	12 08       	add	r8,r9
80003e04:	a3 78       	lsl	r8,0x3
80003e06:	ee f9 ff 48 	ld.w	r9,r7[-184]
80003e0a:	f2 08 00 08 	add	r8,r9,r8
80003e0e:	10 9b       	mov	r11,r8
80003e10:	ee fc ff 3c 	ld.w	r12,r7[-196]
80003e14:	fe b0 f5 3c 	rcall	8000288c <scalar_product>
80003e18:	18 98       	mov	r8,r12
80003e1a:	ef 48 ff dc 	st.w	r7[-36],r8
		for(i=0;i<3;i++)
80003e1e:	30 08       	mov	r8,0
80003e20:	ef 68 ff c7 	st.b	r7[-57],r8
80003e24:	c2 a8       	rjmp	80003e78 <linearProgram2+0x19c>
		{
			planeOptVelocity[i] = OptimalVelocity[i] - scalarProduct * planes[ind].normal[i];
80003e26:	ef 2a ff c7 	ld.sb	r10,r7[-57]
80003e2a:	ef 28 ff c7 	ld.sb	r8,r7[-57]
80003e2e:	a3 68       	lsl	r8,0x2
80003e30:	ee f9 ff 3c 	ld.w	r9,r7[-196]
80003e34:	f2 08 00 08 	add	r8,r9,r8
80003e38:	70 0b       	ld.w	r11,r8[0x0]
80003e3a:	ef 29 ff 44 	ld.sb	r9,r7[-188]
80003e3e:	12 98       	mov	r8,r9
80003e40:	a1 78       	lsl	r8,0x1
80003e42:	12 08       	add	r8,r9
80003e44:	a3 78       	lsl	r8,0x3
80003e46:	ee f9 ff 48 	ld.w	r9,r7[-184]
80003e4a:	f2 08 00 08 	add	r8,r9,r8
80003e4e:	ef 29 ff c7 	ld.sb	r9,r7[-57]
80003e52:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80003e56:	ee f8 ff dc 	ld.w	r8,r7[-36]
80003e5a:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80003e5e:	e5 a1 09 b8 	cop	cp0,cr9,cr11,cr8,0x42
80003e62:	f4 08 15 02 	lsl	r8,r10,0x2
80003e66:	ee 08 00 08 	add	r8,r7,r8
80003e6a:	f1 49 ff ac 	st.w	r8[-84],r9
	if (directionOpt)
	{
		/* Project direction optVelocity on plane ind. */
		float planeOptVelocity[3];
		float scalarProduct = scalar_product(OptimalVelocity,planes[ind].normal);
		for(i=0;i<3;i++)
80003e6e:	ef 38 ff c7 	ld.ub	r8,r7[-57]
80003e72:	2f f8       	sub	r8,-1
80003e74:	ef 68 ff c7 	st.b	r7[-57],r8
80003e78:	ef 39 ff c7 	ld.ub	r9,r7[-57]
80003e7c:	30 28       	mov	r8,2
80003e7e:	f0 09 18 00 	cp.b	r9,r8
80003e82:	fe 9a ff d2 	brle	80003e26 <linearProgram2+0x14a>
		{
			planeOptVelocity[i] = OptimalVelocity[i] - scalarProduct * planes[ind].normal[i];
		}
		float planeOptVelocityLengthSq = vector_norm_sqr(planeOptVelocity);
80003e86:	ee c8 00 54 	sub	r8,r7,84
80003e8a:	10 9c       	mov	r12,r8
80003e8c:	fe b0 f6 d0 	rcall	80002c2c <vector_norm_sqr>
80003e90:	18 98       	mov	r8,r12
80003e92:	ef 48 ff e0 	st.w	r7[-32],r8
		
		if (planeOptVelocityLengthSq <= RVO_EPSILON)
80003e96:	ee fc ff e0 	ld.w	r12,r7[-32]
80003e9a:	f0 16 00 02 	mcall	r6[8]
80003e9e:	14 98       	mov	r8,r10
80003ea0:	16 99       	mov	r9,r11
80003ea2:	30 05       	mov	r5,0
80003ea4:	e0 6a 43 2d 	mov	r10,17197
80003ea8:	ea 1a eb 1c 	orh	r10,0xeb1c
80003eac:	e0 6b 36 e2 	mov	r11,14050
80003eb0:	ea 1b 3f 1a 	orh	r11,0x3f1a
80003eb4:	f0 16 00 76 	mcall	r6[472]
80003eb8:	18 98       	mov	r8,r12
80003eba:	58 08       	cp.w	r8,0
80003ebc:	c0 20       	breq	80003ec0 <linearProgram2+0x1e4>
80003ebe:	30 15       	mov	r5,1
80003ec0:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
80003ec4:	c2 00       	breq	80003f04 <linearProgram2+0x228>
		{
			for(i=0;i<3;i++)
80003ec6:	30 08       	mov	r8,0
80003ec8:	ef 68 ff c7 	st.b	r7[-57],r8
80003ecc:	c1 48       	rjmp	80003ef4 <linearProgram2+0x218>
			{
				NewVelocity[i] = planeCenter[i];
80003ece:	ef 28 ff c7 	ld.sb	r8,r7[-57]
80003ed2:	a3 68       	lsl	r8,0x2
80003ed4:	ee f9 ff 38 	ld.w	r9,r7[-200]
80003ed8:	10 09       	add	r9,r8
80003eda:	ef 28 ff c7 	ld.sb	r8,r7[-57]
80003ede:	a3 68       	lsl	r8,0x2
80003ee0:	ee 08 00 08 	add	r8,r7,r8
80003ee4:	f0 f8 ff b8 	ld.w	r8,r8[-72]
80003ee8:	93 08       	st.w	r9[0x0],r8
		}
		float planeOptVelocityLengthSq = vector_norm_sqr(planeOptVelocity);
		
		if (planeOptVelocityLengthSq <= RVO_EPSILON)
		{
			for(i=0;i<3;i++)
80003eea:	ef 38 ff c7 	ld.ub	r8,r7[-57]
80003eee:	2f f8       	sub	r8,-1
80003ef0:	ef 68 ff c7 	st.b	r7[-57],r8
80003ef4:	ef 39 ff c7 	ld.ub	r9,r7[-57]
80003ef8:	30 28       	mov	r8,2
80003efa:	f0 09 18 00 	cp.b	r9,r8
80003efe:	fe 9a ff e8 	brle	80003ece <linearProgram2+0x1f2>
80003f02:	c2 d9       	rjmp	8000415c <linearProgram2+0x480>
			{
				NewVelocity[i] = planeCenter[i];
			}
		}else{
			float sqrtPlane = fast_sqrt(planeRadiusSq / planeOptVelocityLengthSq);
80003f04:	ee fb ff e0 	ld.w	r11,r7[-32]
80003f08:	ee fc ff d4 	ld.w	r12,r7[-44]
80003f0c:	f0 16 00 08 	mcall	r6[32]
80003f10:	18 98       	mov	r8,r12
80003f12:	10 9c       	mov	r12,r8
80003f14:	fe b0 f6 22 	rcall	80002b58 <fast_sqrt>
80003f18:	18 98       	mov	r8,r12
80003f1a:	ef 48 ff e4 	st.w	r7[-28],r8
			for(i=0;i<3;i++)
80003f1e:	30 08       	mov	r8,0
80003f20:	ef 68 ff c7 	st.b	r7[-57],r8
80003f24:	c2 18       	rjmp	80003f66 <linearProgram2+0x28a>
			{
				NewVelocity[i] = planeCenter[i] + sqrtPlane * planeOptVelocity[i];
80003f26:	ef 28 ff c7 	ld.sb	r8,r7[-57]
80003f2a:	a3 68       	lsl	r8,0x2
80003f2c:	ee f9 ff 38 	ld.w	r9,r7[-200]
80003f30:	10 09       	add	r9,r8
80003f32:	ef 28 ff c7 	ld.sb	r8,r7[-57]
80003f36:	a3 68       	lsl	r8,0x2
80003f38:	ee 08 00 08 	add	r8,r7,r8
80003f3c:	f0 fa ff b8 	ld.w	r10,r8[-72]
80003f40:	ef 28 ff c7 	ld.sb	r8,r7[-57]
80003f44:	a3 68       	lsl	r8,0x2
80003f46:	ee 08 00 08 	add	r8,r7,r8
80003f4a:	f0 fb ff ac 	ld.w	r11,r8[-84]
80003f4e:	ee f8 ff e4 	ld.w	r8,r7[-28]
80003f52:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
80003f56:	e5 a0 08 a8 	cop	cp0,cr8,cr10,cr8,0x40
80003f5a:	93 08       	st.w	r9[0x0],r8
			{
				NewVelocity[i] = planeCenter[i];
			}
		}else{
			float sqrtPlane = fast_sqrt(planeRadiusSq / planeOptVelocityLengthSq);
			for(i=0;i<3;i++)
80003f5c:	ef 38 ff c7 	ld.ub	r8,r7[-57]
80003f60:	2f f8       	sub	r8,-1
80003f62:	ef 68 ff c7 	st.b	r7[-57],r8
80003f66:	ef 39 ff c7 	ld.ub	r9,r7[-57]
80003f6a:	30 28       	mov	r8,2
80003f6c:	f0 09 18 00 	cp.b	r9,r8
80003f70:	fe 9a ff db 	brle	80003f26 <linearProgram2+0x24a>
80003f74:	cf 48       	rjmp	8000415c <linearProgram2+0x480>
			}
		}
	}else{
		/* Project point optVelocity on plane ind. */
		float diffPtsVel[3];
		for(i=0;i<3;i++)
80003f76:	30 08       	mov	r8,0
80003f78:	ef 68 ff c7 	st.b	r7[-57],r8
80003f7c:	c2 78       	rjmp	80003fca <linearProgram2+0x2ee>
		{
			diffPtsVel[i] = planes[ind].point[i]-OptimalVelocity[i];
80003f7e:	ef 2a ff c7 	ld.sb	r10,r7[-57]
80003f82:	ef 29 ff 44 	ld.sb	r9,r7[-188]
80003f86:	12 98       	mov	r8,r9
80003f88:	a1 78       	lsl	r8,0x1
80003f8a:	12 08       	add	r8,r9
80003f8c:	a3 78       	lsl	r8,0x3
80003f8e:	ee f9 ff 48 	ld.w	r9,r7[-184]
80003f92:	f2 08 00 08 	add	r8,r9,r8
80003f96:	ef 29 ff c7 	ld.sb	r9,r7[-57]
80003f9a:	2f d9       	sub	r9,-3
80003f9c:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80003fa0:	ef 28 ff c7 	ld.sb	r8,r7[-57]
80003fa4:	a3 68       	lsl	r8,0x2
80003fa6:	ee fb ff 3c 	ld.w	r11,r7[-196]
80003faa:	f6 08 00 08 	add	r8,r11,r8
80003fae:	70 08       	ld.w	r8,r8[0x0]
80003fb0:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80003fb4:	f4 08 15 02 	lsl	r8,r10,0x2
80003fb8:	ee 08 00 08 	add	r8,r7,r8
80003fbc:	f1 49 ff a0 	st.w	r8[-96],r9
			}
		}
	}else{
		/* Project point optVelocity on plane ind. */
		float diffPtsVel[3];
		for(i=0;i<3;i++)
80003fc0:	ef 38 ff c7 	ld.ub	r8,r7[-57]
80003fc4:	2f f8       	sub	r8,-1
80003fc6:	ef 68 ff c7 	st.b	r7[-57],r8
80003fca:	ef 39 ff c7 	ld.ub	r9,r7[-57]
80003fce:	30 28       	mov	r8,2
80003fd0:	f0 09 18 00 	cp.b	r9,r8
80003fd4:	fe 9a ff d5 	brle	80003f7e <linearProgram2+0x2a2>
		{
			diffPtsVel[i] = planes[ind].point[i]-OptimalVelocity[i];
		}
		float scalarProduct = scalar_product(diffPtsVel,planes[ind].normal);
80003fd8:	ef 29 ff 44 	ld.sb	r9,r7[-188]
80003fdc:	12 98       	mov	r8,r9
80003fde:	a1 78       	lsl	r8,0x1
80003fe0:	12 08       	add	r8,r9
80003fe2:	a3 78       	lsl	r8,0x3
80003fe4:	ee f9 ff 48 	ld.w	r9,r7[-184]
80003fe8:	f2 08 00 08 	add	r8,r9,r8
80003fec:	10 99       	mov	r9,r8
80003fee:	ee c8 00 60 	sub	r8,r7,96
80003ff2:	12 9b       	mov	r11,r9
80003ff4:	10 9c       	mov	r12,r8
80003ff6:	fe b0 f4 4b 	rcall	8000288c <scalar_product>
80003ffa:	18 98       	mov	r8,r12
80003ffc:	ef 48 ff e8 	st.w	r7[-24],r8
		for(i=0;i<3;i++)
80004000:	30 08       	mov	r8,0
80004002:	ef 68 ff c7 	st.b	r7[-57],r8
80004006:	c2 a8       	rjmp	8000405a <linearProgram2+0x37e>
		{
			NewVelocity[i] = OptimalVelocity[i] + scalarProduct * planes[ind].normal[i];
80004008:	ef 28 ff c7 	ld.sb	r8,r7[-57]
8000400c:	a3 68       	lsl	r8,0x2
8000400e:	ee f9 ff 38 	ld.w	r9,r7[-200]
80004012:	f2 08 00 0a 	add	r10,r9,r8
80004016:	ef 28 ff c7 	ld.sb	r8,r7[-57]
8000401a:	a3 68       	lsl	r8,0x2
8000401c:	ee f9 ff 3c 	ld.w	r9,r7[-196]
80004020:	f2 08 00 08 	add	r8,r9,r8
80004024:	70 0b       	ld.w	r11,r8[0x0]
80004026:	ef 29 ff 44 	ld.sb	r9,r7[-188]
8000402a:	12 98       	mov	r8,r9
8000402c:	a1 78       	lsl	r8,0x1
8000402e:	12 08       	add	r8,r9
80004030:	a3 78       	lsl	r8,0x3
80004032:	ee f9 ff 48 	ld.w	r9,r7[-184]
80004036:	f2 08 00 08 	add	r8,r9,r8
8000403a:	ef 29 ff c7 	ld.sb	r9,r7[-57]
8000403e:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80004042:	ee f8 ff e8 	ld.w	r8,r7[-24]
80004046:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8000404a:	e5 a0 08 b8 	cop	cp0,cr8,cr11,cr8,0x40
8000404e:	95 08       	st.w	r10[0x0],r8
		for(i=0;i<3;i++)
		{
			diffPtsVel[i] = planes[ind].point[i]-OptimalVelocity[i];
		}
		float scalarProduct = scalar_product(diffPtsVel,planes[ind].normal);
		for(i=0;i<3;i++)
80004050:	ef 38 ff c7 	ld.ub	r8,r7[-57]
80004054:	2f f8       	sub	r8,-1
80004056:	ef 68 ff c7 	st.b	r7[-57],r8
8000405a:	ef 39 ff c7 	ld.ub	r9,r7[-57]
8000405e:	30 28       	mov	r8,2
80004060:	f0 09 18 00 	cp.b	r9,r8
80004064:	fe 9a ff d2 	brle	80004008 <linearProgram2+0x32c>
		{
			NewVelocity[i] = OptimalVelocity[i] + scalarProduct * planes[ind].normal[i];
		}
		/* If outside planeCircle, project on planeCircle. */
		if (vector_norm_sqr(NewVelocity) > radiusSq) {
80004068:	ee fc ff 38 	ld.w	r12,r7[-200]
8000406c:	fe b0 f5 e0 	rcall	80002c2c <vector_norm_sqr>
80004070:	18 9a       	mov	r10,r12
80004072:	30 18       	mov	r8,1
80004074:	ee f9 ff d0 	ld.w	r9,r7[-48]
80004078:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
8000407c:	e0 8c 00 04 	brvs	80004084 <linearProgram2+0x3a8>
80004080:	e0 89 00 03 	brgt	80004086 <linearProgram2+0x3aa>
80004084:	30 08       	mov	r8,0
80004086:	5c 58       	castu.b	r8
80004088:	c6 a0       	breq	8000415c <linearProgram2+0x480>
			float planeResult[3];
			for(i=0;i<3;i++)
8000408a:	30 08       	mov	r8,0
8000408c:	ef 68 ff c7 	st.b	r7[-57],r8
80004090:	c1 f8       	rjmp	800040ce <linearProgram2+0x3f2>
			{
				planeResult[i] = NewVelocity[i] - planeCenter[i];
80004092:	ef 2a ff c7 	ld.sb	r10,r7[-57]
80004096:	ef 28 ff c7 	ld.sb	r8,r7[-57]
8000409a:	a3 68       	lsl	r8,0x2
8000409c:	ee f9 ff 38 	ld.w	r9,r7[-200]
800040a0:	f2 08 00 08 	add	r8,r9,r8
800040a4:	70 09       	ld.w	r9,r8[0x0]
800040a6:	ef 28 ff c7 	ld.sb	r8,r7[-57]
800040aa:	a3 68       	lsl	r8,0x2
800040ac:	ee 08 00 08 	add	r8,r7,r8
800040b0:	f0 f8 ff b8 	ld.w	r8,r8[-72]
800040b4:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
800040b8:	f4 08 15 02 	lsl	r8,r10,0x2
800040bc:	ee 08 00 08 	add	r8,r7,r8
800040c0:	f1 49 ff 94 	st.w	r8[-108],r9
			NewVelocity[i] = OptimalVelocity[i] + scalarProduct * planes[ind].normal[i];
		}
		/* If outside planeCircle, project on planeCircle. */
		if (vector_norm_sqr(NewVelocity) > radiusSq) {
			float planeResult[3];
			for(i=0;i<3;i++)
800040c4:	ef 38 ff c7 	ld.ub	r8,r7[-57]
800040c8:	2f f8       	sub	r8,-1
800040ca:	ef 68 ff c7 	st.b	r7[-57],r8
800040ce:	ef 39 ff c7 	ld.ub	r9,r7[-57]
800040d2:	30 28       	mov	r8,2
800040d4:	f0 09 18 00 	cp.b	r9,r8
800040d8:	fe 9a ff dd 	brle	80004092 <linearProgram2+0x3b6>
			{
				planeResult[i] = NewVelocity[i] - planeCenter[i];
			}
			float planeResultLengthSq = vector_norm_sqr(planeResult);
800040dc:	ee c8 00 6c 	sub	r8,r7,108
800040e0:	10 9c       	mov	r12,r8
800040e2:	fe b0 f5 a5 	rcall	80002c2c <vector_norm_sqr>
800040e6:	18 98       	mov	r8,r12
800040e8:	ef 48 ff ec 	st.w	r7[-20],r8
			
			float planeSqrt = fast_sqrt(planeRadiusSq / planeResultLengthSq);
800040ec:	ee fb ff ec 	ld.w	r11,r7[-20]
800040f0:	ee fc ff d4 	ld.w	r12,r7[-44]
800040f4:	f0 16 00 08 	mcall	r6[32]
800040f8:	18 98       	mov	r8,r12
800040fa:	10 9c       	mov	r12,r8
800040fc:	fe b0 f5 2e 	rcall	80002b58 <fast_sqrt>
80004100:	18 98       	mov	r8,r12
80004102:	ef 48 ff f0 	st.w	r7[-16],r8
			for(i=0;i<3;i++)
80004106:	30 08       	mov	r8,0
80004108:	ef 68 ff c7 	st.b	r7[-57],r8
8000410c:	c2 18       	rjmp	8000414e <linearProgram2+0x472>
			{
				NewVelocity[i] = planeCenter[i] + planeSqrt * planeResult[i];
8000410e:	ef 28 ff c7 	ld.sb	r8,r7[-57]
80004112:	a3 68       	lsl	r8,0x2
80004114:	ee f9 ff 38 	ld.w	r9,r7[-200]
80004118:	10 09       	add	r9,r8
8000411a:	ef 28 ff c7 	ld.sb	r8,r7[-57]
8000411e:	a3 68       	lsl	r8,0x2
80004120:	ee 08 00 08 	add	r8,r7,r8
80004124:	f0 fa ff b8 	ld.w	r10,r8[-72]
80004128:	ef 28 ff c7 	ld.sb	r8,r7[-57]
8000412c:	a3 68       	lsl	r8,0x2
8000412e:	ee 08 00 08 	add	r8,r7,r8
80004132:	f0 fb ff 94 	ld.w	r11,r8[-108]
80004136:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000413a:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
8000413e:	e5 a0 08 a8 	cop	cp0,cr8,cr10,cr8,0x40
80004142:	93 08       	st.w	r9[0x0],r8
				planeResult[i] = NewVelocity[i] - planeCenter[i];
			}
			float planeResultLengthSq = vector_norm_sqr(planeResult);
			
			float planeSqrt = fast_sqrt(planeRadiusSq / planeResultLengthSq);
			for(i=0;i<3;i++)
80004144:	ef 38 ff c7 	ld.ub	r8,r7[-57]
80004148:	2f f8       	sub	r8,-1
8000414a:	ef 68 ff c7 	st.b	r7[-57],r8
8000414e:	ef 39 ff c7 	ld.ub	r9,r7[-57]
80004152:	30 28       	mov	r8,2
80004154:	f0 09 18 00 	cp.b	r9,r8
80004158:	fe 9a ff db 	brle	8000410e <linearProgram2+0x432>
			}
		}
	}
	
	int8_t index;
	for (index=0;index<ind;index++)
8000415c:	30 08       	mov	r8,0
8000415e:	ef 68 ff db 	st.b	r7[-37],r8
80004162:	e0 8f 02 6c 	bral	8000463a <linearProgram2+0x95e>
	{
		float diffPtsNewVel[3];
		for (i=0;i<3;i++)
80004166:	30 08       	mov	r8,0
80004168:	ef 68 ff c7 	st.b	r7[-57],r8
8000416c:	c2 78       	rjmp	800041ba <linearProgram2+0x4de>
		{
			diffPtsNewVel[i] = planes[index].point[i] - NewVelocity[i];
8000416e:	ef 2a ff c7 	ld.sb	r10,r7[-57]
80004172:	ef 29 ff db 	ld.sb	r9,r7[-37]
80004176:	12 98       	mov	r8,r9
80004178:	a1 78       	lsl	r8,0x1
8000417a:	12 08       	add	r8,r9
8000417c:	a3 78       	lsl	r8,0x3
8000417e:	ee f9 ff 48 	ld.w	r9,r7[-184]
80004182:	f2 08 00 08 	add	r8,r9,r8
80004186:	ef 29 ff c7 	ld.sb	r9,r7[-57]
8000418a:	2f d9       	sub	r9,-3
8000418c:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80004190:	ef 28 ff c7 	ld.sb	r8,r7[-57]
80004194:	a3 68       	lsl	r8,0x2
80004196:	ee fb ff 38 	ld.w	r11,r7[-200]
8000419a:	f6 08 00 08 	add	r8,r11,r8
8000419e:	70 08       	ld.w	r8,r8[0x0]
800041a0:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
800041a4:	f4 08 15 02 	lsl	r8,r10,0x2
800041a8:	ee 08 00 08 	add	r8,r7,r8
800041ac:	f1 49 ff 88 	st.w	r8[-120],r9
	
	int8_t index;
	for (index=0;index<ind;index++)
	{
		float diffPtsNewVel[3];
		for (i=0;i<3;i++)
800041b0:	ef 38 ff c7 	ld.ub	r8,r7[-57]
800041b4:	2f f8       	sub	r8,-1
800041b6:	ef 68 ff c7 	st.b	r7[-57],r8
800041ba:	ef 39 ff c7 	ld.ub	r9,r7[-57]
800041be:	30 28       	mov	r8,2
800041c0:	f0 09 18 00 	cp.b	r9,r8
800041c4:	fe 9a ff d5 	brle	8000416e <linearProgram2+0x492>
		{
			diffPtsNewVel[i] = planes[index].point[i] - NewVelocity[i];
		}
		if (scalar_product(planes[index].normal,diffPtsNewVel)>0.0)
800041c8:	ef 29 ff db 	ld.sb	r9,r7[-37]
800041cc:	12 98       	mov	r8,r9
800041ce:	a1 78       	lsl	r8,0x1
800041d0:	12 08       	add	r8,r9
800041d2:	a3 78       	lsl	r8,0x3
800041d4:	ee f9 ff 48 	ld.w	r9,r7[-184]
800041d8:	f2 08 00 08 	add	r8,r9,r8
800041dc:	ee c9 00 78 	sub	r9,r7,120
800041e0:	12 9b       	mov	r11,r9
800041e2:	10 9c       	mov	r12,r8
800041e4:	fe b0 f3 54 	rcall	8000288c <scalar_product>
800041e8:	18 9a       	mov	r10,r12
800041ea:	30 18       	mov	r8,1
800041ec:	30 09       	mov	r9,0
800041ee:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
800041f2:	e0 8c 00 04 	brvs	800041fa <linearProgram2+0x51e>
800041f6:	e0 89 00 03 	brgt	800041fc <linearProgram2+0x520>
800041fa:	30 08       	mov	r8,0
800041fc:	5c 58       	castu.b	r8
800041fe:	e0 80 02 19 	breq	80004630 <linearProgram2+0x954>
		{
			/* Result does not satisfy constraint index. Compute new optimal result. */
			/* Compute intersection line of plane index and plane ind. */
			float crossProduct[3];
			CROSS(planes[index].normal,planes[ind].normal,crossProduct);
80004202:	ef 29 ff db 	ld.sb	r9,r7[-37]
80004206:	12 98       	mov	r8,r9
80004208:	a1 78       	lsl	r8,0x1
8000420a:	12 08       	add	r8,r9
8000420c:	a3 78       	lsl	r8,0x3
8000420e:	ee f9 ff 48 	ld.w	r9,r7[-184]
80004212:	f2 08 00 08 	add	r8,r9,r8
80004216:	70 1a       	ld.w	r10,r8[0x4]
80004218:	ef 29 ff 44 	ld.sb	r9,r7[-188]
8000421c:	12 98       	mov	r8,r9
8000421e:	a1 78       	lsl	r8,0x1
80004220:	12 08       	add	r8,r9
80004222:	a3 78       	lsl	r8,0x3
80004224:	ee f9 ff 48 	ld.w	r9,r7[-184]
80004228:	f2 08 00 08 	add	r8,r9,r8
8000422c:	70 28       	ld.w	r8,r8[0x8]
8000422e:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
80004232:	ef 29 ff db 	ld.sb	r9,r7[-37]
80004236:	12 98       	mov	r8,r9
80004238:	a1 78       	lsl	r8,0x1
8000423a:	12 08       	add	r8,r9
8000423c:	a3 78       	lsl	r8,0x3
8000423e:	ee f9 ff 48 	ld.w	r9,r7[-184]
80004242:	f2 08 00 08 	add	r8,r9,r8
80004246:	70 2b       	ld.w	r11,r8[0x8]
80004248:	ef 29 ff 44 	ld.sb	r9,r7[-188]
8000424c:	12 98       	mov	r8,r9
8000424e:	a1 78       	lsl	r8,0x1
80004250:	12 08       	add	r8,r9
80004252:	a3 78       	lsl	r8,0x3
80004254:	ee f9 ff 48 	ld.w	r9,r7[-184]
80004258:	f2 08 00 08 	add	r8,r9,r8
8000425c:	70 18       	ld.w	r8,r8[0x4]
8000425e:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
80004262:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80004266:	ef 48 ff 7c 	st.w	r7[-132],r8
8000426a:	ef 29 ff db 	ld.sb	r9,r7[-37]
8000426e:	12 98       	mov	r8,r9
80004270:	a1 78       	lsl	r8,0x1
80004272:	12 08       	add	r8,r9
80004274:	a3 78       	lsl	r8,0x3
80004276:	ee f9 ff 48 	ld.w	r9,r7[-184]
8000427a:	f2 08 00 08 	add	r8,r9,r8
8000427e:	70 2a       	ld.w	r10,r8[0x8]
80004280:	ef 29 ff 44 	ld.sb	r9,r7[-188]
80004284:	12 98       	mov	r8,r9
80004286:	a1 78       	lsl	r8,0x1
80004288:	12 08       	add	r8,r9
8000428a:	a3 78       	lsl	r8,0x3
8000428c:	ee f9 ff 48 	ld.w	r9,r7[-184]
80004290:	f2 08 00 08 	add	r8,r9,r8
80004294:	70 08       	ld.w	r8,r8[0x0]
80004296:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
8000429a:	ef 29 ff db 	ld.sb	r9,r7[-37]
8000429e:	12 98       	mov	r8,r9
800042a0:	a1 78       	lsl	r8,0x1
800042a2:	12 08       	add	r8,r9
800042a4:	a3 78       	lsl	r8,0x3
800042a6:	ee f9 ff 48 	ld.w	r9,r7[-184]
800042aa:	f2 08 00 08 	add	r8,r9,r8
800042ae:	70 0b       	ld.w	r11,r8[0x0]
800042b0:	ef 29 ff 44 	ld.sb	r9,r7[-188]
800042b4:	12 98       	mov	r8,r9
800042b6:	a1 78       	lsl	r8,0x1
800042b8:	12 08       	add	r8,r9
800042ba:	a3 78       	lsl	r8,0x3
800042bc:	ee f9 ff 48 	ld.w	r9,r7[-184]
800042c0:	f2 08 00 08 	add	r8,r9,r8
800042c4:	70 28       	ld.w	r8,r8[0x8]
800042c6:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
800042ca:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
800042ce:	ef 48 ff 80 	st.w	r7[-128],r8
800042d2:	ef 29 ff db 	ld.sb	r9,r7[-37]
800042d6:	12 98       	mov	r8,r9
800042d8:	a1 78       	lsl	r8,0x1
800042da:	12 08       	add	r8,r9
800042dc:	a3 78       	lsl	r8,0x3
800042de:	ee f9 ff 48 	ld.w	r9,r7[-184]
800042e2:	f2 08 00 08 	add	r8,r9,r8
800042e6:	70 0a       	ld.w	r10,r8[0x0]
800042e8:	ef 29 ff 44 	ld.sb	r9,r7[-188]
800042ec:	12 98       	mov	r8,r9
800042ee:	a1 78       	lsl	r8,0x1
800042f0:	12 08       	add	r8,r9
800042f2:	a3 78       	lsl	r8,0x3
800042f4:	ee f9 ff 48 	ld.w	r9,r7[-184]
800042f8:	f2 08 00 08 	add	r8,r9,r8
800042fc:	70 18       	ld.w	r8,r8[0x4]
800042fe:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
80004302:	ef 29 ff db 	ld.sb	r9,r7[-37]
80004306:	12 98       	mov	r8,r9
80004308:	a1 78       	lsl	r8,0x1
8000430a:	12 08       	add	r8,r9
8000430c:	a3 78       	lsl	r8,0x3
8000430e:	ee f9 ff 48 	ld.w	r9,r7[-184]
80004312:	f2 08 00 08 	add	r8,r9,r8
80004316:	70 1b       	ld.w	r11,r8[0x4]
80004318:	ef 29 ff 44 	ld.sb	r9,r7[-188]
8000431c:	12 98       	mov	r8,r9
8000431e:	a1 78       	lsl	r8,0x1
80004320:	12 08       	add	r8,r9
80004322:	a3 78       	lsl	r8,0x3
80004324:	ee f9 ff 48 	ld.w	r9,r7[-184]
80004328:	f2 08 00 08 	add	r8,r9,r8
8000432c:	70 08       	ld.w	r8,r8[0x0]
8000432e:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
80004332:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80004336:	ef 48 ff 84 	st.w	r7[-124],r8
			
			if (vector_norm_sqr(crossProduct) <= RVO_EPSILON)
8000433a:	ee c8 00 84 	sub	r8,r7,132
8000433e:	10 9c       	mov	r12,r8
80004340:	fe b0 f4 76 	rcall	80002c2c <vector_norm_sqr>
80004344:	18 98       	mov	r8,r12
80004346:	10 9c       	mov	r12,r8
80004348:	f0 16 00 02 	mcall	r6[8]
8000434c:	14 98       	mov	r8,r10
8000434e:	16 99       	mov	r9,r11
80004350:	30 05       	mov	r5,0
80004352:	e0 6a 43 2d 	mov	r10,17197
80004356:	ea 1a eb 1c 	orh	r10,0xeb1c
8000435a:	e0 6b 36 e2 	mov	r11,14050
8000435e:	ea 1b 3f 1a 	orh	r11,0x3f1a
80004362:	f0 16 00 76 	mcall	r6[472]
80004366:	18 98       	mov	r8,r12
80004368:	58 08       	cp.w	r8,0
8000436a:	c0 20       	breq	8000436e <linearProgram2+0x692>
8000436c:	30 15       	mov	r5,1
8000436e:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
80004372:	c0 30       	breq	80004378 <linearProgram2+0x69c>
			{
				/* Planes ind and index are (almost) parallel, and plane index fully invalidates plane ind. */
				return false;
80004374:	30 08       	mov	r8,0
80004376:	c6 b9       	rjmp	8000464c <linearProgram2+0x970>
			}
			
			line_t line;
			float normCrossProduct = vector_norm(crossProduct);
80004378:	ee c8 00 84 	sub	r8,r7,132
8000437c:	10 9c       	mov	r12,r8
8000437e:	fe b0 f4 6f 	rcall	80002c5c <vector_norm>
80004382:	18 98       	mov	r8,r12
80004384:	ef 48 ff f4 	st.w	r7[-12],r8
			for (i=0;i<3;i++)
80004388:	30 08       	mov	r8,0
8000438a:	ef 68 ff c7 	st.b	r7[-57],r8
8000438e:	c1 c8       	rjmp	800043c6 <linearProgram2+0x6ea>
			{
				line.direction[i] = crossProduct[i] / normCrossProduct;
80004390:	ef 25 ff c7 	ld.sb	r5,r7[-57]
80004394:	ef 28 ff c7 	ld.sb	r8,r7[-57]
80004398:	a3 68       	lsl	r8,0x2
8000439a:	ee 08 00 08 	add	r8,r7,r8
8000439e:	f0 f8 ff 7c 	ld.w	r8,r8[-132]
800043a2:	ee fb ff f4 	ld.w	r11,r7[-12]
800043a6:	10 9c       	mov	r12,r8
800043a8:	f0 16 00 08 	mcall	r6[32]
800043ac:	18 98       	mov	r8,r12
800043ae:	10 99       	mov	r9,r8
800043b0:	ea 08 15 02 	lsl	r8,r5,0x2
800043b4:	ee 08 00 08 	add	r8,r7,r8
800043b8:	f1 49 ff 64 	st.w	r8[-156],r9
				return false;
			}
			
			line_t line;
			float normCrossProduct = vector_norm(crossProduct);
			for (i=0;i<3;i++)
800043bc:	ef 38 ff c7 	ld.ub	r8,r7[-57]
800043c0:	2f f8       	sub	r8,-1
800043c2:	ef 68 ff c7 	st.b	r7[-57],r8
800043c6:	ef 39 ff c7 	ld.ub	r9,r7[-57]
800043ca:	30 28       	mov	r8,2
800043cc:	f0 09 18 00 	cp.b	r9,r8
800043d0:	fe 9a ff e0 	brle	80004390 <linearProgram2+0x6b4>
			{
				line.direction[i] = crossProduct[i] / normCrossProduct;
			}
			float lineNormal[3];
			CROSS(line.direction,planes[ind].normal,lineNormal);
800043d4:	ee fa ff 68 	ld.w	r10,r7[-152]
800043d8:	ef 29 ff 44 	ld.sb	r9,r7[-188]
800043dc:	12 98       	mov	r8,r9
800043de:	a1 78       	lsl	r8,0x1
800043e0:	12 08       	add	r8,r9
800043e2:	a3 78       	lsl	r8,0x3
800043e4:	ee f9 ff 48 	ld.w	r9,r7[-184]
800043e8:	f2 08 00 08 	add	r8,r9,r8
800043ec:	70 28       	ld.w	r8,r8[0x8]
800043ee:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
800043f2:	ee fb ff 6c 	ld.w	r11,r7[-148]
800043f6:	ef 29 ff 44 	ld.sb	r9,r7[-188]
800043fa:	12 98       	mov	r8,r9
800043fc:	a1 78       	lsl	r8,0x1
800043fe:	12 08       	add	r8,r9
80004400:	a3 78       	lsl	r8,0x3
80004402:	ee f9 ff 48 	ld.w	r9,r7[-184]
80004406:	f2 08 00 08 	add	r8,r9,r8
8000440a:	70 18       	ld.w	r8,r8[0x4]
8000440c:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
80004410:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80004414:	ef 48 ff 58 	st.w	r7[-168],r8
80004418:	ee fa ff 6c 	ld.w	r10,r7[-148]
8000441c:	ef 29 ff 44 	ld.sb	r9,r7[-188]
80004420:	12 98       	mov	r8,r9
80004422:	a1 78       	lsl	r8,0x1
80004424:	12 08       	add	r8,r9
80004426:	a3 78       	lsl	r8,0x3
80004428:	ee f9 ff 48 	ld.w	r9,r7[-184]
8000442c:	f2 08 00 08 	add	r8,r9,r8
80004430:	70 08       	ld.w	r8,r8[0x0]
80004432:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
80004436:	ee fb ff 64 	ld.w	r11,r7[-156]
8000443a:	ef 29 ff 44 	ld.sb	r9,r7[-188]
8000443e:	12 98       	mov	r8,r9
80004440:	a1 78       	lsl	r8,0x1
80004442:	12 08       	add	r8,r9
80004444:	a3 78       	lsl	r8,0x3
80004446:	ee f9 ff 48 	ld.w	r9,r7[-184]
8000444a:	f2 08 00 08 	add	r8,r9,r8
8000444e:	70 28       	ld.w	r8,r8[0x8]
80004450:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
80004454:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80004458:	ef 48 ff 5c 	st.w	r7[-164],r8
8000445c:	ee fa ff 64 	ld.w	r10,r7[-156]
80004460:	ef 29 ff 44 	ld.sb	r9,r7[-188]
80004464:	12 98       	mov	r8,r9
80004466:	a1 78       	lsl	r8,0x1
80004468:	12 08       	add	r8,r9
8000446a:	a3 78       	lsl	r8,0x3
8000446c:	ee f9 ff 48 	ld.w	r9,r7[-184]
80004470:	f2 08 00 08 	add	r8,r9,r8
80004474:	70 18       	ld.w	r8,r8[0x4]
80004476:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
8000447a:	ee fb ff 68 	ld.w	r11,r7[-152]
8000447e:	ef 29 ff 44 	ld.sb	r9,r7[-188]
80004482:	12 98       	mov	r8,r9
80004484:	a1 78       	lsl	r8,0x1
80004486:	12 08       	add	r8,r9
80004488:	a3 78       	lsl	r8,0x3
8000448a:	ee f9 ff 48 	ld.w	r9,r7[-184]
8000448e:	f2 08 00 08 	add	r8,r9,r8
80004492:	70 08       	ld.w	r8,r8[0x0]
80004494:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
80004498:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
8000449c:	ef 48 ff 60 	st.w	r7[-160],r8
			
			float diffPoints[3];
			for (i=0;i<3;i++)
800044a0:	30 08       	mov	r8,0
800044a2:	ef 68 ff c7 	st.b	r7[-57],r8
800044a6:	c2 e8       	rjmp	80004502 <linearProgram2+0x826>
			{
				diffPoints[i] = planes[index].point[i] - planes[ind].point[i];
800044a8:	ef 2a ff c7 	ld.sb	r10,r7[-57]
800044ac:	ef 29 ff db 	ld.sb	r9,r7[-37]
800044b0:	12 98       	mov	r8,r9
800044b2:	a1 78       	lsl	r8,0x1
800044b4:	12 08       	add	r8,r9
800044b6:	a3 78       	lsl	r8,0x3
800044b8:	ee f9 ff 48 	ld.w	r9,r7[-184]
800044bc:	f2 08 00 08 	add	r8,r9,r8
800044c0:	ef 29 ff c7 	ld.sb	r9,r7[-57]
800044c4:	2f d9       	sub	r9,-3
800044c6:	f0 09 03 2b 	ld.w	r11,r8[r9<<0x2]
800044ca:	ef 29 ff 44 	ld.sb	r9,r7[-188]
800044ce:	12 98       	mov	r8,r9
800044d0:	a1 78       	lsl	r8,0x1
800044d2:	12 08       	add	r8,r9
800044d4:	a3 78       	lsl	r8,0x3
800044d6:	ee f9 ff 48 	ld.w	r9,r7[-184]
800044da:	f2 08 00 08 	add	r8,r9,r8
800044de:	ef 29 ff c7 	ld.sb	r9,r7[-57]
800044e2:	2f d9       	sub	r9,-3
800044e4:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800044e8:	e5 a1 09 b8 	cop	cp0,cr9,cr11,cr8,0x42
800044ec:	f4 08 15 02 	lsl	r8,r10,0x2
800044f0:	ee 08 00 08 	add	r8,r7,r8
800044f4:	f1 49 ff 4c 	st.w	r8[-180],r9
			}
			float lineNormal[3];
			CROSS(line.direction,planes[ind].normal,lineNormal);
			
			float diffPoints[3];
			for (i=0;i<3;i++)
800044f8:	ef 38 ff c7 	ld.ub	r8,r7[-57]
800044fc:	2f f8       	sub	r8,-1
800044fe:	ef 68 ff c7 	st.b	r7[-57],r8
80004502:	ef 39 ff c7 	ld.ub	r9,r7[-57]
80004506:	30 28       	mov	r8,2
80004508:	f0 09 18 00 	cp.b	r9,r8
8000450c:	fe 9a ff ce 	brle	800044a8 <linearProgram2+0x7cc>
			{
				diffPoints[i] = planes[index].point[i] - planes[ind].point[i];
			}
			float scalarProductPointsNormal = scalar_product(diffPoints,planes[index].normal);
80004510:	ef 29 ff db 	ld.sb	r9,r7[-37]
80004514:	12 98       	mov	r8,r9
80004516:	a1 78       	lsl	r8,0x1
80004518:	12 08       	add	r8,r9
8000451a:	a3 78       	lsl	r8,0x3
8000451c:	ee f9 ff 48 	ld.w	r9,r7[-184]
80004520:	f2 08 00 08 	add	r8,r9,r8
80004524:	10 99       	mov	r9,r8
80004526:	ee c8 00 b4 	sub	r8,r7,180
8000452a:	12 9b       	mov	r11,r9
8000452c:	10 9c       	mov	r12,r8
8000452e:	fe b0 f1 af 	rcall	8000288c <scalar_product>
80004532:	18 98       	mov	r8,r12
80004534:	ef 48 ff f8 	st.w	r7[-8],r8
			float scalarProductNormals = scalar_product(lineNormal,planes[index].normal);
80004538:	ef 29 ff db 	ld.sb	r9,r7[-37]
8000453c:	12 98       	mov	r8,r9
8000453e:	a1 78       	lsl	r8,0x1
80004540:	12 08       	add	r8,r9
80004542:	a3 78       	lsl	r8,0x3
80004544:	ee f9 ff 48 	ld.w	r9,r7[-184]
80004548:	f2 08 00 08 	add	r8,r9,r8
8000454c:	10 99       	mov	r9,r8
8000454e:	ee c8 00 a8 	sub	r8,r7,168
80004552:	12 9b       	mov	r11,r9
80004554:	10 9c       	mov	r12,r8
80004556:	fe b0 f1 9b 	rcall	8000288c <scalar_product>
8000455a:	18 98       	mov	r8,r12
8000455c:	ef 48 ff fc 	st.w	r7[-4],r8
			for(i=0;i<3;i++)
80004560:	30 08       	mov	r8,0
80004562:	ef 68 ff c7 	st.b	r7[-57],r8
80004566:	c3 18       	rjmp	800045c8 <linearProgram2+0x8ec>
			{
				line.point[i] = planes[ind].point[i] + (scalarProductPointsNormal / scalarProductNormals) * lineNormal[i];
80004568:	ef 25 ff c7 	ld.sb	r5,r7[-57]
8000456c:	ef 29 ff 44 	ld.sb	r9,r7[-188]
80004570:	12 98       	mov	r8,r9
80004572:	a1 78       	lsl	r8,0x1
80004574:	12 08       	add	r8,r9
80004576:	a3 78       	lsl	r8,0x3
80004578:	ee f9 ff 48 	ld.w	r9,r7[-184]
8000457c:	f2 08 00 08 	add	r8,r9,r8
80004580:	ef 29 ff c7 	ld.sb	r9,r7[-57]
80004584:	2f d9       	sub	r9,-3
80004586:	f0 09 03 23 	ld.w	r3,r8[r9<<0x2]
8000458a:	ee fb ff fc 	ld.w	r11,r7[-4]
8000458e:	ee fc ff f8 	ld.w	r12,r7[-8]
80004592:	f0 16 00 08 	mcall	r6[32]
80004596:	18 98       	mov	r8,r12
80004598:	10 99       	mov	r9,r8
8000459a:	ef 28 ff c7 	ld.sb	r8,r7[-57]
8000459e:	a3 68       	lsl	r8,0x2
800045a0:	ee 08 00 08 	add	r8,r7,r8
800045a4:	f0 f8 ff 58 	ld.w	r8,r8[-168]
800045a8:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
800045ac:	e5 a0 09 38 	cop	cp0,cr9,cr3,cr8,0x40
800045b0:	ea c8 ff fd 	sub	r8,r5,-3
800045b4:	a3 68       	lsl	r8,0x2
800045b6:	ee 08 00 08 	add	r8,r7,r8
800045ba:	f1 49 ff 64 	st.w	r8[-156],r9
			{
				diffPoints[i] = planes[index].point[i] - planes[ind].point[i];
			}
			float scalarProductPointsNormal = scalar_product(diffPoints,planes[index].normal);
			float scalarProductNormals = scalar_product(lineNormal,planes[index].normal);
			for(i=0;i<3;i++)
800045be:	ef 38 ff c7 	ld.ub	r8,r7[-57]
800045c2:	2f f8       	sub	r8,-1
800045c4:	ef 68 ff c7 	st.b	r7[-57],r8
800045c8:	ef 39 ff c7 	ld.ub	r9,r7[-57]
800045cc:	30 28       	mov	r8,2
800045ce:	f0 09 18 00 	cp.b	r9,r8
800045d2:	fe 9a ff cb 	brle	80004568 <linearProgram2+0x88c>
			{
				line.point[i] = planes[ind].point[i] + (scalarProductPointsNormal / scalarProductNormals) * lineNormal[i];
			}
			
			if (!(linearProgram1(planes,index,line,maxSpeed,OptimalVelocity,NewVelocity,directionOpt)))
800045d6:	ef 38 ff 34 	ld.ub	r8,r7[-204]
800045da:	ef 2c ff db 	ld.sb	r12,r7[-37]
800045de:	1a d8       	st.w	--sp,r8
800045e0:	20 6d       	sub	sp,24
800045e2:	1a 98       	mov	r8,sp
800045e4:	10 9a       	mov	r10,r8
800045e6:	ee cb 00 9c 	sub	r11,r7,156
800045ea:	f4 c8 00 00 	sub	r8,r10,0
800045ee:	f6 c9 00 00 	sub	r9,r11,0
800045f2:	72 0e       	ld.w	lr,r9[0x0]
800045f4:	91 0e       	st.w	r8[0x0],lr
800045f6:	72 1e       	ld.w	lr,r9[0x4]
800045f8:	91 1e       	st.w	r8[0x4],lr
800045fa:	72 2e       	ld.w	lr,r9[0x8]
800045fc:	91 2e       	st.w	r8[0x8],lr
800045fe:	72 39       	ld.w	r9,r9[0xc]
80004600:	91 39       	st.w	r8[0xc],r9
80004602:	f6 e8 00 10 	ld.d	r8,r11[16]
80004606:	f4 e9 00 10 	st.d	r10[16],r8
8000460a:	ee f8 ff 38 	ld.w	r8,r7[-200]
8000460e:	ee f9 ff 3c 	ld.w	r9,r7[-196]
80004612:	ee fa ff 40 	ld.w	r10,r7[-192]
80004616:	18 9b       	mov	r11,r12
80004618:	ee fc ff 48 	ld.w	r12,r7[-184]
8000461c:	f0 16 01 c9 	mcall	r6[1828]
80004620:	2f 9d       	sub	sp,-28
80004622:	18 98       	mov	r8,r12
80004624:	ec 18 00 01 	eorl	r8,0x1
80004628:	5c 58       	castu.b	r8
8000462a:	c0 30       	breq	80004630 <linearProgram2+0x954>
			{
				return false;
8000462c:	30 08       	mov	r8,0
8000462e:	c0 f8       	rjmp	8000464c <linearProgram2+0x970>
			}
		}
	}
	
	int8_t index;
	for (index=0;index<ind;index++)
80004630:	ef 38 ff db 	ld.ub	r8,r7[-37]
80004634:	2f f8       	sub	r8,-1
80004636:	ef 68 ff db 	st.b	r7[-37],r8
8000463a:	ef 39 ff db 	ld.ub	r9,r7[-37]
8000463e:	ef 38 ff 44 	ld.ub	r8,r7[-188]
80004642:	f0 09 18 00 	cp.b	r9,r8
80004646:	fe 95 fd 90 	brlt	80004166 <linearProgram2+0x48a>
			{
				return false;
			}
		}
	}
	return true;
8000464a:	30 18       	mov	r8,1
}
8000464c:	10 9c       	mov	r12,r8
8000464e:	2c dd       	sub	sp,-204
80004650:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
80004654:	80 00       	ld.sh	r0,r0[0x0]
80004656:	3b 6e       	mov	lr,-74

80004658 <linearProgram3>:

float linearProgram3(plane_t planes[], float OptimalVelocity[], float maxSpeed, float NewVelocity[], bool directionOpt)
{
80004658:	eb cd 40 e0 	pushm	r5-r7,lr
8000465c:	1a 97       	mov	r7,sp
8000465e:	20 ed       	sub	sp,56
80004660:	fe f6 02 e0 	ld.w	r6,pc[736]
80004664:	1e 26       	rsub	r6,pc
80004666:	ef 4c ff d8 	st.w	r7[-40],r12
8000466a:	ef 4b ff d4 	st.w	r7[-44],r11
8000466e:	ef 4a ff d0 	st.w	r7[-48],r10
80004672:	ef 49 ff cc 	st.w	r7[-52],r9
80004676:	ef 68 ff c8 	st.b	r7[-56],r8
	int8_t i;
	
	if (directionOpt)
8000467a:	ef 39 ff c8 	ld.ub	r9,r7[-56]
8000467e:	30 08       	mov	r8,0
80004680:	f0 09 18 00 	cp.b	r9,r8
80004684:	c3 40       	breq	800046ec <linearProgram3+0x94>
	{
		/* Optimize direction. Note that the optimization velocity is of unit length in this case. */
		float normOptimalVelocity = vector_norm(OptimalVelocity);
80004686:	ee fc ff d4 	ld.w	r12,r7[-44]
8000468a:	fe b0 f2 e9 	rcall	80002c5c <vector_norm>
8000468e:	18 98       	mov	r8,r12
80004690:	ef 48 ff f8 	st.w	r7[-8],r8
		for(i=0;i<3;i++)
80004694:	30 08       	mov	r8,0
80004696:	ef 68 ff f6 	st.b	r7[-10],r8
8000469a:	c2 18       	rjmp	800046dc <linearProgram3+0x84>
		{
			NewVelocity[i] = OptimalVelocity[i]/normOptimalVelocity * maxSpeed;
8000469c:	ef 28 ff f6 	ld.sb	r8,r7[-10]
800046a0:	a3 68       	lsl	r8,0x2
800046a2:	ee f9 ff cc 	ld.w	r9,r7[-52]
800046a6:	f2 08 00 05 	add	r5,r9,r8
800046aa:	ef 28 ff f6 	ld.sb	r8,r7[-10]
800046ae:	a3 68       	lsl	r8,0x2
800046b0:	ee f9 ff d4 	ld.w	r9,r7[-44]
800046b4:	f2 08 00 08 	add	r8,r9,r8
800046b8:	70 08       	ld.w	r8,r8[0x0]
800046ba:	ee fb ff f8 	ld.w	r11,r7[-8]
800046be:	10 9c       	mov	r12,r8
800046c0:	f0 16 00 08 	mcall	r6[32]
800046c4:	18 98       	mov	r8,r12
800046c6:	10 99       	mov	r9,r8
800046c8:	ee f8 ff d0 	ld.w	r8,r7[-48]
800046cc:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
800046d0:	8b 08       	st.w	r5[0x0],r8
	
	if (directionOpt)
	{
		/* Optimize direction. Note that the optimization velocity is of unit length in this case. */
		float normOptimalVelocity = vector_norm(OptimalVelocity);
		for(i=0;i<3;i++)
800046d2:	ef 38 ff f6 	ld.ub	r8,r7[-10]
800046d6:	2f f8       	sub	r8,-1
800046d8:	ef 68 ff f6 	st.b	r7[-10],r8
800046dc:	ef 39 ff f6 	ld.ub	r9,r7[-10]
800046e0:	30 28       	mov	r8,2
800046e2:	f0 09 18 00 	cp.b	r9,r8
800046e6:	fe 9a ff db 	brle	8000469c <linearProgram3+0x44>
800046ea:	c6 98       	rjmp	800047bc <linearProgram3+0x164>
		{
			NewVelocity[i] = OptimalVelocity[i]/normOptimalVelocity * maxSpeed;
		}
	}else if (vector_norm_sqr(OptimalVelocity) > SQR(maxSpeed)){
800046ec:	ee fc ff d4 	ld.w	r12,r7[-44]
800046f0:	fe b0 f2 9e 	rcall	80002c2c <vector_norm_sqr>
800046f4:	18 9a       	mov	r10,r12
800046f6:	ee f9 ff d0 	ld.w	r9,r7[-48]
800046fa:	ee f8 ff d0 	ld.w	r8,r7[-48]
800046fe:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80004702:	30 18       	mov	r8,1
80004704:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80004708:	e0 8c 00 04 	brvs	80004710 <linearProgram3+0xb8>
8000470c:	e0 89 00 03 	brgt	80004712 <linearProgram3+0xba>
80004710:	30 08       	mov	r8,0
80004712:	5c 58       	castu.b	r8
80004714:	c3 40       	breq	8000477c <linearProgram3+0x124>
		/* Optimize closest point and outside circle. */
		float normOptimalVelocity = vector_norm(OptimalVelocity);
80004716:	ee fc ff d4 	ld.w	r12,r7[-44]
8000471a:	fe b0 f2 a1 	rcall	80002c5c <vector_norm>
8000471e:	18 98       	mov	r8,r12
80004720:	ef 48 ff fc 	st.w	r7[-4],r8
		for(i=0;i<3;i++)
80004724:	30 08       	mov	r8,0
80004726:	ef 68 ff f6 	st.b	r7[-10],r8
8000472a:	c2 18       	rjmp	8000476c <linearProgram3+0x114>
		{
			NewVelocity[i] = OptimalVelocity[i]/normOptimalVelocity * maxSpeed;
8000472c:	ef 28 ff f6 	ld.sb	r8,r7[-10]
80004730:	a3 68       	lsl	r8,0x2
80004732:	ee f9 ff cc 	ld.w	r9,r7[-52]
80004736:	f2 08 00 05 	add	r5,r9,r8
8000473a:	ef 28 ff f6 	ld.sb	r8,r7[-10]
8000473e:	a3 68       	lsl	r8,0x2
80004740:	ee f9 ff d4 	ld.w	r9,r7[-44]
80004744:	f2 08 00 08 	add	r8,r9,r8
80004748:	70 08       	ld.w	r8,r8[0x0]
8000474a:	ee fb ff fc 	ld.w	r11,r7[-4]
8000474e:	10 9c       	mov	r12,r8
80004750:	f0 16 00 08 	mcall	r6[32]
80004754:	18 98       	mov	r8,r12
80004756:	10 99       	mov	r9,r8
80004758:	ee f8 ff d0 	ld.w	r8,r7[-48]
8000475c:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80004760:	8b 08       	st.w	r5[0x0],r8
			NewVelocity[i] = OptimalVelocity[i]/normOptimalVelocity * maxSpeed;
		}
	}else if (vector_norm_sqr(OptimalVelocity) > SQR(maxSpeed)){
		/* Optimize closest point and outside circle. */
		float normOptimalVelocity = vector_norm(OptimalVelocity);
		for(i=0;i<3;i++)
80004762:	ef 38 ff f6 	ld.ub	r8,r7[-10]
80004766:	2f f8       	sub	r8,-1
80004768:	ef 68 ff f6 	st.b	r7[-10],r8
8000476c:	ef 39 ff f6 	ld.ub	r9,r7[-10]
80004770:	30 28       	mov	r8,2
80004772:	f0 09 18 00 	cp.b	r9,r8
80004776:	fe 9a ff db 	brle	8000472c <linearProgram3+0xd4>
8000477a:	c2 18       	rjmp	800047bc <linearProgram3+0x164>
		{
			NewVelocity[i] = OptimalVelocity[i]/normOptimalVelocity * maxSpeed;
		}
	}else{
		for(i=0;i<3;i++)
8000477c:	30 08       	mov	r8,0
8000477e:	ef 68 ff f6 	st.b	r7[-10],r8
80004782:	c1 68       	rjmp	800047ae <linearProgram3+0x156>
		{
			NewVelocity[i] = OptimalVelocity[i];
80004784:	ef 28 ff f6 	ld.sb	r8,r7[-10]
80004788:	a3 68       	lsl	r8,0x2
8000478a:	ee f9 ff cc 	ld.w	r9,r7[-52]
8000478e:	f2 08 00 08 	add	r8,r9,r8
80004792:	ef 29 ff f6 	ld.sb	r9,r7[-10]
80004796:	a3 69       	lsl	r9,0x2
80004798:	ee fa ff d4 	ld.w	r10,r7[-44]
8000479c:	f4 09 00 09 	add	r9,r10,r9
800047a0:	72 09       	ld.w	r9,r9[0x0]
800047a2:	91 09       	st.w	r8[0x0],r9
		for(i=0;i<3;i++)
		{
			NewVelocity[i] = OptimalVelocity[i]/normOptimalVelocity * maxSpeed;
		}
	}else{
		for(i=0;i<3;i++)
800047a4:	ef 38 ff f6 	ld.ub	r8,r7[-10]
800047a8:	2f f8       	sub	r8,-1
800047aa:	ef 68 ff f6 	st.b	r7[-10],r8
800047ae:	ef 39 ff f6 	ld.ub	r9,r7[-10]
800047b2:	30 28       	mov	r8,2
800047b4:	f0 09 18 00 	cp.b	r9,r8
800047b8:	fe 9a ff e6 	brle	80004784 <linearProgram3+0x12c>
		}
	}
	
	int8_t ind;
	
	for (ind=0;ind<centralData->number_of_neighbors;ind++)
800047bc:	30 08       	mov	r8,0
800047be:	ef 68 ff f7 	st.b	r7[-9],r8
800047c2:	ca a8       	rjmp	80004916 <linearProgram3+0x2be>
	{
		float diffPointVel[3];
		for (i=0;i<3;i++)
800047c4:	30 08       	mov	r8,0
800047c6:	ef 68 ff f6 	st.b	r7[-10],r8
800047ca:	c2 78       	rjmp	80004818 <linearProgram3+0x1c0>
		{
			diffPointVel[i] = planes[ind].point[i] - NewVelocity[i];
800047cc:	ef 2a ff f6 	ld.sb	r10,r7[-10]
800047d0:	ef 29 ff f7 	ld.sb	r9,r7[-9]
800047d4:	12 98       	mov	r8,r9
800047d6:	a1 78       	lsl	r8,0x1
800047d8:	12 08       	add	r8,r9
800047da:	a3 78       	lsl	r8,0x3
800047dc:	ee f9 ff d8 	ld.w	r9,r7[-40]
800047e0:	f2 08 00 08 	add	r8,r9,r8
800047e4:	ef 29 ff f6 	ld.sb	r9,r7[-10]
800047e8:	2f d9       	sub	r9,-3
800047ea:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
800047ee:	ef 28 ff f6 	ld.sb	r8,r7[-10]
800047f2:	a3 68       	lsl	r8,0x2
800047f4:	ee fb ff cc 	ld.w	r11,r7[-52]
800047f8:	f6 08 00 08 	add	r8,r11,r8
800047fc:	70 08       	ld.w	r8,r8[0x0]
800047fe:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80004802:	f4 08 15 02 	lsl	r8,r10,0x2
80004806:	ee 08 00 08 	add	r8,r7,r8
8000480a:	f1 49 ff e8 	st.w	r8[-24],r9
	int8_t ind;
	
	for (ind=0;ind<centralData->number_of_neighbors;ind++)
	{
		float diffPointVel[3];
		for (i=0;i<3;i++)
8000480e:	ef 38 ff f6 	ld.ub	r8,r7[-10]
80004812:	2f f8       	sub	r8,-1
80004814:	ef 68 ff f6 	st.b	r7[-10],r8
80004818:	ef 39 ff f6 	ld.ub	r9,r7[-10]
8000481c:	30 28       	mov	r8,2
8000481e:	f0 09 18 00 	cp.b	r9,r8
80004822:	fe 9a ff d5 	brle	800047cc <linearProgram3+0x174>
		{
			diffPointVel[i] = planes[ind].point[i] - NewVelocity[i];
		}
		if (scalar_product(planes[ind].normal, diffPointVel ) > 0.0)
80004826:	ef 29 ff f7 	ld.sb	r9,r7[-9]
8000482a:	12 98       	mov	r8,r9
8000482c:	a1 78       	lsl	r8,0x1
8000482e:	12 08       	add	r8,r9
80004830:	a3 78       	lsl	r8,0x3
80004832:	ee f9 ff d8 	ld.w	r9,r7[-40]
80004836:	f2 08 00 08 	add	r8,r9,r8
8000483a:	ee c9 00 18 	sub	r9,r7,24
8000483e:	12 9b       	mov	r11,r9
80004840:	10 9c       	mov	r12,r8
80004842:	fe b0 f0 25 	rcall	8000288c <scalar_product>
80004846:	18 9a       	mov	r10,r12
80004848:	30 18       	mov	r8,1
8000484a:	30 09       	mov	r9,0
8000484c:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80004850:	e0 8c 00 04 	brvs	80004858 <linearProgram3+0x200>
80004854:	e0 89 00 03 	brgt	8000485a <linearProgram3+0x202>
80004858:	30 08       	mov	r8,0
8000485a:	5c 58       	castu.b	r8
8000485c:	c5 80       	breq	8000490c <linearProgram3+0x2b4>
		{
			/* Result does not satisfy constraint ind. Compute new optimal result. */
			float tempResult[3];
			for (i=0;i<3;i++)
8000485e:	30 08       	mov	r8,0
80004860:	ef 68 ff f6 	st.b	r7[-10],r8
80004864:	c1 58       	rjmp	8000488e <linearProgram3+0x236>
			{
				tempResult[i] = NewVelocity[i];
80004866:	ef 28 ff f6 	ld.sb	r8,r7[-10]
8000486a:	ef 29 ff f6 	ld.sb	r9,r7[-10]
8000486e:	a3 69       	lsl	r9,0x2
80004870:	ee fa ff cc 	ld.w	r10,r7[-52]
80004874:	f4 09 00 09 	add	r9,r10,r9
80004878:	72 09       	ld.w	r9,r9[0x0]
8000487a:	a3 68       	lsl	r8,0x2
8000487c:	ee 08 00 08 	add	r8,r7,r8
80004880:	f1 49 ff dc 	st.w	r8[-36],r9
		}
		if (scalar_product(planes[ind].normal, diffPointVel ) > 0.0)
		{
			/* Result does not satisfy constraint ind. Compute new optimal result. */
			float tempResult[3];
			for (i=0;i<3;i++)
80004884:	ef 38 ff f6 	ld.ub	r8,r7[-10]
80004888:	2f f8       	sub	r8,-1
8000488a:	ef 68 ff f6 	st.b	r7[-10],r8
8000488e:	ef 39 ff f6 	ld.ub	r9,r7[-10]
80004892:	30 28       	mov	r8,2
80004894:	f0 09 18 00 	cp.b	r9,r8
80004898:	fe 9a ff e7 	brle	80004866 <linearProgram3+0x20e>
			{
				tempResult[i] = NewVelocity[i];
			}
			if (!(linearProgram2(planes,ind,maxSpeed,OptimalVelocity,NewVelocity,directionOpt)))
8000489c:	ef 38 ff c8 	ld.ub	r8,r7[-56]
800048a0:	ef 2b ff f7 	ld.sb	r11,r7[-9]
800048a4:	1a d8       	st.w	--sp,r8
800048a6:	ee f8 ff cc 	ld.w	r8,r7[-52]
800048aa:	ee f9 ff d4 	ld.w	r9,r7[-44]
800048ae:	ee fa ff d0 	ld.w	r10,r7[-48]
800048b2:	ee fc ff d8 	ld.w	r12,r7[-40]
800048b6:	f0 16 01 7a 	mcall	r6[1512]
800048ba:	2f fd       	sub	sp,-4
800048bc:	18 98       	mov	r8,r12
800048be:	ec 18 00 01 	eorl	r8,0x1
800048c2:	5c 58       	castu.b	r8
800048c4:	c2 40       	breq	8000490c <linearProgram3+0x2b4>
			{
				for (i=0;i<3;i++)
800048c6:	30 08       	mov	r8,0
800048c8:	ef 68 ff f6 	st.b	r7[-10],r8
800048cc:	c1 48       	rjmp	800048f4 <linearProgram3+0x29c>
				{
					NewVelocity[i] = tempResult[i];
800048ce:	ef 28 ff f6 	ld.sb	r8,r7[-10]
800048d2:	a3 68       	lsl	r8,0x2
800048d4:	ee f9 ff cc 	ld.w	r9,r7[-52]
800048d8:	10 09       	add	r9,r8
800048da:	ef 28 ff f6 	ld.sb	r8,r7[-10]
800048de:	a3 68       	lsl	r8,0x2
800048e0:	ee 08 00 08 	add	r8,r7,r8
800048e4:	f0 f8 ff dc 	ld.w	r8,r8[-36]
800048e8:	93 08       	st.w	r9[0x0],r8
			{
				tempResult[i] = NewVelocity[i];
			}
			if (!(linearProgram2(planes,ind,maxSpeed,OptimalVelocity,NewVelocity,directionOpt)))
			{
				for (i=0;i<3;i++)
800048ea:	ef 38 ff f6 	ld.ub	r8,r7[-10]
800048ee:	2f f8       	sub	r8,-1
800048f0:	ef 68 ff f6 	st.b	r7[-10],r8
800048f4:	ef 39 ff f6 	ld.ub	r9,r7[-10]
800048f8:	30 28       	mov	r8,2
800048fa:	f0 09 18 00 	cp.b	r9,r8
800048fe:	fe 9a ff e8 	brle	800048ce <linearProgram3+0x276>
				{
					NewVelocity[i] = tempResult[i];
				}
				
				return ind;
80004902:	ef 28 ff f7 	ld.sb	r8,r7[-9]
80004906:	e5 a6 08 08 	cop	cp0,cr8,cr0,cr8,0x4c
8000490a:	c1 78       	rjmp	80004938 <linearProgram3+0x2e0>
		}
	}
	
	int8_t ind;
	
	for (ind=0;ind<centralData->number_of_neighbors;ind++)
8000490c:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80004910:	2f f8       	sub	r8,-1
80004912:	ef 68 ff f7 	st.b	r7[-9],r8
80004916:	ef 29 ff f7 	ld.sb	r9,r7[-9]
8000491a:	ec f8 00 00 	ld.w	r8,r6[0]
8000491e:	70 08       	ld.w	r8,r8[0x0]
80004920:	f1 38 10 fc 	ld.ub	r8,r8[4348]
80004924:	10 39       	cp.w	r9,r8
80004926:	fe 95 ff 4f 	brlt	800047c4 <linearProgram3+0x16c>
				
				return ind;
			}
		}
	}
	return centralData->number_of_neighbors;
8000492a:	ec f8 00 00 	ld.w	r8,r6[0]
8000492e:	70 08       	ld.w	r8,r8[0x0]
80004930:	f1 38 10 fc 	ld.ub	r8,r8[4348]
80004934:	e5 a4 08 08 	cop	cp0,cr8,cr0,cr8,0x48
}
80004938:	10 9c       	mov	r12,r8
8000493a:	2f 2d       	sub	sp,-56
8000493c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80004940:	80 00       	ld.sh	r0,r0[0x0]
80004942:	44 e8       	lddsp	r8,sp[0x138]

80004944 <linearProgram4>:

void linearProgram4(plane_t planes[], int8_t ind, float maxSpeed, float NewVelocity[])
{
80004944:	eb cd 40 e8 	pushm	r3,r5-r7,lr
80004948:	1a 97       	mov	r7,sp
8000494a:	fa cd 01 ec 	sub	sp,sp,492
8000494e:	fe f6 07 7a 	ld.w	r6,pc[1914]
80004952:	1e 26       	rsub	r6,pc
80004954:	ef 4c fe 20 	st.w	r7[-480],r12
80004958:	16 98       	mov	r8,r11
8000495a:	ef 4a fe 18 	st.w	r7[-488],r10
8000495e:	ef 49 fe 14 	st.w	r7[-492],r9
80004962:	ef 68 fe 1c 	st.b	r7[-484],r8
	
	int8_t index,index2;
	
	plane_t projPlanes[MAX_NUM_NEIGHBORS];
	
	float distance = 0.0;
80004966:	30 08       	mov	r8,0
80004968:	ef 48 ff f0 	st.w	r7[-16],r8
	
	for (index = ind;index<centralData->number_of_neighbors;index++)
8000496c:	ef 38 fe 1c 	ld.ub	r8,r7[-484]
80004970:	ef 68 ff ee 	st.b	r7[-18],r8
80004974:	e0 8f 03 9c 	bral	800050ac <linearProgram4+0x768>
	{
		float diffPointVel[3];
		for (i=0;i<3;i++)
80004978:	30 08       	mov	r8,0
8000497a:	ef 68 ff ed 	st.b	r7[-19],r8
8000497e:	c2 78       	rjmp	800049cc <linearProgram4+0x88>
		{
			diffPointVel[i] = planes[index].point[i] - NewVelocity[i];
80004980:	ef 2a ff ed 	ld.sb	r10,r7[-19]
80004984:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004988:	12 98       	mov	r8,r9
8000498a:	a1 78       	lsl	r8,0x1
8000498c:	12 08       	add	r8,r9
8000498e:	a3 78       	lsl	r8,0x3
80004990:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004994:	f2 08 00 08 	add	r8,r9,r8
80004998:	ef 29 ff ed 	ld.sb	r9,r7[-19]
8000499c:	2f d9       	sub	r9,-3
8000499e:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
800049a2:	ef 28 ff ed 	ld.sb	r8,r7[-19]
800049a6:	a3 68       	lsl	r8,0x2
800049a8:	ee fb fe 14 	ld.w	r11,r7[-492]
800049ac:	f6 08 00 08 	add	r8,r11,r8
800049b0:	70 08       	ld.w	r8,r8[0x0]
800049b2:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
800049b6:	f4 08 15 02 	lsl	r8,r10,0x2
800049ba:	ee 08 00 08 	add	r8,r7,r8
800049be:	f1 49 fe 78 	st.w	r8[-392],r9
	float distance = 0.0;
	
	for (index = ind;index<centralData->number_of_neighbors;index++)
	{
		float diffPointVel[3];
		for (i=0;i<3;i++)
800049c2:	ef 38 ff ed 	ld.ub	r8,r7[-19]
800049c6:	2f f8       	sub	r8,-1
800049c8:	ef 68 ff ed 	st.b	r7[-19],r8
800049cc:	ef 39 ff ed 	ld.ub	r9,r7[-19]
800049d0:	30 28       	mov	r8,2
800049d2:	f0 09 18 00 	cp.b	r9,r8
800049d6:	fe 9a ff d5 	brle	80004980 <linearProgram4+0x3c>
		{
			diffPointVel[i] = planes[index].point[i] - NewVelocity[i];
		}
		if (scalar_product(planes[index].normal,diffPointVel)>distance)
800049da:	ef 29 ff ee 	ld.sb	r9,r7[-18]
800049de:	12 98       	mov	r8,r9
800049e0:	a1 78       	lsl	r8,0x1
800049e2:	12 08       	add	r8,r9
800049e4:	a3 78       	lsl	r8,0x3
800049e6:	ee f9 fe 20 	ld.w	r9,r7[-480]
800049ea:	f2 08 00 08 	add	r8,r9,r8
800049ee:	ee c9 01 88 	sub	r9,r7,392
800049f2:	12 9b       	mov	r11,r9
800049f4:	10 9c       	mov	r12,r8
800049f6:	fe b0 ef 4b 	rcall	8000288c <scalar_product>
800049fa:	18 9a       	mov	r10,r12
800049fc:	30 18       	mov	r8,1
800049fe:	ee f9 ff f0 	ld.w	r9,r7[-16]
80004a02:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80004a06:	e0 8c 00 04 	brvs	80004a0e <linearProgram4+0xca>
80004a0a:	e0 89 00 03 	brgt	80004a10 <linearProgram4+0xcc>
80004a0e:	30 08       	mov	r8,0
80004a10:	5c 58       	castu.b	r8
80004a12:	e0 80 03 48 	breq	800050a2 <linearProgram4+0x75e>
		{
			/* Result does not satisfy constraint of plane i. */
			
			for (index2 = 0;index2<index;index2++)
80004a16:	30 08       	mov	r8,0
80004a18:	ef 68 ff ef 	st.b	r7[-17],r8
80004a1c:	e0 8f 02 98 	bral	80004f4c <linearProgram4+0x608>
			{
				plane_t plane;
				float crossProduct[3];
				CROSS(planes[index2].normal, planes[index].normal, crossProduct);
80004a20:	ef 29 ff ef 	ld.sb	r9,r7[-17]
80004a24:	12 98       	mov	r8,r9
80004a26:	a1 78       	lsl	r8,0x1
80004a28:	12 08       	add	r8,r9
80004a2a:	a3 78       	lsl	r8,0x3
80004a2c:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004a30:	f2 08 00 08 	add	r8,r9,r8
80004a34:	70 1a       	ld.w	r10,r8[0x4]
80004a36:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004a3a:	12 98       	mov	r8,r9
80004a3c:	a1 78       	lsl	r8,0x1
80004a3e:	12 08       	add	r8,r9
80004a40:	a3 78       	lsl	r8,0x3
80004a42:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004a46:	f2 08 00 08 	add	r8,r9,r8
80004a4a:	70 28       	ld.w	r8,r8[0x8]
80004a4c:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
80004a50:	ef 29 ff ef 	ld.sb	r9,r7[-17]
80004a54:	12 98       	mov	r8,r9
80004a56:	a1 78       	lsl	r8,0x1
80004a58:	12 08       	add	r8,r9
80004a5a:	a3 78       	lsl	r8,0x3
80004a5c:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004a60:	f2 08 00 08 	add	r8,r9,r8
80004a64:	70 2b       	ld.w	r11,r8[0x8]
80004a66:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004a6a:	12 98       	mov	r8,r9
80004a6c:	a1 78       	lsl	r8,0x1
80004a6e:	12 08       	add	r8,r9
80004a70:	a3 78       	lsl	r8,0x3
80004a72:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004a76:	f2 08 00 08 	add	r8,r9,r8
80004a7a:	70 18       	ld.w	r8,r8[0x4]
80004a7c:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
80004a80:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80004a84:	ef 48 fe 3c 	st.w	r7[-452],r8
80004a88:	ef 29 ff ef 	ld.sb	r9,r7[-17]
80004a8c:	12 98       	mov	r8,r9
80004a8e:	a1 78       	lsl	r8,0x1
80004a90:	12 08       	add	r8,r9
80004a92:	a3 78       	lsl	r8,0x3
80004a94:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004a98:	f2 08 00 08 	add	r8,r9,r8
80004a9c:	70 2a       	ld.w	r10,r8[0x8]
80004a9e:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004aa2:	12 98       	mov	r8,r9
80004aa4:	a1 78       	lsl	r8,0x1
80004aa6:	12 08       	add	r8,r9
80004aa8:	a3 78       	lsl	r8,0x3
80004aaa:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004aae:	f2 08 00 08 	add	r8,r9,r8
80004ab2:	70 08       	ld.w	r8,r8[0x0]
80004ab4:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
80004ab8:	ef 29 ff ef 	ld.sb	r9,r7[-17]
80004abc:	12 98       	mov	r8,r9
80004abe:	a1 78       	lsl	r8,0x1
80004ac0:	12 08       	add	r8,r9
80004ac2:	a3 78       	lsl	r8,0x3
80004ac4:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004ac8:	f2 08 00 08 	add	r8,r9,r8
80004acc:	70 0b       	ld.w	r11,r8[0x0]
80004ace:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004ad2:	12 98       	mov	r8,r9
80004ad4:	a1 78       	lsl	r8,0x1
80004ad6:	12 08       	add	r8,r9
80004ad8:	a3 78       	lsl	r8,0x3
80004ada:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004ade:	f2 08 00 08 	add	r8,r9,r8
80004ae2:	70 28       	ld.w	r8,r8[0x8]
80004ae4:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
80004ae8:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80004aec:	ef 48 fe 40 	st.w	r7[-448],r8
80004af0:	ef 29 ff ef 	ld.sb	r9,r7[-17]
80004af4:	12 98       	mov	r8,r9
80004af6:	a1 78       	lsl	r8,0x1
80004af8:	12 08       	add	r8,r9
80004afa:	a3 78       	lsl	r8,0x3
80004afc:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004b00:	f2 08 00 08 	add	r8,r9,r8
80004b04:	70 0a       	ld.w	r10,r8[0x0]
80004b06:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004b0a:	12 98       	mov	r8,r9
80004b0c:	a1 78       	lsl	r8,0x1
80004b0e:	12 08       	add	r8,r9
80004b10:	a3 78       	lsl	r8,0x3
80004b12:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004b16:	f2 08 00 08 	add	r8,r9,r8
80004b1a:	70 18       	ld.w	r8,r8[0x4]
80004b1c:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
80004b20:	ef 29 ff ef 	ld.sb	r9,r7[-17]
80004b24:	12 98       	mov	r8,r9
80004b26:	a1 78       	lsl	r8,0x1
80004b28:	12 08       	add	r8,r9
80004b2a:	a3 78       	lsl	r8,0x3
80004b2c:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004b30:	f2 08 00 08 	add	r8,r9,r8
80004b34:	70 1b       	ld.w	r11,r8[0x4]
80004b36:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004b3a:	12 98       	mov	r8,r9
80004b3c:	a1 78       	lsl	r8,0x1
80004b3e:	12 08       	add	r8,r9
80004b40:	a3 78       	lsl	r8,0x3
80004b42:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004b46:	f2 08 00 08 	add	r8,r9,r8
80004b4a:	70 08       	ld.w	r8,r8[0x0]
80004b4c:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
80004b50:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80004b54:	ef 48 fe 44 	st.w	r7[-444],r8
				
				if (vector_norm_sqr(crossProduct)<=RVO_EPSILON)
80004b58:	ee c8 01 c4 	sub	r8,r7,452
80004b5c:	10 9c       	mov	r12,r8
80004b5e:	fe b0 f0 67 	rcall	80002c2c <vector_norm_sqr>
80004b62:	18 98       	mov	r8,r12
80004b64:	10 9c       	mov	r12,r8
80004b66:	f0 16 00 02 	mcall	r6[8]
80004b6a:	14 98       	mov	r8,r10
80004b6c:	16 99       	mov	r9,r11
80004b6e:	30 05       	mov	r5,0
80004b70:	e0 6a 43 2d 	mov	r10,17197
80004b74:	ea 1a eb 1c 	orh	r10,0xeb1c
80004b78:	e0 6b 36 e2 	mov	r11,14050
80004b7c:	ea 1b 3f 1a 	orh	r11,0x3f1a
80004b80:	f0 16 00 76 	mcall	r6[472]
80004b84:	18 98       	mov	r8,r12
80004b86:	58 08       	cp.w	r8,0
80004b88:	c0 20       	breq	80004b8c <linearProgram4+0x248>
80004b8a:	30 15       	mov	r5,1
80004b8c:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
80004b90:	c6 50       	breq	80004c5a <linearProgram4+0x316>
				{
					/* Plane index and plane index2 are (almost) parallel. */
					if (scalar_product(planes[index].normal, planes[index2].normal) > 0.0f) {
80004b92:	ef 29 ff ef 	ld.sb	r9,r7[-17]
80004b96:	12 98       	mov	r8,r9
80004b98:	a1 78       	lsl	r8,0x1
80004b9a:	12 08       	add	r8,r9
80004b9c:	a3 78       	lsl	r8,0x3
80004b9e:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004ba2:	f2 08 00 08 	add	r8,r9,r8
80004ba6:	10 9a       	mov	r10,r8
80004ba8:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004bac:	12 98       	mov	r8,r9
80004bae:	a1 78       	lsl	r8,0x1
80004bb0:	12 08       	add	r8,r9
80004bb2:	a3 78       	lsl	r8,0x3
80004bb4:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004bb8:	f2 08 00 08 	add	r8,r9,r8
80004bbc:	14 9b       	mov	r11,r10
80004bbe:	10 9c       	mov	r12,r8
80004bc0:	fe b0 ee 66 	rcall	8000288c <scalar_product>
80004bc4:	18 9a       	mov	r10,r12
80004bc6:	30 18       	mov	r8,1
80004bc8:	30 09       	mov	r9,0
80004bca:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80004bce:	e0 8c 00 04 	brvs	80004bd6 <linearProgram4+0x292>
80004bd2:	e0 89 00 03 	brgt	80004bd8 <linearProgram4+0x294>
80004bd6:	30 08       	mov	r8,0
80004bd8:	5c 58       	castu.b	r8
80004bda:	e0 81 01 b3 	brne	80004f40 <linearProgram4+0x5fc>
						/* Plane index and plane index2 point in the same direction. */
						continue;
					}else{
						/* Plane index and plane index2 point in opposite direction. */
						for (i=0;i<3;i++)
80004bde:	30 08       	mov	r8,0
80004be0:	ef 68 ff ed 	st.b	r7[-19],r8
80004be4:	c3 38       	rjmp	80004c4a <linearProgram4+0x306>
						{
							plane.point[i] = 0.5 * (planes[index].point[i] + planes[index2].point[i]);
80004be6:	ef 2a ff ed 	ld.sb	r10,r7[-19]
80004bea:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004bee:	12 98       	mov	r8,r9
80004bf0:	a1 78       	lsl	r8,0x1
80004bf2:	12 08       	add	r8,r9
80004bf4:	a3 78       	lsl	r8,0x3
80004bf6:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004bfa:	f2 08 00 08 	add	r8,r9,r8
80004bfe:	ef 29 ff ed 	ld.sb	r9,r7[-19]
80004c02:	2f d9       	sub	r9,-3
80004c04:	f0 09 03 2b 	ld.w	r11,r8[r9<<0x2]
80004c08:	ef 29 ff ef 	ld.sb	r9,r7[-17]
80004c0c:	12 98       	mov	r8,r9
80004c0e:	a1 78       	lsl	r8,0x1
80004c10:	12 08       	add	r8,r9
80004c12:	a3 78       	lsl	r8,0x3
80004c14:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004c18:	f2 08 00 08 	add	r8,r9,r8
80004c1c:	ef 29 ff ed 	ld.sb	r9,r7[-19]
80004c20:	2f d9       	sub	r9,-3
80004c22:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80004c26:	e5 a0 09 b8 	cop	cp0,cr9,cr11,cr8,0x40
80004c2a:	fc 18 3f 00 	movh	r8,0x3f00
80004c2e:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80004c32:	f4 c8 ff fd 	sub	r8,r10,-3
80004c36:	a3 68       	lsl	r8,0x2
80004c38:	ee 08 00 08 	add	r8,r7,r8
80004c3c:	f1 49 fe 48 	st.w	r8[-440],r9
					if (scalar_product(planes[index].normal, planes[index2].normal) > 0.0f) {
						/* Plane index and plane index2 point in the same direction. */
						continue;
					}else{
						/* Plane index and plane index2 point in opposite direction. */
						for (i=0;i<3;i++)
80004c40:	ef 38 ff ed 	ld.ub	r8,r7[-19]
80004c44:	2f f8       	sub	r8,-1
80004c46:	ef 68 ff ed 	st.b	r7[-19],r8
80004c4a:	ef 39 ff ed 	ld.ub	r9,r7[-19]
80004c4e:	30 28       	mov	r8,2
80004c50:	f0 09 18 00 	cp.b	r9,r8
80004c54:	fe 9a ff c9 	brle	80004be6 <linearProgram4+0x2a2>
80004c58:	c5 69       	rjmp	80004f04 <linearProgram4+0x5c0>
							plane.point[i] = 0.5 * (planes[index].point[i] + planes[index2].point[i]);
						}
					}
				}else{
					float lineNormal[3];
					CROSS(crossProduct,planes[index].normal,lineNormal);
80004c5a:	ee fa fe 40 	ld.w	r10,r7[-448]
80004c5e:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004c62:	12 98       	mov	r8,r9
80004c64:	a1 78       	lsl	r8,0x1
80004c66:	12 08       	add	r8,r9
80004c68:	a3 78       	lsl	r8,0x3
80004c6a:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004c6e:	f2 08 00 08 	add	r8,r9,r8
80004c72:	70 28       	ld.w	r8,r8[0x8]
80004c74:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
80004c78:	ee fb fe 44 	ld.w	r11,r7[-444]
80004c7c:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004c80:	12 98       	mov	r8,r9
80004c82:	a1 78       	lsl	r8,0x1
80004c84:	12 08       	add	r8,r9
80004c86:	a3 78       	lsl	r8,0x3
80004c88:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004c8c:	f2 08 00 08 	add	r8,r9,r8
80004c90:	70 18       	ld.w	r8,r8[0x4]
80004c92:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
80004c96:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80004c9a:	ef 48 fe 30 	st.w	r7[-464],r8
80004c9e:	ee fa fe 44 	ld.w	r10,r7[-444]
80004ca2:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004ca6:	12 98       	mov	r8,r9
80004ca8:	a1 78       	lsl	r8,0x1
80004caa:	12 08       	add	r8,r9
80004cac:	a3 78       	lsl	r8,0x3
80004cae:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004cb2:	f2 08 00 08 	add	r8,r9,r8
80004cb6:	70 08       	ld.w	r8,r8[0x0]
80004cb8:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
80004cbc:	ee fb fe 3c 	ld.w	r11,r7[-452]
80004cc0:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004cc4:	12 98       	mov	r8,r9
80004cc6:	a1 78       	lsl	r8,0x1
80004cc8:	12 08       	add	r8,r9
80004cca:	a3 78       	lsl	r8,0x3
80004ccc:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004cd0:	f2 08 00 08 	add	r8,r9,r8
80004cd4:	70 28       	ld.w	r8,r8[0x8]
80004cd6:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
80004cda:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80004cde:	ef 48 fe 34 	st.w	r7[-460],r8
80004ce2:	ee fa fe 3c 	ld.w	r10,r7[-452]
80004ce6:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004cea:	12 98       	mov	r8,r9
80004cec:	a1 78       	lsl	r8,0x1
80004cee:	12 08       	add	r8,r9
80004cf0:	a3 78       	lsl	r8,0x3
80004cf2:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004cf6:	f2 08 00 08 	add	r8,r9,r8
80004cfa:	70 18       	ld.w	r8,r8[0x4]
80004cfc:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
80004d00:	ee fb fe 40 	ld.w	r11,r7[-448]
80004d04:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004d08:	12 98       	mov	r8,r9
80004d0a:	a1 78       	lsl	r8,0x1
80004d0c:	12 08       	add	r8,r9
80004d0e:	a3 78       	lsl	r8,0x3
80004d10:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004d14:	f2 08 00 08 	add	r8,r9,r8
80004d18:	70 08       	ld.w	r8,r8[0x0]
80004d1a:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
80004d1e:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80004d22:	ef 48 fe 38 	st.w	r7[-456],r8
					
					float diffPoints[3];
					for (i=0;i<3;i++)
80004d26:	30 08       	mov	r8,0
80004d28:	ef 68 ff ed 	st.b	r7[-19],r8
80004d2c:	c2 e8       	rjmp	80004d88 <linearProgram4+0x444>
					{
						diffPoints[i] = planes[index2].point[i] - planes[index].point[i];
80004d2e:	ef 2a ff ed 	ld.sb	r10,r7[-19]
80004d32:	ef 29 ff ef 	ld.sb	r9,r7[-17]
80004d36:	12 98       	mov	r8,r9
80004d38:	a1 78       	lsl	r8,0x1
80004d3a:	12 08       	add	r8,r9
80004d3c:	a3 78       	lsl	r8,0x3
80004d3e:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004d42:	f2 08 00 08 	add	r8,r9,r8
80004d46:	ef 29 ff ed 	ld.sb	r9,r7[-19]
80004d4a:	2f d9       	sub	r9,-3
80004d4c:	f0 09 03 2b 	ld.w	r11,r8[r9<<0x2]
80004d50:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004d54:	12 98       	mov	r8,r9
80004d56:	a1 78       	lsl	r8,0x1
80004d58:	12 08       	add	r8,r9
80004d5a:	a3 78       	lsl	r8,0x3
80004d5c:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004d60:	f2 08 00 08 	add	r8,r9,r8
80004d64:	ef 29 ff ed 	ld.sb	r9,r7[-19]
80004d68:	2f d9       	sub	r9,-3
80004d6a:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80004d6e:	e5 a1 09 b8 	cop	cp0,cr9,cr11,cr8,0x42
80004d72:	f4 08 15 02 	lsl	r8,r10,0x2
80004d76:	ee 08 00 08 	add	r8,r7,r8
80004d7a:	f1 49 fe 24 	st.w	r8[-476],r9
				}else{
					float lineNormal[3];
					CROSS(crossProduct,planes[index].normal,lineNormal);
					
					float diffPoints[3];
					for (i=0;i<3;i++)
80004d7e:	ef 38 ff ed 	ld.ub	r8,r7[-19]
80004d82:	2f f8       	sub	r8,-1
80004d84:	ef 68 ff ed 	st.b	r7[-19],r8
80004d88:	ef 39 ff ed 	ld.ub	r9,r7[-19]
80004d8c:	30 28       	mov	r8,2
80004d8e:	f0 09 18 00 	cp.b	r9,r8
80004d92:	fe 9a ff ce 	brle	80004d2e <linearProgram4+0x3ea>
					{
						diffPoints[i] = planes[index2].point[i] - planes[index].point[i];
					}
					
					float scalarProdPtsNormal = scalar_product(diffPoints, planes[index2].normal);
80004d96:	ef 29 ff ef 	ld.sb	r9,r7[-17]
80004d9a:	12 98       	mov	r8,r9
80004d9c:	a1 78       	lsl	r8,0x1
80004d9e:	12 08       	add	r8,r9
80004da0:	a3 78       	lsl	r8,0x3
80004da2:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004da6:	f2 08 00 08 	add	r8,r9,r8
80004daa:	10 99       	mov	r9,r8
80004dac:	ee c8 01 dc 	sub	r8,r7,476
80004db0:	12 9b       	mov	r11,r9
80004db2:	10 9c       	mov	r12,r8
80004db4:	fe b0 ed 6c 	rcall	8000288c <scalar_product>
80004db8:	18 98       	mov	r8,r12
80004dba:	ef 48 ff f4 	st.w	r7[-12],r8
					float scalarProdNormals = scalar_product(lineNormal, planes[index2].normal);
80004dbe:	ef 29 ff ef 	ld.sb	r9,r7[-17]
80004dc2:	12 98       	mov	r8,r9
80004dc4:	a1 78       	lsl	r8,0x1
80004dc6:	12 08       	add	r8,r9
80004dc8:	a3 78       	lsl	r8,0x3
80004dca:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004dce:	f2 08 00 08 	add	r8,r9,r8
80004dd2:	10 99       	mov	r9,r8
80004dd4:	ee c8 01 d0 	sub	r8,r7,464
80004dd8:	12 9b       	mov	r11,r9
80004dda:	10 9c       	mov	r12,r8
80004ddc:	fe b0 ed 58 	rcall	8000288c <scalar_product>
80004de0:	18 98       	mov	r8,r12
80004de2:	ef 48 ff f8 	st.w	r7[-8],r8
					for (i=0;i<3;i++)
80004de6:	30 08       	mov	r8,0
80004de8:	ef 68 ff ed 	st.b	r7[-19],r8
80004dec:	c5 78       	rjmp	80004e9a <linearProgram4+0x556>
					{
						plane.point[i] = planes[index].point[i] + (scalarProdPtsNormal / scalarProdNormals) * lineNormal[i];
80004dee:	ef 25 ff ed 	ld.sb	r5,r7[-19]
80004df2:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004df6:	12 98       	mov	r8,r9
80004df8:	a1 78       	lsl	r8,0x1
80004dfa:	12 08       	add	r8,r9
80004dfc:	a3 78       	lsl	r8,0x3
80004dfe:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004e02:	f2 08 00 08 	add	r8,r9,r8
80004e06:	ef 29 ff ed 	ld.sb	r9,r7[-19]
80004e0a:	2f d9       	sub	r9,-3
80004e0c:	f0 09 03 23 	ld.w	r3,r8[r9<<0x2]
80004e10:	ee fb ff f8 	ld.w	r11,r7[-8]
80004e14:	ee fc ff f4 	ld.w	r12,r7[-12]
80004e18:	f0 16 00 08 	mcall	r6[32]
80004e1c:	18 98       	mov	r8,r12
80004e1e:	10 99       	mov	r9,r8
80004e20:	ef 28 ff ed 	ld.sb	r8,r7[-19]
80004e24:	a3 68       	lsl	r8,0x2
80004e26:	ee 08 00 08 	add	r8,r7,r8
80004e2a:	f0 f8 fe 30 	ld.w	r8,r8[-464]
80004e2e:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80004e32:	e5 a0 09 38 	cop	cp0,cr9,cr3,cr8,0x40
80004e36:	ea c8 ff fd 	sub	r8,r5,-3
80004e3a:	a3 68       	lsl	r8,0x2
80004e3c:	ee 08 00 08 	add	r8,r7,r8
80004e40:	f1 49 fe 48 	st.w	r8[-440],r9
						plane.normal[i] = planes[index2].normal[i] - planes[index].normal[i];
80004e44:	ef 2a ff ed 	ld.sb	r10,r7[-19]
80004e48:	ef 29 ff ef 	ld.sb	r9,r7[-17]
80004e4c:	12 98       	mov	r8,r9
80004e4e:	a1 78       	lsl	r8,0x1
80004e50:	12 08       	add	r8,r9
80004e52:	a3 78       	lsl	r8,0x3
80004e54:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004e58:	f2 08 00 08 	add	r8,r9,r8
80004e5c:	ef 29 ff ed 	ld.sb	r9,r7[-19]
80004e60:	f0 09 03 2b 	ld.w	r11,r8[r9<<0x2]
80004e64:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004e68:	12 98       	mov	r8,r9
80004e6a:	a1 78       	lsl	r8,0x1
80004e6c:	12 08       	add	r8,r9
80004e6e:	a3 78       	lsl	r8,0x3
80004e70:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004e74:	f2 08 00 08 	add	r8,r9,r8
80004e78:	ef 29 ff ed 	ld.sb	r9,r7[-19]
80004e7c:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80004e80:	e5 a1 09 b8 	cop	cp0,cr9,cr11,cr8,0x42
80004e84:	f4 08 15 02 	lsl	r8,r10,0x2
80004e88:	ee 08 00 08 	add	r8,r7,r8
80004e8c:	f1 49 fe 48 	st.w	r8[-440],r9
						diffPoints[i] = planes[index2].point[i] - planes[index].point[i];
					}
					
					float scalarProdPtsNormal = scalar_product(diffPoints, planes[index2].normal);
					float scalarProdNormals = scalar_product(lineNormal, planes[index2].normal);
					for (i=0;i<3;i++)
80004e90:	ef 38 ff ed 	ld.ub	r8,r7[-19]
80004e94:	2f f8       	sub	r8,-1
80004e96:	ef 68 ff ed 	st.b	r7[-19],r8
80004e9a:	ef 39 ff ed 	ld.ub	r9,r7[-19]
80004e9e:	30 28       	mov	r8,2
80004ea0:	f0 09 18 00 	cp.b	r9,r8
80004ea4:	fe 9a ff a5 	brle	80004dee <linearProgram4+0x4aa>
					{
						plane.point[i] = planes[index].point[i] + (scalarProdPtsNormal / scalarProdNormals) * lineNormal[i];
						plane.normal[i] = planes[index2].normal[i] - planes[index].normal[i];
					}
					
					float normNormal = vector_norm(plane.normal);
80004ea8:	ee c8 01 b8 	sub	r8,r7,440
80004eac:	10 9c       	mov	r12,r8
80004eae:	fe b0 ee d7 	rcall	80002c5c <vector_norm>
80004eb2:	18 98       	mov	r8,r12
80004eb4:	ef 48 ff fc 	st.w	r7[-4],r8
					for(i=0;i<3;i++)
80004eb8:	30 08       	mov	r8,0
80004eba:	ef 68 ff ed 	st.b	r7[-19],r8
80004ebe:	c1 c8       	rjmp	80004ef6 <linearProgram4+0x5b2>
					{
						plane.normal[i] = plane.normal[i] / normNormal;
80004ec0:	ef 25 ff ed 	ld.sb	r5,r7[-19]
80004ec4:	ef 28 ff ed 	ld.sb	r8,r7[-19]
80004ec8:	a3 68       	lsl	r8,0x2
80004eca:	ee 08 00 08 	add	r8,r7,r8
80004ece:	f0 f8 fe 48 	ld.w	r8,r8[-440]
80004ed2:	ee fb ff fc 	ld.w	r11,r7[-4]
80004ed6:	10 9c       	mov	r12,r8
80004ed8:	f0 16 00 08 	mcall	r6[32]
80004edc:	18 98       	mov	r8,r12
80004ede:	10 99       	mov	r9,r8
80004ee0:	ea 08 15 02 	lsl	r8,r5,0x2
80004ee4:	ee 08 00 08 	add	r8,r7,r8
80004ee8:	f1 49 fe 48 	st.w	r8[-440],r9
						plane.point[i] = planes[index].point[i] + (scalarProdPtsNormal / scalarProdNormals) * lineNormal[i];
						plane.normal[i] = planes[index2].normal[i] - planes[index].normal[i];
					}
					
					float normNormal = vector_norm(plane.normal);
					for(i=0;i<3;i++)
80004eec:	ef 38 ff ed 	ld.ub	r8,r7[-19]
80004ef0:	2f f8       	sub	r8,-1
80004ef2:	ef 68 ff ed 	st.b	r7[-19],r8
80004ef6:	ef 39 ff ed 	ld.ub	r9,r7[-19]
80004efa:	30 28       	mov	r8,2
80004efc:	f0 09 18 00 	cp.b	r9,r8
80004f00:	fe 9a ff e0 	brle	80004ec0 <linearProgram4+0x57c>
					{
						plane.normal[i] = plane.normal[i] / normNormal;
					}
				}
				projPlanes[index2] = plane;
80004f04:	ef 29 ff ef 	ld.sb	r9,r7[-17]
80004f08:	12 98       	mov	r8,r9
80004f0a:	a1 78       	lsl	r8,0x1
80004f0c:	12 08       	add	r8,r9
80004f0e:	a3 78       	lsl	r8,0x3
80004f10:	ee 08 00 08 	add	r8,r7,r8
80004f14:	f0 c8 01 7c 	sub	r8,r8,380
80004f18:	10 9a       	mov	r10,r8
80004f1a:	ee cb 01 b8 	sub	r11,r7,440
80004f1e:	f4 c8 00 00 	sub	r8,r10,0
80004f22:	f6 c9 00 00 	sub	r9,r11,0
80004f26:	72 0c       	ld.w	r12,r9[0x0]
80004f28:	91 0c       	st.w	r8[0x0],r12
80004f2a:	72 1c       	ld.w	r12,r9[0x4]
80004f2c:	91 1c       	st.w	r8[0x4],r12
80004f2e:	72 2c       	ld.w	r12,r9[0x8]
80004f30:	91 2c       	st.w	r8[0x8],r12
80004f32:	72 39       	ld.w	r9,r9[0xc]
80004f34:	91 39       	st.w	r8[0xc],r9
80004f36:	f6 e8 00 10 	ld.d	r8,r11[16]
80004f3a:	f4 e9 00 10 	st.d	r10[16],r8
80004f3e:	c0 28       	rjmp	80004f42 <linearProgram4+0x5fe>
				if (vector_norm_sqr(crossProduct)<=RVO_EPSILON)
				{
					/* Plane index and plane index2 are (almost) parallel. */
					if (scalar_product(planes[index].normal, planes[index2].normal) > 0.0f) {
						/* Plane index and plane index2 point in the same direction. */
						continue;
80004f40:	d7 03       	nop
		}
		if (scalar_product(planes[index].normal,diffPointVel)>distance)
		{
			/* Result does not satisfy constraint of plane i. */
			
			for (index2 = 0;index2<index;index2++)
80004f42:	ef 38 ff ef 	ld.ub	r8,r7[-17]
80004f46:	2f f8       	sub	r8,-1
80004f48:	ef 68 ff ef 	st.b	r7[-17],r8
80004f4c:	ef 39 ff ef 	ld.ub	r9,r7[-17]
80004f50:	ef 38 ff ee 	ld.ub	r8,r7[-18]
80004f54:	f0 09 18 00 	cp.b	r9,r8
80004f58:	fe 95 fd 64 	brlt	80004a20 <linearProgram4+0xdc>
				}
				projPlanes[index2] = plane;
			}
			
			float tempResult[3];
			for (i=0;i<3;i++)
80004f5c:	30 08       	mov	r8,0
80004f5e:	ef 68 ff ed 	st.b	r7[-19],r8
80004f62:	c1 58       	rjmp	80004f8c <linearProgram4+0x648>
			{
				tempResult[i] = NewVelocity[i];
80004f64:	ef 28 ff ed 	ld.sb	r8,r7[-19]
80004f68:	ef 29 ff ed 	ld.sb	r9,r7[-19]
80004f6c:	a3 69       	lsl	r9,0x2
80004f6e:	ee fa fe 14 	ld.w	r10,r7[-492]
80004f72:	f4 09 00 09 	add	r9,r10,r9
80004f76:	72 09       	ld.w	r9,r9[0x0]
80004f78:	a3 68       	lsl	r8,0x2
80004f7a:	ee 08 00 08 	add	r8,r7,r8
80004f7e:	f1 49 fe 6c 	st.w	r8[-404],r9
				}
				projPlanes[index2] = plane;
			}
			
			float tempResult[3];
			for (i=0;i<3;i++)
80004f82:	ef 38 ff ed 	ld.ub	r8,r7[-19]
80004f86:	2f f8       	sub	r8,-1
80004f88:	ef 68 ff ed 	st.b	r7[-19],r8
80004f8c:	ef 39 ff ed 	ld.ub	r9,r7[-19]
80004f90:	30 28       	mov	r8,2
80004f92:	f0 09 18 00 	cp.b	r9,r8
80004f96:	fe 9a ff e7 	brle	80004f64 <linearProgram4+0x620>
			{
				tempResult[i] = NewVelocity[i];
			}
			if (linearProgram3(projPlanes,planes[index].normal,maxSpeed,NewVelocity,true)<index)
80004f9a:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004f9e:	12 98       	mov	r8,r9
80004fa0:	a1 78       	lsl	r8,0x1
80004fa2:	12 08       	add	r8,r9
80004fa4:	a3 78       	lsl	r8,0x3
80004fa6:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004faa:	f2 08 00 08 	add	r8,r9,r8
80004fae:	10 9b       	mov	r11,r8
80004fb0:	ee cc 01 7c 	sub	r12,r7,380
80004fb4:	30 18       	mov	r8,1
80004fb6:	ee f9 fe 14 	ld.w	r9,r7[-492]
80004fba:	ee fa fe 18 	ld.w	r10,r7[-488]
80004fbe:	f0 16 01 07 	mcall	r6[1052]
80004fc2:	18 9a       	mov	r10,r12
80004fc4:	ef 28 ff ee 	ld.sb	r8,r7[-18]
80004fc8:	e5 a6 09 08 	cop	cp0,cr9,cr0,cr8,0x4c
80004fcc:	30 18       	mov	r8,1
80004fce:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80004fd2:	e0 8c 00 03 	brvs	80004fd8 <linearProgram4+0x694>
80004fd6:	c0 25       	brlt	80004fda <linearProgram4+0x696>
80004fd8:	30 08       	mov	r8,0
80004fda:	5c 58       	castu.b	r8
80004fdc:	c1 f0       	breq	8000501a <linearProgram4+0x6d6>
			{
				for (i=0;i<3;i++)
80004fde:	30 08       	mov	r8,0
80004fe0:	ef 68 ff ed 	st.b	r7[-19],r8
80004fe4:	c1 48       	rjmp	8000500c <linearProgram4+0x6c8>
				{
					NewVelocity[i] = tempResult[i];
80004fe6:	ef 28 ff ed 	ld.sb	r8,r7[-19]
80004fea:	a3 68       	lsl	r8,0x2
80004fec:	ee f9 fe 14 	ld.w	r9,r7[-492]
80004ff0:	10 09       	add	r9,r8
80004ff2:	ef 28 ff ed 	ld.sb	r8,r7[-19]
80004ff6:	a3 68       	lsl	r8,0x2
80004ff8:	ee 08 00 08 	add	r8,r7,r8
80004ffc:	f0 f8 fe 6c 	ld.w	r8,r8[-404]
80005000:	93 08       	st.w	r9[0x0],r8
			{
				tempResult[i] = NewVelocity[i];
			}
			if (linearProgram3(projPlanes,planes[index].normal,maxSpeed,NewVelocity,true)<index)
			{
				for (i=0;i<3;i++)
80005002:	ef 38 ff ed 	ld.ub	r8,r7[-19]
80005006:	2f f8       	sub	r8,-1
80005008:	ef 68 ff ed 	st.b	r7[-19],r8
8000500c:	ef 39 ff ed 	ld.ub	r9,r7[-19]
80005010:	30 28       	mov	r8,2
80005012:	f0 09 18 00 	cp.b	r9,r8
80005016:	fe 9a ff e8 	brle	80004fe6 <linearProgram4+0x6a2>
				{
					NewVelocity[i] = tempResult[i];
				}
			}
			float diffPointVel[3];
			for (i=0;i<3;i++)
8000501a:	30 08       	mov	r8,0
8000501c:	ef 68 ff ed 	st.b	r7[-19],r8
80005020:	c2 78       	rjmp	8000506e <linearProgram4+0x72a>
			{
				diffPointVel[i] = planes[index].point[i] - NewVelocity[i];
80005022:	ef 2a ff ed 	ld.sb	r10,r7[-19]
80005026:	ef 29 ff ee 	ld.sb	r9,r7[-18]
8000502a:	12 98       	mov	r8,r9
8000502c:	a1 78       	lsl	r8,0x1
8000502e:	12 08       	add	r8,r9
80005030:	a3 78       	lsl	r8,0x3
80005032:	ee f9 fe 20 	ld.w	r9,r7[-480]
80005036:	f2 08 00 08 	add	r8,r9,r8
8000503a:	ef 29 ff ed 	ld.sb	r9,r7[-19]
8000503e:	2f d9       	sub	r9,-3
80005040:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80005044:	ef 28 ff ed 	ld.sb	r8,r7[-19]
80005048:	a3 68       	lsl	r8,0x2
8000504a:	ee fb fe 14 	ld.w	r11,r7[-492]
8000504e:	f6 08 00 08 	add	r8,r11,r8
80005052:	70 08       	ld.w	r8,r8[0x0]
80005054:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80005058:	f4 08 15 02 	lsl	r8,r10,0x2
8000505c:	ee 08 00 08 	add	r8,r7,r8
80005060:	f1 49 fe 60 	st.w	r8[-416],r9
				{
					NewVelocity[i] = tempResult[i];
				}
			}
			float diffPointVel[3];
			for (i=0;i<3;i++)
80005064:	ef 38 ff ed 	ld.ub	r8,r7[-19]
80005068:	2f f8       	sub	r8,-1
8000506a:	ef 68 ff ed 	st.b	r7[-19],r8
8000506e:	ef 39 ff ed 	ld.ub	r9,r7[-19]
80005072:	30 28       	mov	r8,2
80005074:	f0 09 18 00 	cp.b	r9,r8
80005078:	fe 9a ff d5 	brle	80005022 <linearProgram4+0x6de>
			{
				diffPointVel[i] = planes[index].point[i] - NewVelocity[i];
			}
			distance = scalar_product(planes[index].normal,diffPointVel);
8000507c:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80005080:	12 98       	mov	r8,r9
80005082:	a1 78       	lsl	r8,0x1
80005084:	12 08       	add	r8,r9
80005086:	a3 78       	lsl	r8,0x3
80005088:	ee f9 fe 20 	ld.w	r9,r7[-480]
8000508c:	f2 08 00 08 	add	r8,r9,r8
80005090:	ee c9 01 a0 	sub	r9,r7,416
80005094:	12 9b       	mov	r11,r9
80005096:	10 9c       	mov	r12,r8
80005098:	fe b0 eb fa 	rcall	8000288c <scalar_product>
8000509c:	18 98       	mov	r8,r12
8000509e:	ef 48 ff f0 	st.w	r7[-16],r8
	
	plane_t projPlanes[MAX_NUM_NEIGHBORS];
	
	float distance = 0.0;
	
	for (index = ind;index<centralData->number_of_neighbors;index++)
800050a2:	ef 38 ff ee 	ld.ub	r8,r7[-18]
800050a6:	2f f8       	sub	r8,-1
800050a8:	ef 68 ff ee 	st.b	r7[-18],r8
800050ac:	ef 29 ff ee 	ld.sb	r9,r7[-18]
800050b0:	ec f8 00 00 	ld.w	r8,r6[0]
800050b4:	70 08       	ld.w	r8,r8[0x0]
800050b6:	f1 38 10 fc 	ld.ub	r8,r8[4348]
800050ba:	10 39       	cp.w	r9,r8
800050bc:	fe 95 fc 5e 	brlt	80004978 <linearProgram4+0x34>
				diffPointVel[i] = planes[index].point[i] - NewVelocity[i];
			}
			distance = scalar_product(planes[index].normal,diffPointVel);
		}
	}
800050c0:	28 5d       	sub	sp,-492
800050c2:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
800050c6:	00 00       	add	r0,r0
800050c8:	80 00       	ld.sh	r0,r0[0x0]
800050ca:	47 d6       	lddsp	r6,sp[0x1f4]

800050cc <clip>:
		return b;
	}
}


static float inline clip(float input_value, float clip_value) {
800050cc:	eb cd 40 80 	pushm	r7,lr
800050d0:	1a 97       	mov	r7,sp
800050d2:	20 2d       	sub	sp,8
800050d4:	ef 4c ff fc 	st.w	r7[-4],r12
800050d8:	ef 4b ff f8 	st.w	r7[-8],r11
	
	if (input_value>clip_value)  return clip_value;     
800050dc:	30 18       	mov	r8,1
800050de:	ee fa ff fc 	ld.w	r10,r7[-4]
800050e2:	ee f9 ff f8 	ld.w	r9,r7[-8]
800050e6:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
800050ea:	e0 8c 00 04 	brvs	800050f2 <clip+0x26>
800050ee:	e0 89 00 03 	brgt	800050f4 <clip+0x28>
800050f2:	30 08       	mov	r8,0
800050f4:	5c 58       	castu.b	r8
800050f6:	c0 40       	breq	800050fe <clip+0x32>
800050f8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800050fc:	c1 98       	rjmp	8000512e <clip+0x62>
	if (input_value<-clip_value) return -clip_value; 
800050fe:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005102:	10 9a       	mov	r10,r8
80005104:	ee 1a 80 00 	eorh	r10,0x8000
80005108:	30 18       	mov	r8,1
8000510a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000510e:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80005112:	e0 8c 00 04 	brvs	8000511a <clip+0x4e>
80005116:	e0 89 00 03 	brgt	8000511c <clip+0x50>
8000511a:	30 08       	mov	r8,0
8000511c:	5c 58       	castu.b	r8
8000511e:	c0 60       	breq	8000512a <clip+0x5e>
80005120:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005124:	ee 18 80 00 	eorh	r8,0x8000
80005128:	c0 38       	rjmp	8000512e <clip+0x62>
	return input_value;
8000512a:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8000512e:	10 9c       	mov	r12,r8
80005130:	2f ed       	sub	sp,-8
80005132:	e3 cd 80 80 	ldm	sp++,r7,pc

80005136 <soft_zone>:


static float inline soft_zone(float x, float soft_zone_width) {
80005136:	eb cd 40 e0 	pushm	r5-r7,lr
8000513a:	1a 97       	mov	r7,sp
8000513c:	20 2d       	sub	sp,8
8000513e:	4a 16       	lddpc	r6,800051c0 <soft_zone+0x8a>
80005140:	1e 26       	rsub	r6,pc
80005142:	ef 4c ff fc 	st.w	r7[-4],r12
80005146:	ef 4b ff f8 	st.w	r7[-8],r11
	if (soft_zone_width<0.0000001) return x; 
8000514a:	ee fc ff f8 	ld.w	r12,r7[-8]
8000514e:	f0 16 00 02 	mcall	r6[8]
80005152:	30 05       	mov	r5,0
80005154:	e0 68 af 48 	mov	r8,44872
80005158:	ea 18 9a bc 	orh	r8,0x9abc
8000515c:	e0 69 d7 f2 	mov	r9,55282
80005160:	ea 19 3e 7a 	orh	r9,0x3e7a
80005164:	f0 16 00 1d 	mcall	r6[116]
80005168:	18 98       	mov	r8,r12
8000516a:	58 08       	cp.w	r8,0
8000516c:	c0 20       	breq	80005170 <soft_zone+0x3a>
8000516e:	30 15       	mov	r5,1
80005170:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
80005174:	c0 40       	breq	8000517c <soft_zone+0x46>
80005176:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000517a:	c1 e8       	rjmp	800051b6 <soft_zone+0x80>
	else {
		return (x*x*x/(SQR(soft_zone_width) + SQR(x)));
8000517c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005180:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005184:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80005188:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000518c:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80005190:	ee fa ff f8 	ld.w	r10,r7[-8]
80005194:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005198:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8000519c:	ee fb ff fc 	ld.w	r11,r7[-4]
800051a0:	ee f9 ff fc 	ld.w	r9,r7[-4]
800051a4:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
800051a8:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
800051ac:	12 9b       	mov	r11,r9
800051ae:	10 9c       	mov	r12,r8
800051b0:	f0 16 00 08 	mcall	r6[32]
800051b4:	18 98       	mov	r8,r12
	}
};
800051b6:	10 9c       	mov	r12,r8
800051b8:	2f ed       	sub	sp,-8
800051ba:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800051be:	00 00       	add	r0,r0
800051c0:	80 00       	ld.sh	r0,r0[0x0]
800051c2:	4f c4       	lddpc	r4,800053b0 <initDiff+0x1e>

800051c4 <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
800051c4:	eb cd 40 c0 	pushm	r6-r7,lr
800051c8:	1a 97       	mov	r7,sp
800051ca:	20 6d       	sub	sp,24
800051cc:	49 e6       	lddpc	r6,80005244 <interpolate+0x80>
800051ce:	1e 26       	rsub	r6,pc
800051d0:	ef 4c ff f8 	st.w	r7[-8],r12
800051d4:	ef 4b ff f4 	st.w	r7[-12],r11
800051d8:	ef 4a ff f0 	st.w	r7[-16],r10
800051dc:	ef 49 ff ec 	st.w	r7[-20],r9
800051e0:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
800051e4:	ee f9 ff f4 	ld.w	r9,r7[-12]
800051e8:	ee f8 ff f0 	ld.w	r8,r7[-16]
800051ec:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
800051f0:	c0 41       	brne	800051f8 <interpolate+0x34>
	{
		return y1;
800051f2:	ee f8 ff ec 	ld.w	r8,r7[-20]
800051f6:	c2 38       	rjmp	8000523c <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
800051f8:	ee f9 ff e8 	ld.w	r9,r7[-24]
800051fc:	ee f8 ff ec 	ld.w	r8,r7[-20]
80005200:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80005204:	ee fa ff f8 	ld.w	r10,r7[-8]
80005208:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000520c:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80005210:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80005214:	ee fa ff f0 	ld.w	r10,r7[-16]
80005218:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000521c:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80005220:	12 9b       	mov	r11,r9
80005222:	10 9c       	mov	r12,r8
80005224:	f0 16 00 08 	mcall	r6[32]
80005228:	18 98       	mov	r8,r12
8000522a:	10 99       	mov	r9,r8
8000522c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80005230:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80005234:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
80005238:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
8000523c:	10 9c       	mov	r12,r8
8000523e:	2f ad       	sub	sp,-24
80005240:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80005244:	80 00       	ld.sh	r0,r0[0x0]
80005246:	50 52       	stdsp	sp[0x14],r2

80005248 <passthroughController>:
#include "time_keeper.h"

#include "pid_control.h"
#include "maths.h"

PID_Controller_t passthroughController() {
80005248:	eb cd 40 e0 	pushm	r5-r7,lr
8000524c:	1a 97       	mov	r7,sp
8000524e:	21 1d       	sub	sp,68
80005250:	49 e6       	lddpc	r6,800052c8 <passthroughController+0x80>
80005252:	1e 26       	rsub	r6,pc
80005254:	18 95       	mov	r5,r12
	PID_Controller_t out;
	out.p_gain=1.0;
80005256:	fc 18 3f 80 	movh	r8,0x3f80
8000525a:	ef 48 ff bc 	st.w	r7[-68],r8
	out.last_update=get_time_ticks();	
8000525e:	f0 16 00 4c 	mcall	r6[304]
80005262:	18 98       	mov	r8,r12
80005264:	ef 48 ff f4 	st.w	r7[-12],r8
	out.clip_min=-10000.0;
80005268:	e0 68 40 00 	mov	r8,16384
8000526c:	ea 18 c6 1c 	orh	r8,0xc61c
80005270:	ef 48 ff c0 	st.w	r7[-64],r8
	out.clip_max= 10000.0;
80005274:	e0 68 40 00 	mov	r8,16384
80005278:	ea 18 46 1c 	orh	r8,0x461c
8000527c:	ef 48 ff c4 	st.w	r7[-60],r8
	out.output=0.0;
80005280:	30 08       	mov	r8,0
80005282:	ef 48 ff ec 	st.w	r7[-20],r8
	out.soft_zone_width=0.0;
80005286:	30 08       	mov	r8,0
80005288:	ef 48 ff fc 	st.w	r7[-4],r8
	initDiff(&(out.differentiator), 0.0, 0.0, 0.0);
8000528c:	ee c8 00 44 	sub	r8,r7,68
80005290:	2e 08       	sub	r8,-32
80005292:	30 09       	mov	r9,0
80005294:	30 0a       	mov	r10,0
80005296:	30 0b       	mov	r11,0
80005298:	10 9c       	mov	r12,r8
8000529a:	f0 16 01 3f 	mcall	r6[1276]
	initInt(&(out.integrator), 0.0, 0.0, 0.0);
8000529e:	ee c8 00 44 	sub	r8,r7,68
800052a2:	2f 48       	sub	r8,-12
800052a4:	30 09       	mov	r9,0
800052a6:	30 0a       	mov	r10,0
800052a8:	30 0b       	mov	r11,0
800052aa:	10 9c       	mov	r12,r8
800052ac:	f0 16 01 88 	mcall	r6[1568]
	return out;
800052b0:	0a 98       	mov	r8,r5
800052b2:	ee c9 00 44 	sub	r9,r7,68
800052b6:	34 4a       	mov	r10,68
800052b8:	12 9b       	mov	r11,r9
800052ba:	10 9c       	mov	r12,r8
800052bc:	f0 16 00 20 	mcall	r6[128]
}
800052c0:	0a 9c       	mov	r12,r5
800052c2:	2e fd       	sub	sp,-68
800052c4:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800052c8:	80 00       	ld.sh	r0,r0[0x0]
800052ca:	50 d6       	stdsp	sp[0x34],r6

800052cc <integrate>:




float integrate(Integrator_t *integrator, float input, float dt) {
800052cc:	eb cd 40 c0 	pushm	r6-r7,lr
800052d0:	1a 97       	mov	r7,sp
800052d2:	20 3d       	sub	sp,12
800052d4:	49 76       	lddpc	r6,80005330 <integrate+0x64>
800052d6:	1e 26       	rsub	r6,pc
800052d8:	ef 4c ff fc 	st.w	r7[-4],r12
800052dc:	ef 4b ff f8 	st.w	r7[-8],r11
800052e0:	ef 4a ff f4 	st.w	r7[-12],r10

	integrator->accumulator=clip(integrator->accumulator+dt* integrator->pregain * input, integrator->clip);
800052e4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800052e8:	70 39       	ld.w	r9,r8[0xc]
800052ea:	ee f8 ff fc 	ld.w	r8,r7[-4]
800052ee:	70 2a       	ld.w	r10,r8[0x8]
800052f0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800052f4:	70 0b       	ld.w	r11,r8[0x0]
800052f6:	ee f8 ff f4 	ld.w	r8,r7[-12]
800052fa:	e5 a2 0b b8 	cop	cp0,cr11,cr11,cr8,0x44
800052fe:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005302:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
80005306:	e5 a0 08 a8 	cop	cp0,cr8,cr10,cr8,0x40
8000530a:	12 9b       	mov	r11,r9
8000530c:	10 9c       	mov	r12,r8
8000530e:	cd fe       	rcall	800050cc <clip>
80005310:	18 99       	mov	r9,r12
80005312:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005316:	91 29       	st.w	r8[0x8],r9
	return integrator->postgain* integrator->accumulator;
80005318:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000531c:	70 19       	ld.w	r9,r8[0x4]
8000531e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005322:	70 28       	ld.w	r8,r8[0x8]
80005324:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44

}
80005328:	10 9c       	mov	r12,r8
8000532a:	2f dd       	sub	sp,-12
8000532c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80005330:	80 00       	ld.sh	r0,r0[0x0]
80005332:	51 5a       	stdsp	sp[0x54],r10

80005334 <initInt>:




void initInt(Integrator_t *integrator, float pregain, float postgain, float clip_val) {
80005334:	eb cd 40 80 	pushm	r7,lr
80005338:	1a 97       	mov	r7,sp
8000533a:	20 4d       	sub	sp,16
8000533c:	ef 4c ff fc 	st.w	r7[-4],r12
80005340:	ef 4b ff f8 	st.w	r7[-8],r11
80005344:	ef 4a ff f4 	st.w	r7[-12],r10
80005348:	ef 49 ff f0 	st.w	r7[-16],r9
	integrator->pregain=pregain;
8000534c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005350:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005354:	91 09       	st.w	r8[0x0],r9
	integrator->postgain=postgain;
80005356:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000535a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000535e:	91 19       	st.w	r8[0x4],r9
	integrator->clip=clip_val;
80005360:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005364:	ee f9 ff f0 	ld.w	r9,r7[-16]
80005368:	91 39       	st.w	r8[0xc],r9
	integrator->accumulator=0.0;
8000536a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000536e:	30 09       	mov	r9,0
80005370:	91 29       	st.w	r8[0x8],r9

}
80005372:	2f cd       	sub	sp,-16
80005374:	e3 cd 80 80 	ldm	sp++,r7,pc

80005378 <resetInt>:
void resetInt(Integrator_t *integrator) {
80005378:	eb cd 40 80 	pushm	r7,lr
8000537c:	1a 97       	mov	r7,sp
8000537e:	20 1d       	sub	sp,4
80005380:	ef 4c ff fc 	st.w	r7[-4],r12
	integrator->accumulator=0.0;
80005384:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005388:	30 09       	mov	r9,0
8000538a:	91 29       	st.w	r8[0x8],r9
}
8000538c:	2f fd       	sub	sp,-4
8000538e:	e3 cd 80 80 	ldm	sp++,r7,pc

80005392 <initDiff>:

void initDiff(Differentiator_t *diff, float gain, float LPF, float clip_val) {
80005392:	eb cd 40 80 	pushm	r7,lr
80005396:	1a 97       	mov	r7,sp
80005398:	20 4d       	sub	sp,16
8000539a:	ef 4c ff fc 	st.w	r7[-4],r12
8000539e:	ef 4b ff f8 	st.w	r7[-8],r11
800053a2:	ef 4a ff f4 	st.w	r7[-12],r10
800053a6:	ef 49 ff f0 	st.w	r7[-16],r9
	diff->gain=gain;
800053aa:	ee f8 ff fc 	ld.w	r8,r7[-4]
800053ae:	ee f9 ff f8 	ld.w	r9,r7[-8]
800053b2:	91 09       	st.w	r8[0x0],r9
	diff->LPF=LPF;
800053b4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800053b8:	ee f9 ff f4 	ld.w	r9,r7[-12]
800053bc:	91 29       	st.w	r8[0x8],r9
	diff->clip=clip_val;
800053be:	ee f8 ff fc 	ld.w	r8,r7[-4]
800053c2:	ee f9 ff f0 	ld.w	r9,r7[-16]
800053c6:	91 39       	st.w	r8[0xc],r9
}
800053c8:	2f cd       	sub	sp,-16
800053ca:	e3 cd 80 80 	ldm	sp++,r7,pc

800053ce <differentiate>:

float differentiate(Differentiator_t *diff, float input, float dt) {
800053ce:	eb cd 40 e0 	pushm	r5-r7,lr
800053d2:	1a 97       	mov	r7,sp
800053d4:	20 4d       	sub	sp,16
800053d6:	4a 66       	lddpc	r6,8000546c <differentiate+0x9e>
800053d8:	1e 26       	rsub	r6,pc
800053da:	ef 4c ff f8 	st.w	r7[-8],r12
800053de:	ef 4b ff f4 	st.w	r7[-12],r11
800053e2:	ef 4a ff f0 	st.w	r7[-16],r10
	float output=0.0;
800053e6:	30 08       	mov	r8,0
800053e8:	ef 48 ff fc 	st.w	r7[-4],r8
	if (dt<0.000001) {
800053ec:	ee fc ff f0 	ld.w	r12,r7[-16]
800053f0:	f0 16 00 02 	mcall	r6[8]
800053f4:	30 05       	mov	r5,0
800053f6:	e0 68 ed 8d 	mov	r8,60813
800053fa:	ea 18 a0 b5 	orh	r8,0xa0b5
800053fe:	e0 69 c6 f7 	mov	r9,50935
80005402:	ea 19 3e b0 	orh	r9,0x3eb0
80005406:	f0 16 00 1d 	mcall	r6[116]
8000540a:	18 98       	mov	r8,r12
8000540c:	58 08       	cp.w	r8,0
8000540e:	c0 20       	breq	80005412 <differentiate+0x44>
80005410:	30 15       	mov	r5,1
80005412:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
80005416:	c0 50       	breq	80005420 <differentiate+0x52>
		output=0.0; 
80005418:	30 08       	mov	r8,0
8000541a:	ef 48 ff fc 	st.w	r7[-4],r8
8000541e:	c1 c8       	rjmp	80005456 <differentiate+0x88>
	} else {
		output=clip(diff->gain*(input - diff->previous)/dt, diff->clip);
80005420:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005424:	70 35       	ld.w	r5,r8[0xc]
80005426:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000542a:	70 09       	ld.w	r9,r8[0x0]
8000542c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005430:	70 18       	ld.w	r8,r8[0x4]
80005432:	ee fa ff f4 	ld.w	r10,r7[-12]
80005436:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
8000543a:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8000543e:	ee fb ff f0 	ld.w	r11,r7[-16]
80005442:	10 9c       	mov	r12,r8
80005444:	f0 16 00 08 	mcall	r6[32]
80005448:	18 98       	mov	r8,r12
8000544a:	0a 9b       	mov	r11,r5
8000544c:	10 9c       	mov	r12,r8
8000544e:	c3 fe       	rcall	800050cc <clip>
80005450:	18 98       	mov	r8,r12
80005452:	ef 48 ff fc 	st.w	r7[-4],r8
	}	
	//diff->previous=(1.0-(diff->LPF))*input + (diff->LPF) * (diff->previous);
	diff->previous=input;
80005456:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000545a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000545e:	91 19       	st.w	r8[0x4],r9
	return output;
80005460:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80005464:	10 9c       	mov	r12,r8
80005466:	2f cd       	sub	sp,-16
80005468:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000546c:	80 00       	ld.sh	r0,r0[0x0]
8000546e:	52 5c       	stdsp	sp[0x94],r12

80005470 <pid_update>:

float pid_update(PID_Controller_t* controller, float error) {
80005470:	eb cd 40 e8 	pushm	r3,r5-r7,lr
80005474:	1a 97       	mov	r7,sp
80005476:	20 3d       	sub	sp,12
80005478:	4c 36       	lddpc	r6,80005584 <pid_update+0x114>
8000547a:	1e 26       	rsub	r6,pc
8000547c:	ef 4c ff f8 	st.w	r7[-8],r12
80005480:	ef 4b ff f4 	st.w	r7[-12],r11
	uint32_t t= get_time_ticks();
80005484:	f0 16 00 4c 	mcall	r6[304]
80005488:	18 98       	mov	r8,r12
8000548a:	ef 48 ff fc 	st.w	r7[-4],r8
	controller->error=soft_zone(error, controller->soft_zone_width);
8000548e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005492:	71 08       	ld.w	r8,r8[0x40]
80005494:	10 9b       	mov	r11,r8
80005496:	ee fc ff f4 	ld.w	r12,r7[-12]
8000549a:	c4 ee       	rcall	80005136 <soft_zone>
8000549c:	18 99       	mov	r9,r12
8000549e:	ee f8 ff f8 	ld.w	r8,r7[-8]
800054a2:	91 d9       	st.w	r8[0x34],r9
	controller->dt=ticks_to_seconds(t - controller->last_update);
800054a4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800054a8:	70 e8       	ld.w	r8,r8[0x38]
800054aa:	ee f9 ff fc 	ld.w	r9,r7[-4]
800054ae:	f2 08 01 08 	sub	r8,r9,r8
800054b2:	10 9c       	mov	r12,r8
800054b4:	f0 16 00 ae 	mcall	r6[696]
800054b8:	18 99       	mov	r9,r12
800054ba:	ee f8 ff f8 	ld.w	r8,r7[-8]
800054be:	91 f9       	st.w	r8[0x3c],r9
	controller->last_update=t;
800054c0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800054c4:	ee f9 ff fc 	ld.w	r9,r7[-4]
800054c8:	91 e9       	st.w	r8[0x38],r9
	
	controller->output = controller->p_gain* (controller->error +integrate(&controller->integrator, controller->error, controller->dt) + differentiate(&controller->differentiator, controller->error, controller->dt));
800054ca:	ee f8 ff f8 	ld.w	r8,r7[-8]
800054ce:	70 05       	ld.w	r5,r8[0x0]
800054d0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800054d4:	70 d3       	ld.w	r3,r8[0x34]
800054d6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800054da:	70 fa       	ld.w	r10,r8[0x3c]
800054dc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800054e0:	70 d9       	ld.w	r9,r8[0x34]
800054e2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800054e6:	2f 48       	sub	r8,-12
800054e8:	12 9b       	mov	r11,r9
800054ea:	10 9c       	mov	r12,r8
800054ec:	f0 16 00 d4 	mcall	r6[848]
800054f0:	18 98       	mov	r8,r12
800054f2:	e5 a0 03 38 	cop	cp0,cr3,cr3,cr8,0x40
800054f6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800054fa:	70 fa       	ld.w	r10,r8[0x3c]
800054fc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005500:	70 d9       	ld.w	r9,r8[0x34]
80005502:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005506:	2e 08       	sub	r8,-32
80005508:	12 9b       	mov	r11,r9
8000550a:	10 9c       	mov	r12,r8
8000550c:	f0 16 01 02 	mcall	r6[1032]
80005510:	18 98       	mov	r8,r12
80005512:	e5 a0 08 38 	cop	cp0,cr8,cr3,cr8,0x40
80005516:	e5 a2 09 58 	cop	cp0,cr9,cr5,cr8,0x44
8000551a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000551e:	91 c9       	st.w	r8[0x30],r9
	if (controller->output < controller->clip_min) controller->output=controller->clip_min;
80005520:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005524:	70 ca       	ld.w	r10,r8[0x30]
80005526:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000552a:	70 19       	ld.w	r9,r8[0x4]
8000552c:	30 18       	mov	r8,1
8000552e:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80005532:	e0 8c 00 03 	brvs	80005538 <pid_update+0xc8>
80005536:	c0 25       	brlt	8000553a <pid_update+0xca>
80005538:	30 08       	mov	r8,0
8000553a:	5c 58       	castu.b	r8
8000553c:	c0 70       	breq	8000554a <pid_update+0xda>
8000553e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005542:	70 19       	ld.w	r9,r8[0x4]
80005544:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005548:	91 c9       	st.w	r8[0x30],r9
	if (controller->output > controller->clip_max) controller->output=controller->clip_max;
8000554a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000554e:	70 ca       	ld.w	r10,r8[0x30]
80005550:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005554:	70 29       	ld.w	r9,r8[0x8]
80005556:	30 18       	mov	r8,1
80005558:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
8000555c:	e0 8c 00 04 	brvs	80005564 <pid_update+0xf4>
80005560:	e0 89 00 03 	brgt	80005566 <pid_update+0xf6>
80005564:	30 08       	mov	r8,0
80005566:	5c 58       	castu.b	r8
80005568:	c0 70       	breq	80005576 <pid_update+0x106>
8000556a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000556e:	70 29       	ld.w	r9,r8[0x8]
80005570:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005574:	91 c9       	st.w	r8[0x30],r9
	return controller->output;	
80005576:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000557a:	70 c8       	ld.w	r8,r8[0x30]
}
8000557c:	10 9c       	mov	r12,r8
8000557e:	2f dd       	sub	sp,-12
80005580:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
80005584:	80 00       	ld.sh	r0,r0[0x0]
80005586:	52 fe       	stdsp	sp[0xbc],lr

80005588 <pid_update_dt>:

float pid_update_dt(PID_Controller_t* controller, float error, float dt) {
80005588:	eb cd 40 e8 	pushm	r3,r5-r7,lr
8000558c:	1a 97       	mov	r7,sp
8000558e:	20 3d       	sub	sp,12
80005590:	4b b6       	lddpc	r6,8000567c <pid_update_dt+0xf4>
80005592:	1e 26       	rsub	r6,pc
80005594:	ef 4c ff fc 	st.w	r7[-4],r12
80005598:	ef 4b ff f8 	st.w	r7[-8],r11
8000559c:	ef 4a ff f4 	st.w	r7[-12],r10
	controller->error=error;
800055a0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800055a4:	ee f9 ff f8 	ld.w	r9,r7[-8]
800055a8:	91 d9       	st.w	r8[0x34],r9
	controller->dt=dt;
800055aa:	ee f8 ff fc 	ld.w	r8,r7[-4]
800055ae:	ee f9 ff f4 	ld.w	r9,r7[-12]
800055b2:	91 f9       	st.w	r8[0x3c],r9
	controller->last_update=get_time_ticks();
800055b4:	f0 16 00 4c 	mcall	r6[304]
800055b8:	18 99       	mov	r9,r12
800055ba:	ee f8 ff fc 	ld.w	r8,r7[-4]
800055be:	91 e9       	st.w	r8[0x38],r9
	
	controller->output = controller->p_gain* (controller->error +integrate(&controller->integrator, controller->error, controller->dt) + differentiate(&controller->differentiator, controller->error, controller->dt));
800055c0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800055c4:	70 05       	ld.w	r5,r8[0x0]
800055c6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800055ca:	70 d3       	ld.w	r3,r8[0x34]
800055cc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800055d0:	70 fa       	ld.w	r10,r8[0x3c]
800055d2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800055d6:	70 d9       	ld.w	r9,r8[0x34]
800055d8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800055dc:	2f 48       	sub	r8,-12
800055de:	12 9b       	mov	r11,r9
800055e0:	10 9c       	mov	r12,r8
800055e2:	f0 16 00 d4 	mcall	r6[848]
800055e6:	18 98       	mov	r8,r12
800055e8:	e5 a0 03 38 	cop	cp0,cr3,cr3,cr8,0x40
800055ec:	ee f8 ff fc 	ld.w	r8,r7[-4]
800055f0:	70 fa       	ld.w	r10,r8[0x3c]
800055f2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800055f6:	70 d9       	ld.w	r9,r8[0x34]
800055f8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800055fc:	2e 08       	sub	r8,-32
800055fe:	12 9b       	mov	r11,r9
80005600:	10 9c       	mov	r12,r8
80005602:	f0 16 01 02 	mcall	r6[1032]
80005606:	18 98       	mov	r8,r12
80005608:	e5 a0 08 38 	cop	cp0,cr8,cr3,cr8,0x40
8000560c:	e5 a2 09 58 	cop	cp0,cr9,cr5,cr8,0x44
80005610:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005614:	91 c9       	st.w	r8[0x30],r9
	if (controller->output < controller->clip_min) controller->output=controller->clip_min;
80005616:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000561a:	70 ca       	ld.w	r10,r8[0x30]
8000561c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005620:	70 19       	ld.w	r9,r8[0x4]
80005622:	30 18       	mov	r8,1
80005624:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80005628:	e0 8c 00 03 	brvs	8000562e <pid_update_dt+0xa6>
8000562c:	c0 25       	brlt	80005630 <pid_update_dt+0xa8>
8000562e:	30 08       	mov	r8,0
80005630:	5c 58       	castu.b	r8
80005632:	c0 70       	breq	80005640 <pid_update_dt+0xb8>
80005634:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005638:	70 19       	ld.w	r9,r8[0x4]
8000563a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000563e:	91 c9       	st.w	r8[0x30],r9
	if (controller->output > controller->clip_max) controller->output=controller->clip_max;
80005640:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005644:	70 ca       	ld.w	r10,r8[0x30]
80005646:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000564a:	70 29       	ld.w	r9,r8[0x8]
8000564c:	30 18       	mov	r8,1
8000564e:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80005652:	e0 8c 00 04 	brvs	8000565a <pid_update_dt+0xd2>
80005656:	e0 89 00 03 	brgt	8000565c <pid_update_dt+0xd4>
8000565a:	30 08       	mov	r8,0
8000565c:	5c 58       	castu.b	r8
8000565e:	c0 70       	breq	8000566c <pid_update_dt+0xe4>
80005660:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005664:	70 29       	ld.w	r9,r8[0x8]
80005666:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000566a:	91 c9       	st.w	r8[0x30],r9
	return controller->output;	
8000566c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005670:	70 c8       	ld.w	r8,r8[0x30]
}
80005672:	10 9c       	mov	r12,r8
80005674:	2f dd       	sub	sp,-12
80005676:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
8000567a:	00 00       	add	r0,r0
8000567c:	80 00       	ld.sh	r0,r0[0x0]
8000567e:	54 16       	stdsp	sp[0x104],r6

80005680 <calc_smaller_angle>:
#define SQR(in) \
		((in)*(in))



float static inline calc_smaller_angle(float angle) {
80005680:	eb cd 40 e0 	pushm	r5-r7,lr
80005684:	1a 97       	mov	r7,sp
80005686:	20 2d       	sub	sp,8
80005688:	4b 56       	lddpc	r6,8000575c <calc_smaller_angle+0xdc>
8000568a:	1e 26       	rsub	r6,pc
8000568c:	ef 4c ff f8 	st.w	r7[-8],r12
	float out=angle;
80005690:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005694:	ef 48 ff fc 	st.w	r7[-4],r8
	while (out<-PI) out+=2.0*PI;
80005698:	c1 88       	rjmp	800056c8 <calc_smaller_angle+0x48>
8000569a:	ee fc ff fc 	ld.w	r12,r7[-4]
8000569e:	f0 16 00 02 	mcall	r6[8]
800056a2:	e0 68 2d 18 	mov	r8,11544
800056a6:	ea 18 54 44 	orh	r8,0x5444
800056aa:	e0 69 21 fb 	mov	r9,8699
800056ae:	ea 19 40 19 	orh	r9,0x4019
800056b2:	f0 16 00 05 	mcall	r6[20]
800056b6:	14 98       	mov	r8,r10
800056b8:	16 99       	mov	r9,r11
800056ba:	10 9a       	mov	r10,r8
800056bc:	12 9b       	mov	r11,r9
800056be:	f0 16 00 09 	mcall	r6[36]
800056c2:	18 98       	mov	r8,r12
800056c4:	ef 48 ff fc 	st.w	r7[-4],r8
800056c8:	ee fc ff fc 	ld.w	r12,r7[-4]
800056cc:	f0 16 00 02 	mcall	r6[8]
800056d0:	30 05       	mov	r5,0
800056d2:	e0 68 2d 18 	mov	r8,11544
800056d6:	ea 18 54 44 	orh	r8,0x5444
800056da:	e0 69 21 fb 	mov	r9,8699
800056de:	ea 19 c0 09 	orh	r9,0xc009
800056e2:	f0 16 00 1d 	mcall	r6[116]
800056e6:	18 98       	mov	r8,r12
800056e8:	58 08       	cp.w	r8,0
800056ea:	c0 20       	breq	800056ee <calc_smaller_angle+0x6e>
800056ec:	30 15       	mov	r5,1
800056ee:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
800056f2:	cd 41       	brne	8000569a <calc_smaller_angle+0x1a>
	while (out>=PI) out-=2.0*PI;
800056f4:	c1 88       	rjmp	80005724 <calc_smaller_angle+0xa4>
800056f6:	ee fc ff fc 	ld.w	r12,r7[-4]
800056fa:	f0 16 00 02 	mcall	r6[8]
800056fe:	e0 68 2d 18 	mov	r8,11544
80005702:	ea 18 54 44 	orh	r8,0x5444
80005706:	e0 69 21 fb 	mov	r9,8699
8000570a:	ea 19 40 19 	orh	r9,0x4019
8000570e:	f0 16 00 11 	mcall	r6[68]
80005712:	14 98       	mov	r8,r10
80005714:	16 99       	mov	r9,r11
80005716:	10 9a       	mov	r10,r8
80005718:	12 9b       	mov	r11,r9
8000571a:	f0 16 00 09 	mcall	r6[36]
8000571e:	18 98       	mov	r8,r12
80005720:	ef 48 ff fc 	st.w	r7[-4],r8
80005724:	ee fc ff fc 	ld.w	r12,r7[-4]
80005728:	f0 16 00 02 	mcall	r6[8]
8000572c:	30 05       	mov	r5,0
8000572e:	e0 68 2d 18 	mov	r8,11544
80005732:	ea 18 54 44 	orh	r8,0x5444
80005736:	e0 69 21 fb 	mov	r9,8699
8000573a:	ea 19 40 09 	orh	r9,0x4009
8000573e:	f0 16 00 76 	mcall	r6[472]
80005742:	18 98       	mov	r8,r12
80005744:	58 08       	cp.w	r8,0
80005746:	c0 20       	breq	8000574a <calc_smaller_angle+0xca>
80005748:	30 15       	mov	r5,1
8000574a:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
8000574e:	cd 41       	brne	800056f6 <calc_smaller_angle+0x76>
	return out;
80005750:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80005754:	10 9c       	mov	r12,r8
80005756:	2f ed       	sub	sp,-8
80005758:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000575c:	80 00       	ld.sh	r0,r0[0x0]
8000575e:	55 0e       	stdsp	sp[0x140],lr

80005760 <fast_sqrt>:
	
	return qtmp;
}

// fast newton iteration for approximate square root
float static inline fast_sqrt(float input) {
80005760:	eb cd 40 c0 	pushm	r6-r7,lr
80005764:	1a 97       	mov	r7,sp
80005766:	20 2d       	sub	sp,8
80005768:	4b 26       	lddpc	r6,80005830 <fast_sqrt+0xd0>
8000576a:	1e 26       	rsub	r6,pc
8000576c:	ef 4c ff f8 	st.w	r7[-8],r12
	if (input<0) {
80005770:	30 18       	mov	r8,1
80005772:	ee fa ff f8 	ld.w	r10,r7[-8]
80005776:	30 09       	mov	r9,0
80005778:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
8000577c:	e0 8c 00 03 	brvs	80005782 <fast_sqrt+0x22>
80005780:	c0 25       	brlt	80005784 <fast_sqrt+0x24>
80005782:	30 08       	mov	r8,0
80005784:	5c 58       	castu.b	r8
80005786:	c0 30       	breq	8000578c <fast_sqrt+0x2c>
		//dbg_print("negative root");
		return 0.0;
80005788:	30 08       	mov	r8,0
8000578a:	c4 f8       	rjmp	80005828 <fast_sqrt+0xc8>
	}
	float result=1.0;
8000578c:	fc 18 3f 80 	movh	r8,0x3f80
80005790:	ef 48 ff fc 	st.w	r7[-4],r8
	result=0.5*(result+(input/result));
80005794:	ee fb ff fc 	ld.w	r11,r7[-4]
80005798:	ee fc ff f8 	ld.w	r12,r7[-8]
8000579c:	f0 16 00 08 	mcall	r6[32]
800057a0:	18 98       	mov	r8,r12
800057a2:	10 99       	mov	r9,r8
800057a4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800057a8:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
800057ac:	fc 18 3f 00 	movh	r8,0x3f00
800057b0:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
800057b4:	ef 48 ff fc 	st.w	r7[-4],r8
	result=0.5*(result+(input/result));
800057b8:	ee fb ff fc 	ld.w	r11,r7[-4]
800057bc:	ee fc ff f8 	ld.w	r12,r7[-8]
800057c0:	f0 16 00 08 	mcall	r6[32]
800057c4:	18 98       	mov	r8,r12
800057c6:	10 99       	mov	r9,r8
800057c8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800057cc:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
800057d0:	fc 18 3f 00 	movh	r8,0x3f00
800057d4:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
800057d8:	ef 48 ff fc 	st.w	r7[-4],r8
	result=0.5*(result+(input/result));
800057dc:	ee fb ff fc 	ld.w	r11,r7[-4]
800057e0:	ee fc ff f8 	ld.w	r12,r7[-8]
800057e4:	f0 16 00 08 	mcall	r6[32]
800057e8:	18 98       	mov	r8,r12
800057ea:	10 99       	mov	r9,r8
800057ec:	ee f8 ff fc 	ld.w	r8,r7[-4]
800057f0:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
800057f4:	fc 18 3f 00 	movh	r8,0x3f00
800057f8:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
800057fc:	ef 48 ff fc 	st.w	r7[-4],r8
	result=0.5*(result+(input/result));
80005800:	ee fb ff fc 	ld.w	r11,r7[-4]
80005804:	ee fc ff f8 	ld.w	r12,r7[-8]
80005808:	f0 16 00 08 	mcall	r6[32]
8000580c:	18 98       	mov	r8,r12
8000580e:	10 99       	mov	r9,r8
80005810:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005814:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80005818:	fc 18 3f 00 	movh	r8,0x3f00
8000581c:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80005820:	ef 48 ff fc 	st.w	r7[-4],r8
	return result;
80005824:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80005828:	10 9c       	mov	r12,r8
8000582a:	2f ed       	sub	sp,-8
8000582c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80005830:	80 00       	ld.sh	r0,r0[0x0]
80005832:	55 ee       	stdsp	sp[0x178],lr

80005834 <sigmoid>:
	else {
		return (x*x*x/(SQR(soft_zone_width) + SQR(x)));
	}
};

static float inline sigmoid(float x) {
80005834:	eb cd 40 c0 	pushm	r6-r7,lr
80005838:	1a 97       	mov	r7,sp
8000583a:	20 1d       	sub	sp,4
8000583c:	48 e6       	lddpc	r6,80005874 <sigmoid+0x40>
8000583e:	1e 26       	rsub	r6,pc
80005840:	ef 4c ff fc 	st.w	r7[-4],r12
	return (x/fast_sqrt(1+SQR(x)));
80005844:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005848:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000584c:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80005850:	fc 18 3f 80 	movh	r8,0x3f80
80005854:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80005858:	10 9c       	mov	r12,r8
8000585a:	c8 3f       	rcall	80005760 <fast_sqrt>
8000585c:	18 98       	mov	r8,r12
8000585e:	10 9b       	mov	r11,r8
80005860:	ee fc ff fc 	ld.w	r12,r7[-4]
80005864:	f0 16 00 08 	mcall	r6[32]
80005868:	18 98       	mov	r8,r12
};
8000586a:	10 9c       	mov	r12,r8
8000586c:	2f fd       	sub	sp,-4
8000586e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80005872:	00 00       	add	r0,r0
80005874:	80 00       	ld.sh	r0,r0[0x0]
80005876:	56 c2       	stdsp	sp[0x1b0],r2

80005878 <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
80005878:	eb cd 40 c0 	pushm	r6-r7,lr
8000587c:	1a 97       	mov	r7,sp
8000587e:	20 6d       	sub	sp,24
80005880:	49 e6       	lddpc	r6,800058f8 <interpolate+0x80>
80005882:	1e 26       	rsub	r6,pc
80005884:	ef 4c ff f8 	st.w	r7[-8],r12
80005888:	ef 4b ff f4 	st.w	r7[-12],r11
8000588c:	ef 4a ff f0 	st.w	r7[-16],r10
80005890:	ef 49 ff ec 	st.w	r7[-20],r9
80005894:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
80005898:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000589c:	ee f8 ff f0 	ld.w	r8,r7[-16]
800058a0:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
800058a4:	c0 41       	brne	800058ac <interpolate+0x34>
	{
		return y1;
800058a6:	ee f8 ff ec 	ld.w	r8,r7[-20]
800058aa:	c2 38       	rjmp	800058f0 <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
800058ac:	ee f9 ff e8 	ld.w	r9,r7[-24]
800058b0:	ee f8 ff ec 	ld.w	r8,r7[-20]
800058b4:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
800058b8:	ee fa ff f8 	ld.w	r10,r7[-8]
800058bc:	ee f8 ff f4 	ld.w	r8,r7[-12]
800058c0:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
800058c4:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
800058c8:	ee fa ff f0 	ld.w	r10,r7[-16]
800058cc:	ee f9 ff f4 	ld.w	r9,r7[-12]
800058d0:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
800058d4:	12 9b       	mov	r11,r9
800058d6:	10 9c       	mov	r12,r8
800058d8:	f0 16 00 08 	mcall	r6[32]
800058dc:	18 98       	mov	r8,r12
800058de:	10 99       	mov	r9,r8
800058e0:	ee f8 ff ec 	ld.w	r8,r7[-20]
800058e4:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
800058e8:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
800058ec:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
800058f0:	10 9c       	mov	r12,r8
800058f2:	2f ad       	sub	sp,-24
800058f4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800058f8:	80 00       	ld.sh	r0,r0[0x0]
800058fa:	57 06       	stdsp	sp[0x1c0],r6

800058fc <mav_array_memcpy>:

/*
  like memcpy(), but if src is NULL, do a memset to zero
*/
static void mav_array_memcpy(void *dest, const void *src, size_t n)
{
800058fc:	eb cd 40 c0 	pushm	r6-r7,lr
80005900:	1a 97       	mov	r7,sp
80005902:	20 3d       	sub	sp,12
80005904:	49 06       	lddpc	r6,80005944 <mav_array_memcpy+0x48>
80005906:	1e 26       	rsub	r6,pc
80005908:	ef 4c ff fc 	st.w	r7[-4],r12
8000590c:	ef 4b ff f8 	st.w	r7[-8],r11
80005910:	ef 4a ff f4 	st.w	r7[-12],r10
	if (src == NULL) {
80005914:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005918:	58 08       	cp.w	r8,0
8000591a:	c0 91       	brne	8000592c <mav_array_memcpy+0x30>
		memset(dest, 0, n);
8000591c:	ee fa ff f4 	ld.w	r10,r7[-12]
80005920:	30 0b       	mov	r11,0
80005922:	ee fc ff fc 	ld.w	r12,r7[-4]
80005926:	f0 16 00 30 	mcall	r6[192]
8000592a:	c0 98       	rjmp	8000593c <mav_array_memcpy+0x40>
	} else {
		memcpy(dest, src, n);
8000592c:	ee fa ff f4 	ld.w	r10,r7[-12]
80005930:	ee fb ff f8 	ld.w	r11,r7[-8]
80005934:	ee fc ff fc 	ld.w	r12,r7[-4]
80005938:	f0 16 00 20 	mcall	r6[128]
	}
}
8000593c:	2f dd       	sub	sp,-12
8000593e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80005942:	00 00       	add	r0,r0
80005944:	80 00       	ld.sh	r0,r0[0x0]
80005946:	57 8a       	stdsp	sp[0x1e0],r10

80005948 <init_stabilisation_copter>:
// 	initInt(&((stabiliser->thrust_controller).integrator), 1.5, 1.0, 1.0); // 1.0 1.0 0.5
		
// }

void init_stabilisation_copter(Stabiliser_Stack_copter_t* stabiliser_stack)
{
80005948:	eb cd 40 c0 	pushm	r6-r7,lr
8000594c:	1a 97       	mov	r7,sp
8000594e:	20 1d       	sub	sp,4
80005950:	49 56       	lddpc	r6,800059a4 <init_stabilisation_copter+0x5c>
80005952:	1e 26       	rsub	r6,pc
80005954:	ef 4c ff fc 	st.w	r7[-4],r12
	centralData = get_central_data();
80005958:	f0 16 00 32 	mcall	r6[200]
8000595c:	18 99       	mov	r9,r12
8000595e:	ec f8 00 00 	ld.w	r8,r6[0]
80005962:	91 09       	st.w	r8[0x0],r9
	centralData->controls.run_mode = MOTORS_OFF;
80005964:	ec f8 00 00 	ld.w	r8,r6[0]
80005968:	70 08       	ld.w	r8,r8[0x0]
8000596a:	30 09       	mov	r9,0
8000596c:	f1 49 01 70 	st.w	r8[368],r9
	centralData->controls.control_mode = ATTITUDE_COMMAND_MODE;
80005970:	ec f8 00 00 	ld.w	r8,r6[0]
80005974:	70 08       	ld.w	r8,r8[0x0]
80005976:	30 19       	mov	r9,1
80005978:	f1 49 01 68 	st.w	r8[360],r9
	centralData->controls.yaw_mode = YAW_RELATIVE;
8000597c:	ec f8 00 00 	ld.w	r8,r6[0]
80005980:	70 08       	ld.w	r8,r8[0x0]
80005982:	30 09       	mov	r9,0
80005984:	f1 49 01 6c 	st.w	r8[364],r9

	*stabiliser_stack = stabiliser_defaults_copter;
80005988:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000598c:	ec f9 08 dc 	ld.w	r9,r6[2268]
80005990:	e0 6a 03 b8 	mov	r10,952
80005994:	12 9b       	mov	r11,r9
80005996:	10 9c       	mov	r12,r8
80005998:	f0 16 00 20 	mcall	r6[128]
}
8000599c:	2f fd       	sub	sp,-4
8000599e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800059a2:	00 00       	add	r0,r0
800059a4:	80 00       	ld.sh	r0,r0[0x0]
800059a6:	57 d6       	stdsp	sp[0x1f4],r6

800059a8 <cascade_stabilise_copter>:


void cascade_stabilise_copter(Imu_Data_t *imu, position_estimator_t *pos_est, Control_Command_t *control_input) {
800059a8:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
800059ac:	1a 97       	mov	r7,sp
800059ae:	21 5d       	sub	sp,84
800059b0:	fe f6 03 70 	ld.w	r6,pc[880]
800059b4:	1e 26       	rsub	r6,pc
800059b6:	ef 4c ff b4 	st.w	r7[-76],r12
800059ba:	ef 4b ff b0 	st.w	r7[-80],r11
800059be:	ef 4a ff ac 	st.w	r7[-84],r10
	float rpyt_errors[4];
	Control_Command_t input;
	int i;
	
	// set the controller input
	input=*control_input;
800059c2:	ee f9 ff ac 	ld.w	r9,r7[-84]
800059c6:	ee c8 00 48 	sub	r8,r7,72
800059ca:	f0 ca 00 00 	sub	r10,r8,0
800059ce:	f2 cb 00 00 	sub	r11,r9,0
800059d2:	76 0c       	ld.w	r12,r11[0x0]
800059d4:	95 0c       	st.w	r10[0x0],r12
800059d6:	76 1c       	ld.w	r12,r11[0x4]
800059d8:	95 1c       	st.w	r10[0x4],r12
800059da:	76 2c       	ld.w	r12,r11[0x8]
800059dc:	95 2c       	st.w	r10[0x8],r12
800059de:	76 3b       	ld.w	r11,r11[0xc]
800059e0:	95 3b       	st.w	r10[0xc],r11
800059e2:	f0 ca ff f0 	sub	r10,r8,-16
800059e6:	f2 cb ff f0 	sub	r11,r9,-16
800059ea:	76 0c       	ld.w	r12,r11[0x0]
800059ec:	95 0c       	st.w	r10[0x0],r12
800059ee:	76 1c       	ld.w	r12,r11[0x4]
800059f0:	95 1c       	st.w	r10[0x4],r12
800059f2:	76 2c       	ld.w	r12,r11[0x8]
800059f4:	95 2c       	st.w	r10[0x8],r12
800059f6:	76 3b       	ld.w	r11,r11[0xc]
800059f8:	95 3b       	st.w	r10[0xc],r11
800059fa:	f2 ea 00 20 	ld.d	r10,r9[32]
800059fe:	f0 eb 00 20 	st.d	r8[32],r10
80005a02:	72 a9       	ld.w	r9,r9[0x28]
80005a04:	91 a9       	st.w	r8[0x28],r9

	switch (control_input->control_mode) {
80005a06:	ee f8 ff ac 	ld.w	r8,r7[-84]
80005a0a:	70 88       	ld.w	r8,r8[0x20]
80005a0c:	58 18       	cp.w	r8,1
80005a0e:	e0 80 00 df 	breq	80005bcc <cascade_stabilise_copter+0x224>
80005a12:	c0 63       	brcs	80005a1e <cascade_stabilise_copter+0x76>
80005a14:	58 28       	cp.w	r8,2
80005a16:	e0 80 01 40 	breq	80005c96 <cascade_stabilise_copter+0x2ee>
80005a1a:	e0 8f 01 78 	bral	80005d0a <cascade_stabilise_copter+0x362>
	case VELOCITY_COMMAND_MODE:
		rpyt_errors[ROLL]  =   input.tvel[Y] - pos_est->vel_bf[Y];     // map y-axis error to roll axis
80005a1e:	ee f9 ff cc 	ld.w	r9,r7[-52]
80005a22:	ee f8 ff b0 	ld.w	r8,r7[-80]
80005a26:	70 c8       	ld.w	r8,r8[0x30]
80005a28:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80005a2c:	ef 48 ff e4 	st.w	r7[-28],r8
		rpyt_errors[PITCH] = -(input.tvel[X] - pos_est->vel_bf[X]);   // map x axis error to pitch axis
80005a30:	ee f9 ff c8 	ld.w	r9,r7[-56]
80005a34:	ee f8 ff b0 	ld.w	r8,r7[-80]
80005a38:	70 b8       	ld.w	r8,r8[0x2c]
80005a3a:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80005a3e:	ee 18 80 00 	eorh	r8,0x8000
80005a42:	ef 48 ff e8 	st.w	r7[-24],r8
		rpyt_errors[3]     = -(input.tvel[Z] - pos_est->vel[Z]);      // attention - input z-axis maps to thrust input!
80005a46:	ee f9 ff d0 	ld.w	r9,r7[-48]
80005a4a:	ee f8 ff b0 	ld.w	r8,r7[-80]
80005a4e:	71 08       	ld.w	r8,r8[0x40]
80005a50:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80005a54:	ee 18 80 00 	eorh	r8,0x8000
80005a58:	ef 48 ff f0 	st.w	r7[-16],r8
		

		if (control_input->yaw_mode == YAW_COORDINATED)  {
80005a5c:	ee f8 ff ac 	ld.w	r8,r7[-84]
80005a60:	70 98       	ld.w	r8,r8[0x24]
80005a62:	58 28       	cp.w	r8,2
80005a64:	c5 61       	brne	80005b10 <cascade_stabilise_copter+0x168>
			float rel_heading = atan2(pos_est->vel_bf[Y], pos_est->vel_bf[X]);
80005a66:	ee f8 ff b0 	ld.w	r8,r7[-80]
80005a6a:	70 b8       	ld.w	r8,r8[0x2c]
80005a6c:	10 9c       	mov	r12,r8
80005a6e:	f0 16 00 02 	mcall	r6[8]
80005a72:	14 92       	mov	r2,r10
80005a74:	16 93       	mov	r3,r11
80005a76:	ee f8 ff b0 	ld.w	r8,r7[-80]
80005a7a:	70 c8       	ld.w	r8,r8[0x30]
80005a7c:	10 9c       	mov	r12,r8
80005a7e:	f0 16 00 02 	mcall	r6[8]
80005a82:	04 98       	mov	r8,r2
80005a84:	06 99       	mov	r9,r3
80005a86:	f0 16 00 4f 	mcall	r6[316]
80005a8a:	14 98       	mov	r8,r10
80005a8c:	16 99       	mov	r9,r11
80005a8e:	10 9a       	mov	r10,r8
80005a90:	12 9b       	mov	r11,r9
80005a92:	f0 16 00 09 	mcall	r6[36]
80005a96:	18 98       	mov	r8,r12
80005a98:	ef 48 ff f8 	st.w	r7[-8],r8
			float current_velocity_sqr=SQR(pos_est->vel_bf[X])+SQR(pos_est->vel_bf[Y]);
80005a9c:	ee f8 ff b0 	ld.w	r8,r7[-80]
80005aa0:	70 b9       	ld.w	r9,r8[0x2c]
80005aa2:	ee f8 ff b0 	ld.w	r8,r7[-80]
80005aa6:	70 b8       	ld.w	r8,r8[0x2c]
80005aa8:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80005aac:	ee f8 ff b0 	ld.w	r8,r7[-80]
80005ab0:	70 ca       	ld.w	r10,r8[0x30]
80005ab2:	ee f8 ff b0 	ld.w	r8,r7[-80]
80005ab6:	70 c8       	ld.w	r8,r8[0x30]
80005ab8:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80005abc:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80005ac0:	ef 48 ff fc 	st.w	r7[-4],r8
			//float blend_func=0.5*(sigmoid(4.0*(current_velocity_sqr - yaw_coordination_velocity))+1.0);
			//blend_func=1.0;
			if (current_velocity_sqr > SQR(centralData->stabiliser_stack.yaw_coordination_velocity)) {
80005ac4:	ec f8 00 00 	ld.w	r8,r6[0]
80005ac8:	70 08       	ld.w	r8,r8[0x0]
80005aca:	f0 f9 05 54 	ld.w	r9,r8[1364]
80005ace:	ec f8 00 00 	ld.w	r8,r6[0]
80005ad2:	70 08       	ld.w	r8,r8[0x0]
80005ad4:	f0 f8 05 54 	ld.w	r8,r8[1364]
80005ad8:	e5 a2 0a 98 	cop	cp0,cr10,cr9,cr8,0x44
80005adc:	30 18       	mov	r8,1
80005ade:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005ae2:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80005ae6:	e0 8c 00 03 	brvs	80005aec <cascade_stabilise_copter+0x144>
80005aea:	c0 25       	brlt	80005aee <cascade_stabilise_copter+0x146>
80005aec:	30 08       	mov	r8,0
80005aee:	5c 58       	castu.b	r8
80005af0:	c1 00       	breq	80005b10 <cascade_stabilise_copter+0x168>
				input.rpy[YAW]+=sigmoid(3.0*rel_heading);
80005af2:	ee f5 ff c0 	ld.w	r5,r7[-64]
80005af6:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005afa:	fc 18 40 40 	movh	r8,0x4040
80005afe:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80005b02:	10 9c       	mov	r12,r8
80005b04:	c9 8e       	rcall	80005834 <sigmoid>
80005b06:	18 98       	mov	r8,r12
80005b08:	e5 a0 08 58 	cop	cp0,cr8,cr5,cr8,0x40
80005b0c:	ef 48 ff c0 	st.w	r7[-64],r8
			} else {
				//input.rpy[YAW]=input.theading;
			}
		}

		rpyt_errors[YAW]= input.rpy[YAW];
80005b10:	ee f8 ff c0 	ld.w	r8,r7[-64]
80005b14:	ef 48 ff ec 	st.w	r7[-20],r8
		
		// run PID update on all velocity controllers
		stabilise(&centralData->stabiliser_stack.velocity_stabiliser, centralData->imu1.dt, rpyt_errors);
80005b18:	ec f8 00 00 	ld.w	r8,r6[0]
80005b1c:	70 08       	ld.w	r8,r8[0x0]
80005b1e:	f0 f9 01 40 	ld.w	r9,r8[320]
80005b22:	ec f8 00 00 	ld.w	r8,r6[0]
80005b26:	70 08       	ld.w	r8,r8[0x0]
80005b28:	f0 c8 fb e8 	sub	r8,r8,-1048
80005b2c:	ee ca 00 1c 	sub	r10,r7,28
80005b30:	12 9b       	mov	r11,r9
80005b32:	10 9c       	mov	r12,r8
80005b34:	f0 16 00 c1 	mcall	r6[772]
		
		//velocity_stabiliser.output.thrust = f_min(velocity_stabiliser.output.thrust,control_input->thrust);
		
		centralData->stabiliser_stack.velocity_stabiliser.output.thrust += THRUST_HOVER_POINT;
80005b38:	ec f8 00 00 	ld.w	r8,r6[0]
80005b3c:	70 05       	ld.w	r5,r8[0x0]
80005b3e:	ec f8 00 00 	ld.w	r8,r6[0]
80005b42:	70 08       	ld.w	r8,r8[0x0]
80005b44:	f0 f8 05 34 	ld.w	r8,r8[1332]
80005b48:	10 9c       	mov	r12,r8
80005b4a:	f0 16 00 02 	mcall	r6[8]
80005b4e:	e0 68 33 33 	mov	r8,13107
80005b52:	ea 18 33 33 	orh	r8,0x3333
80005b56:	e0 69 33 33 	mov	r9,13107
80005b5a:	ea 19 3f d3 	orh	r9,0x3fd3
80005b5e:	f0 16 00 11 	mcall	r6[68]
80005b62:	14 98       	mov	r8,r10
80005b64:	16 99       	mov	r9,r11
80005b66:	10 9a       	mov	r10,r8
80005b68:	12 9b       	mov	r11,r9
80005b6a:	f0 16 00 09 	mcall	r6[36]
80005b6e:	18 98       	mov	r8,r12
80005b70:	eb 48 05 34 	st.w	r5[1332],r8
		centralData->stabiliser_stack.velocity_stabiliser.output.theading = input.theading;
80005b74:	ec f8 00 00 	ld.w	r8,r6[0]
80005b78:	70 08       	ld.w	r8,r8[0x0]
80005b7a:	ee f9 ff d4 	ld.w	r9,r7[-44]
80005b7e:	f1 49 05 44 	st.w	r8[1348],r9
		input = centralData->stabiliser_stack.velocity_stabiliser.output;
80005b82:	ec f8 00 00 	ld.w	r8,r6[0]
80005b86:	70 09       	ld.w	r9,r8[0x0]
80005b88:	ee c8 00 48 	sub	r8,r7,72
80005b8c:	f2 c9 fa d8 	sub	r9,r9,-1320
80005b90:	f0 ca 00 00 	sub	r10,r8,0
80005b94:	f2 cb 00 00 	sub	r11,r9,0
80005b98:	76 0c       	ld.w	r12,r11[0x0]
80005b9a:	95 0c       	st.w	r10[0x0],r12
80005b9c:	76 1c       	ld.w	r12,r11[0x4]
80005b9e:	95 1c       	st.w	r10[0x4],r12
80005ba0:	76 2c       	ld.w	r12,r11[0x8]
80005ba2:	95 2c       	st.w	r10[0x8],r12
80005ba4:	76 3b       	ld.w	r11,r11[0xc]
80005ba6:	95 3b       	st.w	r10[0xc],r11
80005ba8:	f0 ca ff f0 	sub	r10,r8,-16
80005bac:	f2 cb ff f0 	sub	r11,r9,-16
80005bb0:	76 0c       	ld.w	r12,r11[0x0]
80005bb2:	95 0c       	st.w	r10[0x0],r12
80005bb4:	76 1c       	ld.w	r12,r11[0x4]
80005bb6:	95 1c       	st.w	r10[0x4],r12
80005bb8:	76 2c       	ld.w	r12,r11[0x8]
80005bba:	95 2c       	st.w	r10[0x8],r12
80005bbc:	76 3b       	ld.w	r11,r11[0xc]
80005bbe:	95 3b       	st.w	r10[0xc],r11
80005bc0:	f2 ea 00 20 	ld.d	r10,r9[32]
80005bc4:	f0 eb 00 20 	st.d	r8[32],r10
80005bc8:	72 a9       	ld.w	r9,r9[0x28]
80005bca:	91 a9       	st.w	r8[0x28],r9
	
	// -- no break here  - we want to run the lower level modes as well! -- 
	
	case ATTITUDE_COMMAND_MODE:
		// run absolute attitude controller
		rpyt_errors[0]= input.rpy[0] - (-imu->attitude.up_vec.v[1] ); 
80005bcc:	ee f9 ff b8 	ld.w	r9,r7[-72]
80005bd0:	ee f8 ff b4 	ld.w	r8,r7[-76]
80005bd4:	70 68       	ld.w	r8,r8[0x18]
80005bd6:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80005bda:	ef 48 ff e4 	st.w	r7[-28],r8
		rpyt_errors[1]= input.rpy[1] - imu->attitude.up_vec.v[0];
80005bde:	ee f9 ff bc 	ld.w	r9,r7[-68]
80005be2:	ee f8 ff b4 	ld.w	r8,r7[-76]
80005be6:	70 58       	ld.w	r8,r8[0x14]
80005be8:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80005bec:	ef 48 ff e8 	st.w	r7[-24],r8
		
		rpyt_errors[2]= input.rpy[2];
80005bf0:	ee f8 ff c0 	ld.w	r8,r7[-64]
80005bf4:	ef 48 ff ec 	st.w	r7[-20],r8
		
		if ((control_input->yaw_mode == YAW_ABSOLUTE) ) {
80005bf8:	ee f8 ff ac 	ld.w	r8,r7[-84]
80005bfc:	70 98       	ld.w	r8,r8[0x24]
80005bfe:	58 18       	cp.w	r8,1
80005c00:	c1 21       	brne	80005c24 <cascade_stabilise_copter+0x27c>
			rpyt_errors[2] +=calc_smaller_angle(input.theading- pos_est->localPosition.heading);
80005c02:	ee f5 ff ec 	ld.w	r5,r7[-20]
80005c06:	ee f9 ff d4 	ld.w	r9,r7[-44]
80005c0a:	ee f8 ff b0 	ld.w	r8,r7[-80]
80005c0e:	71 b8       	ld.w	r8,r8[0x6c]
80005c10:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80005c14:	10 9c       	mov	r12,r8
80005c16:	fe b0 fd 35 	rcall	80005680 <calc_smaller_angle>
80005c1a:	18 98       	mov	r8,r12
80005c1c:	e5 a0 08 58 	cop	cp0,cr8,cr5,cr8,0x40
80005c20:	ef 48 ff ec 	st.w	r7[-20],r8
		}
		rpyt_errors[3]= input.thrust;       // no feedback for thrust at this level
80005c24:	ee f8 ff c4 	ld.w	r8,r7[-60]
80005c28:	ef 48 ff f0 	st.w	r7[-16],r8
		
		// run PID update on all attitude controllers
		stabilise(&centralData->stabiliser_stack.attitude_stabiliser, centralData->imu1.dt, &rpyt_errors);
80005c2c:	ec f8 00 00 	ld.w	r8,r6[0]
80005c30:	70 08       	ld.w	r8,r8[0x0]
80005c32:	f0 f9 01 40 	ld.w	r9,r8[320]
80005c36:	ec f8 00 00 	ld.w	r8,r6[0]
80005c3a:	70 08       	ld.w	r8,r8[0x0]
80005c3c:	f0 c8 fd 24 	sub	r8,r8,-732
80005c40:	ee ca 00 1c 	sub	r10,r7,28
80005c44:	12 9b       	mov	r11,r9
80005c46:	10 9c       	mov	r12,r8
80005c48:	f0 16 00 c1 	mcall	r6[772]
		
		// use output of attitude controller to set rate setpoints for rate controller 
		input = centralData->stabiliser_stack.attitude_stabiliser.output;
80005c4c:	ec f8 00 00 	ld.w	r8,r6[0]
80005c50:	70 09       	ld.w	r9,r8[0x0]
80005c52:	ee c8 00 48 	sub	r8,r7,72
80005c56:	f2 c9 fc 14 	sub	r9,r9,-1004
80005c5a:	f0 ca 00 00 	sub	r10,r8,0
80005c5e:	f2 cb 00 00 	sub	r11,r9,0
80005c62:	76 0c       	ld.w	r12,r11[0x0]
80005c64:	95 0c       	st.w	r10[0x0],r12
80005c66:	76 1c       	ld.w	r12,r11[0x4]
80005c68:	95 1c       	st.w	r10[0x4],r12
80005c6a:	76 2c       	ld.w	r12,r11[0x8]
80005c6c:	95 2c       	st.w	r10[0x8],r12
80005c6e:	76 3b       	ld.w	r11,r11[0xc]
80005c70:	95 3b       	st.w	r10[0xc],r11
80005c72:	f0 ca ff f0 	sub	r10,r8,-16
80005c76:	f2 cb ff f0 	sub	r11,r9,-16
80005c7a:	76 0c       	ld.w	r12,r11[0x0]
80005c7c:	95 0c       	st.w	r10[0x0],r12
80005c7e:	76 1c       	ld.w	r12,r11[0x4]
80005c80:	95 1c       	st.w	r10[0x4],r12
80005c82:	76 2c       	ld.w	r12,r11[0x8]
80005c84:	95 2c       	st.w	r10[0x8],r12
80005c86:	76 3b       	ld.w	r11,r11[0xc]
80005c88:	95 3b       	st.w	r10[0xc],r11
80005c8a:	f2 ea 00 20 	ld.d	r10,r9[32]
80005c8e:	f0 eb 00 20 	st.d	r8[32],r10
80005c92:	72 a9       	ld.w	r9,r9[0x28]
80005c94:	91 a9       	st.w	r8[0x28],r9
	
	// -- no break here  - we want to run the lower level modes as well! -- 
	
	case RATE_COMMAND_MODE: // this level is always run
		// get rate measurements from IMU (filtered angular rates)
		for (i=0; i<3; i++) {
80005c96:	30 08       	mov	r8,0
80005c98:	ef 48 ff f4 	st.w	r7[-12],r8
80005c9c:	c1 e8       	rjmp	80005cd8 <cascade_stabilise_copter+0x330>
			rpyt_errors[i]= input.rpy[i]- imu->attitude.om[i];
80005c9e:	ee fa ff f4 	ld.w	r10,r7[-12]
80005ca2:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005ca6:	a3 68       	lsl	r8,0x2
80005ca8:	ee 08 00 08 	add	r8,r7,r8
80005cac:	f0 f9 ff b8 	ld.w	r9,r8[-72]
80005cb0:	ee fb ff f4 	ld.w	r11,r7[-12]
80005cb4:	ee f8 ff b4 	ld.w	r8,r7[-76]
80005cb8:	2e 2b       	sub	r11,-30
80005cba:	f0 0b 03 28 	ld.w	r8,r8[r11<<0x2]
80005cbe:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80005cc2:	f4 08 15 02 	lsl	r8,r10,0x2
80005cc6:	ee 08 00 08 	add	r8,r7,r8
80005cca:	f1 49 ff e4 	st.w	r8[-28],r9
	
	// -- no break here  - we want to run the lower level modes as well! -- 
	
	case RATE_COMMAND_MODE: // this level is always run
		// get rate measurements from IMU (filtered angular rates)
		for (i=0; i<3; i++) {
80005cce:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005cd2:	2f f8       	sub	r8,-1
80005cd4:	ef 48 ff f4 	st.w	r7[-12],r8
80005cd8:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005cdc:	58 28       	cp.w	r8,2
80005cde:	fe 9a ff e0 	brle	80005c9e <cascade_stabilise_copter+0x2f6>
			rpyt_errors[i]= input.rpy[i]- imu->attitude.om[i];
		}
		rpyt_errors[3] = input.thrust ;  // no feedback for thrust at this level
80005ce2:	ee f8 ff c4 	ld.w	r8,r7[-60]
80005ce6:	ef 48 ff f0 	st.w	r7[-16],r8
		
		// run PID update on all rate controllers
		stabilise(&centralData->stabiliser_stack.rate_stabiliser, centralData->imu1.dt, &rpyt_errors );
80005cea:	ec f8 00 00 	ld.w	r8,r6[0]
80005cee:	70 08       	ld.w	r8,r8[0x0]
80005cf0:	f0 f9 01 40 	ld.w	r9,r8[320]
80005cf4:	ec f8 00 00 	ld.w	r8,r6[0]
80005cf8:	70 08       	ld.w	r8,r8[0x0]
80005cfa:	f0 c8 fe 60 	sub	r8,r8,-416
80005cfe:	ee ca 00 1c 	sub	r10,r7,28
80005d02:	12 9b       	mov	r11,r9
80005d04:	10 9c       	mov	r12,r8
80005d06:	f0 16 00 c1 	mcall	r6[772]
	}
	
	// mix to servo outputs depending on configuration
	#ifdef CONF_DIAG
	mix_to_servos_diag_quad(&centralData->stabiliser_stack.rate_stabiliser.output);
80005d0a:	ec f8 00 00 	ld.w	r8,r6[0]
80005d0e:	70 08       	ld.w	r8,r8[0x0]
80005d10:	f0 c8 fd 50 	sub	r8,r8,-688
80005d14:	10 9c       	mov	r12,r8
80005d16:	f0 16 01 df 	mcall	r6[1916]
	#ifdef CONF_CROSS
	mix_to_servos_cross_quad(&centralData->stabiliser_stack.rate_stabiliser.output);
	#endif
	#endif
	
}
80005d1a:	2e bd       	sub	sp,-84
80005d1c:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
80005d20:	80 00       	ld.sh	r0,r0[0x0]
80005d22:	58 38       	cp.w	r8,3

80005d24 <mix_to_servos_diag_quad>:

void mix_to_servos_diag_quad(Control_Command_t *control){
80005d24:	eb cd 40 e0 	pushm	r5-r7,lr
80005d28:	1a 97       	mov	r7,sp
80005d2a:	20 6d       	sub	sp,24
80005d2c:	4e 96       	lddpc	r6,80005ed0 <mix_to_servos_diag_quad+0x1ac>
80005d2e:	1e 26       	rsub	r6,pc
80005d30:	ef 4c ff e8 	st.w	r7[-24],r12
	int i;
	float motor_command[4];
	
	motor_command[M_FRONT_RIGHT]= control->thrust + (-control->rpy[ROLL] + control->rpy[PITCH]) + M_FR_DIR * control->rpy[YAW];
80005d34:	ee f8 ff e8 	ld.w	r8,r7[-24]
80005d38:	70 39       	ld.w	r9,r8[0xc]
80005d3a:	ee f8 ff e8 	ld.w	r8,r7[-24]
80005d3e:	70 1a       	ld.w	r10,r8[0x4]
80005d40:	ee f8 ff e8 	ld.w	r8,r7[-24]
80005d44:	70 08       	ld.w	r8,r8[0x0]
80005d46:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80005d4a:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80005d4e:	ee f8 ff e8 	ld.w	r8,r7[-24]
80005d52:	70 28       	ld.w	r8,r8[0x8]
80005d54:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80005d58:	ef 48 ff f0 	st.w	r7[-16],r8
	motor_command[M_FRONT_LEFT] = control->thrust + ( control->rpy[ROLL] + control->rpy[PITCH]) + M_FL_DIR * control->rpy[YAW];
80005d5c:	ee f8 ff e8 	ld.w	r8,r7[-24]
80005d60:	70 39       	ld.w	r9,r8[0xc]
80005d62:	ee f8 ff e8 	ld.w	r8,r7[-24]
80005d66:	70 0a       	ld.w	r10,r8[0x0]
80005d68:	ee f8 ff e8 	ld.w	r8,r7[-24]
80005d6c:	70 18       	ld.w	r8,r8[0x4]
80005d6e:	e5 a0 08 a8 	cop	cp0,cr8,cr10,cr8,0x40
80005d72:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80005d76:	ee f8 ff e8 	ld.w	r8,r7[-24]
80005d7a:	70 28       	ld.w	r8,r8[0x8]
80005d7c:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80005d80:	ef 48 ff f4 	st.w	r7[-12],r8
	motor_command[M_REAR_RIGHT] = control->thrust + (-control->rpy[ROLL] - control->rpy[PITCH]) + M_RR_DIR * control->rpy[YAW];
80005d84:	ee f8 ff e8 	ld.w	r8,r7[-24]
80005d88:	70 39       	ld.w	r9,r8[0xc]
80005d8a:	ee f8 ff e8 	ld.w	r8,r7[-24]
80005d8e:	70 08       	ld.w	r8,r8[0x0]
80005d90:	10 9a       	mov	r10,r8
80005d92:	ee 1a 80 00 	eorh	r10,0x8000
80005d96:	ee f8 ff e8 	ld.w	r8,r7[-24]
80005d9a:	70 18       	ld.w	r8,r8[0x4]
80005d9c:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80005da0:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80005da4:	ee f8 ff e8 	ld.w	r8,r7[-24]
80005da8:	70 28       	ld.w	r8,r8[0x8]
80005daa:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80005dae:	ef 48 ff ec 	st.w	r7[-20],r8
	motor_command[M_REAR_LEFT]  = control->thrust + ( control->rpy[ROLL] - control->rpy[PITCH]) + M_RL_DIR * control->rpy[YAW];
80005db2:	ee f8 ff e8 	ld.w	r8,r7[-24]
80005db6:	70 39       	ld.w	r9,r8[0xc]
80005db8:	ee f8 ff e8 	ld.w	r8,r7[-24]
80005dbc:	70 0a       	ld.w	r10,r8[0x0]
80005dbe:	ee f8 ff e8 	ld.w	r8,r7[-24]
80005dc2:	70 18       	ld.w	r8,r8[0x4]
80005dc4:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80005dc8:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80005dcc:	ee f8 ff e8 	ld.w	r8,r7[-24]
80005dd0:	70 28       	ld.w	r8,r8[0x8]
80005dd2:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80005dd6:	ef 48 ff f8 	st.w	r7[-8],r8
	for (i=0; i<4; i++) {
80005dda:	30 08       	mov	r8,0
80005ddc:	ef 48 ff fc 	st.w	r7[-4],r8
80005de0:	c4 98       	rjmp	80005e72 <mix_to_servos_diag_quad+0x14e>
		if (motor_command[i]<MIN_THRUST) motor_command[i]=MIN_THRUST;
80005de2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005de6:	a3 68       	lsl	r8,0x2
80005de8:	ee 08 00 08 	add	r8,r7,r8
80005dec:	f0 f8 ff ec 	ld.w	r8,r8[-20]
80005df0:	10 9c       	mov	r12,r8
80005df2:	f0 16 00 02 	mcall	r6[8]
80005df6:	30 05       	mov	r5,0
80005df8:	e0 68 cc cd 	mov	r8,52429
80005dfc:	ea 18 cc cc 	orh	r8,0xcccc
80005e00:	e0 69 cc cc 	mov	r9,52428
80005e04:	ea 19 bf ec 	orh	r9,0xbfec
80005e08:	f0 16 00 1d 	mcall	r6[116]
80005e0c:	18 98       	mov	r8,r12
80005e0e:	58 08       	cp.w	r8,0
80005e10:	c0 20       	breq	80005e14 <mix_to_servos_diag_quad+0xf0>
80005e12:	30 15       	mov	r5,1
80005e14:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
80005e18:	c0 c0       	breq	80005e30 <mix_to_servos_diag_quad+0x10c>
80005e1a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005e1e:	a3 68       	lsl	r8,0x2
80005e20:	ee 08 00 08 	add	r8,r7,r8
80005e24:	e0 69 66 66 	mov	r9,26214
80005e28:	ea 19 bf 66 	orh	r9,0xbf66
80005e2c:	f1 49 ff ec 	st.w	r8[-20],r9
		if (motor_command[i]>MAX_THRUST) motor_command[i]=MAX_THRUST;
80005e30:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005e34:	a3 68       	lsl	r8,0x2
80005e36:	ee 08 00 08 	add	r8,r7,r8
80005e3a:	f0 fa ff ec 	ld.w	r10,r8[-20]
80005e3e:	30 18       	mov	r8,1
80005e40:	fc 19 3f 80 	movh	r9,0x3f80
80005e44:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80005e48:	e0 8c 00 04 	brvs	80005e50 <mix_to_servos_diag_quad+0x12c>
80005e4c:	e0 89 00 03 	brgt	80005e52 <mix_to_servos_diag_quad+0x12e>
80005e50:	30 08       	mov	r8,0
80005e52:	5c 58       	castu.b	r8
80005e54:	c0 a0       	breq	80005e68 <mix_to_servos_diag_quad+0x144>
80005e56:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005e5a:	a3 68       	lsl	r8,0x2
80005e5c:	ee 08 00 08 	add	r8,r7,r8
80005e60:	fc 19 3f 80 	movh	r9,0x3f80
80005e64:	f1 49 ff ec 	st.w	r8[-20],r9
	
	motor_command[M_FRONT_RIGHT]= control->thrust + (-control->rpy[ROLL] + control->rpy[PITCH]) + M_FR_DIR * control->rpy[YAW];
	motor_command[M_FRONT_LEFT] = control->thrust + ( control->rpy[ROLL] + control->rpy[PITCH]) + M_FL_DIR * control->rpy[YAW];
	motor_command[M_REAR_RIGHT] = control->thrust + (-control->rpy[ROLL] - control->rpy[PITCH]) + M_RR_DIR * control->rpy[YAW];
	motor_command[M_REAR_LEFT]  = control->thrust + ( control->rpy[ROLL] - control->rpy[PITCH]) + M_RL_DIR * control->rpy[YAW];
	for (i=0; i<4; i++) {
80005e68:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005e6c:	2f f8       	sub	r8,-1
80005e6e:	ef 48 ff fc 	st.w	r7[-4],r8
80005e72:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005e76:	58 38       	cp.w	r8,3
80005e78:	fe 9a ff b5 	brle	80005de2 <mix_to_servos_diag_quad+0xbe>
		if (motor_command[i]<MIN_THRUST) motor_command[i]=MIN_THRUST;
		if (motor_command[i]>MAX_THRUST) motor_command[i]=MAX_THRUST;
	}

	for (i=0; i<4; i++) {
80005e7c:	30 08       	mov	r8,0
80005e7e:	ef 48 ff fc 	st.w	r7[-4],r8
80005e82:	c1 f8       	rjmp	80005ec0 <mix_to_servos_diag_quad+0x19c>
		centralData->servos[i].value=SERVO_SCALE*motor_command[i];
80005e84:	ec f8 00 00 	ld.w	r8,r6[0]
80005e88:	70 0a       	ld.w	r10,r8[0x0]
80005e8a:	ee fb ff fc 	ld.w	r11,r7[-4]
80005e8e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005e92:	a3 68       	lsl	r8,0x2
80005e94:	ee 08 00 08 	add	r8,r7,r8
80005e98:	f0 f9 ff ec 	ld.w	r9,r8[-20]
80005e9c:	fc 18 43 fa 	movh	r8,0x43fa
80005ea0:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80005ea4:	e5 ab 09 08 	cop	cp0,cr9,cr0,cr8,0x56
80005ea8:	f6 08 15 04 	lsl	r8,r11,0x4
80005eac:	f4 08 00 08 	add	r8,r10,r8
80005eb0:	f0 c8 f9 14 	sub	r8,r8,-1772
80005eb4:	91 09       	st.w	r8[0x0],r9
	for (i=0; i<4; i++) {
		if (motor_command[i]<MIN_THRUST) motor_command[i]=MIN_THRUST;
		if (motor_command[i]>MAX_THRUST) motor_command[i]=MAX_THRUST;
	}

	for (i=0; i<4; i++) {
80005eb6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005eba:	2f f8       	sub	r8,-1
80005ebc:	ef 48 ff fc 	st.w	r7[-4],r8
80005ec0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005ec4:	58 38       	cp.w	r8,3
80005ec6:	fe 9a ff df 	brle	80005e84 <mix_to_servos_diag_quad+0x160>
		centralData->servos[i].value=SERVO_SCALE*motor_command[i];
	}
}
80005eca:	2f ad       	sub	sp,-24
80005ecc:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80005ed0:	80 00       	ld.sh	r0,r0[0x0]
80005ed2:	5b b2       	cp.w	r2,-5

80005ed4 <mix_to_servos_cross_quad>:


void mix_to_servos_cross_quad(Control_Command_t *control){
80005ed4:	eb cd 40 e0 	pushm	r5-r7,lr
80005ed8:	1a 97       	mov	r7,sp
80005eda:	20 6d       	sub	sp,24
80005edc:	4d e6       	lddpc	r6,80006054 <mix_to_servos_cross_quad+0x180>
80005ede:	1e 26       	rsub	r6,pc
80005ee0:	ef 4c ff e8 	st.w	r7[-24],r12
	int i;
	float motor_command[4];
	
	motor_command[M_FRONT]= control->thrust + control->rpy[PITCH] + M_FRONT_DIR * control->rpy[YAW];
80005ee4:	ee f8 ff e8 	ld.w	r8,r7[-24]
80005ee8:	70 39       	ld.w	r9,r8[0xc]
80005eea:	ee f8 ff e8 	ld.w	r8,r7[-24]
80005eee:	70 18       	ld.w	r8,r8[0x4]
80005ef0:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80005ef4:	ee f8 ff e8 	ld.w	r8,r7[-24]
80005ef8:	70 28       	ld.w	r8,r8[0x8]
80005efa:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80005efe:	ef 48 ff ec 	st.w	r7[-20],r8
	motor_command[M_RIGHT] = control->thrust - control->rpy[ROLL] + M_RIGHT_DIR * control->rpy[YAW];
80005f02:	ee f8 ff e8 	ld.w	r8,r7[-24]
80005f06:	70 39       	ld.w	r9,r8[0xc]
80005f08:	ee f8 ff e8 	ld.w	r8,r7[-24]
80005f0c:	70 08       	ld.w	r8,r8[0x0]
80005f0e:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80005f12:	ee f8 ff e8 	ld.w	r8,r7[-24]
80005f16:	70 28       	ld.w	r8,r8[0x8]
80005f18:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80005f1c:	ef 48 ff f0 	st.w	r7[-16],r8
	motor_command[M_REAR] = control->thrust - control->rpy[PITCH] + M_REAR_DIR * control->rpy[YAW];
80005f20:	ee f8 ff e8 	ld.w	r8,r7[-24]
80005f24:	70 39       	ld.w	r9,r8[0xc]
80005f26:	ee f8 ff e8 	ld.w	r8,r7[-24]
80005f2a:	70 18       	ld.w	r8,r8[0x4]
80005f2c:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80005f30:	ee f8 ff e8 	ld.w	r8,r7[-24]
80005f34:	70 28       	ld.w	r8,r8[0x8]
80005f36:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80005f3a:	ef 48 ff f4 	st.w	r7[-12],r8
	motor_command[M_LEFT]  = control->thrust + control->rpy[ROLL] + M_LEFT_DIR * control->rpy[YAW];
80005f3e:	ee f8 ff e8 	ld.w	r8,r7[-24]
80005f42:	70 39       	ld.w	r9,r8[0xc]
80005f44:	ee f8 ff e8 	ld.w	r8,r7[-24]
80005f48:	70 08       	ld.w	r8,r8[0x0]
80005f4a:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80005f4e:	ee f8 ff e8 	ld.w	r8,r7[-24]
80005f52:	70 28       	ld.w	r8,r8[0x8]
80005f54:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80005f58:	ef 48 ff f8 	st.w	r7[-8],r8
	for (i=0; i<4; i++) {
80005f5c:	30 08       	mov	r8,0
80005f5e:	ef 48 ff fc 	st.w	r7[-4],r8
80005f62:	c4 98       	rjmp	80005ff4 <mix_to_servos_cross_quad+0x120>
		if (motor_command[i]<MIN_THRUST) motor_command[i]=MIN_THRUST;
80005f64:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005f68:	a3 68       	lsl	r8,0x2
80005f6a:	ee 08 00 08 	add	r8,r7,r8
80005f6e:	f0 f8 ff ec 	ld.w	r8,r8[-20]
80005f72:	10 9c       	mov	r12,r8
80005f74:	f0 16 00 02 	mcall	r6[8]
80005f78:	30 05       	mov	r5,0
80005f7a:	e0 68 cc cd 	mov	r8,52429
80005f7e:	ea 18 cc cc 	orh	r8,0xcccc
80005f82:	e0 69 cc cc 	mov	r9,52428
80005f86:	ea 19 bf ec 	orh	r9,0xbfec
80005f8a:	f0 16 00 1d 	mcall	r6[116]
80005f8e:	18 98       	mov	r8,r12
80005f90:	58 08       	cp.w	r8,0
80005f92:	c0 20       	breq	80005f96 <mix_to_servos_cross_quad+0xc2>
80005f94:	30 15       	mov	r5,1
80005f96:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
80005f9a:	c0 c0       	breq	80005fb2 <mix_to_servos_cross_quad+0xde>
80005f9c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005fa0:	a3 68       	lsl	r8,0x2
80005fa2:	ee 08 00 08 	add	r8,r7,r8
80005fa6:	e0 69 66 66 	mov	r9,26214
80005faa:	ea 19 bf 66 	orh	r9,0xbf66
80005fae:	f1 49 ff ec 	st.w	r8[-20],r9
		if (motor_command[i]>MAX_THRUST) motor_command[i]=MAX_THRUST;
80005fb2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005fb6:	a3 68       	lsl	r8,0x2
80005fb8:	ee 08 00 08 	add	r8,r7,r8
80005fbc:	f0 fa ff ec 	ld.w	r10,r8[-20]
80005fc0:	30 18       	mov	r8,1
80005fc2:	fc 19 3f 80 	movh	r9,0x3f80
80005fc6:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80005fca:	e0 8c 00 04 	brvs	80005fd2 <mix_to_servos_cross_quad+0xfe>
80005fce:	e0 89 00 03 	brgt	80005fd4 <mix_to_servos_cross_quad+0x100>
80005fd2:	30 08       	mov	r8,0
80005fd4:	5c 58       	castu.b	r8
80005fd6:	c0 a0       	breq	80005fea <mix_to_servos_cross_quad+0x116>
80005fd8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005fdc:	a3 68       	lsl	r8,0x2
80005fde:	ee 08 00 08 	add	r8,r7,r8
80005fe2:	fc 19 3f 80 	movh	r9,0x3f80
80005fe6:	f1 49 ff ec 	st.w	r8[-20],r9
	
	motor_command[M_FRONT]= control->thrust + control->rpy[PITCH] + M_FRONT_DIR * control->rpy[YAW];
	motor_command[M_RIGHT] = control->thrust - control->rpy[ROLL] + M_RIGHT_DIR * control->rpy[YAW];
	motor_command[M_REAR] = control->thrust - control->rpy[PITCH] + M_REAR_DIR * control->rpy[YAW];
	motor_command[M_LEFT]  = control->thrust + control->rpy[ROLL] + M_LEFT_DIR * control->rpy[YAW];
	for (i=0; i<4; i++) {
80005fea:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005fee:	2f f8       	sub	r8,-1
80005ff0:	ef 48 ff fc 	st.w	r7[-4],r8
80005ff4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005ff8:	58 38       	cp.w	r8,3
80005ffa:	fe 9a ff b5 	brle	80005f64 <mix_to_servos_cross_quad+0x90>
		if (motor_command[i]<MIN_THRUST) motor_command[i]=MIN_THRUST;
		if (motor_command[i]>MAX_THRUST) motor_command[i]=MAX_THRUST;
	}

	for (i=0; i<4; i++) {
80005ffe:	30 08       	mov	r8,0
80006000:	ef 48 ff fc 	st.w	r7[-4],r8
80006004:	c1 f8       	rjmp	80006042 <mix_to_servos_cross_quad+0x16e>
		centralData->servos[i].value=SERVO_SCALE*motor_command[i];
80006006:	ec f8 00 00 	ld.w	r8,r6[0]
8000600a:	70 0a       	ld.w	r10,r8[0x0]
8000600c:	ee fb ff fc 	ld.w	r11,r7[-4]
80006010:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006014:	a3 68       	lsl	r8,0x2
80006016:	ee 08 00 08 	add	r8,r7,r8
8000601a:	f0 f9 ff ec 	ld.w	r9,r8[-20]
8000601e:	fc 18 43 fa 	movh	r8,0x43fa
80006022:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80006026:	e5 ab 09 08 	cop	cp0,cr9,cr0,cr8,0x56
8000602a:	f6 08 15 04 	lsl	r8,r11,0x4
8000602e:	f4 08 00 08 	add	r8,r10,r8
80006032:	f0 c8 f9 14 	sub	r8,r8,-1772
80006036:	91 09       	st.w	r8[0x0],r9
	for (i=0; i<4; i++) {
		if (motor_command[i]<MIN_THRUST) motor_command[i]=MIN_THRUST;
		if (motor_command[i]>MAX_THRUST) motor_command[i]=MAX_THRUST;
	}

	for (i=0; i<4; i++) {
80006038:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000603c:	2f f8       	sub	r8,-1
8000603e:	ef 48 ff fc 	st.w	r7[-4],r8
80006042:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006046:	58 38       	cp.w	r8,3
80006048:	fe 9a ff df 	brle	80006006 <mix_to_servos_cross_quad+0x132>
		centralData->servos[i].value=SERVO_SCALE*motor_command[i];
	}
	
8000604c:	2f ad       	sub	sp,-24
8000604e:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80006052:	00 00       	add	r0,r0
80006054:	80 00       	ld.sh	r0,r0[0x0]
80006056:	5d 62       	*unknown*

80006058 <init_analog_monitor>:
#define MONITOR_CHANNELS 4
#define MONITOR_SAMPLES 10

int16_t monitor_buffer[MONITOR_CHANNELS *MONITOR_SAMPLES];

void init_analog_monitor() {
80006058:	eb cd 40 c0 	pushm	r6-r7,lr
8000605c:	1a 97       	mov	r7,sp
8000605e:	49 06       	lddpc	r6,8000609c <init_analog_monitor+0x44>
80006060:	1e 26       	rsub	r6,pc
	Init_ADCI(100000, ADCIFA_REF06VDD, 16, 4);
80006062:	30 49       	mov	r9,4
80006064:	31 0a       	mov	r10,16
80006066:	30 1b       	mov	r11,1
80006068:	e0 7c 86 a0 	mov	r12,100000
8000606c:	f0 16 02 05 	mcall	r6[2068]
	adc_sequencer_add(AVR32_ADCIFA_INP_ADCIN6, AVR32_ADCIFA_INN_GNDANA, ADCIFA_SHG_1);  // 6V
80006070:	30 0a       	mov	r10,0
80006072:	30 9b       	mov	r11,9
80006074:	30 6c       	mov	r12,6
80006076:	f0 16 00 87 	mcall	r6[540]
	adc_sequencer_add(AVR32_ADCIFA_INP_ADCIN7, AVR32_ADCIFA_INN_GNDANA, ADCIFA_SHG_1);  // 5V_ANALOG
8000607a:	30 0a       	mov	r10,0
8000607c:	30 9b       	mov	r11,9
8000607e:	30 7c       	mov	r12,7
80006080:	f0 16 00 87 	mcall	r6[540]
	adc_sequencer_add(AVR32_ADCIFA_INP_GNDANA, AVR32_ADCIFA_INN_ADCIN10,ADCIFA_SHG_1);  // BAT_FILTERED
80006084:	30 0a       	mov	r10,0
80006086:	30 2b       	mov	r11,2
80006088:	30 ac       	mov	r12,10
8000608a:	f0 16 00 87 	mcall	r6[540]
	adc_sequencer_add(AVR32_ADCIFA_INP_GNDANA, AVR32_ADCIFA_INN_ADCIN11, ADCIFA_SHG_1); //INPUT
8000608e:	30 0a       	mov	r10,0
80006090:	30 3b       	mov	r11,3
80006092:	30 ac       	mov	r12,10
80006094:	f0 16 00 87 	mcall	r6[540]
	//ADCI_Start_Sampling(&monitor_buffer, MONITOR_CHANNELS, MONITOR_SAMPLES, 100, false);
}
80006098:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000609c:	80 00       	ld.sh	r0,r0[0x0]
8000609e:	5e e4       	retqs	r4

800060a0 <trigger_analog_monitor>:

void trigger_analog_monitor() {
800060a0:	eb cd 40 c0 	pushm	r6-r7,lr
800060a4:	1a 97       	mov	r7,sp
800060a6:	48 76       	lddpc	r6,800060c0 <trigger_analog_monitor+0x20>
800060a8:	1e 26       	rsub	r6,pc
	ADCI_Start_Sampling(&monitor_buffer, MONITOR_CHANNELS, MONITOR_SAMPLES, 100, false);
800060aa:	30 08       	mov	r8,0
800060ac:	36 49       	mov	r9,100
800060ae:	30 aa       	mov	r10,10
800060b0:	30 4b       	mov	r11,4
800060b2:	ec fc 03 9c 	ld.w	r12,r6[924]
800060b6:	f0 16 01 86 	mcall	r6[1560]
}
800060ba:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800060be:	00 00       	add	r0,r0
800060c0:	80 00       	ld.sh	r0,r0[0x0]
800060c2:	5f 2c       	srhs	r12

800060c4 <get_monitored_avg>:

float get_monitored_avg(int channel) {
800060c4:	eb cd 40 c0 	pushm	r6-r7,lr
800060c8:	1a 97       	mov	r7,sp
800060ca:	20 3d       	sub	sp,12
800060cc:	49 c6       	lddpc	r6,8000613c <get_monitored_avg+0x78>
800060ce:	1e 26       	rsub	r6,pc
800060d0:	ef 4c ff f4 	st.w	r7[-12],r12
	float out=0.0;
800060d4:	30 08       	mov	r8,0
800060d6:	ef 48 ff f8 	st.w	r7[-8],r8
	int i;
	for (i=0; i<MONITOR_SAMPLES; i++) {
800060da:	30 08       	mov	r8,0
800060dc:	ef 48 ff fc 	st.w	r7[-4],r8
800060e0:	c1 98       	rjmp	80006112 <get_monitored_avg+0x4e>
		out+=(float)monitor_buffer[channel + i*MONITOR_CHANNELS];
800060e2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800060e6:	f0 09 15 02 	lsl	r9,r8,0x2
800060ea:	ee f8 ff f4 	ld.w	r8,r7[-12]
800060ee:	10 09       	add	r9,r8
800060f0:	ec f8 03 9c 	ld.w	r8,r6[924]
800060f4:	f0 09 04 18 	ld.sh	r8,r8[r9<<0x1]
800060f8:	e5 a6 08 08 	cop	cp0,cr8,cr0,cr8,0x4c
800060fc:	ee f9 ff f8 	ld.w	r9,r7[-8]
80006100:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80006104:	ef 48 ff f8 	st.w	r7[-8],r8
}

float get_monitored_avg(int channel) {
	float out=0.0;
	int i;
	for (i=0; i<MONITOR_SAMPLES; i++) {
80006108:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000610c:	2f f8       	sub	r8,-1
8000610e:	ef 48 ff fc 	st.w	r7[-4],r8
80006112:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006116:	58 98       	cp.w	r8,9
80006118:	fe 9a ff e5 	brle	800060e2 <get_monitored_avg+0x1e>
		out+=(float)monitor_buffer[channel + i*MONITOR_CHANNELS];
	}
	out=out / MONITOR_SAMPLES;
8000611c:	fc 1b 41 20 	movh	r11,0x4120
80006120:	ee fc ff f8 	ld.w	r12,r7[-8]
80006124:	f0 16 00 08 	mcall	r6[32]
80006128:	18 98       	mov	r8,r12
8000612a:	ef 48 ff f8 	st.w	r7[-8],r8
	return out;
8000612e:	ee f8 ff f8 	ld.w	r8,r7[-8]
}
80006132:	10 9c       	mov	r12,r8
80006134:	2f dd       	sub	sp,-12
80006136:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000613a:	00 00       	add	r0,r0
8000613c:	80 00       	ld.sh	r0,r0[0x0]
8000613e:	5f 52       	srlt	r2

80006140 <get_battery_rail>:

float get_battery_rail(){
80006140:	eb cd 40 c0 	pushm	r6-r7,lr
80006144:	1a 97       	mov	r7,sp
80006146:	48 f6       	lddpc	r6,80006180 <get_battery_rail+0x40>
80006148:	1e 26       	rsub	r6,pc
	return -CONV_FACTOR_BAT * get_monitored_avg(3);
8000614a:	30 3c       	mov	r12,3
8000614c:	f0 16 00 7e 	mcall	r6[504]
80006150:	18 98       	mov	r8,r12
80006152:	10 9c       	mov	r12,r8
80006154:	f0 16 00 02 	mcall	r6[8]
80006158:	e0 68 67 a1 	mov	r8,26529
8000615c:	ea 18 ea b3 	orh	r8,0xeab3
80006160:	e0 69 b5 73 	mov	r9,46451
80006164:	ea 19 bf 65 	orh	r9,0xbf65
80006168:	f0 16 00 03 	mcall	r6[12]
8000616c:	14 98       	mov	r8,r10
8000616e:	16 99       	mov	r9,r11
80006170:	10 9a       	mov	r10,r8
80006172:	12 9b       	mov	r11,r9
80006174:	f0 16 00 09 	mcall	r6[36]
80006178:	18 98       	mov	r8,r12
}
8000617a:	10 9c       	mov	r12,r8
8000617c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80006180:	80 00       	ld.sh	r0,r0[0x0]
80006182:	5f cc       	srvs	r12

80006184 <get_internal_rail>:

float get_internal_rail(){
80006184:	eb cd 40 c0 	pushm	r6-r7,lr
80006188:	1a 97       	mov	r7,sp
8000618a:	48 f6       	lddpc	r6,800061c4 <get_internal_rail+0x40>
8000618c:	1e 26       	rsub	r6,pc
	return -CONV_FACTOR_INT * get_monitored_avg(2);
8000618e:	30 2c       	mov	r12,2
80006190:	f0 16 00 7e 	mcall	r6[504]
80006194:	18 98       	mov	r8,r12
80006196:	10 9c       	mov	r12,r8
80006198:	f0 16 00 02 	mcall	r6[8]
8000619c:	e0 68 67 a1 	mov	r8,26529
800061a0:	ea 18 ea b3 	orh	r8,0xeab3
800061a4:	e0 69 b5 73 	mov	r9,46451
800061a8:	ea 19 bf 65 	orh	r9,0xbf65
800061ac:	f0 16 00 03 	mcall	r6[12]
800061b0:	14 98       	mov	r8,r10
800061b2:	16 99       	mov	r9,r11
800061b4:	10 9a       	mov	r10,r8
800061b6:	12 9b       	mov	r11,r9
800061b8:	f0 16 00 09 	mcall	r6[36]
800061bc:	18 98       	mov	r8,r12
}
800061be:	10 9c       	mov	r12,r8
800061c0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800061c4:	80 00       	ld.sh	r0,r0[0x0]
800061c6:	60 10       	ld.w	r0,r0[0x4]

800061c8 <get_6V_analog_rail>:


float get_6V_analog_rail(){
800061c8:	eb cd 40 c0 	pushm	r6-r7,lr
800061cc:	1a 97       	mov	r7,sp
800061ce:	48 f6       	lddpc	r6,80006208 <get_6V_analog_rail+0x40>
800061d0:	1e 26       	rsub	r6,pc
	return CONV_FACTOR_6V * get_monitored_avg(0);
800061d2:	30 0c       	mov	r12,0
800061d4:	f0 16 00 7e 	mcall	r6[504]
800061d8:	18 98       	mov	r8,r12
800061da:	10 9c       	mov	r12,r8
800061dc:	f0 16 00 02 	mcall	r6[8]
800061e0:	e0 68 61 13 	mov	r8,24851
800061e4:	ea 18 d3 c3 	orh	r8,0xd3c3
800061e8:	e0 69 65 2b 	mov	r9,25899
800061ec:	ea 19 3f 59 	orh	r9,0x3f59
800061f0:	f0 16 00 03 	mcall	r6[12]
800061f4:	14 98       	mov	r8,r10
800061f6:	16 99       	mov	r9,r11
800061f8:	10 9a       	mov	r10,r8
800061fa:	12 9b       	mov	r11,r9
800061fc:	f0 16 00 09 	mcall	r6[36]
80006200:	18 98       	mov	r8,r12
}
80006202:	10 9c       	mov	r12,r8
80006204:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80006208:	80 00       	ld.sh	r0,r0[0x0]
8000620a:	60 54       	ld.w	r4,r0[0x14]

8000620c <get_5V_analog_rail>:


float get_5V_analog_rail(){
8000620c:	eb cd 40 c0 	pushm	r6-r7,lr
80006210:	1a 97       	mov	r7,sp
80006212:	48 f6       	lddpc	r6,8000624c <get_5V_analog_rail+0x40>
80006214:	1e 26       	rsub	r6,pc
	return CONV_FACTOR_5V * get_monitored_avg(1);
80006216:	30 1c       	mov	r12,1
80006218:	f0 16 00 7e 	mcall	r6[504]
8000621c:	18 98       	mov	r8,r12
8000621e:	10 9c       	mov	r12,r8
80006220:	f0 16 00 02 	mcall	r6[8]
80006224:	e0 68 61 13 	mov	r8,24851
80006228:	ea 18 d3 c3 	orh	r8,0xd3c3
8000622c:	e0 69 65 2b 	mov	r9,25899
80006230:	ea 19 3f 59 	orh	r9,0x3f59
80006234:	f0 16 00 03 	mcall	r6[12]
80006238:	14 98       	mov	r8,r10
8000623a:	16 99       	mov	r9,r11
8000623c:	10 9a       	mov	r10,r8
8000623e:	12 9b       	mov	r11,r9
80006240:	f0 16 00 09 	mcall	r6[36]
80006244:	18 98       	mov	r8,r12
}
80006246:	10 9c       	mov	r12,r8
80006248:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000624c:	80 00       	ld.sh	r0,r0[0x0]
8000624e:	60 98       	ld.w	r8,r0[0x24]

80006250 <cpu_irq_is_enabled_flags>:

	return flags;
}

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
80006250:	eb cd 40 80 	pushm	r7,lr
80006254:	1a 97       	mov	r7,sp
80006256:	20 1d       	sub	sp,4
80006258:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
8000625c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006260:	e6 18 00 01 	andh	r8,0x1,COH
80006264:	5f 08       	sreq	r8
80006266:	5c 58       	castu.b	r8
}
80006268:	10 9c       	mov	r12,r8
8000626a:	2f fd       	sub	sp,-4
8000626c:	e3 cd 80 80 	ldm	sp++,r7,pc

80006270 <osc_get_rate>:
/**
 * \todo RC8M may run at either 8 MHz or 1 MHz. Currently, we assume
 * it's always running at 8 MHz.
 */
static inline uint32_t osc_get_rate(uint8_t id)
{
80006270:	eb cd 40 80 	pushm	r7,lr
80006274:	1a 97       	mov	r7,sp
80006276:	20 1d       	sub	sp,4
80006278:	18 98       	mov	r8,r12
8000627a:	ef 68 ff fc 	st.b	r7[-4],r8
	switch (id) {
8000627e:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80006282:	58 38       	cp.w	r8,3
80006284:	c1 20       	breq	800062a8 <osc_get_rate+0x38>
80006286:	e0 89 00 07 	brgt	80006294 <osc_get_rate+0x24>
8000628a:	58 08       	cp.w	r8,0
8000628c:	c0 90       	breq	8000629e <osc_get_rate+0x2e>
8000628e:	58 28       	cp.w	r8,2
80006290:	c0 f0       	breq	800062ae <osc_get_rate+0x3e>
80006292:	c1 b8       	rjmp	800062c8 <osc_get_rate+0x58>
80006294:	58 48       	cp.w	r8,4
80006296:	c1 10       	breq	800062b8 <osc_get_rate+0x48>
80006298:	58 58       	cp.w	r8,5
8000629a:	c1 40       	breq	800062c2 <osc_get_rate+0x52>
8000629c:	c1 68       	rjmp	800062c8 <osc_get_rate+0x58>
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return BOARD_OSC0_HZ;
8000629e:	e0 68 24 00 	mov	r8,9216
800062a2:	ea 18 00 f4 	orh	r8,0xf4
800062a6:	c1 28       	rjmp	800062ca <osc_get_rate+0x5a>
		return BOARD_OSC1_HZ;
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		return BOARD_OSC32_HZ;
800062a8:	e0 68 80 00 	mov	r8,32768
800062ac:	c0 f8       	rjmp	800062ca <osc_get_rate+0x5a>
#endif

	case OSC_ID_RC8M:
		return OSC_RC8M_NOMINAL_HZ;
800062ae:	e0 68 12 00 	mov	r8,4608
800062b2:	ea 18 00 7a 	orh	r8,0x7a
800062b6:	c0 a8       	rjmp	800062ca <osc_get_rate+0x5a>

	case OSC_ID_RC120M:
		return OSC_RC120M_NOMINAL_HZ;
800062b8:	e0 68 0e 00 	mov	r8,3584
800062bc:	ea 18 07 27 	orh	r8,0x727
800062c0:	c0 58       	rjmp	800062ca <osc_get_rate+0x5a>

	case OSC_ID_RCSYS:
		return OSC_RCSYS_NOMINAL_HZ;
800062c2:	e0 78 c1 38 	mov	r8,115000
800062c6:	c0 28       	rjmp	800062ca <osc_get_rate+0x5a>

	default:
		/* unhandled_case(id); */
		return 0;
800062c8:	30 08       	mov	r8,0
	}
}
800062ca:	10 9c       	mov	r12,r8
800062cc:	2f fd       	sub	sp,-4
800062ce:	e3 cd 80 80 	ldm	sp++,r7,pc

800062d2 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern bool sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
800062d2:	eb cd 40 c0 	pushm	r6-r7,lr
800062d6:	1a 97       	mov	r7,sp
800062d8:	48 56       	lddpc	r6,800062ec <sysclk_get_main_hz+0x1a>
800062da:	1e 26       	rsub	r6,pc
		return BOARD_OSC1_HZ;
#endif

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLL0:
		return pll_get_default_rate(0);
800062dc:	30 0c       	mov	r12,0
800062de:	cc 9f       	rcall	80006270 <osc_get_rate>
800062e0:	18 98       	mov	r8,r12
800062e2:	a3 68       	lsl	r8,0x2

	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
800062e4:	10 9c       	mov	r12,r8
800062e6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800062ea:	00 00       	add	r0,r0
800062ec:	80 00       	ld.sh	r0,r0[0x0]
800062ee:	61 5e       	ld.w	lr,r0[0x54]

800062f0 <sysclk_get_pba_hz>:
 * \brief Return the current rate in Hz of the Peripheral Bus A clock
 *
 * \return Frequency of the Peripheral Bus A clock, in Hz.
 */
static inline uint32_t sysclk_get_pba_hz(void)
{
800062f0:	eb cd 40 c0 	pushm	r6-r7,lr
800062f4:	1a 97       	mov	r7,sp
800062f6:	48 46       	lddpc	r6,80006304 <sysclk_get_pba_hz+0x14>
800062f8:	1e 26       	rsub	r6,pc
	return sysclk_get_main_hz() >> CONFIG_SYSCLK_PBA_DIV;
800062fa:	ce cf       	rcall	800062d2 <sysclk_get_main_hz>
800062fc:	18 98       	mov	r8,r12
}
800062fe:	10 9c       	mov	r12,r8
80006300:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80006304:	80 00       	ld.sh	r0,r0[0x0]
80006306:	61 7c       	ld.w	r12,r0[0x5c]

80006308 <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
80006308:	eb cd 40 c0 	pushm	r6-r7,lr
8000630c:	1a 97       	mov	r7,sp
8000630e:	20 6d       	sub	sp,24
80006310:	49 e6       	lddpc	r6,80006388 <interpolate+0x80>
80006312:	1e 26       	rsub	r6,pc
80006314:	ef 4c ff f8 	st.w	r7[-8],r12
80006318:	ef 4b ff f4 	st.w	r7[-12],r11
8000631c:	ef 4a ff f0 	st.w	r7[-16],r10
80006320:	ef 49 ff ec 	st.w	r7[-20],r9
80006324:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
80006328:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000632c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80006330:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
80006334:	c0 41       	brne	8000633c <interpolate+0x34>
	{
		return y1;
80006336:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000633a:	c2 38       	rjmp	80006380 <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
8000633c:	ee f9 ff e8 	ld.w	r9,r7[-24]
80006340:	ee f8 ff ec 	ld.w	r8,r7[-20]
80006344:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80006348:	ee fa ff f8 	ld.w	r10,r7[-8]
8000634c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80006350:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80006354:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80006358:	ee fa ff f0 	ld.w	r10,r7[-16]
8000635c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80006360:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80006364:	12 9b       	mov	r11,r9
80006366:	10 9c       	mov	r12,r8
80006368:	f0 16 00 08 	mcall	r6[32]
8000636c:	18 98       	mov	r8,r12
8000636e:	10 99       	mov	r9,r8
80006370:	ee f8 ff ec 	ld.w	r8,r7[-20]
80006374:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80006378:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
8000637c:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
80006380:	10 9c       	mov	r12,r8
80006382:	2f ad       	sub	sp,-24
80006384:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80006388:	80 00       	ld.sh	r0,r0[0x0]
8000638a:	61 96       	ld.w	r6,r0[0x64]

8000638c <i2c_int_handler_i2c0>:
 */

ISR(i2c_int_handler_i2c0,CONF_TWIM_IRQ_GROUP,CONF_TWIM_IRQ_LEVEL)
//__attribute__((__interrupt__))
//static void i2c_int_handler_i2c0(void)
{
8000638c:	eb cd 40 c0 	pushm	r6-r7,lr
80006390:	1a 97       	mov	r7,sp
80006392:	20 2d       	sub	sp,8
80006394:	4c e6       	lddpc	r6,800064cc <i2c_int_handler_i2c0+0x140>
80006396:	1e 26       	rsub	r6,pc
	 volatile avr32_twim_t *twim = &AVR32_TWIM0;
80006398:	fe 78 38 00 	mov	r8,-51200
8000639c:	ef 48 ff f8 	st.w	r7[-8],r8
		// get masked status register value
	uint32_t status = twim->sr &(AVR32_TWIM_SR_STD_MASK |AVR32_TWIM_SR_TXRDY_MASK |AVR32_TWIM_SR_RXRDY_MASK) ;
800063a0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800063a4:	70 78       	ld.w	r8,r8[0x1c]
800063a6:	e2 18 07 03 	andl	r8,0x703,COH
800063aa:	ef 48 ff fc 	st.w	r7[-4],r8
	// this is a NACK
	if (status & AVR32_TWIM_SR_STD_MASK) {
800063ae:	ee f8 ff fc 	ld.w	r8,r7[-4]
800063b2:	e2 18 07 00 	andl	r8,0x700,COH
800063b6:	c1 70       	breq	800063e4 <i2c_int_handler_i2c0+0x58>
		//if we get a nak, clear the valid bit in cmdr, 
		//otherwise the command will be resent.
		current_transfer->transfer_in_progress = false;
800063b8:	ec f8 00 a4 	ld.w	r8,r6[164]
800063bc:	70 09       	ld.w	r9,r8[0x0]
800063be:	30 08       	mov	r8,0
800063c0:	f3 68 00 18 	st.b	r9[24],r8
		twim->CMDR.valid = 0;
800063c4:	ee f9 ff f8 	ld.w	r9,r7[-8]
800063c8:	72 38       	ld.w	r8,r9[0xc]
800063ca:	30 0a       	mov	r10,0
800063cc:	f1 da d1 e1 	bfins	r8,r10,0xf,0x1
800063d0:	93 38       	st.w	r9[0xc],r8
		twim->scr = ~0UL;
800063d2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800063d6:	3f f9       	mov	r9,-1
800063d8:	91 b9       	st.w	r8[0x2c],r9
		twim->idr = ~0UL;
800063da:	ee f8 ff f8 	ld.w	r8,r7[-8]
800063de:	3f f9       	mov	r9,-1
800063e0:	91 99       	st.w	r8[0x24],r9
800063e2:	c7 18       	rjmp	800064c4 <i2c_int_handler_i2c0+0x138>
	}
	// this is a RXRDY
	else if (status & AVR32_TWIM_SR_RXRDY_MASK) {
800063e4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800063e8:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800063ec:	5c 58       	castu.b	r8
800063ee:	c2 f0       	breq	8000644c <i2c_int_handler_i2c0+0xc0>
		
		// get data from Receive Holding Register
		if (current_transfer->data_index < current_transfer->data_size) {
800063f0:	ec f8 00 a4 	ld.w	r8,r6[164]
800063f4:	70 08       	ld.w	r8,r8[0x0]
800063f6:	70 59       	ld.w	r9,r8[0x14]
800063f8:	ec f8 00 a4 	ld.w	r8,r6[164]
800063fc:	70 08       	ld.w	r8,r8[0x0]
800063fe:	70 48       	ld.w	r8,r8[0x10]
80006400:	10 39       	cp.w	r9,r8
80006402:	c1 62       	brcc	8000642e <i2c_int_handler_i2c0+0xa2>
			current_transfer->data[current_transfer->data_index]= twim->rhr;
80006404:	ec f8 00 a4 	ld.w	r8,r6[164]
80006408:	70 08       	ld.w	r8,r8[0x0]
8000640a:	70 39       	ld.w	r9,r8[0xc]
8000640c:	ec f8 00 a4 	ld.w	r8,r6[164]
80006410:	70 08       	ld.w	r8,r8[0x0]
80006412:	70 58       	ld.w	r8,r8[0x14]
80006414:	10 09       	add	r9,r8
80006416:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000641a:	70 58       	ld.w	r8,r8[0x14]
8000641c:	5c 58       	castu.b	r8
8000641e:	b2 88       	st.b	r9[0x0],r8
			current_transfer->data_index++;
80006420:	ec f8 00 a4 	ld.w	r8,r6[164]
80006424:	70 08       	ld.w	r8,r8[0x0]
80006426:	70 59       	ld.w	r9,r8[0x14]
80006428:	2f f9       	sub	r9,-1
8000642a:	91 59       	st.w	r8[0x14],r9
8000642c:	c4 c8       	rjmp	800064c4 <i2c_int_handler_i2c0+0x138>
		} else {			
			// finish the receive operation
			twim->idr = AVR32_TWIM_IDR_RXRDY_MASK;
8000642e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006432:	30 19       	mov	r9,1
80006434:	91 99       	st.w	r8[0x24],r9
			twim->cr = AVR32_TWIM_CR_MDIS_MASK;
80006436:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000643a:	30 29       	mov	r9,2
8000643c:	91 09       	st.w	r8[0x0],r9
			// set busy to false
			current_transfer->transfer_in_progress = false;
8000643e:	ec f8 00 a4 	ld.w	r8,r6[164]
80006442:	70 09       	ld.w	r9,r8[0x0]
80006444:	30 08       	mov	r8,0
80006446:	f3 68 00 18 	st.b	r9[24],r8
8000644a:	c3 d8       	rjmp	800064c4 <i2c_int_handler_i2c0+0x138>
		}
	}
	// this is a TXRDY
	else if (status & AVR32_TWIM_SR_TXRDY_MASK) {
8000644c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006450:	e2 18 00 02 	andl	r8,0x2,COH
80006454:	c3 80       	breq	800064c4 <i2c_int_handler_i2c0+0x138>
		
		// get data from transmit data block
		if (current_transfer->data_index < current_transfer->data_size) {
80006456:	ec f8 00 a4 	ld.w	r8,r6[164]
8000645a:	70 08       	ld.w	r8,r8[0x0]
8000645c:	70 59       	ld.w	r9,r8[0x14]
8000645e:	ec f8 00 a4 	ld.w	r8,r6[164]
80006462:	70 08       	ld.w	r8,r8[0x0]
80006464:	70 48       	ld.w	r8,r8[0x10]
80006466:	10 39       	cp.w	r9,r8
80006468:	c1 72       	brcc	80006496 <i2c_int_handler_i2c0+0x10a>
			
			// put the byte in the Transmit Holding Register
			twim->thr = current_transfer->data[current_transfer->data_index];
8000646a:	ec f8 00 a4 	ld.w	r8,r6[164]
8000646e:	70 08       	ld.w	r8,r8[0x0]
80006470:	70 39       	ld.w	r9,r8[0xc]
80006472:	ec f8 00 a4 	ld.w	r8,r6[164]
80006476:	70 08       	ld.w	r8,r8[0x0]
80006478:	70 58       	ld.w	r8,r8[0x14]
8000647a:	f2 08 00 08 	add	r8,r9,r8
8000647e:	11 88       	ld.ub	r8,r8[0x0]
80006480:	10 99       	mov	r9,r8
80006482:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006486:	91 69       	st.w	r8[0x18],r9
			current_transfer->data_index++;
80006488:	ec f8 00 a4 	ld.w	r8,r6[164]
8000648c:	70 08       	ld.w	r8,r8[0x0]
8000648e:	70 59       	ld.w	r9,r8[0x14]
80006490:	2f f9       	sub	r9,-1
80006492:	91 59       	st.w	r8[0x14],r9
80006494:	c1 88       	rjmp	800064c4 <i2c_int_handler_i2c0+0x138>
			
		} else { //nothing more to write
			twim->idr = AVR32_TWIM_IDR_TXRDY_MASK;
80006496:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000649a:	30 29       	mov	r9,2
8000649c:	91 99       	st.w	r8[0x24],r9
			
			if (current_transfer->direction==I2C_WRITE1_THEN_READ) {
8000649e:	ec f8 00 a4 	ld.w	r8,r6[164]
800064a2:	70 08       	ld.w	r8,r8[0x0]
800064a4:	f1 39 00 08 	ld.ub	r9,r8[8]
800064a8:	30 28       	mov	r8,2
800064aa:	f0 09 18 00 	cp.b	r9,r8
800064ae:	c0 b0       	breq	800064c4 <i2c_int_handler_i2c0+0x138>
				// reading should already be set up in next command register...
				
			}	else  { // all done
				twim->cr = AVR32_TWIM_CR_MDIS_MASK;
800064b0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800064b4:	30 29       	mov	r9,2
800064b6:	91 09       	st.w	r8[0x0],r9
				// set busy to false
				current_transfer->transfer_in_progress=false;				
800064b8:	ec f8 00 a4 	ld.w	r8,r6[164]
800064bc:	70 09       	ld.w	r9,r8[0x0]
800064be:	30 08       	mov	r8,0
800064c0:	f3 68 00 18 	st.b	r9[24],r8
   // to process data, and maybe add some more data
//   schedule[0][current_schedule_slot[0]].transfer_in_progress=0;
   
//   if (schedule[0][current_schedule_slot[0]].callback) schedule[0][current_schedule_slot[0]].callback;
   //putstring(&AVR32_USART0, "!");
}
800064c4:	2f ed       	sub	sp,-8
800064c6:	e3 cd 40 c0 	ldm	sp++,r6-r7,lr
800064ca:	d6 03       	rete
800064cc:	80 00       	ld.sh	r0,r0[0x0]
800064ce:	62 1a       	ld.w	r10,r1[0x4]

800064d0 <init_i2c>:

//}



int init_i2c(unsigned char i2c_device) {
800064d0:	eb cd 40 c0 	pushm	r6-r7,lr
800064d4:	1a 97       	mov	r7,sp
800064d6:	20 4d       	sub	sp,16
800064d8:	4b 66       	lddpc	r6,800065b0 <init_i2c+0xe0>
800064da:	1e 26       	rsub	r6,pc
800064dc:	18 98       	mov	r8,r12
800064de:	ef 68 ff f0 	st.b	r7[-16],r8
	int i;
	volatile avr32_twim_t *twim;
	switch (i2c_device) {
800064e2:	ef 38 ff f0 	ld.ub	r8,r7[-16]
800064e6:	58 08       	cp.w	r8,0
800064e8:	c0 40       	breq	800064f0 <init_i2c+0x20>
800064ea:	58 18       	cp.w	r8,1
800064ec:	c1 60       	breq	80006518 <init_i2c+0x48>
800064ee:	c2 28       	rjmp	80006532 <init_i2c+0x62>
	case 0: 
		twim=&AVR32_TWIM0;
800064f0:	fe 78 38 00 	mov	r8,-51200
800064f4:	ef 48 ff f8 	st.w	r7[-8],r8
		// Register PDCA IRQ interrupt.
		INTC_register_interrupt( (__int_handler) &i2c_int_handler_i2c0, AVR32_TWIM0_IRQ, AVR32_INTC_INT1);
800064f8:	30 1a       	mov	r10,1
800064fa:	e0 6b 03 20 	mov	r11,800
800064fe:	fe cc 01 72 	sub	r12,pc,370
80006502:	f0 16 00 3c 	mcall	r6[240]
		gpio_enable_module_pin(AVR32_TWIMS0_TWCK_0_0_PIN, AVR32_TWIMS0_TWCK_0_0_FUNCTION);
80006506:	30 0b       	mov	r11,0
80006508:	34 3c       	mov	r12,67
8000650a:	f0 16 00 3d 	mcall	r6[244]
		gpio_enable_module_pin(AVR32_TWIMS0_TWD_0_0_PIN, AVR32_TWIMS0_TWD_0_0_FUNCTION);
8000650e:	30 0b       	mov	r11,0
80006510:	34 2c       	mov	r12,66
80006512:	f0 16 00 3d 	mcall	r6[244]

	break;
80006516:	c1 08       	rjmp	80006536 <init_i2c+0x66>
	case 1:
		twim=&AVR32_TWIM1;// Register PDCA IRQ interrupt.
80006518:	fe 78 3c 00 	mov	r8,-50176
8000651c:	ef 48 ff f8 	st.w	r7[-8],r8
//		INTC_register_interrupt( (__int_handler) &i2c_int_handler_i2c1, AVR32_TWIM1_IRQ, AVR32_INTC_INT1);
		gpio_enable_module_pin(AVR32_TWIMS1_TWCK_0_0_PIN, AVR32_TWIMS1_TWCK_0_0_FUNCTION);
80006520:	30 0b       	mov	r11,0
80006522:	34 5c       	mov	r12,69
80006524:	f0 16 00 3d 	mcall	r6[244]
		gpio_enable_module_pin(AVR32_TWIMS1_TWD_0_0_PIN, AVR32_TWIMS1_TWD_0_0_FUNCTION);
80006528:	30 0b       	mov	r11,0
8000652a:	34 4c       	mov	r12,68
8000652c:	f0 16 00 3d 	mcall	r6[244]
		//gpio_enable_pin_pull_up(AVR32_TWIMS1_TWCK_0_0_PIN);
		//gpio_enable_pin_pull_up(AVR32_TWIMS1_TWD_0_0_PIN);
	break;
80006530:	c0 38       	rjmp	80006536 <init_i2c+0x66>
	default: // invalid device ID
		return -1;
80006532:	3f f8       	mov	r8,-1
80006534:	c3 a8       	rjmp	800065a8 <init_i2c+0xd8>
	}		
				
	bool global_interrupt_enabled = cpu_irq_is_enabled ();
80006536:	e1 b8 00 00 	mfsr	r8,0x0
8000653a:	10 9c       	mov	r12,r8
8000653c:	c8 ae       	rcall	80006250 <cpu_irq_is_enabled_flags>
8000653e:	18 98       	mov	r8,r12
80006540:	ef 68 ff ff 	st.b	r7[-1],r8
	// Disable TWI interrupts
	if (global_interrupt_enabled) {
80006544:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80006548:	30 08       	mov	r8,0
8000654a:	f0 09 18 00 	cp.b	r9,r8
8000654e:	c0 20       	breq	80006552 <init_i2c+0x82>
		cpu_irq_disable ();
80006550:	d3 03       	ssrf	0x10
	}
	twim->idr = ~0UL;
80006552:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006556:	3f f9       	mov	r9,-1
80006558:	91 99       	st.w	r8[0x24],r9
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
8000655a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000655e:	30 19       	mov	r9,1
80006560:	91 09       	st.w	r8[0x0],r9
	// Reset TWI
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
80006562:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006566:	e0 69 00 80 	mov	r9,128
8000656a:	91 09       	st.w	r8[0x0],r9
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
8000656c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006570:	30 29       	mov	r9,2
80006572:	91 09       	st.w	r8[0x0],r9
	
	
	if (global_interrupt_enabled) {
80006574:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80006578:	30 08       	mov	r8,0
8000657a:	f0 09 18 00 	cp.b	r9,r8
8000657e:	c0 20       	breq	80006582 <init_i2c+0xb2>
		cpu_irq_enable ();
80006580:	d5 03       	csrf	0x10
	}
	// Clear SR
	twim->scr = ~0UL;
80006582:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006586:	3f f9       	mov	r9,-1
80006588:	91 b9       	st.w	r8[0x2c],r9
//	irq_register_handler(twim_master_interrupt_handler,
//			CONF_TWIM_IRQ_LINE, CONF_TWIM_IRQ_LEVEL);
//	cpu_irq_restore(flags);
	
	// Select the speed
	if (twim_set_speed(twim, 400000, sysclk_get_pba_hz()) == 
8000658a:	cb 3e       	rcall	800062f0 <sysclk_get_pba_hz>
8000658c:	18 98       	mov	r8,r12
8000658e:	10 9a       	mov	r10,r8
80006590:	e6 6b 1a 80 	mov	r11,400000
80006594:	ee fc ff f8 	ld.w	r12,r7[-8]
80006598:	f0 16 00 94 	mcall	r6[592]
8000659c:	18 98       	mov	r8,r12
8000659e:	5b 88       	cp.w	r8,-8
800065a0:	c0 31       	brne	800065a6 <init_i2c+0xd6>
			ERR_INVALID_ARG) {
		
		return ERR_INVALID_ARG;
800065a2:	3f 88       	mov	r8,-8
800065a4:	c0 28       	rjmp	800065a8 <init_i2c+0xd8>
	}
	return STATUS_OK;				
800065a6:	30 08       	mov	r8,0

}
800065a8:	10 9c       	mov	r12,r8
800065aa:	2f cd       	sub	sp,-16
800065ac:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800065b0:	80 00       	ld.sh	r0,r0[0x0]
800065b2:	63 5e       	ld.w	lr,r1[0x54]

800065b4 <i2c_reset>:



char i2c_reset(unsigned char i2c_device) {
800065b4:	eb cd 40 c0 	pushm	r6-r7,lr
800065b8:	1a 97       	mov	r7,sp
800065ba:	20 3d       	sub	sp,12
800065bc:	4a 26       	lddpc	r6,80006644 <i2c_reset+0x90>
800065be:	1e 26       	rsub	r6,pc
800065c0:	18 98       	mov	r8,r12
800065c2:	ef 68 ff f4 	st.b	r7[-12],r8
	volatile avr32_twim_t *twim;
	switch (i2c_device) {
800065c6:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800065ca:	58 08       	cp.w	r8,0
800065cc:	c0 40       	breq	800065d4 <i2c_reset+0x20>
800065ce:	58 18       	cp.w	r8,1
800065d0:	c0 70       	breq	800065de <i2c_reset+0x2a>
800065d2:	c0 b8       	rjmp	800065e8 <i2c_reset+0x34>
	case 0: 
		twim=&AVR32_TWIM0;
800065d4:	fe 78 38 00 	mov	r8,-51200
800065d8:	ef 48 ff f8 	st.w	r7[-8],r8
	break;
800065dc:	c0 a8       	rjmp	800065f0 <i2c_reset+0x3c>
	case 1:
		twim=&AVR32_TWIM1;
800065de:	fe 78 3c 00 	mov	r8,-50176
800065e2:	ef 48 ff f8 	st.w	r7[-8],r8
	break;
800065e6:	c0 58       	rjmp	800065f0 <i2c_reset+0x3c>
	default: // invalid device ID
		return -1;
800065e8:	e0 68 00 ff 	mov	r8,255
	if (global_interrupt_enabled) {
		cpu_irq_enable ();
	}
	// Clear SR
	twim->scr = ~0UL;
}
800065ec:	10 9c       	mov	r12,r8
800065ee:	c2 78       	rjmp	8000663c <i2c_reset+0x88>
		twim=&AVR32_TWIM1;
	break;
	default: // invalid device ID
		return -1;
	}		
	bool global_interrupt_enabled = cpu_irq_is_enabled ();
800065f0:	e1 b8 00 00 	mfsr	r8,0x0
800065f4:	10 9c       	mov	r12,r8
800065f6:	c2 de       	rcall	80006250 <cpu_irq_is_enabled_flags>
800065f8:	18 98       	mov	r8,r12
800065fa:	ef 68 ff ff 	st.b	r7[-1],r8
	// Disable TWI interrupts
	if (global_interrupt_enabled) {
800065fe:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80006602:	30 08       	mov	r8,0
80006604:	f0 09 18 00 	cp.b	r9,r8
80006608:	c0 20       	breq	8000660c <i2c_reset+0x58>
		cpu_irq_disable ();
8000660a:	d3 03       	ssrf	0x10
	}
	twim->idr = ~0UL;
8000660c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006610:	3f f9       	mov	r9,-1
80006612:	91 99       	st.w	r8[0x24],r9
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
80006614:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006618:	30 19       	mov	r9,1
8000661a:	91 09       	st.w	r8[0x0],r9
	// Reset TWI
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
8000661c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006620:	e0 69 00 80 	mov	r9,128
80006624:	91 09       	st.w	r8[0x0],r9
	if (global_interrupt_enabled) {
80006626:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000662a:	30 08       	mov	r8,0
8000662c:	f0 09 18 00 	cp.b	r9,r8
80006630:	c0 20       	breq	80006634 <i2c_reset+0x80>
		cpu_irq_enable ();
80006632:	d5 03       	csrf	0x10
	}
	// Clear SR
	twim->scr = ~0UL;
80006634:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006638:	3f f9       	mov	r9,-1
8000663a:	91 b9       	st.w	r8[0x2c],r9
}
8000663c:	2f dd       	sub	sp,-12
8000663e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80006642:	00 00       	add	r0,r0
80006644:	80 00       	ld.sh	r0,r0[0x0]
80006646:	64 42       	ld.w	r2,r2[0x10]

80006648 <i2c_trigger_request>:


char i2c_trigger_request(unsigned char i2c_device, i2c_packet_t *transfer) {
80006648:	eb cd 40 c0 	pushm	r6-r7,lr
8000664c:	1a 97       	mov	r7,sp
8000664e:	20 4d       	sub	sp,16
80006650:	4d 96       	lddpc	r6,800067b4 <i2c_trigger_request+0x16c>
80006652:	1e 26       	rsub	r6,pc
80006654:	18 98       	mov	r8,r12
80006656:	ef 4b ff f0 	st.w	r7[-16],r11
8000665a:	ef 68 ff f4 	st.b	r7[-12],r8
	// initiate transfer of given request
	// set up DMA channel
	volatile avr32_twim_t *twim;
	
	bool global_interrupt_enabled = cpu_irq_is_enabled ();
8000665e:	e1 b8 00 00 	mfsr	r8,0x0
80006662:	10 9c       	mov	r12,r8
80006664:	fe b0 fd f6 	rcall	80006250 <cpu_irq_is_enabled_flags>
80006668:	18 98       	mov	r8,r12
8000666a:	ef 68 ff ff 	st.b	r7[-1],r8
	if (global_interrupt_enabled) {
8000666e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80006672:	30 08       	mov	r8,0
80006674:	f0 09 18 00 	cp.b	r9,r8
80006678:	c0 20       	breq	8000667c <i2c_trigger_request+0x34>
		cpu_irq_disable ();
8000667a:	d3 03       	ssrf	0x10
	}
	
	switch (i2c_device) {
8000667c:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80006680:	58 08       	cp.w	r8,0
80006682:	c0 40       	breq	8000668a <i2c_trigger_request+0x42>
80006684:	58 18       	cp.w	r8,1
80006686:	c2 c0       	breq	800066de <i2c_trigger_request+0x96>
80006688:	c5 68       	rjmp	80006734 <i2c_trigger_request+0xec>
	case 0: 
		twim=&AVR32_TWIM0;
8000668a:	fe 78 38 00 	mov	r8,-51200
8000668e:	ef 48 ff f8 	st.w	r7[-8],r8
		twim->cr = AVR32_TWIM_CR_MEN_MASK;
80006692:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006696:	30 19       	mov	r9,1
80006698:	91 09       	st.w	r8[0x0],r9
		twim->cr = AVR32_TWIM_CR_SWRST_MASK;
8000669a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000669e:	e0 69 00 80 	mov	r9,128
800066a2:	91 09       	st.w	r8[0x0],r9
		twim->cr = AVR32_TWIM_CR_MDIS_MASK;
800066a4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800066a8:	30 29       	mov	r9,2
800066aa:	91 09       	st.w	r8[0x0],r9
		twim->scr = ~0UL;
800066ac:	ee f8 ff f8 	ld.w	r8,r7[-8]
800066b0:	3f f9       	mov	r9,-1
800066b2:	91 b9       	st.w	r8[0x2c],r9
		// Clear the interrupt flags
		twim->idr = ~0UL;
800066b4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800066b8:	3f f9       	mov	r9,-1
800066ba:	91 99       	st.w	r8[0x24],r9
		if (twim_set_speed(twim, transfer->i2c_speed, sysclk_get_pba_hz()) == 
800066bc:	c1 ae       	rcall	800062f0 <sysclk_get_pba_hz>
800066be:	18 99       	mov	r9,r12
800066c0:	ee f8 ff f0 	ld.w	r8,r7[-16]
800066c4:	70 18       	ld.w	r8,r8[0x4]
800066c6:	12 9a       	mov	r10,r9
800066c8:	10 9b       	mov	r11,r8
800066ca:	ee fc ff f8 	ld.w	r12,r7[-8]
800066ce:	f0 16 00 94 	mcall	r6[592]
800066d2:	18 98       	mov	r8,r12
800066d4:	5b 88       	cp.w	r8,-8
800066d6:	c3 21       	brne	8000673a <i2c_trigger_request+0xf2>
			ERR_INVALID_ARG) {
			return ERR_INVALID_ARG;
800066d8:	e0 68 00 f8 	mov	r8,248
800066dc:	c6 88       	rjmp	800067ac <i2c_trigger_request+0x164>
		//pdca_enable_interrupt_transfer_error(TWI0_DMA_CH);
		
		
		break;
	case 1:
		twim=&AVR32_TWIM1;
800066de:	fe 78 3c 00 	mov	r8,-50176
800066e2:	ef 48 ff f8 	st.w	r7[-8],r8
		twim->cr = AVR32_TWIM_CR_MEN_MASK;
800066e6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800066ea:	30 19       	mov	r9,1
800066ec:	91 09       	st.w	r8[0x0],r9
		twim->cr = AVR32_TWIM_CR_SWRST_MASK;
800066ee:	ee f8 ff f8 	ld.w	r8,r7[-8]
800066f2:	e0 69 00 80 	mov	r9,128
800066f6:	91 09       	st.w	r8[0x0],r9
		twim->cr = AVR32_TWIM_CR_MDIS_MASK;
800066f8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800066fc:	30 29       	mov	r9,2
800066fe:	91 09       	st.w	r8[0x0],r9
		twim->scr = ~0UL;
80006700:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006704:	3f f9       	mov	r9,-1
80006706:	91 b9       	st.w	r8[0x2c],r9
		// Clear the interrupt flags
		twim->idr = ~0UL;
80006708:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000670c:	3f f9       	mov	r9,-1
8000670e:	91 99       	st.w	r8[0x24],r9
		if (twim_set_speed(twim, transfer->i2c_speed, sysclk_get_pba_hz()) ==
80006710:	fe b0 fd f0 	rcall	800062f0 <sysclk_get_pba_hz>
80006714:	18 99       	mov	r9,r12
80006716:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000671a:	70 18       	ld.w	r8,r8[0x4]
8000671c:	12 9a       	mov	r10,r9
8000671e:	10 9b       	mov	r11,r8
80006720:	ee fc ff f8 	ld.w	r12,r7[-8]
80006724:	f0 16 00 94 	mcall	r6[592]
80006728:	18 98       	mov	r8,r12
8000672a:	5b 88       	cp.w	r8,-8
8000672c:	c0 91       	brne	8000673e <i2c_trigger_request+0xf6>
		ERR_INVALID_ARG) {
			return ERR_INVALID_ARG;
8000672e:	e0 68 00 f8 	mov	r8,248
80006732:	c3 d8       	rjmp	800067ac <i2c_trigger_request+0x164>
		}
	break;
	default: // invalid device ID
		return -1;
80006734:	e0 68 00 ff 	mov	r8,255
80006738:	c3 a8       	rjmp	800067ac <i2c_trigger_request+0x164>
		// the whole block was received
		
		//pdca_enable_interrupt_transfer_error(TWI0_DMA_CH);
		
		
		break;
8000673a:	d7 03       	nop
8000673c:	c0 28       	rjmp	80006740 <i2c_trigger_request+0xf8>
		twim->idr = ~0UL;
		if (twim_set_speed(twim, transfer->i2c_speed, sysclk_get_pba_hz()) ==
		ERR_INVALID_ARG) {
			return ERR_INVALID_ARG;
		}
	break;
8000673e:	d7 03       	nop
			twim->thr=transfer->write_then_read_preamble;
			twim->cr = AVR32_TWIM_CR_MEN_MASK;
			
			break;	
		case I2C_WRITE:
 			twim->cmdr = (transfer->slave_address << AVR32_TWIM_CMDR_SADR_OFFSET)
80006740:	ee f8 ff f0 	ld.w	r8,r7[-16]
80006744:	11 88       	ld.ub	r8,r8[0x0]
80006746:	a1 78       	lsl	r8,0x1
 						| ((transfer->data_size) << AVR32_TWIM_CMDR_NBYTES_OFFSET)
 						| (AVR32_TWIM_CMDR_VALID_MASK)
80006748:	10 99       	mov	r9,r8
			twim->cr = AVR32_TWIM_CR_MEN_MASK;
			
			break;	
		case I2C_WRITE:
 			twim->cmdr = (transfer->slave_address << AVR32_TWIM_CMDR_SADR_OFFSET)
 						| ((transfer->data_size) << AVR32_TWIM_CMDR_NBYTES_OFFSET)
8000674a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000674e:	70 48       	ld.w	r8,r8[0x10]
80006750:	b1 68       	lsl	r8,0x10
 						| (AVR32_TWIM_CMDR_VALID_MASK)
80006752:	f3 e8 10 08 	or	r8,r9,r8
			twim->thr=transfer->write_then_read_preamble;
			twim->cr = AVR32_TWIM_CR_MEN_MASK;
			
			break;	
		case I2C_WRITE:
 			twim->cmdr = (transfer->slave_address << AVR32_TWIM_CMDR_SADR_OFFSET)
80006756:	10 99       	mov	r9,r8
80006758:	e8 19 e0 00 	orl	r9,0xe000
8000675c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006760:	91 39       	st.w	r8[0xc],r9
 						| ((transfer->data_size) << AVR32_TWIM_CMDR_NBYTES_OFFSET)
 						| (AVR32_TWIM_CMDR_VALID_MASK)
 						| (AVR32_TWIM_CMDR_START_MASK)
 						| (AVR32_TWIM_CMDR_STOP_MASK)					
 						;
			twim->ncmdr=0;						;	
80006762:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006766:	30 09       	mov	r9,0
80006768:	91 49       	st.w	r8[0x10],r9
			twim->ier = AVR32_TWIM_IER_NAK_MASK |  AVR32_TWIM_IER_TXRDY_MASK;
8000676a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000676e:	e0 69 03 02 	mov	r9,770
80006772:	91 89       	st.w	r8[0x20],r9
			
		break;	
	}		
	// start transfer
	
	current_transfer=transfer;
80006774:	ec f8 00 a4 	ld.w	r8,r6[164]
80006778:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000677c:	91 09       	st.w	r8[0x0],r9
	current_transfer->transfer_in_progress=1;
8000677e:	ec f8 00 a4 	ld.w	r8,r6[164]
80006782:	70 09       	ld.w	r9,r8[0x0]
80006784:	30 18       	mov	r8,1
80006786:	f3 68 00 18 	st.b	r9[24],r8
	current_transfer->data_index=0;
8000678a:	ec f8 00 a4 	ld.w	r8,r6[164]
8000678e:	70 08       	ld.w	r8,r8[0x0]
80006790:	30 09       	mov	r9,0
80006792:	91 59       	st.w	r8[0x14],r9
	
	if (global_interrupt_enabled) {
80006794:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80006798:	30 08       	mov	r8,0
8000679a:	f0 09 18 00 	cp.b	r9,r8
8000679e:	c0 20       	breq	800067a2 <i2c_trigger_request+0x15a>
			cpu_irq_enable ();
800067a0:	d5 03       	csrf	0x10
		}	
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
800067a2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800067a6:	30 19       	mov	r9,1
800067a8:	91 09       	st.w	r8[0x0],r9
800067aa:	c0 18       	rjmp	800067ac <i2c_trigger_request+0x164>

}
800067ac:	10 9c       	mov	r12,r8
800067ae:	2f cd       	sub	sp,-16
800067b0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800067b4:	80 00       	ld.sh	r0,r0[0x0]
800067b6:	64 d6       	ld.w	r6,r2[0x34]

800067b8 <init_time_keeper>:


#include "time_keeper.h"


void init_time_keeper() {
800067b8:	eb cd 40 c0 	pushm	r6-r7,lr
800067bc:	1a 97       	mov	r7,sp
800067be:	48 86       	lddpc	r6,800067dc <init_time_keeper+0x24>
800067c0:	1e 26       	rsub	r6,pc
	ast_init_counter(&AVR32_AST, AST_OSC_PB, AST_PRESCALER_SETTING, 0);
800067c2:	30 09       	mov	r9,0
800067c4:	30 5a       	mov	r10,5
800067c6:	30 2b       	mov	r11,2
800067c8:	fe 7c 0c 00 	mov	r12,-62464
800067cc:	f0 16 01 73 	mcall	r6[1484]
	ast_enable(&AVR32_AST);
800067d0:	fe 7c 0c 00 	mov	r12,-62464
800067d4:	f0 16 01 d6 	mcall	r6[1880]
}
800067d8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800067dc:	80 00       	ld.sh	r0,r0[0x0]
800067de:	66 44       	ld.w	r4,r3[0x10]

800067e0 <get_time>:


double get_time(){          // time in seconds since system start
800067e0:	eb cd 40 c0 	pushm	r6-r7,lr
800067e4:	1a 97       	mov	r7,sp
800067e6:	48 a6       	lddpc	r6,8000680c <get_time+0x2c>
800067e8:	1e 26       	rsub	r6,pc
	return ticks_to_seconds(get_time_ticks());
800067ea:	f0 16 00 4c 	mcall	r6[304]
800067ee:	18 98       	mov	r8,r12
800067f0:	10 9c       	mov	r12,r8
800067f2:	f0 16 00 ae 	mcall	r6[696]
800067f6:	18 98       	mov	r8,r12
800067f8:	10 9c       	mov	r12,r8
800067fa:	f0 16 00 02 	mcall	r6[8]
800067fe:	14 98       	mov	r8,r10
80006800:	16 99       	mov	r9,r11
}
80006802:	10 9a       	mov	r10,r8
80006804:	12 9b       	mov	r11,r9
80006806:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000680a:	00 00       	add	r0,r0
8000680c:	80 00       	ld.sh	r0,r0[0x0]
8000680e:	66 6c       	ld.w	r12,r3[0x18]

80006810 <get_millis>:
uint32_t get_millis() {     //milliseconds since system start
80006810:	eb cd 40 c0 	pushm	r6-r7,lr
80006814:	1a 97       	mov	r7,sp
80006816:	48 96       	lddpc	r6,80006838 <get_millis+0x28>
80006818:	1e 26       	rsub	r6,pc
	return get_time_ticks()/1000; /// (TK_AST_FREQUENCY/1000);
8000681a:	f0 16 00 4c 	mcall	r6[304]
8000681e:	18 99       	mov	r9,r12
80006820:	e0 68 4d d3 	mov	r8,19923
80006824:	ea 18 10 62 	orh	r8,0x1062
80006828:	f2 08 06 48 	mulu.d	r8,r9,r8
8000682c:	f2 08 16 06 	lsr	r8,r9,0x6
}	
80006830:	10 9c       	mov	r12,r8
80006832:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80006836:	00 00       	add	r0,r0
80006838:	80 00       	ld.sh	r0,r0[0x0]
8000683a:	66 9c       	ld.w	r12,r3[0x24]

8000683c <get_micros>:
uint32_t get_micros() {     // microseconds since system start. Will run over after an hour.
8000683c:	eb cd 40 c0 	pushm	r6-r7,lr
80006840:	1a 97       	mov	r7,sp
80006842:	48 56       	lddpc	r6,80006854 <get_micros+0x18>
80006844:	1e 26       	rsub	r6,pc
	return get_time_ticks()* (1000000/TK_AST_FREQUENCY);
80006846:	f0 16 00 4c 	mcall	r6[304]
8000684a:	18 98       	mov	r8,r12
}	
8000684c:	10 9c       	mov	r12,r8
8000684e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80006852:	00 00       	add	r0,r0
80006854:	80 00       	ld.sh	r0,r0[0x0]
80006856:	66 c8       	ld.w	r8,r3[0x30]

80006858 <get_time_ticks>:

uint32_t get_time_ticks(){ //raw timer ticks
80006858:	eb cd 40 c0 	pushm	r6-r7,lr
8000685c:	1a 97       	mov	r7,sp
8000685e:	48 66       	lddpc	r6,80006874 <get_time_ticks+0x1c>
80006860:	1e 26       	rsub	r6,pc
	return ast_get_counter_value(&AVR32_AST);
80006862:	fe 7c 0c 00 	mov	r12,-62464
80006866:	f0 16 02 08 	mcall	r6[2080]
8000686a:	18 98       	mov	r8,r12
}
8000686c:	10 9c       	mov	r12,r8
8000686e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80006872:	00 00       	add	r0,r0
80006874:	80 00       	ld.sh	r0,r0[0x0]
80006876:	66 e4       	ld.w	r4,r3[0x38]

80006878 <ticks_to_seconds>:

float ticks_to_seconds(uint32_t timer_ticks){
80006878:	eb cd 40 c0 	pushm	r6-r7,lr
8000687c:	1a 97       	mov	r7,sp
8000687e:	20 1d       	sub	sp,4
80006880:	48 d6       	lddpc	r6,800068b4 <ticks_to_seconds+0x3c>
80006882:	1e 26       	rsub	r6,pc
80006884:	ef 4c ff fc 	st.w	r7[-4],r12
	return ((double)timer_ticks/(double)TK_AST_FREQUENCY);
80006888:	ee fc ff fc 	ld.w	r12,r7[-4]
8000688c:	f0 16 00 4e 	mcall	r6[312]
80006890:	30 08       	mov	r8,0
80006892:	e0 69 84 80 	mov	r9,33920
80006896:	ea 19 41 2e 	orh	r9,0x412e
8000689a:	f0 16 00 0c 	mcall	r6[48]
8000689e:	14 98       	mov	r8,r10
800068a0:	16 99       	mov	r9,r11
800068a2:	10 9a       	mov	r10,r8
800068a4:	12 9b       	mov	r11,r9
800068a6:	f0 16 00 09 	mcall	r6[36]
800068aa:	18 98       	mov	r8,r12
}
800068ac:	10 9c       	mov	r12,r8
800068ae:	2f fd       	sub	sp,-4
800068b0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800068b4:	80 00       	ld.sh	r0,r0[0x0]
800068b6:	67 06       	ld.w	r6,r3[0x40]

800068b8 <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
800068b8:	eb cd 40 c0 	pushm	r6-r7,lr
800068bc:	1a 97       	mov	r7,sp
800068be:	20 6d       	sub	sp,24
800068c0:	49 e6       	lddpc	r6,80006938 <interpolate+0x80>
800068c2:	1e 26       	rsub	r6,pc
800068c4:	ef 4c ff f8 	st.w	r7[-8],r12
800068c8:	ef 4b ff f4 	st.w	r7[-12],r11
800068cc:	ef 4a ff f0 	st.w	r7[-16],r10
800068d0:	ef 49 ff ec 	st.w	r7[-20],r9
800068d4:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
800068d8:	ee f9 ff f4 	ld.w	r9,r7[-12]
800068dc:	ee f8 ff f0 	ld.w	r8,r7[-16]
800068e0:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
800068e4:	c0 41       	brne	800068ec <interpolate+0x34>
	{
		return y1;
800068e6:	ee f8 ff ec 	ld.w	r8,r7[-20]
800068ea:	c2 38       	rjmp	80006930 <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
800068ec:	ee f9 ff e8 	ld.w	r9,r7[-24]
800068f0:	ee f8 ff ec 	ld.w	r8,r7[-20]
800068f4:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
800068f8:	ee fa ff f8 	ld.w	r10,r7[-8]
800068fc:	ee f8 ff f4 	ld.w	r8,r7[-12]
80006900:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80006904:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80006908:	ee fa ff f0 	ld.w	r10,r7[-16]
8000690c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80006910:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80006914:	12 9b       	mov	r11,r9
80006916:	10 9c       	mov	r12,r8
80006918:	f0 16 00 08 	mcall	r6[32]
8000691c:	18 98       	mov	r8,r12
8000691e:	10 99       	mov	r9,r8
80006920:	ee f8 ff ec 	ld.w	r8,r7[-20]
80006924:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80006928:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
8000692c:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
80006930:	10 9c       	mov	r12,r8
80006932:	2f ad       	sub	sp,-24
80006934:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80006938:	80 00       	ld.sh	r0,r0[0x0]
8000693a:	67 46       	ld.w	r6,r3[0x50]

8000693c <mav_array_memcpy>:

/*
  like memcpy(), but if src is NULL, do a memset to zero
*/
static void mav_array_memcpy(void *dest, const void *src, size_t n)
{
8000693c:	eb cd 40 c0 	pushm	r6-r7,lr
80006940:	1a 97       	mov	r7,sp
80006942:	20 3d       	sub	sp,12
80006944:	49 06       	lddpc	r6,80006984 <mav_array_memcpy+0x48>
80006946:	1e 26       	rsub	r6,pc
80006948:	ef 4c ff fc 	st.w	r7[-4],r12
8000694c:	ef 4b ff f8 	st.w	r7[-8],r11
80006950:	ef 4a ff f4 	st.w	r7[-12],r10
	if (src == NULL) {
80006954:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006958:	58 08       	cp.w	r8,0
8000695a:	c0 91       	brne	8000696c <mav_array_memcpy+0x30>
		memset(dest, 0, n);
8000695c:	ee fa ff f4 	ld.w	r10,r7[-12]
80006960:	30 0b       	mov	r11,0
80006962:	ee fc ff fc 	ld.w	r12,r7[-4]
80006966:	f0 16 00 30 	mcall	r6[192]
8000696a:	c0 98       	rjmp	8000697c <mav_array_memcpy+0x40>
	} else {
		memcpy(dest, src, n);
8000696c:	ee fa ff f4 	ld.w	r10,r7[-12]
80006970:	ee fb ff f8 	ld.w	r11,r7[-8]
80006974:	ee fc ff fc 	ld.w	r12,r7[-4]
80006978:	f0 16 00 20 	mcall	r6[128]
	}
}
8000697c:	2f dd       	sub	sp,-12
8000697e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80006982:	00 00       	add	r0,r0
80006984:	80 00       	ld.sh	r0,r0[0x0]
80006986:	67 ca       	ld.w	r10,r3[0x70]

80006988 <e_init>:

uint32_t timeLastGpsMsgEstimator;

//----------------------------INITIALISATION------------------------
void e_init()
{
80006988:	eb cd 40 c0 	pushm	r6-r7,lr
8000698c:	1a 97       	mov	r7,sp
8000698e:	fe f6 02 06 	ld.w	r6,pc[518]
80006992:	1e 26       	rsub	r6,pc
	//board=get_board_hardware();
	centralData=get_central_data();
80006994:	f0 16 00 32 	mcall	r6[200]
80006998:	18 99       	mov	r9,r12
8000699a:	ec f8 00 00 	ld.w	r8,r6[0]
8000699e:	91 09       	st.w	r8[0x0],r9
	e_kalman_init(X,INIT_X_P); //e stands for estimator not extended
800069a0:	fc 1b 41 20 	movh	r11,0x4120
800069a4:	30 0c       	mov	r12,0
800069a6:	f0 16 00 ba 	mcall	r6[744]
	e_kalman_init(Y,INIT_Y_P);
800069aa:	fc 1b 41 20 	movh	r11,0x4120
800069ae:	30 1c       	mov	r12,1
800069b0:	f0 16 00 ba 	mcall	r6[744]
	e_kalman_init(Z,INIT_Z_P);
800069b4:	fc 1b 41 20 	movh	r11,0x4120
800069b8:	30 2c       	mov	r12,2
800069ba:	f0 16 00 ba 	mcall	r6[744]
	Q[0][0]=Q_X0;
800069be:	ec fa 00 d8 	ld.w	r10,r6[216]
800069c2:	e0 68 a9 fc 	mov	r8,43516
800069c6:	ea 18 d2 f1 	orh	r8,0xd2f1
800069ca:	e0 69 62 4d 	mov	r9,25165
800069ce:	ea 19 3f 50 	orh	r9,0x3f50
800069d2:	f4 e9 00 00 	st.d	r10[0],r8
	Q[0][1]=Q_X1;
800069d6:	ec fa 00 d8 	ld.w	r10,r6[216]
800069da:	30 08       	mov	r8,0
800069dc:	30 09       	mov	r9,0
800069de:	f4 e9 00 08 	st.d	r10[8],r8
	Q[0][2]=Q_X2;
800069e2:	ec fa 00 d8 	ld.w	r10,r6[216]
800069e6:	30 08       	mov	r8,0
800069e8:	30 09       	mov	r9,0
800069ea:	f4 e9 00 10 	st.d	r10[16],r8
	Q[1][0]=Q_Y0;
800069ee:	ec fa 00 d8 	ld.w	r10,r6[216]
800069f2:	30 08       	mov	r8,0
800069f4:	30 09       	mov	r9,0
800069f6:	f4 e9 00 18 	st.d	r10[24],r8
	Q[1][1]=Q_Y1;
800069fa:	ec fa 00 d8 	ld.w	r10,r6[216]
800069fe:	e0 68 a9 fc 	mov	r8,43516
80006a02:	ea 18 d2 f1 	orh	r8,0xd2f1
80006a06:	e0 69 62 4d 	mov	r9,25165
80006a0a:	ea 19 3f 50 	orh	r9,0x3f50
80006a0e:	f4 e9 00 20 	st.d	r10[32],r8
	Q[1][2]=Q_Y2;
80006a12:	ec fa 00 d8 	ld.w	r10,r6[216]
80006a16:	30 08       	mov	r8,0
80006a18:	30 09       	mov	r9,0
80006a1a:	f4 e9 00 28 	st.d	r10[40],r8
	Q[2][0]=Q_Z0;
80006a1e:	ec fa 00 d8 	ld.w	r10,r6[216]
80006a22:	30 08       	mov	r8,0
80006a24:	30 09       	mov	r9,0
80006a26:	f4 e9 00 30 	st.d	r10[48],r8
	Q[2][1]=Q_Z1;
80006a2a:	ec fa 00 d8 	ld.w	r10,r6[216]
80006a2e:	30 08       	mov	r8,0
80006a30:	30 09       	mov	r9,0
80006a32:	f4 e9 00 38 	st.d	r10[56],r8
	Q[2][2]=Q_Z2;
80006a36:	ec fa 00 d8 	ld.w	r10,r6[216]
80006a3a:	e0 68 a9 fc 	mov	r8,43516
80006a3e:	ea 18 d2 f1 	orh	r8,0xd2f1
80006a42:	e0 69 62 4d 	mov	r9,25165
80006a46:	ea 19 3f 50 	orh	r9,0x3f50
80006a4a:	f4 e9 00 40 	st.d	r10[64],r8
	R[0]=R_X_POS;
80006a4e:	ec fa 01 54 	ld.w	r10,r6[340]
80006a52:	e0 68 b0 21 	mov	r8,45089
80006a56:	ea 18 68 72 	orh	r8,0x6872
80006a5a:	e0 69 ed 91 	mov	r9,60817
80006a5e:	ea 19 3f d8 	orh	r9,0x3fd8
80006a62:	f4 e9 00 00 	st.d	r10[0],r8
	R[1]=R_Y_POS;
80006a66:	ec fa 01 54 	ld.w	r10,r6[340]
80006a6a:	e0 68 a1 62 	mov	r8,41314
80006a6e:	ea 18 34 d6 	orh	r8,0x34d6
80006a72:	e0 69 38 ef 	mov	r9,14575
80006a76:	ea 19 3f e3 	orh	r9,0x3fe3
80006a7a:	f4 e9 00 08 	st.d	r10[8],r8
	R[2]=R_Z_POS;
80006a7e:	ec fa 01 54 	ld.w	r10,r6[340]
80006a82:	e0 68 6e 2f 	mov	r8,28207
80006a86:	ea 18 01 a3 	orh	r8,0x1a3
80006a8a:	e0 69 05 bc 	mov	r9,1468
80006a8e:	ea 19 40 05 	orh	r9,0x4005
80006a92:	f4 e9 00 10 	st.d	r10[16],r8
	
	Q2[0][0]=Q_X0;
80006a96:	ec fa 00 dc 	ld.w	r10,r6[220]
80006a9a:	e0 68 a9 fc 	mov	r8,43516
80006a9e:	ea 18 d2 f1 	orh	r8,0xd2f1
80006aa2:	e0 69 62 4d 	mov	r9,25165
80006aa6:	ea 19 3f 50 	orh	r9,0x3f50
80006aaa:	f4 e9 00 00 	st.d	r10[0],r8
	Q2[0][1]=Q_X1;
80006aae:	ec fa 00 dc 	ld.w	r10,r6[220]
80006ab2:	30 08       	mov	r8,0
80006ab4:	30 09       	mov	r9,0
80006ab6:	f4 e9 00 08 	st.d	r10[8],r8
	Q2[0][2]=Q_X2;
80006aba:	ec fa 00 dc 	ld.w	r10,r6[220]
80006abe:	30 08       	mov	r8,0
80006ac0:	30 09       	mov	r9,0
80006ac2:	f4 e9 00 10 	st.d	r10[16],r8
	Q2[1][0]=Q_Y0;
80006ac6:	ec fa 00 dc 	ld.w	r10,r6[220]
80006aca:	30 08       	mov	r8,0
80006acc:	30 09       	mov	r9,0
80006ace:	f4 e9 00 18 	st.d	r10[24],r8
	Q2[1][1]=Q_Y1;
80006ad2:	ec fa 00 dc 	ld.w	r10,r6[220]
80006ad6:	e0 68 a9 fc 	mov	r8,43516
80006ada:	ea 18 d2 f1 	orh	r8,0xd2f1
80006ade:	e0 69 62 4d 	mov	r9,25165
80006ae2:	ea 19 3f 50 	orh	r9,0x3f50
80006ae6:	f4 e9 00 20 	st.d	r10[32],r8
	Q2[1][2]=Q_Y2;
80006aea:	ec fa 00 dc 	ld.w	r10,r6[220]
80006aee:	30 08       	mov	r8,0
80006af0:	30 09       	mov	r9,0
80006af2:	f4 e9 00 28 	st.d	r10[40],r8
	Q2[2][0]=Q_Z0;
80006af6:	ec fa 00 dc 	ld.w	r10,r6[220]
80006afa:	30 08       	mov	r8,0
80006afc:	30 09       	mov	r9,0
80006afe:	f4 e9 00 30 	st.d	r10[48],r8
	Q2[2][1]=Q_Z1;
80006b02:	ec fa 00 dc 	ld.w	r10,r6[220]
80006b06:	30 08       	mov	r8,0
80006b08:	30 09       	mov	r9,0
80006b0a:	f4 e9 00 38 	st.d	r10[56],r8
	Q2[2][2]=Q_Z2;
80006b0e:	ec fa 00 dc 	ld.w	r10,r6[220]
80006b12:	e0 68 a9 fc 	mov	r8,43516
80006b16:	ea 18 d2 f1 	orh	r8,0xd2f1
80006b1a:	e0 69 62 4d 	mov	r9,25165
80006b1e:	ea 19 3f 50 	orh	r9,0x3f50
80006b22:	f4 e9 00 40 	st.d	r10[64],r8
	R2[0]=R_X_POS;
80006b26:	ec fa 01 50 	ld.w	r10,r6[336]
80006b2a:	e0 68 b0 21 	mov	r8,45089
80006b2e:	ea 18 68 72 	orh	r8,0x6872
80006b32:	e0 69 ed 91 	mov	r9,60817
80006b36:	ea 19 3f d8 	orh	r9,0x3fd8
80006b3a:	f4 e9 00 00 	st.d	r10[0],r8
	R2[1]=R_Y_POS;
80006b3e:	ec fa 01 50 	ld.w	r10,r6[336]
80006b42:	e0 68 a1 62 	mov	r8,41314
80006b46:	ea 18 34 d6 	orh	r8,0x34d6
80006b4a:	e0 69 38 ef 	mov	r9,14575
80006b4e:	ea 19 3f e3 	orh	r9,0x3fe3
80006b52:	f4 e9 00 08 	st.d	r10[8],r8
	R2[2]=R_Z_POS;
80006b56:	ec fa 01 50 	ld.w	r10,r6[336]
80006b5a:	e0 68 6e 2f 	mov	r8,28207
80006b5e:	ea 18 01 a3 	orh	r8,0x1a3
80006b62:	e0 69 05 bc 	mov	r9,1468
80006b66:	ea 19 40 05 	orh	r9,0x4005
80006b6a:	f4 e9 00 10 	st.d	r10[16],r8
	
	centralData->position_estimator.init_gps_position = false;
80006b6e:	ec f8 00 00 	ld.w	r8,r6[0]
80006b72:	70 09       	ld.w	r9,r8[0x0]
80006b74:	30 08       	mov	r8,0
80006b76:	f3 68 0d 64 	st.b	r9[3428],r8
	
	timeLastGpsMsgEstimator = 0;
80006b7a:	ec f8 02 6c 	ld.w	r8,r6[620]
80006b7e:	30 09       	mov	r9,0
80006b80:	91 09       	st.w	r8[0x0],r9
	
	filter_init_delta_t = false;
80006b82:	ec f9 02 b0 	ld.w	r9,r6[688]
80006b86:	30 08       	mov	r8,0
80006b88:	b2 88       	st.b	r9[0x0],r8
	
	init_pos_gps_estimator();
80006b8a:	f0 16 01 0c 	mcall	r6[1072]
}
80006b8e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80006b92:	00 00       	add	r0,r0
80006b94:	80 00       	ld.sh	r0,r0[0x0]
80006b96:	68 16       	ld.w	r6,r4[0x4]
80006b98:	47 50       	lddsp	r0,sp[0x1d4]
80006b9a:	53 20       	stdsp	sp[0xc8],r0
80006b9c:	70 6f       	ld.w	pc,r8[0x18]
80006b9e:	73 69       	ld.w	r9,r9[0x58]
80006ba0:	74 69       	ld.w	r9,r10[0x18]
80006ba2:	6f 6e       	ld.w	lr,r7[0x58]
80006ba4:	20 69       	sub	r9,6
80006ba6:	6e 69       	ld.w	r9,r7[0x18]
80006ba8:	74 69       	ld.w	r9,r10[0x18]
80006baa:	61 6c       	ld.w	r12,r0[0x58]
80006bac:	69 7a       	ld.w	r10,r4[0x5c]
80006bae:	65 64       	ld.w	r4,r2[0x58]
80006bb0:	21 0a       	sub	r10,16
	...

80006bb4 <init_pos_gps_estimator>:

void init_pos_gps_estimator()
{
80006bb4:	eb cd 40 c0 	pushm	r6-r7,lr
80006bb8:	1a 97       	mov	r7,sp
80006bba:	49 f6       	lddpc	r6,80006c34 <init_pos_gps_estimator+0x80>
80006bbc:	1e 26       	rsub	r6,pc
	if (newValidGpsMsg(&timeLastGpsMsgEstimator) && (!(centralData->position_estimator.init_gps_position)))
80006bbe:	ec fc 02 6c 	ld.w	r12,r6[620]
80006bc2:	f0 16 00 8b 	mcall	r6[556]
80006bc6:	18 98       	mov	r8,r12
80006bc8:	58 08       	cp.w	r8,0
80006bca:	c3 20       	breq	80006c2e <init_pos_gps_estimator+0x7a>
80006bcc:	ec f8 00 00 	ld.w	r8,r6[0]
80006bd0:	70 08       	ld.w	r8,r8[0x0]
80006bd2:	f1 38 0d 64 	ld.ub	r8,r8[3428]
80006bd6:	ec 18 00 01 	eorl	r8,0x1
80006bda:	5c 58       	castu.b	r8
80006bdc:	c2 90       	breq	80006c2e <init_pos_gps_estimator+0x7a>
	{
		centralData->position_estimator.init_gps_position = true;
80006bde:	ec f8 00 00 	ld.w	r8,r6[0]
80006be2:	70 09       	ld.w	r9,r8[0x0]
80006be4:	30 18       	mov	r8,1
80006be6:	f3 68 0d 64 	st.b	r9[3428],r8
		
		centralData->position_estimator.localPosition.origin.longitude = centralData->GPS_data.longitude;
80006bea:	ec f8 00 00 	ld.w	r8,r6[0]
80006bee:	70 0a       	ld.w	r10,r8[0x0]
80006bf0:	ec f8 00 00 	ld.w	r8,r6[0]
80006bf4:	70 08       	ld.w	r8,r8[0x0]
80006bf6:	f0 e8 0b 10 	ld.d	r8,r8[2832]
80006bfa:	f4 e9 0d ac 	st.d	r10[3500],r8
		centralData->position_estimator.localPosition.origin.latitude = centralData->GPS_data.latitude;
80006bfe:	ec f8 00 00 	ld.w	r8,r6[0]
80006c02:	70 0a       	ld.w	r10,r8[0x0]
80006c04:	ec f8 00 00 	ld.w	r8,r6[0]
80006c08:	70 08       	ld.w	r8,r8[0x0]
80006c0a:	f0 e8 0b 08 	ld.d	r8,r8[2824]
80006c0e:	f4 e9 0d b4 	st.d	r10[3508],r8
		centralData->position_estimator.localPosition.origin.altitude = centralData->GPS_data.altitude;
80006c12:	ec f8 00 00 	ld.w	r8,r6[0]
80006c16:	70 08       	ld.w	r8,r8[0x0]
80006c18:	ec f9 00 00 	ld.w	r9,r6[0]
80006c1c:	72 09       	ld.w	r9,r9[0x0]
80006c1e:	f2 f9 0b 18 	ld.w	r9,r9[2840]
80006c22:	f1 49 0d bc 	st.w	r8[3516],r9
		
		dbg_print("GPS position initialized!\n");
80006c26:	fe cc 00 8e 	sub	r12,pc,142
80006c2a:	f0 16 00 01 	mcall	r6[4]
	}
}
80006c2e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80006c32:	00 00       	add	r0,r0
80006c34:	80 00       	ld.sh	r0,r0[0x0]
80006c36:	6a 40       	ld.w	r0,r5[0x10]

80006c38 <e_kalman_init>:

void e_kalman_init (int axis,float init_p) // axis = Z, X or Y
{
80006c38:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
80006c3c:	1a 97       	mov	r7,sp
80006c3e:	20 4d       	sub	sp,16
80006c40:	4d e6       	lddpc	r6,80006db8 <e_kalman_init+0x180>
80006c42:	1e 26       	rsub	r6,pc
80006c44:	ef 4c ff f4 	st.w	r7[-12],r12
80006c48:	ef 4b ff f0 	st.w	r7[-16],r11
	int i, j;
	
	centralData->estimation.state[axis][POSITION] = 0; // Differential par rapport au point de depart
80006c4c:	ec f8 00 00 	ld.w	r8,r6[0]
80006c50:	70 0a       	ld.w	r10,r8[0x0]
80006c52:	ee f9 ff f4 	ld.w	r9,r7[-12]
80006c56:	12 98       	mov	r8,r9
80006c58:	a1 78       	lsl	r8,0x1
80006c5a:	12 08       	add	r8,r9
80006c5c:	a3 78       	lsl	r8,0x3
80006c5e:	f4 08 00 08 	add	r8,r10,r8
80006c62:	f0 ca f4 a4 	sub	r10,r8,-2908
80006c66:	30 08       	mov	r8,0
80006c68:	30 09       	mov	r9,0
80006c6a:	f4 e9 00 00 	st.d	r10[0],r8
	centralData->estimation.state[axis][SPEED] = 0;
80006c6e:	ec f8 00 00 	ld.w	r8,r6[0]
80006c72:	70 0a       	ld.w	r10,r8[0x0]
80006c74:	ee f9 ff f4 	ld.w	r9,r7[-12]
80006c78:	12 98       	mov	r8,r9
80006c7a:	a1 78       	lsl	r8,0x1
80006c7c:	12 08       	add	r8,r9
80006c7e:	2f f8       	sub	r8,-1
80006c80:	a3 78       	lsl	r8,0x3
80006c82:	f4 08 00 08 	add	r8,r10,r8
80006c86:	30 0a       	mov	r10,0
80006c88:	30 0b       	mov	r11,0
80006c8a:	f0 eb 0b 5c 	st.d	r8[2908],r10
	
	centralData->estimation.state[axis][BIAIS] = centralData->imu1.attitude.be[axis + ACC_OFFSET];
80006c8e:	ec f8 00 00 	ld.w	r8,r6[0]
80006c92:	70 03       	ld.w	r3,r8[0x0]
80006c94:	ee f5 ff f4 	ld.w	r5,r7[-12]
80006c98:	ec f8 00 00 	ld.w	r8,r6[0]
80006c9c:	70 08       	ld.w	r8,r8[0x0]
80006c9e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80006ca2:	2f d9       	sub	r9,-3
80006ca4:	2f 49       	sub	r9,-12
80006ca6:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80006caa:	10 9c       	mov	r12,r8
80006cac:	f0 16 00 02 	mcall	r6[8]
80006cb0:	0a 98       	mov	r8,r5
80006cb2:	a1 78       	lsl	r8,0x1
80006cb4:	0a 08       	add	r8,r5
80006cb6:	a3 78       	lsl	r8,0x3
80006cb8:	e6 08 00 08 	add	r8,r3,r8
80006cbc:	f0 c8 f4 94 	sub	r8,r8,-2924
80006cc0:	f0 eb 00 00 	st.d	r8[0],r10
	
	for (i=0; i<3; i++)
80006cc4:	30 08       	mov	r8,0
80006cc6:	ef 48 ff f8 	st.w	r7[-8],r8
80006cca:	c6 e8       	rjmp	80006da6 <e_kalman_init+0x16e>
	{
		for (j=0; j<3; j++)
80006ccc:	30 08       	mov	r8,0
80006cce:	ef 48 ff fc 	st.w	r7[-4],r8
80006cd2:	c3 28       	rjmp	80006d36 <e_kalman_init+0xfe>
		{
			P[axis][i][j] = 0.0;
80006cd4:	ee fa ff f4 	ld.w	r10,r7[-12]
80006cd8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006cdc:	ee fc ff fc 	ld.w	r12,r7[-4]
80006ce0:	ec fb 00 18 	ld.w	r11,r6[24]
80006ce4:	10 99       	mov	r9,r8
80006ce6:	a1 79       	lsl	r9,0x1
80006ce8:	10 09       	add	r9,r8
80006cea:	14 98       	mov	r8,r10
80006cec:	a3 78       	lsl	r8,0x3
80006cee:	14 08       	add	r8,r10
80006cf0:	f2 08 00 08 	add	r8,r9,r8
80006cf4:	f0 0c 00 0a 	add	r10,r8,r12
80006cf8:	30 08       	mov	r8,0
80006cfa:	30 09       	mov	r9,0
80006cfc:	f6 0a 08 38 	st.d	r11[r10<<0x3],r8
			P2[axis][i][j] = 0.0;
80006d00:	ee fa ff f4 	ld.w	r10,r7[-12]
80006d04:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006d08:	ee fc ff fc 	ld.w	r12,r7[-4]
80006d0c:	ec fb 00 1c 	ld.w	r11,r6[28]
80006d10:	10 99       	mov	r9,r8
80006d12:	a1 79       	lsl	r9,0x1
80006d14:	10 09       	add	r9,r8
80006d16:	14 98       	mov	r8,r10
80006d18:	a3 78       	lsl	r8,0x3
80006d1a:	14 08       	add	r8,r10
80006d1c:	f2 08 00 08 	add	r8,r9,r8
80006d20:	f0 0c 00 0a 	add	r10,r8,r12
80006d24:	30 08       	mov	r8,0
80006d26:	30 09       	mov	r9,0
80006d28:	f6 0a 08 38 	st.d	r11[r10<<0x3],r8
	
	centralData->estimation.state[axis][BIAIS] = centralData->imu1.attitude.be[axis + ACC_OFFSET];
	
	for (i=0; i<3; i++)
	{
		for (j=0; j<3; j++)
80006d2c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006d30:	2f f8       	sub	r8,-1
80006d32:	ef 48 ff fc 	st.w	r7[-4],r8
80006d36:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006d3a:	58 28       	cp.w	r8,2
80006d3c:	fe 9a ff cc 	brle	80006cd4 <e_kalman_init+0x9c>
		{
			P[axis][i][j] = 0.0;
			P2[axis][i][j] = 0.0;
		}
		P[axis][i][i] = init_p;
80006d40:	ee f5 ff f4 	ld.w	r5,r7[-12]
80006d44:	ee f3 ff f8 	ld.w	r3,r7[-8]
80006d48:	ee f2 ff f8 	ld.w	r2,r7[-8]
80006d4c:	ee fc ff f0 	ld.w	r12,r7[-16]
80006d50:	f0 16 00 02 	mcall	r6[8]
80006d54:	ec fc 00 18 	ld.w	r12,r6[24]
80006d58:	06 99       	mov	r9,r3
80006d5a:	a1 79       	lsl	r9,0x1
80006d5c:	06 09       	add	r9,r3
80006d5e:	0a 98       	mov	r8,r5
80006d60:	a3 78       	lsl	r8,0x3
80006d62:	0a 08       	add	r8,r5
80006d64:	f2 08 00 08 	add	r8,r9,r8
80006d68:	04 08       	add	r8,r2
80006d6a:	f8 08 08 3a 	st.d	r12[r8<<0x3],r10
		P2[axis][i][i] = init_p;
80006d6e:	ee f5 ff f4 	ld.w	r5,r7[-12]
80006d72:	ee f3 ff f8 	ld.w	r3,r7[-8]
80006d76:	ee f2 ff f8 	ld.w	r2,r7[-8]
80006d7a:	ee fc ff f0 	ld.w	r12,r7[-16]
80006d7e:	f0 16 00 02 	mcall	r6[8]
80006d82:	ec fc 00 1c 	ld.w	r12,r6[28]
80006d86:	06 99       	mov	r9,r3
80006d88:	a1 79       	lsl	r9,0x1
80006d8a:	06 09       	add	r9,r3
80006d8c:	0a 98       	mov	r8,r5
80006d8e:	a3 78       	lsl	r8,0x3
80006d90:	0a 08       	add	r8,r5
80006d92:	f2 08 00 08 	add	r8,r9,r8
80006d96:	04 08       	add	r8,r2
80006d98:	f8 08 08 3a 	st.d	r12[r8<<0x3],r10
	centralData->estimation.state[axis][POSITION] = 0; // Differential par rapport au point de depart
	centralData->estimation.state[axis][SPEED] = 0;
	
	centralData->estimation.state[axis][BIAIS] = centralData->imu1.attitude.be[axis + ACC_OFFSET];
	
	for (i=0; i<3; i++)
80006d9c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006da0:	2f f8       	sub	r8,-1
80006da2:	ef 48 ff f8 	st.w	r7[-8],r8
80006da6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006daa:	58 28       	cp.w	r8,2
80006dac:	fe 9a ff 90 	brle	80006ccc <e_kalman_init+0x94>
			P2[axis][i][j] = 0.0;
		}
		P[axis][i][i] = init_p;
		P2[axis][i][i] = init_p;
	}
}
80006db0:	2f cd       	sub	sp,-16
80006db2:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
80006db6:	00 00       	add	r0,r0
80006db8:	80 00       	ld.sh	r0,r0[0x0]
80006dba:	6a c6       	ld.w	r6,r5[0x30]

80006dbc <e_predict>:

//------------------------------PREDICTION--------------------------
void e_predict (UQuat_t *qe, float a[], float dt)
{
80006dbc:	eb cd 40 c0 	pushm	r6-r7,lr
80006dc0:	1a 97       	mov	r7,sp
80006dc2:	21 9d       	sub	sp,100
80006dc4:	fe f6 03 00 	ld.w	r6,pc[768]
80006dc8:	1e 26       	rsub	r6,pc
80006dca:	ef 4c ff a4 	st.w	r7[-92],r12
80006dce:	ef 4b ff a0 	st.w	r7[-96],r11
80006dd2:	ef 4a ff 9c 	st.w	r7[-100],r10
	//MUL_V_SCA(z,-a[2])
	//e_kalman_predict(X,(x[0]*x[0]+y[0]*y[0]+z[0]*z[0]),dt);//final x (in NED) acc
	//e_kalman_predict(Y,(x[1]*x[1]+y[1]*y[1]+z[1]*z[1]),dt);
	//e_kalman_predict(Z,(x[2]*x[2]+y[2]*y[2]+z[2]*z[2]),dt);
	
	qe_tmp = *qe;
80006dd6:	ee f9 ff a4 	ld.w	r9,r7[-92]
80006dda:	ee c8 00 40 	sub	r8,r7,64
80006dde:	20 08       	sub	r8,0
80006de0:	20 09       	sub	r9,0
80006de2:	72 0a       	ld.w	r10,r9[0x0]
80006de4:	91 0a       	st.w	r8[0x0],r10
80006de6:	72 1a       	ld.w	r10,r9[0x4]
80006de8:	91 1a       	st.w	r8[0x4],r10
80006dea:	72 2a       	ld.w	r10,r9[0x8]
80006dec:	91 2a       	st.w	r8[0x8],r10
80006dee:	72 39       	ld.w	r9,r9[0xc]
80006df0:	91 39       	st.w	r8[0xc],r9
	
	// compute acceleration in global frame
	// acc_glo = qe * acc_bf * qe-1
	qtmp1.s=0.0; qtmp1.v[0]=a[0]; qtmp1.v[1]=a[1];qtmp1.v[2]=a[2];
80006df2:	30 08       	mov	r8,0
80006df4:	ef 48 ff f0 	st.w	r7[-16],r8
80006df8:	ee f8 ff a0 	ld.w	r8,r7[-96]
80006dfc:	70 08       	ld.w	r8,r8[0x0]
80006dfe:	ef 48 ff f4 	st.w	r7[-12],r8
80006e02:	ee f8 ff a0 	ld.w	r8,r7[-96]
80006e06:	2f c8       	sub	r8,-4
80006e08:	70 08       	ld.w	r8,r8[0x0]
80006e0a:	ef 48 ff f8 	st.w	r7[-8],r8
80006e0e:	ee f8 ff a0 	ld.w	r8,r7[-96]
80006e12:	2f 88       	sub	r8,-8
80006e14:	70 08       	ld.w	r8,r8[0x0]
80006e16:	ef 48 ff fc 	st.w	r7[-4],r8
	QMUL(qe_tmp,qtmp1,qtmp2);
80006e1a:	ee f9 ff c8 	ld.w	r9,r7[-56]
80006e1e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006e22:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80006e26:	ee fa ff cc 	ld.w	r10,r7[-52]
80006e2a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006e2e:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80006e32:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80006e36:	ef 48 ff b4 	st.w	r7[-76],r8
80006e3a:	ee f9 ff cc 	ld.w	r9,r7[-52]
80006e3e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80006e42:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80006e46:	ee fa ff c4 	ld.w	r10,r7[-60]
80006e4a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006e4e:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80006e52:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80006e56:	ef 48 ff b8 	st.w	r7[-72],r8
80006e5a:	ee f9 ff c4 	ld.w	r9,r7[-60]
80006e5e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006e62:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80006e66:	ee fa ff c8 	ld.w	r10,r7[-56]
80006e6a:	ee f8 ff f4 	ld.w	r8,r7[-12]
80006e6e:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80006e72:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80006e76:	ef 48 ff bc 	st.w	r7[-68],r8
80006e7a:	ee f9 ff f0 	ld.w	r9,r7[-16]
80006e7e:	ee f8 ff c4 	ld.w	r8,r7[-60]
80006e82:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80006e86:	ee fa ff c0 	ld.w	r10,r7[-64]
80006e8a:	ee f8 ff f4 	ld.w	r8,r7[-12]
80006e8e:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80006e92:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80006e96:	ee f8 ff b4 	ld.w	r8,r7[-76]
80006e9a:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80006e9e:	ef 48 ff e4 	st.w	r7[-28],r8
80006ea2:	ee f9 ff f0 	ld.w	r9,r7[-16]
80006ea6:	ee f8 ff c8 	ld.w	r8,r7[-56]
80006eaa:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80006eae:	ee fa ff c0 	ld.w	r10,r7[-64]
80006eb2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006eb6:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80006eba:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80006ebe:	ee f8 ff b8 	ld.w	r8,r7[-72]
80006ec2:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80006ec6:	ef 48 ff e8 	st.w	r7[-24],r8
80006eca:	ee f9 ff f0 	ld.w	r9,r7[-16]
80006ece:	ee f8 ff cc 	ld.w	r8,r7[-52]
80006ed2:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80006ed6:	ee fa ff c0 	ld.w	r10,r7[-64]
80006eda:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006ede:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80006ee2:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80006ee6:	ee f8 ff bc 	ld.w	r8,r7[-68]
80006eea:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80006eee:	ef 48 ff ec 	st.w	r7[-20],r8
80006ef2:	ee f9 ff c0 	ld.w	r9,r7[-64]
80006ef6:	ee f8 ff f0 	ld.w	r8,r7[-16]
80006efa:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80006efe:	ee fa ff c4 	ld.w	r10,r7[-60]
80006f02:	ee f8 ff f4 	ld.w	r8,r7[-12]
80006f06:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
80006f0a:	ee fb ff c8 	ld.w	r11,r7[-56]
80006f0e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006f12:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
80006f16:	e5 a0 0a a8 	cop	cp0,cr10,cr10,cr8,0x40
80006f1a:	ee fb ff cc 	ld.w	r11,r7[-52]
80006f1e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006f22:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
80006f26:	e5 a0 08 a8 	cop	cp0,cr8,cr10,cr8,0x40
80006f2a:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80006f2e:	ef 48 ff e0 	st.w	r7[-32],r8
	QI(qe_tmp,qtmp1);
80006f32:	ee f8 ff c0 	ld.w	r8,r7[-64]
80006f36:	ef 48 ff f0 	st.w	r7[-16],r8
80006f3a:	ee f8 ff c4 	ld.w	r8,r7[-60]
80006f3e:	ee 18 80 00 	eorh	r8,0x8000
80006f42:	ef 48 ff f4 	st.w	r7[-12],r8
80006f46:	ee f8 ff c8 	ld.w	r8,r7[-56]
80006f4a:	ee 18 80 00 	eorh	r8,0x8000
80006f4e:	ef 48 ff f8 	st.w	r7[-8],r8
80006f52:	ee f8 ff cc 	ld.w	r8,r7[-52]
80006f56:	ee 18 80 00 	eorh	r8,0x8000
80006f5a:	ef 48 ff fc 	st.w	r7[-4],r8
	QMUL(qtmp2,qtmp1,qtmp3);
80006f5e:	ee f9 ff e8 	ld.w	r9,r7[-24]
80006f62:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006f66:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80006f6a:	ee fa ff ec 	ld.w	r10,r7[-20]
80006f6e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006f72:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80006f76:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80006f7a:	ef 48 ff b4 	st.w	r7[-76],r8
80006f7e:	ee f9 ff ec 	ld.w	r9,r7[-20]
80006f82:	ee f8 ff f4 	ld.w	r8,r7[-12]
80006f86:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80006f8a:	ee fa ff e4 	ld.w	r10,r7[-28]
80006f8e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006f92:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80006f96:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80006f9a:	ef 48 ff b8 	st.w	r7[-72],r8
80006f9e:	ee f9 ff e4 	ld.w	r9,r7[-28]
80006fa2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006fa6:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80006faa:	ee fa ff e8 	ld.w	r10,r7[-24]
80006fae:	ee f8 ff f4 	ld.w	r8,r7[-12]
80006fb2:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80006fb6:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80006fba:	ef 48 ff bc 	st.w	r7[-68],r8
80006fbe:	ee f9 ff f0 	ld.w	r9,r7[-16]
80006fc2:	ee f8 ff e4 	ld.w	r8,r7[-28]
80006fc6:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80006fca:	ee fa ff e0 	ld.w	r10,r7[-32]
80006fce:	ee f8 ff f4 	ld.w	r8,r7[-12]
80006fd2:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80006fd6:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80006fda:	ee f8 ff b4 	ld.w	r8,r7[-76]
80006fde:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80006fe2:	ef 48 ff d4 	st.w	r7[-44],r8
80006fe6:	ee f9 ff f0 	ld.w	r9,r7[-16]
80006fea:	ee f8 ff e8 	ld.w	r8,r7[-24]
80006fee:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80006ff2:	ee fa ff e0 	ld.w	r10,r7[-32]
80006ff6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006ffa:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80006ffe:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80007002:	ee f8 ff b8 	ld.w	r8,r7[-72]
80007006:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8000700a:	ef 48 ff d8 	st.w	r7[-40],r8
8000700e:	ee f9 ff f0 	ld.w	r9,r7[-16]
80007012:	ee f8 ff ec 	ld.w	r8,r7[-20]
80007016:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000701a:	ee fa ff e0 	ld.w	r10,r7[-32]
8000701e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007022:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80007026:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000702a:	ee f8 ff bc 	ld.w	r8,r7[-68]
8000702e:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80007032:	ef 48 ff dc 	st.w	r7[-36],r8
80007036:	ee f9 ff e0 	ld.w	r9,r7[-32]
8000703a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000703e:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80007042:	ee fa ff e4 	ld.w	r10,r7[-28]
80007046:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000704a:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
8000704e:	ee fb ff e8 	ld.w	r11,r7[-24]
80007052:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007056:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
8000705a:	e5 a0 0a a8 	cop	cp0,cr10,cr10,cr8,0x40
8000705e:	ee fb ff ec 	ld.w	r11,r7[-20]
80007062:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007066:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
8000706a:	e5 a0 08 a8 	cop	cp0,cr8,cr10,cr8,0x40
8000706e:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80007072:	ef 48 ff d0 	st.w	r7[-48],r8
	acc_glo[0]=qtmp3.v[0];acc_glo[1]=qtmp3.v[1];acc_glo[2]=qtmp3.v[2];
80007076:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000707a:	ef 48 ff a8 	st.w	r7[-88],r8
8000707e:	ee f8 ff d8 	ld.w	r8,r7[-40]
80007082:	ef 48 ff ac 	st.w	r7[-84],r8
80007086:	ee f8 ff dc 	ld.w	r8,r7[-36]
8000708a:	ef 48 ff b0 	st.w	r7[-80],r8
	//dbg_print_num(centralData->imu1.attitude.a[X]*1000,10);
	//dbg_print_num(centralData->imu1.attitude.a[Y]*1000,10);
	//dbg_print_num(centralData->imu1.attitude.a[Z]*1000,10);
	//dbg_print("\n");

	e_kalman_predict(X,acc_glo[X],dt);//final x (in NED) acc
8000708e:	ee f8 ff a8 	ld.w	r8,r7[-88]
80007092:	ee fa ff 9c 	ld.w	r10,r7[-100]
80007096:	10 9b       	mov	r11,r8
80007098:	30 0c       	mov	r12,0
8000709a:	f0 16 00 bf 	mcall	r6[764]
	e_kalman_predict(Y,acc_glo[Y],dt);
8000709e:	ee f8 ff ac 	ld.w	r8,r7[-84]
800070a2:	ee fa ff 9c 	ld.w	r10,r7[-100]
800070a6:	10 9b       	mov	r11,r8
800070a8:	30 1c       	mov	r12,1
800070aa:	f0 16 00 bf 	mcall	r6[764]
	//e_kalman_predict_hf(X,acc_glo[X],dt);//final x (in NED) acc
	//e_kalman_predict_hf(Y,acc_glo[Y],dt);
	e_kalman_predict(Z,acc_glo[Z],dt);
800070ae:	ee f8 ff b0 	ld.w	r8,r7[-80]
800070b2:	ee fa ff 9c 	ld.w	r10,r7[-100]
800070b6:	10 9b       	mov	r11,r8
800070b8:	30 2c       	mov	r12,2
800070ba:	f0 16 00 bf 	mcall	r6[764]
}
800070be:	2e 7d       	sub	sp,-100
800070c0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800070c4:	80 00       	ld.sh	r0,r0[0x0]
800070c6:	6c 4c       	ld.w	r12,r6[0x10]

800070c8 <quat_rot>:

//Rotation of vector vect with the quaternion quat
void quat_rot(UQuat_t *quat,float *vect)
{
800070c8:	eb cd 40 80 	pushm	r7,lr
800070cc:	1a 97       	mov	r7,sp
800070ce:	20 8d       	sub	sp,32
800070d0:	ef 4c ff e4 	st.w	r7[-28],r12
800070d4:	ef 4b ff e0 	st.w	r7[-32],r11
	float temp1[3],temp2[3];
	CP((*quat).v,vect,temp1);
800070d8:	ee f8 ff e4 	ld.w	r8,r7[-28]
800070dc:	70 29       	ld.w	r9,r8[0x8]
800070de:	ee f8 ff e0 	ld.w	r8,r7[-32]
800070e2:	2f 88       	sub	r8,-8
800070e4:	70 08       	ld.w	r8,r8[0x0]
800070e6:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
800070ea:	ee f8 ff e4 	ld.w	r8,r7[-28]
800070ee:	70 3a       	ld.w	r10,r8[0xc]
800070f0:	ee f8 ff e0 	ld.w	r8,r7[-32]
800070f4:	2f c8       	sub	r8,-4
800070f6:	70 08       	ld.w	r8,r8[0x0]
800070f8:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
800070fc:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80007100:	ef 48 ff f4 	st.w	r7[-12],r8
80007104:	ee f8 ff e4 	ld.w	r8,r7[-28]
80007108:	70 39       	ld.w	r9,r8[0xc]
8000710a:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000710e:	70 08       	ld.w	r8,r8[0x0]
80007110:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80007114:	ee f8 ff e4 	ld.w	r8,r7[-28]
80007118:	70 1a       	ld.w	r10,r8[0x4]
8000711a:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000711e:	2f 88       	sub	r8,-8
80007120:	70 08       	ld.w	r8,r8[0x0]
80007122:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80007126:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8000712a:	ef 48 ff f8 	st.w	r7[-8],r8
8000712e:	ee f8 ff e4 	ld.w	r8,r7[-28]
80007132:	70 19       	ld.w	r9,r8[0x4]
80007134:	ee f8 ff e0 	ld.w	r8,r7[-32]
80007138:	2f c8       	sub	r8,-4
8000713a:	70 08       	ld.w	r8,r8[0x0]
8000713c:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80007140:	ee f8 ff e4 	ld.w	r8,r7[-28]
80007144:	70 2a       	ld.w	r10,r8[0x8]
80007146:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000714a:	70 08       	ld.w	r8,r8[0x0]
8000714c:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80007150:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80007154:	ef 48 ff fc 	st.w	r7[-4],r8
	temp1[0]=temp1[0]+(*quat).s*vect[0];
80007158:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000715c:	ee f8 ff e4 	ld.w	r8,r7[-28]
80007160:	70 0a       	ld.w	r10,r8[0x0]
80007162:	ee f8 ff e0 	ld.w	r8,r7[-32]
80007166:	70 08       	ld.w	r8,r8[0x0]
80007168:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000716c:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80007170:	ef 48 ff f4 	st.w	r7[-12],r8
	temp1[1]=temp1[1]+(*quat).s*vect[1];
80007174:	ee f9 ff f8 	ld.w	r9,r7[-8]
80007178:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000717c:	70 0a       	ld.w	r10,r8[0x0]
8000717e:	ee f8 ff e0 	ld.w	r8,r7[-32]
80007182:	2f c8       	sub	r8,-4
80007184:	70 08       	ld.w	r8,r8[0x0]
80007186:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000718a:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8000718e:	ef 48 ff f8 	st.w	r7[-8],r8
	temp1[2]=temp1[2]+(*quat).s*vect[2];
80007192:	ee f9 ff fc 	ld.w	r9,r7[-4]
80007196:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000719a:	70 0a       	ld.w	r10,r8[0x0]
8000719c:	ee f8 ff e0 	ld.w	r8,r7[-32]
800071a0:	2f 88       	sub	r8,-8
800071a2:	70 08       	ld.w	r8,r8[0x0]
800071a4:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
800071a8:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
800071ac:	ef 48 ff fc 	st.w	r7[-4],r8
	CP((*quat).v,temp1,temp2);
800071b0:	ee f8 ff e4 	ld.w	r8,r7[-28]
800071b4:	70 29       	ld.w	r9,r8[0x8]
800071b6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800071ba:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
800071be:	ee f8 ff e4 	ld.w	r8,r7[-28]
800071c2:	70 3a       	ld.w	r10,r8[0xc]
800071c4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800071c8:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
800071cc:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
800071d0:	ef 48 ff e8 	st.w	r7[-24],r8
800071d4:	ee f8 ff e4 	ld.w	r8,r7[-28]
800071d8:	70 39       	ld.w	r9,r8[0xc]
800071da:	ee f8 ff f4 	ld.w	r8,r7[-12]
800071de:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
800071e2:	ee f8 ff e4 	ld.w	r8,r7[-28]
800071e6:	70 1a       	ld.w	r10,r8[0x4]
800071e8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800071ec:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
800071f0:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
800071f4:	ef 48 ff ec 	st.w	r7[-20],r8
800071f8:	ee f8 ff e4 	ld.w	r8,r7[-28]
800071fc:	70 19       	ld.w	r9,r8[0x4]
800071fe:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007202:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80007206:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000720a:	70 2a       	ld.w	r10,r8[0x8]
8000720c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80007210:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80007214:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80007218:	ef 48 ff f0 	st.w	r7[-16],r8
	vect[0]= vect[0]+temp2[0]+temp2[0];
8000721c:	ee f8 ff e0 	ld.w	r8,r7[-32]
80007220:	70 09       	ld.w	r9,r8[0x0]
80007222:	ee f8 ff e8 	ld.w	r8,r7[-24]
80007226:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000722a:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000722e:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80007232:	ee f8 ff e0 	ld.w	r8,r7[-32]
80007236:	91 09       	st.w	r8[0x0],r9
	vect[1]= vect[1]+temp2[1]+temp2[1];
80007238:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000723c:	2f c8       	sub	r8,-4
8000723e:	ee f9 ff e0 	ld.w	r9,r7[-32]
80007242:	2f c9       	sub	r9,-4
80007244:	72 0a       	ld.w	r10,r9[0x0]
80007246:	ee f9 ff ec 	ld.w	r9,r7[-20]
8000724a:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
8000724e:	ee f9 ff ec 	ld.w	r9,r7[-20]
80007252:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
80007256:	91 09       	st.w	r8[0x0],r9
	vect[2]= vect[2]+temp2[2]+temp2[2];
80007258:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000725c:	2f 88       	sub	r8,-8
8000725e:	ee f9 ff e0 	ld.w	r9,r7[-32]
80007262:	2f 89       	sub	r9,-8
80007264:	72 0a       	ld.w	r10,r9[0x0]
80007266:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000726a:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
8000726e:	ee f9 ff f0 	ld.w	r9,r7[-16]
80007272:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
80007276:	91 09       	st.w	r8[0x0],r9
}
80007278:	2f 8d       	sub	sp,-32
8000727a:	e3 cd 80 80 	ldm	sp++,r7,pc

8000727e <e_kalman_predict>:

Pk1 = F * Pk0 * F' + Q;

*/
void e_kalman_predict (int axis, float accel_meas, float dt)
{
8000727e:	d4 31       	pushm	r0-r7,lr
80007280:	1a 97       	mov	r7,sp
80007282:	fa cd 00 cc 	sub	sp,sp,204
80007286:	fe f6 0d 02 	ld.w	r6,pc[3330]
8000728a:	1e 26       	rsub	r6,pc
8000728c:	ef 4c ff ac 	st.w	r7[-84],r12
80007290:	ef 4b ff a8 	st.w	r7[-88],r11
80007294:	ef 4a ff a4 	st.w	r7[-92],r10
	/* update state */

	//centralData->estimation.state[axis][SPEED] = centralData->estimation.state[axis][SPEED]*(1.0-(VEL_DECAY*dt)) + dt * accel_meas;
	//centralData->estimation.state[axis][POSITION] = centralData->estimation.state[axis][POSITION]*(1.0-(POS_DECAY*dt)) + dt * centralData->estimation.state[axis][SPEED];
	
	centralData->estimation.state[axis][SPEED] = centralData->estimation.state[axis][SPEED] + dt * accel_meas;
80007298:	ec f8 00 00 	ld.w	r8,r6[0]
8000729c:	70 01       	ld.w	r1,r8[0x0]
8000729e:	ee f5 ff ac 	ld.w	r5,r7[-84]
800072a2:	ec f8 00 00 	ld.w	r8,r6[0]
800072a6:	70 0a       	ld.w	r10,r8[0x0]
800072a8:	ee f9 ff ac 	ld.w	r9,r7[-84]
800072ac:	12 98       	mov	r8,r9
800072ae:	a1 78       	lsl	r8,0x1
800072b0:	12 08       	add	r8,r9
800072b2:	2f f8       	sub	r8,-1
800072b4:	a3 78       	lsl	r8,0x3
800072b6:	f4 08 00 08 	add	r8,r10,r8
800072ba:	f0 e2 0b 5c 	ld.d	r2,r8[2908]
800072be:	ee f9 ff a4 	ld.w	r9,r7[-92]
800072c2:	ee f8 ff a8 	ld.w	r8,r7[-88]
800072c6:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
800072ca:	10 9c       	mov	r12,r8
800072cc:	f0 16 00 02 	mcall	r6[8]
800072d0:	14 98       	mov	r8,r10
800072d2:	16 99       	mov	r9,r11
800072d4:	04 9a       	mov	r10,r2
800072d6:	06 9b       	mov	r11,r3
800072d8:	f0 16 00 05 	mcall	r6[20]
800072dc:	14 98       	mov	r8,r10
800072de:	16 99       	mov	r9,r11
800072e0:	10 9a       	mov	r10,r8
800072e2:	12 9b       	mov	r11,r9
800072e4:	0a 98       	mov	r8,r5
800072e6:	a1 78       	lsl	r8,0x1
800072e8:	0a 08       	add	r8,r5
800072ea:	2f f8       	sub	r8,-1
800072ec:	a3 78       	lsl	r8,0x3
800072ee:	e2 08 00 08 	add	r8,r1,r8
800072f2:	f0 eb 0b 5c 	st.d	r8[2908],r10
	centralData->estimation.state[axis][POSITION] = centralData->estimation.state[axis][POSITION] + dt * centralData->estimation.state[axis][SPEED];
800072f6:	ec f8 00 00 	ld.w	r8,r6[0]
800072fa:	70 01       	ld.w	r1,r8[0x0]
800072fc:	ee f5 ff ac 	ld.w	r5,r7[-84]
80007300:	ec f8 00 00 	ld.w	r8,r6[0]
80007304:	70 0a       	ld.w	r10,r8[0x0]
80007306:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000730a:	12 98       	mov	r8,r9
8000730c:	a1 78       	lsl	r8,0x1
8000730e:	12 08       	add	r8,r9
80007310:	a3 78       	lsl	r8,0x3
80007312:	f4 08 00 08 	add	r8,r10,r8
80007316:	f0 c8 f4 a4 	sub	r8,r8,-2908
8000731a:	f0 e2 00 00 	ld.d	r2,r8[0]
8000731e:	ee fc ff a4 	ld.w	r12,r7[-92]
80007322:	f0 16 00 02 	mcall	r6[8]
80007326:	ec f8 00 00 	ld.w	r8,r6[0]
8000732a:	70 0c       	ld.w	r12,r8[0x0]
8000732c:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007330:	12 98       	mov	r8,r9
80007332:	a1 78       	lsl	r8,0x1
80007334:	12 08       	add	r8,r9
80007336:	2f f8       	sub	r8,-1
80007338:	a3 78       	lsl	r8,0x3
8000733a:	f8 08 00 08 	add	r8,r12,r8
8000733e:	f0 e8 0b 5c 	ld.d	r8,r8[2908]
80007342:	f0 16 00 03 	mcall	r6[12]
80007346:	14 98       	mov	r8,r10
80007348:	16 99       	mov	r9,r11
8000734a:	04 9a       	mov	r10,r2
8000734c:	06 9b       	mov	r11,r3
8000734e:	f0 16 00 05 	mcall	r6[20]
80007352:	14 98       	mov	r8,r10
80007354:	16 99       	mov	r9,r11
80007356:	10 9a       	mov	r10,r8
80007358:	12 9b       	mov	r11,r9
8000735a:	0a 98       	mov	r8,r5
8000735c:	a1 78       	lsl	r8,0x1
8000735e:	0a 08       	add	r8,r5
80007360:	a3 78       	lsl	r8,0x3
80007362:	e2 08 00 08 	add	r8,r1,r8
80007366:	f0 c8 f4 a4 	sub	r8,r8,-2908
8000736a:	f0 eb 00 00 	st.d	r8[0],r10
	//centralData->estimation.state[axis][SPEED] = centralData->position_estimator.vel[axis];
	
	
	/* update covariance */
	// F*P*F' calculation
	FPF00 = P[axis][0][0] + dt * ( P[axis][1][0] + P[axis][0][1] + dt * P[axis][1][1] );
8000736e:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007372:	ec fa 00 18 	ld.w	r10,r6[24]
80007376:	12 98       	mov	r8,r9
80007378:	a3 78       	lsl	r8,0x3
8000737a:	12 08       	add	r8,r9
8000737c:	a3 78       	lsl	r8,0x3
8000737e:	f4 08 00 08 	add	r8,r10,r8
80007382:	f0 ea 00 00 	ld.d	r10,r8[0]
80007386:	ee eb ff 34 	st.d	r7[-204],r10
8000738a:	ee fc ff a4 	ld.w	r12,r7[-92]
8000738e:	f0 16 00 02 	mcall	r6[8]
80007392:	14 90       	mov	r0,r10
80007394:	16 91       	mov	r1,r11
80007396:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000739a:	ec fa 00 18 	ld.w	r10,r6[24]
8000739e:	12 98       	mov	r8,r9
800073a0:	a3 78       	lsl	r8,0x3
800073a2:	12 08       	add	r8,r9
800073a4:	a3 78       	lsl	r8,0x3
800073a6:	f4 08 00 08 	add	r8,r10,r8
800073aa:	2e 88       	sub	r8,-24
800073ac:	f0 ea 00 00 	ld.d	r10,r8[0]
800073b0:	ee f9 ff ac 	ld.w	r9,r7[-84]
800073b4:	ec fc 00 18 	ld.w	r12,r6[24]
800073b8:	12 98       	mov	r8,r9
800073ba:	a3 78       	lsl	r8,0x3
800073bc:	12 08       	add	r8,r9
800073be:	2f f8       	sub	r8,-1
800073c0:	f8 08 02 38 	ld.d	r8,r12[r8<<0x3]
800073c4:	f0 16 00 05 	mcall	r6[20]
800073c8:	14 98       	mov	r8,r10
800073ca:	16 99       	mov	r9,r11
800073cc:	10 92       	mov	r2,r8
800073ce:	12 93       	mov	r3,r9
800073d0:	ee fc ff a4 	ld.w	r12,r7[-92]
800073d4:	f0 16 00 02 	mcall	r6[8]
800073d8:	ee f9 ff ac 	ld.w	r9,r7[-84]
800073dc:	ec fc 00 18 	ld.w	r12,r6[24]
800073e0:	12 98       	mov	r8,r9
800073e2:	a3 78       	lsl	r8,0x3
800073e4:	12 08       	add	r8,r9
800073e6:	a3 78       	lsl	r8,0x3
800073e8:	f8 08 00 08 	add	r8,r12,r8
800073ec:	2e 08       	sub	r8,-32
800073ee:	f0 e8 00 00 	ld.d	r8,r8[0]
800073f2:	f0 16 00 03 	mcall	r6[12]
800073f6:	14 98       	mov	r8,r10
800073f8:	16 99       	mov	r9,r11
800073fa:	04 9a       	mov	r10,r2
800073fc:	06 9b       	mov	r11,r3
800073fe:	f0 16 00 05 	mcall	r6[20]
80007402:	14 98       	mov	r8,r10
80007404:	16 99       	mov	r9,r11
80007406:	00 9a       	mov	r10,r0
80007408:	02 9b       	mov	r11,r1
8000740a:	f0 16 00 03 	mcall	r6[12]
8000740e:	14 98       	mov	r8,r10
80007410:	16 99       	mov	r9,r11
80007412:	ee ea ff 34 	ld.d	r10,r7[-204]
80007416:	f0 16 00 05 	mcall	r6[20]
8000741a:	14 98       	mov	r8,r10
8000741c:	16 99       	mov	r9,r11
8000741e:	ee e9 ff b8 	st.d	r7[-72],r8
	FPF01 = P[axis][0][1] + dt * ( P[axis][1][1] - P[axis][0][2] - dt * P[axis][1][2] );
80007422:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007426:	ec fa 00 18 	ld.w	r10,r6[24]
8000742a:	12 98       	mov	r8,r9
8000742c:	a3 78       	lsl	r8,0x3
8000742e:	12 08       	add	r8,r9
80007430:	2f f8       	sub	r8,-1
80007432:	f4 08 02 34 	ld.d	r4,r10[r8<<0x3]
80007436:	ee e5 ff 3c 	st.d	r7[-196],r4
8000743a:	ee fc ff a4 	ld.w	r12,r7[-92]
8000743e:	f0 16 00 02 	mcall	r6[8]
80007442:	14 90       	mov	r0,r10
80007444:	16 91       	mov	r1,r11
80007446:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000744a:	ec fa 00 18 	ld.w	r10,r6[24]
8000744e:	12 98       	mov	r8,r9
80007450:	a3 78       	lsl	r8,0x3
80007452:	12 08       	add	r8,r9
80007454:	a3 78       	lsl	r8,0x3
80007456:	f4 08 00 08 	add	r8,r10,r8
8000745a:	2e 08       	sub	r8,-32
8000745c:	f0 ea 00 00 	ld.d	r10,r8[0]
80007460:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007464:	ec fc 00 18 	ld.w	r12,r6[24]
80007468:	12 98       	mov	r8,r9
8000746a:	a3 78       	lsl	r8,0x3
8000746c:	12 08       	add	r8,r9
8000746e:	a3 78       	lsl	r8,0x3
80007470:	f8 08 00 08 	add	r8,r12,r8
80007474:	2f 08       	sub	r8,-16
80007476:	f0 e8 00 00 	ld.d	r8,r8[0]
8000747a:	f0 16 00 11 	mcall	r6[68]
8000747e:	14 98       	mov	r8,r10
80007480:	16 99       	mov	r9,r11
80007482:	10 92       	mov	r2,r8
80007484:	12 93       	mov	r3,r9
80007486:	ee fc ff a4 	ld.w	r12,r7[-92]
8000748a:	f0 16 00 02 	mcall	r6[8]
8000748e:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007492:	ec fc 00 18 	ld.w	r12,r6[24]
80007496:	12 98       	mov	r8,r9
80007498:	a3 78       	lsl	r8,0x3
8000749a:	12 08       	add	r8,r9
8000749c:	a3 78       	lsl	r8,0x3
8000749e:	f8 08 00 08 	add	r8,r12,r8
800074a2:	2d 88       	sub	r8,-40
800074a4:	f0 e8 00 00 	ld.d	r8,r8[0]
800074a8:	f0 16 00 03 	mcall	r6[12]
800074ac:	14 98       	mov	r8,r10
800074ae:	16 99       	mov	r9,r11
800074b0:	04 9a       	mov	r10,r2
800074b2:	06 9b       	mov	r11,r3
800074b4:	f0 16 00 11 	mcall	r6[68]
800074b8:	14 98       	mov	r8,r10
800074ba:	16 99       	mov	r9,r11
800074bc:	00 9a       	mov	r10,r0
800074be:	02 9b       	mov	r11,r1
800074c0:	f0 16 00 03 	mcall	r6[12]
800074c4:	14 98       	mov	r8,r10
800074c6:	16 99       	mov	r9,r11
800074c8:	ee ea ff 3c 	ld.d	r10,r7[-196]
800074cc:	f0 16 00 05 	mcall	r6[20]
800074d0:	14 98       	mov	r8,r10
800074d2:	16 99       	mov	r9,r11
800074d4:	ee e9 ff c0 	st.d	r7[-64],r8
	FPF02 = P[axis][0][2] + dt * ( P[axis][1][2] );
800074d8:	ee f9 ff ac 	ld.w	r9,r7[-84]
800074dc:	ec fa 00 18 	ld.w	r10,r6[24]
800074e0:	12 98       	mov	r8,r9
800074e2:	a3 78       	lsl	r8,0x3
800074e4:	12 08       	add	r8,r9
800074e6:	a3 78       	lsl	r8,0x3
800074e8:	f4 08 00 08 	add	r8,r10,r8
800074ec:	2f 08       	sub	r8,-16
800074ee:	f0 e2 00 00 	ld.d	r2,r8[0]
800074f2:	ee fc ff a4 	ld.w	r12,r7[-92]
800074f6:	f0 16 00 02 	mcall	r6[8]
800074fa:	ee f9 ff ac 	ld.w	r9,r7[-84]
800074fe:	ec fc 00 18 	ld.w	r12,r6[24]
80007502:	12 98       	mov	r8,r9
80007504:	a3 78       	lsl	r8,0x3
80007506:	12 08       	add	r8,r9
80007508:	a3 78       	lsl	r8,0x3
8000750a:	f8 08 00 08 	add	r8,r12,r8
8000750e:	2d 88       	sub	r8,-40
80007510:	f0 e8 00 00 	ld.d	r8,r8[0]
80007514:	f0 16 00 03 	mcall	r6[12]
80007518:	14 98       	mov	r8,r10
8000751a:	16 99       	mov	r9,r11
8000751c:	04 9a       	mov	r10,r2
8000751e:	06 9b       	mov	r11,r3
80007520:	f0 16 00 05 	mcall	r6[20]
80007524:	14 98       	mov	r8,r10
80007526:	16 99       	mov	r9,r11
80007528:	ee e9 ff c8 	st.d	r7[-56],r8
	FPF10 = P[axis][1][0] + dt * (-P[axis][2][0] + P[axis][1][1] - dt * P[axis][2][1] );
8000752c:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007530:	ec fa 00 18 	ld.w	r10,r6[24]
80007534:	12 98       	mov	r8,r9
80007536:	a3 78       	lsl	r8,0x3
80007538:	12 08       	add	r8,r9
8000753a:	a3 78       	lsl	r8,0x3
8000753c:	f4 08 00 08 	add	r8,r10,r8
80007540:	2e 88       	sub	r8,-24
80007542:	f0 ea 00 00 	ld.d	r10,r8[0]
80007546:	ee eb ff 44 	st.d	r7[-188],r10
8000754a:	ee fc ff a4 	ld.w	r12,r7[-92]
8000754e:	f0 16 00 02 	mcall	r6[8]
80007552:	14 90       	mov	r0,r10
80007554:	16 91       	mov	r1,r11
80007556:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000755a:	ec fa 00 18 	ld.w	r10,r6[24]
8000755e:	12 98       	mov	r8,r9
80007560:	a3 78       	lsl	r8,0x3
80007562:	12 08       	add	r8,r9
80007564:	a3 78       	lsl	r8,0x3
80007566:	f4 08 00 08 	add	r8,r10,r8
8000756a:	2e 08       	sub	r8,-32
8000756c:	f0 ea 00 00 	ld.d	r10,r8[0]
80007570:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007574:	ec fc 00 18 	ld.w	r12,r6[24]
80007578:	12 98       	mov	r8,r9
8000757a:	a3 78       	lsl	r8,0x3
8000757c:	12 08       	add	r8,r9
8000757e:	a3 78       	lsl	r8,0x3
80007580:	f8 08 00 08 	add	r8,r12,r8
80007584:	2d 08       	sub	r8,-48
80007586:	f0 e8 00 00 	ld.d	r8,r8[0]
8000758a:	f0 16 00 11 	mcall	r6[68]
8000758e:	14 98       	mov	r8,r10
80007590:	16 99       	mov	r9,r11
80007592:	10 92       	mov	r2,r8
80007594:	12 93       	mov	r3,r9
80007596:	ee fc ff a4 	ld.w	r12,r7[-92]
8000759a:	f0 16 00 02 	mcall	r6[8]
8000759e:	ee f9 ff ac 	ld.w	r9,r7[-84]
800075a2:	ec fc 00 18 	ld.w	r12,r6[24]
800075a6:	12 98       	mov	r8,r9
800075a8:	a3 78       	lsl	r8,0x3
800075aa:	12 08       	add	r8,r9
800075ac:	a3 78       	lsl	r8,0x3
800075ae:	f8 08 00 08 	add	r8,r12,r8
800075b2:	2c 88       	sub	r8,-56
800075b4:	f0 e8 00 00 	ld.d	r8,r8[0]
800075b8:	f0 16 00 03 	mcall	r6[12]
800075bc:	14 98       	mov	r8,r10
800075be:	16 99       	mov	r9,r11
800075c0:	04 9a       	mov	r10,r2
800075c2:	06 9b       	mov	r11,r3
800075c4:	f0 16 00 11 	mcall	r6[68]
800075c8:	14 98       	mov	r8,r10
800075ca:	16 99       	mov	r9,r11
800075cc:	00 9a       	mov	r10,r0
800075ce:	02 9b       	mov	r11,r1
800075d0:	f0 16 00 03 	mcall	r6[12]
800075d4:	14 98       	mov	r8,r10
800075d6:	16 99       	mov	r9,r11
800075d8:	ee ea ff 44 	ld.d	r10,r7[-188]
800075dc:	f0 16 00 05 	mcall	r6[20]
800075e0:	14 98       	mov	r8,r10
800075e2:	16 99       	mov	r9,r11
800075e4:	ee e9 ff d0 	st.d	r7[-48],r8
	FPF11 = P[axis][1][1] + dt * (-P[axis][2][1] - P[axis][1][2] + dt * P[axis][2][2] );
800075e8:	ee f9 ff ac 	ld.w	r9,r7[-84]
800075ec:	ec fa 00 18 	ld.w	r10,r6[24]
800075f0:	12 98       	mov	r8,r9
800075f2:	a3 78       	lsl	r8,0x3
800075f4:	12 08       	add	r8,r9
800075f6:	a3 78       	lsl	r8,0x3
800075f8:	f4 08 00 08 	add	r8,r10,r8
800075fc:	2e 08       	sub	r8,-32
800075fe:	f0 e4 00 00 	ld.d	r4,r8[0]
80007602:	ee e5 ff 4c 	st.d	r7[-180],r4
80007606:	ee fc ff a4 	ld.w	r12,r7[-92]
8000760a:	f0 16 00 02 	mcall	r6[8]
8000760e:	14 90       	mov	r0,r10
80007610:	16 91       	mov	r1,r11
80007612:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007616:	ec fa 00 18 	ld.w	r10,r6[24]
8000761a:	12 98       	mov	r8,r9
8000761c:	a3 78       	lsl	r8,0x3
8000761e:	12 08       	add	r8,r9
80007620:	a3 78       	lsl	r8,0x3
80007622:	f4 08 00 08 	add	r8,r10,r8
80007626:	2c 88       	sub	r8,-56
80007628:	f0 e8 00 00 	ld.d	r8,r8[0]
8000762c:	12 94       	mov	r4,r9
8000762e:	ee 14 80 00 	eorh	r4,0x8000
80007632:	ef 44 ff 54 	st.w	r7[-172],r4
80007636:	10 9c       	mov	r12,r8
80007638:	ef 4c ff 58 	st.w	r7[-168],r12
8000763c:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007640:	ec fa 00 18 	ld.w	r10,r6[24]
80007644:	12 98       	mov	r8,r9
80007646:	a3 78       	lsl	r8,0x3
80007648:	12 08       	add	r8,r9
8000764a:	a3 78       	lsl	r8,0x3
8000764c:	f4 08 00 08 	add	r8,r10,r8
80007650:	2d 88       	sub	r8,-40
80007652:	f0 e8 00 00 	ld.d	r8,r8[0]
80007656:	ee ea ff 54 	ld.d	r10,r7[-172]
8000765a:	f0 16 00 11 	mcall	r6[68]
8000765e:	14 98       	mov	r8,r10
80007660:	16 99       	mov	r9,r11
80007662:	10 92       	mov	r2,r8
80007664:	12 93       	mov	r3,r9
80007666:	ee fc ff a4 	ld.w	r12,r7[-92]
8000766a:	f0 16 00 02 	mcall	r6[8]
8000766e:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007672:	ec fc 00 18 	ld.w	r12,r6[24]
80007676:	12 98       	mov	r8,r9
80007678:	a3 78       	lsl	r8,0x3
8000767a:	12 08       	add	r8,r9
8000767c:	a3 78       	lsl	r8,0x3
8000767e:	f8 08 00 08 	add	r8,r12,r8
80007682:	2c 08       	sub	r8,-64
80007684:	f0 e8 00 00 	ld.d	r8,r8[0]
80007688:	f0 16 00 03 	mcall	r6[12]
8000768c:	14 98       	mov	r8,r10
8000768e:	16 99       	mov	r9,r11
80007690:	04 9a       	mov	r10,r2
80007692:	06 9b       	mov	r11,r3
80007694:	f0 16 00 05 	mcall	r6[20]
80007698:	14 98       	mov	r8,r10
8000769a:	16 99       	mov	r9,r11
8000769c:	00 9a       	mov	r10,r0
8000769e:	02 9b       	mov	r11,r1
800076a0:	f0 16 00 03 	mcall	r6[12]
800076a4:	14 98       	mov	r8,r10
800076a6:	16 99       	mov	r9,r11
800076a8:	ee ea ff 4c 	ld.d	r10,r7[-180]
800076ac:	f0 16 00 05 	mcall	r6[20]
800076b0:	14 98       	mov	r8,r10
800076b2:	16 99       	mov	r9,r11
800076b4:	ee e9 ff d8 	st.d	r7[-40],r8
	FPF12 = P[axis][1][2] + dt * (-P[axis][2][2] );
800076b8:	ee f9 ff ac 	ld.w	r9,r7[-84]
800076bc:	ec fa 00 18 	ld.w	r10,r6[24]
800076c0:	12 98       	mov	r8,r9
800076c2:	a3 78       	lsl	r8,0x3
800076c4:	12 08       	add	r8,r9
800076c6:	a3 78       	lsl	r8,0x3
800076c8:	f4 08 00 08 	add	r8,r10,r8
800076cc:	2d 88       	sub	r8,-40
800076ce:	f0 e0 00 00 	ld.d	r0,r8[0]
800076d2:	ee fc ff a4 	ld.w	r12,r7[-92]
800076d6:	f0 16 00 02 	mcall	r6[8]
800076da:	14 92       	mov	r2,r10
800076dc:	16 93       	mov	r3,r11
800076de:	ee f9 ff ac 	ld.w	r9,r7[-84]
800076e2:	ec fa 00 18 	ld.w	r10,r6[24]
800076e6:	12 98       	mov	r8,r9
800076e8:	a3 78       	lsl	r8,0x3
800076ea:	12 08       	add	r8,r9
800076ec:	a3 78       	lsl	r8,0x3
800076ee:	f4 08 00 08 	add	r8,r10,r8
800076f2:	2c 08       	sub	r8,-64
800076f4:	f0 e8 00 00 	ld.d	r8,r8[0]
800076f8:	12 9b       	mov	r11,r9
800076fa:	ee 1b 80 00 	eorh	r11,0x8000
800076fe:	ef 4b ff 5c 	st.w	r7[-164],r11
80007702:	10 9a       	mov	r10,r8
80007704:	ef 4a ff 60 	st.w	r7[-160],r10
80007708:	ee e8 ff 5c 	ld.d	r8,r7[-164]
8000770c:	04 9a       	mov	r10,r2
8000770e:	06 9b       	mov	r11,r3
80007710:	f0 16 00 03 	mcall	r6[12]
80007714:	14 98       	mov	r8,r10
80007716:	16 99       	mov	r9,r11
80007718:	00 9a       	mov	r10,r0
8000771a:	02 9b       	mov	r11,r1
8000771c:	f0 16 00 05 	mcall	r6[20]
80007720:	14 98       	mov	r8,r10
80007722:	16 99       	mov	r9,r11
80007724:	ee e9 ff e0 	st.d	r7[-32],r8
	FPF20 = P[axis][2][0] + dt * ( P[axis][2][1] );
80007728:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000772c:	ec fa 00 18 	ld.w	r10,r6[24]
80007730:	12 98       	mov	r8,r9
80007732:	a3 78       	lsl	r8,0x3
80007734:	12 08       	add	r8,r9
80007736:	a3 78       	lsl	r8,0x3
80007738:	f4 08 00 08 	add	r8,r10,r8
8000773c:	2d 08       	sub	r8,-48
8000773e:	f0 e2 00 00 	ld.d	r2,r8[0]
80007742:	ee fc ff a4 	ld.w	r12,r7[-92]
80007746:	f0 16 00 02 	mcall	r6[8]
8000774a:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000774e:	ec fc 00 18 	ld.w	r12,r6[24]
80007752:	12 98       	mov	r8,r9
80007754:	a3 78       	lsl	r8,0x3
80007756:	12 08       	add	r8,r9
80007758:	a3 78       	lsl	r8,0x3
8000775a:	f8 08 00 08 	add	r8,r12,r8
8000775e:	2c 88       	sub	r8,-56
80007760:	f0 e8 00 00 	ld.d	r8,r8[0]
80007764:	f0 16 00 03 	mcall	r6[12]
80007768:	14 98       	mov	r8,r10
8000776a:	16 99       	mov	r9,r11
8000776c:	04 9a       	mov	r10,r2
8000776e:	06 9b       	mov	r11,r3
80007770:	f0 16 00 05 	mcall	r6[20]
80007774:	14 98       	mov	r8,r10
80007776:	16 99       	mov	r9,r11
80007778:	ee e9 ff e8 	st.d	r7[-24],r8
	FPF21 = P[axis][2][1] + dt * (-P[axis][2][2] );
8000777c:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007780:	ec fa 00 18 	ld.w	r10,r6[24]
80007784:	12 98       	mov	r8,r9
80007786:	a3 78       	lsl	r8,0x3
80007788:	12 08       	add	r8,r9
8000778a:	a3 78       	lsl	r8,0x3
8000778c:	f4 08 00 08 	add	r8,r10,r8
80007790:	2c 88       	sub	r8,-56
80007792:	f0 e2 00 00 	ld.d	r2,r8[0]
80007796:	ee fc ff a4 	ld.w	r12,r7[-92]
8000779a:	f0 16 00 02 	mcall	r6[8]
8000779e:	ee f9 ff ac 	ld.w	r9,r7[-84]
800077a2:	ec fc 00 18 	ld.w	r12,r6[24]
800077a6:	12 98       	mov	r8,r9
800077a8:	a3 78       	lsl	r8,0x3
800077aa:	12 08       	add	r8,r9
800077ac:	a3 78       	lsl	r8,0x3
800077ae:	f8 08 00 08 	add	r8,r12,r8
800077b2:	2c 08       	sub	r8,-64
800077b4:	f0 e8 00 00 	ld.d	r8,r8[0]
800077b8:	12 95       	mov	r5,r9
800077ba:	ee 15 80 00 	eorh	r5,0x8000
800077be:	ef 45 ff 64 	st.w	r7[-156],r5
800077c2:	10 94       	mov	r4,r8
800077c4:	ef 44 ff 68 	st.w	r7[-152],r4
800077c8:	ee e8 ff 64 	ld.d	r8,r7[-156]
800077cc:	f0 16 00 03 	mcall	r6[12]
800077d0:	14 98       	mov	r8,r10
800077d2:	16 99       	mov	r9,r11
800077d4:	04 9a       	mov	r10,r2
800077d6:	06 9b       	mov	r11,r3
800077d8:	f0 16 00 05 	mcall	r6[20]
800077dc:	14 98       	mov	r8,r10
800077de:	16 99       	mov	r9,r11
800077e0:	ee e9 ff f0 	st.d	r7[-16],r8
	FPF22 = P[axis][2][2];
800077e4:	ee f9 ff ac 	ld.w	r9,r7[-84]
800077e8:	ec fa 00 18 	ld.w	r10,r6[24]
800077ec:	12 98       	mov	r8,r9
800077ee:	a3 78       	lsl	r8,0x3
800077f0:	12 08       	add	r8,r9
800077f2:	a3 78       	lsl	r8,0x3
800077f4:	f4 08 00 08 	add	r8,r10,r8
800077f8:	2c 08       	sub	r8,-64
800077fa:	f0 e8 00 00 	ld.d	r8,r8[0]
800077fe:	ee e9 ff f8 	st.d	r7[-8],r8
	// P = F*P*F' + Q
	P[axis][0][0] = FPF00 + Q[axis][POSITION];
80007802:	ee f5 ff ac 	ld.w	r5,r7[-84]
80007806:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000780a:	ec fa 00 d8 	ld.w	r10,r6[216]
8000780e:	12 98       	mov	r8,r9
80007810:	a1 78       	lsl	r8,0x1
80007812:	12 08       	add	r8,r9
80007814:	a3 78       	lsl	r8,0x3
80007816:	f4 08 00 08 	add	r8,r10,r8
8000781a:	f0 ea 00 00 	ld.d	r10,r8[0]
8000781e:	ee e8 ff b8 	ld.d	r8,r7[-72]
80007822:	f0 16 00 05 	mcall	r6[20]
80007826:	14 98       	mov	r8,r10
80007828:	16 99       	mov	r9,r11
8000782a:	10 9a       	mov	r10,r8
8000782c:	12 9b       	mov	r11,r9
8000782e:	ec f9 00 18 	ld.w	r9,r6[24]
80007832:	0a 98       	mov	r8,r5
80007834:	a3 78       	lsl	r8,0x3
80007836:	0a 08       	add	r8,r5
80007838:	a3 78       	lsl	r8,0x3
8000783a:	f2 08 00 08 	add	r8,r9,r8
8000783e:	f0 eb 00 00 	st.d	r8[0],r10
	P[axis][0][1] = FPF01;
80007842:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007846:	ec fa 00 18 	ld.w	r10,r6[24]
8000784a:	12 98       	mov	r8,r9
8000784c:	a3 78       	lsl	r8,0x3
8000784e:	12 08       	add	r8,r9
80007850:	f0 cb ff ff 	sub	r11,r8,-1
80007854:	ee e8 ff c0 	ld.d	r8,r7[-64]
80007858:	f4 0b 08 38 	st.d	r10[r11<<0x3],r8
	P[axis][0][2] = FPF02;
8000785c:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007860:	ec fa 00 18 	ld.w	r10,r6[24]
80007864:	12 98       	mov	r8,r9
80007866:	a3 78       	lsl	r8,0x3
80007868:	12 08       	add	r8,r9
8000786a:	a3 78       	lsl	r8,0x3
8000786c:	f4 08 00 08 	add	r8,r10,r8
80007870:	f0 ca ff f0 	sub	r10,r8,-16
80007874:	ee e8 ff c8 	ld.d	r8,r7[-56]
80007878:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][1][0] = FPF10;
8000787c:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007880:	ec fa 00 18 	ld.w	r10,r6[24]
80007884:	12 98       	mov	r8,r9
80007886:	a3 78       	lsl	r8,0x3
80007888:	12 08       	add	r8,r9
8000788a:	a3 78       	lsl	r8,0x3
8000788c:	f4 08 00 08 	add	r8,r10,r8
80007890:	f0 ca ff e8 	sub	r10,r8,-24
80007894:	ee e8 ff d0 	ld.d	r8,r7[-48]
80007898:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][1][1] = FPF11 + Q[axis][SPEED];
8000789c:	ee f5 ff ac 	ld.w	r5,r7[-84]
800078a0:	ee f9 ff ac 	ld.w	r9,r7[-84]
800078a4:	ec fa 00 d8 	ld.w	r10,r6[216]
800078a8:	12 98       	mov	r8,r9
800078aa:	a1 78       	lsl	r8,0x1
800078ac:	12 08       	add	r8,r9
800078ae:	2f f8       	sub	r8,-1
800078b0:	f4 08 02 3a 	ld.d	r10,r10[r8<<0x3]
800078b4:	ee e8 ff d8 	ld.d	r8,r7[-40]
800078b8:	f0 16 00 05 	mcall	r6[20]
800078bc:	14 98       	mov	r8,r10
800078be:	16 99       	mov	r9,r11
800078c0:	10 9a       	mov	r10,r8
800078c2:	12 9b       	mov	r11,r9
800078c4:	ec f9 00 18 	ld.w	r9,r6[24]
800078c8:	0a 98       	mov	r8,r5
800078ca:	a3 78       	lsl	r8,0x3
800078cc:	0a 08       	add	r8,r5
800078ce:	a3 78       	lsl	r8,0x3
800078d0:	f2 08 00 08 	add	r8,r9,r8
800078d4:	2e 08       	sub	r8,-32
800078d6:	f0 eb 00 00 	st.d	r8[0],r10
	P[axis][1][2] = FPF12;
800078da:	ee f9 ff ac 	ld.w	r9,r7[-84]
800078de:	ec fa 00 18 	ld.w	r10,r6[24]
800078e2:	12 98       	mov	r8,r9
800078e4:	a3 78       	lsl	r8,0x3
800078e6:	12 08       	add	r8,r9
800078e8:	a3 78       	lsl	r8,0x3
800078ea:	f4 08 00 08 	add	r8,r10,r8
800078ee:	f0 ca ff d8 	sub	r10,r8,-40
800078f2:	ee e8 ff e0 	ld.d	r8,r7[-32]
800078f6:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][2][0] = FPF20;
800078fa:	ee f9 ff ac 	ld.w	r9,r7[-84]
800078fe:	ec fa 00 18 	ld.w	r10,r6[24]
80007902:	12 98       	mov	r8,r9
80007904:	a3 78       	lsl	r8,0x3
80007906:	12 08       	add	r8,r9
80007908:	a3 78       	lsl	r8,0x3
8000790a:	f4 08 00 08 	add	r8,r10,r8
8000790e:	f0 ca ff d0 	sub	r10,r8,-48
80007912:	ee e8 ff e8 	ld.d	r8,r7[-24]
80007916:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][2][1] = FPF21;
8000791a:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000791e:	ec fa 00 18 	ld.w	r10,r6[24]
80007922:	12 98       	mov	r8,r9
80007924:	a3 78       	lsl	r8,0x3
80007926:	12 08       	add	r8,r9
80007928:	a3 78       	lsl	r8,0x3
8000792a:	f4 08 00 08 	add	r8,r10,r8
8000792e:	f0 ca ff c8 	sub	r10,r8,-56
80007932:	ee e8 ff f0 	ld.d	r8,r7[-16]
80007936:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][2][2] = FPF22 + Q[axis][BIAIS];
8000793a:	ee f5 ff ac 	ld.w	r5,r7[-84]
8000793e:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007942:	ec fa 00 d8 	ld.w	r10,r6[216]
80007946:	12 98       	mov	r8,r9
80007948:	a1 78       	lsl	r8,0x1
8000794a:	12 08       	add	r8,r9
8000794c:	a3 78       	lsl	r8,0x3
8000794e:	f4 08 00 08 	add	r8,r10,r8
80007952:	2f 08       	sub	r8,-16
80007954:	f0 ea 00 00 	ld.d	r10,r8[0]
80007958:	ee e8 ff f8 	ld.d	r8,r7[-8]
8000795c:	f0 16 00 05 	mcall	r6[20]
80007960:	14 98       	mov	r8,r10
80007962:	16 99       	mov	r9,r11
80007964:	10 9a       	mov	r10,r8
80007966:	12 9b       	mov	r11,r9
80007968:	ec f9 00 18 	ld.w	r9,r6[24]
8000796c:	0a 98       	mov	r8,r5
8000796e:	a3 78       	lsl	r8,0x3
80007970:	0a 08       	add	r8,r5
80007972:	a3 78       	lsl	r8,0x3
80007974:	f2 08 00 08 	add	r8,r9,r8
80007978:	2c 08       	sub	r8,-64
8000797a:	f0 eb 00 00 	st.d	r8[0],r10
	
	
	/*************************************************************************************/
	FPF00 = P2[axis][0][0] + dt * ( P2[axis][1][0] + P2[axis][0][1] + dt * P2[axis][1][1] );
8000797e:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007982:	ec fa 00 1c 	ld.w	r10,r6[28]
80007986:	12 98       	mov	r8,r9
80007988:	a3 78       	lsl	r8,0x3
8000798a:	12 08       	add	r8,r9
8000798c:	a3 78       	lsl	r8,0x3
8000798e:	f4 08 00 08 	add	r8,r10,r8
80007992:	f0 ea 00 00 	ld.d	r10,r8[0]
80007996:	ee eb ff 6c 	st.d	r7[-148],r10
8000799a:	ee fc ff a4 	ld.w	r12,r7[-92]
8000799e:	f0 16 00 02 	mcall	r6[8]
800079a2:	14 90       	mov	r0,r10
800079a4:	16 91       	mov	r1,r11
800079a6:	ee f9 ff ac 	ld.w	r9,r7[-84]
800079aa:	ec fa 00 1c 	ld.w	r10,r6[28]
800079ae:	12 98       	mov	r8,r9
800079b0:	a3 78       	lsl	r8,0x3
800079b2:	12 08       	add	r8,r9
800079b4:	a3 78       	lsl	r8,0x3
800079b6:	f4 08 00 08 	add	r8,r10,r8
800079ba:	2e 88       	sub	r8,-24
800079bc:	f0 ea 00 00 	ld.d	r10,r8[0]
800079c0:	ee f9 ff ac 	ld.w	r9,r7[-84]
800079c4:	ec fc 00 1c 	ld.w	r12,r6[28]
800079c8:	12 98       	mov	r8,r9
800079ca:	a3 78       	lsl	r8,0x3
800079cc:	12 08       	add	r8,r9
800079ce:	2f f8       	sub	r8,-1
800079d0:	f8 08 02 38 	ld.d	r8,r12[r8<<0x3]
800079d4:	f0 16 00 05 	mcall	r6[20]
800079d8:	14 98       	mov	r8,r10
800079da:	16 99       	mov	r9,r11
800079dc:	10 92       	mov	r2,r8
800079de:	12 93       	mov	r3,r9
800079e0:	ee fc ff a4 	ld.w	r12,r7[-92]
800079e4:	f0 16 00 02 	mcall	r6[8]
800079e8:	ee f9 ff ac 	ld.w	r9,r7[-84]
800079ec:	ec fc 00 1c 	ld.w	r12,r6[28]
800079f0:	12 98       	mov	r8,r9
800079f2:	a3 78       	lsl	r8,0x3
800079f4:	12 08       	add	r8,r9
800079f6:	a3 78       	lsl	r8,0x3
800079f8:	f8 08 00 08 	add	r8,r12,r8
800079fc:	2e 08       	sub	r8,-32
800079fe:	f0 e8 00 00 	ld.d	r8,r8[0]
80007a02:	f0 16 00 03 	mcall	r6[12]
80007a06:	14 98       	mov	r8,r10
80007a08:	16 99       	mov	r9,r11
80007a0a:	04 9a       	mov	r10,r2
80007a0c:	06 9b       	mov	r11,r3
80007a0e:	f0 16 00 05 	mcall	r6[20]
80007a12:	14 98       	mov	r8,r10
80007a14:	16 99       	mov	r9,r11
80007a16:	00 9a       	mov	r10,r0
80007a18:	02 9b       	mov	r11,r1
80007a1a:	f0 16 00 03 	mcall	r6[12]
80007a1e:	14 98       	mov	r8,r10
80007a20:	16 99       	mov	r9,r11
80007a22:	ee ea ff 6c 	ld.d	r10,r7[-148]
80007a26:	f0 16 00 05 	mcall	r6[20]
80007a2a:	14 98       	mov	r8,r10
80007a2c:	16 99       	mov	r9,r11
80007a2e:	ee e9 ff b8 	st.d	r7[-72],r8
	FPF01 = P2[axis][0][1] + dt * ( P2[axis][1][1] - P2[axis][0][2] - dt * P2[axis][1][2] );
80007a32:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007a36:	ec fa 00 1c 	ld.w	r10,r6[28]
80007a3a:	12 98       	mov	r8,r9
80007a3c:	a3 78       	lsl	r8,0x3
80007a3e:	12 08       	add	r8,r9
80007a40:	2f f8       	sub	r8,-1
80007a42:	f4 08 02 34 	ld.d	r4,r10[r8<<0x3]
80007a46:	ee e5 ff 74 	st.d	r7[-140],r4
80007a4a:	ee fc ff a4 	ld.w	r12,r7[-92]
80007a4e:	f0 16 00 02 	mcall	r6[8]
80007a52:	14 90       	mov	r0,r10
80007a54:	16 91       	mov	r1,r11
80007a56:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007a5a:	ec fa 00 1c 	ld.w	r10,r6[28]
80007a5e:	12 98       	mov	r8,r9
80007a60:	a3 78       	lsl	r8,0x3
80007a62:	12 08       	add	r8,r9
80007a64:	a3 78       	lsl	r8,0x3
80007a66:	f4 08 00 08 	add	r8,r10,r8
80007a6a:	2e 08       	sub	r8,-32
80007a6c:	f0 ea 00 00 	ld.d	r10,r8[0]
80007a70:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007a74:	ec fc 00 1c 	ld.w	r12,r6[28]
80007a78:	12 98       	mov	r8,r9
80007a7a:	a3 78       	lsl	r8,0x3
80007a7c:	12 08       	add	r8,r9
80007a7e:	a3 78       	lsl	r8,0x3
80007a80:	f8 08 00 08 	add	r8,r12,r8
80007a84:	2f 08       	sub	r8,-16
80007a86:	f0 e8 00 00 	ld.d	r8,r8[0]
80007a8a:	f0 16 00 11 	mcall	r6[68]
80007a8e:	14 98       	mov	r8,r10
80007a90:	16 99       	mov	r9,r11
80007a92:	10 92       	mov	r2,r8
80007a94:	12 93       	mov	r3,r9
80007a96:	ee fc ff a4 	ld.w	r12,r7[-92]
80007a9a:	f0 16 00 02 	mcall	r6[8]
80007a9e:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007aa2:	ec fc 00 1c 	ld.w	r12,r6[28]
80007aa6:	12 98       	mov	r8,r9
80007aa8:	a3 78       	lsl	r8,0x3
80007aaa:	12 08       	add	r8,r9
80007aac:	a3 78       	lsl	r8,0x3
80007aae:	f8 08 00 08 	add	r8,r12,r8
80007ab2:	2d 88       	sub	r8,-40
80007ab4:	f0 e8 00 00 	ld.d	r8,r8[0]
80007ab8:	f0 16 00 03 	mcall	r6[12]
80007abc:	14 98       	mov	r8,r10
80007abe:	16 99       	mov	r9,r11
80007ac0:	04 9a       	mov	r10,r2
80007ac2:	06 9b       	mov	r11,r3
80007ac4:	f0 16 00 11 	mcall	r6[68]
80007ac8:	14 98       	mov	r8,r10
80007aca:	16 99       	mov	r9,r11
80007acc:	00 9a       	mov	r10,r0
80007ace:	02 9b       	mov	r11,r1
80007ad0:	f0 16 00 03 	mcall	r6[12]
80007ad4:	14 98       	mov	r8,r10
80007ad6:	16 99       	mov	r9,r11
80007ad8:	ee ea ff 74 	ld.d	r10,r7[-140]
80007adc:	f0 16 00 05 	mcall	r6[20]
80007ae0:	14 98       	mov	r8,r10
80007ae2:	16 99       	mov	r9,r11
80007ae4:	ee e9 ff c0 	st.d	r7[-64],r8
	FPF02 = P2[axis][0][2] + dt * ( P2[axis][1][2] );
80007ae8:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007aec:	ec fa 00 1c 	ld.w	r10,r6[28]
80007af0:	12 98       	mov	r8,r9
80007af2:	a3 78       	lsl	r8,0x3
80007af4:	12 08       	add	r8,r9
80007af6:	a3 78       	lsl	r8,0x3
80007af8:	f4 08 00 08 	add	r8,r10,r8
80007afc:	2f 08       	sub	r8,-16
80007afe:	f0 e2 00 00 	ld.d	r2,r8[0]
80007b02:	ee fc ff a4 	ld.w	r12,r7[-92]
80007b06:	f0 16 00 02 	mcall	r6[8]
80007b0a:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007b0e:	ec fc 00 1c 	ld.w	r12,r6[28]
80007b12:	12 98       	mov	r8,r9
80007b14:	a3 78       	lsl	r8,0x3
80007b16:	12 08       	add	r8,r9
80007b18:	a3 78       	lsl	r8,0x3
80007b1a:	f8 08 00 08 	add	r8,r12,r8
80007b1e:	2d 88       	sub	r8,-40
80007b20:	f0 e8 00 00 	ld.d	r8,r8[0]
80007b24:	f0 16 00 03 	mcall	r6[12]
80007b28:	14 98       	mov	r8,r10
80007b2a:	16 99       	mov	r9,r11
80007b2c:	04 9a       	mov	r10,r2
80007b2e:	06 9b       	mov	r11,r3
80007b30:	f0 16 00 05 	mcall	r6[20]
80007b34:	14 98       	mov	r8,r10
80007b36:	16 99       	mov	r9,r11
80007b38:	ee e9 ff c8 	st.d	r7[-56],r8
	FPF10 = P2[axis][1][0] + dt * (-P2[axis][2][0] + P2[axis][1][1] - dt * P2[axis][2][1] );
80007b3c:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007b40:	ec fa 00 1c 	ld.w	r10,r6[28]
80007b44:	12 98       	mov	r8,r9
80007b46:	a3 78       	lsl	r8,0x3
80007b48:	12 08       	add	r8,r9
80007b4a:	a3 78       	lsl	r8,0x3
80007b4c:	f4 08 00 08 	add	r8,r10,r8
80007b50:	2e 88       	sub	r8,-24
80007b52:	f0 ea 00 00 	ld.d	r10,r8[0]
80007b56:	ee eb ff 7c 	st.d	r7[-132],r10
80007b5a:	ee fc ff a4 	ld.w	r12,r7[-92]
80007b5e:	f0 16 00 02 	mcall	r6[8]
80007b62:	14 90       	mov	r0,r10
80007b64:	16 91       	mov	r1,r11
80007b66:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007b6a:	ec fa 00 1c 	ld.w	r10,r6[28]
80007b6e:	12 98       	mov	r8,r9
80007b70:	a3 78       	lsl	r8,0x3
80007b72:	12 08       	add	r8,r9
80007b74:	a3 78       	lsl	r8,0x3
80007b76:	f4 08 00 08 	add	r8,r10,r8
80007b7a:	2e 08       	sub	r8,-32
80007b7c:	f0 ea 00 00 	ld.d	r10,r8[0]
80007b80:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007b84:	ec fc 00 1c 	ld.w	r12,r6[28]
80007b88:	12 98       	mov	r8,r9
80007b8a:	a3 78       	lsl	r8,0x3
80007b8c:	12 08       	add	r8,r9
80007b8e:	a3 78       	lsl	r8,0x3
80007b90:	f8 08 00 08 	add	r8,r12,r8
80007b94:	2d 08       	sub	r8,-48
80007b96:	f0 e8 00 00 	ld.d	r8,r8[0]
80007b9a:	f0 16 00 11 	mcall	r6[68]
80007b9e:	14 98       	mov	r8,r10
80007ba0:	16 99       	mov	r9,r11
80007ba2:	10 92       	mov	r2,r8
80007ba4:	12 93       	mov	r3,r9
80007ba6:	ee fc ff a4 	ld.w	r12,r7[-92]
80007baa:	f0 16 00 02 	mcall	r6[8]
80007bae:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007bb2:	ec fc 00 1c 	ld.w	r12,r6[28]
80007bb6:	12 98       	mov	r8,r9
80007bb8:	a3 78       	lsl	r8,0x3
80007bba:	12 08       	add	r8,r9
80007bbc:	a3 78       	lsl	r8,0x3
80007bbe:	f8 08 00 08 	add	r8,r12,r8
80007bc2:	2c 88       	sub	r8,-56
80007bc4:	f0 e8 00 00 	ld.d	r8,r8[0]
80007bc8:	f0 16 00 03 	mcall	r6[12]
80007bcc:	14 98       	mov	r8,r10
80007bce:	16 99       	mov	r9,r11
80007bd0:	04 9a       	mov	r10,r2
80007bd2:	06 9b       	mov	r11,r3
80007bd4:	f0 16 00 11 	mcall	r6[68]
80007bd8:	14 98       	mov	r8,r10
80007bda:	16 99       	mov	r9,r11
80007bdc:	00 9a       	mov	r10,r0
80007bde:	02 9b       	mov	r11,r1
80007be0:	f0 16 00 03 	mcall	r6[12]
80007be4:	14 98       	mov	r8,r10
80007be6:	16 99       	mov	r9,r11
80007be8:	ee ea ff 7c 	ld.d	r10,r7[-132]
80007bec:	f0 16 00 05 	mcall	r6[20]
80007bf0:	14 98       	mov	r8,r10
80007bf2:	16 99       	mov	r9,r11
80007bf4:	ee e9 ff d0 	st.d	r7[-48],r8
	FPF11 = P2[axis][1][1] + dt * (-P2[axis][2][1] - P2[axis][1][2] + dt * P2[axis][2][2] );
80007bf8:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007bfc:	ec fa 00 1c 	ld.w	r10,r6[28]
80007c00:	12 98       	mov	r8,r9
80007c02:	a3 78       	lsl	r8,0x3
80007c04:	12 08       	add	r8,r9
80007c06:	a3 78       	lsl	r8,0x3
80007c08:	f4 08 00 08 	add	r8,r10,r8
80007c0c:	2e 08       	sub	r8,-32
80007c0e:	f0 e0 00 00 	ld.d	r0,r8[0]
80007c12:	ee fc ff a4 	ld.w	r12,r7[-92]
80007c16:	f0 16 00 02 	mcall	r6[8]
80007c1a:	ee eb ff 84 	st.d	r7[-124],r10
80007c1e:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007c22:	ec fa 00 1c 	ld.w	r10,r6[28]
80007c26:	12 98       	mov	r8,r9
80007c28:	a3 78       	lsl	r8,0x3
80007c2a:	12 08       	add	r8,r9
80007c2c:	a3 78       	lsl	r8,0x3
80007c2e:	f4 08 00 08 	add	r8,r10,r8
80007c32:	2c 88       	sub	r8,-56
80007c34:	f0 e8 00 00 	ld.d	r8,r8[0]
80007c38:	12 9a       	mov	r10,r9
80007c3a:	ee 1a 80 00 	eorh	r10,0x8000
80007c3e:	ef 4a ff 8c 	st.w	r7[-116],r10
80007c42:	10 95       	mov	r5,r8
80007c44:	ef 45 ff 90 	st.w	r7[-112],r5
80007c48:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007c4c:	ec fa 00 1c 	ld.w	r10,r6[28]
80007c50:	12 98       	mov	r8,r9
80007c52:	a3 78       	lsl	r8,0x3
80007c54:	12 08       	add	r8,r9
80007c56:	a3 78       	lsl	r8,0x3
80007c58:	f4 08 00 08 	add	r8,r10,r8
80007c5c:	2d 88       	sub	r8,-40
80007c5e:	f0 e8 00 00 	ld.d	r8,r8[0]
80007c62:	ee ea ff 8c 	ld.d	r10,r7[-116]
80007c66:	f0 16 00 11 	mcall	r6[68]
80007c6a:	14 98       	mov	r8,r10
80007c6c:	16 99       	mov	r9,r11
80007c6e:	10 92       	mov	r2,r8
80007c70:	12 93       	mov	r3,r9
80007c72:	ee fc ff a4 	ld.w	r12,r7[-92]
80007c76:	f0 16 00 02 	mcall	r6[8]
80007c7a:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007c7e:	ec fc 00 1c 	ld.w	r12,r6[28]
80007c82:	12 98       	mov	r8,r9
80007c84:	a3 78       	lsl	r8,0x3
80007c86:	12 08       	add	r8,r9
80007c88:	a3 78       	lsl	r8,0x3
80007c8a:	f8 08 00 08 	add	r8,r12,r8
80007c8e:	2c 08       	sub	r8,-64
80007c90:	f0 e8 00 00 	ld.d	r8,r8[0]
80007c94:	f0 16 00 03 	mcall	r6[12]
80007c98:	14 98       	mov	r8,r10
80007c9a:	16 99       	mov	r9,r11
80007c9c:	04 9a       	mov	r10,r2
80007c9e:	06 9b       	mov	r11,r3
80007ca0:	f0 16 00 05 	mcall	r6[20]
80007ca4:	14 98       	mov	r8,r10
80007ca6:	16 99       	mov	r9,r11
80007ca8:	ee ea ff 84 	ld.d	r10,r7[-124]
80007cac:	f0 16 00 03 	mcall	r6[12]
80007cb0:	14 98       	mov	r8,r10
80007cb2:	16 99       	mov	r9,r11
80007cb4:	00 9a       	mov	r10,r0
80007cb6:	02 9b       	mov	r11,r1
80007cb8:	f0 16 00 05 	mcall	r6[20]
80007cbc:	14 98       	mov	r8,r10
80007cbe:	16 99       	mov	r9,r11
80007cc0:	ee e9 ff d8 	st.d	r7[-40],r8
	FPF12 = P2[axis][1][2] + dt * (-P2[axis][2][2] );
80007cc4:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007cc8:	ec fa 00 1c 	ld.w	r10,r6[28]
80007ccc:	12 98       	mov	r8,r9
80007cce:	a3 78       	lsl	r8,0x3
80007cd0:	12 08       	add	r8,r9
80007cd2:	a3 78       	lsl	r8,0x3
80007cd4:	f4 08 00 08 	add	r8,r10,r8
80007cd8:	2d 88       	sub	r8,-40
80007cda:	f0 e2 00 00 	ld.d	r2,r8[0]
80007cde:	ee fc ff a4 	ld.w	r12,r7[-92]
80007ce2:	f0 16 00 02 	mcall	r6[8]
80007ce6:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007cea:	ec fc 00 1c 	ld.w	r12,r6[28]
80007cee:	12 98       	mov	r8,r9
80007cf0:	a3 78       	lsl	r8,0x3
80007cf2:	12 08       	add	r8,r9
80007cf4:	a3 78       	lsl	r8,0x3
80007cf6:	f8 08 00 08 	add	r8,r12,r8
80007cfa:	2c 08       	sub	r8,-64
80007cfc:	f0 e8 00 00 	ld.d	r8,r8[0]
80007d00:	12 94       	mov	r4,r9
80007d02:	ee 14 80 00 	eorh	r4,0x8000
80007d06:	ef 44 ff 94 	st.w	r7[-108],r4
80007d0a:	10 9c       	mov	r12,r8
80007d0c:	ef 4c ff 98 	st.w	r7[-104],r12
80007d10:	ee e8 ff 94 	ld.d	r8,r7[-108]
80007d14:	f0 16 00 03 	mcall	r6[12]
80007d18:	14 98       	mov	r8,r10
80007d1a:	16 99       	mov	r9,r11
80007d1c:	04 9a       	mov	r10,r2
80007d1e:	06 9b       	mov	r11,r3
80007d20:	f0 16 00 05 	mcall	r6[20]
80007d24:	14 98       	mov	r8,r10
80007d26:	16 99       	mov	r9,r11
80007d28:	ee e9 ff e0 	st.d	r7[-32],r8
	FPF20 = P2[axis][2][0] + dt * ( P2[axis][2][1] );
80007d2c:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007d30:	ec fa 00 1c 	ld.w	r10,r6[28]
80007d34:	12 98       	mov	r8,r9
80007d36:	a3 78       	lsl	r8,0x3
80007d38:	12 08       	add	r8,r9
80007d3a:	a3 78       	lsl	r8,0x3
80007d3c:	f4 08 00 08 	add	r8,r10,r8
80007d40:	2d 08       	sub	r8,-48
80007d42:	f0 e2 00 00 	ld.d	r2,r8[0]
80007d46:	ee fc ff a4 	ld.w	r12,r7[-92]
80007d4a:	f0 16 00 02 	mcall	r6[8]
80007d4e:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007d52:	ec fc 00 1c 	ld.w	r12,r6[28]
80007d56:	12 98       	mov	r8,r9
80007d58:	a3 78       	lsl	r8,0x3
80007d5a:	12 08       	add	r8,r9
80007d5c:	a3 78       	lsl	r8,0x3
80007d5e:	f8 08 00 08 	add	r8,r12,r8
80007d62:	2c 88       	sub	r8,-56
80007d64:	f0 e8 00 00 	ld.d	r8,r8[0]
80007d68:	f0 16 00 03 	mcall	r6[12]
80007d6c:	14 98       	mov	r8,r10
80007d6e:	16 99       	mov	r9,r11
80007d70:	04 9a       	mov	r10,r2
80007d72:	06 9b       	mov	r11,r3
80007d74:	f0 16 00 05 	mcall	r6[20]
80007d78:	14 98       	mov	r8,r10
80007d7a:	16 99       	mov	r9,r11
80007d7c:	ee e9 ff e8 	st.d	r7[-24],r8
	FPF21 = P2[axis][2][1] + dt * (-P2[axis][2][2] );
80007d80:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007d84:	ec fa 00 1c 	ld.w	r10,r6[28]
80007d88:	12 98       	mov	r8,r9
80007d8a:	a3 78       	lsl	r8,0x3
80007d8c:	12 08       	add	r8,r9
80007d8e:	a3 78       	lsl	r8,0x3
80007d90:	f4 08 00 08 	add	r8,r10,r8
80007d94:	2c 88       	sub	r8,-56
80007d96:	f0 e2 00 00 	ld.d	r2,r8[0]
80007d9a:	ee fc ff a4 	ld.w	r12,r7[-92]
80007d9e:	f0 16 00 02 	mcall	r6[8]
80007da2:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007da6:	ec fc 00 1c 	ld.w	r12,r6[28]
80007daa:	12 98       	mov	r8,r9
80007dac:	a3 78       	lsl	r8,0x3
80007dae:	12 08       	add	r8,r9
80007db0:	a3 78       	lsl	r8,0x3
80007db2:	f8 08 00 08 	add	r8,r12,r8
80007db6:	2c 08       	sub	r8,-64
80007db8:	f0 e8 00 00 	ld.d	r8,r8[0]
80007dbc:	12 95       	mov	r5,r9
80007dbe:	ee 15 80 00 	eorh	r5,0x8000
80007dc2:	ef 45 ff 9c 	st.w	r7[-100],r5
80007dc6:	10 94       	mov	r4,r8
80007dc8:	ef 44 ff a0 	st.w	r7[-96],r4
80007dcc:	ee e8 ff 9c 	ld.d	r8,r7[-100]
80007dd0:	f0 16 00 03 	mcall	r6[12]
80007dd4:	14 98       	mov	r8,r10
80007dd6:	16 99       	mov	r9,r11
80007dd8:	04 9a       	mov	r10,r2
80007dda:	06 9b       	mov	r11,r3
80007ddc:	f0 16 00 05 	mcall	r6[20]
80007de0:	14 98       	mov	r8,r10
80007de2:	16 99       	mov	r9,r11
80007de4:	ee e9 ff f0 	st.d	r7[-16],r8
	FPF22 = P2[axis][2][2];
80007de8:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007dec:	ec fa 00 1c 	ld.w	r10,r6[28]
80007df0:	12 98       	mov	r8,r9
80007df2:	a3 78       	lsl	r8,0x3
80007df4:	12 08       	add	r8,r9
80007df6:	a3 78       	lsl	r8,0x3
80007df8:	f4 08 00 08 	add	r8,r10,r8
80007dfc:	2c 08       	sub	r8,-64
80007dfe:	f0 e8 00 00 	ld.d	r8,r8[0]
80007e02:	ee e9 ff f8 	st.d	r7[-8],r8
	// P = F*P*F' + Q
	P2[axis][0][0] = FPF00 + Q2[axis][POSITION];
80007e06:	ee f5 ff ac 	ld.w	r5,r7[-84]
80007e0a:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007e0e:	ec fa 00 dc 	ld.w	r10,r6[220]
80007e12:	12 98       	mov	r8,r9
80007e14:	a1 78       	lsl	r8,0x1
80007e16:	12 08       	add	r8,r9
80007e18:	a3 78       	lsl	r8,0x3
80007e1a:	f4 08 00 08 	add	r8,r10,r8
80007e1e:	f0 ea 00 00 	ld.d	r10,r8[0]
80007e22:	ee e8 ff b8 	ld.d	r8,r7[-72]
80007e26:	f0 16 00 05 	mcall	r6[20]
80007e2a:	14 98       	mov	r8,r10
80007e2c:	16 99       	mov	r9,r11
80007e2e:	10 9a       	mov	r10,r8
80007e30:	12 9b       	mov	r11,r9
80007e32:	ec f9 00 1c 	ld.w	r9,r6[28]
80007e36:	0a 98       	mov	r8,r5
80007e38:	a3 78       	lsl	r8,0x3
80007e3a:	0a 08       	add	r8,r5
80007e3c:	a3 78       	lsl	r8,0x3
80007e3e:	f2 08 00 08 	add	r8,r9,r8
80007e42:	f0 eb 00 00 	st.d	r8[0],r10
	P2[axis][0][1] = FPF01;
80007e46:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007e4a:	ec fa 00 1c 	ld.w	r10,r6[28]
80007e4e:	12 98       	mov	r8,r9
80007e50:	a3 78       	lsl	r8,0x3
80007e52:	12 08       	add	r8,r9
80007e54:	f0 cb ff ff 	sub	r11,r8,-1
80007e58:	ee e8 ff c0 	ld.d	r8,r7[-64]
80007e5c:	f4 0b 08 38 	st.d	r10[r11<<0x3],r8
	P2[axis][0][2] = FPF02;
80007e60:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007e64:	ec fa 00 1c 	ld.w	r10,r6[28]
80007e68:	12 98       	mov	r8,r9
80007e6a:	a3 78       	lsl	r8,0x3
80007e6c:	12 08       	add	r8,r9
80007e6e:	a3 78       	lsl	r8,0x3
80007e70:	f4 08 00 08 	add	r8,r10,r8
80007e74:	f0 ca ff f0 	sub	r10,r8,-16
80007e78:	ee e8 ff c8 	ld.d	r8,r7[-56]
80007e7c:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][1][0] = FPF10;
80007e80:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007e84:	ec fa 00 1c 	ld.w	r10,r6[28]
80007e88:	12 98       	mov	r8,r9
80007e8a:	a3 78       	lsl	r8,0x3
80007e8c:	12 08       	add	r8,r9
80007e8e:	a3 78       	lsl	r8,0x3
80007e90:	f4 08 00 08 	add	r8,r10,r8
80007e94:	f0 ca ff e8 	sub	r10,r8,-24
80007e98:	ee e8 ff d0 	ld.d	r8,r7[-48]
80007e9c:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][1][1] = FPF11 + Q2[axis][SPEED];
80007ea0:	ee f5 ff ac 	ld.w	r5,r7[-84]
80007ea4:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007ea8:	ec fa 00 dc 	ld.w	r10,r6[220]
80007eac:	12 98       	mov	r8,r9
80007eae:	a1 78       	lsl	r8,0x1
80007eb0:	12 08       	add	r8,r9
80007eb2:	2f f8       	sub	r8,-1
80007eb4:	f4 08 02 3a 	ld.d	r10,r10[r8<<0x3]
80007eb8:	ee e8 ff d8 	ld.d	r8,r7[-40]
80007ebc:	f0 16 00 05 	mcall	r6[20]
80007ec0:	14 98       	mov	r8,r10
80007ec2:	16 99       	mov	r9,r11
80007ec4:	10 9a       	mov	r10,r8
80007ec6:	12 9b       	mov	r11,r9
80007ec8:	ec f9 00 1c 	ld.w	r9,r6[28]
80007ecc:	0a 98       	mov	r8,r5
80007ece:	a3 78       	lsl	r8,0x3
80007ed0:	0a 08       	add	r8,r5
80007ed2:	a3 78       	lsl	r8,0x3
80007ed4:	f2 08 00 08 	add	r8,r9,r8
80007ed8:	2e 08       	sub	r8,-32
80007eda:	f0 eb 00 00 	st.d	r8[0],r10
	P2[axis][1][2] = FPF12;
80007ede:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007ee2:	ec fa 00 1c 	ld.w	r10,r6[28]
80007ee6:	12 98       	mov	r8,r9
80007ee8:	a3 78       	lsl	r8,0x3
80007eea:	12 08       	add	r8,r9
80007eec:	a3 78       	lsl	r8,0x3
80007eee:	f4 08 00 08 	add	r8,r10,r8
80007ef2:	f0 ca ff d8 	sub	r10,r8,-40
80007ef6:	ee e8 ff e0 	ld.d	r8,r7[-32]
80007efa:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][2][0] = FPF20;
80007efe:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007f02:	ec fa 00 1c 	ld.w	r10,r6[28]
80007f06:	12 98       	mov	r8,r9
80007f08:	a3 78       	lsl	r8,0x3
80007f0a:	12 08       	add	r8,r9
80007f0c:	a3 78       	lsl	r8,0x3
80007f0e:	f4 08 00 08 	add	r8,r10,r8
80007f12:	f0 ca ff d0 	sub	r10,r8,-48
80007f16:	ee e8 ff e8 	ld.d	r8,r7[-24]
80007f1a:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][2][1] = FPF21;
80007f1e:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007f22:	ec fa 00 1c 	ld.w	r10,r6[28]
80007f26:	12 98       	mov	r8,r9
80007f28:	a3 78       	lsl	r8,0x3
80007f2a:	12 08       	add	r8,r9
80007f2c:	a3 78       	lsl	r8,0x3
80007f2e:	f4 08 00 08 	add	r8,r10,r8
80007f32:	f0 ca ff c8 	sub	r10,r8,-56
80007f36:	ee e8 ff f0 	ld.d	r8,r7[-16]
80007f3a:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][2][2] = FPF22 + Q2[axis][BIAIS];
80007f3e:	ee f5 ff ac 	ld.w	r5,r7[-84]
80007f42:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007f46:	ec fa 00 dc 	ld.w	r10,r6[220]
80007f4a:	12 98       	mov	r8,r9
80007f4c:	a1 78       	lsl	r8,0x1
80007f4e:	12 08       	add	r8,r9
80007f50:	a3 78       	lsl	r8,0x3
80007f52:	f4 08 00 08 	add	r8,r10,r8
80007f56:	2f 08       	sub	r8,-16
80007f58:	f0 ea 00 00 	ld.d	r10,r8[0]
80007f5c:	ee e8 ff f8 	ld.d	r8,r7[-8]
80007f60:	f0 16 00 05 	mcall	r6[20]
80007f64:	14 98       	mov	r8,r10
80007f66:	16 99       	mov	r9,r11
80007f68:	10 9a       	mov	r10,r8
80007f6a:	12 9b       	mov	r11,r9
80007f6c:	ec f9 00 1c 	ld.w	r9,r6[28]
80007f70:	0a 98       	mov	r8,r5
80007f72:	a3 78       	lsl	r8,0x3
80007f74:	0a 08       	add	r8,r5
80007f76:	a3 78       	lsl	r8,0x3
80007f78:	f2 08 00 08 	add	r8,r9,r8
80007f7c:	2c 08       	sub	r8,-64
80007f7e:	f0 eb 00 00 	st.d	r8[0],r10
}
80007f82:	2c dd       	sub	sp,-204
80007f84:	d8 32       	popm	r0-r7,pc
80007f86:	00 00       	add	r0,r0
80007f88:	80 00       	ld.sh	r0,r0[0x0]
80007f8a:	71 0e       	ld.w	lr,r8[0x40]

80007f8c <e_kalman_predict_hf>:


void e_kalman_predict_hf(int axis, float accel_meas, float dt)
{
80007f8c:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
80007f90:	1a 97       	mov	r7,sp
80007f92:	20 fd       	sub	sp,60
80007f94:	fe f6 05 88 	ld.w	r6,pc[1416]
80007f98:	1e 26       	rsub	r6,pc
80007f9a:	ef 4c ff dc 	st.w	r7[-36],r12
80007f9e:	ef 4b ff d8 	st.w	r7[-40],r11
80007fa2:	ef 4a ff d4 	st.w	r7[-44],r10
	double FPF00,FPF01,FPF10,FPF11;
	
	centralData->estimation.state[axis][POSITION] = centralData->estimation.state[axis][POSITION] + dt * centralData->estimation.state[axis][SPEED] + dt*dt*accel_meas;
80007fa6:	ec f8 00 00 	ld.w	r8,r6[0]
80007faa:	70 01       	ld.w	r1,r8[0x0]
80007fac:	ee f5 ff dc 	ld.w	r5,r7[-36]
80007fb0:	ec f8 00 00 	ld.w	r8,r6[0]
80007fb4:	70 0a       	ld.w	r10,r8[0x0]
80007fb6:	ee f9 ff dc 	ld.w	r9,r7[-36]
80007fba:	12 98       	mov	r8,r9
80007fbc:	a1 78       	lsl	r8,0x1
80007fbe:	12 08       	add	r8,r9
80007fc0:	a3 78       	lsl	r8,0x3
80007fc2:	f4 08 00 08 	add	r8,r10,r8
80007fc6:	f0 c8 f4 a4 	sub	r8,r8,-2908
80007fca:	f0 e2 00 00 	ld.d	r2,r8[0]
80007fce:	ee fc ff d4 	ld.w	r12,r7[-44]
80007fd2:	f0 16 00 02 	mcall	r6[8]
80007fd6:	ec f8 00 00 	ld.w	r8,r6[0]
80007fda:	70 0c       	ld.w	r12,r8[0x0]
80007fdc:	ee f9 ff dc 	ld.w	r9,r7[-36]
80007fe0:	12 98       	mov	r8,r9
80007fe2:	a1 78       	lsl	r8,0x1
80007fe4:	12 08       	add	r8,r9
80007fe6:	2f f8       	sub	r8,-1
80007fe8:	a3 78       	lsl	r8,0x3
80007fea:	f8 08 00 08 	add	r8,r12,r8
80007fee:	f0 e8 0b 5c 	ld.d	r8,r8[2908]
80007ff2:	f0 16 00 03 	mcall	r6[12]
80007ff6:	14 98       	mov	r8,r10
80007ff8:	16 99       	mov	r9,r11
80007ffa:	04 9a       	mov	r10,r2
80007ffc:	06 9b       	mov	r11,r3
80007ffe:	f0 16 00 05 	mcall	r6[20]
80008002:	14 98       	mov	r8,r10
80008004:	16 99       	mov	r9,r11
80008006:	10 92       	mov	r2,r8
80008008:	12 93       	mov	r3,r9
8000800a:	ee f9 ff d4 	ld.w	r9,r7[-44]
8000800e:	ee f8 ff d4 	ld.w	r8,r7[-44]
80008012:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80008016:	ee f8 ff d8 	ld.w	r8,r7[-40]
8000801a:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8000801e:	10 9c       	mov	r12,r8
80008020:	f0 16 00 02 	mcall	r6[8]
80008024:	14 98       	mov	r8,r10
80008026:	16 99       	mov	r9,r11
80008028:	04 9a       	mov	r10,r2
8000802a:	06 9b       	mov	r11,r3
8000802c:	f0 16 00 05 	mcall	r6[20]
80008030:	14 98       	mov	r8,r10
80008032:	16 99       	mov	r9,r11
80008034:	10 9a       	mov	r10,r8
80008036:	12 9b       	mov	r11,r9
80008038:	0a 98       	mov	r8,r5
8000803a:	a1 78       	lsl	r8,0x1
8000803c:	0a 08       	add	r8,r5
8000803e:	a3 78       	lsl	r8,0x3
80008040:	e2 08 00 08 	add	r8,r1,r8
80008044:	f0 c8 f4 a4 	sub	r8,r8,-2908
80008048:	f0 eb 00 00 	st.d	r8[0],r10
	centralData->estimation.state[axis][POSITION] = centralData->estimation.state[axis][POSITION] + dt * centralData->estimation.state[axis][SPEED];
8000804c:	ec f8 00 00 	ld.w	r8,r6[0]
80008050:	70 01       	ld.w	r1,r8[0x0]
80008052:	ee f5 ff dc 	ld.w	r5,r7[-36]
80008056:	ec f8 00 00 	ld.w	r8,r6[0]
8000805a:	70 0a       	ld.w	r10,r8[0x0]
8000805c:	ee f9 ff dc 	ld.w	r9,r7[-36]
80008060:	12 98       	mov	r8,r9
80008062:	a1 78       	lsl	r8,0x1
80008064:	12 08       	add	r8,r9
80008066:	a3 78       	lsl	r8,0x3
80008068:	f4 08 00 08 	add	r8,r10,r8
8000806c:	f0 c8 f4 a4 	sub	r8,r8,-2908
80008070:	f0 e2 00 00 	ld.d	r2,r8[0]
80008074:	ee fc ff d4 	ld.w	r12,r7[-44]
80008078:	f0 16 00 02 	mcall	r6[8]
8000807c:	ec f8 00 00 	ld.w	r8,r6[0]
80008080:	70 0c       	ld.w	r12,r8[0x0]
80008082:	ee f9 ff dc 	ld.w	r9,r7[-36]
80008086:	12 98       	mov	r8,r9
80008088:	a1 78       	lsl	r8,0x1
8000808a:	12 08       	add	r8,r9
8000808c:	2f f8       	sub	r8,-1
8000808e:	a3 78       	lsl	r8,0x3
80008090:	f8 08 00 08 	add	r8,r12,r8
80008094:	f0 e8 0b 5c 	ld.d	r8,r8[2908]
80008098:	f0 16 00 03 	mcall	r6[12]
8000809c:	14 98       	mov	r8,r10
8000809e:	16 99       	mov	r9,r11
800080a0:	04 9a       	mov	r10,r2
800080a2:	06 9b       	mov	r11,r3
800080a4:	f0 16 00 05 	mcall	r6[20]
800080a8:	14 98       	mov	r8,r10
800080aa:	16 99       	mov	r9,r11
800080ac:	10 9a       	mov	r10,r8
800080ae:	12 9b       	mov	r11,r9
800080b0:	0a 98       	mov	r8,r5
800080b2:	a1 78       	lsl	r8,0x1
800080b4:	0a 08       	add	r8,r5
800080b6:	a3 78       	lsl	r8,0x3
800080b8:	e2 08 00 08 	add	r8,r1,r8
800080bc:	f0 c8 f4 a4 	sub	r8,r8,-2908
800080c0:	f0 eb 00 00 	st.d	r8[0],r10
	
	FPF00 = P[axis][0][0] + dt * (P[axis][1][0] + P[axis][0][1] + dt * P[axis][1][1]);
800080c4:	ee f9 ff dc 	ld.w	r9,r7[-36]
800080c8:	ec fa 00 18 	ld.w	r10,r6[24]
800080cc:	12 98       	mov	r8,r9
800080ce:	a3 78       	lsl	r8,0x3
800080d0:	12 08       	add	r8,r9
800080d2:	a3 78       	lsl	r8,0x3
800080d4:	f4 08 00 08 	add	r8,r10,r8
800080d8:	f0 e2 00 00 	ld.d	r2,r8[0]
800080dc:	ee fc ff d4 	ld.w	r12,r7[-44]
800080e0:	f0 16 00 02 	mcall	r6[8]
800080e4:	14 90       	mov	r0,r10
800080e6:	16 91       	mov	r1,r11
800080e8:	ee f9 ff dc 	ld.w	r9,r7[-36]
800080ec:	ec fa 00 18 	ld.w	r10,r6[24]
800080f0:	12 98       	mov	r8,r9
800080f2:	a3 78       	lsl	r8,0x3
800080f4:	12 08       	add	r8,r9
800080f6:	a3 78       	lsl	r8,0x3
800080f8:	f4 08 00 08 	add	r8,r10,r8
800080fc:	2e 88       	sub	r8,-24
800080fe:	f0 ea 00 00 	ld.d	r10,r8[0]
80008102:	ee f9 ff dc 	ld.w	r9,r7[-36]
80008106:	ec fc 00 18 	ld.w	r12,r6[24]
8000810a:	12 98       	mov	r8,r9
8000810c:	a3 78       	lsl	r8,0x3
8000810e:	12 08       	add	r8,r9
80008110:	2f f8       	sub	r8,-1
80008112:	f8 08 02 38 	ld.d	r8,r12[r8<<0x3]
80008116:	f0 16 00 05 	mcall	r6[20]
8000811a:	14 98       	mov	r8,r10
8000811c:	16 99       	mov	r9,r11
8000811e:	ee e9 ff c4 	st.d	r7[-60],r8
80008122:	ee fc ff d4 	ld.w	r12,r7[-44]
80008126:	f0 16 00 02 	mcall	r6[8]
8000812a:	ee f9 ff dc 	ld.w	r9,r7[-36]
8000812e:	ec fc 00 18 	ld.w	r12,r6[24]
80008132:	12 98       	mov	r8,r9
80008134:	a3 78       	lsl	r8,0x3
80008136:	12 08       	add	r8,r9
80008138:	a3 78       	lsl	r8,0x3
8000813a:	f8 08 00 08 	add	r8,r12,r8
8000813e:	2e 08       	sub	r8,-32
80008140:	f0 e8 00 00 	ld.d	r8,r8[0]
80008144:	f0 16 00 03 	mcall	r6[12]
80008148:	14 98       	mov	r8,r10
8000814a:	16 99       	mov	r9,r11
8000814c:	ee ea ff c4 	ld.d	r10,r7[-60]
80008150:	f0 16 00 05 	mcall	r6[20]
80008154:	14 98       	mov	r8,r10
80008156:	16 99       	mov	r9,r11
80008158:	00 9a       	mov	r10,r0
8000815a:	02 9b       	mov	r11,r1
8000815c:	f0 16 00 03 	mcall	r6[12]
80008160:	14 98       	mov	r8,r10
80008162:	16 99       	mov	r9,r11
80008164:	04 9a       	mov	r10,r2
80008166:	06 9b       	mov	r11,r3
80008168:	f0 16 00 05 	mcall	r6[20]
8000816c:	14 98       	mov	r8,r10
8000816e:	16 99       	mov	r9,r11
80008170:	ee e9 ff e0 	st.d	r7[-32],r8
	FPF01 = P[axis][0][1] + dt * P[axis][1][1];
80008174:	ee f9 ff dc 	ld.w	r9,r7[-36]
80008178:	ec fa 00 18 	ld.w	r10,r6[24]
8000817c:	12 98       	mov	r8,r9
8000817e:	a3 78       	lsl	r8,0x3
80008180:	12 08       	add	r8,r9
80008182:	2f f8       	sub	r8,-1
80008184:	f4 08 02 32 	ld.d	r2,r10[r8<<0x3]
80008188:	ee fc ff d4 	ld.w	r12,r7[-44]
8000818c:	f0 16 00 02 	mcall	r6[8]
80008190:	ee f9 ff dc 	ld.w	r9,r7[-36]
80008194:	ec fc 00 18 	ld.w	r12,r6[24]
80008198:	12 98       	mov	r8,r9
8000819a:	a3 78       	lsl	r8,0x3
8000819c:	12 08       	add	r8,r9
8000819e:	a3 78       	lsl	r8,0x3
800081a0:	f8 08 00 08 	add	r8,r12,r8
800081a4:	2e 08       	sub	r8,-32
800081a6:	f0 e8 00 00 	ld.d	r8,r8[0]
800081aa:	f0 16 00 03 	mcall	r6[12]
800081ae:	14 98       	mov	r8,r10
800081b0:	16 99       	mov	r9,r11
800081b2:	04 9a       	mov	r10,r2
800081b4:	06 9b       	mov	r11,r3
800081b6:	f0 16 00 05 	mcall	r6[20]
800081ba:	14 98       	mov	r8,r10
800081bc:	16 99       	mov	r9,r11
800081be:	ee e9 ff e8 	st.d	r7[-24],r8
	FPF10 = P[axis][1][0] + dt * P[axis][1][1];
800081c2:	ee f9 ff dc 	ld.w	r9,r7[-36]
800081c6:	ec fa 00 18 	ld.w	r10,r6[24]
800081ca:	12 98       	mov	r8,r9
800081cc:	a3 78       	lsl	r8,0x3
800081ce:	12 08       	add	r8,r9
800081d0:	a3 78       	lsl	r8,0x3
800081d2:	f4 08 00 08 	add	r8,r10,r8
800081d6:	2e 88       	sub	r8,-24
800081d8:	f0 e2 00 00 	ld.d	r2,r8[0]
800081dc:	ee fc ff d4 	ld.w	r12,r7[-44]
800081e0:	f0 16 00 02 	mcall	r6[8]
800081e4:	ee f9 ff dc 	ld.w	r9,r7[-36]
800081e8:	ec fc 00 18 	ld.w	r12,r6[24]
800081ec:	12 98       	mov	r8,r9
800081ee:	a3 78       	lsl	r8,0x3
800081f0:	12 08       	add	r8,r9
800081f2:	a3 78       	lsl	r8,0x3
800081f4:	f8 08 00 08 	add	r8,r12,r8
800081f8:	2e 08       	sub	r8,-32
800081fa:	f0 e8 00 00 	ld.d	r8,r8[0]
800081fe:	f0 16 00 03 	mcall	r6[12]
80008202:	14 98       	mov	r8,r10
80008204:	16 99       	mov	r9,r11
80008206:	04 9a       	mov	r10,r2
80008208:	06 9b       	mov	r11,r3
8000820a:	f0 16 00 05 	mcall	r6[20]
8000820e:	14 98       	mov	r8,r10
80008210:	16 99       	mov	r9,r11
80008212:	ee e9 ff f0 	st.d	r7[-16],r8
	FPF11 = P[axis][1][1];
80008216:	ee f9 ff dc 	ld.w	r9,r7[-36]
8000821a:	ec fa 00 18 	ld.w	r10,r6[24]
8000821e:	12 98       	mov	r8,r9
80008220:	a3 78       	lsl	r8,0x3
80008222:	12 08       	add	r8,r9
80008224:	a3 78       	lsl	r8,0x3
80008226:	f4 08 00 08 	add	r8,r10,r8
8000822a:	2e 08       	sub	r8,-32
8000822c:	f0 e8 00 00 	ld.d	r8,r8[0]
80008230:	ee e9 ff f8 	st.d	r7[-8],r8
	
	P[axis][0][0] = FPF00 + Q[axis][POSITION];
80008234:	ee f5 ff dc 	ld.w	r5,r7[-36]
80008238:	ee f9 ff dc 	ld.w	r9,r7[-36]
8000823c:	ec fa 00 d8 	ld.w	r10,r6[216]
80008240:	12 98       	mov	r8,r9
80008242:	a1 78       	lsl	r8,0x1
80008244:	12 08       	add	r8,r9
80008246:	a3 78       	lsl	r8,0x3
80008248:	f4 08 00 08 	add	r8,r10,r8
8000824c:	f0 ea 00 00 	ld.d	r10,r8[0]
80008250:	ee e8 ff e0 	ld.d	r8,r7[-32]
80008254:	f0 16 00 05 	mcall	r6[20]
80008258:	14 98       	mov	r8,r10
8000825a:	16 99       	mov	r9,r11
8000825c:	10 9a       	mov	r10,r8
8000825e:	12 9b       	mov	r11,r9
80008260:	ec f9 00 18 	ld.w	r9,r6[24]
80008264:	0a 98       	mov	r8,r5
80008266:	a3 78       	lsl	r8,0x3
80008268:	0a 08       	add	r8,r5
8000826a:	a3 78       	lsl	r8,0x3
8000826c:	f2 08 00 08 	add	r8,r9,r8
80008270:	f0 eb 00 00 	st.d	r8[0],r10
	P[axis][0][1] = FPF01;
80008274:	ee f9 ff dc 	ld.w	r9,r7[-36]
80008278:	ec fa 00 18 	ld.w	r10,r6[24]
8000827c:	12 98       	mov	r8,r9
8000827e:	a3 78       	lsl	r8,0x3
80008280:	12 08       	add	r8,r9
80008282:	f0 cb ff ff 	sub	r11,r8,-1
80008286:	ee e8 ff e8 	ld.d	r8,r7[-24]
8000828a:	f4 0b 08 38 	st.d	r10[r11<<0x3],r8
	P[axis][1][0] = FPF10;
8000828e:	ee f9 ff dc 	ld.w	r9,r7[-36]
80008292:	ec fa 00 18 	ld.w	r10,r6[24]
80008296:	12 98       	mov	r8,r9
80008298:	a3 78       	lsl	r8,0x3
8000829a:	12 08       	add	r8,r9
8000829c:	a3 78       	lsl	r8,0x3
8000829e:	f4 08 00 08 	add	r8,r10,r8
800082a2:	f0 ca ff e8 	sub	r10,r8,-24
800082a6:	ee e8 ff f0 	ld.d	r8,r7[-16]
800082aa:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][1][1] = FPF11 + Q[axis][SPEED];
800082ae:	ee f5 ff dc 	ld.w	r5,r7[-36]
800082b2:	ee f9 ff dc 	ld.w	r9,r7[-36]
800082b6:	ec fa 00 d8 	ld.w	r10,r6[216]
800082ba:	12 98       	mov	r8,r9
800082bc:	a1 78       	lsl	r8,0x1
800082be:	12 08       	add	r8,r9
800082c0:	2f f8       	sub	r8,-1
800082c2:	f4 08 02 3a 	ld.d	r10,r10[r8<<0x3]
800082c6:	ee e8 ff f8 	ld.d	r8,r7[-8]
800082ca:	f0 16 00 05 	mcall	r6[20]
800082ce:	14 98       	mov	r8,r10
800082d0:	16 99       	mov	r9,r11
800082d2:	10 9a       	mov	r10,r8
800082d4:	12 9b       	mov	r11,r9
800082d6:	ec f9 00 18 	ld.w	r9,r6[24]
800082da:	0a 98       	mov	r8,r5
800082dc:	a3 78       	lsl	r8,0x3
800082de:	0a 08       	add	r8,r5
800082e0:	a3 78       	lsl	r8,0x3
800082e2:	f2 08 00 08 	add	r8,r9,r8
800082e6:	2e 08       	sub	r8,-32
800082e8:	f0 eb 00 00 	st.d	r8[0],r10
	
	/*************************************************************************************/
	FPF00 = P2[axis][0][0] + dt * (P2[axis][1][0] + P2[axis][0][1] + dt * P2[axis][1][1]);
800082ec:	ee f9 ff dc 	ld.w	r9,r7[-36]
800082f0:	ec fa 00 1c 	ld.w	r10,r6[28]
800082f4:	12 98       	mov	r8,r9
800082f6:	a3 78       	lsl	r8,0x3
800082f8:	12 08       	add	r8,r9
800082fa:	a3 78       	lsl	r8,0x3
800082fc:	f4 08 00 08 	add	r8,r10,r8
80008300:	f0 e2 00 00 	ld.d	r2,r8[0]
80008304:	ee fc ff d4 	ld.w	r12,r7[-44]
80008308:	f0 16 00 02 	mcall	r6[8]
8000830c:	14 90       	mov	r0,r10
8000830e:	16 91       	mov	r1,r11
80008310:	ee f9 ff dc 	ld.w	r9,r7[-36]
80008314:	ec fa 00 1c 	ld.w	r10,r6[28]
80008318:	12 98       	mov	r8,r9
8000831a:	a3 78       	lsl	r8,0x3
8000831c:	12 08       	add	r8,r9
8000831e:	a3 78       	lsl	r8,0x3
80008320:	f4 08 00 08 	add	r8,r10,r8
80008324:	2e 88       	sub	r8,-24
80008326:	f0 ea 00 00 	ld.d	r10,r8[0]
8000832a:	ee f9 ff dc 	ld.w	r9,r7[-36]
8000832e:	ec fc 00 1c 	ld.w	r12,r6[28]
80008332:	12 98       	mov	r8,r9
80008334:	a3 78       	lsl	r8,0x3
80008336:	12 08       	add	r8,r9
80008338:	2f f8       	sub	r8,-1
8000833a:	f8 08 02 38 	ld.d	r8,r12[r8<<0x3]
8000833e:	f0 16 00 05 	mcall	r6[20]
80008342:	14 98       	mov	r8,r10
80008344:	16 99       	mov	r9,r11
80008346:	ee e9 ff cc 	st.d	r7[-52],r8
8000834a:	ee fc ff d4 	ld.w	r12,r7[-44]
8000834e:	f0 16 00 02 	mcall	r6[8]
80008352:	ee f9 ff dc 	ld.w	r9,r7[-36]
80008356:	ec fc 00 1c 	ld.w	r12,r6[28]
8000835a:	12 98       	mov	r8,r9
8000835c:	a3 78       	lsl	r8,0x3
8000835e:	12 08       	add	r8,r9
80008360:	a3 78       	lsl	r8,0x3
80008362:	f8 08 00 08 	add	r8,r12,r8
80008366:	2e 08       	sub	r8,-32
80008368:	f0 e8 00 00 	ld.d	r8,r8[0]
8000836c:	f0 16 00 03 	mcall	r6[12]
80008370:	14 98       	mov	r8,r10
80008372:	16 99       	mov	r9,r11
80008374:	ee ea ff cc 	ld.d	r10,r7[-52]
80008378:	f0 16 00 05 	mcall	r6[20]
8000837c:	14 98       	mov	r8,r10
8000837e:	16 99       	mov	r9,r11
80008380:	00 9a       	mov	r10,r0
80008382:	02 9b       	mov	r11,r1
80008384:	f0 16 00 03 	mcall	r6[12]
80008388:	14 98       	mov	r8,r10
8000838a:	16 99       	mov	r9,r11
8000838c:	04 9a       	mov	r10,r2
8000838e:	06 9b       	mov	r11,r3
80008390:	f0 16 00 05 	mcall	r6[20]
80008394:	14 98       	mov	r8,r10
80008396:	16 99       	mov	r9,r11
80008398:	ee e9 ff e0 	st.d	r7[-32],r8
	FPF01 = P2[axis][0][1] + dt * P2[axis][1][1];
8000839c:	ee f9 ff dc 	ld.w	r9,r7[-36]
800083a0:	ec fa 00 1c 	ld.w	r10,r6[28]
800083a4:	12 98       	mov	r8,r9
800083a6:	a3 78       	lsl	r8,0x3
800083a8:	12 08       	add	r8,r9
800083aa:	2f f8       	sub	r8,-1
800083ac:	f4 08 02 32 	ld.d	r2,r10[r8<<0x3]
800083b0:	ee fc ff d4 	ld.w	r12,r7[-44]
800083b4:	f0 16 00 02 	mcall	r6[8]
800083b8:	ee f9 ff dc 	ld.w	r9,r7[-36]
800083bc:	ec fc 00 1c 	ld.w	r12,r6[28]
800083c0:	12 98       	mov	r8,r9
800083c2:	a3 78       	lsl	r8,0x3
800083c4:	12 08       	add	r8,r9
800083c6:	a3 78       	lsl	r8,0x3
800083c8:	f8 08 00 08 	add	r8,r12,r8
800083cc:	2e 08       	sub	r8,-32
800083ce:	f0 e8 00 00 	ld.d	r8,r8[0]
800083d2:	f0 16 00 03 	mcall	r6[12]
800083d6:	14 98       	mov	r8,r10
800083d8:	16 99       	mov	r9,r11
800083da:	04 9a       	mov	r10,r2
800083dc:	06 9b       	mov	r11,r3
800083de:	f0 16 00 05 	mcall	r6[20]
800083e2:	14 98       	mov	r8,r10
800083e4:	16 99       	mov	r9,r11
800083e6:	ee e9 ff e8 	st.d	r7[-24],r8
	FPF10 = P2[axis][1][0] + dt * P2[axis][1][1];
800083ea:	ee f9 ff dc 	ld.w	r9,r7[-36]
800083ee:	ec fa 00 1c 	ld.w	r10,r6[28]
800083f2:	12 98       	mov	r8,r9
800083f4:	a3 78       	lsl	r8,0x3
800083f6:	12 08       	add	r8,r9
800083f8:	a3 78       	lsl	r8,0x3
800083fa:	f4 08 00 08 	add	r8,r10,r8
800083fe:	2e 88       	sub	r8,-24
80008400:	f0 e2 00 00 	ld.d	r2,r8[0]
80008404:	ee fc ff d4 	ld.w	r12,r7[-44]
80008408:	f0 16 00 02 	mcall	r6[8]
8000840c:	ee f9 ff dc 	ld.w	r9,r7[-36]
80008410:	ec fc 00 1c 	ld.w	r12,r6[28]
80008414:	12 98       	mov	r8,r9
80008416:	a3 78       	lsl	r8,0x3
80008418:	12 08       	add	r8,r9
8000841a:	a3 78       	lsl	r8,0x3
8000841c:	f8 08 00 08 	add	r8,r12,r8
80008420:	2e 08       	sub	r8,-32
80008422:	f0 e8 00 00 	ld.d	r8,r8[0]
80008426:	f0 16 00 03 	mcall	r6[12]
8000842a:	14 98       	mov	r8,r10
8000842c:	16 99       	mov	r9,r11
8000842e:	04 9a       	mov	r10,r2
80008430:	06 9b       	mov	r11,r3
80008432:	f0 16 00 05 	mcall	r6[20]
80008436:	14 98       	mov	r8,r10
80008438:	16 99       	mov	r9,r11
8000843a:	ee e9 ff f0 	st.d	r7[-16],r8
	FPF11 = P2[axis][1][1];
8000843e:	ee f9 ff dc 	ld.w	r9,r7[-36]
80008442:	ec fa 00 1c 	ld.w	r10,r6[28]
80008446:	12 98       	mov	r8,r9
80008448:	a3 78       	lsl	r8,0x3
8000844a:	12 08       	add	r8,r9
8000844c:	a3 78       	lsl	r8,0x3
8000844e:	f4 08 00 08 	add	r8,r10,r8
80008452:	2e 08       	sub	r8,-32
80008454:	f0 e8 00 00 	ld.d	r8,r8[0]
80008458:	ee e9 ff f8 	st.d	r7[-8],r8
	
	P2[axis][0][0] = FPF00 + Q2[axis][POSITION];
8000845c:	ee f5 ff dc 	ld.w	r5,r7[-36]
80008460:	ee f9 ff dc 	ld.w	r9,r7[-36]
80008464:	ec fa 00 dc 	ld.w	r10,r6[220]
80008468:	12 98       	mov	r8,r9
8000846a:	a1 78       	lsl	r8,0x1
8000846c:	12 08       	add	r8,r9
8000846e:	a3 78       	lsl	r8,0x3
80008470:	f4 08 00 08 	add	r8,r10,r8
80008474:	f0 ea 00 00 	ld.d	r10,r8[0]
80008478:	ee e8 ff e0 	ld.d	r8,r7[-32]
8000847c:	f0 16 00 05 	mcall	r6[20]
80008480:	14 98       	mov	r8,r10
80008482:	16 99       	mov	r9,r11
80008484:	10 9a       	mov	r10,r8
80008486:	12 9b       	mov	r11,r9
80008488:	ec f9 00 1c 	ld.w	r9,r6[28]
8000848c:	0a 98       	mov	r8,r5
8000848e:	a3 78       	lsl	r8,0x3
80008490:	0a 08       	add	r8,r5
80008492:	a3 78       	lsl	r8,0x3
80008494:	f2 08 00 08 	add	r8,r9,r8
80008498:	f0 eb 00 00 	st.d	r8[0],r10
	P2[axis][0][1] = FPF01;
8000849c:	ee f9 ff dc 	ld.w	r9,r7[-36]
800084a0:	ec fa 00 1c 	ld.w	r10,r6[28]
800084a4:	12 98       	mov	r8,r9
800084a6:	a3 78       	lsl	r8,0x3
800084a8:	12 08       	add	r8,r9
800084aa:	f0 cb ff ff 	sub	r11,r8,-1
800084ae:	ee e8 ff e8 	ld.d	r8,r7[-24]
800084b2:	f4 0b 08 38 	st.d	r10[r11<<0x3],r8
	P2[axis][1][0] = FPF10;
800084b6:	ee f9 ff dc 	ld.w	r9,r7[-36]
800084ba:	ec fa 00 1c 	ld.w	r10,r6[28]
800084be:	12 98       	mov	r8,r9
800084c0:	a3 78       	lsl	r8,0x3
800084c2:	12 08       	add	r8,r9
800084c4:	a3 78       	lsl	r8,0x3
800084c6:	f4 08 00 08 	add	r8,r10,r8
800084ca:	f0 ca ff e8 	sub	r10,r8,-24
800084ce:	ee e8 ff f0 	ld.d	r8,r7[-16]
800084d2:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][1][1] = FPF11 + Q2[axis][SPEED];
800084d6:	ee f5 ff dc 	ld.w	r5,r7[-36]
800084da:	ee f9 ff dc 	ld.w	r9,r7[-36]
800084de:	ec fa 00 dc 	ld.w	r10,r6[220]
800084e2:	12 98       	mov	r8,r9
800084e4:	a1 78       	lsl	r8,0x1
800084e6:	12 08       	add	r8,r9
800084e8:	2f f8       	sub	r8,-1
800084ea:	f4 08 02 3a 	ld.d	r10,r10[r8<<0x3]
800084ee:	ee e8 ff f8 	ld.d	r8,r7[-8]
800084f2:	f0 16 00 05 	mcall	r6[20]
800084f6:	14 98       	mov	r8,r10
800084f8:	16 99       	mov	r9,r11
800084fa:	10 9a       	mov	r10,r8
800084fc:	12 9b       	mov	r11,r9
800084fe:	ec f9 00 1c 	ld.w	r9,r6[28]
80008502:	0a 98       	mov	r8,r5
80008504:	a3 78       	lsl	r8,0x3
80008506:	0a 08       	add	r8,r5
80008508:	a3 78       	lsl	r8,0x3
8000850a:	f2 08 00 08 	add	r8,r9,r8
8000850e:	2e 08       	sub	r8,-32
80008510:	f0 eb 00 00 	st.d	r8[0],r10
}
80008514:	2f 1d       	sub	sp,-60
80008516:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
8000851a:	00 00       	add	r0,r0
8000851c:	80 00       	ld.sh	r0,r0[0x0]
8000851e:	7e 1c       	ld.w	r12,pc[0x4]

80008520 <e_kalman_update_position>:

// update covariance
Pp = Pm - K*H*Pm;
*/
void e_kalman_update_position (int axis, double position_meas)
{
80008520:	eb cd 40 ee 	pushm	r1-r3,r5-r7,lr
80008524:	1a 97       	mov	r7,sp
80008526:	fa cd 00 e4 	sub	sp,sp,228
8000852a:	fe f6 0b fe 	ld.w	r6,pc[3070]
8000852e:	1e 26       	rsub	r6,pc
80008530:	ef 4c ff 84 	st.w	r7[-124],r12
80008534:	ee eb ff 7c 	st.d	r7[-132],r10
	double y,y2,S,K1,K2,K3;
	double P11,P12,P13,P21,P22,P23,P31,P32,P33;

	y = position_meas - centralData->estimation.state[axis][POSITION];
80008538:	ec f8 00 00 	ld.w	r8,r6[0]
8000853c:	70 0a       	ld.w	r10,r8[0x0]
8000853e:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008542:	12 98       	mov	r8,r9
80008544:	a1 78       	lsl	r8,0x1
80008546:	12 08       	add	r8,r9
80008548:	a3 78       	lsl	r8,0x3
8000854a:	f4 08 00 08 	add	r8,r10,r8
8000854e:	f0 c8 f4 a4 	sub	r8,r8,-2908
80008552:	f0 e8 00 00 	ld.d	r8,r8[0]
80008556:	ee ea ff 7c 	ld.d	r10,r7[-132]
8000855a:	f0 16 00 11 	mcall	r6[68]
8000855e:	14 98       	mov	r8,r10
80008560:	16 99       	mov	r9,r11
80008562:	ee e9 ff 88 	st.d	r7[-120],r8
	
	
	S = P[axis][0][0] + R[axis];
80008566:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000856a:	ec fa 00 18 	ld.w	r10,r6[24]
8000856e:	12 98       	mov	r8,r9
80008570:	a3 78       	lsl	r8,0x3
80008572:	12 08       	add	r8,r9
80008574:	a3 78       	lsl	r8,0x3
80008576:	f4 08 00 08 	add	r8,r10,r8
8000857a:	f0 ea 00 00 	ld.d	r10,r8[0]
8000857e:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008582:	ec f8 01 54 	ld.w	r8,r6[340]
80008586:	f0 09 02 38 	ld.d	r8,r8[r9<<0x3]
8000858a:	f0 16 00 05 	mcall	r6[20]
8000858e:	14 98       	mov	r8,r10
80008590:	16 99       	mov	r9,r11
80008592:	ee e9 ff 98 	st.d	r7[-104],r8
	K1 = P[axis][0][0] * 1/S;
80008596:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000859a:	ec fa 00 18 	ld.w	r10,r6[24]
8000859e:	12 98       	mov	r8,r9
800085a0:	a3 78       	lsl	r8,0x3
800085a2:	12 08       	add	r8,r9
800085a4:	a3 78       	lsl	r8,0x3
800085a6:	f4 08 00 08 	add	r8,r10,r8
800085aa:	f0 ea 00 00 	ld.d	r10,r8[0]
800085ae:	ee e8 ff 98 	ld.d	r8,r7[-104]
800085b2:	f0 16 00 0c 	mcall	r6[48]
800085b6:	14 98       	mov	r8,r10
800085b8:	16 99       	mov	r9,r11
800085ba:	ee e9 ff a0 	st.d	r7[-96],r8
	K2 = P[axis][1][0] * 1/S;
800085be:	ee f9 ff 84 	ld.w	r9,r7[-124]
800085c2:	ec fa 00 18 	ld.w	r10,r6[24]
800085c6:	12 98       	mov	r8,r9
800085c8:	a3 78       	lsl	r8,0x3
800085ca:	12 08       	add	r8,r9
800085cc:	a3 78       	lsl	r8,0x3
800085ce:	f4 08 00 08 	add	r8,r10,r8
800085d2:	2e 88       	sub	r8,-24
800085d4:	f0 ea 00 00 	ld.d	r10,r8[0]
800085d8:	ee e8 ff 98 	ld.d	r8,r7[-104]
800085dc:	f0 16 00 0c 	mcall	r6[48]
800085e0:	14 98       	mov	r8,r10
800085e2:	16 99       	mov	r9,r11
800085e4:	ee e9 ff a8 	st.d	r7[-88],r8
	K3 = P[axis][2][0] * 1/S;
800085e8:	ee f9 ff 84 	ld.w	r9,r7[-124]
800085ec:	ec fa 00 18 	ld.w	r10,r6[24]
800085f0:	12 98       	mov	r8,r9
800085f2:	a3 78       	lsl	r8,0x3
800085f4:	12 08       	add	r8,r9
800085f6:	a3 78       	lsl	r8,0x3
800085f8:	f4 08 00 08 	add	r8,r10,r8
800085fc:	2d 08       	sub	r8,-48
800085fe:	f0 ea 00 00 	ld.d	r10,r8[0]
80008602:	ee e8 ff 98 	ld.d	r8,r7[-104]
80008606:	f0 16 00 0c 	mcall	r6[48]
8000860a:	14 98       	mov	r8,r10
8000860c:	16 99       	mov	r9,r11
8000860e:	ee e9 ff b0 	st.d	r7[-80],r8

	centralData->estimation.state[axis][POSITION] = centralData->estimation.state[axis][POSITION] + K1 * y;
80008612:	ec f8 00 00 	ld.w	r8,r6[0]
80008616:	70 01       	ld.w	r1,r8[0x0]
80008618:	ee f5 ff 84 	ld.w	r5,r7[-124]
8000861c:	ec f8 00 00 	ld.w	r8,r6[0]
80008620:	70 0a       	ld.w	r10,r8[0x0]
80008622:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008626:	12 98       	mov	r8,r9
80008628:	a1 78       	lsl	r8,0x1
8000862a:	12 08       	add	r8,r9
8000862c:	a3 78       	lsl	r8,0x3
8000862e:	f4 08 00 08 	add	r8,r10,r8
80008632:	f0 c8 f4 a4 	sub	r8,r8,-2908
80008636:	f0 e2 00 00 	ld.d	r2,r8[0]
8000863a:	ee e8 ff 88 	ld.d	r8,r7[-120]
8000863e:	ee ea ff a0 	ld.d	r10,r7[-96]
80008642:	f0 16 00 03 	mcall	r6[12]
80008646:	14 98       	mov	r8,r10
80008648:	16 99       	mov	r9,r11
8000864a:	04 9a       	mov	r10,r2
8000864c:	06 9b       	mov	r11,r3
8000864e:	f0 16 00 05 	mcall	r6[20]
80008652:	14 98       	mov	r8,r10
80008654:	16 99       	mov	r9,r11
80008656:	10 9a       	mov	r10,r8
80008658:	12 9b       	mov	r11,r9
8000865a:	0a 98       	mov	r8,r5
8000865c:	a1 78       	lsl	r8,0x1
8000865e:	0a 08       	add	r8,r5
80008660:	a3 78       	lsl	r8,0x3
80008662:	e2 08 00 08 	add	r8,r1,r8
80008666:	f0 c8 f4 a4 	sub	r8,r8,-2908
8000866a:	f0 eb 00 00 	st.d	r8[0],r10
	centralData->estimation.state[axis][SPEED] = centralData->estimation.state[axis][SPEED] + K2 * y;
8000866e:	ec f8 00 00 	ld.w	r8,r6[0]
80008672:	70 01       	ld.w	r1,r8[0x0]
80008674:	ee f5 ff 84 	ld.w	r5,r7[-124]
80008678:	ec f8 00 00 	ld.w	r8,r6[0]
8000867c:	70 0a       	ld.w	r10,r8[0x0]
8000867e:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008682:	12 98       	mov	r8,r9
80008684:	a1 78       	lsl	r8,0x1
80008686:	12 08       	add	r8,r9
80008688:	2f f8       	sub	r8,-1
8000868a:	a3 78       	lsl	r8,0x3
8000868c:	f4 08 00 08 	add	r8,r10,r8
80008690:	f0 e2 0b 5c 	ld.d	r2,r8[2908]
80008694:	ee e8 ff 88 	ld.d	r8,r7[-120]
80008698:	ee ea ff a8 	ld.d	r10,r7[-88]
8000869c:	f0 16 00 03 	mcall	r6[12]
800086a0:	14 98       	mov	r8,r10
800086a2:	16 99       	mov	r9,r11
800086a4:	04 9a       	mov	r10,r2
800086a6:	06 9b       	mov	r11,r3
800086a8:	f0 16 00 05 	mcall	r6[20]
800086ac:	14 98       	mov	r8,r10
800086ae:	16 99       	mov	r9,r11
800086b0:	10 9a       	mov	r10,r8
800086b2:	12 9b       	mov	r11,r9
800086b4:	0a 98       	mov	r8,r5
800086b6:	a1 78       	lsl	r8,0x1
800086b8:	0a 08       	add	r8,r5
800086ba:	2f f8       	sub	r8,-1
800086bc:	a3 78       	lsl	r8,0x3
800086be:	e2 08 00 08 	add	r8,r1,r8
800086c2:	f0 eb 0b 5c 	st.d	r8[2908],r10
	centralData->estimation.state[axis][BIAIS] = centralData->estimation.state[axis][BIAIS] + K3 * y;
800086c6:	ec f8 00 00 	ld.w	r8,r6[0]
800086ca:	70 01       	ld.w	r1,r8[0x0]
800086cc:	ee f5 ff 84 	ld.w	r5,r7[-124]
800086d0:	ec f8 00 00 	ld.w	r8,r6[0]
800086d4:	70 0a       	ld.w	r10,r8[0x0]
800086d6:	ee f9 ff 84 	ld.w	r9,r7[-124]
800086da:	12 98       	mov	r8,r9
800086dc:	a1 78       	lsl	r8,0x1
800086de:	12 08       	add	r8,r9
800086e0:	a3 78       	lsl	r8,0x3
800086e2:	f4 08 00 08 	add	r8,r10,r8
800086e6:	f0 c8 f4 94 	sub	r8,r8,-2924
800086ea:	f0 e2 00 00 	ld.d	r2,r8[0]
800086ee:	ee e8 ff 88 	ld.d	r8,r7[-120]
800086f2:	ee ea ff b0 	ld.d	r10,r7[-80]
800086f6:	f0 16 00 03 	mcall	r6[12]
800086fa:	14 98       	mov	r8,r10
800086fc:	16 99       	mov	r9,r11
800086fe:	04 9a       	mov	r10,r2
80008700:	06 9b       	mov	r11,r3
80008702:	f0 16 00 05 	mcall	r6[20]
80008706:	14 98       	mov	r8,r10
80008708:	16 99       	mov	r9,r11
8000870a:	10 9a       	mov	r10,r8
8000870c:	12 9b       	mov	r11,r9
8000870e:	0a 98       	mov	r8,r5
80008710:	a1 78       	lsl	r8,0x1
80008712:	0a 08       	add	r8,r5
80008714:	a3 78       	lsl	r8,0x3
80008716:	e2 08 00 08 	add	r8,r1,r8
8000871a:	f0 c8 f4 94 	sub	r8,r8,-2924
8000871e:	f0 eb 00 00 	st.d	r8[0],r10

	P11 = (1. - K1) * P[axis][0][0];
80008722:	ee e8 ff a0 	ld.d	r8,r7[-96]
80008726:	30 0a       	mov	r10,0
80008728:	fc 1b 3f f0 	movh	r11,0x3ff0
8000872c:	f0 16 00 11 	mcall	r6[68]
80008730:	14 98       	mov	r8,r10
80008732:	16 99       	mov	r9,r11
80008734:	10 9a       	mov	r10,r8
80008736:	12 9b       	mov	r11,r9
80008738:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000873c:	ec fc 00 18 	ld.w	r12,r6[24]
80008740:	12 98       	mov	r8,r9
80008742:	a3 78       	lsl	r8,0x3
80008744:	12 08       	add	r8,r9
80008746:	a3 78       	lsl	r8,0x3
80008748:	f8 08 00 08 	add	r8,r12,r8
8000874c:	f0 e8 00 00 	ld.d	r8,r8[0]
80008750:	f0 16 00 03 	mcall	r6[12]
80008754:	14 98       	mov	r8,r10
80008756:	16 99       	mov	r9,r11
80008758:	ee e9 ff b8 	st.d	r7[-72],r8
	P12 = (1. - K1) * P[axis][0][1];
8000875c:	ee e8 ff a0 	ld.d	r8,r7[-96]
80008760:	30 0a       	mov	r10,0
80008762:	fc 1b 3f f0 	movh	r11,0x3ff0
80008766:	f0 16 00 11 	mcall	r6[68]
8000876a:	14 98       	mov	r8,r10
8000876c:	16 99       	mov	r9,r11
8000876e:	10 9a       	mov	r10,r8
80008770:	12 9b       	mov	r11,r9
80008772:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008776:	ec fc 00 18 	ld.w	r12,r6[24]
8000877a:	12 98       	mov	r8,r9
8000877c:	a3 78       	lsl	r8,0x3
8000877e:	12 08       	add	r8,r9
80008780:	2f f8       	sub	r8,-1
80008782:	f8 08 02 38 	ld.d	r8,r12[r8<<0x3]
80008786:	f0 16 00 03 	mcall	r6[12]
8000878a:	14 98       	mov	r8,r10
8000878c:	16 99       	mov	r9,r11
8000878e:	ee e9 ff c0 	st.d	r7[-64],r8
	P13 = (1. - K1) * P[axis][0][2];
80008792:	ee e8 ff a0 	ld.d	r8,r7[-96]
80008796:	30 0a       	mov	r10,0
80008798:	fc 1b 3f f0 	movh	r11,0x3ff0
8000879c:	f0 16 00 11 	mcall	r6[68]
800087a0:	14 98       	mov	r8,r10
800087a2:	16 99       	mov	r9,r11
800087a4:	10 9a       	mov	r10,r8
800087a6:	12 9b       	mov	r11,r9
800087a8:	ee f9 ff 84 	ld.w	r9,r7[-124]
800087ac:	ec fc 00 18 	ld.w	r12,r6[24]
800087b0:	12 98       	mov	r8,r9
800087b2:	a3 78       	lsl	r8,0x3
800087b4:	12 08       	add	r8,r9
800087b6:	a3 78       	lsl	r8,0x3
800087b8:	f8 08 00 08 	add	r8,r12,r8
800087bc:	2f 08       	sub	r8,-16
800087be:	f0 e8 00 00 	ld.d	r8,r8[0]
800087c2:	f0 16 00 03 	mcall	r6[12]
800087c6:	14 98       	mov	r8,r10
800087c8:	16 99       	mov	r9,r11
800087ca:	ee e9 ff c8 	st.d	r7[-56],r8
	P21 = -K2 * P[axis][0][0] + P[axis][1][0];
800087ce:	ee f8 ff a8 	ld.w	r8,r7[-88]
800087d2:	10 99       	mov	r9,r8
800087d4:	ee 19 80 00 	eorh	r9,0x8000
800087d8:	ef 49 ff 1c 	st.w	r7[-228],r9
800087dc:	ee f8 ff ac 	ld.w	r8,r7[-84]
800087e0:	ef 48 ff 20 	st.w	r7[-224],r8
800087e4:	ee f9 ff 84 	ld.w	r9,r7[-124]
800087e8:	ec fa 00 18 	ld.w	r10,r6[24]
800087ec:	12 98       	mov	r8,r9
800087ee:	a3 78       	lsl	r8,0x3
800087f0:	12 08       	add	r8,r9
800087f2:	a3 78       	lsl	r8,0x3
800087f4:	f4 08 00 08 	add	r8,r10,r8
800087f8:	f0 e8 00 00 	ld.d	r8,r8[0]
800087fc:	ee ea ff 1c 	ld.d	r10,r7[-228]
80008800:	f0 16 00 03 	mcall	r6[12]
80008804:	14 98       	mov	r8,r10
80008806:	16 99       	mov	r9,r11
80008808:	10 9a       	mov	r10,r8
8000880a:	12 9b       	mov	r11,r9
8000880c:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008810:	ec fc 00 18 	ld.w	r12,r6[24]
80008814:	12 98       	mov	r8,r9
80008816:	a3 78       	lsl	r8,0x3
80008818:	12 08       	add	r8,r9
8000881a:	a3 78       	lsl	r8,0x3
8000881c:	f8 08 00 08 	add	r8,r12,r8
80008820:	2e 88       	sub	r8,-24
80008822:	f0 e8 00 00 	ld.d	r8,r8[0]
80008826:	f0 16 00 05 	mcall	r6[20]
8000882a:	14 98       	mov	r8,r10
8000882c:	16 99       	mov	r9,r11
8000882e:	ee e9 ff d0 	st.d	r7[-48],r8
	P22 = -K2 * P[axis][0][1] + P[axis][1][1];
80008832:	ee f8 ff a8 	ld.w	r8,r7[-88]
80008836:	10 99       	mov	r9,r8
80008838:	ee 19 80 00 	eorh	r9,0x8000
8000883c:	ef 49 ff 24 	st.w	r7[-220],r9
80008840:	ee f8 ff ac 	ld.w	r8,r7[-84]
80008844:	ef 48 ff 28 	st.w	r7[-216],r8
80008848:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000884c:	ec fa 00 18 	ld.w	r10,r6[24]
80008850:	12 98       	mov	r8,r9
80008852:	a3 78       	lsl	r8,0x3
80008854:	12 08       	add	r8,r9
80008856:	2f f8       	sub	r8,-1
80008858:	f4 08 02 38 	ld.d	r8,r10[r8<<0x3]
8000885c:	ee ea ff 24 	ld.d	r10,r7[-220]
80008860:	f0 16 00 03 	mcall	r6[12]
80008864:	14 98       	mov	r8,r10
80008866:	16 99       	mov	r9,r11
80008868:	10 9a       	mov	r10,r8
8000886a:	12 9b       	mov	r11,r9
8000886c:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008870:	ec fc 00 18 	ld.w	r12,r6[24]
80008874:	12 98       	mov	r8,r9
80008876:	a3 78       	lsl	r8,0x3
80008878:	12 08       	add	r8,r9
8000887a:	a3 78       	lsl	r8,0x3
8000887c:	f8 08 00 08 	add	r8,r12,r8
80008880:	2e 08       	sub	r8,-32
80008882:	f0 e8 00 00 	ld.d	r8,r8[0]
80008886:	f0 16 00 05 	mcall	r6[20]
8000888a:	14 98       	mov	r8,r10
8000888c:	16 99       	mov	r9,r11
8000888e:	ee e9 ff d8 	st.d	r7[-40],r8
	P23 = -K2 * P[axis][0][2] + P[axis][1][2];
80008892:	ee f8 ff a8 	ld.w	r8,r7[-88]
80008896:	10 99       	mov	r9,r8
80008898:	ee 19 80 00 	eorh	r9,0x8000
8000889c:	ef 49 ff 2c 	st.w	r7[-212],r9
800088a0:	ee f8 ff ac 	ld.w	r8,r7[-84]
800088a4:	ef 48 ff 30 	st.w	r7[-208],r8
800088a8:	ee f9 ff 84 	ld.w	r9,r7[-124]
800088ac:	ec fa 00 18 	ld.w	r10,r6[24]
800088b0:	12 98       	mov	r8,r9
800088b2:	a3 78       	lsl	r8,0x3
800088b4:	12 08       	add	r8,r9
800088b6:	a3 78       	lsl	r8,0x3
800088b8:	f4 08 00 08 	add	r8,r10,r8
800088bc:	2f 08       	sub	r8,-16
800088be:	f0 e8 00 00 	ld.d	r8,r8[0]
800088c2:	ee ea ff 2c 	ld.d	r10,r7[-212]
800088c6:	f0 16 00 03 	mcall	r6[12]
800088ca:	14 98       	mov	r8,r10
800088cc:	16 99       	mov	r9,r11
800088ce:	10 9a       	mov	r10,r8
800088d0:	12 9b       	mov	r11,r9
800088d2:	ee f9 ff 84 	ld.w	r9,r7[-124]
800088d6:	ec fc 00 18 	ld.w	r12,r6[24]
800088da:	12 98       	mov	r8,r9
800088dc:	a3 78       	lsl	r8,0x3
800088de:	12 08       	add	r8,r9
800088e0:	a3 78       	lsl	r8,0x3
800088e2:	f8 08 00 08 	add	r8,r12,r8
800088e6:	2d 88       	sub	r8,-40
800088e8:	f0 e8 00 00 	ld.d	r8,r8[0]
800088ec:	f0 16 00 05 	mcall	r6[20]
800088f0:	14 98       	mov	r8,r10
800088f2:	16 99       	mov	r9,r11
800088f4:	ee e9 ff e0 	st.d	r7[-32],r8
	P31 = -K3 * P[axis][0][0] + P[axis][2][0];
800088f8:	ee f8 ff b0 	ld.w	r8,r7[-80]
800088fc:	10 99       	mov	r9,r8
800088fe:	ee 19 80 00 	eorh	r9,0x8000
80008902:	ef 49 ff 34 	st.w	r7[-204],r9
80008906:	ee f8 ff b4 	ld.w	r8,r7[-76]
8000890a:	ef 48 ff 38 	st.w	r7[-200],r8
8000890e:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008912:	ec fa 00 18 	ld.w	r10,r6[24]
80008916:	12 98       	mov	r8,r9
80008918:	a3 78       	lsl	r8,0x3
8000891a:	12 08       	add	r8,r9
8000891c:	a3 78       	lsl	r8,0x3
8000891e:	f4 08 00 08 	add	r8,r10,r8
80008922:	f0 e8 00 00 	ld.d	r8,r8[0]
80008926:	ee ea ff 34 	ld.d	r10,r7[-204]
8000892a:	f0 16 00 03 	mcall	r6[12]
8000892e:	14 98       	mov	r8,r10
80008930:	16 99       	mov	r9,r11
80008932:	10 9a       	mov	r10,r8
80008934:	12 9b       	mov	r11,r9
80008936:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000893a:	ec fc 00 18 	ld.w	r12,r6[24]
8000893e:	12 98       	mov	r8,r9
80008940:	a3 78       	lsl	r8,0x3
80008942:	12 08       	add	r8,r9
80008944:	a3 78       	lsl	r8,0x3
80008946:	f8 08 00 08 	add	r8,r12,r8
8000894a:	2d 08       	sub	r8,-48
8000894c:	f0 e8 00 00 	ld.d	r8,r8[0]
80008950:	f0 16 00 05 	mcall	r6[20]
80008954:	14 98       	mov	r8,r10
80008956:	16 99       	mov	r9,r11
80008958:	ee e9 ff e8 	st.d	r7[-24],r8
	P32 = -K3 * P[axis][0][1] + P[axis][2][1];
8000895c:	ee f8 ff b0 	ld.w	r8,r7[-80]
80008960:	10 99       	mov	r9,r8
80008962:	ee 19 80 00 	eorh	r9,0x8000
80008966:	ef 49 ff 3c 	st.w	r7[-196],r9
8000896a:	ee f8 ff b4 	ld.w	r8,r7[-76]
8000896e:	ef 48 ff 40 	st.w	r7[-192],r8
80008972:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008976:	ec fa 00 18 	ld.w	r10,r6[24]
8000897a:	12 98       	mov	r8,r9
8000897c:	a3 78       	lsl	r8,0x3
8000897e:	12 08       	add	r8,r9
80008980:	2f f8       	sub	r8,-1
80008982:	f4 08 02 38 	ld.d	r8,r10[r8<<0x3]
80008986:	ee ea ff 3c 	ld.d	r10,r7[-196]
8000898a:	f0 16 00 03 	mcall	r6[12]
8000898e:	14 98       	mov	r8,r10
80008990:	16 99       	mov	r9,r11
80008992:	10 9a       	mov	r10,r8
80008994:	12 9b       	mov	r11,r9
80008996:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000899a:	ec fc 00 18 	ld.w	r12,r6[24]
8000899e:	12 98       	mov	r8,r9
800089a0:	a3 78       	lsl	r8,0x3
800089a2:	12 08       	add	r8,r9
800089a4:	a3 78       	lsl	r8,0x3
800089a6:	f8 08 00 08 	add	r8,r12,r8
800089aa:	2c 88       	sub	r8,-56
800089ac:	f0 e8 00 00 	ld.d	r8,r8[0]
800089b0:	f0 16 00 05 	mcall	r6[20]
800089b4:	14 98       	mov	r8,r10
800089b6:	16 99       	mov	r9,r11
800089b8:	ee e9 ff f0 	st.d	r7[-16],r8
	P33 = -K3 * P[axis][0][2] + P[axis][2][2];
800089bc:	ee f8 ff b0 	ld.w	r8,r7[-80]
800089c0:	10 99       	mov	r9,r8
800089c2:	ee 19 80 00 	eorh	r9,0x8000
800089c6:	ef 49 ff 44 	st.w	r7[-188],r9
800089ca:	ee f8 ff b4 	ld.w	r8,r7[-76]
800089ce:	ef 48 ff 48 	st.w	r7[-184],r8
800089d2:	ee f9 ff 84 	ld.w	r9,r7[-124]
800089d6:	ec fa 00 18 	ld.w	r10,r6[24]
800089da:	12 98       	mov	r8,r9
800089dc:	a3 78       	lsl	r8,0x3
800089de:	12 08       	add	r8,r9
800089e0:	a3 78       	lsl	r8,0x3
800089e2:	f4 08 00 08 	add	r8,r10,r8
800089e6:	2f 08       	sub	r8,-16
800089e8:	f0 e8 00 00 	ld.d	r8,r8[0]
800089ec:	ee ea ff 44 	ld.d	r10,r7[-188]
800089f0:	f0 16 00 03 	mcall	r6[12]
800089f4:	14 98       	mov	r8,r10
800089f6:	16 99       	mov	r9,r11
800089f8:	10 9a       	mov	r10,r8
800089fa:	12 9b       	mov	r11,r9
800089fc:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008a00:	ec fc 00 18 	ld.w	r12,r6[24]
80008a04:	12 98       	mov	r8,r9
80008a06:	a3 78       	lsl	r8,0x3
80008a08:	12 08       	add	r8,r9
80008a0a:	a3 78       	lsl	r8,0x3
80008a0c:	f8 08 00 08 	add	r8,r12,r8
80008a10:	2c 08       	sub	r8,-64
80008a12:	f0 e8 00 00 	ld.d	r8,r8[0]
80008a16:	f0 16 00 05 	mcall	r6[20]
80008a1a:	14 98       	mov	r8,r10
80008a1c:	16 99       	mov	r9,r11
80008a1e:	ee e9 ff f8 	st.d	r7[-8],r8

	P[axis][0][0] = P11;
80008a22:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008a26:	ec fa 00 18 	ld.w	r10,r6[24]
80008a2a:	12 98       	mov	r8,r9
80008a2c:	a3 78       	lsl	r8,0x3
80008a2e:	12 08       	add	r8,r9
80008a30:	a3 78       	lsl	r8,0x3
80008a32:	10 0a       	add	r10,r8
80008a34:	ee e8 ff b8 	ld.d	r8,r7[-72]
80008a38:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][0][1] = P12;
80008a3c:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008a40:	ec fb 00 18 	ld.w	r11,r6[24]
80008a44:	12 98       	mov	r8,r9
80008a46:	a3 78       	lsl	r8,0x3
80008a48:	12 08       	add	r8,r9
80008a4a:	f0 ca ff ff 	sub	r10,r8,-1
80008a4e:	ee e8 ff c0 	ld.d	r8,r7[-64]
80008a52:	f6 0a 08 38 	st.d	r11[r10<<0x3],r8
	P[axis][0][2] = P13;
80008a56:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008a5a:	ec fa 00 18 	ld.w	r10,r6[24]
80008a5e:	12 98       	mov	r8,r9
80008a60:	a3 78       	lsl	r8,0x3
80008a62:	12 08       	add	r8,r9
80008a64:	a3 78       	lsl	r8,0x3
80008a66:	f4 08 00 08 	add	r8,r10,r8
80008a6a:	f0 ca ff f0 	sub	r10,r8,-16
80008a6e:	ee e8 ff c8 	ld.d	r8,r7[-56]
80008a72:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][1][0] = P21;
80008a76:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008a7a:	ec fa 00 18 	ld.w	r10,r6[24]
80008a7e:	12 98       	mov	r8,r9
80008a80:	a3 78       	lsl	r8,0x3
80008a82:	12 08       	add	r8,r9
80008a84:	a3 78       	lsl	r8,0x3
80008a86:	f4 08 00 08 	add	r8,r10,r8
80008a8a:	f0 ca ff e8 	sub	r10,r8,-24
80008a8e:	ee e8 ff d0 	ld.d	r8,r7[-48]
80008a92:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][1][1] = P22;
80008a96:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008a9a:	ec fa 00 18 	ld.w	r10,r6[24]
80008a9e:	12 98       	mov	r8,r9
80008aa0:	a3 78       	lsl	r8,0x3
80008aa2:	12 08       	add	r8,r9
80008aa4:	a3 78       	lsl	r8,0x3
80008aa6:	f4 08 00 08 	add	r8,r10,r8
80008aaa:	f0 ca ff e0 	sub	r10,r8,-32
80008aae:	ee e8 ff d8 	ld.d	r8,r7[-40]
80008ab2:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][1][2] = P23;
80008ab6:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008aba:	ec fa 00 18 	ld.w	r10,r6[24]
80008abe:	12 98       	mov	r8,r9
80008ac0:	a3 78       	lsl	r8,0x3
80008ac2:	12 08       	add	r8,r9
80008ac4:	a3 78       	lsl	r8,0x3
80008ac6:	f4 08 00 08 	add	r8,r10,r8
80008aca:	f0 ca ff d8 	sub	r10,r8,-40
80008ace:	ee e8 ff e0 	ld.d	r8,r7[-32]
80008ad2:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][2][0] = P31;
80008ad6:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008ada:	ec fa 00 18 	ld.w	r10,r6[24]
80008ade:	12 98       	mov	r8,r9
80008ae0:	a3 78       	lsl	r8,0x3
80008ae2:	12 08       	add	r8,r9
80008ae4:	a3 78       	lsl	r8,0x3
80008ae6:	f4 08 00 08 	add	r8,r10,r8
80008aea:	f0 ca ff d0 	sub	r10,r8,-48
80008aee:	ee e8 ff e8 	ld.d	r8,r7[-24]
80008af2:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][2][1] = P32;
80008af6:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008afa:	ec fa 00 18 	ld.w	r10,r6[24]
80008afe:	12 98       	mov	r8,r9
80008b00:	a3 78       	lsl	r8,0x3
80008b02:	12 08       	add	r8,r9
80008b04:	a3 78       	lsl	r8,0x3
80008b06:	f4 08 00 08 	add	r8,r10,r8
80008b0a:	f0 ca ff c8 	sub	r10,r8,-56
80008b0e:	ee e8 ff f0 	ld.d	r8,r7[-16]
80008b12:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][2][2] = P33;
80008b16:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008b1a:	ec fa 00 18 	ld.w	r10,r6[24]
80008b1e:	12 98       	mov	r8,r9
80008b20:	a3 78       	lsl	r8,0x3
80008b22:	12 08       	add	r8,r9
80008b24:	a3 78       	lsl	r8,0x3
80008b26:	f4 08 00 08 	add	r8,r10,r8
80008b2a:	f0 ca ff c0 	sub	r10,r8,-64
80008b2e:	ee e8 ff f8 	ld.d	r8,r7[-8]
80008b32:	f4 e9 00 00 	st.d	r10[0],r8
	
	/*************************************************************************************/
	y = position_meas - centralData->position_estimator.localPosition.pos[axis];
80008b36:	ec f8 00 00 	ld.w	r8,r6[0]
80008b3a:	70 09       	ld.w	r9,r8[0x0]
80008b3c:	ee f8 ff 84 	ld.w	r8,r7[-124]
80008b40:	f0 c8 fc 99 	sub	r8,r8,-871
80008b44:	f2 08 03 28 	ld.w	r8,r9[r8<<0x2]
80008b48:	10 9c       	mov	r12,r8
80008b4a:	f0 16 00 02 	mcall	r6[8]
80008b4e:	14 98       	mov	r8,r10
80008b50:	16 99       	mov	r9,r11
80008b52:	ee ea ff 7c 	ld.d	r10,r7[-132]
80008b56:	f0 16 00 11 	mcall	r6[68]
80008b5a:	14 98       	mov	r8,r10
80008b5c:	16 99       	mov	r9,r11
80008b5e:	ee e9 ff 88 	st.d	r7[-120],r8
	
	S = P2[axis][0][0] + R2[axis];
80008b62:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008b66:	ec fa 00 1c 	ld.w	r10,r6[28]
80008b6a:	12 98       	mov	r8,r9
80008b6c:	a3 78       	lsl	r8,0x3
80008b6e:	12 08       	add	r8,r9
80008b70:	a3 78       	lsl	r8,0x3
80008b72:	f4 08 00 08 	add	r8,r10,r8
80008b76:	f0 ea 00 00 	ld.d	r10,r8[0]
80008b7a:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008b7e:	ec f8 01 50 	ld.w	r8,r6[336]
80008b82:	f0 09 02 38 	ld.d	r8,r8[r9<<0x3]
80008b86:	f0 16 00 05 	mcall	r6[20]
80008b8a:	14 98       	mov	r8,r10
80008b8c:	16 99       	mov	r9,r11
80008b8e:	ee e9 ff 98 	st.d	r7[-104],r8
	K1 = P2[axis][0][0] * 1/S;
80008b92:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008b96:	ec fa 00 1c 	ld.w	r10,r6[28]
80008b9a:	12 98       	mov	r8,r9
80008b9c:	a3 78       	lsl	r8,0x3
80008b9e:	12 08       	add	r8,r9
80008ba0:	a3 78       	lsl	r8,0x3
80008ba2:	f4 08 00 08 	add	r8,r10,r8
80008ba6:	f0 ea 00 00 	ld.d	r10,r8[0]
80008baa:	ee e8 ff 98 	ld.d	r8,r7[-104]
80008bae:	f0 16 00 0c 	mcall	r6[48]
80008bb2:	14 98       	mov	r8,r10
80008bb4:	16 99       	mov	r9,r11
80008bb6:	ee e9 ff a0 	st.d	r7[-96],r8
	K2 = P2[axis][1][0] * 1/S;
80008bba:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008bbe:	ec fa 00 1c 	ld.w	r10,r6[28]
80008bc2:	12 98       	mov	r8,r9
80008bc4:	a3 78       	lsl	r8,0x3
80008bc6:	12 08       	add	r8,r9
80008bc8:	a3 78       	lsl	r8,0x3
80008bca:	f4 08 00 08 	add	r8,r10,r8
80008bce:	2e 88       	sub	r8,-24
80008bd0:	f0 ea 00 00 	ld.d	r10,r8[0]
80008bd4:	ee e8 ff 98 	ld.d	r8,r7[-104]
80008bd8:	f0 16 00 0c 	mcall	r6[48]
80008bdc:	14 98       	mov	r8,r10
80008bde:	16 99       	mov	r9,r11
80008be0:	ee e9 ff a8 	st.d	r7[-88],r8
	K3 = P2[axis][2][0] * 1/S;
80008be4:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008be8:	ec fa 00 1c 	ld.w	r10,r6[28]
80008bec:	12 98       	mov	r8,r9
80008bee:	a3 78       	lsl	r8,0x3
80008bf0:	12 08       	add	r8,r9
80008bf2:	a3 78       	lsl	r8,0x3
80008bf4:	f4 08 00 08 	add	r8,r10,r8
80008bf8:	2d 08       	sub	r8,-48
80008bfa:	f0 ea 00 00 	ld.d	r10,r8[0]
80008bfe:	ee e8 ff 98 	ld.d	r8,r7[-104]
80008c02:	f0 16 00 0c 	mcall	r6[48]
80008c06:	14 98       	mov	r8,r10
80008c08:	16 99       	mov	r9,r11
80008c0a:	ee e9 ff b0 	st.d	r7[-80],r8
	
	centralData->position_estimator.localPosition.pos[axis] = centralData->position_estimator.localPosition.pos[axis] + K1 * y;
80008c0e:	ec f8 00 00 	ld.w	r8,r6[0]
80008c12:	70 01       	ld.w	r1,r8[0x0]
80008c14:	ee f5 ff 84 	ld.w	r5,r7[-124]
80008c18:	ec f8 00 00 	ld.w	r8,r6[0]
80008c1c:	70 09       	ld.w	r9,r8[0x0]
80008c1e:	ee f8 ff 84 	ld.w	r8,r7[-124]
80008c22:	f0 c8 fc 99 	sub	r8,r8,-871
80008c26:	f2 08 03 28 	ld.w	r8,r9[r8<<0x2]
80008c2a:	10 9c       	mov	r12,r8
80008c2c:	f0 16 00 02 	mcall	r6[8]
80008c30:	14 92       	mov	r2,r10
80008c32:	16 93       	mov	r3,r11
80008c34:	ee e8 ff 88 	ld.d	r8,r7[-120]
80008c38:	ee ea ff a0 	ld.d	r10,r7[-96]
80008c3c:	f0 16 00 03 	mcall	r6[12]
80008c40:	14 98       	mov	r8,r10
80008c42:	16 99       	mov	r9,r11
80008c44:	04 9a       	mov	r10,r2
80008c46:	06 9b       	mov	r11,r3
80008c48:	f0 16 00 05 	mcall	r6[20]
80008c4c:	14 98       	mov	r8,r10
80008c4e:	16 99       	mov	r9,r11
80008c50:	10 9a       	mov	r10,r8
80008c52:	12 9b       	mov	r11,r9
80008c54:	f0 16 00 09 	mcall	r6[36]
80008c58:	18 99       	mov	r9,r12
80008c5a:	ea c8 fc 99 	sub	r8,r5,-871
80008c5e:	e2 08 09 29 	st.w	r1[r8<<0x2],r9
	centralData->position_estimator.vel[axis] = centralData->position_estimator.vel[axis] + K2 * y;
80008c62:	ec f8 00 00 	ld.w	r8,r6[0]
80008c66:	70 01       	ld.w	r1,r8[0x0]
80008c68:	ee f5 ff 84 	ld.w	r5,r7[-124]
80008c6c:	ec f8 00 00 	ld.w	r8,r6[0]
80008c70:	70 09       	ld.w	r9,r8[0x0]
80008c72:	ee f8 ff 84 	ld.w	r8,r7[-124]
80008c76:	f0 c8 fc a3 	sub	r8,r8,-861
80008c7a:	f2 08 03 28 	ld.w	r8,r9[r8<<0x2]
80008c7e:	10 9c       	mov	r12,r8
80008c80:	f0 16 00 02 	mcall	r6[8]
80008c84:	14 92       	mov	r2,r10
80008c86:	16 93       	mov	r3,r11
80008c88:	ee e8 ff 88 	ld.d	r8,r7[-120]
80008c8c:	ee ea ff a8 	ld.d	r10,r7[-88]
80008c90:	f0 16 00 03 	mcall	r6[12]
80008c94:	14 98       	mov	r8,r10
80008c96:	16 99       	mov	r9,r11
80008c98:	04 9a       	mov	r10,r2
80008c9a:	06 9b       	mov	r11,r3
80008c9c:	f0 16 00 05 	mcall	r6[20]
80008ca0:	14 98       	mov	r8,r10
80008ca2:	16 99       	mov	r9,r11
80008ca4:	10 9a       	mov	r10,r8
80008ca6:	12 9b       	mov	r11,r9
80008ca8:	f0 16 00 09 	mcall	r6[36]
80008cac:	18 99       	mov	r9,r12
80008cae:	ea c8 fc a3 	sub	r8,r5,-861
80008cb2:	e2 08 09 29 	st.w	r1[r8<<0x2],r9
	centralData->imu1.attitude.be[axis+ACC_OFFSET] = centralData->imu1.attitude.be[axis+ACC_OFFSET] + K3 * y;
80008cb6:	ec f8 00 00 	ld.w	r8,r6[0]
80008cba:	70 01       	ld.w	r1,r8[0x0]
80008cbc:	ee f8 ff 84 	ld.w	r8,r7[-124]
80008cc0:	f0 c5 ff fd 	sub	r5,r8,-3
80008cc4:	ec f8 00 00 	ld.w	r8,r6[0]
80008cc8:	70 09       	ld.w	r9,r8[0x0]
80008cca:	ee f8 ff 84 	ld.w	r8,r7[-124]
80008cce:	2f d8       	sub	r8,-3
80008cd0:	2f 48       	sub	r8,-12
80008cd2:	f2 08 03 28 	ld.w	r8,r9[r8<<0x2]
80008cd6:	10 9c       	mov	r12,r8
80008cd8:	f0 16 00 02 	mcall	r6[8]
80008cdc:	14 92       	mov	r2,r10
80008cde:	16 93       	mov	r3,r11
80008ce0:	ee e8 ff 88 	ld.d	r8,r7[-120]
80008ce4:	ee ea ff b0 	ld.d	r10,r7[-80]
80008ce8:	f0 16 00 03 	mcall	r6[12]
80008cec:	14 98       	mov	r8,r10
80008cee:	16 99       	mov	r9,r11
80008cf0:	04 9a       	mov	r10,r2
80008cf2:	06 9b       	mov	r11,r3
80008cf4:	f0 16 00 05 	mcall	r6[20]
80008cf8:	14 98       	mov	r8,r10
80008cfa:	16 99       	mov	r9,r11
80008cfc:	10 9a       	mov	r10,r8
80008cfe:	12 9b       	mov	r11,r9
80008d00:	f0 16 00 09 	mcall	r6[36]
80008d04:	18 99       	mov	r9,r12
80008d06:	ea c8 ff f4 	sub	r8,r5,-12
80008d0a:	e2 08 09 29 	st.w	r1[r8<<0x2],r9
	
	P11 = (1. - K1) * P2[axis][0][0];
80008d0e:	ee e8 ff a0 	ld.d	r8,r7[-96]
80008d12:	30 0a       	mov	r10,0
80008d14:	fc 1b 3f f0 	movh	r11,0x3ff0
80008d18:	f0 16 00 11 	mcall	r6[68]
80008d1c:	14 98       	mov	r8,r10
80008d1e:	16 99       	mov	r9,r11
80008d20:	10 9a       	mov	r10,r8
80008d22:	12 9b       	mov	r11,r9
80008d24:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008d28:	ec fc 00 1c 	ld.w	r12,r6[28]
80008d2c:	12 98       	mov	r8,r9
80008d2e:	a3 78       	lsl	r8,0x3
80008d30:	12 08       	add	r8,r9
80008d32:	a3 78       	lsl	r8,0x3
80008d34:	f8 08 00 08 	add	r8,r12,r8
80008d38:	f0 e8 00 00 	ld.d	r8,r8[0]
80008d3c:	f0 16 00 03 	mcall	r6[12]
80008d40:	14 98       	mov	r8,r10
80008d42:	16 99       	mov	r9,r11
80008d44:	ee e9 ff b8 	st.d	r7[-72],r8
	P12 = (1. - K1) * P2[axis][0][1];
80008d48:	ee e8 ff a0 	ld.d	r8,r7[-96]
80008d4c:	30 0a       	mov	r10,0
80008d4e:	fc 1b 3f f0 	movh	r11,0x3ff0
80008d52:	f0 16 00 11 	mcall	r6[68]
80008d56:	14 98       	mov	r8,r10
80008d58:	16 99       	mov	r9,r11
80008d5a:	10 9a       	mov	r10,r8
80008d5c:	12 9b       	mov	r11,r9
80008d5e:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008d62:	ec fc 00 1c 	ld.w	r12,r6[28]
80008d66:	12 98       	mov	r8,r9
80008d68:	a3 78       	lsl	r8,0x3
80008d6a:	12 08       	add	r8,r9
80008d6c:	2f f8       	sub	r8,-1
80008d6e:	f8 08 02 38 	ld.d	r8,r12[r8<<0x3]
80008d72:	f0 16 00 03 	mcall	r6[12]
80008d76:	14 98       	mov	r8,r10
80008d78:	16 99       	mov	r9,r11
80008d7a:	ee e9 ff c0 	st.d	r7[-64],r8
	P13 = (1. - K1) * P2[axis][0][2];
80008d7e:	ee e8 ff a0 	ld.d	r8,r7[-96]
80008d82:	30 0a       	mov	r10,0
80008d84:	fc 1b 3f f0 	movh	r11,0x3ff0
80008d88:	f0 16 00 11 	mcall	r6[68]
80008d8c:	14 98       	mov	r8,r10
80008d8e:	16 99       	mov	r9,r11
80008d90:	10 9a       	mov	r10,r8
80008d92:	12 9b       	mov	r11,r9
80008d94:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008d98:	ec fc 00 1c 	ld.w	r12,r6[28]
80008d9c:	12 98       	mov	r8,r9
80008d9e:	a3 78       	lsl	r8,0x3
80008da0:	12 08       	add	r8,r9
80008da2:	a3 78       	lsl	r8,0x3
80008da4:	f8 08 00 08 	add	r8,r12,r8
80008da8:	2f 08       	sub	r8,-16
80008daa:	f0 e8 00 00 	ld.d	r8,r8[0]
80008dae:	f0 16 00 03 	mcall	r6[12]
80008db2:	14 98       	mov	r8,r10
80008db4:	16 99       	mov	r9,r11
80008db6:	ee e9 ff c8 	st.d	r7[-56],r8
	P21 = -K2 * P2[axis][0][0] + P2[axis][1][0];
80008dba:	ee f8 ff a8 	ld.w	r8,r7[-88]
80008dbe:	10 99       	mov	r9,r8
80008dc0:	ee 19 80 00 	eorh	r9,0x8000
80008dc4:	ef 49 ff 4c 	st.w	r7[-180],r9
80008dc8:	ee f8 ff ac 	ld.w	r8,r7[-84]
80008dcc:	ef 48 ff 50 	st.w	r7[-176],r8
80008dd0:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008dd4:	ec fa 00 1c 	ld.w	r10,r6[28]
80008dd8:	12 98       	mov	r8,r9
80008dda:	a3 78       	lsl	r8,0x3
80008ddc:	12 08       	add	r8,r9
80008dde:	a3 78       	lsl	r8,0x3
80008de0:	f4 08 00 08 	add	r8,r10,r8
80008de4:	f0 e8 00 00 	ld.d	r8,r8[0]
80008de8:	ee ea ff 4c 	ld.d	r10,r7[-180]
80008dec:	f0 16 00 03 	mcall	r6[12]
80008df0:	14 98       	mov	r8,r10
80008df2:	16 99       	mov	r9,r11
80008df4:	10 9a       	mov	r10,r8
80008df6:	12 9b       	mov	r11,r9
80008df8:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008dfc:	ec fc 00 1c 	ld.w	r12,r6[28]
80008e00:	12 98       	mov	r8,r9
80008e02:	a3 78       	lsl	r8,0x3
80008e04:	12 08       	add	r8,r9
80008e06:	a3 78       	lsl	r8,0x3
80008e08:	f8 08 00 08 	add	r8,r12,r8
80008e0c:	2e 88       	sub	r8,-24
80008e0e:	f0 e8 00 00 	ld.d	r8,r8[0]
80008e12:	f0 16 00 05 	mcall	r6[20]
80008e16:	14 98       	mov	r8,r10
80008e18:	16 99       	mov	r9,r11
80008e1a:	ee e9 ff d0 	st.d	r7[-48],r8
	P22 = -K2 * P2[axis][0][1] + P2[axis][1][1];
80008e1e:	ee f8 ff a8 	ld.w	r8,r7[-88]
80008e22:	10 99       	mov	r9,r8
80008e24:	ee 19 80 00 	eorh	r9,0x8000
80008e28:	ef 49 ff 54 	st.w	r7[-172],r9
80008e2c:	ee f8 ff ac 	ld.w	r8,r7[-84]
80008e30:	ef 48 ff 58 	st.w	r7[-168],r8
80008e34:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008e38:	ec fa 00 1c 	ld.w	r10,r6[28]
80008e3c:	12 98       	mov	r8,r9
80008e3e:	a3 78       	lsl	r8,0x3
80008e40:	12 08       	add	r8,r9
80008e42:	2f f8       	sub	r8,-1
80008e44:	f4 08 02 38 	ld.d	r8,r10[r8<<0x3]
80008e48:	ee ea ff 54 	ld.d	r10,r7[-172]
80008e4c:	f0 16 00 03 	mcall	r6[12]
80008e50:	14 98       	mov	r8,r10
80008e52:	16 99       	mov	r9,r11
80008e54:	10 9a       	mov	r10,r8
80008e56:	12 9b       	mov	r11,r9
80008e58:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008e5c:	ec fc 00 1c 	ld.w	r12,r6[28]
80008e60:	12 98       	mov	r8,r9
80008e62:	a3 78       	lsl	r8,0x3
80008e64:	12 08       	add	r8,r9
80008e66:	a3 78       	lsl	r8,0x3
80008e68:	f8 08 00 08 	add	r8,r12,r8
80008e6c:	2e 08       	sub	r8,-32
80008e6e:	f0 e8 00 00 	ld.d	r8,r8[0]
80008e72:	f0 16 00 05 	mcall	r6[20]
80008e76:	14 98       	mov	r8,r10
80008e78:	16 99       	mov	r9,r11
80008e7a:	ee e9 ff d8 	st.d	r7[-40],r8
	P23 = -K2 * P2[axis][0][2] + P2[axis][1][2];
80008e7e:	ee f8 ff a8 	ld.w	r8,r7[-88]
80008e82:	10 99       	mov	r9,r8
80008e84:	ee 19 80 00 	eorh	r9,0x8000
80008e88:	ef 49 ff 5c 	st.w	r7[-164],r9
80008e8c:	ee f8 ff ac 	ld.w	r8,r7[-84]
80008e90:	ef 48 ff 60 	st.w	r7[-160],r8
80008e94:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008e98:	ec fa 00 1c 	ld.w	r10,r6[28]
80008e9c:	12 98       	mov	r8,r9
80008e9e:	a3 78       	lsl	r8,0x3
80008ea0:	12 08       	add	r8,r9
80008ea2:	a3 78       	lsl	r8,0x3
80008ea4:	f4 08 00 08 	add	r8,r10,r8
80008ea8:	2f 08       	sub	r8,-16
80008eaa:	f0 e8 00 00 	ld.d	r8,r8[0]
80008eae:	ee ea ff 5c 	ld.d	r10,r7[-164]
80008eb2:	f0 16 00 03 	mcall	r6[12]
80008eb6:	14 98       	mov	r8,r10
80008eb8:	16 99       	mov	r9,r11
80008eba:	10 9a       	mov	r10,r8
80008ebc:	12 9b       	mov	r11,r9
80008ebe:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008ec2:	ec fc 00 1c 	ld.w	r12,r6[28]
80008ec6:	12 98       	mov	r8,r9
80008ec8:	a3 78       	lsl	r8,0x3
80008eca:	12 08       	add	r8,r9
80008ecc:	a3 78       	lsl	r8,0x3
80008ece:	f8 08 00 08 	add	r8,r12,r8
80008ed2:	2d 88       	sub	r8,-40
80008ed4:	f0 e8 00 00 	ld.d	r8,r8[0]
80008ed8:	f0 16 00 05 	mcall	r6[20]
80008edc:	14 98       	mov	r8,r10
80008ede:	16 99       	mov	r9,r11
80008ee0:	ee e9 ff e0 	st.d	r7[-32],r8
	P31 = -K3 * P2[axis][0][0] + P2[axis][2][0];
80008ee4:	ee f8 ff b0 	ld.w	r8,r7[-80]
80008ee8:	10 99       	mov	r9,r8
80008eea:	ee 19 80 00 	eorh	r9,0x8000
80008eee:	ef 49 ff 64 	st.w	r7[-156],r9
80008ef2:	ee f8 ff b4 	ld.w	r8,r7[-76]
80008ef6:	ef 48 ff 68 	st.w	r7[-152],r8
80008efa:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008efe:	ec fa 00 1c 	ld.w	r10,r6[28]
80008f02:	12 98       	mov	r8,r9
80008f04:	a3 78       	lsl	r8,0x3
80008f06:	12 08       	add	r8,r9
80008f08:	a3 78       	lsl	r8,0x3
80008f0a:	f4 08 00 08 	add	r8,r10,r8
80008f0e:	f0 e8 00 00 	ld.d	r8,r8[0]
80008f12:	ee ea ff 64 	ld.d	r10,r7[-156]
80008f16:	f0 16 00 03 	mcall	r6[12]
80008f1a:	14 98       	mov	r8,r10
80008f1c:	16 99       	mov	r9,r11
80008f1e:	10 9a       	mov	r10,r8
80008f20:	12 9b       	mov	r11,r9
80008f22:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008f26:	ec fc 00 1c 	ld.w	r12,r6[28]
80008f2a:	12 98       	mov	r8,r9
80008f2c:	a3 78       	lsl	r8,0x3
80008f2e:	12 08       	add	r8,r9
80008f30:	a3 78       	lsl	r8,0x3
80008f32:	f8 08 00 08 	add	r8,r12,r8
80008f36:	2d 08       	sub	r8,-48
80008f38:	f0 e8 00 00 	ld.d	r8,r8[0]
80008f3c:	f0 16 00 05 	mcall	r6[20]
80008f40:	14 98       	mov	r8,r10
80008f42:	16 99       	mov	r9,r11
80008f44:	ee e9 ff e8 	st.d	r7[-24],r8
	P32 = -K3 * P2[axis][0][1] + P2[axis][2][1];
80008f48:	ee f8 ff b0 	ld.w	r8,r7[-80]
80008f4c:	10 99       	mov	r9,r8
80008f4e:	ee 19 80 00 	eorh	r9,0x8000
80008f52:	ef 49 ff 6c 	st.w	r7[-148],r9
80008f56:	ee f8 ff b4 	ld.w	r8,r7[-76]
80008f5a:	ef 48 ff 70 	st.w	r7[-144],r8
80008f5e:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008f62:	ec fa 00 1c 	ld.w	r10,r6[28]
80008f66:	12 98       	mov	r8,r9
80008f68:	a3 78       	lsl	r8,0x3
80008f6a:	12 08       	add	r8,r9
80008f6c:	2f f8       	sub	r8,-1
80008f6e:	f4 08 02 38 	ld.d	r8,r10[r8<<0x3]
80008f72:	ee ea ff 6c 	ld.d	r10,r7[-148]
80008f76:	f0 16 00 03 	mcall	r6[12]
80008f7a:	14 98       	mov	r8,r10
80008f7c:	16 99       	mov	r9,r11
80008f7e:	10 9a       	mov	r10,r8
80008f80:	12 9b       	mov	r11,r9
80008f82:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008f86:	ec fc 00 1c 	ld.w	r12,r6[28]
80008f8a:	12 98       	mov	r8,r9
80008f8c:	a3 78       	lsl	r8,0x3
80008f8e:	12 08       	add	r8,r9
80008f90:	a3 78       	lsl	r8,0x3
80008f92:	f8 08 00 08 	add	r8,r12,r8
80008f96:	2c 88       	sub	r8,-56
80008f98:	f0 e8 00 00 	ld.d	r8,r8[0]
80008f9c:	f0 16 00 05 	mcall	r6[20]
80008fa0:	14 98       	mov	r8,r10
80008fa2:	16 99       	mov	r9,r11
80008fa4:	ee e9 ff f0 	st.d	r7[-16],r8
	P33 = -K3 * P2[axis][0][2] + P2[axis][2][2];
80008fa8:	ee f8 ff b0 	ld.w	r8,r7[-80]
80008fac:	10 99       	mov	r9,r8
80008fae:	ee 19 80 00 	eorh	r9,0x8000
80008fb2:	ef 49 ff 74 	st.w	r7[-140],r9
80008fb6:	ee f8 ff b4 	ld.w	r8,r7[-76]
80008fba:	ef 48 ff 78 	st.w	r7[-136],r8
80008fbe:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008fc2:	ec fa 00 1c 	ld.w	r10,r6[28]
80008fc6:	12 98       	mov	r8,r9
80008fc8:	a3 78       	lsl	r8,0x3
80008fca:	12 08       	add	r8,r9
80008fcc:	a3 78       	lsl	r8,0x3
80008fce:	f4 08 00 08 	add	r8,r10,r8
80008fd2:	2f 08       	sub	r8,-16
80008fd4:	f0 e8 00 00 	ld.d	r8,r8[0]
80008fd8:	ee ea ff 74 	ld.d	r10,r7[-140]
80008fdc:	f0 16 00 03 	mcall	r6[12]
80008fe0:	14 98       	mov	r8,r10
80008fe2:	16 99       	mov	r9,r11
80008fe4:	10 9a       	mov	r10,r8
80008fe6:	12 9b       	mov	r11,r9
80008fe8:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008fec:	ec fc 00 1c 	ld.w	r12,r6[28]
80008ff0:	12 98       	mov	r8,r9
80008ff2:	a3 78       	lsl	r8,0x3
80008ff4:	12 08       	add	r8,r9
80008ff6:	a3 78       	lsl	r8,0x3
80008ff8:	f8 08 00 08 	add	r8,r12,r8
80008ffc:	2c 08       	sub	r8,-64
80008ffe:	f0 e8 00 00 	ld.d	r8,r8[0]
80009002:	f0 16 00 05 	mcall	r6[20]
80009006:	14 98       	mov	r8,r10
80009008:	16 99       	mov	r9,r11
8000900a:	ee e9 ff f8 	st.d	r7[-8],r8

	P2[axis][0][0] = P11;
8000900e:	ee f9 ff 84 	ld.w	r9,r7[-124]
80009012:	ec fa 00 1c 	ld.w	r10,r6[28]
80009016:	12 98       	mov	r8,r9
80009018:	a3 78       	lsl	r8,0x3
8000901a:	12 08       	add	r8,r9
8000901c:	a3 78       	lsl	r8,0x3
8000901e:	10 0a       	add	r10,r8
80009020:	ee e8 ff b8 	ld.d	r8,r7[-72]
80009024:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][0][1] = P12;
80009028:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000902c:	ec fa 00 1c 	ld.w	r10,r6[28]
80009030:	12 98       	mov	r8,r9
80009032:	a3 78       	lsl	r8,0x3
80009034:	12 08       	add	r8,r9
80009036:	f0 cb ff ff 	sub	r11,r8,-1
8000903a:	ee e8 ff c0 	ld.d	r8,r7[-64]
8000903e:	f4 0b 08 38 	st.d	r10[r11<<0x3],r8
	P2[axis][0][2] = P13;
80009042:	ee f9 ff 84 	ld.w	r9,r7[-124]
80009046:	ec fa 00 1c 	ld.w	r10,r6[28]
8000904a:	12 98       	mov	r8,r9
8000904c:	a3 78       	lsl	r8,0x3
8000904e:	12 08       	add	r8,r9
80009050:	a3 78       	lsl	r8,0x3
80009052:	f4 08 00 08 	add	r8,r10,r8
80009056:	f0 ca ff f0 	sub	r10,r8,-16
8000905a:	ee e8 ff c8 	ld.d	r8,r7[-56]
8000905e:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][1][0] = P21;
80009062:	ee f9 ff 84 	ld.w	r9,r7[-124]
80009066:	ec fa 00 1c 	ld.w	r10,r6[28]
8000906a:	12 98       	mov	r8,r9
8000906c:	a3 78       	lsl	r8,0x3
8000906e:	12 08       	add	r8,r9
80009070:	a3 78       	lsl	r8,0x3
80009072:	f4 08 00 08 	add	r8,r10,r8
80009076:	f0 ca ff e8 	sub	r10,r8,-24
8000907a:	ee e8 ff d0 	ld.d	r8,r7[-48]
8000907e:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][1][1] = P22;
80009082:	ee f9 ff 84 	ld.w	r9,r7[-124]
80009086:	ec fa 00 1c 	ld.w	r10,r6[28]
8000908a:	12 98       	mov	r8,r9
8000908c:	a3 78       	lsl	r8,0x3
8000908e:	12 08       	add	r8,r9
80009090:	a3 78       	lsl	r8,0x3
80009092:	f4 08 00 08 	add	r8,r10,r8
80009096:	f0 ca ff e0 	sub	r10,r8,-32
8000909a:	ee e8 ff d8 	ld.d	r8,r7[-40]
8000909e:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][1][2] = P23;
800090a2:	ee f9 ff 84 	ld.w	r9,r7[-124]
800090a6:	ec fa 00 1c 	ld.w	r10,r6[28]
800090aa:	12 98       	mov	r8,r9
800090ac:	a3 78       	lsl	r8,0x3
800090ae:	12 08       	add	r8,r9
800090b0:	a3 78       	lsl	r8,0x3
800090b2:	f4 08 00 08 	add	r8,r10,r8
800090b6:	f0 ca ff d8 	sub	r10,r8,-40
800090ba:	ee e8 ff e0 	ld.d	r8,r7[-32]
800090be:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][2][0] = P31;
800090c2:	ee f9 ff 84 	ld.w	r9,r7[-124]
800090c6:	ec fa 00 1c 	ld.w	r10,r6[28]
800090ca:	12 98       	mov	r8,r9
800090cc:	a3 78       	lsl	r8,0x3
800090ce:	12 08       	add	r8,r9
800090d0:	a3 78       	lsl	r8,0x3
800090d2:	f4 08 00 08 	add	r8,r10,r8
800090d6:	f0 ca ff d0 	sub	r10,r8,-48
800090da:	ee e8 ff e8 	ld.d	r8,r7[-24]
800090de:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][2][1] = P32;
800090e2:	ee f9 ff 84 	ld.w	r9,r7[-124]
800090e6:	ec fa 00 1c 	ld.w	r10,r6[28]
800090ea:	12 98       	mov	r8,r9
800090ec:	a3 78       	lsl	r8,0x3
800090ee:	12 08       	add	r8,r9
800090f0:	a3 78       	lsl	r8,0x3
800090f2:	f4 08 00 08 	add	r8,r10,r8
800090f6:	f0 ca ff c8 	sub	r10,r8,-56
800090fa:	ee e8 ff f0 	ld.d	r8,r7[-16]
800090fe:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][2][2] = P33;
80009102:	ee f9 ff 84 	ld.w	r9,r7[-124]
80009106:	ec fa 00 1c 	ld.w	r10,r6[28]
8000910a:	12 98       	mov	r8,r9
8000910c:	a3 78       	lsl	r8,0x3
8000910e:	12 08       	add	r8,r9
80009110:	a3 78       	lsl	r8,0x3
80009112:	f4 08 00 08 	add	r8,r10,r8
80009116:	f0 ca ff c0 	sub	r10,r8,-64
8000911a:	ee e8 ff f8 	ld.d	r8,r7[-8]
8000911e:	f4 e9 00 00 	st.d	r10[0],r8
}
80009122:	2c 7d       	sub	sp,-228
80009124:	e3 cd 80 ee 	ldm	sp++,r1-r3,r5-r7,pc
80009128:	80 00       	ld.sh	r0,r0[0x0]
8000912a:	83 b2       	st.w	r1[0x2c],r2

8000912c <e_kalman_update_speed>:

// update covariance
Pp = Pm - K*H*Pm;
*/
void e_kalman_update_speed(int axis, float speed_meas)
{
8000912c:	eb cd 40 ee 	pushm	r1-r3,r5-r7,lr
80009130:	1a 97       	mov	r7,sp
80009132:	fa cd 00 d8 	sub	sp,sp,216
80009136:	fe f6 0c 1a 	ld.w	r6,pc[3098]
8000913a:	1e 26       	rsub	r6,pc
8000913c:	ef 4c ff 8c 	st.w	r7[-116],r12
80009140:	ef 4b ff 88 	st.w	r7[-120],r11
	
	double yd,S,K1,K2,K3;
	double P11,P12,P13,P21,P22,P23,P31,P32,P33;
	
	yd = speed_meas - centralData->estimation.state[axis][SPEED];
80009144:	ee fc ff 88 	ld.w	r12,r7[-120]
80009148:	f0 16 00 02 	mcall	r6[8]
8000914c:	ec f8 00 00 	ld.w	r8,r6[0]
80009150:	70 0c       	ld.w	r12,r8[0x0]
80009152:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009156:	12 98       	mov	r8,r9
80009158:	a1 78       	lsl	r8,0x1
8000915a:	12 08       	add	r8,r9
8000915c:	2f f8       	sub	r8,-1
8000915e:	a3 78       	lsl	r8,0x3
80009160:	f8 08 00 08 	add	r8,r12,r8
80009164:	f0 e8 0b 5c 	ld.d	r8,r8[2908]
80009168:	f0 16 00 11 	mcall	r6[68]
8000916c:	14 98       	mov	r8,r10
8000916e:	16 99       	mov	r9,r11
80009170:	ee e9 ff 90 	st.d	r7[-112],r8
	
	
	S = P[axis][1][1] + R[axis];
80009174:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009178:	ec fa 00 18 	ld.w	r10,r6[24]
8000917c:	12 98       	mov	r8,r9
8000917e:	a3 78       	lsl	r8,0x3
80009180:	12 08       	add	r8,r9
80009182:	a3 78       	lsl	r8,0x3
80009184:	f4 08 00 08 	add	r8,r10,r8
80009188:	2e 08       	sub	r8,-32
8000918a:	f0 ea 00 00 	ld.d	r10,r8[0]
8000918e:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009192:	ec f8 01 54 	ld.w	r8,r6[340]
80009196:	f0 09 02 38 	ld.d	r8,r8[r9<<0x3]
8000919a:	f0 16 00 05 	mcall	r6[20]
8000919e:	14 98       	mov	r8,r10
800091a0:	16 99       	mov	r9,r11
800091a2:	ee e9 ff 98 	st.d	r7[-104],r8
	K1 = P[axis][0][1] * 1/S;
800091a6:	ee f9 ff 8c 	ld.w	r9,r7[-116]
800091aa:	ec fa 00 18 	ld.w	r10,r6[24]
800091ae:	12 98       	mov	r8,r9
800091b0:	a3 78       	lsl	r8,0x3
800091b2:	12 08       	add	r8,r9
800091b4:	2f f8       	sub	r8,-1
800091b6:	f4 08 02 3a 	ld.d	r10,r10[r8<<0x3]
800091ba:	ee e8 ff 98 	ld.d	r8,r7[-104]
800091be:	f0 16 00 0c 	mcall	r6[48]
800091c2:	14 98       	mov	r8,r10
800091c4:	16 99       	mov	r9,r11
800091c6:	ee e9 ff a0 	st.d	r7[-96],r8
	K2 = P[axis][1][1] * 1/S;
800091ca:	ee f9 ff 8c 	ld.w	r9,r7[-116]
800091ce:	ec fa 00 18 	ld.w	r10,r6[24]
800091d2:	12 98       	mov	r8,r9
800091d4:	a3 78       	lsl	r8,0x3
800091d6:	12 08       	add	r8,r9
800091d8:	a3 78       	lsl	r8,0x3
800091da:	f4 08 00 08 	add	r8,r10,r8
800091de:	2e 08       	sub	r8,-32
800091e0:	f0 ea 00 00 	ld.d	r10,r8[0]
800091e4:	ee e8 ff 98 	ld.d	r8,r7[-104]
800091e8:	f0 16 00 0c 	mcall	r6[48]
800091ec:	14 98       	mov	r8,r10
800091ee:	16 99       	mov	r9,r11
800091f0:	ee e9 ff a8 	st.d	r7[-88],r8
	K3 = P[axis][2][1] * 1/S;
800091f4:	ee f9 ff 8c 	ld.w	r9,r7[-116]
800091f8:	ec fa 00 18 	ld.w	r10,r6[24]
800091fc:	12 98       	mov	r8,r9
800091fe:	a3 78       	lsl	r8,0x3
80009200:	12 08       	add	r8,r9
80009202:	a3 78       	lsl	r8,0x3
80009204:	f4 08 00 08 	add	r8,r10,r8
80009208:	2c 88       	sub	r8,-56
8000920a:	f0 ea 00 00 	ld.d	r10,r8[0]
8000920e:	ee e8 ff 98 	ld.d	r8,r7[-104]
80009212:	f0 16 00 0c 	mcall	r6[48]
80009216:	14 98       	mov	r8,r10
80009218:	16 99       	mov	r9,r11
8000921a:	ee e9 ff b0 	st.d	r7[-80],r8

	centralData->estimation.state[axis][POSITION] = centralData->estimation.state[axis][POSITION] + K1 * yd;
8000921e:	ec f8 00 00 	ld.w	r8,r6[0]
80009222:	70 01       	ld.w	r1,r8[0x0]
80009224:	ee f5 ff 8c 	ld.w	r5,r7[-116]
80009228:	ec f8 00 00 	ld.w	r8,r6[0]
8000922c:	70 0a       	ld.w	r10,r8[0x0]
8000922e:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009232:	12 98       	mov	r8,r9
80009234:	a1 78       	lsl	r8,0x1
80009236:	12 08       	add	r8,r9
80009238:	a3 78       	lsl	r8,0x3
8000923a:	f4 08 00 08 	add	r8,r10,r8
8000923e:	f0 c8 f4 a4 	sub	r8,r8,-2908
80009242:	f0 e2 00 00 	ld.d	r2,r8[0]
80009246:	ee e8 ff 90 	ld.d	r8,r7[-112]
8000924a:	ee ea ff a0 	ld.d	r10,r7[-96]
8000924e:	f0 16 00 03 	mcall	r6[12]
80009252:	14 98       	mov	r8,r10
80009254:	16 99       	mov	r9,r11
80009256:	04 9a       	mov	r10,r2
80009258:	06 9b       	mov	r11,r3
8000925a:	f0 16 00 05 	mcall	r6[20]
8000925e:	14 98       	mov	r8,r10
80009260:	16 99       	mov	r9,r11
80009262:	10 9a       	mov	r10,r8
80009264:	12 9b       	mov	r11,r9
80009266:	0a 98       	mov	r8,r5
80009268:	a1 78       	lsl	r8,0x1
8000926a:	0a 08       	add	r8,r5
8000926c:	a3 78       	lsl	r8,0x3
8000926e:	e2 08 00 08 	add	r8,r1,r8
80009272:	f0 c8 f4 a4 	sub	r8,r8,-2908
80009276:	f0 eb 00 00 	st.d	r8[0],r10
	centralData->estimation.state[axis][SPEED] = centralData->estimation.state[axis][SPEED] + K2 * yd;
8000927a:	ec f8 00 00 	ld.w	r8,r6[0]
8000927e:	70 01       	ld.w	r1,r8[0x0]
80009280:	ee f5 ff 8c 	ld.w	r5,r7[-116]
80009284:	ec f8 00 00 	ld.w	r8,r6[0]
80009288:	70 0a       	ld.w	r10,r8[0x0]
8000928a:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8000928e:	12 98       	mov	r8,r9
80009290:	a1 78       	lsl	r8,0x1
80009292:	12 08       	add	r8,r9
80009294:	2f f8       	sub	r8,-1
80009296:	a3 78       	lsl	r8,0x3
80009298:	f4 08 00 08 	add	r8,r10,r8
8000929c:	f0 e2 0b 5c 	ld.d	r2,r8[2908]
800092a0:	ee e8 ff 90 	ld.d	r8,r7[-112]
800092a4:	ee ea ff a8 	ld.d	r10,r7[-88]
800092a8:	f0 16 00 03 	mcall	r6[12]
800092ac:	14 98       	mov	r8,r10
800092ae:	16 99       	mov	r9,r11
800092b0:	04 9a       	mov	r10,r2
800092b2:	06 9b       	mov	r11,r3
800092b4:	f0 16 00 05 	mcall	r6[20]
800092b8:	14 98       	mov	r8,r10
800092ba:	16 99       	mov	r9,r11
800092bc:	10 9a       	mov	r10,r8
800092be:	12 9b       	mov	r11,r9
800092c0:	0a 98       	mov	r8,r5
800092c2:	a1 78       	lsl	r8,0x1
800092c4:	0a 08       	add	r8,r5
800092c6:	2f f8       	sub	r8,-1
800092c8:	a3 78       	lsl	r8,0x3
800092ca:	e2 08 00 08 	add	r8,r1,r8
800092ce:	f0 eb 0b 5c 	st.d	r8[2908],r10
	centralData->estimation.state[axis][BIAIS] = centralData->estimation.state[axis][BIAIS] + K3 * yd;
800092d2:	ec f8 00 00 	ld.w	r8,r6[0]
800092d6:	70 01       	ld.w	r1,r8[0x0]
800092d8:	ee f5 ff 8c 	ld.w	r5,r7[-116]
800092dc:	ec f8 00 00 	ld.w	r8,r6[0]
800092e0:	70 0a       	ld.w	r10,r8[0x0]
800092e2:	ee f9 ff 8c 	ld.w	r9,r7[-116]
800092e6:	12 98       	mov	r8,r9
800092e8:	a1 78       	lsl	r8,0x1
800092ea:	12 08       	add	r8,r9
800092ec:	a3 78       	lsl	r8,0x3
800092ee:	f4 08 00 08 	add	r8,r10,r8
800092f2:	f0 c8 f4 94 	sub	r8,r8,-2924
800092f6:	f0 e2 00 00 	ld.d	r2,r8[0]
800092fa:	ee e8 ff 90 	ld.d	r8,r7[-112]
800092fe:	ee ea ff b0 	ld.d	r10,r7[-80]
80009302:	f0 16 00 03 	mcall	r6[12]
80009306:	14 98       	mov	r8,r10
80009308:	16 99       	mov	r9,r11
8000930a:	04 9a       	mov	r10,r2
8000930c:	06 9b       	mov	r11,r3
8000930e:	f0 16 00 05 	mcall	r6[20]
80009312:	14 98       	mov	r8,r10
80009314:	16 99       	mov	r9,r11
80009316:	10 9a       	mov	r10,r8
80009318:	12 9b       	mov	r11,r9
8000931a:	0a 98       	mov	r8,r5
8000931c:	a1 78       	lsl	r8,0x1
8000931e:	0a 08       	add	r8,r5
80009320:	a3 78       	lsl	r8,0x3
80009322:	e2 08 00 08 	add	r8,r1,r8
80009326:	f0 c8 f4 94 	sub	r8,r8,-2924
8000932a:	f0 eb 00 00 	st.d	r8[0],r10

	P11 = -K1 * P[axis][1][0] + P[axis][0][0];
8000932e:	ee f8 ff a0 	ld.w	r8,r7[-96]
80009332:	10 99       	mov	r9,r8
80009334:	ee 19 80 00 	eorh	r9,0x8000
80009338:	ef 49 ff 28 	st.w	r7[-216],r9
8000933c:	ee f8 ff a4 	ld.w	r8,r7[-92]
80009340:	ef 48 ff 2c 	st.w	r7[-212],r8
80009344:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009348:	ec fa 00 18 	ld.w	r10,r6[24]
8000934c:	12 98       	mov	r8,r9
8000934e:	a3 78       	lsl	r8,0x3
80009350:	12 08       	add	r8,r9
80009352:	a3 78       	lsl	r8,0x3
80009354:	f4 08 00 08 	add	r8,r10,r8
80009358:	2e 88       	sub	r8,-24
8000935a:	f0 e8 00 00 	ld.d	r8,r8[0]
8000935e:	ee ea ff 28 	ld.d	r10,r7[-216]
80009362:	f0 16 00 03 	mcall	r6[12]
80009366:	14 98       	mov	r8,r10
80009368:	16 99       	mov	r9,r11
8000936a:	10 9a       	mov	r10,r8
8000936c:	12 9b       	mov	r11,r9
8000936e:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009372:	ec fc 00 18 	ld.w	r12,r6[24]
80009376:	12 98       	mov	r8,r9
80009378:	a3 78       	lsl	r8,0x3
8000937a:	12 08       	add	r8,r9
8000937c:	a3 78       	lsl	r8,0x3
8000937e:	f8 08 00 08 	add	r8,r12,r8
80009382:	f0 e8 00 00 	ld.d	r8,r8[0]
80009386:	f0 16 00 05 	mcall	r6[20]
8000938a:	14 98       	mov	r8,r10
8000938c:	16 99       	mov	r9,r11
8000938e:	ee e9 ff b8 	st.d	r7[-72],r8
	P12 = -K1 * P[axis][1][1] + P[axis][0][1];
80009392:	ee f8 ff a0 	ld.w	r8,r7[-96]
80009396:	10 99       	mov	r9,r8
80009398:	ee 19 80 00 	eorh	r9,0x8000
8000939c:	ef 49 ff 30 	st.w	r7[-208],r9
800093a0:	ee f8 ff a4 	ld.w	r8,r7[-92]
800093a4:	ef 48 ff 34 	st.w	r7[-204],r8
800093a8:	ee f9 ff 8c 	ld.w	r9,r7[-116]
800093ac:	ec fa 00 18 	ld.w	r10,r6[24]
800093b0:	12 98       	mov	r8,r9
800093b2:	a3 78       	lsl	r8,0x3
800093b4:	12 08       	add	r8,r9
800093b6:	a3 78       	lsl	r8,0x3
800093b8:	f4 08 00 08 	add	r8,r10,r8
800093bc:	2e 08       	sub	r8,-32
800093be:	f0 e8 00 00 	ld.d	r8,r8[0]
800093c2:	ee ea ff 30 	ld.d	r10,r7[-208]
800093c6:	f0 16 00 03 	mcall	r6[12]
800093ca:	14 98       	mov	r8,r10
800093cc:	16 99       	mov	r9,r11
800093ce:	10 9a       	mov	r10,r8
800093d0:	12 9b       	mov	r11,r9
800093d2:	ee f9 ff 8c 	ld.w	r9,r7[-116]
800093d6:	ec fc 00 18 	ld.w	r12,r6[24]
800093da:	12 98       	mov	r8,r9
800093dc:	a3 78       	lsl	r8,0x3
800093de:	12 08       	add	r8,r9
800093e0:	2f f8       	sub	r8,-1
800093e2:	f8 08 02 38 	ld.d	r8,r12[r8<<0x3]
800093e6:	f0 16 00 05 	mcall	r6[20]
800093ea:	14 98       	mov	r8,r10
800093ec:	16 99       	mov	r9,r11
800093ee:	ee e9 ff c0 	st.d	r7[-64],r8
	P13 = -K1 * P[axis][1][2] + P[axis][0][2];
800093f2:	ee f8 ff a0 	ld.w	r8,r7[-96]
800093f6:	10 99       	mov	r9,r8
800093f8:	ee 19 80 00 	eorh	r9,0x8000
800093fc:	ef 49 ff 38 	st.w	r7[-200],r9
80009400:	ee f8 ff a4 	ld.w	r8,r7[-92]
80009404:	ef 48 ff 3c 	st.w	r7[-196],r8
80009408:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8000940c:	ec fa 00 18 	ld.w	r10,r6[24]
80009410:	12 98       	mov	r8,r9
80009412:	a3 78       	lsl	r8,0x3
80009414:	12 08       	add	r8,r9
80009416:	a3 78       	lsl	r8,0x3
80009418:	f4 08 00 08 	add	r8,r10,r8
8000941c:	2d 88       	sub	r8,-40
8000941e:	f0 e8 00 00 	ld.d	r8,r8[0]
80009422:	ee ea ff 38 	ld.d	r10,r7[-200]
80009426:	f0 16 00 03 	mcall	r6[12]
8000942a:	14 98       	mov	r8,r10
8000942c:	16 99       	mov	r9,r11
8000942e:	10 9a       	mov	r10,r8
80009430:	12 9b       	mov	r11,r9
80009432:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009436:	ec fc 00 18 	ld.w	r12,r6[24]
8000943a:	12 98       	mov	r8,r9
8000943c:	a3 78       	lsl	r8,0x3
8000943e:	12 08       	add	r8,r9
80009440:	a3 78       	lsl	r8,0x3
80009442:	f8 08 00 08 	add	r8,r12,r8
80009446:	2f 08       	sub	r8,-16
80009448:	f0 e8 00 00 	ld.d	r8,r8[0]
8000944c:	f0 16 00 05 	mcall	r6[20]
80009450:	14 98       	mov	r8,r10
80009452:	16 99       	mov	r9,r11
80009454:	ee e9 ff c8 	st.d	r7[-56],r8
	P21 = (1. - K2) * P[axis][1][0];
80009458:	ee e8 ff a8 	ld.d	r8,r7[-88]
8000945c:	30 0a       	mov	r10,0
8000945e:	fc 1b 3f f0 	movh	r11,0x3ff0
80009462:	f0 16 00 11 	mcall	r6[68]
80009466:	14 98       	mov	r8,r10
80009468:	16 99       	mov	r9,r11
8000946a:	10 9a       	mov	r10,r8
8000946c:	12 9b       	mov	r11,r9
8000946e:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009472:	ec fc 00 18 	ld.w	r12,r6[24]
80009476:	12 98       	mov	r8,r9
80009478:	a3 78       	lsl	r8,0x3
8000947a:	12 08       	add	r8,r9
8000947c:	a3 78       	lsl	r8,0x3
8000947e:	f8 08 00 08 	add	r8,r12,r8
80009482:	2e 88       	sub	r8,-24
80009484:	f0 e8 00 00 	ld.d	r8,r8[0]
80009488:	f0 16 00 03 	mcall	r6[12]
8000948c:	14 98       	mov	r8,r10
8000948e:	16 99       	mov	r9,r11
80009490:	ee e9 ff d0 	st.d	r7[-48],r8
	P22 = (1. - K2) * P[axis][1][1];
80009494:	ee e8 ff a8 	ld.d	r8,r7[-88]
80009498:	30 0a       	mov	r10,0
8000949a:	fc 1b 3f f0 	movh	r11,0x3ff0
8000949e:	f0 16 00 11 	mcall	r6[68]
800094a2:	14 98       	mov	r8,r10
800094a4:	16 99       	mov	r9,r11
800094a6:	10 9a       	mov	r10,r8
800094a8:	12 9b       	mov	r11,r9
800094aa:	ee f9 ff 8c 	ld.w	r9,r7[-116]
800094ae:	ec fc 00 18 	ld.w	r12,r6[24]
800094b2:	12 98       	mov	r8,r9
800094b4:	a3 78       	lsl	r8,0x3
800094b6:	12 08       	add	r8,r9
800094b8:	a3 78       	lsl	r8,0x3
800094ba:	f8 08 00 08 	add	r8,r12,r8
800094be:	2e 08       	sub	r8,-32
800094c0:	f0 e8 00 00 	ld.d	r8,r8[0]
800094c4:	f0 16 00 03 	mcall	r6[12]
800094c8:	14 98       	mov	r8,r10
800094ca:	16 99       	mov	r9,r11
800094cc:	ee e9 ff d8 	st.d	r7[-40],r8
	P23 = (1. - K2) * P[axis][1][2];
800094d0:	ee e8 ff a8 	ld.d	r8,r7[-88]
800094d4:	30 0a       	mov	r10,0
800094d6:	fc 1b 3f f0 	movh	r11,0x3ff0
800094da:	f0 16 00 11 	mcall	r6[68]
800094de:	14 98       	mov	r8,r10
800094e0:	16 99       	mov	r9,r11
800094e2:	10 9a       	mov	r10,r8
800094e4:	12 9b       	mov	r11,r9
800094e6:	ee f9 ff 8c 	ld.w	r9,r7[-116]
800094ea:	ec fc 00 18 	ld.w	r12,r6[24]
800094ee:	12 98       	mov	r8,r9
800094f0:	a3 78       	lsl	r8,0x3
800094f2:	12 08       	add	r8,r9
800094f4:	a3 78       	lsl	r8,0x3
800094f6:	f8 08 00 08 	add	r8,r12,r8
800094fa:	2d 88       	sub	r8,-40
800094fc:	f0 e8 00 00 	ld.d	r8,r8[0]
80009500:	f0 16 00 03 	mcall	r6[12]
80009504:	14 98       	mov	r8,r10
80009506:	16 99       	mov	r9,r11
80009508:	ee e9 ff e0 	st.d	r7[-32],r8
	P31 = -K3 * P[axis][1][0] + P[axis][2][0];
8000950c:	ee f8 ff b0 	ld.w	r8,r7[-80]
80009510:	10 99       	mov	r9,r8
80009512:	ee 19 80 00 	eorh	r9,0x8000
80009516:	ef 49 ff 40 	st.w	r7[-192],r9
8000951a:	ee f8 ff b4 	ld.w	r8,r7[-76]
8000951e:	ef 48 ff 44 	st.w	r7[-188],r8
80009522:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009526:	ec fa 00 18 	ld.w	r10,r6[24]
8000952a:	12 98       	mov	r8,r9
8000952c:	a3 78       	lsl	r8,0x3
8000952e:	12 08       	add	r8,r9
80009530:	a3 78       	lsl	r8,0x3
80009532:	f4 08 00 08 	add	r8,r10,r8
80009536:	2e 88       	sub	r8,-24
80009538:	f0 e8 00 00 	ld.d	r8,r8[0]
8000953c:	ee ea ff 40 	ld.d	r10,r7[-192]
80009540:	f0 16 00 03 	mcall	r6[12]
80009544:	14 98       	mov	r8,r10
80009546:	16 99       	mov	r9,r11
80009548:	10 9a       	mov	r10,r8
8000954a:	12 9b       	mov	r11,r9
8000954c:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009550:	ec fc 00 18 	ld.w	r12,r6[24]
80009554:	12 98       	mov	r8,r9
80009556:	a3 78       	lsl	r8,0x3
80009558:	12 08       	add	r8,r9
8000955a:	a3 78       	lsl	r8,0x3
8000955c:	f8 08 00 08 	add	r8,r12,r8
80009560:	2d 08       	sub	r8,-48
80009562:	f0 e8 00 00 	ld.d	r8,r8[0]
80009566:	f0 16 00 05 	mcall	r6[20]
8000956a:	14 98       	mov	r8,r10
8000956c:	16 99       	mov	r9,r11
8000956e:	ee e9 ff e8 	st.d	r7[-24],r8
	P32 = -K3 * P[axis][1][1] + P[axis][2][1];
80009572:	ee f8 ff b0 	ld.w	r8,r7[-80]
80009576:	10 99       	mov	r9,r8
80009578:	ee 19 80 00 	eorh	r9,0x8000
8000957c:	ef 49 ff 48 	st.w	r7[-184],r9
80009580:	ee f8 ff b4 	ld.w	r8,r7[-76]
80009584:	ef 48 ff 4c 	st.w	r7[-180],r8
80009588:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8000958c:	ec fa 00 18 	ld.w	r10,r6[24]
80009590:	12 98       	mov	r8,r9
80009592:	a3 78       	lsl	r8,0x3
80009594:	12 08       	add	r8,r9
80009596:	a3 78       	lsl	r8,0x3
80009598:	f4 08 00 08 	add	r8,r10,r8
8000959c:	2e 08       	sub	r8,-32
8000959e:	f0 e8 00 00 	ld.d	r8,r8[0]
800095a2:	ee ea ff 48 	ld.d	r10,r7[-184]
800095a6:	f0 16 00 03 	mcall	r6[12]
800095aa:	14 98       	mov	r8,r10
800095ac:	16 99       	mov	r9,r11
800095ae:	10 9a       	mov	r10,r8
800095b0:	12 9b       	mov	r11,r9
800095b2:	ee f9 ff 8c 	ld.w	r9,r7[-116]
800095b6:	ec fc 00 18 	ld.w	r12,r6[24]
800095ba:	12 98       	mov	r8,r9
800095bc:	a3 78       	lsl	r8,0x3
800095be:	12 08       	add	r8,r9
800095c0:	a3 78       	lsl	r8,0x3
800095c2:	f8 08 00 08 	add	r8,r12,r8
800095c6:	2c 88       	sub	r8,-56
800095c8:	f0 e8 00 00 	ld.d	r8,r8[0]
800095cc:	f0 16 00 05 	mcall	r6[20]
800095d0:	14 98       	mov	r8,r10
800095d2:	16 99       	mov	r9,r11
800095d4:	ee e9 ff f0 	st.d	r7[-16],r8
	P33 = -K3 * P[axis][1][2] + P[axis][2][2];
800095d8:	ee f8 ff b0 	ld.w	r8,r7[-80]
800095dc:	10 99       	mov	r9,r8
800095de:	ee 19 80 00 	eorh	r9,0x8000
800095e2:	ef 49 ff 50 	st.w	r7[-176],r9
800095e6:	ee f8 ff b4 	ld.w	r8,r7[-76]
800095ea:	ef 48 ff 54 	st.w	r7[-172],r8
800095ee:	ee f9 ff 8c 	ld.w	r9,r7[-116]
800095f2:	ec fa 00 18 	ld.w	r10,r6[24]
800095f6:	12 98       	mov	r8,r9
800095f8:	a3 78       	lsl	r8,0x3
800095fa:	12 08       	add	r8,r9
800095fc:	a3 78       	lsl	r8,0x3
800095fe:	f4 08 00 08 	add	r8,r10,r8
80009602:	2d 88       	sub	r8,-40
80009604:	f0 e8 00 00 	ld.d	r8,r8[0]
80009608:	ee ea ff 50 	ld.d	r10,r7[-176]
8000960c:	f0 16 00 03 	mcall	r6[12]
80009610:	14 98       	mov	r8,r10
80009612:	16 99       	mov	r9,r11
80009614:	10 9a       	mov	r10,r8
80009616:	12 9b       	mov	r11,r9
80009618:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8000961c:	ec fc 00 18 	ld.w	r12,r6[24]
80009620:	12 98       	mov	r8,r9
80009622:	a3 78       	lsl	r8,0x3
80009624:	12 08       	add	r8,r9
80009626:	a3 78       	lsl	r8,0x3
80009628:	f8 08 00 08 	add	r8,r12,r8
8000962c:	2c 08       	sub	r8,-64
8000962e:	f0 e8 00 00 	ld.d	r8,r8[0]
80009632:	f0 16 00 05 	mcall	r6[20]
80009636:	14 98       	mov	r8,r10
80009638:	16 99       	mov	r9,r11
8000963a:	ee e9 ff f8 	st.d	r7[-8],r8

	P[axis][0][0] = P11;
8000963e:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009642:	ec fa 00 18 	ld.w	r10,r6[24]
80009646:	12 98       	mov	r8,r9
80009648:	a3 78       	lsl	r8,0x3
8000964a:	12 08       	add	r8,r9
8000964c:	a3 78       	lsl	r8,0x3
8000964e:	10 0a       	add	r10,r8
80009650:	ee e8 ff b8 	ld.d	r8,r7[-72]
80009654:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][0][1] = P12;
80009658:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8000965c:	ec fb 00 18 	ld.w	r11,r6[24]
80009660:	12 98       	mov	r8,r9
80009662:	a3 78       	lsl	r8,0x3
80009664:	12 08       	add	r8,r9
80009666:	f0 ca ff ff 	sub	r10,r8,-1
8000966a:	ee e8 ff c0 	ld.d	r8,r7[-64]
8000966e:	f6 0a 08 38 	st.d	r11[r10<<0x3],r8
	P[axis][0][2] = P13;
80009672:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009676:	ec fa 00 18 	ld.w	r10,r6[24]
8000967a:	12 98       	mov	r8,r9
8000967c:	a3 78       	lsl	r8,0x3
8000967e:	12 08       	add	r8,r9
80009680:	a3 78       	lsl	r8,0x3
80009682:	f4 08 00 08 	add	r8,r10,r8
80009686:	f0 ca ff f0 	sub	r10,r8,-16
8000968a:	ee e8 ff c8 	ld.d	r8,r7[-56]
8000968e:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][1][0] = P21;
80009692:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009696:	ec fa 00 18 	ld.w	r10,r6[24]
8000969a:	12 98       	mov	r8,r9
8000969c:	a3 78       	lsl	r8,0x3
8000969e:	12 08       	add	r8,r9
800096a0:	a3 78       	lsl	r8,0x3
800096a2:	f4 08 00 08 	add	r8,r10,r8
800096a6:	f0 ca ff e8 	sub	r10,r8,-24
800096aa:	ee e8 ff d0 	ld.d	r8,r7[-48]
800096ae:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][1][1] = P22;
800096b2:	ee f9 ff 8c 	ld.w	r9,r7[-116]
800096b6:	ec fa 00 18 	ld.w	r10,r6[24]
800096ba:	12 98       	mov	r8,r9
800096bc:	a3 78       	lsl	r8,0x3
800096be:	12 08       	add	r8,r9
800096c0:	a3 78       	lsl	r8,0x3
800096c2:	f4 08 00 08 	add	r8,r10,r8
800096c6:	f0 ca ff e0 	sub	r10,r8,-32
800096ca:	ee e8 ff d8 	ld.d	r8,r7[-40]
800096ce:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][1][2] = P23;
800096d2:	ee f9 ff 8c 	ld.w	r9,r7[-116]
800096d6:	ec fa 00 18 	ld.w	r10,r6[24]
800096da:	12 98       	mov	r8,r9
800096dc:	a3 78       	lsl	r8,0x3
800096de:	12 08       	add	r8,r9
800096e0:	a3 78       	lsl	r8,0x3
800096e2:	f4 08 00 08 	add	r8,r10,r8
800096e6:	f0 ca ff d8 	sub	r10,r8,-40
800096ea:	ee e8 ff e0 	ld.d	r8,r7[-32]
800096ee:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][2][0] = P31;
800096f2:	ee f9 ff 8c 	ld.w	r9,r7[-116]
800096f6:	ec fa 00 18 	ld.w	r10,r6[24]
800096fa:	12 98       	mov	r8,r9
800096fc:	a3 78       	lsl	r8,0x3
800096fe:	12 08       	add	r8,r9
80009700:	a3 78       	lsl	r8,0x3
80009702:	f4 08 00 08 	add	r8,r10,r8
80009706:	f0 ca ff d0 	sub	r10,r8,-48
8000970a:	ee e8 ff e8 	ld.d	r8,r7[-24]
8000970e:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][2][1] = P32;
80009712:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009716:	ec fa 00 18 	ld.w	r10,r6[24]
8000971a:	12 98       	mov	r8,r9
8000971c:	a3 78       	lsl	r8,0x3
8000971e:	12 08       	add	r8,r9
80009720:	a3 78       	lsl	r8,0x3
80009722:	f4 08 00 08 	add	r8,r10,r8
80009726:	f0 ca ff c8 	sub	r10,r8,-56
8000972a:	ee e8 ff f0 	ld.d	r8,r7[-16]
8000972e:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][2][2] = P33;
80009732:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009736:	ec fa 00 18 	ld.w	r10,r6[24]
8000973a:	12 98       	mov	r8,r9
8000973c:	a3 78       	lsl	r8,0x3
8000973e:	12 08       	add	r8,r9
80009740:	a3 78       	lsl	r8,0x3
80009742:	f4 08 00 08 	add	r8,r10,r8
80009746:	f0 ca ff c0 	sub	r10,r8,-64
8000974a:	ee e8 ff f8 	ld.d	r8,r7[-8]
8000974e:	f4 e9 00 00 	st.d	r10[0],r8
	
	/*************************************************************************************/
	yd = speed_meas - centralData->position_estimator.vel[axis];
80009752:	ec f8 00 00 	ld.w	r8,r6[0]
80009756:	70 09       	ld.w	r9,r8[0x0]
80009758:	ee f8 ff 8c 	ld.w	r8,r7[-116]
8000975c:	f0 c8 fc a3 	sub	r8,r8,-861
80009760:	f2 08 03 29 	ld.w	r9,r9[r8<<0x2]
80009764:	ee f8 ff 88 	ld.w	r8,r7[-120]
80009768:	e5 a1 08 89 	cop	cp0,cr8,cr8,cr9,0x42
8000976c:	10 9c       	mov	r12,r8
8000976e:	f0 16 00 02 	mcall	r6[8]
80009772:	14 98       	mov	r8,r10
80009774:	16 99       	mov	r9,r11
80009776:	ee e9 ff 90 	st.d	r7[-112],r8
	
	S = P2[axis][1][1] + R2[axis];
8000977a:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8000977e:	ec fa 00 1c 	ld.w	r10,r6[28]
80009782:	12 98       	mov	r8,r9
80009784:	a3 78       	lsl	r8,0x3
80009786:	12 08       	add	r8,r9
80009788:	a3 78       	lsl	r8,0x3
8000978a:	f4 08 00 08 	add	r8,r10,r8
8000978e:	2e 08       	sub	r8,-32
80009790:	f0 ea 00 00 	ld.d	r10,r8[0]
80009794:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009798:	ec f8 01 50 	ld.w	r8,r6[336]
8000979c:	f0 09 02 38 	ld.d	r8,r8[r9<<0x3]
800097a0:	f0 16 00 05 	mcall	r6[20]
800097a4:	14 98       	mov	r8,r10
800097a6:	16 99       	mov	r9,r11
800097a8:	ee e9 ff 98 	st.d	r7[-104],r8
	K1 = P2[axis][0][1] * 1/S;
800097ac:	ee f9 ff 8c 	ld.w	r9,r7[-116]
800097b0:	ec fa 00 1c 	ld.w	r10,r6[28]
800097b4:	12 98       	mov	r8,r9
800097b6:	a3 78       	lsl	r8,0x3
800097b8:	12 08       	add	r8,r9
800097ba:	2f f8       	sub	r8,-1
800097bc:	f4 08 02 3a 	ld.d	r10,r10[r8<<0x3]
800097c0:	ee e8 ff 98 	ld.d	r8,r7[-104]
800097c4:	f0 16 00 0c 	mcall	r6[48]
800097c8:	14 98       	mov	r8,r10
800097ca:	16 99       	mov	r9,r11
800097cc:	ee e9 ff a0 	st.d	r7[-96],r8
	K2 = P2[axis][1][1] * 1/S;
800097d0:	ee f9 ff 8c 	ld.w	r9,r7[-116]
800097d4:	ec fa 00 1c 	ld.w	r10,r6[28]
800097d8:	12 98       	mov	r8,r9
800097da:	a3 78       	lsl	r8,0x3
800097dc:	12 08       	add	r8,r9
800097de:	a3 78       	lsl	r8,0x3
800097e0:	f4 08 00 08 	add	r8,r10,r8
800097e4:	2e 08       	sub	r8,-32
800097e6:	f0 ea 00 00 	ld.d	r10,r8[0]
800097ea:	ee e8 ff 98 	ld.d	r8,r7[-104]
800097ee:	f0 16 00 0c 	mcall	r6[48]
800097f2:	14 98       	mov	r8,r10
800097f4:	16 99       	mov	r9,r11
800097f6:	ee e9 ff a8 	st.d	r7[-88],r8
	K3 = P2[axis][2][1] * 1/S;
800097fa:	ee f9 ff 8c 	ld.w	r9,r7[-116]
800097fe:	ec fa 00 1c 	ld.w	r10,r6[28]
80009802:	12 98       	mov	r8,r9
80009804:	a3 78       	lsl	r8,0x3
80009806:	12 08       	add	r8,r9
80009808:	a3 78       	lsl	r8,0x3
8000980a:	f4 08 00 08 	add	r8,r10,r8
8000980e:	2c 88       	sub	r8,-56
80009810:	f0 ea 00 00 	ld.d	r10,r8[0]
80009814:	ee e8 ff 98 	ld.d	r8,r7[-104]
80009818:	f0 16 00 0c 	mcall	r6[48]
8000981c:	14 98       	mov	r8,r10
8000981e:	16 99       	mov	r9,r11
80009820:	ee e9 ff b0 	st.d	r7[-80],r8
	
	centralData->position_estimator.localPosition.pos[axis] = centralData->position_estimator.localPosition.pos[axis] + K1 * yd;
80009824:	ec f8 00 00 	ld.w	r8,r6[0]
80009828:	70 01       	ld.w	r1,r8[0x0]
8000982a:	ee f5 ff 8c 	ld.w	r5,r7[-116]
8000982e:	ec f8 00 00 	ld.w	r8,r6[0]
80009832:	70 09       	ld.w	r9,r8[0x0]
80009834:	ee f8 ff 8c 	ld.w	r8,r7[-116]
80009838:	f0 c8 fc 99 	sub	r8,r8,-871
8000983c:	f2 08 03 28 	ld.w	r8,r9[r8<<0x2]
80009840:	10 9c       	mov	r12,r8
80009842:	f0 16 00 02 	mcall	r6[8]
80009846:	14 92       	mov	r2,r10
80009848:	16 93       	mov	r3,r11
8000984a:	ee e8 ff 90 	ld.d	r8,r7[-112]
8000984e:	ee ea ff a0 	ld.d	r10,r7[-96]
80009852:	f0 16 00 03 	mcall	r6[12]
80009856:	14 98       	mov	r8,r10
80009858:	16 99       	mov	r9,r11
8000985a:	04 9a       	mov	r10,r2
8000985c:	06 9b       	mov	r11,r3
8000985e:	f0 16 00 05 	mcall	r6[20]
80009862:	14 98       	mov	r8,r10
80009864:	16 99       	mov	r9,r11
80009866:	10 9a       	mov	r10,r8
80009868:	12 9b       	mov	r11,r9
8000986a:	f0 16 00 09 	mcall	r6[36]
8000986e:	18 99       	mov	r9,r12
80009870:	ea c8 fc 99 	sub	r8,r5,-871
80009874:	e2 08 09 29 	st.w	r1[r8<<0x2],r9
	centralData->position_estimator.vel[axis] = centralData->position_estimator.vel[axis] + K2 * yd;
80009878:	ec f8 00 00 	ld.w	r8,r6[0]
8000987c:	70 01       	ld.w	r1,r8[0x0]
8000987e:	ee f5 ff 8c 	ld.w	r5,r7[-116]
80009882:	ec f8 00 00 	ld.w	r8,r6[0]
80009886:	70 09       	ld.w	r9,r8[0x0]
80009888:	ee f8 ff 8c 	ld.w	r8,r7[-116]
8000988c:	f0 c8 fc a3 	sub	r8,r8,-861
80009890:	f2 08 03 28 	ld.w	r8,r9[r8<<0x2]
80009894:	10 9c       	mov	r12,r8
80009896:	f0 16 00 02 	mcall	r6[8]
8000989a:	14 92       	mov	r2,r10
8000989c:	16 93       	mov	r3,r11
8000989e:	ee e8 ff 90 	ld.d	r8,r7[-112]
800098a2:	ee ea ff a8 	ld.d	r10,r7[-88]
800098a6:	f0 16 00 03 	mcall	r6[12]
800098aa:	14 98       	mov	r8,r10
800098ac:	16 99       	mov	r9,r11
800098ae:	04 9a       	mov	r10,r2
800098b0:	06 9b       	mov	r11,r3
800098b2:	f0 16 00 05 	mcall	r6[20]
800098b6:	14 98       	mov	r8,r10
800098b8:	16 99       	mov	r9,r11
800098ba:	10 9a       	mov	r10,r8
800098bc:	12 9b       	mov	r11,r9
800098be:	f0 16 00 09 	mcall	r6[36]
800098c2:	18 99       	mov	r9,r12
800098c4:	ea c8 fc a3 	sub	r8,r5,-861
800098c8:	e2 08 09 29 	st.w	r1[r8<<0x2],r9
	centralData->imu1.attitude.be[axis+ACC_OFFSET] = centralData->imu1.attitude.be[axis+ACC_OFFSET] + K3 * yd;
800098cc:	ec f8 00 00 	ld.w	r8,r6[0]
800098d0:	70 01       	ld.w	r1,r8[0x0]
800098d2:	ee f8 ff 8c 	ld.w	r8,r7[-116]
800098d6:	f0 c5 ff fd 	sub	r5,r8,-3
800098da:	ec f8 00 00 	ld.w	r8,r6[0]
800098de:	70 09       	ld.w	r9,r8[0x0]
800098e0:	ee f8 ff 8c 	ld.w	r8,r7[-116]
800098e4:	2f d8       	sub	r8,-3
800098e6:	2f 48       	sub	r8,-12
800098e8:	f2 08 03 28 	ld.w	r8,r9[r8<<0x2]
800098ec:	10 9c       	mov	r12,r8
800098ee:	f0 16 00 02 	mcall	r6[8]
800098f2:	14 92       	mov	r2,r10
800098f4:	16 93       	mov	r3,r11
800098f6:	ee e8 ff 90 	ld.d	r8,r7[-112]
800098fa:	ee ea ff b0 	ld.d	r10,r7[-80]
800098fe:	f0 16 00 03 	mcall	r6[12]
80009902:	14 98       	mov	r8,r10
80009904:	16 99       	mov	r9,r11
80009906:	04 9a       	mov	r10,r2
80009908:	06 9b       	mov	r11,r3
8000990a:	f0 16 00 05 	mcall	r6[20]
8000990e:	14 98       	mov	r8,r10
80009910:	16 99       	mov	r9,r11
80009912:	10 9a       	mov	r10,r8
80009914:	12 9b       	mov	r11,r9
80009916:	f0 16 00 09 	mcall	r6[36]
8000991a:	18 99       	mov	r9,r12
8000991c:	ea c8 ff f4 	sub	r8,r5,-12
80009920:	e2 08 09 29 	st.w	r1[r8<<0x2],r9
	
	P11 = -K1 * P2[axis][1][0] + P2[axis][0][0];
80009924:	ee f8 ff a0 	ld.w	r8,r7[-96]
80009928:	10 99       	mov	r9,r8
8000992a:	ee 19 80 00 	eorh	r9,0x8000
8000992e:	ef 49 ff 58 	st.w	r7[-168],r9
80009932:	ee f8 ff a4 	ld.w	r8,r7[-92]
80009936:	ef 48 ff 5c 	st.w	r7[-164],r8
8000993a:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8000993e:	ec fa 00 1c 	ld.w	r10,r6[28]
80009942:	12 98       	mov	r8,r9
80009944:	a3 78       	lsl	r8,0x3
80009946:	12 08       	add	r8,r9
80009948:	a3 78       	lsl	r8,0x3
8000994a:	f4 08 00 08 	add	r8,r10,r8
8000994e:	2e 88       	sub	r8,-24
80009950:	f0 e8 00 00 	ld.d	r8,r8[0]
80009954:	ee ea ff 58 	ld.d	r10,r7[-168]
80009958:	f0 16 00 03 	mcall	r6[12]
8000995c:	14 98       	mov	r8,r10
8000995e:	16 99       	mov	r9,r11
80009960:	10 9a       	mov	r10,r8
80009962:	12 9b       	mov	r11,r9
80009964:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009968:	ec fc 00 1c 	ld.w	r12,r6[28]
8000996c:	12 98       	mov	r8,r9
8000996e:	a3 78       	lsl	r8,0x3
80009970:	12 08       	add	r8,r9
80009972:	a3 78       	lsl	r8,0x3
80009974:	f8 08 00 08 	add	r8,r12,r8
80009978:	f0 e8 00 00 	ld.d	r8,r8[0]
8000997c:	f0 16 00 05 	mcall	r6[20]
80009980:	14 98       	mov	r8,r10
80009982:	16 99       	mov	r9,r11
80009984:	ee e9 ff b8 	st.d	r7[-72],r8
	P12 = -K1 * P2[axis][1][1] + P2[axis][0][1];
80009988:	ee f8 ff a0 	ld.w	r8,r7[-96]
8000998c:	10 99       	mov	r9,r8
8000998e:	ee 19 80 00 	eorh	r9,0x8000
80009992:	ef 49 ff 60 	st.w	r7[-160],r9
80009996:	ee f8 ff a4 	ld.w	r8,r7[-92]
8000999a:	ef 48 ff 64 	st.w	r7[-156],r8
8000999e:	ee f9 ff 8c 	ld.w	r9,r7[-116]
800099a2:	ec fa 00 1c 	ld.w	r10,r6[28]
800099a6:	12 98       	mov	r8,r9
800099a8:	a3 78       	lsl	r8,0x3
800099aa:	12 08       	add	r8,r9
800099ac:	a3 78       	lsl	r8,0x3
800099ae:	f4 08 00 08 	add	r8,r10,r8
800099b2:	2e 08       	sub	r8,-32
800099b4:	f0 e8 00 00 	ld.d	r8,r8[0]
800099b8:	ee ea ff 60 	ld.d	r10,r7[-160]
800099bc:	f0 16 00 03 	mcall	r6[12]
800099c0:	14 98       	mov	r8,r10
800099c2:	16 99       	mov	r9,r11
800099c4:	10 9a       	mov	r10,r8
800099c6:	12 9b       	mov	r11,r9
800099c8:	ee f9 ff 8c 	ld.w	r9,r7[-116]
800099cc:	ec fc 00 1c 	ld.w	r12,r6[28]
800099d0:	12 98       	mov	r8,r9
800099d2:	a3 78       	lsl	r8,0x3
800099d4:	12 08       	add	r8,r9
800099d6:	2f f8       	sub	r8,-1
800099d8:	f8 08 02 38 	ld.d	r8,r12[r8<<0x3]
800099dc:	f0 16 00 05 	mcall	r6[20]
800099e0:	14 98       	mov	r8,r10
800099e2:	16 99       	mov	r9,r11
800099e4:	ee e9 ff c0 	st.d	r7[-64],r8
	P13 = -K1 * P2[axis][1][2] + P2[axis][0][2];
800099e8:	ee f8 ff a0 	ld.w	r8,r7[-96]
800099ec:	10 99       	mov	r9,r8
800099ee:	ee 19 80 00 	eorh	r9,0x8000
800099f2:	ef 49 ff 68 	st.w	r7[-152],r9
800099f6:	ee f8 ff a4 	ld.w	r8,r7[-92]
800099fa:	ef 48 ff 6c 	st.w	r7[-148],r8
800099fe:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009a02:	ec fa 00 1c 	ld.w	r10,r6[28]
80009a06:	12 98       	mov	r8,r9
80009a08:	a3 78       	lsl	r8,0x3
80009a0a:	12 08       	add	r8,r9
80009a0c:	a3 78       	lsl	r8,0x3
80009a0e:	f4 08 00 08 	add	r8,r10,r8
80009a12:	2d 88       	sub	r8,-40
80009a14:	f0 e8 00 00 	ld.d	r8,r8[0]
80009a18:	ee ea ff 68 	ld.d	r10,r7[-152]
80009a1c:	f0 16 00 03 	mcall	r6[12]
80009a20:	14 98       	mov	r8,r10
80009a22:	16 99       	mov	r9,r11
80009a24:	10 9a       	mov	r10,r8
80009a26:	12 9b       	mov	r11,r9
80009a28:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009a2c:	ec fc 00 1c 	ld.w	r12,r6[28]
80009a30:	12 98       	mov	r8,r9
80009a32:	a3 78       	lsl	r8,0x3
80009a34:	12 08       	add	r8,r9
80009a36:	a3 78       	lsl	r8,0x3
80009a38:	f8 08 00 08 	add	r8,r12,r8
80009a3c:	2f 08       	sub	r8,-16
80009a3e:	f0 e8 00 00 	ld.d	r8,r8[0]
80009a42:	f0 16 00 05 	mcall	r6[20]
80009a46:	14 98       	mov	r8,r10
80009a48:	16 99       	mov	r9,r11
80009a4a:	ee e9 ff c8 	st.d	r7[-56],r8
	P21 = (1. - K2) * P2[axis][1][0];
80009a4e:	ee e8 ff a8 	ld.d	r8,r7[-88]
80009a52:	30 0a       	mov	r10,0
80009a54:	fc 1b 3f f0 	movh	r11,0x3ff0
80009a58:	f0 16 00 11 	mcall	r6[68]
80009a5c:	14 98       	mov	r8,r10
80009a5e:	16 99       	mov	r9,r11
80009a60:	10 9a       	mov	r10,r8
80009a62:	12 9b       	mov	r11,r9
80009a64:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009a68:	ec fc 00 1c 	ld.w	r12,r6[28]
80009a6c:	12 98       	mov	r8,r9
80009a6e:	a3 78       	lsl	r8,0x3
80009a70:	12 08       	add	r8,r9
80009a72:	a3 78       	lsl	r8,0x3
80009a74:	f8 08 00 08 	add	r8,r12,r8
80009a78:	2e 88       	sub	r8,-24
80009a7a:	f0 e8 00 00 	ld.d	r8,r8[0]
80009a7e:	f0 16 00 03 	mcall	r6[12]
80009a82:	14 98       	mov	r8,r10
80009a84:	16 99       	mov	r9,r11
80009a86:	ee e9 ff d0 	st.d	r7[-48],r8
	P22 = (1. - K2) * P2[axis][1][1];
80009a8a:	ee e8 ff a8 	ld.d	r8,r7[-88]
80009a8e:	30 0a       	mov	r10,0
80009a90:	fc 1b 3f f0 	movh	r11,0x3ff0
80009a94:	f0 16 00 11 	mcall	r6[68]
80009a98:	14 98       	mov	r8,r10
80009a9a:	16 99       	mov	r9,r11
80009a9c:	10 9a       	mov	r10,r8
80009a9e:	12 9b       	mov	r11,r9
80009aa0:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009aa4:	ec fc 00 1c 	ld.w	r12,r6[28]
80009aa8:	12 98       	mov	r8,r9
80009aaa:	a3 78       	lsl	r8,0x3
80009aac:	12 08       	add	r8,r9
80009aae:	a3 78       	lsl	r8,0x3
80009ab0:	f8 08 00 08 	add	r8,r12,r8
80009ab4:	2e 08       	sub	r8,-32
80009ab6:	f0 e8 00 00 	ld.d	r8,r8[0]
80009aba:	f0 16 00 03 	mcall	r6[12]
80009abe:	14 98       	mov	r8,r10
80009ac0:	16 99       	mov	r9,r11
80009ac2:	ee e9 ff d8 	st.d	r7[-40],r8
	P23 = (1. - K2) * P2[axis][1][2];
80009ac6:	ee e8 ff a8 	ld.d	r8,r7[-88]
80009aca:	30 0a       	mov	r10,0
80009acc:	fc 1b 3f f0 	movh	r11,0x3ff0
80009ad0:	f0 16 00 11 	mcall	r6[68]
80009ad4:	14 98       	mov	r8,r10
80009ad6:	16 99       	mov	r9,r11
80009ad8:	10 9a       	mov	r10,r8
80009ada:	12 9b       	mov	r11,r9
80009adc:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009ae0:	ec fc 00 1c 	ld.w	r12,r6[28]
80009ae4:	12 98       	mov	r8,r9
80009ae6:	a3 78       	lsl	r8,0x3
80009ae8:	12 08       	add	r8,r9
80009aea:	a3 78       	lsl	r8,0x3
80009aec:	f8 08 00 08 	add	r8,r12,r8
80009af0:	2d 88       	sub	r8,-40
80009af2:	f0 e8 00 00 	ld.d	r8,r8[0]
80009af6:	f0 16 00 03 	mcall	r6[12]
80009afa:	14 98       	mov	r8,r10
80009afc:	16 99       	mov	r9,r11
80009afe:	ee e9 ff e0 	st.d	r7[-32],r8
	P31 = -K3 * P2[axis][1][0] + P2[axis][2][0];
80009b02:	ee f8 ff b0 	ld.w	r8,r7[-80]
80009b06:	10 99       	mov	r9,r8
80009b08:	ee 19 80 00 	eorh	r9,0x8000
80009b0c:	ef 49 ff 70 	st.w	r7[-144],r9
80009b10:	ee f8 ff b4 	ld.w	r8,r7[-76]
80009b14:	ef 48 ff 74 	st.w	r7[-140],r8
80009b18:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009b1c:	ec fa 00 1c 	ld.w	r10,r6[28]
80009b20:	12 98       	mov	r8,r9
80009b22:	a3 78       	lsl	r8,0x3
80009b24:	12 08       	add	r8,r9
80009b26:	a3 78       	lsl	r8,0x3
80009b28:	f4 08 00 08 	add	r8,r10,r8
80009b2c:	2e 88       	sub	r8,-24
80009b2e:	f0 e8 00 00 	ld.d	r8,r8[0]
80009b32:	ee ea ff 70 	ld.d	r10,r7[-144]
80009b36:	f0 16 00 03 	mcall	r6[12]
80009b3a:	14 98       	mov	r8,r10
80009b3c:	16 99       	mov	r9,r11
80009b3e:	10 9a       	mov	r10,r8
80009b40:	12 9b       	mov	r11,r9
80009b42:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009b46:	ec fc 00 1c 	ld.w	r12,r6[28]
80009b4a:	12 98       	mov	r8,r9
80009b4c:	a3 78       	lsl	r8,0x3
80009b4e:	12 08       	add	r8,r9
80009b50:	a3 78       	lsl	r8,0x3
80009b52:	f8 08 00 08 	add	r8,r12,r8
80009b56:	2d 08       	sub	r8,-48
80009b58:	f0 e8 00 00 	ld.d	r8,r8[0]
80009b5c:	f0 16 00 05 	mcall	r6[20]
80009b60:	14 98       	mov	r8,r10
80009b62:	16 99       	mov	r9,r11
80009b64:	ee e9 ff e8 	st.d	r7[-24],r8
	P32 = -K3 * P2[axis][1][1] + P2[axis][2][1];
80009b68:	ee f8 ff b0 	ld.w	r8,r7[-80]
80009b6c:	10 99       	mov	r9,r8
80009b6e:	ee 19 80 00 	eorh	r9,0x8000
80009b72:	ef 49 ff 78 	st.w	r7[-136],r9
80009b76:	ee f8 ff b4 	ld.w	r8,r7[-76]
80009b7a:	ef 48 ff 7c 	st.w	r7[-132],r8
80009b7e:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009b82:	ec fa 00 1c 	ld.w	r10,r6[28]
80009b86:	12 98       	mov	r8,r9
80009b88:	a3 78       	lsl	r8,0x3
80009b8a:	12 08       	add	r8,r9
80009b8c:	a3 78       	lsl	r8,0x3
80009b8e:	f4 08 00 08 	add	r8,r10,r8
80009b92:	2e 08       	sub	r8,-32
80009b94:	f0 e8 00 00 	ld.d	r8,r8[0]
80009b98:	ee ea ff 78 	ld.d	r10,r7[-136]
80009b9c:	f0 16 00 03 	mcall	r6[12]
80009ba0:	14 98       	mov	r8,r10
80009ba2:	16 99       	mov	r9,r11
80009ba4:	10 9a       	mov	r10,r8
80009ba6:	12 9b       	mov	r11,r9
80009ba8:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009bac:	ec fc 00 1c 	ld.w	r12,r6[28]
80009bb0:	12 98       	mov	r8,r9
80009bb2:	a3 78       	lsl	r8,0x3
80009bb4:	12 08       	add	r8,r9
80009bb6:	a3 78       	lsl	r8,0x3
80009bb8:	f8 08 00 08 	add	r8,r12,r8
80009bbc:	2c 88       	sub	r8,-56
80009bbe:	f0 e8 00 00 	ld.d	r8,r8[0]
80009bc2:	f0 16 00 05 	mcall	r6[20]
80009bc6:	14 98       	mov	r8,r10
80009bc8:	16 99       	mov	r9,r11
80009bca:	ee e9 ff f0 	st.d	r7[-16],r8
	P33 = -K3 * P2[axis][1][2] + P2[axis][2][2];
80009bce:	ee f8 ff b0 	ld.w	r8,r7[-80]
80009bd2:	10 99       	mov	r9,r8
80009bd4:	ee 19 80 00 	eorh	r9,0x8000
80009bd8:	ef 49 ff 80 	st.w	r7[-128],r9
80009bdc:	ee f8 ff b4 	ld.w	r8,r7[-76]
80009be0:	ef 48 ff 84 	st.w	r7[-124],r8
80009be4:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009be8:	ec fa 00 1c 	ld.w	r10,r6[28]
80009bec:	12 98       	mov	r8,r9
80009bee:	a3 78       	lsl	r8,0x3
80009bf0:	12 08       	add	r8,r9
80009bf2:	a3 78       	lsl	r8,0x3
80009bf4:	f4 08 00 08 	add	r8,r10,r8
80009bf8:	2d 88       	sub	r8,-40
80009bfa:	f0 e8 00 00 	ld.d	r8,r8[0]
80009bfe:	ee ea ff 80 	ld.d	r10,r7[-128]
80009c02:	f0 16 00 03 	mcall	r6[12]
80009c06:	14 98       	mov	r8,r10
80009c08:	16 99       	mov	r9,r11
80009c0a:	10 9a       	mov	r10,r8
80009c0c:	12 9b       	mov	r11,r9
80009c0e:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009c12:	ec fc 00 1c 	ld.w	r12,r6[28]
80009c16:	12 98       	mov	r8,r9
80009c18:	a3 78       	lsl	r8,0x3
80009c1a:	12 08       	add	r8,r9
80009c1c:	a3 78       	lsl	r8,0x3
80009c1e:	f8 08 00 08 	add	r8,r12,r8
80009c22:	2c 08       	sub	r8,-64
80009c24:	f0 e8 00 00 	ld.d	r8,r8[0]
80009c28:	f0 16 00 05 	mcall	r6[20]
80009c2c:	14 98       	mov	r8,r10
80009c2e:	16 99       	mov	r9,r11
80009c30:	ee e9 ff f8 	st.d	r7[-8],r8

	P2[axis][0][0] = P11;
80009c34:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009c38:	ec fa 00 1c 	ld.w	r10,r6[28]
80009c3c:	12 98       	mov	r8,r9
80009c3e:	a3 78       	lsl	r8,0x3
80009c40:	12 08       	add	r8,r9
80009c42:	a3 78       	lsl	r8,0x3
80009c44:	10 0a       	add	r10,r8
80009c46:	ee e8 ff b8 	ld.d	r8,r7[-72]
80009c4a:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][0][1] = P12;
80009c4e:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009c52:	ec fa 00 1c 	ld.w	r10,r6[28]
80009c56:	12 98       	mov	r8,r9
80009c58:	a3 78       	lsl	r8,0x3
80009c5a:	12 08       	add	r8,r9
80009c5c:	f0 cb ff ff 	sub	r11,r8,-1
80009c60:	ee e8 ff c0 	ld.d	r8,r7[-64]
80009c64:	f4 0b 08 38 	st.d	r10[r11<<0x3],r8
	P2[axis][0][2] = P13;
80009c68:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009c6c:	ec fa 00 1c 	ld.w	r10,r6[28]
80009c70:	12 98       	mov	r8,r9
80009c72:	a3 78       	lsl	r8,0x3
80009c74:	12 08       	add	r8,r9
80009c76:	a3 78       	lsl	r8,0x3
80009c78:	f4 08 00 08 	add	r8,r10,r8
80009c7c:	f0 ca ff f0 	sub	r10,r8,-16
80009c80:	ee e8 ff c8 	ld.d	r8,r7[-56]
80009c84:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][1][0] = P21;
80009c88:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009c8c:	ec fa 00 1c 	ld.w	r10,r6[28]
80009c90:	12 98       	mov	r8,r9
80009c92:	a3 78       	lsl	r8,0x3
80009c94:	12 08       	add	r8,r9
80009c96:	a3 78       	lsl	r8,0x3
80009c98:	f4 08 00 08 	add	r8,r10,r8
80009c9c:	f0 ca ff e8 	sub	r10,r8,-24
80009ca0:	ee e8 ff d0 	ld.d	r8,r7[-48]
80009ca4:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][1][1] = P22;
80009ca8:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009cac:	ec fa 00 1c 	ld.w	r10,r6[28]
80009cb0:	12 98       	mov	r8,r9
80009cb2:	a3 78       	lsl	r8,0x3
80009cb4:	12 08       	add	r8,r9
80009cb6:	a3 78       	lsl	r8,0x3
80009cb8:	f4 08 00 08 	add	r8,r10,r8
80009cbc:	f0 ca ff e0 	sub	r10,r8,-32
80009cc0:	ee e8 ff d8 	ld.d	r8,r7[-40]
80009cc4:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][1][2] = P23;
80009cc8:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009ccc:	ec fa 00 1c 	ld.w	r10,r6[28]
80009cd0:	12 98       	mov	r8,r9
80009cd2:	a3 78       	lsl	r8,0x3
80009cd4:	12 08       	add	r8,r9
80009cd6:	a3 78       	lsl	r8,0x3
80009cd8:	f4 08 00 08 	add	r8,r10,r8
80009cdc:	f0 ca ff d8 	sub	r10,r8,-40
80009ce0:	ee e8 ff e0 	ld.d	r8,r7[-32]
80009ce4:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][2][0] = P31;
80009ce8:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009cec:	ec fa 00 1c 	ld.w	r10,r6[28]
80009cf0:	12 98       	mov	r8,r9
80009cf2:	a3 78       	lsl	r8,0x3
80009cf4:	12 08       	add	r8,r9
80009cf6:	a3 78       	lsl	r8,0x3
80009cf8:	f4 08 00 08 	add	r8,r10,r8
80009cfc:	f0 ca ff d0 	sub	r10,r8,-48
80009d00:	ee e8 ff e8 	ld.d	r8,r7[-24]
80009d04:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][2][1] = P32;
80009d08:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009d0c:	ec fa 00 1c 	ld.w	r10,r6[28]
80009d10:	12 98       	mov	r8,r9
80009d12:	a3 78       	lsl	r8,0x3
80009d14:	12 08       	add	r8,r9
80009d16:	a3 78       	lsl	r8,0x3
80009d18:	f4 08 00 08 	add	r8,r10,r8
80009d1c:	f0 ca ff c8 	sub	r10,r8,-56
80009d20:	ee e8 ff f0 	ld.d	r8,r7[-16]
80009d24:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][2][2] = P33;
80009d28:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009d2c:	ec fa 00 1c 	ld.w	r10,r6[28]
80009d30:	12 98       	mov	r8,r9
80009d32:	a3 78       	lsl	r8,0x3
80009d34:	12 08       	add	r8,r9
80009d36:	a3 78       	lsl	r8,0x3
80009d38:	f4 08 00 08 	add	r8,r10,r8
80009d3c:	f0 ca ff c0 	sub	r10,r8,-64
80009d40:	ee e8 ff f8 	ld.d	r8,r7[-8]
80009d44:	f4 e9 00 00 	st.d	r10[0],r8
}
80009d48:	2c ad       	sub	sp,-216
80009d4a:	e3 cd 80 ee 	ldm	sp++,r1-r3,r5-r7,pc
80009d4e:	00 00       	add	r0,r0
80009d50:	80 00       	ld.sh	r0,r0[0x0]
80009d52:	8f be       	st.w	r7[0x2c],lr

80009d54 <e_kalman_update_position_hf>:
  Xp = Xm + K*y;
  // update covariance
  Pp = Pm - K*H*Pm;
*/
void e_kalman_update_position_hf(int axis, double position_meas)
{
80009d54:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
80009d58:	1a 97       	mov	r7,sp
80009d5a:	21 bd       	sub	sp,108
80009d5c:	fe f6 05 80 	ld.w	r6,pc[1408]
80009d60:	1e 26       	rsub	r6,pc
80009d62:	ef 4c ff bc 	st.w	r7[-68],r12
80009d66:	ee eb ff b4 	st.d	r7[-76],r10
	double posxy,S,K1,K2;
	double P11,P12,P21,P22;
	
	posxy = position_meas - centralData->estimation.state[axis][POSITION];
80009d6a:	ec f8 00 00 	ld.w	r8,r6[0]
80009d6e:	70 0a       	ld.w	r10,r8[0x0]
80009d70:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009d74:	12 98       	mov	r8,r9
80009d76:	a1 78       	lsl	r8,0x1
80009d78:	12 08       	add	r8,r9
80009d7a:	a3 78       	lsl	r8,0x3
80009d7c:	f4 08 00 08 	add	r8,r10,r8
80009d80:	f0 c8 f4 a4 	sub	r8,r8,-2908
80009d84:	f0 e8 00 00 	ld.d	r8,r8[0]
80009d88:	ee ea ff b4 	ld.d	r10,r7[-76]
80009d8c:	f0 16 00 11 	mcall	r6[68]
80009d90:	14 98       	mov	r8,r10
80009d92:	16 99       	mov	r9,r11
80009d94:	ee e9 ff c0 	st.d	r7[-64],r8
	
	
	S = P[axis][0][0] + R[axis];
80009d98:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009d9c:	ec fa 00 18 	ld.w	r10,r6[24]
80009da0:	12 98       	mov	r8,r9
80009da2:	a3 78       	lsl	r8,0x3
80009da4:	12 08       	add	r8,r9
80009da6:	a3 78       	lsl	r8,0x3
80009da8:	f4 08 00 08 	add	r8,r10,r8
80009dac:	f0 ea 00 00 	ld.d	r10,r8[0]
80009db0:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009db4:	ec f8 01 54 	ld.w	r8,r6[340]
80009db8:	f0 09 02 38 	ld.d	r8,r8[r9<<0x3]
80009dbc:	f0 16 00 05 	mcall	r6[20]
80009dc0:	14 98       	mov	r8,r10
80009dc2:	16 99       	mov	r9,r11
80009dc4:	ee e9 ff c8 	st.d	r7[-56],r8
	K1 = P[axis][0][0] * 1/S;
80009dc8:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009dcc:	ec fa 00 18 	ld.w	r10,r6[24]
80009dd0:	12 98       	mov	r8,r9
80009dd2:	a3 78       	lsl	r8,0x3
80009dd4:	12 08       	add	r8,r9
80009dd6:	a3 78       	lsl	r8,0x3
80009dd8:	f4 08 00 08 	add	r8,r10,r8
80009ddc:	f0 ea 00 00 	ld.d	r10,r8[0]
80009de0:	ee e8 ff c8 	ld.d	r8,r7[-56]
80009de4:	f0 16 00 0c 	mcall	r6[48]
80009de8:	14 98       	mov	r8,r10
80009dea:	16 99       	mov	r9,r11
80009dec:	ee e9 ff d0 	st.d	r7[-48],r8
	K2 = P[axis][1][0] * 1/S;
80009df0:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009df4:	ec fa 00 18 	ld.w	r10,r6[24]
80009df8:	12 98       	mov	r8,r9
80009dfa:	a3 78       	lsl	r8,0x3
80009dfc:	12 08       	add	r8,r9
80009dfe:	a3 78       	lsl	r8,0x3
80009e00:	f4 08 00 08 	add	r8,r10,r8
80009e04:	2e 88       	sub	r8,-24
80009e06:	f0 ea 00 00 	ld.d	r10,r8[0]
80009e0a:	ee e8 ff c8 	ld.d	r8,r7[-56]
80009e0e:	f0 16 00 0c 	mcall	r6[48]
80009e12:	14 98       	mov	r8,r10
80009e14:	16 99       	mov	r9,r11
80009e16:	ee e9 ff d8 	st.d	r7[-40],r8
	
	centralData->estimation.state[axis][POSITION] = centralData->estimation.state[axis][POSITION] + K1 * posxy;
80009e1a:	ec f8 00 00 	ld.w	r8,r6[0]
80009e1e:	70 08       	ld.w	r8,r8[0x0]
80009e20:	ef 48 ff 94 	st.w	r7[-108],r8
80009e24:	ee f5 ff bc 	ld.w	r5,r7[-68]
80009e28:	ec f8 00 00 	ld.w	r8,r6[0]
80009e2c:	70 0a       	ld.w	r10,r8[0x0]
80009e2e:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009e32:	12 98       	mov	r8,r9
80009e34:	a1 78       	lsl	r8,0x1
80009e36:	12 08       	add	r8,r9
80009e38:	a3 78       	lsl	r8,0x3
80009e3a:	f4 08 00 08 	add	r8,r10,r8
80009e3e:	f0 c8 f4 a4 	sub	r8,r8,-2908
80009e42:	f0 e2 00 00 	ld.d	r2,r8[0]
80009e46:	ee e8 ff c0 	ld.d	r8,r7[-64]
80009e4a:	ee ea ff d0 	ld.d	r10,r7[-48]
80009e4e:	f0 16 00 03 	mcall	r6[12]
80009e52:	14 98       	mov	r8,r10
80009e54:	16 99       	mov	r9,r11
80009e56:	04 9a       	mov	r10,r2
80009e58:	06 9b       	mov	r11,r3
80009e5a:	f0 16 00 05 	mcall	r6[20]
80009e5e:	14 98       	mov	r8,r10
80009e60:	16 99       	mov	r9,r11
80009e62:	10 9a       	mov	r10,r8
80009e64:	12 9b       	mov	r11,r9
80009e66:	0a 98       	mov	r8,r5
80009e68:	a1 78       	lsl	r8,0x1
80009e6a:	0a 08       	add	r8,r5
80009e6c:	a3 78       	lsl	r8,0x3
80009e6e:	ee f9 ff 94 	ld.w	r9,r7[-108]
80009e72:	f2 08 00 08 	add	r8,r9,r8
80009e76:	f0 c8 f4 a4 	sub	r8,r8,-2908
80009e7a:	f0 eb 00 00 	st.d	r8[0],r10
	centralData->estimation.state[axis][SPEED] = centralData->estimation.state[axis][SPEED] + K2 * posxy;
80009e7e:	ec f8 00 00 	ld.w	r8,r6[0]
80009e82:	70 08       	ld.w	r8,r8[0x0]
80009e84:	ef 48 ff 98 	st.w	r7[-104],r8
80009e88:	ee f5 ff bc 	ld.w	r5,r7[-68]
80009e8c:	ec f8 00 00 	ld.w	r8,r6[0]
80009e90:	70 0a       	ld.w	r10,r8[0x0]
80009e92:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009e96:	12 98       	mov	r8,r9
80009e98:	a1 78       	lsl	r8,0x1
80009e9a:	12 08       	add	r8,r9
80009e9c:	2f f8       	sub	r8,-1
80009e9e:	a3 78       	lsl	r8,0x3
80009ea0:	f4 08 00 08 	add	r8,r10,r8
80009ea4:	f0 e2 0b 5c 	ld.d	r2,r8[2908]
80009ea8:	ee e8 ff c0 	ld.d	r8,r7[-64]
80009eac:	ee ea ff d8 	ld.d	r10,r7[-40]
80009eb0:	f0 16 00 03 	mcall	r6[12]
80009eb4:	14 98       	mov	r8,r10
80009eb6:	16 99       	mov	r9,r11
80009eb8:	04 9a       	mov	r10,r2
80009eba:	06 9b       	mov	r11,r3
80009ebc:	f0 16 00 05 	mcall	r6[20]
80009ec0:	14 98       	mov	r8,r10
80009ec2:	16 99       	mov	r9,r11
80009ec4:	10 9a       	mov	r10,r8
80009ec6:	12 9b       	mov	r11,r9
80009ec8:	0a 98       	mov	r8,r5
80009eca:	a1 78       	lsl	r8,0x1
80009ecc:	0a 08       	add	r8,r5
80009ece:	2f f8       	sub	r8,-1
80009ed0:	a3 78       	lsl	r8,0x3
80009ed2:	ee f9 ff 98 	ld.w	r9,r7[-104]
80009ed6:	f2 08 00 08 	add	r8,r9,r8
80009eda:	f0 eb 0b 5c 	st.d	r8[2908],r10
	
	P11 = (1. - K1) * P[axis][0][0];
80009ede:	ee e8 ff d0 	ld.d	r8,r7[-48]
80009ee2:	30 0a       	mov	r10,0
80009ee4:	fc 1b 3f f0 	movh	r11,0x3ff0
80009ee8:	f0 16 00 11 	mcall	r6[68]
80009eec:	14 98       	mov	r8,r10
80009eee:	16 99       	mov	r9,r11
80009ef0:	10 9a       	mov	r10,r8
80009ef2:	12 9b       	mov	r11,r9
80009ef4:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009ef8:	ec fc 00 18 	ld.w	r12,r6[24]
80009efc:	12 98       	mov	r8,r9
80009efe:	a3 78       	lsl	r8,0x3
80009f00:	12 08       	add	r8,r9
80009f02:	a3 78       	lsl	r8,0x3
80009f04:	f8 08 00 08 	add	r8,r12,r8
80009f08:	f0 e8 00 00 	ld.d	r8,r8[0]
80009f0c:	f0 16 00 03 	mcall	r6[12]
80009f10:	14 98       	mov	r8,r10
80009f12:	16 99       	mov	r9,r11
80009f14:	ee e9 ff e0 	st.d	r7[-32],r8
	P12 = (1. - K1) * P[axis][0][1];
80009f18:	ee e8 ff d0 	ld.d	r8,r7[-48]
80009f1c:	30 0a       	mov	r10,0
80009f1e:	fc 1b 3f f0 	movh	r11,0x3ff0
80009f22:	f0 16 00 11 	mcall	r6[68]
80009f26:	14 98       	mov	r8,r10
80009f28:	16 99       	mov	r9,r11
80009f2a:	10 9a       	mov	r10,r8
80009f2c:	12 9b       	mov	r11,r9
80009f2e:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009f32:	ec fc 00 18 	ld.w	r12,r6[24]
80009f36:	12 98       	mov	r8,r9
80009f38:	a3 78       	lsl	r8,0x3
80009f3a:	12 08       	add	r8,r9
80009f3c:	2f f8       	sub	r8,-1
80009f3e:	f8 08 02 38 	ld.d	r8,r12[r8<<0x3]
80009f42:	f0 16 00 03 	mcall	r6[12]
80009f46:	14 98       	mov	r8,r10
80009f48:	16 99       	mov	r9,r11
80009f4a:	ee e9 ff e8 	st.d	r7[-24],r8
	P21 = -K2 * P[axis][0][0] + P[axis][1][0];
80009f4e:	ee f8 ff d8 	ld.w	r8,r7[-40]
80009f52:	10 99       	mov	r9,r8
80009f54:	ee 19 80 00 	eorh	r9,0x8000
80009f58:	ef 49 ff 9c 	st.w	r7[-100],r9
80009f5c:	ee f8 ff dc 	ld.w	r8,r7[-36]
80009f60:	ef 48 ff a0 	st.w	r7[-96],r8
80009f64:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009f68:	ec fa 00 18 	ld.w	r10,r6[24]
80009f6c:	12 98       	mov	r8,r9
80009f6e:	a3 78       	lsl	r8,0x3
80009f70:	12 08       	add	r8,r9
80009f72:	a3 78       	lsl	r8,0x3
80009f74:	f4 08 00 08 	add	r8,r10,r8
80009f78:	f0 e8 00 00 	ld.d	r8,r8[0]
80009f7c:	ee ea ff 9c 	ld.d	r10,r7[-100]
80009f80:	f0 16 00 03 	mcall	r6[12]
80009f84:	14 98       	mov	r8,r10
80009f86:	16 99       	mov	r9,r11
80009f88:	10 9a       	mov	r10,r8
80009f8a:	12 9b       	mov	r11,r9
80009f8c:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009f90:	ec fc 00 18 	ld.w	r12,r6[24]
80009f94:	12 98       	mov	r8,r9
80009f96:	a3 78       	lsl	r8,0x3
80009f98:	12 08       	add	r8,r9
80009f9a:	a3 78       	lsl	r8,0x3
80009f9c:	f8 08 00 08 	add	r8,r12,r8
80009fa0:	2e 88       	sub	r8,-24
80009fa2:	f0 e8 00 00 	ld.d	r8,r8[0]
80009fa6:	f0 16 00 05 	mcall	r6[20]
80009faa:	14 98       	mov	r8,r10
80009fac:	16 99       	mov	r9,r11
80009fae:	ee e9 ff f0 	st.d	r7[-16],r8
	P22 = -K2 * P[axis][0][1] + P[axis][1][1];
80009fb2:	ee f8 ff d8 	ld.w	r8,r7[-40]
80009fb6:	10 99       	mov	r9,r8
80009fb8:	ee 19 80 00 	eorh	r9,0x8000
80009fbc:	ef 49 ff a4 	st.w	r7[-92],r9
80009fc0:	ee f8 ff dc 	ld.w	r8,r7[-36]
80009fc4:	ef 48 ff a8 	st.w	r7[-88],r8
80009fc8:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009fcc:	ec fa 00 18 	ld.w	r10,r6[24]
80009fd0:	12 98       	mov	r8,r9
80009fd2:	a3 78       	lsl	r8,0x3
80009fd4:	12 08       	add	r8,r9
80009fd6:	2f f8       	sub	r8,-1
80009fd8:	f4 08 02 38 	ld.d	r8,r10[r8<<0x3]
80009fdc:	ee ea ff a4 	ld.d	r10,r7[-92]
80009fe0:	f0 16 00 03 	mcall	r6[12]
80009fe4:	14 98       	mov	r8,r10
80009fe6:	16 99       	mov	r9,r11
80009fe8:	10 9a       	mov	r10,r8
80009fea:	12 9b       	mov	r11,r9
80009fec:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009ff0:	ec fc 00 18 	ld.w	r12,r6[24]
80009ff4:	12 98       	mov	r8,r9
80009ff6:	a3 78       	lsl	r8,0x3
80009ff8:	12 08       	add	r8,r9
80009ffa:	a3 78       	lsl	r8,0x3
80009ffc:	f8 08 00 08 	add	r8,r12,r8
8000a000:	2e 08       	sub	r8,-32
8000a002:	f0 e8 00 00 	ld.d	r8,r8[0]
8000a006:	f0 16 00 05 	mcall	r6[20]
8000a00a:	14 98       	mov	r8,r10
8000a00c:	16 99       	mov	r9,r11
8000a00e:	ee e9 ff f8 	st.d	r7[-8],r8

	P[axis][0][0] = P11;
8000a012:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a016:	ec fa 00 18 	ld.w	r10,r6[24]
8000a01a:	12 98       	mov	r8,r9
8000a01c:	a3 78       	lsl	r8,0x3
8000a01e:	12 08       	add	r8,r9
8000a020:	a3 78       	lsl	r8,0x3
8000a022:	10 0a       	add	r10,r8
8000a024:	ee e8 ff e0 	ld.d	r8,r7[-32]
8000a028:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][0][1] = P12;
8000a02c:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a030:	ec fa 00 18 	ld.w	r10,r6[24]
8000a034:	12 98       	mov	r8,r9
8000a036:	a3 78       	lsl	r8,0x3
8000a038:	12 08       	add	r8,r9
8000a03a:	f0 cb ff ff 	sub	r11,r8,-1
8000a03e:	ee e8 ff e8 	ld.d	r8,r7[-24]
8000a042:	f4 0b 08 38 	st.d	r10[r11<<0x3],r8
	P[axis][1][0] = P21;
8000a046:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a04a:	ec fa 00 18 	ld.w	r10,r6[24]
8000a04e:	12 98       	mov	r8,r9
8000a050:	a3 78       	lsl	r8,0x3
8000a052:	12 08       	add	r8,r9
8000a054:	a3 78       	lsl	r8,0x3
8000a056:	f4 08 00 08 	add	r8,r10,r8
8000a05a:	f0 ca ff e8 	sub	r10,r8,-24
8000a05e:	ee e8 ff f0 	ld.d	r8,r7[-16]
8000a062:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][1][1] = P22;
8000a066:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a06a:	ec fa 00 18 	ld.w	r10,r6[24]
8000a06e:	12 98       	mov	r8,r9
8000a070:	a3 78       	lsl	r8,0x3
8000a072:	12 08       	add	r8,r9
8000a074:	a3 78       	lsl	r8,0x3
8000a076:	f4 08 00 08 	add	r8,r10,r8
8000a07a:	f0 ca ff e0 	sub	r10,r8,-32
8000a07e:	ee e8 ff f8 	ld.d	r8,r7[-8]
8000a082:	f4 e9 00 00 	st.d	r10[0],r8
	
	/*************************************************************************************/
	posxy = position_meas - centralData->position_estimator.localPosition.pos[axis];
8000a086:	ec f8 00 00 	ld.w	r8,r6[0]
8000a08a:	70 08       	ld.w	r8,r8[0x0]
8000a08c:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a090:	f2 c9 fc 99 	sub	r9,r9,-871
8000a094:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8000a098:	10 9c       	mov	r12,r8
8000a09a:	f0 16 00 02 	mcall	r6[8]
8000a09e:	14 98       	mov	r8,r10
8000a0a0:	16 99       	mov	r9,r11
8000a0a2:	ee ea ff b4 	ld.d	r10,r7[-76]
8000a0a6:	f0 16 00 11 	mcall	r6[68]
8000a0aa:	14 98       	mov	r8,r10
8000a0ac:	16 99       	mov	r9,r11
8000a0ae:	ee e9 ff c0 	st.d	r7[-64],r8
	
	S = P2[axis][0][0] + R2[axis];
8000a0b2:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a0b6:	ec fa 00 1c 	ld.w	r10,r6[28]
8000a0ba:	12 98       	mov	r8,r9
8000a0bc:	a3 78       	lsl	r8,0x3
8000a0be:	12 08       	add	r8,r9
8000a0c0:	a3 78       	lsl	r8,0x3
8000a0c2:	f4 08 00 08 	add	r8,r10,r8
8000a0c6:	f0 ea 00 00 	ld.d	r10,r8[0]
8000a0ca:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a0ce:	ec f8 01 50 	ld.w	r8,r6[336]
8000a0d2:	f0 09 02 38 	ld.d	r8,r8[r9<<0x3]
8000a0d6:	f0 16 00 05 	mcall	r6[20]
8000a0da:	14 98       	mov	r8,r10
8000a0dc:	16 99       	mov	r9,r11
8000a0de:	ee e9 ff c8 	st.d	r7[-56],r8
	K1 = P2[axis][0][0] * 1/S;
8000a0e2:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a0e6:	ec fa 00 1c 	ld.w	r10,r6[28]
8000a0ea:	12 98       	mov	r8,r9
8000a0ec:	a3 78       	lsl	r8,0x3
8000a0ee:	12 08       	add	r8,r9
8000a0f0:	a3 78       	lsl	r8,0x3
8000a0f2:	f4 08 00 08 	add	r8,r10,r8
8000a0f6:	f0 ea 00 00 	ld.d	r10,r8[0]
8000a0fa:	ee e8 ff c8 	ld.d	r8,r7[-56]
8000a0fe:	f0 16 00 0c 	mcall	r6[48]
8000a102:	14 98       	mov	r8,r10
8000a104:	16 99       	mov	r9,r11
8000a106:	ee e9 ff d0 	st.d	r7[-48],r8
	K2 = P2[axis][1][0] * 1/S;
8000a10a:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a10e:	ec fa 00 1c 	ld.w	r10,r6[28]
8000a112:	12 98       	mov	r8,r9
8000a114:	a3 78       	lsl	r8,0x3
8000a116:	12 08       	add	r8,r9
8000a118:	a3 78       	lsl	r8,0x3
8000a11a:	f4 08 00 08 	add	r8,r10,r8
8000a11e:	2e 88       	sub	r8,-24
8000a120:	f0 ea 00 00 	ld.d	r10,r8[0]
8000a124:	ee e8 ff c8 	ld.d	r8,r7[-56]
8000a128:	f0 16 00 0c 	mcall	r6[48]
8000a12c:	14 98       	mov	r8,r10
8000a12e:	16 99       	mov	r9,r11
8000a130:	ee e9 ff d8 	st.d	r7[-40],r8
	
	//centralData->position_estimator.localPosition.pos[axis] = centralData->position_estimator.localPosition.pos[axis] + K1 * posxy;
	//centralData->position_estimator.vel[axis] = centralData->position_estimator.vel[axis] + K2 * posxy;
	
	P11 = (1. - K1) * P2[axis][0][0];
8000a134:	ee e8 ff d0 	ld.d	r8,r7[-48]
8000a138:	30 0a       	mov	r10,0
8000a13a:	fc 1b 3f f0 	movh	r11,0x3ff0
8000a13e:	f0 16 00 11 	mcall	r6[68]
8000a142:	14 98       	mov	r8,r10
8000a144:	16 99       	mov	r9,r11
8000a146:	10 9a       	mov	r10,r8
8000a148:	12 9b       	mov	r11,r9
8000a14a:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a14e:	ec fc 00 1c 	ld.w	r12,r6[28]
8000a152:	12 98       	mov	r8,r9
8000a154:	a3 78       	lsl	r8,0x3
8000a156:	12 08       	add	r8,r9
8000a158:	a3 78       	lsl	r8,0x3
8000a15a:	f8 08 00 08 	add	r8,r12,r8
8000a15e:	f0 e8 00 00 	ld.d	r8,r8[0]
8000a162:	f0 16 00 03 	mcall	r6[12]
8000a166:	14 98       	mov	r8,r10
8000a168:	16 99       	mov	r9,r11
8000a16a:	ee e9 ff e0 	st.d	r7[-32],r8
	P12 = (1. - K1) * P2[axis][0][1];
8000a16e:	ee e8 ff d0 	ld.d	r8,r7[-48]
8000a172:	30 0a       	mov	r10,0
8000a174:	fc 1b 3f f0 	movh	r11,0x3ff0
8000a178:	f0 16 00 11 	mcall	r6[68]
8000a17c:	14 98       	mov	r8,r10
8000a17e:	16 99       	mov	r9,r11
8000a180:	10 9a       	mov	r10,r8
8000a182:	12 9b       	mov	r11,r9
8000a184:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a188:	ec fc 00 1c 	ld.w	r12,r6[28]
8000a18c:	12 98       	mov	r8,r9
8000a18e:	a3 78       	lsl	r8,0x3
8000a190:	12 08       	add	r8,r9
8000a192:	2f f8       	sub	r8,-1
8000a194:	f8 08 02 38 	ld.d	r8,r12[r8<<0x3]
8000a198:	f0 16 00 03 	mcall	r6[12]
8000a19c:	14 98       	mov	r8,r10
8000a19e:	16 99       	mov	r9,r11
8000a1a0:	ee e9 ff e8 	st.d	r7[-24],r8
	P21 = -K2 * P2[axis][0][0] + P2[axis][1][0];
8000a1a4:	ee f8 ff d8 	ld.w	r8,r7[-40]
8000a1a8:	10 99       	mov	r9,r8
8000a1aa:	ee 19 80 00 	eorh	r9,0x8000
8000a1ae:	ef 49 ff ac 	st.w	r7[-84],r9
8000a1b2:	ee f8 ff dc 	ld.w	r8,r7[-36]
8000a1b6:	ef 48 ff b0 	st.w	r7[-80],r8
8000a1ba:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a1be:	ec fa 00 1c 	ld.w	r10,r6[28]
8000a1c2:	12 98       	mov	r8,r9
8000a1c4:	a3 78       	lsl	r8,0x3
8000a1c6:	12 08       	add	r8,r9
8000a1c8:	a3 78       	lsl	r8,0x3
8000a1ca:	f4 08 00 08 	add	r8,r10,r8
8000a1ce:	f0 e8 00 00 	ld.d	r8,r8[0]
8000a1d2:	ee ea ff ac 	ld.d	r10,r7[-84]
8000a1d6:	f0 16 00 03 	mcall	r6[12]
8000a1da:	14 98       	mov	r8,r10
8000a1dc:	16 99       	mov	r9,r11
8000a1de:	10 9a       	mov	r10,r8
8000a1e0:	12 9b       	mov	r11,r9
8000a1e2:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a1e6:	ec fc 00 1c 	ld.w	r12,r6[28]
8000a1ea:	12 98       	mov	r8,r9
8000a1ec:	a3 78       	lsl	r8,0x3
8000a1ee:	12 08       	add	r8,r9
8000a1f0:	a3 78       	lsl	r8,0x3
8000a1f2:	f8 08 00 08 	add	r8,r12,r8
8000a1f6:	2e 88       	sub	r8,-24
8000a1f8:	f0 e8 00 00 	ld.d	r8,r8[0]
8000a1fc:	f0 16 00 05 	mcall	r6[20]
8000a200:	14 98       	mov	r8,r10
8000a202:	16 99       	mov	r9,r11
8000a204:	ee e9 ff f0 	st.d	r7[-16],r8
	P22 = -K2 * P2[axis][0][1] + P2[axis][1][1];
8000a208:	ee f8 ff d8 	ld.w	r8,r7[-40]
8000a20c:	10 91       	mov	r1,r8
8000a20e:	ee 11 80 00 	eorh	r1,0x8000
8000a212:	ee f0 ff dc 	ld.w	r0,r7[-36]
8000a216:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a21a:	ec fa 00 1c 	ld.w	r10,r6[28]
8000a21e:	12 98       	mov	r8,r9
8000a220:	a3 78       	lsl	r8,0x3
8000a222:	12 08       	add	r8,r9
8000a224:	2f f8       	sub	r8,-1
8000a226:	f4 08 02 38 	ld.d	r8,r10[r8<<0x3]
8000a22a:	00 9a       	mov	r10,r0
8000a22c:	02 9b       	mov	r11,r1
8000a22e:	f0 16 00 03 	mcall	r6[12]
8000a232:	14 98       	mov	r8,r10
8000a234:	16 99       	mov	r9,r11
8000a236:	10 9a       	mov	r10,r8
8000a238:	12 9b       	mov	r11,r9
8000a23a:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a23e:	ec fc 00 1c 	ld.w	r12,r6[28]
8000a242:	12 98       	mov	r8,r9
8000a244:	a3 78       	lsl	r8,0x3
8000a246:	12 08       	add	r8,r9
8000a248:	a3 78       	lsl	r8,0x3
8000a24a:	f8 08 00 08 	add	r8,r12,r8
8000a24e:	2e 08       	sub	r8,-32
8000a250:	f0 e8 00 00 	ld.d	r8,r8[0]
8000a254:	f0 16 00 05 	mcall	r6[20]
8000a258:	14 98       	mov	r8,r10
8000a25a:	16 99       	mov	r9,r11
8000a25c:	ee e9 ff f8 	st.d	r7[-8],r8

	P2[axis][0][0] = P11;
8000a260:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a264:	ec fa 00 1c 	ld.w	r10,r6[28]
8000a268:	12 98       	mov	r8,r9
8000a26a:	a3 78       	lsl	r8,0x3
8000a26c:	12 08       	add	r8,r9
8000a26e:	a3 78       	lsl	r8,0x3
8000a270:	10 0a       	add	r10,r8
8000a272:	ee e8 ff e0 	ld.d	r8,r7[-32]
8000a276:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][0][1] = P12;
8000a27a:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a27e:	ec fa 00 1c 	ld.w	r10,r6[28]
8000a282:	12 98       	mov	r8,r9
8000a284:	a3 78       	lsl	r8,0x3
8000a286:	12 08       	add	r8,r9
8000a288:	f0 cb ff ff 	sub	r11,r8,-1
8000a28c:	ee e8 ff e8 	ld.d	r8,r7[-24]
8000a290:	f4 0b 08 38 	st.d	r10[r11<<0x3],r8
	P2[axis][1][0] = P21;
8000a294:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a298:	ec fa 00 1c 	ld.w	r10,r6[28]
8000a29c:	12 98       	mov	r8,r9
8000a29e:	a3 78       	lsl	r8,0x3
8000a2a0:	12 08       	add	r8,r9
8000a2a2:	a3 78       	lsl	r8,0x3
8000a2a4:	f4 08 00 08 	add	r8,r10,r8
8000a2a8:	f0 ca ff e8 	sub	r10,r8,-24
8000a2ac:	ee e8 ff f0 	ld.d	r8,r7[-16]
8000a2b0:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][1][1] = P22;
8000a2b4:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a2b8:	ec fa 00 1c 	ld.w	r10,r6[28]
8000a2bc:	12 98       	mov	r8,r9
8000a2be:	a3 78       	lsl	r8,0x3
8000a2c0:	12 08       	add	r8,r9
8000a2c2:	a3 78       	lsl	r8,0x3
8000a2c4:	f4 08 00 08 	add	r8,r10,r8
8000a2c8:	f0 ca ff e0 	sub	r10,r8,-32
8000a2cc:	ee e8 ff f8 	ld.d	r8,r7[-8]
8000a2d0:	f4 e9 00 00 	st.d	r10[0],r8
}
8000a2d4:	2e 5d       	sub	sp,-108
8000a2d6:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
8000a2da:	00 00       	add	r0,r0
8000a2dc:	80 00       	ld.sh	r0,r0[0x0]
8000a2de:	9b e4       	st.w	sp[0x38],r4

8000a2e0 <e_kalman_update_speed_hf>:
  
  // update covariance
  Pp = Pm - K*H*Pm;
*/
void e_kalman_update_speed_hf(int axis, float speed_meas)
{
8000a2e0:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
8000a2e4:	1a 97       	mov	r7,sp
8000a2e6:	21 ad       	sub	sp,104
8000a2e8:	fe f6 05 88 	ld.w	r6,pc[1416]
8000a2ec:	1e 26       	rsub	r6,pc
8000a2ee:	ef 4c ff bc 	st.w	r7[-68],r12
8000a2f2:	ef 4b ff b8 	st.w	r7[-72],r11
		double velxy,S,K1,K2;
		double P11,P12,P21,P22;
		
		velxy = speed_meas - centralData->estimation.state[axis][SPEED];
8000a2f6:	ee fc ff b8 	ld.w	r12,r7[-72]
8000a2fa:	f0 16 00 02 	mcall	r6[8]
8000a2fe:	ec f8 00 00 	ld.w	r8,r6[0]
8000a302:	70 0c       	ld.w	r12,r8[0x0]
8000a304:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a308:	12 98       	mov	r8,r9
8000a30a:	a1 78       	lsl	r8,0x1
8000a30c:	12 08       	add	r8,r9
8000a30e:	2f f8       	sub	r8,-1
8000a310:	a3 78       	lsl	r8,0x3
8000a312:	f8 08 00 08 	add	r8,r12,r8
8000a316:	f0 e8 0b 5c 	ld.d	r8,r8[2908]
8000a31a:	f0 16 00 11 	mcall	r6[68]
8000a31e:	14 98       	mov	r8,r10
8000a320:	16 99       	mov	r9,r11
8000a322:	ee e9 ff c0 	st.d	r7[-64],r8
		
		S = P[axis][1][1] + R[axis];
8000a326:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a32a:	ec fa 00 18 	ld.w	r10,r6[24]
8000a32e:	12 98       	mov	r8,r9
8000a330:	a3 78       	lsl	r8,0x3
8000a332:	12 08       	add	r8,r9
8000a334:	a3 78       	lsl	r8,0x3
8000a336:	f4 08 00 08 	add	r8,r10,r8
8000a33a:	2e 08       	sub	r8,-32
8000a33c:	f0 ea 00 00 	ld.d	r10,r8[0]
8000a340:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a344:	ec f8 01 54 	ld.w	r8,r6[340]
8000a348:	f0 09 02 38 	ld.d	r8,r8[r9<<0x3]
8000a34c:	f0 16 00 05 	mcall	r6[20]
8000a350:	14 98       	mov	r8,r10
8000a352:	16 99       	mov	r9,r11
8000a354:	ee e9 ff c8 	st.d	r7[-56],r8
		K1 = P[axis][0][1] * 1/S;
8000a358:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a35c:	ec fa 00 18 	ld.w	r10,r6[24]
8000a360:	12 98       	mov	r8,r9
8000a362:	a3 78       	lsl	r8,0x3
8000a364:	12 08       	add	r8,r9
8000a366:	2f f8       	sub	r8,-1
8000a368:	f4 08 02 3a 	ld.d	r10,r10[r8<<0x3]
8000a36c:	ee e8 ff c8 	ld.d	r8,r7[-56]
8000a370:	f0 16 00 0c 	mcall	r6[48]
8000a374:	14 98       	mov	r8,r10
8000a376:	16 99       	mov	r9,r11
8000a378:	ee e9 ff d0 	st.d	r7[-48],r8
		K2 = P[axis][1][1] * 1/S;
8000a37c:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a380:	ec fa 00 18 	ld.w	r10,r6[24]
8000a384:	12 98       	mov	r8,r9
8000a386:	a3 78       	lsl	r8,0x3
8000a388:	12 08       	add	r8,r9
8000a38a:	a3 78       	lsl	r8,0x3
8000a38c:	f4 08 00 08 	add	r8,r10,r8
8000a390:	2e 08       	sub	r8,-32
8000a392:	f0 ea 00 00 	ld.d	r10,r8[0]
8000a396:	ee e8 ff c8 	ld.d	r8,r7[-56]
8000a39a:	f0 16 00 0c 	mcall	r6[48]
8000a39e:	14 98       	mov	r8,r10
8000a3a0:	16 99       	mov	r9,r11
8000a3a2:	ee e9 ff d8 	st.d	r7[-40],r8

		centralData->estimation.state[axis][POSITION] = centralData->estimation.state[axis][POSITION] + K1 * velxy;
8000a3a6:	ec f8 00 00 	ld.w	r8,r6[0]
8000a3aa:	70 08       	ld.w	r8,r8[0x0]
8000a3ac:	ef 48 ff 98 	st.w	r7[-104],r8
8000a3b0:	ee f5 ff bc 	ld.w	r5,r7[-68]
8000a3b4:	ec f8 00 00 	ld.w	r8,r6[0]
8000a3b8:	70 0a       	ld.w	r10,r8[0x0]
8000a3ba:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a3be:	12 98       	mov	r8,r9
8000a3c0:	a1 78       	lsl	r8,0x1
8000a3c2:	12 08       	add	r8,r9
8000a3c4:	a3 78       	lsl	r8,0x3
8000a3c6:	f4 08 00 08 	add	r8,r10,r8
8000a3ca:	f0 c8 f4 a4 	sub	r8,r8,-2908
8000a3ce:	f0 e2 00 00 	ld.d	r2,r8[0]
8000a3d2:	ee e8 ff c0 	ld.d	r8,r7[-64]
8000a3d6:	ee ea ff d0 	ld.d	r10,r7[-48]
8000a3da:	f0 16 00 03 	mcall	r6[12]
8000a3de:	14 98       	mov	r8,r10
8000a3e0:	16 99       	mov	r9,r11
8000a3e2:	04 9a       	mov	r10,r2
8000a3e4:	06 9b       	mov	r11,r3
8000a3e6:	f0 16 00 05 	mcall	r6[20]
8000a3ea:	14 98       	mov	r8,r10
8000a3ec:	16 99       	mov	r9,r11
8000a3ee:	10 9a       	mov	r10,r8
8000a3f0:	12 9b       	mov	r11,r9
8000a3f2:	0a 98       	mov	r8,r5
8000a3f4:	a1 78       	lsl	r8,0x1
8000a3f6:	0a 08       	add	r8,r5
8000a3f8:	a3 78       	lsl	r8,0x3
8000a3fa:	ee f9 ff 98 	ld.w	r9,r7[-104]
8000a3fe:	f2 08 00 08 	add	r8,r9,r8
8000a402:	f0 c8 f4 a4 	sub	r8,r8,-2908
8000a406:	f0 eb 00 00 	st.d	r8[0],r10
		centralData->estimation.state[axis][SPEED] = centralData->estimation.state[axis][SPEED] + K2 * velxy;
8000a40a:	ec f8 00 00 	ld.w	r8,r6[0]
8000a40e:	70 08       	ld.w	r8,r8[0x0]
8000a410:	ef 48 ff 9c 	st.w	r7[-100],r8
8000a414:	ee f5 ff bc 	ld.w	r5,r7[-68]
8000a418:	ec f8 00 00 	ld.w	r8,r6[0]
8000a41c:	70 0a       	ld.w	r10,r8[0x0]
8000a41e:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a422:	12 98       	mov	r8,r9
8000a424:	a1 78       	lsl	r8,0x1
8000a426:	12 08       	add	r8,r9
8000a428:	2f f8       	sub	r8,-1
8000a42a:	a3 78       	lsl	r8,0x3
8000a42c:	f4 08 00 08 	add	r8,r10,r8
8000a430:	f0 e2 0b 5c 	ld.d	r2,r8[2908]
8000a434:	ee e8 ff c0 	ld.d	r8,r7[-64]
8000a438:	ee ea ff d8 	ld.d	r10,r7[-40]
8000a43c:	f0 16 00 03 	mcall	r6[12]
8000a440:	14 98       	mov	r8,r10
8000a442:	16 99       	mov	r9,r11
8000a444:	04 9a       	mov	r10,r2
8000a446:	06 9b       	mov	r11,r3
8000a448:	f0 16 00 05 	mcall	r6[20]
8000a44c:	14 98       	mov	r8,r10
8000a44e:	16 99       	mov	r9,r11
8000a450:	10 9a       	mov	r10,r8
8000a452:	12 9b       	mov	r11,r9
8000a454:	0a 98       	mov	r8,r5
8000a456:	a1 78       	lsl	r8,0x1
8000a458:	0a 08       	add	r8,r5
8000a45a:	2f f8       	sub	r8,-1
8000a45c:	a3 78       	lsl	r8,0x3
8000a45e:	ee f9 ff 9c 	ld.w	r9,r7[-100]
8000a462:	f2 08 00 08 	add	r8,r9,r8
8000a466:	f0 eb 0b 5c 	st.d	r8[2908],r10

		P11 = -K1 * P[axis][1][0] + P[axis][0][0];
8000a46a:	ee f8 ff d0 	ld.w	r8,r7[-48]
8000a46e:	10 99       	mov	r9,r8
8000a470:	ee 19 80 00 	eorh	r9,0x8000
8000a474:	ef 49 ff a0 	st.w	r7[-96],r9
8000a478:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000a47c:	ef 48 ff a4 	st.w	r7[-92],r8
8000a480:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a484:	ec fa 00 18 	ld.w	r10,r6[24]
8000a488:	12 98       	mov	r8,r9
8000a48a:	a3 78       	lsl	r8,0x3
8000a48c:	12 08       	add	r8,r9
8000a48e:	a3 78       	lsl	r8,0x3
8000a490:	f4 08 00 08 	add	r8,r10,r8
8000a494:	2e 88       	sub	r8,-24
8000a496:	f0 e8 00 00 	ld.d	r8,r8[0]
8000a49a:	ee ea ff a0 	ld.d	r10,r7[-96]
8000a49e:	f0 16 00 03 	mcall	r6[12]
8000a4a2:	14 98       	mov	r8,r10
8000a4a4:	16 99       	mov	r9,r11
8000a4a6:	10 9a       	mov	r10,r8
8000a4a8:	12 9b       	mov	r11,r9
8000a4aa:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a4ae:	ec fc 00 18 	ld.w	r12,r6[24]
8000a4b2:	12 98       	mov	r8,r9
8000a4b4:	a3 78       	lsl	r8,0x3
8000a4b6:	12 08       	add	r8,r9
8000a4b8:	a3 78       	lsl	r8,0x3
8000a4ba:	f8 08 00 08 	add	r8,r12,r8
8000a4be:	f0 e8 00 00 	ld.d	r8,r8[0]
8000a4c2:	f0 16 00 05 	mcall	r6[20]
8000a4c6:	14 98       	mov	r8,r10
8000a4c8:	16 99       	mov	r9,r11
8000a4ca:	ee e9 ff e0 	st.d	r7[-32],r8
		P12 = -K1 * P[axis][1][1] + P[axis][0][1];
8000a4ce:	ee f8 ff d0 	ld.w	r8,r7[-48]
8000a4d2:	10 99       	mov	r9,r8
8000a4d4:	ee 19 80 00 	eorh	r9,0x8000
8000a4d8:	ef 49 ff a8 	st.w	r7[-88],r9
8000a4dc:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000a4e0:	ef 48 ff ac 	st.w	r7[-84],r8
8000a4e4:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a4e8:	ec fa 00 18 	ld.w	r10,r6[24]
8000a4ec:	12 98       	mov	r8,r9
8000a4ee:	a3 78       	lsl	r8,0x3
8000a4f0:	12 08       	add	r8,r9
8000a4f2:	a3 78       	lsl	r8,0x3
8000a4f4:	f4 08 00 08 	add	r8,r10,r8
8000a4f8:	2e 08       	sub	r8,-32
8000a4fa:	f0 e8 00 00 	ld.d	r8,r8[0]
8000a4fe:	ee ea ff a8 	ld.d	r10,r7[-88]
8000a502:	f0 16 00 03 	mcall	r6[12]
8000a506:	14 98       	mov	r8,r10
8000a508:	16 99       	mov	r9,r11
8000a50a:	10 9a       	mov	r10,r8
8000a50c:	12 9b       	mov	r11,r9
8000a50e:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a512:	ec fc 00 18 	ld.w	r12,r6[24]
8000a516:	12 98       	mov	r8,r9
8000a518:	a3 78       	lsl	r8,0x3
8000a51a:	12 08       	add	r8,r9
8000a51c:	2f f8       	sub	r8,-1
8000a51e:	f8 08 02 38 	ld.d	r8,r12[r8<<0x3]
8000a522:	f0 16 00 05 	mcall	r6[20]
8000a526:	14 98       	mov	r8,r10
8000a528:	16 99       	mov	r9,r11
8000a52a:	ee e9 ff e8 	st.d	r7[-24],r8
		P21 = (1.0 - K2) * P[axis][1][0];
8000a52e:	ee e8 ff d8 	ld.d	r8,r7[-40]
8000a532:	30 0a       	mov	r10,0
8000a534:	fc 1b 3f f0 	movh	r11,0x3ff0
8000a538:	f0 16 00 11 	mcall	r6[68]
8000a53c:	14 98       	mov	r8,r10
8000a53e:	16 99       	mov	r9,r11
8000a540:	10 9a       	mov	r10,r8
8000a542:	12 9b       	mov	r11,r9
8000a544:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a548:	ec fc 00 18 	ld.w	r12,r6[24]
8000a54c:	12 98       	mov	r8,r9
8000a54e:	a3 78       	lsl	r8,0x3
8000a550:	12 08       	add	r8,r9
8000a552:	a3 78       	lsl	r8,0x3
8000a554:	f8 08 00 08 	add	r8,r12,r8
8000a558:	2e 88       	sub	r8,-24
8000a55a:	f0 e8 00 00 	ld.d	r8,r8[0]
8000a55e:	f0 16 00 03 	mcall	r6[12]
8000a562:	14 98       	mov	r8,r10
8000a564:	16 99       	mov	r9,r11
8000a566:	ee e9 ff f0 	st.d	r7[-16],r8
		P22 = (1.0 - K2) * P[axis][1][1];
8000a56a:	ee e8 ff d8 	ld.d	r8,r7[-40]
8000a56e:	30 0a       	mov	r10,0
8000a570:	fc 1b 3f f0 	movh	r11,0x3ff0
8000a574:	f0 16 00 11 	mcall	r6[68]
8000a578:	14 98       	mov	r8,r10
8000a57a:	16 99       	mov	r9,r11
8000a57c:	10 9a       	mov	r10,r8
8000a57e:	12 9b       	mov	r11,r9
8000a580:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a584:	ec fc 00 18 	ld.w	r12,r6[24]
8000a588:	12 98       	mov	r8,r9
8000a58a:	a3 78       	lsl	r8,0x3
8000a58c:	12 08       	add	r8,r9
8000a58e:	a3 78       	lsl	r8,0x3
8000a590:	f8 08 00 08 	add	r8,r12,r8
8000a594:	2e 08       	sub	r8,-32
8000a596:	f0 e8 00 00 	ld.d	r8,r8[0]
8000a59a:	f0 16 00 03 	mcall	r6[12]
8000a59e:	14 98       	mov	r8,r10
8000a5a0:	16 99       	mov	r9,r11
8000a5a2:	ee e9 ff f8 	st.d	r7[-8],r8

		P[axis][0][0] = P11;
8000a5a6:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a5aa:	ec fa 00 18 	ld.w	r10,r6[24]
8000a5ae:	12 98       	mov	r8,r9
8000a5b0:	a3 78       	lsl	r8,0x3
8000a5b2:	12 08       	add	r8,r9
8000a5b4:	a3 78       	lsl	r8,0x3
8000a5b6:	10 0a       	add	r10,r8
8000a5b8:	ee e8 ff e0 	ld.d	r8,r7[-32]
8000a5bc:	f4 e9 00 00 	st.d	r10[0],r8
		P[axis][0][1] = P12;
8000a5c0:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a5c4:	ec fa 00 18 	ld.w	r10,r6[24]
8000a5c8:	12 98       	mov	r8,r9
8000a5ca:	a3 78       	lsl	r8,0x3
8000a5cc:	12 08       	add	r8,r9
8000a5ce:	f0 cb ff ff 	sub	r11,r8,-1
8000a5d2:	ee e8 ff e8 	ld.d	r8,r7[-24]
8000a5d6:	f4 0b 08 38 	st.d	r10[r11<<0x3],r8
		P[axis][1][0] = P21;
8000a5da:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a5de:	ec fa 00 18 	ld.w	r10,r6[24]
8000a5e2:	12 98       	mov	r8,r9
8000a5e4:	a3 78       	lsl	r8,0x3
8000a5e6:	12 08       	add	r8,r9
8000a5e8:	a3 78       	lsl	r8,0x3
8000a5ea:	f4 08 00 08 	add	r8,r10,r8
8000a5ee:	f0 ca ff e8 	sub	r10,r8,-24
8000a5f2:	ee e8 ff f0 	ld.d	r8,r7[-16]
8000a5f6:	f4 e9 00 00 	st.d	r10[0],r8
		P[axis][1][1] = P22;
8000a5fa:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a5fe:	ec fa 00 18 	ld.w	r10,r6[24]
8000a602:	12 98       	mov	r8,r9
8000a604:	a3 78       	lsl	r8,0x3
8000a606:	12 08       	add	r8,r9
8000a608:	a3 78       	lsl	r8,0x3
8000a60a:	f4 08 00 08 	add	r8,r10,r8
8000a60e:	f0 ca ff e0 	sub	r10,r8,-32
8000a612:	ee e8 ff f8 	ld.d	r8,r7[-8]
8000a616:	f4 e9 00 00 	st.d	r10[0],r8
		
		/*************************************************************************************/
		velxy = speed_meas - centralData->position_estimator.vel[axis];
8000a61a:	ec f8 00 00 	ld.w	r8,r6[0]
8000a61e:	70 08       	ld.w	r8,r8[0x0]
8000a620:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a624:	f2 c9 fc a3 	sub	r9,r9,-861
8000a628:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8000a62c:	ee f9 ff b8 	ld.w	r9,r7[-72]
8000a630:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8000a634:	10 9c       	mov	r12,r8
8000a636:	f0 16 00 02 	mcall	r6[8]
8000a63a:	14 98       	mov	r8,r10
8000a63c:	16 99       	mov	r9,r11
8000a63e:	ee e9 ff c0 	st.d	r7[-64],r8
		
		S = P2[axis][1][1] + R2[axis];
8000a642:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a646:	ec fa 00 1c 	ld.w	r10,r6[28]
8000a64a:	12 98       	mov	r8,r9
8000a64c:	a3 78       	lsl	r8,0x3
8000a64e:	12 08       	add	r8,r9
8000a650:	a3 78       	lsl	r8,0x3
8000a652:	f4 08 00 08 	add	r8,r10,r8
8000a656:	2e 08       	sub	r8,-32
8000a658:	f0 ea 00 00 	ld.d	r10,r8[0]
8000a65c:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a660:	ec f8 01 50 	ld.w	r8,r6[336]
8000a664:	f0 09 02 38 	ld.d	r8,r8[r9<<0x3]
8000a668:	f0 16 00 05 	mcall	r6[20]
8000a66c:	14 98       	mov	r8,r10
8000a66e:	16 99       	mov	r9,r11
8000a670:	ee e9 ff c8 	st.d	r7[-56],r8
		K1 = P2[axis][0][1] * 1/S;
8000a674:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a678:	ec fa 00 1c 	ld.w	r10,r6[28]
8000a67c:	12 98       	mov	r8,r9
8000a67e:	a3 78       	lsl	r8,0x3
8000a680:	12 08       	add	r8,r9
8000a682:	2f f8       	sub	r8,-1
8000a684:	f4 08 02 3a 	ld.d	r10,r10[r8<<0x3]
8000a688:	ee e8 ff c8 	ld.d	r8,r7[-56]
8000a68c:	f0 16 00 0c 	mcall	r6[48]
8000a690:	14 98       	mov	r8,r10
8000a692:	16 99       	mov	r9,r11
8000a694:	ee e9 ff d0 	st.d	r7[-48],r8
		K2 = P2[axis][1][1] * 1/S;
8000a698:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a69c:	ec fa 00 1c 	ld.w	r10,r6[28]
8000a6a0:	12 98       	mov	r8,r9
8000a6a2:	a3 78       	lsl	r8,0x3
8000a6a4:	12 08       	add	r8,r9
8000a6a6:	a3 78       	lsl	r8,0x3
8000a6a8:	f4 08 00 08 	add	r8,r10,r8
8000a6ac:	2e 08       	sub	r8,-32
8000a6ae:	f0 ea 00 00 	ld.d	r10,r8[0]
8000a6b2:	ee e8 ff c8 	ld.d	r8,r7[-56]
8000a6b6:	f0 16 00 0c 	mcall	r6[48]
8000a6ba:	14 98       	mov	r8,r10
8000a6bc:	16 99       	mov	r9,r11
8000a6be:	ee e9 ff d8 	st.d	r7[-40],r8
		
		//centralData->position_estimator.localPosition.pos[axis] = centralData->position_estimator.localPosition.pos[axis] + K1 * velxy;
		//centralData->position_estimator.vel[axis] = centralData->position_estimator.vel[axis] + K2 * velxy;
		
		P11 = -K1 * P2[axis][1][0] + P2[axis][0][0];
8000a6c2:	ee f8 ff d0 	ld.w	r8,r7[-48]
8000a6c6:	10 99       	mov	r9,r8
8000a6c8:	ee 19 80 00 	eorh	r9,0x8000
8000a6cc:	ef 49 ff b0 	st.w	r7[-80],r9
8000a6d0:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000a6d4:	ef 48 ff b4 	st.w	r7[-76],r8
8000a6d8:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a6dc:	ec fa 00 1c 	ld.w	r10,r6[28]
8000a6e0:	12 98       	mov	r8,r9
8000a6e2:	a3 78       	lsl	r8,0x3
8000a6e4:	12 08       	add	r8,r9
8000a6e6:	a3 78       	lsl	r8,0x3
8000a6e8:	f4 08 00 08 	add	r8,r10,r8
8000a6ec:	2e 88       	sub	r8,-24
8000a6ee:	f0 e8 00 00 	ld.d	r8,r8[0]
8000a6f2:	ee ea ff b0 	ld.d	r10,r7[-80]
8000a6f6:	f0 16 00 03 	mcall	r6[12]
8000a6fa:	14 98       	mov	r8,r10
8000a6fc:	16 99       	mov	r9,r11
8000a6fe:	10 9a       	mov	r10,r8
8000a700:	12 9b       	mov	r11,r9
8000a702:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a706:	ec fc 00 1c 	ld.w	r12,r6[28]
8000a70a:	12 98       	mov	r8,r9
8000a70c:	a3 78       	lsl	r8,0x3
8000a70e:	12 08       	add	r8,r9
8000a710:	a3 78       	lsl	r8,0x3
8000a712:	f8 08 00 08 	add	r8,r12,r8
8000a716:	f0 e8 00 00 	ld.d	r8,r8[0]
8000a71a:	f0 16 00 05 	mcall	r6[20]
8000a71e:	14 98       	mov	r8,r10
8000a720:	16 99       	mov	r9,r11
8000a722:	ee e9 ff e0 	st.d	r7[-32],r8
		P12 = -K1 * P2[axis][1][1] + P2[axis][0][1];
8000a726:	ee f8 ff d0 	ld.w	r8,r7[-48]
8000a72a:	10 91       	mov	r1,r8
8000a72c:	ee 11 80 00 	eorh	r1,0x8000
8000a730:	ee f0 ff d4 	ld.w	r0,r7[-44]
8000a734:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a738:	ec fa 00 1c 	ld.w	r10,r6[28]
8000a73c:	12 98       	mov	r8,r9
8000a73e:	a3 78       	lsl	r8,0x3
8000a740:	12 08       	add	r8,r9
8000a742:	a3 78       	lsl	r8,0x3
8000a744:	f4 08 00 08 	add	r8,r10,r8
8000a748:	2e 08       	sub	r8,-32
8000a74a:	f0 e8 00 00 	ld.d	r8,r8[0]
8000a74e:	00 9a       	mov	r10,r0
8000a750:	02 9b       	mov	r11,r1
8000a752:	f0 16 00 03 	mcall	r6[12]
8000a756:	14 98       	mov	r8,r10
8000a758:	16 99       	mov	r9,r11
8000a75a:	10 9a       	mov	r10,r8
8000a75c:	12 9b       	mov	r11,r9
8000a75e:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a762:	ec fc 00 1c 	ld.w	r12,r6[28]
8000a766:	12 98       	mov	r8,r9
8000a768:	a3 78       	lsl	r8,0x3
8000a76a:	12 08       	add	r8,r9
8000a76c:	2f f8       	sub	r8,-1
8000a76e:	f8 08 02 38 	ld.d	r8,r12[r8<<0x3]
8000a772:	f0 16 00 05 	mcall	r6[20]
8000a776:	14 98       	mov	r8,r10
8000a778:	16 99       	mov	r9,r11
8000a77a:	ee e9 ff e8 	st.d	r7[-24],r8
		P21 = (1.0 - K2) * P2[axis][1][0];
8000a77e:	ee e8 ff d8 	ld.d	r8,r7[-40]
8000a782:	30 0a       	mov	r10,0
8000a784:	fc 1b 3f f0 	movh	r11,0x3ff0
8000a788:	f0 16 00 11 	mcall	r6[68]
8000a78c:	14 98       	mov	r8,r10
8000a78e:	16 99       	mov	r9,r11
8000a790:	10 9a       	mov	r10,r8
8000a792:	12 9b       	mov	r11,r9
8000a794:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a798:	ec fc 00 1c 	ld.w	r12,r6[28]
8000a79c:	12 98       	mov	r8,r9
8000a79e:	a3 78       	lsl	r8,0x3
8000a7a0:	12 08       	add	r8,r9
8000a7a2:	a3 78       	lsl	r8,0x3
8000a7a4:	f8 08 00 08 	add	r8,r12,r8
8000a7a8:	2e 88       	sub	r8,-24
8000a7aa:	f0 e8 00 00 	ld.d	r8,r8[0]
8000a7ae:	f0 16 00 03 	mcall	r6[12]
8000a7b2:	14 98       	mov	r8,r10
8000a7b4:	16 99       	mov	r9,r11
8000a7b6:	ee e9 ff f0 	st.d	r7[-16],r8
		P22 = (1.0 - K2) * P2[axis][1][1];
8000a7ba:	ee e8 ff d8 	ld.d	r8,r7[-40]
8000a7be:	30 0a       	mov	r10,0
8000a7c0:	fc 1b 3f f0 	movh	r11,0x3ff0
8000a7c4:	f0 16 00 11 	mcall	r6[68]
8000a7c8:	14 98       	mov	r8,r10
8000a7ca:	16 99       	mov	r9,r11
8000a7cc:	10 9a       	mov	r10,r8
8000a7ce:	12 9b       	mov	r11,r9
8000a7d0:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a7d4:	ec fc 00 1c 	ld.w	r12,r6[28]
8000a7d8:	12 98       	mov	r8,r9
8000a7da:	a3 78       	lsl	r8,0x3
8000a7dc:	12 08       	add	r8,r9
8000a7de:	a3 78       	lsl	r8,0x3
8000a7e0:	f8 08 00 08 	add	r8,r12,r8
8000a7e4:	2e 08       	sub	r8,-32
8000a7e6:	f0 e8 00 00 	ld.d	r8,r8[0]
8000a7ea:	f0 16 00 03 	mcall	r6[12]
8000a7ee:	14 98       	mov	r8,r10
8000a7f0:	16 99       	mov	r9,r11
8000a7f2:	ee e9 ff f8 	st.d	r7[-8],r8

		P2[axis][0][0] = P11;
8000a7f6:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a7fa:	ec fa 00 1c 	ld.w	r10,r6[28]
8000a7fe:	12 98       	mov	r8,r9
8000a800:	a3 78       	lsl	r8,0x3
8000a802:	12 08       	add	r8,r9
8000a804:	a3 78       	lsl	r8,0x3
8000a806:	10 0a       	add	r10,r8
8000a808:	ee e8 ff e0 	ld.d	r8,r7[-32]
8000a80c:	f4 e9 00 00 	st.d	r10[0],r8
		P2[axis][0][1] = P12;
8000a810:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a814:	ec fa 00 1c 	ld.w	r10,r6[28]
8000a818:	12 98       	mov	r8,r9
8000a81a:	a3 78       	lsl	r8,0x3
8000a81c:	12 08       	add	r8,r9
8000a81e:	f0 cb ff ff 	sub	r11,r8,-1
8000a822:	ee e8 ff e8 	ld.d	r8,r7[-24]
8000a826:	f4 0b 08 38 	st.d	r10[r11<<0x3],r8
		P2[axis][1][0] = P21;
8000a82a:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a82e:	ec fa 00 1c 	ld.w	r10,r6[28]
8000a832:	12 98       	mov	r8,r9
8000a834:	a3 78       	lsl	r8,0x3
8000a836:	12 08       	add	r8,r9
8000a838:	a3 78       	lsl	r8,0x3
8000a83a:	f4 08 00 08 	add	r8,r10,r8
8000a83e:	f0 ca ff e8 	sub	r10,r8,-24
8000a842:	ee e8 ff f0 	ld.d	r8,r7[-16]
8000a846:	f4 e9 00 00 	st.d	r10[0],r8
		P2[axis][1][1] = P22;
8000a84a:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a84e:	ec fa 00 1c 	ld.w	r10,r6[28]
8000a852:	12 98       	mov	r8,r9
8000a854:	a3 78       	lsl	r8,0x3
8000a856:	12 08       	add	r8,r9
8000a858:	a3 78       	lsl	r8,0x3
8000a85a:	f4 08 00 08 	add	r8,r10,r8
8000a85e:	f0 ca ff e0 	sub	r10,r8,-32
8000a862:	ee e8 ff f8 	ld.d	r8,r7[-8]
8000a866:	f4 e9 00 00 	st.d	r10[0],r8
}
8000a86a:	2e 6d       	sub	sp,-104
8000a86c:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
8000a870:	80 00       	ld.sh	r0,r0[0x0]
8000a872:	a1 70       	lsl	r0,0x1

8000a874 <estimator_loop>:

//--------------------------------GLOBAL--------------------------
void estimator_loop()
{
8000a874:	eb cd 40 e0 	pushm	r5-r7,lr
8000a878:	1a 97       	mov	r7,sp
8000a87a:	21 dd       	sub	sp,116
8000a87c:	fe f6 02 00 	ld.w	r6,pc[512]
8000a880:	1e 26       	rsub	r6,pc
	
	global_position_t global_gps_position;
	local_coordinates_t local_coordinates;
	//static uint32_t dt_baro,time_before_baro;
	
	if (!centralData->position_estimator.init_gps_position)
8000a882:	ec f8 00 00 	ld.w	r8,r6[0]
8000a886:	70 08       	ld.w	r8,r8[0x0]
8000a888:	f1 38 0d 64 	ld.ub	r8,r8[3428]
8000a88c:	ec 18 00 01 	eorl	r8,0x1
8000a890:	5c 58       	castu.b	r8
8000a892:	c0 30       	breq	8000a898 <estimator_loop+0x24>
	{
		init_pos_gps_estimator();
8000a894:	f0 16 01 0c 	mcall	r6[1072]
	}

	if(!filter_init_delta_t)
8000a898:	ec f8 02 b0 	ld.w	r8,r6[688]
8000a89c:	11 88       	ld.ub	r8,r8[0x0]
8000a89e:	ec 18 00 01 	eorl	r8,0x1
8000a8a2:	5c 58       	castu.b	r8
8000a8a4:	c0 c0       	breq	8000a8bc <estimator_loop+0x48>
	{
		filter_init_delta_t = true;
8000a8a6:	ec f9 02 b0 	ld.w	r9,r6[688]
8000a8aa:	30 18       	mov	r8,1
8000a8ac:	b2 88       	st.b	r9[0x0],r8
		prev_time = get_micros();
8000a8ae:	f0 16 00 27 	mcall	r6[156]
8000a8b2:	18 99       	mov	r9,r12
8000a8b4:	ec f8 02 ac 	ld.w	r8,r6[684]
8000a8b8:	91 09       	st.w	r8[0x0],r9
8000a8ba:	cd e8       	rjmp	8000aa76 <estimator_loop+0x202>
	}else{
		actual_time = get_micros();
8000a8bc:	f0 16 00 27 	mcall	r6[156]
8000a8c0:	18 98       	mov	r8,r12
8000a8c2:	ef 48 ff fc 	st.w	r7[-4],r8
		centralData->estimation.delta_t_filter = (float)(actual_time-prev_time);
8000a8c6:	ec f8 00 00 	ld.w	r8,r6[0]
8000a8ca:	70 08       	ld.w	r8,r8[0x0]
8000a8cc:	ec f9 02 ac 	ld.w	r9,r6[684]
8000a8d0:	72 09       	ld.w	r9,r9[0x0]
8000a8d2:	ee fa ff fc 	ld.w	r10,r7[-4]
8000a8d6:	f4 09 01 09 	sub	r9,r10,r9
8000a8da:	e5 a4 09 09 	cop	cp0,cr9,cr0,cr9,0x48
8000a8de:	f1 49 0b a4 	st.w	r8[2980],r9
		prev_time = actual_time;
8000a8e2:	ec f8 02 ac 	ld.w	r8,r6[684]
8000a8e6:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000a8ea:	91 09       	st.w	r8[0x0],r9
		centralData->estimation.delta_t_filter /= 1000000.0;
8000a8ec:	ec f8 00 00 	ld.w	r8,r6[0]
8000a8f0:	70 05       	ld.w	r5,r8[0x0]
8000a8f2:	ec f8 00 00 	ld.w	r8,r6[0]
8000a8f6:	70 08       	ld.w	r8,r8[0x0]
8000a8f8:	f0 f8 0b a4 	ld.w	r8,r8[2980]
8000a8fc:	e0 6b 24 00 	mov	r11,9216
8000a900:	ea 1b 49 74 	orh	r11,0x4974
8000a904:	10 9c       	mov	r12,r8
8000a906:	f0 16 00 08 	mcall	r6[32]
8000a90a:	18 98       	mov	r8,r12
8000a90c:	eb 48 0b a4 	st.w	r5[2980],r8
		
		e_predict(&(centralData->imu1.attitude.qe),centralData->imu1.attitude.acc_bf,centralData->estimation.delta_t_filter);
8000a910:	ec f8 00 00 	ld.w	r8,r6[0]
8000a914:	70 08       	ld.w	r8,r8[0x0]
8000a916:	f0 fa 0b a4 	ld.w	r10,r8[2980]
8000a91a:	ec f8 00 00 	ld.w	r8,r6[0]
8000a91e:	70 08       	ld.w	r8,r8[0x0]
8000a920:	f0 c9 ff 40 	sub	r9,r8,-192
8000a924:	ec f8 00 00 	ld.w	r8,r6[0]
8000a928:	70 08       	ld.w	r8,r8[0x0]
8000a92a:	12 9b       	mov	r11,r9
8000a92c:	10 9c       	mov	r12,r8
8000a92e:	f0 16 01 d4 	mcall	r6[1872]
		
		//Check new values from GPS/Baro, if yes, update
		if (newValidGpsMsg(&timeLastGpsMsgEstimator) && centralData->position_estimator.init_gps_position && (centralData->simulation_mode == 0))
8000a932:	ec fc 02 6c 	ld.w	r12,r6[620]
8000a936:	f0 16 00 8b 	mcall	r6[556]
8000a93a:	18 98       	mov	r8,r12
8000a93c:	58 08       	cp.w	r8,0
8000a93e:	e0 80 00 9c 	breq	8000aa76 <estimator_loop+0x202>
8000a942:	ec f8 00 00 	ld.w	r8,r6[0]
8000a946:	70 08       	ld.w	r8,r8[0x0]
8000a948:	f1 38 0d 64 	ld.ub	r8,r8[3428]
8000a94c:	58 08       	cp.w	r8,0
8000a94e:	e0 80 00 94 	breq	8000aa76 <estimator_loop+0x202>
8000a952:	ec f8 00 00 	ld.w	r8,r6[0]
8000a956:	70 08       	ld.w	r8,r8[0x0]
8000a958:	f0 f8 10 c0 	ld.w	r8,r8[4288]
8000a95c:	58 08       	cp.w	r8,0
8000a95e:	e0 81 00 8c 	brne	8000aa76 <estimator_loop+0x202>
			//latitude_rad= ((double) (centralData->GPS_data.latitude-init_lat))*DEGREE_TO_RADIAN; //in rad E+7
			//pos_y= (float) (((double) (centralData->GPS_data.longitude-init_long)*EARTH_RADIUS)*DEGREE_TO_RADIAN*(COS_PI_4-COS_PI_4*(centralData->GPS_data.latitude*DEGREE_TO_RADIAN*0.0000001-PI_4)-COS_PI_4*0.5*(centralData->GPS_data.latitude*DEGREE_TO_RADIAN*0.0000001-PI_4)*(centralData->GPS_data.latitude*DEGREE_TO_RADIAN*0.0000001-PI_4)));//Taylor 2nd order cos() approx
			//pos_x= (float) (latitude_rad*EARTH_RADIUS);
			//pos_z= -centralData->GPS_data.altitude+init_alt;
			
			global_gps_position.longitude = centralData->GPS_data.longitude;
8000a962:	ec f8 00 00 	ld.w	r8,r6[0]
8000a966:	70 08       	ld.w	r8,r8[0x0]
8000a968:	f0 e8 0b 10 	ld.d	r8,r8[2832]
8000a96c:	ee e9 ff bc 	st.d	r7[-68],r8
			global_gps_position.latitude = centralData->GPS_data.latitude;
8000a970:	ec f8 00 00 	ld.w	r8,r6[0]
8000a974:	70 08       	ld.w	r8,r8[0x0]
8000a976:	f0 e8 0b 08 	ld.d	r8,r8[2824]
8000a97a:	ee e9 ff c4 	st.d	r7[-60],r8
			global_gps_position.altitude = centralData->GPS_data.altitude;
8000a97e:	ec f8 00 00 	ld.w	r8,r6[0]
8000a982:	70 08       	ld.w	r8,r8[0x0]
8000a984:	f0 f8 0b 18 	ld.w	r8,r8[2840]
8000a988:	ef 48 ff cc 	st.w	r7[-52],r8
			
			local_coordinates = global_to_local_position(global_gps_position,centralData->position_estimator.localPosition.origin);
8000a98c:	ec f8 00 00 	ld.w	r8,r6[0]
8000a990:	70 08       	ld.w	r8,r8[0x0]
8000a992:	ee cc 00 74 	sub	r12,r7,116
8000a996:	20 7d       	sub	sp,28
8000a998:	1a 99       	mov	r9,sp
8000a99a:	12 9a       	mov	r10,r9
8000a99c:	f0 cb f2 54 	sub	r11,r8,-3500
8000a9a0:	f4 c8 00 00 	sub	r8,r10,0
8000a9a4:	f6 c9 00 00 	sub	r9,r11,0
8000a9a8:	72 0e       	ld.w	lr,r9[0x0]
8000a9aa:	91 0e       	st.w	r8[0x0],lr
8000a9ac:	72 1e       	ld.w	lr,r9[0x4]
8000a9ae:	91 1e       	st.w	r8[0x4],lr
8000a9b0:	72 2e       	ld.w	lr,r9[0x8]
8000a9b2:	91 2e       	st.w	r8[0x8],lr
8000a9b4:	72 39       	ld.w	r9,r9[0xc]
8000a9b6:	91 39       	st.w	r8[0xc],r9
8000a9b8:	f6 e8 00 10 	ld.d	r8,r11[16]
8000a9bc:	f4 e9 00 10 	st.d	r10[16],r8
8000a9c0:	76 68       	ld.w	r8,r11[0x18]
8000a9c2:	95 68       	st.w	r10[0x18],r8
8000a9c4:	20 7d       	sub	sp,28
8000a9c6:	1a 98       	mov	r8,sp
8000a9c8:	10 9a       	mov	r10,r8
8000a9ca:	ee cb 00 44 	sub	r11,r7,68
8000a9ce:	f4 c8 00 00 	sub	r8,r10,0
8000a9d2:	f6 c9 00 00 	sub	r9,r11,0
8000a9d6:	72 0e       	ld.w	lr,r9[0x0]
8000a9d8:	91 0e       	st.w	r8[0x0],lr
8000a9da:	72 1e       	ld.w	lr,r9[0x4]
8000a9dc:	91 1e       	st.w	r8[0x4],lr
8000a9de:	72 2e       	ld.w	lr,r9[0x8]
8000a9e0:	91 2e       	st.w	r8[0x8],lr
8000a9e2:	72 39       	ld.w	r9,r9[0xc]
8000a9e4:	91 39       	st.w	r8[0xc],r9
8000a9e6:	f6 e8 00 10 	ld.d	r8,r11[16]
8000a9ea:	f4 e9 00 10 	st.d	r10[16],r8
8000a9ee:	76 68       	ld.w	r8,r11[0x18]
8000a9f0:	95 68       	st.w	r10[0x18],r8
8000a9f2:	f0 16 00 73 	mcall	r6[460]
8000a9f6:	2f 2d       	sub	sp,-56
			
			//get delay of GPS measure
			//do prediction up to the corresponding delay
			
			e_kalman_update_position(X,local_coordinates.pos[X]);
8000a9f8:	ee f8 ff 8c 	ld.w	r8,r7[-116]
8000a9fc:	10 9c       	mov	r12,r8
8000a9fe:	f0 16 00 02 	mcall	r6[8]
8000aa02:	14 98       	mov	r8,r10
8000aa04:	16 99       	mov	r9,r11
8000aa06:	10 9a       	mov	r10,r8
8000aa08:	12 9b       	mov	r11,r9
8000aa0a:	30 0c       	mov	r12,0
8000aa0c:	f0 16 00 c3 	mcall	r6[780]
			e_kalman_update_position(Y,local_coordinates.pos[Y]);
8000aa10:	ee f8 ff 90 	ld.w	r8,r7[-112]
8000aa14:	10 9c       	mov	r12,r8
8000aa16:	f0 16 00 02 	mcall	r6[8]
8000aa1a:	14 98       	mov	r8,r10
8000aa1c:	16 99       	mov	r9,r11
8000aa1e:	10 9a       	mov	r10,r8
8000aa20:	12 9b       	mov	r11,r9
8000aa22:	30 1c       	mov	r12,1
8000aa24:	f0 16 00 c3 	mcall	r6[780]
			//e_kalman_update_position_hf(X,local_coordinates.pos[X]);
			//e_kalman_update_position_hf(Y,local_coordinates.pos[Y]);
			e_kalman_update_position(Z,local_coordinates.pos[Z]);
8000aa28:	ee f8 ff 94 	ld.w	r8,r7[-108]
8000aa2c:	10 9c       	mov	r12,r8
8000aa2e:	f0 16 00 02 	mcall	r6[8]
8000aa32:	14 98       	mov	r8,r10
8000aa34:	16 99       	mov	r9,r11
8000aa36:	10 9a       	mov	r10,r8
8000aa38:	12 9b       	mov	r11,r9
8000aa3a:	30 2c       	mov	r12,2
8000aa3c:	f0 16 00 c3 	mcall	r6[780]
			
			e_kalman_update_speed(X,centralData->GPS_data.northSpeed);
8000aa40:	ec f8 00 00 	ld.w	r8,r6[0]
8000aa44:	70 08       	ld.w	r8,r8[0x0]
8000aa46:	f0 f8 0b 28 	ld.w	r8,r8[2856]
8000aa4a:	10 9b       	mov	r11,r8
8000aa4c:	30 0c       	mov	r12,0
8000aa4e:	f0 16 00 9f 	mcall	r6[636]
			e_kalman_update_speed(Y,centralData->GPS_data.eastSpeed);
8000aa52:	ec f8 00 00 	ld.w	r8,r6[0]
8000aa56:	70 08       	ld.w	r8,r8[0x0]
8000aa58:	f0 f8 0b 2c 	ld.w	r8,r8[2860]
8000aa5c:	10 9b       	mov	r11,r8
8000aa5e:	30 1c       	mov	r12,1
8000aa60:	f0 16 00 9f 	mcall	r6[636]
			//e_kalman_update_speed_hf(X,centralData->GPS_data.northSpeed);
			//e_kalman_update_speed_hf(Y,centralData->GPS_data.eastSpeed);
			e_kalman_update_speed(Z,centralData->GPS_data.verticalSpeed);
8000aa64:	ec f8 00 00 	ld.w	r8,r6[0]
8000aa68:	70 08       	ld.w	r8,r8[0x0]
8000aa6a:	f0 f8 0b 30 	ld.w	r8,r8[2864]
8000aa6e:	10 9b       	mov	r11,r8
8000aa70:	30 2c       	mov	r12,2
8000aa72:	f0 16 00 9f 	mcall	r6[636]
		e_kalman_update_position(Z,baro->altitude,dt_baro);
		time_before_baro=get_millis();
		}	*/
		//}
	}
8000aa76:	2e 3d       	sub	sp,-116
8000aa78:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000aa7c:	80 00       	ld.sh	r0,r0[0x0]
8000aa7e:	a7 04       	ld.d	r4,r3

8000aa80 <scalar_product>:
	return out;
}


float static inline scalar_product(const float u[], const float v[])
{
8000aa80:	eb cd 40 80 	pushm	r7,lr
8000aa84:	1a 97       	mov	r7,sp
8000aa86:	20 3d       	sub	sp,12
8000aa88:	ef 4c ff f8 	st.w	r7[-8],r12
8000aa8c:	ef 4b ff f4 	st.w	r7[-12],r11
	float scp = (u[0]*v[0]+u[1]*v[1]+u[2]*v[2]);
8000aa90:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000aa94:	70 09       	ld.w	r9,r8[0x0]
8000aa96:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000aa9a:	70 08       	ld.w	r8,r8[0x0]
8000aa9c:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000aaa0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000aaa4:	2f c8       	sub	r8,-4
8000aaa6:	70 0a       	ld.w	r10,r8[0x0]
8000aaa8:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000aaac:	2f c8       	sub	r8,-4
8000aaae:	70 08       	ld.w	r8,r8[0x0]
8000aab0:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000aab4:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000aab8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000aabc:	2f 88       	sub	r8,-8
8000aabe:	70 0a       	ld.w	r10,r8[0x0]
8000aac0:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000aac4:	2f 88       	sub	r8,-8
8000aac6:	70 08       	ld.w	r8,r8[0x0]
8000aac8:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000aacc:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8000aad0:	ef 48 ff fc 	st.w	r7[-4],r8
	return scp;
8000aad4:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8000aad8:	10 9c       	mov	r12,r8
8000aada:	2f dd       	sub	sp,-12
8000aadc:	e3 cd 80 80 	ldm	sp++,r7,pc

8000aae0 <quat_multi>:
	out[2] = u[0] * v[1] - u[1] * v[0];
}


UQuat_t static inline quat_multi(const UQuat_t q1, const UQuat_t q2)
{
8000aae0:	eb cd 40 e8 	pushm	r3,r5-r7,lr
8000aae4:	1a 97       	mov	r7,sp
8000aae6:	20 7d       	sub	sp,28
8000aae8:	4b d6       	lddpc	r6,8000abdc <quat_multi+0xfc>
8000aaea:	1e 26       	rsub	r6,pc
8000aaec:	ee c8 ff ec 	sub	r8,r7,-20
8000aaf0:	18 95       	mov	r5,r12
	float tmp[3];
	UQuat_t out;
	tmp[0] = q1.v[1] * q2.v[2] - q1.v[2]*q2.v[1];
8000aaf2:	70 2a       	ld.w	r10,r8[0x8]
8000aaf4:	70 79       	ld.w	r9,r8[0x1c]
8000aaf6:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8000aafa:	70 3b       	ld.w	r11,r8[0xc]
8000aafc:	70 69       	ld.w	r9,r8[0x18]
8000aafe:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8000ab02:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8000ab06:	ef 49 ff f4 	st.w	r7[-12],r9
	tmp[1] = q1.v[2] * q2.v[0] - q1.v[0]*q2.v[2];
8000ab0a:	70 3a       	ld.w	r10,r8[0xc]
8000ab0c:	70 59       	ld.w	r9,r8[0x14]
8000ab0e:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8000ab12:	70 1b       	ld.w	r11,r8[0x4]
8000ab14:	70 79       	ld.w	r9,r8[0x1c]
8000ab16:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8000ab1a:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8000ab1e:	ef 49 ff f8 	st.w	r7[-8],r9
	tmp[2] = q1.v[0] * q2.v[1] - q1.v[1]*q2.v[0];
8000ab22:	70 1a       	ld.w	r10,r8[0x4]
8000ab24:	70 69       	ld.w	r9,r8[0x18]
8000ab26:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8000ab2a:	70 2b       	ld.w	r11,r8[0x8]
8000ab2c:	70 59       	ld.w	r9,r8[0x14]
8000ab2e:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8000ab32:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8000ab36:	ef 49 ff fc 	st.w	r7[-4],r9
	out.v[0] = q2.s*q1.v[0] + q1.s *q2.v[0] +tmp[0];
8000ab3a:	70 4a       	ld.w	r10,r8[0x10]
8000ab3c:	70 19       	ld.w	r9,r8[0x4]
8000ab3e:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8000ab42:	70 0b       	ld.w	r11,r8[0x0]
8000ab44:	70 59       	ld.w	r9,r8[0x14]
8000ab46:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8000ab4a:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
8000ab4e:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000ab52:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
8000ab56:	ef 49 ff e8 	st.w	r7[-24],r9
	out.v[1] = q2.s*q1.v[1] + q1.s *q2.v[1] +tmp[1];
8000ab5a:	70 4a       	ld.w	r10,r8[0x10]
8000ab5c:	70 29       	ld.w	r9,r8[0x8]
8000ab5e:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8000ab62:	70 0b       	ld.w	r11,r8[0x0]
8000ab64:	70 69       	ld.w	r9,r8[0x18]
8000ab66:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8000ab6a:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
8000ab6e:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000ab72:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
8000ab76:	ef 49 ff ec 	st.w	r7[-20],r9
	out.v[2] = q2.s*q1.v[2] + q1.s *q2.v[2] +tmp[2];
8000ab7a:	70 4a       	ld.w	r10,r8[0x10]
8000ab7c:	70 39       	ld.w	r9,r8[0xc]
8000ab7e:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8000ab82:	70 0b       	ld.w	r11,r8[0x0]
8000ab84:	70 79       	ld.w	r9,r8[0x1c]
8000ab86:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8000ab8a:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
8000ab8e:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000ab92:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
8000ab96:	ef 49 ff f0 	st.w	r7[-16],r9
	out.s= q1.s*q2.s - scalar_product(q1.v, q2.v);
8000ab9a:	70 0a       	ld.w	r10,r8[0x0]
8000ab9c:	70 49       	ld.w	r9,r8[0x10]
8000ab9e:	e5 a2 03 a9 	cop	cp0,cr3,cr10,cr9,0x44
8000aba2:	f0 c9 ff f0 	sub	r9,r8,-16
8000aba6:	2f c9       	sub	r9,-4
8000aba8:	2f c8       	sub	r8,-4
8000abaa:	12 9b       	mov	r11,r9
8000abac:	10 9c       	mov	r12,r8
8000abae:	c6 9f       	rcall	8000aa80 <scalar_product>
8000abb0:	18 98       	mov	r8,r12
8000abb2:	e5 a1 08 38 	cop	cp0,cr8,cr3,cr8,0x42
8000abb6:	ef 48 ff e4 	st.w	r7[-28],r8
	
	return out;
8000abba:	0a 98       	mov	r8,r5
8000abbc:	ee c9 00 1c 	sub	r9,r7,28
8000abc0:	20 08       	sub	r8,0
8000abc2:	20 09       	sub	r9,0
8000abc4:	72 0a       	ld.w	r10,r9[0x0]
8000abc6:	91 0a       	st.w	r8[0x0],r10
8000abc8:	72 1a       	ld.w	r10,r9[0x4]
8000abca:	91 1a       	st.w	r8[0x4],r10
8000abcc:	72 2a       	ld.w	r10,r9[0x8]
8000abce:	91 2a       	st.w	r8[0x8],r10
8000abd0:	72 39       	ld.w	r9,r9[0xc]
8000abd2:	91 39       	st.w	r8[0xc],r9
}
8000abd4:	0a 9c       	mov	r12,r5
8000abd6:	2f 9d       	sub	sp,-28
8000abd8:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
8000abdc:	80 00       	ld.sh	r0,r0[0x0]
8000abde:	a9 6e       	lsl	lr,0x8

8000abe0 <quat_inv>:

UQuat_t static inline quat_inv(const UQuat_t q)
{
8000abe0:	eb cd 40 80 	pushm	r7,lr
8000abe4:	1a 97       	mov	r7,sp
8000abe6:	20 5d       	sub	sp,20
8000abe8:	ee c9 ff f8 	sub	r9,r7,-8
8000abec:	18 9a       	mov	r10,r12
	int i;
	
	UQuat_t qinv;
	qinv.s = q.s;
8000abee:	72 08       	ld.w	r8,r9[0x0]
8000abf0:	ef 48 ff ec 	st.w	r7[-20],r8
	for (i=0;i<3;i++)
8000abf4:	30 08       	mov	r8,0
8000abf6:	ef 48 ff fc 	st.w	r7[-4],r8
8000abfa:	c1 58       	rjmp	8000ac24 <quat_inv+0x44>
	{
		qinv.v[i] = -q.v[i];
8000abfc:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ac00:	ee fb ff fc 	ld.w	r11,r7[-4]
8000ac04:	2f fb       	sub	r11,-1
8000ac06:	f2 0b 03 2b 	ld.w	r11,r9[r11<<0x2]
8000ac0a:	ee 1b 80 00 	eorh	r11,0x8000
8000ac0e:	2f f8       	sub	r8,-1
8000ac10:	a3 68       	lsl	r8,0x2
8000ac12:	ee 08 00 08 	add	r8,r7,r8
8000ac16:	f1 4b ff ec 	st.w	r8[-20],r11
{
	int i;
	
	UQuat_t qinv;
	qinv.s = q.s;
	for (i=0;i<3;i++)
8000ac1a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ac1e:	2f f8       	sub	r8,-1
8000ac20:	ef 48 ff fc 	st.w	r7[-4],r8
8000ac24:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ac28:	58 28       	cp.w	r8,2
8000ac2a:	fe 9a ff e9 	brle	8000abfc <quat_inv+0x1c>
	{
		qinv.v[i] = -q.v[i];
	}
	return qinv;
8000ac2e:	14 98       	mov	r8,r10
8000ac30:	ee c9 00 14 	sub	r9,r7,20
8000ac34:	20 08       	sub	r8,0
8000ac36:	20 09       	sub	r9,0
8000ac38:	72 0b       	ld.w	r11,r9[0x0]
8000ac3a:	91 0b       	st.w	r8[0x0],r11
8000ac3c:	72 1b       	ld.w	r11,r9[0x4]
8000ac3e:	91 1b       	st.w	r8[0x4],r11
8000ac40:	72 2b       	ld.w	r11,r9[0x8]
8000ac42:	91 2b       	st.w	r8[0x8],r11
8000ac44:	72 39       	ld.w	r9,r9[0xc]
8000ac46:	91 39       	st.w	r8[0xc],r9
}
8000ac48:	14 9c       	mov	r12,r10
8000ac4a:	2f bd       	sub	sp,-20
8000ac4c:	e3 cd 80 80 	ldm	sp++,r7,pc

8000ac50 <quat_global_to_local>:

UQuat_t static inline quat_global_to_local(const UQuat_t qe, const UQuat_t qvect)
{
8000ac50:	eb cd 40 e8 	pushm	r3,r5-r7,lr
8000ac54:	1a 97       	mov	r7,sp
8000ac56:	20 cd       	sub	sp,48
8000ac58:	4b c6       	lddpc	r6,8000ad48 <quat_global_to_local+0xf8>
8000ac5a:	1e 26       	rsub	r6,pc
8000ac5c:	ee c5 ff ec 	sub	r5,r7,-20
8000ac60:	18 93       	mov	r3,r12
	UQuat_t qinv, qtmp;
	
	qinv = quat_inv(qe);
8000ac62:	ee ca 00 10 	sub	r10,r7,16
8000ac66:	20 4d       	sub	sp,16
8000ac68:	1a 98       	mov	r8,sp
8000ac6a:	0a 99       	mov	r9,r5
8000ac6c:	20 08       	sub	r8,0
8000ac6e:	20 09       	sub	r9,0
8000ac70:	72 0b       	ld.w	r11,r9[0x0]
8000ac72:	91 0b       	st.w	r8[0x0],r11
8000ac74:	72 1b       	ld.w	r11,r9[0x4]
8000ac76:	91 1b       	st.w	r8[0x4],r11
8000ac78:	72 2b       	ld.w	r11,r9[0x8]
8000ac7a:	91 2b       	st.w	r8[0x8],r11
8000ac7c:	72 39       	ld.w	r9,r9[0xc]
8000ac7e:	91 39       	st.w	r8[0xc],r9
8000ac80:	14 9c       	mov	r12,r10
8000ac82:	ca ff       	rcall	8000abe0 <quat_inv>
8000ac84:	2f cd       	sub	sp,-16
	qtmp = quat_multi(qinv,qvect);
8000ac86:	ee ca 00 20 	sub	r10,r7,32
8000ac8a:	20 4d       	sub	sp,16
8000ac8c:	1a 98       	mov	r8,sp
8000ac8e:	ea c9 ff f0 	sub	r9,r5,-16
8000ac92:	20 08       	sub	r8,0
8000ac94:	20 09       	sub	r9,0
8000ac96:	72 0b       	ld.w	r11,r9[0x0]
8000ac98:	91 0b       	st.w	r8[0x0],r11
8000ac9a:	72 1b       	ld.w	r11,r9[0x4]
8000ac9c:	91 1b       	st.w	r8[0x4],r11
8000ac9e:	72 2b       	ld.w	r11,r9[0x8]
8000aca0:	91 2b       	st.w	r8[0x8],r11
8000aca2:	72 39       	ld.w	r9,r9[0xc]
8000aca4:	91 39       	st.w	r8[0xc],r9
8000aca6:	20 4d       	sub	sp,16
8000aca8:	1a 98       	mov	r8,sp
8000acaa:	ee c9 00 10 	sub	r9,r7,16
8000acae:	20 08       	sub	r8,0
8000acb0:	20 09       	sub	r9,0
8000acb2:	72 0b       	ld.w	r11,r9[0x0]
8000acb4:	91 0b       	st.w	r8[0x0],r11
8000acb6:	72 1b       	ld.w	r11,r9[0x4]
8000acb8:	91 1b       	st.w	r8[0x4],r11
8000acba:	72 2b       	ld.w	r11,r9[0x8]
8000acbc:	91 2b       	st.w	r8[0x8],r11
8000acbe:	72 39       	ld.w	r9,r9[0xc]
8000acc0:	91 39       	st.w	r8[0xc],r9
8000acc2:	14 9c       	mov	r12,r10
8000acc4:	c0 ef       	rcall	8000aae0 <quat_multi>
8000acc6:	2f 8d       	sub	sp,-32
	qtmp = quat_multi(qtmp,qe);
8000acc8:	ee ca 00 30 	sub	r10,r7,48
8000accc:	20 4d       	sub	sp,16
8000acce:	1a 98       	mov	r8,sp
8000acd0:	0a 99       	mov	r9,r5
8000acd2:	20 08       	sub	r8,0
8000acd4:	20 09       	sub	r9,0
8000acd6:	72 0b       	ld.w	r11,r9[0x0]
8000acd8:	91 0b       	st.w	r8[0x0],r11
8000acda:	72 1b       	ld.w	r11,r9[0x4]
8000acdc:	91 1b       	st.w	r8[0x4],r11
8000acde:	72 2b       	ld.w	r11,r9[0x8]
8000ace0:	91 2b       	st.w	r8[0x8],r11
8000ace2:	72 39       	ld.w	r9,r9[0xc]
8000ace4:	91 39       	st.w	r8[0xc],r9
8000ace6:	20 4d       	sub	sp,16
8000ace8:	1a 98       	mov	r8,sp
8000acea:	ee c9 00 20 	sub	r9,r7,32
8000acee:	20 08       	sub	r8,0
8000acf0:	20 09       	sub	r9,0
8000acf2:	72 0b       	ld.w	r11,r9[0x0]
8000acf4:	91 0b       	st.w	r8[0x0],r11
8000acf6:	72 1b       	ld.w	r11,r9[0x4]
8000acf8:	91 1b       	st.w	r8[0x4],r11
8000acfa:	72 2b       	ld.w	r11,r9[0x8]
8000acfc:	91 2b       	st.w	r8[0x8],r11
8000acfe:	72 39       	ld.w	r9,r9[0xc]
8000ad00:	91 39       	st.w	r8[0xc],r9
8000ad02:	14 9c       	mov	r12,r10
8000ad04:	ce ee       	rcall	8000aae0 <quat_multi>
8000ad06:	2f 8d       	sub	sp,-32
8000ad08:	ee c8 00 20 	sub	r8,r7,32
8000ad0c:	ee c9 00 30 	sub	r9,r7,48
8000ad10:	20 08       	sub	r8,0
8000ad12:	20 09       	sub	r9,0
8000ad14:	72 0a       	ld.w	r10,r9[0x0]
8000ad16:	91 0a       	st.w	r8[0x0],r10
8000ad18:	72 1a       	ld.w	r10,r9[0x4]
8000ad1a:	91 1a       	st.w	r8[0x4],r10
8000ad1c:	72 2a       	ld.w	r10,r9[0x8]
8000ad1e:	91 2a       	st.w	r8[0x8],r10
8000ad20:	72 39       	ld.w	r9,r9[0xc]
8000ad22:	91 39       	st.w	r8[0xc],r9

	return qtmp;
8000ad24:	06 98       	mov	r8,r3
8000ad26:	ee c9 00 20 	sub	r9,r7,32
8000ad2a:	20 08       	sub	r8,0
8000ad2c:	20 09       	sub	r9,0
8000ad2e:	72 0a       	ld.w	r10,r9[0x0]
8000ad30:	91 0a       	st.w	r8[0x0],r10
8000ad32:	72 1a       	ld.w	r10,r9[0x4]
8000ad34:	91 1a       	st.w	r8[0x4],r10
8000ad36:	72 2a       	ld.w	r10,r9[0x8]
8000ad38:	91 2a       	st.w	r8[0x8],r10
8000ad3a:	72 39       	ld.w	r9,r9[0xc]
8000ad3c:	91 39       	st.w	r8[0xc],r9
}
8000ad3e:	06 9c       	mov	r12,r3
8000ad40:	2f 4d       	sub	sp,-48
8000ad42:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
8000ad46:	00 00       	add	r0,r0
8000ad48:	80 00       	ld.sh	r0,r0[0x0]
8000ad4a:	aa de       	st.b	r5[0x5],lr

8000ad4c <quat_local_to_global>:

UQuat_t static inline quat_local_to_global(const UQuat_t qe, const UQuat_t qvect)
{
8000ad4c:	eb cd 40 e8 	pushm	r3,r5-r7,lr
8000ad50:	1a 97       	mov	r7,sp
8000ad52:	20 cd       	sub	sp,48
8000ad54:	4b c6       	lddpc	r6,8000ae44 <quat_local_to_global+0xf8>
8000ad56:	1e 26       	rsub	r6,pc
8000ad58:	ee c5 ff ec 	sub	r5,r7,-20
8000ad5c:	18 93       	mov	r3,r12
	UQuat_t qinv, qtmp;
	
	qinv = quat_inv(qe);
8000ad5e:	ee ca 00 10 	sub	r10,r7,16
8000ad62:	20 4d       	sub	sp,16
8000ad64:	1a 98       	mov	r8,sp
8000ad66:	0a 99       	mov	r9,r5
8000ad68:	20 08       	sub	r8,0
8000ad6a:	20 09       	sub	r9,0
8000ad6c:	72 0b       	ld.w	r11,r9[0x0]
8000ad6e:	91 0b       	st.w	r8[0x0],r11
8000ad70:	72 1b       	ld.w	r11,r9[0x4]
8000ad72:	91 1b       	st.w	r8[0x4],r11
8000ad74:	72 2b       	ld.w	r11,r9[0x8]
8000ad76:	91 2b       	st.w	r8[0x8],r11
8000ad78:	72 39       	ld.w	r9,r9[0xc]
8000ad7a:	91 39       	st.w	r8[0xc],r9
8000ad7c:	14 9c       	mov	r12,r10
8000ad7e:	c3 1f       	rcall	8000abe0 <quat_inv>
8000ad80:	2f cd       	sub	sp,-16
	qtmp = quat_multi(qe, qvect);
8000ad82:	ee ca 00 20 	sub	r10,r7,32
8000ad86:	20 4d       	sub	sp,16
8000ad88:	1a 98       	mov	r8,sp
8000ad8a:	ea c9 ff f0 	sub	r9,r5,-16
8000ad8e:	20 08       	sub	r8,0
8000ad90:	20 09       	sub	r9,0
8000ad92:	72 0b       	ld.w	r11,r9[0x0]
8000ad94:	91 0b       	st.w	r8[0x0],r11
8000ad96:	72 1b       	ld.w	r11,r9[0x4]
8000ad98:	91 1b       	st.w	r8[0x4],r11
8000ad9a:	72 2b       	ld.w	r11,r9[0x8]
8000ad9c:	91 2b       	st.w	r8[0x8],r11
8000ad9e:	72 39       	ld.w	r9,r9[0xc]
8000ada0:	91 39       	st.w	r8[0xc],r9
8000ada2:	20 4d       	sub	sp,16
8000ada4:	1a 98       	mov	r8,sp
8000ada6:	0a 99       	mov	r9,r5
8000ada8:	20 08       	sub	r8,0
8000adaa:	20 09       	sub	r9,0
8000adac:	72 0b       	ld.w	r11,r9[0x0]
8000adae:	91 0b       	st.w	r8[0x0],r11
8000adb0:	72 1b       	ld.w	r11,r9[0x4]
8000adb2:	91 1b       	st.w	r8[0x4],r11
8000adb4:	72 2b       	ld.w	r11,r9[0x8]
8000adb6:	91 2b       	st.w	r8[0x8],r11
8000adb8:	72 39       	ld.w	r9,r9[0xc]
8000adba:	91 39       	st.w	r8[0xc],r9
8000adbc:	14 9c       	mov	r12,r10
8000adbe:	c9 1e       	rcall	8000aae0 <quat_multi>
8000adc0:	2f 8d       	sub	sp,-32
	qtmp = quat_multi(qtmp, qinv);
8000adc2:	ee ca 00 30 	sub	r10,r7,48
8000adc6:	20 4d       	sub	sp,16
8000adc8:	1a 98       	mov	r8,sp
8000adca:	ee c9 00 10 	sub	r9,r7,16
8000adce:	20 08       	sub	r8,0
8000add0:	20 09       	sub	r9,0
8000add2:	72 0b       	ld.w	r11,r9[0x0]
8000add4:	91 0b       	st.w	r8[0x0],r11
8000add6:	72 1b       	ld.w	r11,r9[0x4]
8000add8:	91 1b       	st.w	r8[0x4],r11
8000adda:	72 2b       	ld.w	r11,r9[0x8]
8000addc:	91 2b       	st.w	r8[0x8],r11
8000adde:	72 39       	ld.w	r9,r9[0xc]
8000ade0:	91 39       	st.w	r8[0xc],r9
8000ade2:	20 4d       	sub	sp,16
8000ade4:	1a 98       	mov	r8,sp
8000ade6:	ee c9 00 20 	sub	r9,r7,32
8000adea:	20 08       	sub	r8,0
8000adec:	20 09       	sub	r9,0
8000adee:	72 0b       	ld.w	r11,r9[0x0]
8000adf0:	91 0b       	st.w	r8[0x0],r11
8000adf2:	72 1b       	ld.w	r11,r9[0x4]
8000adf4:	91 1b       	st.w	r8[0x4],r11
8000adf6:	72 2b       	ld.w	r11,r9[0x8]
8000adf8:	91 2b       	st.w	r8[0x8],r11
8000adfa:	72 39       	ld.w	r9,r9[0xc]
8000adfc:	91 39       	st.w	r8[0xc],r9
8000adfe:	14 9c       	mov	r12,r10
8000ae00:	c7 0e       	rcall	8000aae0 <quat_multi>
8000ae02:	2f 8d       	sub	sp,-32
8000ae04:	ee c8 00 20 	sub	r8,r7,32
8000ae08:	ee c9 00 30 	sub	r9,r7,48
8000ae0c:	20 08       	sub	r8,0
8000ae0e:	20 09       	sub	r9,0
8000ae10:	72 0a       	ld.w	r10,r9[0x0]
8000ae12:	91 0a       	st.w	r8[0x0],r10
8000ae14:	72 1a       	ld.w	r10,r9[0x4]
8000ae16:	91 1a       	st.w	r8[0x4],r10
8000ae18:	72 2a       	ld.w	r10,r9[0x8]
8000ae1a:	91 2a       	st.w	r8[0x8],r10
8000ae1c:	72 39       	ld.w	r9,r9[0xc]
8000ae1e:	91 39       	st.w	r8[0xc],r9
	
	return qtmp;
8000ae20:	06 98       	mov	r8,r3
8000ae22:	ee c9 00 20 	sub	r9,r7,32
8000ae26:	20 08       	sub	r8,0
8000ae28:	20 09       	sub	r9,0
8000ae2a:	72 0a       	ld.w	r10,r9[0x0]
8000ae2c:	91 0a       	st.w	r8[0x0],r10
8000ae2e:	72 1a       	ld.w	r10,r9[0x4]
8000ae30:	91 1a       	st.w	r8[0x4],r10
8000ae32:	72 2a       	ld.w	r10,r9[0x8]
8000ae34:	91 2a       	st.w	r8[0x8],r10
8000ae36:	72 39       	ld.w	r9,r9[0xc]
8000ae38:	91 39       	st.w	r8[0xc],r9
}
8000ae3a:	06 9c       	mov	r12,r3
8000ae3c:	2f 4d       	sub	sp,-48
8000ae3e:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
8000ae42:	00 00       	add	r0,r0
8000ae44:	80 00       	ld.sh	r0,r0[0x0]
8000ae46:	ab da       	cbr	r10,0xb

8000ae48 <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
8000ae48:	eb cd 40 c0 	pushm	r6-r7,lr
8000ae4c:	1a 97       	mov	r7,sp
8000ae4e:	20 6d       	sub	sp,24
8000ae50:	49 e6       	lddpc	r6,8000aec8 <interpolate+0x80>
8000ae52:	1e 26       	rsub	r6,pc
8000ae54:	ef 4c ff f8 	st.w	r7[-8],r12
8000ae58:	ef 4b ff f4 	st.w	r7[-12],r11
8000ae5c:	ef 4a ff f0 	st.w	r7[-16],r10
8000ae60:	ef 49 ff ec 	st.w	r7[-20],r9
8000ae64:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
8000ae68:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000ae6c:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000ae70:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
8000ae74:	c0 41       	brne	8000ae7c <interpolate+0x34>
	{
		return y1;
8000ae76:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000ae7a:	c2 38       	rjmp	8000aec0 <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
8000ae7c:	ee f9 ff e8 	ld.w	r9,r7[-24]
8000ae80:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000ae84:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8000ae88:	ee fa ff f8 	ld.w	r10,r7[-8]
8000ae8c:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000ae90:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
8000ae94:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8000ae98:	ee fa ff f0 	ld.w	r10,r7[-16]
8000ae9c:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000aea0:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8000aea4:	12 9b       	mov	r11,r9
8000aea6:	10 9c       	mov	r12,r8
8000aea8:	f0 16 00 08 	mcall	r6[32]
8000aeac:	18 98       	mov	r8,r12
8000aeae:	10 99       	mov	r9,r8
8000aeb0:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000aeb4:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8000aeb8:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
8000aebc:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
8000aec0:	10 9c       	mov	r12,r8
8000aec2:	2f ad       	sub	sp,-24
8000aec4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000aec8:	80 00       	ld.sh	r0,r0[0x0]
8000aeca:	ac d6       	st.b	r6[0x5],r6

8000aecc <init_pos_integration>:
void init_pos_gps(position_estimator_t *pos_est, gps_Data_type *gps);
void init_barometer_offset(position_estimator_t *pos_est, pressure_data *barometer);


void init_pos_integration(position_estimator_t *pos_est, pressure_data *barometer, gps_Data_type *gps)
{
8000aecc:	eb cd 40 c0 	pushm	r6-r7,lr
8000aed0:	1a 97       	mov	r7,sp
8000aed2:	20 3d       	sub	sp,12
8000aed4:	4a 66       	lddpc	r6,8000af6c <init_pos_integration+0xa0>
8000aed6:	1e 26       	rsub	r6,pc
8000aed8:	ef 4c ff fc 	st.w	r7[-4],r12
8000aedc:	ef 4b ff f8 	st.w	r7[-8],r11
8000aee0:	ef 4a ff f4 	st.w	r7[-12],r10
	//centralData = get_central_data();
	pos_est->init_gps_position = false;
8000aee4:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000aee8:	30 08       	mov	r8,0
8000aeea:	f3 68 00 28 	st.b	r9[40],r8
	pos_est->init_barometer=false;
8000aeee:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000aef2:	30 08       	mov	r8,0
8000aef4:	f3 68 00 29 	st.b	r9[41],r8
	pos_est->timeLastGpsMsg = 0;
8000aef8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000aefc:	30 09       	mov	r9,0
8000aefe:	91 89       	st.w	r8[0x20],r9
	pos_est->timeLastBarometerMsg=0;
8000af00:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000af04:	30 09       	mov	r9,0
8000af06:	91 99       	st.w	r8[0x24],r9
	
	pos_est->kp_pos[0] = 2.0;
8000af08:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000af0c:	fc 19 40 00 	movh	r9,0x4000
8000af10:	91 39       	st.w	r8[0xc],r9
	pos_est->kp_pos[1] = 2.0;
8000af12:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000af16:	fc 19 40 00 	movh	r9,0x4000
8000af1a:	91 49       	st.w	r8[0x10],r9
	pos_est->kp_pos[2] = 1.0;
8000af1c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000af20:	fc 19 3f 80 	movh	r9,0x3f80
8000af24:	91 59       	st.w	r8[0x14],r9
	
	pos_est->kp_vel[0] = 1.0;
8000af26:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000af2a:	fc 19 3f 80 	movh	r9,0x3f80
8000af2e:	91 09       	st.w	r8[0x0],r9
	pos_est->kp_vel[1] = 1.0;
8000af30:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000af34:	fc 19 3f 80 	movh	r9,0x3f80
8000af38:	91 19       	st.w	r8[0x4],r9
	pos_est->kp_vel[2] = 0.5;
8000af3a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000af3e:	fc 19 3f 00 	movh	r9,0x3f00
8000af42:	91 29       	st.w	r8[0x8],r9
	
	pos_est->kp_alt=2.0;
8000af44:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000af48:	fc 19 40 00 	movh	r9,0x4000
8000af4c:	91 69       	st.w	r8[0x18],r9
	pos_est->kp_vel_baro=1.0;
8000af4e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000af52:	fc 19 3f 80 	movh	r9,0x3f80
8000af56:	91 79       	st.w	r8[0x1c],r9
	
	init_pos_gps(pos_est, gps);
8000af58:	ee fb ff f4 	ld.w	r11,r7[-12]
8000af5c:	ee fc ff fc 	ld.w	r12,r7[-4]
8000af60:	f0 16 00 dc 	mcall	r6[880]
}
8000af64:	2f dd       	sub	sp,-12
8000af66:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000af6a:	00 00       	add	r0,r0
8000af6c:	80 00       	ld.sh	r0,r0[0x0]
8000af6e:	ad 5a       	asr	r10,0xd
8000af70:	47 50       	lddsp	r0,sp[0x1d4]
8000af72:	53 20       	stdsp	sp[0xc8],r0
8000af74:	70 6f       	ld.w	pc,r8[0x18]
8000af76:	73 69       	ld.w	r9,r9[0x58]
8000af78:	74 69       	ld.w	r9,r10[0x18]
8000af7a:	6f 6e       	ld.w	lr,r7[0x58]
8000af7c:	20 69       	sub	r9,6
8000af7e:	6e 69       	ld.w	r9,r7[0x18]
8000af80:	74 69       	ld.w	r9,r10[0x18]
8000af82:	61 6c       	ld.w	r12,r0[0x58]
8000af84:	69 7a       	ld.w	r10,r4[0x5c]
8000af86:	65 64       	ld.w	r4,r2[0x58]
8000af88:	21 0a       	sub	r10,16
	...

8000af8c <init_pos_gps>:

void init_pos_gps(position_estimator_t *pos_est, gps_Data_type *gps)
{
8000af8c:	eb cd 40 c0 	pushm	r6-r7,lr
8000af90:	1a 97       	mov	r7,sp
8000af92:	20 3d       	sub	sp,12
8000af94:	4d 16       	lddpc	r6,8000b0d8 <init_pos_gps+0x14c>
8000af96:	1e 26       	rsub	r6,pc
8000af98:	ef 4c ff f8 	st.w	r7[-8],r12
8000af9c:	ef 4b ff f4 	st.w	r7[-12],r11
	int i;
	
	if (newValidGpsMsg(&pos_est->timeLastGpsMsg) && (!(pos_est->init_gps_position)))
8000afa0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000afa4:	2e 08       	sub	r8,-32
8000afa6:	10 9c       	mov	r12,r8
8000afa8:	f0 16 00 8b 	mcall	r6[556]
8000afac:	18 98       	mov	r8,r12
8000afae:	58 08       	cp.w	r8,0
8000afb0:	e0 80 00 91 	breq	8000b0d2 <init_pos_gps+0x146>
8000afb4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000afb8:	f1 38 00 28 	ld.ub	r8,r8[40]
8000afbc:	ec 18 00 01 	eorl	r8,0x1
8000afc0:	5c 58       	castu.b	r8
8000afc2:	e0 80 00 88 	breq	8000b0d2 <init_pos_gps+0x146>
	{
		pos_est->init_gps_position = true;
8000afc6:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000afca:	30 18       	mov	r8,1
8000afcc:	f3 68 00 28 	st.b	r9[40],r8
		
		pos_est->localPosition.origin.longitude = gps->longitude;
8000afd0:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000afd4:	f0 e8 00 08 	ld.d	r8,r8[8]
8000afd8:	ee fa ff f8 	ld.w	r10,r7[-8]
8000afdc:	f4 e9 00 70 	st.d	r10[112],r8
		pos_est->localPosition.origin.latitude = gps->latitude;
8000afe0:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000afe4:	f0 e8 00 00 	ld.d	r8,r8[0]
8000afe8:	ee fa ff f8 	ld.w	r10,r7[-8]
8000afec:	f4 e9 00 78 	st.d	r10[120],r8
		pos_est->localPosition.origin.altitude = gps->altitude;
8000aff0:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000aff4:	70 49       	ld.w	r9,r8[0x10]
8000aff6:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000affa:	f1 49 00 80 	st.w	r8[128],r9
		pos_est->localPosition.timestamp_ms=gps->timeLastMsg;
8000affe:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b002:	71 19       	ld.w	r9,r8[0x44]
8000b004:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b008:	f1 49 00 8c 	st.w	r8[140],r9

		pos_est->lastGpsPos=pos_est->localPosition;
8000b00c:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000b010:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b014:	f2 cb ff 70 	sub	r11,r9,-144
8000b018:	f0 ca ff a0 	sub	r10,r8,-96
8000b01c:	f6 c8 00 00 	sub	r8,r11,0
8000b020:	f4 c9 00 00 	sub	r9,r10,0
8000b024:	72 0c       	ld.w	r12,r9[0x0]
8000b026:	91 0c       	st.w	r8[0x0],r12
8000b028:	72 1c       	ld.w	r12,r9[0x4]
8000b02a:	91 1c       	st.w	r8[0x4],r12
8000b02c:	72 2c       	ld.w	r12,r9[0x8]
8000b02e:	91 2c       	st.w	r8[0x8],r12
8000b030:	72 39       	ld.w	r9,r9[0xc]
8000b032:	91 39       	st.w	r8[0xc],r9
8000b034:	f6 c8 ff f0 	sub	r8,r11,-16
8000b038:	f4 c9 ff f0 	sub	r9,r10,-16
8000b03c:	72 0c       	ld.w	r12,r9[0x0]
8000b03e:	91 0c       	st.w	r8[0x0],r12
8000b040:	72 1c       	ld.w	r12,r9[0x4]
8000b042:	91 1c       	st.w	r8[0x4],r12
8000b044:	72 2c       	ld.w	r12,r9[0x8]
8000b046:	91 2c       	st.w	r8[0x8],r12
8000b048:	72 39       	ld.w	r9,r9[0xc]
8000b04a:	91 39       	st.w	r8[0xc],r9
8000b04c:	f6 c8 ff e0 	sub	r8,r11,-32
8000b050:	f4 c9 ff e0 	sub	r9,r10,-32
8000b054:	72 0a       	ld.w	r10,r9[0x0]
8000b056:	91 0a       	st.w	r8[0x0],r10
8000b058:	72 1a       	ld.w	r10,r9[0x4]
8000b05a:	91 1a       	st.w	r8[0x4],r10
8000b05c:	72 2a       	ld.w	r10,r9[0x8]
8000b05e:	91 2a       	st.w	r8[0x8],r10
8000b060:	72 39       	ld.w	r9,r9[0xc]
8000b062:	91 39       	st.w	r8[0xc],r9
		
		
		pos_est->last_alt=0;
8000b064:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b068:	30 09       	mov	r9,0
8000b06a:	f1 49 00 50 	st.w	r8[80],r9
		for(i=0;i<3;i++)
8000b06e:	30 08       	mov	r8,0
8000b070:	ef 48 ff fc 	st.w	r7[-4],r8
8000b074:	c2 68       	rjmp	8000b0c0 <init_pos_gps+0x134>
		{
			pos_est->pos_correction[i]=0.0;
8000b076:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000b07a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b07e:	2e f9       	sub	r9,-17
8000b080:	30 0a       	mov	r10,0
8000b082:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
			pos_est->last_vel[i]=0.0;
8000b086:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000b08a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b08e:	2e b9       	sub	r9,-21
8000b090:	30 0a       	mov	r10,0
8000b092:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
			pos_est->localPosition.pos[i] = 0.0;
8000b096:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000b09a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b09e:	2e 89       	sub	r9,-24
8000b0a0:	30 0a       	mov	r10,0
8000b0a2:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
			pos_est->vel[i]=0.0;
8000b0a6:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000b0aa:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b0ae:	2f 29       	sub	r9,-14
8000b0b0:	30 0a       	mov	r10,0
8000b0b2:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10

		pos_est->lastGpsPos=pos_est->localPosition;
		
		
		pos_est->last_alt=0;
		for(i=0;i<3;i++)
8000b0b6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b0ba:	2f f8       	sub	r8,-1
8000b0bc:	ef 48 ff fc 	st.w	r7[-4],r8
8000b0c0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b0c4:	58 28       	cp.w	r8,2
8000b0c6:	fe 9a ff d8 	brle	8000b076 <init_pos_gps+0xea>
			pos_est->last_vel[i]=0.0;
			pos_est->localPosition.pos[i] = 0.0;
			pos_est->vel[i]=0.0;
		}
		
		dbg_print("GPS position initialized!\n");
8000b0ca:	fe cc 01 5a 	sub	r12,pc,346
8000b0ce:	f0 16 00 01 	mcall	r6[4]
	}
}
8000b0d2:	2f dd       	sub	sp,-12
8000b0d4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000b0d8:	80 00       	ld.sh	r0,r0[0x0]
8000b0da:	ae 1a       	st.h	r7[0x2],r10
8000b0dc:	4f 66       	lddpc	r6,8000b2b4 <position_reset_home_altitude+0xac>
8000b0de:	66 73       	ld.w	r3,r3[0x1c]
8000b0e0:	65 74       	ld.w	r4,r2[0x5c]
8000b0e2:	20 6f       	sub	pc,6
8000b0e4:	66 20       	ld.w	r0,r3[0x8]
8000b0e6:	74 68       	ld.w	r8,r10[0x18]
8000b0e8:	65 20       	ld.w	r0,r2[0x48]
8000b0ea:	62 61       	ld.w	r1,r1[0x18]
8000b0ec:	72 6f       	ld.w	pc,r9[0x18]
8000b0ee:	6d 65       	ld.w	r5,r6[0x58]
8000b0f0:	74 65       	ld.w	r5,r10[0x18]
8000b0f2:	72 20       	ld.w	r0,r9[0x8]
8000b0f4:	73 65       	ld.w	r5,r9[0x58]
8000b0f6:	74 20       	ld.w	r0,r10[0x8]
8000b0f8:	74 6f       	ld.w	pc,r10[0x18]
8000b0fa:	20 74       	sub	r4,7
8000b0fc:	68 65       	ld.w	r5,r4[0x18]
8000b0fe:	20 47       	sub	r7,4
8000b100:	50 53       	stdsp	sp[0x14],r3
8000b102:	20 61       	sub	r1,6
8000b104:	6c 74       	ld.w	r4,r6[0x1c]
8000b106:	69 74       	ld.w	r4,r4[0x5c]
8000b108:	75 64       	ld.w	r4,r10[0x58]
8000b10a:	65 2c       	ld.w	r12,r2[0x48]
8000b10c:	20 6f       	sub	pc,6
8000b10e:	66 66       	ld.w	r6,r3[0x18]
8000b110:	73 65       	ld.w	r5,r9[0x58]
8000b112:	74 20       	ld.w	r0,r10[0x8]
8000b114:	76 61       	ld.w	r1,r11[0x18]
8000b116:	6c 75       	ld.w	r5,r6[0x1c]
8000b118:	65 20       	ld.w	r0,r2[0x48]
8000b11a:	6f 66       	ld.w	r6,r7[0x58]
8000b11c:	3a 00       	mov	r0,-96
8000b11e:	00 00       	add	r0,r0
8000b120:	20 3d       	sub	sp,12
8000b122:	20 2d       	sub	sp,8
8000b124:	00 00       	add	r0,r0
8000b126:	00 00       	add	r0,r0
8000b128:	20 2d       	sub	sp,8
8000b12a:	20 00       	sub	r0,0
8000b12c:	20 2b       	sub	r11,2
8000b12e:	20 00       	sub	r0,0
8000b130:	0a 00       	add	r0,r5

8000b132 <init_barometer_offset>:

void init_barometer_offset(position_estimator_t *pos_est, pressure_data *barometer)
{
8000b132:	eb cd 40 c0 	pushm	r6-r7,lr
8000b136:	1a 97       	mov	r7,sp
8000b138:	20 3d       	sub	sp,12
8000b13a:	4b 36       	lddpc	r6,8000b204 <init_barometer_offset+0xd2>
8000b13c:	1e 26       	rsub	r6,pc
8000b13e:	ef 4c ff f8 	st.w	r7[-8],r12
8000b142:	ef 4b ff f4 	st.w	r7[-12],r11
	bool boolNewBaro = newValidBarometer(&pos_est->timeLastBarometerMsg);
8000b146:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b14a:	2d c8       	sub	r8,-36
8000b14c:	10 9c       	mov	r12,r8
8000b14e:	f0 16 00 dd 	mcall	r6[884]
8000b152:	18 98       	mov	r8,r12
8000b154:	ef 68 ff ff 	st.b	r7[-1],r8

		
	//if ((centralData->init_gps_position)&&(boolNewBaro))
	if ((boolNewBaro))
8000b158:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000b15c:	30 08       	mov	r8,0
8000b15e:	f0 09 18 00 	cp.b	r9,r8
8000b162:	c4 e0       	breq	8000b1fe <init_barometer_offset+0xcc>
	{
		
		barometer->altitude_offset = -(barometer->altitude - pos_est->localPosition.origin.altitude);
8000b164:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b168:	70 79       	ld.w	r9,r8[0x1c]
8000b16a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b16e:	f0 f8 00 80 	ld.w	r8,r8[128]
8000b172:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8000b176:	10 99       	mov	r9,r8
8000b178:	ee 19 80 00 	eorh	r9,0x8000
8000b17c:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b180:	91 89       	st.w	r8[0x20],r9
		//barometer->altitude_offset = -barometer->altitude - pos_est->localPosition.pos[2] + pos_est->localPosition.origin.altitude;
		pos_est->init_barometer = true;
8000b182:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000b186:	30 18       	mov	r8,1
8000b188:	f3 68 00 29 	st.b	r9[41],r8
		
		dbg_print("Offset of the barometer set to the GPS altitude, offset value of:");
8000b18c:	fe cc 00 b0 	sub	r12,pc,176
8000b190:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(barometer->altitude_offset,10);
8000b194:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b198:	70 88       	ld.w	r8,r8[0x20]
8000b19a:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000b19e:	30 ab       	mov	r11,10
8000b1a0:	10 9c       	mov	r12,r8
8000b1a2:	f0 16 00 04 	mcall	r6[16]
		dbg_print(" = -");
8000b1a6:	fe cc 00 86 	sub	r12,pc,134
8000b1aa:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(barometer->altitude,10);
8000b1ae:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b1b2:	70 78       	ld.w	r8,r8[0x1c]
8000b1b4:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000b1b8:	30 ab       	mov	r11,10
8000b1ba:	10 9c       	mov	r12,r8
8000b1bc:	f0 16 00 04 	mcall	r6[16]
		dbg_print(" - ");
8000b1c0:	fe cc 00 98 	sub	r12,pc,152
8000b1c4:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(pos_est->localPosition.pos[2],10);
8000b1c8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b1cc:	71 a8       	ld.w	r8,r8[0x68]
8000b1ce:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000b1d2:	30 ab       	mov	r11,10
8000b1d4:	10 9c       	mov	r12,r8
8000b1d6:	f0 16 00 04 	mcall	r6[16]
		dbg_print(" + ");
8000b1da:	fe cc 00 ae 	sub	r12,pc,174
8000b1de:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(pos_est->localPosition.origin.altitude,10);
8000b1e2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b1e6:	f0 f8 00 80 	ld.w	r8,r8[128]
8000b1ea:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000b1ee:	30 ab       	mov	r11,10
8000b1f0:	10 9c       	mov	r12,r8
8000b1f2:	f0 16 00 04 	mcall	r6[16]
		dbg_print("\n");
8000b1f6:	fe cc 00 c6 	sub	r12,pc,198
8000b1fa:	f0 16 00 01 	mcall	r6[4]
	}
}
8000b1fe:	2f dd       	sub	sp,-12
8000b200:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000b204:	80 00       	ld.sh	r0,r0[0x0]
8000b206:	af c0       	cbr	r0,0xe

8000b208 <position_reset_home_altitude>:

void position_reset_home_altitude(position_estimator_t *pos_est, pressure_data *barometer, gps_Data_type *gps) {
8000b208:	eb cd 40 c0 	pushm	r6-r7,lr
8000b20c:	1a 97       	mov	r7,sp
8000b20e:	20 4d       	sub	sp,16
8000b210:	4f 06       	lddpc	r6,8000b3d0 <position_reset_home_altitude+0x1c8>
8000b212:	1e 26       	rsub	r6,pc
8000b214:	ef 4c ff f8 	st.w	r7[-8],r12
8000b218:	ef 4b ff f4 	st.w	r7[-12],r11
8000b21c:	ef 4a ff f0 	st.w	r7[-16],r10
		int i;
		// reset origin to position where quad is armed if we have GPS
		if (pos_est->init_gps_position) {
8000b220:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b224:	f1 38 00 28 	ld.ub	r8,r8[40]
8000b228:	58 08       	cp.w	r8,0
8000b22a:	c4 b0       	breq	8000b2c0 <position_reset_home_altitude+0xb8>
			pos_est->localPosition.origin.longitude = gps->longitude;
8000b22c:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000b230:	f0 e8 00 08 	ld.d	r8,r8[8]
8000b234:	ee fa ff f8 	ld.w	r10,r7[-8]
8000b238:	f4 e9 00 70 	st.d	r10[112],r8
			pos_est->localPosition.origin.latitude = gps->latitude;
8000b23c:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000b240:	f0 e8 00 00 	ld.d	r8,r8[0]
8000b244:	ee fa ff f8 	ld.w	r10,r7[-8]
8000b248:	f4 e9 00 78 	st.d	r10[120],r8
			pos_est->localPosition.origin.altitude = gps->altitude;
8000b24c:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000b250:	70 49       	ld.w	r9,r8[0x10]
8000b252:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b256:	f1 49 00 80 	st.w	r8[128],r9
			pos_est->localPosition.timestamp_ms=gps->timeLastMsg;
8000b25a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000b25e:	71 19       	ld.w	r9,r8[0x44]
8000b260:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b264:	f1 49 00 8c 	st.w	r8[140],r9

			pos_est->lastGpsPos=pos_est->localPosition;
8000b268:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000b26c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b270:	f2 cb ff 70 	sub	r11,r9,-144
8000b274:	f0 ca ff a0 	sub	r10,r8,-96
8000b278:	f6 c8 00 00 	sub	r8,r11,0
8000b27c:	f4 c9 00 00 	sub	r9,r10,0
8000b280:	72 0c       	ld.w	r12,r9[0x0]
8000b282:	91 0c       	st.w	r8[0x0],r12
8000b284:	72 1c       	ld.w	r12,r9[0x4]
8000b286:	91 1c       	st.w	r8[0x4],r12
8000b288:	72 2c       	ld.w	r12,r9[0x8]
8000b28a:	91 2c       	st.w	r8[0x8],r12
8000b28c:	72 39       	ld.w	r9,r9[0xc]
8000b28e:	91 39       	st.w	r8[0xc],r9
8000b290:	f6 c8 ff f0 	sub	r8,r11,-16
8000b294:	f4 c9 ff f0 	sub	r9,r10,-16
8000b298:	72 0c       	ld.w	r12,r9[0x0]
8000b29a:	91 0c       	st.w	r8[0x0],r12
8000b29c:	72 1c       	ld.w	r12,r9[0x4]
8000b29e:	91 1c       	st.w	r8[0x4],r12
8000b2a0:	72 2c       	ld.w	r12,r9[0x8]
8000b2a2:	91 2c       	st.w	r8[0x8],r12
8000b2a4:	72 39       	ld.w	r9,r9[0xc]
8000b2a6:	91 39       	st.w	r8[0xc],r9
8000b2a8:	f6 c8 ff e0 	sub	r8,r11,-32
8000b2ac:	f4 c9 ff e0 	sub	r9,r10,-32
8000b2b0:	72 0a       	ld.w	r10,r9[0x0]
8000b2b2:	91 0a       	st.w	r8[0x0],r10
8000b2b4:	72 1a       	ld.w	r10,r9[0x4]
8000b2b6:	91 1a       	st.w	r8[0x4],r10
8000b2b8:	72 2a       	ld.w	r10,r9[0x8]
8000b2ba:	91 2a       	st.w	r8[0x8],r10
8000b2bc:	72 39       	ld.w	r9,r9[0xc]
8000b2be:	91 39       	st.w	r8[0xc],r9
		}
		// reset barometer offset
		barometer->altitude_offset = -(barometer->altitude - barometer->altitude_offset - pos_est->localPosition.origin.altitude);
8000b2c0:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b2c4:	70 79       	ld.w	r9,r8[0x1c]
8000b2c6:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b2ca:	70 88       	ld.w	r8,r8[0x20]
8000b2cc:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8000b2d0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b2d4:	f0 f8 00 80 	ld.w	r8,r8[128]
8000b2d8:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8000b2dc:	10 99       	mov	r9,r8
8000b2de:	ee 19 80 00 	eorh	r9,0x8000
8000b2e2:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b2e6:	91 89       	st.w	r8[0x20],r9
		//barometer->altitude_offset = -barometer->altitude - pos_est->localPosition.pos[2] + pos_est->localPosition.origin.altitude;
		pos_est->init_barometer = true;
8000b2e8:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000b2ec:	30 18       	mov	r8,1
8000b2ee:	f3 68 00 29 	st.b	r9[41],r8
		
		dbg_print("Offset of the barometer set to the GPS altitude, offset value of:");
8000b2f2:	fe cc 02 16 	sub	r12,pc,534
8000b2f6:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(barometer->altitude_offset,10);
8000b2fa:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b2fe:	70 88       	ld.w	r8,r8[0x20]
8000b300:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000b304:	30 ab       	mov	r11,10
8000b306:	10 9c       	mov	r12,r8
8000b308:	f0 16 00 04 	mcall	r6[16]
		dbg_print(" = -");
8000b30c:	fe cc 01 ec 	sub	r12,pc,492
8000b310:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(barometer->altitude,10);
8000b314:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b318:	70 78       	ld.w	r8,r8[0x1c]
8000b31a:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000b31e:	30 ab       	mov	r11,10
8000b320:	10 9c       	mov	r12,r8
8000b322:	f0 16 00 04 	mcall	r6[16]
		dbg_print(" - ");
8000b326:	fe cc 01 fe 	sub	r12,pc,510
8000b32a:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(pos_est->localPosition.pos[2],10);
8000b32e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b332:	71 a8       	ld.w	r8,r8[0x68]
8000b334:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000b338:	30 ab       	mov	r11,10
8000b33a:	10 9c       	mov	r12,r8
8000b33c:	f0 16 00 04 	mcall	r6[16]
		dbg_print(" + ");
8000b340:	fe cc 02 14 	sub	r12,pc,532
8000b344:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(pos_est->localPosition.origin.altitude,10);
8000b348:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b34c:	f0 f8 00 80 	ld.w	r8,r8[128]
8000b350:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000b354:	30 ab       	mov	r11,10
8000b356:	10 9c       	mov	r12,r8
8000b358:	f0 16 00 04 	mcall	r6[16]
		dbg_print("\n");
8000b35c:	fe cc 02 2c 	sub	r12,pc,556
8000b360:	f0 16 00 01 	mcall	r6[4]

		// reset position estimator
		pos_est->last_alt=0;
8000b364:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b368:	30 09       	mov	r9,0
8000b36a:	f1 49 00 50 	st.w	r8[80],r9
		for(i=0;i<3;i++)
8000b36e:	30 08       	mov	r8,0
8000b370:	ef 48 ff fc 	st.w	r7[-4],r8
8000b374:	c2 68       	rjmp	8000b3c0 <position_reset_home_altitude+0x1b8>
		{
			pos_est->pos_correction[i]=0.0;
8000b376:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000b37a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b37e:	2e f9       	sub	r9,-17
8000b380:	30 0a       	mov	r10,0
8000b382:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
			pos_est->last_vel[i]=0.0;
8000b386:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000b38a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b38e:	2e b9       	sub	r9,-21
8000b390:	30 0a       	mov	r10,0
8000b392:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
			pos_est->localPosition.pos[i] = 0.0;
8000b396:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000b39a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b39e:	2e 89       	sub	r9,-24
8000b3a0:	30 0a       	mov	r10,0
8000b3a2:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
			pos_est->vel[i]=0.0;
8000b3a6:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000b3aa:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b3ae:	2f 29       	sub	r9,-14
8000b3b0:	30 0a       	mov	r10,0
8000b3b2:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		dbg_print_num(pos_est->localPosition.origin.altitude,10);
		dbg_print("\n");

		// reset position estimator
		pos_est->last_alt=0;
		for(i=0;i<3;i++)
8000b3b6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b3ba:	2f f8       	sub	r8,-1
8000b3bc:	ef 48 ff fc 	st.w	r7[-4],r8
8000b3c0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b3c4:	58 28       	cp.w	r8,2
8000b3c6:	fe 9a ff d8 	brle	8000b376 <position_reset_home_altitude+0x16e>
			pos_est->localPosition.pos[i] = 0.0;
			pos_est->vel[i]=0.0;
		}

	
}
8000b3ca:	2f cd       	sub	sp,-16
8000b3cc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000b3d0:	80 00       	ld.sh	r0,r0[0x0]
8000b3d2:	b0 96       	st.b	r8[0x1],r6

8000b3d4 <position_integration>:

void position_integration(position_estimator_t *pos_est, Quat_Attitude_t *attitude, float dt)
{
8000b3d4:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
8000b3d8:	1a 97       	mov	r7,sp
8000b3da:	21 fd       	sub	sp,124
8000b3dc:	fe f6 03 64 	ld.w	r6,pc[868]
8000b3e0:	1e 26       	rsub	r6,pc
8000b3e2:	ef 4c ff 9c 	st.w	r7[-100],r12
8000b3e6:	ef 4b ff 98 	st.w	r7[-104],r11
8000b3ea:	ef 4a ff 94 	st.w	r7[-108],r10
	int i;
	
	UQuat_t qvel_bf,qvel, qtmp1, qtmp2, qtmp3;
	float tmp[3];
	qvel.s=0;
8000b3ee:	30 08       	mov	r8,0
8000b3f0:	ef 48 ff dc 	st.w	r7[-36],r8
	for (i=0; i<3; i++) qvel.v[i]=pos_est->vel[i];
8000b3f4:	30 08       	mov	r8,0
8000b3f6:	ef 48 ff fc 	st.w	r7[-4],r8
8000b3fa:	c1 58       	rjmp	8000b424 <position_integration+0x50>
8000b3fc:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b400:	ee fa ff fc 	ld.w	r10,r7[-4]
8000b404:	ee f9 ff 9c 	ld.w	r9,r7[-100]
8000b408:	2f 2a       	sub	r10,-14
8000b40a:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
8000b40e:	2f f8       	sub	r8,-1
8000b410:	a3 68       	lsl	r8,0x2
8000b412:	ee 08 00 08 	add	r8,r7,r8
8000b416:	f1 49 ff dc 	st.w	r8[-36],r9
8000b41a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b41e:	2f f8       	sub	r8,-1
8000b420:	ef 48 ff fc 	st.w	r7[-4],r8
8000b424:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b428:	58 28       	cp.w	r8,2
8000b42a:	fe 9a ff e9 	brle	8000b3fc <position_integration+0x28>
	qvel_bf=quat_global_to_local(attitude->qe, qvel);
8000b42e:	ee ca 00 7c 	sub	r10,r7,124
8000b432:	20 4d       	sub	sp,16
8000b434:	1a 98       	mov	r8,sp
8000b436:	ee c9 00 24 	sub	r9,r7,36
8000b43a:	20 08       	sub	r8,0
8000b43c:	20 09       	sub	r9,0
8000b43e:	72 0b       	ld.w	r11,r9[0x0]
8000b440:	91 0b       	st.w	r8[0x0],r11
8000b442:	72 1b       	ld.w	r11,r9[0x4]
8000b444:	91 1b       	st.w	r8[0x4],r11
8000b446:	72 2b       	ld.w	r11,r9[0x8]
8000b448:	91 2b       	st.w	r8[0x8],r11
8000b44a:	72 39       	ld.w	r9,r9[0xc]
8000b44c:	91 39       	st.w	r8[0xc],r9
8000b44e:	ee f9 ff 98 	ld.w	r9,r7[-104]
8000b452:	20 4d       	sub	sp,16
8000b454:	1a 98       	mov	r8,sp
8000b456:	20 08       	sub	r8,0
8000b458:	20 09       	sub	r9,0
8000b45a:	72 0b       	ld.w	r11,r9[0x0]
8000b45c:	91 0b       	st.w	r8[0x0],r11
8000b45e:	72 1b       	ld.w	r11,r9[0x4]
8000b460:	91 1b       	st.w	r8[0x4],r11
8000b462:	72 2b       	ld.w	r11,r9[0x8]
8000b464:	91 2b       	st.w	r8[0x8],r11
8000b466:	72 39       	ld.w	r9,r9[0xc]
8000b468:	91 39       	st.w	r8[0xc],r9
8000b46a:	14 9c       	mov	r12,r10
8000b46c:	fe b0 fb f2 	rcall	8000ac50 <quat_global_to_local>
8000b470:	2f 8d       	sub	sp,-32
8000b472:	ee c8 00 14 	sub	r8,r7,20
8000b476:	ee c9 00 7c 	sub	r9,r7,124
8000b47a:	20 08       	sub	r8,0
8000b47c:	20 09       	sub	r9,0
8000b47e:	72 0a       	ld.w	r10,r9[0x0]
8000b480:	91 0a       	st.w	r8[0x0],r10
8000b482:	72 1a       	ld.w	r10,r9[0x4]
8000b484:	91 1a       	st.w	r8[0x4],r10
8000b486:	72 2a       	ld.w	r10,r9[0x8]
8000b488:	91 2a       	st.w	r8[0x8],r10
8000b48a:	72 39       	ld.w	r9,r9[0xc]
8000b48c:	91 39       	st.w	r8[0xc],r9
	for (i=0; i<3; i++) {
8000b48e:	30 08       	mov	r8,0
8000b490:	ef 48 ff fc 	st.w	r7[-4],r8
8000b494:	c8 c8       	rjmp	8000b5ac <position_integration+0x1d8>
		pos_est->vel_bf[i]=qvel_bf.v[i];
8000b496:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000b49a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b49e:	2f f8       	sub	r8,-1
8000b4a0:	a3 68       	lsl	r8,0x2
8000b4a2:	ee 08 00 08 	add	r8,r7,r8
8000b4a6:	f0 fa ff ec 	ld.w	r10,r8[-20]
8000b4aa:	ee f8 ff 9c 	ld.w	r8,r7[-100]
8000b4ae:	2f 59       	sub	r9,-11
8000b4b0:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		// clean acceleration estimate without gravity:
		attitude->acc_bf[i]=GRAVITY * (attitude->a[i] - attitude->up_vec.v[i]) ;
8000b4b4:	ee f5 ff fc 	ld.w	r5,r7[-4]
8000b4b8:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000b4bc:	ee f8 ff 98 	ld.w	r8,r7[-104]
8000b4c0:	2d f9       	sub	r9,-33
8000b4c2:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
8000b4c6:	ee fa ff fc 	ld.w	r10,r7[-4]
8000b4ca:	ee f8 ff 98 	ld.w	r8,r7[-104]
8000b4ce:	2f ba       	sub	r10,-5
8000b4d0:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
8000b4d4:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8000b4d8:	10 9c       	mov	r12,r8
8000b4da:	f0 16 00 02 	mcall	r6[8]
8000b4de:	e0 68 85 1f 	mov	r8,34079
8000b4e2:	ea 18 51 eb 	orh	r8,0x51eb
8000b4e6:	e0 69 9e b8 	mov	r9,40632
8000b4ea:	ea 19 40 23 	orh	r9,0x4023
8000b4ee:	f0 16 00 03 	mcall	r6[12]
8000b4f2:	14 98       	mov	r8,r10
8000b4f4:	16 99       	mov	r9,r11
8000b4f6:	10 9a       	mov	r10,r8
8000b4f8:	12 9b       	mov	r11,r9
8000b4fa:	f0 16 00 09 	mcall	r6[36]
8000b4fe:	18 9a       	mov	r10,r12
8000b500:	ee f8 ff 98 	ld.w	r8,r7[-104]
8000b504:	ea c9 ff d0 	sub	r9,r5,-48
8000b508:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		pos_est->vel_bf[i]=pos_est->vel_bf[i]*(1.0-(VEL_DECAY*dt)) + attitude->acc_bf[i]  * dt;
8000b50c:	ee f5 ff fc 	ld.w	r5,r7[-4]
8000b510:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000b514:	ee f8 ff 9c 	ld.w	r8,r7[-100]
8000b518:	2f 59       	sub	r9,-11
8000b51a:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8000b51e:	10 9c       	mov	r12,r8
8000b520:	f0 16 00 02 	mcall	r6[8]
8000b524:	14 92       	mov	r2,r10
8000b526:	16 93       	mov	r3,r11
8000b528:	ee fc ff 94 	ld.w	r12,r7[-108]
8000b52c:	f0 16 00 02 	mcall	r6[8]
8000b530:	30 08       	mov	r8,0
8000b532:	fc 19 80 00 	movh	r9,0x8000
8000b536:	f0 16 00 03 	mcall	r6[12]
8000b53a:	14 98       	mov	r8,r10
8000b53c:	16 99       	mov	r9,r11
8000b53e:	10 9a       	mov	r10,r8
8000b540:	12 9b       	mov	r11,r9
8000b542:	30 08       	mov	r8,0
8000b544:	fc 19 3f f0 	movh	r9,0x3ff0
8000b548:	f0 16 00 05 	mcall	r6[20]
8000b54c:	14 98       	mov	r8,r10
8000b54e:	16 99       	mov	r9,r11
8000b550:	04 9a       	mov	r10,r2
8000b552:	06 9b       	mov	r11,r3
8000b554:	f0 16 00 03 	mcall	r6[12]
8000b558:	14 98       	mov	r8,r10
8000b55a:	16 99       	mov	r9,r11
8000b55c:	10 92       	mov	r2,r8
8000b55e:	12 93       	mov	r3,r9
8000b560:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000b564:	ee f8 ff 98 	ld.w	r8,r7[-104]
8000b568:	2d 09       	sub	r9,-48
8000b56a:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
8000b56e:	ee f8 ff 94 	ld.w	r8,r7[-108]
8000b572:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8000b576:	10 9c       	mov	r12,r8
8000b578:	f0 16 00 02 	mcall	r6[8]
8000b57c:	14 98       	mov	r8,r10
8000b57e:	16 99       	mov	r9,r11
8000b580:	04 9a       	mov	r10,r2
8000b582:	06 9b       	mov	r11,r3
8000b584:	f0 16 00 05 	mcall	r6[20]
8000b588:	14 98       	mov	r8,r10
8000b58a:	16 99       	mov	r9,r11
8000b58c:	10 9a       	mov	r10,r8
8000b58e:	12 9b       	mov	r11,r9
8000b590:	f0 16 00 09 	mcall	r6[36]
8000b594:	18 9a       	mov	r10,r12
8000b596:	ee f8 ff 9c 	ld.w	r8,r7[-100]
8000b59a:	ea c9 ff f5 	sub	r9,r5,-11
8000b59e:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	UQuat_t qvel_bf,qvel, qtmp1, qtmp2, qtmp3;
	float tmp[3];
	qvel.s=0;
	for (i=0; i<3; i++) qvel.v[i]=pos_est->vel[i];
	qvel_bf=quat_global_to_local(attitude->qe, qvel);
	for (i=0; i<3; i++) {
8000b5a2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b5a6:	2f f8       	sub	r8,-1
8000b5a8:	ef 48 ff fc 	st.w	r7[-4],r8
8000b5ac:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b5b0:	58 28       	cp.w	r8,2
8000b5b2:	fe 9a ff 72 	brle	8000b496 <position_integration+0xc2>
		pos_est->vel_bf[i]=pos_est->vel_bf[i]*(1.0-(VEL_DECAY*dt)) + attitude->acc_bf[i]  * dt;
	}
	
	// calculate velocity in global frame
	// vel = qe *vel_bf * qe-1
	qvel_bf.s= 0.0; qvel_bf.v[0]=pos_est->vel_bf[0]; qvel_bf.v[1]=pos_est->vel_bf[1]; qvel_bf.v[2]=pos_est->vel_bf[2];
8000b5b6:	30 08       	mov	r8,0
8000b5b8:	ef 48 ff ec 	st.w	r7[-20],r8
8000b5bc:	ee f8 ff 9c 	ld.w	r8,r7[-100]
8000b5c0:	70 b8       	ld.w	r8,r8[0x2c]
8000b5c2:	ef 48 ff f0 	st.w	r7[-16],r8
8000b5c6:	ee f8 ff 9c 	ld.w	r8,r7[-100]
8000b5ca:	70 c8       	ld.w	r8,r8[0x30]
8000b5cc:	ef 48 ff f4 	st.w	r7[-12],r8
8000b5d0:	ee f8 ff 9c 	ld.w	r8,r7[-100]
8000b5d4:	70 d8       	ld.w	r8,r8[0x34]
8000b5d6:	ef 48 ff f8 	st.w	r7[-8],r8
	qvel = quat_local_to_global(attitude->qe, qvel_bf);
8000b5da:	ee ca 00 7c 	sub	r10,r7,124
8000b5de:	20 4d       	sub	sp,16
8000b5e0:	1a 98       	mov	r8,sp
8000b5e2:	ee c9 00 14 	sub	r9,r7,20
8000b5e6:	20 08       	sub	r8,0
8000b5e8:	20 09       	sub	r9,0
8000b5ea:	72 0b       	ld.w	r11,r9[0x0]
8000b5ec:	91 0b       	st.w	r8[0x0],r11
8000b5ee:	72 1b       	ld.w	r11,r9[0x4]
8000b5f0:	91 1b       	st.w	r8[0x4],r11
8000b5f2:	72 2b       	ld.w	r11,r9[0x8]
8000b5f4:	91 2b       	st.w	r8[0x8],r11
8000b5f6:	72 39       	ld.w	r9,r9[0xc]
8000b5f8:	91 39       	st.w	r8[0xc],r9
8000b5fa:	ee f9 ff 98 	ld.w	r9,r7[-104]
8000b5fe:	20 4d       	sub	sp,16
8000b600:	1a 98       	mov	r8,sp
8000b602:	20 08       	sub	r8,0
8000b604:	20 09       	sub	r9,0
8000b606:	72 0b       	ld.w	r11,r9[0x0]
8000b608:	91 0b       	st.w	r8[0x0],r11
8000b60a:	72 1b       	ld.w	r11,r9[0x4]
8000b60c:	91 1b       	st.w	r8[0x4],r11
8000b60e:	72 2b       	ld.w	r11,r9[0x8]
8000b610:	91 2b       	st.w	r8[0x8],r11
8000b612:	72 39       	ld.w	r9,r9[0xc]
8000b614:	91 39       	st.w	r8[0xc],r9
8000b616:	14 9c       	mov	r12,r10
8000b618:	fe b0 fb 9a 	rcall	8000ad4c <quat_local_to_global>
8000b61c:	2f 8d       	sub	sp,-32
8000b61e:	ee c8 00 24 	sub	r8,r7,36
8000b622:	ee c9 00 7c 	sub	r9,r7,124
8000b626:	20 08       	sub	r8,0
8000b628:	20 09       	sub	r9,0
8000b62a:	72 0a       	ld.w	r10,r9[0x0]
8000b62c:	91 0a       	st.w	r8[0x0],r10
8000b62e:	72 1a       	ld.w	r10,r9[0x4]
8000b630:	91 1a       	st.w	r8[0x4],r10
8000b632:	72 2a       	ld.w	r10,r9[0x8]
8000b634:	91 2a       	st.w	r8[0x8],r10
8000b636:	72 39       	ld.w	r9,r9[0xc]
8000b638:	91 39       	st.w	r8[0xc],r9
	pos_est->vel[0]=qvel.v[0]; pos_est->vel[1]=qvel.v[1]; pos_est->vel[2]=qvel.v[2];
8000b63a:	ee f9 ff e0 	ld.w	r9,r7[-32]
8000b63e:	ee f8 ff 9c 	ld.w	r8,r7[-100]
8000b642:	91 e9       	st.w	r8[0x38],r9
8000b644:	ee f9 ff e4 	ld.w	r9,r7[-28]
8000b648:	ee f8 ff 9c 	ld.w	r8,r7[-100]
8000b64c:	91 f9       	st.w	r8[0x3c],r9
8000b64e:	ee f9 ff e8 	ld.w	r9,r7[-24]
8000b652:	ee f8 ff 9c 	ld.w	r8,r7[-100]
8000b656:	f1 49 00 40 	st.w	r8[64],r9
	//QMUL(attitude->qe, qtmp1, qtmp2);
	//QI(attitude->qe, qtmp1);
	//QMUL(qtmp2, qtmp1, qtmp3);
	//attitude->vel[0]=qtmp3.v[0]; attitude->vel[1]=qtmp3.v[1]; attitude->vel[2]=qtmp3.v[2];
	
	for (i=0; i<3; i++) {
8000b65a:	30 08       	mov	r8,0
8000b65c:	ef 48 ff fc 	st.w	r7[-4],r8
8000b660:	c6 78       	rjmp	8000b72e <position_integration+0x35a>
		// clean position estimate without gravity:
		//prev_pos[i]=attitude->localPosition.pos[i];
		pos_est->localPosition.pos[i] =pos_est->localPosition.pos[i]*(1.0-(POS_DECAY*dt)) + pos_est->vel[i] *dt;
8000b662:	ee f5 ff fc 	ld.w	r5,r7[-4]
8000b666:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000b66a:	ee f8 ff 9c 	ld.w	r8,r7[-100]
8000b66e:	2e 89       	sub	r9,-24
8000b670:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8000b674:	10 9c       	mov	r12,r8
8000b676:	f0 16 00 02 	mcall	r6[8]
8000b67a:	14 92       	mov	r2,r10
8000b67c:	16 93       	mov	r3,r11
8000b67e:	ee fc ff 94 	ld.w	r12,r7[-108]
8000b682:	f0 16 00 02 	mcall	r6[8]
8000b686:	30 08       	mov	r8,0
8000b688:	fc 19 80 00 	movh	r9,0x8000
8000b68c:	f0 16 00 03 	mcall	r6[12]
8000b690:	14 98       	mov	r8,r10
8000b692:	16 99       	mov	r9,r11
8000b694:	10 9a       	mov	r10,r8
8000b696:	12 9b       	mov	r11,r9
8000b698:	30 08       	mov	r8,0
8000b69a:	fc 19 3f f0 	movh	r9,0x3ff0
8000b69e:	f0 16 00 05 	mcall	r6[20]
8000b6a2:	14 98       	mov	r8,r10
8000b6a4:	16 99       	mov	r9,r11
8000b6a6:	04 9a       	mov	r10,r2
8000b6a8:	06 9b       	mov	r11,r3
8000b6aa:	f0 16 00 03 	mcall	r6[12]
8000b6ae:	14 98       	mov	r8,r10
8000b6b0:	16 99       	mov	r9,r11
8000b6b2:	10 92       	mov	r2,r8
8000b6b4:	12 93       	mov	r3,r9
8000b6b6:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000b6ba:	ee f8 ff 9c 	ld.w	r8,r7[-100]
8000b6be:	2f 29       	sub	r9,-14
8000b6c0:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
8000b6c4:	ee f8 ff 94 	ld.w	r8,r7[-108]
8000b6c8:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8000b6cc:	10 9c       	mov	r12,r8
8000b6ce:	f0 16 00 02 	mcall	r6[8]
8000b6d2:	14 98       	mov	r8,r10
8000b6d4:	16 99       	mov	r9,r11
8000b6d6:	04 9a       	mov	r10,r2
8000b6d8:	06 9b       	mov	r11,r3
8000b6da:	f0 16 00 05 	mcall	r6[20]
8000b6de:	14 98       	mov	r8,r10
8000b6e0:	16 99       	mov	r9,r11
8000b6e2:	10 9a       	mov	r10,r8
8000b6e4:	12 9b       	mov	r11,r9
8000b6e6:	f0 16 00 09 	mcall	r6[36]
8000b6ea:	18 9a       	mov	r10,r12
8000b6ec:	ee f8 ff 9c 	ld.w	r8,r7[-100]
8000b6f0:	ea c9 ff e8 	sub	r9,r5,-24
8000b6f4:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		pos_est->localPosition.heading=get_yaw(attitude->qe);
8000b6f8:	ee f9 ff 98 	ld.w	r9,r7[-104]
8000b6fc:	20 4d       	sub	sp,16
8000b6fe:	1a 98       	mov	r8,sp
8000b700:	20 08       	sub	r8,0
8000b702:	20 09       	sub	r9,0
8000b704:	72 0a       	ld.w	r10,r9[0x0]
8000b706:	91 0a       	st.w	r8[0x0],r10
8000b708:	72 1a       	ld.w	r10,r9[0x4]
8000b70a:	91 1a       	st.w	r8[0x4],r10
8000b70c:	72 2a       	ld.w	r10,r9[0x8]
8000b70e:	91 2a       	st.w	r8[0x8],r10
8000b710:	72 39       	ld.w	r9,r9[0xc]
8000b712:	91 39       	st.w	r8[0xc],r9
8000b714:	f0 16 01 0a 	mcall	r6[1064]
8000b718:	2f cd       	sub	sp,-16
8000b71a:	18 99       	mov	r9,r12
8000b71c:	ee f8 ff 9c 	ld.w	r8,r7[-100]
8000b720:	f1 49 00 6c 	st.w	r8[108],r9
	//QMUL(attitude->qe, qtmp1, qtmp2);
	//QI(attitude->qe, qtmp1);
	//QMUL(qtmp2, qtmp1, qtmp3);
	//attitude->vel[0]=qtmp3.v[0]; attitude->vel[1]=qtmp3.v[1]; attitude->vel[2]=qtmp3.v[2];
	
	for (i=0; i<3; i++) {
8000b724:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b728:	2f f8       	sub	r8,-1
8000b72a:	ef 48 ff fc 	st.w	r7[-4],r8
8000b72e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b732:	58 28       	cp.w	r8,2
8000b734:	fe 9a ff 97 	brle	8000b662 <position_integration+0x28e>
		//prev_pos[i]=attitude->localPosition.pos[i];
		pos_est->localPosition.pos[i] =pos_est->localPosition.pos[i]*(1.0-(POS_DECAY*dt)) + pos_est->vel[i] *dt;
		pos_est->localPosition.heading=get_yaw(attitude->qe);
	}

}
8000b738:	2e 1d       	sub	sp,-124
8000b73a:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
8000b73e:	00 00       	add	r0,r0
8000b740:	80 00       	ld.sh	r0,r0[0x0]
8000b742:	b2 64       	st.h	r9[0xc],r4
8000b744:	47 50       	lddsp	r0,sp[0x1d4]
8000b746:	53 20       	stdsp	sp[0xc8],r0
8000b748:	64 74       	ld.w	r4,r2[0x1c]
8000b74a:	20 69       	sub	r9,6
8000b74c:	73 20       	ld.w	r0,r9[0x48]
8000b74e:	74 6f       	ld.w	pc,r10[0x18]
8000b750:	6f 20       	ld.w	r0,r7[0x48]
8000b752:	73 6d       	ld.w	sp,r9[0x58]
8000b754:	61 6c       	ld.w	r12,r0[0x58]
8000b756:	6c 21       	ld.w	r1,r6[0x8]
	...

8000b75a <position_correction>:
	
void position_correction(position_estimator_t *pos_est, pressure_data *barometer, gps_Data_type *gps, float dt)
{
8000b75a:	eb cd 40 e0 	pushm	r5-r7,lr
8000b75e:	1a 97       	mov	r7,sp
8000b760:	fa cd 00 e4 	sub	sp,sp,228
8000b764:	fe f6 06 7c 	ld.w	r6,pc[1660]
8000b768:	1e 26       	rsub	r6,pc
8000b76a:	ef 4c ff 58 	st.w	r7[-168],r12
8000b76e:	ef 4b ff 54 	st.w	r7[-172],r11
8000b772:	ef 4a ff 50 	st.w	r7[-176],r10
8000b776:	ef 49 ff 4c 	st.w	r7[-180],r9
	global_position_t global_gps_position;
	local_coordinates_t local_coordinates;
	
	UQuat_t bias_correction ={.s=0, .v={0.0, 0.0, 1.0}};
8000b77a:	30 08       	mov	r8,0
8000b77c:	ef 48 ff 84 	st.w	r7[-124],r8
8000b780:	30 08       	mov	r8,0
8000b782:	ef 48 ff 88 	st.w	r7[-120],r8
8000b786:	30 08       	mov	r8,0
8000b788:	ef 48 ff 8c 	st.w	r7[-116],r8
8000b78c:	fc 18 3f 80 	movh	r8,0x3f80
8000b790:	ef 48 ff 90 	st.w	r7[-112],r8
	UQuat_t vel_correction ={.s=0, .v={0.0, 0.0, 1.0}};
8000b794:	30 08       	mov	r8,0
8000b796:	ef 48 ff 74 	st.w	r7[-140],r8
8000b79a:	30 08       	mov	r8,0
8000b79c:	ef 48 ff 78 	st.w	r7[-136],r8
8000b7a0:	30 08       	mov	r8,0
8000b7a2:	ef 48 ff 7c 	st.w	r7[-132],r8
8000b7a6:	fc 18 3f 80 	movh	r8,0x3f80
8000b7aa:	ef 48 ff 80 	st.w	r7[-128],r8
	float pos_error[3]= {0.0,0.0,0.0};
8000b7ae:	30 08       	mov	r8,0
8000b7b0:	ef 48 ff 68 	st.w	r7[-152],r8
8000b7b4:	30 08       	mov	r8,0
8000b7b6:	ef 48 ff 6c 	st.w	r7[-148],r8
8000b7ba:	30 08       	mov	r8,0
8000b7bc:	ef 48 ff 70 	st.w	r7[-144],r8
	float baro_alt_error=0.0;
8000b7c0:	30 08       	mov	r8,0
8000b7c2:	ef 48 ff e0 	st.w	r7[-32],r8
	float baro_vel_error=0.0;
8000b7c6:	30 08       	mov	r8,0
8000b7c8:	ef 48 ff e4 	st.w	r7[-28],r8
	float baro_gain=0.0;
8000b7cc:	30 08       	mov	r8,0
8000b7ce:	ef 48 ff e8 	st.w	r7[-24],r8
	float gps_gain=0.0;
8000b7d2:	30 08       	mov	r8,0
8000b7d4:	ef 48 ff ec 	st.w	r7[-20],r8
	float gps_dt=0.0;
8000b7d8:	30 08       	mov	r8,0
8000b7da:	ef 48 ff f0 	st.w	r7[-16],r8
	float vel_error[3]={0.0,0.0,0.0};
8000b7de:	30 08       	mov	r8,0
8000b7e0:	ef 48 ff 5c 	st.w	r7[-164],r8
8000b7e4:	30 08       	mov	r8,0
8000b7e6:	ef 48 ff 60 	st.w	r7[-160],r8
8000b7ea:	30 08       	mov	r8,0
8000b7ec:	ef 48 ff 64 	st.w	r7[-156],r8
	uint32_t tinterGps, tinterBaro;
	int i;
	//if ((centralData->simulation_mode == 0))
	{
		if (pos_est->init_barometer)
8000b7f0:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000b7f4:	f1 38 00 29 	ld.ub	r8,r8[41]
8000b7f8:	58 08       	cp.w	r8,0
8000b7fa:	c6 40       	breq	8000b8c2 <position_correction+0x168>
		{
			// altimeter correction
			if (newValidBarometer(&pos_est->timeLastBarometerMsg))
8000b7fc:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000b800:	2d c8       	sub	r8,-36
8000b802:	10 9c       	mov	r12,r8
8000b804:	f0 16 00 dd 	mcall	r6[884]
8000b808:	18 98       	mov	r8,r12
8000b80a:	58 08       	cp.w	r8,0
8000b80c:	c2 70       	breq	8000b85a <position_correction+0x100>
			{
				//alt_error = -(barometer->altitude + barometer->altitude_offset) - pos_est->localPosition.pos[2]+pos_est->localPosition.origin.altitude;
				pos_est->last_alt= -(barometer->altitude ) + pos_est->localPosition.origin.altitude;
8000b80e:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000b812:	f0 f9 00 80 	ld.w	r9,r8[128]
8000b816:	ee f8 ff 54 	ld.w	r8,r7[-172]
8000b81a:	70 78       	ld.w	r8,r8[0x1c]
8000b81c:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8000b820:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000b824:	f1 49 00 50 	st.w	r8[80],r9
				baro_alt_error = -(barometer->altitude ) - pos_est->localPosition.pos[2]+pos_est->localPosition.origin.altitude;
8000b828:	ee f8 ff 54 	ld.w	r8,r7[-172]
8000b82c:	70 78       	ld.w	r8,r8[0x1c]
8000b82e:	10 99       	mov	r9,r8
8000b830:	ee 19 80 00 	eorh	r9,0x8000
8000b834:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000b838:	71 a8       	ld.w	r8,r8[0x68]
8000b83a:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8000b83e:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000b842:	f0 f8 00 80 	ld.w	r8,r8[128]
8000b846:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8000b84a:	ef 48 ff e0 	st.w	r7[-32],r8
				dbg_print(") - ");
				dbg_print_num(pos_est->localPosition.pos[2],10);
				dbg_print(" + ");
				dbg_print_num(pos_est->localPosition.origin.altitude,10);
				dbg_print("\n");*/
				pos_est->timeLastBarometerMsg=barometer->last_update;
8000b84e:	ee f8 ff 54 	ld.w	r8,r7[-172]
8000b852:	70 a9       	ld.w	r9,r8[0x28]
8000b854:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000b858:	91 99       	st.w	r8[0x24],r9
			}
			tinterBaro = (get_micros()-barometer->last_update)/1000.0;
8000b85a:	f0 16 00 27 	mcall	r6[156]
8000b85e:	18 99       	mov	r9,r12
8000b860:	ee f8 ff 54 	ld.w	r8,r7[-172]
8000b864:	70 a8       	ld.w	r8,r8[0x28]
8000b866:	f2 08 01 08 	sub	r8,r9,r8
8000b86a:	10 9c       	mov	r12,r8
8000b86c:	f0 16 00 4e 	mcall	r6[312]
8000b870:	30 08       	mov	r8,0
8000b872:	e0 69 40 00 	mov	r9,16384
8000b876:	ea 19 40 8f 	orh	r9,0x408f
8000b87a:	f0 16 00 0c 	mcall	r6[48]
8000b87e:	14 98       	mov	r8,r10
8000b880:	16 99       	mov	r9,r11
8000b882:	10 9a       	mov	r10,r8
8000b884:	12 9b       	mov	r11,r9
8000b886:	f0 16 00 74 	mcall	r6[464]
8000b88a:	18 98       	mov	r8,r12
8000b88c:	ef 48 ff f8 	st.w	r7[-8],r8
			baro_gain=1.0;//fmax(1.0-tinterBaro/1000.0, 0.0);
8000b890:	fc 18 3f 80 	movh	r8,0x3f80
8000b894:	ef 48 ff e8 	st.w	r7[-24],r8
			
			//pos_est->localPosition.pos[2] += kp_alt/((float)(tinterBaro/2.5 + 1.0)) * alt_error;
			baro_alt_error=pos_est->last_alt  - pos_est->localPosition.pos[2];
8000b898:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000b89c:	71 49       	ld.w	r9,r8[0x50]
8000b89e:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000b8a2:	71 a8       	ld.w	r8,r8[0x68]
8000b8a4:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8000b8a8:	ef 48 ff e0 	st.w	r7[-32],r8
			baro_vel_error=barometer->vario_vz - pos_est->vel[2];
8000b8ac:	ee f8 ff 54 	ld.w	r8,r7[-172]
8000b8b0:	70 99       	ld.w	r9,r8[0x24]
8000b8b2:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000b8b6:	71 08       	ld.w	r8,r8[0x40]
8000b8b8:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8000b8bc:	ef 48 ff e4 	st.w	r7[-28],r8
8000b8c0:	c0 78       	rjmp	8000b8ce <position_correction+0x174>
			//vel_error[2]=0.1*pos_error[2];
			//pos_est->vel[2] += kp_alt_v * vel_error[2];
				
		}else{
			init_barometer_offset(pos_est, barometer);
8000b8c2:	ee fb ff 54 	ld.w	r11,r7[-172]
8000b8c6:	ee fc ff 58 	ld.w	r12,r7[-168]
8000b8ca:	f0 16 02 00 	mcall	r6[2048]
		}
	
		if (pos_est->init_gps_position)
8000b8ce:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000b8d2:	f1 38 00 28 	ld.ub	r8,r8[40]
8000b8d6:	58 08       	cp.w	r8,0
8000b8d8:	e0 80 01 9c 	breq	8000bc10 <position_correction+0x4b6>
		{
			if (newValidGpsMsg(&pos_est->timeLastGpsMsg))
8000b8dc:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000b8e0:	2e 08       	sub	r8,-32
8000b8e2:	10 9c       	mov	r12,r8
8000b8e4:	f0 16 00 8b 	mcall	r6[556]
8000b8e8:	18 98       	mov	r8,r12
8000b8ea:	58 08       	cp.w	r8,0
8000b8ec:	e0 80 01 07 	breq	8000bafa <position_correction+0x3a0>
			{
				//dbg_print("New valid message\n");
				global_gps_position.longitude = gps->longitude;
8000b8f0:	ee f8 ff 50 	ld.w	r8,r7[-176]
8000b8f4:	f0 e8 00 08 	ld.d	r8,r8[8]
8000b8f8:	ee e9 ff c4 	st.d	r7[-60],r8
				global_gps_position.latitude = gps->latitude;
8000b8fc:	ee f8 ff 50 	ld.w	r8,r7[-176]
8000b900:	f0 e8 00 00 	ld.d	r8,r8[0]
8000b904:	ee e9 ff cc 	st.d	r7[-52],r8
				global_gps_position.altitude = gps->altitude;
8000b908:	ee f8 ff 50 	ld.w	r8,r7[-176]
8000b90c:	70 48       	ld.w	r8,r8[0x10]
8000b90e:	ef 48 ff d4 	st.w	r7[-44],r8
				global_gps_position.heading=0.0;
8000b912:	30 08       	mov	r8,0
8000b914:	ef 48 ff d8 	st.w	r7[-40],r8
				local_coordinates = global_to_local_position(global_gps_position,pos_est->localPosition.origin);
8000b918:	ee cc 00 e4 	sub	r12,r7,228
8000b91c:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000b920:	20 7d       	sub	sp,28
8000b922:	1a 99       	mov	r9,sp
8000b924:	12 9a       	mov	r10,r9
8000b926:	f0 cb ff 90 	sub	r11,r8,-112
8000b92a:	f4 c8 00 00 	sub	r8,r10,0
8000b92e:	f6 c9 00 00 	sub	r9,r11,0
8000b932:	72 0e       	ld.w	lr,r9[0x0]
8000b934:	91 0e       	st.w	r8[0x0],lr
8000b936:	72 1e       	ld.w	lr,r9[0x4]
8000b938:	91 1e       	st.w	r8[0x4],lr
8000b93a:	72 2e       	ld.w	lr,r9[0x8]
8000b93c:	91 2e       	st.w	r8[0x8],lr
8000b93e:	72 39       	ld.w	r9,r9[0xc]
8000b940:	91 39       	st.w	r8[0xc],r9
8000b942:	f6 e8 00 10 	ld.d	r8,r11[16]
8000b946:	f4 e9 00 10 	st.d	r10[16],r8
8000b94a:	76 68       	ld.w	r8,r11[0x18]
8000b94c:	95 68       	st.w	r10[0x18],r8
8000b94e:	20 7d       	sub	sp,28
8000b950:	1a 98       	mov	r8,sp
8000b952:	10 9a       	mov	r10,r8
8000b954:	ee cb 00 3c 	sub	r11,r7,60
8000b958:	f4 c8 00 00 	sub	r8,r10,0
8000b95c:	f6 c9 00 00 	sub	r9,r11,0
8000b960:	72 0e       	ld.w	lr,r9[0x0]
8000b962:	91 0e       	st.w	r8[0x0],lr
8000b964:	72 1e       	ld.w	lr,r9[0x4]
8000b966:	91 1e       	st.w	r8[0x4],lr
8000b968:	72 2e       	ld.w	lr,r9[0x8]
8000b96a:	91 2e       	st.w	r8[0x8],lr
8000b96c:	72 39       	ld.w	r9,r9[0xc]
8000b96e:	91 39       	st.w	r8[0xc],r9
8000b970:	f6 e8 00 10 	ld.d	r8,r11[16]
8000b974:	f4 e9 00 10 	st.d	r10[16],r8
8000b978:	76 68       	ld.w	r8,r11[0x18]
8000b97a:	95 68       	st.w	r10[0x18],r8
8000b97c:	f0 16 00 73 	mcall	r6[460]
8000b980:	2f 2d       	sub	sp,-56
8000b982:	ee cb 00 6c 	sub	r11,r7,108
8000b986:	ee ca 00 e4 	sub	r10,r7,228
8000b98a:	f6 c8 00 00 	sub	r8,r11,0
8000b98e:	f4 c9 00 00 	sub	r9,r10,0
8000b992:	72 0c       	ld.w	r12,r9[0x0]
8000b994:	91 0c       	st.w	r8[0x0],r12
8000b996:	72 1c       	ld.w	r12,r9[0x4]
8000b998:	91 1c       	st.w	r8[0x4],r12
8000b99a:	72 2c       	ld.w	r12,r9[0x8]
8000b99c:	91 2c       	st.w	r8[0x8],r12
8000b99e:	72 39       	ld.w	r9,r9[0xc]
8000b9a0:	91 39       	st.w	r8[0xc],r9
8000b9a2:	f6 c8 ff f0 	sub	r8,r11,-16
8000b9a6:	f4 c9 ff f0 	sub	r9,r10,-16
8000b9aa:	72 0c       	ld.w	r12,r9[0x0]
8000b9ac:	91 0c       	st.w	r8[0x0],r12
8000b9ae:	72 1c       	ld.w	r12,r9[0x4]
8000b9b0:	91 1c       	st.w	r8[0x4],r12
8000b9b2:	72 2c       	ld.w	r12,r9[0x8]
8000b9b4:	91 2c       	st.w	r8[0x8],r12
8000b9b6:	72 39       	ld.w	r9,r9[0xc]
8000b9b8:	91 39       	st.w	r8[0xc],r9
8000b9ba:	f6 c8 ff e0 	sub	r8,r11,-32
8000b9be:	f4 c9 ff e0 	sub	r9,r10,-32
8000b9c2:	72 0a       	ld.w	r10,r9[0x0]
8000b9c4:	91 0a       	st.w	r8[0x0],r10
8000b9c6:	72 1a       	ld.w	r10,r9[0x4]
8000b9c8:	91 1a       	st.w	r8[0x4],r10
8000b9ca:	72 2a       	ld.w	r10,r9[0x8]
8000b9cc:	91 2a       	st.w	r8[0x8],r10
8000b9ce:	72 39       	ld.w	r9,r9[0xc]
8000b9d0:	91 39       	st.w	r8[0xc],r9
				local_coordinates.timestamp_ms=gps->timeLastMsg;
8000b9d2:	ee f8 ff 50 	ld.w	r8,r7[-176]
8000b9d6:	71 18       	ld.w	r8,r8[0x44]
8000b9d8:	ef 48 ff c0 	st.w	r7[-64],r8
				// compute GPS velocity estimate
				gps_dt=(local_coordinates.timestamp_ms - pos_est->lastGpsPos.timestamp_ms)/1000.0;
8000b9dc:	ee f9 ff c0 	ld.w	r9,r7[-64]
8000b9e0:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000b9e4:	f0 f8 00 bc 	ld.w	r8,r8[188]
8000b9e8:	f2 08 01 08 	sub	r8,r9,r8
8000b9ec:	10 9c       	mov	r12,r8
8000b9ee:	f0 16 00 4e 	mcall	r6[312]
8000b9f2:	30 08       	mov	r8,0
8000b9f4:	e0 69 40 00 	mov	r9,16384
8000b9f8:	ea 19 40 8f 	orh	r9,0x408f
8000b9fc:	f0 16 00 0c 	mcall	r6[48]
8000ba00:	14 98       	mov	r8,r10
8000ba02:	16 99       	mov	r9,r11
8000ba04:	10 9a       	mov	r10,r8
8000ba06:	12 9b       	mov	r11,r9
8000ba08:	f0 16 00 09 	mcall	r6[36]
8000ba0c:	18 98       	mov	r8,r12
8000ba0e:	ef 48 ff f0 	st.w	r7[-16],r8
				if (gps_dt>0.001) {
8000ba12:	ee fc ff f0 	ld.w	r12,r7[-16]
8000ba16:	f0 16 00 02 	mcall	r6[8]
8000ba1a:	14 98       	mov	r8,r10
8000ba1c:	16 99       	mov	r9,r11
8000ba1e:	30 05       	mov	r5,0
8000ba20:	e0 6a a9 fc 	mov	r10,43516
8000ba24:	ea 1a d2 f1 	orh	r10,0xd2f1
8000ba28:	e0 6b 62 4d 	mov	r11,25165
8000ba2c:	ea 1b 3f 50 	orh	r11,0x3f50
8000ba30:	f0 16 00 1d 	mcall	r6[116]
8000ba34:	18 98       	mov	r8,r12
8000ba36:	58 08       	cp.w	r8,0
8000ba38:	c0 20       	breq	8000ba3c <position_correction+0x2e2>
8000ba3a:	30 15       	mov	r5,1
8000ba3c:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
8000ba40:	c5 90       	breq	8000baf2 <position_correction+0x398>
					for (i=0; i<3; i++) pos_est->last_vel[i] = (local_coordinates.pos[i]-pos_est->lastGpsPos.pos[i])/gps_dt;
8000ba42:	30 08       	mov	r8,0
8000ba44:	ef 48 ff fc 	st.w	r7[-4],r8
8000ba48:	c2 58       	rjmp	8000ba92 <position_correction+0x338>
8000ba4a:	ee f5 ff fc 	ld.w	r5,r7[-4]
8000ba4e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ba52:	a3 68       	lsl	r8,0x2
8000ba54:	ee 08 00 08 	add	r8,r7,r8
8000ba58:	f0 f9 ff 94 	ld.w	r9,r8[-108]
8000ba5c:	ee fa ff fc 	ld.w	r10,r7[-4]
8000ba60:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000ba64:	2d ca       	sub	r10,-36
8000ba66:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
8000ba6a:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8000ba6e:	ee fb ff f0 	ld.w	r11,r7[-16]
8000ba72:	10 9c       	mov	r12,r8
8000ba74:	f0 16 00 08 	mcall	r6[32]
8000ba78:	18 98       	mov	r8,r12
8000ba7a:	10 9a       	mov	r10,r8
8000ba7c:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000ba80:	ea c9 ff eb 	sub	r9,r5,-21
8000ba84:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
8000ba88:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ba8c:	2f f8       	sub	r8,-1
8000ba8e:	ef 48 ff fc 	st.w	r7[-4],r8
8000ba92:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ba96:	58 28       	cp.w	r8,2
8000ba98:	fe 9a ff d9 	brle	8000ba4a <position_correction+0x2f0>
					pos_est->lastGpsPos=local_coordinates;
8000ba9c:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000baa0:	f0 cb ff 70 	sub	r11,r8,-144
8000baa4:	ee ca 00 6c 	sub	r10,r7,108
8000baa8:	f6 c8 00 00 	sub	r8,r11,0
8000baac:	f4 c9 00 00 	sub	r9,r10,0
8000bab0:	72 0c       	ld.w	r12,r9[0x0]
8000bab2:	91 0c       	st.w	r8[0x0],r12
8000bab4:	72 1c       	ld.w	r12,r9[0x4]
8000bab6:	91 1c       	st.w	r8[0x4],r12
8000bab8:	72 2c       	ld.w	r12,r9[0x8]
8000baba:	91 2c       	st.w	r8[0x8],r12
8000babc:	72 39       	ld.w	r9,r9[0xc]
8000babe:	91 39       	st.w	r8[0xc],r9
8000bac0:	f6 c8 ff f0 	sub	r8,r11,-16
8000bac4:	f4 c9 ff f0 	sub	r9,r10,-16
8000bac8:	72 0c       	ld.w	r12,r9[0x0]
8000baca:	91 0c       	st.w	r8[0x0],r12
8000bacc:	72 1c       	ld.w	r12,r9[0x4]
8000bace:	91 1c       	st.w	r8[0x4],r12
8000bad0:	72 2c       	ld.w	r12,r9[0x8]
8000bad2:	91 2c       	st.w	r8[0x8],r12
8000bad4:	72 39       	ld.w	r9,r9[0xc]
8000bad6:	91 39       	st.w	r8[0xc],r9
8000bad8:	f6 c8 ff e0 	sub	r8,r11,-32
8000badc:	f4 c9 ff e0 	sub	r9,r10,-32
8000bae0:	72 0a       	ld.w	r10,r9[0x0]
8000bae2:	91 0a       	st.w	r8[0x0],r10
8000bae4:	72 1a       	ld.w	r10,r9[0x4]
8000bae6:	91 1a       	st.w	r8[0x4],r10
8000bae8:	72 2a       	ld.w	r10,r9[0x8]
8000baea:	91 2a       	st.w	r8[0x8],r10
8000baec:	72 39       	ld.w	r9,r9[0xc]
8000baee:	91 39       	st.w	r8[0xc],r9
8000baf0:	c0 58       	rjmp	8000bafa <position_correction+0x3a0>
				} else dbg_print("GPS dt is too small!");
8000baf2:	fe cc 03 ae 	sub	r12,pc,942
8000baf6:	f0 16 00 01 	mcall	r6[4]
			}
			tinterGps = get_millis() - gps->timeLastMsg;
8000bafa:	f0 16 00 0f 	mcall	r6[60]
8000bafe:	18 99       	mov	r9,r12
8000bb00:	ee f8 ff 50 	ld.w	r8,r7[-176]
8000bb04:	71 18       	ld.w	r8,r8[0x44]
8000bb06:	10 19       	sub	r9,r8
8000bb08:	ef 49 ff f4 	st.w	r7[-12],r9
			
			gps_gain=fmax(1.0-tinterGps/1000.0, 0.0);
8000bb0c:	ee fc ff f4 	ld.w	r12,r7[-12]
8000bb10:	f0 16 00 4e 	mcall	r6[312]
8000bb14:	30 08       	mov	r8,0
8000bb16:	e0 69 40 00 	mov	r9,16384
8000bb1a:	ea 19 c0 8f 	orh	r9,0xc08f
8000bb1e:	f0 16 00 0c 	mcall	r6[48]
8000bb22:	14 98       	mov	r8,r10
8000bb24:	16 99       	mov	r9,r11
8000bb26:	10 9a       	mov	r10,r8
8000bb28:	12 9b       	mov	r11,r9
8000bb2a:	30 08       	mov	r8,0
8000bb2c:	fc 19 3f f0 	movh	r9,0x3ff0
8000bb30:	f0 16 00 05 	mcall	r6[20]
8000bb34:	14 98       	mov	r8,r10
8000bb36:	16 99       	mov	r9,r11
8000bb38:	30 05       	mov	r5,0
8000bb3a:	30 0a       	mov	r10,0
8000bb3c:	30 0b       	mov	r11,0
8000bb3e:	f0 16 00 1d 	mcall	r6[116]
8000bb42:	18 98       	mov	r8,r12
8000bb44:	58 08       	cp.w	r8,0
8000bb46:	c0 20       	breq	8000bb4a <position_correction+0x3f0>
8000bb48:	30 15       	mov	r5,1
8000bb4a:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
8000bb4e:	c1 d0       	breq	8000bb88 <position_correction+0x42e>
8000bb50:	ee fc ff f4 	ld.w	r12,r7[-12]
8000bb54:	f0 16 00 4e 	mcall	r6[312]
8000bb58:	30 08       	mov	r8,0
8000bb5a:	e0 69 40 00 	mov	r9,16384
8000bb5e:	ea 19 c0 8f 	orh	r9,0xc08f
8000bb62:	f0 16 00 0c 	mcall	r6[48]
8000bb66:	14 98       	mov	r8,r10
8000bb68:	16 99       	mov	r9,r11
8000bb6a:	10 9a       	mov	r10,r8
8000bb6c:	12 9b       	mov	r11,r9
8000bb6e:	30 08       	mov	r8,0
8000bb70:	fc 19 3f f0 	movh	r9,0x3ff0
8000bb74:	f0 16 00 05 	mcall	r6[20]
8000bb78:	14 98       	mov	r8,r10
8000bb7a:	16 99       	mov	r9,r11
8000bb7c:	10 9a       	mov	r10,r8
8000bb7e:	12 9b       	mov	r11,r9
8000bb80:	f0 16 00 09 	mcall	r6[36]
8000bb84:	18 98       	mov	r8,r12
8000bb86:	c0 28       	rjmp	8000bb8a <position_correction+0x430>
8000bb88:	30 08       	mov	r8,0
8000bb8a:	ef 48 ff ec 	st.w	r7[-20],r8
			gps_gain=1.0;
8000bb8e:	fc 18 3f 80 	movh	r8,0x3f80
8000bb92:	ef 48 ff ec 	st.w	r7[-20],r8
			
			for (i=0;i<3;i++){
8000bb96:	30 08       	mov	r8,0
8000bb98:	ef 48 ff fc 	st.w	r7[-4],r8
8000bb9c:	c3 48       	rjmp	8000bc04 <position_correction+0x4aa>
				pos_error[i] = pos_est->lastGpsPos.pos[i] - pos_est->localPosition.pos[i];
8000bb9e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bba2:	ee fa ff fc 	ld.w	r10,r7[-4]
8000bba6:	ee f9 ff 58 	ld.w	r9,r7[-168]
8000bbaa:	2d ca       	sub	r10,-36
8000bbac:	f2 0a 03 2a 	ld.w	r10,r9[r10<<0x2]
8000bbb0:	ee fb ff fc 	ld.w	r11,r7[-4]
8000bbb4:	ee f9 ff 58 	ld.w	r9,r7[-168]
8000bbb8:	2e 8b       	sub	r11,-24
8000bbba:	f2 0b 03 29 	ld.w	r9,r9[r11<<0x2]
8000bbbe:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8000bbc2:	a3 68       	lsl	r8,0x2
8000bbc4:	ee 08 00 08 	add	r8,r7,r8
8000bbc8:	f1 49 ff 68 	st.w	r8[-152],r9
				vel_error[i] = pos_est->last_vel[i]       - pos_est->vel[i]; 
8000bbcc:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bbd0:	ee fa ff fc 	ld.w	r10,r7[-4]
8000bbd4:	ee f9 ff 58 	ld.w	r9,r7[-168]
8000bbd8:	2e ba       	sub	r10,-21
8000bbda:	f2 0a 03 2a 	ld.w	r10,r9[r10<<0x2]
8000bbde:	ee fb ff fc 	ld.w	r11,r7[-4]
8000bbe2:	ee f9 ff 58 	ld.w	r9,r7[-168]
8000bbe6:	2f 2b       	sub	r11,-14
8000bbe8:	f2 0b 03 29 	ld.w	r9,r9[r11<<0x2]
8000bbec:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8000bbf0:	a3 68       	lsl	r8,0x2
8000bbf2:	ee 08 00 08 	add	r8,r7,r8
8000bbf6:	f1 49 ff 5c 	st.w	r8[-164],r9
			tinterGps = get_millis() - gps->timeLastMsg;
			
			gps_gain=fmax(1.0-tinterGps/1000.0, 0.0);
			gps_gain=1.0;
			
			for (i=0;i<3;i++){
8000bbfa:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bbfe:	2f f8       	sub	r8,-1
8000bc00:	ef 48 ff fc 	st.w	r7[-4],r8
8000bc04:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bc08:	58 28       	cp.w	r8,2
8000bc0a:	fe 9a ff ca 	brle	8000bb9e <position_correction+0x444>
8000bc0e:	c2 b8       	rjmp	8000bc64 <position_correction+0x50a>
				pos_error[i] = pos_est->lastGpsPos.pos[i] - pos_est->localPosition.pos[i];
				vel_error[i] = pos_est->last_vel[i]       - pos_est->vel[i]; 
			}
		}else{
			init_pos_gps(pos_est, gps);
8000bc10:	ee fb ff 50 	ld.w	r11,r7[-176]
8000bc14:	ee fc ff 58 	ld.w	r12,r7[-168]
8000bc18:	f0 16 00 dc 	mcall	r6[880]
			for (i=0;i<2;i++){
8000bc1c:	30 08       	mov	r8,0
8000bc1e:	ef 48 ff fc 	st.w	r7[-4],r8
8000bc22:	c1 68       	rjmp	8000bc4e <position_correction+0x4f4>
				//pos_error[i] = pos_est->lastGpsPos.pos[i] - pos_est->localPosition.pos[i];
				pos_error[i] = 0.0;
8000bc24:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bc28:	a3 68       	lsl	r8,0x2
8000bc2a:	ee 08 00 08 	add	r8,r7,r8
8000bc2e:	30 09       	mov	r9,0
8000bc30:	f1 49 ff 68 	st.w	r8[-152],r9
				vel_error[i] = 0.0;
8000bc34:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bc38:	a3 68       	lsl	r8,0x2
8000bc3a:	ee 08 00 08 	add	r8,r7,r8
8000bc3e:	30 09       	mov	r9,0
8000bc40:	f1 49 ff 5c 	st.w	r8[-164],r9
				pos_error[i] = pos_est->lastGpsPos.pos[i] - pos_est->localPosition.pos[i];
				vel_error[i] = pos_est->last_vel[i]       - pos_est->vel[i]; 
			}
		}else{
			init_pos_gps(pos_est, gps);
			for (i=0;i<2;i++){
8000bc44:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bc48:	2f f8       	sub	r8,-1
8000bc4a:	ef 48 ff fc 	st.w	r7[-4],r8
8000bc4e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bc52:	58 18       	cp.w	r8,1
8000bc54:	fe 9a ff e8 	brle	8000bc24 <position_correction+0x4ca>
				//pos_error[i] = pos_est->lastGpsPos.pos[i] - pos_est->localPosition.pos[i];
				pos_error[i] = 0.0;
				vel_error[i] = 0.0;
			}
			gps_gain=0.1;
8000bc58:	e0 68 cc cd 	mov	r8,52429
8000bc5c:	ea 18 3d cc 	orh	r8,0x3dcc
8000bc60:	ef 48 ff ec 	st.w	r7[-20],r8
		}
		
		// Apply error correction to velocity and position estimates
		for (i=0;i<3;i++) {
8000bc64:	30 08       	mov	r8,0
8000bc66:	ef 48 ff fc 	st.w	r7[-4],r8
8000bc6a:	c2 e8       	rjmp	8000bcc6 <position_correction+0x56c>
			pos_est->localPosition.pos[i] += pos_est->kp_pos[i] * gps_gain * pos_error[i]* dt;
8000bc6c:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000bc70:	ee fa ff fc 	ld.w	r10,r7[-4]
8000bc74:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000bc78:	2e 8a       	sub	r10,-24
8000bc7a:	f0 0a 03 2a 	ld.w	r10,r8[r10<<0x2]
8000bc7e:	ee fb ff fc 	ld.w	r11,r7[-4]
8000bc82:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000bc86:	2f db       	sub	r11,-3
8000bc88:	f0 0b 03 2b 	ld.w	r11,r8[r11<<0x2]
8000bc8c:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000bc90:	e5 a2 0b b8 	cop	cp0,cr11,cr11,cr8,0x44
8000bc94:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bc98:	a3 68       	lsl	r8,0x2
8000bc9a:	ee 08 00 08 	add	r8,r7,r8
8000bc9e:	f0 f8 ff 68 	ld.w	r8,r8[-152]
8000bca2:	e5 a2 0b b8 	cop	cp0,cr11,cr11,cr8,0x44
8000bca6:	ee f8 ff 4c 	ld.w	r8,r7[-180]
8000bcaa:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
8000bcae:	e5 a0 0a a8 	cop	cp0,cr10,cr10,cr8,0x40
8000bcb2:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000bcb6:	2e 89       	sub	r9,-24
8000bcb8:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
			}
			gps_gain=0.1;
		}
		
		// Apply error correction to velocity and position estimates
		for (i=0;i<3;i++) {
8000bcbc:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bcc0:	2f f8       	sub	r8,-1
8000bcc2:	ef 48 ff fc 	st.w	r7[-4],r8
8000bcc6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bcca:	58 28       	cp.w	r8,2
8000bccc:	fe 9a ff d0 	brle	8000bc6c <position_correction+0x512>
			pos_est->localPosition.pos[i] += pos_est->kp_pos[i] * gps_gain * pos_error[i]* dt;
		}
		pos_est->localPosition.pos[2] += pos_est->kp_alt * baro_gain * baro_alt_error* dt;
8000bcd0:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000bcd4:	71 a9       	ld.w	r9,r8[0x68]
8000bcd6:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000bcda:	70 6a       	ld.w	r10,r8[0x18]
8000bcdc:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000bce0:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
8000bce4:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000bce8:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
8000bcec:	ee f8 ff 4c 	ld.w	r8,r7[-180]
8000bcf0:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000bcf4:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000bcf8:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000bcfc:	f1 49 00 68 	st.w	r8[104],r9


		for (i=0; i<3; i++) vel_correction.v[i] = vel_error[i];
8000bd00:	30 08       	mov	r8,0
8000bd02:	ef 48 ff fc 	st.w	r7[-4],r8
8000bd06:	c1 68       	rjmp	8000bd32 <position_correction+0x5d8>
8000bd08:	ee fa ff fc 	ld.w	r10,r7[-4]
8000bd0c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bd10:	a3 68       	lsl	r8,0x2
8000bd12:	ee 08 00 08 	add	r8,r7,r8
8000bd16:	f0 f9 ff 5c 	ld.w	r9,r8[-164]
8000bd1a:	f4 c8 ff ff 	sub	r8,r10,-1
8000bd1e:	a3 68       	lsl	r8,0x2
8000bd20:	ee 08 00 08 	add	r8,r7,r8
8000bd24:	f1 49 ff 74 	st.w	r8[-140],r9
8000bd28:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bd2c:	2f f8       	sub	r8,-1
8000bd2e:	ef 48 ff fc 	st.w	r7[-4],r8
8000bd32:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bd36:	58 28       	cp.w	r8,2
8000bd38:	fe 9a ff e8 	brle	8000bd08 <position_correction+0x5ae>
		//for (i=0; i<3; i++) vel_correction.v[i] = pos_error[i];
		//vel_correction = quat_global_to_local(pos_est->qe, vel_correction);
				
		for (i=0;i<3;i++) {			
8000bd3c:	30 08       	mov	r8,0
8000bd3e:	ef 48 ff fc 	st.w	r7[-4],r8
8000bd42:	c2 e8       	rjmp	8000bd9e <position_correction+0x644>
			pos_est->vel[i] += pos_est->kp_vel[i]*gps_gain * vel_correction.v[i]* dt;
8000bd44:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000bd48:	ee fa ff fc 	ld.w	r10,r7[-4]
8000bd4c:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000bd50:	2f 2a       	sub	r10,-14
8000bd52:	f0 0a 03 2a 	ld.w	r10,r8[r10<<0x2]
8000bd56:	ee fb ff fc 	ld.w	r11,r7[-4]
8000bd5a:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000bd5e:	f0 0b 03 2b 	ld.w	r11,r8[r11<<0x2]
8000bd62:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000bd66:	e5 a2 0b b8 	cop	cp0,cr11,cr11,cr8,0x44
8000bd6a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bd6e:	2f f8       	sub	r8,-1
8000bd70:	a3 68       	lsl	r8,0x2
8000bd72:	ee 08 00 08 	add	r8,r7,r8
8000bd76:	f0 f8 ff 74 	ld.w	r8,r8[-140]
8000bd7a:	e5 a2 0b b8 	cop	cp0,cr11,cr11,cr8,0x44
8000bd7e:	ee f8 ff 4c 	ld.w	r8,r7[-180]
8000bd82:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
8000bd86:	e5 a0 0a a8 	cop	cp0,cr10,cr10,cr8,0x40
8000bd8a:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000bd8e:	2f 29       	sub	r9,-14
8000bd90:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10

		for (i=0; i<3; i++) vel_correction.v[i] = vel_error[i];
		//for (i=0; i<3; i++) vel_correction.v[i] = pos_error[i];
		//vel_correction = quat_global_to_local(pos_est->qe, vel_correction);
				
		for (i=0;i<3;i++) {			
8000bd94:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bd98:	2f f8       	sub	r8,-1
8000bd9a:	ef 48 ff fc 	st.w	r7[-4],r8
8000bd9e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bda2:	58 28       	cp.w	r8,2
8000bda4:	fe 9a ff d0 	brle	8000bd44 <position_correction+0x5ea>
			pos_est->vel[i] += pos_est->kp_vel[i]*gps_gain * vel_correction.v[i]* dt;
		}
		pos_est->vel[2] += pos_est->kp_vel_baro * baro_gain * baro_vel_error* dt;
8000bda8:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000bdac:	71 09       	ld.w	r9,r8[0x40]
8000bdae:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000bdb2:	70 7a       	ld.w	r10,r8[0x1c]
8000bdb4:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000bdb8:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
8000bdbc:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000bdc0:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
8000bdc4:	ee f8 ff 4c 	ld.w	r8,r7[-180]
8000bdc8:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000bdcc:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000bdd0:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000bdd4:	f1 49 00 40 	st.w	r8[64],r9

	}
8000bdd8:	2c 7d       	sub	sp,-228
8000bdda:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000bdde:	00 00       	add	r0,r0
8000bde0:	80 00       	ld.sh	r0,r0[0x0]
8000bde2:	b5 ec       	*unknown*

8000bde4 <quat_from_vector>:
	out.v[2] = -q.v[2];

#define QUAT(q, s, v0, v1, v2) \
	q.s=s; q.v[0]=v0; q.v[1]=v1; q.v[2]=v2;

UQuat_t static inline quat_from_vector(float *v) {
8000bde4:	eb cd 40 80 	pushm	r7,lr
8000bde8:	1a 97       	mov	r7,sp
8000bdea:	20 5d       	sub	sp,20
8000bdec:	18 9a       	mov	r10,r12
8000bdee:	ef 4b ff ec 	st.w	r7[-20],r11
	UQuat_t q;	
	q.s=0; 
8000bdf2:	30 08       	mov	r8,0
8000bdf4:	ef 48 ff f0 	st.w	r7[-16],r8
	q.v[0]=v[0]; 
8000bdf8:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000bdfc:	70 08       	ld.w	r8,r8[0x0]
8000bdfe:	ef 48 ff f4 	st.w	r7[-12],r8
	q.v[1]=v[1]; 
8000be02:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000be06:	2f c8       	sub	r8,-4
8000be08:	70 08       	ld.w	r8,r8[0x0]
8000be0a:	ef 48 ff f8 	st.w	r7[-8],r8
	q.v[2]=v[2];
8000be0e:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000be12:	2f 88       	sub	r8,-8
8000be14:	70 08       	ld.w	r8,r8[0x0]
8000be16:	ef 48 ff fc 	st.w	r7[-4],r8
	return q;
8000be1a:	14 98       	mov	r8,r10
8000be1c:	ee c9 00 10 	sub	r9,r7,16
8000be20:	20 08       	sub	r8,0
8000be22:	20 09       	sub	r9,0
8000be24:	72 0b       	ld.w	r11,r9[0x0]
8000be26:	91 0b       	st.w	r8[0x0],r11
8000be28:	72 1b       	ld.w	r11,r9[0x4]
8000be2a:	91 1b       	st.w	r8[0x4],r11
8000be2c:	72 2b       	ld.w	r11,r9[0x8]
8000be2e:	91 2b       	st.w	r8[0x8],r11
8000be30:	72 39       	ld.w	r9,r9[0xc]
8000be32:	91 39       	st.w	r8[0xc],r9
}
8000be34:	14 9c       	mov	r12,r10
8000be36:	2f bd       	sub	sp,-20
8000be38:	e3 cd 80 80 	ldm	sp++,r7,pc

8000be3c <scalar_product>:
	return out;
}


float static inline scalar_product(const float u[], const float v[])
{
8000be3c:	eb cd 40 80 	pushm	r7,lr
8000be40:	1a 97       	mov	r7,sp
8000be42:	20 3d       	sub	sp,12
8000be44:	ef 4c ff f8 	st.w	r7[-8],r12
8000be48:	ef 4b ff f4 	st.w	r7[-12],r11
	float scp = (u[0]*v[0]+u[1]*v[1]+u[2]*v[2]);
8000be4c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000be50:	70 09       	ld.w	r9,r8[0x0]
8000be52:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000be56:	70 08       	ld.w	r8,r8[0x0]
8000be58:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000be5c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000be60:	2f c8       	sub	r8,-4
8000be62:	70 0a       	ld.w	r10,r8[0x0]
8000be64:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000be68:	2f c8       	sub	r8,-4
8000be6a:	70 08       	ld.w	r8,r8[0x0]
8000be6c:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000be70:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000be74:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000be78:	2f 88       	sub	r8,-8
8000be7a:	70 0a       	ld.w	r10,r8[0x0]
8000be7c:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000be80:	2f 88       	sub	r8,-8
8000be82:	70 08       	ld.w	r8,r8[0x0]
8000be84:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000be88:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8000be8c:	ef 48 ff fc 	st.w	r7[-4],r8
	return scp;
8000be90:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8000be94:	10 9c       	mov	r12,r8
8000be96:	2f dd       	sub	sp,-12
8000be98:	e3 cd 80 80 	ldm	sp++,r7,pc

8000be9c <quat_multi>:
	out[2] = u[0] * v[1] - u[1] * v[0];
}


UQuat_t static inline quat_multi(const UQuat_t q1, const UQuat_t q2)
{
8000be9c:	eb cd 40 e8 	pushm	r3,r5-r7,lr
8000bea0:	1a 97       	mov	r7,sp
8000bea2:	20 7d       	sub	sp,28
8000bea4:	4b d6       	lddpc	r6,8000bf98 <quat_multi+0xfc>
8000bea6:	1e 26       	rsub	r6,pc
8000bea8:	ee c8 ff ec 	sub	r8,r7,-20
8000beac:	18 95       	mov	r5,r12
	float tmp[3];
	UQuat_t out;
	tmp[0] = q1.v[1] * q2.v[2] - q1.v[2]*q2.v[1];
8000beae:	70 2a       	ld.w	r10,r8[0x8]
8000beb0:	70 79       	ld.w	r9,r8[0x1c]
8000beb2:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8000beb6:	70 3b       	ld.w	r11,r8[0xc]
8000beb8:	70 69       	ld.w	r9,r8[0x18]
8000beba:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8000bebe:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8000bec2:	ef 49 ff f4 	st.w	r7[-12],r9
	tmp[1] = q1.v[2] * q2.v[0] - q1.v[0]*q2.v[2];
8000bec6:	70 3a       	ld.w	r10,r8[0xc]
8000bec8:	70 59       	ld.w	r9,r8[0x14]
8000beca:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8000bece:	70 1b       	ld.w	r11,r8[0x4]
8000bed0:	70 79       	ld.w	r9,r8[0x1c]
8000bed2:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8000bed6:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8000beda:	ef 49 ff f8 	st.w	r7[-8],r9
	tmp[2] = q1.v[0] * q2.v[1] - q1.v[1]*q2.v[0];
8000bede:	70 1a       	ld.w	r10,r8[0x4]
8000bee0:	70 69       	ld.w	r9,r8[0x18]
8000bee2:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8000bee6:	70 2b       	ld.w	r11,r8[0x8]
8000bee8:	70 59       	ld.w	r9,r8[0x14]
8000beea:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8000beee:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8000bef2:	ef 49 ff fc 	st.w	r7[-4],r9
	out.v[0] = q2.s*q1.v[0] + q1.s *q2.v[0] +tmp[0];
8000bef6:	70 4a       	ld.w	r10,r8[0x10]
8000bef8:	70 19       	ld.w	r9,r8[0x4]
8000befa:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8000befe:	70 0b       	ld.w	r11,r8[0x0]
8000bf00:	70 59       	ld.w	r9,r8[0x14]
8000bf02:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8000bf06:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
8000bf0a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000bf0e:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
8000bf12:	ef 49 ff e8 	st.w	r7[-24],r9
	out.v[1] = q2.s*q1.v[1] + q1.s *q2.v[1] +tmp[1];
8000bf16:	70 4a       	ld.w	r10,r8[0x10]
8000bf18:	70 29       	ld.w	r9,r8[0x8]
8000bf1a:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8000bf1e:	70 0b       	ld.w	r11,r8[0x0]
8000bf20:	70 69       	ld.w	r9,r8[0x18]
8000bf22:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8000bf26:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
8000bf2a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000bf2e:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
8000bf32:	ef 49 ff ec 	st.w	r7[-20],r9
	out.v[2] = q2.s*q1.v[2] + q1.s *q2.v[2] +tmp[2];
8000bf36:	70 4a       	ld.w	r10,r8[0x10]
8000bf38:	70 39       	ld.w	r9,r8[0xc]
8000bf3a:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8000bf3e:	70 0b       	ld.w	r11,r8[0x0]
8000bf40:	70 79       	ld.w	r9,r8[0x1c]
8000bf42:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8000bf46:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
8000bf4a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000bf4e:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
8000bf52:	ef 49 ff f0 	st.w	r7[-16],r9
	out.s= q1.s*q2.s - scalar_product(q1.v, q2.v);
8000bf56:	70 0a       	ld.w	r10,r8[0x0]
8000bf58:	70 49       	ld.w	r9,r8[0x10]
8000bf5a:	e5 a2 03 a9 	cop	cp0,cr3,cr10,cr9,0x44
8000bf5e:	f0 c9 ff f0 	sub	r9,r8,-16
8000bf62:	2f c9       	sub	r9,-4
8000bf64:	2f c8       	sub	r8,-4
8000bf66:	12 9b       	mov	r11,r9
8000bf68:	10 9c       	mov	r12,r8
8000bf6a:	c6 9f       	rcall	8000be3c <scalar_product>
8000bf6c:	18 98       	mov	r8,r12
8000bf6e:	e5 a1 08 38 	cop	cp0,cr8,cr3,cr8,0x42
8000bf72:	ef 48 ff e4 	st.w	r7[-28],r8
	
	return out;
8000bf76:	0a 98       	mov	r8,r5
8000bf78:	ee c9 00 1c 	sub	r9,r7,28
8000bf7c:	20 08       	sub	r8,0
8000bf7e:	20 09       	sub	r9,0
8000bf80:	72 0a       	ld.w	r10,r9[0x0]
8000bf82:	91 0a       	st.w	r8[0x0],r10
8000bf84:	72 1a       	ld.w	r10,r9[0x4]
8000bf86:	91 1a       	st.w	r8[0x4],r10
8000bf88:	72 2a       	ld.w	r10,r9[0x8]
8000bf8a:	91 2a       	st.w	r8[0x8],r10
8000bf8c:	72 39       	ld.w	r9,r9[0xc]
8000bf8e:	91 39       	st.w	r8[0xc],r9
}
8000bf90:	0a 9c       	mov	r12,r5
8000bf92:	2f 9d       	sub	sp,-28
8000bf94:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
8000bf98:	80 00       	ld.sh	r0,r0[0x0]
8000bf9a:	bd 2a       	st.d	lr++,r10

8000bf9c <quat_inv>:

UQuat_t static inline quat_inv(const UQuat_t q)
{
8000bf9c:	eb cd 40 80 	pushm	r7,lr
8000bfa0:	1a 97       	mov	r7,sp
8000bfa2:	20 5d       	sub	sp,20
8000bfa4:	ee c9 ff f8 	sub	r9,r7,-8
8000bfa8:	18 9a       	mov	r10,r12
	int i;
	
	UQuat_t qinv;
	qinv.s = q.s;
8000bfaa:	72 08       	ld.w	r8,r9[0x0]
8000bfac:	ef 48 ff ec 	st.w	r7[-20],r8
	for (i=0;i<3;i++)
8000bfb0:	30 08       	mov	r8,0
8000bfb2:	ef 48 ff fc 	st.w	r7[-4],r8
8000bfb6:	c1 58       	rjmp	8000bfe0 <quat_inv+0x44>
	{
		qinv.v[i] = -q.v[i];
8000bfb8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bfbc:	ee fb ff fc 	ld.w	r11,r7[-4]
8000bfc0:	2f fb       	sub	r11,-1
8000bfc2:	f2 0b 03 2b 	ld.w	r11,r9[r11<<0x2]
8000bfc6:	ee 1b 80 00 	eorh	r11,0x8000
8000bfca:	2f f8       	sub	r8,-1
8000bfcc:	a3 68       	lsl	r8,0x2
8000bfce:	ee 08 00 08 	add	r8,r7,r8
8000bfd2:	f1 4b ff ec 	st.w	r8[-20],r11
{
	int i;
	
	UQuat_t qinv;
	qinv.s = q.s;
	for (i=0;i<3;i++)
8000bfd6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bfda:	2f f8       	sub	r8,-1
8000bfdc:	ef 48 ff fc 	st.w	r7[-4],r8
8000bfe0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bfe4:	58 28       	cp.w	r8,2
8000bfe6:	fe 9a ff e9 	brle	8000bfb8 <quat_inv+0x1c>
	{
		qinv.v[i] = -q.v[i];
	}
	return qinv;
8000bfea:	14 98       	mov	r8,r10
8000bfec:	ee c9 00 14 	sub	r9,r7,20
8000bff0:	20 08       	sub	r8,0
8000bff2:	20 09       	sub	r9,0
8000bff4:	72 0b       	ld.w	r11,r9[0x0]
8000bff6:	91 0b       	st.w	r8[0x0],r11
8000bff8:	72 1b       	ld.w	r11,r9[0x4]
8000bffa:	91 1b       	st.w	r8[0x4],r11
8000bffc:	72 2b       	ld.w	r11,r9[0x8]
8000bffe:	91 2b       	st.w	r8[0x8],r11
8000c000:	72 39       	ld.w	r9,r9[0xc]
8000c002:	91 39       	st.w	r8[0xc],r9
}
8000c004:	14 9c       	mov	r12,r10
8000c006:	2f bd       	sub	sp,-20
8000c008:	e3 cd 80 80 	ldm	sp++,r7,pc

8000c00c <quat_global_to_local>:

UQuat_t static inline quat_global_to_local(const UQuat_t qe, const UQuat_t qvect)
{
8000c00c:	eb cd 40 e8 	pushm	r3,r5-r7,lr
8000c010:	1a 97       	mov	r7,sp
8000c012:	20 cd       	sub	sp,48
8000c014:	4b c6       	lddpc	r6,8000c104 <quat_global_to_local+0xf8>
8000c016:	1e 26       	rsub	r6,pc
8000c018:	ee c5 ff ec 	sub	r5,r7,-20
8000c01c:	18 93       	mov	r3,r12
	UQuat_t qinv, qtmp;
	
	qinv = quat_inv(qe);
8000c01e:	ee ca 00 10 	sub	r10,r7,16
8000c022:	20 4d       	sub	sp,16
8000c024:	1a 98       	mov	r8,sp
8000c026:	0a 99       	mov	r9,r5
8000c028:	20 08       	sub	r8,0
8000c02a:	20 09       	sub	r9,0
8000c02c:	72 0b       	ld.w	r11,r9[0x0]
8000c02e:	91 0b       	st.w	r8[0x0],r11
8000c030:	72 1b       	ld.w	r11,r9[0x4]
8000c032:	91 1b       	st.w	r8[0x4],r11
8000c034:	72 2b       	ld.w	r11,r9[0x8]
8000c036:	91 2b       	st.w	r8[0x8],r11
8000c038:	72 39       	ld.w	r9,r9[0xc]
8000c03a:	91 39       	st.w	r8[0xc],r9
8000c03c:	14 9c       	mov	r12,r10
8000c03e:	ca ff       	rcall	8000bf9c <quat_inv>
8000c040:	2f cd       	sub	sp,-16
	qtmp = quat_multi(qinv,qvect);
8000c042:	ee ca 00 20 	sub	r10,r7,32
8000c046:	20 4d       	sub	sp,16
8000c048:	1a 98       	mov	r8,sp
8000c04a:	ea c9 ff f0 	sub	r9,r5,-16
8000c04e:	20 08       	sub	r8,0
8000c050:	20 09       	sub	r9,0
8000c052:	72 0b       	ld.w	r11,r9[0x0]
8000c054:	91 0b       	st.w	r8[0x0],r11
8000c056:	72 1b       	ld.w	r11,r9[0x4]
8000c058:	91 1b       	st.w	r8[0x4],r11
8000c05a:	72 2b       	ld.w	r11,r9[0x8]
8000c05c:	91 2b       	st.w	r8[0x8],r11
8000c05e:	72 39       	ld.w	r9,r9[0xc]
8000c060:	91 39       	st.w	r8[0xc],r9
8000c062:	20 4d       	sub	sp,16
8000c064:	1a 98       	mov	r8,sp
8000c066:	ee c9 00 10 	sub	r9,r7,16
8000c06a:	20 08       	sub	r8,0
8000c06c:	20 09       	sub	r9,0
8000c06e:	72 0b       	ld.w	r11,r9[0x0]
8000c070:	91 0b       	st.w	r8[0x0],r11
8000c072:	72 1b       	ld.w	r11,r9[0x4]
8000c074:	91 1b       	st.w	r8[0x4],r11
8000c076:	72 2b       	ld.w	r11,r9[0x8]
8000c078:	91 2b       	st.w	r8[0x8],r11
8000c07a:	72 39       	ld.w	r9,r9[0xc]
8000c07c:	91 39       	st.w	r8[0xc],r9
8000c07e:	14 9c       	mov	r12,r10
8000c080:	c0 ef       	rcall	8000be9c <quat_multi>
8000c082:	2f 8d       	sub	sp,-32
	qtmp = quat_multi(qtmp,qe);
8000c084:	ee ca 00 30 	sub	r10,r7,48
8000c088:	20 4d       	sub	sp,16
8000c08a:	1a 98       	mov	r8,sp
8000c08c:	0a 99       	mov	r9,r5
8000c08e:	20 08       	sub	r8,0
8000c090:	20 09       	sub	r9,0
8000c092:	72 0b       	ld.w	r11,r9[0x0]
8000c094:	91 0b       	st.w	r8[0x0],r11
8000c096:	72 1b       	ld.w	r11,r9[0x4]
8000c098:	91 1b       	st.w	r8[0x4],r11
8000c09a:	72 2b       	ld.w	r11,r9[0x8]
8000c09c:	91 2b       	st.w	r8[0x8],r11
8000c09e:	72 39       	ld.w	r9,r9[0xc]
8000c0a0:	91 39       	st.w	r8[0xc],r9
8000c0a2:	20 4d       	sub	sp,16
8000c0a4:	1a 98       	mov	r8,sp
8000c0a6:	ee c9 00 20 	sub	r9,r7,32
8000c0aa:	20 08       	sub	r8,0
8000c0ac:	20 09       	sub	r9,0
8000c0ae:	72 0b       	ld.w	r11,r9[0x0]
8000c0b0:	91 0b       	st.w	r8[0x0],r11
8000c0b2:	72 1b       	ld.w	r11,r9[0x4]
8000c0b4:	91 1b       	st.w	r8[0x4],r11
8000c0b6:	72 2b       	ld.w	r11,r9[0x8]
8000c0b8:	91 2b       	st.w	r8[0x8],r11
8000c0ba:	72 39       	ld.w	r9,r9[0xc]
8000c0bc:	91 39       	st.w	r8[0xc],r9
8000c0be:	14 9c       	mov	r12,r10
8000c0c0:	ce ee       	rcall	8000be9c <quat_multi>
8000c0c2:	2f 8d       	sub	sp,-32
8000c0c4:	ee c8 00 20 	sub	r8,r7,32
8000c0c8:	ee c9 00 30 	sub	r9,r7,48
8000c0cc:	20 08       	sub	r8,0
8000c0ce:	20 09       	sub	r9,0
8000c0d0:	72 0a       	ld.w	r10,r9[0x0]
8000c0d2:	91 0a       	st.w	r8[0x0],r10
8000c0d4:	72 1a       	ld.w	r10,r9[0x4]
8000c0d6:	91 1a       	st.w	r8[0x4],r10
8000c0d8:	72 2a       	ld.w	r10,r9[0x8]
8000c0da:	91 2a       	st.w	r8[0x8],r10
8000c0dc:	72 39       	ld.w	r9,r9[0xc]
8000c0de:	91 39       	st.w	r8[0xc],r9

	return qtmp;
8000c0e0:	06 98       	mov	r8,r3
8000c0e2:	ee c9 00 20 	sub	r9,r7,32
8000c0e6:	20 08       	sub	r8,0
8000c0e8:	20 09       	sub	r9,0
8000c0ea:	72 0a       	ld.w	r10,r9[0x0]
8000c0ec:	91 0a       	st.w	r8[0x0],r10
8000c0ee:	72 1a       	ld.w	r10,r9[0x4]
8000c0f0:	91 1a       	st.w	r8[0x4],r10
8000c0f2:	72 2a       	ld.w	r10,r9[0x8]
8000c0f4:	91 2a       	st.w	r8[0x8],r10
8000c0f6:	72 39       	ld.w	r9,r9[0xc]
8000c0f8:	91 39       	st.w	r8[0xc],r9
}
8000c0fa:	06 9c       	mov	r12,r3
8000c0fc:	2f 4d       	sub	sp,-48
8000c0fe:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
8000c102:	00 00       	add	r0,r0
8000c104:	80 00       	ld.sh	r0,r0[0x0]
8000c106:	be 9a       	st.b	pc[0x1],r10

8000c108 <quat_local_to_global>:

UQuat_t static inline quat_local_to_global(const UQuat_t qe, const UQuat_t qvect)
{
8000c108:	eb cd 40 e8 	pushm	r3,r5-r7,lr
8000c10c:	1a 97       	mov	r7,sp
8000c10e:	20 cd       	sub	sp,48
8000c110:	4b c6       	lddpc	r6,8000c200 <quat_local_to_global+0xf8>
8000c112:	1e 26       	rsub	r6,pc
8000c114:	ee c5 ff ec 	sub	r5,r7,-20
8000c118:	18 93       	mov	r3,r12
	UQuat_t qinv, qtmp;
	
	qinv = quat_inv(qe);
8000c11a:	ee ca 00 10 	sub	r10,r7,16
8000c11e:	20 4d       	sub	sp,16
8000c120:	1a 98       	mov	r8,sp
8000c122:	0a 99       	mov	r9,r5
8000c124:	20 08       	sub	r8,0
8000c126:	20 09       	sub	r9,0
8000c128:	72 0b       	ld.w	r11,r9[0x0]
8000c12a:	91 0b       	st.w	r8[0x0],r11
8000c12c:	72 1b       	ld.w	r11,r9[0x4]
8000c12e:	91 1b       	st.w	r8[0x4],r11
8000c130:	72 2b       	ld.w	r11,r9[0x8]
8000c132:	91 2b       	st.w	r8[0x8],r11
8000c134:	72 39       	ld.w	r9,r9[0xc]
8000c136:	91 39       	st.w	r8[0xc],r9
8000c138:	14 9c       	mov	r12,r10
8000c13a:	c3 1f       	rcall	8000bf9c <quat_inv>
8000c13c:	2f cd       	sub	sp,-16
	qtmp = quat_multi(qe, qvect);
8000c13e:	ee ca 00 20 	sub	r10,r7,32
8000c142:	20 4d       	sub	sp,16
8000c144:	1a 98       	mov	r8,sp
8000c146:	ea c9 ff f0 	sub	r9,r5,-16
8000c14a:	20 08       	sub	r8,0
8000c14c:	20 09       	sub	r9,0
8000c14e:	72 0b       	ld.w	r11,r9[0x0]
8000c150:	91 0b       	st.w	r8[0x0],r11
8000c152:	72 1b       	ld.w	r11,r9[0x4]
8000c154:	91 1b       	st.w	r8[0x4],r11
8000c156:	72 2b       	ld.w	r11,r9[0x8]
8000c158:	91 2b       	st.w	r8[0x8],r11
8000c15a:	72 39       	ld.w	r9,r9[0xc]
8000c15c:	91 39       	st.w	r8[0xc],r9
8000c15e:	20 4d       	sub	sp,16
8000c160:	1a 98       	mov	r8,sp
8000c162:	0a 99       	mov	r9,r5
8000c164:	20 08       	sub	r8,0
8000c166:	20 09       	sub	r9,0
8000c168:	72 0b       	ld.w	r11,r9[0x0]
8000c16a:	91 0b       	st.w	r8[0x0],r11
8000c16c:	72 1b       	ld.w	r11,r9[0x4]
8000c16e:	91 1b       	st.w	r8[0x4],r11
8000c170:	72 2b       	ld.w	r11,r9[0x8]
8000c172:	91 2b       	st.w	r8[0x8],r11
8000c174:	72 39       	ld.w	r9,r9[0xc]
8000c176:	91 39       	st.w	r8[0xc],r9
8000c178:	14 9c       	mov	r12,r10
8000c17a:	c9 1e       	rcall	8000be9c <quat_multi>
8000c17c:	2f 8d       	sub	sp,-32
	qtmp = quat_multi(qtmp, qinv);
8000c17e:	ee ca 00 30 	sub	r10,r7,48
8000c182:	20 4d       	sub	sp,16
8000c184:	1a 98       	mov	r8,sp
8000c186:	ee c9 00 10 	sub	r9,r7,16
8000c18a:	20 08       	sub	r8,0
8000c18c:	20 09       	sub	r9,0
8000c18e:	72 0b       	ld.w	r11,r9[0x0]
8000c190:	91 0b       	st.w	r8[0x0],r11
8000c192:	72 1b       	ld.w	r11,r9[0x4]
8000c194:	91 1b       	st.w	r8[0x4],r11
8000c196:	72 2b       	ld.w	r11,r9[0x8]
8000c198:	91 2b       	st.w	r8[0x8],r11
8000c19a:	72 39       	ld.w	r9,r9[0xc]
8000c19c:	91 39       	st.w	r8[0xc],r9
8000c19e:	20 4d       	sub	sp,16
8000c1a0:	1a 98       	mov	r8,sp
8000c1a2:	ee c9 00 20 	sub	r9,r7,32
8000c1a6:	20 08       	sub	r8,0
8000c1a8:	20 09       	sub	r9,0
8000c1aa:	72 0b       	ld.w	r11,r9[0x0]
8000c1ac:	91 0b       	st.w	r8[0x0],r11
8000c1ae:	72 1b       	ld.w	r11,r9[0x4]
8000c1b0:	91 1b       	st.w	r8[0x4],r11
8000c1b2:	72 2b       	ld.w	r11,r9[0x8]
8000c1b4:	91 2b       	st.w	r8[0x8],r11
8000c1b6:	72 39       	ld.w	r9,r9[0xc]
8000c1b8:	91 39       	st.w	r8[0xc],r9
8000c1ba:	14 9c       	mov	r12,r10
8000c1bc:	c7 0e       	rcall	8000be9c <quat_multi>
8000c1be:	2f 8d       	sub	sp,-32
8000c1c0:	ee c8 00 20 	sub	r8,r7,32
8000c1c4:	ee c9 00 30 	sub	r9,r7,48
8000c1c8:	20 08       	sub	r8,0
8000c1ca:	20 09       	sub	r9,0
8000c1cc:	72 0a       	ld.w	r10,r9[0x0]
8000c1ce:	91 0a       	st.w	r8[0x0],r10
8000c1d0:	72 1a       	ld.w	r10,r9[0x4]
8000c1d2:	91 1a       	st.w	r8[0x4],r10
8000c1d4:	72 2a       	ld.w	r10,r9[0x8]
8000c1d6:	91 2a       	st.w	r8[0x8],r10
8000c1d8:	72 39       	ld.w	r9,r9[0xc]
8000c1da:	91 39       	st.w	r8[0xc],r9
	
	return qtmp;
8000c1dc:	06 98       	mov	r8,r3
8000c1de:	ee c9 00 20 	sub	r9,r7,32
8000c1e2:	20 08       	sub	r8,0
8000c1e4:	20 09       	sub	r9,0
8000c1e6:	72 0a       	ld.w	r10,r9[0x0]
8000c1e8:	91 0a       	st.w	r8[0x0],r10
8000c1ea:	72 1a       	ld.w	r10,r9[0x4]
8000c1ec:	91 1a       	st.w	r8[0x4],r10
8000c1ee:	72 2a       	ld.w	r10,r9[0x8]
8000c1f0:	91 2a       	st.w	r8[0x8],r10
8000c1f2:	72 39       	ld.w	r9,r9[0xc]
8000c1f4:	91 39       	st.w	r8[0xc],r9
}
8000c1f6:	06 9c       	mov	r12,r3
8000c1f8:	2f 4d       	sub	sp,-48
8000c1fa:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
8000c1fe:	00 00       	add	r0,r0
8000c200:	80 00       	ld.sh	r0,r0[0x0]
8000c202:	bf 96       	lsr	r6,0x1f

8000c204 <fast_sqrt>:

// fast newton iteration for approximate square root
float static inline fast_sqrt(float input) {
8000c204:	eb cd 40 c0 	pushm	r6-r7,lr
8000c208:	1a 97       	mov	r7,sp
8000c20a:	20 2d       	sub	sp,8
8000c20c:	4b 26       	lddpc	r6,8000c2d4 <fast_sqrt+0xd0>
8000c20e:	1e 26       	rsub	r6,pc
8000c210:	ef 4c ff f8 	st.w	r7[-8],r12
	if (input<0) {
8000c214:	30 18       	mov	r8,1
8000c216:	ee fa ff f8 	ld.w	r10,r7[-8]
8000c21a:	30 09       	mov	r9,0
8000c21c:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
8000c220:	e0 8c 00 03 	brvs	8000c226 <fast_sqrt+0x22>
8000c224:	c0 25       	brlt	8000c228 <fast_sqrt+0x24>
8000c226:	30 08       	mov	r8,0
8000c228:	5c 58       	castu.b	r8
8000c22a:	c0 30       	breq	8000c230 <fast_sqrt+0x2c>
		//dbg_print("negative root");
		return 0.0;
8000c22c:	30 08       	mov	r8,0
8000c22e:	c4 f8       	rjmp	8000c2cc <fast_sqrt+0xc8>
	}
	float result=1.0;
8000c230:	fc 18 3f 80 	movh	r8,0x3f80
8000c234:	ef 48 ff fc 	st.w	r7[-4],r8
	result=0.5*(result+(input/result));
8000c238:	ee fb ff fc 	ld.w	r11,r7[-4]
8000c23c:	ee fc ff f8 	ld.w	r12,r7[-8]
8000c240:	f0 16 00 08 	mcall	r6[32]
8000c244:	18 98       	mov	r8,r12
8000c246:	10 99       	mov	r9,r8
8000c248:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000c24c:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000c250:	fc 18 3f 00 	movh	r8,0x3f00
8000c254:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8000c258:	ef 48 ff fc 	st.w	r7[-4],r8
	result=0.5*(result+(input/result));
8000c25c:	ee fb ff fc 	ld.w	r11,r7[-4]
8000c260:	ee fc ff f8 	ld.w	r12,r7[-8]
8000c264:	f0 16 00 08 	mcall	r6[32]
8000c268:	18 98       	mov	r8,r12
8000c26a:	10 99       	mov	r9,r8
8000c26c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000c270:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000c274:	fc 18 3f 00 	movh	r8,0x3f00
8000c278:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8000c27c:	ef 48 ff fc 	st.w	r7[-4],r8
	result=0.5*(result+(input/result));
8000c280:	ee fb ff fc 	ld.w	r11,r7[-4]
8000c284:	ee fc ff f8 	ld.w	r12,r7[-8]
8000c288:	f0 16 00 08 	mcall	r6[32]
8000c28c:	18 98       	mov	r8,r12
8000c28e:	10 99       	mov	r9,r8
8000c290:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000c294:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000c298:	fc 18 3f 00 	movh	r8,0x3f00
8000c29c:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8000c2a0:	ef 48 ff fc 	st.w	r7[-4],r8
	result=0.5*(result+(input/result));
8000c2a4:	ee fb ff fc 	ld.w	r11,r7[-4]
8000c2a8:	ee fc ff f8 	ld.w	r12,r7[-8]
8000c2ac:	f0 16 00 08 	mcall	r6[32]
8000c2b0:	18 98       	mov	r8,r12
8000c2b2:	10 99       	mov	r9,r8
8000c2b4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000c2b8:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000c2bc:	fc 18 3f 00 	movh	r8,0x3f00
8000c2c0:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8000c2c4:	ef 48 ff fc 	st.w	r7[-4],r8
	return result;
8000c2c8:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8000c2cc:	10 9c       	mov	r12,r8
8000c2ce:	2f ed       	sub	sp,-8
8000c2d0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000c2d4:	80 00       	ld.sh	r0,r0[0x0]
8000c2d6:	c0 92       	brcc	8000c2e8 <interpolate+0x10>

8000c2d8 <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
8000c2d8:	eb cd 40 c0 	pushm	r6-r7,lr
8000c2dc:	1a 97       	mov	r7,sp
8000c2de:	20 6d       	sub	sp,24
8000c2e0:	49 e6       	lddpc	r6,8000c358 <interpolate+0x80>
8000c2e2:	1e 26       	rsub	r6,pc
8000c2e4:	ef 4c ff f8 	st.w	r7[-8],r12
8000c2e8:	ef 4b ff f4 	st.w	r7[-12],r11
8000c2ec:	ef 4a ff f0 	st.w	r7[-16],r10
8000c2f0:	ef 49 ff ec 	st.w	r7[-20],r9
8000c2f4:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
8000c2f8:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000c2fc:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000c300:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
8000c304:	c0 41       	brne	8000c30c <interpolate+0x34>
	{
		return y1;
8000c306:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000c30a:	c2 38       	rjmp	8000c350 <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
8000c30c:	ee f9 ff e8 	ld.w	r9,r7[-24]
8000c310:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000c314:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8000c318:	ee fa ff f8 	ld.w	r10,r7[-8]
8000c31c:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c320:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
8000c324:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8000c328:	ee fa ff f0 	ld.w	r10,r7[-16]
8000c32c:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000c330:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8000c334:	12 9b       	mov	r11,r9
8000c336:	10 9c       	mov	r12,r8
8000c338:	f0 16 00 08 	mcall	r6[32]
8000c33c:	18 98       	mov	r8,r12
8000c33e:	10 99       	mov	r9,r8
8000c340:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000c344:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8000c348:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
8000c34c:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
8000c350:	10 9c       	mov	r12,r8
8000c352:	2f ad       	sub	sp,-24
8000c354:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000c358:	80 00       	ld.sh	r0,r0[0x0]
8000c35a:	c1 66       	brmi	8000c386 <interpolate+0xae>
8000c35c:	49 6e       	lddpc	lr,8000c3b4 <qfInit+0x12>
8000c35e:	69 74       	ld.w	r4,r4[0x5c]
8000c360:	69 61       	ld.w	r1,r4[0x58]
8000c362:	6c 20       	ld.w	r0,r6[0x8]
8000c364:	79 61       	ld.w	r1,r12[0x58]
8000c366:	77 3a       	ld.w	r10,r11[0x4c]
8000c368:	00 00       	add	r0,r0
8000c36a:	00 00       	add	r0,r0
8000c36c:	20 3d       	sub	sp,12
8000c36e:	20 61       	sub	r1,6
8000c370:	74 61       	ld.w	r1,r10[0x18]
8000c372:	6e 32       	ld.w	r2,r7[0xc]
8000c374:	28 6d       	sub	sp,-488
8000c376:	61 67       	ld.w	r7,r0[0x58]
8000c378:	5f 79       	srpl	r9
8000c37a:	2c 6d       	sub	sp,-232
8000c37c:	61 67       	ld.w	r7,r0[0x58]
8000c37e:	5f 78       	srpl	r8
8000c380:	29 20       	sub	r0,-110
8000c382:	3d 00       	mov	r0,-48
8000c384:	20 2c       	sub	r12,2
8000c386:	00 00       	add	r0,r0
8000c388:	0a 00       	add	r0,r5
8000c38a:	00 00       	add	r0,r0
8000c38c:	46 72       	lddsp	r2,sp[0x19c]
8000c38e:	6f 6e       	ld.w	lr,r7[0x58]
8000c390:	74 20       	ld.w	r0,r10[0x8]
8000c392:	6d 61       	ld.w	r1,r6[0x58]
8000c394:	67 28       	ld.w	r8,r3[0x48]
8000c396:	7a 29       	ld.w	r9,sp[0x8]
8000c398:	20 28       	sub	r8,2
8000c39a:	2a 31       	sub	r1,-93
8000c39c:	30 30       	mov	r0,3
8000c39e:	29 3a       	sub	r10,-109
	...

8000c3a2 <qfInit>:

float front_mag_vect_z;



void qfInit(Quat_Attitude_t *attitude,  float *scalefactor, float *bias) {
8000c3a2:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
8000c3a6:	1a 97       	mov	r7,sp
8000c3a8:	20 5d       	sub	sp,20
8000c3aa:	fe f6 03 46 	ld.w	r6,pc[838]
8000c3ae:	1e 26       	rsub	r6,pc
8000c3b0:	ef 4c ff f4 	st.w	r7[-12],r12
8000c3b4:	ef 4b ff f0 	st.w	r7[-16],r11
8000c3b8:	ef 4a ff ec 	st.w	r7[-20],r10
	uint8_t i;
	float init_angle;

	for (i=0; i<9; i++){
8000c3bc:	30 08       	mov	r8,0
8000c3be:	ef 68 ff fb 	st.b	r7[-5],r8
8000c3c2:	c2 c8       	rjmp	8000c41a <qfInit+0x78>
		attitude->sf[i]=1.0/(float)scalefactor[i];
8000c3c4:	ef 35 ff fb 	ld.ub	r5,r7[-5]
8000c3c8:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000c3cc:	a3 68       	lsl	r8,0x2
8000c3ce:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000c3d2:	f2 08 00 08 	add	r8,r9,r8
8000c3d6:	70 08       	ld.w	r8,r8[0x0]
8000c3d8:	10 9b       	mov	r11,r8
8000c3da:	fc 1c 3f 80 	movh	r12,0x3f80
8000c3de:	f0 16 00 08 	mcall	r6[32]
8000c3e2:	18 98       	mov	r8,r12
8000c3e4:	10 9a       	mov	r10,r8
8000c3e6:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c3ea:	ea c9 ff eb 	sub	r9,r5,-21
8000c3ee:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		attitude->be[i]=bias[i];
8000c3f2:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000c3f6:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000c3fa:	a3 68       	lsl	r8,0x2
8000c3fc:	ee fa ff ec 	ld.w	r10,r7[-20]
8000c400:	f4 08 00 08 	add	r8,r10,r8
8000c404:	70 0a       	ld.w	r10,r8[0x0]
8000c406:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c40a:	2f 49       	sub	r9,-12
8000c40c:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10

void qfInit(Quat_Attitude_t *attitude,  float *scalefactor, float *bias) {
	uint8_t i;
	float init_angle;

	for (i=0; i<9; i++){
8000c410:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000c414:	2f f8       	sub	r8,-1
8000c416:	ef 68 ff fb 	st.b	r7[-5],r8
8000c41a:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000c41e:	30 88       	mov	r8,8
8000c420:	f0 09 18 00 	cp.b	r9,r8
8000c424:	fe 98 ff d0 	brls	8000c3c4 <qfInit+0x22>
		attitude->sf[i]=1.0/(float)scalefactor[i];
		attitude->be[i]=bias[i];
		
	}
	for (i=0; i<3; i++){
8000c428:	30 08       	mov	r8,0
8000c42a:	ef 68 ff fb 	st.b	r7[-5],r8
8000c42e:	c0 e8       	rjmp	8000c44a <qfInit+0xa8>
		attitude->acc_bf[i]=0.0;
8000c430:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000c434:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c438:	2d 09       	sub	r9,-48
8000c43a:	30 0a       	mov	r10,0
8000c43c:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	for (i=0; i<9; i++){
		attitude->sf[i]=1.0/(float)scalefactor[i];
		attitude->be[i]=bias[i];
		
	}
	for (i=0; i<3; i++){
8000c440:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000c444:	2f f8       	sub	r8,-1
8000c446:	ef 68 ff fb 	st.b	r7[-5],r8
8000c44a:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000c44e:	30 28       	mov	r8,2
8000c450:	f0 09 18 00 	cp.b	r9,r8
8000c454:	fe 98 ff ee 	brls	8000c430 <qfInit+0x8e>

//	attitude->be[3]=-0.03;
//	attitude->be[4]=0.08;
//	attitude->be[5]=0.15;

	attitude->qe.s=1.0;
8000c458:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c45c:	fc 19 3f 80 	movh	r9,0x3f80
8000c460:	91 09       	st.w	r8[0x0],r9
	attitude->qe.v[0]=0.0;
8000c462:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c466:	30 09       	mov	r9,0
8000c468:	91 19       	st.w	r8[0x4],r9
	attitude->qe.v[1]=0.0;
8000c46a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c46e:	30 09       	mov	r9,0
8000c470:	91 29       	st.w	r8[0x8],r9
	attitude->qe.v[2]=0.0;
8000c472:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c476:	30 09       	mov	r9,0
8000c478:	91 39       	st.w	r8[0xc],r9

	for(i=0; i<3; i++)
8000c47a:	30 08       	mov	r8,0
8000c47c:	ef 68 ff fb 	st.b	r7[-5],r8
8000c480:	c2 a8       	rjmp	8000c4d4 <qfInit+0x132>
	{
		attitude->mag[i]=((float)attitude->raw_mag_mean[i])*attitude->sf[i+COMPASS_OFFSET]-attitude->be[i+COMPASS_OFFSET];
8000c482:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000c486:	ef 3a ff fb 	ld.ub	r10,r7[-5]
8000c48a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c48e:	2d 5a       	sub	r10,-43
8000c490:	f0 0a 03 2a 	ld.w	r10,r8[r10<<0x2]
8000c494:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000c498:	f0 cb ff fa 	sub	r11,r8,-6
8000c49c:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c4a0:	2e bb       	sub	r11,-21
8000c4a2:	f0 0b 03 28 	ld.w	r8,r8[r11<<0x2]
8000c4a6:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
8000c4aa:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000c4ae:	f0 cb ff fa 	sub	r11,r8,-6
8000c4b2:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c4b6:	2f 4b       	sub	r11,-12
8000c4b8:	f0 0b 03 28 	ld.w	r8,r8[r11<<0x2]
8000c4bc:	e5 a1 0a a8 	cop	cp0,cr10,cr10,cr8,0x42
8000c4c0:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c4c4:	2d c9       	sub	r9,-36
8000c4c6:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	attitude->qe.s=1.0;
	attitude->qe.v[0]=0.0;
	attitude->qe.v[1]=0.0;
	attitude->qe.v[2]=0.0;

	for(i=0; i<3; i++)
8000c4ca:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000c4ce:	2f f8       	sub	r8,-1
8000c4d0:	ef 68 ff fb 	st.b	r7[-5],r8
8000c4d4:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000c4d8:	30 28       	mov	r8,2
8000c4da:	f0 09 18 00 	cp.b	r9,r8
8000c4de:	fe 98 ff d2 	brls	8000c482 <qfInit+0xe0>
	{
		attitude->mag[i]=((float)attitude->raw_mag_mean[i])*attitude->sf[i+COMPASS_OFFSET]-attitude->be[i+COMPASS_OFFSET];
	}
	
	init_angle = atan2(-attitude->mag[1],attitude->mag[0]);
8000c4e2:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c4e6:	f0 f8 00 90 	ld.w	r8,r8[144]
8000c4ea:	10 9c       	mov	r12,r8
8000c4ec:	f0 16 00 02 	mcall	r6[8]
8000c4f0:	14 92       	mov	r2,r10
8000c4f2:	16 93       	mov	r3,r11
8000c4f4:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c4f8:	f0 f8 00 94 	ld.w	r8,r8[148]
8000c4fc:	ee 18 80 00 	eorh	r8,0x8000
8000c500:	10 9c       	mov	r12,r8
8000c502:	f0 16 00 02 	mcall	r6[8]
8000c506:	04 98       	mov	r8,r2
8000c508:	06 99       	mov	r9,r3
8000c50a:	f0 16 00 4f 	mcall	r6[316]
8000c50e:	14 98       	mov	r8,r10
8000c510:	16 99       	mov	r9,r11
8000c512:	10 9a       	mov	r10,r8
8000c514:	12 9b       	mov	r11,r9
8000c516:	f0 16 00 09 	mcall	r6[36]
8000c51a:	18 98       	mov	r8,r12
8000c51c:	ef 48 ff fc 	st.w	r7[-4],r8

	dbg_print("Initial yaw:");
8000c520:	fe cc 01 c4 	sub	r12,pc,452
8000c524:	f0 16 00 01 	mcall	r6[4]
	dbg_print_num(init_angle*100.0,10);
8000c528:	ee fc ff fc 	ld.w	r12,r7[-4]
8000c52c:	f0 16 00 02 	mcall	r6[8]
8000c530:	30 08       	mov	r8,0
8000c532:	fc 19 40 59 	movh	r9,0x4059
8000c536:	f0 16 00 03 	mcall	r6[12]
8000c53a:	14 98       	mov	r8,r10
8000c53c:	16 99       	mov	r9,r11
8000c53e:	10 9a       	mov	r10,r8
8000c540:	12 9b       	mov	r11,r9
8000c542:	f0 16 00 14 	mcall	r6[80]
8000c546:	18 98       	mov	r8,r12
8000c548:	30 ab       	mov	r11,10
8000c54a:	10 9c       	mov	r12,r8
8000c54c:	f0 16 00 04 	mcall	r6[16]
	dbg_print(" = atan2(mag_y,mag_x) =");
8000c550:	fe cc 01 e4 	sub	r12,pc,484
8000c554:	f0 16 00 01 	mcall	r6[4]
	dbg_print_num(attitude->mag[1]*100.0,10);
8000c558:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c55c:	f0 f8 00 94 	ld.w	r8,r8[148]
8000c560:	10 9c       	mov	r12,r8
8000c562:	f0 16 00 02 	mcall	r6[8]
8000c566:	30 08       	mov	r8,0
8000c568:	fc 19 40 59 	movh	r9,0x4059
8000c56c:	f0 16 00 03 	mcall	r6[12]
8000c570:	14 98       	mov	r8,r10
8000c572:	16 99       	mov	r9,r11
8000c574:	10 9a       	mov	r10,r8
8000c576:	12 9b       	mov	r11,r9
8000c578:	f0 16 00 14 	mcall	r6[80]
8000c57c:	18 98       	mov	r8,r12
8000c57e:	30 ab       	mov	r11,10
8000c580:	10 9c       	mov	r12,r8
8000c582:	f0 16 00 04 	mcall	r6[16]
	dbg_print(" ,");
8000c586:	fe cc 02 02 	sub	r12,pc,514
8000c58a:	f0 16 00 01 	mcall	r6[4]
	dbg_print_num(attitude->mag[0]*100.0,10);
8000c58e:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c592:	f0 f8 00 90 	ld.w	r8,r8[144]
8000c596:	10 9c       	mov	r12,r8
8000c598:	f0 16 00 02 	mcall	r6[8]
8000c59c:	30 08       	mov	r8,0
8000c59e:	fc 19 40 59 	movh	r9,0x4059
8000c5a2:	f0 16 00 03 	mcall	r6[12]
8000c5a6:	14 98       	mov	r8,r10
8000c5a8:	16 99       	mov	r9,r11
8000c5aa:	10 9a       	mov	r10,r8
8000c5ac:	12 9b       	mov	r11,r9
8000c5ae:	f0 16 00 14 	mcall	r6[80]
8000c5b2:	18 98       	mov	r8,r12
8000c5b4:	30 ab       	mov	r11,10
8000c5b6:	10 9c       	mov	r12,r8
8000c5b8:	f0 16 00 04 	mcall	r6[16]
	dbg_print("\n");
8000c5bc:	fe cc 02 34 	sub	r12,pc,564
8000c5c0:	f0 16 00 01 	mcall	r6[4]

	front_mag_vect_z = attitude->mag[2];
8000c5c4:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c5c8:	f0 f9 00 98 	ld.w	r9,r8[152]
8000c5cc:	ec f8 03 80 	ld.w	r8,r6[896]
8000c5d0:	91 09       	st.w	r8[0x0],r9
	dbg_print("Front mag(z) (*100):");
8000c5d2:	fe cc 02 46 	sub	r12,pc,582
8000c5d6:	f0 16 00 01 	mcall	r6[4]
	dbg_print_num(front_mag_vect_z*100.0,10);
8000c5da:	ec f8 03 80 	ld.w	r8,r6[896]
8000c5de:	70 08       	ld.w	r8,r8[0x0]
8000c5e0:	10 9c       	mov	r12,r8
8000c5e2:	f0 16 00 02 	mcall	r6[8]
8000c5e6:	30 08       	mov	r8,0
8000c5e8:	fc 19 40 59 	movh	r9,0x4059
8000c5ec:	f0 16 00 03 	mcall	r6[12]
8000c5f0:	14 98       	mov	r8,r10
8000c5f2:	16 99       	mov	r9,r11
8000c5f4:	10 9a       	mov	r10,r8
8000c5f6:	12 9b       	mov	r11,r9
8000c5f8:	f0 16 00 14 	mcall	r6[80]
8000c5fc:	18 98       	mov	r8,r12
8000c5fe:	30 ab       	mov	r11,10
8000c600:	10 9c       	mov	r12,r8
8000c602:	f0 16 00 04 	mcall	r6[16]
	dbg_print("\n");
8000c606:	fe cc 02 7e 	sub	r12,pc,638
8000c60a:	f0 16 00 01 	mcall	r6[4]

	attitude->qe.s = cos(init_angle/2.0);
8000c60e:	ee fc ff fc 	ld.w	r12,r7[-4]
8000c612:	f0 16 00 02 	mcall	r6[8]
8000c616:	30 08       	mov	r8,0
8000c618:	fc 19 40 00 	movh	r9,0x4000
8000c61c:	f0 16 00 0c 	mcall	r6[48]
8000c620:	14 98       	mov	r8,r10
8000c622:	16 99       	mov	r9,r11
8000c624:	10 9a       	mov	r10,r8
8000c626:	12 9b       	mov	r11,r9
8000c628:	f0 16 00 b0 	mcall	r6[704]
8000c62c:	14 98       	mov	r8,r10
8000c62e:	16 99       	mov	r9,r11
8000c630:	10 9a       	mov	r10,r8
8000c632:	12 9b       	mov	r11,r9
8000c634:	f0 16 00 09 	mcall	r6[36]
8000c638:	18 99       	mov	r9,r12
8000c63a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c63e:	91 09       	st.w	r8[0x0],r9
	attitude->qe.v[0]=0.0;
8000c640:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c644:	30 09       	mov	r9,0
8000c646:	91 19       	st.w	r8[0x4],r9
	attitude->qe.v[1]=0.0;
8000c648:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c64c:	30 09       	mov	r9,0
8000c64e:	91 29       	st.w	r8[0x8],r9
	//attitude->qe.v[2]=sin((PI + init_angle)/2.0);
	attitude->qe.v[2]=sin(init_angle/2.0);
8000c650:	ee fc ff fc 	ld.w	r12,r7[-4]
8000c654:	f0 16 00 02 	mcall	r6[8]
8000c658:	30 08       	mov	r8,0
8000c65a:	fc 19 40 00 	movh	r9,0x4000
8000c65e:	f0 16 00 0c 	mcall	r6[48]
8000c662:	14 98       	mov	r8,r10
8000c664:	16 99       	mov	r9,r11
8000c666:	10 9a       	mov	r10,r8
8000c668:	12 9b       	mov	r11,r9
8000c66a:	f0 16 00 ad 	mcall	r6[692]
8000c66e:	14 98       	mov	r8,r10
8000c670:	16 99       	mov	r9,r11
8000c672:	10 9a       	mov	r10,r8
8000c674:	12 9b       	mov	r11,r9
8000c676:	f0 16 00 09 	mcall	r6[36]
8000c67a:	18 99       	mov	r9,r12
8000c67c:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c680:	91 39       	st.w	r8[0xc],r9
	
	attitude->kp=0.09;
8000c682:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c686:	e0 69 51 ec 	mov	r9,20972
8000c68a:	ea 19 3d b8 	orh	r9,0x3db8
8000c68e:	f1 49 00 9c 	st.w	r8[156],r9
	attitude->ki=attitude->kp/15.0;
8000c692:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c696:	f0 f8 00 9c 	ld.w	r8,r8[156]
8000c69a:	fc 1b 41 70 	movh	r11,0x4170
8000c69e:	10 9c       	mov	r12,r8
8000c6a0:	f0 16 00 08 	mcall	r6[32]
8000c6a4:	18 98       	mov	r8,r12
8000c6a6:	10 99       	mov	r9,r8
8000c6a8:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c6ac:	f1 49 00 a0 	st.w	r8[160],r9
	
	attitude->kp_mag = 0.1;
8000c6b0:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c6b4:	e0 69 cc cd 	mov	r9,52429
8000c6b8:	ea 19 3d cc 	orh	r9,0x3dcc
8000c6bc:	f1 49 00 a4 	st.w	r8[164],r9
	attitude->ki_mag = attitude->kp_mag/15.0;
8000c6c0:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c6c4:	f0 f8 00 a4 	ld.w	r8,r8[164]
8000c6c8:	fc 1b 41 70 	movh	r11,0x4170
8000c6cc:	10 9c       	mov	r12,r8
8000c6ce:	f0 16 00 08 	mcall	r6[32]
8000c6d2:	18 98       	mov	r8,r12
8000c6d4:	10 99       	mov	r9,r8
8000c6d6:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c6da:	f1 49 00 a8 	st.w	r8[168],r9
	
	attitude->calibration_level=LEVELING;
8000c6de:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000c6e2:	30 18       	mov	r8,1
8000c6e4:	f3 68 00 b8 	st.b	r9[184],r8
	//dt=1.0/samplingrate;
}
8000c6e8:	2f bd       	sub	sp,-20
8000c6ea:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
8000c6ee:	00 00       	add	r0,r0
8000c6f0:	80 00       	ld.sh	r0,r0[0x0]
8000c6f2:	c2 32       	brcc	8000c738 <qfilter+0x44>

8000c6f4 <qfilter>:


void qfilter(Quat_Attitude_t *attitude, float *rates, float dt, bool simu_mode){
8000c6f4:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
8000c6f8:	1a 97       	mov	r7,sp
8000c6fa:	fa cd 01 04 	sub	sp,sp,260
8000c6fe:	fe f6 0b 0a 	ld.w	r6,pc[2826]
8000c702:	1e 26       	rsub	r6,pc
8000c704:	ef 4c ff 18 	st.w	r7[-232],r12
8000c708:	ef 4b ff 14 	st.w	r7[-236],r11
8000c70c:	ef 4a ff 10 	st.w	r7[-240],r10
8000c710:	12 98       	mov	r8,r9
8000c712:	ef 68 ff 0c 	st.b	r7[-244],r8
	uint8_t i;
	float  omc[3], omc_mag[3], rvc[3], tmp[3], snorm, norm, s_acc_norm, acc_norm, s_mag_norm, mag_norm;
	UQuat_t qed, qtmp1, up, up_bf, qtmp2, qtmp3;
	UQuat_t mag_global, mag_corrected_local;
	UQuat_t front_vec_global = {.s=0.0, .v={1.0, 0.0, 0.0}};
8000c716:	30 08       	mov	r8,0
8000c718:	ef 48 ff 1c 	st.w	r7[-228],r8
8000c71c:	fc 18 3f 80 	movh	r8,0x3f80
8000c720:	ef 48 ff 20 	st.w	r7[-224],r8
8000c724:	30 08       	mov	r8,0
8000c726:	ef 48 ff 24 	st.w	r7[-220],r8
8000c72a:	30 08       	mov	r8,0
8000c72c:	ef 48 ff 28 	st.w	r7[-216],r8
	float kp, kp_mag;
	
	
	for (i=0; i<3; i++){
8000c730:	30 08       	mov	r8,0
8000c732:	ef 68 ff df 	st.b	r7[-33],r8
8000c736:	c0 c9       	rjmp	8000c94e <qfilter+0x25a>
		attitude->om[i]  = (1.0-GYRO_LPF)*attitude->om[i]+GYRO_LPF*(((float)rates[GYRO_OFFSET+i]-attitude->be[GYRO_OFFSET+i])*attitude->sf[i]);
8000c738:	ef 35 ff df 	ld.ub	r5,r7[-33]
8000c73c:	ef 39 ff df 	ld.ub	r9,r7[-33]
8000c740:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c744:	2e 29       	sub	r9,-30
8000c746:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8000c74a:	10 9c       	mov	r12,r8
8000c74c:	f0 16 00 02 	mcall	r6[8]
8000c750:	e0 68 cc cd 	mov	r8,52429
8000c754:	ea 18 cc cc 	orh	r8,0xcccc
8000c758:	e0 69 cc cc 	mov	r9,52428
8000c75c:	ea 19 3f ec 	orh	r9,0x3fec
8000c760:	f0 16 00 03 	mcall	r6[12]
8000c764:	14 98       	mov	r8,r10
8000c766:	16 99       	mov	r9,r11
8000c768:	10 92       	mov	r2,r8
8000c76a:	12 93       	mov	r3,r9
8000c76c:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000c770:	a3 68       	lsl	r8,0x2
8000c772:	ee f9 ff 14 	ld.w	r9,r7[-236]
8000c776:	f2 08 00 08 	add	r8,r9,r8
8000c77a:	70 09       	ld.w	r9,r8[0x0]
8000c77c:	ef 3a ff df 	ld.ub	r10,r7[-33]
8000c780:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c784:	2f 4a       	sub	r10,-12
8000c786:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
8000c78a:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8000c78e:	ef 3a ff df 	ld.ub	r10,r7[-33]
8000c792:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c796:	2e ba       	sub	r10,-21
8000c798:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
8000c79c:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8000c7a0:	10 9c       	mov	r12,r8
8000c7a2:	f0 16 00 02 	mcall	r6[8]
8000c7a6:	e0 68 99 9a 	mov	r8,39322
8000c7aa:	ea 18 99 99 	orh	r8,0x9999
8000c7ae:	e0 69 99 99 	mov	r9,39321
8000c7b2:	ea 19 3f b9 	orh	r9,0x3fb9
8000c7b6:	f0 16 00 03 	mcall	r6[12]
8000c7ba:	14 98       	mov	r8,r10
8000c7bc:	16 99       	mov	r9,r11
8000c7be:	04 9a       	mov	r10,r2
8000c7c0:	06 9b       	mov	r11,r3
8000c7c2:	f0 16 00 05 	mcall	r6[20]
8000c7c6:	14 98       	mov	r8,r10
8000c7c8:	16 99       	mov	r9,r11
8000c7ca:	10 9a       	mov	r10,r8
8000c7cc:	12 9b       	mov	r11,r9
8000c7ce:	f0 16 00 09 	mcall	r6[36]
8000c7d2:	18 9a       	mov	r10,r12
8000c7d4:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c7d8:	ea c9 ff e2 	sub	r9,r5,-30
8000c7dc:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		attitude->a[i]   = (1.0-ACC_LPF)*attitude->a[i]+ACC_LPF*(((float)rates[i+ACC_OFFSET]-attitude->be[i+ACC_OFFSET])*attitude->sf[i+ACC_OFFSET]);
8000c7e0:	ef 35 ff df 	ld.ub	r5,r7[-33]
8000c7e4:	ef 39 ff df 	ld.ub	r9,r7[-33]
8000c7e8:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c7ec:	2d f9       	sub	r9,-33
8000c7ee:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8000c7f2:	10 9c       	mov	r12,r8
8000c7f4:	f0 16 00 02 	mcall	r6[8]
8000c7f8:	e0 68 8f 5c 	mov	r8,36700
8000c7fc:	ea 18 f5 c2 	orh	r8,0xf5c2
8000c800:	e0 69 5c 28 	mov	r9,23592
8000c804:	ea 19 3f ef 	orh	r9,0x3fef
8000c808:	f0 16 00 03 	mcall	r6[12]
8000c80c:	14 98       	mov	r8,r10
8000c80e:	16 99       	mov	r9,r11
8000c810:	10 92       	mov	r2,r8
8000c812:	12 93       	mov	r3,r9
8000c814:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000c818:	2f d8       	sub	r8,-3
8000c81a:	a3 68       	lsl	r8,0x2
8000c81c:	ee f9 ff 14 	ld.w	r9,r7[-236]
8000c820:	f2 08 00 08 	add	r8,r9,r8
8000c824:	70 09       	ld.w	r9,r8[0x0]
8000c826:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000c82a:	f0 ca ff fd 	sub	r10,r8,-3
8000c82e:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c832:	2f 4a       	sub	r10,-12
8000c834:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
8000c838:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8000c83c:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000c840:	f0 ca ff fd 	sub	r10,r8,-3
8000c844:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c848:	2e ba       	sub	r10,-21
8000c84a:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
8000c84e:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8000c852:	10 9c       	mov	r12,r8
8000c854:	f0 16 00 02 	mcall	r6[8]
8000c858:	e0 68 14 7b 	mov	r8,5243
8000c85c:	ea 18 47 ae 	orh	r8,0x47ae
8000c860:	e0 69 7a e1 	mov	r9,31457
8000c864:	ea 19 3f 94 	orh	r9,0x3f94
8000c868:	f0 16 00 03 	mcall	r6[12]
8000c86c:	14 98       	mov	r8,r10
8000c86e:	16 99       	mov	r9,r11
8000c870:	04 9a       	mov	r10,r2
8000c872:	06 9b       	mov	r11,r3
8000c874:	f0 16 00 05 	mcall	r6[20]
8000c878:	14 98       	mov	r8,r10
8000c87a:	16 99       	mov	r9,r11
8000c87c:	10 9a       	mov	r10,r8
8000c87e:	12 9b       	mov	r11,r9
8000c880:	f0 16 00 09 	mcall	r6[36]
8000c884:	18 9a       	mov	r10,r12
8000c886:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c88a:	ea c9 ff df 	sub	r9,r5,-33
8000c88e:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		attitude->mag[i] = (1.0-MAG_LPF)*attitude->mag[i]+MAG_LPF*(((float)rates[i+COMPASS_OFFSET]-attitude->be[i+COMPASS_OFFSET])*attitude->sf[i+COMPASS_OFFSET]);
8000c892:	ef 35 ff df 	ld.ub	r5,r7[-33]
8000c896:	ef 39 ff df 	ld.ub	r9,r7[-33]
8000c89a:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c89e:	2d c9       	sub	r9,-36
8000c8a0:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8000c8a4:	10 9c       	mov	r12,r8
8000c8a6:	f0 16 00 02 	mcall	r6[8]
8000c8aa:	e0 68 cc cd 	mov	r8,52429
8000c8ae:	ea 18 cc cc 	orh	r8,0xcccc
8000c8b2:	e0 69 cc cc 	mov	r9,52428
8000c8b6:	ea 19 3f ec 	orh	r9,0x3fec
8000c8ba:	f0 16 00 03 	mcall	r6[12]
8000c8be:	14 98       	mov	r8,r10
8000c8c0:	16 99       	mov	r9,r11
8000c8c2:	10 92       	mov	r2,r8
8000c8c4:	12 93       	mov	r3,r9
8000c8c6:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000c8ca:	2f a8       	sub	r8,-6
8000c8cc:	a3 68       	lsl	r8,0x2
8000c8ce:	ee f9 ff 14 	ld.w	r9,r7[-236]
8000c8d2:	f2 08 00 08 	add	r8,r9,r8
8000c8d6:	70 09       	ld.w	r9,r8[0x0]
8000c8d8:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000c8dc:	f0 ca ff fa 	sub	r10,r8,-6
8000c8e0:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c8e4:	2f 4a       	sub	r10,-12
8000c8e6:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
8000c8ea:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8000c8ee:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000c8f2:	f0 ca ff fa 	sub	r10,r8,-6
8000c8f6:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c8fa:	2e ba       	sub	r10,-21
8000c8fc:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
8000c900:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8000c904:	10 9c       	mov	r12,r8
8000c906:	f0 16 00 02 	mcall	r6[8]
8000c90a:	e0 68 99 9a 	mov	r8,39322
8000c90e:	ea 18 99 99 	orh	r8,0x9999
8000c912:	e0 69 99 99 	mov	r9,39321
8000c916:	ea 19 3f b9 	orh	r9,0x3fb9
8000c91a:	f0 16 00 03 	mcall	r6[12]
8000c91e:	14 98       	mov	r8,r10
8000c920:	16 99       	mov	r9,r11
8000c922:	04 9a       	mov	r10,r2
8000c924:	06 9b       	mov	r11,r3
8000c926:	f0 16 00 05 	mcall	r6[20]
8000c92a:	14 98       	mov	r8,r10
8000c92c:	16 99       	mov	r9,r11
8000c92e:	10 9a       	mov	r10,r8
8000c930:	12 9b       	mov	r11,r9
8000c932:	f0 16 00 09 	mcall	r6[36]
8000c936:	18 9a       	mov	r10,r12
8000c938:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c93c:	ea c9 ff dc 	sub	r9,r5,-36
8000c940:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	UQuat_t mag_global, mag_corrected_local;
	UQuat_t front_vec_global = {.s=0.0, .v={1.0, 0.0, 0.0}};
	float kp, kp_mag;
	
	
	for (i=0; i<3; i++){
8000c944:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000c948:	2f f8       	sub	r8,-1
8000c94a:	ef 68 ff df 	st.b	r7[-33],r8
8000c94e:	ef 39 ff df 	ld.ub	r9,r7[-33]
8000c952:	30 28       	mov	r8,2
8000c954:	f0 09 18 00 	cp.b	r9,r8
8000c958:	fe 98 fe f0 	brls	8000c738 <qfilter+0x44>
		attitude->a[i]   = (1.0-ACC_LPF)*attitude->a[i]+ACC_LPF*(((float)rates[i+ACC_OFFSET]-attitude->be[i+ACC_OFFSET])*attitude->sf[i+ACC_OFFSET]);
		attitude->mag[i] = (1.0-MAG_LPF)*attitude->mag[i]+MAG_LPF*(((float)rates[i+COMPASS_OFFSET]-attitude->be[i+COMPASS_OFFSET])*attitude->sf[i+COMPASS_OFFSET]);
	}

	// up_bf = qe^-1 *(0,0,0,-1) * qe
	up.s=0; up.v[0]=UPVECTOR_X; up.v[1]=UPVECTOR_Y; up.v[2]=UPVECTOR_Z;
8000c95c:	30 08       	mov	r8,0
8000c95e:	ef 48 ff 7c 	st.w	r7[-132],r8
8000c962:	30 08       	mov	r8,0
8000c964:	ef 48 ff 80 	st.w	r7[-128],r8
8000c968:	30 08       	mov	r8,0
8000c96a:	ef 48 ff 84 	st.w	r7[-124],r8
8000c96e:	fc 18 bf 80 	movh	r8,0xbf80
8000c972:	ef 48 ff 88 	st.w	r7[-120],r8
	up_bf = quat_global_to_local(attitude->qe, up);
8000c976:	ee ca 00 94 	sub	r10,r7,148
8000c97a:	20 4d       	sub	sp,16
8000c97c:	1a 98       	mov	r8,sp
8000c97e:	ee c9 00 84 	sub	r9,r7,132
8000c982:	20 08       	sub	r8,0
8000c984:	20 09       	sub	r9,0
8000c986:	72 0b       	ld.w	r11,r9[0x0]
8000c988:	91 0b       	st.w	r8[0x0],r11
8000c98a:	72 1b       	ld.w	r11,r9[0x4]
8000c98c:	91 1b       	st.w	r8[0x4],r11
8000c98e:	72 2b       	ld.w	r11,r9[0x8]
8000c990:	91 2b       	st.w	r8[0x8],r11
8000c992:	72 39       	ld.w	r9,r9[0xc]
8000c994:	91 39       	st.w	r8[0xc],r9
8000c996:	ee f9 ff 18 	ld.w	r9,r7[-232]
8000c99a:	20 4d       	sub	sp,16
8000c99c:	1a 98       	mov	r8,sp
8000c99e:	20 08       	sub	r8,0
8000c9a0:	20 09       	sub	r9,0
8000c9a2:	72 0b       	ld.w	r11,r9[0x0]
8000c9a4:	91 0b       	st.w	r8[0x0],r11
8000c9a6:	72 1b       	ld.w	r11,r9[0x4]
8000c9a8:	91 1b       	st.w	r8[0x4],r11
8000c9aa:	72 2b       	ld.w	r11,r9[0x8]
8000c9ac:	91 2b       	st.w	r8[0x8],r11
8000c9ae:	72 39       	ld.w	r9,r9[0xc]
8000c9b0:	91 39       	st.w	r8[0xc],r9
8000c9b2:	14 9c       	mov	r12,r10
8000c9b4:	fe b0 fb 2c 	rcall	8000c00c <quat_global_to_local>
8000c9b8:	2f 8d       	sub	sp,-32
	
	// calculate norm of acceleration vector
	s_acc_norm=attitude->a[0]*attitude->a[0]+attitude->a[1]*attitude->a[1]+attitude->a[2]*attitude->a[2];
8000c9ba:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c9be:	f0 f9 00 84 	ld.w	r9,r8[132]
8000c9c2:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c9c6:	f0 f8 00 84 	ld.w	r8,r8[132]
8000c9ca:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000c9ce:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c9d2:	f0 fa 00 88 	ld.w	r10,r8[136]
8000c9d6:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c9da:	f0 f8 00 88 	ld.w	r8,r8[136]
8000c9de:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000c9e2:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000c9e6:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c9ea:	f0 fa 00 8c 	ld.w	r10,r8[140]
8000c9ee:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c9f2:	f0 f8 00 8c 	ld.w	r8,r8[140]
8000c9f6:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000c9fa:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8000c9fe:	ef 48 ff e8 	st.w	r7[-24],r8
	if ((s_acc_norm>0.7*0.7)&&(s_acc_norm<1.3*1.3)) {
8000ca02:	ee fc ff e8 	ld.w	r12,r7[-24]
8000ca06:	f0 16 00 02 	mcall	r6[8]
8000ca0a:	14 98       	mov	r8,r10
8000ca0c:	16 99       	mov	r9,r11
8000ca0e:	30 05       	mov	r5,0
8000ca10:	e0 6a 8f 5b 	mov	r10,36699
8000ca14:	ea 1a f5 c2 	orh	r10,0xf5c2
8000ca18:	e0 6b 5c 28 	mov	r11,23592
8000ca1c:	ea 1b 3f df 	orh	r11,0x3fdf
8000ca20:	f0 16 00 1d 	mcall	r6[116]
8000ca24:	18 98       	mov	r8,r12
8000ca26:	58 08       	cp.w	r8,0
8000ca28:	c0 20       	breq	8000ca2c <qfilter+0x338>
8000ca2a:	30 15       	mov	r5,1
8000ca2c:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
8000ca30:	c7 30       	breq	8000cb16 <qfilter+0x422>
8000ca32:	ee fc ff e8 	ld.w	r12,r7[-24]
8000ca36:	f0 16 00 02 	mcall	r6[8]
8000ca3a:	30 05       	mov	r5,0
8000ca3c:	e0 68 d7 0b 	mov	r8,55051
8000ca40:	ea 18 70 a3 	orh	r8,0x70a3
8000ca44:	e0 69 0a 3d 	mov	r9,2621
8000ca48:	ea 19 3f fb 	orh	r9,0x3ffb
8000ca4c:	f0 16 00 1d 	mcall	r6[116]
8000ca50:	18 98       	mov	r8,r12
8000ca52:	58 08       	cp.w	r8,0
8000ca54:	c0 20       	breq	8000ca58 <qfilter+0x364>
8000ca56:	30 15       	mov	r5,1
8000ca58:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
8000ca5c:	c5 d0       	breq	8000cb16 <qfilter+0x422>
		// approximate square root by running 2 iterations of newton method
		acc_norm=fast_sqrt(s_acc_norm);
8000ca5e:	ee fc ff e8 	ld.w	r12,r7[-24]
8000ca62:	fe b0 fb d1 	rcall	8000c204 <fast_sqrt>
8000ca66:	18 98       	mov	r8,r12
8000ca68:	ef 48 ff ec 	st.w	r7[-20],r8

		tmp[0]=attitude->a[0]/acc_norm;
8000ca6c:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000ca70:	f0 f8 00 84 	ld.w	r8,r8[132]
8000ca74:	ee fb ff ec 	ld.w	r11,r7[-20]
8000ca78:	10 9c       	mov	r12,r8
8000ca7a:	f0 16 00 08 	mcall	r6[32]
8000ca7e:	18 98       	mov	r8,r12
8000ca80:	ef 48 ff ac 	st.w	r7[-84],r8
		tmp[1]=attitude->a[1]/acc_norm;
8000ca84:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000ca88:	f0 f8 00 88 	ld.w	r8,r8[136]
8000ca8c:	ee fb ff ec 	ld.w	r11,r7[-20]
8000ca90:	10 9c       	mov	r12,r8
8000ca92:	f0 16 00 08 	mcall	r6[32]
8000ca96:	18 98       	mov	r8,r12
8000ca98:	ef 48 ff b0 	st.w	r7[-80],r8
		tmp[2]=attitude->a[2]/acc_norm;
8000ca9c:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000caa0:	f0 f8 00 8c 	ld.w	r8,r8[140]
8000caa4:	ee fb ff ec 	ld.w	r11,r7[-20]
8000caa8:	10 9c       	mov	r12,r8
8000caaa:	f0 16 00 08 	mcall	r6[32]
8000caae:	18 98       	mov	r8,r12
8000cab0:	ef 48 ff b4 	st.w	r7[-76],r8
		// omc = a x up_bf.v
		CROSS(tmp, up_bf.v, omc);
8000cab4:	ee f9 ff b0 	ld.w	r9,r7[-80]
8000cab8:	ee f8 ff 78 	ld.w	r8,r7[-136]
8000cabc:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000cac0:	ee fa ff b4 	ld.w	r10,r7[-76]
8000cac4:	ee f8 ff 74 	ld.w	r8,r7[-140]
8000cac8:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000cacc:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8000cad0:	ef 48 ff d0 	st.w	r7[-48],r8
8000cad4:	ee f9 ff b4 	ld.w	r9,r7[-76]
8000cad8:	ee f8 ff 70 	ld.w	r8,r7[-144]
8000cadc:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000cae0:	ee fa ff ac 	ld.w	r10,r7[-84]
8000cae4:	ee f8 ff 78 	ld.w	r8,r7[-136]
8000cae8:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000caec:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8000caf0:	ef 48 ff d4 	st.w	r7[-44],r8
8000caf4:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000caf8:	ee f8 ff 74 	ld.w	r8,r7[-140]
8000cafc:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000cb00:	ee fa ff b0 	ld.w	r10,r7[-80]
8000cb04:	ee f8 ff 70 	ld.w	r8,r7[-144]
8000cb08:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000cb0c:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8000cb10:	ef 48 ff d8 	st.w	r7[-40],r8
	up.s=0; up.v[0]=UPVECTOR_X; up.v[1]=UPVECTOR_Y; up.v[2]=UPVECTOR_Z;
	up_bf = quat_global_to_local(attitude->qe, up);
	
	// calculate norm of acceleration vector
	s_acc_norm=attitude->a[0]*attitude->a[0]+attitude->a[1]*attitude->a[1]+attitude->a[2]*attitude->a[2];
	if ((s_acc_norm>0.7*0.7)&&(s_acc_norm<1.3*1.3)) {
8000cb14:	c0 a8       	rjmp	8000cb28 <qfilter+0x434>
		tmp[1]=attitude->a[1]/acc_norm;
		tmp[2]=attitude->a[2]/acc_norm;
		// omc = a x up_bf.v
		CROSS(tmp, up_bf.v, omc);
	} else {
		omc[0]=0;		omc[1]=0; 		omc[2]=0;
8000cb16:	30 08       	mov	r8,0
8000cb18:	ef 48 ff d0 	st.w	r7[-48],r8
8000cb1c:	30 08       	mov	r8,0
8000cb1e:	ef 48 ff d4 	st.w	r7[-44],r8
8000cb22:	30 08       	mov	r8,0
8000cb24:	ef 48 ff d8 	st.w	r7[-40],r8
	}

	// Heading computation
	// transfer 
	qtmp1=quat_from_vector(attitude->mag); 
8000cb28:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cb2c:	f0 c9 ff 70 	sub	r9,r8,-144
8000cb30:	ee c8 01 04 	sub	r8,r7,260
8000cb34:	12 9b       	mov	r11,r9
8000cb36:	10 9c       	mov	r12,r8
8000cb38:	fe b0 f9 56 	rcall	8000bde4 <quat_from_vector>
8000cb3c:	ee c8 00 74 	sub	r8,r7,116
8000cb40:	ee c9 01 04 	sub	r9,r7,260
8000cb44:	20 08       	sub	r8,0
8000cb46:	20 09       	sub	r9,0
8000cb48:	72 0a       	ld.w	r10,r9[0x0]
8000cb4a:	91 0a       	st.w	r8[0x0],r10
8000cb4c:	72 1a       	ld.w	r10,r9[0x4]
8000cb4e:	91 1a       	st.w	r8[0x4],r10
8000cb50:	72 2a       	ld.w	r10,r9[0x8]
8000cb52:	91 2a       	st.w	r8[0x8],r10
8000cb54:	72 39       	ld.w	r9,r9[0xc]
8000cb56:	91 39       	st.w	r8[0xc],r9
	mag_global = quat_local_to_global(attitude->qe, qtmp1);
8000cb58:	ee ca 00 c4 	sub	r10,r7,196
8000cb5c:	20 4d       	sub	sp,16
8000cb5e:	1a 98       	mov	r8,sp
8000cb60:	ee c9 00 74 	sub	r9,r7,116
8000cb64:	20 08       	sub	r8,0
8000cb66:	20 09       	sub	r9,0
8000cb68:	72 0b       	ld.w	r11,r9[0x0]
8000cb6a:	91 0b       	st.w	r8[0x0],r11
8000cb6c:	72 1b       	ld.w	r11,r9[0x4]
8000cb6e:	91 1b       	st.w	r8[0x4],r11
8000cb70:	72 2b       	ld.w	r11,r9[0x8]
8000cb72:	91 2b       	st.w	r8[0x8],r11
8000cb74:	72 39       	ld.w	r9,r9[0xc]
8000cb76:	91 39       	st.w	r8[0xc],r9
8000cb78:	ee f9 ff 18 	ld.w	r9,r7[-232]
8000cb7c:	20 4d       	sub	sp,16
8000cb7e:	1a 98       	mov	r8,sp
8000cb80:	20 08       	sub	r8,0
8000cb82:	20 09       	sub	r9,0
8000cb84:	72 0b       	ld.w	r11,r9[0x0]
8000cb86:	91 0b       	st.w	r8[0x0],r11
8000cb88:	72 1b       	ld.w	r11,r9[0x4]
8000cb8a:	91 1b       	st.w	r8[0x4],r11
8000cb8c:	72 2b       	ld.w	r11,r9[0x8]
8000cb8e:	91 2b       	st.w	r8[0x8],r11
8000cb90:	72 39       	ld.w	r9,r9[0xc]
8000cb92:	91 39       	st.w	r8[0xc],r9
8000cb94:	14 9c       	mov	r12,r10
8000cb96:	fe b0 fa b9 	rcall	8000c108 <quat_local_to_global>
8000cb9a:	2f 8d       	sub	sp,-32
	//QI(attitude->qe,qtmp4);
	//QMUL(qtmp4, front_bf, qtmp5);
	//QMUL(qtmp5, attitude->qe, front_bf);
	
	// calculate norm of compass vector
	s_mag_norm=SQR(mag_global.v[0])+SQR(mag_global.v[1])+SQR(mag_global.v[2]);
8000cb9c:	ee f9 ff 40 	ld.w	r9,r7[-192]
8000cba0:	ee f8 ff 40 	ld.w	r8,r7[-192]
8000cba4:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000cba8:	ee fa ff 44 	ld.w	r10,r7[-188]
8000cbac:	ee f8 ff 44 	ld.w	r8,r7[-188]
8000cbb0:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000cbb4:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000cbb8:	ee fa ff 48 	ld.w	r10,r7[-184]
8000cbbc:	ee f8 ff 48 	ld.w	r8,r7[-184]
8000cbc0:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000cbc4:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8000cbc8:	ef 48 ff f0 	st.w	r7[-16],r8
	if ((s_mag_norm>0.4*0.4)&&(s_mag_norm<1.8*1.8)) 
8000cbcc:	ee fc ff f0 	ld.w	r12,r7[-16]
8000cbd0:	f0 16 00 02 	mcall	r6[8]
8000cbd4:	14 98       	mov	r8,r10
8000cbd6:	16 99       	mov	r9,r11
8000cbd8:	30 05       	mov	r5,0
8000cbda:	e0 6a 14 7c 	mov	r10,5244
8000cbde:	ea 1a 47 ae 	orh	r10,0x47ae
8000cbe2:	e0 6b 7a e1 	mov	r11,31457
8000cbe6:	ea 1b 3f c4 	orh	r11,0x3fc4
8000cbea:	f0 16 00 1d 	mcall	r6[116]
8000cbee:	18 98       	mov	r8,r12
8000cbf0:	58 08       	cp.w	r8,0
8000cbf2:	c0 20       	breq	8000cbf6 <qfilter+0x502>
8000cbf4:	30 15       	mov	r5,1
8000cbf6:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
8000cbfa:	e0 80 00 c2 	breq	8000cd7e <qfilter+0x68a>
8000cbfe:	ee fc ff f0 	ld.w	r12,r7[-16]
8000cc02:	f0 16 00 02 	mcall	r6[8]
8000cc06:	30 05       	mov	r5,0
8000cc08:	e0 68 51 ec 	mov	r8,20972
8000cc0c:	ea 18 1e b8 	orh	r8,0x1eb8
8000cc10:	e0 69 eb 85 	mov	r9,60293
8000cc14:	ea 19 40 09 	orh	r9,0x4009
8000cc18:	f0 16 00 1d 	mcall	r6[116]
8000cc1c:	18 98       	mov	r8,r12
8000cc1e:	58 08       	cp.w	r8,0
8000cc20:	c0 20       	breq	8000cc24 <qfilter+0x530>
8000cc22:	30 15       	mov	r5,1
8000cc24:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
8000cc28:	e0 80 00 ab 	breq	8000cd7e <qfilter+0x68a>
	{
		mag_norm=fast_sqrt(s_mag_norm);
8000cc2c:	ee fc ff f0 	ld.w	r12,r7[-16]
8000cc30:	fe b0 fa ea 	rcall	8000c204 <fast_sqrt>
8000cc34:	18 98       	mov	r8,r12
8000cc36:	ef 48 ff f4 	st.w	r7[-12],r8

		mag_global.v[0]/=mag_norm;
8000cc3a:	ee f8 ff 40 	ld.w	r8,r7[-192]
8000cc3e:	ee fb ff f4 	ld.w	r11,r7[-12]
8000cc42:	10 9c       	mov	r12,r8
8000cc44:	f0 16 00 08 	mcall	r6[32]
8000cc48:	18 98       	mov	r8,r12
8000cc4a:	ef 48 ff 40 	st.w	r7[-192],r8
		mag_global.v[1]/=mag_norm;
8000cc4e:	ee f8 ff 44 	ld.w	r8,r7[-188]
8000cc52:	ee fb ff f4 	ld.w	r11,r7[-12]
8000cc56:	10 9c       	mov	r12,r8
8000cc58:	f0 16 00 08 	mcall	r6[32]
8000cc5c:	18 98       	mov	r8,r12
8000cc5e:	ef 48 ff 44 	st.w	r7[-188],r8
		mag_global.v[2]=0.0;   // set z component in global frame to 0
8000cc62:	30 08       	mov	r8,0
8000cc64:	ef 48 ff 48 	st.w	r7[-184],r8

		// transfer magneto vector back to body frame 
		attitude->north_vec=quat_global_to_local(attitude->qe, front_vec_global);		
8000cc68:	ee f5 ff 18 	ld.w	r5,r7[-232]
8000cc6c:	ee ca 01 04 	sub	r10,r7,260
8000cc70:	20 4d       	sub	sp,16
8000cc72:	1a 98       	mov	r8,sp
8000cc74:	ee c9 00 e4 	sub	r9,r7,228
8000cc78:	20 08       	sub	r8,0
8000cc7a:	20 09       	sub	r9,0
8000cc7c:	72 0b       	ld.w	r11,r9[0x0]
8000cc7e:	91 0b       	st.w	r8[0x0],r11
8000cc80:	72 1b       	ld.w	r11,r9[0x4]
8000cc82:	91 1b       	st.w	r8[0x4],r11
8000cc84:	72 2b       	ld.w	r11,r9[0x8]
8000cc86:	91 2b       	st.w	r8[0x8],r11
8000cc88:	72 39       	ld.w	r9,r9[0xc]
8000cc8a:	91 39       	st.w	r8[0xc],r9
8000cc8c:	ee f9 ff 18 	ld.w	r9,r7[-232]
8000cc90:	20 4d       	sub	sp,16
8000cc92:	1a 98       	mov	r8,sp
8000cc94:	20 08       	sub	r8,0
8000cc96:	20 09       	sub	r9,0
8000cc98:	72 0b       	ld.w	r11,r9[0x0]
8000cc9a:	91 0b       	st.w	r8[0x0],r11
8000cc9c:	72 1b       	ld.w	r11,r9[0x4]
8000cc9e:	91 1b       	st.w	r8[0x4],r11
8000cca0:	72 2b       	ld.w	r11,r9[0x8]
8000cca2:	91 2b       	st.w	r8[0x8],r11
8000cca4:	72 39       	ld.w	r9,r9[0xc]
8000cca6:	91 39       	st.w	r8[0xc],r9
8000cca8:	14 9c       	mov	r12,r10
8000ccaa:	fe b0 f9 b1 	rcall	8000c00c <quat_global_to_local>
8000ccae:	2f 8d       	sub	sp,-32
8000ccb0:	ea c8 ff e0 	sub	r8,r5,-32
8000ccb4:	ee c9 01 04 	sub	r9,r7,260
8000ccb8:	20 08       	sub	r8,0
8000ccba:	20 09       	sub	r9,0
8000ccbc:	72 0a       	ld.w	r10,r9[0x0]
8000ccbe:	91 0a       	st.w	r8[0x0],r10
8000ccc0:	72 1a       	ld.w	r10,r9[0x4]
8000ccc2:	91 1a       	st.w	r8[0x4],r10
8000ccc4:	72 2a       	ld.w	r10,r9[0x8]
8000ccc6:	91 2a       	st.w	r8[0x8],r10
8000ccc8:	72 39       	ld.w	r9,r9[0xc]
8000ccca:	91 39       	st.w	r8[0xc],r9
		mag_corrected_local=quat_global_to_local(attitude->qe, mag_global);		
8000cccc:	ee ca 00 d4 	sub	r10,r7,212
8000ccd0:	20 4d       	sub	sp,16
8000ccd2:	1a 98       	mov	r8,sp
8000ccd4:	ee c9 00 c4 	sub	r9,r7,196
8000ccd8:	20 08       	sub	r8,0
8000ccda:	20 09       	sub	r9,0
8000ccdc:	72 0b       	ld.w	r11,r9[0x0]
8000ccde:	91 0b       	st.w	r8[0x0],r11
8000cce0:	72 1b       	ld.w	r11,r9[0x4]
8000cce2:	91 1b       	st.w	r8[0x4],r11
8000cce4:	72 2b       	ld.w	r11,r9[0x8]
8000cce6:	91 2b       	st.w	r8[0x8],r11
8000cce8:	72 39       	ld.w	r9,r9[0xc]
8000ccea:	91 39       	st.w	r8[0xc],r9
8000ccec:	ee f9 ff 18 	ld.w	r9,r7[-232]
8000ccf0:	20 4d       	sub	sp,16
8000ccf2:	1a 98       	mov	r8,sp
8000ccf4:	20 08       	sub	r8,0
8000ccf6:	20 09       	sub	r9,0
8000ccf8:	72 0b       	ld.w	r11,r9[0x0]
8000ccfa:	91 0b       	st.w	r8[0x0],r11
8000ccfc:	72 1b       	ld.w	r11,r9[0x4]
8000ccfe:	91 1b       	st.w	r8[0x4],r11
8000cd00:	72 2b       	ld.w	r11,r9[0x8]
8000cd02:	91 2b       	st.w	r8[0x8],r11
8000cd04:	72 39       	ld.w	r9,r9[0xc]
8000cd06:	91 39       	st.w	r8[0xc],r9
8000cd08:	14 9c       	mov	r12,r10
8000cd0a:	fe b0 f9 81 	rcall	8000c00c <quat_global_to_local>
8000cd0e:	2f 8d       	sub	sp,-32
		// omc = a x up_bf.v
		CROSS(mag_corrected_local.v, attitude->north_vec.v,  omc_mag);
8000cd10:	ee f9 ff 34 	ld.w	r9,r7[-204]
8000cd14:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cd18:	70 b8       	ld.w	r8,r8[0x2c]
8000cd1a:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000cd1e:	ee fa ff 38 	ld.w	r10,r7[-200]
8000cd22:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cd26:	70 a8       	ld.w	r8,r8[0x28]
8000cd28:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000cd2c:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8000cd30:	ef 48 ff c4 	st.w	r7[-60],r8
8000cd34:	ee f9 ff 38 	ld.w	r9,r7[-200]
8000cd38:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cd3c:	70 98       	ld.w	r8,r8[0x24]
8000cd3e:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000cd42:	ee fa ff 30 	ld.w	r10,r7[-208]
8000cd46:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cd4a:	70 b8       	ld.w	r8,r8[0x2c]
8000cd4c:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000cd50:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8000cd54:	ef 48 ff c8 	st.w	r7[-56],r8
8000cd58:	ee f9 ff 30 	ld.w	r9,r7[-208]
8000cd5c:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cd60:	70 a8       	ld.w	r8,r8[0x28]
8000cd62:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000cd66:	ee fa ff 34 	ld.w	r10,r7[-204]
8000cd6a:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cd6e:	70 98       	ld.w	r8,r8[0x24]
8000cd70:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000cd74:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8000cd78:	ef 48 ff cc 	st.w	r7[-52],r8
	//QMUL(qtmp4, front_bf, qtmp5);
	//QMUL(qtmp5, attitude->qe, front_bf);
	
	// calculate norm of compass vector
	s_mag_norm=SQR(mag_global.v[0])+SQR(mag_global.v[1])+SQR(mag_global.v[2]);
	if ((s_mag_norm>0.4*0.4)&&(s_mag_norm<1.8*1.8)) 
8000cd7c:	c0 a8       	rjmp	8000cd90 <qfilter+0x69c>
		mag_corrected_local=quat_global_to_local(attitude->qe, mag_global);		
		// omc = a x up_bf.v
		CROSS(mag_corrected_local.v, attitude->north_vec.v,  omc_mag);
		
	} else {
		omc_mag[0]=0;		omc_mag[1]=0; 		omc_mag[2]=0;
8000cd7e:	30 08       	mov	r8,0
8000cd80:	ef 48 ff c4 	st.w	r7[-60],r8
8000cd84:	30 08       	mov	r8,0
8000cd86:	ef 48 ff c8 	st.w	r7[-56],r8
8000cd8a:	30 08       	mov	r8,0
8000cd8c:	ef 48 ff cc 	st.w	r7[-52],r8
	}

	for (i=0; i<3; i++){
8000cd90:	30 08       	mov	r8,0
8000cd92:	ef 68 ff df 	st.b	r7[-33],r8
8000cd96:	c3 48       	rjmp	8000cdfe <qfilter+0x70a>
		qtmp1.v[i] = attitude->om[i] +attitude->kp*omc[i] +attitude->kp_mag*omc_mag[i];
8000cd98:	ef 3a ff df 	ld.ub	r10,r7[-33]
8000cd9c:	ef 39 ff df 	ld.ub	r9,r7[-33]
8000cda0:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cda4:	2e 29       	sub	r9,-30
8000cda6:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
8000cdaa:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cdae:	f0 fb 00 9c 	ld.w	r11,r8[156]
8000cdb2:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000cdb6:	a3 68       	lsl	r8,0x2
8000cdb8:	ee 08 00 08 	add	r8,r7,r8
8000cdbc:	f0 f8 ff d0 	ld.w	r8,r8[-48]
8000cdc0:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
8000cdc4:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000cdc8:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cdcc:	f0 fb 00 a4 	ld.w	r11,r8[164]
8000cdd0:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000cdd4:	a3 68       	lsl	r8,0x2
8000cdd6:	ee 08 00 08 	add	r8,r7,r8
8000cdda:	f0 f8 ff c4 	ld.w	r8,r8[-60]
8000cdde:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
8000cde2:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000cde6:	f4 c8 ff ff 	sub	r8,r10,-1
8000cdea:	a3 68       	lsl	r8,0x2
8000cdec:	ee 08 00 08 	add	r8,r7,r8
8000cdf0:	f1 49 ff 8c 	st.w	r8[-116],r9
		
	} else {
		omc_mag[0]=0;		omc_mag[1]=0; 		omc_mag[2]=0;
	}

	for (i=0; i<3; i++){
8000cdf4:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000cdf8:	2f f8       	sub	r8,-1
8000cdfa:	ef 68 ff df 	st.b	r7[-33],r8
8000cdfe:	ef 39 ff df 	ld.ub	r9,r7[-33]
8000ce02:	30 28       	mov	r8,2
8000ce04:	f0 09 18 00 	cp.b	r9,r8
8000ce08:	fe 98 ff c8 	brls	8000cd98 <qfilter+0x6a4>
		qtmp1.v[i] = attitude->om[i] +attitude->kp*omc[i] +attitude->kp_mag*omc_mag[i];
	}
	qtmp1.s=0;
8000ce0c:	30 08       	mov	r8,0
8000ce0e:	ef 48 ff 8c 	st.w	r7[-116],r8

	// apply step rotation with corrections
	qed = quat_multi(attitude->qe,qtmp1);
8000ce12:	ee ca 00 64 	sub	r10,r7,100
8000ce16:	20 4d       	sub	sp,16
8000ce18:	1a 98       	mov	r8,sp
8000ce1a:	ee c9 00 74 	sub	r9,r7,116
8000ce1e:	20 08       	sub	r8,0
8000ce20:	20 09       	sub	r9,0
8000ce22:	72 0b       	ld.w	r11,r9[0x0]
8000ce24:	91 0b       	st.w	r8[0x0],r11
8000ce26:	72 1b       	ld.w	r11,r9[0x4]
8000ce28:	91 1b       	st.w	r8[0x4],r11
8000ce2a:	72 2b       	ld.w	r11,r9[0x8]
8000ce2c:	91 2b       	st.w	r8[0x8],r11
8000ce2e:	72 39       	ld.w	r9,r9[0xc]
8000ce30:	91 39       	st.w	r8[0xc],r9
8000ce32:	ee f9 ff 18 	ld.w	r9,r7[-232]
8000ce36:	20 4d       	sub	sp,16
8000ce38:	1a 98       	mov	r8,sp
8000ce3a:	20 08       	sub	r8,0
8000ce3c:	20 09       	sub	r9,0
8000ce3e:	72 0b       	ld.w	r11,r9[0x0]
8000ce40:	91 0b       	st.w	r8[0x0],r11
8000ce42:	72 1b       	ld.w	r11,r9[0x4]
8000ce44:	91 1b       	st.w	r8[0x4],r11
8000ce46:	72 2b       	ld.w	r11,r9[0x8]
8000ce48:	91 2b       	st.w	r8[0x8],r11
8000ce4a:	72 39       	ld.w	r9,r9[0xc]
8000ce4c:	91 39       	st.w	r8[0xc],r9
8000ce4e:	14 9c       	mov	r12,r10
8000ce50:	fe b0 f8 26 	rcall	8000be9c <quat_multi>
8000ce54:	2f 8d       	sub	sp,-32

	attitude->qe.s=attitude->qe.s+qed.s*dt;
8000ce56:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000ce5a:	70 09       	ld.w	r9,r8[0x0]
8000ce5c:	ee fa ff 9c 	ld.w	r10,r7[-100]
8000ce60:	ee f8 ff 10 	ld.w	r8,r7[-240]
8000ce64:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000ce68:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000ce6c:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000ce70:	91 09       	st.w	r8[0x0],r9
	attitude->qe.v[0]+=qed.v[0]*dt;
8000ce72:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000ce76:	70 19       	ld.w	r9,r8[0x4]
8000ce78:	ee fa ff a0 	ld.w	r10,r7[-96]
8000ce7c:	ee f8 ff 10 	ld.w	r8,r7[-240]
8000ce80:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000ce84:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000ce88:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000ce8c:	91 19       	st.w	r8[0x4],r9
	attitude->qe.v[1]+=qed.v[1]*dt;
8000ce8e:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000ce92:	70 29       	ld.w	r9,r8[0x8]
8000ce94:	ee fa ff a4 	ld.w	r10,r7[-92]
8000ce98:	ee f8 ff 10 	ld.w	r8,r7[-240]
8000ce9c:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000cea0:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000cea4:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cea8:	91 29       	st.w	r8[0x8],r9
	attitude->qe.v[2]+=qed.v[2]*dt;
8000ceaa:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000ceae:	70 39       	ld.w	r9,r8[0xc]
8000ceb0:	ee fa ff a8 	ld.w	r10,r7[-88]
8000ceb4:	ee f8 ff 10 	ld.w	r8,r7[-240]
8000ceb8:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000cebc:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000cec0:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cec4:	91 39       	st.w	r8[0xc],r9

	snorm=attitude->qe.s*attitude->qe.s+attitude->qe.v[0]*attitude->qe.v[0] + attitude->qe.v[1] * attitude->qe.v[1] + attitude->qe.v[2] * attitude->qe.v[2];
8000cec6:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000ceca:	70 09       	ld.w	r9,r8[0x0]
8000cecc:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000ced0:	70 08       	ld.w	r8,r8[0x0]
8000ced2:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000ced6:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000ceda:	70 1a       	ld.w	r10,r8[0x4]
8000cedc:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cee0:	70 18       	ld.w	r8,r8[0x4]
8000cee2:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000cee6:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000ceea:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000ceee:	70 2a       	ld.w	r10,r8[0x8]
8000cef0:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cef4:	70 28       	ld.w	r8,r8[0x8]
8000cef6:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000cefa:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000cefe:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cf02:	70 3a       	ld.w	r10,r8[0xc]
8000cf04:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cf08:	70 38       	ld.w	r8,r8[0xc]
8000cf0a:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000cf0e:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8000cf12:	ef 48 ff e0 	st.w	r7[-32],r8
	if (snorm<0.0001) norm=0.01; else {
8000cf16:	ee fc ff e0 	ld.w	r12,r7[-32]
8000cf1a:	f0 16 00 02 	mcall	r6[8]
8000cf1e:	30 05       	mov	r5,0
8000cf20:	e0 68 43 2d 	mov	r8,17197
8000cf24:	ea 18 eb 1c 	orh	r8,0xeb1c
8000cf28:	e0 69 36 e2 	mov	r9,14050
8000cf2c:	ea 19 3f 1a 	orh	r9,0x3f1a
8000cf30:	f0 16 00 1d 	mcall	r6[116]
8000cf34:	18 98       	mov	r8,r12
8000cf36:	58 08       	cp.w	r8,0
8000cf38:	c0 20       	breq	8000cf3c <qfilter+0x848>
8000cf3a:	30 15       	mov	r5,1
8000cf3c:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
8000cf40:	c0 80       	breq	8000cf50 <qfilter+0x85c>
8000cf42:	e0 68 d7 0a 	mov	r8,55050
8000cf46:	ea 18 3c 23 	orh	r8,0x3c23
8000cf4a:	ef 48 ff e4 	st.w	r7[-28],r8
8000cf4e:	c0 88       	rjmp	8000cf5e <qfilter+0x86a>
		// approximate square root by running 2 iterations of newton method
		norm=fast_sqrt(snorm);
8000cf50:	ee fc ff e0 	ld.w	r12,r7[-32]
8000cf54:	fe b0 f9 58 	rcall	8000c204 <fast_sqrt>
8000cf58:	18 98       	mov	r8,r12
8000cf5a:	ef 48 ff e4 	st.w	r7[-28],r8
		//norm=0.5*(norm+(snorm/norm));
	}	
	attitude->qe.s/= norm;
8000cf5e:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cf62:	70 08       	ld.w	r8,r8[0x0]
8000cf64:	ee fb ff e4 	ld.w	r11,r7[-28]
8000cf68:	10 9c       	mov	r12,r8
8000cf6a:	f0 16 00 08 	mcall	r6[32]
8000cf6e:	18 98       	mov	r8,r12
8000cf70:	10 99       	mov	r9,r8
8000cf72:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cf76:	91 09       	st.w	r8[0x0],r9
	attitude->qe.v[0] /= norm;
8000cf78:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cf7c:	70 18       	ld.w	r8,r8[0x4]
8000cf7e:	ee fb ff e4 	ld.w	r11,r7[-28]
8000cf82:	10 9c       	mov	r12,r8
8000cf84:	f0 16 00 08 	mcall	r6[32]
8000cf88:	18 98       	mov	r8,r12
8000cf8a:	10 99       	mov	r9,r8
8000cf8c:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cf90:	91 19       	st.w	r8[0x4],r9
	attitude->qe.v[1] /= norm;
8000cf92:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cf96:	70 28       	ld.w	r8,r8[0x8]
8000cf98:	ee fb ff e4 	ld.w	r11,r7[-28]
8000cf9c:	10 9c       	mov	r12,r8
8000cf9e:	f0 16 00 08 	mcall	r6[32]
8000cfa2:	18 98       	mov	r8,r12
8000cfa4:	10 99       	mov	r9,r8
8000cfa6:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cfaa:	91 29       	st.w	r8[0x8],r9
	attitude->qe.v[2] /= norm;
8000cfac:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cfb0:	70 38       	ld.w	r8,r8[0xc]
8000cfb2:	ee fb ff e4 	ld.w	r11,r7[-28]
8000cfb6:	10 9c       	mov	r12,r8
8000cfb8:	f0 16 00 08 	mcall	r6[32]
8000cfbc:	18 98       	mov	r8,r12
8000cfbe:	10 99       	mov	r9,r8
8000cfc0:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cfc4:	91 39       	st.w	r8[0xc],r9

	// bias estimate update
	attitude->be[0]+= - dt * attitude->ki * omc[0] / attitude->sf[0];
8000cfc6:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cfca:	70 c5       	ld.w	r5,r8[0x30]
8000cfcc:	ee f8 ff 10 	ld.w	r8,r7[-240]
8000cfd0:	10 99       	mov	r9,r8
8000cfd2:	ee 19 80 00 	eorh	r9,0x8000
8000cfd6:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cfda:	f0 f8 00 a0 	ld.w	r8,r8[160]
8000cfde:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000cfe2:	ee f8 ff d0 	ld.w	r8,r7[-48]
8000cfe6:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8000cfea:	ee f9 ff 18 	ld.w	r9,r7[-232]
8000cfee:	73 59       	ld.w	r9,r9[0x54]
8000cff0:	12 9b       	mov	r11,r9
8000cff2:	10 9c       	mov	r12,r8
8000cff4:	f0 16 00 08 	mcall	r6[32]
8000cff8:	18 98       	mov	r8,r12
8000cffa:	e5 a0 09 58 	cop	cp0,cr9,cr5,cr8,0x40
8000cffe:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000d002:	91 c9       	st.w	r8[0x30],r9
	attitude->be[1]+= - dt * attitude->ki * omc[1] / attitude->sf[1];
8000d004:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000d008:	70 d5       	ld.w	r5,r8[0x34]
8000d00a:	ee f8 ff 10 	ld.w	r8,r7[-240]
8000d00e:	10 99       	mov	r9,r8
8000d010:	ee 19 80 00 	eorh	r9,0x8000
8000d014:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000d018:	f0 f8 00 a0 	ld.w	r8,r8[160]
8000d01c:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000d020:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000d024:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8000d028:	ee f9 ff 18 	ld.w	r9,r7[-232]
8000d02c:	73 69       	ld.w	r9,r9[0x58]
8000d02e:	12 9b       	mov	r11,r9
8000d030:	10 9c       	mov	r12,r8
8000d032:	f0 16 00 08 	mcall	r6[32]
8000d036:	18 98       	mov	r8,r12
8000d038:	e5 a0 09 58 	cop	cp0,cr9,cr5,cr8,0x40
8000d03c:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000d040:	91 d9       	st.w	r8[0x34],r9
	attitude->be[2]+= - dt * attitude->ki * omc[2] / attitude->sf[2];
8000d042:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000d046:	70 e5       	ld.w	r5,r8[0x38]
8000d048:	ee f8 ff 10 	ld.w	r8,r7[-240]
8000d04c:	10 99       	mov	r9,r8
8000d04e:	ee 19 80 00 	eorh	r9,0x8000
8000d052:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000d056:	f0 f8 00 a0 	ld.w	r8,r8[160]
8000d05a:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000d05e:	ee f8 ff d8 	ld.w	r8,r7[-40]
8000d062:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8000d066:	ee f9 ff 18 	ld.w	r9,r7[-232]
8000d06a:	73 79       	ld.w	r9,r9[0x5c]
8000d06c:	12 9b       	mov	r11,r9
8000d06e:	10 9c       	mov	r12,r8
8000d070:	f0 16 00 08 	mcall	r6[32]
8000d074:	18 98       	mov	r8,r12
8000d076:	e5 a0 09 58 	cop	cp0,cr9,cr5,cr8,0x40
8000d07a:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000d07e:	91 e9       	st.w	r8[0x38],r9
	// bias estimate update
	//attitude->be[6]+= - dt * attitude->ki_mag * omc[0];
	//attitude->be[7]+= - dt * attitude->ki_mag * omc[1];
	//attitude->be[8]+= - dt * attitude->ki_mag * omc[2];

	switch (attitude->calibration_level) {
8000d080:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000d084:	f1 38 00 b8 	ld.ub	r8,r8[184]
8000d088:	58 18       	cp.w	r8,1
8000d08a:	c1 c0       	breq	8000d0c2 <qfilter+0x9ce>
8000d08c:	58 28       	cp.w	r8,2
8000d08e:	c3 00       	breq	8000d0ee <qfilter+0x9fa>
8000d090:	58 08       	cp.w	r8,0
8000d092:	e0 81 00 94 	brne	8000d1ba <qfilter+0xac6>
		case OFF:
			kp=attitude->kp;//*(0.1/(0.1+s_acc_norm-1.0));
8000d096:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000d09a:	f0 f8 00 9c 	ld.w	r8,r8[156]
8000d09e:	ef 48 ff f8 	st.w	r7[-8],r8
			attitude->ki=attitude->kp/15.0;
8000d0a2:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000d0a6:	f0 f8 00 9c 	ld.w	r8,r8[156]
8000d0aa:	fc 1b 41 70 	movh	r11,0x4170
8000d0ae:	10 9c       	mov	r12,r8
8000d0b0:	f0 16 00 08 	mcall	r6[32]
8000d0b4:	18 98       	mov	r8,r12
8000d0b6:	10 99       	mov	r9,r8
8000d0b8:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000d0bc:	f1 49 00 a0 	st.w	r8[160],r9
			break;
8000d0c0:	c9 28       	rjmp	8000d1e4 <qfilter+0xaf0>
		case LEVELING:
			kp=0.3;
8000d0c2:	e0 68 99 9a 	mov	r8,39322
8000d0c6:	ea 18 3e 99 	orh	r8,0x3e99
8000d0ca:	ef 48 ff f8 	st.w	r7[-8],r8
			attitude->ki=attitude->kp/10.0;
8000d0ce:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000d0d2:	f0 f8 00 9c 	ld.w	r8,r8[156]
8000d0d6:	fc 1b 41 20 	movh	r11,0x4120
8000d0da:	10 9c       	mov	r12,r8
8000d0dc:	f0 16 00 08 	mcall	r6[32]
8000d0e0:	18 98       	mov	r8,r12
8000d0e2:	10 99       	mov	r9,r8
8000d0e4:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000d0e8:	f1 49 00 a0 	st.w	r8[160],r9
			break;
8000d0ec:	c7 c8       	rjmp	8000d1e4 <qfilter+0xaf0>
		case LEVEL_PLUS_ACCEL:
			kp=0.3;
8000d0ee:	e0 68 99 9a 	mov	r8,39322
8000d0f2:	ea 18 3e 99 	orh	r8,0x3e99
8000d0f6:	ef 48 ff f8 	st.w	r7[-8],r8
			attitude->ki=attitude->kp/10.0;
8000d0fa:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000d0fe:	f0 f8 00 9c 	ld.w	r8,r8[156]
8000d102:	fc 1b 41 20 	movh	r11,0x4120
8000d106:	10 9c       	mov	r12,r8
8000d108:	f0 16 00 08 	mcall	r6[32]
8000d10c:	18 98       	mov	r8,r12
8000d10e:	10 99       	mov	r9,r8
8000d110:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000d114:	f1 49 00 a0 	st.w	r8[160],r9
			attitude->be[3]+=   dt * attitude->kp * (attitude->a[0]-up_bf.v[0]);
8000d118:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000d11c:	70 f9       	ld.w	r9,r8[0x3c]
8000d11e:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000d122:	f0 fa 00 9c 	ld.w	r10,r8[156]
8000d126:	ee f8 ff 10 	ld.w	r8,r7[-240]
8000d12a:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
8000d12e:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000d132:	f0 fb 00 84 	ld.w	r11,r8[132]
8000d136:	ee f8 ff 70 	ld.w	r8,r7[-144]
8000d13a:	e5 a1 08 b8 	cop	cp0,cr8,cr11,cr8,0x42
8000d13e:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000d142:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000d146:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000d14a:	91 f9       	st.w	r8[0x3c],r9
			attitude->be[4]+=   dt * attitude->kp * (attitude->a[1]-up_bf.v[1]);
8000d14c:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000d150:	71 09       	ld.w	r9,r8[0x40]
8000d152:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000d156:	f0 fa 00 9c 	ld.w	r10,r8[156]
8000d15a:	ee f8 ff 10 	ld.w	r8,r7[-240]
8000d15e:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
8000d162:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000d166:	f0 fb 00 88 	ld.w	r11,r8[136]
8000d16a:	ee f8 ff 74 	ld.w	r8,r7[-140]
8000d16e:	e5 a1 08 b8 	cop	cp0,cr8,cr11,cr8,0x42
8000d172:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000d176:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000d17a:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000d17e:	f1 49 00 40 	st.w	r8[64],r9
			attitude->be[5]+=   dt * attitude->kp * (attitude->a[2]-up_bf.v[2]);
8000d182:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000d186:	71 19       	ld.w	r9,r8[0x44]
8000d188:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000d18c:	f0 fa 00 9c 	ld.w	r10,r8[156]
8000d190:	ee f8 ff 10 	ld.w	r8,r7[-240]
8000d194:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
8000d198:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000d19c:	f0 fb 00 8c 	ld.w	r11,r8[140]
8000d1a0:	ee f8 ff 78 	ld.w	r8,r7[-136]
8000d1a4:	e5 a1 08 b8 	cop	cp0,cr8,cr11,cr8,0x42
8000d1a8:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000d1ac:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000d1b0:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000d1b4:	f1 49 00 44 	st.w	r8[68],r9
			break;
8000d1b8:	c1 68       	rjmp	8000d1e4 <qfilter+0xaf0>
		default:
			kp=attitude->kp;
8000d1ba:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000d1be:	f0 f8 00 9c 	ld.w	r8,r8[156]
8000d1c2:	ef 48 ff f8 	st.w	r7[-8],r8
			attitude->ki=attitude->kp/15.0;
8000d1c6:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000d1ca:	f0 f8 00 9c 	ld.w	r8,r8[156]
8000d1ce:	fc 1b 41 70 	movh	r11,0x4170
8000d1d2:	10 9c       	mov	r12,r8
8000d1d4:	f0 16 00 08 	mcall	r6[32]
8000d1d8:	18 98       	mov	r8,r12
8000d1da:	10 99       	mov	r9,r8
8000d1dc:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000d1e0:	f1 49 00 a0 	st.w	r8[160],r9
			break;
	}

	// set up-vector (bodyframe) in attitude
	attitude->up_vec.v[0]=up_bf.v[0];
8000d1e4:	ee f9 ff 70 	ld.w	r9,r7[-144]
8000d1e8:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000d1ec:	91 59       	st.w	r8[0x14],r9
	attitude->up_vec.v[1]=up_bf.v[1];
8000d1ee:	ee f9 ff 74 	ld.w	r9,r7[-140]
8000d1f2:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000d1f6:	91 69       	st.w	r8[0x18],r9
	attitude->up_vec.v[2]=up_bf.v[2];
8000d1f8:	ee f9 ff 78 	ld.w	r9,r7[-136]
8000d1fc:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000d200:	91 79       	st.w	r8[0x1c],r9
	
}
8000d202:	2b fd       	sub	sp,-260
8000d204:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
8000d208:	80 00       	ld.sh	r0,r0[0x0]
8000d20a:	c5 86       	brmi	8000d2ba <mav_array_memcpy+0x2a>

8000d20c <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
8000d20c:	eb cd 40 c0 	pushm	r6-r7,lr
8000d210:	1a 97       	mov	r7,sp
8000d212:	20 6d       	sub	sp,24
8000d214:	49 e6       	lddpc	r6,8000d28c <interpolate+0x80>
8000d216:	1e 26       	rsub	r6,pc
8000d218:	ef 4c ff f8 	st.w	r7[-8],r12
8000d21c:	ef 4b ff f4 	st.w	r7[-12],r11
8000d220:	ef 4a ff f0 	st.w	r7[-16],r10
8000d224:	ef 49 ff ec 	st.w	r7[-20],r9
8000d228:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
8000d22c:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000d230:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000d234:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
8000d238:	c0 41       	brne	8000d240 <interpolate+0x34>
	{
		return y1;
8000d23a:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000d23e:	c2 38       	rjmp	8000d284 <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
8000d240:	ee f9 ff e8 	ld.w	r9,r7[-24]
8000d244:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000d248:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8000d24c:	ee fa ff f8 	ld.w	r10,r7[-8]
8000d250:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000d254:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
8000d258:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8000d25c:	ee fa ff f0 	ld.w	r10,r7[-16]
8000d260:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000d264:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8000d268:	12 9b       	mov	r11,r9
8000d26a:	10 9c       	mov	r12,r8
8000d26c:	f0 16 00 08 	mcall	r6[32]
8000d270:	18 98       	mov	r8,r12
8000d272:	10 99       	mov	r9,r8
8000d274:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000d278:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8000d27c:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
8000d280:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
8000d284:	10 9c       	mov	r12,r8
8000d286:	2f ad       	sub	sp,-24
8000d288:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000d28c:	80 00       	ld.sh	r0,r0[0x0]
8000d28e:	d0 9a       	popm	r0-r3,r10

8000d290 <mav_array_memcpy>:

/*
  like memcpy(), but if src is NULL, do a memset to zero
*/
static void mav_array_memcpy(void *dest, const void *src, size_t n)
{
8000d290:	eb cd 40 c0 	pushm	r6-r7,lr
8000d294:	1a 97       	mov	r7,sp
8000d296:	20 3d       	sub	sp,12
8000d298:	49 06       	lddpc	r6,8000d2d8 <mav_array_memcpy+0x48>
8000d29a:	1e 26       	rsub	r6,pc
8000d29c:	ef 4c ff fc 	st.w	r7[-4],r12
8000d2a0:	ef 4b ff f8 	st.w	r7[-8],r11
8000d2a4:	ef 4a ff f4 	st.w	r7[-12],r10
	if (src == NULL) {
8000d2a8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d2ac:	58 08       	cp.w	r8,0
8000d2ae:	c0 91       	brne	8000d2c0 <mav_array_memcpy+0x30>
		memset(dest, 0, n);
8000d2b0:	ee fa ff f4 	ld.w	r10,r7[-12]
8000d2b4:	30 0b       	mov	r11,0
8000d2b6:	ee fc ff fc 	ld.w	r12,r7[-4]
8000d2ba:	f0 16 00 30 	mcall	r6[192]
8000d2be:	c0 98       	rjmp	8000d2d0 <mav_array_memcpy+0x40>
	} else {
		memcpy(dest, src, n);
8000d2c0:	ee fa ff f4 	ld.w	r10,r7[-12]
8000d2c4:	ee fb ff f8 	ld.w	r11,r7[-8]
8000d2c8:	ee fc ff fc 	ld.w	r12,r7[-4]
8000d2cc:	f0 16 00 20 	mcall	r6[128]
	}
}
8000d2d0:	2f dd       	sub	sp,-12
8000d2d2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000d2d6:	00 00       	add	r0,r0
8000d2d8:	80 00       	ld.sh	r0,r0[0x0]
8000d2da:	d1 1e       	*unknown*

8000d2dc <initialise_central_data>:
#include "conf_sim_model.h"


static volatile central_data_t centralData;

void initialise_central_data(){
8000d2dc:	eb cd 40 c0 	pushm	r6-r7,lr
8000d2e0:	1a 97       	mov	r7,sp
8000d2e2:	4d 86       	lddpc	r6,8000d440 <initialise_central_data+0x164>
8000d2e4:	1e 26       	rsub	r6,pc
		
		// init controls
		centralData.controls.rpy[ROLL]=0;
8000d2e6:	ec f8 00 64 	ld.w	r8,r6[100]
8000d2ea:	30 09       	mov	r9,0
8000d2ec:	f1 49 01 48 	st.w	r8[328],r9
		centralData.controls.rpy[PITCH]=0;
8000d2f0:	ec f8 00 64 	ld.w	r8,r6[100]
8000d2f4:	30 09       	mov	r9,0
8000d2f6:	f1 49 01 4c 	st.w	r8[332],r9
		centralData.controls.rpy[YAW]=0;
8000d2fa:	ec f8 00 64 	ld.w	r8,r6[100]
8000d2fe:	30 09       	mov	r9,0
8000d300:	f1 49 01 50 	st.w	r8[336],r9
		centralData.controls.thrust=-1.0;
8000d304:	ec f8 00 64 	ld.w	r8,r6[100]
8000d308:	fc 19 bf 80 	movh	r9,0xbf80
8000d30c:	f1 49 01 54 	st.w	r8[340],r9
		
		// init stabilisers
		init_stabilisation_copter(&centralData.stabiliser_stack);
8000d310:	ec f8 00 64 	ld.w	r8,r6[100]
8000d314:	f0 c8 fe 60 	sub	r8,r8,-416
8000d318:	10 9c       	mov	r12,r8
8000d31a:	f0 16 01 72 	mcall	r6[1480]
		// centralData.stabilisers_stack = 

		centralData.simulation_mode=0;
8000d31e:	ec f8 00 64 	ld.w	r8,r6[100]
8000d322:	30 09       	mov	r9,0
8000d324:	f1 49 10 c0 	st.w	r8[4288],r9

		// init waypoint navigation
		centralData.number_of_waypoints = 0;		
8000d328:	ec f9 00 64 	ld.w	r9,r6[100]
8000d32c:	30 08       	mov	r8,0
8000d32e:	f3 58 10 1c 	st.h	r9[4124],r8
		centralData.waypoint_set = false;
8000d332:	ec f9 00 64 	ld.w	r9,r6[100]
8000d336:	30 08       	mov	r8,0
8000d338:	f3 68 10 b4 	st.b	r9[4276],r8
		centralData.waypoint_sending = false;
8000d33c:	ec f9 00 64 	ld.w	r9,r6[100]
8000d340:	30 08       	mov	r8,0
8000d342:	f3 68 10 b5 	st.b	r9[4277],r8
		centralData.waypoint_receiving = false;
8000d346:	ec f9 00 64 	ld.w	r9,r6[100]
8000d34a:	30 08       	mov	r8,0
8000d34c:	f3 68 10 b6 	st.b	r9[4278],r8
		centralData.waypoint_hold_init = false;
8000d350:	ec f9 00 64 	ld.w	r9,r6[100]
8000d354:	30 08       	mov	r8,0
8000d356:	f3 68 10 b7 	st.b	r9[4279],r8
		centralData.critical_landing = false;
8000d35a:	ec f9 00 64 	ld.w	r9,r6[100]
8000d35e:	30 08       	mov	r8,0
8000d360:	f3 68 10 b8 	st.b	r9[4280],r8
		centralData.critical_init = false;
8000d364:	ec f9 00 64 	ld.w	r9,r6[100]
8000d368:	30 08       	mov	r8,0
8000d36a:	f3 68 10 b9 	st.b	r9[4281],r8
		centralData.collision_avoidance = false;
8000d36e:	ec f9 00 64 	ld.w	r9,r6[100]
8000d372:	30 08       	mov	r8,0
8000d374:	f3 68 10 bb 	st.b	r9[4283],r8

		// default GPS home position
		centralData.position_estimator.localPosition.origin.longitude=   HOME_LONGITUDE;
8000d378:	ec fa 00 64 	ld.w	r10,r6[100]
8000d37c:	e0 68 33 27 	mov	r8,13095
8000d380:	ea 18 3f a0 	orh	r8,0x3fa0
8000d384:	e0 69 43 a1 	mov	r9,17313
8000d388:	ea 19 40 1a 	orh	r9,0x401a
8000d38c:	f4 e9 0d ac 	st.d	r10[3500],r8
		centralData.position_estimator.localPosition.origin.latitude =   HOME_LATITUDE;
8000d390:	ec fa 00 64 	ld.w	r10,r6[100]
8000d394:	e0 68 f8 9c 	mov	r8,63644
8000d398:	ea 18 f0 d4 	orh	r8,0xf0d4
8000d39c:	e0 69 42 5e 	mov	r9,16990
8000d3a0:	ea 19 40 47 	orh	r9,0x4047
8000d3a4:	f4 e9 0d b4 	st.d	r10[3508],r8
		centralData.position_estimator.localPosition.origin.altitude =   HOME_ALTITUDE;
8000d3a8:	ec f8 00 64 	ld.w	r8,r6[100]
8000d3ac:	fc 19 43 c8 	movh	r9,0x43c8
8000d3b0:	f1 49 0d bc 	st.w	r8[3516],r9
		centralData.position_estimator.localPosition.pos[0]=0;
8000d3b4:	ec f8 00 64 	ld.w	r8,r6[100]
8000d3b8:	30 09       	mov	r9,0
8000d3ba:	f1 49 0d 9c 	st.w	r8[3484],r9
		centralData.position_estimator.localPosition.pos[1]=0;
8000d3be:	ec f8 00 64 	ld.w	r8,r6[100]
8000d3c2:	30 09       	mov	r9,0
8000d3c4:	f1 49 0d a0 	st.w	r8[3488],r9
		centralData.position_estimator.localPosition.pos[2]=0;
8000d3c8:	ec f8 00 64 	ld.w	r8,r6[100]
8000d3cc:	30 09       	mov	r9,0
8000d3ce:	f1 49 0d a4 	st.w	r8[3492],r9

		// init simulation
		init_simulation(&(centralData.sim_model),&(centralData.imu1.attitude));
8000d3d2:	ec f8 00 64 	ld.w	r8,r6[100]
8000d3d6:	f0 c8 f4 58 	sub	r8,r8,-2984
8000d3da:	ec fb 00 64 	ld.w	r11,r6[100]
8000d3de:	10 9c       	mov	r12,r8
8000d3e0:	f0 16 01 db 	mcall	r6[1900]
		centralData.sim_model.localPosition = centralData.position_estimator.localPosition;
8000d3e4:	ec f9 00 64 	ld.w	r9,r6[100]
8000d3e8:	ec f8 00 64 	ld.w	r8,r6[100]
8000d3ec:	f2 cb f3 44 	sub	r11,r9,-3260
8000d3f0:	f0 ca f2 64 	sub	r10,r8,-3484
8000d3f4:	f6 c8 00 00 	sub	r8,r11,0
8000d3f8:	f4 c9 00 00 	sub	r9,r10,0
8000d3fc:	72 0c       	ld.w	r12,r9[0x0]
8000d3fe:	91 0c       	st.w	r8[0x0],r12
8000d400:	72 1c       	ld.w	r12,r9[0x4]
8000d402:	91 1c       	st.w	r8[0x4],r12
8000d404:	72 2c       	ld.w	r12,r9[0x8]
8000d406:	91 2c       	st.w	r8[0x8],r12
8000d408:	72 39       	ld.w	r9,r9[0xc]
8000d40a:	91 39       	st.w	r8[0xc],r9
8000d40c:	f6 c8 ff f0 	sub	r8,r11,-16
8000d410:	f4 c9 ff f0 	sub	r9,r10,-16
8000d414:	72 0c       	ld.w	r12,r9[0x0]
8000d416:	91 0c       	st.w	r8[0x0],r12
8000d418:	72 1c       	ld.w	r12,r9[0x4]
8000d41a:	91 1c       	st.w	r8[0x4],r12
8000d41c:	72 2c       	ld.w	r12,r9[0x8]
8000d41e:	91 2c       	st.w	r8[0x8],r12
8000d420:	72 39       	ld.w	r9,r9[0xc]
8000d422:	91 39       	st.w	r8[0xc],r9
8000d424:	f6 c8 ff e0 	sub	r8,r11,-32
8000d428:	f4 c9 ff e0 	sub	r9,r10,-32
8000d42c:	72 0a       	ld.w	r10,r9[0x0]
8000d42e:	91 0a       	st.w	r8[0x0],r10
8000d430:	72 1a       	ld.w	r10,r9[0x4]
8000d432:	91 1a       	st.w	r8[0x4],r10
8000d434:	72 2a       	ld.w	r10,r9[0x8]
8000d436:	91 2a       	st.w	r8[0x8],r10
8000d438:	72 39       	ld.w	r9,r9[0xc]
8000d43a:	91 39       	st.w	r8[0xc],r9
		
		//init_waypoint_list(centralData.waypoint_list,&(centralData.number_of_waypoints));

}
8000d43c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000d440:	80 00       	ld.sh	r0,r0[0x0]
8000d442:	d1 68       	*unknown*

8000d444 <get_central_data>:

central_data_t* get_central_data(void)
{
8000d444:	eb cd 40 c0 	pushm	r6-r7,lr
8000d448:	1a 97       	mov	r7,sp
8000d44a:	48 46       	lddpc	r6,8000d458 <get_central_data+0x14>
8000d44c:	1e 26       	rsub	r6,pc
	return &centralData;
8000d44e:	ec f8 00 64 	ld.w	r8,r6[100]
}
8000d452:	10 9c       	mov	r12,r8
8000d454:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000d458:	80 00       	ld.sh	r0,r0[0x0]
8000d45a:	d2 d0       	acall	0x2d

8000d45c <get_telemetry_upstream>:

byte_stream_t* get_telemetry_upstream() {
8000d45c:	eb cd 40 c0 	pushm	r6-r7,lr
8000d460:	1a 97       	mov	r7,sp
8000d462:	48 56       	lddpc	r6,8000d474 <get_telemetry_upstream+0x18>
8000d464:	1e 26       	rsub	r6,pc
	return centralData.telemetry_up_stream;
8000d466:	ec f8 00 64 	ld.w	r8,r6[100]
8000d46a:	f0 f8 0e 00 	ld.w	r8,r8[3584]
}
8000d46e:	10 9c       	mov	r12,r8
8000d470:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000d474:	80 00       	ld.sh	r0,r0[0x0]
8000d476:	d2 e8       	*unknown*

8000d478 <get_telemetry_downstream>:
byte_stream_t* get_telemetry_downstream() {
8000d478:	eb cd 40 c0 	pushm	r6-r7,lr
8000d47c:	1a 97       	mov	r7,sp
8000d47e:	48 56       	lddpc	r6,8000d490 <get_telemetry_downstream+0x18>
8000d480:	1e 26       	rsub	r6,pc
	return centralData.telemetry_down_stream;
8000d482:	ec f8 00 64 	ld.w	r8,r6[100]
8000d486:	f0 f8 0d fc 	ld.w	r8,r8[3580]
}
8000d48a:	10 9c       	mov	r12,r8
8000d48c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000d490:	80 00       	ld.sh	r0,r0[0x0]
8000d492:	d3 04       	*unknown*

8000d494 <get_debug_stream>:
byte_stream_t* get_debug_stream() {
8000d494:	eb cd 40 c0 	pushm	r6-r7,lr
8000d498:	1a 97       	mov	r7,sp
8000d49a:	48 56       	lddpc	r6,8000d4ac <get_debug_stream+0x18>
8000d49c:	1e 26       	rsub	r6,pc
	return centralData.debug_out_stream;
8000d49e:	ec f8 00 64 	ld.w	r8,r6[100]
8000d4a2:	f0 f8 0e 04 	ld.w	r8,r8[3588]
}
8000d4a6:	10 9c       	mov	r12,r8
8000d4a8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000d4ac:	80 00       	ld.sh	r0,r0[0x0]
8000d4ae:	d3 20       	acall	0x32

8000d4b0 <get_imu_data>:

Imu_Data_t* get_imu_data() {
8000d4b0:	eb cd 40 c0 	pushm	r6-r7,lr
8000d4b4:	1a 97       	mov	r7,sp
8000d4b6:	48 46       	lddpc	r6,8000d4c4 <get_imu_data+0x14>
8000d4b8:	1e 26       	rsub	r6,pc
	return &centralData.imu1;
8000d4ba:	ec f8 00 64 	ld.w	r8,r6[100]
}
8000d4be:	10 9c       	mov	r12,r8
8000d4c0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000d4c4:	80 00       	ld.sh	r0,r0[0x0]
8000d4c6:	d3 3c       	*unknown*

8000d4c8 <get_control_inputs_data>:
Control_Command_t* get_control_inputs_data() {
8000d4c8:	eb cd 40 c0 	pushm	r6-r7,lr
8000d4cc:	1a 97       	mov	r7,sp
8000d4ce:	48 56       	lddpc	r6,8000d4e0 <get_control_inputs_data+0x18>
8000d4d0:	1e 26       	rsub	r6,pc
	return &centralData.controls;
8000d4d2:	ec f8 00 64 	ld.w	r8,r6[100]
8000d4d6:	f0 c8 fe b8 	sub	r8,r8,-328
8000d4da:	10 9c       	mov	r12,r8
8000d4dc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000d4e0:	80 00       	ld.sh	r0,r0[0x0]
8000d4e2:	d3 54       	*unknown*

8000d4e4 <crc_accumulate>:
 *
 * @param data new char to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate(uint8_t data, uint16_t *crcAccum)
{
8000d4e4:	eb cd 40 80 	pushm	r7,lr
8000d4e8:	1a 97       	mov	r7,sp
8000d4ea:	20 3d       	sub	sp,12
8000d4ec:	18 98       	mov	r8,r12
8000d4ee:	ef 4b ff f4 	st.w	r7[-12],r11
8000d4f2:	ef 68 ff f8 	st.b	r7[-8],r8
        /*Accumulate one byte of data into the CRC*/
        uint8_t tmp;

        tmp = data ^ (uint8_t)(*crcAccum &0xff);
8000d4f6:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000d4fa:	90 08       	ld.sh	r8,r8[0x0]
8000d4fc:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000d500:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000d504:	f3 e8 20 08 	eor	r8,r9,r8
8000d508:	ef 68 ff ff 	st.b	r7[-1],r8
        tmp ^= (tmp<<4);
8000d50c:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000d510:	a5 68       	lsl	r8,0x4
8000d512:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000d516:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000d51a:	f3 e8 20 08 	eor	r8,r9,r8
8000d51e:	5c 58       	castu.b	r8
8000d520:	ef 68 ff ff 	st.b	r7[-1],r8
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
8000d524:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000d528:	90 08       	ld.sh	r8,r8[0x0]
8000d52a:	5c 78       	castu.h	r8
8000d52c:	a9 88       	lsr	r8,0x8
8000d52e:	5c 88       	casts.h	r8
8000d530:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
8000d534:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000d538:	a9 68       	lsl	r8,0x8
8000d53a:	5c 88       	casts.h	r8
8000d53c:	f3 e8 20 08 	eor	r8,r9,r8
8000d540:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
8000d544:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000d548:	a3 78       	lsl	r8,0x3
8000d54a:	5c 88       	casts.h	r8
8000d54c:	f3 e8 20 08 	eor	r8,r9,r8
8000d550:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
8000d554:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000d558:	a5 88       	lsr	r8,0x4
8000d55a:	5c 58       	castu.b	r8
8000d55c:	f3 e8 20 08 	eor	r8,r9,r8
8000d560:	5c 88       	casts.h	r8
8000d562:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000d566:	b2 08       	st.h	r9[0x0],r8
}
8000d568:	2f dd       	sub	sp,-12
8000d56a:	e3 cd 80 80 	ldm	sp++,r7,pc

8000d56e <crc_init>:
 * @brief Initiliaze the buffer for the X.25 CRC
 *
 * @param crcAccum the 16 bit X.25 CRC
 */
static inline void crc_init(uint16_t* crcAccum)
{
8000d56e:	eb cd 40 80 	pushm	r7,lr
8000d572:	1a 97       	mov	r7,sp
8000d574:	20 1d       	sub	sp,4
8000d576:	ef 4c ff fc 	st.w	r7[-4],r12
        *crcAccum = X25_INIT_CRC;
8000d57a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000d57e:	3f f8       	mov	r8,-1
8000d580:	b2 08       	st.h	r9[0x0],r8
}
8000d582:	2f fd       	sub	sp,-4
8000d584:	e3 cd 80 80 	ldm	sp++,r7,pc

8000d588 <crc_calculate>:
 * @param  pBuffer buffer containing the byte array to hash
 * @param  length  length of the byte array
 * @return the checksum over the buffer bytes
 **/
static inline uint16_t crc_calculate(const uint8_t* pBuffer, uint16_t length)
{
8000d588:	eb cd 40 c0 	pushm	r6-r7,lr
8000d58c:	1a 97       	mov	r7,sp
8000d58e:	20 3d       	sub	sp,12
8000d590:	49 76       	lddpc	r6,8000d5ec <crc_calculate+0x64>
8000d592:	1e 26       	rsub	r6,pc
8000d594:	ef 4c ff f8 	st.w	r7[-8],r12
8000d598:	16 98       	mov	r8,r11
8000d59a:	ef 58 ff f4 	st.h	r7[-12],r8
        uint16_t crcTmp;
        crc_init(&crcTmp);
8000d59e:	ee c8 00 02 	sub	r8,r7,2
8000d5a2:	10 9c       	mov	r12,r8
8000d5a4:	ce 5f       	rcall	8000d56e <crc_init>
	while (length--) {
8000d5a6:	c0 e8       	rjmp	8000d5c2 <crc_calculate+0x3a>
                crc_accumulate(*pBuffer++, &crcTmp);
8000d5a8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d5ac:	11 88       	ld.ub	r8,r8[0x0]
8000d5ae:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000d5b2:	2f f9       	sub	r9,-1
8000d5b4:	ef 49 ff f8 	st.w	r7[-8],r9
8000d5b8:	ee c9 00 02 	sub	r9,r7,2
8000d5bc:	12 9b       	mov	r11,r9
8000d5be:	10 9c       	mov	r12,r8
8000d5c0:	c9 2f       	rcall	8000d4e4 <crc_accumulate>
 **/
static inline uint16_t crc_calculate(const uint8_t* pBuffer, uint16_t length)
{
        uint16_t crcTmp;
        crc_init(&crcTmp);
	while (length--) {
8000d5c2:	ef 09 ff f4 	ld.sh	r9,r7[-12]
8000d5c6:	30 08       	mov	r8,0
8000d5c8:	f0 09 19 00 	cp.h	r9,r8
8000d5cc:	5f 18       	srne	r8
8000d5ce:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000d5d2:	ef 08 ff f4 	ld.sh	r8,r7[-12]
8000d5d6:	20 18       	sub	r8,1
8000d5d8:	ef 58 ff f4 	st.h	r7[-12],r8
8000d5dc:	58 09       	cp.w	r9,0
8000d5de:	ce 51       	brne	8000d5a8 <crc_calculate+0x20>
                crc_accumulate(*pBuffer++, &crcTmp);
        }
        return crcTmp;
8000d5e0:	ef 08 ff fe 	ld.sh	r8,r7[-2]
}
8000d5e4:	10 9c       	mov	r12,r8
8000d5e6:	2f dd       	sub	sp,-12
8000d5e8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000d5ec:	80 00       	ld.sh	r0,r0[0x0]
8000d5ee:	d4 16       	*unknown*

8000d5f0 <crc_accumulate_buffer>:
 *
 * @param data new bytes to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate_buffer(uint16_t *crcAccum, const char *pBuffer, uint8_t length)
{
8000d5f0:	eb cd 40 c0 	pushm	r6-r7,lr
8000d5f4:	1a 97       	mov	r7,sp
8000d5f6:	20 4d       	sub	sp,16
8000d5f8:	49 66       	lddpc	r6,8000d650 <crc_accumulate_buffer+0x60>
8000d5fa:	1e 26       	rsub	r6,pc
8000d5fc:	ef 4c ff f8 	st.w	r7[-8],r12
8000d600:	ef 4b ff f4 	st.w	r7[-12],r11
8000d604:	14 98       	mov	r8,r10
8000d606:	ef 68 ff f0 	st.b	r7[-16],r8
	const uint8_t *p = (const uint8_t *)pBuffer;
8000d60a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000d60e:	ef 48 ff fc 	st.w	r7[-4],r8
	while (length--) {
8000d612:	c0 d8       	rjmp	8000d62c <crc_accumulate_buffer+0x3c>
                crc_accumulate(*p++, crcAccum);
8000d614:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d618:	11 88       	ld.ub	r8,r8[0x0]
8000d61a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000d61e:	2f f9       	sub	r9,-1
8000d620:	ef 49 ff fc 	st.w	r7[-4],r9
8000d624:	ee fb ff f8 	ld.w	r11,r7[-8]
8000d628:	10 9c       	mov	r12,r8
8000d62a:	c5 df       	rcall	8000d4e4 <crc_accumulate>
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate_buffer(uint16_t *crcAccum, const char *pBuffer, uint8_t length)
{
	const uint8_t *p = (const uint8_t *)pBuffer;
	while (length--) {
8000d62c:	ef 39 ff f0 	ld.ub	r9,r7[-16]
8000d630:	30 08       	mov	r8,0
8000d632:	f0 09 18 00 	cp.b	r9,r8
8000d636:	5f 18       	srne	r8
8000d638:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000d63c:	ef 38 ff f0 	ld.ub	r8,r7[-16]
8000d640:	20 18       	sub	r8,1
8000d642:	ef 68 ff f0 	st.b	r7[-16],r8
8000d646:	58 09       	cp.w	r9,0
8000d648:	ce 61       	brne	8000d614 <crc_accumulate_buffer+0x24>
                crc_accumulate(*p++, crcAccum);
        }
}
8000d64a:	2f cd       	sub	sp,-16
8000d64c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000d650:	80 00       	ld.sh	r0,r0[0x0]
8000d652:	d4 7e       	*unknown*

8000d654 <mavlink_get_channel_status>:
/*
 * Internal function to give access to the channel status for each channel
 */
#ifndef MAVLINK_GET_CHANNEL_STATUS
MAVLINK_HELPER mavlink_status_t* mavlink_get_channel_status(uint8_t chan)
{
8000d654:	eb cd 40 c0 	pushm	r6-r7,lr
8000d658:	1a 97       	mov	r7,sp
8000d65a:	20 1d       	sub	sp,4
8000d65c:	48 96       	lddpc	r6,8000d680 <mavlink_get_channel_status+0x2c>
8000d65e:	1e 26       	rsub	r6,pc
8000d660:	18 98       	mov	r8,r12
8000d662:	ef 68 ff fc 	st.b	r7[-4],r8
	static mavlink_status_t m_mavlink_status[MAVLINK_COMM_NUM_BUFFERS];
	return &m_mavlink_status[chan];
8000d666:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000d66a:	f0 09 15 04 	lsl	r9,r8,0x4
8000d66e:	ec f8 08 d8 	ld.w	r8,r6[2264]
8000d672:	f2 08 00 08 	add	r8,r9,r8
}
8000d676:	10 9c       	mov	r12,r8
8000d678:	2f fd       	sub	sp,-4
8000d67a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000d67e:	00 00       	add	r0,r0
8000d680:	80 00       	ld.sh	r0,r0[0x0]
8000d682:	d4 e2       	popm	r4-r10,lr

8000d684 <_mav_finalize_message_chan_send>:
MAVLINK_HELPER void _mav_finalize_message_chan_send(mavlink_channel_t chan, uint8_t msgid, const char *packet, 
						    uint8_t length, uint8_t crc_extra)
#else
MAVLINK_HELPER void _mav_finalize_message_chan_send(mavlink_channel_t chan, uint8_t msgid, const char *packet, uint8_t length)
#endif
{
8000d684:	eb cd 40 c0 	pushm	r6-r7,lr
8000d688:	1a 97       	mov	r7,sp
8000d68a:	20 9d       	sub	sp,36
8000d68c:	4b d6       	lddpc	r6,8000d780 <_mav_finalize_message_chan_send+0xfc>
8000d68e:	1e 26       	rsub	r6,pc
8000d690:	ef 4c ff ec 	st.w	r7[-20],r12
8000d694:	ef 4a ff e4 	st.w	r7[-28],r10
8000d698:	16 9a       	mov	r10,r11
8000d69a:	ef 6a ff e8 	st.b	r7[-24],r10
8000d69e:	ef 69 ff e0 	st.b	r7[-32],r9
8000d6a2:	ef 68 ff dc 	st.b	r7[-36],r8
	uint16_t checksum;
	uint8_t buf[MAVLINK_NUM_HEADER_BYTES];
	uint8_t ck[2];
	mavlink_status_t *status = mavlink_get_channel_status(chan);
8000d6a6:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000d6aa:	5c 58       	castu.b	r8
8000d6ac:	10 9c       	mov	r12,r8
8000d6ae:	cd 3f       	rcall	8000d654 <mavlink_get_channel_status>
8000d6b0:	18 98       	mov	r8,r12
8000d6b2:	ef 48 ff fc 	st.w	r7[-4],r8
	buf[0] = MAVLINK_STX;
8000d6b6:	3f e8       	mov	r8,-2
8000d6b8:	ef 68 ff f4 	st.b	r7[-12],r8
	buf[1] = length;
8000d6bc:	ef 38 ff e0 	ld.ub	r8,r7[-32]
8000d6c0:	ef 68 ff f5 	st.b	r7[-11],r8
	buf[2] = status->current_tx_seq;
8000d6c4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d6c8:	f1 38 00 0a 	ld.ub	r8,r8[10]
8000d6cc:	ef 68 ff f6 	st.b	r7[-10],r8
	buf[3] = mavlink_system.sysid;
8000d6d0:	ec f8 00 70 	ld.w	r8,r6[112]
8000d6d4:	11 88       	ld.ub	r8,r8[0x0]
8000d6d6:	ef 68 ff f7 	st.b	r7[-9],r8
	buf[4] = mavlink_system.compid;
8000d6da:	ec f8 00 70 	ld.w	r8,r6[112]
8000d6de:	11 98       	ld.ub	r8,r8[0x1]
8000d6e0:	ef 68 ff f8 	st.b	r7[-8],r8
	buf[5] = msgid;
8000d6e4:	ef 38 ff e8 	ld.ub	r8,r7[-24]
8000d6e8:	ef 68 ff f9 	st.b	r7[-7],r8
	status->current_tx_seq++;
8000d6ec:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d6f0:	f1 38 00 0a 	ld.ub	r8,r8[10]
8000d6f4:	2f f8       	sub	r8,-1
8000d6f6:	5c 58       	castu.b	r8
8000d6f8:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000d6fc:	f3 68 00 0a 	st.b	r9[10],r8
	checksum = crc_calculate((uint8_t*)&buf[1], MAVLINK_CORE_HEADER_LEN);
8000d700:	ee c8 00 0c 	sub	r8,r7,12
8000d704:	2f f8       	sub	r8,-1
8000d706:	30 5b       	mov	r11,5
8000d708:	10 9c       	mov	r12,r8
8000d70a:	c3 ff       	rcall	8000d588 <crc_calculate>
8000d70c:	18 98       	mov	r8,r12
8000d70e:	5c 88       	casts.h	r8
8000d710:	ef 58 ff fa 	st.h	r7[-6],r8
	crc_accumulate_buffer(&checksum, packet, length);
8000d714:	ef 39 ff e0 	ld.ub	r9,r7[-32]
8000d718:	ee c8 00 06 	sub	r8,r7,6
8000d71c:	12 9a       	mov	r10,r9
8000d71e:	ee fb ff e4 	ld.w	r11,r7[-28]
8000d722:	10 9c       	mov	r12,r8
8000d724:	c6 6f       	rcall	8000d5f0 <crc_accumulate_buffer>
#if MAVLINK_CRC_EXTRA
	crc_accumulate(crc_extra, &checksum);
8000d726:	ef 38 ff dc 	ld.ub	r8,r7[-36]
8000d72a:	ee c9 00 06 	sub	r9,r7,6
8000d72e:	12 9b       	mov	r11,r9
8000d730:	10 9c       	mov	r12,r8
8000d732:	cd 9e       	rcall	8000d4e4 <crc_accumulate>
#endif
	ck[0] = (uint8_t)(checksum & 0xFF);
8000d734:	ef 08 ff fa 	ld.sh	r8,r7[-6]
8000d738:	5c 58       	castu.b	r8
8000d73a:	ef 68 ff f0 	st.b	r7[-16],r8
	ck[1] = (uint8_t)(checksum >> 8);
8000d73e:	ef 08 ff fa 	ld.sh	r8,r7[-6]
8000d742:	5c 78       	castu.h	r8
8000d744:	a9 88       	lsr	r8,0x8
8000d746:	5c 88       	casts.h	r8
8000d748:	5c 58       	castu.b	r8
8000d74a:	ef 68 ff f1 	st.b	r7[-15],r8

	MAVLINK_START_UART_SEND(chan, MAVLINK_NUM_NON_PAYLOAD_BYTES + (uint16_t)length);
	_mavlink_send_uart(chan, (const char *)buf, MAVLINK_NUM_HEADER_BYTES);
8000d74e:	ee c8 00 0c 	sub	r8,r7,12
8000d752:	30 6a       	mov	r10,6
8000d754:	10 9b       	mov	r11,r8
8000d756:	ee fc ff ec 	ld.w	r12,r7[-20]
8000d75a:	c1 5c       	rcall	8000d784 <_mavlink_send_uart>
	_mavlink_send_uart(chan, packet, length);
8000d75c:	ef 38 ff e0 	ld.ub	r8,r7[-32]
8000d760:	10 9a       	mov	r10,r8
8000d762:	ee fb ff e4 	ld.w	r11,r7[-28]
8000d766:	ee fc ff ec 	ld.w	r12,r7[-20]
8000d76a:	c0 dc       	rcall	8000d784 <_mavlink_send_uart>
	_mavlink_send_uart(chan, (const char *)ck, 2);
8000d76c:	ee c8 00 10 	sub	r8,r7,16
8000d770:	30 2a       	mov	r10,2
8000d772:	10 9b       	mov	r11,r8
8000d774:	ee fc ff ec 	ld.w	r12,r7[-20]
8000d778:	c0 6c       	rcall	8000d784 <_mavlink_send_uart>
	MAVLINK_END_UART_SEND(chan, MAVLINK_NUM_NON_PAYLOAD_BYTES + (uint16_t)length);
}
8000d77a:	2f 7d       	sub	sp,-36
8000d77c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000d780:	80 00       	ld.sh	r0,r0[0x0]
8000d782:	d5 12       	popm	r0-r3,r11,lr

8000d784 <_mavlink_send_uart>:
    }
}
 */

MAVLINK_HELPER void _mavlink_send_uart(mavlink_channel_t chan, const char *buf, uint16_t len)
{
8000d784:	eb cd 40 c0 	pushm	r6-r7,lr
8000d788:	1a 97       	mov	r7,sp
8000d78a:	20 4d       	sub	sp,16
8000d78c:	49 46       	lddpc	r6,8000d7dc <_mavlink_send_uart+0x58>
8000d78e:	1e 26       	rsub	r6,pc
8000d790:	ef 4c ff f8 	st.w	r7[-8],r12
8000d794:	ef 4b ff f4 	st.w	r7[-12],r11
8000d798:	14 98       	mov	r8,r10
8000d79a:	ef 58 ff f0 	st.h	r7[-16],r8
	   defines it */
	MAVLINK_SEND_UART_BYTES(chan, (const uint8_t *)buf, len);
#else
	/* fallback to one byte at a time */
	uint16_t i;
	for (i = 0; i < len; i++) {
8000d79e:	30 08       	mov	r8,0
8000d7a0:	ef 58 ff fe 	st.h	r7[-2],r8
8000d7a4:	c1 28       	rjmp	8000d7c8 <_mavlink_send_uart+0x44>
		comm_send_ch(chan, (uint8_t)buf[i]);
8000d7a6:	ef 18 ff fe 	ld.uh	r8,r7[-2]
8000d7aa:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000d7ae:	f2 08 00 08 	add	r8,r9,r8
8000d7b2:	11 88       	ld.ub	r8,r8[0x0]
8000d7b4:	10 9b       	mov	r11,r8
8000d7b6:	ee fc ff f8 	ld.w	r12,r7[-8]
8000d7ba:	f0 16 00 cd 	mcall	r6[820]
	   defines it */
	MAVLINK_SEND_UART_BYTES(chan, (const uint8_t *)buf, len);
#else
	/* fallback to one byte at a time */
	uint16_t i;
	for (i = 0; i < len; i++) {
8000d7be:	ef 08 ff fe 	ld.sh	r8,r7[-2]
8000d7c2:	2f f8       	sub	r8,-1
8000d7c4:	ef 58 ff fe 	st.h	r7[-2],r8
8000d7c8:	ef 09 ff fe 	ld.sh	r9,r7[-2]
8000d7cc:	ef 08 ff f0 	ld.sh	r8,r7[-16]
8000d7d0:	f0 09 19 00 	cp.h	r9,r8
8000d7d4:	ce 93       	brcs	8000d7a6 <_mavlink_send_uart+0x22>
		comm_send_ch(chan, (uint8_t)buf[i]);
	}
#endif
}
8000d7d6:	2f cd       	sub	sp,-16
8000d7d8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000d7dc:	80 00       	ld.sh	r0,r0[0x0]
8000d7de:	d6 12       	popm	r0-r3,r12,lr

8000d7e0 <byte_swap_2>:
	return msg->len + MAVLINK_NUM_NON_PAYLOAD_BYTES;
}

#if MAVLINK_NEED_BYTE_SWAP
static inline void byte_swap_2(char *dst, const char *src)
{
8000d7e0:	eb cd 40 80 	pushm	r7,lr
8000d7e4:	1a 97       	mov	r7,sp
8000d7e6:	20 2d       	sub	sp,8
8000d7e8:	ef 4c ff fc 	st.w	r7[-4],r12
8000d7ec:	ef 4b ff f8 	st.w	r7[-8],r11
	dst[0] = src[1];
8000d7f0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d7f4:	2f f8       	sub	r8,-1
8000d7f6:	11 88       	ld.ub	r8,r8[0x0]
8000d7f8:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000d7fc:	b2 88       	st.b	r9[0x0],r8
	dst[1] = src[0];
8000d7fe:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d802:	f0 c9 ff ff 	sub	r9,r8,-1
8000d806:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d80a:	11 88       	ld.ub	r8,r8[0x0]
8000d80c:	b2 88       	st.b	r9[0x0],r8
}
8000d80e:	2f ed       	sub	sp,-8
8000d810:	e3 cd 80 80 	ldm	sp++,r7,pc

8000d814 <byte_swap_4>:
static inline void byte_swap_4(char *dst, const char *src)
{
8000d814:	eb cd 40 80 	pushm	r7,lr
8000d818:	1a 97       	mov	r7,sp
8000d81a:	20 2d       	sub	sp,8
8000d81c:	ef 4c ff fc 	st.w	r7[-4],r12
8000d820:	ef 4b ff f8 	st.w	r7[-8],r11
	dst[0] = src[3];
8000d824:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d828:	2f d8       	sub	r8,-3
8000d82a:	11 88       	ld.ub	r8,r8[0x0]
8000d82c:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000d830:	b2 88       	st.b	r9[0x0],r8
	dst[1] = src[2];
8000d832:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d836:	f0 c9 ff ff 	sub	r9,r8,-1
8000d83a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d83e:	2f e8       	sub	r8,-2
8000d840:	11 88       	ld.ub	r8,r8[0x0]
8000d842:	b2 88       	st.b	r9[0x0],r8
	dst[2] = src[1];
8000d844:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d848:	f0 c9 ff fe 	sub	r9,r8,-2
8000d84c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d850:	2f f8       	sub	r8,-1
8000d852:	11 88       	ld.ub	r8,r8[0x0]
8000d854:	b2 88       	st.b	r9[0x0],r8
	dst[3] = src[0];
8000d856:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d85a:	f0 c9 ff fd 	sub	r9,r8,-3
8000d85e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d862:	11 88       	ld.ub	r8,r8[0x0]
8000d864:	b2 88       	st.b	r9[0x0],r8
}
8000d866:	2f ed       	sub	sp,-8
8000d868:	e3 cd 80 80 	ldm	sp++,r7,pc

8000d86c <byte_swap_8>:
static inline void byte_swap_8(char *dst, const char *src)
{
8000d86c:	eb cd 40 80 	pushm	r7,lr
8000d870:	1a 97       	mov	r7,sp
8000d872:	20 2d       	sub	sp,8
8000d874:	ef 4c ff fc 	st.w	r7[-4],r12
8000d878:	ef 4b ff f8 	st.w	r7[-8],r11
	dst[0] = src[7];
8000d87c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d880:	2f 98       	sub	r8,-7
8000d882:	11 88       	ld.ub	r8,r8[0x0]
8000d884:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000d888:	b2 88       	st.b	r9[0x0],r8
	dst[1] = src[6];
8000d88a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d88e:	f0 c9 ff ff 	sub	r9,r8,-1
8000d892:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d896:	2f a8       	sub	r8,-6
8000d898:	11 88       	ld.ub	r8,r8[0x0]
8000d89a:	b2 88       	st.b	r9[0x0],r8
	dst[2] = src[5];
8000d89c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d8a0:	f0 c9 ff fe 	sub	r9,r8,-2
8000d8a4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d8a8:	2f b8       	sub	r8,-5
8000d8aa:	11 88       	ld.ub	r8,r8[0x0]
8000d8ac:	b2 88       	st.b	r9[0x0],r8
	dst[3] = src[4];
8000d8ae:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d8b2:	f0 c9 ff fd 	sub	r9,r8,-3
8000d8b6:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d8ba:	2f c8       	sub	r8,-4
8000d8bc:	11 88       	ld.ub	r8,r8[0x0]
8000d8be:	b2 88       	st.b	r9[0x0],r8
	dst[4] = src[3];
8000d8c0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d8c4:	f0 c9 ff fc 	sub	r9,r8,-4
8000d8c8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d8cc:	2f d8       	sub	r8,-3
8000d8ce:	11 88       	ld.ub	r8,r8[0x0]
8000d8d0:	b2 88       	st.b	r9[0x0],r8
	dst[5] = src[2];
8000d8d2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d8d6:	f0 c9 ff fb 	sub	r9,r8,-5
8000d8da:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d8de:	2f e8       	sub	r8,-2
8000d8e0:	11 88       	ld.ub	r8,r8[0x0]
8000d8e2:	b2 88       	st.b	r9[0x0],r8
	dst[6] = src[1];
8000d8e4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d8e8:	f0 c9 ff fa 	sub	r9,r8,-6
8000d8ec:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d8f0:	2f f8       	sub	r8,-1
8000d8f2:	11 88       	ld.ub	r8,r8[0x0]
8000d8f4:	b2 88       	st.b	r9[0x0],r8
	dst[7] = src[0];
8000d8f6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d8fa:	f0 c9 ff f9 	sub	r9,r8,-7
8000d8fe:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d902:	11 88       	ld.ub	r8,r8[0x0]
8000d904:	b2 88       	st.b	r9[0x0],r8
}
8000d906:	2f ed       	sub	sp,-8
8000d908:	e3 cd 80 80 	ldm	sp++,r7,pc

8000d90c <mav_array_memcpy>:

/*
  like memcpy(), but if src is NULL, do a memset to zero
*/
static void mav_array_memcpy(void *dest, const void *src, size_t n)
{
8000d90c:	eb cd 40 c0 	pushm	r6-r7,lr
8000d910:	1a 97       	mov	r7,sp
8000d912:	20 3d       	sub	sp,12
8000d914:	49 06       	lddpc	r6,8000d954 <mav_array_memcpy+0x48>
8000d916:	1e 26       	rsub	r6,pc
8000d918:	ef 4c ff fc 	st.w	r7[-4],r12
8000d91c:	ef 4b ff f8 	st.w	r7[-8],r11
8000d920:	ef 4a ff f4 	st.w	r7[-12],r10
	if (src == NULL) {
8000d924:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d928:	58 08       	cp.w	r8,0
8000d92a:	c0 91       	brne	8000d93c <mav_array_memcpy+0x30>
		memset(dest, 0, n);
8000d92c:	ee fa ff f4 	ld.w	r10,r7[-12]
8000d930:	30 0b       	mov	r11,0
8000d932:	ee fc ff fc 	ld.w	r12,r7[-4]
8000d936:	f0 16 00 30 	mcall	r6[192]
8000d93a:	c0 98       	rjmp	8000d94c <mav_array_memcpy+0x40>
	} else {
		memcpy(dest, src, n);
8000d93c:	ee fa ff f4 	ld.w	r10,r7[-12]
8000d940:	ee fb ff f8 	ld.w	r11,r7[-8]
8000d944:	ee fc ff fc 	ld.w	r12,r7[-4]
8000d948:	f0 16 00 20 	mcall	r6[128]
	}
}
8000d94c:	2f dd       	sub	sp,-12
8000d94e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000d952:	00 00       	add	r0,r0
8000d954:	80 00       	ld.sh	r0,r0[0x0]
8000d956:	d7 9a       	popm	r0-r3,r10-r12,lr

8000d958 <_mav_put_char_array>:

/*
 * Place a char array into a buffer
 */
static inline void _mav_put_char_array(char *buf, uint8_t wire_offset, const char *b, uint8_t array_length)
{
8000d958:	eb cd 40 c0 	pushm	r6-r7,lr
8000d95c:	1a 97       	mov	r7,sp
8000d95e:	20 4d       	sub	sp,16
8000d960:	48 e6       	lddpc	r6,8000d998 <_mav_put_char_array+0x40>
8000d962:	1e 26       	rsub	r6,pc
8000d964:	ef 4c ff fc 	st.w	r7[-4],r12
8000d968:	ef 4a ff f4 	st.w	r7[-12],r10
8000d96c:	12 98       	mov	r8,r9
8000d96e:	16 99       	mov	r9,r11
8000d970:	ef 69 ff f8 	st.b	r7[-8],r9
8000d974:	ef 68 ff f0 	st.b	r7[-16],r8
	mav_array_memcpy(&buf[wire_offset], b, array_length);
8000d978:	ef 39 ff f0 	ld.ub	r9,r7[-16]
8000d97c:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000d980:	ee fa ff fc 	ld.w	r10,r7[-4]
8000d984:	f4 08 00 08 	add	r8,r10,r8
8000d988:	12 9a       	mov	r10,r9
8000d98a:	ee fb ff f4 	ld.w	r11,r7[-12]
8000d98e:	10 9c       	mov	r12,r8
8000d990:	cb ef       	rcall	8000d90c <mav_array_memcpy>

}
8000d992:	2f cd       	sub	sp,-16
8000d994:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000d998:	80 00       	ld.sh	r0,r0[0x0]
8000d99a:	d7 e6       	*unknown*

8000d99c <_MAV_RETURN_uint16_t>:
#if MAVLINK_NEED_BYTE_SWAP
#define _MAV_MSG_RETURN_TYPE(TYPE, SIZE) \
static inline TYPE _MAV_RETURN_## TYPE(const mavlink_message_t *msg, uint8_t ofs) \
{ TYPE r; byte_swap_## SIZE((char*)&r, &_MAV_PAYLOAD(msg)[ofs]); return r; }

_MAV_MSG_RETURN_TYPE(uint16_t, 2)
8000d99c:	eb cd 40 c0 	pushm	r6-r7,lr
8000d9a0:	1a 97       	mov	r7,sp
8000d9a2:	20 3d       	sub	sp,12
8000d9a4:	48 d6       	lddpc	r6,8000d9d8 <_MAV_RETURN_uint16_t+0x3c>
8000d9a6:	1e 26       	rsub	r6,pc
8000d9a8:	ef 4c ff f8 	st.w	r7[-8],r12
8000d9ac:	16 98       	mov	r8,r11
8000d9ae:	ef 68 ff f4 	st.b	r7[-12],r8
8000d9b2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d9b6:	2f 88       	sub	r8,-8
8000d9b8:	10 99       	mov	r9,r8
8000d9ba:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000d9be:	10 09       	add	r9,r8
8000d9c0:	ee c8 00 02 	sub	r8,r7,2
8000d9c4:	12 9b       	mov	r11,r9
8000d9c6:	10 9c       	mov	r12,r8
8000d9c8:	c0 cf       	rcall	8000d7e0 <byte_swap_2>
8000d9ca:	ef 08 ff fe 	ld.sh	r8,r7[-2]
8000d9ce:	10 9c       	mov	r12,r8
8000d9d0:	2f dd       	sub	sp,-12
8000d9d2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000d9d6:	00 00       	add	r0,r0
8000d9d8:	80 00       	ld.sh	r0,r0[0x0]
8000d9da:	d8 2a       	popm	r4-r7,pc,r12=0

8000d9dc <_MAV_RETURN_float>:
_MAV_MSG_RETURN_TYPE(int16_t,  2)
_MAV_MSG_RETURN_TYPE(uint32_t, 4)
_MAV_MSG_RETURN_TYPE(int32_t,  4)
_MAV_MSG_RETURN_TYPE(uint64_t, 8)
_MAV_MSG_RETURN_TYPE(int64_t,  8)
_MAV_MSG_RETURN_TYPE(float,    4)
8000d9dc:	eb cd 40 c0 	pushm	r6-r7,lr
8000d9e0:	1a 97       	mov	r7,sp
8000d9e2:	20 3d       	sub	sp,12
8000d9e4:	48 d6       	lddpc	r6,8000da18 <_MAV_RETURN_float+0x3c>
8000d9e6:	1e 26       	rsub	r6,pc
8000d9e8:	ef 4c ff f8 	st.w	r7[-8],r12
8000d9ec:	16 98       	mov	r8,r11
8000d9ee:	ef 68 ff f4 	st.b	r7[-12],r8
8000d9f2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d9f6:	2f 88       	sub	r8,-8
8000d9f8:	10 99       	mov	r9,r8
8000d9fa:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000d9fe:	10 09       	add	r9,r8
8000da00:	ee c8 00 04 	sub	r8,r7,4
8000da04:	12 9b       	mov	r11,r9
8000da06:	10 9c       	mov	r12,r8
8000da08:	c0 6f       	rcall	8000d814 <byte_swap_4>
8000da0a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000da0e:	10 9c       	mov	r12,r8
8000da10:	2f dd       	sub	sp,-12
8000da12:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000da16:	00 00       	add	r0,r0
8000da18:	80 00       	ld.sh	r0,r0[0x0]
8000da1a:	d8 6a       	popm	r4-r9,pc,r12=0

8000da1c <mavlink_msg_heartbeat_send>:
 * @param system_status System status flag, see MAV_STATE ENUM
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_heartbeat_send(mavlink_channel_t chan, uint8_t type, uint8_t autopilot, uint8_t base_mode, uint32_t custom_mode, uint8_t system_status)
{
8000da1c:	eb cd 40 c0 	pushm	r6-r7,lr
8000da20:	1a 97       	mov	r7,sp
8000da22:	20 9d       	sub	sp,36
8000da24:	49 c6       	lddpc	r6,8000da94 <mavlink_msg_heartbeat_send+0x78>
8000da26:	1e 26       	rsub	r6,pc
8000da28:	ee ce ff f4 	sub	lr,r7,-12
8000da2c:	ef 4c ff f0 	st.w	r7[-16],r12
8000da30:	ef 48 ff e0 	st.w	r7[-32],r8
8000da34:	7c 08       	ld.w	r8,lr[0x0]
8000da36:	ef 6b ff ec 	st.b	r7[-20],r11
8000da3a:	ef 6a ff e8 	st.b	r7[-24],r10
8000da3e:	ef 69 ff e4 	st.b	r7[-28],r9
8000da42:	ef 68 ff dc 	st.b	r7[-36],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_HEARTBEAT_LEN];
	_mav_put_uint32_t(buf, 0, custom_mode);
8000da46:	ee c9 00 20 	sub	r9,r7,32
8000da4a:	ee c8 00 0c 	sub	r8,r7,12
8000da4e:	12 9b       	mov	r11,r9
8000da50:	10 9c       	mov	r12,r8
8000da52:	ce 1e       	rcall	8000d814 <byte_swap_4>
	_mav_put_uint8_t(buf, 4, type);
8000da54:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000da58:	ef 68 ff f8 	st.b	r7[-8],r8
	_mav_put_uint8_t(buf, 5, autopilot);
8000da5c:	ef 38 ff e8 	ld.ub	r8,r7[-24]
8000da60:	ef 68 ff f9 	st.b	r7[-7],r8
	_mav_put_uint8_t(buf, 6, base_mode);
8000da64:	ef 38 ff e4 	ld.ub	r8,r7[-28]
8000da68:	ef 68 ff fa 	st.b	r7[-6],r8
	_mav_put_uint8_t(buf, 7, system_status);
8000da6c:	ef 38 ff dc 	ld.ub	r8,r7[-36]
8000da70:	ef 68 ff fb 	st.b	r7[-5],r8
	_mav_put_uint8_t(buf, 8, 3);
8000da74:	30 38       	mov	r8,3
8000da76:	ef 68 ff fc 	st.b	r7[-4],r8

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_HEARTBEAT, buf, MAVLINK_MSG_ID_HEARTBEAT_LEN, MAVLINK_MSG_ID_HEARTBEAT_CRC);
8000da7a:	ee ca 00 0c 	sub	r10,r7,12
8000da7e:	33 28       	mov	r8,50
8000da80:	30 99       	mov	r9,9
8000da82:	30 0b       	mov	r11,0
8000da84:	ee fc ff f0 	ld.w	r12,r7[-16]
8000da88:	fe b0 fd fe 	rcall	8000d684 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_HEARTBEAT, (const char *)&packet, MAVLINK_MSG_ID_HEARTBEAT_LEN, MAVLINK_MSG_ID_HEARTBEAT_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_HEARTBEAT, (const char *)&packet, MAVLINK_MSG_ID_HEARTBEAT_LEN);
#endif
#endif
}
8000da8c:	2f 7d       	sub	sp,-36
8000da8e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000da92:	00 00       	add	r0,r0
8000da94:	80 00       	ld.sh	r0,r0[0x0]
8000da96:	d8 aa       	popm	r4-r7,r10,pc,r12=0

8000da98 <mavlink_msg_gps_raw_int_send>:
 * @param satellites_visible Number of satellites visible. If unknown, set to 255
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_gps_raw_int_send(mavlink_channel_t chan, uint64_t time_usec, uint8_t fix_type, int32_t lat, int32_t lon, int32_t alt, uint16_t eph, uint16_t epv, uint16_t vel, uint16_t cog, uint8_t satellites_visible)
{
8000da98:	eb cd 40 e0 	pushm	r5-r7,lr
8000da9c:	1a 97       	mov	r7,sp
8000da9e:	21 2d       	sub	sp,72
8000daa0:	4b 76       	lddpc	r6,8000db7c <mavlink_msg_gps_raw_int_send+0xe4>
8000daa2:	1e 26       	rsub	r6,pc
8000daa4:	ee c5 ff f0 	sub	r5,r7,-16
8000daa8:	ef 4c ff dc 	st.w	r7[-36],r12
8000daac:	ee eb ff d4 	st.d	r7[-44],r10
8000dab0:	12 9e       	mov	lr,r9
8000dab2:	ef 48 ff cc 	st.w	r7[-52],r8
8000dab6:	6a 2c       	ld.w	r12,r5[0x8]
8000dab8:	6a 3b       	ld.w	r11,r5[0xc]
8000daba:	6a 4a       	ld.w	r10,r5[0x10]
8000dabc:	6a 59       	ld.w	r9,r5[0x14]
8000dabe:	6a 68       	ld.w	r8,r5[0x18]
8000dac0:	ef 6e ff d0 	st.b	r7[-48],lr
8000dac4:	ef 5c ff c8 	st.h	r7[-56],r12
8000dac8:	ef 5b ff c4 	st.h	r7[-60],r11
8000dacc:	ef 5a ff c0 	st.h	r7[-64],r10
8000dad0:	ef 59 ff bc 	st.h	r7[-68],r9
8000dad4:	ef 68 ff b8 	st.b	r7[-72],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_GPS_RAW_INT_LEN];
	_mav_put_uint64_t(buf, 0, time_usec);
8000dad8:	ee c9 00 2c 	sub	r9,r7,44
8000dadc:	ee c8 00 20 	sub	r8,r7,32
8000dae0:	12 9b       	mov	r11,r9
8000dae2:	10 9c       	mov	r12,r8
8000dae4:	cc 4e       	rcall	8000d86c <byte_swap_8>
	_mav_put_int32_t(buf, 8, lat);
8000dae6:	ee c9 00 34 	sub	r9,r7,52
8000daea:	ee c8 00 20 	sub	r8,r7,32
8000daee:	2f 88       	sub	r8,-8
8000daf0:	12 9b       	mov	r11,r9
8000daf2:	10 9c       	mov	r12,r8
8000daf4:	c9 0e       	rcall	8000d814 <byte_swap_4>
	_mav_put_int32_t(buf, 12, lon);
8000daf6:	0a 99       	mov	r9,r5
8000daf8:	ee c8 00 20 	sub	r8,r7,32
8000dafc:	2f 48       	sub	r8,-12
8000dafe:	12 9b       	mov	r11,r9
8000db00:	10 9c       	mov	r12,r8
8000db02:	c8 9e       	rcall	8000d814 <byte_swap_4>
	_mav_put_int32_t(buf, 16, alt);
8000db04:	ea c9 ff fc 	sub	r9,r5,-4
8000db08:	ee c8 00 20 	sub	r8,r7,32
8000db0c:	2f 08       	sub	r8,-16
8000db0e:	12 9b       	mov	r11,r9
8000db10:	10 9c       	mov	r12,r8
8000db12:	c8 1e       	rcall	8000d814 <byte_swap_4>
	_mav_put_uint16_t(buf, 20, eph);
8000db14:	ee c9 00 38 	sub	r9,r7,56
8000db18:	ee c8 00 20 	sub	r8,r7,32
8000db1c:	2e c8       	sub	r8,-20
8000db1e:	12 9b       	mov	r11,r9
8000db20:	10 9c       	mov	r12,r8
8000db22:	c5 fe       	rcall	8000d7e0 <byte_swap_2>
	_mav_put_uint16_t(buf, 22, epv);
8000db24:	ee c9 00 3c 	sub	r9,r7,60
8000db28:	ee c8 00 20 	sub	r8,r7,32
8000db2c:	2e a8       	sub	r8,-22
8000db2e:	12 9b       	mov	r11,r9
8000db30:	10 9c       	mov	r12,r8
8000db32:	c5 7e       	rcall	8000d7e0 <byte_swap_2>
	_mav_put_uint16_t(buf, 24, vel);
8000db34:	ee c9 00 40 	sub	r9,r7,64
8000db38:	ee c8 00 20 	sub	r8,r7,32
8000db3c:	2e 88       	sub	r8,-24
8000db3e:	12 9b       	mov	r11,r9
8000db40:	10 9c       	mov	r12,r8
8000db42:	c4 fe       	rcall	8000d7e0 <byte_swap_2>
	_mav_put_uint16_t(buf, 26, cog);
8000db44:	ee c9 00 44 	sub	r9,r7,68
8000db48:	ee c8 00 20 	sub	r8,r7,32
8000db4c:	2e 68       	sub	r8,-26
8000db4e:	12 9b       	mov	r11,r9
8000db50:	10 9c       	mov	r12,r8
8000db52:	c4 7e       	rcall	8000d7e0 <byte_swap_2>
	_mav_put_uint8_t(buf, 28, fix_type);
8000db54:	ef 38 ff d0 	ld.ub	r8,r7[-48]
8000db58:	ef 68 ff fc 	st.b	r7[-4],r8
	_mav_put_uint8_t(buf, 29, satellites_visible);
8000db5c:	ef 38 ff b8 	ld.ub	r8,r7[-72]
8000db60:	ef 68 ff fd 	st.b	r7[-3],r8

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_GPS_RAW_INT, buf, MAVLINK_MSG_ID_GPS_RAW_INT_LEN, MAVLINK_MSG_ID_GPS_RAW_INT_CRC);
8000db64:	ee ca 00 20 	sub	r10,r7,32
8000db68:	31 88       	mov	r8,24
8000db6a:	31 e9       	mov	r9,30
8000db6c:	31 8b       	mov	r11,24
8000db6e:	ee fc ff dc 	ld.w	r12,r7[-36]
8000db72:	fe b0 fd 89 	rcall	8000d684 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_GPS_RAW_INT, (const char *)&packet, MAVLINK_MSG_ID_GPS_RAW_INT_LEN, MAVLINK_MSG_ID_GPS_RAW_INT_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_GPS_RAW_INT, (const char *)&packet, MAVLINK_MSG_ID_GPS_RAW_INT_LEN);
#endif
#endif
}
8000db76:	2e ed       	sub	sp,-72
8000db78:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000db7c:	80 00       	ld.sh	r0,r0[0x0]
8000db7e:	d9 26       	*unknown*

8000db80 <mavlink_msg_scaled_imu_send>:
 * @param zmag Z Magnetic field (milli tesla)
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_scaled_imu_send(mavlink_channel_t chan, uint32_t time_boot_ms, int16_t xacc, int16_t yacc, int16_t zacc, int16_t xgyro, int16_t ygyro, int16_t zgyro, int16_t xmag, int16_t ymag, int16_t zmag)
{
8000db80:	eb cd 40 ee 	pushm	r1-r3,r5-r7,lr
8000db84:	1a 97       	mov	r7,sp
8000db86:	21 1d       	sub	sp,68
8000db88:	4c 66       	lddpc	r6,8000dca0 <mavlink_msg_scaled_imu_send+0x120>
8000db8a:	1e 26       	rsub	r6,pc
8000db8c:	ee ce ff e4 	sub	lr,r7,-28
8000db90:	ef 4c ff e4 	st.w	r7[-28],r12
8000db94:	ef 4b ff e0 	st.w	r7[-32],r11
8000db98:	14 91       	mov	r1,r10
8000db9a:	12 92       	mov	r2,r9
8000db9c:	10 93       	mov	r3,r8
8000db9e:	7c 05       	ld.w	r5,lr[0x0]
8000dba0:	7c 1c       	ld.w	r12,lr[0x4]
8000dba2:	7c 2b       	ld.w	r11,lr[0x8]
8000dba4:	7c 3a       	ld.w	r10,lr[0xc]
8000dba6:	7c 49       	ld.w	r9,lr[0x10]
8000dba8:	7c 58       	ld.w	r8,lr[0x14]
8000dbaa:	02 9e       	mov	lr,r1
8000dbac:	ef 5e ff dc 	st.h	r7[-36],lr
8000dbb0:	04 9e       	mov	lr,r2
8000dbb2:	ef 5e ff d8 	st.h	r7[-40],lr
8000dbb6:	06 9e       	mov	lr,r3
8000dbb8:	ef 5e ff d4 	st.h	r7[-44],lr
8000dbbc:	0a 9e       	mov	lr,r5
8000dbbe:	ef 5e ff d0 	st.h	r7[-48],lr
8000dbc2:	ef 5c ff cc 	st.h	r7[-52],r12
8000dbc6:	ef 5b ff c8 	st.h	r7[-56],r11
8000dbca:	ef 5a ff c4 	st.h	r7[-60],r10
8000dbce:	ef 59 ff c0 	st.h	r7[-64],r9
8000dbd2:	ef 58 ff bc 	st.h	r7[-68],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_SCALED_IMU_LEN];
	_mav_put_uint32_t(buf, 0, time_boot_ms);
8000dbd6:	ee c9 00 20 	sub	r9,r7,32
8000dbda:	ee c8 00 18 	sub	r8,r7,24
8000dbde:	12 9b       	mov	r11,r9
8000dbe0:	10 9c       	mov	r12,r8
8000dbe2:	c1 9e       	rcall	8000d814 <byte_swap_4>
	_mav_put_int16_t(buf, 4, xacc);
8000dbe4:	ee c9 00 24 	sub	r9,r7,36
8000dbe8:	ee c8 00 18 	sub	r8,r7,24
8000dbec:	2f c8       	sub	r8,-4
8000dbee:	12 9b       	mov	r11,r9
8000dbf0:	10 9c       	mov	r12,r8
8000dbf2:	fe b0 fd f7 	rcall	8000d7e0 <byte_swap_2>
	_mav_put_int16_t(buf, 6, yacc);
8000dbf6:	ee c9 00 28 	sub	r9,r7,40
8000dbfa:	ee c8 00 18 	sub	r8,r7,24
8000dbfe:	2f a8       	sub	r8,-6
8000dc00:	12 9b       	mov	r11,r9
8000dc02:	10 9c       	mov	r12,r8
8000dc04:	fe b0 fd ee 	rcall	8000d7e0 <byte_swap_2>
	_mav_put_int16_t(buf, 8, zacc);
8000dc08:	ee c9 00 2c 	sub	r9,r7,44
8000dc0c:	ee c8 00 18 	sub	r8,r7,24
8000dc10:	2f 88       	sub	r8,-8
8000dc12:	12 9b       	mov	r11,r9
8000dc14:	10 9c       	mov	r12,r8
8000dc16:	fe b0 fd e5 	rcall	8000d7e0 <byte_swap_2>
	_mav_put_int16_t(buf, 10, xgyro);
8000dc1a:	ee c9 00 30 	sub	r9,r7,48
8000dc1e:	ee c8 00 18 	sub	r8,r7,24
8000dc22:	2f 68       	sub	r8,-10
8000dc24:	12 9b       	mov	r11,r9
8000dc26:	10 9c       	mov	r12,r8
8000dc28:	fe b0 fd dc 	rcall	8000d7e0 <byte_swap_2>
	_mav_put_int16_t(buf, 12, ygyro);
8000dc2c:	ee c9 00 34 	sub	r9,r7,52
8000dc30:	ee c8 00 18 	sub	r8,r7,24
8000dc34:	2f 48       	sub	r8,-12
8000dc36:	12 9b       	mov	r11,r9
8000dc38:	10 9c       	mov	r12,r8
8000dc3a:	fe b0 fd d3 	rcall	8000d7e0 <byte_swap_2>
	_mav_put_int16_t(buf, 14, zgyro);
8000dc3e:	ee c9 00 38 	sub	r9,r7,56
8000dc42:	ee c8 00 18 	sub	r8,r7,24
8000dc46:	2f 28       	sub	r8,-14
8000dc48:	12 9b       	mov	r11,r9
8000dc4a:	10 9c       	mov	r12,r8
8000dc4c:	fe b0 fd ca 	rcall	8000d7e0 <byte_swap_2>
	_mav_put_int16_t(buf, 16, xmag);
8000dc50:	ee c9 00 3c 	sub	r9,r7,60
8000dc54:	ee c8 00 18 	sub	r8,r7,24
8000dc58:	2f 08       	sub	r8,-16
8000dc5a:	12 9b       	mov	r11,r9
8000dc5c:	10 9c       	mov	r12,r8
8000dc5e:	fe b0 fd c1 	rcall	8000d7e0 <byte_swap_2>
	_mav_put_int16_t(buf, 18, ymag);
8000dc62:	ee c9 00 40 	sub	r9,r7,64
8000dc66:	ee c8 00 18 	sub	r8,r7,24
8000dc6a:	2e e8       	sub	r8,-18
8000dc6c:	12 9b       	mov	r11,r9
8000dc6e:	10 9c       	mov	r12,r8
8000dc70:	fe b0 fd b8 	rcall	8000d7e0 <byte_swap_2>
	_mav_put_int16_t(buf, 20, zmag);
8000dc74:	ee c9 00 44 	sub	r9,r7,68
8000dc78:	ee c8 00 18 	sub	r8,r7,24
8000dc7c:	2e c8       	sub	r8,-20
8000dc7e:	12 9b       	mov	r11,r9
8000dc80:	10 9c       	mov	r12,r8
8000dc82:	fe b0 fd af 	rcall	8000d7e0 <byte_swap_2>

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_SCALED_IMU, buf, MAVLINK_MSG_ID_SCALED_IMU_LEN, MAVLINK_MSG_ID_SCALED_IMU_CRC);
8000dc86:	ee ca 00 18 	sub	r10,r7,24
8000dc8a:	e0 68 00 aa 	mov	r8,170
8000dc8e:	31 69       	mov	r9,22
8000dc90:	31 ab       	mov	r11,26
8000dc92:	ee fc ff e4 	ld.w	r12,r7[-28]
8000dc96:	fe b0 fc f7 	rcall	8000d684 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_SCALED_IMU, (const char *)&packet, MAVLINK_MSG_ID_SCALED_IMU_LEN, MAVLINK_MSG_ID_SCALED_IMU_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_SCALED_IMU, (const char *)&packet, MAVLINK_MSG_ID_SCALED_IMU_LEN);
#endif
#endif
}
8000dc9a:	2e fd       	sub	sp,-68
8000dc9c:	e3 cd 80 ee 	ldm	sp++,r1-r3,r5-r7,pc
8000dca0:	80 00       	ld.sh	r0,r0[0x0]
8000dca2:	da 0e       	*unknown*

8000dca4 <mavlink_msg_raw_imu_send>:
 * @param zmag Z Magnetic field (raw)
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_raw_imu_send(mavlink_channel_t chan, uint64_t time_usec, int16_t xacc, int16_t yacc, int16_t zacc, int16_t xgyro, int16_t ygyro, int16_t zgyro, int16_t xmag, int16_t ymag, int16_t zmag)
{
8000dca4:	eb cd 40 ee 	pushm	r1-r3,r5-r7,lr
8000dca8:	1a 97       	mov	r7,sp
8000dcaa:	21 3d       	sub	sp,76
8000dcac:	4c 76       	lddpc	r6,8000ddc8 <mavlink_msg_raw_imu_send+0x124>
8000dcae:	1e 26       	rsub	r6,pc
8000dcb0:	ee ce ff e4 	sub	lr,r7,-28
8000dcb4:	ef 4c ff e0 	st.w	r7[-32],r12
8000dcb8:	ee eb ff d8 	st.d	r7[-40],r10
8000dcbc:	12 91       	mov	r1,r9
8000dcbe:	10 92       	mov	r2,r8
8000dcc0:	7c 03       	ld.w	r3,lr[0x0]
8000dcc2:	7c 15       	ld.w	r5,lr[0x4]
8000dcc4:	7c 2c       	ld.w	r12,lr[0x8]
8000dcc6:	7c 3b       	ld.w	r11,lr[0xc]
8000dcc8:	7c 4a       	ld.w	r10,lr[0x10]
8000dcca:	7c 59       	ld.w	r9,lr[0x14]
8000dccc:	7c 68       	ld.w	r8,lr[0x18]
8000dcce:	02 9e       	mov	lr,r1
8000dcd0:	ef 5e ff d4 	st.h	r7[-44],lr
8000dcd4:	04 9e       	mov	lr,r2
8000dcd6:	ef 5e ff d0 	st.h	r7[-48],lr
8000dcda:	06 9e       	mov	lr,r3
8000dcdc:	ef 5e ff cc 	st.h	r7[-52],lr
8000dce0:	0a 9e       	mov	lr,r5
8000dce2:	ef 5e ff c8 	st.h	r7[-56],lr
8000dce6:	ef 5c ff c4 	st.h	r7[-60],r12
8000dcea:	ef 5b ff c0 	st.h	r7[-64],r11
8000dcee:	ef 5a ff bc 	st.h	r7[-68],r10
8000dcf2:	ef 59 ff b8 	st.h	r7[-72],r9
8000dcf6:	ef 58 ff b4 	st.h	r7[-76],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_RAW_IMU_LEN];
	_mav_put_uint64_t(buf, 0, time_usec);
8000dcfa:	ee c9 00 28 	sub	r9,r7,40
8000dcfe:	ee c8 00 1c 	sub	r8,r7,28
8000dd02:	12 9b       	mov	r11,r9
8000dd04:	10 9c       	mov	r12,r8
8000dd06:	fe b0 fd b3 	rcall	8000d86c <byte_swap_8>
	_mav_put_int16_t(buf, 8, xacc);
8000dd0a:	ee c9 00 2c 	sub	r9,r7,44
8000dd0e:	ee c8 00 1c 	sub	r8,r7,28
8000dd12:	2f 88       	sub	r8,-8
8000dd14:	12 9b       	mov	r11,r9
8000dd16:	10 9c       	mov	r12,r8
8000dd18:	fe b0 fd 64 	rcall	8000d7e0 <byte_swap_2>
	_mav_put_int16_t(buf, 10, yacc);
8000dd1c:	ee c9 00 30 	sub	r9,r7,48
8000dd20:	ee c8 00 1c 	sub	r8,r7,28
8000dd24:	2f 68       	sub	r8,-10
8000dd26:	12 9b       	mov	r11,r9
8000dd28:	10 9c       	mov	r12,r8
8000dd2a:	fe b0 fd 5b 	rcall	8000d7e0 <byte_swap_2>
	_mav_put_int16_t(buf, 12, zacc);
8000dd2e:	ee c9 00 34 	sub	r9,r7,52
8000dd32:	ee c8 00 1c 	sub	r8,r7,28
8000dd36:	2f 48       	sub	r8,-12
8000dd38:	12 9b       	mov	r11,r9
8000dd3a:	10 9c       	mov	r12,r8
8000dd3c:	fe b0 fd 52 	rcall	8000d7e0 <byte_swap_2>
	_mav_put_int16_t(buf, 14, xgyro);
8000dd40:	ee c9 00 38 	sub	r9,r7,56
8000dd44:	ee c8 00 1c 	sub	r8,r7,28
8000dd48:	2f 28       	sub	r8,-14
8000dd4a:	12 9b       	mov	r11,r9
8000dd4c:	10 9c       	mov	r12,r8
8000dd4e:	fe b0 fd 49 	rcall	8000d7e0 <byte_swap_2>
	_mav_put_int16_t(buf, 16, ygyro);
8000dd52:	ee c9 00 3c 	sub	r9,r7,60
8000dd56:	ee c8 00 1c 	sub	r8,r7,28
8000dd5a:	2f 08       	sub	r8,-16
8000dd5c:	12 9b       	mov	r11,r9
8000dd5e:	10 9c       	mov	r12,r8
8000dd60:	fe b0 fd 40 	rcall	8000d7e0 <byte_swap_2>
	_mav_put_int16_t(buf, 18, zgyro);
8000dd64:	ee c9 00 40 	sub	r9,r7,64
8000dd68:	ee c8 00 1c 	sub	r8,r7,28
8000dd6c:	2e e8       	sub	r8,-18
8000dd6e:	12 9b       	mov	r11,r9
8000dd70:	10 9c       	mov	r12,r8
8000dd72:	fe b0 fd 37 	rcall	8000d7e0 <byte_swap_2>
	_mav_put_int16_t(buf, 20, xmag);
8000dd76:	ee c9 00 44 	sub	r9,r7,68
8000dd7a:	ee c8 00 1c 	sub	r8,r7,28
8000dd7e:	2e c8       	sub	r8,-20
8000dd80:	12 9b       	mov	r11,r9
8000dd82:	10 9c       	mov	r12,r8
8000dd84:	fe b0 fd 2e 	rcall	8000d7e0 <byte_swap_2>
	_mav_put_int16_t(buf, 22, ymag);
8000dd88:	ee c9 00 48 	sub	r9,r7,72
8000dd8c:	ee c8 00 1c 	sub	r8,r7,28
8000dd90:	2e a8       	sub	r8,-22
8000dd92:	12 9b       	mov	r11,r9
8000dd94:	10 9c       	mov	r12,r8
8000dd96:	fe b0 fd 25 	rcall	8000d7e0 <byte_swap_2>
	_mav_put_int16_t(buf, 24, zmag);
8000dd9a:	ee c9 00 4c 	sub	r9,r7,76
8000dd9e:	ee c8 00 1c 	sub	r8,r7,28
8000dda2:	2e 88       	sub	r8,-24
8000dda4:	12 9b       	mov	r11,r9
8000dda6:	10 9c       	mov	r12,r8
8000dda8:	fe b0 fd 1c 	rcall	8000d7e0 <byte_swap_2>

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_RAW_IMU, buf, MAVLINK_MSG_ID_RAW_IMU_LEN, MAVLINK_MSG_ID_RAW_IMU_CRC);
8000ddac:	ee ca 00 1c 	sub	r10,r7,28
8000ddb0:	e0 68 00 90 	mov	r8,144
8000ddb4:	31 a9       	mov	r9,26
8000ddb6:	31 bb       	mov	r11,27
8000ddb8:	ee fc ff e0 	ld.w	r12,r7[-32]
8000ddbc:	fe b0 fc 64 	rcall	8000d684 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_RAW_IMU, (const char *)&packet, MAVLINK_MSG_ID_RAW_IMU_LEN, MAVLINK_MSG_ID_RAW_IMU_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_RAW_IMU, (const char *)&packet, MAVLINK_MSG_ID_RAW_IMU_LEN);
#endif
#endif
}
8000ddc0:	2e dd       	sub	sp,-76
8000ddc2:	e3 cd 80 ee 	ldm	sp++,r1-r3,r5-r7,pc
8000ddc6:	00 00       	add	r0,r0
8000ddc8:	80 00       	ld.sh	r0,r0[0x0]
8000ddca:	db 32       	popm	r0-r7,r11-r12,pc

8000ddcc <mavlink_msg_scaled_pressure_send>:
 * @param temperature Temperature measurement (0.01 degrees celsius)
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_scaled_pressure_send(mavlink_channel_t chan, uint32_t time_boot_ms, float press_abs, float press_diff, int16_t temperature)
{
8000ddcc:	eb cd 40 c0 	pushm	r6-r7,lr
8000ddd0:	1a 97       	mov	r7,sp
8000ddd2:	20 9d       	sub	sp,36
8000ddd4:	49 e6       	lddpc	r6,8000de4c <mavlink_msg_scaled_pressure_send+0x80>
8000ddd6:	1e 26       	rsub	r6,pc
8000ddd8:	ef 4c ff ec 	st.w	r7[-20],r12
8000dddc:	ef 4b ff e8 	st.w	r7[-24],r11
8000dde0:	ef 4a ff e4 	st.w	r7[-28],r10
8000dde4:	ef 49 ff e0 	st.w	r7[-32],r9
8000dde8:	ef 58 ff dc 	st.h	r7[-36],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_SCALED_PRESSURE_LEN];
	_mav_put_uint32_t(buf, 0, time_boot_ms);
8000ddec:	ee c9 00 18 	sub	r9,r7,24
8000ddf0:	ee c8 00 10 	sub	r8,r7,16
8000ddf4:	12 9b       	mov	r11,r9
8000ddf6:	10 9c       	mov	r12,r8
8000ddf8:	fe b0 fd 0e 	rcall	8000d814 <byte_swap_4>
	_mav_put_float(buf, 4, press_abs);
8000ddfc:	ee c9 00 1c 	sub	r9,r7,28
8000de00:	ee c8 00 10 	sub	r8,r7,16
8000de04:	2f c8       	sub	r8,-4
8000de06:	12 9b       	mov	r11,r9
8000de08:	10 9c       	mov	r12,r8
8000de0a:	fe b0 fd 05 	rcall	8000d814 <byte_swap_4>
	_mav_put_float(buf, 8, press_diff);
8000de0e:	ee c9 00 20 	sub	r9,r7,32
8000de12:	ee c8 00 10 	sub	r8,r7,16
8000de16:	2f 88       	sub	r8,-8
8000de18:	12 9b       	mov	r11,r9
8000de1a:	10 9c       	mov	r12,r8
8000de1c:	fe b0 fc fc 	rcall	8000d814 <byte_swap_4>
	_mav_put_int16_t(buf, 12, temperature);
8000de20:	ee c9 00 24 	sub	r9,r7,36
8000de24:	ee c8 00 10 	sub	r8,r7,16
8000de28:	2f 48       	sub	r8,-12
8000de2a:	12 9b       	mov	r11,r9
8000de2c:	10 9c       	mov	r12,r8
8000de2e:	fe b0 fc d9 	rcall	8000d7e0 <byte_swap_2>

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_SCALED_PRESSURE, buf, MAVLINK_MSG_ID_SCALED_PRESSURE_LEN, MAVLINK_MSG_ID_SCALED_PRESSURE_CRC);
8000de32:	ee ca 00 10 	sub	r10,r7,16
8000de36:	37 38       	mov	r8,115
8000de38:	30 e9       	mov	r9,14
8000de3a:	31 db       	mov	r11,29
8000de3c:	ee fc ff ec 	ld.w	r12,r7[-20]
8000de40:	fe b0 fc 22 	rcall	8000d684 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_SCALED_PRESSURE, (const char *)&packet, MAVLINK_MSG_ID_SCALED_PRESSURE_LEN, MAVLINK_MSG_ID_SCALED_PRESSURE_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_SCALED_PRESSURE, (const char *)&packet, MAVLINK_MSG_ID_SCALED_PRESSURE_LEN);
#endif
#endif
}
8000de44:	2f 7d       	sub	sp,-36
8000de46:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000de4a:	00 00       	add	r0,r0
8000de4c:	80 00       	ld.sh	r0,r0[0x0]
8000de4e:	dc 5a       	popm	r0-r3,r8-r9,pc,r12=-1

8000de50 <mavlink_msg_attitude_send>:
 * @param yawspeed Yaw angular speed (rad/s)
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_attitude_send(mavlink_channel_t chan, uint32_t time_boot_ms, float roll, float pitch, float yaw, float rollspeed, float pitchspeed, float yawspeed)
{
8000de50:	eb cd 40 e0 	pushm	r5-r7,lr
8000de54:	1a 97       	mov	r7,sp
8000de56:	20 cd       	sub	sp,48
8000de58:	4a c6       	lddpc	r6,8000df08 <mavlink_msg_attitude_send+0xb8>
8000de5a:	1e 26       	rsub	r6,pc
8000de5c:	ee c5 ff f0 	sub	r5,r7,-16
8000de60:	ef 4c ff e0 	st.w	r7[-32],r12
8000de64:	ef 4b ff dc 	st.w	r7[-36],r11
8000de68:	ef 4a ff d8 	st.w	r7[-40],r10
8000de6c:	ef 49 ff d4 	st.w	r7[-44],r9
8000de70:	ef 48 ff d0 	st.w	r7[-48],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_ATTITUDE_LEN];
	_mav_put_uint32_t(buf, 0, time_boot_ms);
8000de74:	ee c9 00 24 	sub	r9,r7,36
8000de78:	ee c8 00 1c 	sub	r8,r7,28
8000de7c:	12 9b       	mov	r11,r9
8000de7e:	10 9c       	mov	r12,r8
8000de80:	fe b0 fc ca 	rcall	8000d814 <byte_swap_4>
	_mav_put_float(buf, 4, roll);
8000de84:	ee c9 00 28 	sub	r9,r7,40
8000de88:	ee c8 00 1c 	sub	r8,r7,28
8000de8c:	2f c8       	sub	r8,-4
8000de8e:	12 9b       	mov	r11,r9
8000de90:	10 9c       	mov	r12,r8
8000de92:	fe b0 fc c1 	rcall	8000d814 <byte_swap_4>
	_mav_put_float(buf, 8, pitch);
8000de96:	ee c9 00 2c 	sub	r9,r7,44
8000de9a:	ee c8 00 1c 	sub	r8,r7,28
8000de9e:	2f 88       	sub	r8,-8
8000dea0:	12 9b       	mov	r11,r9
8000dea2:	10 9c       	mov	r12,r8
8000dea4:	fe b0 fc b8 	rcall	8000d814 <byte_swap_4>
	_mav_put_float(buf, 12, yaw);
8000dea8:	ee c9 00 30 	sub	r9,r7,48
8000deac:	ee c8 00 1c 	sub	r8,r7,28
8000deb0:	2f 48       	sub	r8,-12
8000deb2:	12 9b       	mov	r11,r9
8000deb4:	10 9c       	mov	r12,r8
8000deb6:	fe b0 fc af 	rcall	8000d814 <byte_swap_4>
	_mav_put_float(buf, 16, rollspeed);
8000deba:	0a 99       	mov	r9,r5
8000debc:	ee c8 00 1c 	sub	r8,r7,28
8000dec0:	2f 08       	sub	r8,-16
8000dec2:	12 9b       	mov	r11,r9
8000dec4:	10 9c       	mov	r12,r8
8000dec6:	fe b0 fc a7 	rcall	8000d814 <byte_swap_4>
	_mav_put_float(buf, 20, pitchspeed);
8000deca:	ea c9 ff fc 	sub	r9,r5,-4
8000dece:	ee c8 00 1c 	sub	r8,r7,28
8000ded2:	2e c8       	sub	r8,-20
8000ded4:	12 9b       	mov	r11,r9
8000ded6:	10 9c       	mov	r12,r8
8000ded8:	fe b0 fc 9e 	rcall	8000d814 <byte_swap_4>
	_mav_put_float(buf, 24, yawspeed);
8000dedc:	ea c9 ff f8 	sub	r9,r5,-8
8000dee0:	ee c8 00 1c 	sub	r8,r7,28
8000dee4:	2e 88       	sub	r8,-24
8000dee6:	12 9b       	mov	r11,r9
8000dee8:	10 9c       	mov	r12,r8
8000deea:	fe b0 fc 95 	rcall	8000d814 <byte_swap_4>

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_ATTITUDE, buf, MAVLINK_MSG_ID_ATTITUDE_LEN, MAVLINK_MSG_ID_ATTITUDE_CRC);
8000deee:	ee ca 00 1c 	sub	r10,r7,28
8000def2:	32 78       	mov	r8,39
8000def4:	31 c9       	mov	r9,28
8000def6:	31 eb       	mov	r11,30
8000def8:	ee fc ff e0 	ld.w	r12,r7[-32]
8000defc:	fe b0 fb c4 	rcall	8000d684 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_ATTITUDE, (const char *)&packet, MAVLINK_MSG_ID_ATTITUDE_LEN, MAVLINK_MSG_ID_ATTITUDE_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_ATTITUDE, (const char *)&packet, MAVLINK_MSG_ID_ATTITUDE_LEN);
#endif
#endif
}
8000df00:	2f 4d       	sub	sp,-48
8000df02:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000df06:	00 00       	add	r0,r0
8000df08:	80 00       	ld.sh	r0,r0[0x0]
8000df0a:	dc de       	*unknown*

8000df0c <mavlink_msg_attitude_quaternion_send>:
 * @param yawspeed Yaw angular speed (rad/s)
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_attitude_quaternion_send(mavlink_channel_t chan, uint32_t time_boot_ms, float q1, float q2, float q3, float q4, float rollspeed, float pitchspeed, float yawspeed)
{
8000df0c:	eb cd 40 e0 	pushm	r5-r7,lr
8000df10:	1a 97       	mov	r7,sp
8000df12:	20 dd       	sub	sp,52
8000df14:	4b 16       	lddpc	r6,8000dfd8 <mavlink_msg_attitude_quaternion_send+0xcc>
8000df16:	1e 26       	rsub	r6,pc
8000df18:	ee c5 ff f0 	sub	r5,r7,-16
8000df1c:	ef 4c ff dc 	st.w	r7[-36],r12
8000df20:	ef 4b ff d8 	st.w	r7[-40],r11
8000df24:	ef 4a ff d4 	st.w	r7[-44],r10
8000df28:	ef 49 ff d0 	st.w	r7[-48],r9
8000df2c:	ef 48 ff cc 	st.w	r7[-52],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_ATTITUDE_QUATERNION_LEN];
	_mav_put_uint32_t(buf, 0, time_boot_ms);
8000df30:	ee c9 00 28 	sub	r9,r7,40
8000df34:	ee c8 00 20 	sub	r8,r7,32
8000df38:	12 9b       	mov	r11,r9
8000df3a:	10 9c       	mov	r12,r8
8000df3c:	fe b0 fc 6c 	rcall	8000d814 <byte_swap_4>
	_mav_put_float(buf, 4, q1);
8000df40:	ee c9 00 2c 	sub	r9,r7,44
8000df44:	ee c8 00 20 	sub	r8,r7,32
8000df48:	2f c8       	sub	r8,-4
8000df4a:	12 9b       	mov	r11,r9
8000df4c:	10 9c       	mov	r12,r8
8000df4e:	fe b0 fc 63 	rcall	8000d814 <byte_swap_4>
	_mav_put_float(buf, 8, q2);
8000df52:	ee c9 00 30 	sub	r9,r7,48
8000df56:	ee c8 00 20 	sub	r8,r7,32
8000df5a:	2f 88       	sub	r8,-8
8000df5c:	12 9b       	mov	r11,r9
8000df5e:	10 9c       	mov	r12,r8
8000df60:	fe b0 fc 5a 	rcall	8000d814 <byte_swap_4>
	_mav_put_float(buf, 12, q3);
8000df64:	ee c9 00 34 	sub	r9,r7,52
8000df68:	ee c8 00 20 	sub	r8,r7,32
8000df6c:	2f 48       	sub	r8,-12
8000df6e:	12 9b       	mov	r11,r9
8000df70:	10 9c       	mov	r12,r8
8000df72:	fe b0 fc 51 	rcall	8000d814 <byte_swap_4>
	_mav_put_float(buf, 16, q4);
8000df76:	0a 99       	mov	r9,r5
8000df78:	ee c8 00 20 	sub	r8,r7,32
8000df7c:	2f 08       	sub	r8,-16
8000df7e:	12 9b       	mov	r11,r9
8000df80:	10 9c       	mov	r12,r8
8000df82:	fe b0 fc 49 	rcall	8000d814 <byte_swap_4>
	_mav_put_float(buf, 20, rollspeed);
8000df86:	ea c9 ff fc 	sub	r9,r5,-4
8000df8a:	ee c8 00 20 	sub	r8,r7,32
8000df8e:	2e c8       	sub	r8,-20
8000df90:	12 9b       	mov	r11,r9
8000df92:	10 9c       	mov	r12,r8
8000df94:	fe b0 fc 40 	rcall	8000d814 <byte_swap_4>
	_mav_put_float(buf, 24, pitchspeed);
8000df98:	ea c9 ff f8 	sub	r9,r5,-8
8000df9c:	ee c8 00 20 	sub	r8,r7,32
8000dfa0:	2e 88       	sub	r8,-24
8000dfa2:	12 9b       	mov	r11,r9
8000dfa4:	10 9c       	mov	r12,r8
8000dfa6:	fe b0 fc 37 	rcall	8000d814 <byte_swap_4>
	_mav_put_float(buf, 28, yawspeed);
8000dfaa:	ea c9 ff f4 	sub	r9,r5,-12
8000dfae:	ee c8 00 20 	sub	r8,r7,32
8000dfb2:	2e 48       	sub	r8,-28
8000dfb4:	12 9b       	mov	r11,r9
8000dfb6:	10 9c       	mov	r12,r8
8000dfb8:	fe b0 fc 2e 	rcall	8000d814 <byte_swap_4>

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_ATTITUDE_QUATERNION, buf, MAVLINK_MSG_ID_ATTITUDE_QUATERNION_LEN, MAVLINK_MSG_ID_ATTITUDE_QUATERNION_CRC);
8000dfbc:	ee ca 00 20 	sub	r10,r7,32
8000dfc0:	e0 68 00 f6 	mov	r8,246
8000dfc4:	32 09       	mov	r9,32
8000dfc6:	31 fb       	mov	r11,31
8000dfc8:	ee fc ff dc 	ld.w	r12,r7[-36]
8000dfcc:	fe b0 fb 5c 	rcall	8000d684 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_ATTITUDE_QUATERNION, (const char *)&packet, MAVLINK_MSG_ID_ATTITUDE_QUATERNION_LEN, MAVLINK_MSG_ID_ATTITUDE_QUATERNION_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_ATTITUDE_QUATERNION, (const char *)&packet, MAVLINK_MSG_ID_ATTITUDE_QUATERNION_LEN);
#endif
#endif
}
8000dfd0:	2f 3d       	sub	sp,-52
8000dfd2:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000dfd6:	00 00       	add	r0,r0
8000dfd8:	80 00       	ld.sh	r0,r0[0x0]
8000dfda:	dd 9a       	popm	r0-r3,r10-r11,pc,r12=-1

8000dfdc <mavlink_msg_local_position_ned_send>:
 * @param vz Z Speed
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_local_position_ned_send(mavlink_channel_t chan, uint32_t time_boot_ms, float x, float y, float z, float vx, float vy, float vz)
{
8000dfdc:	eb cd 40 e0 	pushm	r5-r7,lr
8000dfe0:	1a 97       	mov	r7,sp
8000dfe2:	20 cd       	sub	sp,48
8000dfe4:	4a c6       	lddpc	r6,8000e094 <mavlink_msg_local_position_ned_send+0xb8>
8000dfe6:	1e 26       	rsub	r6,pc
8000dfe8:	ee c5 ff f0 	sub	r5,r7,-16
8000dfec:	ef 4c ff e0 	st.w	r7[-32],r12
8000dff0:	ef 4b ff dc 	st.w	r7[-36],r11
8000dff4:	ef 4a ff d8 	st.w	r7[-40],r10
8000dff8:	ef 49 ff d4 	st.w	r7[-44],r9
8000dffc:	ef 48 ff d0 	st.w	r7[-48],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_LOCAL_POSITION_NED_LEN];
	_mav_put_uint32_t(buf, 0, time_boot_ms);
8000e000:	ee c9 00 24 	sub	r9,r7,36
8000e004:	ee c8 00 1c 	sub	r8,r7,28
8000e008:	12 9b       	mov	r11,r9
8000e00a:	10 9c       	mov	r12,r8
8000e00c:	fe b0 fc 04 	rcall	8000d814 <byte_swap_4>
	_mav_put_float(buf, 4, x);
8000e010:	ee c9 00 28 	sub	r9,r7,40
8000e014:	ee c8 00 1c 	sub	r8,r7,28
8000e018:	2f c8       	sub	r8,-4
8000e01a:	12 9b       	mov	r11,r9
8000e01c:	10 9c       	mov	r12,r8
8000e01e:	fe b0 fb fb 	rcall	8000d814 <byte_swap_4>
	_mav_put_float(buf, 8, y);
8000e022:	ee c9 00 2c 	sub	r9,r7,44
8000e026:	ee c8 00 1c 	sub	r8,r7,28
8000e02a:	2f 88       	sub	r8,-8
8000e02c:	12 9b       	mov	r11,r9
8000e02e:	10 9c       	mov	r12,r8
8000e030:	fe b0 fb f2 	rcall	8000d814 <byte_swap_4>
	_mav_put_float(buf, 12, z);
8000e034:	ee c9 00 30 	sub	r9,r7,48
8000e038:	ee c8 00 1c 	sub	r8,r7,28
8000e03c:	2f 48       	sub	r8,-12
8000e03e:	12 9b       	mov	r11,r9
8000e040:	10 9c       	mov	r12,r8
8000e042:	fe b0 fb e9 	rcall	8000d814 <byte_swap_4>
	_mav_put_float(buf, 16, vx);
8000e046:	0a 99       	mov	r9,r5
8000e048:	ee c8 00 1c 	sub	r8,r7,28
8000e04c:	2f 08       	sub	r8,-16
8000e04e:	12 9b       	mov	r11,r9
8000e050:	10 9c       	mov	r12,r8
8000e052:	fe b0 fb e1 	rcall	8000d814 <byte_swap_4>
	_mav_put_float(buf, 20, vy);
8000e056:	ea c9 ff fc 	sub	r9,r5,-4
8000e05a:	ee c8 00 1c 	sub	r8,r7,28
8000e05e:	2e c8       	sub	r8,-20
8000e060:	12 9b       	mov	r11,r9
8000e062:	10 9c       	mov	r12,r8
8000e064:	fe b0 fb d8 	rcall	8000d814 <byte_swap_4>
	_mav_put_float(buf, 24, vz);
8000e068:	ea c9 ff f8 	sub	r9,r5,-8
8000e06c:	ee c8 00 1c 	sub	r8,r7,28
8000e070:	2e 88       	sub	r8,-24
8000e072:	12 9b       	mov	r11,r9
8000e074:	10 9c       	mov	r12,r8
8000e076:	fe b0 fb cf 	rcall	8000d814 <byte_swap_4>

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_LOCAL_POSITION_NED, buf, MAVLINK_MSG_ID_LOCAL_POSITION_NED_LEN, MAVLINK_MSG_ID_LOCAL_POSITION_NED_CRC);
8000e07a:	ee ca 00 1c 	sub	r10,r7,28
8000e07e:	e0 68 00 b9 	mov	r8,185
8000e082:	31 c9       	mov	r9,28
8000e084:	32 0b       	mov	r11,32
8000e086:	ee fc ff e0 	ld.w	r12,r7[-32]
8000e08a:	fe b0 fa fd 	rcall	8000d684 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_LOCAL_POSITION_NED, (const char *)&packet, MAVLINK_MSG_ID_LOCAL_POSITION_NED_LEN, MAVLINK_MSG_ID_LOCAL_POSITION_NED_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_LOCAL_POSITION_NED, (const char *)&packet, MAVLINK_MSG_ID_LOCAL_POSITION_NED_LEN);
#endif
#endif
}
8000e08e:	2f 4d       	sub	sp,-48
8000e090:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000e094:	80 00       	ld.sh	r0,r0[0x0]
8000e096:	de 6a       	popm	r4-r9,pc,r12=-1

8000e098 <mavlink_msg_global_position_int_send>:
 * @param hdg Compass heading in degrees * 100, 0.0..359.99 degrees. If unknown, set to: UINT16_MAX
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_global_position_int_send(mavlink_channel_t chan, uint32_t time_boot_ms, int32_t lat, int32_t lon, int32_t alt, int32_t relative_alt, int16_t vx, int16_t vy, int16_t vz, uint16_t hdg)
{
8000e098:	eb cd 40 e0 	pushm	r5-r7,lr
8000e09c:	1a 97       	mov	r7,sp
8000e09e:	21 0d       	sub	sp,64
8000e0a0:	4b b6       	lddpc	r6,8000e18c <mavlink_msg_global_position_int_send+0xf4>
8000e0a2:	1e 26       	rsub	r6,pc
8000e0a4:	ee c5 ff f0 	sub	r5,r7,-16
8000e0a8:	ef 4c ff e0 	st.w	r7[-32],r12
8000e0ac:	ef 4b ff dc 	st.w	r7[-36],r11
8000e0b0:	ef 4a ff d8 	st.w	r7[-40],r10
8000e0b4:	ef 49 ff d4 	st.w	r7[-44],r9
8000e0b8:	ef 48 ff d0 	st.w	r7[-48],r8
8000e0bc:	6a 1b       	ld.w	r11,r5[0x4]
8000e0be:	6a 2a       	ld.w	r10,r5[0x8]
8000e0c0:	6a 39       	ld.w	r9,r5[0xc]
8000e0c2:	6a 48       	ld.w	r8,r5[0x10]
8000e0c4:	ef 5b ff cc 	st.h	r7[-52],r11
8000e0c8:	ef 5a ff c8 	st.h	r7[-56],r10
8000e0cc:	ef 59 ff c4 	st.h	r7[-60],r9
8000e0d0:	ef 58 ff c0 	st.h	r7[-64],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_GLOBAL_POSITION_INT_LEN];
	_mav_put_uint32_t(buf, 0, time_boot_ms);
8000e0d4:	ee c9 00 24 	sub	r9,r7,36
8000e0d8:	ee c8 00 1c 	sub	r8,r7,28
8000e0dc:	12 9b       	mov	r11,r9
8000e0de:	10 9c       	mov	r12,r8
8000e0e0:	fe b0 fb 9a 	rcall	8000d814 <byte_swap_4>
	_mav_put_int32_t(buf, 4, lat);
8000e0e4:	ee c9 00 28 	sub	r9,r7,40
8000e0e8:	ee c8 00 1c 	sub	r8,r7,28
8000e0ec:	2f c8       	sub	r8,-4
8000e0ee:	12 9b       	mov	r11,r9
8000e0f0:	10 9c       	mov	r12,r8
8000e0f2:	fe b0 fb 91 	rcall	8000d814 <byte_swap_4>
	_mav_put_int32_t(buf, 8, lon);
8000e0f6:	ee c9 00 2c 	sub	r9,r7,44
8000e0fa:	ee c8 00 1c 	sub	r8,r7,28
8000e0fe:	2f 88       	sub	r8,-8
8000e100:	12 9b       	mov	r11,r9
8000e102:	10 9c       	mov	r12,r8
8000e104:	fe b0 fb 88 	rcall	8000d814 <byte_swap_4>
	_mav_put_int32_t(buf, 12, alt);
8000e108:	ee c9 00 30 	sub	r9,r7,48
8000e10c:	ee c8 00 1c 	sub	r8,r7,28
8000e110:	2f 48       	sub	r8,-12
8000e112:	12 9b       	mov	r11,r9
8000e114:	10 9c       	mov	r12,r8
8000e116:	fe b0 fb 7f 	rcall	8000d814 <byte_swap_4>
	_mav_put_int32_t(buf, 16, relative_alt);
8000e11a:	0a 99       	mov	r9,r5
8000e11c:	ee c8 00 1c 	sub	r8,r7,28
8000e120:	2f 08       	sub	r8,-16
8000e122:	12 9b       	mov	r11,r9
8000e124:	10 9c       	mov	r12,r8
8000e126:	fe b0 fb 77 	rcall	8000d814 <byte_swap_4>
	_mav_put_int16_t(buf, 20, vx);
8000e12a:	ee c9 00 34 	sub	r9,r7,52
8000e12e:	ee c8 00 1c 	sub	r8,r7,28
8000e132:	2e c8       	sub	r8,-20
8000e134:	12 9b       	mov	r11,r9
8000e136:	10 9c       	mov	r12,r8
8000e138:	fe b0 fb 54 	rcall	8000d7e0 <byte_swap_2>
	_mav_put_int16_t(buf, 22, vy);
8000e13c:	ee c9 00 38 	sub	r9,r7,56
8000e140:	ee c8 00 1c 	sub	r8,r7,28
8000e144:	2e a8       	sub	r8,-22
8000e146:	12 9b       	mov	r11,r9
8000e148:	10 9c       	mov	r12,r8
8000e14a:	fe b0 fb 4b 	rcall	8000d7e0 <byte_swap_2>
	_mav_put_int16_t(buf, 24, vz);
8000e14e:	ee c9 00 3c 	sub	r9,r7,60
8000e152:	ee c8 00 1c 	sub	r8,r7,28
8000e156:	2e 88       	sub	r8,-24
8000e158:	12 9b       	mov	r11,r9
8000e15a:	10 9c       	mov	r12,r8
8000e15c:	fe b0 fb 42 	rcall	8000d7e0 <byte_swap_2>
	_mav_put_uint16_t(buf, 26, hdg);
8000e160:	ee c9 00 40 	sub	r9,r7,64
8000e164:	ee c8 00 1c 	sub	r8,r7,28
8000e168:	2e 68       	sub	r8,-26
8000e16a:	12 9b       	mov	r11,r9
8000e16c:	10 9c       	mov	r12,r8
8000e16e:	fe b0 fb 39 	rcall	8000d7e0 <byte_swap_2>

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_GLOBAL_POSITION_INT, buf, MAVLINK_MSG_ID_GLOBAL_POSITION_INT_LEN, MAVLINK_MSG_ID_GLOBAL_POSITION_INT_CRC);
8000e172:	ee ca 00 1c 	sub	r10,r7,28
8000e176:	36 88       	mov	r8,104
8000e178:	31 c9       	mov	r9,28
8000e17a:	32 1b       	mov	r11,33
8000e17c:	ee fc ff e0 	ld.w	r12,r7[-32]
8000e180:	fe b0 fa 82 	rcall	8000d684 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_GLOBAL_POSITION_INT, (const char *)&packet, MAVLINK_MSG_ID_GLOBAL_POSITION_INT_LEN, MAVLINK_MSG_ID_GLOBAL_POSITION_INT_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_GLOBAL_POSITION_INT, (const char *)&packet, MAVLINK_MSG_ID_GLOBAL_POSITION_INT_LEN);
#endif
#endif
}
8000e184:	2f 0d       	sub	sp,-64
8000e186:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000e18a:	00 00       	add	r0,r0
8000e18c:	80 00       	ld.sh	r0,r0[0x0]
8000e18e:	df 26       	*unknown*

8000e190 <mavlink_msg_rc_channels_scaled_send>:
 * @param rssi Receive signal strength indicator, 0: 0%, 100: 100%, 255: invalid/unknown.
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_rc_channels_scaled_send(mavlink_channel_t chan, uint32_t time_boot_ms, uint8_t port, int16_t chan1_scaled, int16_t chan2_scaled, int16_t chan3_scaled, int16_t chan4_scaled, int16_t chan5_scaled, int16_t chan6_scaled, int16_t chan7_scaled, int16_t chan8_scaled, uint8_t rssi)
{
8000e190:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
8000e194:	1a 97       	mov	r7,sp
8000e196:	21 2d       	sub	sp,72
8000e198:	4c 86       	lddpc	r6,8000e2b8 <mavlink_msg_rc_channels_scaled_send+0x128>
8000e19a:	1e 26       	rsub	r6,pc
8000e19c:	ee ce ff e0 	sub	lr,r7,-32
8000e1a0:	ef 4c ff e4 	st.w	r7[-28],r12
8000e1a4:	ef 4b ff e0 	st.w	r7[-32],r11
8000e1a8:	14 90       	mov	r0,r10
8000e1aa:	12 91       	mov	r1,r9
8000e1ac:	10 92       	mov	r2,r8
8000e1ae:	7c 03       	ld.w	r3,lr[0x0]
8000e1b0:	7c 15       	ld.w	r5,lr[0x4]
8000e1b2:	7c 2c       	ld.w	r12,lr[0x8]
8000e1b4:	7c 3b       	ld.w	r11,lr[0xc]
8000e1b6:	7c 4a       	ld.w	r10,lr[0x10]
8000e1b8:	7c 59       	ld.w	r9,lr[0x14]
8000e1ba:	7c 68       	ld.w	r8,lr[0x18]
8000e1bc:	00 9e       	mov	lr,r0
8000e1be:	ef 6e ff dc 	st.b	r7[-36],lr
8000e1c2:	02 9e       	mov	lr,r1
8000e1c4:	ef 5e ff d8 	st.h	r7[-40],lr
8000e1c8:	04 9e       	mov	lr,r2
8000e1ca:	ef 5e ff d4 	st.h	r7[-44],lr
8000e1ce:	06 9e       	mov	lr,r3
8000e1d0:	ef 5e ff d0 	st.h	r7[-48],lr
8000e1d4:	0a 9e       	mov	lr,r5
8000e1d6:	ef 5e ff cc 	st.h	r7[-52],lr
8000e1da:	ef 5c ff c8 	st.h	r7[-56],r12
8000e1de:	ef 5b ff c4 	st.h	r7[-60],r11
8000e1e2:	ef 5a ff c0 	st.h	r7[-64],r10
8000e1e6:	ef 59 ff bc 	st.h	r7[-68],r9
8000e1ea:	ef 68 ff b8 	st.b	r7[-72],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_RC_CHANNELS_SCALED_LEN];
	_mav_put_uint32_t(buf, 0, time_boot_ms);
8000e1ee:	ee c9 00 20 	sub	r9,r7,32
8000e1f2:	ee c8 00 18 	sub	r8,r7,24
8000e1f6:	12 9b       	mov	r11,r9
8000e1f8:	10 9c       	mov	r12,r8
8000e1fa:	fe b0 fb 0d 	rcall	8000d814 <byte_swap_4>
	_mav_put_int16_t(buf, 4, chan1_scaled);
8000e1fe:	ee c9 00 28 	sub	r9,r7,40
8000e202:	ee c8 00 18 	sub	r8,r7,24
8000e206:	2f c8       	sub	r8,-4
8000e208:	12 9b       	mov	r11,r9
8000e20a:	10 9c       	mov	r12,r8
8000e20c:	fe b0 fa ea 	rcall	8000d7e0 <byte_swap_2>
	_mav_put_int16_t(buf, 6, chan2_scaled);
8000e210:	ee c9 00 2c 	sub	r9,r7,44
8000e214:	ee c8 00 18 	sub	r8,r7,24
8000e218:	2f a8       	sub	r8,-6
8000e21a:	12 9b       	mov	r11,r9
8000e21c:	10 9c       	mov	r12,r8
8000e21e:	fe b0 fa e1 	rcall	8000d7e0 <byte_swap_2>
	_mav_put_int16_t(buf, 8, chan3_scaled);
8000e222:	ee c9 00 30 	sub	r9,r7,48
8000e226:	ee c8 00 18 	sub	r8,r7,24
8000e22a:	2f 88       	sub	r8,-8
8000e22c:	12 9b       	mov	r11,r9
8000e22e:	10 9c       	mov	r12,r8
8000e230:	fe b0 fa d8 	rcall	8000d7e0 <byte_swap_2>
	_mav_put_int16_t(buf, 10, chan4_scaled);
8000e234:	ee c9 00 34 	sub	r9,r7,52
8000e238:	ee c8 00 18 	sub	r8,r7,24
8000e23c:	2f 68       	sub	r8,-10
8000e23e:	12 9b       	mov	r11,r9
8000e240:	10 9c       	mov	r12,r8
8000e242:	fe b0 fa cf 	rcall	8000d7e0 <byte_swap_2>
	_mav_put_int16_t(buf, 12, chan5_scaled);
8000e246:	ee c9 00 38 	sub	r9,r7,56
8000e24a:	ee c8 00 18 	sub	r8,r7,24
8000e24e:	2f 48       	sub	r8,-12
8000e250:	12 9b       	mov	r11,r9
8000e252:	10 9c       	mov	r12,r8
8000e254:	fe b0 fa c6 	rcall	8000d7e0 <byte_swap_2>
	_mav_put_int16_t(buf, 14, chan6_scaled);
8000e258:	ee c9 00 3c 	sub	r9,r7,60
8000e25c:	ee c8 00 18 	sub	r8,r7,24
8000e260:	2f 28       	sub	r8,-14
8000e262:	12 9b       	mov	r11,r9
8000e264:	10 9c       	mov	r12,r8
8000e266:	fe b0 fa bd 	rcall	8000d7e0 <byte_swap_2>
	_mav_put_int16_t(buf, 16, chan7_scaled);
8000e26a:	ee c9 00 40 	sub	r9,r7,64
8000e26e:	ee c8 00 18 	sub	r8,r7,24
8000e272:	2f 08       	sub	r8,-16
8000e274:	12 9b       	mov	r11,r9
8000e276:	10 9c       	mov	r12,r8
8000e278:	fe b0 fa b4 	rcall	8000d7e0 <byte_swap_2>
	_mav_put_int16_t(buf, 18, chan8_scaled);
8000e27c:	ee c9 00 44 	sub	r9,r7,68
8000e280:	ee c8 00 18 	sub	r8,r7,24
8000e284:	2e e8       	sub	r8,-18
8000e286:	12 9b       	mov	r11,r9
8000e288:	10 9c       	mov	r12,r8
8000e28a:	fe b0 fa ab 	rcall	8000d7e0 <byte_swap_2>
	_mav_put_uint8_t(buf, 20, port);
8000e28e:	ef 38 ff dc 	ld.ub	r8,r7[-36]
8000e292:	ef 68 ff fc 	st.b	r7[-4],r8
	_mav_put_uint8_t(buf, 21, rssi);
8000e296:	ef 38 ff b8 	ld.ub	r8,r7[-72]
8000e29a:	ef 68 ff fd 	st.b	r7[-3],r8

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_RC_CHANNELS_SCALED, buf, MAVLINK_MSG_ID_RC_CHANNELS_SCALED_LEN, MAVLINK_MSG_ID_RC_CHANNELS_SCALED_CRC);
8000e29e:	ee ca 00 18 	sub	r10,r7,24
8000e2a2:	e0 68 00 ed 	mov	r8,237
8000e2a6:	31 69       	mov	r9,22
8000e2a8:	32 2b       	mov	r11,34
8000e2aa:	ee fc ff e4 	ld.w	r12,r7[-28]
8000e2ae:	fe b0 f9 eb 	rcall	8000d684 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_RC_CHANNELS_SCALED, (const char *)&packet, MAVLINK_MSG_ID_RC_CHANNELS_SCALED_LEN, MAVLINK_MSG_ID_RC_CHANNELS_SCALED_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_RC_CHANNELS_SCALED, (const char *)&packet, MAVLINK_MSG_ID_RC_CHANNELS_SCALED_LEN);
#endif
#endif
}
8000e2b2:	2e ed       	sub	sp,-72
8000e2b4:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
8000e2b8:	80 00       	ld.sh	r0,r0[0x0]
8000e2ba:	e0 1e eb cd 	andl	lr,0xebcd

8000e2bc <mavlink_msg_rc_channels_raw_send>:
 * @param rssi Receive signal strength indicator, 0: 0%, 100: 100%, 255: invalid/unknown.
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_rc_channels_raw_send(mavlink_channel_t chan, uint32_t time_boot_ms, uint8_t port, uint16_t chan1_raw, uint16_t chan2_raw, uint16_t chan3_raw, uint16_t chan4_raw, uint16_t chan5_raw, uint16_t chan6_raw, uint16_t chan7_raw, uint16_t chan8_raw, uint8_t rssi)
{
8000e2bc:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
8000e2c0:	1a 97       	mov	r7,sp
8000e2c2:	21 2d       	sub	sp,72
8000e2c4:	4c 86       	lddpc	r6,8000e3e4 <mavlink_msg_rc_channels_raw_send+0x128>
8000e2c6:	1e 26       	rsub	r6,pc
8000e2c8:	ee ce ff e0 	sub	lr,r7,-32
8000e2cc:	ef 4c ff e4 	st.w	r7[-28],r12
8000e2d0:	ef 4b ff e0 	st.w	r7[-32],r11
8000e2d4:	14 90       	mov	r0,r10
8000e2d6:	12 91       	mov	r1,r9
8000e2d8:	10 92       	mov	r2,r8
8000e2da:	7c 03       	ld.w	r3,lr[0x0]
8000e2dc:	7c 15       	ld.w	r5,lr[0x4]
8000e2de:	7c 2c       	ld.w	r12,lr[0x8]
8000e2e0:	7c 3b       	ld.w	r11,lr[0xc]
8000e2e2:	7c 4a       	ld.w	r10,lr[0x10]
8000e2e4:	7c 59       	ld.w	r9,lr[0x14]
8000e2e6:	7c 68       	ld.w	r8,lr[0x18]
8000e2e8:	00 9e       	mov	lr,r0
8000e2ea:	ef 6e ff dc 	st.b	r7[-36],lr
8000e2ee:	02 9e       	mov	lr,r1
8000e2f0:	ef 5e ff d8 	st.h	r7[-40],lr
8000e2f4:	04 9e       	mov	lr,r2
8000e2f6:	ef 5e ff d4 	st.h	r7[-44],lr
8000e2fa:	06 9e       	mov	lr,r3
8000e2fc:	ef 5e ff d0 	st.h	r7[-48],lr
8000e300:	0a 9e       	mov	lr,r5
8000e302:	ef 5e ff cc 	st.h	r7[-52],lr
8000e306:	ef 5c ff c8 	st.h	r7[-56],r12
8000e30a:	ef 5b ff c4 	st.h	r7[-60],r11
8000e30e:	ef 5a ff c0 	st.h	r7[-64],r10
8000e312:	ef 59 ff bc 	st.h	r7[-68],r9
8000e316:	ef 68 ff b8 	st.b	r7[-72],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_RC_CHANNELS_RAW_LEN];
	_mav_put_uint32_t(buf, 0, time_boot_ms);
8000e31a:	ee c9 00 20 	sub	r9,r7,32
8000e31e:	ee c8 00 18 	sub	r8,r7,24
8000e322:	12 9b       	mov	r11,r9
8000e324:	10 9c       	mov	r12,r8
8000e326:	fe b0 fa 77 	rcall	8000d814 <byte_swap_4>
	_mav_put_uint16_t(buf, 4, chan1_raw);
8000e32a:	ee c9 00 28 	sub	r9,r7,40
8000e32e:	ee c8 00 18 	sub	r8,r7,24
8000e332:	2f c8       	sub	r8,-4
8000e334:	12 9b       	mov	r11,r9
8000e336:	10 9c       	mov	r12,r8
8000e338:	fe b0 fa 54 	rcall	8000d7e0 <byte_swap_2>
	_mav_put_uint16_t(buf, 6, chan2_raw);
8000e33c:	ee c9 00 2c 	sub	r9,r7,44
8000e340:	ee c8 00 18 	sub	r8,r7,24
8000e344:	2f a8       	sub	r8,-6
8000e346:	12 9b       	mov	r11,r9
8000e348:	10 9c       	mov	r12,r8
8000e34a:	fe b0 fa 4b 	rcall	8000d7e0 <byte_swap_2>
	_mav_put_uint16_t(buf, 8, chan3_raw);
8000e34e:	ee c9 00 30 	sub	r9,r7,48
8000e352:	ee c8 00 18 	sub	r8,r7,24
8000e356:	2f 88       	sub	r8,-8
8000e358:	12 9b       	mov	r11,r9
8000e35a:	10 9c       	mov	r12,r8
8000e35c:	fe b0 fa 42 	rcall	8000d7e0 <byte_swap_2>
	_mav_put_uint16_t(buf, 10, chan4_raw);
8000e360:	ee c9 00 34 	sub	r9,r7,52
8000e364:	ee c8 00 18 	sub	r8,r7,24
8000e368:	2f 68       	sub	r8,-10
8000e36a:	12 9b       	mov	r11,r9
8000e36c:	10 9c       	mov	r12,r8
8000e36e:	fe b0 fa 39 	rcall	8000d7e0 <byte_swap_2>
	_mav_put_uint16_t(buf, 12, chan5_raw);
8000e372:	ee c9 00 38 	sub	r9,r7,56
8000e376:	ee c8 00 18 	sub	r8,r7,24
8000e37a:	2f 48       	sub	r8,-12
8000e37c:	12 9b       	mov	r11,r9
8000e37e:	10 9c       	mov	r12,r8
8000e380:	fe b0 fa 30 	rcall	8000d7e0 <byte_swap_2>
	_mav_put_uint16_t(buf, 14, chan6_raw);
8000e384:	ee c9 00 3c 	sub	r9,r7,60
8000e388:	ee c8 00 18 	sub	r8,r7,24
8000e38c:	2f 28       	sub	r8,-14
8000e38e:	12 9b       	mov	r11,r9
8000e390:	10 9c       	mov	r12,r8
8000e392:	fe b0 fa 27 	rcall	8000d7e0 <byte_swap_2>
	_mav_put_uint16_t(buf, 16, chan7_raw);
8000e396:	ee c9 00 40 	sub	r9,r7,64
8000e39a:	ee c8 00 18 	sub	r8,r7,24
8000e39e:	2f 08       	sub	r8,-16
8000e3a0:	12 9b       	mov	r11,r9
8000e3a2:	10 9c       	mov	r12,r8
8000e3a4:	fe b0 fa 1e 	rcall	8000d7e0 <byte_swap_2>
	_mav_put_uint16_t(buf, 18, chan8_raw);
8000e3a8:	ee c9 00 44 	sub	r9,r7,68
8000e3ac:	ee c8 00 18 	sub	r8,r7,24
8000e3b0:	2e e8       	sub	r8,-18
8000e3b2:	12 9b       	mov	r11,r9
8000e3b4:	10 9c       	mov	r12,r8
8000e3b6:	fe b0 fa 15 	rcall	8000d7e0 <byte_swap_2>
	_mav_put_uint8_t(buf, 20, port);
8000e3ba:	ef 38 ff dc 	ld.ub	r8,r7[-36]
8000e3be:	ef 68 ff fc 	st.b	r7[-4],r8
	_mav_put_uint8_t(buf, 21, rssi);
8000e3c2:	ef 38 ff b8 	ld.ub	r8,r7[-72]
8000e3c6:	ef 68 ff fd 	st.b	r7[-3],r8

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_RC_CHANNELS_RAW, buf, MAVLINK_MSG_ID_RC_CHANNELS_RAW_LEN, MAVLINK_MSG_ID_RC_CHANNELS_RAW_CRC);
8000e3ca:	ee ca 00 18 	sub	r10,r7,24
8000e3ce:	e0 68 00 f4 	mov	r8,244
8000e3d2:	31 69       	mov	r9,22
8000e3d4:	32 3b       	mov	r11,35
8000e3d6:	ee fc ff e4 	ld.w	r12,r7[-28]
8000e3da:	fe b0 f9 55 	rcall	8000d684 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_RC_CHANNELS_RAW, (const char *)&packet, MAVLINK_MSG_ID_RC_CHANNELS_RAW_LEN, MAVLINK_MSG_ID_RC_CHANNELS_RAW_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_RC_CHANNELS_RAW, (const char *)&packet, MAVLINK_MSG_ID_RC_CHANNELS_RAW_LEN);
#endif
#endif
}
8000e3de:	2e ed       	sub	sp,-72
8000e3e0:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
8000e3e4:	80 00       	ld.sh	r0,r0[0x0]
8000e3e6:	e1 4a eb cd 	st.w	r0[-5171],r10

8000e3e8 <mavlink_msg_servo_output_raw_send>:
 * @param servo8_raw Servo output 8 value, in microseconds
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_servo_output_raw_send(mavlink_channel_t chan, uint32_t time_usec, uint8_t port, uint16_t servo1_raw, uint16_t servo2_raw, uint16_t servo3_raw, uint16_t servo4_raw, uint16_t servo5_raw, uint16_t servo6_raw, uint16_t servo7_raw, uint16_t servo8_raw)
{
8000e3e8:	eb cd 40 ee 	pushm	r1-r3,r5-r7,lr
8000e3ec:	1a 97       	mov	r7,sp
8000e3ee:	21 1d       	sub	sp,68
8000e3f0:	4c 46       	lddpc	r6,8000e500 <mavlink_msg_servo_output_raw_send+0x118>
8000e3f2:	1e 26       	rsub	r6,pc
8000e3f4:	ee ce ff e4 	sub	lr,r7,-28
8000e3f8:	ef 4c ff e4 	st.w	r7[-28],r12
8000e3fc:	ef 4b ff e0 	st.w	r7[-32],r11
8000e400:	14 91       	mov	r1,r10
8000e402:	12 92       	mov	r2,r9
8000e404:	10 93       	mov	r3,r8
8000e406:	7c 05       	ld.w	r5,lr[0x0]
8000e408:	7c 1c       	ld.w	r12,lr[0x4]
8000e40a:	7c 2b       	ld.w	r11,lr[0x8]
8000e40c:	7c 3a       	ld.w	r10,lr[0xc]
8000e40e:	7c 49       	ld.w	r9,lr[0x10]
8000e410:	7c 58       	ld.w	r8,lr[0x14]
8000e412:	02 9e       	mov	lr,r1
8000e414:	ef 6e ff dc 	st.b	r7[-36],lr
8000e418:	04 9e       	mov	lr,r2
8000e41a:	ef 5e ff d8 	st.h	r7[-40],lr
8000e41e:	06 9e       	mov	lr,r3
8000e420:	ef 5e ff d4 	st.h	r7[-44],lr
8000e424:	0a 9e       	mov	lr,r5
8000e426:	ef 5e ff d0 	st.h	r7[-48],lr
8000e42a:	ef 5c ff cc 	st.h	r7[-52],r12
8000e42e:	ef 5b ff c8 	st.h	r7[-56],r11
8000e432:	ef 5a ff c4 	st.h	r7[-60],r10
8000e436:	ef 59 ff c0 	st.h	r7[-64],r9
8000e43a:	ef 58 ff bc 	st.h	r7[-68],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_SERVO_OUTPUT_RAW_LEN];
	_mav_put_uint32_t(buf, 0, time_usec);
8000e43e:	ee c9 00 20 	sub	r9,r7,32
8000e442:	ee c8 00 18 	sub	r8,r7,24
8000e446:	12 9b       	mov	r11,r9
8000e448:	10 9c       	mov	r12,r8
8000e44a:	fe b0 f9 e5 	rcall	8000d814 <byte_swap_4>
	_mav_put_uint16_t(buf, 4, servo1_raw);
8000e44e:	ee c9 00 28 	sub	r9,r7,40
8000e452:	ee c8 00 18 	sub	r8,r7,24
8000e456:	2f c8       	sub	r8,-4
8000e458:	12 9b       	mov	r11,r9
8000e45a:	10 9c       	mov	r12,r8
8000e45c:	fe b0 f9 c2 	rcall	8000d7e0 <byte_swap_2>
	_mav_put_uint16_t(buf, 6, servo2_raw);
8000e460:	ee c9 00 2c 	sub	r9,r7,44
8000e464:	ee c8 00 18 	sub	r8,r7,24
8000e468:	2f a8       	sub	r8,-6
8000e46a:	12 9b       	mov	r11,r9
8000e46c:	10 9c       	mov	r12,r8
8000e46e:	fe b0 f9 b9 	rcall	8000d7e0 <byte_swap_2>
	_mav_put_uint16_t(buf, 8, servo3_raw);
8000e472:	ee c9 00 30 	sub	r9,r7,48
8000e476:	ee c8 00 18 	sub	r8,r7,24
8000e47a:	2f 88       	sub	r8,-8
8000e47c:	12 9b       	mov	r11,r9
8000e47e:	10 9c       	mov	r12,r8
8000e480:	fe b0 f9 b0 	rcall	8000d7e0 <byte_swap_2>
	_mav_put_uint16_t(buf, 10, servo4_raw);
8000e484:	ee c9 00 34 	sub	r9,r7,52
8000e488:	ee c8 00 18 	sub	r8,r7,24
8000e48c:	2f 68       	sub	r8,-10
8000e48e:	12 9b       	mov	r11,r9
8000e490:	10 9c       	mov	r12,r8
8000e492:	fe b0 f9 a7 	rcall	8000d7e0 <byte_swap_2>
	_mav_put_uint16_t(buf, 12, servo5_raw);
8000e496:	ee c9 00 38 	sub	r9,r7,56
8000e49a:	ee c8 00 18 	sub	r8,r7,24
8000e49e:	2f 48       	sub	r8,-12
8000e4a0:	12 9b       	mov	r11,r9
8000e4a2:	10 9c       	mov	r12,r8
8000e4a4:	fe b0 f9 9e 	rcall	8000d7e0 <byte_swap_2>
	_mav_put_uint16_t(buf, 14, servo6_raw);
8000e4a8:	ee c9 00 3c 	sub	r9,r7,60
8000e4ac:	ee c8 00 18 	sub	r8,r7,24
8000e4b0:	2f 28       	sub	r8,-14
8000e4b2:	12 9b       	mov	r11,r9
8000e4b4:	10 9c       	mov	r12,r8
8000e4b6:	fe b0 f9 95 	rcall	8000d7e0 <byte_swap_2>
	_mav_put_uint16_t(buf, 16, servo7_raw);
8000e4ba:	ee c9 00 40 	sub	r9,r7,64
8000e4be:	ee c8 00 18 	sub	r8,r7,24
8000e4c2:	2f 08       	sub	r8,-16
8000e4c4:	12 9b       	mov	r11,r9
8000e4c6:	10 9c       	mov	r12,r8
8000e4c8:	fe b0 f9 8c 	rcall	8000d7e0 <byte_swap_2>
	_mav_put_uint16_t(buf, 18, servo8_raw);
8000e4cc:	ee c9 00 44 	sub	r9,r7,68
8000e4d0:	ee c8 00 18 	sub	r8,r7,24
8000e4d4:	2e e8       	sub	r8,-18
8000e4d6:	12 9b       	mov	r11,r9
8000e4d8:	10 9c       	mov	r12,r8
8000e4da:	fe b0 f9 83 	rcall	8000d7e0 <byte_swap_2>
	_mav_put_uint8_t(buf, 20, port);
8000e4de:	ef 38 ff dc 	ld.ub	r8,r7[-36]
8000e4e2:	ef 68 ff fc 	st.b	r7[-4],r8

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_SERVO_OUTPUT_RAW, buf, MAVLINK_MSG_ID_SERVO_OUTPUT_RAW_LEN, MAVLINK_MSG_ID_SERVO_OUTPUT_RAW_CRC);
8000e4e6:	ee ca 00 18 	sub	r10,r7,24
8000e4ea:	e0 68 00 de 	mov	r8,222
8000e4ee:	31 59       	mov	r9,21
8000e4f0:	32 4b       	mov	r11,36
8000e4f2:	ee fc ff e4 	ld.w	r12,r7[-28]
8000e4f6:	fe b0 f8 c7 	rcall	8000d684 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_SERVO_OUTPUT_RAW, (const char *)&packet, MAVLINK_MSG_ID_SERVO_OUTPUT_RAW_LEN, MAVLINK_MSG_ID_SERVO_OUTPUT_RAW_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_SERVO_OUTPUT_RAW, (const char *)&packet, MAVLINK_MSG_ID_SERVO_OUTPUT_RAW_LEN);
#endif
#endif
}
8000e4fa:	2e fd       	sub	sp,-68
8000e4fc:	e3 cd 80 ee 	ldm	sp++,r1-r3,r5-r7,pc
8000e500:	80 00       	ld.sh	r0,r0[0x0]
8000e502:	e2 76 eb cd 	mov	r6,256973

8000e504 <mavlink_msg_roll_pitch_yaw_thrust_setpoint_send>:
 * @param thrust Collective thrust, normalized to 0 .. 1
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_roll_pitch_yaw_thrust_setpoint_send(mavlink_channel_t chan, uint32_t time_boot_ms, float roll, float pitch, float yaw, float thrust)
{
8000e504:	eb cd 40 e0 	pushm	r5-r7,lr
8000e508:	1a 97       	mov	r7,sp
8000e50a:	20 ad       	sub	sp,40
8000e50c:	4a 36       	lddpc	r6,8000e598 <mavlink_msg_roll_pitch_yaw_thrust_setpoint_send+0x94>
8000e50e:	1e 26       	rsub	r6,pc
8000e510:	ee c5 ff f0 	sub	r5,r7,-16
8000e514:	ef 4c ff e8 	st.w	r7[-24],r12
8000e518:	ef 4b ff e4 	st.w	r7[-28],r11
8000e51c:	ef 4a ff e0 	st.w	r7[-32],r10
8000e520:	ef 49 ff dc 	st.w	r7[-36],r9
8000e524:	ef 48 ff d8 	st.w	r7[-40],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_ROLL_PITCH_YAW_THRUST_SETPOINT_LEN];
	_mav_put_uint32_t(buf, 0, time_boot_ms);
8000e528:	ee c9 00 1c 	sub	r9,r7,28
8000e52c:	ee c8 00 14 	sub	r8,r7,20
8000e530:	12 9b       	mov	r11,r9
8000e532:	10 9c       	mov	r12,r8
8000e534:	fe b0 f9 70 	rcall	8000d814 <byte_swap_4>
	_mav_put_float(buf, 4, roll);
8000e538:	ee c9 00 20 	sub	r9,r7,32
8000e53c:	ee c8 00 14 	sub	r8,r7,20
8000e540:	2f c8       	sub	r8,-4
8000e542:	12 9b       	mov	r11,r9
8000e544:	10 9c       	mov	r12,r8
8000e546:	fe b0 f9 67 	rcall	8000d814 <byte_swap_4>
	_mav_put_float(buf, 8, pitch);
8000e54a:	ee c9 00 24 	sub	r9,r7,36
8000e54e:	ee c8 00 14 	sub	r8,r7,20
8000e552:	2f 88       	sub	r8,-8
8000e554:	12 9b       	mov	r11,r9
8000e556:	10 9c       	mov	r12,r8
8000e558:	fe b0 f9 5e 	rcall	8000d814 <byte_swap_4>
	_mav_put_float(buf, 12, yaw);
8000e55c:	ee c9 00 28 	sub	r9,r7,40
8000e560:	ee c8 00 14 	sub	r8,r7,20
8000e564:	2f 48       	sub	r8,-12
8000e566:	12 9b       	mov	r11,r9
8000e568:	10 9c       	mov	r12,r8
8000e56a:	fe b0 f9 55 	rcall	8000d814 <byte_swap_4>
	_mav_put_float(buf, 16, thrust);
8000e56e:	0a 99       	mov	r9,r5
8000e570:	ee c8 00 14 	sub	r8,r7,20
8000e574:	2f 08       	sub	r8,-16
8000e576:	12 9b       	mov	r11,r9
8000e578:	10 9c       	mov	r12,r8
8000e57a:	fe b0 f9 4d 	rcall	8000d814 <byte_swap_4>

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_ROLL_PITCH_YAW_THRUST_SETPOINT, buf, MAVLINK_MSG_ID_ROLL_PITCH_YAW_THRUST_SETPOINT_LEN, MAVLINK_MSG_ID_ROLL_PITCH_YAW_THRUST_SETPOINT_CRC);
8000e57e:	ee ca 00 14 	sub	r10,r7,20
8000e582:	e0 68 00 ef 	mov	r8,239
8000e586:	31 49       	mov	r9,20
8000e588:	33 ab       	mov	r11,58
8000e58a:	ee fc ff e8 	ld.w	r12,r7[-24]
8000e58e:	fe b0 f8 7b 	rcall	8000d684 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_ROLL_PITCH_YAW_THRUST_SETPOINT, (const char *)&packet, MAVLINK_MSG_ID_ROLL_PITCH_YAW_THRUST_SETPOINT_LEN, MAVLINK_MSG_ID_ROLL_PITCH_YAW_THRUST_SETPOINT_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_ROLL_PITCH_YAW_THRUST_SETPOINT, (const char *)&packet, MAVLINK_MSG_ID_ROLL_PITCH_YAW_THRUST_SETPOINT_LEN);
#endif
#endif
}
8000e592:	2f 6d       	sub	sp,-40
8000e594:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000e598:	80 00       	ld.sh	r0,r0[0x0]
8000e59a:	e3 92       	*unknown*

8000e59c <mavlink_msg_roll_pitch_yaw_speed_thrust_setpoint_send>:
 * @param thrust Collective thrust, normalized to 0 .. 1
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_roll_pitch_yaw_speed_thrust_setpoint_send(mavlink_channel_t chan, uint32_t time_boot_ms, float roll_speed, float pitch_speed, float yaw_speed, float thrust)
{
8000e59c:	eb cd 40 e0 	pushm	r5-r7,lr
8000e5a0:	1a 97       	mov	r7,sp
8000e5a2:	20 ad       	sub	sp,40
8000e5a4:	4a 36       	lddpc	r6,8000e630 <mavlink_msg_roll_pitch_yaw_speed_thrust_setpoint_send+0x94>
8000e5a6:	1e 26       	rsub	r6,pc
8000e5a8:	ee c5 ff f0 	sub	r5,r7,-16
8000e5ac:	ef 4c ff e8 	st.w	r7[-24],r12
8000e5b0:	ef 4b ff e4 	st.w	r7[-28],r11
8000e5b4:	ef 4a ff e0 	st.w	r7[-32],r10
8000e5b8:	ef 49 ff dc 	st.w	r7[-36],r9
8000e5bc:	ef 48 ff d8 	st.w	r7[-40],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_ROLL_PITCH_YAW_SPEED_THRUST_SETPOINT_LEN];
	_mav_put_uint32_t(buf, 0, time_boot_ms);
8000e5c0:	ee c9 00 1c 	sub	r9,r7,28
8000e5c4:	ee c8 00 14 	sub	r8,r7,20
8000e5c8:	12 9b       	mov	r11,r9
8000e5ca:	10 9c       	mov	r12,r8
8000e5cc:	fe b0 f9 24 	rcall	8000d814 <byte_swap_4>
	_mav_put_float(buf, 4, roll_speed);
8000e5d0:	ee c9 00 20 	sub	r9,r7,32
8000e5d4:	ee c8 00 14 	sub	r8,r7,20
8000e5d8:	2f c8       	sub	r8,-4
8000e5da:	12 9b       	mov	r11,r9
8000e5dc:	10 9c       	mov	r12,r8
8000e5de:	fe b0 f9 1b 	rcall	8000d814 <byte_swap_4>
	_mav_put_float(buf, 8, pitch_speed);
8000e5e2:	ee c9 00 24 	sub	r9,r7,36
8000e5e6:	ee c8 00 14 	sub	r8,r7,20
8000e5ea:	2f 88       	sub	r8,-8
8000e5ec:	12 9b       	mov	r11,r9
8000e5ee:	10 9c       	mov	r12,r8
8000e5f0:	fe b0 f9 12 	rcall	8000d814 <byte_swap_4>
	_mav_put_float(buf, 12, yaw_speed);
8000e5f4:	ee c9 00 28 	sub	r9,r7,40
8000e5f8:	ee c8 00 14 	sub	r8,r7,20
8000e5fc:	2f 48       	sub	r8,-12
8000e5fe:	12 9b       	mov	r11,r9
8000e600:	10 9c       	mov	r12,r8
8000e602:	fe b0 f9 09 	rcall	8000d814 <byte_swap_4>
	_mav_put_float(buf, 16, thrust);
8000e606:	0a 99       	mov	r9,r5
8000e608:	ee c8 00 14 	sub	r8,r7,20
8000e60c:	2f 08       	sub	r8,-16
8000e60e:	12 9b       	mov	r11,r9
8000e610:	10 9c       	mov	r12,r8
8000e612:	fe b0 f9 01 	rcall	8000d814 <byte_swap_4>

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_ROLL_PITCH_YAW_SPEED_THRUST_SETPOINT, buf, MAVLINK_MSG_ID_ROLL_PITCH_YAW_SPEED_THRUST_SETPOINT_LEN, MAVLINK_MSG_ID_ROLL_PITCH_YAW_SPEED_THRUST_SETPOINT_CRC);
8000e616:	ee ca 00 14 	sub	r10,r7,20
8000e61a:	e0 68 00 ee 	mov	r8,238
8000e61e:	31 49       	mov	r9,20
8000e620:	33 bb       	mov	r11,59
8000e622:	ee fc ff e8 	ld.w	r12,r7[-24]
8000e626:	fe b0 f8 2f 	rcall	8000d684 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_ROLL_PITCH_YAW_SPEED_THRUST_SETPOINT, (const char *)&packet, MAVLINK_MSG_ID_ROLL_PITCH_YAW_SPEED_THRUST_SETPOINT_LEN, MAVLINK_MSG_ID_ROLL_PITCH_YAW_SPEED_THRUST_SETPOINT_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_ROLL_PITCH_YAW_SPEED_THRUST_SETPOINT, (const char *)&packet, MAVLINK_MSG_ID_ROLL_PITCH_YAW_SPEED_THRUST_SETPOINT_LEN);
#endif
#endif
}
8000e62a:	2f 6d       	sub	sp,-40
8000e62c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000e630:	80 00       	ld.sh	r0,r0[0x0]
8000e632:	e4 2a eb cd 	sub	r10,322509

8000e634 <mavlink_msg_vfr_hud_send>:
 * @param climb Current climb rate in meters/second
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_vfr_hud_send(mavlink_channel_t chan, float airspeed, float groundspeed, int16_t heading, uint16_t throttle, float alt, float climb)
{
8000e634:	eb cd 40 e0 	pushm	r5-r7,lr
8000e638:	1a 97       	mov	r7,sp
8000e63a:	20 ad       	sub	sp,40
8000e63c:	4a 76       	lddpc	r6,8000e6d8 <mavlink_msg_vfr_hud_send+0xa4>
8000e63e:	1e 26       	rsub	r6,pc
8000e640:	ee c5 ff f0 	sub	r5,r7,-16
8000e644:	ef 4c ff e8 	st.w	r7[-24],r12
8000e648:	ef 4b ff e4 	st.w	r7[-28],r11
8000e64c:	ef 4a ff e0 	st.w	r7[-32],r10
8000e650:	ef 59 ff dc 	st.h	r7[-36],r9
8000e654:	ef 58 ff d8 	st.h	r7[-40],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_VFR_HUD_LEN];
	_mav_put_float(buf, 0, airspeed);
8000e658:	ee c9 00 1c 	sub	r9,r7,28
8000e65c:	ee c8 00 14 	sub	r8,r7,20
8000e660:	12 9b       	mov	r11,r9
8000e662:	10 9c       	mov	r12,r8
8000e664:	fe b0 f8 d8 	rcall	8000d814 <byte_swap_4>
	_mav_put_float(buf, 4, groundspeed);
8000e668:	ee c9 00 20 	sub	r9,r7,32
8000e66c:	ee c8 00 14 	sub	r8,r7,20
8000e670:	2f c8       	sub	r8,-4
8000e672:	12 9b       	mov	r11,r9
8000e674:	10 9c       	mov	r12,r8
8000e676:	fe b0 f8 cf 	rcall	8000d814 <byte_swap_4>
	_mav_put_float(buf, 8, alt);
8000e67a:	0a 99       	mov	r9,r5
8000e67c:	ee c8 00 14 	sub	r8,r7,20
8000e680:	2f 88       	sub	r8,-8
8000e682:	12 9b       	mov	r11,r9
8000e684:	10 9c       	mov	r12,r8
8000e686:	fe b0 f8 c7 	rcall	8000d814 <byte_swap_4>
	_mav_put_float(buf, 12, climb);
8000e68a:	ea c9 ff fc 	sub	r9,r5,-4
8000e68e:	ee c8 00 14 	sub	r8,r7,20
8000e692:	2f 48       	sub	r8,-12
8000e694:	12 9b       	mov	r11,r9
8000e696:	10 9c       	mov	r12,r8
8000e698:	fe b0 f8 be 	rcall	8000d814 <byte_swap_4>
	_mav_put_int16_t(buf, 16, heading);
8000e69c:	ee c9 00 24 	sub	r9,r7,36
8000e6a0:	ee c8 00 14 	sub	r8,r7,20
8000e6a4:	2f 08       	sub	r8,-16
8000e6a6:	12 9b       	mov	r11,r9
8000e6a8:	10 9c       	mov	r12,r8
8000e6aa:	fe b0 f8 9b 	rcall	8000d7e0 <byte_swap_2>
	_mav_put_uint16_t(buf, 18, throttle);
8000e6ae:	ee c9 00 28 	sub	r9,r7,40
8000e6b2:	ee c8 00 14 	sub	r8,r7,20
8000e6b6:	2e e8       	sub	r8,-18
8000e6b8:	12 9b       	mov	r11,r9
8000e6ba:	10 9c       	mov	r12,r8
8000e6bc:	fe b0 f8 92 	rcall	8000d7e0 <byte_swap_2>

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_VFR_HUD, buf, MAVLINK_MSG_ID_VFR_HUD_LEN, MAVLINK_MSG_ID_VFR_HUD_CRC);
8000e6c0:	ee ca 00 14 	sub	r10,r7,20
8000e6c4:	31 48       	mov	r8,20
8000e6c6:	31 49       	mov	r9,20
8000e6c8:	34 ab       	mov	r11,74
8000e6ca:	ee fc ff e8 	ld.w	r12,r7[-24]
8000e6ce:	fe b0 f7 db 	rcall	8000d684 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_VFR_HUD, (const char *)&packet, MAVLINK_MSG_ID_VFR_HUD_LEN, MAVLINK_MSG_ID_VFR_HUD_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_VFR_HUD, (const char *)&packet, MAVLINK_MSG_ID_VFR_HUD_LEN);
#endif
#endif
}
8000e6d2:	2f 6d       	sub	sp,-40
8000e6d4:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000e6d8:	80 00       	ld.sh	r0,r0[0x0]
8000e6da:	e4 c2 eb cd 	sub	r2,r2,-5171

8000e6dc <mavlink_msg_command_long_get_target_system>:
 * @brief Get field target_system from command_long message
 *
 * @return System which should execute the command
 */
static inline uint8_t mavlink_msg_command_long_get_target_system(const mavlink_message_t* msg)
{
8000e6dc:	eb cd 40 80 	pushm	r7,lr
8000e6e0:	1a 97       	mov	r7,sp
8000e6e2:	20 1d       	sub	sp,4
8000e6e4:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  30);
8000e6e8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e6ec:	2f 88       	sub	r8,-8
8000e6ee:	2e 28       	sub	r8,-30
8000e6f0:	11 88       	ld.ub	r8,r8[0x0]
}
8000e6f2:	10 9c       	mov	r12,r8
8000e6f4:	2f fd       	sub	sp,-4
8000e6f6:	e3 cd 80 80 	ldm	sp++,r7,pc

8000e6fa <mavlink_msg_command_long_get_target_component>:
 * @brief Get field target_component from command_long message
 *
 * @return Component which should execute the command, 0 for all components
 */
static inline uint8_t mavlink_msg_command_long_get_target_component(const mavlink_message_t* msg)
{
8000e6fa:	eb cd 40 80 	pushm	r7,lr
8000e6fe:	1a 97       	mov	r7,sp
8000e700:	20 1d       	sub	sp,4
8000e702:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  31);
8000e706:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e70a:	2f 88       	sub	r8,-8
8000e70c:	2e 18       	sub	r8,-31
8000e70e:	11 88       	ld.ub	r8,r8[0x0]
}
8000e710:	10 9c       	mov	r12,r8
8000e712:	2f fd       	sub	sp,-4
8000e714:	e3 cd 80 80 	ldm	sp++,r7,pc

8000e718 <mavlink_msg_command_long_get_command>:
 * @brief Get field command from command_long message
 *
 * @return Command ID, as defined by MAV_CMD enum.
 */
static inline uint16_t mavlink_msg_command_long_get_command(const mavlink_message_t* msg)
{
8000e718:	eb cd 40 c0 	pushm	r6-r7,lr
8000e71c:	1a 97       	mov	r7,sp
8000e71e:	20 1d       	sub	sp,4
8000e720:	48 86       	lddpc	r6,8000e740 <mavlink_msg_command_long_get_command+0x28>
8000e722:	1e 26       	rsub	r6,pc
8000e724:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint16_t(msg,  28);
8000e728:	31 cb       	mov	r11,28
8000e72a:	ee fc ff fc 	ld.w	r12,r7[-4]
8000e72e:	fe b0 f9 37 	rcall	8000d99c <_MAV_RETURN_uint16_t>
8000e732:	18 98       	mov	r8,r12
8000e734:	5c 88       	casts.h	r8
8000e736:	5c 88       	casts.h	r8
}
8000e738:	10 9c       	mov	r12,r8
8000e73a:	2f fd       	sub	sp,-4
8000e73c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000e740:	80 00       	ld.sh	r0,r0[0x0]
8000e742:	e5 a6 eb cd 	cop	cp7,cr11,cr12,cr13,0x4c

8000e744 <mavlink_msg_command_long_get_confirmation>:
 * @brief Get field confirmation from command_long message
 *
 * @return 0: First transmission of this command. 1-255: Confirmation transmissions (e.g. for kill command)
 */
static inline uint8_t mavlink_msg_command_long_get_confirmation(const mavlink_message_t* msg)
{
8000e744:	eb cd 40 80 	pushm	r7,lr
8000e748:	1a 97       	mov	r7,sp
8000e74a:	20 1d       	sub	sp,4
8000e74c:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  32);
8000e750:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e754:	2f 88       	sub	r8,-8
8000e756:	2e 08       	sub	r8,-32
8000e758:	11 88       	ld.ub	r8,r8[0x0]
}
8000e75a:	10 9c       	mov	r12,r8
8000e75c:	2f fd       	sub	sp,-4
8000e75e:	e3 cd 80 80 	ldm	sp++,r7,pc

8000e762 <mavlink_msg_command_long_get_param1>:
 * @brief Get field param1 from command_long message
 *
 * @return Parameter 1, as defined by MAV_CMD enum.
 */
static inline float mavlink_msg_command_long_get_param1(const mavlink_message_t* msg)
{
8000e762:	eb cd 40 c0 	pushm	r6-r7,lr
8000e766:	1a 97       	mov	r7,sp
8000e768:	20 1d       	sub	sp,4
8000e76a:	48 86       	lddpc	r6,8000e788 <mavlink_msg_command_long_get_param1+0x26>
8000e76c:	1e 26       	rsub	r6,pc
8000e76e:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_float(msg,  0);
8000e772:	30 0b       	mov	r11,0
8000e774:	ee fc ff fc 	ld.w	r12,r7[-4]
8000e778:	fe b0 f9 32 	rcall	8000d9dc <_MAV_RETURN_float>
8000e77c:	18 98       	mov	r8,r12
}
8000e77e:	10 9c       	mov	r12,r8
8000e780:	2f fd       	sub	sp,-4
8000e782:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000e786:	00 00       	add	r0,r0
8000e788:	80 00       	ld.sh	r0,r0[0x0]
8000e78a:	e5 f0 eb cd 	st.wqs	r2[0x734],r0

8000e78c <mavlink_msg_command_long_get_param2>:
 * @brief Get field param2 from command_long message
 *
 * @return Parameter 2, as defined by MAV_CMD enum.
 */
static inline float mavlink_msg_command_long_get_param2(const mavlink_message_t* msg)
{
8000e78c:	eb cd 40 c0 	pushm	r6-r7,lr
8000e790:	1a 97       	mov	r7,sp
8000e792:	20 1d       	sub	sp,4
8000e794:	48 76       	lddpc	r6,8000e7b0 <mavlink_msg_command_long_get_param2+0x24>
8000e796:	1e 26       	rsub	r6,pc
8000e798:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_float(msg,  4);
8000e79c:	30 4b       	mov	r11,4
8000e79e:	ee fc ff fc 	ld.w	r12,r7[-4]
8000e7a2:	fe b0 f9 1d 	rcall	8000d9dc <_MAV_RETURN_float>
8000e7a6:	18 98       	mov	r8,r12
}
8000e7a8:	10 9c       	mov	r12,r8
8000e7aa:	2f fd       	sub	sp,-4
8000e7ac:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000e7b0:	80 00       	ld.sh	r0,r0[0x0]
8000e7b2:	e6 1a eb cd 	andh	r10,0xebcd,COH

8000e7b4 <mavlink_msg_command_long_get_param3>:
 * @brief Get field param3 from command_long message
 *
 * @return Parameter 3, as defined by MAV_CMD enum.
 */
static inline float mavlink_msg_command_long_get_param3(const mavlink_message_t* msg)
{
8000e7b4:	eb cd 40 c0 	pushm	r6-r7,lr
8000e7b8:	1a 97       	mov	r7,sp
8000e7ba:	20 1d       	sub	sp,4
8000e7bc:	48 76       	lddpc	r6,8000e7d8 <mavlink_msg_command_long_get_param3+0x24>
8000e7be:	1e 26       	rsub	r6,pc
8000e7c0:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_float(msg,  8);
8000e7c4:	30 8b       	mov	r11,8
8000e7c6:	ee fc ff fc 	ld.w	r12,r7[-4]
8000e7ca:	fe b0 f9 09 	rcall	8000d9dc <_MAV_RETURN_float>
8000e7ce:	18 98       	mov	r8,r12
}
8000e7d0:	10 9c       	mov	r12,r8
8000e7d2:	2f fd       	sub	sp,-4
8000e7d4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000e7d8:	80 00       	ld.sh	r0,r0[0x0]
8000e7da:	e6 42 eb cd 	cp.w	r2,453581

8000e7dc <mavlink_msg_command_long_get_param4>:
 * @brief Get field param4 from command_long message
 *
 * @return Parameter 4, as defined by MAV_CMD enum.
 */
static inline float mavlink_msg_command_long_get_param4(const mavlink_message_t* msg)
{
8000e7dc:	eb cd 40 c0 	pushm	r6-r7,lr
8000e7e0:	1a 97       	mov	r7,sp
8000e7e2:	20 1d       	sub	sp,4
8000e7e4:	48 76       	lddpc	r6,8000e800 <mavlink_msg_command_long_get_param4+0x24>
8000e7e6:	1e 26       	rsub	r6,pc
8000e7e8:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_float(msg,  12);
8000e7ec:	30 cb       	mov	r11,12
8000e7ee:	ee fc ff fc 	ld.w	r12,r7[-4]
8000e7f2:	fe b0 f8 f5 	rcall	8000d9dc <_MAV_RETURN_float>
8000e7f6:	18 98       	mov	r8,r12
}
8000e7f8:	10 9c       	mov	r12,r8
8000e7fa:	2f fd       	sub	sp,-4
8000e7fc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000e800:	80 00       	ld.sh	r0,r0[0x0]
8000e802:	e6 6a eb cd 	mov	r10,453581

8000e804 <mavlink_msg_command_long_get_param5>:
 * @brief Get field param5 from command_long message
 *
 * @return Parameter 5, as defined by MAV_CMD enum.
 */
static inline float mavlink_msg_command_long_get_param5(const mavlink_message_t* msg)
{
8000e804:	eb cd 40 c0 	pushm	r6-r7,lr
8000e808:	1a 97       	mov	r7,sp
8000e80a:	20 1d       	sub	sp,4
8000e80c:	48 76       	lddpc	r6,8000e828 <mavlink_msg_command_long_get_param5+0x24>
8000e80e:	1e 26       	rsub	r6,pc
8000e810:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_float(msg,  16);
8000e814:	31 0b       	mov	r11,16
8000e816:	ee fc ff fc 	ld.w	r12,r7[-4]
8000e81a:	fe b0 f8 e1 	rcall	8000d9dc <_MAV_RETURN_float>
8000e81e:	18 98       	mov	r8,r12
}
8000e820:	10 9c       	mov	r12,r8
8000e822:	2f fd       	sub	sp,-4
8000e824:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000e828:	80 00       	ld.sh	r0,r0[0x0]
8000e82a:	e6 92 eb cd 	brhs	8010bfc4 <_data_lma+0xda17c>

8000e82c <mavlink_msg_command_long_get_param6>:
 * @brief Get field param6 from command_long message
 *
 * @return Parameter 6, as defined by MAV_CMD enum.
 */
static inline float mavlink_msg_command_long_get_param6(const mavlink_message_t* msg)
{
8000e82c:	eb cd 40 c0 	pushm	r6-r7,lr
8000e830:	1a 97       	mov	r7,sp
8000e832:	20 1d       	sub	sp,4
8000e834:	48 76       	lddpc	r6,8000e850 <mavlink_msg_command_long_get_param6+0x24>
8000e836:	1e 26       	rsub	r6,pc
8000e838:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_float(msg,  20);
8000e83c:	31 4b       	mov	r11,20
8000e83e:	ee fc ff fc 	ld.w	r12,r7[-4]
8000e842:	fe b0 f8 cd 	rcall	8000d9dc <_MAV_RETURN_float>
8000e846:	18 98       	mov	r8,r12
}
8000e848:	10 9c       	mov	r12,r8
8000e84a:	2f fd       	sub	sp,-4
8000e84c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000e850:	80 00       	ld.sh	r0,r0[0x0]
8000e852:	e6 ba       	*unknown*

8000e854 <mavlink_msg_command_long_get_param7>:
 * @brief Get field param7 from command_long message
 *
 * @return Parameter 7, as defined by MAV_CMD enum.
 */
static inline float mavlink_msg_command_long_get_param7(const mavlink_message_t* msg)
{
8000e854:	eb cd 40 c0 	pushm	r6-r7,lr
8000e858:	1a 97       	mov	r7,sp
8000e85a:	20 1d       	sub	sp,4
8000e85c:	48 76       	lddpc	r6,8000e878 <mavlink_msg_command_long_get_param7+0x24>
8000e85e:	1e 26       	rsub	r6,pc
8000e860:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_float(msg,  24);
8000e864:	31 8b       	mov	r11,24
8000e866:	ee fc ff fc 	ld.w	r12,r7[-4]
8000e86a:	fe b0 f8 b9 	rcall	8000d9dc <_MAV_RETURN_float>
8000e86e:	18 98       	mov	r8,r12
}
8000e870:	10 9c       	mov	r12,r8
8000e872:	2f fd       	sub	sp,-4
8000e874:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000e878:	80 00       	ld.sh	r0,r0[0x0]
8000e87a:	e6 e2 eb cd 	ld.d	r2,r3[-5171]

8000e87c <mavlink_msg_command_long_decode>:
 *
 * @param msg The message to decode
 * @param command_long C-struct to decode the message contents into
 */
static inline void mavlink_msg_command_long_decode(const mavlink_message_t* msg, mavlink_command_long_t* command_long)
{
8000e87c:	eb cd 40 c0 	pushm	r6-r7,lr
8000e880:	1a 97       	mov	r7,sp
8000e882:	20 2d       	sub	sp,8
8000e884:	4a e6       	lddpc	r6,8000e93c <mavlink_msg_command_long_decode+0xc0>
8000e886:	1e 26       	rsub	r6,pc
8000e888:	ef 4c ff fc 	st.w	r7[-4],r12
8000e88c:	ef 4b ff f8 	st.w	r7[-8],r11
#if MAVLINK_NEED_BYTE_SWAP
	command_long->param1 = mavlink_msg_command_long_get_param1(msg);
8000e890:	ee fc ff fc 	ld.w	r12,r7[-4]
8000e894:	c6 7f       	rcall	8000e762 <mavlink_msg_command_long_get_param1>
8000e896:	18 99       	mov	r9,r12
8000e898:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000e89c:	91 09       	st.w	r8[0x0],r9
	command_long->param2 = mavlink_msg_command_long_get_param2(msg);
8000e89e:	ee fc ff fc 	ld.w	r12,r7[-4]
8000e8a2:	c7 5f       	rcall	8000e78c <mavlink_msg_command_long_get_param2>
8000e8a4:	18 99       	mov	r9,r12
8000e8a6:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000e8aa:	91 19       	st.w	r8[0x4],r9
	command_long->param3 = mavlink_msg_command_long_get_param3(msg);
8000e8ac:	ee fc ff fc 	ld.w	r12,r7[-4]
8000e8b0:	c8 2f       	rcall	8000e7b4 <mavlink_msg_command_long_get_param3>
8000e8b2:	18 99       	mov	r9,r12
8000e8b4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000e8b8:	91 29       	st.w	r8[0x8],r9
	command_long->param4 = mavlink_msg_command_long_get_param4(msg);
8000e8ba:	ee fc ff fc 	ld.w	r12,r7[-4]
8000e8be:	c8 ff       	rcall	8000e7dc <mavlink_msg_command_long_get_param4>
8000e8c0:	18 99       	mov	r9,r12
8000e8c2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000e8c6:	91 39       	st.w	r8[0xc],r9
	command_long->param5 = mavlink_msg_command_long_get_param5(msg);
8000e8c8:	ee fc ff fc 	ld.w	r12,r7[-4]
8000e8cc:	c9 cf       	rcall	8000e804 <mavlink_msg_command_long_get_param5>
8000e8ce:	18 99       	mov	r9,r12
8000e8d0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000e8d4:	91 49       	st.w	r8[0x10],r9
	command_long->param6 = mavlink_msg_command_long_get_param6(msg);
8000e8d6:	ee fc ff fc 	ld.w	r12,r7[-4]
8000e8da:	ca 9f       	rcall	8000e82c <mavlink_msg_command_long_get_param6>
8000e8dc:	18 99       	mov	r9,r12
8000e8de:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000e8e2:	91 59       	st.w	r8[0x14],r9
	command_long->param7 = mavlink_msg_command_long_get_param7(msg);
8000e8e4:	ee fc ff fc 	ld.w	r12,r7[-4]
8000e8e8:	cb 6f       	rcall	8000e854 <mavlink_msg_command_long_get_param7>
8000e8ea:	18 99       	mov	r9,r12
8000e8ec:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000e8f0:	91 69       	st.w	r8[0x18],r9
	command_long->command = mavlink_msg_command_long_get_command(msg);
8000e8f2:	ee fc ff fc 	ld.w	r12,r7[-4]
8000e8f6:	c1 1f       	rcall	8000e718 <mavlink_msg_command_long_get_command>
8000e8f8:	18 98       	mov	r8,r12
8000e8fa:	5c 88       	casts.h	r8
8000e8fc:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000e900:	f3 58 00 1c 	st.h	r9[28],r8
	command_long->target_system = mavlink_msg_command_long_get_target_system(msg);
8000e904:	ee fc ff fc 	ld.w	r12,r7[-4]
8000e908:	ce ae       	rcall	8000e6dc <mavlink_msg_command_long_get_target_system>
8000e90a:	18 98       	mov	r8,r12
8000e90c:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000e910:	f3 68 00 1e 	st.b	r9[30],r8
	command_long->target_component = mavlink_msg_command_long_get_target_component(msg);
8000e914:	ee fc ff fc 	ld.w	r12,r7[-4]
8000e918:	cf 1e       	rcall	8000e6fa <mavlink_msg_command_long_get_target_component>
8000e91a:	18 98       	mov	r8,r12
8000e91c:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000e920:	f3 68 00 1f 	st.b	r9[31],r8
	command_long->confirmation = mavlink_msg_command_long_get_confirmation(msg);
8000e924:	ee fc ff fc 	ld.w	r12,r7[-4]
8000e928:	c0 ef       	rcall	8000e744 <mavlink_msg_command_long_get_confirmation>
8000e92a:	18 98       	mov	r8,r12
8000e92c:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000e930:	f3 68 00 20 	st.b	r9[32],r8
#else
	memcpy(command_long, _MAV_PAYLOAD(msg), MAVLINK_MSG_ID_COMMAND_LONG_LEN);
#endif
}
8000e934:	2f ed       	sub	sp,-8
8000e936:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000e93a:	00 00       	add	r0,r0
8000e93c:	80 00       	ld.sh	r0,r0[0x0]
8000e93e:	e7 0a eb cd 	ld.sh	r10,r3[-5171]

8000e940 <mavlink_msg_roll_pitch_yaw_rates_thrust_setpoint_send>:
 * @param thrust Collective thrust, normalized to 0 .. 1
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_roll_pitch_yaw_rates_thrust_setpoint_send(mavlink_channel_t chan, uint32_t time_boot_ms, float roll_rate, float pitch_rate, float yaw_rate, float thrust)
{
8000e940:	eb cd 40 e0 	pushm	r5-r7,lr
8000e944:	1a 97       	mov	r7,sp
8000e946:	20 ad       	sub	sp,40
8000e948:	4a 36       	lddpc	r6,8000e9d4 <mavlink_msg_roll_pitch_yaw_rates_thrust_setpoint_send+0x94>
8000e94a:	1e 26       	rsub	r6,pc
8000e94c:	ee c5 ff f0 	sub	r5,r7,-16
8000e950:	ef 4c ff e8 	st.w	r7[-24],r12
8000e954:	ef 4b ff e4 	st.w	r7[-28],r11
8000e958:	ef 4a ff e0 	st.w	r7[-32],r10
8000e95c:	ef 49 ff dc 	st.w	r7[-36],r9
8000e960:	ef 48 ff d8 	st.w	r7[-40],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_ROLL_PITCH_YAW_RATES_THRUST_SETPOINT_LEN];
	_mav_put_uint32_t(buf, 0, time_boot_ms);
8000e964:	ee c9 00 1c 	sub	r9,r7,28
8000e968:	ee c8 00 14 	sub	r8,r7,20
8000e96c:	12 9b       	mov	r11,r9
8000e96e:	10 9c       	mov	r12,r8
8000e970:	fe b0 f7 52 	rcall	8000d814 <byte_swap_4>
	_mav_put_float(buf, 4, roll_rate);
8000e974:	ee c9 00 20 	sub	r9,r7,32
8000e978:	ee c8 00 14 	sub	r8,r7,20
8000e97c:	2f c8       	sub	r8,-4
8000e97e:	12 9b       	mov	r11,r9
8000e980:	10 9c       	mov	r12,r8
8000e982:	fe b0 f7 49 	rcall	8000d814 <byte_swap_4>
	_mav_put_float(buf, 8, pitch_rate);
8000e986:	ee c9 00 24 	sub	r9,r7,36
8000e98a:	ee c8 00 14 	sub	r8,r7,20
8000e98e:	2f 88       	sub	r8,-8
8000e990:	12 9b       	mov	r11,r9
8000e992:	10 9c       	mov	r12,r8
8000e994:	fe b0 f7 40 	rcall	8000d814 <byte_swap_4>
	_mav_put_float(buf, 12, yaw_rate);
8000e998:	ee c9 00 28 	sub	r9,r7,40
8000e99c:	ee c8 00 14 	sub	r8,r7,20
8000e9a0:	2f 48       	sub	r8,-12
8000e9a2:	12 9b       	mov	r11,r9
8000e9a4:	10 9c       	mov	r12,r8
8000e9a6:	fe b0 f7 37 	rcall	8000d814 <byte_swap_4>
	_mav_put_float(buf, 16, thrust);
8000e9aa:	0a 99       	mov	r9,r5
8000e9ac:	ee c8 00 14 	sub	r8,r7,20
8000e9b0:	2f 08       	sub	r8,-16
8000e9b2:	12 9b       	mov	r11,r9
8000e9b4:	10 9c       	mov	r12,r8
8000e9b6:	fe b0 f7 2f 	rcall	8000d814 <byte_swap_4>

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_ROLL_PITCH_YAW_RATES_THRUST_SETPOINT, buf, MAVLINK_MSG_ID_ROLL_PITCH_YAW_RATES_THRUST_SETPOINT_LEN, MAVLINK_MSG_ID_ROLL_PITCH_YAW_RATES_THRUST_SETPOINT_CRC);
8000e9ba:	ee ca 00 14 	sub	r10,r7,20
8000e9be:	37 f8       	mov	r8,127
8000e9c0:	31 49       	mov	r9,20
8000e9c2:	35 0b       	mov	r11,80
8000e9c4:	ee fc ff e8 	ld.w	r12,r7[-24]
8000e9c8:	fe b0 f6 5e 	rcall	8000d684 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_ROLL_PITCH_YAW_RATES_THRUST_SETPOINT, (const char *)&packet, MAVLINK_MSG_ID_ROLL_PITCH_YAW_RATES_THRUST_SETPOINT_LEN, MAVLINK_MSG_ID_ROLL_PITCH_YAW_RATES_THRUST_SETPOINT_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_ROLL_PITCH_YAW_RATES_THRUST_SETPOINT, (const char *)&packet, MAVLINK_MSG_ID_ROLL_PITCH_YAW_RATES_THRUST_SETPOINT_LEN);
#endif
#endif
}
8000e9cc:	2f 6d       	sub	sp,-40
8000e9ce:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000e9d2:	00 00       	add	r0,r0
8000e9d4:	80 00       	ld.sh	r0,r0[0x0]
8000e9d6:	e7 ce eb cd 	ldmts	lr++,r0,r2-r3,r6-r9,r11,sp-pc

8000e9d8 <mavlink_msg_hil_state_send>:
 * @param zacc Z acceleration (mg)
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_hil_state_send(mavlink_channel_t chan, uint64_t time_usec, float roll, float pitch, float yaw, float rollspeed, float pitchspeed, float yawspeed, int32_t lat, int32_t lon, int32_t alt, int16_t vx, int16_t vy, int16_t vz, int16_t xacc, int16_t yacc, int16_t zacc)
{
8000e9d8:	eb cd 40 e0 	pushm	r5-r7,lr
8000e9dc:	1a 97       	mov	r7,sp
8000e9de:	21 9d       	sub	sp,100
8000e9e0:	4d d6       	lddpc	r6,8000eb54 <mavlink_msg_hil_state_send+0x17c>
8000e9e2:	1e 26       	rsub	r6,pc
8000e9e4:	ee c5 ff f0 	sub	r5,r7,-16
8000e9e8:	ef 4c ff c4 	st.w	r7[-60],r12
8000e9ec:	ee eb ff bc 	st.d	r7[-68],r10
8000e9f0:	ef 49 ff b8 	st.w	r7[-72],r9
8000e9f4:	ef 48 ff b4 	st.w	r7[-76],r8
8000e9f8:	6a 7e       	ld.w	lr,r5[0x1c]
8000e9fa:	6a 8c       	ld.w	r12,r5[0x20]
8000e9fc:	6a 9b       	ld.w	r11,r5[0x24]
8000e9fe:	6a aa       	ld.w	r10,r5[0x28]
8000ea00:	6a b9       	ld.w	r9,r5[0x2c]
8000ea02:	6a c8       	ld.w	r8,r5[0x30]
8000ea04:	ef 5e ff b0 	st.h	r7[-80],lr
8000ea08:	ef 5c ff ac 	st.h	r7[-84],r12
8000ea0c:	ef 5b ff a8 	st.h	r7[-88],r11
8000ea10:	ef 5a ff a4 	st.h	r7[-92],r10
8000ea14:	ef 59 ff a0 	st.h	r7[-96],r9
8000ea18:	ef 58 ff 9c 	st.h	r7[-100],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_HIL_STATE_LEN];
	_mav_put_uint64_t(buf, 0, time_usec);
8000ea1c:	ee c9 00 44 	sub	r9,r7,68
8000ea20:	ee c8 00 38 	sub	r8,r7,56
8000ea24:	12 9b       	mov	r11,r9
8000ea26:	10 9c       	mov	r12,r8
8000ea28:	fe b0 f7 22 	rcall	8000d86c <byte_swap_8>
	_mav_put_float(buf, 8, roll);
8000ea2c:	ee c9 00 48 	sub	r9,r7,72
8000ea30:	ee c8 00 38 	sub	r8,r7,56
8000ea34:	2f 88       	sub	r8,-8
8000ea36:	12 9b       	mov	r11,r9
8000ea38:	10 9c       	mov	r12,r8
8000ea3a:	fe b0 f6 ed 	rcall	8000d814 <byte_swap_4>
	_mav_put_float(buf, 12, pitch);
8000ea3e:	ee c9 00 4c 	sub	r9,r7,76
8000ea42:	ee c8 00 38 	sub	r8,r7,56
8000ea46:	2f 48       	sub	r8,-12
8000ea48:	12 9b       	mov	r11,r9
8000ea4a:	10 9c       	mov	r12,r8
8000ea4c:	fe b0 f6 e4 	rcall	8000d814 <byte_swap_4>
	_mav_put_float(buf, 16, yaw);
8000ea50:	0a 99       	mov	r9,r5
8000ea52:	ee c8 00 38 	sub	r8,r7,56
8000ea56:	2f 08       	sub	r8,-16
8000ea58:	12 9b       	mov	r11,r9
8000ea5a:	10 9c       	mov	r12,r8
8000ea5c:	fe b0 f6 dc 	rcall	8000d814 <byte_swap_4>
	_mav_put_float(buf, 20, rollspeed);
8000ea60:	ea c9 ff fc 	sub	r9,r5,-4
8000ea64:	ee c8 00 38 	sub	r8,r7,56
8000ea68:	2e c8       	sub	r8,-20
8000ea6a:	12 9b       	mov	r11,r9
8000ea6c:	10 9c       	mov	r12,r8
8000ea6e:	fe b0 f6 d3 	rcall	8000d814 <byte_swap_4>
	_mav_put_float(buf, 24, pitchspeed);
8000ea72:	ea c9 ff f8 	sub	r9,r5,-8
8000ea76:	ee c8 00 38 	sub	r8,r7,56
8000ea7a:	2e 88       	sub	r8,-24
8000ea7c:	12 9b       	mov	r11,r9
8000ea7e:	10 9c       	mov	r12,r8
8000ea80:	fe b0 f6 ca 	rcall	8000d814 <byte_swap_4>
	_mav_put_float(buf, 28, yawspeed);
8000ea84:	ea c9 ff f4 	sub	r9,r5,-12
8000ea88:	ee c8 00 38 	sub	r8,r7,56
8000ea8c:	2e 48       	sub	r8,-28
8000ea8e:	12 9b       	mov	r11,r9
8000ea90:	10 9c       	mov	r12,r8
8000ea92:	fe b0 f6 c1 	rcall	8000d814 <byte_swap_4>
	_mav_put_int32_t(buf, 32, lat);
8000ea96:	ea c9 ff f0 	sub	r9,r5,-16
8000ea9a:	ee c8 00 38 	sub	r8,r7,56
8000ea9e:	2e 08       	sub	r8,-32
8000eaa0:	12 9b       	mov	r11,r9
8000eaa2:	10 9c       	mov	r12,r8
8000eaa4:	fe b0 f6 b8 	rcall	8000d814 <byte_swap_4>
	_mav_put_int32_t(buf, 36, lon);
8000eaa8:	ea c9 ff ec 	sub	r9,r5,-20
8000eaac:	ee c8 00 38 	sub	r8,r7,56
8000eab0:	2d c8       	sub	r8,-36
8000eab2:	12 9b       	mov	r11,r9
8000eab4:	10 9c       	mov	r12,r8
8000eab6:	fe b0 f6 af 	rcall	8000d814 <byte_swap_4>
	_mav_put_int32_t(buf, 40, alt);
8000eaba:	ea c9 ff e8 	sub	r9,r5,-24
8000eabe:	ee c8 00 38 	sub	r8,r7,56
8000eac2:	2d 88       	sub	r8,-40
8000eac4:	12 9b       	mov	r11,r9
8000eac6:	10 9c       	mov	r12,r8
8000eac8:	fe b0 f6 a6 	rcall	8000d814 <byte_swap_4>
	_mav_put_int16_t(buf, 44, vx);
8000eacc:	ee c9 00 50 	sub	r9,r7,80
8000ead0:	ee c8 00 38 	sub	r8,r7,56
8000ead4:	2d 48       	sub	r8,-44
8000ead6:	12 9b       	mov	r11,r9
8000ead8:	10 9c       	mov	r12,r8
8000eada:	fe b0 f6 83 	rcall	8000d7e0 <byte_swap_2>
	_mav_put_int16_t(buf, 46, vy);
8000eade:	ee c9 00 54 	sub	r9,r7,84
8000eae2:	ee c8 00 38 	sub	r8,r7,56
8000eae6:	2d 28       	sub	r8,-46
8000eae8:	12 9b       	mov	r11,r9
8000eaea:	10 9c       	mov	r12,r8
8000eaec:	fe b0 f6 7a 	rcall	8000d7e0 <byte_swap_2>
	_mav_put_int16_t(buf, 48, vz);
8000eaf0:	ee c9 00 58 	sub	r9,r7,88
8000eaf4:	ee c8 00 38 	sub	r8,r7,56
8000eaf8:	2d 08       	sub	r8,-48
8000eafa:	12 9b       	mov	r11,r9
8000eafc:	10 9c       	mov	r12,r8
8000eafe:	fe b0 f6 71 	rcall	8000d7e0 <byte_swap_2>
	_mav_put_int16_t(buf, 50, xacc);
8000eb02:	ee c9 00 5c 	sub	r9,r7,92
8000eb06:	ee c8 00 38 	sub	r8,r7,56
8000eb0a:	2c e8       	sub	r8,-50
8000eb0c:	12 9b       	mov	r11,r9
8000eb0e:	10 9c       	mov	r12,r8
8000eb10:	fe b0 f6 68 	rcall	8000d7e0 <byte_swap_2>
	_mav_put_int16_t(buf, 52, yacc);
8000eb14:	ee c9 00 60 	sub	r9,r7,96
8000eb18:	ee c8 00 38 	sub	r8,r7,56
8000eb1c:	2c c8       	sub	r8,-52
8000eb1e:	12 9b       	mov	r11,r9
8000eb20:	10 9c       	mov	r12,r8
8000eb22:	fe b0 f6 5f 	rcall	8000d7e0 <byte_swap_2>
	_mav_put_int16_t(buf, 54, zacc);
8000eb26:	ee c9 00 64 	sub	r9,r7,100
8000eb2a:	ee c8 00 38 	sub	r8,r7,56
8000eb2e:	2c a8       	sub	r8,-54
8000eb30:	12 9b       	mov	r11,r9
8000eb32:	10 9c       	mov	r12,r8
8000eb34:	fe b0 f6 56 	rcall	8000d7e0 <byte_swap_2>

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_HIL_STATE, buf, MAVLINK_MSG_ID_HIL_STATE_LEN, MAVLINK_MSG_ID_HIL_STATE_CRC);
8000eb38:	ee ca 00 38 	sub	r10,r7,56
8000eb3c:	e0 68 00 b7 	mov	r8,183
8000eb40:	33 89       	mov	r9,56
8000eb42:	35 ab       	mov	r11,90
8000eb44:	ee fc ff c4 	ld.w	r12,r7[-60]
8000eb48:	fe b0 f5 9e 	rcall	8000d684 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_HIL_STATE, (const char *)&packet, MAVLINK_MSG_ID_HIL_STATE_LEN, MAVLINK_MSG_ID_HIL_STATE_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_HIL_STATE, (const char *)&packet, MAVLINK_MSG_ID_HIL_STATE_LEN);
#endif
#endif
}
8000eb4c:	2e 7d       	sub	sp,-100
8000eb4e:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000eb52:	00 00       	add	r0,r0
8000eb54:	80 00       	ld.sh	r0,r0[0x0]
8000eb56:	e8 66 eb cd 	mov	r6,584653

8000eb58 <mavlink_msg_named_value_float_send>:
 * @param value Floating point value
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_named_value_float_send(mavlink_channel_t chan, uint32_t time_boot_ms, const char *name, float value)
{
8000eb58:	eb cd 40 c0 	pushm	r6-r7,lr
8000eb5c:	1a 97       	mov	r7,sp
8000eb5e:	20 9d       	sub	sp,36
8000eb60:	49 96       	lddpc	r6,8000ebc4 <mavlink_msg_named_value_float_send+0x6c>
8000eb62:	1e 26       	rsub	r6,pc
8000eb64:	ef 4c ff e8 	st.w	r7[-24],r12
8000eb68:	ef 4b ff e4 	st.w	r7[-28],r11
8000eb6c:	ef 4a ff e0 	st.w	r7[-32],r10
8000eb70:	ef 49 ff dc 	st.w	r7[-36],r9
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_NAMED_VALUE_FLOAT_LEN];
	_mav_put_uint32_t(buf, 0, time_boot_ms);
8000eb74:	ee c9 00 1c 	sub	r9,r7,28
8000eb78:	ee c8 00 14 	sub	r8,r7,20
8000eb7c:	12 9b       	mov	r11,r9
8000eb7e:	10 9c       	mov	r12,r8
8000eb80:	fe b0 f6 4a 	rcall	8000d814 <byte_swap_4>
	_mav_put_float(buf, 4, value);
8000eb84:	ee c9 00 24 	sub	r9,r7,36
8000eb88:	ee c8 00 14 	sub	r8,r7,20
8000eb8c:	2f c8       	sub	r8,-4
8000eb8e:	12 9b       	mov	r11,r9
8000eb90:	10 9c       	mov	r12,r8
8000eb92:	fe b0 f6 41 	rcall	8000d814 <byte_swap_4>
	_mav_put_char_array(buf, 8, name, 10);
8000eb96:	ee c8 00 14 	sub	r8,r7,20
8000eb9a:	30 a9       	mov	r9,10
8000eb9c:	ee fa ff e0 	ld.w	r10,r7[-32]
8000eba0:	30 8b       	mov	r11,8
8000eba2:	10 9c       	mov	r12,r8
8000eba4:	fe b0 f6 da 	rcall	8000d958 <_mav_put_char_array>
#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_NAMED_VALUE_FLOAT, buf, MAVLINK_MSG_ID_NAMED_VALUE_FLOAT_LEN, MAVLINK_MSG_ID_NAMED_VALUE_FLOAT_CRC);
8000eba8:	ee ca 00 14 	sub	r10,r7,20
8000ebac:	e0 68 00 aa 	mov	r8,170
8000ebb0:	31 29       	mov	r9,18
8000ebb2:	e0 6b 00 fb 	mov	r11,251
8000ebb6:	ee fc ff e8 	ld.w	r12,r7[-24]
8000ebba:	fe b0 f5 65 	rcall	8000d684 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_NAMED_VALUE_FLOAT, (const char *)&packet, MAVLINK_MSG_ID_NAMED_VALUE_FLOAT_LEN, MAVLINK_MSG_ID_NAMED_VALUE_FLOAT_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_NAMED_VALUE_FLOAT, (const char *)&packet, MAVLINK_MSG_ID_NAMED_VALUE_FLOAT_LEN);
#endif
#endif
}
8000ebbe:	2f 7d       	sub	sp,-36
8000ebc0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000ebc4:	80 00       	ld.sh	r0,r0[0x0]
8000ebc6:	e9 e6 eb cd 	sthh.w	sp[0x2f0],r4:t,r6:b

8000ebc8 <mavlink_msg_named_value_int_send>:
 * @param value Signed integer value
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_named_value_int_send(mavlink_channel_t chan, uint32_t time_boot_ms, const char *name, int32_t value)
{
8000ebc8:	eb cd 40 c0 	pushm	r6-r7,lr
8000ebcc:	1a 97       	mov	r7,sp
8000ebce:	20 9d       	sub	sp,36
8000ebd0:	49 96       	lddpc	r6,8000ec34 <mavlink_msg_named_value_int_send+0x6c>
8000ebd2:	1e 26       	rsub	r6,pc
8000ebd4:	ef 4c ff e8 	st.w	r7[-24],r12
8000ebd8:	ef 4b ff e4 	st.w	r7[-28],r11
8000ebdc:	ef 4a ff e0 	st.w	r7[-32],r10
8000ebe0:	ef 49 ff dc 	st.w	r7[-36],r9
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_NAMED_VALUE_INT_LEN];
	_mav_put_uint32_t(buf, 0, time_boot_ms);
8000ebe4:	ee c9 00 1c 	sub	r9,r7,28
8000ebe8:	ee c8 00 14 	sub	r8,r7,20
8000ebec:	12 9b       	mov	r11,r9
8000ebee:	10 9c       	mov	r12,r8
8000ebf0:	fe b0 f6 12 	rcall	8000d814 <byte_swap_4>
	_mav_put_int32_t(buf, 4, value);
8000ebf4:	ee c9 00 24 	sub	r9,r7,36
8000ebf8:	ee c8 00 14 	sub	r8,r7,20
8000ebfc:	2f c8       	sub	r8,-4
8000ebfe:	12 9b       	mov	r11,r9
8000ec00:	10 9c       	mov	r12,r8
8000ec02:	fe b0 f6 09 	rcall	8000d814 <byte_swap_4>
	_mav_put_char_array(buf, 8, name, 10);
8000ec06:	ee c8 00 14 	sub	r8,r7,20
8000ec0a:	30 a9       	mov	r9,10
8000ec0c:	ee fa ff e0 	ld.w	r10,r7[-32]
8000ec10:	30 8b       	mov	r11,8
8000ec12:	10 9c       	mov	r12,r8
8000ec14:	fe b0 f6 a2 	rcall	8000d958 <_mav_put_char_array>
#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_NAMED_VALUE_INT, buf, MAVLINK_MSG_ID_NAMED_VALUE_INT_LEN, MAVLINK_MSG_ID_NAMED_VALUE_INT_CRC);
8000ec18:	ee ca 00 14 	sub	r10,r7,20
8000ec1c:	32 c8       	mov	r8,44
8000ec1e:	31 29       	mov	r9,18
8000ec20:	e0 6b 00 fc 	mov	r11,252
8000ec24:	ee fc ff e8 	ld.w	r12,r7[-24]
8000ec28:	fe b0 f5 2e 	rcall	8000d684 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_NAMED_VALUE_INT, (const char *)&packet, MAVLINK_MSG_ID_NAMED_VALUE_INT_LEN, MAVLINK_MSG_ID_NAMED_VALUE_INT_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_NAMED_VALUE_INT, (const char *)&packet, MAVLINK_MSG_ID_NAMED_VALUE_INT_LEN);
#endif
#endif
}
8000ec2c:	2f 7d       	sub	sp,-36
8000ec2e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000ec32:	00 00       	add	r0,r0
8000ec34:	80 00       	ld.sh	r0,r0[0x0]
8000ec36:	ea 56 eb cd 	cp.w	r6,781261

8000ec38 <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
8000ec38:	eb cd 40 c0 	pushm	r6-r7,lr
8000ec3c:	1a 97       	mov	r7,sp
8000ec3e:	20 6d       	sub	sp,24
8000ec40:	49 e6       	lddpc	r6,8000ecb8 <interpolate+0x80>
8000ec42:	1e 26       	rsub	r6,pc
8000ec44:	ef 4c ff f8 	st.w	r7[-8],r12
8000ec48:	ef 4b ff f4 	st.w	r7[-12],r11
8000ec4c:	ef 4a ff f0 	st.w	r7[-16],r10
8000ec50:	ef 49 ff ec 	st.w	r7[-20],r9
8000ec54:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
8000ec58:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000ec5c:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000ec60:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
8000ec64:	c0 41       	brne	8000ec6c <interpolate+0x34>
	{
		return y1;
8000ec66:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000ec6a:	c2 38       	rjmp	8000ecb0 <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
8000ec6c:	ee f9 ff e8 	ld.w	r9,r7[-24]
8000ec70:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000ec74:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8000ec78:	ee fa ff f8 	ld.w	r10,r7[-8]
8000ec7c:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000ec80:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
8000ec84:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8000ec88:	ee fa ff f0 	ld.w	r10,r7[-16]
8000ec8c:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000ec90:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8000ec94:	12 9b       	mov	r11,r9
8000ec96:	10 9c       	mov	r12,r8
8000ec98:	f0 16 00 08 	mcall	r6[32]
8000ec9c:	18 98       	mov	r8,r12
8000ec9e:	10 99       	mov	r9,r8
8000eca0:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000eca4:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8000eca8:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
8000ecac:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
8000ecb0:	10 9c       	mov	r12,r8
8000ecb2:	2f ad       	sub	sp,-24
8000ecb4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000ecb8:	80 00       	ld.sh	r0,r0[0x0]
8000ecba:	ea c6 eb cd 	sub	r6,r5,-5171

8000ecbc <mavlink_send_heartbeat>:
#include "mavlink_waypoint_handler.h"
#include "neighbor_selection.h"

central_data_t *centralData;

void mavlink_send_heartbeat(void) {
8000ecbc:	eb cd 40 c0 	pushm	r6-r7,lr
8000ecc0:	1a 97       	mov	r7,sp
8000ecc2:	20 1d       	sub	sp,4
8000ecc4:	48 e6       	lddpc	r6,8000ecfc <mavlink_send_heartbeat+0x40>
8000ecc6:	1e 26       	rsub	r6,pc

	central_data_t *centralData=get_central_data();
8000ecc8:	f0 16 00 32 	mcall	r6[200]
8000eccc:	18 98       	mov	r8,r12
8000ecce:	ef 48 ff fc 	st.w	r7[-4],r8

	mavlink_msg_heartbeat_send(MAVLINK_COMM_0, MAV_TYPE_QUADROTOR, MAV_AUTOPILOT_GENERIC, centralData->mav_mode, 0, centralData->mav_state);
8000ecd2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ecd6:	f1 38 10 bd 	ld.ub	r8,r8[4285]
8000ecda:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000ecde:	f3 39 10 bc 	ld.ub	r9,r9[4284]
8000ece2:	1a d8       	st.w	--sp,r8
8000ece4:	30 08       	mov	r8,0
8000ece6:	30 0a       	mov	r10,0
8000ece8:	30 2b       	mov	r11,2
8000ecea:	30 0c       	mov	r12,0
8000ecec:	fe b0 f6 98 	rcall	8000da1c <mavlink_msg_heartbeat_send>
8000ecf0:	2f fd       	sub	sp,-4
														//(int)(1000.0*get_internal_rail()), 
														//(int)(1000.0*get_6V_analog_rail()), 
														//(int)(1000.0*get_5V_analog_rail()),
														//0.0, 0.0, 0.0, 0.0);
														
	trigger_analog_monitor();
8000ecf2:	f0 16 01 ea 	mcall	r6[1960]
	
	//dbg_print("Send hearbeat.\n");
}
8000ecf6:	2f fd       	sub	sp,-4
8000ecf8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000ecfc:	80 00       	ld.sh	r0,r0[0x0]
8000ecfe:	eb 4a eb cd 	st.w	r5[-5171],r10

8000ed00 <mavlink_send_raw_imu>:

void mavlink_send_raw_imu(void) {
8000ed00:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
8000ed04:	1a 97       	mov	r7,sp
8000ed06:	20 6d       	sub	sp,24
8000ed08:	4b e6       	lddpc	r6,8000ee00 <mavlink_send_raw_imu+0x100>
8000ed0a:	1e 26       	rsub	r6,pc
	centralData->imu1.raw_channels[GYRO_OFFSET+IMU_X], 
	centralData->imu1.raw_channels[GYRO_OFFSET+IMU_Y], 
	centralData->imu1.raw_channels[GYRO_OFFSET+IMU_Z], 
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_X], 
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_Y], 
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_Z]
8000ed0c:	ec f8 00 00 	ld.w	r8,r6[0]
8000ed10:	70 08       	ld.w	r8,r8[0x0]
8000ed12:	f0 f8 00 ec 	ld.w	r8,r8[236]
	
	//dbg_print("Send hearbeat.\n");
}

void mavlink_send_raw_imu(void) {
	mavlink_msg_raw_imu_send(MAVLINK_COMM_0, get_micros(), 
8000ed16:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000ed1a:	5c 88       	casts.h	r8
8000ed1c:	ef 48 ff e8 	st.w	r7[-24],r8
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_Z], 
	centralData->imu1.raw_channels[GYRO_OFFSET+IMU_X], 
	centralData->imu1.raw_channels[GYRO_OFFSET+IMU_Y], 
	centralData->imu1.raw_channels[GYRO_OFFSET+IMU_Z], 
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_X], 
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_Y], 
8000ed20:	ec f8 00 00 	ld.w	r8,r6[0]
8000ed24:	70 08       	ld.w	r8,r8[0x0]
8000ed26:	f0 f8 00 e8 	ld.w	r8,r8[232]
	
	//dbg_print("Send hearbeat.\n");
}

void mavlink_send_raw_imu(void) {
	mavlink_msg_raw_imu_send(MAVLINK_COMM_0, get_micros(), 
8000ed2a:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000ed2e:	5c 88       	casts.h	r8
8000ed30:	ef 48 ff ec 	st.w	r7[-20],r8
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_Y], 
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_Z], 
	centralData->imu1.raw_channels[GYRO_OFFSET+IMU_X], 
	centralData->imu1.raw_channels[GYRO_OFFSET+IMU_Y], 
	centralData->imu1.raw_channels[GYRO_OFFSET+IMU_Z], 
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_X], 
8000ed34:	ec f8 00 00 	ld.w	r8,r6[0]
8000ed38:	70 08       	ld.w	r8,r8[0x0]
8000ed3a:	f0 f8 00 e4 	ld.w	r8,r8[228]
	
	//dbg_print("Send hearbeat.\n");
}

void mavlink_send_raw_imu(void) {
	mavlink_msg_raw_imu_send(MAVLINK_COMM_0, get_micros(), 
8000ed3e:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000ed42:	5c 88       	casts.h	r8
8000ed44:	ef 48 ff f0 	st.w	r7[-16],r8
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_X], 
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_Y], 
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_Z], 
	centralData->imu1.raw_channels[GYRO_OFFSET+IMU_X], 
	centralData->imu1.raw_channels[GYRO_OFFSET+IMU_Y], 
	centralData->imu1.raw_channels[GYRO_OFFSET+IMU_Z], 
8000ed48:	ec f8 00 00 	ld.w	r8,r6[0]
8000ed4c:	70 08       	ld.w	r8,r8[0x0]
8000ed4e:	f0 f8 00 d4 	ld.w	r8,r8[212]
	
	//dbg_print("Send hearbeat.\n");
}

void mavlink_send_raw_imu(void) {
	mavlink_msg_raw_imu_send(MAVLINK_COMM_0, get_micros(), 
8000ed52:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000ed56:	5c 88       	casts.h	r8
8000ed58:	ef 48 ff f4 	st.w	r7[-12],r8
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_X], 
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_Y], 
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_Z], 
	centralData->imu1.raw_channels[GYRO_OFFSET+IMU_X], 
	centralData->imu1.raw_channels[GYRO_OFFSET+IMU_Y], 
8000ed5c:	ec f8 00 00 	ld.w	r8,r6[0]
8000ed60:	70 08       	ld.w	r8,r8[0x0]
8000ed62:	f0 f8 00 d0 	ld.w	r8,r8[208]
	
	//dbg_print("Send hearbeat.\n");
}

void mavlink_send_raw_imu(void) {
	mavlink_msg_raw_imu_send(MAVLINK_COMM_0, get_micros(), 
8000ed66:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000ed6a:	5c 88       	casts.h	r8
8000ed6c:	ef 48 ff f8 	st.w	r7[-8],r8
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_X], 
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_Y], 
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_Z], 
	centralData->imu1.raw_channels[GYRO_OFFSET+IMU_X], 
8000ed70:	ec f8 00 00 	ld.w	r8,r6[0]
8000ed74:	70 08       	ld.w	r8,r8[0x0]
8000ed76:	f0 f8 00 cc 	ld.w	r8,r8[204]
	
	//dbg_print("Send hearbeat.\n");
}

void mavlink_send_raw_imu(void) {
	mavlink_msg_raw_imu_send(MAVLINK_COMM_0, get_micros(), 
8000ed7a:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000ed7e:	5c 88       	casts.h	r8
8000ed80:	ef 48 ff fc 	st.w	r7[-4],r8
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_X], 
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_Y], 
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_Z], 
8000ed84:	ec f8 00 00 	ld.w	r8,r6[0]
8000ed88:	70 08       	ld.w	r8,r8[0x0]
8000ed8a:	f0 f8 00 e0 	ld.w	r8,r8[224]
	
	//dbg_print("Send hearbeat.\n");
}

void mavlink_send_raw_imu(void) {
	mavlink_msg_raw_imu_send(MAVLINK_COMM_0, get_micros(), 
8000ed8e:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000ed92:	5c 88       	casts.h	r8
8000ed94:	10 90       	mov	r0,r8
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_X], 
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_Y], 
8000ed96:	ec f8 00 00 	ld.w	r8,r6[0]
8000ed9a:	70 08       	ld.w	r8,r8[0x0]
8000ed9c:	f0 f8 00 dc 	ld.w	r8,r8[220]
	
	//dbg_print("Send hearbeat.\n");
}

void mavlink_send_raw_imu(void) {
	mavlink_msg_raw_imu_send(MAVLINK_COMM_0, get_micros(), 
8000eda0:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000eda4:	5c 88       	casts.h	r8
8000eda6:	10 91       	mov	r1,r8
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_X], 
8000eda8:	ec f8 00 00 	ld.w	r8,r6[0]
8000edac:	70 08       	ld.w	r8,r8[0x0]
8000edae:	f0 f8 00 d8 	ld.w	r8,r8[216]
	
	//dbg_print("Send hearbeat.\n");
}

void mavlink_send_raw_imu(void) {
	mavlink_msg_raw_imu_send(MAVLINK_COMM_0, get_micros(), 
8000edb2:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000edb6:	5c 88       	casts.h	r8
8000edb8:	10 95       	mov	r5,r8
8000edba:	f0 16 00 27 	mcall	r6[156]
8000edbe:	18 98       	mov	r8,r12
8000edc0:	10 92       	mov	r2,r8
8000edc2:	30 03       	mov	r3,0
8000edc4:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000edc8:	1a d8       	st.w	--sp,r8
8000edca:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000edce:	1a d8       	st.w	--sp,r8
8000edd0:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000edd4:	1a d8       	st.w	--sp,r8
8000edd6:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000edda:	1a d8       	st.w	--sp,r8
8000eddc:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000ede0:	1a d8       	st.w	--sp,r8
8000ede2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ede6:	1a d8       	st.w	--sp,r8
8000ede8:	1a d0       	st.w	--sp,r0
8000edea:	02 98       	mov	r8,r1
8000edec:	0a 99       	mov	r9,r5
8000edee:	04 9a       	mov	r10,r2
8000edf0:	06 9b       	mov	r11,r3
8000edf2:	30 0c       	mov	r12,0
8000edf4:	fe b0 f7 58 	rcall	8000dca4 <mavlink_msg_raw_imu_send>
8000edf8:	2f 9d       	sub	sp,-28
	centralData->imu1.raw_channels[GYRO_OFFSET+IMU_Z], 
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_X], 
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_Y], 
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_Z]
	);
}
8000edfa:	2f ad       	sub	sp,-24
8000edfc:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
8000ee00:	80 00       	ld.sh	r0,r0[0x0]
8000ee02:	eb 8e       	*unknown*

8000ee04 <mavlink_send_scaled_imu>:

void mavlink_send_scaled_imu(void) {
8000ee04:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
8000ee08:	1a 97       	mov	r7,sp
8000ee0a:	20 4d       	sub	sp,16
8000ee0c:	4c 96       	lddpc	r6,8000ef30 <mavlink_send_scaled_imu+0x12c>
8000ee0e:	1e 26       	rsub	r6,pc
	//1000*centralData->imu1.attitude.mag[IMU_X],
	//1000*centralData->imu1.attitude.mag[IMU_Y],
	//1000*centralData->imu1.attitude.mag[IMU_Z]
	1000*centralData->imu1.attitude.north_vec.v[0],
	1000*centralData->imu1.attitude.north_vec.v[1],
	1000*centralData->imu1.attitude.north_vec.v[2]
8000ee10:	ec f8 00 00 	ld.w	r8,r6[0]
8000ee14:	70 08       	ld.w	r8,r8[0x0]
8000ee16:	70 b9       	ld.w	r9,r8[0x2c]
8000ee18:	fc 18 44 7a 	movh	r8,0x447a
8000ee1c:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_Z]
	);
}

void mavlink_send_scaled_imu(void) {
	mavlink_msg_scaled_imu_send(MAVLINK_COMM_0, get_millis(),
8000ee20:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000ee24:	5c 88       	casts.h	r8
8000ee26:	ef 48 ff f0 	st.w	r7[-16],r8
	1000*centralData->imu1.attitude.om[IMU_Z], 
	//1000*centralData->imu1.attitude.mag[IMU_X],
	//1000*centralData->imu1.attitude.mag[IMU_Y],
	//1000*centralData->imu1.attitude.mag[IMU_Z]
	1000*centralData->imu1.attitude.north_vec.v[0],
	1000*centralData->imu1.attitude.north_vec.v[1],
8000ee2a:	ec f8 00 00 	ld.w	r8,r6[0]
8000ee2e:	70 08       	ld.w	r8,r8[0x0]
8000ee30:	70 a9       	ld.w	r9,r8[0x28]
8000ee32:	fc 18 44 7a 	movh	r8,0x447a
8000ee36:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_Z]
	);
}

void mavlink_send_scaled_imu(void) {
	mavlink_msg_scaled_imu_send(MAVLINK_COMM_0, get_millis(),
8000ee3a:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000ee3e:	5c 88       	casts.h	r8
8000ee40:	ef 48 ff f4 	st.w	r7[-12],r8
	1000*centralData->imu1.attitude.om[IMU_Y], 
	1000*centralData->imu1.attitude.om[IMU_Z], 
	//1000*centralData->imu1.attitude.mag[IMU_X],
	//1000*centralData->imu1.attitude.mag[IMU_Y],
	//1000*centralData->imu1.attitude.mag[IMU_Z]
	1000*centralData->imu1.attitude.north_vec.v[0],
8000ee44:	ec f8 00 00 	ld.w	r8,r6[0]
8000ee48:	70 08       	ld.w	r8,r8[0x0]
8000ee4a:	70 99       	ld.w	r9,r8[0x24]
8000ee4c:	fc 18 44 7a 	movh	r8,0x447a
8000ee50:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_Z]
	);
}

void mavlink_send_scaled_imu(void) {
	mavlink_msg_scaled_imu_send(MAVLINK_COMM_0, get_millis(),
8000ee54:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000ee58:	5c 88       	casts.h	r8
8000ee5a:	ef 48 ff f8 	st.w	r7[-8],r8
	1000*centralData->imu1.attitude.a [IMU_X],
	1000*centralData->imu1.attitude.a [IMU_Y], 
	1000*centralData->imu1.attitude.a [IMU_Z], 
	1000*centralData->imu1.attitude.om[IMU_X], 
	1000*centralData->imu1.attitude.om[IMU_Y], 
	1000*centralData->imu1.attitude.om[IMU_Z], 
8000ee5e:	ec f8 00 00 	ld.w	r8,r6[0]
8000ee62:	70 08       	ld.w	r8,r8[0x0]
8000ee64:	f0 f9 00 80 	ld.w	r9,r8[128]
8000ee68:	fc 18 44 7a 	movh	r8,0x447a
8000ee6c:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_Z]
	);
}

void mavlink_send_scaled_imu(void) {
	mavlink_msg_scaled_imu_send(MAVLINK_COMM_0, get_millis(),
8000ee70:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000ee74:	5c 88       	casts.h	r8
8000ee76:	ef 48 ff fc 	st.w	r7[-4],r8
	1000*centralData->imu1.attitude.a [IMU_X],
	1000*centralData->imu1.attitude.a [IMU_Y], 
	1000*centralData->imu1.attitude.a [IMU_Z], 
	1000*centralData->imu1.attitude.om[IMU_X], 
	1000*centralData->imu1.attitude.om[IMU_Y], 
8000ee7a:	ec f8 00 00 	ld.w	r8,r6[0]
8000ee7e:	70 08       	ld.w	r8,r8[0x0]
8000ee80:	71 f9       	ld.w	r9,r8[0x7c]
8000ee82:	fc 18 44 7a 	movh	r8,0x447a
8000ee86:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_Z]
	);
}

void mavlink_send_scaled_imu(void) {
	mavlink_msg_scaled_imu_send(MAVLINK_COMM_0, get_millis(),
8000ee8a:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000ee8e:	5c 88       	casts.h	r8
8000ee90:	10 90       	mov	r0,r8
	1000*centralData->imu1.attitude.a [IMU_X],
	1000*centralData->imu1.attitude.a [IMU_Y], 
	1000*centralData->imu1.attitude.a [IMU_Z], 
	1000*centralData->imu1.attitude.om[IMU_X], 
8000ee92:	ec f8 00 00 	ld.w	r8,r6[0]
8000ee96:	70 08       	ld.w	r8,r8[0x0]
8000ee98:	71 e9       	ld.w	r9,r8[0x78]
8000ee9a:	fc 18 44 7a 	movh	r8,0x447a
8000ee9e:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_Z]
	);
}

void mavlink_send_scaled_imu(void) {
	mavlink_msg_scaled_imu_send(MAVLINK_COMM_0, get_millis(),
8000eea2:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000eea6:	5c 88       	casts.h	r8
8000eea8:	10 91       	mov	r1,r8
	1000*centralData->imu1.attitude.a [IMU_X],
	1000*centralData->imu1.attitude.a [IMU_Y], 
	1000*centralData->imu1.attitude.a [IMU_Z], 
8000eeaa:	ec f8 00 00 	ld.w	r8,r6[0]
8000eeae:	70 08       	ld.w	r8,r8[0x0]
8000eeb0:	f0 f9 00 8c 	ld.w	r9,r8[140]
8000eeb4:	fc 18 44 7a 	movh	r8,0x447a
8000eeb8:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_Z]
	);
}

void mavlink_send_scaled_imu(void) {
	mavlink_msg_scaled_imu_send(MAVLINK_COMM_0, get_millis(),
8000eebc:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000eec0:	5c 88       	casts.h	r8
8000eec2:	10 92       	mov	r2,r8
	1000*centralData->imu1.attitude.a [IMU_X],
	1000*centralData->imu1.attitude.a [IMU_Y], 
8000eec4:	ec f8 00 00 	ld.w	r8,r6[0]
8000eec8:	70 08       	ld.w	r8,r8[0x0]
8000eeca:	f0 f9 00 88 	ld.w	r9,r8[136]
8000eece:	fc 18 44 7a 	movh	r8,0x447a
8000eed2:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_Z]
	);
}

void mavlink_send_scaled_imu(void) {
	mavlink_msg_scaled_imu_send(MAVLINK_COMM_0, get_millis(),
8000eed6:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000eeda:	5c 88       	casts.h	r8
8000eedc:	10 93       	mov	r3,r8
	1000*centralData->imu1.attitude.a [IMU_X],
8000eede:	ec f8 00 00 	ld.w	r8,r6[0]
8000eee2:	70 08       	ld.w	r8,r8[0x0]
8000eee4:	f0 f9 00 84 	ld.w	r9,r8[132]
8000eee8:	fc 18 44 7a 	movh	r8,0x447a
8000eeec:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_Z]
	);
}

void mavlink_send_scaled_imu(void) {
	mavlink_msg_scaled_imu_send(MAVLINK_COMM_0, get_millis(),
8000eef0:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000eef4:	5c 88       	casts.h	r8
8000eef6:	10 95       	mov	r5,r8
8000eef8:	f0 16 00 0f 	mcall	r6[60]
8000eefc:	18 9b       	mov	r11,r12
8000eefe:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000ef02:	1a d8       	st.w	--sp,r8
8000ef04:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000ef08:	1a d8       	st.w	--sp,r8
8000ef0a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000ef0e:	1a d8       	st.w	--sp,r8
8000ef10:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ef14:	1a d8       	st.w	--sp,r8
8000ef16:	1a d0       	st.w	--sp,r0
8000ef18:	1a d1       	st.w	--sp,r1
8000ef1a:	04 98       	mov	r8,r2
8000ef1c:	06 99       	mov	r9,r3
8000ef1e:	0a 9a       	mov	r10,r5
8000ef20:	30 0c       	mov	r12,0
8000ef22:	fe b0 f6 2f 	rcall	8000db80 <mavlink_msg_scaled_imu_send>
8000ef26:	2f ad       	sub	sp,-24
	1000*centralData->imu1.attitude.north_vec.v[2]
	//1000*centralData->imu1.attitude.up_vec.v[0],
	//1000*centralData->imu1.attitude.up_vec.v[1],
	//1000*centralData->imu1.attitude.up_vec.v[2]
	);
}
8000ef28:	2f cd       	sub	sp,-16
8000ef2a:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
8000ef2e:	00 00       	add	r0,r0
8000ef30:	80 00       	ld.sh	r0,r0[0x0]
8000ef32:	ec 92 eb cd 	brhs	801cc6cc <_data_lma+0x19a884>

8000ef34 <mavlink_send_rpy_rates_error>:
void  mavlink_send_rpy_rates_error(void) {
8000ef34:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
8000ef38:	1a 97       	mov	r7,sp
8000ef3a:	20 1d       	sub	sp,4
8000ef3c:	49 16       	lddpc	r6,8000ef80 <mavlink_send_rpy_rates_error+0x4c>
8000ef3e:	1e 26       	rsub	r6,pc
	Stabiliser_t *rate_stab = &centralData->stabiliser_stack.rate_stabiliser;
8000ef40:	ec f8 00 00 	ld.w	r8,r6[0]
8000ef44:	70 08       	ld.w	r8,r8[0x0]
8000ef46:	f0 c8 fe 60 	sub	r8,r8,-416
8000ef4a:	ef 48 ff fc 	st.w	r7[-4],r8
	mavlink_msg_roll_pitch_yaw_rates_thrust_setpoint_send(MAVLINK_COMM_0, get_millis(), rate_stab->rpy_controller[0].error, rate_stab->rpy_controller[1].error,rate_stab->rpy_controller[2].error,0 );
8000ef4e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ef52:	f0 f2 00 bc 	ld.w	r2,r8[188]
8000ef56:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ef5a:	71 e3       	ld.w	r3,r8[0x78]
8000ef5c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ef60:	70 d5       	ld.w	r5,r8[0x34]
8000ef62:	f0 16 00 0f 	mcall	r6[60]
8000ef66:	18 9b       	mov	r11,r12
8000ef68:	30 08       	mov	r8,0
8000ef6a:	1a d8       	st.w	--sp,r8
8000ef6c:	04 98       	mov	r8,r2
8000ef6e:	06 99       	mov	r9,r3
8000ef70:	0a 9a       	mov	r10,r5
8000ef72:	30 0c       	mov	r12,0
8000ef74:	fe b0 fc e6 	rcall	8000e940 <mavlink_msg_roll_pitch_yaw_rates_thrust_setpoint_send>
8000ef78:	2f fd       	sub	sp,-4
}
8000ef7a:	2f fd       	sub	sp,-4
8000ef7c:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
8000ef80:	80 00       	ld.sh	r0,r0[0x0]
8000ef82:	ed c2 eb cd 	stmts	r2,r0,r2-r3,r6-r9,r11,sp-pc

8000ef84 <mavlink_send_rpy_speed_thrust_setpoint>:
void  mavlink_send_rpy_speed_thrust_setpoint(void) {
8000ef84:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
8000ef88:	1a 97       	mov	r7,sp
8000ef8a:	20 1d       	sub	sp,4
8000ef8c:	49 16       	lddpc	r6,8000efd0 <mavlink_send_rpy_speed_thrust_setpoint+0x4c>
8000ef8e:	1e 26       	rsub	r6,pc
	Stabiliser_t *rate_stab = &centralData->stabiliser_stack.rate_stabiliser;
8000ef90:	ec f8 00 00 	ld.w	r8,r6[0]
8000ef94:	70 08       	ld.w	r8,r8[0x0]
8000ef96:	f0 c8 fe 60 	sub	r8,r8,-416
8000ef9a:	ef 48 ff fc 	st.w	r7[-4],r8
	mavlink_msg_roll_pitch_yaw_speed_thrust_setpoint_send(MAVLINK_COMM_0, get_millis(), rate_stab->rpy_controller[0].output, rate_stab->rpy_controller[1].output,rate_stab->rpy_controller[2].output,0 );
8000ef9e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000efa2:	f0 f2 00 b8 	ld.w	r2,r8[184]
8000efa6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000efaa:	71 d3       	ld.w	r3,r8[0x74]
8000efac:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000efb0:	70 c5       	ld.w	r5,r8[0x30]
8000efb2:	f0 16 00 0f 	mcall	r6[60]
8000efb6:	18 9b       	mov	r11,r12
8000efb8:	30 08       	mov	r8,0
8000efba:	1a d8       	st.w	--sp,r8
8000efbc:	04 98       	mov	r8,r2
8000efbe:	06 99       	mov	r9,r3
8000efc0:	0a 9a       	mov	r10,r5
8000efc2:	30 0c       	mov	r12,0
8000efc4:	fe b0 fa ec 	rcall	8000e59c <mavlink_msg_roll_pitch_yaw_speed_thrust_setpoint_send>
8000efc8:	2f fd       	sub	sp,-4
}
8000efca:	2f fd       	sub	sp,-4
8000efcc:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
8000efd0:	80 00       	ld.sh	r0,r0[0x0]
8000efd2:	ee 12 eb cd 	eorh	r2,0xebcd

8000efd4 <mavlink_send_rpy_thrust_setpoint>:
void mavlink_send_rpy_thrust_setpoint(void) {
8000efd4:	eb cd 40 ee 	pushm	r1-r3,r5-r7,lr
8000efd8:	1a 97       	mov	r7,sp
8000efda:	49 26       	lddpc	r6,8000f020 <mavlink_send_rpy_thrust_setpoint+0x4c>
8000efdc:	1e 26       	rsub	r6,pc
	
	// Controls output
	//mavlink_msg_roll_pitch_yaw_thrust_setpoint_send(mavlink_channel_t chan, uint32_t time_boot_ms, float roll, float pitch, float yaw, float thrust)
	mavlink_msg_roll_pitch_yaw_thrust_setpoint_send(MAVLINK_COMM_0, get_millis(), centralData->controls.rpy[ROLL], centralData->controls.rpy[PITCH], centralData->controls.rpy[YAW], centralData->controls.thrust);
8000efde:	ec f8 00 00 	ld.w	r8,r6[0]
8000efe2:	70 08       	ld.w	r8,r8[0x0]
8000efe4:	f0 f1 01 54 	ld.w	r1,r8[340]
8000efe8:	ec f8 00 00 	ld.w	r8,r6[0]
8000efec:	70 08       	ld.w	r8,r8[0x0]
8000efee:	f0 f2 01 50 	ld.w	r2,r8[336]
8000eff2:	ec f8 00 00 	ld.w	r8,r6[0]
8000eff6:	70 08       	ld.w	r8,r8[0x0]
8000eff8:	f0 f3 01 4c 	ld.w	r3,r8[332]
8000effc:	ec f8 00 00 	ld.w	r8,r6[0]
8000f000:	70 08       	ld.w	r8,r8[0x0]
8000f002:	f0 f5 01 48 	ld.w	r5,r8[328]
8000f006:	f0 16 00 0f 	mcall	r6[60]
8000f00a:	18 9b       	mov	r11,r12
8000f00c:	1a d1       	st.w	--sp,r1
8000f00e:	04 98       	mov	r8,r2
8000f010:	06 99       	mov	r9,r3
8000f012:	0a 9a       	mov	r10,r5
8000f014:	30 0c       	mov	r12,0
8000f016:	fe b0 fa 77 	rcall	8000e504 <mavlink_msg_roll_pitch_yaw_thrust_setpoint_send>
8000f01a:	2f fd       	sub	sp,-4
}
8000f01c:	e3 cd 80 ee 	ldm	sp++,r1-r3,r5-r7,pc
8000f020:	80 00       	ld.sh	r0,r0[0x0]
8000f022:	ee 60 eb cd 	mov	r0,977869

8000f024 <mavlink_send_servo_output>:

void mavlink_send_servo_output(void) {
8000f024:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
8000f028:	1a 97       	mov	r7,sp
8000f02a:	20 4d       	sub	sp,16
8000f02c:	4c b6       	lddpc	r6,8000f158 <mavlink_send_servo_output+0x134>
8000f02e:	1e 26       	rsub	r6,pc
	Stabiliser_t *rate_stab = &centralData->stabiliser_stack.rate_stabiliser;
8000f030:	ec f8 00 00 	ld.w	r8,r6[0]
8000f034:	70 08       	ld.w	r8,r8[0x0]
8000f036:	f0 c8 fe 60 	sub	r8,r8,-416
8000f03a:	ef 48 ff fc 	st.w	r7[-4],r8
	(uint16_t)(centralData->servos[2].value+1500),
	(uint16_t)(centralData->servos[3].value+1500),
	1000*rate_stab->output.rpy[0]+1000, 
	1000*rate_stab->output.rpy[1]+1000,
	1000*rate_stab->output.rpy[2]+1000,
	1000*rate_stab->output.thrust+1000
8000f03e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000f042:	f0 f9 01 1c 	ld.w	r9,r8[284]
8000f046:	fc 18 44 7a 	movh	r8,0x447a
8000f04a:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000f04e:	fc 18 44 7a 	movh	r8,0x447a
8000f052:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
	mavlink_msg_roll_pitch_yaw_thrust_setpoint_send(MAVLINK_COMM_0, get_millis(), centralData->controls.rpy[ROLL], centralData->controls.rpy[PITCH], centralData->controls.rpy[YAW], centralData->controls.thrust);
}

void mavlink_send_servo_output(void) {
	Stabiliser_t *rate_stab = &centralData->stabiliser_stack.rate_stabiliser;
	mavlink_msg_servo_output_raw_send(MAVLINK_COMM_0, get_micros(), 0, 
8000f056:	e5 a9 08 08 	cop	cp0,cr8,cr0,cr8,0x52
8000f05a:	5c 88       	casts.h	r8
8000f05c:	5c 78       	castu.h	r8
8000f05e:	ef 48 ff f0 	st.w	r7[-16],r8
	(uint16_t)(centralData->servos[1].value+1500),
	(uint16_t)(centralData->servos[2].value+1500),
	(uint16_t)(centralData->servos[3].value+1500),
	1000*rate_stab->output.rpy[0]+1000, 
	1000*rate_stab->output.rpy[1]+1000,
	1000*rate_stab->output.rpy[2]+1000,
8000f062:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000f066:	f0 f9 01 18 	ld.w	r9,r8[280]
8000f06a:	fc 18 44 7a 	movh	r8,0x447a
8000f06e:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000f072:	fc 18 44 7a 	movh	r8,0x447a
8000f076:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
	mavlink_msg_roll_pitch_yaw_thrust_setpoint_send(MAVLINK_COMM_0, get_millis(), centralData->controls.rpy[ROLL], centralData->controls.rpy[PITCH], centralData->controls.rpy[YAW], centralData->controls.thrust);
}

void mavlink_send_servo_output(void) {
	Stabiliser_t *rate_stab = &centralData->stabiliser_stack.rate_stabiliser;
	mavlink_msg_servo_output_raw_send(MAVLINK_COMM_0, get_micros(), 0, 
8000f07a:	e5 a9 08 08 	cop	cp0,cr8,cr0,cr8,0x52
8000f07e:	5c 88       	casts.h	r8
8000f080:	5c 78       	castu.h	r8
8000f082:	ef 48 ff f4 	st.w	r7[-12],r8
	(uint16_t)(centralData->servos[0].value+1500),
	(uint16_t)(centralData->servos[1].value+1500),
	(uint16_t)(centralData->servos[2].value+1500),
	(uint16_t)(centralData->servos[3].value+1500),
	1000*rate_stab->output.rpy[0]+1000, 
	1000*rate_stab->output.rpy[1]+1000,
8000f086:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000f08a:	f0 f9 01 14 	ld.w	r9,r8[276]
8000f08e:	fc 18 44 7a 	movh	r8,0x447a
8000f092:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000f096:	fc 18 44 7a 	movh	r8,0x447a
8000f09a:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
	mavlink_msg_roll_pitch_yaw_thrust_setpoint_send(MAVLINK_COMM_0, get_millis(), centralData->controls.rpy[ROLL], centralData->controls.rpy[PITCH], centralData->controls.rpy[YAW], centralData->controls.thrust);
}

void mavlink_send_servo_output(void) {
	Stabiliser_t *rate_stab = &centralData->stabiliser_stack.rate_stabiliser;
	mavlink_msg_servo_output_raw_send(MAVLINK_COMM_0, get_micros(), 0, 
8000f09e:	e5 a9 08 08 	cop	cp0,cr8,cr0,cr8,0x52
8000f0a2:	5c 88       	casts.h	r8
8000f0a4:	5c 78       	castu.h	r8
8000f0a6:	ef 48 ff f8 	st.w	r7[-8],r8
	(uint16_t)(centralData->servos[0].value+1500),
	(uint16_t)(centralData->servos[1].value+1500),
	(uint16_t)(centralData->servos[2].value+1500),
	(uint16_t)(centralData->servos[3].value+1500),
	1000*rate_stab->output.rpy[0]+1000, 
8000f0aa:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000f0ae:	f0 f9 01 10 	ld.w	r9,r8[272]
8000f0b2:	fc 18 44 7a 	movh	r8,0x447a
8000f0b6:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000f0ba:	fc 18 44 7a 	movh	r8,0x447a
8000f0be:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
	mavlink_msg_roll_pitch_yaw_thrust_setpoint_send(MAVLINK_COMM_0, get_millis(), centralData->controls.rpy[ROLL], centralData->controls.rpy[PITCH], centralData->controls.rpy[YAW], centralData->controls.thrust);
}

void mavlink_send_servo_output(void) {
	Stabiliser_t *rate_stab = &centralData->stabiliser_stack.rate_stabiliser;
	mavlink_msg_servo_output_raw_send(MAVLINK_COMM_0, get_micros(), 0, 
8000f0c2:	e5 a9 08 08 	cop	cp0,cr8,cr0,cr8,0x52
8000f0c6:	5c 88       	casts.h	r8
8000f0c8:	e1 d8 c0 10 	bfextu	r0,r8,0x0,0x10
	(uint16_t)(centralData->servos[0].value+1500),
	(uint16_t)(centralData->servos[1].value+1500),
	(uint16_t)(centralData->servos[2].value+1500),
	(uint16_t)(centralData->servos[3].value+1500),
8000f0cc:	ec f8 00 00 	ld.w	r8,r6[0]
8000f0d0:	70 08       	ld.w	r8,r8[0x0]
8000f0d2:	f0 f8 07 1c 	ld.w	r8,r8[1820]
8000f0d6:	5c 88       	casts.h	r8
8000f0d8:	f0 c8 fa 24 	sub	r8,r8,-1500
8000f0dc:	5c 88       	casts.h	r8
	mavlink_msg_roll_pitch_yaw_thrust_setpoint_send(MAVLINK_COMM_0, get_millis(), centralData->controls.rpy[ROLL], centralData->controls.rpy[PITCH], centralData->controls.rpy[YAW], centralData->controls.thrust);
}

void mavlink_send_servo_output(void) {
	Stabiliser_t *rate_stab = &centralData->stabiliser_stack.rate_stabiliser;
	mavlink_msg_servo_output_raw_send(MAVLINK_COMM_0, get_micros(), 0, 
8000f0de:	e3 d8 c0 10 	bfextu	r1,r8,0x0,0x10
	(uint16_t)(centralData->servos[0].value+1500),
	(uint16_t)(centralData->servos[1].value+1500),
	(uint16_t)(centralData->servos[2].value+1500),
8000f0e2:	ec f8 00 00 	ld.w	r8,r6[0]
8000f0e6:	70 08       	ld.w	r8,r8[0x0]
8000f0e8:	f0 f8 07 0c 	ld.w	r8,r8[1804]
8000f0ec:	5c 88       	casts.h	r8
8000f0ee:	f0 c8 fa 24 	sub	r8,r8,-1500
8000f0f2:	5c 88       	casts.h	r8
	mavlink_msg_roll_pitch_yaw_thrust_setpoint_send(MAVLINK_COMM_0, get_millis(), centralData->controls.rpy[ROLL], centralData->controls.rpy[PITCH], centralData->controls.rpy[YAW], centralData->controls.thrust);
}

void mavlink_send_servo_output(void) {
	Stabiliser_t *rate_stab = &centralData->stabiliser_stack.rate_stabiliser;
	mavlink_msg_servo_output_raw_send(MAVLINK_COMM_0, get_micros(), 0, 
8000f0f4:	e5 d8 c0 10 	bfextu	r2,r8,0x0,0x10
	(uint16_t)(centralData->servos[0].value+1500),
	(uint16_t)(centralData->servos[1].value+1500),
8000f0f8:	ec f8 00 00 	ld.w	r8,r6[0]
8000f0fc:	70 08       	ld.w	r8,r8[0x0]
8000f0fe:	f0 f8 06 fc 	ld.w	r8,r8[1788]
8000f102:	5c 88       	casts.h	r8
8000f104:	f0 c8 fa 24 	sub	r8,r8,-1500
8000f108:	5c 88       	casts.h	r8
	mavlink_msg_roll_pitch_yaw_thrust_setpoint_send(MAVLINK_COMM_0, get_millis(), centralData->controls.rpy[ROLL], centralData->controls.rpy[PITCH], centralData->controls.rpy[YAW], centralData->controls.thrust);
}

void mavlink_send_servo_output(void) {
	Stabiliser_t *rate_stab = &centralData->stabiliser_stack.rate_stabiliser;
	mavlink_msg_servo_output_raw_send(MAVLINK_COMM_0, get_micros(), 0, 
8000f10a:	e7 d8 c0 10 	bfextu	r3,r8,0x0,0x10
	(uint16_t)(centralData->servos[0].value+1500),
8000f10e:	ec f8 00 00 	ld.w	r8,r6[0]
8000f112:	70 08       	ld.w	r8,r8[0x0]
8000f114:	f0 f8 06 ec 	ld.w	r8,r8[1772]
8000f118:	5c 88       	casts.h	r8
8000f11a:	f0 c8 fa 24 	sub	r8,r8,-1500
8000f11e:	5c 88       	casts.h	r8
	mavlink_msg_roll_pitch_yaw_thrust_setpoint_send(MAVLINK_COMM_0, get_millis(), centralData->controls.rpy[ROLL], centralData->controls.rpy[PITCH], centralData->controls.rpy[YAW], centralData->controls.thrust);
}

void mavlink_send_servo_output(void) {
	Stabiliser_t *rate_stab = &centralData->stabiliser_stack.rate_stabiliser;
	mavlink_msg_servo_output_raw_send(MAVLINK_COMM_0, get_micros(), 0, 
8000f120:	eb d8 c0 10 	bfextu	r5,r8,0x0,0x10
8000f124:	f0 16 00 27 	mcall	r6[156]
8000f128:	18 9b       	mov	r11,r12
8000f12a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000f12e:	1a d8       	st.w	--sp,r8
8000f130:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000f134:	1a d8       	st.w	--sp,r8
8000f136:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000f13a:	1a d8       	st.w	--sp,r8
8000f13c:	1a d0       	st.w	--sp,r0
8000f13e:	1a d1       	st.w	--sp,r1
8000f140:	1a d2       	st.w	--sp,r2
8000f142:	06 98       	mov	r8,r3
8000f144:	0a 99       	mov	r9,r5
8000f146:	30 0a       	mov	r10,0
8000f148:	30 0c       	mov	r12,0
8000f14a:	fe b0 f9 4f 	rcall	8000e3e8 <mavlink_msg_servo_output_raw_send>
8000f14e:	2f ad       	sub	sp,-24
	1000*rate_stab->output.rpy[0]+1000, 
	1000*rate_stab->output.rpy[1]+1000,
	1000*rate_stab->output.rpy[2]+1000,
	1000*rate_stab->output.thrust+1000
	);
}
8000f150:	2f cd       	sub	sp,-16
8000f152:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
8000f156:	00 00       	add	r0,r0
8000f158:	80 00       	ld.sh	r0,r0[0x0]
8000f15a:	ee b2       	*unknown*

8000f15c <mavlink_send_attitude_quaternion>:

void mavlink_send_attitude_quaternion(void) {
8000f15c:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
8000f160:	1a 97       	mov	r7,sp
8000f162:	20 2d       	sub	sp,8
8000f164:	49 c6       	lddpc	r6,8000f1d4 <mavlink_send_attitude_quaternion+0x78>
8000f166:	1e 26       	rsub	r6,pc
	// ATTITUDE QUATERNION
	mavlink_msg_attitude_quaternion_send(MAVLINK_COMM_0, get_millis(), centralData->imu1.attitude.qe.s, centralData->imu1.attitude.qe.v[0], centralData->imu1.attitude.qe.v[1], centralData->imu1.attitude.qe.v[2], centralData->imu1.attitude.om[0], centralData->imu1.attitude.om[1], centralData->imu1.attitude.om[2]);
8000f168:	ec f8 00 00 	ld.w	r8,r6[0]
8000f16c:	70 08       	ld.w	r8,r8[0x0]
8000f16e:	f0 f8 00 80 	ld.w	r8,r8[128]
8000f172:	ef 48 ff f8 	st.w	r7[-8],r8
8000f176:	ec f8 00 00 	ld.w	r8,r6[0]
8000f17a:	70 08       	ld.w	r8,r8[0x0]
8000f17c:	71 f8       	ld.w	r8,r8[0x7c]
8000f17e:	ef 48 ff fc 	st.w	r7[-4],r8
8000f182:	ec f8 00 00 	ld.w	r8,r6[0]
8000f186:	70 08       	ld.w	r8,r8[0x0]
8000f188:	71 e0       	ld.w	r0,r8[0x78]
8000f18a:	ec f8 00 00 	ld.w	r8,r6[0]
8000f18e:	70 08       	ld.w	r8,r8[0x0]
8000f190:	70 31       	ld.w	r1,r8[0xc]
8000f192:	ec f8 00 00 	ld.w	r8,r6[0]
8000f196:	70 08       	ld.w	r8,r8[0x0]
8000f198:	70 22       	ld.w	r2,r8[0x8]
8000f19a:	ec f8 00 00 	ld.w	r8,r6[0]
8000f19e:	70 08       	ld.w	r8,r8[0x0]
8000f1a0:	70 13       	ld.w	r3,r8[0x4]
8000f1a2:	ec f8 00 00 	ld.w	r8,r6[0]
8000f1a6:	70 08       	ld.w	r8,r8[0x0]
8000f1a8:	70 05       	ld.w	r5,r8[0x0]
8000f1aa:	f0 16 00 0f 	mcall	r6[60]
8000f1ae:	18 9b       	mov	r11,r12
8000f1b0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000f1b4:	1a d8       	st.w	--sp,r8
8000f1b6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000f1ba:	1a d8       	st.w	--sp,r8
8000f1bc:	1a d0       	st.w	--sp,r0
8000f1be:	1a d1       	st.w	--sp,r1
8000f1c0:	04 98       	mov	r8,r2
8000f1c2:	06 99       	mov	r9,r3
8000f1c4:	0a 9a       	mov	r10,r5
8000f1c6:	30 0c       	mov	r12,0
8000f1c8:	fe b0 f6 a2 	rcall	8000df0c <mavlink_msg_attitude_quaternion_send>
8000f1cc:	2f cd       	sub	sp,-16
}
8000f1ce:	2f ed       	sub	sp,-8
8000f1d0:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
8000f1d4:	80 00       	ld.sh	r0,r0[0x0]
8000f1d6:	ef ea eb cd 	sthh.w	sp[0x2f0],r7:t,r10:b

8000f1d8 <mavlink_send_attitude>:
void mavlink_send_attitude(void) {
8000f1d8:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
8000f1dc:	1a 97       	mov	r7,sp
8000f1de:	20 4d       	sub	sp,16
8000f1e0:	49 f6       	lddpc	r6,8000f25c <mavlink_send_attitude+0x84>
8000f1e2:	1e 26       	rsub	r6,pc
	// ATTITUDE
	Aero_Attitude_t aero_attitude;
	aero_attitude=Quat_to_Aero(centralData->imu1.attitude.qe);
8000f1e4:	ec f8 00 00 	ld.w	r8,r6[0]
8000f1e8:	70 09       	ld.w	r9,r8[0x0]
8000f1ea:	ee ca 00 0c 	sub	r10,r7,12
8000f1ee:	20 4d       	sub	sp,16
8000f1f0:	1a 98       	mov	r8,sp
8000f1f2:	20 08       	sub	r8,0
8000f1f4:	20 09       	sub	r9,0
8000f1f6:	72 0b       	ld.w	r11,r9[0x0]
8000f1f8:	91 0b       	st.w	r8[0x0],r11
8000f1fa:	72 1b       	ld.w	r11,r9[0x4]
8000f1fc:	91 1b       	st.w	r8[0x4],r11
8000f1fe:	72 2b       	ld.w	r11,r9[0x8]
8000f200:	91 2b       	st.w	r8[0x8],r11
8000f202:	72 39       	ld.w	r9,r9[0xc]
8000f204:	91 39       	st.w	r8[0xc],r9
8000f206:	14 9c       	mov	r12,r10
8000f208:	f0 16 00 67 	mcall	r6[412]
8000f20c:	2f cd       	sub	sp,-16
	mavlink_msg_attitude_send(MAVLINK_COMM_0, get_millis(), aero_attitude.rpy[0], aero_attitude.rpy[1], aero_attitude.rpy[2], centralData->imu1.attitude.om[0], centralData->imu1.attitude.om[1], centralData->imu1.attitude.om[2]);
8000f20e:	ec f8 00 00 	ld.w	r8,r6[0]
8000f212:	70 08       	ld.w	r8,r8[0x0]
8000f214:	f0 f8 00 80 	ld.w	r8,r8[128]
8000f218:	ef 48 ff f0 	st.w	r7[-16],r8
8000f21c:	ec f8 00 00 	ld.w	r8,r6[0]
8000f220:	70 08       	ld.w	r8,r8[0x0]
8000f222:	71 f0       	ld.w	r0,r8[0x7c]
8000f224:	ec f8 00 00 	ld.w	r8,r6[0]
8000f228:	70 08       	ld.w	r8,r8[0x0]
8000f22a:	71 e1       	ld.w	r1,r8[0x78]
8000f22c:	ee f2 ff fc 	ld.w	r2,r7[-4]
8000f230:	ee f3 ff f8 	ld.w	r3,r7[-8]
8000f234:	ee f5 ff f4 	ld.w	r5,r7[-12]
8000f238:	f0 16 00 0f 	mcall	r6[60]
8000f23c:	18 9b       	mov	r11,r12
8000f23e:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000f242:	1a d8       	st.w	--sp,r8
8000f244:	1a d0       	st.w	--sp,r0
8000f246:	1a d1       	st.w	--sp,r1
8000f248:	04 98       	mov	r8,r2
8000f24a:	06 99       	mov	r9,r3
8000f24c:	0a 9a       	mov	r10,r5
8000f24e:	30 0c       	mov	r12,0
8000f250:	fe b0 f6 00 	rcall	8000de50 <mavlink_msg_attitude_send>
8000f254:	2f dd       	sub	sp,-12
}
8000f256:	2f cd       	sub	sp,-16
8000f258:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
8000f25c:	80 00       	ld.sh	r0,r0[0x0]
8000f25e:	f0 66 eb cd 	mov	r6,-988211

8000f260 <mavlink_send_global_position>:

void mavlink_send_global_position(void) {				
8000f260:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
8000f264:	1a 97       	mov	r7,sp
8000f266:	20 9d       	sub	sp,36
8000f268:	4e 66       	lddpc	r6,8000f400 <mavlink_send_global_position+0x1a0>
8000f26a:	1e 26       	rsub	r6,pc
   //{
	   //mavlink_msg_global_position_int_send(MAVLINK_COMM_0, get_millis() , centralData->GPS_data.latitude*10000000.0, centralData->GPS_data.longitude*10000000.0, centralData->GPS_data.altitude*1000.0, 1, centralData->GPS_data.northSpeed*100.0, centralData->GPS_data.eastSpeed*100.0, centralData->GPS_data.verticalSpeed*100.0, centralData->GPS_data.course);
   //}else{
	   //mavlink_msg_global_position_int_send(MAVLINK_COMM_0, get_millis(), 46.5193*10000000, 6.56507*10000000, 400*1000, 1, 0, 0, 0, centralData->imu1.attitude.om[2]);
	   	// send integrated position (for now there is no GPS error correction...!!!)
		global_position_t gpos=local_to_global_position(centralData->position_estimator.localPosition);
8000f26c:	ec f8 00 00 	ld.w	r8,r6[0]
8000f270:	70 08       	ld.w	r8,r8[0x0]
8000f272:	ee cc 00 1c 	sub	r12,r7,28
8000f276:	20 cd       	sub	sp,48
8000f278:	1a 99       	mov	r9,sp
8000f27a:	12 9b       	mov	r11,r9
8000f27c:	f0 ca f2 64 	sub	r10,r8,-3484
8000f280:	f6 c8 00 00 	sub	r8,r11,0
8000f284:	f4 c9 00 00 	sub	r9,r10,0
8000f288:	72 0e       	ld.w	lr,r9[0x0]
8000f28a:	91 0e       	st.w	r8[0x0],lr
8000f28c:	72 1e       	ld.w	lr,r9[0x4]
8000f28e:	91 1e       	st.w	r8[0x4],lr
8000f290:	72 2e       	ld.w	lr,r9[0x8]
8000f292:	91 2e       	st.w	r8[0x8],lr
8000f294:	72 39       	ld.w	r9,r9[0xc]
8000f296:	91 39       	st.w	r8[0xc],r9
8000f298:	f6 c8 ff f0 	sub	r8,r11,-16
8000f29c:	f4 c9 ff f0 	sub	r9,r10,-16
8000f2a0:	72 0e       	ld.w	lr,r9[0x0]
8000f2a2:	91 0e       	st.w	r8[0x0],lr
8000f2a4:	72 1e       	ld.w	lr,r9[0x4]
8000f2a6:	91 1e       	st.w	r8[0x4],lr
8000f2a8:	72 2e       	ld.w	lr,r9[0x8]
8000f2aa:	91 2e       	st.w	r8[0x8],lr
8000f2ac:	72 39       	ld.w	r9,r9[0xc]
8000f2ae:	91 39       	st.w	r8[0xc],r9
8000f2b0:	f6 c8 ff e0 	sub	r8,r11,-32
8000f2b4:	f4 c9 ff e0 	sub	r9,r10,-32
8000f2b8:	72 0a       	ld.w	r10,r9[0x0]
8000f2ba:	91 0a       	st.w	r8[0x0],r10
8000f2bc:	72 1a       	ld.w	r10,r9[0x4]
8000f2be:	91 1a       	st.w	r8[0x4],r10
8000f2c0:	72 2a       	ld.w	r10,r9[0x8]
8000f2c2:	91 2a       	st.w	r8[0x8],r10
8000f2c4:	72 39       	ld.w	r9,r9[0xc]
8000f2c6:	91 39       	st.w	r8[0xc],r9
8000f2c8:	f0 16 00 7f 	mcall	r6[508]
8000f2cc:	2f 4d       	sub	sp,-48
		mavlink_msg_global_position_int_send(MAVLINK_COMM_0, get_millis(), gpos.latitude*10000000, gpos.longitude*10000000, gpos.altitude*1000.0, 1, centralData->position_estimator.vel[0]*100.0, centralData->position_estimator.vel[1]*100.0, centralData->position_estimator.vel[2]*100.0, centralData->imu1.attitude.om[2]);
8000f2ce:	ec f8 00 00 	ld.w	r8,r6[0]
8000f2d2:	70 08       	ld.w	r8,r8[0x0]
8000f2d4:	f0 f8 00 80 	ld.w	r8,r8[128]
8000f2d8:	e5 a9 08 08 	cop	cp0,cr8,cr0,cr8,0x52
8000f2dc:	5c 88       	casts.h	r8
8000f2de:	5c 78       	castu.h	r8
8000f2e0:	ef 48 ff dc 	st.w	r7[-36],r8
8000f2e4:	ec f8 00 00 	ld.w	r8,r6[0]
8000f2e8:	70 08       	ld.w	r8,r8[0x0]
8000f2ea:	f0 f8 0d 7c 	ld.w	r8,r8[3452]
8000f2ee:	10 9c       	mov	r12,r8
8000f2f0:	f0 16 00 02 	mcall	r6[8]
8000f2f4:	30 08       	mov	r8,0
8000f2f6:	fc 19 40 59 	movh	r9,0x4059
8000f2fa:	f0 16 00 03 	mcall	r6[12]
8000f2fe:	14 98       	mov	r8,r10
8000f300:	16 99       	mov	r9,r11
8000f302:	10 9a       	mov	r10,r8
8000f304:	12 9b       	mov	r11,r9
8000f306:	f0 16 00 14 	mcall	r6[80]
8000f30a:	18 98       	mov	r8,r12
8000f30c:	5c 88       	casts.h	r8
8000f30e:	ef 48 ff e0 	st.w	r7[-32],r8
8000f312:	ec f8 00 00 	ld.w	r8,r6[0]
8000f316:	70 08       	ld.w	r8,r8[0x0]
8000f318:	f0 f8 0d 78 	ld.w	r8,r8[3448]
8000f31c:	10 9c       	mov	r12,r8
8000f31e:	f0 16 00 02 	mcall	r6[8]
8000f322:	30 08       	mov	r8,0
8000f324:	fc 19 40 59 	movh	r9,0x4059
8000f328:	f0 16 00 03 	mcall	r6[12]
8000f32c:	14 98       	mov	r8,r10
8000f32e:	16 99       	mov	r9,r11
8000f330:	10 9a       	mov	r10,r8
8000f332:	12 9b       	mov	r11,r9
8000f334:	f0 16 00 14 	mcall	r6[80]
8000f338:	18 98       	mov	r8,r12
8000f33a:	5c 88       	casts.h	r8
8000f33c:	10 90       	mov	r0,r8
8000f33e:	ec f8 00 00 	ld.w	r8,r6[0]
8000f342:	70 08       	ld.w	r8,r8[0x0]
8000f344:	f0 f8 0d 74 	ld.w	r8,r8[3444]
8000f348:	10 9c       	mov	r12,r8
8000f34a:	f0 16 00 02 	mcall	r6[8]
8000f34e:	30 08       	mov	r8,0
8000f350:	fc 19 40 59 	movh	r9,0x4059
8000f354:	f0 16 00 03 	mcall	r6[12]
8000f358:	14 98       	mov	r8,r10
8000f35a:	16 99       	mov	r9,r11
8000f35c:	10 9a       	mov	r10,r8
8000f35e:	12 9b       	mov	r11,r9
8000f360:	f0 16 00 14 	mcall	r6[80]
8000f364:	18 98       	mov	r8,r12
8000f366:	5c 88       	casts.h	r8
8000f368:	10 91       	mov	r1,r8
8000f36a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000f36e:	10 9c       	mov	r12,r8
8000f370:	f0 16 00 02 	mcall	r6[8]
8000f374:	30 08       	mov	r8,0
8000f376:	e0 69 40 00 	mov	r9,16384
8000f37a:	ea 19 40 8f 	orh	r9,0x408f
8000f37e:	f0 16 00 03 	mcall	r6[12]
8000f382:	14 98       	mov	r8,r10
8000f384:	16 99       	mov	r9,r11
8000f386:	10 9a       	mov	r10,r8
8000f388:	12 9b       	mov	r11,r9
8000f38a:	f0 16 00 14 	mcall	r6[80]
8000f38e:	18 92       	mov	r2,r12
8000f390:	ee ea ff e4 	ld.d	r10,r7[-28]
8000f394:	30 08       	mov	r8,0
8000f396:	e0 69 12 d0 	mov	r9,4816
8000f39a:	ea 19 41 63 	orh	r9,0x4163
8000f39e:	f0 16 00 03 	mcall	r6[12]
8000f3a2:	14 98       	mov	r8,r10
8000f3a4:	16 99       	mov	r9,r11
8000f3a6:	10 9a       	mov	r10,r8
8000f3a8:	12 9b       	mov	r11,r9
8000f3aa:	f0 16 00 14 	mcall	r6[80]
8000f3ae:	18 93       	mov	r3,r12
8000f3b0:	ee ea ff ec 	ld.d	r10,r7[-20]
8000f3b4:	30 08       	mov	r8,0
8000f3b6:	e0 69 12 d0 	mov	r9,4816
8000f3ba:	ea 19 41 63 	orh	r9,0x4163
8000f3be:	f0 16 00 03 	mcall	r6[12]
8000f3c2:	14 98       	mov	r8,r10
8000f3c4:	16 99       	mov	r9,r11
8000f3c6:	10 9a       	mov	r10,r8
8000f3c8:	12 9b       	mov	r11,r9
8000f3ca:	f0 16 00 14 	mcall	r6[80]
8000f3ce:	18 95       	mov	r5,r12
8000f3d0:	f0 16 00 0f 	mcall	r6[60]
8000f3d4:	18 9b       	mov	r11,r12
8000f3d6:	ee f8 ff dc 	ld.w	r8,r7[-36]
8000f3da:	1a d8       	st.w	--sp,r8
8000f3dc:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000f3e0:	1a d8       	st.w	--sp,r8
8000f3e2:	1a d0       	st.w	--sp,r0
8000f3e4:	1a d1       	st.w	--sp,r1
8000f3e6:	30 18       	mov	r8,1
8000f3e8:	1a d8       	st.w	--sp,r8
8000f3ea:	04 98       	mov	r8,r2
8000f3ec:	06 99       	mov	r9,r3
8000f3ee:	0a 9a       	mov	r10,r5
8000f3f0:	30 0c       	mov	r12,0
8000f3f2:	fe b0 f6 53 	rcall	8000e098 <mavlink_msg_global_position_int_send>
8000f3f6:	2f bd       	sub	sp,-20
   //} 
}
8000f3f8:	2f 7d       	sub	sp,-36
8000f3fa:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
8000f3fe:	00 00       	add	r0,r0
8000f400:	80 00       	ld.sh	r0,r0[0x0]
8000f402:	f0 ee eb cd 	ld.d	lr,r8[-5171]

8000f404 <mavlink_send_hud>:

void mavlink_send_hud(void) {
8000f404:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
8000f408:	1a 97       	mov	r7,sp
8000f40a:	20 5d       	sub	sp,20
8000f40c:	4d 46       	lddpc	r6,8000f55c <mavlink_send_hud+0x158>
8000f40e:	1e 26       	rsub	r6,pc
	float groundspeed=sqrt(centralData->position_estimator.vel[0]*centralData->position_estimator.vel[0] +centralData->position_estimator.vel[1]*centralData->position_estimator.vel[1]);
8000f410:	ec f8 00 00 	ld.w	r8,r6[0]
8000f414:	70 08       	ld.w	r8,r8[0x0]
8000f416:	f0 f9 0d 74 	ld.w	r9,r8[3444]
8000f41a:	ec f8 00 00 	ld.w	r8,r6[0]
8000f41e:	70 08       	ld.w	r8,r8[0x0]
8000f420:	f0 f8 0d 74 	ld.w	r8,r8[3444]
8000f424:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000f428:	ec f8 00 00 	ld.w	r8,r6[0]
8000f42c:	70 08       	ld.w	r8,r8[0x0]
8000f42e:	f0 fa 0d 78 	ld.w	r10,r8[3448]
8000f432:	ec f8 00 00 	ld.w	r8,r6[0]
8000f436:	70 08       	ld.w	r8,r8[0x0]
8000f438:	f0 f8 0d 78 	ld.w	r8,r8[3448]
8000f43c:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000f440:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8000f444:	10 9c       	mov	r12,r8
8000f446:	f0 16 00 02 	mcall	r6[8]
8000f44a:	14 98       	mov	r8,r10
8000f44c:	16 99       	mov	r9,r11
8000f44e:	10 9a       	mov	r10,r8
8000f450:	12 9b       	mov	r11,r9
8000f452:	f0 16 00 65 	mcall	r6[404]
8000f456:	14 98       	mov	r8,r10
8000f458:	16 99       	mov	r9,r11
8000f45a:	10 9a       	mov	r10,r8
8000f45c:	12 9b       	mov	r11,r9
8000f45e:	f0 16 00 09 	mcall	r6[36]
8000f462:	18 98       	mov	r8,r12
8000f464:	ef 48 ff f8 	st.w	r7[-8],r8
	float airspeed=groundspeed;
8000f468:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000f46c:	ef 48 ff fc 	st.w	r7[-4],r8
	Aero_Attitude_t aero_attitude;
	aero_attitude=Quat_to_Aero(centralData->imu1.attitude.qe);
8000f470:	ec f8 00 00 	ld.w	r8,r6[0]
8000f474:	70 09       	ld.w	r9,r8[0x0]
8000f476:	ee ca 00 14 	sub	r10,r7,20
8000f47a:	20 4d       	sub	sp,16
8000f47c:	1a 98       	mov	r8,sp
8000f47e:	20 08       	sub	r8,0
8000f480:	20 09       	sub	r9,0
8000f482:	72 0b       	ld.w	r11,r9[0x0]
8000f484:	91 0b       	st.w	r8[0x0],r11
8000f486:	72 1b       	ld.w	r11,r9[0x4]
8000f488:	91 1b       	st.w	r8[0x4],r11
8000f48a:	72 2b       	ld.w	r11,r9[0x8]
8000f48c:	91 2b       	st.w	r8[0x8],r11
8000f48e:	72 39       	ld.w	r9,r9[0xc]
8000f490:	91 39       	st.w	r8[0xc],r9
8000f492:	14 9c       	mov	r12,r10
8000f494:	f0 16 00 67 	mcall	r6[412]
8000f498:	2f cd       	sub	sp,-16
	// mavlink_msg_vfr_hud_send(mavlink_channel_t chan, float airspeed, float groundspeed, int16_t heading, uint16_t throttle, float alt, float climb)
	mavlink_msg_vfr_hud_send(MAVLINK_COMM_0, airspeed, groundspeed, 180.0*aero_attitude.rpy[2]/PI, (int)((centralData->controls.thrust+1.0)*50), -centralData->position_estimator.localPosition.pos[2], -centralData->position_estimator.vel[2]);
8000f49a:	ec f8 00 00 	ld.w	r8,r6[0]
8000f49e:	70 08       	ld.w	r8,r8[0x0]
8000f4a0:	f0 f8 0d 7c 	ld.w	r8,r8[3452]
8000f4a4:	10 92       	mov	r2,r8
8000f4a6:	ee 12 80 00 	eorh	r2,0x8000
8000f4aa:	ec f8 00 00 	ld.w	r8,r6[0]
8000f4ae:	70 08       	ld.w	r8,r8[0x0]
8000f4b0:	f0 f8 0d a4 	ld.w	r8,r8[3492]
8000f4b4:	10 93       	mov	r3,r8
8000f4b6:	ee 13 80 00 	eorh	r3,0x8000
8000f4ba:	ec f8 00 00 	ld.w	r8,r6[0]
8000f4be:	70 08       	ld.w	r8,r8[0x0]
8000f4c0:	f0 f8 01 54 	ld.w	r8,r8[340]
8000f4c4:	10 9c       	mov	r12,r8
8000f4c6:	f0 16 00 02 	mcall	r6[8]
8000f4ca:	30 08       	mov	r8,0
8000f4cc:	fc 19 3f f0 	movh	r9,0x3ff0
8000f4d0:	f0 16 00 05 	mcall	r6[20]
8000f4d4:	14 98       	mov	r8,r10
8000f4d6:	16 99       	mov	r9,r11
8000f4d8:	10 9a       	mov	r10,r8
8000f4da:	12 9b       	mov	r11,r9
8000f4dc:	30 08       	mov	r8,0
8000f4de:	fc 19 40 49 	movh	r9,0x4049
8000f4e2:	f0 16 00 03 	mcall	r6[12]
8000f4e6:	14 98       	mov	r8,r10
8000f4e8:	16 99       	mov	r9,r11
8000f4ea:	10 9a       	mov	r10,r8
8000f4ec:	12 9b       	mov	r11,r9
8000f4ee:	f0 16 00 14 	mcall	r6[80]
8000f4f2:	18 98       	mov	r8,r12
8000f4f4:	5c 88       	casts.h	r8
8000f4f6:	eb d8 c0 10 	bfextu	r5,r8,0x0,0x10
8000f4fa:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000f4fe:	10 9c       	mov	r12,r8
8000f500:	f0 16 00 02 	mcall	r6[8]
8000f504:	30 08       	mov	r8,0
8000f506:	e0 69 80 00 	mov	r9,32768
8000f50a:	ea 19 40 66 	orh	r9,0x4066
8000f50e:	f0 16 00 03 	mcall	r6[12]
8000f512:	14 98       	mov	r8,r10
8000f514:	16 99       	mov	r9,r11
8000f516:	10 9a       	mov	r10,r8
8000f518:	12 9b       	mov	r11,r9
8000f51a:	e0 68 2d 18 	mov	r8,11544
8000f51e:	ea 18 54 44 	orh	r8,0x5444
8000f522:	e0 69 21 fb 	mov	r9,8699
8000f526:	ea 19 40 09 	orh	r9,0x4009
8000f52a:	f0 16 00 0c 	mcall	r6[48]
8000f52e:	14 98       	mov	r8,r10
8000f530:	16 99       	mov	r9,r11
8000f532:	10 9a       	mov	r10,r8
8000f534:	12 9b       	mov	r11,r9
8000f536:	f0 16 00 14 	mcall	r6[80]
8000f53a:	18 98       	mov	r8,r12
8000f53c:	5c 88       	casts.h	r8
8000f53e:	10 99       	mov	r9,r8
8000f540:	1a d2       	st.w	--sp,r2
8000f542:	1a d3       	st.w	--sp,r3
8000f544:	0a 98       	mov	r8,r5
8000f546:	ee fa ff f8 	ld.w	r10,r7[-8]
8000f54a:	ee fb ff fc 	ld.w	r11,r7[-4]
8000f54e:	30 0c       	mov	r12,0
8000f550:	fe b0 f8 72 	rcall	8000e634 <mavlink_msg_vfr_hud_send>
8000f554:	2f ed       	sub	sp,-8

	
}
8000f556:	2f bd       	sub	sp,-20
8000f558:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
8000f55c:	80 00       	ld.sh	r0,r0[0x0]
8000f55e:	f2 92 eb cd 	brhs	7fe8ccf8 <_estack+0x7fe7ccf8>

8000f560 <mavlink_send_gps_raw>:

void mavlink_send_gps_raw(void) {	
8000f560:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
8000f564:	1a 97       	mov	r7,sp
8000f566:	20 4d       	sub	sp,16
8000f568:	4f d6       	lddpc	r6,8000f75c <mavlink_send_gps_raw+0x1fc>
8000f56a:	1e 26       	rsub	r6,pc
	// mavlink_msg_gps_raw_int_send(mavlink_channel_t chan, uint64_t time_usec, uint8_t fix_type, int32_t lat, int32_t lon, int32_t alt, uint16_t eph, uint16_t epv, uint16_t vel, uint16_t cog, uint8_t satellites_visible)
	if (centralData->GPS_data.status == GPS_OK)
8000f56c:	ec f8 00 00 	ld.w	r8,r6[0]
8000f570:	70 08       	ld.w	r8,r8[0x0]
8000f572:	f1 39 0b 54 	ld.ub	r9,r8[2900]
8000f576:	30 28       	mov	r8,2
8000f578:	f0 09 18 00 	cp.b	r9,r8
8000f57c:	e0 81 00 c0 	brne	8000f6fc <mavlink_send_gps_raw+0x19c>
	{
		mavlink_msg_gps_raw_int_send(MAVLINK_COMM_0,1000*centralData->GPS_data.timeLastMsg, centralData->GPS_data.status, centralData->GPS_data.latitude*10000000.0, centralData->GPS_data.longitude*10000000.0, centralData->GPS_data.altitude*1000.0, centralData->GPS_data.hdop*100.0, centralData->GPS_data.speedAccuracy*100.0 ,centralData->GPS_data.groundSpeed*100.0, centralData->GPS_data.course, centralData->GPS_data.num_sats);	
8000f580:	ec f8 00 00 	ld.w	r8,r6[0]
8000f584:	70 08       	ld.w	r8,r8[0x0]
8000f586:	f1 38 0b 48 	ld.ub	r8,r8[2888]
8000f58a:	ef 48 ff f0 	st.w	r7[-16],r8
8000f58e:	ec f8 00 00 	ld.w	r8,r6[0]
8000f592:	70 08       	ld.w	r8,r8[0x0]
8000f594:	f0 f8 0b 34 	ld.w	r8,r8[2868]
8000f598:	e5 a9 08 08 	cop	cp0,cr8,cr0,cr8,0x52
8000f59c:	5c 88       	casts.h	r8
8000f59e:	5c 78       	castu.h	r8
8000f5a0:	ef 48 ff f4 	st.w	r7[-12],r8
8000f5a4:	ec f8 00 00 	ld.w	r8,r6[0]
8000f5a8:	70 08       	ld.w	r8,r8[0x0]
8000f5aa:	f0 f8 0b 24 	ld.w	r8,r8[2852]
8000f5ae:	10 9c       	mov	r12,r8
8000f5b0:	f0 16 00 02 	mcall	r6[8]
8000f5b4:	30 08       	mov	r8,0
8000f5b6:	fc 19 40 59 	movh	r9,0x4059
8000f5ba:	f0 16 00 03 	mcall	r6[12]
8000f5be:	14 98       	mov	r8,r10
8000f5c0:	16 99       	mov	r9,r11
8000f5c2:	10 9a       	mov	r10,r8
8000f5c4:	12 9b       	mov	r11,r9
8000f5c6:	f0 16 00 74 	mcall	r6[464]
8000f5ca:	18 98       	mov	r8,r12
8000f5cc:	5c 88       	casts.h	r8
8000f5ce:	5c 78       	castu.h	r8
8000f5d0:	ef 48 ff f8 	st.w	r7[-8],r8
8000f5d4:	ec f8 00 00 	ld.w	r8,r6[0]
8000f5d8:	70 08       	ld.w	r8,r8[0x0]
8000f5da:	f0 f8 0b 40 	ld.w	r8,r8[2880]
8000f5de:	10 9c       	mov	r12,r8
8000f5e0:	f0 16 00 02 	mcall	r6[8]
8000f5e4:	30 08       	mov	r8,0
8000f5e6:	fc 19 40 59 	movh	r9,0x4059
8000f5ea:	f0 16 00 03 	mcall	r6[12]
8000f5ee:	14 98       	mov	r8,r10
8000f5f0:	16 99       	mov	r9,r11
8000f5f2:	10 9a       	mov	r10,r8
8000f5f4:	12 9b       	mov	r11,r9
8000f5f6:	f0 16 00 74 	mcall	r6[464]
8000f5fa:	18 98       	mov	r8,r12
8000f5fc:	5c 88       	casts.h	r8
8000f5fe:	5c 78       	castu.h	r8
8000f600:	ef 48 ff fc 	st.w	r7[-4],r8
8000f604:	ec f8 00 00 	ld.w	r8,r6[0]
8000f608:	70 08       	ld.w	r8,r8[0x0]
8000f60a:	f1 08 0b 4a 	ld.sh	r8,r8[2890]
8000f60e:	5c 78       	castu.h	r8
8000f610:	10 9c       	mov	r12,r8
8000f612:	f0 16 00 1a 	mcall	r6[104]
8000f616:	30 08       	mov	r8,0
8000f618:	fc 19 40 59 	movh	r9,0x4059
8000f61c:	f0 16 00 03 	mcall	r6[12]
8000f620:	14 98       	mov	r8,r10
8000f622:	16 99       	mov	r9,r11
8000f624:	10 9a       	mov	r10,r8
8000f626:	12 9b       	mov	r11,r9
8000f628:	f0 16 00 74 	mcall	r6[464]
8000f62c:	18 98       	mov	r8,r12
8000f62e:	5c 88       	casts.h	r8
8000f630:	e5 d8 c0 10 	bfextu	r2,r8,0x0,0x10
8000f634:	ec f8 00 00 	ld.w	r8,r6[0]
8000f638:	70 08       	ld.w	r8,r8[0x0]
8000f63a:	f0 f8 0b 18 	ld.w	r8,r8[2840]
8000f63e:	10 9c       	mov	r12,r8
8000f640:	f0 16 00 02 	mcall	r6[8]
8000f644:	30 08       	mov	r8,0
8000f646:	e0 69 40 00 	mov	r9,16384
8000f64a:	ea 19 40 8f 	orh	r9,0x408f
8000f64e:	f0 16 00 03 	mcall	r6[12]
8000f652:	14 98       	mov	r8,r10
8000f654:	16 99       	mov	r9,r11
8000f656:	10 9a       	mov	r10,r8
8000f658:	12 9b       	mov	r11,r9
8000f65a:	f0 16 00 14 	mcall	r6[80]
8000f65e:	18 93       	mov	r3,r12
8000f660:	ec f8 00 00 	ld.w	r8,r6[0]
8000f664:	70 08       	ld.w	r8,r8[0x0]
8000f666:	f0 ea 0b 10 	ld.d	r10,r8[2832]
8000f66a:	30 08       	mov	r8,0
8000f66c:	e0 69 12 d0 	mov	r9,4816
8000f670:	ea 19 41 63 	orh	r9,0x4163
8000f674:	f0 16 00 03 	mcall	r6[12]
8000f678:	14 98       	mov	r8,r10
8000f67a:	16 99       	mov	r9,r11
8000f67c:	10 9a       	mov	r10,r8
8000f67e:	12 9b       	mov	r11,r9
8000f680:	f0 16 00 14 	mcall	r6[80]
8000f684:	18 95       	mov	r5,r12
8000f686:	ec f8 00 00 	ld.w	r8,r6[0]
8000f68a:	70 08       	ld.w	r8,r8[0x0]
8000f68c:	f0 ea 0b 08 	ld.d	r10,r8[2824]
8000f690:	30 08       	mov	r8,0
8000f692:	e0 69 12 d0 	mov	r9,4816
8000f696:	ea 19 41 63 	orh	r9,0x4163
8000f69a:	f0 16 00 03 	mcall	r6[12]
8000f69e:	14 98       	mov	r8,r10
8000f6a0:	16 99       	mov	r9,r11
8000f6a2:	10 9a       	mov	r10,r8
8000f6a4:	12 9b       	mov	r11,r9
8000f6a6:	f0 16 00 14 	mcall	r6[80]
8000f6aa:	18 9a       	mov	r10,r12
8000f6ac:	ec f8 00 00 	ld.w	r8,r6[0]
8000f6b0:	70 08       	ld.w	r8,r8[0x0]
8000f6b2:	f1 38 0b 54 	ld.ub	r8,r8[2900]
8000f6b6:	10 99       	mov	r9,r8
8000f6b8:	ec f8 00 00 	ld.w	r8,r6[0]
8000f6bc:	70 08       	ld.w	r8,r8[0x0]
8000f6be:	f0 fb 0b 4c 	ld.w	r11,r8[2892]
8000f6c2:	e0 68 03 e8 	mov	r8,1000
8000f6c6:	f6 08 02 48 	mul	r8,r11,r8
8000f6ca:	10 90       	mov	r0,r8
8000f6cc:	30 01       	mov	r1,0
8000f6ce:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000f6d2:	1a d8       	st.w	--sp,r8
8000f6d4:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000f6d8:	1a d8       	st.w	--sp,r8
8000f6da:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000f6de:	1a d8       	st.w	--sp,r8
8000f6e0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000f6e4:	1a d8       	st.w	--sp,r8
8000f6e6:	1a d2       	st.w	--sp,r2
8000f6e8:	1a d3       	st.w	--sp,r3
8000f6ea:	1a d5       	st.w	--sp,r5
8000f6ec:	14 98       	mov	r8,r10
8000f6ee:	00 9a       	mov	r10,r0
8000f6f0:	02 9b       	mov	r11,r1
8000f6f2:	30 0c       	mov	r12,0
8000f6f4:	fe b0 f1 d2 	rcall	8000da98 <mavlink_msg_gps_raw_int_send>
8000f6f8:	2f 9d       	sub	sp,-28
8000f6fa:	c2 e8       	rjmp	8000f756 <mavlink_send_gps_raw+0x1f6>
	}else{
		mavlink_msg_gps_raw_int_send(MAVLINK_COMM_0,get_micros(), centralData->GPS_data.status, 46.5193*10000000, 6.56507*10000000, 400 * 1000, 0, 0 , 0, 0, centralData->GPS_data.num_sats);
8000f6fc:	ec f8 00 00 	ld.w	r8,r6[0]
8000f700:	70 08       	ld.w	r8,r8[0x0]
8000f702:	f1 38 0b 48 	ld.ub	r8,r8[2888]
8000f706:	10 91       	mov	r1,r8
8000f708:	ec f8 00 00 	ld.w	r8,r6[0]
8000f70c:	70 08       	ld.w	r8,r8[0x0]
8000f70e:	f1 38 0b 54 	ld.ub	r8,r8[2900]
8000f712:	10 95       	mov	r5,r8
8000f714:	f0 16 00 27 	mcall	r6[156]
8000f718:	18 98       	mov	r8,r12
8000f71a:	10 92       	mov	r2,r8
8000f71c:	30 03       	mov	r3,0
8000f71e:	1a d1       	st.w	--sp,r1
8000f720:	30 08       	mov	r8,0
8000f722:	1a d8       	st.w	--sp,r8
8000f724:	30 08       	mov	r8,0
8000f726:	1a d8       	st.w	--sp,r8
8000f728:	30 08       	mov	r8,0
8000f72a:	1a d8       	st.w	--sp,r8
8000f72c:	30 08       	mov	r8,0
8000f72e:	1a d8       	st.w	--sp,r8
8000f730:	e6 68 1a 80 	mov	r8,400000
8000f734:	1a d8       	st.w	--sp,r8
8000f736:	e0 68 c0 0c 	mov	r8,49164
8000f73a:	ea 18 03 e9 	orh	r8,0x3e9
8000f73e:	1a d8       	st.w	--sp,r8
8000f740:	e0 68 48 28 	mov	r8,18472
8000f744:	ea 18 1b ba 	orh	r8,0x1bba
8000f748:	0a 99       	mov	r9,r5
8000f74a:	04 9a       	mov	r10,r2
8000f74c:	06 9b       	mov	r11,r3
8000f74e:	30 0c       	mov	r12,0
8000f750:	fe b0 f1 a4 	rcall	8000da98 <mavlink_msg_gps_raw_int_send>
8000f754:	2f 9d       	sub	sp,-28
	}
}
8000f756:	2f cd       	sub	sp,-16
8000f758:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
8000f75c:	80 00       	ld.sh	r0,r0[0x0]
8000f75e:	f3 ee       	*unknown*
8000f760:	70 72       	ld.w	r2,r8[0x1c]
8000f762:	65 73       	ld.w	r3,r2[0x5c]
8000f764:	73 41       	ld.w	r1,r9[0x50]
8000f766:	6c 74       	ld.w	r4,r6[0x1c]
8000f768:	00 00       	add	r0,r0
8000f76a:	00 00       	add	r0,r0
8000f76c:	6c 61       	ld.w	r1,r6[0x18]
8000f76e:	73 74       	ld.w	r4,r9[0x5c]
8000f770:	41 6c       	lddsp	r12,sp[0x58]
8000f772:	74 00       	ld.w	r0,r10[0x0]
8000f774:	62 61       	ld.w	r1,r1[0x18]
8000f776:	72 6f       	ld.w	pc,r9[0x18]
8000f778:	5f 64       	srmi	r4
8000f77a:	74 00       	ld.w	r0,r10[0x0]

8000f77c <mavlink_send_pressure>:


void mavlink_send_pressure(void) {			
8000f77c:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
8000f780:	1a 97       	mov	r7,sp
8000f782:	4b 56       	lddpc	r6,8000f854 <mavlink_send_pressure+0xd8>
8000f784:	1e 26       	rsub	r6,pc
	//mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "Altitude", centralData->pressure.altitude);
	
	
	//mavlink_msg_scaled_pressure_send(mavlink_channel_t chan, uint32_t time_boot_ms, float press_abs, float press_diff, int16_t temperature)
	
	mavlink_msg_scaled_pressure_send(MAVLINK_COMM_0, get_millis(), centralData->pressure.pressure/100.0, centralData->pressure.vario_vz, centralData->pressure.temperature*100.0);
8000f786:	ec f8 00 00 	ld.w	r8,r6[0]
8000f78a:	70 08       	ld.w	r8,r8[0x0]
8000f78c:	f0 f8 10 d0 	ld.w	r8,r8[4304]
8000f790:	10 9c       	mov	r12,r8
8000f792:	f0 16 00 02 	mcall	r6[8]
8000f796:	30 08       	mov	r8,0
8000f798:	fc 19 40 59 	movh	r9,0x4059
8000f79c:	f0 16 00 03 	mcall	r6[12]
8000f7a0:	14 98       	mov	r8,r10
8000f7a2:	16 99       	mov	r9,r11
8000f7a4:	10 9a       	mov	r10,r8
8000f7a6:	12 9b       	mov	r11,r9
8000f7a8:	f0 16 00 14 	mcall	r6[80]
8000f7ac:	18 98       	mov	r8,r12
8000f7ae:	5c 88       	casts.h	r8
8000f7b0:	10 92       	mov	r2,r8
8000f7b2:	ec f8 00 00 	ld.w	r8,r6[0]
8000f7b6:	70 08       	ld.w	r8,r8[0x0]
8000f7b8:	f0 f3 10 e8 	ld.w	r3,r8[4328]
8000f7bc:	ec f8 00 00 	ld.w	r8,r6[0]
8000f7c0:	70 08       	ld.w	r8,r8[0x0]
8000f7c2:	f0 f8 10 cc 	ld.w	r8,r8[4300]
8000f7c6:	fc 1b 42 c8 	movh	r11,0x42c8
8000f7ca:	10 9c       	mov	r12,r8
8000f7cc:	f0 16 00 08 	mcall	r6[32]
8000f7d0:	18 98       	mov	r8,r12
8000f7d2:	10 95       	mov	r5,r8
8000f7d4:	f0 16 00 0f 	mcall	r6[60]
8000f7d8:	18 9b       	mov	r11,r12
8000f7da:	04 98       	mov	r8,r2
8000f7dc:	06 99       	mov	r9,r3
8000f7de:	0a 9a       	mov	r10,r5
8000f7e0:	30 0c       	mov	r12,0
8000f7e2:	fe b0 f2 f5 	rcall	8000ddcc <mavlink_msg_scaled_pressure_send>
	flush_mavlink();
8000f7e6:	f0 16 00 2c 	mcall	r6[176]
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0,get_millis(),"pressAlt", centralData->pressure.altitude);
8000f7ea:	ec f8 00 00 	ld.w	r8,r6[0]
8000f7ee:	70 08       	ld.w	r8,r8[0x0]
8000f7f0:	f0 f5 10 e0 	ld.w	r5,r8[4320]
8000f7f4:	f0 16 00 0f 	mcall	r6[60]
8000f7f8:	18 98       	mov	r8,r12
8000f7fa:	0a 99       	mov	r9,r5
8000f7fc:	fe ca 00 9c 	sub	r10,pc,156
8000f800:	10 9b       	mov	r11,r8
8000f802:	30 0c       	mov	r12,0
8000f804:	fe b0 f9 aa 	rcall	8000eb58 <mavlink_msg_named_value_float_send>
	flush_mavlink();
8000f808:	f0 16 00 2c 	mcall	r6[176]
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0,get_millis(),"lastAlt", centralData->position_estimator.last_alt);
8000f80c:	ec f8 00 00 	ld.w	r8,r6[0]
8000f810:	70 08       	ld.w	r8,r8[0x0]
8000f812:	f0 f5 0d 8c 	ld.w	r5,r8[3468]
8000f816:	f0 16 00 0f 	mcall	r6[60]
8000f81a:	18 98       	mov	r8,r12
8000f81c:	0a 99       	mov	r9,r5
8000f81e:	fe ca 00 b2 	sub	r10,pc,178
8000f822:	10 9b       	mov	r11,r8
8000f824:	30 0c       	mov	r12,0
8000f826:	fe b0 f9 99 	rcall	8000eb58 <mavlink_msg_named_value_float_send>
	flush_mavlink();
8000f82a:	f0 16 00 2c 	mcall	r6[176]
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0,get_millis(),"baro_dt", centralData->pressure.dt);
8000f82e:	ec f8 00 00 	ld.w	r8,r6[0]
8000f832:	70 08       	ld.w	r8,r8[0x0]
8000f834:	f0 f5 10 f8 	ld.w	r5,r8[4344]
8000f838:	f0 16 00 0f 	mcall	r6[60]
8000f83c:	18 98       	mov	r8,r12
8000f83e:	0a 99       	mov	r9,r5
8000f840:	fe ca 00 cc 	sub	r10,pc,204
8000f844:	10 9b       	mov	r11,r8
8000f846:	30 0c       	mov	r12,0
8000f848:	fe b0 f9 88 	rcall	8000eb58 <mavlink_msg_named_value_float_send>
	flush_mavlink();
8000f84c:	f0 16 00 2c 	mcall	r6[176]
	//mavlink_msg_named_value_float_send(MAVLINK_COMM_0,get_millis(),"pressFilt", centralData->altitude_filtered);
}
8000f850:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
8000f854:	80 00       	ld.sh	r0,r0[0x0]
8000f856:	f6 08       	*unknown*
8000f858:	52 61       	stdsp	sp[0x98],r1
8000f85a:	64 61       	ld.w	r1,r2[0x18]
8000f85c:	72 5f       	ld.w	pc,r9[0x14]
8000f85e:	76 65       	ld.w	r5,r11[0x18]
8000f860:	6c 6f       	ld.w	pc,r6[0x18]
8000f862:	63 69       	ld.w	r9,r1[0x58]
8000f864:	74 79       	ld.w	r9,r10[0x1c]
8000f866:	00 00       	add	r0,r0
8000f868:	52 61       	stdsp	sp[0x98],r1
8000f86a:	64 61       	ld.w	r1,r2[0x18]
8000f86c:	72 5f       	ld.w	pc,r9[0x14]
8000f86e:	61 6d       	ld.w	sp,r0[0x58]
8000f870:	70 6c       	ld.w	r12,r8[0x18]
8000f872:	69 74       	ld.w	r4,r4[0x5c]
8000f874:	75 64       	ld.w	r4,r10[0x58]
8000f876:	65 00       	ld.w	r0,r2[0x40]

8000f878 <mavlink_send_radar>:

void mavlink_send_radar(void) {
8000f878:	eb cd 40 e0 	pushm	r5-r7,lr
8000f87c:	1a 97       	mov	r7,sp
8000f87e:	20 1d       	sub	sp,4
8000f880:	49 76       	lddpc	r6,8000f8dc <mavlink_send_radar+0x64>
8000f882:	1e 26       	rsub	r6,pc
	read_radar();
8000f884:	f0 16 01 96 	mcall	r6[1624]
	radar_target *target=get_radar_main_target();
8000f888:	f0 16 01 a0 	mcall	r6[1664]
8000f88c:	18 98       	mov	r8,r12
8000f88e:	ef 48 ff fc 	st.w	r7[-4],r8
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "Radar_velocity", target->velocity);
8000f892:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000f896:	70 05       	ld.w	r5,r8[0x0]
8000f898:	f0 16 00 0f 	mcall	r6[60]
8000f89c:	18 98       	mov	r8,r12
8000f89e:	0a 99       	mov	r9,r5
8000f8a0:	fe ca 00 48 	sub	r10,pc,72
8000f8a4:	10 9b       	mov	r11,r8
8000f8a6:	30 0c       	mov	r12,0
8000f8a8:	fe b0 f9 58 	rcall	8000eb58 <mavlink_msg_named_value_float_send>
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "Radar_amplitude", target->amplitude/1000.0);
8000f8ac:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000f8b0:	70 18       	ld.w	r8,r8[0x4]
8000f8b2:	fc 1b 44 7a 	movh	r11,0x447a
8000f8b6:	10 9c       	mov	r12,r8
8000f8b8:	f0 16 00 08 	mcall	r6[32]
8000f8bc:	18 98       	mov	r8,r12
8000f8be:	10 95       	mov	r5,r8
8000f8c0:	f0 16 00 0f 	mcall	r6[60]
8000f8c4:	18 98       	mov	r8,r12
8000f8c6:	0a 99       	mov	r9,r5
8000f8c8:	fe ca 00 60 	sub	r10,pc,96
8000f8cc:	10 9b       	mov	r11,r8
8000f8ce:	30 0c       	mov	r12,0
8000f8d0:	fe b0 f9 44 	rcall	8000eb58 <mavlink_msg_named_value_float_send>
}
8000f8d4:	2f fd       	sub	sp,-4
8000f8d6:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000f8da:	00 00       	add	r0,r0
8000f8dc:	80 00       	ld.sh	r0,r0[0x0]
8000f8de:	f7 06 eb cd 	ld.sh	r6,r11[-5171]

8000f8e0 <mavlink_send_estimator>:

void mavlink_send_estimator(void)
{
8000f8e0:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
8000f8e4:	1a 97       	mov	r7,sp
8000f8e6:	20 1d       	sub	sp,4
8000f8e8:	49 a6       	lddpc	r6,8000f950 <mavlink_send_estimator+0x70>
8000f8ea:	1e 26       	rsub	r6,pc
	//mavlink_msg_local_position_ned_send(mavlink_channel_t chan, uint32_t time_boot_ms, float x, float y, float z, float vx, float vy, float vz)
	//mavlink_msg_local_position_ned_send(MAVLINK_COMM_0, get_millis(), centralData->estimation.state[0][0], centralData->estimation.state[1][0], centralData->estimation.state[2][0], centralData->estimation.state[0][1], centralData->estimation.state[1][1], centralData->estimation.state[2][1]);
	mavlink_msg_local_position_ned_send(MAVLINK_COMM_0, get_millis(), centralData->position_estimator.localPosition.pos[0], centralData->position_estimator.localPosition.pos[1], centralData->position_estimator.localPosition.pos[2], centralData->position_estimator.vel[0], centralData->position_estimator.vel[1], centralData->position_estimator.vel[2]);
8000f8ec:	ec f8 00 00 	ld.w	r8,r6[0]
8000f8f0:	70 08       	ld.w	r8,r8[0x0]
8000f8f2:	f0 f8 0d 7c 	ld.w	r8,r8[3452]
8000f8f6:	ef 48 ff fc 	st.w	r7[-4],r8
8000f8fa:	ec f8 00 00 	ld.w	r8,r6[0]
8000f8fe:	70 08       	ld.w	r8,r8[0x0]
8000f900:	f0 f0 0d 78 	ld.w	r0,r8[3448]
8000f904:	ec f8 00 00 	ld.w	r8,r6[0]
8000f908:	70 08       	ld.w	r8,r8[0x0]
8000f90a:	f0 f1 0d 74 	ld.w	r1,r8[3444]
8000f90e:	ec f8 00 00 	ld.w	r8,r6[0]
8000f912:	70 08       	ld.w	r8,r8[0x0]
8000f914:	f0 f2 0d a4 	ld.w	r2,r8[3492]
8000f918:	ec f8 00 00 	ld.w	r8,r6[0]
8000f91c:	70 08       	ld.w	r8,r8[0x0]
8000f91e:	f0 f3 0d a0 	ld.w	r3,r8[3488]
8000f922:	ec f8 00 00 	ld.w	r8,r6[0]
8000f926:	70 08       	ld.w	r8,r8[0x0]
8000f928:	f0 f5 0d 9c 	ld.w	r5,r8[3484]
8000f92c:	f0 16 00 0f 	mcall	r6[60]
8000f930:	18 9b       	mov	r11,r12
8000f932:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000f936:	1a d8       	st.w	--sp,r8
8000f938:	1a d0       	st.w	--sp,r0
8000f93a:	1a d1       	st.w	--sp,r1
8000f93c:	04 98       	mov	r8,r2
8000f93e:	06 99       	mov	r9,r3
8000f940:	0a 9a       	mov	r10,r5
8000f942:	30 0c       	mov	r12,0
8000f944:	fe b0 f3 4c 	rcall	8000dfdc <mavlink_msg_local_position_ned_send>
8000f948:	2f dd       	sub	sp,-12
	//dbg_print(", ");
	//dbg_print_num(centralData->position_estimator.localPosition.pos[Y],10);
	//dbg_print(", ");
	//dbg_print_num(centralData->position_estimator.localPosition.pos[Z],10);
	//dbg_print(")\n");
}
8000f94a:	2f fd       	sub	sp,-4
8000f94c:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
8000f950:	80 00       	ld.sh	r0,r0[0x0]
8000f952:	f7 6e 65 73 	st.b	r11[25971],lr
8000f956:	74 69       	ld.w	r9,r10[0x18]
8000f958:	58 00       	cp.w	r0,0
8000f95a:	00 00       	add	r0,r0
8000f95c:	65 73       	ld.w	r3,r2[0x5c]
8000f95e:	74 69       	ld.w	r9,r10[0x18]
8000f960:	59 00       	cp.w	r0,16
8000f962:	00 00       	add	r0,r0
8000f964:	65 73       	ld.w	r3,r2[0x5c]
8000f966:	74 69       	ld.w	r9,r10[0x18]
8000f968:	5a 00       	cp.w	r0,-32
8000f96a:	00 00       	add	r0,r0
8000f96c:	65 73       	ld.w	r3,r2[0x5c]
8000f96e:	74 69       	ld.w	r9,r10[0x18]
8000f970:	56 78       	stdsp	sp[0x19c],r8
8000f972:	00 00       	add	r0,r0
8000f974:	65 73       	ld.w	r3,r2[0x5c]
8000f976:	74 69       	ld.w	r9,r10[0x18]
8000f978:	56 79       	stdsp	sp[0x19c],r9
8000f97a:	00 00       	add	r0,r0
8000f97c:	65 73       	ld.w	r3,r2[0x5c]
8000f97e:	74 69       	ld.w	r9,r10[0x18]
8000f980:	56 7a       	stdsp	sp[0x19c],r10
8000f982:	00 00       	add	r0,r0
8000f984:	65 73       	ld.w	r3,r2[0x5c]
8000f986:	74 69       	ld.w	r9,r10[0x18]
8000f988:	62 69       	ld.w	r9,r1[0x18]
8000f98a:	61 69       	ld.w	r9,r0[0x58]
8000f98c:	73 58       	ld.w	r8,r9[0x54]
8000f98e:	00 00       	add	r0,r0
8000f990:	65 73       	ld.w	r3,r2[0x5c]
8000f992:	74 69       	ld.w	r9,r10[0x18]
8000f994:	62 69       	ld.w	r9,r1[0x18]
8000f996:	61 69       	ld.w	r9,r0[0x58]
8000f998:	73 59       	ld.w	r9,r9[0x54]
8000f99a:	00 00       	add	r0,r0
8000f99c:	65 73       	ld.w	r3,r2[0x5c]
8000f99e:	74 69       	ld.w	r9,r10[0x18]
8000f9a0:	62 69       	ld.w	r9,r1[0x18]
8000f9a2:	61 69       	ld.w	r9,r0[0x58]
8000f9a4:	73 5a       	ld.w	r10,r9[0x54]
	...

8000f9a8 <mavlink_send_kalman_estimator>:

void mavlink_send_kalman_estimator(void)
{
8000f9a8:	eb cd 40 e0 	pushm	r5-r7,lr
8000f9ac:	1a 97       	mov	r7,sp
8000f9ae:	4d d6       	lddpc	r6,8000fb20 <mavlink_send_kalman_estimator+0x178>
8000f9b0:	1e 26       	rsub	r6,pc
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "estiX", centralData->estimation.state[X][POSITION]);
8000f9b2:	ec f8 00 00 	ld.w	r8,r6[0]
8000f9b6:	70 08       	ld.w	r8,r8[0x0]
8000f9b8:	f0 e8 0b 5c 	ld.d	r8,r8[2908]
8000f9bc:	10 9a       	mov	r10,r8
8000f9be:	12 9b       	mov	r11,r9
8000f9c0:	f0 16 00 09 	mcall	r6[36]
8000f9c4:	18 95       	mov	r5,r12
8000f9c6:	f0 16 00 0f 	mcall	r6[60]
8000f9ca:	18 98       	mov	r8,r12
8000f9cc:	0a 99       	mov	r9,r5
8000f9ce:	fe ca 00 7a 	sub	r10,pc,122
8000f9d2:	10 9b       	mov	r11,r8
8000f9d4:	30 0c       	mov	r12,0
8000f9d6:	fe b0 f8 c1 	rcall	8000eb58 <mavlink_msg_named_value_float_send>
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "estiY", centralData->estimation.state[Y][POSITION]);
8000f9da:	ec f8 00 00 	ld.w	r8,r6[0]
8000f9de:	70 08       	ld.w	r8,r8[0x0]
8000f9e0:	f0 e8 0b 74 	ld.d	r8,r8[2932]
8000f9e4:	10 9a       	mov	r10,r8
8000f9e6:	12 9b       	mov	r11,r9
8000f9e8:	f0 16 00 09 	mcall	r6[36]
8000f9ec:	18 95       	mov	r5,r12
8000f9ee:	f0 16 00 0f 	mcall	r6[60]
8000f9f2:	18 98       	mov	r8,r12
8000f9f4:	0a 99       	mov	r9,r5
8000f9f6:	fe ca 00 9a 	sub	r10,pc,154
8000f9fa:	10 9b       	mov	r11,r8
8000f9fc:	30 0c       	mov	r12,0
8000f9fe:	fe b0 f8 ad 	rcall	8000eb58 <mavlink_msg_named_value_float_send>
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "estiZ", centralData->estimation.state[Z][POSITION]);
8000fa02:	ec f8 00 00 	ld.w	r8,r6[0]
8000fa06:	70 08       	ld.w	r8,r8[0x0]
8000fa08:	f0 e8 0b 8c 	ld.d	r8,r8[2956]
8000fa0c:	10 9a       	mov	r10,r8
8000fa0e:	12 9b       	mov	r11,r9
8000fa10:	f0 16 00 09 	mcall	r6[36]
8000fa14:	18 95       	mov	r5,r12
8000fa16:	f0 16 00 0f 	mcall	r6[60]
8000fa1a:	18 98       	mov	r8,r12
8000fa1c:	0a 99       	mov	r9,r5
8000fa1e:	fe ca 00 ba 	sub	r10,pc,186
8000fa22:	10 9b       	mov	r11,r8
8000fa24:	30 0c       	mov	r12,0
8000fa26:	fe b0 f8 99 	rcall	8000eb58 <mavlink_msg_named_value_float_send>
	
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "estiVx", centralData->estimation.state[X][SPEED]);
8000fa2a:	ec f8 00 00 	ld.w	r8,r6[0]
8000fa2e:	70 08       	ld.w	r8,r8[0x0]
8000fa30:	f0 e8 0b 64 	ld.d	r8,r8[2916]
8000fa34:	10 9a       	mov	r10,r8
8000fa36:	12 9b       	mov	r11,r9
8000fa38:	f0 16 00 09 	mcall	r6[36]
8000fa3c:	18 95       	mov	r5,r12
8000fa3e:	f0 16 00 0f 	mcall	r6[60]
8000fa42:	18 98       	mov	r8,r12
8000fa44:	0a 99       	mov	r9,r5
8000fa46:	fe ca 00 da 	sub	r10,pc,218
8000fa4a:	10 9b       	mov	r11,r8
8000fa4c:	30 0c       	mov	r12,0
8000fa4e:	fe b0 f8 85 	rcall	8000eb58 <mavlink_msg_named_value_float_send>
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "estiVy", centralData->estimation.state[Y][SPEED]);
8000fa52:	ec f8 00 00 	ld.w	r8,r6[0]
8000fa56:	70 08       	ld.w	r8,r8[0x0]
8000fa58:	f0 e8 0b 7c 	ld.d	r8,r8[2940]
8000fa5c:	10 9a       	mov	r10,r8
8000fa5e:	12 9b       	mov	r11,r9
8000fa60:	f0 16 00 09 	mcall	r6[36]
8000fa64:	18 95       	mov	r5,r12
8000fa66:	f0 16 00 0f 	mcall	r6[60]
8000fa6a:	18 98       	mov	r8,r12
8000fa6c:	0a 99       	mov	r9,r5
8000fa6e:	fe ca 00 fa 	sub	r10,pc,250
8000fa72:	10 9b       	mov	r11,r8
8000fa74:	30 0c       	mov	r12,0
8000fa76:	fe b0 f8 71 	rcall	8000eb58 <mavlink_msg_named_value_float_send>
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "estiVz", centralData->estimation.state[Z][SPEED]);
8000fa7a:	ec f8 00 00 	ld.w	r8,r6[0]
8000fa7e:	70 08       	ld.w	r8,r8[0x0]
8000fa80:	f0 e8 0b 94 	ld.d	r8,r8[2964]
8000fa84:	10 9a       	mov	r10,r8
8000fa86:	12 9b       	mov	r11,r9
8000fa88:	f0 16 00 09 	mcall	r6[36]
8000fa8c:	18 95       	mov	r5,r12
8000fa8e:	f0 16 00 0f 	mcall	r6[60]
8000fa92:	18 98       	mov	r8,r12
8000fa94:	0a 99       	mov	r9,r5
8000fa96:	fe ca 01 1a 	sub	r10,pc,282
8000fa9a:	10 9b       	mov	r11,r8
8000fa9c:	30 0c       	mov	r12,0
8000fa9e:	fe b0 f8 5d 	rcall	8000eb58 <mavlink_msg_named_value_float_send>
	
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "estibiaisX", centralData->estimation.state[X][BIAIS]);
8000faa2:	ec f8 00 00 	ld.w	r8,r6[0]
8000faa6:	70 08       	ld.w	r8,r8[0x0]
8000faa8:	f0 e8 0b 6c 	ld.d	r8,r8[2924]
8000faac:	10 9a       	mov	r10,r8
8000faae:	12 9b       	mov	r11,r9
8000fab0:	f0 16 00 09 	mcall	r6[36]
8000fab4:	18 95       	mov	r5,r12
8000fab6:	f0 16 00 0f 	mcall	r6[60]
8000faba:	18 98       	mov	r8,r12
8000fabc:	0a 99       	mov	r9,r5
8000fabe:	fe ca 01 3a 	sub	r10,pc,314
8000fac2:	10 9b       	mov	r11,r8
8000fac4:	30 0c       	mov	r12,0
8000fac6:	fe b0 f8 49 	rcall	8000eb58 <mavlink_msg_named_value_float_send>
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "estibiaisY", centralData->estimation.state[Y][BIAIS]);
8000faca:	ec f8 00 00 	ld.w	r8,r6[0]
8000face:	70 08       	ld.w	r8,r8[0x0]
8000fad0:	f0 e8 0b 84 	ld.d	r8,r8[2948]
8000fad4:	10 9a       	mov	r10,r8
8000fad6:	12 9b       	mov	r11,r9
8000fad8:	f0 16 00 09 	mcall	r6[36]
8000fadc:	18 95       	mov	r5,r12
8000fade:	f0 16 00 0f 	mcall	r6[60]
8000fae2:	18 98       	mov	r8,r12
8000fae4:	0a 99       	mov	r9,r5
8000fae6:	fe ca 01 56 	sub	r10,pc,342
8000faea:	10 9b       	mov	r11,r8
8000faec:	30 0c       	mov	r12,0
8000faee:	fe b0 f8 35 	rcall	8000eb58 <mavlink_msg_named_value_float_send>
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "estibiaisZ", centralData->estimation.state[Z][BIAIS]);
8000faf2:	ec f8 00 00 	ld.w	r8,r6[0]
8000faf6:	70 08       	ld.w	r8,r8[0x0]
8000faf8:	f0 e8 0b 9c 	ld.d	r8,r8[2972]
8000fafc:	10 9a       	mov	r10,r8
8000fafe:	12 9b       	mov	r11,r9
8000fb00:	f0 16 00 09 	mcall	r6[36]
8000fb04:	18 95       	mov	r5,r12
8000fb06:	f0 16 00 0f 	mcall	r6[60]
8000fb0a:	18 98       	mov	r8,r12
8000fb0c:	0a 99       	mov	r9,r5
8000fb0e:	fe ca 01 72 	sub	r10,pc,370
8000fb12:	10 9b       	mov	r11,r8
8000fb14:	30 0c       	mov	r12,0
8000fb16:	fe b0 f8 21 	rcall	8000eb58 <mavlink_msg_named_value_float_send>
	//mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "acc_bfZ", centralData->position_estimator.vel_bf[Y]);
	//mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "acc_bfZ", centralData->position_estimator.vel_bf[Z]);
	
	//mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "estiDeltaT", centralData->estimation.delta_t_filter);
	//mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "imuDeltaT", centralData->imu1.dt);
}
8000fb1a:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000fb1e:	00 00       	add	r0,r0
8000fb20:	80 00       	ld.sh	r0,r0[0x0]
8000fb22:	f8 34 eb cd 	sub	r4,-398387

8000fb24 <mavlink_send_raw_rc_channels>:
void mavlink_send_raw_rc_channels(void)
{
8000fb24:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
8000fb28:	1a 97       	mov	r7,sp
8000fb2a:	20 4d       	sub	sp,16
8000fb2c:	4b 86       	lddpc	r6,8000fc0c <mavlink_send_raw_rc_channels+0xe8>
8000fb2e:	1e 26       	rsub	r6,pc
	rc_get_channel(3)+1000,
	rc_get_channel(4)+1000,
	rc_get_channel(5)+1000,
	rc_get_channel(6)+1000,
	rc_get_channel(7)+1000,
	rc_check_receivers());
8000fb30:	f0 16 00 9e 	mcall	r6[632]
8000fb34:	18 98       	mov	r8,r12
8000fb36:	5c 58       	castu.b	r8
	//mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "estiDeltaT", centralData->estimation.delta_t_filter);
	//mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "imuDeltaT", centralData->imu1.dt);
}
void mavlink_send_raw_rc_channels(void)
{
	mavlink_msg_rc_channels_raw_send(MAVLINK_COMM_0,get_millis(),1,
8000fb38:	5c 58       	castu.b	r8
8000fb3a:	ef 48 ff f0 	st.w	r7[-16],r8
8000fb3e:	30 7c       	mov	r12,7
8000fb40:	f0 16 00 1b 	mcall	r6[108]
8000fb44:	18 98       	mov	r8,r12
8000fb46:	f0 c8 fc 18 	sub	r8,r8,-1000
8000fb4a:	5c 88       	casts.h	r8
8000fb4c:	5c 78       	castu.h	r8
8000fb4e:	ef 48 ff f4 	st.w	r7[-12],r8
8000fb52:	30 6c       	mov	r12,6
8000fb54:	f0 16 00 1b 	mcall	r6[108]
8000fb58:	18 98       	mov	r8,r12
8000fb5a:	f0 c8 fc 18 	sub	r8,r8,-1000
8000fb5e:	5c 88       	casts.h	r8
8000fb60:	5c 78       	castu.h	r8
8000fb62:	ef 48 ff f8 	st.w	r7[-8],r8
8000fb66:	30 5c       	mov	r12,5
8000fb68:	f0 16 00 1b 	mcall	r6[108]
8000fb6c:	18 98       	mov	r8,r12
8000fb6e:	f0 c8 fc 18 	sub	r8,r8,-1000
8000fb72:	5c 88       	casts.h	r8
8000fb74:	5c 78       	castu.h	r8
8000fb76:	ef 48 ff fc 	st.w	r7[-4],r8
8000fb7a:	30 4c       	mov	r12,4
8000fb7c:	f0 16 00 1b 	mcall	r6[108]
8000fb80:	18 98       	mov	r8,r12
8000fb82:	f0 c8 fc 18 	sub	r8,r8,-1000
8000fb86:	5c 88       	casts.h	r8
8000fb88:	e1 d8 c0 10 	bfextu	r0,r8,0x0,0x10
8000fb8c:	30 3c       	mov	r12,3
8000fb8e:	f0 16 00 1b 	mcall	r6[108]
8000fb92:	18 98       	mov	r8,r12
8000fb94:	f0 c8 fc 18 	sub	r8,r8,-1000
8000fb98:	5c 88       	casts.h	r8
8000fb9a:	e3 d8 c0 10 	bfextu	r1,r8,0x0,0x10
8000fb9e:	30 2c       	mov	r12,2
8000fba0:	f0 16 00 1b 	mcall	r6[108]
8000fba4:	18 98       	mov	r8,r12
8000fba6:	f0 c8 fc 18 	sub	r8,r8,-1000
8000fbaa:	5c 88       	casts.h	r8
8000fbac:	e5 d8 c0 10 	bfextu	r2,r8,0x0,0x10
8000fbb0:	30 1c       	mov	r12,1
8000fbb2:	f0 16 00 1b 	mcall	r6[108]
8000fbb6:	18 98       	mov	r8,r12
8000fbb8:	f0 c8 fc 18 	sub	r8,r8,-1000
8000fbbc:	5c 88       	casts.h	r8
8000fbbe:	e7 d8 c0 10 	bfextu	r3,r8,0x0,0x10
8000fbc2:	30 0c       	mov	r12,0
8000fbc4:	f0 16 00 1b 	mcall	r6[108]
8000fbc8:	18 98       	mov	r8,r12
8000fbca:	f0 c8 fc 18 	sub	r8,r8,-1000
8000fbce:	5c 88       	casts.h	r8
8000fbd0:	eb d8 c0 10 	bfextu	r5,r8,0x0,0x10
8000fbd4:	f0 16 00 0f 	mcall	r6[60]
8000fbd8:	18 9b       	mov	r11,r12
8000fbda:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000fbde:	1a d8       	st.w	--sp,r8
8000fbe0:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000fbe4:	1a d8       	st.w	--sp,r8
8000fbe6:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000fbea:	1a d8       	st.w	--sp,r8
8000fbec:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000fbf0:	1a d8       	st.w	--sp,r8
8000fbf2:	1a d0       	st.w	--sp,r0
8000fbf4:	1a d1       	st.w	--sp,r1
8000fbf6:	1a d2       	st.w	--sp,r2
8000fbf8:	06 98       	mov	r8,r3
8000fbfa:	0a 99       	mov	r9,r5
8000fbfc:	30 1a       	mov	r10,1
8000fbfe:	30 0c       	mov	r12,0
8000fc00:	fe b0 f3 5e 	rcall	8000e2bc <mavlink_msg_rc_channels_raw_send>
8000fc04:	2f 9d       	sub	sp,-28
	rc_get_channel(4)+1000,
	rc_get_channel(5)+1000,
	rc_get_channel(6)+1000,
	rc_get_channel(7)+1000,
	rc_check_receivers());
}
8000fc06:	2f cd       	sub	sp,-16
8000fc08:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
8000fc0c:	80 00       	ld.sh	r0,r0[0x0]
8000fc0e:	f9 b2       	*unknown*
8000fc10:	43 6f       	lddsp	pc,sp[0xd8]
8000fc12:	6c 6c       	ld.w	r12,r6[0x18]
8000fc14:	5f 41       	srge	r1
8000fc16:	76 6f       	ld.w	pc,r11[0x18]
8000fc18:	69 64       	ld.w	r4,r4[0x58]
8000fc1a:	61 6e       	ld.w	lr,r0[0x58]
8000fc1c:	63 65       	ld.w	r5,r1[0x58]
	...

8000fc20 <mavlink_send_scaled_rc_channels>:

void mavlink_send_scaled_rc_channels(void)
{
8000fc20:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
8000fc24:	1a 97       	mov	r7,sp
8000fc26:	20 4d       	sub	sp,16
8000fc28:	fe f6 02 94 	ld.w	r6,pc[660]
8000fc2c:	1e 26       	rsub	r6,pc
	rc_get_channel(3) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(4) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(5) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(6) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(7) * 1000.0 * RC_SCALEFACTOR,
	rc_check_receivers());
8000fc2e:	f0 16 00 9e 	mcall	r6[632]
8000fc32:	18 98       	mov	r8,r12
8000fc34:	5c 58       	castu.b	r8
	rc_check_receivers());
}

void mavlink_send_scaled_rc_channels(void)
{
	mavlink_msg_rc_channels_scaled_send(MAVLINK_COMM_0,get_millis(),1,
8000fc36:	5c 58       	castu.b	r8
8000fc38:	ef 48 ff f0 	st.w	r7[-16],r8
	rc_get_channel(2) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(3) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(4) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(5) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(6) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(7) * 1000.0 * RC_SCALEFACTOR,
8000fc3c:	30 7c       	mov	r12,7
8000fc3e:	f0 16 00 1b 	mcall	r6[108]
8000fc42:	18 98       	mov	r8,r12
8000fc44:	10 9c       	mov	r12,r8
8000fc46:	f0 16 00 1a 	mcall	r6[104]
8000fc4a:	30 08       	mov	r8,0
8000fc4c:	e0 69 40 00 	mov	r9,16384
8000fc50:	ea 19 40 8f 	orh	r9,0x408f
8000fc54:	f0 16 00 03 	mcall	r6[12]
8000fc58:	14 98       	mov	r8,r10
8000fc5a:	16 99       	mov	r9,r11
8000fc5c:	10 9a       	mov	r10,r8
8000fc5e:	12 9b       	mov	r11,r9
8000fc60:	30 08       	mov	r8,0
8000fc62:	e0 69 60 00 	mov	r9,24576
8000fc66:	ea 19 40 7b 	orh	r9,0x407b
8000fc6a:	f0 16 00 0c 	mcall	r6[48]
8000fc6e:	14 98       	mov	r8,r10
8000fc70:	16 99       	mov	r9,r11
	rc_check_receivers());
}

void mavlink_send_scaled_rc_channels(void)
{
	mavlink_msg_rc_channels_scaled_send(MAVLINK_COMM_0,get_millis(),1,
8000fc72:	10 9a       	mov	r10,r8
8000fc74:	12 9b       	mov	r11,r9
8000fc76:	f0 16 00 14 	mcall	r6[80]
8000fc7a:	18 98       	mov	r8,r12
8000fc7c:	5c 88       	casts.h	r8
8000fc7e:	ef 48 ff f4 	st.w	r7[-12],r8
	rc_get_channel(1) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(2) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(3) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(4) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(5) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(6) * 1000.0 * RC_SCALEFACTOR,
8000fc82:	30 6c       	mov	r12,6
8000fc84:	f0 16 00 1b 	mcall	r6[108]
8000fc88:	18 98       	mov	r8,r12
8000fc8a:	10 9c       	mov	r12,r8
8000fc8c:	f0 16 00 1a 	mcall	r6[104]
8000fc90:	30 08       	mov	r8,0
8000fc92:	e0 69 40 00 	mov	r9,16384
8000fc96:	ea 19 40 8f 	orh	r9,0x408f
8000fc9a:	f0 16 00 03 	mcall	r6[12]
8000fc9e:	14 98       	mov	r8,r10
8000fca0:	16 99       	mov	r9,r11
8000fca2:	10 9a       	mov	r10,r8
8000fca4:	12 9b       	mov	r11,r9
8000fca6:	30 08       	mov	r8,0
8000fca8:	e0 69 60 00 	mov	r9,24576
8000fcac:	ea 19 40 7b 	orh	r9,0x407b
8000fcb0:	f0 16 00 0c 	mcall	r6[48]
8000fcb4:	14 98       	mov	r8,r10
8000fcb6:	16 99       	mov	r9,r11
	rc_check_receivers());
}

void mavlink_send_scaled_rc_channels(void)
{
	mavlink_msg_rc_channels_scaled_send(MAVLINK_COMM_0,get_millis(),1,
8000fcb8:	10 9a       	mov	r10,r8
8000fcba:	12 9b       	mov	r11,r9
8000fcbc:	f0 16 00 14 	mcall	r6[80]
8000fcc0:	18 98       	mov	r8,r12
8000fcc2:	5c 88       	casts.h	r8
8000fcc4:	ef 48 ff f8 	st.w	r7[-8],r8
	rc_get_channel(0) * 1000.0 * RC_SCALEFACTOR ,
	rc_get_channel(1) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(2) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(3) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(4) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(5) * 1000.0 * RC_SCALEFACTOR,
8000fcc8:	30 5c       	mov	r12,5
8000fcca:	f0 16 00 1b 	mcall	r6[108]
8000fcce:	18 98       	mov	r8,r12
8000fcd0:	10 9c       	mov	r12,r8
8000fcd2:	f0 16 00 1a 	mcall	r6[104]
8000fcd6:	30 08       	mov	r8,0
8000fcd8:	e0 69 40 00 	mov	r9,16384
8000fcdc:	ea 19 40 8f 	orh	r9,0x408f
8000fce0:	f0 16 00 03 	mcall	r6[12]
8000fce4:	14 98       	mov	r8,r10
8000fce6:	16 99       	mov	r9,r11
8000fce8:	10 9a       	mov	r10,r8
8000fcea:	12 9b       	mov	r11,r9
8000fcec:	30 08       	mov	r8,0
8000fcee:	e0 69 60 00 	mov	r9,24576
8000fcf2:	ea 19 40 7b 	orh	r9,0x407b
8000fcf6:	f0 16 00 0c 	mcall	r6[48]
8000fcfa:	14 98       	mov	r8,r10
8000fcfc:	16 99       	mov	r9,r11
	rc_check_receivers());
}

void mavlink_send_scaled_rc_channels(void)
{
	mavlink_msg_rc_channels_scaled_send(MAVLINK_COMM_0,get_millis(),1,
8000fcfe:	10 9a       	mov	r10,r8
8000fd00:	12 9b       	mov	r11,r9
8000fd02:	f0 16 00 14 	mcall	r6[80]
8000fd06:	18 98       	mov	r8,r12
8000fd08:	5c 88       	casts.h	r8
8000fd0a:	ef 48 ff fc 	st.w	r7[-4],r8
	rc_get_channel(0) * 1000.0 * RC_SCALEFACTOR ,
	rc_get_channel(1) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(2) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(3) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(4) * 1000.0 * RC_SCALEFACTOR,
8000fd0e:	30 4c       	mov	r12,4
8000fd10:	f0 16 00 1b 	mcall	r6[108]
8000fd14:	18 98       	mov	r8,r12
8000fd16:	10 9c       	mov	r12,r8
8000fd18:	f0 16 00 1a 	mcall	r6[104]
8000fd1c:	30 08       	mov	r8,0
8000fd1e:	e0 69 40 00 	mov	r9,16384
8000fd22:	ea 19 40 8f 	orh	r9,0x408f
8000fd26:	f0 16 00 03 	mcall	r6[12]
8000fd2a:	14 98       	mov	r8,r10
8000fd2c:	16 99       	mov	r9,r11
8000fd2e:	10 9a       	mov	r10,r8
8000fd30:	12 9b       	mov	r11,r9
8000fd32:	30 08       	mov	r8,0
8000fd34:	e0 69 60 00 	mov	r9,24576
8000fd38:	ea 19 40 7b 	orh	r9,0x407b
8000fd3c:	f0 16 00 0c 	mcall	r6[48]
8000fd40:	14 98       	mov	r8,r10
8000fd42:	16 99       	mov	r9,r11
	rc_check_receivers());
}

void mavlink_send_scaled_rc_channels(void)
{
	mavlink_msg_rc_channels_scaled_send(MAVLINK_COMM_0,get_millis(),1,
8000fd44:	10 9a       	mov	r10,r8
8000fd46:	12 9b       	mov	r11,r9
8000fd48:	f0 16 00 14 	mcall	r6[80]
8000fd4c:	18 98       	mov	r8,r12
8000fd4e:	5c 88       	casts.h	r8
8000fd50:	10 90       	mov	r0,r8
	rc_get_channel(0) * 1000.0 * RC_SCALEFACTOR ,
	rc_get_channel(1) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(2) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(3) * 1000.0 * RC_SCALEFACTOR,
8000fd52:	30 3c       	mov	r12,3
8000fd54:	f0 16 00 1b 	mcall	r6[108]
8000fd58:	18 98       	mov	r8,r12
8000fd5a:	10 9c       	mov	r12,r8
8000fd5c:	f0 16 00 1a 	mcall	r6[104]
8000fd60:	30 08       	mov	r8,0
8000fd62:	e0 69 40 00 	mov	r9,16384
8000fd66:	ea 19 40 8f 	orh	r9,0x408f
8000fd6a:	f0 16 00 03 	mcall	r6[12]
8000fd6e:	14 98       	mov	r8,r10
8000fd70:	16 99       	mov	r9,r11
8000fd72:	10 9a       	mov	r10,r8
8000fd74:	12 9b       	mov	r11,r9
8000fd76:	30 08       	mov	r8,0
8000fd78:	e0 69 60 00 	mov	r9,24576
8000fd7c:	ea 19 40 7b 	orh	r9,0x407b
8000fd80:	f0 16 00 0c 	mcall	r6[48]
8000fd84:	14 98       	mov	r8,r10
8000fd86:	16 99       	mov	r9,r11
	rc_check_receivers());
}

void mavlink_send_scaled_rc_channels(void)
{
	mavlink_msg_rc_channels_scaled_send(MAVLINK_COMM_0,get_millis(),1,
8000fd88:	10 9a       	mov	r10,r8
8000fd8a:	12 9b       	mov	r11,r9
8000fd8c:	f0 16 00 14 	mcall	r6[80]
8000fd90:	18 98       	mov	r8,r12
8000fd92:	5c 88       	casts.h	r8
8000fd94:	10 91       	mov	r1,r8
	rc_get_channel(0) * 1000.0 * RC_SCALEFACTOR ,
	rc_get_channel(1) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(2) * 1000.0 * RC_SCALEFACTOR,
8000fd96:	30 2c       	mov	r12,2
8000fd98:	f0 16 00 1b 	mcall	r6[108]
8000fd9c:	18 98       	mov	r8,r12
8000fd9e:	10 9c       	mov	r12,r8
8000fda0:	f0 16 00 1a 	mcall	r6[104]
8000fda4:	30 08       	mov	r8,0
8000fda6:	e0 69 40 00 	mov	r9,16384
8000fdaa:	ea 19 40 8f 	orh	r9,0x408f
8000fdae:	f0 16 00 03 	mcall	r6[12]
8000fdb2:	14 98       	mov	r8,r10
8000fdb4:	16 99       	mov	r9,r11
8000fdb6:	10 9a       	mov	r10,r8
8000fdb8:	12 9b       	mov	r11,r9
8000fdba:	30 08       	mov	r8,0
8000fdbc:	e0 69 60 00 	mov	r9,24576
8000fdc0:	ea 19 40 7b 	orh	r9,0x407b
8000fdc4:	f0 16 00 0c 	mcall	r6[48]
8000fdc8:	14 98       	mov	r8,r10
8000fdca:	16 99       	mov	r9,r11
	rc_check_receivers());
}

void mavlink_send_scaled_rc_channels(void)
{
	mavlink_msg_rc_channels_scaled_send(MAVLINK_COMM_0,get_millis(),1,
8000fdcc:	10 9a       	mov	r10,r8
8000fdce:	12 9b       	mov	r11,r9
8000fdd0:	f0 16 00 14 	mcall	r6[80]
8000fdd4:	18 98       	mov	r8,r12
8000fdd6:	5c 88       	casts.h	r8
8000fdd8:	10 92       	mov	r2,r8
	rc_get_channel(0) * 1000.0 * RC_SCALEFACTOR ,
	rc_get_channel(1) * 1000.0 * RC_SCALEFACTOR,
8000fdda:	30 1c       	mov	r12,1
8000fddc:	f0 16 00 1b 	mcall	r6[108]
8000fde0:	18 98       	mov	r8,r12
8000fde2:	10 9c       	mov	r12,r8
8000fde4:	f0 16 00 1a 	mcall	r6[104]
8000fde8:	30 08       	mov	r8,0
8000fdea:	e0 69 40 00 	mov	r9,16384
8000fdee:	ea 19 40 8f 	orh	r9,0x408f
8000fdf2:	f0 16 00 03 	mcall	r6[12]
8000fdf6:	14 98       	mov	r8,r10
8000fdf8:	16 99       	mov	r9,r11
8000fdfa:	10 9a       	mov	r10,r8
8000fdfc:	12 9b       	mov	r11,r9
8000fdfe:	30 08       	mov	r8,0
8000fe00:	e0 69 60 00 	mov	r9,24576
8000fe04:	ea 19 40 7b 	orh	r9,0x407b
8000fe08:	f0 16 00 0c 	mcall	r6[48]
8000fe0c:	14 98       	mov	r8,r10
8000fe0e:	16 99       	mov	r9,r11
	rc_check_receivers());
}

void mavlink_send_scaled_rc_channels(void)
{
	mavlink_msg_rc_channels_scaled_send(MAVLINK_COMM_0,get_millis(),1,
8000fe10:	10 9a       	mov	r10,r8
8000fe12:	12 9b       	mov	r11,r9
8000fe14:	f0 16 00 14 	mcall	r6[80]
8000fe18:	18 98       	mov	r8,r12
8000fe1a:	5c 88       	casts.h	r8
8000fe1c:	10 93       	mov	r3,r8
	rc_get_channel(0) * 1000.0 * RC_SCALEFACTOR ,
8000fe1e:	30 0c       	mov	r12,0
8000fe20:	f0 16 00 1b 	mcall	r6[108]
8000fe24:	18 98       	mov	r8,r12
8000fe26:	10 9c       	mov	r12,r8
8000fe28:	f0 16 00 1a 	mcall	r6[104]
8000fe2c:	30 08       	mov	r8,0
8000fe2e:	e0 69 40 00 	mov	r9,16384
8000fe32:	ea 19 40 8f 	orh	r9,0x408f
8000fe36:	f0 16 00 03 	mcall	r6[12]
8000fe3a:	14 98       	mov	r8,r10
8000fe3c:	16 99       	mov	r9,r11
8000fe3e:	10 9a       	mov	r10,r8
8000fe40:	12 9b       	mov	r11,r9
8000fe42:	30 08       	mov	r8,0
8000fe44:	e0 69 60 00 	mov	r9,24576
8000fe48:	ea 19 40 7b 	orh	r9,0x407b
8000fe4c:	f0 16 00 0c 	mcall	r6[48]
8000fe50:	14 98       	mov	r8,r10
8000fe52:	16 99       	mov	r9,r11
	rc_check_receivers());
}

void mavlink_send_scaled_rc_channels(void)
{
	mavlink_msg_rc_channels_scaled_send(MAVLINK_COMM_0,get_millis(),1,
8000fe54:	10 9a       	mov	r10,r8
8000fe56:	12 9b       	mov	r11,r9
8000fe58:	f0 16 00 14 	mcall	r6[80]
8000fe5c:	18 98       	mov	r8,r12
8000fe5e:	5c 88       	casts.h	r8
8000fe60:	10 95       	mov	r5,r8
8000fe62:	f0 16 00 0f 	mcall	r6[60]
8000fe66:	18 9b       	mov	r11,r12
8000fe68:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000fe6c:	1a d8       	st.w	--sp,r8
8000fe6e:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000fe72:	1a d8       	st.w	--sp,r8
8000fe74:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000fe78:	1a d8       	st.w	--sp,r8
8000fe7a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000fe7e:	1a d8       	st.w	--sp,r8
8000fe80:	1a d0       	st.w	--sp,r0
8000fe82:	1a d1       	st.w	--sp,r1
8000fe84:	1a d2       	st.w	--sp,r2
8000fe86:	06 98       	mov	r8,r3
8000fe88:	0a 99       	mov	r9,r5
8000fe8a:	30 1a       	mov	r10,1
8000fe8c:	30 0c       	mov	r12,0
8000fe8e:	fe b0 f1 81 	rcall	8000e190 <mavlink_msg_rc_channels_scaled_send>
8000fe92:	2f 9d       	sub	sp,-28
	rc_get_channel(5) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(6) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(7) * 1000.0 * RC_SCALEFACTOR,
	rc_check_receivers());
	
	mavlink_msg_named_value_int_send(MAVLINK_COMM_0,get_millis(),"Coll_Avoidance",centralData->collision_avoidance);
8000fe94:	ec f8 00 00 	ld.w	r8,r6[0]
8000fe98:	70 08       	ld.w	r8,r8[0x0]
8000fe9a:	f1 38 10 bb 	ld.ub	r8,r8[4283]
8000fe9e:	10 95       	mov	r5,r8
8000fea0:	f0 16 00 0f 	mcall	r6[60]
8000fea4:	18 98       	mov	r8,r12
8000fea6:	0a 99       	mov	r9,r5
8000fea8:	fe ca 02 98 	sub	r10,pc,664
8000feac:	10 9b       	mov	r11,r8
8000feae:	30 0c       	mov	r12,0
8000feb0:	fe b0 f6 8c 	rcall	8000ebc8 <mavlink_msg_named_value_int_send>
}
8000feb4:	2f cd       	sub	sp,-16
8000feb6:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
8000feba:	00 00       	add	r0,r0
8000febc:	80 00       	ld.sh	r0,r0[0x0]
8000febe:	fa b0 72 6f 	rcall	7ff7e39c <_estack+0x7ff6e39c>
8000fec2:	6c 6c       	ld.w	r12,r6[0x18]
8000fec4:	74 6f       	ld.w	pc,r10[0x18]
8000fec6:	72 71       	ld.w	r1,r9[0x1c]
8000fec8:	75 65       	ld.w	r5,r10[0x58]
8000feca:	00 00       	add	r0,r0
8000fecc:	70 69       	ld.w	r9,r8[0x18]
8000fece:	74 63       	ld.w	r3,r10[0x18]
8000fed0:	68 74       	ld.w	r4,r4[0x1c]
8000fed2:	6f 72       	ld.w	r2,r7[0x5c]
8000fed4:	71 75       	ld.w	r5,r8[0x5c]
8000fed6:	65 00       	ld.w	r0,r2[0x40]
8000fed8:	79 61       	ld.w	r1,r12[0x58]
8000feda:	77 74       	ld.w	r4,r11[0x5c]
8000fedc:	6f 72       	ld.w	r2,r7[0x5c]
8000fede:	71 75       	ld.w	r5,r8[0x5c]
8000fee0:	65 00       	ld.w	r0,r2[0x40]
8000fee2:	00 00       	add	r0,r0
8000fee4:	74 68       	ld.w	r8,r10[0x18]
8000fee6:	72 75       	ld.w	r5,r9[0x1c]
8000fee8:	73 74       	ld.w	r4,r9[0x5c]
8000feea:	00 00       	add	r0,r0
8000feec:	72 70       	ld.w	r0,r9[0x1c]
8000feee:	6d 31       	ld.w	r1,r6[0x4c]
8000fef0:	00 00       	add	r0,r0
8000fef2:	00 00       	add	r0,r0
8000fef4:	72 70       	ld.w	r0,r9[0x1c]
8000fef6:	6d 32       	ld.w	r2,r6[0x4c]
8000fef8:	00 00       	add	r0,r0
8000fefa:	00 00       	add	r0,r0
8000fefc:	72 70       	ld.w	r0,r9[0x1c]
8000fefe:	6d 33       	ld.w	r3,r6[0x4c]
8000ff00:	00 00       	add	r0,r0
8000ff02:	00 00       	add	r0,r0
8000ff04:	72 70       	ld.w	r0,r9[0x1c]
8000ff06:	6d 34       	ld.w	r4,r6[0x4c]
	...

8000ff0a <mavlink_send_simulation>:

void mavlink_send_simulation(void) {
8000ff0a:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
8000ff0e:	1a 97       	mov	r7,sp
8000ff10:	21 6d       	sub	sp,88
8000ff12:	fe f6 03 66 	ld.w	r6,pc[870]
8000ff16:	1e 26       	rsub	r6,pc
	Aero_Attitude_t aero_attitude;
	aero_attitude=Quat_to_Aero(centralData->sim_model.attitude.qe);
8000ff18:	ec f8 00 00 	ld.w	r8,r6[0]
8000ff1c:	70 09       	ld.w	r9,r8[0x0]
8000ff1e:	ee ca 00 0c 	sub	r10,r7,12
8000ff22:	20 4d       	sub	sp,16
8000ff24:	1a 98       	mov	r8,sp
8000ff26:	f2 c9 f4 10 	sub	r9,r9,-3056
8000ff2a:	20 08       	sub	r8,0
8000ff2c:	20 09       	sub	r9,0
8000ff2e:	72 0b       	ld.w	r11,r9[0x0]
8000ff30:	91 0b       	st.w	r8[0x0],r11
8000ff32:	72 1b       	ld.w	r11,r9[0x4]
8000ff34:	91 1b       	st.w	r8[0x4],r11
8000ff36:	72 2b       	ld.w	r11,r9[0x8]
8000ff38:	91 2b       	st.w	r8[0x8],r11
8000ff3a:	72 39       	ld.w	r9,r9[0xc]
8000ff3c:	91 39       	st.w	r8[0xc],r9
8000ff3e:	14 9c       	mov	r12,r10
8000ff40:	f0 16 00 67 	mcall	r6[412]
8000ff44:	2f cd       	sub	sp,-16
	global_position_t gpos=local_to_global_position(centralData->sim_model.localPosition);
8000ff46:	ec f8 00 00 	ld.w	r8,r6[0]
8000ff4a:	70 08       	ld.w	r8,r8[0x0]
8000ff4c:	ee cc 00 28 	sub	r12,r7,40
8000ff50:	20 cd       	sub	sp,48
8000ff52:	1a 99       	mov	r9,sp
8000ff54:	12 9b       	mov	r11,r9
8000ff56:	f0 ca f3 44 	sub	r10,r8,-3260
8000ff5a:	f6 c8 00 00 	sub	r8,r11,0
8000ff5e:	f4 c9 00 00 	sub	r9,r10,0
8000ff62:	72 0e       	ld.w	lr,r9[0x0]
8000ff64:	91 0e       	st.w	r8[0x0],lr
8000ff66:	72 1e       	ld.w	lr,r9[0x4]
8000ff68:	91 1e       	st.w	r8[0x4],lr
8000ff6a:	72 2e       	ld.w	lr,r9[0x8]
8000ff6c:	91 2e       	st.w	r8[0x8],lr
8000ff6e:	72 39       	ld.w	r9,r9[0xc]
8000ff70:	91 39       	st.w	r8[0xc],r9
8000ff72:	f6 c8 ff f0 	sub	r8,r11,-16
8000ff76:	f4 c9 ff f0 	sub	r9,r10,-16
8000ff7a:	72 0e       	ld.w	lr,r9[0x0]
8000ff7c:	91 0e       	st.w	r8[0x0],lr
8000ff7e:	72 1e       	ld.w	lr,r9[0x4]
8000ff80:	91 1e       	st.w	r8[0x4],lr
8000ff82:	72 2e       	ld.w	lr,r9[0x8]
8000ff84:	91 2e       	st.w	r8[0x8],lr
8000ff86:	72 39       	ld.w	r9,r9[0xc]
8000ff88:	91 39       	st.w	r8[0xc],r9
8000ff8a:	f6 c8 ff e0 	sub	r8,r11,-32
8000ff8e:	f4 c9 ff e0 	sub	r9,r10,-32
8000ff92:	72 0a       	ld.w	r10,r9[0x0]
8000ff94:	91 0a       	st.w	r8[0x0],r10
8000ff96:	72 1a       	ld.w	r10,r9[0x4]
8000ff98:	91 1a       	st.w	r8[0x4],r10
8000ff9a:	72 2a       	ld.w	r10,r9[0x8]
8000ff9c:	91 2a       	st.w	r8[0x8],r10
8000ff9e:	72 39       	ld.w	r9,r9[0xc]
8000ffa0:	91 39       	st.w	r8[0xc],r9
8000ffa2:	f0 16 00 7f 	mcall	r6[508]
8000ffa6:	2f 4d       	sub	sp,-48
	mavlink_msg_hil_state_send(MAVLINK_COMM_0, get_micros(), 
	aero_attitude.rpy[0], aero_attitude.rpy[1], aero_attitude.rpy[2],
	centralData->sim_model.rates_bf[ROLL], centralData->sim_model.rates_bf[PITCH], centralData->sim_model.rates_bf[YAW],
	gpos.latitude*10000000, gpos.longitude*10000000, gpos.altitude*1000.0,
	100*centralData->sim_model.vel[X], 100*centralData->sim_model.vel[Y], 100*centralData->sim_model.vel[Z],
	1000*centralData->sim_model.lin_forces_bf[0], 1000*centralData->sim_model.lin_forces_bf[1], 1000*centralData->sim_model.lin_forces_bf[2]
8000ffa8:	ec f8 00 00 	ld.w	r8,r6[0]
8000ffac:	70 08       	ld.w	r8,r8[0x0]
8000ffae:	f0 f9 0b c8 	ld.w	r9,r8[3016]
8000ffb2:	fc 18 44 7a 	movh	r8,0x447a
8000ffb6:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
void mavlink_send_simulation(void) {
	Aero_Attitude_t aero_attitude;
	aero_attitude=Quat_to_Aero(centralData->sim_model.attitude.qe);
	global_position_t gpos=local_to_global_position(centralData->sim_model.localPosition);
	
	mavlink_msg_hil_state_send(MAVLINK_COMM_0, get_micros(), 
8000ffba:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000ffbe:	5c 88       	casts.h	r8
8000ffc0:	ef 48 ff a8 	st.w	r7[-88],r8
	aero_attitude.rpy[0], aero_attitude.rpy[1], aero_attitude.rpy[2],
	centralData->sim_model.rates_bf[ROLL], centralData->sim_model.rates_bf[PITCH], centralData->sim_model.rates_bf[YAW],
	gpos.latitude*10000000, gpos.longitude*10000000, gpos.altitude*1000.0,
	100*centralData->sim_model.vel[X], 100*centralData->sim_model.vel[Y], 100*centralData->sim_model.vel[Z],
	1000*centralData->sim_model.lin_forces_bf[0], 1000*centralData->sim_model.lin_forces_bf[1], 1000*centralData->sim_model.lin_forces_bf[2]
8000ffc4:	ec f8 00 00 	ld.w	r8,r6[0]
8000ffc8:	70 08       	ld.w	r8,r8[0x0]
8000ffca:	f0 f9 0b c4 	ld.w	r9,r8[3012]
8000ffce:	fc 18 44 7a 	movh	r8,0x447a
8000ffd2:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
void mavlink_send_simulation(void) {
	Aero_Attitude_t aero_attitude;
	aero_attitude=Quat_to_Aero(centralData->sim_model.attitude.qe);
	global_position_t gpos=local_to_global_position(centralData->sim_model.localPosition);
	
	mavlink_msg_hil_state_send(MAVLINK_COMM_0, get_micros(), 
8000ffd6:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000ffda:	5c 88       	casts.h	r8
8000ffdc:	ef 48 ff ac 	st.w	r7[-84],r8
	aero_attitude.rpy[0], aero_attitude.rpy[1], aero_attitude.rpy[2],
	centralData->sim_model.rates_bf[ROLL], centralData->sim_model.rates_bf[PITCH], centralData->sim_model.rates_bf[YAW],
	gpos.latitude*10000000, gpos.longitude*10000000, gpos.altitude*1000.0,
	100*centralData->sim_model.vel[X], 100*centralData->sim_model.vel[Y], 100*centralData->sim_model.vel[Z],
	1000*centralData->sim_model.lin_forces_bf[0], 1000*centralData->sim_model.lin_forces_bf[1], 1000*centralData->sim_model.lin_forces_bf[2]
8000ffe0:	ec f8 00 00 	ld.w	r8,r6[0]
8000ffe4:	70 08       	ld.w	r8,r8[0x0]
8000ffe6:	f0 f9 0b c0 	ld.w	r9,r8[3008]
8000ffea:	fc 18 44 7a 	movh	r8,0x447a
8000ffee:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
void mavlink_send_simulation(void) {
	Aero_Attitude_t aero_attitude;
	aero_attitude=Quat_to_Aero(centralData->sim_model.attitude.qe);
	global_position_t gpos=local_to_global_position(centralData->sim_model.localPosition);
	
	mavlink_msg_hil_state_send(MAVLINK_COMM_0, get_micros(), 
8000fff2:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000fff6:	5c 88       	casts.h	r8
8000fff8:	ef 48 ff b0 	st.w	r7[-80],r8
	aero_attitude.rpy[0], aero_attitude.rpy[1], aero_attitude.rpy[2],
	centralData->sim_model.rates_bf[ROLL], centralData->sim_model.rates_bf[PITCH], centralData->sim_model.rates_bf[YAW],
	gpos.latitude*10000000, gpos.longitude*10000000, gpos.altitude*1000.0,
	100*centralData->sim_model.vel[X], 100*centralData->sim_model.vel[Y], 100*centralData->sim_model.vel[Z],
8000fffc:	ec f8 00 00 	ld.w	r8,r6[0]
80010000:	70 08       	ld.w	r8,r8[0x0]
80010002:	f0 f9 0b e0 	ld.w	r9,r8[3040]
80010006:	fc 18 42 c8 	movh	r8,0x42c8
8001000a:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
void mavlink_send_simulation(void) {
	Aero_Attitude_t aero_attitude;
	aero_attitude=Quat_to_Aero(centralData->sim_model.attitude.qe);
	global_position_t gpos=local_to_global_position(centralData->sim_model.localPosition);
	
	mavlink_msg_hil_state_send(MAVLINK_COMM_0, get_micros(), 
8001000e:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80010012:	5c 88       	casts.h	r8
80010014:	ef 48 ff b4 	st.w	r7[-76],r8
	aero_attitude.rpy[0], aero_attitude.rpy[1], aero_attitude.rpy[2],
	centralData->sim_model.rates_bf[ROLL], centralData->sim_model.rates_bf[PITCH], centralData->sim_model.rates_bf[YAW],
	gpos.latitude*10000000, gpos.longitude*10000000, gpos.altitude*1000.0,
	100*centralData->sim_model.vel[X], 100*centralData->sim_model.vel[Y], 100*centralData->sim_model.vel[Z],
80010018:	ec f8 00 00 	ld.w	r8,r6[0]
8001001c:	70 08       	ld.w	r8,r8[0x0]
8001001e:	f0 f9 0b dc 	ld.w	r9,r8[3036]
80010022:	fc 18 42 c8 	movh	r8,0x42c8
80010026:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
void mavlink_send_simulation(void) {
	Aero_Attitude_t aero_attitude;
	aero_attitude=Quat_to_Aero(centralData->sim_model.attitude.qe);
	global_position_t gpos=local_to_global_position(centralData->sim_model.localPosition);
	
	mavlink_msg_hil_state_send(MAVLINK_COMM_0, get_micros(), 
8001002a:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8001002e:	5c 88       	casts.h	r8
80010030:	ef 48 ff b8 	st.w	r7[-72],r8
	aero_attitude.rpy[0], aero_attitude.rpy[1], aero_attitude.rpy[2],
	centralData->sim_model.rates_bf[ROLL], centralData->sim_model.rates_bf[PITCH], centralData->sim_model.rates_bf[YAW],
	gpos.latitude*10000000, gpos.longitude*10000000, gpos.altitude*1000.0,
	100*centralData->sim_model.vel[X], 100*centralData->sim_model.vel[Y], 100*centralData->sim_model.vel[Z],
80010034:	ec f8 00 00 	ld.w	r8,r6[0]
80010038:	70 08       	ld.w	r8,r8[0x0]
8001003a:	f0 f9 0b d8 	ld.w	r9,r8[3032]
8001003e:	fc 18 42 c8 	movh	r8,0x42c8
80010042:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
void mavlink_send_simulation(void) {
	Aero_Attitude_t aero_attitude;
	aero_attitude=Quat_to_Aero(centralData->sim_model.attitude.qe);
	global_position_t gpos=local_to_global_position(centralData->sim_model.localPosition);
	
	mavlink_msg_hil_state_send(MAVLINK_COMM_0, get_micros(), 
80010046:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8001004a:	5c 88       	casts.h	r8
8001004c:	ef 48 ff bc 	st.w	r7[-68],r8
	aero_attitude.rpy[0], aero_attitude.rpy[1], aero_attitude.rpy[2],
	centralData->sim_model.rates_bf[ROLL], centralData->sim_model.rates_bf[PITCH], centralData->sim_model.rates_bf[YAW],
	gpos.latitude*10000000, gpos.longitude*10000000, gpos.altitude*1000.0,
80010050:	ee f8 ff e8 	ld.w	r8,r7[-24]
80010054:	10 9c       	mov	r12,r8
80010056:	f0 16 00 02 	mcall	r6[8]
8001005a:	30 08       	mov	r8,0
8001005c:	e0 69 40 00 	mov	r9,16384
80010060:	ea 19 40 8f 	orh	r9,0x408f
80010064:	f0 16 00 03 	mcall	r6[12]
80010068:	14 98       	mov	r8,r10
8001006a:	16 99       	mov	r9,r11
void mavlink_send_simulation(void) {
	Aero_Attitude_t aero_attitude;
	aero_attitude=Quat_to_Aero(centralData->sim_model.attitude.qe);
	global_position_t gpos=local_to_global_position(centralData->sim_model.localPosition);
	
	mavlink_msg_hil_state_send(MAVLINK_COMM_0, get_micros(), 
8001006c:	10 9a       	mov	r10,r8
8001006e:	12 9b       	mov	r11,r9
80010070:	f0 16 00 14 	mcall	r6[80]
80010074:	ef 4c ff c0 	st.w	r7[-64],r12
	aero_attitude.rpy[0], aero_attitude.rpy[1], aero_attitude.rpy[2],
	centralData->sim_model.rates_bf[ROLL], centralData->sim_model.rates_bf[PITCH], centralData->sim_model.rates_bf[YAW],
	gpos.latitude*10000000, gpos.longitude*10000000, gpos.altitude*1000.0,
80010078:	ee ea ff d8 	ld.d	r10,r7[-40]
8001007c:	30 08       	mov	r8,0
8001007e:	e0 69 12 d0 	mov	r9,4816
80010082:	ea 19 41 63 	orh	r9,0x4163
80010086:	f0 16 00 03 	mcall	r6[12]
8001008a:	14 98       	mov	r8,r10
8001008c:	16 99       	mov	r9,r11
void mavlink_send_simulation(void) {
	Aero_Attitude_t aero_attitude;
	aero_attitude=Quat_to_Aero(centralData->sim_model.attitude.qe);
	global_position_t gpos=local_to_global_position(centralData->sim_model.localPosition);
	
	mavlink_msg_hil_state_send(MAVLINK_COMM_0, get_micros(), 
8001008e:	10 9a       	mov	r10,r8
80010090:	12 9b       	mov	r11,r9
80010092:	f0 16 00 14 	mcall	r6[80]
80010096:	ef 4c ff c4 	st.w	r7[-60],r12
	aero_attitude.rpy[0], aero_attitude.rpy[1], aero_attitude.rpy[2],
	centralData->sim_model.rates_bf[ROLL], centralData->sim_model.rates_bf[PITCH], centralData->sim_model.rates_bf[YAW],
	gpos.latitude*10000000, gpos.longitude*10000000, gpos.altitude*1000.0,
8001009a:	ee ea ff e0 	ld.d	r10,r7[-32]
8001009e:	30 08       	mov	r8,0
800100a0:	e0 69 12 d0 	mov	r9,4816
800100a4:	ea 19 41 63 	orh	r9,0x4163
800100a8:	f0 16 00 03 	mcall	r6[12]
800100ac:	14 98       	mov	r8,r10
800100ae:	16 99       	mov	r9,r11
void mavlink_send_simulation(void) {
	Aero_Attitude_t aero_attitude;
	aero_attitude=Quat_to_Aero(centralData->sim_model.attitude.qe);
	global_position_t gpos=local_to_global_position(centralData->sim_model.localPosition);
	
	mavlink_msg_hil_state_send(MAVLINK_COMM_0, get_micros(), 
800100b0:	10 9a       	mov	r10,r8
800100b2:	12 9b       	mov	r11,r9
800100b4:	f0 16 00 14 	mcall	r6[80]
800100b8:	ef 4c ff c8 	st.w	r7[-56],r12
	aero_attitude.rpy[0], aero_attitude.rpy[1], aero_attitude.rpy[2],
	centralData->sim_model.rates_bf[ROLL], centralData->sim_model.rates_bf[PITCH], centralData->sim_model.rates_bf[YAW],
800100bc:	ec f8 00 00 	ld.w	r8,r6[0]
800100c0:	70 08       	ld.w	r8,r8[0x0]
void mavlink_send_simulation(void) {
	Aero_Attitude_t aero_attitude;
	aero_attitude=Quat_to_Aero(centralData->sim_model.attitude.qe);
	global_position_t gpos=local_to_global_position(centralData->sim_model.localPosition);
	
	mavlink_msg_hil_state_send(MAVLINK_COMM_0, get_micros(), 
800100c2:	f0 f8 0b bc 	ld.w	r8,r8[3004]
800100c6:	ef 48 ff cc 	st.w	r7[-52],r8
	aero_attitude.rpy[0], aero_attitude.rpy[1], aero_attitude.rpy[2],
	centralData->sim_model.rates_bf[ROLL], centralData->sim_model.rates_bf[PITCH], centralData->sim_model.rates_bf[YAW],
800100ca:	ec f8 00 00 	ld.w	r8,r6[0]
800100ce:	70 08       	ld.w	r8,r8[0x0]
void mavlink_send_simulation(void) {
	Aero_Attitude_t aero_attitude;
	aero_attitude=Quat_to_Aero(centralData->sim_model.attitude.qe);
	global_position_t gpos=local_to_global_position(centralData->sim_model.localPosition);
	
	mavlink_msg_hil_state_send(MAVLINK_COMM_0, get_micros(), 
800100d0:	f0 f8 0b b8 	ld.w	r8,r8[3000]
800100d4:	ef 48 ff d0 	st.w	r7[-48],r8
	aero_attitude.rpy[0], aero_attitude.rpy[1], aero_attitude.rpy[2],
	centralData->sim_model.rates_bf[ROLL], centralData->sim_model.rates_bf[PITCH], centralData->sim_model.rates_bf[YAW],
800100d8:	ec f8 00 00 	ld.w	r8,r6[0]
800100dc:	70 08       	ld.w	r8,r8[0x0]
void mavlink_send_simulation(void) {
	Aero_Attitude_t aero_attitude;
	aero_attitude=Quat_to_Aero(centralData->sim_model.attitude.qe);
	global_position_t gpos=local_to_global_position(centralData->sim_model.localPosition);
	
	mavlink_msg_hil_state_send(MAVLINK_COMM_0, get_micros(), 
800100de:	f0 f8 0b b4 	ld.w	r8,r8[2996]
800100e2:	ef 48 ff d4 	st.w	r7[-44],r8
800100e6:	ee f0 ff fc 	ld.w	r0,r7[-4]
800100ea:	ee f1 ff f8 	ld.w	r1,r7[-8]
800100ee:	ee f5 ff f4 	ld.w	r5,r7[-12]
800100f2:	f0 16 00 27 	mcall	r6[156]
800100f6:	18 98       	mov	r8,r12
800100f8:	10 92       	mov	r2,r8
800100fa:	30 03       	mov	r3,0
800100fc:	ee f8 ff a8 	ld.w	r8,r7[-88]
80010100:	1a d8       	st.w	--sp,r8
80010102:	ee f8 ff ac 	ld.w	r8,r7[-84]
80010106:	1a d8       	st.w	--sp,r8
80010108:	ee f8 ff b0 	ld.w	r8,r7[-80]
8001010c:	1a d8       	st.w	--sp,r8
8001010e:	ee f8 ff b4 	ld.w	r8,r7[-76]
80010112:	1a d8       	st.w	--sp,r8
80010114:	ee f8 ff b8 	ld.w	r8,r7[-72]
80010118:	1a d8       	st.w	--sp,r8
8001011a:	ee f8 ff bc 	ld.w	r8,r7[-68]
8001011e:	1a d8       	st.w	--sp,r8
80010120:	ee f8 ff c0 	ld.w	r8,r7[-64]
80010124:	1a d8       	st.w	--sp,r8
80010126:	ee f8 ff c4 	ld.w	r8,r7[-60]
8001012a:	1a d8       	st.w	--sp,r8
8001012c:	ee f8 ff c8 	ld.w	r8,r7[-56]
80010130:	1a d8       	st.w	--sp,r8
80010132:	ee f8 ff cc 	ld.w	r8,r7[-52]
80010136:	1a d8       	st.w	--sp,r8
80010138:	ee f8 ff d0 	ld.w	r8,r7[-48]
8001013c:	1a d8       	st.w	--sp,r8
8001013e:	ee f8 ff d4 	ld.w	r8,r7[-44]
80010142:	1a d8       	st.w	--sp,r8
80010144:	1a d0       	st.w	--sp,r0
80010146:	02 98       	mov	r8,r1
80010148:	0a 99       	mov	r9,r5
8001014a:	04 9a       	mov	r10,r2
8001014c:	06 9b       	mov	r11,r3
8001014e:	30 0c       	mov	r12,0
80010150:	fe b0 f4 44 	rcall	8000e9d8 <mavlink_msg_hil_state_send>
80010154:	2f 3d       	sub	sp,-52
	centralData->sim_model.rates_bf[ROLL], centralData->sim_model.rates_bf[PITCH], centralData->sim_model.rates_bf[YAW],
	gpos.latitude*10000000, gpos.longitude*10000000, gpos.altitude*1000.0,
	100*centralData->sim_model.vel[X], 100*centralData->sim_model.vel[Y], 100*centralData->sim_model.vel[Z],
	1000*centralData->sim_model.lin_forces_bf[0], 1000*centralData->sim_model.lin_forces_bf[1], 1000*centralData->sim_model.lin_forces_bf[2]
	);
	flush_mavlink();
80010156:	f0 16 00 2c 	mcall	r6[176]
	mavlink_msg_named_value_int_send(MAVLINK_COMM_0, get_millis(), "rolltorque", centralData->sim_model.torques_bf[0]);flush_mavlink();
8001015a:	ec f8 00 00 	ld.w	r8,r6[0]
8001015e:	70 08       	ld.w	r8,r8[0x0]
80010160:	f0 f8 0b a8 	ld.w	r8,r8[2984]
80010164:	e5 ab 05 08 	cop	cp0,cr5,cr0,cr8,0x56
80010168:	f0 16 00 0f 	mcall	r6[60]
8001016c:	18 98       	mov	r8,r12
8001016e:	0a 99       	mov	r9,r5
80010170:	fe ca 02 b0 	sub	r10,pc,688
80010174:	10 9b       	mov	r11,r8
80010176:	30 0c       	mov	r12,0
80010178:	fe b0 f5 28 	rcall	8000ebc8 <mavlink_msg_named_value_int_send>
8001017c:	f0 16 00 2c 	mcall	r6[176]
	mavlink_msg_named_value_int_send(MAVLINK_COMM_0, get_millis(), "pitchtorque", centralData->sim_model.torques_bf[1]);flush_mavlink();
80010180:	ec f8 00 00 	ld.w	r8,r6[0]
80010184:	70 08       	ld.w	r8,r8[0x0]
80010186:	f0 f8 0b ac 	ld.w	r8,r8[2988]
8001018a:	e5 ab 05 08 	cop	cp0,cr5,cr0,cr8,0x56
8001018e:	f0 16 00 0f 	mcall	r6[60]
80010192:	18 98       	mov	r8,r12
80010194:	0a 99       	mov	r9,r5
80010196:	fe ca 02 ca 	sub	r10,pc,714
8001019a:	10 9b       	mov	r11,r8
8001019c:	30 0c       	mov	r12,0
8001019e:	fe b0 f5 15 	rcall	8000ebc8 <mavlink_msg_named_value_int_send>
800101a2:	f0 16 00 2c 	mcall	r6[176]
	mavlink_msg_named_value_int_send(MAVLINK_COMM_0, get_millis(), "yawtorque", centralData->sim_model.torques_bf[2]);flush_mavlink();
800101a6:	ec f8 00 00 	ld.w	r8,r6[0]
800101aa:	70 08       	ld.w	r8,r8[0x0]
800101ac:	f0 f8 0b b0 	ld.w	r8,r8[2992]
800101b0:	e5 ab 05 08 	cop	cp0,cr5,cr0,cr8,0x56
800101b4:	f0 16 00 0f 	mcall	r6[60]
800101b8:	18 98       	mov	r8,r12
800101ba:	0a 99       	mov	r9,r5
800101bc:	fe ca 02 e4 	sub	r10,pc,740
800101c0:	10 9b       	mov	r11,r8
800101c2:	30 0c       	mov	r12,0
800101c4:	fe b0 f5 02 	rcall	8000ebc8 <mavlink_msg_named_value_int_send>
800101c8:	f0 16 00 2c 	mcall	r6[176]
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "thrust", centralData->sim_model.lin_forces_bf[2]);flush_mavlink();
800101cc:	ec f8 00 00 	ld.w	r8,r6[0]
800101d0:	70 08       	ld.w	r8,r8[0x0]
800101d2:	f0 f5 0b c8 	ld.w	r5,r8[3016]
800101d6:	f0 16 00 0f 	mcall	r6[60]
800101da:	18 98       	mov	r8,r12
800101dc:	0a 99       	mov	r9,r5
800101de:	fe ca 02 fa 	sub	r10,pc,762
800101e2:	10 9b       	mov	r11,r8
800101e4:	30 0c       	mov	r12,0
800101e6:	fe b0 f4 b9 	rcall	8000eb58 <mavlink_msg_named_value_float_send>
800101ea:	f0 16 00 2c 	mcall	r6[176]
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "rpm1", centralData->sim_model.rotorspeeds[0]);flush_mavlink();
800101ee:	ec f8 00 00 	ld.w	r8,r6[0]
800101f2:	70 08       	ld.w	r8,r8[0x0]
800101f4:	f0 f5 0c ec 	ld.w	r5,r8[3308]
800101f8:	f0 16 00 0f 	mcall	r6[60]
800101fc:	18 98       	mov	r8,r12
800101fe:	0a 99       	mov	r9,r5
80010200:	fe ca 03 14 	sub	r10,pc,788
80010204:	10 9b       	mov	r11,r8
80010206:	30 0c       	mov	r12,0
80010208:	fe b0 f4 a8 	rcall	8000eb58 <mavlink_msg_named_value_float_send>
8001020c:	f0 16 00 2c 	mcall	r6[176]
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "rpm2", centralData->sim_model.rotorspeeds[1]);flush_mavlink();
80010210:	ec f8 00 00 	ld.w	r8,r6[0]
80010214:	70 08       	ld.w	r8,r8[0x0]
80010216:	f0 f5 0c f0 	ld.w	r5,r8[3312]
8001021a:	f0 16 00 0f 	mcall	r6[60]
8001021e:	18 98       	mov	r8,r12
80010220:	0a 99       	mov	r9,r5
80010222:	fe ca 03 2e 	sub	r10,pc,814
80010226:	10 9b       	mov	r11,r8
80010228:	30 0c       	mov	r12,0
8001022a:	fe b0 f4 97 	rcall	8000eb58 <mavlink_msg_named_value_float_send>
8001022e:	f0 16 00 2c 	mcall	r6[176]
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "rpm3", centralData->sim_model.rotorspeeds[2]);flush_mavlink();
80010232:	ec f8 00 00 	ld.w	r8,r6[0]
80010236:	70 08       	ld.w	r8,r8[0x0]
80010238:	f0 f5 0c f4 	ld.w	r5,r8[3316]
8001023c:	f0 16 00 0f 	mcall	r6[60]
80010240:	18 98       	mov	r8,r12
80010242:	0a 99       	mov	r9,r5
80010244:	fe ca 03 48 	sub	r10,pc,840
80010248:	10 9b       	mov	r11,r8
8001024a:	30 0c       	mov	r12,0
8001024c:	fe b0 f4 86 	rcall	8000eb58 <mavlink_msg_named_value_float_send>
80010250:	f0 16 00 2c 	mcall	r6[176]
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "rpm4", centralData->sim_model.rotorspeeds[3]);
80010254:	ec f8 00 00 	ld.w	r8,r6[0]
80010258:	70 08       	ld.w	r8,r8[0x0]
8001025a:	f0 f5 0c f8 	ld.w	r5,r8[3320]
8001025e:	f0 16 00 0f 	mcall	r6[60]
80010262:	18 98       	mov	r8,r12
80010264:	0a 99       	mov	r9,r5
80010266:	fe ca 03 62 	sub	r10,pc,866
8001026a:	10 9b       	mov	r11,r8
8001026c:	30 0c       	mov	r12,0
8001026e:	fe b0 f4 75 	rcall	8000eb58 <mavlink_msg_named_value_float_send>

	
}
80010272:	2e ad       	sub	sp,-88
80010274:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
80010278:	80 00       	ld.sh	r0,r0[0x0]
8001027a:	fd 9a       	*unknown*
8001027c:	73 74       	ld.w	r4,r9[0x5c]
8001027e:	61 62       	ld.w	r2,r0[0x58]
80010280:	41 76       	lddsp	r6,sp[0x5c]
80010282:	67 44       	ld.w	r4,r3[0x50]
80010284:	65 6c       	ld.w	r12,r2[0x58]
80010286:	61 79       	ld.w	r9,r0[0x5c]
80010288:	00 00       	add	r0,r0
8001028a:	00 00       	add	r0,r0
8001028c:	73 74       	ld.w	r4,r9[0x5c]
8001028e:	61 62       	ld.w	r2,r0[0x58]
80010290:	44 65       	lddsp	r5,sp[0x118]
80010292:	6c 61       	ld.w	r1,r6[0x18]
80010294:	79 56       	ld.w	r6,r12[0x54]
80010296:	61 72       	ld.w	r2,r0[0x5c]
80010298:	00 00       	add	r0,r0
8001029a:	00 00       	add	r0,r0
8001029c:	73 74       	ld.w	r4,r9[0x5c]
8001029e:	61 62       	ld.w	r2,r0[0x58]
800102a0:	4d 61       	lddpc	r1,800103f8 <send_rt_stats+0x110>
800102a2:	78 44       	ld.w	r4,r12[0x10]
800102a4:	65 6c       	ld.w	r12,r2[0x58]
800102a6:	61 79       	ld.w	r9,r0[0x5c]
800102a8:	00 00       	add	r0,r0
800102aa:	00 00       	add	r0,r0
800102ac:	73 74       	ld.w	r4,r9[0x5c]
800102ae:	61 62       	ld.w	r2,r0[0x58]
800102b0:	52 54       	stdsp	sp[0x94],r4
800102b2:	76 69       	ld.w	r9,r11[0x18]
800102b4:	6f 00       	ld.w	r0,r7[0x40]
800102b6:	00 00       	add	r0,r0
800102b8:	62 61       	ld.w	r1,r1[0x18]
800102ba:	72 6f       	ld.w	pc,r9[0x18]
800102bc:	41 76       	lddsp	r6,sp[0x5c]
800102be:	67 44       	ld.w	r4,r3[0x50]
800102c0:	65 6c       	ld.w	r12,r2[0x58]
800102c2:	61 79       	ld.w	r9,r0[0x5c]
800102c4:	00 00       	add	r0,r0
800102c6:	00 00       	add	r0,r0
800102c8:	69 6d       	ld.w	sp,r4[0x58]
800102ca:	75 45       	ld.w	r5,r10[0x50]
800102cc:	78 54       	ld.w	r4,r12[0x14]
800102ce:	69 6d       	ld.w	sp,r4[0x58]
800102d0:	65 00       	ld.w	r0,r2[0x40]
800102d2:	00 00       	add	r0,r0
800102d4:	6e 61       	ld.w	r1,r7[0x18]
800102d6:	76 45       	ld.w	r5,r11[0x10]
800102d8:	78 54       	ld.w	r4,r12[0x14]
800102da:	69 6d       	ld.w	sp,r4[0x58]
800102dc:	65 00       	ld.w	r0,r2[0x40]
800102de:	00 00       	add	r0,r0
800102e0:	69 6d       	ld.w	sp,r4[0x58]
800102e2:	75 5f       	ld.w	pc,r10[0x54]
800102e4:	64 74       	ld.w	r4,r2[0x1c]
	...

800102e8 <send_rt_stats>:

task_return_t send_rt_stats() {
800102e8:	eb cd 40 e0 	pushm	r5-r7,lr
800102ec:	1a 97       	mov	r7,sp
800102ee:	20 1d       	sub	sp,4
800102f0:	4c e6       	lddpc	r6,80010428 <send_rt_stats+0x140>
800102f2:	1e 26       	rsub	r6,pc
	task_set *main_tasks=get_main_taskset();
800102f4:	f0 16 00 fb 	mcall	r6[1004]
800102f8:	18 98       	mov	r8,r12
800102fa:	ef 48 ff fc 	st.w	r7[-4],r8
	
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "stabAvgDelay", main_tasks->tasks[0].delay_avg);
800102fe:	ee f8 ff fc 	ld.w	r8,r7[-4]
80010302:	70 c8       	ld.w	r8,r8[0x30]
80010304:	e5 a4 05 08 	cop	cp0,cr5,cr0,cr8,0x48
80010308:	f0 16 00 0f 	mcall	r6[60]
8001030c:	18 98       	mov	r8,r12
8001030e:	0a 99       	mov	r9,r5
80010310:	fe ca 00 94 	sub	r10,pc,148
80010314:	10 9b       	mov	r11,r8
80010316:	30 0c       	mov	r12,0
80010318:	fe b0 f4 20 	rcall	8000eb58 <mavlink_msg_named_value_float_send>
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "stabDelayVar", sqrt(main_tasks->tasks[0].delay_var_squared));
8001031c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80010320:	70 d8       	ld.w	r8,r8[0x34]
80010322:	10 9c       	mov	r12,r8
80010324:	f0 16 00 4e 	mcall	r6[312]
80010328:	14 98       	mov	r8,r10
8001032a:	16 99       	mov	r9,r11
8001032c:	10 9a       	mov	r10,r8
8001032e:	12 9b       	mov	r11,r9
80010330:	f0 16 00 65 	mcall	r6[404]
80010334:	14 98       	mov	r8,r10
80010336:	16 99       	mov	r9,r11
80010338:	10 9a       	mov	r10,r8
8001033a:	12 9b       	mov	r11,r9
8001033c:	f0 16 00 09 	mcall	r6[36]
80010340:	18 95       	mov	r5,r12
80010342:	f0 16 00 0f 	mcall	r6[60]
80010346:	18 98       	mov	r8,r12
80010348:	0a 99       	mov	r9,r5
8001034a:	fe ca 00 be 	sub	r10,pc,190
8001034e:	10 9b       	mov	r11,r8
80010350:	30 0c       	mov	r12,0
80010352:	fe b0 f4 03 	rcall	8000eb58 <mavlink_msg_named_value_float_send>
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "stabMaxDelay", main_tasks->tasks[0].delay_max);
80010356:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001035a:	70 b8       	ld.w	r8,r8[0x2c]
8001035c:	e5 a4 05 08 	cop	cp0,cr5,cr0,cr8,0x48
80010360:	f0 16 00 0f 	mcall	r6[60]
80010364:	18 98       	mov	r8,r12
80010366:	0a 99       	mov	r9,r5
80010368:	fe ca 00 cc 	sub	r10,pc,204
8001036c:	10 9b       	mov	r11,r8
8001036e:	30 0c       	mov	r12,0
80010370:	fe b0 f3 f4 	rcall	8000eb58 <mavlink_msg_named_value_float_send>
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "stabRTvio", main_tasks->tasks[0].rt_violations);
80010374:	ee f8 ff fc 	ld.w	r8,r7[-4]
80010378:	70 e8       	ld.w	r8,r8[0x38]
8001037a:	e5 a4 05 08 	cop	cp0,cr5,cr0,cr8,0x48
8001037e:	f0 16 00 0f 	mcall	r6[60]
80010382:	18 98       	mov	r8,r12
80010384:	0a 99       	mov	r9,r5
80010386:	fe ca 00 da 	sub	r10,pc,218
8001038a:	10 9b       	mov	r11,r8
8001038c:	30 0c       	mov	r12,0
8001038e:	fe b0 f3 e5 	rcall	8000eb58 <mavlink_msg_named_value_float_send>

	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "baroAvgDelay", main_tasks->tasks[1].delay_avg);
80010392:	ee f8 ff fc 	ld.w	r8,r7[-4]
80010396:	71 88       	ld.w	r8,r8[0x60]
80010398:	e5 a4 05 08 	cop	cp0,cr5,cr0,cr8,0x48
8001039c:	f0 16 00 0f 	mcall	r6[60]
800103a0:	18 98       	mov	r8,r12
800103a2:	0a 99       	mov	r9,r5
800103a4:	fe ca 00 ec 	sub	r10,pc,236
800103a8:	10 9b       	mov	r11,r8
800103aa:	30 0c       	mov	r12,0
800103ac:	fe b0 f3 d6 	rcall	8000eb58 <mavlink_msg_named_value_float_send>


	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "imuExTime", main_tasks->tasks[0].execution_time);
800103b0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800103b4:	70 a8       	ld.w	r8,r8[0x28]
800103b6:	e5 a4 05 08 	cop	cp0,cr5,cr0,cr8,0x48
800103ba:	f0 16 00 0f 	mcall	r6[60]
800103be:	18 98       	mov	r8,r12
800103c0:	0a 99       	mov	r9,r5
800103c2:	fe ca 00 fa 	sub	r10,pc,250
800103c6:	10 9b       	mov	r11,r8
800103c8:	30 0c       	mov	r12,0
800103ca:	fe b0 f3 c7 	rcall	8000eb58 <mavlink_msg_named_value_float_send>
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "navExTime", main_tasks->tasks[3].execution_time);
800103ce:	ee f8 ff fc 	ld.w	r8,r7[-4]
800103d2:	f0 f8 00 b8 	ld.w	r8,r8[184]
800103d6:	e5 a4 05 08 	cop	cp0,cr5,cr0,cr8,0x48
800103da:	f0 16 00 0f 	mcall	r6[60]
800103de:	18 98       	mov	r8,r12
800103e0:	0a 99       	mov	r9,r5
800103e2:	fe ca 01 0e 	sub	r10,pc,270
800103e6:	10 9b       	mov	r11,r8
800103e8:	30 0c       	mov	r12,0
800103ea:	fe b0 f3 b7 	rcall	8000eb58 <mavlink_msg_named_value_float_send>
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "imu_dt", get_central_data()->imu1.dt);
800103ee:	f0 16 00 32 	mcall	r6[200]
800103f2:	18 98       	mov	r8,r12
800103f4:	f0 f5 01 40 	ld.w	r5,r8[320]
800103f8:	f0 16 00 0f 	mcall	r6[60]
800103fc:	18 98       	mov	r8,r12
800103fe:	0a 99       	mov	r9,r5
80010400:	fe ca 01 20 	sub	r10,pc,288
80010404:	10 9b       	mov	r11,r8
80010406:	30 0c       	mov	r12,0
80010408:	fe b0 f3 a8 	rcall	8000eb58 <mavlink_msg_named_value_float_send>

	
	main_tasks->tasks[1].rt_violations=0;
8001040c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80010410:	30 09       	mov	r9,0
80010412:	f1 49 00 68 	st.w	r8[104],r9
	main_tasks->tasks[1].delay_max=0;
80010416:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001041a:	30 09       	mov	r9,0
8001041c:	f1 49 00 5c 	st.w	r8[92],r9

}
80010420:	2f fd       	sub	sp,-4
80010422:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80010426:	00 00       	add	r0,r0
80010428:	80 01       	ld.sh	r1,r0[0x0]
8001042a:	01 76       	ld.ub	r6,--r0
8001042c:	53 69       	stdsp	sp[0xd8],r9
8001042e:	6d 5f       	ld.w	pc,r6[0x54]
80010430:	6d 6f       	ld.w	pc,r6[0x58]
80010432:	64 65       	ld.w	r5,r2[0x18]
80010434:	00 00       	add	r0,r0
80010436:	00 00       	add	r0,r0
80010438:	52 6f       	stdsp	sp[0x98],pc
8001043a:	6c 6c       	ld.w	r12,r6[0x18]
8001043c:	52 50       	stdsp	sp[0x94],r0
8001043e:	69 64       	ld.w	r4,r4[0x58]
80010440:	5f 50       	srlt	r0
80010442:	5f 47       	srge	r7
80010444:	00 00       	add	r0,r0
80010446:	00 00       	add	r0,r0
80010448:	52 6f       	stdsp	sp[0x98],pc
8001044a:	6c 6c       	ld.w	r12,r6[0x18]
8001044c:	52 50       	stdsp	sp[0x94],r0
8001044e:	69 64       	ld.w	r4,r4[0x58]
80010450:	5f 49       	srge	r9
80010452:	5f 50       	srlt	r0
80010454:	73 74       	ld.w	r4,r9[0x5c]
80010456:	47 00       	lddsp	r0,sp[0x1c0]
80010458:	52 6f       	stdsp	sp[0x98],pc
8001045a:	6c 6c       	ld.w	r12,r6[0x18]
8001045c:	52 50       	stdsp	sp[0x94],r0
8001045e:	69 64       	ld.w	r4,r4[0x58]
80010460:	5f 49       	srge	r9
80010462:	5f 50       	srlt	r0
80010464:	72 65       	ld.w	r5,r9[0x18]
80010466:	47 00       	lddsp	r0,sp[0x1c0]
80010468:	52 6f       	stdsp	sp[0x98],pc
8001046a:	6c 6c       	ld.w	r12,r6[0x18]
8001046c:	52 50       	stdsp	sp[0x94],r0
8001046e:	69 64       	ld.w	r4,r4[0x58]
80010470:	5f 44       	srge	r4
80010472:	5f 47       	srge	r7
80010474:	61 69       	ld.w	r9,r0[0x58]
80010476:	6e 00       	ld.w	r0,r7[0x0]
80010478:	52 6f       	stdsp	sp[0x98],pc
8001047a:	6c 6c       	ld.w	r12,r6[0x18]
8001047c:	41 50       	lddsp	r0,sp[0x54]
8001047e:	69 64       	ld.w	r4,r4[0x58]
80010480:	5f 50       	srlt	r0
80010482:	5f 47       	srge	r7
80010484:	00 00       	add	r0,r0
80010486:	00 00       	add	r0,r0
80010488:	52 6f       	stdsp	sp[0x98],pc
8001048a:	6c 6c       	ld.w	r12,r6[0x18]
8001048c:	41 50       	lddsp	r0,sp[0x54]
8001048e:	69 64       	ld.w	r4,r4[0x58]
80010490:	5f 49       	srge	r9
80010492:	5f 50       	srlt	r0
80010494:	73 74       	ld.w	r4,r9[0x5c]
80010496:	47 00       	lddsp	r0,sp[0x1c0]
80010498:	52 6f       	stdsp	sp[0x98],pc
8001049a:	6c 6c       	ld.w	r12,r6[0x18]
8001049c:	41 50       	lddsp	r0,sp[0x54]
8001049e:	69 64       	ld.w	r4,r4[0x58]
800104a0:	5f 49       	srge	r9
800104a2:	5f 50       	srlt	r0
800104a4:	72 65       	ld.w	r5,r9[0x18]
800104a6:	47 00       	lddsp	r0,sp[0x1c0]
800104a8:	52 6f       	stdsp	sp[0x98],pc
800104aa:	6c 6c       	ld.w	r12,r6[0x18]
800104ac:	41 50       	lddsp	r0,sp[0x54]
800104ae:	69 64       	ld.w	r4,r4[0x58]
800104b0:	5f 44       	srge	r4
800104b2:	5f 47       	srge	r7
800104b4:	61 69       	ld.w	r9,r0[0x58]
800104b6:	6e 00       	ld.w	r0,r7[0x0]
800104b8:	50 69       	stdsp	sp[0x18],r9
800104ba:	74 63       	ld.w	r3,r10[0x18]
800104bc:	68 52       	ld.w	r2,r4[0x14]
800104be:	50 69       	stdsp	sp[0x18],r9
800104c0:	64 5f       	ld.w	pc,r2[0x14]
800104c2:	50 5f       	stdsp	sp[0x14],pc
800104c4:	47 00       	lddsp	r0,sp[0x1c0]
800104c6:	00 00       	add	r0,r0
800104c8:	50 69       	stdsp	sp[0x18],r9
800104ca:	74 63       	ld.w	r3,r10[0x18]
800104cc:	68 52       	ld.w	r2,r4[0x14]
800104ce:	50 69       	stdsp	sp[0x18],r9
800104d0:	64 5f       	ld.w	pc,r2[0x14]
800104d2:	49 5f       	lddpc	pc,80010524 <send_rt_stats+0x23c>
800104d4:	50 73       	stdsp	sp[0x1c],r3
800104d6:	74 47       	ld.w	r7,r10[0x10]
800104d8:	00 00       	add	r0,r0
800104da:	00 00       	add	r0,r0
800104dc:	50 69       	stdsp	sp[0x18],r9
800104de:	74 63       	ld.w	r3,r10[0x18]
800104e0:	68 52       	ld.w	r2,r4[0x14]
800104e2:	50 69       	stdsp	sp[0x18],r9
800104e4:	64 5f       	ld.w	pc,r2[0x14]
800104e6:	49 5f       	lddpc	pc,80010538 <send_rt_stats+0x250>
800104e8:	50 72       	stdsp	sp[0x1c],r2
800104ea:	65 47       	ld.w	r7,r2[0x50]
800104ec:	00 00       	add	r0,r0
800104ee:	00 00       	add	r0,r0
800104f0:	50 69       	stdsp	sp[0x18],r9
800104f2:	74 63       	ld.w	r3,r10[0x18]
800104f4:	68 52       	ld.w	r2,r4[0x14]
800104f6:	50 69       	stdsp	sp[0x18],r9
800104f8:	64 5f       	ld.w	pc,r2[0x14]
800104fa:	44 5f       	lddsp	pc,sp[0x114]
800104fc:	47 61       	lddsp	r1,sp[0x1d8]
800104fe:	69 6e       	ld.w	lr,r4[0x58]
80010500:	00 00       	add	r0,r0
80010502:	00 00       	add	r0,r0
80010504:	50 69       	stdsp	sp[0x18],r9
80010506:	74 63       	ld.w	r3,r10[0x18]
80010508:	68 41       	ld.w	r1,r4[0x10]
8001050a:	50 69       	stdsp	sp[0x18],r9
8001050c:	64 5f       	ld.w	pc,r2[0x14]
8001050e:	50 5f       	stdsp	sp[0x14],pc
80010510:	47 00       	lddsp	r0,sp[0x1c0]
80010512:	00 00       	add	r0,r0
80010514:	50 69       	stdsp	sp[0x18],r9
80010516:	74 63       	ld.w	r3,r10[0x18]
80010518:	68 41       	ld.w	r1,r4[0x10]
8001051a:	50 69       	stdsp	sp[0x18],r9
8001051c:	64 5f       	ld.w	pc,r2[0x14]
8001051e:	49 5f       	lddpc	pc,80010570 <send_rt_stats+0x288>
80010520:	50 73       	stdsp	sp[0x1c],r3
80010522:	74 47       	ld.w	r7,r10[0x10]
80010524:	00 00       	add	r0,r0
80010526:	00 00       	add	r0,r0
80010528:	50 69       	stdsp	sp[0x18],r9
8001052a:	74 63       	ld.w	r3,r10[0x18]
8001052c:	68 41       	ld.w	r1,r4[0x10]
8001052e:	50 69       	stdsp	sp[0x18],r9
80010530:	64 5f       	ld.w	pc,r2[0x14]
80010532:	49 5f       	lddpc	pc,80010584 <send_rt_stats+0x29c>
80010534:	50 72       	stdsp	sp[0x1c],r2
80010536:	65 47       	ld.w	r7,r2[0x50]
80010538:	00 00       	add	r0,r0
8001053a:	00 00       	add	r0,r0
8001053c:	50 69       	stdsp	sp[0x18],r9
8001053e:	74 63       	ld.w	r3,r10[0x18]
80010540:	68 41       	ld.w	r1,r4[0x10]
80010542:	50 69       	stdsp	sp[0x18],r9
80010544:	64 5f       	ld.w	pc,r2[0x14]
80010546:	44 5f       	lddsp	pc,sp[0x114]
80010548:	47 61       	lddsp	r1,sp[0x1d8]
8001054a:	69 6e       	ld.w	lr,r4[0x58]
8001054c:	00 00       	add	r0,r0
8001054e:	00 00       	add	r0,r0
80010550:	59 61       	cp.w	r1,22
80010552:	77 52       	ld.w	r2,r11[0x54]
80010554:	50 69       	stdsp	sp[0x18],r9
80010556:	64 5f       	ld.w	pc,r2[0x14]
80010558:	50 5f       	stdsp	sp[0x14],pc
8001055a:	47 00       	lddsp	r0,sp[0x1c0]
8001055c:	59 61       	cp.w	r1,22
8001055e:	77 52       	ld.w	r2,r11[0x54]
80010560:	50 69       	stdsp	sp[0x18],r9
80010562:	64 5f       	ld.w	pc,r2[0x14]
80010564:	49 5f       	lddpc	pc,800105b8 <send_rt_stats+0x2d0>
80010566:	50 73       	stdsp	sp[0x1c],r3
80010568:	74 47       	ld.w	r7,r10[0x10]
8001056a:	00 00       	add	r0,r0
8001056c:	59 61       	cp.w	r1,22
8001056e:	77 52       	ld.w	r2,r11[0x54]
80010570:	50 69       	stdsp	sp[0x18],r9
80010572:	64 5f       	ld.w	pc,r2[0x14]
80010574:	49 5f       	lddpc	pc,800105c8 <send_rt_stats+0x2e0>
80010576:	50 72       	stdsp	sp[0x1c],r2
80010578:	65 47       	ld.w	r7,r2[0x50]
8001057a:	00 00       	add	r0,r0
8001057c:	59 61       	cp.w	r1,22
8001057e:	77 52       	ld.w	r2,r11[0x54]
80010580:	50 69       	stdsp	sp[0x18],r9
80010582:	64 5f       	ld.w	pc,r2[0x14]
80010584:	44 5f       	lddsp	pc,sp[0x114]
80010586:	47 61       	lddsp	r1,sp[0x1d8]
80010588:	69 6e       	ld.w	lr,r4[0x58]
8001058a:	00 00       	add	r0,r0
8001058c:	59 61       	cp.w	r1,22
8001058e:	77 41       	ld.w	r1,r11[0x50]
80010590:	50 69       	stdsp	sp[0x18],r9
80010592:	64 5f       	ld.w	pc,r2[0x14]
80010594:	50 5f       	stdsp	sp[0x14],pc
80010596:	47 00       	lddsp	r0,sp[0x1c0]
80010598:	59 61       	cp.w	r1,22
8001059a:	77 41       	ld.w	r1,r11[0x50]
8001059c:	50 69       	stdsp	sp[0x18],r9
8001059e:	64 5f       	ld.w	pc,r2[0x14]
800105a0:	49 5f       	lddpc	pc,800105f4 <send_rt_stats+0x30c>
800105a2:	50 73       	stdsp	sp[0x1c],r3
800105a4:	74 47       	ld.w	r7,r10[0x10]
800105a6:	00 00       	add	r0,r0
800105a8:	59 61       	cp.w	r1,22
800105aa:	77 41       	ld.w	r1,r11[0x50]
800105ac:	50 69       	stdsp	sp[0x18],r9
800105ae:	64 5f       	ld.w	pc,r2[0x14]
800105b0:	49 5f       	lddpc	pc,80010604 <send_rt_stats+0x31c>
800105b2:	50 72       	stdsp	sp[0x1c],r2
800105b4:	65 47       	ld.w	r7,r2[0x50]
800105b6:	00 00       	add	r0,r0
800105b8:	59 61       	cp.w	r1,22
800105ba:	77 41       	ld.w	r1,r11[0x50]
800105bc:	50 69       	stdsp	sp[0x18],r9
800105be:	64 5f       	ld.w	pc,r2[0x14]
800105c0:	44 5f       	lddsp	pc,sp[0x114]
800105c2:	47 61       	lddsp	r1,sp[0x1d8]
800105c4:	69 6e       	ld.w	lr,r4[0x58]
800105c6:	00 00       	add	r0,r0
800105c8:	52 6f       	stdsp	sp[0x98],pc
800105ca:	6c 6c       	ld.w	r12,r6[0x18]
800105cc:	56 50       	stdsp	sp[0x194],r0
800105ce:	69 64       	ld.w	r4,r4[0x58]
800105d0:	5f 50       	srlt	r0
800105d2:	5f 47       	srge	r7
800105d4:	00 00       	add	r0,r0
800105d6:	00 00       	add	r0,r0
800105d8:	52 6f       	stdsp	sp[0x98],pc
800105da:	6c 6c       	ld.w	r12,r6[0x18]
800105dc:	56 50       	stdsp	sp[0x194],r0
800105de:	69 64       	ld.w	r4,r4[0x58]
800105e0:	5f 49       	srge	r9
800105e2:	5f 50       	srlt	r0
800105e4:	73 74       	ld.w	r4,r9[0x5c]
800105e6:	47 00       	lddsp	r0,sp[0x1c0]
800105e8:	52 6f       	stdsp	sp[0x98],pc
800105ea:	6c 6c       	ld.w	r12,r6[0x18]
800105ec:	56 50       	stdsp	sp[0x194],r0
800105ee:	69 64       	ld.w	r4,r4[0x58]
800105f0:	5f 49       	srge	r9
800105f2:	5f 50       	srlt	r0
800105f4:	72 65       	ld.w	r5,r9[0x18]
800105f6:	47 00       	lddsp	r0,sp[0x1c0]
800105f8:	52 6f       	stdsp	sp[0x98],pc
800105fa:	6c 6c       	ld.w	r12,r6[0x18]
800105fc:	56 50       	stdsp	sp[0x194],r0
800105fe:	69 64       	ld.w	r4,r4[0x58]
80010600:	5f 44       	srge	r4
80010602:	5f 47       	srge	r7
80010604:	61 69       	ld.w	r9,r0[0x58]
80010606:	6e 00       	ld.w	r0,r7[0x0]
80010608:	50 69       	stdsp	sp[0x18],r9
8001060a:	74 63       	ld.w	r3,r10[0x18]
8001060c:	68 56       	ld.w	r6,r4[0x14]
8001060e:	50 69       	stdsp	sp[0x18],r9
80010610:	64 5f       	ld.w	pc,r2[0x14]
80010612:	50 5f       	stdsp	sp[0x14],pc
80010614:	47 00       	lddsp	r0,sp[0x1c0]
80010616:	00 00       	add	r0,r0
80010618:	50 69       	stdsp	sp[0x18],r9
8001061a:	74 63       	ld.w	r3,r10[0x18]
8001061c:	68 56       	ld.w	r6,r4[0x14]
8001061e:	50 69       	stdsp	sp[0x18],r9
80010620:	64 5f       	ld.w	pc,r2[0x14]
80010622:	49 5f       	lddpc	pc,80010674 <send_rt_stats+0x38c>
80010624:	50 73       	stdsp	sp[0x1c],r3
80010626:	74 47       	ld.w	r7,r10[0x10]
80010628:	00 00       	add	r0,r0
8001062a:	00 00       	add	r0,r0
8001062c:	50 69       	stdsp	sp[0x18],r9
8001062e:	74 63       	ld.w	r3,r10[0x18]
80010630:	68 56       	ld.w	r6,r4[0x14]
80010632:	50 69       	stdsp	sp[0x18],r9
80010634:	64 5f       	ld.w	pc,r2[0x14]
80010636:	49 5f       	lddpc	pc,80010688 <send_rt_stats+0x3a0>
80010638:	50 72       	stdsp	sp[0x1c],r2
8001063a:	65 47       	ld.w	r7,r2[0x50]
8001063c:	00 00       	add	r0,r0
8001063e:	00 00       	add	r0,r0
80010640:	50 69       	stdsp	sp[0x18],r9
80010642:	74 63       	ld.w	r3,r10[0x18]
80010644:	68 56       	ld.w	r6,r4[0x14]
80010646:	50 69       	stdsp	sp[0x18],r9
80010648:	64 5f       	ld.w	pc,r2[0x14]
8001064a:	44 5f       	lddsp	pc,sp[0x114]
8001064c:	47 61       	lddsp	r1,sp[0x1d8]
8001064e:	69 6e       	ld.w	lr,r4[0x58]
80010650:	00 00       	add	r0,r0
80010652:	00 00       	add	r0,r0
80010654:	54 68       	stdsp	sp[0x118],r8
80010656:	72 56       	ld.w	r6,r9[0x14]
80010658:	50 69       	stdsp	sp[0x18],r9
8001065a:	64 5f       	ld.w	pc,r2[0x14]
8001065c:	50 5f       	stdsp	sp[0x14],pc
8001065e:	47 00       	lddsp	r0,sp[0x1c0]
80010660:	54 68       	stdsp	sp[0x118],r8
80010662:	72 56       	ld.w	r6,r9[0x14]
80010664:	50 69       	stdsp	sp[0x18],r9
80010666:	64 5f       	ld.w	pc,r2[0x14]
80010668:	49 5f       	lddpc	pc,800106bc <send_rt_stats+0x3d4>
8001066a:	50 73       	stdsp	sp[0x1c],r3
8001066c:	74 47       	ld.w	r7,r10[0x10]
8001066e:	00 00       	add	r0,r0
80010670:	54 68       	stdsp	sp[0x118],r8
80010672:	72 56       	ld.w	r6,r9[0x14]
80010674:	50 69       	stdsp	sp[0x18],r9
80010676:	64 5f       	ld.w	pc,r2[0x14]
80010678:	49 5f       	lddpc	pc,800106cc <send_rt_stats+0x3e4>
8001067a:	50 72       	stdsp	sp[0x1c],r2
8001067c:	65 47       	ld.w	r7,r2[0x50]
8001067e:	00 00       	add	r0,r0
80010680:	54 68       	stdsp	sp[0x118],r8
80010682:	72 56       	ld.w	r6,r9[0x14]
80010684:	50 69       	stdsp	sp[0x18],r9
80010686:	64 5f       	ld.w	pc,r2[0x14]
80010688:	44 5f       	lddsp	pc,sp[0x114]
8001068a:	47 61       	lddsp	r1,sp[0x1d8]
8001068c:	69 6e       	ld.w	lr,r4[0x58]
8001068e:	00 00       	add	r0,r0
80010690:	54 68       	stdsp	sp[0x118],r8
80010692:	72 56       	ld.w	r6,r9[0x14]
80010694:	50 69       	stdsp	sp[0x18],r9
80010696:	64 5f       	ld.w	pc,r2[0x14]
80010698:	44 5f       	lddsp	pc,sp[0x114]
8001069a:	4c 50       	lddpc	r0,800107ac <send_rt_stats+0x4c4>
8001069c:	46 00       	lddsp	r0,sp[0x180]
8001069e:	00 00       	add	r0,r0
800106a0:	54 68       	stdsp	sp[0x118],r8
800106a2:	72 56       	ld.w	r6,r9[0x14]
800106a4:	50 69       	stdsp	sp[0x18],r9
800106a6:	64 5f       	ld.w	pc,r2[0x14]
800106a8:	73 6f       	ld.w	pc,r9[0x58]
800106aa:	66 74       	ld.w	r4,r3[0x1c]
800106ac:	00 00       	add	r0,r0
800106ae:	00 00       	add	r0,r0
800106b0:	51 46       	stdsp	sp[0x50],r6
800106b2:	5f 6b       	srmi	r11
800106b4:	70 5f       	ld.w	pc,r8[0x14]
800106b6:	61 63       	ld.w	r3,r0[0x58]
800106b8:	63 00       	ld.w	r0,r1[0x40]
800106ba:	00 00       	add	r0,r0
800106bc:	51 46       	stdsp	sp[0x50],r6
800106be:	5f 6b       	srmi	r11
800106c0:	70 5f       	ld.w	pc,r8[0x14]
800106c2:	6d 61       	ld.w	r1,r6[0x58]
800106c4:	67 00       	ld.w	r0,r3[0x40]
800106c6:	00 00       	add	r0,r0
800106c8:	42 69       	lddsp	r9,sp[0x98]
800106ca:	61 73       	ld.w	r3,r0[0x5c]
800106cc:	5f 47       	srge	r7
800106ce:	79 72       	ld.w	r2,r12[0x5c]
800106d0:	6f 5f       	ld.w	pc,r7[0x54]
800106d2:	58 00       	cp.w	r0,0
800106d4:	42 69       	lddsp	r9,sp[0x98]
800106d6:	61 73       	ld.w	r3,r0[0x5c]
800106d8:	5f 47       	srge	r7
800106da:	79 72       	ld.w	r2,r12[0x5c]
800106dc:	6f 5f       	ld.w	pc,r7[0x54]
800106de:	59 00       	cp.w	r0,16
800106e0:	42 69       	lddsp	r9,sp[0x98]
800106e2:	61 73       	ld.w	r3,r0[0x5c]
800106e4:	5f 47       	srge	r7
800106e6:	79 72       	ld.w	r2,r12[0x5c]
800106e8:	6f 5f       	ld.w	pc,r7[0x54]
800106ea:	5a 00       	cp.w	r0,-32
800106ec:	42 69       	lddsp	r9,sp[0x98]
800106ee:	61 73       	ld.w	r3,r0[0x5c]
800106f0:	5f 41       	srge	r1
800106f2:	63 63       	ld.w	r3,r1[0x58]
800106f4:	5f 58       	srlt	r8
800106f6:	00 00       	add	r0,r0
800106f8:	42 69       	lddsp	r9,sp[0x98]
800106fa:	61 73       	ld.w	r3,r0[0x5c]
800106fc:	5f 41       	srge	r1
800106fe:	63 63       	ld.w	r3,r1[0x58]
80010700:	5f 59       	srlt	r9
80010702:	00 00       	add	r0,r0
80010704:	42 69       	lddsp	r9,sp[0x98]
80010706:	61 73       	ld.w	r3,r0[0x5c]
80010708:	5f 41       	srge	r1
8001070a:	63 63       	ld.w	r3,r1[0x58]
8001070c:	5f 5a       	srlt	r10
8001070e:	00 00       	add	r0,r0
80010710:	42 69       	lddsp	r9,sp[0x98]
80010712:	61 73       	ld.w	r3,r0[0x5c]
80010714:	5f 4d       	srge	sp
80010716:	61 67       	ld.w	r7,r0[0x58]
80010718:	5f 58       	srlt	r8
8001071a:	00 00       	add	r0,r0
8001071c:	42 69       	lddsp	r9,sp[0x98]
8001071e:	61 73       	ld.w	r3,r0[0x5c]
80010720:	5f 4d       	srge	sp
80010722:	61 67       	ld.w	r7,r0[0x58]
80010724:	5f 59       	srlt	r9
80010726:	00 00       	add	r0,r0
80010728:	42 69       	lddsp	r9,sp[0x98]
8001072a:	61 73       	ld.w	r3,r0[0x5c]
8001072c:	5f 4d       	srge	sp
8001072e:	61 67       	ld.w	r7,r0[0x58]
80010730:	5f 5a       	srlt	r10
80010732:	00 00       	add	r0,r0
80010734:	53 63       	stdsp	sp[0xd8],r3
80010736:	61 6c       	ld.w	r12,r0[0x58]
80010738:	65 5f       	ld.w	pc,r2[0x54]
8001073a:	47 79       	lddsp	r9,sp[0x1dc]
8001073c:	72 6f       	ld.w	pc,r9[0x18]
8001073e:	5f 58       	srlt	r8
80010740:	00 00       	add	r0,r0
80010742:	00 00       	add	r0,r0
80010744:	53 63       	stdsp	sp[0xd8],r3
80010746:	61 6c       	ld.w	r12,r0[0x58]
80010748:	65 5f       	ld.w	pc,r2[0x54]
8001074a:	47 79       	lddsp	r9,sp[0x1dc]
8001074c:	72 6f       	ld.w	pc,r9[0x18]
8001074e:	5f 59       	srlt	r9
80010750:	00 00       	add	r0,r0
80010752:	00 00       	add	r0,r0
80010754:	53 63       	stdsp	sp[0xd8],r3
80010756:	61 6c       	ld.w	r12,r0[0x58]
80010758:	65 5f       	ld.w	pc,r2[0x54]
8001075a:	47 79       	lddsp	r9,sp[0x1dc]
8001075c:	72 6f       	ld.w	pc,r9[0x18]
8001075e:	5f 5a       	srlt	r10
80010760:	00 00       	add	r0,r0
80010762:	00 00       	add	r0,r0
80010764:	53 63       	stdsp	sp[0xd8],r3
80010766:	61 6c       	ld.w	r12,r0[0x58]
80010768:	65 5f       	ld.w	pc,r2[0x54]
8001076a:	41 63       	lddsp	r3,sp[0x58]
8001076c:	63 5f       	ld.w	pc,r1[0x54]
8001076e:	58 00       	cp.w	r0,0
80010770:	53 63       	stdsp	sp[0xd8],r3
80010772:	61 6c       	ld.w	r12,r0[0x58]
80010774:	65 5f       	ld.w	pc,r2[0x54]
80010776:	41 63       	lddsp	r3,sp[0x58]
80010778:	63 5f       	ld.w	pc,r1[0x54]
8001077a:	59 00       	cp.w	r0,16
8001077c:	53 63       	stdsp	sp[0xd8],r3
8001077e:	61 6c       	ld.w	r12,r0[0x58]
80010780:	65 5f       	ld.w	pc,r2[0x54]
80010782:	41 63       	lddsp	r3,sp[0x58]
80010784:	63 5f       	ld.w	pc,r1[0x54]
80010786:	5a 00       	cp.w	r0,-32
80010788:	53 63       	stdsp	sp[0xd8],r3
8001078a:	61 6c       	ld.w	r12,r0[0x58]
8001078c:	65 5f       	ld.w	pc,r2[0x54]
8001078e:	4d 61       	lddpc	r1,800108e4 <add_PID_parameters+0xe4>
80010790:	67 5f       	ld.w	pc,r3[0x54]
80010792:	58 00       	cp.w	r0,0
80010794:	53 63       	stdsp	sp[0xd8],r3
80010796:	61 6c       	ld.w	r12,r0[0x58]
80010798:	65 5f       	ld.w	pc,r2[0x54]
8001079a:	4d 61       	lddpc	r1,800108f0 <add_PID_parameters+0xf0>
8001079c:	67 5f       	ld.w	pc,r3[0x54]
8001079e:	59 00       	cp.w	r0,16
800107a0:	53 63       	stdsp	sp[0xd8],r3
800107a2:	61 6c       	ld.w	r12,r0[0x58]
800107a4:	65 5f       	ld.w	pc,r2[0x54]
800107a6:	4d 61       	lddpc	r1,800108fc <add_PID_parameters+0xfc>
800107a8:	67 5f       	ld.w	pc,r3[0x54]
800107aa:	5a 00       	cp.w	r0,-32
800107ac:	49 44       	lddpc	r4,800107fc <send_rt_stats+0x514>
800107ae:	5f 53       	srlt	r3
800107b0:	79 73       	ld.w	r3,r12[0x5c]
800107b2:	74 65       	ld.w	r5,r10[0x18]
800107b4:	6d 00       	ld.w	r0,r6[0x40]
800107b6:	00 00       	add	r0,r0
800107b8:	49 44       	lddpc	r4,80010808 <add_PID_parameters+0x8>
800107ba:	5f 50       	srlt	r0
800107bc:	6c 61       	ld.w	r1,r6[0x18]
800107be:	6e 6e       	ld.w	lr,r7[0x18]
800107c0:	65 72       	ld.w	r2,r2[0x5c]
800107c2:	00 00       	add	r0,r0
800107c4:	50 6f       	stdsp	sp[0x18],pc
800107c6:	73 5f       	ld.w	pc,r9[0x54]
800107c8:	6b 70       	ld.w	r0,r5[0x5c]
800107ca:	5f 61       	srmi	r1
800107cc:	6c 74       	ld.w	r4,r6[0x1c]
800107ce:	00 00       	add	r0,r0
800107d0:	50 6f       	stdsp	sp[0x18],pc
800107d2:	73 5f       	ld.w	pc,r9[0x54]
800107d4:	6b 70       	ld.w	r0,r5[0x5c]
800107d6:	5f 76       	srpl	r6
800107d8:	65 6c       	ld.w	r12,r2[0x58]
800107da:	62 00       	ld.w	r0,r1[0x0]
800107dc:	50 6f       	stdsp	sp[0x18],pc
800107de:	73 5f       	ld.w	pc,r9[0x54]
800107e0:	6b 70       	ld.w	r0,r5[0x5c]
800107e2:	5f 70       	srpl	r0
800107e4:	6f 73       	ld.w	r3,r7[0x5c]
800107e6:	30 00       	mov	r0,0
800107e8:	50 6f       	stdsp	sp[0x18],pc
800107ea:	73 5f       	ld.w	pc,r9[0x54]
800107ec:	6b 70       	ld.w	r0,r5[0x5c]
800107ee:	5f 70       	srpl	r0
800107f0:	6f 73       	ld.w	r3,r7[0x5c]
800107f2:	31 00       	mov	r0,16
800107f4:	50 6f       	stdsp	sp[0x18],pc
800107f6:	73 5f       	ld.w	pc,r9[0x54]
800107f8:	6b 70       	ld.w	r0,r5[0x5c]
800107fa:	5f 70       	srpl	r0
800107fc:	6f 73       	ld.w	r3,r7[0x5c]
800107fe:	32 00       	mov	r0,32

80010800 <add_PID_parameters>:


void add_PID_parameters(void) {
80010800:	eb cd 40 c0 	pushm	r6-r7,lr
80010804:	1a 97       	mov	r7,sp
80010806:	20 3d       	sub	sp,12
80010808:	fe f6 04 cc 	ld.w	r6,pc[1228]
8001080c:	1e 26       	rsub	r6,pc
	Stabiliser_t* rate_stabiliser = &centralData->stabiliser_stack.rate_stabiliser;
8001080e:	ec f8 00 00 	ld.w	r8,r6[0]
80010812:	70 08       	ld.w	r8,r8[0x0]
80010814:	f0 c8 fe 60 	sub	r8,r8,-416
80010818:	ef 48 ff f4 	st.w	r7[-12],r8
	Stabiliser_t* attitude_stabiliser = &centralData->stabiliser_stack.attitude_stabiliser;
8001081c:	ec f8 00 00 	ld.w	r8,r6[0]
80010820:	70 08       	ld.w	r8,r8[0x0]
80010822:	f0 c8 fd 24 	sub	r8,r8,-732
80010826:	ef 48 ff f8 	st.w	r7[-8],r8
	Stabiliser_t* velocity_stabiliser= &centralData->stabiliser_stack.velocity_stabiliser;
8001082a:	ec f8 00 00 	ld.w	r8,r6[0]
8001082e:	70 08       	ld.w	r8,r8[0x0]
80010830:	f0 c8 fb e8 	sub	r8,r8,-1048
80010834:	ef 48 ff fc 	st.w	r7[-4],r8

	
	add_parameter_int32(&centralData->simulation_mode, "Sim_mode");
80010838:	ec f8 00 00 	ld.w	r8,r6[0]
8001083c:	70 08       	ld.w	r8,r8[0x0]
8001083e:	f0 c8 ef 40 	sub	r8,r8,-4288
80010842:	fe cb 04 16 	sub	r11,pc,1046
80010846:	10 9c       	mov	r12,r8
80010848:	f0 16 01 fa 	mcall	r6[2024]
	// Roll rate PID
	add_parameter_float(&rate_stabiliser->rpy_controller[ROLL].p_gain, "RollRPid_P_G");
8001084c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80010850:	fe cb 04 18 	sub	r11,pc,1048
80010854:	10 9c       	mov	r12,r8
80010856:	f0 16 00 0e 	mcall	r6[56]
	//add_parameter_float(&rate_stabiliser->rpy_controller[ROLL].clip_max, "RollRPid_P_CLmx");
	//add_parameter_float(&rate_stabiliser->rpy_controller[ROLL].clip_min, "RollRPid_P_CLmn");
	//add_parameter_float(&rate_stabiliser->rpy_controller[ROLL].integrator.clip, "RollRPid_I_CLip");
	add_parameter_float(&rate_stabiliser->rpy_controller[ROLL].integrator.postgain, "RollRPid_I_PstG");
8001085a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001085e:	2f 08       	sub	r8,-16
80010860:	fe cb 04 18 	sub	r11,pc,1048
80010864:	10 9c       	mov	r12,r8
80010866:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&rate_stabiliser->rpy_controller[ROLL].integrator.pregain, "RollRPid_I_PreG");
8001086a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001086e:	2f 48       	sub	r8,-12
80010870:	fe cb 04 18 	sub	r11,pc,1048
80010874:	10 9c       	mov	r12,r8
80010876:	f0 16 00 0e 	mcall	r6[56]
	//add_parameter_float(&rate_stabiliser->rpy_controller[ROLL].differentiator.clip, "RollRPid_D_Clip");
	add_parameter_float(&rate_stabiliser->rpy_controller[ROLL].differentiator.gain, "RollRPid_D_Gain");
8001087a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001087e:	2e 08       	sub	r8,-32
80010880:	fe cb 04 18 	sub	r11,pc,1048
80010884:	10 9c       	mov	r12,r8
80010886:	f0 16 00 0e 	mcall	r6[56]
	//add_parameter_float(&rate_stabiliser->rpy_controller[ROLL].differentiator.LPF, "RollRPid_D_LPF");
	
	// Roll attitude PID
	add_parameter_float(&attitude_stabiliser->rpy_controller[ROLL].p_gain, "RollAPid_P_G");
8001088a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001088e:	fe cb 04 16 	sub	r11,pc,1046
80010892:	10 9c       	mov	r12,r8
80010894:	f0 16 00 0e 	mcall	r6[56]
	//add_parameter_float(&attitude_stabiliser->rpy_controller[ROLL].clip_max, "RollAPid_P_CLmx");
	//add_parameter_float(&attitude_stabiliser->rpy_controller[ROLL].clip_min, "RollAPid_P_CLmn");
	//add_parameter_float(&attitude_stabiliser->rpy_controller[ROLL].integrator.clip, "RollAPid_I_CLip");
	add_parameter_float(&attitude_stabiliser->rpy_controller[ROLL].integrator.postgain, "RollAPid_I_PstG");
80010898:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001089c:	2f 08       	sub	r8,-16
8001089e:	fe cb 04 16 	sub	r11,pc,1046
800108a2:	10 9c       	mov	r12,r8
800108a4:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&attitude_stabiliser->rpy_controller[ROLL].integrator.pregain, "RollAPid_I_PreG");
800108a8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800108ac:	2f 48       	sub	r8,-12
800108ae:	fe cb 04 16 	sub	r11,pc,1046
800108b2:	10 9c       	mov	r12,r8
800108b4:	f0 16 00 0e 	mcall	r6[56]
	//add_parameter_float(&attitude_stabiliser->rpy_controller[ROLL].differentiator.clip, "RollAPid_D_Clip");
	add_parameter_float(&attitude_stabiliser->rpy_controller[ROLL].differentiator.gain, "RollAPid_D_Gain");
800108b8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800108bc:	2e 08       	sub	r8,-32
800108be:	fe cb 04 16 	sub	r11,pc,1046
800108c2:	10 9c       	mov	r12,r8
800108c4:	f0 16 00 0e 	mcall	r6[56]
	//add_parameter_float(&attitude_stabiliser->rpy_controller[ROLL].differentiator.LPF, "RollAPid_D_LPF");

	// Pitch rate PID
	add_parameter_float(&rate_stabiliser->rpy_controller[PITCH].p_gain, "PitchRPid_P_G");
800108c8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800108cc:	2b c8       	sub	r8,-68
800108ce:	fe cb 04 16 	sub	r11,pc,1046
800108d2:	10 9c       	mov	r12,r8
800108d4:	f0 16 00 0e 	mcall	r6[56]
	//add_parameter_float(&rate_stabiliser->rpy_controller[PITCH].clip_max, "PitchRPid_P_CLmx");
	//add_parameter_float(&rate_stabiliser->rpy_controller[PITCH].clip_min, "PitchRPid_P_CLmn");
	//add_parameter_float(&rate_stabiliser->rpy_controller[PITCH].integrator.clip, "PitchRPid_I_CLip");
	add_parameter_float(&rate_stabiliser->rpy_controller[PITCH].integrator.postgain, "PitchRPid_I_PstG");
800108d8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800108dc:	2a c8       	sub	r8,-84
800108de:	fe cb 04 16 	sub	r11,pc,1046
800108e2:	10 9c       	mov	r12,r8
800108e4:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&rate_stabiliser->rpy_controller[PITCH].integrator.pregain, "PitchRPid_I_PreG");
800108e8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800108ec:	2b 08       	sub	r8,-80
800108ee:	fe cb 04 12 	sub	r11,pc,1042
800108f2:	10 9c       	mov	r12,r8
800108f4:	f0 16 00 0e 	mcall	r6[56]
	//add_parameter_float(&rate_stabiliser->rpy_controller[PITCH].differentiator.clip, "PitchRPid_D_Clip");
	add_parameter_float(&rate_stabiliser->rpy_controller[PITCH].differentiator.gain, "PitchRPid_D_Gain");
800108f8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800108fc:	29 c8       	sub	r8,-100
800108fe:	fe cb 04 0e 	sub	r11,pc,1038
80010902:	10 9c       	mov	r12,r8
80010904:	f0 16 00 0e 	mcall	r6[56]
	//add_parameter_float(&rate_stabiliser->rpy_controller[PITCH].differentiator.LPF, "PitchRPid_D_LPF");
	
	// Pitch attitude PID
	add_parameter_float(&attitude_stabiliser->rpy_controller[PITCH].p_gain, "PitchAPid_P_G");
80010908:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001090c:	2b c8       	sub	r8,-68
8001090e:	fe cb 04 0a 	sub	r11,pc,1034
80010912:	10 9c       	mov	r12,r8
80010914:	f0 16 00 0e 	mcall	r6[56]
	//add_parameter_float(&attitude_stabiliser->rpy_controller[PITCH].clip_max, "PitchAPid_P_CLmx");
	//add_parameter_float(&attitude_stabiliser->rpy_controller[PITCH].clip_min, "PitchAPid_P_CLmn");
	//add_parameter_float(&attitude_stabiliser->rpy_controller[PITCH].integrator.clip, "PitchAPid_I_CLip");
	add_parameter_float(&attitude_stabiliser->rpy_controller[PITCH].integrator.postgain, "PitchAPid_I_PstG");
80010918:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001091c:	2a c8       	sub	r8,-84
8001091e:	fe cb 04 0a 	sub	r11,pc,1034
80010922:	10 9c       	mov	r12,r8
80010924:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&attitude_stabiliser->rpy_controller[PITCH].integrator.pregain, "PitchAPid_I_PreG");
80010928:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001092c:	2b 08       	sub	r8,-80
8001092e:	fe cb 04 06 	sub	r11,pc,1030
80010932:	10 9c       	mov	r12,r8
80010934:	f0 16 00 0e 	mcall	r6[56]
	//add_parameter_float(&attitude_stabiliser->rpy_controller[PITCH].differentiator.clip, "PitchAPid_D_Clip");
	add_parameter_float(&attitude_stabiliser->rpy_controller[PITCH].differentiator.gain, "PitchAPid_D_Gain");
80010938:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001093c:	29 c8       	sub	r8,-100
8001093e:	fe cb 04 02 	sub	r11,pc,1026
80010942:	10 9c       	mov	r12,r8
80010944:	f0 16 00 0e 	mcall	r6[56]
	//add_parameter_float(&attitude_stabiliser->rpy_controller[PITCH].differentiator.LPF, "PitchAPid_D_LPF");

	// Yaw rate PID
	add_parameter_float(&rate_stabiliser->rpy_controller[YAW].p_gain, "YawRPid_P_G");
80010948:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001094c:	f0 c8 ff 78 	sub	r8,r8,-136
80010950:	fe cb 04 00 	sub	r11,pc,1024
80010954:	10 9c       	mov	r12,r8
80010956:	f0 16 00 0e 	mcall	r6[56]
	//add_parameter_float(&rate_stabiliser->rpy_controller[YAW].clip_max, "YawRPid_P_CLmx");
	//add_parameter_float(&rate_stabiliser->rpy_controller[YAW].clip_min, "YawRPid_P_CLmn");
	//add_parameter_float(&rate_stabiliser->rpy_controller[YAW].integrator.clip, "YawRPid_I_CLip");
	add_parameter_float(&rate_stabiliser->rpy_controller[YAW].integrator.postgain, "YawRPid_I_PstG");
8001095a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001095e:	f0 c8 ff 68 	sub	r8,r8,-152
80010962:	fe cb 04 06 	sub	r11,pc,1030
80010966:	10 9c       	mov	r12,r8
80010968:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&rate_stabiliser->rpy_controller[YAW].integrator.pregain, "YawRPid_I_PreG");
8001096c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80010970:	f0 c8 ff 6c 	sub	r8,r8,-148
80010974:	fe cb 04 08 	sub	r11,pc,1032
80010978:	10 9c       	mov	r12,r8
8001097a:	f0 16 00 0e 	mcall	r6[56]
	//add_parameter_float(&rate_stabiliser->rpy_controller[YAW].differentiator.clip, "YawRPid_D_Clip");
	add_parameter_float(&rate_stabiliser->rpy_controller[YAW].differentiator.gain, "YawRPid_D_Gain");
8001097e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80010982:	f0 c8 ff 58 	sub	r8,r8,-168
80010986:	fe cb 04 0a 	sub	r11,pc,1034
8001098a:	10 9c       	mov	r12,r8
8001098c:	f0 16 00 0e 	mcall	r6[56]
	//add_parameter_float(&rate_stabiliser->rpy_controller[YAW].differentiator.LPF, "YawRPid_D_LPF");
	
	// Yaw attitude PID
	add_parameter_float(&attitude_stabiliser->rpy_controller[YAW].p_gain, "YawAPid_P_G");
80010990:	ee f8 ff f8 	ld.w	r8,r7[-8]
80010994:	f0 c8 ff 78 	sub	r8,r8,-136
80010998:	fe cb 04 0c 	sub	r11,pc,1036
8001099c:	10 9c       	mov	r12,r8
8001099e:	f0 16 00 0e 	mcall	r6[56]
	//add_parameter_float(&attitude_stabiliser->rpy_controller[YAW].clip_max, "YawAPid_P_CLmx");
	//add_parameter_float(&attitude_stabiliser->rpy_controller[YAW].clip_min, "YawAPid_P_CLmn");
	//add_parameter_float(&attitude_stabiliser->rpy_controller[YAW].integrator.clip, "YawAPid_I_CLip");
	add_parameter_float(&attitude_stabiliser->rpy_controller[YAW].integrator.postgain, "YawAPid_I_PstG");
800109a2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800109a6:	f0 c8 ff 68 	sub	r8,r8,-152
800109aa:	fe cb 04 12 	sub	r11,pc,1042
800109ae:	10 9c       	mov	r12,r8
800109b0:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&attitude_stabiliser->rpy_controller[YAW].integrator.pregain, "YawAPid_I_PreG");
800109b4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800109b8:	f0 c8 ff 6c 	sub	r8,r8,-148
800109bc:	fe cb 04 14 	sub	r11,pc,1044
800109c0:	10 9c       	mov	r12,r8
800109c2:	f0 16 00 0e 	mcall	r6[56]
	//add_parameter_float(&attitude_stabiliser->rpy_controller[YAW].differentiator.clip, "YawAPid_D_Clip");
	add_parameter_float(&attitude_stabiliser->rpy_controller[YAW].differentiator.gain, "YawAPid_D_Gain");
800109c6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800109ca:	f0 c8 ff 58 	sub	r8,r8,-168
800109ce:	fe cb 04 16 	sub	r11,pc,1046
800109d2:	10 9c       	mov	r12,r8
800109d4:	f0 16 00 0e 	mcall	r6[56]
	//add_parameter_float(&attitude_stabiliser->rpy_controller[YAW].differentiator.LPF, "YawAPid_D_LPF");


	// Roll velocity PID
	add_parameter_float(&velocity_stabiliser->rpy_controller[ROLL].p_gain, "RollVPid_P_G");
800109d8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800109dc:	fe cb 04 14 	sub	r11,pc,1044
800109e0:	10 9c       	mov	r12,r8
800109e2:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&velocity_stabiliser->rpy_controller[ROLL].integrator.postgain, "RollVPid_I_PstG");
800109e6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800109ea:	2f 08       	sub	r8,-16
800109ec:	fe cb 04 14 	sub	r11,pc,1044
800109f0:	10 9c       	mov	r12,r8
800109f2:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&velocity_stabiliser->rpy_controller[ROLL].integrator.pregain, "RollVPid_I_PreG");
800109f6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800109fa:	2f 48       	sub	r8,-12
800109fc:	fe cb 04 14 	sub	r11,pc,1044
80010a00:	10 9c       	mov	r12,r8
80010a02:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&velocity_stabiliser->rpy_controller[ROLL].differentiator.gain, "RollVPid_D_Gain");
80010a06:	ee f8 ff fc 	ld.w	r8,r7[-4]
80010a0a:	2e 08       	sub	r8,-32
80010a0c:	fe cb 04 14 	sub	r11,pc,1044
80010a10:	10 9c       	mov	r12,r8
80010a12:	f0 16 00 0e 	mcall	r6[56]

	// Pitch velocity PID
	add_parameter_float(&velocity_stabiliser->rpy_controller[PITCH].p_gain, "PitchVPid_P_G");
80010a16:	ee f8 ff fc 	ld.w	r8,r7[-4]
80010a1a:	2b c8       	sub	r8,-68
80010a1c:	fe cb 04 14 	sub	r11,pc,1044
80010a20:	10 9c       	mov	r12,r8
80010a22:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&velocity_stabiliser->rpy_controller[PITCH].integrator.postgain, "PitchVPid_I_PstG");
80010a26:	ee f8 ff fc 	ld.w	r8,r7[-4]
80010a2a:	2a c8       	sub	r8,-84
80010a2c:	fe cb 04 14 	sub	r11,pc,1044
80010a30:	10 9c       	mov	r12,r8
80010a32:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&velocity_stabiliser->rpy_controller[PITCH].integrator.pregain, "PitchVPid_I_PreG");
80010a36:	ee f8 ff fc 	ld.w	r8,r7[-4]
80010a3a:	2b 08       	sub	r8,-80
80010a3c:	fe cb 04 10 	sub	r11,pc,1040
80010a40:	10 9c       	mov	r12,r8
80010a42:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&velocity_stabiliser->rpy_controller[PITCH].differentiator.gain, "PitchVPid_D_Gain");
80010a46:	ee f8 ff fc 	ld.w	r8,r7[-4]
80010a4a:	29 c8       	sub	r8,-100
80010a4c:	fe cb 04 0c 	sub	r11,pc,1036
80010a50:	10 9c       	mov	r12,r8
80010a52:	f0 16 00 0e 	mcall	r6[56]

	// Thrust velocity PID
	add_parameter_float(&velocity_stabiliser->thrust_controller.p_gain, "ThrVPid_P_G");
80010a56:	ee f8 ff fc 	ld.w	r8,r7[-4]
80010a5a:	f0 c8 ff 34 	sub	r8,r8,-204
80010a5e:	fe cb 04 0a 	sub	r11,pc,1034
80010a62:	10 9c       	mov	r12,r8
80010a64:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&velocity_stabiliser->thrust_controller.integrator.postgain, "ThrVPid_I_PstG");
80010a68:	ee f8 ff fc 	ld.w	r8,r7[-4]
80010a6c:	f0 c8 ff 24 	sub	r8,r8,-220
80010a70:	fe cb 04 10 	sub	r11,pc,1040
80010a74:	10 9c       	mov	r12,r8
80010a76:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&velocity_stabiliser->thrust_controller.integrator.pregain, "ThrVPid_I_PreG");
80010a7a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80010a7e:	f0 c8 ff 28 	sub	r8,r8,-216
80010a82:	fe cb 04 12 	sub	r11,pc,1042
80010a86:	10 9c       	mov	r12,r8
80010a88:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&velocity_stabiliser->thrust_controller.differentiator.gain, "ThrVPid_D_Gain");
80010a8c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80010a90:	f0 c8 ff 14 	sub	r8,r8,-236
80010a94:	fe cb 04 14 	sub	r11,pc,1044
80010a98:	10 9c       	mov	r12,r8
80010a9a:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&velocity_stabiliser->thrust_controller.differentiator.LPF, "ThrVPid_D_LPF");
80010a9e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80010aa2:	f0 c8 ff 0c 	sub	r8,r8,-244
80010aa6:	fe cb 04 16 	sub	r11,pc,1046
80010aaa:	10 9c       	mov	r12,r8
80010aac:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&velocity_stabiliser->thrust_controller.soft_zone_width, "ThrVPid_soft");
80010ab0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80010ab4:	f0 c8 fe f4 	sub	r8,r8,-268
80010ab8:	fe cb 04 18 	sub	r11,pc,1048
80010abc:	10 9c       	mov	r12,r8
80010abe:	f0 16 00 0e 	mcall	r6[56]

	// qfilter
	add_parameter_float(&centralData->imu1.attitude.kp, "QF_kp_acc");
80010ac2:	ec f8 00 00 	ld.w	r8,r6[0]
80010ac6:	70 08       	ld.w	r8,r8[0x0]
80010ac8:	f0 c8 ff 64 	sub	r8,r8,-156
80010acc:	fe cb 04 1c 	sub	r11,pc,1052
80010ad0:	10 9c       	mov	r12,r8
80010ad2:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&centralData->imu1.attitude.kp_mag, "QF_kp_mag");
80010ad6:	ec f8 00 00 	ld.w	r8,r6[0]
80010ada:	70 08       	ld.w	r8,r8[0x0]
80010adc:	f0 c8 ff 5c 	sub	r8,r8,-164
80010ae0:	fe cb 04 24 	sub	r11,pc,1060
80010ae4:	10 9c       	mov	r12,r8
80010ae6:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&attitude_stabiliser->rpy_controller[YAW].differentiator.gain, "YawAPid_D_Gain");
80010aea:	ee f8 ff f8 	ld.w	r8,r7[-8]
80010aee:	f0 c8 ff 58 	sub	r8,r8,-168
80010af2:	fe cb 05 3a 	sub	r11,pc,1338
80010af6:	10 9c       	mov	r12,r8
80010af8:	f0 16 00 0e 	mcall	r6[56]
	
	// Biaises
	add_parameter_float(&centralData->imu1.attitude.be[GYRO_OFFSET+X],"Bias_Gyro_X");
80010afc:	ec f8 00 00 	ld.w	r8,r6[0]
80010b00:	70 08       	ld.w	r8,r8[0x0]
80010b02:	2d 08       	sub	r8,-48
80010b04:	fe cb 04 3c 	sub	r11,pc,1084
80010b08:	10 9c       	mov	r12,r8
80010b0a:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&centralData->imu1.attitude.be[GYRO_OFFSET+Y],"Bias_Gyro_Y");
80010b0e:	ec f8 00 00 	ld.w	r8,r6[0]
80010b12:	70 08       	ld.w	r8,r8[0x0]
80010b14:	2c c8       	sub	r8,-52
80010b16:	fe cb 04 42 	sub	r11,pc,1090
80010b1a:	10 9c       	mov	r12,r8
80010b1c:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&centralData->imu1.attitude.be[GYRO_OFFSET+Z],"Bias_Gyro_Z");
80010b20:	ec f8 00 00 	ld.w	r8,r6[0]
80010b24:	70 08       	ld.w	r8,r8[0x0]
80010b26:	2c 88       	sub	r8,-56
80010b28:	fe cb 04 48 	sub	r11,pc,1096
80010b2c:	10 9c       	mov	r12,r8
80010b2e:	f0 16 00 0e 	mcall	r6[56]
	
	add_parameter_float(&centralData->imu1.attitude.be[ACC_OFFSET+X],"Bias_Acc_X");
80010b32:	ec f8 00 00 	ld.w	r8,r6[0]
80010b36:	70 08       	ld.w	r8,r8[0x0]
80010b38:	2c 48       	sub	r8,-60
80010b3a:	fe cb 04 4e 	sub	r11,pc,1102
80010b3e:	10 9c       	mov	r12,r8
80010b40:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&centralData->imu1.attitude.be[ACC_OFFSET+Y],"Bias_Acc_Y");
80010b44:	ec f8 00 00 	ld.w	r8,r6[0]
80010b48:	70 08       	ld.w	r8,r8[0x0]
80010b4a:	2c 08       	sub	r8,-64
80010b4c:	fe cb 04 54 	sub	r11,pc,1108
80010b50:	10 9c       	mov	r12,r8
80010b52:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&centralData->imu1.attitude.be[ACC_OFFSET+Z],"Bias_Acc_Z");
80010b56:	ec f8 00 00 	ld.w	r8,r6[0]
80010b5a:	70 08       	ld.w	r8,r8[0x0]
80010b5c:	2b c8       	sub	r8,-68
80010b5e:	fe cb 04 5a 	sub	r11,pc,1114
80010b62:	10 9c       	mov	r12,r8
80010b64:	f0 16 00 0e 	mcall	r6[56]
	
	add_parameter_float(&centralData->imu1.attitude.be[COMPASS_OFFSET+X],"Bias_Mag_X");
80010b68:	ec f8 00 00 	ld.w	r8,r6[0]
80010b6c:	70 08       	ld.w	r8,r8[0x0]
80010b6e:	2b 88       	sub	r8,-72
80010b70:	fe cb 04 60 	sub	r11,pc,1120
80010b74:	10 9c       	mov	r12,r8
80010b76:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&centralData->imu1.attitude.be[COMPASS_OFFSET+Y],"Bias_Mag_Y");
80010b7a:	ec f8 00 00 	ld.w	r8,r6[0]
80010b7e:	70 08       	ld.w	r8,r8[0x0]
80010b80:	2b 48       	sub	r8,-76
80010b82:	fe cb 04 66 	sub	r11,pc,1126
80010b86:	10 9c       	mov	r12,r8
80010b88:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&centralData->imu1.attitude.be[COMPASS_OFFSET+Z],"Bias_Mag_Z");
80010b8c:	ec f8 00 00 	ld.w	r8,r6[0]
80010b90:	70 08       	ld.w	r8,r8[0x0]
80010b92:	2b 08       	sub	r8,-80
80010b94:	fe cb 04 6c 	sub	r11,pc,1132
80010b98:	10 9c       	mov	r12,r8
80010b9a:	f0 16 00 0e 	mcall	r6[56]
	
	// Scale factor
	add_parameter_float(&centralData->imu1.raw_scale[GYRO_OFFSET+X],"Scale_Gyro_X");
80010b9e:	ec f8 00 00 	ld.w	r8,r6[0]
80010ba2:	70 08       	ld.w	r8,r8[0x0]
80010ba4:	f0 c8 fe ec 	sub	r8,r8,-276
80010ba8:	fe cb 04 74 	sub	r11,pc,1140
80010bac:	10 9c       	mov	r12,r8
80010bae:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&centralData->imu1.raw_scale[GYRO_OFFSET+Y],"Scale_Gyro_Y");
80010bb2:	ec f8 00 00 	ld.w	r8,r6[0]
80010bb6:	70 08       	ld.w	r8,r8[0x0]
80010bb8:	f0 c8 fe e8 	sub	r8,r8,-280
80010bbc:	fe cb 04 78 	sub	r11,pc,1144
80010bc0:	10 9c       	mov	r12,r8
80010bc2:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&centralData->imu1.raw_scale[GYRO_OFFSET+Z],"Scale_Gyro_Z");
80010bc6:	ec f8 00 00 	ld.w	r8,r6[0]
80010bca:	70 08       	ld.w	r8,r8[0x0]
80010bcc:	f0 c8 fe e4 	sub	r8,r8,-284
80010bd0:	fe cb 04 7c 	sub	r11,pc,1148
80010bd4:	10 9c       	mov	r12,r8
80010bd6:	f0 16 00 0e 	mcall	r6[56]
	
	add_parameter_float(&centralData->imu1.raw_scale[ACC_OFFSET+X],"Scale_Acc_X");
80010bda:	ec f8 00 00 	ld.w	r8,r6[0]
80010bde:	70 08       	ld.w	r8,r8[0x0]
80010be0:	f0 c8 fe e0 	sub	r8,r8,-288
80010be4:	fe cb 04 80 	sub	r11,pc,1152
80010be8:	10 9c       	mov	r12,r8
80010bea:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&centralData->imu1.raw_scale[ACC_OFFSET+Y],"Scale_Acc_Y");
80010bee:	ec f8 00 00 	ld.w	r8,r6[0]
80010bf2:	70 08       	ld.w	r8,r8[0x0]
80010bf4:	f0 c8 fe dc 	sub	r8,r8,-292
80010bf8:	fe cb 04 88 	sub	r11,pc,1160
80010bfc:	10 9c       	mov	r12,r8
80010bfe:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&centralData->imu1.raw_scale[ACC_OFFSET+Z],"Scale_Acc_Z");
80010c02:	ec f8 00 00 	ld.w	r8,r6[0]
80010c06:	70 08       	ld.w	r8,r8[0x0]
80010c08:	f0 c8 fe d8 	sub	r8,r8,-296
80010c0c:	fe cb 04 90 	sub	r11,pc,1168
80010c10:	10 9c       	mov	r12,r8
80010c12:	f0 16 00 0e 	mcall	r6[56]
	
	add_parameter_float(&centralData->imu1.raw_scale[COMPASS_OFFSET+X],"Scale_Mag_X");
80010c16:	ec f8 00 00 	ld.w	r8,r6[0]
80010c1a:	70 08       	ld.w	r8,r8[0x0]
80010c1c:	f0 c8 fe d4 	sub	r8,r8,-300
80010c20:	fe cb 04 98 	sub	r11,pc,1176
80010c24:	10 9c       	mov	r12,r8
80010c26:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&centralData->imu1.raw_scale[COMPASS_OFFSET+Y],"Scale_Mag_Y");
80010c2a:	ec f8 00 00 	ld.w	r8,r6[0]
80010c2e:	70 08       	ld.w	r8,r8[0x0]
80010c30:	f0 c8 fe d0 	sub	r8,r8,-304
80010c34:	fe cb 04 a0 	sub	r11,pc,1184
80010c38:	10 9c       	mov	r12,r8
80010c3a:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&centralData->imu1.raw_scale[COMPASS_OFFSET+Z],"Scale_Mag_Z");
80010c3e:	ec f8 00 00 	ld.w	r8,r6[0]
80010c42:	70 08       	ld.w	r8,r8[0x0]
80010c44:	f0 c8 fe cc 	sub	r8,r8,-308
80010c48:	fe cb 04 a8 	sub	r11,pc,1192
80010c4c:	10 9c       	mov	r12,r8
80010c4e:	f0 16 00 0e 	mcall	r6[56]
	
	add_parameter_uint8(&(mavlink_system.sysid),"ID_System");
80010c52:	fe cb 04 a6 	sub	r11,pc,1190
80010c56:	ec fc 00 70 	ld.w	r12,r6[112]
80010c5a:	f0 16 00 d7 	mcall	r6[860]
	add_parameter_uint8(&(mavlink_mission_planner.sysid),"ID_Planner");
80010c5e:	fe cb 04 a6 	sub	r11,pc,1190
80010c62:	ec fc 00 c4 	ld.w	r12,r6[196]
80010c66:	f0 16 00 d7 	mcall	r6[860]

	add_parameter_float(&centralData->position_estimator.kp_alt,"Pos_kp_alt");
80010c6a:	ec f8 00 00 	ld.w	r8,r6[0]
80010c6e:	70 08       	ld.w	r8,r8[0x0]
80010c70:	f0 c8 f2 ac 	sub	r8,r8,-3412
80010c74:	fe cb 04 b0 	sub	r11,pc,1200
80010c78:	10 9c       	mov	r12,r8
80010c7a:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&centralData->position_estimator.kp_vel_baro,"Pos_kp_velb");
80010c7e:	ec f8 00 00 	ld.w	r8,r6[0]
80010c82:	70 08       	ld.w	r8,r8[0x0]
80010c84:	f0 c8 f2 a8 	sub	r8,r8,-3416
80010c88:	fe cb 04 b8 	sub	r11,pc,1208
80010c8c:	10 9c       	mov	r12,r8
80010c8e:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&centralData->position_estimator.kp_pos[0],"Pos_kp_pos0");
80010c92:	ec f8 00 00 	ld.w	r8,r6[0]
80010c96:	70 08       	ld.w	r8,r8[0x0]
80010c98:	f0 c8 f2 b8 	sub	r8,r8,-3400
80010c9c:	fe cb 04 c0 	sub	r11,pc,1216
80010ca0:	10 9c       	mov	r12,r8
80010ca2:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&centralData->position_estimator.kp_pos[1],"Pos_kp_pos1");
80010ca6:	ec f8 00 00 	ld.w	r8,r6[0]
80010caa:	70 08       	ld.w	r8,r8[0x0]
80010cac:	f0 c8 f2 b4 	sub	r8,r8,-3404
80010cb0:	fe cb 04 c8 	sub	r11,pc,1224
80010cb4:	10 9c       	mov	r12,r8
80010cb6:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&centralData->position_estimator.kp_pos[2],"Pos_kp_pos2");
80010cba:	ec f8 00 00 	ld.w	r8,r6[0]
80010cbe:	70 08       	ld.w	r8,r8[0x0]
80010cc0:	f0 c8 f2 b0 	sub	r8,r8,-3408
80010cc4:	fe cb 04 d0 	sub	r11,pc,1232
80010cc8:	10 9c       	mov	r12,r8
80010cca:	f0 16 00 0e 	mcall	r6[56]
}
80010cce:	2f dd       	sub	sp,-12
80010cd0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80010cd4:	80 01       	ld.sh	r1,r0[0x0]
80010cd6:	06 90       	mov	r0,r3

80010cd8 <control_waypoint_timeout>:


task_return_t control_waypoint_timeout () {
80010cd8:	eb cd 40 c0 	pushm	r6-r7,lr
80010cdc:	1a 97       	mov	r7,sp
80010cde:	48 c6       	lddpc	r6,80010d0c <control_waypoint_timeout+0x34>
80010ce0:	1e 26       	rsub	r6,pc
	control_time_out_waypoint_msg(&(centralData->number_of_waypoints),&centralData->waypoint_receiving,&centralData->waypoint_sending);
80010ce2:	ec f8 00 00 	ld.w	r8,r6[0]
80010ce6:	70 08       	ld.w	r8,r8[0x0]
80010ce8:	f0 ca ef 4b 	sub	r10,r8,-4277
80010cec:	ec f8 00 00 	ld.w	r8,r6[0]
80010cf0:	70 08       	ld.w	r8,r8[0x0]
80010cf2:	f0 c9 ef 4a 	sub	r9,r8,-4278
80010cf6:	ec f8 00 00 	ld.w	r8,r6[0]
80010cfa:	70 08       	ld.w	r8,r8[0x0]
80010cfc:	f0 c8 ef e4 	sub	r8,r8,-4124
80010d00:	12 9b       	mov	r11,r9
80010d02:	10 9c       	mov	r12,r8
80010d04:	f0 16 02 04 	mcall	r6[2064]
}
80010d08:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80010d0c:	80 01       	ld.sh	r1,r0[0x0]
80010d0e:	0b 64       	ld.uh	r4,--r5

80010d10 <handle_specific_messages>:

void handle_specific_messages (Mavlink_Received_t* rec) {
80010d10:	eb cd 40 c0 	pushm	r6-r7,lr
80010d14:	1a 97       	mov	r7,sp
80010d16:	20 1d       	sub	sp,4
80010d18:	fe f6 02 e0 	ld.w	r6,pc[736]
80010d1c:	1e 26       	rsub	r6,pc
80010d1e:	ef 4c ff fc 	st.w	r7[-4],r12
	if (rec->msg.sysid == MAVLINK_BASE_STATION_ID) {
80010d22:	ee f8 ff fc 	ld.w	r8,r7[-4]
80010d26:	11 d9       	ld.ub	r9,r8[0x5]
80010d28:	3f f8       	mov	r8,-1
80010d2a:	f0 09 18 00 	cp.b	r9,r8
80010d2e:	e0 81 01 52 	brne	80010fd2 <handle_specific_messages+0x2c2>
		switch(rec->msg.msgid) {
80010d32:	ee f8 ff fc 	ld.w	r8,r7[-4]
80010d36:	11 f8       	ld.ub	r8,r8[0x7]
80010d38:	20 b8       	sub	r8,11
80010d3a:	e0 48 00 41 	cp.w	r8,65
80010d3e:	e0 8b 01 57 	brhi	80010fec <handle_specific_messages+0x2dc>
80010d42:	fe c9 ff f6 	sub	r9,pc,-10
80010d46:	f2 08 00 2f 	add	pc,r9,r8<<0x2
80010d4a:	00 00       	add	r0,r0
80010d4c:	e0 8f 01 25 	bral	80010f96 <handle_specific_messages+0x286>
80010d50:	e0 8f 01 50 	bral	80010ff0 <handle_specific_messages+0x2e0>
80010d54:	e0 8f 01 4e 	bral	80010ff0 <handle_specific_messages+0x2e0>
80010d58:	e0 8f 01 4c 	bral	80010ff0 <handle_specific_messages+0x2e0>
80010d5c:	e0 8f 01 4a 	bral	80010ff0 <handle_specific_messages+0x2e0>
80010d60:	e0 8f 01 48 	bral	80010ff0 <handle_specific_messages+0x2e0>
80010d64:	e0 8f 01 46 	bral	80010ff0 <handle_specific_messages+0x2e0>
80010d68:	e0 8f 01 44 	bral	80010ff0 <handle_specific_messages+0x2e0>
80010d6c:	e0 8f 01 42 	bral	80010ff0 <handle_specific_messages+0x2e0>
80010d70:	e0 8f 01 40 	bral	80010ff0 <handle_specific_messages+0x2e0>
80010d74:	e0 8f 01 3e 	bral	80010ff0 <handle_specific_messages+0x2e0>
80010d78:	e0 8f 01 3c 	bral	80010ff0 <handle_specific_messages+0x2e0>
80010d7c:	e0 8f 01 3a 	bral	80010ff0 <handle_specific_messages+0x2e0>
80010d80:	e0 8f 01 38 	bral	80010ff0 <handle_specific_messages+0x2e0>
80010d84:	e0 8f 01 36 	bral	80010ff0 <handle_specific_messages+0x2e0>
80010d88:	e0 8f 01 34 	bral	80010ff0 <handle_specific_messages+0x2e0>
80010d8c:	e0 8f 01 32 	bral	80010ff0 <handle_specific_messages+0x2e0>
80010d90:	e0 8f 01 30 	bral	80010ff0 <handle_specific_messages+0x2e0>
80010d94:	e0 8f 01 2e 	bral	80010ff0 <handle_specific_messages+0x2e0>
80010d98:	e0 8f 01 2c 	bral	80010ff0 <handle_specific_messages+0x2e0>
80010d9c:	e0 8f 01 2a 	bral	80010ff0 <handle_specific_messages+0x2e0>
80010da0:	e0 8f 01 28 	bral	80010ff0 <handle_specific_messages+0x2e0>
80010da4:	e0 8f 01 26 	bral	80010ff0 <handle_specific_messages+0x2e0>
80010da8:	e0 8f 01 24 	bral	80010ff0 <handle_specific_messages+0x2e0>
80010dac:	e0 8f 01 22 	bral	80010ff0 <handle_specific_messages+0x2e0>
80010db0:	e0 8f 01 20 	bral	80010ff0 <handle_specific_messages+0x2e0>
80010db4:	e0 8f 01 1e 	bral	80010ff0 <handle_specific_messages+0x2e0>
80010db8:	e0 8f 01 1c 	bral	80010ff0 <handle_specific_messages+0x2e0>
80010dbc:	e0 8f 00 4c 	bral	80010e54 <handle_specific_messages+0x144>
80010dc0:	e0 8f 00 67 	bral	80010e8e <handle_specific_messages+0x17e>
80010dc4:	e0 8f 00 82 	bral	80010ec8 <handle_specific_messages+0x1b8>
80010dc8:	e0 8f 01 14 	bral	80010ff0 <handle_specific_messages+0x2e0>
80010dcc:	e0 8f 00 92 	bral	80010ef0 <handle_specific_messages+0x1e0>
80010dd0:	e0 8f 00 ad 	bral	80010f2a <handle_specific_messages+0x21a>
80010dd4:	e0 8f 00 c4 	bral	80010f5c <handle_specific_messages+0x24c>
80010dd8:	e0 8f 01 0c 	bral	80010ff0 <handle_specific_messages+0x2e0>
80010ddc:	e0 8f 00 d1 	bral	80010f7e <handle_specific_messages+0x26e>
80010de0:	e0 8f 01 08 	bral	80010ff0 <handle_specific_messages+0x2e0>
80010de4:	e0 8f 01 06 	bral	80010ff0 <handle_specific_messages+0x2e0>
80010de8:	e0 8f 01 04 	bral	80010ff0 <handle_specific_messages+0x2e0>
80010dec:	e0 8f 01 02 	bral	80010ff0 <handle_specific_messages+0x2e0>
80010df0:	e0 8f 01 00 	bral	80010ff0 <handle_specific_messages+0x2e0>
80010df4:	e0 8f 00 fe 	bral	80010ff0 <handle_specific_messages+0x2e0>
80010df8:	e0 8f 00 fc 	bral	80010ff0 <handle_specific_messages+0x2e0>
80010dfc:	e0 8f 00 fa 	bral	80010ff0 <handle_specific_messages+0x2e0>
80010e00:	e0 8f 00 f8 	bral	80010ff0 <handle_specific_messages+0x2e0>
80010e04:	e0 8f 00 f6 	bral	80010ff0 <handle_specific_messages+0x2e0>
80010e08:	e0 8f 00 f4 	bral	80010ff0 <handle_specific_messages+0x2e0>
80010e0c:	e0 8f 00 f2 	bral	80010ff0 <handle_specific_messages+0x2e0>
80010e10:	e0 8f 00 f0 	bral	80010ff0 <handle_specific_messages+0x2e0>
80010e14:	e0 8f 00 ee 	bral	80010ff0 <handle_specific_messages+0x2e0>
80010e18:	e0 8f 00 ec 	bral	80010ff0 <handle_specific_messages+0x2e0>
80010e1c:	e0 8f 00 ea 	bral	80010ff0 <handle_specific_messages+0x2e0>
80010e20:	e0 8f 00 e8 	bral	80010ff0 <handle_specific_messages+0x2e0>
80010e24:	e0 8f 00 e6 	bral	80010ff0 <handle_specific_messages+0x2e0>
80010e28:	e0 8f 00 e4 	bral	80010ff0 <handle_specific_messages+0x2e0>
80010e2c:	e0 8f 00 e2 	bral	80010ff0 <handle_specific_messages+0x2e0>
80010e30:	e0 8f 00 e0 	bral	80010ff0 <handle_specific_messages+0x2e0>
80010e34:	e0 8f 00 de 	bral	80010ff0 <handle_specific_messages+0x2e0>
80010e38:	e0 8f 00 dc 	bral	80010ff0 <handle_specific_messages+0x2e0>
80010e3c:	e0 8f 00 da 	bral	80010ff0 <handle_specific_messages+0x2e0>
80010e40:	e0 8f 00 d8 	bral	80010ff0 <handle_specific_messages+0x2e0>
80010e44:	e0 8f 00 d6 	bral	80010ff0 <handle_specific_messages+0x2e0>
80010e48:	e0 8f 00 d4 	bral	80010ff0 <handle_specific_messages+0x2e0>
80010e4c:	e0 8f 00 d2 	bral	80010ff0 <handle_specific_messages+0x2e0>
80010e50:	e0 8f 00 bb 	bral	80010fc6 <handle_specific_messages+0x2b6>
				case MAVLINK_MSG_ID_MISSION_ITEM: { // 39
					suspend_downstream(500000);
80010e54:	e6 7c a1 20 	mov	r12,500000
80010e58:	f0 16 00 71 	mcall	r6[452]
					receive_waypoint(rec, centralData->waypoint_list, centralData->number_of_waypoints,&centralData->waypoint_receiving);
80010e5c:	ec f8 00 00 	ld.w	r8,r6[0]
80010e60:	70 08       	ld.w	r8,r8[0x0]
80010e62:	f0 c9 ef 4a 	sub	r9,r8,-4278
80010e66:	ec f8 00 00 	ld.w	r8,r6[0]
80010e6a:	70 08       	ld.w	r8,r8[0x0]
80010e6c:	f1 08 10 1c 	ld.sh	r8,r8[4124]
80010e70:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
80010e74:	ec f8 00 00 	ld.w	r8,r6[0]
80010e78:	70 08       	ld.w	r8,r8[0x0]
80010e7a:	f0 cb f1 f4 	sub	r11,r8,-3596
80010e7e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80010e82:	10 9c       	mov	r12,r8
80010e84:	f0 16 01 60 	mcall	r6[1408]
					flush_mavlink();
80010e88:	f0 16 00 2c 	mcall	r6[176]
				}
				break;
80010e8c:	cb 38       	rjmp	80010ff2 <handle_specific_messages+0x2e2>
				case MAVLINK_MSG_ID_MISSION_REQUEST : { // 40
					suspend_downstream(500000);
80010e8e:	e6 7c a1 20 	mov	r12,500000
80010e92:	f0 16 00 71 	mcall	r6[452]
					send_waypoint(rec, centralData->waypoint_list, centralData->number_of_waypoints,&centralData->waypoint_sending);
80010e96:	ec f8 00 00 	ld.w	r8,r6[0]
80010e9a:	70 08       	ld.w	r8,r8[0x0]
80010e9c:	f0 c9 ef 4b 	sub	r9,r8,-4277
80010ea0:	ec f8 00 00 	ld.w	r8,r6[0]
80010ea4:	70 08       	ld.w	r8,r8[0x0]
80010ea6:	f1 08 10 1c 	ld.sh	r8,r8[4124]
80010eaa:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
80010eae:	ec f8 00 00 	ld.w	r8,r6[0]
80010eb2:	70 08       	ld.w	r8,r8[0x0]
80010eb4:	f0 cb f1 f4 	sub	r11,r8,-3596
80010eb8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80010ebc:	10 9c       	mov	r12,r8
80010ebe:	f0 16 01 81 	mcall	r6[1540]
					flush_mavlink();
80010ec2:	f0 16 00 2c 	mcall	r6[176]
				}
				break;
80010ec6:	c9 68       	rjmp	80010ff2 <handle_specific_messages+0x2e2>
				case MAVLINK_MSG_ID_MISSION_SET_CURRENT : { // 41
					set_current_wp(rec, &(centralData->waypoint_list), centralData->number_of_waypoints);
80010ec8:	ec f8 00 00 	ld.w	r8,r6[0]
80010ecc:	70 08       	ld.w	r8,r8[0x0]
80010ece:	f1 08 10 1c 	ld.sh	r8,r8[4124]
80010ed2:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
80010ed6:	ec f8 00 00 	ld.w	r8,r6[0]
80010eda:	70 08       	ld.w	r8,r8[0x0]
80010edc:	f0 c8 f1 f4 	sub	r8,r8,-3596
80010ee0:	10 99       	mov	r9,r8
80010ee2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80010ee6:	12 9b       	mov	r11,r9
80010ee8:	10 9c       	mov	r12,r8
80010eea:	f0 16 01 6c 	mcall	r6[1456]
				}
				break;
80010eee:	c8 28       	rjmp	80010ff2 <handle_specific_messages+0x2e2>
				case MAVLINK_MSG_ID_MISSION_REQUEST_LIST: { // 43
					// this initiates all waypoints being sent to the base-station - therefore, we pause the downstream telemetry to free the channel
					// (at least until we have a radio system with guaranteed bandwidth)
					suspend_downstream(500000);
80010ef0:	e6 7c a1 20 	mov	r12,500000
80010ef4:	f0 16 00 71 	mcall	r6[452]
					send_count(rec, centralData->number_of_waypoints,&centralData->waypoint_receiving,&centralData->waypoint_sending);
80010ef8:	ec f8 00 00 	ld.w	r8,r6[0]
80010efc:	70 08       	ld.w	r8,r8[0x0]
80010efe:	f0 c9 ef 4b 	sub	r9,r8,-4277
80010f02:	ec f8 00 00 	ld.w	r8,r6[0]
80010f06:	70 08       	ld.w	r8,r8[0x0]
80010f08:	f0 ca ef 4a 	sub	r10,r8,-4278
80010f0c:	ec f8 00 00 	ld.w	r8,r6[0]
80010f10:	70 08       	ld.w	r8,r8[0x0]
80010f12:	f1 08 10 1c 	ld.sh	r8,r8[4124]
80010f16:	f7 d8 c0 10 	bfextu	r11,r8,0x0,0x10
80010f1a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80010f1e:	10 9c       	mov	r12,r8
80010f20:	f0 16 01 9f 	mcall	r6[1660]
					flush_mavlink();
80010f24:	f0 16 00 2c 	mcall	r6[176]
				}
				break;
80010f28:	c6 58       	rjmp	80010ff2 <handle_specific_messages+0x2e2>
				case MAVLINK_MSG_ID_MISSION_COUNT : { // 44
					// this initiates all waypoints being sent from base-station - therefore, we pause the downstream telemetry to free the channel
					// (at least until we have a radio system with guaranteed bandwidth)
					suspend_downstream(500000);
80010f2a:	e6 7c a1 20 	mov	r12,500000
80010f2e:	f0 16 00 71 	mcall	r6[452]
					receive_count(rec, &(centralData->number_of_waypoints),&centralData->waypoint_receiving,&centralData->waypoint_sending);
80010f32:	ec f8 00 00 	ld.w	r8,r6[0]
80010f36:	70 08       	ld.w	r8,r8[0x0]
80010f38:	f0 c9 ef 4b 	sub	r9,r8,-4277
80010f3c:	ec f8 00 00 	ld.w	r8,r6[0]
80010f40:	70 08       	ld.w	r8,r8[0x0]
80010f42:	f0 ca ef 4a 	sub	r10,r8,-4278
80010f46:	ec f8 00 00 	ld.w	r8,r6[0]
80010f4a:	70 08       	ld.w	r8,r8[0x0]
80010f4c:	f0 cb ef e4 	sub	r11,r8,-4124
80010f50:	ee f8 ff fc 	ld.w	r8,r7[-4]
80010f54:	10 9c       	mov	r12,r8
80010f56:	f0 16 02 17 	mcall	r6[2140]
				}
				break;
80010f5a:	c4 c8       	rjmp	80010ff2 <handle_specific_messages+0x2e2>
				case MAVLINK_MSG_ID_MISSION_CLEAR_ALL : { // 45
					clear_waypoint_list(rec, &(centralData->number_of_waypoints),&centralData->waypoint_set);
80010f5c:	ec f8 00 00 	ld.w	r8,r6[0]
80010f60:	70 08       	ld.w	r8,r8[0x0]
80010f62:	f0 ca ef 4c 	sub	r10,r8,-4276
80010f66:	ec f8 00 00 	ld.w	r8,r6[0]
80010f6a:	70 08       	ld.w	r8,r8[0x0]
80010f6c:	f0 c9 ef e4 	sub	r9,r8,-4124
80010f70:	ee f8 ff fc 	ld.w	r8,r7[-4]
80010f74:	12 9b       	mov	r11,r9
80010f76:	10 9c       	mov	r12,r8
80010f78:	f0 16 01 76 	mcall	r6[1496]
				}
				break;
80010f7c:	c3 b8       	rjmp	80010ff2 <handle_specific_messages+0x2e2>
				case MAVLINK_MSG_ID_MISSION_ACK : { // 47
					receive_ack_msg(rec,&centralData->waypoint_sending);
80010f7e:	ec f8 00 00 	ld.w	r8,r6[0]
80010f82:	70 08       	ld.w	r8,r8[0x0]
80010f84:	f0 c9 ef 4b 	sub	r9,r8,-4277
80010f88:	ee f8 ff fc 	ld.w	r8,r7[-4]
80010f8c:	12 9b       	mov	r11,r9
80010f8e:	10 9c       	mov	r12,r8
80010f90:	f0 16 01 e8 	mcall	r6[1952]
				}
				break;
80010f94:	c2 f8       	rjmp	80010ff2 <handle_specific_messages+0x2e2>
				case MAVLINK_MSG_ID_SET_MODE : { // 11
					set_mav_mode(rec, &centralData->mav_mode, &(centralData->mav_state),centralData->simulation_mode);
80010f96:	ec f8 00 00 	ld.w	r8,r6[0]
80010f9a:	70 08       	ld.w	r8,r8[0x0]
80010f9c:	f0 f8 10 c0 	ld.w	r8,r8[4288]
80010fa0:	5c 58       	castu.b	r8
80010fa2:	10 99       	mov	r9,r8
80010fa4:	ec f8 00 00 	ld.w	r8,r6[0]
80010fa8:	70 08       	ld.w	r8,r8[0x0]
80010faa:	f0 ca ef 43 	sub	r10,r8,-4285
80010fae:	ec f8 00 00 	ld.w	r8,r6[0]
80010fb2:	70 08       	ld.w	r8,r8[0x0]
80010fb4:	f0 cb ef 44 	sub	r11,r8,-4284
80010fb8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80010fbc:	10 9c       	mov	r12,r8
80010fbe:	f0 16 01 c5 	mcall	r6[1812]
				}
				break;
80010fc2:	d7 03       	nop
80010fc4:	c1 78       	rjmp	80010ff2 <handle_specific_messages+0x2e2>
				case MAVLINK_MSG_ID_COMMAND_LONG : { // 76
					receive_message_long(rec);
80010fc6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80010fca:	10 9c       	mov	r12,r8
80010fcc:	f0 16 01 7c 	mcall	r6[1520]
80010fd0:	c1 18       	rjmp	80010ff2 <handle_specific_messages+0x2e2>
				}
				break;
		}
	} else
	if (rec->msg.msgid == MAVLINK_MSG_ID_GLOBAL_POSITION_INT)
80010fd2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80010fd6:	11 f9       	ld.ub	r9,r8[0x7]
80010fd8:	32 18       	mov	r8,33
80010fda:	f0 09 18 00 	cp.b	r9,r8
80010fde:	c0 a1       	brne	80010ff2 <handle_specific_messages+0x2e2>
		//dbg_print_num(rec.msg.sysid, 10);
		//dbg_print(" for component");
		//dbg_print_num(rec.msg.compid,10);
		//dbg_print( "\n");
		
		read_msg_from_neighbors(&rec);
80010fe0:	ee c8 00 04 	sub	r8,r7,4
80010fe4:	10 9c       	mov	r12,r8
80010fe6:	f0 16 01 36 	mcall	r6[1240]
80010fea:	c0 48       	rjmp	80010ff2 <handle_specific_messages+0x2e2>
				case MAVLINK_MSG_ID_SET_MODE : { // 11
					set_mav_mode(rec, &centralData->mav_mode, &(centralData->mav_state),centralData->simulation_mode);
				}
				break;
				case MAVLINK_MSG_ID_COMMAND_LONG : { // 76
					receive_message_long(rec);
80010fec:	d7 03       	nop
80010fee:	c0 28       	rjmp	80010ff2 <handle_specific_messages+0x2e2>
80010ff0:	d7 03       	nop
		//dbg_print_num(rec.msg.compid,10);
		//dbg_print( "\n");
		
		read_msg_from_neighbors(&rec);
	}
}
80010ff2:	2f fd       	sub	sp,-4
80010ff4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80010ff8:	80 01       	ld.sh	r1,r0[0x0]
80010ffa:	0b a0       	ld.ub	r0,r5[0x2]
80010ffc:	70 61       	ld.w	r1,r8[0x18]
80010ffe:	72 61       	ld.w	r1,r9[0x18]
80011000:	6d 65       	ld.w	r5,r6[0x58]
80011002:	74 65       	ld.w	r5,r10[0x18]
80011004:	72 73       	ld.w	r3,r9[0x1c]
80011006:	3a 00       	mov	r0,-96
80011008:	2c 20       	sub	r0,-62
8001100a:	63 6f       	ld.w	pc,r1[0x58]
8001100c:	6d 6d       	ld.w	sp,r6[0x58]
8001100e:	61 6e       	ld.w	lr,r0[0x58]
80011010:	64 20       	ld.w	r0,r2[0x8]
80011012:	69 64       	ld.w	r4,r4[0x58]
80011014:	3a 00       	mov	r0,-96
80011016:	00 00       	add	r0,r0
80011018:	2c 20       	sub	r0,-62
8001101a:	63 6f       	ld.w	pc,r1[0x58]
8001101c:	6e 66       	ld.w	r6,r7[0x18]
8001101e:	69 72       	ld.w	r2,r4[0x5c]
80011020:	6d 61       	ld.w	r1,r6[0x58]
80011022:	74 69       	ld.w	r9,r10[0x18]
80011024:	6f 6e       	ld.w	lr,r7[0x58]
80011026:	3a 00       	mov	r0,-96
80011028:	0a 00       	add	r0,r5
8001102a:	00 00       	add	r0,r0
8001102c:	52 65       	stdsp	sp[0x98],r5
8001102e:	61 64       	ld.w	r4,r0[0x58]
80011030:	69 6e       	ld.w	lr,r4[0x58]
80011032:	67 20       	ld.w	r0,r3[0x48]
80011034:	66 72       	ld.w	r2,r3[0x1c]
80011036:	6f 6d       	ld.w	sp,r7[0x58]
80011038:	20 66       	sub	r6,6
8001103a:	6c 61       	ld.w	r1,r6[0x18]
8001103c:	73 68       	ld.w	r8,r9[0x58]
8001103e:	63 2e       	ld.w	lr,r1[0x48]
80011040:	2e 2e       	sub	lr,-30
80011042:	0a 00       	add	r0,r5
80011044:	57 72       	stdsp	sp[0x1dc],r2
80011046:	69 74       	ld.w	r4,r4[0x5c]
80011048:	74 69       	ld.w	r9,r10[0x18]
8001104a:	6e 67       	ld.w	r7,r7[0x18]
8001104c:	20 74       	sub	r4,7
8001104e:	6f 20       	ld.w	r0,r7[0x48]
80011050:	66 6c       	ld.w	r12,r3[0x18]
80011052:	61 73       	ld.w	r3,r0[0x5c]
80011054:	68 63       	ld.w	r3,r4[0x18]
80011056:	0a 00       	add	r0,r5

80011058 <receive_message_long>:

void receive_message_long(Mavlink_Received_t* rec)
{
80011058:	eb cd 40 c0 	pushm	r6-r7,lr
8001105c:	1a 97       	mov	r7,sp
8001105e:	20 ad       	sub	sp,40
80011060:	fe f6 04 cc 	ld.w	r6,pc[1228]
80011064:	1e 26       	rsub	r6,pc
80011066:	ef 4c ff d8 	st.w	r7[-40],r12
	mavlink_command_long_t packet;
	mavlink_msg_command_long_decode(&rec->msg,&packet);
8001106a:	ee f8 ff d8 	ld.w	r8,r7[-40]
8001106e:	ee c9 00 24 	sub	r9,r7,36
80011072:	12 9b       	mov	r11,r9
80011074:	10 9c       	mov	r12,r8
80011076:	fe b0 ec 03 	rcall	8000e87c <mavlink_msg_command_long_decode>
	// Check if this message is for this system and subsystem
	// dbg_print("target_comp:");
	// dbg_print_num(packet.target_component,10);
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_system.sysid
	&&(uint8_t)packet.target_component == (uint8_t)0)
8001107a:	ef 39 ff fa 	ld.ub	r9,r7[-6]
8001107e:	ec f8 00 70 	ld.w	r8,r6[112]
80011082:	11 88       	ld.ub	r8,r8[0x0]
	mavlink_command_long_t packet;
	mavlink_msg_command_long_decode(&rec->msg,&packet);
	// Check if this message is for this system and subsystem
	// dbg_print("target_comp:");
	// dbg_print_num(packet.target_component,10);
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_system.sysid
80011084:	f0 09 18 00 	cp.b	r9,r8
80011088:	e0 81 02 4e 	brne	80011524 <receive_message_long+0x4cc>
	&&(uint8_t)packet.target_component == (uint8_t)0)
8001108c:	ef 38 ff fb 	ld.ub	r8,r7[-5]
	mavlink_command_long_t packet;
	mavlink_msg_command_long_decode(&rec->msg,&packet);
	// Check if this message is for this system and subsystem
	// dbg_print("target_comp:");
	// dbg_print_num(packet.target_component,10);
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_system.sysid
80011090:	58 08       	cp.w	r8,0
80011092:	e0 81 02 49 	brne	80011524 <receive_message_long+0x4cc>
	&&(uint8_t)packet.target_component == (uint8_t)0)
	{
		// print packet command and parameters for debug
		dbg_print("parameters:");
80011096:	fe cc 00 9a 	sub	r12,pc,154
8001109a:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(packet.param1,10);
8001109e:	ee f8 ff dc 	ld.w	r8,r7[-36]
800110a2:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
800110a6:	30 ab       	mov	r11,10
800110a8:	10 9c       	mov	r12,r8
800110aa:	f0 16 00 04 	mcall	r6[16]
		dbg_print_num(packet.param2,10);
800110ae:	ee f8 ff e0 	ld.w	r8,r7[-32]
800110b2:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
800110b6:	30 ab       	mov	r11,10
800110b8:	10 9c       	mov	r12,r8
800110ba:	f0 16 00 04 	mcall	r6[16]
		dbg_print_num(packet.param3,10);
800110be:	ee f8 ff e4 	ld.w	r8,r7[-28]
800110c2:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
800110c6:	30 ab       	mov	r11,10
800110c8:	10 9c       	mov	r12,r8
800110ca:	f0 16 00 04 	mcall	r6[16]
		dbg_print_num(packet.param4,10);
800110ce:	ee f8 ff e8 	ld.w	r8,r7[-24]
800110d2:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
800110d6:	30 ab       	mov	r11,10
800110d8:	10 9c       	mov	r12,r8
800110da:	f0 16 00 04 	mcall	r6[16]
		dbg_print_num(packet.param5,10);
800110de:	ee f8 ff ec 	ld.w	r8,r7[-20]
800110e2:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
800110e6:	30 ab       	mov	r11,10
800110e8:	10 9c       	mov	r12,r8
800110ea:	f0 16 00 04 	mcall	r6[16]
		dbg_print_num(packet.param6,10);
800110ee:	ee f8 ff f0 	ld.w	r8,r7[-16]
800110f2:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
800110f6:	30 ab       	mov	r11,10
800110f8:	10 9c       	mov	r12,r8
800110fa:	f0 16 00 04 	mcall	r6[16]
		dbg_print_num(packet.param7,10);
800110fe:	ee f8 ff f4 	ld.w	r8,r7[-12]
80011102:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80011106:	30 ab       	mov	r11,10
80011108:	10 9c       	mov	r12,r8
8001110a:	f0 16 00 04 	mcall	r6[16]
		dbg_print(", command id:");
8001110e:	fe cc 01 06 	sub	r12,pc,262
80011112:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(packet.command,10);
80011116:	ef 08 ff f8 	ld.sh	r8,r7[-8]
8001111a:	5c 78       	castu.h	r8
8001111c:	30 ab       	mov	r11,10
8001111e:	10 9c       	mov	r12,r8
80011120:	f0 16 00 04 	mcall	r6[16]
		dbg_print(", confirmation:");
80011124:	fe cc 01 0c 	sub	r12,pc,268
80011128:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(packet.confirmation,10);
8001112c:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80011130:	30 ab       	mov	r11,10
80011132:	10 9c       	mov	r12,r8
80011134:	f0 16 00 04 	mcall	r6[16]
		dbg_print("\n");
80011138:	fe cc 01 10 	sub	r12,pc,272
8001113c:	f0 16 00 01 	mcall	r6[4]
		
		switch(packet.command) {
80011140:	ef 08 ff f8 	ld.sh	r8,r7[-8]
80011144:	5c 78       	castu.h	r8
80011146:	21 08       	sub	r8,16
80011148:	e0 48 00 e5 	cp.w	r8,229
8001114c:	e0 8b 01 ec 	brhi	80011524 <receive_message_long+0x4cc>
80011150:	fe c9 ff f8 	sub	r9,pc,-8
80011154:	f2 08 00 2f 	add	pc,r9,r8<<0x2
80011158:	e0 8f 01 e6 	bral	80011524 <receive_message_long+0x4cc>
8001115c:	e0 8f 01 e4 	bral	80011524 <receive_message_long+0x4cc>
80011160:	e0 8f 01 e2 	bral	80011524 <receive_message_long+0x4cc>
80011164:	e0 8f 01 e0 	bral	80011524 <receive_message_long+0x4cc>
80011168:	e0 8f 01 de 	bral	80011524 <receive_message_long+0x4cc>
8001116c:	e0 8f 01 dc 	bral	80011524 <receive_message_long+0x4cc>
80011170:	e0 8f 01 da 	bral	80011524 <receive_message_long+0x4cc>
80011174:	e0 8f 01 d8 	bral	80011524 <receive_message_long+0x4cc>
80011178:	e0 8f 01 d6 	bral	80011524 <receive_message_long+0x4cc>
8001117c:	e0 8f 01 d4 	bral	80011524 <receive_message_long+0x4cc>
80011180:	e0 8f 01 d2 	bral	80011524 <receive_message_long+0x4cc>
80011184:	e0 8f 01 d0 	bral	80011524 <receive_message_long+0x4cc>
80011188:	e0 8f 01 ce 	bral	80011524 <receive_message_long+0x4cc>
8001118c:	e0 8f 01 cc 	bral	80011524 <receive_message_long+0x4cc>
80011190:	e0 8f 01 ca 	bral	80011524 <receive_message_long+0x4cc>
80011194:	e0 8f 01 c8 	bral	80011524 <receive_message_long+0x4cc>
80011198:	e0 8f 01 c6 	bral	80011524 <receive_message_long+0x4cc>
8001119c:	e0 8f 01 c4 	bral	80011524 <receive_message_long+0x4cc>
800111a0:	e0 8f 01 c2 	bral	80011524 <receive_message_long+0x4cc>
800111a4:	e0 8f 01 c0 	bral	80011524 <receive_message_long+0x4cc>
800111a8:	e0 8f 01 be 	bral	80011524 <receive_message_long+0x4cc>
800111ac:	e0 8f 01 bc 	bral	80011524 <receive_message_long+0x4cc>
800111b0:	e0 8f 01 ba 	bral	80011524 <receive_message_long+0x4cc>
800111b4:	e0 8f 01 b8 	bral	80011524 <receive_message_long+0x4cc>
800111b8:	e0 8f 01 b6 	bral	80011524 <receive_message_long+0x4cc>
800111bc:	e0 8f 01 b4 	bral	80011524 <receive_message_long+0x4cc>
800111c0:	e0 8f 01 b2 	bral	80011524 <receive_message_long+0x4cc>
800111c4:	e0 8f 01 b0 	bral	80011524 <receive_message_long+0x4cc>
800111c8:	e0 8f 01 ae 	bral	80011524 <receive_message_long+0x4cc>
800111cc:	e0 8f 01 ac 	bral	80011524 <receive_message_long+0x4cc>
800111d0:	e0 8f 01 aa 	bral	80011524 <receive_message_long+0x4cc>
800111d4:	e0 8f 01 a8 	bral	80011524 <receive_message_long+0x4cc>
800111d8:	e0 8f 01 a6 	bral	80011524 <receive_message_long+0x4cc>
800111dc:	e0 8f 01 a4 	bral	80011524 <receive_message_long+0x4cc>
800111e0:	e0 8f 01 a2 	bral	80011524 <receive_message_long+0x4cc>
800111e4:	e0 8f 01 a0 	bral	80011524 <receive_message_long+0x4cc>
800111e8:	e0 8f 01 9e 	bral	80011524 <receive_message_long+0x4cc>
800111ec:	e0 8f 01 9c 	bral	80011524 <receive_message_long+0x4cc>
800111f0:	e0 8f 01 9a 	bral	80011524 <receive_message_long+0x4cc>
800111f4:	e0 8f 01 98 	bral	80011524 <receive_message_long+0x4cc>
800111f8:	e0 8f 01 96 	bral	80011524 <receive_message_long+0x4cc>
800111fc:	e0 8f 01 94 	bral	80011524 <receive_message_long+0x4cc>
80011200:	e0 8f 01 92 	bral	80011524 <receive_message_long+0x4cc>
80011204:	e0 8f 01 90 	bral	80011524 <receive_message_long+0x4cc>
80011208:	e0 8f 01 8e 	bral	80011524 <receive_message_long+0x4cc>
8001120c:	e0 8f 01 8c 	bral	80011524 <receive_message_long+0x4cc>
80011210:	e0 8f 01 8a 	bral	80011524 <receive_message_long+0x4cc>
80011214:	e0 8f 01 88 	bral	80011524 <receive_message_long+0x4cc>
80011218:	e0 8f 01 86 	bral	80011524 <receive_message_long+0x4cc>
8001121c:	e0 8f 01 84 	bral	80011524 <receive_message_long+0x4cc>
80011220:	e0 8f 01 82 	bral	80011524 <receive_message_long+0x4cc>
80011224:	e0 8f 01 80 	bral	80011524 <receive_message_long+0x4cc>
80011228:	e0 8f 01 7e 	bral	80011524 <receive_message_long+0x4cc>
8001122c:	e0 8f 01 7c 	bral	80011524 <receive_message_long+0x4cc>
80011230:	e0 8f 01 7a 	bral	80011524 <receive_message_long+0x4cc>
80011234:	e0 8f 01 78 	bral	80011524 <receive_message_long+0x4cc>
80011238:	e0 8f 01 76 	bral	80011524 <receive_message_long+0x4cc>
8001123c:	e0 8f 01 74 	bral	80011524 <receive_message_long+0x4cc>
80011240:	e0 8f 01 72 	bral	80011524 <receive_message_long+0x4cc>
80011244:	e0 8f 01 70 	bral	80011524 <receive_message_long+0x4cc>
80011248:	e0 8f 01 6e 	bral	80011524 <receive_message_long+0x4cc>
8001124c:	e0 8f 01 6c 	bral	80011524 <receive_message_long+0x4cc>
80011250:	e0 8f 01 6a 	bral	80011524 <receive_message_long+0x4cc>
80011254:	e0 8f 01 68 	bral	80011524 <receive_message_long+0x4cc>
80011258:	e0 8f 01 66 	bral	80011524 <receive_message_long+0x4cc>
8001125c:	e0 8f 01 64 	bral	80011524 <receive_message_long+0x4cc>
80011260:	e0 8f 01 62 	bral	80011524 <receive_message_long+0x4cc>
80011264:	e0 8f 01 60 	bral	80011524 <receive_message_long+0x4cc>
80011268:	e0 8f 01 5e 	bral	80011524 <receive_message_long+0x4cc>
8001126c:	e0 8f 01 5c 	bral	80011524 <receive_message_long+0x4cc>
80011270:	e0 8f 01 5a 	bral	80011524 <receive_message_long+0x4cc>
80011274:	e0 8f 01 58 	bral	80011524 <receive_message_long+0x4cc>
80011278:	e0 8f 01 56 	bral	80011524 <receive_message_long+0x4cc>
8001127c:	e0 8f 01 54 	bral	80011524 <receive_message_long+0x4cc>
80011280:	e0 8f 01 52 	bral	80011524 <receive_message_long+0x4cc>
80011284:	e0 8f 01 50 	bral	80011524 <receive_message_long+0x4cc>
80011288:	e0 8f 01 4e 	bral	80011524 <receive_message_long+0x4cc>
8001128c:	e0 8f 01 4c 	bral	80011524 <receive_message_long+0x4cc>
80011290:	e0 8f 01 4a 	bral	80011524 <receive_message_long+0x4cc>
80011294:	e0 8f 01 48 	bral	80011524 <receive_message_long+0x4cc>
80011298:	e0 8f 01 46 	bral	80011524 <receive_message_long+0x4cc>
8001129c:	e0 8f 01 44 	bral	80011524 <receive_message_long+0x4cc>
800112a0:	e0 8f 01 42 	bral	80011524 <receive_message_long+0x4cc>
800112a4:	e0 8f 01 40 	bral	80011524 <receive_message_long+0x4cc>
800112a8:	e0 8f 01 3e 	bral	80011524 <receive_message_long+0x4cc>
800112ac:	e0 8f 01 3c 	bral	80011524 <receive_message_long+0x4cc>
800112b0:	e0 8f 01 3a 	bral	80011524 <receive_message_long+0x4cc>
800112b4:	e0 8f 01 38 	bral	80011524 <receive_message_long+0x4cc>
800112b8:	e0 8f 01 36 	bral	80011524 <receive_message_long+0x4cc>
800112bc:	e0 8f 01 34 	bral	80011524 <receive_message_long+0x4cc>
800112c0:	e0 8f 01 32 	bral	80011524 <receive_message_long+0x4cc>
800112c4:	e0 8f 01 30 	bral	80011524 <receive_message_long+0x4cc>
800112c8:	e0 8f 01 2e 	bral	80011524 <receive_message_long+0x4cc>
800112cc:	e0 8f 01 2c 	bral	80011524 <receive_message_long+0x4cc>
800112d0:	e0 8f 01 2a 	bral	80011524 <receive_message_long+0x4cc>
800112d4:	e0 8f 01 28 	bral	80011524 <receive_message_long+0x4cc>
800112d8:	e0 8f 01 26 	bral	80011524 <receive_message_long+0x4cc>
800112dc:	e0 8f 01 24 	bral	80011524 <receive_message_long+0x4cc>
800112e0:	e0 8f 01 22 	bral	80011524 <receive_message_long+0x4cc>
800112e4:	e0 8f 01 20 	bral	80011524 <receive_message_long+0x4cc>
800112e8:	e0 8f 01 1e 	bral	80011524 <receive_message_long+0x4cc>
800112ec:	e0 8f 01 1c 	bral	80011524 <receive_message_long+0x4cc>
800112f0:	e0 8f 01 1a 	bral	80011524 <receive_message_long+0x4cc>
800112f4:	e0 8f 01 18 	bral	80011524 <receive_message_long+0x4cc>
800112f8:	e0 8f 01 16 	bral	80011524 <receive_message_long+0x4cc>
800112fc:	e0 8f 01 14 	bral	80011524 <receive_message_long+0x4cc>
80011300:	e0 8f 01 12 	bral	80011524 <receive_message_long+0x4cc>
80011304:	e0 8f 01 10 	bral	80011524 <receive_message_long+0x4cc>
80011308:	e0 8f 01 0e 	bral	80011524 <receive_message_long+0x4cc>
8001130c:	e0 8f 01 0c 	bral	80011524 <receive_message_long+0x4cc>
80011310:	e0 8f 01 0a 	bral	80011524 <receive_message_long+0x4cc>
80011314:	e0 8f 01 08 	bral	80011524 <receive_message_long+0x4cc>
80011318:	e0 8f 01 06 	bral	80011524 <receive_message_long+0x4cc>
8001131c:	e0 8f 01 04 	bral	80011524 <receive_message_long+0x4cc>
80011320:	e0 8f 01 02 	bral	80011524 <receive_message_long+0x4cc>
80011324:	e0 8f 01 00 	bral	80011524 <receive_message_long+0x4cc>
80011328:	e0 8f 00 fe 	bral	80011524 <receive_message_long+0x4cc>
8001132c:	e0 8f 00 fc 	bral	80011524 <receive_message_long+0x4cc>
80011330:	e0 8f 00 fa 	bral	80011524 <receive_message_long+0x4cc>
80011334:	e0 8f 00 f8 	bral	80011524 <receive_message_long+0x4cc>
80011338:	e0 8f 00 f6 	bral	80011524 <receive_message_long+0x4cc>
8001133c:	e0 8f 00 f4 	bral	80011524 <receive_message_long+0x4cc>
80011340:	e0 8f 00 f2 	bral	80011524 <receive_message_long+0x4cc>
80011344:	e0 8f 00 f0 	bral	80011524 <receive_message_long+0x4cc>
80011348:	e0 8f 00 ee 	bral	80011524 <receive_message_long+0x4cc>
8001134c:	e0 8f 00 ec 	bral	80011524 <receive_message_long+0x4cc>
80011350:	e0 8f 00 ea 	bral	80011524 <receive_message_long+0x4cc>
80011354:	e0 8f 00 e8 	bral	80011524 <receive_message_long+0x4cc>
80011358:	e0 8f 00 e6 	bral	80011524 <receive_message_long+0x4cc>
8001135c:	e0 8f 00 e4 	bral	80011524 <receive_message_long+0x4cc>
80011360:	e0 8f 00 e2 	bral	80011524 <receive_message_long+0x4cc>
80011364:	e0 8f 00 e0 	bral	80011524 <receive_message_long+0x4cc>
80011368:	e0 8f 00 de 	bral	80011524 <receive_message_long+0x4cc>
8001136c:	e0 8f 00 dc 	bral	80011524 <receive_message_long+0x4cc>
80011370:	e0 8f 00 da 	bral	80011524 <receive_message_long+0x4cc>
80011374:	e0 8f 00 d8 	bral	80011524 <receive_message_long+0x4cc>
80011378:	e0 8f 00 d6 	bral	80011524 <receive_message_long+0x4cc>
8001137c:	e0 8f 00 d4 	bral	80011524 <receive_message_long+0x4cc>
80011380:	e0 8f 00 d2 	bral	80011524 <receive_message_long+0x4cc>
80011384:	e0 8f 00 d0 	bral	80011524 <receive_message_long+0x4cc>
80011388:	e0 8f 00 ce 	bral	80011524 <receive_message_long+0x4cc>
8001138c:	e0 8f 00 cc 	bral	80011524 <receive_message_long+0x4cc>
80011390:	e0 8f 00 ca 	bral	80011524 <receive_message_long+0x4cc>
80011394:	e0 8f 00 c8 	bral	80011524 <receive_message_long+0x4cc>
80011398:	e0 8f 00 c6 	bral	80011524 <receive_message_long+0x4cc>
8001139c:	e0 8f 00 c4 	bral	80011524 <receive_message_long+0x4cc>
800113a0:	e0 8f 00 c2 	bral	80011524 <receive_message_long+0x4cc>
800113a4:	e0 8f 00 c0 	bral	80011524 <receive_message_long+0x4cc>
800113a8:	e0 8f 00 be 	bral	80011524 <receive_message_long+0x4cc>
800113ac:	e0 8f 00 bc 	bral	80011524 <receive_message_long+0x4cc>
800113b0:	e0 8f 00 ba 	bral	80011524 <receive_message_long+0x4cc>
800113b4:	e0 8f 00 b8 	bral	80011524 <receive_message_long+0x4cc>
800113b8:	e0 8f 00 b6 	bral	80011524 <receive_message_long+0x4cc>
800113bc:	e0 8f 00 b4 	bral	80011524 <receive_message_long+0x4cc>
800113c0:	e0 8f 00 b2 	bral	80011524 <receive_message_long+0x4cc>
800113c4:	e0 8f 00 b0 	bral	80011524 <receive_message_long+0x4cc>
800113c8:	e0 8f 00 ae 	bral	80011524 <receive_message_long+0x4cc>
800113cc:	e0 8f 00 ac 	bral	80011524 <receive_message_long+0x4cc>
800113d0:	e0 8f 00 aa 	bral	80011524 <receive_message_long+0x4cc>
800113d4:	e0 8f 00 a8 	bral	80011524 <receive_message_long+0x4cc>
800113d8:	e0 8f 00 a6 	bral	80011524 <receive_message_long+0x4cc>
800113dc:	e0 8f 00 a4 	bral	80011524 <receive_message_long+0x4cc>
800113e0:	e0 8f 00 a2 	bral	80011524 <receive_message_long+0x4cc>
800113e4:	e0 8f 00 a0 	bral	80011524 <receive_message_long+0x4cc>
800113e8:	e0 8f 00 9e 	bral	80011524 <receive_message_long+0x4cc>
800113ec:	e0 8f 00 9c 	bral	80011524 <receive_message_long+0x4cc>
800113f0:	e0 8f 00 9a 	bral	80011524 <receive_message_long+0x4cc>
800113f4:	e0 8f 00 98 	bral	80011524 <receive_message_long+0x4cc>
800113f8:	e0 8f 00 96 	bral	80011524 <receive_message_long+0x4cc>
800113fc:	e0 8f 00 94 	bral	80011524 <receive_message_long+0x4cc>
80011400:	e0 8f 00 92 	bral	80011524 <receive_message_long+0x4cc>
80011404:	e0 8f 00 90 	bral	80011524 <receive_message_long+0x4cc>
80011408:	e0 8f 00 8e 	bral	80011524 <receive_message_long+0x4cc>
8001140c:	e0 8f 00 8c 	bral	80011524 <receive_message_long+0x4cc>
80011410:	e0 8f 00 8a 	bral	80011524 <receive_message_long+0x4cc>
80011414:	e0 8f 00 88 	bral	80011524 <receive_message_long+0x4cc>
80011418:	e0 8f 00 86 	bral	80011524 <receive_message_long+0x4cc>
8001141c:	e0 8f 00 84 	bral	80011524 <receive_message_long+0x4cc>
80011420:	e0 8f 00 82 	bral	80011524 <receive_message_long+0x4cc>
80011424:	e0 8f 00 80 	bral	80011524 <receive_message_long+0x4cc>
80011428:	e0 8f 00 7e 	bral	80011524 <receive_message_long+0x4cc>
8001142c:	e0 8f 00 7c 	bral	80011524 <receive_message_long+0x4cc>
80011430:	e0 8f 00 7a 	bral	80011524 <receive_message_long+0x4cc>
80011434:	e0 8f 00 78 	bral	80011524 <receive_message_long+0x4cc>
80011438:	e0 8f 00 76 	bral	80011524 <receive_message_long+0x4cc>
8001143c:	e0 8f 00 74 	bral	80011524 <receive_message_long+0x4cc>
80011440:	e0 8f 00 72 	bral	80011524 <receive_message_long+0x4cc>
80011444:	e0 8f 00 70 	bral	80011524 <receive_message_long+0x4cc>
80011448:	e0 8f 00 6e 	bral	80011524 <receive_message_long+0x4cc>
8001144c:	e0 8f 00 6c 	bral	80011524 <receive_message_long+0x4cc>
80011450:	e0 8f 00 6a 	bral	80011524 <receive_message_long+0x4cc>
80011454:	e0 8f 00 68 	bral	80011524 <receive_message_long+0x4cc>
80011458:	e0 8f 00 66 	bral	80011524 <receive_message_long+0x4cc>
8001145c:	e0 8f 00 64 	bral	80011524 <receive_message_long+0x4cc>
80011460:	e0 8f 00 62 	bral	80011524 <receive_message_long+0x4cc>
80011464:	e0 8f 00 60 	bral	80011524 <receive_message_long+0x4cc>
80011468:	e0 8f 00 5e 	bral	80011524 <receive_message_long+0x4cc>
8001146c:	e0 8f 00 5c 	bral	80011524 <receive_message_long+0x4cc>
80011470:	e0 8f 00 5a 	bral	80011524 <receive_message_long+0x4cc>
80011474:	e0 8f 00 58 	bral	80011524 <receive_message_long+0x4cc>
80011478:	e0 8f 00 56 	bral	80011524 <receive_message_long+0x4cc>
8001147c:	e0 8f 00 54 	bral	80011524 <receive_message_long+0x4cc>
80011480:	e0 8f 00 52 	bral	80011524 <receive_message_long+0x4cc>
80011484:	e0 8f 00 50 	bral	80011524 <receive_message_long+0x4cc>
80011488:	e0 8f 00 4e 	bral	80011524 <receive_message_long+0x4cc>
8001148c:	e0 8f 00 4c 	bral	80011524 <receive_message_long+0x4cc>
80011490:	e0 8f 00 4a 	bral	80011524 <receive_message_long+0x4cc>
80011494:	e0 8f 00 48 	bral	80011524 <receive_message_long+0x4cc>
80011498:	e0 8f 00 46 	bral	80011524 <receive_message_long+0x4cc>
8001149c:	e0 8f 00 44 	bral	80011524 <receive_message_long+0x4cc>
800114a0:	e0 8f 00 42 	bral	80011524 <receive_message_long+0x4cc>
800114a4:	e0 8f 00 40 	bral	80011524 <receive_message_long+0x4cc>
800114a8:	e0 8f 00 3e 	bral	80011524 <receive_message_long+0x4cc>
800114ac:	e0 8f 00 3c 	bral	80011524 <receive_message_long+0x4cc>
800114b0:	e0 8f 00 3a 	bral	80011524 <receive_message_long+0x4cc>
800114b4:	e0 8f 00 38 	bral	80011524 <receive_message_long+0x4cc>
800114b8:	e0 8f 00 36 	bral	80011524 <receive_message_long+0x4cc>
800114bc:	e0 8f 00 34 	bral	80011524 <receive_message_long+0x4cc>
800114c0:	e0 8f 00 32 	bral	80011524 <receive_message_long+0x4cc>
800114c4:	e0 8f 00 30 	bral	80011524 <receive_message_long+0x4cc>
800114c8:	e0 8f 00 2e 	bral	80011524 <receive_message_long+0x4cc>
800114cc:	e0 8f 00 2c 	bral	80011524 <receive_message_long+0x4cc>
800114d0:	e0 8f 00 2a 	bral	80011524 <receive_message_long+0x4cc>
800114d4:	e0 8f 00 28 	bral	80011524 <receive_message_long+0x4cc>
800114d8:	e0 8f 00 26 	bral	80011524 <receive_message_long+0x4cc>
800114dc:	e0 8f 00 24 	bral	80011524 <receive_message_long+0x4cc>
800114e0:	e0 8f 00 22 	bral	80011524 <receive_message_long+0x4cc>
800114e4:	e0 8f 00 20 	bral	80011524 <receive_message_long+0x4cc>
800114e8:	e0 8f 00 1e 	bral	80011524 <receive_message_long+0x4cc>
800114ec:	e0 8f 00 02 	bral	800114f0 <receive_message_long+0x498>
			break;
			case MAV_CMD_PREFLIGHT_STORAGE: {
				/* Request storage of different parameter values and logs. This command will be only accepted if in pre-flight mode. |Parameter storage: 0: READ FROM FLASH/EEPROM, 1: WRITE CURRENT TO FLASH/EEPROM| Mission storage: 0: READ FROM FLASH/EEPROM, 1: WRITE CURRENT TO FLASH/EEPROM| Reserved| Reserved| Empty| Empty| Empty|  */
				
				// Onboard parameters storage
				if (packet.param1 == 0) {
800114f0:	ee f9 ff dc 	ld.w	r9,r7[-36]
800114f4:	30 08       	mov	r8,0
800114f6:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
800114fa:	c0 81       	brne	8001150a <receive_message_long+0x4b2>
					// read parameters from flash
					dbg_print("Reading from flashc...\n");
800114fc:	fe cc 04 d0 	sub	r12,pc,1232
80011500:	f0 16 00 01 	mcall	r6[4]
					read_parameters_from_flashc();
80011504:	f0 16 01 10 	mcall	r6[1088]
80011508:	c0 e8       	rjmp	80011524 <receive_message_long+0x4cc>
				}
				else if (packet.param1 == 1) {
8001150a:	ee f9 ff dc 	ld.w	r9,r7[-36]
8001150e:	fc 18 3f 80 	movh	r8,0x3f80
80011512:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
80011516:	c0 71       	brne	80011524 <receive_message_long+0x4cc>
					// write parameters to flash
					dbg_print("Writting to flashc\n");
80011518:	fe cc 04 d4 	sub	r12,pc,1236
8001151c:	f0 16 00 01 	mcall	r6[4]
					write_parameters_to_flashc();
80011520:	f0 16 01 bf 	mcall	r6[1788]
				/*  | */
			}
			break;
		}
	}
}
80011524:	2f 6d       	sub	sp,-40
80011526:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001152a:	00 00       	add	r0,r0
8001152c:	80 01       	ld.sh	r1,r0[0x0]
8001152e:	0e e8       	st.h	--r7,r8

80011530 <init_mavlink_actions>:


void init_mavlink_actions(void) {
80011530:	eb cd 40 e0 	pushm	r5-r7,lr
80011534:	1a 97       	mov	r7,sp
80011536:	4f 46       	lddpc	r6,80011704 <init_mavlink_actions+0x1d4>
80011538:	1e 26       	rsub	r6,pc
	//board=get_board_hardware();
	centralData=get_central_data();
8001153a:	f0 16 00 32 	mcall	r6[200]
8001153e:	18 99       	mov	r9,r12
80011540:	ec f8 00 00 	ld.w	r8,r6[0]
80011544:	91 09       	st.w	r8[0x0],r9
	add_PID_parameters();
80011546:	f0 16 01 91 	mcall	r6[1604]
	
	//write_parameters_to_flashc();
	
	read_parameters_from_flashc();
8001154a:	f0 16 01 10 	mcall	r6[1088]
	
	add_task(get_mavlink_taskset(),   10000, RUN_REGULAR, &control_waypoint_timeout, 0);
8001154e:	ec f5 08 2c 	ld.w	r5,r6[2092]
80011552:	f0 16 00 23 	mcall	r6[140]
80011556:	30 08       	mov	r8,0
80011558:	0a 99       	mov	r9,r5
8001155a:	30 2a       	mov	r10,2
8001155c:	e0 6b 27 10 	mov	r11,10000
80011560:	f0 16 00 22 	mcall	r6[136]
	add_task(get_mavlink_taskset(),  500000, RUN_REGULAR, &mavlink_send_heartbeat, MAVLINK_MSG_ID_HEARTBEAT);
80011564:	ec f5 06 a0 	ld.w	r5,r6[1696]
80011568:	f0 16 00 23 	mcall	r6[140]
8001156c:	30 08       	mov	r8,0
8001156e:	0a 99       	mov	r9,r5
80011570:	30 2a       	mov	r10,2
80011572:	e6 7b a1 20 	mov	r11,500000
80011576:	f0 16 00 22 	mcall	r6[136]
	add_task(get_mavlink_taskset(), 1000000, RUN_NEVER, &mavlink_send_attitude_quaternion, MAVLINK_MSG_ID_ATTITUDE_QUATERNION);
8001157a:	ec f5 07 34 	ld.w	r5,r6[1844]
8001157e:	f0 16 00 23 	mcall	r6[140]
80011582:	31 f8       	mov	r8,31
80011584:	0a 99       	mov	r9,r5
80011586:	30 0a       	mov	r10,0
80011588:	ee 7b 42 40 	mov	r11,1000000
8001158c:	f0 16 00 22 	mcall	r6[136]
	add_task(get_mavlink_taskset(),  200000, RUN_REGULAR, &mavlink_send_attitude, MAVLINK_MSG_ID_ATTITUDE);
80011590:	ec f5 07 98 	ld.w	r5,r6[1944]
80011594:	f0 16 00 23 	mcall	r6[140]
80011598:	31 e8       	mov	r8,30
8001159a:	0a 99       	mov	r9,r5
8001159c:	30 2a       	mov	r10,2
8001159e:	e2 7b 0d 40 	mov	r11,200000
800115a2:	f0 16 00 22 	mcall	r6[136]
	
	add_task(get_mavlink_taskset(),  500000, RUN_REGULAR, &mavlink_send_hud, MAVLINK_MSG_ID_VFR_HUD);
800115a6:	ec f5 06 14 	ld.w	r5,r6[1556]
800115aa:	f0 16 00 23 	mcall	r6[140]
800115ae:	34 a8       	mov	r8,74
800115b0:	0a 99       	mov	r9,r5
800115b2:	30 2a       	mov	r10,2
800115b4:	e6 7b a1 20 	mov	r11,500000
800115b8:	f0 16 00 22 	mcall	r6[136]
	add_task(get_mavlink_taskset(),  500000, RUN_REGULAR, &mavlink_send_pressure, MAVLINK_MSG_ID_SCALED_PRESSURE);
800115bc:	ec f5 04 d0 	ld.w	r5,r6[1232]
800115c0:	f0 16 00 23 	mcall	r6[140]
800115c4:	31 d8       	mov	r8,29
800115c6:	0a 99       	mov	r9,r5
800115c8:	30 2a       	mov	r10,2
800115ca:	e6 7b a1 20 	mov	r11,500000
800115ce:	f0 16 00 22 	mcall	r6[136]
	add_task(get_mavlink_taskset(),  200000, RUN_REGULAR, &mavlink_send_scaled_imu, MAVLINK_MSG_ID_SCALED_IMU);
800115d2:	ec f5 04 cc 	ld.w	r5,r6[1228]
800115d6:	f0 16 00 23 	mcall	r6[140]
800115da:	31 a8       	mov	r8,26
800115dc:	0a 99       	mov	r9,r5
800115de:	30 2a       	mov	r10,2
800115e0:	e2 7b 0d 40 	mov	r11,200000
800115e4:	f0 16 00 22 	mcall	r6[136]
	add_task(get_mavlink_taskset(),  500000, RUN_REGULAR, &mavlink_send_raw_imu, MAVLINK_MSG_ID_RAW_IMU);
800115e8:	ec f5 04 d4 	ld.w	r5,r6[1236]
800115ec:	f0 16 00 23 	mcall	r6[140]
800115f0:	31 b8       	mov	r8,27
800115f2:	0a 99       	mov	r9,r5
800115f4:	30 2a       	mov	r10,2
800115f6:	e6 7b a1 20 	mov	r11,500000
800115fa:	f0 16 00 22 	mcall	r6[136]

	add_task(get_mavlink_taskset(),  200000, RUN_NEVER, &mavlink_send_rpy_rates_error, MAVLINK_MSG_ID_ROLL_PITCH_YAW_RATES_THRUST_SETPOINT);
800115fe:	ec f5 05 64 	ld.w	r5,r6[1380]
80011602:	f0 16 00 23 	mcall	r6[140]
80011606:	35 08       	mov	r8,80
80011608:	0a 99       	mov	r9,r5
8001160a:	30 0a       	mov	r10,0
8001160c:	e2 7b 0d 40 	mov	r11,200000
80011610:	f0 16 00 22 	mcall	r6[136]
	add_task(get_mavlink_taskset(),  200000, RUN_NEVER, &mavlink_send_rpy_speed_thrust_setpoint, MAVLINK_MSG_ID_ROLL_PITCH_YAW_SPEED_THRUST_SETPOINT);
80011614:	ec f5 05 54 	ld.w	r5,r6[1364]
80011618:	f0 16 00 23 	mcall	r6[140]
8001161c:	33 b8       	mov	r8,59
8001161e:	0a 99       	mov	r9,r5
80011620:	30 0a       	mov	r10,0
80011622:	e2 7b 0d 40 	mov	r11,200000
80011626:	f0 16 00 22 	mcall	r6[136]
	add_task(get_mavlink_taskset(),  200000, RUN_NEVER, &mavlink_send_rpy_thrust_setpoint, MAVLINK_MSG_ID_ROLL_PITCH_YAW_THRUST_SETPOINT);
8001162a:	ec f5 04 f8 	ld.w	r5,r6[1272]
8001162e:	f0 16 00 23 	mcall	r6[140]
80011632:	33 a8       	mov	r8,58
80011634:	0a 99       	mov	r9,r5
80011636:	30 0a       	mov	r10,0
80011638:	e2 7b 0d 40 	mov	r11,200000
8001163c:	f0 16 00 22 	mcall	r6[136]


	add_task(get_mavlink_taskset(),  250000, RUN_REGULAR, &mavlink_send_servo_output, MAVLINK_MSG_ID_SERVO_OUTPUT_RAW);
80011640:	ec f5 07 28 	ld.w	r5,r6[1832]
80011644:	f0 16 00 23 	mcall	r6[140]
80011648:	32 48       	mov	r8,36
8001164a:	0a 99       	mov	r9,r5
8001164c:	30 2a       	mov	r10,2
8001164e:	e2 7b d0 90 	mov	r11,250000
80011652:	f0 16 00 22 	mcall	r6[136]
//	add_task(get_mavlink_taskset(),  50000, &mavlink_send_radar);
	add_task(get_mavlink_taskset(),  200000, RUN_REGULAR, &mavlink_send_estimator, MAVLINK_MSG_ID_LOCAL_POSITION_NED);
80011656:	ec f5 06 bc 	ld.w	r5,r6[1724]
8001165a:	f0 16 00 23 	mcall	r6[140]
8001165e:	32 08       	mov	r8,32
80011660:	0a 99       	mov	r9,r5
80011662:	30 2a       	mov	r10,2
80011664:	e2 7b 0d 40 	mov	r11,200000
80011668:	f0 16 00 22 	mcall	r6[136]
	add_task(get_mavlink_taskset(),  200000, RUN_REGULAR, &mavlink_send_global_position, MAVLINK_MSG_ID_GLOBAL_POSITION_INT);
8001166c:	ec f5 07 1c 	ld.w	r5,r6[1820]
80011670:	f0 16 00 23 	mcall	r6[140]
80011674:	32 18       	mov	r8,33
80011676:	0a 99       	mov	r9,r5
80011678:	30 2a       	mov	r10,2
8001167a:	e2 7b 0d 40 	mov	r11,200000
8001167e:	f0 16 00 22 	mcall	r6[136]
	add_task(get_mavlink_taskset(),  250000, RUN_REGULAR, &mavlink_send_gps_raw, MAVLINK_MSG_ID_GPS_RAW_INT);
80011682:	ec f5 07 4c 	ld.w	r5,r6[1868]
80011686:	f0 16 00 23 	mcall	r6[140]
8001168a:	31 88       	mov	r8,24
8001168c:	0a 99       	mov	r9,r5
8001168e:	30 2a       	mov	r10,2
80011690:	e2 7b d0 90 	mov	r11,250000
80011694:	f0 16 00 22 	mcall	r6[136]
	add_task(get_mavlink_taskset(),  200000, RUN_REGULAR, &mavlink_send_raw_rc_channels, MAVLINK_MSG_ID_RC_CHANNELS_RAW);
80011698:	ec f5 05 f8 	ld.w	r5,r6[1528]
8001169c:	f0 16 00 23 	mcall	r6[140]
800116a0:	32 38       	mov	r8,35
800116a2:	0a 99       	mov	r9,r5
800116a4:	30 2a       	mov	r10,2
800116a6:	e2 7b 0d 40 	mov	r11,200000
800116aa:	f0 16 00 22 	mcall	r6[136]
	add_task(get_mavlink_taskset(),  250000, RUN_REGULAR, &mavlink_send_scaled_rc_channels, MAVLINK_MSG_ID_RC_CHANNELS_SCALED);
800116ae:	ec f5 07 20 	ld.w	r5,r6[1824]
800116b2:	f0 16 00 23 	mcall	r6[140]
800116b6:	32 28       	mov	r8,34
800116b8:	0a 99       	mov	r9,r5
800116ba:	30 2a       	mov	r10,2
800116bc:	e2 7b d0 90 	mov	r11,250000
800116c0:	f0 16 00 22 	mcall	r6[136]
	add_task(get_mavlink_taskset(),  500000, RUN_REGULAR, &mavlink_send_simulation, MAVLINK_MSG_ID_HIL_STATE);
800116c4:	ec f5 07 ac 	ld.w	r5,r6[1964]
800116c8:	f0 16 00 23 	mcall	r6[140]
800116cc:	35 a8       	mov	r8,90
800116ce:	0a 99       	mov	r9,r5
800116d0:	30 2a       	mov	r10,2
800116d2:	e6 7b a1 20 	mov	r11,500000
800116d6:	f0 16 00 22 	mcall	r6[136]
	//add_task(get_mavlink_taskset(),  250000, RUN_REGULAR, &mavlink_send_kalman_estimator, MAVLINK_MSG_ID_NAMED_VALUE_FLOAT);
	add_task(get_mavlink_taskset(),  250000, RUN_NEVER, &send_rt_stats, MAVLINK_MSG_ID_NAMED_VALUE_FLOAT);
800116da:	ec f5 06 5c 	ld.w	r5,r6[1628]
800116de:	f0 16 00 23 	mcall	r6[140]
800116e2:	e0 68 00 fb 	mov	r8,251
800116e6:	0a 99       	mov	r9,r5
800116e8:	30 0a       	mov	r10,0
800116ea:	e2 7b d0 90 	mov	r11,250000
800116ee:	f0 16 00 22 	mcall	r6[136]
	
	sort_taskset_by_period(get_mavlink_taskset());
800116f2:	f0 16 00 23 	mcall	r6[140]
800116f6:	18 98       	mov	r8,r12
800116f8:	10 9c       	mov	r12,r8
800116fa:	f0 16 01 9b 	mcall	r6[1644]
}
800116fe:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80011702:	00 00       	add	r0,r0
80011704:	80 01       	ld.sh	r1,r0[0x0]
80011706:	13 bc       	ld.ub	r12,r9[0x3]

80011708 <mav_array_memcpy>:

/*
  like memcpy(), but if src is NULL, do a memset to zero
*/
static void mav_array_memcpy(void *dest, const void *src, size_t n)
{
80011708:	eb cd 40 c0 	pushm	r6-r7,lr
8001170c:	1a 97       	mov	r7,sp
8001170e:	20 3d       	sub	sp,12
80011710:	49 06       	lddpc	r6,80011750 <mav_array_memcpy+0x48>
80011712:	1e 26       	rsub	r6,pc
80011714:	ef 4c ff fc 	st.w	r7[-4],r12
80011718:	ef 4b ff f8 	st.w	r7[-8],r11
8001171c:	ef 4a ff f4 	st.w	r7[-12],r10
	if (src == NULL) {
80011720:	ee f8 ff f8 	ld.w	r8,r7[-8]
80011724:	58 08       	cp.w	r8,0
80011726:	c0 91       	brne	80011738 <mav_array_memcpy+0x30>
		memset(dest, 0, n);
80011728:	ee fa ff f4 	ld.w	r10,r7[-12]
8001172c:	30 0b       	mov	r11,0
8001172e:	ee fc ff fc 	ld.w	r12,r7[-4]
80011732:	f0 16 00 30 	mcall	r6[192]
80011736:	c0 98       	rjmp	80011748 <mav_array_memcpy+0x40>
	} else {
		memcpy(dest, src, n);
80011738:	ee fa ff f4 	ld.w	r10,r7[-12]
8001173c:	ee fb ff f8 	ld.w	r11,r7[-8]
80011740:	ee fc ff fc 	ld.w	r12,r7[-4]
80011744:	f0 16 00 20 	mcall	r6[128]
	}
}
80011748:	2f dd       	sub	sp,-12
8001174a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001174e:	00 00       	add	r0,r0
80011750:	80 01       	ld.sh	r1,r0[0x0]
80011752:	15 96       	ld.ub	r6,r10[0x1]

80011754 <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
80011754:	eb cd 40 c0 	pushm	r6-r7,lr
80011758:	1a 97       	mov	r7,sp
8001175a:	20 6d       	sub	sp,24
8001175c:	49 e6       	lddpc	r6,800117d4 <interpolate+0x80>
8001175e:	1e 26       	rsub	r6,pc
80011760:	ef 4c ff f8 	st.w	r7[-8],r12
80011764:	ef 4b ff f4 	st.w	r7[-12],r11
80011768:	ef 4a ff f0 	st.w	r7[-16],r10
8001176c:	ef 49 ff ec 	st.w	r7[-20],r9
80011770:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
80011774:	ee f9 ff f4 	ld.w	r9,r7[-12]
80011778:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001177c:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
80011780:	c0 41       	brne	80011788 <interpolate+0x34>
	{
		return y1;
80011782:	ee f8 ff ec 	ld.w	r8,r7[-20]
80011786:	c2 38       	rjmp	800117cc <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
80011788:	ee f9 ff e8 	ld.w	r9,r7[-24]
8001178c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80011790:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80011794:	ee fa ff f8 	ld.w	r10,r7[-8]
80011798:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001179c:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
800117a0:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
800117a4:	ee fa ff f0 	ld.w	r10,r7[-16]
800117a8:	ee f9 ff f4 	ld.w	r9,r7[-12]
800117ac:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
800117b0:	12 9b       	mov	r11,r9
800117b2:	10 9c       	mov	r12,r8
800117b4:	f0 16 00 08 	mcall	r6[32]
800117b8:	18 98       	mov	r8,r12
800117ba:	10 99       	mov	r9,r8
800117bc:	ee f8 ff ec 	ld.w	r8,r7[-20]
800117c0:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
800117c4:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
800117c8:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
800117cc:	10 9c       	mov	r12,r8
800117ce:	2f ad       	sub	sp,-24
800117d0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800117d4:	80 01       	ld.sh	r1,r0[0x0]
800117d6:	15 e2       	ld.ub	r2,r10[0x6]

800117d8 <get_roll_from_remote>:
	#include "joystick_rc.h"
#endif



static float inline get_roll_from_remote()	{return rc_get_channel_neutral(RC_ROLL)*RC_ROLL_DIR * RC_SCALEFACTOR; };
800117d8:	eb cd 40 c0 	pushm	r6-r7,lr
800117dc:	1a 97       	mov	r7,sp
800117de:	48 e6       	lddpc	r6,80011814 <get_roll_from_remote+0x3c>
800117e0:	1e 26       	rsub	r6,pc
800117e2:	30 1c       	mov	r12,1
800117e4:	f0 16 00 b5 	mcall	r6[724]
800117e8:	18 98       	mov	r8,r12
800117ea:	10 9c       	mov	r12,r8
800117ec:	f0 16 00 1a 	mcall	r6[104]
800117f0:	30 08       	mov	r8,0
800117f2:	e0 69 60 00 	mov	r9,24576
800117f6:	ea 19 40 7b 	orh	r9,0x407b
800117fa:	f0 16 00 0c 	mcall	r6[48]
800117fe:	14 98       	mov	r8,r10
80011800:	16 99       	mov	r9,r11
80011802:	10 9a       	mov	r10,r8
80011804:	12 9b       	mov	r11,r9
80011806:	f0 16 00 09 	mcall	r6[36]
8001180a:	18 98       	mov	r8,r12
8001180c:	10 9c       	mov	r12,r8
8001180e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80011812:	00 00       	add	r0,r0
80011814:	80 01       	ld.sh	r1,r0[0x0]
80011816:	16 64       	and	r4,r11

80011818 <get_pitch_from_remote>:
static float inline get_pitch_from_remote()	{return rc_get_channel_neutral(RC_PITCH)*RC_PITCH_DIR * RC_SCALEFACTOR; };
80011818:	eb cd 40 c0 	pushm	r6-r7,lr
8001181c:	1a 97       	mov	r7,sp
8001181e:	48 e6       	lddpc	r6,80011854 <get_pitch_from_remote+0x3c>
80011820:	1e 26       	rsub	r6,pc
80011822:	30 2c       	mov	r12,2
80011824:	f0 16 00 b5 	mcall	r6[724]
80011828:	18 98       	mov	r8,r12
8001182a:	5c 38       	neg	r8
8001182c:	10 9c       	mov	r12,r8
8001182e:	f0 16 00 1a 	mcall	r6[104]
80011832:	30 08       	mov	r8,0
80011834:	e0 69 60 00 	mov	r9,24576
80011838:	ea 19 40 7b 	orh	r9,0x407b
8001183c:	f0 16 00 0c 	mcall	r6[48]
80011840:	14 98       	mov	r8,r10
80011842:	16 99       	mov	r9,r11
80011844:	10 9a       	mov	r10,r8
80011846:	12 9b       	mov	r11,r9
80011848:	f0 16 00 09 	mcall	r6[36]
8001184c:	18 98       	mov	r8,r12
8001184e:	10 9c       	mov	r12,r8
80011850:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80011854:	80 01       	ld.sh	r1,r0[0x0]
80011856:	16 a4       	st.w	r11++,r4

80011858 <get_yaw_from_remote>:
static float inline get_yaw_from_remote()	{return rc_get_channel_neutral(RC_YAW)*RC_YAW_DIR * RC_SCALEFACTOR; };
80011858:	eb cd 40 c0 	pushm	r6-r7,lr
8001185c:	1a 97       	mov	r7,sp
8001185e:	48 e6       	lddpc	r6,80011894 <get_yaw_from_remote+0x3c>
80011860:	1e 26       	rsub	r6,pc
80011862:	30 3c       	mov	r12,3
80011864:	f0 16 00 b5 	mcall	r6[724]
80011868:	18 98       	mov	r8,r12
8001186a:	10 9c       	mov	r12,r8
8001186c:	f0 16 00 1a 	mcall	r6[104]
80011870:	30 08       	mov	r8,0
80011872:	e0 69 60 00 	mov	r9,24576
80011876:	ea 19 40 7b 	orh	r9,0x407b
8001187a:	f0 16 00 0c 	mcall	r6[48]
8001187e:	14 98       	mov	r8,r10
80011880:	16 99       	mov	r9,r11
80011882:	10 9a       	mov	r10,r8
80011884:	12 9b       	mov	r11,r9
80011886:	f0 16 00 09 	mcall	r6[36]
8001188a:	18 98       	mov	r8,r12
8001188c:	10 9c       	mov	r12,r8
8001188e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80011892:	00 00       	add	r0,r0
80011894:	80 01       	ld.sh	r1,r0[0x0]
80011896:	16 e4       	st.h	--r11,r4

80011898 <get_thrust_from_remote>:
static float inline get_thrust_from_remote()	{return rc_get_channel(RC_THROTTLE)*RC_THROTTLE_DIR*RC_SCALEFACTOR; };
80011898:	eb cd 40 c0 	pushm	r6-r7,lr
8001189c:	1a 97       	mov	r7,sp
8001189e:	48 e6       	lddpc	r6,800118d4 <get_thrust_from_remote+0x3c>
800118a0:	1e 26       	rsub	r6,pc
800118a2:	30 0c       	mov	r12,0
800118a4:	f0 16 00 1b 	mcall	r6[108]
800118a8:	18 98       	mov	r8,r12
800118aa:	10 9c       	mov	r12,r8
800118ac:	f0 16 00 1a 	mcall	r6[104]
800118b0:	30 08       	mov	r8,0
800118b2:	e0 69 60 00 	mov	r9,24576
800118b6:	ea 19 40 7b 	orh	r9,0x407b
800118ba:	f0 16 00 0c 	mcall	r6[48]
800118be:	14 98       	mov	r8,r10
800118c0:	16 99       	mov	r9,r11
800118c2:	10 9a       	mov	r10,r8
800118c4:	12 9b       	mov	r11,r9
800118c6:	f0 16 00 09 	mcall	r6[36]
800118ca:	18 98       	mov	r8,r12
800118cc:	10 9c       	mov	r12,r8
800118ce:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800118d2:	00 00       	add	r0,r0
800118d4:	80 01       	ld.sh	r1,r0[0x0]
800118d6:	17 24       	ld.uh	r4,r11++

800118d8 <get_command_from_remote>:


static inline Control_Command_t get_command_from_remote()
{
800118d8:	eb cd 40 e0 	pushm	r5-r7,lr
800118dc:	1a 97       	mov	r7,sp
800118de:	20 bd       	sub	sp,44
800118e0:	4b a6       	lddpc	r6,800119c8 <get_command_from_remote+0xf0>
800118e2:	1e 26       	rsub	r6,pc
800118e4:	18 95       	mov	r5,r12
	Control_Command_t controls;
	controls.rpy[ROLL]= get_roll_from_remote()*RC_INPUT_SCALE;
800118e6:	c7 9f       	rcall	800117d8 <get_roll_from_remote>
800118e8:	18 98       	mov	r8,r12
800118ea:	10 9c       	mov	r12,r8
800118ec:	f0 16 00 02 	mcall	r6[8]
800118f0:	e0 68 99 9a 	mov	r8,39322
800118f4:	ea 18 99 99 	orh	r8,0x9999
800118f8:	e0 69 99 99 	mov	r9,39321
800118fc:	ea 19 3f e9 	orh	r9,0x3fe9
80011900:	f0 16 00 03 	mcall	r6[12]
80011904:	14 98       	mov	r8,r10
80011906:	16 99       	mov	r9,r11
80011908:	10 9a       	mov	r10,r8
8001190a:	12 9b       	mov	r11,r9
8001190c:	f0 16 00 09 	mcall	r6[36]
80011910:	18 98       	mov	r8,r12
80011912:	ef 48 ff d4 	st.w	r7[-44],r8
	controls.rpy[PITCH]= get_pitch_from_remote()*RC_INPUT_SCALE;
80011916:	c8 1f       	rcall	80011818 <get_pitch_from_remote>
80011918:	18 98       	mov	r8,r12
8001191a:	10 9c       	mov	r12,r8
8001191c:	f0 16 00 02 	mcall	r6[8]
80011920:	e0 68 99 9a 	mov	r8,39322
80011924:	ea 18 99 99 	orh	r8,0x9999
80011928:	e0 69 99 99 	mov	r9,39321
8001192c:	ea 19 3f e9 	orh	r9,0x3fe9
80011930:	f0 16 00 03 	mcall	r6[12]
80011934:	14 98       	mov	r8,r10
80011936:	16 99       	mov	r9,r11
80011938:	10 9a       	mov	r10,r8
8001193a:	12 9b       	mov	r11,r9
8001193c:	f0 16 00 09 	mcall	r6[36]
80011940:	18 98       	mov	r8,r12
80011942:	ef 48 ff d8 	st.w	r7[-40],r8
	controls.rpy[YAW]= get_yaw_from_remote()*RC_INPUT_SCALE;
80011946:	c8 9f       	rcall	80011858 <get_yaw_from_remote>
80011948:	18 98       	mov	r8,r12
8001194a:	10 9c       	mov	r12,r8
8001194c:	f0 16 00 02 	mcall	r6[8]
80011950:	e0 68 99 9a 	mov	r8,39322
80011954:	ea 18 99 99 	orh	r8,0x9999
80011958:	e0 69 99 99 	mov	r9,39321
8001195c:	ea 19 3f e9 	orh	r9,0x3fe9
80011960:	f0 16 00 03 	mcall	r6[12]
80011964:	14 98       	mov	r8,r10
80011966:	16 99       	mov	r9,r11
80011968:	10 9a       	mov	r10,r8
8001196a:	12 9b       	mov	r11,r9
8001196c:	f0 16 00 09 	mcall	r6[36]
80011970:	18 98       	mov	r8,r12
80011972:	ef 48 ff dc 	st.w	r7[-36],r8
	controls.thrust = get_thrust_from_remote();
80011976:	c9 1f       	rcall	80011898 <get_thrust_from_remote>
80011978:	18 98       	mov	r8,r12
8001197a:	ef 48 ff e0 	st.w	r7[-32],r8
	
	return controls;
8001197e:	0a 98       	mov	r8,r5
80011980:	ee c9 00 2c 	sub	r9,r7,44
80011984:	f0 ca 00 00 	sub	r10,r8,0
80011988:	f2 cb 00 00 	sub	r11,r9,0
8001198c:	76 0c       	ld.w	r12,r11[0x0]
8001198e:	95 0c       	st.w	r10[0x0],r12
80011990:	76 1c       	ld.w	r12,r11[0x4]
80011992:	95 1c       	st.w	r10[0x4],r12
80011994:	76 2c       	ld.w	r12,r11[0x8]
80011996:	95 2c       	st.w	r10[0x8],r12
80011998:	76 3b       	ld.w	r11,r11[0xc]
8001199a:	95 3b       	st.w	r10[0xc],r11
8001199c:	f0 ca ff f0 	sub	r10,r8,-16
800119a0:	f2 cb ff f0 	sub	r11,r9,-16
800119a4:	76 0c       	ld.w	r12,r11[0x0]
800119a6:	95 0c       	st.w	r10[0x0],r12
800119a8:	76 1c       	ld.w	r12,r11[0x4]
800119aa:	95 1c       	st.w	r10[0x4],r12
800119ac:	76 2c       	ld.w	r12,r11[0x8]
800119ae:	95 2c       	st.w	r10[0x8],r12
800119b0:	76 3b       	ld.w	r11,r11[0xc]
800119b2:	95 3b       	st.w	r10[0xc],r11
800119b4:	f2 ea 00 20 	ld.d	r10,r9[32]
800119b8:	f0 eb 00 20 	st.d	r8[32],r10
800119bc:	72 a9       	ld.w	r9,r9[0x28]
800119be:	91 a9       	st.w	r8[0x28],r9
}
800119c0:	0a 9c       	mov	r12,r5
800119c2:	2f 5d       	sub	sp,-44
800119c4:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800119c8:	80 01       	ld.sh	r1,r0[0x0]
800119ca:	17 66       	ld.uh	r6,--r11

800119cc <get_channel_mode>:
	}
#endif

#ifdef TURNIGY_REMOTE
	static inline void get_channel_mode(uint8_t* chanSwitch)
	{
800119cc:	eb cd 40 c0 	pushm	r6-r7,lr
800119d0:	1a 97       	mov	r7,sp
800119d2:	20 1d       	sub	sp,4
800119d4:	4a d6       	lddpc	r6,80011a88 <get_channel_mode+0xbc>
800119d6:	1e 26       	rsub	r6,pc
800119d8:	ef 4c ff fc 	st.w	r7[-4],r12
		if (rc_get_channel(RC_SAFETY)<0)
800119dc:	30 4c       	mov	r12,4
800119de:	f0 16 00 1b 	mcall	r6[108]
800119e2:	18 98       	mov	r8,r12
800119e4:	10 99       	mov	r9,r8
800119e6:	30 08       	mov	r8,0
800119e8:	f0 09 19 00 	cp.h	r9,r8
800119ec:	c0 84       	brge	800119fc <get_channel_mode+0x30>
		{
			*chanSwitch |= 0x00;
800119ee:	ee f8 ff fc 	ld.w	r8,r7[-4]
800119f2:	11 88       	ld.ub	r8,r8[0x0]
800119f4:	ee f9 ff fc 	ld.w	r9,r7[-4]
800119f8:	b2 88       	st.b	r9[0x0],r8
800119fa:	c4 38       	rjmp	80011a80 <get_channel_mode+0xb4>
			}else if(rc_get_channel(RC_SAFETY)>0 && rc_get_channel(RC_ID_MODE)<0){
800119fc:	30 4c       	mov	r12,4
800119fe:	f0 16 00 1b 	mcall	r6[108]
80011a02:	18 98       	mov	r8,r12
80011a04:	10 99       	mov	r9,r8
80011a06:	30 08       	mov	r8,0
80011a08:	f0 09 19 00 	cp.h	r9,r8
80011a0c:	e0 8a 00 14 	brle	80011a34 <get_channel_mode+0x68>
80011a10:	30 5c       	mov	r12,5
80011a12:	f0 16 00 1b 	mcall	r6[108]
80011a16:	18 98       	mov	r8,r12
80011a18:	10 99       	mov	r9,r8
80011a1a:	30 08       	mov	r8,0
80011a1c:	f0 09 19 00 	cp.h	r9,r8
80011a20:	c0 a4       	brge	80011a34 <get_channel_mode+0x68>
			*chanSwitch |= 0x01;
80011a22:	ee f8 ff fc 	ld.w	r8,r7[-4]
80011a26:	11 88       	ld.ub	r8,r8[0x0]
80011a28:	a1 a8       	sbr	r8,0x0
80011a2a:	5c 58       	castu.b	r8
80011a2c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80011a30:	b2 88       	st.b	r9[0x0],r8
	static inline void get_channel_mode(uint8_t* chanSwitch)
	{
		if (rc_get_channel(RC_SAFETY)<0)
		{
			*chanSwitch |= 0x00;
			}else if(rc_get_channel(RC_SAFETY)>0 && rc_get_channel(RC_ID_MODE)<0){
80011a32:	c2 78       	rjmp	80011a80 <get_channel_mode+0xb4>
			*chanSwitch |= 0x01;
			}else if (rc_get_channel(RC_SAFETY)>0 && rc_get_channel(RC_ID_MODE)>20){
80011a34:	30 4c       	mov	r12,4
80011a36:	f0 16 00 1b 	mcall	r6[108]
80011a3a:	18 98       	mov	r8,r12
80011a3c:	10 99       	mov	r9,r8
80011a3e:	30 08       	mov	r8,0
80011a40:	f0 09 19 00 	cp.h	r9,r8
80011a44:	e0 8a 00 16 	brle	80011a70 <get_channel_mode+0xa4>
80011a48:	30 5c       	mov	r12,5
80011a4a:	f0 16 00 1b 	mcall	r6[108]
80011a4e:	18 98       	mov	r8,r12
80011a50:	10 99       	mov	r9,r8
80011a52:	31 48       	mov	r8,20
80011a54:	f0 09 19 00 	cp.h	r9,r8
80011a58:	e0 8a 00 0c 	brle	80011a70 <get_channel_mode+0xa4>
			*chanSwitch |= 0x03;
80011a5c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80011a60:	11 88       	ld.ub	r8,r8[0x0]
80011a62:	e8 18 00 03 	orl	r8,0x3
80011a66:	5c 58       	castu.b	r8
80011a68:	ee f9 ff fc 	ld.w	r9,r7[-4]
80011a6c:	b2 88       	st.b	r9[0x0],r8
		if (rc_get_channel(RC_SAFETY)<0)
		{
			*chanSwitch |= 0x00;
			}else if(rc_get_channel(RC_SAFETY)>0 && rc_get_channel(RC_ID_MODE)<0){
			*chanSwitch |= 0x01;
			}else if (rc_get_channel(RC_SAFETY)>0 && rc_get_channel(RC_ID_MODE)>20){
80011a6e:	c0 98       	rjmp	80011a80 <get_channel_mode+0xb4>
			*chanSwitch |= 0x03;
			}else{
			*chanSwitch |= 0x02;
80011a70:	ee f8 ff fc 	ld.w	r8,r7[-4]
80011a74:	11 88       	ld.ub	r8,r8[0x0]
80011a76:	a1 b8       	sbr	r8,0x1
80011a78:	5c 58       	castu.b	r8
80011a7a:	ee f9 ff fc 	ld.w	r9,r7[-4]
80011a7e:	b2 88       	st.b	r9[0x0],r8
		}
	}
80011a80:	2f fd       	sub	sp,-4
80011a82:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80011a86:	00 00       	add	r0,r0
80011a88:	80 01       	ld.sh	r1,r0[0x0]
80011a8a:	18 5a       	eor	r10,r12

80011a8c <get_main_taskset>:

#define PRESSURE_LPF 0.1

central_data_t *centralData;

task_set* get_main_taskset() {
80011a8c:	eb cd 40 c0 	pushm	r6-r7,lr
80011a90:	1a 97       	mov	r7,sp
80011a92:	48 46       	lddpc	r6,80011aa0 <get_main_taskset+0x14>
80011a94:	1e 26       	rsub	r6,pc
	return &main_tasks;
80011a96:	ec f8 01 28 	ld.w	r8,r6[296]
}
80011a9a:	10 9c       	mov	r12,r8
80011a9c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80011aa0:	80 01       	ld.sh	r1,r0[0x0]
80011aa2:	19 18       	ld.sh	r8,r12++

80011aa4 <run_imu_update>:

task_return_t run_imu_update() {
80011aa4:	eb cd 40 c0 	pushm	r6-r7,lr
80011aa8:	1a 97       	mov	r7,sp
80011aaa:	48 d6       	lddpc	r6,80011adc <run_imu_update+0x38>
80011aac:	1e 26       	rsub	r6,pc
	imu_update(&(centralData->imu1), &centralData->position_estimator, &centralData->pressure, &centralData->GPS_data);	
80011aae:	ec f8 00 00 	ld.w	r8,r6[0]
80011ab2:	70 08       	ld.w	r8,r8[0x0]
80011ab4:	f0 c9 f4 f8 	sub	r9,r8,-2824
80011ab8:	ec f8 00 00 	ld.w	r8,r6[0]
80011abc:	70 08       	ld.w	r8,r8[0x0]
80011abe:	f0 ca ef 3c 	sub	r10,r8,-4292
80011ac2:	ec f8 00 00 	ld.w	r8,r6[0]
80011ac6:	70 08       	ld.w	r8,r8[0x0]
80011ac8:	f0 cb f2 c4 	sub	r11,r8,-3388
80011acc:	ec f8 00 00 	ld.w	r8,r6[0]
80011ad0:	70 08       	ld.w	r8,r8[0x0]
80011ad2:	10 9c       	mov	r12,r8
80011ad4:	f0 16 00 8d 	mcall	r6[564]
}	
80011ad8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80011adc:	80 01       	ld.sh	r1,r0[0x0]
80011ade:	19 30       	ld.ub	r0,r12++
80011ae0:	6d 6f       	ld.w	pc,r6[0x58]
80011ae2:	74 6f       	ld.w	pc,r10[0x18]
80011ae4:	72 20       	ld.w	r0,r9[0x8]
80011ae6:	6f 6e       	ld.w	lr,r7[0x58]
80011ae8:	3a 20       	mov	r0,-94
80011aea:	79 61       	ld.w	r1,r12[0x58]
80011aec:	77 3d       	ld.w	sp,r11[0x4c]
80011aee:	0a 00       	add	r0,r5

80011af0 <rc_user_channels>:

void rc_user_channels(uint8_t *chanSwitch, int8_t *rc_check, int8_t *motorbool)
{
80011af0:	eb cd 40 e0 	pushm	r5-r7,lr
80011af4:	1a 97       	mov	r7,sp
80011af6:	20 3d       	sub	sp,12
80011af8:	4c f6       	lddpc	r6,80011c34 <rc_user_channels+0x144>
80011afa:	1e 26       	rsub	r6,pc
80011afc:	ef 4c ff fc 	st.w	r7[-4],r12
80011b00:	ef 4b ff f8 	st.w	r7[-8],r11
80011b04:	ef 4a ff f4 	st.w	r7[-12],r10
	
	get_channel_mode(chanSwitch);
80011b08:	ee fc ff fc 	ld.w	r12,r7[-4]
80011b0c:	c6 0f       	rcall	800119cc <get_channel_mode>
	//dbg_print_num(*chanSwitch,10);
	//dbg_print_num(getChannel(4),10);
	//dbg_print_num(getChannel(5),10);
	//dbg_print("\n");
	
	if((get_thrust_from_remote()<-0.95) && (get_yaw_from_remote() > 0.9))
80011b0e:	cc 5e       	rcall	80011898 <get_thrust_from_remote>
80011b10:	18 98       	mov	r8,r12
80011b12:	10 9c       	mov	r12,r8
80011b14:	f0 16 00 02 	mcall	r6[8]
80011b18:	30 05       	mov	r5,0
80011b1a:	e0 68 66 66 	mov	r8,26214
80011b1e:	ea 18 66 66 	orh	r8,0x6666
80011b22:	e0 69 66 66 	mov	r9,26214
80011b26:	ea 19 bf ee 	orh	r9,0xbfee
80011b2a:	f0 16 00 1d 	mcall	r6[116]
80011b2e:	18 98       	mov	r8,r12
80011b30:	58 08       	cp.w	r8,0
80011b32:	c0 20       	breq	80011b36 <rc_user_channels+0x46>
80011b34:	30 15       	mov	r5,1
80011b36:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
80011b3a:	c2 90       	breq	80011b8c <rc_user_channels+0x9c>
80011b3c:	c8 ee       	rcall	80011858 <get_yaw_from_remote>
80011b3e:	18 98       	mov	r8,r12
80011b40:	10 9c       	mov	r12,r8
80011b42:	f0 16 00 02 	mcall	r6[8]
80011b46:	14 98       	mov	r8,r10
80011b48:	16 99       	mov	r9,r11
80011b4a:	30 05       	mov	r5,0
80011b4c:	e0 6a cc cd 	mov	r10,52429
80011b50:	ea 1a cc cc 	orh	r10,0xcccc
80011b54:	e0 6b cc cc 	mov	r11,52428
80011b58:	ea 1b 3f ec 	orh	r11,0x3fec
80011b5c:	f0 16 00 1d 	mcall	r6[116]
80011b60:	18 98       	mov	r8,r12
80011b62:	58 08       	cp.w	r8,0
80011b64:	c0 20       	breq	80011b68 <rc_user_channels+0x78>
80011b66:	30 15       	mov	r5,1
80011b68:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
80011b6c:	c1 00       	breq	80011b8c <rc_user_channels+0x9c>
	{
		//dbg_print("motor on\n");
		dbg_print("motor on: yaw=\n"); dbg_putfloat(get_yaw_from_remote(),2);
80011b6e:	fe cc 00 8e 	sub	r12,pc,142
80011b72:	f0 16 00 01 	mcall	r6[4]
80011b76:	c7 1e       	rcall	80011858 <get_yaw_from_remote>
80011b78:	18 98       	mov	r8,r12
80011b7a:	30 2b       	mov	r11,2
80011b7c:	10 9c       	mov	r12,r8
80011b7e:	f0 16 02 02 	mcall	r6[2056]
		*motorbool = 1;
80011b82:	ee f9 ff f4 	ld.w	r9,r7[-12]
80011b86:	30 18       	mov	r8,1
80011b88:	b2 88       	st.b	r9[0x0],r8
	//dbg_print_num(*chanSwitch,10);
	//dbg_print_num(getChannel(4),10);
	//dbg_print_num(getChannel(5),10);
	//dbg_print("\n");
	
	if((get_thrust_from_remote()<-0.95) && (get_yaw_from_remote() > 0.9))
80011b8a:	c3 88       	rjmp	80011bfa <rc_user_channels+0x10a>
	{
		//dbg_print("motor on\n");
		dbg_print("motor on: yaw=\n"); dbg_putfloat(get_yaw_from_remote(),2);
		*motorbool = 1;
	}else if((get_thrust_from_remote()<-0.95) && (get_yaw_from_remote() <-0.9))
80011b8c:	c8 6e       	rcall	80011898 <get_thrust_from_remote>
80011b8e:	18 98       	mov	r8,r12
80011b90:	10 9c       	mov	r12,r8
80011b92:	f0 16 00 02 	mcall	r6[8]
80011b96:	30 05       	mov	r5,0
80011b98:	e0 68 66 66 	mov	r8,26214
80011b9c:	ea 18 66 66 	orh	r8,0x6666
80011ba0:	e0 69 66 66 	mov	r9,26214
80011ba4:	ea 19 bf ee 	orh	r9,0xbfee
80011ba8:	f0 16 00 1d 	mcall	r6[116]
80011bac:	18 98       	mov	r8,r12
80011bae:	58 08       	cp.w	r8,0
80011bb0:	c0 20       	breq	80011bb4 <rc_user_channels+0xc4>
80011bb2:	30 15       	mov	r5,1
80011bb4:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
80011bb8:	c1 d0       	breq	80011bf2 <rc_user_channels+0x102>
80011bba:	c4 fe       	rcall	80011858 <get_yaw_from_remote>
80011bbc:	18 98       	mov	r8,r12
80011bbe:	10 9c       	mov	r12,r8
80011bc0:	f0 16 00 02 	mcall	r6[8]
80011bc4:	30 05       	mov	r5,0
80011bc6:	e0 68 cc cd 	mov	r8,52429
80011bca:	ea 18 cc cc 	orh	r8,0xcccc
80011bce:	e0 69 cc cc 	mov	r9,52428
80011bd2:	ea 19 bf ec 	orh	r9,0xbfec
80011bd6:	f0 16 00 1d 	mcall	r6[116]
80011bda:	18 98       	mov	r8,r12
80011bdc:	58 08       	cp.w	r8,0
80011bde:	c0 20       	breq	80011be2 <rc_user_channels+0xf2>
80011be0:	30 15       	mov	r5,1
80011be2:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
80011be6:	c0 60       	breq	80011bf2 <rc_user_channels+0x102>
	{
		//dbg_print("motor off\n");
		*motorbool = -1;
80011be8:	ee f9 ff f4 	ld.w	r9,r7[-12]
80011bec:	3f f8       	mov	r8,-1
80011bee:	b2 88       	st.b	r9[0x0],r8
	if((get_thrust_from_remote()<-0.95) && (get_yaw_from_remote() > 0.9))
	{
		//dbg_print("motor on\n");
		dbg_print("motor on: yaw=\n"); dbg_putfloat(get_yaw_from_remote(),2);
		*motorbool = 1;
	}else if((get_thrust_from_remote()<-0.95) && (get_yaw_from_remote() <-0.9))
80011bf0:	c0 58       	rjmp	80011bfa <rc_user_channels+0x10a>
	{
		//dbg_print("motor off\n");
		*motorbool = -1;
	}else{
		//dbg_print("motor nothing\n");
		*motorbool = 0;
80011bf2:	ee f9 ff f4 	ld.w	r9,r7[-12]
80011bf6:	30 08       	mov	r8,0
80011bf8:	b2 88       	st.b	r9[0x0],r8
	}
	
	switch (rc_check_receivers())
80011bfa:	f0 16 00 9e 	mcall	r6[632]
80011bfe:	18 98       	mov	r8,r12
80011c00:	5c 58       	castu.b	r8
80011c02:	5c 68       	casts.b	r8
80011c04:	5b f8       	cp.w	r8,-1
80011c06:	c0 b0       	breq	80011c1c <rc_user_channels+0x12c>
80011c08:	58 18       	cp.w	r8,1
80011c0a:	c0 40       	breq	80011c12 <rc_user_channels+0x122>
80011c0c:	5b e8       	cp.w	r8,-2
80011c0e:	c0 c0       	breq	80011c26 <rc_user_channels+0x136>
80011c10:	c0 f8       	rjmp	80011c2e <rc_user_channels+0x13e>
	{
		case 1:
		*rc_check = 1;
80011c12:	ee f9 ff f8 	ld.w	r9,r7[-8]
80011c16:	30 18       	mov	r8,1
80011c18:	b2 88       	st.b	r9[0x0],r8
		break;
80011c1a:	c0 a8       	rjmp	80011c2e <rc_user_channels+0x13e>
		case -1:
		*rc_check = -1;
80011c1c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80011c20:	3f f8       	mov	r8,-1
80011c22:	b2 88       	st.b	r9[0x0],r8
		break;
80011c24:	c0 58       	rjmp	80011c2e <rc_user_channels+0x13e>
		case -2:
		*rc_check = -2;
80011c26:	ee f9 ff f8 	ld.w	r9,r7[-8]
80011c2a:	3f e8       	mov	r8,-2
80011c2c:	b2 88       	st.b	r9[0x0],r8
	//dbg_print("rc_check: ");
	//dbg_print_num(rc_check,10);
	//dbg_print("; motorbool : ");
	//dbg_print_num(*motorbool,10);
	//dbg_print("\n");
}
80011c2e:	2f dd       	sub	sp,-12
80011c30:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80011c34:	80 01       	ld.sh	r1,r0[0x0]
80011c36:	19 7e       	ld.ub	lr,--r12
80011c38:	53 77       	stdsp	sp[0xdc],r7
80011c3a:	69 74       	ld.w	r4,r4[0x5c]
80011c3c:	63 68       	ld.w	r8,r1[0x58]
80011c3e:	69 6e       	ld.w	lr,r4[0x58]
80011c40:	67 20       	ld.w	r0,r3[0x48]
80011c42:	6f 6e       	ld.w	lr,r7[0x58]
80011c44:	20 74       	sub	r4,7
80011c46:	68 65       	ld.w	r5,r4[0x18]
80011c48:	20 6d       	sub	sp,24
80011c4a:	6f 74       	ld.w	r4,r7[0x5c]
80011c4c:	6f 72       	ld.w	r2,r7[0x5c]
80011c4e:	73 21       	ld.w	r1,r9[0x48]
80011c50:	0a 00       	add	r0,r5
80011c52:	00 00       	add	r0,r0
80011c54:	53 77       	stdsp	sp[0xdc],r7
80011c56:	69 74       	ld.w	r4,r4[0x5c]
80011c58:	63 68       	ld.w	r8,r1[0x58]
80011c5a:	65 73       	ld.w	r3,r2[0x5c]
80011c5c:	20 6e       	sub	lr,6
80011c5e:	6f 74       	ld.w	r4,r7[0x5c]
80011c60:	20 72       	sub	r2,7
80011c62:	65 61       	ld.w	r1,r2[0x58]
80011c64:	64 79       	ld.w	r9,r2[0x1c]
80011c66:	2c 20       	sub	r0,-62
80011c68:	62 6f       	ld.w	pc,r1[0x18]
80011c6a:	74 68       	ld.w	r8,r10[0x18]
80011c6c:	20 73       	sub	r3,7
80011c6e:	68 6f       	ld.w	pc,r4[0x18]
80011c70:	75 6c       	ld.w	r12,r10[0x58]
80011c72:	64 20       	ld.w	r0,r2[0x8]
80011c74:	62 65       	ld.w	r5,r1[0x18]
80011c76:	20 70       	sub	r0,7
80011c78:	75 73       	ld.w	r3,r10[0x5c]
80011c7a:	68 65       	ld.w	r5,r4[0x18]
80011c7c:	64 21       	ld.w	r1,r2[0x8]
80011c7e:	0a 00       	add	r0,r5
80011c80:	53 77       	stdsp	sp[0xdc],r7
80011c82:	69 74       	ld.w	r4,r4[0x5c]
80011c84:	63 68       	ld.w	r8,r1[0x58]
80011c86:	69 6e       	ld.w	lr,r4[0x58]
80011c88:	67 20       	ld.w	r0,r3[0x48]
80011c8a:	6f 66       	ld.w	r6,r7[0x58]
80011c8c:	66 20       	ld.w	r0,r3[0x8]
80011c8e:	6d 6f       	ld.w	pc,r6[0x58]
80011c90:	74 6f       	ld.w	pc,r10[0x18]
80011c92:	72 73       	ld.w	r3,r9[0x1c]
80011c94:	21 0a       	sub	r10,16
	...

80011c98 <set_mav_mode_n_state>:

task_return_t set_mav_mode_n_state()
{
80011c98:	eb cd 40 c0 	pushm	r6-r7,lr
80011c9c:	1a 97       	mov	r7,sp
80011c9e:	20 1d       	sub	sp,4
80011ca0:	fe f6 03 9c 	ld.w	r6,pc[924]
80011ca4:	1e 26       	rsub	r6,pc
	uint8_t channelSwitches = 0;
80011ca6:	30 08       	mov	r8,0
80011ca8:	ef 68 ff ff 	st.b	r7[-1],r8
	int8_t RC_check = 0;
80011cac:	30 08       	mov	r8,0
80011cae:	ef 68 ff fe 	st.b	r7[-2],r8
	int8_t motor_switch = 0;
80011cb2:	30 08       	mov	r8,0
80011cb4:	ef 68 ff fd 	st.b	r7[-3],r8
	
	LED_Toggle(LED1);
80011cb8:	30 2c       	mov	r12,2
80011cba:	f0 16 01 c0 	mcall	r6[1792]
	
	rc_user_channels(&channelSwitches,&RC_check, &motor_switch);
80011cbe:	ee ca 00 03 	sub	r10,r7,3
80011cc2:	ee c9 00 02 	sub	r9,r7,2
80011cc6:	ee c8 00 01 	sub	r8,r7,1
80011cca:	12 9b       	mov	r11,r9
80011ccc:	10 9c       	mov	r12,r8
80011cce:	f0 16 01 4c 	mcall	r6[1328]
	
	switch(centralData->mav_state)
80011cd2:	ec f8 00 00 	ld.w	r8,r6[0]
80011cd6:	70 08       	ld.w	r8,r8[0x0]
80011cd8:	f1 38 10 bd 	ld.ub	r8,r8[4285]
80011cdc:	58 48       	cp.w	r8,4
80011cde:	c6 50       	breq	80011da8 <set_mav_mode_n_state+0x110>
80011ce0:	e0 89 00 09 	brgt	80011cf2 <set_mav_mode_n_state+0x5a>
80011ce4:	58 28       	cp.w	r8,2
80011ce6:	e0 80 01 a2 	breq	8001202a <set_mav_mode_n_state+0x392>
80011cea:	58 38       	cp.w	r8,3
80011cec:	c0 b0       	breq	80011d02 <set_mav_mode_n_state+0x6a>
80011cee:	e0 8f 01 a3 	bral	80012034 <set_mav_mode_n_state+0x39c>
80011cf2:	58 58       	cp.w	r8,5
80011cf4:	e0 80 00 fa 	breq	80011ee8 <set_mav_mode_n_state+0x250>
80011cf8:	58 68       	cp.w	r8,6
80011cfa:	e0 80 01 70 	breq	80011fda <set_mav_mode_n_state+0x342>
80011cfe:	e0 8f 01 9b 	bral	80012034 <set_mav_mode_n_state+0x39c>
	{
		case MAV_STATE_CALIBRATING:
			break;
		case MAV_STATE_STANDBY:
			if (motor_switch == 1)
80011d02:	ef 39 ff fd 	ld.ub	r9,r7[-3]
80011d06:	30 18       	mov	r8,1
80011d08:	f0 09 18 00 	cp.b	r9,r8
80011d0c:	e0 81 01 91 	brne	8001202e <set_mav_mode_n_state+0x396>
			{
				switch(channelSwitches)
80011d10:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80011d14:	58 18       	cp.w	r8,1
80011d16:	c3 70       	breq	80011d84 <set_mav_mode_n_state+0xec>
80011d18:	e0 89 00 06 	brgt	80011d24 <set_mav_mode_n_state+0x8c>
80011d1c:	58 08       	cp.w	r8,0
80011d1e:	c0 90       	breq	80011d30 <set_mav_mode_n_state+0x98>
					case 3:
						dbg_print("Switches not ready, both should be pushed!\n");
						break;
				}
			}
			break;
80011d20:	e0 8f 01 8a 	bral	80012034 <set_mav_mode_n_state+0x39c>
		case MAV_STATE_CALIBRATING:
			break;
		case MAV_STATE_STANDBY:
			if (motor_switch == 1)
			{
				switch(channelSwitches)
80011d24:	58 28       	cp.w	r8,2
80011d26:	c3 40       	breq	80011d8e <set_mav_mode_n_state+0xf6>
80011d28:	58 38       	cp.w	r8,3
80011d2a:	c3 70       	breq	80011d98 <set_mav_mode_n_state+0x100>
					case 3:
						dbg_print("Switches not ready, both should be pushed!\n");
						break;
				}
			}
			break;
80011d2c:	e0 8f 01 84 	bral	80012034 <set_mav_mode_n_state+0x39c>
			if (motor_switch == 1)
			{
				switch(channelSwitches)
				{
					case 0:
						dbg_print("Switching on the motors!\n");
80011d30:	fe cc 00 f8 	sub	r12,pc,248
80011d34:	f0 16 00 01 	mcall	r6[4]
						position_reset_home_altitude(&centralData->position_estimator, &centralData->pressure, &centralData->GPS_data);
80011d38:	ec f8 00 00 	ld.w	r8,r6[0]
80011d3c:	70 08       	ld.w	r8,r8[0x0]
80011d3e:	f0 ca f4 f8 	sub	r10,r8,-2824
80011d42:	ec f8 00 00 	ld.w	r8,r6[0]
80011d46:	70 08       	ld.w	r8,r8[0x0]
80011d48:	f0 c9 ef 3c 	sub	r9,r8,-4292
80011d4c:	ec f8 00 00 	ld.w	r8,r6[0]
80011d50:	70 08       	ld.w	r8,r8[0x0]
80011d52:	f0 c8 f2 c4 	sub	r8,r8,-3388
80011d56:	12 9b       	mov	r11,r9
80011d58:	10 9c       	mov	r12,r8
80011d5a:	f0 16 01 fe 	mcall	r6[2040]
						centralData->controls.run_mode = MOTORS_ON;
80011d5e:	ec f8 00 00 	ld.w	r8,r6[0]
80011d62:	70 08       	ld.w	r8,r8[0x0]
80011d64:	30 19       	mov	r9,1
80011d66:	f1 49 01 70 	st.w	r8[368],r9
						centralData->mav_state = MAV_STATE_ACTIVE;
80011d6a:	ec f8 00 00 	ld.w	r8,r6[0]
80011d6e:	70 09       	ld.w	r9,r8[0x0]
80011d70:	30 48       	mov	r8,4
80011d72:	f3 68 10 bd 	st.b	r9[4285],r8
						centralData->mav_mode = MAV_MODE_MANUAL_ARMED;
80011d76:	ec f8 00 00 	ld.w	r8,r6[0]
80011d7a:	70 09       	ld.w	r9,r8[0x0]
80011d7c:	3c 08       	mov	r8,-64
80011d7e:	f3 68 10 bc 	st.b	r9[4284],r8
						break;
80011d82:	c1 18       	rjmp	80011da4 <set_mav_mode_n_state+0x10c>
					case 1:
						dbg_print("Switches not ready, both should be pushed!\n");
80011d84:	fe cc 01 30 	sub	r12,pc,304
80011d88:	f0 16 00 01 	mcall	r6[4]
						//centralData->controls.run_mode = MOTORS_ON;
						//centralData->mav_state = MAV_STATE_ACTIVE;
						//centralData->mav_mode = MAV_MODE_STABILIZE_ARMED;
						break;
80011d8c:	c0 c8       	rjmp	80011da4 <set_mav_mode_n_state+0x10c>
					case 2:
						dbg_print("Switches not ready, both should be pushed!\n");
80011d8e:	fe cc 01 3a 	sub	r12,pc,314
80011d92:	f0 16 00 01 	mcall	r6[4]
						break;
80011d96:	c0 78       	rjmp	80011da4 <set_mav_mode_n_state+0x10c>
					case 3:
						dbg_print("Switches not ready, both should be pushed!\n");
80011d98:	fe cc 01 44 	sub	r12,pc,324
80011d9c:	f0 16 00 01 	mcall	r6[4]
						break;
				}
			}
			break;
80011da0:	e0 8f 01 4a 	bral	80012034 <set_mav_mode_n_state+0x39c>
80011da4:	e0 8f 01 48 	bral	80012034 <set_mav_mode_n_state+0x39c>
		case MAV_STATE_ACTIVE:
			switch(channelSwitches)
80011da8:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80011dac:	58 18       	cp.w	r8,1
80011dae:	c1 80       	breq	80011dde <set_mav_mode_n_state+0x146>
80011db0:	e0 89 00 05 	brgt	80011dba <set_mav_mode_n_state+0x122>
80011db4:	58 08       	cp.w	r8,0
80011db6:	c0 70       	breq	80011dc4 <set_mav_mode_n_state+0x12c>
80011db8:	c2 d8       	rjmp	80011e12 <set_mav_mode_n_state+0x17a>
80011dba:	58 28       	cp.w	r8,2
80011dbc:	c1 e0       	breq	80011df8 <set_mav_mode_n_state+0x160>
80011dbe:	58 38       	cp.w	r8,3
80011dc0:	c2 30       	breq	80011e06 <set_mav_mode_n_state+0x16e>
80011dc2:	c2 88       	rjmp	80011e12 <set_mav_mode_n_state+0x17a>
			{
				case 0:
					centralData->waypoint_hold_init = false;
80011dc4:	ec f8 00 00 	ld.w	r8,r6[0]
80011dc8:	70 09       	ld.w	r9,r8[0x0]
80011dca:	30 08       	mov	r8,0
80011dcc:	f3 68 10 b7 	st.b	r9[4279],r8
					centralData->mav_mode= MAV_MODE_MANUAL_ARMED;
80011dd0:	ec f8 00 00 	ld.w	r8,r6[0]
80011dd4:	70 09       	ld.w	r9,r8[0x0]
80011dd6:	3c 08       	mov	r8,-64
80011dd8:	f3 68 10 bc 	st.b	r9[4284],r8
					break;
80011ddc:	c1 b8       	rjmp	80011e12 <set_mav_mode_n_state+0x17a>
				case 1:
					centralData->waypoint_hold_init = false;
80011dde:	ec f8 00 00 	ld.w	r8,r6[0]
80011de2:	70 09       	ld.w	r9,r8[0x0]
80011de4:	30 08       	mov	r8,0
80011de6:	f3 68 10 b7 	st.b	r9[4279],r8
					centralData->mav_mode= MAV_MODE_STABILIZE_ARMED;
80011dea:	ec f8 00 00 	ld.w	r8,r6[0]
80011dee:	70 09       	ld.w	r9,r8[0x0]
80011df0:	3d 08       	mov	r8,-48
80011df2:	f3 68 10 bc 	st.b	r9[4284],r8
					break;
80011df6:	c0 e8       	rjmp	80011e12 <set_mav_mode_n_state+0x17a>
				case 2:
					centralData->mav_mode = MAV_MODE_GUIDED_ARMED;
80011df8:	ec f8 00 00 	ld.w	r8,r6[0]
80011dfc:	70 09       	ld.w	r9,r8[0x0]
80011dfe:	3d 88       	mov	r8,-40
80011e00:	f3 68 10 bc 	st.b	r9[4284],r8
					break;
80011e04:	c0 78       	rjmp	80011e12 <set_mav_mode_n_state+0x17a>
				case 3:
					
					centralData->mav_mode = MAV_MODE_AUTO_ARMED;
80011e06:	ec f8 00 00 	ld.w	r8,r6[0]
80011e0a:	70 09       	ld.w	r9,r8[0x0]
80011e0c:	3d c8       	mov	r8,-36
80011e0e:	f3 68 10 bc 	st.b	r9[4284],r8
					break;
			}
			
			switch (centralData->mav_mode)
80011e12:	ec f8 00 00 	ld.w	r8,r6[0]
80011e16:	70 08       	ld.w	r8,r8[0x0]
80011e18:	f1 38 10 bc 	ld.ub	r8,r8[4284]
80011e1c:	e0 48 00 d0 	cp.w	r8,208
80011e20:	c1 50       	breq	80011e4a <set_mav_mode_n_state+0x1b2>
80011e22:	e0 89 00 06 	brgt	80011e2e <set_mav_mode_n_state+0x196>
80011e26:	e0 48 00 c0 	cp.w	r8,192
80011e2a:	c0 90       	breq	80011e3c <set_mav_mode_n_state+0x1a4>
80011e2c:	c2 88       	rjmp	80011e7c <set_mav_mode_n_state+0x1e4>
80011e2e:	e0 48 00 d8 	cp.w	r8,216
80011e32:	c1 30       	breq	80011e58 <set_mav_mode_n_state+0x1c0>
80011e34:	e0 48 00 dc 	cp.w	r8,220
80011e38:	c1 30       	breq	80011e5e <set_mav_mode_n_state+0x1c6>
80011e3a:	c2 18       	rjmp	80011e7c <set_mav_mode_n_state+0x1e4>
			{
				case MAV_MODE_MANUAL_ARMED:
					centralData->waypoint_hold_init = false;
80011e3c:	ec f8 00 00 	ld.w	r8,r6[0]
80011e40:	70 09       	ld.w	r9,r8[0x0]
80011e42:	30 08       	mov	r8,0
80011e44:	f3 68 10 b7 	st.b	r9[4279],r8
					break;
80011e48:	c1 a8       	rjmp	80011e7c <set_mav_mode_n_state+0x1e4>
				case MAV_MODE_STABILIZE_ARMED:
					centralData->waypoint_hold_init = false;
80011e4a:	ec f8 00 00 	ld.w	r8,r6[0]
80011e4e:	70 09       	ld.w	r9,r8[0x0]
80011e50:	30 08       	mov	r8,0
80011e52:	f3 68 10 b7 	st.b	r9[4279],r8
					break;
80011e56:	c1 38       	rjmp	80011e7c <set_mav_mode_n_state+0x1e4>
				case MAV_MODE_GUIDED_ARMED:
					waypoint_hold_position_handler();
80011e58:	f0 16 01 b5 	mcall	r6[1748]
					break;
80011e5c:	c1 08       	rjmp	80011e7c <set_mav_mode_n_state+0x1e4>
				case MAV_MODE_AUTO_ARMED:
					if (centralData->waypoint_set)
80011e5e:	ec f8 00 00 	ld.w	r8,r6[0]
80011e62:	70 08       	ld.w	r8,r8[0x0]
80011e64:	f1 38 10 b4 	ld.ub	r8,r8[4276]
80011e68:	58 08       	cp.w	r8,0
80011e6a:	c0 70       	breq	80011e78 <set_mav_mode_n_state+0x1e0>
					{
						centralData->waypoint_hold_init = false;
80011e6c:	ec f8 00 00 	ld.w	r8,r6[0]
80011e70:	70 09       	ld.w	r9,r8[0x0]
80011e72:	30 08       	mov	r8,0
80011e74:	f3 68 10 b7 	st.b	r9[4279],r8
					}
					waypoint_navigation_handler();
80011e78:	f0 16 02 03 	mcall	r6[2060]
					break;
			}
			
			//dbg_print("motor_switch: ");
			//dbg_print_num(motor_switch,10);
			if (motor_switch == -1)
80011e7c:	ef 39 ff fd 	ld.ub	r9,r7[-3]
80011e80:	3f f8       	mov	r8,-1
80011e82:	f0 09 18 00 	cp.b	r9,r8
80011e86:	c1 71       	brne	80011eb4 <set_mav_mode_n_state+0x21c>
			{
				dbg_print("Switching off motors!\n");
80011e88:	fe cc 02 08 	sub	r12,pc,520
80011e8c:	f0 16 00 01 	mcall	r6[4]
				centralData->controls.run_mode = MOTORS_OFF;
80011e90:	ec f8 00 00 	ld.w	r8,r6[0]
80011e94:	70 08       	ld.w	r8,r8[0x0]
80011e96:	30 09       	mov	r9,0
80011e98:	f1 49 01 70 	st.w	r8[368],r9
				centralData->mav_state = MAV_STATE_STANDBY;
80011e9c:	ec f8 00 00 	ld.w	r8,r6[0]
80011ea0:	70 09       	ld.w	r9,r8[0x0]
80011ea2:	30 38       	mov	r8,3
80011ea4:	f3 68 10 bd 	st.b	r9[4285],r8
				centralData->mav_mode = MAV_MODE_MANUAL_DISARMED;
80011ea8:	ec f8 00 00 	ld.w	r8,r6[0]
80011eac:	70 09       	ld.w	r9,r8[0x0]
80011eae:	34 08       	mov	r8,64
80011eb0:	f3 68 10 bc 	st.b	r9[4284],r8
			}
		
			switch (RC_check)
80011eb4:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80011eb8:	5c 68       	casts.b	r8
80011eba:	5b f8       	cp.w	r8,-1
80011ebc:	c0 70       	breq	80011eca <set_mav_mode_n_state+0x232>
80011ebe:	58 18       	cp.w	r8,1
80011ec0:	c0 40       	breq	80011ec8 <set_mav_mode_n_state+0x230>
80011ec2:	5b e8       	cp.w	r8,-2
80011ec4:	c0 a0       	breq	80011ed8 <set_mav_mode_n_state+0x240>
					break;
				case -2:
					centralData->mav_state = MAV_STATE_CRITICAL;
					break;
			}
			break;
80011ec6:	cb 78       	rjmp	80012034 <set_mav_mode_n_state+0x39c>
			}
		
			switch (RC_check)
			{
				case 1:
					break;
80011ec8:	c0 f8       	rjmp	80011ee6 <set_mav_mode_n_state+0x24e>
				case -1:
					centralData->mav_state = MAV_STATE_CRITICAL;
80011eca:	ec f8 00 00 	ld.w	r8,r6[0]
80011ece:	70 09       	ld.w	r9,r8[0x0]
80011ed0:	30 58       	mov	r8,5
80011ed2:	f3 68 10 bd 	st.b	r9[4285],r8
					break;
80011ed6:	c0 88       	rjmp	80011ee6 <set_mav_mode_n_state+0x24e>
				case -2:
					centralData->mav_state = MAV_STATE_CRITICAL;
80011ed8:	ec f8 00 00 	ld.w	r8,r6[0]
80011edc:	70 09       	ld.w	r9,r8[0x0]
80011ede:	30 58       	mov	r8,5
80011ee0:	f3 68 10 bd 	st.b	r9[4285],r8
					break;
			}
			break;
80011ee4:	ca 88       	rjmp	80012034 <set_mav_mode_n_state+0x39c>
80011ee6:	ca 78       	rjmp	80012034 <set_mav_mode_n_state+0x39c>
		case MAV_STATE_CRITICAL:
			switch(channelSwitches)
80011ee8:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80011eec:	58 18       	cp.w	r8,1
80011eee:	c1 20       	breq	80011f12 <set_mav_mode_n_state+0x27a>
80011ef0:	e0 89 00 05 	brgt	80011efa <set_mav_mode_n_state+0x262>
80011ef4:	58 08       	cp.w	r8,0
80011ef6:	c0 70       	breq	80011f04 <set_mav_mode_n_state+0x26c>
80011ef8:	c2 18       	rjmp	80011f3a <set_mav_mode_n_state+0x2a2>
80011efa:	58 28       	cp.w	r8,2
80011efc:	c1 20       	breq	80011f20 <set_mav_mode_n_state+0x288>
80011efe:	58 38       	cp.w	r8,3
80011f00:	c1 70       	breq	80011f2e <set_mav_mode_n_state+0x296>
80011f02:	c1 c8       	rjmp	80011f3a <set_mav_mode_n_state+0x2a2>
			{
				case 0:
					centralData->mav_mode= MAV_MODE_MANUAL_ARMED;
80011f04:	ec f8 00 00 	ld.w	r8,r6[0]
80011f08:	70 09       	ld.w	r9,r8[0x0]
80011f0a:	3c 08       	mov	r8,-64
80011f0c:	f3 68 10 bc 	st.b	r9[4284],r8
					break;
80011f10:	c1 58       	rjmp	80011f3a <set_mav_mode_n_state+0x2a2>
				case 1:
					centralData->mav_mode= MAV_MODE_STABILIZE_ARMED;
80011f12:	ec f8 00 00 	ld.w	r8,r6[0]
80011f16:	70 09       	ld.w	r9,r8[0x0]
80011f18:	3d 08       	mov	r8,-48
80011f1a:	f3 68 10 bc 	st.b	r9[4284],r8
					break;
80011f1e:	c0 e8       	rjmp	80011f3a <set_mav_mode_n_state+0x2a2>
				case 2:
					centralData->mav_mode = MAV_MODE_GUIDED_ARMED;
80011f20:	ec f8 00 00 	ld.w	r8,r6[0]
80011f24:	70 09       	ld.w	r9,r8[0x0]
80011f26:	3d 88       	mov	r8,-40
80011f28:	f3 68 10 bc 	st.b	r9[4284],r8
					break;
80011f2c:	c0 78       	rjmp	80011f3a <set_mav_mode_n_state+0x2a2>
				case 3:
					centralData->mav_mode = MAV_MODE_AUTO_ARMED;
80011f2e:	ec f8 00 00 	ld.w	r8,r6[0]
80011f32:	70 09       	ld.w	r9,r8[0x0]
80011f34:	3d c8       	mov	r8,-36
80011f36:	f3 68 10 bc 	st.b	r9[4284],r8
					break;
			}
			if (motor_switch == -1)
80011f3a:	ef 39 ff fd 	ld.ub	r9,r7[-3]
80011f3e:	3f f8       	mov	r8,-1
80011f40:	f0 09 18 00 	cp.b	r9,r8
80011f44:	c1 71       	brne	80011f72 <set_mav_mode_n_state+0x2da>
			{
				dbg_print("Switching off motors!\n");
80011f46:	fe cc 02 c6 	sub	r12,pc,710
80011f4a:	f0 16 00 01 	mcall	r6[4]
				centralData->controls.run_mode = MOTORS_OFF;
80011f4e:	ec f8 00 00 	ld.w	r8,r6[0]
80011f52:	70 08       	ld.w	r8,r8[0x0]
80011f54:	30 09       	mov	r9,0
80011f56:	f1 49 01 70 	st.w	r8[368],r9
				centralData->mav_state = MAV_STATE_STANDBY;
80011f5a:	ec f8 00 00 	ld.w	r8,r6[0]
80011f5e:	70 09       	ld.w	r9,r8[0x0]
80011f60:	30 38       	mov	r8,3
80011f62:	f3 68 10 bd 	st.b	r9[4285],r8
				centralData->mav_mode = MAV_MODE_MANUAL_DISARMED;
80011f66:	ec f8 00 00 	ld.w	r8,r6[0]
80011f6a:	70 09       	ld.w	r9,r8[0x0]
80011f6c:	34 08       	mov	r8,64
80011f6e:	f3 68 10 bc 	st.b	r9[4284],r8
			}
			
			switch (centralData->mav_mode)
80011f72:	ec f8 00 00 	ld.w	r8,r6[0]
80011f76:	70 08       	ld.w	r8,r8[0x0]
80011f78:	f1 38 10 bc 	ld.ub	r8,r8[4284]
80011f7c:	e0 48 00 d8 	cp.w	r8,216
80011f80:	c0 40       	breq	80011f88 <set_mav_mode_n_state+0x2f0>
80011f82:	e0 48 00 dc 	cp.w	r8,220
80011f86:	c0 31       	brne	80011f8c <set_mav_mode_n_state+0x2f4>
			{
				case MAV_MODE_GUIDED_ARMED:
				case MAV_MODE_AUTO_ARMED:
					waypoint_critical_handler();
80011f88:	f0 16 01 d1 	mcall	r6[1860]
					break;
			}
			
			switch (RC_check)
80011f8c:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80011f90:	5c 68       	casts.b	r8
80011f92:	5b f8       	cp.w	r8,-1
80011f94:	c1 30       	breq	80011fba <set_mav_mode_n_state+0x322>
80011f96:	58 18       	cp.w	r8,1
80011f98:	c0 40       	breq	80011fa0 <set_mav_mode_n_state+0x308>
80011f9a:	5b e8       	cp.w	r8,-2
80011f9c:	c1 00       	breq	80011fbc <set_mav_mode_n_state+0x324>
						centralData->mav_state = MAV_STATE_EMERGENCY;
					}
					//centralData->mav_state = MAV_STATE_EMERGENCY;
					break;
			}
			break;
80011f9e:	c4 b8       	rjmp	80012034 <set_mav_mode_n_state+0x39c>
			}
			
			switch (RC_check)
			{
				case 1:
					centralData->mav_state = MAV_STATE_ACTIVE;
80011fa0:	ec f8 00 00 	ld.w	r8,r6[0]
80011fa4:	70 09       	ld.w	r9,r8[0x0]
80011fa6:	30 48       	mov	r8,4
80011fa8:	f3 68 10 bd 	st.b	r9[4285],r8
					centralData->critical_init = false;
80011fac:	ec f8 00 00 	ld.w	r8,r6[0]
80011fb0:	70 09       	ld.w	r9,r8[0x0]
80011fb2:	30 08       	mov	r8,0
80011fb4:	f3 68 10 b9 	st.b	r9[4281],r8
					break;
80011fb8:	c1 08       	rjmp	80011fd8 <set_mav_mode_n_state+0x340>
				case -1:
					break;
80011fba:	c0 f8       	rjmp	80011fd8 <set_mav_mode_n_state+0x340>
				case -2:
					if (centralData->critical_landing)
80011fbc:	ec f8 00 00 	ld.w	r8,r6[0]
80011fc0:	70 08       	ld.w	r8,r8[0x0]
80011fc2:	f1 38 10 b8 	ld.ub	r8,r8[4280]
80011fc6:	58 08       	cp.w	r8,0
80011fc8:	c3 50       	breq	80012032 <set_mav_mode_n_state+0x39a>
					{
						centralData->mav_state = MAV_STATE_EMERGENCY;
80011fca:	ec f8 00 00 	ld.w	r8,r6[0]
80011fce:	70 09       	ld.w	r9,r8[0x0]
80011fd0:	30 68       	mov	r8,6
80011fd2:	f3 68 10 bd 	st.b	r9[4285],r8
					}
					//centralData->mav_state = MAV_STATE_EMERGENCY;
					break;
			}
			break;
80011fd6:	c2 f8       	rjmp	80012034 <set_mav_mode_n_state+0x39c>
80011fd8:	c2 e8       	rjmp	80012034 <set_mav_mode_n_state+0x39c>
		case MAV_STATE_EMERGENCY:
			if (centralData->position_estimator.localPosition.pos[Z] < 1.0)
80011fda:	ec f8 00 00 	ld.w	r8,r6[0]
80011fde:	70 08       	ld.w	r8,r8[0x0]
80011fe0:	f0 fa 0d a4 	ld.w	r10,r8[3492]
80011fe4:	30 18       	mov	r8,1
80011fe6:	fc 19 3f 80 	movh	r9,0x3f80
80011fea:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80011fee:	e0 8c 00 03 	brvs	80011ff4 <set_mav_mode_n_state+0x35c>
80011ff2:	c0 25       	brlt	80011ff6 <set_mav_mode_n_state+0x35e>
80011ff4:	30 08       	mov	r8,0
80011ff6:	5c 58       	castu.b	r8
80011ff8:	c1 e0       	breq	80012034 <set_mav_mode_n_state+0x39c>
			{
				centralData->mav_mode = MAV_MODE_MANUAL_DISARMED;
80011ffa:	ec f8 00 00 	ld.w	r8,r6[0]
80011ffe:	70 09       	ld.w	r9,r8[0x0]
80012000:	34 08       	mov	r8,64
80012002:	f3 68 10 bc 	st.b	r9[4284],r8
				centralData->controls.control_mode = ATTITUDE_COMMAND_MODE;
80012006:	ec f8 00 00 	ld.w	r8,r6[0]
8001200a:	70 08       	ld.w	r8,r8[0x0]
8001200c:	30 19       	mov	r9,1
8001200e:	f1 49 01 68 	st.w	r8[360],r9
				switch (RC_check)
80012012:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80012016:	5c 68       	casts.b	r8
80012018:	58 18       	cp.w	r8,1
8001201a:	c0 d1       	brne	80012034 <set_mav_mode_n_state+0x39c>
				{
					case 1:
						centralData->mav_state = MAV_STATE_STANDBY;
8001201c:	ec f8 00 00 	ld.w	r8,r6[0]
80012020:	70 09       	ld.w	r9,r8[0x0]
80012022:	30 38       	mov	r8,3
80012024:	f3 68 10 bd 	st.b	r9[4285],r8
80012028:	c0 68       	rjmp	80012034 <set_mav_mode_n_state+0x39c>
	rc_user_channels(&channelSwitches,&RC_check, &motor_switch);
	
	switch(centralData->mav_state)
	{
		case MAV_STATE_CALIBRATING:
			break;
8001202a:	d7 03       	nop
8001202c:	c0 48       	rjmp	80012034 <set_mav_mode_n_state+0x39c>
					case 3:
						dbg_print("Switches not ready, both should be pushed!\n");
						break;
				}
			}
			break;
8001202e:	d7 03       	nop
80012030:	c0 28       	rjmp	80012034 <set_mav_mode_n_state+0x39c>
						centralData->mav_state = MAV_STATE_EMERGENCY;
					}
					//centralData->mav_state = MAV_STATE_EMERGENCY;
					break;
			}
			break;
80012032:	d7 03       	nop
	//dbg_print_num(centralData->mav_state,10);
	//dbg_print(", MAV mode :");
	//dbg_print_num(centralData->mav_mode,10);
	//dbg_print("\n");
	
}
80012034:	2f fd       	sub	sp,-4
80012036:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001203a:	00 00       	add	r0,r0
8001203c:	80 01       	ld.sh	r1,r0[0x0]
8001203e:	1b 28       	ld.uh	r8,sp++

80012040 <run_stabilisation>:

task_return_t run_stabilisation() {
80012040:	eb cd 40 e0 	pushm	r5-r7,lr
80012044:	1a 97       	mov	r7,sp
80012046:	20 cd       	sub	sp,48
80012048:	fe f6 04 18 	ld.w	r6,pc[1048]
8001204c:	1e 26       	rsub	r6,pc
	int i;
	
	if (centralData->simulation_mode==1) {
8001204e:	ec f8 00 00 	ld.w	r8,r6[0]
80012052:	70 08       	ld.w	r8,r8[0x0]
80012054:	f0 f8 10 c0 	ld.w	r8,r8[4288]
80012058:	58 18       	cp.w	r8,1
8001205a:	c2 d1       	brne	800120b4 <run_stabilisation+0x74>
		simu_update(&centralData->sim_model, &centralData->servos, &(centralData->imu1), &centralData->position_estimator);
8001205c:	ec f8 00 00 	ld.w	r8,r6[0]
80012060:	70 08       	ld.w	r8,r8[0x0]
80012062:	f0 c9 f2 c4 	sub	r9,r8,-3388
80012066:	ec f8 00 00 	ld.w	r8,r6[0]
8001206a:	70 08       	ld.w	r8,r8[0x0]
8001206c:	10 9a       	mov	r10,r8
8001206e:	ec f8 00 00 	ld.w	r8,r6[0]
80012072:	70 08       	ld.w	r8,r8[0x0]
80012074:	f0 cb f9 14 	sub	r11,r8,-1772
80012078:	ec f8 00 00 	ld.w	r8,r6[0]
8001207c:	70 08       	ld.w	r8,r8[0x0]
8001207e:	f0 c8 f4 58 	sub	r8,r8,-2984
80012082:	10 9c       	mov	r12,r8
80012084:	f0 16 01 93 	mcall	r6[1612]
		
		
		imu_update(&(centralData->imu1), &(centralData->position_estimator), &centralData->pressure, &centralData->GPS_data);
80012088:	ec f8 00 00 	ld.w	r8,r6[0]
8001208c:	70 08       	ld.w	r8,r8[0x0]
8001208e:	f0 c9 f4 f8 	sub	r9,r8,-2824
80012092:	ec f8 00 00 	ld.w	r8,r6[0]
80012096:	70 08       	ld.w	r8,r8[0x0]
80012098:	f0 ca ef 3c 	sub	r10,r8,-4292
8001209c:	ec f8 00 00 	ld.w	r8,r6[0]
800120a0:	70 08       	ld.w	r8,r8[0x0]
800120a2:	f0 cb f2 c4 	sub	r11,r8,-3388
800120a6:	ec f8 00 00 	ld.w	r8,r6[0]
800120aa:	70 08       	ld.w	r8,r8[0x0]
800120ac:	10 9c       	mov	r12,r8
800120ae:	f0 16 00 8d 	mcall	r6[564]
800120b2:	c1 c8       	rjmp	800120ea <run_stabilisation+0xaa>
		
		//for (i=0; i<3; i++) centralData->position_estimator.vel[i]=centralData->sim_model.vel[i];
		//centralData->position_estimator.localPosition=centralData->sim_model.localPosition;
	} else {
		imu_get_raw_data(&(centralData->imu1));
800120b4:	ec f8 00 00 	ld.w	r8,r6[0]
800120b8:	70 08       	ld.w	r8,r8[0x0]
800120ba:	10 9c       	mov	r12,r8
800120bc:	f0 16 00 8c 	mcall	r6[560]
		imu_update(&(centralData->imu1), &centralData->position_estimator, &centralData->pressure, &centralData->GPS_data);
800120c0:	ec f8 00 00 	ld.w	r8,r6[0]
800120c4:	70 08       	ld.w	r8,r8[0x0]
800120c6:	f0 c9 f4 f8 	sub	r9,r8,-2824
800120ca:	ec f8 00 00 	ld.w	r8,r6[0]
800120ce:	70 08       	ld.w	r8,r8[0x0]
800120d0:	f0 ca ef 3c 	sub	r10,r8,-4292
800120d4:	ec f8 00 00 	ld.w	r8,r6[0]
800120d8:	70 08       	ld.w	r8,r8[0x0]
800120da:	f0 cb f2 c4 	sub	r11,r8,-3388
800120de:	ec f8 00 00 	ld.w	r8,r6[0]
800120e2:	70 08       	ld.w	r8,r8[0x0]
800120e4:	10 9c       	mov	r12,r8
800120e6:	f0 16 00 8d 	mcall	r6[564]
	}

	switch(centralData->mav_mode)
800120ea:	ec f8 00 00 	ld.w	r8,r6[0]
800120ee:	70 08       	ld.w	r8,r8[0x0]
800120f0:	f1 38 10 bc 	ld.ub	r8,r8[4284]
800120f4:	e0 48 00 5c 	cp.w	r8,92
800120f8:	e0 80 01 73 	breq	800123de <run_stabilisation+0x39e>
800120fc:	e0 89 00 17 	brgt	8001212a <run_stabilisation+0xea>
80012100:	e0 48 00 40 	cp.w	r8,64
80012104:	e0 80 01 6d 	breq	800123de <run_stabilisation+0x39e>
80012108:	e0 89 00 07 	brgt	80012116 <run_stabilisation+0xd6>
8001210c:	58 08       	cp.w	r8,0
8001210e:	e0 80 01 68 	breq	800123de <run_stabilisation+0x39e>
80012112:	e0 8f 01 95 	bral	8001243c <run_stabilisation+0x3fc>
80012116:	e0 48 00 50 	cp.w	r8,80
8001211a:	e0 80 01 62 	breq	800123de <run_stabilisation+0x39e>
8001211e:	e0 48 00 58 	cp.w	r8,88
80012122:	e0 80 01 5e 	breq	800123de <run_stabilisation+0x39e>
80012126:	e0 8f 01 8b 	bral	8001243c <run_stabilisation+0x3fc>
8001212a:	e0 48 00 d0 	cp.w	r8,208
8001212e:	c5 a0       	breq	800121e2 <run_stabilisation+0x1a2>
80012130:	e0 89 00 07 	brgt	8001213e <run_stabilisation+0xfe>
80012134:	e0 48 00 c0 	cp.w	r8,192
80012138:	c0 d0       	breq	80012152 <run_stabilisation+0x112>
8001213a:	e0 8f 01 81 	bral	8001243c <run_stabilisation+0x3fc>
8001213e:	e0 48 00 d8 	cp.w	r8,216
80012142:	e0 80 00 c2 	breq	800122c6 <run_stabilisation+0x286>
80012146:	e0 48 00 dc 	cp.w	r8,220
8001214a:	e0 80 01 04 	breq	80012352 <run_stabilisation+0x312>
8001214e:	e0 8f 01 77 	bral	8001243c <run_stabilisation+0x3fc>
	{
		
		case MAV_MODE_MANUAL_ARMED:
			centralData->controls = get_command_from_remote();
80012152:	ec f8 00 00 	ld.w	r8,r6[0]
80012156:	70 05       	ld.w	r5,r8[0x0]
80012158:	ee c8 00 30 	sub	r8,r7,48
8001215c:	10 9c       	mov	r12,r8
8001215e:	fe b0 fb bd 	rcall	800118d8 <get_command_from_remote>
80012162:	ea c8 fe b8 	sub	r8,r5,-328
80012166:	ee c9 00 30 	sub	r9,r7,48
8001216a:	f0 ca 00 00 	sub	r10,r8,0
8001216e:	f2 cb 00 00 	sub	r11,r9,0
80012172:	76 0c       	ld.w	r12,r11[0x0]
80012174:	95 0c       	st.w	r10[0x0],r12
80012176:	76 1c       	ld.w	r12,r11[0x4]
80012178:	95 1c       	st.w	r10[0x4],r12
8001217a:	76 2c       	ld.w	r12,r11[0x8]
8001217c:	95 2c       	st.w	r10[0x8],r12
8001217e:	76 3b       	ld.w	r11,r11[0xc]
80012180:	95 3b       	st.w	r10[0xc],r11
80012182:	f0 ca ff f0 	sub	r10,r8,-16
80012186:	f2 cb ff f0 	sub	r11,r9,-16
8001218a:	76 0c       	ld.w	r12,r11[0x0]
8001218c:	95 0c       	st.w	r10[0x0],r12
8001218e:	76 1c       	ld.w	r12,r11[0x4]
80012190:	95 1c       	st.w	r10[0x4],r12
80012192:	76 2c       	ld.w	r12,r11[0x8]
80012194:	95 2c       	st.w	r10[0x8],r12
80012196:	76 3b       	ld.w	r11,r11[0xc]
80012198:	95 3b       	st.w	r10[0xc],r11
8001219a:	f2 ea 00 20 	ld.d	r10,r9[32]
8001219e:	f0 eb 00 20 	st.d	r8[32],r10
800121a2:	72 a9       	ld.w	r9,r9[0x28]
800121a4:	91 a9       	st.w	r8[0x28],r9
			
			centralData->controls.yaw_mode=YAW_RELATIVE;
800121a6:	ec f8 00 00 	ld.w	r8,r6[0]
800121aa:	70 08       	ld.w	r8,r8[0x0]
800121ac:	30 09       	mov	r9,0
800121ae:	f1 49 01 6c 	st.w	r8[364],r9
			centralData->controls.control_mode = ATTITUDE_COMMAND_MODE;
800121b2:	ec f8 00 00 	ld.w	r8,r6[0]
800121b6:	70 08       	ld.w	r8,r8[0x0]
800121b8:	30 19       	mov	r9,1
800121ba:	f1 49 01 68 	st.w	r8[360],r9
			
			cascade_stabilise_copter(&(centralData->imu1), &centralData->position_estimator, &(centralData->controls));
800121be:	ec f8 00 00 	ld.w	r8,r6[0]
800121c2:	70 08       	ld.w	r8,r8[0x0]
800121c4:	f0 ca fe b8 	sub	r10,r8,-328
800121c8:	ec f8 00 00 	ld.w	r8,r6[0]
800121cc:	70 08       	ld.w	r8,r8[0x0]
800121ce:	f0 c9 f2 c4 	sub	r9,r8,-3388
800121d2:	ec f8 00 00 	ld.w	r8,r6[0]
800121d6:	70 08       	ld.w	r8,r8[0x0]
800121d8:	12 9b       	mov	r11,r9
800121da:	10 9c       	mov	r12,r8
800121dc:	f0 16 00 8e 	mcall	r6[568]
			break;
800121e0:	c2 e9       	rjmp	8001243c <run_stabilisation+0x3fc>
		case MAV_MODE_STABILIZE_ARMED:
			centralData->controls = get_command_from_remote();
800121e2:	ec f8 00 00 	ld.w	r8,r6[0]
800121e6:	70 05       	ld.w	r5,r8[0x0]
800121e8:	ee c8 00 30 	sub	r8,r7,48
800121ec:	10 9c       	mov	r12,r8
800121ee:	fe b0 fb 75 	rcall	800118d8 <get_command_from_remote>
800121f2:	ea c8 fe b8 	sub	r8,r5,-328
800121f6:	ee c9 00 30 	sub	r9,r7,48
800121fa:	f0 ca 00 00 	sub	r10,r8,0
800121fe:	f2 cb 00 00 	sub	r11,r9,0
80012202:	76 0c       	ld.w	r12,r11[0x0]
80012204:	95 0c       	st.w	r10[0x0],r12
80012206:	76 1c       	ld.w	r12,r11[0x4]
80012208:	95 1c       	st.w	r10[0x4],r12
8001220a:	76 2c       	ld.w	r12,r11[0x8]
8001220c:	95 2c       	st.w	r10[0x8],r12
8001220e:	76 3b       	ld.w	r11,r11[0xc]
80012210:	95 3b       	st.w	r10[0xc],r11
80012212:	f0 ca ff f0 	sub	r10,r8,-16
80012216:	f2 cb ff f0 	sub	r11,r9,-16
8001221a:	76 0c       	ld.w	r12,r11[0x0]
8001221c:	95 0c       	st.w	r10[0x0],r12
8001221e:	76 1c       	ld.w	r12,r11[0x4]
80012220:	95 1c       	st.w	r10[0x4],r12
80012222:	76 2c       	ld.w	r12,r11[0x8]
80012224:	95 2c       	st.w	r10[0x8],r12
80012226:	76 3b       	ld.w	r11,r11[0xc]
80012228:	95 3b       	st.w	r10[0xc],r11
8001222a:	f2 ea 00 20 	ld.d	r10,r9[32]
8001222e:	f0 eb 00 20 	st.d	r8[32],r10
80012232:	72 a9       	ld.w	r9,r9[0x28]
80012234:	91 a9       	st.w	r8[0x28],r9
			centralData->controls.control_mode = VELOCITY_COMMAND_MODE;
80012236:	ec f8 00 00 	ld.w	r8,r6[0]
8001223a:	70 08       	ld.w	r8,r8[0x0]
8001223c:	30 09       	mov	r9,0
8001223e:	f1 49 01 68 	st.w	r8[360],r9
			centralData->controls.yaw_mode=YAW_RELATIVE;
80012242:	ec f8 00 00 	ld.w	r8,r6[0]
80012246:	70 08       	ld.w	r8,r8[0x0]
80012248:	30 09       	mov	r9,0
8001224a:	f1 49 01 6c 	st.w	r8[364],r9
			
			centralData->controls.tvel[X]=-10.0*centralData->controls.rpy[PITCH];
8001224e:	ec f8 00 00 	ld.w	r8,r6[0]
80012252:	70 08       	ld.w	r8,r8[0x0]
80012254:	ec f9 00 00 	ld.w	r9,r6[0]
80012258:	72 09       	ld.w	r9,r9[0x0]
8001225a:	f2 fa 01 4c 	ld.w	r10,r9[332]
8001225e:	fc 19 c1 20 	movh	r9,0xc120
80012262:	e5 a2 09 a9 	cop	cp0,cr9,cr10,cr9,0x44
80012266:	f1 49 01 58 	st.w	r8[344],r9
			centralData->controls.tvel[Y]= 10.0*centralData->controls.rpy[ROLL];
8001226a:	ec f8 00 00 	ld.w	r8,r6[0]
8001226e:	70 08       	ld.w	r8,r8[0x0]
80012270:	ec f9 00 00 	ld.w	r9,r6[0]
80012274:	72 09       	ld.w	r9,r9[0x0]
80012276:	f2 fa 01 48 	ld.w	r10,r9[328]
8001227a:	fc 19 41 20 	movh	r9,0x4120
8001227e:	e5 a2 09 a9 	cop	cp0,cr9,cr10,cr9,0x44
80012282:	f1 49 01 5c 	st.w	r8[348],r9
			centralData->controls.tvel[Z]=- 1.5*centralData->controls.thrust;
80012286:	ec f8 00 00 	ld.w	r8,r6[0]
8001228a:	70 08       	ld.w	r8,r8[0x0]
8001228c:	ec f9 00 00 	ld.w	r9,r6[0]
80012290:	72 09       	ld.w	r9,r9[0x0]
80012292:	f2 fa 01 54 	ld.w	r10,r9[340]
80012296:	fc 19 bf c0 	movh	r9,0xbfc0
8001229a:	e5 a2 09 a9 	cop	cp0,cr9,cr10,cr9,0x44
8001229e:	f1 49 01 60 	st.w	r8[352],r9
			
			cascade_stabilise_copter(&(centralData->imu1), &centralData->position_estimator, &(centralData->controls));
800122a2:	ec f8 00 00 	ld.w	r8,r6[0]
800122a6:	70 08       	ld.w	r8,r8[0x0]
800122a8:	f0 ca fe b8 	sub	r10,r8,-328
800122ac:	ec f8 00 00 	ld.w	r8,r6[0]
800122b0:	70 08       	ld.w	r8,r8[0x0]
800122b2:	f0 c9 f2 c4 	sub	r9,r8,-3388
800122b6:	ec f8 00 00 	ld.w	r8,r6[0]
800122ba:	70 08       	ld.w	r8,r8[0x0]
800122bc:	12 9b       	mov	r11,r9
800122be:	10 9c       	mov	r12,r8
800122c0:	f0 16 00 8e 	mcall	r6[568]
			
			break;
800122c4:	cb c8       	rjmp	8001243c <run_stabilisation+0x3fc>
		case MAV_MODE_GUIDED_ARMED:
			centralData->controls = centralData->controls_nav;
800122c6:	ec f8 00 00 	ld.w	r8,r6[0]
800122ca:	70 08       	ld.w	r8,r8[0x0]
800122cc:	ec f9 00 00 	ld.w	r9,r6[0]
800122d0:	72 09       	ld.w	r9,r9[0x0]
800122d2:	f0 c8 fe b8 	sub	r8,r8,-328
800122d6:	f2 c9 fe 8c 	sub	r9,r9,-372
800122da:	f0 ca 00 00 	sub	r10,r8,0
800122de:	f2 cb 00 00 	sub	r11,r9,0
800122e2:	76 0c       	ld.w	r12,r11[0x0]
800122e4:	95 0c       	st.w	r10[0x0],r12
800122e6:	76 1c       	ld.w	r12,r11[0x4]
800122e8:	95 1c       	st.w	r10[0x4],r12
800122ea:	76 2c       	ld.w	r12,r11[0x8]
800122ec:	95 2c       	st.w	r10[0x8],r12
800122ee:	76 3b       	ld.w	r11,r11[0xc]
800122f0:	95 3b       	st.w	r10[0xc],r11
800122f2:	f0 ca ff f0 	sub	r10,r8,-16
800122f6:	f2 cb ff f0 	sub	r11,r9,-16
800122fa:	76 0c       	ld.w	r12,r11[0x0]
800122fc:	95 0c       	st.w	r10[0x0],r12
800122fe:	76 1c       	ld.w	r12,r11[0x4]
80012300:	95 1c       	st.w	r10[0x4],r12
80012302:	76 2c       	ld.w	r12,r11[0x8]
80012304:	95 2c       	st.w	r10[0x8],r12
80012306:	76 3b       	ld.w	r11,r11[0xc]
80012308:	95 3b       	st.w	r10[0xc],r11
8001230a:	f2 ea 00 20 	ld.d	r10,r9[32]
8001230e:	f0 eb 00 20 	st.d	r8[32],r10
80012312:	72 a9       	ld.w	r9,r9[0x28]
80012314:	91 a9       	st.w	r8[0x28],r9
			//centralData->controls.thrust = f_min(get_thrust_from_remote()*100000.0,centralData->controls_nav.thrust*100000.0)/100000.0;
			//centralData->controls.thrust = get_thrust_from_remote();
			
			centralData->controls.control_mode = VELOCITY_COMMAND_MODE;
80012316:	ec f8 00 00 	ld.w	r8,r6[0]
8001231a:	70 08       	ld.w	r8,r8[0x0]
8001231c:	30 09       	mov	r9,0
8001231e:	f1 49 01 68 	st.w	r8[360],r9
			centralData->controls.yaw_mode = YAW_ABSOLUTE;
80012322:	ec f8 00 00 	ld.w	r8,r6[0]
80012326:	70 08       	ld.w	r8,r8[0x0]
80012328:	30 19       	mov	r9,1
8001232a:	f1 49 01 6c 	st.w	r8[364],r9
			cascade_stabilise_copter(&(centralData->imu1), &centralData->position_estimator, &(centralData->controls));
8001232e:	ec f8 00 00 	ld.w	r8,r6[0]
80012332:	70 08       	ld.w	r8,r8[0x0]
80012334:	f0 ca fe b8 	sub	r10,r8,-328
80012338:	ec f8 00 00 	ld.w	r8,r6[0]
8001233c:	70 08       	ld.w	r8,r8[0x0]
8001233e:	f0 c9 f2 c4 	sub	r9,r8,-3388
80012342:	ec f8 00 00 	ld.w	r8,r6[0]
80012346:	70 08       	ld.w	r8,r8[0x0]
80012348:	12 9b       	mov	r11,r9
8001234a:	10 9c       	mov	r12,r8
8001234c:	f0 16 00 8e 	mcall	r6[568]
			break;
80012350:	c7 68       	rjmp	8001243c <run_stabilisation+0x3fc>
		case MAV_MODE_AUTO_ARMED:
			centralData->controls = centralData->controls_nav;
80012352:	ec f8 00 00 	ld.w	r8,r6[0]
80012356:	70 08       	ld.w	r8,r8[0x0]
80012358:	ec f9 00 00 	ld.w	r9,r6[0]
8001235c:	72 09       	ld.w	r9,r9[0x0]
8001235e:	f0 c8 fe b8 	sub	r8,r8,-328
80012362:	f2 c9 fe 8c 	sub	r9,r9,-372
80012366:	f0 ca 00 00 	sub	r10,r8,0
8001236a:	f2 cb 00 00 	sub	r11,r9,0
8001236e:	76 0c       	ld.w	r12,r11[0x0]
80012370:	95 0c       	st.w	r10[0x0],r12
80012372:	76 1c       	ld.w	r12,r11[0x4]
80012374:	95 1c       	st.w	r10[0x4],r12
80012376:	76 2c       	ld.w	r12,r11[0x8]
80012378:	95 2c       	st.w	r10[0x8],r12
8001237a:	76 3b       	ld.w	r11,r11[0xc]
8001237c:	95 3b       	st.w	r10[0xc],r11
8001237e:	f0 ca ff f0 	sub	r10,r8,-16
80012382:	f2 cb ff f0 	sub	r11,r9,-16
80012386:	76 0c       	ld.w	r12,r11[0x0]
80012388:	95 0c       	st.w	r10[0x0],r12
8001238a:	76 1c       	ld.w	r12,r11[0x4]
8001238c:	95 1c       	st.w	r10[0x4],r12
8001238e:	76 2c       	ld.w	r12,r11[0x8]
80012390:	95 2c       	st.w	r10[0x8],r12
80012392:	76 3b       	ld.w	r11,r11[0xc]
80012394:	95 3b       	st.w	r10[0xc],r11
80012396:	f2 ea 00 20 	ld.d	r10,r9[32]
8001239a:	f0 eb 00 20 	st.d	r8[32],r10
8001239e:	72 a9       	ld.w	r9,r9[0x28]
800123a0:	91 a9       	st.w	r8[0x28],r9
			//centralData->controls.thrust = f_min(get_thrust_from_remote()*100000.0,centralData->controls_nav.thrust*100000.0)/100000.0;
			//centralData->controls.thrust = get_thrust_from_remote();
			
			centralData->controls.control_mode = VELOCITY_COMMAND_MODE;	
800123a2:	ec f8 00 00 	ld.w	r8,r6[0]
800123a6:	70 08       	ld.w	r8,r8[0x0]
800123a8:	30 09       	mov	r9,0
800123aa:	f1 49 01 68 	st.w	r8[360],r9
			centralData->controls.yaw_mode = YAW_COORDINATED;
800123ae:	ec f8 00 00 	ld.w	r8,r6[0]
800123b2:	70 08       	ld.w	r8,r8[0x0]
800123b4:	30 29       	mov	r9,2
800123b6:	f1 49 01 6c 	st.w	r8[364],r9
			cascade_stabilise_copter(&(centralData->imu1), &centralData->position_estimator, &(centralData->controls));
800123ba:	ec f8 00 00 	ld.w	r8,r6[0]
800123be:	70 08       	ld.w	r8,r8[0x0]
800123c0:	f0 ca fe b8 	sub	r10,r8,-328
800123c4:	ec f8 00 00 	ld.w	r8,r6[0]
800123c8:	70 08       	ld.w	r8,r8[0x0]
800123ca:	f0 c9 f2 c4 	sub	r9,r8,-3388
800123ce:	ec f8 00 00 	ld.w	r8,r6[0]
800123d2:	70 08       	ld.w	r8,r8[0x0]
800123d4:	12 9b       	mov	r11,r9
800123d6:	10 9c       	mov	r12,r8
800123d8:	f0 16 00 8e 	mcall	r6[568]
			break;
800123dc:	c3 08       	rjmp	8001243c <run_stabilisation+0x3fc>
		case MAV_MODE_PREFLIGHT:
		case MAV_MODE_MANUAL_DISARMED:
		case MAV_MODE_STABILIZE_DISARMED:
		case MAV_MODE_GUIDED_DISARMED:
		case MAV_MODE_AUTO_DISARMED:
			centralData->controls.run_mode = MOTORS_OFF;
800123de:	ec f8 00 00 	ld.w	r8,r6[0]
800123e2:	70 08       	ld.w	r8,r8[0x0]
800123e4:	30 09       	mov	r9,0
800123e6:	f1 49 01 70 	st.w	r8[368],r9
			for (i=0; i<NUMBER_OF_SERVO_OUTPUTS; i++) {
800123ea:	30 08       	mov	r8,0
800123ec:	ef 48 ff fc 	st.w	r7[-4],r8
800123f0:	c2 18       	rjmp	80012432 <run_stabilisation+0x3f2>
				centralData->servos[i]=servo_failsafe[i];
800123f2:	ec f8 00 00 	ld.w	r8,r6[0]
800123f6:	70 0a       	ld.w	r10,r8[0x0]
800123f8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800123fc:	ee f9 ff fc 	ld.w	r9,r7[-4]
80012400:	a5 68       	lsl	r8,0x4
80012402:	f4 08 00 08 	add	r8,r10,r8
80012406:	f0 c8 f9 14 	sub	r8,r8,-1772
8001240a:	ec fa 08 d4 	ld.w	r10,r6[2260]
8001240e:	a5 69       	lsl	r9,0x4
80012410:	f4 09 00 09 	add	r9,r10,r9
80012414:	20 08       	sub	r8,0
80012416:	20 09       	sub	r9,0
80012418:	72 0a       	ld.w	r10,r9[0x0]
8001241a:	91 0a       	st.w	r8[0x0],r10
8001241c:	72 1a       	ld.w	r10,r9[0x4]
8001241e:	91 1a       	st.w	r8[0x4],r10
80012420:	72 2a       	ld.w	r10,r9[0x8]
80012422:	91 2a       	st.w	r8[0x8],r10
80012424:	72 39       	ld.w	r9,r9[0xc]
80012426:	91 39       	st.w	r8[0xc],r9
		case MAV_MODE_MANUAL_DISARMED:
		case MAV_MODE_STABILIZE_DISARMED:
		case MAV_MODE_GUIDED_DISARMED:
		case MAV_MODE_AUTO_DISARMED:
			centralData->controls.run_mode = MOTORS_OFF;
			for (i=0; i<NUMBER_OF_SERVO_OUTPUTS; i++) {
80012428:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001242c:	2f f8       	sub	r8,-1
8001242e:	ef 48 ff fc 	st.w	r7[-4],r8
80012432:	ee f8 ff fc 	ld.w	r8,r7[-4]
80012436:	58 78       	cp.w	r8,7
80012438:	fe 9a ff dd 	brle	800123f2 <run_stabilisation+0x3b2>
			break;
		
	}
	
	// !!! -- for safety, this should remain the only place where values are written to the servo outputs! --- !!!
	if (centralData->simulation_mode!=1) {
8001243c:	ec f8 00 00 	ld.w	r8,r6[0]
80012440:	70 08       	ld.w	r8,r8[0x0]
80012442:	f0 f8 10 c0 	ld.w	r8,r8[4288]
80012446:	58 18       	cp.w	r8,1
80012448:	c0 90       	breq	8001245a <run_stabilisation+0x41a>
		set_servos(&(centralData->servos));
8001244a:	ec f8 00 00 	ld.w	r8,r6[0]
8001244e:	70 08       	ld.w	r8,r8[0x0]
80012450:	f0 c8 f9 14 	sub	r8,r8,-1772
80012454:	10 9c       	mov	r12,r8
80012456:	f0 16 00 a0 	mcall	r6[640]
	}
		

}
8001245a:	2f 4d       	sub	sp,-48
8001245c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80012460:	80 01       	ld.sh	r1,r0[0x0]
80012462:	1e d0       	st.w	--pc,r0

80012464 <gps_task>:

task_return_t gps_task() {
80012464:	eb cd 40 c0 	pushm	r6-r7,lr
80012468:	1a 97       	mov	r7,sp
8001246a:	20 1d       	sub	sp,4
8001246c:	49 16       	lddpc	r6,800124b0 <gps_task+0x4c>
8001246e:	1e 26       	rsub	r6,pc
	uint32_t tnow = get_millis();	
80012470:	f0 16 00 0f 	mcall	r6[60]
80012474:	18 98       	mov	r8,r12
80012476:	ef 48 ff fc 	st.w	r7[-4],r8
	if (centralData->simulation_mode==1) {
8001247a:	ec f8 00 00 	ld.w	r8,r6[0]
8001247e:	70 08       	ld.w	r8,r8[0x0]
80012480:	f0 f8 10 c0 	ld.w	r8,r8[4288]
80012484:	58 18       	cp.w	r8,1
80012486:	c1 01       	brne	800124a6 <gps_task+0x42>
		simulate_gps(&centralData->sim_model, &centralData->GPS_data);
80012488:	ec f8 00 00 	ld.w	r8,r6[0]
8001248c:	70 08       	ld.w	r8,r8[0x0]
8001248e:	f0 c9 f4 f8 	sub	r9,r8,-2824
80012492:	ec f8 00 00 	ld.w	r8,r6[0]
80012496:	70 08       	ld.w	r8,r8[0x0]
80012498:	f0 c8 f4 58 	sub	r8,r8,-2984
8001249c:	12 9b       	mov	r11,r9
8001249e:	10 9c       	mov	r12,r8
800124a0:	f0 16 01 41 	mcall	r6[1284]
800124a4:	c0 38       	rjmp	800124aa <gps_task+0x46>
	} else {
		gps_update();
800124a6:	f0 16 01 f4 	mcall	r6[2000]
	}
}
800124aa:	2f fd       	sub	sp,-4
800124ac:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800124b0:	80 01       	ld.sh	r1,r0[0x0]
800124b2:	22 f2       	sub	r2,47

800124b4 <run_estimator>:

task_return_t run_estimator()
{
800124b4:	eb cd 40 c0 	pushm	r6-r7,lr
800124b8:	1a 97       	mov	r7,sp
800124ba:	48 46       	lddpc	r6,800124c8 <run_estimator+0x14>
800124bc:	1e 26       	rsub	r6,pc
	estimator_loop();
800124be:	f0 16 01 5d 	mcall	r6[1396]
}
800124c2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800124c6:	00 00       	add	r0,r0
800124c8:	80 01       	ld.sh	r1,r0[0x0]
800124ca:	23 40       	sub	r0,52

800124cc <run_navigation_task>:

task_return_t run_navigation_task()
{
800124cc:	eb cd 40 c0 	pushm	r6-r7,lr
800124d0:	1a 97       	mov	r7,sp
800124d2:	20 1d       	sub	sp,4
800124d4:	fe f6 02 20 	ld.w	r6,pc[544]
800124d8:	1e 26       	rsub	r6,pc
	int8_t i;
	
		switch (centralData->mav_state)
800124da:	ec f8 00 00 	ld.w	r8,r6[0]
800124de:	70 08       	ld.w	r8,r8[0x0]
800124e0:	f1 38 10 bd 	ld.ub	r8,r8[4285]
800124e4:	58 48       	cp.w	r8,4
800124e6:	c0 50       	breq	800124f0 <run_navigation_task+0x24>
800124e8:	58 58       	cp.w	r8,5
800124ea:	e0 80 00 b5 	breq	80012654 <run_navigation_task+0x188>
800124ee:	cf f8       	rjmp	800126ec <run_navigation_task+0x220>
		{
			case MAV_STATE_ACTIVE:
				switch (centralData->mav_mode)
800124f0:	ec f8 00 00 	ld.w	r8,r6[0]
800124f4:	70 08       	ld.w	r8,r8[0x0]
800124f6:	f1 38 10 bc 	ld.ub	r8,r8[4284]
800124fa:	e0 48 00 d8 	cp.w	r8,216
800124fe:	c7 40       	breq	800125e6 <run_navigation_task+0x11a>
80012500:	e0 48 00 dc 	cp.w	r8,220
80012504:	e0 81 00 f1 	brne	800126e6 <run_navigation_task+0x21a>
				{
					case MAV_MODE_AUTO_ARMED:
						if (centralData->waypoint_set)
80012508:	ec f8 00 00 	ld.w	r8,r6[0]
8001250c:	70 08       	ld.w	r8,r8[0x0]
8001250e:	f1 38 10 b4 	ld.ub	r8,r8[4276]
80012512:	58 08       	cp.w	r8,0
80012514:	c3 10       	breq	80012576 <run_navigation_task+0xaa>
						{
							run_navigation(centralData->waypoint_coordinates);
80012516:	ec f8 00 00 	ld.w	r8,r6[0]
8001251a:	70 08       	ld.w	r8,r8[0x0]
8001251c:	20 cd       	sub	sp,48
8001251e:	1a 99       	mov	r9,sp
80012520:	12 9b       	mov	r11,r9
80012522:	f0 ca ef e0 	sub	r10,r8,-4128
80012526:	f6 c8 00 00 	sub	r8,r11,0
8001252a:	f4 c9 00 00 	sub	r9,r10,0
8001252e:	72 0c       	ld.w	r12,r9[0x0]
80012530:	91 0c       	st.w	r8[0x0],r12
80012532:	72 1c       	ld.w	r12,r9[0x4]
80012534:	91 1c       	st.w	r8[0x4],r12
80012536:	72 2c       	ld.w	r12,r9[0x8]
80012538:	91 2c       	st.w	r8[0x8],r12
8001253a:	72 39       	ld.w	r9,r9[0xc]
8001253c:	91 39       	st.w	r8[0xc],r9
8001253e:	f6 c8 ff f0 	sub	r8,r11,-16
80012542:	f4 c9 ff f0 	sub	r9,r10,-16
80012546:	72 0c       	ld.w	r12,r9[0x0]
80012548:	91 0c       	st.w	r8[0x0],r12
8001254a:	72 1c       	ld.w	r12,r9[0x4]
8001254c:	91 1c       	st.w	r8[0x4],r12
8001254e:	72 2c       	ld.w	r12,r9[0x8]
80012550:	91 2c       	st.w	r8[0x8],r12
80012552:	72 39       	ld.w	r9,r9[0xc]
80012554:	91 39       	st.w	r8[0xc],r9
80012556:	f6 c8 ff e0 	sub	r8,r11,-32
8001255a:	f4 c9 ff e0 	sub	r9,r10,-32
8001255e:	72 0a       	ld.w	r10,r9[0x0]
80012560:	91 0a       	st.w	r8[0x0],r10
80012562:	72 1a       	ld.w	r10,r9[0x4]
80012564:	91 1a       	st.w	r8[0x4],r10
80012566:	72 2a       	ld.w	r10,r9[0x8]
80012568:	91 2a       	st.w	r8[0x8],r10
8001256a:	72 39       	ld.w	r9,r9[0xc]
8001256c:	91 39       	st.w	r8[0xc],r9
8001256e:	f0 16 00 81 	mcall	r6[516]
80012572:	2f 4d       	sub	sp,-48
80012574:	c3 78       	rjmp	800125e2 <run_navigation_task+0x116>
					
							//computeNewVelocity(centralData->controls_nav.tvel,newVelocity);
						}else if(centralData->waypoint_hold_init)
80012576:	ec f8 00 00 	ld.w	r8,r6[0]
8001257a:	70 08       	ld.w	r8,r8[0x0]
8001257c:	f1 38 10 b7 	ld.ub	r8,r8[4279]
80012580:	58 08       	cp.w	r8,0
80012582:	c3 00       	breq	800125e2 <run_navigation_task+0x116>
						{
							run_navigation(centralData->waypoint_hold_coordinates);
80012584:	ec f8 00 00 	ld.w	r8,r6[0]
80012588:	70 08       	ld.w	r8,r8[0x0]
8001258a:	20 cd       	sub	sp,48
8001258c:	1a 99       	mov	r9,sp
8001258e:	12 9b       	mov	r11,r9
80012590:	f0 ca ef b0 	sub	r10,r8,-4176
80012594:	f6 c8 00 00 	sub	r8,r11,0
80012598:	f4 c9 00 00 	sub	r9,r10,0
8001259c:	72 0c       	ld.w	r12,r9[0x0]
8001259e:	91 0c       	st.w	r8[0x0],r12
800125a0:	72 1c       	ld.w	r12,r9[0x4]
800125a2:	91 1c       	st.w	r8[0x4],r12
800125a4:	72 2c       	ld.w	r12,r9[0x8]
800125a6:	91 2c       	st.w	r8[0x8],r12
800125a8:	72 39       	ld.w	r9,r9[0xc]
800125aa:	91 39       	st.w	r8[0xc],r9
800125ac:	f6 c8 ff f0 	sub	r8,r11,-16
800125b0:	f4 c9 ff f0 	sub	r9,r10,-16
800125b4:	72 0c       	ld.w	r12,r9[0x0]
800125b6:	91 0c       	st.w	r8[0x0],r12
800125b8:	72 1c       	ld.w	r12,r9[0x4]
800125ba:	91 1c       	st.w	r8[0x4],r12
800125bc:	72 2c       	ld.w	r12,r9[0x8]
800125be:	91 2c       	st.w	r8[0x8],r12
800125c0:	72 39       	ld.w	r9,r9[0xc]
800125c2:	91 39       	st.w	r8[0xc],r9
800125c4:	f6 c8 ff e0 	sub	r8,r11,-32
800125c8:	f4 c9 ff e0 	sub	r9,r10,-32
800125cc:	72 0a       	ld.w	r10,r9[0x0]
800125ce:	91 0a       	st.w	r8[0x0],r10
800125d0:	72 1a       	ld.w	r10,r9[0x4]
800125d2:	91 1a       	st.w	r8[0x4],r10
800125d4:	72 2a       	ld.w	r10,r9[0x8]
800125d6:	91 2a       	st.w	r8[0x8],r10
800125d8:	72 39       	ld.w	r9,r9[0xc]
800125da:	91 39       	st.w	r8[0xc],r9
800125dc:	f0 16 00 81 	mcall	r6[516]
800125e0:	2f 4d       	sub	sp,-48
						}
						break;
800125e2:	d7 03       	nop
						{
							run_navigation(centralData->waypoint_hold_coordinates);
						}
						break;
				}
				break;
800125e4:	c8 48       	rjmp	800126ec <run_navigation_task+0x220>
						{
							run_navigation(centralData->waypoint_hold_coordinates);
						}
						break;
					case MAV_MODE_GUIDED_ARMED:
						if(centralData->waypoint_hold_init)
800125e6:	ec f8 00 00 	ld.w	r8,r6[0]
800125ea:	70 08       	ld.w	r8,r8[0x0]
800125ec:	f1 38 10 b7 	ld.ub	r8,r8[4279]
800125f0:	58 08       	cp.w	r8,0
800125f2:	c7 c0       	breq	800126ea <run_navigation_task+0x21e>
						{
							run_navigation(centralData->waypoint_hold_coordinates);
800125f4:	ec f8 00 00 	ld.w	r8,r6[0]
800125f8:	70 08       	ld.w	r8,r8[0x0]
800125fa:	20 cd       	sub	sp,48
800125fc:	1a 99       	mov	r9,sp
800125fe:	12 9b       	mov	r11,r9
80012600:	f0 ca ef b0 	sub	r10,r8,-4176
80012604:	f6 c8 00 00 	sub	r8,r11,0
80012608:	f4 c9 00 00 	sub	r9,r10,0
8001260c:	72 0c       	ld.w	r12,r9[0x0]
8001260e:	91 0c       	st.w	r8[0x0],r12
80012610:	72 1c       	ld.w	r12,r9[0x4]
80012612:	91 1c       	st.w	r8[0x4],r12
80012614:	72 2c       	ld.w	r12,r9[0x8]
80012616:	91 2c       	st.w	r8[0x8],r12
80012618:	72 39       	ld.w	r9,r9[0xc]
8001261a:	91 39       	st.w	r8[0xc],r9
8001261c:	f6 c8 ff f0 	sub	r8,r11,-16
80012620:	f4 c9 ff f0 	sub	r9,r10,-16
80012624:	72 0c       	ld.w	r12,r9[0x0]
80012626:	91 0c       	st.w	r8[0x0],r12
80012628:	72 1c       	ld.w	r12,r9[0x4]
8001262a:	91 1c       	st.w	r8[0x4],r12
8001262c:	72 2c       	ld.w	r12,r9[0x8]
8001262e:	91 2c       	st.w	r8[0x8],r12
80012630:	72 39       	ld.w	r9,r9[0xc]
80012632:	91 39       	st.w	r8[0xc],r9
80012634:	f6 c8 ff e0 	sub	r8,r11,-32
80012638:	f4 c9 ff e0 	sub	r9,r10,-32
8001263c:	72 0a       	ld.w	r10,r9[0x0]
8001263e:	91 0a       	st.w	r8[0x0],r10
80012640:	72 1a       	ld.w	r10,r9[0x4]
80012642:	91 1a       	st.w	r8[0x4],r10
80012644:	72 2a       	ld.w	r10,r9[0x8]
80012646:	91 2a       	st.w	r8[0x8],r10
80012648:	72 39       	ld.w	r9,r9[0xc]
8001264a:	91 39       	st.w	r8[0xc],r9
8001264c:	f0 16 00 81 	mcall	r6[516]
80012650:	2f 4d       	sub	sp,-48
						}
						break;
				}
				break;
80012652:	c4 d8       	rjmp	800126ec <run_navigation_task+0x220>
			case MAV_STATE_CRITICAL:
				if ((centralData->mav_mode == MAV_MODE_GUIDED_ARMED)||(centralData->mav_mode == MAV_MODE_AUTO_ARMED))
80012654:	ec f8 00 00 	ld.w	r8,r6[0]
80012658:	70 08       	ld.w	r8,r8[0x0]
8001265a:	f1 39 10 bc 	ld.ub	r9,r8[4284]
8001265e:	3d 88       	mov	r8,-40
80012660:	f0 09 18 00 	cp.b	r9,r8
80012664:	c0 a0       	breq	80012678 <run_navigation_task+0x1ac>
80012666:	ec f8 00 00 	ld.w	r8,r6[0]
8001266a:	70 08       	ld.w	r8,r8[0x0]
8001266c:	f1 39 10 bc 	ld.ub	r9,r8[4284]
80012670:	3d c8       	mov	r8,-36
80012672:	f0 09 18 00 	cp.b	r9,r8
80012676:	c3 b1       	brne	800126ec <run_navigation_task+0x220>
				{
					if(centralData->critical_init)
80012678:	ec f8 00 00 	ld.w	r8,r6[0]
8001267c:	70 08       	ld.w	r8,r8[0x0]
8001267e:	f1 38 10 b9 	ld.ub	r8,r8[4281]
80012682:	58 08       	cp.w	r8,0
80012684:	c3 40       	breq	800126ec <run_navigation_task+0x220>
					{
						run_navigation(centralData->waypoint_critical_coordinates);
80012686:	ec f8 00 00 	ld.w	r8,r6[0]
8001268a:	70 08       	ld.w	r8,r8[0x0]
8001268c:	20 cd       	sub	sp,48
8001268e:	1a 99       	mov	r9,sp
80012690:	12 9b       	mov	r11,r9
80012692:	f0 ca ef 80 	sub	r10,r8,-4224
80012696:	f6 c8 00 00 	sub	r8,r11,0
8001269a:	f4 c9 00 00 	sub	r9,r10,0
8001269e:	72 0c       	ld.w	r12,r9[0x0]
800126a0:	91 0c       	st.w	r8[0x0],r12
800126a2:	72 1c       	ld.w	r12,r9[0x4]
800126a4:	91 1c       	st.w	r8[0x4],r12
800126a6:	72 2c       	ld.w	r12,r9[0x8]
800126a8:	91 2c       	st.w	r8[0x8],r12
800126aa:	72 39       	ld.w	r9,r9[0xc]
800126ac:	91 39       	st.w	r8[0xc],r9
800126ae:	f6 c8 ff f0 	sub	r8,r11,-16
800126b2:	f4 c9 ff f0 	sub	r9,r10,-16
800126b6:	72 0c       	ld.w	r12,r9[0x0]
800126b8:	91 0c       	st.w	r8[0x0],r12
800126ba:	72 1c       	ld.w	r12,r9[0x4]
800126bc:	91 1c       	st.w	r8[0x4],r12
800126be:	72 2c       	ld.w	r12,r9[0x8]
800126c0:	91 2c       	st.w	r8[0x8],r12
800126c2:	72 39       	ld.w	r9,r9[0xc]
800126c4:	91 39       	st.w	r8[0xc],r9
800126c6:	f6 c8 ff e0 	sub	r8,r11,-32
800126ca:	f4 c9 ff e0 	sub	r9,r10,-32
800126ce:	72 0a       	ld.w	r10,r9[0x0]
800126d0:	91 0a       	st.w	r8[0x0],r10
800126d2:	72 1a       	ld.w	r10,r9[0x4]
800126d4:	91 1a       	st.w	r8[0x4],r10
800126d6:	72 2a       	ld.w	r10,r9[0x8]
800126d8:	91 2a       	st.w	r8[0x8],r10
800126da:	72 39       	ld.w	r9,r9[0xc]
800126dc:	91 39       	st.w	r8[0xc],r9
800126de:	f0 16 00 81 	mcall	r6[516]
800126e2:	2f 4d       	sub	sp,-48
800126e4:	c0 48       	rjmp	800126ec <run_navigation_task+0x220>
						{
							run_navigation(centralData->waypoint_hold_coordinates);
						}
						break;
				}
				break;
800126e6:	d7 03       	nop
800126e8:	c0 28       	rjmp	800126ec <run_navigation_task+0x220>
800126ea:	d7 03       	nop
					}
				}
				break;
		}
	
}
800126ec:	2f fd       	sub	sp,-4
800126ee:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800126f2:	00 00       	add	r0,r0
800126f4:	80 01       	ld.sh	r1,r0[0x0]
800126f6:	23 5c       	sub	r12,53

800126f8 <run_barometer>:
uint32_t last_baro_update;
task_return_t run_barometer()
{
800126f8:	eb cd 40 c0 	pushm	r6-r7,lr
800126fc:	1a 97       	mov	r7,sp
800126fe:	20 3d       	sub	sp,12
80012700:	4a d6       	lddpc	r6,800127b4 <run_barometer+0xbc>
80012702:	1e 26       	rsub	r6,pc
	uint32_t tnow = get_micros();
80012704:	f0 16 00 27 	mcall	r6[156]
80012708:	18 98       	mov	r8,r12
8001270a:	ef 48 ff f4 	st.w	r7[-12],r8
	central_data_t *central_data=get_central_data();
8001270e:	f0 16 00 32 	mcall	r6[200]
80012712:	18 98       	mov	r8,r12
80012714:	ef 48 ff f8 	st.w	r7[-8],r8
	
	pressure_data *pressure= get_pressure_data_slow(centralData->pressure.altitude_offset);
80012718:	ec f8 00 00 	ld.w	r8,r6[0]
8001271c:	70 08       	ld.w	r8,r8[0x0]
8001271e:	f0 f8 10 e4 	ld.w	r8,r8[4324]
80012722:	10 9c       	mov	r12,r8
80012724:	f0 16 01 b3 	mcall	r6[1740]
80012728:	18 98       	mov	r8,r12
8001272a:	ef 48 ff fc 	st.w	r7[-4],r8
	if (central_data->simulation_mode==1) {
8001272e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80012732:	f0 f8 10 c0 	ld.w	r8,r8[4288]
80012736:	58 18       	cp.w	r8,1
80012738:	c0 b1       	brne	8001274e <run_barometer+0x56>
		simulate_barometer(&centralData->sim_model, pressure);
8001273a:	ec f8 00 00 	ld.w	r8,r6[0]
8001273e:	70 08       	ld.w	r8,r8[0x0]
80012740:	f0 c8 f4 58 	sub	r8,r8,-2984
80012744:	ee fb ff fc 	ld.w	r11,r7[-4]
80012748:	10 9c       	mov	r12,r8
8001274a:	f0 16 01 8c 	mcall	r6[1584]
	} 
	centralData->pressure=*pressure;
8001274e:	ec f8 00 00 	ld.w	r8,r6[0]
80012752:	70 08       	ld.w	r8,r8[0x0]
80012754:	ee f9 ff fc 	ld.w	r9,r7[-4]
80012758:	f0 c8 ef 3c 	sub	r8,r8,-4292
8001275c:	f0 ca 00 00 	sub	r10,r8,0
80012760:	f2 cb 00 00 	sub	r11,r9,0
80012764:	76 0c       	ld.w	r12,r11[0x0]
80012766:	95 0c       	st.w	r10[0x0],r12
80012768:	76 1c       	ld.w	r12,r11[0x4]
8001276a:	95 1c       	st.w	r10[0x4],r12
8001276c:	76 2c       	ld.w	r12,r11[0x8]
8001276e:	95 2c       	st.w	r10[0x8],r12
80012770:	76 3b       	ld.w	r11,r11[0xc]
80012772:	95 3b       	st.w	r10[0xc],r11
80012774:	f0 ca ff f0 	sub	r10,r8,-16
80012778:	f2 cb ff f0 	sub	r11,r9,-16
8001277c:	76 0c       	ld.w	r12,r11[0x0]
8001277e:	95 0c       	st.w	r10[0x0],r12
80012780:	76 1c       	ld.w	r12,r11[0x4]
80012782:	95 1c       	st.w	r10[0x4],r12
80012784:	76 2c       	ld.w	r12,r11[0x8]
80012786:	95 2c       	st.w	r10[0x8],r12
80012788:	76 3b       	ld.w	r11,r11[0xc]
8001278a:	95 3b       	st.w	r10[0xc],r11
8001278c:	f0 ca ff e0 	sub	r10,r8,-32
80012790:	f2 cb ff e0 	sub	r11,r9,-32
80012794:	76 0c       	ld.w	r12,r11[0x0]
80012796:	95 0c       	st.w	r10[0x0],r12
80012798:	76 1c       	ld.w	r12,r11[0x4]
8001279a:	95 1c       	st.w	r10[0x4],r12
8001279c:	76 2c       	ld.w	r12,r11[0x8]
8001279e:	95 2c       	st.w	r10[0x8],r12
800127a0:	76 3b       	ld.w	r11,r11[0xc]
800127a2:	95 3b       	st.w	r10[0xc],r11
800127a4:	f2 ea 00 30 	ld.d	r10,r9[48]
800127a8:	f0 eb 00 30 	st.d	r8[48],r10
	
}
800127ac:	2f dd       	sub	sp,-12
800127ae:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800127b2:	00 00       	add	r0,r0
800127b4:	80 01       	ld.sh	r1,r0[0x0]
800127b6:	25 86       	sub	r6,88

800127b8 <create_tasks>:


void create_tasks() {
800127b8:	eb cd 40 c0 	pushm	r6-r7,lr
800127bc:	1a 97       	mov	r7,sp
800127be:	4a 96       	lddpc	r6,80012860 <create_tasks+0xa8>
800127c0:	1e 26       	rsub	r6,pc
	
	init_scheduler(&main_tasks);
800127c2:	ec f8 01 28 	ld.w	r8,r6[296]
800127c6:	10 9c       	mov	r12,r8
800127c8:	f0 16 01 01 	mcall	r6[1028]
	
	centralData = get_central_data();
800127cc:	f0 16 00 32 	mcall	r6[200]
800127d0:	18 99       	mov	r9,r12
800127d2:	ec f8 00 00 	ld.w	r8,r6[0]
800127d6:	91 09       	st.w	r8[0x0],r9
	
	register_task(&main_tasks, 0, 4000, RUN_REGULAR, &run_stabilisation );
800127d8:	ec f8 08 48 	ld.w	r8,r6[2120]
800127dc:	ec fc 01 28 	ld.w	r12,r6[296]
800127e0:	30 29       	mov	r9,2
800127e2:	e0 6a 0f a0 	mov	r10,4000
800127e6:	30 0b       	mov	r11,0
800127e8:	f0 16 00 5a 	mcall	r6[360]
	
	register_task(&main_tasks, 1, 15000, RUN_REGULAR, &run_barometer);
800127ec:	ec f8 07 10 	ld.w	r8,r6[1808]
800127f0:	ec fc 01 28 	ld.w	r12,r6[296]
800127f4:	30 29       	mov	r9,2
800127f6:	e0 6a 3a 98 	mov	r10,15000
800127fa:	30 1b       	mov	r11,1
800127fc:	f0 16 00 5a 	mcall	r6[360]
	main_tasks.tasks[1].timing_mode=PERIODIC_RELATIVE;
80012800:	ec f8 01 28 	ld.w	r8,r6[296]
80012804:	30 19       	mov	r9,1
80012806:	f1 49 00 44 	st.w	r8[68],r9

	register_task(&main_tasks, 2, 100000, RUN_REGULAR, &gps_task);
8001280a:	ec f8 07 90 	ld.w	r8,r6[1936]
8001280e:	ec fc 01 28 	ld.w	r12,r6[296]
80012812:	30 29       	mov	r9,2
80012814:	e0 7a 86 a0 	mov	r10,100000
80012818:	30 2b       	mov	r11,2
8001281a:	f0 16 00 5a 	mcall	r6[360]
	//register_task(&main_tasks, 4, 4000, RUN_REGULAR, &run_estimator);
	//register_task(&main_tasks, , 100000, RUN_REGULAR, &read_radar);

	register_task(&main_tasks, 3, ORCA_TIME_STEP_MILLIS * 1000.0, RUN_REGULAR, &run_navigation_task);
8001281e:	ec f8 06 9c 	ld.w	r8,r6[1692]
80012822:	ec fc 01 28 	ld.w	r12,r6[296]
80012826:	30 29       	mov	r9,2
80012828:	e0 6a 27 10 	mov	r10,10000
8001282c:	30 3b       	mov	r11,3
8001282e:	f0 16 00 5a 	mcall	r6[360]

	register_task(&main_tasks, 4, 200000, RUN_REGULAR, &set_mav_mode_n_state);
80012832:	ec f8 06 ec 	ld.w	r8,r6[1772]
80012836:	ec fc 01 28 	ld.w	r12,r6[296]
8001283a:	30 29       	mov	r9,2
8001283c:	e2 7a 0d 40 	mov	r10,200000
80012840:	30 4b       	mov	r11,4
80012842:	f0 16 00 5a 	mcall	r6[360]
	

	register_task(&main_tasks, 5, 4000, RUN_REGULAR, &mavlink_protocol_update);
80012846:	ec f8 03 64 	ld.w	r8,r6[868]
8001284a:	ec fc 01 28 	ld.w	r12,r6[296]
8001284e:	30 29       	mov	r9,2
80012850:	e0 6a 0f a0 	mov	r10,4000
80012854:	30 5b       	mov	r11,5
80012856:	f0 16 00 5a 	mcall	r6[360]

8001285a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001285e:	00 00       	add	r0,r0
80012860:	80 01       	ld.sh	r1,r0[0x0]
80012862:	26 44       	sub	r4,100

80012864 <crc_accumulate>:
 *
 * @param data new char to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate(uint8_t data, uint16_t *crcAccum)
{
80012864:	eb cd 40 80 	pushm	r7,lr
80012868:	1a 97       	mov	r7,sp
8001286a:	20 3d       	sub	sp,12
8001286c:	18 98       	mov	r8,r12
8001286e:	ef 4b ff f4 	st.w	r7[-12],r11
80012872:	ef 68 ff f8 	st.b	r7[-8],r8
        /*Accumulate one byte of data into the CRC*/
        uint8_t tmp;

        tmp = data ^ (uint8_t)(*crcAccum &0xff);
80012876:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001287a:	90 08       	ld.sh	r8,r8[0x0]
8001287c:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80012880:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80012884:	f3 e8 20 08 	eor	r8,r9,r8
80012888:	ef 68 ff ff 	st.b	r7[-1],r8
        tmp ^= (tmp<<4);
8001288c:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80012890:	a5 68       	lsl	r8,0x4
80012892:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80012896:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8001289a:	f3 e8 20 08 	eor	r8,r9,r8
8001289e:	5c 58       	castu.b	r8
800128a0:	ef 68 ff ff 	st.b	r7[-1],r8
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
800128a4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800128a8:	90 08       	ld.sh	r8,r8[0x0]
800128aa:	5c 78       	castu.h	r8
800128ac:	a9 88       	lsr	r8,0x8
800128ae:	5c 88       	casts.h	r8
800128b0:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
800128b4:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800128b8:	a9 68       	lsl	r8,0x8
800128ba:	5c 88       	casts.h	r8
800128bc:	f3 e8 20 08 	eor	r8,r9,r8
800128c0:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
800128c4:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800128c8:	a3 78       	lsl	r8,0x3
800128ca:	5c 88       	casts.h	r8
800128cc:	f3 e8 20 08 	eor	r8,r9,r8
800128d0:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
800128d4:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800128d8:	a5 88       	lsr	r8,0x4
800128da:	5c 58       	castu.b	r8
800128dc:	f3 e8 20 08 	eor	r8,r9,r8
800128e0:	5c 88       	casts.h	r8
800128e2:	ee f9 ff f4 	ld.w	r9,r7[-12]
800128e6:	b2 08       	st.h	r9[0x0],r8
}
800128e8:	2f dd       	sub	sp,-12
800128ea:	e3 cd 80 80 	ldm	sp++,r7,pc

800128ee <crc_init>:
 * @brief Initiliaze the buffer for the X.25 CRC
 *
 * @param crcAccum the 16 bit X.25 CRC
 */
static inline void crc_init(uint16_t* crcAccum)
{
800128ee:	eb cd 40 80 	pushm	r7,lr
800128f2:	1a 97       	mov	r7,sp
800128f4:	20 1d       	sub	sp,4
800128f6:	ef 4c ff fc 	st.w	r7[-4],r12
        *crcAccum = X25_INIT_CRC;
800128fa:	ee f9 ff fc 	ld.w	r9,r7[-4]
800128fe:	3f f8       	mov	r8,-1
80012900:	b2 08       	st.h	r9[0x0],r8
}
80012902:	2f fd       	sub	sp,-4
80012904:	e3 cd 80 80 	ldm	sp++,r7,pc

80012908 <mavlink_get_channel_status>:
/*
 * Internal function to give access to the channel status for each channel
 */
#ifndef MAVLINK_GET_CHANNEL_STATUS
MAVLINK_HELPER mavlink_status_t* mavlink_get_channel_status(uint8_t chan)
{
80012908:	eb cd 40 c0 	pushm	r6-r7,lr
8001290c:	1a 97       	mov	r7,sp
8001290e:	20 1d       	sub	sp,4
80012910:	48 96       	lddpc	r6,80012934 <mavlink_get_channel_status+0x2c>
80012912:	1e 26       	rsub	r6,pc
80012914:	18 98       	mov	r8,r12
80012916:	ef 68 ff fc 	st.b	r7[-4],r8
	static mavlink_status_t m_mavlink_status[MAVLINK_COMM_NUM_BUFFERS];
	return &m_mavlink_status[chan];
8001291a:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8001291e:	f0 09 15 04 	lsl	r9,r8,0x4
80012922:	ec f8 08 d0 	ld.w	r8,r6[2256]
80012926:	f2 08 00 08 	add	r8,r9,r8
}
8001292a:	10 9c       	mov	r12,r8
8001292c:	2f fd       	sub	sp,-4
8001292e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80012932:	00 00       	add	r0,r0
80012934:	80 01       	ld.sh	r1,r0[0x0]
80012936:	27 96       	sub	r6,121

80012938 <mavlink_get_channel_buffer>:
/*
 * Internal function to give access to the channel buffer for each channel
 */
#ifndef MAVLINK_GET_CHANNEL_BUFFER
MAVLINK_HELPER mavlink_message_t* mavlink_get_channel_buffer(uint8_t chan)
{
80012938:	eb cd 40 c0 	pushm	r6-r7,lr
8001293c:	1a 97       	mov	r7,sp
8001293e:	20 1d       	sub	sp,4
80012940:	48 a6       	lddpc	r6,80012968 <mavlink_get_channel_buffer+0x30>
80012942:	1e 26       	rsub	r6,pc
80012944:	18 98       	mov	r8,r12
80012946:	ef 68 ff fc 	st.b	r7[-4],r8
#error ERROR: IF #define MAVLINK_EXTERNAL_RX_BUFFER IS SET, THE BUFFER HAS TO BE ALLOCATED OUTSIDE OF THIS FUNCTION (mavlink_message_t m_mavlink_buffer[MAVLINK_COMM_NUM_BUFFERS];)
#endif
#else
	static mavlink_message_t m_mavlink_buffer[MAVLINK_COMM_NUM_BUFFERS];
#endif
	return &m_mavlink_buffer[chan];
8001294a:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8001294e:	12 98       	mov	r8,r9
80012950:	a5 68       	lsl	r8,0x4
80012952:	12 08       	add	r8,r9
80012954:	a5 68       	lsl	r8,0x4
80012956:	10 99       	mov	r9,r8
80012958:	ec f8 08 cc 	ld.w	r8,r6[2252]
8001295c:	f2 08 00 08 	add	r8,r9,r8
}
80012960:	10 9c       	mov	r12,r8
80012962:	2f fd       	sub	sp,-4
80012964:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80012968:	80 01       	ld.sh	r1,r0[0x0]
8001296a:	27 c6       	sub	r6,124

8001296c <mavlink_start_checksum>:
	int32_t int32;
};


MAVLINK_HELPER void mavlink_start_checksum(mavlink_message_t* msg)
{
8001296c:	eb cd 40 c0 	pushm	r6-r7,lr
80012970:	1a 97       	mov	r7,sp
80012972:	20 1d       	sub	sp,4
80012974:	48 66       	lddpc	r6,8001298c <mavlink_start_checksum+0x20>
80012976:	1e 26       	rsub	r6,pc
80012978:	ef 4c ff fc 	st.w	r7[-4],r12
	crc_init(&msg->checksum);
8001297c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80012980:	10 9c       	mov	r12,r8
80012982:	cb 6f       	rcall	800128ee <crc_init>
}
80012984:	2f fd       	sub	sp,-4
80012986:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001298a:	00 00       	add	r0,r0
8001298c:	80 01       	ld.sh	r1,r0[0x0]
8001298e:	27 fa       	sub	r10,127

80012990 <mavlink_update_checksum>:

MAVLINK_HELPER void mavlink_update_checksum(mavlink_message_t* msg, uint8_t c)
{
80012990:	eb cd 40 c0 	pushm	r6-r7,lr
80012994:	1a 97       	mov	r7,sp
80012996:	20 2d       	sub	sp,8
80012998:	48 96       	lddpc	r6,800129bc <mavlink_update_checksum+0x2c>
8001299a:	1e 26       	rsub	r6,pc
8001299c:	ef 4c ff fc 	st.w	r7[-4],r12
800129a0:	16 98       	mov	r8,r11
800129a2:	ef 68 ff f8 	st.b	r7[-8],r8
	crc_accumulate(c, &msg->checksum);
800129a6:	ee f9 ff fc 	ld.w	r9,r7[-4]
800129aa:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800129ae:	12 9b       	mov	r11,r9
800129b0:	10 9c       	mov	r12,r8
800129b2:	c5 9f       	rcall	80012864 <crc_accumulate>
}
800129b4:	2f ed       	sub	sp,-8
800129b6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800129ba:	00 00       	add	r0,r0
800129bc:	80 01       	ld.sh	r1,r0[0x0]
800129be:	28 1e       	sub	lr,-127

800129c0 <mavlink_parse_char>:
 *
 *
 * @endcode
 */
MAVLINK_HELPER uint8_t mavlink_parse_char(uint8_t chan, uint8_t c, mavlink_message_t* r_message, mavlink_status_t* r_mavlink_status)
{
800129c0:	eb cd 40 c0 	pushm	r6-r7,lr
800129c4:	1a 97       	mov	r7,sp
800129c6:	20 7d       	sub	sp,28
800129c8:	fe f6 03 b8 	ld.w	r6,pc[952]
800129cc:	1e 26       	rsub	r6,pc
800129ce:	16 98       	mov	r8,r11
800129d0:	ef 4a ff e8 	st.w	r7[-24],r10
800129d4:	ef 49 ff e4 	st.w	r7[-28],r9
800129d8:	18 99       	mov	r9,r12
800129da:	ef 69 ff f0 	st.b	r7[-16],r9
800129de:	ef 68 ff ec 	st.b	r7[-20],r8
	static const uint8_t mavlink_message_lengths[256] = MAVLINK_MESSAGE_LENGTHS;
#define MAVLINK_MESSAGE_LENGTH(msgid) mavlink_message_lengths[msgid]
#endif
#endif

	mavlink_message_t* rxmsg = mavlink_get_channel_buffer(chan); ///< The currently decoded message
800129e2:	ef 38 ff f0 	ld.ub	r8,r7[-16]
800129e6:	10 9c       	mov	r12,r8
800129e8:	ca 8f       	rcall	80012938 <mavlink_get_channel_buffer>
800129ea:	18 98       	mov	r8,r12
800129ec:	ef 48 ff f4 	st.w	r7[-12],r8
	mavlink_status_t* status = mavlink_get_channel_status(chan); ///< The current decode status
800129f0:	ef 38 ff f0 	ld.ub	r8,r7[-16]
800129f4:	10 9c       	mov	r12,r8
800129f6:	c8 9f       	rcall	80012908 <mavlink_get_channel_status>
800129f8:	18 98       	mov	r8,r12
800129fa:	ef 48 ff f8 	st.w	r7[-8],r8
	int bufferIndex = 0;
800129fe:	30 08       	mov	r8,0
80012a00:	ef 48 ff fc 	st.w	r7[-4],r8

	status->msg_received = 0;
80012a04:	ee f9 ff f8 	ld.w	r9,r7[-8]
80012a08:	30 08       	mov	r8,0
80012a0a:	b2 88       	st.b	r9[0x0],r8

	switch (status->parse_state)
80012a0c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80012a10:	70 18       	ld.w	r8,r8[0x4]
80012a12:	58 98       	cp.w	r8,9
80012a14:	e0 8b 01 70 	brhi	80012cf4 <mavlink_parse_char+0x334>
80012a18:	fe c9 ff f8 	sub	r9,pc,-8
80012a1c:	f2 08 00 2f 	add	pc,r9,r8<<0x2
80012a20:	e0 8f 00 14 	bral	80012a48 <mavlink_parse_char+0x88>
80012a24:	e0 8f 00 12 	bral	80012a48 <mavlink_parse_char+0x88>
80012a28:	e0 8f 00 28 	bral	80012a78 <mavlink_parse_char+0xb8>
80012a2c:	e0 8f 00 69 	bral	80012afe <mavlink_parse_char+0x13e>
80012a30:	e0 8f 00 57 	bral	80012ade <mavlink_parse_char+0x11e>
80012a34:	e0 8f 00 75 	bral	80012b1e <mavlink_parse_char+0x15e>
80012a38:	e0 8f 00 83 	bral	80012b3e <mavlink_parse_char+0x17e>
80012a3c:	e0 8f 00 9b 	bral	80012b72 <mavlink_parse_char+0x1b2>
80012a40:	e0 8f 00 c2 	bral	80012bc4 <mavlink_parse_char+0x204>
80012a44:	e0 8f 01 08 	bral	80012c54 <mavlink_parse_char+0x294>
	{
	case MAVLINK_PARSE_STATE_UNINIT:
	case MAVLINK_PARSE_STATE_IDLE:
		if (c == MAVLINK_STX)
80012a48:	ef 39 ff ec 	ld.ub	r9,r7[-20]
80012a4c:	3f e8       	mov	r8,-2
80012a4e:	f0 09 18 00 	cp.b	r9,r8
80012a52:	e0 81 01 4c 	brne	80012cea <mavlink_parse_char+0x32a>
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
80012a56:	ee f8 ff f8 	ld.w	r8,r7[-8]
80012a5a:	30 29       	mov	r9,2
80012a5c:	91 19       	st.w	r8[0x4],r9
			rxmsg->len = 0;
80012a5e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80012a62:	30 08       	mov	r8,0
80012a64:	b2 b8       	st.b	r9[0x3],r8
			rxmsg->magic = c;
80012a66:	ee f9 ff f4 	ld.w	r9,r7[-12]
80012a6a:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80012a6e:	b2 a8       	st.b	r9[0x2],r8
			mavlink_start_checksum(rxmsg);
80012a70:	ee fc ff f4 	ld.w	r12,r7[-12]
80012a74:	c7 cf       	rcall	8001296c <mavlink_start_checksum>
		}
		break;
80012a76:	c3 f9       	rjmp	80012cf4 <mavlink_parse_char+0x334>

	case MAVLINK_PARSE_STATE_GOT_STX:
			if (status->msg_received 
80012a78:	ee f8 ff f8 	ld.w	r8,r7[-8]
80012a7c:	11 88       	ld.ub	r8,r8[0x0]
80012a7e:	58 08       	cp.w	r8,0
80012a80:	c1 a0       	breq	80012ab4 <mavlink_parse_char+0xf4>
#if (MAVLINK_MAX_PAYLOAD_LEN < 255)
				|| c > MAVLINK_MAX_PAYLOAD_LEN
#endif
				)
		{
			status->buffer_overrun++;
80012a82:	ee f8 ff f8 	ld.w	r8,r7[-8]
80012a86:	11 98       	ld.ub	r8,r8[0x1]
80012a88:	2f f8       	sub	r8,-1
80012a8a:	5c 58       	castu.b	r8
80012a8c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80012a90:	b2 98       	st.b	r9[0x1],r8
			status->parse_error++;
80012a92:	ee f8 ff f8 	ld.w	r8,r7[-8]
80012a96:	11 a8       	ld.ub	r8,r8[0x2]
80012a98:	2f f8       	sub	r8,-1
80012a9a:	5c 58       	castu.b	r8
80012a9c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80012aa0:	b2 a8       	st.b	r9[0x2],r8
			status->msg_received = 0;
80012aa2:	ee f9 ff f8 	ld.w	r9,r7[-8]
80012aa6:	30 08       	mov	r8,0
80012aa8:	b2 88       	st.b	r9[0x0],r8
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
80012aaa:	ee f8 ff f8 	ld.w	r8,r7[-8]
80012aae:	30 19       	mov	r9,1
80012ab0:	91 19       	st.w	r8[0x4],r9
			rxmsg->len = c;
			status->packet_idx = 0;
			mavlink_update_checksum(rxmsg, c);
			status->parse_state = MAVLINK_PARSE_STATE_GOT_LENGTH;
		}
		break;
80012ab2:	c2 19       	rjmp	80012cf4 <mavlink_parse_char+0x334>
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
		}
		else
		{
			// NOT counting STX, LENGTH, SEQ, SYSID, COMPID, MSGID, CRC1 and CRC2
			rxmsg->len = c;
80012ab4:	ee f9 ff f4 	ld.w	r9,r7[-12]
80012ab8:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80012abc:	b2 b8       	st.b	r9[0x3],r8
			status->packet_idx = 0;
80012abe:	ee f9 ff f8 	ld.w	r9,r7[-8]
80012ac2:	30 08       	mov	r8,0
80012ac4:	f3 68 00 08 	st.b	r9[8],r8
			mavlink_update_checksum(rxmsg, c);
80012ac8:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80012acc:	10 9b       	mov	r11,r8
80012ace:	ee fc ff f4 	ld.w	r12,r7[-12]
80012ad2:	c5 ff       	rcall	80012990 <mavlink_update_checksum>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_LENGTH;
80012ad4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80012ad8:	30 49       	mov	r9,4
80012ada:	91 19       	st.w	r8[0x4],r9
		}
		break;
80012adc:	c0 c9       	rjmp	80012cf4 <mavlink_parse_char+0x334>

	case MAVLINK_PARSE_STATE_GOT_LENGTH:
		rxmsg->seq = c;
80012ade:	ee f9 ff f4 	ld.w	r9,r7[-12]
80012ae2:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80012ae6:	b2 c8       	st.b	r9[0x4],r8
		mavlink_update_checksum(rxmsg, c);
80012ae8:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80012aec:	10 9b       	mov	r11,r8
80012aee:	ee fc ff f4 	ld.w	r12,r7[-12]
80012af2:	c4 ff       	rcall	80012990 <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_SEQ;
80012af4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80012af8:	30 39       	mov	r9,3
80012afa:	91 19       	st.w	r8[0x4],r9
		break;
80012afc:	cf c8       	rjmp	80012cf4 <mavlink_parse_char+0x334>

	case MAVLINK_PARSE_STATE_GOT_SEQ:
		rxmsg->sysid = c;
80012afe:	ee f9 ff f4 	ld.w	r9,r7[-12]
80012b02:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80012b06:	b2 d8       	st.b	r9[0x5],r8
		mavlink_update_checksum(rxmsg, c);
80012b08:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80012b0c:	10 9b       	mov	r11,r8
80012b0e:	ee fc ff f4 	ld.w	r12,r7[-12]
80012b12:	c3 ff       	rcall	80012990 <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_SYSID;
80012b14:	ee f8 ff f8 	ld.w	r8,r7[-8]
80012b18:	30 59       	mov	r9,5
80012b1a:	91 19       	st.w	r8[0x4],r9
		break;
80012b1c:	ce c8       	rjmp	80012cf4 <mavlink_parse_char+0x334>

	case MAVLINK_PARSE_STATE_GOT_SYSID:
		rxmsg->compid = c;
80012b1e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80012b22:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80012b26:	b2 e8       	st.b	r9[0x6],r8
		mavlink_update_checksum(rxmsg, c);
80012b28:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80012b2c:	10 9b       	mov	r11,r8
80012b2e:	ee fc ff f4 	ld.w	r12,r7[-12]
80012b32:	c2 ff       	rcall	80012990 <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPID;
80012b34:	ee f8 ff f8 	ld.w	r8,r7[-8]
80012b38:	30 69       	mov	r9,6
80012b3a:	91 19       	st.w	r8[0x4],r9
		break;
80012b3c:	cd c8       	rjmp	80012cf4 <mavlink_parse_char+0x334>
				status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
				mavlink_start_checksum(rxmsg);
			}
	        }
#endif
		rxmsg->msgid = c;
80012b3e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80012b42:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80012b46:	b2 f8       	st.b	r9[0x7],r8
		mavlink_update_checksum(rxmsg, c);
80012b48:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80012b4c:	10 9b       	mov	r11,r8
80012b4e:	ee fc ff f4 	ld.w	r12,r7[-12]
80012b52:	c1 ff       	rcall	80012990 <mavlink_update_checksum>
		if (rxmsg->len == 0)
80012b54:	ee f8 ff f4 	ld.w	r8,r7[-12]
80012b58:	11 b8       	ld.ub	r8,r8[0x3]
80012b5a:	58 08       	cp.w	r8,0
80012b5c:	c0 61       	brne	80012b68 <mavlink_parse_char+0x1a8>
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
80012b5e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80012b62:	30 89       	mov	r9,8
80012b64:	91 19       	st.w	r8[0x4],r9
		}
		else
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID;
		}
		break;
80012b66:	cc 78       	rjmp	80012cf4 <mavlink_parse_char+0x334>
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
		}
		else
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID;
80012b68:	ee f8 ff f8 	ld.w	r8,r7[-8]
80012b6c:	30 79       	mov	r9,7
80012b6e:	91 19       	st.w	r8[0x4],r9
		}
		break;
80012b70:	cc 28       	rjmp	80012cf4 <mavlink_parse_char+0x334>

	case MAVLINK_PARSE_STATE_GOT_MSGID:
		_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx++] = (char)c;
80012b72:	ee f8 ff f4 	ld.w	r8,r7[-12]
80012b76:	2f 88       	sub	r8,-8
80012b78:	10 9a       	mov	r10,r8
80012b7a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80012b7e:	f1 38 00 08 	ld.ub	r8,r8[8]
80012b82:	10 99       	mov	r9,r8
80012b84:	12 0a       	add	r10,r9
80012b86:	ef 39 ff ec 	ld.ub	r9,r7[-20]
80012b8a:	b4 89       	st.b	r10[0x0],r9
80012b8c:	2f f8       	sub	r8,-1
80012b8e:	5c 58       	castu.b	r8
80012b90:	ee f9 ff f8 	ld.w	r9,r7[-8]
80012b94:	f3 68 00 08 	st.b	r9[8],r8
		mavlink_update_checksum(rxmsg, c);
80012b98:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80012b9c:	10 9b       	mov	r11,r8
80012b9e:	ee fc ff f4 	ld.w	r12,r7[-12]
80012ba2:	cf 7e       	rcall	80012990 <mavlink_update_checksum>
		if (status->packet_idx == rxmsg->len)
80012ba4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80012ba8:	f1 39 00 08 	ld.ub	r9,r8[8]
80012bac:	ee f8 ff f4 	ld.w	r8,r7[-12]
80012bb0:	11 b8       	ld.ub	r8,r8[0x3]
80012bb2:	f0 09 18 00 	cp.b	r9,r8
80012bb6:	e0 81 00 9c 	brne	80012cee <mavlink_parse_char+0x32e>
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
80012bba:	ee f8 ff f8 	ld.w	r8,r7[-8]
80012bbe:	30 89       	mov	r9,8
80012bc0:	91 19       	st.w	r8[0x4],r9
		}
		break;
80012bc2:	c9 98       	rjmp	80012cf4 <mavlink_parse_char+0x334>

	case MAVLINK_PARSE_STATE_GOT_PAYLOAD:
#if MAVLINK_CRC_EXTRA
		mavlink_update_checksum(rxmsg, MAVLINK_MESSAGE_CRC(rxmsg->msgid));
80012bc4:	ee f8 ff f4 	ld.w	r8,r7[-12]
80012bc8:	11 f8       	ld.ub	r8,r8[0x7]
80012bca:	ec f9 08 c8 	ld.w	r9,r6[2248]
80012bce:	f2 08 07 08 	ld.ub	r8,r9[r8]
80012bd2:	10 9b       	mov	r11,r8
80012bd4:	ee fc ff f4 	ld.w	r12,r7[-12]
80012bd8:	cd ce       	rcall	80012990 <mavlink_update_checksum>
#endif
		if (c != (rxmsg->checksum & 0xFF)) {
80012bda:	ef 39 ff ec 	ld.ub	r9,r7[-20]
80012bde:	ee f8 ff f4 	ld.w	r8,r7[-12]
80012be2:	90 08       	ld.sh	r8,r8[0x0]
80012be4:	5c 78       	castu.h	r8
80012be6:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
80012bea:	10 39       	cp.w	r9,r8
80012bec:	c2 30       	breq	80012c32 <mavlink_parse_char+0x272>
			// Check first checksum byte
			status->parse_error++;
80012bee:	ee f8 ff f8 	ld.w	r8,r7[-8]
80012bf2:	11 a8       	ld.ub	r8,r8[0x2]
80012bf4:	2f f8       	sub	r8,-1
80012bf6:	5c 58       	castu.b	r8
80012bf8:	ee f9 ff f8 	ld.w	r9,r7[-8]
80012bfc:	b2 a8       	st.b	r9[0x2],r8
			status->msg_received = 0;
80012bfe:	ee f9 ff f8 	ld.w	r9,r7[-8]
80012c02:	30 08       	mov	r8,0
80012c04:	b2 88       	st.b	r9[0x0],r8
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
80012c06:	ee f8 ff f8 	ld.w	r8,r7[-8]
80012c0a:	30 19       	mov	r9,1
80012c0c:	91 19       	st.w	r8[0x4],r9
			if (c == MAVLINK_STX)
80012c0e:	ef 39 ff ec 	ld.ub	r9,r7[-20]
80012c12:	3f e8       	mov	r8,-2
80012c14:	f0 09 18 00 	cp.b	r9,r8
80012c18:	c6 d1       	brne	80012cf2 <mavlink_parse_char+0x332>
			{
				status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
80012c1a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80012c1e:	30 29       	mov	r9,2
80012c20:	91 19       	st.w	r8[0x4],r9
				rxmsg->len = 0;
80012c22:	ee f9 ff f4 	ld.w	r9,r7[-12]
80012c26:	30 08       	mov	r8,0
80012c28:	b2 b8       	st.b	r9[0x3],r8
				mavlink_start_checksum(rxmsg);
80012c2a:	ee fc ff f4 	ld.w	r12,r7[-12]
80012c2e:	c9 fe       	rcall	8001296c <mavlink_start_checksum>
		else
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_CRC1;
			_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx] = (char)c;
		}
		break;
80012c30:	c6 28       	rjmp	80012cf4 <mavlink_parse_char+0x334>
				mavlink_start_checksum(rxmsg);
			}
		}
		else
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_CRC1;
80012c32:	ee f8 ff f8 	ld.w	r8,r7[-8]
80012c36:	30 99       	mov	r9,9
80012c38:	91 19       	st.w	r8[0x4],r9
			_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx] = (char)c;
80012c3a:	ee f8 ff f4 	ld.w	r8,r7[-12]
80012c3e:	2f 88       	sub	r8,-8
80012c40:	10 99       	mov	r9,r8
80012c42:	ee f8 ff f8 	ld.w	r8,r7[-8]
80012c46:	f1 38 00 08 	ld.ub	r8,r8[8]
80012c4a:	10 09       	add	r9,r8
80012c4c:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80012c50:	b2 88       	st.b	r9[0x0],r8
		}
		break;
80012c52:	c5 18       	rjmp	80012cf4 <mavlink_parse_char+0x334>

	case MAVLINK_PARSE_STATE_GOT_CRC1:
		if (c != (rxmsg->checksum >> 8)) {
80012c54:	ef 39 ff ec 	ld.ub	r9,r7[-20]
80012c58:	ee f8 ff f4 	ld.w	r8,r7[-12]
80012c5c:	90 08       	ld.sh	r8,r8[0x0]
80012c5e:	5c 78       	castu.h	r8
80012c60:	a9 88       	lsr	r8,0x8
80012c62:	5c 88       	casts.h	r8
80012c64:	f0 09 19 00 	cp.h	r9,r8
80012c68:	c2 30       	breq	80012cae <mavlink_parse_char+0x2ee>
			// Check second checksum byte
			status->parse_error++;
80012c6a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80012c6e:	11 a8       	ld.ub	r8,r8[0x2]
80012c70:	2f f8       	sub	r8,-1
80012c72:	5c 58       	castu.b	r8
80012c74:	ee f9 ff f8 	ld.w	r9,r7[-8]
80012c78:	b2 a8       	st.b	r9[0x2],r8
			status->msg_received = 0;
80012c7a:	ee f9 ff f8 	ld.w	r9,r7[-8]
80012c7e:	30 08       	mov	r8,0
80012c80:	b2 88       	st.b	r9[0x0],r8
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
80012c82:	ee f8 ff f8 	ld.w	r8,r7[-8]
80012c86:	30 19       	mov	r9,1
80012c88:	91 19       	st.w	r8[0x4],r9
			if (c == MAVLINK_STX)
80012c8a:	ef 39 ff ec 	ld.ub	r9,r7[-20]
80012c8e:	3f e8       	mov	r8,-2
80012c90:	f0 09 18 00 	cp.b	r9,r8
80012c94:	c3 01       	brne	80012cf4 <mavlink_parse_char+0x334>
			{
				status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
80012c96:	ee f8 ff f8 	ld.w	r8,r7[-8]
80012c9a:	30 29       	mov	r9,2
80012c9c:	91 19       	st.w	r8[0x4],r9
				rxmsg->len = 0;
80012c9e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80012ca2:	30 08       	mov	r8,0
80012ca4:	b2 b8       	st.b	r9[0x3],r8
				mavlink_start_checksum(rxmsg);
80012ca6:	ee fc ff f4 	ld.w	r12,r7[-12]
80012caa:	c6 1e       	rcall	8001296c <mavlink_start_checksum>
80012cac:	c2 48       	rjmp	80012cf4 <mavlink_parse_char+0x334>
			}
		}
		else
		{
			// Successfully got message
			status->msg_received = 1;
80012cae:	ee f9 ff f8 	ld.w	r9,r7[-8]
80012cb2:	30 18       	mov	r8,1
80012cb4:	b2 88       	st.b	r9[0x0],r8
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
80012cb6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80012cba:	30 19       	mov	r9,1
80012cbc:	91 19       	st.w	r8[0x4],r9
			_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx+1] = (char)c;
80012cbe:	ee f8 ff f4 	ld.w	r8,r7[-12]
80012cc2:	2f 88       	sub	r8,-8
80012cc4:	10 99       	mov	r9,r8
80012cc6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80012cca:	f1 38 00 08 	ld.ub	r8,r8[8]
80012cce:	2f f8       	sub	r8,-1
80012cd0:	10 09       	add	r9,r8
80012cd2:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80012cd6:	b2 88       	st.b	r9[0x0],r8
			memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
80012cd8:	e0 6a 01 10 	mov	r10,272
80012cdc:	ee fb ff f4 	ld.w	r11,r7[-12]
80012ce0:	ee fc ff e8 	ld.w	r12,r7[-24]
80012ce4:	f0 16 00 20 	mcall	r6[128]
80012ce8:	c0 68       	rjmp	80012cf4 <mavlink_parse_char+0x334>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
			rxmsg->len = 0;
			rxmsg->magic = c;
			mavlink_start_checksum(rxmsg);
		}
		break;
80012cea:	d7 03       	nop
80012cec:	c0 48       	rjmp	80012cf4 <mavlink_parse_char+0x334>
		mavlink_update_checksum(rxmsg, c);
		if (status->packet_idx == rxmsg->len)
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
		}
		break;
80012cee:	d7 03       	nop
80012cf0:	c0 28       	rjmp	80012cf4 <mavlink_parse_char+0x334>
		else
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_CRC1;
			_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx] = (char)c;
		}
		break;
80012cf2:	d7 03       	nop
			memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
		}
		break;
	}

	bufferIndex++;
80012cf4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80012cf8:	2f f8       	sub	r8,-1
80012cfa:	ef 48 ff fc 	st.w	r7[-4],r8
	// If a message has been sucessfully decoded, check index
	if (status->msg_received == 1)
80012cfe:	ee f8 ff f8 	ld.w	r8,r7[-8]
80012d02:	11 89       	ld.ub	r9,r8[0x0]
80012d04:	30 18       	mov	r8,1
80012d06:	f0 09 18 00 	cp.b	r9,r8
80012d0a:	c1 91       	brne	80012d3c <mavlink_parse_char+0x37c>
		//while(status->current_seq != rxmsg->seq)
		//{
		//	status->packet_rx_drop_count++;
		//               status->current_seq++;
		//}
		status->current_rx_seq = rxmsg->seq;
80012d0c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80012d10:	11 c8       	ld.ub	r8,r8[0x4]
80012d12:	ee f9 ff f8 	ld.w	r9,r7[-8]
80012d16:	f3 68 00 09 	st.b	r9[9],r8
		// Initial condition: If no packet has been received so far, drop count is undefined
		if (status->packet_rx_success_count == 0) status->packet_rx_drop_count = 0;
80012d1a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80012d1e:	90 68       	ld.sh	r8,r8[0xc]
80012d20:	58 08       	cp.w	r8,0
80012d22:	c0 51       	brne	80012d2c <mavlink_parse_char+0x36c>
80012d24:	ee f9 ff f8 	ld.w	r9,r7[-8]
80012d28:	30 08       	mov	r8,0
80012d2a:	b2 78       	st.h	r9[0xe],r8
		// Count this packet as received
		status->packet_rx_success_count++;
80012d2c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80012d30:	90 68       	ld.sh	r8,r8[0xc]
80012d32:	2f f8       	sub	r8,-1
80012d34:	5c 88       	casts.h	r8
80012d36:	ee f9 ff f8 	ld.w	r9,r7[-8]
80012d3a:	b2 68       	st.h	r9[0xc],r8
	}

	r_mavlink_status->current_rx_seq = status->current_rx_seq+1;
80012d3c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80012d40:	f1 38 00 09 	ld.ub	r8,r8[9]
80012d44:	2f f8       	sub	r8,-1
80012d46:	5c 58       	castu.b	r8
80012d48:	ee f9 ff e4 	ld.w	r9,r7[-28]
80012d4c:	f3 68 00 09 	st.b	r9[9],r8
	r_mavlink_status->packet_rx_success_count = status->packet_rx_success_count;
80012d50:	ee f8 ff f8 	ld.w	r8,r7[-8]
80012d54:	90 68       	ld.sh	r8,r8[0xc]
80012d56:	ee f9 ff e4 	ld.w	r9,r7[-28]
80012d5a:	b2 68       	st.h	r9[0xc],r8
	r_mavlink_status->packet_rx_drop_count = status->parse_error;
80012d5c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80012d60:	11 a8       	ld.ub	r8,r8[0x2]
80012d62:	ee f9 ff e4 	ld.w	r9,r7[-28]
80012d66:	b2 78       	st.h	r9[0xe],r8
	status->parse_error = 0;
80012d68:	ee f9 ff f8 	ld.w	r9,r7[-8]
80012d6c:	30 08       	mov	r8,0
80012d6e:	b2 a8       	st.b	r9[0x2],r8
	return status->msg_received;
80012d70:	ee f8 ff f8 	ld.w	r8,r7[-8]
80012d74:	11 88       	ld.ub	r8,r8[0x0]
}
80012d76:	10 9c       	mov	r12,r8
80012d78:	2f 9d       	sub	sp,-28
80012d7a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80012d7e:	00 00       	add	r0,r0
80012d80:	80 01       	ld.sh	r1,r0[0x0]
80012d82:	28 50       	sub	r0,-123

80012d84 <byte_swap_2>:
	return msg->len + MAVLINK_NUM_NON_PAYLOAD_BYTES;
}

#if MAVLINK_NEED_BYTE_SWAP
static inline void byte_swap_2(char *dst, const char *src)
{
80012d84:	eb cd 40 80 	pushm	r7,lr
80012d88:	1a 97       	mov	r7,sp
80012d8a:	20 2d       	sub	sp,8
80012d8c:	ef 4c ff fc 	st.w	r7[-4],r12
80012d90:	ef 4b ff f8 	st.w	r7[-8],r11
	dst[0] = src[1];
80012d94:	ee f8 ff f8 	ld.w	r8,r7[-8]
80012d98:	2f f8       	sub	r8,-1
80012d9a:	11 88       	ld.ub	r8,r8[0x0]
80012d9c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80012da0:	b2 88       	st.b	r9[0x0],r8
	dst[1] = src[0];
80012da2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80012da6:	f0 c9 ff ff 	sub	r9,r8,-1
80012daa:	ee f8 ff f8 	ld.w	r8,r7[-8]
80012dae:	11 88       	ld.ub	r8,r8[0x0]
80012db0:	b2 88       	st.b	r9[0x0],r8
}
80012db2:	2f ed       	sub	sp,-8
80012db4:	e3 cd 80 80 	ldm	sp++,r7,pc

80012db8 <mav_array_memcpy>:

/*
  like memcpy(), but if src is NULL, do a memset to zero
*/
static void mav_array_memcpy(void *dest, const void *src, size_t n)
{
80012db8:	eb cd 40 c0 	pushm	r6-r7,lr
80012dbc:	1a 97       	mov	r7,sp
80012dbe:	20 3d       	sub	sp,12
80012dc0:	49 06       	lddpc	r6,80012e00 <mav_array_memcpy+0x48>
80012dc2:	1e 26       	rsub	r6,pc
80012dc4:	ef 4c ff fc 	st.w	r7[-4],r12
80012dc8:	ef 4b ff f8 	st.w	r7[-8],r11
80012dcc:	ef 4a ff f4 	st.w	r7[-12],r10
	if (src == NULL) {
80012dd0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80012dd4:	58 08       	cp.w	r8,0
80012dd6:	c0 91       	brne	80012de8 <mav_array_memcpy+0x30>
		memset(dest, 0, n);
80012dd8:	ee fa ff f4 	ld.w	r10,r7[-12]
80012ddc:	30 0b       	mov	r11,0
80012dde:	ee fc ff fc 	ld.w	r12,r7[-4]
80012de2:	f0 16 00 30 	mcall	r6[192]
80012de6:	c0 98       	rjmp	80012df8 <mav_array_memcpy+0x40>
	} else {
		memcpy(dest, src, n);
80012de8:	ee fa ff f4 	ld.w	r10,r7[-12]
80012dec:	ee fb ff f8 	ld.w	r11,r7[-8]
80012df0:	ee fc ff fc 	ld.w	r12,r7[-4]
80012df4:	f0 16 00 20 	mcall	r6[128]
	}
}
80012df8:	2f dd       	sub	sp,-12
80012dfa:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80012dfe:	00 00       	add	r0,r0
80012e00:	80 01       	ld.sh	r1,r0[0x0]
80012e02:	2c 46       	sub	r6,-60

80012e04 <_MAV_RETURN_uint16_t>:
#if MAVLINK_NEED_BYTE_SWAP
#define _MAV_MSG_RETURN_TYPE(TYPE, SIZE) \
static inline TYPE _MAV_RETURN_## TYPE(const mavlink_message_t *msg, uint8_t ofs) \
{ TYPE r; byte_swap_## SIZE((char*)&r, &_MAV_PAYLOAD(msg)[ofs]); return r; }

_MAV_MSG_RETURN_TYPE(uint16_t, 2)
80012e04:	eb cd 40 c0 	pushm	r6-r7,lr
80012e08:	1a 97       	mov	r7,sp
80012e0a:	20 3d       	sub	sp,12
80012e0c:	48 d6       	lddpc	r6,80012e40 <_MAV_RETURN_uint16_t+0x3c>
80012e0e:	1e 26       	rsub	r6,pc
80012e10:	ef 4c ff f8 	st.w	r7[-8],r12
80012e14:	16 98       	mov	r8,r11
80012e16:	ef 68 ff f4 	st.b	r7[-12],r8
80012e1a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80012e1e:	2f 88       	sub	r8,-8
80012e20:	10 99       	mov	r9,r8
80012e22:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80012e26:	10 09       	add	r9,r8
80012e28:	ee c8 00 02 	sub	r8,r7,2
80012e2c:	12 9b       	mov	r11,r9
80012e2e:	10 9c       	mov	r12,r8
80012e30:	ca af       	rcall	80012d84 <byte_swap_2>
80012e32:	ef 08 ff fe 	ld.sh	r8,r7[-2]
80012e36:	10 9c       	mov	r12,r8
80012e38:	2f dd       	sub	sp,-12
80012e3a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80012e3e:	00 00       	add	r0,r0
80012e40:	80 01       	ld.sh	r1,r0[0x0]
80012e42:	2c 92       	sub	r2,-55

80012e44 <_MAV_RETURN_int16_t>:
_MAV_MSG_RETURN_TYPE(int16_t,  2)
80012e44:	eb cd 40 c0 	pushm	r6-r7,lr
80012e48:	1a 97       	mov	r7,sp
80012e4a:	20 3d       	sub	sp,12
80012e4c:	48 d6       	lddpc	r6,80012e80 <_MAV_RETURN_int16_t+0x3c>
80012e4e:	1e 26       	rsub	r6,pc
80012e50:	ef 4c ff f8 	st.w	r7[-8],r12
80012e54:	16 98       	mov	r8,r11
80012e56:	ef 68 ff f4 	st.b	r7[-12],r8
80012e5a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80012e5e:	2f 88       	sub	r8,-8
80012e60:	10 99       	mov	r9,r8
80012e62:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80012e66:	10 09       	add	r9,r8
80012e68:	ee c8 00 02 	sub	r8,r7,2
80012e6c:	12 9b       	mov	r11,r9
80012e6e:	10 9c       	mov	r12,r8
80012e70:	c8 af       	rcall	80012d84 <byte_swap_2>
80012e72:	ef 08 ff fe 	ld.sh	r8,r7[-2]
80012e76:	10 9c       	mov	r12,r8
80012e78:	2f dd       	sub	sp,-12
80012e7a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80012e7e:	00 00       	add	r0,r0
80012e80:	80 01       	ld.sh	r1,r0[0x0]
80012e82:	2c d2       	sub	r2,-51

80012e84 <_MAV_RETURN_char_array>:
_MAV_MSG_RETURN_TYPE(double)
#endif // MAVLINK_NEED_BYTE_SWAP

static inline uint16_t _MAV_RETURN_char_array(const mavlink_message_t *msg, char *value, 
						     uint8_t array_length, uint8_t wire_offset)
{
80012e84:	eb cd 40 c0 	pushm	r6-r7,lr
80012e88:	1a 97       	mov	r7,sp
80012e8a:	20 4d       	sub	sp,16
80012e8c:	49 16       	lddpc	r6,80012ed0 <_MAV_RETURN_char_array+0x4c>
80012e8e:	1e 26       	rsub	r6,pc
80012e90:	ef 4c ff fc 	st.w	r7[-4],r12
80012e94:	ef 4b ff f8 	st.w	r7[-8],r11
80012e98:	12 98       	mov	r8,r9
80012e9a:	14 99       	mov	r9,r10
80012e9c:	ef 69 ff f4 	st.b	r7[-12],r9
80012ea0:	ef 68 ff f0 	st.b	r7[-16],r8
	memcpy(value, &_MAV_PAYLOAD(msg)[wire_offset], array_length);
80012ea4:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80012ea8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80012eac:	f0 ca ff f8 	sub	r10,r8,-8
80012eb0:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80012eb4:	f4 08 00 08 	add	r8,r10,r8
80012eb8:	12 9a       	mov	r10,r9
80012eba:	10 9b       	mov	r11,r8
80012ebc:	ee fc ff f8 	ld.w	r12,r7[-8]
80012ec0:	f0 16 00 20 	mcall	r6[128]
	return array_length;
80012ec4:	ef 38 ff f4 	ld.ub	r8,r7[-12]
}
80012ec8:	10 9c       	mov	r12,r8
80012eca:	2f cd       	sub	sp,-16
80012ecc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80012ed0:	80 01       	ld.sh	r1,r0[0x0]
80012ed2:	2d 12       	sub	r2,-47

80012ed4 <mavlink_msg_param_request_read_get_target_system>:
 * @brief Get field target_system from param_request_read message
 *
 * @return System ID
 */
static inline uint8_t mavlink_msg_param_request_read_get_target_system(const mavlink_message_t* msg)
{
80012ed4:	eb cd 40 80 	pushm	r7,lr
80012ed8:	1a 97       	mov	r7,sp
80012eda:	20 1d       	sub	sp,4
80012edc:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  2);
80012ee0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80012ee4:	2f 88       	sub	r8,-8
80012ee6:	2f e8       	sub	r8,-2
80012ee8:	11 88       	ld.ub	r8,r8[0x0]
}
80012eea:	10 9c       	mov	r12,r8
80012eec:	2f fd       	sub	sp,-4
80012eee:	e3 cd 80 80 	ldm	sp++,r7,pc

80012ef2 <mavlink_msg_param_request_read_get_target_component>:
 * @brief Get field target_component from param_request_read message
 *
 * @return Component ID
 */
static inline uint8_t mavlink_msg_param_request_read_get_target_component(const mavlink_message_t* msg)
{
80012ef2:	eb cd 40 80 	pushm	r7,lr
80012ef6:	1a 97       	mov	r7,sp
80012ef8:	20 1d       	sub	sp,4
80012efa:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  3);
80012efe:	ee f8 ff fc 	ld.w	r8,r7[-4]
80012f02:	2f 88       	sub	r8,-8
80012f04:	2f d8       	sub	r8,-3
80012f06:	11 88       	ld.ub	r8,r8[0x0]
}
80012f08:	10 9c       	mov	r12,r8
80012f0a:	2f fd       	sub	sp,-4
80012f0c:	e3 cd 80 80 	ldm	sp++,r7,pc

80012f10 <mavlink_msg_param_request_read_get_param_id>:
 * @brief Get field param_id from param_request_read message
 *
 * @return Onboard parameter id, terminated by NULL if the length is less than 16 human-readable chars and WITHOUT null termination (NULL) byte if the length is exactly 16 chars - applications have to provide 16+1 bytes storage if the ID is stored as string
 */
static inline uint16_t mavlink_msg_param_request_read_get_param_id(const mavlink_message_t* msg, char *param_id)
{
80012f10:	eb cd 40 c0 	pushm	r6-r7,lr
80012f14:	1a 97       	mov	r7,sp
80012f16:	20 2d       	sub	sp,8
80012f18:	48 a6       	lddpc	r6,80012f40 <mavlink_msg_param_request_read_get_param_id+0x30>
80012f1a:	1e 26       	rsub	r6,pc
80012f1c:	ef 4c ff fc 	st.w	r7[-4],r12
80012f20:	ef 4b ff f8 	st.w	r7[-8],r11
	return _MAV_RETURN_char_array(msg, param_id, 16,  4);
80012f24:	30 49       	mov	r9,4
80012f26:	31 0a       	mov	r10,16
80012f28:	ee fb ff f8 	ld.w	r11,r7[-8]
80012f2c:	ee fc ff fc 	ld.w	r12,r7[-4]
80012f30:	ca af       	rcall	80012e84 <_MAV_RETURN_char_array>
80012f32:	18 98       	mov	r8,r12
80012f34:	5c 88       	casts.h	r8
80012f36:	5c 88       	casts.h	r8
}
80012f38:	10 9c       	mov	r12,r8
80012f3a:	2f ed       	sub	sp,-8
80012f3c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80012f40:	80 01       	ld.sh	r1,r0[0x0]
80012f42:	2d 9e       	sub	lr,-39

80012f44 <mavlink_msg_param_request_read_get_param_index>:
 * @brief Get field param_index from param_request_read message
 *
 * @return Parameter index. Send -1 to use the param ID field as identifier (else the param id will be ignored)
 */
static inline int16_t mavlink_msg_param_request_read_get_param_index(const mavlink_message_t* msg)
{
80012f44:	eb cd 40 c0 	pushm	r6-r7,lr
80012f48:	1a 97       	mov	r7,sp
80012f4a:	20 1d       	sub	sp,4
80012f4c:	48 76       	lddpc	r6,80012f68 <mavlink_msg_param_request_read_get_param_index+0x24>
80012f4e:	1e 26       	rsub	r6,pc
80012f50:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_int16_t(msg,  0);
80012f54:	30 0b       	mov	r11,0
80012f56:	ee fc ff fc 	ld.w	r12,r7[-4]
80012f5a:	c7 5f       	rcall	80012e44 <_MAV_RETURN_int16_t>
80012f5c:	18 98       	mov	r8,r12
}
80012f5e:	10 9c       	mov	r12,r8
80012f60:	2f fd       	sub	sp,-4
80012f62:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80012f66:	00 00       	add	r0,r0
80012f68:	80 01       	ld.sh	r1,r0[0x0]
80012f6a:	2d d2       	sub	r2,-35

80012f6c <mavlink_msg_param_request_read_decode>:
 *
 * @param msg The message to decode
 * @param param_request_read C-struct to decode the message contents into
 */
static inline void mavlink_msg_param_request_read_decode(const mavlink_message_t* msg, mavlink_param_request_read_t* param_request_read)
{
80012f6c:	eb cd 40 c0 	pushm	r6-r7,lr
80012f70:	1a 97       	mov	r7,sp
80012f72:	20 2d       	sub	sp,8
80012f74:	49 36       	lddpc	r6,80012fc0 <mavlink_msg_param_request_read_decode+0x54>
80012f76:	1e 26       	rsub	r6,pc
80012f78:	ef 4c ff fc 	st.w	r7[-4],r12
80012f7c:	ef 4b ff f8 	st.w	r7[-8],r11
#if MAVLINK_NEED_BYTE_SWAP
	param_request_read->param_index = mavlink_msg_param_request_read_get_param_index(msg);
80012f80:	ee fc ff fc 	ld.w	r12,r7[-4]
80012f84:	ce 0f       	rcall	80012f44 <mavlink_msg_param_request_read_get_param_index>
80012f86:	18 98       	mov	r8,r12
80012f88:	ee f9 ff f8 	ld.w	r9,r7[-8]
80012f8c:	b2 08       	st.h	r9[0x0],r8
	param_request_read->target_system = mavlink_msg_param_request_read_get_target_system(msg);
80012f8e:	ee fc ff fc 	ld.w	r12,r7[-4]
80012f92:	ca 1f       	rcall	80012ed4 <mavlink_msg_param_request_read_get_target_system>
80012f94:	18 98       	mov	r8,r12
80012f96:	ee f9 ff f8 	ld.w	r9,r7[-8]
80012f9a:	b2 a8       	st.b	r9[0x2],r8
	param_request_read->target_component = mavlink_msg_param_request_read_get_target_component(msg);
80012f9c:	ee fc ff fc 	ld.w	r12,r7[-4]
80012fa0:	ca 9f       	rcall	80012ef2 <mavlink_msg_param_request_read_get_target_component>
80012fa2:	18 98       	mov	r8,r12
80012fa4:	ee f9 ff f8 	ld.w	r9,r7[-8]
80012fa8:	b2 b8       	st.b	r9[0x3],r8
	mavlink_msg_param_request_read_get_param_id(msg, param_request_read->param_id);
80012faa:	ee f8 ff f8 	ld.w	r8,r7[-8]
80012fae:	2f c8       	sub	r8,-4
80012fb0:	10 9b       	mov	r11,r8
80012fb2:	ee fc ff fc 	ld.w	r12,r7[-4]
80012fb6:	ca df       	rcall	80012f10 <mavlink_msg_param_request_read_get_param_id>
#else
	memcpy(param_request_read, _MAV_PAYLOAD(msg), MAVLINK_MSG_ID_PARAM_REQUEST_READ_LEN);
#endif
}
80012fb8:	2f ed       	sub	sp,-8
80012fba:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80012fbe:	00 00       	add	r0,r0
80012fc0:	80 01       	ld.sh	r1,r0[0x0]
80012fc2:	2d fa       	sub	r10,-33

80012fc4 <mavlink_msg_param_request_list_get_target_system>:
 * @brief Get field target_system from param_request_list message
 *
 * @return System ID
 */
static inline uint8_t mavlink_msg_param_request_list_get_target_system(const mavlink_message_t* msg)
{
80012fc4:	eb cd 40 80 	pushm	r7,lr
80012fc8:	1a 97       	mov	r7,sp
80012fca:	20 1d       	sub	sp,4
80012fcc:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  0);
80012fd0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80012fd4:	2f 88       	sub	r8,-8
80012fd6:	11 88       	ld.ub	r8,r8[0x0]
}
80012fd8:	10 9c       	mov	r12,r8
80012fda:	2f fd       	sub	sp,-4
80012fdc:	e3 cd 80 80 	ldm	sp++,r7,pc

80012fe0 <mavlink_msg_param_request_list_get_target_component>:
 * @brief Get field target_component from param_request_list message
 *
 * @return Component ID
 */
static inline uint8_t mavlink_msg_param_request_list_get_target_component(const mavlink_message_t* msg)
{
80012fe0:	eb cd 40 80 	pushm	r7,lr
80012fe4:	1a 97       	mov	r7,sp
80012fe6:	20 1d       	sub	sp,4
80012fe8:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  1);
80012fec:	ee f8 ff fc 	ld.w	r8,r7[-4]
80012ff0:	2f 88       	sub	r8,-8
80012ff2:	2f f8       	sub	r8,-1
80012ff4:	11 88       	ld.ub	r8,r8[0x0]
}
80012ff6:	10 9c       	mov	r12,r8
80012ff8:	2f fd       	sub	sp,-4
80012ffa:	e3 cd 80 80 	ldm	sp++,r7,pc

80012ffe <mavlink_msg_param_request_list_decode>:
 *
 * @param msg The message to decode
 * @param param_request_list C-struct to decode the message contents into
 */
static inline void mavlink_msg_param_request_list_decode(const mavlink_message_t* msg, mavlink_param_request_list_t* param_request_list)
{
80012ffe:	eb cd 40 c0 	pushm	r6-r7,lr
80013002:	1a 97       	mov	r7,sp
80013004:	20 2d       	sub	sp,8
80013006:	48 c6       	lddpc	r6,80013034 <mavlink_msg_param_request_list_decode+0x36>
80013008:	1e 26       	rsub	r6,pc
8001300a:	ef 4c ff fc 	st.w	r7[-4],r12
8001300e:	ef 4b ff f8 	st.w	r7[-8],r11
#if MAVLINK_NEED_BYTE_SWAP
	param_request_list->target_system = mavlink_msg_param_request_list_get_target_system(msg);
80013012:	ee fc ff fc 	ld.w	r12,r7[-4]
80013016:	cd 7f       	rcall	80012fc4 <mavlink_msg_param_request_list_get_target_system>
80013018:	18 98       	mov	r8,r12
8001301a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001301e:	b2 88       	st.b	r9[0x0],r8
	param_request_list->target_component = mavlink_msg_param_request_list_get_target_component(msg);
80013020:	ee fc ff fc 	ld.w	r12,r7[-4]
80013024:	cd ef       	rcall	80012fe0 <mavlink_msg_param_request_list_get_target_component>
80013026:	18 98       	mov	r8,r12
80013028:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001302c:	b2 98       	st.b	r9[0x1],r8
#else
	memcpy(param_request_list, _MAV_PAYLOAD(msg), MAVLINK_MSG_ID_PARAM_REQUEST_LIST_LEN);
#endif
}
8001302e:	2f ed       	sub	sp,-8
80013030:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80013034:	80 01       	ld.sh	r1,r0[0x0]
80013036:	2e 8c       	sub	r12,-24

80013038 <mavlink_msg_request_data_stream_get_target_system>:
 * @brief Get field target_system from request_data_stream message
 *
 * @return The target requested to send the message stream.
 */
static inline uint8_t mavlink_msg_request_data_stream_get_target_system(const mavlink_message_t* msg)
{
80013038:	eb cd 40 80 	pushm	r7,lr
8001303c:	1a 97       	mov	r7,sp
8001303e:	20 1d       	sub	sp,4
80013040:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  2);
80013044:	ee f8 ff fc 	ld.w	r8,r7[-4]
80013048:	2f 88       	sub	r8,-8
8001304a:	2f e8       	sub	r8,-2
8001304c:	11 88       	ld.ub	r8,r8[0x0]
}
8001304e:	10 9c       	mov	r12,r8
80013050:	2f fd       	sub	sp,-4
80013052:	e3 cd 80 80 	ldm	sp++,r7,pc

80013056 <mavlink_msg_request_data_stream_get_target_component>:
 * @brief Get field target_component from request_data_stream message
 *
 * @return The target requested to send the message stream.
 */
static inline uint8_t mavlink_msg_request_data_stream_get_target_component(const mavlink_message_t* msg)
{
80013056:	eb cd 40 80 	pushm	r7,lr
8001305a:	1a 97       	mov	r7,sp
8001305c:	20 1d       	sub	sp,4
8001305e:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  3);
80013062:	ee f8 ff fc 	ld.w	r8,r7[-4]
80013066:	2f 88       	sub	r8,-8
80013068:	2f d8       	sub	r8,-3
8001306a:	11 88       	ld.ub	r8,r8[0x0]
}
8001306c:	10 9c       	mov	r12,r8
8001306e:	2f fd       	sub	sp,-4
80013070:	e3 cd 80 80 	ldm	sp++,r7,pc

80013074 <mavlink_msg_request_data_stream_get_req_stream_id>:
 * @brief Get field req_stream_id from request_data_stream message
 *
 * @return The ID of the requested data stream
 */
static inline uint8_t mavlink_msg_request_data_stream_get_req_stream_id(const mavlink_message_t* msg)
{
80013074:	eb cd 40 80 	pushm	r7,lr
80013078:	1a 97       	mov	r7,sp
8001307a:	20 1d       	sub	sp,4
8001307c:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  4);
80013080:	ee f8 ff fc 	ld.w	r8,r7[-4]
80013084:	2f 88       	sub	r8,-8
80013086:	2f c8       	sub	r8,-4
80013088:	11 88       	ld.ub	r8,r8[0x0]
}
8001308a:	10 9c       	mov	r12,r8
8001308c:	2f fd       	sub	sp,-4
8001308e:	e3 cd 80 80 	ldm	sp++,r7,pc

80013092 <mavlink_msg_request_data_stream_get_req_message_rate>:
 * @brief Get field req_message_rate from request_data_stream message
 *
 * @return The requested interval between two messages of this type
 */
static inline uint16_t mavlink_msg_request_data_stream_get_req_message_rate(const mavlink_message_t* msg)
{
80013092:	eb cd 40 c0 	pushm	r6-r7,lr
80013096:	1a 97       	mov	r7,sp
80013098:	20 1d       	sub	sp,4
8001309a:	48 86       	lddpc	r6,800130b8 <mavlink_msg_request_data_stream_get_req_message_rate+0x26>
8001309c:	1e 26       	rsub	r6,pc
8001309e:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint16_t(msg,  0);
800130a2:	30 0b       	mov	r11,0
800130a4:	ee fc ff fc 	ld.w	r12,r7[-4]
800130a8:	ca ee       	rcall	80012e04 <_MAV_RETURN_uint16_t>
800130aa:	18 98       	mov	r8,r12
800130ac:	5c 88       	casts.h	r8
800130ae:	5c 88       	casts.h	r8
}
800130b0:	10 9c       	mov	r12,r8
800130b2:	2f fd       	sub	sp,-4
800130b4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800130b8:	80 01       	ld.sh	r1,r0[0x0]
800130ba:	2f 20       	sub	r0,-14

800130bc <mavlink_msg_request_data_stream_get_start_stop>:
 * @brief Get field start_stop from request_data_stream message
 *
 * @return 1 to start sending, 0 to stop sending.
 */
static inline uint8_t mavlink_msg_request_data_stream_get_start_stop(const mavlink_message_t* msg)
{
800130bc:	eb cd 40 80 	pushm	r7,lr
800130c0:	1a 97       	mov	r7,sp
800130c2:	20 1d       	sub	sp,4
800130c4:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  5);
800130c8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800130cc:	2f 88       	sub	r8,-8
800130ce:	2f b8       	sub	r8,-5
800130d0:	11 88       	ld.ub	r8,r8[0x0]
}
800130d2:	10 9c       	mov	r12,r8
800130d4:	2f fd       	sub	sp,-4
800130d6:	e3 cd 80 80 	ldm	sp++,r7,pc

800130da <mavlink_msg_request_data_stream_decode>:
 *
 * @param msg The message to decode
 * @param request_data_stream C-struct to decode the message contents into
 */
static inline void mavlink_msg_request_data_stream_decode(const mavlink_message_t* msg, mavlink_request_data_stream_t* request_data_stream)
{
800130da:	eb cd 40 c0 	pushm	r6-r7,lr
800130de:	1a 97       	mov	r7,sp
800130e0:	20 2d       	sub	sp,8
800130e2:	49 76       	lddpc	r6,8001313c <mavlink_msg_request_data_stream_decode+0x62>
800130e4:	1e 26       	rsub	r6,pc
800130e6:	ef 4c ff fc 	st.w	r7[-4],r12
800130ea:	ef 4b ff f8 	st.w	r7[-8],r11
#if MAVLINK_NEED_BYTE_SWAP
	request_data_stream->req_message_rate = mavlink_msg_request_data_stream_get_req_message_rate(msg);
800130ee:	ee fc ff fc 	ld.w	r12,r7[-4]
800130f2:	cd 0f       	rcall	80013092 <mavlink_msg_request_data_stream_get_req_message_rate>
800130f4:	18 98       	mov	r8,r12
800130f6:	5c 88       	casts.h	r8
800130f8:	ee f9 ff f8 	ld.w	r9,r7[-8]
800130fc:	b2 08       	st.h	r9[0x0],r8
	request_data_stream->target_system = mavlink_msg_request_data_stream_get_target_system(msg);
800130fe:	ee fc ff fc 	ld.w	r12,r7[-4]
80013102:	c9 bf       	rcall	80013038 <mavlink_msg_request_data_stream_get_target_system>
80013104:	18 98       	mov	r8,r12
80013106:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001310a:	b2 a8       	st.b	r9[0x2],r8
	request_data_stream->target_component = mavlink_msg_request_data_stream_get_target_component(msg);
8001310c:	ee fc ff fc 	ld.w	r12,r7[-4]
80013110:	ca 3f       	rcall	80013056 <mavlink_msg_request_data_stream_get_target_component>
80013112:	18 98       	mov	r8,r12
80013114:	ee f9 ff f8 	ld.w	r9,r7[-8]
80013118:	b2 b8       	st.b	r9[0x3],r8
	request_data_stream->req_stream_id = mavlink_msg_request_data_stream_get_req_stream_id(msg);
8001311a:	ee fc ff fc 	ld.w	r12,r7[-4]
8001311e:	ca bf       	rcall	80013074 <mavlink_msg_request_data_stream_get_req_stream_id>
80013120:	18 98       	mov	r8,r12
80013122:	ee f9 ff f8 	ld.w	r9,r7[-8]
80013126:	b2 c8       	st.b	r9[0x4],r8
	request_data_stream->start_stop = mavlink_msg_request_data_stream_get_start_stop(msg);
80013128:	ee fc ff fc 	ld.w	r12,r7[-4]
8001312c:	cc 8f       	rcall	800130bc <mavlink_msg_request_data_stream_get_start_stop>
8001312e:	18 98       	mov	r8,r12
80013130:	ee f9 ff f8 	ld.w	r9,r7[-8]
80013134:	b2 d8       	st.b	r9[0x5],r8
#else
	memcpy(request_data_stream, _MAV_PAYLOAD(msg), MAVLINK_MSG_ID_REQUEST_DATA_STREAM_LEN);
#endif
}
80013136:	2f ed       	sub	sp,-8
80013138:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001313c:	80 01       	ld.sh	r1,r0[0x0]
8001313e:	2f 68       	sub	r8,-10

80013140 <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
80013140:	eb cd 40 c0 	pushm	r6-r7,lr
80013144:	1a 97       	mov	r7,sp
80013146:	20 6d       	sub	sp,24
80013148:	49 e6       	lddpc	r6,800131c0 <interpolate+0x80>
8001314a:	1e 26       	rsub	r6,pc
8001314c:	ef 4c ff f8 	st.w	r7[-8],r12
80013150:	ef 4b ff f4 	st.w	r7[-12],r11
80013154:	ef 4a ff f0 	st.w	r7[-16],r10
80013158:	ef 49 ff ec 	st.w	r7[-20],r9
8001315c:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
80013160:	ee f9 ff f4 	ld.w	r9,r7[-12]
80013164:	ee f8 ff f0 	ld.w	r8,r7[-16]
80013168:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
8001316c:	c0 41       	brne	80013174 <interpolate+0x34>
	{
		return y1;
8001316e:	ee f8 ff ec 	ld.w	r8,r7[-20]
80013172:	c2 38       	rjmp	800131b8 <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
80013174:	ee f9 ff e8 	ld.w	r9,r7[-24]
80013178:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001317c:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80013180:	ee fa ff f8 	ld.w	r10,r7[-8]
80013184:	ee f8 ff f4 	ld.w	r8,r7[-12]
80013188:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
8001318c:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80013190:	ee fa ff f0 	ld.w	r10,r7[-16]
80013194:	ee f9 ff f4 	ld.w	r9,r7[-12]
80013198:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8001319c:	12 9b       	mov	r11,r9
8001319e:	10 9c       	mov	r12,r8
800131a0:	f0 16 00 08 	mcall	r6[32]
800131a4:	18 98       	mov	r8,r12
800131a6:	10 99       	mov	r9,r8
800131a8:	ee f8 ff ec 	ld.w	r8,r7[-20]
800131ac:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
800131b0:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
800131b4:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
800131b8:	10 9c       	mov	r12,r8
800131ba:	2f ad       	sub	sp,-24
800131bc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800131c0:	80 01       	ld.sh	r1,r0[0x0]
800131c2:	2f ce       	sub	lr,-4

800131c4 <comm_send_ch>:
central_data_t *centralData;

NEW_TASK_SET (mavlink_tasks, 30)

void comm_send_ch(mavlink_channel_t chan, uint8_t ch)
{
800131c4:	eb cd 40 c0 	pushm	r6-r7,lr
800131c8:	1a 97       	mov	r7,sp
800131ca:	20 2d       	sub	sp,8
800131cc:	48 e6       	lddpc	r6,80013204 <comm_send_ch+0x40>
800131ce:	1e 26       	rsub	r6,pc
800131d0:	ef 4c ff fc 	st.w	r7[-4],r12
800131d4:	16 98       	mov	r8,r11
800131d6:	ef 68 ff f8 	st.b	r7[-8],r8
	if (chan == MAVLINK_COMM_0)
800131da:	ee f8 ff fc 	ld.w	r8,r7[-4]
800131de:	58 08       	cp.w	r8,0
800131e0:	c0 e1       	brne	800131fc <comm_send_ch+0x38>
	{
		//uart0_transmit(ch);
		mavlink_out_stream->put(mavlink_out_stream->data, ch);
800131e2:	ec f8 01 4c 	ld.w	r8,r6[332]
800131e6:	70 08       	ld.w	r8,r8[0x0]
800131e8:	70 18       	ld.w	r8,r8[0x4]
800131ea:	ef 3a ff f8 	ld.ub	r10,r7[-8]
800131ee:	ec f9 01 4c 	ld.w	r9,r6[332]
800131f2:	72 09       	ld.w	r9,r9[0x0]
800131f4:	72 59       	ld.w	r9,r9[0x14]
800131f6:	14 9b       	mov	r11,r10
800131f8:	12 9c       	mov	r12,r9
800131fa:	5d 18       	icall	r8
	}
	if (chan == MAVLINK_COMM_1)
	{
		//uart1_transmit(ch);
	}
}
800131fc:	2f ed       	sub	sp,-8
800131fe:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80013202:	00 00       	add	r0,r0
80013204:	80 01       	ld.sh	r1,r0[0x0]
80013206:	30 52       	mov	r2,5
80013208:	0a 20       	rsub	r0,r5
8001320a:	52 65       	stdsp	sp[0x98],r5
8001320c:	63 65       	ld.w	r5,r1[0x58]
8001320e:	69 76       	ld.w	r6,r4[0x5c]
80013210:	65 64       	ld.w	r4,r2[0x58]
80013212:	20 6d       	sub	sp,24
80013214:	65 73       	ld.w	r3,r2[0x5c]
80013216:	73 61       	ld.w	r1,r9[0x58]
80013218:	67 65       	ld.w	r5,r3[0x58]
8001321a:	20 77       	sub	r7,7
8001321c:	69 74       	ld.w	r4,r4[0x5c]
8001321e:	68 20       	ld.w	r0,r4[0x8]
80013220:	49 44       	lddpc	r4,80013270 <mavlink_receive_handler+0x2a>
80013222:	00 00       	add	r0,r0
80013224:	20 66       	sub	r6,6
80013226:	72 6f       	ld.w	pc,r9[0x18]
80013228:	6d 20       	ld.w	r0,r6[0x48]
8001322a:	73 79       	ld.w	r9,r9[0x5c]
8001322c:	73 74       	ld.w	r4,r9[0x5c]
8001322e:	65 6d       	ld.w	sp,r2[0x58]
80013230:	00 00       	add	r0,r0
80013232:	00 00       	add	r0,r0
80013234:	20 66       	sub	r6,6
80013236:	6f 72       	ld.w	r2,r7[0x5c]
80013238:	20 63       	sub	r3,6
8001323a:	6f 6d       	ld.w	sp,r7[0x58]
8001323c:	70 6f       	ld.w	pc,r8[0x18]
8001323e:	6e 65       	ld.w	r5,r7[0x18]
80013240:	6e 74       	ld.w	r4,r7[0x1c]
80013242:	00 00       	add	r0,r0
80013244:	0a 00       	add	r0,r5

80013246 <mavlink_receive_handler>:

void mavlink_receive_handler() {
80013246:	eb cd 40 c0 	pushm	r6-r7,lr
8001324a:	1a 97       	mov	r7,sp
8001324c:	fa cd 01 20 	sub	sp,sp,288
80013250:	49 c6       	lddpc	r6,800132c0 <mavlink_receive_handler+0x7a>
80013252:	1e 26       	rsub	r6,pc
	Mavlink_Received_t rec;
	
	if(mavlink_receive(mavlink_in_stream, &rec)) {
80013254:	ec f8 04 b8 	ld.w	r8,r6[1208]
80013258:	70 08       	ld.w	r8,r8[0x0]
8001325a:	ee c9 01 20 	sub	r9,r7,288
8001325e:	12 9b       	mov	r11,r9
80013260:	10 9c       	mov	r12,r8
80013262:	f0 16 01 3c 	mcall	r6[1264]
80013266:	18 98       	mov	r8,r12
80013268:	58 08       	cp.w	r8,0
8001326a:	c2 80       	breq	800132ba <mavlink_receive_handler+0x74>
		dbg_print("\n Received message with ID");
8001326c:	fe cc 00 64 	sub	r12,pc,100
80013270:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(rec.msg.msgid, 10);
80013274:	ef 38 fe e7 	ld.ub	r8,r7[-281]
80013278:	30 ab       	mov	r11,10
8001327a:	10 9c       	mov	r12,r8
8001327c:	f0 16 00 04 	mcall	r6[16]
			dbg_print(" from system");
80013280:	fe cc 00 5c 	sub	r12,pc,92
80013284:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(rec.msg.sysid, 10);
80013288:	ef 38 fe e5 	ld.ub	r8,r7[-283]
8001328c:	30 ab       	mov	r11,10
8001328e:	10 9c       	mov	r12,r8
80013290:	f0 16 00 04 	mcall	r6[16]
			dbg_print(" for component");
80013294:	fe cc 00 60 	sub	r12,pc,96
80013298:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(rec.msg.compid,10);
8001329c:	ef 38 fe e6 	ld.ub	r8,r7[-282]
800132a0:	30 ab       	mov	r11,10
800132a2:	10 9c       	mov	r12,r8
800132a4:	f0 16 00 04 	mcall	r6[16]
			dbg_print( "\n");
800132a8:	fe cc 00 64 	sub	r12,pc,100
800132ac:	f0 16 00 01 	mcall	r6[4]
		
			handle_mavlink_message(&rec);
800132b0:	ee c8 01 20 	sub	r8,r7,288
800132b4:	10 9c       	mov	r12,r8
800132b6:	f0 16 01 70 	mcall	r6[1472]
		
		
	}
}
800132ba:	2b 8d       	sub	sp,-288
800132bc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800132c0:	80 01       	ld.sh	r1,r0[0x0]
800132c2:	30 d6       	mov	r6,13

800132c4 <init_mavlink>:

void init_mavlink(byte_stream_t *transmit_stream, byte_stream_t *receive_stream, int sysid) {
800132c4:	eb cd 40 c0 	pushm	r6-r7,lr
800132c8:	1a 97       	mov	r7,sp
800132ca:	20 3d       	sub	sp,12
800132cc:	4a 36       	lddpc	r6,80013358 <init_mavlink+0x94>
800132ce:	1e 26       	rsub	r6,pc
800132d0:	ef 4c ff fc 	st.w	r7[-4],r12
800132d4:	ef 4b ff f8 	st.w	r7[-8],r11
800132d8:	ef 4a ff f4 	st.w	r7[-12],r10
	mavlink_system.sysid = sysid; // System ID, 1-255
800132dc:	ee f8 ff f4 	ld.w	r8,r7[-12]
800132e0:	5c 58       	castu.b	r8
800132e2:	ec f9 00 70 	ld.w	r9,r6[112]
800132e6:	b2 88       	st.b	r9[0x0],r8
	mavlink_system.compid = 50; // Component/Subsystem ID, 1-255
800132e8:	ec f9 00 70 	ld.w	r9,r6[112]
800132ec:	33 28       	mov	r8,50
800132ee:	b2 98       	st.b	r9[0x1],r8
	mavlink_system.type = MAV_TYPE_QUADROTOR;
800132f0:	ec f9 00 70 	ld.w	r9,r6[112]
800132f4:	30 28       	mov	r8,2
800132f6:	b2 a8       	st.b	r9[0x2],r8
	
	mavlink_mission_planner.sysid = mavlink_system.sysid;
800132f8:	ec f8 00 70 	ld.w	r8,r6[112]
800132fc:	11 88       	ld.ub	r8,r8[0x0]
800132fe:	ec f9 00 c4 	ld.w	r9,r6[196]
80013302:	b2 88       	st.b	r9[0x0],r8
	mavlink_mission_planner.compid = MAV_COMP_ID_MISSIONPLANNER;
80013304:	ec f9 00 c4 	ld.w	r9,r6[196]
80013308:	3b e8       	mov	r8,-66
8001330a:	b2 98       	st.b	r9[0x1],r8
	mavlink_mission_planner.type = MAV_TYPE_QUADROTOR;
8001330c:	ec f9 00 c4 	ld.w	r9,r6[196]
80013310:	30 28       	mov	r8,2
80013312:	b2 a8       	st.b	r9[0x2],r8
	
	mavlink_out_stream = transmit_stream;
80013314:	ee f9 ff fc 	ld.w	r9,r7[-4]
80013318:	ec f8 01 4c 	ld.w	r8,r6[332]
8001331c:	91 09       	st.w	r8[0x0],r9
	mavlink_in_stream = receive_stream;
8001331e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80013322:	ec f8 04 b8 	ld.w	r8,r6[1208]
80013326:	91 09       	st.w	r8[0x0],r9
	
	init_scheduler(&mavlink_tasks);
80013328:	ec f8 01 24 	ld.w	r8,r6[292]
8001332c:	10 9c       	mov	r12,r8
8001332e:	f0 16 01 01 	mcall	r6[1028]
	
	add_task(&mavlink_tasks, 100000, RUN_REGULAR, &send_scheduled_parameters, MAVLINK_MSG_ID_PARAM_VALUE);
80013332:	ec f9 05 14 	ld.w	r9,r6[1300]
80013336:	ec fc 01 24 	ld.w	r12,r6[292]
8001333a:	31 68       	mov	r8,22
8001333c:	30 2a       	mov	r10,2
8001333e:	e0 7b 86 a0 	mov	r11,100000
80013342:	f0 16 00 22 	mcall	r6[136]

	centralData = get_central_data();
80013346:	f0 16 00 32 	mcall	r6[200]
8001334a:	18 99       	mov	r9,r12
8001334c:	ec f8 00 00 	ld.w	r8,r6[0]
80013350:	91 09       	st.w	r8[0x0],r9
}
80013352:	2f dd       	sub	sp,-12
80013354:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80013358:	80 01       	ld.sh	r1,r0[0x0]
8001335a:	31 52       	mov	r2,21

8001335c <flush_mavlink>:

void flush_mavlink() {
8001335c:	eb cd 40 c0 	pushm	r6-r7,lr
80013360:	1a 97       	mov	r7,sp
80013362:	48 b6       	lddpc	r6,8001338c <flush_mavlink+0x30>
80013364:	1e 26       	rsub	r6,pc
	if (mavlink_out_stream->flush!=NULL) {
80013366:	ec f8 01 4c 	ld.w	r8,r6[332]
8001336a:	70 08       	ld.w	r8,r8[0x0]
8001336c:	70 28       	ld.w	r8,r8[0x8]
8001336e:	58 08       	cp.w	r8,0
80013370:	c0 b0       	breq	80013386 <flush_mavlink+0x2a>
		//mavlink_out_stream->buffer_empty(mavlink_out_stream->data);
		mavlink_out_stream->flush(mavlink_out_stream->data);	
80013372:	ec f8 01 4c 	ld.w	r8,r6[332]
80013376:	70 08       	ld.w	r8,r8[0x0]
80013378:	70 28       	ld.w	r8,r8[0x8]
8001337a:	ec f9 01 4c 	ld.w	r9,r6[332]
8001337e:	72 09       	ld.w	r9,r9[0x0]
80013380:	72 59       	ld.w	r9,r9[0x14]
80013382:	12 9c       	mov	r12,r9
80013384:	5d 18       	icall	r8
	
	}
}
80013386:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001338a:	00 00       	add	r0,r0
8001338c:	80 01       	ld.sh	r1,r0[0x0]
8001338e:	31 e8       	mov	r8,30

80013390 <mavlink_protocol_update>:

task_return_t mavlink_protocol_update() {
80013390:	eb cd 40 c0 	pushm	r6-r7,lr
80013394:	1a 97       	mov	r7,sp
80013396:	20 1d       	sub	sp,4
80013398:	49 36       	lddpc	r6,800133e4 <mavlink_protocol_update+0x54>
8001339a:	1e 26       	rsub	r6,pc
	task_return_t result=0;
8001339c:	30 08       	mov	r8,0
8001339e:	ef 48 ff fc 	st.w	r7[-4],r8
	mavlink_receive_handler();
800133a2:	f0 16 02 1a 	mcall	r6[2152]
	if ((mavlink_out_stream->buffer_empty(mavlink_out_stream->data))==true) {
800133a6:	ec f8 01 4c 	ld.w	r8,r6[332]
800133aa:	70 08       	ld.w	r8,r8[0x0]
800133ac:	70 38       	ld.w	r8,r8[0xc]
800133ae:	ec f9 01 4c 	ld.w	r9,r6[332]
800133b2:	72 09       	ld.w	r9,r9[0x0]
800133b4:	72 59       	ld.w	r9,r9[0x14]
800133b6:	12 9c       	mov	r12,r9
800133b8:	5d 18       	icall	r8
800133ba:	18 98       	mov	r8,r12
800133bc:	58 18       	cp.w	r8,1
800133be:	c0 c1       	brne	800133d6 <mavlink_protocol_update+0x46>
		result = run_scheduler_update(&mavlink_tasks, ROUND_ROBIN);
800133c0:	ec f8 01 24 	ld.w	r8,r6[292]
800133c4:	30 0b       	mov	r11,0
800133c6:	10 9c       	mov	r12,r8
800133c8:	f0 16 00 e5 	mcall	r6[916]
800133cc:	18 98       	mov	r8,r12
800133ce:	ef 48 ff fc 	st.w	r7[-4],r8
		flush_mavlink();
800133d2:	f0 16 00 2c 	mcall	r6[176]
	}
		
	
	return result;
800133d6:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
800133da:	10 9c       	mov	r12,r8
800133dc:	2f fd       	sub	sp,-4
800133de:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800133e2:	00 00       	add	r0,r0
800133e4:	80 01       	ld.sh	r1,r0[0x0]
800133e6:	32 1e       	mov	lr,33

800133e8 <get_mavlink_taskset>:

task_set* get_mavlink_taskset() {
800133e8:	eb cd 40 c0 	pushm	r6-r7,lr
800133ec:	1a 97       	mov	r7,sp
800133ee:	48 46       	lddpc	r6,800133fc <get_mavlink_taskset+0x14>
800133f0:	1e 26       	rsub	r6,pc
	return &mavlink_tasks;
800133f2:	ec f8 01 24 	ld.w	r8,r6[292]
}
800133f6:	10 9c       	mov	r12,r8
800133f8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800133fc:	80 01       	ld.sh	r1,r0[0x0]
800133fe:	32 74       	mov	r4,39

80013400 <suspend_downstream>:

void suspend_downstream(uint32_t delay) {
80013400:	eb cd 40 c0 	pushm	r6-r7,lr
80013404:	1a 97       	mov	r7,sp
80013406:	20 2d       	sub	sp,8
80013408:	49 56       	lddpc	r6,8001345c <suspend_downstream+0x5c>
8001340a:	1e 26       	rsub	r6,pc
8001340c:	ef 4c ff f8 	st.w	r7[-8],r12
	int i;
	for (i=0; i<mavlink_tasks.number_of_tasks; i++) {
80013410:	30 08       	mov	r8,0
80013412:	ef 48 ff fc 	st.w	r7[-4],r8
80013416:	c1 78       	rjmp	80013444 <suspend_downstream+0x44>
		suspend_task(&mavlink_tasks.tasks[i], delay);
80013418:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001341c:	12 98       	mov	r8,r9
8001341e:	a1 78       	lsl	r8,0x1
80013420:	12 08       	add	r8,r9
80013422:	a5 68       	lsl	r8,0x4
80013424:	10 99       	mov	r9,r8
80013426:	ec f8 01 24 	ld.w	r8,r6[292]
8001342a:	2f c8       	sub	r8,-4
8001342c:	f2 08 00 08 	add	r8,r9,r8
80013430:	ee fb ff f8 	ld.w	r11,r7[-8]
80013434:	10 9c       	mov	r12,r8
80013436:	f0 16 01 b6 	mcall	r6[1752]
	return &mavlink_tasks;
}

void suspend_downstream(uint32_t delay) {
	int i;
	for (i=0; i<mavlink_tasks.number_of_tasks; i++) {
8001343a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001343e:	2f f8       	sub	r8,-1
80013440:	ef 48 ff fc 	st.w	r7[-4],r8
80013444:	ec f8 01 24 	ld.w	r8,r6[292]
80013448:	11 88       	ld.ub	r8,r8[0x0]
8001344a:	10 99       	mov	r9,r8
8001344c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80013450:	10 39       	cp.w	r9,r8
80013452:	fe 99 ff e3 	brgt	80013418 <suspend_downstream+0x18>
		suspend_task(&mavlink_tasks.tasks[i], delay);
	}	
}
80013456:	2f ed       	sub	sp,-8
80013458:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001345c:	80 01       	ld.sh	r1,r0[0x0]
8001345e:	32 8e       	mov	lr,40

80013460 <mavlink_receive>:

uint8_t mavlink_receive(byte_stream_t* stream, Mavlink_Received_t* rec) {
80013460:	eb cd 40 c0 	pushm	r6-r7,lr
80013464:	1a 97       	mov	r7,sp
80013466:	20 3d       	sub	sp,12
80013468:	49 a6       	lddpc	r6,800134d0 <mavlink_receive+0x70>
8001346a:	1e 26       	rsub	r6,pc
8001346c:	ef 4c ff f8 	st.w	r7[-8],r12
80013470:	ef 4b ff f4 	st.w	r7[-12],r11
	uint8_t byte;
	//dbg_print(" ");
	while(stream->bytes_available(stream->data) > 0) {
80013474:	c1 d8       	rjmp	800134ae <mavlink_receive+0x4e>
		byte = stream->get(stream->data);
80013476:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001347a:	70 08       	ld.w	r8,r8[0x0]
8001347c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80013480:	72 59       	ld.w	r9,r9[0x14]
80013482:	12 9c       	mov	r12,r9
80013484:	5d 18       	icall	r8
80013486:	18 98       	mov	r8,r12
80013488:	ef 68 ff ff 	st.b	r7[-1],r8
		//dbg_print(".");
		// dbg_print_num(byte, 16);
		// dbg_print(" ");
		if(mavlink_parse_char(MAVLINK_COMM_0, byte, &rec->msg, &rec->status)) {
8001348c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80013490:	f0 c9 fe f0 	sub	r9,r8,-272
80013494:	ee fa ff f4 	ld.w	r10,r7[-12]
80013498:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8001349c:	10 9b       	mov	r11,r8
8001349e:	30 0c       	mov	r12,0
800134a0:	fe b0 fa 90 	rcall	800129c0 <mavlink_parse_char>
800134a4:	18 98       	mov	r8,r12
800134a6:	58 08       	cp.w	r8,0
800134a8:	c0 30       	breq	800134ae <mavlink_receive+0x4e>
			// dbg_print("\n");
			return 1;
800134aa:	30 18       	mov	r8,1
800134ac:	c0 e8       	rjmp	800134c8 <mavlink_receive+0x68>
}

uint8_t mavlink_receive(byte_stream_t* stream, Mavlink_Received_t* rec) {
	uint8_t byte;
	//dbg_print(" ");
	while(stream->bytes_available(stream->data) > 0) {
800134ae:	ee f8 ff f8 	ld.w	r8,r7[-8]
800134b2:	70 48       	ld.w	r8,r8[0x10]
800134b4:	ee f9 ff f8 	ld.w	r9,r7[-8]
800134b8:	72 59       	ld.w	r9,r9[0x14]
800134ba:	12 9c       	mov	r12,r9
800134bc:	5d 18       	icall	r8
800134be:	18 98       	mov	r8,r12
800134c0:	58 08       	cp.w	r8,0
800134c2:	fe 99 ff da 	brgt	80013476 <mavlink_receive+0x16>
			return 1;
		}
		// dbg_print_num(rec->status.parse_state, 16);
		// dbg_print("\n");
	}
	return 0;
800134c6:	30 08       	mov	r8,0
}
800134c8:	10 9c       	mov	r12,r8
800134ca:	2f dd       	sub	sp,-12
800134cc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800134d0:	80 01       	ld.sh	r1,r0[0x0]
800134d2:	32 ee       	mov	lr,46
800134d4:	6d 73       	ld.w	r3,r6[0x5c]
800134d6:	67 20       	ld.w	r0,r3[0x48]
800134d8:	63 6f       	ld.w	pc,r1[0x58]
800134da:	6d 70       	ld.w	r0,r6[0x5c]
800134dc:	20 69       	sub	r9,6
800134de:	64 3a       	ld.w	r10,r2[0xc]
800134e0:	00 00       	add	r0,r0
800134e2:	00 00       	add	r0,r0
800134e4:	73 74       	ld.w	r4,r9[0x5c]
800134e6:	72 65       	ld.w	r5,r9[0x18]
800134e8:	61 6d       	ld.w	sp,r0[0x58]
800134ea:	20 72       	sub	r2,7
800134ec:	65 71       	ld.w	r1,r2[0x5c]
800134ee:	75 65       	ld.w	r5,r10[0x58]
800134f0:	73 74       	ld.w	r4,r9[0x5c]
800134f2:	3a 00       	mov	r0,-96
800134f4:	73 65       	ld.w	r5,r9[0x58]
800134f6:	6e 64       	ld.w	r4,r7[0x18]
800134f8:	20 61       	sub	r1,6
800134fa:	6c 6c       	ld.w	r12,r6[0x18]
800134fc:	0a 00       	add	r0,r5
800134fe:	00 00       	add	r0,r0
80013500:	20 73       	sub	r3,7
80013502:	74 72       	ld.w	r2,r10[0x1c]
80013504:	65 61       	ld.w	r1,r2[0x58]
80013506:	6d 3d       	ld.w	sp,r6[0x4c]
80013508:	00 00       	add	r0,r0
8001350a:	00 00       	add	r0,r0
8001350c:	20 73       	sub	r3,7
8001350e:	74 61       	ld.w	r1,r10[0x18]
80013510:	72 74       	ld.w	r4,r9[0x1c]
80013512:	5f 73       	srpl	r3
80013514:	74 6f       	ld.w	pc,r10[0x18]
80013516:	70 3d       	ld.w	sp,r8[0xc]
80013518:	00 00       	add	r0,r0
8001351a:	00 00       	add	r0,r0
8001351c:	20 72       	sub	r2,7
8001351e:	61 74       	ld.w	r4,r0[0x5c]
80013520:	65 3d       	ld.w	sp,r2[0x4c]
	...

80013524 <handle_mavlink_message>:

void handle_mavlink_message(Mavlink_Received_t* rec) {
80013524:	eb cd 40 c0 	pushm	r6-r7,lr
80013528:	1a 97       	mov	r7,sp
8001352a:	20 cd       	sub	sp,48
8001352c:	fe f6 02 34 	ld.w	r6,pc[564]
80013530:	1e 26       	rsub	r6,pc
80013532:	ef 4c ff d0 	st.w	r7[-48],r12
	
	switch(rec->msg.msgid) {
80013536:	ee f8 ff d0 	ld.w	r8,r7[-48]
8001353a:	11 f8       	ld.ub	r8,r8[0x7]
8001353c:	59 58       	cp.w	r8,21
8001353e:	c0 c0       	breq	80013556 <handle_mavlink_message+0x32>
80013540:	e0 89 00 05 	brgt	8001354a <handle_mavlink_message+0x26>
80013544:	59 48       	cp.w	r8,20
80013546:	c2 a0       	breq	8001359a <handle_mavlink_message+0x76>
80013548:	cf 98       	rjmp	8001373a <handle_mavlink_message+0x216>
8001354a:	59 78       	cp.w	r8,23
8001354c:	c4 70       	breq	800135da <handle_mavlink_message+0xb6>
8001354e:	e0 48 00 42 	cp.w	r8,66
80013552:	c4 d0       	breq	800135ec <handle_mavlink_message+0xc8>
80013554:	cf 38       	rjmp	8001373a <handle_mavlink_message+0x216>
		case MAVLINK_MSG_ID_PARAM_REQUEST_LIST: { // 21
			mavlink_param_request_list_t request;
			mavlink_msg_param_request_list_decode(&rec->msg, &request);
80013556:	ee f8 ff d0 	ld.w	r8,r7[-48]
8001355a:	ee c9 00 12 	sub	r9,r7,18
8001355e:	12 9b       	mov	r11,r9
80013560:	10 9c       	mov	r12,r8
80013562:	fe b0 fd 4e 	rcall	80012ffe <mavlink_msg_param_request_list_decode>
			
			dbg_print("msg comp id:");
80013566:	fe cc 00 92 	sub	r12,pc,146
8001356a:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(request.target_component,10);
8001356e:	ef 38 ff ef 	ld.ub	r8,r7[-17]
80013572:	30 ab       	mov	r11,10
80013574:	10 9c       	mov	r12,r8
80013576:	f0 16 00 04 	mcall	r6[16]
			dbg_print("\n");
8001357a:	fe cc 03 36 	sub	r12,pc,822
8001357e:	f0 16 00 01 	mcall	r6[4]
			
			// Check if this message is for this system
			if ((uint8_t)request.target_system == (uint8_t)mavlink_system.sysid) {
80013582:	ef 39 ff ee 	ld.ub	r9,r7[-18]
80013586:	ec f8 00 70 	ld.w	r8,r6[112]
8001358a:	11 88       	ld.ub	r8,r8[0x0]
8001358c:	f0 09 18 00 	cp.b	r9,r8
80013590:	e0 81 00 da 	brne	80013744 <handle_mavlink_message+0x220>
				send_all_parameters();
80013594:	f0 16 01 4d 	mcall	r6[1332]
			}				
		}
		break;
80013598:	ce 18       	rjmp	8001375a <handle_mavlink_message+0x236>
		case MAVLINK_MSG_ID_PARAM_REQUEST_READ: { //20
			mavlink_param_request_read_t request;
			mavlink_msg_param_request_read_decode(&rec->msg, &request);
8001359a:	ee f8 ff d0 	ld.w	r8,r7[-48]
8001359e:	ee c9 00 26 	sub	r9,r7,38
800135a2:	12 9b       	mov	r11,r9
800135a4:	10 9c       	mov	r12,r8
800135a6:	fe b0 fc e3 	rcall	80012f6c <mavlink_msg_param_request_read_decode>
			// Check if this message is for this system and subsystem
			if ((uint8_t)request.target_system == (uint8_t)mavlink_system.sysid
			&& (uint8_t)request.target_component == (uint8_t)mavlink_system.compid) {
800135aa:	ef 39 ff dc 	ld.ub	r9,r7[-36]
800135ae:	ec f8 00 70 	ld.w	r8,r6[112]
800135b2:	11 88       	ld.ub	r8,r8[0x0]
		break;
		case MAVLINK_MSG_ID_PARAM_REQUEST_READ: { //20
			mavlink_param_request_read_t request;
			mavlink_msg_param_request_read_decode(&rec->msg, &request);
			// Check if this message is for this system and subsystem
			if ((uint8_t)request.target_system == (uint8_t)mavlink_system.sysid
800135b4:	f0 09 18 00 	cp.b	r9,r8
800135b8:	e0 81 00 c8 	brne	80013748 <handle_mavlink_message+0x224>
			&& (uint8_t)request.target_component == (uint8_t)mavlink_system.compid) {
800135bc:	ef 39 ff dd 	ld.ub	r9,r7[-35]
800135c0:	ec f8 00 70 	ld.w	r8,r6[112]
800135c4:	11 98       	ld.ub	r8,r8[0x1]
		break;
		case MAVLINK_MSG_ID_PARAM_REQUEST_READ: { //20
			mavlink_param_request_read_t request;
			mavlink_msg_param_request_read_decode(&rec->msg, &request);
			// Check if this message is for this system and subsystem
			if ((uint8_t)request.target_system == (uint8_t)mavlink_system.sysid
800135c6:	f0 09 18 00 	cp.b	r9,r8
800135ca:	e0 81 00 c1 	brne	8001374c <handle_mavlink_message+0x228>
			&& (uint8_t)request.target_component == (uint8_t)mavlink_system.compid) {

				send_parameter(&request);
800135ce:	ee c8 00 26 	sub	r8,r7,38
800135d2:	10 9c       	mov	r12,r8
800135d4:	f0 16 01 48 	mcall	r6[1312]
			}				
		}
		break;
800135d8:	cc 18       	rjmp	8001375a <handle_mavlink_message+0x236>
		case MAVLINK_MSG_ID_PARAM_SET: { //23
			suspend_downstream(100000);
800135da:	e0 7c 86 a0 	mov	r12,100000
800135de:	f0 16 00 71 	mcall	r6[452]
			receive_parameter(rec);
800135e2:	ee fc ff d0 	ld.w	r12,r7[-48]
800135e6:	f0 16 01 6f 	mcall	r6[1468]
		}
		break;
800135ea:	cb 88       	rjmp	8001375a <handle_mavlink_message+0x236>

		case MAVLINK_MSG_ID_REQUEST_DATA_STREAM: { // 66
			mavlink_request_data_stream_t request;
			mavlink_msg_request_data_stream_decode(&rec->msg, &request);
800135ec:	ee f8 ff d0 	ld.w	r8,r7[-48]
800135f0:	ee c9 00 2c 	sub	r9,r7,44
800135f4:	12 9b       	mov	r11,r9
800135f6:	10 9c       	mov	r12,r8
800135f8:	fe b0 fd 71 	rcall	800130da <mavlink_msg_request_data_stream_decode>
			// TODO: control target_component == compid!
			if ((uint8_t)request.target_system == (uint8_t)mavlink_system.sysid
			&& (uint8_t)request.target_component == (uint8_t)mavlink_system.compid)
800135fc:	ef 39 ff d6 	ld.ub	r9,r7[-42]
80013600:	ec f8 00 70 	ld.w	r8,r6[112]
80013604:	11 88       	ld.ub	r8,r8[0x0]

		case MAVLINK_MSG_ID_REQUEST_DATA_STREAM: { // 66
			mavlink_request_data_stream_t request;
			mavlink_msg_request_data_stream_decode(&rec->msg, &request);
			// TODO: control target_component == compid!
			if ((uint8_t)request.target_system == (uint8_t)mavlink_system.sysid
80013606:	f0 09 18 00 	cp.b	r9,r8
8001360a:	e0 81 00 a3 	brne	80013750 <handle_mavlink_message+0x22c>
			&& (uint8_t)request.target_component == (uint8_t)mavlink_system.compid)
8001360e:	ef 39 ff d7 	ld.ub	r9,r7[-41]
80013612:	ec f8 00 70 	ld.w	r8,r6[112]
80013616:	11 98       	ld.ub	r8,r8[0x1]

		case MAVLINK_MSG_ID_REQUEST_DATA_STREAM: { // 66
			mavlink_request_data_stream_t request;
			mavlink_msg_request_data_stream_decode(&rec->msg, &request);
			// TODO: control target_component == compid!
			if ((uint8_t)request.target_system == (uint8_t)mavlink_system.sysid
80013618:	f0 09 18 00 	cp.b	r9,r8
8001361c:	e0 81 00 9c 	brne	80013754 <handle_mavlink_message+0x230>
			&& (uint8_t)request.target_component == (uint8_t)mavlink_system.compid)
			{
				dbg_print("stream request:");
80013620:	fe cc 01 3c 	sub	r12,pc,316
80013624:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(request.target_component,10);
80013628:	ef 38 ff d7 	ld.ub	r8,r7[-41]
8001362c:	30 ab       	mov	r11,10
8001362e:	10 9c       	mov	r12,r8
80013630:	f0 16 00 04 	mcall	r6[16]
				if (request.req_stream_id==255) {
80013634:	ef 39 ff d8 	ld.ub	r9,r7[-40]
80013638:	3f f8       	mov	r8,-1
8001363a:	f0 09 18 00 	cp.b	r9,r8
8001363e:	c2 a1       	brne	80013692 <handle_mavlink_message+0x16e>
					int i;
					dbg_print("send all\n");
80013640:	fe cc 01 4c 	sub	r12,pc,332
80013644:	f0 16 00 01 	mcall	r6[4]
					// send full list of streams
					for (i=0; i<mavlink_tasks.number_of_tasks; i++) {
80013648:	30 08       	mov	r8,0
8001364a:	ef 48 ff f0 	st.w	r7[-16],r8
8001364e:	c1 88       	rjmp	8001367e <handle_mavlink_message+0x15a>
						task_entry *task=get_task_by_index(&mavlink_tasks, i);
80013650:	ee f8 ff f0 	ld.w	r8,r7[-16]
80013654:	5c 88       	casts.h	r8
80013656:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
8001365a:	ec f8 01 24 	ld.w	r8,r6[292]
8001365e:	12 9b       	mov	r11,r9
80013660:	10 9c       	mov	r12,r8
80013662:	f0 16 01 ab 	mcall	r6[1708]
80013666:	18 98       	mov	r8,r12
80013668:	ef 48 ff f4 	st.w	r7[-12],r8
						run_task_now(task);
8001366c:	ee fc ff f4 	ld.w	r12,r7[-12]
80013670:	f0 16 00 f7 	mcall	r6[988]
				dbg_print_num(request.target_component,10);
				if (request.req_stream_id==255) {
					int i;
					dbg_print("send all\n");
					// send full list of streams
					for (i=0; i<mavlink_tasks.number_of_tasks; i++) {
80013674:	ee f8 ff f0 	ld.w	r8,r7[-16]
80013678:	2f f8       	sub	r8,-1
8001367a:	ef 48 ff f0 	st.w	r7[-16],r8
8001367e:	ec f8 01 24 	ld.w	r8,r6[292]
80013682:	11 88       	ld.ub	r8,r8[0x0]
80013684:	10 99       	mov	r9,r8
80013686:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001368a:	10 39       	cp.w	r9,r8
8001368c:	fe 99 ff e2 	brgt	80013650 <handle_mavlink_message+0x12c>
						change_task_period(task, SCHEDULER_TIMEBASE/(uint32_t)request.req_message_rate);
					}
				}
			}
		}	
		break;
80013690:	c6 58       	rjmp	8001375a <handle_mavlink_message+0x236>
						task_entry *task=get_task_by_index(&mavlink_tasks, i);
						run_task_now(task);
					}					
				} else {
					int i;
					task_entry *task=get_task_by_id(&mavlink_tasks, request.req_stream_id);
80013692:	ef 38 ff d8 	ld.ub	r8,r7[-40]
80013696:	10 99       	mov	r9,r8
80013698:	ec f8 01 24 	ld.w	r8,r6[292]
8001369c:	12 9b       	mov	r11,r9
8001369e:	10 9c       	mov	r12,r8
800136a0:	f0 16 01 ad 	mcall	r6[1716]
800136a4:	18 98       	mov	r8,r12
800136a6:	ef 48 ff fc 	st.w	r7[-4],r8
					dbg_print(" stream="); dbg_print_num(request.req_stream_id, 10);
800136aa:	fe cc 01 aa 	sub	r12,pc,426
800136ae:	f0 16 00 01 	mcall	r6[4]
800136b2:	ef 38 ff d8 	ld.ub	r8,r7[-40]
800136b6:	30 ab       	mov	r11,10
800136b8:	10 9c       	mov	r12,r8
800136ba:	f0 16 00 04 	mcall	r6[16]
					dbg_print(" start_stop=");dbg_print_num(request.start_stop, 10);
800136be:	fe cc 01 b2 	sub	r12,pc,434
800136c2:	f0 16 00 01 	mcall	r6[4]
800136c6:	ef 38 ff d9 	ld.ub	r8,r7[-39]
800136ca:	30 ab       	mov	r11,10
800136cc:	10 9c       	mov	r12,r8
800136ce:	f0 16 00 04 	mcall	r6[16]
					dbg_print(" rate=");dbg_print_num(request.req_message_rate,10);
800136d2:	fe cc 01 b6 	sub	r12,pc,438
800136d6:	f0 16 00 01 	mcall	r6[4]
800136da:	ef 08 ff d4 	ld.sh	r8,r7[-44]
800136de:	5c 78       	castu.h	r8
800136e0:	30 ab       	mov	r11,10
800136e2:	10 9c       	mov	r12,r8
800136e4:	f0 16 00 04 	mcall	r6[16]
					dbg_print("\n");
800136e8:	fe cc 04 a4 	sub	r12,pc,1188
800136ec:	f0 16 00 01 	mcall	r6[4]
					dbg_print("\n");
800136f0:	fe cc 04 ac 	sub	r12,pc,1196
800136f4:	f0 16 00 01 	mcall	r6[4]
					if (request.start_stop) {
800136f8:	ef 38 ff d9 	ld.ub	r8,r7[-39]
800136fc:	58 08       	cp.w	r8,0
800136fe:	c0 70       	breq	8001370c <handle_mavlink_message+0x1e8>
						change_run_mode(task, RUN_REGULAR);
80013700:	30 2b       	mov	r11,2
80013702:	ee fc ff fc 	ld.w	r12,r7[-4]
80013706:	f0 16 00 a2 	mcall	r6[648]
8001370a:	c0 68       	rjmp	80013716 <handle_mavlink_message+0x1f2>
					}else {
						change_run_mode(task, RUN_NEVER);
8001370c:	30 0b       	mov	r11,0
8001370e:	ee fc ff fc 	ld.w	r12,r7[-4]
80013712:	f0 16 00 a2 	mcall	r6[648]
					}
					if (request.req_message_rate>0) {
80013716:	ef 08 ff d4 	ld.sh	r8,r7[-44]
8001371a:	58 08       	cp.w	r8,0
8001371c:	c1 e0       	breq	80013758 <handle_mavlink_message+0x234>
						change_task_period(task, SCHEDULER_TIMEBASE/(uint32_t)request.req_message_rate);
8001371e:	ef 08 ff d4 	ld.sh	r8,r7[-44]
80013722:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
80013726:	ee 78 42 40 	mov	r8,1000000
8001372a:	f0 09 0d 08 	divu	r8,r8,r9
8001372e:	10 9b       	mov	r11,r8
80013730:	ee fc ff fc 	ld.w	r12,r7[-4]
80013734:	f0 16 01 94 	mcall	r6[1616]
					}
				}
			}
		}	
		break;
80013738:	c1 18       	rjmp	8001375a <handle_mavlink_message+0x236>
		default: {
			// handle all platform-specific messages in mavlink-actions:
			handle_specific_messages(rec);
8001373a:	ee fc ff d0 	ld.w	r12,r7[-48]
8001373e:	f0 16 01 a6 	mcall	r6[1688]
80013742:	c0 c8       	rjmp	8001375a <handle_mavlink_message+0x236>
			// Check if this message is for this system
			if ((uint8_t)request.target_system == (uint8_t)mavlink_system.sysid) {
				send_all_parameters();
			}				
		}
		break;
80013744:	d7 03       	nop
80013746:	c0 a8       	rjmp	8001375a <handle_mavlink_message+0x236>
			&& (uint8_t)request.target_component == (uint8_t)mavlink_system.compid) {

				send_parameter(&request);
			}				
		}
		break;
80013748:	d7 03       	nop
8001374a:	c0 88       	rjmp	8001375a <handle_mavlink_message+0x236>
8001374c:	d7 03       	nop
8001374e:	c0 68       	rjmp	8001375a <handle_mavlink_message+0x236>
						change_task_period(task, SCHEDULER_TIMEBASE/(uint32_t)request.req_message_rate);
					}
				}
			}
		}	
		break;
80013750:	d7 03       	nop
80013752:	c0 48       	rjmp	8001375a <handle_mavlink_message+0x236>
80013754:	d7 03       	nop
80013756:	c0 28       	rjmp	8001375a <handle_mavlink_message+0x236>
80013758:	d7 03       	nop
		default: {
			// handle all platform-specific messages in mavlink-actions:
			handle_specific_messages(rec);
		}		
	}
8001375a:	2f 4d       	sub	sp,-48
8001375c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80013760:	80 01       	ld.sh	r1,r0[0x0]
80013762:	33 b4       	mov	r4,59

80013764 <crc_accumulate>:
 *
 * @param data new char to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate(uint8_t data, uint16_t *crcAccum)
{
80013764:	eb cd 40 80 	pushm	r7,lr
80013768:	1a 97       	mov	r7,sp
8001376a:	20 3d       	sub	sp,12
8001376c:	18 98       	mov	r8,r12
8001376e:	ef 4b ff f4 	st.w	r7[-12],r11
80013772:	ef 68 ff f8 	st.b	r7[-8],r8
        /*Accumulate one byte of data into the CRC*/
        uint8_t tmp;

        tmp = data ^ (uint8_t)(*crcAccum &0xff);
80013776:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001377a:	90 08       	ld.sh	r8,r8[0x0]
8001377c:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80013780:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80013784:	f3 e8 20 08 	eor	r8,r9,r8
80013788:	ef 68 ff ff 	st.b	r7[-1],r8
        tmp ^= (tmp<<4);
8001378c:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80013790:	a5 68       	lsl	r8,0x4
80013792:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80013796:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8001379a:	f3 e8 20 08 	eor	r8,r9,r8
8001379e:	5c 58       	castu.b	r8
800137a0:	ef 68 ff ff 	st.b	r7[-1],r8
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
800137a4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800137a8:	90 08       	ld.sh	r8,r8[0x0]
800137aa:	5c 78       	castu.h	r8
800137ac:	a9 88       	lsr	r8,0x8
800137ae:	5c 88       	casts.h	r8
800137b0:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
800137b4:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800137b8:	a9 68       	lsl	r8,0x8
800137ba:	5c 88       	casts.h	r8
800137bc:	f3 e8 20 08 	eor	r8,r9,r8
800137c0:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
800137c4:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800137c8:	a3 78       	lsl	r8,0x3
800137ca:	5c 88       	casts.h	r8
800137cc:	f3 e8 20 08 	eor	r8,r9,r8
800137d0:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
800137d4:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800137d8:	a5 88       	lsr	r8,0x4
800137da:	5c 58       	castu.b	r8
800137dc:	f3 e8 20 08 	eor	r8,r9,r8
800137e0:	5c 88       	casts.h	r8
800137e2:	ee f9 ff f4 	ld.w	r9,r7[-12]
800137e6:	b2 08       	st.h	r9[0x0],r8
}
800137e8:	2f dd       	sub	sp,-12
800137ea:	e3 cd 80 80 	ldm	sp++,r7,pc

800137ee <crc_init>:
 * @brief Initiliaze the buffer for the X.25 CRC
 *
 * @param crcAccum the 16 bit X.25 CRC
 */
static inline void crc_init(uint16_t* crcAccum)
{
800137ee:	eb cd 40 80 	pushm	r7,lr
800137f2:	1a 97       	mov	r7,sp
800137f4:	20 1d       	sub	sp,4
800137f6:	ef 4c ff fc 	st.w	r7[-4],r12
        *crcAccum = X25_INIT_CRC;
800137fa:	ee f9 ff fc 	ld.w	r9,r7[-4]
800137fe:	3f f8       	mov	r8,-1
80013800:	b2 08       	st.h	r9[0x0],r8
}
80013802:	2f fd       	sub	sp,-4
80013804:	e3 cd 80 80 	ldm	sp++,r7,pc

80013808 <crc_calculate>:
 * @param  pBuffer buffer containing the byte array to hash
 * @param  length  length of the byte array
 * @return the checksum over the buffer bytes
 **/
static inline uint16_t crc_calculate(const uint8_t* pBuffer, uint16_t length)
{
80013808:	eb cd 40 c0 	pushm	r6-r7,lr
8001380c:	1a 97       	mov	r7,sp
8001380e:	20 3d       	sub	sp,12
80013810:	49 76       	lddpc	r6,8001386c <crc_calculate+0x64>
80013812:	1e 26       	rsub	r6,pc
80013814:	ef 4c ff f8 	st.w	r7[-8],r12
80013818:	16 98       	mov	r8,r11
8001381a:	ef 58 ff f4 	st.h	r7[-12],r8
        uint16_t crcTmp;
        crc_init(&crcTmp);
8001381e:	ee c8 00 02 	sub	r8,r7,2
80013822:	10 9c       	mov	r12,r8
80013824:	ce 5f       	rcall	800137ee <crc_init>
	while (length--) {
80013826:	c0 e8       	rjmp	80013842 <crc_calculate+0x3a>
                crc_accumulate(*pBuffer++, &crcTmp);
80013828:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001382c:	11 88       	ld.ub	r8,r8[0x0]
8001382e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80013832:	2f f9       	sub	r9,-1
80013834:	ef 49 ff f8 	st.w	r7[-8],r9
80013838:	ee c9 00 02 	sub	r9,r7,2
8001383c:	12 9b       	mov	r11,r9
8001383e:	10 9c       	mov	r12,r8
80013840:	c9 2f       	rcall	80013764 <crc_accumulate>
 **/
static inline uint16_t crc_calculate(const uint8_t* pBuffer, uint16_t length)
{
        uint16_t crcTmp;
        crc_init(&crcTmp);
	while (length--) {
80013842:	ef 09 ff f4 	ld.sh	r9,r7[-12]
80013846:	30 08       	mov	r8,0
80013848:	f0 09 19 00 	cp.h	r9,r8
8001384c:	5f 18       	srne	r8
8001384e:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80013852:	ef 08 ff f4 	ld.sh	r8,r7[-12]
80013856:	20 18       	sub	r8,1
80013858:	ef 58 ff f4 	st.h	r7[-12],r8
8001385c:	58 09       	cp.w	r9,0
8001385e:	ce 51       	brne	80013828 <crc_calculate+0x20>
                crc_accumulate(*pBuffer++, &crcTmp);
        }
        return crcTmp;
80013860:	ef 08 ff fe 	ld.sh	r8,r7[-2]
}
80013864:	10 9c       	mov	r12,r8
80013866:	2f dd       	sub	sp,-12
80013868:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001386c:	80 01       	ld.sh	r1,r0[0x0]
8001386e:	36 96       	mov	r6,105

80013870 <crc_accumulate_buffer>:
 *
 * @param data new bytes to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate_buffer(uint16_t *crcAccum, const char *pBuffer, uint8_t length)
{
80013870:	eb cd 40 c0 	pushm	r6-r7,lr
80013874:	1a 97       	mov	r7,sp
80013876:	20 4d       	sub	sp,16
80013878:	49 66       	lddpc	r6,800138d0 <crc_accumulate_buffer+0x60>
8001387a:	1e 26       	rsub	r6,pc
8001387c:	ef 4c ff f8 	st.w	r7[-8],r12
80013880:	ef 4b ff f4 	st.w	r7[-12],r11
80013884:	14 98       	mov	r8,r10
80013886:	ef 68 ff f0 	st.b	r7[-16],r8
	const uint8_t *p = (const uint8_t *)pBuffer;
8001388a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001388e:	ef 48 ff fc 	st.w	r7[-4],r8
	while (length--) {
80013892:	c0 d8       	rjmp	800138ac <crc_accumulate_buffer+0x3c>
                crc_accumulate(*p++, crcAccum);
80013894:	ee f8 ff fc 	ld.w	r8,r7[-4]
80013898:	11 88       	ld.ub	r8,r8[0x0]
8001389a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001389e:	2f f9       	sub	r9,-1
800138a0:	ef 49 ff fc 	st.w	r7[-4],r9
800138a4:	ee fb ff f8 	ld.w	r11,r7[-8]
800138a8:	10 9c       	mov	r12,r8
800138aa:	c5 df       	rcall	80013764 <crc_accumulate>
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate_buffer(uint16_t *crcAccum, const char *pBuffer, uint8_t length)
{
	const uint8_t *p = (const uint8_t *)pBuffer;
	while (length--) {
800138ac:	ef 39 ff f0 	ld.ub	r9,r7[-16]
800138b0:	30 08       	mov	r8,0
800138b2:	f0 09 18 00 	cp.b	r9,r8
800138b6:	5f 18       	srne	r8
800138b8:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800138bc:	ef 38 ff f0 	ld.ub	r8,r7[-16]
800138c0:	20 18       	sub	r8,1
800138c2:	ef 68 ff f0 	st.b	r7[-16],r8
800138c6:	58 09       	cp.w	r9,0
800138c8:	ce 61       	brne	80013894 <crc_accumulate_buffer+0x24>
                crc_accumulate(*p++, crcAccum);
        }
}
800138ca:	2f cd       	sub	sp,-16
800138cc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800138d0:	80 01       	ld.sh	r1,r0[0x0]
800138d2:	36 fe       	mov	lr,111

800138d4 <mavlink_get_channel_status>:
/*
 * Internal function to give access to the channel status for each channel
 */
#ifndef MAVLINK_GET_CHANNEL_STATUS
MAVLINK_HELPER mavlink_status_t* mavlink_get_channel_status(uint8_t chan)
{
800138d4:	eb cd 40 c0 	pushm	r6-r7,lr
800138d8:	1a 97       	mov	r7,sp
800138da:	20 1d       	sub	sp,4
800138dc:	48 96       	lddpc	r6,80013900 <mavlink_get_channel_status+0x2c>
800138de:	1e 26       	rsub	r6,pc
800138e0:	18 98       	mov	r8,r12
800138e2:	ef 68 ff fc 	st.b	r7[-4],r8
	static mavlink_status_t m_mavlink_status[MAVLINK_COMM_NUM_BUFFERS];
	return &m_mavlink_status[chan];
800138e6:	ef 38 ff fc 	ld.ub	r8,r7[-4]
800138ea:	f0 09 15 04 	lsl	r9,r8,0x4
800138ee:	ec f8 08 c4 	ld.w	r8,r6[2244]
800138f2:	f2 08 00 08 	add	r8,r9,r8
}
800138f6:	10 9c       	mov	r12,r8
800138f8:	2f fd       	sub	sp,-4
800138fa:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800138fe:	00 00       	add	r0,r0
80013900:	80 01       	ld.sh	r1,r0[0x0]
80013902:	37 62       	mov	r2,118

80013904 <_mav_finalize_message_chan_send>:
MAVLINK_HELPER void _mav_finalize_message_chan_send(mavlink_channel_t chan, uint8_t msgid, const char *packet, 
						    uint8_t length, uint8_t crc_extra)
#else
MAVLINK_HELPER void _mav_finalize_message_chan_send(mavlink_channel_t chan, uint8_t msgid, const char *packet, uint8_t length)
#endif
{
80013904:	eb cd 40 c0 	pushm	r6-r7,lr
80013908:	1a 97       	mov	r7,sp
8001390a:	20 9d       	sub	sp,36
8001390c:	4b d6       	lddpc	r6,80013a00 <_mav_finalize_message_chan_send+0xfc>
8001390e:	1e 26       	rsub	r6,pc
80013910:	ef 4c ff ec 	st.w	r7[-20],r12
80013914:	ef 4a ff e4 	st.w	r7[-28],r10
80013918:	16 9a       	mov	r10,r11
8001391a:	ef 6a ff e8 	st.b	r7[-24],r10
8001391e:	ef 69 ff e0 	st.b	r7[-32],r9
80013922:	ef 68 ff dc 	st.b	r7[-36],r8
	uint16_t checksum;
	uint8_t buf[MAVLINK_NUM_HEADER_BYTES];
	uint8_t ck[2];
	mavlink_status_t *status = mavlink_get_channel_status(chan);
80013926:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001392a:	5c 58       	castu.b	r8
8001392c:	10 9c       	mov	r12,r8
8001392e:	cd 3f       	rcall	800138d4 <mavlink_get_channel_status>
80013930:	18 98       	mov	r8,r12
80013932:	ef 48 ff fc 	st.w	r7[-4],r8
	buf[0] = MAVLINK_STX;
80013936:	3f e8       	mov	r8,-2
80013938:	ef 68 ff f4 	st.b	r7[-12],r8
	buf[1] = length;
8001393c:	ef 38 ff e0 	ld.ub	r8,r7[-32]
80013940:	ef 68 ff f5 	st.b	r7[-11],r8
	buf[2] = status->current_tx_seq;
80013944:	ee f8 ff fc 	ld.w	r8,r7[-4]
80013948:	f1 38 00 0a 	ld.ub	r8,r8[10]
8001394c:	ef 68 ff f6 	st.b	r7[-10],r8
	buf[3] = mavlink_system.sysid;
80013950:	ec f8 00 70 	ld.w	r8,r6[112]
80013954:	11 88       	ld.ub	r8,r8[0x0]
80013956:	ef 68 ff f7 	st.b	r7[-9],r8
	buf[4] = mavlink_system.compid;
8001395a:	ec f8 00 70 	ld.w	r8,r6[112]
8001395e:	11 98       	ld.ub	r8,r8[0x1]
80013960:	ef 68 ff f8 	st.b	r7[-8],r8
	buf[5] = msgid;
80013964:	ef 38 ff e8 	ld.ub	r8,r7[-24]
80013968:	ef 68 ff f9 	st.b	r7[-7],r8
	status->current_tx_seq++;
8001396c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80013970:	f1 38 00 0a 	ld.ub	r8,r8[10]
80013974:	2f f8       	sub	r8,-1
80013976:	5c 58       	castu.b	r8
80013978:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001397c:	f3 68 00 0a 	st.b	r9[10],r8
	checksum = crc_calculate((uint8_t*)&buf[1], MAVLINK_CORE_HEADER_LEN);
80013980:	ee c8 00 0c 	sub	r8,r7,12
80013984:	2f f8       	sub	r8,-1
80013986:	30 5b       	mov	r11,5
80013988:	10 9c       	mov	r12,r8
8001398a:	c3 ff       	rcall	80013808 <crc_calculate>
8001398c:	18 98       	mov	r8,r12
8001398e:	5c 88       	casts.h	r8
80013990:	ef 58 ff fa 	st.h	r7[-6],r8
	crc_accumulate_buffer(&checksum, packet, length);
80013994:	ef 39 ff e0 	ld.ub	r9,r7[-32]
80013998:	ee c8 00 06 	sub	r8,r7,6
8001399c:	12 9a       	mov	r10,r9
8001399e:	ee fb ff e4 	ld.w	r11,r7[-28]
800139a2:	10 9c       	mov	r12,r8
800139a4:	c6 6f       	rcall	80013870 <crc_accumulate_buffer>
#if MAVLINK_CRC_EXTRA
	crc_accumulate(crc_extra, &checksum);
800139a6:	ef 38 ff dc 	ld.ub	r8,r7[-36]
800139aa:	ee c9 00 06 	sub	r9,r7,6
800139ae:	12 9b       	mov	r11,r9
800139b0:	10 9c       	mov	r12,r8
800139b2:	cd 9e       	rcall	80013764 <crc_accumulate>
#endif
	ck[0] = (uint8_t)(checksum & 0xFF);
800139b4:	ef 08 ff fa 	ld.sh	r8,r7[-6]
800139b8:	5c 58       	castu.b	r8
800139ba:	ef 68 ff f0 	st.b	r7[-16],r8
	ck[1] = (uint8_t)(checksum >> 8);
800139be:	ef 08 ff fa 	ld.sh	r8,r7[-6]
800139c2:	5c 78       	castu.h	r8
800139c4:	a9 88       	lsr	r8,0x8
800139c6:	5c 88       	casts.h	r8
800139c8:	5c 58       	castu.b	r8
800139ca:	ef 68 ff f1 	st.b	r7[-15],r8

	MAVLINK_START_UART_SEND(chan, MAVLINK_NUM_NON_PAYLOAD_BYTES + (uint16_t)length);
	_mavlink_send_uart(chan, (const char *)buf, MAVLINK_NUM_HEADER_BYTES);
800139ce:	ee c8 00 0c 	sub	r8,r7,12
800139d2:	30 6a       	mov	r10,6
800139d4:	10 9b       	mov	r11,r8
800139d6:	ee fc ff ec 	ld.w	r12,r7[-20]
800139da:	c1 5c       	rcall	80013a04 <_mavlink_send_uart>
	_mavlink_send_uart(chan, packet, length);
800139dc:	ef 38 ff e0 	ld.ub	r8,r7[-32]
800139e0:	10 9a       	mov	r10,r8
800139e2:	ee fb ff e4 	ld.w	r11,r7[-28]
800139e6:	ee fc ff ec 	ld.w	r12,r7[-20]
800139ea:	c0 dc       	rcall	80013a04 <_mavlink_send_uart>
	_mavlink_send_uart(chan, (const char *)ck, 2);
800139ec:	ee c8 00 10 	sub	r8,r7,16
800139f0:	30 2a       	mov	r10,2
800139f2:	10 9b       	mov	r11,r8
800139f4:	ee fc ff ec 	ld.w	r12,r7[-20]
800139f8:	c0 6c       	rcall	80013a04 <_mavlink_send_uart>
	MAVLINK_END_UART_SEND(chan, MAVLINK_NUM_NON_PAYLOAD_BYTES + (uint16_t)length);
}
800139fa:	2f 7d       	sub	sp,-36
800139fc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80013a00:	80 01       	ld.sh	r1,r0[0x0]
80013a02:	37 92       	mov	r2,121

80013a04 <_mavlink_send_uart>:
    }
}
 */

MAVLINK_HELPER void _mavlink_send_uart(mavlink_channel_t chan, const char *buf, uint16_t len)
{
80013a04:	eb cd 40 c0 	pushm	r6-r7,lr
80013a08:	1a 97       	mov	r7,sp
80013a0a:	20 4d       	sub	sp,16
80013a0c:	49 46       	lddpc	r6,80013a5c <_mavlink_send_uart+0x58>
80013a0e:	1e 26       	rsub	r6,pc
80013a10:	ef 4c ff f8 	st.w	r7[-8],r12
80013a14:	ef 4b ff f4 	st.w	r7[-12],r11
80013a18:	14 98       	mov	r8,r10
80013a1a:	ef 58 ff f0 	st.h	r7[-16],r8
	   defines it */
	MAVLINK_SEND_UART_BYTES(chan, (const uint8_t *)buf, len);
#else
	/* fallback to one byte at a time */
	uint16_t i;
	for (i = 0; i < len; i++) {
80013a1e:	30 08       	mov	r8,0
80013a20:	ef 58 ff fe 	st.h	r7[-2],r8
80013a24:	c1 28       	rjmp	80013a48 <_mavlink_send_uart+0x44>
		comm_send_ch(chan, (uint8_t)buf[i]);
80013a26:	ef 18 ff fe 	ld.uh	r8,r7[-2]
80013a2a:	ee f9 ff f4 	ld.w	r9,r7[-12]
80013a2e:	f2 08 00 08 	add	r8,r9,r8
80013a32:	11 88       	ld.ub	r8,r8[0x0]
80013a34:	10 9b       	mov	r11,r8
80013a36:	ee fc ff f8 	ld.w	r12,r7[-8]
80013a3a:	f0 16 00 cd 	mcall	r6[820]
	   defines it */
	MAVLINK_SEND_UART_BYTES(chan, (const uint8_t *)buf, len);
#else
	/* fallback to one byte at a time */
	uint16_t i;
	for (i = 0; i < len; i++) {
80013a3e:	ef 08 ff fe 	ld.sh	r8,r7[-2]
80013a42:	2f f8       	sub	r8,-1
80013a44:	ef 58 ff fe 	st.h	r7[-2],r8
80013a48:	ef 09 ff fe 	ld.sh	r9,r7[-2]
80013a4c:	ef 08 ff f0 	ld.sh	r8,r7[-16]
80013a50:	f0 09 19 00 	cp.h	r9,r8
80013a54:	ce 93       	brcs	80013a26 <_mavlink_send_uart+0x22>
		comm_send_ch(chan, (uint8_t)buf[i]);
	}
#endif
}
80013a56:	2f cd       	sub	sp,-16
80013a58:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80013a5c:	80 01       	ld.sh	r1,r0[0x0]
80013a5e:	38 92       	mov	r2,-119

80013a60 <byte_swap_2>:
	return msg->len + MAVLINK_NUM_NON_PAYLOAD_BYTES;
}

#if MAVLINK_NEED_BYTE_SWAP
static inline void byte_swap_2(char *dst, const char *src)
{
80013a60:	eb cd 40 80 	pushm	r7,lr
80013a64:	1a 97       	mov	r7,sp
80013a66:	20 2d       	sub	sp,8
80013a68:	ef 4c ff fc 	st.w	r7[-4],r12
80013a6c:	ef 4b ff f8 	st.w	r7[-8],r11
	dst[0] = src[1];
80013a70:	ee f8 ff f8 	ld.w	r8,r7[-8]
80013a74:	2f f8       	sub	r8,-1
80013a76:	11 88       	ld.ub	r8,r8[0x0]
80013a78:	ee f9 ff fc 	ld.w	r9,r7[-4]
80013a7c:	b2 88       	st.b	r9[0x0],r8
	dst[1] = src[0];
80013a7e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80013a82:	f0 c9 ff ff 	sub	r9,r8,-1
80013a86:	ee f8 ff f8 	ld.w	r8,r7[-8]
80013a8a:	11 88       	ld.ub	r8,r8[0x0]
80013a8c:	b2 88       	st.b	r9[0x0],r8
}
80013a8e:	2f ed       	sub	sp,-8
80013a90:	e3 cd 80 80 	ldm	sp++,r7,pc

80013a94 <byte_swap_4>:
static inline void byte_swap_4(char *dst, const char *src)
{
80013a94:	eb cd 40 80 	pushm	r7,lr
80013a98:	1a 97       	mov	r7,sp
80013a9a:	20 2d       	sub	sp,8
80013a9c:	ef 4c ff fc 	st.w	r7[-4],r12
80013aa0:	ef 4b ff f8 	st.w	r7[-8],r11
	dst[0] = src[3];
80013aa4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80013aa8:	2f d8       	sub	r8,-3
80013aaa:	11 88       	ld.ub	r8,r8[0x0]
80013aac:	ee f9 ff fc 	ld.w	r9,r7[-4]
80013ab0:	b2 88       	st.b	r9[0x0],r8
	dst[1] = src[2];
80013ab2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80013ab6:	f0 c9 ff ff 	sub	r9,r8,-1
80013aba:	ee f8 ff f8 	ld.w	r8,r7[-8]
80013abe:	2f e8       	sub	r8,-2
80013ac0:	11 88       	ld.ub	r8,r8[0x0]
80013ac2:	b2 88       	st.b	r9[0x0],r8
	dst[2] = src[1];
80013ac4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80013ac8:	f0 c9 ff fe 	sub	r9,r8,-2
80013acc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80013ad0:	2f f8       	sub	r8,-1
80013ad2:	11 88       	ld.ub	r8,r8[0x0]
80013ad4:	b2 88       	st.b	r9[0x0],r8
	dst[3] = src[0];
80013ad6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80013ada:	f0 c9 ff fd 	sub	r9,r8,-3
80013ade:	ee f8 ff f8 	ld.w	r8,r7[-8]
80013ae2:	11 88       	ld.ub	r8,r8[0x0]
80013ae4:	b2 88       	st.b	r9[0x0],r8
}
80013ae6:	2f ed       	sub	sp,-8
80013ae8:	e3 cd 80 80 	ldm	sp++,r7,pc

80013aec <mav_array_memcpy>:

/*
  like memcpy(), but if src is NULL, do a memset to zero
*/
static void mav_array_memcpy(void *dest, const void *src, size_t n)
{
80013aec:	eb cd 40 c0 	pushm	r6-r7,lr
80013af0:	1a 97       	mov	r7,sp
80013af2:	20 3d       	sub	sp,12
80013af4:	49 06       	lddpc	r6,80013b34 <mav_array_memcpy+0x48>
80013af6:	1e 26       	rsub	r6,pc
80013af8:	ef 4c ff fc 	st.w	r7[-4],r12
80013afc:	ef 4b ff f8 	st.w	r7[-8],r11
80013b00:	ef 4a ff f4 	st.w	r7[-12],r10
	if (src == NULL) {
80013b04:	ee f8 ff f8 	ld.w	r8,r7[-8]
80013b08:	58 08       	cp.w	r8,0
80013b0a:	c0 91       	brne	80013b1c <mav_array_memcpy+0x30>
		memset(dest, 0, n);
80013b0c:	ee fa ff f4 	ld.w	r10,r7[-12]
80013b10:	30 0b       	mov	r11,0
80013b12:	ee fc ff fc 	ld.w	r12,r7[-4]
80013b16:	f0 16 00 30 	mcall	r6[192]
80013b1a:	c0 98       	rjmp	80013b2c <mav_array_memcpy+0x40>
	} else {
		memcpy(dest, src, n);
80013b1c:	ee fa ff f4 	ld.w	r10,r7[-12]
80013b20:	ee fb ff f8 	ld.w	r11,r7[-8]
80013b24:	ee fc ff fc 	ld.w	r12,r7[-4]
80013b28:	f0 16 00 20 	mcall	r6[128]
	}
}
80013b2c:	2f dd       	sub	sp,-12
80013b2e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80013b32:	00 00       	add	r0,r0
80013b34:	80 01       	ld.sh	r1,r0[0x0]
80013b36:	39 7a       	mov	r10,-105

80013b38 <_mav_put_char_array>:

/*
 * Place a char array into a buffer
 */
static inline void _mav_put_char_array(char *buf, uint8_t wire_offset, const char *b, uint8_t array_length)
{
80013b38:	eb cd 40 c0 	pushm	r6-r7,lr
80013b3c:	1a 97       	mov	r7,sp
80013b3e:	20 4d       	sub	sp,16
80013b40:	48 e6       	lddpc	r6,80013b78 <_mav_put_char_array+0x40>
80013b42:	1e 26       	rsub	r6,pc
80013b44:	ef 4c ff fc 	st.w	r7[-4],r12
80013b48:	ef 4a ff f4 	st.w	r7[-12],r10
80013b4c:	12 98       	mov	r8,r9
80013b4e:	16 99       	mov	r9,r11
80013b50:	ef 69 ff f8 	st.b	r7[-8],r9
80013b54:	ef 68 ff f0 	st.b	r7[-16],r8
	mav_array_memcpy(&buf[wire_offset], b, array_length);
80013b58:	ef 39 ff f0 	ld.ub	r9,r7[-16]
80013b5c:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80013b60:	ee fa ff fc 	ld.w	r10,r7[-4]
80013b64:	f4 08 00 08 	add	r8,r10,r8
80013b68:	12 9a       	mov	r10,r9
80013b6a:	ee fb ff f4 	ld.w	r11,r7[-12]
80013b6e:	10 9c       	mov	r12,r8
80013b70:	cb ef       	rcall	80013aec <mav_array_memcpy>

}
80013b72:	2f cd       	sub	sp,-16
80013b74:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80013b78:	80 01       	ld.sh	r1,r0[0x0]
80013b7a:	39 c6       	mov	r6,-100

80013b7c <_MAV_RETURN_float>:
_MAV_MSG_RETURN_TYPE(int16_t,  2)
_MAV_MSG_RETURN_TYPE(uint32_t, 4)
_MAV_MSG_RETURN_TYPE(int32_t,  4)
_MAV_MSG_RETURN_TYPE(uint64_t, 8)
_MAV_MSG_RETURN_TYPE(int64_t,  8)
_MAV_MSG_RETURN_TYPE(float,    4)
80013b7c:	eb cd 40 c0 	pushm	r6-r7,lr
80013b80:	1a 97       	mov	r7,sp
80013b82:	20 3d       	sub	sp,12
80013b84:	48 d6       	lddpc	r6,80013bb8 <_MAV_RETURN_float+0x3c>
80013b86:	1e 26       	rsub	r6,pc
80013b88:	ef 4c ff f8 	st.w	r7[-8],r12
80013b8c:	16 98       	mov	r8,r11
80013b8e:	ef 68 ff f4 	st.b	r7[-12],r8
80013b92:	ee f8 ff f8 	ld.w	r8,r7[-8]
80013b96:	2f 88       	sub	r8,-8
80013b98:	10 99       	mov	r9,r8
80013b9a:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80013b9e:	10 09       	add	r9,r8
80013ba0:	ee c8 00 04 	sub	r8,r7,4
80013ba4:	12 9b       	mov	r11,r9
80013ba6:	10 9c       	mov	r12,r8
80013ba8:	c7 6f       	rcall	80013a94 <byte_swap_4>
80013baa:	ee f8 ff fc 	ld.w	r8,r7[-4]
80013bae:	10 9c       	mov	r12,r8
80013bb0:	2f dd       	sub	sp,-12
80013bb2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80013bb6:	00 00       	add	r0,r0
80013bb8:	80 01       	ld.sh	r1,r0[0x0]
80013bba:	3a 0a       	mov	r10,-96

80013bbc <_MAV_RETURN_char_array>:
_MAV_MSG_RETURN_TYPE(double)
#endif // MAVLINK_NEED_BYTE_SWAP

static inline uint16_t _MAV_RETURN_char_array(const mavlink_message_t *msg, char *value, 
						     uint8_t array_length, uint8_t wire_offset)
{
80013bbc:	eb cd 40 c0 	pushm	r6-r7,lr
80013bc0:	1a 97       	mov	r7,sp
80013bc2:	20 4d       	sub	sp,16
80013bc4:	49 16       	lddpc	r6,80013c08 <_MAV_RETURN_char_array+0x4c>
80013bc6:	1e 26       	rsub	r6,pc
80013bc8:	ef 4c ff fc 	st.w	r7[-4],r12
80013bcc:	ef 4b ff f8 	st.w	r7[-8],r11
80013bd0:	12 98       	mov	r8,r9
80013bd2:	14 99       	mov	r9,r10
80013bd4:	ef 69 ff f4 	st.b	r7[-12],r9
80013bd8:	ef 68 ff f0 	st.b	r7[-16],r8
	memcpy(value, &_MAV_PAYLOAD(msg)[wire_offset], array_length);
80013bdc:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80013be0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80013be4:	f0 ca ff f8 	sub	r10,r8,-8
80013be8:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80013bec:	f4 08 00 08 	add	r8,r10,r8
80013bf0:	12 9a       	mov	r10,r9
80013bf2:	10 9b       	mov	r11,r8
80013bf4:	ee fc ff f8 	ld.w	r12,r7[-8]
80013bf8:	f0 16 00 20 	mcall	r6[128]
	return array_length;
80013bfc:	ef 38 ff f4 	ld.ub	r8,r7[-12]
}
80013c00:	10 9c       	mov	r12,r8
80013c02:	2f cd       	sub	sp,-16
80013c04:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80013c08:	80 01       	ld.sh	r1,r0[0x0]
80013c0a:	3a 4a       	mov	r10,-92

80013c0c <mavlink_msg_param_value_send>:
 * @param param_index Index of this onboard parameter
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_param_value_send(mavlink_channel_t chan, const char *param_id, float param_value, uint8_t param_type, uint16_t param_count, uint16_t param_index)
{
80013c0c:	eb cd 40 c0 	pushm	r6-r7,lr
80013c10:	1a 97       	mov	r7,sp
80013c12:	20 dd       	sub	sp,52
80013c14:	4a 16       	lddpc	r6,80013c98 <mavlink_msg_param_value_send+0x8c>
80013c16:	1e 26       	rsub	r6,pc
80013c18:	ee ce ff f4 	sub	lr,r7,-12
80013c1c:	ef 4c ff e0 	st.w	r7[-32],r12
80013c20:	ef 4b ff dc 	st.w	r7[-36],r11
80013c24:	ef 4a ff d8 	st.w	r7[-40],r10
80013c28:	12 9a       	mov	r10,r9
80013c2a:	10 99       	mov	r9,r8
80013c2c:	7c 08       	ld.w	r8,lr[0x0]
80013c2e:	ef 6a ff d4 	st.b	r7[-44],r10
80013c32:	ef 59 ff d0 	st.h	r7[-48],r9
80013c36:	ef 58 ff cc 	st.h	r7[-52],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_PARAM_VALUE_LEN];
	_mav_put_float(buf, 0, param_value);
80013c3a:	ee c9 00 28 	sub	r9,r7,40
80013c3e:	ee c8 00 1c 	sub	r8,r7,28
80013c42:	12 9b       	mov	r11,r9
80013c44:	10 9c       	mov	r12,r8
80013c46:	c2 7f       	rcall	80013a94 <byte_swap_4>
	_mav_put_uint16_t(buf, 4, param_count);
80013c48:	ee c9 00 30 	sub	r9,r7,48
80013c4c:	ee c8 00 1c 	sub	r8,r7,28
80013c50:	2f c8       	sub	r8,-4
80013c52:	12 9b       	mov	r11,r9
80013c54:	10 9c       	mov	r12,r8
80013c56:	c0 5f       	rcall	80013a60 <byte_swap_2>
	_mav_put_uint16_t(buf, 6, param_index);
80013c58:	ee c9 00 34 	sub	r9,r7,52
80013c5c:	ee c8 00 1c 	sub	r8,r7,28
80013c60:	2f a8       	sub	r8,-6
80013c62:	12 9b       	mov	r11,r9
80013c64:	10 9c       	mov	r12,r8
80013c66:	cf de       	rcall	80013a60 <byte_swap_2>
	_mav_put_uint8_t(buf, 24, param_type);
80013c68:	ef 38 ff d4 	ld.ub	r8,r7[-44]
80013c6c:	ef 68 ff fc 	st.b	r7[-4],r8
	_mav_put_char_array(buf, 8, param_id, 16);
80013c70:	ee c8 00 1c 	sub	r8,r7,28
80013c74:	31 09       	mov	r9,16
80013c76:	ee fa ff dc 	ld.w	r10,r7[-36]
80013c7a:	30 8b       	mov	r11,8
80013c7c:	10 9c       	mov	r12,r8
80013c7e:	c5 df       	rcall	80013b38 <_mav_put_char_array>
#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_PARAM_VALUE, buf, MAVLINK_MSG_ID_PARAM_VALUE_LEN, MAVLINK_MSG_ID_PARAM_VALUE_CRC);
80013c80:	ee ca 00 1c 	sub	r10,r7,28
80013c84:	e0 68 00 dc 	mov	r8,220
80013c88:	31 99       	mov	r9,25
80013c8a:	31 6b       	mov	r11,22
80013c8c:	ee fc ff e0 	ld.w	r12,r7[-32]
80013c90:	c3 ae       	rcall	80013904 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_PARAM_VALUE, (const char *)&packet, MAVLINK_MSG_ID_PARAM_VALUE_LEN, MAVLINK_MSG_ID_PARAM_VALUE_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_PARAM_VALUE, (const char *)&packet, MAVLINK_MSG_ID_PARAM_VALUE_LEN);
#endif
#endif
}
80013c92:	2f 3d       	sub	sp,-52
80013c94:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80013c98:	80 01       	ld.sh	r1,r0[0x0]
80013c9a:	3a 9a       	mov	r10,-87

80013c9c <mavlink_msg_param_set_get_target_system>:
 * @brief Get field target_system from param_set message
 *
 * @return System ID
 */
static inline uint8_t mavlink_msg_param_set_get_target_system(const mavlink_message_t* msg)
{
80013c9c:	eb cd 40 80 	pushm	r7,lr
80013ca0:	1a 97       	mov	r7,sp
80013ca2:	20 1d       	sub	sp,4
80013ca4:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  4);
80013ca8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80013cac:	2f 88       	sub	r8,-8
80013cae:	2f c8       	sub	r8,-4
80013cb0:	11 88       	ld.ub	r8,r8[0x0]
}
80013cb2:	10 9c       	mov	r12,r8
80013cb4:	2f fd       	sub	sp,-4
80013cb6:	e3 cd 80 80 	ldm	sp++,r7,pc

80013cba <mavlink_msg_param_set_get_target_component>:
 * @brief Get field target_component from param_set message
 *
 * @return Component ID
 */
static inline uint8_t mavlink_msg_param_set_get_target_component(const mavlink_message_t* msg)
{
80013cba:	eb cd 40 80 	pushm	r7,lr
80013cbe:	1a 97       	mov	r7,sp
80013cc0:	20 1d       	sub	sp,4
80013cc2:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  5);
80013cc6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80013cca:	2f 88       	sub	r8,-8
80013ccc:	2f b8       	sub	r8,-5
80013cce:	11 88       	ld.ub	r8,r8[0x0]
}
80013cd0:	10 9c       	mov	r12,r8
80013cd2:	2f fd       	sub	sp,-4
80013cd4:	e3 cd 80 80 	ldm	sp++,r7,pc

80013cd8 <mavlink_msg_param_set_get_param_id>:
 * @brief Get field param_id from param_set message
 *
 * @return Onboard parameter id, terminated by NULL if the length is less than 16 human-readable chars and WITHOUT null termination (NULL) byte if the length is exactly 16 chars - applications have to provide 16+1 bytes storage if the ID is stored as string
 */
static inline uint16_t mavlink_msg_param_set_get_param_id(const mavlink_message_t* msg, char *param_id)
{
80013cd8:	eb cd 40 c0 	pushm	r6-r7,lr
80013cdc:	1a 97       	mov	r7,sp
80013cde:	20 2d       	sub	sp,8
80013ce0:	48 a6       	lddpc	r6,80013d08 <mavlink_msg_param_set_get_param_id+0x30>
80013ce2:	1e 26       	rsub	r6,pc
80013ce4:	ef 4c ff fc 	st.w	r7[-4],r12
80013ce8:	ef 4b ff f8 	st.w	r7[-8],r11
	return _MAV_RETURN_char_array(msg, param_id, 16,  6);
80013cec:	30 69       	mov	r9,6
80013cee:	31 0a       	mov	r10,16
80013cf0:	ee fb ff f8 	ld.w	r11,r7[-8]
80013cf4:	ee fc ff fc 	ld.w	r12,r7[-4]
80013cf8:	c6 2f       	rcall	80013bbc <_MAV_RETURN_char_array>
80013cfa:	18 98       	mov	r8,r12
80013cfc:	5c 88       	casts.h	r8
80013cfe:	5c 88       	casts.h	r8
}
80013d00:	10 9c       	mov	r12,r8
80013d02:	2f ed       	sub	sp,-8
80013d04:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80013d08:	80 01       	ld.sh	r1,r0[0x0]
80013d0a:	3b 66       	mov	r6,-74

80013d0c <mavlink_msg_param_set_get_param_value>:
 * @brief Get field param_value from param_set message
 *
 * @return Onboard parameter value
 */
static inline float mavlink_msg_param_set_get_param_value(const mavlink_message_t* msg)
{
80013d0c:	eb cd 40 c0 	pushm	r6-r7,lr
80013d10:	1a 97       	mov	r7,sp
80013d12:	20 1d       	sub	sp,4
80013d14:	48 76       	lddpc	r6,80013d30 <mavlink_msg_param_set_get_param_value+0x24>
80013d16:	1e 26       	rsub	r6,pc
80013d18:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_float(msg,  0);
80013d1c:	30 0b       	mov	r11,0
80013d1e:	ee fc ff fc 	ld.w	r12,r7[-4]
80013d22:	c2 df       	rcall	80013b7c <_MAV_RETURN_float>
80013d24:	18 98       	mov	r8,r12
}
80013d26:	10 9c       	mov	r12,r8
80013d28:	2f fd       	sub	sp,-4
80013d2a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80013d2e:	00 00       	add	r0,r0
80013d30:	80 01       	ld.sh	r1,r0[0x0]
80013d32:	3b 9a       	mov	r10,-71

80013d34 <mavlink_msg_param_set_get_param_type>:
 * @brief Get field param_type from param_set message
 *
 * @return Onboard parameter type: see the MAV_PARAM_TYPE enum for supported data types.
 */
static inline uint8_t mavlink_msg_param_set_get_param_type(const mavlink_message_t* msg)
{
80013d34:	eb cd 40 80 	pushm	r7,lr
80013d38:	1a 97       	mov	r7,sp
80013d3a:	20 1d       	sub	sp,4
80013d3c:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  22);
80013d40:	ee f8 ff fc 	ld.w	r8,r7[-4]
80013d44:	2f 88       	sub	r8,-8
80013d46:	2e a8       	sub	r8,-22
80013d48:	11 88       	ld.ub	r8,r8[0x0]
}
80013d4a:	10 9c       	mov	r12,r8
80013d4c:	2f fd       	sub	sp,-4
80013d4e:	e3 cd 80 80 	ldm	sp++,r7,pc

80013d52 <mavlink_msg_param_set_decode>:
 *
 * @param msg The message to decode
 * @param param_set C-struct to decode the message contents into
 */
static inline void mavlink_msg_param_set_decode(const mavlink_message_t* msg, mavlink_param_set_t* param_set)
{
80013d52:	eb cd 40 c0 	pushm	r6-r7,lr
80013d56:	1a 97       	mov	r7,sp
80013d58:	20 2d       	sub	sp,8
80013d5a:	49 76       	lddpc	r6,80013db4 <mavlink_msg_param_set_decode+0x62>
80013d5c:	1e 26       	rsub	r6,pc
80013d5e:	ef 4c ff fc 	st.w	r7[-4],r12
80013d62:	ef 4b ff f8 	st.w	r7[-8],r11
#if MAVLINK_NEED_BYTE_SWAP
	param_set->param_value = mavlink_msg_param_set_get_param_value(msg);
80013d66:	ee fc ff fc 	ld.w	r12,r7[-4]
80013d6a:	cd 1f       	rcall	80013d0c <mavlink_msg_param_set_get_param_value>
80013d6c:	18 99       	mov	r9,r12
80013d6e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80013d72:	91 09       	st.w	r8[0x0],r9
	param_set->target_system = mavlink_msg_param_set_get_target_system(msg);
80013d74:	ee fc ff fc 	ld.w	r12,r7[-4]
80013d78:	c9 2f       	rcall	80013c9c <mavlink_msg_param_set_get_target_system>
80013d7a:	18 98       	mov	r8,r12
80013d7c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80013d80:	b2 c8       	st.b	r9[0x4],r8
	param_set->target_component = mavlink_msg_param_set_get_target_component(msg);
80013d82:	ee fc ff fc 	ld.w	r12,r7[-4]
80013d86:	c9 af       	rcall	80013cba <mavlink_msg_param_set_get_target_component>
80013d88:	18 98       	mov	r8,r12
80013d8a:	ee f9 ff f8 	ld.w	r9,r7[-8]
80013d8e:	b2 d8       	st.b	r9[0x5],r8
	mavlink_msg_param_set_get_param_id(msg, param_set->param_id);
80013d90:	ee f8 ff f8 	ld.w	r8,r7[-8]
80013d94:	2f a8       	sub	r8,-6
80013d96:	10 9b       	mov	r11,r8
80013d98:	ee fc ff fc 	ld.w	r12,r7[-4]
80013d9c:	c9 ef       	rcall	80013cd8 <mavlink_msg_param_set_get_param_id>
	param_set->param_type = mavlink_msg_param_set_get_param_type(msg);
80013d9e:	ee fc ff fc 	ld.w	r12,r7[-4]
80013da2:	cc 9f       	rcall	80013d34 <mavlink_msg_param_set_get_param_type>
80013da4:	18 98       	mov	r8,r12
80013da6:	ee f9 ff f8 	ld.w	r9,r7[-8]
80013daa:	f3 68 00 16 	st.b	r9[22],r8
#else
	memcpy(param_set, _MAV_PAYLOAD(msg), MAVLINK_MSG_ID_PARAM_SET_LEN);
#endif
}
80013dae:	2f ed       	sub	sp,-8
80013db0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80013db4:	80 01       	ld.sh	r1,r0[0x0]
80013db6:	3b e0       	mov	r0,-66

80013db8 <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
80013db8:	eb cd 40 c0 	pushm	r6-r7,lr
80013dbc:	1a 97       	mov	r7,sp
80013dbe:	20 6d       	sub	sp,24
80013dc0:	49 e6       	lddpc	r6,80013e38 <interpolate+0x80>
80013dc2:	1e 26       	rsub	r6,pc
80013dc4:	ef 4c ff f8 	st.w	r7[-8],r12
80013dc8:	ef 4b ff f4 	st.w	r7[-12],r11
80013dcc:	ef 4a ff f0 	st.w	r7[-16],r10
80013dd0:	ef 49 ff ec 	st.w	r7[-20],r9
80013dd4:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
80013dd8:	ee f9 ff f4 	ld.w	r9,r7[-12]
80013ddc:	ee f8 ff f0 	ld.w	r8,r7[-16]
80013de0:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
80013de4:	c0 41       	brne	80013dec <interpolate+0x34>
	{
		return y1;
80013de6:	ee f8 ff ec 	ld.w	r8,r7[-20]
80013dea:	c2 38       	rjmp	80013e30 <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
80013dec:	ee f9 ff e8 	ld.w	r9,r7[-24]
80013df0:	ee f8 ff ec 	ld.w	r8,r7[-20]
80013df4:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80013df8:	ee fa ff f8 	ld.w	r10,r7[-8]
80013dfc:	ee f8 ff f4 	ld.w	r8,r7[-12]
80013e00:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80013e04:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80013e08:	ee fa ff f0 	ld.w	r10,r7[-16]
80013e0c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80013e10:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80013e14:	12 9b       	mov	r11,r9
80013e16:	10 9c       	mov	r12,r8
80013e18:	f0 16 00 08 	mcall	r6[32]
80013e1c:	18 98       	mov	r8,r12
80013e1e:	10 99       	mov	r9,r8
80013e20:	ee f8 ff ec 	ld.w	r8,r7[-20]
80013e24:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80013e28:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
80013e2c:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
80013e30:	10 9c       	mov	r12,r8
80013e32:	2f ad       	sub	sp,-24
80013e34:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80013e38:	80 01       	ld.sh	r1,r0[0x0]
80013e3a:	3c 46       	mov	r6,-60

80013e3c <init_onboard_parameters>:
#include "flashc.h"
#include "print_util.h"

Parameter_Set_t param_set;

void init_onboard_parameters(void) {
80013e3c:	eb cd 40 c0 	pushm	r6-r7,lr
80013e40:	1a 97       	mov	r7,sp
80013e42:	48 a6       	lddpc	r6,80013e68 <init_onboard_parameters+0x2c>
80013e44:	1e 26       	rsub	r6,pc
	param_set.param_count = 0;
80013e46:	ec f8 00 28 	ld.w	r8,r6[40]
80013e4a:	30 09       	mov	r9,0
80013e4c:	f1 49 0d 20 	st.w	r8[3360],r9
	param_set.enumerate=false;
80013e50:	ec f9 00 28 	ld.w	r9,r6[40]
80013e54:	30 08       	mov	r8,0
80013e56:	f3 68 0d 24 	st.b	r9[3364],r8
	param_set.transmit_parameter_index=0;
80013e5a:	ec f8 00 28 	ld.w	r8,r6[40]
80013e5e:	30 09       	mov	r9,0
80013e60:	f1 49 0d 28 	st.w	r8[3368],r9
	
}
80013e64:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80013e68:	80 01       	ld.sh	r1,r0[0x0]
80013e6a:	3c c8       	mov	r8,-52

80013e6c <add_parameter_uint8>:

void add_parameter_uint8(uint8_t* val, const char* param_name) {
80013e6c:	eb cd 40 e0 	pushm	r5-r7,lr
80013e70:	1a 97       	mov	r7,sp
80013e72:	20 2d       	sub	sp,8
80013e74:	4b 66       	lddpc	r6,80013f4c <add_parameter_uint8+0xe0>
80013e76:	1e 26       	rsub	r6,pc
80013e78:	ef 4c ff fc 	st.w	r7[-4],r12
80013e7c:	ef 4b ff f8 	st.w	r7[-8],r11
	param_set.parameters[param_set.param_count].param = val;
80013e80:	ec f8 00 28 	ld.w	r8,r6[40]
80013e84:	f0 f9 0d 20 	ld.w	r9,r8[3360]
80013e88:	ee fa ff fc 	ld.w	r10,r7[-4]
80013e8c:	ec fb 00 28 	ld.w	r11,r6[40]
80013e90:	12 98       	mov	r8,r9
80013e92:	a3 78       	lsl	r8,0x3
80013e94:	12 18       	sub	r8,r9
80013e96:	a3 68       	lsl	r8,0x2
80013e98:	f6 08 00 08 	add	r8,r11,r8
80013e9c:	91 0a       	st.w	r8[0x0],r10
	strcpy(param_set.parameters[param_set.param_count].param_name, param_name);
80013e9e:	ec f8 00 28 	ld.w	r8,r6[40]
80013ea2:	f0 f9 0d 20 	ld.w	r9,r8[3360]
80013ea6:	12 98       	mov	r8,r9
80013ea8:	a3 78       	lsl	r8,0x3
80013eaa:	12 18       	sub	r8,r9
80013eac:	2f f8       	sub	r8,-1
80013eae:	f0 09 15 02 	lsl	r9,r8,0x2
80013eb2:	ec f8 00 28 	ld.w	r8,r6[40]
80013eb6:	f2 08 00 08 	add	r8,r9,r8
80013eba:	ee fb ff f8 	ld.w	r11,r7[-8]
80013ebe:	10 9c       	mov	r12,r8
80013ec0:	f0 16 00 92 	mcall	r6[584]
	param_set.parameters[param_set.param_count].data_type= MAVLINK_TYPE_UINT8_T;
80013ec4:	ec f8 00 28 	ld.w	r8,r6[40]
80013ec8:	f0 f9 0d 20 	ld.w	r9,r8[3360]
80013ecc:	ec fa 00 28 	ld.w	r10,r6[40]
80013ed0:	12 98       	mov	r8,r9
80013ed2:	a3 78       	lsl	r8,0x3
80013ed4:	12 18       	sub	r8,r9
80013ed6:	a3 68       	lsl	r8,0x2
80013ed8:	f4 08 00 08 	add	r8,r10,r8
80013edc:	2e c8       	sub	r8,-20
80013ede:	30 19       	mov	r9,1
80013ee0:	91 09       	st.w	r8[0x0],r9
	param_set.parameters[param_set.param_count].param_name_length = strlen(param_name);
80013ee2:	ec f8 00 28 	ld.w	r8,r6[40]
80013ee6:	f0 f5 0d 20 	ld.w	r5,r8[3360]
80013eea:	ee fc ff f8 	ld.w	r12,r7[-8]
80013eee:	f0 16 00 7c 	mcall	r6[496]
80013ef2:	18 98       	mov	r8,r12
80013ef4:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80013ef8:	ec fa 00 28 	ld.w	r10,r6[40]
80013efc:	0a 98       	mov	r8,r5
80013efe:	a3 78       	lsl	r8,0x3
80013f00:	0a 18       	sub	r8,r5
80013f02:	a3 68       	lsl	r8,0x2
80013f04:	f4 08 00 08 	add	r8,r10,r8
80013f08:	f0 ca ff e8 	sub	r10,r8,-24
80013f0c:	12 98       	mov	r8,r9
80013f0e:	b4 88       	st.b	r10[0x0],r8
	param_set.parameters[param_set.param_count].schedule_for_transmission=true;
80013f10:	ec f8 00 28 	ld.w	r8,r6[40]
80013f14:	f0 f9 0d 20 	ld.w	r9,r8[3360]
80013f18:	ec fa 00 28 	ld.w	r10,r6[40]
80013f1c:	12 98       	mov	r8,r9
80013f1e:	a3 78       	lsl	r8,0x3
80013f20:	12 18       	sub	r8,r9
80013f22:	a3 68       	lsl	r8,0x2
80013f24:	f4 08 00 08 	add	r8,r10,r8
80013f28:	f0 c9 ff e8 	sub	r9,r8,-24
80013f2c:	30 18       	mov	r8,1
80013f2e:	b2 a8       	st.b	r9[0x2],r8
	param_set.param_count++;
80013f30:	ec f8 00 28 	ld.w	r8,r6[40]
80013f34:	f0 f8 0d 20 	ld.w	r8,r8[3360]
80013f38:	f0 c9 ff ff 	sub	r9,r8,-1
80013f3c:	ec f8 00 28 	ld.w	r8,r6[40]
80013f40:	f1 49 0d 20 	st.w	r8[3360],r9
}
80013f44:	2f ed       	sub	sp,-8
80013f46:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80013f4a:	00 00       	add	r0,r0
80013f4c:	80 01       	ld.sh	r1,r0[0x0]
80013f4e:	3c fa       	mov	r10,-49

80013f50 <add_parameter_uint32>:

void add_parameter_uint32(uint32_t* val, const char* param_name) {
80013f50:	eb cd 40 e0 	pushm	r5-r7,lr
80013f54:	1a 97       	mov	r7,sp
80013f56:	20 2d       	sub	sp,8
80013f58:	4b 66       	lddpc	r6,80014030 <add_parameter_uint32+0xe0>
80013f5a:	1e 26       	rsub	r6,pc
80013f5c:	ef 4c ff fc 	st.w	r7[-4],r12
80013f60:	ef 4b ff f8 	st.w	r7[-8],r11
	param_set.parameters[param_set.param_count].param = val;
80013f64:	ec f8 00 28 	ld.w	r8,r6[40]
80013f68:	f0 f9 0d 20 	ld.w	r9,r8[3360]
80013f6c:	ee fa ff fc 	ld.w	r10,r7[-4]
80013f70:	ec fb 00 28 	ld.w	r11,r6[40]
80013f74:	12 98       	mov	r8,r9
80013f76:	a3 78       	lsl	r8,0x3
80013f78:	12 18       	sub	r8,r9
80013f7a:	a3 68       	lsl	r8,0x2
80013f7c:	f6 08 00 08 	add	r8,r11,r8
80013f80:	91 0a       	st.w	r8[0x0],r10
	strcpy(param_set.parameters[param_set.param_count].param_name, param_name);
80013f82:	ec f8 00 28 	ld.w	r8,r6[40]
80013f86:	f0 f9 0d 20 	ld.w	r9,r8[3360]
80013f8a:	12 98       	mov	r8,r9
80013f8c:	a3 78       	lsl	r8,0x3
80013f8e:	12 18       	sub	r8,r9
80013f90:	2f f8       	sub	r8,-1
80013f92:	f0 09 15 02 	lsl	r9,r8,0x2
80013f96:	ec f8 00 28 	ld.w	r8,r6[40]
80013f9a:	f2 08 00 08 	add	r8,r9,r8
80013f9e:	ee fb ff f8 	ld.w	r11,r7[-8]
80013fa2:	10 9c       	mov	r12,r8
80013fa4:	f0 16 00 92 	mcall	r6[584]
	param_set.parameters[param_set.param_count].data_type= MAVLINK_TYPE_UINT32_T;
80013fa8:	ec f8 00 28 	ld.w	r8,r6[40]
80013fac:	f0 f9 0d 20 	ld.w	r9,r8[3360]
80013fb0:	ec fa 00 28 	ld.w	r10,r6[40]
80013fb4:	12 98       	mov	r8,r9
80013fb6:	a3 78       	lsl	r8,0x3
80013fb8:	12 18       	sub	r8,r9
80013fba:	a3 68       	lsl	r8,0x2
80013fbc:	f4 08 00 08 	add	r8,r10,r8
80013fc0:	2e c8       	sub	r8,-20
80013fc2:	30 59       	mov	r9,5
80013fc4:	91 09       	st.w	r8[0x0],r9
    param_set.parameters[param_set.param_count].param_name_length = strlen(param_name);
80013fc6:	ec f8 00 28 	ld.w	r8,r6[40]
80013fca:	f0 f5 0d 20 	ld.w	r5,r8[3360]
80013fce:	ee fc ff f8 	ld.w	r12,r7[-8]
80013fd2:	f0 16 00 7c 	mcall	r6[496]
80013fd6:	18 98       	mov	r8,r12
80013fd8:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80013fdc:	ec fa 00 28 	ld.w	r10,r6[40]
80013fe0:	0a 98       	mov	r8,r5
80013fe2:	a3 78       	lsl	r8,0x3
80013fe4:	0a 18       	sub	r8,r5
80013fe6:	a3 68       	lsl	r8,0x2
80013fe8:	f4 08 00 08 	add	r8,r10,r8
80013fec:	f0 ca ff e8 	sub	r10,r8,-24
80013ff0:	12 98       	mov	r8,r9
80013ff2:	b4 88       	st.b	r10[0x0],r8
	param_set.parameters[param_set.param_count].schedule_for_transmission=true;
80013ff4:	ec f8 00 28 	ld.w	r8,r6[40]
80013ff8:	f0 f9 0d 20 	ld.w	r9,r8[3360]
80013ffc:	ec fa 00 28 	ld.w	r10,r6[40]
80014000:	12 98       	mov	r8,r9
80014002:	a3 78       	lsl	r8,0x3
80014004:	12 18       	sub	r8,r9
80014006:	a3 68       	lsl	r8,0x2
80014008:	f4 08 00 08 	add	r8,r10,r8
8001400c:	f0 c9 ff e8 	sub	r9,r8,-24
80014010:	30 18       	mov	r8,1
80014012:	b2 a8       	st.b	r9[0x2],r8
	param_set.param_count++;
80014014:	ec f8 00 28 	ld.w	r8,r6[40]
80014018:	f0 f8 0d 20 	ld.w	r8,r8[3360]
8001401c:	f0 c9 ff ff 	sub	r9,r8,-1
80014020:	ec f8 00 28 	ld.w	r8,r6[40]
80014024:	f1 49 0d 20 	st.w	r8[3360],r9
}
80014028:	2f ed       	sub	sp,-8
8001402a:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8001402e:	00 00       	add	r0,r0
80014030:	80 01       	ld.sh	r1,r0[0x0]
80014032:	3d de       	mov	lr,-35

80014034 <add_parameter_int32>:

void add_parameter_int32(int32_t* val, const char* param_name) {
80014034:	eb cd 40 e0 	pushm	r5-r7,lr
80014038:	1a 97       	mov	r7,sp
8001403a:	20 2d       	sub	sp,8
8001403c:	4b 66       	lddpc	r6,80014114 <add_parameter_int32+0xe0>
8001403e:	1e 26       	rsub	r6,pc
80014040:	ef 4c ff fc 	st.w	r7[-4],r12
80014044:	ef 4b ff f8 	st.w	r7[-8],r11
	param_set.parameters[param_set.param_count].param = val;
80014048:	ec f8 00 28 	ld.w	r8,r6[40]
8001404c:	f0 f9 0d 20 	ld.w	r9,r8[3360]
80014050:	ee fa ff fc 	ld.w	r10,r7[-4]
80014054:	ec fb 00 28 	ld.w	r11,r6[40]
80014058:	12 98       	mov	r8,r9
8001405a:	a3 78       	lsl	r8,0x3
8001405c:	12 18       	sub	r8,r9
8001405e:	a3 68       	lsl	r8,0x2
80014060:	f6 08 00 08 	add	r8,r11,r8
80014064:	91 0a       	st.w	r8[0x0],r10
	strcpy(param_set.parameters[param_set.param_count].param_name, param_name);
80014066:	ec f8 00 28 	ld.w	r8,r6[40]
8001406a:	f0 f9 0d 20 	ld.w	r9,r8[3360]
8001406e:	12 98       	mov	r8,r9
80014070:	a3 78       	lsl	r8,0x3
80014072:	12 18       	sub	r8,r9
80014074:	2f f8       	sub	r8,-1
80014076:	f0 09 15 02 	lsl	r9,r8,0x2
8001407a:	ec f8 00 28 	ld.w	r8,r6[40]
8001407e:	f2 08 00 08 	add	r8,r9,r8
80014082:	ee fb ff f8 	ld.w	r11,r7[-8]
80014086:	10 9c       	mov	r12,r8
80014088:	f0 16 00 92 	mcall	r6[584]
	param_set.parameters[param_set.param_count].data_type = MAVLINK_TYPE_INT32_T;
8001408c:	ec f8 00 28 	ld.w	r8,r6[40]
80014090:	f0 f9 0d 20 	ld.w	r9,r8[3360]
80014094:	ec fa 00 28 	ld.w	r10,r6[40]
80014098:	12 98       	mov	r8,r9
8001409a:	a3 78       	lsl	r8,0x3
8001409c:	12 18       	sub	r8,r9
8001409e:	a3 68       	lsl	r8,0x2
800140a0:	f4 08 00 08 	add	r8,r10,r8
800140a4:	2e c8       	sub	r8,-20
800140a6:	30 69       	mov	r9,6
800140a8:	91 09       	st.w	r8[0x0],r9
	param_set.parameters[param_set.param_count].param_name_length = strlen(param_name);
800140aa:	ec f8 00 28 	ld.w	r8,r6[40]
800140ae:	f0 f5 0d 20 	ld.w	r5,r8[3360]
800140b2:	ee fc ff f8 	ld.w	r12,r7[-8]
800140b6:	f0 16 00 7c 	mcall	r6[496]
800140ba:	18 98       	mov	r8,r12
800140bc:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800140c0:	ec fa 00 28 	ld.w	r10,r6[40]
800140c4:	0a 98       	mov	r8,r5
800140c6:	a3 78       	lsl	r8,0x3
800140c8:	0a 18       	sub	r8,r5
800140ca:	a3 68       	lsl	r8,0x2
800140cc:	f4 08 00 08 	add	r8,r10,r8
800140d0:	f0 ca ff e8 	sub	r10,r8,-24
800140d4:	12 98       	mov	r8,r9
800140d6:	b4 88       	st.b	r10[0x0],r8
	param_set.parameters[param_set.param_count].schedule_for_transmission=true;
800140d8:	ec f8 00 28 	ld.w	r8,r6[40]
800140dc:	f0 f9 0d 20 	ld.w	r9,r8[3360]
800140e0:	ec fa 00 28 	ld.w	r10,r6[40]
800140e4:	12 98       	mov	r8,r9
800140e6:	a3 78       	lsl	r8,0x3
800140e8:	12 18       	sub	r8,r9
800140ea:	a3 68       	lsl	r8,0x2
800140ec:	f4 08 00 08 	add	r8,r10,r8
800140f0:	f0 c9 ff e8 	sub	r9,r8,-24
800140f4:	30 18       	mov	r8,1
800140f6:	b2 a8       	st.b	r9[0x2],r8
	param_set.param_count++;
800140f8:	ec f8 00 28 	ld.w	r8,r6[40]
800140fc:	f0 f8 0d 20 	ld.w	r8,r8[3360]
80014100:	f0 c9 ff ff 	sub	r9,r8,-1
80014104:	ec f8 00 28 	ld.w	r8,r6[40]
80014108:	f1 49 0d 20 	st.w	r8[3360],r9
}
8001410c:	2f ed       	sub	sp,-8
8001410e:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80014112:	00 00       	add	r0,r0
80014114:	80 01       	ld.sh	r1,r0[0x0]
80014116:	3e c2       	mov	r2,-20

80014118 <add_parameter_float>:

void add_parameter_float(float* val, const char* param_name) {
80014118:	eb cd 40 e0 	pushm	r5-r7,lr
8001411c:	1a 97       	mov	r7,sp
8001411e:	20 2d       	sub	sp,8
80014120:	4b 66       	lddpc	r6,800141f8 <add_parameter_float+0xe0>
80014122:	1e 26       	rsub	r6,pc
80014124:	ef 4c ff fc 	st.w	r7[-4],r12
80014128:	ef 4b ff f8 	st.w	r7[-8],r11
	param_set.parameters[param_set.param_count].param = val;
8001412c:	ec f8 00 28 	ld.w	r8,r6[40]
80014130:	f0 f9 0d 20 	ld.w	r9,r8[3360]
80014134:	ec fa 00 28 	ld.w	r10,r6[40]
80014138:	12 98       	mov	r8,r9
8001413a:	a3 78       	lsl	r8,0x3
8001413c:	12 18       	sub	r8,r9
8001413e:	a3 68       	lsl	r8,0x2
80014140:	f4 08 00 08 	add	r8,r10,r8
80014144:	ee f9 ff fc 	ld.w	r9,r7[-4]
80014148:	91 09       	st.w	r8[0x0],r9
	strcpy(param_set.parameters[param_set.param_count].param_name, param_name);
8001414a:	ec f8 00 28 	ld.w	r8,r6[40]
8001414e:	f0 f9 0d 20 	ld.w	r9,r8[3360]
80014152:	12 98       	mov	r8,r9
80014154:	a3 78       	lsl	r8,0x3
80014156:	12 18       	sub	r8,r9
80014158:	2f f8       	sub	r8,-1
8001415a:	f0 09 15 02 	lsl	r9,r8,0x2
8001415e:	ec f8 00 28 	ld.w	r8,r6[40]
80014162:	f2 08 00 08 	add	r8,r9,r8
80014166:	ee fb ff f8 	ld.w	r11,r7[-8]
8001416a:	10 9c       	mov	r12,r8
8001416c:	f0 16 00 92 	mcall	r6[584]
	param_set.parameters[param_set.param_count].data_type = MAVLINK_TYPE_FLOAT;
80014170:	ec f8 00 28 	ld.w	r8,r6[40]
80014174:	f0 f9 0d 20 	ld.w	r9,r8[3360]
80014178:	ec fa 00 28 	ld.w	r10,r6[40]
8001417c:	12 98       	mov	r8,r9
8001417e:	a3 78       	lsl	r8,0x3
80014180:	12 18       	sub	r8,r9
80014182:	a3 68       	lsl	r8,0x2
80014184:	f4 08 00 08 	add	r8,r10,r8
80014188:	2e c8       	sub	r8,-20
8001418a:	30 99       	mov	r9,9
8001418c:	91 09       	st.w	r8[0x0],r9
	param_set.parameters[param_set.param_count].param_name_length = strlen(param_name);
8001418e:	ec f8 00 28 	ld.w	r8,r6[40]
80014192:	f0 f5 0d 20 	ld.w	r5,r8[3360]
80014196:	ee fc ff f8 	ld.w	r12,r7[-8]
8001419a:	f0 16 00 7c 	mcall	r6[496]
8001419e:	18 98       	mov	r8,r12
800141a0:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800141a4:	ec fa 00 28 	ld.w	r10,r6[40]
800141a8:	0a 98       	mov	r8,r5
800141aa:	a3 78       	lsl	r8,0x3
800141ac:	0a 18       	sub	r8,r5
800141ae:	a3 68       	lsl	r8,0x2
800141b0:	f4 08 00 08 	add	r8,r10,r8
800141b4:	f0 ca ff e8 	sub	r10,r8,-24
800141b8:	12 98       	mov	r8,r9
800141ba:	b4 88       	st.b	r10[0x0],r8
	param_set.parameters[param_set.param_count].schedule_for_transmission=true;
800141bc:	ec f8 00 28 	ld.w	r8,r6[40]
800141c0:	f0 f9 0d 20 	ld.w	r9,r8[3360]
800141c4:	ec fa 00 28 	ld.w	r10,r6[40]
800141c8:	12 98       	mov	r8,r9
800141ca:	a3 78       	lsl	r8,0x3
800141cc:	12 18       	sub	r8,r9
800141ce:	a3 68       	lsl	r8,0x2
800141d0:	f4 08 00 08 	add	r8,r10,r8
800141d4:	f0 c9 ff e8 	sub	r9,r8,-24
800141d8:	30 18       	mov	r8,1
800141da:	b2 a8       	st.b	r9[0x2],r8
	param_set.param_count++;
800141dc:	ec f8 00 28 	ld.w	r8,r6[40]
800141e0:	f0 f8 0d 20 	ld.w	r8,r8[3360]
800141e4:	f0 c9 ff ff 	sub	r9,r8,-1
800141e8:	ec f8 00 28 	ld.w	r8,r6[40]
800141ec:	f1 49 0d 20 	st.w	r8[3360],r9
}
800141f0:	2f ed       	sub	sp,-8
800141f2:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800141f6:	00 00       	add	r0,r0
800141f8:	80 01       	ld.sh	r1,r0[0x0]
800141fa:	3f a6       	mov	r6,-6

800141fc <send_all_parameters>:

void send_all_parameters() {
800141fc:	eb cd 40 c0 	pushm	r6-r7,lr
80014200:	1a 97       	mov	r7,sp
80014202:	20 1d       	sub	sp,4
80014204:	49 26       	lddpc	r6,8001424c <send_all_parameters+0x50>
80014206:	1e 26       	rsub	r6,pc
	// schedule all parameters for transmission
	for (uint8_t i = 0; i < param_set.param_count; i++) {
80014208:	30 08       	mov	r8,0
8001420a:	ef 68 ff ff 	st.b	r7[-1],r8
8001420e:	c1 48       	rjmp	80014236 <send_all_parameters+0x3a>
		param_set.parameters[i].schedule_for_transmission=true;
80014210:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80014214:	ec fa 00 28 	ld.w	r10,r6[40]
80014218:	12 98       	mov	r8,r9
8001421a:	a3 78       	lsl	r8,0x3
8001421c:	12 18       	sub	r8,r9
8001421e:	a3 68       	lsl	r8,0x2
80014220:	f4 08 00 08 	add	r8,r10,r8
80014224:	f0 c9 ff e8 	sub	r9,r8,-24
80014228:	30 18       	mov	r8,1
8001422a:	b2 a8       	st.b	r9[0x2],r8
	param_set.param_count++;
}

void send_all_parameters() {
	// schedule all parameters for transmission
	for (uint8_t i = 0; i < param_set.param_count; i++) {
8001422c:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80014230:	2f f8       	sub	r8,-1
80014232:	ef 68 ff ff 	st.b	r7[-1],r8
80014236:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8001423a:	ec f8 00 28 	ld.w	r8,r6[40]
8001423e:	f0 f8 0d 20 	ld.w	r8,r8[3360]
80014242:	10 39       	cp.w	r9,r8
80014244:	ce 65       	brlt	80014210 <send_all_parameters+0x14>
		param_set.parameters[i].schedule_for_transmission=true;
	}		
}
80014246:	2f fd       	sub	sp,-4
80014248:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001424c:	80 01       	ld.sh	r1,r0[0x0]
8001424e:	40 8a       	lddsp	r10,sp[0x20]

80014250 <send_all_parameters_now>:

void send_all_parameters_now() {
80014250:	eb cd 40 e0 	pushm	r5-r7,lr
80014254:	1a 97       	mov	r7,sp
80014256:	20 1d       	sub	sp,4
80014258:	4a d6       	lddpc	r6,8001430c <send_all_parameters_now+0xbc>
8001425a:	1e 26       	rsub	r6,pc
	for (uint8_t i = 0; i < param_set.param_count; i++) {
8001425c:	30 08       	mov	r8,0
8001425e:	ef 68 ff ff 	st.b	r7[-1],r8
80014262:	c4 a8       	rjmp	800142f6 <send_all_parameters_now+0xa6>
		mavlink_msg_param_value_send(MAVLINK_COMM_0,
80014264:	ef 35 ff ff 	ld.ub	r5,r7[-1]
										(int8_t*)param_set.parameters[i].param_name,
										*param_set.parameters[i].param,
										param_set.parameters[i].data_type,
										param_set.param_count,
80014268:	ec f8 00 28 	ld.w	r8,r6[40]
8001426c:	f0 f8 0d 20 	ld.w	r8,r8[3360]
	}		
}

void send_all_parameters_now() {
	for (uint8_t i = 0; i < param_set.param_count; i++) {
		mavlink_msg_param_value_send(MAVLINK_COMM_0,
80014270:	5c 88       	casts.h	r8
80014272:	fd d8 c0 10 	bfextu	lr,r8,0x0,0x10
										(int8_t*)param_set.parameters[i].param_name,
										*param_set.parameters[i].param,
										param_set.parameters[i].data_type,
80014276:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8001427a:	ec fa 00 28 	ld.w	r10,r6[40]
8001427e:	12 98       	mov	r8,r9
80014280:	a3 78       	lsl	r8,0x3
80014282:	12 18       	sub	r8,r9
80014284:	a3 68       	lsl	r8,0x2
80014286:	f4 08 00 08 	add	r8,r10,r8
8001428a:	2e c8       	sub	r8,-20
8001428c:	70 08       	ld.w	r8,r8[0x0]
	}		
}

void send_all_parameters_now() {
	for (uint8_t i = 0; i < param_set.param_count; i++) {
		mavlink_msg_param_value_send(MAVLINK_COMM_0,
8001428e:	5c 58       	castu.b	r8
80014290:	10 9c       	mov	r12,r8
80014292:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80014296:	ec fa 00 28 	ld.w	r10,r6[40]
8001429a:	12 98       	mov	r8,r9
8001429c:	a3 78       	lsl	r8,0x3
8001429e:	12 18       	sub	r8,r9
800142a0:	a3 68       	lsl	r8,0x2
800142a2:	f4 08 00 08 	add	r8,r10,r8
800142a6:	70 08       	ld.w	r8,r8[0x0]
800142a8:	70 0a       	ld.w	r10,r8[0x0]
800142aa:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800142ae:	12 98       	mov	r8,r9
800142b0:	a3 78       	lsl	r8,0x3
800142b2:	12 18       	sub	r8,r9
800142b4:	2f f8       	sub	r8,-1
800142b6:	f0 09 15 02 	lsl	r9,r8,0x2
800142ba:	ec f8 00 28 	ld.w	r8,r6[40]
800142be:	f2 08 00 0b 	add	r11,r9,r8
800142c2:	1a d5       	st.w	--sp,r5
800142c4:	1c 98       	mov	r8,lr
800142c6:	18 99       	mov	r9,r12
800142c8:	30 0c       	mov	r12,0
800142ca:	fe b0 fc a1 	rcall	80013c0c <mavlink_msg_param_value_send>
800142ce:	2f fd       	sub	sp,-4
										(int8_t*)param_set.parameters[i].param_name,
										*param_set.parameters[i].param,
										param_set.parameters[i].data_type,
										param_set.param_count,
										i);
		param_set.parameters[i].schedule_for_transmission=false;
800142d0:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800142d4:	ec fa 00 28 	ld.w	r10,r6[40]
800142d8:	12 98       	mov	r8,r9
800142da:	a3 78       	lsl	r8,0x3
800142dc:	12 18       	sub	r8,r9
800142de:	a3 68       	lsl	r8,0x2
800142e0:	f4 08 00 08 	add	r8,r10,r8
800142e4:	f0 c9 ff e8 	sub	r9,r8,-24
800142e8:	30 08       	mov	r8,0
800142ea:	b2 a8       	st.b	r9[0x2],r8
		param_set.parameters[i].schedule_for_transmission=true;
	}		
}

void send_all_parameters_now() {
	for (uint8_t i = 0; i < param_set.param_count; i++) {
800142ec:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800142f0:	2f f8       	sub	r8,-1
800142f2:	ef 68 ff ff 	st.b	r7[-1],r8
800142f6:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800142fa:	ec f8 00 28 	ld.w	r8,r6[40]
800142fe:	f0 f8 0d 20 	ld.w	r8,r8[3360]
80014302:	10 39       	cp.w	r9,r8
80014304:	cb 05       	brlt	80014264 <send_all_parameters_now+0x14>
										i);
		param_set.parameters[i].schedule_for_transmission=false;

	}

}
80014306:	2f fd       	sub	sp,-4
80014308:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8001430c:	80 01       	ld.sh	r1,r0[0x0]
8001430e:	40 de       	lddsp	lr,sp[0x34]

80014310 <send_scheduled_parameters>:


void send_scheduled_parameters() {
80014310:	eb cd 40 e0 	pushm	r5-r7,lr
80014314:	1a 97       	mov	r7,sp
80014316:	20 1d       	sub	sp,4
80014318:	4b 56       	lddpc	r6,800143ec <send_scheduled_parameters+0xdc>
8001431a:	1e 26       	rsub	r6,pc
	for (uint8_t i = 0; i < param_set.param_count; i++) {
8001431c:	30 08       	mov	r8,0
8001431e:	ef 68 ff ff 	st.b	r7[-1],r8
80014322:	c5 98       	rjmp	800143d4 <send_scheduled_parameters+0xc4>
		if (param_set.parameters[i].schedule_for_transmission) {
80014324:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80014328:	ec fa 00 28 	ld.w	r10,r6[40]
8001432c:	12 98       	mov	r8,r9
8001432e:	a3 78       	lsl	r8,0x3
80014330:	12 18       	sub	r8,r9
80014332:	a3 68       	lsl	r8,0x2
80014334:	f4 08 00 08 	add	r8,r10,r8
80014338:	2e 88       	sub	r8,-24
8001433a:	11 a8       	ld.ub	r8,r8[0x2]
8001433c:	58 08       	cp.w	r8,0
8001433e:	c4 60       	breq	800143ca <send_scheduled_parameters+0xba>
			mavlink_msg_param_value_send(MAVLINK_COMM_0,
80014340:	ef 35 ff ff 	ld.ub	r5,r7[-1]
										(int8_t*)param_set.parameters[i].param_name,
										*param_set.parameters[i].param,
										param_set.parameters[i].data_type,
										param_set.param_count,
80014344:	ec f8 00 28 	ld.w	r8,r6[40]
80014348:	f0 f8 0d 20 	ld.w	r8,r8[3360]


void send_scheduled_parameters() {
	for (uint8_t i = 0; i < param_set.param_count; i++) {
		if (param_set.parameters[i].schedule_for_transmission) {
			mavlink_msg_param_value_send(MAVLINK_COMM_0,
8001434c:	5c 88       	casts.h	r8
8001434e:	fd d8 c0 10 	bfextu	lr,r8,0x0,0x10
										(int8_t*)param_set.parameters[i].param_name,
										*param_set.parameters[i].param,
										param_set.parameters[i].data_type,
80014352:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80014356:	ec fa 00 28 	ld.w	r10,r6[40]
8001435a:	12 98       	mov	r8,r9
8001435c:	a3 78       	lsl	r8,0x3
8001435e:	12 18       	sub	r8,r9
80014360:	a3 68       	lsl	r8,0x2
80014362:	f4 08 00 08 	add	r8,r10,r8
80014366:	2e c8       	sub	r8,-20
80014368:	70 08       	ld.w	r8,r8[0x0]


void send_scheduled_parameters() {
	for (uint8_t i = 0; i < param_set.param_count; i++) {
		if (param_set.parameters[i].schedule_for_transmission) {
			mavlink_msg_param_value_send(MAVLINK_COMM_0,
8001436a:	5c 58       	castu.b	r8
8001436c:	10 9c       	mov	r12,r8
8001436e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80014372:	ec fa 00 28 	ld.w	r10,r6[40]
80014376:	12 98       	mov	r8,r9
80014378:	a3 78       	lsl	r8,0x3
8001437a:	12 18       	sub	r8,r9
8001437c:	a3 68       	lsl	r8,0x2
8001437e:	f4 08 00 08 	add	r8,r10,r8
80014382:	70 08       	ld.w	r8,r8[0x0]
80014384:	70 0a       	ld.w	r10,r8[0x0]
80014386:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8001438a:	12 98       	mov	r8,r9
8001438c:	a3 78       	lsl	r8,0x3
8001438e:	12 18       	sub	r8,r9
80014390:	2f f8       	sub	r8,-1
80014392:	f0 09 15 02 	lsl	r9,r8,0x2
80014396:	ec f8 00 28 	ld.w	r8,r6[40]
8001439a:	f2 08 00 0b 	add	r11,r9,r8
8001439e:	1a d5       	st.w	--sp,r5
800143a0:	1c 98       	mov	r8,lr
800143a2:	18 99       	mov	r9,r12
800143a4:	30 0c       	mov	r12,0
800143a6:	fe b0 fc 33 	rcall	80013c0c <mavlink_msg_param_value_send>
800143aa:	2f fd       	sub	sp,-4
										(int8_t*)param_set.parameters[i].param_name,
										*param_set.parameters[i].param,
										param_set.parameters[i].data_type,
										param_set.param_count,
										i);
			param_set.parameters[i].schedule_for_transmission=false;
800143ac:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800143b0:	ec fa 00 28 	ld.w	r10,r6[40]
800143b4:	12 98       	mov	r8,r9
800143b6:	a3 78       	lsl	r8,0x3
800143b8:	12 18       	sub	r8,r9
800143ba:	a3 68       	lsl	r8,0x2
800143bc:	f4 08 00 08 	add	r8,r10,r8
800143c0:	f0 c9 ff e8 	sub	r9,r8,-24
800143c4:	30 08       	mov	r8,0
800143c6:	b2 a8       	st.b	r9[0x2],r8
			return;
800143c8:	c0 e8       	rjmp	800143e4 <send_scheduled_parameters+0xd4>

}


void send_scheduled_parameters() {
	for (uint8_t i = 0; i < param_set.param_count; i++) {
800143ca:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800143ce:	2f f8       	sub	r8,-1
800143d0:	ef 68 ff ff 	st.b	r7[-1],r8
800143d4:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800143d8:	ec f8 00 28 	ld.w	r8,r6[40]
800143dc:	f0 f8 0d 20 	ld.w	r8,r8[3360]
800143e0:	10 39       	cp.w	r9,r8
800143e2:	ca 15       	brlt	80014324 <send_scheduled_parameters+0x14>
			param_set.parameters[i].schedule_for_transmission=false;
			return;
		}			

	}
}
800143e4:	2f fd       	sub	sp,-4
800143e6:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800143ea:	00 00       	add	r0,r0
800143ec:	80 01       	ld.sh	r1,r0[0x0]
800143ee:	41 9e       	lddsp	lr,sp[0x64]

800143f0 <send_parameter>:


void send_parameter(mavlink_param_request_read_t* request) {
800143f0:	eb cd 40 c0 	pushm	r6-r7,lr
800143f4:	1a 97       	mov	r7,sp
800143f6:	20 4d       	sub	sp,16
800143f8:	4d 26       	lddpc	r6,80014540 <send_parameter+0x150>
800143fa:	1e 26       	rsub	r6,pc
800143fc:	ef 4c ff f0 	st.w	r7[-16],r12
	if(request->param_index!=-1) {
80014400:	ee f8 ff f0 	ld.w	r8,r7[-16]
80014404:	90 09       	ld.sh	r9,r8[0x0]
80014406:	3f f8       	mov	r8,-1
80014408:	f0 09 19 00 	cp.h	r9,r8
8001440c:	c1 d0       	breq	80014446 <send_parameter+0x56>
									(int8_t*)param_set.parameters[request->param_index].param_name,
									*param_set.parameters[request->param_index].param,
									param_set.parameters[request->param_index].data_type,
									param_set.param_count,
									request->param_index);*/
		if (request->param_index>param_set.param_count) return;
8001440e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80014412:	90 08       	ld.sh	r8,r8[0x0]
80014414:	10 99       	mov	r9,r8
80014416:	ec f8 00 28 	ld.w	r8,r6[40]
8001441a:	f0 f8 0d 20 	ld.w	r8,r8[3360]
8001441e:	10 39       	cp.w	r9,r8
80014420:	e0 89 00 8b 	brgt	80014536 <send_parameter+0x146>
		param_set.parameters[request->param_index].schedule_for_transmission=true;
80014424:	ee f8 ff f0 	ld.w	r8,r7[-16]
80014428:	90 08       	ld.sh	r8,r8[0x0]
8001442a:	10 99       	mov	r9,r8
8001442c:	ec fa 00 28 	ld.w	r10,r6[40]
80014430:	12 98       	mov	r8,r9
80014432:	a3 78       	lsl	r8,0x3
80014434:	12 18       	sub	r8,r9
80014436:	a3 68       	lsl	r8,0x2
80014438:	f4 08 00 08 	add	r8,r10,r8
8001443c:	f0 c9 ff e8 	sub	r9,r8,-24
80014440:	30 18       	mov	r8,1
80014442:	b2 a8       	st.b	r9[0x2],r8
80014444:	c7 a8       	rjmp	80014538 <send_parameter+0x148>

	}
	else {
		char* key = (char*) request->param_id;		
80014446:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001444a:	2f c8       	sub	r8,-4
8001444c:	ef 48 ff f4 	st.w	r7[-12],r8
		for (uint16_t i = 0; i < param_set.param_count; i++) {
80014450:	30 08       	mov	r8,0
80014452:	ef 58 ff fa 	st.h	r7[-6],r8
80014456:	c6 78       	rjmp	80014524 <send_parameter+0x134>
			bool match = true;
80014458:	30 18       	mov	r8,1
8001445a:	ef 68 ff fd 	st.b	r7[-3],r8
			for (uint16_t j = 0; j < param_set.parameters[i].param_name_length; j++) {
8001445e:	30 08       	mov	r8,0
80014460:	ef 58 ff fe 	st.h	r7[-2],r8
80014464:	c3 38       	rjmp	800144ca <send_parameter+0xda>
				// Compare
				if ((char)param_set.parameters[i].param_name[j] != (char)key[j]) {
80014466:	ef 19 ff fa 	ld.uh	r9,r7[-6]
8001446a:	ef 1a ff fe 	ld.uh	r10,r7[-2]
8001446e:	ec fb 00 28 	ld.w	r11,r6[40]
80014472:	12 98       	mov	r8,r9
80014474:	a3 78       	lsl	r8,0x3
80014476:	12 18       	sub	r8,r9
80014478:	a3 68       	lsl	r8,0x2
8001447a:	f6 08 00 08 	add	r8,r11,r8
8001447e:	14 08       	add	r8,r10
80014480:	2f c8       	sub	r8,-4
80014482:	11 89       	ld.ub	r9,r8[0x0]
80014484:	ef 18 ff fe 	ld.uh	r8,r7[-2]
80014488:	ee fa ff f4 	ld.w	r10,r7[-12]
8001448c:	f4 08 00 08 	add	r8,r10,r8
80014490:	11 88       	ld.ub	r8,r8[0x0]
80014492:	f0 09 18 00 	cp.b	r9,r8
80014496:	c0 40       	breq	8001449e <send_parameter+0xae>
					match = false;
80014498:	30 08       	mov	r8,0
8001449a:	ef 68 ff fd 	st.b	r7[-3],r8
				}
 
				// End matching if null termination is reached
				if (((char)param_set.parameters[i].param_name[j]) == '\0') {
8001449e:	ef 19 ff fa 	ld.uh	r9,r7[-6]
800144a2:	ef 1a ff fe 	ld.uh	r10,r7[-2]
800144a6:	ec fb 00 28 	ld.w	r11,r6[40]
800144aa:	12 98       	mov	r8,r9
800144ac:	a3 78       	lsl	r8,0x3
800144ae:	12 18       	sub	r8,r9
800144b0:	a3 68       	lsl	r8,0x2
800144b2:	f6 08 00 08 	add	r8,r11,r8
800144b6:	14 08       	add	r8,r10
800144b8:	2f c8       	sub	r8,-4
800144ba:	11 88       	ld.ub	r8,r8[0x0]
800144bc:	58 08       	cp.w	r8,0
800144be:	c1 80       	breq	800144ee <send_parameter+0xfe>
	}
	else {
		char* key = (char*) request->param_id;		
		for (uint16_t i = 0; i < param_set.param_count; i++) {
			bool match = true;
			for (uint16_t j = 0; j < param_set.parameters[i].param_name_length; j++) {
800144c0:	ef 08 ff fe 	ld.sh	r8,r7[-2]
800144c4:	2f f8       	sub	r8,-1
800144c6:	ef 58 ff fe 	st.h	r7[-2],r8
800144ca:	ef 19 ff fa 	ld.uh	r9,r7[-6]
800144ce:	ec fa 00 28 	ld.w	r10,r6[40]
800144d2:	12 98       	mov	r8,r9
800144d4:	a3 78       	lsl	r8,0x3
800144d6:	12 18       	sub	r8,r9
800144d8:	a3 68       	lsl	r8,0x2
800144da:	f4 08 00 08 	add	r8,r10,r8
800144de:	2e 88       	sub	r8,-24
800144e0:	11 88       	ld.ub	r8,r8[0x0]
800144e2:	ef 09 ff fe 	ld.sh	r9,r7[-2]
800144e6:	f0 09 19 00 	cp.h	r9,r8
800144ea:	cb e3       	brcs	80014466 <send_parameter+0x76>
800144ec:	c0 28       	rjmp	800144f0 <send_parameter+0x100>
					match = false;
				}
 
				// End matching if null termination is reached
				if (((char)param_set.parameters[i].param_name[j]) == '\0') {
					break;
800144ee:	d7 03       	nop
				}
			}
 
			// Check if matched
			if (match) {
800144f0:	ef 39 ff fd 	ld.ub	r9,r7[-3]
800144f4:	30 08       	mov	r8,0
800144f6:	f0 09 18 00 	cp.b	r9,r8
800144fa:	c1 00       	breq	8001451a <send_parameter+0x12a>
				/*
				mavlink_msg_param_value_send(MAVLINK_COMM_0,
											(int8_t*)param_set.parameters[i].param_name,
											*param_set.parameters[i].param, param_set.parameters[i].data_type, 
											param_set.param_count, i);*/
				param_set.parameters[i].schedule_for_transmission=true;
800144fc:	ef 19 ff fa 	ld.uh	r9,r7[-6]
80014500:	ec fa 00 28 	ld.w	r10,r6[40]
80014504:	12 98       	mov	r8,r9
80014506:	a3 78       	lsl	r8,0x3
80014508:	12 18       	sub	r8,r9
8001450a:	a3 68       	lsl	r8,0x2
8001450c:	f4 08 00 08 	add	r8,r10,r8
80014510:	f0 c9 ff e8 	sub	r9,r8,-24
80014514:	30 18       	mov	r8,1
80014516:	b2 a8       	st.b	r9[0x2],r8

				break;
80014518:	c1 08       	rjmp	80014538 <send_parameter+0x148>
		param_set.parameters[request->param_index].schedule_for_transmission=true;

	}
	else {
		char* key = (char*) request->param_id;		
		for (uint16_t i = 0; i < param_set.param_count; i++) {
8001451a:	ef 08 ff fa 	ld.sh	r8,r7[-6]
8001451e:	2f f8       	sub	r8,-1
80014520:	ef 58 ff fa 	st.h	r7[-6],r8
80014524:	ef 19 ff fa 	ld.uh	r9,r7[-6]
80014528:	ec f8 00 28 	ld.w	r8,r6[40]
8001452c:	f0 f8 0d 20 	ld.w	r8,r8[3360]
80014530:	10 39       	cp.w	r9,r8
80014532:	c9 35       	brlt	80014458 <send_parameter+0x68>
80014534:	c0 28       	rjmp	80014538 <send_parameter+0x148>
									(int8_t*)param_set.parameters[request->param_index].param_name,
									*param_set.parameters[request->param_index].param,
									param_set.parameters[request->param_index].data_type,
									param_set.param_count,
									request->param_index);*/
		if (request->param_index>param_set.param_count) return;
80014536:	d7 03       	nop

				break;
			}					
		}
	}
}
80014538:	2f cd       	sub	sp,-16
8001453a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001453e:	00 00       	add	r0,r0
80014540:	80 01       	ld.sh	r1,r0[0x0]
80014542:	42 7e       	lddsp	lr,sp[0x9c]

80014544 <receive_parameter>:

void receive_parameter(Mavlink_Received_t* rec) {
80014544:	eb cd 40 c0 	pushm	r6-r7,lr
80014548:	1a 97       	mov	r7,sp
8001454a:	20 ad       	sub	sp,40
8001454c:	4e 76       	lddpc	r6,800146e8 <receive_parameter+0x1a4>
8001454e:	1e 26       	rsub	r6,pc
80014550:	ef 4c ff d8 	st.w	r7[-40],r12
	mavlink_param_set_t set;
	mavlink_msg_param_set_decode(&rec->msg, &set);
80014554:	ee f8 ff d8 	ld.w	r8,r7[-40]
80014558:	ee c9 00 24 	sub	r9,r7,36
8001455c:	12 9b       	mov	r11,r9
8001455e:	10 9c       	mov	r12,r8
80014560:	fe b0 fb f9 	rcall	80013d52 <mavlink_msg_param_set_decode>
 
	// Check if this message is for this system and subsystem
	if ((uint8_t)set.target_system == (uint8_t)mavlink_system.sysid
	&& (uint8_t)set.target_component == (uint8_t)mavlink_system.compid) {
80014564:	ef 39 ff e0 	ld.ub	r9,r7[-32]
80014568:	ec f8 00 70 	ld.w	r8,r6[112]
8001456c:	11 88       	ld.ub	r8,r8[0x0]
void receive_parameter(Mavlink_Received_t* rec) {
	mavlink_param_set_t set;
	mavlink_msg_param_set_decode(&rec->msg, &set);
 
	// Check if this message is for this system and subsystem
	if ((uint8_t)set.target_system == (uint8_t)mavlink_system.sysid
8001456e:	f0 09 18 00 	cp.b	r9,r8
80014572:	e0 81 00 b7 	brne	800146e0 <receive_parameter+0x19c>
	&& (uint8_t)set.target_component == (uint8_t)mavlink_system.compid) {
80014576:	ef 39 ff e1 	ld.ub	r9,r7[-31]
8001457a:	ec f8 00 70 	ld.w	r8,r6[112]
8001457e:	11 98       	ld.ub	r8,r8[0x1]
void receive_parameter(Mavlink_Received_t* rec) {
	mavlink_param_set_t set;
	mavlink_msg_param_set_decode(&rec->msg, &set);
 
	// Check if this message is for this system and subsystem
	if ((uint8_t)set.target_system == (uint8_t)mavlink_system.sysid
80014580:	f0 09 18 00 	cp.b	r9,r8
80014584:	e0 81 00 ae 	brne	800146e0 <receive_parameter+0x19c>
	&& (uint8_t)set.target_component == (uint8_t)mavlink_system.compid) {
		char* key = (char*) set.param_id;
80014588:	ee c8 00 24 	sub	r8,r7,36
8001458c:	2f a8       	sub	r8,-6
8001458e:	ef 48 ff f4 	st.w	r7[-12],r8
				
		for (uint16_t i = 0; i < param_set.param_count; i++) {
80014592:	30 08       	mov	r8,0
80014594:	ef 58 ff fa 	st.h	r7[-6],r8
80014598:	c9 78       	rjmp	800146c6 <receive_parameter+0x182>
			bool match = true;
8001459a:	30 18       	mov	r8,1
8001459c:	ef 68 ff fd 	st.b	r7[-3],r8
			for (uint16_t j = 0; j < param_set.parameters[i].param_name_length; j++) {
800145a0:	30 08       	mov	r8,0
800145a2:	ef 58 ff fe 	st.h	r7[-2],r8
800145a6:	c3 38       	rjmp	8001460c <receive_parameter+0xc8>
				// Compare
				if ((char)param_set.parameters[i].param_name[j] != (char)key[j]) {
800145a8:	ef 19 ff fa 	ld.uh	r9,r7[-6]
800145ac:	ef 1a ff fe 	ld.uh	r10,r7[-2]
800145b0:	ec fb 00 28 	ld.w	r11,r6[40]
800145b4:	12 98       	mov	r8,r9
800145b6:	a3 78       	lsl	r8,0x3
800145b8:	12 18       	sub	r8,r9
800145ba:	a3 68       	lsl	r8,0x2
800145bc:	f6 08 00 08 	add	r8,r11,r8
800145c0:	14 08       	add	r8,r10
800145c2:	2f c8       	sub	r8,-4
800145c4:	11 89       	ld.ub	r9,r8[0x0]
800145c6:	ef 18 ff fe 	ld.uh	r8,r7[-2]
800145ca:	ee fa ff f4 	ld.w	r10,r7[-12]
800145ce:	f4 08 00 08 	add	r8,r10,r8
800145d2:	11 88       	ld.ub	r8,r8[0x0]
800145d4:	f0 09 18 00 	cp.b	r9,r8
800145d8:	c0 40       	breq	800145e0 <receive_parameter+0x9c>
					match = false;
800145da:	30 08       	mov	r8,0
800145dc:	ef 68 ff fd 	st.b	r7[-3],r8
				}
		
				// End matching if null termination is reached
				if (((char)param_set.parameters[i].param_name[j]) == '\0') {
800145e0:	ef 19 ff fa 	ld.uh	r9,r7[-6]
800145e4:	ef 1a ff fe 	ld.uh	r10,r7[-2]
800145e8:	ec fb 00 28 	ld.w	r11,r6[40]
800145ec:	12 98       	mov	r8,r9
800145ee:	a3 78       	lsl	r8,0x3
800145f0:	12 18       	sub	r8,r9
800145f2:	a3 68       	lsl	r8,0x2
800145f4:	f6 08 00 08 	add	r8,r11,r8
800145f8:	14 08       	add	r8,r10
800145fa:	2f c8       	sub	r8,-4
800145fc:	11 88       	ld.ub	r8,r8[0x0]
800145fe:	58 08       	cp.w	r8,0
80014600:	c1 80       	breq	80014630 <receive_parameter+0xec>
	&& (uint8_t)set.target_component == (uint8_t)mavlink_system.compid) {
		char* key = (char*) set.param_id;
				
		for (uint16_t i = 0; i < param_set.param_count; i++) {
			bool match = true;
			for (uint16_t j = 0; j < param_set.parameters[i].param_name_length; j++) {
80014602:	ef 08 ff fe 	ld.sh	r8,r7[-2]
80014606:	2f f8       	sub	r8,-1
80014608:	ef 58 ff fe 	st.h	r7[-2],r8
8001460c:	ef 19 ff fa 	ld.uh	r9,r7[-6]
80014610:	ec fa 00 28 	ld.w	r10,r6[40]
80014614:	12 98       	mov	r8,r9
80014616:	a3 78       	lsl	r8,0x3
80014618:	12 18       	sub	r8,r9
8001461a:	a3 68       	lsl	r8,0x2
8001461c:	f4 08 00 08 	add	r8,r10,r8
80014620:	2e 88       	sub	r8,-24
80014622:	11 88       	ld.ub	r8,r8[0x0]
80014624:	ef 09 ff fe 	ld.sh	r9,r7[-2]
80014628:	f0 09 19 00 	cp.h	r9,r8
8001462c:	cb e3       	brcs	800145a8 <receive_parameter+0x64>
8001462e:	c0 28       	rjmp	80014632 <receive_parameter+0xee>
					match = false;
				}
		
				// End matching if null termination is reached
				if (((char)param_set.parameters[i].param_name[j]) == '\0') {
					break;
80014630:	d7 03       	nop
				}
			}
 
			// Check if matched
			if (match) {
80014632:	ef 39 ff fd 	ld.ub	r9,r7[-3]
80014636:	30 08       	mov	r8,0
80014638:	f0 09 18 00 	cp.b	r9,r8
8001463c:	c4 00       	breq	800146bc <receive_parameter+0x178>
				// Only write and emit changes if there is actually a difference
				if (*param_set.parameters[i].param != set.param_value && set.param_type == param_set.parameters[i].data_type) {
8001463e:	ef 19 ff fa 	ld.uh	r9,r7[-6]
80014642:	ec fa 00 28 	ld.w	r10,r6[40]
80014646:	12 98       	mov	r8,r9
80014648:	a3 78       	lsl	r8,0x3
8001464a:	12 18       	sub	r8,r9
8001464c:	a3 68       	lsl	r8,0x2
8001464e:	f4 08 00 08 	add	r8,r10,r8
80014652:	70 08       	ld.w	r8,r8[0x0]
80014654:	70 09       	ld.w	r9,r8[0x0]
80014656:	ee f8 ff dc 	ld.w	r8,r7[-36]
8001465a:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
8001465e:	c3 e0       	breq	800146da <receive_parameter+0x196>
80014660:	ef 38 ff f2 	ld.ub	r8,r7[-14]
80014664:	10 9a       	mov	r10,r8
80014666:	ef 19 ff fa 	ld.uh	r9,r7[-6]
8001466a:	ec fb 00 28 	ld.w	r11,r6[40]
8001466e:	12 98       	mov	r8,r9
80014670:	a3 78       	lsl	r8,0x3
80014672:	12 18       	sub	r8,r9
80014674:	a3 68       	lsl	r8,0x2
80014676:	f6 08 00 08 	add	r8,r11,r8
8001467a:	2e c8       	sub	r8,-20
8001467c:	70 08       	ld.w	r8,r8[0x0]
8001467e:	10 3a       	cp.w	r10,r8
80014680:	c2 f1       	brne	800146de <receive_parameter+0x19a>
					*param_set.parameters[i].param = set.param_value;
80014682:	ef 19 ff fa 	ld.uh	r9,r7[-6]
80014686:	ec fa 00 28 	ld.w	r10,r6[40]
8001468a:	12 98       	mov	r8,r9
8001468c:	a3 78       	lsl	r8,0x3
8001468e:	12 18       	sub	r8,r9
80014690:	a3 68       	lsl	r8,0x2
80014692:	f4 08 00 08 	add	r8,r10,r8
80014696:	70 08       	ld.w	r8,r8[0x0]
80014698:	ee f9 ff dc 	ld.w	r9,r7[-36]
8001469c:	91 09       	st.w	r8[0x0],r9
//					mavlink_msg_param_value_send(MAVLINK_COMM_0,
//												(int8_t*)param_set.parameters[i].param_name,
//												*param_set.parameters[i].param, param_set.parameters[i].data_type, 
//												param_set.param_count, i);
					// schedule parameter for transmission downstream
					param_set.parameters[i].schedule_for_transmission=true;
8001469e:	ef 19 ff fa 	ld.uh	r9,r7[-6]
800146a2:	ec fa 00 28 	ld.w	r10,r6[40]
800146a6:	12 98       	mov	r8,r9
800146a8:	a3 78       	lsl	r8,0x3
800146aa:	12 18       	sub	r8,r9
800146ac:	a3 68       	lsl	r8,0x2
800146ae:	f4 08 00 08 	add	r8,r10,r8
800146b2:	f0 c9 ff e8 	sub	r9,r8,-24
800146b6:	30 18       	mov	r8,1
800146b8:	b2 a8       	st.b	r9[0x2],r8
				}
				break;
800146ba:	c1 38       	rjmp	800146e0 <receive_parameter+0x19c>
	// Check if this message is for this system and subsystem
	if ((uint8_t)set.target_system == (uint8_t)mavlink_system.sysid
	&& (uint8_t)set.target_component == (uint8_t)mavlink_system.compid) {
		char* key = (char*) set.param_id;
				
		for (uint16_t i = 0; i < param_set.param_count; i++) {
800146bc:	ef 08 ff fa 	ld.sh	r8,r7[-6]
800146c0:	2f f8       	sub	r8,-1
800146c2:	ef 58 ff fa 	st.h	r7[-6],r8
800146c6:	ef 19 ff fa 	ld.uh	r9,r7[-6]
800146ca:	ec f8 00 28 	ld.w	r8,r6[40]
800146ce:	f0 f8 0d 20 	ld.w	r8,r8[3360]
800146d2:	10 39       	cp.w	r9,r8
800146d4:	fe 95 ff 63 	brlt	8001459a <receive_parameter+0x56>
800146d8:	c0 48       	rjmp	800146e0 <receive_parameter+0x19c>
//												*param_set.parameters[i].param, param_set.parameters[i].data_type, 
//												param_set.param_count, i);
					// schedule parameter for transmission downstream
					param_set.parameters[i].schedule_for_transmission=true;
				}
				break;
800146da:	d7 03       	nop
800146dc:	c0 28       	rjmp	800146e0 <receive_parameter+0x19c>
800146de:	d7 03       	nop
			}
		}
	}
}
800146e0:	2f 6d       	sub	sp,-40
800146e2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800146e6:	00 00       	add	r0,r0
800146e8:	80 01       	ld.sh	r1,r0[0x0]
800146ea:	43 d2       	lddsp	r2,sp[0xf4]
800146ec:	46 6c       	lddsp	r12,sp[0x198]
800146ee:	61 73       	ld.w	r3,r0[0x5c]
800146f0:	68 20       	ld.w	r0,r4[0x8]
800146f2:	72 65       	ld.w	r5,r9[0x18]
800146f4:	61 64       	ld.w	r4,r0[0x58]
800146f6:	20 73       	sub	r3,7
800146f8:	75 63       	ld.w	r3,r10[0x58]
800146fa:	63 65       	ld.w	r5,r1[0x58]
800146fc:	73 73       	ld.w	r3,r9[0x5c]
800146fe:	66 75       	ld.w	r5,r3[0x1c]
80014700:	6c 21       	ld.w	r1,r6[0x8]
80014702:	20 4e       	sub	lr,4
80014704:	65 77       	ld.w	r7,r2[0x5c]
80014706:	20 50       	sub	r0,5
80014708:	61 72       	ld.w	r2,r0[0x5c]
8001470a:	61 6d       	ld.w	sp,r0[0x58]
8001470c:	65 74       	ld.w	r4,r2[0x5c]
8001470e:	65 72       	ld.w	r2,r2[0x5c]
80014710:	73 20       	ld.w	r0,r9[0x48]
80014712:	69 6e       	ld.w	lr,r4[0x58]
80014714:	73 65       	ld.w	r5,r9[0x58]
80014716:	72 74       	ld.w	r4,r9[0x1c]
80014718:	65 64       	ld.w	r4,r2[0x58]
8001471a:	2e 20       	sub	r0,-30
8001471c:	0a 00       	add	r0,r5
8001471e:	00 00       	add	r0,r0
80014720:	46 6c       	lddsp	r12,sp[0x198]
80014722:	61 73       	ld.w	r3,r0[0x5c]
80014724:	68 20       	ld.w	r0,r4[0x8]
80014726:	6d 65       	ld.w	r5,r6[0x58]
80014728:	6d 6f       	ld.w	pc,r6[0x58]
8001472a:	72 79       	ld.w	r9,r9[0x1c]
8001472c:	20 63       	sub	r3,6
8001472e:	6f 72       	ld.w	r2,r7[0x5c]
80014730:	72 75       	ld.w	r5,r9[0x1c]
80014732:	70 74       	ld.w	r4,r8[0x1c]
80014734:	65 64       	ld.w	r4,r2[0x58]
80014736:	21 20       	sub	r0,18
80014738:	48 61       	lddpc	r1,80014750 <receive_parameter+0x20c>
8001473a:	72 64       	ld.w	r4,r9[0x18]
8001473c:	63 6f       	ld.w	pc,r1[0x58]
8001473e:	64 65       	ld.w	r5,r2[0x18]
80014740:	64 20       	ld.w	r0,r2[0x8]
80014742:	76 61       	ld.w	r1,r11[0x18]
80014744:	6c 75       	ld.w	r5,r6[0x1c]
80014746:	65 73       	ld.w	r3,r2[0x5c]
80014748:	20 74       	sub	r4,7
8001474a:	61 6b       	ld.w	r11,r0[0x58]
8001474c:	65 6e       	ld.w	lr,r2[0x58]
8001474e:	2e 0a       	sub	r10,-32
	...

80014752 <read_parameters_from_flashc>:

void read_parameters_from_flashc()
{
80014752:	eb cd 40 c0 	pushm	r6-r7,lr
80014756:	1a 97       	mov	r7,sp
80014758:	fa cd 01 f8 	sub	sp,sp,504
8001475c:	4d 06       	lddpc	r6,8001489c <read_parameters_from_flashc+0x14a>
8001475e:	1e 26       	rsub	r6,pc
	uint8_t i;
	nvram_array = AVR32_FLASHC_USER_PAGE_ADDRESS + 0x04;
80014760:	ec f8 01 78 	ld.w	r8,r6[376]
80014764:	30 49       	mov	r9,4
80014766:	ea 19 80 80 	orh	r9,0x8080
8001476a:	91 09       	st.w	r8[0x0],r9
	
	nvram_data_ttt local_array;
	
	float cksum1, cksum2;
	cksum1 = 0;
8001476c:	30 08       	mov	r8,0
8001476e:	ef 48 ff f8 	st.w	r7[-8],r8
	cksum2 = 0;
80014772:	30 08       	mov	r8,0
80014774:	ef 48 ff fc 	st.w	r7[-4],r8
	
	for (i=0;i<(param_set.param_count+1);i++)
80014778:	30 08       	mov	r8,0
8001477a:	ef 68 ff f7 	st.b	r7[-9],r8
8001477e:	c2 98       	rjmp	800147d0 <read_parameters_from_flashc+0x7e>
	{
		local_array.values[i] = nvram_array->values[i];
80014780:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80014784:	ec f9 01 78 	ld.w	r9,r6[376]
80014788:	72 09       	ld.w	r9,r9[0x0]
8001478a:	ef 3a ff f7 	ld.ub	r10,r7[-9]
8001478e:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
80014792:	a3 68       	lsl	r8,0x2
80014794:	ee 08 00 08 	add	r8,r7,r8
80014798:	f1 49 fe 08 	st.w	r8[-504],r9
		cksum1 += local_array.values[i];
8001479c:	ef 38 ff f7 	ld.ub	r8,r7[-9]
800147a0:	a3 68       	lsl	r8,0x2
800147a2:	ee 08 00 08 	add	r8,r7,r8
800147a6:	f0 f8 fe 08 	ld.w	r8,r8[-504]
800147aa:	ee f9 ff f8 	ld.w	r9,r7[-8]
800147ae:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
800147b2:	ef 48 ff f8 	st.w	r7[-8],r8
		cksum2 += cksum1;
800147b6:	ee f9 ff fc 	ld.w	r9,r7[-4]
800147ba:	ee f8 ff f8 	ld.w	r8,r7[-8]
800147be:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
800147c2:	ef 48 ff fc 	st.w	r7[-4],r8
	
	float cksum1, cksum2;
	cksum1 = 0;
	cksum2 = 0;
	
	for (i=0;i<(param_set.param_count+1);i++)
800147c6:	ef 38 ff f7 	ld.ub	r8,r7[-9]
800147ca:	2f f8       	sub	r8,-1
800147cc:	ef 68 ff f7 	st.b	r7[-9],r8
800147d0:	ef 39 ff f7 	ld.ub	r9,r7[-9]
800147d4:	ec f8 00 28 	ld.w	r8,r6[40]
800147d8:	f0 f8 0d 20 	ld.w	r8,r8[3360]
800147dc:	2f f8       	sub	r8,-1
800147de:	10 39       	cp.w	r9,r8
800147e0:	cd 05       	brlt	80014780 <read_parameters_from_flashc+0x2e>
		local_array.values[i] = nvram_array->values[i];
		cksum1 += local_array.values[i];
		cksum2 += cksum1;
	}
	
	if ((param_set.param_count==local_array.values[0])&&(cksum1 == nvram_array->values[param_set.param_count+1])&&(cksum2 == nvram_array->values[param_set.param_count+2]))
800147e2:	ec f8 00 28 	ld.w	r8,r6[40]
800147e6:	f0 f8 0d 20 	ld.w	r8,r8[3360]
800147ea:	e5 a6 09 08 	cop	cp0,cr9,cr0,cr8,0x4c
800147ee:	ee f8 fe 08 	ld.w	r8,r7[-504]
800147f2:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
800147f6:	c4 b1       	brne	8001488c <read_parameters_from_flashc+0x13a>
800147f8:	ec f8 01 78 	ld.w	r8,r6[376]
800147fc:	70 08       	ld.w	r8,r8[0x0]
800147fe:	ec f9 00 28 	ld.w	r9,r6[40]
80014802:	f2 f9 0d 20 	ld.w	r9,r9[3360]
80014806:	2f f9       	sub	r9,-1
80014808:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
8001480c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80014810:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
80014814:	c3 c1       	brne	8001488c <read_parameters_from_flashc+0x13a>
80014816:	ec f8 01 78 	ld.w	r8,r6[376]
8001481a:	70 08       	ld.w	r8,r8[0x0]
8001481c:	ec f9 00 28 	ld.w	r9,r6[40]
80014820:	f2 f9 0d 20 	ld.w	r9,r9[3360]
80014824:	2f e9       	sub	r9,-2
80014826:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
8001482a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001482e:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
80014832:	c2 d1       	brne	8001488c <read_parameters_from_flashc+0x13a>
	{
		dbg_print("Flash read successful! New Parameters inserted. \n");
80014834:	fe cc 01 48 	sub	r12,pc,328
80014838:	f0 16 00 01 	mcall	r6[4]
		for (i=1;i<(param_set.param_count+1);i++)
8001483c:	30 18       	mov	r8,1
8001483e:	ef 68 ff f7 	st.b	r7[-9],r8
80014842:	c1 b8       	rjmp	80014878 <read_parameters_from_flashc+0x126>
		{
			*param_set.parameters[i-1].param = local_array.values[i];
80014844:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80014848:	f0 c9 00 01 	sub	r9,r8,1
8001484c:	ec fa 00 28 	ld.w	r10,r6[40]
80014850:	12 98       	mov	r8,r9
80014852:	a3 78       	lsl	r8,0x3
80014854:	12 18       	sub	r8,r9
80014856:	a3 68       	lsl	r8,0x2
80014858:	f4 08 00 08 	add	r8,r10,r8
8001485c:	70 09       	ld.w	r9,r8[0x0]
8001485e:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80014862:	a3 68       	lsl	r8,0x2
80014864:	ee 08 00 08 	add	r8,r7,r8
80014868:	f0 f8 fe 08 	ld.w	r8,r8[-504]
8001486c:	93 08       	st.w	r9[0x0],r8
	}
	
	if ((param_set.param_count==local_array.values[0])&&(cksum1 == nvram_array->values[param_set.param_count+1])&&(cksum2 == nvram_array->values[param_set.param_count+2]))
	{
		dbg_print("Flash read successful! New Parameters inserted. \n");
		for (i=1;i<(param_set.param_count+1);i++)
8001486e:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80014872:	2f f8       	sub	r8,-1
80014874:	ef 68 ff f7 	st.b	r7[-9],r8
80014878:	ef 39 ff f7 	ld.ub	r9,r7[-9]
8001487c:	ec f8 00 28 	ld.w	r8,r6[40]
80014880:	f0 f8 0d 20 	ld.w	r8,r8[3360]
80014884:	2f f8       	sub	r8,-1
80014886:	10 39       	cp.w	r9,r8
80014888:	cd e5       	brlt	80014844 <read_parameters_from_flashc+0xf2>
		local_array.values[i] = nvram_array->values[i];
		cksum1 += local_array.values[i];
		cksum2 += cksum1;
	}
	
	if ((param_set.param_count==local_array.values[0])&&(cksum1 == nvram_array->values[param_set.param_count+1])&&(cksum2 == nvram_array->values[param_set.param_count+2]))
8001488a:	c0 58       	rjmp	80014894 <read_parameters_from_flashc+0x142>
		for (i=1;i<(param_set.param_count+1);i++)
		{
			*param_set.parameters[i-1].param = local_array.values[i];
		}
	}else{
		dbg_print("Flash memory corrupted! Hardcoded values taken.\n");
8001488c:	fe cc 01 6c 	sub	r12,pc,364
80014890:	f0 16 00 01 	mcall	r6[4]
	}
}
80014894:	28 2d       	sub	sp,-504
80014896:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001489a:	00 00       	add	r0,r0
8001489c:	80 01       	ld.sh	r1,r0[0x0]
8001489e:	45 e2       	lddsp	r2,sp[0x178]
800148a0:	42 65       	lddsp	r5,sp[0x98]
800148a2:	67 69       	ld.w	r9,r3[0x58]
800148a4:	6e 20       	ld.w	r0,r7[0x8]
800148a6:	77 72       	ld.w	r2,r11[0x5c]
800148a8:	69 74       	ld.w	r4,r4[0x5c]
800148aa:	65 20       	ld.w	r0,r2[0x48]
800148ac:	74 6f       	ld.w	pc,r10[0x18]
800148ae:	20 66       	sub	r6,6
800148b0:	6c 61       	ld.w	r1,r6[0x18]
800148b2:	73 68       	ld.w	r8,r9[0x58]
800148b4:	63 2e       	ld.w	lr,r1[0x48]
800148b6:	2e 2e       	sub	lr,-30
800148b8:	0a 00       	add	r0,r5
800148ba:	00 00       	add	r0,r0
800148bc:	57 72       	stdsp	sp[0x1dc],r2
800148be:	69 74       	ld.w	r4,r4[0x5c]
800148c0:	65 20       	ld.w	r0,r2[0x48]
800148c2:	74 6f       	ld.w	pc,r10[0x18]
800148c4:	20 66       	sub	r6,6
800148c6:	61 6c       	ld.w	r12,r0[0x58]
800148c8:	73 68       	ld.w	r8,r9[0x58]
800148ca:	63 20       	ld.w	r0,r1[0x48]
800148cc:	63 6f       	ld.w	pc,r1[0x58]
800148ce:	6d 70       	ld.w	r0,r6[0x5c]
800148d0:	6c 65       	ld.w	r5,r6[0x18]
800148d2:	74 65       	ld.w	r5,r10[0x18]
800148d4:	64 2e       	ld.w	lr,r2[0x8]
800148d6:	0a 00       	add	r0,r5

800148d8 <write_parameters_to_flashc>:

void write_parameters_to_flashc()
{
800148d8:	eb cd 40 c0 	pushm	r6-r7,lr
800148dc:	1a 97       	mov	r7,sp
800148de:	fa cd 01 f8 	sub	sp,sp,504
800148e2:	4c 96       	lddpc	r6,80014a04 <write_parameters_to_flashc+0x12c>
800148e4:	1e 26       	rsub	r6,pc
	float cksum1, cksum2;
	cksum1 = 0;
800148e6:	30 08       	mov	r8,0
800148e8:	ef 48 ff f4 	st.w	r7[-12],r8
	cksum2 = 0;
800148ec:	30 08       	mov	r8,0
800148ee:	ef 48 ff f8 	st.w	r7[-8],r8

	uint8_t i;
	nvram_array = AVR32_FLASHC_USER_PAGE_ADDRESS + 0x04;
800148f2:	ec f8 01 78 	ld.w	r8,r6[376]
800148f6:	30 49       	mov	r9,4
800148f8:	ea 19 80 80 	orh	r9,0x8080
800148fc:	91 09       	st.w	r8[0x0],r9
	
	nvram_data_ttt local_array;
	
	local_array.values[0] = param_set.param_count;
800148fe:	ec f8 00 28 	ld.w	r8,r6[40]
80014902:	f0 f8 0d 20 	ld.w	r8,r8[3360]
80014906:	e5 a6 08 08 	cop	cp0,cr8,cr0,cr8,0x4c
8001490a:	ef 48 fe 08 	st.w	r7[-504],r8
	cksum1 += local_array.values[0];
8001490e:	ee f8 fe 08 	ld.w	r8,r7[-504]
80014912:	ee f9 ff f4 	ld.w	r9,r7[-12]
80014916:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8001491a:	ef 48 ff f4 	st.w	r7[-12],r8
	cksum2 += cksum1;
8001491e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80014922:	ee f8 ff f4 	ld.w	r8,r7[-12]
80014926:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8001492a:	ef 48 ff f8 	st.w	r7[-8],r8
	
	dbg_print("Begin write to flashc...\n");
8001492e:	fe cc 00 8e 	sub	r12,pc,142
80014932:	f0 16 00 01 	mcall	r6[4]
	
	for (i=1;i<(param_set.param_count+1);i++)
80014936:	30 18       	mov	r8,1
80014938:	ef 68 ff ff 	st.b	r7[-1],r8
8001493c:	c3 18       	rjmp	8001499e <write_parameters_to_flashc+0xc6>
	{
		//flashc_memcpy((void *)&(nvram_array->values[i]),   param_set.parameters[i].param, sizeof((nvram_array->values[i])),   true);
		local_array.values[i] = *param_set.parameters[i-1].param;
8001493e:	ef 3a ff ff 	ld.ub	r10,r7[-1]
80014942:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80014946:	f0 c9 00 01 	sub	r9,r8,1
8001494a:	ec fb 00 28 	ld.w	r11,r6[40]
8001494e:	12 98       	mov	r8,r9
80014950:	a3 78       	lsl	r8,0x3
80014952:	12 18       	sub	r8,r9
80014954:	a3 68       	lsl	r8,0x2
80014956:	f6 08 00 08 	add	r8,r11,r8
8001495a:	70 08       	ld.w	r8,r8[0x0]
8001495c:	70 09       	ld.w	r9,r8[0x0]
8001495e:	f4 08 15 02 	lsl	r8,r10,0x2
80014962:	ee 08 00 08 	add	r8,r7,r8
80014966:	f1 49 fe 08 	st.w	r8[-504],r9
		cksum1 += local_array.values[i];
8001496a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8001496e:	a3 68       	lsl	r8,0x2
80014970:	ee 08 00 08 	add	r8,r7,r8
80014974:	f0 f8 fe 08 	ld.w	r8,r8[-504]
80014978:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001497c:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80014980:	ef 48 ff f4 	st.w	r7[-12],r8
		cksum2 += cksum1;
80014984:	ee f9 ff f8 	ld.w	r9,r7[-8]
80014988:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001498c:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80014990:	ef 48 ff f8 	st.w	r7[-8],r8
	cksum1 += local_array.values[0];
	cksum2 += cksum1;
	
	dbg_print("Begin write to flashc...\n");
	
	for (i=1;i<(param_set.param_count+1);i++)
80014994:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80014998:	2f f8       	sub	r8,-1
8001499a:	ef 68 ff ff 	st.b	r7[-1],r8
8001499e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800149a2:	ec f8 00 28 	ld.w	r8,r6[40]
800149a6:	f0 f8 0d 20 	ld.w	r8,r8[3360]
800149aa:	2f f8       	sub	r8,-1
800149ac:	10 39       	cp.w	r9,r8
800149ae:	cc 85       	brlt	8001493e <write_parameters_to_flashc+0x66>
		//flashc_memcpy((void *)&(nvram_array->values[i]),   param_set.parameters[i].param, sizeof((nvram_array->values[i])),   true);
		local_array.values[i] = *param_set.parameters[i-1].param;
		cksum1 += local_array.values[i];
		cksum2 += cksum1;
	}
	local_array.values[param_set.param_count+1] = cksum1;
800149b0:	ec f8 00 28 	ld.w	r8,r6[40]
800149b4:	f0 f8 0d 20 	ld.w	r8,r8[3360]
800149b8:	2f f8       	sub	r8,-1
800149ba:	a3 68       	lsl	r8,0x2
800149bc:	ee 08 00 08 	add	r8,r7,r8
800149c0:	ee f9 ff f4 	ld.w	r9,r7[-12]
800149c4:	f1 49 fe 08 	st.w	r8[-504],r9
	local_array.values[param_set.param_count+2] = cksum2;
800149c8:	ec f8 00 28 	ld.w	r8,r6[40]
800149cc:	f0 f8 0d 20 	ld.w	r8,r8[3360]
800149d0:	2f e8       	sub	r8,-2
800149d2:	a3 68       	lsl	r8,0x2
800149d4:	ee 08 00 08 	add	r8,r7,r8
800149d8:	ee f9 ff f8 	ld.w	r9,r7[-8]
800149dc:	f1 49 fe 08 	st.w	r8[-504],r9
	
	flashc_memcpy((void *)nvram_array, &local_array, sizeof(*nvram_array) ,   true);
800149e0:	ec f8 01 78 	ld.w	r8,r6[376]
800149e4:	70 08       	ld.w	r8,r8[0x0]
800149e6:	ee cb 01 f8 	sub	r11,r7,504
800149ea:	30 19       	mov	r9,1
800149ec:	e0 6a 01 ec 	mov	r10,492
800149f0:	10 9c       	mov	r12,r8
800149f2:	f0 16 01 52 	mcall	r6[1352]
	dbg_print("Write to falshc completed.\n");
800149f6:	fe cc 01 3a 	sub	r12,pc,314
800149fa:	f0 16 00 01 	mcall	r6[4]
800149fe:	28 2d       	sub	sp,-504
80014a00:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80014a04:	80 01       	ld.sh	r1,r0[0x0]
80014a06:	47 68       	lddsp	r8,sp[0x1d8]

80014a08 <quat_from_vector>:
	out.v[2] = -q.v[2];

#define QUAT(q, s, v0, v1, v2) \
	q.s=s; q.v[0]=v0; q.v[1]=v1; q.v[2]=v2;

UQuat_t static inline quat_from_vector(float *v) {
80014a08:	eb cd 40 80 	pushm	r7,lr
80014a0c:	1a 97       	mov	r7,sp
80014a0e:	20 5d       	sub	sp,20
80014a10:	18 9a       	mov	r10,r12
80014a12:	ef 4b ff ec 	st.w	r7[-20],r11
	UQuat_t q;	
	q.s=0; 
80014a16:	30 08       	mov	r8,0
80014a18:	ef 48 ff f0 	st.w	r7[-16],r8
	q.v[0]=v[0]; 
80014a1c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80014a20:	70 08       	ld.w	r8,r8[0x0]
80014a22:	ef 48 ff f4 	st.w	r7[-12],r8
	q.v[1]=v[1]; 
80014a26:	ee f8 ff ec 	ld.w	r8,r7[-20]
80014a2a:	2f c8       	sub	r8,-4
80014a2c:	70 08       	ld.w	r8,r8[0x0]
80014a2e:	ef 48 ff f8 	st.w	r7[-8],r8
	q.v[2]=v[2];
80014a32:	ee f8 ff ec 	ld.w	r8,r7[-20]
80014a36:	2f 88       	sub	r8,-8
80014a38:	70 08       	ld.w	r8,r8[0x0]
80014a3a:	ef 48 ff fc 	st.w	r7[-4],r8
	return q;
80014a3e:	14 98       	mov	r8,r10
80014a40:	ee c9 00 10 	sub	r9,r7,16
80014a44:	20 08       	sub	r8,0
80014a46:	20 09       	sub	r9,0
80014a48:	72 0b       	ld.w	r11,r9[0x0]
80014a4a:	91 0b       	st.w	r8[0x0],r11
80014a4c:	72 1b       	ld.w	r11,r9[0x4]
80014a4e:	91 1b       	st.w	r8[0x4],r11
80014a50:	72 2b       	ld.w	r11,r9[0x8]
80014a52:	91 2b       	st.w	r8[0x8],r11
80014a54:	72 39       	ld.w	r9,r9[0xc]
80014a56:	91 39       	st.w	r8[0xc],r9
}
80014a58:	14 9c       	mov	r12,r10
80014a5a:	2f bd       	sub	sp,-20
80014a5c:	e3 cd 80 80 	ldm	sp++,r7,pc

80014a60 <scalar_product>:
	return out;
}


float static inline scalar_product(const float u[], const float v[])
{
80014a60:	eb cd 40 80 	pushm	r7,lr
80014a64:	1a 97       	mov	r7,sp
80014a66:	20 3d       	sub	sp,12
80014a68:	ef 4c ff f8 	st.w	r7[-8],r12
80014a6c:	ef 4b ff f4 	st.w	r7[-12],r11
	float scp = (u[0]*v[0]+u[1]*v[1]+u[2]*v[2]);
80014a70:	ee f8 ff f8 	ld.w	r8,r7[-8]
80014a74:	70 09       	ld.w	r9,r8[0x0]
80014a76:	ee f8 ff f4 	ld.w	r8,r7[-12]
80014a7a:	70 08       	ld.w	r8,r8[0x0]
80014a7c:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80014a80:	ee f8 ff f8 	ld.w	r8,r7[-8]
80014a84:	2f c8       	sub	r8,-4
80014a86:	70 0a       	ld.w	r10,r8[0x0]
80014a88:	ee f8 ff f4 	ld.w	r8,r7[-12]
80014a8c:	2f c8       	sub	r8,-4
80014a8e:	70 08       	ld.w	r8,r8[0x0]
80014a90:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80014a94:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80014a98:	ee f8 ff f8 	ld.w	r8,r7[-8]
80014a9c:	2f 88       	sub	r8,-8
80014a9e:	70 0a       	ld.w	r10,r8[0x0]
80014aa0:	ee f8 ff f4 	ld.w	r8,r7[-12]
80014aa4:	2f 88       	sub	r8,-8
80014aa6:	70 08       	ld.w	r8,r8[0x0]
80014aa8:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80014aac:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80014ab0:	ef 48 ff fc 	st.w	r7[-4],r8
	return scp;
80014ab4:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80014ab8:	10 9c       	mov	r12,r8
80014aba:	2f dd       	sub	sp,-12
80014abc:	e3 cd 80 80 	ldm	sp++,r7,pc

80014ac0 <quat_multi>:
	out[2] = u[0] * v[1] - u[1] * v[0];
}


UQuat_t static inline quat_multi(const UQuat_t q1, const UQuat_t q2)
{
80014ac0:	eb cd 40 e8 	pushm	r3,r5-r7,lr
80014ac4:	1a 97       	mov	r7,sp
80014ac6:	20 7d       	sub	sp,28
80014ac8:	4b d6       	lddpc	r6,80014bbc <quat_multi+0xfc>
80014aca:	1e 26       	rsub	r6,pc
80014acc:	ee c8 ff ec 	sub	r8,r7,-20
80014ad0:	18 95       	mov	r5,r12
	float tmp[3];
	UQuat_t out;
	tmp[0] = q1.v[1] * q2.v[2] - q1.v[2]*q2.v[1];
80014ad2:	70 2a       	ld.w	r10,r8[0x8]
80014ad4:	70 79       	ld.w	r9,r8[0x1c]
80014ad6:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
80014ada:	70 3b       	ld.w	r11,r8[0xc]
80014adc:	70 69       	ld.w	r9,r8[0x18]
80014ade:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
80014ae2:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80014ae6:	ef 49 ff f4 	st.w	r7[-12],r9
	tmp[1] = q1.v[2] * q2.v[0] - q1.v[0]*q2.v[2];
80014aea:	70 3a       	ld.w	r10,r8[0xc]
80014aec:	70 59       	ld.w	r9,r8[0x14]
80014aee:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
80014af2:	70 1b       	ld.w	r11,r8[0x4]
80014af4:	70 79       	ld.w	r9,r8[0x1c]
80014af6:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
80014afa:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80014afe:	ef 49 ff f8 	st.w	r7[-8],r9
	tmp[2] = q1.v[0] * q2.v[1] - q1.v[1]*q2.v[0];
80014b02:	70 1a       	ld.w	r10,r8[0x4]
80014b04:	70 69       	ld.w	r9,r8[0x18]
80014b06:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
80014b0a:	70 2b       	ld.w	r11,r8[0x8]
80014b0c:	70 59       	ld.w	r9,r8[0x14]
80014b0e:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
80014b12:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80014b16:	ef 49 ff fc 	st.w	r7[-4],r9
	out.v[0] = q2.s*q1.v[0] + q1.s *q2.v[0] +tmp[0];
80014b1a:	70 4a       	ld.w	r10,r8[0x10]
80014b1c:	70 19       	ld.w	r9,r8[0x4]
80014b1e:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
80014b22:	70 0b       	ld.w	r11,r8[0x0]
80014b24:	70 59       	ld.w	r9,r8[0x14]
80014b26:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
80014b2a:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
80014b2e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80014b32:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
80014b36:	ef 49 ff e8 	st.w	r7[-24],r9
	out.v[1] = q2.s*q1.v[1] + q1.s *q2.v[1] +tmp[1];
80014b3a:	70 4a       	ld.w	r10,r8[0x10]
80014b3c:	70 29       	ld.w	r9,r8[0x8]
80014b3e:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
80014b42:	70 0b       	ld.w	r11,r8[0x0]
80014b44:	70 69       	ld.w	r9,r8[0x18]
80014b46:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
80014b4a:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
80014b4e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80014b52:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
80014b56:	ef 49 ff ec 	st.w	r7[-20],r9
	out.v[2] = q2.s*q1.v[2] + q1.s *q2.v[2] +tmp[2];
80014b5a:	70 4a       	ld.w	r10,r8[0x10]
80014b5c:	70 39       	ld.w	r9,r8[0xc]
80014b5e:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
80014b62:	70 0b       	ld.w	r11,r8[0x0]
80014b64:	70 79       	ld.w	r9,r8[0x1c]
80014b66:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
80014b6a:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
80014b6e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80014b72:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
80014b76:	ef 49 ff f0 	st.w	r7[-16],r9
	out.s= q1.s*q2.s - scalar_product(q1.v, q2.v);
80014b7a:	70 0a       	ld.w	r10,r8[0x0]
80014b7c:	70 49       	ld.w	r9,r8[0x10]
80014b7e:	e5 a2 03 a9 	cop	cp0,cr3,cr10,cr9,0x44
80014b82:	f0 c9 ff f0 	sub	r9,r8,-16
80014b86:	2f c9       	sub	r9,-4
80014b88:	2f c8       	sub	r8,-4
80014b8a:	12 9b       	mov	r11,r9
80014b8c:	10 9c       	mov	r12,r8
80014b8e:	c6 9f       	rcall	80014a60 <scalar_product>
80014b90:	18 98       	mov	r8,r12
80014b92:	e5 a1 08 38 	cop	cp0,cr8,cr3,cr8,0x42
80014b96:	ef 48 ff e4 	st.w	r7[-28],r8
	
	return out;
80014b9a:	0a 98       	mov	r8,r5
80014b9c:	ee c9 00 1c 	sub	r9,r7,28
80014ba0:	20 08       	sub	r8,0
80014ba2:	20 09       	sub	r9,0
80014ba4:	72 0a       	ld.w	r10,r9[0x0]
80014ba6:	91 0a       	st.w	r8[0x0],r10
80014ba8:	72 1a       	ld.w	r10,r9[0x4]
80014baa:	91 1a       	st.w	r8[0x4],r10
80014bac:	72 2a       	ld.w	r10,r9[0x8]
80014bae:	91 2a       	st.w	r8[0x8],r10
80014bb0:	72 39       	ld.w	r9,r9[0xc]
80014bb2:	91 39       	st.w	r8[0xc],r9
}
80014bb4:	0a 9c       	mov	r12,r5
80014bb6:	2f 9d       	sub	sp,-28
80014bb8:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
80014bbc:	80 01       	ld.sh	r1,r0[0x0]
80014bbe:	49 4e       	lddpc	lr,80014c0c <quat_inv+0x4c>

80014bc0 <quat_inv>:

UQuat_t static inline quat_inv(const UQuat_t q)
{
80014bc0:	eb cd 40 80 	pushm	r7,lr
80014bc4:	1a 97       	mov	r7,sp
80014bc6:	20 5d       	sub	sp,20
80014bc8:	ee c9 ff f8 	sub	r9,r7,-8
80014bcc:	18 9a       	mov	r10,r12
	int i;
	
	UQuat_t qinv;
	qinv.s = q.s;
80014bce:	72 08       	ld.w	r8,r9[0x0]
80014bd0:	ef 48 ff ec 	st.w	r7[-20],r8
	for (i=0;i<3;i++)
80014bd4:	30 08       	mov	r8,0
80014bd6:	ef 48 ff fc 	st.w	r7[-4],r8
80014bda:	c1 58       	rjmp	80014c04 <quat_inv+0x44>
	{
		qinv.v[i] = -q.v[i];
80014bdc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80014be0:	ee fb ff fc 	ld.w	r11,r7[-4]
80014be4:	2f fb       	sub	r11,-1
80014be6:	f2 0b 03 2b 	ld.w	r11,r9[r11<<0x2]
80014bea:	ee 1b 80 00 	eorh	r11,0x8000
80014bee:	2f f8       	sub	r8,-1
80014bf0:	a3 68       	lsl	r8,0x2
80014bf2:	ee 08 00 08 	add	r8,r7,r8
80014bf6:	f1 4b ff ec 	st.w	r8[-20],r11
{
	int i;
	
	UQuat_t qinv;
	qinv.s = q.s;
	for (i=0;i<3;i++)
80014bfa:	ee f8 ff fc 	ld.w	r8,r7[-4]
80014bfe:	2f f8       	sub	r8,-1
80014c00:	ef 48 ff fc 	st.w	r7[-4],r8
80014c04:	ee f8 ff fc 	ld.w	r8,r7[-4]
80014c08:	58 28       	cp.w	r8,2
80014c0a:	fe 9a ff e9 	brle	80014bdc <quat_inv+0x1c>
	{
		qinv.v[i] = -q.v[i];
	}
	return qinv;
80014c0e:	14 98       	mov	r8,r10
80014c10:	ee c9 00 14 	sub	r9,r7,20
80014c14:	20 08       	sub	r8,0
80014c16:	20 09       	sub	r9,0
80014c18:	72 0b       	ld.w	r11,r9[0x0]
80014c1a:	91 0b       	st.w	r8[0x0],r11
80014c1c:	72 1b       	ld.w	r11,r9[0x4]
80014c1e:	91 1b       	st.w	r8[0x4],r11
80014c20:	72 2b       	ld.w	r11,r9[0x8]
80014c22:	91 2b       	st.w	r8[0x8],r11
80014c24:	72 39       	ld.w	r9,r9[0xc]
80014c26:	91 39       	st.w	r8[0xc],r9
}
80014c28:	14 9c       	mov	r12,r10
80014c2a:	2f bd       	sub	sp,-20
80014c2c:	e3 cd 80 80 	ldm	sp++,r7,pc

80014c30 <quat_global_to_local>:

UQuat_t static inline quat_global_to_local(const UQuat_t qe, const UQuat_t qvect)
{
80014c30:	eb cd 40 e8 	pushm	r3,r5-r7,lr
80014c34:	1a 97       	mov	r7,sp
80014c36:	20 cd       	sub	sp,48
80014c38:	4b c6       	lddpc	r6,80014d28 <quat_global_to_local+0xf8>
80014c3a:	1e 26       	rsub	r6,pc
80014c3c:	ee c5 ff ec 	sub	r5,r7,-20
80014c40:	18 93       	mov	r3,r12
	UQuat_t qinv, qtmp;
	
	qinv = quat_inv(qe);
80014c42:	ee ca 00 10 	sub	r10,r7,16
80014c46:	20 4d       	sub	sp,16
80014c48:	1a 98       	mov	r8,sp
80014c4a:	0a 99       	mov	r9,r5
80014c4c:	20 08       	sub	r8,0
80014c4e:	20 09       	sub	r9,0
80014c50:	72 0b       	ld.w	r11,r9[0x0]
80014c52:	91 0b       	st.w	r8[0x0],r11
80014c54:	72 1b       	ld.w	r11,r9[0x4]
80014c56:	91 1b       	st.w	r8[0x4],r11
80014c58:	72 2b       	ld.w	r11,r9[0x8]
80014c5a:	91 2b       	st.w	r8[0x8],r11
80014c5c:	72 39       	ld.w	r9,r9[0xc]
80014c5e:	91 39       	st.w	r8[0xc],r9
80014c60:	14 9c       	mov	r12,r10
80014c62:	ca ff       	rcall	80014bc0 <quat_inv>
80014c64:	2f cd       	sub	sp,-16
	qtmp = quat_multi(qinv,qvect);
80014c66:	ee ca 00 20 	sub	r10,r7,32
80014c6a:	20 4d       	sub	sp,16
80014c6c:	1a 98       	mov	r8,sp
80014c6e:	ea c9 ff f0 	sub	r9,r5,-16
80014c72:	20 08       	sub	r8,0
80014c74:	20 09       	sub	r9,0
80014c76:	72 0b       	ld.w	r11,r9[0x0]
80014c78:	91 0b       	st.w	r8[0x0],r11
80014c7a:	72 1b       	ld.w	r11,r9[0x4]
80014c7c:	91 1b       	st.w	r8[0x4],r11
80014c7e:	72 2b       	ld.w	r11,r9[0x8]
80014c80:	91 2b       	st.w	r8[0x8],r11
80014c82:	72 39       	ld.w	r9,r9[0xc]
80014c84:	91 39       	st.w	r8[0xc],r9
80014c86:	20 4d       	sub	sp,16
80014c88:	1a 98       	mov	r8,sp
80014c8a:	ee c9 00 10 	sub	r9,r7,16
80014c8e:	20 08       	sub	r8,0
80014c90:	20 09       	sub	r9,0
80014c92:	72 0b       	ld.w	r11,r9[0x0]
80014c94:	91 0b       	st.w	r8[0x0],r11
80014c96:	72 1b       	ld.w	r11,r9[0x4]
80014c98:	91 1b       	st.w	r8[0x4],r11
80014c9a:	72 2b       	ld.w	r11,r9[0x8]
80014c9c:	91 2b       	st.w	r8[0x8],r11
80014c9e:	72 39       	ld.w	r9,r9[0xc]
80014ca0:	91 39       	st.w	r8[0xc],r9
80014ca2:	14 9c       	mov	r12,r10
80014ca4:	c0 ef       	rcall	80014ac0 <quat_multi>
80014ca6:	2f 8d       	sub	sp,-32
	qtmp = quat_multi(qtmp,qe);
80014ca8:	ee ca 00 30 	sub	r10,r7,48
80014cac:	20 4d       	sub	sp,16
80014cae:	1a 98       	mov	r8,sp
80014cb0:	0a 99       	mov	r9,r5
80014cb2:	20 08       	sub	r8,0
80014cb4:	20 09       	sub	r9,0
80014cb6:	72 0b       	ld.w	r11,r9[0x0]
80014cb8:	91 0b       	st.w	r8[0x0],r11
80014cba:	72 1b       	ld.w	r11,r9[0x4]
80014cbc:	91 1b       	st.w	r8[0x4],r11
80014cbe:	72 2b       	ld.w	r11,r9[0x8]
80014cc0:	91 2b       	st.w	r8[0x8],r11
80014cc2:	72 39       	ld.w	r9,r9[0xc]
80014cc4:	91 39       	st.w	r8[0xc],r9
80014cc6:	20 4d       	sub	sp,16
80014cc8:	1a 98       	mov	r8,sp
80014cca:	ee c9 00 20 	sub	r9,r7,32
80014cce:	20 08       	sub	r8,0
80014cd0:	20 09       	sub	r9,0
80014cd2:	72 0b       	ld.w	r11,r9[0x0]
80014cd4:	91 0b       	st.w	r8[0x0],r11
80014cd6:	72 1b       	ld.w	r11,r9[0x4]
80014cd8:	91 1b       	st.w	r8[0x4],r11
80014cda:	72 2b       	ld.w	r11,r9[0x8]
80014cdc:	91 2b       	st.w	r8[0x8],r11
80014cde:	72 39       	ld.w	r9,r9[0xc]
80014ce0:	91 39       	st.w	r8[0xc],r9
80014ce2:	14 9c       	mov	r12,r10
80014ce4:	ce ee       	rcall	80014ac0 <quat_multi>
80014ce6:	2f 8d       	sub	sp,-32
80014ce8:	ee c8 00 20 	sub	r8,r7,32
80014cec:	ee c9 00 30 	sub	r9,r7,48
80014cf0:	20 08       	sub	r8,0
80014cf2:	20 09       	sub	r9,0
80014cf4:	72 0a       	ld.w	r10,r9[0x0]
80014cf6:	91 0a       	st.w	r8[0x0],r10
80014cf8:	72 1a       	ld.w	r10,r9[0x4]
80014cfa:	91 1a       	st.w	r8[0x4],r10
80014cfc:	72 2a       	ld.w	r10,r9[0x8]
80014cfe:	91 2a       	st.w	r8[0x8],r10
80014d00:	72 39       	ld.w	r9,r9[0xc]
80014d02:	91 39       	st.w	r8[0xc],r9

	return qtmp;
80014d04:	06 98       	mov	r8,r3
80014d06:	ee c9 00 20 	sub	r9,r7,32
80014d0a:	20 08       	sub	r8,0
80014d0c:	20 09       	sub	r9,0
80014d0e:	72 0a       	ld.w	r10,r9[0x0]
80014d10:	91 0a       	st.w	r8[0x0],r10
80014d12:	72 1a       	ld.w	r10,r9[0x4]
80014d14:	91 1a       	st.w	r8[0x4],r10
80014d16:	72 2a       	ld.w	r10,r9[0x8]
80014d18:	91 2a       	st.w	r8[0x8],r10
80014d1a:	72 39       	ld.w	r9,r9[0xc]
80014d1c:	91 39       	st.w	r8[0xc],r9
}
80014d1e:	06 9c       	mov	r12,r3
80014d20:	2f 4d       	sub	sp,-48
80014d22:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
80014d26:	00 00       	add	r0,r0
80014d28:	80 01       	ld.sh	r1,r0[0x0]
80014d2a:	4a be       	lddpc	lr,80014dd4 <center_window_2>

80014d2c <vector_norm_sqr>:
	result=0.5*(result+(input/result));
	return result;
}

float static inline vector_norm_sqr(float u[])
{
80014d2c:	eb cd 40 c0 	pushm	r6-r7,lr
80014d30:	1a 97       	mov	r7,sp
80014d32:	20 2d       	sub	sp,8
80014d34:	48 96       	lddpc	r6,80014d58 <vector_norm_sqr+0x2c>
80014d36:	1e 26       	rsub	r6,pc
80014d38:	ef 4c ff f8 	st.w	r7[-8],r12
	float norm = scalar_product(u,u);
80014d3c:	ee fb ff f8 	ld.w	r11,r7[-8]
80014d40:	ee fc ff f8 	ld.w	r12,r7[-8]
80014d44:	c8 ee       	rcall	80014a60 <scalar_product>
80014d46:	18 98       	mov	r8,r12
80014d48:	ef 48 ff fc 	st.w	r7[-4],r8
	return norm;
80014d4c:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80014d50:	10 9c       	mov	r12,r8
80014d52:	2f ed       	sub	sp,-8
80014d54:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80014d58:	80 01       	ld.sh	r1,r0[0x0]
80014d5a:	4b ba       	lddpc	r10,80014e44 <interpolate+0x34>

80014d5c <f_abs>:

	}
	return result;
}

static inline float f_abs(const float a){
80014d5c:	eb cd 40 80 	pushm	r7,lr
80014d60:	1a 97       	mov	r7,sp
80014d62:	20 1d       	sub	sp,4
80014d64:	ef 4c ff fc 	st.w	r7[-4],r12
	if (a >= 0.0)
80014d68:	30 18       	mov	r8,1
80014d6a:	ee fa ff fc 	ld.w	r10,r7[-4]
80014d6e:	30 09       	mov	r9,0
80014d70:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80014d74:	e0 8c 00 03 	brvs	80014d7a <f_abs+0x1e>
80014d78:	c0 24       	brge	80014d7c <f_abs+0x20>
80014d7a:	30 08       	mov	r8,0
80014d7c:	5c 58       	castu.b	r8
80014d7e:	c0 40       	breq	80014d86 <f_abs+0x2a>
	{
		return a;
80014d80:	ee f8 ff fc 	ld.w	r8,r7[-4]
80014d84:	c0 58       	rjmp	80014d8e <f_abs+0x32>
	}else{
		return -a;
80014d86:	ee f8 ff fc 	ld.w	r8,r7[-4]
80014d8a:	ee 18 80 00 	eorh	r8,0x8000
	}
}
80014d8e:	10 9c       	mov	r12,r8
80014d90:	2f fd       	sub	sp,-4
80014d92:	e3 cd 80 80 	ldm	sp++,r7,pc

80014d96 <f_min>:

static inline float f_min(const float a, const float b){
80014d96:	eb cd 40 80 	pushm	r7,lr
80014d9a:	1a 97       	mov	r7,sp
80014d9c:	20 2d       	sub	sp,8
80014d9e:	ef 4c ff fc 	st.w	r7[-4],r12
80014da2:	ef 4b ff f8 	st.w	r7[-8],r11
	if (a <= b)
80014da6:	30 18       	mov	r8,1
80014da8:	ee fa ff fc 	ld.w	r10,r7[-4]
80014dac:	ee f9 ff f8 	ld.w	r9,r7[-8]
80014db0:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80014db4:	e0 8c 00 04 	brvs	80014dbc <f_min+0x26>
80014db8:	e0 8a 00 03 	brle	80014dbe <f_min+0x28>
80014dbc:	30 08       	mov	r8,0
80014dbe:	5c 58       	castu.b	r8
80014dc0:	c0 40       	breq	80014dc8 <f_min+0x32>
	{
		return a;
80014dc2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80014dc6:	c0 38       	rjmp	80014dcc <f_min+0x36>
	}else{
		return b;
80014dc8:	ee f8 ff f8 	ld.w	r8,r7[-8]
	}
}
80014dcc:	10 9c       	mov	r12,r8
80014dce:	2f ed       	sub	sp,-8
80014dd0:	e3 cd 80 80 	ldm	sp++,r7,pc

80014dd4 <center_window_2>:

static float inline sigmoid(float x) {
	return (x/fast_sqrt(1+SQR(x)));
};

static float inline center_window_2(float x) {
80014dd4:	eb cd 40 c0 	pushm	r6-r7,lr
80014dd8:	1a 97       	mov	r7,sp
80014dda:	20 1d       	sub	sp,4
80014ddc:	48 c6       	lddpc	r6,80014e0c <center_window_2+0x38>
80014dde:	1e 26       	rsub	r6,pc
80014de0:	ef 4c ff fc 	st.w	r7[-4],r12
	return 1.0/(1+SQR(x));
80014de4:	ee f9 ff fc 	ld.w	r9,r7[-4]
80014de8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80014dec:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80014df0:	fc 18 3f 80 	movh	r8,0x3f80
80014df4:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80014df8:	10 9b       	mov	r11,r8
80014dfa:	fc 1c 3f 80 	movh	r12,0x3f80
80014dfe:	f0 16 00 08 	mcall	r6[32]
80014e02:	18 98       	mov	r8,r12
}
80014e04:	10 9c       	mov	r12,r8
80014e06:	2f fd       	sub	sp,-4
80014e08:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80014e0c:	80 01       	ld.sh	r1,r0[0x0]
80014e0e:	4c 62       	lddpc	r2,80014f24 <init_nav+0x44>

80014e10 <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
80014e10:	eb cd 40 c0 	pushm	r6-r7,lr
80014e14:	1a 97       	mov	r7,sp
80014e16:	20 6d       	sub	sp,24
80014e18:	49 e6       	lddpc	r6,80014e90 <interpolate+0x80>
80014e1a:	1e 26       	rsub	r6,pc
80014e1c:	ef 4c ff f8 	st.w	r7[-8],r12
80014e20:	ef 4b ff f4 	st.w	r7[-12],r11
80014e24:	ef 4a ff f0 	st.w	r7[-16],r10
80014e28:	ef 49 ff ec 	st.w	r7[-20],r9
80014e2c:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
80014e30:	ee f9 ff f4 	ld.w	r9,r7[-12]
80014e34:	ee f8 ff f0 	ld.w	r8,r7[-16]
80014e38:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
80014e3c:	c0 41       	brne	80014e44 <interpolate+0x34>
	{
		return y1;
80014e3e:	ee f8 ff ec 	ld.w	r8,r7[-20]
80014e42:	c2 38       	rjmp	80014e88 <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
80014e44:	ee f9 ff e8 	ld.w	r9,r7[-24]
80014e48:	ee f8 ff ec 	ld.w	r8,r7[-20]
80014e4c:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80014e50:	ee fa ff f8 	ld.w	r10,r7[-8]
80014e54:	ee f8 ff f4 	ld.w	r8,r7[-12]
80014e58:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80014e5c:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80014e60:	ee fa ff f0 	ld.w	r10,r7[-16]
80014e64:	ee f9 ff f4 	ld.w	r9,r7[-12]
80014e68:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80014e6c:	12 9b       	mov	r11,r9
80014e6e:	10 9c       	mov	r12,r8
80014e70:	f0 16 00 08 	mcall	r6[32]
80014e74:	18 98       	mov	r8,r12
80014e76:	10 99       	mov	r9,r8
80014e78:	ee f8 ff ec 	ld.w	r8,r7[-20]
80014e7c:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80014e80:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
80014e84:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
80014e88:	10 9c       	mov	r12,r8
80014e8a:	2f ad       	sub	sp,-24
80014e8c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80014e90:	80 01       	ld.sh	r1,r0[0x0]
80014e92:	4c 9e       	lddpc	lr,80014fb4 <set_rel_pos_n_dist2wp+0x24>

80014e94 <mav_array_memcpy>:

/*
  like memcpy(), but if src is NULL, do a memset to zero
*/
static void mav_array_memcpy(void *dest, const void *src, size_t n)
{
80014e94:	eb cd 40 c0 	pushm	r6-r7,lr
80014e98:	1a 97       	mov	r7,sp
80014e9a:	20 3d       	sub	sp,12
80014e9c:	49 06       	lddpc	r6,80014edc <mav_array_memcpy+0x48>
80014e9e:	1e 26       	rsub	r6,pc
80014ea0:	ef 4c ff fc 	st.w	r7[-4],r12
80014ea4:	ef 4b ff f8 	st.w	r7[-8],r11
80014ea8:	ef 4a ff f4 	st.w	r7[-12],r10
	if (src == NULL) {
80014eac:	ee f8 ff f8 	ld.w	r8,r7[-8]
80014eb0:	58 08       	cp.w	r8,0
80014eb2:	c0 91       	brne	80014ec4 <mav_array_memcpy+0x30>
		memset(dest, 0, n);
80014eb4:	ee fa ff f4 	ld.w	r10,r7[-12]
80014eb8:	30 0b       	mov	r11,0
80014eba:	ee fc ff fc 	ld.w	r12,r7[-4]
80014ebe:	f0 16 00 30 	mcall	r6[192]
80014ec2:	c0 98       	rjmp	80014ed4 <mav_array_memcpy+0x40>
	} else {
		memcpy(dest, src, n);
80014ec4:	ee fa ff f4 	ld.w	r10,r7[-12]
80014ec8:	ee fb ff f8 	ld.w	r11,r7[-8]
80014ecc:	ee fc ff fc 	ld.w	r12,r7[-4]
80014ed0:	f0 16 00 20 	mcall	r6[128]
	}
}
80014ed4:	2f dd       	sub	sp,-12
80014ed6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80014eda:	00 00       	add	r0,r0
80014edc:	80 01       	ld.sh	r1,r0[0x0]
80014ede:	4d 22       	lddpc	r2,80015024 <set_speed_command+0xc>

80014ee0 <init_nav>:

central_data_t *centralData;
float alt_integrator;

void init_nav()
{
80014ee0:	eb cd 40 c0 	pushm	r6-r7,lr
80014ee4:	1a 97       	mov	r7,sp
80014ee6:	20 1d       	sub	sp,4
80014ee8:	49 46       	lddpc	r6,80014f38 <init_nav+0x58>
80014eea:	1e 26       	rsub	r6,pc
	int8_t i;
	
	centralData = get_central_data();
80014eec:	f0 16 00 32 	mcall	r6[200]
80014ef0:	18 99       	mov	r9,r12
80014ef2:	ec f8 00 00 	ld.w	r8,r6[0]
80014ef6:	91 09       	st.w	r8[0x0],r9
	
	centralData->controls_nav.tvel[X] = 0.0;
80014ef8:	ec f8 00 00 	ld.w	r8,r6[0]
80014efc:	70 08       	ld.w	r8,r8[0x0]
80014efe:	30 09       	mov	r9,0
80014f00:	f1 49 01 84 	st.w	r8[388],r9
	centralData->controls_nav.tvel[Y] = 0.0;
80014f04:	ec f8 00 00 	ld.w	r8,r6[0]
80014f08:	70 08       	ld.w	r8,r8[0x0]
80014f0a:	30 09       	mov	r9,0
80014f0c:	f1 49 01 88 	st.w	r8[392],r9
	centralData->controls_nav.rpy[YAW] = 0.0;
80014f10:	ec f8 00 00 	ld.w	r8,r6[0]
80014f14:	70 08       	ld.w	r8,r8[0x0]
80014f16:	30 09       	mov	r9,0
80014f18:	f1 49 01 7c 	st.w	r8[380],r9
	centralData->controls_nav.tvel[Z] = 0.0; //centralData->controls.thrust;
80014f1c:	ec f8 00 00 	ld.w	r8,r6[0]
80014f20:	70 08       	ld.w	r8,r8[0x0]
80014f22:	30 09       	mov	r9,0
80014f24:	f1 49 01 8c 	st.w	r8[396],r9
	
	alt_integrator = 0.0;
80014f28:	ec f8 07 60 	ld.w	r8,r6[1888]
80014f2c:	30 09       	mov	r9,0
80014f2e:	91 09       	st.w	r8[0x0],r9
}
80014f30:	2f fd       	sub	sp,-4
80014f32:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80014f36:	00 00       	add	r0,r0
80014f38:	80 01       	ld.sh	r1,r0[0x0]
80014f3a:	4d 6e       	lddpc	lr,80015090 <set_speed_command+0x78>

80014f3c <run_navigation>:


void run_navigation(local_coordinates_t waypoint_input)
{
80014f3c:	eb cd 40 e8 	pushm	r3,r5-r7,lr
80014f40:	1a 97       	mov	r7,sp
80014f42:	20 8d       	sub	sp,32
80014f44:	49 26       	lddpc	r6,80014f8c <run_navigation+0x50>
80014f46:	1e 26       	rsub	r6,pc
80014f48:	ee c5 ff ec 	sub	r5,r7,-20
	float newVelocity[3];
	
	float rel_pos[3], dist2wp_sqr;
	
	// Control in translational speed of the platform
	centralData->dist2wp_sqr = set_rel_pos_n_dist2wp(waypoint_input.pos, rel_pos);
80014f4c:	ec f8 00 00 	ld.w	r8,r6[0]
80014f50:	70 03       	ld.w	r3,r8[0x0]
80014f52:	ee c8 00 20 	sub	r8,r7,32
80014f56:	10 9b       	mov	r11,r8
80014f58:	0a 9c       	mov	r12,r5
80014f5a:	f0 16 01 99 	mcall	r6[1636]
80014f5e:	18 98       	mov	r8,r12
80014f60:	e7 48 10 b0 	st.w	r3[4272],r8
	set_speed_command(rel_pos,centralData->dist2wp_sqr);
80014f64:	ec f8 00 00 	ld.w	r8,r6[0]
80014f68:	70 08       	ld.w	r8,r8[0x0]
80014f6a:	f0 f9 10 b0 	ld.w	r9,r8[4272]
80014f6e:	ee c8 00 20 	sub	r8,r7,32
80014f72:	12 9b       	mov	r11,r9
80014f74:	10 9c       	mov	r12,r8
80014f76:	f0 16 01 4a 	mcall	r6[1320]
	
	centralData->controls_nav.theading=waypoint_input.heading;
80014f7a:	ec f8 00 00 	ld.w	r8,r6[0]
80014f7e:	70 08       	ld.w	r8,r8[0x0]
80014f80:	6a 39       	ld.w	r9,r5[0xc]
80014f82:	f1 49 01 90 	st.w	r8[400],r9
}
80014f86:	2f 8d       	sub	sp,-32
80014f88:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
80014f8c:	80 01       	ld.sh	r1,r0[0x0]
80014f8e:	4d ca       	lddpc	r10,800150fc <set_speed_command+0xe4>

80014f90 <set_rel_pos_n_dist2wp>:

float set_rel_pos_n_dist2wp(float waypointPos[], float rel_pos[])
{
80014f90:	eb cd 40 c0 	pushm	r6-r7,lr
80014f94:	1a 97       	mov	r7,sp
80014f96:	20 3d       	sub	sp,12
80014f98:	49 f6       	lddpc	r6,80015014 <set_rel_pos_n_dist2wp+0x84>
80014f9a:	1e 26       	rsub	r6,pc
80014f9c:	ef 4c ff f8 	st.w	r7[-8],r12
80014fa0:	ef 4b ff f4 	st.w	r7[-12],r11
	float dist2wp_sqr;
	
	rel_pos[X] = (float)(waypointPos[X] - centralData->position_estimator.localPosition.pos[X]);
80014fa4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80014fa8:	70 09       	ld.w	r9,r8[0x0]
80014faa:	ec f8 00 00 	ld.w	r8,r6[0]
80014fae:	70 08       	ld.w	r8,r8[0x0]
80014fb0:	f0 f8 0d 9c 	ld.w	r8,r8[3484]
80014fb4:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80014fb8:	ee f8 ff f4 	ld.w	r8,r7[-12]
80014fbc:	91 09       	st.w	r8[0x0],r9
	rel_pos[Y] = (float)(waypointPos[Y] - centralData->position_estimator.localPosition.pos[Y]);
80014fbe:	ee f8 ff f4 	ld.w	r8,r7[-12]
80014fc2:	2f c8       	sub	r8,-4
80014fc4:	ee f9 ff f8 	ld.w	r9,r7[-8]
80014fc8:	2f c9       	sub	r9,-4
80014fca:	72 0a       	ld.w	r10,r9[0x0]
80014fcc:	ec f9 00 00 	ld.w	r9,r6[0]
80014fd0:	72 09       	ld.w	r9,r9[0x0]
80014fd2:	f2 f9 0d a0 	ld.w	r9,r9[3488]
80014fd6:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80014fda:	91 09       	st.w	r8[0x0],r9
	rel_pos[Z] = (float)(waypointPos[Z] - centralData->position_estimator.localPosition.pos[Z]);
80014fdc:	ee f8 ff f4 	ld.w	r8,r7[-12]
80014fe0:	2f 88       	sub	r8,-8
80014fe2:	ee f9 ff f8 	ld.w	r9,r7[-8]
80014fe6:	2f 89       	sub	r9,-8
80014fe8:	72 0a       	ld.w	r10,r9[0x0]
80014fea:	ec f9 00 00 	ld.w	r9,r6[0]
80014fee:	72 09       	ld.w	r9,r9[0x0]
80014ff0:	f2 f9 0d a4 	ld.w	r9,r9[3492]
80014ff4:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80014ff8:	91 09       	st.w	r8[0x0],r9
	
	dist2wp_sqr = vector_norm_sqr(rel_pos);
80014ffa:	ee fc ff f4 	ld.w	r12,r7[-12]
80014ffe:	c9 7e       	rcall	80014d2c <vector_norm_sqr>
80015000:	18 98       	mov	r8,r12
80015002:	ef 48 ff fc 	st.w	r7[-4],r8
	
	return dist2wp_sqr;
80015006:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8001500a:	10 9c       	mov	r12,r8
8001500c:	2f dd       	sub	sp,-12
8001500e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80015012:	00 00       	add	r0,r0
80015014:	80 01       	ld.sh	r1,r0[0x0]
80015016:	4e 1e       	lddpc	lr,80015198 <set_speed_command+0x180>

80015018 <set_speed_command>:

void set_speed_command(float rel_pos[], float dist2wpSqr)
{
80015018:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
8001501c:	1a 97       	mov	r7,sp
8001501e:	21 7d       	sub	sp,92
80015020:	fe f6 02 f0 	ld.w	r6,pc[752]
80015024:	1e 26       	rsub	r6,pc
80015026:	ef 4c ff a8 	st.w	r7[-88],r12
8001502a:	ef 4b ff a4 	st.w	r7[-92],r11
	
	float dir_desired_bf[3], dir_desired[3], new_velocity[3];
	
	float rel_heading;
	
	norm_rel_dist = sqrt(dist2wpSqr);
8001502e:	ee fc ff a4 	ld.w	r12,r7[-92]
80015032:	f0 16 00 02 	mcall	r6[8]
80015036:	14 98       	mov	r8,r10
80015038:	16 99       	mov	r9,r11
8001503a:	10 9a       	mov	r10,r8
8001503c:	12 9b       	mov	r11,r9
8001503e:	f0 16 00 65 	mcall	r6[404]
80015042:	14 98       	mov	r8,r10
80015044:	16 99       	mov	r9,r11
80015046:	10 9a       	mov	r10,r8
80015048:	12 9b       	mov	r11,r9
8001504a:	f0 16 00 09 	mcall	r6[36]
8001504e:	18 98       	mov	r8,r12
80015050:	ef 48 ff f4 	st.w	r7[-12],r8
	
	if (norm_rel_dist < 0.0005)
80015054:	ee fc ff f4 	ld.w	r12,r7[-12]
80015058:	f0 16 00 02 	mcall	r6[8]
8001505c:	30 05       	mov	r5,0
8001505e:	e0 68 a9 fc 	mov	r8,43516
80015062:	ea 18 d2 f1 	orh	r8,0xd2f1
80015066:	e0 69 62 4d 	mov	r9,25165
8001506a:	ea 19 3f 40 	orh	r9,0x3f40
8001506e:	f0 16 00 1d 	mcall	r6[116]
80015072:	18 98       	mov	r8,r12
80015074:	58 08       	cp.w	r8,0
80015076:	c0 20       	breq	8001507a <set_speed_command+0x62>
80015078:	30 15       	mov	r5,1
8001507a:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
8001507e:	c1 80       	breq	800150ae <set_speed_command+0x96>
	{
		norm_rel_dist += 0.0005;
80015080:	ee fc ff f4 	ld.w	r12,r7[-12]
80015084:	f0 16 00 02 	mcall	r6[8]
80015088:	e0 68 a9 fc 	mov	r8,43516
8001508c:	ea 18 d2 f1 	orh	r8,0xd2f1
80015090:	e0 69 62 4d 	mov	r9,25165
80015094:	ea 19 3f 40 	orh	r9,0x3f40
80015098:	f0 16 00 05 	mcall	r6[20]
8001509c:	14 98       	mov	r8,r10
8001509e:	16 99       	mov	r9,r11
800150a0:	10 9a       	mov	r10,r8
800150a2:	12 9b       	mov	r11,r9
800150a4:	f0 16 00 09 	mcall	r6[36]
800150a8:	18 98       	mov	r8,r12
800150aa:	ef 48 ff f4 	st.w	r7[-12],r8
	

	
	// calculate dir_desired in local frame
	// vel = qe-1 * rel_pos * qe
	qtmp1 = quat_from_vector(rel_pos);
800150ae:	ee c8 00 20 	sub	r8,r7,32
800150b2:	ee fb ff a8 	ld.w	r11,r7[-88]
800150b6:	10 9c       	mov	r12,r8
800150b8:	fe b0 fc a8 	rcall	80014a08 <quat_from_vector>
	//qtmp1.s= 0.0; qtmp1.v[0]=dir_desired[0]; qtmp1.v[1]=dir_desired[1]; qtmp1.v[2]=dir_desired[2];
	qtmp2 = quat_global_to_local(centralData->imu1.attitude.qe,qtmp1);
800150bc:	ec f8 00 00 	ld.w	r8,r6[0]
800150c0:	70 0b       	ld.w	r11,r8[0x0]
800150c2:	ee ca 00 30 	sub	r10,r7,48
800150c6:	20 4d       	sub	sp,16
800150c8:	1a 98       	mov	r8,sp
800150ca:	ee c9 00 20 	sub	r9,r7,32
800150ce:	20 08       	sub	r8,0
800150d0:	20 09       	sub	r9,0
800150d2:	72 0c       	ld.w	r12,r9[0x0]
800150d4:	91 0c       	st.w	r8[0x0],r12
800150d6:	72 1c       	ld.w	r12,r9[0x4]
800150d8:	91 1c       	st.w	r8[0x4],r12
800150da:	72 2c       	ld.w	r12,r9[0x8]
800150dc:	91 2c       	st.w	r8[0x8],r12
800150de:	72 39       	ld.w	r9,r9[0xc]
800150e0:	91 39       	st.w	r8[0xc],r9
800150e2:	20 4d       	sub	sp,16
800150e4:	1a 98       	mov	r8,sp
800150e6:	16 99       	mov	r9,r11
800150e8:	20 08       	sub	r8,0
800150ea:	20 09       	sub	r9,0
800150ec:	72 0b       	ld.w	r11,r9[0x0]
800150ee:	91 0b       	st.w	r8[0x0],r11
800150f0:	72 1b       	ld.w	r11,r9[0x4]
800150f2:	91 1b       	st.w	r8[0x4],r11
800150f4:	72 2b       	ld.w	r11,r9[0x8]
800150f6:	91 2b       	st.w	r8[0x8],r11
800150f8:	72 39       	ld.w	r9,r9[0xc]
800150fa:	91 39       	st.w	r8[0xc],r9
800150fc:	14 9c       	mov	r12,r10
800150fe:	fe b0 fd 99 	rcall	80014c30 <quat_global_to_local>
80015102:	2f 8d       	sub	sp,-32
	dir_desired_bf[0] = qtmp2.v[0]; dir_desired_bf[1] = qtmp2.v[1]; dir_desired_bf[2] = qtmp2.v[2];
80015104:	ee f8 ff d4 	ld.w	r8,r7[-44]
80015108:	ef 48 ff c4 	st.w	r7[-60],r8
8001510c:	ee f8 ff d8 	ld.w	r8,r7[-40]
80015110:	ef 48 ff c8 	st.w	r7[-56],r8
80015114:	ee f8 ff dc 	ld.w	r8,r7[-36]
80015118:	ef 48 ff cc 	st.w	r7[-52],r8
	
	// experimental: Z-axis in velocity mode is in global frame...
	dir_desired_bf[2] = rel_pos[2];
8001511c:	ee f8 ff a8 	ld.w	r8,r7[-88]
80015120:	2f 88       	sub	r8,-8
80015122:	70 08       	ld.w	r8,r8[0x0]
80015124:	ef 48 ff cc 	st.w	r7[-52],r8
	
	v_desired = f_min(V_CRUISE,(center_window_2(rel_heading) * DIST_2_VEL_GAIN * norm_rel_dist));
80015128:	ee fc ff fc 	ld.w	r12,r7[-4]
8001512c:	c5 4e       	rcall	80014dd4 <center_window_2>
8001512e:	18 98       	mov	r8,r12
80015130:	10 9c       	mov	r12,r8
80015132:	f0 16 00 02 	mcall	r6[8]
80015136:	e0 68 33 33 	mov	r8,13107
8001513a:	ea 18 33 33 	orh	r8,0x3333
8001513e:	e0 69 33 33 	mov	r9,13107
80015142:	ea 19 3f d3 	orh	r9,0x3fd3
80015146:	f0 16 00 03 	mcall	r6[12]
8001514a:	14 98       	mov	r8,r10
8001514c:	16 99       	mov	r9,r11
8001514e:	10 92       	mov	r2,r8
80015150:	12 93       	mov	r3,r9
80015152:	ee fc ff f4 	ld.w	r12,r7[-12]
80015156:	f0 16 00 02 	mcall	r6[8]
8001515a:	14 98       	mov	r8,r10
8001515c:	16 99       	mov	r9,r11
8001515e:	04 9a       	mov	r10,r2
80015160:	06 9b       	mov	r11,r3
80015162:	f0 16 00 03 	mcall	r6[12]
80015166:	14 98       	mov	r8,r10
80015168:	16 99       	mov	r9,r11
8001516a:	10 9a       	mov	r10,r8
8001516c:	12 9b       	mov	r11,r9
8001516e:	f0 16 00 09 	mcall	r6[36]
80015172:	18 98       	mov	r8,r12
80015174:	10 9b       	mov	r11,r8
80015176:	fc 1c 40 40 	movh	r12,0x4040
8001517a:	c0 ee       	rcall	80014d96 <f_min>
8001517c:	18 98       	mov	r8,r12
8001517e:	ef 48 ff f8 	st.w	r7[-8],r8
	
	if (v_desired *  f_abs(dir_desired_bf[Z]) > MAX_CLIMB_RATE * norm_rel_dist ) {
80015182:	ee f8 ff cc 	ld.w	r8,r7[-52]
80015186:	10 9c       	mov	r12,r8
80015188:	fe b0 fd ea 	rcall	80014d5c <f_abs>
8001518c:	18 99       	mov	r9,r12
8001518e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80015192:	e5 a2 0a 98 	cop	cp0,cr10,cr9,cr8,0x44
80015196:	30 18       	mov	r8,1
80015198:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001519c:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
800151a0:	e0 8c 00 04 	brvs	800151a8 <set_speed_command+0x190>
800151a4:	e0 89 00 03 	brgt	800151aa <set_speed_command+0x192>
800151a8:	30 08       	mov	r8,0
800151aa:	5c 58       	castu.b	r8
800151ac:	c0 f0       	breq	800151ca <set_speed_command+0x1b2>
		v_desired = MAX_CLIMB_RATE * norm_rel_dist /f_abs(dir_desired_bf[Z]);
800151ae:	ee f8 ff cc 	ld.w	r8,r7[-52]
800151b2:	10 9c       	mov	r12,r8
800151b4:	fe b0 fd d4 	rcall	80014d5c <f_abs>
800151b8:	18 98       	mov	r8,r12
800151ba:	10 9b       	mov	r11,r8
800151bc:	ee fc ff f4 	ld.w	r12,r7[-12]
800151c0:	f0 16 00 08 	mcall	r6[32]
800151c4:	18 98       	mov	r8,r12
800151c6:	ef 48 ff f8 	st.w	r7[-8],r8
	}
	
	dir_desired_bf[X] = v_desired * dir_desired_bf[X] / norm_rel_dist;
800151ca:	ee f9 ff c4 	ld.w	r9,r7[-60]
800151ce:	ee f8 ff f8 	ld.w	r8,r7[-8]
800151d2:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
800151d6:	ee fb ff f4 	ld.w	r11,r7[-12]
800151da:	10 9c       	mov	r12,r8
800151dc:	f0 16 00 08 	mcall	r6[32]
800151e0:	18 98       	mov	r8,r12
800151e2:	ef 48 ff c4 	st.w	r7[-60],r8
	dir_desired_bf[Y] = v_desired * dir_desired_bf[Y] / norm_rel_dist;
800151e6:	ee f9 ff c8 	ld.w	r9,r7[-56]
800151ea:	ee f8 ff f8 	ld.w	r8,r7[-8]
800151ee:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
800151f2:	ee fb ff f4 	ld.w	r11,r7[-12]
800151f6:	10 9c       	mov	r12,r8
800151f8:	f0 16 00 08 	mcall	r6[32]
800151fc:	18 98       	mov	r8,r12
800151fe:	ef 48 ff c8 	st.w	r7[-56],r8
	dir_desired_bf[Z] = v_desired * dir_desired_bf[Z] / norm_rel_dist;
80015202:	ee f9 ff cc 	ld.w	r9,r7[-52]
80015206:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001520a:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8001520e:	ee fb ff f4 	ld.w	r11,r7[-12]
80015212:	10 9c       	mov	r12,r8
80015214:	f0 16 00 08 	mcall	r6[32]
80015218:	18 98       	mov	r8,r12
8001521a:	ef 48 ff cc 	st.w	r7[-52],r8
	//}else{
		//high_speed_nav(dir_desired_bf,centralData->imu1.attitude);
	//}
	
	
	for (i=0;i<3;i++)
8001521e:	30 08       	mov	r8,0
80015220:	ef 68 ff f3 	st.b	r7[-13],r8
80015224:	c1 58       	rjmp	8001524e <set_speed_command+0x236>
	{
		new_velocity[i] = dir_desired_bf[i];
80015226:	ef 3a ff f3 	ld.ub	r10,r7[-13]
8001522a:	ef 38 ff f3 	ld.ub	r8,r7[-13]
8001522e:	a3 68       	lsl	r8,0x2
80015230:	ee 08 00 08 	add	r8,r7,r8
80015234:	f0 f9 ff c4 	ld.w	r9,r8[-60]
80015238:	f4 08 15 02 	lsl	r8,r10,0x2
8001523c:	ee 08 00 08 	add	r8,r7,r8
80015240:	f1 49 ff ac 	st.w	r8[-84],r9
	//}else{
		//high_speed_nav(dir_desired_bf,centralData->imu1.attitude);
	//}
	
	
	for (i=0;i<3;i++)
80015244:	ef 38 ff f3 	ld.ub	r8,r7[-13]
80015248:	2f f8       	sub	r8,-1
8001524a:	ef 68 ff f3 	st.b	r7[-13],r8
8001524e:	ef 39 ff f3 	ld.ub	r9,r7[-13]
80015252:	30 28       	mov	r8,2
80015254:	f0 09 18 00 	cp.b	r9,r8
80015258:	fe 98 ff e7 	brls	80015226 <set_speed_command+0x20e>
	{
		new_velocity[i] = dir_desired_bf[i];
	}
	if (centralData->collision_avoidance)
8001525c:	ec f8 00 00 	ld.w	r8,r6[0]
80015260:	70 08       	ld.w	r8,r8[0x0]
80015262:	f1 38 10 bb 	ld.ub	r8,r8[4283]
80015266:	58 08       	cp.w	r8,0
80015268:	c0 90       	breq	8001527a <set_speed_command+0x262>
	{
		computeNewVelocity(dir_desired_bf,new_velocity);
8001526a:	ee c9 00 54 	sub	r9,r7,84
8001526e:	ee c8 00 3c 	sub	r8,r7,60
80015272:	12 9b       	mov	r11,r9
80015274:	10 9c       	mov	r12,r8
80015276:	f0 16 01 92 	mcall	r6[1608]
	}

	rel_heading= atan2(new_velocity[Y],new_velocity[X]);
8001527a:	ee f8 ff ac 	ld.w	r8,r7[-84]
8001527e:	10 9c       	mov	r12,r8
80015280:	f0 16 00 02 	mcall	r6[8]
80015284:	14 92       	mov	r2,r10
80015286:	16 93       	mov	r3,r11
80015288:	ee f8 ff b0 	ld.w	r8,r7[-80]
8001528c:	10 9c       	mov	r12,r8
8001528e:	f0 16 00 02 	mcall	r6[8]
80015292:	04 98       	mov	r8,r2
80015294:	06 99       	mov	r9,r3
80015296:	f0 16 00 4f 	mcall	r6[316]
8001529a:	14 98       	mov	r8,r10
8001529c:	16 99       	mov	r9,r11
8001529e:	10 9a       	mov	r10,r8
800152a0:	12 9b       	mov	r11,r9
800152a2:	f0 16 00 09 	mcall	r6[36]
800152a6:	18 98       	mov	r8,r12
800152a8:	ef 48 ff fc 	st.w	r7[-4],r8

	centralData->controls_nav.tvel[X] = new_velocity[X];
800152ac:	ec f8 00 00 	ld.w	r8,r6[0]
800152b0:	70 08       	ld.w	r8,r8[0x0]
800152b2:	ee f9 ff ac 	ld.w	r9,r7[-84]
800152b6:	f1 49 01 84 	st.w	r8[388],r9
	centralData->controls_nav.tvel[Y] = new_velocity[Y];
800152ba:	ec f8 00 00 	ld.w	r8,r6[0]
800152be:	70 08       	ld.w	r8,r8[0x0]
800152c0:	ee f9 ff b0 	ld.w	r9,r7[-80]
800152c4:	f1 49 01 88 	st.w	r8[392],r9
	centralData->controls_nav.tvel[Z] = new_velocity[Z];		
800152c8:	ec f8 00 00 	ld.w	r8,r6[0]
800152cc:	70 08       	ld.w	r8,r8[0x0]
800152ce:	ee f9 ff b4 	ld.w	r9,r7[-76]
800152d2:	f1 49 01 8c 	st.w	r8[396],r9
	centralData->controls_nav.rpy[YAW] = KP_YAW * rel_heading;
800152d6:	ec f8 00 00 	ld.w	r8,r6[0]
800152da:	70 05       	ld.w	r5,r8[0x0]
800152dc:	ee fc ff fc 	ld.w	r12,r7[-4]
800152e0:	f0 16 00 02 	mcall	r6[8]
800152e4:	e0 68 99 9a 	mov	r8,39322
800152e8:	ea 18 99 99 	orh	r8,0x9999
800152ec:	e0 69 99 99 	mov	r9,39321
800152f0:	ea 19 3f c9 	orh	r9,0x3fc9
800152f4:	f0 16 00 03 	mcall	r6[12]
800152f8:	14 98       	mov	r8,r10
800152fa:	16 99       	mov	r9,r11
800152fc:	10 9a       	mov	r10,r8
800152fe:	12 9b       	mov	r11,r9
80015300:	f0 16 00 09 	mcall	r6[36]
80015304:	18 98       	mov	r8,r12
80015306:	eb 48 01 7c 	st.w	r5[380],r8

	//low_speed_nav(dir_desired_bf,centralData->imu1.attitude,norm_rel_dist);

}
8001530a:	2e 9d       	sub	sp,-92
8001530c:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
80015310:	80 01       	ld.sh	r1,r0[0x0]
80015312:	4e a8       	lddpc	r8,800154b8 <low_speed_nav+0x1a4>

80015314 <low_speed_nav>:

void low_speed_nav(float dir_desired_bf[], Quat_Attitude_t attitude, float rel_distance)
{
80015314:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
80015318:	1a 97       	mov	r7,sp
8001531a:	20 4d       	sub	sp,16
8001531c:	4f 06       	lddpc	r6,800154dc <low_speed_nav+0x1c8>
8001531e:	1e 26       	rsub	r6,pc
80015320:	ef 4c ff f4 	st.w	r7[-12],r12
80015324:	ef 4b ff f0 	st.w	r7[-16],r11
	// dbg_print("Low speed nav\n");
	
	float yaw_angle_tolerance = PI/10.0;
80015328:	e0 68 d9 7c 	mov	r8,55676
8001532c:	ea 18 3e a0 	orh	r8,0x3ea0
80015330:	ef 48 ff f8 	st.w	r7[-8],r8
	
	if ((f_abs(dir_desired_bf[X]) < 0.001 && f_abs(dir_desired_bf[Y]) < 0.001) || centralData->waypoint_hold_init || (rel_distance<=5.0))
80015334:	ee f8 ff f4 	ld.w	r8,r7[-12]
80015338:	70 08       	ld.w	r8,r8[0x0]
8001533a:	10 9c       	mov	r12,r8
8001533c:	fe b0 fd 10 	rcall	80014d5c <f_abs>
80015340:	18 98       	mov	r8,r12
80015342:	10 9c       	mov	r12,r8
80015344:	f0 16 00 02 	mcall	r6[8]
80015348:	30 05       	mov	r5,0
8001534a:	e0 68 a9 fc 	mov	r8,43516
8001534e:	ea 18 d2 f1 	orh	r8,0xd2f1
80015352:	e0 69 62 4d 	mov	r9,25165
80015356:	ea 19 3f 50 	orh	r9,0x3f50
8001535a:	f0 16 00 1d 	mcall	r6[116]
8001535e:	18 98       	mov	r8,r12
80015360:	58 08       	cp.w	r8,0
80015362:	c0 20       	breq	80015366 <low_speed_nav+0x52>
80015364:	30 15       	mov	r5,1
80015366:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
8001536a:	c1 e0       	breq	800153a6 <low_speed_nav+0x92>
8001536c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80015370:	2f c8       	sub	r8,-4
80015372:	70 08       	ld.w	r8,r8[0x0]
80015374:	10 9c       	mov	r12,r8
80015376:	fe b0 fc f3 	rcall	80014d5c <f_abs>
8001537a:	18 98       	mov	r8,r12
8001537c:	10 9c       	mov	r12,r8
8001537e:	f0 16 00 02 	mcall	r6[8]
80015382:	30 05       	mov	r5,0
80015384:	e0 68 a9 fc 	mov	r8,43516
80015388:	ea 18 d2 f1 	orh	r8,0xd2f1
8001538c:	e0 69 62 4d 	mov	r9,25165
80015390:	ea 19 3f 50 	orh	r9,0x3f50
80015394:	f0 16 00 1d 	mcall	r6[116]
80015398:	18 98       	mov	r8,r12
8001539a:	58 08       	cp.w	r8,0
8001539c:	c0 20       	breq	800153a0 <low_speed_nav+0x8c>
8001539e:	30 15       	mov	r5,1
800153a0:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
800153a4:	c1 61       	brne	800153d0 <low_speed_nav+0xbc>
800153a6:	ec f8 00 00 	ld.w	r8,r6[0]
800153aa:	70 08       	ld.w	r8,r8[0x0]
800153ac:	f1 38 10 b7 	ld.ub	r8,r8[4279]
800153b0:	58 08       	cp.w	r8,0
800153b2:	c0 f1       	brne	800153d0 <low_speed_nav+0xbc>
800153b4:	30 18       	mov	r8,1
800153b6:	ee fa ff f0 	ld.w	r10,r7[-16]
800153ba:	fc 19 40 a0 	movh	r9,0x40a0
800153be:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
800153c2:	e0 8c 00 04 	brvs	800153ca <low_speed_nav+0xb6>
800153c6:	e0 8a 00 03 	brle	800153cc <low_speed_nav+0xb8>
800153ca:	30 08       	mov	r8,0
800153cc:	5c 58       	castu.b	r8
800153ce:	c1 90       	breq	80015400 <low_speed_nav+0xec>
	{
		centralData->controls_nav.rpy[YAW] = 0.0;
800153d0:	ec f8 00 00 	ld.w	r8,r6[0]
800153d4:	70 08       	ld.w	r8,r8[0x0]
800153d6:	30 09       	mov	r9,0
800153d8:	f1 49 01 7c 	st.w	r8[380],r9
		centralData->controls_nav.tvel[X] = dir_desired_bf[X];
800153dc:	ec f8 00 00 	ld.w	r8,r6[0]
800153e0:	70 08       	ld.w	r8,r8[0x0]
800153e2:	ee f9 ff f4 	ld.w	r9,r7[-12]
800153e6:	72 09       	ld.w	r9,r9[0x0]
800153e8:	f1 49 01 84 	st.w	r8[388],r9
		centralData->controls_nav.tvel[Y] = dir_desired_bf[Y];
800153ec:	ec f8 00 00 	ld.w	r8,r6[0]
800153f0:	70 08       	ld.w	r8,r8[0x0]
800153f2:	ee f9 ff f4 	ld.w	r9,r7[-12]
800153f6:	2f c9       	sub	r9,-4
800153f8:	72 09       	ld.w	r9,r9[0x0]
800153fa:	f1 49 01 88 	st.w	r8[392],r9
{
	// dbg_print("Low speed nav\n");
	
	float yaw_angle_tolerance = PI/10.0;
	
	if ((f_abs(dir_desired_bf[X]) < 0.001 && f_abs(dir_desired_bf[Y]) < 0.001) || centralData->waypoint_hold_init || (rel_distance<=5.0))
800153fe:	c6 28       	rjmp	800154c2 <low_speed_nav+0x1ae>
	{
		centralData->controls_nav.rpy[YAW] = 0.0;
		centralData->controls_nav.tvel[X] = dir_desired_bf[X];
		centralData->controls_nav.tvel[Y] = dir_desired_bf[Y];
	}else{
		float rel_heading = atan2(dir_desired_bf[Y],dir_desired_bf[X]);
80015400:	ee f8 ff f4 	ld.w	r8,r7[-12]
80015404:	70 08       	ld.w	r8,r8[0x0]
80015406:	10 9c       	mov	r12,r8
80015408:	f0 16 00 02 	mcall	r6[8]
8001540c:	14 92       	mov	r2,r10
8001540e:	16 93       	mov	r3,r11
80015410:	ee f8 ff f4 	ld.w	r8,r7[-12]
80015414:	2f c8       	sub	r8,-4
80015416:	70 08       	ld.w	r8,r8[0x0]
80015418:	10 9c       	mov	r12,r8
8001541a:	f0 16 00 02 	mcall	r6[8]
8001541e:	04 98       	mov	r8,r2
80015420:	06 99       	mov	r9,r3
80015422:	f0 16 00 4f 	mcall	r6[316]
80015426:	14 98       	mov	r8,r10
80015428:	16 99       	mov	r9,r11
8001542a:	10 9a       	mov	r10,r8
8001542c:	12 9b       	mov	r11,r9
8001542e:	f0 16 00 09 	mcall	r6[36]
80015432:	18 98       	mov	r8,r12
80015434:	ef 48 ff fc 	st.w	r7[-4],r8
		
		if (rel_heading >= yaw_angle_tolerance)
80015438:	30 18       	mov	r8,1
8001543a:	ee fa ff fc 	ld.w	r10,r7[-4]
8001543e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80015442:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80015446:	e0 8c 00 03 	brvs	8001544c <low_speed_nav+0x138>
8001544a:	c0 24       	brge	8001544e <low_speed_nav+0x13a>
8001544c:	30 08       	mov	r8,0
8001544e:	5c 58       	castu.b	r8
80015450:	c0 e0       	breq	8001546c <low_speed_nav+0x158>
		{
			centralData->controls_nav.tvel[X] = 0.0;
80015452:	ec f8 00 00 	ld.w	r8,r6[0]
80015456:	70 08       	ld.w	r8,r8[0x0]
80015458:	30 09       	mov	r9,0
8001545a:	f1 49 01 84 	st.w	r8[388],r9
			centralData->controls_nav.tvel[Y] = 0.0;
8001545e:	ec f8 00 00 	ld.w	r8,r6[0]
80015462:	70 08       	ld.w	r8,r8[0x0]
80015464:	30 09       	mov	r9,0
80015466:	f1 49 01 88 	st.w	r8[392],r9
8001546a:	c1 28       	rjmp	8001548e <low_speed_nav+0x17a>
		}else{
			centralData->controls_nav.tvel[X] = dir_desired_bf[X];
8001546c:	ec f8 00 00 	ld.w	r8,r6[0]
80015470:	70 08       	ld.w	r8,r8[0x0]
80015472:	ee f9 ff f4 	ld.w	r9,r7[-12]
80015476:	72 09       	ld.w	r9,r9[0x0]
80015478:	f1 49 01 84 	st.w	r8[388],r9
			centralData->controls_nav.tvel[Y] = dir_desired_bf[Y];
8001547c:	ec f8 00 00 	ld.w	r8,r6[0]
80015480:	70 08       	ld.w	r8,r8[0x0]
80015482:	ee f9 ff f4 	ld.w	r9,r7[-12]
80015486:	2f c9       	sub	r9,-4
80015488:	72 09       	ld.w	r9,r9[0x0]
8001548a:	f1 49 01 88 	st.w	r8[392],r9
		}
		
		centralData->controls_nav.rpy[YAW] = KP_YAW * rel_heading;
8001548e:	ec f8 00 00 	ld.w	r8,r6[0]
80015492:	70 05       	ld.w	r5,r8[0x0]
80015494:	ee fc ff fc 	ld.w	r12,r7[-4]
80015498:	f0 16 00 02 	mcall	r6[8]
8001549c:	e0 68 99 9a 	mov	r8,39322
800154a0:	ea 18 99 99 	orh	r8,0x9999
800154a4:	e0 69 99 99 	mov	r9,39321
800154a8:	ea 19 3f c9 	orh	r9,0x3fc9
800154ac:	f0 16 00 03 	mcall	r6[12]
800154b0:	14 98       	mov	r8,r10
800154b2:	16 99       	mov	r9,r11
800154b4:	10 9a       	mov	r10,r8
800154b6:	12 9b       	mov	r11,r9
800154b8:	f0 16 00 09 	mcall	r6[36]
800154bc:	18 98       	mov	r8,r12
800154be:	eb 48 01 7c 	st.w	r5[380],r8
	}

	centralData->controls_nav.tvel[Z] = dir_desired_bf[Z];
800154c2:	ec f8 00 00 	ld.w	r8,r6[0]
800154c6:	70 08       	ld.w	r8,r8[0x0]
800154c8:	ee f9 ff f4 	ld.w	r9,r7[-12]
800154cc:	2f 89       	sub	r9,-8
800154ce:	72 09       	ld.w	r9,r9[0x0]
800154d0:	f1 49 01 8c 	st.w	r8[396],r9
}
800154d4:	2f cd       	sub	sp,-16
800154d6:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
800154da:	00 00       	add	r0,r0
800154dc:	80 01       	ld.sh	r1,r0[0x0]
800154de:	51 a2       	stdsp	sp[0x68],r2

800154e0 <high_speed_nav>:

void high_speed_nav(float dir_desired_bf[], Quat_Attitude_t attitude)
{
800154e0:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
800154e4:	1a 97       	mov	r7,sp
800154e6:	20 1d       	sub	sp,4
800154e8:	4a 76       	lddpc	r6,80015584 <high_speed_nav+0xa4>
800154ea:	1e 26       	rsub	r6,pc
800154ec:	ef 4c ff fc 	st.w	r7[-4],r12
	//dbg_print("High speed nav\n");
	
	centralData->controls_nav.tvel[X] = dir_desired_bf[X];
800154f0:	ec f8 00 00 	ld.w	r8,r6[0]
800154f4:	70 08       	ld.w	r8,r8[0x0]
800154f6:	ee f9 ff fc 	ld.w	r9,r7[-4]
800154fa:	72 09       	ld.w	r9,r9[0x0]
800154fc:	f1 49 01 84 	st.w	r8[388],r9
	centralData->controls_nav.tvel[Y] = dir_desired_bf[Y];
80015500:	ec f8 00 00 	ld.w	r8,r6[0]
80015504:	70 08       	ld.w	r8,r8[0x0]
80015506:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001550a:	2f c9       	sub	r9,-4
8001550c:	72 09       	ld.w	r9,r9[0x0]
8001550e:	f1 49 01 88 	st.w	r8[392],r9
	centralData->controls_nav.tvel[Z] = dir_desired_bf[Z];
80015512:	ec f8 00 00 	ld.w	r8,r6[0]
80015516:	70 08       	ld.w	r8,r8[0x0]
80015518:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001551c:	2f 89       	sub	r9,-8
8001551e:	72 09       	ld.w	r9,r9[0x0]
80015520:	f1 49 01 8c 	st.w	r8[396],r9
	centralData->controls_nav.rpy[YAW] = KP_YAW * atan2(centralData->position_estimator.vel_bf[Y], centralData->position_estimator.vel_bf[X]);
80015524:	ec f8 00 00 	ld.w	r8,r6[0]
80015528:	70 05       	ld.w	r5,r8[0x0]
8001552a:	ec f8 00 00 	ld.w	r8,r6[0]
8001552e:	70 08       	ld.w	r8,r8[0x0]
80015530:	f0 f8 0d 68 	ld.w	r8,r8[3432]
80015534:	10 9c       	mov	r12,r8
80015536:	f0 16 00 02 	mcall	r6[8]
8001553a:	14 92       	mov	r2,r10
8001553c:	16 93       	mov	r3,r11
8001553e:	ec f8 00 00 	ld.w	r8,r6[0]
80015542:	70 08       	ld.w	r8,r8[0x0]
80015544:	f0 f8 0d 6c 	ld.w	r8,r8[3436]
80015548:	10 9c       	mov	r12,r8
8001554a:	f0 16 00 02 	mcall	r6[8]
8001554e:	04 98       	mov	r8,r2
80015550:	06 99       	mov	r9,r3
80015552:	f0 16 00 4f 	mcall	r6[316]
80015556:	e0 68 99 9a 	mov	r8,39322
8001555a:	ea 18 99 99 	orh	r8,0x9999
8001555e:	e0 69 99 99 	mov	r9,39321
80015562:	ea 19 3f c9 	orh	r9,0x3fc9
80015566:	f0 16 00 03 	mcall	r6[12]
8001556a:	14 98       	mov	r8,r10
8001556c:	16 99       	mov	r9,r11
8001556e:	10 9a       	mov	r10,r8
80015570:	12 9b       	mov	r11,r9
80015572:	f0 16 00 09 	mcall	r6[36]
80015576:	18 98       	mov	r8,r12
80015578:	eb 48 01 7c 	st.w	r5[380],r8
8001557c:	2f fd       	sub	sp,-4
8001557e:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
80015582:	00 00       	add	r0,r0
80015584:	80 01       	ld.sh	r1,r0[0x0]
80015586:	53 6e       	stdsp	sp[0xd8],lr

80015588 <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
80015588:	eb cd 40 c0 	pushm	r6-r7,lr
8001558c:	1a 97       	mov	r7,sp
8001558e:	20 6d       	sub	sp,24
80015590:	49 e6       	lddpc	r6,80015608 <interpolate+0x80>
80015592:	1e 26       	rsub	r6,pc
80015594:	ef 4c ff f8 	st.w	r7[-8],r12
80015598:	ef 4b ff f4 	st.w	r7[-12],r11
8001559c:	ef 4a ff f0 	st.w	r7[-16],r10
800155a0:	ef 49 ff ec 	st.w	r7[-20],r9
800155a4:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
800155a8:	ee f9 ff f4 	ld.w	r9,r7[-12]
800155ac:	ee f8 ff f0 	ld.w	r8,r7[-16]
800155b0:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
800155b4:	c0 41       	brne	800155bc <interpolate+0x34>
	{
		return y1;
800155b6:	ee f8 ff ec 	ld.w	r8,r7[-20]
800155ba:	c2 38       	rjmp	80015600 <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
800155bc:	ee f9 ff e8 	ld.w	r9,r7[-24]
800155c0:	ee f8 ff ec 	ld.w	r8,r7[-20]
800155c4:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
800155c8:	ee fa ff f8 	ld.w	r10,r7[-8]
800155cc:	ee f8 ff f4 	ld.w	r8,r7[-12]
800155d0:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
800155d4:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
800155d8:	ee fa ff f0 	ld.w	r10,r7[-16]
800155dc:	ee f9 ff f4 	ld.w	r9,r7[-12]
800155e0:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
800155e4:	12 9b       	mov	r11,r9
800155e6:	10 9c       	mov	r12,r8
800155e8:	f0 16 00 08 	mcall	r6[32]
800155ec:	18 98       	mov	r8,r12
800155ee:	10 99       	mov	r9,r8
800155f0:	ee f8 ff ec 	ld.w	r8,r7[-20]
800155f4:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
800155f8:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
800155fc:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
80015600:	10 9c       	mov	r12,r8
80015602:	2f ad       	sub	sp,-24
80015604:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80015608:	80 01       	ld.sh	r1,r0[0x0]
8001560a:	54 16       	stdsp	sp[0x104],r6

8001560c <stabilise>:
#include "stabilisation.h"
#include "stabilisation_copter.h"
#include "stabilisation_hybrid.h"

void stabilise(Stabiliser_t *stabiliser, float dt, float errors[]) 
{
8001560c:	eb cd 40 e0 	pushm	r5-r7,lr
80015610:	1a 97       	mov	r7,sp
80015612:	20 4d       	sub	sp,16
80015614:	4a 66       	lddpc	r6,800156ac <stabilise+0xa0>
80015616:	1e 26       	rsub	r6,pc
80015618:	ef 4c ff f8 	st.w	r7[-8],r12
8001561c:	ef 4b ff f4 	st.w	r7[-12],r11
80015620:	ef 4a ff f0 	st.w	r7[-16],r10
	int i;
	for (i = 0; i < 3; i++) 
80015624:	30 08       	mov	r8,0
80015626:	ef 48 ff fc 	st.w	r7[-4],r8
8001562a:	c2 68       	rjmp	80015676 <stabilise+0x6a>
	{
		stabiliser->output.rpy[i]=	pid_update_dt(&(stabiliser->rpy_controller[i]),  errors[i], dt);
8001562c:	ee f5 ff fc 	ld.w	r5,r7[-4]
80015630:	ee f8 ff fc 	ld.w	r8,r7[-4]
80015634:	a3 68       	lsl	r8,0x2
80015636:	ee f9 ff f0 	ld.w	r9,r7[-16]
8001563a:	f2 08 00 08 	add	r8,r9,r8
8001563e:	70 0b       	ld.w	r11,r8[0x0]
80015640:	ee fa ff f8 	ld.w	r10,r7[-8]
80015644:	ee f9 ff fc 	ld.w	r9,r7[-4]
80015648:	12 98       	mov	r8,r9
8001564a:	a5 68       	lsl	r8,0x4
8001564c:	12 08       	add	r8,r9
8001564e:	a3 68       	lsl	r8,0x2
80015650:	f4 08 00 08 	add	r8,r10,r8
80015654:	ee fa ff f4 	ld.w	r10,r7[-12]
80015658:	10 9c       	mov	r12,r8
8001565a:	f0 16 01 18 	mcall	r6[1120]
8001565e:	18 9a       	mov	r10,r12
80015660:	ee f8 ff f8 	ld.w	r8,r7[-8]
80015664:	ea c9 ff bc 	sub	r9,r5,-68
80015668:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
#include "stabilisation_hybrid.h"

void stabilise(Stabiliser_t *stabiliser, float dt, float errors[]) 
{
	int i;
	for (i = 0; i < 3; i++) 
8001566c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80015670:	2f f8       	sub	r8,-1
80015672:	ef 48 ff fc 	st.w	r7[-4],r8
80015676:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001567a:	58 28       	cp.w	r8,2
8001567c:	fe 9a ff d8 	brle	8001562c <stabilise+0x20>
	{
		stabiliser->output.rpy[i]=	pid_update_dt(&(stabiliser->rpy_controller[i]),  errors[i], dt);
	}		
	stabiliser->output.thrust= pid_update_dt(&(stabiliser->thrust_controller),  errors[3], dt);
80015680:	ee f8 ff f0 	ld.w	r8,r7[-16]
80015684:	2f 48       	sub	r8,-12
80015686:	70 09       	ld.w	r9,r8[0x0]
80015688:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001568c:	f0 c8 ff 34 	sub	r8,r8,-204
80015690:	ee fa ff f4 	ld.w	r10,r7[-12]
80015694:	12 9b       	mov	r11,r9
80015696:	10 9c       	mov	r12,r8
80015698:	f0 16 01 18 	mcall	r6[1120]
8001569c:	18 99       	mov	r9,r12
8001569e:	ee f8 ff f8 	ld.w	r8,r7[-8]
800156a2:	f1 49 01 1c 	st.w	r8[284],r9
800156a6:	2f cd       	sub	sp,-16
800156a8:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800156ac:	80 01       	ld.sh	r1,r0[0x0]
800156ae:	54 9a       	stdsp	sp[0x124],r10

800156b0 <processData>:
adcifa_sequencer_conversion_opt_t adcifa_sequencer0_conversion_opt[SLOTS_PER_SEQUENCER];
			
			
			
__attribute__((__interrupt__))
static void processData() {
800156b0:	eb cd 40 c0 	pushm	r6-r7,lr
800156b4:	1a 97       	mov	r7,sp
800156b6:	20 2d       	sub	sp,8
800156b8:	4f 96       	lddpc	r6,8001589c <processData+0x1ec>
800156ba:	1e 26       	rsub	r6,pc
	int ch;
	int16_t value;

	if (sample_counter>=number_of_samples)  {
800156bc:	ec f8 01 18 	ld.w	r8,r6[280]
800156c0:	70 09       	ld.w	r9,r8[0x0]
800156c2:	ec f8 03 44 	ld.w	r8,r6[836]
800156c6:	70 08       	ld.w	r8,r8[0x0]
800156c8:	10 39       	cp.w	r9,r8
800156ca:	c2 15       	brlt	8001570c <processData+0x5c>
		if (continuous_mode) {
800156cc:	ec f8 03 18 	ld.w	r8,r6[792]
800156d0:	11 88       	ld.ub	r8,r8[0x0]
800156d2:	58 08       	cp.w	r8,0
800156d4:	c0 e0       	breq	800156f0 <processData+0x40>
			sample_counter=0;
800156d6:	ec f8 01 18 	ld.w	r8,r6[280]
800156da:	30 09       	mov	r9,0
800156dc:	91 09       	st.w	r8[0x0],r9
			oversampling_counter=0;
800156de:	ec f8 01 74 	ld.w	r8,r6[372]
800156e2:	30 09       	mov	r9,0
800156e4:	91 09       	st.w	r8[0x0],r9
			channel_index=0;
800156e6:	ec f8 01 34 	ld.w	r8,r6[308]
800156ea:	30 09       	mov	r9,0
800156ec:	91 09       	st.w	r8[0x0],r9
		} else {
			adcifa_disable_interrupt(adcifa, ADC_INT_SEOS0);
			//adcifa_disable_interrupt(adcifa, ADC_INT_SEOS1);
			adcifa_stop_itimer(adcifa);
		}
		return;
800156ee:	cd 38       	rjmp	80015894 <processData+0x1e4>
		if (continuous_mode) {
			sample_counter=0;
			oversampling_counter=0;
			channel_index=0;
		} else {
			adcifa_disable_interrupt(adcifa, ADC_INT_SEOS0);
800156f0:	ec f8 01 14 	ld.w	r8,r6[276]
800156f4:	70 08       	ld.w	r8,r8[0x0]
800156f6:	30 1b       	mov	r11,1
800156f8:	10 9c       	mov	r12,r8
800156fa:	f0 16 01 14 	mcall	r6[1104]
			//adcifa_disable_interrupt(adcifa, ADC_INT_SEOS1);
			adcifa_stop_itimer(adcifa);
800156fe:	ec f8 01 14 	ld.w	r8,r6[276]
80015702:	70 08       	ld.w	r8,r8[0x0]
80015704:	10 9c       	mov	r12,r8
80015706:	f0 16 00 f1 	mcall	r6[964]
		}
		return;
8001570a:	cc 58       	rjmp	80015894 <processData+0x1e4>
	}
	

	if (((adcifa->sr&ADC_INT_SEOS0) ==0) 
8001570c:	ec f8 01 14 	ld.w	r8,r6[276]
80015710:	70 08       	ld.w	r8,r8[0x0]
80015712:	70 28       	ld.w	r8,r8[0x8]
80015714:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80015718:	e0 80 00 bd 	breq	80015892 <processData+0x1e2>
	//|| ((adcifa->sr&ADC_INT_SEOS1) ==0) 
	) {return;}
		
	if (sample_counter>=0) {
8001571c:	ec f8 01 18 	ld.w	r8,r6[280]
80015720:	70 08       	ld.w	r8,r8[0x0]
80015722:	58 08       	cp.w	r8,0
80015724:	c4 85       	brlt	800157b4 <processData+0x104>
		for (ch=0; ch<sequencer_item_count; ch++) {
80015726:	30 08       	mov	r8,0
80015728:	ef 48 ff f8 	st.w	r7[-8],r8
8001572c:	c3 88       	rjmp	8001579c <processData+0xec>
			value=adcifa->resx[ch];
8001572e:	ec f8 01 14 	ld.w	r8,r6[276]
80015732:	70 08       	ld.w	r8,r8[0x0]
80015734:	ee f9 ff f8 	ld.w	r9,r7[-8]
80015738:	2d f9       	sub	r9,-33
8001573a:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8001573e:	ef 58 ff fe 	st.h	r7[-2],r8
			if (oversampling_counter<=0) {
80015742:	ec f8 01 74 	ld.w	r8,r6[372]
80015746:	70 08       	ld.w	r8,r8[0x0]
80015748:	58 08       	cp.w	r8,0
8001574a:	e0 89 00 0c 	brgt	80015762 <processData+0xb2>
				internal_buffer[channel_index]=  value ;
8001574e:	ec f8 01 34 	ld.w	r8,r6[308]
80015752:	70 09       	ld.w	r9,r8[0x0]
80015754:	ef 0a ff fe 	ld.sh	r10,r7[-2]
80015758:	ec f8 02 08 	ld.w	r8,r6[520]
8001575c:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
80015760:	c1 18       	rjmp	80015782 <processData+0xd2>
			}else {			
				internal_buffer[channel_index]+= value ;
80015762:	ec f8 01 34 	ld.w	r8,r6[308]
80015766:	70 08       	ld.w	r8,r8[0x0]
80015768:	10 99       	mov	r9,r8
8001576a:	10 9a       	mov	r10,r8
8001576c:	ec f8 02 08 	ld.w	r8,r6[520]
80015770:	f0 0a 03 2a 	ld.w	r10,r8[r10<<0x2]
80015774:	ef 08 ff fe 	ld.sh	r8,r7[-2]
80015778:	10 0a       	add	r10,r8
8001577a:	ec f8 02 08 	ld.w	r8,r6[520]
8001577e:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
				//adci_buffer[ch][even_odd][sample_counter]+=value;
			}			
			channel_index++;
80015782:	ec f8 01 34 	ld.w	r8,r6[308]
80015786:	70 08       	ld.w	r8,r8[0x0]
80015788:	f0 c9 ff ff 	sub	r9,r8,-1
8001578c:	ec f8 01 34 	ld.w	r8,r6[308]
80015790:	91 09       	st.w	r8[0x0],r9
	if (((adcifa->sr&ADC_INT_SEOS0) ==0) 
	//|| ((adcifa->sr&ADC_INT_SEOS1) ==0) 
	) {return;}
		
	if (sample_counter>=0) {
		for (ch=0; ch<sequencer_item_count; ch++) {
80015792:	ee f8 ff f8 	ld.w	r8,r7[-8]
80015796:	2f f8       	sub	r8,-1
80015798:	ef 48 ff f8 	st.w	r7[-8],r8
8001579c:	ec f8 01 1c 	ld.w	r8,r6[284]
800157a0:	11 88       	ld.ub	r8,r8[0x0]
800157a2:	5c 58       	castu.b	r8
800157a4:	f3 d8 b0 08 	bfexts	r9,r8,0x0,0x8
800157a8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800157ac:	10 39       	cp.w	r9,r8
800157ae:	fe 99 ff c0 	brgt	8001572e <processData+0x7e>
800157b2:	c0 a8       	rjmp	800157c6 <processData+0x116>
				//adci_buffer[ch][even_odd][sample_counter]+=value;
			}			
			channel_index++;
		
		}
	}	else {sample_counter++; return;}
800157b4:	ec f8 01 18 	ld.w	r8,r6[280]
800157b8:	70 08       	ld.w	r8,r8[0x0]
800157ba:	f0 c9 ff ff 	sub	r9,r8,-1
800157be:	ec f8 01 18 	ld.w	r8,r6[280]
800157c2:	91 09       	st.w	r8[0x0],r9
800157c4:	c6 88       	rjmp	80015894 <processData+0x1e4>
	//if (function_generator!=NULL) {
	//	DAC_set_value((*function_generator)(sampleCounter));
	//}
	if (channel_index>=channel_count) {
800157c6:	ec f8 01 ec 	ld.w	r8,r6[492]
800157ca:	11 88       	ld.ub	r8,r8[0x0]
800157cc:	5c 58       	castu.b	r8
800157ce:	f3 d8 b0 08 	bfexts	r9,r8,0x0,0x8
800157d2:	ec f8 01 34 	ld.w	r8,r6[308]
800157d6:	70 08       	ld.w	r8,r8[0x0]
800157d8:	10 39       	cp.w	r9,r8
800157da:	e0 89 00 0e 	brgt	800157f6 <processData+0x146>
		oversampling_counter++;
800157de:	ec f8 01 74 	ld.w	r8,r6[372]
800157e2:	70 08       	ld.w	r8,r8[0x0]
800157e4:	f0 c9 ff ff 	sub	r9,r8,-1
800157e8:	ec f8 01 74 	ld.w	r8,r6[372]
800157ec:	91 09       	st.w	r8[0x0],r9
		channel_index=0;
800157ee:	ec f8 01 34 	ld.w	r8,r6[308]
800157f2:	30 09       	mov	r9,0
800157f4:	91 09       	st.w	r8[0x0],r9
	}
	if (oversampling_counter>= oversampling) {
800157f6:	ec f8 01 74 	ld.w	r8,r6[372]
800157fa:	70 09       	ld.w	r9,r8[0x0]
800157fc:	ec f8 03 40 	ld.w	r8,r6[832]
80015800:	70 08       	ld.w	r8,r8[0x0]
80015802:	10 39       	cp.w	r9,r8
80015804:	c4 85       	brlt	80015894 <processData+0x1e4>
		oversampling_counter=0;
80015806:	ec f8 01 74 	ld.w	r8,r6[372]
8001580a:	30 09       	mov	r9,0
8001580c:	91 09       	st.w	r8[0x0],r9
		channel_index=0;
8001580e:	ec f8 01 34 	ld.w	r8,r6[308]
80015812:	30 09       	mov	r9,0
80015814:	91 09       	st.w	r8[0x0],r9
		for (ch=0; ch<channel_count; ch++) {
80015816:	30 08       	mov	r8,0
80015818:	ef 48 ff f8 	st.w	r7[-8],r8
8001581c:	c2 78       	rjmp	8001586a <processData+0x1ba>
			adci_buffer[ch + sample_counter*channel_count]=internal_buffer[ch] / oversampling_divider;
8001581e:	ec f8 02 4c 	ld.w	r8,r6[588]
80015822:	70 09       	ld.w	r9,r8[0x0]
80015824:	ec f8 01 ec 	ld.w	r8,r6[492]
80015828:	11 88       	ld.ub	r8,r8[0x0]
8001582a:	5c 58       	castu.b	r8
8001582c:	f5 d8 b0 08 	bfexts	r10,r8,0x0,0x8
80015830:	ec f8 01 18 	ld.w	r8,r6[280]
80015834:	70 08       	ld.w	r8,r8[0x0]
80015836:	b1 3a       	mul	r10,r8
80015838:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001583c:	f4 08 00 08 	add	r8,r10,r8
80015840:	a1 78       	lsl	r8,0x1
80015842:	f2 08 00 0a 	add	r10,r9,r8
80015846:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001584a:	ec f8 02 08 	ld.w	r8,r6[520]
8001584e:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80015852:	ec f9 04 b4 	ld.w	r9,r6[1204]
80015856:	72 09       	ld.w	r9,r9[0x0]
80015858:	f0 09 0c 08 	divs	r8,r8,r9
8001585c:	5c 88       	casts.h	r8
8001585e:	b4 08       	st.h	r10[0x0],r8
		channel_index=0;
	}
	if (oversampling_counter>= oversampling) {
		oversampling_counter=0;
		channel_index=0;
		for (ch=0; ch<channel_count; ch++) {
80015860:	ee f8 ff f8 	ld.w	r8,r7[-8]
80015864:	2f f8       	sub	r8,-1
80015866:	ef 48 ff f8 	st.w	r7[-8],r8
8001586a:	ec f8 01 ec 	ld.w	r8,r6[492]
8001586e:	11 88       	ld.ub	r8,r8[0x0]
80015870:	5c 58       	castu.b	r8
80015872:	f3 d8 b0 08 	bfexts	r9,r8,0x0,0x8
80015876:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001587a:	10 39       	cp.w	r9,r8
8001587c:	fe 99 ff d1 	brgt	8001581e <processData+0x16e>
			adci_buffer[ch + sample_counter*channel_count]=internal_buffer[ch] / oversampling_divider;
		}
		sample_counter++;
80015880:	ec f8 01 18 	ld.w	r8,r6[280]
80015884:	70 08       	ld.w	r8,r8[0x0]
80015886:	f0 c9 ff ff 	sub	r9,r8,-1
8001588a:	ec f8 01 18 	ld.w	r8,r6[280]
8001588e:	91 09       	st.w	r8[0x0],r9
80015890:	c0 28       	rjmp	80015894 <processData+0x1e4>
	}
	

	if (((adcifa->sr&ADC_INT_SEOS0) ==0) 
	//|| ((adcifa->sr&ADC_INT_SEOS1) ==0) 
	) {return;}
80015892:	d7 03       	nop
	
	}		
	//DAC_set_value(even_odd*400);
	// acknowledge processing finished
	//adcifa->scr=ADC_INT_SEOS0 | ADC_INT_SEOS1;
}
80015894:	2f ed       	sub	sp,-8
80015896:	e3 cd 40 c0 	ldm	sp++,r6-r7,lr
8001589a:	d6 03       	rete
8001589c:	80 01       	ld.sh	r1,r0[0x0]
8001589e:	55 3e       	stdsp	sp[0x14c],lr

800158a0 <Init_ADCI>:


// Initializes ADC (configures Pins, starts Clock, sets defaults)
void Init_ADCI(uint32_t adc_frequency, uint8_t reference_source, int set_oversampling, int set_oversampling_divider){
800158a0:	eb cd 40 c0 	pushm	r6-r7,lr
800158a4:	1a 97       	mov	r7,sp
800158a6:	20 4d       	sub	sp,16
800158a8:	4b 96       	lddpc	r6,8001598c <Init_ADCI+0xec>
800158aa:	1e 26       	rsub	r6,pc
800158ac:	ef 4c ff fc 	st.w	r7[-4],r12
800158b0:	16 98       	mov	r8,r11
800158b2:	ef 4a ff f4 	st.w	r7[-12],r10
800158b6:	ef 49 ff f0 	st.w	r7[-16],r9
800158ba:	ef 68 ff f8 	st.b	r7[-8],r8

		// Assign and enable GPIO pins to the ADC function.
		gpio_enable_module(ADCIFA_GPIO_MAP, sizeof(ADCIFA_GPIO_MAP) / sizeof(ADCIFA_GPIO_MAP[0]));
800158be:	31 3b       	mov	r11,19
800158c0:	ec fc 08 c0 	ld.w	r12,r6[2240]
800158c4:	f0 16 00 88 	mcall	r6[544]

		adc_config_options.frequency=adc_frequency;
800158c8:	ec f8 01 04 	ld.w	r8,r6[260]
800158cc:	ee f9 ff fc 	ld.w	r9,r7[-4]
800158d0:	91 09       	st.w	r8[0x0],r9
		adc_config_options.reference_source=reference_source;
800158d2:	ec f9 01 04 	ld.w	r9,r6[260]
800158d6:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800158da:	b2 c8       	st.b	r9[0x4],r8

		// Get ADCIFA Factory Configuration
		adcifa_get_calibration_data(adcifa, &adc_config_options);
800158dc:	ec f8 01 14 	ld.w	r8,r6[276]
800158e0:	70 08       	ld.w	r8,r8[0x0]
800158e2:	ec fb 01 04 	ld.w	r11,r6[260]
800158e6:	10 9c       	mov	r12,r8
800158e8:	f0 16 01 f9 	mcall	r6[2020]
		if ((uint16_t)adc_config_options.offset_calibration_value == 0xFFFF){
800158ec:	ec f8 01 04 	ld.w	r8,r6[260]
800158f0:	90 68       	ld.sh	r8,r8[0xc]
800158f2:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
800158f6:	3f f8       	mov	r8,-1
800158f8:	f0 09 19 00 	cp.h	r9,r8
800158fc:	c1 51       	brne	80015926 <Init_ADCI+0x86>
			// Set default calibration if Engineering samples and part is not programmed
			adc_config_options.offset_calibration_value = 0x3B;
800158fe:	ec f9 01 04 	ld.w	r9,r6[260]
80015902:	33 b8       	mov	r8,59
80015904:	b2 68       	st.h	r9[0xc],r8
			adc_config_options.gain_calibration_value = 0x4210;
80015906:	ec f9 01 04 	ld.w	r9,r6[260]
8001590a:	e0 68 42 10 	mov	r8,16912
8001590e:	b2 58       	st.h	r9[0xa],r8
			adc_config_options.sh0_calibration_value = 0x210;
80015910:	ec f9 01 04 	ld.w	r9,r6[260]
80015914:	e0 68 02 10 	mov	r8,528
80015918:	b2 78       	st.h	r9[0xe],r8
			adc_config_options.sh1_calibration_value = 0x210;
8001591a:	ec f9 01 04 	ld.w	r9,r6[260]
8001591e:	e0 68 02 10 	mov	r8,528
80015922:	f3 58 00 10 	st.h	r9[16],r8
		}
		adc_config_options.offset_calibration_value = 0x3B; // offset correction
80015926:	ec f9 01 04 	ld.w	r9,r6[260]
8001592a:	33 b8       	mov	r8,59
8001592c:	b2 68       	st.h	r9[0xc],r8

		// Configure ADCIFA core
		adcifa_configure(adcifa, &adc_config_options, FOSC0);
8001592e:	ec f8 01 14 	ld.w	r8,r6[276]
80015932:	70 08       	ld.w	r8,r8[0x0]
80015934:	e0 6a 24 00 	mov	r10,9216
80015938:	ea 1a 00 f4 	orh	r10,0xf4
8001593c:	ec fb 01 04 	ld.w	r11,r6[260]
80015940:	10 9c       	mov	r12,r8
80015942:	f0 16 02 15 	mcall	r6[2132]

		clear_adc_sequencer();
80015946:	f0 16 01 f2 	mcall	r6[1992]
		continuous_mode=false;
8001594a:	ec f9 03 18 	ld.w	r9,r6[792]
8001594e:	30 08       	mov	r8,0
80015950:	b2 88       	st.b	r9[0x0],r8
		// Configure ADCIFA sequencer 1
		//adcifa_configure_sequencer(adcifa, 1, &adcifa_sequence_opt, adcifa_sequencer1_conversion_opt);
		
		adcifa_disable_interrupt(adcifa, 0xffffffff);
80015952:	ec f8 01 14 	ld.w	r8,r6[276]
80015956:	70 08       	ld.w	r8,r8[0x0]
80015958:	3f fb       	mov	r11,-1
8001595a:	10 9c       	mov	r12,r8
8001595c:	f0 16 01 14 	mcall	r6[1104]
		INTC_register_interrupt( (__int_handler) &processData, AVR32_ADCIFA_SEQUENCER0_IRQ, AVR32_INTC_INT1);
80015960:	fe c8 02 b0 	sub	r8,pc,688
80015964:	30 1a       	mov	r10,1
80015966:	e0 6b 04 80 	mov	r11,1152
8001596a:	10 9c       	mov	r12,r8
8001596c:	f0 16 00 3c 	mcall	r6[240]
		//INTC_register_interrupt( (__int_handler) &processData, AVR32_ADCIFA_SEQUENCER1_IRQ, AVR32_INTC_INT1);
		oversampling=set_oversampling;
80015970:	ec f8 03 40 	ld.w	r8,r6[832]
80015974:	ee f9 ff f4 	ld.w	r9,r7[-12]
80015978:	91 09       	st.w	r8[0x0],r9
		oversampling_divider=set_oversampling_divider;
8001597a:	ec f8 04 b4 	ld.w	r8,r6[1204]
8001597e:	ee f9 ff f0 	ld.w	r9,r7[-16]
80015982:	91 09       	st.w	r8[0x0],r9
//	int period_us=1000000/samplingrate;
}
80015984:	2f cd       	sub	sp,-16
80015986:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001598a:	00 00       	add	r0,r0
8001598c:	80 01       	ld.sh	r1,r0[0x0]
8001598e:	57 2e       	stdsp	sp[0x1c8],lr

80015990 <clear_adc_sequencer>:
void clear_adc_sequencer() {
80015990:	eb cd 40 c0 	pushm	r6-r7,lr
80015994:	1a 97       	mov	r7,sp
80015996:	48 96       	lddpc	r6,800159b8 <clear_adc_sequencer+0x28>
80015998:	1e 26       	rsub	r6,pc
	sequencer_item_count=0;
8001599a:	ec f9 01 1c 	ld.w	r9,r6[284]
8001599e:	30 08       	mov	r8,0
800159a0:	b2 88       	st.b	r9[0x0],r8
	adcifa_sequence_opt.convnb=sequencer_item_count;
800159a2:	ec f8 01 1c 	ld.w	r8,r6[284]
800159a6:	11 88       	ld.ub	r8,r8[0x0]
800159a8:	5c 58       	castu.b	r8
800159aa:	5c 58       	castu.b	r8
800159ac:	ec f9 02 94 	ld.w	r9,r6[660]
800159b0:	b2 88       	st.b	r9[0x0],r8
}
800159b2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800159b6:	00 00       	add	r0,r0
800159b8:	80 01       	ld.sh	r1,r0[0x0]
800159ba:	58 1c       	cp.w	r12,1

800159bc <adc_sequencer_add>:

int8_t adc_sequencer_add(uint8_t input_p, uint8_t input_n, uint8_t gain) {
800159bc:	eb cd 40 c0 	pushm	r6-r7,lr
800159c0:	1a 97       	mov	r7,sp
800159c2:	20 3d       	sub	sp,12
800159c4:	4b 36       	lddpc	r6,80015a90 <adc_sequencer_add+0xd4>
800159c6:	1e 26       	rsub	r6,pc
800159c8:	16 99       	mov	r9,r11
800159ca:	14 98       	mov	r8,r10
800159cc:	18 9a       	mov	r10,r12
800159ce:	ef 6a ff fc 	st.b	r7[-4],r10
800159d2:	ef 69 ff f8 	st.b	r7[-8],r9
800159d6:	ef 68 ff f4 	st.b	r7[-12],r8
	
	if (sequencer_item_count<SLOTS_PER_SEQUENCER-1) {
800159da:	ec f8 01 1c 	ld.w	r8,r6[284]
800159de:	11 88       	ld.ub	r8,r8[0x0]
800159e0:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800159e4:	30 68       	mov	r8,6
800159e6:	f0 09 18 00 	cp.b	r9,r8
800159ea:	e0 89 00 4c 	brgt	80015a82 <adc_sequencer_add+0xc6>
		adcifa_sequencer0_conversion_opt[sequencer_item_count].channel_p=input_p;
800159ee:	ec f8 01 1c 	ld.w	r8,r6[284]
800159f2:	11 88       	ld.ub	r8,r8[0x0]
800159f4:	5c 58       	castu.b	r8
800159f6:	f3 d8 b0 08 	bfexts	r9,r8,0x0,0x8
800159fa:	ec fa 02 18 	ld.w	r10,r6[536]
800159fe:	12 98       	mov	r8,r9
80015a00:	a1 78       	lsl	r8,0x1
80015a02:	12 08       	add	r8,r9
80015a04:	f4 08 00 09 	add	r9,r10,r8
80015a08:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80015a0c:	b2 88       	st.b	r9[0x0],r8
		adcifa_sequencer0_conversion_opt[sequencer_item_count].channel_n=input_n;
80015a0e:	ec f8 01 1c 	ld.w	r8,r6[284]
80015a12:	11 88       	ld.ub	r8,r8[0x0]
80015a14:	5c 58       	castu.b	r8
80015a16:	f3 d8 b0 08 	bfexts	r9,r8,0x0,0x8
80015a1a:	ec fa 02 18 	ld.w	r10,r6[536]
80015a1e:	12 98       	mov	r8,r9
80015a20:	a1 78       	lsl	r8,0x1
80015a22:	12 08       	add	r8,r9
80015a24:	f4 08 00 08 	add	r8,r10,r8
80015a28:	f0 c9 ff ff 	sub	r9,r8,-1
80015a2c:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80015a30:	b2 88       	st.b	r9[0x0],r8
		adcifa_sequencer0_conversion_opt[sequencer_item_count].gain=gain;
80015a32:	ec f8 01 1c 	ld.w	r8,r6[284]
80015a36:	11 88       	ld.ub	r8,r8[0x0]
80015a38:	5c 58       	castu.b	r8
80015a3a:	f3 d8 b0 08 	bfexts	r9,r8,0x0,0x8
80015a3e:	ec fa 02 18 	ld.w	r10,r6[536]
80015a42:	12 98       	mov	r8,r9
80015a44:	a1 78       	lsl	r8,0x1
80015a46:	12 08       	add	r8,r9
80015a48:	f4 08 00 08 	add	r8,r10,r8
80015a4c:	f0 c9 ff fe 	sub	r9,r8,-2
80015a50:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80015a54:	b2 88       	st.b	r9[0x0],r8
		sequencer_item_count++;
80015a56:	ec f8 01 1c 	ld.w	r8,r6[284]
80015a5a:	11 88       	ld.ub	r8,r8[0x0]
80015a5c:	5c 58       	castu.b	r8
80015a5e:	2f f8       	sub	r8,-1
80015a60:	5c 58       	castu.b	r8
80015a62:	ec f9 01 1c 	ld.w	r9,r6[284]
80015a66:	b2 88       	st.b	r9[0x0],r8
		adcifa_sequence_opt.convnb=sequencer_item_count;
80015a68:	ec f8 01 1c 	ld.w	r8,r6[284]
80015a6c:	11 88       	ld.ub	r8,r8[0x0]
80015a6e:	5c 58       	castu.b	r8
80015a70:	5c 58       	castu.b	r8
80015a72:	ec f9 02 94 	ld.w	r9,r6[660]
80015a76:	b2 88       	st.b	r9[0x0],r8
		return sequencer_item_count;
80015a78:	ec f8 01 1c 	ld.w	r8,r6[284]
80015a7c:	11 88       	ld.ub	r8,r8[0x0]
80015a7e:	5c 58       	castu.b	r8
80015a80:	c0 38       	rjmp	80015a86 <adc_sequencer_add+0xca>
	} else {
		return -1;
80015a82:	e0 68 00 ff 	mov	r8,255
	}
}
80015a86:	10 9c       	mov	r12,r8
80015a88:	2f dd       	sub	sp,-12
80015a8a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80015a8e:	00 00       	add	r0,r0
80015a90:	80 01       	ld.sh	r1,r0[0x0]
80015a92:	58 4a       	cp.w	r10,4

80015a94 <ADCI_Start_Sampling>:

// starts sampling, captures one buffer length and then stops
void ADCI_Start_Sampling(int16_t *buffer, int8_t channels, int length, int samplingrate, bool continuous){
80015a94:	eb cd 40 c0 	pushm	r6-r7,lr
80015a98:	1a 97       	mov	r7,sp
80015a9a:	20 6d       	sub	sp,24
80015a9c:	4a d6       	lddpc	r6,80015b50 <ADCI_Start_Sampling+0xbc>
80015a9e:	1e 26       	rsub	r6,pc
80015aa0:	ef 4c ff f8 	st.w	r7[-8],r12
80015aa4:	ef 4a ff f0 	st.w	r7[-16],r10
80015aa8:	ef 49 ff ec 	st.w	r7[-20],r9
80015aac:	16 99       	mov	r9,r11
80015aae:	ef 69 ff f4 	st.b	r7[-12],r9
80015ab2:	ef 68 ff e8 	st.b	r7[-24],r8

	// Configure ADCIFA sequencer 0
	adcifa_configure_sequencer(adcifa, 0, &adcifa_sequence_opt, adcifa_sequencer0_conversion_opt);
80015ab6:	ec f8 01 14 	ld.w	r8,r6[276]
80015aba:	70 08       	ld.w	r8,r8[0x0]
80015abc:	ec f9 02 18 	ld.w	r9,r6[536]
80015ac0:	ec fa 02 94 	ld.w	r10,r6[660]
80015ac4:	30 0b       	mov	r11,0
80015ac6:	10 9c       	mov	r12,r8
80015ac8:	f0 16 01 ba 	mcall	r6[1768]
	adci_buffer=buffer;
80015acc:	ec f8 02 4c 	ld.w	r8,r6[588]
80015ad0:	ee f9 ff f8 	ld.w	r9,r7[-8]
80015ad4:	91 09       	st.w	r8[0x0],r9
	
	int period_us=adc_config_options.frequency/(samplingrate*oversampling);	
80015ad6:	ec f8 01 04 	ld.w	r8,r6[260]
80015ada:	70 08       	ld.w	r8,r8[0x0]
80015adc:	ec f9 03 40 	ld.w	r9,r6[832]
80015ae0:	72 0a       	ld.w	r10,r9[0x0]
80015ae2:	ee f9 ff ec 	ld.w	r9,r7[-20]
80015ae6:	f4 09 02 49 	mul	r9,r10,r9
80015aea:	f0 09 0d 08 	divu	r8,r8,r9
80015aee:	ef 48 ff fc 	st.w	r7[-4],r8
	oversampling_counter=0;
80015af2:	ec f8 01 74 	ld.w	r8,r6[372]
80015af6:	30 09       	mov	r9,0
80015af8:	91 09       	st.w	r8[0x0],r9
	sample_counter=-10;
80015afa:	ec f8 01 18 	ld.w	r8,r6[280]
80015afe:	3f 69       	mov	r9,-10
80015b00:	91 09       	st.w	r8[0x0],r9
	number_of_samples=length;
80015b02:	ec f8 03 44 	ld.w	r8,r6[836]
80015b06:	ee f9 ff f0 	ld.w	r9,r7[-16]
80015b0a:	91 09       	st.w	r8[0x0],r9
	continuous_mode=continuous;
80015b0c:	ec f9 03 18 	ld.w	r9,r6[792]
80015b10:	ef 38 ff e8 	ld.ub	r8,r7[-24]
80015b14:	b2 88       	st.b	r9[0x0],r8
	channel_count=channels;
80015b16:	ec f9 01 ec 	ld.w	r9,r6[492]
80015b1a:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80015b1e:	b2 88       	st.b	r9[0x0],r8
	channel_index=0;
80015b20:	ec f8 01 34 	ld.w	r8,r6[308]
80015b24:	30 09       	mov	r9,0
80015b26:	91 09       	st.w	r8[0x0],r9
	
	adcifa_enable_interrupt(adcifa, ADC_INT_SEOS0);
80015b28:	ec f8 01 14 	ld.w	r8,r6[276]
80015b2c:	70 08       	ld.w	r8,r8[0x0]
80015b2e:	30 1b       	mov	r11,1
80015b30:	10 9c       	mov	r12,r8
80015b32:	f0 16 01 47 	mcall	r6[1308]
	//adcifa_enable_interrupt(adcifa, ADC_INT_SEOS1);
	adcifa_start_itimer(adcifa, period_us);
80015b36:	ee f9 ff fc 	ld.w	r9,r7[-4]
80015b3a:	ec f8 01 14 	ld.w	r8,r6[276]
80015b3e:	70 08       	ld.w	r8,r8[0x0]
80015b40:	12 9b       	mov	r11,r9
80015b42:	10 9c       	mov	r12,r8
80015b44:	f0 16 01 d5 	mcall	r6[1876]
}
80015b48:	2f ad       	sub	sp,-24
80015b4a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80015b4e:	00 00       	add	r0,r0
80015b50:	80 01       	ld.sh	r1,r0[0x0]
80015b52:	59 22       	cp.w	r2,18

80015b54 <ADCI_Stop_Sampling>:

// stops sampling immediately
void ADCI_Stop_Sampling(){
80015b54:	eb cd 40 c0 	pushm	r6-r7,lr
80015b58:	1a 97       	mov	r7,sp
80015b5a:	48 66       	lddpc	r6,80015b70 <ADCI_Stop_Sampling+0x1c>
80015b5c:	1e 26       	rsub	r6,pc
	adcifa_stop_itimer(adcifa);
80015b5e:	ec f8 01 14 	ld.w	r8,r6[276]
80015b62:	70 08       	ld.w	r8,r8[0x0]
80015b64:	10 9c       	mov	r12,r8
80015b66:	f0 16 00 f1 	mcall	r6[964]
	
}
80015b6a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80015b6e:	00 00       	add	r0,r0
80015b70:	80 01       	ld.sh	r1,r0[0x0]
80015b72:	59 e0       	cp.w	r0,30

80015b74 <ADCI_Sampling_Complete>:

// Returns true if one-shot sampling has finished
Bool ADCI_Sampling_Complete(){
80015b74:	eb cd 40 c0 	pushm	r6-r7,lr
80015b78:	1a 97       	mov	r7,sp
80015b7a:	48 86       	lddpc	r6,80015b98 <ADCI_Sampling_Complete+0x24>
80015b7c:	1e 26       	rsub	r6,pc
	return (sample_counter>=number_of_samples);
80015b7e:	ec f8 01 18 	ld.w	r8,r6[280]
80015b82:	70 0a       	ld.w	r10,r8[0x0]
80015b84:	ec f8 03 44 	ld.w	r8,r6[836]
80015b88:	70 09       	ld.w	r9,r8[0x0]
80015b8a:	30 18       	mov	r8,1
80015b8c:	12 3a       	cp.w	r10,r9
80015b8e:	c0 24       	brge	80015b92 <ADCI_Sampling_Complete+0x1e>
80015b90:	30 08       	mov	r8,0
}
80015b92:	10 9c       	mov	r12,r8
80015b94:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80015b98:	80 01       	ld.sh	r1,r0[0x0]
80015b9a:	5a 00       	cp.w	r0,-32

80015b9c <ADCI_get_sample>:
//void set_DAC_generator_function(generatorfunction new_function_generator ) {
//	function_generator=new_function_generator;
	
//}

int16_t ADCI_get_sample(int channel, int sample) {
80015b9c:	eb cd 40 c0 	pushm	r6-r7,lr
80015ba0:	1a 97       	mov	r7,sp
80015ba2:	20 2d       	sub	sp,8
80015ba4:	48 f6       	lddpc	r6,80015be0 <ADCI_get_sample+0x44>
80015ba6:	1e 26       	rsub	r6,pc
80015ba8:	ef 4c ff fc 	st.w	r7[-4],r12
80015bac:	ef 4b ff f8 	st.w	r7[-8],r11
	return adci_buffer[channel + channel_count*sample];
80015bb0:	ec f8 02 4c 	ld.w	r8,r6[588]
80015bb4:	70 09       	ld.w	r9,r8[0x0]
80015bb6:	ec f8 01 ec 	ld.w	r8,r6[492]
80015bba:	11 88       	ld.ub	r8,r8[0x0]
80015bbc:	5c 58       	castu.b	r8
80015bbe:	f5 d8 b0 08 	bfexts	r10,r8,0x0,0x8
80015bc2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80015bc6:	b1 3a       	mul	r10,r8
80015bc8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80015bcc:	f4 08 00 08 	add	r8,r10,r8
80015bd0:	a1 78       	lsl	r8,0x1
80015bd2:	f2 08 00 08 	add	r8,r9,r8
80015bd6:	90 08       	ld.sh	r8,r8[0x0]
}
80015bd8:	10 9c       	mov	r12,r8
80015bda:	2f ed       	sub	sp,-8
80015bdc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80015be0:	80 01       	ld.sh	r1,r0[0x0]
80015be2:	5a 2a       	cp.w	r10,-30

80015be4 <ADCI_get_buffer>:

int16_t* ADCI_get_buffer() {
80015be4:	eb cd 40 c0 	pushm	r6-r7,lr
80015be8:	1a 97       	mov	r7,sp
80015bea:	48 56       	lddpc	r6,80015bfc <ADCI_get_buffer+0x18>
80015bec:	1e 26       	rsub	r6,pc
	return adci_buffer;
80015bee:	ec f8 02 4c 	ld.w	r8,r6[588]
80015bf2:	70 08       	ld.w	r8,r8[0x0]
}
80015bf4:	10 9c       	mov	r12,r8
80015bf6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80015bfa:	00 00       	add	r0,r0
80015bfc:	80 01       	ld.sh	r1,r0[0x0]
80015bfe:	5a 70       	cp.w	r0,-25

80015c00 <ADCI_get_sampling_status>:
	
int ADCI_get_sampling_status() {
80015c00:	eb cd 40 c0 	pushm	r6-r7,lr
80015c04:	1a 97       	mov	r7,sp
80015c06:	48 56       	lddpc	r6,80015c18 <ADCI_get_sampling_status+0x18>
80015c08:	1e 26       	rsub	r6,pc
	return sample_counter;
80015c0a:	ec f8 01 18 	ld.w	r8,r6[280]
80015c0e:	70 08       	ld.w	r8,r8[0x0]
}
80015c10:	10 9c       	mov	r12,r8
80015c12:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80015c16:	00 00       	add	r0,r0
80015c18:	80 01       	ld.sh	r1,r0[0x0]
80015c1a:	5a 8c       	cp.w	r12,-24

80015c1c <genclk_config_defaults>:
	uint32_t ctrl;
};

static inline void genclk_config_defaults(struct genclk_config *cfg,
		unsigned int id)
{
80015c1c:	eb cd 40 80 	pushm	r7,lr
80015c20:	1a 97       	mov	r7,sp
80015c22:	20 2d       	sub	sp,8
80015c24:	ef 4c ff fc 	st.w	r7[-4],r12
80015c28:	ef 4b ff f8 	st.w	r7[-8],r11
	cfg->ctrl = 0;
80015c2c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80015c30:	30 09       	mov	r9,0
80015c32:	91 09       	st.w	r8[0x0],r9
}
80015c34:	2f ed       	sub	sp,-8
80015c36:	e3 cd 80 80 	ldm	sp++,r7,pc

80015c3a <genclk_config_set_source>:
	AVR32_SCIF.gcctrl[id] = cfg->ctrl;
}

static inline void genclk_config_set_source(struct genclk_config *cfg,
		enum genclk_source src)
{
80015c3a:	eb cd 40 80 	pushm	r7,lr
80015c3e:	1a 97       	mov	r7,sp
80015c40:	20 2d       	sub	sp,8
80015c42:	ef 4c ff fc 	st.w	r7[-4],r12
80015c46:	ef 4b ff f8 	st.w	r7[-8],r11
	cfg->ctrl = (cfg->ctrl & ~AVR32_SCIF_GCCTRL_OSCSEL_MASK)
80015c4a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80015c4e:	70 08       	ld.w	r8,r8[0x0]
80015c50:	10 99       	mov	r9,r8
80015c52:	e0 19 f0 ff 	andl	r9,0xf0ff
			| (src << AVR32_SCIF_GCCTRL_OSCSEL);
80015c56:	ee f8 ff f8 	ld.w	r8,r7[-8]
80015c5a:	a9 68       	lsl	r8,0x8
}

static inline void genclk_config_set_source(struct genclk_config *cfg,
		enum genclk_source src)
{
	cfg->ctrl = (cfg->ctrl & ~AVR32_SCIF_GCCTRL_OSCSEL_MASK)
80015c5c:	10 49       	or	r9,r8
80015c5e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80015c62:	91 09       	st.w	r8[0x0],r9
			| (src << AVR32_SCIF_GCCTRL_OSCSEL);
}
80015c64:	2f ed       	sub	sp,-8
80015c66:	e3 cd 80 80 	ldm	sp++,r7,pc

80015c6a <genclk_config_set_divider>:

static inline void genclk_config_set_divider(struct genclk_config *cfg,
		unsigned int divider)
{
80015c6a:	eb cd 40 80 	pushm	r7,lr
80015c6e:	1a 97       	mov	r7,sp
80015c70:	20 2d       	sub	sp,8
80015c72:	ef 4c ff fc 	st.w	r7[-4],r12
80015c76:	ef 4b ff f8 	st.w	r7[-8],r11
	Assert(divider > 0 && divider <= GENCLK_DIV_MAX);

	/* Clear all the bits we're about to modify */
	cfg->ctrl &= ~(AVR32_SCIF_GCCTRL_DIVEN_MASK
80015c7a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80015c7e:	70 08       	ld.w	r8,r8[0x0]
80015c80:	10 99       	mov	r9,r8
80015c82:	e4 19 ff 00 	andh	r9,0xff00
80015c86:	e0 19 ff fd 	andl	r9,0xfffd
80015c8a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80015c8e:	91 09       	st.w	r8[0x0],r9
			| AVR32_SCIF_GCCTRL_DIV_MASK);

	if (divider > 1) {
80015c90:	ee f8 ff f8 	ld.w	r8,r7[-8]
80015c94:	58 18       	cp.w	r8,1
80015c96:	e0 88 00 17 	brls	80015cc4 <genclk_config_set_divider+0x5a>
		cfg->ctrl |= 1U << AVR32_SCIF_GCCTRL_DIVEN;
80015c9a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80015c9e:	70 08       	ld.w	r8,r8[0x0]
80015ca0:	10 99       	mov	r9,r8
80015ca2:	a1 b9       	sbr	r9,0x1
80015ca4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80015ca8:	91 09       	st.w	r8[0x0],r9
		cfg->ctrl |= (((divider + 1) / 2) - 1) << AVR32_SCIF_GCCTRL_DIV;
80015caa:	ee f8 ff fc 	ld.w	r8,r7[-4]
80015cae:	70 09       	ld.w	r9,r8[0x0]
80015cb0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80015cb4:	2f f8       	sub	r8,-1
80015cb6:	a1 98       	lsr	r8,0x1
80015cb8:	20 18       	sub	r8,1
80015cba:	b1 68       	lsl	r8,0x10
80015cbc:	10 49       	or	r9,r8
80015cbe:	ee f8 ff fc 	ld.w	r8,r7[-4]
80015cc2:	91 09       	st.w	r8[0x0],r9
	}
}
80015cc4:	2f ed       	sub	sp,-8
80015cc6:	e3 cd 80 80 	ldm	sp++,r7,pc

80015cca <genclk_enable>:

static inline void genclk_enable(const struct genclk_config *cfg,
		unsigned int id)
{
80015cca:	eb cd 40 80 	pushm	r7,lr
80015cce:	1a 97       	mov	r7,sp
80015cd0:	20 2d       	sub	sp,8
80015cd2:	ef 4c ff fc 	st.w	r7[-4],r12
80015cd6:	ef 4b ff f8 	st.w	r7[-8],r11
	AVR32_SCIF.gcctrl[id] = cfg->ctrl | (1U << AVR32_SCIF_GCCTRL_CEN);
80015cda:	fe 78 08 00 	mov	r8,-63488
80015cde:	ee f9 ff f8 	ld.w	r9,r7[-8]
80015ce2:	ee fa ff fc 	ld.w	r10,r7[-4]
80015ce6:	74 0a       	ld.w	r10,r10[0x0]
80015ce8:	a1 aa       	sbr	r10,0x0
80015cea:	2e 79       	sub	r9,-25
80015cec:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
}
80015cf0:	2f ed       	sub	sp,-8
80015cf2:	e3 cd 80 80 	ldm	sp++,r7,pc

80015cf6 <genclk_disable>:

static inline void genclk_disable(unsigned int id)
{
80015cf6:	eb cd 40 80 	pushm	r7,lr
80015cfa:	1a 97       	mov	r7,sp
80015cfc:	20 1d       	sub	sp,4
80015cfe:	ef 4c ff fc 	st.w	r7[-4],r12
	AVR32_SCIF.gcctrl[id] = 0;
80015d02:	fe 78 08 00 	mov	r8,-63488
80015d06:	ee f9 ff fc 	ld.w	r9,r7[-4]
80015d0a:	2e 79       	sub	r9,-25
80015d0c:	30 0a       	mov	r10,0
80015d0e:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
}
80015d12:	2f fd       	sub	sp,-4
80015d14:	e3 cd 80 80 	ldm	sp++,r7,pc

80015d18 <get_interrupt_counter>:
#define EXT_INT_LINES 1
eic_options_t eic_options[EXT_INT_LINES];  
 
 

int get_interrupt_counter(void) {
80015d18:	eb cd 40 c0 	pushm	r6-r7,lr
80015d1c:	1a 97       	mov	r7,sp
80015d1e:	48 56       	lddpc	r6,80015d30 <get_interrupt_counter+0x18>
80015d20:	1e 26       	rsub	r6,pc
	return interrupt_counter;
80015d22:	ec f8 08 bc 	ld.w	r8,r6[2236]
80015d26:	70 08       	ld.w	r8,r8[0x0]
}
80015d28:	10 9c       	mov	r12,r8
80015d2a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80015d2e:	00 00       	add	r0,r0
80015d30:	80 01       	ld.sh	r1,r0[0x0]
80015d32:	5b a4       	cp.w	r4,-6

80015d34 <processData>:


void processData(void) {
80015d34:	eb cd 40 c0 	pushm	r6-r7,lr
80015d38:	1a 97       	mov	r7,sp
80015d3a:	20 3d       	sub	sp,12
80015d3c:	4b e6       	lddpc	r6,80015e34 <processData+0x100>
80015d3e:	1e 26       	rsub	r6,pc
	int ch;
	int32_t value;
	if (sampleCounter>=ADC_BUFFER_SIZE) {
80015d40:	ec f8 01 48 	ld.w	r8,r6[328]
80015d44:	70 08       	ld.w	r8,r8[0x0]
80015d46:	e0 48 03 ff 	cp.w	r8,1023
80015d4a:	e0 89 00 70 	brgt	80015e2a <processData+0xf6>
		return;
	}	
	uint8_t* buffer =get_spi_in_buffer(ADC_SPI_INDEX);
80015d4e:	30 0c       	mov	r12,0
80015d50:	f0 16 01 c3 	mcall	r6[1804]
80015d54:	18 98       	mov	r8,r12
80015d56:	ef 48 ff fc 	st.w	r7[-4],r8
	for (ch=0; ch<4; ch++) {
80015d5a:	30 08       	mov	r8,0
80015d5c:	ef 48 ff f4 	st.w	r7[-12],r8
80015d60:	c4 48       	rjmp	80015de8 <processData+0xb4>
		value=(buffer[3*ch]<<24) + (buffer[3*ch+1]<<16)+(buffer[3*ch+2]<<8);
80015d62:	ee f9 ff f4 	ld.w	r9,r7[-12]
80015d66:	12 98       	mov	r8,r9
80015d68:	a1 78       	lsl	r8,0x1
80015d6a:	12 08       	add	r8,r9
80015d6c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80015d70:	f2 08 00 08 	add	r8,r9,r8
80015d74:	11 88       	ld.ub	r8,r8[0x0]
80015d76:	f0 0a 15 18 	lsl	r10,r8,0x18
80015d7a:	ee f9 ff f4 	ld.w	r9,r7[-12]
80015d7e:	12 98       	mov	r8,r9
80015d80:	a1 78       	lsl	r8,0x1
80015d82:	12 08       	add	r8,r9
80015d84:	2f f8       	sub	r8,-1
80015d86:	ee f9 ff fc 	ld.w	r9,r7[-4]
80015d8a:	f2 08 00 08 	add	r8,r9,r8
80015d8e:	11 88       	ld.ub	r8,r8[0x0]
80015d90:	b1 68       	lsl	r8,0x10
80015d92:	10 0a       	add	r10,r8
80015d94:	ee f9 ff f4 	ld.w	r9,r7[-12]
80015d98:	12 98       	mov	r8,r9
80015d9a:	a1 78       	lsl	r8,0x1
80015d9c:	12 08       	add	r8,r9
80015d9e:	2f e8       	sub	r8,-2
80015da0:	ee f9 ff fc 	ld.w	r9,r7[-4]
80015da4:	f2 08 00 08 	add	r8,r9,r8
80015da8:	11 88       	ld.ub	r8,r8[0x0]
80015daa:	a9 68       	lsl	r8,0x8
80015dac:	f4 08 00 08 	add	r8,r10,r8
80015db0:	ef 48 ff f8 	st.w	r7[-8],r8
		adc_buffer[ch][sampleCounter]=(value/256);
80015db4:	ee fb ff f4 	ld.w	r11,r7[-12]
80015db8:	ec f8 01 48 	ld.w	r8,r6[328]
80015dbc:	70 09       	ld.w	r9,r8[0x0]
80015dbe:	ee f8 ff f8 	ld.w	r8,r7[-8]
80015dc2:	f0 ca ff 01 	sub	r10,r8,-255
80015dc6:	58 08       	cp.w	r8,0
80015dc8:	f4 08 17 50 	movlt	r8,r10
80015dcc:	a9 48       	asr	r8,0x8
80015dce:	10 9a       	mov	r10,r8
80015dd0:	ec f8 04 b0 	ld.w	r8,r6[1200]
80015dd4:	ab 6b       	lsl	r11,0xa
80015dd6:	f6 09 00 09 	add	r9,r11,r9
80015dda:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	int32_t value;
	if (sampleCounter>=ADC_BUFFER_SIZE) {
		return;
	}	
	uint8_t* buffer =get_spi_in_buffer(ADC_SPI_INDEX);
	for (ch=0; ch<4; ch++) {
80015dde:	ee f8 ff f4 	ld.w	r8,r7[-12]
80015de2:	2f f8       	sub	r8,-1
80015de4:	ef 48 ff f4 	st.w	r7[-12],r8
80015de8:	ee f8 ff f4 	ld.w	r8,r7[-12]
80015dec:	58 38       	cp.w	r8,3
80015dee:	fe 9a ff ba 	brle	80015d62 <processData+0x2e>
		value=(buffer[3*ch]<<24) + (buffer[3*ch+1]<<16)+(buffer[3*ch+2]<<8);
		adc_buffer[ch][sampleCounter]=(value/256);
		
	}
	
	if (function_generator!=NULL) {
80015df2:	ec f8 02 60 	ld.w	r8,r6[608]
80015df6:	70 08       	ld.w	r8,r8[0x0]
80015df8:	58 08       	cp.w	r8,0
80015dfa:	c0 f0       	breq	80015e18 <processData+0xe4>
		DAC_set_value((*function_generator)(sampleCounter));
80015dfc:	ec f8 02 60 	ld.w	r8,r6[608]
80015e00:	70 08       	ld.w	r8,r8[0x0]
80015e02:	ec f9 01 48 	ld.w	r9,r6[328]
80015e06:	72 09       	ld.w	r9,r9[0x0]
80015e08:	12 9c       	mov	r12,r9
80015e0a:	5d 18       	icall	r8
80015e0c:	18 98       	mov	r8,r12
80015e0e:	5c 88       	casts.h	r8
80015e10:	5c 78       	castu.h	r8
80015e12:	10 9c       	mov	r12,r8
80015e14:	f0 16 01 b2 	mcall	r6[1736]
	}		
	
	sampleCounter++;	
80015e18:	ec f8 01 48 	ld.w	r8,r6[328]
80015e1c:	70 08       	ld.w	r8,r8[0x0]
80015e1e:	f0 c9 ff ff 	sub	r9,r8,-1
80015e22:	ec f8 01 48 	ld.w	r8,r6[328]
80015e26:	91 09       	st.w	r8[0x0],r9
80015e28:	c0 28       	rjmp	80015e2c <processData+0xf8>

void processData(void) {
	int ch;
	int32_t value;
	if (sampleCounter>=ADC_BUFFER_SIZE) {
		return;
80015e2a:	d7 03       	nop
		DAC_set_value((*function_generator)(sampleCounter));
	}		
	
	sampleCounter++;	
	
}  
80015e2c:	2f dd       	sub	sp,-12
80015e2e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80015e32:	00 00       	add	r0,r0
80015e34:	80 01       	ld.sh	r1,r0[0x0]
80015e36:	5b c2       	cp.w	r2,-4

80015e38 <set_DAC_generator_function>:

void set_DAC_generator_function(generatorfunction new_function_generator ) {
80015e38:	eb cd 40 c0 	pushm	r6-r7,lr
80015e3c:	1a 97       	mov	r7,sp
80015e3e:	20 1d       	sub	sp,4
80015e40:	48 66       	lddpc	r6,80015e58 <set_DAC_generator_function+0x20>
80015e42:	1e 26       	rsub	r6,pc
80015e44:	ef 4c ff fc 	st.w	r7[-4],r12
	function_generator=new_function_generator;
80015e48:	ec f8 02 60 	ld.w	r8,r6[608]
80015e4c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80015e50:	91 09       	st.w	r8[0x0],r9
	
}
80015e52:	2f fd       	sub	sp,-4
80015e54:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80015e58:	80 01       	ld.sh	r1,r0[0x0]
80015e5a:	5c c6       	swap.bh	r6

80015e5c <get_sample>:

float get_sample(int channel, int sample) {
80015e5c:	eb cd 40 c0 	pushm	r6-r7,lr
80015e60:	1a 97       	mov	r7,sp
80015e62:	20 2d       	sub	sp,8
80015e64:	48 c6       	lddpc	r6,80015e94 <get_sample+0x38>
80015e66:	1e 26       	rsub	r6,pc
80015e68:	ef 4c ff fc 	st.w	r7[-4],r12
80015e6c:	ef 4b ff f8 	st.w	r7[-8],r11
	return adc_buffer[channel][sample];
80015e70:	ee fa ff fc 	ld.w	r10,r7[-4]
80015e74:	ee f9 ff f8 	ld.w	r9,r7[-8]
80015e78:	ec f8 04 b0 	ld.w	r8,r6[1200]
80015e7c:	ab 6a       	lsl	r10,0xa
80015e7e:	f4 09 00 09 	add	r9,r10,r9
80015e82:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80015e86:	e5 a6 08 08 	cop	cp0,cr8,cr0,cr8,0x4c
}
80015e8a:	10 9c       	mov	r12,r8
80015e8c:	2f ed       	sub	sp,-8
80015e8e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80015e92:	00 00       	add	r0,r0
80015e94:	80 01       	ld.sh	r1,r0[0x0]
80015e96:	5c ea       	tnbz	r10

80015e98 <get_sampling_status>:

int get_sampling_status(void) {
80015e98:	eb cd 40 c0 	pushm	r6-r7,lr
80015e9c:	1a 97       	mov	r7,sp
80015e9e:	48 56       	lddpc	r6,80015eb0 <get_sampling_status+0x18>
80015ea0:	1e 26       	rsub	r6,pc
	return sampleCounter;
80015ea2:	ec f8 01 48 	ld.w	r8,r6[328]
80015ea6:	70 08       	ld.w	r8,r8[0x0]
}
80015ea8:	10 9c       	mov	r12,r8
80015eaa:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80015eae:	00 00       	add	r0,r0
80015eb0:	80 01       	ld.sh	r1,r0[0x0]
80015eb2:	5d 24       	mustr	r4

80015eb4 <Init_ADC>:

// Initializes ADC (configures Pins, starts Clock, sets defaults)
void Init_ADC(void) {
80015eb4:	eb cd 40 c0 	pushm	r6-r7,lr
80015eb8:	1a 97       	mov	r7,sp
80015eba:	4b 96       	lddpc	r6,80015f9c <Init_ADC+0xe8>
80015ebc:	1e 26       	rsub	r6,pc
	function_generator=NULL;
80015ebe:	ec f8 02 60 	ld.w	r8,r6[608]
80015ec2:	30 09       	mov	r9,0
80015ec4:	91 09       	st.w	r8[0x0],r9
	// set mode to "high resolution"
	gpio_configure_pin(ADC_MODE0,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);	
80015ec6:	30 3b       	mov	r11,3
80015ec8:	32 3c       	mov	r12,35
80015eca:	f0 16 00 3a 	mcall	r6[232]
	gpio_configure_pin(ADC_MODE1,GPIO_DIR_OUTPUT | GPIO_INIT_LOW);	
80015ece:	30 1b       	mov	r11,1
80015ed0:	32 4c       	mov	r12,36
80015ed2:	f0 16 00 3a 	mcall	r6[232]
	// set Format to Fixed-position TDM via SPI
	gpio_configure_pin(ADC_FORMAT0,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);	
80015ed6:	30 3b       	mov	r11,3
80015ed8:	32 2c       	mov	r12,34
80015eda:	f0 16 00 3a 	mcall	r6[232]
	gpio_configure_pin(ADC_FORMAT1,GPIO_DIR_OUTPUT | GPIO_INIT_LOW);	
80015ede:	30 1b       	mov	r11,1
80015ee0:	32 1c       	mov	r12,33
80015ee2:	f0 16 00 3a 	mcall	r6[232]
	gpio_configure_pin(ADC_FORMAT2,GPIO_DIR_OUTPUT | GPIO_INIT_LOW);	
80015ee6:	30 1b       	mov	r11,1
80015ee8:	32 0c       	mov	r12,32
80015eea:	f0 16 00 3a 	mcall	r6[232]
	
	// configure the four channels
	gpio_configure_pin(ADC_PWDN1,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);	
80015eee:	30 3b       	mov	r11,3
80015ef0:	34 0c       	mov	r12,64
80015ef2:	f0 16 00 3a 	mcall	r6[232]
	gpio_configure_pin(ADC_PWDN2,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);	
80015ef6:	30 3b       	mov	r11,3
80015ef8:	34 1c       	mov	r12,65
80015efa:	f0 16 00 3a 	mcall	r6[232]
	gpio_configure_pin(ADC_PWDN3,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);	
80015efe:	30 3b       	mov	r11,3
80015f00:	34 2c       	mov	r12,66
80015f02:	f0 16 00 3a 	mcall	r6[232]
	gpio_configure_pin(ADC_PWDN4,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);	
80015f06:	30 3b       	mov	r11,3
80015f08:	34 3c       	mov	r12,67
80015f0a:	f0 16 00 3a 	mcall	r6[232]

	
	//gpio_configure_pin(AVR32_TC1_B0_0_0_PIN,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);	
	//gpio_configure_pin(AVR32_PIN_PC19, GPIO_DIR_OUTPUT| GPIO_INIT_HIGH);	

	ADC_Switch_Clock(true);	
80015f0e:	30 1c       	mov	r12,1
80015f10:	f0 16 01 50 	mcall	r6[1344]
	//tc_write_rc(tc, EXAMPLE_TC_CHANNEL_ID, 0x2);     // Set RC value.
	// Start the timer/counter.
	//tc_start(tc, EXAMPLE_TC_CHANNEL_ID);
	
	// Enable edge-triggered interrupt.
	eic_options[0].eic_mode   = EIC_MODE_EDGE_TRIGGERED;
80015f14:	ec f9 01 60 	ld.w	r9,r6[352]
80015f18:	30 08       	mov	r8,0
80015f1a:	b2 98       	st.b	r9[0x1],r8
	// Interrupt will trigger on falling edge.
	eic_options[0].eic_edge  = EIC_EDGE_FALLING_EDGE;
80015f1c:	ec f9 01 60 	ld.w	r9,r6[352]
80015f20:	30 08       	mov	r8,0
80015f22:	b2 a8       	st.b	r9[0x2],r8
	// Initialize in synchronous mode : interrupt is synchronized to the clock
	eic_options[0].eic_async  = EIC_SYNCH_MODE;
80015f24:	ec f9 01 60 	ld.w	r9,r6[352]
80015f28:	30 08       	mov	r8,0
80015f2a:	b2 d8       	st.b	r9[0x5],r8
	// Set the interrupt line number.
	eic_options[0].eic_line   = EXT_NMI;
80015f2c:	ec f9 01 60 	ld.w	r9,r6[352]
80015f30:	30 08       	mov	r8,0
80015f32:	b2 88       	st.b	r9[0x0],r8
	
	gpio_enable_module_pin(AVR32_EIC_EXTINT_0_1_PIN, AVR32_EIC_EXTINT_0_1_FUNCTION);
80015f34:	30 1b       	mov	r11,1
80015f36:	37 5c       	mov	r12,117
80015f38:	f0 16 00 3d 	mcall	r6[244]
	
	//Disable_global_interrupt();
// Initialize interrupt vectors.
	
	eic_init(&AVR32_EIC, eic_options, 1);
80015f3c:	30 1a       	mov	r10,1
80015f3e:	ec fb 01 60 	ld.w	r11,r6[352]
80015f42:	fe 7c 14 00 	mov	r12,-60416
80015f46:	f0 16 01 aa 	mcall	r6[1704]

	//INTC_init_interrupts();
	// initialise SPI0 interface
	initSPI(&AVR32_SPI0, ADC_SPI_INDEX);
80015f4a:	30 0b       	mov	r11,0
80015f4c:	fc 7c 18 00 	mov	r12,-190464
80015f50:	f0 16 01 39 	mcall	r6[1252]
	spiInitDMA(0, 12);
80015f54:	30 cb       	mov	r11,12
80015f56:	30 0c       	mov	r12,0
80015f58:	f0 16 01 9a 	mcall	r6[1640]
	setSPIcallBack(ADC_SPI_INDEX, &processData);
80015f5c:	ec fb 06 8c 	ld.w	r11,r6[1676]
80015f60:	30 0c       	mov	r12,0
80015f62:	f0 16 01 7d 	mcall	r6[1524]
	// Register the EIC interrupt handlers to the interrupt controller.
	//INTC_register_interrupt(&eic_int_handler1, AVR32_EIC_IRQ_1, AVR32_INTC_INT1);
	// Enable the chosen lines and their corresponding interrupt feature.
	eic_enable_line(&AVR32_EIC, eic_options[0].eic_line);
80015f66:	ec f8 01 60 	ld.w	r8,r6[352]
80015f6a:	11 88       	ld.ub	r8,r8[0x0]
80015f6c:	10 9b       	mov	r11,r8
80015f6e:	fe 7c 14 00 	mov	r12,-60416
80015f72:	f0 16 01 cb 	mcall	r6[1836]
	eic_enable_interrupt_line(&AVR32_EIC, eic_options[0].eic_line);
80015f76:	ec f8 01 60 	ld.w	r8,r6[352]
80015f7a:	11 88       	ld.ub	r8,r8[0x0]
80015f7c:	10 9b       	mov	r11,r8
80015f7e:	fe 7c 14 00 	mov	r12,-60416
80015f82:	f0 16 01 77 	mcall	r6[1500]
	
	
	//Enable_global_interrupt();
	eic_clear_interrupt_line(&AVR32_EIC, EXT_NMI);
80015f86:	30 0b       	mov	r11,0
80015f88:	fe 7c 14 00 	mov	r12,-60416
80015f8c:	f0 16 00 d3 	mcall	r6[844]
	
	// activate sync and clkdiv
	gpio_configure_pin(ADC_CLKDIV,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);	
80015f90:	30 3b       	mov	r11,3
80015f92:	32 5c       	mov	r12,37
80015f94:	f0 16 00 3a 	mcall	r6[232]

}
80015f98:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80015f9c:	80 01       	ld.sh	r1,r0[0x0]
80015f9e:	5d 40       	*unknown*

80015fa0 <ADC_Switch_Clock>:

// Enable/Disable the clock to the ADC
void ADC_Switch_Clock(Bool on_off) {
80015fa0:	eb cd 40 c0 	pushm	r6-r7,lr
80015fa4:	1a 97       	mov	r7,sp
80015fa6:	20 1d       	sub	sp,4
80015fa8:	49 56       	lddpc	r6,80015ffc <ADC_Switch_Clock+0x5c>
80015faa:	1e 26       	rsub	r6,pc
80015fac:	18 98       	mov	r8,r12
80015fae:	ef 68 ff fc 	st.b	r7[-4],r8
	if (on_off==true) {
80015fb2:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80015fb6:	30 18       	mov	r8,1
80015fb8:	f0 09 18 00 	cp.b	r9,r8
80015fbc:	c1 a1       	brne	80015ff0 <ADC_Switch_Clock+0x50>
		gpio_enable_module_pin(AVR32_SCIF_GCLK_1_1_PIN, AVR32_SCIF_GCLK_1_1_FUNCTION);	
80015fbe:	30 1b       	mov	r11,1
80015fc0:	35 4c       	mov	r12,84
80015fc2:	f0 16 00 3d 	mcall	r6[244]

		gpio_configure_pin(ADC_CLKDIV,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);	
80015fc6:	30 3b       	mov	r11,3
80015fc8:	32 5c       	mov	r12,37
80015fca:	f0 16 00 3a 	mcall	r6[232]
	
	
		//scif_gc_setup(AVR32_SCIF_GCLK_GCLK0PIN, SCIF_GCCTRL_CPUCLOCK, 1, 1);
		//scif_gc_enable(AVR32_SCIF_GCLK_GCLK0PIN);
		genclk_config_defaults(&gcfg, AVR32_SCIF_GCLK_GCLK1PIN);
80015fce:	30 ab       	mov	r11,10
80015fd0:	ec fc 02 00 	ld.w	r12,r6[512]
80015fd4:	c2 4e       	rcall	80015c1c <genclk_config_defaults>
		genclk_config_set_source(&gcfg, GENCLK_SRC_PLL1);
80015fd6:	30 6b       	mov	r11,6
80015fd8:	ec fc 02 00 	ld.w	r12,r6[512]
80015fdc:	c2 fe       	rcall	80015c3a <genclk_config_set_source>
		genclk_config_set_divider(&gcfg, 2);
80015fde:	30 2b       	mov	r11,2
80015fe0:	ec fc 02 00 	ld.w	r12,r6[512]
80015fe4:	c4 3e       	rcall	80015c6a <genclk_config_set_divider>
		genclk_enable(&gcfg, AVR32_SCIF_GCLK_GCLK1PIN);
80015fe6:	30 ab       	mov	r11,10
80015fe8:	ec fc 02 00 	ld.w	r12,r6[512]
80015fec:	c6 fe       	rcall	80015cca <genclk_enable>
80015fee:	c0 38       	rjmp	80015ff4 <ADC_Switch_Clock+0x54>
	} else {
		genclk_disable(AVR32_SCIF_GCLK_GCLK1PIN);
80015ff0:	30 ac       	mov	r12,10
80015ff2:	c8 2e       	rcall	80015cf6 <genclk_disable>
		
	}
}
80015ff4:	2f fd       	sub	sp,-4
80015ff6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80015ffa:	00 00       	add	r0,r0
80015ffc:	80 01       	ld.sh	r1,r0[0x0]
80015ffe:	5e 2e       	reths	-1

80016000 <ADC_Switch_Channel>:

// Switch the four input channels on or off
void ADC_Switch_Channel(int channel, Bool on_off){
80016000:	eb cd 40 80 	pushm	r7,lr
80016004:	1a 97       	mov	r7,sp
80016006:	20 2d       	sub	sp,8
80016008:	ef 4c ff fc 	st.w	r7[-4],r12
8001600c:	16 98       	mov	r8,r11
8001600e:	ef 68 ff f8 	st.b	r7[-8],r8
	
}
80016012:	2f ed       	sub	sp,-8
80016014:	e3 cd 80 80 	ldm	sp++,r7,pc

80016018 <ADC_Set_Mode>:

// configures the ADC mode (refer to datasheet for options)
void ADC_Set_Mode(int mode){};
80016018:	eb cd 40 80 	pushm	r7,lr
8001601c:	1a 97       	mov	r7,sp
8001601e:	20 1d       	sub	sp,4
80016020:	ef 4c ff fc 	st.w	r7[-4],r12
80016024:	2f fd       	sub	sp,-4
80016026:	e3 cd 80 80 	ldm	sp++,r7,pc

8001602a <ADC_Start_Oneshot>:

// enables continuous sampling  -- not implemented yet
//void ADC_Start_Sampling(void){}

// starts sampling, captures one buffer length and then stops
void ADC_Start_Oneshot(void){
8001602a:	eb cd 40 c0 	pushm	r6-r7,lr
8001602e:	1a 97       	mov	r7,sp
80016030:	48 46       	lddpc	r6,80016040 <ADC_Start_Oneshot+0x16>
80016032:	1e 26       	rsub	r6,pc
	//Disable_global_interrupt();
	//eic_enable_interrupt_line(&AVR32_EIC, eic_options[0].eic_line);
	sampleCounter=0;
80016034:	ec f8 01 48 	ld.w	r8,r6[328]
80016038:	30 09       	mov	r9,0
8001603a:	91 09       	st.w	r8[0x0],r9
	//Enable_global_interrupt();
};
8001603c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80016040:	80 01       	ld.sh	r1,r0[0x0]
80016042:	5e b6       	rethi	r6

80016044 <ADC_Stop_Sampling>:

// stops sampling immediately
void ADC_Stop_Sampling(void){};
80016044:	eb cd 40 80 	pushm	r7,lr
80016048:	1a 97       	mov	r7,sp
8001604a:	e3 cd 80 80 	ldm	sp++,r7,pc

8001604e <Sampling_Complete>:

// Returns true if one-shot sampling has finished
Bool Sampling_Complete(void){};
8001604e:	eb cd 40 80 	pushm	r7,lr
80016052:	1a 97       	mov	r7,sp
80016054:	e3 cd 80 80 	ldm	sp++,r7,pc

80016058 <eic_nmi_handler>:
__attribute__((__naked__))

void eic_nmi_handler( void )
{
//	int i=0;
	__asm__ __volatile__ (
80016058:	d7 f1       	pushm	r0-r12,lr
			/* Save registers not saved upon NMI exception. */
			"pushm   r0-r12, lr\n\t"
			);
	//interrupt_counter++;
	
	if (sampleCounter<ADC_BUFFER_SIZE) {
8001605a:	ec f8 01 48 	ld.w	r8,r6[328]
8001605e:	70 08       	ld.w	r8,r8[0x0]
80016060:	e0 48 03 ff 	cp.w	r8,1023
80016064:	e0 89 00 06 	brgt	80016070 <eic_nmi_handler+0x18>
		spiTriggerDMA(0, 12);
80016068:	30 cb       	mov	r11,12
8001606a:	30 0c       	mov	r12,0
8001606c:	f0 16 01 7f 	mcall	r6[1532]
	} else {
		//eic_disable_interrupt_line(&AVR32_EIC,eic_options[0].eic_line);

	}
	eic_clear_interrupt_line(&AVR32_EIC, EXT_NMI);
80016070:	30 0b       	mov	r11,0
80016072:	fe 7c 14 00 	mov	r12,-60416
80016076:	f0 16 00 d3 	mcall	r6[844]
	__asm__ __volatile__ (
8001607a:	d7 f2       	popm	r0-r12,lr
8001607c:	d6 03       	rete
	...

80016080 <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
80016080:	eb cd 40 c0 	pushm	r6-r7,lr
80016084:	1a 97       	mov	r7,sp
80016086:	20 6d       	sub	sp,24
80016088:	49 e6       	lddpc	r6,80016100 <interpolate+0x80>
8001608a:	1e 26       	rsub	r6,pc
8001608c:	ef 4c ff f8 	st.w	r7[-8],r12
80016090:	ef 4b ff f4 	st.w	r7[-12],r11
80016094:	ef 4a ff f0 	st.w	r7[-16],r10
80016098:	ef 49 ff ec 	st.w	r7[-20],r9
8001609c:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
800160a0:	ee f9 ff f4 	ld.w	r9,r7[-12]
800160a4:	ee f8 ff f0 	ld.w	r8,r7[-16]
800160a8:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
800160ac:	c0 41       	brne	800160b4 <interpolate+0x34>
	{
		return y1;
800160ae:	ee f8 ff ec 	ld.w	r8,r7[-20]
800160b2:	c2 38       	rjmp	800160f8 <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
800160b4:	ee f9 ff e8 	ld.w	r9,r7[-24]
800160b8:	ee f8 ff ec 	ld.w	r8,r7[-20]
800160bc:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
800160c0:	ee fa ff f8 	ld.w	r10,r7[-8]
800160c4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800160c8:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
800160cc:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
800160d0:	ee fa ff f0 	ld.w	r10,r7[-16]
800160d4:	ee f9 ff f4 	ld.w	r9,r7[-12]
800160d8:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
800160dc:	12 9b       	mov	r11,r9
800160de:	10 9c       	mov	r12,r8
800160e0:	f0 16 00 08 	mcall	r6[32]
800160e4:	18 98       	mov	r8,r12
800160e6:	10 99       	mov	r9,r8
800160e8:	ee f8 ff ec 	ld.w	r8,r7[-20]
800160ec:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
800160f0:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
800160f4:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
800160f8:	10 9c       	mov	r12,r8
800160fa:	2f ad       	sub	sp,-24
800160fc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80016100:	80 01       	ld.sh	r1,r0[0x0]
80016102:	5f 0e       	sreq	lr

80016104 <init_adxl345_slow>:
uint8_t data_configuration[2] ={
DATA_SETTING_ADDRESS, FULL_RES | RANGE_16G};



void init_adxl345_slow(void) {
80016104:	eb cd 40 c0 	pushm	r6-r7,lr
80016108:	1a 97       	mov	r7,sp
8001610a:	48 f6       	lddpc	r6,80016144 <init_adxl345_slow+0x40>
8001610c:	1e 26       	rsub	r6,pc
		.speed = 400000,
		.chip = ADXL_ALT_SLAVE_ADDRESS, 
		.smbus=false
	};

	twim_master_init(&AVR32_TWIM0, &twi_opt);
8001610e:	ec fb 08 b8 	ld.w	r11,r6[2232]
80016112:	fe 7c 38 00 	mov	r12,-51200
80016116:	f0 16 00 6a 	mcall	r6[424]
	twim_write(&AVR32_TWIM0, (uint8_t*)&default_configuration, 2, ADXL_ALT_SLAVE_ADDRESS, false);
8001611a:	30 08       	mov	r8,0
8001611c:	35 39       	mov	r9,83
8001611e:	30 2a       	mov	r10,2
80016120:	ec fb 03 68 	ld.w	r11,r6[872]
80016124:	fe 7c 38 00 	mov	r12,-51200
80016128:	f0 16 00 39 	mcall	r6[228]
	twim_write(&AVR32_TWIM0, (uint8_t*)&data_configuration, 2, ADXL_ALT_SLAVE_ADDRESS, false);
8001612c:	30 08       	mov	r8,0
8001612e:	35 39       	mov	r9,83
80016130:	30 2a       	mov	r10,2
80016132:	ec fb 08 50 	ld.w	r11,r6[2128]
80016136:	fe 7c 38 00 	mov	r12,-51200
8001613a:	f0 16 00 39 	mcall	r6[228]
}
8001613e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80016142:	00 00       	add	r0,r0
80016144:	80 01       	ld.sh	r1,r0[0x0]
80016146:	5f 90       	srgt	r0

80016148 <get_acc_data_slow>:


acc_data* get_acc_data_slow(void) {
80016148:	eb cd 40 c0 	pushm	r6-r7,lr
8001614c:	1a 97       	mov	r7,sp
8001614e:	20 2d       	sub	sp,8
80016150:	4a 76       	lddpc	r6,800161ec <get_acc_data_slow+0xa4>
80016152:	1e 26       	rsub	r6,pc
	int i;
	uint8_t write_then_read_preamble=SENSOR_REG_ADDRESS;
80016154:	33 28       	mov	r8,50
80016156:	ef 68 ff fb 	st.b	r7[-5],r8
	twim_write(&AVR32_TWIM0, (uint8_t*) &write_then_read_preamble, 1, ADXL_ALT_SLAVE_ADDRESS, false);
8001615a:	ee cb 00 05 	sub	r11,r7,5
8001615e:	30 08       	mov	r8,0
80016160:	35 39       	mov	r9,83
80016162:	30 1a       	mov	r10,1
80016164:	fe 7c 38 00 	mov	r12,-51200
80016168:	f0 16 00 39 	mcall	r6[228]
	twim_read(&AVR32_TWIM0, (uint8_t*)&acc_outputs, 6, ADXL_ALT_SLAVE_ADDRESS, false);
8001616c:	30 08       	mov	r8,0
8001616e:	35 39       	mov	r9,83
80016170:	30 6a       	mov	r10,6
80016172:	ec fb 01 e8 	ld.w	r11,r6[488]
80016176:	fe 7c 38 00 	mov	r12,-51200
8001617a:	f0 16 00 63 	mcall	r6[396]
	
	for (i=0; i<3; i++) {
8001617e:	30 08       	mov	r8,0
80016180:	ef 48 ff fc 	st.w	r7[-4],r8
80016184:	c2 98       	rjmp	800161d6 <get_acc_data_slow+0x8e>
		acc_outputs.axes[i]=(int16_t)(acc_outputs.raw_data[2*i])+(int16_t)(acc_outputs.raw_data[2*i+1]<<8);
80016186:	ee fb ff fc 	ld.w	r11,r7[-4]
8001618a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001618e:	a1 78       	lsl	r8,0x1
80016190:	ec f9 01 e8 	ld.w	r9,r6[488]
80016194:	f2 08 07 08 	ld.ub	r8,r9[r8]
80016198:	5c 58       	castu.b	r8
8001619a:	10 99       	mov	r9,r8
8001619c:	ee f8 ff fc 	ld.w	r8,r7[-4]
800161a0:	a1 78       	lsl	r8,0x1
800161a2:	2f f8       	sub	r8,-1
800161a4:	ec fa 01 e8 	ld.w	r10,r6[488]
800161a8:	f4 08 07 08 	ld.ub	r8,r10[r8]
800161ac:	5c 58       	castu.b	r8
800161ae:	a9 68       	lsl	r8,0x8
800161b0:	5c 88       	casts.h	r8
800161b2:	f2 08 00 08 	add	r8,r9,r8
800161b6:	5c 88       	casts.h	r8
800161b8:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
800161bc:	ec fa 01 e8 	ld.w	r10,r6[488]
800161c0:	f6 c8 ff fe 	sub	r8,r11,-2
800161c4:	a1 78       	lsl	r8,0x1
800161c6:	f4 08 00 08 	add	r8,r10,r8
800161ca:	b0 19       	st.h	r8[0x2],r9
	int i;
	uint8_t write_then_read_preamble=SENSOR_REG_ADDRESS;
	twim_write(&AVR32_TWIM0, (uint8_t*) &write_then_read_preamble, 1, ADXL_ALT_SLAVE_ADDRESS, false);
	twim_read(&AVR32_TWIM0, (uint8_t*)&acc_outputs, 6, ADXL_ALT_SLAVE_ADDRESS, false);
	
	for (i=0; i<3; i++) {
800161cc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800161d0:	2f f8       	sub	r8,-1
800161d2:	ef 48 ff fc 	st.w	r7[-4],r8
800161d6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800161da:	58 28       	cp.w	r8,2
800161dc:	fe 9a ff d5 	brle	80016186 <get_acc_data_slow+0x3e>
		acc_outputs.axes[i]=(int16_t)(acc_outputs.raw_data[2*i])+(int16_t)(acc_outputs.raw_data[2*i+1]<<8);
	}			
	return &acc_outputs;
800161e0:	ec f8 01 e8 	ld.w	r8,r6[488]
800161e4:	10 9c       	mov	r12,r8
800161e6:	2f ed       	sub	sp,-8
800161e8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800161ec:	80 01       	ld.sh	r1,r0[0x0]
800161ee:	5f d6       	srvc	r6

800161f0 <f_abs>:

	}
	return result;
}

static inline float f_abs(const float a){
800161f0:	eb cd 40 80 	pushm	r7,lr
800161f4:	1a 97       	mov	r7,sp
800161f6:	20 1d       	sub	sp,4
800161f8:	ef 4c ff fc 	st.w	r7[-4],r12
	if (a >= 0.0)
800161fc:	30 18       	mov	r8,1
800161fe:	ee fa ff fc 	ld.w	r10,r7[-4]
80016202:	30 09       	mov	r9,0
80016204:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80016208:	e0 8c 00 03 	brvs	8001620e <f_abs+0x1e>
8001620c:	c0 24       	brge	80016210 <f_abs+0x20>
8001620e:	30 08       	mov	r8,0
80016210:	5c 58       	castu.b	r8
80016212:	c0 40       	breq	8001621a <f_abs+0x2a>
	{
		return a;
80016214:	ee f8 ff fc 	ld.w	r8,r7[-4]
80016218:	c0 58       	rjmp	80016222 <f_abs+0x32>
	}else{
		return -a;
8001621a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001621e:	ee 18 80 00 	eorh	r8,0x8000
	}
}
80016222:	10 9c       	mov	r12,r8
80016224:	2f fd       	sub	sp,-4
80016226:	e3 cd 80 80 	ldm	sp++,r7,pc

8001622a <median_filter_3x>:
static float inline center_window_4(float x) {
	return 1.0/(1+SQR(SQR(x)));
}


static float inline median_filter_3x(float a, float b, float c) {
8001622a:	eb cd 40 80 	pushm	r7,lr
8001622e:	1a 97       	mov	r7,sp
80016230:	20 4d       	sub	sp,16
80016232:	ef 4c ff f8 	st.w	r7[-8],r12
80016236:	ef 4b ff f4 	st.w	r7[-12],r11
8001623a:	ef 4a ff f0 	st.w	r7[-16],r10
	float middle;
	if ((a <= b) && (a <= c)) {
8001623e:	30 18       	mov	r8,1
80016240:	ee fa ff f8 	ld.w	r10,r7[-8]
80016244:	ee f9 ff f4 	ld.w	r9,r7[-12]
80016248:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
8001624c:	e0 8c 00 04 	brvs	80016254 <median_filter_3x+0x2a>
80016250:	e0 8a 00 03 	brle	80016256 <median_filter_3x+0x2c>
80016254:	30 08       	mov	r8,0
80016256:	5c 58       	castu.b	r8
80016258:	c2 50       	breq	800162a2 <median_filter_3x+0x78>
8001625a:	30 18       	mov	r8,1
8001625c:	ee fa ff f8 	ld.w	r10,r7[-8]
80016260:	ee f9 ff f0 	ld.w	r9,r7[-16]
80016264:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80016268:	e0 8c 00 04 	brvs	80016270 <median_filter_3x+0x46>
8001626c:	e0 8a 00 03 	brle	80016272 <median_filter_3x+0x48>
80016270:	30 08       	mov	r8,0
80016272:	5c 58       	castu.b	r8
80016274:	c1 70       	breq	800162a2 <median_filter_3x+0x78>
		middle = (b <= c) ? b : c;
80016276:	30 18       	mov	r8,1
80016278:	ee fa ff f4 	ld.w	r10,r7[-12]
8001627c:	ee f9 ff f0 	ld.w	r9,r7[-16]
80016280:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80016284:	e0 8c 00 04 	brvs	8001628c <median_filter_3x+0x62>
80016288:	e0 8a 00 03 	brle	8001628e <median_filter_3x+0x64>
8001628c:	30 08       	mov	r8,0
8001628e:	5c 58       	castu.b	r8
80016290:	c0 40       	breq	80016298 <median_filter_3x+0x6e>
80016292:	ee f8 ff f4 	ld.w	r8,r7[-12]
80016296:	c0 38       	rjmp	8001629c <median_filter_3x+0x72>
80016298:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001629c:	ef 48 ff fc 	st.w	r7[-4],r8
}


static float inline median_filter_3x(float a, float b, float c) {
	float middle;
	if ((a <= b) && (a <= c)) {
800162a0:	c4 88       	rjmp	80016330 <median_filter_3x+0x106>
		middle = (b <= c) ? b : c;
	}
	else if ((b <= a) && (b <= c))
800162a2:	30 18       	mov	r8,1
800162a4:	ee fa ff f4 	ld.w	r10,r7[-12]
800162a8:	ee f9 ff f8 	ld.w	r9,r7[-8]
800162ac:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
800162b0:	e0 8c 00 04 	brvs	800162b8 <median_filter_3x+0x8e>
800162b4:	e0 8a 00 03 	brle	800162ba <median_filter_3x+0x90>
800162b8:	30 08       	mov	r8,0
800162ba:	5c 58       	castu.b	r8
800162bc:	c2 50       	breq	80016306 <median_filter_3x+0xdc>
800162be:	30 18       	mov	r8,1
800162c0:	ee fa ff f4 	ld.w	r10,r7[-12]
800162c4:	ee f9 ff f0 	ld.w	r9,r7[-16]
800162c8:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
800162cc:	e0 8c 00 04 	brvs	800162d4 <median_filter_3x+0xaa>
800162d0:	e0 8a 00 03 	brle	800162d6 <median_filter_3x+0xac>
800162d4:	30 08       	mov	r8,0
800162d6:	5c 58       	castu.b	r8
800162d8:	c1 70       	breq	80016306 <median_filter_3x+0xdc>
	{
		middle = (a <= c) ? a : c;
800162da:	30 18       	mov	r8,1
800162dc:	ee fa ff f8 	ld.w	r10,r7[-8]
800162e0:	ee f9 ff f0 	ld.w	r9,r7[-16]
800162e4:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
800162e8:	e0 8c 00 04 	brvs	800162f0 <median_filter_3x+0xc6>
800162ec:	e0 8a 00 03 	brle	800162f2 <median_filter_3x+0xc8>
800162f0:	30 08       	mov	r8,0
800162f2:	5c 58       	castu.b	r8
800162f4:	c0 40       	breq	800162fc <median_filter_3x+0xd2>
800162f6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800162fa:	c0 38       	rjmp	80016300 <median_filter_3x+0xd6>
800162fc:	ee f8 ff f0 	ld.w	r8,r7[-16]
80016300:	ef 48 ff fc 	st.w	r7[-4],r8
static float inline median_filter_3x(float a, float b, float c) {
	float middle;
	if ((a <= b) && (a <= c)) {
		middle = (b <= c) ? b : c;
	}
	else if ((b <= a) && (b <= c))
80016304:	c1 68       	rjmp	80016330 <median_filter_3x+0x106>
	{
		middle = (a <= c) ? a : c;
	} else {
	   middle = (a <= b) ? a : b;
80016306:	30 18       	mov	r8,1
80016308:	ee fa ff f8 	ld.w	r10,r7[-8]
8001630c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80016310:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80016314:	e0 8c 00 04 	brvs	8001631c <median_filter_3x+0xf2>
80016318:	e0 8a 00 03 	brle	8001631e <median_filter_3x+0xf4>
8001631c:	30 08       	mov	r8,0
8001631e:	5c 58       	castu.b	r8
80016320:	c0 40       	breq	80016328 <median_filter_3x+0xfe>
80016322:	ee f8 ff f8 	ld.w	r8,r7[-8]
80016326:	c0 38       	rjmp	8001632c <median_filter_3x+0x102>
80016328:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001632c:	ef 48 ff fc 	st.w	r7[-4],r8
	}
	return middle;
80016330:	ee f8 ff fc 	ld.w	r8,r7[-4]

}
80016334:	10 9c       	mov	r12,r8
80016336:	2f cd       	sub	sp,-16
80016338:	e3 cd 80 80 	ldm	sp++,r7,pc

8001633c <interpolate>:


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
8001633c:	eb cd 40 c0 	pushm	r6-r7,lr
80016340:	1a 97       	mov	r7,sp
80016342:	20 6d       	sub	sp,24
80016344:	49 e6       	lddpc	r6,800163bc <interpolate+0x80>
80016346:	1e 26       	rsub	r6,pc
80016348:	ef 4c ff f8 	st.w	r7[-8],r12
8001634c:	ef 4b ff f4 	st.w	r7[-12],r11
80016350:	ef 4a ff f0 	st.w	r7[-16],r10
80016354:	ef 49 ff ec 	st.w	r7[-20],r9
80016358:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
8001635c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80016360:	ee f8 ff f0 	ld.w	r8,r7[-16]
80016364:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
80016368:	c0 41       	brne	80016370 <interpolate+0x34>
	{
		return y1;
8001636a:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001636e:	c2 38       	rjmp	800163b4 <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
80016370:	ee f9 ff e8 	ld.w	r9,r7[-24]
80016374:	ee f8 ff ec 	ld.w	r8,r7[-20]
80016378:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8001637c:	ee fa ff f8 	ld.w	r10,r7[-8]
80016380:	ee f8 ff f4 	ld.w	r8,r7[-12]
80016384:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80016388:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8001638c:	ee fa ff f0 	ld.w	r10,r7[-16]
80016390:	ee f9 ff f4 	ld.w	r9,r7[-12]
80016394:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80016398:	12 9b       	mov	r11,r9
8001639a:	10 9c       	mov	r12,r8
8001639c:	f0 16 00 08 	mcall	r6[32]
800163a0:	18 98       	mov	r8,r12
800163a2:	10 99       	mov	r9,r8
800163a4:	ee f8 ff ec 	ld.w	r8,r7[-20]
800163a8:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
800163ac:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
800163b0:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
800163b4:	10 9c       	mov	r12,r8
800163b6:	2f ad       	sub	sp,-24
800163b8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800163bc:	80 01       	ld.sh	r1,r0[0x0]
800163be:	61 ca       	ld.w	r10,r0[0x70]

800163c0 <bmp085_read_int>:
#include <stdbool.h>
#include "print_util.h"

pressure_data pressure_outputs;

int16_t bmp085_read_int(unsigned char address) {
800163c0:	eb cd 40 c0 	pushm	r6-r7,lr
800163c4:	1a 97       	mov	r7,sp
800163c6:	20 2d       	sub	sp,8
800163c8:	48 f6       	lddpc	r6,80016404 <bmp085_read_int+0x44>
800163ca:	1e 26       	rsub	r6,pc
800163cc:	18 98       	mov	r8,r12
800163ce:	ef 68 ff f8 	st.b	r7[-8],r8
	int16_t result;
	twim_write(&AVR32_TWIM0, (uint8_t*) &address, 1, BMP085_SLAVE_ADDRESS, false);
800163d2:	ee cb 00 08 	sub	r11,r7,8
800163d6:	30 08       	mov	r8,0
800163d8:	37 79       	mov	r9,119
800163da:	30 1a       	mov	r10,1
800163dc:	fe 7c 38 00 	mov	r12,-51200
800163e0:	f0 16 00 39 	mcall	r6[228]
	twim_read(&AVR32_TWIM0, (uint8_t*)&(result), 2, BMP085_SLAVE_ADDRESS, false);
800163e4:	ee cb 00 02 	sub	r11,r7,2
800163e8:	30 08       	mov	r8,0
800163ea:	37 79       	mov	r9,119
800163ec:	30 2a       	mov	r10,2
800163ee:	fe 7c 38 00 	mov	r12,-51200
800163f2:	f0 16 00 63 	mcall	r6[396]
	return result;
800163f6:	ef 08 ff fe 	ld.sh	r8,r7[-2]
}
800163fa:	10 9c       	mov	r12,r8
800163fc:	2f ed       	sub	sp,-8
800163fe:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80016402:	00 00       	add	r0,r0
80016404:	80 01       	ld.sh	r1,r0[0x0]
80016406:	62 4e       	ld.w	lr,r1[0x10]

80016408 <init_bmp085>:

void init_bmp085(){
80016408:	eb cd 40 c0 	pushm	r6-r7,lr
8001640c:	1a 97       	mov	r7,sp
8001640e:	20 1d       	sub	sp,4
80016410:	49 36       	lddpc	r6,8001645c <init_bmp085+0x54>
80016412:	1e 26       	rsub	r6,pc
	int i;
	pressure_outputs.altitude_offset=0.0;
80016414:	ec f8 00 48 	ld.w	r8,r6[72]
80016418:	30 09       	mov	r9,0
8001641a:	91 89       	st.w	r8[0x20],r9
	for (i=0; i<3; i++) pressure_outputs.last_altitudes[i]=0.0;
8001641c:	30 08       	mov	r8,0
8001641e:	ef 48 ff fc 	st.w	r7[-4],r8
80016422:	c0 e8       	rjmp	8001643e <init_bmp085+0x36>
80016424:	ee f9 ff fc 	ld.w	r9,r7[-4]
80016428:	ec f8 00 48 	ld.w	r8,r6[72]
8001642c:	2f c9       	sub	r9,-4
8001642e:	30 0a       	mov	r10,0
80016430:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
80016434:	ee f8 ff fc 	ld.w	r8,r7[-4]
80016438:	2f f8       	sub	r8,-1
8001643a:	ef 48 ff fc 	st.w	r7[-4],r8
8001643e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80016442:	58 28       	cp.w	r8,2
80016444:	fe 9a ff f0 	brle	80016424 <init_bmp085+0x1c>
	pressure_outputs.vario_vz=0.0;
80016448:	ec f8 00 48 	ld.w	r8,r6[72]
8001644c:	30 09       	mov	r9,0
8001644e:	91 99       	st.w	r8[0x24],r9
	init_bmp085_slow();
80016450:	f0 16 01 e9 	mcall	r6[1956]
}
80016454:	2f fd       	sub	sp,-4
80016456:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001645a:	00 00       	add	r0,r0
8001645c:	80 01       	ld.sh	r1,r0[0x0]
8001645e:	62 96       	ld.w	r6,r1[0x24]
80016460:	42 4d       	lddsp	sp,sp[0x90]
80016462:	50 38       	stdsp	sp[0xc],r8
80016464:	35 2f       	mov	pc,82
80016466:	31 38       	mov	r8,19
80016468:	30 20       	mov	r0,2
8001646a:	70 72       	ld.w	r2,r8[0x1c]
8001646c:	65 73       	ld.w	r3,r2[0x5c]
8001646e:	73 75       	ld.w	r5,r9[0x5c]
80016470:	72 65       	ld.w	r5,r9[0x18]
80016472:	20 73       	sub	r3,7
80016474:	65 6e       	ld.w	lr,r2[0x58]
80016476:	73 6f       	ld.w	pc,r9[0x58]
80016478:	72 20       	ld.w	r0,r9[0x8]
8001647a:	66 6f       	ld.w	pc,r3[0x18]
8001647c:	75 6e       	ld.w	lr,r10[0x58]
8001647e:	64 20       	ld.w	r0,r2[0x8]
80016480:	28 30       	sub	r0,-125
80016482:	78 37       	ld.w	r7,r12[0xc]
80016484:	37 29       	mov	r9,114
80016486:	0a 00       	add	r0,r5
80016488:	42 4d       	lddsp	sp,sp[0x90]
8001648a:	50 38       	stdsp	sp[0xc],r8
8001648c:	35 2f       	mov	pc,82
8001648e:	31 38       	mov	r8,19
80016490:	30 20       	mov	r0,2
80016492:	70 72       	ld.w	r2,r8[0x1c]
80016494:	65 73       	ld.w	r3,r2[0x5c]
80016496:	73 75       	ld.w	r5,r9[0x5c]
80016498:	72 65       	ld.w	r5,r9[0x18]
8001649a:	20 73       	sub	r3,7
8001649c:	65 6e       	ld.w	lr,r2[0x58]
8001649e:	73 6f       	ld.w	pc,r9[0x58]
800164a0:	72 20       	ld.w	r0,r9[0x8]
800164a2:	6e 6f       	ld.w	pc,r7[0x18]
800164a4:	74 20       	ld.w	r0,r10[0x8]
800164a6:	72 65       	ld.w	r5,r9[0x18]
800164a8:	73 70       	ld.w	r0,r9[0x5c]
800164aa:	6f 6e       	ld.w	lr,r7[0x58]
800164ac:	64 69       	ld.w	r9,r2[0x18]
800164ae:	6e 67       	ld.w	r7,r7[0x18]
800164b0:	20 28       	sub	r8,2
800164b2:	30 78       	mov	r8,7
800164b4:	37 37       	mov	r7,115
800164b6:	29 0a       	sub	r10,-112
	...

800164ba <init_bmp085_slow>:

  int16_t ac1, ac2, ac3, b1, b2, mb, mc, md;
  uint16_t ac4, ac5, ac6;


void init_bmp085_slow(){
800164ba:	eb cd 40 c0 	pushm	r6-r7,lr
800164be:	1a 97       	mov	r7,sp
800164c0:	4d 36       	lddpc	r6,8001660c <init_bmp085_slow+0x152>
800164c2:	1e 26       	rsub	r6,pc
		.speed = 400000,
		.chip = BMP085_SLAVE_ADDRESS,
		.smbus=false
	};

	twim_master_init(&AVR32_TWIM0, &twi_opt);
800164c4:	ec fb 08 b4 	ld.w	r11,r6[2228]
800164c8:	fe 7c 38 00 	mov	r12,-51200
800164cc:	f0 16 00 6a 	mcall	r6[424]

	if (twim_probe(&AVR32_TWIM0, BMP085_SLAVE_ADDRESS)==STATUS_OK) {
800164d0:	37 7b       	mov	r11,119
800164d2:	fe 7c 38 00 	mov	r12,-51200
800164d6:	f0 16 00 ff 	mcall	r6[1020]
800164da:	18 98       	mov	r8,r12
800164dc:	58 08       	cp.w	r8,0
800164de:	e0 81 00 8f 	brne	800165fc <init_bmp085_slow+0x142>
		dbg_print("BMP85/180 pressure sensor found (0x77)\n");
800164e2:	fe cc 00 82 	sub	r12,pc,130
800164e6:	f0 16 00 01 	mcall	r6[4]
	} else {
		dbg_print("BMP85/180 pressure sensor not responding (0x77)\n");
		return;
	}
	ac1 = 408;
800164ea:	ec f9 03 14 	ld.w	r9,r6[788]
800164ee:	e0 68 01 98 	mov	r8,408
800164f2:	b2 08       	st.h	r9[0x0],r8
	ac2 = -72;
800164f4:	ec f9 02 ec 	ld.w	r9,r6[748]
800164f8:	3b 88       	mov	r8,-72
800164fa:	b2 08       	st.h	r9[0x0],r8
	ac3 = -14383;
800164fc:	ec f9 02 74 	ld.w	r9,r6[628]
80016500:	fe 78 c7 d1 	mov	r8,-14383
80016504:	b2 08       	st.h	r9[0x0],r8
	ac4 = 32741;
80016506:	ec f9 02 cc 	ld.w	r9,r6[716]
8001650a:	e0 68 7f e5 	mov	r8,32741
8001650e:	b2 08       	st.h	r9[0x0],r8
	ac5 = 32757;
80016510:	ec f9 02 f0 	ld.w	r9,r6[752]
80016514:	e0 68 7f f5 	mov	r8,32757
80016518:	b2 08       	st.h	r9[0x0],r8
	ac6 = 23153;
8001651a:	ec f9 03 00 	ld.w	r9,r6[768]
8001651e:	e0 68 5a 71 	mov	r8,23153
80016522:	b2 08       	st.h	r9[0x0],r8
	mc = -8711;
80016524:	ec f9 02 a8 	ld.w	r9,r6[680]
80016528:	fe 78 dd f9 	mov	r8,-8711
8001652c:	b2 08       	st.h	r9[0x0],r8
	md = 2868;
8001652e:	ec f9 02 d8 	ld.w	r9,r6[728]
80016532:	e0 68 0b 34 	mov	r8,2868
80016536:	b2 08       	st.h	r9[0x0],r8
	b1 = 6190;
80016538:	ec f9 03 08 	ld.w	r9,r6[776]
8001653c:	e0 68 18 2e 	mov	r8,6190
80016540:	b2 08       	st.h	r9[0x0],r8
	b2 = 4;
80016542:	ec f9 03 24 	ld.w	r9,r6[804]
80016546:	30 48       	mov	r8,4
80016548:	b2 08       	st.h	r9[0x0],r8

	
	ac1=bmp085_read_int(0xAA);
8001654a:	e0 6c 00 aa 	mov	r12,170
8001654e:	f0 16 00 44 	mcall	r6[272]
80016552:	18 98       	mov	r8,r12
80016554:	ec f9 03 14 	ld.w	r9,r6[788]
80016558:	b2 08       	st.h	r9[0x0],r8
	ac2=bmp085_read_int(0xAC);
8001655a:	e0 6c 00 ac 	mov	r12,172
8001655e:	f0 16 00 44 	mcall	r6[272]
80016562:	18 98       	mov	r8,r12
80016564:	ec f9 02 ec 	ld.w	r9,r6[748]
80016568:	b2 08       	st.h	r9[0x0],r8
	ac3=bmp085_read_int(0xAE);
8001656a:	e0 6c 00 ae 	mov	r12,174
8001656e:	f0 16 00 44 	mcall	r6[272]
80016572:	18 98       	mov	r8,r12
80016574:	ec f9 02 74 	ld.w	r9,r6[628]
80016578:	b2 08       	st.h	r9[0x0],r8
	ac4=bmp085_read_int(0xB0);
8001657a:	e0 6c 00 b0 	mov	r12,176
8001657e:	f0 16 00 44 	mcall	r6[272]
80016582:	18 98       	mov	r8,r12
80016584:	ec f9 02 cc 	ld.w	r9,r6[716]
80016588:	b2 08       	st.h	r9[0x0],r8
	ac5=bmp085_read_int(0xB2);
8001658a:	e0 6c 00 b2 	mov	r12,178
8001658e:	f0 16 00 44 	mcall	r6[272]
80016592:	18 98       	mov	r8,r12
80016594:	ec f9 02 f0 	ld.w	r9,r6[752]
80016598:	b2 08       	st.h	r9[0x0],r8
	ac6=bmp085_read_int(0xB4);
8001659a:	e0 6c 00 b4 	mov	r12,180
8001659e:	f0 16 00 44 	mcall	r6[272]
800165a2:	18 98       	mov	r8,r12
800165a4:	ec f9 03 00 	ld.w	r9,r6[768]
800165a8:	b2 08       	st.h	r9[0x0],r8
	b1=bmp085_read_int(0xB6);
800165aa:	e0 6c 00 b6 	mov	r12,182
800165ae:	f0 16 00 44 	mcall	r6[272]
800165b2:	18 98       	mov	r8,r12
800165b4:	ec f9 03 08 	ld.w	r9,r6[776]
800165b8:	b2 08       	st.h	r9[0x0],r8
	b2=bmp085_read_int(0xB8);
800165ba:	e0 6c 00 b8 	mov	r12,184
800165be:	f0 16 00 44 	mcall	r6[272]
800165c2:	18 98       	mov	r8,r12
800165c4:	ec f9 03 24 	ld.w	r9,r6[804]
800165c8:	b2 08       	st.h	r9[0x0],r8
	mb=bmp085_read_int(0xBA);
800165ca:	e0 6c 00 ba 	mov	r12,186
800165ce:	f0 16 00 44 	mcall	r6[272]
800165d2:	18 98       	mov	r8,r12
800165d4:	ec f9 07 f0 	ld.w	r9,r6[2032]
800165d8:	b2 08       	st.h	r9[0x0],r8
	mc=bmp085_read_int(0xBC);
800165da:	e0 6c 00 bc 	mov	r12,188
800165de:	f0 16 00 44 	mcall	r6[272]
800165e2:	18 98       	mov	r8,r12
800165e4:	ec f9 02 a8 	ld.w	r9,r6[680]
800165e8:	b2 08       	st.h	r9[0x0],r8
	md=bmp085_read_int(0xBE);
800165ea:	e0 6c 00 be 	mov	r12,190
800165ee:	f0 16 00 44 	mcall	r6[272]
800165f2:	18 98       	mov	r8,r12
800165f4:	ec f9 02 d8 	ld.w	r9,r6[728]
800165f8:	b2 08       	st.h	r9[0x0],r8
800165fa:	c0 68       	rjmp	80016606 <init_bmp085_slow+0x14c>
	twim_master_init(&AVR32_TWIM0, &twi_opt);

	if (twim_probe(&AVR32_TWIM0, BMP085_SLAVE_ADDRESS)==STATUS_OK) {
		dbg_print("BMP85/180 pressure sensor found (0x77)\n");
	} else {
		dbg_print("BMP85/180 pressure sensor not responding (0x77)\n");
800165fc:	fe cc 01 74 	sub	r12,pc,372
80016600:	f0 16 00 01 	mcall	r6[4]
		return;
80016604:	d7 03       	nop
	mb=bmp085_read_int(0xBA);
	mc=bmp085_read_int(0xBC);
	md=bmp085_read_int(0xBE);
	
	
}
80016606:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001660a:	00 00       	add	r0,r0
8001660c:	80 01       	ld.sh	r1,r0[0x0]
8001660e:	63 46       	ld.w	r6,r1[0x50]

80016610 <get_pressure_data_slow>:

 


pressure_data* get_pressure_data_slow(float offset) {
80016610:	eb cd 40 cc 	pushm	r2-r3,r6-r7,lr
80016614:	1a 97       	mov	r7,sp
80016616:	21 4d       	sub	sp,80
80016618:	fe f6 06 2c 	ld.w	r6,pc[1580]
8001661c:	1e 26       	rsub	r6,pc
8001661e:	ef 4c ff b0 	st.w	r7[-80],r12
		int32_t UT, UP, B3, B5, B6, X1, X2, X3, p;
		uint32_t B4, B7;
			
		uint8_t start_address;
		
		uint8_t start_command_temp []={BMP085_CONTROL, BMP085_READTEMPCMD};
80016622:	ec f8 08 b0 	ld.w	r8,r6[2224]
80016626:	90 08       	ld.sh	r8,r8[0x0]
80016628:	ef 58 ff b8 	st.h	r7[-72],r8
		uint8_t start_command_pressure []={BMP085_CONTROL, BMP085_READPRESSURECMD+ (BMP085_OVERSAMPLING_MODE << 6)};
8001662c:	ec f8 08 ac 	ld.w	r8,r6[2220]
80016630:	90 08       	ld.sh	r8,r8[0x0]
80016632:	ef 58 ff b4 	st.h	r7[-76],r8
		int32_t sealevelPressure=101325;
80016636:	e0 78 8b cd 	mov	r8,101325
8001663a:	ef 48 ff f4 	st.w	r7[-12],r8
		float dt;
		// calibration: use datasheet numbers!

		switch (pressure_outputs.state) {
8001663e:	ec f8 00 48 	ld.w	r8,r6[72]
80016642:	70 c8       	ld.w	r8,r8[0x30]
80016644:	58 18       	cp.w	r8,1
80016646:	c1 50       	breq	80016670 <get_pressure_data_slow+0x60>
80016648:	c0 53       	brcs	80016652 <get_pressure_data_slow+0x42>
8001664a:	58 28       	cp.w	r8,2
8001664c:	c3 80       	breq	800166bc <get_pressure_data_slow+0xac>
8001664e:	e0 8f 02 e9 	bral	80016c20 <get_pressure_data_slow+0x610>
		case IDLE:
			twim_write(&AVR32_TWIM0, (uint8_t*) &start_command_temp, 2, BMP085_SLAVE_ADDRESS, false);
80016652:	ee cb 00 48 	sub	r11,r7,72
80016656:	30 08       	mov	r8,0
80016658:	37 79       	mov	r9,119
8001665a:	30 2a       	mov	r10,2
8001665c:	fe 7c 38 00 	mov	r12,-51200
80016660:	f0 16 00 39 	mcall	r6[228]
		    //delay_ms(7);
			pressure_outputs.state=GET_TEMP;
80016664:	ec f8 00 48 	ld.w	r8,r6[72]
80016668:	30 19       	mov	r9,1
8001666a:	91 c9       	st.w	r8[0x30],r9
			break;
8001666c:	e0 8f 02 da 	bral	80016c20 <get_pressure_data_slow+0x610>
		case GET_TEMP:
			start_address=BMP085_TEMPDATA;
80016670:	3f 68       	mov	r8,-10
80016672:	ef 68 ff bb 	st.b	r7[-69],r8
			twim_write(&AVR32_TWIM0, (uint8_t*) &start_address, 1, BMP085_SLAVE_ADDRESS, false);
80016676:	ee cb 00 45 	sub	r11,r7,69
8001667a:	30 08       	mov	r8,0
8001667c:	37 79       	mov	r9,119
8001667e:	30 1a       	mov	r10,1
80016680:	fe 7c 38 00 	mov	r12,-51200
80016684:	f0 16 00 39 	mcall	r6[228]
			twim_read(&AVR32_TWIM0, (uint8_t*)&(pressure_outputs.raw_temperature), 2, BMP085_SLAVE_ADDRESS, false);
80016688:	ec f8 00 48 	ld.w	r8,r6[72]
8001668c:	f0 cb ff fd 	sub	r11,r8,-3
80016690:	30 08       	mov	r8,0
80016692:	37 79       	mov	r9,119
80016694:	30 2a       	mov	r10,2
80016696:	fe 7c 38 00 	mov	r12,-51200
8001669a:	f0 16 00 63 	mcall	r6[396]
		
			twim_write(&AVR32_TWIM0, (uint8_t*) &start_command_pressure, 2, BMP085_SLAVE_ADDRESS, false);
8001669e:	ee cb 00 4c 	sub	r11,r7,76
800166a2:	30 08       	mov	r8,0
800166a4:	37 79       	mov	r9,119
800166a6:	30 2a       	mov	r10,2
800166a8:	fe 7c 38 00 	mov	r12,-51200
800166ac:	f0 16 00 39 	mcall	r6[228]
			pressure_outputs.state=GET_PRESSURE;
800166b0:	ec f8 00 48 	ld.w	r8,r6[72]
800166b4:	30 29       	mov	r9,2
800166b6:	91 c9       	st.w	r8[0x30],r9
			//delay_ms(15);
			break;
800166b8:	e0 8f 02 b4 	bral	80016c20 <get_pressure_data_slow+0x610>
		case GET_PRESSURE:
			start_address=BMP085_PRESSUREDATA;
800166bc:	3f 68       	mov	r8,-10
800166be:	ef 68 ff bb 	st.b	r7[-69],r8
			twim_write(&AVR32_TWIM0, (uint8_t*) &start_address, 1, BMP085_SLAVE_ADDRESS, false);
800166c2:	ee cb 00 45 	sub	r11,r7,69
800166c6:	30 08       	mov	r8,0
800166c8:	37 79       	mov	r9,119
800166ca:	30 1a       	mov	r10,1
800166cc:	fe 7c 38 00 	mov	r12,-51200
800166d0:	f0 16 00 39 	mcall	r6[228]
			twim_read(&AVR32_TWIM0, (uint8_t*)&(pressure_outputs.raw_pressure), 3, BMP085_SLAVE_ADDRESS, false);
800166d4:	30 08       	mov	r8,0
800166d6:	37 79       	mov	r9,119
800166d8:	30 3a       	mov	r10,3
800166da:	ec fb 00 48 	ld.w	r11,r6[72]
800166de:	fe 7c 38 00 	mov	r12,-51200
800166e2:	f0 16 00 63 	mcall	r6[396]
		
			UP= ((uint32_t)pressure_outputs.raw_pressure[0]<<16 |(uint32_t)pressure_outputs.raw_pressure[1]<<8 | (uint32_t)pressure_outputs.raw_pressure[2]) >> (8-BMP085_OVERSAMPLING_MODE);
800166e6:	ec f8 00 48 	ld.w	r8,r6[72]
800166ea:	11 88       	ld.ub	r8,r8[0x0]
800166ec:	f0 09 15 10 	lsl	r9,r8,0x10
800166f0:	ec f8 00 48 	ld.w	r8,r6[72]
800166f4:	11 98       	ld.ub	r8,r8[0x1]
800166f6:	a9 68       	lsl	r8,0x8
800166f8:	10 49       	or	r9,r8
800166fa:	ec f8 00 48 	ld.w	r8,r6[72]
800166fe:	11 a8       	ld.ub	r8,r8[0x2]
80016700:	f3 e8 10 08 	or	r8,r9,r8
80016704:	a7 88       	lsr	r8,0x6
80016706:	ef 48 ff cc 	st.w	r7[-52],r8
 
			UT=pressure_outputs.raw_temperature[0]<<8 |pressure_outputs.raw_temperature[1];
8001670a:	ec f8 00 48 	ld.w	r8,r6[72]
8001670e:	11 b8       	ld.ub	r8,r8[0x3]
80016710:	f0 09 15 08 	lsl	r9,r8,0x8
80016714:	ec f8 00 48 	ld.w	r8,r6[72]
80016718:	11 c8       	ld.ub	r8,r8[0x4]
8001671a:	f3 e8 10 08 	or	r8,r9,r8
8001671e:	ef 48 ff c8 	st.w	r7[-56],r8
			// step 1
			X1 = (UT - (int32_t)ac6) * ((int32_t)ac5) / pow(2,15);
80016722:	ec f8 03 00 	ld.w	r8,r6[768]
80016726:	90 08       	ld.sh	r8,r8[0x0]
80016728:	5c 78       	castu.h	r8
8001672a:	ee f9 ff c8 	ld.w	r9,r7[-56]
8001672e:	10 19       	sub	r9,r8
80016730:	ec f8 02 f0 	ld.w	r8,r6[752]
80016734:	90 08       	ld.sh	r8,r8[0x0]
80016736:	5c 78       	castu.h	r8
80016738:	f2 08 02 48 	mul	r8,r9,r8
8001673c:	10 9c       	mov	r12,r8
8001673e:	f0 16 00 1a 	mcall	r6[104]
80016742:	30 08       	mov	r8,0
80016744:	fc 19 40 e0 	movh	r9,0x40e0
80016748:	f0 16 00 0c 	mcall	r6[48]
8001674c:	14 98       	mov	r8,r10
8001674e:	16 99       	mov	r9,r11
80016750:	10 9a       	mov	r10,r8
80016752:	12 9b       	mov	r11,r9
80016754:	f0 16 00 14 	mcall	r6[80]
80016758:	18 98       	mov	r8,r12
8001675a:	ef 48 ff dc 	st.w	r7[-36],r8
			X2 = ((int32_t)mc * pow(2,11)) / (X1+(int32_t)md);
8001675e:	ec f8 02 a8 	ld.w	r8,r6[680]
80016762:	90 08       	ld.sh	r8,r8[0x0]
80016764:	10 9c       	mov	r12,r8
80016766:	f0 16 00 1a 	mcall	r6[104]
8001676a:	30 08       	mov	r8,0
8001676c:	fc 19 40 a0 	movh	r9,0x40a0
80016770:	f0 16 00 03 	mcall	r6[12]
80016774:	14 98       	mov	r8,r10
80016776:	16 99       	mov	r9,r11
80016778:	10 92       	mov	r2,r8
8001677a:	12 93       	mov	r3,r9
8001677c:	ec f8 02 d8 	ld.w	r8,r6[728]
80016780:	90 08       	ld.sh	r8,r8[0x0]
80016782:	10 99       	mov	r9,r8
80016784:	ee f8 ff dc 	ld.w	r8,r7[-36]
80016788:	f2 08 00 08 	add	r8,r9,r8
8001678c:	10 9c       	mov	r12,r8
8001678e:	f0 16 00 1a 	mcall	r6[104]
80016792:	14 98       	mov	r8,r10
80016794:	16 99       	mov	r9,r11
80016796:	04 9a       	mov	r10,r2
80016798:	06 9b       	mov	r11,r3
8001679a:	f0 16 00 0c 	mcall	r6[48]
8001679e:	14 98       	mov	r8,r10
800167a0:	16 99       	mov	r9,r11
800167a2:	10 9a       	mov	r10,r8
800167a4:	12 9b       	mov	r11,r9
800167a6:	f0 16 00 14 	mcall	r6[80]
800167aa:	18 98       	mov	r8,r12
800167ac:	ef 48 ff e0 	st.w	r7[-32],r8
			B5 = X1 + X2;
800167b0:	ee f9 ff dc 	ld.w	r9,r7[-36]
800167b4:	ee f8 ff e0 	ld.w	r8,r7[-32]
800167b8:	f2 08 00 08 	add	r8,r9,r8
800167bc:	ef 48 ff d4 	st.w	r7[-44],r8
			pressure_outputs.temperature = (B5+8)/pow(2,4);
800167c0:	ee f8 ff d4 	ld.w	r8,r7[-44]
800167c4:	2f 88       	sub	r8,-8
800167c6:	10 9c       	mov	r12,r8
800167c8:	f0 16 00 1a 	mcall	r6[104]
800167cc:	30 08       	mov	r8,0
800167ce:	fc 19 40 30 	movh	r9,0x4030
800167d2:	f0 16 00 0c 	mcall	r6[48]
800167d6:	14 98       	mov	r8,r10
800167d8:	16 99       	mov	r9,r11
800167da:	10 9a       	mov	r10,r8
800167dc:	12 9b       	mov	r11,r9
800167de:	f0 16 00 09 	mcall	r6[36]
800167e2:	18 99       	mov	r9,r12
800167e4:	ec f8 00 48 	ld.w	r8,r6[72]
800167e8:	91 39       	st.w	r8[0xc],r9
			pressure_outputs.temperature /= 10;
800167ea:	ec f8 00 48 	ld.w	r8,r6[72]
800167ee:	70 38       	ld.w	r8,r8[0xc]
800167f0:	fc 1b 41 20 	movh	r11,0x4120
800167f4:	10 9c       	mov	r12,r8
800167f6:	f0 16 00 08 	mcall	r6[32]
800167fa:	18 98       	mov	r8,r12
800167fc:	10 99       	mov	r9,r8
800167fe:	ec f8 00 48 	ld.w	r8,r6[72]
80016802:	91 39       	st.w	r8[0xc],r9
	
			// do pressure calcs
			B6 = B5 - 4000;
80016804:	ee f8 ff d4 	ld.w	r8,r7[-44]
80016808:	f0 c8 0f a0 	sub	r8,r8,4000
8001680c:	ef 48 ff d8 	st.w	r7[-40],r8
			X1 = ((int32_t)b2 * ( (B6 * B6)>>12 )) >> 11;
80016810:	ec f8 03 24 	ld.w	r8,r6[804]
80016814:	90 08       	ld.sh	r8,r8[0x0]
80016816:	10 99       	mov	r9,r8
80016818:	ee fa ff d8 	ld.w	r10,r7[-40]
8001681c:	ee f8 ff d8 	ld.w	r8,r7[-40]
80016820:	f4 08 02 48 	mul	r8,r10,r8
80016824:	ad 48       	asr	r8,0xc
80016826:	f2 08 02 48 	mul	r8,r9,r8
8001682a:	ab 58       	asr	r8,0xb
8001682c:	ef 48 ff dc 	st.w	r7[-36],r8
			X2 = ((int32_t)ac2 * B6) >> 11;
80016830:	ec f8 02 ec 	ld.w	r8,r6[748]
80016834:	90 08       	ld.sh	r8,r8[0x0]
80016836:	10 99       	mov	r9,r8
80016838:	ee f8 ff d8 	ld.w	r8,r7[-40]
8001683c:	f2 08 02 48 	mul	r8,r9,r8
80016840:	ab 58       	asr	r8,0xb
80016842:	ef 48 ff e0 	st.w	r7[-32],r8
			X3 = X1 + X2;
80016846:	ee f9 ff dc 	ld.w	r9,r7[-36]
8001684a:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001684e:	f2 08 00 08 	add	r8,r9,r8
80016852:	ef 48 ff e4 	st.w	r7[-28],r8
			B3 = ((((int32_t)ac1*4 + X3) << BMP085_OVERSAMPLING_MODE) + 2) / 4;
80016856:	ec f8 03 14 	ld.w	r8,r6[788]
8001685a:	90 08       	ld.sh	r8,r8[0x0]
8001685c:	f0 09 15 02 	lsl	r9,r8,0x2
80016860:	ee f8 ff e4 	ld.w	r8,r7[-28]
80016864:	f2 08 00 08 	add	r8,r9,r8
80016868:	a3 68       	lsl	r8,0x2
8001686a:	2f e8       	sub	r8,-2
8001686c:	f0 c9 ff fd 	sub	r9,r8,-3
80016870:	58 08       	cp.w	r8,0
80016872:	f2 08 17 50 	movlt	r8,r9
80016876:	a3 48       	asr	r8,0x2
80016878:	ef 48 ff d0 	st.w	r7[-48],r8


			X1 = ((int32_t)ac3 * B6) >> 13;
8001687c:	ec f8 02 74 	ld.w	r8,r6[628]
80016880:	90 08       	ld.sh	r8,r8[0x0]
80016882:	10 99       	mov	r9,r8
80016884:	ee f8 ff d8 	ld.w	r8,r7[-40]
80016888:	f2 08 02 48 	mul	r8,r9,r8
8001688c:	ad 58       	asr	r8,0xd
8001688e:	ef 48 ff dc 	st.w	r7[-36],r8
			X2 = ((int32_t)b1 * ((B6 * B6) >> 12)) >> 16;
80016892:	ec f8 03 08 	ld.w	r8,r6[776]
80016896:	90 08       	ld.sh	r8,r8[0x0]
80016898:	10 99       	mov	r9,r8
8001689a:	ee fa ff d8 	ld.w	r10,r7[-40]
8001689e:	ee f8 ff d8 	ld.w	r8,r7[-40]
800168a2:	f4 08 02 48 	mul	r8,r10,r8
800168a6:	ad 48       	asr	r8,0xc
800168a8:	f2 08 02 48 	mul	r8,r9,r8
800168ac:	b1 48       	asr	r8,0x10
800168ae:	ef 48 ff e0 	st.w	r7[-32],r8
			X3 = ((X1 + X2) + 2) >> 2;
800168b2:	ee f9 ff dc 	ld.w	r9,r7[-36]
800168b6:	ee f8 ff e0 	ld.w	r8,r7[-32]
800168ba:	f2 08 00 08 	add	r8,r9,r8
800168be:	2f e8       	sub	r8,-2
800168c0:	a3 48       	asr	r8,0x2
800168c2:	ef 48 ff e4 	st.w	r7[-28],r8
			B4 = ((uint32_t)ac4 * (uint32_t)(X3 + 32768)) >> 15;
800168c6:	ec f8 02 cc 	ld.w	r8,r6[716]
800168ca:	90 08       	ld.sh	r8,r8[0x0]
800168cc:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
800168d0:	ee f8 ff e4 	ld.w	r8,r7[-28]
800168d4:	f0 c8 80 00 	sub	r8,r8,-32768
800168d8:	f2 08 02 48 	mul	r8,r9,r8
800168dc:	af 98       	lsr	r8,0xf
800168de:	ef 48 ff ec 	st.w	r7[-20],r8
			B7 = ((uint32_t)UP - B3) * (uint32_t)( 50000UL >> BMP085_OVERSAMPLING_MODE );
800168e2:	ee f9 ff cc 	ld.w	r9,r7[-52]
800168e6:	ee f8 ff d0 	ld.w	r8,r7[-48]
800168ea:	10 19       	sub	r9,r8
800168ec:	e0 68 30 d4 	mov	r8,12500
800168f0:	f2 08 02 48 	mul	r8,r9,r8
800168f4:	ef 48 ff f0 	st.w	r7[-16],r8


			if (B7 < 0x80000000) {
800168f8:	ee f8 ff f0 	ld.w	r8,r7[-16]
800168fc:	58 08       	cp.w	r8,0
800168fe:	c0 b5       	brlt	80016914 <get_pressure_data_slow+0x304>
				p = (B7 * 2) / B4;
80016900:	ee f8 ff f0 	ld.w	r8,r7[-16]
80016904:	a1 78       	lsl	r8,0x1
80016906:	ee f9 ff ec 	ld.w	r9,r7[-20]
8001690a:	f0 09 0d 08 	divu	r8,r8,r9
8001690e:	ef 48 ff e8 	st.w	r7[-24],r8
80016912:	c0 a8       	rjmp	80016926 <get_pressure_data_slow+0x316>
			} else {
				p = (B7 / B4) * 2;
80016914:	ee f8 ff f0 	ld.w	r8,r7[-16]
80016918:	ee f9 ff ec 	ld.w	r9,r7[-20]
8001691c:	f0 09 0d 08 	divu	r8,r8,r9
80016920:	a1 78       	lsl	r8,0x1
80016922:	ef 48 ff e8 	st.w	r7[-24],r8
			}
			X1 = (p >> 8) * (p >> 8);
80016926:	ee f8 ff e8 	ld.w	r8,r7[-24]
8001692a:	f0 09 14 08 	asr	r9,r8,0x8
8001692e:	ee f8 ff e8 	ld.w	r8,r7[-24]
80016932:	a9 48       	asr	r8,0x8
80016934:	f2 08 02 48 	mul	r8,r9,r8
80016938:	ef 48 ff dc 	st.w	r7[-36],r8
			X1 = (X1 * 3038) >> 16;
8001693c:	ee f9 ff dc 	ld.w	r9,r7[-36]
80016940:	e0 68 0b de 	mov	r8,3038
80016944:	f2 08 02 48 	mul	r8,r9,r8
80016948:	b1 48       	asr	r8,0x10
8001694a:	ef 48 ff dc 	st.w	r7[-36],r8
			X2 = (-7357 * p) >> 16;
8001694e:	ee f9 ff e8 	ld.w	r9,r7[-24]
80016952:	fe 78 e3 43 	mov	r8,-7357
80016956:	f2 08 02 48 	mul	r8,r9,r8
8001695a:	b1 48       	asr	r8,0x10
8001695c:	ef 48 ff e0 	st.w	r7[-32],r8

			p = p + ((X1 + X2 + (int32_t)3791)>>4);
80016960:	ee f9 ff dc 	ld.w	r9,r7[-36]
80016964:	ee f8 ff e0 	ld.w	r8,r7[-32]
80016968:	f2 08 00 08 	add	r8,r9,r8
8001696c:	f0 c8 f1 31 	sub	r8,r8,-3791
80016970:	a5 48       	asr	r8,0x4
80016972:	ee f9 ff e8 	ld.w	r9,r7[-24]
80016976:	f2 08 00 08 	add	r8,r9,r8
8001697a:	ef 48 ff e8 	st.w	r7[-24],r8

			pressure_outputs.pressure=p;
8001697e:	ee f8 ff e8 	ld.w	r8,r7[-24]
80016982:	e5 a6 09 08 	cop	cp0,cr9,cr0,cr8,0x4c
80016986:	ec f8 00 48 	ld.w	r8,r6[72]
8001698a:	91 29       	st.w	r8[0x8],r9
		
			vertical_speed=pressure_outputs.altitude;
8001698c:	ec f8 00 48 	ld.w	r8,r6[72]
80016990:	70 78       	ld.w	r8,r8[0x1c]
80016992:	ef 48 ff c4 	st.w	r7[-60],r8
			altitude=44330.0 * (1.0 - pow(pressure_outputs.pressure /sealevelPressure,0.190295)) + pressure_outputs.altitude_offset;
80016996:	ec f8 00 48 	ld.w	r8,r6[72]
8001699a:	70 28       	ld.w	r8,r8[0x8]
8001699c:	ee f9 ff f4 	ld.w	r9,r7[-12]
800169a0:	e5 a6 09 09 	cop	cp0,cr9,cr0,cr9,0x4c
800169a4:	12 9b       	mov	r11,r9
800169a6:	10 9c       	mov	r12,r8
800169a8:	f0 16 00 08 	mcall	r6[32]
800169ac:	18 98       	mov	r8,r12
800169ae:	10 9c       	mov	r12,r8
800169b0:	f0 16 00 02 	mcall	r6[8]
800169b4:	e0 68 d1 24 	mov	r8,53540
800169b8:	ea 18 28 cb 	orh	r8,0x28cb
800169bc:	e0 69 5b 96 	mov	r9,23446
800169c0:	ea 19 3f c8 	orh	r9,0x3fc8
800169c4:	f0 16 01 a9 	mcall	r6[1700]
800169c8:	14 98       	mov	r8,r10
800169ca:	16 99       	mov	r9,r11
800169cc:	30 0a       	mov	r10,0
800169ce:	fc 1b 3f f0 	movh	r11,0x3ff0
800169d2:	f0 16 00 11 	mcall	r6[68]
800169d6:	14 98       	mov	r8,r10
800169d8:	16 99       	mov	r9,r11
800169da:	10 9a       	mov	r10,r8
800169dc:	12 9b       	mov	r11,r9
800169de:	30 08       	mov	r8,0
800169e0:	e0 69 a5 40 	mov	r9,42304
800169e4:	ea 19 40 e5 	orh	r9,0x40e5
800169e8:	f0 16 00 03 	mcall	r6[12]
800169ec:	14 98       	mov	r8,r10
800169ee:	16 99       	mov	r9,r11
800169f0:	10 92       	mov	r2,r8
800169f2:	12 93       	mov	r3,r9
800169f4:	ec f8 00 48 	ld.w	r8,r6[72]
800169f8:	70 88       	ld.w	r8,r8[0x20]
800169fa:	10 9c       	mov	r12,r8
800169fc:	f0 16 00 02 	mcall	r6[8]
80016a00:	14 98       	mov	r8,r10
80016a02:	16 99       	mov	r9,r11
80016a04:	04 9a       	mov	r10,r2
80016a06:	06 9b       	mov	r11,r3
80016a08:	f0 16 00 05 	mcall	r6[20]
80016a0c:	14 98       	mov	r8,r10
80016a0e:	16 99       	mov	r9,r11
80016a10:	10 9a       	mov	r10,r8
80016a12:	12 9b       	mov	r11,r9
80016a14:	f0 16 00 09 	mcall	r6[36]
80016a18:	18 98       	mov	r8,r12
80016a1a:	ef 48 ff c0 	st.w	r7[-64],r8
			
			for (i=0; i<2; i++) {
80016a1e:	30 08       	mov	r8,0
80016a20:	ef 48 ff bc 	st.w	r7[-68],r8
80016a24:	c1 68       	rjmp	80016a50 <get_pressure_data_slow+0x440>
				pressure_outputs.last_altitudes[i]=pressure_outputs.last_altitudes[i+1];
80016a26:	ee f9 ff bc 	ld.w	r9,r7[-68]
80016a2a:	ee f8 ff bc 	ld.w	r8,r7[-68]
80016a2e:	f0 ca ff ff 	sub	r10,r8,-1
80016a32:	ec f8 00 48 	ld.w	r8,r6[72]
80016a36:	2f ca       	sub	r10,-4
80016a38:	f0 0a 03 2a 	ld.w	r10,r8[r10<<0x2]
80016a3c:	ec f8 00 48 	ld.w	r8,r6[72]
80016a40:	2f c9       	sub	r9,-4
80016a42:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
			pressure_outputs.pressure=p;
		
			vertical_speed=pressure_outputs.altitude;
			altitude=44330.0 * (1.0 - pow(pressure_outputs.pressure /sealevelPressure,0.190295)) + pressure_outputs.altitude_offset;
			
			for (i=0; i<2; i++) {
80016a46:	ee f8 ff bc 	ld.w	r8,r7[-68]
80016a4a:	2f f8       	sub	r8,-1
80016a4c:	ef 48 ff bc 	st.w	r7[-68],r8
80016a50:	ee f8 ff bc 	ld.w	r8,r7[-68]
80016a54:	58 18       	cp.w	r8,1
80016a56:	fe 9a ff e8 	brle	80016a26 <get_pressure_data_slow+0x416>
				pressure_outputs.last_altitudes[i]=pressure_outputs.last_altitudes[i+1];
			}
			pressure_outputs.last_altitudes[2]=altitude;
80016a5a:	ec f8 00 48 	ld.w	r8,r6[72]
80016a5e:	ee f9 ff c0 	ld.w	r9,r7[-64]
80016a62:	91 69       	st.w	r8[0x18],r9
			altitude=median_filter_3x(pressure_outputs.last_altitudes[0], pressure_outputs.last_altitudes[1], pressure_outputs.last_altitudes[2]);
80016a64:	ec f8 00 48 	ld.w	r8,r6[72]
80016a68:	70 6a       	ld.w	r10,r8[0x18]
80016a6a:	ec f8 00 48 	ld.w	r8,r6[72]
80016a6e:	70 59       	ld.w	r9,r8[0x14]
80016a70:	ec f8 00 48 	ld.w	r8,r6[72]
80016a74:	70 48       	ld.w	r8,r8[0x10]
80016a76:	12 9b       	mov	r11,r9
80016a78:	10 9c       	mov	r12,r8
80016a7a:	fe b0 fb d8 	rcall	8001622a <median_filter_3x>
80016a7e:	18 98       	mov	r8,r12
80016a80:	ef 48 ff c0 	st.w	r7[-64],r8
			
			if (f_abs(altitude-pressure_outputs.altitude)<15.0) {
80016a84:	ec f8 00 48 	ld.w	r8,r6[72]
80016a88:	70 78       	ld.w	r8,r8[0x1c]
80016a8a:	ee f9 ff c0 	ld.w	r9,r7[-64]
80016a8e:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80016a92:	10 9c       	mov	r12,r8
80016a94:	fe b0 fb ae 	rcall	800161f0 <f_abs>
80016a98:	18 9a       	mov	r10,r12
80016a9a:	30 18       	mov	r8,1
80016a9c:	fc 19 41 70 	movh	r9,0x4170
80016aa0:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80016aa4:	e0 8c 00 03 	brvs	80016aaa <get_pressure_data_slow+0x49a>
80016aa8:	c0 25       	brlt	80016aac <get_pressure_data_slow+0x49c>
80016aaa:	30 08       	mov	r8,0
80016aac:	5c 58       	castu.b	r8
80016aae:	c3 40       	breq	80016b16 <get_pressure_data_slow+0x506>
				pressure_outputs.altitude = (BARO_ALT_LPF*pressure_outputs.altitude) + (1.0-BARO_ALT_LPF)*altitude;
80016ab0:	ec f8 00 48 	ld.w	r8,r6[72]
80016ab4:	70 78       	ld.w	r8,r8[0x1c]
80016ab6:	10 9c       	mov	r12,r8
80016ab8:	f0 16 00 02 	mcall	r6[8]
80016abc:	e0 68 66 66 	mov	r8,26214
80016ac0:	ea 18 66 66 	orh	r8,0x6666
80016ac4:	e0 69 66 66 	mov	r9,26214
80016ac8:	ea 19 3f ee 	orh	r9,0x3fee
80016acc:	f0 16 00 03 	mcall	r6[12]
80016ad0:	14 98       	mov	r8,r10
80016ad2:	16 99       	mov	r9,r11
80016ad4:	10 92       	mov	r2,r8
80016ad6:	12 93       	mov	r3,r9
80016ad8:	ee fc ff c0 	ld.w	r12,r7[-64]
80016adc:	f0 16 00 02 	mcall	r6[8]
80016ae0:	e0 68 99 a0 	mov	r8,39328
80016ae4:	ea 18 99 99 	orh	r8,0x9999
80016ae8:	e0 69 99 99 	mov	r9,39321
80016aec:	ea 19 3f a9 	orh	r9,0x3fa9
80016af0:	f0 16 00 03 	mcall	r6[12]
80016af4:	14 98       	mov	r8,r10
80016af6:	16 99       	mov	r9,r11
80016af8:	04 9a       	mov	r10,r2
80016afa:	06 9b       	mov	r11,r3
80016afc:	f0 16 00 05 	mcall	r6[20]
80016b00:	14 98       	mov	r8,r10
80016b02:	16 99       	mov	r9,r11
80016b04:	10 9a       	mov	r10,r8
80016b06:	12 9b       	mov	r11,r9
80016b08:	f0 16 00 09 	mcall	r6[36]
80016b0c:	18 99       	mov	r9,r12
80016b0e:	ec f8 00 48 	ld.w	r8,r6[72]
80016b12:	91 79       	st.w	r8[0x1c],r9
80016b14:	c0 68       	rjmp	80016b20 <get_pressure_data_slow+0x510>
			}else {
				pressure_outputs.altitude = altitude;
80016b16:	ec f8 00 48 	ld.w	r8,r6[72]
80016b1a:	ee f9 ff c0 	ld.w	r9,r7[-64]
80016b1e:	91 79       	st.w	r8[0x1c],r9
			}
			
			dt = (get_micros()-pressure_outputs.last_update)/1000000.0;
80016b20:	f0 16 00 27 	mcall	r6[156]
80016b24:	18 99       	mov	r9,r12
80016b26:	ec f8 00 48 	ld.w	r8,r6[72]
80016b2a:	70 a8       	ld.w	r8,r8[0x28]
80016b2c:	f2 08 01 08 	sub	r8,r9,r8
80016b30:	10 9c       	mov	r12,r8
80016b32:	f0 16 00 4e 	mcall	r6[312]
80016b36:	30 08       	mov	r8,0
80016b38:	e0 69 84 80 	mov	r9,33920
80016b3c:	ea 19 41 2e 	orh	r9,0x412e
80016b40:	f0 16 00 0c 	mcall	r6[48]
80016b44:	14 98       	mov	r8,r10
80016b46:	16 99       	mov	r9,r11
80016b48:	10 9a       	mov	r10,r8
80016b4a:	12 9b       	mov	r11,r9
80016b4c:	f0 16 00 09 	mcall	r6[36]
80016b50:	18 98       	mov	r8,r12
80016b52:	ef 48 ff f8 	st.w	r7[-8],r8
			pressure_outputs.dt=dt;
80016b56:	ec f8 00 48 	ld.w	r8,r6[72]
80016b5a:	ee f9 ff f8 	ld.w	r9,r7[-8]
80016b5e:	91 d9       	st.w	r8[0x34],r9
			vertical_speed=-(pressure_outputs.altitude-vertical_speed)/dt;
80016b60:	ec f8 00 48 	ld.w	r8,r6[72]
80016b64:	70 79       	ld.w	r9,r8[0x1c]
80016b66:	ee f8 ff c4 	ld.w	r8,r7[-60]
80016b6a:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80016b6e:	ee 18 80 00 	eorh	r8,0x8000
80016b72:	ee fb ff f8 	ld.w	r11,r7[-8]
80016b76:	10 9c       	mov	r12,r8
80016b78:	f0 16 00 08 	mcall	r6[32]
80016b7c:	18 98       	mov	r8,r12
80016b7e:	ef 48 ff c4 	st.w	r7[-60],r8
			
			if (abs(vertical_speed)>20) vertical_speed=0.0;
80016b82:	ee f8 ff c4 	ld.w	r8,r7[-60]
80016b86:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80016b8a:	ef 48 ff fc 	st.w	r7[-4],r8
80016b8e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80016b92:	5c 48       	abs	r8
80016b94:	ef 48 ff fc 	st.w	r7[-4],r8
80016b98:	ee f8 ff fc 	ld.w	r8,r7[-4]
80016b9c:	59 48       	cp.w	r8,20
80016b9e:	e0 8a 00 05 	brle	80016ba8 <get_pressure_data_slow+0x598>
80016ba2:	30 08       	mov	r8,0
80016ba4:	ef 48 ff c4 	st.w	r7[-60],r8
			pressure_outputs.vario_vz=(VARIO_LPF)*pressure_outputs.vario_vz + (1.0-VARIO_LPF) * (vertical_speed);
80016ba8:	ec f8 00 48 	ld.w	r8,r6[72]
80016bac:	70 98       	ld.w	r8,r8[0x24]
80016bae:	10 9c       	mov	r12,r8
80016bb0:	f0 16 00 02 	mcall	r6[8]
80016bb4:	e0 68 66 66 	mov	r8,26214
80016bb8:	ea 18 66 66 	orh	r8,0x6666
80016bbc:	e0 69 66 66 	mov	r9,26214
80016bc0:	ea 19 3f ee 	orh	r9,0x3fee
80016bc4:	f0 16 00 03 	mcall	r6[12]
80016bc8:	14 98       	mov	r8,r10
80016bca:	16 99       	mov	r9,r11
80016bcc:	10 92       	mov	r2,r8
80016bce:	12 93       	mov	r3,r9
80016bd0:	ee fc ff c4 	ld.w	r12,r7[-60]
80016bd4:	f0 16 00 02 	mcall	r6[8]
80016bd8:	e0 68 99 a0 	mov	r8,39328
80016bdc:	ea 18 99 99 	orh	r8,0x9999
80016be0:	e0 69 99 99 	mov	r9,39321
80016be4:	ea 19 3f a9 	orh	r9,0x3fa9
80016be8:	f0 16 00 03 	mcall	r6[12]
80016bec:	14 98       	mov	r8,r10
80016bee:	16 99       	mov	r9,r11
80016bf0:	04 9a       	mov	r10,r2
80016bf2:	06 9b       	mov	r11,r3
80016bf4:	f0 16 00 05 	mcall	r6[20]
80016bf8:	14 98       	mov	r8,r10
80016bfa:	16 99       	mov	r9,r11
80016bfc:	10 9a       	mov	r10,r8
80016bfe:	12 9b       	mov	r11,r9
80016c00:	f0 16 00 09 	mcall	r6[36]
80016c04:	18 99       	mov	r9,r12
80016c06:	ec f8 00 48 	ld.w	r8,r6[72]
80016c0a:	91 99       	st.w	r8[0x24],r9
			
			pressure_outputs.last_update=get_micros();
80016c0c:	f0 16 00 27 	mcall	r6[156]
80016c10:	18 99       	mov	r9,r12
80016c12:	ec f8 00 48 	ld.w	r8,r6[72]
80016c16:	91 a9       	st.w	r8[0x28],r9
			pressure_outputs.state=IDLE;
80016c18:	ec f8 00 48 	ld.w	r8,r6[72]
80016c1c:	30 09       	mov	r9,0
80016c1e:	91 c9       	st.w	r8[0x30],r9
			break;
			
		}
		pressure_outputs.last_state_update=get_micros();
80016c20:	f0 16 00 27 	mcall	r6[156]
80016c24:	18 99       	mov	r9,r12
80016c26:	ec f8 00 48 	ld.w	r8,r6[72]
80016c2a:	91 b9       	st.w	r8[0x2c],r9
		pressure_outputs.altitude_offset = offset;
80016c2c:	ec f8 00 48 	ld.w	r8,r6[72]
80016c30:	ee f9 ff b0 	ld.w	r9,r7[-80]
80016c34:	91 89       	st.w	r8[0x20],r9
		
		return &pressure_outputs;
80016c36:	ec f8 00 48 	ld.w	r8,r6[72]
}
80016c3a:	10 9c       	mov	r12,r8
80016c3c:	2e cd       	sub	sp,-80
80016c3e:	e3 cd 80 cc 	ldm	sp++,r2-r3,r6-r7,pc
80016c42:	00 00       	add	r0,r0
80016c44:	80 01       	ld.sh	r1,r0[0x0]
80016c46:	64 a0       	ld.w	r0,r2[0x28]

80016c48 <newValidBarometer>:

bool newValidBarometer(uint32_t *timePrevBarometer)
{
80016c48:	eb cd 40 c0 	pushm	r6-r7,lr
80016c4c:	1a 97       	mov	r7,sp
80016c4e:	20 1d       	sub	sp,4
80016c50:	48 d6       	lddpc	r6,80016c84 <newValidBarometer+0x3c>
80016c52:	1e 26       	rsub	r6,pc
80016c54:	ef 4c ff fc 	st.w	r7[-4],r12
	if (*timePrevBarometer < pressure_outputs.last_update) 
80016c58:	ee f8 ff fc 	ld.w	r8,r7[-4]
80016c5c:	70 09       	ld.w	r9,r8[0x0]
80016c5e:	ec f8 00 48 	ld.w	r8,r6[72]
80016c62:	70 a8       	ld.w	r8,r8[0x28]
80016c64:	10 39       	cp.w	r9,r8
80016c66:	c0 92       	brcc	80016c78 <newValidBarometer+0x30>
	{
		*timePrevBarometer = pressure_outputs.last_update;
80016c68:	ec f8 00 48 	ld.w	r8,r6[72]
80016c6c:	70 a9       	ld.w	r9,r8[0x28]
80016c6e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80016c72:	91 09       	st.w	r8[0x0],r9
		return true;
80016c74:	30 18       	mov	r8,1
80016c76:	c0 28       	rjmp	80016c7a <newValidBarometer+0x32>
	}else{
		return false;
80016c78:	30 08       	mov	r8,0
	}
	
80016c7a:	10 9c       	mov	r12,r8
80016c7c:	2f fd       	sub	sp,-4
80016c7e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80016c82:	00 00       	add	r0,r0
80016c84:	80 01       	ld.sh	r1,r0[0x0]
80016c86:	6a d6       	ld.w	r6,r5[0x34]

80016c88 <init_hmc5883_slow>:
static volatile compass_data compass_outputs;




void init_hmc5883_slow() {
80016c88:	eb cd 40 c0 	pushm	r6-r7,lr
80016c8c:	1a 97       	mov	r7,sp
80016c8e:	48 a6       	lddpc	r6,80016cb4 <init_hmc5883_slow+0x2c>
80016c90:	1e 26       	rsub	r6,pc
	ConfRegA,
	(HMC_SAMPLE_AVG)<<5 | (HMC_RATE) <<2 | HMC_MODE,
	(HMC_RANGE) <<5,
	(HMC_MODE)
	};
	twim_master_init(&AVR32_TWIM0, &twi_opt);
80016c92:	ec fb 08 a8 	ld.w	r11,r6[2216]
80016c96:	fe 7c 38 00 	mov	r12,-51200
80016c9a:	f0 16 00 6a 	mcall	r6[424]
	twim_write(&AVR32_TWIM0, (uint8_t*)&compass_default_configuration, 4, HMC5883_SLAVE_ADDRESS, false);
80016c9e:	30 08       	mov	r8,0
80016ca0:	31 e9       	mov	r9,30
80016ca2:	30 4a       	mov	r10,4
80016ca4:	ec fb 08 a4 	ld.w	r11,r6[2212]
80016ca8:	fe 7c 38 00 	mov	r12,-51200
80016cac:	f0 16 00 39 	mcall	r6[228]
}
80016cb0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80016cb4:	80 01       	ld.sh	r1,r0[0x0]
80016cb6:	6b 14       	ld.w	r4,r5[0x44]

80016cb8 <get_compass_data_slow>:


compass_data* get_compass_data_slow() {
80016cb8:	eb cd 40 c0 	pushm	r6-r7,lr
80016cbc:	1a 97       	mov	r7,sp
80016cbe:	20 2d       	sub	sp,8
80016cc0:	49 e6       	lddpc	r6,80016d38 <get_compass_data_slow+0x80>
80016cc2:	1e 26       	rsub	r6,pc
	int i;
	uint8_t start_address=DataRegBegin;
80016cc4:	30 38       	mov	r8,3
80016cc6:	ef 68 ff ff 	st.b	r7[-1],r8
	//twim_write(&AVR32_TWIM0, (uint8_t*) &start_address, 1, HMC5883_SLAVE_ADDRESS, false);
	//twim_read(&AVR32_TWIM0, (uint8_t*)&(compass_outputs.raw_data), 6, HMC5883_SLAVE_ADDRESS, false);
	
	for (i=0; i<3; i++) {
80016cca:	30 08       	mov	r8,0
80016ccc:	ef 48 ff f8 	st.w	r7[-8],r8
80016cd0:	c2 98       	rjmp	80016d22 <get_compass_data_slow+0x6a>
		compass_outputs.axes[i]=(int16_t)(compass_outputs.raw_data[2*i]<<8)+(int16_t)(compass_outputs.raw_data[2*i+1]);
80016cd2:	ee fb ff f8 	ld.w	r11,r7[-8]
80016cd6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80016cda:	a1 78       	lsl	r8,0x1
80016cdc:	ec f9 02 5c 	ld.w	r9,r6[604]
80016ce0:	f2 08 07 08 	ld.ub	r8,r9[r8]
80016ce4:	5c 58       	castu.b	r8
80016ce6:	a9 68       	lsl	r8,0x8
80016ce8:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
80016cec:	ee f8 ff f8 	ld.w	r8,r7[-8]
80016cf0:	a1 78       	lsl	r8,0x1
80016cf2:	2f f8       	sub	r8,-1
80016cf4:	ec fa 02 5c 	ld.w	r10,r6[604]
80016cf8:	f4 08 07 08 	ld.ub	r8,r10[r8]
80016cfc:	5c 58       	castu.b	r8
80016cfe:	f2 08 00 08 	add	r8,r9,r8
80016d02:	5c 88       	casts.h	r8
80016d04:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
80016d08:	ec fa 02 5c 	ld.w	r10,r6[604]
80016d0c:	f6 c8 ff fe 	sub	r8,r11,-2
80016d10:	a1 78       	lsl	r8,0x1
80016d12:	f4 08 00 08 	add	r8,r10,r8
80016d16:	b0 19       	st.h	r8[0x2],r9
	int i;
	uint8_t start_address=DataRegBegin;
	//twim_write(&AVR32_TWIM0, (uint8_t*) &start_address, 1, HMC5883_SLAVE_ADDRESS, false);
	//twim_read(&AVR32_TWIM0, (uint8_t*)&(compass_outputs.raw_data), 6, HMC5883_SLAVE_ADDRESS, false);
	
	for (i=0; i<3; i++) {
80016d18:	ee f8 ff f8 	ld.w	r8,r7[-8]
80016d1c:	2f f8       	sub	r8,-1
80016d1e:	ef 48 ff f8 	st.w	r7[-8],r8
80016d22:	ee f8 ff f8 	ld.w	r8,r7[-8]
80016d26:	58 28       	cp.w	r8,2
80016d28:	fe 9a ff d5 	brle	80016cd2 <get_compass_data_slow+0x1a>
		compass_outputs.axes[i]=(int16_t)(compass_outputs.raw_data[2*i]<<8)+(int16_t)(compass_outputs.raw_data[2*i+1]);
	}
	return &compass_outputs;
80016d2c:	ec f8 02 5c 	ld.w	r8,r6[604]
80016d30:	10 9c       	mov	r12,r8
80016d32:	2f ed       	sub	sp,-8
80016d34:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80016d38:	80 01       	ld.sh	r1,r0[0x0]
80016d3a:	6b 46       	ld.w	r6,r5[0x50]

80016d3c <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
80016d3c:	eb cd 40 c0 	pushm	r6-r7,lr
80016d40:	1a 97       	mov	r7,sp
80016d42:	20 6d       	sub	sp,24
80016d44:	49 e6       	lddpc	r6,80016dbc <interpolate+0x80>
80016d46:	1e 26       	rsub	r6,pc
80016d48:	ef 4c ff f8 	st.w	r7[-8],r12
80016d4c:	ef 4b ff f4 	st.w	r7[-12],r11
80016d50:	ef 4a ff f0 	st.w	r7[-16],r10
80016d54:	ef 49 ff ec 	st.w	r7[-20],r9
80016d58:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
80016d5c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80016d60:	ee f8 ff f0 	ld.w	r8,r7[-16]
80016d64:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
80016d68:	c0 41       	brne	80016d70 <interpolate+0x34>
	{
		return y1;
80016d6a:	ee f8 ff ec 	ld.w	r8,r7[-20]
80016d6e:	c2 38       	rjmp	80016db4 <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
80016d70:	ee f9 ff e8 	ld.w	r9,r7[-24]
80016d74:	ee f8 ff ec 	ld.w	r8,r7[-20]
80016d78:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80016d7c:	ee fa ff f8 	ld.w	r10,r7[-8]
80016d80:	ee f8 ff f4 	ld.w	r8,r7[-12]
80016d84:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80016d88:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80016d8c:	ee fa ff f0 	ld.w	r10,r7[-16]
80016d90:	ee f9 ff f4 	ld.w	r9,r7[-12]
80016d94:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80016d98:	12 9b       	mov	r11,r9
80016d9a:	10 9c       	mov	r12,r8
80016d9c:	f0 16 00 08 	mcall	r6[32]
80016da0:	18 98       	mov	r8,r12
80016da2:	10 99       	mov	r9,r8
80016da4:	ee f8 ff ec 	ld.w	r8,r7[-20]
80016da8:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80016dac:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
80016db0:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
80016db4:	10 9c       	mov	r12,r8
80016db6:	2f ad       	sub	sp,-24
80016db8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80016dbc:	80 01       	ld.sh	r1,r0[0x0]
80016dbe:	6b ca       	ld.w	r10,r5[0x70]

80016dc0 <pdca_int_handler_dac>:
 U8 dac_channel_audio = DAC_AUDIO_CHANNEL;


__attribute__((__interrupt__))
static void pdca_int_handler_dac(void)
{
80016dc0:	eb cd 40 c0 	pushm	r6-r7,lr
80016dc4:	1a 97       	mov	r7,sp
80016dc6:	49 a6       	lddpc	r6,80016e2c <pdca_int_handler_dac+0x6c>
80016dc8:	1e 26       	rsub	r6,pc
	AVR32_PDCA.channel[PDCA_CHANNEL_DAC].isr;
80016dca:	fc 78 00 00 	mov	r8,-196608
80016dce:	f0 f8 01 2c 	ld.w	r8,r8[300]
	if (autoplay==0) {
80016dd2:	ec f8 04 ac 	ld.w	r8,r6[1196]
80016dd6:	70 08       	ld.w	r8,r8[0x0]
80016dd8:	58 08       	cp.w	r8,0
80016dda:	c0 81       	brne	80016dea <pdca_int_handler_dac+0x2a>
		pdca_disable(PDCA_CHANNEL_DAC);
80016ddc:	30 4c       	mov	r12,4
80016dde:	f0 16 00 89 	mcall	r6[548]
	    pdca_disable_interrupt_transfer_complete(PDCA_CHANNEL_DAC);
80016de2:	30 4c       	mov	r12,4
80016de4:	f0 16 00 ca 	mcall	r6[808]
80016de8:	c1 f8       	rjmp	80016e26 <pdca_int_handler_dac+0x66>

	}	else {	
       // Set PDCA channel reload values with address where data to load are stored, and size of the data block to load.
       pdca_reload_channel(PDCA_CHANNEL_DAC, (char *)buffer+2*from, to-from);
80016dea:	ec f8 02 58 	ld.w	r8,r6[600]
80016dee:	90 08       	ld.sh	r8,r8[0x0]
80016df0:	5c 88       	casts.h	r8
80016df2:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
80016df6:	ec f8 01 70 	ld.w	r8,r6[368]
80016dfa:	90 08       	ld.sh	r8,r8[0x0]
80016dfc:	5c 88       	casts.h	r8
80016dfe:	5c 78       	castu.h	r8
80016e00:	f2 08 01 08 	sub	r8,r9,r8
80016e04:	10 99       	mov	r9,r8
80016e06:	ec f8 03 3c 	ld.w	r8,r6[828]
80016e0a:	70 0a       	ld.w	r10,r8[0x0]
80016e0c:	ec f8 01 70 	ld.w	r8,r6[368]
80016e10:	90 08       	ld.sh	r8,r8[0x0]
80016e12:	5c 88       	casts.h	r8
80016e14:	5c 78       	castu.h	r8
80016e16:	a1 78       	lsl	r8,0x1
80016e18:	f4 08 00 08 	add	r8,r10,r8
80016e1c:	12 9a       	mov	r10,r9
80016e1e:	10 9b       	mov	r11,r8
80016e20:	30 4c       	mov	r12,4
80016e22:	f0 16 00 f9 	mcall	r6[996]
	}	   
		
}
80016e26:	e3 cd 40 c0 	ldm	sp++,r6-r7,lr
80016e2a:	d6 03       	rete
80016e2c:	80 01       	ld.sh	r1,r0[0x0]
80016e2e:	6c 4c       	ld.w	r12,r6[0x10]

80016e30 <init_pevc>:


void init_pevc(void)
{
80016e30:	eb cd 40 c0 	pushm	r6-r7,lr
80016e34:	1a 97       	mov	r7,sp
80016e36:	48 c6       	lddpc	r6,80016e64 <init_pevc+0x34>
80016e38:	1e 26       	rsub	r6,pc
  
  // PEVC Init.
  // Configuring the PEVC path: input is the generic clock, each clock cycle, the PEVC trigger a new DAC sample
  // The sinus samples are sent through the PDCA.  
  // a change on PEVC input pin0 event will trigger the PDCA channel 0/1 transfer
  pevc_channel_configure(ppevc,     AVR32_PEVC_ID_USER_DACIFB0_CHA, 
80016e3a:	ec f8 03 78 	ld.w	r8,r6[888]
80016e3e:	70 08       	ld.w	r8,r8[0x0]
80016e40:	ec f9 08 a0 	ld.w	r9,r6[2208]
80016e44:	31 0a       	mov	r10,16
80016e46:	30 2b       	mov	r11,2
80016e48:	10 9c       	mov	r12,r8
80016e4a:	f0 16 01 9e 	mcall	r6[1656]
                                    AVR32_PEVC_ID_GEN_GCLK_0, 
                                    &PEVC_EVS_OPTIONS);
									  
  // Enable the PEVC channel 0.
  pevc_channels_enable(ppevc, 1<<AVR32_PEVC_ID_USER_DACIFB0_CHA);
80016e4e:	ec f8 03 78 	ld.w	r8,r6[888]
80016e52:	70 08       	ld.w	r8,r8[0x0]
80016e54:	30 4a       	mov	r10,4
80016e56:	30 0b       	mov	r11,0
80016e58:	10 9c       	mov	r12,r8
80016e5a:	f0 16 01 38 	mcall	r6[1248]
}
80016e5e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80016e62:	00 00       	add	r0,r0
80016e64:	80 01       	ld.sh	r1,r0[0x0]
80016e66:	6c bc       	ld.w	r12,r6[0x2c]

80016e68 <init_gclk>:

void init_gclk(void)
{
80016e68:	eb cd 40 c0 	pushm	r6-r7,lr
80016e6c:	1a 97       	mov	r7,sp
80016e6e:	48 76       	lddpc	r6,80016e88 <init_gclk+0x20>
80016e70:	1e 26       	rsub	r6,pc
  // Setup Sampling Rate
 
  // Setup the generic clock for EVENT
  scif_gc_setup(AVR32_SCIF_GCLK_GCLK2_EVENT, 
80016e72:	30 a9       	mov	r9,10
80016e74:	30 1a       	mov	r10,1
80016e76:	30 0b       	mov	r11,0
80016e78:	30 7c       	mov	r12,7
80016e7a:	f0 16 01 f8 	mcall	r6[2016]
                SCIF_GCCTRL_SLOWCLOCK, 
                AVR32_SCIF_GC_DIV_CLOCK, 
                DAC_SAMPLE_CLOCK_DIVIDER);  
  // Now enable the generic clock
  scif_gc_enable(AVR32_SCIF_GCLK_GCLK2_EVENT);
80016e7e:	30 7c       	mov	r12,7
80016e80:	f0 16 01 ee 	mcall	r6[1976]
}
80016e84:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80016e88:	80 01       	ld.sh	r1,r0[0x0]
80016e8a:	6c f4       	ld.w	r4,r6[0x3c]
80016e8c:	65 72       	ld.w	r2,r2[0x5c]
80016e8e:	72 6f       	ld.w	pc,r9[0x18]
80016e90:	72 20       	ld.w	r0,r9[0x8]
80016e92:	63 6f       	ld.w	pc,r1[0x58]
80016e94:	6e 66       	ld.w	r6,r7[0x18]
80016e96:	69 67       	ld.w	r7,r4[0x58]
80016e98:	75 72       	ld.w	r2,r10[0x5c]
80016e9a:	69 6e       	ld.w	lr,r4[0x58]
80016e9c:	67 20       	ld.w	r0,r3[0x48]
80016e9e:	44 41       	lddsp	r1,sp[0x110]
80016ea0:	43 00       	lddsp	r0,sp[0xc0]
80016ea2:	00 00       	add	r0,r0
80016ea4:	65 72       	ld.w	r2,r2[0x5c]
80016ea6:	72 6f       	ld.w	pc,r9[0x18]
80016ea8:	72 20       	ld.w	r0,r9[0x8]
80016eaa:	63 6f       	ld.w	pc,r1[0x58]
80016eac:	6e 66       	ld.w	r6,r7[0x18]
80016eae:	69 67       	ld.w	r7,r4[0x58]
80016eb0:	75 72       	ld.w	r2,r10[0x5c]
80016eb2:	69 6e       	ld.w	lr,r4[0x58]
80016eb4:	67 20       	ld.w	r0,r3[0x48]
80016eb6:	44 41       	lddsp	r1,sp[0x110]
80016eb8:	43 20       	lddsp	r0,sp[0xc8]
80016eba:	63 68       	ld.w	r8,r1[0x58]
80016ebc:	61 6e       	ld.w	lr,r0[0x58]
80016ebe:	6e 65       	ld.w	r5,r7[0x18]
80016ec0:	6c 00       	ld.w	r0,r6[0x0]

80016ec2 <Init_DAC>:



void Init_DAC(int trigger_mode) {
80016ec2:	eb cd 40 c0 	pushm	r6-r7,lr
80016ec6:	1a 97       	mov	r7,sp
80016ec8:	20 6d       	sub	sp,24
80016eca:	4b 36       	lddpc	r6,80016f94 <Init_DAC+0xd2>
80016ecc:	1e 26       	rsub	r6,pc
80016ece:	ef 4c ff e8 	st.w	r7[-24],r12
                            .low_power                  = false,                          // Low Power Mode     
                            .dual                       = false,                          // Dual Mode
                            .prescaler_clock_hz         = DAC_PRESCALER_CLOCK,             // Prescaler Clock (Should be 500Khz)             
							.offset_calibration_value   = 0,
							.gain_calibration_value     = 1                 
};
80016ed2:	ec f8 08 9c 	ld.w	r8,r6[2204]
80016ed6:	ee ca 00 0c 	sub	r10,r7,12
80016eda:	10 9b       	mov	r11,r8
80016edc:	f6 e8 00 00 	ld.d	r8,r11[0]
80016ee0:	f4 e9 00 00 	st.d	r10[0],r8
80016ee4:	76 28       	ld.w	r8,r11[0x8]
80016ee6:	95 28       	st.w	r10[0x8],r8
                                                .auto_refresh_mode    = true,                       // Auto Refresh Mode 
                                                .trigger_mode         = trigger_mode,               // Trigger selection
                                                .left_adjustment      = false,                      // Right Adjustment
                                                .data_shift           = 0,                          // Number of Data Shift 
                                                .data_round_enable    = false                       // Data Rouding Mode                                              };
};
80016ee8:	ee f8 ff e8 	ld.w	r8,r7[-24]
80016eec:	5c 58       	castu.b	r8
80016eee:	30 19       	mov	r9,1
80016ef0:	ef 69 ff ef 	st.b	r7[-17],r9
80016ef4:	ef 68 ff f0 	st.b	r7[-16],r8
80016ef8:	30 08       	mov	r8,0
80016efa:	ef 68 ff f1 	st.b	r7[-15],r8
80016efe:	30 08       	mov	r8,0
80016f00:	ef 68 ff f2 	st.b	r7[-14],r8
80016f04:	30 08       	mov	r8,0
80016f06:	ef 68 ff f3 	st.b	r7[-13],r8

    // Assign and enable GPIO pins to the DAC function.
  gpio_enable_module(DACIFB_GPIO_MAP, sizeof(DACIFB_GPIO_MAP) / sizeof(DACIFB_GPIO_MAP[0]));
80016f0a:	30 4b       	mov	r11,4
80016f0c:	ec fc 08 98 	ld.w	r12,r6[2200]
80016f10:	f0 16 00 88 	mcall	r6[544]

  // Get DACIFB Factory Configuration
  //dacifb_get_calibration_data(dacifb, &dacifb_opt, DAC_AUDIO_INSTANCE);
                              
  // configure DACIFB
  if (dacifb_configure(dacifb,
80016f14:	ec f8 02 3c 	ld.w	r8,r6[572]
80016f18:	70 08       	ld.w	r8,r8[0x0]
80016f1a:	ee c9 00 0c 	sub	r9,r7,12
80016f1e:	e0 6a 24 00 	mov	r10,9216
80016f22:	ea 1a 00 f4 	orh	r10,0xf4
80016f26:	12 9b       	mov	r11,r9
80016f28:	10 9c       	mov	r12,r8
80016f2a:	f0 16 01 6b 	mcall	r6[1452]
80016f2e:	18 98       	mov	r8,r12
80016f30:	58 08       	cp.w	r8,0
80016f32:	c0 61       	brne	80016f3e <Init_DAC+0x7c>
                   &dacifb_opt,
                   FOSC0) ==0) {
				dbg_print("error configuring DAC");
80016f34:	fe cc 00 a8 	sub	r12,pc,168
80016f38:	f0 16 00 01 	mcall	r6[4]
				while (1);
80016f3c:	c0 08       	rjmp	80016f3c <Init_DAC+0x7a>
  }
  
  // Enable the DACIFB channels.

  // configure channel DACIFB
  if (dacifb_configure_channel(dacifb,
80016f3e:	ec f8 03 84 	ld.w	r8,r6[900]
80016f42:	11 88       	ld.ub	r8,r8[0x0]
80016f44:	10 9b       	mov	r11,r8
80016f46:	ec f8 02 3c 	ld.w	r8,r6[572]
80016f4a:	70 08       	ld.w	r8,r8[0x0]
80016f4c:	ee ca 00 11 	sub	r10,r7,17
80016f50:	e0 69 4b 40 	mov	r9,19264
80016f54:	ea 19 00 4c 	orh	r9,0x4c
80016f58:	10 9c       	mov	r12,r8
80016f5a:	f0 16 01 ac 	mcall	r6[1712]
80016f5e:	18 98       	mov	r8,r12
80016f60:	58 08       	cp.w	r8,0
80016f62:	c0 61       	brne	80016f6e <Init_DAC+0xac>
                           dac_channel_audio,
                           &dacifb_channel_opt,
                           DAC_PRESCALER_CLOCK) ==0) {
				dbg_print("error configuring DAC channel");
80016f64:	fe cc 00 c0 	sub	r12,pc,192
80016f68:	f0 16 00 01 	mcall	r6[4]
				while (1);
80016f6c:	c0 08       	rjmp	80016f6c <Init_DAC+0xaa>
  }
  
  dacifb_start_channel(dacifb,
80016f6e:	ec f8 03 84 	ld.w	r8,r6[900]
80016f72:	11 88       	ld.ub	r8,r8[0x0]
80016f74:	10 99       	mov	r9,r8
80016f76:	ec f8 02 3c 	ld.w	r8,r6[572]
80016f7a:	70 08       	ld.w	r8,r8[0x0]
80016f7c:	e0 6a 24 00 	mov	r10,9216
80016f80:	ea 1a 00 f4 	orh	r10,0xf4
80016f84:	12 9b       	mov	r11,r9
80016f86:	10 9c       	mov	r12,r8
80016f88:	f0 16 01 44 	mcall	r6[1296]
                       dac_channel_audio,
                       FOSC0);


}
80016f8c:	2f ad       	sub	sp,-24
80016f8e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80016f92:	00 00       	add	r0,r0
80016f94:	80 01       	ld.sh	r1,r0[0x0]
80016f96:	6d 50       	ld.w	r0,r6[0x54]

80016f98 <DAC_load_buffer>:

void DAC_load_buffer(uint16_t* samples, int from_sample, int to_sample, int repeat) {
80016f98:	eb cd 40 c0 	pushm	r6-r7,lr
80016f9c:	1a 97       	mov	r7,sp
80016f9e:	20 4d       	sub	sp,16
80016fa0:	4a a6       	lddpc	r6,80017048 <DAC_load_buffer+0xb0>
80016fa2:	1e 26       	rsub	r6,pc
80016fa4:	ef 4c ff fc 	st.w	r7[-4],r12
80016fa8:	ef 4b ff f8 	st.w	r7[-8],r11
80016fac:	ef 4a ff f4 	st.w	r7[-12],r10
80016fb0:	ef 49 ff f0 	st.w	r7[-16],r9
  // PDCA channel options
  buffer=samples;
80016fb4:	ee f9 ff fc 	ld.w	r9,r7[-4]
80016fb8:	ec f8 03 3c 	ld.w	r8,r6[828]
80016fbc:	91 09       	st.w	r8[0x0],r9
  from=from_sample;
80016fbe:	ee f8 ff f8 	ld.w	r8,r7[-8]
80016fc2:	5c 88       	casts.h	r8
80016fc4:	ec f9 01 70 	ld.w	r9,r6[368]
80016fc8:	b2 08       	st.h	r9[0x0],r8
  to=to_sample;
80016fca:	ee f8 ff f4 	ld.w	r8,r7[-12]
80016fce:	5c 88       	casts.h	r8
80016fd0:	ec f9 02 58 	ld.w	r9,r6[600]
80016fd4:	b2 08       	st.h	r9[0x0],r8
    .size = 0,                         // transfer counter
    .r_addr = NULL,                                // next memory address
    .r_size = 0,                                   // next transfer counter
    .transfer_size = PDCA_TRANSFER_SIZE_HALF_WORD  // select size of the transfer      
  };
  PDCA_OPTIONS.addr=(char *)samples + 2*from;
80016fd6:	ec f8 01 70 	ld.w	r8,r6[368]
80016fda:	90 08       	ld.sh	r8,r8[0x0]
80016fdc:	5c 88       	casts.h	r8
80016fde:	5c 78       	castu.h	r8
80016fe0:	a1 78       	lsl	r8,0x1
80016fe2:	ee f9 ff fc 	ld.w	r9,r7[-4]
80016fe6:	10 09       	add	r9,r8
80016fe8:	ec f8 03 38 	ld.w	r8,r6[824]
80016fec:	91 09       	st.w	r8[0x0],r9
  PDCA_OPTIONS.size=to-from;
80016fee:	ec f8 02 58 	ld.w	r8,r6[600]
80016ff2:	90 08       	ld.sh	r8,r8[0x0]
80016ff4:	5c 88       	casts.h	r8
80016ff6:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
80016ffa:	ec f8 01 70 	ld.w	r8,r6[368]
80016ffe:	90 08       	ld.sh	r8,r8[0x0]
80017000:	5c 88       	casts.h	r8
80017002:	5c 78       	castu.h	r8
80017004:	f2 08 01 08 	sub	r8,r9,r8
80017008:	10 99       	mov	r9,r8
8001700a:	ec f8 03 38 	ld.w	r8,r6[824]
8001700e:	91 19       	st.w	r8[0x4],r9

  // Initialize Event Controller
  init_pevc();
80017010:	f0 16 01 cf 	mcall	r6[1852]
  // Initialize Generic Clock
  init_gclk();
80017014:	f0 16 01 c2 	mcall	r6[1800]

  // Init PDCA channel with the pdca_options.
  pdca_init_channel(PDCA_CHANNEL_DAC, &PDCA_OPTIONS); // init PDCA channel with options.
80017018:	ec fb 03 38 	ld.w	r11,r6[824]
8001701c:	30 4c       	mov	r12,4
8001701e:	f0 16 00 af 	mcall	r6[700]

  autoplay=repeat;
80017022:	ec f8 04 ac 	ld.w	r8,r6[1196]
80017026:	ee f9 ff f0 	ld.w	r9,r7[-16]
8001702a:	91 09       	st.w	r8[0x0],r9
  //if (repeat==1) {
	  // TODO: for some reason having this interrupt tends to crash occasionally
      INTC_register_interrupt( (__int_handler) &pdca_int_handler_dac, AVR32_PDCA_IRQ_4, AVR32_INTC_INT0);
8001702c:	30 0a       	mov	r10,0
8001702e:	e0 6b 00 80 	mov	r11,128
80017032:	fe cc 02 72 	sub	r12,pc,626
80017036:	f0 16 00 3c 	mcall	r6[240]
	  pdca_enable_interrupt_transfer_complete(PDCA_CHANNEL_DAC);
8001703a:	30 4c       	mov	r12,4
8001703c:	f0 16 01 03 	mcall	r6[1036]
  //}  
} 
80017040:	2f cd       	sub	sp,-16
80017042:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80017046:	00 00       	add	r0,r0
80017048:	80 01       	ld.sh	r1,r0[0x0]
8001704a:	6e 26       	ld.w	r6,r7[0x8]

8001704c <DAC_play>:

void DAC_play() {
8001704c:	eb cd 40 c0 	pushm	r6-r7,lr
80017050:	1a 97       	mov	r7,sp
80017052:	49 56       	lddpc	r6,800170a4 <DAC_play+0x58>
80017054:	1e 26       	rsub	r6,pc
	//Disable_global_interrupt();
	pdca_disable(PDCA_CHANNEL_DAC);
80017056:	30 4c       	mov	r12,4
80017058:	f0 16 00 89 	mcall	r6[548]
	pdca_reload_channel(PDCA_CHANNEL_DAC, (void *)buffer+2*from, to-from);
8001705c:	ec f8 02 58 	ld.w	r8,r6[600]
80017060:	90 08       	ld.sh	r8,r8[0x0]
80017062:	5c 88       	casts.h	r8
80017064:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
80017068:	ec f8 01 70 	ld.w	r8,r6[368]
8001706c:	90 08       	ld.sh	r8,r8[0x0]
8001706e:	5c 88       	casts.h	r8
80017070:	5c 78       	castu.h	r8
80017072:	f2 08 01 08 	sub	r8,r9,r8
80017076:	10 99       	mov	r9,r8
80017078:	ec f8 03 3c 	ld.w	r8,r6[828]
8001707c:	70 0a       	ld.w	r10,r8[0x0]
8001707e:	ec f8 01 70 	ld.w	r8,r6[368]
80017082:	90 08       	ld.sh	r8,r8[0x0]
80017084:	5c 88       	casts.h	r8
80017086:	5c 78       	castu.h	r8
80017088:	a1 78       	lsl	r8,0x1
8001708a:	f4 08 00 08 	add	r8,r10,r8
8001708e:	12 9a       	mov	r10,r9
80017090:	10 9b       	mov	r11,r8
80017092:	30 4c       	mov	r12,4
80017094:	f0 16 00 f9 	mcall	r6[996]
  // Enable now the transfer.
    //Enable_global_interrupt();
    pdca_enable(PDCA_CHANNEL_DAC);
80017098:	30 4c       	mov	r12,4
8001709a:	f0 16 00 b9 	mcall	r6[740]

  
}
8001709e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800170a2:	00 00       	add	r0,r0
800170a4:	80 01       	ld.sh	r1,r0[0x0]
800170a6:	6e d8       	ld.w	r8,r7[0x34]

800170a8 <DAC_pause>:

void DAC_pause(void) {
800170a8:	eb cd 40 80 	pushm	r7,lr
800170ac:	1a 97       	mov	r7,sp

}
800170ae:	e3 cd 80 80 	ldm	sp++,r7,pc

800170b2 <DAC_resume>:

void DAC_resume(void) {
800170b2:	eb cd 40 80 	pushm	r7,lr
800170b6:	1a 97       	mov	r7,sp

}
800170b8:	e3 cd 80 80 	ldm	sp++,r7,pc

800170bc <DAC_is_finished>:

int  DAC_is_finished(void) {
800170bc:	eb cd 40 80 	pushm	r7,lr
800170c0:	1a 97       	mov	r7,sp
	return 0;
800170c2:	30 08       	mov	r8,0
}
800170c4:	10 9c       	mov	r12,r8
800170c6:	e3 cd 80 80 	ldm	sp++,r7,pc

800170ca <DAC_set_value>:

void DAC_set_value(int32_t output) {
800170ca:	eb cd 40 c0 	pushm	r6-r7,lr
800170ce:	1a 97       	mov	r7,sp
800170d0:	20 1d       	sub	sp,4
800170d2:	48 76       	lddpc	r6,800170ec <DAC_set_value+0x22>
800170d4:	1e 26       	rsub	r6,pc
800170d6:	ef 4c ff fc 	st.w	r7[-4],r12
	dacifb->dr0 = (output); 
800170da:	ec f8 02 3c 	ld.w	r8,r6[572]
800170de:	70 08       	ld.w	r8,r8[0x0]
800170e0:	ee f9 ff fc 	ld.w	r9,r7[-4]
800170e4:	91 b9       	st.w	r8[0x2c],r9
}
800170e6:	2f fd       	sub	sp,-4
800170e8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800170ec:	80 01       	ld.sh	r1,r0[0x0]
800170ee:	6f 58       	ld.w	r8,r7[0x54]

800170f0 <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
800170f0:	eb cd 40 c0 	pushm	r6-r7,lr
800170f4:	1a 97       	mov	r7,sp
800170f6:	20 6d       	sub	sp,24
800170f8:	49 e6       	lddpc	r6,80017170 <interpolate+0x80>
800170fa:	1e 26       	rsub	r6,pc
800170fc:	ef 4c ff f8 	st.w	r7[-8],r12
80017100:	ef 4b ff f4 	st.w	r7[-12],r11
80017104:	ef 4a ff f0 	st.w	r7[-16],r10
80017108:	ef 49 ff ec 	st.w	r7[-20],r9
8001710c:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
80017110:	ee f9 ff f4 	ld.w	r9,r7[-12]
80017114:	ee f8 ff f0 	ld.w	r8,r7[-16]
80017118:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
8001711c:	c0 41       	brne	80017124 <interpolate+0x34>
	{
		return y1;
8001711e:	ee f8 ff ec 	ld.w	r8,r7[-20]
80017122:	c2 38       	rjmp	80017168 <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
80017124:	ee f9 ff e8 	ld.w	r9,r7[-24]
80017128:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001712c:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80017130:	ee fa ff f8 	ld.w	r10,r7[-8]
80017134:	ee f8 ff f4 	ld.w	r8,r7[-12]
80017138:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
8001713c:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80017140:	ee fa ff f0 	ld.w	r10,r7[-16]
80017144:	ee f9 ff f4 	ld.w	r9,r7[-12]
80017148:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8001714c:	12 9b       	mov	r11,r9
8001714e:	10 9c       	mov	r12,r8
80017150:	f0 16 00 08 	mcall	r6[32]
80017154:	18 98       	mov	r8,r12
80017156:	10 99       	mov	r9,r8
80017158:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001715c:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80017160:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
80017164:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
80017168:	10 9c       	mov	r12,r8
8001716a:	2f ad       	sub	sp,-24
8001716c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80017170:	80 01       	ld.sh	r1,r0[0x0]
80017172:	6f 7e       	ld.w	lr,r7[0x5c]

80017174 <init_itg3200_slow>:
gyro_config default_configuration;
uint8_t read_preamble=SENSOR_REG_ADDRESS;



void init_itg3200_slow(void) {
80017174:	eb cd 40 c0 	pushm	r6-r7,lr
80017178:	1a 97       	mov	r7,sp
8001717a:	48 a6       	lddpc	r6,800171a0 <init_itg3200_slow+0x2c>
8001717c:	1e 26       	rsub	r6,pc
		.speed = 400000,
		.chip = ITG3200_SLAVE_ADDRESS, 
		.smbus=false
	};

	twim_master_init(&AVR32_TWIM0, &twi_opt);
8001717e:	ec fb 08 94 	ld.w	r11,r6[2196]
80017182:	fe 7c 38 00 	mov	r12,-51200
80017186:	f0 16 00 6a 	mcall	r6[424]
	twim_write(&AVR32_TWIM0, (uint8_t*)&default_configuration, 4, ITG3200_SLAVE_ADDRESS, false);
8001718a:	30 08       	mov	r8,0
8001718c:	36 89       	mov	r9,104
8001718e:	30 4a       	mov	r10,4
80017190:	ec fb 03 68 	ld.w	r11,r6[872]
80017194:	fe 7c 38 00 	mov	r12,-51200
80017198:	f0 16 00 39 	mcall	r6[228]
}
8001719c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800171a0:	80 01       	ld.sh	r1,r0[0x0]
800171a2:	70 00       	ld.w	r0,r8[0x0]

800171a4 <get_gyro_data_slow>:


gyro_data* get_gyro_data_slow(void) {
800171a4:	eb cd 40 c0 	pushm	r6-r7,lr
800171a8:	1a 97       	mov	r7,sp
800171aa:	20 1d       	sub	sp,4
800171ac:	48 f6       	lddpc	r6,800171e8 <get_gyro_data_slow+0x44>
800171ae:	1e 26       	rsub	r6,pc
	uint8_t write_then_read_preamble=SENSOR_REG_ADDRESS;
800171b0:	31 b8       	mov	r8,27
800171b2:	ef 68 ff ff 	st.b	r7[-1],r8
	twim_write(&AVR32_TWIM0, (uint8_t*) &write_then_read_preamble, 1, ITG3200_SLAVE_ADDRESS, false);
800171b6:	ee cb 00 01 	sub	r11,r7,1
800171ba:	30 08       	mov	r8,0
800171bc:	36 89       	mov	r9,104
800171be:	30 1a       	mov	r10,1
800171c0:	fe 7c 38 00 	mov	r12,-51200
800171c4:	f0 16 00 39 	mcall	r6[228]
	twim_read(&AVR32_TWIM0, (uint8_t*)&gyro_outputs, 8, ITG3200_SLAVE_ADDRESS, false);
800171c8:	ec fb 04 a8 	ld.w	r11,r6[1192]
800171cc:	30 08       	mov	r8,0
800171ce:	36 89       	mov	r9,104
800171d0:	30 8a       	mov	r10,8
800171d2:	fe 7c 38 00 	mov	r12,-51200
800171d6:	f0 16 00 63 	mcall	r6[396]
	
	
	return &gyro_outputs;
800171da:	ec f8 04 a8 	ld.w	r8,r6[1192]
800171de:	10 9c       	mov	r12,r8
800171e0:	2f fd       	sub	sp,-4
800171e2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800171e6:	00 00       	add	r0,r0
800171e8:	80 01       	ld.sh	r1,r0[0x0]
800171ea:	70 32       	ld.w	r2,r8[0xc]

800171ec <LED_Read_Display>:
//! Saved state of all LEDs.
static volatile U32 LED_State = (1 << LED_COUNT) - 1;


U32 LED_Read_Display(void)
{
800171ec:	eb cd 40 c0 	pushm	r6-r7,lr
800171f0:	1a 97       	mov	r7,sp
800171f2:	48 56       	lddpc	r6,80017204 <LED_Read_Display+0x18>
800171f4:	1e 26       	rsub	r6,pc
  return LED_State;
800171f6:	ec f8 00 ec 	ld.w	r8,r6[236]
800171fa:	70 08       	ld.w	r8,r8[0x0]
}
800171fc:	10 9c       	mov	r12,r8
800171fe:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80017202:	00 00       	add	r0,r0
80017204:	80 01       	ld.sh	r1,r0[0x0]
80017206:	70 78       	ld.w	r8,r8[0x1c]

80017208 <LED_Display>:


void LED_Display(U32 leds)
{
80017208:	eb cd 40 c0 	pushm	r6-r7,lr
8001720c:	1a 97       	mov	r7,sp
8001720e:	20 3d       	sub	sp,12
80017210:	4a 96       	lddpc	r6,800172b4 <LED_Display+0xac>
80017212:	1e 26       	rsub	r6,pc
80017214:	ef 4c ff f4 	st.w	r7[-12],r12
  // Use the LED descriptors to get the connections of a given LED to the MCU.
  tLED_DESCRIPTOR *led_descriptor;
  volatile avr32_gpio_port_t *led_gpio_port;

  // Make sure only existing LEDs are specified.
  leds &= (1 << LED_COUNT) - 1;
80017218:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001721c:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
80017220:	ef 48 ff f4 	st.w	r7[-12],r8

  // Update the saved state of all LEDs with the requested changes.
  LED_State = leds;
80017224:	ec f8 00 ec 	ld.w	r8,r6[236]
80017228:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001722c:	91 09       	st.w	r8[0x0],r9

  // For all LEDs...
  for (led_descriptor = &LED_DESCRIPTOR[0];
8001722e:	ec f8 01 98 	ld.w	r8,r6[408]
80017232:	ef 48 ff f8 	st.w	r7[-8],r8
80017236:	c3 58       	rjmp	800172a0 <LED_Display+0x98>
       led_descriptor < LED_DESCRIPTOR + LED_COUNT;
       led_descriptor++)
  {
    // Set the LED to the requested state.
    led_gpio_port = &AVR32_GPIO.port[led_descriptor->GPIO.PORT];
80017238:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001723c:	70 08       	ld.w	r8,r8[0x0]
8001723e:	a9 78       	lsl	r8,0x9
80017240:	e0 28 e0 00 	sub	r8,57344
80017244:	ef 48 ff fc 	st.w	r7[-4],r8
    if (leds & 1)
80017248:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001724c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80017250:	5c 58       	castu.b	r8
80017252:	c0 90       	breq	80017264 <LED_Display+0x5c>
    {
      led_gpio_port->ovrc  = led_descriptor->GPIO.PIN_MASK;
80017254:	ee f8 ff f8 	ld.w	r8,r7[-8]
80017258:	70 19       	ld.w	r9,r8[0x4]
8001725a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001725e:	f1 49 00 58 	st.w	r8[88],r9
80017262:	c0 88       	rjmp	80017272 <LED_Display+0x6a>
    }
    else
    {
      led_gpio_port->ovrs  = led_descriptor->GPIO.PIN_MASK;
80017264:	ee f8 ff f8 	ld.w	r8,r7[-8]
80017268:	70 19       	ld.w	r9,r8[0x4]
8001726a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001726e:	f1 49 00 54 	st.w	r8[84],r9
    }
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
80017272:	ee f8 ff f8 	ld.w	r8,r7[-8]
80017276:	70 19       	ld.w	r9,r8[0x4]
80017278:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001727c:	f1 49 00 44 	st.w	r8[68],r9
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
80017280:	ee f8 ff f8 	ld.w	r8,r7[-8]
80017284:	70 19       	ld.w	r9,r8[0x4]
80017286:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001728a:	91 19       	st.w	r8[0x4],r9
    leds >>= 1;
8001728c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80017290:	a1 98       	lsr	r8,0x1
80017292:	ef 48 ff f4 	st.w	r7[-12],r8
  LED_State = leds;

  // For all LEDs...
  for (led_descriptor = &LED_DESCRIPTOR[0];
       led_descriptor < LED_DESCRIPTOR + LED_COUNT;
       led_descriptor++)
80017296:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001729a:	2f 08       	sub	r8,-16
8001729c:	ef 48 ff f8 	st.w	r7[-8],r8

  // Update the saved state of all LEDs with the requested changes.
  LED_State = leds;

  // For all LEDs...
  for (led_descriptor = &LED_DESCRIPTOR[0];
800172a0:	ee f9 ff f8 	ld.w	r9,r7[-8]
800172a4:	ec f8 01 98 	ld.w	r8,r6[408]
800172a8:	2e 08       	sub	r8,-32
800172aa:	10 39       	cp.w	r9,r8
800172ac:	cc 63       	brcs	80017238 <LED_Display+0x30>
    }
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
    leds >>= 1;
  }
}
800172ae:	2f dd       	sub	sp,-12
800172b0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800172b4:	80 01       	ld.sh	r1,r0[0x0]
800172b6:	70 96       	ld.w	r6,r8[0x24]

800172b8 <LED_Read_Display_Mask>:


U32 LED_Read_Display_Mask(U32 mask)
{
800172b8:	eb cd 40 c0 	pushm	r6-r7,lr
800172bc:	1a 97       	mov	r7,sp
800172be:	20 1d       	sub	sp,4
800172c0:	48 86       	lddpc	r6,800172e0 <LED_Read_Display_Mask+0x28>
800172c2:	1e 26       	rsub	r6,pc
800172c4:	ef 4c ff fc 	st.w	r7[-4],r12
  return Rd_bits(LED_State, mask);
800172c8:	ec f8 00 ec 	ld.w	r8,r6[236]
800172cc:	70 09       	ld.w	r9,r8[0x0]
800172ce:	ee f8 ff fc 	ld.w	r8,r7[-4]
800172d2:	f3 e8 00 08 	and	r8,r9,r8
}
800172d6:	10 9c       	mov	r12,r8
800172d8:	2f fd       	sub	sp,-4
800172da:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800172de:	00 00       	add	r0,r0
800172e0:	80 01       	ld.sh	r1,r0[0x0]
800172e2:	71 46       	ld.w	r6,r8[0x50]

800172e4 <LED_Display_Mask>:


void LED_Display_Mask(U32 mask, U32 leds)
{
800172e4:	eb cd 40 c0 	pushm	r6-r7,lr
800172e8:	1a 97       	mov	r7,sp
800172ea:	20 5d       	sub	sp,20
800172ec:	4b f6       	lddpc	r6,800173e8 <LED_Display_Mask+0x104>
800172ee:	1e 26       	rsub	r6,pc
800172f0:	ef 4c ff f0 	st.w	r7[-16],r12
800172f4:	ef 4b ff ec 	st.w	r7[-20],r11
  // Use the LED descriptors to get the connections of a given LED to the MCU.
  tLED_DESCRIPTOR *led_descriptor = &LED_DESCRIPTOR[0] - 1;
800172f8:	ec f8 01 98 	ld.w	r8,r6[408]
800172fc:	21 08       	sub	r8,16
800172fe:	ef 48 ff f4 	st.w	r7[-12],r8
  volatile avr32_gpio_port_t *led_gpio_port;
  U8 led_shift;

  // Make sure only existing LEDs are specified.
  mask &= (1 << LED_COUNT) - 1;
80017302:	ee f8 ff f0 	ld.w	r8,r7[-16]
80017306:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
8001730a:	ef 48 ff f0 	st.w	r7[-16],r8

  // Update the saved state of all LEDs with the requested changes.
  Wr_bits(LED_State, mask, leds);
8001730e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80017312:	f0 09 11 ff 	rsub	r9,r8,-1
80017316:	ec f8 00 ec 	ld.w	r8,r6[236]
8001731a:	70 08       	ld.w	r8,r8[0x0]
8001731c:	10 69       	and	r9,r8
8001731e:	ee fa ff ec 	ld.w	r10,r7[-20]
80017322:	ee f8 ff f0 	ld.w	r8,r7[-16]
80017326:	f5 e8 00 08 	and	r8,r10,r8
8001732a:	10 49       	or	r9,r8
8001732c:	ec f8 00 ec 	ld.w	r8,r6[236]
80017330:	91 09       	st.w	r8[0x0],r9

  // While there are specified LEDs left to manage...
  while (mask)
80017332:	c5 38       	rjmp	800173d8 <LED_Display_Mask+0xf4>
  {
    // Select the next specified LED and set it to the requested state.
    led_shift = 1 + ctz(mask);
80017334:	ee f8 ff f0 	ld.w	r8,r7[-16]
80017338:	5c 98       	brev	r8
8001733a:	f0 08 12 00 	clz	r8,r8
8001733e:	5c 58       	castu.b	r8
80017340:	2f f8       	sub	r8,-1
80017342:	ef 68 ff ff 	st.b	r7[-1],r8
    led_descriptor += led_shift;
80017346:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8001734a:	a5 68       	lsl	r8,0x4
8001734c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80017350:	f2 08 00 08 	add	r8,r9,r8
80017354:	ef 48 ff f4 	st.w	r7[-12],r8
    led_gpio_port = &AVR32_GPIO.port[led_descriptor->GPIO.PORT];
80017358:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001735c:	70 08       	ld.w	r8,r8[0x0]
8001735e:	a9 78       	lsl	r8,0x9
80017360:	e0 28 e0 00 	sub	r8,57344
80017364:	ef 48 ff f8 	st.w	r7[-8],r8
    leds >>= led_shift - 1;
80017368:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8001736c:	20 18       	sub	r8,1
8001736e:	ee f9 ff ec 	ld.w	r9,r7[-20]
80017372:	f2 08 0a 48 	lsr	r8,r9,r8
80017376:	ef 48 ff ec 	st.w	r7[-20],r8
    if (leds & 1)
8001737a:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001737e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80017382:	5c 58       	castu.b	r8
80017384:	c0 90       	breq	80017396 <LED_Display_Mask+0xb2>
    {
      led_gpio_port->ovrc  = led_descriptor->GPIO.PIN_MASK;
80017386:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001738a:	70 19       	ld.w	r9,r8[0x4]
8001738c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80017390:	f1 49 00 58 	st.w	r8[88],r9
80017394:	c0 88       	rjmp	800173a4 <LED_Display_Mask+0xc0>
    }
    else
    {
      led_gpio_port->ovrs  = led_descriptor->GPIO.PIN_MASK;
80017396:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001739a:	70 19       	ld.w	r9,r8[0x4]
8001739c:	ee f8 ff f8 	ld.w	r8,r7[-8]
800173a0:	f1 49 00 54 	st.w	r8[84],r9
    }
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
800173a4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800173a8:	70 19       	ld.w	r9,r8[0x4]
800173aa:	ee f8 ff f8 	ld.w	r8,r7[-8]
800173ae:	f1 49 00 44 	st.w	r8[68],r9
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
800173b2:	ee f8 ff f4 	ld.w	r8,r7[-12]
800173b6:	70 19       	ld.w	r9,r8[0x4]
800173b8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800173bc:	91 19       	st.w	r8[0x4],r9
    leds >>= 1;
800173be:	ee f8 ff ec 	ld.w	r8,r7[-20]
800173c2:	a1 98       	lsr	r8,0x1
800173c4:	ef 48 ff ec 	st.w	r7[-20],r8
    mask >>= led_shift;
800173c8:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800173cc:	ee f9 ff f0 	ld.w	r9,r7[-16]
800173d0:	f2 08 0a 48 	lsr	r8,r9,r8
800173d4:	ef 48 ff f0 	st.w	r7[-16],r8

  // Update the saved state of all LEDs with the requested changes.
  Wr_bits(LED_State, mask, leds);

  // While there are specified LEDs left to manage...
  while (mask)
800173d8:	ee f8 ff f0 	ld.w	r8,r7[-16]
800173dc:	58 08       	cp.w	r8,0
800173de:	ca b1       	brne	80017334 <LED_Display_Mask+0x50>
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
    leds >>= 1;
    mask >>= led_shift;
  }
}
800173e0:	2f bd       	sub	sp,-20
800173e2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800173e6:	00 00       	add	r0,r0
800173e8:	80 01       	ld.sh	r1,r0[0x0]
800173ea:	71 72       	ld.w	r2,r8[0x5c]

800173ec <LED_Test>:


bool LED_Test(U32 leds)
{
800173ec:	eb cd 40 c0 	pushm	r6-r7,lr
800173f0:	1a 97       	mov	r7,sp
800173f2:	20 1d       	sub	sp,4
800173f4:	48 96       	lddpc	r6,80017418 <LED_Test+0x2c>
800173f6:	1e 26       	rsub	r6,pc
800173f8:	ef 4c ff fc 	st.w	r7[-4],r12
  return Tst_bits(LED_State, leds);
800173fc:	ec f8 00 ec 	ld.w	r8,r6[236]
80017400:	70 09       	ld.w	r9,r8[0x0]
80017402:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017406:	f3 e8 00 08 	and	r8,r9,r8
8001740a:	5f 18       	srne	r8
8001740c:	5c 58       	castu.b	r8
}
8001740e:	10 9c       	mov	r12,r8
80017410:	2f fd       	sub	sp,-4
80017412:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80017416:	00 00       	add	r0,r0
80017418:	80 01       	ld.sh	r1,r0[0x0]
8001741a:	72 7a       	ld.w	r10,r9[0x1c]

8001741c <LED_Off>:


void LED_Off(U32 leds)
{
8001741c:	eb cd 40 c0 	pushm	r6-r7,lr
80017420:	1a 97       	mov	r7,sp
80017422:	20 4d       	sub	sp,16
80017424:	4a b6       	lddpc	r6,800174d0 <LED_Off+0xb4>
80017426:	1e 26       	rsub	r6,pc
80017428:	ef 4c ff f0 	st.w	r7[-16],r12
  // Use the LED descriptors to get the connections of a given LED to the MCU.
  tLED_DESCRIPTOR *led_descriptor = &LED_DESCRIPTOR[0] - 1;
8001742c:	ec f8 01 98 	ld.w	r8,r6[408]
80017430:	21 08       	sub	r8,16
80017432:	ef 48 ff f4 	st.w	r7[-12],r8
  volatile avr32_gpio_port_t *led_gpio_port;
  U8 led_shift;

  // Make sure only existing LEDs are specified.
  leds &= (1 << LED_COUNT) - 1;
80017436:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001743a:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
8001743e:	ef 48 ff f0 	st.w	r7[-16],r8

  // Update the saved state of all LEDs with the requested changes.
  //Clr_bits(LED_State, leds);
  Set_bits(LED_State, leds);
80017442:	ec f8 00 ec 	ld.w	r8,r6[236]
80017446:	70 09       	ld.w	r9,r8[0x0]
80017448:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001744c:	10 49       	or	r9,r8
8001744e:	ec f8 00 ec 	ld.w	r8,r6[236]
80017452:	91 09       	st.w	r8[0x0],r9
  // While there are specified LEDs left to manage...
  while (leds)
80017454:	c3 78       	rjmp	800174c2 <LED_Off+0xa6>
  {
    // Select the next specified LED and turn it off.
    led_shift = 1 + ctz(leds);
80017456:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001745a:	5c 98       	brev	r8
8001745c:	f0 08 12 00 	clz	r8,r8
80017460:	5c 58       	castu.b	r8
80017462:	2f f8       	sub	r8,-1
80017464:	ef 68 ff ff 	st.b	r7[-1],r8
    led_descriptor += led_shift;
80017468:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8001746c:	a5 68       	lsl	r8,0x4
8001746e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80017472:	f2 08 00 08 	add	r8,r9,r8
80017476:	ef 48 ff f4 	st.w	r7[-12],r8
    led_gpio_port = &AVR32_GPIO.port[led_descriptor->GPIO.PORT];
8001747a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001747e:	70 08       	ld.w	r8,r8[0x0]
80017480:	a9 78       	lsl	r8,0x9
80017482:	e0 28 e0 00 	sub	r8,57344
80017486:	ef 48 ff f8 	st.w	r7[-8],r8
    led_gpio_port->ovrs  = led_descriptor->GPIO.PIN_MASK;
8001748a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001748e:	70 19       	ld.w	r9,r8[0x4]
80017490:	ee f8 ff f8 	ld.w	r8,r7[-8]
80017494:	f1 49 00 54 	st.w	r8[84],r9
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
80017498:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001749c:	70 19       	ld.w	r9,r8[0x4]
8001749e:	ee f8 ff f8 	ld.w	r8,r7[-8]
800174a2:	f1 49 00 44 	st.w	r8[68],r9
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
800174a6:	ee f8 ff f4 	ld.w	r8,r7[-12]
800174aa:	70 19       	ld.w	r9,r8[0x4]
800174ac:	ee f8 ff f8 	ld.w	r8,r7[-8]
800174b0:	91 19       	st.w	r8[0x4],r9
    leds >>= led_shift;
800174b2:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800174b6:	ee f9 ff f0 	ld.w	r9,r7[-16]
800174ba:	f2 08 0a 48 	lsr	r8,r9,r8
800174be:	ef 48 ff f0 	st.w	r7[-16],r8

  // Update the saved state of all LEDs with the requested changes.
  //Clr_bits(LED_State, leds);
  Set_bits(LED_State, leds);
  // While there are specified LEDs left to manage...
  while (leds)
800174c2:	ee f8 ff f0 	ld.w	r8,r7[-16]
800174c6:	58 08       	cp.w	r8,0
800174c8:	cc 71       	brne	80017456 <LED_Off+0x3a>
    led_gpio_port->ovrs  = led_descriptor->GPIO.PIN_MASK;
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
    leds >>= led_shift;
  }
}
800174ca:	2f cd       	sub	sp,-16
800174cc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800174d0:	80 01       	ld.sh	r1,r0[0x0]
800174d2:	72 aa       	ld.w	r10,r9[0x28]

800174d4 <LED_On>:


void LED_On(U32 leds)
{
800174d4:	eb cd 40 c0 	pushm	r6-r7,lr
800174d8:	1a 97       	mov	r7,sp
800174da:	20 4d       	sub	sp,16
800174dc:	4a c6       	lddpc	r6,8001758c <LED_On+0xb8>
800174de:	1e 26       	rsub	r6,pc
800174e0:	ef 4c ff f0 	st.w	r7[-16],r12
  // Use the LED descriptors to get the connections of a given LED to the MCU.
  tLED_DESCRIPTOR *led_descriptor = &LED_DESCRIPTOR[0] - 1;
800174e4:	ec f8 01 98 	ld.w	r8,r6[408]
800174e8:	21 08       	sub	r8,16
800174ea:	ef 48 ff f4 	st.w	r7[-12],r8
  volatile avr32_gpio_port_t *led_gpio_port;
  U8 led_shift;

  // Make sure only existing LEDs are specified.
  leds &= (1 << LED_COUNT) - 1;
800174ee:	ee f8 ff f0 	ld.w	r8,r7[-16]
800174f2:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
800174f6:	ef 48 ff f0 	st.w	r7[-16],r8

  // Update the saved state of all LEDs with the requested changes.
  //Set_bits(LED_State, leds);
  Clr_bits(LED_State, leds);
800174fa:	ee f8 ff f0 	ld.w	r8,r7[-16]
800174fe:	f0 09 11 ff 	rsub	r9,r8,-1
80017502:	ec f8 00 ec 	ld.w	r8,r6[236]
80017506:	70 08       	ld.w	r8,r8[0x0]
80017508:	10 69       	and	r9,r8
8001750a:	ec f8 00 ec 	ld.w	r8,r6[236]
8001750e:	91 09       	st.w	r8[0x0],r9
  // While there are specified LEDs left to manage...
  while (leds)
80017510:	c3 78       	rjmp	8001757e <LED_On+0xaa>
  {
    // Select the next specified LED and turn it on.
    led_shift = 1 + ctz(leds);
80017512:	ee f8 ff f0 	ld.w	r8,r7[-16]
80017516:	5c 98       	brev	r8
80017518:	f0 08 12 00 	clz	r8,r8
8001751c:	5c 58       	castu.b	r8
8001751e:	2f f8       	sub	r8,-1
80017520:	ef 68 ff ff 	st.b	r7[-1],r8
    led_descriptor += led_shift;
80017524:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80017528:	a5 68       	lsl	r8,0x4
8001752a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001752e:	f2 08 00 08 	add	r8,r9,r8
80017532:	ef 48 ff f4 	st.w	r7[-12],r8
    led_gpio_port = &AVR32_GPIO.port[led_descriptor->GPIO.PORT];
80017536:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001753a:	70 08       	ld.w	r8,r8[0x0]
8001753c:	a9 78       	lsl	r8,0x9
8001753e:	e0 28 e0 00 	sub	r8,57344
80017542:	ef 48 ff f8 	st.w	r7[-8],r8
    led_gpio_port->ovrc  = led_descriptor->GPIO.PIN_MASK;
80017546:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001754a:	70 19       	ld.w	r9,r8[0x4]
8001754c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80017550:	f1 49 00 58 	st.w	r8[88],r9
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
80017554:	ee f8 ff f4 	ld.w	r8,r7[-12]
80017558:	70 19       	ld.w	r9,r8[0x4]
8001755a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001755e:	f1 49 00 44 	st.w	r8[68],r9
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
80017562:	ee f8 ff f4 	ld.w	r8,r7[-12]
80017566:	70 19       	ld.w	r9,r8[0x4]
80017568:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001756c:	91 19       	st.w	r8[0x4],r9
    leds >>= led_shift;
8001756e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80017572:	ee f9 ff f0 	ld.w	r9,r7[-16]
80017576:	f2 08 0a 48 	lsr	r8,r9,r8
8001757a:	ef 48 ff f0 	st.w	r7[-16],r8

  // Update the saved state of all LEDs with the requested changes.
  //Set_bits(LED_State, leds);
  Clr_bits(LED_State, leds);
  // While there are specified LEDs left to manage...
  while (leds)
8001757e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80017582:	58 08       	cp.w	r8,0
80017584:	cc 71       	brne	80017512 <LED_On+0x3e>
    led_gpio_port->ovrc  = led_descriptor->GPIO.PIN_MASK;
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
    leds >>= led_shift;
  }
}
80017586:	2f cd       	sub	sp,-16
80017588:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001758c:	80 01       	ld.sh	r1,r0[0x0]
8001758e:	73 62       	ld.w	r2,r9[0x58]

80017590 <LED_Toggle>:


void LED_Toggle(U32 leds)
{
80017590:	eb cd 40 c0 	pushm	r6-r7,lr
80017594:	1a 97       	mov	r7,sp
80017596:	20 4d       	sub	sp,16
80017598:	4a b6       	lddpc	r6,80017644 <LED_Toggle+0xb4>
8001759a:	1e 26       	rsub	r6,pc
8001759c:	ef 4c ff f0 	st.w	r7[-16],r12
  // Use the LED descriptors to get the connections of a given LED to the MCU.
  tLED_DESCRIPTOR *led_descriptor = &LED_DESCRIPTOR[0] - 1;
800175a0:	ec f8 01 98 	ld.w	r8,r6[408]
800175a4:	21 08       	sub	r8,16
800175a6:	ef 48 ff f4 	st.w	r7[-12],r8
  volatile avr32_gpio_port_t *led_gpio_port;
  U8 led_shift;

  // Make sure only existing LEDs are specified.
  leds &= (1 << LED_COUNT) - 1;
800175aa:	ee f8 ff f0 	ld.w	r8,r7[-16]
800175ae:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
800175b2:	ef 48 ff f0 	st.w	r7[-16],r8

  // Update the saved state of all LEDs with the requested changes.
  Tgl_bits(LED_State, leds);
800175b6:	ec f8 00 ec 	ld.w	r8,r6[236]
800175ba:	70 09       	ld.w	r9,r8[0x0]
800175bc:	ee f8 ff f0 	ld.w	r8,r7[-16]
800175c0:	10 59       	eor	r9,r8
800175c2:	ec f8 00 ec 	ld.w	r8,r6[236]
800175c6:	91 09       	st.w	r8[0x0],r9

  // While there are specified LEDs left to manage...
  while (leds)
800175c8:	c3 78       	rjmp	80017636 <LED_Toggle+0xa6>
  {
    // Select the next specified LED and toggle it.
    led_shift = 1 + ctz(leds);
800175ca:	ee f8 ff f0 	ld.w	r8,r7[-16]
800175ce:	5c 98       	brev	r8
800175d0:	f0 08 12 00 	clz	r8,r8
800175d4:	5c 58       	castu.b	r8
800175d6:	2f f8       	sub	r8,-1
800175d8:	ef 68 ff ff 	st.b	r7[-1],r8
    led_descriptor += led_shift;
800175dc:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800175e0:	a5 68       	lsl	r8,0x4
800175e2:	ee f9 ff f4 	ld.w	r9,r7[-12]
800175e6:	f2 08 00 08 	add	r8,r9,r8
800175ea:	ef 48 ff f4 	st.w	r7[-12],r8
    led_gpio_port = &AVR32_GPIO.port[led_descriptor->GPIO.PORT];
800175ee:	ee f8 ff f4 	ld.w	r8,r7[-12]
800175f2:	70 08       	ld.w	r8,r8[0x0]
800175f4:	a9 78       	lsl	r8,0x9
800175f6:	e0 28 e0 00 	sub	r8,57344
800175fa:	ef 48 ff f8 	st.w	r7[-8],r8
    led_gpio_port->ovrt  = led_descriptor->GPIO.PIN_MASK;
800175fe:	ee f8 ff f4 	ld.w	r8,r7[-12]
80017602:	70 19       	ld.w	r9,r8[0x4]
80017604:	ee f8 ff f8 	ld.w	r8,r7[-8]
80017608:	f1 49 00 5c 	st.w	r8[92],r9
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
8001760c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80017610:	70 19       	ld.w	r9,r8[0x4]
80017612:	ee f8 ff f8 	ld.w	r8,r7[-8]
80017616:	f1 49 00 44 	st.w	r8[68],r9
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
8001761a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001761e:	70 19       	ld.w	r9,r8[0x4]
80017620:	ee f8 ff f8 	ld.w	r8,r7[-8]
80017624:	91 19       	st.w	r8[0x4],r9
    leds >>= led_shift;
80017626:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8001762a:	ee f9 ff f0 	ld.w	r9,r7[-16]
8001762e:	f2 08 0a 48 	lsr	r8,r9,r8
80017632:	ef 48 ff f0 	st.w	r7[-16],r8

  // Update the saved state of all LEDs with the requested changes.
  Tgl_bits(LED_State, leds);

  // While there are specified LEDs left to manage...
  while (leds)
80017636:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001763a:	58 08       	cp.w	r8,0
8001763c:	cc 71       	brne	800175ca <LED_Toggle+0x3a>
    led_gpio_port->ovrt  = led_descriptor->GPIO.PIN_MASK;
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
    leds >>= led_shift;
  }
}
8001763e:	2f cd       	sub	sp,-16
80017640:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80017644:	80 01       	ld.sh	r1,r0[0x0]
80017646:	74 1e       	ld.w	lr,r10[0x4]

80017648 <LED_Read_Display_Field>:


U32 LED_Read_Display_Field(U32 field)
{
80017648:	eb cd 40 c0 	pushm	r6-r7,lr
8001764c:	1a 97       	mov	r7,sp
8001764e:	20 1d       	sub	sp,4
80017650:	48 b6       	lddpc	r6,8001767c <LED_Read_Display_Field+0x34>
80017652:	1e 26       	rsub	r6,pc
80017654:	ef 4c ff fc 	st.w	r7[-4],r12
  return Rd_bitfield(LED_State, field);
80017658:	ec f8 00 ec 	ld.w	r8,r6[236]
8001765c:	70 09       	ld.w	r9,r8[0x0]
8001765e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017662:	10 69       	and	r9,r8
80017664:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017668:	5c 98       	brev	r8
8001766a:	f0 08 12 00 	clz	r8,r8
8001766e:	f2 08 0a 48 	lsr	r8,r9,r8
}
80017672:	10 9c       	mov	r12,r8
80017674:	2f fd       	sub	sp,-4
80017676:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001767a:	00 00       	add	r0,r0
8001767c:	80 01       	ld.sh	r1,r0[0x0]
8001767e:	74 d6       	ld.w	r6,r10[0x34]

80017680 <LED_Display_Field>:


void LED_Display_Field(U32 field, U32 leds)
{
80017680:	eb cd 40 c0 	pushm	r6-r7,lr
80017684:	1a 97       	mov	r7,sp
80017686:	20 2d       	sub	sp,8
80017688:	48 c6       	lddpc	r6,800176b8 <LED_Display_Field+0x38>
8001768a:	1e 26       	rsub	r6,pc
8001768c:	ef 4c ff fc 	st.w	r7[-4],r12
80017690:	ef 4b ff f8 	st.w	r7[-8],r11
  // Move the bit-field to the appropriate position for the bit-mask.
  LED_Display_Mask(field, leds << ctz(field));
80017694:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017698:	5c 98       	brev	r8
8001769a:	f0 08 12 00 	clz	r8,r8
8001769e:	ee f9 ff f8 	ld.w	r9,r7[-8]
800176a2:	f2 08 09 48 	lsl	r8,r9,r8
800176a6:	10 9b       	mov	r11,r8
800176a8:	ee fc ff fc 	ld.w	r12,r7[-4]
800176ac:	f0 16 01 7b 	mcall	r6[1516]
}
800176b0:	2f ed       	sub	sp,-8
800176b2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800176b6:	00 00       	add	r0,r0
800176b8:	80 01       	ld.sh	r1,r0[0x0]
800176ba:	75 0e       	ld.w	lr,r10[0x40]

800176bc <LED_Get_Intensity>:


U8 LED_Get_Intensity(U32 led)
{
800176bc:	eb cd 40 80 	pushm	r7,lr
800176c0:	1a 97       	mov	r7,sp
800176c2:	20 1d       	sub	sp,4
800176c4:	ef 4c ff fc 	st.w	r7[-4],r12
 // always return 0, UC3C don't have PWM connected to LED
 return 0;
800176c8:	30 08       	mov	r8,0
}
800176ca:	10 9c       	mov	r12,r8
800176cc:	2f fd       	sub	sp,-4
800176ce:	e3 cd 80 80 	ldm	sp++,r7,pc

800176d2 <LED_Set_Intensity>:


void LED_Set_Intensity(U32 leds, U8 intensity)
{
800176d2:	eb cd 40 80 	pushm	r7,lr
800176d6:	1a 97       	mov	r7,sp
800176d8:	20 2d       	sub	sp,8
800176da:	ef 4c ff fc 	st.w	r7[-4],r12
800176de:	16 98       	mov	r8,r11
800176e0:	ef 68 ff f8 	st.b	r7[-8],r8
 // always return, UC3C don't have PWM to modulate led intensity.
 return;
}
800176e4:	2f ed       	sub	sp,-8
800176e6:	e3 cd 80 80 	ldm	sp++,r7,pc
	...

800176ec <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
800176ec:	eb cd 40 c0 	pushm	r6-r7,lr
800176f0:	1a 97       	mov	r7,sp
800176f2:	20 6d       	sub	sp,24
800176f4:	49 e6       	lddpc	r6,8001776c <interpolate+0x80>
800176f6:	1e 26       	rsub	r6,pc
800176f8:	ef 4c ff f8 	st.w	r7[-8],r12
800176fc:	ef 4b ff f4 	st.w	r7[-12],r11
80017700:	ef 4a ff f0 	st.w	r7[-16],r10
80017704:	ef 49 ff ec 	st.w	r7[-20],r9
80017708:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
8001770c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80017710:	ee f8 ff f0 	ld.w	r8,r7[-16]
80017714:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
80017718:	c0 41       	brne	80017720 <interpolate+0x34>
	{
		return y1;
8001771a:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001771e:	c2 38       	rjmp	80017764 <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
80017720:	ee f9 ff e8 	ld.w	r9,r7[-24]
80017724:	ee f8 ff ec 	ld.w	r8,r7[-20]
80017728:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8001772c:	ee fa ff f8 	ld.w	r10,r7[-8]
80017730:	ee f8 ff f4 	ld.w	r8,r7[-12]
80017734:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80017738:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8001773c:	ee fa ff f0 	ld.w	r10,r7[-16]
80017740:	ee f9 ff f4 	ld.w	r9,r7[-12]
80017744:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80017748:	12 9b       	mov	r11,r9
8001774a:	10 9c       	mov	r12,r8
8001774c:	f0 16 00 08 	mcall	r6[32]
80017750:	18 98       	mov	r8,r12
80017752:	10 99       	mov	r9,r8
80017754:	ee f8 ff ec 	ld.w	r8,r7[-20]
80017758:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8001775c:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
80017760:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
80017764:	10 9c       	mov	r12,r8
80017766:	2f ad       	sub	sp,-24
80017768:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001776c:	80 01       	ld.sh	r1,r0[0x0]
8001776e:	75 7a       	ld.w	r10,r10[0x5c]

80017770 <init_radar_modules>:
#include "i2c_driver_int.h"
#include "print_util.h"

radar_target main_target;

void init_radar_modules() {
80017770:	eb cd 40 c0 	pushm	r6-r7,lr
80017774:	1a 97       	mov	r7,sp
80017776:	48 66       	lddpc	r6,8001778c <init_radar_modules+0x1c>
80017778:	1e 26       	rsub	r6,pc
		.speed = 400000,
		.chip = 1,
		.smbus=false
	};

	twim_master_init(&AVR32_TWIM1, &twi_opt);
8001777a:	ec fb 08 90 	ld.w	r11,r6[2192]
8001777e:	fe 7c 3c 00 	mov	r12,-50176
80017782:	f0 16 00 6a 	mcall	r6[424]
}
80017786:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001778a:	00 00       	add	r0,r0
8001778c:	80 01       	ld.sh	r1,r0[0x0]
8001778e:	75 fc       	ld.w	r12,r10[0x7c]
80017790:	0a 00       	add	r0,r5

80017792 <read_radar>:


void read_radar() {
80017792:	eb cd 40 c0 	pushm	r6-r7,lr
80017796:	1a 97       	mov	r7,sp
80017798:	20 1d       	sub	sp,4
8001779a:	49 f6       	lddpc	r6,80017814 <read_radar+0x82>
8001779c:	1e 26       	rsub	r6,pc
	uint8_t output = 0;
8001779e:	30 08       	mov	r8,0
800177a0:	ef 68 ff ff 	st.b	r7[-1],r8
//	uint8_t input [8];
	twim_write(&AVR32_TWIM1, (uint8_t*) &output, 1, 1, false);
800177a4:	ee cb 00 01 	sub	r11,r7,1
800177a8:	30 08       	mov	r8,0
800177aa:	30 19       	mov	r9,1
800177ac:	30 1a       	mov	r10,1
800177ae:	fe 7c 3c 00 	mov	r12,-50176
800177b2:	f0 16 00 39 	mcall	r6[228]
	twim_read(&AVR32_TWIM1, (uint8_t*)&main_target, sizeof(main_target), 1, false);
800177b6:	ec fb 02 40 	ld.w	r11,r6[576]
800177ba:	30 08       	mov	r8,0
800177bc:	30 19       	mov	r9,1
800177be:	30 ca       	mov	r10,12
800177c0:	fe 7c 3c 00 	mov	r12,-50176
800177c4:	f0 16 00 63 	mcall	r6[396]
	
	dbg_print_num(main_target.velocity*100.0,10);
800177c8:	ec f8 02 40 	ld.w	r8,r6[576]
800177cc:	70 08       	ld.w	r8,r8[0x0]
800177ce:	10 9c       	mov	r12,r8
800177d0:	f0 16 00 02 	mcall	r6[8]
800177d4:	30 08       	mov	r8,0
800177d6:	fc 19 40 59 	movh	r9,0x4059
800177da:	f0 16 00 03 	mcall	r6[12]
800177de:	14 98       	mov	r8,r10
800177e0:	16 99       	mov	r9,r11
800177e2:	10 9a       	mov	r10,r8
800177e4:	12 9b       	mov	r11,r9
800177e6:	f0 16 00 14 	mcall	r6[80]
800177ea:	18 98       	mov	r8,r12
800177ec:	30 ab       	mov	r11,10
800177ee:	10 9c       	mov	r12,r8
800177f0:	f0 16 00 04 	mcall	r6[16]
	dbg_print_num(main_target.amplitude,10);
800177f4:	ec f8 02 40 	ld.w	r8,r6[576]
800177f8:	70 18       	ld.w	r8,r8[0x4]
800177fa:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
800177fe:	30 ab       	mov	r11,10
80017800:	10 9c       	mov	r12,r8
80017802:	f0 16 00 04 	mcall	r6[16]
	dbg_print("\n");
80017806:	fe cc 00 76 	sub	r12,pc,118
8001780a:	f0 16 00 01 	mcall	r6[4]
	
}
8001780e:	2f fd       	sub	sp,-4
80017810:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80017814:	80 01       	ld.sh	r1,r0[0x0]
80017816:	76 20       	ld.w	r0,r11[0x8]

80017818 <get_radar_main_target>:

radar_target* get_radar_main_target() {
80017818:	eb cd 40 c0 	pushm	r6-r7,lr
8001781c:	1a 97       	mov	r7,sp
8001781e:	48 46       	lddpc	r6,8001782c <get_radar_main_target+0x14>
80017820:	1e 26       	rsub	r6,pc
	return &main_target;
80017822:	ec f8 02 40 	ld.w	r8,r6[576]
	
}
80017826:	10 9c       	mov	r12,r8
80017828:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001782c:	80 01       	ld.sh	r1,r0[0x0]
8001782e:	76 a4       	ld.w	r4,r11[0x28]

80017830 <init_Servos>:
#define SERVO_PERIOD (SERVO_TIMER_FREQ/SERVO_REPEAT_FREQ)
#define SERVO_CENTER_DUTY_TICKS 1500//(SERVO_CENTER_DUTY_MICROSEC*SERVO_TIMER_FREQ/1000000)



void init_Servos(void){
80017830:	eb cd 40 c0 	pushm	r6-r7,lr
80017834:	1a 97       	mov	r7,sp
80017836:	20 1d       	sub	sp,4
80017838:	4c b6       	lddpc	r6,80017964 <init_Servos+0x134>
8001783a:	1e 26       	rsub	r6,pc
      int i;
	  // unlock registers
	  AVR32_PWM.wpcr = (AVR32_PWM_WPCR_WPKEY_KEY   << AVR32_PWM_WPCR_WPKEY) |
8001783c:	fe 78 4c 00 	mov	r8,-46080
80017840:	e0 69 4d 04 	mov	r9,19716
80017844:	ea 19 50 57 	orh	r9,0x5057
80017848:	f1 49 00 e4 	st.w	r8[228],r9
	          AVR32_PWM_WPCR_WPRG0_MASK                            |
	          (AVR32_PWM_WPCR_WPCMD_SWDIS << AVR32_PWM_WPCR_WPCMD);      
      AVR32_PWM.wpcr = (AVR32_PWM_WPCR_WPKEY_KEY   << AVR32_PWM_WPCR_WPKEY) |
8001784c:	fe 78 4c 00 	mov	r8,-46080
80017850:	e0 69 4d 08 	mov	r9,19720
80017854:	ea 19 50 57 	orh	r9,0x5057
80017858:	f1 49 00 e4 	st.w	r8[228],r9
	          AVR32_PWM_WPCR_WPRG1_MASK                            |
	          (AVR32_PWM_WPCR_WPCMD_SWDIS << AVR32_PWM_WPCR_WPCMD);      
      AVR32_PWM.wpcr = (AVR32_PWM_WPCR_WPKEY_KEY   << AVR32_PWM_WPCR_WPKEY) |
8001785c:	fe 78 4c 00 	mov	r8,-46080
80017860:	e0 69 4d 10 	mov	r9,19728
80017864:	ea 19 50 57 	orh	r9,0x5057
80017868:	f1 49 00 e4 	st.w	r8[228],r9
	          AVR32_PWM_WPCR_WPRG2_MASK                            |
	          (AVR32_PWM_WPCR_WPCMD_SWDIS << AVR32_PWM_WPCR_WPCMD);      
      AVR32_PWM.wpcr = (AVR32_PWM_WPCR_WPKEY_KEY   << AVR32_PWM_WPCR_WPKEY) |
8001786c:	fe 78 4c 00 	mov	r8,-46080
80017870:	e0 69 4d 20 	mov	r9,19744
80017874:	ea 19 50 57 	orh	r9,0x5057
80017878:	f1 49 00 e4 	st.w	r8[228],r9
	          AVR32_PWM_WPCR_WPRG3_MASK                            |
	          (AVR32_PWM_WPCR_WPCMD_SWDIS << AVR32_PWM_WPCR_WPCMD);      
    // clock setup  
	AVR32_PWM.clk =
8001787c:	fe 78 4c 00 	mov	r8,-46080
80017880:	e0 69 06 01 	mov	r9,1537
80017884:	ea 19 06 01 	orh	r9,0x601
80017888:	91 09       	st.w	r8[0x0],r9
    ( 6 <<AVR32_PWM_PREA_OFFSET) |  // /64
    ( 6 <<AVR32_PWM_PREB_OFFSET) |  // /64
    ( 0 <<AVR32_PWM_CLKSEL_OFFSET);

	// output override for low and high side
	AVR32_PWM.oov  = ( 0b1111 <<(AVR32_PWM_OOVH0_OFFSET+i))|( 0b1111 <<(AVR32_PWM_OOVL0_OFFSET+i)); 
8001788a:	fe 78 4c 00 	mov	r8,-46080
8001788e:	30 fa       	mov	r10,15
80017890:	ee f9 ff fc 	ld.w	r9,r7[-4]
80017894:	f4 09 09 4a 	lsl	r10,r10,r9
80017898:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001789c:	2f 09       	sub	r9,-16
8001789e:	30 fb       	mov	r11,15
800178a0:	f6 09 09 49 	lsl	r9,r11,r9
800178a4:	f5 e9 10 09 	or	r9,r10,r9
800178a8:	f1 49 00 44 	st.w	r8[68],r9
	// output selection clear: dead time generator (0)
	AVR32_PWM.osc  = ( 0b1111 <<(AVR32_PWM_OOVH0_OFFSET+i))|( 0b1111 <<(AVR32_PWM_OOVL0_OFFSET+i)); 
800178ac:	fe 78 4c 00 	mov	r8,-46080
800178b0:	30 fa       	mov	r10,15
800178b2:	ee f9 ff fc 	ld.w	r9,r7[-4]
800178b6:	f4 09 09 4a 	lsl	r10,r10,r9
800178ba:	ee f9 ff fc 	ld.w	r9,r7[-4]
800178be:	2f 09       	sub	r9,-16
800178c0:	30 fb       	mov	r11,15
800178c2:	f6 09 09 49 	lsl	r9,r11,r9
800178c6:	f5 e9 10 09 	or	r9,r10,r9
800178ca:	f1 49 00 50 	st.w	r8[80],r9
	
	// set up channels: enable dead time insertion
	for (i=0; i<4; i++) {
800178ce:	30 08       	mov	r8,0
800178d0:	ef 48 ff fc 	st.w	r7[-4],r8
800178d4:	c3 78       	rjmp	80017942 <init_Servos+0x112>
		// enable dead time, set channel clock to CLKA
		AVR32_PWM.channel[i].cmr=AVR32_PWM_CMR0_DTE_MASK | 11;
800178d6:	fe 79 4c 00 	mov	r9,-46080
800178da:	ee f8 ff fc 	ld.w	r8,r7[-4]
800178de:	2f 08       	sub	r8,-16
800178e0:	a5 78       	lsl	r8,0x5
800178e2:	f2 08 00 08 	add	r8,r9,r8
800178e6:	e0 79 00 0b 	mov	r9,65547
800178ea:	91 09       	st.w	r8[0x0],r9
		AVR32_PWM.channel[i].cprd=10000;
800178ec:	fe 79 4c 00 	mov	r9,-46080
800178f0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800178f4:	a5 78       	lsl	r8,0x5
800178f6:	f2 08 00 08 	add	r8,r9,r8
800178fa:	f0 c8 fd f4 	sub	r8,r8,-524
800178fe:	e0 69 27 10 	mov	r9,10000
80017902:	91 09       	st.w	r8[0x0],r9
		AVR32_PWM.channel[i].cdty=4000;
80017904:	fe 79 4c 00 	mov	r9,-46080
80017908:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001790c:	a5 78       	lsl	r8,0x5
8001790e:	f2 08 00 08 	add	r8,r9,r8
80017912:	f0 c8 fd fc 	sub	r8,r8,-516
80017916:	e0 69 0f a0 	mov	r9,4000
8001791a:	91 09       	st.w	r8[0x0],r9
		AVR32_PWM.channel[i].dt= 1000<<16 | 1000;
8001791c:	fe 79 4c 00 	mov	r9,-46080
80017920:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017924:	a5 78       	lsl	r8,0x5
80017926:	f2 08 00 08 	add	r8,r9,r8
8001792a:	f0 c8 fd e8 	sub	r8,r8,-536
8001792e:	e0 69 03 e8 	mov	r9,1000
80017932:	ea 19 03 e8 	orh	r9,0x3e8
80017936:	91 09       	st.w	r8[0x0],r9
	AVR32_PWM.oov  = ( 0b1111 <<(AVR32_PWM_OOVH0_OFFSET+i))|( 0b1111 <<(AVR32_PWM_OOVL0_OFFSET+i)); 
	// output selection clear: dead time generator (0)
	AVR32_PWM.osc  = ( 0b1111 <<(AVR32_PWM_OOVH0_OFFSET+i))|( 0b1111 <<(AVR32_PWM_OOVL0_OFFSET+i)); 
	
	// set up channels: enable dead time insertion
	for (i=0; i<4; i++) {
80017938:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001793c:	2f f8       	sub	r8,-1
8001793e:	ef 48 ff fc 	st.w	r7[-4],r8
80017942:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017946:	58 38       	cp.w	r8,3
80017948:	fe 9a ff c7 	brle	800178d6 <init_Servos+0xa6>
    {AVR32_PWM_PWML_3_0_PIN, AVR32_PWM_PWML_3_0_FUNCTION},
    {AVR32_PWM_PWMH_1_0_PIN, AVR32_PWM_PWMH_1_0_FUNCTION},
    {AVR32_PWM_PWMH_2_0_PIN, AVR32_PWM_PWMH_2_0_FUNCTION},
    {AVR32_PWM_PWMH_3_0_PIN, AVR32_PWM_PWMH_3_0_FUNCTION}
    };			
	gpio_enable_module(PWM_GPIO_MAP, sizeof(PWM_GPIO_MAP) / sizeof(PWM_GPIO_MAP[0]));
8001794c:	30 6b       	mov	r11,6
8001794e:	ec fc 08 8c 	ld.w	r12,r6[2188]
80017952:	f0 16 00 88 	mcall	r6[544]
	// enable
	AVR32_PWM.ena=0b1111;
80017956:	fe 78 4c 00 	mov	r8,-46080
8001795a:	30 f9       	mov	r9,15
8001795c:	91 19       	st.w	r8[0x4],r9
	
	
}
8001795e:	2f fd       	sub	sp,-4
80017960:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80017964:	80 01       	ld.sh	r1,r0[0x0]
80017966:	76 be       	ld.w	lr,r11[0x2c]

80017968 <set_servo>:

void set_servo(int channel, int val_a, int val_b){
80017968:	eb cd 40 80 	pushm	r7,lr
8001796c:	1a 97       	mov	r7,sp
8001796e:	20 6d       	sub	sp,24
80017970:	ef 4c ff f0 	st.w	r7[-16],r12
80017974:	ef 4b ff ec 	st.w	r7[-20],r11
80017978:	ef 4a ff e8 	st.w	r7[-24],r10
	int duty_a=val_a+SERVO_CENTER_DUTY_TICKS;
8001797c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80017980:	f0 c8 fa 24 	sub	r8,r8,-1500
80017984:	ef 48 ff f4 	st.w	r7[-12],r8
	int duty_b=val_b+SERVO_CENTER_DUTY_TICKS;
80017988:	ee f8 ff e8 	ld.w	r8,r7[-24]
8001798c:	f0 c8 fa 24 	sub	r8,r8,-1500
80017990:	ef 48 ff f8 	st.w	r7[-8],r8
	int deadtime=(SERVO_PERIOD-duty_a-duty_b)/2;
80017994:	ee f8 ff f4 	ld.w	r8,r7[-12]
80017998:	e0 69 13 88 	mov	r9,5000
8001799c:	10 19       	sub	r9,r8
8001799e:	ee f8 ff f8 	ld.w	r8,r7[-8]
800179a2:	f2 08 01 08 	sub	r8,r9,r8
800179a6:	f0 09 16 1f 	lsr	r9,r8,0x1f
800179aa:	f2 08 00 08 	add	r8,r9,r8
800179ae:	a1 58       	asr	r8,0x1
800179b0:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_PWM.channel[channel &0b11].cprdupd=SERVO_PERIOD;
800179b4:	fe 79 4c 00 	mov	r9,-46080
800179b8:	ee f8 ff f0 	ld.w	r8,r7[-16]
800179bc:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
800179c0:	a5 78       	lsl	r8,0x5
800179c2:	f2 08 00 08 	add	r8,r9,r8
800179c6:	f0 c8 fd f0 	sub	r8,r8,-528
800179ca:	e0 69 13 88 	mov	r9,5000
800179ce:	91 09       	st.w	r8[0x0],r9
	AVR32_PWM.channel[channel &0b11].cdtyupd=duty_a+deadtime;
800179d0:	fe 7a 4c 00 	mov	r10,-46080
800179d4:	ee f8 ff f0 	ld.w	r8,r7[-16]
800179d8:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
800179dc:	ee fb ff f4 	ld.w	r11,r7[-12]
800179e0:	ee f9 ff fc 	ld.w	r9,r7[-4]
800179e4:	f6 09 00 09 	add	r9,r11,r9
800179e8:	a5 78       	lsl	r8,0x5
800179ea:	f4 08 00 08 	add	r8,r10,r8
800179ee:	f0 c8 fd f8 	sub	r8,r8,-520
800179f2:	91 09       	st.w	r8[0x0],r9
	AVR32_PWM.channel[channel &0b11].dtupd= deadtime<<16 | deadtime;	
800179f4:	fe 7a 4c 00 	mov	r10,-46080
800179f8:	ee f8 ff f0 	ld.w	r8,r7[-16]
800179fc:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
80017a00:	ee f9 ff fc 	ld.w	r9,r7[-4]
80017a04:	f2 0b 15 10 	lsl	r11,r9,0x10
80017a08:	ee f9 ff fc 	ld.w	r9,r7[-4]
80017a0c:	f7 e9 10 09 	or	r9,r11,r9
80017a10:	a5 78       	lsl	r8,0x5
80017a12:	f4 08 00 08 	add	r8,r10,r8
80017a16:	f0 c8 fd e4 	sub	r8,r8,-540
80017a1a:	91 09       	st.w	r8[0x0],r9
}
80017a1c:	2f ad       	sub	sp,-24
80017a1e:	e3 cd 80 80 	ldm	sp++,r7,pc

80017a22 <set_servos>:


void set_servos(servo_output *servo_outputs) {
80017a22:	eb cd 40 c0 	pushm	r6-r7,lr
80017a26:	1a 97       	mov	r7,sp
80017a28:	20 1d       	sub	sp,4
80017a2a:	49 76       	lddpc	r6,80017a84 <set_servos+0x62>
80017a2c:	1e 26       	rsub	r6,pc
80017a2e:	ef 4c ff fc 	st.w	r7[-4],r12
		set_servo(0, servo_outputs[0].value, servo_outputs[1].value);
		set_servo(1, servo_outputs[2].value, servo_outputs[3].value);
		set_servo(2, servo_outputs[4].value, servo_outputs[5].value);
		set_servo(3, servo_outputs[6].value, servo_outputs[7].value);
	#else
		set_servo(1, servo_outputs[0].value, servo_outputs[1].value);
80017a32:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017a36:	2f 08       	sub	r8,-16
80017a38:	70 09       	ld.w	r9,r8[0x0]
80017a3a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017a3e:	70 08       	ld.w	r8,r8[0x0]
80017a40:	12 9a       	mov	r10,r9
80017a42:	10 9b       	mov	r11,r8
80017a44:	30 1c       	mov	r12,1
80017a46:	f0 16 00 b7 	mcall	r6[732]
		set_servo(2, servo_outputs[2].value, servo_outputs[3].value);
80017a4a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017a4e:	2d 08       	sub	r8,-48
80017a50:	70 09       	ld.w	r9,r8[0x0]
80017a52:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017a56:	2e 08       	sub	r8,-32
80017a58:	70 08       	ld.w	r8,r8[0x0]
80017a5a:	12 9a       	mov	r10,r9
80017a5c:	10 9b       	mov	r11,r8
80017a5e:	30 2c       	mov	r12,2
80017a60:	f0 16 00 b7 	mcall	r6[732]
		set_servo(3, servo_outputs[4].value, servo_outputs[5].value);
80017a64:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017a68:	2b 08       	sub	r8,-80
80017a6a:	70 09       	ld.w	r9,r8[0x0]
80017a6c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017a70:	2c 08       	sub	r8,-64
80017a72:	70 08       	ld.w	r8,r8[0x0]
80017a74:	12 9a       	mov	r10,r9
80017a76:	10 9b       	mov	r11,r8
80017a78:	30 3c       	mov	r12,3
80017a7a:	f0 16 00 b7 	mcall	r6[732]
	#endif
	
}
80017a7e:	2f fd       	sub	sp,-4
80017a80:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80017a84:	80 01       	ld.sh	r1,r0[0x0]
80017a86:	78 b0       	ld.w	r0,r12[0x2c]

80017a88 <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
80017a88:	eb cd 40 c0 	pushm	r6-r7,lr
80017a8c:	1a 97       	mov	r7,sp
80017a8e:	20 6d       	sub	sp,24
80017a90:	49 e6       	lddpc	r6,80017b08 <interpolate+0x80>
80017a92:	1e 26       	rsub	r6,pc
80017a94:	ef 4c ff f8 	st.w	r7[-8],r12
80017a98:	ef 4b ff f4 	st.w	r7[-12],r11
80017a9c:	ef 4a ff f0 	st.w	r7[-16],r10
80017aa0:	ef 49 ff ec 	st.w	r7[-20],r9
80017aa4:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
80017aa8:	ee f9 ff f4 	ld.w	r9,r7[-12]
80017aac:	ee f8 ff f0 	ld.w	r8,r7[-16]
80017ab0:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
80017ab4:	c0 41       	brne	80017abc <interpolate+0x34>
	{
		return y1;
80017ab6:	ee f8 ff ec 	ld.w	r8,r7[-20]
80017aba:	c2 38       	rjmp	80017b00 <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
80017abc:	ee f9 ff e8 	ld.w	r9,r7[-24]
80017ac0:	ee f8 ff ec 	ld.w	r8,r7[-20]
80017ac4:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80017ac8:	ee fa ff f8 	ld.w	r10,r7[-8]
80017acc:	ee f8 ff f4 	ld.w	r8,r7[-12]
80017ad0:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80017ad4:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80017ad8:	ee fa ff f0 	ld.w	r10,r7[-16]
80017adc:	ee f9 ff f4 	ld.w	r9,r7[-12]
80017ae0:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80017ae4:	12 9b       	mov	r11,r9
80017ae6:	10 9c       	mov	r12,r8
80017ae8:	f0 16 00 08 	mcall	r6[32]
80017aec:	18 98       	mov	r8,r12
80017aee:	10 99       	mov	r9,r8
80017af0:	ee f8 ff ec 	ld.w	r8,r7[-20]
80017af4:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80017af8:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
80017afc:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
80017b00:	10 9c       	mov	r12,r8
80017b02:	2f ad       	sub	sp,-24
80017b04:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80017b08:	80 01       	ld.sh	r1,r0[0x0]
80017b0a:	79 16       	ld.w	r6,r12[0x44]

80017b0c <osc_get_rate>:
/**
 * \todo RC8M may run at either 8 MHz or 1 MHz. Currently, we assume
 * it's always running at 8 MHz.
 */
static inline uint32_t osc_get_rate(uint8_t id)
{
80017b0c:	eb cd 40 80 	pushm	r7,lr
80017b10:	1a 97       	mov	r7,sp
80017b12:	20 1d       	sub	sp,4
80017b14:	18 98       	mov	r8,r12
80017b16:	ef 68 ff fc 	st.b	r7[-4],r8
	switch (id) {
80017b1a:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80017b1e:	58 38       	cp.w	r8,3
80017b20:	c1 20       	breq	80017b44 <osc_get_rate+0x38>
80017b22:	e0 89 00 07 	brgt	80017b30 <osc_get_rate+0x24>
80017b26:	58 08       	cp.w	r8,0
80017b28:	c0 90       	breq	80017b3a <osc_get_rate+0x2e>
80017b2a:	58 28       	cp.w	r8,2
80017b2c:	c0 f0       	breq	80017b4a <osc_get_rate+0x3e>
80017b2e:	c1 b8       	rjmp	80017b64 <osc_get_rate+0x58>
80017b30:	58 48       	cp.w	r8,4
80017b32:	c1 10       	breq	80017b54 <osc_get_rate+0x48>
80017b34:	58 58       	cp.w	r8,5
80017b36:	c1 40       	breq	80017b5e <osc_get_rate+0x52>
80017b38:	c1 68       	rjmp	80017b64 <osc_get_rate+0x58>
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return BOARD_OSC0_HZ;
80017b3a:	e0 68 24 00 	mov	r8,9216
80017b3e:	ea 18 00 f4 	orh	r8,0xf4
80017b42:	c1 28       	rjmp	80017b66 <osc_get_rate+0x5a>
		return BOARD_OSC1_HZ;
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		return BOARD_OSC32_HZ;
80017b44:	e0 68 80 00 	mov	r8,32768
80017b48:	c0 f8       	rjmp	80017b66 <osc_get_rate+0x5a>
#endif

	case OSC_ID_RC8M:
		return OSC_RC8M_NOMINAL_HZ;
80017b4a:	e0 68 12 00 	mov	r8,4608
80017b4e:	ea 18 00 7a 	orh	r8,0x7a
80017b52:	c0 a8       	rjmp	80017b66 <osc_get_rate+0x5a>

	case OSC_ID_RC120M:
		return OSC_RC120M_NOMINAL_HZ;
80017b54:	e0 68 0e 00 	mov	r8,3584
80017b58:	ea 18 07 27 	orh	r8,0x727
80017b5c:	c0 58       	rjmp	80017b66 <osc_get_rate+0x5a>

	case OSC_ID_RCSYS:
		return OSC_RCSYS_NOMINAL_HZ;
80017b5e:	e0 78 c1 38 	mov	r8,115000
80017b62:	c0 28       	rjmp	80017b66 <osc_get_rate+0x5a>

	default:
		/* unhandled_case(id); */
		return 0;
80017b64:	30 08       	mov	r8,0
	}
}
80017b66:	10 9c       	mov	r12,r8
80017b68:	2f fd       	sub	sp,-4
80017b6a:	e3 cd 80 80 	ldm	sp++,r7,pc

80017b6e <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern bool sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
80017b6e:	eb cd 40 c0 	pushm	r6-r7,lr
80017b72:	1a 97       	mov	r7,sp
80017b74:	48 56       	lddpc	r6,80017b88 <sysclk_get_main_hz+0x1a>
80017b76:	1e 26       	rsub	r6,pc
		return BOARD_OSC1_HZ;
#endif

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLL0:
		return pll_get_default_rate(0);
80017b78:	30 0c       	mov	r12,0
80017b7a:	cc 9f       	rcall	80017b0c <osc_get_rate>
80017b7c:	18 98       	mov	r8,r12
80017b7e:	a3 68       	lsl	r8,0x2

	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
80017b80:	10 9c       	mov	r12,r8
80017b82:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80017b86:	00 00       	add	r0,r0
80017b88:	80 01       	ld.sh	r1,r0[0x0]
80017b8a:	79 fa       	ld.w	r10,r12[0x7c]

80017b8c <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
80017b8c:	eb cd 40 c0 	pushm	r6-r7,lr
80017b90:	1a 97       	mov	r7,sp
80017b92:	48 46       	lddpc	r6,80017ba0 <sysclk_get_cpu_hz+0x14>
80017b94:	1e 26       	rsub	r6,pc
	return sysclk_get_main_hz() >> CONFIG_SYSCLK_CPU_DIV;
80017b96:	ce cf       	rcall	80017b6e <sysclk_get_main_hz>
80017b98:	18 98       	mov	r8,r12
}
80017b9a:	10 9c       	mov	r12,r8
80017b9c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80017ba0:	80 01       	ld.sh	r1,r0[0x0]
80017ba2:	7a 18       	ld.w	r8,sp[0x4]

80017ba4 <spectrum_handler>:
Spektrum_Receiver_t spRec2;

int16_t channelCenter[16];


ISR(spectrum_handler, AVR32_USART1_IRQ, AVR32_INTC_INTLEV_INT1) {
80017ba4:	eb cd 40 c0 	pushm	r6-r7,lr
80017ba8:	1a 97       	mov	r7,sp
80017baa:	20 3d       	sub	sp,12
80017bac:	4c 36       	lddpc	r6,80017cb8 <spectrum_handler+0x114>
80017bae:	1e 26       	rsub	r6,pc
	uint8_t c1, c2, i;
	uint16_t sw;
	uint32_t now =get_time_ticks() ;
80017bb0:	f0 16 00 4c 	mcall	r6[304]
80017bb4:	18 98       	mov	r8,r12
80017bb6:	ef 48 ff fc 	st.w	r7[-4],r8
	if (REMOTE_UART.csr & AVR32_USART_CSR_RXRDY_MASK) {
80017bba:	fc 78 14 00 	mov	r8,-191488
80017bbe:	70 58       	ld.w	r8,r8[0x14]
80017bc0:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80017bc4:	5c 58       	castu.b	r8
80017bc6:	c7 50       	breq	80017cb0 <spectrum_handler+0x10c>
		spRec1.duration=now-spRec1.last_time;
80017bc8:	ec f8 00 7c 	ld.w	r8,r6[124]
80017bcc:	f0 f8 01 2c 	ld.w	r8,r8[300]
80017bd0:	ee f9 ff fc 	ld.w	r9,r7[-4]
80017bd4:	10 19       	sub	r9,r8
80017bd6:	ec f8 00 7c 	ld.w	r8,r6[124]
80017bda:	f1 49 01 30 	st.w	r8[304],r9
		spRec1.last_time=now;
80017bde:	ec f8 00 7c 	ld.w	r8,r6[124]
80017be2:	ee f9 ff fc 	ld.w	r9,r7[-4]
80017be6:	f1 49 01 2c 	st.w	r8[300],r9
//		putstring(STDOUT, "!");
		//receiveInterruptHandler(&spRec1.receiver);
		if ((spRec1.duration>2500)) {
80017bea:	ec f8 00 7c 	ld.w	r8,r6[124]
80017bee:	f0 f8 01 30 	ld.w	r8,r8[304]
80017bf2:	e0 48 09 c4 	cp.w	r8,2500
80017bf6:	e0 88 00 06 	brls	80017c02 <spectrum_handler+0x5e>
			buffer_clear(&spRec1.receiver);
80017bfa:	ec fc 00 7c 	ld.w	r12,r6[124]
80017bfe:	f0 16 01 f7 	mcall	r6[2012]
		}
		c1=(uint8_t)REMOTE_UART.rhr;
80017c02:	fc 78 14 00 	mov	r8,-191488
80017c06:	70 68       	ld.w	r8,r8[0x18]
80017c08:	ef 68 ff f7 	st.b	r7[-9],r8
		buffer_put(&spRec1.receiver, c1);
80017c0c:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80017c10:	10 9b       	mov	r11,r8
80017c12:	ec fc 00 7c 	ld.w	r12,r6[124]
80017c16:	f0 16 00 50 	mcall	r6[320]
		

		if (buffer_bytes_available(&spRec1.receiver)==16) {
80017c1a:	ec fc 00 7c 	ld.w	r12,r6[124]
80017c1e:	f0 16 00 2d 	mcall	r6[180]
80017c22:	18 98       	mov	r8,r12
80017c24:	59 08       	cp.w	r8,16
80017c26:	c4 51       	brne	80017cb0 <spectrum_handler+0x10c>
			//PORTC.OUT = _BV(5);
			//putstring(STDOUT, "!");
			for (i=0; i<8; i++) {
80017c28:	30 08       	mov	r8,0
80017c2a:	ef 68 ff f9 	st.b	r7[-7],r8
80017c2e:	c3 a8       	rjmp	80017ca2 <spectrum_handler+0xfe>
				c1=buffer_get(&spRec1.receiver);
80017c30:	ec fc 00 7c 	ld.w	r12,r6[124]
80017c34:	f0 16 00 43 	mcall	r6[268]
80017c38:	18 98       	mov	r8,r12
80017c3a:	ef 68 ff f7 	st.b	r7[-9],r8
				c2=buffer_get(&spRec1.receiver);
80017c3e:	ec fc 00 7c 	ld.w	r12,r6[124]
80017c42:	f0 16 00 43 	mcall	r6[268]
80017c46:	18 98       	mov	r8,r12
80017c48:	ef 68 ff f8 	st.b	r7[-8],r8
				sw=((uint16_t)c1)*256 +((uint16_t)c2);
80017c4c:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80017c50:	a9 68       	lsl	r8,0x8
80017c52:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
80017c56:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80017c5a:	f2 08 00 08 	add	r8,r9,r8
80017c5e:	ef 58 ff fa 	st.h	r7[-6],r8
				//if (c1 & 0x80==0)
				spRec1.channels[(c1 & 0x3c)>>2]=sw&0x3ff;
80017c62:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80017c66:	e2 18 00 3c 	andl	r8,0x3c,COH
80017c6a:	f0 0a 14 02 	asr	r10,r8,0x2
80017c6e:	ef 08 ff fa 	ld.sh	r8,r7[-6]
80017c72:	f1 d8 c0 0a 	bfextu	r8,r8,0x0,0xa
80017c76:	ec f9 00 7c 	ld.w	r9,r6[124]
80017c7a:	f4 ca ff 7e 	sub	r10,r10,-130
80017c7e:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
				//spRec1.channels[i]=sw&0x3ff;
				spRec1.valid=1;
80017c82:	ec f9 00 7c 	ld.w	r9,r6[124]
80017c86:	30 18       	mov	r8,1
80017c88:	f3 68 01 28 	st.b	r9[296],r8
				spRec1.last_update=now;
80017c8c:	ec f8 00 7c 	ld.w	r8,r6[124]
80017c90:	ee f9 ff fc 	ld.w	r9,r7[-4]
80017c94:	f1 49 01 24 	st.w	r8[292],r9
		

		if (buffer_bytes_available(&spRec1.receiver)==16) {
			//PORTC.OUT = _BV(5);
			//putstring(STDOUT, "!");
			for (i=0; i<8; i++) {
80017c98:	ef 38 ff f9 	ld.ub	r8,r7[-7]
80017c9c:	2f f8       	sub	r8,-1
80017c9e:	ef 68 ff f9 	st.b	r7[-7],r8
80017ca2:	ef 39 ff f9 	ld.ub	r9,r7[-7]
80017ca6:	30 78       	mov	r8,7
80017ca8:	f0 09 18 00 	cp.b	r9,r8
80017cac:	fe 98 ff c2 	brls	80017c30 <spectrum_handler+0x8c>
				spRec1.valid=1;
				spRec1.last_update=now;
			}
		}
	}		
}
80017cb0:	2f dd       	sub	sp,-12
80017cb2:	e3 cd 40 c0 	ldm	sp++,r6-r7,lr
80017cb6:	d6 03       	rete
80017cb8:	80 01       	ld.sh	r1,r0[0x0]
80017cba:	7a 32       	ld.w	r2,sp[0xc]

80017cbc <rc_init>:

void rc_init (void) {
80017cbc:	eb cd 40 c0 	pushm	r6-r7,lr
80017cc0:	1a 97       	mov	r7,sp
80017cc2:	20 1d       	sub	sp,4
80017cc4:	4a 96       	lddpc	r6,80017d68 <rc_init+0xac>
80017cc6:	1e 26       	rsub	r6,pc
   {
    {AVR32_USART1_RXD_0_1_PIN, AVR32_USART1_RXD_0_1_FUNCTION}
   ,{AVR32_USART1_TXD_0_1_PIN, AVR32_USART1_TXD_0_1_FUNCTION}
   };
	int i;
	for (i=0; i<16; i++) {
80017cc8:	30 08       	mov	r8,0
80017cca:	ef 48 ff fc 	st.w	r7[-4],r8
80017cce:	c2 18       	rjmp	80017d10 <rc_init+0x54>
		spRec1.channels[i]=500;
80017cd0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017cd4:	ec f9 00 7c 	ld.w	r9,r6[124]
80017cd8:	f0 ca ff 7e 	sub	r10,r8,-130
80017cdc:	e0 68 01 f4 	mov	r8,500
80017ce0:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
		spRec2.channels[i]=500;
80017ce4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017ce8:	ec f9 01 58 	ld.w	r9,r6[344]
80017cec:	f0 ca ff 7e 	sub	r10,r8,-130
80017cf0:	e0 68 01 f4 	mov	r8,500
80017cf4:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
		channelCenter[i]=0;
80017cf8:	ee fa ff fc 	ld.w	r10,r7[-4]
80017cfc:	ec f9 02 98 	ld.w	r9,r6[664]
80017d00:	30 08       	mov	r8,0
80017d02:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
   {
    {AVR32_USART1_RXD_0_1_PIN, AVR32_USART1_RXD_0_1_FUNCTION}
   ,{AVR32_USART1_TXD_0_1_PIN, AVR32_USART1_TXD_0_1_FUNCTION}
   };
	int i;
	for (i=0; i<16; i++) {
80017d06:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017d0a:	2f f8       	sub	r8,-1
80017d0c:	ef 48 ff fc 	st.w	r7[-4],r8
80017d10:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017d14:	58 f8       	cp.w	r8,15
80017d16:	fe 9a ff dd 	brle	80017cd0 <rc_init+0x14>
		spRec1.channels[i]=500;
		spRec2.channels[i]=500;
		channelCenter[i]=0;
	}
	spRec1.channels[RC_THROTTLE]=0;
80017d1a:	ec f9 00 7c 	ld.w	r9,r6[124]
80017d1e:	30 08       	mov	r8,0
80017d20:	f3 58 01 04 	st.h	r9[260],r8
	spRec2.channels[RC_THROTTLE]=0;
80017d24:	ec f9 01 58 	ld.w	r9,r6[344]
80017d28:	30 08       	mov	r8,0
80017d2a:	f3 58 01 04 	st.h	r9[260],r8
	 // USART options.
	 
    // Assign GPIO pins to USART_0.
    gpio_enable_module(USART_GPIO_MAP,
80017d2e:	30 2b       	mov	r11,2
80017d30:	ec fc 08 88 	ld.w	r12,r6[2184]
80017d34:	f0 16 00 88 	mcall	r6[544]
                     sizeof(USART_GPIO_MAP) / sizeof(USART_GPIO_MAP[0]));
	
    // Initialize the USART in RS232 mode.
    usart_init_rs232( (&REMOTE_UART), &usart_opt, sysclk_get_cpu_hz());
80017d38:	c2 af       	rcall	80017b8c <sysclk_get_cpu_hz>
80017d3a:	18 98       	mov	r8,r12
80017d3c:	10 9a       	mov	r10,r8
80017d3e:	ec fb 08 84 	ld.w	r11,r6[2180]
80017d42:	fc 7c 14 00 	mov	r12,-191488
80017d46:	f0 16 00 61 	mcall	r6[388]
	INTC_register_interrupt( (__int_handler) &spectrum_handler, AVR32_USART1_IRQ, AVR32_INTC_INT1);
80017d4a:	30 1a       	mov	r10,1
80017d4c:	e0 6b 02 80 	mov	r11,640
80017d50:	fe cc 01 ac 	sub	r12,pc,428
80017d54:	f0 16 00 3c 	mcall	r6[240]
	REMOTE_UART.ier=AVR32_USART_IER_RXRDY_MASK;
80017d58:	fc 78 14 00 	mov	r8,-191488
80017d5c:	30 19       	mov	r9,1
80017d5e:	91 29       	st.w	r8[0x8],r9
	//initUART_RX(&spRec1.receiver,  &USARTC1, USART_RXCINTLVL_LO_gc, BSEL_SPEKTRUM);
	//initUART_RX(&spRec2.receiver,  &USARTD0, USART_RXCINTLVL_LO_gc, BSEL_SPEKTRUM);

}
80017d60:	2f fd       	sub	sp,-4
80017d62:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80017d66:	00 00       	add	r0,r0
80017d68:	80 01       	ld.sh	r1,r0[0x0]
80017d6a:	7b 4a       	ld.w	r10,sp[0x50]

80017d6c <rc_get_channel>:
/**/
int16_t rc_get_channel(uint8_t index) {
80017d6c:	eb cd 40 c0 	pushm	r6-r7,lr
80017d70:	1a 97       	mov	r7,sp
80017d72:	20 1d       	sub	sp,4
80017d74:	48 b6       	lddpc	r6,80017da0 <rc_get_channel+0x34>
80017d76:	1e 26       	rsub	r6,pc
80017d78:	18 98       	mov	r8,r12
80017d7a:	ef 68 ff fc 	st.b	r7[-4],r8
	//if (checkReceiver1()<checkReceiver2()) {
		return spRec1.channels[index]-500;
80017d7e:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80017d82:	ec f8 00 7c 	ld.w	r8,r6[124]
80017d86:	f2 c9 ff 7e 	sub	r9,r9,-130
80017d8a:	f0 09 04 18 	ld.sh	r8,r8[r9<<0x1]
80017d8e:	f0 c8 01 f4 	sub	r8,r8,500
80017d92:	5c 88       	casts.h	r8
80017d94:	5c 88       	casts.h	r8
	//} else {
	//	return spRec2.channels[index]-500;
	//}
}
80017d96:	10 9c       	mov	r12,r8
80017d98:	2f fd       	sub	sp,-4
80017d9a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80017d9e:	00 00       	add	r0,r0
80017da0:	80 01       	ld.sh	r1,r0[0x0]
80017da2:	7b fa       	ld.w	r10,sp[0x7c]

80017da4 <rc_get_channel_neutral>:

int16_t rc_get_channel_neutral(uint8_t index) {
80017da4:	eb cd 40 e0 	pushm	r5-r7,lr
80017da8:	1a 97       	mov	r7,sp
80017daa:	20 2d       	sub	sp,8
80017dac:	4a 36       	lddpc	r6,80017e38 <rc_get_channel_neutral+0x94>
80017dae:	1e 26       	rsub	r6,pc
80017db0:	18 98       	mov	r8,r12
80017db2:	ef 68 ff f8 	st.b	r7[-8],r8
	int16_t value=rc_get_channel(index)-channelCenter[index];
80017db6:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80017dba:	10 9c       	mov	r12,r8
80017dbc:	f0 16 00 1b 	mcall	r6[108]
80017dc0:	18 98       	mov	r8,r12
80017dc2:	10 99       	mov	r9,r8
80017dc4:	ef 3a ff f8 	ld.ub	r10,r7[-8]
80017dc8:	ec f8 02 98 	ld.w	r8,r6[664]
80017dcc:	f0 0a 04 18 	ld.sh	r8,r8[r10<<0x1]
80017dd0:	f2 08 01 08 	sub	r8,r9,r8
80017dd4:	5c 88       	casts.h	r8
80017dd6:	ef 58 ff fe 	st.h	r7[-2],r8
	// clamp to dead zone
	if ((value>-DEADZONE)&&(value<DEADZONE)) value=0;
80017dda:	ef 08 ff fe 	ld.sh	r8,r7[-2]
80017dde:	10 9c       	mov	r12,r8
80017de0:	f0 16 00 1a 	mcall	r6[104]
80017de4:	14 98       	mov	r8,r10
80017de6:	16 99       	mov	r9,r11
80017de8:	30 05       	mov	r5,0
80017dea:	30 0a       	mov	r10,0
80017dec:	fc 1b c0 3e 	movh	r11,0xc03e
80017df0:	f0 16 00 1d 	mcall	r6[116]
80017df4:	18 98       	mov	r8,r12
80017df6:	58 08       	cp.w	r8,0
80017df8:	c0 20       	breq	80017dfc <rc_get_channel_neutral+0x58>
80017dfa:	30 15       	mov	r5,1
80017dfc:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
80017e00:	c1 60       	breq	80017e2c <rc_get_channel_neutral+0x88>
80017e02:	ef 08 ff fe 	ld.sh	r8,r7[-2]
80017e06:	10 9c       	mov	r12,r8
80017e08:	f0 16 00 1a 	mcall	r6[104]
80017e0c:	30 05       	mov	r5,0
80017e0e:	30 08       	mov	r8,0
80017e10:	fc 19 40 3e 	movh	r9,0x403e
80017e14:	f0 16 00 1d 	mcall	r6[116]
80017e18:	18 98       	mov	r8,r12
80017e1a:	58 08       	cp.w	r8,0
80017e1c:	c0 20       	breq	80017e20 <rc_get_channel_neutral+0x7c>
80017e1e:	30 15       	mov	r5,1
80017e20:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
80017e24:	c0 40       	breq	80017e2c <rc_get_channel_neutral+0x88>
80017e26:	30 08       	mov	r8,0
80017e28:	ef 58 ff fe 	st.h	r7[-2],r8
	return value;
80017e2c:	ef 08 ff fe 	ld.sh	r8,r7[-2]
}
80017e30:	10 9c       	mov	r12,r8
80017e32:	2f ed       	sub	sp,-8
80017e34:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80017e38:	80 01       	ld.sh	r1,r0[0x0]
80017e3a:	7c 32       	ld.w	r2,lr[0xc]

80017e3c <rc_center_channel>:

void rc_center_channel(uint8_t index){
80017e3c:	eb cd 40 e0 	pushm	r5-r7,lr
80017e40:	1a 97       	mov	r7,sp
80017e42:	20 1d       	sub	sp,4
80017e44:	48 a6       	lddpc	r6,80017e6c <rc_center_channel+0x30>
80017e46:	1e 26       	rsub	r6,pc
80017e48:	18 98       	mov	r8,r12
80017e4a:	ef 68 ff fc 	st.b	r7[-4],r8
	channelCenter[index]=rc_get_channel(index);
80017e4e:	ef 35 ff fc 	ld.ub	r5,r7[-4]
80017e52:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80017e56:	10 9c       	mov	r12,r8
80017e58:	f0 16 00 1b 	mcall	r6[108]
80017e5c:	18 98       	mov	r8,r12
80017e5e:	ec f9 02 98 	ld.w	r9,r6[664]
80017e62:	f2 05 0a 18 	st.h	r9[r5<<0x1],r8
}
80017e66:	2f fd       	sub	sp,-4
80017e68:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80017e6c:	80 01       	ld.sh	r1,r0[0x0]
80017e6e:	7c ca       	ld.w	r10,lr[0x30]

80017e70 <checkReceiver1>:

int8_t checkReceiver1() {
80017e70:	eb cd 40 c0 	pushm	r6-r7,lr
80017e74:	1a 97       	mov	r7,sp
80017e76:	20 3d       	sub	sp,12
80017e78:	4b 56       	lddpc	r6,80017f4c <checkReceiver1+0xdc>
80017e7a:	1e 26       	rsub	r6,pc
	int8_t i;
	uint32_t now = get_time_ticks();
80017e7c:	f0 16 00 4c 	mcall	r6[304]
80017e80:	18 98       	mov	r8,r12
80017e82:	ef 48 ff f8 	st.w	r7[-8],r8
	uint32_t duration=now-spRec1.last_update;
80017e86:	ec f8 00 7c 	ld.w	r8,r6[124]
80017e8a:	f0 f8 01 24 	ld.w	r8,r8[292]
80017e8e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80017e92:	10 19       	sub	r9,r8
80017e94:	ef 49 ff fc 	st.w	r7[-4],r9
	if (spRec1.valid==0) return -2;
80017e98:	ec f8 00 7c 	ld.w	r8,r6[124]
80017e9c:	f1 38 01 28 	ld.ub	r8,r8[296]
80017ea0:	58 08       	cp.w	r8,0
80017ea2:	c0 41       	brne	80017eaa <checkReceiver1+0x3a>
80017ea4:	e0 68 00 fe 	mov	r8,254
80017ea8:	c4 d8       	rjmp	80017f42 <checkReceiver1+0xd2>
	if (duration<100000) {
80017eaa:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017eae:	e0 58 86 9f 	cp.w	r8,99999
80017eb2:	e0 8b 00 04 	brhi	80017eba <checkReceiver1+0x4a>
		return 1;
80017eb6:	30 18       	mov	r8,1
80017eb8:	c4 58       	rjmp	80017f42 <checkReceiver1+0xd2>
	} else
	if (duration<1500000) {
80017eba:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017ebe:	e0 69 e3 5f 	mov	r9,58207
80017ec2:	ea 19 00 16 	orh	r9,0x16
80017ec6:	12 38       	cp.w	r8,r9
80017ec8:	e0 8b 00 17 	brhi	80017ef6 <checkReceiver1+0x86>
		spRec1.channels[RC_ROLL]=500;	
80017ecc:	ec f9 00 7c 	ld.w	r9,r6[124]
80017ed0:	e0 68 01 f4 	mov	r8,500
80017ed4:	f3 58 01 06 	st.h	r9[262],r8
		spRec1.channels[RC_PITCH]=500;	
80017ed8:	ec f9 00 7c 	ld.w	r9,r6[124]
80017edc:	e0 68 01 f4 	mov	r8,500
80017ee0:	f3 58 01 08 	st.h	r9[264],r8
		spRec1.channels[RC_YAW]=500;	
80017ee4:	ec f9 00 7c 	ld.w	r9,r6[124]
80017ee8:	e0 68 01 f4 	mov	r8,500
80017eec:	f3 58 01 0a 	st.h	r9[266],r8
		return -1; // brief drop out - hold pattern
80017ef0:	e0 68 00 ff 	mov	r8,255
80017ef4:	c2 78       	rjmp	80017f42 <checkReceiver1+0xd2>
		
	} else {
		spRec1.valid = 0;
80017ef6:	ec f9 00 7c 	ld.w	r9,r6[124]
80017efa:	30 08       	mov	r8,0
80017efc:	f3 68 01 28 	st.b	r9[296],r8
		for (i=1; i<8; i++) {
80017f00:	30 18       	mov	r8,1
80017f02:	ef 68 ff f7 	st.b	r7[-9],r8
80017f06:	c1 08       	rjmp	80017f26 <checkReceiver1+0xb6>
			spRec1.channels[i]=500;			
80017f08:	ef 28 ff f7 	ld.sb	r8,r7[-9]
80017f0c:	ec f9 00 7c 	ld.w	r9,r6[124]
80017f10:	f0 ca ff 7e 	sub	r10,r8,-130
80017f14:	e0 68 01 f4 	mov	r8,500
80017f18:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
		spRec1.channels[RC_YAW]=500;	
		return -1; // brief drop out - hold pattern
		
	} else {
		spRec1.valid = 0;
		for (i=1; i<8; i++) {
80017f1c:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80017f20:	2f f8       	sub	r8,-1
80017f22:	ef 68 ff f7 	st.b	r7[-9],r8
80017f26:	ef 39 ff f7 	ld.ub	r9,r7[-9]
80017f2a:	30 78       	mov	r8,7
80017f2c:	f0 09 18 00 	cp.b	r9,r8
80017f30:	fe 9a ff ec 	brle	80017f08 <checkReceiver1+0x98>
			spRec1.channels[i]=500;			
		}
		spRec1.channels[RC_THROTTLE]=0;
80017f34:	ec f9 00 7c 	ld.w	r9,r6[124]
80017f38:	30 08       	mov	r8,0
80017f3a:	f3 58 01 04 	st.h	r9[260],r8
		return -2; // fade - fail safe
80017f3e:	e0 68 00 fe 	mov	r8,254

	}

}
80017f42:	10 9c       	mov	r12,r8
80017f44:	2f dd       	sub	sp,-12
80017f46:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80017f4a:	00 00       	add	r0,r0
80017f4c:	80 01       	ld.sh	r1,r0[0x0]
80017f4e:	7c fe       	ld.w	lr,lr[0x3c]

80017f50 <checkReceiver2>:

int8_t checkReceiver2(){
80017f50:	eb cd 40 c0 	pushm	r6-r7,lr
80017f54:	1a 97       	mov	r7,sp
80017f56:	20 3d       	sub	sp,12
80017f58:	4a 96       	lddpc	r6,80017ffc <checkReceiver2+0xac>
80017f5a:	1e 26       	rsub	r6,pc
	int8_t i;
	uint32_t now = 0; //TCC0.CNT;
80017f5c:	30 08       	mov	r8,0
80017f5e:	ef 48 ff f8 	st.w	r7[-8],r8
	uint32_t duration = now - spRec2.last_update;
80017f62:	ec f8 01 58 	ld.w	r8,r6[344]
80017f66:	f0 f8 01 24 	ld.w	r8,r8[292]
80017f6a:	ee f9 ff f8 	ld.w	r9,r7[-8]
80017f6e:	10 19       	sub	r9,r8
80017f70:	ef 49 ff fc 	st.w	r7[-4],r9
	if (spRec2.valid==0) return -2;
80017f74:	ec f8 01 58 	ld.w	r8,r6[344]
80017f78:	f1 38 01 28 	ld.ub	r8,r8[296]
80017f7c:	58 08       	cp.w	r8,0
80017f7e:	c0 41       	brne	80017f86 <checkReceiver2+0x36>
80017f80:	e0 68 00 fe 	mov	r8,254
80017f84:	c3 88       	rjmp	80017ff4 <checkReceiver2+0xa4>
	if (duration < 200000) {
80017f86:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017f8a:	e2 58 0d 3f 	cp.w	r8,199999
80017f8e:	e0 8b 00 04 	brhi	80017f96 <checkReceiver2+0x46>
		return 1;
80017f92:	30 18       	mov	r8,1
80017f94:	c3 08       	rjmp	80017ff4 <checkReceiver2+0xa4>
	} else if (duration < 500000) {
80017f96:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017f9a:	e6 58 a1 1f 	cp.w	r8,499999
80017f9e:	e0 8b 00 05 	brhi	80017fa8 <checkReceiver2+0x58>
		return -1; // brief drop out - hold pattern
80017fa2:	e0 68 00 ff 	mov	r8,255
80017fa6:	c2 78       	rjmp	80017ff4 <checkReceiver2+0xa4>
	} else {
		spRec2.valid = 0;
80017fa8:	ec f9 01 58 	ld.w	r9,r6[344]
80017fac:	30 08       	mov	r8,0
80017fae:	f3 68 01 28 	st.b	r9[296],r8
		for (i=1; i<8; i++) {
80017fb2:	30 18       	mov	r8,1
80017fb4:	ef 68 ff f7 	st.b	r7[-9],r8
80017fb8:	c1 08       	rjmp	80017fd8 <checkReceiver2+0x88>
			spRec2.channels[i]=500;
80017fba:	ef 28 ff f7 	ld.sb	r8,r7[-9]
80017fbe:	ec f9 01 58 	ld.w	r9,r6[344]
80017fc2:	f0 ca ff 7e 	sub	r10,r8,-130
80017fc6:	e0 68 01 f4 	mov	r8,500
80017fca:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
		return 1;
	} else if (duration < 500000) {
		return -1; // brief drop out - hold pattern
	} else {
		spRec2.valid = 0;
		for (i=1; i<8; i++) {
80017fce:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80017fd2:	2f f8       	sub	r8,-1
80017fd4:	ef 68 ff f7 	st.b	r7[-9],r8
80017fd8:	ef 39 ff f7 	ld.ub	r9,r7[-9]
80017fdc:	30 78       	mov	r8,7
80017fde:	f0 09 18 00 	cp.b	r9,r8
80017fe2:	fe 9a ff ec 	brle	80017fba <checkReceiver2+0x6a>
			spRec2.channels[i]=500;
		}
		spRec2.channels[RC_THROTTLE]=0;
80017fe6:	ec f9 01 58 	ld.w	r9,r6[344]
80017fea:	30 08       	mov	r8,0
80017fec:	f3 58 01 04 	st.h	r9[260],r8
		return -2; // fade - fail safe
80017ff0:	e0 68 00 fe 	mov	r8,254

	}

}
80017ff4:	10 9c       	mov	r12,r8
80017ff6:	2f dd       	sub	sp,-12
80017ff8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80017ffc:	80 01       	ld.sh	r1,r0[0x0]
80017ffe:	7d de       	ld.w	lr,lr[0x74]

80018000 <rc_check_receivers>:

int8_t rc_check_receivers() {
80018000:	eb cd 40 c0 	pushm	r6-r7,lr
80018004:	1a 97       	mov	r7,sp
80018006:	48 66       	lddpc	r6,8001801c <rc_check_receivers+0x1c>
80018008:	1e 26       	rsub	r6,pc
	return checkReceiver1();// + checkReceiver2();
8001800a:	f0 16 01 8d 	mcall	r6[1588]
8001800e:	18 98       	mov	r8,r12
80018010:	5c 58       	castu.b	r8
80018012:	5c 58       	castu.b	r8
}
80018014:	10 9c       	mov	r12,r8
80018016:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001801a:	00 00       	add	r0,r0
8001801c:	80 01       	ld.sh	r1,r0[0x0]
8001801e:	7e 8c       	ld.w	r12,pc[0x20]

80018020 <sysclk_enable_pba_module>:
/**
 * \brief Enable a module clock derived from the PBA clock
 * \param index Index of the module clock in the PBAMASK register
 */
static inline void sysclk_enable_pba_module(unsigned int index)
{
80018020:	eb cd 40 c0 	pushm	r6-r7,lr
80018024:	1a 97       	mov	r7,sp
80018026:	20 1d       	sub	sp,4
80018028:	48 66       	lddpc	r6,80018040 <sysclk_enable_pba_module+0x20>
8001802a:	1e 26       	rsub	r6,pc
8001802c:	ef 4c ff fc 	st.w	r7[-4],r12
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_PBA, index);
80018030:	ee fb ff fc 	ld.w	r11,r7[-4]
80018034:	30 2c       	mov	r12,2
80018036:	f0 16 01 e7 	mcall	r6[1948]
}
8001803a:	2f fd       	sub	sp,-4
8001803c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80018040:	80 01       	ld.sh	r1,r0[0x0]
80018042:	7e ae       	ld.w	lr,pc[0x28]

80018044 <spi_reset>:
 *
 * \param spi       Base address of the SPI instance.
 *
 */
static inline void spi_reset(volatile avr32_spi_t *spi)
{
80018044:	eb cd 40 80 	pushm	r7,lr
80018048:	1a 97       	mov	r7,sp
8001804a:	20 1d       	sub	sp,4
8001804c:	ef 4c ff fc 	st.w	r7[-4],r12
	spi->cr = AVR32_SPI_CR_SWRST_MASK;
80018050:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018054:	e0 69 00 80 	mov	r9,128
80018058:	91 09       	st.w	r8[0x0],r9
}
8001805a:	2f fd       	sub	sp,-4
8001805c:	e3 cd 80 80 	ldm	sp++,r7,pc

80018060 <spi_set_master_mode>:
/*! \brief Set Master Mode of the SPI.
 *
 * \param spi         Base address of the SPI instance.
 */
static inline void spi_set_master_mode(volatile avr32_spi_t *spi)
{
80018060:	eb cd 40 80 	pushm	r7,lr
80018064:	1a 97       	mov	r7,sp
80018066:	20 1d       	sub	sp,4
80018068:	ef 4c ff fc 	st.w	r7[-4],r12
	spi->MR.mstr = 1;
8001806c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80018070:	72 18       	ld.w	r8,r9[0x4]
80018072:	30 1a       	mov	r10,1
80018074:	f1 da d0 01 	bfins	r8,r10,0x0,0x1
80018078:	93 18       	st.w	r9[0x4],r8
}
8001807a:	2f fd       	sub	sp,-4
8001807c:	e3 cd 80 80 	ldm	sp++,r7,pc

80018080 <spi_disable_modfault>:
/*! \brief Disable Modfault of the SPI.
 *
 * \param spi Base address of the SPI instance.
 */
static inline void spi_disable_modfault(volatile avr32_spi_t *spi)
{
80018080:	eb cd 40 80 	pushm	r7,lr
80018084:	1a 97       	mov	r7,sp
80018086:	20 1d       	sub	sp,4
80018088:	ef 4c ff fc 	st.w	r7[-4],r12
	spi->MR.modfdis = 1;
8001808c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80018090:	72 18       	ld.w	r8,r9[0x4]
80018092:	30 1a       	mov	r10,1
80018094:	f1 da d0 81 	bfins	r8,r10,0x4,0x1
80018098:	93 18       	st.w	r9[0x4],r8
}
8001809a:	2f fd       	sub	sp,-4
8001809c:	e3 cd 80 80 	ldm	sp++,r7,pc

800180a0 <spi_disable_loopback>:
/*! \brief Disable Loopback of the SPI.
 *
 * \param spi Base address of the SPI instance.
 */
static inline void spi_disable_loopback(volatile avr32_spi_t *spi)
{
800180a0:	eb cd 40 80 	pushm	r7,lr
800180a4:	1a 97       	mov	r7,sp
800180a6:	20 1d       	sub	sp,4
800180a8:	ef 4c ff fc 	st.w	r7[-4],r12
	spi->MR.llb = 0;
800180ac:	ee f9 ff fc 	ld.w	r9,r7[-4]
800180b0:	72 18       	ld.w	r8,r9[0x4]
800180b2:	30 0a       	mov	r10,0
800180b4:	f1 da d0 e1 	bfins	r8,r10,0x7,0x1
800180b8:	93 18       	st.w	r9[0x4],r8
}
800180ba:	2f fd       	sub	sp,-4
800180bc:	e3 cd 80 80 	ldm	sp++,r7,pc

800180c0 <spi_disable_chipselect_decoding>:
/*! \brief Disable Chip Select Decoding of the SPI.
 *
 * \param spi Base address of the SPI instance.
 */
static inline void spi_disable_chipselect_decoding(volatile avr32_spi_t *spi)
{
800180c0:	eb cd 40 80 	pushm	r7,lr
800180c4:	1a 97       	mov	r7,sp
800180c6:	20 1d       	sub	sp,4
800180c8:	ef 4c ff fc 	st.w	r7[-4],r12
	spi->MR.pcsdec = 0;
800180cc:	ee f9 ff fc 	ld.w	r9,r7[-4]
800180d0:	72 18       	ld.w	r8,r9[0x4]
800180d2:	30 0a       	mov	r10,0
800180d4:	f1 da d0 41 	bfins	r8,r10,0x2,0x1
800180d8:	93 18       	st.w	r9[0x4],r8
}
800180da:	2f fd       	sub	sp,-4
800180dc:	e3 cd 80 80 	ldm	sp++,r7,pc

800180e0 <spi_set_chipselect>:
 *
 * \param spi         Base address of the SPI instance.
 * \param chip_select Chip Select.
 */
static inline void spi_set_chipselect(volatile avr32_spi_t *spi,uint8_t chip_select)
{
800180e0:	eb cd 40 80 	pushm	r7,lr
800180e4:	1a 97       	mov	r7,sp
800180e6:	20 2d       	sub	sp,8
800180e8:	ef 4c ff fc 	st.w	r7[-4],r12
800180ec:	16 98       	mov	r8,r11
800180ee:	ef 68 ff f8 	st.b	r7[-8],r8
	spi->MR.pcs = chip_select;
800180f2:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800180f6:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
800180fa:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
800180fe:	ee f9 ff fc 	ld.w	r9,r7[-4]
80018102:	72 18       	ld.w	r8,r9[0x4]
80018104:	f1 da d2 04 	bfins	r8,r10,0x10,0x4
80018108:	93 18       	st.w	r9[0x4],r8
}
8001810a:	2f ed       	sub	sp,-8
8001810c:	e3 cd 80 80 	ldm	sp++,r7,pc

80018110 <spi_disable_variable_chipselect>:
/*! \brief Disable Variable Chip Select of the SPI.
 *
 * \param spi         Base address of the SPI instance.
 */
static inline void spi_disable_variable_chipselect(volatile avr32_spi_t *spi)
{
80018110:	eb cd 40 80 	pushm	r7,lr
80018114:	1a 97       	mov	r7,sp
80018116:	20 1d       	sub	sp,4
80018118:	ef 4c ff fc 	st.w	r7[-4],r12
	spi->MR.ps = 0;
8001811c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80018120:	72 18       	ld.w	r8,r9[0x4]
80018122:	30 0a       	mov	r10,0
80018124:	f1 da d0 21 	bfins	r8,r10,0x1,0x1
80018128:	93 18       	st.w	r9[0x4],r8
}
8001812a:	2f fd       	sub	sp,-4
8001812c:	e3 cd 80 80 	ldm	sp++,r7,pc

80018130 <spi_set_delay>:
 *
 * \param spi         Base address of the SPI instance.
 * \param delay       Delay.
 */
static inline void spi_set_delay(volatile avr32_spi_t *spi,uint8_t delay)
{
80018130:	eb cd 40 80 	pushm	r7,lr
80018134:	1a 97       	mov	r7,sp
80018136:	20 2d       	sub	sp,8
80018138:	ef 4c ff fc 	st.w	r7[-4],r12
8001813c:	16 98       	mov	r8,r11
8001813e:	ef 68 ff f8 	st.b	r7[-8],r8
	spi->MR.dlybcs = delay;
80018142:	ee f9 ff fc 	ld.w	r9,r7[-4]
80018146:	72 18       	ld.w	r8,r9[0x4]
80018148:	ef 3a ff f8 	ld.ub	r10,r7[-8]
8001814c:	f1 da d3 08 	bfins	r8,r10,0x18,0x8
80018150:	93 18       	st.w	r9[0x4],r8
}
80018152:	2f ed       	sub	sp,-8
80018154:	e3 cd 80 80 	ldm	sp++,r7,pc

80018158 <spi_master_init>:
 *
 * \param spi       Base address of the SPI instance.
 *
 */
static inline void spi_master_init(volatile avr32_spi_t *spi)
{
80018158:	eb cd 40 c0 	pushm	r6-r7,lr
8001815c:	1a 97       	mov	r7,sp
8001815e:	20 1d       	sub	sp,4
80018160:	49 86       	lddpc	r6,800181c0 <spi_master_init+0x68>
80018162:	1e 26       	rsub	r6,pc
80018164:	ef 4c ff fc 	st.w	r7[-4],r12
#ifdef AVR32_SPI
	sysclk_enable_pba_module(SYSCLK_SPI);	
#else
	if ((uint32_t)spi == AVR32_SPI0_ADDRESS)
80018168:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001816c:	fc 58 18 00 	cp.w	r8,-190464
80018170:	c0 41       	brne	80018178 <spi_master_init+0x20>
	{
	sysclk_enable_pba_module(SYSCLK_SPI0);	
80018172:	30 3c       	mov	r12,3
80018174:	c5 6f       	rcall	80018020 <sysclk_enable_pba_module>
80018176:	c0 88       	rjmp	80018186 <spi_master_init+0x2e>
	}
#ifdef AVR32_SPI1
	else if ((uint32_t)spi == AVR32_SPI1_ADDRESS)
80018178:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001817c:	fe 58 34 00 	cp.w	r8,-52224
80018180:	c0 31       	brne	80018186 <spi_master_init+0x2e>
	{
	sysclk_enable_pba_module(SYSCLK_SPI1);	
80018182:	30 bc       	mov	r12,11
80018184:	c4 ef       	rcall	80018020 <sysclk_enable_pba_module>
	}
#endif
#endif
  
  spi_reset(spi);
80018186:	ee fc ff fc 	ld.w	r12,r7[-4]
8001818a:	c5 df       	rcall	80018044 <spi_reset>
  spi_set_master_mode(spi);
8001818c:	ee fc ff fc 	ld.w	r12,r7[-4]
80018190:	c6 8f       	rcall	80018060 <spi_set_master_mode>
  spi_disable_modfault(spi);
80018192:	ee fc ff fc 	ld.w	r12,r7[-4]
80018196:	c7 5f       	rcall	80018080 <spi_disable_modfault>
  spi_disable_loopback(spi);
80018198:	ee fc ff fc 	ld.w	r12,r7[-4]
8001819c:	c8 2f       	rcall	800180a0 <spi_disable_loopback>
  spi_set_chipselect(spi,(1 << AVR32_SPI_MR_PCS_SIZE) - 1);
8001819e:	30 fb       	mov	r11,15
800181a0:	ee fc ff fc 	ld.w	r12,r7[-4]
800181a4:	c9 ef       	rcall	800180e0 <spi_set_chipselect>
  spi_disable_variable_chipselect(spi);
800181a6:	ee fc ff fc 	ld.w	r12,r7[-4]
800181aa:	cb 3f       	rcall	80018110 <spi_disable_variable_chipselect>
  spi_disable_chipselect_decoding(spi);
800181ac:	ee fc ff fc 	ld.w	r12,r7[-4]
800181b0:	c8 8f       	rcall	800180c0 <spi_disable_chipselect_decoding>
  spi_set_delay(spi,CONFIG_SPI_MASTER_DELAY_BCS);
800181b2:	30 0b       	mov	r11,0
800181b4:	ee fc ff fc 	ld.w	r12,r7[-4]
800181b8:	cb cf       	rcall	80018130 <spi_set_delay>
}
800181ba:	2f fd       	sub	sp,-4
800181bc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800181c0:	80 01       	ld.sh	r1,r0[0x0]
800181c2:	7f e6       	ld.w	r6,pc[0x78]

800181c4 <spi_select_device>:
 * \param spi Base address of the SPI instance.
 * \param device SPI device
 *
 */
static inline void spi_select_device(volatile avr32_spi_t *spi, struct spi_device *device)
{
800181c4:	eb cd 40 c0 	pushm	r6-r7,lr
800181c8:	1a 97       	mov	r7,sp
800181ca:	20 2d       	sub	sp,8
800181cc:	48 96       	lddpc	r6,800181f0 <spi_select_device+0x2c>
800181ce:	1e 26       	rsub	r6,pc
800181d0:	ef 4c ff fc 	st.w	r7[-4],r12
800181d4:	ef 4b ff f8 	st.w	r7[-8],r11
	spi_selectChip(spi,device->id);
800181d8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800181dc:	11 88       	ld.ub	r8,r8[0x0]
800181de:	10 9b       	mov	r11,r8
800181e0:	ee fc ff fc 	ld.w	r12,r7[-4]
800181e4:	f0 16 01 f1 	mcall	r6[1988]
}
800181e8:	2f ed       	sub	sp,-8
800181ea:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800181ee:	00 00       	add	r0,r0
800181f0:	80 01       	ld.sh	r1,r0[0x0]
800181f2:	80 52       	ld.sh	r2,r0[0xa]

800181f4 <spi_deselect_device>:
 * \param device SPI device
 *
 * \pre SPI device must be selected with spi_select_device() first
 */
static inline void spi_deselect_device(volatile avr32_spi_t *spi, struct spi_device *device)
{
800181f4:	eb cd 40 c0 	pushm	r6-r7,lr
800181f8:	1a 97       	mov	r7,sp
800181fa:	20 2d       	sub	sp,8
800181fc:	48 96       	lddpc	r6,80018220 <spi_deselect_device+0x2c>
800181fe:	1e 26       	rsub	r6,pc
80018200:	ef 4c ff fc 	st.w	r7[-4],r12
80018204:	ef 4b ff f8 	st.w	r7[-8],r11
	spi_unselectChip(spi,device->id);
80018208:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001820c:	11 88       	ld.ub	r8,r8[0x0]
8001820e:	10 9b       	mov	r11,r8
80018210:	ee fc ff fc 	ld.w	r12,r7[-4]
80018214:	f0 16 01 40 	mcall	r6[1280]
}
80018218:	2f ed       	sub	sp,-8
8001821a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001821e:	00 00       	add	r0,r0
80018220:	80 01       	ld.sh	r1,r0[0x0]
80018222:	80 82       	ld.uh	r2,r0[0x0]

80018224 <get_spi_in_buffer>:
#include "led.h"


static volatile spi_buffer_t spi_buffers[SPI_NUMBER];

uint8_t* get_spi_in_buffer(int spi_index) {
80018224:	eb cd 40 c0 	pushm	r6-r7,lr
80018228:	1a 97       	mov	r7,sp
8001822a:	20 1d       	sub	sp,4
8001822c:	48 96       	lddpc	r6,80018250 <get_spi_in_buffer+0x2c>
8001822e:	1e 26       	rsub	r6,pc
80018230:	ef 4c ff fc 	st.w	r7[-4],r12
	return spi_buffers[spi_index].SPIInBuffer;
80018234:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018238:	f0 08 10 54 	mul	r8,r8,84
8001823c:	f0 c9 ff dc 	sub	r9,r8,-36
80018240:	ec f8 00 2c 	ld.w	r8,r6[44]
80018244:	f2 08 00 08 	add	r8,r9,r8
}
80018248:	10 9c       	mov	r12,r8
8001824a:	2f fd       	sub	sp,-4
8001824c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80018250:	80 01       	ld.sh	r1,r0[0x0]
80018252:	80 b2       	ld.uh	r2,r0[0x6]

80018254 <spi0_int_handler>:

/** interrupt handler
  * manages sending and receiving data
*/
__attribute__((__interrupt__))
void spi0_int_handler() {
80018254:	eb cd 40 c0 	pushm	r6-r7,lr
80018258:	1a 97       	mov	r7,sp
8001825a:	48 56       	lddpc	r6,8001826c <spi0_int_handler+0x18>
8001825c:	1e 26       	rsub	r6,pc
	//LED_On(LED1);
	spi_handler(0);
8001825e:	30 0c       	mov	r12,0
80018260:	f0 16 01 1b 	mcall	r6[1132]
}
80018264:	e3 cd 40 c0 	ldm	sp++,r6-r7,lr
80018268:	d6 03       	rete
8001826a:	00 00       	add	r0,r0
8001826c:	80 01       	ld.sh	r1,r0[0x0]
8001826e:	80 e0       	ld.uh	r0,r0[0xc]

80018270 <spi1_int_handler>:

__attribute__((__interrupt__))
void spi1_int_handler() {
80018270:	eb cd 40 c0 	pushm	r6-r7,lr
80018274:	1a 97       	mov	r7,sp
80018276:	48 56       	lddpc	r6,80018288 <spi1_int_handler+0x18>
80018278:	1e 26       	rsub	r6,pc
	spi_handler(1);
8001827a:	30 1c       	mov	r12,1
8001827c:	f0 16 01 1b 	mcall	r6[1132]
}
80018280:	e3 cd 40 c0 	ldm	sp++,r6-r7,lr
80018284:	d6 03       	rete
80018286:	00 00       	add	r0,r0
80018288:	80 01       	ld.sh	r1,r0[0x0]
8001828a:	80 fc       	ld.uh	r12,r0[0xe]

8001828c <pdca_int_handler_spi0>:

/*! \brief The PDCA interrupt handler.
 */
__attribute__((__interrupt__))
static void pdca_int_handler_spi0(void)
{
8001828c:	eb cd 40 c0 	pushm	r6-r7,lr
80018290:	1a 97       	mov	r7,sp
80018292:	49 b6       	lddpc	r6,800182fc <pdca_int_handler_spi0+0x70>
80018294:	1e 26       	rsub	r6,pc
	AVR32_PDCA.channel[SPI0_DMA_CH_RECEIVE].isr;
80018296:	fc 78 00 00 	mov	r8,-196608
8001829a:	71 b8       	ld.w	r8,r8[0x6c]
	AVR32_PDCA.channel[SPI0_DMA_CH_TRANSMIT].isr;
8001829c:	fc 78 00 00 	mov	r8,-196608
800182a0:	70 b8       	ld.w	r8,r8[0x2c]
	pdca_disable(SPI0_DMA_CH_RECEIVE);
800182a2:	30 1c       	mov	r12,1
800182a4:	f0 16 00 89 	mcall	r6[548]
	pdca_disable(SPI0_DMA_CH_TRANSMIT);
800182a8:	30 0c       	mov	r12,0
800182aa:	f0 16 00 89 	mcall	r6[548]
	pdca_disable_interrupt_transfer_complete(SPI0_DMA_CH_RECEIVE);
800182ae:	30 1c       	mov	r12,1
800182b0:	f0 16 00 ca 	mcall	r6[808]
	spi_deselect_device(spi_buffers[0].spi, &spi_buffers[0].adc_spi);
800182b4:	ec f8 00 2c 	ld.w	r8,r6[44]
800182b8:	70 08       	ld.w	r8,r8[0x0]
800182ba:	ec f9 00 2c 	ld.w	r9,r6[44]
800182be:	2b 09       	sub	r9,-80
800182c0:	12 9b       	mov	r11,r9
800182c2:	10 9c       	mov	r12,r8
800182c4:	c9 8f       	rcall	800181f4 <spi_deselect_device>
   // call callback function to process data, at end of transfer
   // to process data, and maybe add some more data
   spi_buffers[0].SPIinBufferTail=spi_buffers[0].transmission_in_progress;
800182c6:	ec f8 00 2c 	ld.w	r8,r6[44]
800182ca:	f1 38 00 4a 	ld.ub	r8,r8[74]
800182ce:	5c 58       	castu.b	r8
800182d0:	ec f9 00 2c 	ld.w	r9,r6[44]
800182d4:	f3 68 00 45 	st.b	r9[69],r8
   spi_buffers[0].transmission_in_progress=0;
800182d8:	ec f9 00 2c 	ld.w	r9,r6[44]
800182dc:	30 08       	mov	r8,0
800182de:	f3 68 00 4a 	st.b	r9[74],r8
   //spi_buffers[0].traffic++;
   
   if ((spi_buffers[0].callbackFunction)) spi_buffers[0].callbackFunction();
800182e2:	ec f8 00 2c 	ld.w	r8,r6[44]
800182e6:	71 38       	ld.w	r8,r8[0x4c]
800182e8:	58 08       	cp.w	r8,0
800182ea:	c0 50       	breq	800182f4 <pdca_int_handler_spi0+0x68>
800182ec:	ec f8 00 2c 	ld.w	r8,r6[44]
800182f0:	71 38       	ld.w	r8,r8[0x4c]
800182f2:	5d 18       	icall	r8
   
}
800182f4:	e3 cd 40 c0 	ldm	sp++,r6-r7,lr
800182f8:	d6 03       	rete
800182fa:	00 00       	add	r0,r0
800182fc:	80 01       	ld.sh	r1,r0[0x0]
800182fe:	81 18       	st.w	r0[0x4],r8

80018300 <initSPI>:
/** initialises SPI interface
 *  this interface uses internal buffers and interrupts. 
 *  bytes in the outgoing buffer are sent automatically via interrupt
 */

void initSPI(volatile avr32_spi_t *spi, int spi_index){
80018300:	eb cd 40 c0 	pushm	r6-r7,lr
80018304:	1a 97       	mov	r7,sp
80018306:	20 2d       	sub	sp,8
80018308:	4e 16       	lddpc	r6,8001848c <initSPI+0x18c>
8001830a:	1e 26       	rsub	r6,pc
8001830c:	ef 4c ff fc 	st.w	r7[-4],r12
80018310:	ef 4b ff f8 	st.w	r7[-8],r11
	// init SPI
	spi_buffers[spi_index].spi= spi;
80018314:	ee f8 ff f8 	ld.w	r8,r7[-8]
80018318:	ec f9 00 2c 	ld.w	r9,r6[44]
8001831c:	f0 08 10 54 	mul	r8,r8,84
80018320:	f2 08 00 08 	add	r8,r9,r8
80018324:	ee f9 ff fc 	ld.w	r9,r7[-4]
80018328:	91 09       	st.w	r8[0x0],r9
	
	spi_buffers[spi_index].adc_spi.id=0;
8001832a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001832e:	ec f9 00 2c 	ld.w	r9,r6[44]
80018332:	f0 08 10 54 	mul	r8,r8,84
80018336:	f2 08 00 08 	add	r8,r9,r8
8001833a:	f0 c9 ff b0 	sub	r9,r8,-80
8001833e:	30 08       	mov	r8,0
80018340:	b2 88       	st.b	r9[0x0],r8
	
	spi_master_init(spi_buffers[spi_index].spi);
80018342:	ee f8 ff f8 	ld.w	r8,r7[-8]
80018346:	ec f9 00 2c 	ld.w	r9,r6[44]
8001834a:	f0 08 10 54 	mul	r8,r8,84
8001834e:	f2 08 00 08 	add	r8,r9,r8
80018352:	70 08       	ld.w	r8,r8[0x0]
80018354:	10 9c       	mov	r12,r8
80018356:	c0 1f       	rcall	80018158 <spi_master_init>
	spi_master_setup_device(spi_buffers[spi_index].spi, &spi_buffers[spi_index].adc_spi, SPI_MODE_0, 20000000, 0);
80018358:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001835c:	f0 08 10 54 	mul	r8,r8,84
80018360:	f0 c9 ff b0 	sub	r9,r8,-80
80018364:	ec f8 00 2c 	ld.w	r8,r6[44]
80018368:	f2 08 00 0b 	add	r11,r9,r8
8001836c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80018370:	ec f9 00 2c 	ld.w	r9,r6[44]
80018374:	f0 08 10 54 	mul	r8,r8,84
80018378:	f2 08 00 08 	add	r8,r9,r8
8001837c:	70 0c       	ld.w	r12,r8[0x0]
8001837e:	30 08       	mov	r8,0
80018380:	e0 69 2d 00 	mov	r9,11520
80018384:	ea 19 01 31 	orh	r9,0x131
80018388:	30 0a       	mov	r10,0
8001838a:	f0 16 01 61 	mcall	r6[1412]
	//spi_buffers[spi_index].spi->cr=AVR32_SPI_SWRST_MASK;
	
	//spi_buffers[spi_index].spi->mr=AVR32_SPI_MSTR_MASK;

	
	gpio_enable_module_pin(AVR32_SPI0_MOSI_0_0_PIN, AVR32_SPI0_MOSI_0_0_FUNCTION);
8001838e:	30 0b       	mov	r11,0
80018390:	36 0c       	mov	r12,96
80018392:	f0 16 00 3d 	mcall	r6[244]
	//gpio_configure_pin(AVR32_SPI0_MOSI_0_0_PIN, GPIO_DIR_OUTPUT | GPIO_INIT_LOW);
	gpio_enable_module_pin(AVR32_SPI0_MISO_0_0_PIN, AVR32_SPI0_MISO_0_0_FUNCTION);
80018396:	30 0b       	mov	r11,0
80018398:	36 1c       	mov	r12,97
8001839a:	f0 16 00 3d 	mcall	r6[244]
	gpio_enable_module_pin(AVR32_SPI0_SCK_0_0_PIN, AVR32_SPI0_SCK_0_0_FUNCTION);
8001839e:	30 0b       	mov	r11,0
800183a0:	36 2c       	mov	r12,98
800183a2:	f0 16 00 3d 	mcall	r6[244]

	spi_buffers[spi_index].SPIinBufferHead=0;
800183a6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800183aa:	ec f9 00 2c 	ld.w	r9,r6[44]
800183ae:	f0 08 10 54 	mul	r8,r8,84
800183b2:	f2 08 00 08 	add	r8,r9,r8
800183b6:	f0 c9 ff bc 	sub	r9,r8,-68
800183ba:	30 08       	mov	r8,0
800183bc:	b2 88       	st.b	r9[0x0],r8
	spi_buffers[spi_index].SPIinBufferTail=0;
800183be:	ee f8 ff f8 	ld.w	r8,r7[-8]
800183c2:	ec f9 00 2c 	ld.w	r9,r6[44]
800183c6:	f0 08 10 54 	mul	r8,r8,84
800183ca:	f2 08 00 08 	add	r8,r9,r8
800183ce:	f0 c9 ff bc 	sub	r9,r8,-68
800183d2:	30 08       	mov	r8,0
800183d4:	b2 98       	st.b	r9[0x1],r8
	spi_buffers[spi_index].SPIoutBufferHead=0;
800183d6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800183da:	ec f9 00 2c 	ld.w	r9,r6[44]
800183de:	f0 08 10 54 	mul	r8,r8,84
800183e2:	f2 08 00 08 	add	r8,r9,r8
800183e6:	f0 c9 ff bc 	sub	r9,r8,-68
800183ea:	30 08       	mov	r8,0
800183ec:	b2 a8       	st.b	r9[0x2],r8
	spi_buffers[spi_index].SPIoutBufferTail=0;
800183ee:	ee f8 ff f8 	ld.w	r8,r7[-8]
800183f2:	ec f9 00 2c 	ld.w	r9,r6[44]
800183f6:	f0 08 10 54 	mul	r8,r8,84
800183fa:	f2 08 00 08 	add	r8,r9,r8
800183fe:	f0 c9 ff bc 	sub	r9,r8,-68
80018402:	30 08       	mov	r8,0
80018404:	b2 b8       	st.b	r9[0x3],r8
	spi_buffers[spi_index].spiReceiverOn=1;
80018406:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001840a:	ec f9 00 2c 	ld.w	r9,r6[44]
8001840e:	f0 08 10 54 	mul	r8,r8,84
80018412:	f2 08 00 08 	add	r8,r9,r8
80018416:	f0 c9 ff b8 	sub	r9,r8,-72
8001841a:	30 18       	mov	r8,1
8001841c:	b2 88       	st.b	r9[0x0],r8
	spi_buffers[spi_index].traffic=0;
8001841e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80018422:	ec f9 00 2c 	ld.w	r9,r6[44]
80018426:	f0 08 10 54 	mul	r8,r8,84
8001842a:	f2 08 00 08 	add	r8,r9,r8
8001842e:	f0 c9 ff b8 	sub	r9,r8,-72
80018432:	30 08       	mov	r8,0
80018434:	b2 98       	st.b	r9[0x1],r8
	spi_buffers[spi_index].automatic=1;
80018436:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001843a:	ec f9 00 2c 	ld.w	r9,r6[44]
8001843e:	f0 08 10 54 	mul	r8,r8,84
80018442:	f2 08 00 08 	add	r8,r9,r8
80018446:	f0 c9 ff b8 	sub	r9,r8,-72
8001844a:	30 18       	mov	r8,1
8001844c:	b2 b8       	st.b	r9[0x3],r8
	spi_buffers[spi_index].callbackFunction=0;
8001844e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80018452:	ec f9 00 2c 	ld.w	r9,r6[44]
80018456:	f0 08 10 54 	mul	r8,r8,84
8001845a:	f2 08 00 08 	add	r8,r9,r8
8001845e:	2b 48       	sub	r8,-76
80018460:	30 09       	mov	r9,0
80018462:	91 09       	st.w	r8[0x0],r9
	spi_buffers[spi_index].transmission_in_progress=0;
80018464:	ee f8 ff f8 	ld.w	r8,r7[-8]
80018468:	ec f9 00 2c 	ld.w	r9,r6[44]
8001846c:	f0 08 10 54 	mul	r8,r8,84
80018470:	f2 08 00 08 	add	r8,r9,r8
80018474:	f0 c9 ff b8 	sub	r9,r8,-72
80018478:	30 08       	mov	r8,0
8001847a:	b2 a8       	st.b	r9[0x2],r8
    //INTC_register_interrupt(&spi0_int_handler, AVR32_SPI0_IRQ, AVR32_INTC_INT0);
	
    //INTC_register_interrupt(&spi1_int_handler, AVR32_SPI1_IRQ, AVR32_INTC_INT0);
	//spi_buffers[spi_index].spi->imr = AVR32_SPI_RDRF;

	enableSPI(spi_index);
8001847c:	ee fc ff f8 	ld.w	r12,r7[-8]
80018480:	f0 16 01 a2 	mcall	r6[1672]
	//spi_buffers[spi_index].spi->cr=AVR32_SPI_SPIEN_MASK;	
}
80018484:	2f ed       	sub	sp,-8
80018486:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001848a:	00 00       	add	r0,r0
8001848c:	80 01       	ld.sh	r1,r0[0x0]
8001848e:	81 8e       	st.w	r0[0x20],lr

80018490 <enableSPI>:

void enableSPI(int spi_index) {
80018490:	eb cd 40 c0 	pushm	r6-r7,lr
80018494:	1a 97       	mov	r7,sp
80018496:	20 1d       	sub	sp,4
80018498:	48 a6       	lddpc	r6,800184c0 <enableSPI+0x30>
8001849a:	1e 26       	rsub	r6,pc
8001849c:	ef 4c ff fc 	st.w	r7[-4],r12
	spi_enable(spi_buffers[spi_index].spi);
800184a0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800184a4:	ec f9 00 2c 	ld.w	r9,r6[44]
800184a8:	f0 08 10 54 	mul	r8,r8,84
800184ac:	f2 08 00 08 	add	r8,r9,r8
800184b0:	70 08       	ld.w	r8,r8[0x0]
800184b2:	10 9c       	mov	r12,r8
800184b4:	f0 16 01 a4 	mcall	r6[1680]
}
800184b8:	2f fd       	sub	sp,-4
800184ba:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800184be:	00 00       	add	r0,r0
800184c0:	80 01       	ld.sh	r1,r0[0x0]
800184c2:	83 1e       	st.w	r1[0x4],lr

800184c4 <disableSPI>:

void disableSPI(int spi_index) {
800184c4:	eb cd 40 c0 	pushm	r6-r7,lr
800184c8:	1a 97       	mov	r7,sp
800184ca:	20 1d       	sub	sp,4
800184cc:	48 a6       	lddpc	r6,800184f4 <disableSPI+0x30>
800184ce:	1e 26       	rsub	r6,pc
800184d0:	ef 4c ff fc 	st.w	r7[-4],r12
	spi_disable(spi_buffers[spi_index].spi);
800184d4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800184d8:	ec f9 00 2c 	ld.w	r9,r6[44]
800184dc:	f0 08 10 54 	mul	r8,r8,84
800184e0:	f2 08 00 08 	add	r8,r9,r8
800184e4:	70 08       	ld.w	r8,r8[0x0]
800184e6:	10 9c       	mov	r12,r8
800184e8:	f0 16 01 49 	mcall	r6[1316]
}
800184ec:	2f fd       	sub	sp,-4
800184ee:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800184f2:	00 00       	add	r0,r0
800184f4:	80 01       	ld.sh	r1,r0[0x0]
800184f6:	83 52       	st.w	r1[0x14],r2

800184f8 <spiInitDMA>:


// initialise DMA for SPI transfers
  // PDCA channel options
  
void spiInitDMA(int spi_index, int block_size) {
800184f8:	eb cd 40 c0 	pushm	r6-r7,lr
800184fc:	1a 97       	mov	r7,sp
800184fe:	20 2d       	sub	sp,8
80018500:	49 c6       	lddpc	r6,80018570 <spiInitDMA+0x78>
80018502:	1e 26       	rsub	r6,pc
80018504:	ef 4c ff fc 	st.w	r7[-4],r12
80018508:	ef 4b ff f8 	st.w	r7[-8],r11
    .size = 12,                               // transfer counter
    .r_addr = NULL,                           // next memory address
    .r_size = 0,                              // next transfer counter
    .transfer_size = PDCA_TRANSFER_SIZE_BYTE  // select size of the transfer
  };
  PDCA_TX_OPTIONS.addr=(void *) spi_buffers[spi_index].SPIOutBuffer;
8001850c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80018510:	12 98       	mov	r8,r9
80018512:	a1 78       	lsl	r8,0x1
80018514:	12 08       	add	r8,r9
80018516:	f0 09 15 03 	lsl	r9,r8,0x3
8001851a:	10 19       	sub	r9,r8
8001851c:	f2 c8 ff ff 	sub	r8,r9,-1
80018520:	f0 09 15 02 	lsl	r9,r8,0x2
80018524:	ec f8 00 2c 	ld.w	r8,r6[44]
80018528:	10 09       	add	r9,r8
8001852a:	ec f8 04 a4 	ld.w	r8,r6[1188]
8001852e:	91 09       	st.w	r8[0x0],r9
  PDCA_RX_OPTIONS.addr=(void *) spi_buffers[spi_index].SPIInBuffer;
80018530:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018534:	f0 08 10 54 	mul	r8,r8,84
80018538:	f0 c9 ff dc 	sub	r9,r8,-36
8001853c:	ec f8 00 2c 	ld.w	r8,r6[44]
80018540:	10 09       	add	r9,r8
80018542:	ec f8 04 a0 	ld.w	r8,r6[1184]
80018546:	91 09       	st.w	r8[0x0],r9
  // Init PDCA channel with the pdca_options.
  pdca_init_channel(SPI0_DMA_CH_TRANSMIT, &PDCA_TX_OPTIONS); // init PDCA channel with options.
80018548:	ec fb 04 a4 	ld.w	r11,r6[1188]
8001854c:	30 0c       	mov	r12,0
8001854e:	f0 16 00 af 	mcall	r6[700]
  pdca_init_channel(SPI0_DMA_CH_RECEIVE, &PDCA_RX_OPTIONS); // init PDCA channel with options.
80018552:	ec fb 04 a0 	ld.w	r11,r6[1184]
80018556:	30 1c       	mov	r12,1
80018558:	f0 16 00 af 	mcall	r6[700]

  // Register PDCA IRQ interrupt.

  INTC_register_interrupt( (__int_handler) &pdca_int_handler_spi0, SPI0_DMA_IRQ, AVR32_INTC_INT0);
8001855c:	30 0a       	mov	r10,0
8001855e:	36 1b       	mov	r11,97
80018560:	fe cc 02 d4 	sub	r12,pc,724
80018564:	f0 16 00 3c 	mcall	r6[240]
  
  
}
80018568:	2f ed       	sub	sp,-8
8001856a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001856e:	00 00       	add	r0,r0
80018570:	80 01       	ld.sh	r1,r0[0x0]
80018572:	83 86       	st.w	r1[0x20],r6

80018574 <spiTriggerDMA>:

void spiTriggerDMA(int spi_index, int block_size){
80018574:	eb cd 40 c0 	pushm	r6-r7,lr
80018578:	1a 97       	mov	r7,sp
8001857a:	20 2d       	sub	sp,8
8001857c:	4a 86       	lddpc	r6,8001861c <spiTriggerDMA+0xa8>
8001857e:	1e 26       	rsub	r6,pc
80018580:	ef 4c ff fc 	st.w	r7[-4],r12
80018584:	ef 4b ff f8 	st.w	r7[-8],r11
	//spi_buffers[spi_index].transmission_in_progress=block_size;
	//spi_buffers[spi_index].SPIInBuffer[0]=42;
	//spi_buffers[spi_index].SPIInBuffer[3]=42;
	//spi_buffers[spi_index].SPIInBuffer[6]=42;
	//spi_buffers[spi_index].SPIInBuffer[9]=42;
	pdca_load_channel(SPI0_DMA_CH_TRANSMIT, (void *)spi_buffers[spi_index].SPIOutBuffer, block_size);
80018588:	ee fa ff f8 	ld.w	r10,r7[-8]
8001858c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80018590:	12 98       	mov	r8,r9
80018592:	a1 78       	lsl	r8,0x1
80018594:	12 08       	add	r8,r9
80018596:	f0 09 15 03 	lsl	r9,r8,0x3
8001859a:	10 19       	sub	r9,r8
8001859c:	f2 c8 ff ff 	sub	r8,r9,-1
800185a0:	f0 09 15 02 	lsl	r9,r8,0x2
800185a4:	ec f8 00 2c 	ld.w	r8,r6[44]
800185a8:	f2 08 00 08 	add	r8,r9,r8
800185ac:	10 9b       	mov	r11,r8
800185ae:	30 0c       	mov	r12,0
800185b0:	f0 16 01 05 	mcall	r6[1044]
	pdca_load_channel(SPI0_DMA_CH_RECEIVE,  (void *)(spi_buffers[spi_index].SPIInBuffer), block_size);
800185b4:	ee f9 ff f8 	ld.w	r9,r7[-8]
800185b8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800185bc:	f0 08 10 54 	mul	r8,r8,84
800185c0:	f0 ca ff dc 	sub	r10,r8,-36
800185c4:	ec f8 00 2c 	ld.w	r8,r6[44]
800185c8:	f4 08 00 08 	add	r8,r10,r8
800185cc:	12 9a       	mov	r10,r9
800185ce:	10 9b       	mov	r11,r8
800185d0:	30 1c       	mov	r12,1
800185d2:	f0 16 01 05 	mcall	r6[1044]

	
	spi_select_device(spi_buffers[spi_index].spi, &spi_buffers[spi_index].adc_spi);
800185d6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800185da:	f0 08 10 54 	mul	r8,r8,84
800185de:	f0 c9 ff b0 	sub	r9,r8,-80
800185e2:	ec f8 00 2c 	ld.w	r8,r6[44]
800185e6:	10 09       	add	r9,r8
800185e8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800185ec:	ec fa 00 2c 	ld.w	r10,r6[44]
800185f0:	f0 08 10 54 	mul	r8,r8,84
800185f4:	f4 08 00 08 	add	r8,r10,r8
800185f8:	70 08       	ld.w	r8,r8[0x0]
800185fa:	12 9b       	mov	r11,r9
800185fc:	10 9c       	mov	r12,r8
800185fe:	fe b0 fd e3 	rcall	800181c4 <spi_select_device>
	// Enable pdca interrupt each time the reload counter reaches zero, i.e. each time
    // the whole block was received
	pdca_enable_interrupt_transfer_complete(SPI0_DMA_CH_RECEIVE);
80018602:	30 1c       	mov	r12,1
80018604:	f0 16 01 03 	mcall	r6[1036]
	
	pdca_enable(SPI0_DMA_CH_RECEIVE);
80018608:	30 1c       	mov	r12,1
8001860a:	f0 16 00 b9 	mcall	r6[740]
	pdca_enable(SPI0_DMA_CH_TRANSMIT);
8001860e:	30 0c       	mov	r12,0
80018610:	f0 16 00 b9 	mcall	r6[740]
    
}
80018614:	2f ed       	sub	sp,-8
80018616:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001861a:	00 00       	add	r0,r0
8001861c:	80 01       	ld.sh	r1,r0[0x0]
8001861e:	84 02       	ld.sh	r2,r2[0x0]

80018620 <setSPIcallBack>:

/** specify a callback function, that gets called when the SPI buffer is empty
 */
void setSPIcallBack(int spi_index, functionpointer* functionPointer) {
80018620:	eb cd 40 c0 	pushm	r6-r7,lr
80018624:	1a 97       	mov	r7,sp
80018626:	20 2d       	sub	sp,8
80018628:	48 b6       	lddpc	r6,80018654 <setSPIcallBack+0x34>
8001862a:	1e 26       	rsub	r6,pc
8001862c:	ef 4c ff fc 	st.w	r7[-4],r12
80018630:	ef 4b ff f8 	st.w	r7[-8],r11
	spi_buffers[spi_index].callbackFunction=functionPointer;
80018634:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018638:	ec f9 00 2c 	ld.w	r9,r6[44]
8001863c:	f0 08 10 54 	mul	r8,r8,84
80018640:	f2 08 00 08 	add	r8,r9,r8
80018644:	2b 48       	sub	r8,-76
80018646:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001864a:	91 09       	st.w	r8[0x0],r9
}
8001864c:	2f ed       	sub	sp,-8
8001864e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80018652:	00 00       	add	r0,r0
80018654:	80 01       	ld.sh	r1,r0[0x0]
80018656:	84 ae       	ld.uh	lr,r2[0x4]

80018658 <pauseSPI>:

/** pauses sending 
  * be careful not to overfill the buffer - deadlock may occur  
  */
void pauseSPI(int spi_index){
80018658:	eb cd 40 c0 	pushm	r6-r7,lr
8001865c:	1a 97       	mov	r7,sp
8001865e:	20 1d       	sub	sp,4
80018660:	48 a6       	lddpc	r6,80018688 <pauseSPI+0x30>
80018662:	1e 26       	rsub	r6,pc
80018664:	ef 4c ff fc 	st.w	r7[-4],r12
   spi_buffers[spi_index].automatic=0;
80018668:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001866c:	ec f9 00 2c 	ld.w	r9,r6[44]
80018670:	f0 08 10 54 	mul	r8,r8,84
80018674:	f2 08 00 08 	add	r8,r9,r8
80018678:	f0 c9 ff b8 	sub	r9,r8,-72
8001867c:	30 08       	mov	r8,0
8001867e:	b2 b8       	st.b	r9[0x3],r8
}
80018680:	2f fd       	sub	sp,-4
80018682:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80018686:	00 00       	add	r0,r0
80018688:	80 01       	ld.sh	r1,r0[0x0]
8001868a:	84 e6       	ld.uh	r6,r2[0xc]

8001868c <resumeSPI>:

/** resumes automatic sending
 */
void resumeSPI(int spi_index){
8001868c:	eb cd 40 c0 	pushm	r6-r7,lr
80018690:	1a 97       	mov	r7,sp
80018692:	20 1d       	sub	sp,4
80018694:	48 c6       	lddpc	r6,800186c4 <resumeSPI+0x38>
80018696:	1e 26       	rsub	r6,pc
80018698:	ef 4c ff fc 	st.w	r7[-4],r12
  spi_buffers[spi_index].automatic=1;
8001869c:	ee f8 ff fc 	ld.w	r8,r7[-4]
800186a0:	ec f9 00 2c 	ld.w	r9,r6[44]
800186a4:	f0 08 10 54 	mul	r8,r8,84
800186a8:	f2 08 00 08 	add	r8,r9,r8
800186ac:	f0 c9 ff b8 	sub	r9,r8,-72
800186b0:	30 18       	mov	r8,1
800186b2:	b2 b8       	st.b	r9[0x3],r8
  startSPI(spi_index);
800186b4:	ee fc ff fc 	ld.w	r12,r7[-4]
800186b8:	f0 16 00 e4 	mcall	r6[912]
}
800186bc:	2f fd       	sub	sp,-4
800186be:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800186c2:	00 00       	add	r0,r0
800186c4:	80 01       	ld.sh	r1,r0[0x0]
800186c6:	85 1a       	st.w	r2[0x4],r10

800186c8 <activateReceiveSPI>:

void activateReceiveSPI(int spi_index){
800186c8:	eb cd 40 c0 	pushm	r6-r7,lr
800186cc:	1a 97       	mov	r7,sp
800186ce:	20 1d       	sub	sp,4
800186d0:	48 a6       	lddpc	r6,800186f8 <activateReceiveSPI+0x30>
800186d2:	1e 26       	rsub	r6,pc
800186d4:	ef 4c ff fc 	st.w	r7[-4],r12

  spi_buffers[spi_index].spiReceiverOn=1;
800186d8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800186dc:	ec f9 00 2c 	ld.w	r9,r6[44]
800186e0:	f0 08 10 54 	mul	r8,r8,84
800186e4:	f2 08 00 08 	add	r8,r9,r8
800186e8:	f0 c9 ff b8 	sub	r9,r8,-72
800186ec:	30 18       	mov	r8,1
800186ee:	b2 88       	st.b	r9[0x0],r8
}
800186f0:	2f fd       	sub	sp,-4
800186f2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800186f6:	00 00       	add	r0,r0
800186f8:	80 01       	ld.sh	r1,r0[0x0]
800186fa:	85 56       	st.w	r2[0x14],r6

800186fc <deactivateReceiveSPI>:

void deactivateReceiveSPI(int spi_index){
800186fc:	eb cd 40 c0 	pushm	r6-r7,lr
80018700:	1a 97       	mov	r7,sp
80018702:	20 1d       	sub	sp,4
80018704:	48 a6       	lddpc	r6,8001872c <deactivateReceiveSPI+0x30>
80018706:	1e 26       	rsub	r6,pc
80018708:	ef 4c ff fc 	st.w	r7[-4],r12
  spi_buffers[spi_index].spiReceiverOn=0;
8001870c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018710:	ec f9 00 2c 	ld.w	r9,r6[44]
80018714:	f0 08 10 54 	mul	r8,r8,84
80018718:	f2 08 00 08 	add	r8,r9,r8
8001871c:	f0 c9 ff b8 	sub	r9,r8,-72
80018720:	30 08       	mov	r8,0
80018722:	b2 88       	st.b	r9[0x0],r8
}
80018724:	2f fd       	sub	sp,-4
80018726:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001872a:	00 00       	add	r0,r0
8001872c:	80 01       	ld.sh	r1,r0[0x0]
8001872e:	85 8a       	st.w	r2[0x20],r10

80018730 <getTraffic>:
uint8_t getTraffic(int spi_index) {return spi_buffers[spi_index].traffic;}
80018730:	eb cd 40 c0 	pushm	r6-r7,lr
80018734:	1a 97       	mov	r7,sp
80018736:	20 1d       	sub	sp,4
80018738:	48 a6       	lddpc	r6,80018760 <getTraffic+0x30>
8001873a:	1e 26       	rsub	r6,pc
8001873c:	ef 4c ff fc 	st.w	r7[-4],r12
80018740:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018744:	ec f9 00 2c 	ld.w	r9,r6[44]
80018748:	f0 08 10 54 	mul	r8,r8,84
8001874c:	f2 08 00 08 	add	r8,r9,r8
80018750:	2b 88       	sub	r8,-72
80018752:	11 98       	ld.ub	r8,r8[0x1]
80018754:	5c 58       	castu.b	r8
80018756:	10 9c       	mov	r12,r8
80018758:	2f fd       	sub	sp,-4
8001875a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001875e:	00 00       	add	r0,r0
80018760:	80 01       	ld.sh	r1,r0[0x0]
80018762:	85 be       	st.w	r2[0x2c],lr

80018764 <readSPI>:


/** reads one byte from the incoming SPI buffer
 */
uint8_t readSPI(int spi_index){
80018764:	eb cd 40 c0 	pushm	r6-r7,lr
80018768:	1a 97       	mov	r7,sp
8001876a:	20 2d       	sub	sp,8
8001876c:	4a b6       	lddpc	r6,80018818 <readSPI+0xb4>
8001876e:	1e 26       	rsub	r6,pc
80018770:	ef 4c ff f8 	st.w	r7[-8],r12
  uint8_t byte;
  // if buffer empty, wait for incoming data
  while (spi_buffers[spi_index].SPIinBufferHead==spi_buffers[spi_index].SPIinBufferTail);
80018774:	ee f8 ff f8 	ld.w	r8,r7[-8]
80018778:	ec f9 00 2c 	ld.w	r9,r6[44]
8001877c:	f0 08 10 54 	mul	r8,r8,84
80018780:	f2 08 00 08 	add	r8,r9,r8
80018784:	2b c8       	sub	r8,-68
80018786:	11 88       	ld.ub	r8,r8[0x0]
80018788:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8001878c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80018790:	ec fa 00 2c 	ld.w	r10,r6[44]
80018794:	f0 08 10 54 	mul	r8,r8,84
80018798:	f4 08 00 08 	add	r8,r10,r8
8001879c:	2b c8       	sub	r8,-68
8001879e:	11 98       	ld.ub	r8,r8[0x1]
800187a0:	5c 58       	castu.b	r8
800187a2:	f0 09 18 00 	cp.b	r9,r8
800187a6:	ce 70       	breq	80018774 <readSPI+0x10>
  byte=spi_buffers[spi_index].SPIInBuffer[spi_buffers[spi_index].SPIinBufferTail];
800187a8:	ee f9 ff f8 	ld.w	r9,r7[-8]
800187ac:	ee f8 ff f8 	ld.w	r8,r7[-8]
800187b0:	ec fa 00 2c 	ld.w	r10,r6[44]
800187b4:	f0 08 10 54 	mul	r8,r8,84
800187b8:	f4 08 00 08 	add	r8,r10,r8
800187bc:	2b c8       	sub	r8,-68
800187be:	11 98       	ld.ub	r8,r8[0x1]
800187c0:	5c 58       	castu.b	r8
800187c2:	ec fa 00 2c 	ld.w	r10,r6[44]
800187c6:	f2 09 10 54 	mul	r9,r9,84
800187ca:	f4 09 00 09 	add	r9,r10,r9
800187ce:	f2 08 00 08 	add	r8,r9,r8
800187d2:	2d c8       	sub	r8,-36
800187d4:	11 88       	ld.ub	r8,r8[0x0]
800187d6:	ef 68 ff ff 	st.b	r7[-1],r8
  spi_buffers[spi_index].SPIinBufferTail=  (spi_buffers[spi_index].SPIinBufferTail+1)&SPI_BUFFER_MASK;
800187da:	ee f9 ff f8 	ld.w	r9,r7[-8]
800187de:	ee f8 ff f8 	ld.w	r8,r7[-8]
800187e2:	ec fa 00 2c 	ld.w	r10,r6[44]
800187e6:	f0 08 10 54 	mul	r8,r8,84
800187ea:	f4 08 00 08 	add	r8,r10,r8
800187ee:	2b c8       	sub	r8,-68
800187f0:	11 98       	ld.ub	r8,r8[0x1]
800187f2:	5c 58       	castu.b	r8
800187f4:	2f f8       	sub	r8,-1
800187f6:	5c 58       	castu.b	r8
800187f8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800187fc:	ec fa 00 2c 	ld.w	r10,r6[44]
80018800:	f2 09 10 54 	mul	r9,r9,84
80018804:	f4 09 00 09 	add	r9,r10,r9
80018808:	2b c9       	sub	r9,-68
8001880a:	b2 98       	st.b	r9[0x1],r8
  return byte;
8001880c:	ef 38 ff ff 	ld.ub	r8,r7[-1]

}
80018810:	10 9c       	mov	r12,r8
80018812:	2f ed       	sub	sp,-8
80018814:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80018818:	80 01       	ld.sh	r1,r0[0x0]
8001881a:	85 f2       	st.w	r2[0x3c],r2

8001881c <clearSPIReadBuffer>:

void clearSPIReadBuffer(int spi_index){
8001881c:	eb cd 40 c0 	pushm	r6-r7,lr
80018820:	1a 97       	mov	r7,sp
80018822:	20 1d       	sub	sp,4
80018824:	48 e6       	lddpc	r6,8001885c <clearSPIReadBuffer+0x40>
80018826:	1e 26       	rsub	r6,pc
80018828:	ef 4c ff fc 	st.w	r7[-4],r12
  spi_buffers[spi_index].SPIinBufferTail=spi_buffers[spi_index].SPIinBufferHead;
8001882c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80018830:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018834:	ec fa 00 2c 	ld.w	r10,r6[44]
80018838:	f0 08 10 54 	mul	r8,r8,84
8001883c:	f4 08 00 08 	add	r8,r10,r8
80018840:	2b c8       	sub	r8,-68
80018842:	11 88       	ld.ub	r8,r8[0x0]
80018844:	5c 58       	castu.b	r8
80018846:	ec fa 00 2c 	ld.w	r10,r6[44]
8001884a:	f2 09 10 54 	mul	r9,r9,84
8001884e:	f4 09 00 09 	add	r9,r10,r9
80018852:	2b c9       	sub	r9,-68
80018854:	b2 98       	st.b	r9[0x1],r8
}
80018856:	2f fd       	sub	sp,-4
80018858:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001885c:	80 01       	ld.sh	r1,r0[0x0]
8001885e:	86 aa       	ld.uh	r10,r3[0x4]

80018860 <writeSPI>:

/** writes one byte to the outgoing SPI buffer
 *  if buffer is full, this method blocks
 *  if sending is paused and buffer runs full, sending is automatically resumed!!
 */
void writeSPI(int spi_index, uint8_t value){
80018860:	eb cd 40 c0 	pushm	r6-r7,lr
80018864:	1a 97       	mov	r7,sp
80018866:	20 3d       	sub	sp,12
80018868:	4a b6       	lddpc	r6,80018914 <writeSPI+0xb4>
8001886a:	1e 26       	rsub	r6,pc
8001886c:	ef 4c ff f8 	st.w	r7[-8],r12
80018870:	16 98       	mov	r8,r11
80018872:	ef 68 ff f4 	st.b	r7[-12],r8
  uint8_t newIndex;

  newIndex=(spi_buffers[spi_index].SPIoutBufferHead+1)&SPI_BUFFER_MASK;
80018876:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001887a:	ec f9 00 2c 	ld.w	r9,r6[44]
8001887e:	f0 08 10 54 	mul	r8,r8,84
80018882:	f2 08 00 08 	add	r8,r9,r8
80018886:	2b c8       	sub	r8,-68
80018888:	11 a8       	ld.ub	r8,r8[0x2]
8001888a:	5c 58       	castu.b	r8
8001888c:	2f f8       	sub	r8,-1
8001888e:	5c 58       	castu.b	r8
80018890:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80018894:	ef 68 ff ff 	st.b	r7[-1],r8
  // check if buffer is already full and wait
  //while (newIndex==spi_buffers[spi_index].SPIoutBufferTail) 
  //{
    //if (spi_buffers[spi_index].automatic==0) resumeSPI(spi_index);
  //}
  spi_buffers[spi_index].SPIOutBuffer[(spi_buffers[spi_index].SPIoutBufferHead)]=value;
80018898:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001889c:	ee f8 ff f8 	ld.w	r8,r7[-8]
800188a0:	ec fa 00 2c 	ld.w	r10,r6[44]
800188a4:	f0 08 10 54 	mul	r8,r8,84
800188a8:	f4 08 00 08 	add	r8,r10,r8
800188ac:	2b c8       	sub	r8,-68
800188ae:	11 a8       	ld.ub	r8,r8[0x2]
800188b0:	5c 58       	castu.b	r8
800188b2:	ec fa 00 2c 	ld.w	r10,r6[44]
800188b6:	f2 09 10 54 	mul	r9,r9,84
800188ba:	f4 09 00 09 	add	r9,r10,r9
800188be:	f2 08 00 08 	add	r8,r9,r8
800188c2:	f0 c9 ff fc 	sub	r9,r8,-4
800188c6:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800188ca:	b2 88       	st.b	r9[0x0],r8
  spi_buffers[spi_index].SPIoutBufferHead = newIndex;
800188cc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800188d0:	ec f9 00 2c 	ld.w	r9,r6[44]
800188d4:	f0 08 10 54 	mul	r8,r8,84
800188d8:	f2 08 00 08 	add	r8,r9,r8
800188dc:	f0 c9 ff bc 	sub	r9,r8,-68
800188e0:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800188e4:	b2 a8       	st.b	r9[0x2],r8


  if (spi_buffers[spi_index].automatic==1) startSPI(spi_index);
800188e6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800188ea:	ec f9 00 2c 	ld.w	r9,r6[44]
800188ee:	f0 08 10 54 	mul	r8,r8,84
800188f2:	f2 08 00 08 	add	r8,r9,r8
800188f6:	2b 88       	sub	r8,-72
800188f8:	11 b8       	ld.ub	r8,r8[0x3]
800188fa:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800188fe:	30 18       	mov	r8,1
80018900:	f0 09 18 00 	cp.b	r9,r8
80018904:	c0 51       	brne	8001890e <writeSPI+0xae>
80018906:	ee fc ff f8 	ld.w	r12,r7[-8]
8001890a:	f0 16 00 e4 	mcall	r6[912]
}
8001890e:	2f dd       	sub	sp,-12
80018910:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80018914:	80 01       	ld.sh	r1,r0[0x0]
80018916:	86 ee       	ld.uh	lr,r3[0xc]

80018918 <SPItransmit>:

void SPItransmit(int spi_index) {
80018918:	eb cd 40 c0 	pushm	r6-r7,lr
8001891c:	1a 97       	mov	r7,sp
8001891e:	20 1d       	sub	sp,4
80018920:	4d 66       	lddpc	r6,80018a78 <SPItransmit+0x160>
80018922:	1e 26       	rsub	r6,pc
80018924:	ef 4c ff fc 	st.w	r7[-4],r12
 if (spi_buffers[spi_index].SPIoutBufferHead!=spi_buffers[spi_index].SPIoutBufferTail) 
80018928:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001892c:	ec f9 00 2c 	ld.w	r9,r6[44]
80018930:	f0 08 10 54 	mul	r8,r8,84
80018934:	f2 08 00 08 	add	r8,r9,r8
80018938:	2b c8       	sub	r8,-68
8001893a:	11 a8       	ld.ub	r8,r8[0x2]
8001893c:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80018940:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018944:	ec fa 00 2c 	ld.w	r10,r6[44]
80018948:	f0 08 10 54 	mul	r8,r8,84
8001894c:	f4 08 00 08 	add	r8,r10,r8
80018950:	2b c8       	sub	r8,-68
80018952:	11 b8       	ld.ub	r8,r8[0x3]
80018954:	5c 58       	castu.b	r8
80018956:	f0 09 18 00 	cp.b	r9,r8
8001895a:	c4 90       	breq	800189ec <SPItransmit+0xd4>
 {
    // read data from buffer and copy it to SPI unit
	spi_buffers[spi_index].spi->tdr = spi_buffers[spi_index].SPIOutBuffer[spi_buffers[spi_index].SPIoutBufferTail];
8001895c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018960:	ec f9 00 2c 	ld.w	r9,r6[44]
80018964:	f0 08 10 54 	mul	r8,r8,84
80018968:	f2 08 00 08 	add	r8,r9,r8
8001896c:	70 09       	ld.w	r9,r8[0x0]
8001896e:	ee fa ff fc 	ld.w	r10,r7[-4]
80018972:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018976:	ec fb 00 2c 	ld.w	r11,r6[44]
8001897a:	f0 08 10 54 	mul	r8,r8,84
8001897e:	f6 08 00 08 	add	r8,r11,r8
80018982:	2b c8       	sub	r8,-68
80018984:	11 b8       	ld.ub	r8,r8[0x3]
80018986:	5c 58       	castu.b	r8
80018988:	ec fb 00 2c 	ld.w	r11,r6[44]
8001898c:	f4 0a 10 54 	mul	r10,r10,84
80018990:	f6 0a 00 0a 	add	r10,r11,r10
80018994:	f4 08 00 08 	add	r8,r10,r8
80018998:	2f c8       	sub	r8,-4
8001899a:	11 88       	ld.ub	r8,r8[0x0]
8001899c:	5c 58       	castu.b	r8
8001899e:	93 38       	st.w	r9[0xc],r8
    spi_buffers[spi_index].transmission_in_progress=1;    
800189a0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800189a4:	ec f9 00 2c 	ld.w	r9,r6[44]
800189a8:	f0 08 10 54 	mul	r8,r8,84
800189ac:	f2 08 00 08 	add	r8,r9,r8
800189b0:	f0 c9 ff b8 	sub	r9,r8,-72
800189b4:	30 18       	mov	r8,1
800189b6:	b2 a8       	st.b	r9[0x2],r8
    // update buffer index
    spi_buffers[spi_index].SPIoutBufferTail=  (spi_buffers[spi_index].SPIoutBufferTail+1)&SPI_BUFFER_MASK;
800189b8:	ee f9 ff fc 	ld.w	r9,r7[-4]
800189bc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800189c0:	ec fa 00 2c 	ld.w	r10,r6[44]
800189c4:	f0 08 10 54 	mul	r8,r8,84
800189c8:	f4 08 00 08 	add	r8,r10,r8
800189cc:	2b c8       	sub	r8,-68
800189ce:	11 b8       	ld.ub	r8,r8[0x3]
800189d0:	5c 58       	castu.b	r8
800189d2:	2f f8       	sub	r8,-1
800189d4:	5c 58       	castu.b	r8
800189d6:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800189da:	ec fa 00 2c 	ld.w	r10,r6[44]
800189de:	f2 09 10 54 	mul	r9,r9,84
800189e2:	f4 09 00 09 	add	r9,r10,r9
800189e6:	2b c9       	sub	r9,-68
800189e8:	b2 b8       	st.b	r9[0x3],r8
800189ea:	c4 38       	rjmp	80018a70 <SPItransmit+0x158>
	//spi_enable(spi_buffers[spi_index].spi);

  } else {
    spi_buffers[spi_index].SPIoutBufferTail=spi_buffers[spi_index].SPIoutBufferHead;
800189ec:	ee f9 ff fc 	ld.w	r9,r7[-4]
800189f0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800189f4:	ec fa 00 2c 	ld.w	r10,r6[44]
800189f8:	f0 08 10 54 	mul	r8,r8,84
800189fc:	f4 08 00 08 	add	r8,r10,r8
80018a00:	2b c8       	sub	r8,-68
80018a02:	11 a8       	ld.ub	r8,r8[0x2]
80018a04:	5c 58       	castu.b	r8
80018a06:	ec fa 00 2c 	ld.w	r10,r6[44]
80018a0a:	f2 09 10 54 	mul	r9,r9,84
80018a0e:	f4 09 00 09 	add	r9,r10,r9
80018a12:	2b c9       	sub	r9,-68
80018a14:	b2 b8       	st.b	r9[0x3],r8
    //PORTB |= _BV(SPI_CS);	// pull chip select high to end transmission
	spi_deselect_device(spi_buffers[spi_index].spi, &spi_buffers[spi_index].adc_spi);
80018a16:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018a1a:	f0 08 10 54 	mul	r8,r8,84
80018a1e:	f0 c9 ff b0 	sub	r9,r8,-80
80018a22:	ec f8 00 2c 	ld.w	r8,r6[44]
80018a26:	10 09       	add	r9,r8
80018a28:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018a2c:	ec fa 00 2c 	ld.w	r10,r6[44]
80018a30:	f0 08 10 54 	mul	r8,r8,84
80018a34:	f4 08 00 08 	add	r8,r10,r8
80018a38:	70 08       	ld.w	r8,r8[0x0]
80018a3a:	12 9b       	mov	r11,r9
80018a3c:	10 9c       	mov	r12,r8
80018a3e:	fe b0 fb db 	rcall	800181f4 <spi_deselect_device>
    spi_buffers[spi_index].transmission_in_progress=0;
80018a42:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018a46:	ec f9 00 2c 	ld.w	r9,r6[44]
80018a4a:	f0 08 10 54 	mul	r8,r8,84
80018a4e:	f2 08 00 08 	add	r8,r9,r8
80018a52:	f0 c9 ff b8 	sub	r9,r8,-72
80018a56:	30 08       	mov	r8,0
80018a58:	b2 a8       	st.b	r9[0x2],r8
	spi_buffers[spi_index].spi->idr =AVR32_SPI_IER_RDRF_MASK | AVR32_SPI_IER_TDRE_MASK;
80018a5a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018a5e:	ec f9 00 2c 	ld.w	r9,r6[44]
80018a62:	f0 08 10 54 	mul	r8,r8,84
80018a66:	f2 08 00 08 	add	r8,r9,r8
80018a6a:	70 08       	ld.w	r8,r8[0x0]
80018a6c:	30 39       	mov	r9,3
80018a6e:	91 69       	st.w	r8[0x18],r9
    //SPCR&=~_BV(SPIE);
 }
}
80018a70:	2f fd       	sub	sp,-4
80018a72:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80018a76:	00 00       	add	r0,r0
80018a78:	80 01       	ld.sh	r1,r0[0x0]
80018a7a:	87 a6       	st.w	r3[0x28],r6

80018a7c <startSPI>:

/** initiates SPI transmission by sending first byte
*/
void startSPI(int spi_index) {
80018a7c:	eb cd 40 c0 	pushm	r6-r7,lr
80018a80:	1a 97       	mov	r7,sp
80018a82:	20 1d       	sub	sp,4
80018a84:	4a f6       	lddpc	r6,80018b40 <startSPI+0xc4>
80018a86:	1e 26       	rsub	r6,pc
80018a88:	ef 4c ff fc 	st.w	r7[-4],r12
  // check flag if transmission is in progress
  if ((spi_buffers[spi_index].transmission_in_progress==0)
80018a8c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018a90:	ec f9 00 2c 	ld.w	r9,r6[44]
80018a94:	f0 08 10 54 	mul	r8,r8,84
80018a98:	f2 08 00 08 	add	r8,r9,r8
80018a9c:	2b 88       	sub	r8,-72
80018a9e:	11 a8       	ld.ub	r8,r8[0x2]
80018aa0:	5c 58       	castu.b	r8
80018aa2:	c4 c1       	brne	80018b3a <startSPI+0xbe>
	&&(spi_buffers[spi_index].SPIoutBufferHead!=spi_buffers[spi_index].SPIoutBufferTail)) {
80018aa4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018aa8:	ec f9 00 2c 	ld.w	r9,r6[44]
80018aac:	f0 08 10 54 	mul	r8,r8,84
80018ab0:	f2 08 00 08 	add	r8,r9,r8
80018ab4:	2b c8       	sub	r8,-68
80018ab6:	11 a8       	ld.ub	r8,r8[0x2]
80018ab8:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80018abc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018ac0:	ec fa 00 2c 	ld.w	r10,r6[44]
80018ac4:	f0 08 10 54 	mul	r8,r8,84
80018ac8:	f4 08 00 08 	add	r8,r10,r8
80018acc:	2b c8       	sub	r8,-68
80018ace:	11 b8       	ld.ub	r8,r8[0x3]
80018ad0:	5c 58       	castu.b	r8

/** initiates SPI transmission by sending first byte
*/
void startSPI(int spi_index) {
  // check flag if transmission is in progress
  if ((spi_buffers[spi_index].transmission_in_progress==0)
80018ad2:	f0 09 18 00 	cp.b	r9,r8
80018ad6:	c3 20       	breq	80018b3a <startSPI+0xbe>
	&&(spi_buffers[spi_index].SPIoutBufferHead!=spi_buffers[spi_index].SPIoutBufferTail)) {
    // if not, initiate transmission by sending first byte
    //!!!!PORTB &= ~_BV(SPI_CS);	// pull chip select low to start transmission
	spi_select_device(spi_buffers[spi_index].spi, &spi_buffers[spi_index].adc_spi);
80018ad8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018adc:	f0 08 10 54 	mul	r8,r8,84
80018ae0:	f0 c9 ff b0 	sub	r9,r8,-80
80018ae4:	ec f8 00 2c 	ld.w	r8,r6[44]
80018ae8:	10 09       	add	r9,r8
80018aea:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018aee:	ec fa 00 2c 	ld.w	r10,r6[44]
80018af2:	f0 08 10 54 	mul	r8,r8,84
80018af6:	f4 08 00 08 	add	r8,r10,r8
80018afa:	70 08       	ld.w	r8,r8[0x0]
80018afc:	12 9b       	mov	r11,r9
80018afe:	10 9c       	mov	r12,r8
80018b00:	fe b0 fb 62 	rcall	800181c4 <spi_select_device>

    spi_buffers[spi_index].transmission_in_progress=1;
80018b04:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018b08:	ec f9 00 2c 	ld.w	r9,r6[44]
80018b0c:	f0 08 10 54 	mul	r8,r8,84
80018b10:	f2 08 00 08 	add	r8,r9,r8
80018b14:	f0 c9 ff b8 	sub	r9,r8,-72
80018b18:	30 18       	mov	r8,1
80018b1a:	b2 a8       	st.b	r9[0x2],r8
    // activate interrupt to initiate transmission
    //!!!!SPCR|=_BV(SPIE);
 	spi_buffers[spi_index].spi->ier = AVR32_SPI_IER_RDRF_MASK | AVR32_SPI_IER_TDRE_MASK;
80018b1c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018b20:	ec f9 00 2c 	ld.w	r9,r6[44]
80018b24:	f0 08 10 54 	mul	r8,r8,84
80018b28:	f2 08 00 08 	add	r8,r9,r8
80018b2c:	70 08       	ld.w	r8,r8[0x0]
80018b2e:	30 39       	mov	r9,3
80018b30:	91 59       	st.w	r8[0x14],r9

    SPItransmit(spi_index);
80018b32:	ee fc ff fc 	ld.w	r12,r7[-4]
80018b36:	f0 16 01 25 	mcall	r6[1172]
  }
}
80018b3a:	2f fd       	sub	sp,-4
80018b3c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80018b40:	80 01       	ld.sh	r1,r0[0x0]
80018b42:	89 0a       	st.w	r4[0x0],r10

80018b44 <SPITransferFinished>:

int8_t SPITransferFinished(int spi_index) {
80018b44:	eb cd 40 c0 	pushm	r6-r7,lr
80018b48:	1a 97       	mov	r7,sp
80018b4a:	20 1d       	sub	sp,4
80018b4c:	49 16       	lddpc	r6,80018b90 <SPITransferFinished+0x4c>
80018b4e:	1e 26       	rsub	r6,pc
80018b50:	ef 4c ff fc 	st.w	r7[-4],r12
	return (spi_buffers[spi_index].SPIoutBufferHead==spi_buffers[spi_index].SPIoutBufferTail);
80018b54:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018b58:	ec f9 00 2c 	ld.w	r9,r6[44]
80018b5c:	f0 08 10 54 	mul	r8,r8,84
80018b60:	f2 08 00 08 	add	r8,r9,r8
80018b64:	2b c8       	sub	r8,-68
80018b66:	11 a8       	ld.ub	r8,r8[0x2]
80018b68:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80018b6c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018b70:	ec fa 00 2c 	ld.w	r10,r6[44]
80018b74:	f0 08 10 54 	mul	r8,r8,84
80018b78:	f4 08 00 08 	add	r8,r10,r8
80018b7c:	2b c8       	sub	r8,-68
80018b7e:	11 b8       	ld.ub	r8,r8[0x3]
80018b80:	5c 58       	castu.b	r8
80018b82:	f0 09 18 00 	cp.b	r9,r8
80018b86:	5f 08       	sreq	r8
}
80018b88:	10 9c       	mov	r12,r8
80018b8a:	2f fd       	sub	sp,-4
80018b8c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80018b90:	80 01       	ld.sh	r1,r0[0x0]
80018b92:	89 d2       	st.w	r4[0x34],r2

80018b94 <SPIFlushBuffer>:

/** waits until whole buffer is written to SPI bus
 *  automatically resumes sending if SPI interface was paused */
void SPIFlushBuffer(int spi_index) {
80018b94:	eb cd 40 c0 	pushm	r6-r7,lr
80018b98:	1a 97       	mov	r7,sp
80018b9a:	20 1d       	sub	sp,4
80018b9c:	49 36       	lddpc	r6,80018be8 <SPIFlushBuffer+0x54>
80018b9e:	1e 26       	rsub	r6,pc
80018ba0:	ef 4c ff fc 	st.w	r7[-4],r12
 	resumeSPI(spi_index);
80018ba4:	ee fc ff fc 	ld.w	r12,r7[-4]
80018ba8:	f0 16 01 e3 	mcall	r6[1932]
	while (spi_buffers[spi_index].SPIoutBufferHead!=spi_buffers[spi_index].SPIoutBufferTail);
80018bac:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018bb0:	ec f9 00 2c 	ld.w	r9,r6[44]
80018bb4:	f0 08 10 54 	mul	r8,r8,84
80018bb8:	f2 08 00 08 	add	r8,r9,r8
80018bbc:	2b c8       	sub	r8,-68
80018bbe:	11 a8       	ld.ub	r8,r8[0x2]
80018bc0:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80018bc4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018bc8:	ec fa 00 2c 	ld.w	r10,r6[44]
80018bcc:	f0 08 10 54 	mul	r8,r8,84
80018bd0:	f4 08 00 08 	add	r8,r10,r8
80018bd4:	2b c8       	sub	r8,-68
80018bd6:	11 b8       	ld.ub	r8,r8[0x3]
80018bd8:	5c 58       	castu.b	r8
80018bda:	f0 09 18 00 	cp.b	r9,r8
80018bde:	ce 71       	brne	80018bac <SPIFlushBuffer+0x18>
}
80018be0:	2f fd       	sub	sp,-4
80018be2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80018be6:	00 00       	add	r0,r0
80018be8:	80 01       	ld.sh	r1,r0[0x0]
80018bea:	8a 22       	ld.sh	r2,r5[0x4]

80018bec <SPIBytesAvailable>:

/** returns the number of bytes in the incoming buffer
 */
uint8_t SPIBytesAvailable(int spi_index){
80018bec:	eb cd 40 c0 	pushm	r6-r7,lr
80018bf0:	1a 97       	mov	r7,sp
80018bf2:	20 1d       	sub	sp,4
80018bf4:	49 36       	lddpc	r6,80018c40 <SPIBytesAvailable+0x54>
80018bf6:	1e 26       	rsub	r6,pc
80018bf8:	ef 4c ff fc 	st.w	r7[-4],r12
  return (SPI_BUFFER_SIZE + spi_buffers[spi_index].SPIinBufferHead - spi_buffers[spi_index].SPIinBufferTail)&SPI_BUFFER_MASK;
80018bfc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018c00:	ec f9 00 2c 	ld.w	r9,r6[44]
80018c04:	f0 08 10 54 	mul	r8,r8,84
80018c08:	f2 08 00 08 	add	r8,r9,r8
80018c0c:	2b c8       	sub	r8,-68
80018c0e:	11 88       	ld.ub	r8,r8[0x0]
80018c10:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80018c14:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018c18:	ec fa 00 2c 	ld.w	r10,r6[44]
80018c1c:	f0 08 10 54 	mul	r8,r8,84
80018c20:	f4 08 00 08 	add	r8,r10,r8
80018c24:	2b c8       	sub	r8,-68
80018c26:	11 98       	ld.ub	r8,r8[0x1]
80018c28:	5c 58       	castu.b	r8
80018c2a:	f2 08 01 08 	sub	r8,r9,r8
80018c2e:	5c 58       	castu.b	r8
80018c30:	2e 08       	sub	r8,-32
80018c32:	5c 58       	castu.b	r8
80018c34:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
}
80018c38:	10 9c       	mov	r12,r8
80018c3a:	2f fd       	sub	sp,-4
80018c3c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80018c40:	80 01       	ld.sh	r1,r0[0x0]
80018c42:	8a 7a       	ld.sh	r10,r5[0xe]

80018c44 <spi_handler>:





void spi_handler(int spi_index) {
80018c44:	eb cd 40 c0 	pushm	r6-r7,lr
80018c48:	1a 97       	mov	r7,sp
80018c4a:	20 2d       	sub	sp,8
80018c4c:	4d e6       	lddpc	r6,80018dc4 <spi_handler+0x180>
80018c4e:	1e 26       	rsub	r6,pc
80018c50:	ef 4c ff f8 	st.w	r7[-8],r12
  uint8_t inData;
  uint8_t tmp;
  inData=spi_buffers[spi_index].spi->rdr;
80018c54:	ee f8 ff f8 	ld.w	r8,r7[-8]
80018c58:	ec f9 00 2c 	ld.w	r9,r6[44]
80018c5c:	f0 08 10 54 	mul	r8,r8,84
80018c60:	f2 08 00 08 	add	r8,r9,r8
80018c64:	70 08       	ld.w	r8,r8[0x0]
80018c66:	70 28       	ld.w	r8,r8[0x8]
80018c68:	ef 68 ff fe 	st.b	r7[-2],r8

  if ((spi_buffers[spi_index].spi->sr & AVR32_SPI_SR_TDRE_MASK)!=0) {
80018c6c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80018c70:	ec f9 00 2c 	ld.w	r9,r6[44]
80018c74:	f0 08 10 54 	mul	r8,r8,84
80018c78:	f2 08 00 08 	add	r8,r9,r8
80018c7c:	70 08       	ld.w	r8,r8[0x0]
80018c7e:	70 48       	ld.w	r8,r8[0x10]
80018c80:	e2 18 00 02 	andl	r8,0x2,COH
80018c84:	c0 50       	breq	80018c8e <spi_handler+0x4a>
	// initiate transfer if necessary
	SPItransmit(spi_index);
80018c86:	ee fc ff f8 	ld.w	r12,r7[-8]
80018c8a:	f0 16 01 25 	mcall	r6[1172]
  }	
  // only process received data when receiver is activated
  if ((spi_buffers[spi_index].spiReceiverOn==1)&& ((spi_buffers[spi_index].spi->sr & AVR32_SPI_SR_RDRF_MASK)!=0)) {
80018c8e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80018c92:	ec f9 00 2c 	ld.w	r9,r6[44]
80018c96:	f0 08 10 54 	mul	r8,r8,84
80018c9a:	f2 08 00 08 	add	r8,r9,r8
80018c9e:	2b 88       	sub	r8,-72
80018ca0:	11 88       	ld.ub	r8,r8[0x0]
80018ca2:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80018ca6:	30 18       	mov	r8,1
80018ca8:	f0 09 18 00 	cp.b	r9,r8
80018cac:	e0 81 00 88 	brne	80018dbc <spi_handler+0x178>
80018cb0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80018cb4:	ec f9 00 2c 	ld.w	r9,r6[44]
80018cb8:	f0 08 10 54 	mul	r8,r8,84
80018cbc:	f2 08 00 08 	add	r8,r9,r8
80018cc0:	70 08       	ld.w	r8,r8[0x0]
80018cc2:	70 48       	ld.w	r8,r8[0x10]
80018cc4:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80018cc8:	5c 58       	castu.b	r8
80018cca:	c7 90       	breq	80018dbc <spi_handler+0x178>
	 // read incoming data from SPI port
	spi_buffers[spi_index].traffic++;
80018ccc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80018cd0:	ec fa 00 2c 	ld.w	r10,r6[44]
80018cd4:	f0 09 10 54 	mul	r9,r8,84
80018cd8:	f4 09 00 09 	add	r9,r10,r9
80018cdc:	2b 89       	sub	r9,-72
80018cde:	13 99       	ld.ub	r9,r9[0x1]
80018ce0:	5c 59       	castu.b	r9
80018ce2:	2f f9       	sub	r9,-1
80018ce4:	5c 59       	castu.b	r9
80018ce6:	ec fa 00 2c 	ld.w	r10,r6[44]
80018cea:	f0 08 10 54 	mul	r8,r8,84
80018cee:	f4 08 00 08 	add	r8,r10,r8
80018cf2:	f0 ca ff b8 	sub	r10,r8,-72
80018cf6:	12 98       	mov	r8,r9
80018cf8:	b4 98       	st.b	r10[0x1],r8

    tmp=(spi_buffers[spi_index].SPIinBufferHead+1)&SPI_BUFFER_MASK;
80018cfa:	ee f8 ff f8 	ld.w	r8,r7[-8]
80018cfe:	ec f9 00 2c 	ld.w	r9,r6[44]
80018d02:	f0 08 10 54 	mul	r8,r8,84
80018d06:	f2 08 00 08 	add	r8,r9,r8
80018d0a:	2b c8       	sub	r8,-68
80018d0c:	11 88       	ld.ub	r8,r8[0x0]
80018d0e:	5c 58       	castu.b	r8
80018d10:	2f f8       	sub	r8,-1
80018d12:	5c 58       	castu.b	r8
80018d14:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80018d18:	ef 68 ff ff 	st.b	r7[-1],r8
    
    if (tmp==spi_buffers[spi_index].SPIinBufferTail) {
80018d1c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80018d20:	ec f9 00 2c 	ld.w	r9,r6[44]
80018d24:	f0 08 10 54 	mul	r8,r8,84
80018d28:	f2 08 00 08 	add	r8,r9,r8
80018d2c:	2b c8       	sub	r8,-68
80018d2e:	11 98       	ld.ub	r8,r8[0x1]
80018d30:	5c 58       	castu.b	r8
80018d32:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80018d36:	f0 09 18 00 	cp.b	r9,r8
80018d3a:	c1 a1       	brne	80018d6e <spi_handler+0x12a>
      //error: receive buffer overflow!!
      // lose old incoming data at the end of the buffer
      spi_buffers[spi_index].SPIinBufferTail=(spi_buffers[spi_index].SPIinBufferTail+1)&SPI_BUFFER_MASK;
80018d3c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80018d40:	ee f8 ff f8 	ld.w	r8,r7[-8]
80018d44:	ec fa 00 2c 	ld.w	r10,r6[44]
80018d48:	f0 08 10 54 	mul	r8,r8,84
80018d4c:	f4 08 00 08 	add	r8,r10,r8
80018d50:	2b c8       	sub	r8,-68
80018d52:	11 98       	ld.ub	r8,r8[0x1]
80018d54:	5c 58       	castu.b	r8
80018d56:	2f f8       	sub	r8,-1
80018d58:	5c 58       	castu.b	r8
80018d5a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80018d5e:	ec fa 00 2c 	ld.w	r10,r6[44]
80018d62:	f2 09 10 54 	mul	r9,r9,84
80018d66:	f4 09 00 09 	add	r9,r10,r9
80018d6a:	2b c9       	sub	r9,-68
80018d6c:	b2 98       	st.b	r9[0x1],r8
    } 
    // store incoming data in buffer
    spi_buffers[spi_index].SPIInBuffer[spi_buffers[spi_index].SPIinBufferHead] = inData;
80018d6e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80018d72:	ee f8 ff f8 	ld.w	r8,r7[-8]
80018d76:	ec fa 00 2c 	ld.w	r10,r6[44]
80018d7a:	f0 08 10 54 	mul	r8,r8,84
80018d7e:	f4 08 00 08 	add	r8,r10,r8
80018d82:	2b c8       	sub	r8,-68
80018d84:	11 88       	ld.ub	r8,r8[0x0]
80018d86:	5c 58       	castu.b	r8
80018d88:	ec fa 00 2c 	ld.w	r10,r6[44]
80018d8c:	f2 09 10 54 	mul	r9,r9,84
80018d90:	f4 09 00 09 	add	r9,r10,r9
80018d94:	f2 08 00 08 	add	r8,r9,r8
80018d98:	f0 c9 ff dc 	sub	r9,r8,-36
80018d9c:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80018da0:	b2 88       	st.b	r9[0x0],r8
    // move head pointer forward
    spi_buffers[spi_index].SPIinBufferHead=tmp;
80018da2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80018da6:	ec f9 00 2c 	ld.w	r9,r6[44]
80018daa:	f0 08 10 54 	mul	r8,r8,84
80018dae:	f2 08 00 08 	add	r8,r9,r8
80018db2:	f0 c9 ff bc 	sub	r9,r8,-68
80018db6:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80018dba:	b2 88       	st.b	r9[0x0],r8
  
  }
    
}
80018dbc:	2f ed       	sub	sp,-8
80018dbe:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80018dc2:	00 00       	add	r0,r0
80018dc4:	80 01       	ld.sh	r1,r0[0x0]
80018dc6:	8a d2       	ld.uh	r2,r5[0xa]

80018dc8 <osc_get_rate>:
/**
 * \todo RC8M may run at either 8 MHz or 1 MHz. Currently, we assume
 * it's always running at 8 MHz.
 */
static inline uint32_t osc_get_rate(uint8_t id)
{
80018dc8:	eb cd 40 80 	pushm	r7,lr
80018dcc:	1a 97       	mov	r7,sp
80018dce:	20 1d       	sub	sp,4
80018dd0:	18 98       	mov	r8,r12
80018dd2:	ef 68 ff fc 	st.b	r7[-4],r8
	switch (id) {
80018dd6:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80018dda:	58 38       	cp.w	r8,3
80018ddc:	c1 20       	breq	80018e00 <osc_get_rate+0x38>
80018dde:	e0 89 00 07 	brgt	80018dec <osc_get_rate+0x24>
80018de2:	58 08       	cp.w	r8,0
80018de4:	c0 90       	breq	80018df6 <osc_get_rate+0x2e>
80018de6:	58 28       	cp.w	r8,2
80018de8:	c0 f0       	breq	80018e06 <osc_get_rate+0x3e>
80018dea:	c1 b8       	rjmp	80018e20 <osc_get_rate+0x58>
80018dec:	58 48       	cp.w	r8,4
80018dee:	c1 10       	breq	80018e10 <osc_get_rate+0x48>
80018df0:	58 58       	cp.w	r8,5
80018df2:	c1 40       	breq	80018e1a <osc_get_rate+0x52>
80018df4:	c1 68       	rjmp	80018e20 <osc_get_rate+0x58>
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return BOARD_OSC0_HZ;
80018df6:	e0 68 24 00 	mov	r8,9216
80018dfa:	ea 18 00 f4 	orh	r8,0xf4
80018dfe:	c1 28       	rjmp	80018e22 <osc_get_rate+0x5a>
		return BOARD_OSC1_HZ;
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		return BOARD_OSC32_HZ;
80018e00:	e0 68 80 00 	mov	r8,32768
80018e04:	c0 f8       	rjmp	80018e22 <osc_get_rate+0x5a>
#endif

	case OSC_ID_RC8M:
		return OSC_RC8M_NOMINAL_HZ;
80018e06:	e0 68 12 00 	mov	r8,4608
80018e0a:	ea 18 00 7a 	orh	r8,0x7a
80018e0e:	c0 a8       	rjmp	80018e22 <osc_get_rate+0x5a>

	case OSC_ID_RC120M:
		return OSC_RC120M_NOMINAL_HZ;
80018e10:	e0 68 0e 00 	mov	r8,3584
80018e14:	ea 18 07 27 	orh	r8,0x727
80018e18:	c0 58       	rjmp	80018e22 <osc_get_rate+0x5a>

	case OSC_ID_RCSYS:
		return OSC_RCSYS_NOMINAL_HZ;
80018e1a:	e0 78 c1 38 	mov	r8,115000
80018e1e:	c0 28       	rjmp	80018e22 <osc_get_rate+0x5a>

	default:
		/* unhandled_case(id); */
		return 0;
80018e20:	30 08       	mov	r8,0
	}
}
80018e22:	10 9c       	mov	r12,r8
80018e24:	2f fd       	sub	sp,-4
80018e26:	e3 cd 80 80 	ldm	sp++,r7,pc

80018e2a <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern bool sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
80018e2a:	eb cd 40 c0 	pushm	r6-r7,lr
80018e2e:	1a 97       	mov	r7,sp
80018e30:	48 56       	lddpc	r6,80018e44 <sysclk_get_main_hz+0x1a>
80018e32:	1e 26       	rsub	r6,pc
		return BOARD_OSC1_HZ;
#endif

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLL0:
		return pll_get_default_rate(0);
80018e34:	30 0c       	mov	r12,0
80018e36:	cc 9f       	rcall	80018dc8 <osc_get_rate>
80018e38:	18 98       	mov	r8,r12
80018e3a:	a3 68       	lsl	r8,0x2

	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
80018e3c:	10 9c       	mov	r12,r8
80018e3e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80018e42:	00 00       	add	r0,r0
80018e44:	80 01       	ld.sh	r1,r0[0x0]
80018e46:	8c b6       	ld.uh	r6,r6[0x6]

80018e48 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
80018e48:	eb cd 40 c0 	pushm	r6-r7,lr
80018e4c:	1a 97       	mov	r7,sp
80018e4e:	48 46       	lddpc	r6,80018e5c <sysclk_get_cpu_hz+0x14>
80018e50:	1e 26       	rsub	r6,pc
	return sysclk_get_main_hz() >> CONFIG_SYSCLK_CPU_DIV;
80018e52:	ce cf       	rcall	80018e2a <sysclk_get_main_hz>
80018e54:	18 98       	mov	r8,r12
}
80018e56:	10 9c       	mov	r12,r8
80018e58:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80018e5c:	80 01       	ld.sh	r1,r0[0x0]
80018e5e:	8c d4       	ld.uh	r4,r6[0xa]

80018e60 <uart_handler_0>:
				usart_opt[UID].uart_device.uart->idr=AVR32_USART_IDR_TXRDY_MASK;\
		}\
	}\
}			

ISR(uart_handler_0, usart_opt[0].uart_device.IRQ, AVR32_INTC_INTLEV_INT1) {\
80018e60:	eb cd 40 c0 	pushm	r6-r7,lr
80018e64:	1a 97       	mov	r7,sp
80018e66:	20 2d       	sub	sp,8
80018e68:	4b 26       	lddpc	r6,80018f30 <uart_handler_0+0xd0>
80018e6a:	1e 26       	rsub	r6,pc
	uint8_t c1;\
	int csr=usart_opt[0].uart_device.uart->csr;\
80018e6c:	ec f8 00 34 	ld.w	r8,r6[52]
80018e70:	70 18       	ld.w	r8,r8[0x4]
80018e72:	70 58       	ld.w	r8,r8[0x14]
				usart_opt[UID].uart_device.uart->idr=AVR32_USART_IDR_TXRDY_MASK;\
		}\
	}\
}			

ISR(uart_handler_0, usart_opt[0].uart_device.IRQ, AVR32_INTC_INTLEV_INT1) {\
80018e74:	ef 48 ff fc 	st.w	r7[-4],r8
	uint8_t c1;\
	int csr=usart_opt[0].uart_device.uart->csr;\
	if (csr & AVR32_USART_CSR_RXRDY_MASK) {\
80018e78:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018e7c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80018e80:	5c 58       	castu.b	r8
80018e82:	c2 70       	breq	80018ed0 <uart_handler_0+0x70>
		c1=(uint8_t)usart_opt[0].uart_device.uart->rhr;\
80018e84:	ec f8 00 34 	ld.w	r8,r6[52]
80018e88:	70 18       	ld.w	r8,r8[0x4]
80018e8a:	70 68       	ld.w	r8,r8[0x18]
80018e8c:	ef 68 ff fb 	st.b	r7[-5],r8
		if (usart_opt[0].uart_device.receive_stream==NULL) {\
80018e90:	ec f8 00 34 	ld.w	r8,r6[52]
80018e94:	f0 f8 02 14 	ld.w	r8,r8[532]
80018e98:	58 08       	cp.w	r8,0
80018e9a:	c0 c1       	brne	80018eb2 <uart_handler_0+0x52>
			buffer_put(&(usart_opt[0].uart_device.receive_buffer), c1);\
80018e9c:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80018ea0:	ec f8 00 34 	ld.w	r8,r6[52]
80018ea4:	f0 c8 fe f1 	sub	r8,r8,-271
80018ea8:	12 9b       	mov	r11,r9
80018eaa:	10 9c       	mov	r12,r8
80018eac:	f0 16 00 50 	mcall	r6[320]
80018eb0:	c1 08       	rjmp	80018ed0 <uart_handler_0+0x70>
		} else {\
			usart_opt[0].uart_device.receive_stream->put(usart_opt[0].uart_device.receive_stream->data, c1);\
80018eb2:	ec f8 00 34 	ld.w	r8,r6[52]
80018eb6:	f0 f8 02 14 	ld.w	r8,r8[532]
80018eba:	70 18       	ld.w	r8,r8[0x4]
80018ebc:	ef 3a ff fb 	ld.ub	r10,r7[-5]
80018ec0:	ec f9 00 34 	ld.w	r9,r6[52]
80018ec4:	f2 f9 02 14 	ld.w	r9,r9[532]
80018ec8:	72 59       	ld.w	r9,r9[0x14]
80018eca:	14 9b       	mov	r11,r10
80018ecc:	12 9c       	mov	r12,r9
80018ece:	5d 18       	icall	r8
		}\
	}\
	if (csr & AVR32_USART_CSR_TXRDY_MASK) {\
80018ed0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018ed4:	e2 18 00 02 	andl	r8,0x2,COH
80018ed8:	c2 80       	breq	80018f28 <uart_handler_0+0xc8>
		if (buffer_bytes_available(&(usart_opt[0].uart_device.transmit_buffer))>0) {\
80018eda:	ec f8 00 34 	ld.w	r8,r6[52]
80018ede:	2f 48       	sub	r8,-12
80018ee0:	10 9c       	mov	r12,r8
80018ee2:	f0 16 00 2d 	mcall	r6[180]
80018ee6:	18 98       	mov	r8,r12
80018ee8:	58 08       	cp.w	r8,0
80018eea:	e0 8a 00 11 	brle	80018f0c <uart_handler_0+0xac>
			c1=buffer_get(&(usart_opt[0].uart_device.transmit_buffer));\
80018eee:	ec f8 00 34 	ld.w	r8,r6[52]
80018ef2:	2f 48       	sub	r8,-12
80018ef4:	10 9c       	mov	r12,r8
80018ef6:	f0 16 00 43 	mcall	r6[268]
80018efa:	18 98       	mov	r8,r12
80018efc:	ef 68 ff fb 	st.b	r7[-5],r8
			usart_opt[0].uart_device.uart->thr=c1;\
80018f00:	ec f8 00 34 	ld.w	r8,r6[52]
80018f04:	70 18       	ld.w	r8,r8[0x4]
80018f06:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80018f0a:	91 79       	st.w	r8[0x1c],r9
		}\
		if (buffer_bytes_available(&(usart_opt[0].uart_device.transmit_buffer))==0) {\
80018f0c:	ec f8 00 34 	ld.w	r8,r6[52]
80018f10:	2f 48       	sub	r8,-12
80018f12:	10 9c       	mov	r12,r8
80018f14:	f0 16 00 2d 	mcall	r6[180]
80018f18:	18 98       	mov	r8,r12
80018f1a:	58 08       	cp.w	r8,0
80018f1c:	c0 61       	brne	80018f28 <uart_handler_0+0xc8>
				usart_opt[0].uart_device.uart->idr=AVR32_USART_IDR_TXRDY_MASK;\
80018f1e:	ec f8 00 34 	ld.w	r8,r6[52]
80018f22:	70 18       	ld.w	r8,r8[0x4]
80018f24:	30 29       	mov	r9,2
80018f26:	91 39       	st.w	r8[0xc],r9
				usart_opt[UID].uart_device.uart->idr=AVR32_USART_IDR_TXRDY_MASK;\
		}\
	}\
}			

ISR(uart_handler_0, usart_opt[0].uart_device.IRQ, AVR32_INTC_INTLEV_INT1) {\
80018f28:	2f ed       	sub	sp,-8
80018f2a:	e3 cd 40 c0 	ldm	sp++,r6-r7,lr
80018f2e:	d6 03       	rete
80018f30:	80 01       	ld.sh	r1,r0[0x0]
80018f32:	8c ee       	ld.uh	lr,r6[0xc]

80018f34 <uart_handler_1>:
	}\
}			

// define interrupt handlers using above macro
//UART_HANDLER(0);
UART_HANDLER(1);
80018f34:	eb cd 40 c0 	pushm	r6-r7,lr
80018f38:	1a 97       	mov	r7,sp
80018f3a:	20 2d       	sub	sp,8
80018f3c:	4b 66       	lddpc	r6,80019014 <uart_handler_1+0xe0>
80018f3e:	1e 26       	rsub	r6,pc
80018f40:	ec f8 00 34 	ld.w	r8,r6[52]
80018f44:	f0 f8 02 2c 	ld.w	r8,r8[556]
80018f48:	70 58       	ld.w	r8,r8[0x14]
80018f4a:	ef 48 ff fc 	st.w	r7[-4],r8
80018f4e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018f52:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80018f56:	5c 58       	castu.b	r8
80018f58:	c2 80       	breq	80018fa8 <uart_handler_1+0x74>
80018f5a:	ec f8 00 34 	ld.w	r8,r6[52]
80018f5e:	f0 f8 02 2c 	ld.w	r8,r8[556]
80018f62:	70 68       	ld.w	r8,r8[0x18]
80018f64:	ef 68 ff fb 	st.b	r7[-5],r8
80018f68:	ec f8 00 34 	ld.w	r8,r6[52]
80018f6c:	f0 f8 04 3c 	ld.w	r8,r8[1084]
80018f70:	58 08       	cp.w	r8,0
80018f72:	c0 c1       	brne	80018f8a <uart_handler_1+0x56>
80018f74:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80018f78:	ec f8 00 34 	ld.w	r8,r6[52]
80018f7c:	f0 c8 fc c9 	sub	r8,r8,-823
80018f80:	12 9b       	mov	r11,r9
80018f82:	10 9c       	mov	r12,r8
80018f84:	f0 16 00 50 	mcall	r6[320]
80018f88:	c1 08       	rjmp	80018fa8 <uart_handler_1+0x74>
80018f8a:	ec f8 00 34 	ld.w	r8,r6[52]
80018f8e:	f0 f8 04 3c 	ld.w	r8,r8[1084]
80018f92:	70 18       	ld.w	r8,r8[0x4]
80018f94:	ef 3a ff fb 	ld.ub	r10,r7[-5]
80018f98:	ec f9 00 34 	ld.w	r9,r6[52]
80018f9c:	f2 f9 04 3c 	ld.w	r9,r9[1084]
80018fa0:	72 59       	ld.w	r9,r9[0x14]
80018fa2:	14 9b       	mov	r11,r10
80018fa4:	12 9c       	mov	r12,r9
80018fa6:	5d 18       	icall	r8
80018fa8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018fac:	e2 18 00 02 	andl	r8,0x2,COH
80018fb0:	c2 d0       	breq	8001900a <uart_handler_1+0xd6>
80018fb2:	ec f8 00 34 	ld.w	r8,r6[52]
80018fb6:	f0 c8 fd cc 	sub	r8,r8,-564
80018fba:	10 9c       	mov	r12,r8
80018fbc:	f0 16 00 2d 	mcall	r6[180]
80018fc0:	18 98       	mov	r8,r12
80018fc2:	58 08       	cp.w	r8,0
80018fc4:	e0 8a 00 13 	brle	80018fea <uart_handler_1+0xb6>
80018fc8:	ec f8 00 34 	ld.w	r8,r6[52]
80018fcc:	f0 c8 fd cc 	sub	r8,r8,-564
80018fd0:	10 9c       	mov	r12,r8
80018fd2:	f0 16 00 43 	mcall	r6[268]
80018fd6:	18 98       	mov	r8,r12
80018fd8:	ef 68 ff fb 	st.b	r7[-5],r8
80018fdc:	ec f8 00 34 	ld.w	r8,r6[52]
80018fe0:	f0 f8 02 2c 	ld.w	r8,r8[556]
80018fe4:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80018fe8:	91 79       	st.w	r8[0x1c],r9
80018fea:	ec f8 00 34 	ld.w	r8,r6[52]
80018fee:	f0 c8 fd cc 	sub	r8,r8,-564
80018ff2:	10 9c       	mov	r12,r8
80018ff4:	f0 16 00 2d 	mcall	r6[180]
80018ff8:	18 98       	mov	r8,r12
80018ffa:	58 08       	cp.w	r8,0
80018ffc:	c0 71       	brne	8001900a <uart_handler_1+0xd6>
80018ffe:	ec f8 00 34 	ld.w	r8,r6[52]
80019002:	f0 f8 02 2c 	ld.w	r8,r8[556]
80019006:	30 29       	mov	r9,2
80019008:	91 39       	st.w	r8[0xc],r9
8001900a:	2f ed       	sub	sp,-8
8001900c:	e3 cd 40 c0 	ldm	sp++,r6-r7,lr
80019010:	d6 03       	rete
80019012:	00 00       	add	r0,r0
80019014:	80 01       	ld.sh	r1,r0[0x0]
80019016:	8d c2       	st.w	r6[0x30],r2

80019018 <uart_handler_2>:
UART_HANDLER(2);
80019018:	eb cd 40 c0 	pushm	r6-r7,lr
8001901c:	1a 97       	mov	r7,sp
8001901e:	20 2d       	sub	sp,8
80019020:	4b 66       	lddpc	r6,800190f8 <uart_handler_2+0xe0>
80019022:	1e 26       	rsub	r6,pc
80019024:	ec f8 00 34 	ld.w	r8,r6[52]
80019028:	f0 f8 04 54 	ld.w	r8,r8[1108]
8001902c:	70 58       	ld.w	r8,r8[0x14]
8001902e:	ef 48 ff fc 	st.w	r7[-4],r8
80019032:	ee f8 ff fc 	ld.w	r8,r7[-4]
80019036:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8001903a:	5c 58       	castu.b	r8
8001903c:	c2 80       	breq	8001908c <uart_handler_2+0x74>
8001903e:	ec f8 00 34 	ld.w	r8,r6[52]
80019042:	f0 f8 04 54 	ld.w	r8,r8[1108]
80019046:	70 68       	ld.w	r8,r8[0x18]
80019048:	ef 68 ff fb 	st.b	r7[-5],r8
8001904c:	ec f8 00 34 	ld.w	r8,r6[52]
80019050:	f0 f8 06 64 	ld.w	r8,r8[1636]
80019054:	58 08       	cp.w	r8,0
80019056:	c0 c1       	brne	8001906e <uart_handler_2+0x56>
80019058:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8001905c:	ec f8 00 34 	ld.w	r8,r6[52]
80019060:	f0 c8 fa a1 	sub	r8,r8,-1375
80019064:	12 9b       	mov	r11,r9
80019066:	10 9c       	mov	r12,r8
80019068:	f0 16 00 50 	mcall	r6[320]
8001906c:	c1 08       	rjmp	8001908c <uart_handler_2+0x74>
8001906e:	ec f8 00 34 	ld.w	r8,r6[52]
80019072:	f0 f8 06 64 	ld.w	r8,r8[1636]
80019076:	70 18       	ld.w	r8,r8[0x4]
80019078:	ef 3a ff fb 	ld.ub	r10,r7[-5]
8001907c:	ec f9 00 34 	ld.w	r9,r6[52]
80019080:	f2 f9 06 64 	ld.w	r9,r9[1636]
80019084:	72 59       	ld.w	r9,r9[0x14]
80019086:	14 9b       	mov	r11,r10
80019088:	12 9c       	mov	r12,r9
8001908a:	5d 18       	icall	r8
8001908c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80019090:	e2 18 00 02 	andl	r8,0x2,COH
80019094:	c2 d0       	breq	800190ee <uart_handler_2+0xd6>
80019096:	ec f8 00 34 	ld.w	r8,r6[52]
8001909a:	f0 c8 fb a4 	sub	r8,r8,-1116
8001909e:	10 9c       	mov	r12,r8
800190a0:	f0 16 00 2d 	mcall	r6[180]
800190a4:	18 98       	mov	r8,r12
800190a6:	58 08       	cp.w	r8,0
800190a8:	e0 8a 00 13 	brle	800190ce <uart_handler_2+0xb6>
800190ac:	ec f8 00 34 	ld.w	r8,r6[52]
800190b0:	f0 c8 fb a4 	sub	r8,r8,-1116
800190b4:	10 9c       	mov	r12,r8
800190b6:	f0 16 00 43 	mcall	r6[268]
800190ba:	18 98       	mov	r8,r12
800190bc:	ef 68 ff fb 	st.b	r7[-5],r8
800190c0:	ec f8 00 34 	ld.w	r8,r6[52]
800190c4:	f0 f8 04 54 	ld.w	r8,r8[1108]
800190c8:	ef 39 ff fb 	ld.ub	r9,r7[-5]
800190cc:	91 79       	st.w	r8[0x1c],r9
800190ce:	ec f8 00 34 	ld.w	r8,r6[52]
800190d2:	f0 c8 fb a4 	sub	r8,r8,-1116
800190d6:	10 9c       	mov	r12,r8
800190d8:	f0 16 00 2d 	mcall	r6[180]
800190dc:	18 98       	mov	r8,r12
800190de:	58 08       	cp.w	r8,0
800190e0:	c0 71       	brne	800190ee <uart_handler_2+0xd6>
800190e2:	ec f8 00 34 	ld.w	r8,r6[52]
800190e6:	f0 f8 04 54 	ld.w	r8,r8[1108]
800190ea:	30 29       	mov	r9,2
800190ec:	91 39       	st.w	r8[0xc],r9
800190ee:	2f ed       	sub	sp,-8
800190f0:	e3 cd 40 c0 	ldm	sp++,r6-r7,lr
800190f4:	d6 03       	rete
800190f6:	00 00       	add	r0,r0
800190f8:	80 01       	ld.sh	r1,r0[0x0]
800190fa:	8e a6       	ld.uh	r6,r7[0x4]

800190fc <uart_handler_3>:
UART_HANDLER(3);
800190fc:	eb cd 40 c0 	pushm	r6-r7,lr
80019100:	1a 97       	mov	r7,sp
80019102:	20 2d       	sub	sp,8
80019104:	4b 66       	lddpc	r6,800191dc <uart_handler_3+0xe0>
80019106:	1e 26       	rsub	r6,pc
80019108:	ec f8 00 34 	ld.w	r8,r6[52]
8001910c:	f0 f8 06 7c 	ld.w	r8,r8[1660]
80019110:	70 58       	ld.w	r8,r8[0x14]
80019112:	ef 48 ff fc 	st.w	r7[-4],r8
80019116:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001911a:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8001911e:	5c 58       	castu.b	r8
80019120:	c2 80       	breq	80019170 <uart_handler_3+0x74>
80019122:	ec f8 00 34 	ld.w	r8,r6[52]
80019126:	f0 f8 06 7c 	ld.w	r8,r8[1660]
8001912a:	70 68       	ld.w	r8,r8[0x18]
8001912c:	ef 68 ff fb 	st.b	r7[-5],r8
80019130:	ec f8 00 34 	ld.w	r8,r6[52]
80019134:	f0 f8 08 8c 	ld.w	r8,r8[2188]
80019138:	58 08       	cp.w	r8,0
8001913a:	c0 c1       	brne	80019152 <uart_handler_3+0x56>
8001913c:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80019140:	ec f8 00 34 	ld.w	r8,r6[52]
80019144:	f0 c8 f8 79 	sub	r8,r8,-1927
80019148:	12 9b       	mov	r11,r9
8001914a:	10 9c       	mov	r12,r8
8001914c:	f0 16 00 50 	mcall	r6[320]
80019150:	c1 08       	rjmp	80019170 <uart_handler_3+0x74>
80019152:	ec f8 00 34 	ld.w	r8,r6[52]
80019156:	f0 f8 08 8c 	ld.w	r8,r8[2188]
8001915a:	70 18       	ld.w	r8,r8[0x4]
8001915c:	ef 3a ff fb 	ld.ub	r10,r7[-5]
80019160:	ec f9 00 34 	ld.w	r9,r6[52]
80019164:	f2 f9 08 8c 	ld.w	r9,r9[2188]
80019168:	72 59       	ld.w	r9,r9[0x14]
8001916a:	14 9b       	mov	r11,r10
8001916c:	12 9c       	mov	r12,r9
8001916e:	5d 18       	icall	r8
80019170:	ee f8 ff fc 	ld.w	r8,r7[-4]
80019174:	e2 18 00 02 	andl	r8,0x2,COH
80019178:	c2 d0       	breq	800191d2 <uart_handler_3+0xd6>
8001917a:	ec f8 00 34 	ld.w	r8,r6[52]
8001917e:	f0 c8 f9 7c 	sub	r8,r8,-1668
80019182:	10 9c       	mov	r12,r8
80019184:	f0 16 00 2d 	mcall	r6[180]
80019188:	18 98       	mov	r8,r12
8001918a:	58 08       	cp.w	r8,0
8001918c:	e0 8a 00 13 	brle	800191b2 <uart_handler_3+0xb6>
80019190:	ec f8 00 34 	ld.w	r8,r6[52]
80019194:	f0 c8 f9 7c 	sub	r8,r8,-1668
80019198:	10 9c       	mov	r12,r8
8001919a:	f0 16 00 43 	mcall	r6[268]
8001919e:	18 98       	mov	r8,r12
800191a0:	ef 68 ff fb 	st.b	r7[-5],r8
800191a4:	ec f8 00 34 	ld.w	r8,r6[52]
800191a8:	f0 f8 06 7c 	ld.w	r8,r8[1660]
800191ac:	ef 39 ff fb 	ld.ub	r9,r7[-5]
800191b0:	91 79       	st.w	r8[0x1c],r9
800191b2:	ec f8 00 34 	ld.w	r8,r6[52]
800191b6:	f0 c8 f9 7c 	sub	r8,r8,-1668
800191ba:	10 9c       	mov	r12,r8
800191bc:	f0 16 00 2d 	mcall	r6[180]
800191c0:	18 98       	mov	r8,r12
800191c2:	58 08       	cp.w	r8,0
800191c4:	c0 71       	brne	800191d2 <uart_handler_3+0xd6>
800191c6:	ec f8 00 34 	ld.w	r8,r6[52]
800191ca:	f0 f8 06 7c 	ld.w	r8,r8[1660]
800191ce:	30 29       	mov	r9,2
800191d0:	91 39       	st.w	r8[0xc],r9
800191d2:	2f ed       	sub	sp,-8
800191d4:	e3 cd 40 c0 	ldm	sp++,r6-r7,lr
800191d8:	d6 03       	rete
800191da:	00 00       	add	r0,r0
800191dc:	80 01       	ld.sh	r1,r0[0x0]
800191de:	8f 8a       	st.w	r7[0x20],r10

800191e0 <uart_handler_4>:
UART_HANDLER(4);
800191e0:	eb cd 40 c0 	pushm	r6-r7,lr
800191e4:	1a 97       	mov	r7,sp
800191e6:	20 2d       	sub	sp,8
800191e8:	4b 66       	lddpc	r6,800192c0 <uart_handler_4+0xe0>
800191ea:	1e 26       	rsub	r6,pc
800191ec:	ec f8 00 34 	ld.w	r8,r6[52]
800191f0:	f0 f8 08 a4 	ld.w	r8,r8[2212]
800191f4:	70 58       	ld.w	r8,r8[0x14]
800191f6:	ef 48 ff fc 	st.w	r7[-4],r8
800191fa:	ee f8 ff fc 	ld.w	r8,r7[-4]
800191fe:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80019202:	5c 58       	castu.b	r8
80019204:	c2 80       	breq	80019254 <uart_handler_4+0x74>
80019206:	ec f8 00 34 	ld.w	r8,r6[52]
8001920a:	f0 f8 08 a4 	ld.w	r8,r8[2212]
8001920e:	70 68       	ld.w	r8,r8[0x18]
80019210:	ef 68 ff fb 	st.b	r7[-5],r8
80019214:	ec f8 00 34 	ld.w	r8,r6[52]
80019218:	f0 f8 0a b4 	ld.w	r8,r8[2740]
8001921c:	58 08       	cp.w	r8,0
8001921e:	c0 c1       	brne	80019236 <uart_handler_4+0x56>
80019220:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80019224:	ec f8 00 34 	ld.w	r8,r6[52]
80019228:	f0 c8 f6 51 	sub	r8,r8,-2479
8001922c:	12 9b       	mov	r11,r9
8001922e:	10 9c       	mov	r12,r8
80019230:	f0 16 00 50 	mcall	r6[320]
80019234:	c1 08       	rjmp	80019254 <uart_handler_4+0x74>
80019236:	ec f8 00 34 	ld.w	r8,r6[52]
8001923a:	f0 f8 0a b4 	ld.w	r8,r8[2740]
8001923e:	70 18       	ld.w	r8,r8[0x4]
80019240:	ef 3a ff fb 	ld.ub	r10,r7[-5]
80019244:	ec f9 00 34 	ld.w	r9,r6[52]
80019248:	f2 f9 0a b4 	ld.w	r9,r9[2740]
8001924c:	72 59       	ld.w	r9,r9[0x14]
8001924e:	14 9b       	mov	r11,r10
80019250:	12 9c       	mov	r12,r9
80019252:	5d 18       	icall	r8
80019254:	ee f8 ff fc 	ld.w	r8,r7[-4]
80019258:	e2 18 00 02 	andl	r8,0x2,COH
8001925c:	c2 d0       	breq	800192b6 <uart_handler_4+0xd6>
8001925e:	ec f8 00 34 	ld.w	r8,r6[52]
80019262:	f0 c8 f7 54 	sub	r8,r8,-2220
80019266:	10 9c       	mov	r12,r8
80019268:	f0 16 00 2d 	mcall	r6[180]
8001926c:	18 98       	mov	r8,r12
8001926e:	58 08       	cp.w	r8,0
80019270:	e0 8a 00 13 	brle	80019296 <uart_handler_4+0xb6>
80019274:	ec f8 00 34 	ld.w	r8,r6[52]
80019278:	f0 c8 f7 54 	sub	r8,r8,-2220
8001927c:	10 9c       	mov	r12,r8
8001927e:	f0 16 00 43 	mcall	r6[268]
80019282:	18 98       	mov	r8,r12
80019284:	ef 68 ff fb 	st.b	r7[-5],r8
80019288:	ec f8 00 34 	ld.w	r8,r6[52]
8001928c:	f0 f8 08 a4 	ld.w	r8,r8[2212]
80019290:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80019294:	91 79       	st.w	r8[0x1c],r9
80019296:	ec f8 00 34 	ld.w	r8,r6[52]
8001929a:	f0 c8 f7 54 	sub	r8,r8,-2220
8001929e:	10 9c       	mov	r12,r8
800192a0:	f0 16 00 2d 	mcall	r6[180]
800192a4:	18 98       	mov	r8,r12
800192a6:	58 08       	cp.w	r8,0
800192a8:	c0 71       	brne	800192b6 <uart_handler_4+0xd6>
800192aa:	ec f8 00 34 	ld.w	r8,r6[52]
800192ae:	f0 f8 08 a4 	ld.w	r8,r8[2212]
800192b2:	30 29       	mov	r9,2
800192b4:	91 39       	st.w	r8[0xc],r9
800192b6:	2f ed       	sub	sp,-8
800192b8:	e3 cd 40 c0 	ldm	sp++,r6-r7,lr
800192bc:	d6 03       	rete
800192be:	00 00       	add	r0,r0
800192c0:	80 01       	ld.sh	r1,r0[0x0]
800192c2:	90 6e       	ld.sh	lr,r8[0xc]

800192c4 <register_UART_handler>:


void register_UART_handler(int UID) {
800192c4:	eb cd 40 c0 	pushm	r6-r7,lr
800192c8:	1a 97       	mov	r7,sp
800192ca:	20 1d       	sub	sp,4
800192cc:	4a 56       	lddpc	r6,80019360 <register_UART_handler+0x9c>
800192ce:	1e 26       	rsub	r6,pc
800192d0:	ef 4c ff fc 	st.w	r7[-4],r12
	switch(UID) {
800192d4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800192d8:	58 28       	cp.w	r8,2
800192da:	c2 00       	breq	8001931a <register_UART_handler+0x56>
800192dc:	e0 89 00 07 	brgt	800192ea <register_UART_handler+0x26>
800192e0:	58 08       	cp.w	r8,0
800192e2:	c0 90       	breq	800192f4 <register_UART_handler+0x30>
800192e4:	58 18       	cp.w	r8,1
800192e6:	c0 f0       	breq	80019304 <register_UART_handler+0x40>
800192e8:	c3 98       	rjmp	8001935a <register_UART_handler+0x96>
800192ea:	58 38       	cp.w	r8,3
800192ec:	c2 20       	breq	80019330 <register_UART_handler+0x6c>
800192ee:	58 48       	cp.w	r8,4
800192f0:	c2 b0       	breq	80019346 <register_UART_handler+0x82>
800192f2:	c3 48       	rjmp	8001935a <register_UART_handler+0x96>
		case 0: 	INTC_register_interrupt( (__int_handler) &uart_handler_0, AVR32_USART0_IRQ, AVR32_INTC_INT1); break;
800192f4:	30 1a       	mov	r10,1
800192f6:	e0 6b 02 60 	mov	r11,608
800192fa:	fe cc 04 9a 	sub	r12,pc,1178
800192fe:	f0 16 00 3c 	mcall	r6[240]
80019302:	c2 c8       	rjmp	8001935a <register_UART_handler+0x96>
		case 1: 	INTC_register_interrupt( (__int_handler) &uart_handler_1, usart_opt[1].uart_device.IRQ, AVR32_INTC_INT1); break;
80019304:	ec f8 00 34 	ld.w	r8,r6[52]
80019308:	f0 f8 02 30 	ld.w	r8,r8[560]
8001930c:	30 1a       	mov	r10,1
8001930e:	10 9b       	mov	r11,r8
80019310:	fe cc 03 dc 	sub	r12,pc,988
80019314:	f0 16 00 3c 	mcall	r6[240]
80019318:	c2 18       	rjmp	8001935a <register_UART_handler+0x96>
		case 2: 	INTC_register_interrupt( (__int_handler) &uart_handler_2, usart_opt[2].uart_device.IRQ, AVR32_INTC_INT1); break;
8001931a:	ec f8 00 34 	ld.w	r8,r6[52]
8001931e:	f0 f8 04 58 	ld.w	r8,r8[1112]
80019322:	30 1a       	mov	r10,1
80019324:	10 9b       	mov	r11,r8
80019326:	fe cc 03 0e 	sub	r12,pc,782
8001932a:	f0 16 00 3c 	mcall	r6[240]
8001932e:	c1 68       	rjmp	8001935a <register_UART_handler+0x96>
		case 3: 	INTC_register_interrupt( (__int_handler) &uart_handler_3, usart_opt[3].uart_device.IRQ, AVR32_INTC_INT1); break;
80019330:	ec f8 00 34 	ld.w	r8,r6[52]
80019334:	f0 f8 06 80 	ld.w	r8,r8[1664]
80019338:	30 1a       	mov	r10,1
8001933a:	10 9b       	mov	r11,r8
8001933c:	fe cc 02 40 	sub	r12,pc,576
80019340:	f0 16 00 3c 	mcall	r6[240]
80019344:	c0 b8       	rjmp	8001935a <register_UART_handler+0x96>
		case 4: 	INTC_register_interrupt( (__int_handler) &uart_handler_4, usart_opt[4].uart_device.IRQ, AVR32_INTC_INT1); break;
80019346:	ec f8 00 34 	ld.w	r8,r6[52]
8001934a:	f0 f8 08 a8 	ld.w	r8,r8[2216]
8001934e:	30 1a       	mov	r10,1
80019350:	10 9b       	mov	r11,r8
80019352:	fe cc 01 72 	sub	r12,pc,370
80019356:	f0 16 00 3c 	mcall	r6[240]

	}
	
}
8001935a:	2f fd       	sub	sp,-4
8001935c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80019360:	80 01       	ld.sh	r1,r0[0x0]
80019362:	91 52       	st.w	r8[0x14],r2

80019364 <init_UART_int>:

usart_config_t *init_UART_int(int UID) {
80019364:	eb cd 40 c0 	pushm	r6-r7,lr
80019368:	1a 97       	mov	r7,sp
8001936a:	20 1d       	sub	sp,4
8001936c:	4e 16       	lddpc	r6,800194f0 <init_UART_int+0x18c>
8001936e:	1e 26       	rsub	r6,pc
80019370:	ef 4c ff fc 	st.w	r7[-4],r12
	if ((usart_opt[UID].mode&UART_IN) >0)  gpio_enable_module_pin(usart_opt[UID].rx_pin_map.pin, usart_opt[UID].rx_pin_map.function); 
80019374:	ee fa ff fc 	ld.w	r10,r7[-4]
80019378:	ec f9 00 34 	ld.w	r9,r6[52]
8001937c:	e0 68 02 28 	mov	r8,552
80019380:	f4 08 02 48 	mul	r8,r10,r8
80019384:	f2 08 00 08 	add	r8,r9,r8
80019388:	70 08       	ld.w	r8,r8[0x0]
8001938a:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8001938e:	58 08       	cp.w	r8,0
80019390:	e0 8a 00 21 	brle	800193d2 <init_UART_int+0x6e>
80019394:	ee fa ff fc 	ld.w	r10,r7[-4]
80019398:	ec f9 00 34 	ld.w	r9,r6[52]
8001939c:	e0 68 02 28 	mov	r8,552
800193a0:	f4 08 02 48 	mul	r8,r10,r8
800193a4:	f2 08 00 08 	add	r8,r9,r8
800193a8:	f0 c8 fd dc 	sub	r8,r8,-548
800193ac:	11 98       	ld.ub	r8,r8[0x1]
800193ae:	10 99       	mov	r9,r8
800193b0:	ee fb ff fc 	ld.w	r11,r7[-4]
800193b4:	ec fa 00 34 	ld.w	r10,r6[52]
800193b8:	e0 68 02 28 	mov	r8,552
800193bc:	f6 08 02 48 	mul	r8,r11,r8
800193c0:	f4 08 00 08 	add	r8,r10,r8
800193c4:	f0 c8 fd dc 	sub	r8,r8,-548
800193c8:	11 88       	ld.ub	r8,r8[0x0]
800193ca:	12 9b       	mov	r11,r9
800193cc:	10 9c       	mov	r12,r8
800193ce:	f0 16 00 3d 	mcall	r6[244]
	if ((usart_opt[UID].mode&UART_OUT)>0)  gpio_enable_module_pin(usart_opt[UID].tx_pin_map.pin, usart_opt[UID].tx_pin_map.function); 
800193d2:	ee fa ff fc 	ld.w	r10,r7[-4]
800193d6:	ec f9 00 34 	ld.w	r9,r6[52]
800193da:	e0 68 02 28 	mov	r8,552
800193de:	f4 08 02 48 	mul	r8,r10,r8
800193e2:	f2 08 00 08 	add	r8,r9,r8
800193e6:	70 08       	ld.w	r8,r8[0x0]
800193e8:	e2 18 00 02 	andl	r8,0x2,COH
800193ec:	58 08       	cp.w	r8,0
800193ee:	e0 8a 00 21 	brle	80019430 <init_UART_int+0xcc>
800193f2:	ee fa ff fc 	ld.w	r10,r7[-4]
800193f6:	ec f9 00 34 	ld.w	r9,r6[52]
800193fa:	e0 68 02 28 	mov	r8,552
800193fe:	f4 08 02 48 	mul	r8,r10,r8
80019402:	f2 08 00 08 	add	r8,r9,r8
80019406:	f0 c8 fd dc 	sub	r8,r8,-548
8001940a:	11 b8       	ld.ub	r8,r8[0x3]
8001940c:	10 99       	mov	r9,r8
8001940e:	ee fb ff fc 	ld.w	r11,r7[-4]
80019412:	ec fa 00 34 	ld.w	r10,r6[52]
80019416:	e0 68 02 28 	mov	r8,552
8001941a:	f6 08 02 48 	mul	r8,r11,r8
8001941e:	f4 08 00 08 	add	r8,r10,r8
80019422:	f0 c8 fd dc 	sub	r8,r8,-548
80019426:	11 a8       	ld.ub	r8,r8[0x2]
80019428:	12 9b       	mov	r11,r9
8001942a:	10 9c       	mov	r12,r8
8001942c:	f0 16 00 3d 	mcall	r6[244]

	usart_init_rs232( usart_opt[UID].uart_device.uart, &(usart_opt[UID].options), sysclk_get_cpu_hz()); 
80019430:	fe b0 fd 0c 	rcall	80018e48 <sysclk_get_cpu_hz>
80019434:	18 98       	mov	r8,r12
80019436:	10 9a       	mov	r10,r8
80019438:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001943c:	e0 68 02 28 	mov	r8,552
80019440:	f2 08 02 48 	mul	r8,r9,r8
80019444:	f0 c9 fd e8 	sub	r9,r8,-536
80019448:	ec f8 00 34 	ld.w	r8,r6[52]
8001944c:	10 09       	add	r9,r8
8001944e:	ee fc ff fc 	ld.w	r12,r7[-4]
80019452:	ec f8 00 34 	ld.w	r8,r6[52]
80019456:	e0 6b 00 8a 	mov	r11,138
8001945a:	f8 0b 02 4b 	mul	r11,r12,r11
8001945e:	2f fb       	sub	r11,-1
80019460:	f0 0b 03 28 	ld.w	r8,r8[r11<<0x2]
80019464:	12 9b       	mov	r11,r9
80019466:	10 9c       	mov	r12,r8
80019468:	f0 16 00 61 	mcall	r6[388]
	//usart_write_line(usart_opt[UID].uart_device.uart, "UART initialised");
	register_UART_handler(UID);
8001946c:	ee fc ff fc 	ld.w	r12,r7[-4]
80019470:	f0 16 01 ef 	mcall	r6[1980]
	buffer_init(&usart_opt[UID].uart_device.transmit_buffer);
80019474:	ee f9 ff fc 	ld.w	r9,r7[-4]
80019478:	e0 68 02 28 	mov	r8,552
8001947c:	f2 08 02 48 	mul	r8,r9,r8
80019480:	f0 c9 ff f4 	sub	r9,r8,-12
80019484:	ec f8 00 34 	ld.w	r8,r6[52]
80019488:	f2 08 00 08 	add	r8,r9,r8
8001948c:	10 9c       	mov	r12,r8
8001948e:	f0 16 01 24 	mcall	r6[1168]
	buffer_init(&usart_opt[UID].uart_device.receive_buffer);
80019492:	ee f9 ff fc 	ld.w	r9,r7[-4]
80019496:	e0 68 02 28 	mov	r8,552
8001949a:	f2 08 02 48 	mul	r8,r9,r8
8001949e:	f0 c9 fe f4 	sub	r9,r8,-268
800194a2:	ec f8 00 34 	ld.w	r8,r6[52]
800194a6:	f2 08 00 08 	add	r8,r9,r8
800194aa:	2f d8       	sub	r8,-3
800194ac:	10 9c       	mov	r12,r8
800194ae:	f0 16 01 24 	mcall	r6[1168]
	if (usart_opt[UID].mode&UART_IN >0) usart_opt[UID].uart_device.uart->ier=AVR32_USART_IER_RXRDY_MASK;
800194b2:	ee fa ff fc 	ld.w	r10,r7[-4]
800194b6:	ec f9 00 34 	ld.w	r9,r6[52]
800194ba:	e0 68 02 28 	mov	r8,552
800194be:	f4 08 02 48 	mul	r8,r10,r8
800194c2:	f2 08 00 08 	add	r8,r9,r8
800194c6:	70 08       	ld.w	r8,r8[0x0]
800194c8:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800194cc:	5c 58       	castu.b	r8
800194ce:	c0 e0       	breq	800194ea <init_UART_int+0x186>
800194d0:	ee fa ff fc 	ld.w	r10,r7[-4]
800194d4:	ec f8 00 34 	ld.w	r8,r6[52]
800194d8:	e0 69 00 8a 	mov	r9,138
800194dc:	f4 09 02 49 	mul	r9,r10,r9
800194e0:	2f f9       	sub	r9,-1
800194e2:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800194e6:	30 19       	mov	r9,1
800194e8:	91 29       	st.w	r8[0x8],r9
	//if (usart_opt[UID].mode&UART_OUT>0) usart_opt[UID].uart_device.uart->ier=AVR32_USART_IER_TXRDY_MASK;
} 
800194ea:	2f fd       	sub	sp,-4
800194ec:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800194f0:	80 01       	ld.sh	r1,r0[0x0]
800194f2:	91 f2       	st.w	r8[0x3c],r2

800194f4 <uart_int_get_byte>:

/************************************************************************/
/* blocking operation to retrieve a received byte from uart             */
/************************************************************************/
char uart_int_get_byte(usart_config_t *usart_opt) {
800194f4:	eb cd 40 c0 	pushm	r6-r7,lr
800194f8:	1a 97       	mov	r7,sp
800194fa:	20 1d       	sub	sp,4
800194fc:	48 86       	lddpc	r6,8001951c <uart_int_get_byte+0x28>
800194fe:	1e 26       	rsub	r6,pc
80019500:	ef 4c ff fc 	st.w	r7[-4],r12
	return buffer_get(&(usart_opt->uart_device.receive_buffer));
80019504:	ee f8 ff fc 	ld.w	r8,r7[-4]
80019508:	f0 c8 fe f1 	sub	r8,r8,-271
8001950c:	10 9c       	mov	r12,r8
8001950e:	f0 16 00 43 	mcall	r6[268]
80019512:	18 98       	mov	r8,r12
}
80019514:	10 9c       	mov	r12,r8
80019516:	2f fd       	sub	sp,-4
80019518:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001951c:	80 01       	ld.sh	r1,r0[0x0]
8001951e:	93 82       	st.w	r9[0x20],r2

80019520 <uart_int_bytes_available>:

/************************************************************************/
/* returns number of received bytes in the receive buffer               */
/************************************************************************/
int uart_int_bytes_available(usart_config_t *usart_opt) {
80019520:	eb cd 40 c0 	pushm	r6-r7,lr
80019524:	1a 97       	mov	r7,sp
80019526:	20 1d       	sub	sp,4
80019528:	48 86       	lddpc	r6,80019548 <uart_int_bytes_available+0x28>
8001952a:	1e 26       	rsub	r6,pc
8001952c:	ef 4c ff fc 	st.w	r7[-4],r12
	return buffer_bytes_available(&(usart_opt->uart_device.receive_buffer));
80019530:	ee f8 ff fc 	ld.w	r8,r7[-4]
80019534:	f0 c8 fe f1 	sub	r8,r8,-271
80019538:	10 9c       	mov	r12,r8
8001953a:	f0 16 00 2d 	mcall	r6[180]
8001953e:	18 98       	mov	r8,r12
}
80019540:	10 9c       	mov	r12,r8
80019542:	2f fd       	sub	sp,-4
80019544:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80019548:	80 01       	ld.sh	r1,r0[0x0]
8001954a:	93 ae       	st.w	r9[0x28],lr

8001954c <uart_int_send_byte>:

/************************************************************************/
/* non-blocking operation to append a byte to the uart send buffer      */
/* if buffer is full, the command has no effect  (returns -1).          */
/************************************************************************/
short uart_int_send_byte(usart_config_t *usart_opt, char data) {
8001954c:	eb cd 40 c0 	pushm	r6-r7,lr
80019550:	1a 97       	mov	r7,sp
80019552:	20 2d       	sub	sp,8
80019554:	49 56       	lddpc	r6,800195a8 <uart_int_send_byte+0x5c>
80019556:	1e 26       	rsub	r6,pc
80019558:	ef 4c ff fc 	st.w	r7[-4],r12
8001955c:	16 98       	mov	r8,r11
8001955e:	ef 68 ff f8 	st.b	r7[-8],r8
//	usart_write_line(usart_opt->uart_device.uart, "\ns");
	while (buffer_put(&(usart_opt->uart_device.transmit_buffer), data)<0);
80019562:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80019566:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001956a:	2f 48       	sub	r8,-12
8001956c:	12 9b       	mov	r11,r9
8001956e:	10 9c       	mov	r12,r8
80019570:	f0 16 00 50 	mcall	r6[320]
80019574:	18 98       	mov	r8,r12
80019576:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8001957a:	30 08       	mov	r8,0
8001957c:	f0 09 18 00 	cp.b	r9,r8
80019580:	cf 15       	brlt	80019562 <uart_int_send_byte+0x16>
	if ((buffer_bytes_available(&(usart_opt->uart_device.transmit_buffer)) >= 1))//&&
80019582:	ee f8 ff fc 	ld.w	r8,r7[-4]
80019586:	2f 48       	sub	r8,-12
80019588:	10 9c       	mov	r12,r8
8001958a:	f0 16 00 2d 	mcall	r6[180]
8001958e:	18 98       	mov	r8,r12
80019590:	58 08       	cp.w	r8,0
80019592:	e0 8a 00 07 	brle	800195a0 <uart_int_send_byte+0x54>
//	  (usart_opt->uart_device.uart->csr & AVR32_USART_CSR_TXRDY_MASK)) 
	{ // if there is exactly one byte in the buffer (this one...), and transmitter ready
		 // kick-start transmission
//		usart_opt->uart_device.uart->thr='c';//buffer_get(&(usart_opt->uart_device.transmit_buffer));
		usart_opt->uart_device.uart->ier=AVR32_USART_IER_TXRDY_MASK;
80019596:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001959a:	70 18       	ld.w	r8,r8[0x4]
8001959c:	30 29       	mov	r9,2
8001959e:	91 29       	st.w	r8[0x8],r9
	} 		
}
800195a0:	2f ed       	sub	sp,-8
800195a2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800195a6:	00 00       	add	r0,r0
800195a8:	80 01       	ld.sh	r1,r0[0x0]
800195aa:	93 da       	st.w	r9[0x34],r10

800195ac <uart_int_flush>:


/** 
 * blocking operation to flush the uart buffer. Returns once the last byte has been passed to hardware for transmission.
 */
void uart_int_flush(usart_config_t *usart_opt) {
800195ac:	eb cd 40 c0 	pushm	r6-r7,lr
800195b0:	1a 97       	mov	r7,sp
800195b2:	20 1d       	sub	sp,4
800195b4:	48 b6       	lddpc	r6,800195e0 <uart_int_flush+0x34>
800195b6:	1e 26       	rsub	r6,pc
800195b8:	ef 4c ff fc 	st.w	r7[-4],r12
	usart_opt->uart_device.uart->ier=AVR32_USART_IER_TXRDY_MASK;
800195bc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800195c0:	70 18       	ld.w	r8,r8[0x4]
800195c2:	30 29       	mov	r9,2
800195c4:	91 29       	st.w	r8[0x8],r9
	while (!buffer_empty(&(usart_opt->uart_device.transmit_buffer)));
800195c6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800195ca:	2f 48       	sub	r8,-12
800195cc:	10 9c       	mov	r12,r8
800195ce:	f0 16 01 16 	mcall	r6[1112]
800195d2:	18 98       	mov	r8,r12
800195d4:	5c 58       	castu.b	r8
800195d6:	cf 80       	breq	800195c6 <uart_int_flush+0x1a>
}
800195d8:	2f fd       	sub	sp,-4
800195da:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800195de:	00 00       	add	r0,r0
800195e0:	80 01       	ld.sh	r1,r0[0x0]
800195e2:	94 3a       	ld.sh	r10,r10[0x6]

800195e4 <uart_out_buffer_empty>:

int uart_out_buffer_empty(usart_config_t *usart_opt) {
800195e4:	eb cd 40 c0 	pushm	r6-r7,lr
800195e8:	1a 97       	mov	r7,sp
800195ea:	20 1d       	sub	sp,4
800195ec:	48 96       	lddpc	r6,80019610 <uart_out_buffer_empty+0x2c>
800195ee:	1e 26       	rsub	r6,pc
800195f0:	ef 4c ff fc 	st.w	r7[-4],r12
	return buffer_empty(&(usart_opt->uart_device.transmit_buffer));
800195f4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800195f8:	2f 48       	sub	r8,-12
800195fa:	10 9c       	mov	r12,r8
800195fc:	f0 16 01 16 	mcall	r6[1112]
80019600:	18 98       	mov	r8,r12
80019602:	5c 58       	castu.b	r8
80019604:	5c 68       	casts.b	r8
}
80019606:	10 9c       	mov	r12,r8
80019608:	2f fd       	sub	sp,-4
8001960a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001960e:	00 00       	add	r0,r0
80019610:	80 01       	ld.sh	r1,r0[0x0]
80019612:	94 72       	ld.sh	r2,r10[0xe]

80019614 <get_UART_handle>:

usart_config_t *get_UART_handle(int UID) {
80019614:	eb cd 40 c0 	pushm	r6-r7,lr
80019618:	1a 97       	mov	r7,sp
8001961a:	20 1d       	sub	sp,4
8001961c:	48 96       	lddpc	r6,80019640 <get_UART_handle+0x2c>
8001961e:	1e 26       	rsub	r6,pc
80019620:	ef 4c ff fc 	st.w	r7[-4],r12
	return &usart_opt[UID];
80019624:	ee f9 ff fc 	ld.w	r9,r7[-4]
80019628:	e0 68 02 28 	mov	r8,552
8001962c:	b1 39       	mul	r9,r8
8001962e:	ec f8 00 34 	ld.w	r8,r6[52]
80019632:	f2 08 00 08 	add	r8,r9,r8
}
80019636:	10 9c       	mov	r12,r8
80019638:	2f fd       	sub	sp,-4
8001963a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001963e:	00 00       	add	r0,r0
80019640:	80 01       	ld.sh	r1,r0[0x0]
80019642:	94 a2       	ld.uh	r2,r10[0x4]

80019644 <register_write_stream>:

void register_write_stream(usart_config_t *usart_opt, byte_stream_t *stream) {
80019644:	eb cd 40 c0 	pushm	r6-r7,lr
80019648:	1a 97       	mov	r7,sp
8001964a:	20 2d       	sub	sp,8
8001964c:	49 16       	lddpc	r6,80019690 <register_write_stream+0x4c>
8001964e:	1e 26       	rsub	r6,pc
80019650:	ef 4c ff fc 	st.w	r7[-4],r12
80019654:	ef 4b ff f8 	st.w	r7[-8],r11
	stream->get=NULL;
80019658:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001965c:	30 09       	mov	r9,0
8001965e:	91 09       	st.w	r8[0x0],r9
	//stream->get=&uart_int_get_byte;
	stream->put=&uart_int_send_byte;
80019660:	ec f9 05 c4 	ld.w	r9,r6[1476]
80019664:	ee f8 ff f8 	ld.w	r8,r7[-8]
80019668:	91 19       	st.w	r8[0x4],r9
	stream->flush=&uart_int_flush;
8001966a:	ec f9 06 74 	ld.w	r9,r6[1652]
8001966e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80019672:	91 29       	st.w	r8[0x8],r9
	stream->buffer_empty=&uart_out_buffer_empty;
80019674:	ec f9 08 3c 	ld.w	r9,r6[2108]
80019678:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001967c:	91 39       	st.w	r8[0xc],r9
	stream->data=usart_opt;
8001967e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80019682:	ee f9 ff fc 	ld.w	r9,r7[-4]
80019686:	91 59       	st.w	r8[0x14],r9

}
80019688:	2f ed       	sub	sp,-8
8001968a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001968e:	00 00       	add	r0,r0
80019690:	80 01       	ld.sh	r1,r0[0x0]
80019692:	94 d2       	ld.uh	r2,r10[0xa]

80019694 <register_read_stream>:


void register_read_stream(usart_config_t *usart_opt,  byte_stream_t *stream) {
80019694:	eb cd 40 80 	pushm	r7,lr
80019698:	1a 97       	mov	r7,sp
8001969a:	20 2d       	sub	sp,8
8001969c:	ef 4c ff fc 	st.w	r7[-4],r12
800196a0:	ef 4b ff f8 	st.w	r7[-8],r11
	usart_opt->uart_device.receive_stream=stream;
800196a4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800196a8:	ee f9 ff f8 	ld.w	r9,r7[-8]
800196ac:	f1 49 02 14 	st.w	r8[532],r9
}
800196b0:	2f ed       	sub	sp,-8
800196b2:	e3 cd 80 80 	ldm	sp++,r7,pc
	...

800196b8 <init_scheduler>:
#include "scheduler.h"
#include "time_keeper.h"



void init_scheduler(task_set *ts) {
800196b8:	eb cd 40 80 	pushm	r7,lr
800196bc:	1a 97       	mov	r7,sp
800196be:	20 2d       	sub	sp,8
800196c0:	ef 4c ff f8 	st.w	r7[-8],r12
	int i;
	for (i=0; i<ts->number_of_tasks; i++) {
800196c4:	30 08       	mov	r8,0
800196c6:	ef 48 ff fc 	st.w	r7[-4],r8
800196ca:	c2 18       	rjmp	8001970c <init_scheduler+0x54>
		ts->tasks[i].call_function=NULL;
800196cc:	ee f9 ff fc 	ld.w	r9,r7[-4]
800196d0:	ee fa ff f8 	ld.w	r10,r7[-8]
800196d4:	12 98       	mov	r8,r9
800196d6:	a1 78       	lsl	r8,0x1
800196d8:	12 08       	add	r8,r9
800196da:	2f f8       	sub	r8,-1
800196dc:	a5 68       	lsl	r8,0x4
800196de:	f4 08 00 08 	add	r8,r10,r8
800196e2:	30 09       	mov	r9,0
800196e4:	91 09       	st.w	r8[0x0],r9
		ts->tasks[i].tasks=ts;
800196e6:	ee f9 ff fc 	ld.w	r9,r7[-4]
800196ea:	ee fa ff f8 	ld.w	r10,r7[-8]
800196ee:	ee fb ff f8 	ld.w	r11,r7[-8]
800196f2:	12 98       	mov	r8,r9
800196f4:	a1 78       	lsl	r8,0x1
800196f6:	12 08       	add	r8,r9
800196f8:	a5 68       	lsl	r8,0x4
800196fa:	f6 08 00 08 	add	r8,r11,r8
800196fe:	2f 48       	sub	r8,-12
80019700:	91 0a       	st.w	r8[0x0],r10



void init_scheduler(task_set *ts) {
	int i;
	for (i=0; i<ts->number_of_tasks; i++) {
80019702:	ee f8 ff fc 	ld.w	r8,r7[-4]
80019706:	2f f8       	sub	r8,-1
80019708:	ef 48 ff fc 	st.w	r7[-4],r8
8001970c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80019710:	11 88       	ld.ub	r8,r8[0x0]
80019712:	10 99       	mov	r9,r8
80019714:	ee f8 ff fc 	ld.w	r8,r7[-4]
80019718:	10 39       	cp.w	r9,r8
8001971a:	fe 99 ff d9 	brgt	800196cc <init_scheduler+0x14>
		ts->tasks[i].call_function=NULL;
		ts->tasks[i].tasks=ts;
		//ts->tasks[i].run_mode=UNINITIALISED;
	}
	ts->running_task=-1;
8001971e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80019722:	3f f9       	mov	r9,-1
80019724:	91 19       	st.w	r8[0x4],r9
	ts->current_schedule_slot=0;
80019726:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001972a:	30 09       	mov	r9,0
8001972c:	91 29       	st.w	r8[0x8],r9
}
8001972e:	2f ed       	sub	sp,-8
80019730:	e3 cd 80 80 	ldm	sp++,r7,pc

80019734 <register_task>:

task_handle_t register_task(task_set *ts, int task_slot, unsigned long repeat_period, task_run_mode_t run_mode, function_pointer *call_function) {
80019734:	eb cd 40 e0 	pushm	r5-r7,lr
80019738:	1a 97       	mov	r7,sp
8001973a:	20 5d       	sub	sp,20
8001973c:	4d f6       	lddpc	r6,800198b8 <register_task+0x184>
8001973e:	1e 26       	rsub	r6,pc
80019740:	ef 4c ff fc 	st.w	r7[-4],r12
80019744:	ef 4b ff f8 	st.w	r7[-8],r11
80019748:	ef 4a ff f4 	st.w	r7[-12],r10
8001974c:	ef 49 ff f0 	st.w	r7[-16],r9
80019750:	ef 48 ff ec 	st.w	r7[-20],r8
	if ((task_slot<0) || (task_slot>=ts->number_of_tasks)) {
80019754:	ee f8 ff f8 	ld.w	r8,r7[-8]
80019758:	58 08       	cp.w	r8,0
8001975a:	c0 a5       	brlt	8001976e <register_task+0x3a>
8001975c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80019760:	11 88       	ld.ub	r8,r8[0x0]
80019762:	10 99       	mov	r9,r8
80019764:	ee f8 ff f8 	ld.w	r8,r7[-8]
80019768:	10 39       	cp.w	r9,r8
8001976a:	e0 89 00 05 	brgt	80019774 <register_task+0x40>
		return -1;
8001976e:	e0 68 00 ff 	mov	r8,255
80019772:	c9 f8       	rjmp	800198b0 <register_task+0x17c>
	}
	ts->tasks[task_slot].task_id=task_slot;
80019774:	ee f9 ff f8 	ld.w	r9,r7[-8]
80019778:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001977c:	f5 d8 b0 10 	bfexts	r10,r8,0x0,0x10
80019780:	ee fb ff fc 	ld.w	r11,r7[-4]
80019784:	12 98       	mov	r8,r9
80019786:	a1 78       	lsl	r8,0x1
80019788:	12 08       	add	r8,r9
8001978a:	a1 78       	lsl	r8,0x1
8001978c:	2f f8       	sub	r8,-1
8001978e:	a3 78       	lsl	r8,0x3
80019790:	f6 08 00 08 	add	r8,r11,r8
80019794:	14 99       	mov	r9,r10
80019796:	b0 69       	st.h	r8[0xc],r9
	ts->tasks[task_slot].call_function=call_function;
80019798:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001979c:	ee fa ff ec 	ld.w	r10,r7[-20]
800197a0:	ee fb ff fc 	ld.w	r11,r7[-4]
800197a4:	12 98       	mov	r8,r9
800197a6:	a1 78       	lsl	r8,0x1
800197a8:	12 08       	add	r8,r9
800197aa:	2f f8       	sub	r8,-1
800197ac:	a5 68       	lsl	r8,0x4
800197ae:	f6 08 00 08 	add	r8,r11,r8
800197b2:	91 0a       	st.w	r8[0x0],r10
	ts->tasks[task_slot].run_mode=run_mode;
800197b4:	ee f9 ff f8 	ld.w	r9,r7[-8]
800197b8:	ee fa ff fc 	ld.w	r10,r7[-4]
800197bc:	12 98       	mov	r8,r9
800197be:	a1 78       	lsl	r8,0x1
800197c0:	12 08       	add	r8,r9
800197c2:	a5 68       	lsl	r8,0x4
800197c4:	f4 08 00 08 	add	r8,r10,r8
800197c8:	2e 88       	sub	r8,-24
800197ca:	ee f9 ff f0 	ld.w	r9,r7[-16]
800197ce:	91 09       	st.w	r8[0x0],r9
	ts->tasks[task_slot].repeat_period=repeat_period;
800197d0:	ee f9 ff f8 	ld.w	r9,r7[-8]
800197d4:	ee fa ff fc 	ld.w	r10,r7[-4]
800197d8:	12 98       	mov	r8,r9
800197da:	a1 78       	lsl	r8,0x1
800197dc:	12 08       	add	r8,r9
800197de:	a5 68       	lsl	r8,0x4
800197e0:	f4 08 00 08 	add	r8,r10,r8
800197e4:	2e 08       	sub	r8,-32
800197e6:	ee f9 ff f4 	ld.w	r9,r7[-12]
800197ea:	91 09       	st.w	r8[0x0],r9
	ts->tasks[task_slot].next_run=GET_TIME;
800197ec:	ee f5 ff f8 	ld.w	r5,r7[-8]
800197f0:	f0 16 00 27 	mcall	r6[156]
800197f4:	18 99       	mov	r9,r12
800197f6:	ee fa ff fc 	ld.w	r10,r7[-4]
800197fa:	0a 98       	mov	r8,r5
800197fc:	a1 78       	lsl	r8,0x1
800197fe:	0a 08       	add	r8,r5
80019800:	a5 68       	lsl	r8,0x4
80019802:	f4 08 00 08 	add	r8,r10,r8
80019806:	2d c8       	sub	r8,-36
80019808:	91 09       	st.w	r8[0x0],r9
	ts->tasks[task_slot].execution_time=0;
8001980a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001980e:	ee fa ff fc 	ld.w	r10,r7[-4]
80019812:	12 98       	mov	r8,r9
80019814:	a1 78       	lsl	r8,0x1
80019816:	12 08       	add	r8,r9
80019818:	a5 68       	lsl	r8,0x4
8001981a:	f4 08 00 08 	add	r8,r10,r8
8001981e:	2d 88       	sub	r8,-40
80019820:	30 09       	mov	r9,0
80019822:	91 09       	st.w	r8[0x0],r9
	ts->tasks[task_slot].timing_mode=PERIODIC_ABSOLUTE;
80019824:	ee f9 ff f8 	ld.w	r9,r7[-8]
80019828:	ee fa ff fc 	ld.w	r10,r7[-4]
8001982c:	12 98       	mov	r8,r9
8001982e:	a1 78       	lsl	r8,0x1
80019830:	12 08       	add	r8,r9
80019832:	2f f8       	sub	r8,-1
80019834:	a5 68       	lsl	r8,0x4
80019836:	f4 08 00 08 	add	r8,r10,r8
8001983a:	2f 48       	sub	r8,-12
8001983c:	30 09       	mov	r9,0
8001983e:	91 09       	st.w	r8[0x0],r9
#ifdef SCHEDULER_PROFILING	
	ts->tasks[task_slot].delay_max=0;
80019840:	ee f9 ff f8 	ld.w	r9,r7[-8]
80019844:	ee fa ff fc 	ld.w	r10,r7[-4]
80019848:	12 98       	mov	r8,r9
8001984a:	a1 78       	lsl	r8,0x1
8001984c:	12 08       	add	r8,r9
8001984e:	a5 68       	lsl	r8,0x4
80019850:	f4 08 00 08 	add	r8,r10,r8
80019854:	2d 48       	sub	r8,-44
80019856:	30 09       	mov	r9,0
80019858:	91 09       	st.w	r8[0x0],r9
	ts->tasks[task_slot].delay_avg=0;
8001985a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001985e:	ee fa ff fc 	ld.w	r10,r7[-4]
80019862:	f0 c9 ff ff 	sub	r9,r8,-1
80019866:	12 98       	mov	r8,r9
80019868:	a1 78       	lsl	r8,0x1
8001986a:	12 08       	add	r8,r9
8001986c:	a5 68       	lsl	r8,0x4
8001986e:	f4 08 00 08 	add	r8,r10,r8
80019872:	30 09       	mov	r9,0
80019874:	91 09       	st.w	r8[0x0],r9
	ts->tasks[task_slot].delay_var_squared=0;
80019876:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001987a:	ee fa ff fc 	ld.w	r10,r7[-4]
8001987e:	12 98       	mov	r8,r9
80019880:	a1 78       	lsl	r8,0x1
80019882:	12 08       	add	r8,r9
80019884:	a5 68       	lsl	r8,0x4
80019886:	f4 08 00 08 	add	r8,r10,r8
8001988a:	2c c8       	sub	r8,-52
8001988c:	30 09       	mov	r9,0
8001988e:	91 09       	st.w	r8[0x0],r9
	ts->tasks[task_slot].rt_violations=0;
80019890:	ee f9 ff f8 	ld.w	r9,r7[-8]
80019894:	ee fa ff fc 	ld.w	r10,r7[-4]
80019898:	12 98       	mov	r8,r9
8001989a:	a1 78       	lsl	r8,0x1
8001989c:	12 08       	add	r8,r9
8001989e:	a5 68       	lsl	r8,0x4
800198a0:	f4 08 00 08 	add	r8,r10,r8
800198a4:	2c 88       	sub	r8,-56
800198a6:	30 09       	mov	r9,0
800198a8:	91 09       	st.w	r8[0x0],r9
#endif
	return task_slot;
800198aa:	ee f8 ff f8 	ld.w	r8,r7[-8]
800198ae:	5c 58       	castu.b	r8
}
800198b0:	10 9c       	mov	r12,r8
800198b2:	2f bd       	sub	sp,-20
800198b4:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800198b8:	80 01       	ld.sh	r1,r0[0x0]
800198ba:	95 c2       	st.w	r10[0x30],r2

800198bc <add_task>:

bool add_task(task_set *ts, unsigned long repeat_period, task_run_mode_t run_mode, function_pointer *call_function, uint32_t task_id) {
800198bc:	eb cd 40 c0 	pushm	r6-r7,lr
800198c0:	1a 97       	mov	r7,sp
800198c2:	20 6d       	sub	sp,24
800198c4:	4a d6       	lddpc	r6,80019978 <add_task+0xbc>
800198c6:	1e 26       	rsub	r6,pc
800198c8:	ef 4c ff f8 	st.w	r7[-8],r12
800198cc:	ef 4b ff f4 	st.w	r7[-12],r11
800198d0:	ef 4a ff f0 	st.w	r7[-16],r10
800198d4:	ef 49 ff ec 	st.w	r7[-20],r9
800198d8:	ef 48 ff e8 	st.w	r7[-24],r8
	int task_slot=0;
800198dc:	30 08       	mov	r8,0
800198de:	ef 48 ff fc 	st.w	r7[-4],r8
	while ((task_slot < ts->number_of_tasks) && (ts->tasks[task_slot].call_function!=NULL)) task_slot++;
800198e2:	c0 68       	rjmp	800198ee <add_task+0x32>
800198e4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800198e8:	2f f8       	sub	r8,-1
800198ea:	ef 48 ff fc 	st.w	r7[-4],r8
800198ee:	ee f8 ff f8 	ld.w	r8,r7[-8]
800198f2:	11 88       	ld.ub	r8,r8[0x0]
800198f4:	10 99       	mov	r9,r8
800198f6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800198fa:	10 39       	cp.w	r9,r8
800198fc:	e0 8a 00 10 	brle	8001991c <add_task+0x60>
80019900:	ee f9 ff fc 	ld.w	r9,r7[-4]
80019904:	ee fa ff f8 	ld.w	r10,r7[-8]
80019908:	12 98       	mov	r8,r9
8001990a:	a1 78       	lsl	r8,0x1
8001990c:	12 08       	add	r8,r9
8001990e:	2f f8       	sub	r8,-1
80019910:	a5 68       	lsl	r8,0x4
80019912:	f4 08 00 08 	add	r8,r10,r8
80019916:	70 08       	ld.w	r8,r8[0x0]
80019918:	58 08       	cp.w	r8,0
8001991a:	ce 51       	brne	800198e4 <add_task+0x28>
	if (task_slot >= ts->number_of_tasks) return false;
8001991c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80019920:	11 88       	ld.ub	r8,r8[0x0]
80019922:	10 99       	mov	r9,r8
80019924:	ee f8 ff fc 	ld.w	r8,r7[-4]
80019928:	10 39       	cp.w	r9,r8
8001992a:	e0 89 00 04 	brgt	80019932 <add_task+0x76>
8001992e:	30 08       	mov	r8,0
80019930:	c2 08       	rjmp	80019970 <add_task+0xb4>
	register_task(ts,  task_slot,   repeat_period, run_mode,  call_function);
80019932:	ee f8 ff ec 	ld.w	r8,r7[-20]
80019936:	ee f9 ff f0 	ld.w	r9,r7[-16]
8001993a:	ee fa ff f4 	ld.w	r10,r7[-12]
8001993e:	ee fb ff fc 	ld.w	r11,r7[-4]
80019942:	ee fc ff f8 	ld.w	r12,r7[-8]
80019946:	f0 16 00 5a 	mcall	r6[360]
	ts->tasks[task_slot].task_id=task_id;
8001994a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001994e:	ee f8 ff e8 	ld.w	r8,r7[-24]
80019952:	f5 d8 b0 10 	bfexts	r10,r8,0x0,0x10
80019956:	ee fb ff f8 	ld.w	r11,r7[-8]
8001995a:	12 98       	mov	r8,r9
8001995c:	a1 78       	lsl	r8,0x1
8001995e:	12 08       	add	r8,r9
80019960:	a1 78       	lsl	r8,0x1
80019962:	2f f8       	sub	r8,-1
80019964:	a3 78       	lsl	r8,0x3
80019966:	f6 08 00 08 	add	r8,r11,r8
8001996a:	14 99       	mov	r9,r10
8001996c:	b0 69       	st.h	r8[0xc],r9
	return true;
8001996e:	30 18       	mov	r8,1
}
80019970:	10 9c       	mov	r12,r8
80019972:	2f ad       	sub	sp,-24
80019974:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80019978:	80 01       	ld.sh	r1,r0[0x0]
8001997a:	97 4a       	st.w	r11[0x10],r10

8001997c <sort_taskset_by_period>:


void sort_taskset_by_period(task_set *ts){
8001997c:	eb cd 40 80 	pushm	r7,lr
80019980:	1a 97       	mov	r7,sp
80019982:	20 fd       	sub	sp,60
80019984:	ef 4c ff c4 	st.w	r7[-60],r12
	int i;
	bool sorted=false;
80019988:	30 08       	mov	r8,0
8001998a:	ef 68 ff ff 	st.b	r7[-1],r8
	task_entry tmp;
	if (ts->number_of_tasks<2) return;
8001998e:	ee f8 ff c4 	ld.w	r8,r7[-60]
80019992:	11 89       	ld.ub	r9,r8[0x0]
80019994:	30 18       	mov	r8,1
80019996:	f0 09 18 00 	cp.b	r9,r8
8001999a:	e0 8b 01 1d 	brhi	80019bd4 <sort_taskset_by_period+0x258>
8001999e:	c2 39       	rjmp	80019be4 <sort_taskset_by_period+0x268>

	while (!sorted) {
		sorted=true;
800199a0:	30 18       	mov	r8,1
800199a2:	ef 68 ff ff 	st.b	r7[-1],r8
		for (i=0; i<ts->number_of_tasks-1; i++) {
800199a6:	30 08       	mov	r8,0
800199a8:	ef 48 ff f8 	st.w	r7[-8],r8
800199ac:	c0 99       	rjmp	80019bbe <sort_taskset_by_period+0x242>
			if ( ((ts->tasks[i].call_function==NULL)&&(ts->tasks[i+1].call_function!=NULL)) ||
800199ae:	ee f9 ff f8 	ld.w	r9,r7[-8]
800199b2:	ee fa ff c4 	ld.w	r10,r7[-60]
800199b6:	12 98       	mov	r8,r9
800199b8:	a1 78       	lsl	r8,0x1
800199ba:	12 08       	add	r8,r9
800199bc:	2f f8       	sub	r8,-1
800199be:	a5 68       	lsl	r8,0x4
800199c0:	f4 08 00 08 	add	r8,r10,r8
800199c4:	70 08       	ld.w	r8,r8[0x0]
800199c6:	58 08       	cp.w	r8,0
800199c8:	c1 11       	brne	800199ea <sort_taskset_by_period+0x6e>
800199ca:	ee f8 ff f8 	ld.w	r8,r7[-8]
800199ce:	f0 c9 ff ff 	sub	r9,r8,-1
800199d2:	ee fa ff c4 	ld.w	r10,r7[-60]
800199d6:	12 98       	mov	r8,r9
800199d8:	a1 78       	lsl	r8,0x1
800199da:	12 08       	add	r8,r9
800199dc:	2f f8       	sub	r8,-1
800199de:	a5 68       	lsl	r8,0x4
800199e0:	f4 08 00 08 	add	r8,r10,r8
800199e4:	70 08       	ld.w	r8,r8[0x0]
800199e6:	58 08       	cp.w	r8,0
800199e8:	c3 e1       	brne	80019a64 <sort_taskset_by_period+0xe8>
				((ts->tasks[i].call_function!=NULL)&&(ts->tasks[i+1].call_function!=NULL) &&
800199ea:	ee f9 ff f8 	ld.w	r9,r7[-8]
800199ee:	ee fa ff c4 	ld.w	r10,r7[-60]
800199f2:	12 98       	mov	r8,r9
800199f4:	a1 78       	lsl	r8,0x1
800199f6:	12 08       	add	r8,r9
800199f8:	2f f8       	sub	r8,-1
800199fa:	a5 68       	lsl	r8,0x4
800199fc:	f4 08 00 08 	add	r8,r10,r8
80019a00:	70 08       	ld.w	r8,r8[0x0]
	if (ts->number_of_tasks<2) return;

	while (!sorted) {
		sorted=true;
		for (i=0; i<ts->number_of_tasks-1; i++) {
			if ( ((ts->tasks[i].call_function==NULL)&&(ts->tasks[i+1].call_function!=NULL)) ||
80019a02:	58 08       	cp.w	r8,0
80019a04:	e0 80 00 d8 	breq	80019bb4 <sort_taskset_by_period+0x238>
				((ts->tasks[i].call_function!=NULL)&&(ts->tasks[i+1].call_function!=NULL) &&
80019a08:	ee f8 ff f8 	ld.w	r8,r7[-8]
80019a0c:	f0 c9 ff ff 	sub	r9,r8,-1
80019a10:	ee fa ff c4 	ld.w	r10,r7[-60]
80019a14:	12 98       	mov	r8,r9
80019a16:	a1 78       	lsl	r8,0x1
80019a18:	12 08       	add	r8,r9
80019a1a:	2f f8       	sub	r8,-1
80019a1c:	a5 68       	lsl	r8,0x4
80019a1e:	f4 08 00 08 	add	r8,r10,r8
80019a22:	70 08       	ld.w	r8,r8[0x0]
	if (ts->number_of_tasks<2) return;

	while (!sorted) {
		sorted=true;
		for (i=0; i<ts->number_of_tasks-1; i++) {
			if ( ((ts->tasks[i].call_function==NULL)&&(ts->tasks[i+1].call_function!=NULL)) ||
80019a24:	58 08       	cp.w	r8,0
80019a26:	e0 80 00 c7 	breq	80019bb4 <sort_taskset_by_period+0x238>
				((ts->tasks[i].call_function!=NULL)&&(ts->tasks[i+1].call_function!=NULL) &&
				(ts->tasks[i].repeat_period > ts->tasks[i+1].repeat_period))) {
80019a2a:	ee f9 ff f8 	ld.w	r9,r7[-8]
80019a2e:	ee fa ff c4 	ld.w	r10,r7[-60]
80019a32:	12 98       	mov	r8,r9
80019a34:	a1 78       	lsl	r8,0x1
80019a36:	12 08       	add	r8,r9
80019a38:	a5 68       	lsl	r8,0x4
80019a3a:	f4 08 00 08 	add	r8,r10,r8
80019a3e:	2e 08       	sub	r8,-32
80019a40:	70 0a       	ld.w	r10,r8[0x0]
80019a42:	ee f8 ff f8 	ld.w	r8,r7[-8]
80019a46:	f0 c9 ff ff 	sub	r9,r8,-1
80019a4a:	ee fb ff c4 	ld.w	r11,r7[-60]
80019a4e:	12 98       	mov	r8,r9
80019a50:	a1 78       	lsl	r8,0x1
80019a52:	12 08       	add	r8,r9
80019a54:	a5 68       	lsl	r8,0x4
80019a56:	f6 08 00 08 	add	r8,r11,r8
80019a5a:	2e 08       	sub	r8,-32
80019a5c:	70 08       	ld.w	r8,r8[0x0]
	if (ts->number_of_tasks<2) return;

	while (!sorted) {
		sorted=true;
		for (i=0; i<ts->number_of_tasks-1; i++) {
			if ( ((ts->tasks[i].call_function==NULL)&&(ts->tasks[i+1].call_function!=NULL)) ||
80019a5e:	10 3a       	cp.w	r10,r8
80019a60:	e0 88 00 aa 	brls	80019bb4 <sort_taskset_by_period+0x238>
				((ts->tasks[i].call_function!=NULL)&&(ts->tasks[i+1].call_function!=NULL) &&
				(ts->tasks[i].repeat_period > ts->tasks[i+1].repeat_period))) {
				tmp=ts->tasks[i];
80019a64:	ee f9 ff f8 	ld.w	r9,r7[-8]
80019a68:	ee fa ff c4 	ld.w	r10,r7[-60]
80019a6c:	12 98       	mov	r8,r9
80019a6e:	a1 78       	lsl	r8,0x1
80019a70:	12 08       	add	r8,r9
80019a72:	a5 68       	lsl	r8,0x4
80019a74:	f4 08 00 08 	add	r8,r10,r8
80019a78:	2f 48       	sub	r8,-12
80019a7a:	ee cb 00 38 	sub	r11,r7,56
80019a7e:	10 9a       	mov	r10,r8
80019a80:	f6 c8 00 00 	sub	r8,r11,0
80019a84:	f4 c9 00 00 	sub	r9,r10,0
80019a88:	72 0c       	ld.w	r12,r9[0x0]
80019a8a:	91 0c       	st.w	r8[0x0],r12
80019a8c:	72 1c       	ld.w	r12,r9[0x4]
80019a8e:	91 1c       	st.w	r8[0x4],r12
80019a90:	72 2c       	ld.w	r12,r9[0x8]
80019a92:	91 2c       	st.w	r8[0x8],r12
80019a94:	72 39       	ld.w	r9,r9[0xc]
80019a96:	91 39       	st.w	r8[0xc],r9
80019a98:	f6 c8 ff f0 	sub	r8,r11,-16
80019a9c:	f4 c9 ff f0 	sub	r9,r10,-16
80019aa0:	72 0c       	ld.w	r12,r9[0x0]
80019aa2:	91 0c       	st.w	r8[0x0],r12
80019aa4:	72 1c       	ld.w	r12,r9[0x4]
80019aa6:	91 1c       	st.w	r8[0x4],r12
80019aa8:	72 2c       	ld.w	r12,r9[0x8]
80019aaa:	91 2c       	st.w	r8[0x8],r12
80019aac:	72 39       	ld.w	r9,r9[0xc]
80019aae:	91 39       	st.w	r8[0xc],r9
80019ab0:	f6 c8 ff e0 	sub	r8,r11,-32
80019ab4:	f4 c9 ff e0 	sub	r9,r10,-32
80019ab8:	72 0a       	ld.w	r10,r9[0x0]
80019aba:	91 0a       	st.w	r8[0x0],r10
80019abc:	72 1a       	ld.w	r10,r9[0x4]
80019abe:	91 1a       	st.w	r8[0x4],r10
80019ac0:	72 2a       	ld.w	r10,r9[0x8]
80019ac2:	91 2a       	st.w	r8[0x8],r10
80019ac4:	72 39       	ld.w	r9,r9[0xc]
80019ac6:	91 39       	st.w	r8[0xc],r9
				ts->tasks[i]=ts->tasks[i+1];
80019ac8:	ee fa ff f8 	ld.w	r10,r7[-8]
80019acc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80019ad0:	f0 c9 ff ff 	sub	r9,r8,-1
80019ad4:	ee fb ff c4 	ld.w	r11,r7[-60]
80019ad8:	14 98       	mov	r8,r10
80019ada:	a1 78       	lsl	r8,0x1
80019adc:	14 08       	add	r8,r10
80019ade:	a5 68       	lsl	r8,0x4
80019ae0:	f6 08 00 08 	add	r8,r11,r8
80019ae4:	f0 ca ff f4 	sub	r10,r8,-12
80019ae8:	ee fb ff c4 	ld.w	r11,r7[-60]
80019aec:	12 98       	mov	r8,r9
80019aee:	a1 78       	lsl	r8,0x1
80019af0:	12 08       	add	r8,r9
80019af2:	a5 68       	lsl	r8,0x4
80019af4:	f6 08 00 08 	add	r8,r11,r8
80019af8:	2f 48       	sub	r8,-12
80019afa:	14 9b       	mov	r11,r10
80019afc:	10 9a       	mov	r10,r8
80019afe:	f6 c8 00 00 	sub	r8,r11,0
80019b02:	f4 c9 00 00 	sub	r9,r10,0
80019b06:	72 0c       	ld.w	r12,r9[0x0]
80019b08:	91 0c       	st.w	r8[0x0],r12
80019b0a:	72 1c       	ld.w	r12,r9[0x4]
80019b0c:	91 1c       	st.w	r8[0x4],r12
80019b0e:	72 2c       	ld.w	r12,r9[0x8]
80019b10:	91 2c       	st.w	r8[0x8],r12
80019b12:	72 39       	ld.w	r9,r9[0xc]
80019b14:	91 39       	st.w	r8[0xc],r9
80019b16:	f6 c8 ff f0 	sub	r8,r11,-16
80019b1a:	f4 c9 ff f0 	sub	r9,r10,-16
80019b1e:	72 0c       	ld.w	r12,r9[0x0]
80019b20:	91 0c       	st.w	r8[0x0],r12
80019b22:	72 1c       	ld.w	r12,r9[0x4]
80019b24:	91 1c       	st.w	r8[0x4],r12
80019b26:	72 2c       	ld.w	r12,r9[0x8]
80019b28:	91 2c       	st.w	r8[0x8],r12
80019b2a:	72 39       	ld.w	r9,r9[0xc]
80019b2c:	91 39       	st.w	r8[0xc],r9
80019b2e:	f6 c8 ff e0 	sub	r8,r11,-32
80019b32:	f4 c9 ff e0 	sub	r9,r10,-32
80019b36:	72 0a       	ld.w	r10,r9[0x0]
80019b38:	91 0a       	st.w	r8[0x0],r10
80019b3a:	72 1a       	ld.w	r10,r9[0x4]
80019b3c:	91 1a       	st.w	r8[0x4],r10
80019b3e:	72 2a       	ld.w	r10,r9[0x8]
80019b40:	91 2a       	st.w	r8[0x8],r10
80019b42:	72 39       	ld.w	r9,r9[0xc]
80019b44:	91 39       	st.w	r8[0xc],r9
				ts->tasks[i+1]=tmp;		
80019b46:	ee f8 ff f8 	ld.w	r8,r7[-8]
80019b4a:	f0 c9 ff ff 	sub	r9,r8,-1
80019b4e:	ee fa ff c4 	ld.w	r10,r7[-60]
80019b52:	12 98       	mov	r8,r9
80019b54:	a1 78       	lsl	r8,0x1
80019b56:	12 08       	add	r8,r9
80019b58:	a5 68       	lsl	r8,0x4
80019b5a:	f4 08 00 08 	add	r8,r10,r8
80019b5e:	2f 48       	sub	r8,-12
80019b60:	10 9b       	mov	r11,r8
80019b62:	ee ca 00 38 	sub	r10,r7,56
80019b66:	f6 c8 00 00 	sub	r8,r11,0
80019b6a:	f4 c9 00 00 	sub	r9,r10,0
80019b6e:	72 0c       	ld.w	r12,r9[0x0]
80019b70:	91 0c       	st.w	r8[0x0],r12
80019b72:	72 1c       	ld.w	r12,r9[0x4]
80019b74:	91 1c       	st.w	r8[0x4],r12
80019b76:	72 2c       	ld.w	r12,r9[0x8]
80019b78:	91 2c       	st.w	r8[0x8],r12
80019b7a:	72 39       	ld.w	r9,r9[0xc]
80019b7c:	91 39       	st.w	r8[0xc],r9
80019b7e:	f6 c8 ff f0 	sub	r8,r11,-16
80019b82:	f4 c9 ff f0 	sub	r9,r10,-16
80019b86:	72 0c       	ld.w	r12,r9[0x0]
80019b88:	91 0c       	st.w	r8[0x0],r12
80019b8a:	72 1c       	ld.w	r12,r9[0x4]
80019b8c:	91 1c       	st.w	r8[0x4],r12
80019b8e:	72 2c       	ld.w	r12,r9[0x8]
80019b90:	91 2c       	st.w	r8[0x8],r12
80019b92:	72 39       	ld.w	r9,r9[0xc]
80019b94:	91 39       	st.w	r8[0xc],r9
80019b96:	f6 c8 ff e0 	sub	r8,r11,-32
80019b9a:	f4 c9 ff e0 	sub	r9,r10,-32
80019b9e:	72 0a       	ld.w	r10,r9[0x0]
80019ba0:	91 0a       	st.w	r8[0x0],r10
80019ba2:	72 1a       	ld.w	r10,r9[0x4]
80019ba4:	91 1a       	st.w	r8[0x4],r10
80019ba6:	72 2a       	ld.w	r10,r9[0x8]
80019ba8:	91 2a       	st.w	r8[0x8],r10
80019baa:	72 39       	ld.w	r9,r9[0xc]
80019bac:	91 39       	st.w	r8[0xc],r9
				sorted=false;
80019bae:	30 08       	mov	r8,0
80019bb0:	ef 68 ff ff 	st.b	r7[-1],r8
	task_entry tmp;
	if (ts->number_of_tasks<2) return;

	while (!sorted) {
		sorted=true;
		for (i=0; i<ts->number_of_tasks-1; i++) {
80019bb4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80019bb8:	2f f8       	sub	r8,-1
80019bba:	ef 48 ff f8 	st.w	r7[-8],r8
80019bbe:	ee f8 ff c4 	ld.w	r8,r7[-60]
80019bc2:	11 88       	ld.ub	r8,r8[0x0]
80019bc4:	f0 c9 00 01 	sub	r9,r8,1
80019bc8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80019bcc:	10 39       	cp.w	r9,r8
80019bce:	fe 99 fe f0 	brgt	800199ae <sort_taskset_by_period+0x32>
80019bd2:	c0 28       	rjmp	80019bd6 <sort_taskset_by_period+0x25a>
	int i;
	bool sorted=false;
	task_entry tmp;
	if (ts->number_of_tasks<2) return;

	while (!sorted) {
80019bd4:	d7 03       	nop
80019bd6:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80019bda:	ec 18 00 01 	eorl	r8,0x1
80019bde:	5c 58       	castu.b	r8
80019be0:	fe 91 fe e0 	brne	800199a0 <sort_taskset_by_period+0x24>
				ts->tasks[i+1]=tmp;		
				sorted=false;
			}
		}
	}		
}
80019be4:	2f 1d       	sub	sp,-60
80019be6:	e3 cd 80 80 	ldm	sp++,r7,pc

80019bea <run_scheduler_update>:

int run_scheduler_update(task_set *ts, uint8_t schedule_strategy) {
80019bea:	eb cd 40 e8 	pushm	r3,r5-r7,lr
80019bee:	1a 97       	mov	r7,sp
80019bf0:	20 9d       	sub	sp,36
80019bf2:	fe f6 04 0a 	ld.w	r6,pc[1034]
80019bf6:	1e 26       	rsub	r6,pc
80019bf8:	ef 4c ff e0 	st.w	r7[-32],r12
80019bfc:	16 98       	mov	r8,r11
80019bfe:	ef 68 ff dc 	st.b	r7[-36],r8
	int i;
	int realtime_violation=0;
80019c02:	30 08       	mov	r8,0
80019c04:	ef 48 ff e8 	st.w	r7[-24],r8
	function_pointer call_task;
	task_return_t treturn;
	for (i=ts->current_schedule_slot; i<ts->number_of_tasks; i++) {
80019c08:	ee f8 ff e0 	ld.w	r8,r7[-32]
80019c0c:	70 28       	ld.w	r8,r8[0x8]
80019c0e:	ef 48 ff e4 	st.w	r7[-28],r8
80019c12:	e0 8f 01 e5 	bral	80019fdc <run_scheduler_update+0x3f2>
		uint32_t current_time=GET_TIME;
80019c16:	f0 16 00 27 	mcall	r6[156]
80019c1a:	18 98       	mov	r8,r12
80019c1c:	ef 48 ff f4 	st.w	r7[-12],r8
		if ((ts->tasks[i].call_function!=NULL)  && (ts->tasks[i].run_mode!=RUN_NEVER) &&(current_time >= ts->tasks[i].next_run)) {
80019c20:	ee f9 ff e4 	ld.w	r9,r7[-28]
80019c24:	ee fa ff e0 	ld.w	r10,r7[-32]
80019c28:	12 98       	mov	r8,r9
80019c2a:	a1 78       	lsl	r8,0x1
80019c2c:	12 08       	add	r8,r9
80019c2e:	2f f8       	sub	r8,-1
80019c30:	a5 68       	lsl	r8,0x4
80019c32:	f4 08 00 08 	add	r8,r10,r8
80019c36:	70 08       	ld.w	r8,r8[0x0]
80019c38:	58 08       	cp.w	r8,0
80019c3a:	e0 80 01 cc 	breq	80019fd2 <run_scheduler_update+0x3e8>
80019c3e:	ee f9 ff e4 	ld.w	r9,r7[-28]
80019c42:	ee fa ff e0 	ld.w	r10,r7[-32]
80019c46:	12 98       	mov	r8,r9
80019c48:	a1 78       	lsl	r8,0x1
80019c4a:	12 08       	add	r8,r9
80019c4c:	a5 68       	lsl	r8,0x4
80019c4e:	f4 08 00 08 	add	r8,r10,r8
80019c52:	2e 88       	sub	r8,-24
80019c54:	70 08       	ld.w	r8,r8[0x0]
80019c56:	58 08       	cp.w	r8,0
80019c58:	e0 80 01 bd 	breq	80019fd2 <run_scheduler_update+0x3e8>
80019c5c:	ee f9 ff e4 	ld.w	r9,r7[-28]
80019c60:	ee fa ff e0 	ld.w	r10,r7[-32]
80019c64:	12 98       	mov	r8,r9
80019c66:	a1 78       	lsl	r8,0x1
80019c68:	12 08       	add	r8,r9
80019c6a:	a5 68       	lsl	r8,0x4
80019c6c:	f4 08 00 08 	add	r8,r10,r8
80019c70:	2d c8       	sub	r8,-36
80019c72:	70 09       	ld.w	r9,r8[0x0]
80019c74:	ee f8 ff f4 	ld.w	r8,r7[-12]
80019c78:	10 39       	cp.w	r9,r8
80019c7a:	e0 8b 01 ac 	brhi	80019fd2 <run_scheduler_update+0x3e8>
			uint32_t delay=current_time - (ts->tasks[i].next_run);
80019c7e:	ee f9 ff e4 	ld.w	r9,r7[-28]
80019c82:	ee fa ff e0 	ld.w	r10,r7[-32]
80019c86:	12 98       	mov	r8,r9
80019c88:	a1 78       	lsl	r8,0x1
80019c8a:	12 08       	add	r8,r9
80019c8c:	a5 68       	lsl	r8,0x4
80019c8e:	f4 08 00 08 	add	r8,r10,r8
80019c92:	2d c8       	sub	r8,-36
80019c94:	70 08       	ld.w	r8,r8[0x0]
80019c96:	ee f9 ff f4 	ld.w	r9,r7[-12]
80019c9a:	10 19       	sub	r9,r8
80019c9c:	ef 49 ff f8 	st.w	r7[-8],r9
			uint32_t task_start_time;

		    task_start_time=GET_TIME;
80019ca0:	f0 16 00 27 	mcall	r6[156]
80019ca4:	18 98       	mov	r8,r12
80019ca6:	ef 48 ff fc 	st.w	r7[-4],r8
		    call_task=ts->tasks[i].call_function;
80019caa:	ee f9 ff e4 	ld.w	r9,r7[-28]
80019cae:	ee fa ff e0 	ld.w	r10,r7[-32]
80019cb2:	12 98       	mov	r8,r9
80019cb4:	a1 78       	lsl	r8,0x1
80019cb6:	12 08       	add	r8,r9
80019cb8:	2f f8       	sub	r8,-1
80019cba:	a5 68       	lsl	r8,0x4
80019cbc:	f4 08 00 08 	add	r8,r10,r8
80019cc0:	70 08       	ld.w	r8,r8[0x0]
80019cc2:	ef 48 ff ec 	st.w	r7[-20],r8
		    //dbg_print_num(i, 16); dbg_print(" ");dbg_print_num(call_task, 16); dbg_print("\n");
		    treturn = call_task();
80019cc6:	ee f8 ff ec 	ld.w	r8,r7[-20]
80019cca:	5d 18       	icall	r8
80019ccc:	18 98       	mov	r8,r12
80019cce:	ef 48 ff f0 	st.w	r7[-16],r8


			
			switch (ts->tasks[i].timing_mode) {
80019cd2:	ee f9 ff e4 	ld.w	r9,r7[-28]
80019cd6:	ee fa ff e0 	ld.w	r10,r7[-32]
80019cda:	12 98       	mov	r8,r9
80019cdc:	a1 78       	lsl	r8,0x1
80019cde:	12 08       	add	r8,r9
80019ce0:	2f f8       	sub	r8,-1
80019ce2:	a5 68       	lsl	r8,0x4
80019ce4:	f4 08 00 08 	add	r8,r10,r8
80019ce8:	2f 48       	sub	r8,-12
80019cea:	70 08       	ld.w	r8,r8[0x0]
80019cec:	58 08       	cp.w	r8,0
80019cee:	c0 40       	breq	80019cf6 <run_scheduler_update+0x10c>
80019cf0:	58 18       	cp.w	r8,1
80019cf2:	c2 90       	breq	80019d44 <run_scheduler_update+0x15a>
80019cf4:	c4 58       	rjmp	80019d7e <run_scheduler_update+0x194>
				case PERIODIC_ABSOLUTE:
					ts->tasks[i].next_run += ts->tasks[i].repeat_period;
80019cf6:	ee f9 ff e4 	ld.w	r9,r7[-28]
80019cfa:	ee fa ff e4 	ld.w	r10,r7[-28]
80019cfe:	ee fb ff e0 	ld.w	r11,r7[-32]
80019d02:	14 98       	mov	r8,r10
80019d04:	a1 78       	lsl	r8,0x1
80019d06:	14 08       	add	r8,r10
80019d08:	a5 68       	lsl	r8,0x4
80019d0a:	f6 08 00 08 	add	r8,r11,r8
80019d0e:	2d c8       	sub	r8,-36
80019d10:	70 0b       	ld.w	r11,r8[0x0]
80019d12:	ee fa ff e4 	ld.w	r10,r7[-28]
80019d16:	ee fc ff e0 	ld.w	r12,r7[-32]
80019d1a:	14 98       	mov	r8,r10
80019d1c:	a1 78       	lsl	r8,0x1
80019d1e:	14 08       	add	r8,r10
80019d20:	a5 68       	lsl	r8,0x4
80019d22:	f8 08 00 08 	add	r8,r12,r8
80019d26:	2e 08       	sub	r8,-32
80019d28:	70 08       	ld.w	r8,r8[0x0]
80019d2a:	f6 08 00 0a 	add	r10,r11,r8
80019d2e:	ee fb ff e0 	ld.w	r11,r7[-32]
80019d32:	12 98       	mov	r8,r9
80019d34:	a1 78       	lsl	r8,0x1
80019d36:	12 08       	add	r8,r9
80019d38:	a5 68       	lsl	r8,0x4
80019d3a:	f6 08 00 08 	add	r8,r11,r8
80019d3e:	2d c8       	sub	r8,-36
80019d40:	91 0a       	st.w	r8[0x0],r10
				break;
80019d42:	c1 e8       	rjmp	80019d7e <run_scheduler_update+0x194>
				case PERIODIC_RELATIVE:
					ts->tasks[i].next_run = GET_TIME + ts->tasks[i].repeat_period;
80019d44:	ee f5 ff e4 	ld.w	r5,r7[-28]
80019d48:	f0 16 00 27 	mcall	r6[156]
80019d4c:	18 9a       	mov	r10,r12
80019d4e:	ee f9 ff e4 	ld.w	r9,r7[-28]
80019d52:	ee fb ff e0 	ld.w	r11,r7[-32]
80019d56:	12 98       	mov	r8,r9
80019d58:	a1 78       	lsl	r8,0x1
80019d5a:	12 08       	add	r8,r9
80019d5c:	a5 68       	lsl	r8,0x4
80019d5e:	f6 08 00 08 	add	r8,r11,r8
80019d62:	2e 08       	sub	r8,-32
80019d64:	70 08       	ld.w	r8,r8[0x0]
80019d66:	f4 08 00 09 	add	r9,r10,r8
80019d6a:	ee fa ff e0 	ld.w	r10,r7[-32]
80019d6e:	0a 98       	mov	r8,r5
80019d70:	a1 78       	lsl	r8,0x1
80019d72:	0a 08       	add	r8,r5
80019d74:	a5 68       	lsl	r8,0x4
80019d76:	f4 08 00 08 	add	r8,r10,r8
80019d7a:	2d c8       	sub	r8,-36
80019d7c:	91 09       	st.w	r8[0x0],r9
				break;
			}
			if (ts->tasks[i].run_mode==RUN_ONCE) ts->tasks[i].run_mode=RUN_NEVER;
80019d7e:	ee f9 ff e4 	ld.w	r9,r7[-28]
80019d82:	ee fa ff e0 	ld.w	r10,r7[-32]
80019d86:	12 98       	mov	r8,r9
80019d88:	a1 78       	lsl	r8,0x1
80019d8a:	12 08       	add	r8,r9
80019d8c:	a5 68       	lsl	r8,0x4
80019d8e:	f4 08 00 08 	add	r8,r10,r8
80019d92:	2e 88       	sub	r8,-24
80019d94:	70 08       	ld.w	r8,r8[0x0]
80019d96:	58 18       	cp.w	r8,1
80019d98:	c0 e1       	brne	80019db4 <run_scheduler_update+0x1ca>
80019d9a:	ee f9 ff e4 	ld.w	r9,r7[-28]
80019d9e:	ee fa ff e0 	ld.w	r10,r7[-32]
80019da2:	12 98       	mov	r8,r9
80019da4:	a1 78       	lsl	r8,0x1
80019da6:	12 08       	add	r8,r9
80019da8:	a5 68       	lsl	r8,0x4
80019daa:	f4 08 00 08 	add	r8,r10,r8
80019dae:	2e 88       	sub	r8,-24
80019db0:	30 09       	mov	r9,0
80019db2:	91 09       	st.w	r8[0x0],r9
			if (ts->tasks[i].next_run < current_time) {
80019db4:	ee f9 ff e4 	ld.w	r9,r7[-28]
80019db8:	ee fa ff e0 	ld.w	r10,r7[-32]
80019dbc:	12 98       	mov	r8,r9
80019dbe:	a1 78       	lsl	r8,0x1
80019dc0:	12 08       	add	r8,r9
80019dc2:	a5 68       	lsl	r8,0x4
80019dc4:	f4 08 00 08 	add	r8,r10,r8
80019dc8:	2d c8       	sub	r8,-36
80019dca:	70 09       	ld.w	r9,r8[0x0]
80019dcc:	ee f8 ff f4 	ld.w	r8,r7[-12]
80019dd0:	10 39       	cp.w	r9,r8
80019dd2:	c3 92       	brcc	80019e44 <run_scheduler_update+0x25a>
				realtime_violation=-i; //realtime violation!!
80019dd4:	ee f8 ff e4 	ld.w	r8,r7[-28]
80019dd8:	5c 38       	neg	r8
80019dda:	ef 48 ff e8 	st.w	r7[-24],r8
				ts->tasks[i].rt_violations++;
80019dde:	ee f9 ff e4 	ld.w	r9,r7[-28]
80019de2:	ee fa ff e0 	ld.w	r10,r7[-32]
80019de6:	12 98       	mov	r8,r9
80019de8:	a1 78       	lsl	r8,0x1
80019dea:	12 08       	add	r8,r9
80019dec:	a5 68       	lsl	r8,0x4
80019dee:	f4 08 00 08 	add	r8,r10,r8
80019df2:	2c 88       	sub	r8,-56
80019df4:	70 08       	ld.w	r8,r8[0x0]
80019df6:	f0 ca ff ff 	sub	r10,r8,-1
80019dfa:	ee fb ff e0 	ld.w	r11,r7[-32]
80019dfe:	12 98       	mov	r8,r9
80019e00:	a1 78       	lsl	r8,0x1
80019e02:	12 08       	add	r8,r9
80019e04:	a5 68       	lsl	r8,0x4
80019e06:	f6 08 00 08 	add	r8,r11,r8
80019e0a:	2c 88       	sub	r8,-56
80019e0c:	91 0a       	st.w	r8[0x0],r10
				ts->tasks[i].next_run=current_time + ts->tasks[i].repeat_period;
80019e0e:	ee f9 ff e4 	ld.w	r9,r7[-28]
80019e12:	ee fa ff e4 	ld.w	r10,r7[-28]
80019e16:	ee fb ff e0 	ld.w	r11,r7[-32]
80019e1a:	14 98       	mov	r8,r10
80019e1c:	a1 78       	lsl	r8,0x1
80019e1e:	14 08       	add	r8,r10
80019e20:	a5 68       	lsl	r8,0x4
80019e22:	f6 08 00 08 	add	r8,r11,r8
80019e26:	2e 08       	sub	r8,-32
80019e28:	70 0a       	ld.w	r10,r8[0x0]
80019e2a:	ee f8 ff f4 	ld.w	r8,r7[-12]
80019e2e:	10 0a       	add	r10,r8
80019e30:	ee fb ff e0 	ld.w	r11,r7[-32]
80019e34:	12 98       	mov	r8,r9
80019e36:	a1 78       	lsl	r8,0x1
80019e38:	12 08       	add	r8,r9
80019e3a:	a5 68       	lsl	r8,0x4
80019e3c:	f6 08 00 08 	add	r8,r11,r8
80019e40:	2d c8       	sub	r8,-36
80019e42:	91 0a       	st.w	r8[0x0],r10
			}
			
			
			ts->tasks[i].delay_avg= (7*ts->tasks[i].delay_avg + delay)/8;
80019e44:	ee fc ff e4 	ld.w	r12,r7[-28]
80019e48:	ee f8 ff e4 	ld.w	r8,r7[-28]
80019e4c:	ee fa ff e0 	ld.w	r10,r7[-32]
80019e50:	f0 c9 ff ff 	sub	r9,r8,-1
80019e54:	12 98       	mov	r8,r9
80019e56:	a1 78       	lsl	r8,0x1
80019e58:	12 08       	add	r8,r9
80019e5a:	a5 68       	lsl	r8,0x4
80019e5c:	f4 08 00 08 	add	r8,r10,r8
80019e60:	70 09       	ld.w	r9,r8[0x0]
80019e62:	12 98       	mov	r8,r9
80019e64:	a3 78       	lsl	r8,0x3
80019e66:	f0 09 01 09 	sub	r9,r8,r9
80019e6a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80019e6e:	f2 08 00 08 	add	r8,r9,r8
80019e72:	f0 0a 16 03 	lsr	r10,r8,0x3
80019e76:	ee fb ff e0 	ld.w	r11,r7[-32]
80019e7a:	f8 c9 ff ff 	sub	r9,r12,-1
80019e7e:	12 98       	mov	r8,r9
80019e80:	a1 78       	lsl	r8,0x1
80019e82:	12 08       	add	r8,r9
80019e84:	a5 68       	lsl	r8,0x4
80019e86:	f6 08 00 08 	add	r8,r11,r8
80019e8a:	91 0a       	st.w	r8[0x0],r10
			if (delay>ts->tasks[i].delay_max) ts->tasks[i].delay_max=delay;
80019e8c:	ee f9 ff e4 	ld.w	r9,r7[-28]
80019e90:	ee fa ff e0 	ld.w	r10,r7[-32]
80019e94:	12 98       	mov	r8,r9
80019e96:	a1 78       	lsl	r8,0x1
80019e98:	12 08       	add	r8,r9
80019e9a:	a5 68       	lsl	r8,0x4
80019e9c:	f4 08 00 08 	add	r8,r10,r8
80019ea0:	2d 48       	sub	r8,-44
80019ea2:	70 09       	ld.w	r9,r8[0x0]
80019ea4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80019ea8:	10 39       	cp.w	r9,r8
80019eaa:	c0 f2       	brcc	80019ec8 <run_scheduler_update+0x2de>
80019eac:	ee f9 ff e4 	ld.w	r9,r7[-28]
80019eb0:	ee fa ff e0 	ld.w	r10,r7[-32]
80019eb4:	12 98       	mov	r8,r9
80019eb6:	a1 78       	lsl	r8,0x1
80019eb8:	12 08       	add	r8,r9
80019eba:	a5 68       	lsl	r8,0x4
80019ebc:	f4 08 00 08 	add	r8,r10,r8
80019ec0:	2d 48       	sub	r8,-44
80019ec2:	ee f9 ff f8 	ld.w	r9,r7[-8]
80019ec6:	91 09       	st.w	r8[0x0],r9
			
			ts->tasks[i].delay_var_squared=(15*ts->tasks[i].delay_var_squared+(delay - ts->tasks[i].delay_avg)*(delay - ts->tasks[i].delay_avg))/16;
80019ec8:	ee f9 ff e4 	ld.w	r9,r7[-28]
80019ecc:	ee fa ff e4 	ld.w	r10,r7[-28]
80019ed0:	ee fb ff e0 	ld.w	r11,r7[-32]
80019ed4:	14 98       	mov	r8,r10
80019ed6:	a1 78       	lsl	r8,0x1
80019ed8:	14 08       	add	r8,r10
80019eda:	a5 68       	lsl	r8,0x4
80019edc:	f6 08 00 08 	add	r8,r11,r8
80019ee0:	2c c8       	sub	r8,-52
80019ee2:	70 0a       	ld.w	r10,r8[0x0]
80019ee4:	14 98       	mov	r8,r10
80019ee6:	a5 68       	lsl	r8,0x4
80019ee8:	f0 0a 01 0b 	sub	r11,r8,r10
80019eec:	ee f8 ff e4 	ld.w	r8,r7[-28]
80019ef0:	ee fc ff e0 	ld.w	r12,r7[-32]
80019ef4:	f0 ca ff ff 	sub	r10,r8,-1
80019ef8:	14 98       	mov	r8,r10
80019efa:	a1 78       	lsl	r8,0x1
80019efc:	14 08       	add	r8,r10
80019efe:	a5 68       	lsl	r8,0x4
80019f00:	f8 08 00 08 	add	r8,r12,r8
80019f04:	70 08       	ld.w	r8,r8[0x0]
80019f06:	ee fa ff f8 	ld.w	r10,r7[-8]
80019f0a:	f4 08 01 0c 	sub	r12,r10,r8
80019f0e:	ee f8 ff e4 	ld.w	r8,r7[-28]
80019f12:	ee fe ff e0 	ld.w	lr,r7[-32]
80019f16:	f0 ca ff ff 	sub	r10,r8,-1
80019f1a:	14 98       	mov	r8,r10
80019f1c:	a1 78       	lsl	r8,0x1
80019f1e:	14 08       	add	r8,r10
80019f20:	a5 68       	lsl	r8,0x4
80019f22:	fc 08 00 08 	add	r8,lr,r8
80019f26:	70 08       	ld.w	r8,r8[0x0]
80019f28:	ee fa ff f8 	ld.w	r10,r7[-8]
80019f2c:	f4 08 01 08 	sub	r8,r10,r8
80019f30:	f8 08 02 48 	mul	r8,r12,r8
80019f34:	f6 08 00 08 	add	r8,r11,r8
80019f38:	f0 0a 16 04 	lsr	r10,r8,0x4
80019f3c:	ee fb ff e0 	ld.w	r11,r7[-32]
80019f40:	12 98       	mov	r8,r9
80019f42:	a1 78       	lsl	r8,0x1
80019f44:	12 08       	add	r8,r9
80019f46:	a5 68       	lsl	r8,0x4
80019f48:	f6 08 00 08 	add	r8,r11,r8
80019f4c:	2c c8       	sub	r8,-52
80019f4e:	91 0a       	st.w	r8[0x0],r10
			
			ts->tasks[i].execution_time= (7*ts->tasks[i].execution_time + (GET_TIME-task_start_time))/8;
80019f50:	ee f5 ff e4 	ld.w	r5,r7[-28]
80019f54:	ee f9 ff e4 	ld.w	r9,r7[-28]
80019f58:	ee fa ff e0 	ld.w	r10,r7[-32]
80019f5c:	12 98       	mov	r8,r9
80019f5e:	a1 78       	lsl	r8,0x1
80019f60:	12 08       	add	r8,r9
80019f62:	a5 68       	lsl	r8,0x4
80019f64:	f4 08 00 08 	add	r8,r10,r8
80019f68:	2d 88       	sub	r8,-40
80019f6a:	70 09       	ld.w	r9,r8[0x0]
80019f6c:	12 98       	mov	r8,r9
80019f6e:	a3 78       	lsl	r8,0x3
80019f70:	f0 09 01 03 	sub	r3,r8,r9
80019f74:	f0 16 00 27 	mcall	r6[156]
80019f78:	18 99       	mov	r9,r12
80019f7a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80019f7e:	f2 08 01 08 	sub	r8,r9,r8
80019f82:	e6 08 00 08 	add	r8,r3,r8
80019f86:	f0 09 16 03 	lsr	r9,r8,0x3
80019f8a:	ee fa ff e0 	ld.w	r10,r7[-32]
80019f8e:	0a 98       	mov	r8,r5
80019f90:	a1 78       	lsl	r8,0x1
80019f92:	0a 08       	add	r8,r5
80019f94:	a5 68       	lsl	r8,0x4
80019f96:	f4 08 00 08 	add	r8,r10,r8
80019f9a:	2d 88       	sub	r8,-40
80019f9c:	91 09       	st.w	r8[0x0],r9
						
			switch (schedule_strategy) {
80019f9e:	ef 38 ff dc 	ld.ub	r8,r7[-36]
80019fa2:	58 18       	cp.w	r8,1
80019fa4:	c0 81       	brne	80019fb4 <run_scheduler_update+0x3ca>
			case FIXED_PRIORITY: 
				ts->current_schedule_slot=0;
80019fa6:	ee f8 ff e0 	ld.w	r8,r7[-32]
80019faa:	30 09       	mov	r9,0
80019fac:	91 29       	st.w	r8[0x8],r9
				return realtime_violation;
80019fae:	ee f8 ff e8 	ld.w	r8,r7[-24]
80019fb2:	c2 08       	rjmp	80019ff2 <run_scheduler_update+0x408>
				
			default:
			case ROUND_ROBIN:
				// round robin scheme - scheduler will pick up where it left.
				if (i==ts->number_of_tasks) ts->current_schedule_slot=0;
80019fb4:	ee f8 ff e0 	ld.w	r8,r7[-32]
80019fb8:	11 88       	ld.ub	r8,r8[0x0]
80019fba:	10 99       	mov	r9,r8
80019fbc:	ee f8 ff e4 	ld.w	r8,r7[-28]
80019fc0:	10 39       	cp.w	r9,r8
80019fc2:	c0 51       	brne	80019fcc <run_scheduler_update+0x3e2>
80019fc4:	ee f8 ff e0 	ld.w	r8,r7[-32]
80019fc8:	30 09       	mov	r9,0
80019fca:	91 29       	st.w	r8[0x8],r9
				return realtime_violation;
80019fcc:	ee f8 ff e8 	ld.w	r8,r7[-24]
80019fd0:	c1 18       	rjmp	80019ff2 <run_scheduler_update+0x408>
int run_scheduler_update(task_set *ts, uint8_t schedule_strategy) {
	int i;
	int realtime_violation=0;
	function_pointer call_task;
	task_return_t treturn;
	for (i=ts->current_schedule_slot; i<ts->number_of_tasks; i++) {
80019fd2:	ee f8 ff e4 	ld.w	r8,r7[-28]
80019fd6:	2f f8       	sub	r8,-1
80019fd8:	ef 48 ff e4 	st.w	r7[-28],r8
80019fdc:	ee f8 ff e0 	ld.w	r8,r7[-32]
80019fe0:	11 88       	ld.ub	r8,r8[0x0]
80019fe2:	10 99       	mov	r9,r8
80019fe4:	ee f8 ff e4 	ld.w	r8,r7[-28]
80019fe8:	10 39       	cp.w	r9,r8
80019fea:	fe 99 fe 16 	brgt	80019c16 <run_scheduler_update+0x2c>
				return realtime_violation;
			}
			
		}
	}
	return realtime_violation;;
80019fee:	ee f8 ff e8 	ld.w	r8,r7[-24]
}
80019ff2:	10 9c       	mov	r12,r8
80019ff4:	2f 7d       	sub	sp,-36
80019ff6:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
80019ffa:	00 00       	add	r0,r0
80019ffc:	80 01       	ld.sh	r1,r0[0x0]
80019ffe:	9a 7a       	ld.sh	r10,sp[0xe]

8001a000 <get_task_by_id>:


task_entry* get_task_by_id(task_set *ts, uint16_t task_id){
8001a000:	eb cd 40 80 	pushm	r7,lr
8001a004:	1a 97       	mov	r7,sp
8001a006:	20 3d       	sub	sp,12
8001a008:	ef 4c ff f8 	st.w	r7[-8],r12
8001a00c:	16 98       	mov	r8,r11
8001a00e:	ef 58 ff f4 	st.h	r7[-12],r8
	int i=0;
8001a012:	30 08       	mov	r8,0
8001a014:	ef 48 ff fc 	st.w	r7[-4],r8
	for (i=0; i<ts->number_of_tasks; i++) {
8001a018:	30 08       	mov	r8,0
8001a01a:	ef 48 ff fc 	st.w	r7[-4],r8
8001a01e:	c2 58       	rjmp	8001a068 <get_task_by_id+0x68>
		if (ts->tasks[i].task_id==task_id) return &ts->tasks[i];
8001a020:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001a024:	ee fa ff f8 	ld.w	r10,r7[-8]
8001a028:	12 98       	mov	r8,r9
8001a02a:	a1 78       	lsl	r8,0x1
8001a02c:	12 08       	add	r8,r9
8001a02e:	a1 78       	lsl	r8,0x1
8001a030:	2f f8       	sub	r8,-1
8001a032:	a3 78       	lsl	r8,0x3
8001a034:	f4 08 00 08 	add	r8,r10,r8
8001a038:	90 68       	ld.sh	r8,r8[0xc]
8001a03a:	ef 09 ff f4 	ld.sh	r9,r7[-12]
8001a03e:	f0 09 19 00 	cp.h	r9,r8
8001a042:	c0 e1       	brne	8001a05e <get_task_by_id+0x5e>
8001a044:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001a048:	f0 ca ff f4 	sub	r10,r8,-12
8001a04c:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001a050:	12 98       	mov	r8,r9
8001a052:	a1 78       	lsl	r8,0x1
8001a054:	12 08       	add	r8,r9
8001a056:	a5 68       	lsl	r8,0x4
8001a058:	f4 08 00 08 	add	r8,r10,r8
8001a05c:	c1 08       	rjmp	8001a07c <get_task_by_id+0x7c>
}


task_entry* get_task_by_id(task_set *ts, uint16_t task_id){
	int i=0;
	for (i=0; i<ts->number_of_tasks; i++) {
8001a05e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001a062:	2f f8       	sub	r8,-1
8001a064:	ef 48 ff fc 	st.w	r7[-4],r8
8001a068:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001a06c:	11 88       	ld.ub	r8,r8[0x0]
8001a06e:	10 99       	mov	r9,r8
8001a070:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001a074:	10 39       	cp.w	r9,r8
8001a076:	fe 99 ff d5 	brgt	8001a020 <get_task_by_id+0x20>
		if (ts->tasks[i].task_id==task_id) return &ts->tasks[i];
	}
	return NULL;
8001a07a:	30 08       	mov	r8,0
}
8001a07c:	10 9c       	mov	r12,r8
8001a07e:	2f dd       	sub	sp,-12
8001a080:	e3 cd 80 80 	ldm	sp++,r7,pc

8001a084 <get_task_by_index>:

task_entry* get_task_by_index(task_set *ts, uint16_t task_index) {
8001a084:	eb cd 40 80 	pushm	r7,lr
8001a088:	1a 97       	mov	r7,sp
8001a08a:	20 2d       	sub	sp,8
8001a08c:	ef 4c ff fc 	st.w	r7[-4],r12
8001a090:	16 98       	mov	r8,r11
8001a092:	ef 58 ff f8 	st.h	r7[-8],r8
	if (task_index<ts->number_of_tasks) {
8001a096:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001a09a:	11 88       	ld.ub	r8,r8[0x0]
8001a09c:	ef 09 ff f8 	ld.sh	r9,r7[-8]
8001a0a0:	f0 09 19 00 	cp.h	r9,r8
8001a0a4:	c0 e2       	brcc	8001a0c0 <get_task_by_index+0x3c>
		return &ts->tasks[task_index];
8001a0a6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001a0aa:	f0 ca ff f4 	sub	r10,r8,-12
8001a0ae:	ef 19 ff f8 	ld.uh	r9,r7[-8]
8001a0b2:	12 98       	mov	r8,r9
8001a0b4:	a1 78       	lsl	r8,0x1
8001a0b6:	12 08       	add	r8,r9
8001a0b8:	a5 68       	lsl	r8,0x4
8001a0ba:	f4 08 00 08 	add	r8,r10,r8
8001a0be:	c0 28       	rjmp	8001a0c2 <get_task_by_index+0x3e>
	}
	return NULL;
8001a0c0:	30 08       	mov	r8,0
}
8001a0c2:	10 9c       	mov	r12,r8
8001a0c4:	2f ed       	sub	sp,-8
8001a0c6:	e3 cd 80 80 	ldm	sp++,r7,pc

8001a0ca <change_run_mode>:

void change_run_mode(task_entry *te, task_run_mode_t new_run_mode) {
8001a0ca:	eb cd 40 80 	pushm	r7,lr
8001a0ce:	1a 97       	mov	r7,sp
8001a0d0:	20 2d       	sub	sp,8
8001a0d2:	ef 4c ff fc 	st.w	r7[-4],r12
8001a0d6:	ef 4b ff f8 	st.w	r7[-8],r11
	te->run_mode=new_run_mode;
8001a0da:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001a0de:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001a0e2:	91 39       	st.w	r8[0xc],r9
}
8001a0e4:	2f ed       	sub	sp,-8
8001a0e6:	e3 cd 80 80 	ldm	sp++,r7,pc

8001a0ea <change_task_period>:

void change_task_period(task_entry *te, unsigned long repeat_period) {
8001a0ea:	eb cd 40 c0 	pushm	r6-r7,lr
8001a0ee:	1a 97       	mov	r7,sp
8001a0f0:	20 2d       	sub	sp,8
8001a0f2:	48 c6       	lddpc	r6,8001a120 <change_task_period+0x36>
8001a0f4:	1e 26       	rsub	r6,pc
8001a0f6:	ef 4c ff fc 	st.w	r7[-4],r12
8001a0fa:	ef 4b ff f8 	st.w	r7[-8],r11
	te->repeat_period=repeat_period;
8001a0fe:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001a102:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001a106:	91 59       	st.w	r8[0x14],r9
	change_run_mode(te, RUN_REGULAR);
8001a108:	30 2b       	mov	r11,2
8001a10a:	ee fc ff fc 	ld.w	r12,r7[-4]
8001a10e:	f0 16 00 a2 	mcall	r6[648]
	run_task_now(te);
8001a112:	ee fc ff fc 	ld.w	r12,r7[-4]
8001a116:	f0 16 00 f7 	mcall	r6[988]
}
8001a11a:	2f ed       	sub	sp,-8
8001a11c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001a120:	80 01       	ld.sh	r1,r0[0x0]
8001a122:	9f 78       	st.w	pc[0x1c],r8

8001a124 <suspend_task>:

void suspend_task(task_entry *te, unsigned long delay) {
8001a124:	eb cd 40 c0 	pushm	r6-r7,lr
8001a128:	1a 97       	mov	r7,sp
8001a12a:	20 2d       	sub	sp,8
8001a12c:	48 96       	lddpc	r6,8001a150 <suspend_task+0x2c>
8001a12e:	1e 26       	rsub	r6,pc
8001a130:	ef 4c ff fc 	st.w	r7[-4],r12
8001a134:	ef 4b ff f8 	st.w	r7[-8],r11
	te->next_run=GET_TIME + delay;
8001a138:	f0 16 00 27 	mcall	r6[156]
8001a13c:	18 99       	mov	r9,r12
8001a13e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001a142:	10 09       	add	r9,r8
8001a144:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001a148:	91 69       	st.w	r8[0x18],r9
}
8001a14a:	2f ed       	sub	sp,-8
8001a14c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001a150:	80 01       	ld.sh	r1,r0[0x0]
8001a152:	9f b2       	st.w	pc[0x2c],r2

8001a154 <run_task_now>:

void run_task_now(task_entry *te) {
8001a154:	eb cd 40 80 	pushm	r7,lr
8001a158:	1a 97       	mov	r7,sp
8001a15a:	20 1d       	sub	sp,4
8001a15c:	ef 4c ff fc 	st.w	r7[-4],r12
	if ((te->run_mode==RUN_NEVER)){
8001a160:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001a164:	70 38       	ld.w	r8,r8[0xc]
8001a166:	58 08       	cp.w	r8,0
8001a168:	c0 51       	brne	8001a172 <run_task_now+0x1e>
		te->run_mode=RUN_ONCE;
8001a16a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001a16e:	30 19       	mov	r9,1
8001a170:	91 39       	st.w	r8[0xc],r9
		//te->next_run=GET_TIME;
	} 
}
8001a172:	2f fd       	sub	sp,-4
8001a174:	e3 cd 80 80 	ldm	sp++,r7,pc

8001a178 <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
8001a178:	eb cd 40 c0 	pushm	r6-r7,lr
8001a17c:	1a 97       	mov	r7,sp
8001a17e:	20 6d       	sub	sp,24
8001a180:	49 e6       	lddpc	r6,8001a1f8 <interpolate+0x80>
8001a182:	1e 26       	rsub	r6,pc
8001a184:	ef 4c ff f8 	st.w	r7[-8],r12
8001a188:	ef 4b ff f4 	st.w	r7[-12],r11
8001a18c:	ef 4a ff f0 	st.w	r7[-16],r10
8001a190:	ef 49 ff ec 	st.w	r7[-20],r9
8001a194:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
8001a198:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001a19c:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001a1a0:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
8001a1a4:	c0 41       	brne	8001a1ac <interpolate+0x34>
	{
		return y1;
8001a1a6:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001a1aa:	c2 38       	rjmp	8001a1f0 <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
8001a1ac:	ee f9 ff e8 	ld.w	r9,r7[-24]
8001a1b0:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001a1b4:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8001a1b8:	ee fa ff f8 	ld.w	r10,r7[-8]
8001a1bc:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001a1c0:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
8001a1c4:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8001a1c8:	ee fa ff f0 	ld.w	r10,r7[-16]
8001a1cc:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001a1d0:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8001a1d4:	12 9b       	mov	r11,r9
8001a1d6:	10 9c       	mov	r12,r8
8001a1d8:	f0 16 00 08 	mcall	r6[32]
8001a1dc:	18 98       	mov	r8,r12
8001a1de:	10 99       	mov	r9,r8
8001a1e0:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001a1e4:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8001a1e8:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
8001a1ec:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
8001a1f0:	10 9c       	mov	r12,r8
8001a1f2:	2f ad       	sub	sp,-24
8001a1f4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001a1f8:	80 01       	ld.sh	r1,r0[0x0]
8001a1fa:	a0 06       	st.h	r0[0x0],r6

8001a1fc <mav_array_memcpy>:

/*
  like memcpy(), but if src is NULL, do a memset to zero
*/
static void mav_array_memcpy(void *dest, const void *src, size_t n)
{
8001a1fc:	eb cd 40 c0 	pushm	r6-r7,lr
8001a200:	1a 97       	mov	r7,sp
8001a202:	20 3d       	sub	sp,12
8001a204:	49 06       	lddpc	r6,8001a244 <mav_array_memcpy+0x48>
8001a206:	1e 26       	rsub	r6,pc
8001a208:	ef 4c ff fc 	st.w	r7[-4],r12
8001a20c:	ef 4b ff f8 	st.w	r7[-8],r11
8001a210:	ef 4a ff f4 	st.w	r7[-12],r10
	if (src == NULL) {
8001a214:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001a218:	58 08       	cp.w	r8,0
8001a21a:	c0 91       	brne	8001a22c <mav_array_memcpy+0x30>
		memset(dest, 0, n);
8001a21c:	ee fa ff f4 	ld.w	r10,r7[-12]
8001a220:	30 0b       	mov	r11,0
8001a222:	ee fc ff fc 	ld.w	r12,r7[-4]
8001a226:	f0 16 00 30 	mcall	r6[192]
8001a22a:	c0 98       	rjmp	8001a23c <mav_array_memcpy+0x40>
	} else {
		memcpy(dest, src, n);
8001a22c:	ee fa ff f4 	ld.w	r10,r7[-12]
8001a230:	ee fb ff f8 	ld.w	r11,r7[-8]
8001a234:	ee fc ff fc 	ld.w	r12,r7[-4]
8001a238:	f0 16 00 20 	mcall	r6[128]
	}
}
8001a23c:	2f dd       	sub	sp,-12
8001a23e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001a242:	00 00       	add	r0,r0
8001a244:	80 01       	ld.sh	r1,r0[0x0]
8001a246:	a0 8a       	st.b	r0[0x0],r10

8001a248 <init_gps_ubx>:
************************************************************************************
Initialization of the GPS with the type of platform
************************************************************************************
*/
void init_gps_ubx(enum GPS_Engine_Setting _engine_nav_setting)
{
8001a248:	eb cd 40 c0 	pushm	r6-r7,lr
8001a24c:	1a 97       	mov	r7,sp
8001a24e:	20 2d       	sub	sp,8
8001a250:	4a 26       	lddpc	r6,8001a2d8 <init_gps_ubx+0x90>
8001a252:	1e 26       	rsub	r6,pc
8001a254:	ef 4c ff f8 	st.w	r7[-8],r12
	centralData = get_central_data();
8001a258:	f0 16 00 32 	mcall	r6[200]
8001a25c:	18 99       	mov	r9,r12
8001a25e:	ec f8 00 00 	ld.w	r8,r6[0]
8001a262:	91 09       	st.w	r8[0x0],r9
	
	//centralData->gps_stream_out.flush(centralData->gps_stream_out.data);
	
	uint8_t epoch = TIME_OF_WEEK;
8001a264:	30 18       	mov	r8,1
8001a266:	ef 68 ff ff 	st.b	r7[-1],r8
	idleTimeout = 1200;
8001a26a:	ec f8 04 00 	ld.w	r8,r6[1024]
8001a26e:	e0 69 04 b0 	mov	r9,1200
8001a272:	91 09       	st.w	r8[0x0],r9
	
	configure_gps();
8001a274:	f0 16 01 78 	mcall	r6[1504]
	
	engine_nav_setting = _engine_nav_setting;
8001a278:	ec f8 01 bc 	ld.w	r8,r6[444]
8001a27c:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001a280:	91 09       	st.w	r8[0x0],r9
	
	centralData->GPS_data.status = NO_FIX;
8001a282:	ec f8 00 00 	ld.w	r8,r6[0]
8001a286:	70 09       	ld.w	r9,r8[0x0]
8001a288:	30 18       	mov	r8,1
8001a28a:	f3 68 0b 54 	st.b	r9[2900],r8
	centralData->GPS_data.num_sats = 0;
8001a28e:	ec f8 00 00 	ld.w	r8,r6[0]
8001a292:	70 09       	ld.w	r9,r8[0x0]
8001a294:	30 08       	mov	r8,0
8001a296:	f3 68 0b 48 	st.b	r9[2888],r8
	
	next_fix = false;
8001a29a:	ec f9 01 c8 	ld.w	r9,r6[456]
8001a29e:	30 08       	mov	r8,0
8001a2a0:	b2 88       	st.b	r9[0x0],r8
// 	new_data = false;
// 	valid_read = false;
	have_raw_velocity = false;
8001a2a2:	ec f9 03 98 	ld.w	r9,r6[920]
8001a2a6:	30 08       	mov	r8,0
8001a2a8:	b2 88       	st.b	r9[0x0],r8
	fix = false;
8001a2aa:	ec f9 06 2c 	ld.w	r9,r6[1580]
8001a2ae:	30 08       	mov	r8,0
8001a2b0:	b2 88       	st.b	r9[0x0],r8
	
	last_fix_time = 0;
8001a2b2:	ec f8 06 94 	ld.w	r8,r6[1684]
8001a2b6:	30 09       	mov	r9,0
8001a2b8:	91 09       	st.w	r8[0x0],r9
	
	new_position = false;
8001a2ba:	ec f9 02 28 	ld.w	r9,r6[552]
8001a2be:	30 08       	mov	r8,0
8001a2c0:	b2 88       	st.b	r9[0x0],r8
	new_speed = false;
8001a2c2:	ec f9 01 f4 	ld.w	r9,r6[500]
8001a2c6:	30 08       	mov	r8,0
8001a2c8:	b2 88       	st.b	r9[0x0],r8
	
	step = 0;
8001a2ca:	ec f9 00 4c 	ld.w	r9,r6[76]
8001a2ce:	30 08       	mov	r8,0
8001a2d0:	b2 88       	st.b	r9[0x0],r8
	}
8001a2d2:	2f ed       	sub	sp,-8
8001a2d4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001a2d8:	80 01       	ld.sh	r1,r0[0x0]
8001a2da:	a0 d6       	st.b	r0[0x5],r6
8001a2dc:	6c 61       	ld.w	r1,r6[0x18]
8001a2de:	72 67       	ld.w	r7,r9[0x18]
8001a2e0:	65 20       	ld.w	r0,r2[0x48]
8001a2e2:	70 61       	ld.w	r1,r8[0x18]
8001a2e4:	79 6c       	ld.w	r12,r12[0x58]
8001a2e6:	6f 61       	ld.w	r1,r7[0x58]
8001a2e8:	64 3a       	ld.w	r10,r2[0xc]
8001a2ea:	20 00       	sub	r0,0
8001a2ec:	0a 00       	add	r0,r5
8001a2ee:	00 00       	add	r0,r0
8001a2f0:	57 72       	stdsp	sp[0x1dc],r2
8001a2f2:	6f 6e       	ld.w	lr,r7[0x58]
8001a2f4:	67 20       	ld.w	r0,r3[0x48]
8001a2f6:	50 6f       	stdsp	sp[0x18],pc
8001a2f8:	73 6c       	ld.w	r12,r9[0x58]
8001a2fa:	6c 68       	ld.w	r8,r6[0x18]
8001a2fc:	20 6d       	sub	sp,24
8001a2fe:	65 73       	ld.w	r3,r2[0x5c]
8001a300:	73 61       	ld.w	r1,r9[0x58]
8001a302:	67 65       	ld.w	r5,r3[0x58]
8001a304:	20 30       	sub	r0,3
8001a306:	78 00       	ld.w	r0,r12[0x0]
8001a308:	20 4d       	sub	sp,16
8001a30a:	73 67       	ld.w	r7,r9[0x58]
8001a30c:	20 69       	sub	r9,6
8001a30e:	64 3a       	ld.w	r10,r2[0xc]
8001a310:	20 30       	sub	r0,3
8001a312:	78 00       	ld.w	r0,r12[0x0]
8001a314:	20 52       	sub	r2,5
8001a316:	65 63       	ld.w	r3,r2[0x58]
8001a318:	65 69       	ld.w	r9,r2[0x58]
8001a31a:	76 65       	ld.w	r5,r11[0x18]
8001a31c:	64 20       	ld.w	r0,r2[0x8]
8001a31e:	73 69       	ld.w	r9,r9[0x58]
8001a320:	7a 65       	ld.w	r5,sp[0x18]
8001a322:	3a 00       	mov	r0,-96
8001a324:	20 73       	sub	r3,7
8001a326:	68 6f       	ld.w	pc,r4[0x18]
8001a328:	75 6c       	ld.w	r12,r10[0x58]
8001a32a:	64 20       	ld.w	r0,r2[0x8]
8001a32c:	62 65       	ld.w	r5,r1[0x18]
8001a32e:	3a 00       	mov	r0,-96
8001a330:	57 72       	stdsp	sp[0x1dc],r2
8001a332:	6f 6e       	ld.w	lr,r7[0x58]
8001a334:	67 20       	ld.w	r0,r3[0x48]
8001a336:	4e 61       	lddpc	r1,8001a4cc <init_gps_ubx+0x284>
8001a338:	76 20       	ld.w	r0,r11[0x8]
8001a33a:	53 74       	stdsp	sp[0xdc],r4
8001a33c:	61 74       	ld.w	r4,r0[0x5c]
8001a33e:	75 73       	ld.w	r3,r10[0x5c]
8001a340:	20 6d       	sub	sp,24
8001a342:	65 73       	ld.w	r3,r2[0x5c]
8001a344:	73 61       	ld.w	r1,r9[0x58]
8001a346:	67 65       	ld.w	r5,r3[0x58]
8001a348:	20 30       	sub	r0,3
8001a34a:	78 00       	ld.w	r0,r12[0x0]
8001a34c:	57 72       	stdsp	sp[0x1dc],r2
8001a34e:	6f 6e       	ld.w	lr,r7[0x58]
8001a350:	67 20       	ld.w	r0,r3[0x48]
8001a352:	53 6f       	stdsp	sp[0xd8],pc
8001a354:	6c 75       	ld.w	r5,r6[0x1c]
8001a356:	74 69       	ld.w	r9,r10[0x18]
8001a358:	6f 6e       	ld.w	lr,r7[0x58]
8001a35a:	20 6d       	sub	sp,24
8001a35c:	65 73       	ld.w	r3,r2[0x5c]
8001a35e:	73 61       	ld.w	r1,r9[0x58]
8001a360:	67 65       	ld.w	r5,r3[0x58]
8001a362:	20 30       	sub	r0,3
8001a364:	78 00       	ld.w	r0,r12[0x0]
8001a366:	00 00       	add	r0,r0
8001a368:	57 72       	stdsp	sp[0x1dc],r2
8001a36a:	6f 6e       	ld.w	lr,r7[0x58]
8001a36c:	67 20       	ld.w	r0,r3[0x48]
8001a36e:	56 65       	stdsp	sp[0x198],r5
8001a370:	6c 6e       	ld.w	lr,r6[0x18]
8001a372:	65 64       	ld.w	r4,r2[0x58]
8001a374:	20 6d       	sub	sp,24
8001a376:	65 73       	ld.w	r3,r2[0x5c]
8001a378:	73 61       	ld.w	r1,r9[0x58]
8001a37a:	67 65       	ld.w	r5,r3[0x58]
8001a37c:	20 30       	sub	r0,3
8001a37e:	78 00       	ld.w	r0,r12[0x0]
8001a380:	57 72       	stdsp	sp[0x1dc],r2
8001a382:	6f 6e       	ld.w	lr,r7[0x58]
8001a384:	67 20       	ld.w	r0,r3[0x48]
8001a386:	53 56       	stdsp	sp[0xd4],r6
8001a388:	20 49       	sub	r9,4
8001a38a:	6e 66       	ld.w	r6,r7[0x18]
8001a38c:	6f 20       	ld.w	r0,r7[0x48]
8001a38e:	6d 65       	ld.w	r5,r6[0x58]
8001a390:	73 73       	ld.w	r3,r9[0x5c]
8001a392:	61 67       	ld.w	r7,r0[0x58]
8001a394:	65 20       	ld.w	r0,r2[0x48]
8001a396:	30 78       	mov	r8,7
8001a398:	00 00       	add	r0,r0
8001a39a:	00 00       	add	r0,r0
8001a39c:	55 6e       	stdsp	sp[0x158],lr
8001a39e:	65 78       	ld.w	r8,r2[0x5c]
8001a3a0:	70 65       	ld.w	r5,r8[0x18]
8001a3a2:	63 74       	ld.w	r4,r1[0x5c]
8001a3a4:	65 64       	ld.w	r4,r2[0x58]
8001a3a6:	20 4e       	sub	lr,4
8001a3a8:	41 56       	lddsp	r6,sp[0x54]
8001a3aa:	20 6d       	sub	sp,24
8001a3ac:	65 73       	ld.w	r3,r2[0x5c]
8001a3ae:	73 61       	ld.w	r1,r9[0x58]
8001a3b0:	67 65       	ld.w	r5,r3[0x58]
8001a3b2:	2c 20       	sub	r0,-62
8001a3b4:	43 6c       	lddsp	r12,sp[0xd8]
8001a3b6:	61 73       	ld.w	r3,r0[0x5c]
8001a3b8:	73 3a       	ld.w	r10,r9[0x4c]
8001a3ba:	20 30       	sub	r0,3
8001a3bc:	78 00       	ld.w	r0,r12[0x0]
8001a3be:	00 00       	add	r0,r0
8001a3c0:	2c 20       	sub	r0,-62
8001a3c2:	6d 73       	ld.w	r3,r6[0x5c]
8001a3c4:	67 20       	ld.w	r0,r3[0x48]
8001a3c6:	69 64       	ld.w	r4,r4[0x58]
8001a3c8:	3a 20       	mov	r0,-94
8001a3ca:	30 78       	mov	r8,7
8001a3cc:	00 00       	add	r0,r0
8001a3ce:	00 00       	add	r0,r0
8001a3d0:	20 6f       	sub	pc,6
8001a3d2:	66 20       	ld.w	r0,r3[0x8]
8001a3d4:	73 69       	ld.w	r9,r9[0x58]
8001a3d6:	7a 65       	ld.w	r5,sp[0x18]
8001a3d8:	20 00       	sub	r0,0
8001a3da:	00 00       	add	r0,r0
8001a3dc:	57 72       	stdsp	sp[0x1dc],r2
8001a3de:	6f 6e       	ld.w	lr,r7[0x58]
8001a3e0:	67 20       	ld.w	r0,r3[0x48]
8001a3e2:	4e 61       	lddpc	r1,8001a578 <ubx_read+0x32>
8001a3e4:	76 20       	ld.w	r0,r11[0x8]
8001a3e6:	53 65       	stdsp	sp[0xd8],r5
8001a3e8:	74 74       	ld.w	r4,r10[0x1c]
8001a3ea:	69 6e       	ld.w	lr,r4[0x58]
8001a3ec:	67 73       	ld.w	r3,r3[0x5c]
8001a3ee:	20 6d       	sub	sp,24
8001a3f0:	65 73       	ld.w	r3,r2[0x5c]
8001a3f2:	73 61       	ld.w	r1,r9[0x58]
8001a3f4:	67 65       	ld.w	r5,r3[0x58]
8001a3f6:	20 30       	sub	r0,3
8001a3f8:	78 00       	ld.w	r0,r12[0x0]
8001a3fa:	00 00       	add	r0,r0
8001a3fc:	57 72       	stdsp	sp[0x1dc],r2
8001a3fe:	6f 6e       	ld.w	lr,r7[0x58]
8001a400:	67 20       	ld.w	r0,r3[0x48]
8001a402:	43 46       	lddsp	r6,sp[0xd0]
8001a404:	47 20       	lddsp	r0,sp[0x1c8]
8001a406:	52 61       	stdsp	sp[0x98],r1
8001a408:	74 65       	ld.w	r5,r10[0x18]
8001a40a:	20 6d       	sub	sp,24
8001a40c:	65 73       	ld.w	r3,r2[0x5c]
8001a40e:	73 61       	ld.w	r1,r9[0x58]
8001a410:	67 65       	ld.w	r5,r3[0x58]
8001a412:	20 30       	sub	r0,3
8001a414:	78 00       	ld.w	r0,r12[0x0]
8001a416:	00 00       	add	r0,r0
8001a418:	57 72       	stdsp	sp[0x1dc],r2
8001a41a:	6f 6e       	ld.w	lr,r7[0x58]
8001a41c:	67 20       	ld.w	r0,r3[0x48]
8001a41e:	43 46       	lddsp	r6,sp[0xd0]
8001a420:	47 20       	lddsp	r0,sp[0x1c8]
8001a422:	53 65       	stdsp	sp[0xd8],r5
8001a424:	74 2f       	ld.w	pc,r10[0x8]
8001a426:	67 65       	ld.w	r5,r3[0x58]
8001a428:	74 20       	ld.w	r0,r10[0x8]
8001a42a:	6d 65       	ld.w	r5,r6[0x58]
8001a42c:	73 73       	ld.w	r3,r9[0x5c]
8001a42e:	61 67       	ld.w	r7,r0[0x58]
8001a430:	65 20       	ld.w	r0,r2[0x48]
8001a432:	30 78       	mov	r8,7
8001a434:	00 00       	add	r0,r0
8001a436:	00 00       	add	r0,r0
8001a438:	55 6e       	stdsp	sp[0x158],lr
8001a43a:	65 78       	ld.w	r8,r2[0x5c]
8001a43c:	70 65       	ld.w	r5,r8[0x18]
8001a43e:	63 74       	ld.w	r4,r1[0x5c]
8001a440:	65 64       	ld.w	r4,r2[0x58]
8001a442:	20 43       	sub	r3,4
8001a444:	46 47       	lddsp	r7,sp[0x190]
8001a446:	20 6d       	sub	sp,24
8001a448:	65 73       	ld.w	r3,r2[0x5c]
8001a44a:	73 61       	ld.w	r1,r9[0x58]
8001a44c:	67 65       	ld.w	r5,r3[0x58]
8001a44e:	2c 20       	sub	r0,-62
8001a450:	43 6c       	lddsp	r12,sp[0xd8]
8001a452:	61 73       	ld.w	r3,r0[0x5c]
8001a454:	73 3a       	ld.w	r10,r9[0x4c]
8001a456:	20 30       	sub	r0,3
8001a458:	78 00       	ld.w	r0,r12[0x0]
8001a45a:	00 00       	add	r0,r0
8001a45c:	57 72       	stdsp	sp[0x1dc],r2
8001a45e:	6f 6e       	ld.w	lr,r7[0x58]
8001a460:	67 20       	ld.w	r0,r3[0x48]
8001a462:	4d 4f       	lddpc	pc,8001a5b0 <ubx_read+0x6a>
8001a464:	4e 20       	lddpc	r0,8001a5ec <ubx_read+0xa6>
8001a466:	52 58       	stdsp	sp[0x94],r8
8001a468:	52 20       	stdsp	sp[0x88],r0
8001a46a:	6d 65       	ld.w	r5,r6[0x58]
8001a46c:	73 73       	ld.w	r3,r9[0x5c]
8001a46e:	61 67       	ld.w	r7,r0[0x58]
8001a470:	65 20       	ld.w	r0,r2[0x48]
8001a472:	30 78       	mov	r8,7
8001a474:	00 00       	add	r0,r0
8001a476:	00 00       	add	r0,r0
8001a478:	55 6e       	stdsp	sp[0x158],lr
8001a47a:	65 78       	ld.w	r8,r2[0x5c]
8001a47c:	70 65       	ld.w	r5,r8[0x18]
8001a47e:	63 74       	ld.w	r4,r1[0x5c]
8001a480:	65 64       	ld.w	r4,r2[0x58]
8001a482:	20 54       	sub	r4,5
8001a484:	49 4d       	lddpc	sp,8001a4d4 <init_gps_ubx+0x28c>
8001a486:	20 6d       	sub	sp,24
8001a488:	65 73       	ld.w	r3,r2[0x5c]
8001a48a:	73 61       	ld.w	r1,r9[0x58]
8001a48c:	67 65       	ld.w	r5,r3[0x58]
8001a48e:	2c 20       	sub	r0,-62
8001a490:	43 6c       	lddsp	r12,sp[0xd8]
8001a492:	61 73       	ld.w	r3,r0[0x5c]
8001a494:	73 3a       	ld.w	r10,r9[0x4c]
8001a496:	20 30       	sub	r0,3
8001a498:	78 00       	ld.w	r0,r12[0x0]
8001a49a:	00 00       	add	r0,r0
8001a49c:	20 73       	sub	r3,7
8001a49e:	68 6f       	ld.w	pc,r4[0x18]
8001a4a0:	75 6c       	ld.w	r12,r10[0x58]
8001a4a2:	64 20       	ld.w	r0,r2[0x8]
8001a4a4:	62 65       	ld.w	r5,r1[0x18]
8001a4a6:	20 3a       	sub	r10,3
8001a4a8:	00 00       	add	r0,r0
8001a4aa:	00 00       	add	r0,r0
8001a4ac:	57 72       	stdsp	sp[0x1dc],r2
8001a4ae:	6f 6e       	ld.w	lr,r7[0x58]
8001a4b0:	67 20       	ld.w	r0,r3[0x48]
8001a4b2:	54 49       	stdsp	sp[0x110],r9
8001a4b4:	4d 20       	lddpc	r0,8001a5fc <ubx_read+0xb6>
8001a4b6:	54 50       	stdsp	sp[0x114],r0
8001a4b8:	20 6d       	sub	sp,24
8001a4ba:	65 73       	ld.w	r3,r2[0x5c]
8001a4bc:	73 61       	ld.w	r1,r9[0x58]
8001a4be:	67 65       	ld.w	r5,r3[0x58]
8001a4c0:	20 30       	sub	r0,3
8001a4c2:	78 00       	ld.w	r0,r12[0x0]
8001a4c4:	57 72       	stdsp	sp[0x1dc],r2
8001a4c6:	6f 6e       	ld.w	lr,r7[0x58]
8001a4c8:	67 20       	ld.w	r0,r3[0x48]
8001a4ca:	54 49       	stdsp	sp[0x110],r9
8001a4cc:	4d 20       	lddpc	r0,8001a614 <ubx_read+0xce>
8001a4ce:	56 52       	stdsp	sp[0x194],r2
8001a4d0:	46 59       	lddsp	r9,sp[0x194]
8001a4d2:	20 6d       	sub	sp,24
8001a4d4:	65 73       	ld.w	r3,r2[0x5c]
8001a4d6:	73 61       	ld.w	r1,r9[0x58]
8001a4d8:	67 65       	ld.w	r5,r3[0x58]
8001a4da:	20 30       	sub	r0,3
8001a4dc:	78 00       	ld.w	r0,r12[0x0]
8001a4de:	00 00       	add	r0,r0
8001a4e0:	55 6e       	stdsp	sp[0x158],lr
8001a4e2:	65 78       	ld.w	r8,r2[0x5c]
8001a4e4:	70 65       	ld.w	r5,r8[0x18]
8001a4e6:	63 74       	ld.w	r4,r1[0x5c]
8001a4e8:	65 64       	ld.w	r4,r2[0x58]
8001a4ea:	20 6d       	sub	sp,24
8001a4ec:	65 73       	ld.w	r3,r2[0x5c]
8001a4ee:	73 61       	ld.w	r1,r9[0x58]
8001a4f0:	67 65       	ld.w	r5,r3[0x58]
8001a4f2:	2c 20       	sub	r0,-62
8001a4f4:	43 6c       	lddsp	r12,sp[0xd8]
8001a4f6:	61 73       	ld.w	r3,r0[0x5c]
8001a4f8:	73 3a       	ld.w	r10,r9[0x4c]
8001a4fa:	20 30       	sub	r0,3
8001a4fc:	78 00       	ld.w	r0,r12[0x0]
8001a4fe:	00 00       	add	r0,r0
8001a500:	62 61       	ld.w	r1,r1[0x18]
8001a502:	64 20       	ld.w	r0,r2[0x8]
8001a504:	63 6b       	ld.w	r11,r1[0x58]
8001a506:	73 75       	ld.w	r5,r9[0x5c]
8001a508:	6d 5f       	ld.w	pc,r6[0x54]
8001a50a:	61 20       	ld.w	r0,r0[0x48]
8001a50c:	00 00       	add	r0,r0
8001a50e:	00 00       	add	r0,r0
8001a510:	20 73       	sub	r3,7
8001a512:	68 6f       	ld.w	pc,r4[0x18]
8001a514:	75 6c       	ld.w	r12,r10[0x58]
8001a516:	64 20       	ld.w	r0,r2[0x8]
8001a518:	62 65       	ld.w	r5,r1[0x18]
8001a51a:	20 00       	sub	r0,0
8001a51c:	20 63       	sub	r3,6
8001a51e:	6c 61       	ld.w	r1,r6[0x18]
8001a520:	73 73       	ld.w	r3,r9[0x5c]
8001a522:	20 3a       	sub	r10,3
8001a524:	20 30       	sub	r0,3
8001a526:	78 00       	ld.w	r0,r12[0x0]
8001a528:	20 6d       	sub	sp,24
8001a52a:	73 67       	ld.w	r7,r9[0x58]
8001a52c:	5f 69       	srmi	r9
8001a52e:	64 20       	ld.w	r0,r2[0x8]
8001a530:	3a 20       	mov	r0,-94
8001a532:	30 78       	mov	r8,7
8001a534:	00 00       	add	r0,r0
8001a536:	00 00       	add	r0,r0
8001a538:	62 61       	ld.w	r1,r1[0x18]
8001a53a:	64 20       	ld.w	r0,r2[0x8]
8001a53c:	63 6b       	ld.w	r11,r1[0x58]
8001a53e:	73 75       	ld.w	r5,r9[0x5c]
8001a540:	6d 5f       	ld.w	pc,r6[0x54]
8001a542:	62 20       	ld.w	r0,r1[0x8]
	...

8001a546 <ubx_read>:
re-processing it from the top, this is unavoidable. The parser
attempts to avoid this when possible.
************************************************************************************
*/
bool ubx_read(void)
{
8001a546:	eb cd 40 c0 	pushm	r6-r7,lr
8001a54a:	1a 97       	mov	r7,sp
8001a54c:	20 2d       	sub	sp,8
8001a54e:	fe f6 0c fa 	ld.w	r6,pc[3322]
8001a552:	1e 26       	rsub	r6,pc
	uint8_t data;
	bool msg_ok = false;
8001a554:	30 08       	mov	r8,0
8001a556:	ef 68 ff fb 	st.b	r7[-5],r8
	//bool new_message = false;
	
	unsigned char * temporaryMessageForSwaping;
	
	while(buffer_bytes_available(&(centralData->gps_buffer)))
8001a55a:	e0 8f 06 64 	bral	8001b222 <ubx_read+0xcdc>
	{
		data = buffer_get(&(centralData->gps_buffer));
8001a55e:	ec f8 00 00 	ld.w	r8,r6[0]
8001a562:	70 08       	ld.w	r8,r8[0x0]
8001a564:	f0 c8 f6 2c 	sub	r8,r8,-2516
8001a568:	10 9c       	mov	r12,r8
8001a56a:	f0 16 00 43 	mcall	r6[268]
8001a56e:	18 98       	mov	r8,r12
8001a570:	ef 68 ff fa 	st.b	r7[-6],r8
		
// 		dbg_print(" 0x");
//  	dbg_print_num(data,16);
// 		dbg_print("\n");
		
		switch (step)
8001a574:	ec f8 00 4c 	ld.w	r8,r6[76]
8001a578:	11 88       	ld.ub	r8,r8[0x0]
8001a57a:	58 88       	cp.w	r8,8
8001a57c:	e0 8b 06 53 	brhi	8001b222 <ubx_read+0xcdc>
8001a580:	fe c9 ff f8 	sub	r9,pc,-8
8001a584:	f2 08 00 2f 	add	pc,r9,r8<<0x2
8001a588:	e0 8f 00 26 	bral	8001a5d4 <ubx_read+0x8e>
8001a58c:	e0 8f 00 10 	bral	8001a5ac <ubx_read+0x66>
8001a590:	e0 8f 00 38 	bral	8001a600 <ubx_read+0xba>
8001a594:	e0 8f 00 50 	bral	8001a634 <ubx_read+0xee>
8001a598:	e0 8f 00 74 	bral	8001a680 <ubx_read+0x13a>
8001a59c:	e0 8f 00 98 	bral	8001a6cc <ubx_read+0x186>
8001a5a0:	e0 8f 05 68 	bral	8001b070 <ubx_read+0xb2a>
8001a5a4:	e0 8f 05 ac 	bral	8001b0fc <ubx_read+0xbb6>
8001a5a8:	e0 8f 05 f0 	bral	8001b188 <ubx_read+0xc42>
			// chances of recovering from a mismatch and makes it less
			// likely that we will be fooled by the preamble appearing
			// as data in some other message.
			//
		case 1:
			if (data == UBX_PREAMBLE2)
8001a5ac:	ef 39 ff fa 	ld.ub	r9,r7[-6]
8001a5b0:	36 28       	mov	r8,98
8001a5b2:	f0 09 18 00 	cp.b	r9,r8
8001a5b6:	c0 b1       	brne	8001a5cc <ubx_read+0x86>
			{
				step++;
8001a5b8:	ec f8 00 4c 	ld.w	r8,r6[76]
8001a5bc:	11 88       	ld.ub	r8,r8[0x0]
8001a5be:	2f f8       	sub	r8,-1
8001a5c0:	5c 58       	castu.b	r8
8001a5c2:	ec f9 00 4c 	ld.w	r9,r6[76]
8001a5c6:	b2 88       	st.b	r9[0x0],r8
				break;
8001a5c8:	e0 8f 06 2d 	bral	8001b222 <ubx_read+0xcdc>
			}
			step = 0;
8001a5cc:	ec f9 00 4c 	ld.w	r9,r6[76]
8001a5d0:	30 08       	mov	r8,0
8001a5d2:	b2 88       	st.b	r9[0x0],r8
		case 0:
			if (data == UBX_PREAMBLE1)
8001a5d4:	ef 39 ff fa 	ld.ub	r9,r7[-6]
8001a5d8:	3b 58       	mov	r8,-75
8001a5da:	f0 09 18 00 	cp.b	r9,r8
8001a5de:	c0 b1       	brne	8001a5f4 <ubx_read+0xae>
			{
				step++;
8001a5e0:	ec f8 00 4c 	ld.w	r8,r6[76]
8001a5e4:	11 88       	ld.ub	r8,r8[0x0]
8001a5e6:	2f f8       	sub	r8,-1
8001a5e8:	5c 58       	castu.b	r8
8001a5ea:	ec f9 00 4c 	ld.w	r9,r6[76]
8001a5ee:	b2 88       	st.b	r9[0x0],r8
				break;
8001a5f0:	e0 8f 06 19 	bral	8001b222 <ubx_read+0xcdc>
			}
			step = 0;
8001a5f4:	ec f9 00 4c 	ld.w	r9,r6[76]
8001a5f8:	30 08       	mov	r8,0
8001a5fa:	b2 88       	st.b	r9[0x0],r8
			break;
8001a5fc:	e0 8f 06 13 	bral	8001b222 <ubx_read+0xcdc>
		//
		// We always collect the length so that we can avoid being
		// fooled by preamble bytes in messages.
		//
		case 2:
			step++;
8001a600:	ec f8 00 4c 	ld.w	r8,r6[76]
8001a604:	11 88       	ld.ub	r8,r8[0x0]
8001a606:	2f f8       	sub	r8,-1
8001a608:	5c 58       	castu.b	r8
8001a60a:	ec f9 00 4c 	ld.w	r9,r6[76]
8001a60e:	b2 88       	st.b	r9[0x0],r8
			ubxclass = data;
8001a610:	ec f9 00 60 	ld.w	r9,r6[96]
8001a614:	ef 38 ff fa 	ld.ub	r8,r7[-6]
8001a618:	b2 88       	st.b	r9[0x0],r8
			cksum_a = data;
8001a61a:	ec f9 00 ac 	ld.w	r9,r6[172]
8001a61e:	ef 38 ff fa 	ld.ub	r8,r7[-6]
8001a622:	b2 88       	st.b	r9[0x0],r8
			cksum_b = cksum_a; // reset the checksum accumulators
8001a624:	ec f8 00 ac 	ld.w	r8,r6[172]
8001a628:	11 88       	ld.ub	r8,r8[0x0]
8001a62a:	ec f9 01 08 	ld.w	r9,r6[264]
8001a62e:	b2 88       	st.b	r9[0x0],r8
			break;
8001a630:	e0 8f 05 f9 	bral	8001b222 <ubx_read+0xcdc>
		case 3:
			step++;
8001a634:	ec f8 00 4c 	ld.w	r8,r6[76]
8001a638:	11 88       	ld.ub	r8,r8[0x0]
8001a63a:	2f f8       	sub	r8,-1
8001a63c:	5c 58       	castu.b	r8
8001a63e:	ec f9 00 4c 	ld.w	r9,r6[76]
8001a642:	b2 88       	st.b	r9[0x0],r8
			cksum_a += data;
8001a644:	ec f8 00 ac 	ld.w	r8,r6[172]
8001a648:	11 88       	ld.ub	r8,r8[0x0]
8001a64a:	ef 39 ff fa 	ld.ub	r9,r7[-6]
8001a64e:	f2 08 00 08 	add	r8,r9,r8
8001a652:	5c 58       	castu.b	r8
8001a654:	ec f9 00 ac 	ld.w	r9,r6[172]
8001a658:	b2 88       	st.b	r9[0x0],r8
			cksum_b += cksum_a; // checksum byte
8001a65a:	ec f8 01 08 	ld.w	r8,r6[264]
8001a65e:	11 89       	ld.ub	r9,r8[0x0]
8001a660:	ec f8 00 ac 	ld.w	r8,r6[172]
8001a664:	11 88       	ld.ub	r8,r8[0x0]
8001a666:	f2 08 00 08 	add	r8,r9,r8
8001a66a:	5c 58       	castu.b	r8
8001a66c:	ec f9 01 08 	ld.w	r9,r6[264]
8001a670:	b2 88       	st.b	r9[0x0],r8
			msg_id = data;
8001a672:	ec f9 00 5c 	ld.w	r9,r6[92]
8001a676:	ef 38 ff fa 	ld.ub	r8,r7[-6]
8001a67a:	b2 88       	st.b	r9[0x0],r8
			break;
8001a67c:	e0 8f 05 d3 	bral	8001b222 <ubx_read+0xcdc>
		case 4:
			step++;
8001a680:	ec f8 00 4c 	ld.w	r8,r6[76]
8001a684:	11 88       	ld.ub	r8,r8[0x0]
8001a686:	2f f8       	sub	r8,-1
8001a688:	5c 58       	castu.b	r8
8001a68a:	ec f9 00 4c 	ld.w	r9,r6[76]
8001a68e:	b2 88       	st.b	r9[0x0],r8
			cksum_a += data;
8001a690:	ec f8 00 ac 	ld.w	r8,r6[172]
8001a694:	11 88       	ld.ub	r8,r8[0x0]
8001a696:	ef 39 ff fa 	ld.ub	r9,r7[-6]
8001a69a:	f2 08 00 08 	add	r8,r9,r8
8001a69e:	5c 58       	castu.b	r8
8001a6a0:	ec f9 00 ac 	ld.w	r9,r6[172]
8001a6a4:	b2 88       	st.b	r9[0x0],r8
			cksum_b += cksum_a; // checksum byte
8001a6a6:	ec f8 01 08 	ld.w	r8,r6[264]
8001a6aa:	11 89       	ld.ub	r9,r8[0x0]
8001a6ac:	ec f8 00 ac 	ld.w	r8,r6[172]
8001a6b0:	11 88       	ld.ub	r8,r8[0x0]
8001a6b2:	f2 08 00 08 	add	r8,r9,r8
8001a6b6:	5c 58       	castu.b	r8
8001a6b8:	ec f9 01 08 	ld.w	r9,r6[264]
8001a6bc:	b2 88       	st.b	r9[0x0],r8
			payload_length = data;
8001a6be:	ef 38 ff fa 	ld.ub	r8,r7[-6]
8001a6c2:	ec f9 00 58 	ld.w	r9,r6[88]
8001a6c6:	b2 08       	st.h	r9[0x0],r8
			break;
8001a6c8:	e0 8f 05 ad 	bral	8001b222 <ubx_read+0xcdc>
		case 5:
			step++;
8001a6cc:	ec f8 00 4c 	ld.w	r8,r6[76]
8001a6d0:	11 88       	ld.ub	r8,r8[0x0]
8001a6d2:	2f f8       	sub	r8,-1
8001a6d4:	5c 58       	castu.b	r8
8001a6d6:	ec f9 00 4c 	ld.w	r9,r6[76]
8001a6da:	b2 88       	st.b	r9[0x0],r8
			payload_length |= data<<8;
8001a6dc:	ef 38 ff fa 	ld.ub	r8,r7[-6]
8001a6e0:	a9 68       	lsl	r8,0x8
8001a6e2:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
8001a6e6:	ec f8 00 58 	ld.w	r8,r6[88]
8001a6ea:	90 08       	ld.sh	r8,r8[0x0]
8001a6ec:	5c 88       	casts.h	r8
8001a6ee:	f3 e8 10 08 	or	r8,r9,r8
8001a6f2:	5c 88       	casts.h	r8
8001a6f4:	ec f9 00 58 	ld.w	r9,r6[88]
8001a6f8:	b2 08       	st.h	r9[0x0],r8
			cksum_a += data;
8001a6fa:	ec f8 00 ac 	ld.w	r8,r6[172]
8001a6fe:	11 88       	ld.ub	r8,r8[0x0]
8001a700:	ef 39 ff fa 	ld.ub	r9,r7[-6]
8001a704:	f2 08 00 08 	add	r8,r9,r8
8001a708:	5c 58       	castu.b	r8
8001a70a:	ec f9 00 ac 	ld.w	r9,r6[172]
8001a70e:	b2 88       	st.b	r9[0x0],r8
			cksum_b += cksum_a; // checksum byte
8001a710:	ec f8 01 08 	ld.w	r8,r6[264]
8001a714:	11 89       	ld.ub	r9,r8[0x0]
8001a716:	ec f8 00 ac 	ld.w	r8,r6[172]
8001a71a:	11 88       	ld.ub	r8,r8[0x0]
8001a71c:	f2 08 00 08 	add	r8,r9,r8
8001a720:	5c 58       	castu.b	r8
8001a722:	ec f9 01 08 	ld.w	r9,r6[264]
8001a726:	b2 88       	st.b	r9[0x0],r8
// 			dbg_print(" large byte shifted");
// 			dbg_print_num(data<<8,10);
// 			dbg_print("\n");
			
			//payload_length |= (uint16_t)(data<<8);
			if (payload_length > 512)
8001a728:	ec f8 00 58 	ld.w	r8,r6[88]
8001a72c:	90 09       	ld.sh	r9,r8[0x0]
8001a72e:	e0 68 02 00 	mov	r8,512
8001a732:	f0 09 19 00 	cp.h	r9,r8
8001a736:	e0 88 00 1b 	brls	8001a76c <ubx_read+0x226>
			{
				// we assume very large payloads are line noise
				dbg_print("large payload: ");
8001a73a:	fe cc 04 5e 	sub	r12,pc,1118
8001a73e:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(payload_length,10);
8001a742:	ec f8 00 58 	ld.w	r8,r6[88]
8001a746:	90 08       	ld.sh	r8,r8[0x0]
8001a748:	5c 78       	castu.h	r8
8001a74a:	30 ab       	mov	r11,10
8001a74c:	10 9c       	mov	r12,r8
8001a74e:	f0 16 00 04 	mcall	r6[16]
				dbg_print("\n");
8001a752:	fe cc 04 66 	sub	r12,pc,1126
8001a756:	f0 16 00 01 	mcall	r6[4]
				payload_length = 0;
8001a75a:	ec f9 00 58 	ld.w	r9,r6[88]
8001a75e:	30 08       	mov	r8,0
8001a760:	b2 08       	st.h	r9[0x0],r8
				step = 0;
8001a762:	ec f9 00 4c 	ld.w	r9,r6[76]
8001a766:	30 08       	mov	r8,0
8001a768:	b2 88       	st.b	r9[0x0],r8
				goto reset;
8001a76a:	c0 5b       	rjmp	8001a574 <ubx_read+0x2e>
			}
			payload_counter = 0; // prepare to receive payload
8001a76c:	ec f9 01 b0 	ld.w	r9,r6[432]
8001a770:	30 08       	mov	r8,0
8001a772:	b2 08       	st.h	r9[0x0],r8
			
			if(ubxclass == UBX_CLASS_NAV)
8001a774:	ec f8 00 60 	ld.w	r8,r6[96]
8001a778:	11 89       	ld.ub	r9,r8[0x0]
8001a77a:	30 18       	mov	r8,1
8001a77c:	f0 09 18 00 	cp.b	r9,r8
8001a780:	e0 81 01 c0 	brne	8001ab00 <ubx_read+0x5ba>
			{
				switch(msg_id)
8001a784:	ec f8 00 5c 	ld.w	r8,r6[92]
8001a788:	11 88       	ld.ub	r8,r8[0x0]
8001a78a:	58 68       	cp.w	r8,6
8001a78c:	e0 80 00 ab 	breq	8001a8e2 <ubx_read+0x39c>
8001a790:	e0 89 00 08 	brgt	8001a7a0 <ubx_read+0x25a>
8001a794:	58 28       	cp.w	r8,2
8001a796:	c0 e0       	breq	8001a7b2 <ubx_read+0x26c>
8001a798:	58 38       	cp.w	r8,3
8001a79a:	c5 80       	breq	8001a84a <ubx_read+0x304>
8001a79c:	e0 8f 01 84 	bral	8001aaa4 <ubx_read+0x55e>
8001a7a0:	59 28       	cp.w	r8,18
8001a7a2:	e0 80 00 eb 	breq	8001a978 <ubx_read+0x432>
8001a7a6:	e0 48 00 30 	cp.w	r8,48
8001a7aa:	e0 80 01 32 	breq	8001aa0e <ubx_read+0x4c8>
8001a7ae:	e0 8f 01 7b 	bral	8001aaa4 <ubx_read+0x55e>
				{
				case MSG_NAV_POSLLH:
					if(payload_length == UBX_SIZE_NAV_POSLLH)
8001a7b2:	ec f8 00 58 	ld.w	r8,r6[88]
8001a7b6:	90 09       	ld.sh	r9,r8[0x0]
8001a7b8:	31 c8       	mov	r8,28
8001a7ba:	f0 09 19 00 	cp.h	r9,r8
8001a7be:	c1 21       	brne	8001a7e2 <ubx_read+0x29c>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentPosllhMessage;
8001a7c0:	ec f9 07 74 	ld.w	r9,r6[1908]
8001a7c4:	ec f8 00 d4 	ld.w	r8,r6[212]
8001a7c8:	91 09       	st.w	r8[0x0],r9
						ubx_lastMessage = (unsigned char**)&ubx_lastPosllhMessage;
8001a7ca:	ec f9 03 54 	ld.w	r9,r6[852]
8001a7ce:	ec f8 00 e0 	ld.w	r8,r6[224]
8001a7d2:	91 09       	st.w	r8[0x0],r9
						ubx_validMessage = &ubx_numberOfValidPosllhMessage;
8001a7d4:	ec f8 00 f8 	ld.w	r8,r6[248]
8001a7d8:	ec f9 04 5c 	ld.w	r9,r6[1116]
8001a7dc:	91 09       	st.w	r8[0x0],r9
						dbg_print_num(UBX_SIZE_NAV_POSLLH,10);
						dbg_print("\n");
						step = 0;
						goto reset;
					}
					break;
8001a7de:	e0 8f 01 8f 	bral	8001aafc <ubx_read+0x5b6>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentPosllhMessage;
						ubx_lastMessage = (unsigned char**)&ubx_lastPosllhMessage;
						ubx_validMessage = &ubx_numberOfValidPosllhMessage;
					}else{
						dbg_print("Wrong Posllh message 0x");
8001a7e2:	fe cc 04 f2 	sub	r12,pc,1266
8001a7e6:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(ubxclass,16);
8001a7ea:	ec f8 00 60 	ld.w	r8,r6[96]
8001a7ee:	11 88       	ld.ub	r8,r8[0x0]
8001a7f0:	31 0b       	mov	r11,16
8001a7f2:	10 9c       	mov	r12,r8
8001a7f4:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Msg id: 0x");
8001a7f8:	fe cc 04 f0 	sub	r12,pc,1264
8001a7fc:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(msg_id,16);
8001a800:	ec f8 00 5c 	ld.w	r8,r6[92]
8001a804:	11 88       	ld.ub	r8,r8[0x0]
8001a806:	31 0b       	mov	r11,16
8001a808:	10 9c       	mov	r12,r8
8001a80a:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Received size:");
8001a80e:	fe cc 04 fa 	sub	r12,pc,1274
8001a812:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(payload_length,10);
8001a816:	ec f8 00 58 	ld.w	r8,r6[88]
8001a81a:	90 08       	ld.sh	r8,r8[0x0]
8001a81c:	5c 78       	castu.h	r8
8001a81e:	30 ab       	mov	r11,10
8001a820:	10 9c       	mov	r12,r8
8001a822:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" should be:");
8001a826:	fe cc 05 02 	sub	r12,pc,1282
8001a82a:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(UBX_SIZE_NAV_POSLLH,10);
8001a82e:	30 ab       	mov	r11,10
8001a830:	31 cc       	mov	r12,28
8001a832:	f0 16 00 04 	mcall	r6[16]
						dbg_print("\n");
8001a836:	fe cc 05 4a 	sub	r12,pc,1354
8001a83a:	f0 16 00 01 	mcall	r6[4]
						step = 0;
8001a83e:	ec f9 00 4c 	ld.w	r9,r6[76]
8001a842:	30 08       	mov	r8,0
8001a844:	b2 88       	st.b	r9[0x0],r8
						goto reset;
8001a846:	fe 9f fe 97 	bral	8001a574 <ubx_read+0x2e>
					}
					break;
				case MSG_NAV_STATUS:
					if(payload_length == UBX_SIZE_NAV_STATUS)
8001a84a:	ec f8 00 58 	ld.w	r8,r6[88]
8001a84e:	90 09       	ld.sh	r9,r8[0x0]
8001a850:	31 08       	mov	r8,16
8001a852:	f0 09 19 00 	cp.h	r9,r8
8001a856:	c1 21       	brne	8001a87a <ubx_read+0x334>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentStatusMessage;
8001a858:	ec f9 06 0c 	ld.w	r9,r6[1548]
8001a85c:	ec f8 00 d4 	ld.w	r8,r6[212]
8001a860:	91 09       	st.w	r8[0x0],r9
						ubx_lastMessage = (unsigned char**)&ubx_lastStatusMessage;
8001a862:	ec f9 03 58 	ld.w	r9,r6[856]
8001a866:	ec f8 00 e0 	ld.w	r8,r6[224]
8001a86a:	91 09       	st.w	r8[0x0],r9
						ubx_validMessage = &ubx_numberOfValidStatusMessage;
8001a86c:	ec f8 00 f8 	ld.w	r8,r6[248]
8001a870:	ec f9 04 24 	ld.w	r9,r6[1060]
8001a874:	91 09       	st.w	r8[0x0],r9
						dbg_print_num(UBX_SIZE_NAV_STATUS,10);
						dbg_print("\n");
						step = 0;
						goto reset;
					}
					break;
8001a876:	e0 8f 01 43 	bral	8001aafc <ubx_read+0x5b6>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentStatusMessage;
						ubx_lastMessage = (unsigned char**)&ubx_lastStatusMessage;
						ubx_validMessage = &ubx_numberOfValidStatusMessage;
					}else{
						dbg_print("Wrong Nav Status message 0x");
8001a87a:	fe cc 05 4a 	sub	r12,pc,1354
8001a87e:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(ubxclass,16);
8001a882:	ec f8 00 60 	ld.w	r8,r6[96]
8001a886:	11 88       	ld.ub	r8,r8[0x0]
8001a888:	31 0b       	mov	r11,16
8001a88a:	10 9c       	mov	r12,r8
8001a88c:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Msg id: 0x");
8001a890:	fe cc 05 88 	sub	r12,pc,1416
8001a894:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(msg_id,16);
8001a898:	ec f8 00 5c 	ld.w	r8,r6[92]
8001a89c:	11 88       	ld.ub	r8,r8[0x0]
8001a89e:	31 0b       	mov	r11,16
8001a8a0:	10 9c       	mov	r12,r8
8001a8a2:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Received size:");
8001a8a6:	fe cc 05 92 	sub	r12,pc,1426
8001a8aa:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(payload_length,10);
8001a8ae:	ec f8 00 58 	ld.w	r8,r6[88]
8001a8b2:	90 08       	ld.sh	r8,r8[0x0]
8001a8b4:	5c 78       	castu.h	r8
8001a8b6:	30 ab       	mov	r11,10
8001a8b8:	10 9c       	mov	r12,r8
8001a8ba:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" should be:");
8001a8be:	fe cc 05 9a 	sub	r12,pc,1434
8001a8c2:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(UBX_SIZE_NAV_STATUS,10);
8001a8c6:	30 ab       	mov	r11,10
8001a8c8:	31 0c       	mov	r12,16
8001a8ca:	f0 16 00 04 	mcall	r6[16]
						dbg_print("\n");
8001a8ce:	fe cc 05 e2 	sub	r12,pc,1506
8001a8d2:	f0 16 00 01 	mcall	r6[4]
						step = 0;
8001a8d6:	ec f9 00 4c 	ld.w	r9,r6[76]
8001a8da:	30 08       	mov	r8,0
8001a8dc:	b2 88       	st.b	r9[0x0],r8
						goto reset;
8001a8de:	fe 9f fe 4b 	bral	8001a574 <ubx_read+0x2e>
					}
					break;
				case MSG_NAV_SOL:
					if(payload_length == UBX_SIZE_NAV_SOL)
8001a8e2:	ec f8 00 58 	ld.w	r8,r6[88]
8001a8e6:	90 09       	ld.sh	r9,r8[0x0]
8001a8e8:	33 48       	mov	r8,52
8001a8ea:	f0 09 19 00 	cp.h	r9,r8
8001a8ee:	c1 11       	brne	8001a910 <ubx_read+0x3ca>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentSolutionMessage;
8001a8f0:	ec f9 07 b4 	ld.w	r9,r6[1972]
8001a8f4:	ec f8 00 d4 	ld.w	r8,r6[212]
8001a8f8:	91 09       	st.w	r8[0x0],r9
						ubx_lastMessage = (unsigned char**)&ubx_lastSolutionMessage;
8001a8fa:	ec f9 03 c0 	ld.w	r9,r6[960]
8001a8fe:	ec f8 00 e0 	ld.w	r8,r6[224]
8001a902:	91 09       	st.w	r8[0x0],r9
						ubx_validMessage = &ubx_numberOfValidSolutionMessage;;
8001a904:	ec f8 00 f8 	ld.w	r8,r6[248]
8001a908:	ec f9 04 74 	ld.w	r9,r6[1140]
8001a90c:	91 09       	st.w	r8[0x0],r9
						dbg_print_num(UBX_SIZE_NAV_SOL,10);
						dbg_print("\n");
						step = 0;
						goto reset;
					}
					break;
8001a90e:	cf 78       	rjmp	8001aafc <ubx_read+0x5b6>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentSolutionMessage;
						ubx_lastMessage = (unsigned char**)&ubx_lastSolutionMessage;
						ubx_validMessage = &ubx_numberOfValidSolutionMessage;;
					}else{
						dbg_print("Wrong Solution message 0x");
8001a910:	fe cc 05 c4 	sub	r12,pc,1476
8001a914:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(ubxclass,16);
8001a918:	ec f8 00 60 	ld.w	r8,r6[96]
8001a91c:	11 88       	ld.ub	r8,r8[0x0]
8001a91e:	31 0b       	mov	r11,16
8001a920:	10 9c       	mov	r12,r8
8001a922:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Msg id: 0x");
8001a926:	fe cc 06 1e 	sub	r12,pc,1566
8001a92a:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(msg_id,16);
8001a92e:	ec f8 00 5c 	ld.w	r8,r6[92]
8001a932:	11 88       	ld.ub	r8,r8[0x0]
8001a934:	31 0b       	mov	r11,16
8001a936:	10 9c       	mov	r12,r8
8001a938:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Received size:");
8001a93c:	fe cc 06 28 	sub	r12,pc,1576
8001a940:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(payload_length,10);
8001a944:	ec f8 00 58 	ld.w	r8,r6[88]
8001a948:	90 08       	ld.sh	r8,r8[0x0]
8001a94a:	5c 78       	castu.h	r8
8001a94c:	30 ab       	mov	r11,10
8001a94e:	10 9c       	mov	r12,r8
8001a950:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" should be:");
8001a954:	fe cc 06 30 	sub	r12,pc,1584
8001a958:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(UBX_SIZE_NAV_SOL,10);
8001a95c:	30 ab       	mov	r11,10
8001a95e:	33 4c       	mov	r12,52
8001a960:	f0 16 00 04 	mcall	r6[16]
						dbg_print("\n");
8001a964:	fe cc 06 78 	sub	r12,pc,1656
8001a968:	f0 16 00 01 	mcall	r6[4]
						step = 0;
8001a96c:	ec f9 00 4c 	ld.w	r9,r6[76]
8001a970:	30 08       	mov	r8,0
8001a972:	b2 88       	st.b	r9[0x0],r8
						goto reset;
8001a974:	fe 9f fe 00 	bral	8001a574 <ubx_read+0x2e>
					}
					break;
				case MSG_NAV_VELNED:
					if(payload_length == UBX_SIZE_NAV_VELNED)
8001a978:	ec f8 00 58 	ld.w	r8,r6[88]
8001a97c:	90 09       	ld.sh	r9,r8[0x0]
8001a97e:	32 48       	mov	r8,36
8001a980:	f0 09 19 00 	cp.h	r9,r8
8001a984:	c1 11       	brne	8001a9a6 <ubx_read+0x460>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentVelnedMessage;
8001a986:	ec f9 05 98 	ld.w	r9,r6[1432]
8001a98a:	ec f8 00 d4 	ld.w	r8,r6[212]
8001a98e:	91 09       	st.w	r8[0x0],r9
						ubx_lastMessage = (unsigned char**)&ubx_lastVelnedMessage;
8001a990:	ec f9 04 70 	ld.w	r9,r6[1136]
8001a994:	ec f8 00 e0 	ld.w	r8,r6[224]
8001a998:	91 09       	st.w	r8[0x0],r9
						ubx_validMessage = &ubx_numberOfValidVelnedMessage;
8001a99a:	ec f8 00 f8 	ld.w	r8,r6[248]
8001a99e:	ec f9 04 80 	ld.w	r9,r6[1152]
8001a9a2:	91 09       	st.w	r8[0x0],r9
						dbg_print_num(UBX_SIZE_NAV_VELNED,10);
						dbg_print("\n");
						step = 0;
						goto reset;
					}
					break;
8001a9a4:	ca c8       	rjmp	8001aafc <ubx_read+0x5b6>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentVelnedMessage;
						ubx_lastMessage = (unsigned char**)&ubx_lastVelnedMessage;
						ubx_validMessage = &ubx_numberOfValidVelnedMessage;
					}else{
						dbg_print("Wrong Velned message 0x");
8001a9a6:	fe cc 06 3e 	sub	r12,pc,1598
8001a9aa:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(ubxclass,16);
8001a9ae:	ec f8 00 60 	ld.w	r8,r6[96]
8001a9b2:	11 88       	ld.ub	r8,r8[0x0]
8001a9b4:	31 0b       	mov	r11,16
8001a9b6:	10 9c       	mov	r12,r8
8001a9b8:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Msg id: 0x");
8001a9bc:	fe cc 06 b4 	sub	r12,pc,1716
8001a9c0:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(msg_id,16);
8001a9c4:	ec f8 00 5c 	ld.w	r8,r6[92]
8001a9c8:	11 88       	ld.ub	r8,r8[0x0]
8001a9ca:	31 0b       	mov	r11,16
8001a9cc:	10 9c       	mov	r12,r8
8001a9ce:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Received size:");
8001a9d2:	fe cc 06 be 	sub	r12,pc,1726
8001a9d6:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(payload_length,10);
8001a9da:	ec f8 00 58 	ld.w	r8,r6[88]
8001a9de:	90 08       	ld.sh	r8,r8[0x0]
8001a9e0:	5c 78       	castu.h	r8
8001a9e2:	30 ab       	mov	r11,10
8001a9e4:	10 9c       	mov	r12,r8
8001a9e6:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" should be:");
8001a9ea:	fe cc 06 c6 	sub	r12,pc,1734
8001a9ee:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(UBX_SIZE_NAV_VELNED,10);
8001a9f2:	30 ab       	mov	r11,10
8001a9f4:	32 4c       	mov	r12,36
8001a9f6:	f0 16 00 04 	mcall	r6[16]
						dbg_print("\n");
8001a9fa:	fe cc 07 0e 	sub	r12,pc,1806
8001a9fe:	f0 16 00 01 	mcall	r6[4]
						step = 0;
8001aa02:	ec f9 00 4c 	ld.w	r9,r6[76]
8001aa06:	30 08       	mov	r8,0
8001aa08:	b2 88       	st.b	r9[0x0],r8
						goto reset;
8001aa0a:	fe 9f fd b5 	bral	8001a574 <ubx_read+0x2e>
					}
					break;
				case MSG_NAV_SVINFO:
					if(payload_length == UBX_SIZE_NAV_SVINFO)
8001aa0e:	ec f8 00 58 	ld.w	r8,r6[88]
8001aa12:	90 09       	ld.sh	r9,r8[0x0]
8001aa14:	31 e8       	mov	r8,30
8001aa16:	f0 09 19 00 	cp.h	r9,r8
8001aa1a:	c1 11       	brne	8001aa3c <ubx_read+0x4f6>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentSVInfoMessage;
8001aa1c:	ec f9 04 c0 	ld.w	r9,r6[1216]
8001aa20:	ec f8 00 d4 	ld.w	r8,r6[212]
8001aa24:	91 09       	st.w	r8[0x0],r9
						ubx_lastMessage = (unsigned char**)&ubx_lastSVInfoMessage;
8001aa26:	ec f9 04 54 	ld.w	r9,r6[1108]
8001aa2a:	ec f8 00 e0 	ld.w	r8,r6[224]
8001aa2e:	91 09       	st.w	r8[0x0],r9
						ubx_validMessage = &ubx_numberOfValidSVInfoMessage;
8001aa30:	ec f8 00 f8 	ld.w	r8,r6[248]
8001aa34:	ec f9 03 8c 	ld.w	r9,r6[908]
8001aa38:	91 09       	st.w	r8[0x0],r9
						dbg_print_num(UBX_SIZE_NAV_SVINFO,10);
						dbg_print("\n");
						step = 0;
						goto reset;
					}
					break;
8001aa3a:	c6 18       	rjmp	8001aafc <ubx_read+0x5b6>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentSVInfoMessage;
						ubx_lastMessage = (unsigned char**)&ubx_lastSVInfoMessage;
						ubx_validMessage = &ubx_numberOfValidSVInfoMessage;
					}else{
						dbg_print("Wrong SV Info message 0x");
8001aa3c:	fe cc 06 bc 	sub	r12,pc,1724
8001aa40:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(ubxclass,16);
8001aa44:	ec f8 00 60 	ld.w	r8,r6[96]
8001aa48:	11 88       	ld.ub	r8,r8[0x0]
8001aa4a:	31 0b       	mov	r11,16
8001aa4c:	10 9c       	mov	r12,r8
8001aa4e:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Msg id: 0x");
8001aa52:	fe cc 07 4a 	sub	r12,pc,1866
8001aa56:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(msg_id,16);
8001aa5a:	ec f8 00 5c 	ld.w	r8,r6[92]
8001aa5e:	11 88       	ld.ub	r8,r8[0x0]
8001aa60:	31 0b       	mov	r11,16
8001aa62:	10 9c       	mov	r12,r8
8001aa64:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Received size:");
8001aa68:	fe cc 07 54 	sub	r12,pc,1876
8001aa6c:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(payload_length,10);
8001aa70:	ec f8 00 58 	ld.w	r8,r6[88]
8001aa74:	90 08       	ld.sh	r8,r8[0x0]
8001aa76:	5c 78       	castu.h	r8
8001aa78:	30 ab       	mov	r11,10
8001aa7a:	10 9c       	mov	r12,r8
8001aa7c:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" should be:");
8001aa80:	fe cc 07 5c 	sub	r12,pc,1884
8001aa84:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(UBX_SIZE_NAV_SVINFO,10);
8001aa88:	30 ab       	mov	r11,10
8001aa8a:	31 ec       	mov	r12,30
8001aa8c:	f0 16 00 04 	mcall	r6[16]
						dbg_print("\n");
8001aa90:	fe cc 07 a4 	sub	r12,pc,1956
8001aa94:	f0 16 00 01 	mcall	r6[4]
						step = 0;
8001aa98:	ec f9 00 4c 	ld.w	r9,r6[76]
8001aa9c:	30 08       	mov	r8,0
8001aa9e:	b2 88       	st.b	r9[0x0],r8
						goto reset;
8001aaa0:	fe 9f fd 6a 	bral	8001a574 <ubx_read+0x2e>
					}
					break;
				default:
					step = 0;
8001aaa4:	ec f9 00 4c 	ld.w	r9,r6[76]
8001aaa8:	30 08       	mov	r8,0
8001aaaa:	b2 88       	st.b	r9[0x0],r8
					dbg_print("Unexpected NAV message, Class: 0x");
8001aaac:	fe cc 07 10 	sub	r12,pc,1808
8001aab0:	f0 16 00 01 	mcall	r6[4]
					dbg_print_num(ubxclass,16);
8001aab4:	ec f8 00 60 	ld.w	r8,r6[96]
8001aab8:	11 88       	ld.ub	r8,r8[0x0]
8001aaba:	31 0b       	mov	r11,16
8001aabc:	10 9c       	mov	r12,r8
8001aabe:	f0 16 00 04 	mcall	r6[16]
					dbg_print(", msg id: 0x");
8001aac2:	fe cc 07 02 	sub	r12,pc,1794
8001aac6:	f0 16 00 01 	mcall	r6[4]
					dbg_print_num(msg_id,16);
8001aaca:	ec f8 00 5c 	ld.w	r8,r6[92]
8001aace:	11 88       	ld.ub	r8,r8[0x0]
8001aad0:	31 0b       	mov	r11,16
8001aad2:	10 9c       	mov	r12,r8
8001aad4:	f0 16 00 04 	mcall	r6[16]
					dbg_print(" of size ");
8001aad8:	fe cc 07 08 	sub	r12,pc,1800
8001aadc:	f0 16 00 01 	mcall	r6[4]
					dbg_print_num(payload_length,10);
8001aae0:	ec f8 00 58 	ld.w	r8,r6[88]
8001aae4:	90 08       	ld.sh	r8,r8[0x0]
8001aae6:	5c 78       	castu.h	r8
8001aae8:	30 ab       	mov	r11,10
8001aaea:	10 9c       	mov	r12,r8
8001aaec:	f0 16 00 04 	mcall	r6[16]
					dbg_print("\n");
8001aaf0:	fe cc 08 04 	sub	r12,pc,2052
8001aaf4:	f0 16 00 01 	mcall	r6[4]
					goto reset;
8001aaf8:	fe 9f fd 3e 	bral	8001a574 <ubx_read+0x2e>
				dbg_print(" of size ");
				dbg_print_num(payload_length,10);
				dbg_print("\n");
				goto reset;	
			}		
			break;
8001aafc:	e0 8f 03 93 	bral	8001b222 <ubx_read+0xcdc>
					dbg_print(" of size ");
					dbg_print_num(payload_length,10);
					dbg_print("\n");
					goto reset;
				}	
			}else if(ubxclass == UBX_CLASS_CFG)
8001ab00:	ec f8 00 60 	ld.w	r8,r6[96]
8001ab04:	11 89       	ld.ub	r9,r8[0x0]
8001ab06:	30 68       	mov	r8,6
8001ab08:	f0 09 18 00 	cp.b	r9,r8
8001ab0c:	e0 81 01 1d 	brne	8001ad46 <ubx_read+0x800>
// 				dbg_print_num(msg_id,16);
// 				dbg_print("payload_length :");
// 				dbg_print_num(payload_length,10);
// 				dbg_print("\n");
				
				switch(msg_id)
8001ab10:	ec f8 00 5c 	ld.w	r8,r6[92]
8001ab14:	11 88       	ld.ub	r8,r8[0x0]
8001ab16:	58 88       	cp.w	r8,8
8001ab18:	c5 30       	breq	8001abbe <ubx_read+0x678>
8001ab1a:	e0 48 00 24 	cp.w	r8,36
8001ab1e:	c0 50       	breq	8001ab28 <ubx_read+0x5e2>
8001ab20:	58 18       	cp.w	r8,1
8001ab22:	e0 80 00 99 	breq	8001ac54 <ubx_read+0x70e>
8001ab26:	ce 28       	rjmp	8001acea <ubx_read+0x7a4>
				{			
				case MSG_CFG_NAV_SETTINGS:
					if(payload_length == UBX_SIZE_NAV_SETTINGS)
8001ab28:	ec f8 00 58 	ld.w	r8,r6[88]
8001ab2c:	90 09       	ld.sh	r9,r8[0x0]
8001ab2e:	32 48       	mov	r8,36
8001ab30:	f0 09 19 00 	cp.h	r9,r8
8001ab34:	c1 11       	brne	8001ab56 <ubx_read+0x610>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentNavSettingsMessage;
8001ab36:	ec f9 05 6c 	ld.w	r9,r6[1388]
8001ab3a:	ec f8 00 d4 	ld.w	r8,r6[212]
8001ab3e:	91 09       	st.w	r8[0x0],r9
						ubx_lastMessage = (unsigned char**)&ubx_lastNavSettingsMessage;
8001ab40:	ec f9 04 68 	ld.w	r9,r6[1128]
8001ab44:	ec f8 00 e0 	ld.w	r8,r6[224]
8001ab48:	91 09       	st.w	r8[0x0],r9
						ubx_validMessage = &ubx_numberOfValidNavSettingsMessage;
8001ab4a:	ec f8 00 f8 	ld.w	r8,r6[248]
8001ab4e:	ec f9 04 38 	ld.w	r9,r6[1080]
8001ab52:	91 09       	st.w	r8[0x0],r9
						dbg_print_num(UBX_SIZE_NAV_SETTINGS,10);
						dbg_print("\n");
						step = 0;
						goto reset;
					}
					break;		
8001ab54:	cf 78       	rjmp	8001ad42 <ubx_read+0x7fc>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentNavSettingsMessage;
						ubx_lastMessage = (unsigned char**)&ubx_lastNavSettingsMessage;
						ubx_validMessage = &ubx_numberOfValidNavSettingsMessage;
					}else{
						dbg_print("Wrong Nav Settings message 0x");
8001ab56:	fe cc 07 7a 	sub	r12,pc,1914
8001ab5a:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(ubxclass,16);
8001ab5e:	ec f8 00 60 	ld.w	r8,r6[96]
8001ab62:	11 88       	ld.ub	r8,r8[0x0]
8001ab64:	31 0b       	mov	r11,16
8001ab66:	10 9c       	mov	r12,r8
8001ab68:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Msg id: 0x");
8001ab6c:	fe cc 08 64 	sub	r12,pc,2148
8001ab70:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(msg_id,16);
8001ab74:	ec f8 00 5c 	ld.w	r8,r6[92]
8001ab78:	11 88       	ld.ub	r8,r8[0x0]
8001ab7a:	31 0b       	mov	r11,16
8001ab7c:	10 9c       	mov	r12,r8
8001ab7e:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Received size:");
8001ab82:	fe cc 08 6e 	sub	r12,pc,2158
8001ab86:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(payload_length,10);
8001ab8a:	ec f8 00 58 	ld.w	r8,r6[88]
8001ab8e:	90 08       	ld.sh	r8,r8[0x0]
8001ab90:	5c 78       	castu.h	r8
8001ab92:	30 ab       	mov	r11,10
8001ab94:	10 9c       	mov	r12,r8
8001ab96:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" should be:");
8001ab9a:	fe cc 08 76 	sub	r12,pc,2166
8001ab9e:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(UBX_SIZE_NAV_SETTINGS,10);
8001aba2:	30 ab       	mov	r11,10
8001aba4:	32 4c       	mov	r12,36
8001aba6:	f0 16 00 04 	mcall	r6[16]
						dbg_print("\n");
8001abaa:	fe cc 08 be 	sub	r12,pc,2238
8001abae:	f0 16 00 01 	mcall	r6[4]
						step = 0;
8001abb2:	ec f9 00 4c 	ld.w	r9,r6[76]
8001abb6:	30 08       	mov	r8,0
8001abb8:	b2 88       	st.b	r9[0x0],r8
						goto reset;
8001abba:	fe 9f fc dd 	bral	8001a574 <ubx_read+0x2e>
					}
					break;		
				case MSG_CFG_RATE:
					if(payload_length == UBX_SIZE_CFG_RATE)
8001abbe:	ec f8 00 58 	ld.w	r8,r6[88]
8001abc2:	90 09       	ld.sh	r9,r8[0x0]
8001abc4:	30 68       	mov	r8,6
8001abc6:	f0 09 19 00 	cp.h	r9,r8
8001abca:	c1 11       	brne	8001abec <ubx_read+0x6a6>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentCFGRateMessage;
8001abcc:	ec f9 06 08 	ld.w	r9,r6[1544]
8001abd0:	ec f8 00 d4 	ld.w	r8,r6[212]
8001abd4:	91 09       	st.w	r8[0x0],r9
						ubx_lastMessage = (unsigned char**)&ubx_lastCFGRateMessage;
8001abd6:	ec f9 08 44 	ld.w	r9,r6[2116]
8001abda:	ec f8 00 e0 	ld.w	r8,r6[224]
8001abde:	91 09       	st.w	r8[0x0],r9
						ubx_validMessage = &ubx_numberOfValidCFGRateMessage;
8001abe0:	ec f8 00 f8 	ld.w	r8,r6[248]
8001abe4:	ec f9 06 c4 	ld.w	r9,r6[1732]
8001abe8:	91 09       	st.w	r8[0x0],r9
						dbg_print_num(UBX_SIZE_CFG_RATE,10);
						dbg_print("\n");
						step = 0;
						goto reset;
					}
					break;
8001abea:	ca c8       	rjmp	8001ad42 <ubx_read+0x7fc>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentCFGRateMessage;
						ubx_lastMessage = (unsigned char**)&ubx_lastCFGRateMessage;
						ubx_validMessage = &ubx_numberOfValidCFGRateMessage;
					}else{
						dbg_print("Wrong CFG Rate message 0x");
8001abec:	fe cc 07 f0 	sub	r12,pc,2032
8001abf0:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(ubxclass,16);
8001abf4:	ec f8 00 60 	ld.w	r8,r6[96]
8001abf8:	11 88       	ld.ub	r8,r8[0x0]
8001abfa:	31 0b       	mov	r11,16
8001abfc:	10 9c       	mov	r12,r8
8001abfe:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Msg id: 0x");
8001ac02:	fe cc 08 fa 	sub	r12,pc,2298
8001ac06:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(msg_id,16);
8001ac0a:	ec f8 00 5c 	ld.w	r8,r6[92]
8001ac0e:	11 88       	ld.ub	r8,r8[0x0]
8001ac10:	31 0b       	mov	r11,16
8001ac12:	10 9c       	mov	r12,r8
8001ac14:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Received size:");
8001ac18:	fe cc 09 04 	sub	r12,pc,2308
8001ac1c:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(payload_length,10);
8001ac20:	ec f8 00 58 	ld.w	r8,r6[88]
8001ac24:	90 08       	ld.sh	r8,r8[0x0]
8001ac26:	5c 78       	castu.h	r8
8001ac28:	30 ab       	mov	r11,10
8001ac2a:	10 9c       	mov	r12,r8
8001ac2c:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" should be:");
8001ac30:	fe cc 09 0c 	sub	r12,pc,2316
8001ac34:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(UBX_SIZE_CFG_RATE,10);
8001ac38:	30 ab       	mov	r11,10
8001ac3a:	30 6c       	mov	r12,6
8001ac3c:	f0 16 00 04 	mcall	r6[16]
						dbg_print("\n");
8001ac40:	fe cc 09 54 	sub	r12,pc,2388
8001ac44:	f0 16 00 01 	mcall	r6[4]
						step = 0;
8001ac48:	ec f9 00 4c 	ld.w	r9,r6[76]
8001ac4c:	30 08       	mov	r8,0
8001ac4e:	b2 88       	st.b	r9[0x0],r8
						goto reset;
8001ac50:	fe 9f fc 92 	bral	8001a574 <ubx_read+0x2e>
					}
					break;
				case MSG_CFG_SET_RATE:
					if (payload_length == UBX_SIZE_CFG_GETSET_RATE)
8001ac54:	ec f8 00 58 	ld.w	r8,r6[88]
8001ac58:	90 09       	ld.sh	r9,r8[0x0]
8001ac5a:	30 38       	mov	r8,3
8001ac5c:	f0 09 19 00 	cp.h	r9,r8
8001ac60:	c1 11       	brne	8001ac82 <ubx_read+0x73c>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentCFGSetGetRateMessage;
8001ac62:	ec f9 06 28 	ld.w	r9,r6[1576]
8001ac66:	ec f8 00 d4 	ld.w	r8,r6[212]
8001ac6a:	91 09       	st.w	r8[0x0],r9
						ubx_lastMessage = (unsigned char**)&ubx_lastCFGSetGetRateMessage;
8001ac6c:	ec f9 03 d0 	ld.w	r9,r6[976]
8001ac70:	ec f8 00 e0 	ld.w	r8,r6[224]
8001ac74:	91 09       	st.w	r8[0x0],r9
						ubx_validMessage = &ubx_numberOfValidCFGSetGetRateMessage;
8001ac76:	ec f8 00 f8 	ld.w	r8,r6[248]
8001ac7a:	ec f9 04 98 	ld.w	r9,r6[1176]
8001ac7e:	91 09       	st.w	r8[0x0],r9
						dbg_print_num(UBX_SIZE_CFG_GETSET_RATE,10);
						dbg_print("\n");
						step = 0;
						goto reset;
					}
					break;
8001ac80:	c6 18       	rjmp	8001ad42 <ubx_read+0x7fc>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentCFGSetGetRateMessage;
						ubx_lastMessage = (unsigned char**)&ubx_lastCFGSetGetRateMessage;
						ubx_validMessage = &ubx_numberOfValidCFGSetGetRateMessage;
					}else{
						dbg_print("Wrong CFG Set/get message 0x");
8001ac82:	fe cc 08 6a 	sub	r12,pc,2154
8001ac86:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(ubxclass,16);
8001ac8a:	ec f8 00 60 	ld.w	r8,r6[96]
8001ac8e:	11 88       	ld.ub	r8,r8[0x0]
8001ac90:	31 0b       	mov	r11,16
8001ac92:	10 9c       	mov	r12,r8
8001ac94:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Msg id: 0x");
8001ac98:	fe cc 09 90 	sub	r12,pc,2448
8001ac9c:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(msg_id,16);
8001aca0:	ec f8 00 5c 	ld.w	r8,r6[92]
8001aca4:	11 88       	ld.ub	r8,r8[0x0]
8001aca6:	31 0b       	mov	r11,16
8001aca8:	10 9c       	mov	r12,r8
8001acaa:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Received size:");
8001acae:	fe cc 09 9a 	sub	r12,pc,2458
8001acb2:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(payload_length,10);
8001acb6:	ec f8 00 58 	ld.w	r8,r6[88]
8001acba:	90 08       	ld.sh	r8,r8[0x0]
8001acbc:	5c 78       	castu.h	r8
8001acbe:	30 ab       	mov	r11,10
8001acc0:	10 9c       	mov	r12,r8
8001acc2:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" should be:");
8001acc6:	fe cc 09 a2 	sub	r12,pc,2466
8001acca:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(UBX_SIZE_CFG_GETSET_RATE,10);
8001acce:	30 ab       	mov	r11,10
8001acd0:	30 3c       	mov	r12,3
8001acd2:	f0 16 00 04 	mcall	r6[16]
						dbg_print("\n");
8001acd6:	fe cc 09 ea 	sub	r12,pc,2538
8001acda:	f0 16 00 01 	mcall	r6[4]
						step = 0;
8001acde:	ec f9 00 4c 	ld.w	r9,r6[76]
8001ace2:	30 08       	mov	r8,0
8001ace4:	b2 88       	st.b	r9[0x0],r8
						goto reset;
8001ace6:	fe 9f fc 47 	bral	8001a574 <ubx_read+0x2e>
					}
					break;
				default:
					step = 0;
8001acea:	ec f9 00 4c 	ld.w	r9,r6[76]
8001acee:	30 08       	mov	r8,0
8001acf0:	b2 88       	st.b	r9[0x0],r8
					dbg_print("Unexpected CFG message, Class: 0x");
8001acf2:	fe cc 08 ba 	sub	r12,pc,2234
8001acf6:	f0 16 00 01 	mcall	r6[4]
					dbg_print_num(ubxclass,16);
8001acfa:	ec f8 00 60 	ld.w	r8,r6[96]
8001acfe:	11 88       	ld.ub	r8,r8[0x0]
8001ad00:	31 0b       	mov	r11,16
8001ad02:	10 9c       	mov	r12,r8
8001ad04:	f0 16 00 04 	mcall	r6[16]
					dbg_print(", msg id: 0x");
8001ad08:	fe cc 09 48 	sub	r12,pc,2376
8001ad0c:	f0 16 00 01 	mcall	r6[4]
					dbg_print_num(msg_id,16);
8001ad10:	ec f8 00 5c 	ld.w	r8,r6[92]
8001ad14:	11 88       	ld.ub	r8,r8[0x0]
8001ad16:	31 0b       	mov	r11,16
8001ad18:	10 9c       	mov	r12,r8
8001ad1a:	f0 16 00 04 	mcall	r6[16]
					dbg_print(" of size ");
8001ad1e:	fe cc 09 4e 	sub	r12,pc,2382
8001ad22:	f0 16 00 01 	mcall	r6[4]
					dbg_print_num(payload_length,10);
8001ad26:	ec f8 00 58 	ld.w	r8,r6[88]
8001ad2a:	90 08       	ld.sh	r8,r8[0x0]
8001ad2c:	5c 78       	castu.h	r8
8001ad2e:	30 ab       	mov	r11,10
8001ad30:	10 9c       	mov	r12,r8
8001ad32:	f0 16 00 04 	mcall	r6[16]
					dbg_print("\n");
8001ad36:	fe cc 0a 4a 	sub	r12,pc,2634
8001ad3a:	f0 16 00 01 	mcall	r6[4]
					goto reset;
8001ad3e:	fe 9f fc 1b 	bral	8001a574 <ubx_read+0x2e>
				dbg_print(" of size ");
				dbg_print_num(payload_length,10);
				dbg_print("\n");
				goto reset;	
			}		
			break;
8001ad42:	e0 8f 02 70 	bral	8001b222 <ubx_read+0xcdc>
					dbg_print(" of size ");
					dbg_print_num(payload_length,10);
					dbg_print("\n");
					goto reset;
				}
			} else if (ubxclass == UBX_CLASS_MON)
8001ad46:	ec f8 00 60 	ld.w	r8,r6[96]
8001ad4a:	11 89       	ld.ub	r9,r8[0x0]
8001ad4c:	30 a8       	mov	r8,10
8001ad4e:	f0 09 18 00 	cp.b	r9,r8
8001ad52:	e0 81 00 88 	brne	8001ae62 <ubx_read+0x91c>
			{
 				switch (msg_id)
8001ad56:	ec f8 00 5c 	ld.w	r8,r6[92]
8001ad5a:	11 88       	ld.ub	r8,r8[0x0]
8001ad5c:	e0 48 00 21 	cp.w	r8,33
8001ad60:	c4 d1       	brne	8001adfa <ubx_read+0x8b4>
 				{
 				case MSG_MON_RXR:
 					if(payload_length == UBX_SIZE_MON_RXR)
8001ad62:	ec f8 00 58 	ld.w	r8,r6[88]
8001ad66:	90 09       	ld.sh	r9,r8[0x0]
8001ad68:	30 18       	mov	r8,1
8001ad6a:	f0 09 19 00 	cp.h	r9,r8
8001ad6e:	c1 21       	brne	8001ad92 <ubx_read+0x84c>
 					{
 						ubx_currentMessage = (unsigned char**)&ubx_currentMONRXRMessage;
8001ad70:	ec f9 05 68 	ld.w	r9,r6[1384]
8001ad74:	ec f8 00 d4 	ld.w	r8,r6[212]
8001ad78:	91 09       	st.w	r8[0x0],r9
						ubx_lastMessage = (unsigned char**)&ubx_lastMONRXRMessage;
8001ad7a:	ec f9 03 bc 	ld.w	r9,r6[956]
8001ad7e:	ec f8 00 e0 	ld.w	r8,r6[224]
8001ad82:	91 09       	st.w	r8[0x0],r9
						ubx_validMessage = &ubx_numberOfValidMONRXRMessage;
8001ad84:	ec f8 00 f8 	ld.w	r8,r6[248]
8001ad88:	ec f9 04 7c 	ld.w	r9,r6[1148]
8001ad8c:	91 09       	st.w	r8[0x0],r9
				dbg_print(" of size ");
				dbg_print_num(payload_length,10);
				dbg_print("\n");
				goto reset;	
			}		
			break;
8001ad8e:	e0 8f 02 4a 	bral	8001b222 <ubx_read+0xcdc>
 					{
 						ubx_currentMessage = (unsigned char**)&ubx_currentMONRXRMessage;
						ubx_lastMessage = (unsigned char**)&ubx_lastMONRXRMessage;
						ubx_validMessage = &ubx_numberOfValidMONRXRMessage;
 					}else{
 						dbg_print("Wrong MON RXR message 0x");
8001ad92:	fe cc 09 36 	sub	r12,pc,2358
8001ad96:	f0 16 00 01 	mcall	r6[4]
 						dbg_print_num(ubxclass,16);
8001ad9a:	ec f8 00 60 	ld.w	r8,r6[96]
8001ad9e:	11 88       	ld.ub	r8,r8[0x0]
8001ada0:	31 0b       	mov	r11,16
8001ada2:	10 9c       	mov	r12,r8
8001ada4:	f0 16 00 04 	mcall	r6[16]
 						dbg_print(" Msg id: 0x");
8001ada8:	fe cc 0a a0 	sub	r12,pc,2720
8001adac:	f0 16 00 01 	mcall	r6[4]
 						dbg_print_num(msg_id,16);
8001adb0:	ec f8 00 5c 	ld.w	r8,r6[92]
8001adb4:	11 88       	ld.ub	r8,r8[0x0]
8001adb6:	31 0b       	mov	r11,16
8001adb8:	10 9c       	mov	r12,r8
8001adba:	f0 16 00 04 	mcall	r6[16]
 						dbg_print(" Received size:");
8001adbe:	fe cc 0a aa 	sub	r12,pc,2730
8001adc2:	f0 16 00 01 	mcall	r6[4]
 						dbg_print_num(payload_length,10);
8001adc6:	ec f8 00 58 	ld.w	r8,r6[88]
8001adca:	90 08       	ld.sh	r8,r8[0x0]
8001adcc:	5c 78       	castu.h	r8
8001adce:	30 ab       	mov	r11,10
8001add0:	10 9c       	mov	r12,r8
8001add2:	f0 16 00 04 	mcall	r6[16]
 						dbg_print(" should be:");
8001add6:	fe cc 0a b2 	sub	r12,pc,2738
8001adda:	f0 16 00 01 	mcall	r6[4]
 						dbg_print_num(UBX_SIZE_MON_RXR,10);
8001adde:	30 ab       	mov	r11,10
8001ade0:	30 1c       	mov	r12,1
8001ade2:	f0 16 00 04 	mcall	r6[16]
 						dbg_print("\n");
8001ade6:	fe cc 0a fa 	sub	r12,pc,2810
8001adea:	f0 16 00 01 	mcall	r6[4]
 						step = 0;
8001adee:	ec f9 00 4c 	ld.w	r9,r6[76]
8001adf2:	30 08       	mov	r8,0
8001adf4:	b2 88       	st.b	r9[0x0],r8
 						goto reset;
8001adf6:	fe 9f fb bf 	bral	8001a574 <ubx_read+0x2e>
 					}
					break;
 				default:
 					step = 0;
8001adfa:	ec f9 00 4c 	ld.w	r9,r6[76]
8001adfe:	30 08       	mov	r8,0
8001ae00:	b2 88       	st.b	r9[0x0],r8
 					dbg_print("Unexpected TIM message, Class: 0x");
8001ae02:	fe cc 09 8a 	sub	r12,pc,2442
8001ae06:	f0 16 00 01 	mcall	r6[4]
 					dbg_print_num(ubxclass,16);
8001ae0a:	ec f8 00 60 	ld.w	r8,r6[96]
8001ae0e:	11 88       	ld.ub	r8,r8[0x0]
8001ae10:	31 0b       	mov	r11,16
8001ae12:	10 9c       	mov	r12,r8
8001ae14:	f0 16 00 04 	mcall	r6[16]
 					dbg_print(", msg id: 0x");
8001ae18:	fe cc 0a 58 	sub	r12,pc,2648
8001ae1c:	f0 16 00 01 	mcall	r6[4]
 					dbg_print_num(msg_id,16);
8001ae20:	ec f8 00 5c 	ld.w	r8,r6[92]
8001ae24:	11 88       	ld.ub	r8,r8[0x0]
8001ae26:	31 0b       	mov	r11,16
8001ae28:	10 9c       	mov	r12,r8
8001ae2a:	f0 16 00 04 	mcall	r6[16]
 					dbg_print(" of size ");
8001ae2e:	fe cc 0a 5e 	sub	r12,pc,2654
8001ae32:	f0 16 00 01 	mcall	r6[4]
 					dbg_print_num(payload_length,10);
8001ae36:	ec f8 00 58 	ld.w	r8,r6[88]
8001ae3a:	90 08       	ld.sh	r8,r8[0x0]
8001ae3c:	5c 78       	castu.h	r8
8001ae3e:	30 ab       	mov	r11,10
8001ae40:	10 9c       	mov	r12,r8
8001ae42:	f0 16 00 04 	mcall	r6[16]
					dbg_print(" should be :");
8001ae46:	fe cc 09 aa 	sub	r12,pc,2474
8001ae4a:	f0 16 00 01 	mcall	r6[4]
					dbg_print_num(MSG_MON_RXR,16);
8001ae4e:	31 0b       	mov	r11,16
8001ae50:	32 1c       	mov	r12,33
8001ae52:	f0 16 00 04 	mcall	r6[16]
 					dbg_print("\n");
8001ae56:	fe cc 0b 6a 	sub	r12,pc,2922
8001ae5a:	f0 16 00 01 	mcall	r6[4]
 					goto reset;
8001ae5e:	fe 9f fb 8b 	bral	8001a574 <ubx_read+0x2e>
 				}
				
			} else if(ubxclass == UBX_CLASS_TIM)
8001ae62:	ec f8 00 60 	ld.w	r8,r6[96]
8001ae66:	11 89       	ld.ub	r9,r8[0x0]
8001ae68:	30 d8       	mov	r8,13
8001ae6a:	f0 09 18 00 	cp.b	r9,r8
8001ae6e:	e0 81 00 d5 	brne	8001b018 <ubx_read+0xad2>
			{
				switch(msg_id)
8001ae72:	ec f8 00 5c 	ld.w	r8,r6[92]
8001ae76:	11 88       	ld.ub	r8,r8[0x0]
8001ae78:	58 18       	cp.w	r8,1
8001ae7a:	c0 40       	breq	8001ae82 <ubx_read+0x93c>
8001ae7c:	58 68       	cp.w	r8,6
8001ae7e:	c4 d0       	breq	8001af18 <ubx_read+0x9d2>
8001ae80:	c9 78       	rjmp	8001afae <ubx_read+0xa68>
				{
				case MSG_TIM_TP:
					if (payload_length == UBX_SIZE_TIM_TP)
8001ae82:	ec f8 00 58 	ld.w	r8,r6[88]
8001ae86:	90 09       	ld.sh	r9,r8[0x0]
8001ae88:	31 08       	mov	r8,16
8001ae8a:	f0 09 19 00 	cp.h	r9,r8
8001ae8e:	c1 11       	brne	8001aeb0 <ubx_read+0x96a>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentTimTPMessage;
8001ae90:	ec f9 07 f4 	ld.w	r9,r6[2036]
8001ae94:	ec f8 00 d4 	ld.w	r8,r6[212]
8001ae98:	91 09       	st.w	r8[0x0],r9
						ubx_lastMessage = (unsigned char**)&ubx_lastTimTPMessage;
8001ae9a:	ec f9 03 f8 	ld.w	r9,r6[1016]
8001ae9e:	ec f8 00 e0 	ld.w	r8,r6[224]
8001aea2:	91 09       	st.w	r8[0x0],r9
						ubx_validMessage = &ubx_numberOfValidTimTPMessage;
8001aea4:	ec f8 00 f8 	ld.w	r8,r6[248]
8001aea8:	ec f9 04 3c 	ld.w	r9,r6[1084]
8001aeac:	91 09       	st.w	r8[0x0],r9
						dbg_print_num(UBX_SIZE_TIM_TP,10);
						dbg_print("\n");
						step = 0;
						goto reset;
					}
					break;
8001aeae:	cb 48       	rjmp	8001b016 <ubx_read+0xad0>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentTimTPMessage;
						ubx_lastMessage = (unsigned char**)&ubx_lastTimTPMessage;
						ubx_validMessage = &ubx_numberOfValidTimTPMessage;
					}else{
						dbg_print("Wrong TIM TP message 0x");
8001aeb0:	fe cc 0a 04 	sub	r12,pc,2564
8001aeb4:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(ubxclass,16);
8001aeb8:	ec f8 00 60 	ld.w	r8,r6[96]
8001aebc:	11 88       	ld.ub	r8,r8[0x0]
8001aebe:	31 0b       	mov	r11,16
8001aec0:	10 9c       	mov	r12,r8
8001aec2:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Msg id: 0x");
8001aec6:	fe cc 0b be 	sub	r12,pc,3006
8001aeca:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(msg_id,16);
8001aece:	ec f8 00 5c 	ld.w	r8,r6[92]
8001aed2:	11 88       	ld.ub	r8,r8[0x0]
8001aed4:	31 0b       	mov	r11,16
8001aed6:	10 9c       	mov	r12,r8
8001aed8:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Received size:");
8001aedc:	fe cc 0b c8 	sub	r12,pc,3016
8001aee0:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(payload_length,10);
8001aee4:	ec f8 00 58 	ld.w	r8,r6[88]
8001aee8:	90 08       	ld.sh	r8,r8[0x0]
8001aeea:	5c 78       	castu.h	r8
8001aeec:	30 ab       	mov	r11,10
8001aeee:	10 9c       	mov	r12,r8
8001aef0:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" should be:");
8001aef4:	fe cc 0b d0 	sub	r12,pc,3024
8001aef8:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(UBX_SIZE_TIM_TP,10);
8001aefc:	30 ab       	mov	r11,10
8001aefe:	31 0c       	mov	r12,16
8001af00:	f0 16 00 04 	mcall	r6[16]
						dbg_print("\n");
8001af04:	fe cc 0c 18 	sub	r12,pc,3096
8001af08:	f0 16 00 01 	mcall	r6[4]
						step = 0;
8001af0c:	ec f9 00 4c 	ld.w	r9,r6[76]
8001af10:	30 08       	mov	r8,0
8001af12:	b2 88       	st.b	r9[0x0],r8
						goto reset;
8001af14:	fe 9f fb 30 	bral	8001a574 <ubx_read+0x2e>
					}
					break;
				case MSG_TIM_VRFY:
					if (payload_length == UBX_SIZE_TIM_VRFY)
8001af18:	ec f8 00 58 	ld.w	r8,r6[88]
8001af1c:	90 09       	ld.sh	r9,r8[0x0]
8001af1e:	31 48       	mov	r8,20
8001af20:	f0 09 19 00 	cp.h	r9,r8
8001af24:	c1 11       	brne	8001af46 <ubx_read+0xa00>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentTimVRFYMessage;
8001af26:	ec f9 08 60 	ld.w	r9,r6[2144]
8001af2a:	ec f8 00 d4 	ld.w	r8,r6[212]
8001af2e:	91 09       	st.w	r8[0x0],r9
						ubx_lastMessage = (unsigned char**)&ubx_lastTimVRFYMessage;
8001af30:	ec f9 04 18 	ld.w	r9,r6[1048]
8001af34:	ec f8 00 e0 	ld.w	r8,r6[224]
8001af38:	91 09       	st.w	r8[0x0],r9
						ubx_validMessage = &ubx_numberOfValidTimVRFYMessage;
8001af3a:	ec f8 00 f8 	ld.w	r8,r6[248]
8001af3e:	ec f9 04 44 	ld.w	r9,r6[1092]
8001af42:	91 09       	st.w	r8[0x0],r9
						dbg_print_num(UBX_SIZE_TIM_VRFY,10);
						dbg_print("\n");
						step = 0;
						goto reset;
					}
					break;
8001af44:	c6 98       	rjmp	8001b016 <ubx_read+0xad0>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentTimVRFYMessage;
						ubx_lastMessage = (unsigned char**)&ubx_lastTimVRFYMessage;
						ubx_validMessage = &ubx_numberOfValidTimVRFYMessage;
						}else{
						dbg_print("Wrong TIM VRFY message 0x");
8001af46:	fe cc 0a 82 	sub	r12,pc,2690
8001af4a:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(ubxclass,16);
8001af4e:	ec f8 00 60 	ld.w	r8,r6[96]
8001af52:	11 88       	ld.ub	r8,r8[0x0]
8001af54:	31 0b       	mov	r11,16
8001af56:	10 9c       	mov	r12,r8
8001af58:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Msg id: 0x");
8001af5c:	fe cc 0c 54 	sub	r12,pc,3156
8001af60:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(msg_id,16);
8001af64:	ec f8 00 5c 	ld.w	r8,r6[92]
8001af68:	11 88       	ld.ub	r8,r8[0x0]
8001af6a:	31 0b       	mov	r11,16
8001af6c:	10 9c       	mov	r12,r8
8001af6e:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Received size:");
8001af72:	fe cc 0c 5e 	sub	r12,pc,3166
8001af76:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(payload_length,10);
8001af7a:	ec f8 00 58 	ld.w	r8,r6[88]
8001af7e:	90 08       	ld.sh	r8,r8[0x0]
8001af80:	5c 78       	castu.h	r8
8001af82:	30 ab       	mov	r11,10
8001af84:	10 9c       	mov	r12,r8
8001af86:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" should be:");
8001af8a:	fe cc 0c 66 	sub	r12,pc,3174
8001af8e:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(UBX_SIZE_TIM_VRFY,10);
8001af92:	30 ab       	mov	r11,10
8001af94:	31 4c       	mov	r12,20
8001af96:	f0 16 00 04 	mcall	r6[16]
						dbg_print("\n");
8001af9a:	fe cc 0c ae 	sub	r12,pc,3246
8001af9e:	f0 16 00 01 	mcall	r6[4]
						step = 0;
8001afa2:	ec f9 00 4c 	ld.w	r9,r6[76]
8001afa6:	30 08       	mov	r8,0
8001afa8:	b2 88       	st.b	r9[0x0],r8
						goto reset;
8001afaa:	fe 9f fa e5 	bral	8001a574 <ubx_read+0x2e>
					}
					break;
					
				default:
					step = 0;
8001afae:	ec f9 00 4c 	ld.w	r9,r6[76]
8001afb2:	30 08       	mov	r8,0
8001afb4:	b2 88       	st.b	r9[0x0],r8
					dbg_print("Unexpected TIM message, Class: 0x");
8001afb6:	fe cc 0b 3e 	sub	r12,pc,2878
8001afba:	f0 16 00 01 	mcall	r6[4]
					dbg_print_num(ubxclass,16);
8001afbe:	ec f8 00 60 	ld.w	r8,r6[96]
8001afc2:	11 88       	ld.ub	r8,r8[0x0]
8001afc4:	31 0b       	mov	r11,16
8001afc6:	10 9c       	mov	r12,r8
8001afc8:	f0 16 00 04 	mcall	r6[16]
					dbg_print(", msg id: 0x");
8001afcc:	fe cc 0c 0c 	sub	r12,pc,3084
8001afd0:	f0 16 00 01 	mcall	r6[4]
					dbg_print_num(msg_id,16);
8001afd4:	ec f8 00 5c 	ld.w	r8,r6[92]
8001afd8:	11 88       	ld.ub	r8,r8[0x0]
8001afda:	31 0b       	mov	r11,16
8001afdc:	10 9c       	mov	r12,r8
8001afde:	f0 16 00 04 	mcall	r6[16]
					dbg_print(" of size ");
8001afe2:	fe cc 0c 12 	sub	r12,pc,3090
8001afe6:	f0 16 00 01 	mcall	r6[4]
					dbg_print_num(payload_length,10);
8001afea:	ec f8 00 58 	ld.w	r8,r6[88]
8001afee:	90 08       	ld.sh	r8,r8[0x0]
8001aff0:	5c 78       	castu.h	r8
8001aff2:	30 ab       	mov	r11,10
8001aff4:	10 9c       	mov	r12,r8
8001aff6:	f0 16 00 04 	mcall	r6[16]
					dbg_print(" should be :");
8001affa:	fe cc 0b 5e 	sub	r12,pc,2910
8001affe:	f0 16 00 01 	mcall	r6[4]
					dbg_print_num(MSG_TIM_TP,16);
8001b002:	31 0b       	mov	r11,16
8001b004:	30 1c       	mov	r12,1
8001b006:	f0 16 00 04 	mcall	r6[16]
					dbg_print("\n");
8001b00a:	fe cc 0d 1e 	sub	r12,pc,3358
8001b00e:	f0 16 00 01 	mcall	r6[4]
					goto reset;
8001b012:	fe 9f fa b1 	bral	8001a574 <ubx_read+0x2e>
				dbg_print(" of size ");
				dbg_print_num(payload_length,10);
				dbg_print("\n");
				goto reset;	
			}		
			break;
8001b016:	c0 69       	rjmp	8001b222 <ubx_read+0xcdc>
					dbg_print_num(MSG_TIM_TP,16);
					dbg_print("\n");
					goto reset;
				}
			}else{
				step = 0;
8001b018:	ec f9 00 4c 	ld.w	r9,r6[76]
8001b01c:	30 08       	mov	r8,0
8001b01e:	b2 88       	st.b	r9[0x0],r8
				dbg_print("Unexpected message, Class: 0x");
8001b020:	fe cc 0b 40 	sub	r12,pc,2880
8001b024:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(ubxclass,16);
8001b028:	ec f8 00 60 	ld.w	r8,r6[96]
8001b02c:	11 88       	ld.ub	r8,r8[0x0]
8001b02e:	31 0b       	mov	r11,16
8001b030:	10 9c       	mov	r12,r8
8001b032:	f0 16 00 04 	mcall	r6[16]
				dbg_print(", msg id: 0x");
8001b036:	fe cc 0c 76 	sub	r12,pc,3190
8001b03a:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(msg_id,16);
8001b03e:	ec f8 00 5c 	ld.w	r8,r6[92]
8001b042:	11 88       	ld.ub	r8,r8[0x0]
8001b044:	31 0b       	mov	r11,16
8001b046:	10 9c       	mov	r12,r8
8001b048:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" of size ");
8001b04c:	fe cc 0c 7c 	sub	r12,pc,3196
8001b050:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(payload_length,10);
8001b054:	ec f8 00 58 	ld.w	r8,r6[88]
8001b058:	90 08       	ld.sh	r8,r8[0x0]
8001b05a:	5c 78       	castu.h	r8
8001b05c:	30 ab       	mov	r11,10
8001b05e:	10 9c       	mov	r12,r8
8001b060:	f0 16 00 04 	mcall	r6[16]
				dbg_print("\n");
8001b064:	fe cc 0d 78 	sub	r12,pc,3448
8001b068:	f0 16 00 01 	mcall	r6[4]
				goto reset;	
8001b06c:	fe 9f fa 84 	bral	8001a574 <ubx_read+0x2e>
			}		
			break;
		case 6:
			
			cksum_a += data;
8001b070:	ec f8 00 ac 	ld.w	r8,r6[172]
8001b074:	11 88       	ld.ub	r8,r8[0x0]
8001b076:	ef 39 ff fa 	ld.ub	r9,r7[-6]
8001b07a:	f2 08 00 08 	add	r8,r9,r8
8001b07e:	5c 58       	castu.b	r8
8001b080:	ec f9 00 ac 	ld.w	r9,r6[172]
8001b084:	b2 88       	st.b	r9[0x0],r8
			cksum_b += cksum_a; // checksum byte
8001b086:	ec f8 01 08 	ld.w	r8,r6[264]
8001b08a:	11 89       	ld.ub	r9,r8[0x0]
8001b08c:	ec f8 00 ac 	ld.w	r8,r6[172]
8001b090:	11 88       	ld.ub	r8,r8[0x0]
8001b092:	f2 08 00 08 	add	r8,r9,r8
8001b096:	5c 58       	castu.b	r8
8001b098:	ec f9 01 08 	ld.w	r9,r6[264]
8001b09c:	b2 88       	st.b	r9[0x0],r8
			
			#ifdef BIG_ENDIAN
				(*ubx_currentMessage)[payload_length - 1 - payload_counter] = data;
8001b09e:	ec f8 00 d4 	ld.w	r8,r6[212]
8001b0a2:	70 08       	ld.w	r8,r8[0x0]
8001b0a4:	70 09       	ld.w	r9,r8[0x0]
8001b0a6:	ec f8 00 58 	ld.w	r8,r6[88]
8001b0aa:	90 08       	ld.sh	r8,r8[0x0]
8001b0ac:	5c 78       	castu.h	r8
8001b0ae:	f0 ca 00 01 	sub	r10,r8,1
8001b0b2:	ec f8 01 b0 	ld.w	r8,r6[432]
8001b0b6:	90 08       	ld.sh	r8,r8[0x0]
8001b0b8:	5c 78       	castu.h	r8
8001b0ba:	f4 08 01 08 	sub	r8,r10,r8
8001b0be:	10 09       	add	r9,r8
8001b0c0:	ef 38 ff fa 	ld.ub	r8,r7[-6]
8001b0c4:	b2 88       	st.b	r9[0x0],r8
			#else
				(*ubx_currentMessage)[payload_counter] = data;
			#endif
			
			payload_counter++;
8001b0c6:	ec f8 01 b0 	ld.w	r8,r6[432]
8001b0ca:	90 08       	ld.sh	r8,r8[0x0]
8001b0cc:	2f f8       	sub	r8,-1
8001b0ce:	5c 88       	casts.h	r8
8001b0d0:	ec f9 01 b0 	ld.w	r9,r6[432]
8001b0d4:	b2 08       	st.h	r9[0x0],r8
			
			if (payload_counter == payload_length)
8001b0d6:	ec f8 01 b0 	ld.w	r8,r6[432]
8001b0da:	90 09       	ld.sh	r9,r8[0x0]
8001b0dc:	ec f8 00 58 	ld.w	r8,r6[88]
8001b0e0:	90 08       	ld.sh	r8,r8[0x0]
8001b0e2:	f0 09 19 00 	cp.h	r9,r8
8001b0e6:	e0 81 00 9b 	brne	8001b21c <ubx_read+0xcd6>
			{
				step++;
8001b0ea:	ec f8 00 4c 	ld.w	r8,r6[76]
8001b0ee:	11 88       	ld.ub	r8,r8[0x0]
8001b0f0:	2f f8       	sub	r8,-1
8001b0f2:	5c 58       	castu.b	r8
8001b0f4:	ec f9 00 4c 	ld.w	r9,r6[76]
8001b0f8:	b2 88       	st.b	r9[0x0],r8
			}
			break;
8001b0fa:	c9 48       	rjmp	8001b222 <ubx_read+0xcdc>
		case 7:
			step++;
8001b0fc:	ec f8 00 4c 	ld.w	r8,r6[76]
8001b100:	11 88       	ld.ub	r8,r8[0x0]
8001b102:	2f f8       	sub	r8,-1
8001b104:	5c 58       	castu.b	r8
8001b106:	ec f9 00 4c 	ld.w	r9,r6[76]
8001b10a:	b2 88       	st.b	r9[0x0],r8
			if (cksum_a != data)
8001b10c:	ec f8 00 ac 	ld.w	r8,r6[172]
8001b110:	11 88       	ld.ub	r8,r8[0x0]
8001b112:	ef 39 ff fa 	ld.ub	r9,r7[-6]
8001b116:	f0 09 18 00 	cp.b	r9,r8
8001b11a:	e0 80 00 83 	breq	8001b220 <ubx_read+0xcda>
			{
				dbg_print("bad cksum_a ");
8001b11e:	fe cc 0c 1e 	sub	r12,pc,3102
8001b122:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(data,16);
8001b126:	ef 38 ff fa 	ld.ub	r8,r7[-6]
8001b12a:	31 0b       	mov	r11,16
8001b12c:	10 9c       	mov	r12,r8
8001b12e:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" should be ");
8001b132:	fe cc 0c 22 	sub	r12,pc,3106
8001b136:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(cksum_a,16);
8001b13a:	ec f8 00 ac 	ld.w	r8,r6[172]
8001b13e:	11 88       	ld.ub	r8,r8[0x0]
8001b140:	31 0b       	mov	r11,16
8001b142:	10 9c       	mov	r12,r8
8001b144:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" class : 0x");
8001b148:	fe cc 0c 2c 	sub	r12,pc,3116
8001b14c:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(ubxclass,16);
8001b150:	ec f8 00 60 	ld.w	r8,r6[96]
8001b154:	11 88       	ld.ub	r8,r8[0x0]
8001b156:	31 0b       	mov	r11,16
8001b158:	10 9c       	mov	r12,r8
8001b15a:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" msg_id : 0x");
8001b15e:	fe cc 0c 36 	sub	r12,pc,3126
8001b162:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(msg_id,16);
8001b166:	ec f8 00 5c 	ld.w	r8,r6[92]
8001b16a:	11 88       	ld.ub	r8,r8[0x0]
8001b16c:	31 0b       	mov	r11,16
8001b16e:	10 9c       	mov	r12,r8
8001b170:	f0 16 00 04 	mcall	r6[16]
				dbg_print("\n");
8001b174:	fe cc 0e 88 	sub	r12,pc,3720
8001b178:	f0 16 00 01 	mcall	r6[4]
				step = 0;
8001b17c:	ec f9 00 4c 	ld.w	r9,r6[76]
8001b180:	30 08       	mov	r8,0
8001b182:	b2 88       	st.b	r9[0x0],r8
				goto reset;
8001b184:	fe 9f f9 f8 	bral	8001a574 <ubx_read+0x2e>
			}
			break;
		case 8:
			step=0;
8001b188:	ec f9 00 4c 	ld.w	r9,r6[76]
8001b18c:	30 08       	mov	r8,0
8001b18e:	b2 88       	st.b	r9[0x0],r8
			if (cksum_b != data)
8001b190:	ec f8 01 08 	ld.w	r8,r6[264]
8001b194:	11 88       	ld.ub	r8,r8[0x0]
8001b196:	ef 39 ff fa 	ld.ub	r9,r7[-6]
8001b19a:	f0 09 18 00 	cp.b	r9,r8
8001b19e:	c1 b0       	breq	8001b1d4 <ubx_read+0xc8e>
			{
				dbg_print("bad cksum_b ");
8001b1a0:	fe cc 0c 68 	sub	r12,pc,3176
8001b1a4:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(data,16);
8001b1a8:	ef 38 ff fa 	ld.ub	r8,r7[-6]
8001b1ac:	31 0b       	mov	r11,16
8001b1ae:	10 9c       	mov	r12,r8
8001b1b0:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" should be ");
8001b1b4:	fe cc 0c a4 	sub	r12,pc,3236
8001b1b8:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(cksum_b,16);
8001b1bc:	ec f8 01 08 	ld.w	r8,r6[264]
8001b1c0:	11 88       	ld.ub	r8,r8[0x0]
8001b1c2:	31 0b       	mov	r11,16
8001b1c4:	10 9c       	mov	r12,r8
8001b1c6:	f0 16 00 04 	mcall	r6[16]
				dbg_print("\n");
8001b1ca:	fe cc 0e de 	sub	r12,pc,3806
8001b1ce:	f0 16 00 01 	mcall	r6[4]
				break;
8001b1d2:	c2 88       	rjmp	8001b222 <ubx_read+0xcdc>
			}
			++(*ubx_validMessage);
8001b1d4:	ec f8 00 f8 	ld.w	r8,r6[248]
8001b1d8:	70 08       	ld.w	r8,r8[0x0]
8001b1da:	90 09       	ld.sh	r9,r8[0x0]
8001b1dc:	2f f9       	sub	r9,-1
8001b1de:	5c 89       	casts.h	r9
8001b1e0:	b0 09       	st.h	r8[0x0],r9
			//dbg_print("Valid message");
			
			// swap message buffers, old message is discarded and becomes incoming buffer, new message become valid message (=old)
			temporaryMessageForSwaping = *ubx_currentMessage;
8001b1e2:	ec f8 00 d4 	ld.w	r8,r6[212]
8001b1e6:	70 08       	ld.w	r8,r8[0x0]
8001b1e8:	70 08       	ld.w	r8,r8[0x0]
8001b1ea:	ef 48 ff fc 	st.w	r7[-4],r8
			*ubx_currentMessage = *ubx_lastMessage;
8001b1ee:	ec f8 00 d4 	ld.w	r8,r6[212]
8001b1f2:	70 08       	ld.w	r8,r8[0x0]
8001b1f4:	ec f9 00 e0 	ld.w	r9,r6[224]
8001b1f8:	72 09       	ld.w	r9,r9[0x0]
8001b1fa:	72 09       	ld.w	r9,r9[0x0]
8001b1fc:	91 09       	st.w	r8[0x0],r9
			*ubx_lastMessage = temporaryMessageForSwaping;
8001b1fe:	ec f8 00 e0 	ld.w	r8,r6[224]
8001b202:	70 08       	ld.w	r8,r8[0x0]
8001b204:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001b208:	91 09       	st.w	r8[0x0],r9
			
			if (ubx_process_data())
8001b20a:	f0 16 02 01 	mcall	r6[2052]
8001b20e:	18 98       	mov	r8,r12
8001b210:	58 08       	cp.w	r8,0
8001b212:	c0 80       	breq	8001b222 <ubx_read+0xcdc>
			{
				msg_ok = true;
8001b214:	30 18       	mov	r8,1
8001b216:	ef 68 ff fb 	st.b	r7[-5],r8
8001b21a:	c0 48       	rjmp	8001b222 <ubx_read+0xcdc>
			
			if (payload_counter == payload_length)
			{
				step++;
			}
			break;
8001b21c:	d7 03       	nop
8001b21e:	c0 28       	rjmp	8001b222 <ubx_read+0xcdc>
				dbg_print_num(msg_id,16);
				dbg_print("\n");
				step = 0;
				goto reset;
			}
			break;
8001b220:	d7 03       	nop
	bool msg_ok = false;
	//bool new_message = false;
	
	unsigned char * temporaryMessageForSwaping;
	
	while(buffer_bytes_available(&(centralData->gps_buffer)))
8001b222:	ec f8 00 00 	ld.w	r8,r6[0]
8001b226:	70 08       	ld.w	r8,r8[0x0]
8001b228:	f0 c8 f6 2c 	sub	r8,r8,-2516
8001b22c:	10 9c       	mov	r12,r8
8001b22e:	f0 16 00 2d 	mcall	r6[180]
8001b232:	18 98       	mov	r8,r12
8001b234:	58 08       	cp.w	r8,0
8001b236:	fe 91 f9 94 	brne	8001a55e <ubx_read+0x18>
				msg_ok = true;
			}
		}
		
	}
	return msg_ok;
8001b23a:	ef 38 ff fb 	ld.ub	r8,r7[-5]
}
8001b23e:	10 9c       	mov	r12,r8
8001b240:	2f ed       	sub	sp,-8
8001b242:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001b246:	00 00       	add	r0,r0
8001b248:	80 01       	ld.sh	r1,r0[0x0]
8001b24a:	a3 d6       	cbr	r6,0x3
8001b24c:	4d 53       	lddpc	r3,8001b3a0 <ubx_read+0xe5a>
8001b24e:	47 5f       	lddsp	pc,sp[0x1d4]
8001b250:	4d 4f       	lddpc	pc,8001b3a0 <ubx_read+0xe5a>
8001b252:	4e 20       	lddpc	r0,8001b3d8 <ubx_read+0xe92>
8001b254:	47 50       	lddsp	r0,sp[0x1d4]
8001b256:	53 20       	stdsp	sp[0xc8],r0
8001b258:	61 77       	ld.w	r7,r0[0x5c]
8001b25a:	61 6b       	ld.w	r11,r0[0x58]
8001b25c:	65 0a       	ld.w	r10,r2[0x40]
8001b25e:	00 00       	add	r0,r0
8001b260:	4d 53       	lddpc	r3,8001b3b4 <ubx_read+0xe6e>
8001b262:	47 5f       	lddsp	pc,sp[0x1d4]
8001b264:	54 49       	stdsp	sp[0x110],r9
8001b266:	4d 5f       	lddpc	pc,8001b3b8 <ubx_read+0xe72>
8001b268:	54 50       	stdsp	sp[0x114],r0
8001b26a:	20 47       	sub	r7,4
8001b26c:	50 53       	stdsp	sp[0x14],r3
8001b26e:	20 61       	sub	r1,6
8001b270:	77 61       	ld.w	r1,r11[0x58]
8001b272:	6b 65       	ld.w	r5,r5[0x58]
8001b274:	0a 00       	add	r0,r5
8001b276:	00 00       	add	r0,r0
8001b278:	4d 53       	lddpc	r3,8001b3cc <ubx_read+0xe86>
8001b27a:	47 5f       	lddsp	pc,sp[0x1d4]
8001b27c:	54 49       	stdsp	sp[0x110],r9
8001b27e:	4d 5f       	lddpc	pc,8001b3d0 <ubx_read+0xe8a>
8001b280:	56 52       	stdsp	sp[0x194],r2
8001b282:	46 59       	lddsp	r9,sp[0x194]
8001b284:	00 00       	add	r0,r0
8001b286:	00 00       	add	r0,r0
8001b288:	20 69       	sub	r9,6
8001b28a:	74 6f       	ld.w	pc,r10[0x18]
8001b28c:	77 20       	ld.w	r0,r11[0x48]
8001b28e:	3a 00       	mov	r0,-96
8001b290:	20 66       	sub	r6,6
8001b292:	72 61       	ld.w	r1,r9[0x18]
8001b294:	63 20       	ld.w	r0,r1[0x48]
8001b296:	3a 00       	mov	r0,-96
8001b298:	20 64       	sub	r4,6
8001b29a:	65 6c       	ld.w	r12,r2[0x58]
8001b29c:	74 61       	ld.w	r1,r10[0x18]
8001b29e:	4d 73       	lddpc	r3,8001b3f8 <ubx_read+0xeb2>
8001b2a0:	20 3a       	sub	r10,3
8001b2a2:	00 00       	add	r0,r0
8001b2a4:	20 64       	sub	r4,6
8001b2a6:	65 6c       	ld.w	r12,r2[0x58]
8001b2a8:	74 61       	ld.w	r1,r10[0x18]
8001b2aa:	4e 73       	lddpc	r3,8001b444 <ubx_read+0xefe>
8001b2ac:	20 3a       	sub	r10,3
8001b2ae:	00 00       	add	r0,r0
8001b2b0:	47 6f       	lddsp	pc,sp[0x1d8]
8001b2b2:	74 20       	ld.w	r0,r10[0x8]
8001b2b4:	65 6e       	ld.w	lr,r2[0x58]
8001b2b6:	67 69       	ld.w	r9,r3[0x58]
8001b2b8:	6e 65       	ld.w	r5,r7[0x18]
8001b2ba:	20 73       	sub	r3,7
8001b2bc:	65 74       	ld.w	r4,r2[0x5c]
8001b2be:	74 69       	ld.w	r9,r10[0x18]
8001b2c0:	6e 67       	ld.w	r7,r7[0x18]
8001b2c2:	73 20       	ld.w	r0,r9[0x48]
8001b2c4:	00 00       	add	r0,r0
8001b2c6:	00 00       	add	r0,r0
8001b2c8:	53 65       	stdsp	sp[0xd8],r5
8001b2ca:	6e 64       	ld.w	r4,r7[0x18]
8001b2cc:	20 4e       	sub	lr,4
8001b2ce:	61 76       	ld.w	r6,r0[0x5c]
8001b2d0:	20 73       	sub	r3,7
8001b2d2:	65 74       	ld.w	r4,r2[0x5c]
8001b2d4:	74 69       	ld.w	r9,r10[0x18]
8001b2d6:	6e 67       	ld.w	r7,r7[0x18]
8001b2d8:	73 00       	ld.w	r0,r9[0x40]
8001b2da:	00 00       	add	r0,r0
8001b2dc:	4e 6f       	lddpc	pc,8001b474 <ubx_read+0xf2e>
8001b2de:	20 65       	sub	r5,6
8001b2e0:	6e 67       	ld.w	r7,r7[0x18]
8001b2e2:	69 6e       	ld.w	lr,r4[0x58]
8001b2e4:	65 20       	ld.w	r0,r2[0x48]
8001b2e6:	73 65       	ld.w	r5,r9[0x58]
8001b2e8:	74 74       	ld.w	r4,r10[0x1c]
8001b2ea:	69 6e       	ld.w	lr,r4[0x58]
8001b2ec:	67 73       	ld.w	r3,r3[0x5c]
8001b2ee:	20 72       	sub	r2,7
8001b2f0:	65 63       	ld.w	r3,r2[0x58]
8001b2f2:	65 69       	ld.w	r9,r2[0x58]
8001b2f4:	76 65       	ld.w	r5,r11[0x18]
8001b2f6:	64 20       	ld.w	r0,r2[0x8]
8001b2f8:	00 00       	add	r0,r0
8001b2fa:	00 00       	add	r0,r0
8001b2fc:	4d 65       	lddpc	r5,8001b454 <ubx_read+0xf0e>
8001b2fe:	73 73       	ld.w	r3,r9[0x5c]
8001b300:	61 67       	ld.w	r7,r0[0x58]
8001b302:	65 20       	ld.w	r0,r2[0x48]
8001b304:	43 46       	lddsp	r6,sp[0xd0]
8001b306:	47 20       	lddsp	r0,sp[0x1c8]
8001b308:	52 61       	stdsp	sp[0x98],r1
8001b30a:	74 65       	ld.w	r5,r10[0x18]
8001b30c:	20 30       	sub	r0,3
8001b30e:	78 00       	ld.w	r0,r12[0x0]
8001b310:	55 6e       	stdsp	sp[0x158],lr
8001b312:	65 78       	ld.w	r8,r2[0x5c]
8001b314:	70 65       	ld.w	r5,r8[0x18]
8001b316:	63 74       	ld.w	r4,r1[0x5c]
8001b318:	65 64       	ld.w	r4,r2[0x58]
8001b31a:	20 6d       	sub	sp,24
8001b31c:	65 73       	ld.w	r3,r2[0x5c]
8001b31e:	73 61       	ld.w	r1,r9[0x58]
8001b320:	67 65       	ld.w	r5,r3[0x58]
8001b322:	20 30       	sub	r0,3
8001b324:	78 00       	ld.w	r0,r12[0x0]
8001b326:	00 00       	add	r0,r0
8001b328:	30 32       	mov	r2,3
8001b32a:	78 20       	ld.w	r0,r12[0x8]
8001b32c:	30 78       	mov	r8,7
8001b32e:	00 00       	add	r0,r0
8001b330:	30 32       	mov	r2,3
8001b332:	78 0a       	ld.w	r10,r12[0x0]
8001b334:	00 00       	add	r0,r0
8001b336:	00 00       	add	r0,r0
8001b338:	44 69       	lddsp	r9,sp[0x118]
8001b33a:	73 61       	ld.w	r1,r9[0x58]
8001b33c:	62 6c       	ld.w	r12,r1[0x18]
8001b33e:	69 6e       	ld.w	lr,r4[0x58]
8001b340:	67 20       	ld.w	r0,r3[0x48]
8001b342:	6d 65       	ld.w	r5,r6[0x58]
8001b344:	73 73       	ld.w	r3,r9[0x5c]
8001b346:	61 67       	ld.w	r7,r0[0x58]
8001b348:	65 20       	ld.w	r0,r2[0x48]
8001b34a:	30 78       	mov	r8,7
8001b34c:	00 00       	add	r0,r0
8001b34e:	00 00       	add	r0,r0
8001b350:	4d 53       	lddpc	r3,8001b4a4 <ubx_read+0xf5e>
8001b352:	47 5f       	lddsp	pc,sp[0x1d4]
8001b354:	4e 41       	lddpc	r1,8001b4e4 <ubx_read+0xf9e>
8001b356:	56 5f       	stdsp	sp[0x194],pc
8001b358:	50 4f       	stdsp	sp[0x10],pc
8001b35a:	53 4c       	stdsp	sp[0xd0],r12
8001b35c:	4c 48       	lddpc	r8,8001b46c <ubx_read+0xf26>
8001b35e:	00 00       	add	r0,r0
8001b360:	20 6c       	sub	r12,6
8001b362:	6f 6e       	ld.w	lr,r7[0x58]
8001b364:	67 69       	ld.w	r9,r3[0x58]
8001b366:	74 75       	ld.w	r5,r10[0x1c]
8001b368:	64 65       	ld.w	r5,r2[0x18]
8001b36a:	20 3a       	sub	r10,3
8001b36c:	00 00       	add	r0,r0
8001b36e:	00 00       	add	r0,r0
8001b370:	20 6c       	sub	r12,6
8001b372:	61 74       	ld.w	r4,r0[0x5c]
8001b374:	69 74       	ld.w	r4,r4[0x5c]
8001b376:	75 64       	ld.w	r4,r10[0x58]
8001b378:	65 20       	ld.w	r0,r2[0x48]
8001b37a:	3a 00       	mov	r0,-96
8001b37c:	20 61       	sub	r1,6
8001b37e:	6c 74       	ld.w	r4,r6[0x1c]
8001b380:	5f 65       	srmi	r5
8001b382:	6c 6c       	ld.w	r12,r6[0x18]
8001b384:	69 70       	ld.w	r0,r4[0x5c]
8001b386:	73 20       	ld.w	r0,r9[0x48]
8001b388:	3a 00       	mov	r0,-96
8001b38a:	00 00       	add	r0,r0
8001b38c:	20 61       	sub	r1,6
8001b38e:	6c 74       	ld.w	r4,r6[0x1c]
8001b390:	5f 6d       	srmi	sp
8001b392:	73 6c       	ld.w	r12,r9[0x58]
8001b394:	20 3a       	sub	r10,3
8001b396:	00 00       	add	r0,r0
8001b398:	20 68       	sub	r8,6
8001b39a:	6f 72       	ld.w	r2,r7[0x5c]
8001b39c:	7a 5f       	ld.w	pc,sp[0x14]
8001b39e:	61 63       	ld.w	r3,r0[0x58]
8001b3a0:	63 20       	ld.w	r0,r1[0x48]
8001b3a2:	3a 00       	mov	r0,-96
8001b3a4:	20 76       	sub	r6,7
8001b3a6:	65 72       	ld.w	r2,r2[0x5c]
8001b3a8:	74 5f       	ld.w	pc,r10[0x14]
8001b3aa:	61 63       	ld.w	r3,r0[0x58]
8001b3ac:	63 20       	ld.w	r0,r1[0x48]
8001b3ae:	3a 00       	mov	r0,-96
8001b3b0:	4d 53       	lddpc	r3,8001b504 <ubx_read+0xfbe>
8001b3b2:	47 5f       	lddsp	pc,sp[0x1d4]
8001b3b4:	53 54       	stdsp	sp[0xd4],r4
8001b3b6:	41 54       	lddsp	r4,sp[0x54]
8001b3b8:	55 53       	stdsp	sp[0x154],r3
8001b3ba:	20 66       	sub	r6,6
8001b3bc:	69 78       	ld.w	r8,r4[0x5c]
8001b3be:	5f 74       	srpl	r4
8001b3c0:	79 70       	ld.w	r0,r12[0x5c]
8001b3c2:	65 20       	ld.w	r0,r2[0x48]
8001b3c4:	3d 20       	mov	r0,-46
8001b3c6:	30 78       	mov	r8,7
8001b3c8:	00 00       	add	r0,r0
8001b3ca:	00 00       	add	r0,r0
8001b3cc:	2c 20       	sub	r0,-62
8001b3ce:	75 70       	ld.w	r0,r10[0x5c]
8001b3d0:	74 69       	ld.w	r9,r10[0x18]
8001b3d2:	6d 65       	ld.w	r5,r6[0x58]
8001b3d4:	20 3d       	sub	sp,12
8001b3d6:	00 00       	add	r0,r0
8001b3d8:	4d 53       	lddpc	r3,8001b52c <ubx_process_data+0xe>
8001b3da:	47 5f       	lddsp	pc,sp[0x1d4]
8001b3dc:	53 4f       	stdsp	sp[0xd0],pc
8001b3de:	4c 20       	lddpc	r0,8001b4e4 <ubx_read+0xf9e>
8001b3e0:	00 00       	add	r0,r0
8001b3e2:	00 00       	add	r0,r0
8001b3e4:	69 74       	ld.w	r4,r4[0x5c]
8001b3e6:	6f 77       	ld.w	r7,r7[0x5c]
8001b3e8:	20 3a       	sub	r10,3
8001b3ea:	00 00       	add	r0,r0
8001b3ec:	20 77       	sub	r7,7
8001b3ee:	65 65       	ld.w	r5,r2[0x58]
8001b3f0:	6b 20       	ld.w	r0,r5[0x48]
8001b3f2:	3a 00       	mov	r0,-96
8001b3f4:	20 66       	sub	r6,6
8001b3f6:	69 78       	ld.w	r8,r4[0x5c]
8001b3f8:	5f 74       	srpl	r4
8001b3fa:	79 70       	ld.w	r0,r12[0x5c]
8001b3fc:	65 20       	ld.w	r0,r2[0x48]
8001b3fe:	3d 20       	mov	r0,-46
8001b400:	30 78       	mov	r8,7
8001b402:	30 00       	mov	r0,0
8001b404:	20 70       	sub	r0,7
8001b406:	6f 73       	ld.w	r3,r7[0x5c]
8001b408:	5f 61       	srmi	r1
8001b40a:	63 63       	ld.w	r3,r1[0x58]
8001b40c:	5f 33       	srlo	r3
8001b40e:	64 20       	ld.w	r0,r2[0x8]
8001b410:	3a 00       	mov	r0,-96
8001b412:	00 00       	add	r0,r0
8001b414:	20 65       	sub	r5,6
8001b416:	63 65       	ld.w	r5,r1[0x58]
8001b418:	66 78       	ld.w	r8,r3[0x1c]
8001b41a:	20 3a       	sub	r10,3
8001b41c:	00 00       	add	r0,r0
8001b41e:	00 00       	add	r0,r0
8001b420:	20 65       	sub	r5,6
8001b422:	63 65       	ld.w	r5,r1[0x58]
8001b424:	66 79       	ld.w	r9,r3[0x1c]
8001b426:	20 3a       	sub	r10,3
8001b428:	00 00       	add	r0,r0
8001b42a:	00 00       	add	r0,r0
8001b42c:	20 65       	sub	r5,6
8001b42e:	63 65       	ld.w	r5,r1[0x58]
8001b430:	66 7a       	ld.w	r10,r3[0x1c]
8001b432:	20 3a       	sub	r10,3
8001b434:	00 00       	add	r0,r0
8001b436:	00 00       	add	r0,r0
8001b438:	20 70       	sub	r0,7
8001b43a:	6f 73       	ld.w	r3,r7[0x5c]
8001b43c:	5f 44       	srge	r4
8001b43e:	4f 50       	lddpc	r0,8001b610 <ubx_process_data+0xf2>
8001b440:	20 3a       	sub	r10,3
8001b442:	00 00       	add	r0,r0
8001b444:	20 6e       	sub	lr,6
8001b446:	75 6d       	ld.w	sp,r10[0x58]
8001b448:	20 73       	sub	r3,7
8001b44a:	61 74       	ld.w	r4,r0[0x5c]
8001b44c:	20 3a       	sub	r10,3
8001b44e:	00 00       	add	r0,r0
8001b450:	4d 53       	lddpc	r3,8001b5a4 <ubx_process_data+0x86>
8001b452:	47 5f       	lddsp	pc,sp[0x1d4]
8001b454:	4e 41       	lddpc	r1,8001b5e4 <ubx_process_data+0xc6>
8001b456:	56 5f       	stdsp	sp[0x194],pc
8001b458:	56 45       	stdsp	sp[0x190],r5
8001b45a:	4c 4e       	lddpc	lr,8001b568 <ubx_process_data+0x4a>
8001b45c:	45 44       	lddsp	r4,sp[0x150]
8001b45e:	20 00       	sub	r0,0
8001b460:	20 6e       	sub	lr,6
8001b462:	65 64       	ld.w	r4,r2[0x58]
8001b464:	5f 6e       	srmi	lr
8001b466:	6f 72       	ld.w	r2,r7[0x5c]
8001b468:	74 68       	ld.w	r8,r10[0x18]
8001b46a:	20 3a       	sub	r10,3
8001b46c:	00 00       	add	r0,r0
8001b46e:	00 00       	add	r0,r0
8001b470:	20 6e       	sub	lr,6
8001b472:	65 64       	ld.w	r4,r2[0x58]
8001b474:	5f 65       	srmi	r5
8001b476:	61 73       	ld.w	r3,r0[0x5c]
8001b478:	74 20       	ld.w	r0,r10[0x8]
8001b47a:	3a 00       	mov	r0,-96
8001b47c:	20 6e       	sub	lr,6
8001b47e:	65 64       	ld.w	r4,r2[0x58]
8001b480:	5f 64       	srmi	r4
8001b482:	6f 77       	ld.w	r7,r7[0x5c]
8001b484:	6e 20       	ld.w	r0,r7[0x8]
8001b486:	3a 00       	mov	r0,-96
8001b488:	20 73       	sub	r3,7
8001b48a:	70 65       	ld.w	r5,r8[0x18]
8001b48c:	65 64       	ld.w	r4,r2[0x58]
8001b48e:	5f 33       	srlo	r3
8001b490:	64 20       	ld.w	r0,r2[0x8]
8001b492:	3a 00       	mov	r0,-96
8001b494:	20 68       	sub	r8,6
8001b496:	65 61       	ld.w	r1,r2[0x58]
8001b498:	64 69       	ld.w	r9,r2[0x18]
8001b49a:	6e 67       	ld.w	r7,r7[0x18]
8001b49c:	5f 32       	srlo	r2
8001b49e:	64 20       	ld.w	r0,r2[0x8]
8001b4a0:	3a 00       	mov	r0,-96
8001b4a2:	00 00       	add	r0,r0
8001b4a4:	20 73       	sub	r3,7
8001b4a6:	70 65       	ld.w	r5,r8[0x18]
8001b4a8:	65 64       	ld.w	r4,r2[0x58]
8001b4aa:	5f 61       	srmi	r1
8001b4ac:	63 63       	ld.w	r3,r1[0x58]
8001b4ae:	75 72       	ld.w	r2,r10[0x5c]
8001b4b0:	61 63       	ld.w	r3,r0[0x58]
8001b4b2:	79 20       	ld.w	r0,r12[0x48]
8001b4b4:	3a 00       	mov	r0,-96
8001b4b6:	00 00       	add	r0,r0
8001b4b8:	20 68       	sub	r8,6
8001b4ba:	65 61       	ld.w	r1,r2[0x58]
8001b4bc:	64 69       	ld.w	r9,r2[0x18]
8001b4be:	6e 67       	ld.w	r7,r7[0x18]
8001b4c0:	5f 61       	srmi	r1
8001b4c2:	63 63       	ld.w	r3,r1[0x58]
8001b4c4:	75 72       	ld.w	r2,r10[0x5c]
8001b4c6:	61 63       	ld.w	r3,r0[0x58]
8001b4c8:	79 20       	ld.w	r0,r12[0x48]
8001b4ca:	3a 00       	mov	r0,-96
8001b4cc:	4d 53       	lddpc	r3,8001b620 <ubx_process_data+0x102>
8001b4ce:	47 5f       	lddsp	pc,sp[0x1d4]
8001b4d0:	4e 41       	lddpc	r1,8001b660 <ubx_process_data+0x142>
8001b4d2:	56 5f       	stdsp	sp[0x194],pc
8001b4d4:	53 56       	stdsp	sp[0xd4],r6
8001b4d6:	49 4e       	lddpc	lr,8001b524 <ubx_process_data+0x6>
8001b4d8:	46 4f       	lddsp	pc,sp[0x190]
8001b4da:	2c 20       	sub	r0,-62
8001b4dc:	6e 75       	ld.w	r5,r7[0x1c]
8001b4de:	6d 43       	ld.w	r3,r6[0x50]
8001b4e0:	68 61       	ld.w	r1,r4[0x18]
8001b4e2:	6e 6e       	ld.w	lr,r7[0x18]
8001b4e4:	65 6c       	ld.w	r12,r2[0x58]
8001b4e6:	3a 00       	mov	r0,-96
8001b4e8:	55 6e       	stdsp	sp[0x158],lr
8001b4ea:	65 78       	ld.w	r8,r2[0x5c]
8001b4ec:	70 65       	ld.w	r5,r8[0x18]
8001b4ee:	63 74       	ld.w	r4,r1[0x5c]
8001b4f0:	65 64       	ld.w	r4,r2[0x58]
8001b4f2:	20 4e       	sub	lr,4
8001b4f4:	41 56       	lddsp	r6,sp[0x54]
8001b4f6:	20 6d       	sub	sp,24
8001b4f8:	65 73       	ld.w	r3,r2[0x5c]
8001b4fa:	73 61       	ld.w	r1,r9[0x58]
8001b4fc:	67 65       	ld.w	r5,r3[0x58]
8001b4fe:	20 30       	sub	r0,3
8001b500:	78 00       	ld.w	r0,r12[0x0]
8001b502:	00 00       	add	r0,r0
8001b504:	44 69       	lddsp	r9,sp[0x118]
8001b506:	73 61       	ld.w	r1,r9[0x58]
8001b508:	62 6c       	ld.w	r12,r1[0x18]
8001b50a:	69 6e       	ld.w	lr,r4[0x58]
8001b50c:	67 20       	ld.w	r0,r3[0x48]
8001b50e:	4e 41       	lddpc	r1,8001b69c <ubx_process_data+0x17e>
8001b510:	56 20       	stdsp	sp[0x188],r0
8001b512:	6d 65       	ld.w	r5,r6[0x58]
8001b514:	73 73       	ld.w	r3,r9[0x5c]
8001b516:	61 67       	ld.w	r7,r0[0x58]
8001b518:	65 20       	ld.w	r0,r2[0x48]
8001b51a:	30 78       	mov	r8,7
	...

8001b51e <ubx_process_data>:
Process the new received message, class by class
return true if new position and velocity messages are received, false otherwise
************************************************************************************
*/
bool ubx_process_data(void)
{
8001b51e:	eb cd 40 e0 	pushm	r5-r7,lr
8001b522:	1a 97       	mov	r7,sp
8001b524:	20 ad       	sub	sp,40
8001b526:	fe f6 0a e6 	ld.w	r6,pc[2790]
8001b52a:	1e 26       	rsub	r6,pc
	ubx_nav_velned *gpsVelned;
	ubx_nav_SVInfo *gpsSVInfo;
	
	//dbg_print("ubx_process_data\n");
	
	if (ubxclass == UBX_CLASS_ACK)
8001b52c:	ec f8 00 60 	ld.w	r8,r6[96]
8001b530:	11 89       	ld.ub	r9,r8[0x0]
8001b532:	30 58       	mov	r8,5
8001b534:	f0 09 18 00 	cp.b	r9,r8
8001b538:	c0 f1       	brne	8001b556 <ubx_process_data+0x38>
	{
		dbg_print_num(msg_id,10);
8001b53a:	ec f8 00 5c 	ld.w	r8,r6[92]
8001b53e:	11 88       	ld.ub	r8,r8[0x0]
8001b540:	30 ab       	mov	r11,10
8001b542:	10 9c       	mov	r12,r8
8001b544:	f0 16 00 04 	mcall	r6[16]
		dbg_print("\n");
8001b548:	fe cc 12 5c 	sub	r12,pc,4700
8001b54c:	f0 16 00 01 	mcall	r6[4]
		return false;
8001b550:	30 08       	mov	r8,0
8001b552:	e0 8f 05 58 	bral	8001c002 <ubx_process_data+0xae4>
	}
 	if (ubxclass == UBX_CLASS_MON)
8001b556:	ec f8 00 60 	ld.w	r8,r6[96]
8001b55a:	11 89       	ld.ub	r9,r8[0x0]
8001b55c:	30 a8       	mov	r8,10
8001b55e:	f0 09 18 00 	cp.b	r9,r8
8001b562:	c1 11       	brne	8001b584 <ubx_process_data+0x66>
 	{
 		ubx_mon_rxr_struct *gpsRXR = ubx_GetMonRXR();
8001b564:	f0 16 02 07 	mcall	r6[2076]
8001b568:	18 98       	mov	r8,r12
8001b56a:	ef 48 ff ec 	st.w	r7[-20],r8
 		if (gpsRXR)
8001b56e:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001b572:	58 08       	cp.w	r8,0
8001b574:	c0 50       	breq	8001b57e <ubx_process_data+0x60>
 		{
 			dbg_print("MSG_MON GPS awake\n");
8001b576:	fe cc 03 2a 	sub	r12,pc,810
8001b57a:	f0 16 00 01 	mcall	r6[4]
 		}
		 return false;
8001b57e:	30 08       	mov	r8,0
8001b580:	e0 8f 05 41 	bral	8001c002 <ubx_process_data+0xae4>
 	}
	if (ubxclass == UBX_CLASS_TIM)
8001b584:	ec f8 00 60 	ld.w	r8,r6[96]
8001b588:	11 89       	ld.ub	r9,r8[0x0]
8001b58a:	30 d8       	mov	r8,13
8001b58c:	f0 09 18 00 	cp.b	r9,r8
8001b590:	e0 81 00 89 	brne	8001b6a2 <ubx_process_data+0x184>
	{
		ubx_tim_tp *gpsTimTP = ubx_GetTimTP();
8001b594:	f0 16 01 42 	mcall	r6[1288]
8001b598:	18 98       	mov	r8,r12
8001b59a:	ef 48 ff f0 	st.w	r7[-16],r8
		if (gpsTimTP)
8001b59e:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001b5a2:	58 08       	cp.w	r8,0
8001b5a4:	c2 40       	breq	8001b5ec <ubx_process_data+0xce>
		{
			loopTimTp = ++loopTimTp % numSkippedMsg;
8001b5a6:	ec f8 01 e0 	ld.w	r8,r6[480]
8001b5aa:	11 88       	ld.ub	r8,r8[0x0]
8001b5ac:	2f f8       	sub	r8,-1
8001b5ae:	5c 58       	castu.b	r8
8001b5b0:	ec f9 01 e0 	ld.w	r9,r6[480]
8001b5b4:	b2 88       	st.b	r9[0x0],r8
8001b5b6:	ec f8 01 e0 	ld.w	r8,r6[480]
8001b5ba:	11 88       	ld.ub	r8,r8[0x0]
8001b5bc:	ec f9 01 7c 	ld.w	r9,r6[380]
8001b5c0:	13 89       	ld.ub	r9,r9[0x0]
8001b5c2:	f0 09 0d 08 	divu	r8,r8,r9
8001b5c6:	12 98       	mov	r8,r9
8001b5c8:	5c 58       	castu.b	r8
8001b5ca:	ec f9 01 e0 	ld.w	r9,r6[480]
8001b5ce:	b2 88       	st.b	r9[0x0],r8
			if((printNavOnDebug)&&(loopTimTp == 0))
8001b5d0:	ec f8 01 6c 	ld.w	r8,r6[364]
8001b5d4:	11 88       	ld.ub	r8,r8[0x0]
8001b5d6:	58 08       	cp.w	r8,0
8001b5d8:	c0 a0       	breq	8001b5ec <ubx_process_data+0xce>
8001b5da:	ec f8 01 e0 	ld.w	r8,r6[480]
8001b5de:	11 88       	ld.ub	r8,r8[0x0]
8001b5e0:	58 08       	cp.w	r8,0
8001b5e2:	c0 51       	brne	8001b5ec <ubx_process_data+0xce>
			{
				dbg_print("MSG_TIM_TP GPS awake\n");
8001b5e4:	fe cc 03 84 	sub	r12,pc,900
8001b5e8:	f0 16 00 01 	mcall	r6[4]
			}
		}
		ubx_tim_vrfy *gpsTimVrfy = ubx_GetTimVRFY();
8001b5ec:	f0 16 02 09 	mcall	r6[2084]
8001b5f0:	18 98       	mov	r8,r12
8001b5f2:	ef 48 ff f4 	st.w	r7[-12],r8
		if (gpsTimVrfy)
8001b5f6:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001b5fa:	58 08       	cp.w	r8,0
8001b5fc:	c5 00       	breq	8001b69c <ubx_process_data+0x17e>
		{
			loopTimVrfy = ++loopTimVrfy % numSkippedMsg;
8001b5fe:	ec f8 01 a0 	ld.w	r8,r6[416]
8001b602:	11 88       	ld.ub	r8,r8[0x0]
8001b604:	2f f8       	sub	r8,-1
8001b606:	5c 58       	castu.b	r8
8001b608:	ec f9 01 a0 	ld.w	r9,r6[416]
8001b60c:	b2 88       	st.b	r9[0x0],r8
8001b60e:	ec f8 01 a0 	ld.w	r8,r6[416]
8001b612:	11 88       	ld.ub	r8,r8[0x0]
8001b614:	ec f9 01 7c 	ld.w	r9,r6[380]
8001b618:	13 89       	ld.ub	r9,r9[0x0]
8001b61a:	f0 09 0d 08 	divu	r8,r8,r9
8001b61e:	12 98       	mov	r8,r9
8001b620:	5c 58       	castu.b	r8
8001b622:	ec f9 01 a0 	ld.w	r9,r6[416]
8001b626:	b2 88       	st.b	r9[0x0],r8
			if((printNavOnDebug)&&(loopTimVrfy == 0))
8001b628:	ec f8 01 6c 	ld.w	r8,r6[364]
8001b62c:	11 88       	ld.ub	r8,r8[0x0]
8001b62e:	58 08       	cp.w	r8,0
8001b630:	c3 60       	breq	8001b69c <ubx_process_data+0x17e>
8001b632:	ec f8 01 a0 	ld.w	r8,r6[416]
8001b636:	11 88       	ld.ub	r8,r8[0x0]
8001b638:	58 08       	cp.w	r8,0
8001b63a:	c3 11       	brne	8001b69c <ubx_process_data+0x17e>
			{
				dbg_print("MSG_TIM_VRFY");
8001b63c:	fe cc 03 c4 	sub	r12,pc,964
8001b640:	f0 16 00 01 	mcall	r6[4]
				dbg_print(" itow :");
8001b644:	fe cc 03 bc 	sub	r12,pc,956
8001b648:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsTimVrfy->itow,10);
8001b64c:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001b650:	70 48       	ld.w	r8,r8[0x10]
8001b652:	30 ab       	mov	r11,10
8001b654:	10 9c       	mov	r12,r8
8001b656:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" frac :");
8001b65a:	fe cc 03 ca 	sub	r12,pc,970
8001b65e:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsTimVrfy->frac,10);
8001b662:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001b666:	70 38       	ld.w	r8,r8[0xc]
8001b668:	30 ab       	mov	r11,10
8001b66a:	10 9c       	mov	r12,r8
8001b66c:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" deltaMs :");
8001b670:	fe cc 03 d8 	sub	r12,pc,984
8001b674:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsTimVrfy->deltaMs,10);
8001b678:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001b67c:	70 28       	ld.w	r8,r8[0x8]
8001b67e:	30 ab       	mov	r11,10
8001b680:	10 9c       	mov	r12,r8
8001b682:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" deltaNs :");
8001b686:	fe cc 03 e2 	sub	r12,pc,994
8001b68a:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsTimVrfy->deltaNs,10);
8001b68e:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001b692:	70 18       	ld.w	r8,r8[0x4]
8001b694:	30 ab       	mov	r11,10
8001b696:	10 9c       	mov	r12,r8
8001b698:	f0 16 00 04 	mcall	r6[16]
			}
			
		}
		return false;
8001b69c:	30 08       	mov	r8,0
8001b69e:	e0 8f 04 b2 	bral	8001c002 <ubx_process_data+0xae4>
	}
	 
	if (ubxclass == UBX_CLASS_CFG && msg_id == MSG_CFG_NAV_SETTINGS)
8001b6a2:	ec f8 00 60 	ld.w	r8,r6[96]
8001b6a6:	11 89       	ld.ub	r9,r8[0x0]
8001b6a8:	30 68       	mov	r8,6
8001b6aa:	f0 09 18 00 	cp.b	r9,r8
8001b6ae:	c5 b1       	brne	8001b764 <ubx_process_data+0x246>
8001b6b0:	ec f8 00 5c 	ld.w	r8,r6[92]
8001b6b4:	11 89       	ld.ub	r9,r8[0x0]
8001b6b6:	32 48       	mov	r8,36
8001b6b8:	f0 09 18 00 	cp.b	r9,r8
8001b6bc:	c5 41       	brne	8001b764 <ubx_process_data+0x246>
	{
		ubx_cfg_nav_settings *gpsNavSettings = ubx_GetNavSettings();
8001b6be:	f0 16 01 e2 	mcall	r6[1928]
8001b6c2:	18 98       	mov	r8,r12
8001b6c4:	ef 48 ff f8 	st.w	r7[-8],r8
		- 5 Sea
		- 6 Airborne with <1g Acceleration
		- 7 Airborne with <2g Acceleration
		- 8 Airborne with <4g Acceleration
		*/
		if(gpsNavSettings)
8001b6c8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001b6cc:	58 08       	cp.w	r8,0
8001b6ce:	c1 20       	breq	8001b6f2 <ubx_process_data+0x1d4>
		{
			
			dbg_print("Got engine settings ");
8001b6d0:	fe cc 04 20 	sub	r12,pc,1056
8001b6d4:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(gpsNavSettings->dynModel,16);
8001b6d8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001b6dc:	f1 38 00 21 	ld.ub	r8,r8[33]
8001b6e0:	31 0b       	mov	r11,16
8001b6e2:	10 9c       	mov	r12,r8
8001b6e4:	f0 16 00 04 	mcall	r6[16]
			dbg_print("\n");
8001b6e8:	fe cc 13 fc 	sub	r12,pc,5116
8001b6ec:	f0 16 00 01 	mcall	r6[4]
8001b6f0:	c3 78       	rjmp	8001b75e <ubx_process_data+0x240>
		
		}else{
			if (engine_nav_setting != GPS_ENGINE_NONE && !gpsNavSettings)
8001b6f2:	ec f8 01 bc 	ld.w	r8,r6[444]
8001b6f6:	70 08       	ld.w	r8,r8[0x0]
8001b6f8:	5b f8       	cp.w	r8,-1
8001b6fa:	c2 30       	breq	8001b740 <ubx_process_data+0x222>
8001b6fc:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001b700:	58 08       	cp.w	r8,0
8001b702:	c1 f1       	brne	8001b740 <ubx_process_data+0x222>
			{
				if(gpsNavSettings->dynModel != engine_nav_setting)
8001b704:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001b708:	f1 38 00 21 	ld.ub	r8,r8[33]
8001b70c:	10 99       	mov	r9,r8
8001b70e:	ec f8 01 bc 	ld.w	r8,r6[444]
8001b712:	70 08       	ld.w	r8,r8[0x0]
8001b714:	10 39       	cp.w	r9,r8
8001b716:	c1 50       	breq	8001b740 <ubx_process_data+0x222>
				{
					nav_settings.dynModel = engine_nav_setting;
8001b718:	ec f8 01 bc 	ld.w	r8,r6[444]
8001b71c:	70 08       	ld.w	r8,r8[0x0]
8001b71e:	5c 58       	castu.b	r8
8001b720:	ec f9 03 7c 	ld.w	r9,r6[892]
8001b724:	f3 68 00 21 	st.b	r9[33],r8
					dbg_print("Send Nav settings");
8001b728:	fe cc 04 60 	sub	r12,pc,1120
8001b72c:	f0 16 00 01 	mcall	r6[4]
					ubx_send_message_nav_settings(UBX_CLASS_CFG,MSG_CFG_NAV_SETTINGS, &nav_settings,sizeof(nav_settings));
8001b730:	ec f8 03 7c 	ld.w	r8,r6[892]
8001b734:	32 49       	mov	r9,36
8001b736:	10 9a       	mov	r10,r8
8001b738:	32 4b       	mov	r11,36
8001b73a:	30 6c       	mov	r12,6
8001b73c:	f0 16 00 f3 	mcall	r6[972]
				}				
			}
			dbg_print("No engine settings received ");
8001b740:	fe cc 04 64 	sub	r12,pc,1124
8001b744:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(msg_id,16);
8001b748:	ec f8 00 5c 	ld.w	r8,r6[92]
8001b74c:	11 88       	ld.ub	r8,r8[0x0]
8001b74e:	31 0b       	mov	r11,16
8001b750:	10 9c       	mov	r12,r8
8001b752:	f0 16 00 04 	mcall	r6[16]
			dbg_print("\n");
8001b756:	fe cc 14 6a 	sub	r12,pc,5226
8001b75a:	f0 16 00 01 	mcall	r6[4]
		}
		return false;
8001b75e:	30 08       	mov	r8,0
8001b760:	e0 8f 04 51 	bral	8001c002 <ubx_process_data+0xae4>
	}
	
	if (ubxclass == UBX_CLASS_CFG && msg_id == MSG_CFG_SET_RATE)
8001b764:	ec f8 00 60 	ld.w	r8,r6[96]
8001b768:	11 89       	ld.ub	r9,r8[0x0]
8001b76a:	30 68       	mov	r8,6
8001b76c:	f0 09 18 00 	cp.b	r9,r8
8001b770:	c3 11       	brne	8001b7d2 <ubx_process_data+0x2b4>
8001b772:	ec f8 00 5c 	ld.w	r8,r6[92]
8001b776:	11 89       	ld.ub	r9,r8[0x0]
8001b778:	30 18       	mov	r8,1
8001b77a:	f0 09 18 00 	cp.b	r9,r8
8001b77e:	c2 a1       	brne	8001b7d2 <ubx_process_data+0x2b4>
	{
		ubx_cfg_msg_rate *gpsMsgRate;
		gpsMsgRate = ubx_GetMsgRate();
8001b780:	f0 16 01 89 	mcall	r6[1572]
8001b784:	18 98       	mov	r8,r12
8001b786:	ef 48 ff fc 	st.w	r7[-4],r8
		
		if (gpsMsgRate)
8001b78a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001b78e:	58 08       	cp.w	r8,0
8001b790:	c1 e0       	breq	8001b7cc <ubx_process_data+0x2ae>
		{
			dbg_print("Message CFG Rate 0x");
8001b792:	fe cc 04 96 	sub	r12,pc,1174
8001b796:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(gpsMsgRate->msg_class,16);
8001b79a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001b79e:	11 a8       	ld.ub	r8,r8[0x2]
8001b7a0:	31 0b       	mov	r11,16
8001b7a2:	10 9c       	mov	r12,r8
8001b7a4:	f0 16 00 04 	mcall	r6[16]
			dbg_print_num(gpsMsgRate->msg_id_rate,16);
8001b7a8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001b7ac:	11 98       	ld.ub	r8,r8[0x1]
8001b7ae:	31 0b       	mov	r11,16
8001b7b0:	10 9c       	mov	r12,r8
8001b7b2:	f0 16 00 04 	mcall	r6[16]
			dbg_print_num(gpsMsgRate->rate,10);
8001b7b6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001b7ba:	11 88       	ld.ub	r8,r8[0x0]
8001b7bc:	30 ab       	mov	r11,10
8001b7be:	10 9c       	mov	r12,r8
8001b7c0:	f0 16 00 04 	mcall	r6[16]
			dbg_print("\n");
8001b7c4:	fe cc 14 d8 	sub	r12,pc,5336
8001b7c8:	f0 16 00 01 	mcall	r6[4]
		}		
		return false;
8001b7cc:	30 08       	mov	r8,0
8001b7ce:	e0 8f 04 1a 	bral	8001c002 <ubx_process_data+0xae4>
	}
	
	if (ubxclass != UBX_CLASS_NAV)
8001b7d2:	ec f8 00 60 	ld.w	r8,r6[96]
8001b7d6:	11 89       	ld.ub	r9,r8[0x0]
8001b7d8:	30 18       	mov	r8,1
8001b7da:	f0 09 18 00 	cp.b	r9,r8
8001b7de:	c5 10       	breq	8001b880 <ubx_process_data+0x362>
	{
		dbg_print("Unexpected message 0x");
8001b7e0:	fe cc 04 d0 	sub	r12,pc,1232
8001b7e4:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(ubxclass,16);
8001b7e8:	ec f8 00 60 	ld.w	r8,r6[96]
8001b7ec:	11 88       	ld.ub	r8,r8[0x0]
8001b7ee:	31 0b       	mov	r11,16
8001b7f0:	10 9c       	mov	r12,r8
8001b7f2:	f0 16 00 04 	mcall	r6[16]
		dbg_print("02x 0x");
8001b7f6:	fe cc 04 ce 	sub	r12,pc,1230
8001b7fa:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(msg_id,10);
8001b7fe:	ec f8 00 5c 	ld.w	r8,r6[92]
8001b802:	11 88       	ld.ub	r8,r8[0x0]
8001b804:	30 ab       	mov	r11,10
8001b806:	10 9c       	mov	r12,r8
8001b808:	f0 16 00 04 	mcall	r6[16]
		dbg_print("02x\n");
8001b80c:	fe cc 04 dc 	sub	r12,pc,1244
8001b810:	f0 16 00 01 	mcall	r6[4]
		if (++disable_counter == 0)
8001b814:	ec f8 01 80 	ld.w	r8,r6[384]
8001b818:	11 88       	ld.ub	r8,r8[0x0]
8001b81a:	2f f8       	sub	r8,-1
8001b81c:	5c 58       	castu.b	r8
8001b81e:	ec f9 01 80 	ld.w	r9,r6[384]
8001b822:	b2 88       	st.b	r9[0x0],r8
8001b824:	ec f8 01 80 	ld.w	r8,r6[384]
8001b828:	11 88       	ld.ub	r8,r8[0x0]
8001b82a:	58 08       	cp.w	r8,0
8001b82c:	c2 71       	brne	8001b87a <ubx_process_data+0x35c>
			// disable future sends of this message id, but
			// only do this every 256 messages, as some
			// message types can't be disabled and we don't
			// want to get into an ack war
			
			dbg_print("Disabling message 0x");
8001b82e:	fe cc 04 f6 	sub	r12,pc,1270
8001b832:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(ubxclass,16);
8001b836:	ec f8 00 60 	ld.w	r8,r6[96]
8001b83a:	11 88       	ld.ub	r8,r8[0x0]
8001b83c:	31 0b       	mov	r11,16
8001b83e:	10 9c       	mov	r12,r8
8001b840:	f0 16 00 04 	mcall	r6[16]
			dbg_print("02x 0x");
8001b844:	fe cc 05 1c 	sub	r12,pc,1308
8001b848:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(msg_id,16);
8001b84c:	ec f8 00 5c 	ld.w	r8,r6[92]
8001b850:	11 88       	ld.ub	r8,r8[0x0]
8001b852:	31 0b       	mov	r11,16
8001b854:	10 9c       	mov	r12,r8
8001b856:	f0 16 00 04 	mcall	r6[16]
			dbg_print("02x\n");
8001b85a:	fe cc 05 2a 	sub	r12,pc,1322
8001b85e:	f0 16 00 01 	mcall	r6[4]
			ubx_configure_message_rate(ubxclass, msg_id, 0);
8001b862:	ec f8 00 5c 	ld.w	r8,r6[92]
8001b866:	11 88       	ld.ub	r8,r8[0x0]
8001b868:	10 99       	mov	r9,r8
8001b86a:	ec f8 00 60 	ld.w	r8,r6[96]
8001b86e:	11 88       	ld.ub	r8,r8[0x0]
8001b870:	30 0a       	mov	r10,0
8001b872:	12 9b       	mov	r11,r9
8001b874:	10 9c       	mov	r12,r8
8001b876:	f0 16 00 57 	mcall	r6[348]
		}
		return false;
8001b87a:	30 08       	mov	r8,0
8001b87c:	e0 8f 03 c3 	bral	8001c002 <ubx_process_data+0xae4>
	}
	
	// Class NAV:
	switch (msg_id)
8001b880:	ec f8 00 5c 	ld.w	r8,r6[92]
8001b884:	11 88       	ld.ub	r8,r8[0x0]
8001b886:	58 68       	cp.w	r8,6
8001b888:	e0 80 01 6f 	breq	8001bb66 <ubx_process_data+0x648>
8001b88c:	e0 89 00 09 	brgt	8001b89e <ubx_process_data+0x380>
8001b890:	58 28       	cp.w	r8,2
8001b892:	c0 f0       	breq	8001b8b0 <ubx_process_data+0x392>
8001b894:	58 38       	cp.w	r8,3
8001b896:	e0 80 01 01 	breq	8001ba98 <ubx_process_data+0x57a>
8001b89a:	e0 8f 03 63 	bral	8001bf60 <ubx_process_data+0xa42>
8001b89e:	59 28       	cp.w	r8,18
8001b8a0:	e0 80 02 2c 	breq	8001bcf8 <ubx_process_data+0x7da>
8001b8a4:	e0 48 00 30 	cp.w	r8,48
8001b8a8:	e0 80 03 3e 	breq	8001bf24 <ubx_process_data+0xa06>
8001b8ac:	e0 8f 03 5a 	bral	8001bf60 <ubx_process_data+0xa42>
	{
	case MSG_NAV_POSLLH:
		gpsPosllh = ubx_GetPosllh();
8001b8b0:	f0 16 01 6a 	mcall	r6[1448]
8001b8b4:	18 98       	mov	r8,r12
8001b8b6:	ef 48 ff d8 	st.w	r7[-40],r8
		if (gpsPosllh)
8001b8ba:	ee f8 ff d8 	ld.w	r8,r7[-40]
8001b8be:	58 08       	cp.w	r8,0
8001b8c0:	e0 80 03 85 	breq	8001bfca <ubx_process_data+0xaac>
		{
			loopPosllh = ++loopPosllh % numSkippedMsg;
8001b8c4:	ec f8 01 d4 	ld.w	r8,r6[468]
8001b8c8:	11 88       	ld.ub	r8,r8[0x0]
8001b8ca:	2f f8       	sub	r8,-1
8001b8cc:	5c 58       	castu.b	r8
8001b8ce:	ec f9 01 d4 	ld.w	r9,r6[468]
8001b8d2:	b2 88       	st.b	r9[0x0],r8
8001b8d4:	ec f8 01 d4 	ld.w	r8,r6[468]
8001b8d8:	11 88       	ld.ub	r8,r8[0x0]
8001b8da:	ec f9 01 7c 	ld.w	r9,r6[380]
8001b8de:	13 89       	ld.ub	r9,r9[0x0]
8001b8e0:	f0 09 0d 08 	divu	r8,r8,r9
8001b8e4:	12 98       	mov	r8,r9
8001b8e6:	5c 58       	castu.b	r8
8001b8e8:	ec f9 01 d4 	ld.w	r9,r6[468]
8001b8ec:	b2 88       	st.b	r9[0x0],r8
			if (printNavOnDebug && (loopPosllh == 0))
8001b8ee:	ec f8 01 6c 	ld.w	r8,r6[364]
8001b8f2:	11 88       	ld.ub	r8,r8[0x0]
8001b8f4:	58 08       	cp.w	r8,0
8001b8f6:	c5 b0       	breq	8001b9ac <ubx_process_data+0x48e>
8001b8f8:	ec f8 01 d4 	ld.w	r8,r6[468]
8001b8fc:	11 88       	ld.ub	r8,r8[0x0]
8001b8fe:	58 08       	cp.w	r8,0
8001b900:	c5 61       	brne	8001b9ac <ubx_process_data+0x48e>
			{
				dbg_print("MSG_NAV_POSLLH");
8001b902:	fe cc 05 b2 	sub	r12,pc,1458
8001b906:	f0 16 00 01 	mcall	r6[4]
				dbg_print(" itow :");
8001b90a:	fe cc 06 82 	sub	r12,pc,1666
8001b90e:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsPosllh->itow,10);
8001b912:	ee f8 ff d8 	ld.w	r8,r7[-40]
8001b916:	70 68       	ld.w	r8,r8[0x18]
8001b918:	30 ab       	mov	r11,10
8001b91a:	10 9c       	mov	r12,r8
8001b91c:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" longitude :");
8001b920:	fe cc 05 c0 	sub	r12,pc,1472
8001b924:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsPosllh->longitude,10);
8001b928:	ee f8 ff d8 	ld.w	r8,r7[-40]
8001b92c:	70 58       	ld.w	r8,r8[0x14]
8001b92e:	30 ab       	mov	r11,10
8001b930:	10 9c       	mov	r12,r8
8001b932:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" latitude :");
8001b936:	fe cc 05 c6 	sub	r12,pc,1478
8001b93a:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsPosllh->latitude,10);
8001b93e:	ee f8 ff d8 	ld.w	r8,r7[-40]
8001b942:	70 48       	ld.w	r8,r8[0x10]
8001b944:	30 ab       	mov	r11,10
8001b946:	10 9c       	mov	r12,r8
8001b948:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" alt_ellips :");
8001b94c:	fe cc 05 d0 	sub	r12,pc,1488
8001b950:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsPosllh->altitude_ellipsoid,10);
8001b954:	ee f8 ff d8 	ld.w	r8,r7[-40]
8001b958:	70 38       	ld.w	r8,r8[0xc]
8001b95a:	30 ab       	mov	r11,10
8001b95c:	10 9c       	mov	r12,r8
8001b95e:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" alt_msl :");
8001b962:	fe cc 05 d6 	sub	r12,pc,1494
8001b966:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsPosllh->altitude_msl,10);
8001b96a:	ee f8 ff d8 	ld.w	r8,r7[-40]
8001b96e:	70 28       	ld.w	r8,r8[0x8]
8001b970:	30 ab       	mov	r11,10
8001b972:	10 9c       	mov	r12,r8
8001b974:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" horz_acc :");
8001b978:	fe cc 05 e0 	sub	r12,pc,1504
8001b97c:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsPosllh->horizontal_accuracy,10);
8001b980:	ee f8 ff d8 	ld.w	r8,r7[-40]
8001b984:	70 18       	ld.w	r8,r8[0x4]
8001b986:	30 ab       	mov	r11,10
8001b988:	10 9c       	mov	r12,r8
8001b98a:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" vert_acc :");
8001b98e:	fe cc 05 ea 	sub	r12,pc,1514
8001b992:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsPosllh->vertical_accuracy,10);
8001b996:	ee f8 ff d8 	ld.w	r8,r7[-40]
8001b99a:	70 08       	ld.w	r8,r8[0x0]
8001b99c:	30 ab       	mov	r11,10
8001b99e:	10 9c       	mov	r12,r8
8001b9a0:	f0 16 00 04 	mcall	r6[16]
				dbg_print("\n");
8001b9a4:	fe cc 16 b8 	sub	r12,pc,5816
8001b9a8:	f0 16 00 01 	mcall	r6[4]
			}
			
			centralData->GPS_data.timegps = gpsPosllh->itow;
8001b9ac:	ec f8 00 00 	ld.w	r8,r6[0]
8001b9b0:	70 08       	ld.w	r8,r8[0x0]
8001b9b2:	ee f9 ff d8 	ld.w	r9,r7[-40]
8001b9b6:	72 69       	ld.w	r9,r9[0x18]
8001b9b8:	f1 49 0b 50 	st.w	r8[2896],r9
			centralData->GPS_data.longitude = gpsPosllh->longitude / 10000000.0;
8001b9bc:	ec f8 00 00 	ld.w	r8,r6[0]
8001b9c0:	70 05       	ld.w	r5,r8[0x0]
8001b9c2:	ee f8 ff d8 	ld.w	r8,r7[-40]
8001b9c6:	70 58       	ld.w	r8,r8[0x14]
8001b9c8:	10 9c       	mov	r12,r8
8001b9ca:	f0 16 00 1a 	mcall	r6[104]
8001b9ce:	30 08       	mov	r8,0
8001b9d0:	e0 69 12 d0 	mov	r9,4816
8001b9d4:	ea 19 41 63 	orh	r9,0x4163
8001b9d8:	f0 16 00 0c 	mcall	r6[48]
8001b9dc:	14 98       	mov	r8,r10
8001b9de:	16 99       	mov	r9,r11
8001b9e0:	ea e9 0b 10 	st.d	r5[2832],r8
			centralData->GPS_data.latitude = gpsPosllh->latitude / 10000000.0;
8001b9e4:	ec f8 00 00 	ld.w	r8,r6[0]
8001b9e8:	70 05       	ld.w	r5,r8[0x0]
8001b9ea:	ee f8 ff d8 	ld.w	r8,r7[-40]
8001b9ee:	70 48       	ld.w	r8,r8[0x10]
8001b9f0:	10 9c       	mov	r12,r8
8001b9f2:	f0 16 00 1a 	mcall	r6[104]
8001b9f6:	30 08       	mov	r8,0
8001b9f8:	e0 69 12 d0 	mov	r9,4816
8001b9fc:	ea 19 41 63 	orh	r9,0x4163
8001ba00:	f0 16 00 0c 	mcall	r6[48]
8001ba04:	14 98       	mov	r8,r10
8001ba06:	16 99       	mov	r9,r11
8001ba08:	ea e9 0b 08 	st.d	r5[2824],r8
			centralData->GPS_data.alt_elips = ((float)gpsPosllh->altitude_ellipsoid) / 1000.0;
8001ba0c:	ec f8 00 00 	ld.w	r8,r6[0]
8001ba10:	70 05       	ld.w	r5,r8[0x0]
8001ba12:	ee f8 ff d8 	ld.w	r8,r7[-40]
8001ba16:	70 38       	ld.w	r8,r8[0xc]
8001ba18:	e5 a6 08 08 	cop	cp0,cr8,cr0,cr8,0x4c
8001ba1c:	fc 1b 44 7a 	movh	r11,0x447a
8001ba20:	10 9c       	mov	r12,r8
8001ba22:	f0 16 00 08 	mcall	r6[32]
8001ba26:	18 98       	mov	r8,r12
8001ba28:	eb 48 0b 1c 	st.w	r5[2844],r8
			centralData->GPS_data.altitude = ((float)gpsPosllh->altitude_msl) / 1000.0;
8001ba2c:	ec f8 00 00 	ld.w	r8,r6[0]
8001ba30:	70 05       	ld.w	r5,r8[0x0]
8001ba32:	ee f8 ff d8 	ld.w	r8,r7[-40]
8001ba36:	70 28       	ld.w	r8,r8[0x8]
8001ba38:	e5 a6 08 08 	cop	cp0,cr8,cr0,cr8,0x4c
8001ba3c:	fc 1b 44 7a 	movh	r11,0x447a
8001ba40:	10 9c       	mov	r12,r8
8001ba42:	f0 16 00 08 	mcall	r6[32]
8001ba46:	18 98       	mov	r8,r12
8001ba48:	eb 48 0b 18 	st.w	r5[2840],r8
			centralData->GPS_data.horizontalAccuracy = ((float)gpsPosllh->horizontal_accuracy) / 1000.0;
8001ba4c:	ec f8 00 00 	ld.w	r8,r6[0]
8001ba50:	70 05       	ld.w	r5,r8[0x0]
8001ba52:	ee f8 ff d8 	ld.w	r8,r7[-40]
8001ba56:	70 18       	ld.w	r8,r8[0x4]
8001ba58:	e5 a4 08 08 	cop	cp0,cr8,cr0,cr8,0x48
8001ba5c:	fc 1b 44 7a 	movh	r11,0x447a
8001ba60:	10 9c       	mov	r12,r8
8001ba62:	f0 16 00 08 	mcall	r6[32]
8001ba66:	18 98       	mov	r8,r12
8001ba68:	eb 48 0b 38 	st.w	r5[2872],r8
			centralData->GPS_data.verticalAccuracy = ((float)gpsPosllh->vertical_accuracy) / 1000.0;
8001ba6c:	ec f8 00 00 	ld.w	r8,r6[0]
8001ba70:	70 05       	ld.w	r5,r8[0x0]
8001ba72:	ee f8 ff d8 	ld.w	r8,r7[-40]
8001ba76:	70 08       	ld.w	r8,r8[0x0]
8001ba78:	e5 a4 08 08 	cop	cp0,cr8,cr0,cr8,0x48
8001ba7c:	fc 1b 44 7a 	movh	r11,0x447a
8001ba80:	10 9c       	mov	r12,r8
8001ba82:	f0 16 00 08 	mcall	r6[32]
8001ba86:	18 98       	mov	r8,r12
8001ba88:	eb 48 0b 3c 	st.w	r5[2876],r8
			//centralData->GPS_data.status = next_fix;
			
			new_position = true;
8001ba8c:	ec f9 02 28 	ld.w	r9,r6[552]
8001ba90:	30 18       	mov	r8,1
8001ba92:	b2 88       	st.b	r9[0x0],r8
		}
		break;
8001ba94:	e0 8f 02 a2 	bral	8001bfd8 <ubx_process_data+0xaba>
	case MSG_NAV_STATUS:
		gpsStatus = ubx_GetStatus();
8001ba98:	f0 16 01 46 	mcall	r6[1304]
8001ba9c:	18 98       	mov	r8,r12
8001ba9e:	ef 48 ff dc 	st.w	r7[-36],r8
		
		if (gpsStatus)
8001baa2:	ee f8 ff dc 	ld.w	r8,r7[-36]
8001baa6:	58 08       	cp.w	r8,0
8001baa8:	e0 80 02 93 	breq	8001bfce <ubx_process_data+0xab0>
		{
			loopStatus = ++loopStatus % numSkippedMsg;
8001baac:	ec f8 01 b4 	ld.w	r8,r6[436]
8001bab0:	11 88       	ld.ub	r8,r8[0x0]
8001bab2:	2f f8       	sub	r8,-1
8001bab4:	5c 58       	castu.b	r8
8001bab6:	ec f9 01 b4 	ld.w	r9,r6[436]
8001baba:	b2 88       	st.b	r9[0x0],r8
8001babc:	ec f8 01 b4 	ld.w	r8,r6[436]
8001bac0:	11 88       	ld.ub	r8,r8[0x0]
8001bac2:	ec f9 01 7c 	ld.w	r9,r6[380]
8001bac6:	13 89       	ld.ub	r9,r9[0x0]
8001bac8:	f0 09 0d 08 	divu	r8,r8,r9
8001bacc:	12 98       	mov	r8,r9
8001bace:	5c 58       	castu.b	r8
8001bad0:	ec f9 01 b4 	ld.w	r9,r6[436]
8001bad4:	b2 88       	st.b	r9[0x0],r8
			if (printNavOnDebug && (loopStatus == 0))
8001bad6:	ec f8 01 6c 	ld.w	r8,r6[364]
8001bada:	11 88       	ld.ub	r8,r8[0x0]
8001badc:	58 08       	cp.w	r8,0
8001bade:	c2 10       	breq	8001bb20 <ubx_process_data+0x602>
8001bae0:	ec f8 01 b4 	ld.w	r8,r6[436]
8001bae4:	11 88       	ld.ub	r8,r8[0x0]
8001bae6:	58 08       	cp.w	r8,0
8001bae8:	c1 c1       	brne	8001bb20 <ubx_process_data+0x602>
			{
				dbg_print("MSG_STATUS fix_type = 0x");
8001baea:	fe cc 07 3a 	sub	r12,pc,1850
8001baee:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsStatus->fix_type,16);
8001baf2:	ee f8 ff dc 	ld.w	r8,r7[-36]
8001baf6:	f1 38 00 0b 	ld.ub	r8,r8[11]
8001bafa:	31 0b       	mov	r11,16
8001bafc:	10 9c       	mov	r12,r8
8001bafe:	f0 16 00 04 	mcall	r6[16]
//	 			dbg_print(" fix_status = 0x");
//	 			dbg_print_num(gpsStatus->fix_status,16);
				dbg_print(", uptime =");
8001bb02:	fe cc 07 36 	sub	r12,pc,1846
8001bb06:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsStatus->uptime,10);
8001bb0a:	ee f8 ff dc 	ld.w	r8,r7[-36]
8001bb0e:	70 08       	ld.w	r8,r8[0x0]
8001bb10:	30 ab       	mov	r11,10
8001bb12:	10 9c       	mov	r12,r8
8001bb14:	f0 16 00 04 	mcall	r6[16]
				dbg_print("\n");
8001bb18:	fe cc 18 2c 	sub	r12,pc,6188
8001bb1c:	f0 16 00 01 	mcall	r6[4]
			}		
		
			//next_fix = (gpsStatus->fix_status & NAV_STATUS_FIX_VALID) && (gpsStatus->fix_type == GPS_FIX_TYPE_3DFIX);
			next_fix = (gpsStatus->fix_type == GPS_FIX_TYPE_3DFIX);
8001bb20:	ee f8 ff dc 	ld.w	r8,r7[-36]
8001bb24:	f1 39 00 0b 	ld.ub	r9,r8[11]
8001bb28:	30 38       	mov	r8,3
8001bb2a:	f0 09 18 00 	cp.b	r9,r8
8001bb2e:	5f 08       	sreq	r8
8001bb30:	5c 58       	castu.b	r8
8001bb32:	ec f9 01 c8 	ld.w	r9,r6[456]
8001bb36:	b2 88       	st.b	r9[0x0],r8
			if (!next_fix)
8001bb38:	ec f8 01 c8 	ld.w	r8,r6[456]
8001bb3c:	11 88       	ld.ub	r8,r8[0x0]
8001bb3e:	ec 18 00 01 	eorl	r8,0x1
8001bb42:	5c 58       	castu.b	r8
8001bb44:	c0 90       	breq	8001bb56 <ubx_process_data+0x638>
			{
				centralData->GPS_data.status = NO_FIX;
8001bb46:	ec f8 00 00 	ld.w	r8,r6[0]
8001bb4a:	70 09       	ld.w	r9,r8[0x0]
8001bb4c:	30 18       	mov	r8,1
8001bb4e:	f3 68 0b 54 	st.b	r9[2900],r8
			}else{
				centralData->GPS_data.status = GPS_OK;
			}
		}
		break;
8001bb52:	e0 8f 02 43 	bral	8001bfd8 <ubx_process_data+0xaba>
			next_fix = (gpsStatus->fix_type == GPS_FIX_TYPE_3DFIX);
			if (!next_fix)
			{
				centralData->GPS_data.status = NO_FIX;
			}else{
				centralData->GPS_data.status = GPS_OK;
8001bb56:	ec f8 00 00 	ld.w	r8,r6[0]
8001bb5a:	70 09       	ld.w	r9,r8[0x0]
8001bb5c:	30 28       	mov	r8,2
8001bb5e:	f3 68 0b 54 	st.b	r9[2900],r8
			}
		}
		break;
8001bb62:	e0 8f 02 3b 	bral	8001bfd8 <ubx_process_data+0xaba>
	case MSG_NAV_SOL:
		gpsSolution = ubx_GetSolution();
8001bb66:	f0 16 01 75 	mcall	r6[1492]
8001bb6a:	18 98       	mov	r8,r12
8001bb6c:	ef 48 ff e0 	st.w	r7[-32],r8
		
		if (gpsSolution)
8001bb70:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001bb74:	58 08       	cp.w	r8,0
8001bb76:	e0 80 02 2e 	breq	8001bfd2 <ubx_process_data+0xab4>
		{
			loopSolution = ++loopSolution % numSkippedMsg;
8001bb7a:	ec f8 01 ac 	ld.w	r8,r6[428]
8001bb7e:	11 88       	ld.ub	r8,r8[0x0]
8001bb80:	2f f8       	sub	r8,-1
8001bb82:	5c 58       	castu.b	r8
8001bb84:	ec f9 01 ac 	ld.w	r9,r6[428]
8001bb88:	b2 88       	st.b	r9[0x0],r8
8001bb8a:	ec f8 01 ac 	ld.w	r8,r6[428]
8001bb8e:	11 88       	ld.ub	r8,r8[0x0]
8001bb90:	ec f9 01 7c 	ld.w	r9,r6[380]
8001bb94:	13 89       	ld.ub	r9,r9[0x0]
8001bb96:	f0 09 0d 08 	divu	r8,r8,r9
8001bb9a:	12 98       	mov	r8,r9
8001bb9c:	5c 58       	castu.b	r8
8001bb9e:	ec f9 01 ac 	ld.w	r9,r6[428]
8001bba2:	b2 88       	st.b	r9[0x0],r8
			if (printNavOnDebug && (loopSolution == 0))
8001bba4:	ec f8 01 6c 	ld.w	r8,r6[364]
8001bba8:	11 88       	ld.ub	r8,r8[0x0]
8001bbaa:	58 08       	cp.w	r8,0
8001bbac:	c7 40       	breq	8001bc94 <ubx_process_data+0x776>
8001bbae:	ec f8 01 ac 	ld.w	r8,r6[428]
8001bbb2:	11 88       	ld.ub	r8,r8[0x0]
8001bbb4:	58 08       	cp.w	r8,0
8001bbb6:	c6 f1       	brne	8001bc94 <ubx_process_data+0x776>
			{
				dbg_print("MSG_SOL ");
8001bbb8:	fe cc 07 e0 	sub	r12,pc,2016
8001bbbc:	f0 16 00 01 	mcall	r6[4]
				dbg_print("itow :");
8001bbc0:	fe cc 07 dc 	sub	r12,pc,2012
8001bbc4:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsSolution->itow,10);
8001bbc8:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001bbcc:	70 c8       	ld.w	r8,r8[0x30]
8001bbce:	30 ab       	mov	r11,10
8001bbd0:	10 9c       	mov	r12,r8
8001bbd2:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" week :");
8001bbd6:	fe cc 07 ea 	sub	r12,pc,2026
8001bbda:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsSolution->week,10);
8001bbde:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001bbe2:	f1 08 00 2a 	ld.sh	r8,r8[42]
8001bbe6:	30 ab       	mov	r11,10
8001bbe8:	10 9c       	mov	r12,r8
8001bbea:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" fix_type = 0x0");
8001bbee:	fe cc 07 fa 	sub	r12,pc,2042
8001bbf2:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsSolution->fix_type,16);
8001bbf6:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001bbfa:	f1 38 00 29 	ld.ub	r8,r8[41]
8001bbfe:	31 0b       	mov	r11,16
8001bc00:	10 9c       	mov	r12,r8
8001bc02:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" pos_acc_3d :");
8001bc06:	fe cc 08 02 	sub	r12,pc,2050
8001bc0a:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsSolution->position_accuracy_3d,10);
8001bc0e:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001bc12:	70 68       	ld.w	r8,r8[0x18]
8001bc14:	30 ab       	mov	r11,10
8001bc16:	10 9c       	mov	r12,r8
8001bc18:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" ecefx :");
8001bc1c:	fe cc 08 08 	sub	r12,pc,2056
8001bc20:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsSolution->ecef_x,10);
8001bc24:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001bc28:	70 98       	ld.w	r8,r8[0x24]
8001bc2a:	30 ab       	mov	r11,10
8001bc2c:	10 9c       	mov	r12,r8
8001bc2e:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" ecefy :");
8001bc32:	fe cc 08 12 	sub	r12,pc,2066
8001bc36:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsSolution->ecef_y,10);
8001bc3a:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001bc3e:	70 88       	ld.w	r8,r8[0x20]
8001bc40:	30 ab       	mov	r11,10
8001bc42:	10 9c       	mov	r12,r8
8001bc44:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" ecefz :");
8001bc48:	fe cc 08 1c 	sub	r12,pc,2076
8001bc4c:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsSolution->ecef_z,10);
8001bc50:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001bc54:	70 78       	ld.w	r8,r8[0x1c]
8001bc56:	30 ab       	mov	r11,10
8001bc58:	10 9c       	mov	r12,r8
8001bc5a:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" pos_DOP :");
8001bc5e:	fe cc 08 26 	sub	r12,pc,2086
8001bc62:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsSolution->position_DOP,10);
8001bc66:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001bc6a:	90 38       	ld.sh	r8,r8[0x6]
8001bc6c:	5c 78       	castu.h	r8
8001bc6e:	30 ab       	mov	r11,10
8001bc70:	10 9c       	mov	r12,r8
8001bc72:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" num sat :");
8001bc76:	fe cc 08 32 	sub	r12,pc,2098
8001bc7a:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsSolution->satellites,10);
8001bc7e:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001bc82:	11 c8       	ld.ub	r8,r8[0x4]
8001bc84:	30 ab       	mov	r11,10
8001bc86:	10 9c       	mov	r12,r8
8001bc88:	f0 16 00 04 	mcall	r6[16]
				dbg_print("\n");
8001bc8c:	fe cc 19 a0 	sub	r12,pc,6560
8001bc90:	f0 16 00 01 	mcall	r6[4]
			}
			//next_fix = (gpsSolution->fix_status & NAV_STATUS_FIX_VALID) && (gpsSolution->fix_type == GPS_FIX_TYPE_3DFIX);
			next_fix = (gpsSolution->fix_type == GPS_FIX_TYPE_3DFIX);
8001bc94:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001bc98:	f1 39 00 29 	ld.ub	r9,r8[41]
8001bc9c:	30 38       	mov	r8,3
8001bc9e:	f0 09 18 00 	cp.b	r9,r8
8001bca2:	5f 08       	sreq	r8
8001bca4:	5c 58       	castu.b	r8
8001bca6:	ec f9 01 c8 	ld.w	r9,r6[456]
8001bcaa:	b2 88       	st.b	r9[0x0],r8
			if (!next_fix)
8001bcac:	ec f8 01 c8 	ld.w	r8,r6[456]
8001bcb0:	11 88       	ld.ub	r8,r8[0x0]
8001bcb2:	ec 18 00 01 	eorl	r8,0x1
8001bcb6:	5c 58       	castu.b	r8
8001bcb8:	c0 80       	breq	8001bcc8 <ubx_process_data+0x7aa>
			{
				centralData->GPS_data.status = NO_FIX;
8001bcba:	ec f8 00 00 	ld.w	r8,r6[0]
8001bcbe:	70 09       	ld.w	r9,r8[0x0]
8001bcc0:	30 18       	mov	r8,1
8001bcc2:	f3 68 0b 54 	st.b	r9[2900],r8
8001bcc6:	c0 78       	rjmp	8001bcd4 <ubx_process_data+0x7b6>
			}else{
				centralData->GPS_data.status = GPS_OK;
8001bcc8:	ec f8 00 00 	ld.w	r8,r6[0]
8001bccc:	70 09       	ld.w	r9,r8[0x0]
8001bcce:	30 28       	mov	r8,2
8001bcd0:	f3 68 0b 54 	st.b	r9[2900],r8
			}
		
			centralData->GPS_data.num_sats = gpsSolution->satellites;
8001bcd4:	ec f8 00 00 	ld.w	r8,r6[0]
8001bcd8:	70 09       	ld.w	r9,r8[0x0]
8001bcda:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001bcde:	11 c8       	ld.ub	r8,r8[0x4]
8001bce0:	f3 68 0b 48 	st.b	r9[2888],r8
			centralData->GPS_data.hdop = gpsSolution->position_DOP;
8001bce4:	ec f8 00 00 	ld.w	r8,r6[0]
8001bce8:	70 09       	ld.w	r9,r8[0x0]
8001bcea:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001bcee:	90 38       	ld.sh	r8,r8[0x6]
8001bcf0:	f3 58 0b 4a 	st.h	r9[2890],r8
		}
		break;
8001bcf4:	e0 8f 01 72 	bral	8001bfd8 <ubx_process_data+0xaba>
	case MSG_NAV_VELNED:
		gpsVelned = ubx_GetVelned();
8001bcf8:	f0 16 01 56 	mcall	r6[1368]
8001bcfc:	18 98       	mov	r8,r12
8001bcfe:	ef 48 ff e4 	st.w	r7[-28],r8
		
		if (gpsVelned)
8001bd02:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001bd06:	58 08       	cp.w	r8,0
8001bd08:	e0 80 01 67 	breq	8001bfd6 <ubx_process_data+0xab8>
		{
			loopVelned = ++loopVelned % numSkippedMsg;
8001bd0c:	ec f8 01 b8 	ld.w	r8,r6[440]
8001bd10:	11 88       	ld.ub	r8,r8[0x0]
8001bd12:	2f f8       	sub	r8,-1
8001bd14:	5c 58       	castu.b	r8
8001bd16:	ec f9 01 b8 	ld.w	r9,r6[440]
8001bd1a:	b2 88       	st.b	r9[0x0],r8
8001bd1c:	ec f8 01 b8 	ld.w	r8,r6[440]
8001bd20:	11 88       	ld.ub	r8,r8[0x0]
8001bd22:	ec f9 01 7c 	ld.w	r9,r6[380]
8001bd26:	13 89       	ld.ub	r9,r9[0x0]
8001bd28:	f0 09 0d 08 	divu	r8,r8,r9
8001bd2c:	12 98       	mov	r8,r9
8001bd2e:	5c 58       	castu.b	r8
8001bd30:	ec f9 01 b8 	ld.w	r9,r6[440]
8001bd34:	b2 88       	st.b	r9[0x0],r8
			if (printNavOnDebug && (loopVelned == 0))
8001bd36:	ec f8 01 6c 	ld.w	r8,r6[364]
8001bd3a:	11 88       	ld.ub	r8,r8[0x0]
8001bd3c:	58 08       	cp.w	r8,0
8001bd3e:	c6 60       	breq	8001be0a <ubx_process_data+0x8ec>
8001bd40:	ec f8 01 b8 	ld.w	r8,r6[440]
8001bd44:	11 88       	ld.ub	r8,r8[0x0]
8001bd46:	58 08       	cp.w	r8,0
8001bd48:	c6 11       	brne	8001be0a <ubx_process_data+0x8ec>
			{
			
				dbg_print("MSG_NAV_VELNED ");
8001bd4a:	fe cc 08 fa 	sub	r12,pc,2298
8001bd4e:	f0 16 00 01 	mcall	r6[4]
		
				dbg_print("itow :");
8001bd52:	fe cc 09 6e 	sub	r12,pc,2414
8001bd56:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsVelned->itow,10);
8001bd5a:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001bd5e:	70 88       	ld.w	r8,r8[0x20]
8001bd60:	30 ab       	mov	r11,10
8001bd62:	10 9c       	mov	r12,r8
8001bd64:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" ned_north :");
8001bd68:	fe cc 09 08 	sub	r12,pc,2312
8001bd6c:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsVelned->ned_north,10);
8001bd70:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001bd74:	70 78       	ld.w	r8,r8[0x1c]
8001bd76:	30 ab       	mov	r11,10
8001bd78:	10 9c       	mov	r12,r8
8001bd7a:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" ned_east :");
8001bd7e:	fe cc 09 0e 	sub	r12,pc,2318
8001bd82:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsVelned->ned_east,10);
8001bd86:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001bd8a:	70 68       	ld.w	r8,r8[0x18]
8001bd8c:	30 ab       	mov	r11,10
8001bd8e:	10 9c       	mov	r12,r8
8001bd90:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" ned_down :");
8001bd94:	fe cc 09 18 	sub	r12,pc,2328
8001bd98:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsVelned->ned_down,10);
8001bd9c:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001bda0:	70 58       	ld.w	r8,r8[0x14]
8001bda2:	30 ab       	mov	r11,10
8001bda4:	10 9c       	mov	r12,r8
8001bda6:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" speed_3d :");
8001bdaa:	fe cc 09 22 	sub	r12,pc,2338
8001bdae:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsVelned->speed_3d,10);
8001bdb2:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001bdb6:	70 48       	ld.w	r8,r8[0x10]
8001bdb8:	30 ab       	mov	r11,10
8001bdba:	10 9c       	mov	r12,r8
8001bdbc:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" heading_2d :");
8001bdc0:	fe cc 09 2c 	sub	r12,pc,2348
8001bdc4:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsVelned->heading_2d,10);
8001bdc8:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001bdcc:	70 28       	ld.w	r8,r8[0x8]
8001bdce:	30 ab       	mov	r11,10
8001bdd0:	10 9c       	mov	r12,r8
8001bdd2:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" speed_accuracy :");
8001bdd6:	fe cc 09 32 	sub	r12,pc,2354
8001bdda:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsVelned->speed_accuracy,10);
8001bdde:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001bde2:	70 18       	ld.w	r8,r8[0x4]
8001bde4:	30 ab       	mov	r11,10
8001bde6:	10 9c       	mov	r12,r8
8001bde8:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" heading_accuracy :");
8001bdec:	fe cc 09 34 	sub	r12,pc,2356
8001bdf0:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsVelned->heading_accuracy,10);
8001bdf4:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001bdf8:	70 08       	ld.w	r8,r8[0x0]
8001bdfa:	30 ab       	mov	r11,10
8001bdfc:	10 9c       	mov	r12,r8
8001bdfe:	f0 16 00 04 	mcall	r6[16]
				dbg_print("\n");
8001be02:	fe cc 1b 16 	sub	r12,pc,6934
8001be06:	f0 16 00 01 	mcall	r6[4]
			}
			centralData->GPS_data.timegps = gpsVelned->itow;
8001be0a:	ec f8 00 00 	ld.w	r8,r6[0]
8001be0e:	70 08       	ld.w	r8,r8[0x0]
8001be10:	ee f9 ff e4 	ld.w	r9,r7[-28]
8001be14:	72 89       	ld.w	r9,r9[0x20]
8001be16:	f1 49 0b 50 	st.w	r8[2896],r9
			centralData->GPS_data.speed        = ((float)gpsVelned->speed_3d)/100.; // m/s
8001be1a:	ec f8 00 00 	ld.w	r8,r6[0]
8001be1e:	70 05       	ld.w	r5,r8[0x0]
8001be20:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001be24:	70 48       	ld.w	r8,r8[0x10]
8001be26:	e5 a4 08 08 	cop	cp0,cr8,cr0,cr8,0x48
8001be2a:	fc 1b 42 c8 	movh	r11,0x42c8
8001be2e:	10 9c       	mov	r12,r8
8001be30:	f0 16 00 08 	mcall	r6[32]
8001be34:	18 98       	mov	r8,r12
8001be36:	eb 48 0b 20 	st.w	r5[2848],r8
			centralData->GPS_data.groundSpeed = ((float)gpsVelned->groundSpeed_2d) / 100.; // m/s
8001be3a:	ec f8 00 00 	ld.w	r8,r6[0]
8001be3e:	70 05       	ld.w	r5,r8[0x0]
8001be40:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001be44:	70 38       	ld.w	r8,r8[0xc]
8001be46:	e5 a4 08 08 	cop	cp0,cr8,cr0,cr8,0x48
8001be4a:	fc 1b 42 c8 	movh	r11,0x42c8
8001be4e:	10 9c       	mov	r12,r8
8001be50:	f0 16 00 08 	mcall	r6[32]
8001be54:	18 98       	mov	r8,r12
8001be56:	eb 48 0b 24 	st.w	r5[2852],r8
			centralData->GPS_data.course = ((float)gpsVelned->heading_2d) / 100000.; // Heading 2D deg * 100000 rescaled to deg * 100
8001be5a:	ec f8 00 00 	ld.w	r8,r6[0]
8001be5e:	70 05       	ld.w	r5,r8[0x0]
8001be60:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001be64:	70 28       	ld.w	r8,r8[0x8]
8001be66:	e5 a6 08 08 	cop	cp0,cr8,cr0,cr8,0x4c
8001be6a:	e0 6b 50 00 	mov	r11,20480
8001be6e:	ea 1b 47 c3 	orh	r11,0x47c3
8001be72:	10 9c       	mov	r12,r8
8001be74:	f0 16 00 08 	mcall	r6[32]
8001be78:	18 98       	mov	r8,r12
8001be7a:	eb 48 0b 34 	st.w	r5[2868],r8
			have_raw_velocity = true;
8001be7e:	ec f9 03 98 	ld.w	r9,r6[920]
8001be82:	30 18       	mov	r8,1
8001be84:	b2 88       	st.b	r9[0x0],r8
			centralData->GPS_data.northSpeed  = ((float)gpsVelned->ned_north) / 100.0;
8001be86:	ec f8 00 00 	ld.w	r8,r6[0]
8001be8a:	70 05       	ld.w	r5,r8[0x0]
8001be8c:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001be90:	70 78       	ld.w	r8,r8[0x1c]
8001be92:	e5 a6 08 08 	cop	cp0,cr8,cr0,cr8,0x4c
8001be96:	fc 1b 42 c8 	movh	r11,0x42c8
8001be9a:	10 9c       	mov	r12,r8
8001be9c:	f0 16 00 08 	mcall	r6[32]
8001bea0:	18 98       	mov	r8,r12
8001bea2:	eb 48 0b 28 	st.w	r5[2856],r8
			centralData->GPS_data.eastSpeed   = ((float)gpsVelned->ned_east) / 100.;
8001bea6:	ec f8 00 00 	ld.w	r8,r6[0]
8001beaa:	70 05       	ld.w	r5,r8[0x0]
8001beac:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001beb0:	70 68       	ld.w	r8,r8[0x18]
8001beb2:	e5 a6 08 08 	cop	cp0,cr8,cr0,cr8,0x4c
8001beb6:	fc 1b 42 c8 	movh	r11,0x42c8
8001beba:	10 9c       	mov	r12,r8
8001bebc:	f0 16 00 08 	mcall	r6[32]
8001bec0:	18 98       	mov	r8,r12
8001bec2:	eb 48 0b 2c 	st.w	r5[2860],r8
			centralData->GPS_data.verticalSpeed   = ((float)gpsVelned->ned_down) / 100.;
8001bec6:	ec f8 00 00 	ld.w	r8,r6[0]
8001beca:	70 05       	ld.w	r5,r8[0x0]
8001becc:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001bed0:	70 58       	ld.w	r8,r8[0x14]
8001bed2:	e5 a6 08 08 	cop	cp0,cr8,cr0,cr8,0x4c
8001bed6:	fc 1b 42 c8 	movh	r11,0x42c8
8001beda:	10 9c       	mov	r12,r8
8001bedc:	f0 16 00 08 	mcall	r6[32]
8001bee0:	18 98       	mov	r8,r12
8001bee2:	eb 48 0b 30 	st.w	r5[2864],r8
			centralData->GPS_data.speedAccuracy = ((float)gpsVelned->speed_accuracy)/100.;
8001bee6:	ec f8 00 00 	ld.w	r8,r6[0]
8001beea:	70 05       	ld.w	r5,r8[0x0]
8001beec:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001bef0:	70 18       	ld.w	r8,r8[0x4]
8001bef2:	e5 a4 08 08 	cop	cp0,cr8,cr0,cr8,0x48
8001bef6:	fc 1b 42 c8 	movh	r11,0x42c8
8001befa:	10 9c       	mov	r12,r8
8001befc:	f0 16 00 08 	mcall	r6[32]
8001bf00:	18 98       	mov	r8,r12
8001bf02:	eb 48 0b 40 	st.w	r5[2880],r8
			centralData->GPS_data.headingAccuracy = gpsVelned->heading_accuracy;
8001bf06:	ec f8 00 00 	ld.w	r8,r6[0]
8001bf0a:	70 08       	ld.w	r8,r8[0x0]
8001bf0c:	ee f9 ff e4 	ld.w	r9,r7[-28]
8001bf10:	72 09       	ld.w	r9,r9[0x0]
8001bf12:	e5 a4 09 09 	cop	cp0,cr9,cr0,cr9,0x48
8001bf16:	f1 49 0b 44 	st.w	r8[2884],r9
			new_speed = true;
8001bf1a:	ec f9 01 f4 	ld.w	r9,r6[500]
8001bf1e:	30 18       	mov	r8,1
8001bf20:	b2 88       	st.b	r9[0x0],r8
		}
		break;
8001bf22:	c5 b8       	rjmp	8001bfd8 <ubx_process_data+0xaba>
	case MSG_NAV_SVINFO:
		gpsSVInfo = ubx_GetSVInfo();
8001bf24:	f0 16 01 c1 	mcall	r6[1796]
8001bf28:	18 98       	mov	r8,r12
8001bf2a:	ef 48 ff e8 	st.w	r7[-24],r8
		
		if (gpsSVInfo)
8001bf2e:	ee f8 ff e8 	ld.w	r8,r7[-24]
8001bf32:	58 08       	cp.w	r8,0
8001bf34:	c1 60       	breq	8001bf60 <ubx_process_data+0xa42>
		{
			if (printNavOnDebug)
8001bf36:	ec f8 01 6c 	ld.w	r8,r6[364]
8001bf3a:	11 88       	ld.ub	r8,r8[0x0]
8001bf3c:	58 08       	cp.w	r8,0
8001bf3e:	c1 10       	breq	8001bf60 <ubx_process_data+0xa42>
			{
				dbg_print("MSG_NAV_SVINFO, numChannel:");
8001bf40:	fe cc 0a 74 	sub	r12,pc,2676
8001bf44:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsSVInfo->numCh,10);
8001bf48:	ee f8 ff e8 	ld.w	r8,r7[-24]
8001bf4c:	f1 38 00 c3 	ld.ub	r8,r8[195]
8001bf50:	30 ab       	mov	r11,10
8001bf52:	10 9c       	mov	r12,r8
8001bf54:	f0 16 00 04 	mcall	r6[16]
				dbg_print("\n");
8001bf58:	fe cc 1c 6c 	sub	r12,pc,7276
8001bf5c:	f0 16 00 01 	mcall	r6[4]
			}
		}
		
		
	default:
		dbg_print("Unexpected NAV message 0x");
8001bf60:	fe cc 0a 78 	sub	r12,pc,2680
8001bf64:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(msg_id,10);
8001bf68:	ec f8 00 5c 	ld.w	r8,r6[92]
8001bf6c:	11 88       	ld.ub	r8,r8[0x0]
8001bf6e:	30 ab       	mov	r11,10
8001bf70:	10 9c       	mov	r12,r8
8001bf72:	f0 16 00 04 	mcall	r6[16]
		dbg_print("\n");
8001bf76:	fe cc 1c 8a 	sub	r12,pc,7306
8001bf7a:	f0 16 00 01 	mcall	r6[4]
		
		if (++disable_counter == 0) {
8001bf7e:	ec f8 01 80 	ld.w	r8,r6[384]
8001bf82:	11 88       	ld.ub	r8,r8[0x0]
8001bf84:	2f f8       	sub	r8,-1
8001bf86:	5c 58       	castu.b	r8
8001bf88:	ec f9 01 80 	ld.w	r9,r6[384]
8001bf8c:	b2 88       	st.b	r9[0x0],r8
8001bf8e:	ec f8 01 80 	ld.w	r8,r6[384]
8001bf92:	11 88       	ld.ub	r8,r8[0x0]
8001bf94:	58 08       	cp.w	r8,0
8001bf96:	c1 81       	brne	8001bfc6 <ubx_process_data+0xaa8>
			//Debug("Disabling NAV message 0x%02x", (unsigned)_msg_id);
			dbg_print("Disabling NAV message 0x");
8001bf98:	fe cc 0a 94 	sub	r12,pc,2708
8001bf9c:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(msg_id,16);
8001bfa0:	ec f8 00 5c 	ld.w	r8,r6[92]
8001bfa4:	11 88       	ld.ub	r8,r8[0x0]
8001bfa6:	31 0b       	mov	r11,16
8001bfa8:	10 9c       	mov	r12,r8
8001bfaa:	f0 16 00 04 	mcall	r6[16]
			dbg_print("\n");
8001bfae:	fe cc 1c c2 	sub	r12,pc,7362
8001bfb2:	f0 16 00 01 	mcall	r6[4]
			ubx_configure_message_rate(UBX_CLASS_NAV, msg_id, 0);
8001bfb6:	ec f8 00 5c 	ld.w	r8,r6[92]
8001bfba:	11 88       	ld.ub	r8,r8[0x0]
8001bfbc:	30 0a       	mov	r10,0
8001bfbe:	10 9b       	mov	r11,r8
8001bfc0:	30 1c       	mov	r12,1
8001bfc2:	f0 16 00 57 	mcall	r6[348]
		}
		return false;
8001bfc6:	30 08       	mov	r8,0
8001bfc8:	c1 d8       	rjmp	8001c002 <ubx_process_data+0xae4>
			centralData->GPS_data.verticalAccuracy = ((float)gpsPosllh->vertical_accuracy) / 1000.0;
			//centralData->GPS_data.status = next_fix;
			
			new_position = true;
		}
		break;
8001bfca:	d7 03       	nop
8001bfcc:	c0 68       	rjmp	8001bfd8 <ubx_process_data+0xaba>
				centralData->GPS_data.status = NO_FIX;
			}else{
				centralData->GPS_data.status = GPS_OK;
			}
		}
		break;
8001bfce:	d7 03       	nop
8001bfd0:	c0 48       	rjmp	8001bfd8 <ubx_process_data+0xaba>
			}
		
			centralData->GPS_data.num_sats = gpsSolution->satellites;
			centralData->GPS_data.hdop = gpsSolution->position_DOP;
		}
		break;
8001bfd2:	d7 03       	nop
8001bfd4:	c0 28       	rjmp	8001bfd8 <ubx_process_data+0xaba>
			centralData->GPS_data.verticalSpeed   = ((float)gpsVelned->ned_down) / 100.;
			centralData->GPS_data.speedAccuracy = ((float)gpsVelned->speed_accuracy)/100.;
			centralData->GPS_data.headingAccuracy = gpsVelned->heading_accuracy;
			new_speed = true;
		}
		break;
8001bfd6:	d7 03       	nop
		}
		return false;
	}
	// we only return true when we get new position and speed data
	// this ensures we don't use stale data
	if (new_position && new_speed) {
8001bfd8:	ec f8 02 28 	ld.w	r8,r6[552]
8001bfdc:	11 88       	ld.ub	r8,r8[0x0]
8001bfde:	58 08       	cp.w	r8,0
8001bfe0:	c1 00       	breq	8001c000 <ubx_process_data+0xae2>
8001bfe2:	ec f8 01 f4 	ld.w	r8,r6[500]
8001bfe6:	11 88       	ld.ub	r8,r8[0x0]
8001bfe8:	58 08       	cp.w	r8,0
8001bfea:	c0 b0       	breq	8001c000 <ubx_process_data+0xae2>
		new_speed = false;
8001bfec:	ec f9 01 f4 	ld.w	r9,r6[500]
8001bff0:	30 08       	mov	r8,0
8001bff2:	b2 88       	st.b	r9[0x0],r8
		new_position = false;
8001bff4:	ec f9 02 28 	ld.w	r9,r6[552]
8001bff8:	30 08       	mov	r8,0
8001bffa:	b2 88       	st.b	r9[0x0],r8
// 		if (fix_count == 100) {
// 			// ask for nav settings every 20 seconds
// 			dbg_print("Asking for engine setting\n");
// 			ubx_send_message(UBX_CLASS_CFG, MSG_CFG_NAV_SETTINGS, NULL, 0);
// 		}
		return true;
8001bffc:	30 18       	mov	r8,1
8001bffe:	c0 28       	rjmp	8001c002 <ubx_process_data+0xae4>
	}
	return false;
8001c000:	30 08       	mov	r8,0
}
8001c002:	10 9c       	mov	r12,r8
8001c004:	2f 6d       	sub	sp,-40
8001c006:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8001c00a:	00 00       	add	r0,r0
8001c00c:	80 01       	ld.sh	r1,r0[0x0]
8001c00e:	b3 ae       	sbr	lr,0x12

8001c010 <update_checksum>:
************************************************************************************
Checksum update
************************************************************************************
*/
void update_checksum(uint8_t *data, uint8_t len, uint8_t *ck_a, uint8_t *ck_b)
{
8001c010:	eb cd 40 80 	pushm	r7,lr
8001c014:	1a 97       	mov	r7,sp
8001c016:	20 4d       	sub	sp,16
8001c018:	ef 4c ff fc 	st.w	r7[-4],r12
8001c01c:	16 98       	mov	r8,r11
8001c01e:	ef 4a ff f4 	st.w	r7[-12],r10
8001c022:	ef 49 ff f0 	st.w	r7[-16],r9
8001c026:	ef 68 ff f8 	st.b	r7[-8],r8
	while (len--) {
8001c02a:	c1 e8       	rjmp	8001c066 <update_checksum+0x56>
		*ck_a += *data;
8001c02c:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001c030:	11 89       	ld.ub	r9,r8[0x0]
8001c032:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001c036:	11 88       	ld.ub	r8,r8[0x0]
8001c038:	f2 08 00 08 	add	r8,r9,r8
8001c03c:	5c 58       	castu.b	r8
8001c03e:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001c042:	b2 88       	st.b	r9[0x0],r8
		*ck_b += *ck_a;
8001c044:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001c048:	11 89       	ld.ub	r9,r8[0x0]
8001c04a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001c04e:	11 88       	ld.ub	r8,r8[0x0]
8001c050:	f2 08 00 08 	add	r8,r9,r8
8001c054:	5c 58       	castu.b	r8
8001c056:	ee f9 ff f0 	ld.w	r9,r7[-16]
8001c05a:	b2 88       	st.b	r9[0x0],r8
		data++;
8001c05c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001c060:	2f f8       	sub	r8,-1
8001c062:	ef 48 ff fc 	st.w	r7[-4],r8
Checksum update
************************************************************************************
*/
void update_checksum(uint8_t *data, uint8_t len, uint8_t *ck_a, uint8_t *ck_b)
{
	while (len--) {
8001c066:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8001c06a:	30 08       	mov	r8,0
8001c06c:	f0 09 18 00 	cp.b	r9,r8
8001c070:	5f 18       	srne	r8
8001c072:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8001c076:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8001c07a:	20 18       	sub	r8,1
8001c07c:	ef 68 ff f8 	st.b	r7[-8],r8
8001c080:	58 09       	cp.w	r9,0
8001c082:	cd 51       	brne	8001c02c <update_checksum+0x1c>
		*ck_a += *data;
		*ck_b += *ck_a;
		data++;
	}
}
8001c084:	2f cd       	sub	sp,-16
8001c086:	e3 cd 80 80 	ldm	sp++,r7,pc

8001c08a <endian_lower_bytes_uint16>:
To send the lower byte of an uint16_t in the Little Endian format
************************************************************************************
*/

uint8_t endian_lower_bytes_uint16(uint16_t bytes)
{
8001c08a:	eb cd 40 80 	pushm	r7,lr
8001c08e:	1a 97       	mov	r7,sp
8001c090:	20 1d       	sub	sp,4
8001c092:	18 98       	mov	r8,r12
8001c094:	ef 58 ff fc 	st.h	r7[-4],r8
	return (bytes & 0x00FF);
8001c098:	ef 08 ff fc 	ld.sh	r8,r7[-4]
8001c09c:	5c 58       	castu.b	r8
}
8001c09e:	10 9c       	mov	r12,r8
8001c0a0:	2f fd       	sub	sp,-4
8001c0a2:	e3 cd 80 80 	ldm	sp++,r7,pc

8001c0a6 <endian_higher_bytes_uint16>:
************************************************************************************
To send the higher byte of an uint16_t in the Little Endian format
************************************************************************************
*/
uint8_t endian_higher_bytes_uint16(uint16_t bytes)
{
8001c0a6:	eb cd 40 80 	pushm	r7,lr
8001c0aa:	1a 97       	mov	r7,sp
8001c0ac:	20 1d       	sub	sp,4
8001c0ae:	18 98       	mov	r8,r12
8001c0b0:	ef 58 ff fc 	st.h	r7[-4],r8
	return (bytes & 0xFF00)>>8;
8001c0b4:	ef 18 ff fc 	ld.uh	r8,r7[-4]
8001c0b8:	a9 88       	lsr	r8,0x8
8001c0ba:	5c 88       	casts.h	r8
8001c0bc:	5c 58       	castu.b	r8
}
8001c0be:	10 9c       	mov	r12,r8
8001c0c0:	2f fd       	sub	sp,-4
8001c0c2:	e3 cd 80 80 	ldm	sp++,r7,pc

8001c0c6 <ubx_send_header>:
************************************************************************************
To send the UBX header of all messages
************************************************************************************
*/
void ubx_send_header(uint8_t msg_class, uint8_t _msg_id, uint8_t size)
{
8001c0c6:	eb cd 40 c0 	pushm	r6-r7,lr
8001c0ca:	1a 97       	mov	r7,sp
8001c0cc:	20 5d       	sub	sp,20
8001c0ce:	4b 76       	lddpc	r6,8001c1a8 <ubx_send_header+0xe2>
8001c0d0:	1e 26       	rsub	r6,pc
8001c0d2:	16 99       	mov	r9,r11
8001c0d4:	14 98       	mov	r8,r10
8001c0d6:	18 9a       	mov	r10,r12
8001c0d8:	ef 6a ff f4 	st.b	r7[-12],r10
8001c0dc:	ef 69 ff f0 	st.b	r7[-16],r9
8001c0e0:	ef 68 ff ec 	st.b	r7[-20],r8
	ubx_header header;
	header.preamble1		= UBX_PREAMBLE1;
8001c0e4:	3b 58       	mov	r8,-75
8001c0e6:	ef 68 ff ff 	st.b	r7[-1],r8
	header.preamble2		= UBX_PREAMBLE2;
8001c0ea:	36 28       	mov	r8,98
8001c0ec:	ef 68 ff fe 	st.b	r7[-2],r8
	header.msg_class		= msg_class;
8001c0f0:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8001c0f4:	ef 68 ff fd 	st.b	r7[-3],r8
	header.msg_id_header    = _msg_id;
8001c0f8:	ef 38 ff f0 	ld.ub	r8,r7[-16]
8001c0fc:	ef 68 ff fc 	st.b	r7[-4],r8
	header.length			= size;
8001c100:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8001c104:	ef 58 ff fa 	st.h	r7[-6],r8
	//centralData->gps_stream_out.put(centralData->gps_stream_out.data,header.msg_id_header);
	//
	//centralData->gps_stream_out.put(centralData->gps_stream_out.data,(uint8_t) (header.length & 0x0F));
	//centralData->gps_stream_out.put(centralData->gps_stream_out.data,(uint8_t) (header.length & 0xF0)>>8);
	
	putnum(&centralData->gps_stream_out,header.preamble1,16);
8001c108:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8001c10c:	10 99       	mov	r9,r8
8001c10e:	ec f8 00 00 	ld.w	r8,r6[0]
8001c112:	70 08       	ld.w	r8,r8[0x0]
8001c114:	f0 c8 f5 10 	sub	r8,r8,-2800
8001c118:	31 0a       	mov	r10,16
8001c11a:	12 9b       	mov	r11,r9
8001c11c:	10 9c       	mov	r12,r8
8001c11e:	f0 16 00 26 	mcall	r6[152]
	putnum(&centralData->gps_stream_out,header.preamble2,16);
8001c122:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8001c126:	10 99       	mov	r9,r8
8001c128:	ec f8 00 00 	ld.w	r8,r6[0]
8001c12c:	70 08       	ld.w	r8,r8[0x0]
8001c12e:	f0 c8 f5 10 	sub	r8,r8,-2800
8001c132:	31 0a       	mov	r10,16
8001c134:	12 9b       	mov	r11,r9
8001c136:	10 9c       	mov	r12,r8
8001c138:	f0 16 00 26 	mcall	r6[152]
	putnum(&centralData->gps_stream_out,header.msg_class,10);
8001c13c:	ef 38 ff fd 	ld.ub	r8,r7[-3]
8001c140:	10 99       	mov	r9,r8
8001c142:	ec f8 00 00 	ld.w	r8,r6[0]
8001c146:	70 08       	ld.w	r8,r8[0x0]
8001c148:	f0 c8 f5 10 	sub	r8,r8,-2800
8001c14c:	30 aa       	mov	r10,10
8001c14e:	12 9b       	mov	r11,r9
8001c150:	10 9c       	mov	r12,r8
8001c152:	f0 16 00 26 	mcall	r6[152]
	putnum(&centralData->gps_stream_out,header.msg_id_header,16);
8001c156:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8001c15a:	10 99       	mov	r9,r8
8001c15c:	ec f8 00 00 	ld.w	r8,r6[0]
8001c160:	70 08       	ld.w	r8,r8[0x0]
8001c162:	f0 c8 f5 10 	sub	r8,r8,-2800
8001c166:	31 0a       	mov	r10,16
8001c168:	12 9b       	mov	r11,r9
8001c16a:	10 9c       	mov	r12,r8
8001c16c:	f0 16 00 26 	mcall	r6[152]
	
	putnum(&centralData->gps_stream_out,(uint8_t) (header.length & 0x0F),16);
8001c170:	ef 08 ff fa 	ld.sh	r8,r7[-6]
8001c174:	5c 58       	castu.b	r8
8001c176:	f3 d8 c0 04 	bfextu	r9,r8,0x0,0x4
8001c17a:	ec f8 00 00 	ld.w	r8,r6[0]
8001c17e:	70 08       	ld.w	r8,r8[0x0]
8001c180:	f0 c8 f5 10 	sub	r8,r8,-2800
8001c184:	31 0a       	mov	r10,16
8001c186:	12 9b       	mov	r11,r9
8001c188:	10 9c       	mov	r12,r8
8001c18a:	f0 16 00 26 	mcall	r6[152]
	putnum(&centralData->gps_stream_out,(uint8_t) (header.length & 0xF0)>>8,16);
8001c18e:	ec f8 00 00 	ld.w	r8,r6[0]
8001c192:	70 08       	ld.w	r8,r8[0x0]
8001c194:	f0 c8 f5 10 	sub	r8,r8,-2800
8001c198:	31 0a       	mov	r10,16
8001c19a:	30 0b       	mov	r11,0
8001c19c:	10 9c       	mov	r12,r8
8001c19e:	f0 16 00 26 	mcall	r6[152]
	
}
8001c1a2:	2f bd       	sub	sp,-20
8001c1a4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001c1a8:	80 01       	ld.sh	r1,r0[0x0]
8001c1aa:	bf 54       	asr	r4,0x1f

8001c1ac <ubx_send_cksum>:
************************************************************************************
To send the checksum of every message
************************************************************************************
*/
void ubx_send_cksum(uint8_t ck_sum_a, uint8_t ck_sum_b)
{
8001c1ac:	eb cd 40 c0 	pushm	r6-r7,lr
8001c1b0:	1a 97       	mov	r7,sp
8001c1b2:	20 2d       	sub	sp,8
8001c1b4:	49 26       	lddpc	r6,8001c1fc <ubx_send_cksum+0x50>
8001c1b6:	1e 26       	rsub	r6,pc
8001c1b8:	18 99       	mov	r9,r12
8001c1ba:	16 98       	mov	r8,r11
8001c1bc:	ef 69 ff fc 	st.b	r7[-4],r9
8001c1c0:	ef 68 ff f8 	st.b	r7[-8],r8
	//centralData->gps_stream_out.put(centralData->gps_stream_out.data,ck_sum_a);
	//centralData->gps_stream_out.put(centralData->gps_stream_out.data,ck_sum_b);
	
	putnum(&centralData->gps_stream_out,ck_sum_a,16);
8001c1c4:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8001c1c8:	ec f8 00 00 	ld.w	r8,r6[0]
8001c1cc:	70 08       	ld.w	r8,r8[0x0]
8001c1ce:	f0 c8 f5 10 	sub	r8,r8,-2800
8001c1d2:	31 0a       	mov	r10,16
8001c1d4:	12 9b       	mov	r11,r9
8001c1d6:	10 9c       	mov	r12,r8
8001c1d8:	f0 16 00 26 	mcall	r6[152]
	putnum(&centralData->gps_stream_out,ck_sum_b,16);
8001c1dc:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8001c1e0:	ec f8 00 00 	ld.w	r8,r6[0]
8001c1e4:	70 08       	ld.w	r8,r8[0x0]
8001c1e6:	f0 c8 f5 10 	sub	r8,r8,-2800
8001c1ea:	31 0a       	mov	r10,16
8001c1ec:	12 9b       	mov	r11,r9
8001c1ee:	10 9c       	mov	r12,r8
8001c1f0:	f0 16 00 26 	mcall	r6[152]
}
8001c1f4:	2f ed       	sub	sp,-8
8001c1f6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001c1fa:	00 00       	add	r0,r0
8001c1fc:	80 01       	ld.sh	r1,r0[0x0]
8001c1fe:	c0 3a       	rjmp	8001be04 <ubx_process_data+0x8e6>

8001c200 <ubx_send_message>:
NOT USED ANYMORE
To send a message to the GPS
************************************************************************************
*/
void ubx_send_message(uint8_t msg_class, uint8_t _msg_id, void *msg, uint8_t size)
{
8001c200:	eb cd 40 c0 	pushm	r6-r7,lr
8001c204:	1a 97       	mov	r7,sp
8001c206:	20 6d       	sub	sp,24
8001c208:	4b 56       	lddpc	r6,8001c2dc <ubx_send_message+0xdc>
8001c20a:	1e 26       	rsub	r6,pc
8001c20c:	ef 4a ff ec 	st.w	r7[-20],r10
8001c210:	12 98       	mov	r8,r9
8001c212:	18 99       	mov	r9,r12
8001c214:	ef 69 ff f4 	st.b	r7[-12],r9
8001c218:	16 99       	mov	r9,r11
8001c21a:	ef 69 ff f0 	st.b	r7[-16],r9
8001c21e:	ef 68 ff e8 	st.b	r7[-24],r8
	ubx_header header;
	uint8_t ck_a=0, ck_b=0;
8001c222:	30 08       	mov	r8,0
8001c224:	ef 68 ff f9 	st.b	r7[-7],r8
8001c228:	30 08       	mov	r8,0
8001c22a:	ef 68 ff f8 	st.b	r7[-8],r8
	header.preamble1 = UBX_PREAMBLE1;
8001c22e:	3b 58       	mov	r8,-75
8001c230:	ef 68 ff ff 	st.b	r7[-1],r8
	header.preamble2 = UBX_PREAMBLE2;
8001c234:	36 28       	mov	r8,98
8001c236:	ef 68 ff fe 	st.b	r7[-2],r8
	header.msg_class = msg_class;
8001c23a:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8001c23e:	ef 68 ff fd 	st.b	r7[-3],r8
	header.msg_id_header    = _msg_id;
8001c242:	ef 38 ff f0 	ld.ub	r8,r7[-16]
8001c246:	ef 68 ff fc 	st.b	r7[-4],r8
	header.length    = size;
8001c24a:	ef 38 ff e8 	ld.ub	r8,r7[-24]
8001c24e:	ef 58 ff fa 	st.h	r7[-6],r8
	
	update_checksum((uint8_t *)&header.msg_class, sizeof(header)-2, &ck_a, &ck_b);
8001c252:	ee c9 00 08 	sub	r9,r7,8
8001c256:	ee ca 00 07 	sub	r10,r7,7
8001c25a:	ee c8 00 06 	sub	r8,r7,6
8001c25e:	2f d8       	sub	r8,-3
8001c260:	30 4b       	mov	r11,4
8001c262:	10 9c       	mov	r12,r8
8001c264:	f0 16 00 34 	mcall	r6[208]
	update_checksum((uint8_t *)msg, size, &ck_a, &ck_b);
8001c268:	ef 3b ff e8 	ld.ub	r11,r7[-24]
8001c26c:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001c270:	ee c9 00 08 	sub	r9,r7,8
8001c274:	ee ca 00 07 	sub	r10,r7,7
8001c278:	10 9c       	mov	r12,r8
8001c27a:	f0 16 00 34 	mcall	r6[208]
	
 	putstring(&(centralData->gps_stream_out),&header);
8001c27e:	ee c9 00 06 	sub	r9,r7,6
8001c282:	ec f8 00 00 	ld.w	r8,r6[0]
8001c286:	70 08       	ld.w	r8,r8[0x0]
8001c288:	f0 c8 f5 10 	sub	r8,r8,-2800
8001c28c:	12 9b       	mov	r11,r9
8001c28e:	10 9c       	mov	r12,r8
8001c290:	f0 16 00 33 	mcall	r6[204]
 	putstring(&(centralData->gps_stream_out),(uint8_t *)msg);
8001c294:	ee f9 ff ec 	ld.w	r9,r7[-20]
8001c298:	ec f8 00 00 	ld.w	r8,r6[0]
8001c29c:	70 08       	ld.w	r8,r8[0x0]
8001c29e:	f0 c8 f5 10 	sub	r8,r8,-2800
8001c2a2:	12 9b       	mov	r11,r9
8001c2a4:	10 9c       	mov	r12,r8
8001c2a6:	f0 16 00 33 	mcall	r6[204]
 	putstring(&(centralData->gps_stream_out),&ck_a);
8001c2aa:	ec f8 00 00 	ld.w	r8,r6[0]
8001c2ae:	70 08       	ld.w	r8,r8[0x0]
8001c2b0:	f0 c8 f5 10 	sub	r8,r8,-2800
8001c2b4:	ee c9 00 07 	sub	r9,r7,7
8001c2b8:	12 9b       	mov	r11,r9
8001c2ba:	10 9c       	mov	r12,r8
8001c2bc:	f0 16 00 33 	mcall	r6[204]
 	putstring(&(centralData->gps_stream_out),&ck_b);
8001c2c0:	ec f8 00 00 	ld.w	r8,r6[0]
8001c2c4:	70 08       	ld.w	r8,r8[0x0]
8001c2c6:	f0 c8 f5 10 	sub	r8,r8,-2800
8001c2ca:	ee c9 00 08 	sub	r9,r7,8
8001c2ce:	12 9b       	mov	r11,r9
8001c2d0:	10 9c       	mov	r12,r8
8001c2d2:	f0 16 00 33 	mcall	r6[204]
	
	//centralData->gps_stream_out.flush(&(centralData->gps_stream_out.data));
}
8001c2d6:	2f ad       	sub	sp,-24
8001c2d8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001c2dc:	80 01       	ld.sh	r1,r0[0x0]
8001c2de:	c0 8e       	rcall	8001beee <ubx_process_data+0x9d0>

8001c2e0 <ubx_send_message_CFG_nav_rate>:
Class:		0x06	UBX_CLASS_CFG
Msg_id:		0x08	MSG_CFG_RATE
************************************************************************************
*/
void ubx_send_message_CFG_nav_rate(uint8_t msg_class, uint8_t _msg_id, ubx_cfg_nav_rate_send msg, uint8_t size)
{
8001c2e0:	eb cd 40 e0 	pushm	r5-r7,lr
8001c2e4:	1a 97       	mov	r7,sp
8001c2e6:	20 4d       	sub	sp,16
8001c2e8:	4d d6       	lddpc	r6,8001c45c <ubx_send_message_CFG_nav_rate+0x17c>
8001c2ea:	1e 26       	rsub	r6,pc
8001c2ec:	ee c5 ff f0 	sub	r5,r7,-16
8001c2f0:	16 99       	mov	r9,r11
8001c2f2:	14 98       	mov	r8,r10
8001c2f4:	18 9a       	mov	r10,r12
8001c2f6:	ef 6a ff f8 	st.b	r7[-8],r10
8001c2fa:	ef 69 ff f4 	st.b	r7[-12],r9
8001c2fe:	ef 68 ff f0 	st.b	r7[-16],r8
	uint8_t ck_a=0, ck_b=0;
8001c302:	30 08       	mov	r8,0
8001c304:	ef 68 ff ff 	st.b	r7[-1],r8
8001c308:	30 08       	mov	r8,0
8001c30a:	ef 68 ff fe 	st.b	r7[-2],r8
	
	update_checksum((uint8_t *)&msg_class, 1, &ck_a, &ck_b);
8001c30e:	ee c9 00 02 	sub	r9,r7,2
8001c312:	ee ca 00 01 	sub	r10,r7,1
8001c316:	ee c8 00 08 	sub	r8,r7,8
8001c31a:	30 1b       	mov	r11,1
8001c31c:	10 9c       	mov	r12,r8
8001c31e:	f0 16 00 34 	mcall	r6[208]
	update_checksum((uint8_t *)&_msg_id, 1, &ck_a, &ck_b);
8001c322:	ee c9 00 02 	sub	r9,r7,2
8001c326:	ee ca 00 01 	sub	r10,r7,1
8001c32a:	ee c8 00 0c 	sub	r8,r7,12
8001c32e:	30 1b       	mov	r11,1
8001c330:	10 9c       	mov	r12,r8
8001c332:	f0 16 00 34 	mcall	r6[208]
	update_checksum((uint8_t *)&size, 1, &ck_a, &ck_b);
8001c336:	ee c9 00 02 	sub	r9,r7,2
8001c33a:	ee ca 00 01 	sub	r10,r7,1
8001c33e:	ee c8 00 10 	sub	r8,r7,16
8001c342:	30 1b       	mov	r11,1
8001c344:	10 9c       	mov	r12,r8
8001c346:	f0 16 00 34 	mcall	r6[208]

	//update_checksum((uint8_t *)&header.msg_class, sizeof(header)-2, &ck_a, &ck_b);
	update_checksum((uint8_t *)&msg, size, &ck_a, &ck_b);
8001c34a:	ef 38 ff f0 	ld.ub	r8,r7[-16]
8001c34e:	10 9b       	mov	r11,r8
8001c350:	0a 98       	mov	r8,r5
8001c352:	ee c9 00 02 	sub	r9,r7,2
8001c356:	ee ca 00 01 	sub	r10,r7,1
8001c35a:	10 9c       	mov	r12,r8
8001c35c:	f0 16 00 34 	mcall	r6[208]
	
	ubx_send_header(msg_class,_msg_id,size);
8001c360:	ef 38 ff f0 	ld.ub	r8,r7[-16]
8001c364:	10 9a       	mov	r10,r8
8001c366:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8001c36a:	10 99       	mov	r9,r8
8001c36c:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8001c370:	12 9b       	mov	r11,r9
8001c372:	10 9c       	mov	r12,r8
8001c374:	f0 16 00 b4 	mcall	r6[720]
	//centralData->gps_stream_out.put(centralData->gps_stream_out.data, endian_lower_bytes_uint16(msg.nav_rate));
	//centralData->gps_stream_out.put(centralData->gps_stream_out.data, endian_higher_bytes_uint16(msg.nav_rate));
	//centralData->gps_stream_out.put(centralData->gps_stream_out.data, endian_lower_bytes_uint16(msg.timeref));
	//centralData->gps_stream_out.put(centralData->gps_stream_out.data, endian_higher_bytes_uint16(msg.timeref));	
	
	putnum(&centralData->gps_stream_out, endian_lower_bytes_uint16(msg.measure_rate_ms),16);
8001c378:	8a 08       	ld.sh	r8,r5[0x0]
8001c37a:	5c 78       	castu.h	r8
8001c37c:	10 9c       	mov	r12,r8
8001c37e:	f0 16 00 a1 	mcall	r6[644]
8001c382:	18 98       	mov	r8,r12
8001c384:	10 99       	mov	r9,r8
8001c386:	ec f8 00 00 	ld.w	r8,r6[0]
8001c38a:	70 08       	ld.w	r8,r8[0x0]
8001c38c:	f0 c8 f5 10 	sub	r8,r8,-2800
8001c390:	31 0a       	mov	r10,16
8001c392:	12 9b       	mov	r11,r9
8001c394:	10 9c       	mov	r12,r8
8001c396:	f0 16 00 26 	mcall	r6[152]
	putnum(&centralData->gps_stream_out, endian_higher_bytes_uint16(msg.measure_rate_ms),16);
8001c39a:	8a 08       	ld.sh	r8,r5[0x0]
8001c39c:	5c 78       	castu.h	r8
8001c39e:	10 9c       	mov	r12,r8
8001c3a0:	f0 16 00 a8 	mcall	r6[672]
8001c3a4:	18 98       	mov	r8,r12
8001c3a6:	10 99       	mov	r9,r8
8001c3a8:	ec f8 00 00 	ld.w	r8,r6[0]
8001c3ac:	70 08       	ld.w	r8,r8[0x0]
8001c3ae:	f0 c8 f5 10 	sub	r8,r8,-2800
8001c3b2:	31 0a       	mov	r10,16
8001c3b4:	12 9b       	mov	r11,r9
8001c3b6:	10 9c       	mov	r12,r8
8001c3b8:	f0 16 00 26 	mcall	r6[152]
	putnum(&centralData->gps_stream_out, endian_lower_bytes_uint16(msg.nav_rate),16);
8001c3bc:	8a 18       	ld.sh	r8,r5[0x2]
8001c3be:	5c 78       	castu.h	r8
8001c3c0:	10 9c       	mov	r12,r8
8001c3c2:	f0 16 00 a1 	mcall	r6[644]
8001c3c6:	18 98       	mov	r8,r12
8001c3c8:	10 99       	mov	r9,r8
8001c3ca:	ec f8 00 00 	ld.w	r8,r6[0]
8001c3ce:	70 08       	ld.w	r8,r8[0x0]
8001c3d0:	f0 c8 f5 10 	sub	r8,r8,-2800
8001c3d4:	31 0a       	mov	r10,16
8001c3d6:	12 9b       	mov	r11,r9
8001c3d8:	10 9c       	mov	r12,r8
8001c3da:	f0 16 00 26 	mcall	r6[152]
	putnum(&centralData->gps_stream_out, endian_higher_bytes_uint16(msg.nav_rate),16);
8001c3de:	8a 18       	ld.sh	r8,r5[0x2]
8001c3e0:	5c 78       	castu.h	r8
8001c3e2:	10 9c       	mov	r12,r8
8001c3e4:	f0 16 00 a8 	mcall	r6[672]
8001c3e8:	18 98       	mov	r8,r12
8001c3ea:	10 99       	mov	r9,r8
8001c3ec:	ec f8 00 00 	ld.w	r8,r6[0]
8001c3f0:	70 08       	ld.w	r8,r8[0x0]
8001c3f2:	f0 c8 f5 10 	sub	r8,r8,-2800
8001c3f6:	31 0a       	mov	r10,16
8001c3f8:	12 9b       	mov	r11,r9
8001c3fa:	10 9c       	mov	r12,r8
8001c3fc:	f0 16 00 26 	mcall	r6[152]
	putnum(&centralData->gps_stream_out, endian_lower_bytes_uint16(msg.timeref),16);
8001c400:	8a 28       	ld.sh	r8,r5[0x4]
8001c402:	5c 78       	castu.h	r8
8001c404:	10 9c       	mov	r12,r8
8001c406:	f0 16 00 a1 	mcall	r6[644]
8001c40a:	18 98       	mov	r8,r12
8001c40c:	10 99       	mov	r9,r8
8001c40e:	ec f8 00 00 	ld.w	r8,r6[0]
8001c412:	70 08       	ld.w	r8,r8[0x0]
8001c414:	f0 c8 f5 10 	sub	r8,r8,-2800
8001c418:	31 0a       	mov	r10,16
8001c41a:	12 9b       	mov	r11,r9
8001c41c:	10 9c       	mov	r12,r8
8001c41e:	f0 16 00 26 	mcall	r6[152]
	putnum(&centralData->gps_stream_out, endian_higher_bytes_uint16(msg.timeref),16);
8001c422:	8a 28       	ld.sh	r8,r5[0x4]
8001c424:	5c 78       	castu.h	r8
8001c426:	10 9c       	mov	r12,r8
8001c428:	f0 16 00 a8 	mcall	r6[672]
8001c42c:	18 98       	mov	r8,r12
8001c42e:	10 99       	mov	r9,r8
8001c430:	ec f8 00 00 	ld.w	r8,r6[0]
8001c434:	70 08       	ld.w	r8,r8[0x0]
8001c436:	f0 c8 f5 10 	sub	r8,r8,-2800
8001c43a:	31 0a       	mov	r10,16
8001c43c:	12 9b       	mov	r11,r9
8001c43e:	10 9c       	mov	r12,r8
8001c440:	f0 16 00 26 	mcall	r6[152]
	
	ubx_send_cksum(ck_a,ck_b);
8001c444:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8001c448:	10 99       	mov	r9,r8
8001c44a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8001c44e:	12 9b       	mov	r11,r9
8001c450:	10 9c       	mov	r12,r8
8001c452:	f0 16 00 b2 	mcall	r6[712]
	
	//centralData->gps_stream_out.flush(&(centralData->gps_stream_out.data));
}
8001c456:	2f cd       	sub	sp,-16
8001c458:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8001c45c:	80 01       	ld.sh	r1,r0[0x0]
8001c45e:	c1 6e       	rcall	8001c08a <endian_lower_bytes_uint16>

8001c460 <ubx_send_message_nav_settings>:
Class:		0x06	UBX_CLASS_CFG
Msg_id :	0x24	MSG_CFG_NAV_SETTINGS
************************************************************************************
*/
void ubx_send_message_nav_settings(uint8_t msg_class, uint8_t _msg_id, enum GPS_Engine_Setting *engine_settings, uint8_t size)
{
8001c460:	eb cd 40 c0 	pushm	r6-r7,lr
8001c464:	1a 97       	mov	r7,sp
8001c466:	20 5d       	sub	sp,20
8001c468:	4b 46       	lddpc	r6,8001c538 <ubx_send_message_nav_settings+0xd8>
8001c46a:	1e 26       	rsub	r6,pc
8001c46c:	ef 4a ff f0 	st.w	r7[-16],r10
8001c470:	12 98       	mov	r8,r9
8001c472:	18 99       	mov	r9,r12
8001c474:	ef 69 ff f8 	st.b	r7[-8],r9
8001c478:	16 99       	mov	r9,r11
8001c47a:	ef 69 ff f4 	st.b	r7[-12],r9
8001c47e:	ef 68 ff ec 	st.b	r7[-20],r8
	uint8_t ck_a=0, ck_b=0;
8001c482:	30 08       	mov	r8,0
8001c484:	ef 68 ff ff 	st.b	r7[-1],r8
8001c488:	30 08       	mov	r8,0
8001c48a:	ef 68 ff fe 	st.b	r7[-2],r8
	
	update_checksum((uint8_t *)&msg_class, 1, &ck_a, &ck_b);
8001c48e:	ee c9 00 02 	sub	r9,r7,2
8001c492:	ee ca 00 01 	sub	r10,r7,1
8001c496:	ee c8 00 08 	sub	r8,r7,8
8001c49a:	30 1b       	mov	r11,1
8001c49c:	10 9c       	mov	r12,r8
8001c49e:	f0 16 00 34 	mcall	r6[208]
	update_checksum((uint8_t *)&_msg_id, 1, &ck_a, &ck_b);
8001c4a2:	ee c9 00 02 	sub	r9,r7,2
8001c4a6:	ee ca 00 01 	sub	r10,r7,1
8001c4aa:	ee c8 00 0c 	sub	r8,r7,12
8001c4ae:	30 1b       	mov	r11,1
8001c4b0:	10 9c       	mov	r12,r8
8001c4b2:	f0 16 00 34 	mcall	r6[208]
	update_checksum((uint8_t *)&size, 1, &ck_a, &ck_b);
8001c4b6:	ee c9 00 02 	sub	r9,r7,2
8001c4ba:	ee ca 00 01 	sub	r10,r7,1
8001c4be:	ee c8 00 14 	sub	r8,r7,20
8001c4c2:	30 1b       	mov	r11,1
8001c4c4:	10 9c       	mov	r12,r8
8001c4c6:	f0 16 00 34 	mcall	r6[208]

	//update_checksum((uint8_t *)&header.msg_class, sizeof(header)-2, &ck_a, &ck_b);
	
	
	ubx_send_header(msg_class,_msg_id,size);
8001c4ca:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8001c4ce:	10 9a       	mov	r10,r8
8001c4d0:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8001c4d4:	10 99       	mov	r9,r8
8001c4d6:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8001c4da:	12 9b       	mov	r11,r9
8001c4dc:	10 9c       	mov	r12,r8
8001c4de:	f0 16 00 b4 	mcall	r6[720]
	
	if (engine_settings != NULL)
8001c4e2:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001c4e6:	58 08       	cp.w	r8,0
8001c4e8:	c1 c0       	breq	8001c520 <ubx_send_message_nav_settings+0xc0>
	{
		update_checksum((uint8_t *)engine_settings, size, &ck_a, &ck_b);
8001c4ea:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8001c4ee:	10 9b       	mov	r11,r8
8001c4f0:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001c4f4:	ee c9 00 02 	sub	r9,r7,2
8001c4f8:	ee ca 00 01 	sub	r10,r7,1
8001c4fc:	10 9c       	mov	r12,r8
8001c4fe:	f0 16 00 34 	mcall	r6[208]
		//centralData->gps_stream_out.put(centralData->gps_stream_out.data, (uint8_t) *engine_settings);
		putnum(&centralData->gps_stream_out, (uint8_t) *engine_settings,10);
8001c502:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001c506:	70 08       	ld.w	r8,r8[0x0]
8001c508:	5c 58       	castu.b	r8
8001c50a:	10 99       	mov	r9,r8
8001c50c:	ec f8 00 00 	ld.w	r8,r6[0]
8001c510:	70 08       	ld.w	r8,r8[0x0]
8001c512:	f0 c8 f5 10 	sub	r8,r8,-2800
8001c516:	30 aa       	mov	r10,10
8001c518:	12 9b       	mov	r11,r9
8001c51a:	10 9c       	mov	r12,r8
8001c51c:	f0 16 00 26 	mcall	r6[152]
	}
	
	ubx_send_cksum(ck_a,ck_b);
8001c520:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8001c524:	10 99       	mov	r9,r8
8001c526:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8001c52a:	12 9b       	mov	r11,r9
8001c52c:	10 9c       	mov	r12,r8
8001c52e:	f0 16 00 b2 	mcall	r6[712]
	
	//centralData->gps_stream_out.flush(&(centralData->gps_stream_out.data));
}
8001c532:	2f bd       	sub	sp,-20
8001c534:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001c538:	80 01       	ld.sh	r1,r0[0x0]
8001c53a:	c2 ee       	rcall	8001c196 <ubx_send_header+0xd0>

8001c53c <ubx_configure_message_rate>:
Class:		0x06	UBX_CLASS_CFG
Msg_id :	0x01	MSG_CFG_SET_RATE
************************************************************************************
*/
void ubx_configure_message_rate(uint8_t msg_class, uint8_t _msg_id, uint8_t rate)
{
8001c53c:	eb cd 40 c0 	pushm	r6-r7,lr
8001c540:	1a 97       	mov	r7,sp
8001c542:	20 5d       	sub	sp,20
8001c544:	4c 16       	lddpc	r6,8001c648 <ubx_configure_message_rate+0x10c>
8001c546:	1e 26       	rsub	r6,pc
8001c548:	16 99       	mov	r9,r11
8001c54a:	14 98       	mov	r8,r10
8001c54c:	18 9a       	mov	r10,r12
8001c54e:	ef 6a ff f4 	st.b	r7[-12],r10
8001c552:	ef 69 ff f0 	st.b	r7[-16],r9
8001c556:	ef 68 ff ec 	st.b	r7[-20],r8
	uint8_t ck_a=0, ck_b=0;
8001c55a:	30 08       	mov	r8,0
8001c55c:	ef 68 ff ff 	st.b	r7[-1],r8
8001c560:	30 08       	mov	r8,0
8001c562:	ef 68 ff fe 	st.b	r7[-2],r8
	ubx_cfg_msg_rate_send msg;
	msg.msg_class = msg_class;
8001c566:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8001c56a:	ef 68 ff fb 	st.b	r7[-5],r8
	msg.msg_id_rate    = _msg_id;
8001c56e:	ef 38 ff f0 	ld.ub	r8,r7[-16]
8001c572:	ef 68 ff fc 	st.b	r7[-4],r8
	msg.rate          = rate;
8001c576:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8001c57a:	ef 68 ff fd 	st.b	r7[-3],r8
	
	uint8_t size = sizeof(msg);
8001c57e:	30 38       	mov	r8,3
8001c580:	ef 68 ff fa 	st.b	r7[-6],r8
	
	update_checksum((uint8_t *)&msg_class, 1, &ck_a, &ck_b);
8001c584:	ee c9 00 02 	sub	r9,r7,2
8001c588:	ee ca 00 01 	sub	r10,r7,1
8001c58c:	ee c8 00 0c 	sub	r8,r7,12
8001c590:	30 1b       	mov	r11,1
8001c592:	10 9c       	mov	r12,r8
8001c594:	f0 16 00 34 	mcall	r6[208]
	update_checksum((uint8_t *)&_msg_id, 1, &ck_a, &ck_b);
8001c598:	ee c9 00 02 	sub	r9,r7,2
8001c59c:	ee ca 00 01 	sub	r10,r7,1
8001c5a0:	ee c8 00 10 	sub	r8,r7,16
8001c5a4:	30 1b       	mov	r11,1
8001c5a6:	10 9c       	mov	r12,r8
8001c5a8:	f0 16 00 34 	mcall	r6[208]
	update_checksum((uint8_t *)&size, 1, &ck_a, &ck_b);
8001c5ac:	ee c9 00 02 	sub	r9,r7,2
8001c5b0:	ee ca 00 01 	sub	r10,r7,1
8001c5b4:	ee c8 00 06 	sub	r8,r7,6
8001c5b8:	30 1b       	mov	r11,1
8001c5ba:	10 9c       	mov	r12,r8
8001c5bc:	f0 16 00 34 	mcall	r6[208]

	//update_checksum((uint8_t *)&header.msg_class, sizeof(header)-2, &ck_a, &ck_b);
	update_checksum((uint8_t *)&msg, size, &ck_a, &ck_b);
8001c5c0:	ef 38 ff fa 	ld.ub	r8,r7[-6]
8001c5c4:	10 9b       	mov	r11,r8
8001c5c6:	ee c9 00 02 	sub	r9,r7,2
8001c5ca:	ee ca 00 01 	sub	r10,r7,1
8001c5ce:	ee c8 00 05 	sub	r8,r7,5
8001c5d2:	10 9c       	mov	r12,r8
8001c5d4:	f0 16 00 34 	mcall	r6[208]
	
	ubx_send_header(UBX_CLASS_CFG,MSG_CFG_SET_RATE,sizeof(msg));
8001c5d8:	30 3a       	mov	r10,3
8001c5da:	30 1b       	mov	r11,1
8001c5dc:	30 6c       	mov	r12,6
8001c5de:	f0 16 00 b4 	mcall	r6[720]
	
	//centralData->gps_stream_out.put(centralData->gps_stream_out.data,msg.msg_class);
	//centralData->gps_stream_out.put(centralData->gps_stream_out.data,msg.msg_id_rate);
	//centralData->gps_stream_out.put(centralData->gps_stream_out.data,msg.rate);
	
	putnum(&centralData->gps_stream_out,msg.msg_class,16);
8001c5e2:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8001c5e6:	10 99       	mov	r9,r8
8001c5e8:	ec f8 00 00 	ld.w	r8,r6[0]
8001c5ec:	70 08       	ld.w	r8,r8[0x0]
8001c5ee:	f0 c8 f5 10 	sub	r8,r8,-2800
8001c5f2:	31 0a       	mov	r10,16
8001c5f4:	12 9b       	mov	r11,r9
8001c5f6:	10 9c       	mov	r12,r8
8001c5f8:	f0 16 00 26 	mcall	r6[152]
	putnum(&centralData->gps_stream_out,msg.msg_id_rate,16);
8001c5fc:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8001c600:	10 99       	mov	r9,r8
8001c602:	ec f8 00 00 	ld.w	r8,r6[0]
8001c606:	70 08       	ld.w	r8,r8[0x0]
8001c608:	f0 c8 f5 10 	sub	r8,r8,-2800
8001c60c:	31 0a       	mov	r10,16
8001c60e:	12 9b       	mov	r11,r9
8001c610:	10 9c       	mov	r12,r8
8001c612:	f0 16 00 26 	mcall	r6[152]
	putnum(&centralData->gps_stream_out,msg.rate,16);
8001c616:	ef 38 ff fd 	ld.ub	r8,r7[-3]
8001c61a:	10 99       	mov	r9,r8
8001c61c:	ec f8 00 00 	ld.w	r8,r6[0]
8001c620:	70 08       	ld.w	r8,r8[0x0]
8001c622:	f0 c8 f5 10 	sub	r8,r8,-2800
8001c626:	31 0a       	mov	r10,16
8001c628:	12 9b       	mov	r11,r9
8001c62a:	10 9c       	mov	r12,r8
8001c62c:	f0 16 00 26 	mcall	r6[152]
	
	ubx_send_cksum(ck_a,ck_b);
8001c630:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8001c634:	10 99       	mov	r9,r8
8001c636:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8001c63a:	12 9b       	mov	r11,r9
8001c63c:	10 9c       	mov	r12,r8
8001c63e:	f0 16 00 b2 	mcall	r6[712]
	//ubx_send_message(UBX_CLASS_CFG, MSG_CFG_SET_RATE, &msg, sizeof(msg));
	
	//centralData->gps_stream_out.flush(centralData->gps_stream_out.data);
}
8001c642:	2f bd       	sub	sp,-20
8001c644:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001c648:	80 01       	ld.sh	r1,r0[0x0]
8001c64a:	c3 ca       	rjmp	8001c2c2 <ubx_send_message+0xc2>
8001c64c:	24 50       	sub	r0,69
8001c64e:	55 42       	stdsp	sp[0x150],r2
8001c650:	58 2c       	cp.w	r12,2
8001c652:	34 31       	mov	r1,67
8001c654:	2c 31       	sub	r1,-61
8001c656:	2c 30       	sub	r0,-61
8001c658:	30 30       	mov	r0,3
8001c65a:	33 2c       	mov	r12,50
8001c65c:	30 30       	mov	r0,3
8001c65e:	30 31       	mov	r1,3
8001c660:	2c 33       	sub	r3,-61
8001c662:	38 34       	mov	r4,-125
8001c664:	30 30       	mov	r0,3
8001c666:	2c 30       	sub	r0,-61
8001c668:	2a 32       	sub	r2,-93
8001c66a:	35 0d       	mov	sp,80
8001c66c:	0a 00       	add	r0,r5

8001c66e <configure_gps>:
To configure the GPS in binary mode and the Navigation messages we want
The GPS and UART channel should already be configured in the good baudrate 38400U
************************************************************************************
*/
void configure_gps(void)
{
8001c66e:	eb cd 40 c0 	pushm	r6-r7,lr
8001c672:	1a 97       	mov	r7,sp
8001c674:	20 3d       	sub	sp,12
8001c676:	4a 66       	lddpc	r6,8001c70c <configure_gps+0x9e>
8001c678:	1e 26       	rsub	r6,pc
	ubx_cfg_nav_rate_send msg;
	const unsigned baudrates[4] = {9600U, 19200U, 38400U, 57600U};

	const char *set_binary = UBLOX_SET_BINARY;
8001c67a:	fe c8 00 2e 	sub	r8,pc,46
8001c67e:	ef 48 ff fc 	st.w	r7[-4],r8
// 	for (uint8_t i=0; i<4; i++)
// 	{
	
	//dbg_print("Set to binary mode ");
	//dbg_print(set_binary);
	putstring(&(centralData->gps_stream_out),set_binary);
8001c682:	ec f8 00 00 	ld.w	r8,r6[0]
8001c686:	70 08       	ld.w	r8,r8[0x0]
8001c688:	f0 c8 f5 10 	sub	r8,r8,-2800
8001c68c:	ee fb ff fc 	ld.w	r11,r7[-4]
8001c690:	10 9c       	mov	r12,r8
8001c692:	f0 16 00 33 	mcall	r6[204]
	
	
	//_port->begin(38400U);

	// ask for navigation solutions every 200ms
	msg.measure_rate_ms = 200;		// ms
8001c696:	e0 68 00 c8 	mov	r8,200
8001c69a:	ef 58 ff f6 	st.h	r7[-10],r8
	msg.nav_rate        = 1;		// constant equal to 1
8001c69e:	30 18       	mov	r8,1
8001c6a0:	ef 58 ff f8 	st.h	r7[-8],r8
	msg.timeref         = 0;		// 0:UTC time, 1:GPS time
8001c6a4:	30 08       	mov	r8,0
8001c6a6:	ef 58 ff fa 	st.h	r7[-6],r8
	
	ubx_send_message_CFG_nav_rate(UBX_CLASS_CFG, MSG_CFG_RATE, msg, sizeof(msg));
8001c6aa:	20 2d       	sub	sp,8
8001c6ac:	1a 98       	mov	r8,sp
8001c6ae:	ee c9 00 0a 	sub	r9,r7,10
8001c6b2:	30 6a       	mov	r10,6
8001c6b4:	12 9b       	mov	r11,r9
8001c6b6:	10 9c       	mov	r12,r8
8001c6b8:	f0 16 00 20 	mcall	r6[128]
8001c6bc:	30 6a       	mov	r10,6
8001c6be:	30 8b       	mov	r11,8
8001c6c0:	30 6c       	mov	r12,6
8001c6c2:	f0 16 01 8e 	mcall	r6[1592]
8001c6c6:	2f ed       	sub	sp,-8

	// ask for the messages we parse to be sent on every navigation solution
	//dbg_print("Set navigation messages\n");
	ubx_configure_message_rate(UBX_CLASS_NAV, MSG_NAV_POSLLH, 1);
8001c6c8:	30 1a       	mov	r10,1
8001c6ca:	30 2b       	mov	r11,2
8001c6cc:	30 1c       	mov	r12,1
8001c6ce:	f0 16 00 57 	mcall	r6[348]
	ubx_configure_message_rate(UBX_CLASS_NAV, MSG_NAV_STATUS, 1);
8001c6d2:	30 1a       	mov	r10,1
8001c6d4:	30 3b       	mov	r11,3
8001c6d6:	30 1c       	mov	r12,1
8001c6d8:	f0 16 00 57 	mcall	r6[348]
	ubx_configure_message_rate(UBX_CLASS_NAV, MSG_NAV_SOL, 1);
8001c6dc:	30 1a       	mov	r10,1
8001c6de:	30 6b       	mov	r11,6
8001c6e0:	30 1c       	mov	r12,1
8001c6e2:	f0 16 00 57 	mcall	r6[348]
	ubx_configure_message_rate(UBX_CLASS_NAV, MSG_NAV_VELNED, 1);
8001c6e6:	30 1a       	mov	r10,1
8001c6e8:	31 2b       	mov	r11,18
8001c6ea:	30 1c       	mov	r12,1
8001c6ec:	f0 16 00 57 	mcall	r6[348]
	ubx_configure_message_rate(UBX_CLASS_NAV, MSG_NAV_SVINFO, 1);
8001c6f0:	30 1a       	mov	r10,1
8001c6f2:	33 0b       	mov	r11,48
8001c6f4:	30 1c       	mov	r12,1
8001c6f6:	f0 16 00 57 	mcall	r6[348]

	// ask for the current navigation settings
	//Debug("Asking for engine setting\n");
	//dbg_print("Asking for engine setting\n");
	ubx_send_message_nav_settings(UBX_CLASS_CFG, MSG_CFG_NAV_SETTINGS, NULL, 0);
8001c6fa:	30 09       	mov	r9,0
8001c6fc:	30 0a       	mov	r10,0
8001c6fe:	32 4b       	mov	r11,36
8001c700:	30 6c       	mov	r12,6
8001c702:	f0 16 00 f3 	mcall	r6[972]
}
8001c706:	2f dd       	sub	sp,-12
8001c708:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001c70c:	80 01       	ld.sh	r1,r0[0x0]
8001c70e:	c4 fc       	rcall	8001c7ac <gps_update+0x9c>

8001c710 <gps_update>:
************************************************************************************
The function that needs to be called to get the GPS information
************************************************************************************
*/
void gps_update(void)
{
8001c710:	eb cd 40 c0 	pushm	r6-r7,lr
8001c714:	1a 97       	mov	r7,sp
8001c716:	20 2d       	sub	sp,8
8001c718:	fe f6 02 08 	ld.w	r6,pc[520]
8001c71c:	1e 26       	rsub	r6,pc
	bool result;
	uint32_t tnow;
	
	result = ubx_read();
8001c71e:	f0 16 01 95 	mcall	r6[1620]
8001c722:	18 98       	mov	r8,r12
8001c724:	ef 68 ff fb 	st.b	r7[-5],r8
	
	tnow = get_millis();
8001c728:	f0 16 00 0f 	mcall	r6[60]
8001c72c:	18 98       	mov	r8,r12
8001c72e:	ef 48 ff fc 	st.w	r7[-4],r8
	
	if (! result)
8001c732:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8001c736:	ec 18 00 01 	eorl	r8,0x1
8001c73a:	5c 58       	castu.b	r8
8001c73c:	c1 f0       	breq	8001c77a <gps_update+0x6a>
	{
		if ((tnow - idleTimer) > idleTimeout)
8001c73e:	ec f8 02 f8 	ld.w	r8,r6[760]
8001c742:	70 08       	ld.w	r8,r8[0x0]
8001c744:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001c748:	10 19       	sub	r9,r8
8001c74a:	ec f8 04 00 	ld.w	r8,r6[1024]
8001c74e:	70 08       	ld.w	r8,r8[0x0]
8001c750:	10 39       	cp.w	r9,r8
8001c752:	e0 88 00 e3 	brls	8001c918 <gps_update+0x208>
		{
			/*dbg_print("gps read timeout ");
			dbg_print_num(tnow,10);
			dbg_print("\n");
			*/
			centralData->GPS_data.status = NO_GPS;
8001c756:	ec f8 00 00 	ld.w	r8,r6[0]
8001c75a:	70 09       	ld.w	r9,r8[0x0]
8001c75c:	30 08       	mov	r8,0
8001c75e:	f3 68 0b 54 	st.b	r9[2900],r8
			
			init_gps_ubx(engine_nav_setting);
8001c762:	ec f8 01 bc 	ld.w	r8,r6[444]
8001c766:	70 08       	ld.w	r8,r8[0x0]
8001c768:	10 9c       	mov	r12,r8
8001c76a:	f0 16 01 5e 	mcall	r6[1400]
			idleTimer = tnow;
8001c76e:	ec f8 02 f8 	ld.w	r8,r6[760]
8001c772:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001c776:	91 09       	st.w	r8[0x0],r9
8001c778:	cd 08       	rjmp	8001c918 <gps_update+0x208>
		
// 		valid_read = true;
// 		new_data = true;

		// reset the idle timer
		idleTimer = tnow;
8001c77a:	ec f8 02 f8 	ld.w	r8,r6[760]
8001c77e:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001c782:	91 09       	st.w	r8[0x0],r9
		
		centralData->GPS_data.timeLastMsg = tnow;
8001c784:	ec f8 00 00 	ld.w	r8,r6[0]
8001c788:	70 08       	ld.w	r8,r8[0x0]
8001c78a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001c78e:	f1 49 0b 4c 	st.w	r8[2892],r9
		
		if(centralData->GPS_data.status == GPS_OK)
8001c792:	ec f8 00 00 	ld.w	r8,r6[0]
8001c796:	70 08       	ld.w	r8,r8[0x0]
8001c798:	f1 39 0b 54 	ld.ub	r9,r8[2900]
8001c79c:	30 28       	mov	r8,2
8001c79e:	f0 09 18 00 	cp.b	r9,r8
8001c7a2:	e0 81 00 9d 	brne	8001c8dc <gps_update+0x1cc>
		{
			// Check for horizontal accuracy
			if (centralData->GPS_data.horizontalAccuracy < UBX_POSITION_PRECISION)
8001c7a6:	ec f8 00 00 	ld.w	r8,r6[0]
8001c7aa:	70 08       	ld.w	r8,r8[0x0]
8001c7ac:	f0 fa 0b 38 	ld.w	r10,r8[2872]
8001c7b0:	30 18       	mov	r8,1
8001c7b2:	fc 19 41 a0 	movh	r9,0x41a0
8001c7b6:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
8001c7ba:	e0 8c 00 03 	brvs	8001c7c0 <gps_update+0xb0>
8001c7be:	c0 25       	brlt	8001c7c2 <gps_update+0xb2>
8001c7c0:	30 08       	mov	r8,0
8001c7c2:	5c 58       	castu.b	r8
8001c7c4:	c0 80       	breq	8001c7d4 <gps_update+0xc4>
			{
				centralData->GPS_data.horizontalStatus = 1;
8001c7c6:	ec f8 00 00 	ld.w	r8,r6[0]
8001c7ca:	70 09       	ld.w	r9,r8[0x0]
8001c7cc:	30 18       	mov	r8,1
8001c7ce:	f3 68 0b 55 	st.b	r9[2901],r8
8001c7d2:	c0 78       	rjmp	8001c7e0 <gps_update+0xd0>
			}else{  
				centralData->GPS_data.horizontalStatus = 0;
8001c7d4:	ec f8 00 00 	ld.w	r8,r6[0]
8001c7d8:	70 09       	ld.w	r9,r8[0x0]
8001c7da:	30 08       	mov	r8,0
8001c7dc:	f3 68 0b 55 	st.b	r9[2901],r8
			}
			// Check for vertical accuracy
			if (centralData->GPS_data.verticalAccuracy < UBX_ALTITUDE_PRECISION)
8001c7e0:	ec f8 00 00 	ld.w	r8,r6[0]
8001c7e4:	70 08       	ld.w	r8,r8[0x0]
8001c7e6:	f0 fa 0b 3c 	ld.w	r10,r8[2876]
8001c7ea:	30 18       	mov	r8,1
8001c7ec:	fc 19 41 a0 	movh	r9,0x41a0
8001c7f0:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
8001c7f4:	e0 8c 00 03 	brvs	8001c7fa <gps_update+0xea>
8001c7f8:	c0 25       	brlt	8001c7fc <gps_update+0xec>
8001c7fa:	30 08       	mov	r8,0
8001c7fc:	5c 58       	castu.b	r8
8001c7fe:	c0 80       	breq	8001c80e <gps_update+0xfe>
			{
				centralData->GPS_data.altitudeStatus = 1;
8001c800:	ec f8 00 00 	ld.w	r8,r6[0]
8001c804:	70 09       	ld.w	r9,r8[0x0]
8001c806:	30 18       	mov	r8,1
8001c808:	f3 68 0b 56 	st.b	r9[2902],r8
8001c80c:	c0 78       	rjmp	8001c81a <gps_update+0x10a>
			}else{
				centralData->GPS_data.altitudeStatus = 0;
8001c80e:	ec f8 00 00 	ld.w	r8,r6[0]
8001c812:	70 09       	ld.w	r9,r8[0x0]
8001c814:	30 08       	mov	r8,0
8001c816:	f3 68 0b 56 	st.b	r9[2902],r8
			}
			// Check for speed accuracy
			if (centralData->GPS_data.speedAccuracy < UBX_SPEED_PRECISION)
8001c81a:	ec f8 00 00 	ld.w	r8,r6[0]
8001c81e:	70 08       	ld.w	r8,r8[0x0]
8001c820:	f0 fa 0b 40 	ld.w	r10,r8[2880]
8001c824:	30 18       	mov	r8,1
8001c826:	fc 19 40 a0 	movh	r9,0x40a0
8001c82a:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
8001c82e:	e0 8c 00 03 	brvs	8001c834 <gps_update+0x124>
8001c832:	c0 25       	brlt	8001c836 <gps_update+0x126>
8001c834:	30 08       	mov	r8,0
8001c836:	5c 58       	castu.b	r8
8001c838:	c0 80       	breq	8001c848 <gps_update+0x138>
			{
				centralData->GPS_data.speedStatus = 1;
8001c83a:	ec f8 00 00 	ld.w	r8,r6[0]
8001c83e:	70 09       	ld.w	r9,r8[0x0]
8001c840:	30 18       	mov	r8,1
8001c842:	f3 68 0b 57 	st.b	r9[2903],r8
8001c846:	c0 78       	rjmp	8001c854 <gps_update+0x144>
			}else{
				centralData->GPS_data.speedStatus = 0;
8001c848:	ec f8 00 00 	ld.w	r8,r6[0]
8001c84c:	70 09       	ld.w	r9,r8[0x0]
8001c84e:	30 08       	mov	r8,0
8001c850:	f3 68 0b 57 	st.b	r9[2903],r8
			}
			// Check for heading accuracy
			if (centralData->GPS_data.headingAccuracy < UBX_HEADING_PRECISION)
8001c854:	ec f8 00 00 	ld.w	r8,r6[0]
8001c858:	70 08       	ld.w	r8,r8[0x0]
8001c85a:	f0 fa 0b 44 	ld.w	r10,r8[2884]
8001c85e:	30 18       	mov	r8,1
8001c860:	e0 69 96 80 	mov	r9,38528
8001c864:	ea 19 4a 98 	orh	r9,0x4a98
8001c868:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
8001c86c:	e0 8c 00 03 	brvs	8001c872 <gps_update+0x162>
8001c870:	c0 25       	brlt	8001c874 <gps_update+0x164>
8001c872:	30 08       	mov	r8,0
8001c874:	5c 58       	castu.b	r8
8001c876:	c0 80       	breq	8001c886 <gps_update+0x176>
			{
				centralData->GPS_data.courseStatus = 1;
8001c878:	ec f8 00 00 	ld.w	r8,r6[0]
8001c87c:	70 09       	ld.w	r9,r8[0x0]
8001c87e:	30 18       	mov	r8,1
8001c880:	f3 68 0b 58 	st.b	r9[2904],r8
8001c884:	c0 78       	rjmp	8001c892 <gps_update+0x182>
				}else{
				centralData->GPS_data.courseStatus = 0;
8001c886:	ec f8 00 00 	ld.w	r8,r6[0]
8001c88a:	70 09       	ld.w	r9,r8[0x0]
8001c88c:	30 08       	mov	r8,0
8001c88e:	f3 68 0b 58 	st.b	r9[2904],r8
			}
			
			centralData->GPS_data.accuracyStatus = centralData->GPS_data.horizontalStatus & centralData->GPS_data.altitudeStatus & centralData->GPS_data.speedStatus & centralData->GPS_data.courseStatus;
8001c892:	ec f8 00 00 	ld.w	r8,r6[0]
8001c896:	70 09       	ld.w	r9,r8[0x0]
8001c898:	ec f8 00 00 	ld.w	r8,r6[0]
8001c89c:	70 08       	ld.w	r8,r8[0x0]
8001c89e:	f1 3a 0b 55 	ld.ub	r10,r8[2901]
8001c8a2:	ec f8 00 00 	ld.w	r8,r6[0]
8001c8a6:	70 08       	ld.w	r8,r8[0x0]
8001c8a8:	f1 38 0b 56 	ld.ub	r8,r8[2902]
8001c8ac:	f5 e8 00 08 	and	r8,r10,r8
8001c8b0:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
8001c8b4:	ec f8 00 00 	ld.w	r8,r6[0]
8001c8b8:	70 08       	ld.w	r8,r8[0x0]
8001c8ba:	f1 38 0b 57 	ld.ub	r8,r8[2903]
8001c8be:	f5 e8 00 08 	and	r8,r10,r8
8001c8c2:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
8001c8c6:	ec f8 00 00 	ld.w	r8,r6[0]
8001c8ca:	70 08       	ld.w	r8,r8[0x0]
8001c8cc:	f1 38 0b 58 	ld.ub	r8,r8[2904]
8001c8d0:	f5 e8 00 08 	and	r8,r10,r8
8001c8d4:	5c 58       	castu.b	r8
8001c8d6:	f3 68 0b 59 	st.b	r9[2905],r8
8001c8da:	c1 f8       	rjmp	8001c918 <gps_update+0x208>
// 				
// 				// no good way to get descent rate
// 				centralData->GPS_data.verticalSpeed = 0;
// 			}
		}else{
			centralData->GPS_data.horizontalStatus = 0;
8001c8dc:	ec f8 00 00 	ld.w	r8,r6[0]
8001c8e0:	70 09       	ld.w	r9,r8[0x0]
8001c8e2:	30 08       	mov	r8,0
8001c8e4:	f3 68 0b 55 	st.b	r9[2901],r8
			centralData->GPS_data.altitudeStatus = 0;
8001c8e8:	ec f8 00 00 	ld.w	r8,r6[0]
8001c8ec:	70 09       	ld.w	r9,r8[0x0]
8001c8ee:	30 08       	mov	r8,0
8001c8f0:	f3 68 0b 56 	st.b	r9[2902],r8
			centralData->GPS_data.speedStatus = 0;
8001c8f4:	ec f8 00 00 	ld.w	r8,r6[0]
8001c8f8:	70 09       	ld.w	r9,r8[0x0]
8001c8fa:	30 08       	mov	r8,0
8001c8fc:	f3 68 0b 57 	st.b	r9[2903],r8
			centralData->GPS_data.courseStatus = 0;
8001c900:	ec f8 00 00 	ld.w	r8,r6[0]
8001c904:	70 09       	ld.w	r9,r8[0x0]
8001c906:	30 08       	mov	r8,0
8001c908:	f3 68 0b 58 	st.b	r9[2904],r8
			
			centralData->GPS_data.accuracyStatus = 0;
8001c90c:	ec f8 00 00 	ld.w	r8,r6[0]
8001c910:	70 09       	ld.w	r9,r8[0x0]
8001c912:	30 08       	mov	r8,0
8001c914:	f3 68 0b 59 	st.b	r9[2905],r8
		}
	}
}
8001c918:	2f ed       	sub	sp,-8
8001c91a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001c91e:	00 00       	add	r0,r0
8001c920:	80 01       	ld.sh	r1,r0[0x0]
8001c922:	c5 a0       	breq	8001c9d6 <ubx_GetSolution+0xa>

8001c924 <newValidGpsMsg>:
/*
* This function returns true if there is a new valid GPS message that arrived at time tnow
* false otherwise
*/
bool newValidGpsMsg(uint32_t *prevGpsMsgTime)
{
8001c924:	eb cd 40 c0 	pushm	r6-r7,lr
8001c928:	1a 97       	mov	r7,sp
8001c92a:	20 1d       	sub	sp,4
8001c92c:	49 36       	lddpc	r6,8001c978 <newValidGpsMsg+0x54>
8001c92e:	1e 26       	rsub	r6,pc
8001c930:	ef 4c ff fc 	st.w	r7[-4],r12
	
	
	if((*prevGpsMsgTime != centralData->GPS_data.timeLastMsg)&&(centralData->GPS_data.status == GPS_OK)//&&(centralData->GPS_data.accuracyStatus == 1)
8001c934:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001c938:	70 09       	ld.w	r9,r8[0x0]
8001c93a:	ec f8 00 00 	ld.w	r8,r6[0]
8001c93e:	70 08       	ld.w	r8,r8[0x0]
8001c940:	f0 f8 0b 4c 	ld.w	r8,r8[2892]
8001c944:	10 39       	cp.w	r9,r8
8001c946:	c1 40       	breq	8001c96e <newValidGpsMsg+0x4a>
8001c948:	ec f8 00 00 	ld.w	r8,r6[0]
8001c94c:	70 08       	ld.w	r8,r8[0x0]
8001c94e:	f1 39 0b 54 	ld.ub	r9,r8[2900]
8001c952:	30 28       	mov	r8,2
8001c954:	f0 09 18 00 	cp.b	r9,r8
8001c958:	c0 b1       	brne	8001c96e <newValidGpsMsg+0x4a>
	)
	{
		*prevGpsMsgTime = centralData->GPS_data.timeLastMsg;
8001c95a:	ec f8 00 00 	ld.w	r8,r6[0]
8001c95e:	70 08       	ld.w	r8,r8[0x0]
8001c960:	f0 f9 0b 4c 	ld.w	r9,r8[2892]
8001c964:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001c968:	91 09       	st.w	r8[0x0],r9
		return true;
8001c96a:	30 18       	mov	r8,1
8001c96c:	c0 28       	rjmp	8001c970 <newValidGpsMsg+0x4c>
	}else{
		return false;
8001c96e:	30 08       	mov	r8,0
	}
	
	
}
8001c970:	10 9c       	mov	r12,r8
8001c972:	2f fd       	sub	sp,-4
8001c974:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001c978:	80 01       	ld.sh	r1,r0[0x0]
8001c97a:	c7 b2       	brcc	8001ca70 <ubx_GetMsgRate+0x4>

8001c97c <ubx_GetPosllh>:
*	Warning: the values of the message must be read very quickly after the call to this function as buffer may be swapped in an interruption
*
*	@return A pointer to the last valid posllh message, or 0.
*/
ubx_nav_posllh * ubx_GetPosllh()
{
8001c97c:	eb cd 40 c0 	pushm	r6-r7,lr
8001c980:	1a 97       	mov	r7,sp
8001c982:	48 86       	lddpc	r6,8001c9a0 <ubx_GetPosllh+0x24>
8001c984:	1e 26       	rsub	r6,pc
	if (ubx_numberOfValidPosllhMessage)
8001c986:	ec f8 04 5c 	ld.w	r8,r6[1116]
8001c98a:	90 08       	ld.sh	r8,r8[0x0]
8001c98c:	58 08       	cp.w	r8,0
8001c98e:	c0 50       	breq	8001c998 <ubx_GetPosllh+0x1c>
	return ubx_lastPosllhMessage;
8001c990:	ec f8 03 54 	ld.w	r8,r6[852]
8001c994:	70 08       	ld.w	r8,r8[0x0]
8001c996:	c0 28       	rjmp	8001c99a <ubx_GetPosllh+0x1e>
	else
	return 0;
8001c998:	30 08       	mov	r8,0
}
8001c99a:	10 9c       	mov	r12,r8
8001c99c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001c9a0:	80 01       	ld.sh	r1,r0[0x0]
8001c9a2:	c8 08       	rjmp	8001caa2 <ubx_GetMonRXR+0xe>

8001c9a4 <ubx_GetStatus>:
*	Warning: the values of the message must be read very quickly after the call to this function as buffer may be swapped in an interruption
*
*	@return A pointer to the last valid status message, or 0.
*/
ubx_nav_status * ubx_GetStatus()
{
8001c9a4:	eb cd 40 c0 	pushm	r6-r7,lr
8001c9a8:	1a 97       	mov	r7,sp
8001c9aa:	48 86       	lddpc	r6,8001c9c8 <ubx_GetStatus+0x24>
8001c9ac:	1e 26       	rsub	r6,pc
	if (ubx_numberOfValidStatusMessage)
8001c9ae:	ec f8 04 24 	ld.w	r8,r6[1060]
8001c9b2:	90 08       	ld.sh	r8,r8[0x0]
8001c9b4:	58 08       	cp.w	r8,0
8001c9b6:	c0 50       	breq	8001c9c0 <ubx_GetStatus+0x1c>
	return ubx_lastStatusMessage;
8001c9b8:	ec f8 03 58 	ld.w	r8,r6[856]
8001c9bc:	70 08       	ld.w	r8,r8[0x0]
8001c9be:	c0 28       	rjmp	8001c9c2 <ubx_GetStatus+0x1e>
	else
	return 0;
8001c9c0:	30 08       	mov	r8,0
}
8001c9c2:	10 9c       	mov	r12,r8
8001c9c4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001c9c8:	80 01       	ld.sh	r1,r0[0x0]
8001c9ca:	c8 30       	breq	8001c8d0 <gps_update+0x1c0>

8001c9cc <ubx_GetSolution>:
*	Warning: the values of the message must be read very quickly after the call to this function as buffer may be swapped in an interruption
*
*	@return A pointer to the last valid velned message, or 0.
*/
ubx_nav_solution * ubx_GetSolution()
{
8001c9cc:	eb cd 40 c0 	pushm	r6-r7,lr
8001c9d0:	1a 97       	mov	r7,sp
8001c9d2:	48 86       	lddpc	r6,8001c9f0 <ubx_GetSolution+0x24>
8001c9d4:	1e 26       	rsub	r6,pc
	if (ubx_numberOfValidSolutionMessage)
8001c9d6:	ec f8 04 74 	ld.w	r8,r6[1140]
8001c9da:	90 08       	ld.sh	r8,r8[0x0]
8001c9dc:	58 08       	cp.w	r8,0
8001c9de:	c0 50       	breq	8001c9e8 <ubx_GetSolution+0x1c>
	return ubx_lastSolutionMessage;
8001c9e0:	ec f8 03 c0 	ld.w	r8,r6[960]
8001c9e4:	70 08       	ld.w	r8,r8[0x0]
8001c9e6:	c0 28       	rjmp	8001c9ea <ubx_GetSolution+0x1e>
	else
	return 0;
8001c9e8:	30 08       	mov	r8,0
}
8001c9ea:	10 9c       	mov	r12,r8
8001c9ec:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001c9f0:	80 01       	ld.sh	r1,r0[0x0]
8001c9f2:	c8 58       	rjmp	8001cafc <ubx_GetTimVRFY+0x18>

8001c9f4 <ubx_GetVelned>:
*	Warning: the values of the message must be read very quickly after the call to this function as buffer may be swapped in an interruption
*
*	@return A pointer to the last valid velned message, or 0.
*/
ubx_nav_velned * ubx_GetVelned()
{
8001c9f4:	eb cd 40 c0 	pushm	r6-r7,lr
8001c9f8:	1a 97       	mov	r7,sp
8001c9fa:	48 86       	lddpc	r6,8001ca18 <ubx_GetVelned+0x24>
8001c9fc:	1e 26       	rsub	r6,pc
	if (ubx_numberOfValidVelnedMessage)
8001c9fe:	ec f8 04 80 	ld.w	r8,r6[1152]
8001ca02:	90 08       	ld.sh	r8,r8[0x0]
8001ca04:	58 08       	cp.w	r8,0
8001ca06:	c0 50       	breq	8001ca10 <ubx_GetVelned+0x1c>
	return ubx_lastVelnedMessage;
8001ca08:	ec f8 04 70 	ld.w	r8,r6[1136]
8001ca0c:	70 08       	ld.w	r8,r8[0x0]
8001ca0e:	c0 28       	rjmp	8001ca12 <ubx_GetVelned+0x1e>
	else
	return 0;
8001ca10:	30 08       	mov	r8,0
}
8001ca12:	10 9c       	mov	r12,r8
8001ca14:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001ca18:	80 01       	ld.sh	r1,r0[0x0]
8001ca1a:	c8 80       	breq	8001c92a <newValidGpsMsg+0x6>

8001ca1c <ubx_GetSVInfo>:
*	Warning: the values of the message must be read very quickly after the call to this function as buffer may be swapped in an interruption
*
*	@return A pointer to the last valid status message, or 0.
*/
ubx_nav_SVInfo * ubx_GetSVInfo()
{
8001ca1c:	eb cd 40 c0 	pushm	r6-r7,lr
8001ca20:	1a 97       	mov	r7,sp
8001ca22:	48 86       	lddpc	r6,8001ca40 <ubx_GetSVInfo+0x24>
8001ca24:	1e 26       	rsub	r6,pc
	if (ubx_numberOfValidSVInfoMessage)
8001ca26:	ec f8 03 8c 	ld.w	r8,r6[908]
8001ca2a:	90 08       	ld.sh	r8,r8[0x0]
8001ca2c:	58 08       	cp.w	r8,0
8001ca2e:	c0 50       	breq	8001ca38 <ubx_GetSVInfo+0x1c>
	return ubx_lastSVInfoMessage;
8001ca30:	ec f8 04 54 	ld.w	r8,r6[1108]
8001ca34:	70 08       	ld.w	r8,r8[0x0]
8001ca36:	c0 28       	rjmp	8001ca3a <ubx_GetSVInfo+0x1e>
	else
	return 0;
8001ca38:	30 08       	mov	r8,0
}
8001ca3a:	10 9c       	mov	r12,r8
8001ca3c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001ca40:	80 01       	ld.sh	r1,r0[0x0]
8001ca42:	c8 a8       	rjmp	8001cb56 <ToRad+0x4a>

8001ca44 <ubx_GetNavSettings>:
*	Warning: the values of the message must be read very quickly after the call to this function as buffer may be swapped in an interruption
*
*	@return A pointer to the last valid status message, or 0.
*/
ubx_cfg_nav_settings * ubx_GetNavSettings()
{
8001ca44:	eb cd 40 c0 	pushm	r6-r7,lr
8001ca48:	1a 97       	mov	r7,sp
8001ca4a:	48 86       	lddpc	r6,8001ca68 <ubx_GetNavSettings+0x24>
8001ca4c:	1e 26       	rsub	r6,pc
	if (ubx_numberOfValidNavSettingsMessage)
8001ca4e:	ec f8 04 38 	ld.w	r8,r6[1080]
8001ca52:	90 08       	ld.sh	r8,r8[0x0]
8001ca54:	58 08       	cp.w	r8,0
8001ca56:	c0 50       	breq	8001ca60 <ubx_GetNavSettings+0x1c>
	return ubx_lastNavSettingsMessage;
8001ca58:	ec f8 04 68 	ld.w	r8,r6[1128]
8001ca5c:	70 08       	ld.w	r8,r8[0x0]
8001ca5e:	c0 28       	rjmp	8001ca62 <ubx_GetNavSettings+0x1e>
	else
	return 0;
8001ca60:	30 08       	mov	r8,0
}
8001ca62:	10 9c       	mov	r12,r8
8001ca64:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001ca68:	80 01       	ld.sh	r1,r0[0x0]
8001ca6a:	c8 d0       	breq	8001c984 <ubx_GetPosllh+0x8>

8001ca6c <ubx_GetMsgRate>:
*	Warning: the values of the message must be read very quickly after the call to this function as buffer may be swapped in an interruption
*
*	@return A pointer to the last valid status message, or 0.
*/
ubx_cfg_msg_rate * ubx_GetMsgRate()
{
8001ca6c:	eb cd 40 c0 	pushm	r6-r7,lr
8001ca70:	1a 97       	mov	r7,sp
8001ca72:	48 86       	lddpc	r6,8001ca90 <ubx_GetMsgRate+0x24>
8001ca74:	1e 26       	rsub	r6,pc
	if (ubx_numberOfValidCFGSetGetRateMessage)
8001ca76:	ec f8 04 98 	ld.w	r8,r6[1176]
8001ca7a:	90 08       	ld.sh	r8,r8[0x0]
8001ca7c:	58 08       	cp.w	r8,0
8001ca7e:	c0 50       	breq	8001ca88 <ubx_GetMsgRate+0x1c>
	return ubx_lastCFGSetGetRateMessage;
8001ca80:	ec f8 03 d0 	ld.w	r8,r6[976]
8001ca84:	70 08       	ld.w	r8,r8[0x0]
8001ca86:	c0 28       	rjmp	8001ca8a <ubx_GetMsgRate+0x1e>
	else
	return 0;
8001ca88:	30 08       	mov	r8,0
}
8001ca8a:	10 9c       	mov	r12,r8
8001ca8c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001ca90:	80 01       	ld.sh	r1,r0[0x0]
8001ca92:	c8 f8       	rjmp	8001cbb0 <interpolate+0x48>

8001ca94 <ubx_GetMonRXR>:
*	Warning: the values of the message must be read very quickly after the call to this function as buffer may be swapped in an interruption
*
*	@return A pointer to the last valid status message, or 0.
*/
ubx_mon_rxr_struct * ubx_GetMonRXR()
{
8001ca94:	eb cd 40 c0 	pushm	r6-r7,lr
8001ca98:	1a 97       	mov	r7,sp
8001ca9a:	48 86       	lddpc	r6,8001cab8 <ubx_GetMonRXR+0x24>
8001ca9c:	1e 26       	rsub	r6,pc
	if (ubx_numberOfValidMONRXRMessage)
8001ca9e:	ec f8 04 7c 	ld.w	r8,r6[1148]
8001caa2:	90 08       	ld.sh	r8,r8[0x0]
8001caa4:	58 08       	cp.w	r8,0
8001caa6:	c0 50       	breq	8001cab0 <ubx_GetMonRXR+0x1c>
	return ubx_lastMONRXRMessage;
8001caa8:	ec f8 03 bc 	ld.w	r8,r6[956]
8001caac:	70 08       	ld.w	r8,r8[0x0]
8001caae:	c0 28       	rjmp	8001cab2 <ubx_GetMonRXR+0x1e>
	else
	return 0;
8001cab0:	30 08       	mov	r8,0
}
8001cab2:	10 9c       	mov	r12,r8
8001cab4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001cab8:	80 01       	ld.sh	r1,r0[0x0]
8001caba:	c9 20       	breq	8001c9de <ubx_GetSolution+0x12>

8001cabc <ubx_GetTimTP>:
*	Warning: the values of the message must be read very quickly after the call to this function as buffer may be swapped in an interruption
*
*	@return A pointer to the last valid status message, or 0.
*/
ubx_tim_tp * ubx_GetTimTP()
{
8001cabc:	eb cd 40 c0 	pushm	r6-r7,lr
8001cac0:	1a 97       	mov	r7,sp
8001cac2:	48 86       	lddpc	r6,8001cae0 <ubx_GetTimTP+0x24>
8001cac4:	1e 26       	rsub	r6,pc
	if(ubx_numberOfValidTimTPMessage)
8001cac6:	ec f8 04 3c 	ld.w	r8,r6[1084]
8001caca:	90 08       	ld.sh	r8,r8[0x0]
8001cacc:	58 08       	cp.w	r8,0
8001cace:	c0 50       	breq	8001cad8 <ubx_GetTimTP+0x1c>
	return ubx_lastTimTPMessage;
8001cad0:	ec f8 03 f8 	ld.w	r8,r6[1016]
8001cad4:	70 08       	ld.w	r8,r8[0x0]
8001cad6:	c0 28       	rjmp	8001cada <ubx_GetTimTP+0x1e>
	else
	return 0;
8001cad8:	30 08       	mov	r8,0
}
8001cada:	10 9c       	mov	r12,r8
8001cadc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001cae0:	80 01       	ld.sh	r1,r0[0x0]
8001cae2:	c9 48       	rjmp	8001cc0a <init_imu+0x1e>

8001cae4 <ubx_GetTimVRFY>:
*	Warning: the values of the message must be read very quickly after the call to this function as buffer may be swapped in an interruption
*
*	@return A pointer to the last valid status message, or 0.
*/
ubx_tim_vrfy * ubx_GetTimVRFY()
{
8001cae4:	eb cd 40 c0 	pushm	r6-r7,lr
8001cae8:	1a 97       	mov	r7,sp
8001caea:	48 86       	lddpc	r6,8001cb08 <ubx_GetTimVRFY+0x24>
8001caec:	1e 26       	rsub	r6,pc
	if(ubx_numberOfValidTimVRFYMessage)
8001caee:	ec f8 04 44 	ld.w	r8,r6[1092]
8001caf2:	90 08       	ld.sh	r8,r8[0x0]
8001caf4:	58 08       	cp.w	r8,0
8001caf6:	c0 50       	breq	8001cb00 <ubx_GetTimVRFY+0x1c>
	return ubx_lastTimVRFYMessage;
8001caf8:	ec f8 04 18 	ld.w	r8,r6[1048]
8001cafc:	70 08       	ld.w	r8,r8[0x0]
8001cafe:	c0 28       	rjmp	8001cb02 <ubx_GetTimVRFY+0x1e>
	else
	return 0;
8001cb00:	30 08       	mov	r8,0
}
8001cb02:	10 9c       	mov	r12,r8
8001cb04:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001cb08:	80 01       	ld.sh	r1,r0[0x0]
8001cb0a:	c9 70       	breq	8001ca38 <ubx_GetSVInfo+0x1c>

8001cb0c <ToRad>:

float ToRad(float numdeg)
{
8001cb0c:	eb cd 40 c0 	pushm	r6-r7,lr
8001cb10:	1a 97       	mov	r7,sp
8001cb12:	20 1d       	sub	sp,4
8001cb14:	49 46       	lddpc	r6,8001cb64 <ToRad+0x58>
8001cb16:	1e 26       	rsub	r6,pc
8001cb18:	ef 4c ff fc 	st.w	r7[-4],r12
	return numdeg * DEG2RAD;
8001cb1c:	ee fc ff fc 	ld.w	r12,r7[-4]
8001cb20:	f0 16 00 02 	mcall	r6[8]
8001cb24:	e0 68 2d 18 	mov	r8,11544
8001cb28:	ea 18 54 44 	orh	r8,0x5444
8001cb2c:	e0 69 21 fb 	mov	r9,8699
8001cb30:	ea 19 40 09 	orh	r9,0x4009
8001cb34:	f0 16 00 03 	mcall	r6[12]
8001cb38:	14 98       	mov	r8,r10
8001cb3a:	16 99       	mov	r9,r11
8001cb3c:	10 9a       	mov	r10,r8
8001cb3e:	12 9b       	mov	r11,r9
8001cb40:	30 08       	mov	r8,0
8001cb42:	e0 69 80 00 	mov	r9,32768
8001cb46:	ea 19 40 66 	orh	r9,0x4066
8001cb4a:	f0 16 00 0c 	mcall	r6[48]
8001cb4e:	14 98       	mov	r8,r10
8001cb50:	16 99       	mov	r9,r11
8001cb52:	10 9a       	mov	r10,r8
8001cb54:	12 9b       	mov	r11,r9
8001cb56:	f0 16 00 09 	mcall	r6[36]
8001cb5a:	18 98       	mov	r8,r12
8001cb5c:	10 9c       	mov	r12,r8
8001cb5e:	2f fd       	sub	sp,-4
8001cb60:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001cb64:	80 01       	ld.sh	r1,r0[0x0]
8001cb66:	c9 9a       	rjmp	8001c898 <gps_update+0x188>

8001cb68 <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
8001cb68:	eb cd 40 c0 	pushm	r6-r7,lr
8001cb6c:	1a 97       	mov	r7,sp
8001cb6e:	20 6d       	sub	sp,24
8001cb70:	49 e6       	lddpc	r6,8001cbe8 <interpolate+0x80>
8001cb72:	1e 26       	rsub	r6,pc
8001cb74:	ef 4c ff f8 	st.w	r7[-8],r12
8001cb78:	ef 4b ff f4 	st.w	r7[-12],r11
8001cb7c:	ef 4a ff f0 	st.w	r7[-16],r10
8001cb80:	ef 49 ff ec 	st.w	r7[-20],r9
8001cb84:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
8001cb88:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001cb8c:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001cb90:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
8001cb94:	c0 41       	brne	8001cb9c <interpolate+0x34>
	{
		return y1;
8001cb96:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001cb9a:	c2 38       	rjmp	8001cbe0 <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
8001cb9c:	ee f9 ff e8 	ld.w	r9,r7[-24]
8001cba0:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001cba4:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8001cba8:	ee fa ff f8 	ld.w	r10,r7[-8]
8001cbac:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001cbb0:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
8001cbb4:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8001cbb8:	ee fa ff f0 	ld.w	r10,r7[-16]
8001cbbc:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001cbc0:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8001cbc4:	12 9b       	mov	r11,r9
8001cbc6:	10 9c       	mov	r12,r8
8001cbc8:	f0 16 00 08 	mcall	r6[32]
8001cbcc:	18 98       	mov	r8,r12
8001cbce:	10 99       	mov	r9,r8
8001cbd0:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001cbd4:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8001cbd8:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
8001cbdc:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
8001cbe0:	10 9c       	mov	r12,r8
8001cbe2:	2f ad       	sub	sp,-24
8001cbe4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001cbe8:	80 01       	ld.sh	r1,r0[0x0]
8001cbea:	c9 f6       	brmi	8001cb28 <ToRad+0x1c>

8001cbec <init_imu>:
#include "time_keeper.h"
#include "print_util.h"
#include "position_estimation.h"

int ic;
void init_imu (Imu_Data_t *imu1) {
8001cbec:	eb cd 40 c0 	pushm	r6-r7,lr
8001cbf0:	1a 97       	mov	r7,sp
8001cbf2:	20 1d       	sub	sp,4
8001cbf4:	4d 36       	lddpc	r6,8001cd40 <init_imu+0x154>
8001cbf6:	1e 26       	rsub	r6,pc
8001cbf8:	ef 4c ff fc 	st.w	r7[-4],r12
	
	
	init_itg3200_slow();	
8001cbfc:	f0 16 02 0d 	mcall	r6[2100]
	init_adxl345_slow();
8001cc00:	f0 16 01 68 	mcall	r6[1440]
	//init_lsm330();
	
	init_hmc5883_slow();
8001cc04:	f0 16 01 e5 	mcall	r6[1940]

	//calibrate_Gyros(imu1);
	imu1->raw_scale[0] =  RAW_GYRO_X_SCALE;
8001cc08:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001cc0c:	e0 69 e0 00 	mov	r9,57344
8001cc10:	ea 19 46 44 	orh	r9,0x4644
8001cc14:	f1 49 01 14 	st.w	r8[276],r9
	imu1->raw_scale[1] =  RAW_GYRO_Y_SCALE;
8001cc18:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001cc1c:	e0 69 e0 00 	mov	r9,57344
8001cc20:	ea 19 c6 44 	orh	r9,0xc644
8001cc24:	f1 49 01 18 	st.w	r8[280],r9
	imu1->raw_scale[2] =  RAW_GYRO_Z_SCALE;
8001cc28:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001cc2c:	e0 69 e0 00 	mov	r9,57344
8001cc30:	ea 19 46 44 	orh	r9,0x4644
8001cc34:	f1 49 01 1c 	st.w	r8[284],r9
	imu1->raw_scale[0+ACC_OFFSET] =  RAW_ACC_X_SCALE;
8001cc38:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001cc3c:	e0 69 75 6a 	mov	r9,30058
8001cc40:	ea 19 43 81 	orh	r9,0x4381
8001cc44:	f1 49 01 20 	st.w	r8[288],r9
	imu1->raw_scale[1+ACC_OFFSET] =  RAW_ACC_Y_SCALE;
8001cc48:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001cc4c:	e0 69 7e 1e 	mov	r9,32286
8001cc50:	ea 19 43 81 	orh	r9,0x4381
8001cc54:	f1 49 01 24 	st.w	r8[292],r9
	imu1->raw_scale[2+ACC_OFFSET] =  RAW_ACC_Z_SCALE;
8001cc58:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001cc5c:	e0 69 0a 9c 	mov	r9,2716
8001cc60:	ea 19 43 81 	orh	r9,0x4381
8001cc64:	f1 49 01 28 	st.w	r8[296],r9
	imu1->raw_scale[0+COMPASS_OFFSET] =  RAW_MAG_X_SCALE;
8001cc68:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001cc6c:	e0 69 91 bc 	mov	r9,37308
8001cc70:	ea 19 44 04 	orh	r9,0x4404
8001cc74:	f1 49 01 2c 	st.w	r8[300],r9
	imu1->raw_scale[1+COMPASS_OFFSET] =  RAW_MAG_Y_SCALE;
8001cc78:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001cc7c:	e0 69 52 c7 	mov	r9,21191
8001cc80:	ea 19 44 03 	orh	r9,0x4403
8001cc84:	f1 49 01 30 	st.w	r8[304],r9
	imu1->raw_scale[2+COMPASS_OFFSET] =  RAW_MAG_Z_SCALE;
8001cc88:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001cc8c:	e0 69 39 4b 	mov	r9,14667
8001cc90:	ea 19 43 f9 	orh	r9,0x43f9
8001cc94:	f1 49 01 34 	st.w	r8[308],r9
	
	imu1->raw_bias[0+GYRO_OFFSET]= 0.0;
8001cc98:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001cc9c:	30 09       	mov	r9,0
8001cc9e:	f1 49 00 f0 	st.w	r8[240],r9
	imu1->raw_bias[1+GYRO_OFFSET]= 0.0;
8001cca2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001cca6:	30 09       	mov	r9,0
8001cca8:	f1 49 00 f4 	st.w	r8[244],r9
	imu1->raw_bias[2+GYRO_OFFSET]= 0.0;
8001ccac:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001ccb0:	30 09       	mov	r9,0
8001ccb2:	f1 49 00 f8 	st.w	r8[248],r9
	//myquad
	// acceleration biais
	imu1->raw_bias[0+ACC_OFFSET]= ACC_BIAIS_X;
8001ccb6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001ccba:	fc 19 41 90 	movh	r9,0x4190
8001ccbe:	f1 49 00 fc 	st.w	r8[252],r9
	imu1->raw_bias[1+ACC_OFFSET]= ACC_BIAIS_Y;
8001ccc2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001ccc6:	fc 19 41 10 	movh	r9,0x4110
8001ccca:	f1 49 01 00 	st.w	r8[256],r9
	imu1->raw_bias[2+ACC_OFFSET]= ACC_BIAIS_Z;
8001ccce:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001ccd2:	fc 19 c1 80 	movh	r9,0xc180
8001ccd6:	f1 49 01 04 	st.w	r8[260],r9
	
	// magneto bias
	imu1->raw_bias[0+COMPASS_OFFSET]= MAG_BIAIS_X;
8001ccda:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001ccde:	e0 69 c2 19 	mov	r9,49689
8001cce2:	ea 19 43 03 	orh	r9,0x4303
8001cce6:	f1 49 01 08 	st.w	r8[264],r9
	imu1->raw_bias[1+COMPASS_OFFSET]= MAG_BIAIS_Y;
8001ccea:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001ccee:	e0 69 09 d5 	mov	r9,2517
8001ccf2:	ea 19 c1 d1 	orh	r9,0xc1d1
8001ccf6:	f1 49 01 0c 	st.w	r8[268],r9
	imu1->raw_bias[2+COMPASS_OFFSET]= MAG_BIAIS_Z;
8001ccfa:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001ccfe:	e0 69 a8 8d 	mov	r9,43149
8001cd02:	ea 19 42 74 	orh	r9,0x4274
8001cd06:	f1 49 01 10 	st.w	r8[272],r9
	
	
	imu_last_update_init = false;
8001cd0a:	ec f9 02 c4 	ld.w	r9,r6[708]
8001cd0e:	30 08       	mov	r8,0
8001cd10:	b2 88       	st.b	r9[0x0],r8
	
	qfInit(&imu1->attitude, imu1->raw_scale, imu1->raw_bias);
8001cd12:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001cd16:	f0 ca ff 10 	sub	r10,r8,-240
8001cd1a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001cd1e:	f0 c9 fe ec 	sub	r9,r8,-276
8001cd22:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001cd26:	12 9b       	mov	r11,r9
8001cd28:	10 9c       	mov	r12,r8
8001cd2a:	f0 16 01 e0 	mcall	r6[1920]
	imu1->attitude.calibration_level=OFF;
8001cd2e:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001cd32:	30 08       	mov	r8,0
8001cd34:	f3 68 00 b8 	st.b	r9[184],r8
}
8001cd38:	2f fd       	sub	sp,-4
8001cd3a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001cd3e:	00 00       	add	r0,r0
8001cd40:	80 01       	ld.sh	r1,r0[0x0]
8001cd42:	ca 7a       	rjmp	8001ca90 <ubx_GetMsgRate+0x24>

8001cd44 <imu_get_raw_data>:


void imu_get_raw_data(Imu_Data_t *imu1) {
8001cd44:	eb cd 40 c0 	pushm	r6-r7,lr
8001cd48:	1a 97       	mov	r7,sp
8001cd4a:	20 5d       	sub	sp,20
8001cd4c:	4b 66       	lddpc	r6,8001ce24 <imu_get_raw_data+0xe0>
8001cd4e:	1e 26       	rsub	r6,pc
8001cd50:	ef 4c ff ec 	st.w	r7[-20],r12
	int i=0;
8001cd54:	30 08       	mov	r8,0
8001cd56:	ef 48 ff f0 	st.w	r7[-16],r8
	
	gyro_data* gyros=get_gyro_data_slow();
8001cd5a:	f0 16 01 cc 	mcall	r6[1840]
8001cd5e:	18 98       	mov	r8,r12
8001cd60:	ef 48 ff f4 	st.w	r7[-12],r8
	acc_data* accs=get_acc_data_slow();
8001cd64:	f0 16 01 b8 	mcall	r6[1760]
8001cd68:	18 98       	mov	r8,r12
8001cd6a:	ef 48 ff f8 	st.w	r7[-8],r8
	
//	lsm_gyro_data_t* gyros=lsm330_get_gyro_data();
//	lsm_acc_data_t* accs=lsm330_get_acc_data();
	compass_data* compass=get_compass_data_slow();
8001cd6e:	f0 16 01 31 	mcall	r6[1220]
8001cd72:	18 98       	mov	r8,r12
8001cd74:	ef 48 ff fc 	st.w	r7[-4],r8


	imu1->raw_channels[GYRO_OFFSET+IMU_X]=(float)gyros->axes[RAW_GYRO_X];
8001cd78:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001cd7c:	90 28       	ld.sh	r8,r8[0x4]
8001cd7e:	e5 a6 09 08 	cop	cp0,cr9,cr0,cr8,0x4c
8001cd82:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001cd86:	f1 49 00 cc 	st.w	r8[204],r9
	imu1->raw_channels[GYRO_OFFSET+IMU_Y]=(float)gyros->axes[RAW_GYRO_Y];
8001cd8a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001cd8e:	90 18       	ld.sh	r8,r8[0x2]
8001cd90:	e5 a6 09 08 	cop	cp0,cr9,cr0,cr8,0x4c
8001cd94:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001cd98:	f1 49 00 d0 	st.w	r8[208],r9
	imu1->raw_channels[GYRO_OFFSET+IMU_Z]=(float)gyros->axes[RAW_GYRO_Z];
8001cd9c:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001cda0:	90 38       	ld.sh	r8,r8[0x6]
8001cda2:	e5 a6 09 08 	cop	cp0,cr9,cr0,cr8,0x4c
8001cda6:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001cdaa:	f1 49 00 d4 	st.w	r8[212],r9

	imu1->raw_channels[ACC_OFFSET+IMU_X]=(float)accs->axes[RAW_ACC_X];
8001cdae:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001cdb2:	90 38       	ld.sh	r8,r8[0x6]
8001cdb4:	e5 a6 09 08 	cop	cp0,cr9,cr0,cr8,0x4c
8001cdb8:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001cdbc:	f1 49 00 d8 	st.w	r8[216],r9
	imu1->raw_channels[ACC_OFFSET+IMU_Y]=(float)accs->axes[RAW_ACC_Y];
8001cdc0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001cdc4:	90 48       	ld.sh	r8,r8[0x8]
8001cdc6:	e5 a6 09 08 	cop	cp0,cr9,cr0,cr8,0x4c
8001cdca:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001cdce:	f1 49 00 dc 	st.w	r8[220],r9
	imu1->raw_channels[ACC_OFFSET+IMU_Z]=(float)accs->axes[RAW_ACC_Z];
8001cdd2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001cdd6:	90 58       	ld.sh	r8,r8[0xa]
8001cdd8:	e5 a6 09 08 	cop	cp0,cr9,cr0,cr8,0x4c
8001cddc:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001cde0:	f1 49 00 e0 	st.w	r8[224],r9

	imu1->raw_channels[COMPASS_OFFSET+IMU_X]=(float)-compass->axes[RAW_COMPASS_X];
8001cde4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001cde8:	90 58       	ld.sh	r8,r8[0xa]
8001cdea:	5c 38       	neg	r8
8001cdec:	e5 a6 09 08 	cop	cp0,cr9,cr0,cr8,0x4c
8001cdf0:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001cdf4:	f1 49 00 e4 	st.w	r8[228],r9
	imu1->raw_channels[COMPASS_OFFSET+IMU_Y]=(float)-compass->axes[RAW_COMPASS_Y];
8001cdf8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001cdfc:	90 38       	ld.sh	r8,r8[0x6]
8001cdfe:	5c 38       	neg	r8
8001ce00:	e5 a6 09 08 	cop	cp0,cr9,cr0,cr8,0x4c
8001ce04:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001ce08:	f1 49 00 e8 	st.w	r8[232],r9
	imu1->raw_channels[COMPASS_OFFSET+IMU_Z]=(float)compass->axes[RAW_COMPASS_Z];
8001ce0c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001ce10:	90 48       	ld.sh	r8,r8[0x8]
8001ce12:	e5 a6 09 08 	cop	cp0,cr9,cr0,cr8,0x4c
8001ce16:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001ce1a:	f1 49 00 ec 	st.w	r8[236],r9
	
}
8001ce1e:	2f bd       	sub	sp,-20
8001ce20:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001ce24:	80 01       	ld.sh	r1,r0[0x0]
8001ce26:	cb d2       	brcc	8001cda0 <imu_get_raw_data+0x5c>

8001ce28 <calibrate_Gyros>:

void calibrate_Gyros(Imu_Data_t *imu1) {
8001ce28:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
8001ce2c:	1a 97       	mov	r7,sp
8001ce2e:	20 3d       	sub	sp,12
8001ce30:	4e 86       	lddpc	r6,8001cfd0 <calibrate_Gyros+0x1a8>
8001ce32:	1e 26       	rsub	r6,pc
8001ce34:	ef 4c ff f4 	st.w	r7[-12],r12
	int i,j;
	imu_get_raw_data(imu1);
8001ce38:	ee fc ff f4 	ld.w	r12,r7[-12]
8001ce3c:	f0 16 00 8c 	mcall	r6[560]
	for (j=0; j<3; j++) {
8001ce40:	30 08       	mov	r8,0
8001ce42:	ef 48 ff fc 	st.w	r7[-4],r8
8001ce46:	c1 48       	rjmp	8001ce6e <calibrate_Gyros+0x46>
		imu1->raw_bias[j]=(float)imu1->raw_channels[j];
8001ce48:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001ce4c:	ee fa ff fc 	ld.w	r10,r7[-4]
8001ce50:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001ce54:	2c da       	sub	r10,-51
8001ce56:	f0 0a 03 2a 	ld.w	r10,r8[r10<<0x2]
8001ce5a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001ce5e:	2c 49       	sub	r9,-60
8001ce60:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
}

void calibrate_Gyros(Imu_Data_t *imu1) {
	int i,j;
	imu_get_raw_data(imu1);
	for (j=0; j<3; j++) {
8001ce64:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001ce68:	2f f8       	sub	r8,-1
8001ce6a:	ef 48 ff fc 	st.w	r7[-4],r8
8001ce6e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001ce72:	58 28       	cp.w	r8,2
8001ce74:	fe 9a ff ea 	brle	8001ce48 <calibrate_Gyros+0x20>
		imu1->raw_bias[j]=(float)imu1->raw_channels[j];
	}
	
	for (i=0; i<100; i++) {
8001ce78:	30 08       	mov	r8,0
8001ce7a:	ef 48 ff f8 	st.w	r7[-8],r8
8001ce7e:	c9 f8       	rjmp	8001cfbc <calibrate_Gyros+0x194>
		imu_get_raw_data(imu1);
8001ce80:	ee fc ff f4 	ld.w	r12,r7[-12]
8001ce84:	f0 16 00 8c 	mcall	r6[560]

		//imu1->raw_bias[0+ACC_OFFSET]  = (0.9*imu1->raw_bias[0+ACC_OFFSET]+0.1*(float)imu1->raw_channels[0+ACC_OFFSET]);
		//imu1->raw_bias[1+ACC_OFFSET]  = (0.9*imu1->raw_bias[1+ACC_OFFSET]+0.1*(float)imu1->raw_channels[1+ACC_OFFSET]);
		//imu1->raw_bias[2+ACC_OFFSET]  = (0.9*imu1->raw_bias[2+ACC_OFFSET]+0.1*((float)imu1->raw_channels[2+ACC_OFFSET]-imu1->raw_scale[2+ACC_OFFSET]));
		for (j=0; j<3; j++) {
8001ce88:	30 08       	mov	r8,0
8001ce8a:	ef 48 ff fc 	st.w	r7[-4],r8
8001ce8e:	c8 a8       	rjmp	8001cfa2 <calibrate_Gyros+0x17a>
			imu1->raw_bias[j]=(0.9*imu1->raw_bias[j]+0.1*(float)imu1->raw_channels[j]);
8001ce90:	ee f5 ff fc 	ld.w	r5,r7[-4]
8001ce94:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001ce98:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001ce9c:	2c 49       	sub	r9,-60
8001ce9e:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8001cea2:	10 9c       	mov	r12,r8
8001cea4:	f0 16 00 02 	mcall	r6[8]
8001cea8:	e0 68 cc cd 	mov	r8,52429
8001ceac:	ea 18 cc cc 	orh	r8,0xcccc
8001ceb0:	e0 69 cc cc 	mov	r9,52428
8001ceb4:	ea 19 3f ec 	orh	r9,0x3fec
8001ceb8:	f0 16 00 03 	mcall	r6[12]
8001cebc:	14 98       	mov	r8,r10
8001cebe:	16 99       	mov	r9,r11
8001cec0:	10 92       	mov	r2,r8
8001cec2:	12 93       	mov	r3,r9
8001cec4:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001cec8:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001cecc:	2c d9       	sub	r9,-51
8001cece:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8001ced2:	10 9c       	mov	r12,r8
8001ced4:	f0 16 00 02 	mcall	r6[8]
8001ced8:	e0 68 99 9a 	mov	r8,39322
8001cedc:	ea 18 99 99 	orh	r8,0x9999
8001cee0:	e0 69 99 99 	mov	r9,39321
8001cee4:	ea 19 3f b9 	orh	r9,0x3fb9
8001cee8:	f0 16 00 03 	mcall	r6[12]
8001ceec:	14 98       	mov	r8,r10
8001ceee:	16 99       	mov	r9,r11
8001cef0:	04 9a       	mov	r10,r2
8001cef2:	06 9b       	mov	r11,r3
8001cef4:	f0 16 00 05 	mcall	r6[20]
8001cef8:	14 98       	mov	r8,r10
8001cefa:	16 99       	mov	r9,r11
8001cefc:	10 9a       	mov	r10,r8
8001cefe:	12 9b       	mov	r11,r9
8001cf00:	f0 16 00 09 	mcall	r6[36]
8001cf04:	18 9a       	mov	r10,r12
8001cf06:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001cf0a:	ea c9 ff c4 	sub	r9,r5,-60
8001cf0e:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
			imu1->attitude.raw_mag_mean[j] = (1.0-MAG_LPF)*imu1->attitude.raw_mag_mean[j]+MAG_LPF*((float)imu1->raw_channels[j+COMPASS_OFFSET]);
8001cf12:	ee f5 ff fc 	ld.w	r5,r7[-4]
8001cf16:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001cf1a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001cf1e:	2d 59       	sub	r9,-43
8001cf20:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8001cf24:	10 9c       	mov	r12,r8
8001cf26:	f0 16 00 02 	mcall	r6[8]
8001cf2a:	e0 68 cc cd 	mov	r8,52429
8001cf2e:	ea 18 cc cc 	orh	r8,0xcccc
8001cf32:	e0 69 cc cc 	mov	r9,52428
8001cf36:	ea 19 3f ec 	orh	r9,0x3fec
8001cf3a:	f0 16 00 03 	mcall	r6[12]
8001cf3e:	14 98       	mov	r8,r10
8001cf40:	16 99       	mov	r9,r11
8001cf42:	10 92       	mov	r2,r8
8001cf44:	12 93       	mov	r3,r9
8001cf46:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001cf4a:	f0 c9 ff fa 	sub	r9,r8,-6
8001cf4e:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001cf52:	2c d9       	sub	r9,-51
8001cf54:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8001cf58:	10 9c       	mov	r12,r8
8001cf5a:	f0 16 00 02 	mcall	r6[8]
8001cf5e:	e0 68 99 9a 	mov	r8,39322
8001cf62:	ea 18 99 99 	orh	r8,0x9999
8001cf66:	e0 69 99 99 	mov	r9,39321
8001cf6a:	ea 19 3f b9 	orh	r9,0x3fb9
8001cf6e:	f0 16 00 03 	mcall	r6[12]
8001cf72:	14 98       	mov	r8,r10
8001cf74:	16 99       	mov	r9,r11
8001cf76:	04 9a       	mov	r10,r2
8001cf78:	06 9b       	mov	r11,r3
8001cf7a:	f0 16 00 05 	mcall	r6[20]
8001cf7e:	14 98       	mov	r8,r10
8001cf80:	16 99       	mov	r9,r11
8001cf82:	10 9a       	mov	r10,r8
8001cf84:	12 9b       	mov	r11,r9
8001cf86:	f0 16 00 09 	mcall	r6[36]
8001cf8a:	18 9a       	mov	r10,r12
8001cf8c:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001cf90:	ea c9 ff d5 	sub	r9,r5,-43
8001cf94:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		imu_get_raw_data(imu1);

		//imu1->raw_bias[0+ACC_OFFSET]  = (0.9*imu1->raw_bias[0+ACC_OFFSET]+0.1*(float)imu1->raw_channels[0+ACC_OFFSET]);
		//imu1->raw_bias[1+ACC_OFFSET]  = (0.9*imu1->raw_bias[1+ACC_OFFSET]+0.1*(float)imu1->raw_channels[1+ACC_OFFSET]);
		//imu1->raw_bias[2+ACC_OFFSET]  = (0.9*imu1->raw_bias[2+ACC_OFFSET]+0.1*((float)imu1->raw_channels[2+ACC_OFFSET]-imu1->raw_scale[2+ACC_OFFSET]));
		for (j=0; j<3; j++) {
8001cf98:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001cf9c:	2f f8       	sub	r8,-1
8001cf9e:	ef 48 ff fc 	st.w	r7[-4],r8
8001cfa2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001cfa6:	58 28       	cp.w	r8,2
8001cfa8:	fe 9a ff 74 	brle	8001ce90 <calibrate_Gyros+0x68>
			imu1->raw_bias[j]=(0.9*imu1->raw_bias[j]+0.1*(float)imu1->raw_channels[j]);
			imu1->attitude.raw_mag_mean[j] = (1.0-MAG_LPF)*imu1->attitude.raw_mag_mean[j]+MAG_LPF*((float)imu1->raw_channels[j+COMPASS_OFFSET]);
		}
		delay_ms(4);
8001cfac:	30 4c       	mov	r12,4
8001cfae:	f0 16 00 fa 	mcall	r6[1000]
	imu_get_raw_data(imu1);
	for (j=0; j<3; j++) {
		imu1->raw_bias[j]=(float)imu1->raw_channels[j];
	}
	
	for (i=0; i<100; i++) {
8001cfb2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001cfb6:	2f f8       	sub	r8,-1
8001cfb8:	ef 48 ff f8 	st.w	r7[-8],r8
8001cfbc:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001cfc0:	e0 48 00 63 	cp.w	r8,99
8001cfc4:	fe 9a ff 5e 	brle	8001ce80 <calibrate_Gyros+0x58>
		}
		delay_ms(4);
	}


}
8001cfc8:	2f dd       	sub	sp,-12
8001cfca:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
8001cfce:	00 00       	add	r0,r0
8001cfd0:	80 01       	ld.sh	r1,r0[0x0]
8001cfd2:	cc b6       	brmi	8001cf68 <calibrate_Gyros+0x140>

8001cfd4 <imu_update>:

void imu_update(Imu_Data_t *imu1, position_estimator_t *pos_est, pressure_data *barometer, gps_Data_type *gps){
8001cfd4:	eb cd 40 c0 	pushm	r6-r7,lr
8001cfd8:	1a 97       	mov	r7,sp
8001cfda:	20 5d       	sub	sp,20
8001cfdc:	4b 46       	lddpc	r6,8001d0ac <imu_update+0xd8>
8001cfde:	1e 26       	rsub	r6,pc
8001cfe0:	ef 4c ff f8 	st.w	r7[-8],r12
8001cfe4:	ef 4b ff f4 	st.w	r7[-12],r11
8001cfe8:	ef 4a ff f0 	st.w	r7[-16],r10
8001cfec:	ef 49 ff ec 	st.w	r7[-20],r9
	uint32_t t=get_time_ticks();
8001cff0:	f0 16 00 4c 	mcall	r6[304]
8001cff4:	18 98       	mov	r8,r12
8001cff6:	ef 48 ff fc 	st.w	r7[-4],r8
	
	if (!imu_last_update_init)
8001cffa:	ec f8 02 c4 	ld.w	r8,r6[708]
8001cffe:	11 88       	ld.ub	r8,r8[0x0]
8001d000:	ec 18 00 01 	eorl	r8,0x1
8001d004:	5c 58       	castu.b	r8
8001d006:	c0 c0       	breq	8001d01e <imu_update+0x4a>
	{
		imu1->last_update = t;
8001d008:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001d00c:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001d010:	f1 49 01 38 	st.w	r8[312],r9
		imu_last_update_init = true;
8001d014:	ec f9 02 c4 	ld.w	r9,r6[708]
8001d018:	30 18       	mov	r8,1
8001d01a:	b2 88       	st.b	r9[0x0],r8
8001d01c:	c4 48       	rjmp	8001d0a4 <imu_update+0xd0>
	}else{
		imu1->dt=ticks_to_seconds(t - imu1->last_update);
8001d01e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001d022:	f0 f8 01 38 	ld.w	r8,r8[312]
8001d026:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001d02a:	f2 08 01 08 	sub	r8,r9,r8
8001d02e:	10 9c       	mov	r12,r8
8001d030:	f0 16 00 ae 	mcall	r6[696]
8001d034:	18 99       	mov	r9,r12
8001d036:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001d03a:	f1 49 01 40 	st.w	r8[320],r9
		imu1->last_update=t;
8001d03e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001d042:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001d046:	f1 49 01 38 	st.w	r8[312],r9
		qfilter(&imu1->attitude, &imu1->raw_channels, imu1->dt, false);
8001d04a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001d04e:	f0 fa 01 40 	ld.w	r10,r8[320]
8001d052:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001d056:	f0 cb ff 34 	sub	r11,r8,-204
8001d05a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001d05e:	30 09       	mov	r9,0
8001d060:	10 9c       	mov	r12,r8
8001d062:	f0 16 01 58 	mcall	r6[1376]
		if (imu1->attitude.calibration_level==OFF) {
8001d066:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001d06a:	f1 38 00 b8 	ld.ub	r8,r8[184]
8001d06e:	58 08       	cp.w	r8,0
8001d070:	c1 a1       	brne	8001d0a4 <imu_update+0xd0>
			position_integration(pos_est, &imu1->attitude, imu1->dt);
8001d072:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001d076:	f0 f9 01 40 	ld.w	r9,r8[320]
8001d07a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001d07e:	12 9a       	mov	r10,r9
8001d080:	10 9b       	mov	r11,r8
8001d082:	ee fc ff f4 	ld.w	r12,r7[-12]
8001d086:	f0 16 01 fb 	mcall	r6[2028]
			position_correction(pos_est, barometer, gps, imu1->dt);
8001d08a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001d08e:	f0 f8 01 40 	ld.w	r8,r8[320]
8001d092:	10 99       	mov	r9,r8
8001d094:	ee fa ff ec 	ld.w	r10,r7[-20]
8001d098:	ee fb ff f0 	ld.w	r11,r7[-16]
8001d09c:	ee fc ff f4 	ld.w	r12,r7[-12]
8001d0a0:	f0 16 01 dc 	mcall	r6[1904]
		}
	}
}
8001d0a4:	2f bd       	sub	sp,-20
8001d0a6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001d0aa:	00 00       	add	r0,r0
8001d0ac:	80 01       	ld.sh	r1,r0[0x0]
8001d0ae:	ce 62       	brcc	8001d07a <imu_update+0xa6>

8001d0b0 <scalar_product>:
	return out;
}


float static inline scalar_product(const float u[], const float v[])
{
8001d0b0:	eb cd 40 80 	pushm	r7,lr
8001d0b4:	1a 97       	mov	r7,sp
8001d0b6:	20 3d       	sub	sp,12
8001d0b8:	ef 4c ff f8 	st.w	r7[-8],r12
8001d0bc:	ef 4b ff f4 	st.w	r7[-12],r11
	float scp = (u[0]*v[0]+u[1]*v[1]+u[2]*v[2]);
8001d0c0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001d0c4:	70 09       	ld.w	r9,r8[0x0]
8001d0c6:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001d0ca:	70 08       	ld.w	r8,r8[0x0]
8001d0cc:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8001d0d0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001d0d4:	2f c8       	sub	r8,-4
8001d0d6:	70 0a       	ld.w	r10,r8[0x0]
8001d0d8:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001d0dc:	2f c8       	sub	r8,-4
8001d0de:	70 08       	ld.w	r8,r8[0x0]
8001d0e0:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8001d0e4:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001d0e8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001d0ec:	2f 88       	sub	r8,-8
8001d0ee:	70 0a       	ld.w	r10,r8[0x0]
8001d0f0:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001d0f4:	2f 88       	sub	r8,-8
8001d0f6:	70 08       	ld.w	r8,r8[0x0]
8001d0f8:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8001d0fc:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8001d100:	ef 48 ff fc 	st.w	r7[-4],r8
	return scp;
8001d104:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8001d108:	10 9c       	mov	r12,r8
8001d10a:	2f dd       	sub	sp,-12
8001d10c:	e3 cd 80 80 	ldm	sp++,r7,pc

8001d110 <quat_multi>:
	out[2] = u[0] * v[1] - u[1] * v[0];
}


UQuat_t static inline quat_multi(const UQuat_t q1, const UQuat_t q2)
{
8001d110:	eb cd 40 e8 	pushm	r3,r5-r7,lr
8001d114:	1a 97       	mov	r7,sp
8001d116:	20 7d       	sub	sp,28
8001d118:	4b d6       	lddpc	r6,8001d20c <quat_multi+0xfc>
8001d11a:	1e 26       	rsub	r6,pc
8001d11c:	ee c8 ff ec 	sub	r8,r7,-20
8001d120:	18 95       	mov	r5,r12
	float tmp[3];
	UQuat_t out;
	tmp[0] = q1.v[1] * q2.v[2] - q1.v[2]*q2.v[1];
8001d122:	70 2a       	ld.w	r10,r8[0x8]
8001d124:	70 79       	ld.w	r9,r8[0x1c]
8001d126:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8001d12a:	70 3b       	ld.w	r11,r8[0xc]
8001d12c:	70 69       	ld.w	r9,r8[0x18]
8001d12e:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8001d132:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8001d136:	ef 49 ff f4 	st.w	r7[-12],r9
	tmp[1] = q1.v[2] * q2.v[0] - q1.v[0]*q2.v[2];
8001d13a:	70 3a       	ld.w	r10,r8[0xc]
8001d13c:	70 59       	ld.w	r9,r8[0x14]
8001d13e:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8001d142:	70 1b       	ld.w	r11,r8[0x4]
8001d144:	70 79       	ld.w	r9,r8[0x1c]
8001d146:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8001d14a:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8001d14e:	ef 49 ff f8 	st.w	r7[-8],r9
	tmp[2] = q1.v[0] * q2.v[1] - q1.v[1]*q2.v[0];
8001d152:	70 1a       	ld.w	r10,r8[0x4]
8001d154:	70 69       	ld.w	r9,r8[0x18]
8001d156:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8001d15a:	70 2b       	ld.w	r11,r8[0x8]
8001d15c:	70 59       	ld.w	r9,r8[0x14]
8001d15e:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8001d162:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8001d166:	ef 49 ff fc 	st.w	r7[-4],r9
	out.v[0] = q2.s*q1.v[0] + q1.s *q2.v[0] +tmp[0];
8001d16a:	70 4a       	ld.w	r10,r8[0x10]
8001d16c:	70 19       	ld.w	r9,r8[0x4]
8001d16e:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8001d172:	70 0b       	ld.w	r11,r8[0x0]
8001d174:	70 59       	ld.w	r9,r8[0x14]
8001d176:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8001d17a:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
8001d17e:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001d182:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
8001d186:	ef 49 ff e8 	st.w	r7[-24],r9
	out.v[1] = q2.s*q1.v[1] + q1.s *q2.v[1] +tmp[1];
8001d18a:	70 4a       	ld.w	r10,r8[0x10]
8001d18c:	70 29       	ld.w	r9,r8[0x8]
8001d18e:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8001d192:	70 0b       	ld.w	r11,r8[0x0]
8001d194:	70 69       	ld.w	r9,r8[0x18]
8001d196:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8001d19a:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
8001d19e:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001d1a2:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
8001d1a6:	ef 49 ff ec 	st.w	r7[-20],r9
	out.v[2] = q2.s*q1.v[2] + q1.s *q2.v[2] +tmp[2];
8001d1aa:	70 4a       	ld.w	r10,r8[0x10]
8001d1ac:	70 39       	ld.w	r9,r8[0xc]
8001d1ae:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8001d1b2:	70 0b       	ld.w	r11,r8[0x0]
8001d1b4:	70 79       	ld.w	r9,r8[0x1c]
8001d1b6:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8001d1ba:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
8001d1be:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001d1c2:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
8001d1c6:	ef 49 ff f0 	st.w	r7[-16],r9
	out.s= q1.s*q2.s - scalar_product(q1.v, q2.v);
8001d1ca:	70 0a       	ld.w	r10,r8[0x0]
8001d1cc:	70 49       	ld.w	r9,r8[0x10]
8001d1ce:	e5 a2 03 a9 	cop	cp0,cr3,cr10,cr9,0x44
8001d1d2:	f0 c9 ff f0 	sub	r9,r8,-16
8001d1d6:	2f c9       	sub	r9,-4
8001d1d8:	2f c8       	sub	r8,-4
8001d1da:	12 9b       	mov	r11,r9
8001d1dc:	10 9c       	mov	r12,r8
8001d1de:	c6 9f       	rcall	8001d0b0 <scalar_product>
8001d1e0:	18 98       	mov	r8,r12
8001d1e2:	e5 a1 08 38 	cop	cp0,cr8,cr3,cr8,0x42
8001d1e6:	ef 48 ff e4 	st.w	r7[-28],r8
	
	return out;
8001d1ea:	0a 98       	mov	r8,r5
8001d1ec:	ee c9 00 1c 	sub	r9,r7,28
8001d1f0:	20 08       	sub	r8,0
8001d1f2:	20 09       	sub	r9,0
8001d1f4:	72 0a       	ld.w	r10,r9[0x0]
8001d1f6:	91 0a       	st.w	r8[0x0],r10
8001d1f8:	72 1a       	ld.w	r10,r9[0x4]
8001d1fa:	91 1a       	st.w	r8[0x4],r10
8001d1fc:	72 2a       	ld.w	r10,r9[0x8]
8001d1fe:	91 2a       	st.w	r8[0x8],r10
8001d200:	72 39       	ld.w	r9,r9[0xc]
8001d202:	91 39       	st.w	r8[0xc],r9
}
8001d204:	0a 9c       	mov	r12,r5
8001d206:	2f 9d       	sub	sp,-28
8001d208:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
8001d20c:	80 01       	ld.sh	r1,r0[0x0]
8001d20e:	cf 9e       	rcall	8001d000 <imu_update+0x2c>

8001d210 <quat_inv>:

UQuat_t static inline quat_inv(const UQuat_t q)
{
8001d210:	eb cd 40 80 	pushm	r7,lr
8001d214:	1a 97       	mov	r7,sp
8001d216:	20 5d       	sub	sp,20
8001d218:	ee c9 ff f8 	sub	r9,r7,-8
8001d21c:	18 9a       	mov	r10,r12
	int i;
	
	UQuat_t qinv;
	qinv.s = q.s;
8001d21e:	72 08       	ld.w	r8,r9[0x0]
8001d220:	ef 48 ff ec 	st.w	r7[-20],r8
	for (i=0;i<3;i++)
8001d224:	30 08       	mov	r8,0
8001d226:	ef 48 ff fc 	st.w	r7[-4],r8
8001d22a:	c1 58       	rjmp	8001d254 <quat_inv+0x44>
	{
		qinv.v[i] = -q.v[i];
8001d22c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001d230:	ee fb ff fc 	ld.w	r11,r7[-4]
8001d234:	2f fb       	sub	r11,-1
8001d236:	f2 0b 03 2b 	ld.w	r11,r9[r11<<0x2]
8001d23a:	ee 1b 80 00 	eorh	r11,0x8000
8001d23e:	2f f8       	sub	r8,-1
8001d240:	a3 68       	lsl	r8,0x2
8001d242:	ee 08 00 08 	add	r8,r7,r8
8001d246:	f1 4b ff ec 	st.w	r8[-20],r11
{
	int i;
	
	UQuat_t qinv;
	qinv.s = q.s;
	for (i=0;i<3;i++)
8001d24a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001d24e:	2f f8       	sub	r8,-1
8001d250:	ef 48 ff fc 	st.w	r7[-4],r8
8001d254:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001d258:	58 28       	cp.w	r8,2
8001d25a:	fe 9a ff e9 	brle	8001d22c <quat_inv+0x1c>
	{
		qinv.v[i] = -q.v[i];
	}
	return qinv;
8001d25e:	14 98       	mov	r8,r10
8001d260:	ee c9 00 14 	sub	r9,r7,20
8001d264:	20 08       	sub	r8,0
8001d266:	20 09       	sub	r9,0
8001d268:	72 0b       	ld.w	r11,r9[0x0]
8001d26a:	91 0b       	st.w	r8[0x0],r11
8001d26c:	72 1b       	ld.w	r11,r9[0x4]
8001d26e:	91 1b       	st.w	r8[0x4],r11
8001d270:	72 2b       	ld.w	r11,r9[0x8]
8001d272:	91 2b       	st.w	r8[0x8],r11
8001d274:	72 39       	ld.w	r9,r9[0xc]
8001d276:	91 39       	st.w	r8[0xc],r9
}
8001d278:	14 9c       	mov	r12,r10
8001d27a:	2f bd       	sub	sp,-20
8001d27c:	e3 cd 80 80 	ldm	sp++,r7,pc

8001d280 <quat_global_to_local>:

UQuat_t static inline quat_global_to_local(const UQuat_t qe, const UQuat_t qvect)
{
8001d280:	eb cd 40 e8 	pushm	r3,r5-r7,lr
8001d284:	1a 97       	mov	r7,sp
8001d286:	20 cd       	sub	sp,48
8001d288:	4b c6       	lddpc	r6,8001d378 <quat_global_to_local+0xf8>
8001d28a:	1e 26       	rsub	r6,pc
8001d28c:	ee c5 ff ec 	sub	r5,r7,-20
8001d290:	18 93       	mov	r3,r12
	UQuat_t qinv, qtmp;
	
	qinv = quat_inv(qe);
8001d292:	ee ca 00 10 	sub	r10,r7,16
8001d296:	20 4d       	sub	sp,16
8001d298:	1a 98       	mov	r8,sp
8001d29a:	0a 99       	mov	r9,r5
8001d29c:	20 08       	sub	r8,0
8001d29e:	20 09       	sub	r9,0
8001d2a0:	72 0b       	ld.w	r11,r9[0x0]
8001d2a2:	91 0b       	st.w	r8[0x0],r11
8001d2a4:	72 1b       	ld.w	r11,r9[0x4]
8001d2a6:	91 1b       	st.w	r8[0x4],r11
8001d2a8:	72 2b       	ld.w	r11,r9[0x8]
8001d2aa:	91 2b       	st.w	r8[0x8],r11
8001d2ac:	72 39       	ld.w	r9,r9[0xc]
8001d2ae:	91 39       	st.w	r8[0xc],r9
8001d2b0:	14 9c       	mov	r12,r10
8001d2b2:	ca ff       	rcall	8001d210 <quat_inv>
8001d2b4:	2f cd       	sub	sp,-16
	qtmp = quat_multi(qinv,qvect);
8001d2b6:	ee ca 00 20 	sub	r10,r7,32
8001d2ba:	20 4d       	sub	sp,16
8001d2bc:	1a 98       	mov	r8,sp
8001d2be:	ea c9 ff f0 	sub	r9,r5,-16
8001d2c2:	20 08       	sub	r8,0
8001d2c4:	20 09       	sub	r9,0
8001d2c6:	72 0b       	ld.w	r11,r9[0x0]
8001d2c8:	91 0b       	st.w	r8[0x0],r11
8001d2ca:	72 1b       	ld.w	r11,r9[0x4]
8001d2cc:	91 1b       	st.w	r8[0x4],r11
8001d2ce:	72 2b       	ld.w	r11,r9[0x8]
8001d2d0:	91 2b       	st.w	r8[0x8],r11
8001d2d2:	72 39       	ld.w	r9,r9[0xc]
8001d2d4:	91 39       	st.w	r8[0xc],r9
8001d2d6:	20 4d       	sub	sp,16
8001d2d8:	1a 98       	mov	r8,sp
8001d2da:	ee c9 00 10 	sub	r9,r7,16
8001d2de:	20 08       	sub	r8,0
8001d2e0:	20 09       	sub	r9,0
8001d2e2:	72 0b       	ld.w	r11,r9[0x0]
8001d2e4:	91 0b       	st.w	r8[0x0],r11
8001d2e6:	72 1b       	ld.w	r11,r9[0x4]
8001d2e8:	91 1b       	st.w	r8[0x4],r11
8001d2ea:	72 2b       	ld.w	r11,r9[0x8]
8001d2ec:	91 2b       	st.w	r8[0x8],r11
8001d2ee:	72 39       	ld.w	r9,r9[0xc]
8001d2f0:	91 39       	st.w	r8[0xc],r9
8001d2f2:	14 9c       	mov	r12,r10
8001d2f4:	c0 ef       	rcall	8001d110 <quat_multi>
8001d2f6:	2f 8d       	sub	sp,-32
	qtmp = quat_multi(qtmp,qe);
8001d2f8:	ee ca 00 30 	sub	r10,r7,48
8001d2fc:	20 4d       	sub	sp,16
8001d2fe:	1a 98       	mov	r8,sp
8001d300:	0a 99       	mov	r9,r5
8001d302:	20 08       	sub	r8,0
8001d304:	20 09       	sub	r9,0
8001d306:	72 0b       	ld.w	r11,r9[0x0]
8001d308:	91 0b       	st.w	r8[0x0],r11
8001d30a:	72 1b       	ld.w	r11,r9[0x4]
8001d30c:	91 1b       	st.w	r8[0x4],r11
8001d30e:	72 2b       	ld.w	r11,r9[0x8]
8001d310:	91 2b       	st.w	r8[0x8],r11
8001d312:	72 39       	ld.w	r9,r9[0xc]
8001d314:	91 39       	st.w	r8[0xc],r9
8001d316:	20 4d       	sub	sp,16
8001d318:	1a 98       	mov	r8,sp
8001d31a:	ee c9 00 20 	sub	r9,r7,32
8001d31e:	20 08       	sub	r8,0
8001d320:	20 09       	sub	r9,0
8001d322:	72 0b       	ld.w	r11,r9[0x0]
8001d324:	91 0b       	st.w	r8[0x0],r11
8001d326:	72 1b       	ld.w	r11,r9[0x4]
8001d328:	91 1b       	st.w	r8[0x4],r11
8001d32a:	72 2b       	ld.w	r11,r9[0x8]
8001d32c:	91 2b       	st.w	r8[0x8],r11
8001d32e:	72 39       	ld.w	r9,r9[0xc]
8001d330:	91 39       	st.w	r8[0xc],r9
8001d332:	14 9c       	mov	r12,r10
8001d334:	ce ee       	rcall	8001d110 <quat_multi>
8001d336:	2f 8d       	sub	sp,-32
8001d338:	ee c8 00 20 	sub	r8,r7,32
8001d33c:	ee c9 00 30 	sub	r9,r7,48
8001d340:	20 08       	sub	r8,0
8001d342:	20 09       	sub	r9,0
8001d344:	72 0a       	ld.w	r10,r9[0x0]
8001d346:	91 0a       	st.w	r8[0x0],r10
8001d348:	72 1a       	ld.w	r10,r9[0x4]
8001d34a:	91 1a       	st.w	r8[0x4],r10
8001d34c:	72 2a       	ld.w	r10,r9[0x8]
8001d34e:	91 2a       	st.w	r8[0x8],r10
8001d350:	72 39       	ld.w	r9,r9[0xc]
8001d352:	91 39       	st.w	r8[0xc],r9

	return qtmp;
8001d354:	06 98       	mov	r8,r3
8001d356:	ee c9 00 20 	sub	r9,r7,32
8001d35a:	20 08       	sub	r8,0
8001d35c:	20 09       	sub	r9,0
8001d35e:	72 0a       	ld.w	r10,r9[0x0]
8001d360:	91 0a       	st.w	r8[0x0],r10
8001d362:	72 1a       	ld.w	r10,r9[0x4]
8001d364:	91 1a       	st.w	r8[0x4],r10
8001d366:	72 2a       	ld.w	r10,r9[0x8]
8001d368:	91 2a       	st.w	r8[0x8],r10
8001d36a:	72 39       	ld.w	r9,r9[0xc]
8001d36c:	91 39       	st.w	r8[0xc],r9
}
8001d36e:	06 9c       	mov	r12,r3
8001d370:	2f 4d       	sub	sp,-48
8001d372:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
8001d376:	00 00       	add	r0,r0
8001d378:	80 01       	ld.sh	r1,r0[0x0]
8001d37a:	d1 0e       	*unknown*

8001d37c <quat_local_to_global>:

UQuat_t static inline quat_local_to_global(const UQuat_t qe, const UQuat_t qvect)
{
8001d37c:	eb cd 40 e8 	pushm	r3,r5-r7,lr
8001d380:	1a 97       	mov	r7,sp
8001d382:	20 cd       	sub	sp,48
8001d384:	4b c6       	lddpc	r6,8001d474 <quat_local_to_global+0xf8>
8001d386:	1e 26       	rsub	r6,pc
8001d388:	ee c5 ff ec 	sub	r5,r7,-20
8001d38c:	18 93       	mov	r3,r12
	UQuat_t qinv, qtmp;
	
	qinv = quat_inv(qe);
8001d38e:	ee ca 00 10 	sub	r10,r7,16
8001d392:	20 4d       	sub	sp,16
8001d394:	1a 98       	mov	r8,sp
8001d396:	0a 99       	mov	r9,r5
8001d398:	20 08       	sub	r8,0
8001d39a:	20 09       	sub	r9,0
8001d39c:	72 0b       	ld.w	r11,r9[0x0]
8001d39e:	91 0b       	st.w	r8[0x0],r11
8001d3a0:	72 1b       	ld.w	r11,r9[0x4]
8001d3a2:	91 1b       	st.w	r8[0x4],r11
8001d3a4:	72 2b       	ld.w	r11,r9[0x8]
8001d3a6:	91 2b       	st.w	r8[0x8],r11
8001d3a8:	72 39       	ld.w	r9,r9[0xc]
8001d3aa:	91 39       	st.w	r8[0xc],r9
8001d3ac:	14 9c       	mov	r12,r10
8001d3ae:	c3 1f       	rcall	8001d210 <quat_inv>
8001d3b0:	2f cd       	sub	sp,-16
	qtmp = quat_multi(qe, qvect);
8001d3b2:	ee ca 00 20 	sub	r10,r7,32
8001d3b6:	20 4d       	sub	sp,16
8001d3b8:	1a 98       	mov	r8,sp
8001d3ba:	ea c9 ff f0 	sub	r9,r5,-16
8001d3be:	20 08       	sub	r8,0
8001d3c0:	20 09       	sub	r9,0
8001d3c2:	72 0b       	ld.w	r11,r9[0x0]
8001d3c4:	91 0b       	st.w	r8[0x0],r11
8001d3c6:	72 1b       	ld.w	r11,r9[0x4]
8001d3c8:	91 1b       	st.w	r8[0x4],r11
8001d3ca:	72 2b       	ld.w	r11,r9[0x8]
8001d3cc:	91 2b       	st.w	r8[0x8],r11
8001d3ce:	72 39       	ld.w	r9,r9[0xc]
8001d3d0:	91 39       	st.w	r8[0xc],r9
8001d3d2:	20 4d       	sub	sp,16
8001d3d4:	1a 98       	mov	r8,sp
8001d3d6:	0a 99       	mov	r9,r5
8001d3d8:	20 08       	sub	r8,0
8001d3da:	20 09       	sub	r9,0
8001d3dc:	72 0b       	ld.w	r11,r9[0x0]
8001d3de:	91 0b       	st.w	r8[0x0],r11
8001d3e0:	72 1b       	ld.w	r11,r9[0x4]
8001d3e2:	91 1b       	st.w	r8[0x4],r11
8001d3e4:	72 2b       	ld.w	r11,r9[0x8]
8001d3e6:	91 2b       	st.w	r8[0x8],r11
8001d3e8:	72 39       	ld.w	r9,r9[0xc]
8001d3ea:	91 39       	st.w	r8[0xc],r9
8001d3ec:	14 9c       	mov	r12,r10
8001d3ee:	c9 1e       	rcall	8001d110 <quat_multi>
8001d3f0:	2f 8d       	sub	sp,-32
	qtmp = quat_multi(qtmp, qinv);
8001d3f2:	ee ca 00 30 	sub	r10,r7,48
8001d3f6:	20 4d       	sub	sp,16
8001d3f8:	1a 98       	mov	r8,sp
8001d3fa:	ee c9 00 10 	sub	r9,r7,16
8001d3fe:	20 08       	sub	r8,0
8001d400:	20 09       	sub	r9,0
8001d402:	72 0b       	ld.w	r11,r9[0x0]
8001d404:	91 0b       	st.w	r8[0x0],r11
8001d406:	72 1b       	ld.w	r11,r9[0x4]
8001d408:	91 1b       	st.w	r8[0x4],r11
8001d40a:	72 2b       	ld.w	r11,r9[0x8]
8001d40c:	91 2b       	st.w	r8[0x8],r11
8001d40e:	72 39       	ld.w	r9,r9[0xc]
8001d410:	91 39       	st.w	r8[0xc],r9
8001d412:	20 4d       	sub	sp,16
8001d414:	1a 98       	mov	r8,sp
8001d416:	ee c9 00 20 	sub	r9,r7,32
8001d41a:	20 08       	sub	r8,0
8001d41c:	20 09       	sub	r9,0
8001d41e:	72 0b       	ld.w	r11,r9[0x0]
8001d420:	91 0b       	st.w	r8[0x0],r11
8001d422:	72 1b       	ld.w	r11,r9[0x4]
8001d424:	91 1b       	st.w	r8[0x4],r11
8001d426:	72 2b       	ld.w	r11,r9[0x8]
8001d428:	91 2b       	st.w	r8[0x8],r11
8001d42a:	72 39       	ld.w	r9,r9[0xc]
8001d42c:	91 39       	st.w	r8[0xc],r9
8001d42e:	14 9c       	mov	r12,r10
8001d430:	c7 0e       	rcall	8001d110 <quat_multi>
8001d432:	2f 8d       	sub	sp,-32
8001d434:	ee c8 00 20 	sub	r8,r7,32
8001d438:	ee c9 00 30 	sub	r9,r7,48
8001d43c:	20 08       	sub	r8,0
8001d43e:	20 09       	sub	r9,0
8001d440:	72 0a       	ld.w	r10,r9[0x0]
8001d442:	91 0a       	st.w	r8[0x0],r10
8001d444:	72 1a       	ld.w	r10,r9[0x4]
8001d446:	91 1a       	st.w	r8[0x4],r10
8001d448:	72 2a       	ld.w	r10,r9[0x8]
8001d44a:	91 2a       	st.w	r8[0x8],r10
8001d44c:	72 39       	ld.w	r9,r9[0xc]
8001d44e:	91 39       	st.w	r8[0xc],r9
	
	return qtmp;
8001d450:	06 98       	mov	r8,r3
8001d452:	ee c9 00 20 	sub	r9,r7,32
8001d456:	20 08       	sub	r8,0
8001d458:	20 09       	sub	r9,0
8001d45a:	72 0a       	ld.w	r10,r9[0x0]
8001d45c:	91 0a       	st.w	r8[0x0],r10
8001d45e:	72 1a       	ld.w	r10,r9[0x4]
8001d460:	91 1a       	st.w	r8[0x4],r10
8001d462:	72 2a       	ld.w	r10,r9[0x8]
8001d464:	91 2a       	st.w	r8[0x8],r10
8001d466:	72 39       	ld.w	r9,r9[0xc]
8001d468:	91 39       	st.w	r8[0xc],r9
}
8001d46a:	06 9c       	mov	r12,r3
8001d46c:	2f 4d       	sub	sp,-48
8001d46e:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
8001d472:	00 00       	add	r0,r0
8001d474:	80 01       	ld.sh	r1,r0[0x0]
8001d476:	d2 0a       	popm	r12

8001d478 <fast_sqrt>:

// fast newton iteration for approximate square root
float static inline fast_sqrt(float input) {
8001d478:	eb cd 40 c0 	pushm	r6-r7,lr
8001d47c:	1a 97       	mov	r7,sp
8001d47e:	20 2d       	sub	sp,8
8001d480:	4b 26       	lddpc	r6,8001d548 <fast_sqrt+0xd0>
8001d482:	1e 26       	rsub	r6,pc
8001d484:	ef 4c ff f8 	st.w	r7[-8],r12
	if (input<0) {
8001d488:	30 18       	mov	r8,1
8001d48a:	ee fa ff f8 	ld.w	r10,r7[-8]
8001d48e:	30 09       	mov	r9,0
8001d490:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
8001d494:	e0 8c 00 03 	brvs	8001d49a <fast_sqrt+0x22>
8001d498:	c0 25       	brlt	8001d49c <fast_sqrt+0x24>
8001d49a:	30 08       	mov	r8,0
8001d49c:	5c 58       	castu.b	r8
8001d49e:	c0 30       	breq	8001d4a4 <fast_sqrt+0x2c>
		//dbg_print("negative root");
		return 0.0;
8001d4a0:	30 08       	mov	r8,0
8001d4a2:	c4 f8       	rjmp	8001d540 <fast_sqrt+0xc8>
	}
	float result=1.0;
8001d4a4:	fc 18 3f 80 	movh	r8,0x3f80
8001d4a8:	ef 48 ff fc 	st.w	r7[-4],r8
	result=0.5*(result+(input/result));
8001d4ac:	ee fb ff fc 	ld.w	r11,r7[-4]
8001d4b0:	ee fc ff f8 	ld.w	r12,r7[-8]
8001d4b4:	f0 16 00 08 	mcall	r6[32]
8001d4b8:	18 98       	mov	r8,r12
8001d4ba:	10 99       	mov	r9,r8
8001d4bc:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001d4c0:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001d4c4:	fc 18 3f 00 	movh	r8,0x3f00
8001d4c8:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8001d4cc:	ef 48 ff fc 	st.w	r7[-4],r8
	result=0.5*(result+(input/result));
8001d4d0:	ee fb ff fc 	ld.w	r11,r7[-4]
8001d4d4:	ee fc ff f8 	ld.w	r12,r7[-8]
8001d4d8:	f0 16 00 08 	mcall	r6[32]
8001d4dc:	18 98       	mov	r8,r12
8001d4de:	10 99       	mov	r9,r8
8001d4e0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001d4e4:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001d4e8:	fc 18 3f 00 	movh	r8,0x3f00
8001d4ec:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8001d4f0:	ef 48 ff fc 	st.w	r7[-4],r8
	result=0.5*(result+(input/result));
8001d4f4:	ee fb ff fc 	ld.w	r11,r7[-4]
8001d4f8:	ee fc ff f8 	ld.w	r12,r7[-8]
8001d4fc:	f0 16 00 08 	mcall	r6[32]
8001d500:	18 98       	mov	r8,r12
8001d502:	10 99       	mov	r9,r8
8001d504:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001d508:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001d50c:	fc 18 3f 00 	movh	r8,0x3f00
8001d510:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8001d514:	ef 48 ff fc 	st.w	r7[-4],r8
	result=0.5*(result+(input/result));
8001d518:	ee fb ff fc 	ld.w	r11,r7[-4]
8001d51c:	ee fc ff f8 	ld.w	r12,r7[-8]
8001d520:	f0 16 00 08 	mcall	r6[32]
8001d524:	18 98       	mov	r8,r12
8001d526:	10 99       	mov	r9,r8
8001d528:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001d52c:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001d530:	fc 18 3f 00 	movh	r8,0x3f00
8001d534:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8001d538:	ef 48 ff fc 	st.w	r7[-4],r8
	return result;
8001d53c:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8001d540:	10 9c       	mov	r12,r8
8001d542:	2f ed       	sub	sp,-8
8001d544:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001d548:	80 01       	ld.sh	r1,r0[0x0]
8001d54a:	d3 06       	*unknown*

8001d54c <quat_normalise>:
	{
		u[i] = v[i] / norm;
	}
}

static inline UQuat_t quat_normalise(const UQuat_t q) {
8001d54c:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
8001d550:	1a 97       	mov	r7,sp
8001d552:	20 6d       	sub	sp,24
8001d554:	4b f6       	lddpc	r6,8001d650 <quat_normalise+0x104>
8001d556:	1e 26       	rsub	r6,pc
8001d558:	ee c5 ff e8 	sub	r5,r7,-24
8001d55c:	18 92       	mov	r2,r12
	UQuat_t result={.s=1.0, .v={0.0, 0.0, 0.0} };
8001d55e:	fc 18 3f 80 	movh	r8,0x3f80
8001d562:	ef 48 ff e8 	st.w	r7[-24],r8
8001d566:	30 08       	mov	r8,0
8001d568:	ef 48 ff ec 	st.w	r7[-20],r8
8001d56c:	30 08       	mov	r8,0
8001d56e:	ef 48 ff f0 	st.w	r7[-16],r8
8001d572:	30 08       	mov	r8,0
8001d574:	ef 48 ff f4 	st.w	r7[-12],r8
	float snorm= SQR(q.s) + SQR(q.v[0]) + SQR(q.v[1]) + SQR(q.v[2]);
8001d578:	6a 09       	ld.w	r9,r5[0x0]
8001d57a:	6a 08       	ld.w	r8,r5[0x0]
8001d57c:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8001d580:	6a 1a       	ld.w	r10,r5[0x4]
8001d582:	6a 18       	ld.w	r8,r5[0x4]
8001d584:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8001d588:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001d58c:	6a 2a       	ld.w	r10,r5[0x8]
8001d58e:	6a 28       	ld.w	r8,r5[0x8]
8001d590:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8001d594:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001d598:	6a 3a       	ld.w	r10,r5[0xc]
8001d59a:	6a 38       	ld.w	r8,r5[0xc]
8001d59c:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8001d5a0:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8001d5a4:	ef 48 ff f8 	st.w	r7[-8],r8
	if (snorm >0.0000001) {
8001d5a8:	ee fc ff f8 	ld.w	r12,r7[-8]
8001d5ac:	f0 16 00 02 	mcall	r6[8]
8001d5b0:	14 98       	mov	r8,r10
8001d5b2:	16 99       	mov	r9,r11
8001d5b4:	30 03       	mov	r3,0
8001d5b6:	e0 6a af 48 	mov	r10,44872
8001d5ba:	ea 1a 9a bc 	orh	r10,0x9abc
8001d5be:	e0 6b d7 f2 	mov	r11,55282
8001d5c2:	ea 1b 3e 7a 	orh	r11,0x3e7a
8001d5c6:	f0 16 00 1d 	mcall	r6[116]
8001d5ca:	18 98       	mov	r8,r12
8001d5cc:	58 08       	cp.w	r8,0
8001d5ce:	c0 20       	breq	8001d5d2 <quat_normalise+0x86>
8001d5d0:	30 13       	mov	r3,1
8001d5d2:	f1 d3 c0 08 	bfextu	r8,r3,0x0,0x8
8001d5d6:	c2 b0       	breq	8001d62c <quat_normalise+0xe0>
		float norm=fast_sqrt(snorm);
8001d5d8:	ee fc ff f8 	ld.w	r12,r7[-8]
8001d5dc:	c4 ef       	rcall	8001d478 <fast_sqrt>
8001d5de:	18 98       	mov	r8,r12
8001d5e0:	ef 48 ff fc 	st.w	r7[-4],r8
		result.s=q.s/norm;
8001d5e4:	6a 08       	ld.w	r8,r5[0x0]
8001d5e6:	ee fb ff fc 	ld.w	r11,r7[-4]
8001d5ea:	10 9c       	mov	r12,r8
8001d5ec:	f0 16 00 08 	mcall	r6[32]
8001d5f0:	18 98       	mov	r8,r12
8001d5f2:	ef 48 ff e8 	st.w	r7[-24],r8
		result.v[0]=q.v[0]/norm;		result.v[1]=q.v[1]/norm;		result.v[2]=q.v[2]/norm;
8001d5f6:	6a 18       	ld.w	r8,r5[0x4]
8001d5f8:	ee fb ff fc 	ld.w	r11,r7[-4]
8001d5fc:	10 9c       	mov	r12,r8
8001d5fe:	f0 16 00 08 	mcall	r6[32]
8001d602:	18 98       	mov	r8,r12
8001d604:	ef 48 ff ec 	st.w	r7[-20],r8
8001d608:	6a 28       	ld.w	r8,r5[0x8]
8001d60a:	ee fb ff fc 	ld.w	r11,r7[-4]
8001d60e:	10 9c       	mov	r12,r8
8001d610:	f0 16 00 08 	mcall	r6[32]
8001d614:	18 98       	mov	r8,r12
8001d616:	ef 48 ff f0 	st.w	r7[-16],r8
8001d61a:	6a 38       	ld.w	r8,r5[0xc]
8001d61c:	ee fb ff fc 	ld.w	r11,r7[-4]
8001d620:	10 9c       	mov	r12,r8
8001d622:	f0 16 00 08 	mcall	r6[32]
8001d626:	18 98       	mov	r8,r12
8001d628:	ef 48 ff f4 	st.w	r7[-12],r8

	}
	return result;
8001d62c:	04 98       	mov	r8,r2
8001d62e:	ee c9 00 18 	sub	r9,r7,24
8001d632:	20 08       	sub	r8,0
8001d634:	20 09       	sub	r9,0
8001d636:	72 0a       	ld.w	r10,r9[0x0]
8001d638:	91 0a       	st.w	r8[0x0],r10
8001d63a:	72 1a       	ld.w	r10,r9[0x4]
8001d63c:	91 1a       	st.w	r8[0x4],r10
8001d63e:	72 2a       	ld.w	r10,r9[0x8]
8001d640:	91 2a       	st.w	r8[0x8],r10
8001d642:	72 39       	ld.w	r9,r9[0xc]
8001d644:	91 39       	st.w	r8[0xc],r9
}
8001d646:	04 9c       	mov	r12,r2
8001d648:	2f ad       	sub	sp,-24
8001d64a:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
8001d64e:	00 00       	add	r0,r0
8001d650:	80 01       	ld.sh	r1,r0[0x0]
8001d652:	d3 da       	popm	r0-r3,r8-r12

8001d654 <clip>:
		return b;
	}
}


static float inline clip(float input_value, float clip_value) {
8001d654:	eb cd 40 80 	pushm	r7,lr
8001d658:	1a 97       	mov	r7,sp
8001d65a:	20 2d       	sub	sp,8
8001d65c:	ef 4c ff fc 	st.w	r7[-4],r12
8001d660:	ef 4b ff f8 	st.w	r7[-8],r11
	
	if (input_value>clip_value)  return clip_value;     
8001d664:	30 18       	mov	r8,1
8001d666:	ee fa ff fc 	ld.w	r10,r7[-4]
8001d66a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001d66e:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
8001d672:	e0 8c 00 04 	brvs	8001d67a <clip+0x26>
8001d676:	e0 89 00 03 	brgt	8001d67c <clip+0x28>
8001d67a:	30 08       	mov	r8,0
8001d67c:	5c 58       	castu.b	r8
8001d67e:	c0 40       	breq	8001d686 <clip+0x32>
8001d680:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001d684:	c1 98       	rjmp	8001d6b6 <clip+0x62>
	if (input_value<-clip_value) return -clip_value; 
8001d686:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001d68a:	10 9a       	mov	r10,r8
8001d68c:	ee 1a 80 00 	eorh	r10,0x8000
8001d690:	30 18       	mov	r8,1
8001d692:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001d696:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
8001d69a:	e0 8c 00 04 	brvs	8001d6a2 <clip+0x4e>
8001d69e:	e0 89 00 03 	brgt	8001d6a4 <clip+0x50>
8001d6a2:	30 08       	mov	r8,0
8001d6a4:	5c 58       	castu.b	r8
8001d6a6:	c0 60       	breq	8001d6b2 <clip+0x5e>
8001d6a8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001d6ac:	ee 18 80 00 	eorh	r8,0x8000
8001d6b0:	c0 38       	rjmp	8001d6b6 <clip+0x62>
	return input_value;
8001d6b2:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8001d6b6:	10 9c       	mov	r12,r8
8001d6b8:	2f ed       	sub	sp,-8
8001d6ba:	e3 cd 80 80 	ldm	sp++,r7,pc

8001d6be <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
8001d6be:	eb cd 40 c0 	pushm	r6-r7,lr
8001d6c2:	1a 97       	mov	r7,sp
8001d6c4:	20 6d       	sub	sp,24
8001d6c6:	49 f6       	lddpc	r6,8001d740 <interpolate+0x82>
8001d6c8:	1e 26       	rsub	r6,pc
8001d6ca:	ef 4c ff f8 	st.w	r7[-8],r12
8001d6ce:	ef 4b ff f4 	st.w	r7[-12],r11
8001d6d2:	ef 4a ff f0 	st.w	r7[-16],r10
8001d6d6:	ef 49 ff ec 	st.w	r7[-20],r9
8001d6da:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
8001d6de:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001d6e2:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001d6e6:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
8001d6ea:	c0 41       	brne	8001d6f2 <interpolate+0x34>
	{
		return y1;
8001d6ec:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001d6f0:	c2 38       	rjmp	8001d736 <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
8001d6f2:	ee f9 ff e8 	ld.w	r9,r7[-24]
8001d6f6:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001d6fa:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8001d6fe:	ee fa ff f8 	ld.w	r10,r7[-8]
8001d702:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001d706:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
8001d70a:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8001d70e:	ee fa ff f0 	ld.w	r10,r7[-16]
8001d712:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001d716:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8001d71a:	12 9b       	mov	r11,r9
8001d71c:	10 9c       	mov	r12,r8
8001d71e:	f0 16 00 08 	mcall	r6[32]
8001d722:	18 98       	mov	r8,r12
8001d724:	10 99       	mov	r9,r8
8001d726:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001d72a:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8001d72e:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
8001d732:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
8001d736:	10 9c       	mov	r12,r8
8001d738:	2f ad       	sub	sp,-24
8001d73a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001d73e:	00 00       	add	r0,r0
8001d740:	80 01       	ld.sh	r1,r0[0x0]
8001d742:	d5 4c       	*unknown*

8001d744 <mav_array_memcpy>:

/*
  like memcpy(), but if src is NULL, do a memset to zero
*/
static void mav_array_memcpy(void *dest, const void *src, size_t n)
{
8001d744:	eb cd 40 c0 	pushm	r6-r7,lr
8001d748:	1a 97       	mov	r7,sp
8001d74a:	20 3d       	sub	sp,12
8001d74c:	49 06       	lddpc	r6,8001d78c <mav_array_memcpy+0x48>
8001d74e:	1e 26       	rsub	r6,pc
8001d750:	ef 4c ff fc 	st.w	r7[-4],r12
8001d754:	ef 4b ff f8 	st.w	r7[-8],r11
8001d758:	ef 4a ff f4 	st.w	r7[-12],r10
	if (src == NULL) {
8001d75c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001d760:	58 08       	cp.w	r8,0
8001d762:	c0 91       	brne	8001d774 <mav_array_memcpy+0x30>
		memset(dest, 0, n);
8001d764:	ee fa ff f4 	ld.w	r10,r7[-12]
8001d768:	30 0b       	mov	r11,0
8001d76a:	ee fc ff fc 	ld.w	r12,r7[-4]
8001d76e:	f0 16 00 30 	mcall	r6[192]
8001d772:	c0 98       	rjmp	8001d784 <mav_array_memcpy+0x40>
	} else {
		memcpy(dest, src, n);
8001d774:	ee fa ff f4 	ld.w	r10,r7[-12]
8001d778:	ee fb ff f8 	ld.w	r11,r7[-8]
8001d77c:	ee fc ff fc 	ld.w	r12,r7[-4]
8001d780:	f0 16 00 20 	mcall	r6[128]
	}
}
8001d784:	2f dd       	sub	sp,-12
8001d786:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001d78a:	00 00       	add	r0,r0
8001d78c:	80 01       	ld.sh	r1,r0[0x0]
8001d78e:	d5 d2       	popm	r0-r3,r8-r11,lr

8001d790 <init_simulation>:
#include "coord_conventions.h"
#include "position_estimation.h"
#include "central_data.h"
#include "maths.h"

void init_simulation(simulation_model_t *sim, Quat_Attitude_t *start_attitude) {
8001d790:	eb cd 40 c0 	pushm	r6-r7,lr
8001d794:	1a 97       	mov	r7,sp
8001d796:	20 3d       	sub	sp,12
8001d798:	4b f6       	lddpc	r6,8001d894 <init_simulation+0x104>
8001d79a:	1e 26       	rsub	r6,pc
8001d79c:	ef 4c ff f8 	st.w	r7[-8],r12
8001d7a0:	ef 4b ff f4 	st.w	r7[-12],r11
	int i;
	(*sim)=vehicle_model_parameters;
8001d7a4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001d7a8:	ec f9 08 80 	ld.w	r9,r6[2176]
8001d7ac:	e0 6a 01 94 	mov	r10,404
8001d7b0:	12 9b       	mov	r11,r9
8001d7b2:	10 9c       	mov	r12,r8
8001d7b4:	f0 16 00 20 	mcall	r6[128]
	for (i=0; i<3; i++) {
8001d7b8:	30 08       	mov	r8,0
8001d7ba:	ef 48 ff fc 	st.w	r7[-4],r8
8001d7be:	c2 d8       	rjmp	8001d818 <init_simulation+0x88>
		sim->rates_bf[i]=0;
8001d7c0:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001d7c4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001d7c8:	2f d9       	sub	r9,-3
8001d7ca:	30 0a       	mov	r10,0
8001d7cc:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		sim->torques_bf[i]=0;
8001d7d0:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001d7d4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001d7d8:	30 0a       	mov	r10,0
8001d7da:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		sim->lin_forces_bf[i]=0;
8001d7de:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001d7e2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001d7e6:	2f a9       	sub	r9,-6
8001d7e8:	30 0a       	mov	r10,0
8001d7ea:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		sim->vel_bf[i]=0.0;
8001d7ee:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001d7f2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001d7f6:	2f 79       	sub	r9,-9
8001d7f8:	30 0a       	mov	r10,0
8001d7fa:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		sim->pos[i]=0.0;
8001d7fe:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001d802:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001d806:	2f 19       	sub	r9,-15
8001d808:	30 0a       	mov	r10,0
8001d80a:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
#include "maths.h"

void init_simulation(simulation_model_t *sim, Quat_Attitude_t *start_attitude) {
	int i;
	(*sim)=vehicle_model_parameters;
	for (i=0; i<3; i++) {
8001d80e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001d812:	2f f8       	sub	r8,-1
8001d814:	ef 48 ff fc 	st.w	r7[-4],r8
8001d818:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001d81c:	58 28       	cp.w	r8,2
8001d81e:	fe 9a ff d1 	brle	8001d7c0 <init_simulation+0x30>
		sim->pos[i]=0.0;
		
	}

	// set initial conditions to given attitude (including scalefactors and biases for simulated IMU)
	sim->attitude=*start_attitude;
8001d822:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001d826:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001d82a:	2b 88       	sub	r8,-72
8001d82c:	e0 6a 00 cc 	mov	r10,204
8001d830:	12 9b       	mov	r11,r9
8001d832:	10 9c       	mov	r12,r8
8001d834:	f0 16 00 20 	mcall	r6[128]

	for (i=0; i<ROTORCOUNT; i++) {
8001d838:	30 08       	mov	r8,0
8001d83a:	ef 48 ff fc 	st.w	r7[-4],r8
8001d83e:	c0 e8       	rjmp	8001d85a <init_simulation+0xca>
		sim->rotorspeeds[i]=0.0;			
8001d840:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001d844:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001d848:	2a f9       	sub	r9,-81
8001d84a:	30 0a       	mov	r10,0
8001d84c:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	}

	// set initial conditions to given attitude (including scalefactors and biases for simulated IMU)
	sim->attitude=*start_attitude;

	for (i=0; i<ROTORCOUNT; i++) {
8001d850:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001d854:	2f f8       	sub	r8,-1
8001d856:	ef 48 ff fc 	st.w	r7[-4],r8
8001d85a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001d85e:	58 38       	cp.w	r8,3
8001d860:	fe 9a ff f0 	brle	8001d840 <init_simulation+0xb0>
		sim->rotorspeeds[i]=0.0;			
	}
	sim->last_update=get_time();
8001d864:	f0 16 01 f6 	mcall	r6[2008]
8001d868:	14 98       	mov	r8,r10
8001d86a:	16 99       	mov	r9,r11
8001d86c:	10 9a       	mov	r10,r8
8001d86e:	12 9b       	mov	r11,r9
8001d870:	f0 16 00 74 	mcall	r6[464]
8001d874:	18 99       	mov	r9,r12
8001d876:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001d87a:	f1 49 01 8c 	st.w	r8[396],r9
	sim->dt=0.01;
8001d87e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001d882:	e0 69 d7 0a 	mov	r9,55050
8001d886:	ea 19 3c 23 	orh	r9,0x3c23
8001d88a:	f1 49 01 90 	st.w	r8[400],r9
}
8001d88e:	2f dd       	sub	sp,-12
8001d890:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001d894:	80 01       	ld.sh	r1,r0[0x0]
8001d896:	d6 1e       	*unknown*

8001d898 <lift_drag_base>:



// inverse function of mix_to_servos in stabilisation to recover torques and forces

static inline float lift_drag_base(simulation_model_t *sim, float rpm, float sqr_lat_airspeed, float axial_airspeed) {
8001d898:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
8001d89c:	1a 97       	mov	r7,sp
8001d89e:	20 6d       	sub	sp,24
8001d8a0:	4e 26       	lddpc	r6,8001da28 <lift_drag_base+0x190>
8001d8a2:	1e 26       	rsub	r6,pc
8001d8a4:	ef 4c ff f4 	st.w	r7[-12],r12
8001d8a8:	ef 4b ff f0 	st.w	r7[-16],r11
8001d8ac:	ef 4a ff ec 	st.w	r7[-20],r10
8001d8b0:	ef 49 ff e8 	st.w	r7[-24],r9
	if (rpm < 0.1) return 0.0;
8001d8b4:	ee fc ff f0 	ld.w	r12,r7[-16]
8001d8b8:	f0 16 00 02 	mcall	r6[8]
8001d8bc:	30 05       	mov	r5,0
8001d8be:	e0 68 99 9a 	mov	r8,39322
8001d8c2:	ea 18 99 99 	orh	r8,0x9999
8001d8c6:	e0 69 99 99 	mov	r9,39321
8001d8ca:	ea 19 3f b9 	orh	r9,0x3fb9
8001d8ce:	f0 16 00 1d 	mcall	r6[116]
8001d8d2:	18 98       	mov	r8,r12
8001d8d4:	58 08       	cp.w	r8,0
8001d8d6:	c0 20       	breq	8001d8da <lift_drag_base+0x42>
8001d8d8:	30 15       	mov	r5,1
8001d8da:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
8001d8de:	c0 30       	breq	8001d8e4 <lift_drag_base+0x4c>
8001d8e0:	30 08       	mov	r8,0
8001d8e2:	c9 f8       	rjmp	8001da20 <lift_drag_base+0x188>
	float mean_vel=sim->rotor_diameter *PI * rpm/60.0;
8001d8e4:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001d8e8:	f0 f8 01 68 	ld.w	r8,r8[360]
8001d8ec:	10 9c       	mov	r12,r8
8001d8ee:	f0 16 00 02 	mcall	r6[8]
8001d8f2:	e0 68 2d 18 	mov	r8,11544
8001d8f6:	ea 18 54 44 	orh	r8,0x5444
8001d8fa:	e0 69 21 fb 	mov	r9,8699
8001d8fe:	ea 19 40 09 	orh	r9,0x4009
8001d902:	f0 16 00 03 	mcall	r6[12]
8001d906:	14 98       	mov	r8,r10
8001d908:	16 99       	mov	r9,r11
8001d90a:	10 92       	mov	r2,r8
8001d90c:	12 93       	mov	r3,r9
8001d90e:	ee fc ff f0 	ld.w	r12,r7[-16]
8001d912:	f0 16 00 02 	mcall	r6[8]
8001d916:	14 98       	mov	r8,r10
8001d918:	16 99       	mov	r9,r11
8001d91a:	04 9a       	mov	r10,r2
8001d91c:	06 9b       	mov	r11,r3
8001d91e:	f0 16 00 03 	mcall	r6[12]
8001d922:	14 98       	mov	r8,r10
8001d924:	16 99       	mov	r9,r11
8001d926:	10 9a       	mov	r10,r8
8001d928:	12 9b       	mov	r11,r9
8001d92a:	30 08       	mov	r8,0
8001d92c:	fc 19 40 4e 	movh	r9,0x404e
8001d930:	f0 16 00 0c 	mcall	r6[48]
8001d934:	14 98       	mov	r8,r10
8001d936:	16 99       	mov	r9,r11
8001d938:	10 9a       	mov	r10,r8
8001d93a:	12 9b       	mov	r11,r9
8001d93c:	f0 16 00 09 	mcall	r6[36]
8001d940:	18 98       	mov	r8,r12
8001d942:	ef 48 ff f8 	st.w	r7[-8],r8
	float exit_vel=rpm/60.0 *sim -> rotor_pitch;           
8001d946:	ee fc ff f0 	ld.w	r12,r7[-16]
8001d94a:	f0 16 00 02 	mcall	r6[8]
8001d94e:	30 08       	mov	r8,0
8001d950:	fc 19 40 4e 	movh	r9,0x404e
8001d954:	f0 16 00 0c 	mcall	r6[48]
8001d958:	14 98       	mov	r8,r10
8001d95a:	16 99       	mov	r9,r11
8001d95c:	10 92       	mov	r2,r8
8001d95e:	12 93       	mov	r3,r9
8001d960:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001d964:	f0 f8 01 70 	ld.w	r8,r8[368]
8001d968:	10 9c       	mov	r12,r8
8001d96a:	f0 16 00 02 	mcall	r6[8]
8001d96e:	14 98       	mov	r8,r10
8001d970:	16 99       	mov	r9,r11
8001d972:	04 9a       	mov	r10,r2
8001d974:	06 9b       	mov	r11,r3
8001d976:	f0 16 00 03 	mcall	r6[12]
8001d97a:	14 98       	mov	r8,r10
8001d97c:	16 99       	mov	r9,r11
8001d97e:	10 9a       	mov	r10,r8
8001d980:	12 9b       	mov	r11,r9
8001d982:	f0 16 00 09 	mcall	r6[36]
8001d986:	18 98       	mov	r8,r12
8001d988:	ef 48 ff fc 	st.w	r7[-4],r8
	return (0.5*AIR_DENSITY*(mean_vel*mean_vel +sqr_lat_airspeed) * sim->rotor_foil_area  * (1.0-(axial_airspeed/exit_vel)));
8001d98c:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001d990:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001d994:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8001d998:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001d99c:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8001d9a0:	10 9c       	mov	r12,r8
8001d9a2:	f0 16 00 02 	mcall	r6[8]
8001d9a6:	e0 68 33 33 	mov	r8,13107
8001d9aa:	ea 18 33 33 	orh	r8,0x3333
8001d9ae:	e0 69 33 33 	mov	r9,13107
8001d9b2:	ea 19 3f e3 	orh	r9,0x3fe3
8001d9b6:	f0 16 00 03 	mcall	r6[12]
8001d9ba:	14 98       	mov	r8,r10
8001d9bc:	16 99       	mov	r9,r11
8001d9be:	10 92       	mov	r2,r8
8001d9c0:	12 93       	mov	r3,r9
8001d9c2:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001d9c6:	f0 f8 01 6c 	ld.w	r8,r8[364]
8001d9ca:	10 9c       	mov	r12,r8
8001d9cc:	f0 16 00 02 	mcall	r6[8]
8001d9d0:	14 98       	mov	r8,r10
8001d9d2:	16 99       	mov	r9,r11
8001d9d4:	04 9a       	mov	r10,r2
8001d9d6:	06 9b       	mov	r11,r3
8001d9d8:	f0 16 00 03 	mcall	r6[12]
8001d9dc:	14 98       	mov	r8,r10
8001d9de:	16 99       	mov	r9,r11
8001d9e0:	10 92       	mov	r2,r8
8001d9e2:	12 93       	mov	r3,r9
8001d9e4:	ee fb ff fc 	ld.w	r11,r7[-4]
8001d9e8:	ee fc ff e8 	ld.w	r12,r7[-24]
8001d9ec:	f0 16 00 08 	mcall	r6[32]
8001d9f0:	18 98       	mov	r8,r12
8001d9f2:	10 9c       	mov	r12,r8
8001d9f4:	f0 16 00 02 	mcall	r6[8]
8001d9f8:	14 98       	mov	r8,r10
8001d9fa:	16 99       	mov	r9,r11
8001d9fc:	30 0a       	mov	r10,0
8001d9fe:	fc 1b 3f f0 	movh	r11,0x3ff0
8001da02:	f0 16 00 11 	mcall	r6[68]
8001da06:	14 98       	mov	r8,r10
8001da08:	16 99       	mov	r9,r11
8001da0a:	04 9a       	mov	r10,r2
8001da0c:	06 9b       	mov	r11,r3
8001da0e:	f0 16 00 03 	mcall	r6[12]
8001da12:	14 98       	mov	r8,r10
8001da14:	16 99       	mov	r9,r11
8001da16:	10 9a       	mov	r10,r8
8001da18:	12 9b       	mov	r11,r9
8001da1a:	f0 16 00 09 	mcall	r6[36]
8001da1e:	18 98       	mov	r8,r12
}
8001da20:	10 9c       	mov	r12,r8
8001da22:	2f ad       	sub	sp,-24
8001da24:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
8001da28:	80 01       	ld.sh	r1,r0[0x0]
8001da2a:	d7 26       	*unknown*

8001da2c <forces_from_servos_diag_quad>:


void forces_from_servos_diag_quad(simulation_model_t *sim, servo_output *servos){
8001da2c:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
8001da30:	1a 97       	mov	r7,sp
8001da32:	21 dd       	sub	sp,116
8001da34:	fe f6 04 54 	ld.w	r6,pc[1108]
8001da38:	1e 26       	rsub	r6,pc
8001da3a:	ef 4c ff 90 	st.w	r7[-112],r12
8001da3e:	ef 4b ff 8c 	st.w	r7[-116],r11
	int i;
	float motor_command[4];
	float rotor_lifts[4], rotor_drags[4], rotor_inertia[4], rotor_lateral_drag[4];
	float ldb;
	
	float sqr_lateral_airspeed=SQR(sim->vel_bf[0]) + SQR(sim->vel_bf[1]*sim->vel_bf[1]);
8001da42:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001da46:	70 99       	ld.w	r9,r8[0x24]
8001da48:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001da4c:	70 98       	ld.w	r8,r8[0x24]
8001da4e:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8001da52:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001da56:	70 aa       	ld.w	r10,r8[0x28]
8001da58:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001da5c:	70 a8       	ld.w	r8,r8[0x28]
8001da5e:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
8001da62:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001da66:	70 ab       	ld.w	r11,r8[0x28]
8001da68:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001da6c:	70 a8       	ld.w	r8,r8[0x28]
8001da6e:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
8001da72:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8001da76:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8001da7a:	ef 48 ff ec 	st.w	r7[-20],r8
	float lateral_airspeed=sqrt(sqr_lateral_airspeed);
8001da7e:	ee fc ff ec 	ld.w	r12,r7[-20]
8001da82:	f0 16 00 02 	mcall	r6[8]
8001da86:	14 98       	mov	r8,r10
8001da88:	16 99       	mov	r9,r11
8001da8a:	10 9a       	mov	r10,r8
8001da8c:	12 9b       	mov	r11,r9
8001da8e:	f0 16 00 65 	mcall	r6[404]
8001da92:	14 98       	mov	r8,r10
8001da94:	16 99       	mov	r9,r11
8001da96:	10 9a       	mov	r10,r8
8001da98:	12 9b       	mov	r11,r9
8001da9a:	f0 16 00 09 	mcall	r6[36]
8001da9e:	18 98       	mov	r8,r12
8001daa0:	ef 48 ff f0 	st.w	r7[-16],r8
	
	for (i=0; i<4; i++) {
8001daa4:	30 08       	mov	r8,0
8001daa6:	ef 48 ff e4 	st.w	r7[-28],r8
8001daaa:	cb 28       	rjmp	8001dc0e <forces_from_servos_diag_quad+0x1e2>
		float old_rotor_speed;
		motor_command[i]=(float)servos[i].value/SERVO_SCALE - sim->rotor_rpm_offset;
8001daac:	ee f5 ff e4 	ld.w	r5,r7[-28]
8001dab0:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001dab4:	a5 68       	lsl	r8,0x4
8001dab6:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8001daba:	f2 08 00 08 	add	r8,r9,r8
8001dabe:	70 08       	ld.w	r8,r8[0x0]
8001dac0:	e5 a6 08 08 	cop	cp0,cr8,cr0,cr8,0x4c
8001dac4:	fc 1b 43 fa 	movh	r11,0x43fa
8001dac8:	10 9c       	mov	r12,r8
8001daca:	f0 16 00 08 	mcall	r6[32]
8001dace:	18 98       	mov	r8,r12
8001dad0:	10 99       	mov	r9,r8
8001dad2:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001dad6:	f0 f8 01 5c 	ld.w	r8,r8[348]
8001dada:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8001dade:	ea 08 15 02 	lsl	r8,r5,0x2
8001dae2:	ee 08 00 08 	add	r8,r7,r8
8001dae6:	f1 49 ff d4 	st.w	r8[-44],r9
		if (motor_command[i]<0.0) motor_command[i]=0;
8001daea:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001daee:	a3 68       	lsl	r8,0x2
8001daf0:	ee 08 00 08 	add	r8,r7,r8
8001daf4:	f0 fa ff d4 	ld.w	r10,r8[-44]
8001daf8:	30 18       	mov	r8,1
8001dafa:	30 09       	mov	r9,0
8001dafc:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
8001db00:	e0 8c 00 03 	brvs	8001db06 <forces_from_servos_diag_quad+0xda>
8001db04:	c0 25       	brlt	8001db08 <forces_from_servos_diag_quad+0xdc>
8001db06:	30 08       	mov	r8,0
8001db08:	5c 58       	castu.b	r8
8001db0a:	c0 90       	breq	8001db1c <forces_from_servos_diag_quad+0xf0>
8001db0c:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001db10:	a3 68       	lsl	r8,0x2
8001db12:	ee 08 00 08 	add	r8,r7,r8
8001db16:	30 09       	mov	r9,0
8001db18:	f1 49 ff d4 	st.w	r8[-44],r9
		
		// temporarily save old rotor speeds
		old_rotor_speed=sim->rotorspeeds[i];
8001db1c:	ee f9 ff e4 	ld.w	r9,r7[-28]
8001db20:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001db24:	2a f9       	sub	r9,-81
8001db26:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8001db2a:	ef 48 ff fc 	st.w	r7[-4],r8
		// estimate rotor speeds by low-pass filtering
		//sim->rotorspeeds[i]=(sim->rotor_lpf) * sim->rotorspeeds[i] + (1.0-sim->rotor_lpf) * (motor_command[i] * sim->rotor_rpm_gain);
		sim->rotorspeeds[i]=(motor_command[i] * sim->rotor_rpm_gain);
8001db2e:	ee f9 ff e4 	ld.w	r9,r7[-28]
8001db32:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001db36:	a3 68       	lsl	r8,0x2
8001db38:	ee 08 00 08 	add	r8,r7,r8
8001db3c:	f0 fa ff d4 	ld.w	r10,r8[-44]
8001db40:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001db44:	f0 f8 01 58 	ld.w	r8,r8[344]
8001db48:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
8001db4c:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001db50:	2a f9       	sub	r9,-81
8001db52:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		
		// calculate torque created by rotor inertia
		rotor_inertia[i]=(sim->rotorspeeds[i] - old_rotor_speed)/sim->dt * sim->rotor_momentum;
8001db56:	ee f5 ff e4 	ld.w	r5,r7[-28]
8001db5a:	ee f9 ff e4 	ld.w	r9,r7[-28]
8001db5e:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001db62:	2a f9       	sub	r9,-81
8001db64:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
8001db68:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001db6c:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8001db70:	ee f9 ff 90 	ld.w	r9,r7[-112]
8001db74:	f2 f9 01 90 	ld.w	r9,r9[400]
8001db78:	12 9b       	mov	r11,r9
8001db7a:	10 9c       	mov	r12,r8
8001db7c:	f0 16 00 08 	mcall	r6[32]
8001db80:	18 98       	mov	r8,r12
8001db82:	10 99       	mov	r9,r8
8001db84:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001db88:	f0 f8 01 84 	ld.w	r8,r8[388]
8001db8c:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8001db90:	ea 08 15 02 	lsl	r8,r5,0x2
8001db94:	ee 08 00 08 	add	r8,r7,r8
8001db98:	f1 49 ff a4 	st.w	r8[-92],r9
		
		ldb=lift_drag_base(sim, sim->rotorspeeds[i], sqr_lateral_airspeed, -sim->vel_bf[Z]);
8001db9c:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001dba0:	70 b8       	ld.w	r8,r8[0x2c]
8001dba2:	10 99       	mov	r9,r8
8001dba4:	ee 19 80 00 	eorh	r9,0x8000
8001dba8:	ee fa ff e4 	ld.w	r10,r7[-28]
8001dbac:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001dbb0:	2a fa       	sub	r10,-81
8001dbb2:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
8001dbb6:	ee fa ff ec 	ld.w	r10,r7[-20]
8001dbba:	10 9b       	mov	r11,r8
8001dbbc:	ee fc ff 90 	ld.w	r12,r7[-112]
8001dbc0:	c6 ce       	rcall	8001d898 <lift_drag_base>
8001dbc2:	18 98       	mov	r8,r12
8001dbc4:	ef 48 ff e8 	st.w	r7[-24],r8
		//ldb=lift_drag_base(sim, sim->rotorspeeds[i], sqr_lateral_airspeed, 0.0);
		
		rotor_lifts[i]=ldb * sim->rotor_cl;
8001dbc8:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001dbcc:	ee f9 ff 90 	ld.w	r9,r7[-112]
8001dbd0:	f2 fa 01 64 	ld.w	r10,r9[356]
8001dbd4:	ee f9 ff e8 	ld.w	r9,r7[-24]
8001dbd8:	e5 a2 09 a9 	cop	cp0,cr9,cr10,cr9,0x44
8001dbdc:	a3 68       	lsl	r8,0x2
8001dbde:	ee 08 00 08 	add	r8,r7,r8
8001dbe2:	f1 49 ff c4 	st.w	r8[-60],r9
		rotor_drags[i]=ldb * sim->rotor_cd;
8001dbe6:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001dbea:	ee f9 ff 90 	ld.w	r9,r7[-112]
8001dbee:	f2 fa 01 60 	ld.w	r10,r9[352]
8001dbf2:	ee f9 ff e8 	ld.w	r9,r7[-24]
8001dbf6:	e5 a2 09 a9 	cop	cp0,cr9,cr10,cr9,0x44
8001dbfa:	a3 68       	lsl	r8,0x2
8001dbfc:	ee 08 00 08 	add	r8,r7,r8
8001dc00:	f1 49 ff b4 	st.w	r8[-76],r9
	float ldb;
	
	float sqr_lateral_airspeed=SQR(sim->vel_bf[0]) + SQR(sim->vel_bf[1]*sim->vel_bf[1]);
	float lateral_airspeed=sqrt(sqr_lateral_airspeed);
	
	for (i=0; i<4; i++) {
8001dc04:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001dc08:	2f f8       	sub	r8,-1
8001dc0a:	ef 48 ff e4 	st.w	r7[-28],r8
8001dc0e:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001dc12:	58 38       	cp.w	r8,3
8001dc14:	fe 9a ff 4c 	brle	8001daac <forces_from_servos_diag_quad+0x80>
		
		rotor_lifts[i]=ldb * sim->rotor_cl;
		rotor_drags[i]=ldb * sim->rotor_cd;
	}
	
	float mpos_x=sim->rotor_arm_length / 1.4142;
8001dc18:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001dc1c:	f0 f8 01 88 	ld.w	r8,r8[392]
8001dc20:	10 9c       	mov	r12,r8
8001dc22:	f0 16 00 02 	mcall	r6[8]
8001dc26:	e0 68 0d 1b 	mov	r8,3355
8001dc2a:	ea 18 2d e0 	orh	r8,0x2de0
8001dc2e:	e0 69 a0 90 	mov	r9,41104
8001dc32:	ea 19 3f f6 	orh	r9,0x3ff6
8001dc36:	f0 16 00 0c 	mcall	r6[48]
8001dc3a:	14 98       	mov	r8,r10
8001dc3c:	16 99       	mov	r9,r11
8001dc3e:	10 9a       	mov	r10,r8
8001dc40:	12 9b       	mov	r11,r9
8001dc42:	f0 16 00 09 	mcall	r6[36]
8001dc46:	18 98       	mov	r8,r12
8001dc48:	ef 48 ff f4 	st.w	r7[-12],r8
	float mpos_y=sim->rotor_arm_length / 1.4142;
8001dc4c:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001dc50:	f0 f8 01 88 	ld.w	r8,r8[392]
8001dc54:	10 9c       	mov	r12,r8
8001dc56:	f0 16 00 02 	mcall	r6[8]
8001dc5a:	e0 68 0d 1b 	mov	r8,3355
8001dc5e:	ea 18 2d e0 	orh	r8,0x2de0
8001dc62:	e0 69 a0 90 	mov	r9,41104
8001dc66:	ea 19 3f f6 	orh	r9,0x3ff6
8001dc6a:	f0 16 00 0c 	mcall	r6[48]
8001dc6e:	14 98       	mov	r8,r10
8001dc70:	16 99       	mov	r9,r11
8001dc72:	10 9a       	mov	r10,r8
8001dc74:	12 9b       	mov	r11,r9
8001dc76:	f0 16 00 09 	mcall	r6[36]
8001dc7a:	18 98       	mov	r8,r12
8001dc7c:	ef 48 ff f8 	st.w	r7[-8],r8
	
	// torque around x axis (roll)
	sim->torques_bf[ROLL]  = ((rotor_lifts[M_FRONT_LEFT]  + rotor_lifts[M_REAR_LEFT]  ) 
8001dc80:	ee f9 ff cc 	ld.w	r9,r7[-52]
8001dc84:	ee f8 ff d0 	ld.w	r8,r7[-48]
8001dc88:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
						    - (rotor_lifts[M_FRONT_RIGHT] + rotor_lifts[M_REAR_RIGHT] )) * mpos_y;;
8001dc8c:	ee fa ff c8 	ld.w	r10,r7[-56]
8001dc90:	ee f8 ff c4 	ld.w	r8,r7[-60]
8001dc94:	e5 a0 08 a8 	cop	cp0,cr8,cr10,cr8,0x40
	
	float mpos_x=sim->rotor_arm_length / 1.4142;
	float mpos_y=sim->rotor_arm_length / 1.4142;
	
	// torque around x axis (roll)
	sim->torques_bf[ROLL]  = ((rotor_lifts[M_FRONT_LEFT]  + rotor_lifts[M_REAR_LEFT]  ) 
8001dc98:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8001dc9c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001dca0:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8001dca4:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001dca8:	91 09       	st.w	r8[0x0],r9
						    - (rotor_lifts[M_FRONT_RIGHT] + rotor_lifts[M_REAR_RIGHT] )) * mpos_y;;

	// torque around y axis (pitch)
	sim->torques_bf[PITCH] = ((rotor_lifts[M_FRONT_LEFT]  + rotor_lifts[M_FRONT_RIGHT] )
8001dcaa:	ee f9 ff cc 	ld.w	r9,r7[-52]
8001dcae:	ee f8 ff c8 	ld.w	r8,r7[-56]
8001dcb2:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
							- (rotor_lifts[M_REAR_LEFT]   + rotor_lifts[M_REAR_RIGHT] ))*  mpos_x;
8001dcb6:	ee fa ff d0 	ld.w	r10,r7[-48]
8001dcba:	ee f8 ff c4 	ld.w	r8,r7[-60]
8001dcbe:	e5 a0 08 a8 	cop	cp0,cr8,cr10,cr8,0x40
	// torque around x axis (roll)
	sim->torques_bf[ROLL]  = ((rotor_lifts[M_FRONT_LEFT]  + rotor_lifts[M_REAR_LEFT]  ) 
						    - (rotor_lifts[M_FRONT_RIGHT] + rotor_lifts[M_REAR_RIGHT] )) * mpos_y;;

	// torque around y axis (pitch)
	sim->torques_bf[PITCH] = ((rotor_lifts[M_FRONT_LEFT]  + rotor_lifts[M_FRONT_RIGHT] )
8001dcc2:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8001dcc6:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001dcca:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8001dcce:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001dcd2:	91 19       	st.w	r8[0x4],r9
							- (rotor_lifts[M_REAR_LEFT]   + rotor_lifts[M_REAR_RIGHT] ))*  mpos_x;

	sim->torques_bf[YAW]   = (M_FL_DIR*(10.0*rotor_drags[M_FRONT_LEFT]+rotor_inertia[M_FRONT_LEFT])  + M_FR_DIR*(10.0*rotor_drags[M_FRONT_RIGHT]+rotor_inertia[M_FRONT_RIGHT])
8001dcd4:	ee f8 ff b8 	ld.w	r8,r7[-72]
8001dcd8:	10 9c       	mov	r12,r8
8001dcda:	f0 16 00 02 	mcall	r6[8]
8001dcde:	30 08       	mov	r8,0
8001dce0:	fc 19 40 24 	movh	r9,0x4024
8001dce4:	f0 16 00 03 	mcall	r6[12]
8001dce8:	14 98       	mov	r8,r10
8001dcea:	16 99       	mov	r9,r11
8001dcec:	10 92       	mov	r2,r8
8001dcee:	12 93       	mov	r3,r9
8001dcf0:	ee f8 ff a8 	ld.w	r8,r7[-88]
							+ M_RL_DIR*(10.0*rotor_drags[M_REAR_LEFT] +rotor_inertia[M_REAR_LEFT])   + M_RR_DIR*(10.0*rotor_drags[M_REAR_RIGHT] +rotor_inertia[M_REAR_RIGHT] ))*  sim->rotor_diameter;
8001dcf4:	10 9c       	mov	r12,r8
8001dcf6:	f0 16 00 02 	mcall	r6[8]
8001dcfa:	14 98       	mov	r8,r10
8001dcfc:	16 99       	mov	r9,r11
8001dcfe:	04 9a       	mov	r10,r2
8001dd00:	06 9b       	mov	r11,r3
8001dd02:	f0 16 00 05 	mcall	r6[20]
8001dd06:	14 98       	mov	r8,r10
8001dd08:	16 99       	mov	r9,r11
8001dd0a:	10 92       	mov	r2,r8
8001dd0c:	12 93       	mov	r3,r9

	// torque around y axis (pitch)
	sim->torques_bf[PITCH] = ((rotor_lifts[M_FRONT_LEFT]  + rotor_lifts[M_FRONT_RIGHT] )
							- (rotor_lifts[M_REAR_LEFT]   + rotor_lifts[M_REAR_RIGHT] ))*  mpos_x;

	sim->torques_bf[YAW]   = (M_FL_DIR*(10.0*rotor_drags[M_FRONT_LEFT]+rotor_inertia[M_FRONT_LEFT])  + M_FR_DIR*(10.0*rotor_drags[M_FRONT_RIGHT]+rotor_inertia[M_FRONT_RIGHT])
8001dd0e:	ee f8 ff bc 	ld.w	r8,r7[-68]
8001dd12:	10 9c       	mov	r12,r8
8001dd14:	f0 16 00 02 	mcall	r6[8]
8001dd18:	30 08       	mov	r8,0
8001dd1a:	fc 19 40 24 	movh	r9,0x4024
8001dd1e:	f0 16 00 03 	mcall	r6[12]
8001dd22:	14 98       	mov	r8,r10
8001dd24:	16 99       	mov	r9,r11
8001dd26:	10 90       	mov	r0,r8
8001dd28:	12 91       	mov	r1,r9
8001dd2a:	ee f8 ff ac 	ld.w	r8,r7[-84]
8001dd2e:	10 9c       	mov	r12,r8
8001dd30:	f0 16 00 02 	mcall	r6[8]
8001dd34:	14 98       	mov	r8,r10
8001dd36:	16 99       	mov	r9,r11
8001dd38:	00 9a       	mov	r10,r0
8001dd3a:	02 9b       	mov	r11,r1
8001dd3c:	f0 16 00 05 	mcall	r6[20]
8001dd40:	14 98       	mov	r8,r10
8001dd42:	16 99       	mov	r9,r11
							+ M_RL_DIR*(10.0*rotor_drags[M_REAR_LEFT] +rotor_inertia[M_REAR_LEFT])   + M_RR_DIR*(10.0*rotor_drags[M_REAR_RIGHT] +rotor_inertia[M_REAR_RIGHT] ))*  sim->rotor_diameter;
8001dd44:	04 9a       	mov	r10,r2
8001dd46:	06 9b       	mov	r11,r3
8001dd48:	f0 16 00 11 	mcall	r6[68]
8001dd4c:	14 98       	mov	r8,r10
8001dd4e:	16 99       	mov	r9,r11
8001dd50:	10 92       	mov	r2,r8
8001dd52:	12 93       	mov	r3,r9
8001dd54:	ee f8 ff c0 	ld.w	r8,r7[-64]
8001dd58:	10 9c       	mov	r12,r8
8001dd5a:	f0 16 00 02 	mcall	r6[8]
8001dd5e:	30 08       	mov	r8,0
8001dd60:	fc 19 40 24 	movh	r9,0x4024
8001dd64:	f0 16 00 03 	mcall	r6[12]
8001dd68:	14 98       	mov	r8,r10
8001dd6a:	16 99       	mov	r9,r11
8001dd6c:	10 90       	mov	r0,r8
8001dd6e:	12 91       	mov	r1,r9
8001dd70:	ee f8 ff b0 	ld.w	r8,r7[-80]
8001dd74:	10 9c       	mov	r12,r8
8001dd76:	f0 16 00 02 	mcall	r6[8]
8001dd7a:	14 98       	mov	r8,r10
8001dd7c:	16 99       	mov	r9,r11
8001dd7e:	00 9a       	mov	r10,r0
8001dd80:	02 9b       	mov	r11,r1
8001dd82:	f0 16 00 05 	mcall	r6[20]
8001dd86:	14 98       	mov	r8,r10
8001dd88:	16 99       	mov	r9,r11
8001dd8a:	04 9a       	mov	r10,r2
8001dd8c:	06 9b       	mov	r11,r3
8001dd8e:	f0 16 00 05 	mcall	r6[20]
8001dd92:	14 98       	mov	r8,r10
8001dd94:	16 99       	mov	r9,r11
8001dd96:	10 92       	mov	r2,r8
8001dd98:	12 93       	mov	r3,r9
8001dd9a:	ee f8 ff b4 	ld.w	r8,r7[-76]
8001dd9e:	10 9c       	mov	r12,r8
8001dda0:	f0 16 00 02 	mcall	r6[8]
8001dda4:	30 08       	mov	r8,0
8001dda6:	fc 19 40 24 	movh	r9,0x4024
8001ddaa:	f0 16 00 03 	mcall	r6[12]
8001ddae:	14 98       	mov	r8,r10
8001ddb0:	16 99       	mov	r9,r11
8001ddb2:	10 90       	mov	r0,r8
8001ddb4:	12 91       	mov	r1,r9
8001ddb6:	ee f8 ff a4 	ld.w	r8,r7[-92]
8001ddba:	10 9c       	mov	r12,r8
8001ddbc:	f0 16 00 02 	mcall	r6[8]
8001ddc0:	14 98       	mov	r8,r10
8001ddc2:	16 99       	mov	r9,r11
8001ddc4:	00 9a       	mov	r10,r0
8001ddc6:	02 9b       	mov	r11,r1
8001ddc8:	f0 16 00 05 	mcall	r6[20]
8001ddcc:	14 98       	mov	r8,r10
8001ddce:	16 99       	mov	r9,r11

	// torque around y axis (pitch)
	sim->torques_bf[PITCH] = ((rotor_lifts[M_FRONT_LEFT]  + rotor_lifts[M_FRONT_RIGHT] )
							- (rotor_lifts[M_REAR_LEFT]   + rotor_lifts[M_REAR_RIGHT] ))*  mpos_x;

	sim->torques_bf[YAW]   = (M_FL_DIR*(10.0*rotor_drags[M_FRONT_LEFT]+rotor_inertia[M_FRONT_LEFT])  + M_FR_DIR*(10.0*rotor_drags[M_FRONT_RIGHT]+rotor_inertia[M_FRONT_RIGHT])
8001ddd0:	04 9a       	mov	r10,r2
8001ddd2:	06 9b       	mov	r11,r3
8001ddd4:	f0 16 00 11 	mcall	r6[68]
8001ddd8:	14 98       	mov	r8,r10
8001ddda:	16 99       	mov	r9,r11
8001dddc:	10 92       	mov	r2,r8
8001ddde:	12 93       	mov	r3,r9
8001dde0:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001dde4:	f0 f8 01 68 	ld.w	r8,r8[360]
8001dde8:	10 9c       	mov	r12,r8
8001ddea:	f0 16 00 02 	mcall	r6[8]
8001ddee:	14 98       	mov	r8,r10
8001ddf0:	16 99       	mov	r9,r11
8001ddf2:	04 9a       	mov	r10,r2
8001ddf4:	06 9b       	mov	r11,r3
8001ddf6:	f0 16 00 03 	mcall	r6[12]
8001ddfa:	14 98       	mov	r8,r10
8001ddfc:	16 99       	mov	r9,r11
8001ddfe:	10 9a       	mov	r10,r8
8001de00:	12 9b       	mov	r11,r9
8001de02:	f0 16 00 09 	mcall	r6[36]
8001de06:	18 99       	mov	r9,r12
8001de08:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001de0c:	91 29       	st.w	r8[0x8],r9
							+ M_RL_DIR*(10.0*rotor_drags[M_REAR_LEFT] +rotor_inertia[M_REAR_LEFT])   + M_RR_DIR*(10.0*rotor_drags[M_REAR_RIGHT] +rotor_inertia[M_REAR_RIGHT] ))*  sim->rotor_diameter;
	

	
	sim->lin_forces_bf[X] = -sim->vel_bf[X]*lateral_airspeed* sim->vehicle_drag;  
8001de0e:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001de12:	70 98       	ld.w	r8,r8[0x24]
8001de14:	10 99       	mov	r9,r8
8001de16:	ee 19 80 00 	eorh	r9,0x8000
8001de1a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001de1e:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8001de22:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001de26:	f0 f8 01 78 	ld.w	r8,r8[376]
8001de2a:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8001de2e:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001de32:	91 69       	st.w	r8[0x18],r9
	sim->lin_forces_bf[Y] = -sim->vel_bf[Y]*lateral_airspeed* sim->vehicle_drag;
8001de34:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001de38:	70 a8       	ld.w	r8,r8[0x28]
8001de3a:	10 99       	mov	r9,r8
8001de3c:	ee 19 80 00 	eorh	r9,0x8000
8001de40:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001de44:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8001de48:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001de4c:	f0 f8 01 78 	ld.w	r8,r8[376]
8001de50:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8001de54:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001de58:	91 79       	st.w	r8[0x1c],r9
	sim->lin_forces_bf[Z] = -(rotor_lifts[M_FRONT_LEFT]+ rotor_lifts[M_FRONT_RIGHT] +rotor_lifts[M_REAR_LEFT] +rotor_lifts[M_REAR_RIGHT]);
8001de5a:	ee f9 ff cc 	ld.w	r9,r7[-52]
8001de5e:	ee f8 ff c8 	ld.w	r8,r7[-56]
8001de62:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001de66:	ee f8 ff d0 	ld.w	r8,r7[-48]
8001de6a:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001de6e:	ee f8 ff c4 	ld.w	r8,r7[-60]
8001de72:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8001de76:	10 99       	mov	r9,r8
8001de78:	ee 19 80 00 	eorh	r9,0x8000
8001de7c:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001de80:	91 89       	st.w	r8[0x20],r9

}
8001de82:	2e 3d       	sub	sp,-116
8001de84:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
8001de88:	80 01       	ld.sh	r1,r0[0x0]
8001de8a:	d8 bc       	*unknown*

8001de8c <forces_from_servos_cross_quad>:


void forces_from_servos_cross_quad(simulation_model_t *sim, servo_output *servos){
8001de8c:	eb cd 40 80 	pushm	r7,lr
8001de90:	1a 97       	mov	r7,sp
8001de92:	20 7d       	sub	sp,28
8001de94:	ef 4c ff e8 	st.w	r7[-24],r12
8001de98:	ef 4b ff e4 	st.w	r7[-28],r11

	for (i=0; i<4; i++) {
		centralData->servos[i].value=SERVO_SCALE*motor_command[i];
	}
	*/
}
8001de9c:	2f 9d       	sub	sp,-28
8001de9e:	e3 cd 80 80 	ldm	sp++,r7,pc

8001dea2 <simu_update>:

void simu_update(simulation_model_t *sim, servo_output *servo_commands, Imu_Data_t *imu, position_estimator_t *pos_est) {
8001dea2:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
8001dea6:	1a 97       	mov	r7,sp
8001dea8:	21 fd       	sub	sp,124
8001deaa:	fe f6 0b 7a 	ld.w	r6,pc[2938]
8001deae:	1e 26       	rsub	r6,pc
8001deb0:	ef 4c ff a0 	st.w	r7[-96],r12
8001deb4:	ef 4b ff 9c 	st.w	r7[-100],r11
8001deb8:	ef 4a ff 98 	st.w	r7[-104],r10
8001debc:	ef 49 ff 94 	st.w	r7[-108],r9
	int i;
	UQuat_t qtmp1, qvel_bf,  qed;
	const UQuat_t front = {.s=0.0, .v={1.0, 0.0, 0.0}};
8001dec0:	30 08       	mov	r8,0
8001dec2:	ef 48 ff b4 	st.w	r7[-76],r8
8001dec6:	fc 18 3f 80 	movh	r8,0x3f80
8001deca:	ef 48 ff b8 	st.w	r7[-72],r8
8001dece:	30 08       	mov	r8,0
8001ded0:	ef 48 ff bc 	st.w	r7[-68],r8
8001ded4:	30 08       	mov	r8,0
8001ded6:	ef 48 ff c0 	st.w	r7[-64],r8
	const UQuat_t up = {.s=0.0, .v={UPVECTOR_X, UPVECTOR_Y, UPVECTOR_Z}};
8001deda:	30 08       	mov	r8,0
8001dedc:	ef 48 ff a4 	st.w	r7[-92],r8
8001dee0:	30 08       	mov	r8,0
8001dee2:	ef 48 ff a8 	st.w	r7[-88],r8
8001dee6:	30 08       	mov	r8,0
8001dee8:	ef 48 ff ac 	st.w	r7[-84],r8
8001deec:	fc 18 bf 80 	movh	r8,0xbf80
8001def0:	ef 48 ff b0 	st.w	r7[-80],r8
	
	central_data_t *central_data;
	uint32_t now=get_micros();
8001def4:	f0 16 00 27 	mcall	r6[156]
8001def8:	18 98       	mov	r8,r12
8001defa:	ef 48 ff fc 	st.w	r7[-4],r8
	sim->dt=(now - sim->last_update)/1000000.0;
8001defe:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001df02:	f0 f8 01 8c 	ld.w	r8,r8[396]
8001df06:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001df0a:	f2 08 01 08 	sub	r8,r9,r8
8001df0e:	10 9c       	mov	r12,r8
8001df10:	f0 16 00 4e 	mcall	r6[312]
8001df14:	30 08       	mov	r8,0
8001df16:	e0 69 84 80 	mov	r9,33920
8001df1a:	ea 19 41 2e 	orh	r9,0x412e
8001df1e:	f0 16 00 0c 	mcall	r6[48]
8001df22:	14 98       	mov	r8,r10
8001df24:	16 99       	mov	r9,r11
8001df26:	10 9a       	mov	r10,r8
8001df28:	12 9b       	mov	r11,r9
8001df2a:	f0 16 00 09 	mcall	r6[36]
8001df2e:	18 99       	mov	r9,r12
8001df30:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001df34:	f1 49 01 90 	st.w	r8[400],r9
	sim->last_update=now;
8001df38:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001df3c:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001df40:	f1 49 01 8c 	st.w	r8[396],r9
	central_data=get_central_data();
8001df44:	f0 16 00 32 	mcall	r6[200]
8001df48:	18 98       	mov	r8,r12
8001df4a:	ef 48 ff f8 	st.w	r7[-8],r8
	// compute torques and forces based on servo commands
	#ifdef CONF_DIAG
	forces_from_servos_diag_quad(sim, servo_commands);
8001df4e:	ee fb ff 9c 	ld.w	r11,r7[-100]
8001df52:	ee fc ff a0 	ld.w	r12,r7[-96]
8001df56:	f0 16 01 da 	mcall	r6[1896]
	forces_from_servos_cross_quad(sim, servo_commands);
	#endif
	
	// integrate torques to get simulated gyro rates (with some damping)
	//for (i=0; i<3; i++) {
	sim->rates_bf[0] = clip((1.0-0.1*sim->dt)*sim->rates_bf[0] + sim->dt * sim->torques_bf[0] /sim->roll_pitch_momentum, 10.0);
8001df5a:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001df5e:	f0 f8 01 90 	ld.w	r8,r8[400]
8001df62:	10 9c       	mov	r12,r8
8001df64:	f0 16 00 02 	mcall	r6[8]
8001df68:	e0 68 99 9a 	mov	r8,39322
8001df6c:	ea 18 99 99 	orh	r8,0x9999
8001df70:	e0 69 99 99 	mov	r9,39321
8001df74:	ea 19 bf b9 	orh	r9,0xbfb9
8001df78:	f0 16 00 03 	mcall	r6[12]
8001df7c:	14 98       	mov	r8,r10
8001df7e:	16 99       	mov	r9,r11
8001df80:	10 9a       	mov	r10,r8
8001df82:	12 9b       	mov	r11,r9
8001df84:	30 08       	mov	r8,0
8001df86:	fc 19 3f f0 	movh	r9,0x3ff0
8001df8a:	f0 16 00 05 	mcall	r6[20]
8001df8e:	14 98       	mov	r8,r10
8001df90:	16 99       	mov	r9,r11
8001df92:	10 92       	mov	r2,r8
8001df94:	12 93       	mov	r3,r9
8001df96:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001df9a:	70 38       	ld.w	r8,r8[0xc]
8001df9c:	10 9c       	mov	r12,r8
8001df9e:	f0 16 00 02 	mcall	r6[8]
8001dfa2:	14 98       	mov	r8,r10
8001dfa4:	16 99       	mov	r9,r11
8001dfa6:	04 9a       	mov	r10,r2
8001dfa8:	06 9b       	mov	r11,r3
8001dfaa:	f0 16 00 03 	mcall	r6[12]
8001dfae:	14 98       	mov	r8,r10
8001dfb0:	16 99       	mov	r9,r11
8001dfb2:	10 92       	mov	r2,r8
8001dfb4:	12 93       	mov	r3,r9
8001dfb6:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001dfba:	f0 f9 01 90 	ld.w	r9,r8[400]
8001dfbe:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001dfc2:	70 08       	ld.w	r8,r8[0x0]
8001dfc4:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8001dfc8:	ee f9 ff a0 	ld.w	r9,r7[-96]
8001dfcc:	f2 f9 01 7c 	ld.w	r9,r9[380]
8001dfd0:	12 9b       	mov	r11,r9
8001dfd2:	10 9c       	mov	r12,r8
8001dfd4:	f0 16 00 08 	mcall	r6[32]
8001dfd8:	18 98       	mov	r8,r12
8001dfda:	10 9c       	mov	r12,r8
8001dfdc:	f0 16 00 02 	mcall	r6[8]
8001dfe0:	14 98       	mov	r8,r10
8001dfe2:	16 99       	mov	r9,r11
8001dfe4:	04 9a       	mov	r10,r2
8001dfe6:	06 9b       	mov	r11,r3
8001dfe8:	f0 16 00 05 	mcall	r6[20]
8001dfec:	14 98       	mov	r8,r10
8001dfee:	16 99       	mov	r9,r11
8001dff0:	10 9a       	mov	r10,r8
8001dff2:	12 9b       	mov	r11,r9
8001dff4:	f0 16 00 09 	mcall	r6[36]
8001dff8:	18 98       	mov	r8,r12
8001dffa:	fc 1b 41 20 	movh	r11,0x4120
8001dffe:	10 9c       	mov	r12,r8
8001e000:	fe b0 fb 2a 	rcall	8001d654 <clip>
8001e004:	18 99       	mov	r9,r12
8001e006:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e00a:	91 39       	st.w	r8[0xc],r9
	sim->rates_bf[1] = clip((1.0-0.1*sim->dt)*sim->rates_bf[1] + sim->dt * sim->torques_bf[1] /sim->roll_pitch_momentum, 10.0);
8001e00c:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e010:	f0 f8 01 90 	ld.w	r8,r8[400]
8001e014:	10 9c       	mov	r12,r8
8001e016:	f0 16 00 02 	mcall	r6[8]
8001e01a:	e0 68 99 9a 	mov	r8,39322
8001e01e:	ea 18 99 99 	orh	r8,0x9999
8001e022:	e0 69 99 99 	mov	r9,39321
8001e026:	ea 19 bf b9 	orh	r9,0xbfb9
8001e02a:	f0 16 00 03 	mcall	r6[12]
8001e02e:	14 98       	mov	r8,r10
8001e030:	16 99       	mov	r9,r11
8001e032:	10 9a       	mov	r10,r8
8001e034:	12 9b       	mov	r11,r9
8001e036:	30 08       	mov	r8,0
8001e038:	fc 19 3f f0 	movh	r9,0x3ff0
8001e03c:	f0 16 00 05 	mcall	r6[20]
8001e040:	14 98       	mov	r8,r10
8001e042:	16 99       	mov	r9,r11
8001e044:	10 92       	mov	r2,r8
8001e046:	12 93       	mov	r3,r9
8001e048:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e04c:	70 48       	ld.w	r8,r8[0x10]
8001e04e:	10 9c       	mov	r12,r8
8001e050:	f0 16 00 02 	mcall	r6[8]
8001e054:	14 98       	mov	r8,r10
8001e056:	16 99       	mov	r9,r11
8001e058:	04 9a       	mov	r10,r2
8001e05a:	06 9b       	mov	r11,r3
8001e05c:	f0 16 00 03 	mcall	r6[12]
8001e060:	14 98       	mov	r8,r10
8001e062:	16 99       	mov	r9,r11
8001e064:	10 92       	mov	r2,r8
8001e066:	12 93       	mov	r3,r9
8001e068:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e06c:	f0 f9 01 90 	ld.w	r9,r8[400]
8001e070:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e074:	70 18       	ld.w	r8,r8[0x4]
8001e076:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8001e07a:	ee f9 ff a0 	ld.w	r9,r7[-96]
8001e07e:	f2 f9 01 7c 	ld.w	r9,r9[380]
8001e082:	12 9b       	mov	r11,r9
8001e084:	10 9c       	mov	r12,r8
8001e086:	f0 16 00 08 	mcall	r6[32]
8001e08a:	18 98       	mov	r8,r12
8001e08c:	10 9c       	mov	r12,r8
8001e08e:	f0 16 00 02 	mcall	r6[8]
8001e092:	14 98       	mov	r8,r10
8001e094:	16 99       	mov	r9,r11
8001e096:	04 9a       	mov	r10,r2
8001e098:	06 9b       	mov	r11,r3
8001e09a:	f0 16 00 05 	mcall	r6[20]
8001e09e:	14 98       	mov	r8,r10
8001e0a0:	16 99       	mov	r9,r11
8001e0a2:	10 9a       	mov	r10,r8
8001e0a4:	12 9b       	mov	r11,r9
8001e0a6:	f0 16 00 09 	mcall	r6[36]
8001e0aa:	18 98       	mov	r8,r12
8001e0ac:	fc 1b 41 20 	movh	r11,0x4120
8001e0b0:	10 9c       	mov	r12,r8
8001e0b2:	fe b0 fa d1 	rcall	8001d654 <clip>
8001e0b6:	18 99       	mov	r9,r12
8001e0b8:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e0bc:	91 49       	st.w	r8[0x10],r9
	sim->rates_bf[2] = clip((1.0-0.1*sim->dt)*sim->rates_bf[2] + sim->dt * sim->torques_bf[2] /sim->yaw_momentum, 10.0);
8001e0be:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e0c2:	f0 f8 01 90 	ld.w	r8,r8[400]
8001e0c6:	10 9c       	mov	r12,r8
8001e0c8:	f0 16 00 02 	mcall	r6[8]
8001e0cc:	e0 68 99 9a 	mov	r8,39322
8001e0d0:	ea 18 99 99 	orh	r8,0x9999
8001e0d4:	e0 69 99 99 	mov	r9,39321
8001e0d8:	ea 19 bf b9 	orh	r9,0xbfb9
8001e0dc:	f0 16 00 03 	mcall	r6[12]
8001e0e0:	14 98       	mov	r8,r10
8001e0e2:	16 99       	mov	r9,r11
8001e0e4:	10 9a       	mov	r10,r8
8001e0e6:	12 9b       	mov	r11,r9
8001e0e8:	30 08       	mov	r8,0
8001e0ea:	fc 19 3f f0 	movh	r9,0x3ff0
8001e0ee:	f0 16 00 05 	mcall	r6[20]
8001e0f2:	14 98       	mov	r8,r10
8001e0f4:	16 99       	mov	r9,r11
8001e0f6:	10 92       	mov	r2,r8
8001e0f8:	12 93       	mov	r3,r9
8001e0fa:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e0fe:	70 58       	ld.w	r8,r8[0x14]
8001e100:	10 9c       	mov	r12,r8
8001e102:	f0 16 00 02 	mcall	r6[8]
8001e106:	14 98       	mov	r8,r10
8001e108:	16 99       	mov	r9,r11
8001e10a:	04 9a       	mov	r10,r2
8001e10c:	06 9b       	mov	r11,r3
8001e10e:	f0 16 00 03 	mcall	r6[12]
8001e112:	14 98       	mov	r8,r10
8001e114:	16 99       	mov	r9,r11
8001e116:	10 92       	mov	r2,r8
8001e118:	12 93       	mov	r3,r9
8001e11a:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e11e:	f0 f9 01 90 	ld.w	r9,r8[400]
8001e122:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e126:	70 28       	ld.w	r8,r8[0x8]
8001e128:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8001e12c:	ee f9 ff a0 	ld.w	r9,r7[-96]
8001e130:	f2 f9 01 80 	ld.w	r9,r9[384]
8001e134:	12 9b       	mov	r11,r9
8001e136:	10 9c       	mov	r12,r8
8001e138:	f0 16 00 08 	mcall	r6[32]
8001e13c:	18 98       	mov	r8,r12
8001e13e:	10 9c       	mov	r12,r8
8001e140:	f0 16 00 02 	mcall	r6[8]
8001e144:	14 98       	mov	r8,r10
8001e146:	16 99       	mov	r9,r11
8001e148:	04 9a       	mov	r10,r2
8001e14a:	06 9b       	mov	r11,r3
8001e14c:	f0 16 00 05 	mcall	r6[20]
8001e150:	14 98       	mov	r8,r10
8001e152:	16 99       	mov	r9,r11
8001e154:	10 9a       	mov	r10,r8
8001e156:	12 9b       	mov	r11,r9
8001e158:	f0 16 00 09 	mcall	r6[36]
8001e15c:	18 98       	mov	r8,r12
8001e15e:	fc 1b 41 20 	movh	r11,0x4120
8001e162:	10 9c       	mov	r12,r8
8001e164:	fe b0 fa 78 	rcall	8001d654 <clip>
8001e168:	18 99       	mov	r9,r12
8001e16a:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e16e:	91 59       	st.w	r8[0x14],r9
	//}
	
	
	for (i=0; i<3; i++){
8001e170:	30 08       	mov	r8,0
8001e172:	ef 48 ff f4 	st.w	r7[-12],r8
8001e176:	c1 58       	rjmp	8001e1a0 <simu_update+0x2fe>
			qtmp1.v[i] = sim->rates_bf[i];
8001e178:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001e17c:	ee fa ff f4 	ld.w	r10,r7[-12]
8001e180:	ee f9 ff a0 	ld.w	r9,r7[-96]
8001e184:	2f da       	sub	r10,-3
8001e186:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
8001e18a:	2f f8       	sub	r8,-1
8001e18c:	a3 68       	lsl	r8,0x2
8001e18e:	ee 08 00 08 	add	r8,r7,r8
8001e192:	f1 49 ff e4 	st.w	r8[-28],r9
	sim->rates_bf[1] = clip((1.0-0.1*sim->dt)*sim->rates_bf[1] + sim->dt * sim->torques_bf[1] /sim->roll_pitch_momentum, 10.0);
	sim->rates_bf[2] = clip((1.0-0.1*sim->dt)*sim->rates_bf[2] + sim->dt * sim->torques_bf[2] /sim->yaw_momentum, 10.0);
	//}
	
	
	for (i=0; i<3; i++){
8001e196:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001e19a:	2f f8       	sub	r8,-1
8001e19c:	ef 48 ff f4 	st.w	r7[-12],r8
8001e1a0:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001e1a4:	58 28       	cp.w	r8,2
8001e1a6:	fe 9a ff e9 	brle	8001e178 <simu_update+0x2d6>
			qtmp1.v[i] = sim->rates_bf[i];
	}
	qtmp1.s=0;
8001e1aa:	30 08       	mov	r8,0
8001e1ac:	ef 48 ff e4 	st.w	r7[-28],r8

	// apply step rotation 
	qed = quat_multi(sim->attitude.qe,qtmp1);
8001e1b0:	ee ca 00 3c 	sub	r10,r7,60
8001e1b4:	20 4d       	sub	sp,16
8001e1b6:	1a 98       	mov	r8,sp
8001e1b8:	ee c9 00 1c 	sub	r9,r7,28
8001e1bc:	20 08       	sub	r8,0
8001e1be:	20 09       	sub	r9,0
8001e1c0:	72 0b       	ld.w	r11,r9[0x0]
8001e1c2:	91 0b       	st.w	r8[0x0],r11
8001e1c4:	72 1b       	ld.w	r11,r9[0x4]
8001e1c6:	91 1b       	st.w	r8[0x4],r11
8001e1c8:	72 2b       	ld.w	r11,r9[0x8]
8001e1ca:	91 2b       	st.w	r8[0x8],r11
8001e1cc:	72 39       	ld.w	r9,r9[0xc]
8001e1ce:	91 39       	st.w	r8[0xc],r9
8001e1d0:	ee f9 ff a0 	ld.w	r9,r7[-96]
8001e1d4:	20 4d       	sub	sp,16
8001e1d6:	1a 98       	mov	r8,sp
8001e1d8:	2b 89       	sub	r9,-72
8001e1da:	20 08       	sub	r8,0
8001e1dc:	20 09       	sub	r9,0
8001e1de:	72 0b       	ld.w	r11,r9[0x0]
8001e1e0:	91 0b       	st.w	r8[0x0],r11
8001e1e2:	72 1b       	ld.w	r11,r9[0x4]
8001e1e4:	91 1b       	st.w	r8[0x4],r11
8001e1e6:	72 2b       	ld.w	r11,r9[0x8]
8001e1e8:	91 2b       	st.w	r8[0x8],r11
8001e1ea:	72 39       	ld.w	r9,r9[0xc]
8001e1ec:	91 39       	st.w	r8[0xc],r9
8001e1ee:	14 9c       	mov	r12,r10
8001e1f0:	fe b0 f7 90 	rcall	8001d110 <quat_multi>
8001e1f4:	2f 8d       	sub	sp,-32

	sim->attitude.qe.s=sim->attitude.qe.s+qed.s*sim->dt;
8001e1f6:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e1fa:	71 29       	ld.w	r9,r8[0x48]
8001e1fc:	ee fa ff c4 	ld.w	r10,r7[-60]
8001e200:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e204:	f0 f8 01 90 	ld.w	r8,r8[400]
8001e208:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8001e20c:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001e210:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e214:	f1 49 00 48 	st.w	r8[72],r9
	sim->attitude.qe.v[0]+=qed.v[0]*sim->dt;
8001e218:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e21c:	71 39       	ld.w	r9,r8[0x4c]
8001e21e:	ee fa ff c8 	ld.w	r10,r7[-56]
8001e222:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e226:	f0 f8 01 90 	ld.w	r8,r8[400]
8001e22a:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8001e22e:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001e232:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e236:	f1 49 00 4c 	st.w	r8[76],r9
	sim->attitude.qe.v[1]+=qed.v[1]*sim->dt;
8001e23a:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e23e:	71 49       	ld.w	r9,r8[0x50]
8001e240:	ee fa ff cc 	ld.w	r10,r7[-52]
8001e244:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e248:	f0 f8 01 90 	ld.w	r8,r8[400]
8001e24c:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8001e250:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001e254:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e258:	f1 49 00 50 	st.w	r8[80],r9
	sim->attitude.qe.v[2]+=qed.v[2]*sim->dt;
8001e25c:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e260:	71 59       	ld.w	r9,r8[0x54]
8001e262:	ee fa ff d0 	ld.w	r10,r7[-48]
8001e266:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e26a:	f0 f8 01 90 	ld.w	r8,r8[400]
8001e26e:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8001e272:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001e276:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e27a:	f1 49 00 54 	st.w	r8[84],r9

	sim->attitude.qe = quat_normalise(sim->attitude.qe);
8001e27e:	ee f5 ff a0 	ld.w	r5,r7[-96]
8001e282:	ee ca 00 7c 	sub	r10,r7,124
8001e286:	ee f9 ff a0 	ld.w	r9,r7[-96]
8001e28a:	20 4d       	sub	sp,16
8001e28c:	1a 98       	mov	r8,sp
8001e28e:	2b 89       	sub	r9,-72
8001e290:	20 08       	sub	r8,0
8001e292:	20 09       	sub	r9,0
8001e294:	72 0b       	ld.w	r11,r9[0x0]
8001e296:	91 0b       	st.w	r8[0x0],r11
8001e298:	72 1b       	ld.w	r11,r9[0x4]
8001e29a:	91 1b       	st.w	r8[0x4],r11
8001e29c:	72 2b       	ld.w	r11,r9[0x8]
8001e29e:	91 2b       	st.w	r8[0x8],r11
8001e2a0:	72 39       	ld.w	r9,r9[0xc]
8001e2a2:	91 39       	st.w	r8[0xc],r9
8001e2a4:	14 9c       	mov	r12,r10
8001e2a6:	fe b0 f9 53 	rcall	8001d54c <quat_normalise>
8001e2aa:	2f cd       	sub	sp,-16
8001e2ac:	ea c8 ff b8 	sub	r8,r5,-72
8001e2b0:	ee c9 00 7c 	sub	r9,r7,124
8001e2b4:	20 08       	sub	r8,0
8001e2b6:	20 09       	sub	r9,0
8001e2b8:	72 0a       	ld.w	r10,r9[0x0]
8001e2ba:	91 0a       	st.w	r8[0x0],r10
8001e2bc:	72 1a       	ld.w	r10,r9[0x4]
8001e2be:	91 1a       	st.w	r8[0x4],r10
8001e2c0:	72 2a       	ld.w	r10,r9[0x8]
8001e2c2:	91 2a       	st.w	r8[0x8],r10
8001e2c4:	72 39       	ld.w	r9,r9[0xc]
8001e2c6:	91 39       	st.w	r8[0xc],r9
	sim->attitude.up_vec = quat_global_to_local(sim->attitude.qe, up);
8001e2c8:	ee f5 ff a0 	ld.w	r5,r7[-96]
8001e2cc:	ee ca 00 7c 	sub	r10,r7,124
8001e2d0:	20 4d       	sub	sp,16
8001e2d2:	1a 98       	mov	r8,sp
8001e2d4:	ee c9 00 5c 	sub	r9,r7,92
8001e2d8:	20 08       	sub	r8,0
8001e2da:	20 09       	sub	r9,0
8001e2dc:	72 0b       	ld.w	r11,r9[0x0]
8001e2de:	91 0b       	st.w	r8[0x0],r11
8001e2e0:	72 1b       	ld.w	r11,r9[0x4]
8001e2e2:	91 1b       	st.w	r8[0x4],r11
8001e2e4:	72 2b       	ld.w	r11,r9[0x8]
8001e2e6:	91 2b       	st.w	r8[0x8],r11
8001e2e8:	72 39       	ld.w	r9,r9[0xc]
8001e2ea:	91 39       	st.w	r8[0xc],r9
8001e2ec:	ee f9 ff a0 	ld.w	r9,r7[-96]
8001e2f0:	20 4d       	sub	sp,16
8001e2f2:	1a 98       	mov	r8,sp
8001e2f4:	2b 89       	sub	r9,-72
8001e2f6:	20 08       	sub	r8,0
8001e2f8:	20 09       	sub	r9,0
8001e2fa:	72 0b       	ld.w	r11,r9[0x0]
8001e2fc:	91 0b       	st.w	r8[0x0],r11
8001e2fe:	72 1b       	ld.w	r11,r9[0x4]
8001e300:	91 1b       	st.w	r8[0x4],r11
8001e302:	72 2b       	ld.w	r11,r9[0x8]
8001e304:	91 2b       	st.w	r8[0x8],r11
8001e306:	72 39       	ld.w	r9,r9[0xc]
8001e308:	91 39       	st.w	r8[0xc],r9
8001e30a:	14 9c       	mov	r12,r10
8001e30c:	fe b0 f7 ba 	rcall	8001d280 <quat_global_to_local>
8001e310:	2f 8d       	sub	sp,-32
8001e312:	ea c8 ff a8 	sub	r8,r5,-88
8001e316:	ee c9 00 7c 	sub	r9,r7,124
8001e31a:	20 08       	sub	r8,0
8001e31c:	20 09       	sub	r9,0
8001e31e:	72 0a       	ld.w	r10,r9[0x0]
8001e320:	91 0a       	st.w	r8[0x0],r10
8001e322:	72 1a       	ld.w	r10,r9[0x4]
8001e324:	91 1a       	st.w	r8[0x4],r10
8001e326:	72 2a       	ld.w	r10,r9[0x8]
8001e328:	91 2a       	st.w	r8[0x8],r10
8001e32a:	72 39       	ld.w	r9,r9[0xc]
8001e32c:	91 39       	st.w	r8[0xc],r9
	
	sim->attitude.north_vec=quat_global_to_local(sim->attitude.qe, front);	
8001e32e:	ee f5 ff a0 	ld.w	r5,r7[-96]
8001e332:	ee ca 00 7c 	sub	r10,r7,124
8001e336:	20 4d       	sub	sp,16
8001e338:	1a 98       	mov	r8,sp
8001e33a:	ee c9 00 4c 	sub	r9,r7,76
8001e33e:	20 08       	sub	r8,0
8001e340:	20 09       	sub	r9,0
8001e342:	72 0b       	ld.w	r11,r9[0x0]
8001e344:	91 0b       	st.w	r8[0x0],r11
8001e346:	72 1b       	ld.w	r11,r9[0x4]
8001e348:	91 1b       	st.w	r8[0x4],r11
8001e34a:	72 2b       	ld.w	r11,r9[0x8]
8001e34c:	91 2b       	st.w	r8[0x8],r11
8001e34e:	72 39       	ld.w	r9,r9[0xc]
8001e350:	91 39       	st.w	r8[0xc],r9
8001e352:	ee f9 ff a0 	ld.w	r9,r7[-96]
8001e356:	20 4d       	sub	sp,16
8001e358:	1a 98       	mov	r8,sp
8001e35a:	2b 89       	sub	r9,-72
8001e35c:	20 08       	sub	r8,0
8001e35e:	20 09       	sub	r9,0
8001e360:	72 0b       	ld.w	r11,r9[0x0]
8001e362:	91 0b       	st.w	r8[0x0],r11
8001e364:	72 1b       	ld.w	r11,r9[0x4]
8001e366:	91 1b       	st.w	r8[0x4],r11
8001e368:	72 2b       	ld.w	r11,r9[0x8]
8001e36a:	91 2b       	st.w	r8[0x8],r11
8001e36c:	72 39       	ld.w	r9,r9[0xc]
8001e36e:	91 39       	st.w	r8[0xc],r9
8001e370:	14 9c       	mov	r12,r10
8001e372:	fe b0 f7 87 	rcall	8001d280 <quat_global_to_local>
8001e376:	2f 8d       	sub	sp,-32
8001e378:	ea c8 ff 98 	sub	r8,r5,-104
8001e37c:	ee c9 00 7c 	sub	r9,r7,124
8001e380:	20 08       	sub	r8,0
8001e382:	20 09       	sub	r9,0
8001e384:	72 0a       	ld.w	r10,r9[0x0]
8001e386:	91 0a       	st.w	r8[0x0],r10
8001e388:	72 1a       	ld.w	r10,r9[0x4]
8001e38a:	91 1a       	st.w	r8[0x4],r10
8001e38c:	72 2a       	ld.w	r10,r9[0x8]
8001e38e:	91 2a       	st.w	r8[0x8],r10
8001e390:	72 39       	ld.w	r9,r9[0xc]
8001e392:	91 39       	st.w	r8[0xc],r9

	// velocity and position integration
	
	// check altitude - if it is lower than 0, clamp everything (this is in NED, assuming negative altitude)
	if (sim->localPosition.pos[Z] >0) {
8001e394:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e398:	f0 fa 01 1c 	ld.w	r10,r8[284]
8001e39c:	30 18       	mov	r8,1
8001e39e:	30 09       	mov	r9,0
8001e3a0:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
8001e3a4:	e0 8c 00 04 	brvs	8001e3ac <simu_update+0x50a>
8001e3a8:	e0 89 00 03 	brgt	8001e3ae <simu_update+0x50c>
8001e3ac:	30 08       	mov	r8,0
8001e3ae:	5c 58       	castu.b	r8
8001e3b0:	e0 80 00 85 	breq	8001e4ba <simu_update+0x618>
		sim->vel[Z]=0.0;
8001e3b4:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e3b8:	30 09       	mov	r9,0
8001e3ba:	91 e9       	st.w	r8[0x38],r9
		sim->localPosition.pos[Z]=0.0;
8001e3bc:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e3c0:	30 09       	mov	r9,0
8001e3c2:	f1 49 01 1c 	st.w	r8[284],r9

		// simulate "acceleration" caused by contact force with ground, compensating gravity
		for (i=0; i<3; i++) {
8001e3c6:	30 08       	mov	r8,0
8001e3c8:	ef 48 ff f4 	st.w	r7[-12],r8
8001e3cc:	c4 18       	rjmp	8001e44e <simu_update+0x5ac>
			sim->lin_forces_bf[i]+=sim->attitude.up_vec.v[i]*sim->total_mass *GRAVITY;
8001e3ce:	ee f5 ff f4 	ld.w	r5,r7[-12]
8001e3d2:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001e3d6:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e3da:	2f a9       	sub	r9,-6
8001e3dc:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8001e3e0:	10 9c       	mov	r12,r8
8001e3e2:	f0 16 00 02 	mcall	r6[8]
8001e3e6:	14 92       	mov	r2,r10
8001e3e8:	16 93       	mov	r3,r11
8001e3ea:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001e3ee:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e3f2:	2e 99       	sub	r9,-23
8001e3f4:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
8001e3f8:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e3fc:	f0 f8 01 74 	ld.w	r8,r8[372]
8001e400:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8001e404:	10 9c       	mov	r12,r8
8001e406:	f0 16 00 02 	mcall	r6[8]
8001e40a:	e0 68 85 1f 	mov	r8,34079
8001e40e:	ea 18 51 eb 	orh	r8,0x51eb
8001e412:	e0 69 9e b8 	mov	r9,40632
8001e416:	ea 19 40 23 	orh	r9,0x4023
8001e41a:	f0 16 00 03 	mcall	r6[12]
8001e41e:	14 98       	mov	r8,r10
8001e420:	16 99       	mov	r9,r11
8001e422:	04 9a       	mov	r10,r2
8001e424:	06 9b       	mov	r11,r3
8001e426:	f0 16 00 05 	mcall	r6[20]
8001e42a:	14 98       	mov	r8,r10
8001e42c:	16 99       	mov	r9,r11
8001e42e:	10 9a       	mov	r10,r8
8001e430:	12 9b       	mov	r11,r9
8001e432:	f0 16 00 09 	mcall	r6[36]
8001e436:	18 9a       	mov	r10,r12
8001e438:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e43c:	ea c9 ff fa 	sub	r9,r5,-6
8001e440:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	if (sim->localPosition.pos[Z] >0) {
		sim->vel[Z]=0.0;
		sim->localPosition.pos[Z]=0.0;

		// simulate "acceleration" caused by contact force with ground, compensating gravity
		for (i=0; i<3; i++) {
8001e444:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001e448:	2f f8       	sub	r8,-1
8001e44a:	ef 48 ff f4 	st.w	r7[-12],r8
8001e44e:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001e452:	58 28       	cp.w	r8,2
8001e454:	fe 9a ff bd 	brle	8001e3ce <simu_update+0x52c>
			sim->lin_forces_bf[i]+=sim->attitude.up_vec.v[i]*sim->total_mass *GRAVITY;
		}
				
		// slow down... (will make velocity slightly inconsistent until next update cycle, but shouldn't matter much)
		for (i=0; i<3; i++) {
8001e458:	30 08       	mov	r8,0
8001e45a:	ef 48 ff f4 	st.w	r7[-12],r8
8001e45e:	c2 98       	rjmp	8001e4b0 <simu_update+0x60e>
			sim->vel_bf[i]=0.95*sim->vel_bf[i];
8001e460:	ee f5 ff f4 	ld.w	r5,r7[-12]
8001e464:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001e468:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e46c:	2f 79       	sub	r9,-9
8001e46e:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8001e472:	10 9c       	mov	r12,r8
8001e474:	f0 16 00 02 	mcall	r6[8]
8001e478:	e0 68 66 66 	mov	r8,26214
8001e47c:	ea 18 66 66 	orh	r8,0x6666
8001e480:	e0 69 66 66 	mov	r9,26214
8001e484:	ea 19 3f ee 	orh	r9,0x3fee
8001e488:	f0 16 00 03 	mcall	r6[12]
8001e48c:	14 98       	mov	r8,r10
8001e48e:	16 99       	mov	r9,r11
8001e490:	10 9a       	mov	r10,r8
8001e492:	12 9b       	mov	r11,r9
8001e494:	f0 16 00 09 	mcall	r6[36]
8001e498:	18 9a       	mov	r10,r12
8001e49a:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e49e:	ea c9 ff f7 	sub	r9,r5,-9
8001e4a2:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		for (i=0; i<3; i++) {
			sim->lin_forces_bf[i]+=sim->attitude.up_vec.v[i]*sim->total_mass *GRAVITY;
		}
				
		// slow down... (will make velocity slightly inconsistent until next update cycle, but shouldn't matter much)
		for (i=0; i<3; i++) {
8001e4a6:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001e4aa:	2f f8       	sub	r8,-1
8001e4ac:	ef 48 ff f4 	st.w	r7[-12],r8
8001e4b0:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001e4b4:	58 28       	cp.w	r8,2
8001e4b6:	fe 9a ff d5 	brle	8001e460 <simu_update+0x5be>
			sim->vel_bf[i]=0.95*sim->vel_bf[i];
		}
	}
	
	for (i=0; i<3; i++){
8001e4ba:	30 08       	mov	r8,0
8001e4bc:	ef 48 ff f4 	st.w	r7[-12],r8
8001e4c0:	c1 58       	rjmp	8001e4ea <simu_update+0x648>
			qtmp1.v[i] = sim->vel[i];
8001e4c2:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001e4c6:	ee fa ff f4 	ld.w	r10,r7[-12]
8001e4ca:	ee f9 ff a0 	ld.w	r9,r7[-96]
8001e4ce:	2f 4a       	sub	r10,-12
8001e4d0:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
8001e4d4:	2f f8       	sub	r8,-1
8001e4d6:	a3 68       	lsl	r8,0x2
8001e4d8:	ee 08 00 08 	add	r8,r7,r8
8001e4dc:	f1 49 ff e4 	st.w	r8[-28],r9
		for (i=0; i<3; i++) {
			sim->vel_bf[i]=0.95*sim->vel_bf[i];
		}
	}
	
	for (i=0; i<3; i++){
8001e4e0:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001e4e4:	2f f8       	sub	r8,-1
8001e4e6:	ef 48 ff f4 	st.w	r7[-12],r8
8001e4ea:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001e4ee:	58 28       	cp.w	r8,2
8001e4f0:	fe 9a ff e9 	brle	8001e4c2 <simu_update+0x620>
			qtmp1.v[i] = sim->vel[i];
	}
	qtmp1.s=0.0;
8001e4f4:	30 08       	mov	r8,0
8001e4f6:	ef 48 ff e4 	st.w	r7[-28],r8
	qvel_bf=quat_global_to_local(sim->attitude.qe, qtmp1);
8001e4fa:	ee ca 00 7c 	sub	r10,r7,124
8001e4fe:	20 4d       	sub	sp,16
8001e500:	1a 98       	mov	r8,sp
8001e502:	ee c9 00 1c 	sub	r9,r7,28
8001e506:	20 08       	sub	r8,0
8001e508:	20 09       	sub	r9,0
8001e50a:	72 0b       	ld.w	r11,r9[0x0]
8001e50c:	91 0b       	st.w	r8[0x0],r11
8001e50e:	72 1b       	ld.w	r11,r9[0x4]
8001e510:	91 1b       	st.w	r8[0x4],r11
8001e512:	72 2b       	ld.w	r11,r9[0x8]
8001e514:	91 2b       	st.w	r8[0x8],r11
8001e516:	72 39       	ld.w	r9,r9[0xc]
8001e518:	91 39       	st.w	r8[0xc],r9
8001e51a:	ee f9 ff a0 	ld.w	r9,r7[-96]
8001e51e:	20 4d       	sub	sp,16
8001e520:	1a 98       	mov	r8,sp
8001e522:	2b 89       	sub	r9,-72
8001e524:	20 08       	sub	r8,0
8001e526:	20 09       	sub	r9,0
8001e528:	72 0b       	ld.w	r11,r9[0x0]
8001e52a:	91 0b       	st.w	r8[0x0],r11
8001e52c:	72 1b       	ld.w	r11,r9[0x4]
8001e52e:	91 1b       	st.w	r8[0x4],r11
8001e530:	72 2b       	ld.w	r11,r9[0x8]
8001e532:	91 2b       	st.w	r8[0x8],r11
8001e534:	72 39       	ld.w	r9,r9[0xc]
8001e536:	91 39       	st.w	r8[0xc],r9
8001e538:	14 9c       	mov	r12,r10
8001e53a:	fe b0 f6 a3 	rcall	8001d280 <quat_global_to_local>
8001e53e:	2f 8d       	sub	sp,-32
8001e540:	ee c8 00 2c 	sub	r8,r7,44
8001e544:	ee c9 00 7c 	sub	r9,r7,124
8001e548:	20 08       	sub	r8,0
8001e54a:	20 09       	sub	r9,0
8001e54c:	72 0a       	ld.w	r10,r9[0x0]
8001e54e:	91 0a       	st.w	r8[0x0],r10
8001e550:	72 1a       	ld.w	r10,r9[0x4]
8001e552:	91 1a       	st.w	r8[0x4],r10
8001e554:	72 2a       	ld.w	r10,r9[0x8]
8001e556:	91 2a       	st.w	r8[0x8],r10
8001e558:	72 39       	ld.w	r9,r9[0xc]
8001e55a:	91 39       	st.w	r8[0xc],r9
	for (i=0; i<3; i++) {
8001e55c:	30 08       	mov	r8,0
8001e55e:	ef 48 ff f4 	st.w	r7[-12],r8
8001e562:	c8 08       	rjmp	8001e662 <simu_update+0x7c0>
		sim->vel_bf[i]=qvel_bf.v[i];
8001e564:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001e568:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001e56c:	2f f8       	sub	r8,-1
8001e56e:	a3 68       	lsl	r8,0x2
8001e570:	ee 08 00 08 	add	r8,r7,r8
8001e574:	f0 fa ff d4 	ld.w	r10,r8[-44]
8001e578:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e57c:	2f 79       	sub	r9,-9
8001e57e:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		
		// following the convention in the IMU, this is the acceleration due to force, as measured
		sim->attitude.a[i]=sim->lin_forces_bf[i] / sim->total_mass;
8001e582:	ee f5 ff f4 	ld.w	r5,r7[-12]
8001e586:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001e58a:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e58e:	2f a9       	sub	r9,-6
8001e590:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8001e594:	ee f9 ff a0 	ld.w	r9,r7[-96]
8001e598:	f2 f9 01 74 	ld.w	r9,r9[372]
8001e59c:	12 9b       	mov	r11,r9
8001e59e:	10 9c       	mov	r12,r8
8001e5a0:	f0 16 00 08 	mcall	r6[32]
8001e5a4:	18 98       	mov	r8,r12
8001e5a6:	10 9a       	mov	r10,r8
8001e5a8:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e5ac:	ea c9 ff cd 	sub	r9,r5,-51
8001e5b0:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		
		// this is the "clean" acceleration without gravity
		sim->attitude.acc_bf[i]=sim->attitude.a[i] - sim->attitude.up_vec.v[i] * GRAVITY;
8001e5b4:	ee f5 ff f4 	ld.w	r5,r7[-12]
8001e5b8:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001e5bc:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e5c0:	2c d9       	sub	r9,-51
8001e5c2:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8001e5c6:	10 9c       	mov	r12,r8
8001e5c8:	f0 16 00 02 	mcall	r6[8]
8001e5cc:	14 92       	mov	r2,r10
8001e5ce:	16 93       	mov	r3,r11
8001e5d0:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001e5d4:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e5d8:	2e 99       	sub	r9,-23
8001e5da:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8001e5de:	10 9c       	mov	r12,r8
8001e5e0:	f0 16 00 02 	mcall	r6[8]
8001e5e4:	e0 68 85 1f 	mov	r8,34079
8001e5e8:	ea 18 51 eb 	orh	r8,0x51eb
8001e5ec:	e0 69 9e b8 	mov	r9,40632
8001e5f0:	ea 19 c0 23 	orh	r9,0xc023
8001e5f4:	f0 16 00 03 	mcall	r6[12]
8001e5f8:	14 98       	mov	r8,r10
8001e5fa:	16 99       	mov	r9,r11
8001e5fc:	04 9a       	mov	r10,r2
8001e5fe:	06 9b       	mov	r11,r3
8001e600:	f0 16 00 05 	mcall	r6[20]
8001e604:	14 98       	mov	r8,r10
8001e606:	16 99       	mov	r9,r11
8001e608:	10 9a       	mov	r10,r8
8001e60a:	12 9b       	mov	r11,r9
8001e60c:	f0 16 00 09 	mcall	r6[36]
8001e610:	18 9a       	mov	r10,r12
8001e612:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e616:	ea c9 ff be 	sub	r9,r5,-66
8001e61a:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		
		sim->vel_bf[i]=sim->vel_bf[i] + sim->attitude.acc_bf[i] * sim->dt;
8001e61e:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001e622:	ee fa ff f4 	ld.w	r10,r7[-12]
8001e626:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e62a:	2f 7a       	sub	r10,-9
8001e62c:	f0 0a 03 2a 	ld.w	r10,r8[r10<<0x2]
8001e630:	ee fb ff f4 	ld.w	r11,r7[-12]
8001e634:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e638:	2b eb       	sub	r11,-66
8001e63a:	f0 0b 03 2b 	ld.w	r11,r8[r11<<0x2]
8001e63e:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e642:	f0 f8 01 90 	ld.w	r8,r8[400]
8001e646:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
8001e64a:	e5 a0 0a a8 	cop	cp0,cr10,cr10,cr8,0x40
8001e64e:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e652:	2f 79       	sub	r9,-9
8001e654:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	for (i=0; i<3; i++){
			qtmp1.v[i] = sim->vel[i];
	}
	qtmp1.s=0.0;
	qvel_bf=quat_global_to_local(sim->attitude.qe, qtmp1);
	for (i=0; i<3; i++) {
8001e658:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001e65c:	2f f8       	sub	r8,-1
8001e65e:	ef 48 ff f4 	st.w	r7[-12],r8
8001e662:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001e666:	58 28       	cp.w	r8,2
8001e668:	fe 9a ff 7e 	brle	8001e564 <simu_update+0x6c2>
		sim->vel_bf[i]=sim->vel_bf[i] + sim->attitude.acc_bf[i] * sim->dt;
	}
	
	// calculate velocity in global frame
	// vel = qe *vel_bf * qe-1
	qvel_bf.s= 0.0; qvel_bf.v[0]=sim->vel_bf[0]; qvel_bf.v[1]=sim->vel_bf[1]; qvel_bf.v[2]=sim->vel_bf[2];
8001e66c:	30 08       	mov	r8,0
8001e66e:	ef 48 ff d4 	st.w	r7[-44],r8
8001e672:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e676:	70 98       	ld.w	r8,r8[0x24]
8001e678:	ef 48 ff d8 	st.w	r7[-40],r8
8001e67c:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e680:	70 a8       	ld.w	r8,r8[0x28]
8001e682:	ef 48 ff dc 	st.w	r7[-36],r8
8001e686:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e68a:	70 b8       	ld.w	r8,r8[0x2c]
8001e68c:	ef 48 ff e0 	st.w	r7[-32],r8
	qtmp1 = quat_local_to_global(sim->attitude.qe, qvel_bf);
8001e690:	ee ca 00 7c 	sub	r10,r7,124
8001e694:	20 4d       	sub	sp,16
8001e696:	1a 98       	mov	r8,sp
8001e698:	ee c9 00 2c 	sub	r9,r7,44
8001e69c:	20 08       	sub	r8,0
8001e69e:	20 09       	sub	r9,0
8001e6a0:	72 0b       	ld.w	r11,r9[0x0]
8001e6a2:	91 0b       	st.w	r8[0x0],r11
8001e6a4:	72 1b       	ld.w	r11,r9[0x4]
8001e6a6:	91 1b       	st.w	r8[0x4],r11
8001e6a8:	72 2b       	ld.w	r11,r9[0x8]
8001e6aa:	91 2b       	st.w	r8[0x8],r11
8001e6ac:	72 39       	ld.w	r9,r9[0xc]
8001e6ae:	91 39       	st.w	r8[0xc],r9
8001e6b0:	ee f9 ff a0 	ld.w	r9,r7[-96]
8001e6b4:	20 4d       	sub	sp,16
8001e6b6:	1a 98       	mov	r8,sp
8001e6b8:	2b 89       	sub	r9,-72
8001e6ba:	20 08       	sub	r8,0
8001e6bc:	20 09       	sub	r9,0
8001e6be:	72 0b       	ld.w	r11,r9[0x0]
8001e6c0:	91 0b       	st.w	r8[0x0],r11
8001e6c2:	72 1b       	ld.w	r11,r9[0x4]
8001e6c4:	91 1b       	st.w	r8[0x4],r11
8001e6c6:	72 2b       	ld.w	r11,r9[0x8]
8001e6c8:	91 2b       	st.w	r8[0x8],r11
8001e6ca:	72 39       	ld.w	r9,r9[0xc]
8001e6cc:	91 39       	st.w	r8[0xc],r9
8001e6ce:	14 9c       	mov	r12,r10
8001e6d0:	fe b0 f6 56 	rcall	8001d37c <quat_local_to_global>
8001e6d4:	2f 8d       	sub	sp,-32
8001e6d6:	ee c8 00 1c 	sub	r8,r7,28
8001e6da:	ee c9 00 7c 	sub	r9,r7,124
8001e6de:	20 08       	sub	r8,0
8001e6e0:	20 09       	sub	r9,0
8001e6e2:	72 0a       	ld.w	r10,r9[0x0]
8001e6e4:	91 0a       	st.w	r8[0x0],r10
8001e6e6:	72 1a       	ld.w	r10,r9[0x4]
8001e6e8:	91 1a       	st.w	r8[0x4],r10
8001e6ea:	72 2a       	ld.w	r10,r9[0x8]
8001e6ec:	91 2a       	st.w	r8[0x8],r10
8001e6ee:	72 39       	ld.w	r9,r9[0xc]
8001e6f0:	91 39       	st.w	r8[0xc],r9
	sim->vel[0]=qtmp1.v[0]; sim->vel[1]=qtmp1.v[1]; sim->vel[2]=qtmp1.v[2];
8001e6f2:	ee f9 ff e8 	ld.w	r9,r7[-24]
8001e6f6:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e6fa:	91 c9       	st.w	r8[0x30],r9
8001e6fc:	ee f9 ff ec 	ld.w	r9,r7[-20]
8001e700:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e704:	91 d9       	st.w	r8[0x34],r9
8001e706:	ee f9 ff f0 	ld.w	r9,r7[-16]
8001e70a:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e70e:	91 e9       	st.w	r8[0x38],r9
	
	for (i=0; i<3; i++) {
8001e710:	30 08       	mov	r8,0
8001e712:	ef 48 ff f4 	st.w	r7[-12],r8
8001e716:	c2 38       	rjmp	8001e75c <simu_update+0x8ba>
		sim->localPosition.pos[i] =sim->localPosition.pos[i] + sim->vel[i] * sim->dt;
8001e718:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001e71c:	ee fa ff f4 	ld.w	r10,r7[-12]
8001e720:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e724:	2b ba       	sub	r10,-69
8001e726:	f0 0a 03 2a 	ld.w	r10,r8[r10<<0x2]
8001e72a:	ee fb ff f4 	ld.w	r11,r7[-12]
8001e72e:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e732:	2f 4b       	sub	r11,-12
8001e734:	f0 0b 03 2b 	ld.w	r11,r8[r11<<0x2]
8001e738:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e73c:	f0 f8 01 90 	ld.w	r8,r8[400]
8001e740:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
8001e744:	e5 a0 0a a8 	cop	cp0,cr10,cr10,cr8,0x40
8001e748:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e74c:	2b b9       	sub	r9,-69
8001e74e:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	// vel = qe *vel_bf * qe-1
	qvel_bf.s= 0.0; qvel_bf.v[0]=sim->vel_bf[0]; qvel_bf.v[1]=sim->vel_bf[1]; qvel_bf.v[2]=sim->vel_bf[2];
	qtmp1 = quat_local_to_global(sim->attitude.qe, qvel_bf);
	sim->vel[0]=qtmp1.v[0]; sim->vel[1]=qtmp1.v[1]; sim->vel[2]=qtmp1.v[2];
	
	for (i=0; i<3; i++) {
8001e752:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001e756:	2f f8       	sub	r8,-1
8001e758:	ef 48 ff f4 	st.w	r7[-12],r8
8001e75c:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001e760:	58 28       	cp.w	r8,2
8001e762:	fe 9a ff db 	brle	8001e718 <simu_update+0x876>



	// fill in simulated IMU values
	
	imu->raw_channels[GYRO_OFFSET+IMU_X]=sim->rates_bf[0] * imu->raw_scale[GYRO_OFFSET+IMU_X]+imu->raw_bias[GYRO_OFFSET+IMU_X];
8001e766:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e76a:	70 39       	ld.w	r9,r8[0xc]
8001e76c:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001e770:	f0 f8 01 14 	ld.w	r8,r8[276]
8001e774:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8001e778:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001e77c:	f0 f8 00 f0 	ld.w	r8,r8[240]
8001e780:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001e784:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001e788:	f1 49 00 cc 	st.w	r8[204],r9
	imu->raw_channels[GYRO_OFFSET+IMU_Y]=sim->rates_bf[1] * imu->raw_scale[GYRO_OFFSET+IMU_Y]+imu->raw_bias[GYRO_OFFSET+IMU_Y];
8001e78c:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e790:	70 49       	ld.w	r9,r8[0x10]
8001e792:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001e796:	f0 f8 01 18 	ld.w	r8,r8[280]
8001e79a:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8001e79e:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001e7a2:	f0 f8 00 f4 	ld.w	r8,r8[244]
8001e7a6:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001e7aa:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001e7ae:	f1 49 00 d0 	st.w	r8[208],r9
	imu->raw_channels[GYRO_OFFSET+IMU_Z]=sim->rates_bf[2] * imu->raw_scale[GYRO_OFFSET+IMU_Z]+imu->raw_bias[GYRO_OFFSET+IMU_Z];
8001e7b2:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e7b6:	70 59       	ld.w	r9,r8[0x14]
8001e7b8:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001e7bc:	f0 f8 01 1c 	ld.w	r8,r8[284]
8001e7c0:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8001e7c4:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001e7c8:	f0 f8 00 f8 	ld.w	r8,r8[248]
8001e7cc:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001e7d0:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001e7d4:	f1 49 00 d4 	st.w	r8[212],r9

	imu->raw_channels[ACC_OFFSET+IMU_X]=(sim->lin_forces_bf[0] / sim->total_mass / GRAVITY)*imu->raw_scale[ACC_OFFSET+IMU_X]+imu->raw_bias[ACC_OFFSET+IMU_X];
8001e7d8:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e7dc:	70 68       	ld.w	r8,r8[0x18]
8001e7de:	ee f9 ff a0 	ld.w	r9,r7[-96]
8001e7e2:	f2 f9 01 74 	ld.w	r9,r9[372]
8001e7e6:	12 9b       	mov	r11,r9
8001e7e8:	10 9c       	mov	r12,r8
8001e7ea:	f0 16 00 08 	mcall	r6[32]
8001e7ee:	18 98       	mov	r8,r12
8001e7f0:	10 9c       	mov	r12,r8
8001e7f2:	f0 16 00 02 	mcall	r6[8]
8001e7f6:	e0 68 85 1f 	mov	r8,34079
8001e7fa:	ea 18 51 eb 	orh	r8,0x51eb
8001e7fe:	e0 69 9e b8 	mov	r9,40632
8001e802:	ea 19 40 23 	orh	r9,0x4023
8001e806:	f0 16 00 0c 	mcall	r6[48]
8001e80a:	14 98       	mov	r8,r10
8001e80c:	16 99       	mov	r9,r11
8001e80e:	10 92       	mov	r2,r8
8001e810:	12 93       	mov	r3,r9
8001e812:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001e816:	f0 f8 01 20 	ld.w	r8,r8[288]
8001e81a:	10 9c       	mov	r12,r8
8001e81c:	f0 16 00 02 	mcall	r6[8]
8001e820:	14 98       	mov	r8,r10
8001e822:	16 99       	mov	r9,r11
8001e824:	04 9a       	mov	r10,r2
8001e826:	06 9b       	mov	r11,r3
8001e828:	f0 16 00 03 	mcall	r6[12]
8001e82c:	14 98       	mov	r8,r10
8001e82e:	16 99       	mov	r9,r11
8001e830:	10 92       	mov	r2,r8
8001e832:	12 93       	mov	r3,r9
8001e834:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001e838:	f0 f8 00 fc 	ld.w	r8,r8[252]
8001e83c:	10 9c       	mov	r12,r8
8001e83e:	f0 16 00 02 	mcall	r6[8]
8001e842:	14 98       	mov	r8,r10
8001e844:	16 99       	mov	r9,r11
8001e846:	04 9a       	mov	r10,r2
8001e848:	06 9b       	mov	r11,r3
8001e84a:	f0 16 00 05 	mcall	r6[20]
8001e84e:	14 98       	mov	r8,r10
8001e850:	16 99       	mov	r9,r11
8001e852:	10 9a       	mov	r10,r8
8001e854:	12 9b       	mov	r11,r9
8001e856:	f0 16 00 09 	mcall	r6[36]
8001e85a:	18 99       	mov	r9,r12
8001e85c:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001e860:	f1 49 00 d8 	st.w	r8[216],r9
	imu->raw_channels[ACC_OFFSET+IMU_Y]=(sim->lin_forces_bf[1] / sim->total_mass / GRAVITY)*imu->raw_scale[ACC_OFFSET+IMU_Y]+imu->raw_bias[ACC_OFFSET+IMU_Y];
8001e864:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e868:	70 78       	ld.w	r8,r8[0x1c]
8001e86a:	ee f9 ff a0 	ld.w	r9,r7[-96]
8001e86e:	f2 f9 01 74 	ld.w	r9,r9[372]
8001e872:	12 9b       	mov	r11,r9
8001e874:	10 9c       	mov	r12,r8
8001e876:	f0 16 00 08 	mcall	r6[32]
8001e87a:	18 98       	mov	r8,r12
8001e87c:	10 9c       	mov	r12,r8
8001e87e:	f0 16 00 02 	mcall	r6[8]
8001e882:	e0 68 85 1f 	mov	r8,34079
8001e886:	ea 18 51 eb 	orh	r8,0x51eb
8001e88a:	e0 69 9e b8 	mov	r9,40632
8001e88e:	ea 19 40 23 	orh	r9,0x4023
8001e892:	f0 16 00 0c 	mcall	r6[48]
8001e896:	14 98       	mov	r8,r10
8001e898:	16 99       	mov	r9,r11
8001e89a:	10 92       	mov	r2,r8
8001e89c:	12 93       	mov	r3,r9
8001e89e:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001e8a2:	f0 f8 01 24 	ld.w	r8,r8[292]
8001e8a6:	10 9c       	mov	r12,r8
8001e8a8:	f0 16 00 02 	mcall	r6[8]
8001e8ac:	14 98       	mov	r8,r10
8001e8ae:	16 99       	mov	r9,r11
8001e8b0:	04 9a       	mov	r10,r2
8001e8b2:	06 9b       	mov	r11,r3
8001e8b4:	f0 16 00 03 	mcall	r6[12]
8001e8b8:	14 98       	mov	r8,r10
8001e8ba:	16 99       	mov	r9,r11
8001e8bc:	10 92       	mov	r2,r8
8001e8be:	12 93       	mov	r3,r9
8001e8c0:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001e8c4:	f0 f8 01 00 	ld.w	r8,r8[256]
8001e8c8:	10 9c       	mov	r12,r8
8001e8ca:	f0 16 00 02 	mcall	r6[8]
8001e8ce:	14 98       	mov	r8,r10
8001e8d0:	16 99       	mov	r9,r11
8001e8d2:	04 9a       	mov	r10,r2
8001e8d4:	06 9b       	mov	r11,r3
8001e8d6:	f0 16 00 05 	mcall	r6[20]
8001e8da:	14 98       	mov	r8,r10
8001e8dc:	16 99       	mov	r9,r11
8001e8de:	10 9a       	mov	r10,r8
8001e8e0:	12 9b       	mov	r11,r9
8001e8e2:	f0 16 00 09 	mcall	r6[36]
8001e8e6:	18 99       	mov	r9,r12
8001e8e8:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001e8ec:	f1 49 00 dc 	st.w	r8[220],r9
	imu->raw_channels[ACC_OFFSET+IMU_Z]=(sim->lin_forces_bf[2] / sim->total_mass / GRAVITY)*imu->raw_scale[ACC_OFFSET+IMU_Z]+imu->raw_bias[ACC_OFFSET+IMU_Z];
8001e8f0:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e8f4:	70 88       	ld.w	r8,r8[0x20]
8001e8f6:	ee f9 ff a0 	ld.w	r9,r7[-96]
8001e8fa:	f2 f9 01 74 	ld.w	r9,r9[372]
8001e8fe:	12 9b       	mov	r11,r9
8001e900:	10 9c       	mov	r12,r8
8001e902:	f0 16 00 08 	mcall	r6[32]
8001e906:	18 98       	mov	r8,r12
8001e908:	10 9c       	mov	r12,r8
8001e90a:	f0 16 00 02 	mcall	r6[8]
8001e90e:	e0 68 85 1f 	mov	r8,34079
8001e912:	ea 18 51 eb 	orh	r8,0x51eb
8001e916:	e0 69 9e b8 	mov	r9,40632
8001e91a:	ea 19 40 23 	orh	r9,0x4023
8001e91e:	f0 16 00 0c 	mcall	r6[48]
8001e922:	14 98       	mov	r8,r10
8001e924:	16 99       	mov	r9,r11
8001e926:	10 92       	mov	r2,r8
8001e928:	12 93       	mov	r3,r9
8001e92a:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001e92e:	f0 f8 01 28 	ld.w	r8,r8[296]
8001e932:	10 9c       	mov	r12,r8
8001e934:	f0 16 00 02 	mcall	r6[8]
8001e938:	14 98       	mov	r8,r10
8001e93a:	16 99       	mov	r9,r11
8001e93c:	04 9a       	mov	r10,r2
8001e93e:	06 9b       	mov	r11,r3
8001e940:	f0 16 00 03 	mcall	r6[12]
8001e944:	14 98       	mov	r8,r10
8001e946:	16 99       	mov	r9,r11
8001e948:	10 92       	mov	r2,r8
8001e94a:	12 93       	mov	r3,r9
8001e94c:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001e950:	f0 f8 01 04 	ld.w	r8,r8[260]
8001e954:	10 9c       	mov	r12,r8
8001e956:	f0 16 00 02 	mcall	r6[8]
8001e95a:	14 98       	mov	r8,r10
8001e95c:	16 99       	mov	r9,r11
8001e95e:	04 9a       	mov	r10,r2
8001e960:	06 9b       	mov	r11,r3
8001e962:	f0 16 00 05 	mcall	r6[20]
8001e966:	14 98       	mov	r8,r10
8001e968:	16 99       	mov	r9,r11
8001e96a:	10 9a       	mov	r10,r8
8001e96c:	12 9b       	mov	r11,r9
8001e96e:	f0 16 00 09 	mcall	r6[36]
8001e972:	18 99       	mov	r9,r12
8001e974:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001e978:	f1 49 00 e0 	st.w	r8[224],r9
	// cheating... provide true upvector instead of simulated forces
	//imu->raw_channels[ACC_OFFSET+IMU_X]=sim->attitude.up_vec.v[0] *imu->raw_scale[ACC_OFFSET+IMU_X]+imu->raw_bias[ACC_OFFSET+IMU_X];
	//imu->raw_channels[ACC_OFFSET+IMU_Y]=sim->attitude.up_vec.v[1] *imu->raw_scale[ACC_OFFSET+IMU_Y]+imu->raw_bias[ACC_OFFSET+IMU_Y];
	//imu->raw_channels[ACC_OFFSET+IMU_Z]=sim->attitude.up_vec.v[2] *imu->raw_scale[ACC_OFFSET+IMU_Z]+imu->raw_bias[ACC_OFFSET+IMU_Z];
	
	imu->raw_channels[COMPASS_OFFSET+IMU_X]=(sim->attitude.north_vec.v[0] )*imu->raw_scale[COMPASS_OFFSET+IMU_X]+imu->raw_bias[COMPASS_OFFSET+IMU_X];
8001e97c:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e980:	71 b9       	ld.w	r9,r8[0x6c]
8001e982:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001e986:	f0 f8 01 2c 	ld.w	r8,r8[300]
8001e98a:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8001e98e:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001e992:	f0 f8 01 08 	ld.w	r8,r8[264]
8001e996:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001e99a:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001e99e:	f1 49 00 e4 	st.w	r8[228],r9
	imu->raw_channels[COMPASS_OFFSET+IMU_Y]=(sim->attitude.north_vec.v[1] )*imu->raw_scale[COMPASS_OFFSET+IMU_Y]+imu->raw_bias[COMPASS_OFFSET+IMU_Y];
8001e9a2:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e9a6:	71 c9       	ld.w	r9,r8[0x70]
8001e9a8:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001e9ac:	f0 f8 01 30 	ld.w	r8,r8[304]
8001e9b0:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8001e9b4:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001e9b8:	f0 f8 01 0c 	ld.w	r8,r8[268]
8001e9bc:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001e9c0:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001e9c4:	f1 49 00 e8 	st.w	r8[232],r9
	imu->raw_channels[COMPASS_OFFSET+IMU_Z]=(sim->attitude.north_vec.v[2] )*imu->raw_scale[COMPASS_OFFSET+IMU_Z]+imu->raw_bias[COMPASS_OFFSET+IMU_Z];
8001e9c8:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e9cc:	71 d9       	ld.w	r9,r8[0x74]
8001e9ce:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001e9d2:	f0 f8 01 34 	ld.w	r8,r8[308]
8001e9d6:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8001e9da:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001e9de:	f0 f8 01 10 	ld.w	r8,r8[272]
8001e9e2:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001e9e6:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001e9ea:	f1 49 00 ec 	st.w	r8[236],r9
	
	
	//imu->dt=sim->dt;

	sim->localPosition.heading=get_yaw(sim->attitude.qe);
8001e9ee:	ee f9 ff a0 	ld.w	r9,r7[-96]
8001e9f2:	20 4d       	sub	sp,16
8001e9f4:	1a 98       	mov	r8,sp
8001e9f6:	2b 89       	sub	r9,-72
8001e9f8:	20 08       	sub	r8,0
8001e9fa:	20 09       	sub	r9,0
8001e9fc:	72 0a       	ld.w	r10,r9[0x0]
8001e9fe:	91 0a       	st.w	r8[0x0],r10
8001ea00:	72 1a       	ld.w	r10,r9[0x4]
8001ea02:	91 1a       	st.w	r8[0x4],r10
8001ea04:	72 2a       	ld.w	r10,r9[0x8]
8001ea06:	91 2a       	st.w	r8[0x8],r10
8001ea08:	72 39       	ld.w	r9,r9[0xc]
8001ea0a:	91 39       	st.w	r8[0xc],r9
8001ea0c:	f0 16 01 0a 	mcall	r6[1064]
8001ea10:	2f cd       	sub	sp,-16
8001ea12:	18 99       	mov	r9,r12
8001ea14:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001ea18:	f1 49 01 20 	st.w	r8[288],r9
	//pos_est->localPosition=sim->localPosition;
}
8001ea1c:	2e 1d       	sub	sp,-124
8001ea1e:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
8001ea22:	00 00       	add	r0,r0
8001ea24:	80 01       	ld.sh	r1,r0[0x0]
8001ea26:	dd 32       	popm	r0-r7,r11,lr-pc

8001ea28 <simulate_barometer>:

void simulate_barometer(simulation_model_t *sim, pressure_data *pressure) {
8001ea28:	eb cd 40 c0 	pushm	r6-r7,lr
8001ea2c:	1a 97       	mov	r7,sp
8001ea2e:	20 2d       	sub	sp,8
8001ea30:	49 36       	lddpc	r6,8001ea7c <simulate_barometer+0x54>
8001ea32:	1e 26       	rsub	r6,pc
8001ea34:	ef 4c ff fc 	st.w	r7[-4],r12
8001ea38:	ef 4b ff f8 	st.w	r7[-8],r11

		pressure->altitude=sim->localPosition.origin.altitude - sim->localPosition.pos[Z];
8001ea3c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001ea40:	f0 f9 01 34 	ld.w	r9,r8[308]
8001ea44:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001ea48:	f0 f8 01 1c 	ld.w	r8,r8[284]
8001ea4c:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8001ea50:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001ea54:	91 79       	st.w	r8[0x1c],r9
		pressure->vario_vz=sim->vel[Z];
8001ea56:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001ea5a:	70 e9       	ld.w	r9,r8[0x38]
8001ea5c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001ea60:	91 99       	st.w	r8[0x24],r9
		pressure->last_update=get_millis();
8001ea62:	f0 16 00 0f 	mcall	r6[60]
8001ea66:	18 99       	mov	r9,r12
8001ea68:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001ea6c:	91 a9       	st.w	r8[0x28],r9
		pressure->altitude_offset=0;
8001ea6e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001ea72:	30 09       	mov	r9,0
8001ea74:	91 89       	st.w	r8[0x20],r9
		
	}
8001ea76:	2f ed       	sub	sp,-8
8001ea78:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001ea7c:	80 01       	ld.sh	r1,r0[0x0]
8001ea7e:	e8 b6       	*unknown*

8001ea80 <simulate_gps>:
	
void simulate_gps(simulation_model_t *sim, gps_Data_type *gps) {
8001ea80:	eb cd 40 c0 	pushm	r6-r7,lr
8001ea84:	1a 97       	mov	r7,sp
8001ea86:	20 9d       	sub	sp,36
8001ea88:	4a b6       	lddpc	r6,8001eb34 <simulate_gps+0xb4>
8001ea8a:	1e 26       	rsub	r6,pc
8001ea8c:	ef 4c ff e0 	st.w	r7[-32],r12
8001ea90:	ef 4b ff dc 	st.w	r7[-36],r11
		global_position_t gpos=local_to_global_position(sim->localPosition);
8001ea94:	ee cc 00 1c 	sub	r12,r7,28
8001ea98:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001ea9c:	20 cd       	sub	sp,48
8001ea9e:	1a 99       	mov	r9,sp
8001eaa0:	12 9b       	mov	r11,r9
8001eaa2:	f0 ca fe ec 	sub	r10,r8,-276
8001eaa6:	f6 c8 00 00 	sub	r8,r11,0
8001eaaa:	f4 c9 00 00 	sub	r9,r10,0
8001eaae:	72 0e       	ld.w	lr,r9[0x0]
8001eab0:	91 0e       	st.w	r8[0x0],lr
8001eab2:	72 1e       	ld.w	lr,r9[0x4]
8001eab4:	91 1e       	st.w	r8[0x4],lr
8001eab6:	72 2e       	ld.w	lr,r9[0x8]
8001eab8:	91 2e       	st.w	r8[0x8],lr
8001eaba:	72 39       	ld.w	r9,r9[0xc]
8001eabc:	91 39       	st.w	r8[0xc],r9
8001eabe:	f6 c8 ff f0 	sub	r8,r11,-16
8001eac2:	f4 c9 ff f0 	sub	r9,r10,-16
8001eac6:	72 0e       	ld.w	lr,r9[0x0]
8001eac8:	91 0e       	st.w	r8[0x0],lr
8001eaca:	72 1e       	ld.w	lr,r9[0x4]
8001eacc:	91 1e       	st.w	r8[0x4],lr
8001eace:	72 2e       	ld.w	lr,r9[0x8]
8001ead0:	91 2e       	st.w	r8[0x8],lr
8001ead2:	72 39       	ld.w	r9,r9[0xc]
8001ead4:	91 39       	st.w	r8[0xc],r9
8001ead6:	f6 c8 ff e0 	sub	r8,r11,-32
8001eada:	f4 c9 ff e0 	sub	r9,r10,-32
8001eade:	72 0a       	ld.w	r10,r9[0x0]
8001eae0:	91 0a       	st.w	r8[0x0],r10
8001eae2:	72 1a       	ld.w	r10,r9[0x4]
8001eae4:	91 1a       	st.w	r8[0x4],r10
8001eae6:	72 2a       	ld.w	r10,r9[0x8]
8001eae8:	91 2a       	st.w	r8[0x8],r10
8001eaea:	72 39       	ld.w	r9,r9[0xc]
8001eaec:	91 39       	st.w	r8[0xc],r9
8001eaee:	f0 16 00 7f 	mcall	r6[508]
8001eaf2:	2f 4d       	sub	sp,-48
	
		gps->altitude=gpos.altitude;
8001eaf4:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001eaf8:	ee f8 ff dc 	ld.w	r8,r7[-36]
8001eafc:	91 49       	st.w	r8[0x10],r9
		gps->latitude=gpos.latitude;
8001eafe:	ee e8 ff ec 	ld.d	r8,r7[-20]
8001eb02:	ee fa ff dc 	ld.w	r10,r7[-36]
8001eb06:	f4 e9 00 00 	st.d	r10[0],r8
		gps->longitude=gpos.longitude;
8001eb0a:	ee e8 ff e4 	ld.d	r8,r7[-28]
8001eb0e:	ee fa ff dc 	ld.w	r10,r7[-36]
8001eb12:	f4 e9 00 08 	st.d	r10[8],r8
		gps->timeLastMsg=get_millis();
8001eb16:	f0 16 00 0f 	mcall	r6[60]
8001eb1a:	18 99       	mov	r9,r12
8001eb1c:	ee f8 ff dc 	ld.w	r8,r7[-36]
8001eb20:	f1 49 00 44 	st.w	r8[68],r9
		gps->status=GPS_OK;
8001eb24:	ee f9 ff dc 	ld.w	r9,r7[-36]
8001eb28:	30 28       	mov	r8,2
8001eb2a:	f3 68 00 4c 	st.b	r9[76],r8
	

}
8001eb2e:	2f 7d       	sub	sp,-36
8001eb30:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001eb34:	80 01       	ld.sh	r1,r0[0x0]
8001eb36:	e9 0e eb cd 	ld.sh	lr,r4[-5171]

8001eb38 <crc_accumulate>:
 *
 * @param data new char to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate(uint8_t data, uint16_t *crcAccum)
{
8001eb38:	eb cd 40 80 	pushm	r7,lr
8001eb3c:	1a 97       	mov	r7,sp
8001eb3e:	20 3d       	sub	sp,12
8001eb40:	18 98       	mov	r8,r12
8001eb42:	ef 4b ff f4 	st.w	r7[-12],r11
8001eb46:	ef 68 ff f8 	st.b	r7[-8],r8
        /*Accumulate one byte of data into the CRC*/
        uint8_t tmp;

        tmp = data ^ (uint8_t)(*crcAccum &0xff);
8001eb4a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001eb4e:	90 08       	ld.sh	r8,r8[0x0]
8001eb50:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8001eb54:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8001eb58:	f3 e8 20 08 	eor	r8,r9,r8
8001eb5c:	ef 68 ff ff 	st.b	r7[-1],r8
        tmp ^= (tmp<<4);
8001eb60:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8001eb64:	a5 68       	lsl	r8,0x4
8001eb66:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8001eb6a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8001eb6e:	f3 e8 20 08 	eor	r8,r9,r8
8001eb72:	5c 58       	castu.b	r8
8001eb74:	ef 68 ff ff 	st.b	r7[-1],r8
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
8001eb78:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001eb7c:	90 08       	ld.sh	r8,r8[0x0]
8001eb7e:	5c 78       	castu.h	r8
8001eb80:	a9 88       	lsr	r8,0x8
8001eb82:	5c 88       	casts.h	r8
8001eb84:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
8001eb88:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8001eb8c:	a9 68       	lsl	r8,0x8
8001eb8e:	5c 88       	casts.h	r8
8001eb90:	f3 e8 20 08 	eor	r8,r9,r8
8001eb94:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
8001eb98:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8001eb9c:	a3 78       	lsl	r8,0x3
8001eb9e:	5c 88       	casts.h	r8
8001eba0:	f3 e8 20 08 	eor	r8,r9,r8
8001eba4:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
8001eba8:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8001ebac:	a5 88       	lsr	r8,0x4
8001ebae:	5c 58       	castu.b	r8
8001ebb0:	f3 e8 20 08 	eor	r8,r9,r8
8001ebb4:	5c 88       	casts.h	r8
8001ebb6:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001ebba:	b2 08       	st.h	r9[0x0],r8
}
8001ebbc:	2f dd       	sub	sp,-12
8001ebbe:	e3 cd 80 80 	ldm	sp++,r7,pc

8001ebc2 <crc_init>:
 * @brief Initiliaze the buffer for the X.25 CRC
 *
 * @param crcAccum the 16 bit X.25 CRC
 */
static inline void crc_init(uint16_t* crcAccum)
{
8001ebc2:	eb cd 40 80 	pushm	r7,lr
8001ebc6:	1a 97       	mov	r7,sp
8001ebc8:	20 1d       	sub	sp,4
8001ebca:	ef 4c ff fc 	st.w	r7[-4],r12
        *crcAccum = X25_INIT_CRC;
8001ebce:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001ebd2:	3f f8       	mov	r8,-1
8001ebd4:	b2 08       	st.h	r9[0x0],r8
}
8001ebd6:	2f fd       	sub	sp,-4
8001ebd8:	e3 cd 80 80 	ldm	sp++,r7,pc

8001ebdc <crc_calculate>:
 * @param  pBuffer buffer containing the byte array to hash
 * @param  length  length of the byte array
 * @return the checksum over the buffer bytes
 **/
static inline uint16_t crc_calculate(const uint8_t* pBuffer, uint16_t length)
{
8001ebdc:	eb cd 40 c0 	pushm	r6-r7,lr
8001ebe0:	1a 97       	mov	r7,sp
8001ebe2:	20 3d       	sub	sp,12
8001ebe4:	49 76       	lddpc	r6,8001ec40 <crc_calculate+0x64>
8001ebe6:	1e 26       	rsub	r6,pc
8001ebe8:	ef 4c ff f8 	st.w	r7[-8],r12
8001ebec:	16 98       	mov	r8,r11
8001ebee:	ef 58 ff f4 	st.h	r7[-12],r8
        uint16_t crcTmp;
        crc_init(&crcTmp);
8001ebf2:	ee c8 00 02 	sub	r8,r7,2
8001ebf6:	10 9c       	mov	r12,r8
8001ebf8:	ce 5f       	rcall	8001ebc2 <crc_init>
	while (length--) {
8001ebfa:	c0 e8       	rjmp	8001ec16 <crc_calculate+0x3a>
                crc_accumulate(*pBuffer++, &crcTmp);
8001ebfc:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001ec00:	11 88       	ld.ub	r8,r8[0x0]
8001ec02:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001ec06:	2f f9       	sub	r9,-1
8001ec08:	ef 49 ff f8 	st.w	r7[-8],r9
8001ec0c:	ee c9 00 02 	sub	r9,r7,2
8001ec10:	12 9b       	mov	r11,r9
8001ec12:	10 9c       	mov	r12,r8
8001ec14:	c9 2f       	rcall	8001eb38 <crc_accumulate>
 **/
static inline uint16_t crc_calculate(const uint8_t* pBuffer, uint16_t length)
{
        uint16_t crcTmp;
        crc_init(&crcTmp);
	while (length--) {
8001ec16:	ef 09 ff f4 	ld.sh	r9,r7[-12]
8001ec1a:	30 08       	mov	r8,0
8001ec1c:	f0 09 19 00 	cp.h	r9,r8
8001ec20:	5f 18       	srne	r8
8001ec22:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8001ec26:	ef 08 ff f4 	ld.sh	r8,r7[-12]
8001ec2a:	20 18       	sub	r8,1
8001ec2c:	ef 58 ff f4 	st.h	r7[-12],r8
8001ec30:	58 09       	cp.w	r9,0
8001ec32:	ce 51       	brne	8001ebfc <crc_calculate+0x20>
                crc_accumulate(*pBuffer++, &crcTmp);
        }
        return crcTmp;
8001ec34:	ef 08 ff fe 	ld.sh	r8,r7[-2]
}
8001ec38:	10 9c       	mov	r12,r8
8001ec3a:	2f dd       	sub	sp,-12
8001ec3c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001ec40:	80 01       	ld.sh	r1,r0[0x0]
8001ec42:	ea 6a eb cd 	mov	r10,715725

8001ec44 <crc_accumulate_buffer>:
 *
 * @param data new bytes to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate_buffer(uint16_t *crcAccum, const char *pBuffer, uint8_t length)
{
8001ec44:	eb cd 40 c0 	pushm	r6-r7,lr
8001ec48:	1a 97       	mov	r7,sp
8001ec4a:	20 4d       	sub	sp,16
8001ec4c:	49 66       	lddpc	r6,8001eca4 <crc_accumulate_buffer+0x60>
8001ec4e:	1e 26       	rsub	r6,pc
8001ec50:	ef 4c ff f8 	st.w	r7[-8],r12
8001ec54:	ef 4b ff f4 	st.w	r7[-12],r11
8001ec58:	14 98       	mov	r8,r10
8001ec5a:	ef 68 ff f0 	st.b	r7[-16],r8
	const uint8_t *p = (const uint8_t *)pBuffer;
8001ec5e:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001ec62:	ef 48 ff fc 	st.w	r7[-4],r8
	while (length--) {
8001ec66:	c0 d8       	rjmp	8001ec80 <crc_accumulate_buffer+0x3c>
                crc_accumulate(*p++, crcAccum);
8001ec68:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001ec6c:	11 88       	ld.ub	r8,r8[0x0]
8001ec6e:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001ec72:	2f f9       	sub	r9,-1
8001ec74:	ef 49 ff fc 	st.w	r7[-4],r9
8001ec78:	ee fb ff f8 	ld.w	r11,r7[-8]
8001ec7c:	10 9c       	mov	r12,r8
8001ec7e:	c5 df       	rcall	8001eb38 <crc_accumulate>
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate_buffer(uint16_t *crcAccum, const char *pBuffer, uint8_t length)
{
	const uint8_t *p = (const uint8_t *)pBuffer;
	while (length--) {
8001ec80:	ef 39 ff f0 	ld.ub	r9,r7[-16]
8001ec84:	30 08       	mov	r8,0
8001ec86:	f0 09 18 00 	cp.b	r9,r8
8001ec8a:	5f 18       	srne	r8
8001ec8c:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8001ec90:	ef 38 ff f0 	ld.ub	r8,r7[-16]
8001ec94:	20 18       	sub	r8,1
8001ec96:	ef 68 ff f0 	st.b	r7[-16],r8
8001ec9a:	58 09       	cp.w	r9,0
8001ec9c:	ce 61       	brne	8001ec68 <crc_accumulate_buffer+0x24>
                crc_accumulate(*p++, crcAccum);
        }
}
8001ec9e:	2f cd       	sub	sp,-16
8001eca0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001eca4:	80 01       	ld.sh	r1,r0[0x0]
8001eca6:	ea d2 eb cd 	satsub.w	r2,r5,-5171

8001eca8 <mavlink_get_channel_status>:
/*
 * Internal function to give access to the channel status for each channel
 */
#ifndef MAVLINK_GET_CHANNEL_STATUS
MAVLINK_HELPER mavlink_status_t* mavlink_get_channel_status(uint8_t chan)
{
8001eca8:	eb cd 40 c0 	pushm	r6-r7,lr
8001ecac:	1a 97       	mov	r7,sp
8001ecae:	20 1d       	sub	sp,4
8001ecb0:	48 96       	lddpc	r6,8001ecd4 <mavlink_get_channel_status+0x2c>
8001ecb2:	1e 26       	rsub	r6,pc
8001ecb4:	18 98       	mov	r8,r12
8001ecb6:	ef 68 ff fc 	st.b	r7[-4],r8
	static mavlink_status_t m_mavlink_status[MAVLINK_COMM_NUM_BUFFERS];
	return &m_mavlink_status[chan];
8001ecba:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8001ecbe:	f0 09 15 04 	lsl	r9,r8,0x4
8001ecc2:	ec f8 08 7c 	ld.w	r8,r6[2172]
8001ecc6:	f2 08 00 08 	add	r8,r9,r8
}
8001ecca:	10 9c       	mov	r12,r8
8001eccc:	2f fd       	sub	sp,-4
8001ecce:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001ecd2:	00 00       	add	r0,r0
8001ecd4:	80 01       	ld.sh	r1,r0[0x0]
8001ecd6:	eb 36 eb cd 	ld.ub	r6,r5[-5171]

8001ecd8 <_mav_finalize_message_chan_send>:
MAVLINK_HELPER void _mav_finalize_message_chan_send(mavlink_channel_t chan, uint8_t msgid, const char *packet, 
						    uint8_t length, uint8_t crc_extra)
#else
MAVLINK_HELPER void _mav_finalize_message_chan_send(mavlink_channel_t chan, uint8_t msgid, const char *packet, uint8_t length)
#endif
{
8001ecd8:	eb cd 40 c0 	pushm	r6-r7,lr
8001ecdc:	1a 97       	mov	r7,sp
8001ecde:	20 9d       	sub	sp,36
8001ece0:	4b d6       	lddpc	r6,8001edd4 <_mav_finalize_message_chan_send+0xfc>
8001ece2:	1e 26       	rsub	r6,pc
8001ece4:	ef 4c ff ec 	st.w	r7[-20],r12
8001ece8:	ef 4a ff e4 	st.w	r7[-28],r10
8001ecec:	16 9a       	mov	r10,r11
8001ecee:	ef 6a ff e8 	st.b	r7[-24],r10
8001ecf2:	ef 69 ff e0 	st.b	r7[-32],r9
8001ecf6:	ef 68 ff dc 	st.b	r7[-36],r8
	uint16_t checksum;
	uint8_t buf[MAVLINK_NUM_HEADER_BYTES];
	uint8_t ck[2];
	mavlink_status_t *status = mavlink_get_channel_status(chan);
8001ecfa:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001ecfe:	5c 58       	castu.b	r8
8001ed00:	10 9c       	mov	r12,r8
8001ed02:	cd 3f       	rcall	8001eca8 <mavlink_get_channel_status>
8001ed04:	18 98       	mov	r8,r12
8001ed06:	ef 48 ff fc 	st.w	r7[-4],r8
	buf[0] = MAVLINK_STX;
8001ed0a:	3f e8       	mov	r8,-2
8001ed0c:	ef 68 ff f4 	st.b	r7[-12],r8
	buf[1] = length;
8001ed10:	ef 38 ff e0 	ld.ub	r8,r7[-32]
8001ed14:	ef 68 ff f5 	st.b	r7[-11],r8
	buf[2] = status->current_tx_seq;
8001ed18:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001ed1c:	f1 38 00 0a 	ld.ub	r8,r8[10]
8001ed20:	ef 68 ff f6 	st.b	r7[-10],r8
	buf[3] = mavlink_system.sysid;
8001ed24:	ec f8 00 70 	ld.w	r8,r6[112]
8001ed28:	11 88       	ld.ub	r8,r8[0x0]
8001ed2a:	ef 68 ff f7 	st.b	r7[-9],r8
	buf[4] = mavlink_system.compid;
8001ed2e:	ec f8 00 70 	ld.w	r8,r6[112]
8001ed32:	11 98       	ld.ub	r8,r8[0x1]
8001ed34:	ef 68 ff f8 	st.b	r7[-8],r8
	buf[5] = msgid;
8001ed38:	ef 38 ff e8 	ld.ub	r8,r7[-24]
8001ed3c:	ef 68 ff f9 	st.b	r7[-7],r8
	status->current_tx_seq++;
8001ed40:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001ed44:	f1 38 00 0a 	ld.ub	r8,r8[10]
8001ed48:	2f f8       	sub	r8,-1
8001ed4a:	5c 58       	castu.b	r8
8001ed4c:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001ed50:	f3 68 00 0a 	st.b	r9[10],r8
	checksum = crc_calculate((uint8_t*)&buf[1], MAVLINK_CORE_HEADER_LEN);
8001ed54:	ee c8 00 0c 	sub	r8,r7,12
8001ed58:	2f f8       	sub	r8,-1
8001ed5a:	30 5b       	mov	r11,5
8001ed5c:	10 9c       	mov	r12,r8
8001ed5e:	c3 ff       	rcall	8001ebdc <crc_calculate>
8001ed60:	18 98       	mov	r8,r12
8001ed62:	5c 88       	casts.h	r8
8001ed64:	ef 58 ff fa 	st.h	r7[-6],r8
	crc_accumulate_buffer(&checksum, packet, length);
8001ed68:	ef 39 ff e0 	ld.ub	r9,r7[-32]
8001ed6c:	ee c8 00 06 	sub	r8,r7,6
8001ed70:	12 9a       	mov	r10,r9
8001ed72:	ee fb ff e4 	ld.w	r11,r7[-28]
8001ed76:	10 9c       	mov	r12,r8
8001ed78:	c6 6f       	rcall	8001ec44 <crc_accumulate_buffer>
#if MAVLINK_CRC_EXTRA
	crc_accumulate(crc_extra, &checksum);
8001ed7a:	ef 38 ff dc 	ld.ub	r8,r7[-36]
8001ed7e:	ee c9 00 06 	sub	r9,r7,6
8001ed82:	12 9b       	mov	r11,r9
8001ed84:	10 9c       	mov	r12,r8
8001ed86:	cd 9e       	rcall	8001eb38 <crc_accumulate>
#endif
	ck[0] = (uint8_t)(checksum & 0xFF);
8001ed88:	ef 08 ff fa 	ld.sh	r8,r7[-6]
8001ed8c:	5c 58       	castu.b	r8
8001ed8e:	ef 68 ff f0 	st.b	r7[-16],r8
	ck[1] = (uint8_t)(checksum >> 8);
8001ed92:	ef 08 ff fa 	ld.sh	r8,r7[-6]
8001ed96:	5c 78       	castu.h	r8
8001ed98:	a9 88       	lsr	r8,0x8
8001ed9a:	5c 88       	casts.h	r8
8001ed9c:	5c 58       	castu.b	r8
8001ed9e:	ef 68 ff f1 	st.b	r7[-15],r8

	MAVLINK_START_UART_SEND(chan, MAVLINK_NUM_NON_PAYLOAD_BYTES + (uint16_t)length);
	_mavlink_send_uart(chan, (const char *)buf, MAVLINK_NUM_HEADER_BYTES);
8001eda2:	ee c8 00 0c 	sub	r8,r7,12
8001eda6:	30 6a       	mov	r10,6
8001eda8:	10 9b       	mov	r11,r8
8001edaa:	ee fc ff ec 	ld.w	r12,r7[-20]
8001edae:	c1 5c       	rcall	8001edd8 <_mavlink_send_uart>
	_mavlink_send_uart(chan, packet, length);
8001edb0:	ef 38 ff e0 	ld.ub	r8,r7[-32]
8001edb4:	10 9a       	mov	r10,r8
8001edb6:	ee fb ff e4 	ld.w	r11,r7[-28]
8001edba:	ee fc ff ec 	ld.w	r12,r7[-20]
8001edbe:	c0 dc       	rcall	8001edd8 <_mavlink_send_uart>
	_mavlink_send_uart(chan, (const char *)ck, 2);
8001edc0:	ee c8 00 10 	sub	r8,r7,16
8001edc4:	30 2a       	mov	r10,2
8001edc6:	10 9b       	mov	r11,r8
8001edc8:	ee fc ff ec 	ld.w	r12,r7[-20]
8001edcc:	c0 6c       	rcall	8001edd8 <_mavlink_send_uart>
	MAVLINK_END_UART_SEND(chan, MAVLINK_NUM_NON_PAYLOAD_BYTES + (uint16_t)length);
}
8001edce:	2f 7d       	sub	sp,-36
8001edd0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001edd4:	80 01       	ld.sh	r1,r0[0x0]
8001edd6:	eb 66 eb cd 	st.b	r5[-5171],r6

8001edd8 <_mavlink_send_uart>:
    }
}
 */

MAVLINK_HELPER void _mavlink_send_uart(mavlink_channel_t chan, const char *buf, uint16_t len)
{
8001edd8:	eb cd 40 c0 	pushm	r6-r7,lr
8001eddc:	1a 97       	mov	r7,sp
8001edde:	20 4d       	sub	sp,16
8001ede0:	49 46       	lddpc	r6,8001ee30 <_mavlink_send_uart+0x58>
8001ede2:	1e 26       	rsub	r6,pc
8001ede4:	ef 4c ff f8 	st.w	r7[-8],r12
8001ede8:	ef 4b ff f4 	st.w	r7[-12],r11
8001edec:	14 98       	mov	r8,r10
8001edee:	ef 58 ff f0 	st.h	r7[-16],r8
	   defines it */
	MAVLINK_SEND_UART_BYTES(chan, (const uint8_t *)buf, len);
#else
	/* fallback to one byte at a time */
	uint16_t i;
	for (i = 0; i < len; i++) {
8001edf2:	30 08       	mov	r8,0
8001edf4:	ef 58 ff fe 	st.h	r7[-2],r8
8001edf8:	c1 28       	rjmp	8001ee1c <_mavlink_send_uart+0x44>
		comm_send_ch(chan, (uint8_t)buf[i]);
8001edfa:	ef 18 ff fe 	ld.uh	r8,r7[-2]
8001edfe:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001ee02:	f2 08 00 08 	add	r8,r9,r8
8001ee06:	11 88       	ld.ub	r8,r8[0x0]
8001ee08:	10 9b       	mov	r11,r8
8001ee0a:	ee fc ff f8 	ld.w	r12,r7[-8]
8001ee0e:	f0 16 00 cd 	mcall	r6[820]
	   defines it */
	MAVLINK_SEND_UART_BYTES(chan, (const uint8_t *)buf, len);
#else
	/* fallback to one byte at a time */
	uint16_t i;
	for (i = 0; i < len; i++) {
8001ee12:	ef 08 ff fe 	ld.sh	r8,r7[-2]
8001ee16:	2f f8       	sub	r8,-1
8001ee18:	ef 58 ff fe 	st.h	r7[-2],r8
8001ee1c:	ef 09 ff fe 	ld.sh	r9,r7[-2]
8001ee20:	ef 08 ff f0 	ld.sh	r8,r7[-16]
8001ee24:	f0 09 19 00 	cp.h	r9,r8
8001ee28:	ce 93       	brcs	8001edfa <_mavlink_send_uart+0x22>
		comm_send_ch(chan, (uint8_t)buf[i]);
	}
#endif
}
8001ee2a:	2f cd       	sub	sp,-16
8001ee2c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001ee30:	80 01       	ld.sh	r1,r0[0x0]
8001ee32:	ec 66 eb cd 	mov	r6,846797

8001ee34 <byte_swap_2>:
	return msg->len + MAVLINK_NUM_NON_PAYLOAD_BYTES;
}

#if MAVLINK_NEED_BYTE_SWAP
static inline void byte_swap_2(char *dst, const char *src)
{
8001ee34:	eb cd 40 80 	pushm	r7,lr
8001ee38:	1a 97       	mov	r7,sp
8001ee3a:	20 2d       	sub	sp,8
8001ee3c:	ef 4c ff fc 	st.w	r7[-4],r12
8001ee40:	ef 4b ff f8 	st.w	r7[-8],r11
	dst[0] = src[1];
8001ee44:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001ee48:	2f f8       	sub	r8,-1
8001ee4a:	11 88       	ld.ub	r8,r8[0x0]
8001ee4c:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001ee50:	b2 88       	st.b	r9[0x0],r8
	dst[1] = src[0];
8001ee52:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001ee56:	f0 c9 ff ff 	sub	r9,r8,-1
8001ee5a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001ee5e:	11 88       	ld.ub	r8,r8[0x0]
8001ee60:	b2 88       	st.b	r9[0x0],r8
}
8001ee62:	2f ed       	sub	sp,-8
8001ee64:	e3 cd 80 80 	ldm	sp++,r7,pc

8001ee68 <byte_swap_4>:
static inline void byte_swap_4(char *dst, const char *src)
{
8001ee68:	eb cd 40 80 	pushm	r7,lr
8001ee6c:	1a 97       	mov	r7,sp
8001ee6e:	20 2d       	sub	sp,8
8001ee70:	ef 4c ff fc 	st.w	r7[-4],r12
8001ee74:	ef 4b ff f8 	st.w	r7[-8],r11
	dst[0] = src[3];
8001ee78:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001ee7c:	2f d8       	sub	r8,-3
8001ee7e:	11 88       	ld.ub	r8,r8[0x0]
8001ee80:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001ee84:	b2 88       	st.b	r9[0x0],r8
	dst[1] = src[2];
8001ee86:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001ee8a:	f0 c9 ff ff 	sub	r9,r8,-1
8001ee8e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001ee92:	2f e8       	sub	r8,-2
8001ee94:	11 88       	ld.ub	r8,r8[0x0]
8001ee96:	b2 88       	st.b	r9[0x0],r8
	dst[2] = src[1];
8001ee98:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001ee9c:	f0 c9 ff fe 	sub	r9,r8,-2
8001eea0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001eea4:	2f f8       	sub	r8,-1
8001eea6:	11 88       	ld.ub	r8,r8[0x0]
8001eea8:	b2 88       	st.b	r9[0x0],r8
	dst[3] = src[0];
8001eeaa:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001eeae:	f0 c9 ff fd 	sub	r9,r8,-3
8001eeb2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001eeb6:	11 88       	ld.ub	r8,r8[0x0]
8001eeb8:	b2 88       	st.b	r9[0x0],r8
}
8001eeba:	2f ed       	sub	sp,-8
8001eebc:	e3 cd 80 80 	ldm	sp++,r7,pc

8001eec0 <mav_array_memcpy>:

/*
  like memcpy(), but if src is NULL, do a memset to zero
*/
static void mav_array_memcpy(void *dest, const void *src, size_t n)
{
8001eec0:	eb cd 40 c0 	pushm	r6-r7,lr
8001eec4:	1a 97       	mov	r7,sp
8001eec6:	20 3d       	sub	sp,12
8001eec8:	49 06       	lddpc	r6,8001ef08 <mav_array_memcpy+0x48>
8001eeca:	1e 26       	rsub	r6,pc
8001eecc:	ef 4c ff fc 	st.w	r7[-4],r12
8001eed0:	ef 4b ff f8 	st.w	r7[-8],r11
8001eed4:	ef 4a ff f4 	st.w	r7[-12],r10
	if (src == NULL) {
8001eed8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001eedc:	58 08       	cp.w	r8,0
8001eede:	c0 91       	brne	8001eef0 <mav_array_memcpy+0x30>
		memset(dest, 0, n);
8001eee0:	ee fa ff f4 	ld.w	r10,r7[-12]
8001eee4:	30 0b       	mov	r11,0
8001eee6:	ee fc ff fc 	ld.w	r12,r7[-4]
8001eeea:	f0 16 00 30 	mcall	r6[192]
8001eeee:	c0 98       	rjmp	8001ef00 <mav_array_memcpy+0x40>
	} else {
		memcpy(dest, src, n);
8001eef0:	ee fa ff f4 	ld.w	r10,r7[-12]
8001eef4:	ee fb ff f8 	ld.w	r11,r7[-8]
8001eef8:	ee fc ff fc 	ld.w	r12,r7[-4]
8001eefc:	f0 16 00 20 	mcall	r6[128]
	}
}
8001ef00:	2f dd       	sub	sp,-12
8001ef02:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001ef06:	00 00       	add	r0,r0
8001ef08:	80 01       	ld.sh	r1,r0[0x0]
8001ef0a:	ed 4e eb cd 	st.w	r6[-5171],lr

8001ef0c <_MAV_RETURN_uint16_t>:
#if MAVLINK_NEED_BYTE_SWAP
#define _MAV_MSG_RETURN_TYPE(TYPE, SIZE) \
static inline TYPE _MAV_RETURN_## TYPE(const mavlink_message_t *msg, uint8_t ofs) \
{ TYPE r; byte_swap_## SIZE((char*)&r, &_MAV_PAYLOAD(msg)[ofs]); return r; }

_MAV_MSG_RETURN_TYPE(uint16_t, 2)
8001ef0c:	eb cd 40 c0 	pushm	r6-r7,lr
8001ef10:	1a 97       	mov	r7,sp
8001ef12:	20 3d       	sub	sp,12
8001ef14:	48 d6       	lddpc	r6,8001ef48 <_MAV_RETURN_uint16_t+0x3c>
8001ef16:	1e 26       	rsub	r6,pc
8001ef18:	ef 4c ff f8 	st.w	r7[-8],r12
8001ef1c:	16 98       	mov	r8,r11
8001ef1e:	ef 68 ff f4 	st.b	r7[-12],r8
8001ef22:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001ef26:	2f 88       	sub	r8,-8
8001ef28:	10 99       	mov	r9,r8
8001ef2a:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8001ef2e:	10 09       	add	r9,r8
8001ef30:	ee c8 00 02 	sub	r8,r7,2
8001ef34:	12 9b       	mov	r11,r9
8001ef36:	10 9c       	mov	r12,r8
8001ef38:	c7 ef       	rcall	8001ee34 <byte_swap_2>
8001ef3a:	ef 08 ff fe 	ld.sh	r8,r7[-2]
8001ef3e:	10 9c       	mov	r12,r8
8001ef40:	2f dd       	sub	sp,-12
8001ef42:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001ef46:	00 00       	add	r0,r0
8001ef48:	80 01       	ld.sh	r1,r0[0x0]
8001ef4a:	ed 9a       	*unknown*

8001ef4c <_MAV_RETURN_uint32_t>:
_MAV_MSG_RETURN_TYPE(int16_t,  2)
_MAV_MSG_RETURN_TYPE(uint32_t, 4)
8001ef4c:	eb cd 40 c0 	pushm	r6-r7,lr
8001ef50:	1a 97       	mov	r7,sp
8001ef52:	20 3d       	sub	sp,12
8001ef54:	48 d6       	lddpc	r6,8001ef88 <_MAV_RETURN_uint32_t+0x3c>
8001ef56:	1e 26       	rsub	r6,pc
8001ef58:	ef 4c ff f8 	st.w	r7[-8],r12
8001ef5c:	16 98       	mov	r8,r11
8001ef5e:	ef 68 ff f4 	st.b	r7[-12],r8
8001ef62:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001ef66:	2f 88       	sub	r8,-8
8001ef68:	10 99       	mov	r9,r8
8001ef6a:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8001ef6e:	10 09       	add	r9,r8
8001ef70:	ee c8 00 04 	sub	r8,r7,4
8001ef74:	12 9b       	mov	r11,r9
8001ef76:	10 9c       	mov	r12,r8
8001ef78:	c7 8f       	rcall	8001ee68 <byte_swap_4>
8001ef7a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001ef7e:	10 9c       	mov	r12,r8
8001ef80:	2f dd       	sub	sp,-12
8001ef82:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001ef86:	00 00       	add	r0,r0
8001ef88:	80 01       	ld.sh	r1,r0[0x0]
8001ef8a:	ed da       	*unknown*

8001ef8c <_MAV_RETURN_float>:
_MAV_MSG_RETURN_TYPE(int32_t,  4)
_MAV_MSG_RETURN_TYPE(uint64_t, 8)
_MAV_MSG_RETURN_TYPE(int64_t,  8)
_MAV_MSG_RETURN_TYPE(float,    4)
8001ef8c:	eb cd 40 c0 	pushm	r6-r7,lr
8001ef90:	1a 97       	mov	r7,sp
8001ef92:	20 3d       	sub	sp,12
8001ef94:	48 d6       	lddpc	r6,8001efc8 <_MAV_RETURN_float+0x3c>
8001ef96:	1e 26       	rsub	r6,pc
8001ef98:	ef 4c ff f8 	st.w	r7[-8],r12
8001ef9c:	16 98       	mov	r8,r11
8001ef9e:	ef 68 ff f4 	st.b	r7[-12],r8
8001efa2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001efa6:	2f 88       	sub	r8,-8
8001efa8:	10 99       	mov	r9,r8
8001efaa:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8001efae:	10 09       	add	r9,r8
8001efb0:	ee c8 00 04 	sub	r8,r7,4
8001efb4:	12 9b       	mov	r11,r9
8001efb6:	10 9c       	mov	r12,r8
8001efb8:	c5 8f       	rcall	8001ee68 <byte_swap_4>
8001efba:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001efbe:	10 9c       	mov	r12,r8
8001efc0:	2f dd       	sub	sp,-12
8001efc2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001efc6:	00 00       	add	r0,r0
8001efc8:	80 01       	ld.sh	r1,r0[0x0]
8001efca:	ee 1a eb cd 	eorh	r10,0xebcd

8001efcc <mavlink_msg_set_mode_get_target_system>:
 * @brief Get field target_system from set_mode message
 *
 * @return The system setting the mode
 */
static inline uint8_t mavlink_msg_set_mode_get_target_system(const mavlink_message_t* msg)
{
8001efcc:	eb cd 40 80 	pushm	r7,lr
8001efd0:	1a 97       	mov	r7,sp
8001efd2:	20 1d       	sub	sp,4
8001efd4:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  4);
8001efd8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001efdc:	2f 88       	sub	r8,-8
8001efde:	2f c8       	sub	r8,-4
8001efe0:	11 88       	ld.ub	r8,r8[0x0]
}
8001efe2:	10 9c       	mov	r12,r8
8001efe4:	2f fd       	sub	sp,-4
8001efe6:	e3 cd 80 80 	ldm	sp++,r7,pc

8001efea <mavlink_msg_set_mode_get_base_mode>:
 * @brief Get field base_mode from set_mode message
 *
 * @return The new base mode
 */
static inline uint8_t mavlink_msg_set_mode_get_base_mode(const mavlink_message_t* msg)
{
8001efea:	eb cd 40 80 	pushm	r7,lr
8001efee:	1a 97       	mov	r7,sp
8001eff0:	20 1d       	sub	sp,4
8001eff2:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  5);
8001eff6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001effa:	2f 88       	sub	r8,-8
8001effc:	2f b8       	sub	r8,-5
8001effe:	11 88       	ld.ub	r8,r8[0x0]
}
8001f000:	10 9c       	mov	r12,r8
8001f002:	2f fd       	sub	sp,-4
8001f004:	e3 cd 80 80 	ldm	sp++,r7,pc

8001f008 <mavlink_msg_set_mode_get_custom_mode>:
 * @brief Get field custom_mode from set_mode message
 *
 * @return The new autopilot-specific mode. This field can be ignored by an autopilot.
 */
static inline uint32_t mavlink_msg_set_mode_get_custom_mode(const mavlink_message_t* msg)
{
8001f008:	eb cd 40 c0 	pushm	r6-r7,lr
8001f00c:	1a 97       	mov	r7,sp
8001f00e:	20 1d       	sub	sp,4
8001f010:	48 76       	lddpc	r6,8001f02c <mavlink_msg_set_mode_get_custom_mode+0x24>
8001f012:	1e 26       	rsub	r6,pc
8001f014:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint32_t(msg,  0);
8001f018:	30 0b       	mov	r11,0
8001f01a:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f01e:	c9 7f       	rcall	8001ef4c <_MAV_RETURN_uint32_t>
8001f020:	18 98       	mov	r8,r12
}
8001f022:	10 9c       	mov	r12,r8
8001f024:	2f fd       	sub	sp,-4
8001f026:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f02a:	00 00       	add	r0,r0
8001f02c:	80 01       	ld.sh	r1,r0[0x0]
8001f02e:	ee 96 eb cd 	brmi	8021c7c8 <_data_lma+0x1ea980>

8001f030 <mavlink_msg_set_mode_decode>:
 *
 * @param msg The message to decode
 * @param set_mode C-struct to decode the message contents into
 */
static inline void mavlink_msg_set_mode_decode(const mavlink_message_t* msg, mavlink_set_mode_t* set_mode)
{
8001f030:	eb cd 40 c0 	pushm	r6-r7,lr
8001f034:	1a 97       	mov	r7,sp
8001f036:	20 2d       	sub	sp,8
8001f038:	48 f6       	lddpc	r6,8001f074 <mavlink_msg_set_mode_decode+0x44>
8001f03a:	1e 26       	rsub	r6,pc
8001f03c:	ef 4c ff fc 	st.w	r7[-4],r12
8001f040:	ef 4b ff f8 	st.w	r7[-8],r11
#if MAVLINK_NEED_BYTE_SWAP
	set_mode->custom_mode = mavlink_msg_set_mode_get_custom_mode(msg);
8001f044:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f048:	ce 0f       	rcall	8001f008 <mavlink_msg_set_mode_get_custom_mode>
8001f04a:	18 99       	mov	r9,r12
8001f04c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001f050:	91 09       	st.w	r8[0x0],r9
	set_mode->target_system = mavlink_msg_set_mode_get_target_system(msg);
8001f052:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f056:	cb bf       	rcall	8001efcc <mavlink_msg_set_mode_get_target_system>
8001f058:	18 98       	mov	r8,r12
8001f05a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001f05e:	b2 c8       	st.b	r9[0x4],r8
	set_mode->base_mode = mavlink_msg_set_mode_get_base_mode(msg);
8001f060:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f064:	cc 3f       	rcall	8001efea <mavlink_msg_set_mode_get_base_mode>
8001f066:	18 98       	mov	r8,r12
8001f068:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001f06c:	b2 d8       	st.b	r9[0x5],r8
#else
	memcpy(set_mode, _MAV_PAYLOAD(msg), MAVLINK_MSG_ID_SET_MODE_LEN);
#endif
}
8001f06e:	2f ed       	sub	sp,-8
8001f070:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f074:	80 01       	ld.sh	r1,r0[0x0]
8001f076:	ee be       	*unknown*

8001f078 <mavlink_msg_mission_item_send>:
 * @param z PARAM7 / z position: global: altitude
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_mission_item_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t seq, uint8_t frame, uint16_t command, uint8_t current, uint8_t autocontinue, float param1, float param2, float param3, float param4, float x, float y, float z)
{
8001f078:	eb cd 40 e8 	pushm	r3,r5-r7,lr
8001f07c:	1a 97       	mov	r7,sp
8001f07e:	21 2d       	sub	sp,72
8001f080:	4c 26       	lddpc	r6,8001f188 <mavlink_msg_mission_item_send+0x110>
8001f082:	1e 26       	rsub	r6,pc
8001f084:	ee c5 ff ec 	sub	r5,r7,-20
8001f088:	ef 4c ff d4 	st.w	r7[-44],r12
8001f08c:	16 93       	mov	r3,r11
8001f08e:	14 9e       	mov	lr,r10
8001f090:	12 9c       	mov	r12,r9
8001f092:	10 9b       	mov	r11,r8
8001f094:	6a 0a       	ld.w	r10,r5[0x0]
8001f096:	6a 19       	ld.w	r9,r5[0x4]
8001f098:	6a 28       	ld.w	r8,r5[0x8]
8001f09a:	ef 63 ff d0 	st.b	r7[-48],r3
8001f09e:	ef 6e ff cc 	st.b	r7[-52],lr
8001f0a2:	ef 5c ff c8 	st.h	r7[-56],r12
8001f0a6:	ef 6b ff c4 	st.b	r7[-60],r11
8001f0aa:	ef 5a ff c0 	st.h	r7[-64],r10
8001f0ae:	ef 69 ff bc 	st.b	r7[-68],r9
8001f0b2:	ef 68 ff b8 	st.b	r7[-72],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_MISSION_ITEM_LEN];
	_mav_put_float(buf, 0, param1);
8001f0b6:	ea c9 ff f4 	sub	r9,r5,-12
8001f0ba:	ee c8 00 28 	sub	r8,r7,40
8001f0be:	12 9b       	mov	r11,r9
8001f0c0:	10 9c       	mov	r12,r8
8001f0c2:	cd 3e       	rcall	8001ee68 <byte_swap_4>
	_mav_put_float(buf, 4, param2);
8001f0c4:	ea c9 ff f0 	sub	r9,r5,-16
8001f0c8:	ee c8 00 28 	sub	r8,r7,40
8001f0cc:	2f c8       	sub	r8,-4
8001f0ce:	12 9b       	mov	r11,r9
8001f0d0:	10 9c       	mov	r12,r8
8001f0d2:	cc be       	rcall	8001ee68 <byte_swap_4>
	_mav_put_float(buf, 8, param3);
8001f0d4:	ea c9 ff ec 	sub	r9,r5,-20
8001f0d8:	ee c8 00 28 	sub	r8,r7,40
8001f0dc:	2f 88       	sub	r8,-8
8001f0de:	12 9b       	mov	r11,r9
8001f0e0:	10 9c       	mov	r12,r8
8001f0e2:	cc 3e       	rcall	8001ee68 <byte_swap_4>
	_mav_put_float(buf, 12, param4);
8001f0e4:	ea c9 ff e8 	sub	r9,r5,-24
8001f0e8:	ee c8 00 28 	sub	r8,r7,40
8001f0ec:	2f 48       	sub	r8,-12
8001f0ee:	12 9b       	mov	r11,r9
8001f0f0:	10 9c       	mov	r12,r8
8001f0f2:	cb be       	rcall	8001ee68 <byte_swap_4>
	_mav_put_float(buf, 16, x);
8001f0f4:	ea c9 ff e4 	sub	r9,r5,-28
8001f0f8:	ee c8 00 28 	sub	r8,r7,40
8001f0fc:	2f 08       	sub	r8,-16
8001f0fe:	12 9b       	mov	r11,r9
8001f100:	10 9c       	mov	r12,r8
8001f102:	cb 3e       	rcall	8001ee68 <byte_swap_4>
	_mav_put_float(buf, 20, y);
8001f104:	ea c9 ff e0 	sub	r9,r5,-32
8001f108:	ee c8 00 28 	sub	r8,r7,40
8001f10c:	2e c8       	sub	r8,-20
8001f10e:	12 9b       	mov	r11,r9
8001f110:	10 9c       	mov	r12,r8
8001f112:	ca be       	rcall	8001ee68 <byte_swap_4>
	_mav_put_float(buf, 24, z);
8001f114:	ea c9 ff dc 	sub	r9,r5,-36
8001f118:	ee c8 00 28 	sub	r8,r7,40
8001f11c:	2e 88       	sub	r8,-24
8001f11e:	12 9b       	mov	r11,r9
8001f120:	10 9c       	mov	r12,r8
8001f122:	ca 3e       	rcall	8001ee68 <byte_swap_4>
	_mav_put_uint16_t(buf, 28, seq);
8001f124:	ee c9 00 38 	sub	r9,r7,56
8001f128:	ee c8 00 28 	sub	r8,r7,40
8001f12c:	2e 48       	sub	r8,-28
8001f12e:	12 9b       	mov	r11,r9
8001f130:	10 9c       	mov	r12,r8
8001f132:	c8 1e       	rcall	8001ee34 <byte_swap_2>
	_mav_put_uint16_t(buf, 30, command);
8001f134:	ee c9 00 40 	sub	r9,r7,64
8001f138:	ee c8 00 28 	sub	r8,r7,40
8001f13c:	2e 28       	sub	r8,-30
8001f13e:	12 9b       	mov	r11,r9
8001f140:	10 9c       	mov	r12,r8
8001f142:	c7 9e       	rcall	8001ee34 <byte_swap_2>
	_mav_put_uint8_t(buf, 32, target_system);
8001f144:	ef 38 ff d0 	ld.ub	r8,r7[-48]
8001f148:	ef 68 ff f8 	st.b	r7[-8],r8
	_mav_put_uint8_t(buf, 33, target_component);
8001f14c:	ef 38 ff cc 	ld.ub	r8,r7[-52]
8001f150:	ef 68 ff f9 	st.b	r7[-7],r8
	_mav_put_uint8_t(buf, 34, frame);
8001f154:	ef 38 ff c4 	ld.ub	r8,r7[-60]
8001f158:	ef 68 ff fa 	st.b	r7[-6],r8
	_mav_put_uint8_t(buf, 35, current);
8001f15c:	ef 38 ff bc 	ld.ub	r8,r7[-68]
8001f160:	ef 68 ff fb 	st.b	r7[-5],r8
	_mav_put_uint8_t(buf, 36, autocontinue);
8001f164:	ef 38 ff b8 	ld.ub	r8,r7[-72]
8001f168:	ef 68 ff fc 	st.b	r7[-4],r8

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_ITEM, buf, MAVLINK_MSG_ID_MISSION_ITEM_LEN, MAVLINK_MSG_ID_MISSION_ITEM_CRC);
8001f16c:	ee ca 00 28 	sub	r10,r7,40
8001f170:	e0 68 00 fe 	mov	r8,254
8001f174:	32 59       	mov	r9,37
8001f176:	32 7b       	mov	r11,39
8001f178:	ee fc ff d4 	ld.w	r12,r7[-44]
8001f17c:	fe b0 fd ae 	rcall	8001ecd8 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_ITEM, (const char *)&packet, MAVLINK_MSG_ID_MISSION_ITEM_LEN, MAVLINK_MSG_ID_MISSION_ITEM_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_ITEM, (const char *)&packet, MAVLINK_MSG_ID_MISSION_ITEM_LEN);
#endif
#endif
}
8001f180:	2e ed       	sub	sp,-72
8001f182:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
8001f186:	00 00       	add	r0,r0
8001f188:	80 01       	ld.sh	r1,r0[0x0]
8001f18a:	ef 06 eb cd 	ld.sh	r6,r7[-5171]

8001f18c <mavlink_msg_mission_item_get_target_system>:
 * @brief Get field target_system from mission_item message
 *
 * @return System ID
 */
static inline uint8_t mavlink_msg_mission_item_get_target_system(const mavlink_message_t* msg)
{
8001f18c:	eb cd 40 80 	pushm	r7,lr
8001f190:	1a 97       	mov	r7,sp
8001f192:	20 1d       	sub	sp,4
8001f194:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  32);
8001f198:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001f19c:	2f 88       	sub	r8,-8
8001f19e:	2e 08       	sub	r8,-32
8001f1a0:	11 88       	ld.ub	r8,r8[0x0]
}
8001f1a2:	10 9c       	mov	r12,r8
8001f1a4:	2f fd       	sub	sp,-4
8001f1a6:	e3 cd 80 80 	ldm	sp++,r7,pc

8001f1aa <mavlink_msg_mission_item_get_target_component>:
 * @brief Get field target_component from mission_item message
 *
 * @return Component ID
 */
static inline uint8_t mavlink_msg_mission_item_get_target_component(const mavlink_message_t* msg)
{
8001f1aa:	eb cd 40 80 	pushm	r7,lr
8001f1ae:	1a 97       	mov	r7,sp
8001f1b0:	20 1d       	sub	sp,4
8001f1b2:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  33);
8001f1b6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001f1ba:	2f 88       	sub	r8,-8
8001f1bc:	2d f8       	sub	r8,-33
8001f1be:	11 88       	ld.ub	r8,r8[0x0]
}
8001f1c0:	10 9c       	mov	r12,r8
8001f1c2:	2f fd       	sub	sp,-4
8001f1c4:	e3 cd 80 80 	ldm	sp++,r7,pc

8001f1c8 <mavlink_msg_mission_item_get_seq>:
 * @brief Get field seq from mission_item message
 *
 * @return Sequence
 */
static inline uint16_t mavlink_msg_mission_item_get_seq(const mavlink_message_t* msg)
{
8001f1c8:	eb cd 40 c0 	pushm	r6-r7,lr
8001f1cc:	1a 97       	mov	r7,sp
8001f1ce:	20 1d       	sub	sp,4
8001f1d0:	48 86       	lddpc	r6,8001f1f0 <mavlink_msg_mission_item_get_seq+0x28>
8001f1d2:	1e 26       	rsub	r6,pc
8001f1d4:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint16_t(msg,  28);
8001f1d8:	31 cb       	mov	r11,28
8001f1da:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f1de:	c9 7e       	rcall	8001ef0c <_MAV_RETURN_uint16_t>
8001f1e0:	18 98       	mov	r8,r12
8001f1e2:	5c 88       	casts.h	r8
8001f1e4:	5c 88       	casts.h	r8
}
8001f1e6:	10 9c       	mov	r12,r8
8001f1e8:	2f fd       	sub	sp,-4
8001f1ea:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f1ee:	00 00       	add	r0,r0
8001f1f0:	80 01       	ld.sh	r1,r0[0x0]
8001f1f2:	f0 56 eb cd 	cp.w	r6,-922675

8001f1f4 <mavlink_msg_mission_item_get_frame>:
 * @brief Get field frame from mission_item message
 *
 * @return The coordinate system of the MISSION. see MAV_FRAME in mavlink_types.h
 */
static inline uint8_t mavlink_msg_mission_item_get_frame(const mavlink_message_t* msg)
{
8001f1f4:	eb cd 40 80 	pushm	r7,lr
8001f1f8:	1a 97       	mov	r7,sp
8001f1fa:	20 1d       	sub	sp,4
8001f1fc:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  34);
8001f200:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001f204:	2f 88       	sub	r8,-8
8001f206:	2d e8       	sub	r8,-34
8001f208:	11 88       	ld.ub	r8,r8[0x0]
}
8001f20a:	10 9c       	mov	r12,r8
8001f20c:	2f fd       	sub	sp,-4
8001f20e:	e3 cd 80 80 	ldm	sp++,r7,pc

8001f212 <mavlink_msg_mission_item_get_command>:
 * @brief Get field command from mission_item message
 *
 * @return The scheduled action for the MISSION. see MAV_CMD in common.xml MAVLink specs
 */
static inline uint16_t mavlink_msg_mission_item_get_command(const mavlink_message_t* msg)
{
8001f212:	eb cd 40 c0 	pushm	r6-r7,lr
8001f216:	1a 97       	mov	r7,sp
8001f218:	20 1d       	sub	sp,4
8001f21a:	48 86       	lddpc	r6,8001f238 <mavlink_msg_mission_item_get_command+0x26>
8001f21c:	1e 26       	rsub	r6,pc
8001f21e:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint16_t(msg,  30);
8001f222:	31 eb       	mov	r11,30
8001f224:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f228:	c7 2e       	rcall	8001ef0c <_MAV_RETURN_uint16_t>
8001f22a:	18 98       	mov	r8,r12
8001f22c:	5c 88       	casts.h	r8
8001f22e:	5c 88       	casts.h	r8
}
8001f230:	10 9c       	mov	r12,r8
8001f232:	2f fd       	sub	sp,-4
8001f234:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f238:	80 01       	ld.sh	r1,r0[0x0]
8001f23a:	f0 a0 eb cd 	rcall	7fe3c9d4 <_estack+0x7fe2c9d4>

8001f23c <mavlink_msg_mission_item_get_current>:
 * @brief Get field current from mission_item message
 *
 * @return false:0, true:1
 */
static inline uint8_t mavlink_msg_mission_item_get_current(const mavlink_message_t* msg)
{
8001f23c:	eb cd 40 80 	pushm	r7,lr
8001f240:	1a 97       	mov	r7,sp
8001f242:	20 1d       	sub	sp,4
8001f244:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  35);
8001f248:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001f24c:	2f 88       	sub	r8,-8
8001f24e:	2d d8       	sub	r8,-35
8001f250:	11 88       	ld.ub	r8,r8[0x0]
}
8001f252:	10 9c       	mov	r12,r8
8001f254:	2f fd       	sub	sp,-4
8001f256:	e3 cd 80 80 	ldm	sp++,r7,pc

8001f25a <mavlink_msg_mission_item_get_autocontinue>:
 * @brief Get field autocontinue from mission_item message
 *
 * @return autocontinue to next wp
 */
static inline uint8_t mavlink_msg_mission_item_get_autocontinue(const mavlink_message_t* msg)
{
8001f25a:	eb cd 40 80 	pushm	r7,lr
8001f25e:	1a 97       	mov	r7,sp
8001f260:	20 1d       	sub	sp,4
8001f262:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  36);
8001f266:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001f26a:	2f 88       	sub	r8,-8
8001f26c:	2d c8       	sub	r8,-36
8001f26e:	11 88       	ld.ub	r8,r8[0x0]
}
8001f270:	10 9c       	mov	r12,r8
8001f272:	2f fd       	sub	sp,-4
8001f274:	e3 cd 80 80 	ldm	sp++,r7,pc

8001f278 <mavlink_msg_mission_item_get_param1>:
 * @brief Get field param1 from mission_item message
 *
 * @return PARAM1 / For NAV command MISSIONs: Radius in which the MISSION is accepted as reached, in meters
 */
static inline float mavlink_msg_mission_item_get_param1(const mavlink_message_t* msg)
{
8001f278:	eb cd 40 c0 	pushm	r6-r7,lr
8001f27c:	1a 97       	mov	r7,sp
8001f27e:	20 1d       	sub	sp,4
8001f280:	48 76       	lddpc	r6,8001f29c <mavlink_msg_mission_item_get_param1+0x24>
8001f282:	1e 26       	rsub	r6,pc
8001f284:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_float(msg,  0);
8001f288:	30 0b       	mov	r11,0
8001f28a:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f28e:	c7 fe       	rcall	8001ef8c <_MAV_RETURN_float>
8001f290:	18 98       	mov	r8,r12
}
8001f292:	10 9c       	mov	r12,r8
8001f294:	2f fd       	sub	sp,-4
8001f296:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f29a:	00 00       	add	r0,r0
8001f29c:	80 01       	ld.sh	r1,r0[0x0]
8001f29e:	f1 06 eb cd 	ld.sh	r6,r8[-5171]

8001f2a0 <mavlink_msg_mission_item_get_param2>:
 * @brief Get field param2 from mission_item message
 *
 * @return PARAM2 / For NAV command MISSIONs: Time that the MAV should stay inside the PARAM1 radius before advancing, in milliseconds
 */
static inline float mavlink_msg_mission_item_get_param2(const mavlink_message_t* msg)
{
8001f2a0:	eb cd 40 c0 	pushm	r6-r7,lr
8001f2a4:	1a 97       	mov	r7,sp
8001f2a6:	20 1d       	sub	sp,4
8001f2a8:	48 76       	lddpc	r6,8001f2c4 <mavlink_msg_mission_item_get_param2+0x24>
8001f2aa:	1e 26       	rsub	r6,pc
8001f2ac:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_float(msg,  4);
8001f2b0:	30 4b       	mov	r11,4
8001f2b2:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f2b6:	c6 be       	rcall	8001ef8c <_MAV_RETURN_float>
8001f2b8:	18 98       	mov	r8,r12
}
8001f2ba:	10 9c       	mov	r12,r8
8001f2bc:	2f fd       	sub	sp,-4
8001f2be:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f2c2:	00 00       	add	r0,r0
8001f2c4:	80 01       	ld.sh	r1,r0[0x0]
8001f2c6:	f1 2e eb cd 	ld.sb	lr,r8[-5171]

8001f2c8 <mavlink_msg_mission_item_get_param3>:
 * @brief Get field param3 from mission_item message
 *
 * @return PARAM3 / For LOITER command MISSIONs: Orbit to circle around the MISSION, in meters. If positive the orbit direction should be clockwise, if negative the orbit direction should be counter-clockwise.
 */
static inline float mavlink_msg_mission_item_get_param3(const mavlink_message_t* msg)
{
8001f2c8:	eb cd 40 c0 	pushm	r6-r7,lr
8001f2cc:	1a 97       	mov	r7,sp
8001f2ce:	20 1d       	sub	sp,4
8001f2d0:	48 76       	lddpc	r6,8001f2ec <mavlink_msg_mission_item_get_param3+0x24>
8001f2d2:	1e 26       	rsub	r6,pc
8001f2d4:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_float(msg,  8);
8001f2d8:	30 8b       	mov	r11,8
8001f2da:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f2de:	c5 7e       	rcall	8001ef8c <_MAV_RETURN_float>
8001f2e0:	18 98       	mov	r8,r12
}
8001f2e2:	10 9c       	mov	r12,r8
8001f2e4:	2f fd       	sub	sp,-4
8001f2e6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f2ea:	00 00       	add	r0,r0
8001f2ec:	80 01       	ld.sh	r1,r0[0x0]
8001f2ee:	f1 56 eb cd 	st.h	r8[-5171],r6

8001f2f0 <mavlink_msg_mission_item_get_param4>:
 * @brief Get field param4 from mission_item message
 *
 * @return PARAM4 / For NAV and LOITER command MISSIONs: Yaw orientation in degrees, [0..360] 0 = NORTH
 */
static inline float mavlink_msg_mission_item_get_param4(const mavlink_message_t* msg)
{
8001f2f0:	eb cd 40 c0 	pushm	r6-r7,lr
8001f2f4:	1a 97       	mov	r7,sp
8001f2f6:	20 1d       	sub	sp,4
8001f2f8:	48 76       	lddpc	r6,8001f314 <mavlink_msg_mission_item_get_param4+0x24>
8001f2fa:	1e 26       	rsub	r6,pc
8001f2fc:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_float(msg,  12);
8001f300:	30 cb       	mov	r11,12
8001f302:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f306:	c4 3e       	rcall	8001ef8c <_MAV_RETURN_float>
8001f308:	18 98       	mov	r8,r12
}
8001f30a:	10 9c       	mov	r12,r8
8001f30c:	2f fd       	sub	sp,-4
8001f30e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f312:	00 00       	add	r0,r0
8001f314:	80 01       	ld.sh	r1,r0[0x0]
8001f316:	f1 7e eb cd 	stcond	r8[-5171],lr

8001f318 <mavlink_msg_mission_item_get_x>:
 * @brief Get field x from mission_item message
 *
 * @return PARAM5 / local: x position, global: latitude
 */
static inline float mavlink_msg_mission_item_get_x(const mavlink_message_t* msg)
{
8001f318:	eb cd 40 c0 	pushm	r6-r7,lr
8001f31c:	1a 97       	mov	r7,sp
8001f31e:	20 1d       	sub	sp,4
8001f320:	48 76       	lddpc	r6,8001f33c <mavlink_msg_mission_item_get_x+0x24>
8001f322:	1e 26       	rsub	r6,pc
8001f324:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_float(msg,  16);
8001f328:	31 0b       	mov	r11,16
8001f32a:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f32e:	c2 fe       	rcall	8001ef8c <_MAV_RETURN_float>
8001f330:	18 98       	mov	r8,r12
}
8001f332:	10 9c       	mov	r12,r8
8001f334:	2f fd       	sub	sp,-4
8001f336:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f33a:	00 00       	add	r0,r0
8001f33c:	80 01       	ld.sh	r1,r0[0x0]
8001f33e:	f1 a6 eb cd 	ldc0.w	cr11,r6[0x3b34]

8001f340 <mavlink_msg_mission_item_get_y>:
 * @brief Get field y from mission_item message
 *
 * @return PARAM6 / y position: global: longitude
 */
static inline float mavlink_msg_mission_item_get_y(const mavlink_message_t* msg)
{
8001f340:	eb cd 40 c0 	pushm	r6-r7,lr
8001f344:	1a 97       	mov	r7,sp
8001f346:	20 1d       	sub	sp,4
8001f348:	48 76       	lddpc	r6,8001f364 <mavlink_msg_mission_item_get_y+0x24>
8001f34a:	1e 26       	rsub	r6,pc
8001f34c:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_float(msg,  20);
8001f350:	31 4b       	mov	r11,20
8001f352:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f356:	c1 be       	rcall	8001ef8c <_MAV_RETURN_float>
8001f358:	18 98       	mov	r8,r12
}
8001f35a:	10 9c       	mov	r12,r8
8001f35c:	2f fd       	sub	sp,-4
8001f35e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f362:	00 00       	add	r0,r0
8001f364:	80 01       	ld.sh	r1,r0[0x0]
8001f366:	f1 ce       	*unknown*

8001f368 <mavlink_msg_mission_item_get_z>:
 * @brief Get field z from mission_item message
 *
 * @return PARAM7 / z position: global: altitude
 */
static inline float mavlink_msg_mission_item_get_z(const mavlink_message_t* msg)
{
8001f368:	eb cd 40 c0 	pushm	r6-r7,lr
8001f36c:	1a 97       	mov	r7,sp
8001f36e:	20 1d       	sub	sp,4
8001f370:	48 76       	lddpc	r6,8001f38c <mavlink_msg_mission_item_get_z+0x24>
8001f372:	1e 26       	rsub	r6,pc
8001f374:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_float(msg,  24);
8001f378:	31 8b       	mov	r11,24
8001f37a:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f37e:	c0 7e       	rcall	8001ef8c <_MAV_RETURN_float>
8001f380:	18 98       	mov	r8,r12
}
8001f382:	10 9c       	mov	r12,r8
8001f384:	2f fd       	sub	sp,-4
8001f386:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f38a:	00 00       	add	r0,r0
8001f38c:	80 01       	ld.sh	r1,r0[0x0]
8001f38e:	f1 f6 eb cd 	st.wqs	r8[0x734],r6

8001f390 <mavlink_msg_mission_item_decode>:
 *
 * @param msg The message to decode
 * @param mission_item C-struct to decode the message contents into
 */
static inline void mavlink_msg_mission_item_decode(const mavlink_message_t* msg, mavlink_mission_item_t* mission_item)
{
8001f390:	eb cd 40 c0 	pushm	r6-r7,lr
8001f394:	1a 97       	mov	r7,sp
8001f396:	20 2d       	sub	sp,8
8001f398:	4b a6       	lddpc	r6,8001f480 <mavlink_msg_mission_item_decode+0xf0>
8001f39a:	1e 26       	rsub	r6,pc
8001f39c:	ef 4c ff fc 	st.w	r7[-4],r12
8001f3a0:	ef 4b ff f8 	st.w	r7[-8],r11
#if MAVLINK_NEED_BYTE_SWAP
	mission_item->param1 = mavlink_msg_mission_item_get_param1(msg);
8001f3a4:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f3a8:	c6 8f       	rcall	8001f278 <mavlink_msg_mission_item_get_param1>
8001f3aa:	18 99       	mov	r9,r12
8001f3ac:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001f3b0:	91 09       	st.w	r8[0x0],r9
	mission_item->param2 = mavlink_msg_mission_item_get_param2(msg);
8001f3b2:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f3b6:	c7 5f       	rcall	8001f2a0 <mavlink_msg_mission_item_get_param2>
8001f3b8:	18 99       	mov	r9,r12
8001f3ba:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001f3be:	91 19       	st.w	r8[0x4],r9
	mission_item->param3 = mavlink_msg_mission_item_get_param3(msg);
8001f3c0:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f3c4:	c8 2f       	rcall	8001f2c8 <mavlink_msg_mission_item_get_param3>
8001f3c6:	18 99       	mov	r9,r12
8001f3c8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001f3cc:	91 29       	st.w	r8[0x8],r9
	mission_item->param4 = mavlink_msg_mission_item_get_param4(msg);
8001f3ce:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f3d2:	c8 ff       	rcall	8001f2f0 <mavlink_msg_mission_item_get_param4>
8001f3d4:	18 99       	mov	r9,r12
8001f3d6:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001f3da:	91 39       	st.w	r8[0xc],r9
	mission_item->x = mavlink_msg_mission_item_get_x(msg);
8001f3dc:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f3e0:	c9 cf       	rcall	8001f318 <mavlink_msg_mission_item_get_x>
8001f3e2:	18 99       	mov	r9,r12
8001f3e4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001f3e8:	91 49       	st.w	r8[0x10],r9
	mission_item->y = mavlink_msg_mission_item_get_y(msg);
8001f3ea:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f3ee:	ca 9f       	rcall	8001f340 <mavlink_msg_mission_item_get_y>
8001f3f0:	18 99       	mov	r9,r12
8001f3f2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001f3f6:	91 59       	st.w	r8[0x14],r9
	mission_item->z = mavlink_msg_mission_item_get_z(msg);
8001f3f8:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f3fc:	cb 6f       	rcall	8001f368 <mavlink_msg_mission_item_get_z>
8001f3fe:	18 99       	mov	r9,r12
8001f400:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001f404:	91 69       	st.w	r8[0x18],r9
	mission_item->seq = mavlink_msg_mission_item_get_seq(msg);
8001f406:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f40a:	cd fe       	rcall	8001f1c8 <mavlink_msg_mission_item_get_seq>
8001f40c:	18 98       	mov	r8,r12
8001f40e:	5c 88       	casts.h	r8
8001f410:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001f414:	f3 58 00 1c 	st.h	r9[28],r8
	mission_item->command = mavlink_msg_mission_item_get_command(msg);
8001f418:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f41c:	cf be       	rcall	8001f212 <mavlink_msg_mission_item_get_command>
8001f41e:	18 98       	mov	r8,r12
8001f420:	5c 88       	casts.h	r8
8001f422:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001f426:	f3 58 00 1e 	st.h	r9[30],r8
	mission_item->target_system = mavlink_msg_mission_item_get_target_system(msg);
8001f42a:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f42e:	ca fe       	rcall	8001f18c <mavlink_msg_mission_item_get_target_system>
8001f430:	18 98       	mov	r8,r12
8001f432:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001f436:	f3 68 00 20 	st.b	r9[32],r8
	mission_item->target_component = mavlink_msg_mission_item_get_target_component(msg);
8001f43a:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f43e:	cb 6e       	rcall	8001f1aa <mavlink_msg_mission_item_get_target_component>
8001f440:	18 98       	mov	r8,r12
8001f442:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001f446:	f3 68 00 21 	st.b	r9[33],r8
	mission_item->frame = mavlink_msg_mission_item_get_frame(msg);
8001f44a:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f44e:	cd 3e       	rcall	8001f1f4 <mavlink_msg_mission_item_get_frame>
8001f450:	18 98       	mov	r8,r12
8001f452:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001f456:	f3 68 00 22 	st.b	r9[34],r8
	mission_item->current = mavlink_msg_mission_item_get_current(msg);
8001f45a:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f45e:	ce fe       	rcall	8001f23c <mavlink_msg_mission_item_get_current>
8001f460:	18 98       	mov	r8,r12
8001f462:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001f466:	f3 68 00 23 	st.b	r9[35],r8
	mission_item->autocontinue = mavlink_msg_mission_item_get_autocontinue(msg);
8001f46a:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f46e:	cf 6e       	rcall	8001f25a <mavlink_msg_mission_item_get_autocontinue>
8001f470:	18 98       	mov	r8,r12
8001f472:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001f476:	f3 68 00 24 	st.b	r9[36],r8
#else
	memcpy(mission_item, _MAV_PAYLOAD(msg), MAVLINK_MSG_ID_MISSION_ITEM_LEN);
#endif
}
8001f47a:	2f ed       	sub	sp,-8
8001f47c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f480:	80 01       	ld.sh	r1,r0[0x0]
8001f482:	f2 1e eb cd 	pref	lr[-5171]

8001f484 <mavlink_msg_mission_request_send>:
 * @param seq Sequence
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_mission_request_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t seq)
{
8001f484:	eb cd 40 c0 	pushm	r6-r7,lr
8001f488:	1a 97       	mov	r7,sp
8001f48a:	20 5d       	sub	sp,20
8001f48c:	49 56       	lddpc	r6,8001f4e0 <mavlink_msg_mission_request_send+0x5c>
8001f48e:	1e 26       	rsub	r6,pc
8001f490:	ef 4c ff f8 	st.w	r7[-8],r12
8001f494:	12 98       	mov	r8,r9
8001f496:	16 99       	mov	r9,r11
8001f498:	ef 69 ff f4 	st.b	r7[-12],r9
8001f49c:	14 99       	mov	r9,r10
8001f49e:	ef 69 ff f0 	st.b	r7[-16],r9
8001f4a2:	ef 58 ff ec 	st.h	r7[-20],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_MISSION_REQUEST_LEN];
	_mav_put_uint16_t(buf, 0, seq);
8001f4a6:	ee c9 00 14 	sub	r9,r7,20
8001f4aa:	ee c8 00 04 	sub	r8,r7,4
8001f4ae:	12 9b       	mov	r11,r9
8001f4b0:	10 9c       	mov	r12,r8
8001f4b2:	fe b0 fc c1 	rcall	8001ee34 <byte_swap_2>
	_mav_put_uint8_t(buf, 2, target_system);
8001f4b6:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8001f4ba:	ef 68 ff fe 	st.b	r7[-2],r8
	_mav_put_uint8_t(buf, 3, target_component);
8001f4be:	ef 38 ff f0 	ld.ub	r8,r7[-16]
8001f4c2:	ef 68 ff ff 	st.b	r7[-1],r8

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_REQUEST, buf, MAVLINK_MSG_ID_MISSION_REQUEST_LEN, MAVLINK_MSG_ID_MISSION_REQUEST_CRC);
8001f4c6:	ee ca 00 04 	sub	r10,r7,4
8001f4ca:	e0 68 00 e6 	mov	r8,230
8001f4ce:	30 49       	mov	r9,4
8001f4d0:	32 8b       	mov	r11,40
8001f4d2:	ee fc ff f8 	ld.w	r12,r7[-8]
8001f4d6:	fe b0 fc 01 	rcall	8001ecd8 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_REQUEST, (const char *)&packet, MAVLINK_MSG_ID_MISSION_REQUEST_LEN, MAVLINK_MSG_ID_MISSION_REQUEST_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_REQUEST, (const char *)&packet, MAVLINK_MSG_ID_MISSION_REQUEST_LEN);
#endif
#endif
}
8001f4da:	2f bd       	sub	sp,-20
8001f4dc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f4e0:	80 01       	ld.sh	r1,r0[0x0]
8001f4e2:	f3 12 eb cd 	ld.uh	r2,r9[-5171]

8001f4e4 <mavlink_msg_mission_request_get_target_system>:
 * @brief Get field target_system from mission_request message
 *
 * @return System ID
 */
static inline uint8_t mavlink_msg_mission_request_get_target_system(const mavlink_message_t* msg)
{
8001f4e4:	eb cd 40 80 	pushm	r7,lr
8001f4e8:	1a 97       	mov	r7,sp
8001f4ea:	20 1d       	sub	sp,4
8001f4ec:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  2);
8001f4f0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001f4f4:	2f 88       	sub	r8,-8
8001f4f6:	2f e8       	sub	r8,-2
8001f4f8:	11 88       	ld.ub	r8,r8[0x0]
}
8001f4fa:	10 9c       	mov	r12,r8
8001f4fc:	2f fd       	sub	sp,-4
8001f4fe:	e3 cd 80 80 	ldm	sp++,r7,pc

8001f502 <mavlink_msg_mission_request_get_target_component>:
 * @brief Get field target_component from mission_request message
 *
 * @return Component ID
 */
static inline uint8_t mavlink_msg_mission_request_get_target_component(const mavlink_message_t* msg)
{
8001f502:	eb cd 40 80 	pushm	r7,lr
8001f506:	1a 97       	mov	r7,sp
8001f508:	20 1d       	sub	sp,4
8001f50a:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  3);
8001f50e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001f512:	2f 88       	sub	r8,-8
8001f514:	2f d8       	sub	r8,-3
8001f516:	11 88       	ld.ub	r8,r8[0x0]
}
8001f518:	10 9c       	mov	r12,r8
8001f51a:	2f fd       	sub	sp,-4
8001f51c:	e3 cd 80 80 	ldm	sp++,r7,pc

8001f520 <mavlink_msg_mission_request_get_seq>:
 * @brief Get field seq from mission_request message
 *
 * @return Sequence
 */
static inline uint16_t mavlink_msg_mission_request_get_seq(const mavlink_message_t* msg)
{
8001f520:	eb cd 40 c0 	pushm	r6-r7,lr
8001f524:	1a 97       	mov	r7,sp
8001f526:	20 1d       	sub	sp,4
8001f528:	48 86       	lddpc	r6,8001f548 <mavlink_msg_mission_request_get_seq+0x28>
8001f52a:	1e 26       	rsub	r6,pc
8001f52c:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint16_t(msg,  0);
8001f530:	30 0b       	mov	r11,0
8001f532:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f536:	fe b0 fc eb 	rcall	8001ef0c <_MAV_RETURN_uint16_t>
8001f53a:	18 98       	mov	r8,r12
8001f53c:	5c 88       	casts.h	r8
8001f53e:	5c 88       	casts.h	r8
}
8001f540:	10 9c       	mov	r12,r8
8001f542:	2f fd       	sub	sp,-4
8001f544:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f548:	80 01       	ld.sh	r1,r0[0x0]
8001f54a:	f3 ae       	*unknown*

8001f54c <mavlink_msg_mission_request_decode>:
 *
 * @param msg The message to decode
 * @param mission_request C-struct to decode the message contents into
 */
static inline void mavlink_msg_mission_request_decode(const mavlink_message_t* msg, mavlink_mission_request_t* mission_request)
{
8001f54c:	eb cd 40 c0 	pushm	r6-r7,lr
8001f550:	1a 97       	mov	r7,sp
8001f552:	20 2d       	sub	sp,8
8001f554:	49 06       	lddpc	r6,8001f594 <mavlink_msg_mission_request_decode+0x48>
8001f556:	1e 26       	rsub	r6,pc
8001f558:	ef 4c ff fc 	st.w	r7[-4],r12
8001f55c:	ef 4b ff f8 	st.w	r7[-8],r11
#if MAVLINK_NEED_BYTE_SWAP
	mission_request->seq = mavlink_msg_mission_request_get_seq(msg);
8001f560:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f564:	cd ef       	rcall	8001f520 <mavlink_msg_mission_request_get_seq>
8001f566:	18 98       	mov	r8,r12
8001f568:	5c 88       	casts.h	r8
8001f56a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001f56e:	b2 08       	st.h	r9[0x0],r8
	mission_request->target_system = mavlink_msg_mission_request_get_target_system(msg);
8001f570:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f574:	cb 8f       	rcall	8001f4e4 <mavlink_msg_mission_request_get_target_system>
8001f576:	18 98       	mov	r8,r12
8001f578:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001f57c:	b2 a8       	st.b	r9[0x2],r8
	mission_request->target_component = mavlink_msg_mission_request_get_target_component(msg);
8001f57e:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f582:	cc 0f       	rcall	8001f502 <mavlink_msg_mission_request_get_target_component>
8001f584:	18 98       	mov	r8,r12
8001f586:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001f58a:	b2 b8       	st.b	r9[0x3],r8
#else
	memcpy(mission_request, _MAV_PAYLOAD(msg), MAVLINK_MSG_ID_MISSION_REQUEST_LEN);
#endif
}
8001f58c:	2f ed       	sub	sp,-8
8001f58e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f592:	00 00       	add	r0,r0
8001f594:	80 01       	ld.sh	r1,r0[0x0]
8001f596:	f3 da       	*unknown*

8001f598 <mavlink_msg_mission_set_current_get_target_system>:
 * @brief Get field target_system from mission_set_current message
 *
 * @return System ID
 */
static inline uint8_t mavlink_msg_mission_set_current_get_target_system(const mavlink_message_t* msg)
{
8001f598:	eb cd 40 80 	pushm	r7,lr
8001f59c:	1a 97       	mov	r7,sp
8001f59e:	20 1d       	sub	sp,4
8001f5a0:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  2);
8001f5a4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001f5a8:	2f 88       	sub	r8,-8
8001f5aa:	2f e8       	sub	r8,-2
8001f5ac:	11 88       	ld.ub	r8,r8[0x0]
}
8001f5ae:	10 9c       	mov	r12,r8
8001f5b0:	2f fd       	sub	sp,-4
8001f5b2:	e3 cd 80 80 	ldm	sp++,r7,pc

8001f5b6 <mavlink_msg_mission_set_current_get_target_component>:
 * @brief Get field target_component from mission_set_current message
 *
 * @return Component ID
 */
static inline uint8_t mavlink_msg_mission_set_current_get_target_component(const mavlink_message_t* msg)
{
8001f5b6:	eb cd 40 80 	pushm	r7,lr
8001f5ba:	1a 97       	mov	r7,sp
8001f5bc:	20 1d       	sub	sp,4
8001f5be:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  3);
8001f5c2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001f5c6:	2f 88       	sub	r8,-8
8001f5c8:	2f d8       	sub	r8,-3
8001f5ca:	11 88       	ld.ub	r8,r8[0x0]
}
8001f5cc:	10 9c       	mov	r12,r8
8001f5ce:	2f fd       	sub	sp,-4
8001f5d0:	e3 cd 80 80 	ldm	sp++,r7,pc

8001f5d4 <mavlink_msg_mission_set_current_get_seq>:
 * @brief Get field seq from mission_set_current message
 *
 * @return Sequence
 */
static inline uint16_t mavlink_msg_mission_set_current_get_seq(const mavlink_message_t* msg)
{
8001f5d4:	eb cd 40 c0 	pushm	r6-r7,lr
8001f5d8:	1a 97       	mov	r7,sp
8001f5da:	20 1d       	sub	sp,4
8001f5dc:	48 86       	lddpc	r6,8001f5fc <mavlink_msg_mission_set_current_get_seq+0x28>
8001f5de:	1e 26       	rsub	r6,pc
8001f5e0:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint16_t(msg,  0);
8001f5e4:	30 0b       	mov	r11,0
8001f5e6:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f5ea:	fe b0 fc 91 	rcall	8001ef0c <_MAV_RETURN_uint16_t>
8001f5ee:	18 98       	mov	r8,r12
8001f5f0:	5c 88       	casts.h	r8
8001f5f2:	5c 88       	casts.h	r8
}
8001f5f4:	10 9c       	mov	r12,r8
8001f5f6:	2f fd       	sub	sp,-4
8001f5f8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f5fc:	80 01       	ld.sh	r1,r0[0x0]
8001f5fe:	f4 62 eb cd 	mov	r2,-726067

8001f600 <mavlink_msg_mission_set_current_decode>:
 *
 * @param msg The message to decode
 * @param mission_set_current C-struct to decode the message contents into
 */
static inline void mavlink_msg_mission_set_current_decode(const mavlink_message_t* msg, mavlink_mission_set_current_t* mission_set_current)
{
8001f600:	eb cd 40 c0 	pushm	r6-r7,lr
8001f604:	1a 97       	mov	r7,sp
8001f606:	20 2d       	sub	sp,8
8001f608:	49 06       	lddpc	r6,8001f648 <mavlink_msg_mission_set_current_decode+0x48>
8001f60a:	1e 26       	rsub	r6,pc
8001f60c:	ef 4c ff fc 	st.w	r7[-4],r12
8001f610:	ef 4b ff f8 	st.w	r7[-8],r11
#if MAVLINK_NEED_BYTE_SWAP
	mission_set_current->seq = mavlink_msg_mission_set_current_get_seq(msg);
8001f614:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f618:	cd ef       	rcall	8001f5d4 <mavlink_msg_mission_set_current_get_seq>
8001f61a:	18 98       	mov	r8,r12
8001f61c:	5c 88       	casts.h	r8
8001f61e:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001f622:	b2 08       	st.h	r9[0x0],r8
	mission_set_current->target_system = mavlink_msg_mission_set_current_get_target_system(msg);
8001f624:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f628:	cb 8f       	rcall	8001f598 <mavlink_msg_mission_set_current_get_target_system>
8001f62a:	18 98       	mov	r8,r12
8001f62c:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001f630:	b2 a8       	st.b	r9[0x2],r8
	mission_set_current->target_component = mavlink_msg_mission_set_current_get_target_component(msg);
8001f632:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f636:	cc 0f       	rcall	8001f5b6 <mavlink_msg_mission_set_current_get_target_component>
8001f638:	18 98       	mov	r8,r12
8001f63a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001f63e:	b2 b8       	st.b	r9[0x3],r8
#else
	memcpy(mission_set_current, _MAV_PAYLOAD(msg), MAVLINK_MSG_ID_MISSION_SET_CURRENT_LEN);
#endif
}
8001f640:	2f ed       	sub	sp,-8
8001f642:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f646:	00 00       	add	r0,r0
8001f648:	80 01       	ld.sh	r1,r0[0x0]
8001f64a:	f4 8e eb cd 	brqs	7febcde4 <_estack+0x7feacde4>

8001f64c <mavlink_msg_mission_current_send>:
 * @param seq Sequence
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_mission_current_send(mavlink_channel_t chan, uint16_t seq)
{
8001f64c:	eb cd 40 c0 	pushm	r6-r7,lr
8001f650:	1a 97       	mov	r7,sp
8001f652:	20 3d       	sub	sp,12
8001f654:	48 e6       	lddpc	r6,8001f68c <mavlink_msg_mission_current_send+0x40>
8001f656:	1e 26       	rsub	r6,pc
8001f658:	ef 4c ff f8 	st.w	r7[-8],r12
8001f65c:	16 98       	mov	r8,r11
8001f65e:	ef 58 ff f4 	st.h	r7[-12],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_MISSION_CURRENT_LEN];
	_mav_put_uint16_t(buf, 0, seq);
8001f662:	ee c9 00 0c 	sub	r9,r7,12
8001f666:	ee c8 00 04 	sub	r8,r7,4
8001f66a:	12 9b       	mov	r11,r9
8001f66c:	10 9c       	mov	r12,r8
8001f66e:	fe b0 fb e3 	rcall	8001ee34 <byte_swap_2>

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_CURRENT, buf, MAVLINK_MSG_ID_MISSION_CURRENT_LEN, MAVLINK_MSG_ID_MISSION_CURRENT_CRC);
8001f672:	ee ca 00 04 	sub	r10,r7,4
8001f676:	31 c8       	mov	r8,28
8001f678:	30 29       	mov	r9,2
8001f67a:	32 ab       	mov	r11,42
8001f67c:	ee fc ff f8 	ld.w	r12,r7[-8]
8001f680:	fe b0 fb 2c 	rcall	8001ecd8 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_CURRENT, (const char *)&packet, MAVLINK_MSG_ID_MISSION_CURRENT_LEN, MAVLINK_MSG_ID_MISSION_CURRENT_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_CURRENT, (const char *)&packet, MAVLINK_MSG_ID_MISSION_CURRENT_LEN);
#endif
#endif
}
8001f684:	2f dd       	sub	sp,-12
8001f686:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f68a:	00 00       	add	r0,r0
8001f68c:	80 01       	ld.sh	r1,r0[0x0]
8001f68e:	f4 da eb cd 	satsub.w	r10,r10,-5171

8001f690 <mavlink_msg_mission_request_list_get_target_system>:
 * @brief Get field target_system from mission_request_list message
 *
 * @return System ID
 */
static inline uint8_t mavlink_msg_mission_request_list_get_target_system(const mavlink_message_t* msg)
{
8001f690:	eb cd 40 80 	pushm	r7,lr
8001f694:	1a 97       	mov	r7,sp
8001f696:	20 1d       	sub	sp,4
8001f698:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  0);
8001f69c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001f6a0:	2f 88       	sub	r8,-8
8001f6a2:	11 88       	ld.ub	r8,r8[0x0]
}
8001f6a4:	10 9c       	mov	r12,r8
8001f6a6:	2f fd       	sub	sp,-4
8001f6a8:	e3 cd 80 80 	ldm	sp++,r7,pc

8001f6ac <mavlink_msg_mission_request_list_get_target_component>:
 * @brief Get field target_component from mission_request_list message
 *
 * @return Component ID
 */
static inline uint8_t mavlink_msg_mission_request_list_get_target_component(const mavlink_message_t* msg)
{
8001f6ac:	eb cd 40 80 	pushm	r7,lr
8001f6b0:	1a 97       	mov	r7,sp
8001f6b2:	20 1d       	sub	sp,4
8001f6b4:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  1);
8001f6b8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001f6bc:	2f 88       	sub	r8,-8
8001f6be:	2f f8       	sub	r8,-1
8001f6c0:	11 88       	ld.ub	r8,r8[0x0]
}
8001f6c2:	10 9c       	mov	r12,r8
8001f6c4:	2f fd       	sub	sp,-4
8001f6c6:	e3 cd 80 80 	ldm	sp++,r7,pc

8001f6ca <mavlink_msg_mission_request_list_decode>:
 *
 * @param msg The message to decode
 * @param mission_request_list C-struct to decode the message contents into
 */
static inline void mavlink_msg_mission_request_list_decode(const mavlink_message_t* msg, mavlink_mission_request_list_t* mission_request_list)
{
8001f6ca:	eb cd 40 c0 	pushm	r6-r7,lr
8001f6ce:	1a 97       	mov	r7,sp
8001f6d0:	20 2d       	sub	sp,8
8001f6d2:	48 c6       	lddpc	r6,8001f700 <mavlink_msg_mission_request_list_decode+0x36>
8001f6d4:	1e 26       	rsub	r6,pc
8001f6d6:	ef 4c ff fc 	st.w	r7[-4],r12
8001f6da:	ef 4b ff f8 	st.w	r7[-8],r11
#if MAVLINK_NEED_BYTE_SWAP
	mission_request_list->target_system = mavlink_msg_mission_request_list_get_target_system(msg);
8001f6de:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f6e2:	cd 7f       	rcall	8001f690 <mavlink_msg_mission_request_list_get_target_system>
8001f6e4:	18 98       	mov	r8,r12
8001f6e6:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001f6ea:	b2 88       	st.b	r9[0x0],r8
	mission_request_list->target_component = mavlink_msg_mission_request_list_get_target_component(msg);
8001f6ec:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f6f0:	cd ef       	rcall	8001f6ac <mavlink_msg_mission_request_list_get_target_component>
8001f6f2:	18 98       	mov	r8,r12
8001f6f4:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001f6f8:	b2 98       	st.b	r9[0x1],r8
#else
	memcpy(mission_request_list, _MAV_PAYLOAD(msg), MAVLINK_MSG_ID_MISSION_REQUEST_LIST_LEN);
#endif
}
8001f6fa:	2f ed       	sub	sp,-8
8001f6fc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f700:	80 01       	ld.sh	r1,r0[0x0]
8001f702:	f5 58 eb cd 	st.h	r10[-5171],r8

8001f704 <mavlink_msg_mission_count_send>:
 * @param count Number of mission items in the sequence
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_mission_count_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t count)
{
8001f704:	eb cd 40 c0 	pushm	r6-r7,lr
8001f708:	1a 97       	mov	r7,sp
8001f70a:	20 5d       	sub	sp,20
8001f70c:	49 56       	lddpc	r6,8001f760 <mavlink_msg_mission_count_send+0x5c>
8001f70e:	1e 26       	rsub	r6,pc
8001f710:	ef 4c ff f8 	st.w	r7[-8],r12
8001f714:	12 98       	mov	r8,r9
8001f716:	16 99       	mov	r9,r11
8001f718:	ef 69 ff f4 	st.b	r7[-12],r9
8001f71c:	14 99       	mov	r9,r10
8001f71e:	ef 69 ff f0 	st.b	r7[-16],r9
8001f722:	ef 58 ff ec 	st.h	r7[-20],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_MISSION_COUNT_LEN];
	_mav_put_uint16_t(buf, 0, count);
8001f726:	ee c9 00 14 	sub	r9,r7,20
8001f72a:	ee c8 00 04 	sub	r8,r7,4
8001f72e:	12 9b       	mov	r11,r9
8001f730:	10 9c       	mov	r12,r8
8001f732:	fe b0 fb 81 	rcall	8001ee34 <byte_swap_2>
	_mav_put_uint8_t(buf, 2, target_system);
8001f736:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8001f73a:	ef 68 ff fe 	st.b	r7[-2],r8
	_mav_put_uint8_t(buf, 3, target_component);
8001f73e:	ef 38 ff f0 	ld.ub	r8,r7[-16]
8001f742:	ef 68 ff ff 	st.b	r7[-1],r8

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_COUNT, buf, MAVLINK_MSG_ID_MISSION_COUNT_LEN, MAVLINK_MSG_ID_MISSION_COUNT_CRC);
8001f746:	ee ca 00 04 	sub	r10,r7,4
8001f74a:	e0 68 00 dd 	mov	r8,221
8001f74e:	30 49       	mov	r9,4
8001f750:	32 cb       	mov	r11,44
8001f752:	ee fc ff f8 	ld.w	r12,r7[-8]
8001f756:	fe b0 fa c1 	rcall	8001ecd8 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_COUNT, (const char *)&packet, MAVLINK_MSG_ID_MISSION_COUNT_LEN, MAVLINK_MSG_ID_MISSION_COUNT_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_COUNT, (const char *)&packet, MAVLINK_MSG_ID_MISSION_COUNT_LEN);
#endif
#endif
}
8001f75a:	2f bd       	sub	sp,-20
8001f75c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f760:	80 01       	ld.sh	r1,r0[0x0]
8001f762:	f5 92       	*unknown*

8001f764 <mavlink_msg_mission_count_get_target_system>:
 * @brief Get field target_system from mission_count message
 *
 * @return System ID
 */
static inline uint8_t mavlink_msg_mission_count_get_target_system(const mavlink_message_t* msg)
{
8001f764:	eb cd 40 80 	pushm	r7,lr
8001f768:	1a 97       	mov	r7,sp
8001f76a:	20 1d       	sub	sp,4
8001f76c:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  2);
8001f770:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001f774:	2f 88       	sub	r8,-8
8001f776:	2f e8       	sub	r8,-2
8001f778:	11 88       	ld.ub	r8,r8[0x0]
}
8001f77a:	10 9c       	mov	r12,r8
8001f77c:	2f fd       	sub	sp,-4
8001f77e:	e3 cd 80 80 	ldm	sp++,r7,pc

8001f782 <mavlink_msg_mission_count_get_target_component>:
 * @brief Get field target_component from mission_count message
 *
 * @return Component ID
 */
static inline uint8_t mavlink_msg_mission_count_get_target_component(const mavlink_message_t* msg)
{
8001f782:	eb cd 40 80 	pushm	r7,lr
8001f786:	1a 97       	mov	r7,sp
8001f788:	20 1d       	sub	sp,4
8001f78a:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  3);
8001f78e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001f792:	2f 88       	sub	r8,-8
8001f794:	2f d8       	sub	r8,-3
8001f796:	11 88       	ld.ub	r8,r8[0x0]
}
8001f798:	10 9c       	mov	r12,r8
8001f79a:	2f fd       	sub	sp,-4
8001f79c:	e3 cd 80 80 	ldm	sp++,r7,pc

8001f7a0 <mavlink_msg_mission_count_get_count>:
 * @brief Get field count from mission_count message
 *
 * @return Number of mission items in the sequence
 */
static inline uint16_t mavlink_msg_mission_count_get_count(const mavlink_message_t* msg)
{
8001f7a0:	eb cd 40 c0 	pushm	r6-r7,lr
8001f7a4:	1a 97       	mov	r7,sp
8001f7a6:	20 1d       	sub	sp,4
8001f7a8:	48 86       	lddpc	r6,8001f7c8 <mavlink_msg_mission_count_get_count+0x28>
8001f7aa:	1e 26       	rsub	r6,pc
8001f7ac:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint16_t(msg,  0);
8001f7b0:	30 0b       	mov	r11,0
8001f7b2:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f7b6:	fe b0 fb ab 	rcall	8001ef0c <_MAV_RETURN_uint16_t>
8001f7ba:	18 98       	mov	r8,r12
8001f7bc:	5c 88       	casts.h	r8
8001f7be:	5c 88       	casts.h	r8
}
8001f7c0:	10 9c       	mov	r12,r8
8001f7c2:	2f fd       	sub	sp,-4
8001f7c4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f7c8:	80 01       	ld.sh	r1,r0[0x0]
8001f7ca:	f6 2e eb cd 	sub	lr,-594995

8001f7cc <mavlink_msg_mission_count_decode>:
 *
 * @param msg The message to decode
 * @param mission_count C-struct to decode the message contents into
 */
static inline void mavlink_msg_mission_count_decode(const mavlink_message_t* msg, mavlink_mission_count_t* mission_count)
{
8001f7cc:	eb cd 40 c0 	pushm	r6-r7,lr
8001f7d0:	1a 97       	mov	r7,sp
8001f7d2:	20 2d       	sub	sp,8
8001f7d4:	49 06       	lddpc	r6,8001f814 <mavlink_msg_mission_count_decode+0x48>
8001f7d6:	1e 26       	rsub	r6,pc
8001f7d8:	ef 4c ff fc 	st.w	r7[-4],r12
8001f7dc:	ef 4b ff f8 	st.w	r7[-8],r11
#if MAVLINK_NEED_BYTE_SWAP
	mission_count->count = mavlink_msg_mission_count_get_count(msg);
8001f7e0:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f7e4:	cd ef       	rcall	8001f7a0 <mavlink_msg_mission_count_get_count>
8001f7e6:	18 98       	mov	r8,r12
8001f7e8:	5c 88       	casts.h	r8
8001f7ea:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001f7ee:	b2 08       	st.h	r9[0x0],r8
	mission_count->target_system = mavlink_msg_mission_count_get_target_system(msg);
8001f7f0:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f7f4:	cb 8f       	rcall	8001f764 <mavlink_msg_mission_count_get_target_system>
8001f7f6:	18 98       	mov	r8,r12
8001f7f8:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001f7fc:	b2 a8       	st.b	r9[0x2],r8
	mission_count->target_component = mavlink_msg_mission_count_get_target_component(msg);
8001f7fe:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f802:	cc 0f       	rcall	8001f782 <mavlink_msg_mission_count_get_target_component>
8001f804:	18 98       	mov	r8,r12
8001f806:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001f80a:	b2 b8       	st.b	r9[0x3],r8
#else
	memcpy(mission_count, _MAV_PAYLOAD(msg), MAVLINK_MSG_ID_MISSION_COUNT_LEN);
#endif
}
8001f80c:	2f ed       	sub	sp,-8
8001f80e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f812:	00 00       	add	r0,r0
8001f814:	80 01       	ld.sh	r1,r0[0x0]
8001f816:	f6 5a eb cd 	cp.w	r10,-529459

8001f818 <mavlink_msg_mission_clear_all_get_target_system>:
 * @brief Get field target_system from mission_clear_all message
 *
 * @return System ID
 */
static inline uint8_t mavlink_msg_mission_clear_all_get_target_system(const mavlink_message_t* msg)
{
8001f818:	eb cd 40 80 	pushm	r7,lr
8001f81c:	1a 97       	mov	r7,sp
8001f81e:	20 1d       	sub	sp,4
8001f820:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  0);
8001f824:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001f828:	2f 88       	sub	r8,-8
8001f82a:	11 88       	ld.ub	r8,r8[0x0]
}
8001f82c:	10 9c       	mov	r12,r8
8001f82e:	2f fd       	sub	sp,-4
8001f830:	e3 cd 80 80 	ldm	sp++,r7,pc

8001f834 <mavlink_msg_mission_clear_all_get_target_component>:
 * @brief Get field target_component from mission_clear_all message
 *
 * @return Component ID
 */
static inline uint8_t mavlink_msg_mission_clear_all_get_target_component(const mavlink_message_t* msg)
{
8001f834:	eb cd 40 80 	pushm	r7,lr
8001f838:	1a 97       	mov	r7,sp
8001f83a:	20 1d       	sub	sp,4
8001f83c:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  1);
8001f840:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001f844:	2f 88       	sub	r8,-8
8001f846:	2f f8       	sub	r8,-1
8001f848:	11 88       	ld.ub	r8,r8[0x0]
}
8001f84a:	10 9c       	mov	r12,r8
8001f84c:	2f fd       	sub	sp,-4
8001f84e:	e3 cd 80 80 	ldm	sp++,r7,pc

8001f852 <mavlink_msg_mission_clear_all_decode>:
 *
 * @param msg The message to decode
 * @param mission_clear_all C-struct to decode the message contents into
 */
static inline void mavlink_msg_mission_clear_all_decode(const mavlink_message_t* msg, mavlink_mission_clear_all_t* mission_clear_all)
{
8001f852:	eb cd 40 c0 	pushm	r6-r7,lr
8001f856:	1a 97       	mov	r7,sp
8001f858:	20 2d       	sub	sp,8
8001f85a:	48 c6       	lddpc	r6,8001f888 <mavlink_msg_mission_clear_all_decode+0x36>
8001f85c:	1e 26       	rsub	r6,pc
8001f85e:	ef 4c ff fc 	st.w	r7[-4],r12
8001f862:	ef 4b ff f8 	st.w	r7[-8],r11
#if MAVLINK_NEED_BYTE_SWAP
	mission_clear_all->target_system = mavlink_msg_mission_clear_all_get_target_system(msg);
8001f866:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f86a:	cd 7f       	rcall	8001f818 <mavlink_msg_mission_clear_all_get_target_system>
8001f86c:	18 98       	mov	r8,r12
8001f86e:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001f872:	b2 88       	st.b	r9[0x0],r8
	mission_clear_all->target_component = mavlink_msg_mission_clear_all_get_target_component(msg);
8001f874:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f878:	cd ef       	rcall	8001f834 <mavlink_msg_mission_clear_all_get_target_component>
8001f87a:	18 98       	mov	r8,r12
8001f87c:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001f880:	b2 98       	st.b	r9[0x1],r8
#else
	memcpy(mission_clear_all, _MAV_PAYLOAD(msg), MAVLINK_MSG_ID_MISSION_CLEAR_ALL_LEN);
#endif
}
8001f882:	2f ed       	sub	sp,-8
8001f884:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f888:	80 01       	ld.sh	r1,r0[0x0]
8001f88a:	f6 e0 eb cd 	ld.d	r0,r11[-5171]

8001f88c <mavlink_msg_mission_item_reached_send>:
 * @param seq Sequence
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_mission_item_reached_send(mavlink_channel_t chan, uint16_t seq)
{
8001f88c:	eb cd 40 c0 	pushm	r6-r7,lr
8001f890:	1a 97       	mov	r7,sp
8001f892:	20 3d       	sub	sp,12
8001f894:	48 e6       	lddpc	r6,8001f8cc <mavlink_msg_mission_item_reached_send+0x40>
8001f896:	1e 26       	rsub	r6,pc
8001f898:	ef 4c ff f8 	st.w	r7[-8],r12
8001f89c:	16 98       	mov	r8,r11
8001f89e:	ef 58 ff f4 	st.h	r7[-12],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_MISSION_ITEM_REACHED_LEN];
	_mav_put_uint16_t(buf, 0, seq);
8001f8a2:	ee c9 00 0c 	sub	r9,r7,12
8001f8a6:	ee c8 00 04 	sub	r8,r7,4
8001f8aa:	12 9b       	mov	r11,r9
8001f8ac:	10 9c       	mov	r12,r8
8001f8ae:	fe b0 fa c3 	rcall	8001ee34 <byte_swap_2>

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_ITEM_REACHED, buf, MAVLINK_MSG_ID_MISSION_ITEM_REACHED_LEN, MAVLINK_MSG_ID_MISSION_ITEM_REACHED_CRC);
8001f8b2:	ee ca 00 04 	sub	r10,r7,4
8001f8b6:	30 b8       	mov	r8,11
8001f8b8:	30 29       	mov	r9,2
8001f8ba:	32 eb       	mov	r11,46
8001f8bc:	ee fc ff f8 	ld.w	r12,r7[-8]
8001f8c0:	fe b0 fa 0c 	rcall	8001ecd8 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_ITEM_REACHED, (const char *)&packet, MAVLINK_MSG_ID_MISSION_ITEM_REACHED_LEN, MAVLINK_MSG_ID_MISSION_ITEM_REACHED_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_ITEM_REACHED, (const char *)&packet, MAVLINK_MSG_ID_MISSION_ITEM_REACHED_LEN);
#endif
#endif
}
8001f8c4:	2f dd       	sub	sp,-12
8001f8c6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f8ca:	00 00       	add	r0,r0
8001f8cc:	80 01       	ld.sh	r1,r0[0x0]
8001f8ce:	f7 1a eb cd 	ld.uh	r10,r11[-5171]

8001f8d0 <mavlink_msg_mission_ack_send>:
 * @param type See MAV_MISSION_RESULT enum
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_mission_ack_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint8_t type)
{
8001f8d0:	eb cd 40 c0 	pushm	r6-r7,lr
8001f8d4:	1a 97       	mov	r7,sp
8001f8d6:	20 5d       	sub	sp,20
8001f8d8:	49 36       	lddpc	r6,8001f924 <mavlink_msg_mission_ack_send+0x54>
8001f8da:	1e 26       	rsub	r6,pc
8001f8dc:	ef 4c ff f8 	st.w	r7[-8],r12
8001f8e0:	12 98       	mov	r8,r9
8001f8e2:	16 99       	mov	r9,r11
8001f8e4:	ef 69 ff f4 	st.b	r7[-12],r9
8001f8e8:	14 99       	mov	r9,r10
8001f8ea:	ef 69 ff f0 	st.b	r7[-16],r9
8001f8ee:	ef 68 ff ec 	st.b	r7[-20],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_MISSION_ACK_LEN];
	_mav_put_uint8_t(buf, 0, target_system);
8001f8f2:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8001f8f6:	ef 68 ff fc 	st.b	r7[-4],r8
	_mav_put_uint8_t(buf, 1, target_component);
8001f8fa:	ef 38 ff f0 	ld.ub	r8,r7[-16]
8001f8fe:	ef 68 ff fd 	st.b	r7[-3],r8
	_mav_put_uint8_t(buf, 2, type);
8001f902:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8001f906:	ef 68 ff fe 	st.b	r7[-2],r8

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_ACK, buf, MAVLINK_MSG_ID_MISSION_ACK_LEN, MAVLINK_MSG_ID_MISSION_ACK_CRC);
8001f90a:	ee ca 00 04 	sub	r10,r7,4
8001f90e:	e0 68 00 99 	mov	r8,153
8001f912:	30 39       	mov	r9,3
8001f914:	32 fb       	mov	r11,47
8001f916:	ee fc ff f8 	ld.w	r12,r7[-8]
8001f91a:	fe b0 f9 df 	rcall	8001ecd8 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_ACK, (const char *)&packet, MAVLINK_MSG_ID_MISSION_ACK_LEN, MAVLINK_MSG_ID_MISSION_ACK_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_ACK, (const char *)&packet, MAVLINK_MSG_ID_MISSION_ACK_LEN);
#endif
#endif
}
8001f91e:	2f bd       	sub	sp,-20
8001f920:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f924:	80 01       	ld.sh	r1,r0[0x0]
8001f926:	f7 5e eb cd 	st.h	r11[-5171],lr

8001f928 <mavlink_msg_mission_ack_get_target_system>:
 * @brief Get field target_system from mission_ack message
 *
 * @return System ID
 */
static inline uint8_t mavlink_msg_mission_ack_get_target_system(const mavlink_message_t* msg)
{
8001f928:	eb cd 40 80 	pushm	r7,lr
8001f92c:	1a 97       	mov	r7,sp
8001f92e:	20 1d       	sub	sp,4
8001f930:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  0);
8001f934:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001f938:	2f 88       	sub	r8,-8
8001f93a:	11 88       	ld.ub	r8,r8[0x0]
}
8001f93c:	10 9c       	mov	r12,r8
8001f93e:	2f fd       	sub	sp,-4
8001f940:	e3 cd 80 80 	ldm	sp++,r7,pc

8001f944 <mavlink_msg_mission_ack_get_target_component>:
 * @brief Get field target_component from mission_ack message
 *
 * @return Component ID
 */
static inline uint8_t mavlink_msg_mission_ack_get_target_component(const mavlink_message_t* msg)
{
8001f944:	eb cd 40 80 	pushm	r7,lr
8001f948:	1a 97       	mov	r7,sp
8001f94a:	20 1d       	sub	sp,4
8001f94c:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  1);
8001f950:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001f954:	2f 88       	sub	r8,-8
8001f956:	2f f8       	sub	r8,-1
8001f958:	11 88       	ld.ub	r8,r8[0x0]
}
8001f95a:	10 9c       	mov	r12,r8
8001f95c:	2f fd       	sub	sp,-4
8001f95e:	e3 cd 80 80 	ldm	sp++,r7,pc

8001f962 <mavlink_msg_mission_ack_get_type>:
 * @brief Get field type from mission_ack message
 *
 * @return See MAV_MISSION_RESULT enum
 */
static inline uint8_t mavlink_msg_mission_ack_get_type(const mavlink_message_t* msg)
{
8001f962:	eb cd 40 80 	pushm	r7,lr
8001f966:	1a 97       	mov	r7,sp
8001f968:	20 1d       	sub	sp,4
8001f96a:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  2);
8001f96e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001f972:	2f 88       	sub	r8,-8
8001f974:	2f e8       	sub	r8,-2
8001f976:	11 88       	ld.ub	r8,r8[0x0]
}
8001f978:	10 9c       	mov	r12,r8
8001f97a:	2f fd       	sub	sp,-4
8001f97c:	e3 cd 80 80 	ldm	sp++,r7,pc

8001f980 <mavlink_msg_mission_ack_decode>:
 *
 * @param msg The message to decode
 * @param mission_ack C-struct to decode the message contents into
 */
static inline void mavlink_msg_mission_ack_decode(const mavlink_message_t* msg, mavlink_mission_ack_t* mission_ack)
{
8001f980:	eb cd 40 c0 	pushm	r6-r7,lr
8001f984:	1a 97       	mov	r7,sp
8001f986:	20 2d       	sub	sp,8
8001f988:	48 f6       	lddpc	r6,8001f9c4 <mavlink_msg_mission_ack_decode+0x44>
8001f98a:	1e 26       	rsub	r6,pc
8001f98c:	ef 4c ff fc 	st.w	r7[-4],r12
8001f990:	ef 4b ff f8 	st.w	r7[-8],r11
#if MAVLINK_NEED_BYTE_SWAP
	mission_ack->target_system = mavlink_msg_mission_ack_get_target_system(msg);
8001f994:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f998:	cc 8f       	rcall	8001f928 <mavlink_msg_mission_ack_get_target_system>
8001f99a:	18 98       	mov	r8,r12
8001f99c:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001f9a0:	b2 88       	st.b	r9[0x0],r8
	mission_ack->target_component = mavlink_msg_mission_ack_get_target_component(msg);
8001f9a2:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f9a6:	cc ff       	rcall	8001f944 <mavlink_msg_mission_ack_get_target_component>
8001f9a8:	18 98       	mov	r8,r12
8001f9aa:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001f9ae:	b2 98       	st.b	r9[0x1],r8
	mission_ack->type = mavlink_msg_mission_ack_get_type(msg);
8001f9b0:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f9b4:	cd 7f       	rcall	8001f962 <mavlink_msg_mission_ack_get_type>
8001f9b6:	18 98       	mov	r8,r12
8001f9b8:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001f9bc:	b2 a8       	st.b	r9[0x2],r8
#else
	memcpy(mission_ack, _MAV_PAYLOAD(msg), MAVLINK_MSG_ID_MISSION_ACK_LEN);
#endif
}
8001f9be:	2f ed       	sub	sp,-8
8001f9c0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f9c4:	80 01       	ld.sh	r1,r0[0x0]
8001f9c6:	f8 0e       	*unknown*

8001f9c8 <scalar_product>:
	return out;
}


float static inline scalar_product(const float u[], const float v[])
{
8001f9c8:	eb cd 40 80 	pushm	r7,lr
8001f9cc:	1a 97       	mov	r7,sp
8001f9ce:	20 3d       	sub	sp,12
8001f9d0:	ef 4c ff f8 	st.w	r7[-8],r12
8001f9d4:	ef 4b ff f4 	st.w	r7[-12],r11
	float scp = (u[0]*v[0]+u[1]*v[1]+u[2]*v[2]);
8001f9d8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001f9dc:	70 09       	ld.w	r9,r8[0x0]
8001f9de:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001f9e2:	70 08       	ld.w	r8,r8[0x0]
8001f9e4:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8001f9e8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001f9ec:	2f c8       	sub	r8,-4
8001f9ee:	70 0a       	ld.w	r10,r8[0x0]
8001f9f0:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001f9f4:	2f c8       	sub	r8,-4
8001f9f6:	70 08       	ld.w	r8,r8[0x0]
8001f9f8:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8001f9fc:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001fa00:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001fa04:	2f 88       	sub	r8,-8
8001fa06:	70 0a       	ld.w	r10,r8[0x0]
8001fa08:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001fa0c:	2f 88       	sub	r8,-8
8001fa0e:	70 08       	ld.w	r8,r8[0x0]
8001fa10:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8001fa14:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8001fa18:	ef 48 ff fc 	st.w	r7[-4],r8
	return scp;
8001fa1c:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8001fa20:	10 9c       	mov	r12,r8
8001fa22:	2f dd       	sub	sp,-12
8001fa24:	e3 cd 80 80 	ldm	sp++,r7,pc

8001fa28 <vector_norm_sqr>:
	result=0.5*(result+(input/result));
	return result;
}

float static inline vector_norm_sqr(float u[])
{
8001fa28:	eb cd 40 c0 	pushm	r6-r7,lr
8001fa2c:	1a 97       	mov	r7,sp
8001fa2e:	20 2d       	sub	sp,8
8001fa30:	48 96       	lddpc	r6,8001fa54 <vector_norm_sqr+0x2c>
8001fa32:	1e 26       	rsub	r6,pc
8001fa34:	ef 4c ff f8 	st.w	r7[-8],r12
	float norm = scalar_product(u,u);
8001fa38:	ee fb ff f8 	ld.w	r11,r7[-8]
8001fa3c:	ee fc ff f8 	ld.w	r12,r7[-8]
8001fa40:	cc 4f       	rcall	8001f9c8 <scalar_product>
8001fa42:	18 98       	mov	r8,r12
8001fa44:	ef 48 ff fc 	st.w	r7[-4],r8
	return norm;
8001fa48:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8001fa4c:	10 9c       	mov	r12,r8
8001fa4e:	2f ed       	sub	sp,-8
8001fa50:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001fa54:	80 01       	ld.sh	r1,r0[0x0]
8001fa56:	f8 b6       	*unknown*

8001fa58 <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
8001fa58:	eb cd 40 c0 	pushm	r6-r7,lr
8001fa5c:	1a 97       	mov	r7,sp
8001fa5e:	20 6d       	sub	sp,24
8001fa60:	49 e6       	lddpc	r6,8001fad8 <interpolate+0x80>
8001fa62:	1e 26       	rsub	r6,pc
8001fa64:	ef 4c ff f8 	st.w	r7[-8],r12
8001fa68:	ef 4b ff f4 	st.w	r7[-12],r11
8001fa6c:	ef 4a ff f0 	st.w	r7[-16],r10
8001fa70:	ef 49 ff ec 	st.w	r7[-20],r9
8001fa74:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
8001fa78:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001fa7c:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001fa80:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
8001fa84:	c0 41       	brne	8001fa8c <interpolate+0x34>
	{
		return y1;
8001fa86:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001fa8a:	c2 38       	rjmp	8001fad0 <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
8001fa8c:	ee f9 ff e8 	ld.w	r9,r7[-24]
8001fa90:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001fa94:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8001fa98:	ee fa ff f8 	ld.w	r10,r7[-8]
8001fa9c:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001faa0:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
8001faa4:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8001faa8:	ee fa ff f0 	ld.w	r10,r7[-16]
8001faac:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001fab0:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8001fab4:	12 9b       	mov	r11,r9
8001fab6:	10 9c       	mov	r12,r8
8001fab8:	f0 16 00 08 	mcall	r6[32]
8001fabc:	18 98       	mov	r8,r12
8001fabe:	10 99       	mov	r9,r8
8001fac0:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001fac4:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8001fac8:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
8001facc:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
8001fad0:	10 9c       	mov	r12,r8
8001fad2:	2f ad       	sub	sp,-24
8001fad4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001fad8:	80 01       	ld.sh	r1,r0[0x0]
8001fada:	f8 e6 eb cd 	ld.d	r6,r12[-5171]

8001fadc <get_thrust_from_remote>:


static float inline get_roll_from_remote()	{return rc_get_channel_neutral(RC_ROLL)*RC_ROLL_DIR * RC_SCALEFACTOR; };
static float inline get_pitch_from_remote()	{return rc_get_channel_neutral(RC_PITCH)*RC_PITCH_DIR * RC_SCALEFACTOR; };
static float inline get_yaw_from_remote()	{return rc_get_channel_neutral(RC_YAW)*RC_YAW_DIR * RC_SCALEFACTOR; };
static float inline get_thrust_from_remote()	{return rc_get_channel(RC_THROTTLE)*RC_THROTTLE_DIR*RC_SCALEFACTOR; };
8001fadc:	eb cd 40 c0 	pushm	r6-r7,lr
8001fae0:	1a 97       	mov	r7,sp
8001fae2:	48 e6       	lddpc	r6,8001fb18 <get_thrust_from_remote+0x3c>
8001fae4:	1e 26       	rsub	r6,pc
8001fae6:	30 0c       	mov	r12,0
8001fae8:	f0 16 00 1b 	mcall	r6[108]
8001faec:	18 98       	mov	r8,r12
8001faee:	10 9c       	mov	r12,r8
8001faf0:	f0 16 00 1a 	mcall	r6[104]
8001faf4:	30 08       	mov	r8,0
8001faf6:	e0 69 60 00 	mov	r9,24576
8001fafa:	ea 19 40 7b 	orh	r9,0x407b
8001fafe:	f0 16 00 0c 	mcall	r6[48]
8001fb02:	14 98       	mov	r8,r10
8001fb04:	16 99       	mov	r9,r11
8001fb06:	10 9a       	mov	r10,r8
8001fb08:	12 9b       	mov	r11,r9
8001fb0a:	f0 16 00 09 	mcall	r6[36]
8001fb0e:	18 98       	mov	r8,r12
8001fb10:	10 9c       	mov	r12,r8
8001fb12:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001fb16:	00 00       	add	r0,r0
8001fb18:	80 01       	ld.sh	r1,r0[0x0]
8001fb1a:	f9 68 eb cd 	st.b	r12[-5171],r8

8001fb1c <init_waypoint_handler>:
central_data_t *centralData;

int int_loop_count = 0;

void init_waypoint_handler()
{
8001fb1c:	eb cd 40 c0 	pushm	r6-r7,lr
8001fb20:	1a 97       	mov	r7,sp
8001fb22:	49 c6       	lddpc	r6,8001fb90 <init_waypoint_handler+0x74>
8001fb24:	1e 26       	rsub	r6,pc
	start_timeout = get_millis();
8001fb26:	f0 16 00 0f 	mcall	r6[60]
8001fb2a:	18 99       	mov	r9,r12
8001fb2c:	ec f8 01 64 	ld.w	r8,r6[356]
8001fb30:	91 09       	st.w	r8[0x0],r9
	timeout_max_wp = 10000;
8001fb32:	ec f8 03 f4 	ld.w	r8,r6[1012]
8001fb36:	e0 69 27 10 	mov	r9,10000
8001fb3a:	91 09       	st.w	r8[0x0],r9
	centralData = get_central_data();
8001fb3c:	f0 16 00 32 	mcall	r6[200]
8001fb40:	18 99       	mov	r9,r12
8001fb42:	ec f8 00 00 	ld.w	r8,r6[0]
8001fb46:	91 09       	st.w	r8[0x0],r9
	
	centralData->critical_behavior = CLIMB_TO_SAFE_ALT;
8001fb48:	ec f8 00 00 	ld.w	r8,r6[0]
8001fb4c:	70 08       	ld.w	r8,r8[0x0]
8001fb4e:	30 19       	mov	r9,1
8001fb50:	f1 49 12 e4 	st.w	r8[4836],r9
	centralData->critical_init = false;
8001fb54:	ec f8 00 00 	ld.w	r8,r6[0]
8001fb58:	70 09       	ld.w	r9,r8[0x0]
8001fb5a:	30 08       	mov	r8,0
8001fb5c:	f3 68 10 b9 	st.b	r9[4281],r8
	centralData->critical_next_state = false;
8001fb60:	ec f8 00 00 	ld.w	r8,r6[0]
8001fb64:	70 09       	ld.w	r9,r8[0x0]
8001fb66:	30 08       	mov	r8,0
8001fb68:	f3 68 10 ba 	st.b	r9[4282],r8
	
	init_waypoint_list(centralData->waypoint_list, &centralData->number_of_waypoints);
8001fb6c:	ec f8 00 00 	ld.w	r8,r6[0]
8001fb70:	70 08       	ld.w	r8,r8[0x0]
8001fb72:	f0 c9 ef e4 	sub	r9,r8,-4124
8001fb76:	ec f8 00 00 	ld.w	r8,r6[0]
8001fb7a:	70 08       	ld.w	r8,r8[0x0]
8001fb7c:	f0 c8 f1 f4 	sub	r8,r8,-3596
8001fb80:	12 9b       	mov	r11,r9
8001fb82:	10 9c       	mov	r12,r8
8001fb84:	f0 16 01 51 	mcall	r6[1348]
	init_wp();
8001fb88:	f0 16 00 84 	mcall	r6[528]
}
8001fb8c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001fb90:	80 01       	ld.sh	r1,r0[0x0]
8001fb92:	f9 a8       	*unknown*
8001fb94:	4e 61       	lddpc	r1,8001fd2c <init_wp+0x178>
8001fb96:	76 20       	ld.w	r0,r11[0x8]
8001fb98:	69 6e       	ld.w	lr,r4[0x58]
8001fb9a:	69 74       	ld.w	r4,r4[0x5c]
8001fb9c:	0a 00       	add	r0,r5
8001fb9e:	00 00       	add	r0,r0
8001fba0:	57 61       	stdsp	sp[0x1d8],r1
8001fba2:	79 70       	ld.w	r0,r12[0x5c]
8001fba4:	6f 69       	ld.w	r9,r7[0x58]
8001fba6:	6e 74       	ld.w	r4,r7[0x1c]
8001fba8:	20 4e       	sub	lr,4
8001fbaa:	72 00       	ld.w	r0,r9[0x0]
8001fbac:	20 73       	sub	r3,7
8001fbae:	65 74       	ld.w	r4,r2[0x5c]
8001fbb0:	2c 0a       	sub	r10,-64
	...

8001fbb4 <init_wp>:

void init_wp()
{
8001fbb4:	eb cd 40 e8 	pushm	r3,r5-r7,lr
8001fbb8:	1a 97       	mov	r7,sp
8001fbba:	21 0d       	sub	sp,64
8001fbbc:	fe f6 02 fc 	ld.w	r6,pc[764]
8001fbc0:	1e 26       	rsub	r6,pc
	uint8_t i,j;
	float rel_pos[3];
	
	if (int_loop_count==0)
8001fbc2:	ec f8 03 20 	ld.w	r8,r6[800]
8001fbc6:	70 08       	ld.w	r8,r8[0x0]
8001fbc8:	58 08       	cp.w	r8,0
8001fbca:	c0 51       	brne	8001fbd4 <init_wp+0x20>
	{
		dbg_print("Nav init\n");
8001fbcc:	fe cc 00 38 	sub	r12,pc,56
8001fbd0:	f0 16 00 01 	mcall	r6[4]
	}
	int_loop_count=(int_loop_count+1)%1000;
8001fbd4:	ec f8 03 20 	ld.w	r8,r6[800]
8001fbd8:	70 08       	ld.w	r8,r8[0x0]
8001fbda:	f0 c9 ff ff 	sub	r9,r8,-1
8001fbde:	e0 68 4d d3 	mov	r8,19923
8001fbe2:	ea 18 10 62 	orh	r8,0x1062
8001fbe6:	f2 08 04 4a 	muls.d	r10,r9,r8
8001fbea:	f6 0a 14 06 	asr	r10,r11,0x6
8001fbee:	f2 08 14 1f 	asr	r8,r9,0x1f
8001fbf2:	f4 08 01 08 	sub	r8,r10,r8
8001fbf6:	e0 6a 03 e8 	mov	r10,1000
8001fbfa:	b5 38       	mul	r8,r10
8001fbfc:	f2 08 01 08 	sub	r8,r9,r8
8001fc00:	ec f9 03 20 	ld.w	r9,r6[800]
8001fc04:	93 08       	st.w	r9[0x0],r8
	
	if ((centralData->number_of_waypoints > 0) && (centralData->position_estimator.init_gps_position || centralData->simulation_mode) && centralData->waypoint_receiving == false)
8001fc06:	ec f8 00 00 	ld.w	r8,r6[0]
8001fc0a:	70 08       	ld.w	r8,r8[0x0]
8001fc0c:	f1 08 10 1c 	ld.sh	r8,r8[4124]
8001fc10:	58 08       	cp.w	r8,0
8001fc12:	e0 80 01 4f 	breq	8001feb0 <init_wp+0x2fc>
8001fc16:	ec f8 00 00 	ld.w	r8,r6[0]
8001fc1a:	70 08       	ld.w	r8,r8[0x0]
8001fc1c:	f1 38 0d 64 	ld.ub	r8,r8[3428]
8001fc20:	58 08       	cp.w	r8,0
8001fc22:	c0 91       	brne	8001fc34 <init_wp+0x80>
8001fc24:	ec f8 00 00 	ld.w	r8,r6[0]
8001fc28:	70 08       	ld.w	r8,r8[0x0]
8001fc2a:	f0 f8 10 c0 	ld.w	r8,r8[4288]
8001fc2e:	58 08       	cp.w	r8,0
8001fc30:	e0 80 01 40 	breq	8001feb0 <init_wp+0x2fc>
8001fc34:	ec f8 00 00 	ld.w	r8,r6[0]
8001fc38:	70 08       	ld.w	r8,r8[0x0]
8001fc3a:	f1 38 10 b6 	ld.ub	r8,r8[4278]
8001fc3e:	ec 18 00 01 	eorl	r8,0x1
8001fc42:	5c 58       	castu.b	r8
8001fc44:	e0 80 01 36 	breq	8001feb0 <init_wp+0x2fc>
	{
		for (i=0;i<centralData->number_of_waypoints;i++)
8001fc48:	30 08       	mov	r8,0
8001fc4a:	ef 68 ff fe 	st.b	r7[-2],r8
8001fc4e:	c2 69       	rjmp	8001fe9a <init_wp+0x2e6>
		{
			if ((centralData->waypoint_list[i].current == 1)&&(!centralData->waypoint_set))
8001fc50:	ec f8 00 00 	ld.w	r8,r6[0]
8001fc54:	70 0a       	ld.w	r10,r8[0x0]
8001fc56:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8001fc5a:	12 98       	mov	r8,r9
8001fc5c:	a1 78       	lsl	r8,0x1
8001fc5e:	12 08       	add	r8,r9
8001fc60:	a5 68       	lsl	r8,0x4
8001fc62:	f4 08 00 08 	add	r8,r10,r8
8001fc66:	f0 c8 f1 f0 	sub	r8,r8,-3600
8001fc6a:	11 89       	ld.ub	r9,r8[0x0]
8001fc6c:	30 18       	mov	r8,1
8001fc6e:	f0 09 18 00 	cp.b	r9,r8
8001fc72:	e0 81 01 0f 	brne	8001fe90 <init_wp+0x2dc>
8001fc76:	ec f8 00 00 	ld.w	r8,r6[0]
8001fc7a:	70 08       	ld.w	r8,r8[0x0]
8001fc7c:	f1 38 10 b4 	ld.ub	r8,r8[4276]
8001fc80:	ec 18 00 01 	eorl	r8,0x1
8001fc84:	5c 58       	castu.b	r8
8001fc86:	e0 80 01 05 	breq	8001fe90 <init_wp+0x2dc>
			{
				centralData->current_wp_count = i;
8001fc8a:	ec f8 00 00 	ld.w	r8,r6[0]
8001fc8e:	70 09       	ld.w	r9,r8[0x0]
8001fc90:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8001fc94:	f3 68 10 1e 	st.b	r9[4126],r8
				centralData->current_waypoint = centralData->waypoint_list[centralData->current_wp_count];
8001fc98:	ec f8 00 00 	ld.w	r8,r6[0]
8001fc9c:	70 0a       	ld.w	r10,r8[0x0]
8001fc9e:	ec f8 00 00 	ld.w	r8,r6[0]
8001fca2:	70 0b       	ld.w	r11,r8[0x0]
8001fca4:	ec f8 00 00 	ld.w	r8,r6[0]
8001fca8:	70 08       	ld.w	r8,r8[0x0]
8001fcaa:	f1 38 10 1e 	ld.ub	r8,r8[4126]
8001fcae:	f3 d8 b0 08 	bfexts	r9,r8,0x0,0x8
8001fcb2:	12 98       	mov	r8,r9
8001fcb4:	a1 78       	lsl	r8,0x1
8001fcb6:	12 08       	add	r8,r9
8001fcb8:	a5 68       	lsl	r8,0x4
8001fcba:	f6 08 00 08 	add	r8,r11,r8
8001fcbe:	f0 c8 f1 f4 	sub	r8,r8,-3596
8001fcc2:	f4 cb f0 14 	sub	r11,r10,-4076
8001fcc6:	10 9a       	mov	r10,r8
8001fcc8:	f6 c8 00 00 	sub	r8,r11,0
8001fccc:	f4 c9 00 00 	sub	r9,r10,0
8001fcd0:	72 0c       	ld.w	r12,r9[0x0]
8001fcd2:	91 0c       	st.w	r8[0x0],r12
8001fcd4:	72 1c       	ld.w	r12,r9[0x4]
8001fcd6:	91 1c       	st.w	r8[0x4],r12
8001fcd8:	72 2c       	ld.w	r12,r9[0x8]
8001fcda:	91 2c       	st.w	r8[0x8],r12
8001fcdc:	72 39       	ld.w	r9,r9[0xc]
8001fcde:	91 39       	st.w	r8[0xc],r9
8001fce0:	f6 c8 ff f0 	sub	r8,r11,-16
8001fce4:	f4 c9 ff f0 	sub	r9,r10,-16
8001fce8:	72 0c       	ld.w	r12,r9[0x0]
8001fcea:	91 0c       	st.w	r8[0x0],r12
8001fcec:	72 1c       	ld.w	r12,r9[0x4]
8001fcee:	91 1c       	st.w	r8[0x4],r12
8001fcf0:	72 2c       	ld.w	r12,r9[0x8]
8001fcf2:	91 2c       	st.w	r8[0x8],r12
8001fcf4:	72 39       	ld.w	r9,r9[0xc]
8001fcf6:	91 39       	st.w	r8[0xc],r9
8001fcf8:	f6 c8 ff e0 	sub	r8,r11,-32
8001fcfc:	f4 c9 ff e0 	sub	r9,r10,-32
8001fd00:	72 0a       	ld.w	r10,r9[0x0]
8001fd02:	91 0a       	st.w	r8[0x0],r10
8001fd04:	72 1a       	ld.w	r10,r9[0x4]
8001fd06:	91 1a       	st.w	r8[0x4],r10
8001fd08:	72 2a       	ld.w	r10,r9[0x8]
8001fd0a:	91 2a       	st.w	r8[0x8],r10
8001fd0c:	72 39       	ld.w	r9,r9[0xc]
8001fd0e:	91 39       	st.w	r8[0xc],r9
				centralData->waypoint_coordinates = set_waypoint_from_frame(centralData->current_waypoint,centralData->position_estimator.localPosition.origin);
8001fd10:	ec f8 00 00 	ld.w	r8,r6[0]
8001fd14:	70 05       	ld.w	r5,r8[0x0]
8001fd16:	ec f8 00 00 	ld.w	r8,r6[0]
8001fd1a:	70 08       	ld.w	r8,r8[0x0]
8001fd1c:	ec f9 00 00 	ld.w	r9,r6[0]
8001fd20:	72 0e       	ld.w	lr,r9[0x0]
8001fd22:	ee cc 00 40 	sub	r12,r7,64
8001fd26:	20 7d       	sub	sp,28
8001fd28:	1a 99       	mov	r9,sp
8001fd2a:	12 9a       	mov	r10,r9
8001fd2c:	f0 cb f2 54 	sub	r11,r8,-3500
8001fd30:	f4 c8 00 00 	sub	r8,r10,0
8001fd34:	f6 c9 00 00 	sub	r9,r11,0
8001fd38:	72 03       	ld.w	r3,r9[0x0]
8001fd3a:	91 03       	st.w	r8[0x0],r3
8001fd3c:	72 13       	ld.w	r3,r9[0x4]
8001fd3e:	91 13       	st.w	r8[0x4],r3
8001fd40:	72 23       	ld.w	r3,r9[0x8]
8001fd42:	91 23       	st.w	r8[0x8],r3
8001fd44:	72 39       	ld.w	r9,r9[0xc]
8001fd46:	91 39       	st.w	r8[0xc],r9
8001fd48:	f6 e8 00 10 	ld.d	r8,r11[16]
8001fd4c:	f4 e9 00 10 	st.d	r10[16],r8
8001fd50:	76 68       	ld.w	r8,r11[0x18]
8001fd52:	95 68       	st.w	r10[0x18],r8
8001fd54:	20 cd       	sub	sp,48
8001fd56:	1a 98       	mov	r8,sp
8001fd58:	10 9b       	mov	r11,r8
8001fd5a:	fc ca f0 14 	sub	r10,lr,-4076
8001fd5e:	f6 c8 00 00 	sub	r8,r11,0
8001fd62:	f4 c9 00 00 	sub	r9,r10,0
8001fd66:	72 0e       	ld.w	lr,r9[0x0]
8001fd68:	91 0e       	st.w	r8[0x0],lr
8001fd6a:	72 1e       	ld.w	lr,r9[0x4]
8001fd6c:	91 1e       	st.w	r8[0x4],lr
8001fd6e:	72 2e       	ld.w	lr,r9[0x8]
8001fd70:	91 2e       	st.w	r8[0x8],lr
8001fd72:	72 39       	ld.w	r9,r9[0xc]
8001fd74:	91 39       	st.w	r8[0xc],r9
8001fd76:	f6 c8 ff f0 	sub	r8,r11,-16
8001fd7a:	f4 c9 ff f0 	sub	r9,r10,-16
8001fd7e:	72 0e       	ld.w	lr,r9[0x0]
8001fd80:	91 0e       	st.w	r8[0x0],lr
8001fd82:	72 1e       	ld.w	lr,r9[0x4]
8001fd84:	91 1e       	st.w	r8[0x4],lr
8001fd86:	72 2e       	ld.w	lr,r9[0x8]
8001fd88:	91 2e       	st.w	r8[0x8],lr
8001fd8a:	72 39       	ld.w	r9,r9[0xc]
8001fd8c:	91 39       	st.w	r8[0xc],r9
8001fd8e:	f6 c8 ff e0 	sub	r8,r11,-32
8001fd92:	f4 c9 ff e0 	sub	r9,r10,-32
8001fd96:	72 0a       	ld.w	r10,r9[0x0]
8001fd98:	91 0a       	st.w	r8[0x0],r10
8001fd9a:	72 1a       	ld.w	r10,r9[0x4]
8001fd9c:	91 1a       	st.w	r8[0x4],r10
8001fd9e:	72 2a       	ld.w	r10,r9[0x8]
8001fda0:	91 2a       	st.w	r8[0x8],r10
8001fda2:	72 39       	ld.w	r9,r9[0xc]
8001fda4:	91 39       	st.w	r8[0xc],r9
8001fda6:	f0 16 00 f6 	mcall	r6[984]
8001fdaa:	2e dd       	sub	sp,-76
8001fdac:	ea cb ef e0 	sub	r11,r5,-4128
8001fdb0:	ee ca 00 40 	sub	r10,r7,64
8001fdb4:	f6 c8 00 00 	sub	r8,r11,0
8001fdb8:	f4 c9 00 00 	sub	r9,r10,0
8001fdbc:	72 0c       	ld.w	r12,r9[0x0]
8001fdbe:	91 0c       	st.w	r8[0x0],r12
8001fdc0:	72 1c       	ld.w	r12,r9[0x4]
8001fdc2:	91 1c       	st.w	r8[0x4],r12
8001fdc4:	72 2c       	ld.w	r12,r9[0x8]
8001fdc6:	91 2c       	st.w	r8[0x8],r12
8001fdc8:	72 39       	ld.w	r9,r9[0xc]
8001fdca:	91 39       	st.w	r8[0xc],r9
8001fdcc:	f6 c8 ff f0 	sub	r8,r11,-16
8001fdd0:	f4 c9 ff f0 	sub	r9,r10,-16
8001fdd4:	72 0c       	ld.w	r12,r9[0x0]
8001fdd6:	91 0c       	st.w	r8[0x0],r12
8001fdd8:	72 1c       	ld.w	r12,r9[0x4]
8001fdda:	91 1c       	st.w	r8[0x4],r12
8001fddc:	72 2c       	ld.w	r12,r9[0x8]
8001fdde:	91 2c       	st.w	r8[0x8],r12
8001fde0:	72 39       	ld.w	r9,r9[0xc]
8001fde2:	91 39       	st.w	r8[0xc],r9
8001fde4:	f6 c8 ff e0 	sub	r8,r11,-32
8001fde8:	f4 c9 ff e0 	sub	r9,r10,-32
8001fdec:	72 0a       	ld.w	r10,r9[0x0]
8001fdee:	91 0a       	st.w	r8[0x0],r10
8001fdf0:	72 1a       	ld.w	r10,r9[0x4]
8001fdf2:	91 1a       	st.w	r8[0x4],r10
8001fdf4:	72 2a       	ld.w	r10,r9[0x8]
8001fdf6:	91 2a       	st.w	r8[0x8],r10
8001fdf8:	72 39       	ld.w	r9,r9[0xc]
8001fdfa:	91 39       	st.w	r8[0xc],r9
				
				dbg_print("Waypoint Nr");
8001fdfc:	fe cc 02 5c 	sub	r12,pc,604
8001fe00:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(i,10);
8001fe04:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8001fe08:	30 ab       	mov	r11,10
8001fe0a:	10 9c       	mov	r12,r8
8001fe0c:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" set,\n");
8001fe10:	fe cc 02 64 	sub	r12,pc,612
8001fe14:	f0 16 00 01 	mcall	r6[4]
			
				centralData->waypoint_set = true;
8001fe18:	ec f8 00 00 	ld.w	r8,r6[0]
8001fe1c:	70 09       	ld.w	r9,r8[0x0]
8001fe1e:	30 18       	mov	r8,1
8001fe20:	f3 68 10 b4 	st.b	r9[4276],r8
				//waypoint_reached = false;
				
				for (j=0;j<3;j++)
8001fe24:	30 08       	mov	r8,0
8001fe26:	ef 68 ff ff 	st.b	r7[-1],r8
8001fe2a:	c2 18       	rjmp	8001fe6c <init_wp+0x2b8>
				{
					rel_pos[j] = centralData->waypoint_coordinates.pos[j]-centralData->position_estimator.localPosition.pos[j];
8001fe2c:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8001fe30:	ec f9 00 00 	ld.w	r9,r6[0]
8001fe34:	72 09       	ld.w	r9,r9[0x0]
8001fe36:	ef 3a ff ff 	ld.ub	r10,r7[-1]
8001fe3a:	f4 ca fb f8 	sub	r10,r10,-1032
8001fe3e:	f2 0a 03 2a 	ld.w	r10,r9[r10<<0x2]
8001fe42:	ec f9 00 00 	ld.w	r9,r6[0]
8001fe46:	72 09       	ld.w	r9,r9[0x0]
8001fe48:	ef 3b ff ff 	ld.ub	r11,r7[-1]
8001fe4c:	f6 cb fc 99 	sub	r11,r11,-871
8001fe50:	f2 0b 03 29 	ld.w	r9,r9[r11<<0x2]
8001fe54:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8001fe58:	a3 68       	lsl	r8,0x2
8001fe5a:	ee 08 00 08 	add	r8,r7,r8
8001fe5e:	f1 49 ff f0 	st.w	r8[-16],r9
				dbg_print(" set,\n");
			
				centralData->waypoint_set = true;
				//waypoint_reached = false;
				
				for (j=0;j<3;j++)
8001fe62:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8001fe66:	2f f8       	sub	r8,-1
8001fe68:	ef 68 ff ff 	st.b	r7[-1],r8
8001fe6c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8001fe70:	30 28       	mov	r8,2
8001fe72:	f0 09 18 00 	cp.b	r9,r8
8001fe76:	fe 98 ff db 	brls	8001fe2c <init_wp+0x278>
				{
					rel_pos[j] = centralData->waypoint_coordinates.pos[j]-centralData->position_estimator.localPosition.pos[j];
				}
				centralData->dist2wp_sqr = vector_norm_sqr(rel_pos);
8001fe7a:	ec f8 00 00 	ld.w	r8,r6[0]
8001fe7e:	70 05       	ld.w	r5,r8[0x0]
8001fe80:	ee c8 00 10 	sub	r8,r7,16
8001fe84:	10 9c       	mov	r12,r8
8001fe86:	fe b0 fd d1 	rcall	8001fa28 <vector_norm_sqr>
8001fe8a:	18 98       	mov	r8,r12
8001fe8c:	eb 48 10 b0 	st.w	r5[4272],r8
	}
	int_loop_count=(int_loop_count+1)%1000;
	
	if ((centralData->number_of_waypoints > 0) && (centralData->position_estimator.init_gps_position || centralData->simulation_mode) && centralData->waypoint_receiving == false)
	{
		for (i=0;i<centralData->number_of_waypoints;i++)
8001fe90:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8001fe94:	2f f8       	sub	r8,-1
8001fe96:	ef 68 ff fe 	st.b	r7[-2],r8
8001fe9a:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8001fe9e:	ec f8 00 00 	ld.w	r8,r6[0]
8001fea2:	70 08       	ld.w	r8,r8[0x0]
8001fea4:	f1 08 10 1c 	ld.sh	r8,r8[4124]
8001fea8:	f0 09 19 00 	cp.h	r9,r8
8001feac:	fe 93 fe d2 	brlo	8001fc50 <init_wp+0x9c>
				}
				centralData->dist2wp_sqr = vector_norm_sqr(rel_pos);
			}
		}
	}
}
8001feb0:	2f 0d       	sub	sp,-64
8001feb2:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
8001feb6:	00 00       	add	r0,r0
8001feb8:	80 01       	ld.sh	r1,r0[0x0]
8001feba:	fa 44 4e 75 	cp.w	r4,-373131
8001febe:	6d 62       	ld.w	r2,r6[0x58]
8001fec0:	65 72       	ld.w	r2,r2[0x5c]
8001fec2:	20 6f       	sub	pc,6
8001fec4:	66 20       	ld.w	r0,r3[0x8]
8001fec6:	57 61       	stdsp	sp[0x1d8],r1
8001fec8:	79 70       	ld.w	r0,r12[0x5c]
8001feca:	6f 69       	ld.w	r9,r7[0x58]
8001fecc:	6e 74       	ld.w	r4,r7[0x1c]
8001fece:	20 6f       	sub	pc,6
8001fed0:	6e 62       	ld.w	r2,r7[0x18]
8001fed2:	6f 61       	ld.w	r1,r7[0x58]
8001fed4:	72 64       	ld.w	r4,r9[0x18]
8001fed6:	3a 00       	mov	r0,-96
8001fed8:	0a 00       	add	r0,r5

8001feda <init_waypoint_list>:


void init_waypoint_list(waypoint_struct waypoint_list[], uint16_t* number_of_waypoints)
{
8001feda:	eb cd 40 c0 	pushm	r6-r7,lr
8001fede:	1a 97       	mov	r7,sp
8001fee0:	20 ed       	sub	sp,56
8001fee2:	fe f6 03 1a 	ld.w	r6,pc[794]
8001fee6:	1e 26       	rsub	r6,pc
8001fee8:	ef 4c ff cc 	st.w	r7[-52],r12
8001feec:	ef 4b ff c8 	st.w	r7[-56],r11
	
	
	// Visit https://code.google.com/p/ardupilot-mega/wiki/MAVLink to have a description of all messages (or common.h)
	waypoint_struct waypoint;
	*number_of_waypoints = 4;
8001fef0:	ee f9 ff c8 	ld.w	r9,r7[-56]
8001fef4:	30 48       	mov	r8,4
8001fef6:	b2 08       	st.h	r9[0x0],r8
	
	num_waypoint_onboard = *number_of_waypoints;
8001fef8:	ee f8 ff c8 	ld.w	r8,r7[-56]
8001fefc:	90 08       	ld.sh	r8,r8[0x0]
8001fefe:	ec f9 01 20 	ld.w	r9,r6[288]
8001ff02:	b2 08       	st.h	r9[0x0],r8
	
	// Set nav waypoint
	waypoint.autocontinue = 1;
8001ff04:	30 18       	mov	r8,1
8001ff06:	ef 68 ff d5 	st.b	r7[-43],r8
	waypoint.current = 1;
8001ff0a:	30 18       	mov	r8,1
8001ff0c:	ef 68 ff d4 	st.b	r7[-44],r8
	waypoint.frame = MAV_FRAME_GLOBAL_RELATIVE_ALT;
8001ff10:	30 38       	mov	r8,3
8001ff12:	ef 68 ff d0 	st.b	r7[-48],r8
	waypoint.wp_id = MAV_CMD_NAV_WAYPOINT;
8001ff16:	31 08       	mov	r8,16
8001ff18:	ef 58 ff d2 	st.h	r7[-46],r8
	
	waypoint.x =  465185223.6174 / 1.0e7f; // convert to deg
8001ff1c:	e0 68 f5 80 	mov	r8,62848
8001ff20:	ea 18 f0 d4 	orh	r8,0xf0d4
8001ff24:	e0 69 42 5e 	mov	r9,16990
8001ff28:	ea 19 40 47 	orh	r9,0x4047
8001ff2c:	ee e9 ff e8 	st.d	r7[-24],r8
	waypoint.y = 65670560 / 1.0e7f; // convert to deg
8001ff30:	fc 18 60 00 	movh	r8,0x6000
8001ff34:	e0 69 44 aa 	mov	r9,17578
8001ff38:	ea 19 40 1a 	orh	r9,0x401a
8001ff3c:	ee e9 ff f0 	st.d	r7[-16],r8
	waypoint.z = 20; //m
8001ff40:	30 08       	mov	r8,0
8001ff42:	fc 19 40 34 	movh	r9,0x4034
8001ff46:	ee e9 ff f8 	st.d	r7[-8],r8
	
	waypoint.param1 = 10; // Hold time in decimal seconds
8001ff4a:	fc 18 41 20 	movh	r8,0x4120
8001ff4e:	ef 48 ff d8 	st.w	r7[-40],r8
	waypoint.param2 = 2; // Acceptance radius in meters
8001ff52:	fc 18 40 00 	movh	r8,0x4000
8001ff56:	ef 48 ff dc 	st.w	r7[-36],r8
	waypoint.param3 = 0; //  0 to pass through the WP, if > 0 radius in meters to pass by WP. Positive value for clockwise orbit, negative value for counter-clockwise orbit. Allows trajectory control.
8001ff5a:	30 08       	mov	r8,0
8001ff5c:	ef 48 ff e0 	st.w	r7[-32],r8
	waypoint.param4 = 90; // Desired yaw angle at MISSION (rotary wing)
8001ff60:	fc 18 42 b4 	movh	r8,0x42b4
8001ff64:	ef 48 ff e4 	st.w	r7[-28],r8
	
	waypoint_list[0] = waypoint;
8001ff68:	ee f8 ff cc 	ld.w	r8,r7[-52]
8001ff6c:	10 9b       	mov	r11,r8
8001ff6e:	ee ca 00 30 	sub	r10,r7,48
8001ff72:	f6 c8 00 00 	sub	r8,r11,0
8001ff76:	f4 c9 00 00 	sub	r9,r10,0
8001ff7a:	72 0c       	ld.w	r12,r9[0x0]
8001ff7c:	91 0c       	st.w	r8[0x0],r12
8001ff7e:	72 1c       	ld.w	r12,r9[0x4]
8001ff80:	91 1c       	st.w	r8[0x4],r12
8001ff82:	72 2c       	ld.w	r12,r9[0x8]
8001ff84:	91 2c       	st.w	r8[0x8],r12
8001ff86:	72 39       	ld.w	r9,r9[0xc]
8001ff88:	91 39       	st.w	r8[0xc],r9
8001ff8a:	f6 c8 ff f0 	sub	r8,r11,-16
8001ff8e:	f4 c9 ff f0 	sub	r9,r10,-16
8001ff92:	72 0c       	ld.w	r12,r9[0x0]
8001ff94:	91 0c       	st.w	r8[0x0],r12
8001ff96:	72 1c       	ld.w	r12,r9[0x4]
8001ff98:	91 1c       	st.w	r8[0x4],r12
8001ff9a:	72 2c       	ld.w	r12,r9[0x8]
8001ff9c:	91 2c       	st.w	r8[0x8],r12
8001ff9e:	72 39       	ld.w	r9,r9[0xc]
8001ffa0:	91 39       	st.w	r8[0xc],r9
8001ffa2:	f6 c8 ff e0 	sub	r8,r11,-32
8001ffa6:	f4 c9 ff e0 	sub	r9,r10,-32
8001ffaa:	72 0a       	ld.w	r10,r9[0x0]
8001ffac:	91 0a       	st.w	r8[0x0],r10
8001ffae:	72 1a       	ld.w	r10,r9[0x4]
8001ffb0:	91 1a       	st.w	r8[0x4],r10
8001ffb2:	72 2a       	ld.w	r10,r9[0x8]
8001ffb4:	91 2a       	st.w	r8[0x8],r10
8001ffb6:	72 39       	ld.w	r9,r9[0xc]
8001ffb8:	91 39       	st.w	r8[0xc],r9
	
	// Set nav waypoint
	waypoint.autocontinue = 1;
8001ffba:	30 18       	mov	r8,1
8001ffbc:	ef 68 ff d5 	st.b	r7[-43],r8
	waypoint.current = 0;
8001ffc0:	30 08       	mov	r8,0
8001ffc2:	ef 68 ff d4 	st.b	r7[-44],r8
	waypoint.frame = MAV_FRAME_GLOBAL_RELATIVE_ALT;
8001ffc6:	30 38       	mov	r8,3
8001ffc8:	ef 68 ff d0 	st.b	r7[-48],r8
	waypoint.wp_id = MAV_CMD_NAV_WAYPOINT;
8001ffcc:	31 08       	mov	r8,16
8001ffce:	ef 58 ff d2 	st.h	r7[-46],r8
	
	waypoint.x = 465186816 / 1.0e7f; // convert to deg
8001ffd2:	fc 18 20 00 	movh	r8,0x2000
8001ffd6:	e0 69 42 64 	mov	r9,16996
8001ffda:	ea 19 40 47 	orh	r9,0x4047
8001ffde:	ee e9 ff e8 	st.d	r7[-24],r8
	waypoint.y = 65670560 / 1.0e7f; // convert to deg
8001ffe2:	fc 18 60 00 	movh	r8,0x6000
8001ffe6:	e0 69 44 aa 	mov	r9,17578
8001ffea:	ea 19 40 1a 	orh	r9,0x401a
8001ffee:	ee e9 ff f0 	st.d	r7[-16],r8
	waypoint.z = 20; //m
8001fff2:	30 08       	mov	r8,0
8001fff4:	fc 19 40 34 	movh	r9,0x4034
8001fff8:	ee e9 ff f8 	st.d	r7[-8],r8
	
	waypoint.param1 = 10; // Hold time in decimal seconds
8001fffc:	fc 18 41 20 	movh	r8,0x4120
80020000:	ef 48 ff d8 	st.w	r7[-40],r8
	waypoint.param2 = 4; // Acceptance radius in meters
80020004:	fc 18 40 80 	movh	r8,0x4080
80020008:	ef 48 ff dc 	st.w	r7[-36],r8
	waypoint.param3 = 0; //  0 to pass through the WP, if > 0 radius in meters to pass by WP. Positive value for clockwise orbit, negative value for counter-clockwise orbit. Allows trajectory control.
8002000c:	30 08       	mov	r8,0
8002000e:	ef 48 ff e0 	st.w	r7[-32],r8
	waypoint.param4 = 90; // Desired yaw angle at MISSION (rotary wing)
80020012:	fc 18 42 b4 	movh	r8,0x42b4
80020016:	ef 48 ff e4 	st.w	r7[-28],r8
	
	waypoint_list[1] = waypoint;
8002001a:	ee f8 ff cc 	ld.w	r8,r7[-52]
8002001e:	2d 08       	sub	r8,-48
80020020:	10 9b       	mov	r11,r8
80020022:	ee ca 00 30 	sub	r10,r7,48
80020026:	f6 c8 00 00 	sub	r8,r11,0
8002002a:	f4 c9 00 00 	sub	r9,r10,0
8002002e:	72 0c       	ld.w	r12,r9[0x0]
80020030:	91 0c       	st.w	r8[0x0],r12
80020032:	72 1c       	ld.w	r12,r9[0x4]
80020034:	91 1c       	st.w	r8[0x4],r12
80020036:	72 2c       	ld.w	r12,r9[0x8]
80020038:	91 2c       	st.w	r8[0x8],r12
8002003a:	72 39       	ld.w	r9,r9[0xc]
8002003c:	91 39       	st.w	r8[0xc],r9
8002003e:	f6 c8 ff f0 	sub	r8,r11,-16
80020042:	f4 c9 ff f0 	sub	r9,r10,-16
80020046:	72 0c       	ld.w	r12,r9[0x0]
80020048:	91 0c       	st.w	r8[0x0],r12
8002004a:	72 1c       	ld.w	r12,r9[0x4]
8002004c:	91 1c       	st.w	r8[0x4],r12
8002004e:	72 2c       	ld.w	r12,r9[0x8]
80020050:	91 2c       	st.w	r8[0x8],r12
80020052:	72 39       	ld.w	r9,r9[0xc]
80020054:	91 39       	st.w	r8[0xc],r9
80020056:	f6 c8 ff e0 	sub	r8,r11,-32
8002005a:	f4 c9 ff e0 	sub	r9,r10,-32
8002005e:	72 0a       	ld.w	r10,r9[0x0]
80020060:	91 0a       	st.w	r8[0x0],r10
80020062:	72 1a       	ld.w	r10,r9[0x4]
80020064:	91 1a       	st.w	r8[0x4],r10
80020066:	72 2a       	ld.w	r10,r9[0x8]
80020068:	91 2a       	st.w	r8[0x8],r10
8002006a:	72 39       	ld.w	r9,r9[0xc]
8002006c:	91 39       	st.w	r8[0xc],r9
	
	// Set nav waypoint
	waypoint.autocontinue = 1;
8002006e:	30 18       	mov	r8,1
80020070:	ef 68 ff d5 	st.b	r7[-43],r8
	waypoint.current = 0;
80020074:	30 08       	mov	r8,0
80020076:	ef 68 ff d4 	st.b	r7[-44],r8
	waypoint.frame = MAV_FRAME_GLOBAL_RELATIVE_ALT;
8002007a:	30 38       	mov	r8,3
8002007c:	ef 68 ff d0 	st.b	r7[-48],r8
	waypoint.wp_id = MAV_CMD_NAV_WAYPOINT;
80020080:	31 08       	mov	r8,16
80020082:	ef 58 ff d2 	st.h	r7[-46],r8
	
	waypoint.x = 465186816 / 1.0e7f; // convert to deg
80020086:	fc 18 20 00 	movh	r8,0x2000
8002008a:	e0 69 42 64 	mov	r9,16996
8002008e:	ea 19 40 47 	orh	r9,0x4047
80020092:	ee e9 ff e8 	st.d	r7[-24],r8
	waypoint.y = 65659084 / 1.0e7f; // convert to deg
80020096:	fc 18 80 00 	movh	r8,0x8000
8002009a:	e0 69 43 7d 	mov	r9,17277
8002009e:	ea 19 40 1a 	orh	r9,0x401a
800200a2:	ee e9 ff f0 	st.d	r7[-16],r8
	waypoint.z = 40; //m
800200a6:	30 08       	mov	r8,0
800200a8:	fc 19 40 44 	movh	r9,0x4044
800200ac:	ee e9 ff f8 	st.d	r7[-8],r8
	
	waypoint.param1 = 10; // Hold time in decimal seconds
800200b0:	fc 18 41 20 	movh	r8,0x4120
800200b4:	ef 48 ff d8 	st.w	r7[-40],r8
	waypoint.param2 = 15; // Acceptance radius in meters
800200b8:	fc 18 41 70 	movh	r8,0x4170
800200bc:	ef 48 ff dc 	st.w	r7[-36],r8
	waypoint.param3 = 0; //  0 to pass through the WP, if > 0 radius in meters to pass by WP. Positive value for clockwise orbit, negative value for counter-clockwise orbit. Allows trajectory control.
800200c0:	30 08       	mov	r8,0
800200c2:	ef 48 ff e0 	st.w	r7[-32],r8
	waypoint.param4 = 90; // Desired yaw angle at MISSION (rotary wing)
800200c6:	fc 18 42 b4 	movh	r8,0x42b4
800200ca:	ef 48 ff e4 	st.w	r7[-28],r8
	
	waypoint_list[2] = waypoint;
800200ce:	ee f8 ff cc 	ld.w	r8,r7[-52]
800200d2:	2a 08       	sub	r8,-96
800200d4:	10 9b       	mov	r11,r8
800200d6:	ee ca 00 30 	sub	r10,r7,48
800200da:	f6 c8 00 00 	sub	r8,r11,0
800200de:	f4 c9 00 00 	sub	r9,r10,0
800200e2:	72 0c       	ld.w	r12,r9[0x0]
800200e4:	91 0c       	st.w	r8[0x0],r12
800200e6:	72 1c       	ld.w	r12,r9[0x4]
800200e8:	91 1c       	st.w	r8[0x4],r12
800200ea:	72 2c       	ld.w	r12,r9[0x8]
800200ec:	91 2c       	st.w	r8[0x8],r12
800200ee:	72 39       	ld.w	r9,r9[0xc]
800200f0:	91 39       	st.w	r8[0xc],r9
800200f2:	f6 c8 ff f0 	sub	r8,r11,-16
800200f6:	f4 c9 ff f0 	sub	r9,r10,-16
800200fa:	72 0c       	ld.w	r12,r9[0x0]
800200fc:	91 0c       	st.w	r8[0x0],r12
800200fe:	72 1c       	ld.w	r12,r9[0x4]
80020100:	91 1c       	st.w	r8[0x4],r12
80020102:	72 2c       	ld.w	r12,r9[0x8]
80020104:	91 2c       	st.w	r8[0x8],r12
80020106:	72 39       	ld.w	r9,r9[0xc]
80020108:	91 39       	st.w	r8[0xc],r9
8002010a:	f6 c8 ff e0 	sub	r8,r11,-32
8002010e:	f4 c9 ff e0 	sub	r9,r10,-32
80020112:	72 0a       	ld.w	r10,r9[0x0]
80020114:	91 0a       	st.w	r8[0x0],r10
80020116:	72 1a       	ld.w	r10,r9[0x4]
80020118:	91 1a       	st.w	r8[0x4],r10
8002011a:	72 2a       	ld.w	r10,r9[0x8]
8002011c:	91 2a       	st.w	r8[0x8],r10
8002011e:	72 39       	ld.w	r9,r9[0xc]
80020120:	91 39       	st.w	r8[0xc],r9
	
	// Set nav waypoint
	waypoint.autocontinue = 1;
80020122:	30 18       	mov	r8,1
80020124:	ef 68 ff d5 	st.b	r7[-43],r8
	waypoint.current = 0;
80020128:	30 08       	mov	r8,0
8002012a:	ef 68 ff d4 	st.b	r7[-44],r8
	waypoint.frame = MAV_FRAME_GLOBAL_RELATIVE_ALT;
8002012e:	30 38       	mov	r8,3
80020130:	ef 68 ff d0 	st.b	r7[-48],r8
	waypoint.wp_id = MAV_CMD_NAV_WAYPOINT;
80020134:	31 08       	mov	r8,16
80020136:	ef 58 ff d2 	st.h	r7[-46],r8

	waypoint.x = 465182186 / 1.0e7f; // convert to deg
8002013a:	30 08       	mov	r8,0
8002013c:	e0 69 42 55 	mov	r9,16981
80020140:	ea 19 40 47 	orh	r9,0x4047
80020144:	ee e9 ff e8 	st.d	r7[-24],r8
	waypoint.y = 65659084 / 1.0e7f; // convert to deg
80020148:	fc 18 80 00 	movh	r8,0x8000
8002014c:	e0 69 43 7d 	mov	r9,17277
80020150:	ea 19 40 1a 	orh	r9,0x401a
80020154:	ee e9 ff f0 	st.d	r7[-16],r8
	waypoint.z = 20; //m
80020158:	30 08       	mov	r8,0
8002015a:	fc 19 40 34 	movh	r9,0x4034
8002015e:	ee e9 ff f8 	st.d	r7[-8],r8

	waypoint.param1 = 10; // Hold time in decimal seconds
80020162:	fc 18 41 20 	movh	r8,0x4120
80020166:	ef 48 ff d8 	st.w	r7[-40],r8
	waypoint.param2 = 12; // Acceptance radius in meters
8002016a:	fc 18 41 40 	movh	r8,0x4140
8002016e:	ef 48 ff dc 	st.w	r7[-36],r8
	waypoint.param3 = 0; //  0 to pass through the WP, if > 0 radius in meters to pass by WP. Positive value for clockwise orbit, negative value for counter-clockwise orbit. Allows trajectory control.
80020172:	30 08       	mov	r8,0
80020174:	ef 48 ff e0 	st.w	r7[-32],r8
	waypoint.param4 = 90; // Desired yaw angle at MISSION (rotary wing)
80020178:	fc 18 42 b4 	movh	r8,0x42b4
8002017c:	ef 48 ff e4 	st.w	r7[-28],r8

	waypoint_list[3] = waypoint;
80020180:	ee f8 ff cc 	ld.w	r8,r7[-52]
80020184:	f0 c8 ff 70 	sub	r8,r8,-144
80020188:	10 9b       	mov	r11,r8
8002018a:	ee ca 00 30 	sub	r10,r7,48
8002018e:	f6 c8 00 00 	sub	r8,r11,0
80020192:	f4 c9 00 00 	sub	r9,r10,0
80020196:	72 0c       	ld.w	r12,r9[0x0]
80020198:	91 0c       	st.w	r8[0x0],r12
8002019a:	72 1c       	ld.w	r12,r9[0x4]
8002019c:	91 1c       	st.w	r8[0x4],r12
8002019e:	72 2c       	ld.w	r12,r9[0x8]
800201a0:	91 2c       	st.w	r8[0x8],r12
800201a2:	72 39       	ld.w	r9,r9[0xc]
800201a4:	91 39       	st.w	r8[0xc],r9
800201a6:	f6 c8 ff f0 	sub	r8,r11,-16
800201aa:	f4 c9 ff f0 	sub	r9,r10,-16
800201ae:	72 0c       	ld.w	r12,r9[0x0]
800201b0:	91 0c       	st.w	r8[0x0],r12
800201b2:	72 1c       	ld.w	r12,r9[0x4]
800201b4:	91 1c       	st.w	r8[0x4],r12
800201b6:	72 2c       	ld.w	r12,r9[0x8]
800201b8:	91 2c       	st.w	r8[0x8],r12
800201ba:	72 39       	ld.w	r9,r9[0xc]
800201bc:	91 39       	st.w	r8[0xc],r9
800201be:	f6 c8 ff e0 	sub	r8,r11,-32
800201c2:	f4 c9 ff e0 	sub	r9,r10,-32
800201c6:	72 0a       	ld.w	r10,r9[0x0]
800201c8:	91 0a       	st.w	r8[0x0],r10
800201ca:	72 1a       	ld.w	r10,r9[0x4]
800201cc:	91 1a       	st.w	r8[0x4],r10
800201ce:	72 2a       	ld.w	r10,r9[0x8]
800201d0:	91 2a       	st.w	r8[0x8],r10
800201d2:	72 39       	ld.w	r9,r9[0xc]
800201d4:	91 39       	st.w	r8[0xc],r9
	//waypoint.param3 = 465186806 / 1.0e7f; // lat converted to deg
	//waypoint.param4 = 65659084 / 1.0e7f; // long converted to deg
	
	//waypoint_list[4] = waypoint;
	
	dbg_print("Number of Waypoint onboard:");
800201d6:	fe cc 03 1a 	sub	r12,pc,794
800201da:	f0 16 00 01 	mcall	r6[4]
	dbg_print_num(num_waypoint_onboard,10);
800201de:	ec f8 01 20 	ld.w	r8,r6[288]
800201e2:	90 08       	ld.sh	r8,r8[0x0]
800201e4:	5c 78       	castu.h	r8
800201e6:	30 ab       	mov	r11,10
800201e8:	10 9c       	mov	r12,r8
800201ea:	f0 16 00 04 	mcall	r6[16]
	dbg_print("\n");
800201ee:	fe cc 03 16 	sub	r12,pc,790
800201f2:	f0 16 00 01 	mcall	r6[4]
	
}
800201f6:	2f 2d       	sub	sp,-56
800201f8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800201fc:	80 01       	ld.sh	r1,r0[0x0]
800201fe:	fd 6a 57 69 	st.b	lr[22377],r10
80020202:	6c 6c       	ld.w	r12,r6[0x18]
80020204:	20 73       	sub	r3,7
80020206:	65 6e       	ld.w	lr,r2[0x58]
80020208:	64 20       	ld.w	r0,r2[0x8]
8002020a:	00 00       	add	r0,r0
8002020c:	20 77       	sub	r7,7
8002020e:	61 79       	ld.w	r9,r0[0x5c]
80020210:	70 6f       	ld.w	pc,r8[0x18]
80020212:	69 6e       	ld.w	lr,r4[0x58]
80020214:	74 73       	ld.w	r3,r10[0x1c]
80020216:	0a 00       	add	r0,r5

80020218 <send_count>:

void send_count(Mavlink_Received_t* rec, uint16_t num_of_waypoint, bool* waypoint_receiving, bool * waypoint_sending)
{
80020218:	eb cd 40 c0 	pushm	r6-r7,lr
8002021c:	1a 97       	mov	r7,sp
8002021e:	20 5d       	sub	sp,20
80020220:	4a d6       	lddpc	r6,800202d4 <send_count+0xbc>
80020222:	1e 26       	rsub	r6,pc
80020224:	ef 4c ff f8 	st.w	r7[-8],r12
80020228:	16 98       	mov	r8,r11
8002022a:	ef 4a ff f0 	st.w	r7[-16],r10
8002022e:	ef 49 ff ec 	st.w	r7[-20],r9
80020232:	ef 58 ff f4 	st.h	r7[-12],r8
	mavlink_mission_request_list_t packet;
	mavlink_msg_mission_request_list_decode(&rec->msg,&packet);
80020236:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002023a:	ee c9 00 02 	sub	r9,r7,2
8002023e:	12 9b       	mov	r11,r9
80020240:	10 9c       	mov	r12,r8
80020242:	fe b0 fa 44 	rcall	8001f6ca <mavlink_msg_mission_request_list_decode>
	
	// Check if this message is for this system and subsystem
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_mission_planner.sysid
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
80020246:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8002024a:	ec f8 00 c4 	ld.w	r8,r6[196]
8002024e:	11 88       	ld.ub	r8,r8[0x0]
{
	mavlink_mission_request_list_t packet;
	mavlink_msg_mission_request_list_decode(&rec->msg,&packet);
	
	// Check if this message is for this system and subsystem
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_mission_planner.sysid
80020250:	f0 09 18 00 	cp.b	r9,r8
80020254:	c3 c1       	brne	800202cc <send_count+0xb4>
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
80020256:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8002025a:	ec f8 00 c4 	ld.w	r8,r6[196]
8002025e:	11 98       	ld.ub	r8,r8[0x1]
{
	mavlink_mission_request_list_t packet;
	mavlink_msg_mission_request_list_decode(&rec->msg,&packet);
	
	// Check if this message is for this system and subsystem
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_mission_planner.sysid
80020260:	f0 09 18 00 	cp.b	r9,r8
80020264:	c3 41       	brne	800202cc <send_count+0xb4>
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
	{	
		mavlink_msg_mission_count_send(MAVLINK_COMM_0,rec->msg.sysid,rec->msg.compid,num_of_waypoint);
80020266:	ef 19 ff f4 	ld.uh	r9,r7[-12]
8002026a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002026e:	11 e8       	ld.ub	r8,r8[0x6]
80020270:	10 9a       	mov	r10,r8
80020272:	ee f8 ff f8 	ld.w	r8,r7[-8]
80020276:	11 d8       	ld.ub	r8,r8[0x5]
80020278:	10 9b       	mov	r11,r8
8002027a:	30 0c       	mov	r12,0
8002027c:	fe b0 fa 44 	rcall	8001f704 <mavlink_msg_mission_count_send>
		
		if (num_of_waypoint != 0)
80020280:	ef 09 ff f4 	ld.sh	r9,r7[-12]
80020284:	30 08       	mov	r8,0
80020286:	f0 09 19 00 	cp.h	r9,r8
8002028a:	c0 f0       	breq	800202a8 <send_count+0x90>
		{
			*waypoint_sending = true;
8002028c:	ee f9 ff ec 	ld.w	r9,r7[-20]
80020290:	30 18       	mov	r8,1
80020292:	b2 88       	st.b	r9[0x0],r8
			*waypoint_receiving = false;
80020294:	ee f9 ff f0 	ld.w	r9,r7[-16]
80020298:	30 08       	mov	r8,0
8002029a:	b2 88       	st.b	r9[0x0],r8
			start_timeout = get_millis();
8002029c:	f0 16 00 0f 	mcall	r6[60]
800202a0:	18 99       	mov	r9,r12
800202a2:	ec f8 01 64 	ld.w	r8,r6[356]
800202a6:	91 09       	st.w	r8[0x0],r9
		}
		
		sending_wp_num = 0;
800202a8:	ec f8 00 a8 	ld.w	r8,r6[168]
800202ac:	30 09       	mov	r9,0
800202ae:	91 09       	st.w	r8[0x0],r9
		dbg_print("Will send ");
800202b0:	fe cc 00 b0 	sub	r12,pc,176
800202b4:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(num_of_waypoint,10);
800202b8:	ef 18 ff f4 	ld.uh	r8,r7[-12]
800202bc:	30 ab       	mov	r11,10
800202be:	10 9c       	mov	r12,r8
800202c0:	f0 16 00 04 	mcall	r6[16]
		dbg_print(" waypoints\n");
800202c4:	fe cc 00 b8 	sub	r12,pc,184
800202c8:	f0 16 00 01 	mcall	r6[4]
	}
}
800202cc:	2f bd       	sub	sp,-20
800202ce:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800202d2:	00 00       	add	r0,r0
800202d4:	80 02       	ld.sh	r2,r0[0x0]
800202d6:	00 a6       	st.w	r0++,r6
800202d8:	41 73       	lddsp	r3,sp[0x5c]
800202da:	6b 69       	ld.w	r9,r5[0x58]
800202dc:	6e 67       	ld.w	r7,r7[0x18]
800202de:	20 66       	sub	r6,6
800202e0:	6f 72       	ld.w	r2,r7[0x5c]
800202e2:	20 77       	sub	r7,7
800202e4:	61 79       	ld.w	r9,r0[0x5c]
800202e6:	70 6f       	ld.w	pc,r8[0x18]
800202e8:	69 6e       	ld.w	lr,r4[0x58]
800202ea:	74 20       	ld.w	r0,r10[0x8]
800202ec:	6e 75       	ld.w	r5,r7[0x1c]
800202ee:	6d 62       	ld.w	r2,r6[0x58]
800202f0:	65 72       	ld.w	r2,r2[0x5c]
800202f2:	20 00       	sub	r0,0
800202f4:	53 65       	stdsp	sp[0xd8],r5
800202f6:	6e 64       	ld.w	r4,r7[0x18]
800202f8:	69 6e       	ld.w	lr,r4[0x58]
800202fa:	67 20       	ld.w	r0,r3[0x48]
800202fc:	77 61       	ld.w	r1,r11[0x58]
800202fe:	79 70       	ld.w	r0,r12[0x5c]
80020300:	6f 69       	ld.w	r9,r7[0x58]
80020302:	6e 74       	ld.w	r4,r7[0x1c]
80020304:	20 00       	sub	r0,0

80020306 <send_waypoint>:

void send_waypoint(Mavlink_Received_t* rec, waypoint_struct waypoint[], uint16_t num_of_waypoint, bool* waypoint_sending)
{
80020306:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
8002030a:	1a 97       	mov	r7,sp
8002030c:	20 9d       	sub	sp,36
8002030e:	fe f6 02 62 	ld.w	r6,pc[610]
80020312:	1e 26       	rsub	r6,pc
80020314:	ef 4c ff f8 	st.w	r7[-8],r12
80020318:	ef 4b ff f4 	st.w	r7[-12],r11
8002031c:	14 98       	mov	r8,r10
8002031e:	ef 49 ff ec 	st.w	r7[-20],r9
80020322:	ef 58 ff f0 	st.h	r7[-16],r8
	if (*waypoint_sending)
80020326:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002032a:	11 88       	ld.ub	r8,r8[0x0]
8002032c:	58 08       	cp.w	r8,0
8002032e:	e0 80 01 1e 	breq	8002056a <send_waypoint+0x264>
	{
		mavlink_mission_request_t packet;
		mavlink_msg_mission_request_decode(&rec->msg,&packet);
80020332:	ee f8 ff f8 	ld.w	r8,r7[-8]
80020336:	ee c9 00 04 	sub	r9,r7,4
8002033a:	12 9b       	mov	r11,r9
8002033c:	10 9c       	mov	r12,r8
8002033e:	fe b0 f9 07 	rcall	8001f54c <mavlink_msg_mission_request_decode>
		
		dbg_print("Asking for waypoint number ");
80020342:	fe cc 00 6a 	sub	r12,pc,106
80020346:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(packet.seq,10);
8002034a:	ef 08 ff fc 	ld.sh	r8,r7[-4]
8002034e:	5c 78       	castu.h	r8
80020350:	30 ab       	mov	r11,10
80020352:	10 9c       	mov	r12,r8
80020354:	f0 16 00 04 	mcall	r6[16]
		dbg_print("\n");
80020358:	fe cc 04 80 	sub	r12,pc,1152
8002035c:	f0 16 00 01 	mcall	r6[4]
		
		// Check if this message is for this system and subsystem
		if ((uint8_t)packet.target_system == (uint8_t)mavlink_mission_planner.sysid
		&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
80020360:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80020364:	ec f8 00 c4 	ld.w	r8,r6[196]
80020368:	11 88       	ld.ub	r8,r8[0x0]
		dbg_print("Asking for waypoint number ");
		dbg_print_num(packet.seq,10);
		dbg_print("\n");
		
		// Check if this message is for this system and subsystem
		if ((uint8_t)packet.target_system == (uint8_t)mavlink_mission_planner.sysid
8002036a:	f0 09 18 00 	cp.b	r9,r8
8002036e:	e0 81 00 fe 	brne	8002056a <send_waypoint+0x264>
		&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
80020372:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80020376:	ec f8 00 c4 	ld.w	r8,r6[196]
8002037a:	11 98       	ld.ub	r8,r8[0x1]
		dbg_print("Asking for waypoint number ");
		dbg_print_num(packet.seq,10);
		dbg_print("\n");
		
		// Check if this message is for this system and subsystem
		if ((uint8_t)packet.target_system == (uint8_t)mavlink_mission_planner.sysid
8002037c:	f0 09 18 00 	cp.b	r9,r8
80020380:	e0 81 00 f5 	brne	8002056a <send_waypoint+0x264>
		&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
		{
			sending_wp_num = packet.seq;
80020384:	ef 08 ff fc 	ld.sh	r8,r7[-4]
80020388:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
8002038c:	ec f8 00 a8 	ld.w	r8,r6[168]
80020390:	91 09       	st.w	r8[0x0],r9
			if (sending_wp_num < num_of_waypoint)
80020392:	ef 19 ff f0 	ld.uh	r9,r7[-16]
80020396:	ec f8 00 a8 	ld.w	r8,r6[168]
8002039a:	70 08       	ld.w	r8,r8[0x0]
8002039c:	10 39       	cp.w	r9,r8
8002039e:	e0 8a 00 e6 	brle	8002056a <send_waypoint+0x264>
				// mavlink_msg_mission_item_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t seq, uint8_t frame, uint16_t command, uint8_t current, uint8_t autocontinue, float param1, float param2, float param3, float param4, float x, float y, float z)
				mavlink_msg_mission_item_send(MAVLINK_COMM_0, rec->msg.sysid, rec->msg.compid, packet.seq,
				waypoint[sending_wp_num].frame,   waypoint[sending_wp_num].wp_id,
				waypoint[sending_wp_num].current, waypoint[sending_wp_num].autocontinue,
				waypoint[sending_wp_num].param1,  waypoint[sending_wp_num].param2,       waypoint[sending_wp_num].param3,    waypoint[sending_wp_num].param4,
				waypoint[sending_wp_num].x,       waypoint[sending_wp_num].y,            waypoint[sending_wp_num].z);
800203a2:	ec f8 00 a8 	ld.w	r8,r6[168]
800203a6:	70 08       	ld.w	r8,r8[0x0]
800203a8:	10 99       	mov	r9,r8
800203aa:	12 98       	mov	r8,r9
800203ac:	a1 78       	lsl	r8,0x1
800203ae:	12 08       	add	r8,r9
800203b0:	a5 68       	lsl	r8,0x4
800203b2:	ee f9 ff f4 	ld.w	r9,r7[-12]
800203b6:	f2 08 00 08 	add	r8,r9,r8
800203ba:	f0 e8 00 28 	ld.d	r8,r8[40]
		{
			sending_wp_num = packet.seq;
			if (sending_wp_num < num_of_waypoint)
			{
				// mavlink_msg_mission_item_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t seq, uint8_t frame, uint16_t command, uint8_t current, uint8_t autocontinue, float param1, float param2, float param3, float param4, float x, float y, float z)
				mavlink_msg_mission_item_send(MAVLINK_COMM_0, rec->msg.sysid, rec->msg.compid, packet.seq,
800203be:	10 9a       	mov	r10,r8
800203c0:	12 9b       	mov	r11,r9
800203c2:	f0 16 00 09 	mcall	r6[36]
800203c6:	18 95       	mov	r5,r12
				waypoint[sending_wp_num].frame,   waypoint[sending_wp_num].wp_id,
				waypoint[sending_wp_num].current, waypoint[sending_wp_num].autocontinue,
				waypoint[sending_wp_num].param1,  waypoint[sending_wp_num].param2,       waypoint[sending_wp_num].param3,    waypoint[sending_wp_num].param4,
				waypoint[sending_wp_num].x,       waypoint[sending_wp_num].y,            waypoint[sending_wp_num].z);
800203c8:	ec f8 00 a8 	ld.w	r8,r6[168]
800203cc:	70 08       	ld.w	r8,r8[0x0]
800203ce:	10 99       	mov	r9,r8
800203d0:	12 98       	mov	r8,r9
800203d2:	a1 78       	lsl	r8,0x1
800203d4:	12 08       	add	r8,r9
800203d6:	a5 68       	lsl	r8,0x4
800203d8:	ee f9 ff f4 	ld.w	r9,r7[-12]
800203dc:	f2 08 00 08 	add	r8,r9,r8
800203e0:	f0 e8 00 20 	ld.d	r8,r8[32]
		{
			sending_wp_num = packet.seq;
			if (sending_wp_num < num_of_waypoint)
			{
				// mavlink_msg_mission_item_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t seq, uint8_t frame, uint16_t command, uint8_t current, uint8_t autocontinue, float param1, float param2, float param3, float param4, float x, float y, float z)
				mavlink_msg_mission_item_send(MAVLINK_COMM_0, rec->msg.sysid, rec->msg.compid, packet.seq,
800203e4:	10 9a       	mov	r10,r8
800203e6:	12 9b       	mov	r11,r9
800203e8:	f0 16 00 09 	mcall	r6[36]
800203ec:	ef 4c ff dc 	st.w	r7[-36],r12
				waypoint[sending_wp_num].frame,   waypoint[sending_wp_num].wp_id,
				waypoint[sending_wp_num].current, waypoint[sending_wp_num].autocontinue,
				waypoint[sending_wp_num].param1,  waypoint[sending_wp_num].param2,       waypoint[sending_wp_num].param3,    waypoint[sending_wp_num].param4,
				waypoint[sending_wp_num].x,       waypoint[sending_wp_num].y,            waypoint[sending_wp_num].z);
800203f0:	ec f8 00 a8 	ld.w	r8,r6[168]
800203f4:	70 08       	ld.w	r8,r8[0x0]
800203f6:	10 99       	mov	r9,r8
800203f8:	12 98       	mov	r8,r9
800203fa:	a1 78       	lsl	r8,0x1
800203fc:	12 08       	add	r8,r9
800203fe:	a5 68       	lsl	r8,0x4
80020400:	ee f9 ff f4 	ld.w	r9,r7[-12]
80020404:	f2 08 00 08 	add	r8,r9,r8
80020408:	f0 e8 00 18 	ld.d	r8,r8[24]
		{
			sending_wp_num = packet.seq;
			if (sending_wp_num < num_of_waypoint)
			{
				// mavlink_msg_mission_item_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t seq, uint8_t frame, uint16_t command, uint8_t current, uint8_t autocontinue, float param1, float param2, float param3, float param4, float x, float y, float z)
				mavlink_msg_mission_item_send(MAVLINK_COMM_0, rec->msg.sysid, rec->msg.compid, packet.seq,
8002040c:	10 9a       	mov	r10,r8
8002040e:	12 9b       	mov	r11,r9
80020410:	f0 16 00 09 	mcall	r6[36]
80020414:	ef 4c ff e0 	st.w	r7[-32],r12
				waypoint[sending_wp_num].frame,   waypoint[sending_wp_num].wp_id,
				waypoint[sending_wp_num].current, waypoint[sending_wp_num].autocontinue,
				waypoint[sending_wp_num].param1,  waypoint[sending_wp_num].param2,       waypoint[sending_wp_num].param3,    waypoint[sending_wp_num].param4,
80020418:	ec f8 00 a8 	ld.w	r8,r6[168]
8002041c:	70 08       	ld.w	r8,r8[0x0]
8002041e:	10 99       	mov	r9,r8
80020420:	12 98       	mov	r8,r9
80020422:	a1 78       	lsl	r8,0x1
80020424:	12 08       	add	r8,r9
80020426:	a5 68       	lsl	r8,0x4
80020428:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002042c:	f2 08 00 08 	add	r8,r9,r8
		{
			sending_wp_num = packet.seq;
			if (sending_wp_num < num_of_waypoint)
			{
				// mavlink_msg_mission_item_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t seq, uint8_t frame, uint16_t command, uint8_t current, uint8_t autocontinue, float param1, float param2, float param3, float param4, float x, float y, float z)
				mavlink_msg_mission_item_send(MAVLINK_COMM_0, rec->msg.sysid, rec->msg.compid, packet.seq,
80020430:	70 58       	ld.w	r8,r8[0x14]
80020432:	ef 48 ff e4 	st.w	r7[-28],r8
				waypoint[sending_wp_num].frame,   waypoint[sending_wp_num].wp_id,
				waypoint[sending_wp_num].current, waypoint[sending_wp_num].autocontinue,
				waypoint[sending_wp_num].param1,  waypoint[sending_wp_num].param2,       waypoint[sending_wp_num].param3,    waypoint[sending_wp_num].param4,
80020436:	ec f8 00 a8 	ld.w	r8,r6[168]
8002043a:	70 08       	ld.w	r8,r8[0x0]
8002043c:	10 99       	mov	r9,r8
8002043e:	12 98       	mov	r8,r9
80020440:	a1 78       	lsl	r8,0x1
80020442:	12 08       	add	r8,r9
80020444:	a5 68       	lsl	r8,0x4
80020446:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002044a:	f2 08 00 08 	add	r8,r9,r8
		{
			sending_wp_num = packet.seq;
			if (sending_wp_num < num_of_waypoint)
			{
				// mavlink_msg_mission_item_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t seq, uint8_t frame, uint16_t command, uint8_t current, uint8_t autocontinue, float param1, float param2, float param3, float param4, float x, float y, float z)
				mavlink_msg_mission_item_send(MAVLINK_COMM_0, rec->msg.sysid, rec->msg.compid, packet.seq,
8002044e:	70 48       	ld.w	r8,r8[0x10]
80020450:	ef 48 ff e8 	st.w	r7[-24],r8
				waypoint[sending_wp_num].frame,   waypoint[sending_wp_num].wp_id,
				waypoint[sending_wp_num].current, waypoint[sending_wp_num].autocontinue,
				waypoint[sending_wp_num].param1,  waypoint[sending_wp_num].param2,       waypoint[sending_wp_num].param3,    waypoint[sending_wp_num].param4,
80020454:	ec f8 00 a8 	ld.w	r8,r6[168]
80020458:	70 08       	ld.w	r8,r8[0x0]
8002045a:	10 99       	mov	r9,r8
8002045c:	12 98       	mov	r8,r9
8002045e:	a1 78       	lsl	r8,0x1
80020460:	12 08       	add	r8,r9
80020462:	a5 68       	lsl	r8,0x4
80020464:	ee f9 ff f4 	ld.w	r9,r7[-12]
80020468:	f2 08 00 08 	add	r8,r9,r8
		{
			sending_wp_num = packet.seq;
			if (sending_wp_num < num_of_waypoint)
			{
				// mavlink_msg_mission_item_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t seq, uint8_t frame, uint16_t command, uint8_t current, uint8_t autocontinue, float param1, float param2, float param3, float param4, float x, float y, float z)
				mavlink_msg_mission_item_send(MAVLINK_COMM_0, rec->msg.sysid, rec->msg.compid, packet.seq,
8002046c:	70 30       	ld.w	r0,r8[0xc]
				waypoint[sending_wp_num].frame,   waypoint[sending_wp_num].wp_id,
				waypoint[sending_wp_num].current, waypoint[sending_wp_num].autocontinue,
				waypoint[sending_wp_num].param1,  waypoint[sending_wp_num].param2,       waypoint[sending_wp_num].param3,    waypoint[sending_wp_num].param4,
8002046e:	ec f8 00 a8 	ld.w	r8,r6[168]
80020472:	70 08       	ld.w	r8,r8[0x0]
80020474:	10 99       	mov	r9,r8
80020476:	12 98       	mov	r8,r9
80020478:	a1 78       	lsl	r8,0x1
8002047a:	12 08       	add	r8,r9
8002047c:	a5 68       	lsl	r8,0x4
8002047e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80020482:	f2 08 00 08 	add	r8,r9,r8
		{
			sending_wp_num = packet.seq;
			if (sending_wp_num < num_of_waypoint)
			{
				// mavlink_msg_mission_item_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t seq, uint8_t frame, uint16_t command, uint8_t current, uint8_t autocontinue, float param1, float param2, float param3, float param4, float x, float y, float z)
				mavlink_msg_mission_item_send(MAVLINK_COMM_0, rec->msg.sysid, rec->msg.compid, packet.seq,
80020486:	70 21       	ld.w	r1,r8[0x8]
				waypoint[sending_wp_num].frame,   waypoint[sending_wp_num].wp_id,
				waypoint[sending_wp_num].current, waypoint[sending_wp_num].autocontinue,
80020488:	ec f8 00 a8 	ld.w	r8,r6[168]
8002048c:	70 08       	ld.w	r8,r8[0x0]
8002048e:	10 99       	mov	r9,r8
80020490:	12 98       	mov	r8,r9
80020492:	a1 78       	lsl	r8,0x1
80020494:	12 08       	add	r8,r9
80020496:	a5 68       	lsl	r8,0x4
80020498:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002049c:	f2 08 00 08 	add	r8,r9,r8
800204a0:	11 d8       	ld.ub	r8,r8[0x5]
		{
			sending_wp_num = packet.seq;
			if (sending_wp_num < num_of_waypoint)
			{
				// mavlink_msg_mission_item_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t seq, uint8_t frame, uint16_t command, uint8_t current, uint8_t autocontinue, float param1, float param2, float param3, float param4, float x, float y, float z)
				mavlink_msg_mission_item_send(MAVLINK_COMM_0, rec->msg.sysid, rec->msg.compid, packet.seq,
800204a2:	10 92       	mov	r2,r8
				waypoint[sending_wp_num].frame,   waypoint[sending_wp_num].wp_id,
				waypoint[sending_wp_num].current, waypoint[sending_wp_num].autocontinue,
800204a4:	ec f8 00 a8 	ld.w	r8,r6[168]
800204a8:	70 08       	ld.w	r8,r8[0x0]
800204aa:	10 99       	mov	r9,r8
800204ac:	12 98       	mov	r8,r9
800204ae:	a1 78       	lsl	r8,0x1
800204b0:	12 08       	add	r8,r9
800204b2:	a5 68       	lsl	r8,0x4
800204b4:	ee f9 ff f4 	ld.w	r9,r7[-12]
800204b8:	f2 08 00 08 	add	r8,r9,r8
800204bc:	11 c8       	ld.ub	r8,r8[0x4]
		{
			sending_wp_num = packet.seq;
			if (sending_wp_num < num_of_waypoint)
			{
				// mavlink_msg_mission_item_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t seq, uint8_t frame, uint16_t command, uint8_t current, uint8_t autocontinue, float param1, float param2, float param3, float param4, float x, float y, float z)
				mavlink_msg_mission_item_send(MAVLINK_COMM_0, rec->msg.sysid, rec->msg.compid, packet.seq,
800204be:	10 93       	mov	r3,r8
				waypoint[sending_wp_num].frame,   waypoint[sending_wp_num].wp_id,
800204c0:	ec f8 00 a8 	ld.w	r8,r6[168]
800204c4:	70 08       	ld.w	r8,r8[0x0]
800204c6:	10 99       	mov	r9,r8
800204c8:	12 98       	mov	r8,r9
800204ca:	a1 78       	lsl	r8,0x1
800204cc:	12 08       	add	r8,r9
800204ce:	a5 68       	lsl	r8,0x4
800204d0:	ee f9 ff f4 	ld.w	r9,r7[-12]
800204d4:	f2 08 00 08 	add	r8,r9,r8
800204d8:	90 18       	ld.sh	r8,r8[0x2]
		{
			sending_wp_num = packet.seq;
			if (sending_wp_num < num_of_waypoint)
			{
				// mavlink_msg_mission_item_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t seq, uint8_t frame, uint16_t command, uint8_t current, uint8_t autocontinue, float param1, float param2, float param3, float param4, float x, float y, float z)
				mavlink_msg_mission_item_send(MAVLINK_COMM_0, rec->msg.sysid, rec->msg.compid, packet.seq,
800204da:	fd d8 c0 10 	bfextu	lr,r8,0x0,0x10
				waypoint[sending_wp_num].frame,   waypoint[sending_wp_num].wp_id,
800204de:	ec f8 00 a8 	ld.w	r8,r6[168]
800204e2:	70 08       	ld.w	r8,r8[0x0]
800204e4:	10 99       	mov	r9,r8
800204e6:	12 98       	mov	r8,r9
800204e8:	a1 78       	lsl	r8,0x1
800204ea:	12 08       	add	r8,r9
800204ec:	a5 68       	lsl	r8,0x4
800204ee:	ee f9 ff f4 	ld.w	r9,r7[-12]
800204f2:	f2 08 00 08 	add	r8,r9,r8
800204f6:	11 88       	ld.ub	r8,r8[0x0]
		{
			sending_wp_num = packet.seq;
			if (sending_wp_num < num_of_waypoint)
			{
				// mavlink_msg_mission_item_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t seq, uint8_t frame, uint16_t command, uint8_t current, uint8_t autocontinue, float param1, float param2, float param3, float param4, float x, float y, float z)
				mavlink_msg_mission_item_send(MAVLINK_COMM_0, rec->msg.sysid, rec->msg.compid, packet.seq,
800204f8:	10 9c       	mov	r12,r8
800204fa:	ef 08 ff fc 	ld.sh	r8,r7[-4]
800204fe:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
80020502:	ee f8 ff f8 	ld.w	r8,r7[-8]
80020506:	11 e8       	ld.ub	r8,r8[0x6]
80020508:	10 9a       	mov	r10,r8
8002050a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002050e:	11 d8       	ld.ub	r8,r8[0x5]
80020510:	10 9b       	mov	r11,r8
80020512:	1a d5       	st.w	--sp,r5
80020514:	ee f8 ff dc 	ld.w	r8,r7[-36]
80020518:	1a d8       	st.w	--sp,r8
8002051a:	ee f8 ff e0 	ld.w	r8,r7[-32]
8002051e:	1a d8       	st.w	--sp,r8
80020520:	ee f8 ff e4 	ld.w	r8,r7[-28]
80020524:	1a d8       	st.w	--sp,r8
80020526:	ee f8 ff e8 	ld.w	r8,r7[-24]
8002052a:	1a d8       	st.w	--sp,r8
8002052c:	1a d0       	st.w	--sp,r0
8002052e:	1a d1       	st.w	--sp,r1
80020530:	1a d2       	st.w	--sp,r2
80020532:	1a d3       	st.w	--sp,r3
80020534:	1a de       	st.w	--sp,lr
80020536:	18 98       	mov	r8,r12
80020538:	30 0c       	mov	r12,0
8002053a:	fe b0 f5 9f 	rcall	8001f078 <mavlink_msg_mission_item_send>
8002053e:	2f 6d       	sub	sp,-40
				waypoint[sending_wp_num].frame,   waypoint[sending_wp_num].wp_id,
				waypoint[sending_wp_num].current, waypoint[sending_wp_num].autocontinue,
				waypoint[sending_wp_num].param1,  waypoint[sending_wp_num].param2,       waypoint[sending_wp_num].param3,    waypoint[sending_wp_num].param4,
				waypoint[sending_wp_num].x,       waypoint[sending_wp_num].y,            waypoint[sending_wp_num].z);
				
				dbg_print("Sending waypoint ");
80020540:	fe cc 02 4c 	sub	r12,pc,588
80020544:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(sending_wp_num, 10);
80020548:	ec f8 00 a8 	ld.w	r8,r6[168]
8002054c:	70 08       	ld.w	r8,r8[0x0]
8002054e:	30 ab       	mov	r11,10
80020550:	10 9c       	mov	r12,r8
80020552:	f0 16 00 04 	mcall	r6[16]
				dbg_print("\n");
80020556:	fe cc 06 7e 	sub	r12,pc,1662
8002055a:	f0 16 00 01 	mcall	r6[4]
				
				start_timeout = get_millis();
8002055e:	f0 16 00 0f 	mcall	r6[60]
80020562:	18 99       	mov	r9,r12
80020564:	ec f8 01 64 	ld.w	r8,r6[356]
80020568:	91 09       	st.w	r8[0x0],r9
				
				//sending_wp_num += 1;
			}			
		}
	}	
}
8002056a:	2f 7d       	sub	sp,-36
8002056c:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
80020570:	80 02       	ld.sh	r2,r0[0x0]
80020572:	01 96       	ld.ub	r6,r0[0x1]
80020574:	41 63       	lddsp	r3,sp[0x58]
80020576:	6b 6e       	ld.w	lr,r5[0x58]
80020578:	6f 77       	ld.w	r7,r7[0x5c]
8002057a:	6c 65       	ld.w	r5,r6[0x18]
8002057c:	64 67       	ld.w	r7,r2[0x18]
8002057e:	6d 65       	ld.w	r5,r6[0x58]
80020580:	6e 74       	ld.w	r4,r7[0x1c]
80020582:	20 72       	sub	r2,7
80020584:	65 63       	ld.w	r3,r2[0x58]
80020586:	65 69       	ld.w	r9,r2[0x58]
80020588:	76 65       	ld.w	r5,r11[0x18]
8002058a:	64 2c       	ld.w	r12,r2[0x8]
8002058c:	20 65       	sub	r5,6
8002058e:	6e 64       	ld.w	r4,r7[0x18]
80020590:	20 6f       	sub	pc,6
80020592:	66 20       	ld.w	r0,r3[0x8]
80020594:	77 61       	ld.w	r1,r11[0x58]
80020596:	79 70       	ld.w	r0,r12[0x5c]
80020598:	6f 69       	ld.w	r9,r7[0x58]
8002059a:	6e 74       	ld.w	r4,r7[0x1c]
8002059c:	20 73       	sub	r3,7
8002059e:	65 6e       	ld.w	lr,r2[0x58]
800205a0:	64 69       	ld.w	r9,r2[0x18]
800205a2:	6e 67       	ld.w	r7,r7[0x18]
800205a4:	2e 0a       	sub	r10,-32
	...

800205a8 <receive_ack_msg>:

void receive_ack_msg(Mavlink_Received_t* rec, bool* waypoint_sending)
{
800205a8:	eb cd 40 c0 	pushm	r6-r7,lr
800205ac:	1a 97       	mov	r7,sp
800205ae:	20 3d       	sub	sp,12
800205b0:	49 76       	lddpc	r6,8002060c <receive_ack_msg+0x64>
800205b2:	1e 26       	rsub	r6,pc
800205b4:	ef 4c ff f8 	st.w	r7[-8],r12
800205b8:	ef 4b ff f4 	st.w	r7[-12],r11
	mavlink_mission_ack_t packet;
	mavlink_msg_mission_ack_decode(&rec->msg, &packet);
800205bc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800205c0:	ee c9 00 03 	sub	r9,r7,3
800205c4:	12 9b       	mov	r11,r9
800205c6:	10 9c       	mov	r12,r8
800205c8:	fe b0 f9 dc 	rcall	8001f980 <mavlink_msg_mission_ack_decode>
	// Check if this message is for this system and subsystem
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_mission_planner.sysid
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
800205cc:	ef 39 ff fd 	ld.ub	r9,r7[-3]
800205d0:	ec f8 00 c4 	ld.w	r8,r6[196]
800205d4:	11 88       	ld.ub	r8,r8[0x0]
void receive_ack_msg(Mavlink_Received_t* rec, bool* waypoint_sending)
{
	mavlink_mission_ack_t packet;
	mavlink_msg_mission_ack_decode(&rec->msg, &packet);
	// Check if this message is for this system and subsystem
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_mission_planner.sysid
800205d6:	f0 09 18 00 	cp.b	r9,r8
800205da:	c1 51       	brne	80020604 <receive_ack_msg+0x5c>
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
800205dc:	ef 39 ff fe 	ld.ub	r9,r7[-2]
800205e0:	ec f8 00 c4 	ld.w	r8,r6[196]
800205e4:	11 98       	ld.ub	r8,r8[0x1]
void receive_ack_msg(Mavlink_Received_t* rec, bool* waypoint_sending)
{
	mavlink_mission_ack_t packet;
	mavlink_msg_mission_ack_decode(&rec->msg, &packet);
	// Check if this message is for this system and subsystem
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_mission_planner.sysid
800205e6:	f0 09 18 00 	cp.b	r9,r8
800205ea:	c0 d1       	brne	80020604 <receive_ack_msg+0x5c>
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
	{
		*waypoint_sending = false;
800205ec:	ee f9 ff f4 	ld.w	r9,r7[-12]
800205f0:	30 08       	mov	r8,0
800205f2:	b2 88       	st.b	r9[0x0],r8
		sending_wp_num = 0;
800205f4:	ec f8 00 a8 	ld.w	r8,r6[168]
800205f8:	30 09       	mov	r9,0
800205fa:	91 09       	st.w	r8[0x0],r9
		dbg_print("Acknowledgment received, end of waypoint sending.\n");
800205fc:	fe cc 00 88 	sub	r12,pc,136
80020600:	f0 16 00 01 	mcall	r6[4]
	}
}
80020604:	2f dd       	sub	sp,-12
80020606:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002060a:	00 00       	add	r0,r0
8002060c:	80 02       	ld.sh	r2,r0[0x0]
8002060e:	04 36       	cp.w	r6,r2
80020610:	52 65       	stdsp	sp[0x98],r5
80020612:	63 65       	ld.w	r5,r1[0x58]
80020614:	69 76       	ld.w	r6,r4[0x5c]
80020616:	69 6e       	ld.w	lr,r4[0x58]
80020618:	67 20       	ld.w	r0,r3[0x48]
8002061a:	00 00       	add	r0,r0
8002061c:	20 6e       	sub	lr,6
8002061e:	65 77       	ld.w	r7,r2[0x5c]
80020620:	20 77       	sub	r7,7
80020622:	61 79       	ld.w	r9,r0[0x5c]
80020624:	70 6f       	ld.w	pc,r8[0x18]
80020626:	69 6e       	ld.w	lr,r4[0x58]
80020628:	74 73       	ld.w	r3,r10[0x1c]
8002062a:	2e 20       	sub	r0,-30
8002062c:	00 00       	add	r0,r0
8002062e:	00 00       	add	r0,r0
80020630:	4e 65       	lddpc	r5,800207c8 <receive_count+0x162>
80020632:	77 20       	ld.w	r0,r11[0x48]
80020634:	74 6f       	ld.w	pc,r10[0x18]
80020636:	74 61       	ld.w	r1,r10[0x18]
80020638:	6c 20       	ld.w	r0,r6[0x8]
8002063a:	6e 75       	ld.w	r5,r7[0x1c]
8002063c:	6d 62       	ld.w	r2,r6[0x58]
8002063e:	65 72       	ld.w	r2,r2[0x5c]
80020640:	20 6f       	sub	pc,6
80020642:	66 20       	ld.w	r0,r3[0x8]
80020644:	77 61       	ld.w	r1,r11[0x58]
80020646:	79 70       	ld.w	r0,r12[0x5c]
80020648:	6f 69       	ld.w	r9,r7[0x58]
8002064a:	6e 74       	ld.w	r4,r7[0x1c]
8002064c:	73 3a       	ld.w	r10,r9[0x4c]
8002064e:	00 00       	add	r0,r0
80020650:	41 73       	lddsp	r3,sp[0x5c]
80020652:	6b 69       	ld.w	r9,r5[0x58]
80020654:	6e 67       	ld.w	r7,r7[0x18]
80020656:	20 66       	sub	r6,6
80020658:	6f 72       	ld.w	r2,r7[0x5c]
8002065a:	20 77       	sub	r7,7
8002065c:	61 79       	ld.w	r9,r0[0x5c]
8002065e:	70 6f       	ld.w	pc,r8[0x18]
80020660:	69 6e       	ld.w	lr,r4[0x58]
80020662:	74 20       	ld.w	r0,r10[0x8]
	...

80020666 <receive_count>:

void receive_count(Mavlink_Received_t* rec, uint16_t* number_of_waypoints, bool* waypoint_receiving, bool* waypoint_sending)
{
80020666:	eb cd 40 c0 	pushm	r6-r7,lr
8002066a:	1a 97       	mov	r7,sp
8002066c:	20 5d       	sub	sp,20
8002066e:	4d 46       	lddpc	r6,800207bc <receive_count+0x156>
80020670:	1e 26       	rsub	r6,pc
80020672:	ef 4c ff f8 	st.w	r7[-8],r12
80020676:	ef 4b ff f4 	st.w	r7[-12],r11
8002067a:	ef 4a ff f0 	st.w	r7[-16],r10
8002067e:	ef 49 ff ec 	st.w	r7[-20],r9
	mavlink_mission_count_t packet;
	mavlink_msg_mission_count_decode(&rec->msg, &packet);
80020682:	ee f8 ff f8 	ld.w	r8,r7[-8]
80020686:	ee c9 00 04 	sub	r9,r7,4
8002068a:	12 9b       	mov	r11,r9
8002068c:	10 9c       	mov	r12,r8
8002068e:	fe b0 f8 9f 	rcall	8001f7cc <mavlink_msg_mission_count_decode>
	//dbg_print_num(mavlink_mission_planner.sysid,10);
	//dbg_print_num(packet.target_component,10);
	//dbg_print_num(mavlink_mission_planner.compid,10);
	//dbg_print("\n");
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_mission_planner.sysid
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
80020692:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80020696:	ec f8 00 c4 	ld.w	r8,r6[196]
8002069a:	11 88       	ld.ub	r8,r8[0x0]
	//dbg_print_num(packet.target_system,10);
	//dbg_print_num(mavlink_mission_planner.sysid,10);
	//dbg_print_num(packet.target_component,10);
	//dbg_print_num(mavlink_mission_planner.compid,10);
	//dbg_print("\n");
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_mission_planner.sysid
8002069c:	f0 09 18 00 	cp.b	r9,r8
800206a0:	e0 81 00 8b 	brne	800207b6 <receive_count+0x150>
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
800206a4:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800206a8:	ec f8 00 c4 	ld.w	r8,r6[196]
800206ac:	11 98       	ld.ub	r8,r8[0x1]
	//dbg_print_num(packet.target_system,10);
	//dbg_print_num(mavlink_mission_planner.sysid,10);
	//dbg_print_num(packet.target_component,10);
	//dbg_print_num(mavlink_mission_planner.compid,10);
	//dbg_print("\n");
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_mission_planner.sysid
800206ae:	f0 09 18 00 	cp.b	r9,r8
800206b2:	e0 81 00 82 	brne	800207b6 <receive_count+0x150>
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
	{
		if (*waypoint_receiving == false)
800206b6:	ee f8 ff f0 	ld.w	r8,r7[-16]
800206ba:	11 88       	ld.ub	r8,r8[0x0]
800206bc:	ec 18 00 01 	eorl	r8,0x1
800206c0:	5c 58       	castu.b	r8
800206c2:	c5 a0       	breq	80020776 <receive_count+0x110>
		{
			// comment these lines if you want to add new waypoints to the list instead of overwriting them
			num_waypoint_onboard = 0;
800206c4:	ec f9 01 20 	ld.w	r9,r6[288]
800206c8:	30 08       	mov	r8,0
800206ca:	b2 08       	st.h	r9[0x0],r8
			*number_of_waypoints =0;
800206cc:	ee f9 ff f4 	ld.w	r9,r7[-12]
800206d0:	30 08       	mov	r8,0
800206d2:	b2 08       	st.h	r9[0x0],r8
			//---//
			
			if ((packet.count + *number_of_waypoints) > MAX_WAYPOINTS)
800206d4:	ef 08 ff fc 	ld.sh	r8,r7[-4]
800206d8:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
800206dc:	ee f8 ff f4 	ld.w	r8,r7[-12]
800206e0:	90 08       	ld.sh	r8,r8[0x0]
800206e2:	5c 78       	castu.h	r8
800206e4:	f2 08 00 08 	add	r8,r9,r8
800206e8:	58 a8       	cp.w	r8,10
800206ea:	e0 8a 00 0a 	brle	800206fe <receive_count+0x98>
			{
				packet.count = MAX_WAYPOINTS - *number_of_waypoints;
800206ee:	ee f8 ff f4 	ld.w	r8,r7[-12]
800206f2:	90 08       	ld.sh	r8,r8[0x0]
800206f4:	f0 08 11 0a 	rsub	r8,r8,10
800206f8:	5c 88       	casts.h	r8
800206fa:	ef 58 ff fc 	st.h	r7[-4],r8
			}
			*number_of_waypoints =  packet.count+ *number_of_waypoints;
800206fe:	ef 09 ff fc 	ld.sh	r9,r7[-4]
80020702:	ee f8 ff f4 	ld.w	r8,r7[-12]
80020706:	90 08       	ld.sh	r8,r8[0x0]
80020708:	f2 08 00 08 	add	r8,r9,r8
8002070c:	5c 88       	casts.h	r8
8002070e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80020712:	b2 08       	st.h	r9[0x0],r8
			dbg_print("Receiving ");
80020714:	fe cc 01 04 	sub	r12,pc,260
80020718:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(packet.count,10);
8002071c:	ef 08 ff fc 	ld.sh	r8,r7[-4]
80020720:	5c 78       	castu.h	r8
80020722:	30 ab       	mov	r11,10
80020724:	10 9c       	mov	r12,r8
80020726:	f0 16 00 04 	mcall	r6[16]
			dbg_print(" new waypoints. ");
8002072a:	fe cc 01 0e 	sub	r12,pc,270
8002072e:	f0 16 00 01 	mcall	r6[4]
			dbg_print("New total number of waypoints:");
80020732:	fe cc 01 02 	sub	r12,pc,258
80020736:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(*number_of_waypoints,10);
8002073a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002073e:	90 08       	ld.sh	r8,r8[0x0]
80020740:	5c 78       	castu.h	r8
80020742:	30 ab       	mov	r11,10
80020744:	10 9c       	mov	r12,r8
80020746:	f0 16 00 04 	mcall	r6[16]
			dbg_print("\n");
8002074a:	fe cc 08 72 	sub	r12,pc,2162
8002074e:	f0 16 00 01 	mcall	r6[4]
			
			*waypoint_receiving   = true;
80020752:	ee f9 ff f0 	ld.w	r9,r7[-16]
80020756:	30 18       	mov	r8,1
80020758:	b2 88       	st.b	r9[0x0],r8
			*waypoint_sending     = false;
8002075a:	ee f9 ff ec 	ld.w	r9,r7[-20]
8002075e:	30 08       	mov	r8,0
80020760:	b2 88       	st.b	r9[0x0],r8
			waypoint_request_number = 0;
80020762:	ec f8 00 fc 	ld.w	r8,r6[252]
80020766:	30 09       	mov	r9,0
80020768:	91 09       	st.w	r8[0x0],r9
			
			
			start_timeout = get_millis();
8002076a:	f0 16 00 0f 	mcall	r6[60]
8002076e:	18 99       	mov	r9,r12
80020770:	ec f8 01 64 	ld.w	r8,r6[356]
80020774:	91 09       	st.w	r8[0x0],r9
		}
		
		mavlink_msg_mission_request_send(MAVLINK_COMM_0,rec->msg.sysid,rec->msg.compid,waypoint_request_number);
80020776:	ec f8 00 fc 	ld.w	r8,r6[252]
8002077a:	70 08       	ld.w	r8,r8[0x0]
8002077c:	5c 88       	casts.h	r8
8002077e:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
80020782:	ee f8 ff f8 	ld.w	r8,r7[-8]
80020786:	11 e8       	ld.ub	r8,r8[0x6]
80020788:	10 9a       	mov	r10,r8
8002078a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002078e:	11 d8       	ld.ub	r8,r8[0x5]
80020790:	10 9b       	mov	r11,r8
80020792:	30 0c       	mov	r12,0
80020794:	fe b0 f6 78 	rcall	8001f484 <mavlink_msg_mission_request_send>
		
		dbg_print("Asking for waypoint ");
80020798:	fe cc 01 48 	sub	r12,pc,328
8002079c:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(waypoint_request_number,10);
800207a0:	ec f8 00 fc 	ld.w	r8,r6[252]
800207a4:	70 08       	ld.w	r8,r8[0x0]
800207a6:	30 ab       	mov	r11,10
800207a8:	10 9c       	mov	r12,r8
800207aa:	f0 16 00 04 	mcall	r6[16]
		dbg_print("\n");	
800207ae:	fe cc 08 d6 	sub	r12,pc,2262
800207b2:	f0 16 00 01 	mcall	r6[4]
	}
	
}
800207b6:	2f bd       	sub	sp,-20
800207b8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800207bc:	80 02       	ld.sh	r2,r0[0x0]
800207be:	04 f4       	st.b	--r2,r4
800207c0:	4e 65       	lddpc	r5,80020958 <receive_waypoint+0x102>
800207c2:	77 20       	ld.w	r0,r11[0x48]
800207c4:	77 61       	ld.w	r1,r11[0x58]
800207c6:	79 70       	ld.w	r0,r12[0x5c]
800207c8:	6f 69       	ld.w	r9,r7[0x58]
800207ca:	6e 74       	ld.w	r4,r7[0x1c]
800207cc:	20 72       	sub	r2,7
800207ce:	65 63       	ld.w	r3,r2[0x58]
800207d0:	65 69       	ld.w	r9,r2[0x58]
800207d2:	76 65       	ld.w	r5,r11[0x18]
800207d4:	64 20       	ld.w	r0,r2[0x8]
800207d6:	00 00       	add	r0,r0
800207d8:	20 72       	sub	r2,7
800207da:	65 71       	ld.w	r1,r2[0x5c]
800207dc:	75 65       	ld.w	r5,r10[0x58]
800207de:	73 74       	ld.w	r4,r9[0x5c]
800207e0:	65 64       	ld.w	r4,r2[0x58]
800207e2:	20 6e       	sub	lr,6
800207e4:	75 6d       	ld.w	sp,r10[0x58]
800207e6:	20 3a       	sub	r10,3
800207e8:	00 00       	add	r0,r0
800207ea:	00 00       	add	r0,r0
800207ec:	20 72       	sub	r2,7
800207ee:	65 63       	ld.w	r3,r2[0x58]
800207f0:	65 69       	ld.w	r9,r2[0x58]
800207f2:	76 69       	ld.w	r9,r11[0x18]
800207f4:	6e 67       	ld.w	r7,r7[0x18]
800207f6:	20 6e       	sub	lr,6
800207f8:	75 6d       	ld.w	sp,r10[0x58]
800207fa:	20 3a       	sub	r10,3
800207fc:	00 00       	add	r0,r0
800207fe:	00 00       	add	r0,r0
80020800:	52 65       	stdsp	sp[0x98],r5
80020802:	63 65       	ld.w	r5,r1[0x58]
80020804:	69 76       	ld.w	r6,r4[0x5c]
80020806:	69 6e       	ld.w	lr,r4[0x58]
80020808:	67 20       	ld.w	r0,r3[0x48]
8002080a:	67 6f       	ld.w	pc,r3[0x58]
8002080c:	6f 64       	ld.w	r4,r7[0x58]
8002080e:	20 77       	sub	r7,7
80020810:	61 79       	ld.w	r9,r0[0x5c]
80020812:	70 6f       	ld.w	pc,r8[0x18]
80020814:	69 6e       	ld.w	lr,r4[0x58]
80020816:	74 2c       	ld.w	r12,r10[0x8]
80020818:	20 6e       	sub	lr,6
8002081a:	75 6d       	ld.w	sp,r10[0x58]
8002081c:	62 65       	ld.w	r5,r1[0x18]
8002081e:	72 20       	ld.w	r0,r9[0x8]
80020820:	00 00       	add	r0,r0
80020822:	00 00       	add	r0,r0
80020824:	20 6f       	sub	pc,6
80020826:	66 20       	ld.w	r0,r3[0x8]
80020828:	00 00       	add	r0,r0
8002082a:	00 00       	add	r0,r0
8002082c:	66 6c       	ld.w	r12,r3[0x18]
8002082e:	69 67       	ld.w	r7,r4[0x58]
80020830:	68 74       	ld.w	r4,r4[0x1c]
80020832:	20 70       	sub	r0,7
80020834:	6c 61       	ld.w	r1,r6[0x18]
80020836:	6e 20       	ld.w	r0,r7[0x8]
80020838:	72 65       	ld.w	r5,r9[0x18]
8002083a:	63 65       	ld.w	r5,r1[0x58]
8002083c:	69 76       	ld.w	r6,r4[0x5c]
8002083e:	65 64       	ld.w	r4,r2[0x58]
80020840:	21 0a       	sub	r10,16
80020842:	00 00       	add	r0,r0
80020844:	41 63       	lddsp	r3,sp[0x58]
80020846:	6b 20       	ld.w	r0,r5[0x48]
80020848:	6e 6f       	ld.w	pc,r7[0x18]
8002084a:	74 20       	ld.w	r0,r10[0x8]
8002084c:	72 65       	ld.w	r5,r9[0x18]
8002084e:	63 65       	ld.w	r5,r1[0x58]
80020850:	69 76       	ld.w	r6,r4[0x5c]
80020852:	65 64       	ld.w	r4,r2[0x58]
80020854:	21 00       	sub	r0,16

80020856 <receive_waypoint>:

void receive_waypoint(Mavlink_Received_t* rec,  waypoint_struct waypoint_list[], uint16_t number_of_waypoints, bool* waypoint_receiving)
{
80020856:	eb cd 40 c0 	pushm	r6-r7,lr
8002085a:	1a 97       	mov	r7,sp
8002085c:	21 bd       	sub	sp,108
8002085e:	fe f6 03 02 	ld.w	r6,pc[770]
80020862:	1e 26       	rsub	r6,pc
80020864:	ef 4c ff a0 	st.w	r7[-96],r12
80020868:	ef 4b ff 9c 	st.w	r7[-100],r11
8002086c:	14 98       	mov	r8,r10
8002086e:	ef 49 ff 94 	st.w	r7[-108],r9
80020872:	ef 58 ff 98 	st.h	r7[-104],r8
	mavlink_mission_item_t packet;
	mavlink_msg_mission_item_decode(&rec->msg,&packet);
80020876:	ee f8 ff a0 	ld.w	r8,r7[-96]
8002087a:	ee c9 00 2c 	sub	r9,r7,44
8002087e:	12 9b       	mov	r11,r9
80020880:	10 9c       	mov	r12,r8
80020882:	fe b0 f5 87 	rcall	8001f390 <mavlink_msg_mission_item_decode>
	// Check if this message is for this system and subsystem
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_system.sysid
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
80020886:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8002088a:	ec f8 00 70 	ld.w	r8,r6[112]
8002088e:	11 88       	ld.ub	r8,r8[0x0]
void receive_waypoint(Mavlink_Received_t* rec,  waypoint_struct waypoint_list[], uint16_t number_of_waypoints, bool* waypoint_receiving)
{
	mavlink_mission_item_t packet;
	mavlink_msg_mission_item_decode(&rec->msg,&packet);
	// Check if this message is for this system and subsystem
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_system.sysid
80020890:	f0 09 18 00 	cp.b	r9,r8
80020894:	e0 81 01 63 	brne	80020b5a <receive_waypoint+0x304>
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
80020898:	ef 39 ff f5 	ld.ub	r9,r7[-11]
8002089c:	ec f8 00 c4 	ld.w	r8,r6[196]
800208a0:	11 98       	ld.ub	r8,r8[0x1]
void receive_waypoint(Mavlink_Received_t* rec,  waypoint_struct waypoint_list[], uint16_t number_of_waypoints, bool* waypoint_receiving)
{
	mavlink_mission_item_t packet;
	mavlink_msg_mission_item_decode(&rec->msg,&packet);
	// Check if this message is for this system and subsystem
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_system.sysid
800208a2:	f0 09 18 00 	cp.b	r9,r8
800208a6:	e0 81 01 5a 	brne	80020b5a <receive_waypoint+0x304>
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
	{
		start_timeout = get_millis();
800208aa:	f0 16 00 0f 	mcall	r6[60]
800208ae:	18 99       	mov	r9,r12
800208b0:	ec f8 01 64 	ld.w	r8,r6[356]
800208b4:	91 09       	st.w	r8[0x0],r9
		
		waypoint_struct new_waypoint;
		
		new_waypoint.wp_id = packet.command;
800208b6:	ef 08 ff f2 	ld.sh	r8,r7[-14]
800208ba:	ef 58 ff a6 	st.h	r7[-90],r8
		
		new_waypoint.x = packet.x; // longitude
800208be:	ee f8 ff e4 	ld.w	r8,r7[-28]
800208c2:	10 9c       	mov	r12,r8
800208c4:	f0 16 00 02 	mcall	r6[8]
800208c8:	14 98       	mov	r8,r10
800208ca:	16 99       	mov	r9,r11
800208cc:	ee e9 ff bc 	st.d	r7[-68],r8
		new_waypoint.y = packet.y; // latitude 
800208d0:	ee f8 ff e8 	ld.w	r8,r7[-24]
800208d4:	10 9c       	mov	r12,r8
800208d6:	f0 16 00 02 	mcall	r6[8]
800208da:	14 98       	mov	r8,r10
800208dc:	16 99       	mov	r9,r11
800208de:	ee e9 ff c4 	st.d	r7[-60],r8
		new_waypoint.z = packet.z; // altitude
800208e2:	ee f8 ff ec 	ld.w	r8,r7[-20]
800208e6:	10 9c       	mov	r12,r8
800208e8:	f0 16 00 02 	mcall	r6[8]
800208ec:	14 98       	mov	r8,r10
800208ee:	16 99       	mov	r9,r11
800208f0:	ee e9 ff cc 	st.d	r7[-52],r8
		
		new_waypoint.autocontinue = packet.autocontinue;
800208f4:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800208f8:	ef 68 ff a9 	st.b	r7[-87],r8
		new_waypoint.frame = packet.frame;
800208fc:	ef 38 ff f6 	ld.ub	r8,r7[-10]
80020900:	ef 68 ff a4 	st.b	r7[-92],r8
		
		new_waypoint.current = packet.current;
80020904:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80020908:	ef 68 ff a8 	st.b	r7[-88],r8
		
		new_waypoint.param1 = packet.param1;
8002090c:	ee f8 ff d4 	ld.w	r8,r7[-44]
80020910:	ef 48 ff ac 	st.w	r7[-84],r8
		new_waypoint.param2 = packet.param2;
80020914:	ee f8 ff d8 	ld.w	r8,r7[-40]
80020918:	ef 48 ff b0 	st.w	r7[-80],r8
		new_waypoint.param3 = packet.param3;
8002091c:	ee f8 ff dc 	ld.w	r8,r7[-36]
80020920:	ef 48 ff b4 	st.w	r7[-76],r8
		new_waypoint.param4 = packet.param4;
80020924:	ee f8 ff e0 	ld.w	r8,r7[-32]
80020928:	ef 48 ff b8 	st.w	r7[-72],r8
		
		dbg_print("New waypoint received ");
8002092c:	fe cc 01 6c 	sub	r12,pc,364
80020930:	f0 16 00 01 	mcall	r6[4]
 		//dbg_print_num(packet.current,10);
 		//dbg_print(" Seq :");
 		//dbg_print_num(packet.seq,10);
		//dbg_print(" command id :");
		//dbg_print_num(packet.command,10);
		dbg_print(" requested num :");
80020934:	fe cc 01 5c 	sub	r12,pc,348
80020938:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(waypoint_request_number,10);
8002093c:	ec f8 00 fc 	ld.w	r8,r6[252]
80020940:	70 08       	ld.w	r8,r8[0x0]
80020942:	30 ab       	mov	r11,10
80020944:	10 9c       	mov	r12,r8
80020946:	f0 16 00 04 	mcall	r6[16]
		dbg_print(" receiving num :");
8002094a:	fe cc 01 5e 	sub	r12,pc,350
8002094e:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(packet.seq,10);
80020952:	ef 08 ff f0 	ld.sh	r8,r7[-16]
80020956:	5c 78       	castu.h	r8
80020958:	30 ab       	mov	r11,10
8002095a:	10 9c       	mov	r12,r8
8002095c:	f0 16 00 04 	mcall	r6[16]
		//dbg_print(" is it receiving :");
		//dbg_print_num(waypoint_receiving,10); // boolean value
		dbg_print("\n");
80020960:	fe cc 0a 88 	sub	r12,pc,2696
80020964:	f0 16 00 01 	mcall	r6[4]
			//new_waypoint.alt = packet.param2;
			//new_waypoint.param1 = packet.param1;
			//break;
		//}
		
		if(packet.current == 2) {                                               //current = 2 is a flag to tell us this is a "guided mode" waypoint and not for the mission
80020968:	ef 39 ff f7 	ld.ub	r9,r7[-9]
8002096c:	30 28       	mov	r8,2
8002096e:	f0 09 18 00 	cp.b	r9,r8
80020972:	c0 e1       	brne	8002098e <receive_waypoint+0x138>

			// set wp_nav's destination
			//wp_nav.set_destination(pv_location_to_vector(tell_command));

			// verify we received the command
			mavlink_msg_mission_ack_send(MAVLINK_COMM_0, rec->msg.sysid,rec->msg.compid, MAV_CMD_ACK_OK);
80020974:	ee f8 ff a0 	ld.w	r8,r7[-96]
80020978:	11 e8       	ld.ub	r8,r8[0x6]
8002097a:	10 9a       	mov	r10,r8
8002097c:	ee f8 ff a0 	ld.w	r8,r7[-96]
80020980:	11 d8       	ld.ub	r8,r8[0x5]
80020982:	30 19       	mov	r9,1
80020984:	10 9b       	mov	r11,r8
80020986:	30 0c       	mov	r12,0
80020988:	fe b0 f7 a4 	rcall	8001f8d0 <mavlink_msg_mission_ack_send>
8002098c:	ce 78       	rjmp	80020b5a <receive_waypoint+0x304>

		} else if(packet.current == 3){                                    //current = 3 is a flag to tell us this is a alt change only
8002098e:	ef 39 ff f7 	ld.ub	r9,r7[-9]
80020992:	30 38       	mov	r8,3
80020994:	f0 09 18 00 	cp.b	r9,r8
80020998:	c0 e1       	brne	800209b4 <receive_waypoint+0x15e>
			// To-Do: update target altitude for loiter or waypoint controller depending upon nav mode
			// similar to how do_change_alt works
			//wp_nav.set_desired_alt(new_waypoint.alt);

			// verify we received the command
			mavlink_msg_mission_ack_send(MAVLINK_COMM_0, rec->msg.sysid,rec->msg.compid, MAV_CMD_ACK_OK);
8002099a:	ee f8 ff a0 	ld.w	r8,r7[-96]
8002099e:	11 e8       	ld.ub	r8,r8[0x6]
800209a0:	10 9a       	mov	r10,r8
800209a2:	ee f8 ff a0 	ld.w	r8,r7[-96]
800209a6:	11 d8       	ld.ub	r8,r8[0x5]
800209a8:	30 19       	mov	r9,1
800209aa:	10 9b       	mov	r11,r8
800209ac:	30 0c       	mov	r12,0
800209ae:	fe b0 f7 91 	rcall	8001f8d0 <mavlink_msg_mission_ack_send>
800209b2:	cd 48       	rjmp	80020b5a <receive_waypoint+0x304>

		} else {
			// Check if receiving waypoints
			if (*waypoint_receiving){
800209b4:	ee f8 ff 94 	ld.w	r8,r7[-108]
800209b8:	11 88       	ld.ub	r8,r8[0x0]
800209ba:	58 08       	cp.w	r8,0
800209bc:	e0 80 00 bb 	breq	80020b32 <receive_waypoint+0x2dc>

				// check if this is the requested waypoint
				if (packet.seq == waypoint_request_number)
800209c0:	ef 08 ff f0 	ld.sh	r8,r7[-16]
800209c4:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
800209c8:	ec f8 00 fc 	ld.w	r8,r6[252]
800209cc:	70 08       	ld.w	r8,r8[0x0]
800209ce:	10 39       	cp.w	r9,r8
800209d0:	e0 81 00 c5 	brne	80020b5a <receive_waypoint+0x304>
				{
					dbg_print("Receiving good waypoint, number ");
800209d4:	fe cc 01 d4 	sub	r12,pc,468
800209d8:	f0 16 00 01 	mcall	r6[4]
					dbg_print_num(waypoint_request_number,10);
800209dc:	ec f8 00 fc 	ld.w	r8,r6[252]
800209e0:	70 08       	ld.w	r8,r8[0x0]
800209e2:	30 ab       	mov	r11,10
800209e4:	10 9c       	mov	r12,r8
800209e6:	f0 16 00 04 	mcall	r6[16]
					dbg_print(" of ");
800209ea:	fe cc 01 c6 	sub	r12,pc,454
800209ee:	f0 16 00 01 	mcall	r6[4]
					dbg_print_num(number_of_waypoints-num_waypoint_onboard,10);
800209f2:	ef 19 ff 98 	ld.uh	r9,r7[-104]
800209f6:	ec f8 01 20 	ld.w	r8,r6[288]
800209fa:	90 08       	ld.sh	r8,r8[0x0]
800209fc:	5c 78       	castu.h	r8
800209fe:	f2 08 01 08 	sub	r8,r9,r8
80020a02:	30 ab       	mov	r11,10
80020a04:	10 9c       	mov	r12,r8
80020a06:	f0 16 00 04 	mcall	r6[16]
					dbg_print("\n");
80020a0a:	fe cc 0b 32 	sub	r12,pc,2866
80020a0e:	f0 16 00 01 	mcall	r6[4]
					
				    waypoint_list[num_waypoint_onboard + waypoint_request_number] = new_waypoint;
80020a12:	ec f8 01 20 	ld.w	r8,r6[288]
80020a16:	90 08       	ld.sh	r8,r8[0x0]
80020a18:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
80020a1c:	ec f8 00 fc 	ld.w	r8,r6[252]
80020a20:	70 08       	ld.w	r8,r8[0x0]
80020a22:	f2 08 00 08 	add	r8,r9,r8
80020a26:	10 99       	mov	r9,r8
80020a28:	12 98       	mov	r8,r9
80020a2a:	a1 78       	lsl	r8,0x1
80020a2c:	12 08       	add	r8,r9
80020a2e:	a5 68       	lsl	r8,0x4
80020a30:	ee f9 ff 9c 	ld.w	r9,r7[-100]
80020a34:	f2 08 00 08 	add	r8,r9,r8
80020a38:	10 9b       	mov	r11,r8
80020a3a:	ee ca 00 5c 	sub	r10,r7,92
80020a3e:	f6 c8 00 00 	sub	r8,r11,0
80020a42:	f4 c9 00 00 	sub	r9,r10,0
80020a46:	72 0c       	ld.w	r12,r9[0x0]
80020a48:	91 0c       	st.w	r8[0x0],r12
80020a4a:	72 1c       	ld.w	r12,r9[0x4]
80020a4c:	91 1c       	st.w	r8[0x4],r12
80020a4e:	72 2c       	ld.w	r12,r9[0x8]
80020a50:	91 2c       	st.w	r8[0x8],r12
80020a52:	72 39       	ld.w	r9,r9[0xc]
80020a54:	91 39       	st.w	r8[0xc],r9
80020a56:	f6 c8 ff f0 	sub	r8,r11,-16
80020a5a:	f4 c9 ff f0 	sub	r9,r10,-16
80020a5e:	72 0c       	ld.w	r12,r9[0x0]
80020a60:	91 0c       	st.w	r8[0x0],r12
80020a62:	72 1c       	ld.w	r12,r9[0x4]
80020a64:	91 1c       	st.w	r8[0x4],r12
80020a66:	72 2c       	ld.w	r12,r9[0x8]
80020a68:	91 2c       	st.w	r8[0x8],r12
80020a6a:	72 39       	ld.w	r9,r9[0xc]
80020a6c:	91 39       	st.w	r8[0xc],r9
80020a6e:	f6 c8 ff e0 	sub	r8,r11,-32
80020a72:	f4 c9 ff e0 	sub	r9,r10,-32
80020a76:	72 0a       	ld.w	r10,r9[0x0]
80020a78:	91 0a       	st.w	r8[0x0],r10
80020a7a:	72 1a       	ld.w	r10,r9[0x4]
80020a7c:	91 1a       	st.w	r8[0x4],r10
80020a7e:	72 2a       	ld.w	r10,r9[0x8]
80020a80:	91 2a       	st.w	r8[0x8],r10
80020a82:	72 39       	ld.w	r9,r9[0xc]
80020a84:	91 39       	st.w	r8[0xc],r9
					waypoint_request_number++;
80020a86:	ec f8 00 fc 	ld.w	r8,r6[252]
80020a8a:	70 08       	ld.w	r8,r8[0x0]
80020a8c:	f0 c9 ff ff 	sub	r9,r8,-1
80020a90:	ec f8 00 fc 	ld.w	r8,r6[252]
80020a94:	91 09       	st.w	r8[0x0],r9
					
					if ((num_waypoint_onboard + waypoint_request_number) == number_of_waypoints) 
80020a96:	ec f8 01 20 	ld.w	r8,r6[288]
80020a9a:	90 08       	ld.sh	r8,r8[0x0]
80020a9c:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
80020aa0:	ec f8 00 fc 	ld.w	r8,r6[252]
80020aa4:	70 08       	ld.w	r8,r8[0x0]
80020aa6:	10 09       	add	r9,r8
80020aa8:	ef 18 ff 98 	ld.uh	r8,r7[-104]
80020aac:	10 39       	cp.w	r9,r8
80020aae:	c2 11       	brne	80020af0 <receive_waypoint+0x29a>
					{
						
						uint8_t type = MAV_CMD_ACK_OK;                         // ok (0), error(1) ???
80020ab0:	30 18       	mov	r8,1
80020ab2:	ef 68 ff fe 	st.b	r7[-2],r8
						//mavlink_msg_mission_ack_send(MAVLINK_COMM_0,rec->msg.sysid,mavlink_mission_planner.compid,type);
						mavlink_msg_mission_ack_send(MAVLINK_COMM_0,rec->msg.sysid,rec->msg.compid,type);
80020ab6:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80020aba:	ee f8 ff a0 	ld.w	r8,r7[-96]
80020abe:	11 e8       	ld.ub	r8,r8[0x6]
80020ac0:	10 9a       	mov	r10,r8
80020ac2:	ee f8 ff a0 	ld.w	r8,r7[-96]
80020ac6:	11 d8       	ld.ub	r8,r8[0x5]
80020ac8:	10 9b       	mov	r11,r8
80020aca:	30 0c       	mov	r12,0
80020acc:	fe b0 f7 02 	rcall	8001f8d0 <mavlink_msg_mission_ack_send>
						//mavlink_msg_mission_ack_send(MAVLINK_COMM_0,rec->msg.sysid,0,type);
						//mavlink_msg_mission_ack_send(MAVLINK_COMM_0,rec->msg.sysid,mavlink_system.compid,type);
						
						//mavlink_msg_mission_ack_send(MAVLINK_COMM_0, packet.target_system, packet.target_component,type);

						dbg_print("flight plan received!\n");
80020ad0:	fe cc 02 a4 	sub	r12,pc,676
80020ad4:	f0 16 00 01 	mcall	r6[4]
						*waypoint_receiving = false;
80020ad8:	ee f9 ff 94 	ld.w	r9,r7[-108]
80020adc:	30 08       	mov	r8,0
80020ade:	b2 88       	st.b	r9[0x0],r8
						num_waypoint_onboard = number_of_waypoints;
80020ae0:	ec f9 01 20 	ld.w	r9,r6[288]
80020ae4:	ef 08 ff 98 	ld.sh	r8,r7[-104]
80020ae8:	b2 08       	st.h	r9[0x0],r8
						init_wp();
80020aea:	f0 16 00 84 	mcall	r6[528]
80020aee:	c3 68       	rjmp	80020b5a <receive_waypoint+0x304>
					}else{
						mavlink_msg_mission_request_send(MAVLINK_COMM_0,rec->msg.sysid,rec->msg.compid,waypoint_request_number);
80020af0:	ec f8 00 fc 	ld.w	r8,r6[252]
80020af4:	70 08       	ld.w	r8,r8[0x0]
80020af6:	5c 88       	casts.h	r8
80020af8:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
80020afc:	ee f8 ff a0 	ld.w	r8,r7[-96]
80020b00:	11 e8       	ld.ub	r8,r8[0x6]
80020b02:	10 9a       	mov	r10,r8
80020b04:	ee f8 ff a0 	ld.w	r8,r7[-96]
80020b08:	11 d8       	ld.ub	r8,r8[0x5]
80020b0a:	10 9b       	mov	r11,r8
80020b0c:	30 0c       	mov	r12,0
80020b0e:	fe b0 f4 bb 	rcall	8001f484 <mavlink_msg_mission_request_send>
						
						dbg_print("Asking for waypoint ");
80020b12:	fe cc 04 c2 	sub	r12,pc,1218
80020b16:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(waypoint_request_number,10);
80020b1a:	ec f8 00 fc 	ld.w	r8,r6[252]
80020b1e:	70 08       	ld.w	r8,r8[0x0]
80020b20:	30 ab       	mov	r11,10
80020b22:	10 9c       	mov	r12,r8
80020b24:	f0 16 00 04 	mcall	r6[16]
						dbg_print("\n");
80020b28:	fe cc 0c 50 	sub	r12,pc,3152
80020b2c:	f0 16 00 01 	mcall	r6[4]
80020b30:	c1 58       	rjmp	80020b5a <receive_waypoint+0x304>
					}
				}
			}else{
				uint8_t type = MAV_CMD_ACK_OK; //MAV_CMD_ACK_ERR_FAIL;                         // ok (0), error(1)
80020b32:	30 18       	mov	r8,1
80020b34:	ef 68 ff ff 	st.b	r7[-1],r8
				dbg_print("Ack not received!");
80020b38:	fe cc 02 f4 	sub	r12,pc,756
80020b3c:	f0 16 00 01 	mcall	r6[4]
				mavlink_msg_mission_ack_send(MAVLINK_COMM_0,rec->msg.sysid,rec->msg.compid,type);
80020b40:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80020b44:	ee f8 ff a0 	ld.w	r8,r7[-96]
80020b48:	11 e8       	ld.ub	r8,r8[0x6]
80020b4a:	10 9a       	mov	r10,r8
80020b4c:	ee f8 ff a0 	ld.w	r8,r7[-96]
80020b50:	11 d8       	ld.ub	r8,r8[0x5]
80020b52:	10 9b       	mov	r11,r8
80020b54:	30 0c       	mov	r12,0
80020b56:	fe b0 f6 bd 	rcall	8001f8d0 <mavlink_msg_mission_ack_send>
			}				
		}		
	}			
}		
80020b5a:	2e 5d       	sub	sp,-108
80020b5c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80020b60:	80 02       	ld.sh	r2,r0[0x0]
80020b62:	06 e6       	st.h	--r3,r6
80020b64:	73 65       	ld.w	r5,r9[0x58]
80020b66:	74 74       	ld.w	r4,r10[0x1c]
80020b68:	69 6e       	ld.w	lr,r4[0x58]
80020b6a:	67 20       	ld.w	r0,r3[0x48]
80020b6c:	63 75       	ld.w	r5,r1[0x5c]
80020b6e:	72 72       	ld.w	r2,r9[0x1c]
80020b70:	65 6e       	ld.w	lr,r2[0x58]
80020b72:	74 20       	ld.w	r0,r10[0x8]
80020b74:	77 70       	ld.w	r0,r11[0x5c]
80020b76:	00 00       	add	r0,r0
80020b78:	53 65       	stdsp	sp[0xd8],r5
80020b7a:	74 20       	ld.w	r0,r10[0x8]
80020b7c:	63 75       	ld.w	r5,r1[0x5c]
80020b7e:	72 72       	ld.w	r2,r9[0x1c]
80020b80:	65 6e       	ld.w	lr,r2[0x58]
80020b82:	74 20       	ld.w	r0,r10[0x8]
80020b84:	77 61       	ld.w	r1,r11[0x58]
80020b86:	79 70       	ld.w	r0,r12[0x5c]
80020b88:	6f 69       	ld.w	r9,r7[0x58]
80020b8a:	6e 74       	ld.w	r4,r7[0x1c]
80020b8c:	20 74       	sub	r4,7
80020b8e:	6f 20       	ld.w	r0,r7[0x48]
80020b90:	6e 75       	ld.w	r5,r7[0x1c]
80020b92:	6d 62       	ld.w	r2,r6[0x58]
80020b94:	65 72       	ld.w	r2,r2[0x5c]
	...

80020b98 <set_current_wp>:

void set_current_wp(Mavlink_Received_t* rec,  waypoint_struct* waypoint_list[], uint16_t num_of_waypoint)
{
80020b98:	eb cd 40 c0 	pushm	r6-r7,lr
80020b9c:	1a 97       	mov	r7,sp
80020b9e:	20 5d       	sub	sp,20
80020ba0:	4c 06       	lddpc	r6,80020ca0 <set_current_wp+0x108>
80020ba2:	1e 26       	rsub	r6,pc
80020ba4:	ef 4c ff f4 	st.w	r7[-12],r12
80020ba8:	ef 4b ff f0 	st.w	r7[-16],r11
80020bac:	14 98       	mov	r8,r10
80020bae:	ef 58 ff ec 	st.h	r7[-20],r8
	mavlink_mission_set_current_t packet;
	mavlink_msg_mission_set_current_decode(&rec->msg,&packet);
80020bb2:	ee f8 ff f4 	ld.w	r8,r7[-12]
80020bb6:	ee c9 00 08 	sub	r9,r7,8
80020bba:	12 9b       	mov	r11,r9
80020bbc:	10 9c       	mov	r12,r8
80020bbe:	fe b0 f5 21 	rcall	8001f600 <mavlink_msg_mission_set_current_decode>
	// Check if this message is for this system and subsystem
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_system.sysid
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
80020bc2:	ef 39 ff fa 	ld.ub	r9,r7[-6]
80020bc6:	ec f8 00 70 	ld.w	r8,r6[112]
80020bca:	11 88       	ld.ub	r8,r8[0x0]
void set_current_wp(Mavlink_Received_t* rec,  waypoint_struct* waypoint_list[], uint16_t num_of_waypoint)
{
	mavlink_mission_set_current_t packet;
	mavlink_msg_mission_set_current_decode(&rec->msg,&packet);
	// Check if this message is for this system and subsystem
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_system.sysid
80020bcc:	f0 09 18 00 	cp.b	r9,r8
80020bd0:	c6 41       	brne	80020c98 <set_current_wp+0x100>
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
80020bd2:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80020bd6:	ec f8 00 c4 	ld.w	r8,r6[196]
80020bda:	11 98       	ld.ub	r8,r8[0x1]
void set_current_wp(Mavlink_Received_t* rec,  waypoint_struct* waypoint_list[], uint16_t num_of_waypoint)
{
	mavlink_mission_set_current_t packet;
	mavlink_msg_mission_set_current_decode(&rec->msg,&packet);
	// Check if this message is for this system and subsystem
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_system.sysid
80020bdc:	f0 09 18 00 	cp.b	r9,r8
80020be0:	c5 c1       	brne	80020c98 <set_current_wp+0x100>
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
	{
		dbg_print("setting current wp");
80020be2:	fe cc 00 7e 	sub	r12,pc,126
80020be6:	f0 16 00 01 	mcall	r6[4]
		int i;
		for (i=0;i<num_of_waypoint;i++)
80020bea:	30 08       	mov	r8,0
80020bec:	ef 48 ff fc 	st.w	r7[-4],r8
80020bf0:	c1 08       	rjmp	80020c10 <set_current_wp+0x78>
		{
			waypoint_list[i]->current = 0;
80020bf2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80020bf6:	a3 68       	lsl	r8,0x2
80020bf8:	ee f9 ff f0 	ld.w	r9,r7[-16]
80020bfc:	f2 08 00 08 	add	r8,r9,r8
80020c00:	70 09       	ld.w	r9,r8[0x0]
80020c02:	30 08       	mov	r8,0
80020c04:	b2 c8       	st.b	r9[0x4],r8
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_system.sysid
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
	{
		dbg_print("setting current wp");
		int i;
		for (i=0;i<num_of_waypoint;i++)
80020c06:	ee f8 ff fc 	ld.w	r8,r7[-4]
80020c0a:	2f f8       	sub	r8,-1
80020c0c:	ef 48 ff fc 	st.w	r7[-4],r8
80020c10:	ef 19 ff ec 	ld.uh	r9,r7[-20]
80020c14:	ee f8 ff fc 	ld.w	r8,r7[-4]
80020c18:	10 39       	cp.w	r9,r8
80020c1a:	fe 99 ff ec 	brgt	80020bf2 <set_current_wp+0x5a>
		{
			waypoint_list[i]->current = 0;
		}
		if (packet.seq < num_of_waypoint)
80020c1e:	ef 08 ff f8 	ld.sh	r8,r7[-8]
80020c22:	ef 09 ff ec 	ld.sh	r9,r7[-20]
80020c26:	f0 09 19 00 	cp.h	r9,r8
80020c2a:	e0 88 00 2b 	brls	80020c80 <set_current_wp+0xe8>
		{
			waypoint_list[packet.seq]->current = 1;
80020c2e:	ef 08 ff f8 	ld.sh	r8,r7[-8]
80020c32:	5c 78       	castu.h	r8
80020c34:	a3 68       	lsl	r8,0x2
80020c36:	ee f9 ff f0 	ld.w	r9,r7[-16]
80020c3a:	f2 08 00 08 	add	r8,r9,r8
80020c3e:	70 09       	ld.w	r9,r8[0x0]
80020c40:	30 18       	mov	r8,1
80020c42:	b2 c8       	st.b	r9[0x4],r8
			mavlink_msg_mission_current_send(MAVLINK_COMM_0,waypoint_list[packet.seq]->current);
80020c44:	ef 08 ff f8 	ld.sh	r8,r7[-8]
80020c48:	5c 78       	castu.h	r8
80020c4a:	a3 68       	lsl	r8,0x2
80020c4c:	ee f9 ff f0 	ld.w	r9,r7[-16]
80020c50:	f2 08 00 08 	add	r8,r9,r8
80020c54:	70 08       	ld.w	r8,r8[0x0]
80020c56:	11 c8       	ld.ub	r8,r8[0x4]
80020c58:	10 9b       	mov	r11,r8
80020c5a:	30 0c       	mov	r12,0
80020c5c:	fe b0 f4 f8 	rcall	8001f64c <mavlink_msg_mission_current_send>
			
			dbg_print("Set current waypoint to number");
80020c60:	fe cc 00 e8 	sub	r12,pc,232
80020c64:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(packet.seq,10);
80020c68:	ef 08 ff f8 	ld.sh	r8,r7[-8]
80020c6c:	5c 78       	castu.h	r8
80020c6e:	30 ab       	mov	r11,10
80020c70:	10 9c       	mov	r12,r8
80020c72:	f0 16 00 04 	mcall	r6[16]
			dbg_print("\n");
80020c76:	fe cc 0d 9e 	sub	r12,pc,3486
80020c7a:	f0 16 00 01 	mcall	r6[4]
80020c7e:	c0 d8       	rjmp	80020c98 <set_current_wp+0x100>
		}else{
			mavlink_msg_mission_ack_send(MAVLINK_COMM_0,rec->msg.sysid,rec->msg.compid,MAV_CMD_ACK_ERR_ACCESS_DENIED);
80020c80:	ee f8 ff f4 	ld.w	r8,r7[-12]
80020c84:	11 e8       	ld.ub	r8,r8[0x6]
80020c86:	10 9a       	mov	r10,r8
80020c88:	ee f8 ff f4 	ld.w	r8,r7[-12]
80020c8c:	11 d8       	ld.ub	r8,r8[0x5]
80020c8e:	30 39       	mov	r9,3
80020c90:	10 9b       	mov	r11,r8
80020c92:	30 0c       	mov	r12,0
80020c94:	fe b0 f6 1e 	rcall	8001f8d0 <mavlink_msg_mission_ack_send>
		}
	}
}
80020c98:	2f bd       	sub	sp,-20
80020c9a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80020c9e:	00 00       	add	r0,r0
80020ca0:	80 02       	ld.sh	r2,r0[0x0]
80020ca2:	0a 26       	rsub	r6,r5
80020ca4:	43 6c       	lddsp	r12,sp[0xd8]
80020ca6:	65 61       	ld.w	r1,r2[0x58]
80020ca8:	72 20       	ld.w	r0,r9[0x8]
80020caa:	57 61       	stdsp	sp[0x1d8],r1
80020cac:	79 70       	ld.w	r0,r12[0x5c]
80020cae:	6f 69       	ld.w	r9,r7[0x58]
80020cb0:	6e 74       	ld.w	r4,r7[0x1c]
80020cb2:	20 6c       	sub	r12,6
80020cb4:	69 73       	ld.w	r3,r4[0x5c]
80020cb6:	74 00       	ld.w	r0,r10[0x0]

80020cb8 <clear_waypoint_list>:

void clear_waypoint_list(Mavlink_Received_t* rec,  uint16_t* number_of_waypoints, bool* waypoint_set)
{
80020cb8:	eb cd 40 c0 	pushm	r6-r7,lr
80020cbc:	1a 97       	mov	r7,sp
80020cbe:	20 4d       	sub	sp,16
80020cc0:	4a 06       	lddpc	r6,80020d40 <clear_waypoint_list+0x88>
80020cc2:	1e 26       	rsub	r6,pc
80020cc4:	ef 4c ff f8 	st.w	r7[-8],r12
80020cc8:	ef 4b ff f4 	st.w	r7[-12],r11
80020ccc:	ef 4a ff f0 	st.w	r7[-16],r10
	mavlink_mission_clear_all_t packet;
	mavlink_msg_mission_clear_all_decode(&rec->msg,&packet);
80020cd0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80020cd4:	ee c9 00 02 	sub	r9,r7,2
80020cd8:	12 9b       	mov	r11,r9
80020cda:	10 9c       	mov	r12,r8
80020cdc:	fe b0 f5 bb 	rcall	8001f852 <mavlink_msg_mission_clear_all_decode>
	// Check if this message is for this system and subsystem
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_system.sysid
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
80020ce0:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80020ce4:	ec f8 00 70 	ld.w	r8,r6[112]
80020ce8:	11 88       	ld.ub	r8,r8[0x0]
void clear_waypoint_list(Mavlink_Received_t* rec,  uint16_t* number_of_waypoints, bool* waypoint_set)
{
	mavlink_mission_clear_all_t packet;
	mavlink_msg_mission_clear_all_decode(&rec->msg,&packet);
	// Check if this message is for this system and subsystem
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_system.sysid
80020cea:	f0 09 18 00 	cp.b	r9,r8
80020cee:	c2 51       	brne	80020d38 <clear_waypoint_list+0x80>
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
80020cf0:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80020cf4:	ec f8 00 c4 	ld.w	r8,r6[196]
80020cf8:	11 98       	ld.ub	r8,r8[0x1]
void clear_waypoint_list(Mavlink_Received_t* rec,  uint16_t* number_of_waypoints, bool* waypoint_set)
{
	mavlink_mission_clear_all_t packet;
	mavlink_msg_mission_clear_all_decode(&rec->msg,&packet);
	// Check if this message is for this system and subsystem
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_system.sysid
80020cfa:	f0 09 18 00 	cp.b	r9,r8
80020cfe:	c1 d1       	brne	80020d38 <clear_waypoint_list+0x80>
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
	{
		*number_of_waypoints = 0;
80020d00:	ee f9 ff f4 	ld.w	r9,r7[-12]
80020d04:	30 08       	mov	r8,0
80020d06:	b2 08       	st.h	r9[0x0],r8
		num_waypoint_onboard = 0;
80020d08:	ec f9 01 20 	ld.w	r9,r6[288]
80020d0c:	30 08       	mov	r8,0
80020d0e:	b2 08       	st.h	r9[0x0],r8
		*waypoint_set = 0;
80020d10:	ee f9 ff f0 	ld.w	r9,r7[-16]
80020d14:	30 08       	mov	r8,0
80020d16:	b2 88       	st.b	r9[0x0],r8
		mavlink_msg_mission_ack_send(MAVLINK_COMM_0,rec->msg.sysid,rec->msg.compid,MAV_CMD_ACK_OK);
80020d18:	ee f8 ff f8 	ld.w	r8,r7[-8]
80020d1c:	11 e8       	ld.ub	r8,r8[0x6]
80020d1e:	10 9a       	mov	r10,r8
80020d20:	ee f8 ff f8 	ld.w	r8,r7[-8]
80020d24:	11 d8       	ld.ub	r8,r8[0x5]
80020d26:	30 19       	mov	r9,1
80020d28:	10 9b       	mov	r11,r8
80020d2a:	30 0c       	mov	r12,0
80020d2c:	fe b0 f5 d2 	rcall	8001f8d0 <mavlink_msg_mission_ack_send>
		dbg_print("Clear Waypoint list");
80020d30:	fe cc 00 8c 	sub	r12,pc,140
80020d34:	f0 16 00 01 	mcall	r6[4]
	}		
}
80020d38:	2f cd       	sub	sp,-16
80020d3a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80020d3e:	00 00       	add	r0,r0
80020d40:	80 02       	ld.sh	r2,r0[0x0]
80020d42:	0b 46       	ld.w	r6,--r5
80020d44:	62 61       	ld.w	r1,r1[0x18]
80020d46:	73 65       	ld.w	r5,r9[0x58]
80020d48:	5f 6d       	srmi	sp
80020d4a:	6f 64       	ld.w	r4,r7[0x58]
80020d4c:	65 3a       	ld.w	r10,r2[0x4c]
80020d4e:	00 00       	add	r0,r0
80020d50:	2c 20       	sub	r0,-62
80020d52:	63 75       	ld.w	r5,r1[0x5c]
80020d54:	73 74       	ld.w	r4,r9[0x5c]
80020d56:	6f 6d       	ld.w	sp,r7[0x58]
80020d58:	20 6d       	sub	sp,24
80020d5a:	6f 64       	ld.w	r4,r7[0x58]
80020d5c:	65 3a       	ld.w	r10,r2[0x4c]
	...

80020d60 <set_mav_mode>:

void set_mav_mode(Mavlink_Received_t* rec, uint8_t* board_mav_mode, uint8_t* board_mav_state, uint8_t sim_mode)
{
80020d60:	eb cd 40 e0 	pushm	r5-r7,lr
80020d64:	1a 97       	mov	r7,sp
80020d66:	20 6d       	sub	sp,24
80020d68:	4e 26       	lddpc	r6,80020ef0 <set_mav_mode+0x190>
80020d6a:	1e 26       	rsub	r6,pc
80020d6c:	ef 4c ff f4 	st.w	r7[-12],r12
80020d70:	ef 4b ff f0 	st.w	r7[-16],r11
80020d74:	ef 4a ff ec 	st.w	r7[-20],r10
80020d78:	12 98       	mov	r8,r9
80020d7a:	ef 68 ff e8 	st.b	r7[-24],r8
	mavlink_set_mode_t packet;
	mavlink_msg_set_mode_decode(&rec->msg,&packet);
80020d7e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80020d82:	ee c9 00 08 	sub	r9,r7,8
80020d86:	12 9b       	mov	r11,r9
80020d88:	10 9c       	mov	r12,r8
80020d8a:	fe b0 f1 53 	rcall	8001f030 <mavlink_msg_set_mode_decode>
	// Check if this message is for this system and subsystem
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_system.sysid)
80020d8e:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80020d92:	ec f8 00 70 	ld.w	r8,r6[112]
80020d96:	11 88       	ld.ub	r8,r8[0x0]
80020d98:	f0 09 18 00 	cp.b	r9,r8
80020d9c:	e0 81 00 a6 	brne	80020ee8 <set_mav_mode+0x188>
	{
		dbg_print("base_mode:");
80020da0:	fe cc 00 5c 	sub	r12,pc,92
80020da4:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(packet.base_mode,10);
80020da8:	ef 38 ff fd 	ld.ub	r8,r7[-3]
80020dac:	30 ab       	mov	r11,10
80020dae:	10 9c       	mov	r12,r8
80020db0:	f0 16 00 04 	mcall	r6[16]
		dbg_print(", custom mode:");
80020db4:	fe cc 00 64 	sub	r12,pc,100
80020db8:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(packet.custom_mode,10);
80020dbc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80020dc0:	30 ab       	mov	r11,10
80020dc2:	10 9c       	mov	r12,r8
80020dc4:	f0 16 00 04 	mcall	r6[16]
		dbg_print("\n");
80020dc8:	fe cc 0e f0 	sub	r12,pc,3824
80020dcc:	f0 16 00 01 	mcall	r6[4]

		if (sim_mode == 0)
80020dd0:	ef 39 ff e8 	ld.ub	r9,r7[-24]
80020dd4:	30 08       	mov	r8,0
80020dd6:	f0 09 18 00 	cp.b	r9,r8
80020dda:	c3 e1       	brne	80020e56 <set_mav_mode+0xf6>
		{
			switch(packet.base_mode)
80020ddc:	ef 38 ff fd 	ld.ub	r8,r7[-3]
80020de0:	e0 48 00 58 	cp.w	r8,88
80020de4:	c0 e0       	breq	80020e00 <set_mav_mode+0xa0>
80020de6:	e0 89 00 06 	brgt	80020df2 <set_mav_mode+0x92>
80020dea:	e0 48 00 50 	cp.w	r8,80
80020dee:	c0 90       	breq	80020e00 <set_mav_mode+0xa0>
				break;
				case MAV_MODE_MANUAL_ARMED:
					if (get_thrust_from_remote()<-0.95)
					{
						*board_mav_state = MAV_STATE_ACTIVE;
						*board_mav_mode = MAV_MODE_MANUAL_ARMED;
80020df0:	c7 c8       	rjmp	80020ee8 <set_mav_mode+0x188>
		dbg_print_num(packet.custom_mode,10);
		dbg_print("\n");

		if (sim_mode == 0)
		{
			switch(packet.base_mode)
80020df2:	e0 48 00 5c 	cp.w	r8,92
80020df6:	c0 50       	breq	80020e00 <set_mav_mode+0xa0>
80020df8:	e0 48 00 c0 	cp.w	r8,192
80020dfc:	c0 c0       	breq	80020e14 <set_mav_mode+0xb4>
				break;
				case MAV_MODE_MANUAL_ARMED:
					if (get_thrust_from_remote()<-0.95)
					{
						*board_mav_state = MAV_STATE_ACTIVE;
						*board_mav_mode = MAV_MODE_MANUAL_ARMED;
80020dfe:	c7 58       	rjmp	80020ee8 <set_mav_mode+0x188>
			switch(packet.base_mode)
			{
				case MAV_MODE_STABILIZE_DISARMED:
				case MAV_MODE_GUIDED_DISARMED:
				case MAV_MODE_AUTO_DISARMED:
					*board_mav_state = MAV_STATE_STANDBY;
80020e00:	ee f9 ff ec 	ld.w	r9,r7[-20]
80020e04:	30 38       	mov	r8,3
80020e06:	b2 88       	st.b	r9[0x0],r8
					*board_mav_mode = MAV_MODE_MANUAL_DISARMED;
80020e08:	ee f9 ff f0 	ld.w	r9,r7[-16]
80020e0c:	34 08       	mov	r8,64
80020e0e:	b2 88       	st.b	r9[0x0],r8
				break;
80020e10:	d7 03       	nop
80020e12:	c6 b8       	rjmp	80020ee8 <set_mav_mode+0x188>
				case MAV_MODE_MANUAL_ARMED:
					if (get_thrust_from_remote()<-0.95)
80020e14:	fe b0 f6 64 	rcall	8001fadc <get_thrust_from_remote>
80020e18:	18 98       	mov	r8,r12
80020e1a:	10 9c       	mov	r12,r8
80020e1c:	f0 16 00 02 	mcall	r6[8]
80020e20:	30 05       	mov	r5,0
80020e22:	e0 68 66 66 	mov	r8,26214
80020e26:	ea 18 66 66 	orh	r8,0x6666
80020e2a:	e0 69 66 66 	mov	r9,26214
80020e2e:	ea 19 bf ee 	orh	r9,0xbfee
80020e32:	f0 16 00 1d 	mcall	r6[116]
80020e36:	18 98       	mov	r8,r12
80020e38:	58 08       	cp.w	r8,0
80020e3a:	c0 20       	breq	80020e3e <set_mav_mode+0xde>
80020e3c:	30 15       	mov	r5,1
80020e3e:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
80020e42:	c5 20       	breq	80020ee6 <set_mav_mode+0x186>
					{
						*board_mav_state = MAV_STATE_ACTIVE;
80020e44:	ee f9 ff ec 	ld.w	r9,r7[-20]
80020e48:	30 48       	mov	r8,4
80020e4a:	b2 88       	st.b	r9[0x0],r8
						*board_mav_mode = MAV_MODE_MANUAL_ARMED;
80020e4c:	ee f9 ff f0 	ld.w	r9,r7[-16]
80020e50:	3c 08       	mov	r8,-64
80020e52:	b2 88       	st.b	r9[0x0],r8
80020e54:	c4 a8       	rjmp	80020ee8 <set_mav_mode+0x188>
					}
				break;
			}
		}else{
			switch(packet.base_mode)
80020e56:	ef 38 ff fd 	ld.ub	r8,r7[-3]
80020e5a:	e0 48 00 c0 	cp.w	r8,192
80020e5e:	c2 00       	breq	80020e9e <set_mav_mode+0x13e>
80020e60:	e0 89 00 0c 	brgt	80020e78 <set_mav_mode+0x118>
80020e64:	e0 48 00 58 	cp.w	r8,88
80020e68:	c1 20       	breq	80020e8c <set_mav_mode+0x12c>
80020e6a:	e0 48 00 5c 	cp.w	r8,92
80020e6e:	c0 f0       	breq	80020e8c <set_mav_mode+0x12c>
80020e70:	e0 48 00 50 	cp.w	r8,80
80020e74:	c0 c0       	breq	80020e8c <set_mav_mode+0x12c>
80020e76:	c3 98       	rjmp	80020ee8 <set_mav_mode+0x188>
80020e78:	e0 48 00 d8 	cp.w	r8,216
80020e7c:	c2 30       	breq	80020ec2 <set_mav_mode+0x162>
80020e7e:	e0 48 00 dc 	cp.w	r8,220
80020e82:	c2 90       	breq	80020ed4 <set_mav_mode+0x174>
80020e84:	e0 48 00 d0 	cp.w	r8,208
80020e88:	c1 40       	breq	80020eb0 <set_mav_mode+0x150>
80020e8a:	c2 f8       	rjmp	80020ee8 <set_mav_mode+0x188>
			{
				case MAV_MODE_STABILIZE_DISARMED:
				case MAV_MODE_GUIDED_DISARMED:
				case MAV_MODE_AUTO_DISARMED:
					*board_mav_state = MAV_STATE_STANDBY;
80020e8c:	ee f9 ff ec 	ld.w	r9,r7[-20]
80020e90:	30 38       	mov	r8,3
80020e92:	b2 88       	st.b	r9[0x0],r8
					*board_mav_mode = MAV_MODE_MANUAL_DISARMED;
80020e94:	ee f9 ff f0 	ld.w	r9,r7[-16]
80020e98:	34 08       	mov	r8,64
80020e9a:	b2 88       	st.b	r9[0x0],r8
				break;
80020e9c:	c2 68       	rjmp	80020ee8 <set_mav_mode+0x188>
				case MAV_MODE_MANUAL_ARMED:
					*board_mav_state = MAV_STATE_ACTIVE;
80020e9e:	ee f9 ff ec 	ld.w	r9,r7[-20]
80020ea2:	30 48       	mov	r8,4
80020ea4:	b2 88       	st.b	r9[0x0],r8
					*board_mav_mode = MAV_MODE_MANUAL_ARMED;
80020ea6:	ee f9 ff f0 	ld.w	r9,r7[-16]
80020eaa:	3c 08       	mov	r8,-64
80020eac:	b2 88       	st.b	r9[0x0],r8
				break;
80020eae:	c1 d8       	rjmp	80020ee8 <set_mav_mode+0x188>
				case MAV_MODE_STABILIZE_ARMED:
					*board_mav_state = MAV_STATE_ACTIVE;
80020eb0:	ee f9 ff ec 	ld.w	r9,r7[-20]
80020eb4:	30 48       	mov	r8,4
80020eb6:	b2 88       	st.b	r9[0x0],r8
					*board_mav_mode = MAV_MODE_STABILIZE_ARMED;
80020eb8:	ee f9 ff f0 	ld.w	r9,r7[-16]
80020ebc:	3d 08       	mov	r8,-48
80020ebe:	b2 88       	st.b	r9[0x0],r8
				break;
80020ec0:	c1 48       	rjmp	80020ee8 <set_mav_mode+0x188>
				case MAV_MODE_GUIDED_ARMED:
					*board_mav_state = MAV_STATE_ACTIVE;
80020ec2:	ee f9 ff ec 	ld.w	r9,r7[-20]
80020ec6:	30 48       	mov	r8,4
80020ec8:	b2 88       	st.b	r9[0x0],r8
					*board_mav_mode = MAV_MODE_GUIDED_ARMED;
80020eca:	ee f9 ff f0 	ld.w	r9,r7[-16]
80020ece:	3d 88       	mov	r8,-40
80020ed0:	b2 88       	st.b	r9[0x0],r8
				break;
80020ed2:	c0 b8       	rjmp	80020ee8 <set_mav_mode+0x188>
				case MAV_MODE_AUTO_ARMED:
					*board_mav_state = MAV_STATE_ACTIVE;
80020ed4:	ee f9 ff ec 	ld.w	r9,r7[-20]
80020ed8:	30 48       	mov	r8,4
80020eda:	b2 88       	st.b	r9[0x0],r8
					*board_mav_mode = MAV_MODE_AUTO_ARMED;
80020edc:	ee f9 ff f0 	ld.w	r9,r7[-16]
80020ee0:	3d c8       	mov	r8,-36
80020ee2:	b2 88       	st.b	r9[0x0],r8
80020ee4:	c0 28       	rjmp	80020ee8 <set_mav_mode+0x188>
				break;
				case MAV_MODE_MANUAL_ARMED:
					if (get_thrust_from_remote()<-0.95)
					{
						*board_mav_state = MAV_STATE_ACTIVE;
						*board_mav_mode = MAV_MODE_MANUAL_ARMED;
80020ee6:	d7 03       	nop
				break;
			}
		}
		
	}
}
80020ee8:	2f ad       	sub	sp,-24
80020eea:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80020eee:	00 00       	add	r0,r0
80020ef0:	80 02       	ld.sh	r2,r0[0x0]
80020ef2:	0b ee       	ld.ub	lr,r5[0x6]
80020ef4:	53 65       	stdsp	sp[0xd8],r5
80020ef6:	6e 64       	ld.w	r4,r7[0x18]
80020ef8:	69 6e       	ld.w	lr,r4[0x58]
80020efa:	67 20       	ld.w	r0,r3[0x48]
80020efc:	77 61       	ld.w	r1,r11[0x58]
80020efe:	79 70       	ld.w	r0,r12[0x5c]
80020f00:	6f 69       	ld.w	r9,r7[0x58]
80020f02:	6e 74       	ld.w	r4,r7[0x1c]
80020f04:	20 74       	sub	r4,7
80020f06:	69 6d       	ld.w	sp,r4[0x58]
80020f08:	65 6f       	ld.w	pc,r2[0x58]
80020f0a:	75 74       	ld.w	r4,r10[0x5c]
80020f0c:	00 00       	add	r0,r0
80020f0e:	00 00       	add	r0,r0
80020f10:	52 65       	stdsp	sp[0x98],r5
80020f12:	63 65       	ld.w	r5,r1[0x58]
80020f14:	69 76       	ld.w	r6,r4[0x5c]
80020f16:	69 6e       	ld.w	lr,r4[0x58]
80020f18:	67 20       	ld.w	r0,r3[0x48]
80020f1a:	77 61       	ld.w	r1,r11[0x58]
80020f1c:	79 70       	ld.w	r0,r12[0x5c]
80020f1e:	6f 69       	ld.w	r9,r7[0x58]
80020f20:	6e 74       	ld.w	r4,r7[0x1c]
80020f22:	20 74       	sub	r4,7
80020f24:	69 6d       	ld.w	sp,r4[0x58]
80020f26:	65 6f       	ld.w	pc,r2[0x58]
80020f28:	75 74       	ld.w	r4,r10[0x5c]
	...

80020f2c <control_time_out_waypoint_msg>:

void control_time_out_waypoint_msg(uint16_t* num_of_waypoint, bool* waypoint_receiving, bool* waypoint_sending)
{
80020f2c:	eb cd 40 c0 	pushm	r6-r7,lr
80020f30:	1a 97       	mov	r7,sp
80020f32:	20 4d       	sub	sp,16
80020f34:	4a 76       	lddpc	r6,80020fd0 <control_time_out_waypoint_msg+0xa4>
80020f36:	1e 26       	rsub	r6,pc
80020f38:	ef 4c ff f8 	st.w	r7[-8],r12
80020f3c:	ef 4b ff f4 	st.w	r7[-12],r11
80020f40:	ef 4a ff f0 	st.w	r7[-16],r10
	if (*waypoint_sending || *waypoint_receiving)
80020f44:	ee f8 ff f0 	ld.w	r8,r7[-16]
80020f48:	11 88       	ld.ub	r8,r8[0x0]
80020f4a:	58 08       	cp.w	r8,0
80020f4c:	c0 61       	brne	80020f58 <control_time_out_waypoint_msg+0x2c>
80020f4e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80020f52:	11 88       	ld.ub	r8,r8[0x0]
80020f54:	58 08       	cp.w	r8,0
80020f56:	c3 90       	breq	80020fc8 <control_time_out_waypoint_msg+0x9c>
	{
		uint32_t tnow = get_millis();
80020f58:	f0 16 00 0f 	mcall	r6[60]
80020f5c:	18 98       	mov	r8,r12
80020f5e:	ef 48 ff fc 	st.w	r7[-4],r8
		
		if ((tnow - start_timeout) > timeout_max_wp)
80020f62:	ec f8 01 64 	ld.w	r8,r6[356]
80020f66:	70 08       	ld.w	r8,r8[0x0]
80020f68:	ee f9 ff fc 	ld.w	r9,r7[-4]
80020f6c:	10 19       	sub	r9,r8
80020f6e:	ec f8 03 f4 	ld.w	r8,r6[1012]
80020f72:	70 08       	ld.w	r8,r8[0x0]
80020f74:	10 39       	cp.w	r9,r8
80020f76:	e0 88 00 29 	brls	80020fc8 <control_time_out_waypoint_msg+0x9c>
		{
			start_timeout = tnow;
80020f7a:	ec f8 01 64 	ld.w	r8,r6[356]
80020f7e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80020f82:	91 09       	st.w	r8[0x0],r9
			if (*waypoint_sending)
80020f84:	ee f8 ff f0 	ld.w	r8,r7[-16]
80020f88:	11 88       	ld.ub	r8,r8[0x0]
80020f8a:	58 08       	cp.w	r8,0
80020f8c:	c0 90       	breq	80020f9e <control_time_out_waypoint_msg+0x72>
			{
				*waypoint_sending = false;
80020f8e:	ee f9 ff f0 	ld.w	r9,r7[-16]
80020f92:	30 08       	mov	r8,0
80020f94:	b2 88       	st.b	r9[0x0],r8
				dbg_print("Sending waypoint timeout");
80020f96:	fe cc 00 a2 	sub	r12,pc,162
80020f9a:	f0 16 00 01 	mcall	r6[4]
			}
			if (*waypoint_receiving)
80020f9e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80020fa2:	11 88       	ld.ub	r8,r8[0x0]
80020fa4:	58 08       	cp.w	r8,0
80020fa6:	c1 10       	breq	80020fc8 <control_time_out_waypoint_msg+0x9c>
			{
				*waypoint_receiving = false;
80020fa8:	ee f9 ff f4 	ld.w	r9,r7[-12]
80020fac:	30 08       	mov	r8,0
80020fae:	b2 88       	st.b	r9[0x0],r8
				
				dbg_print("Receiving waypoint timeout");
80020fb0:	fe cc 00 a0 	sub	r12,pc,160
80020fb4:	f0 16 00 01 	mcall	r6[4]
				*num_of_waypoint = 0;
80020fb8:	ee f9 ff f8 	ld.w	r9,r7[-8]
80020fbc:	30 08       	mov	r8,0
80020fbe:	b2 08       	st.h	r9[0x0],r8
				num_waypoint_onboard = 0;
80020fc0:	ec f9 01 20 	ld.w	r9,r6[288]
80020fc4:	30 08       	mov	r8,0
80020fc6:	b2 08       	st.h	r9[0x0],r8
				
			}
		}
	}
}
80020fc8:	2f cd       	sub	sp,-16
80020fca:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80020fce:	00 00       	add	r0,r0
80020fd0:	80 02       	ld.sh	r2,r0[0x0]
80020fd2:	0d ba       	ld.ub	r10,r6[0x3]
80020fd4:	77 70       	ld.w	r0,r11[0x5c]
80020fd6:	5f 67       	srmi	r7
80020fd8:	6c 6f       	ld.w	pc,r6[0x18]
80020fda:	62 61       	ld.w	r1,r1[0x18]
80020fdc:	6c 3a       	ld.w	r10,r6[0xc]
80020fde:	20 6c       	sub	r12,6
80020fe0:	61 74       	ld.w	r4,r0[0x5c]
80020fe2:	20 28       	sub	r8,2
80020fe4:	78 31       	ld.w	r1,r12[0xc]
80020fe6:	65 37       	ld.w	r7,r2[0x4c]
80020fe8:	29 3a       	sub	r10,-109
80020fea:	00 00       	add	r0,r0
80020fec:	20 6c       	sub	r12,6
80020fee:	6f 6e       	ld.w	lr,r7[0x58]
80020ff0:	67 20       	ld.w	r0,r3[0x48]
80020ff2:	28 78       	sub	r8,-121
80020ff4:	31 65       	mov	r5,22
80020ff6:	37 29       	mov	r9,114
80020ff8:	3a 00       	mov	r0,-96
80020ffa:	00 00       	add	r0,r0
80020ffc:	20 61       	sub	r1,6
80020ffe:	6c 74       	ld.w	r4,r6[0x1c]
80021000:	20 28       	sub	r8,2
80021002:	78 31       	ld.w	r1,r12[0xc]
80021004:	30 30       	mov	r0,3
80021006:	30 29       	mov	r9,2
80021008:	3a 00       	mov	r0,-96
8002100a:	00 00       	add	r0,r0
8002100c:	20 77       	sub	r7,7
8002100e:	70 5f       	ld.w	pc,r8[0x14]
80021010:	63 6f       	ld.w	pc,r1[0x58]
80021012:	6f 72       	ld.w	r2,r7[0x5c]
80021014:	3a 20       	mov	r0,-94
80021016:	78 20       	ld.w	r0,r12[0x8]
80021018:	28 78       	sub	r8,-121
8002101a:	31 30       	mov	r0,19
8002101c:	30 29       	mov	r9,2
8002101e:	3a 00       	mov	r0,-96
80021020:	2c 20       	sub	r0,-62
80021022:	79 20       	ld.w	r0,r12[0x48]
80021024:	28 78       	sub	r8,-121
80021026:	31 30       	mov	r0,19
80021028:	30 29       	mov	r9,2
8002102a:	3a 00       	mov	r0,-96
8002102c:	2c 20       	sub	r0,-62
8002102e:	7a 20       	ld.w	r0,sp[0x8]
80021030:	28 78       	sub	r8,-121
80021032:	31 30       	mov	r0,19
80021034:	30 29       	mov	r9,2
80021036:	3a 00       	mov	r0,-96
80021038:	20 6c       	sub	r12,6
8002103a:	6f 63       	ld.w	r3,r7[0x58]
8002103c:	61 6c       	ld.w	r12,r0[0x58]
8002103e:	4f 72       	lddpc	r2,80021218 <set_waypoint_from_frame+0x192>
80021040:	69 67       	ld.w	r7,r4[0x58]
80021042:	69 6e       	ld.w	lr,r4[0x58]
80021044:	20 6c       	sub	r12,6
80021046:	61 74       	ld.w	r4,r0[0x5c]
80021048:	20 28       	sub	r8,2
8002104a:	78 31       	ld.w	r1,r12[0xc]
8002104c:	65 37       	ld.w	r7,r2[0x4c]
8002104e:	29 3a       	sub	r10,-109
80021050:	00 00       	add	r0,r0
80021052:	00 00       	add	r0,r0
80021054:	4c 6f       	lddpc	pc,8002116c <set_waypoint_from_frame+0xe6>
80021056:	63 61       	ld.w	r1,r1[0x58]
80021058:	6c 4f       	ld.w	pc,r6[0x10]
8002105a:	72 69       	ld.w	r9,r9[0x18]
8002105c:	67 69       	ld.w	r9,r3[0x58]
8002105e:	6e 3a       	ld.w	r10,r7[0xc]
80021060:	20 6c       	sub	r12,6
80021062:	61 74       	ld.w	r4,r0[0x5c]
80021064:	20 28       	sub	r8,2
80021066:	78 31       	ld.w	r1,r12[0xc]
80021068:	65 37       	ld.w	r7,r2[0x4c]
8002106a:	29 3a       	sub	r10,-109
8002106c:	00 00       	add	r0,r0
8002106e:	00 00       	add	r0,r0
80021070:	20 67       	sub	r7,6
80021072:	6c 6f       	ld.w	pc,r6[0x18]
80021074:	62 61       	ld.w	r1,r1[0x18]
80021076:	6c 20       	ld.w	r0,r6[0x8]
80021078:	61 6c       	ld.w	r12,r0[0x58]
8002107a:	74 20       	ld.w	r0,r10[0x8]
8002107c:	28 78       	sub	r8,-121
8002107e:	31 30       	mov	r0,19
80021080:	30 30       	mov	r0,3
80021082:	29 3a       	sub	r10,-109
	...

80021086 <set_waypoint_from_frame>:

local_coordinates_t set_waypoint_from_frame(waypoint_struct current_wp, global_position_t origin)
{
80021086:	eb cd 40 e8 	pushm	r3,r5-r7,lr
8002108a:	1a 97       	mov	r7,sp
8002108c:	fa cd 00 a8 	sub	sp,sp,168
80021090:	fe f6 05 f0 	ld.w	r6,pc[1520]
80021094:	1e 26       	rsub	r6,pc
80021096:	ee c5 ff ec 	sub	r5,r7,-20
8002109a:	18 93       	mov	r3,r12
	global_position_t waypoint_global;
	local_coordinates_t waypoint_coor;
	
	float rel_pos[3];
	
	for (i=0;i<3;i++)
8002109c:	30 08       	mov	r8,0
8002109e:	ef 68 ff ff 	st.b	r7[-1],r8
800210a2:	c0 e8       	rjmp	800210be <set_waypoint_from_frame+0x38>
	{
		waypoint_coor.pos[i] = 0.0;
800210a4:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800210a8:	a3 68       	lsl	r8,0x2
800210aa:	ee 08 00 08 	add	r8,r7,r8
800210ae:	30 09       	mov	r9,0
800210b0:	f1 49 ff b0 	st.w	r8[-80],r9
	global_position_t waypoint_global;
	local_coordinates_t waypoint_coor;
	
	float rel_pos[3];
	
	for (i=0;i<3;i++)
800210b4:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800210b8:	2f f8       	sub	r8,-1
800210ba:	ef 68 ff ff 	st.b	r7[-1],r8
800210be:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800210c2:	30 28       	mov	r8,2
800210c4:	f0 09 18 00 	cp.b	r9,r8
800210c8:	fe 98 ff ee 	brls	800210a4 <set_waypoint_from_frame+0x1e>
	{
		waypoint_coor.pos[i] = 0.0;
	}

	switch(current_wp.frame)
800210cc:	0b 88       	ld.ub	r8,r5[0x0]
800210ce:	58 18       	cp.w	r8,1
800210d0:	e0 80 01 31 	breq	80021332 <set_waypoint_from_frame+0x2ac>
800210d4:	e0 89 00 06 	brgt	800210e0 <set_waypoint_from_frame+0x5a>
800210d8:	58 08       	cp.w	r8,0
800210da:	c0 b0       	breq	800210f0 <set_waypoint_from_frame+0x6a>
800210dc:	e0 8f 02 a7 	bral	8002162a <set_waypoint_from_frame+0x5a4>
800210e0:	58 28       	cp.w	r8,2
800210e2:	e0 80 02 a3 	breq	80021628 <set_waypoint_from_frame+0x5a2>
800210e6:	58 38       	cp.w	r8,3
800210e8:	e0 80 01 a7 	breq	80021436 <set_waypoint_from_frame+0x3b0>
800210ec:	e0 8f 02 9f 	bral	8002162a <set_waypoint_from_frame+0x5a4>
	{
		case MAV_FRAME_GLOBAL:
			waypoint_global.latitude = current_wp.x;
800210f0:	ea e8 00 18 	ld.d	r8,r5[24]
800210f4:	ee e9 ff e8 	st.d	r7[-24],r8
			waypoint_global.longitude = current_wp.y;
800210f8:	ea e8 00 20 	ld.d	r8,r5[32]
800210fc:	ee e9 ff e0 	st.d	r7[-32],r8
			waypoint_global.altitude = current_wp.z;
80021100:	ea e8 00 28 	ld.d	r8,r5[40]
80021104:	10 9a       	mov	r10,r8
80021106:	12 9b       	mov	r11,r9
80021108:	f0 16 00 09 	mcall	r6[36]
8002110c:	18 98       	mov	r8,r12
8002110e:	ef 48 ff f0 	st.w	r7[-16],r8
			waypoint_coor = global_to_local_position(waypoint_global,origin);
80021112:	ee cc 00 a8 	sub	r12,r7,168
80021116:	20 7d       	sub	sp,28
80021118:	1a 98       	mov	r8,sp
8002111a:	10 9a       	mov	r10,r8
8002111c:	ea cb ff d0 	sub	r11,r5,-48
80021120:	f4 c8 00 00 	sub	r8,r10,0
80021124:	f6 c9 00 00 	sub	r9,r11,0
80021128:	72 0e       	ld.w	lr,r9[0x0]
8002112a:	91 0e       	st.w	r8[0x0],lr
8002112c:	72 1e       	ld.w	lr,r9[0x4]
8002112e:	91 1e       	st.w	r8[0x4],lr
80021130:	72 2e       	ld.w	lr,r9[0x8]
80021132:	91 2e       	st.w	r8[0x8],lr
80021134:	72 39       	ld.w	r9,r9[0xc]
80021136:	91 39       	st.w	r8[0xc],r9
80021138:	f6 e8 00 10 	ld.d	r8,r11[16]
8002113c:	f4 e9 00 10 	st.d	r10[16],r8
80021140:	76 68       	ld.w	r8,r11[0x18]
80021142:	95 68       	st.w	r10[0x18],r8
80021144:	20 7d       	sub	sp,28
80021146:	1a 98       	mov	r8,sp
80021148:	10 9a       	mov	r10,r8
8002114a:	ee cb 00 20 	sub	r11,r7,32
8002114e:	f4 c8 00 00 	sub	r8,r10,0
80021152:	f6 c9 00 00 	sub	r9,r11,0
80021156:	72 0e       	ld.w	lr,r9[0x0]
80021158:	91 0e       	st.w	r8[0x0],lr
8002115a:	72 1e       	ld.w	lr,r9[0x4]
8002115c:	91 1e       	st.w	r8[0x4],lr
8002115e:	72 2e       	ld.w	lr,r9[0x8]
80021160:	91 2e       	st.w	r8[0x8],lr
80021162:	72 39       	ld.w	r9,r9[0xc]
80021164:	91 39       	st.w	r8[0xc],r9
80021166:	f6 e8 00 10 	ld.d	r8,r11[16]
8002116a:	f4 e9 00 10 	st.d	r10[16],r8
8002116e:	76 68       	ld.w	r8,r11[0x18]
80021170:	95 68       	st.w	r10[0x18],r8
80021172:	f0 16 00 73 	mcall	r6[460]
80021176:	2f 2d       	sub	sp,-56
80021178:	ee cb 00 50 	sub	r11,r7,80
8002117c:	ee ca 00 a8 	sub	r10,r7,168
80021180:	f6 c8 00 00 	sub	r8,r11,0
80021184:	f4 c9 00 00 	sub	r9,r10,0
80021188:	72 0c       	ld.w	r12,r9[0x0]
8002118a:	91 0c       	st.w	r8[0x0],r12
8002118c:	72 1c       	ld.w	r12,r9[0x4]
8002118e:	91 1c       	st.w	r8[0x4],r12
80021190:	72 2c       	ld.w	r12,r9[0x8]
80021192:	91 2c       	st.w	r8[0x8],r12
80021194:	72 39       	ld.w	r9,r9[0xc]
80021196:	91 39       	st.w	r8[0xc],r9
80021198:	f6 c8 ff f0 	sub	r8,r11,-16
8002119c:	f4 c9 ff f0 	sub	r9,r10,-16
800211a0:	72 0c       	ld.w	r12,r9[0x0]
800211a2:	91 0c       	st.w	r8[0x0],r12
800211a4:	72 1c       	ld.w	r12,r9[0x4]
800211a6:	91 1c       	st.w	r8[0x4],r12
800211a8:	72 2c       	ld.w	r12,r9[0x8]
800211aa:	91 2c       	st.w	r8[0x8],r12
800211ac:	72 39       	ld.w	r9,r9[0xc]
800211ae:	91 39       	st.w	r8[0xc],r9
800211b0:	f6 c8 ff e0 	sub	r8,r11,-32
800211b4:	f4 c9 ff e0 	sub	r9,r10,-32
800211b8:	72 0a       	ld.w	r10,r9[0x0]
800211ba:	91 0a       	st.w	r8[0x0],r10
800211bc:	72 1a       	ld.w	r10,r9[0x4]
800211be:	91 1a       	st.w	r8[0x4],r10
800211c0:	72 2a       	ld.w	r10,r9[0x8]
800211c2:	91 2a       	st.w	r8[0x8],r10
800211c4:	72 39       	ld.w	r9,r9[0xc]
800211c6:	91 39       	st.w	r8[0xc],r9
			
			dbg_print("wp_global: lat (x1e7):");
800211c8:	fe cc 01 f4 	sub	r12,pc,500
800211cc:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(waypoint_global.latitude*10000000,10);
800211d0:	ee ea ff e8 	ld.d	r10,r7[-24]
800211d4:	30 08       	mov	r8,0
800211d6:	e0 69 12 d0 	mov	r9,4816
800211da:	ea 19 41 63 	orh	r9,0x4163
800211de:	f0 16 00 03 	mcall	r6[12]
800211e2:	14 98       	mov	r8,r10
800211e4:	16 99       	mov	r9,r11
800211e6:	10 9a       	mov	r10,r8
800211e8:	12 9b       	mov	r11,r9
800211ea:	f0 16 00 14 	mcall	r6[80]
800211ee:	18 98       	mov	r8,r12
800211f0:	30 ab       	mov	r11,10
800211f2:	10 9c       	mov	r12,r8
800211f4:	f0 16 00 04 	mcall	r6[16]
			dbg_print(" long (x1e7):");
800211f8:	fe cc 02 0c 	sub	r12,pc,524
800211fc:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(waypoint_global.longitude*10000000,10);
80021200:	ee ea ff e0 	ld.d	r10,r7[-32]
80021204:	30 08       	mov	r8,0
80021206:	e0 69 12 d0 	mov	r9,4816
8002120a:	ea 19 41 63 	orh	r9,0x4163
8002120e:	f0 16 00 03 	mcall	r6[12]
80021212:	14 98       	mov	r8,r10
80021214:	16 99       	mov	r9,r11
80021216:	10 9a       	mov	r10,r8
80021218:	12 9b       	mov	r11,r9
8002121a:	f0 16 00 14 	mcall	r6[80]
8002121e:	18 98       	mov	r8,r12
80021220:	30 ab       	mov	r11,10
80021222:	10 9c       	mov	r12,r8
80021224:	f0 16 00 04 	mcall	r6[16]
			dbg_print(" alt (x1000):");
80021228:	fe cc 02 2c 	sub	r12,pc,556
8002122c:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(waypoint_global.altitude*1000,10);
80021230:	ee f9 ff f0 	ld.w	r9,r7[-16]
80021234:	fc 18 44 7a 	movh	r8,0x447a
80021238:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8002123c:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80021240:	30 ab       	mov	r11,10
80021242:	10 9c       	mov	r12,r8
80021244:	f0 16 00 04 	mcall	r6[16]
			dbg_print(" wp_coor: x (x100):");
80021248:	fe cc 02 3c 	sub	r12,pc,572
8002124c:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(waypoint_coor.pos[X]*100,10);
80021250:	ee f9 ff b0 	ld.w	r9,r7[-80]
80021254:	fc 18 42 c8 	movh	r8,0x42c8
80021258:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8002125c:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80021260:	30 ab       	mov	r11,10
80021262:	10 9c       	mov	r12,r8
80021264:	f0 16 00 04 	mcall	r6[16]
			dbg_print(", y (x100):");
80021268:	fe cc 02 48 	sub	r12,pc,584
8002126c:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(waypoint_coor.pos[Y]*100,10);
80021270:	ee f9 ff b4 	ld.w	r9,r7[-76]
80021274:	fc 18 42 c8 	movh	r8,0x42c8
80021278:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8002127c:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80021280:	30 ab       	mov	r11,10
80021282:	10 9c       	mov	r12,r8
80021284:	f0 16 00 04 	mcall	r6[16]
			dbg_print(", z (x100):");
80021288:	fe cc 02 5c 	sub	r12,pc,604
8002128c:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(waypoint_coor.pos[Z]*100,10);
80021290:	ee f9 ff b8 	ld.w	r9,r7[-72]
80021294:	fc 18 42 c8 	movh	r8,0x42c8
80021298:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8002129c:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
800212a0:	30 ab       	mov	r11,10
800212a2:	10 9c       	mov	r12,r8
800212a4:	f0 16 00 04 	mcall	r6[16]
			dbg_print(" localOrigin lat (x1e7):");
800212a8:	fe cc 02 70 	sub	r12,pc,624
800212ac:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(origin.latitude*10000000,10);
800212b0:	ea ea 00 38 	ld.d	r10,r5[56]
800212b4:	30 08       	mov	r8,0
800212b6:	e0 69 12 d0 	mov	r9,4816
800212ba:	ea 19 41 63 	orh	r9,0x4163
800212be:	f0 16 00 03 	mcall	r6[12]
800212c2:	14 98       	mov	r8,r10
800212c4:	16 99       	mov	r9,r11
800212c6:	10 9a       	mov	r10,r8
800212c8:	12 9b       	mov	r11,r9
800212ca:	f0 16 00 14 	mcall	r6[80]
800212ce:	18 98       	mov	r8,r12
800212d0:	30 ab       	mov	r11,10
800212d2:	10 9c       	mov	r12,r8
800212d4:	f0 16 00 04 	mcall	r6[16]
			dbg_print(" long (x1e7):");
800212d8:	fe cc 02 ec 	sub	r12,pc,748
800212dc:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(origin.longitude*10000000,10);
800212e0:	ea ea 00 30 	ld.d	r10,r5[48]
800212e4:	30 08       	mov	r8,0
800212e6:	e0 69 12 d0 	mov	r9,4816
800212ea:	ea 19 41 63 	orh	r9,0x4163
800212ee:	f0 16 00 03 	mcall	r6[12]
800212f2:	14 98       	mov	r8,r10
800212f4:	16 99       	mov	r9,r11
800212f6:	10 9a       	mov	r10,r8
800212f8:	12 9b       	mov	r11,r9
800212fa:	f0 16 00 14 	mcall	r6[80]
800212fe:	18 98       	mov	r8,r12
80021300:	30 ab       	mov	r11,10
80021302:	10 9c       	mov	r12,r8
80021304:	f0 16 00 04 	mcall	r6[16]
			dbg_print(" alt (x1000):");
80021308:	fe cc 03 0c 	sub	r12,pc,780
8002130c:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(origin.altitude*1000,10);
80021310:	6b 09       	ld.w	r9,r5[0x40]
80021312:	fc 18 44 7a 	movh	r8,0x447a
80021316:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8002131a:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8002131e:	30 ab       	mov	r11,10
80021320:	10 9c       	mov	r12,r8
80021322:	f0 16 00 04 	mcall	r6[16]
			dbg_print("\n");
80021326:	fe cc 14 4e 	sub	r12,pc,5198
8002132a:	f0 16 00 01 	mcall	r6[4]
		
		break;
8002132e:	e0 8f 01 7e 	bral	8002162a <set_waypoint_from_frame+0x5a4>
		case MAV_FRAME_LOCAL_NED:
			waypoint_coor.pos[X] = current_wp.x;
80021332:	ea e8 00 18 	ld.d	r8,r5[24]
80021336:	10 9a       	mov	r10,r8
80021338:	12 9b       	mov	r11,r9
8002133a:	f0 16 00 09 	mcall	r6[36]
8002133e:	18 98       	mov	r8,r12
80021340:	ef 48 ff b0 	st.w	r7[-80],r8
			waypoint_coor.pos[Y] = current_wp.y;
80021344:	ea e8 00 20 	ld.d	r8,r5[32]
80021348:	10 9a       	mov	r10,r8
8002134a:	12 9b       	mov	r11,r9
8002134c:	f0 16 00 09 	mcall	r6[36]
80021350:	18 98       	mov	r8,r12
80021352:	ef 48 ff b4 	st.w	r7[-76],r8
			waypoint_coor.pos[Z] = current_wp.z;
80021356:	ea e8 00 28 	ld.d	r8,r5[40]
8002135a:	10 9a       	mov	r10,r8
8002135c:	12 9b       	mov	r11,r9
8002135e:	f0 16 00 09 	mcall	r6[36]
80021362:	18 98       	mov	r8,r12
80021364:	ef 48 ff b8 	st.w	r7[-72],r8
			waypoint_coor.heading= deg_to_rad(current_wp.param4);
80021368:	6a 58       	ld.w	r8,r5[0x14]
8002136a:	10 9c       	mov	r12,r8
8002136c:	f0 16 00 02 	mcall	r6[8]
80021370:	e0 68 2d 18 	mov	r8,11544
80021374:	ea 18 54 44 	orh	r8,0x5444
80021378:	e0 69 21 fb 	mov	r9,8699
8002137c:	ea 19 40 09 	orh	r9,0x4009
80021380:	f0 16 00 03 	mcall	r6[12]
80021384:	14 98       	mov	r8,r10
80021386:	16 99       	mov	r9,r11
80021388:	10 9a       	mov	r10,r8
8002138a:	12 9b       	mov	r11,r9
8002138c:	30 08       	mov	r8,0
8002138e:	e0 69 80 00 	mov	r9,32768
80021392:	ea 19 40 66 	orh	r9,0x4066
80021396:	f0 16 00 0c 	mcall	r6[48]
8002139a:	14 98       	mov	r8,r10
8002139c:	16 99       	mov	r9,r11
8002139e:	10 9a       	mov	r10,r8
800213a0:	12 9b       	mov	r11,r9
800213a2:	f0 16 00 09 	mcall	r6[36]
800213a6:	18 98       	mov	r8,r12
800213a8:	ef 48 ff bc 	st.w	r7[-68],r8
			waypoint_coor.origin = local_to_global_position(waypoint_coor);
800213ac:	ee cc 00 a8 	sub	r12,r7,168
800213b0:	20 cd       	sub	sp,48
800213b2:	1a 98       	mov	r8,sp
800213b4:	10 9b       	mov	r11,r8
800213b6:	ee ca 00 50 	sub	r10,r7,80
800213ba:	f6 c8 00 00 	sub	r8,r11,0
800213be:	f4 c9 00 00 	sub	r9,r10,0
800213c2:	72 0e       	ld.w	lr,r9[0x0]
800213c4:	91 0e       	st.w	r8[0x0],lr
800213c6:	72 1e       	ld.w	lr,r9[0x4]
800213c8:	91 1e       	st.w	r8[0x4],lr
800213ca:	72 2e       	ld.w	lr,r9[0x8]
800213cc:	91 2e       	st.w	r8[0x8],lr
800213ce:	72 39       	ld.w	r9,r9[0xc]
800213d0:	91 39       	st.w	r8[0xc],r9
800213d2:	f6 c8 ff f0 	sub	r8,r11,-16
800213d6:	f4 c9 ff f0 	sub	r9,r10,-16
800213da:	72 0e       	ld.w	lr,r9[0x0]
800213dc:	91 0e       	st.w	r8[0x0],lr
800213de:	72 1e       	ld.w	lr,r9[0x4]
800213e0:	91 1e       	st.w	r8[0x4],lr
800213e2:	72 2e       	ld.w	lr,r9[0x8]
800213e4:	91 2e       	st.w	r8[0x8],lr
800213e6:	72 39       	ld.w	r9,r9[0xc]
800213e8:	91 39       	st.w	r8[0xc],r9
800213ea:	f6 c8 ff e0 	sub	r8,r11,-32
800213ee:	f4 c9 ff e0 	sub	r9,r10,-32
800213f2:	72 0a       	ld.w	r10,r9[0x0]
800213f4:	91 0a       	st.w	r8[0x0],r10
800213f6:	72 1a       	ld.w	r10,r9[0x4]
800213f8:	91 1a       	st.w	r8[0x4],r10
800213fa:	72 2a       	ld.w	r10,r9[0x8]
800213fc:	91 2a       	st.w	r8[0x8],r10
800213fe:	72 39       	ld.w	r9,r9[0xc]
80021400:	91 39       	st.w	r8[0xc],r9
80021402:	f0 16 00 7f 	mcall	r6[508]
80021406:	2f 4d       	sub	sp,-48
80021408:	ee ca 00 40 	sub	r10,r7,64
8002140c:	ee cb 00 a8 	sub	r11,r7,168
80021410:	f4 c8 00 00 	sub	r8,r10,0
80021414:	f6 c9 00 00 	sub	r9,r11,0
80021418:	72 0c       	ld.w	r12,r9[0x0]
8002141a:	91 0c       	st.w	r8[0x0],r12
8002141c:	72 1c       	ld.w	r12,r9[0x4]
8002141e:	91 1c       	st.w	r8[0x4],r12
80021420:	72 2c       	ld.w	r12,r9[0x8]
80021422:	91 2c       	st.w	r8[0x8],r12
80021424:	72 39       	ld.w	r9,r9[0xc]
80021426:	91 39       	st.w	r8[0xc],r9
80021428:	f6 e8 00 10 	ld.d	r8,r11[16]
8002142c:	f4 e9 00 10 	st.d	r10[16],r8
80021430:	76 68       	ld.w	r8,r11[0x18]
80021432:	95 68       	st.w	r10[0x18],r8
		break;
80021434:	cf b8       	rjmp	8002162a <set_waypoint_from_frame+0x5a4>
		case MAV_FRAME_MISSION:
			//mavlink_msg_mission_ack_send(MAVLINK_COMM_0,rec->msg.sysid,rec->msg.compid,MAV_RESULT_UNSUPPORTED);
		break;
		case MAV_FRAME_GLOBAL_RELATIVE_ALT:
			waypoint_global.latitude = current_wp.x;
80021436:	ea e8 00 18 	ld.d	r8,r5[24]
8002143a:	ee e9 ff e8 	st.d	r7[-24],r8
			waypoint_global.longitude = current_wp.y;
8002143e:	ea e8 00 20 	ld.d	r8,r5[32]
80021442:	ee e9 ff e0 	st.d	r7[-32],r8
			waypoint_global.altitude = current_wp.z;
80021446:	ea e8 00 28 	ld.d	r8,r5[40]
8002144a:	10 9a       	mov	r10,r8
8002144c:	12 9b       	mov	r11,r9
8002144e:	f0 16 00 09 	mcall	r6[36]
80021452:	18 98       	mov	r8,r12
80021454:	ef 48 ff f0 	st.w	r7[-16],r8
		
			global_position_t origin_relative_alt = origin;
80021458:	ee ca 00 78 	sub	r10,r7,120
8002145c:	ea cb ff d0 	sub	r11,r5,-48
80021460:	f4 c8 00 00 	sub	r8,r10,0
80021464:	f6 c9 00 00 	sub	r9,r11,0
80021468:	72 0c       	ld.w	r12,r9[0x0]
8002146a:	91 0c       	st.w	r8[0x0],r12
8002146c:	72 1c       	ld.w	r12,r9[0x4]
8002146e:	91 1c       	st.w	r8[0x4],r12
80021470:	72 2c       	ld.w	r12,r9[0x8]
80021472:	91 2c       	st.w	r8[0x8],r12
80021474:	72 39       	ld.w	r9,r9[0xc]
80021476:	91 39       	st.w	r8[0xc],r9
80021478:	f6 e8 00 10 	ld.d	r8,r11[16]
8002147c:	f4 e9 00 10 	st.d	r10[16],r8
80021480:	76 68       	ld.w	r8,r11[0x18]
80021482:	95 68       	st.w	r10[0x18],r8
			origin_relative_alt.altitude = 0.0;
80021484:	30 08       	mov	r8,0
80021486:	ef 48 ff 98 	st.w	r7[-104],r8
			waypoint_coor = global_to_local_position(waypoint_global,origin_relative_alt);
8002148a:	ee cc 00 a8 	sub	r12,r7,168
8002148e:	20 7d       	sub	sp,28
80021490:	1a 98       	mov	r8,sp
80021492:	10 9a       	mov	r10,r8
80021494:	ee cb 00 78 	sub	r11,r7,120
80021498:	f4 c8 00 00 	sub	r8,r10,0
8002149c:	f6 c9 00 00 	sub	r9,r11,0
800214a0:	72 0e       	ld.w	lr,r9[0x0]
800214a2:	91 0e       	st.w	r8[0x0],lr
800214a4:	72 1e       	ld.w	lr,r9[0x4]
800214a6:	91 1e       	st.w	r8[0x4],lr
800214a8:	72 2e       	ld.w	lr,r9[0x8]
800214aa:	91 2e       	st.w	r8[0x8],lr
800214ac:	72 39       	ld.w	r9,r9[0xc]
800214ae:	91 39       	st.w	r8[0xc],r9
800214b0:	f6 e8 00 10 	ld.d	r8,r11[16]
800214b4:	f4 e9 00 10 	st.d	r10[16],r8
800214b8:	76 68       	ld.w	r8,r11[0x18]
800214ba:	95 68       	st.w	r10[0x18],r8
800214bc:	20 7d       	sub	sp,28
800214be:	1a 98       	mov	r8,sp
800214c0:	10 9a       	mov	r10,r8
800214c2:	ee cb 00 20 	sub	r11,r7,32
800214c6:	f4 c8 00 00 	sub	r8,r10,0
800214ca:	f6 c9 00 00 	sub	r9,r11,0
800214ce:	72 0e       	ld.w	lr,r9[0x0]
800214d0:	91 0e       	st.w	r8[0x0],lr
800214d2:	72 1e       	ld.w	lr,r9[0x4]
800214d4:	91 1e       	st.w	r8[0x4],lr
800214d6:	72 2e       	ld.w	lr,r9[0x8]
800214d8:	91 2e       	st.w	r8[0x8],lr
800214da:	72 39       	ld.w	r9,r9[0xc]
800214dc:	91 39       	st.w	r8[0xc],r9
800214de:	f6 e8 00 10 	ld.d	r8,r11[16]
800214e2:	f4 e9 00 10 	st.d	r10[16],r8
800214e6:	76 68       	ld.w	r8,r11[0x18]
800214e8:	95 68       	st.w	r10[0x18],r8
800214ea:	f0 16 00 73 	mcall	r6[460]
800214ee:	2f 2d       	sub	sp,-56
800214f0:	ee cb 00 50 	sub	r11,r7,80
800214f4:	ee ca 00 a8 	sub	r10,r7,168
800214f8:	f6 c8 00 00 	sub	r8,r11,0
800214fc:	f4 c9 00 00 	sub	r9,r10,0
80021500:	72 0c       	ld.w	r12,r9[0x0]
80021502:	91 0c       	st.w	r8[0x0],r12
80021504:	72 1c       	ld.w	r12,r9[0x4]
80021506:	91 1c       	st.w	r8[0x4],r12
80021508:	72 2c       	ld.w	r12,r9[0x8]
8002150a:	91 2c       	st.w	r8[0x8],r12
8002150c:	72 39       	ld.w	r9,r9[0xc]
8002150e:	91 39       	st.w	r8[0xc],r9
80021510:	f6 c8 ff f0 	sub	r8,r11,-16
80021514:	f4 c9 ff f0 	sub	r9,r10,-16
80021518:	72 0c       	ld.w	r12,r9[0x0]
8002151a:	91 0c       	st.w	r8[0x0],r12
8002151c:	72 1c       	ld.w	r12,r9[0x4]
8002151e:	91 1c       	st.w	r8[0x4],r12
80021520:	72 2c       	ld.w	r12,r9[0x8]
80021522:	91 2c       	st.w	r8[0x8],r12
80021524:	72 39       	ld.w	r9,r9[0xc]
80021526:	91 39       	st.w	r8[0xc],r9
80021528:	f6 c8 ff e0 	sub	r8,r11,-32
8002152c:	f4 c9 ff e0 	sub	r9,r10,-32
80021530:	72 0a       	ld.w	r10,r9[0x0]
80021532:	91 0a       	st.w	r8[0x0],r10
80021534:	72 1a       	ld.w	r10,r9[0x4]
80021536:	91 1a       	st.w	r8[0x4],r10
80021538:	72 2a       	ld.w	r10,r9[0x8]
8002153a:	91 2a       	st.w	r8[0x8],r10
8002153c:	72 39       	ld.w	r9,r9[0xc]
8002153e:	91 39       	st.w	r8[0xc],r9
		
			dbg_print("LocalOrigin: lat (x1e7):");
80021540:	fe cc 04 ec 	sub	r12,pc,1260
80021544:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(origin_relative_alt.latitude * 10000000,10);
80021548:	ee ea ff 90 	ld.d	r10,r7[-112]
8002154c:	30 08       	mov	r8,0
8002154e:	e0 69 12 d0 	mov	r9,4816
80021552:	ea 19 41 63 	orh	r9,0x4163
80021556:	f0 16 00 03 	mcall	r6[12]
8002155a:	14 98       	mov	r8,r10
8002155c:	16 99       	mov	r9,r11
8002155e:	10 9a       	mov	r10,r8
80021560:	12 9b       	mov	r11,r9
80021562:	f0 16 00 14 	mcall	r6[80]
80021566:	18 98       	mov	r8,r12
80021568:	30 ab       	mov	r11,10
8002156a:	10 9c       	mov	r12,r8
8002156c:	f0 16 00 04 	mcall	r6[16]
			dbg_print(" long (x1e7):");
80021570:	fe cc 05 84 	sub	r12,pc,1412
80021574:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(origin_relative_alt.longitude * 10000000,10);
80021578:	ee ea ff 88 	ld.d	r10,r7[-120]
8002157c:	30 08       	mov	r8,0
8002157e:	e0 69 12 d0 	mov	r9,4816
80021582:	ea 19 41 63 	orh	r9,0x4163
80021586:	f0 16 00 03 	mcall	r6[12]
8002158a:	14 98       	mov	r8,r10
8002158c:	16 99       	mov	r9,r11
8002158e:	10 9a       	mov	r10,r8
80021590:	12 9b       	mov	r11,r9
80021592:	f0 16 00 14 	mcall	r6[80]
80021596:	18 98       	mov	r8,r12
80021598:	30 ab       	mov	r11,10
8002159a:	10 9c       	mov	r12,r8
8002159c:	f0 16 00 04 	mcall	r6[16]
			dbg_print(" global alt (x1000):");
800215a0:	fe cc 05 30 	sub	r12,pc,1328
800215a4:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(origin.altitude*1000,10);
800215a8:	6b 09       	ld.w	r9,r5[0x40]
800215aa:	fc 18 44 7a 	movh	r8,0x447a
800215ae:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
800215b2:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
800215b6:	30 ab       	mov	r11,10
800215b8:	10 9c       	mov	r12,r8
800215ba:	f0 16 00 04 	mcall	r6[16]
			dbg_print(" wp_coor: x (x100):");
800215be:	fe cc 05 b2 	sub	r12,pc,1458
800215c2:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(waypoint_coor.pos[X]*100,10);
800215c6:	ee f9 ff b0 	ld.w	r9,r7[-80]
800215ca:	fc 18 42 c8 	movh	r8,0x42c8
800215ce:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
800215d2:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
800215d6:	30 ab       	mov	r11,10
800215d8:	10 9c       	mov	r12,r8
800215da:	f0 16 00 04 	mcall	r6[16]
			dbg_print(", y (x100):");
800215de:	fe cc 05 be 	sub	r12,pc,1470
800215e2:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(waypoint_coor.pos[Y]*100,10);
800215e6:	ee f9 ff b4 	ld.w	r9,r7[-76]
800215ea:	fc 18 42 c8 	movh	r8,0x42c8
800215ee:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
800215f2:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
800215f6:	30 ab       	mov	r11,10
800215f8:	10 9c       	mov	r12,r8
800215fa:	f0 16 00 04 	mcall	r6[16]
			dbg_print(", z (x100):");
800215fe:	fe cc 05 d2 	sub	r12,pc,1490
80021602:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(waypoint_coor.pos[Z]*100,10);
80021606:	ee f9 ff b8 	ld.w	r9,r7[-72]
8002160a:	fc 18 42 c8 	movh	r8,0x42c8
8002160e:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80021612:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80021616:	30 ab       	mov	r11,10
80021618:	10 9c       	mov	r12,r8
8002161a:	f0 16 00 04 	mcall	r6[16]
			dbg_print("\n");
8002161e:	fe cc 17 46 	sub	r12,pc,5958
80021622:	f0 16 00 01 	mcall	r6[4]
80021626:	c0 28       	rjmp	8002162a <set_waypoint_from_frame+0x5a4>
			waypoint_coor.heading= deg_to_rad(current_wp.param4);
			waypoint_coor.origin = local_to_global_position(waypoint_coor);
		break;
		case MAV_FRAME_MISSION:
			//mavlink_msg_mission_ack_send(MAVLINK_COMM_0,rec->msg.sysid,rec->msg.compid,MAV_RESULT_UNSUPPORTED);
		break;
80021628:	d7 03       	nop
		case MAV_FRAME_LOCAL_ENU:
			//mavlink_msg_mission_ack_send(MAVLINK_COMM_0,rec->msg.sysid,rec->msg.compid,MAV_RESULT_UNSUPPORTED);
		break;
	}
	
	return waypoint_coor;
8002162a:	06 9b       	mov	r11,r3
8002162c:	ee ca 00 50 	sub	r10,r7,80
80021630:	f6 c8 00 00 	sub	r8,r11,0
80021634:	f4 c9 00 00 	sub	r9,r10,0
80021638:	72 0c       	ld.w	r12,r9[0x0]
8002163a:	91 0c       	st.w	r8[0x0],r12
8002163c:	72 1c       	ld.w	r12,r9[0x4]
8002163e:	91 1c       	st.w	r8[0x4],r12
80021640:	72 2c       	ld.w	r12,r9[0x8]
80021642:	91 2c       	st.w	r8[0x8],r12
80021644:	72 39       	ld.w	r9,r9[0xc]
80021646:	91 39       	st.w	r8[0xc],r9
80021648:	f6 c8 ff f0 	sub	r8,r11,-16
8002164c:	f4 c9 ff f0 	sub	r9,r10,-16
80021650:	72 0c       	ld.w	r12,r9[0x0]
80021652:	91 0c       	st.w	r8[0x0],r12
80021654:	72 1c       	ld.w	r12,r9[0x4]
80021656:	91 1c       	st.w	r8[0x4],r12
80021658:	72 2c       	ld.w	r12,r9[0x8]
8002165a:	91 2c       	st.w	r8[0x8],r12
8002165c:	72 39       	ld.w	r9,r9[0xc]
8002165e:	91 39       	st.w	r8[0xc],r9
80021660:	f6 c8 ff e0 	sub	r8,r11,-32
80021664:	f4 c9 ff e0 	sub	r9,r10,-32
80021668:	72 0a       	ld.w	r10,r9[0x0]
8002166a:	91 0a       	st.w	r8[0x0],r10
8002166c:	72 1a       	ld.w	r10,r9[0x4]
8002166e:	91 1a       	st.w	r8[0x4],r10
80021670:	72 2a       	ld.w	r10,r9[0x8]
80021672:	91 2a       	st.w	r8[0x8],r10
80021674:	72 39       	ld.w	r9,r9[0xc]
80021676:	91 39       	st.w	r8[0xc],r9
}
80021678:	06 9c       	mov	r12,r3
8002167a:	2d 6d       	sub	sp,-168
8002167c:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
80021680:	80 02       	ld.sh	r2,r0[0x0]
80021682:	0f 18       	ld.sh	r8,r7++
80021684:	50 6f       	stdsp	sp[0x18],pc
80021686:	73 69       	ld.w	r9,r9[0x58]
80021688:	74 69       	ld.w	r9,r10[0x18]
8002168a:	6f 6e       	ld.w	lr,r7[0x58]
8002168c:	20 68       	sub	r8,6
8002168e:	6f 6c       	ld.w	r12,r7[0x58]
80021690:	64 20       	ld.w	r0,r2[0x8]
80021692:	61 74       	ld.w	r4,r0[0x5c]
80021694:	3a 20       	mov	r0,-94
80021696:	00 00       	add	r0,r0
80021698:	29 0a       	sub	r10,-112
	...

8002169c <wp_hold_init>:

void wp_hold_init()
{
8002169c:	eb cd 40 c0 	pushm	r6-r7,lr
800216a0:	1a 97       	mov	r7,sp
800216a2:	20 3d       	sub	sp,12
800216a4:	4d 86       	lddpc	r6,80021804 <wp_hold_init+0x168>
800216a6:	1e 26       	rsub	r6,pc
	if (centralData->waypoint_hold_init == 0)
800216a8:	ec f8 00 00 	ld.w	r8,r6[0]
800216ac:	70 08       	ld.w	r8,r8[0x0]
800216ae:	f1 38 10 b7 	ld.ub	r8,r8[4279]
800216b2:	ec 18 00 01 	eorl	r8,0x1
800216b6:	5c 58       	castu.b	r8
800216b8:	e0 80 00 a3 	breq	800217fe <wp_hold_init+0x162>
	{
		dbg_print("Position hold at: ");
800216bc:	fe cc 00 38 	sub	r12,pc,56
800216c0:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(centralData->position_estimator.localPosition.pos[X],10);
800216c4:	ec f8 00 00 	ld.w	r8,r6[0]
800216c8:	70 08       	ld.w	r8,r8[0x0]
800216ca:	f0 f8 0d 9c 	ld.w	r8,r8[3484]
800216ce:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
800216d2:	30 ab       	mov	r11,10
800216d4:	10 9c       	mov	r12,r8
800216d6:	f0 16 00 04 	mcall	r6[16]
		dbg_print_num(centralData->position_estimator.localPosition.pos[Y],10);
800216da:	ec f8 00 00 	ld.w	r8,r6[0]
800216de:	70 08       	ld.w	r8,r8[0x0]
800216e0:	f0 f8 0d a0 	ld.w	r8,r8[3488]
800216e4:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
800216e8:	30 ab       	mov	r11,10
800216ea:	10 9c       	mov	r12,r8
800216ec:	f0 16 00 04 	mcall	r6[16]
		dbg_print_num(centralData->position_estimator.localPosition.pos[Z],10);
800216f0:	ec f8 00 00 	ld.w	r8,r6[0]
800216f4:	70 08       	ld.w	r8,r8[0x0]
800216f6:	f0 f8 0d a4 	ld.w	r8,r8[3492]
800216fa:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
800216fe:	30 ab       	mov	r11,10
80021700:	10 9c       	mov	r12,r8
80021702:	f0 16 00 04 	mcall	r6[16]
		dbg_print_num((int)(centralData->position_estimator.localPosition.heading*180.0/3.14),10);
80021706:	ec f8 00 00 	ld.w	r8,r6[0]
8002170a:	70 08       	ld.w	r8,r8[0x0]
8002170c:	f0 f8 0d a8 	ld.w	r8,r8[3496]
80021710:	10 9c       	mov	r12,r8
80021712:	f0 16 00 02 	mcall	r6[8]
80021716:	30 08       	mov	r8,0
80021718:	e0 69 80 00 	mov	r9,32768
8002171c:	ea 19 40 66 	orh	r9,0x4066
80021720:	f0 16 00 03 	mcall	r6[12]
80021724:	14 98       	mov	r8,r10
80021726:	16 99       	mov	r9,r11
80021728:	10 9a       	mov	r10,r8
8002172a:	12 9b       	mov	r11,r9
8002172c:	e0 68 85 1f 	mov	r8,34079
80021730:	ea 18 51 eb 	orh	r8,0x51eb
80021734:	e0 69 1e b8 	mov	r9,7864
80021738:	ea 19 40 09 	orh	r9,0x4009
8002173c:	f0 16 00 0c 	mcall	r6[48]
80021740:	14 98       	mov	r8,r10
80021742:	16 99       	mov	r9,r11
80021744:	10 9a       	mov	r10,r8
80021746:	12 9b       	mov	r11,r9
80021748:	f0 16 00 14 	mcall	r6[80]
8002174c:	18 98       	mov	r8,r12
8002174e:	30 ab       	mov	r11,10
80021750:	10 9c       	mov	r12,r8
80021752:	f0 16 00 04 	mcall	r6[16]
		dbg_print(")\n");
80021756:	fe cc 00 be 	sub	r12,pc,190
8002175a:	f0 16 00 01 	mcall	r6[4]
		
		centralData->waypoint_hold_init = true;
8002175e:	ec f8 00 00 	ld.w	r8,r6[0]
80021762:	70 09       	ld.w	r9,r8[0x0]
80021764:	30 18       	mov	r8,1
80021766:	f3 68 10 b7 	st.b	r9[4279],r8
		centralData->waypoint_hold_coordinates = centralData->position_estimator.localPosition;
8002176a:	ec f8 00 00 	ld.w	r8,r6[0]
8002176e:	70 09       	ld.w	r9,r8[0x0]
80021770:	ec f8 00 00 	ld.w	r8,r6[0]
80021774:	70 08       	ld.w	r8,r8[0x0]
80021776:	f2 cb ef b0 	sub	r11,r9,-4176
8002177a:	f0 ca f2 64 	sub	r10,r8,-3484
8002177e:	f6 c8 00 00 	sub	r8,r11,0
80021782:	f4 c9 00 00 	sub	r9,r10,0
80021786:	72 0c       	ld.w	r12,r9[0x0]
80021788:	91 0c       	st.w	r8[0x0],r12
8002178a:	72 1c       	ld.w	r12,r9[0x4]
8002178c:	91 1c       	st.w	r8[0x4],r12
8002178e:	72 2c       	ld.w	r12,r9[0x8]
80021790:	91 2c       	st.w	r8[0x8],r12
80021792:	72 39       	ld.w	r9,r9[0xc]
80021794:	91 39       	st.w	r8[0xc],r9
80021796:	f6 c8 ff f0 	sub	r8,r11,-16
8002179a:	f4 c9 ff f0 	sub	r9,r10,-16
8002179e:	72 0c       	ld.w	r12,r9[0x0]
800217a0:	91 0c       	st.w	r8[0x0],r12
800217a2:	72 1c       	ld.w	r12,r9[0x4]
800217a4:	91 1c       	st.w	r8[0x4],r12
800217a6:	72 2c       	ld.w	r12,r9[0x8]
800217a8:	91 2c       	st.w	r8[0x8],r12
800217aa:	72 39       	ld.w	r9,r9[0xc]
800217ac:	91 39       	st.w	r8[0xc],r9
800217ae:	f6 c8 ff e0 	sub	r8,r11,-32
800217b2:	f4 c9 ff e0 	sub	r9,r10,-32
800217b6:	72 0a       	ld.w	r10,r9[0x0]
800217b8:	91 0a       	st.w	r8[0x0],r10
800217ba:	72 1a       	ld.w	r10,r9[0x4]
800217bc:	91 1a       	st.w	r8[0x4],r10
800217be:	72 2a       	ld.w	r10,r9[0x8]
800217c0:	91 2a       	st.w	r8[0x8],r10
800217c2:	72 39       	ld.w	r9,r9[0xc]
800217c4:	91 39       	st.w	r8[0xc],r9
		
		Aero_Attitude_t aero_attitude;
		aero_attitude=Quat_to_Aero(centralData->imu1.attitude.qe);
800217c6:	ec f8 00 00 	ld.w	r8,r6[0]
800217ca:	70 09       	ld.w	r9,r8[0x0]
800217cc:	ee ca 00 0c 	sub	r10,r7,12
800217d0:	20 4d       	sub	sp,16
800217d2:	1a 98       	mov	r8,sp
800217d4:	20 08       	sub	r8,0
800217d6:	20 09       	sub	r9,0
800217d8:	72 0b       	ld.w	r11,r9[0x0]
800217da:	91 0b       	st.w	r8[0x0],r11
800217dc:	72 1b       	ld.w	r11,r9[0x4]
800217de:	91 1b       	st.w	r8[0x4],r11
800217e0:	72 2b       	ld.w	r11,r9[0x8]
800217e2:	91 2b       	st.w	r8[0x8],r11
800217e4:	72 39       	ld.w	r9,r9[0xc]
800217e6:	91 39       	st.w	r8[0xc],r9
800217e8:	14 9c       	mov	r12,r10
800217ea:	f0 16 00 67 	mcall	r6[412]
800217ee:	2f cd       	sub	sp,-16
		centralData->waypoint_hold_coordinates.heading = aero_attitude.rpy[2];
800217f0:	ec f8 00 00 	ld.w	r8,r6[0]
800217f4:	70 08       	ld.w	r8,r8[0x0]
800217f6:	ee f9 ff fc 	ld.w	r9,r7[-4]
800217fa:	f1 49 10 5c 	st.w	r8[4188],r9
	}
}
800217fe:	2f dd       	sub	sp,-12
80021800:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80021804:	80 02       	ld.sh	r2,r0[0x0]
80021806:	15 2a       	ld.uh	r10,r10++

80021808 <waypoint_hold_position_handler>:

void waypoint_hold_position_handler()
{
80021808:	eb cd 40 c0 	pushm	r6-r7,lr
8002180c:	1a 97       	mov	r7,sp
8002180e:	48 96       	lddpc	r6,80021830 <waypoint_hold_position_handler+0x28>
80021810:	1e 26       	rsub	r6,pc
	if (!centralData->waypoint_set)
80021812:	ec f8 00 00 	ld.w	r8,r6[0]
80021816:	70 08       	ld.w	r8,r8[0x0]
80021818:	f1 38 10 b4 	ld.ub	r8,r8[4276]
8002181c:	ec 18 00 01 	eorl	r8,0x1
80021820:	5c 58       	castu.b	r8
80021822:	c0 30       	breq	80021828 <waypoint_hold_position_handler+0x20>
	{
		init_wp();
80021824:	f0 16 00 84 	mcall	r6[528]
	}
	wp_hold_init();
80021828:	f0 16 00 a9 	mcall	r6[676]
}
8002182c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80021830:	80 02       	ld.sh	r2,r0[0x0]
80021832:	16 94       	mov	r4,r11
80021834:	20 72       	sub	r2,7
80021836:	65 61       	ld.w	r1,r2[0x58]
80021838:	63 68       	ld.w	r8,r1[0x58]
8002183a:	65 64       	ld.w	r4,r2[0x58]
8002183c:	2c 20       	sub	r0,-62
8002183e:	64 69       	ld.w	r9,r2[0x18]
80021840:	73 74       	ld.w	r4,r9[0x5c]
80021842:	61 6e       	ld.w	lr,r0[0x58]
80021844:	63 65       	ld.w	r5,r1[0x58]
80021846:	3a 00       	mov	r0,-96
80021848:	20 6c       	sub	r12,6
8002184a:	65 73       	ld.w	r3,r2[0x5c]
8002184c:	73 20       	ld.w	r0,r9[0x48]
8002184e:	74 68       	ld.w	r8,r10[0x18]
80021850:	61 6e       	ld.w	lr,r0[0x58]
80021852:	20 3a       	sub	r10,3
80021854:	00 00       	add	r0,r0
80021856:	00 00       	add	r0,r0
80021858:	2e 0a       	sub	r10,-32
8002185a:	00 00       	add	r0,r0
8002185c:	41 75       	lddsp	r5,sp[0x5c]
8002185e:	74 6f       	ld.w	pc,r10[0x18]
80021860:	63 6f       	ld.w	pc,r1[0x58]
80021862:	6e 74       	ld.w	r4,r7[0x1c]
80021864:	69 6e       	ld.w	lr,r4[0x58]
80021866:	75 65       	ld.w	r5,r10[0x58]
80021868:	20 74       	sub	r4,7
8002186a:	6f 77       	ld.w	r7,r7[0x5c]
8002186c:	61 72       	ld.w	r2,r0[0x5c]
8002186e:	64 73       	ld.w	r3,r2[0x1c]
80021870:	20 77       	sub	r7,7
80021872:	61 79       	ld.w	r9,r0[0x5c]
80021874:	70 6f       	ld.w	pc,r8[0x18]
80021876:	69 6e       	ld.w	lr,r4[0x58]
80021878:	74 20       	ld.w	r0,r10[0x8]
8002187a:	4e 72       	lddpc	r2,80021a14 <waypoint_navigation_handler+0x18e>
8002187c:	00 00       	add	r0,r0
8002187e:	00 00       	add	r0,r0
80021880:	53 74       	stdsp	sp[0xdc],r4
80021882:	6f 70       	ld.w	r0,r7[0x5c]
80021884:	0a 00       	add	r0,r5

80021886 <waypoint_navigation_handler>:

void waypoint_navigation_handler()
{
80021886:	eb cd 40 e8 	pushm	r3,r5-r7,lr
8002188a:	1a 97       	mov	r7,sp
8002188c:	21 0d       	sub	sp,64
8002188e:	fe f6 03 ba 	ld.w	r6,pc[954]
80021892:	1e 26       	rsub	r6,pc

	if (centralData->waypoint_set)
80021894:	ec f8 00 00 	ld.w	r8,r6[0]
80021898:	70 08       	ld.w	r8,r8[0x0]
8002189a:	f1 38 10 b4 	ld.ub	r8,r8[4276]
8002189e:	58 08       	cp.w	r8,0
800218a0:	e0 80 01 cd 	breq	80021c3a <waypoint_navigation_handler+0x3b4>
	{
		uint8_t i;
		float rel_pos[3];
		for (i=0;i<3;i++)
800218a4:	30 08       	mov	r8,0
800218a6:	ef 68 ff ff 	st.b	r7[-1],r8
800218aa:	c2 18       	rjmp	800218ec <waypoint_navigation_handler+0x66>
		{
			rel_pos[i] = centralData->waypoint_coordinates.pos[i]-centralData->position_estimator.localPosition.pos[i];
800218ac:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800218b0:	ec f9 00 00 	ld.w	r9,r6[0]
800218b4:	72 09       	ld.w	r9,r9[0x0]
800218b6:	ef 3a ff ff 	ld.ub	r10,r7[-1]
800218ba:	f4 ca fb f8 	sub	r10,r10,-1032
800218be:	f2 0a 03 2a 	ld.w	r10,r9[r10<<0x2]
800218c2:	ec f9 00 00 	ld.w	r9,r6[0]
800218c6:	72 09       	ld.w	r9,r9[0x0]
800218c8:	ef 3b ff ff 	ld.ub	r11,r7[-1]
800218cc:	f6 cb fc 99 	sub	r11,r11,-871
800218d0:	f2 0b 03 29 	ld.w	r9,r9[r11<<0x2]
800218d4:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
800218d8:	a3 68       	lsl	r8,0x2
800218da:	ee 08 00 08 	add	r8,r7,r8
800218de:	f1 49 ff f0 	st.w	r8[-16],r9

	if (centralData->waypoint_set)
	{
		uint8_t i;
		float rel_pos[3];
		for (i=0;i<3;i++)
800218e2:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800218e6:	2f f8       	sub	r8,-1
800218e8:	ef 68 ff ff 	st.b	r7[-1],r8
800218ec:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800218f0:	30 28       	mov	r8,2
800218f2:	f0 09 18 00 	cp.b	r9,r8
800218f6:	fe 98 ff db 	brls	800218ac <waypoint_navigation_handler+0x26>
		{
			rel_pos[i] = centralData->waypoint_coordinates.pos[i]-centralData->position_estimator.localPosition.pos[i];
		}
		centralData->dist2wp_sqr = vector_norm_sqr(rel_pos);
800218fa:	ec f8 00 00 	ld.w	r8,r6[0]
800218fe:	70 05       	ld.w	r5,r8[0x0]
80021900:	ee c8 00 10 	sub	r8,r7,16
80021904:	10 9c       	mov	r12,r8
80021906:	fe b0 f0 91 	rcall	8001fa28 <vector_norm_sqr>
8002190a:	18 98       	mov	r8,r12
8002190c:	eb 48 10 b0 	st.w	r5[4272],r8
		
		if (centralData->dist2wp_sqr < (centralData->current_waypoint.param2*centralData->current_waypoint.param2))
80021910:	ec f8 00 00 	ld.w	r8,r6[0]
80021914:	70 08       	ld.w	r8,r8[0x0]
80021916:	f0 fa 10 b0 	ld.w	r10,r8[4272]
8002191a:	ec f8 00 00 	ld.w	r8,r6[0]
8002191e:	70 08       	ld.w	r8,r8[0x0]
80021920:	f0 f9 0f f8 	ld.w	r9,r8[4088]
80021924:	ec f8 00 00 	ld.w	r8,r6[0]
80021928:	70 08       	ld.w	r8,r8[0x0]
8002192a:	f0 f8 0f f8 	ld.w	r8,r8[4088]
8002192e:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80021932:	30 18       	mov	r8,1
80021934:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80021938:	e0 8c 00 03 	brvs	8002193e <waypoint_navigation_handler+0xb8>
8002193c:	c0 25       	brlt	80021940 <waypoint_navigation_handler+0xba>
8002193e:	30 08       	mov	r8,0
80021940:	5c 58       	castu.b	r8
80021942:	e0 80 01 80 	breq	80021c42 <waypoint_navigation_handler+0x3bc>
		{
			dbg_print("Waypoint Nr");
80021946:	fe cc 1d a6 	sub	r12,pc,7590
8002194a:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(centralData->current_wp_count,10);
8002194e:	ec f8 00 00 	ld.w	r8,r6[0]
80021952:	70 08       	ld.w	r8,r8[0x0]
80021954:	f1 38 10 1e 	ld.ub	r8,r8[4126]
80021958:	5c 68       	casts.b	r8
8002195a:	30 ab       	mov	r11,10
8002195c:	10 9c       	mov	r12,r8
8002195e:	f0 16 00 04 	mcall	r6[16]
			dbg_print(" reached, distance:");
80021962:	fe cc 01 2e 	sub	r12,pc,302
80021966:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(sqrt(centralData->dist2wp_sqr),10);
8002196a:	ec f8 00 00 	ld.w	r8,r6[0]
8002196e:	70 08       	ld.w	r8,r8[0x0]
80021970:	f0 f8 10 b0 	ld.w	r8,r8[4272]
80021974:	10 9c       	mov	r12,r8
80021976:	f0 16 00 02 	mcall	r6[8]
8002197a:	14 98       	mov	r8,r10
8002197c:	16 99       	mov	r9,r11
8002197e:	10 9a       	mov	r10,r8
80021980:	12 9b       	mov	r11,r9
80021982:	f0 16 00 65 	mcall	r6[404]
80021986:	14 98       	mov	r8,r10
80021988:	16 99       	mov	r9,r11
8002198a:	10 9a       	mov	r10,r8
8002198c:	12 9b       	mov	r11,r9
8002198e:	f0 16 00 14 	mcall	r6[80]
80021992:	18 98       	mov	r8,r12
80021994:	30 ab       	mov	r11,10
80021996:	10 9c       	mov	r12,r8
80021998:	f0 16 00 04 	mcall	r6[16]
			dbg_print(" less than :");
8002199c:	fe cc 01 54 	sub	r12,pc,340
800219a0:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(centralData->current_waypoint.param2,10);
800219a4:	ec f8 00 00 	ld.w	r8,r6[0]
800219a8:	70 08       	ld.w	r8,r8[0x0]
800219aa:	f0 f8 0f f8 	ld.w	r8,r8[4088]
800219ae:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
800219b2:	30 ab       	mov	r11,10
800219b4:	10 9c       	mov	r12,r8
800219b6:	f0 16 00 04 	mcall	r6[16]
			dbg_print(".\n");
800219ba:	fe cc 01 62 	sub	r12,pc,354
800219be:	f0 16 00 01 	mcall	r6[4]
			mavlink_msg_mission_item_reached_send(MAVLINK_COMM_0,centralData->current_wp_count);
800219c2:	ec f8 00 00 	ld.w	r8,r6[0]
800219c6:	70 08       	ld.w	r8,r8[0x0]
800219c8:	f1 38 10 1e 	ld.ub	r8,r8[4126]
800219cc:	5c 68       	casts.b	r8
800219ce:	5c 88       	casts.h	r8
800219d0:	5c 78       	castu.h	r8
800219d2:	10 9b       	mov	r11,r8
800219d4:	30 0c       	mov	r12,0
800219d6:	fe b0 ef 5b 	rcall	8001f88c <mavlink_msg_mission_item_reached_send>
			
			centralData->waypoint_list[centralData->current_wp_count].current = 0;
800219da:	ec f8 00 00 	ld.w	r8,r6[0]
800219de:	70 0a       	ld.w	r10,r8[0x0]
800219e0:	ec f8 00 00 	ld.w	r8,r6[0]
800219e4:	70 08       	ld.w	r8,r8[0x0]
800219e6:	f1 38 10 1e 	ld.ub	r8,r8[4126]
800219ea:	f3 d8 b0 08 	bfexts	r9,r8,0x0,0x8
800219ee:	12 98       	mov	r8,r9
800219f0:	a1 78       	lsl	r8,0x1
800219f2:	12 08       	add	r8,r9
800219f4:	a5 68       	lsl	r8,0x4
800219f6:	f4 08 00 08 	add	r8,r10,r8
800219fa:	f0 c9 f1 f0 	sub	r9,r8,-3600
800219fe:	30 08       	mov	r8,0
80021a00:	b2 88       	st.b	r9[0x0],r8
			if (centralData->current_waypoint.autocontinue == 1)
80021a02:	ec f8 00 00 	ld.w	r8,r6[0]
80021a06:	70 08       	ld.w	r8,r8[0x0]
80021a08:	f1 39 0f f1 	ld.ub	r9,r8[4081]
80021a0c:	30 18       	mov	r8,1
80021a0e:	f0 09 18 00 	cp.b	r9,r8
80021a12:	e0 81 01 07 	brne	80021c20 <waypoint_navigation_handler+0x39a>
			{
				dbg_print("Autocontinue towards waypoint Nr");
80021a16:	fe cc 01 ba 	sub	r12,pc,442
80021a1a:	f0 16 00 01 	mcall	r6[4]
				
				if (centralData->current_wp_count == (centralData->number_of_waypoints-1))
80021a1e:	ec f8 00 00 	ld.w	r8,r6[0]
80021a22:	70 08       	ld.w	r8,r8[0x0]
80021a24:	f1 38 10 1e 	ld.ub	r8,r8[4126]
80021a28:	f3 d8 b0 08 	bfexts	r9,r8,0x0,0x8
80021a2c:	ec f8 00 00 	ld.w	r8,r6[0]
80021a30:	70 08       	ld.w	r8,r8[0x0]
80021a32:	f1 08 10 1c 	ld.sh	r8,r8[4124]
80021a36:	5c 78       	castu.h	r8
80021a38:	20 18       	sub	r8,1
80021a3a:	10 39       	cp.w	r9,r8
80021a3c:	c0 81       	brne	80021a4c <waypoint_navigation_handler+0x1c6>
				{
					centralData->current_wp_count = 0;
80021a3e:	ec f8 00 00 	ld.w	r8,r6[0]
80021a42:	70 09       	ld.w	r9,r8[0x0]
80021a44:	30 08       	mov	r8,0
80021a46:	f3 68 10 1e 	st.b	r9[4126],r8
80021a4a:	c0 a8       	rjmp	80021a5e <waypoint_navigation_handler+0x1d8>
					}else{
					centralData->current_wp_count++;
80021a4c:	ec f8 00 00 	ld.w	r8,r6[0]
80021a50:	70 08       	ld.w	r8,r8[0x0]
80021a52:	f1 39 10 1e 	ld.ub	r9,r8[4126]
80021a56:	2f f9       	sub	r9,-1
80021a58:	5c 59       	castu.b	r9
80021a5a:	f1 69 10 1e 	st.b	r8[4126],r9
				}
				dbg_print_num(centralData->current_wp_count,10);
80021a5e:	ec f8 00 00 	ld.w	r8,r6[0]
80021a62:	70 08       	ld.w	r8,r8[0x0]
80021a64:	f1 38 10 1e 	ld.ub	r8,r8[4126]
80021a68:	5c 68       	casts.b	r8
80021a6a:	30 ab       	mov	r11,10
80021a6c:	10 9c       	mov	r12,r8
80021a6e:	f0 16 00 04 	mcall	r6[16]
				dbg_print("\n");
80021a72:	fe cc 1b 9a 	sub	r12,pc,7066
80021a76:	f0 16 00 01 	mcall	r6[4]
				centralData->waypoint_list[centralData->current_wp_count].current = 1;
80021a7a:	ec f8 00 00 	ld.w	r8,r6[0]
80021a7e:	70 0a       	ld.w	r10,r8[0x0]
80021a80:	ec f8 00 00 	ld.w	r8,r6[0]
80021a84:	70 08       	ld.w	r8,r8[0x0]
80021a86:	f1 38 10 1e 	ld.ub	r8,r8[4126]
80021a8a:	f3 d8 b0 08 	bfexts	r9,r8,0x0,0x8
80021a8e:	12 98       	mov	r8,r9
80021a90:	a1 78       	lsl	r8,0x1
80021a92:	12 08       	add	r8,r9
80021a94:	a5 68       	lsl	r8,0x4
80021a96:	f4 08 00 08 	add	r8,r10,r8
80021a9a:	f0 c9 f1 f0 	sub	r9,r8,-3600
80021a9e:	30 18       	mov	r8,1
80021aa0:	b2 88       	st.b	r9[0x0],r8
				centralData->current_waypoint = centralData->waypoint_list[centralData->current_wp_count];
80021aa2:	ec f8 00 00 	ld.w	r8,r6[0]
80021aa6:	70 0a       	ld.w	r10,r8[0x0]
80021aa8:	ec f8 00 00 	ld.w	r8,r6[0]
80021aac:	70 0b       	ld.w	r11,r8[0x0]
80021aae:	ec f8 00 00 	ld.w	r8,r6[0]
80021ab2:	70 08       	ld.w	r8,r8[0x0]
80021ab4:	f1 38 10 1e 	ld.ub	r8,r8[4126]
80021ab8:	f3 d8 b0 08 	bfexts	r9,r8,0x0,0x8
80021abc:	12 98       	mov	r8,r9
80021abe:	a1 78       	lsl	r8,0x1
80021ac0:	12 08       	add	r8,r9
80021ac2:	a5 68       	lsl	r8,0x4
80021ac4:	f6 08 00 08 	add	r8,r11,r8
80021ac8:	f0 c8 f1 f4 	sub	r8,r8,-3596
80021acc:	f4 cb f0 14 	sub	r11,r10,-4076
80021ad0:	10 9a       	mov	r10,r8
80021ad2:	f6 c8 00 00 	sub	r8,r11,0
80021ad6:	f4 c9 00 00 	sub	r9,r10,0
80021ada:	72 0c       	ld.w	r12,r9[0x0]
80021adc:	91 0c       	st.w	r8[0x0],r12
80021ade:	72 1c       	ld.w	r12,r9[0x4]
80021ae0:	91 1c       	st.w	r8[0x4],r12
80021ae2:	72 2c       	ld.w	r12,r9[0x8]
80021ae4:	91 2c       	st.w	r8[0x8],r12
80021ae6:	72 39       	ld.w	r9,r9[0xc]
80021ae8:	91 39       	st.w	r8[0xc],r9
80021aea:	f6 c8 ff f0 	sub	r8,r11,-16
80021aee:	f4 c9 ff f0 	sub	r9,r10,-16
80021af2:	72 0c       	ld.w	r12,r9[0x0]
80021af4:	91 0c       	st.w	r8[0x0],r12
80021af6:	72 1c       	ld.w	r12,r9[0x4]
80021af8:	91 1c       	st.w	r8[0x4],r12
80021afa:	72 2c       	ld.w	r12,r9[0x8]
80021afc:	91 2c       	st.w	r8[0x8],r12
80021afe:	72 39       	ld.w	r9,r9[0xc]
80021b00:	91 39       	st.w	r8[0xc],r9
80021b02:	f6 c8 ff e0 	sub	r8,r11,-32
80021b06:	f4 c9 ff e0 	sub	r9,r10,-32
80021b0a:	72 0a       	ld.w	r10,r9[0x0]
80021b0c:	91 0a       	st.w	r8[0x0],r10
80021b0e:	72 1a       	ld.w	r10,r9[0x4]
80021b10:	91 1a       	st.w	r8[0x4],r10
80021b12:	72 2a       	ld.w	r10,r9[0x8]
80021b14:	91 2a       	st.w	r8[0x8],r10
80021b16:	72 39       	ld.w	r9,r9[0xc]
80021b18:	91 39       	st.w	r8[0xc],r9
				centralData->waypoint_coordinates = set_waypoint_from_frame(centralData->current_waypoint,centralData->position_estimator.localPosition.origin);
80021b1a:	ec f8 00 00 	ld.w	r8,r6[0]
80021b1e:	70 05       	ld.w	r5,r8[0x0]
80021b20:	ec f8 00 00 	ld.w	r8,r6[0]
80021b24:	70 08       	ld.w	r8,r8[0x0]
80021b26:	ec f9 00 00 	ld.w	r9,r6[0]
80021b2a:	72 0e       	ld.w	lr,r9[0x0]
80021b2c:	ee cc 00 40 	sub	r12,r7,64
80021b30:	20 7d       	sub	sp,28
80021b32:	1a 99       	mov	r9,sp
80021b34:	12 9a       	mov	r10,r9
80021b36:	f0 cb f2 54 	sub	r11,r8,-3500
80021b3a:	f4 c8 00 00 	sub	r8,r10,0
80021b3e:	f6 c9 00 00 	sub	r9,r11,0
80021b42:	72 03       	ld.w	r3,r9[0x0]
80021b44:	91 03       	st.w	r8[0x0],r3
80021b46:	72 13       	ld.w	r3,r9[0x4]
80021b48:	91 13       	st.w	r8[0x4],r3
80021b4a:	72 23       	ld.w	r3,r9[0x8]
80021b4c:	91 23       	st.w	r8[0x8],r3
80021b4e:	72 39       	ld.w	r9,r9[0xc]
80021b50:	91 39       	st.w	r8[0xc],r9
80021b52:	f6 e8 00 10 	ld.d	r8,r11[16]
80021b56:	f4 e9 00 10 	st.d	r10[16],r8
80021b5a:	76 68       	ld.w	r8,r11[0x18]
80021b5c:	95 68       	st.w	r10[0x18],r8
80021b5e:	20 cd       	sub	sp,48
80021b60:	1a 98       	mov	r8,sp
80021b62:	10 9b       	mov	r11,r8
80021b64:	fc ca f0 14 	sub	r10,lr,-4076
80021b68:	f6 c8 00 00 	sub	r8,r11,0
80021b6c:	f4 c9 00 00 	sub	r9,r10,0
80021b70:	72 0e       	ld.w	lr,r9[0x0]
80021b72:	91 0e       	st.w	r8[0x0],lr
80021b74:	72 1e       	ld.w	lr,r9[0x4]
80021b76:	91 1e       	st.w	r8[0x4],lr
80021b78:	72 2e       	ld.w	lr,r9[0x8]
80021b7a:	91 2e       	st.w	r8[0x8],lr
80021b7c:	72 39       	ld.w	r9,r9[0xc]
80021b7e:	91 39       	st.w	r8[0xc],r9
80021b80:	f6 c8 ff f0 	sub	r8,r11,-16
80021b84:	f4 c9 ff f0 	sub	r9,r10,-16
80021b88:	72 0e       	ld.w	lr,r9[0x0]
80021b8a:	91 0e       	st.w	r8[0x0],lr
80021b8c:	72 1e       	ld.w	lr,r9[0x4]
80021b8e:	91 1e       	st.w	r8[0x4],lr
80021b90:	72 2e       	ld.w	lr,r9[0x8]
80021b92:	91 2e       	st.w	r8[0x8],lr
80021b94:	72 39       	ld.w	r9,r9[0xc]
80021b96:	91 39       	st.w	r8[0xc],r9
80021b98:	f6 c8 ff e0 	sub	r8,r11,-32
80021b9c:	f4 c9 ff e0 	sub	r9,r10,-32
80021ba0:	72 0a       	ld.w	r10,r9[0x0]
80021ba2:	91 0a       	st.w	r8[0x0],r10
80021ba4:	72 1a       	ld.w	r10,r9[0x4]
80021ba6:	91 1a       	st.w	r8[0x4],r10
80021ba8:	72 2a       	ld.w	r10,r9[0x8]
80021baa:	91 2a       	st.w	r8[0x8],r10
80021bac:	72 39       	ld.w	r9,r9[0xc]
80021bae:	91 39       	st.w	r8[0xc],r9
80021bb0:	f0 16 00 f6 	mcall	r6[984]
80021bb4:	2e dd       	sub	sp,-76
80021bb6:	ea cb ef e0 	sub	r11,r5,-4128
80021bba:	ee ca 00 40 	sub	r10,r7,64
80021bbe:	f6 c8 00 00 	sub	r8,r11,0
80021bc2:	f4 c9 00 00 	sub	r9,r10,0
80021bc6:	72 0c       	ld.w	r12,r9[0x0]
80021bc8:	91 0c       	st.w	r8[0x0],r12
80021bca:	72 1c       	ld.w	r12,r9[0x4]
80021bcc:	91 1c       	st.w	r8[0x4],r12
80021bce:	72 2c       	ld.w	r12,r9[0x8]
80021bd0:	91 2c       	st.w	r8[0x8],r12
80021bd2:	72 39       	ld.w	r9,r9[0xc]
80021bd4:	91 39       	st.w	r8[0xc],r9
80021bd6:	f6 c8 ff f0 	sub	r8,r11,-16
80021bda:	f4 c9 ff f0 	sub	r9,r10,-16
80021bde:	72 0c       	ld.w	r12,r9[0x0]
80021be0:	91 0c       	st.w	r8[0x0],r12
80021be2:	72 1c       	ld.w	r12,r9[0x4]
80021be4:	91 1c       	st.w	r8[0x4],r12
80021be6:	72 2c       	ld.w	r12,r9[0x8]
80021be8:	91 2c       	st.w	r8[0x8],r12
80021bea:	72 39       	ld.w	r9,r9[0xc]
80021bec:	91 39       	st.w	r8[0xc],r9
80021bee:	f6 c8 ff e0 	sub	r8,r11,-32
80021bf2:	f4 c9 ff e0 	sub	r9,r10,-32
80021bf6:	72 0a       	ld.w	r10,r9[0x0]
80021bf8:	91 0a       	st.w	r8[0x0],r10
80021bfa:	72 1a       	ld.w	r10,r9[0x4]
80021bfc:	91 1a       	st.w	r8[0x4],r10
80021bfe:	72 2a       	ld.w	r10,r9[0x8]
80021c00:	91 2a       	st.w	r8[0x8],r10
80021c02:	72 39       	ld.w	r9,r9[0xc]
80021c04:	91 39       	st.w	r8[0xc],r9
				
				mavlink_msg_mission_current_send(MAVLINK_COMM_0,centralData->current_wp_count);
80021c06:	ec f8 00 00 	ld.w	r8,r6[0]
80021c0a:	70 08       	ld.w	r8,r8[0x0]
80021c0c:	f1 38 10 1e 	ld.ub	r8,r8[4126]
80021c10:	5c 68       	casts.b	r8
80021c12:	5c 88       	casts.h	r8
80021c14:	5c 78       	castu.h	r8
80021c16:	10 9b       	mov	r11,r8
80021c18:	30 0c       	mov	r12,0
80021c1a:	fe b0 ed 19 	rcall	8001f64c <mavlink_msg_mission_current_send>
80021c1e:	c1 28       	rjmp	80021c42 <waypoint_navigation_handler+0x3bc>
				
				}else{
				centralData->waypoint_set = false;
80021c20:	ec f8 00 00 	ld.w	r8,r6[0]
80021c24:	70 09       	ld.w	r9,r8[0x0]
80021c26:	30 08       	mov	r8,0
80021c28:	f3 68 10 b4 	st.b	r9[4276],r8
				dbg_print("Stop\n");
80021c2c:	fe cc 03 ac 	sub	r12,pc,940
80021c30:	f0 16 00 01 	mcall	r6[4]
				
				wp_hold_init();
80021c34:	f0 16 00 a9 	mcall	r6[676]
80021c38:	c0 58       	rjmp	80021c42 <waypoint_navigation_handler+0x3bc>
			}
		}
	}else{
		init_wp();
80021c3a:	f0 16 00 84 	mcall	r6[528]
		wp_hold_init();
80021c3e:	f0 16 00 a9 	mcall	r6[676]
	}
}
80021c42:	2f 0d       	sub	sp,-64
80021c44:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
80021c48:	80 02       	ld.sh	r2,r0[0x0]
80021c4a:	17 16       	ld.sh	r6,r11++
80021c4c:	43 72       	lddsp	r2,sp[0xdc]
80021c4e:	69 74       	ld.w	r4,r4[0x5c]
80021c50:	69 63       	ld.w	r3,r4[0x58]
80021c52:	61 6c       	ld.w	r12,r0[0x58]
80021c54:	20 53       	sub	r3,5
80021c56:	74 61       	ld.w	r1,r10[0x18]
80021c58:	74 65       	ld.w	r5,r10[0x18]
80021c5a:	21 20       	sub	r0,18
80021c5c:	43 6c       	lddsp	r12,sp[0xd8]
80021c5e:	69 6d       	ld.w	sp,r4[0x58]
80021c60:	62 69       	ld.w	r9,r1[0x18]
80021c62:	6e 67       	ld.w	r7,r7[0x18]
80021c64:	20 74       	sub	r4,7
80021c66:	6f 20       	ld.w	r0,r7[0x48]
80021c68:	73 61       	ld.w	r1,r9[0x58]
80021c6a:	66 65       	ld.w	r5,r3[0x18]
80021c6c:	20 61       	sub	r1,6
80021c6e:	6c 74       	ld.w	r4,r6[0x1c]
80021c70:	69 74       	ld.w	r4,r4[0x5c]
80021c72:	75 64       	ld.w	r4,r10[0x58]
80021c74:	65 2e       	ld.w	lr,r2[0x48]
80021c76:	0a 00       	add	r0,r5
80021c78:	43 72       	lddsp	r2,sp[0xdc]
80021c7a:	69 74       	ld.w	r4,r4[0x5c]
80021c7c:	69 63       	ld.w	r3,r4[0x58]
80021c7e:	61 6c       	ld.w	r12,r0[0x58]
80021c80:	20 53       	sub	r3,5
80021c82:	74 61       	ld.w	r1,r10[0x18]
80021c84:	74 65       	ld.w	r5,r10[0x18]
80021c86:	21 20       	sub	r0,18
80021c88:	46 6c       	lddsp	r12,sp[0x198]
80021c8a:	79 69       	ld.w	r9,r12[0x58]
80021c8c:	6e 67       	ld.w	r7,r7[0x18]
80021c8e:	20 74       	sub	r4,7
80021c90:	6f 20       	ld.w	r0,r7[0x48]
80021c92:	68 6f       	ld.w	pc,r4[0x18]
80021c94:	6d 65       	ld.w	r5,r6[0x58]
80021c96:	20 77       	sub	r7,7
80021c98:	61 79       	ld.w	r9,r0[0x5c]
80021c9a:	70 6f       	ld.w	pc,r8[0x18]
80021c9c:	69 6e       	ld.w	lr,r4[0x58]
80021c9e:	74 2e       	ld.w	lr,r10[0x8]
80021ca0:	0a 00       	add	r0,r5
80021ca2:	00 00       	add	r0,r0
80021ca4:	43 72       	lddsp	r2,sp[0xdc]
80021ca6:	69 74       	ld.w	r4,r4[0x5c]
80021ca8:	69 63       	ld.w	r3,r4[0x58]
80021caa:	61 6c       	ld.w	r12,r0[0x58]
80021cac:	20 53       	sub	r3,5
80021cae:	74 61       	ld.w	r1,r10[0x18]
80021cb0:	74 65       	ld.w	r5,r10[0x18]
80021cb2:	21 20       	sub	r0,18
80021cb4:	50 65       	stdsp	sp[0x18],r5
80021cb6:	72 66       	ld.w	r6,r9[0x18]
80021cb8:	6f 72       	ld.w	r2,r7[0x5c]
80021cba:	6d 69       	ld.w	r9,r6[0x58]
80021cbc:	6e 67       	ld.w	r7,r7[0x18]
80021cbe:	20 63       	sub	r3,6
80021cc0:	72 69       	ld.w	r9,r9[0x18]
80021cc2:	74 69       	ld.w	r9,r10[0x18]
80021cc4:	63 61       	ld.w	r1,r1[0x58]
80021cc6:	6c 20       	ld.w	r0,r6[0x8]
80021cc8:	6c 61       	ld.w	r1,r6[0x18]
80021cca:	6e 64       	ld.w	r4,r7[0x18]
80021ccc:	69 6e       	ld.w	lr,r4[0x58]
80021cce:	67 2e       	ld.w	lr,r3[0x48]
80021cd0:	0a 00       	add	r0,r5
80021cd2:	00 00       	add	r0,r0
80021cd4:	43 72       	lddsp	r2,sp[0xdc]
80021cd6:	69 74       	ld.w	r4,r4[0x5c]
80021cd8:	69 63       	ld.w	r3,r4[0x58]
80021cda:	61 6c       	ld.w	r12,r0[0x58]
80021cdc:	20 53       	sub	r3,5
80021cde:	74 61       	ld.w	r1,r10[0x18]
80021ce0:	74 65       	ld.w	r5,r10[0x18]
80021ce2:	21 20       	sub	r0,18
80021ce4:	4c 61       	lddpc	r1,80021dfc <waypoint_critical_handler+0xe8>
80021ce6:	6e 64       	ld.w	r4,r7[0x18]
80021ce8:	65 64       	ld.w	r4,r2[0x58]
80021cea:	2c 20       	sub	r0,-62
80021cec:	73 77       	ld.w	r7,r9[0x5c]
80021cee:	69 74       	ld.w	r4,r4[0x5c]
80021cf0:	63 68       	ld.w	r8,r1[0x58]
80021cf2:	69 6e       	ld.w	lr,r4[0x58]
80021cf4:	67 20       	ld.w	r0,r3[0x48]
80021cf6:	6f 66       	ld.w	r6,r7[0x58]
80021cf8:	66 20       	ld.w	r0,r3[0x8]
80021cfa:	6d 6f       	ld.w	pc,r6[0x58]
80021cfc:	74 6f       	ld.w	pc,r10[0x18]
80021cfe:	72 73       	ld.w	r3,r9[0x1c]
80021d00:	2c 20       	sub	r0,-62
80021d02:	45 6d       	lddsp	sp,sp[0x158]
80021d04:	65 72       	ld.w	r2,r2[0x5c]
80021d06:	67 65       	ld.w	r5,r3[0x58]
80021d08:	6e 63       	ld.w	r3,r7[0x18]
80021d0a:	79 20       	ld.w	r0,r12[0x48]
80021d0c:	6d 6f       	ld.w	pc,r6[0x58]
80021d0e:	64 65       	ld.w	r5,r2[0x18]
80021d10:	2e 0a       	sub	r10,-32
	...

80021d14 <waypoint_critical_handler>:

void waypoint_critical_handler()
{
80021d14:	eb cd 40 e0 	pushm	r5-r7,lr
80021d18:	1a 97       	mov	r7,sp
80021d1a:	20 7d       	sub	sp,28
80021d1c:	fe f6 02 20 	ld.w	r6,pc[544]
80021d20:	1e 26       	rsub	r6,pc
	if (!(centralData->critical_init))
80021d22:	ec f8 00 00 	ld.w	r8,r6[0]
80021d26:	70 08       	ld.w	r8,r8[0x0]
80021d28:	f1 38 10 b9 	ld.ub	r8,r8[4281]
80021d2c:	ec 18 00 01 	eorl	r8,0x1
80021d30:	5c 58       	castu.b	r8
80021d32:	c1 10       	breq	80021d54 <waypoint_critical_handler+0x40>
	{
		centralData->critical_init = true;
80021d34:	ec f8 00 00 	ld.w	r8,r6[0]
80021d38:	70 09       	ld.w	r9,r8[0x0]
80021d3a:	30 18       	mov	r8,1
80021d3c:	f3 68 10 b9 	st.b	r9[4281],r8
		dbg_print("Critical State! Climbing to safe altitude.\n");
80021d40:	fe cc 00 f4 	sub	r12,pc,244
80021d44:	f0 16 00 01 	mcall	r6[4]
		centralData->critical_behavior = CLIMB_TO_SAFE_ALT;
80021d48:	ec f8 00 00 	ld.w	r8,r6[0]
80021d4c:	70 08       	ld.w	r8,r8[0x0]
80021d4e:	30 19       	mov	r9,1
80021d50:	f1 49 12 e4 	st.w	r8[4836],r9
	}
	
	if (!(centralData->critical_next_state))
80021d54:	ec f8 00 00 	ld.w	r8,r6[0]
80021d58:	70 08       	ld.w	r8,r8[0x0]
80021d5a:	f1 38 10 ba 	ld.ub	r8,r8[4282]
80021d5e:	ec 18 00 01 	eorl	r8,0x1
80021d62:	5c 58       	castu.b	r8
80021d64:	e0 80 00 a7 	breq	80021eb2 <waypoint_critical_handler+0x19e>
	{
		centralData->critical_next_state = true;
80021d68:	ec f8 00 00 	ld.w	r8,r6[0]
80021d6c:	70 09       	ld.w	r9,r8[0x0]
80021d6e:	30 18       	mov	r8,1
80021d70:	f3 68 10 ba 	st.b	r9[4282],r8
		
		Aero_Attitude_t aero_attitude;
		aero_attitude=Quat_to_Aero(centralData->imu1.attitude.qe);
80021d74:	ec f8 00 00 	ld.w	r8,r6[0]
80021d78:	70 09       	ld.w	r9,r8[0x0]
80021d7a:	ee ca 00 10 	sub	r10,r7,16
80021d7e:	20 4d       	sub	sp,16
80021d80:	1a 98       	mov	r8,sp
80021d82:	20 08       	sub	r8,0
80021d84:	20 09       	sub	r9,0
80021d86:	72 0b       	ld.w	r11,r9[0x0]
80021d88:	91 0b       	st.w	r8[0x0],r11
80021d8a:	72 1b       	ld.w	r11,r9[0x4]
80021d8c:	91 1b       	st.w	r8[0x4],r11
80021d8e:	72 2b       	ld.w	r11,r9[0x8]
80021d90:	91 2b       	st.w	r8[0x8],r11
80021d92:	72 39       	ld.w	r9,r9[0xc]
80021d94:	91 39       	st.w	r8[0xc],r9
80021d96:	14 9c       	mov	r12,r10
80021d98:	f0 16 00 67 	mcall	r6[412]
80021d9c:	2f cd       	sub	sp,-16
		centralData->waypoint_critical_coordinates.heading = aero_attitude.rpy[2];
80021d9e:	ec f8 00 00 	ld.w	r8,r6[0]
80021da2:	70 08       	ld.w	r8,r8[0x0]
80021da4:	ee f9 ff f8 	ld.w	r9,r7[-8]
80021da8:	f1 49 10 8c 	st.w	r8[4236],r9
		
		switch (centralData->critical_behavior)
80021dac:	ec f8 00 00 	ld.w	r8,r6[0]
80021db0:	70 08       	ld.w	r8,r8[0x0]
80021db2:	f0 f8 12 e4 	ld.w	r8,r8[4836]
80021db6:	58 28       	cp.w	r8,2
80021db8:	c2 10       	breq	80021dfa <waypoint_critical_handler+0xe6>
80021dba:	58 38       	cp.w	r8,3
80021dbc:	c3 30       	breq	80021e22 <waypoint_critical_handler+0x10e>
80021dbe:	58 18       	cp.w	r8,1
80021dc0:	c4 31       	brne	80021e46 <waypoint_critical_handler+0x132>
		{
			case CLIMB_TO_SAFE_ALT:
			centralData->waypoint_critical_coordinates.pos[X] = centralData->position_estimator.localPosition.pos[X];
80021dc2:	ec f8 00 00 	ld.w	r8,r6[0]
80021dc6:	70 08       	ld.w	r8,r8[0x0]
80021dc8:	ec f9 00 00 	ld.w	r9,r6[0]
80021dcc:	72 09       	ld.w	r9,r9[0x0]
80021dce:	f2 f9 0d 9c 	ld.w	r9,r9[3484]
80021dd2:	f1 49 10 80 	st.w	r8[4224],r9
			centralData->waypoint_critical_coordinates.pos[Y] = centralData->position_estimator.localPosition.pos[Y];
80021dd6:	ec f8 00 00 	ld.w	r8,r6[0]
80021dda:	70 08       	ld.w	r8,r8[0x0]
80021ddc:	ec f9 00 00 	ld.w	r9,r6[0]
80021de0:	72 09       	ld.w	r9,r9[0x0]
80021de2:	f2 f9 0d a0 	ld.w	r9,r9[3488]
80021de6:	f1 49 10 84 	st.w	r8[4228],r9
			centralData->waypoint_critical_coordinates.pos[Z] = -30.0;
80021dea:	ec f8 00 00 	ld.w	r8,r6[0]
80021dee:	70 08       	ld.w	r8,r8[0x0]
80021df0:	fc 19 c1 f0 	movh	r9,0xc1f0
80021df4:	f1 49 10 88 	st.w	r8[4232],r9
			
			break;
80021df8:	c2 78       	rjmp	80021e46 <waypoint_critical_handler+0x132>
			case FLY_TO_HOME_WP:
			centralData->waypoint_critical_coordinates.pos[X] = 0.0;
80021dfa:	ec f8 00 00 	ld.w	r8,r6[0]
80021dfe:	70 08       	ld.w	r8,r8[0x0]
80021e00:	30 09       	mov	r9,0
80021e02:	f1 49 10 80 	st.w	r8[4224],r9
			centralData->waypoint_critical_coordinates.pos[Y] = 0.0;
80021e06:	ec f8 00 00 	ld.w	r8,r6[0]
80021e0a:	70 08       	ld.w	r8,r8[0x0]
80021e0c:	30 09       	mov	r9,0
80021e0e:	f1 49 10 84 	st.w	r8[4228],r9
			centralData->waypoint_critical_coordinates.pos[Z] = -30.0;
80021e12:	ec f8 00 00 	ld.w	r8,r6[0]
80021e16:	70 08       	ld.w	r8,r8[0x0]
80021e18:	fc 19 c1 f0 	movh	r9,0xc1f0
80021e1c:	f1 49 10 88 	st.w	r8[4232],r9
			break;
80021e20:	c1 38       	rjmp	80021e46 <waypoint_critical_handler+0x132>
			case CRITICAL_LAND:
			centralData->waypoint_critical_coordinates.pos[X] = 0.0;
80021e22:	ec f8 00 00 	ld.w	r8,r6[0]
80021e26:	70 08       	ld.w	r8,r8[0x0]
80021e28:	30 09       	mov	r9,0
80021e2a:	f1 49 10 80 	st.w	r8[4224],r9
			centralData->waypoint_critical_coordinates.pos[Y] = 0.0;
80021e2e:	ec f8 00 00 	ld.w	r8,r6[0]
80021e32:	70 08       	ld.w	r8,r8[0x0]
80021e34:	30 09       	mov	r9,0
80021e36:	f1 49 10 84 	st.w	r8[4228],r9
			centralData->waypoint_critical_coordinates.pos[Z] = 0.0;
80021e3a:	ec f8 00 00 	ld.w	r8,r6[0]
80021e3e:	70 08       	ld.w	r8,r8[0x0]
80021e40:	30 09       	mov	r9,0
80021e42:	f1 49 10 88 	st.w	r8[4232],r9
			break;
		}
		float rel_pos[3];
		uint8_t i;
		for (i=0;i<3;i++)
80021e46:	30 08       	mov	r8,0
80021e48:	ef 68 ff ff 	st.b	r7[-1],r8
80021e4c:	c2 18       	rjmp	80021e8e <waypoint_critical_handler+0x17a>
		{
			rel_pos[i] = centralData->waypoint_critical_coordinates.pos[i] - centralData->position_estimator.localPosition.pos[i];
80021e4e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80021e52:	ec f9 00 00 	ld.w	r9,r6[0]
80021e56:	72 09       	ld.w	r9,r9[0x0]
80021e58:	ef 3a ff ff 	ld.ub	r10,r7[-1]
80021e5c:	f4 ca fb e0 	sub	r10,r10,-1056
80021e60:	f2 0a 03 2a 	ld.w	r10,r9[r10<<0x2]
80021e64:	ec f9 00 00 	ld.w	r9,r6[0]
80021e68:	72 09       	ld.w	r9,r9[0x0]
80021e6a:	ef 3b ff ff 	ld.ub	r11,r7[-1]
80021e6e:	f6 cb fc 99 	sub	r11,r11,-871
80021e72:	f2 0b 03 29 	ld.w	r9,r9[r11<<0x2]
80021e76:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80021e7a:	a3 68       	lsl	r8,0x2
80021e7c:	ee 08 00 08 	add	r8,r7,r8
80021e80:	f1 49 ff e4 	st.w	r8[-28],r9
			centralData->waypoint_critical_coordinates.pos[Z] = 0.0;
			break;
		}
		float rel_pos[3];
		uint8_t i;
		for (i=0;i<3;i++)
80021e84:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80021e88:	2f f8       	sub	r8,-1
80021e8a:	ef 68 ff ff 	st.b	r7[-1],r8
80021e8e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80021e92:	30 28       	mov	r8,2
80021e94:	f0 09 18 00 	cp.b	r9,r8
80021e98:	fe 98 ff db 	brls	80021e4e <waypoint_critical_handler+0x13a>
		{
			rel_pos[i] = centralData->waypoint_critical_coordinates.pos[i] - centralData->position_estimator.localPosition.pos[i];
		}
		centralData->dist2wp_sqr = vector_norm_sqr(rel_pos);
80021e9c:	ec f8 00 00 	ld.w	r8,r6[0]
80021ea0:	70 05       	ld.w	r5,r8[0x0]
80021ea2:	ee c8 00 1c 	sub	r8,r7,28
80021ea6:	10 9c       	mov	r12,r8
80021ea8:	fe b0 ed c0 	rcall	8001fa28 <vector_norm_sqr>
80021eac:	18 98       	mov	r8,r12
80021eae:	eb 48 10 b0 	st.w	r5[4272],r8
	}
	
	if (centralData->dist2wp_sqr < 3.0)
80021eb2:	ec f8 00 00 	ld.w	r8,r6[0]
80021eb6:	70 08       	ld.w	r8,r8[0x0]
80021eb8:	f0 fa 10 b0 	ld.w	r10,r8[4272]
80021ebc:	30 18       	mov	r8,1
80021ebe:	fc 19 40 40 	movh	r9,0x4040
80021ec2:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80021ec6:	e0 8c 00 03 	brvs	80021ecc <waypoint_critical_handler+0x1b8>
80021eca:	c0 25       	brlt	80021ece <waypoint_critical_handler+0x1ba>
80021ecc:	30 08       	mov	r8,0
80021ece:	5c 58       	castu.b	r8
80021ed0:	c3 20       	breq	80021f34 <waypoint_critical_handler+0x220>
	{
		centralData->critical_next_state = false;
80021ed2:	ec f8 00 00 	ld.w	r8,r6[0]
80021ed6:	70 09       	ld.w	r9,r8[0x0]
80021ed8:	30 08       	mov	r8,0
80021eda:	f3 68 10 ba 	st.b	r9[4282],r8
		switch (centralData->critical_behavior)
80021ede:	ec f8 00 00 	ld.w	r8,r6[0]
80021ee2:	70 08       	ld.w	r8,r8[0x0]
80021ee4:	f0 f8 12 e4 	ld.w	r8,r8[4836]
80021ee8:	58 28       	cp.w	r8,2
80021eea:	c1 00       	breq	80021f0a <waypoint_critical_handler+0x1f6>
80021eec:	58 38       	cp.w	r8,3
80021eee:	c1 90       	breq	80021f20 <waypoint_critical_handler+0x20c>
80021ef0:	58 18       	cp.w	r8,1
80021ef2:	c2 11       	brne	80021f34 <waypoint_critical_handler+0x220>
		{
			case CLIMB_TO_SAFE_ALT:
			dbg_print("Critical State! Flying to home waypoint.\n");
80021ef4:	fe cc 02 7c 	sub	r12,pc,636
80021ef8:	f0 16 00 01 	mcall	r6[4]
			centralData->critical_behavior = FLY_TO_HOME_WP;
80021efc:	ec f8 00 00 	ld.w	r8,r6[0]
80021f00:	70 08       	ld.w	r8,r8[0x0]
80021f02:	30 29       	mov	r9,2
80021f04:	f1 49 12 e4 	st.w	r8[4836],r9
			break;
80021f08:	c1 68       	rjmp	80021f34 <waypoint_critical_handler+0x220>
			case FLY_TO_HOME_WP:
			dbg_print("Critical State! Performing critical landing.\n");
80021f0a:	fe cc 02 66 	sub	r12,pc,614
80021f0e:	f0 16 00 01 	mcall	r6[4]
			centralData->critical_behavior = CRITICAL_LAND;
80021f12:	ec f8 00 00 	ld.w	r8,r6[0]
80021f16:	70 08       	ld.w	r8,r8[0x0]
80021f18:	30 39       	mov	r9,3
80021f1a:	f1 49 12 e4 	st.w	r8[4836],r9
			break;
80021f1e:	c0 b8       	rjmp	80021f34 <waypoint_critical_handler+0x220>
			case CRITICAL_LAND:
			dbg_print("Critical State! Landed, switching off motors, Emergency mode.\n");
80021f20:	fe cc 02 4c 	sub	r12,pc,588
80021f24:	f0 16 00 01 	mcall	r6[4]
			centralData->critical_landing = true;
80021f28:	ec f8 00 00 	ld.w	r8,r6[0]
80021f2c:	70 09       	ld.w	r9,r8[0x0]
80021f2e:	30 18       	mov	r8,1
80021f30:	f3 68 10 b8 	st.b	r9[4280],r8
			break;
		}
	}
80021f34:	2f 9d       	sub	sp,-28
80021f36:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80021f3a:	00 00       	add	r0,r0
80021f3c:	80 02       	ld.sh	r2,r0[0x0]
80021f3e:	1b a4       	ld.ub	r4,sp[0x2]

80021f40 <buffer_full>:


#include "buffer.h"


int8_t buffer_full(Buffer_t * buffer) {
80021f40:	eb cd 40 80 	pushm	r7,lr
80021f44:	1a 97       	mov	r7,sp
80021f46:	20 1d       	sub	sp,4
80021f48:	ef 4c ff fc 	st.w	r7[-4],r12
	return (((buffer->BufferHead+1)&BUFFER_MASK) == buffer->BufferTail);
80021f4c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80021f50:	f1 38 01 00 	ld.ub	r8,r8[256]
80021f54:	2f f8       	sub	r8,-1
80021f56:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80021f5a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80021f5e:	f1 38 01 01 	ld.ub	r8,r8[257]
80021f62:	10 39       	cp.w	r9,r8
80021f64:	5f 08       	sreq	r8
}
80021f66:	10 9c       	mov	r12,r8
80021f68:	2f fd       	sub	sp,-4
80021f6a:	e3 cd 80 80 	ldm	sp++,r7,pc

80021f6e <buffer_put_lossy>:

void buffer_put_lossy(Buffer_t * buffer, uint8_t byte) {
80021f6e:	eb cd 40 c0 	pushm	r6-r7,lr
80021f72:	1a 97       	mov	r7,sp
80021f74:	20 3d       	sub	sp,12
80021f76:	4a 46       	lddpc	r6,80022004 <buffer_put_lossy+0x96>
80021f78:	1e 26       	rsub	r6,pc
80021f7a:	ef 4c ff f8 	st.w	r7[-8],r12
80021f7e:	16 98       	mov	r8,r11
80021f80:	ef 68 ff f4 	st.b	r7[-12],r8
	uint8_t tmp;
	tmp=(buffer->BufferHead+1)&BUFFER_MASK;
80021f84:	ee f8 ff f8 	ld.w	r8,r7[-8]
80021f88:	f1 38 01 00 	ld.ub	r8,r8[256]
80021f8c:	2f f8       	sub	r8,-1
80021f8e:	ef 68 ff ff 	st.b	r7[-1],r8

	if (tmp==buffer->BufferTail) {
80021f92:	ee f8 ff f8 	ld.w	r8,r7[-8]
80021f96:	f1 38 01 01 	ld.ub	r8,r8[257]
80021f9a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80021f9e:	f0 09 18 00 	cp.b	r9,r8
80021fa2:	c0 b1       	brne	80021fb8 <buffer_put_lossy+0x4a>
		//error: receive buffer overflow!!
		// lose old incoming data at the end of the buffer
		buffer->BufferTail=(buffer->BufferTail+1)&BUFFER_MASK;
80021fa4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80021fa8:	f1 38 01 01 	ld.ub	r8,r8[257]
80021fac:	2f f8       	sub	r8,-1
80021fae:	5c 58       	castu.b	r8
80021fb0:	ee f9 ff f8 	ld.w	r9,r7[-8]
80021fb4:	f3 68 01 01 	st.b	r9[257],r8
	}
	// store incoming data in buffer
	buffer->Buffer[buffer->BufferHead] = byte;
80021fb8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80021fbc:	f1 38 01 00 	ld.ub	r8,r8[256]
80021fc0:	10 99       	mov	r9,r8
80021fc2:	ee fa ff f8 	ld.w	r10,r7[-8]
80021fc6:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80021fca:	f4 09 0b 08 	st.b	r10[r9],r8
	buffer->BufferHead=tmp;
80021fce:	ee f9 ff f8 	ld.w	r9,r7[-8]
80021fd2:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80021fd6:	f3 68 01 00 	st.b	r9[256],r8
	if (buffer_full(buffer)) buffer->full =1; else buffer->full=0;
80021fda:	ee fc ff f8 	ld.w	r12,r7[-8]
80021fde:	f0 16 00 f2 	mcall	r6[968]
80021fe2:	18 98       	mov	r8,r12
80021fe4:	5c 58       	castu.b	r8
80021fe6:	c0 70       	breq	80021ff4 <buffer_put_lossy+0x86>
80021fe8:	ee f9 ff f8 	ld.w	r9,r7[-8]
80021fec:	30 18       	mov	r8,1
80021fee:	f3 68 01 02 	st.b	r9[258],r8
80021ff2:	c0 68       	rjmp	80021ffe <buffer_put_lossy+0x90>
80021ff4:	ee f9 ff f8 	ld.w	r9,r7[-8]
80021ff8:	30 08       	mov	r8,0
80021ffa:	f3 68 01 02 	st.b	r9[258],r8
}
80021ffe:	2f dd       	sub	sp,-12
80022000:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80022004:	80 02       	ld.sh	r2,r0[0x0]
80022006:	1d fc       	ld.ub	r12,lr[0x7]

80022008 <buffer_put>:

int8_t buffer_put(Buffer_t * buffer, uint8_t byte) {
80022008:	eb cd 40 c0 	pushm	r6-r7,lr
8002200c:	1a 97       	mov	r7,sp
8002200e:	20 3d       	sub	sp,12
80022010:	4a 16       	lddpc	r6,80022094 <buffer_put+0x8c>
80022012:	1e 26       	rsub	r6,pc
80022014:	ef 4c ff f8 	st.w	r7[-8],r12
80022018:	16 98       	mov	r8,r11
8002201a:	ef 68 ff f4 	st.b	r7[-12],r8
	uint8_t tmp;
	tmp=(buffer->BufferHead+1)&BUFFER_MASK;
8002201e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80022022:	f1 38 01 00 	ld.ub	r8,r8[256]
80022026:	2f f8       	sub	r8,-1
80022028:	ef 68 ff ff 	st.b	r7[-1],r8

	if (tmp==buffer->BufferTail) {
8002202c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80022030:	f1 38 01 01 	ld.ub	r8,r8[257]
80022034:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80022038:	f0 09 18 00 	cp.b	r9,r8
8002203c:	c0 51       	brne	80022046 <buffer_put+0x3e>
		//error: buffer full! return -1
		return -1;
8002203e:	e0 68 00 ff 	mov	r8,255
	}
	// store incoming data in buffer
	buffer->Buffer[buffer->BufferHead] = byte;
	buffer->BufferHead=tmp;
	if (buffer_full(buffer)) buffer->full =1; else buffer->full=0;
}
80022042:	10 9c       	mov	r12,r8
80022044:	c2 48       	rjmp	8002208c <buffer_put+0x84>
	if (tmp==buffer->BufferTail) {
		//error: buffer full! return -1
		return -1;
	}
	// store incoming data in buffer
	buffer->Buffer[buffer->BufferHead] = byte;
80022046:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002204a:	f1 38 01 00 	ld.ub	r8,r8[256]
8002204e:	10 99       	mov	r9,r8
80022050:	ee fa ff f8 	ld.w	r10,r7[-8]
80022054:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80022058:	f4 09 0b 08 	st.b	r10[r9],r8
	buffer->BufferHead=tmp;
8002205c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80022060:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80022064:	f3 68 01 00 	st.b	r9[256],r8
	if (buffer_full(buffer)) buffer->full =1; else buffer->full=0;
80022068:	ee fc ff f8 	ld.w	r12,r7[-8]
8002206c:	f0 16 00 f2 	mcall	r6[968]
80022070:	18 98       	mov	r8,r12
80022072:	5c 58       	castu.b	r8
80022074:	c0 70       	breq	80022082 <buffer_put+0x7a>
80022076:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002207a:	30 18       	mov	r8,1
8002207c:	f3 68 01 02 	st.b	r9[258],r8
80022080:	c0 68       	rjmp	8002208c <buffer_put+0x84>
80022082:	ee f9 ff f8 	ld.w	r9,r7[-8]
80022086:	30 08       	mov	r8,0
80022088:	f3 68 01 02 	st.b	r9[258],r8
}
8002208c:	2f dd       	sub	sp,-12
8002208e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80022092:	00 00       	add	r0,r0
80022094:	80 02       	ld.sh	r2,r0[0x0]
80022096:	1e 96       	mov	r6,pc

80022098 <buffer_get>:


uint8_t buffer_get(Buffer_t * buffer) {
80022098:	eb cd 40 80 	pushm	r7,lr
8002209c:	1a 97       	mov	r7,sp
8002209e:	20 2d       	sub	sp,8
800220a0:	ef 4c ff f8 	st.w	r7[-8],r12
	uint8_t ret=0;
800220a4:	30 08       	mov	r8,0
800220a6:	ef 68 ff ff 	st.b	r7[-1],r8
	if (buffer->BufferHead!=buffer->BufferTail){
800220aa:	ee f8 ff f8 	ld.w	r8,r7[-8]
800220ae:	f1 39 01 00 	ld.ub	r9,r8[256]
800220b2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800220b6:	f1 38 01 01 	ld.ub	r8,r8[257]
800220ba:	f0 09 18 00 	cp.b	r9,r8
800220be:	c1 a0       	breq	800220f2 <buffer_get+0x5a>
		ret=buffer->Buffer[buffer->BufferTail];
800220c0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800220c4:	f1 38 01 01 	ld.ub	r8,r8[257]
800220c8:	ee f9 ff f8 	ld.w	r9,r7[-8]
800220cc:	f2 08 07 08 	ld.ub	r8,r9[r8]
800220d0:	ef 68 ff ff 	st.b	r7[-1],r8
		buffer->BufferTail=  (buffer->BufferTail+1)&BUFFER_MASK;
800220d4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800220d8:	f1 38 01 01 	ld.ub	r8,r8[257]
800220dc:	2f f8       	sub	r8,-1
800220de:	5c 58       	castu.b	r8
800220e0:	ee f9 ff f8 	ld.w	r9,r7[-8]
800220e4:	f3 68 01 01 	st.b	r9[257],r8
		buffer->full=0;
800220e8:	ee f9 ff f8 	ld.w	r9,r7[-8]
800220ec:	30 08       	mov	r8,0
800220ee:	f3 68 01 02 	st.b	r9[258],r8
	}
	return ret;
800220f2:	ef 38 ff ff 	ld.ub	r8,r7[-1]
}
800220f6:	10 9c       	mov	r12,r8
800220f8:	2f ed       	sub	sp,-8
800220fa:	e3 cd 80 80 	ldm	sp++,r7,pc

800220fe <buffer_empty>:


int8_t buffer_empty(Buffer_t * buffer) {
800220fe:	eb cd 40 80 	pushm	r7,lr
80022102:	1a 97       	mov	r7,sp
80022104:	20 1d       	sub	sp,4
80022106:	ef 4c ff fc 	st.w	r7[-4],r12
	return (buffer->BufferHead==buffer->BufferTail);
8002210a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002210e:	f1 39 01 00 	ld.ub	r9,r8[256]
80022112:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022116:	f1 38 01 01 	ld.ub	r8,r8[257]
8002211a:	f0 09 18 00 	cp.b	r9,r8
8002211e:	5f 08       	sreq	r8
}
80022120:	10 9c       	mov	r12,r8
80022122:	2f fd       	sub	sp,-4
80022124:	e3 cd 80 80 	ldm	sp++,r7,pc

80022128 <buffer_bytes_available>:

int buffer_bytes_available(Buffer_t * buffer) {
80022128:	eb cd 40 80 	pushm	r7,lr
8002212c:	1a 97       	mov	r7,sp
8002212e:	20 1d       	sub	sp,4
80022130:	ef 4c ff fc 	st.w	r7[-4],r12
	return (BUFFER_SIZE+buffer->BufferHead - buffer->BufferTail)&BUFFER_MASK;
80022134:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022138:	f1 38 01 00 	ld.ub	r8,r8[256]
8002213c:	f0 c9 ff 00 	sub	r9,r8,-256
80022140:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022144:	f1 38 01 01 	ld.ub	r8,r8[257]
80022148:	f2 08 01 08 	sub	r8,r9,r8
8002214c:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
}
80022150:	10 9c       	mov	r12,r8
80022152:	2f fd       	sub	sp,-4
80022154:	e3 cd 80 80 	ldm	sp++,r7,pc

80022158 <buffer_init>:

void buffer_init(Buffer_t * buffer) {
80022158:	eb cd 40 80 	pushm	r7,lr
8002215c:	1a 97       	mov	r7,sp
8002215e:	20 1d       	sub	sp,4
80022160:	ef 4c ff fc 	st.w	r7[-4],r12
	buffer->BufferHead=0;
80022164:	ee f9 ff fc 	ld.w	r9,r7[-4]
80022168:	30 08       	mov	r8,0
8002216a:	f3 68 01 00 	st.b	r9[256],r8
	buffer->BufferTail=0;
8002216e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80022172:	30 08       	mov	r8,0
80022174:	f3 68 01 01 	st.b	r9[257],r8
	buffer->full=0;
80022178:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002217c:	30 08       	mov	r8,0
8002217e:	f3 68 01 02 	st.b	r9[258],r8
}
80022182:	2f fd       	sub	sp,-4
80022184:	e3 cd 80 80 	ldm	sp++,r7,pc

80022188 <buffer_clear>:

void buffer_clear(Buffer_t * buffer) {
80022188:	eb cd 40 80 	pushm	r7,lr
8002218c:	1a 97       	mov	r7,sp
8002218e:	20 1d       	sub	sp,4
80022190:	ef 4c ff fc 	st.w	r7[-4],r12
	buffer->BufferHead=0;
80022194:	ee f9 ff fc 	ld.w	r9,r7[-4]
80022198:	30 08       	mov	r8,0
8002219a:	f3 68 01 00 	st.b	r9[256],r8
	buffer->BufferTail=0;
8002219e:	ee f9 ff fc 	ld.w	r9,r7[-4]
800221a2:	30 08       	mov	r8,0
800221a4:	f3 68 01 01 	st.b	r9[257],r8
	buffer->full=0;
800221a8:	ee f9 ff fc 	ld.w	r9,r7[-4]
800221ac:	30 08       	mov	r8,0
800221ae:	f3 68 01 02 	st.b	r9[258],r8
}
800221b2:	2f fd       	sub	sp,-4
800221b4:	e3 cd 80 80 	ldm	sp++,r7,pc

800221b8 <make_buffered_stream>:

void make_buffered_stream(Buffer_t *buffer, byte_stream_t *stream) {
800221b8:	eb cd 40 c0 	pushm	r6-r7,lr
800221bc:	1a 97       	mov	r7,sp
800221be:	20 2d       	sub	sp,8
800221c0:	49 16       	lddpc	r6,80022204 <make_buffered_stream+0x4c>
800221c2:	1e 26       	rsub	r6,pc
800221c4:	ef 4c ff fc 	st.w	r7[-4],r12
800221c8:	ef 4b ff f8 	st.w	r7[-8],r11
	stream->get=&buffer_get;
800221cc:	ec f9 01 0c 	ld.w	r9,r6[268]
800221d0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800221d4:	91 09       	st.w	r8[0x0],r9
	stream->put=&buffer_put;
800221d6:	ec f9 01 40 	ld.w	r9,r6[320]
800221da:	ee f8 ff f8 	ld.w	r8,r7[-8]
800221de:	91 19       	st.w	r8[0x4],r9
	stream->flush=NULL;
800221e0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800221e4:	30 09       	mov	r9,0
800221e6:	91 29       	st.w	r8[0x8],r9
	stream->data=buffer;
800221e8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800221ec:	ee f9 ff fc 	ld.w	r9,r7[-4]
800221f0:	91 59       	st.w	r8[0x14],r9
	stream->bytes_available=&buffer_bytes_available;
800221f2:	ec f9 00 b4 	ld.w	r9,r6[180]
800221f6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800221fa:	91 49       	st.w	r8[0x10],r9
}
800221fc:	2f ed       	sub	sp,-8
800221fe:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80022202:	00 00       	add	r0,r0
80022204:	80 02       	ld.sh	r2,r0[0x0]
80022206:	20 46       	sub	r6,4

80022208 <make_buffered_stream_lossy>:

void make_buffered_stream_lossy(Buffer_t *buffer, byte_stream_t *stream) {
80022208:	eb cd 40 c0 	pushm	r6-r7,lr
8002220c:	1a 97       	mov	r7,sp
8002220e:	20 2d       	sub	sp,8
80022210:	49 16       	lddpc	r6,80022254 <make_buffered_stream_lossy+0x4c>
80022212:	1e 26       	rsub	r6,pc
80022214:	ef 4c ff fc 	st.w	r7[-4],r12
80022218:	ef 4b ff f8 	st.w	r7[-8],r11
	stream->get=&buffer_get;
8002221c:	ec f9 01 0c 	ld.w	r9,r6[268]
80022220:	ee f8 ff f8 	ld.w	r8,r7[-8]
80022224:	91 09       	st.w	r8[0x0],r9
	stream->put=&buffer_put_lossy;
80022226:	ec f9 04 e8 	ld.w	r9,r6[1256]
8002222a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002222e:	91 19       	st.w	r8[0x4],r9
	stream->flush=NULL;
80022230:	ee f8 ff f8 	ld.w	r8,r7[-8]
80022234:	30 09       	mov	r9,0
80022236:	91 29       	st.w	r8[0x8],r9
	stream->data=buffer;
80022238:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002223c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80022240:	91 59       	st.w	r8[0x14],r9
	stream->bytes_available=&buffer_bytes_available;
80022242:	ec f9 00 b4 	ld.w	r9,r6[180]
80022246:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002224a:	91 49       	st.w	r8[0x10],r9
}
8002224c:	2f ed       	sub	sp,-8
8002224e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80022252:	00 00       	add	r0,r0
80022254:	80 02       	ld.sh	r2,r0[0x0]
80022256:	20 96       	sub	r6,9

80022258 <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
80022258:	eb cd 40 c0 	pushm	r6-r7,lr
8002225c:	1a 97       	mov	r7,sp
8002225e:	20 6d       	sub	sp,24
80022260:	49 e6       	lddpc	r6,800222d8 <interpolate+0x80>
80022262:	1e 26       	rsub	r6,pc
80022264:	ef 4c ff f8 	st.w	r7[-8],r12
80022268:	ef 4b ff f4 	st.w	r7[-12],r11
8002226c:	ef 4a ff f0 	st.w	r7[-16],r10
80022270:	ef 49 ff ec 	st.w	r7[-20],r9
80022274:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
80022278:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002227c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80022280:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
80022284:	c0 41       	brne	8002228c <interpolate+0x34>
	{
		return y1;
80022286:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002228a:	c2 38       	rjmp	800222d0 <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
8002228c:	ee f9 ff e8 	ld.w	r9,r7[-24]
80022290:	ee f8 ff ec 	ld.w	r8,r7[-20]
80022294:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80022298:	ee fa ff f8 	ld.w	r10,r7[-8]
8002229c:	ee f8 ff f4 	ld.w	r8,r7[-12]
800222a0:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
800222a4:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
800222a8:	ee fa ff f0 	ld.w	r10,r7[-16]
800222ac:	ee f9 ff f4 	ld.w	r9,r7[-12]
800222b0:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
800222b4:	12 9b       	mov	r11,r9
800222b6:	10 9c       	mov	r12,r8
800222b8:	f0 16 00 08 	mcall	r6[32]
800222bc:	18 98       	mov	r8,r12
800222be:	10 99       	mov	r9,r8
800222c0:	ee f8 ff ec 	ld.w	r8,r7[-20]
800222c4:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
800222c8:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
800222cc:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
800222d0:	10 9c       	mov	r12,r8
800222d2:	2f ad       	sub	sp,-24
800222d4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800222d8:	80 02       	ld.sh	r2,r0[0x0]
800222da:	20 e6       	sub	r6,14

800222dc <local_to_global_position>:
#include <math.h>
#include "print_util.h"
#include "conf_platform.h"

// convert local NED coordinates to global GPS coordinates (relative to origin given in local coordinate frame)
global_position_t local_to_global_position(local_coordinates_t input){
800222dc:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
800222e0:	1a 97       	mov	r7,sp
800222e2:	20 8d       	sub	sp,32
800222e4:	4d 96       	lddpc	r6,80022448 <local_to_global_position+0x16c>
800222e6:	1e 26       	rsub	r6,pc
800222e8:	ee c5 ff e0 	sub	r5,r7,-32
800222ec:	ef 4c ff e0 	st.w	r7[-32],r12
	global_position_t output;
	//output.latitude = input.origin.latitude  + rad_to_deg( input.pos[0] *2.0 / (PI * EARTH_RADIUS));
	//output.longitude= input.origin.longitude + rad_to_deg( input.pos[1] *2.0 / (PI * EARTH_RADIUS*cos(deg_to_rad(output.latitude))));
	output.latitude = input.origin.latitude  + rad_to_deg( input.pos[0] / EARTH_RADIUS);
800222f0:	ea e2 00 18 	ld.d	r2,r5[24]
800222f4:	6a 08       	ld.w	r8,r5[0x0]
800222f6:	10 9c       	mov	r12,r8
800222f8:	f0 16 00 02 	mcall	r6[8]
800222fc:	fc 18 40 00 	movh	r8,0x4000
80022300:	e0 69 54 a6 	mov	r9,21670
80022304:	ea 19 41 58 	orh	r9,0x4158
80022308:	f0 16 00 0c 	mcall	r6[48]
8002230c:	14 98       	mov	r8,r10
8002230e:	16 99       	mov	r9,r11
80022310:	10 9a       	mov	r10,r8
80022312:	12 9b       	mov	r11,r9
80022314:	30 08       	mov	r8,0
80022316:	e0 69 80 00 	mov	r9,32768
8002231a:	ea 19 40 66 	orh	r9,0x4066
8002231e:	f0 16 00 03 	mcall	r6[12]
80022322:	14 98       	mov	r8,r10
80022324:	16 99       	mov	r9,r11
80022326:	10 9a       	mov	r10,r8
80022328:	12 9b       	mov	r11,r9
8002232a:	e0 68 2d 18 	mov	r8,11544
8002232e:	ea 18 54 44 	orh	r8,0x5444
80022332:	e0 69 21 fb 	mov	r9,8699
80022336:	ea 19 40 09 	orh	r9,0x4009
8002233a:	f0 16 00 0c 	mcall	r6[48]
8002233e:	14 98       	mov	r8,r10
80022340:	16 99       	mov	r9,r11
80022342:	04 9a       	mov	r10,r2
80022344:	06 9b       	mov	r11,r3
80022346:	f0 16 00 05 	mcall	r6[20]
8002234a:	14 98       	mov	r8,r10
8002234c:	16 99       	mov	r9,r11
8002234e:	ee e9 ff ec 	st.d	r7[-20],r8
	output.longitude= input.origin.longitude + rad_to_deg( input.pos[1] / ( EARTH_RADIUS*cos(deg_to_rad(output.latitude))));
80022352:	ea e2 00 10 	ld.d	r2,r5[16]
80022356:	6a 18       	ld.w	r8,r5[0x4]
80022358:	10 9c       	mov	r12,r8
8002235a:	f0 16 00 02 	mcall	r6[8]
8002235e:	14 90       	mov	r0,r10
80022360:	16 91       	mov	r1,r11
80022362:	ee ea ff ec 	ld.d	r10,r7[-20]
80022366:	e0 68 2d 18 	mov	r8,11544
8002236a:	ea 18 54 44 	orh	r8,0x5444
8002236e:	e0 69 21 fb 	mov	r9,8699
80022372:	ea 19 40 09 	orh	r9,0x4009
80022376:	f0 16 00 03 	mcall	r6[12]
8002237a:	14 98       	mov	r8,r10
8002237c:	16 99       	mov	r9,r11
8002237e:	10 9a       	mov	r10,r8
80022380:	12 9b       	mov	r11,r9
80022382:	30 08       	mov	r8,0
80022384:	e0 69 80 00 	mov	r9,32768
80022388:	ea 19 40 66 	orh	r9,0x4066
8002238c:	f0 16 00 0c 	mcall	r6[48]
80022390:	14 98       	mov	r8,r10
80022392:	16 99       	mov	r9,r11
80022394:	10 9a       	mov	r10,r8
80022396:	12 9b       	mov	r11,r9
80022398:	f0 16 00 b0 	mcall	r6[704]
8002239c:	fc 18 40 00 	movh	r8,0x4000
800223a0:	e0 69 54 a6 	mov	r9,21670
800223a4:	ea 19 41 58 	orh	r9,0x4158
800223a8:	f0 16 00 03 	mcall	r6[12]
800223ac:	14 98       	mov	r8,r10
800223ae:	16 99       	mov	r9,r11
800223b0:	00 9a       	mov	r10,r0
800223b2:	02 9b       	mov	r11,r1
800223b4:	f0 16 00 0c 	mcall	r6[48]
800223b8:	14 98       	mov	r8,r10
800223ba:	16 99       	mov	r9,r11
800223bc:	10 9a       	mov	r10,r8
800223be:	12 9b       	mov	r11,r9
800223c0:	30 08       	mov	r8,0
800223c2:	e0 69 80 00 	mov	r9,32768
800223c6:	ea 19 40 66 	orh	r9,0x4066
800223ca:	f0 16 00 03 	mcall	r6[12]
800223ce:	14 98       	mov	r8,r10
800223d0:	16 99       	mov	r9,r11
800223d2:	10 9a       	mov	r10,r8
800223d4:	12 9b       	mov	r11,r9
800223d6:	e0 68 2d 18 	mov	r8,11544
800223da:	ea 18 54 44 	orh	r8,0x5444
800223de:	e0 69 21 fb 	mov	r9,8699
800223e2:	ea 19 40 09 	orh	r9,0x4009
800223e6:	f0 16 00 0c 	mcall	r6[48]
800223ea:	14 98       	mov	r8,r10
800223ec:	16 99       	mov	r9,r11
800223ee:	04 9a       	mov	r10,r2
800223f0:	06 9b       	mov	r11,r3
800223f2:	f0 16 00 05 	mcall	r6[20]
800223f6:	14 98       	mov	r8,r10
800223f8:	16 99       	mov	r9,r11
800223fa:	ee e9 ff e4 	st.d	r7[-28],r8
	output.altitude = -input.pos[2] + input.origin.altitude;
800223fe:	6a 89       	ld.w	r9,r5[0x20]
80022400:	6a 28       	ld.w	r8,r5[0x8]
80022402:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80022406:	ef 48 ff f4 	st.w	r7[-12],r8
	output.heading=input.heading;
8002240a:	6a 38       	ld.w	r8,r5[0xc]
8002240c:	ef 48 ff f8 	st.w	r7[-8],r8

	return output;
80022410:	ee fa ff e0 	ld.w	r10,r7[-32]
80022414:	ee cb 00 1c 	sub	r11,r7,28
80022418:	f4 c8 00 00 	sub	r8,r10,0
8002241c:	f6 c9 00 00 	sub	r9,r11,0
80022420:	72 0c       	ld.w	r12,r9[0x0]
80022422:	91 0c       	st.w	r8[0x0],r12
80022424:	72 1c       	ld.w	r12,r9[0x4]
80022426:	91 1c       	st.w	r8[0x4],r12
80022428:	72 2c       	ld.w	r12,r9[0x8]
8002242a:	91 2c       	st.w	r8[0x8],r12
8002242c:	72 39       	ld.w	r9,r9[0xc]
8002242e:	91 39       	st.w	r8[0xc],r9
80022430:	f6 e8 00 10 	ld.d	r8,r11[16]
80022434:	f4 e9 00 10 	st.d	r10[16],r8
80022438:	76 68       	ld.w	r8,r11[0x18]
8002243a:	95 68       	st.w	r10[0x18],r8
}
8002243c:	ee fc ff e0 	ld.w	r12,r7[-32]
80022440:	2f 8d       	sub	sp,-32
80022442:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
80022446:	00 00       	add	r0,r0
80022448:	80 02       	ld.sh	r2,r0[0x0]
8002244a:	21 6a       	sub	r10,22

8002244c <global_to_local_position>:

// convert a global position into a local coordinate frame around the given global origin
local_coordinates_t global_to_local_position(global_position_t position, global_position_t origin) {
8002244c:	eb cd 40 e8 	pushm	r3,r5-r7,lr
80022450:	1a 97       	mov	r7,sp
80022452:	20 ed       	sub	sp,56
80022454:	4f 16       	lddpc	r6,80022618 <global_to_local_position+0x1cc>
80022456:	1e 26       	rsub	r6,pc
80022458:	ee c5 ff ec 	sub	r5,r7,-20
8002245c:	18 93       	mov	r3,r12
	local_coordinates_t output;
	output.origin=origin;
8002245e:	ee ca 00 28 	sub	r10,r7,40
80022462:	ea cb ff e4 	sub	r11,r5,-28
80022466:	f4 c8 00 00 	sub	r8,r10,0
8002246a:	f6 c9 00 00 	sub	r9,r11,0
8002246e:	72 0c       	ld.w	r12,r9[0x0]
80022470:	91 0c       	st.w	r8[0x0],r12
80022472:	72 1c       	ld.w	r12,r9[0x4]
80022474:	91 1c       	st.w	r8[0x4],r12
80022476:	72 2c       	ld.w	r12,r9[0x8]
80022478:	91 2c       	st.w	r8[0x8],r12
8002247a:	72 39       	ld.w	r9,r9[0xc]
8002247c:	91 39       	st.w	r8[0xc],r9
8002247e:	f6 e8 00 10 	ld.d	r8,r11[16]
80022482:	f4 e9 00 10 	st.d	r10[16],r8
80022486:	76 68       	ld.w	r8,r11[0x18]
80022488:	95 68       	st.w	r10[0x18],r8
	double small_radius=cos(deg_to_rad(position.latitude))*EARTH_RADIUS;
8002248a:	ea ea 00 08 	ld.d	r10,r5[8]
8002248e:	e0 68 2d 18 	mov	r8,11544
80022492:	ea 18 54 44 	orh	r8,0x5444
80022496:	e0 69 21 fb 	mov	r9,8699
8002249a:	ea 19 40 09 	orh	r9,0x4009
8002249e:	f0 16 00 03 	mcall	r6[12]
800224a2:	14 98       	mov	r8,r10
800224a4:	16 99       	mov	r9,r11
800224a6:	10 9a       	mov	r10,r8
800224a8:	12 9b       	mov	r11,r9
800224aa:	30 08       	mov	r8,0
800224ac:	e0 69 80 00 	mov	r9,32768
800224b0:	ea 19 40 66 	orh	r9,0x4066
800224b4:	f0 16 00 0c 	mcall	r6[48]
800224b8:	14 98       	mov	r8,r10
800224ba:	16 99       	mov	r9,r11
800224bc:	10 9a       	mov	r10,r8
800224be:	12 9b       	mov	r11,r9
800224c0:	f0 16 00 b0 	mcall	r6[704]
800224c4:	fc 18 40 00 	movh	r8,0x4000
800224c8:	e0 69 54 a6 	mov	r9,21670
800224cc:	ea 19 41 58 	orh	r9,0x4158
800224d0:	f0 16 00 03 	mcall	r6[12]
800224d4:	14 98       	mov	r8,r10
800224d6:	16 99       	mov	r9,r11
800224d8:	ee e9 ff f8 	st.d	r7[-8],r8
	output.pos[X]=  (float)(sin(deg_to_rad((position.latitude-origin.latitude)))*EARTH_RADIUS);
800224dc:	ea ea 00 08 	ld.d	r10,r5[8]
800224e0:	ea e8 00 24 	ld.d	r8,r5[36]
800224e4:	f0 16 00 11 	mcall	r6[68]
800224e8:	14 98       	mov	r8,r10
800224ea:	16 99       	mov	r9,r11
800224ec:	10 9a       	mov	r10,r8
800224ee:	12 9b       	mov	r11,r9
800224f0:	e0 68 2d 18 	mov	r8,11544
800224f4:	ea 18 54 44 	orh	r8,0x5444
800224f8:	e0 69 21 fb 	mov	r9,8699
800224fc:	ea 19 40 09 	orh	r9,0x4009
80022500:	f0 16 00 03 	mcall	r6[12]
80022504:	14 98       	mov	r8,r10
80022506:	16 99       	mov	r9,r11
80022508:	10 9a       	mov	r10,r8
8002250a:	12 9b       	mov	r11,r9
8002250c:	30 08       	mov	r8,0
8002250e:	e0 69 80 00 	mov	r9,32768
80022512:	ea 19 40 66 	orh	r9,0x4066
80022516:	f0 16 00 0c 	mcall	r6[48]
8002251a:	14 98       	mov	r8,r10
8002251c:	16 99       	mov	r9,r11
8002251e:	10 9a       	mov	r10,r8
80022520:	12 9b       	mov	r11,r9
80022522:	f0 16 00 ad 	mcall	r6[692]
80022526:	fc 18 40 00 	movh	r8,0x4000
8002252a:	e0 69 54 a6 	mov	r9,21670
8002252e:	ea 19 41 58 	orh	r9,0x4158
80022532:	f0 16 00 03 	mcall	r6[12]
80022536:	14 98       	mov	r8,r10
80022538:	16 99       	mov	r9,r11
8002253a:	10 9a       	mov	r10,r8
8002253c:	12 9b       	mov	r11,r9
8002253e:	f0 16 00 09 	mcall	r6[36]
80022542:	18 98       	mov	r8,r12
80022544:	ef 48 ff c8 	st.w	r7[-56],r8
	output.pos[Y]=  (float)(sin(deg_to_rad((position.longitude-origin.longitude)))*small_radius);
80022548:	ea ea 00 00 	ld.d	r10,r5[0]
8002254c:	ea e8 00 1c 	ld.d	r8,r5[28]
80022550:	f0 16 00 11 	mcall	r6[68]
80022554:	14 98       	mov	r8,r10
80022556:	16 99       	mov	r9,r11
80022558:	10 9a       	mov	r10,r8
8002255a:	12 9b       	mov	r11,r9
8002255c:	e0 68 2d 18 	mov	r8,11544
80022560:	ea 18 54 44 	orh	r8,0x5444
80022564:	e0 69 21 fb 	mov	r9,8699
80022568:	ea 19 40 09 	orh	r9,0x4009
8002256c:	f0 16 00 03 	mcall	r6[12]
80022570:	14 98       	mov	r8,r10
80022572:	16 99       	mov	r9,r11
80022574:	10 9a       	mov	r10,r8
80022576:	12 9b       	mov	r11,r9
80022578:	30 08       	mov	r8,0
8002257a:	e0 69 80 00 	mov	r9,32768
8002257e:	ea 19 40 66 	orh	r9,0x4066
80022582:	f0 16 00 0c 	mcall	r6[48]
80022586:	14 98       	mov	r8,r10
80022588:	16 99       	mov	r9,r11
8002258a:	10 9a       	mov	r10,r8
8002258c:	12 9b       	mov	r11,r9
8002258e:	f0 16 00 ad 	mcall	r6[692]
80022592:	ee e8 ff f8 	ld.d	r8,r7[-8]
80022596:	f0 16 00 03 	mcall	r6[12]
8002259a:	14 98       	mov	r8,r10
8002259c:	16 99       	mov	r9,r11
8002259e:	10 9a       	mov	r10,r8
800225a0:	12 9b       	mov	r11,r9
800225a2:	f0 16 00 09 	mcall	r6[36]
800225a6:	18 98       	mov	r8,r12
800225a8:	ef 48 ff cc 	st.w	r7[-52],r8
	output.pos[Z]=  (float)(-(position.altitude - origin.altitude));
800225ac:	6a 49       	ld.w	r9,r5[0x10]
800225ae:	6a b8       	ld.w	r8,r5[0x2c]
800225b0:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
800225b4:	ee 18 80 00 	eorh	r8,0x8000
800225b8:	ef 48 ff d0 	st.w	r7[-48],r8
	output.heading=position.heading;
800225bc:	6a 58       	ld.w	r8,r5[0x14]
800225be:	ef 48 ff d4 	st.w	r7[-44],r8
	//dbg_print_num(deg_to_rad((position.longitude-origin.longitude))*10000000,10);
	//dbg_print(", sin_long:");
	//dbg_print_num(sin(deg_to_rad((position.longitude-origin.longitude)))*small_radius*10000000,10);
	//dbg_print("\n");
	
	return output;
800225c2:	06 9b       	mov	r11,r3
800225c4:	ee ca 00 38 	sub	r10,r7,56
800225c8:	f6 c8 00 00 	sub	r8,r11,0
800225cc:	f4 c9 00 00 	sub	r9,r10,0
800225d0:	72 0c       	ld.w	r12,r9[0x0]
800225d2:	91 0c       	st.w	r8[0x0],r12
800225d4:	72 1c       	ld.w	r12,r9[0x4]
800225d6:	91 1c       	st.w	r8[0x4],r12
800225d8:	72 2c       	ld.w	r12,r9[0x8]
800225da:	91 2c       	st.w	r8[0x8],r12
800225dc:	72 39       	ld.w	r9,r9[0xc]
800225de:	91 39       	st.w	r8[0xc],r9
800225e0:	f6 c8 ff f0 	sub	r8,r11,-16
800225e4:	f4 c9 ff f0 	sub	r9,r10,-16
800225e8:	72 0c       	ld.w	r12,r9[0x0]
800225ea:	91 0c       	st.w	r8[0x0],r12
800225ec:	72 1c       	ld.w	r12,r9[0x4]
800225ee:	91 1c       	st.w	r8[0x4],r12
800225f0:	72 2c       	ld.w	r12,r9[0x8]
800225f2:	91 2c       	st.w	r8[0x8],r12
800225f4:	72 39       	ld.w	r9,r9[0xc]
800225f6:	91 39       	st.w	r8[0xc],r9
800225f8:	f6 c8 ff e0 	sub	r8,r11,-32
800225fc:	f4 c9 ff e0 	sub	r9,r10,-32
80022600:	72 0a       	ld.w	r10,r9[0x0]
80022602:	91 0a       	st.w	r8[0x0],r10
80022604:	72 1a       	ld.w	r10,r9[0x4]
80022606:	91 1a       	st.w	r8[0x4],r10
80022608:	72 2a       	ld.w	r10,r9[0x8]
8002260a:	91 2a       	st.w	r8[0x8],r10
8002260c:	72 39       	ld.w	r9,r9[0xc]
8002260e:	91 39       	st.w	r8[0xc],r9
}
80022610:	06 9c       	mov	r12,r3
80022612:	2f 2d       	sub	sp,-56
80022614:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
80022618:	80 02       	ld.sh	r2,r0[0x0]
8002261a:	22 da       	sub	r10,45

8002261c <Quat_to_Aero>:

Aero_Attitude_t Quat_to_Aero(UQuat_t qe) {
8002261c:	eb cd 40 ee 	pushm	r1-r3,r5-r7,lr
80022620:	1a 97       	mov	r7,sp
80022622:	20 3d       	sub	sp,12
80022624:	4d 06       	lddpc	r6,80022764 <Quat_to_Aero+0x148>
80022626:	1e 26       	rsub	r6,pc
80022628:	ee c5 ff e4 	sub	r5,r7,-28
8002262c:	18 91       	mov	r1,r12
	Aero_Attitude_t aero;

	aero.rpy[0]= atan2(2*(qe.s*qe.v[0] + qe.v[1]*qe.v[2]) , (qe.s*qe.s - qe.v[0]*qe.v[0] - qe.v[1]*qe.v[1] + qe.v[2]*qe.v[2])); 
8002262e:	6a 09       	ld.w	r9,r5[0x0]
80022630:	6a 08       	ld.w	r8,r5[0x0]
80022632:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80022636:	6a 1a       	ld.w	r10,r5[0x4]
80022638:	6a 18       	ld.w	r8,r5[0x4]
8002263a:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8002263e:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80022642:	6a 2a       	ld.w	r10,r5[0x8]
80022644:	6a 28       	ld.w	r8,r5[0x8]
80022646:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8002264a:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8002264e:	6a 3a       	ld.w	r10,r5[0xc]
80022650:	6a 38       	ld.w	r8,r5[0xc]
80022652:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80022656:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8002265a:	10 9c       	mov	r12,r8
8002265c:	f0 16 00 02 	mcall	r6[8]
80022660:	14 92       	mov	r2,r10
80022662:	16 93       	mov	r3,r11
80022664:	6a 09       	ld.w	r9,r5[0x0]
80022666:	6a 18       	ld.w	r8,r5[0x4]
80022668:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8002266c:	6a 2a       	ld.w	r10,r5[0x8]
8002266e:	6a 38       	ld.w	r8,r5[0xc]
80022670:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80022674:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80022678:	e5 a0 08 88 	cop	cp0,cr8,cr8,cr8,0x40
8002267c:	10 9c       	mov	r12,r8
8002267e:	f0 16 00 02 	mcall	r6[8]
80022682:	04 98       	mov	r8,r2
80022684:	06 99       	mov	r9,r3
80022686:	f0 16 00 4f 	mcall	r6[316]
8002268a:	14 98       	mov	r8,r10
8002268c:	16 99       	mov	r9,r11
8002268e:	10 9a       	mov	r10,r8
80022690:	12 9b       	mov	r11,r9
80022692:	f0 16 00 09 	mcall	r6[36]
80022696:	18 98       	mov	r8,r12
80022698:	ef 48 ff f4 	st.w	r7[-12],r8
	aero.rpy[1]=-asin(2*(qe.v[0]*qe.v[2] - qe.s*qe.v[1]));
8002269c:	6a 19       	ld.w	r9,r5[0x4]
8002269e:	6a 38       	ld.w	r8,r5[0xc]
800226a0:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
800226a4:	6a 0a       	ld.w	r10,r5[0x0]
800226a6:	6a 28       	ld.w	r8,r5[0x8]
800226a8:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
800226ac:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
800226b0:	fc 18 c0 00 	movh	r8,0xc000
800226b4:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
800226b8:	10 9c       	mov	r12,r8
800226ba:	f0 16 00 02 	mcall	r6[8]
800226be:	14 98       	mov	r8,r10
800226c0:	16 99       	mov	r9,r11
800226c2:	10 9a       	mov	r10,r8
800226c4:	12 9b       	mov	r11,r9
800226c6:	f0 16 01 74 	mcall	r6[1488]
800226ca:	14 98       	mov	r8,r10
800226cc:	16 99       	mov	r9,r11
800226ce:	10 9a       	mov	r10,r8
800226d0:	12 9b       	mov	r11,r9
800226d2:	f0 16 00 09 	mcall	r6[36]
800226d6:	18 98       	mov	r8,r12
800226d8:	ef 48 ff f8 	st.w	r7[-8],r8
	aero.rpy[2]= atan2(2*(qe.s*qe.v[2] + qe.v[0]*qe.v[1]) , (qe.s*qe.s + qe.v[0]*qe.v[0] - qe.v[1]*qe.v[1] - qe.v[2]*qe.v[2]));
800226dc:	6a 09       	ld.w	r9,r5[0x0]
800226de:	6a 08       	ld.w	r8,r5[0x0]
800226e0:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
800226e4:	6a 1a       	ld.w	r10,r5[0x4]
800226e6:	6a 18       	ld.w	r8,r5[0x4]
800226e8:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
800226ec:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
800226f0:	6a 2a       	ld.w	r10,r5[0x8]
800226f2:	6a 28       	ld.w	r8,r5[0x8]
800226f4:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
800226f8:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
800226fc:	6a 3a       	ld.w	r10,r5[0xc]
800226fe:	6a 38       	ld.w	r8,r5[0xc]
80022700:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80022704:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80022708:	10 9c       	mov	r12,r8
8002270a:	f0 16 00 02 	mcall	r6[8]
8002270e:	14 92       	mov	r2,r10
80022710:	16 93       	mov	r3,r11
80022712:	6a 09       	ld.w	r9,r5[0x0]
80022714:	6a 38       	ld.w	r8,r5[0xc]
80022716:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8002271a:	6a 1a       	ld.w	r10,r5[0x4]
8002271c:	6a 28       	ld.w	r8,r5[0x8]
8002271e:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80022722:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80022726:	e5 a0 08 88 	cop	cp0,cr8,cr8,cr8,0x40
8002272a:	10 9c       	mov	r12,r8
8002272c:	f0 16 00 02 	mcall	r6[8]
80022730:	04 98       	mov	r8,r2
80022732:	06 99       	mov	r9,r3
80022734:	f0 16 00 4f 	mcall	r6[316]
80022738:	14 98       	mov	r8,r10
8002273a:	16 99       	mov	r9,r11
8002273c:	10 9a       	mov	r10,r8
8002273e:	12 9b       	mov	r11,r9
80022740:	f0 16 00 09 	mcall	r6[36]
80022744:	18 98       	mov	r8,r12
80022746:	ef 48 ff fc 	st.w	r7[-4],r8
	
	return aero;
8002274a:	02 9a       	mov	r10,r1
8002274c:	ee cb 00 0c 	sub	r11,r7,12
80022750:	f6 e8 00 00 	ld.d	r8,r11[0]
80022754:	f4 e9 00 00 	st.d	r10[0],r8
80022758:	76 28       	ld.w	r8,r11[0x8]
8002275a:	95 28       	st.w	r10[0x8],r8
}
8002275c:	02 9c       	mov	r12,r1
8002275e:	2f dd       	sub	sp,-12
80022760:	e3 cd 80 ee 	ldm	sp++,r1-r3,r5-r7,pc
80022764:	80 02       	ld.sh	r2,r0[0x0]
80022766:	24 aa       	sub	r10,74

80022768 <get_yaw>:

float get_yaw(UQuat_t qe) {
80022768:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
8002276c:	1a 97       	mov	r7,sp
8002276e:	49 f6       	lddpc	r6,800227e8 <get_yaw+0x80>
80022770:	1e 26       	rsub	r6,pc
80022772:	ee c5 ff e8 	sub	r5,r7,-24
	return  atan2(2*(qe.s*qe.v[2] + qe.v[0]*qe.v[1]) , (qe.s*qe.s + qe.v[0]*qe.v[0] - qe.v[1]*qe.v[1] - qe.v[2]*qe.v[2]));
80022776:	6a 09       	ld.w	r9,r5[0x0]
80022778:	6a 08       	ld.w	r8,r5[0x0]
8002277a:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8002277e:	6a 1a       	ld.w	r10,r5[0x4]
80022780:	6a 18       	ld.w	r8,r5[0x4]
80022782:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80022786:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8002278a:	6a 2a       	ld.w	r10,r5[0x8]
8002278c:	6a 28       	ld.w	r8,r5[0x8]
8002278e:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80022792:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80022796:	6a 3a       	ld.w	r10,r5[0xc]
80022798:	6a 38       	ld.w	r8,r5[0xc]
8002279a:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8002279e:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
800227a2:	10 9c       	mov	r12,r8
800227a4:	f0 16 00 02 	mcall	r6[8]
800227a8:	14 92       	mov	r2,r10
800227aa:	16 93       	mov	r3,r11
800227ac:	6a 09       	ld.w	r9,r5[0x0]
800227ae:	6a 38       	ld.w	r8,r5[0xc]
800227b0:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
800227b4:	6a 1a       	ld.w	r10,r5[0x4]
800227b6:	6a 28       	ld.w	r8,r5[0x8]
800227b8:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
800227bc:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
800227c0:	e5 a0 08 88 	cop	cp0,cr8,cr8,cr8,0x40
800227c4:	10 9c       	mov	r12,r8
800227c6:	f0 16 00 02 	mcall	r6[8]
800227ca:	04 98       	mov	r8,r2
800227cc:	06 99       	mov	r9,r3
800227ce:	f0 16 00 4f 	mcall	r6[316]
800227d2:	14 98       	mov	r8,r10
800227d4:	16 99       	mov	r9,r11
800227d6:	10 9a       	mov	r10,r8
800227d8:	12 9b       	mov	r11,r9
800227da:	f0 16 00 09 	mcall	r6[36]
800227de:	18 98       	mov	r8,r12
}
800227e0:	10 9c       	mov	r12,r8
800227e2:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
800227e6:	00 00       	add	r0,r0
800227e8:	80 02       	ld.sh	r2,r0[0x0]
800227ea:	25 f4       	sub	r4,95

800227ec <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
800227ec:	eb cd 40 c0 	pushm	r6-r7,lr
800227f0:	1a 97       	mov	r7,sp
800227f2:	20 6d       	sub	sp,24
800227f4:	49 e6       	lddpc	r6,8002286c <interpolate+0x80>
800227f6:	1e 26       	rsub	r6,pc
800227f8:	ef 4c ff f8 	st.w	r7[-8],r12
800227fc:	ef 4b ff f4 	st.w	r7[-12],r11
80022800:	ef 4a ff f0 	st.w	r7[-16],r10
80022804:	ef 49 ff ec 	st.w	r7[-20],r9
80022808:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
8002280c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80022810:	ee f8 ff f0 	ld.w	r8,r7[-16]
80022814:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
80022818:	c0 41       	brne	80022820 <interpolate+0x34>
	{
		return y1;
8002281a:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002281e:	c2 38       	rjmp	80022864 <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
80022820:	ee f9 ff e8 	ld.w	r9,r7[-24]
80022824:	ee f8 ff ec 	ld.w	r8,r7[-20]
80022828:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8002282c:	ee fa ff f8 	ld.w	r10,r7[-8]
80022830:	ee f8 ff f4 	ld.w	r8,r7[-12]
80022834:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80022838:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8002283c:	ee fa ff f0 	ld.w	r10,r7[-16]
80022840:	ee f9 ff f4 	ld.w	r9,r7[-12]
80022844:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80022848:	12 9b       	mov	r11,r9
8002284a:	10 9c       	mov	r12,r8
8002284c:	f0 16 00 08 	mcall	r6[32]
80022850:	18 98       	mov	r8,r12
80022852:	10 99       	mov	r9,r8
80022854:	ee f8 ff ec 	ld.w	r8,r7[-20]
80022858:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8002285c:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
80022860:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
80022864:	10 9c       	mov	r12,r8
80022866:	2f ad       	sub	sp,-24
80022868:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002286c:	80 02       	ld.sh	r2,r0[0x0]
8002286e:	26 7a       	sub	r10,103

80022870 <dbg_print_init>:

/**
 * \brief some utilities for printing strings and numbers 
 */
void dbg_print_init(byte_stream_t* debug_stream)
{
80022870:	eb cd 40 c0 	pushm	r6-r7,lr
80022874:	1a 97       	mov	r7,sp
80022876:	20 1d       	sub	sp,4
80022878:	48 66       	lddpc	r6,80022890 <dbg_print_init+0x20>
8002287a:	1e 26       	rsub	r6,pc
8002287c:	ef 4c ff fc 	st.w	r7[-4],r12
	deb_stream=debug_stream;
80022880:	ec f8 01 90 	ld.w	r8,r6[400]
80022884:	ee f9 ff fc 	ld.w	r9,r7[-4]
80022888:	91 09       	st.w	r8[0x0],r9
}
8002288a:	2f fd       	sub	sp,-4
8002288c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80022890:	80 02       	ld.sh	r2,r0[0x0]
80022892:	26 fe       	sub	lr,111

80022894 <putstring>:

void putstring(byte_stream_t *out_stream, const char* s) {
80022894:	eb cd 40 80 	pushm	r7,lr
80022898:	1a 97       	mov	r7,sp
8002289a:	20 2d       	sub	sp,8
8002289c:	ef 4c ff fc 	st.w	r7[-4],r12
800228a0:	ef 4b ff f8 	st.w	r7[-8],r11
	if ((out_stream==NULL) || (out_stream->put==NULL)) return;
800228a4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800228a8:	58 08       	cp.w	r8,0
800228aa:	c2 10       	breq	800228ec <putstring+0x58>
800228ac:	ee f8 ff fc 	ld.w	r8,r7[-4]
800228b0:	70 18       	ld.w	r8,r8[0x4]
800228b2:	58 08       	cp.w	r8,0
800228b4:	c1 51       	brne	800228de <putstring+0x4a>
800228b6:	c1 c8       	rjmp	800228ee <putstring+0x5a>
	while (*s != 0) {
		out_stream->put(out_stream->data, *s);
800228b8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800228bc:	70 18       	ld.w	r8,r8[0x4]
800228be:	ee f9 ff f8 	ld.w	r9,r7[-8]
800228c2:	13 89       	ld.ub	r9,r9[0x0]
800228c4:	12 9a       	mov	r10,r9
800228c6:	ee f9 ff fc 	ld.w	r9,r7[-4]
800228ca:	72 59       	ld.w	r9,r9[0x14]
800228cc:	14 9b       	mov	r11,r10
800228ce:	12 9c       	mov	r12,r9
800228d0:	5d 18       	icall	r8
		s++;
800228d2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800228d6:	2f f8       	sub	r8,-1
800228d8:	ef 48 ff f8 	st.w	r7[-8],r8
800228dc:	c0 28       	rjmp	800228e0 <putstring+0x4c>
	deb_stream=debug_stream;
}

void putstring(byte_stream_t *out_stream, const char* s) {
	if ((out_stream==NULL) || (out_stream->put==NULL)) return;
	while (*s != 0) {
800228de:	d7 03       	nop
800228e0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800228e4:	11 88       	ld.ub	r8,r8[0x0]
800228e6:	58 08       	cp.w	r8,0
800228e8:	ce 81       	brne	800228b8 <putstring+0x24>
800228ea:	c0 28       	rjmp	800228ee <putstring+0x5a>
{
	deb_stream=debug_stream;
}

void putstring(byte_stream_t *out_stream, const char* s) {
	if ((out_stream==NULL) || (out_stream->put==NULL)) return;
800228ec:	d7 03       	nop
	while (*s != 0) {
		out_stream->put(out_stream->data, *s);
		s++;
	}
}
800228ee:	2f ed       	sub	sp,-8
800228f0:	e3 cd 80 80 	ldm	sp++,r7,pc

800228f4 <putdigit>:

static const char alphabet[36] = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";

void putdigit(byte_stream_t *out_stream, unsigned c){
800228f4:	eb cd 40 c0 	pushm	r6-r7,lr
800228f8:	1a 97       	mov	r7,sp
800228fa:	20 2d       	sub	sp,8
800228fc:	49 76       	lddpc	r6,80022958 <putdigit+0x64>
800228fe:	1e 26       	rsub	r6,pc
80022900:	ef 4c ff fc 	st.w	r7[-4],r12
80022904:	ef 4b ff f8 	st.w	r7[-8],r11
if ((out_stream==NULL) || (out_stream->put==NULL)) return;
80022908:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002290c:	58 08       	cp.w	r8,0
8002290e:	c1 d0       	breq	80022948 <putdigit+0x54>
80022910:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022914:	70 18       	ld.w	r8,r8[0x4]
80022916:	58 08       	cp.w	r8,0
80022918:	c1 a0       	breq	8002294c <putdigit+0x58>
	
if (c > 35)
8002291a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002291e:	e0 48 00 23 	cp.w	r8,35
80022922:	e0 8b 00 17 	brhi	80022950 <putdigit+0x5c>
    return;
  out_stream->put(out_stream->data,  alphabet[c]);
80022926:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002292a:	70 18       	ld.w	r8,r8[0x4]
8002292c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80022930:	ec fa 08 78 	ld.w	r10,r6[2168]
80022934:	f4 09 07 09 	ld.ub	r9,r10[r9]
80022938:	12 9a       	mov	r10,r9
8002293a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002293e:	72 59       	ld.w	r9,r9[0x14]
80022940:	14 9b       	mov	r11,r10
80022942:	12 9c       	mov	r12,r9
80022944:	5d 18       	icall	r8
80022946:	c0 68       	rjmp	80022952 <putdigit+0x5e>
}

static const char alphabet[36] = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";

void putdigit(byte_stream_t *out_stream, unsigned c){
if ((out_stream==NULL) || (out_stream->put==NULL)) return;
80022948:	d7 03       	nop
8002294a:	c0 48       	rjmp	80022952 <putdigit+0x5e>
8002294c:	d7 03       	nop
8002294e:	c0 28       	rjmp	80022952 <putdigit+0x5e>
	
if (c > 35)
    return;
80022950:	d7 03       	nop
  out_stream->put(out_stream->data,  alphabet[c]);
}
80022952:	2f ed       	sub	sp,-8
80022954:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80022958:	80 02       	ld.sh	r2,r0[0x0]
8002295a:	27 82       	sub	r2,120

8002295c <putnum>:


/*
  Outputs numbers with less than 10 digits
*/
void putnum(byte_stream_t *out_stream, long c, char base){
8002295c:	eb cd 40 c0 	pushm	r6-r7,lr
80022960:	1a 97       	mov	r7,sp
80022962:	20 7d       	sub	sp,28
80022964:	4b 96       	lddpc	r6,80022a48 <putnum+0xec>
80022966:	1e 26       	rsub	r6,pc
80022968:	ef 4c ff ec 	st.w	r7[-20],r12
8002296c:	ef 4b ff e8 	st.w	r7[-24],r11
80022970:	14 98       	mov	r8,r10
80022972:	ef 68 ff e4 	st.b	r7[-28],r8
  char storage[MAX_DIGITS];
  long i = MAX_DIGITS;
80022976:	30 a8       	mov	r8,10
80022978:	ef 48 ff fc 	st.w	r7[-4],r8
  if ((out_stream==NULL) || (out_stream->put==NULL)) return;
8002297c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80022980:	58 08       	cp.w	r8,0
80022982:	c5 d0       	breq	80022a3c <putnum+0xe0>
80022984:	ee f8 ff ec 	ld.w	r8,r7[-20]
80022988:	70 18       	ld.w	r8,r8[0x4]
8002298a:	58 08       	cp.w	r8,0
8002298c:	c5 a0       	breq	80022a40 <putnum+0xe4>
  /* Take Care of the sign */
  if(c < 0){
8002298e:	ee f8 ff e8 	ld.w	r8,r7[-24]
80022992:	58 08       	cp.w	r8,0
80022994:	c1 04       	brge	800229b4 <putnum+0x58>
    out_stream->put(out_stream->data,   '-');
80022996:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002299a:	70 18       	ld.w	r8,r8[0x4]
8002299c:	ee f9 ff ec 	ld.w	r9,r7[-20]
800229a0:	72 59       	ld.w	r9,r9[0x14]
800229a2:	32 db       	mov	r11,45
800229a4:	12 9c       	mov	r12,r9
800229a6:	5d 18       	icall	r8
    c = c*-1;
800229a8:	ee f8 ff e8 	ld.w	r8,r7[-24]
800229ac:	5c 38       	neg	r8
800229ae:	ef 48 ff e8 	st.w	r7[-24],r8
800229b2:	c0 a8       	rjmp	800229c6 <putnum+0x6a>
  } else {
	  out_stream->put(out_stream->data,  ' ');
800229b4:	ee f8 ff ec 	ld.w	r8,r7[-20]
800229b8:	70 18       	ld.w	r8,r8[0x4]
800229ba:	ee f9 ff ec 	ld.w	r9,r7[-20]
800229be:	72 59       	ld.w	r9,r9[0x14]
800229c0:	32 0b       	mov	r11,32
800229c2:	12 9c       	mov	r12,r9
800229c4:	5d 18       	icall	r8
    
  }

  do{
    i--;
800229c6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800229ca:	20 18       	sub	r8,1
800229cc:	ef 48 ff fc 	st.w	r7[-4],r8
    storage[i] = c % base;
800229d0:	ee fa ff fc 	ld.w	r10,r7[-4]
800229d4:	ef 39 ff e4 	ld.ub	r9,r7[-28]
800229d8:	ee f8 ff e8 	ld.w	r8,r7[-24]
800229dc:	f0 09 0c 08 	divs	r8,r8,r9
800229e0:	12 98       	mov	r8,r9
800229e2:	5c 58       	castu.b	r8
800229e4:	ee 0a 00 09 	add	r9,r7,r10
800229e8:	f3 68 ff f0 	st.b	r9[-16],r8
    c = c / base;
800229ec:	ef 39 ff e4 	ld.ub	r9,r7[-28]
800229f0:	ee f8 ff e8 	ld.w	r8,r7[-24]
800229f4:	f0 09 0c 08 	divs	r8,r8,r9
800229f8:	ef 48 ff e8 	st.w	r7[-24],r8
  }while((i >= 0) 
  && (c > 0)
  );
800229fc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022a00:	58 08       	cp.w	r8,0
80022a02:	c1 75       	brlt	80022a30 <putnum+0xd4>
80022a04:	ee f8 ff e8 	ld.w	r8,r7[-24]
80022a08:	58 08       	cp.w	r8,0
80022a0a:	fe 99 ff de 	brgt	800229c6 <putnum+0x6a>
  /* i is the index of the last digit calculated */

  /* Hence, there is no need to initialize i */
  for( ; i<MAX_DIGITS; i++){
80022a0e:	c1 18       	rjmp	80022a30 <putnum+0xd4>
     putdigit(out_stream, storage[i]);
80022a10:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022a14:	ee 08 00 08 	add	r8,r7,r8
80022a18:	f1 38 ff f0 	ld.ub	r8,r8[-16]
80022a1c:	10 9b       	mov	r11,r8
80022a1e:	ee fc ff ec 	ld.w	r12,r7[-20]
80022a22:	f0 16 00 a7 	mcall	r6[668]
  && (c > 0)
  );
  /* i is the index of the last digit calculated */

  /* Hence, there is no need to initialize i */
  for( ; i<MAX_DIGITS; i++){
80022a26:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022a2a:	2f f8       	sub	r8,-1
80022a2c:	ef 48 ff fc 	st.w	r7[-4],r8
80022a30:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022a34:	58 98       	cp.w	r8,9
80022a36:	fe 9a ff ed 	brle	80022a10 <putnum+0xb4>
80022a3a:	c0 48       	rjmp	80022a42 <putnum+0xe6>
  Outputs numbers with less than 10 digits
*/
void putnum(byte_stream_t *out_stream, long c, char base){
  char storage[MAX_DIGITS];
  long i = MAX_DIGITS;
  if ((out_stream==NULL) || (out_stream->put==NULL)) return;
80022a3c:	d7 03       	nop
80022a3e:	c0 28       	rjmp	80022a42 <putnum+0xe6>
80022a40:	d7 03       	nop
  /* Hence, there is no need to initialize i */
  for( ; i<MAX_DIGITS; i++){
     putdigit(out_stream, storage[i]);
  }

}
80022a42:	2f 9d       	sub	sp,-28
80022a44:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80022a48:	80 02       	ld.sh	r2,r0[0x0]
80022a4a:	27 ea       	sub	r10,126

80022a4c <putnum_tight>:

void putnum_tight(byte_stream_t *out_stream, long c, char base){
80022a4c:	eb cd 40 c0 	pushm	r6-r7,lr
80022a50:	1a 97       	mov	r7,sp
80022a52:	20 7d       	sub	sp,28
80022a54:	4b 46       	lddpc	r6,80022b24 <putnum_tight+0xd8>
80022a56:	1e 26       	rsub	r6,pc
80022a58:	ef 4c ff ec 	st.w	r7[-20],r12
80022a5c:	ef 4b ff e8 	st.w	r7[-24],r11
80022a60:	14 98       	mov	r8,r10
80022a62:	ef 68 ff e4 	st.b	r7[-28],r8
  char storage[MAX_DIGITS];
  long i = MAX_DIGITS;
80022a66:	30 a8       	mov	r8,10
80022a68:	ef 48 ff fc 	st.w	r7[-4],r8
  if ((out_stream==NULL) || (out_stream->put==NULL)) return;
80022a6c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80022a70:	58 08       	cp.w	r8,0
80022a72:	c5 30       	breq	80022b18 <putnum_tight+0xcc>
80022a74:	ee f8 ff ec 	ld.w	r8,r7[-20]
80022a78:	70 18       	ld.w	r8,r8[0x4]
80022a7a:	58 08       	cp.w	r8,0
80022a7c:	c5 00       	breq	80022b1c <putnum_tight+0xd0>
  /* Take Care of the sign */
  if(c < 0){
80022a7e:	ee f8 ff e8 	ld.w	r8,r7[-24]
80022a82:	58 08       	cp.w	r8,0
80022a84:	c0 f4       	brge	80022aa2 <putnum_tight+0x56>
    out_stream->put(out_stream->data,   '-');
80022a86:	ee f8 ff ec 	ld.w	r8,r7[-20]
80022a8a:	70 18       	ld.w	r8,r8[0x4]
80022a8c:	ee f9 ff ec 	ld.w	r9,r7[-20]
80022a90:	72 59       	ld.w	r9,r9[0x14]
80022a92:	32 db       	mov	r11,45
80022a94:	12 9c       	mov	r12,r9
80022a96:	5d 18       	icall	r8
    c = c*-1;
80022a98:	ee f8 ff e8 	ld.w	r8,r7[-24]
80022a9c:	5c 38       	neg	r8
80022a9e:	ef 48 ff e8 	st.w	r7[-24],r8
  } else {
    
  }

  do{
    i--;
80022aa2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022aa6:	20 18       	sub	r8,1
80022aa8:	ef 48 ff fc 	st.w	r7[-4],r8
    storage[i] = c % base;
80022aac:	ee fa ff fc 	ld.w	r10,r7[-4]
80022ab0:	ef 39 ff e4 	ld.ub	r9,r7[-28]
80022ab4:	ee f8 ff e8 	ld.w	r8,r7[-24]
80022ab8:	f0 09 0c 08 	divs	r8,r8,r9
80022abc:	12 98       	mov	r8,r9
80022abe:	5c 58       	castu.b	r8
80022ac0:	ee 0a 00 09 	add	r9,r7,r10
80022ac4:	f3 68 ff f0 	st.b	r9[-16],r8
    c = c / base;
80022ac8:	ef 39 ff e4 	ld.ub	r9,r7[-28]
80022acc:	ee f8 ff e8 	ld.w	r8,r7[-24]
80022ad0:	f0 09 0c 08 	divs	r8,r8,r9
80022ad4:	ef 48 ff e8 	st.w	r7[-24],r8
  }while((i >= 0) 
  && (c > 0)
  );
80022ad8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022adc:	58 08       	cp.w	r8,0
80022ade:	c1 75       	brlt	80022b0c <putnum_tight+0xc0>
80022ae0:	ee f8 ff e8 	ld.w	r8,r7[-24]
80022ae4:	58 08       	cp.w	r8,0
80022ae6:	fe 99 ff de 	brgt	80022aa2 <putnum_tight+0x56>
  /* i is the index of the last digit calculated */

  /* Hence, there is no need to initialize i */
  for( ; i<MAX_DIGITS; i++){
80022aea:	c1 18       	rjmp	80022b0c <putnum_tight+0xc0>
     putdigit(out_stream, storage[i]);
80022aec:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022af0:	ee 08 00 08 	add	r8,r7,r8
80022af4:	f1 38 ff f0 	ld.ub	r8,r8[-16]
80022af8:	10 9b       	mov	r11,r8
80022afa:	ee fc ff ec 	ld.w	r12,r7[-20]
80022afe:	f0 16 00 a7 	mcall	r6[668]
  && (c > 0)
  );
  /* i is the index of the last digit calculated */

  /* Hence, there is no need to initialize i */
  for( ; i<MAX_DIGITS; i++){
80022b02:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022b06:	2f f8       	sub	r8,-1
80022b08:	ef 48 ff fc 	st.w	r7[-4],r8
80022b0c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022b10:	58 98       	cp.w	r8,9
80022b12:	fe 9a ff ed 	brle	80022aec <putnum_tight+0xa0>
80022b16:	c0 48       	rjmp	80022b1e <putnum_tight+0xd2>
}

void putnum_tight(byte_stream_t *out_stream, long c, char base){
  char storage[MAX_DIGITS];
  long i = MAX_DIGITS;
  if ((out_stream==NULL) || (out_stream->put==NULL)) return;
80022b18:	d7 03       	nop
80022b1a:	c0 28       	rjmp	80022b1e <putnum_tight+0xd2>
80022b1c:	d7 03       	nop
  /* Hence, there is no need to initialize i */
  for( ; i<MAX_DIGITS; i++){
     putdigit(out_stream, storage[i]);
  }

}
80022b1e:	2f 9d       	sub	sp,-28
80022b20:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80022b24:	80 02       	ld.sh	r2,r0[0x0]
80022b26:	28 da       	sub	r10,-115
80022b28:	2d 00       	sub	r0,-48
80022b2a:	00 00       	add	r0,r0
80022b2c:	2e 00       	sub	r0,-32

80022b2e <putfloat>:

void putfloat(byte_stream_t *out_stream, float c, int after_digits){
80022b2e:	eb cd 40 c0 	pushm	r6-r7,lr
80022b32:	1a 97       	mov	r7,sp
80022b34:	20 8d       	sub	sp,32
80022b36:	4b d6       	lddpc	r6,80022c28 <putfloat+0xfa>
80022b38:	1e 26       	rsub	r6,pc
80022b3a:	ef 4c ff e8 	st.w	r7[-24],r12
80022b3e:	ef 4b ff e4 	st.w	r7[-28],r11
80022b42:	ef 4a ff e0 	st.w	r7[-32],r10
	int i;
	float num=c;
80022b46:	ee f8 ff e4 	ld.w	r8,r7[-28]
80022b4a:	ef 48 ff f0 	st.w	r7[-16],r8
	if (c<0) {
80022b4e:	30 18       	mov	r8,1
80022b50:	ee fa ff e4 	ld.w	r10,r7[-28]
80022b54:	30 09       	mov	r9,0
80022b56:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80022b5a:	e0 8c 00 03 	brvs	80022b60 <putfloat+0x32>
80022b5e:	c0 25       	brlt	80022b62 <putfloat+0x34>
80022b60:	30 08       	mov	r8,0
80022b62:	5c 58       	castu.b	r8
80022b64:	c0 d0       	breq	80022b7e <putfloat+0x50>
		putstring(out_stream, "-");
80022b66:	fe cb 00 3e 	sub	r11,pc,62
80022b6a:	ee fc ff e8 	ld.w	r12,r7[-24]
80022b6e:	f0 16 00 33 	mcall	r6[204]
		num=-c;
80022b72:	ee f8 ff e4 	ld.w	r8,r7[-28]
80022b76:	ee 18 80 00 	eorh	r8,0x8000
80022b7a:	ef 48 ff f0 	st.w	r7[-16],r8
	}
	int whole=abs((int)num);
80022b7e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80022b82:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80022b86:	ef 48 ff fc 	st.w	r7[-4],r8
80022b8a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022b8e:	5c 48       	abs	r8
80022b90:	ef 48 ff fc 	st.w	r7[-4],r8
80022b94:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022b98:	ef 48 ff f4 	st.w	r7[-12],r8
	float after=(num-(float)whole);
80022b9c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80022ba0:	e5 a6 08 08 	cop	cp0,cr8,cr0,cr8,0x4c
80022ba4:	ee f9 ff f0 	ld.w	r9,r7[-16]
80022ba8:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80022bac:	ef 48 ff f8 	st.w	r7[-8],r8

	putnum_tight(out_stream, whole, 10);
80022bb0:	30 aa       	mov	r10,10
80022bb2:	ee fb ff f4 	ld.w	r11,r7[-12]
80022bb6:	ee fc ff e8 	ld.w	r12,r7[-24]
80022bba:	f0 16 01 3b 	mcall	r6[1260]
	putstring(out_stream, "."); 
80022bbe:	fe cb 00 92 	sub	r11,pc,146
80022bc2:	ee fc ff e8 	ld.w	r12,r7[-24]
80022bc6:	f0 16 00 33 	mcall	r6[204]
	
	for (i=0; i<after_digits; i++) 
80022bca:	30 08       	mov	r8,0
80022bcc:	ef 48 ff ec 	st.w	r7[-20],r8
80022bd0:	c2 38       	rjmp	80022c16 <putfloat+0xe8>
	{
		after*=10;
80022bd2:	ee f9 ff f8 	ld.w	r9,r7[-8]
80022bd6:	fc 18 41 20 	movh	r8,0x4120
80022bda:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80022bde:	ef 48 ff f8 	st.w	r7[-8],r8
		putdigit(out_stream, (int)after);
80022be2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80022be6:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80022bea:	10 9b       	mov	r11,r8
80022bec:	ee fc ff e8 	ld.w	r12,r7[-24]
80022bf0:	f0 16 00 a7 	mcall	r6[668]
		after=after-(int)after;
80022bf4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80022bf8:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80022bfc:	e5 a6 08 08 	cop	cp0,cr8,cr0,cr8,0x4c
80022c00:	ee f9 ff f8 	ld.w	r9,r7[-8]
80022c04:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80022c08:	ef 48 ff f8 	st.w	r7[-8],r8
	float after=(num-(float)whole);

	putnum_tight(out_stream, whole, 10);
	putstring(out_stream, "."); 
	
	for (i=0; i<after_digits; i++) 
80022c0c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80022c10:	2f f8       	sub	r8,-1
80022c12:	ef 48 ff ec 	st.w	r7[-20],r8
80022c16:	ee f9 ff ec 	ld.w	r9,r7[-20]
80022c1a:	ee f8 ff e0 	ld.w	r8,r7[-32]
80022c1e:	10 39       	cp.w	r9,r8
80022c20:	cd 95       	brlt	80022bd2 <putfloat+0xa4>
		after*=10;
		putdigit(out_stream, (int)after);
		after=after-(int)after;
	}
	
}
80022c22:	2f 8d       	sub	sp,-32
80022c24:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80022c28:	80 02       	ld.sh	r2,r0[0x0]
80022c2a:	29 bc       	sub	r12,-101
80022c2c:	28 00       	sub	r0,-128
80022c2e:	00 00       	add	r0,r0
80022c30:	2c 20       	sub	r0,-62
80022c32:	00 00       	add	r0,r0
80022c34:	29 20       	sub	r0,-110
	...

80022c38 <print_vector>:


void print_vector(byte_stream_t *out_stream, float v[], int after_digits) {
80022c38:	eb cd 40 c0 	pushm	r6-r7,lr
80022c3c:	1a 97       	mov	r7,sp
80022c3e:	20 4d       	sub	sp,16
80022c40:	4a 06       	lddpc	r6,80022cc0 <print_vector+0x88>
80022c42:	1e 26       	rsub	r6,pc
80022c44:	ef 4c ff f8 	st.w	r7[-8],r12
80022c48:	ef 4b ff f4 	st.w	r7[-12],r11
80022c4c:	ef 4a ff f0 	st.w	r7[-16],r10
	int i;
	putstring(out_stream, "(");
80022c50:	fe cb 00 24 	sub	r11,pc,36
80022c54:	ee fc ff f8 	ld.w	r12,r7[-8]
80022c58:	f0 16 00 33 	mcall	r6[204]
	for (i=0; i<3; i++) {
80022c5c:	30 08       	mov	r8,0
80022c5e:	ef 48 ff fc 	st.w	r7[-4],r8
80022c62:	c2 08       	rjmp	80022ca2 <print_vector+0x6a>
		putfloat(out_stream, v[i], after_digits);
80022c64:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022c68:	a3 68       	lsl	r8,0x2
80022c6a:	ee f9 ff f4 	ld.w	r9,r7[-12]
80022c6e:	f2 08 00 08 	add	r8,r9,r8
80022c72:	70 08       	ld.w	r8,r8[0x0]
80022c74:	ee fa ff f0 	ld.w	r10,r7[-16]
80022c78:	10 9b       	mov	r11,r8
80022c7a:	ee fc ff f8 	ld.w	r12,r7[-8]
80022c7e:	f0 16 00 cb 	mcall	r6[812]
		if (i<2) putstring(out_stream, ", ");
80022c82:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022c86:	58 18       	cp.w	r8,1
80022c88:	e0 89 00 08 	brgt	80022c98 <print_vector+0x60>
80022c8c:	fe cb 00 5c 	sub	r11,pc,92
80022c90:	ee fc ff f8 	ld.w	r12,r7[-8]
80022c94:	f0 16 00 33 	mcall	r6[204]


void print_vector(byte_stream_t *out_stream, float v[], int after_digits) {
	int i;
	putstring(out_stream, "(");
	for (i=0; i<3; i++) {
80022c98:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022c9c:	2f f8       	sub	r8,-1
80022c9e:	ef 48 ff fc 	st.w	r7[-4],r8
80022ca2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022ca6:	58 28       	cp.w	r8,2
80022ca8:	fe 9a ff de 	brle	80022c64 <print_vector+0x2c>
		putfloat(out_stream, v[i], after_digits);
		if (i<2) putstring(out_stream, ", ");

	}
	putstring(out_stream, ") ");
80022cac:	fe cb 00 78 	sub	r11,pc,120
80022cb0:	ee fc ff f8 	ld.w	r12,r7[-8]
80022cb4:	f0 16 00 33 	mcall	r6[204]

}
80022cb8:	2f cd       	sub	sp,-16
80022cba:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80022cbe:	00 00       	add	r0,r0
80022cc0:	80 02       	ld.sh	r2,r0[0x0]
80022cc2:	2a c6       	sub	r6,-84

80022cc4 <print_quaternion>:

void print_quaternion(byte_stream_t *out_stream, UQuat_t *quat, int after_digits) {
80022cc4:	eb cd 40 c0 	pushm	r6-r7,lr
80022cc8:	1a 97       	mov	r7,sp
80022cca:	20 3d       	sub	sp,12
80022ccc:	49 96       	lddpc	r6,80022d30 <print_quaternion+0x6c>
80022cce:	1e 26       	rsub	r6,pc
80022cd0:	ef 4c ff fc 	st.w	r7[-4],r12
80022cd4:	ef 4b ff f8 	st.w	r7[-8],r11
80022cd8:	ef 4a ff f4 	st.w	r7[-12],r10
	putstring(out_stream, "(");
80022cdc:	fe cb 00 b0 	sub	r11,pc,176
80022ce0:	ee fc ff fc 	ld.w	r12,r7[-4]
80022ce4:	f0 16 00 33 	mcall	r6[204]
	putfloat(out_stream, quat->s, after_digits);
80022ce8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80022cec:	70 08       	ld.w	r8,r8[0x0]
80022cee:	ee fa ff f4 	ld.w	r10,r7[-12]
80022cf2:	10 9b       	mov	r11,r8
80022cf4:	ee fc ff fc 	ld.w	r12,r7[-4]
80022cf8:	f0 16 00 cb 	mcall	r6[812]
	putstring(out_stream, ", ");
80022cfc:	fe cb 00 cc 	sub	r11,pc,204
80022d00:	ee fc ff fc 	ld.w	r12,r7[-4]
80022d04:	f0 16 00 33 	mcall	r6[204]
	print_vector(out_stream, quat->v, after_digits);
80022d08:	ee f8 ff f8 	ld.w	r8,r7[-8]
80022d0c:	2f c8       	sub	r8,-4
80022d0e:	ee fa ff f4 	ld.w	r10,r7[-12]
80022d12:	10 9b       	mov	r11,r8
80022d14:	ee fc ff fc 	ld.w	r12,r7[-4]
80022d18:	f0 16 00 e8 	mcall	r6[928]
	putstring(out_stream, ") ");
80022d1c:	fe cb 00 e8 	sub	r11,pc,232
80022d20:	ee fc ff fc 	ld.w	r12,r7[-4]
80022d24:	f0 16 00 33 	mcall	r6[204]
}
80022d28:	2f dd       	sub	sp,-12
80022d2a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80022d2e:	00 00       	add	r0,r0
80022d30:	80 02       	ld.sh	r2,r0[0x0]
80022d32:	2b 52       	sub	r2,-75

80022d34 <dbg_print>:

void dbg_print(const char* s) {
80022d34:	eb cd 40 c0 	pushm	r6-r7,lr
80022d38:	1a 97       	mov	r7,sp
80022d3a:	20 1d       	sub	sp,4
80022d3c:	48 86       	lddpc	r6,80022d5c <dbg_print+0x28>
80022d3e:	1e 26       	rsub	r6,pc
80022d40:	ef 4c ff fc 	st.w	r7[-4],r12
	putstring(deb_stream, s);
80022d44:	ec f8 01 90 	ld.w	r8,r6[400]
80022d48:	70 08       	ld.w	r8,r8[0x0]
80022d4a:	ee fb ff fc 	ld.w	r11,r7[-4]
80022d4e:	10 9c       	mov	r12,r8
80022d50:	f0 16 00 33 	mcall	r6[204]

}
80022d54:	2f fd       	sub	sp,-4
80022d56:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80022d5a:	00 00       	add	r0,r0
80022d5c:	80 02       	ld.sh	r2,r0[0x0]
80022d5e:	2b c2       	sub	r2,-68

80022d60 <dbg_print_num>:

void dbg_print_num(long c, char base) {
80022d60:	eb cd 40 c0 	pushm	r6-r7,lr
80022d64:	1a 97       	mov	r7,sp
80022d66:	20 2d       	sub	sp,8
80022d68:	48 b6       	lddpc	r6,80022d94 <dbg_print_num+0x34>
80022d6a:	1e 26       	rsub	r6,pc
80022d6c:	ef 4c ff fc 	st.w	r7[-4],r12
80022d70:	16 98       	mov	r8,r11
80022d72:	ef 68 ff f8 	st.b	r7[-8],r8
	putnum(deb_stream, c, base);
80022d76:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80022d7a:	ec f8 01 90 	ld.w	r8,r6[400]
80022d7e:	70 08       	ld.w	r8,r8[0x0]
80022d80:	12 9a       	mov	r10,r9
80022d82:	ee fb ff fc 	ld.w	r11,r7[-4]
80022d86:	10 9c       	mov	r12,r8
80022d88:	f0 16 00 26 	mcall	r6[152]

}
80022d8c:	2f ed       	sub	sp,-8
80022d8e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80022d92:	00 00       	add	r0,r0
80022d94:	80 02       	ld.sh	r2,r0[0x0]
80022d96:	2b ee       	sub	lr,-66

80022d98 <dbg_putfloat>:

void dbg_putfloat(float c, int after_digits) {
80022d98:	eb cd 40 c0 	pushm	r6-r7,lr
80022d9c:	1a 97       	mov	r7,sp
80022d9e:	20 2d       	sub	sp,8
80022da0:	48 a6       	lddpc	r6,80022dc8 <dbg_putfloat+0x30>
80022da2:	1e 26       	rsub	r6,pc
80022da4:	ef 4c ff fc 	st.w	r7[-4],r12
80022da8:	ef 4b ff f8 	st.w	r7[-8],r11
	putfloat(deb_stream, c, after_digits);
80022dac:	ec f8 01 90 	ld.w	r8,r6[400]
80022db0:	70 08       	ld.w	r8,r8[0x0]
80022db2:	ee fa ff f8 	ld.w	r10,r7[-8]
80022db6:	ee fb ff fc 	ld.w	r11,r7[-4]
80022dba:	10 9c       	mov	r12,r8
80022dbc:	f0 16 00 cb 	mcall	r6[812]
}
80022dc0:	2f ed       	sub	sp,-8
80022dc2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80022dc6:	00 00       	add	r0,r0
80022dc8:	80 02       	ld.sh	r2,r0[0x0]
80022dca:	2c 26       	sub	r6,-62

80022dcc <dbg_print_vector>:

void dbg_print_vector(float v[], int after_digits) {
80022dcc:	eb cd 40 c0 	pushm	r6-r7,lr
80022dd0:	1a 97       	mov	r7,sp
80022dd2:	20 2d       	sub	sp,8
80022dd4:	48 a6       	lddpc	r6,80022dfc <dbg_print_vector+0x30>
80022dd6:	1e 26       	rsub	r6,pc
80022dd8:	ef 4c ff fc 	st.w	r7[-4],r12
80022ddc:	ef 4b ff f8 	st.w	r7[-8],r11
	print_vector(deb_stream, v, after_digits);
80022de0:	ec f8 01 90 	ld.w	r8,r6[400]
80022de4:	70 08       	ld.w	r8,r8[0x0]
80022de6:	ee fa ff f8 	ld.w	r10,r7[-8]
80022dea:	ee fb ff fc 	ld.w	r11,r7[-4]
80022dee:	10 9c       	mov	r12,r8
80022df0:	f0 16 00 e8 	mcall	r6[928]
}
80022df4:	2f ed       	sub	sp,-8
80022df6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80022dfa:	00 00       	add	r0,r0
80022dfc:	80 02       	ld.sh	r2,r0[0x0]
80022dfe:	2c 5a       	sub	r10,-59

80022e00 <dbg_print_quaternion>:

void dbg_print_quaternion(UQuat_t *quat, int after_digits) {
80022e00:	eb cd 40 c0 	pushm	r6-r7,lr
80022e04:	1a 97       	mov	r7,sp
80022e06:	20 2d       	sub	sp,8
80022e08:	48 a6       	lddpc	r6,80022e30 <dbg_print_quaternion+0x30>
80022e0a:	1e 26       	rsub	r6,pc
80022e0c:	ef 4c ff fc 	st.w	r7[-4],r12
80022e10:	ef 4b ff f8 	st.w	r7[-8],r11
	print_quaternion(deb_stream, quat, after_digits);
80022e14:	ec f8 01 90 	ld.w	r8,r6[400]
80022e18:	70 08       	ld.w	r8,r8[0x0]
80022e1a:	ee fa ff f8 	ld.w	r10,r7[-8]
80022e1e:	ee fb ff fc 	ld.w	r11,r7[-4]
80022e22:	10 9c       	mov	r12,r8
80022e24:	f0 16 01 90 	mcall	r6[1600]
}
80022e28:	2f ed       	sub	sp,-8
80022e2a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80022e2e:	00 00       	add	r0,r0
80022e30:	80 02       	ld.sh	r2,r0[0x0]
80022e32:	2c 8e       	sub	lr,-56
80022e34:	0a 00       	add	r0,r5

80022e36 <dbg_log_value>:


void dbg_log_value(const char* msg, long value, char base) {
80022e36:	eb cd 40 c0 	pushm	r6-r7,lr
80022e3a:	1a 97       	mov	r7,sp
80022e3c:	20 3d       	sub	sp,12
80022e3e:	49 26       	lddpc	r6,80022e84 <dbg_log_value+0x4e>
80022e40:	1e 26       	rsub	r6,pc
80022e42:	ef 4c ff fc 	st.w	r7[-4],r12
80022e46:	ef 4b ff f8 	st.w	r7[-8],r11
80022e4a:	14 98       	mov	r8,r10
80022e4c:	ef 68 ff f4 	st.b	r7[-12],r8
	dbg_print(msg);
80022e50:	ee fc ff fc 	ld.w	r12,r7[-4]
80022e54:	f0 16 00 01 	mcall	r6[4]
	if (base>1) {
80022e58:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80022e5c:	30 18       	mov	r8,1
80022e5e:	f0 09 18 00 	cp.b	r9,r8
80022e62:	e0 88 00 09 	brls	80022e74 <dbg_log_value+0x3e>
		dbg_print_num(value, base);
80022e66:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80022e6a:	10 9b       	mov	r11,r8
80022e6c:	ee fc ff f8 	ld.w	r12,r7[-8]
80022e70:	f0 16 00 04 	mcall	r6[16]
	}
	dbg_print("\n");
80022e74:	fe cc 00 40 	sub	r12,pc,64
80022e78:	f0 16 00 01 	mcall	r6[4]

}
80022e7c:	2f dd       	sub	sp,-12
80022e7e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80022e82:	00 00       	add	r0,r0
80022e84:	80 02       	ld.sh	r2,r0[0x0]
80022e86:	2c c4       	sub	r4,-52

80022e88 <adcifa_get_calibration_data>:
#include "compiler.h"
#include "adcifa.h"

void adcifa_get_calibration_data(volatile avr32_adcifa_t * adcifa,
                                 adcifa_opt_t * p_adcifa_opt)
{
80022e88:	eb cd 40 80 	pushm	r7,lr
80022e8c:	1a 97       	mov	r7,sp
80022e8e:	20 6d       	sub	sp,24
80022e90:	ef 4c ff ec 	st.w	r7[-20],r12
80022e94:	ef 4b ff e8 	st.w	r7[-24],r11
	// Get Offset Calibration
	signed int adc_ocal = (( *(volatile signed int*)(AVR32_FLASHC_FACTORY_PAGE_ADDRESS + AVR32_FLASHC_FROW_OCAL_WORD)) &  AVR32_FLASHC_FROW_OCAL_MASK) >> AVR32_FLASHC_FROW_OCAL_OFFSET;
80022e98:	e0 68 02 04 	mov	r8,516
80022e9c:	ea 18 80 80 	orh	r8,0x8080
80022ea0:	70 08       	ld.w	r8,r8[0x0]
80022ea2:	e6 18 3f 00 	andh	r8,0x3f00,COH
80022ea6:	b9 48       	asr	r8,0x18
80022ea8:	ef 48 ff f0 	st.w	r7[-16],r8
	// Get Gain Calibration
	signed int adc_gcal = (( *(volatile signed int *)(AVR32_FLASHC_FACTORY_PAGE_ADDRESS + AVR32_FLASHC_FROW_GCAL_WORD)) &  AVR32_FLASHC_FROW_GCAL_MASK) >> AVR32_FLASHC_FROW_GCAL_OFFSET;
80022eac:	e0 68 02 04 	mov	r8,516
80022eb0:	ea 18 80 80 	orh	r8,0x8080
80022eb4:	70 08       	ld.w	r8,r8[0x0]
80022eb6:	f1 d8 c0 0f 	bfextu	r8,r8,0x0,0xf
80022eba:	ef 48 ff f4 	st.w	r7[-12],r8
	//  Get S/H Calibration
	signed int adc_gain0 = (( *(volatile signed int *)(AVR32_FLASHC_FACTORY_PAGE_ADDRESS + AVR32_FLASHC_FROW_GAIN0_WORD)) &  AVR32_FLASHC_FROW_GAIN0_MASK) >> AVR32_FLASHC_FROW_GAIN0_OFFSET;
80022ebe:	e0 68 02 08 	mov	r8,520
80022ec2:	ea 18 80 80 	orh	r8,0x8080
80022ec6:	70 08       	ld.w	r8,r8[0x0]
80022ec8:	f1 d8 c0 0a 	bfextu	r8,r8,0x0,0xa
80022ecc:	ef 48 ff f8 	st.w	r7[-8],r8
	signed int adc_gain1 = (( *(volatile signed int *)(AVR32_FLASHC_FACTORY_PAGE_ADDRESS + AVR32_FLASHC_FROW_GAIN1_WORD)) &  AVR32_FLASHC_FROW_GAIN1_MASK) >> AVR32_FLASHC_FROW_GAIN1_OFFSET;
80022ed0:	e0 68 02 08 	mov	r8,520
80022ed4:	ea 18 80 80 	orh	r8,0x8080
80022ed8:	70 08       	ld.w	r8,r8[0x0]
80022eda:	e6 18 03 ff 	andh	r8,0x3ff,COH
80022ede:	b1 48       	asr	r8,0x10
80022ee0:	ef 48 ff fc 	st.w	r7[-4],r8

	// Get ADC Offset Calibration
	p_adcifa_opt->offset_calibration_value = adc_ocal;
80022ee4:	ee f8 ff f0 	ld.w	r8,r7[-16]
80022ee8:	5c 88       	casts.h	r8
80022eea:	ee f9 ff e8 	ld.w	r9,r7[-24]
80022eee:	b2 68       	st.h	r9[0xc],r8

	// Get ADC Gain Calibration
	p_adcifa_opt->gain_calibration_value = adc_gcal ;
80022ef0:	ee f8 ff f4 	ld.w	r8,r7[-12]
80022ef4:	5c 88       	casts.h	r8
80022ef6:	ee f9 ff e8 	ld.w	r9,r7[-24]
80022efa:	b2 58       	st.h	r9[0xa],r8

	// Get Sample & Hold Gain Calibration for Seq 0
	p_adcifa_opt->sh0_calibration_value = adc_gain0;
80022efc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80022f00:	5c 88       	casts.h	r8
80022f02:	ee f9 ff e8 	ld.w	r9,r7[-24]
80022f06:	b2 78       	st.h	r9[0xe],r8

	// Get Sample & Hold Gain Calibration for Seq 1
	p_adcifa_opt->sh1_calibration_value = adc_gain1;
80022f08:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022f0c:	5c 88       	casts.h	r8
80022f0e:	ee f9 ff e8 	ld.w	r9,r7[-24]
80022f12:	f3 58 00 10 	st.h	r9[16],r8
}
80022f16:	2f ad       	sub	sp,-24
80022f18:	e3 cd 80 80 	ldm	sp++,r7,pc

80022f1c <adcifa_configure>:


U8 adcifa_configure(volatile avr32_adcifa_t * adcifa,
                    adcifa_opt_t * p_adcifa_opt,
                    U32 pb_hz)
{
80022f1c:	eb cd 40 80 	pushm	r7,lr
80022f20:	1a 97       	mov	r7,sp
80022f22:	20 3d       	sub	sp,12
80022f24:	ef 4c ff fc 	st.w	r7[-4],r12
80022f28:	ef 4b ff f8 	st.w	r7[-8],r11
80022f2c:	ef 4a ff f4 	st.w	r7[-12],r10

	// Sanity Check
	Assert( adcifa!=NULL );

	// Set the ADC configuration
	AVR32_ADCIFA.cfg = (p_adcifa_opt->sleep_mode_enable << AVR32_ADCIFA_CFG_SLEEP)
80022f30:	fc 7a 24 00 	mov	r10,-187392
80022f34:	ee f8 ff f8 	ld.w	r8,r7[-8]
80022f38:	f1 38 00 08 	ld.ub	r8,r8[8]
80022f3c:	f0 09 15 02 	lsl	r9,r8,0x2
	                    | (p_adcifa_opt->single_sequencer_mode << AVR32_ADCIFA_CFG_SSMQ)
80022f40:	ee f8 ff f8 	ld.w	r8,r7[-8]
80022f44:	11 e8       	ld.ub	r8,r8[0x6]
80022f46:	a3 78       	lsl	r8,0x3
	                    | (p_adcifa_opt->free_running_mode_enable << AVR32_ADCIFA_CFG_FRM)
80022f48:	10 49       	or	r9,r8
80022f4a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80022f4e:	11 f8       	ld.ub	r8,r8[0x7]
80022f50:	a5 68       	lsl	r8,0x4
	                    | (p_adcifa_opt->reference_source << AVR32_ADCIFA_CFG_RS)
80022f52:	10 49       	or	r9,r8
80022f54:	ee f8 ff f8 	ld.w	r8,r7[-8]
80022f58:	11 c8       	ld.ub	r8,r8[0x4]
80022f5a:	a5 78       	lsl	r8,0x5
	                    | (p_adcifa_opt->sample_and_hold_disable << AVR32_ADCIFA_CFG_SHD)
80022f5c:	10 49       	or	r9,r8
80022f5e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80022f62:	11 d8       	ld.ub	r8,r8[0x5]
80022f64:	a7 78       	lsl	r8,0x7
	                    | (((ADCIFA_START_UP_TIME * (p_adcifa_opt->frequency/1000))/32000) << AVR32_ADCIFA_CFG_SUT);
80022f66:	f3 e8 10 08 	or	r8,r9,r8

	// Sanity Check
	Assert( adcifa!=NULL );

	// Set the ADC configuration
	AVR32_ADCIFA.cfg = (p_adcifa_opt->sleep_mode_enable << AVR32_ADCIFA_CFG_SLEEP)
80022f6a:	10 9b       	mov	r11,r8
	                    | (p_adcifa_opt->single_sequencer_mode << AVR32_ADCIFA_CFG_SSMQ)
	                    | (p_adcifa_opt->free_running_mode_enable << AVR32_ADCIFA_CFG_FRM)
	                    | (p_adcifa_opt->reference_source << AVR32_ADCIFA_CFG_RS)
	                    | (p_adcifa_opt->sample_and_hold_disable << AVR32_ADCIFA_CFG_SHD)
	                    | (((ADCIFA_START_UP_TIME * (p_adcifa_opt->frequency/1000))/32000) << AVR32_ADCIFA_CFG_SUT);
80022f6c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80022f70:	70 09       	ld.w	r9,r8[0x0]
80022f72:	e0 68 4d d3 	mov	r8,19923
80022f76:	ea 18 10 62 	orh	r8,0x1062
80022f7a:	f2 08 06 48 	mulu.d	r8,r9,r8
80022f7e:	a7 89       	lsr	r9,0x6
80022f80:	e0 68 03 e8 	mov	r8,1000
80022f84:	b1 39       	mul	r9,r8
80022f86:	e0 68 4d d3 	mov	r8,19923
80022f8a:	ea 18 10 62 	orh	r8,0x1062
80022f8e:	f2 08 06 48 	mulu.d	r8,r9,r8
80022f92:	f2 08 16 0b 	lsr	r8,r9,0xb
80022f96:	b1 68       	lsl	r8,0x10

	// Sanity Check
	Assert( adcifa!=NULL );

	// Set the ADC configuration
	AVR32_ADCIFA.cfg = (p_adcifa_opt->sleep_mode_enable << AVR32_ADCIFA_CFG_SLEEP)
80022f98:	f7 e8 10 08 	or	r8,r11,r8
80022f9c:	95 18       	st.w	r10[0x4],r8
	                    | (p_adcifa_opt->reference_source << AVR32_ADCIFA_CFG_RS)
	                    | (p_adcifa_opt->sample_and_hold_disable << AVR32_ADCIFA_CFG_SHD)
	                    | (((ADCIFA_START_UP_TIME * (p_adcifa_opt->frequency/1000))/32000) << AVR32_ADCIFA_CFG_SUT);

	// Configure Clock  (rounded up)
	adcifa->ckdiv = (((pb_hz / (2*p_adcifa_opt->frequency))-1) << AVR32_ADCIFA_CKDIV_CNT_OFFSET) & AVR32_ADCIFA_CKDIV_CNT_MASK;
80022f9e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80022fa2:	70 08       	ld.w	r8,r8[0x0]
80022fa4:	f0 09 15 01 	lsl	r9,r8,0x1
80022fa8:	ee f8 ff f4 	ld.w	r8,r7[-12]
80022fac:	f0 09 0d 08 	divu	r8,r8,r9
80022fb0:	20 18       	sub	r8,1
80022fb2:	f3 d8 c0 09 	bfextu	r9,r8,0x0,0x9
80022fb6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022fba:	f1 49 00 44 	st.w	r8[68],r9

	// Set ADC Offset Calibration
	ADCIFA_set_offset_calibration(p_adcifa_opt->offset_calibration_value);
80022fbe:	fc 78 24 00 	mov	r8,-187392
80022fc2:	fc 79 24 00 	mov	r9,-187392
80022fc6:	73 aa       	ld.w	r10,r9[0x68]
80022fc8:	ee f9 ff f8 	ld.w	r9,r7[-8]
80022fcc:	92 69       	ld.sh	r9,r9[0xc]
80022fce:	b9 69       	lsl	r9,0x18
80022fd0:	e6 19 3f 00 	andh	r9,0x3f00,COH
80022fd4:	f5 e9 10 09 	or	r9,r10,r9
80022fd8:	f1 49 00 68 	st.w	r8[104],r9

	// Set ADC Gain Calibration
	ADCIFA_set_gain_calibration(p_adcifa_opt->gain_calibration_value);
80022fdc:	fc 78 24 00 	mov	r8,-187392
80022fe0:	fc 79 24 00 	mov	r9,-187392
80022fe4:	73 aa       	ld.w	r10,r9[0x68]
80022fe6:	ee f9 ff f8 	ld.w	r9,r7[-8]
80022fea:	92 59       	ld.sh	r9,r9[0xa]
80022fec:	f3 d9 c0 0f 	bfextu	r9,r9,0x0,0xf
80022ff0:	f5 e9 10 09 	or	r9,r10,r9
80022ff4:	f1 49 00 68 	st.w	r8[104],r9

	// Set Sample & Hold Gain Calibration for seq 0
	ADCIFA_set_sh0_gain_calibration(p_adcifa_opt->sh0_calibration_value);
80022ff8:	fc 78 24 00 	mov	r8,-187392
80022ffc:	fc 79 24 00 	mov	r9,-187392
80023000:	73 ba       	ld.w	r10,r9[0x6c]
80023002:	ee f9 ff f8 	ld.w	r9,r7[-8]
80023006:	92 79       	ld.sh	r9,r9[0xe]
80023008:	f3 d9 c0 0a 	bfextu	r9,r9,0x0,0xa
8002300c:	f5 e9 10 09 	or	r9,r10,r9
80023010:	f1 49 00 6c 	st.w	r8[108],r9

	// Set Sample & Hold Gain Calibration for seq 1
	ADCIFA_set_sh1_gain_calibration(p_adcifa_opt->sh1_calibration_value);
80023014:	fc 78 24 00 	mov	r8,-187392
80023018:	fc 79 24 00 	mov	r9,-187392
8002301c:	73 ba       	ld.w	r10,r9[0x6c]
8002301e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80023022:	f3 09 00 10 	ld.sh	r9,r9[16]
80023026:	b1 69       	lsl	r9,0x10
80023028:	e6 19 03 ff 	andh	r9,0x3ff,COH
8002302c:	f5 e9 10 09 	or	r9,r10,r9
80023030:	f1 49 00 6c 	st.w	r8[108],r9

	// Enable ADCIFA
	ADCIFA_enable();
80023034:	fc 78 24 00 	mov	r8,-187392
80023038:	fc 79 24 00 	mov	r9,-187392
8002303c:	72 19       	ld.w	r9,r9[0x4]
8002303e:	a1 a9       	sbr	r9,0x0
80023040:	91 19       	st.w	r8[0x4],r9
80023042:	c0 28       	rjmp	80023046 <adcifa_configure+0x12a>

	// Wait Startup Time
	while (1) {
		if (ADCIFA_is_startup_time()) break;
	}
80023044:	d7 03       	nop
	// Enable ADCIFA
	ADCIFA_enable();

	// Wait Startup Time
	while (1) {
		if (ADCIFA_is_startup_time()) break;
80023046:	fc 78 24 00 	mov	r8,-187392
8002304a:	70 28       	ld.w	r8,r8[0x8]
8002304c:	e2 18 40 00 	andl	r8,0x4000,COH
80023050:	cf a0       	breq	80023044 <adcifa_configure+0x128>
	}

	return ADCIFA_CONFIGURATION_ACCEPTED;
80023052:	30 18       	mov	r8,1
}
80023054:	10 9c       	mov	r12,r8
80023056:	2f dd       	sub	sp,-12
80023058:	e3 cd 80 80 	ldm	sp++,r7,pc

8002305c <adcifa_configure_sequencer>:

U8 adcifa_configure_sequencer(volatile avr32_adcifa_t * adcifa,
                              U8 sequencer,
                              adcifa_sequencer_opt_t * p_adcifa_sequencer_opt,
                              adcifa_sequencer_conversion_opt_t * p_adcifa_sequencer_conversion_opt)
{
8002305c:	eb cd 40 80 	pushm	r7,lr
80023060:	1a 97       	mov	r7,sp
80023062:	20 bd       	sub	sp,44
80023064:	ef 4c ff e0 	st.w	r7[-32],r12
80023068:	16 98       	mov	r8,r11
8002306a:	ef 4a ff d8 	st.w	r7[-40],r10
8002306e:	ef 49 ff d4 	st.w	r7[-44],r9
80023072:	ef 68 ff dc 	st.b	r7[-36],r8
	U8 g[8]={0};
80023076:	30 08       	mov	r8,0
80023078:	30 09       	mov	r9,0
8002307a:	ee e9 ff f4 	st.d	r7[-12],r8
	U8 mp[8]={0};
8002307e:	30 08       	mov	r8,0
80023080:	30 09       	mov	r9,0
80023082:	ee e9 ff ec 	st.d	r7[-20],r8
	U8 mn[8]={0};
80023086:	30 08       	mov	r8,0
80023088:	30 09       	mov	r9,0
8002308a:	ee e9 ff e4 	st.d	r7[-28],r8
	U8 i;
	// Sanity Check
	Assert( adcifa!=NULL );

	// Switch case with sequencer
	switch (sequencer) {
8002308e:	ef 38 ff dc 	ld.ub	r8,r7[-36]
80023092:	58 08       	cp.w	r8,0
80023094:	c0 60       	breq	800230a0 <adcifa_configure_sequencer+0x44>
80023096:	58 18       	cp.w	r8,1
80023098:	e0 80 00 ed 	breq	80023272 <adcifa_configure_sequencer+0x216>
8002309c:	e0 8f 01 d7 	bral	8002344a <adcifa_configure_sequencer+0x3ee>
		// Sequencer 0
	case 0:
		// Configure Sequencer 0
		ADCIFA_configure_sequencer_0((p_adcifa_sequencer_opt->convnb-1),
800230a0:	fc 78 24 00 	mov	r8,-187392
800230a4:	ee f9 ff d8 	ld.w	r9,r7[-40]
800230a8:	13 89       	ld.ub	r9,r9[0x0]
800230aa:	20 19       	sub	r9,1
800230ac:	f2 0a 15 10 	lsl	r10,r9,0x10
800230b0:	ee f9 ff d8 	ld.w	r9,r7[-40]
800230b4:	13 99       	ld.ub	r9,r9[0x1]
800230b6:	ad 69       	lsl	r9,0xc
800230b8:	12 4a       	or	r10,r9
800230ba:	ee f9 ff d8 	ld.w	r9,r7[-40]
800230be:	13 a9       	ld.ub	r9,r9[0x2]
800230c0:	a9 69       	lsl	r9,0x8
800230c2:	12 4a       	or	r10,r9
800230c4:	ee f9 ff d8 	ld.w	r9,r7[-40]
800230c8:	13 b9       	ld.ub	r9,r9[0x3]
800230ca:	a3 69       	lsl	r9,0x2
800230cc:	12 4a       	or	r10,r9
800230ce:	ee f9 ff d8 	ld.w	r9,r7[-40]
800230d2:	13 c9       	ld.ub	r9,r9[0x4]
800230d4:	a3 79       	lsl	r9,0x3
800230d6:	12 4a       	or	r10,r9
800230d8:	ee f9 ff d8 	ld.w	r9,r7[-40]
800230dc:	13 d9       	ld.ub	r9,r9[0x5]
800230de:	a1 79       	lsl	r9,0x1
800230e0:	12 4a       	or	r10,r9
800230e2:	ee f9 ff d8 	ld.w	r9,r7[-40]
800230e6:	13 e9       	ld.ub	r9,r9[0x6]
800230e8:	f5 e9 10 09 	or	r9,r10,r9
800230ec:	91 59       	st.w	r8[0x14],r9
		                             (p_adcifa_sequencer_opt->sh_mode),
#endif
		                             (p_adcifa_sequencer_opt->half_word_adjustment),
		                             (p_adcifa_sequencer_opt->software_acknowledge));
		// Configure Gain for Sequencer 0
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++)
800230ee:	30 08       	mov	r8,0
800230f0:	ef 68 ff ff 	st.b	r7[-1],r8
800230f4:	c1 68       	rjmp	80023120 <adcifa_configure_sequencer+0xc4>
			g[i] = p_adcifa_sequencer_conversion_opt[i].gain;
800230f6:	ef 3a ff ff 	ld.ub	r10,r7[-1]
800230fa:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800230fe:	12 98       	mov	r8,r9
80023100:	a1 78       	lsl	r8,0x1
80023102:	12 08       	add	r8,r9
80023104:	ee f9 ff d4 	ld.w	r9,r7[-44]
80023108:	f2 08 00 08 	add	r8,r9,r8
8002310c:	11 a8       	ld.ub	r8,r8[0x2]
8002310e:	ee 0a 00 09 	add	r9,r7,r10
80023112:	f3 68 ff f4 	st.b	r9[-12],r8
		                             (p_adcifa_sequencer_opt->sh_mode),
#endif
		                             (p_adcifa_sequencer_opt->half_word_adjustment),
		                             (p_adcifa_sequencer_opt->software_acknowledge));
		// Configure Gain for Sequencer 0
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++)
80023116:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8002311a:	2f f8       	sub	r8,-1
8002311c:	ef 68 ff ff 	st.b	r7[-1],r8
80023120:	ee f8 ff d8 	ld.w	r8,r7[-40]
80023124:	11 88       	ld.ub	r8,r8[0x0]
80023126:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8002312a:	f0 09 18 00 	cp.b	r9,r8
8002312e:	ce 43       	brcs	800230f6 <adcifa_configure_sequencer+0x9a>
			g[i] = p_adcifa_sequencer_conversion_opt[i].gain;
		ADCIFA_configure_sh0gain(g[7], g[6], g[5], g[4], g[3], g[2], g[1], g[0]);
80023130:	fc 78 24 00 	mov	r8,-187392
80023134:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80023138:	f2 0a 15 1c 	lsl	r10,r9,0x1c
8002313c:	ef 39 ff fa 	ld.ub	r9,r7[-6]
80023140:	b9 69       	lsl	r9,0x18
80023142:	12 4a       	or	r10,r9
80023144:	ef 39 ff f9 	ld.ub	r9,r7[-7]
80023148:	b5 69       	lsl	r9,0x14
8002314a:	12 4a       	or	r10,r9
8002314c:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80023150:	b1 69       	lsl	r9,0x10
80023152:	12 4a       	or	r10,r9
80023154:	ef 39 ff f7 	ld.ub	r9,r7[-9]
80023158:	ad 69       	lsl	r9,0xc
8002315a:	12 4a       	or	r10,r9
8002315c:	ef 39 ff f6 	ld.ub	r9,r7[-10]
80023160:	a9 69       	lsl	r9,0x8
80023162:	12 4a       	or	r10,r9
80023164:	ef 39 ff f5 	ld.ub	r9,r7[-11]
80023168:	a5 69       	lsl	r9,0x4
8002316a:	12 4a       	or	r10,r9
8002316c:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80023170:	f5 e9 10 09 	or	r9,r10,r9
80023174:	91 79       	st.w	r8[0x1c],r9

		// Configure Mux for Sequencer 0
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
80023176:	30 08       	mov	r8,0
80023178:	ef 68 ff ff 	st.b	r7[-1],r8
8002317c:	c2 68       	rjmp	800231c8 <adcifa_configure_sequencer+0x16c>
			mp[i] = p_adcifa_sequencer_conversion_opt[i].channel_p;
8002317e:	ef 3a ff ff 	ld.ub	r10,r7[-1]
80023182:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80023186:	12 98       	mov	r8,r9
80023188:	a1 78       	lsl	r8,0x1
8002318a:	12 08       	add	r8,r9
8002318c:	ee f9 ff d4 	ld.w	r9,r7[-44]
80023190:	f2 08 00 08 	add	r8,r9,r8
80023194:	11 88       	ld.ub	r8,r8[0x0]
80023196:	ee 0a 00 09 	add	r9,r7,r10
8002319a:	f3 68 ff ec 	st.b	r9[-20],r8
			mn[i] = p_adcifa_sequencer_conversion_opt[i].channel_n;
8002319e:	ef 3a ff ff 	ld.ub	r10,r7[-1]
800231a2:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800231a6:	12 98       	mov	r8,r9
800231a8:	a1 78       	lsl	r8,0x1
800231aa:	12 08       	add	r8,r9
800231ac:	ee f9 ff d4 	ld.w	r9,r7[-44]
800231b0:	f2 08 00 08 	add	r8,r9,r8
800231b4:	11 98       	ld.ub	r8,r8[0x1]
800231b6:	ee 0a 00 09 	add	r9,r7,r10
800231ba:	f3 68 ff e4 	st.b	r9[-28],r8
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++)
			g[i] = p_adcifa_sequencer_conversion_opt[i].gain;
		ADCIFA_configure_sh0gain(g[7], g[6], g[5], g[4], g[3], g[2], g[1], g[0]);

		// Configure Mux for Sequencer 0
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
800231be:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800231c2:	2f f8       	sub	r8,-1
800231c4:	ef 68 ff ff 	st.b	r7[-1],r8
800231c8:	ee f8 ff d8 	ld.w	r8,r7[-40]
800231cc:	11 88       	ld.ub	r8,r8[0x0]
800231ce:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800231d2:	f0 09 18 00 	cp.b	r9,r8
800231d6:	cd 43       	brcs	8002317e <adcifa_configure_sequencer+0x122>
			mp[i] = p_adcifa_sequencer_conversion_opt[i].channel_p;
			mn[i] = p_adcifa_sequencer_conversion_opt[i].channel_n;
		}
		ADCIFA_configure_muxsel0p(mp[7], mp[6], mp[5], mp[4], mp[3], mp[2], mp[1], mp[0]);
800231d8:	fc 78 24 00 	mov	r8,-187392
800231dc:	ef 39 ff f3 	ld.ub	r9,r7[-13]
800231e0:	f2 0a 15 18 	lsl	r10,r9,0x18
800231e4:	ef 39 ff f2 	ld.ub	r9,r7[-14]
800231e8:	b1 69       	lsl	r9,0x10
800231ea:	12 4a       	or	r10,r9
800231ec:	ef 39 ff f1 	ld.ub	r9,r7[-15]
800231f0:	a9 69       	lsl	r9,0x8
800231f2:	12 4a       	or	r10,r9
800231f4:	ef 39 ff f0 	ld.ub	r9,r7[-16]
800231f8:	f5 e9 10 09 	or	r9,r10,r9
800231fc:	91 b9       	st.w	r8[0x2c],r9
800231fe:	fc 78 24 00 	mov	r8,-187392
80023202:	ef 39 ff ef 	ld.ub	r9,r7[-17]
80023206:	f2 0a 15 18 	lsl	r10,r9,0x18
8002320a:	ef 39 ff ee 	ld.ub	r9,r7[-18]
8002320e:	b1 69       	lsl	r9,0x10
80023210:	12 4a       	or	r10,r9
80023212:	ef 39 ff ed 	ld.ub	r9,r7[-19]
80023216:	a9 69       	lsl	r9,0x8
80023218:	12 4a       	or	r10,r9
8002321a:	ef 39 ff ec 	ld.ub	r9,r7[-20]
8002321e:	f5 e9 10 09 	or	r9,r10,r9
80023222:	91 99       	st.w	r8[0x24],r9
		ADCIFA_configure_muxsel0n(mn[7], mn[6], mn[5], mn[4], mn[3], mn[2], mn[1], mn[0]);
80023224:	fc 78 24 00 	mov	r8,-187392
80023228:	ef 39 ff eb 	ld.ub	r9,r7[-21]
8002322c:	f2 0a 15 18 	lsl	r10,r9,0x18
80023230:	ef 39 ff ea 	ld.ub	r9,r7[-22]
80023234:	b1 69       	lsl	r9,0x10
80023236:	12 4a       	or	r10,r9
80023238:	ef 39 ff e9 	ld.ub	r9,r7[-23]
8002323c:	a9 69       	lsl	r9,0x8
8002323e:	12 4a       	or	r10,r9
80023240:	ef 39 ff e8 	ld.ub	r9,r7[-24]
80023244:	f5 e9 10 09 	or	r9,r10,r9
80023248:	91 f9       	st.w	r8[0x3c],r9
8002324a:	fc 78 24 00 	mov	r8,-187392
8002324e:	ef 39 ff e7 	ld.ub	r9,r7[-25]
80023252:	f2 0a 15 18 	lsl	r10,r9,0x18
80023256:	ef 39 ff e6 	ld.ub	r9,r7[-26]
8002325a:	b1 69       	lsl	r9,0x10
8002325c:	12 4a       	or	r10,r9
8002325e:	ef 39 ff e5 	ld.ub	r9,r7[-27]
80023262:	a9 69       	lsl	r9,0x8
80023264:	12 4a       	or	r10,r9
80023266:	ef 39 ff e4 	ld.ub	r9,r7[-28]
8002326a:	f5 e9 10 09 	or	r9,r10,r9
8002326e:	91 d9       	st.w	r8[0x34],r9
		break;
80023270:	ce d8       	rjmp	8002344a <adcifa_configure_sequencer+0x3ee>
		// Sequencer 1
	case 1:
		// Configure Sequencer 1
		ADCIFA_configure_sequencer_1((p_adcifa_sequencer_opt->convnb-1),
80023272:	fc 78 24 00 	mov	r8,-187392
80023276:	ee f9 ff d8 	ld.w	r9,r7[-40]
8002327a:	13 89       	ld.ub	r9,r9[0x0]
8002327c:	20 19       	sub	r9,1
8002327e:	f2 0a 15 10 	lsl	r10,r9,0x10
80023282:	ee f9 ff d8 	ld.w	r9,r7[-40]
80023286:	13 99       	ld.ub	r9,r9[0x1]
80023288:	ad 69       	lsl	r9,0xc
8002328a:	12 4a       	or	r10,r9
8002328c:	ee f9 ff d8 	ld.w	r9,r7[-40]
80023290:	13 a9       	ld.ub	r9,r9[0x2]
80023292:	a9 69       	lsl	r9,0x8
80023294:	12 4a       	or	r10,r9
80023296:	ee f9 ff d8 	ld.w	r9,r7[-40]
8002329a:	13 b9       	ld.ub	r9,r9[0x3]
8002329c:	a3 69       	lsl	r9,0x2
8002329e:	12 4a       	or	r10,r9
800232a0:	ee f9 ff d8 	ld.w	r9,r7[-40]
800232a4:	13 c9       	ld.ub	r9,r9[0x4]
800232a6:	a3 79       	lsl	r9,0x3
800232a8:	12 4a       	or	r10,r9
800232aa:	ee f9 ff d8 	ld.w	r9,r7[-40]
800232ae:	13 d9       	ld.ub	r9,r9[0x5]
800232b0:	a1 79       	lsl	r9,0x1
800232b2:	f5 e9 10 09 	or	r9,r10,r9
800232b6:	12 9a       	mov	r10,r9
800232b8:	a5 aa       	sbr	r10,0x4
800232ba:	ee f9 ff d8 	ld.w	r9,r7[-40]
800232be:	13 e9       	ld.ub	r9,r9[0x6]
800232c0:	f5 e9 10 09 	or	r9,r10,r9
800232c4:	91 69       	st.w	r8[0x18],r9
#endif
		                             (p_adcifa_sequencer_opt->half_word_adjustment),
		                             (p_adcifa_sequencer_opt->software_acknowledge));

		// Configure Gain for Sequencer 1
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++)
800232c6:	30 08       	mov	r8,0
800232c8:	ef 68 ff ff 	st.b	r7[-1],r8
800232cc:	c1 68       	rjmp	800232f8 <adcifa_configure_sequencer+0x29c>
			g[i] = p_adcifa_sequencer_conversion_opt[i].gain;
800232ce:	ef 3a ff ff 	ld.ub	r10,r7[-1]
800232d2:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800232d6:	12 98       	mov	r8,r9
800232d8:	a1 78       	lsl	r8,0x1
800232da:	12 08       	add	r8,r9
800232dc:	ee f9 ff d4 	ld.w	r9,r7[-44]
800232e0:	f2 08 00 08 	add	r8,r9,r8
800232e4:	11 a8       	ld.ub	r8,r8[0x2]
800232e6:	ee 0a 00 09 	add	r9,r7,r10
800232ea:	f3 68 ff f4 	st.b	r9[-12],r8
#endif
		                             (p_adcifa_sequencer_opt->half_word_adjustment),
		                             (p_adcifa_sequencer_opt->software_acknowledge));

		// Configure Gain for Sequencer 1
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++)
800232ee:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800232f2:	2f f8       	sub	r8,-1
800232f4:	ef 68 ff ff 	st.b	r7[-1],r8
800232f8:	ee f8 ff d8 	ld.w	r8,r7[-40]
800232fc:	11 88       	ld.ub	r8,r8[0x0]
800232fe:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80023302:	f0 09 18 00 	cp.b	r9,r8
80023306:	ce 43       	brcs	800232ce <adcifa_configure_sequencer+0x272>
			g[i] = p_adcifa_sequencer_conversion_opt[i].gain;
		ADCIFA_configure_sh1gain(g[7], g[6], g[5], g[4], g[3], g[2], g[1], g[0]);
80023308:	fc 78 24 00 	mov	r8,-187392
8002330c:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80023310:	f2 0a 15 1c 	lsl	r10,r9,0x1c
80023314:	ef 39 ff fa 	ld.ub	r9,r7[-6]
80023318:	b9 69       	lsl	r9,0x18
8002331a:	12 4a       	or	r10,r9
8002331c:	ef 39 ff f9 	ld.ub	r9,r7[-7]
80023320:	b5 69       	lsl	r9,0x14
80023322:	12 4a       	or	r10,r9
80023324:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80023328:	b1 69       	lsl	r9,0x10
8002332a:	12 4a       	or	r10,r9
8002332c:	ef 39 ff f7 	ld.ub	r9,r7[-9]
80023330:	ad 69       	lsl	r9,0xc
80023332:	12 4a       	or	r10,r9
80023334:	ef 39 ff f6 	ld.ub	r9,r7[-10]
80023338:	a9 69       	lsl	r9,0x8
8002333a:	12 4a       	or	r10,r9
8002333c:	ef 39 ff f5 	ld.ub	r9,r7[-11]
80023340:	a5 69       	lsl	r9,0x4
80023342:	12 4a       	or	r10,r9
80023344:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80023348:	f5 e9 10 09 	or	r9,r10,r9
8002334c:	91 89       	st.w	r8[0x20],r9

		// Configure Mux for Sequencer 1
		for (i = 0 ; i < p_adcifa_sequencer_opt->convnb; i++) {
8002334e:	30 08       	mov	r8,0
80023350:	ef 68 ff ff 	st.b	r7[-1],r8
80023354:	c2 68       	rjmp	800233a0 <adcifa_configure_sequencer+0x344>
			mp[i] = p_adcifa_sequencer_conversion_opt[i].channel_p;
80023356:	ef 3a ff ff 	ld.ub	r10,r7[-1]
8002335a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8002335e:	12 98       	mov	r8,r9
80023360:	a1 78       	lsl	r8,0x1
80023362:	12 08       	add	r8,r9
80023364:	ee f9 ff d4 	ld.w	r9,r7[-44]
80023368:	f2 08 00 08 	add	r8,r9,r8
8002336c:	11 88       	ld.ub	r8,r8[0x0]
8002336e:	ee 0a 00 09 	add	r9,r7,r10
80023372:	f3 68 ff ec 	st.b	r9[-20],r8
			mn[i] = p_adcifa_sequencer_conversion_opt[i].channel_n;
80023376:	ef 3a ff ff 	ld.ub	r10,r7[-1]
8002337a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8002337e:	12 98       	mov	r8,r9
80023380:	a1 78       	lsl	r8,0x1
80023382:	12 08       	add	r8,r9
80023384:	ee f9 ff d4 	ld.w	r9,r7[-44]
80023388:	f2 08 00 08 	add	r8,r9,r8
8002338c:	11 98       	ld.ub	r8,r8[0x1]
8002338e:	ee 0a 00 09 	add	r9,r7,r10
80023392:	f3 68 ff e4 	st.b	r9[-28],r8
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++)
			g[i] = p_adcifa_sequencer_conversion_opt[i].gain;
		ADCIFA_configure_sh1gain(g[7], g[6], g[5], g[4], g[3], g[2], g[1], g[0]);

		// Configure Mux for Sequencer 1
		for (i = 0 ; i < p_adcifa_sequencer_opt->convnb; i++) {
80023396:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8002339a:	2f f8       	sub	r8,-1
8002339c:	ef 68 ff ff 	st.b	r7[-1],r8
800233a0:	ee f8 ff d8 	ld.w	r8,r7[-40]
800233a4:	11 88       	ld.ub	r8,r8[0x0]
800233a6:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800233aa:	f0 09 18 00 	cp.b	r9,r8
800233ae:	cd 43       	brcs	80023356 <adcifa_configure_sequencer+0x2fa>
			mp[i] = p_adcifa_sequencer_conversion_opt[i].channel_p;
			mn[i] = p_adcifa_sequencer_conversion_opt[i].channel_n;
		}
		ADCIFA_configure_muxsel1p(mp[7], mp[6], mp[5], mp[4], mp[3], mp[2], mp[1], mp[0]);
800233b0:	fc 78 24 00 	mov	r8,-187392
800233b4:	ef 39 ff f3 	ld.ub	r9,r7[-13]
800233b8:	f2 0a 15 18 	lsl	r10,r9,0x18
800233bc:	ef 39 ff f2 	ld.ub	r9,r7[-14]
800233c0:	b1 69       	lsl	r9,0x10
800233c2:	12 4a       	or	r10,r9
800233c4:	ef 39 ff f1 	ld.ub	r9,r7[-15]
800233c8:	a9 69       	lsl	r9,0x8
800233ca:	12 4a       	or	r10,r9
800233cc:	ef 39 ff f0 	ld.ub	r9,r7[-16]
800233d0:	f5 e9 10 09 	or	r9,r10,r9
800233d4:	91 c9       	st.w	r8[0x30],r9
800233d6:	fc 78 24 00 	mov	r8,-187392
800233da:	ef 39 ff ef 	ld.ub	r9,r7[-17]
800233de:	f2 0a 15 18 	lsl	r10,r9,0x18
800233e2:	ef 39 ff ee 	ld.ub	r9,r7[-18]
800233e6:	b1 69       	lsl	r9,0x10
800233e8:	12 4a       	or	r10,r9
800233ea:	ef 39 ff ed 	ld.ub	r9,r7[-19]
800233ee:	a9 69       	lsl	r9,0x8
800233f0:	12 4a       	or	r10,r9
800233f2:	ef 39 ff ec 	ld.ub	r9,r7[-20]
800233f6:	f5 e9 10 09 	or	r9,r10,r9
800233fa:	91 a9       	st.w	r8[0x28],r9
		ADCIFA_configure_muxsel1n(mn[7], mn[6], mn[5], mn[4], mn[3], mn[2], mn[1], mn[0]);
800233fc:	fc 78 24 00 	mov	r8,-187392
80023400:	ef 39 ff eb 	ld.ub	r9,r7[-21]
80023404:	f2 0a 15 18 	lsl	r10,r9,0x18
80023408:	ef 39 ff ea 	ld.ub	r9,r7[-22]
8002340c:	b1 69       	lsl	r9,0x10
8002340e:	12 4a       	or	r10,r9
80023410:	ef 39 ff e9 	ld.ub	r9,r7[-23]
80023414:	a9 69       	lsl	r9,0x8
80023416:	12 4a       	or	r10,r9
80023418:	ef 39 ff e8 	ld.ub	r9,r7[-24]
8002341c:	f5 e9 10 09 	or	r9,r10,r9
80023420:	f1 49 00 40 	st.w	r8[64],r9
80023424:	fc 78 24 00 	mov	r8,-187392
80023428:	ef 39 ff e7 	ld.ub	r9,r7[-25]
8002342c:	f2 0a 15 18 	lsl	r10,r9,0x18
80023430:	ef 39 ff e6 	ld.ub	r9,r7[-26]
80023434:	b1 69       	lsl	r9,0x10
80023436:	12 4a       	or	r10,r9
80023438:	ef 39 ff e5 	ld.ub	r9,r7[-27]
8002343c:	a9 69       	lsl	r9,0x8
8002343e:	12 4a       	or	r10,r9
80023440:	ef 39 ff e4 	ld.ub	r9,r7[-28]
80023444:	f5 e9 10 09 	or	r9,r10,r9
80023448:	91 e9       	st.w	r8[0x38],r9
		break;
	default:
		break;
	}
	return ADCIFA_CONFIGURATION_ACCEPTED;
8002344a:	30 18       	mov	r8,1
}
8002344c:	10 9c       	mov	r12,r8
8002344e:	2f 5d       	sub	sp,-44
80023450:	e3 cd 80 80 	ldm	sp++,r7,pc

80023454 <adcifa_configure_window_monitor>:

void adcifa_configure_window_monitor( volatile avr32_adcifa_t * adcifa,
                                      U8 sequencer,
                                      adcifa_window_monitor_opt_t * adc_window_monitor_opt )
{
80023454:	eb cd 40 80 	pushm	r7,lr
80023458:	1a 97       	mov	r7,sp
8002345a:	20 4d       	sub	sp,16
8002345c:	ef 4c ff f8 	st.w	r7[-8],r12
80023460:	16 98       	mov	r8,r11
80023462:	ef 4a ff f0 	st.w	r7[-16],r10
80023466:	ef 68 ff f4 	st.b	r7[-12],r8
	switch (sequencer) {
8002346a:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8002346e:	58 08       	cp.w	r8,0
80023470:	c0 40       	breq	80023478 <adcifa_configure_window_monitor+0x24>
80023472:	58 18       	cp.w	r8,1
80023474:	c3 d0       	breq	800234ee <adcifa_configure_window_monitor+0x9a>
80023476:	c7 68       	rjmp	80023562 <adcifa_configure_window_monitor+0x10e>
	int temp;
	case 0:
		// Configure sequencer 0
		temp = adcifa->imr & AVR32_ADCIFA_WM0_MASK;
80023478:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002347c:	71 e8       	ld.w	r8,r8[0x78]
8002347e:	e2 18 04 00 	andl	r8,0x400,COH
80023482:	ef 48 ff fc 	st.w	r7[-4],r8
		adcifa->idr = temp;         // disable interrupt if it was enabled
80023486:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002348a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002348e:	f1 49 00 74 	st.w	r8[116],r9
		adcifa->wcfg0 = (adc_window_monitor_opt->source_index << AVR32_ADCIFA_WCFG0_SRC_OFFSET)
80023492:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023496:	11 98       	ld.ub	r8,r8[0x1]
80023498:	f0 09 15 1b 	lsl	r9,r8,0x1b
		              | (adc_window_monitor_opt->high_threshold << AVR32_ADCIFA_WCFG0_HT_OFFSET)
8002349c:	ee f8 ff f0 	ld.w	r8,r7[-16]
800234a0:	90 28       	ld.sh	r8,r8[0x4]
800234a2:	5c 78       	castu.h	r8
800234a4:	ad 68       	lsl	r8,0xc
		              | (adc_window_monitor_opt->low_threshold << AVR32_ADCIFA_WCFG0_LT_OFFSET);
800234a6:	10 49       	or	r9,r8
800234a8:	ee f8 ff f0 	ld.w	r8,r7[-16]
800234ac:	90 18       	ld.sh	r8,r8[0x2]
800234ae:	5c 78       	castu.h	r8
	int temp;
	case 0:
		// Configure sequencer 0
		temp = adcifa->imr & AVR32_ADCIFA_WM0_MASK;
		adcifa->idr = temp;         // disable interrupt if it was enabled
		adcifa->wcfg0 = (adc_window_monitor_opt->source_index << AVR32_ADCIFA_WCFG0_SRC_OFFSET)
800234b0:	f3 e8 10 08 	or	r8,r9,r8
800234b4:	10 99       	mov	r9,r8
800234b6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800234ba:	f1 49 00 58 	st.w	r8[88],r9
		              | (adc_window_monitor_opt->high_threshold << AVR32_ADCIFA_WCFG0_HT_OFFSET)
		              | (adc_window_monitor_opt->low_threshold << AVR32_ADCIFA_WCFG0_LT_OFFSET);
		// Clear any pending interrupt before setting new mode
		adcifa->scr = AVR32_ADCIFA_WM0_MASK;
800234be:	ee f8 ff f8 	ld.w	r8,r7[-8]
800234c2:	e0 69 04 00 	mov	r9,1024
800234c6:	91 39       	st.w	r8[0xc],r9
		adcifa->wcfg0 |= (adc_window_monitor_opt->mode << AVR32_ADCIFA_WCFG0_WM_OFFSET);
800234c8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800234cc:	71 69       	ld.w	r9,r8[0x58]
800234ce:	ee f8 ff f0 	ld.w	r8,r7[-16]
800234d2:	11 88       	ld.ub	r8,r8[0x0]
800234d4:	b9 68       	lsl	r8,0x18
800234d6:	10 49       	or	r9,r8
800234d8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800234dc:	f1 49 00 58 	st.w	r8[88],r9
		adcifa->ier = temp;         // enable interrupt if it was enabled
800234e0:	ee f9 ff fc 	ld.w	r9,r7[-4]
800234e4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800234e8:	f1 49 00 70 	st.w	r8[112],r9
		break;
800234ec:	c3 b8       	rjmp	80023562 <adcifa_configure_window_monitor+0x10e>
	case 1:
		// Configure sequencer 1
		temp = adcifa->imr & AVR32_ADCIFA_WM1_MASK;
800234ee:	ee f8 ff f8 	ld.w	r8,r7[-8]
800234f2:	71 e8       	ld.w	r8,r8[0x78]
800234f4:	e2 18 08 00 	andl	r8,0x800,COH
800234f8:	ef 48 ff fc 	st.w	r7[-4],r8
		adcifa->idr = temp;         // disable interrupt if it was enabled
800234fc:	ee f9 ff fc 	ld.w	r9,r7[-4]
80023500:	ee f8 ff f8 	ld.w	r8,r7[-8]
80023504:	f1 49 00 74 	st.w	r8[116],r9
		adcifa->wcfg1 = (adc_window_monitor_opt->source_index << AVR32_ADCIFA_WCFG1_SRC_OFFSET)
80023508:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002350c:	11 98       	ld.ub	r8,r8[0x1]
8002350e:	f0 09 15 1b 	lsl	r9,r8,0x1b
		              | (adc_window_monitor_opt->high_threshold << AVR32_ADCIFA_WCFG1_HT_OFFSET)
80023512:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023516:	90 28       	ld.sh	r8,r8[0x4]
80023518:	5c 78       	castu.h	r8
8002351a:	ad 68       	lsl	r8,0xc
		              | (adc_window_monitor_opt->low_threshold << AVR32_ADCIFA_WCFG1_LT_OFFSET);
8002351c:	10 49       	or	r9,r8
8002351e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023522:	90 18       	ld.sh	r8,r8[0x2]
80023524:	5c 78       	castu.h	r8
		break;
	case 1:
		// Configure sequencer 1
		temp = adcifa->imr & AVR32_ADCIFA_WM1_MASK;
		adcifa->idr = temp;         // disable interrupt if it was enabled
		adcifa->wcfg1 = (adc_window_monitor_opt->source_index << AVR32_ADCIFA_WCFG1_SRC_OFFSET)
80023526:	f3 e8 10 08 	or	r8,r9,r8
8002352a:	10 99       	mov	r9,r8
8002352c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80023530:	f1 49 00 5c 	st.w	r8[92],r9
		              | (adc_window_monitor_opt->high_threshold << AVR32_ADCIFA_WCFG1_HT_OFFSET)
		              | (adc_window_monitor_opt->low_threshold << AVR32_ADCIFA_WCFG1_LT_OFFSET);
		// Clear any pending interrupt before setting new mode
		adcifa->scr = AVR32_ADCIFA_WM1_MASK;
80023534:	ee f8 ff f8 	ld.w	r8,r7[-8]
80023538:	e0 69 08 00 	mov	r9,2048
8002353c:	91 39       	st.w	r8[0xc],r9
		adcifa->wcfg1 |= (adc_window_monitor_opt->mode << AVR32_ADCIFA_WCFG1_WM_OFFSET);
8002353e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80023542:	71 79       	ld.w	r9,r8[0x5c]
80023544:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023548:	11 88       	ld.ub	r8,r8[0x0]
8002354a:	b9 68       	lsl	r8,0x18
8002354c:	10 49       	or	r9,r8
8002354e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80023552:	f1 49 00 5c 	st.w	r8[92],r9
		adcifa->ier = temp;         // enable interrupt if it was enabled
80023556:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002355a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002355e:	f1 49 00 70 	st.w	r8[112],r9
		break;
	default:
		break;
	}
}
80023562:	2f cd       	sub	sp,-16
80023564:	e3 cd 80 80 	ldm	sp++,r7,pc

80023568 <adcifa_start_sequencer>:


void adcifa_start_sequencer(volatile avr32_adcifa_t * adcifa, U8 sequencer)
{
80023568:	eb cd 40 80 	pushm	r7,lr
8002356c:	1a 97       	mov	r7,sp
8002356e:	20 2d       	sub	sp,8
80023570:	ef 4c ff fc 	st.w	r7[-4],r12
80023574:	16 98       	mov	r8,r11
80023576:	ef 68 ff f8 	st.b	r7[-8],r8
	// Sanity Check
	Assert( adcifa!=NULL );

	// Switch Sequencer
	switch (sequencer) {
8002357a:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8002357e:	58 18       	cp.w	r8,1
80023580:	c0 a0       	breq	80023594 <adcifa_start_sequencer+0x2c>
80023582:	58 38       	cp.w	r8,3
80023584:	c0 d0       	breq	8002359e <adcifa_start_sequencer+0x36>
80023586:	58 08       	cp.w	r8,0
80023588:	c0 f1       	brne	800235a6 <adcifa_start_sequencer+0x3e>
	case ADCIFA_SEQ0:
		ADCIFA_softsoc_sequencer(AVR32_ADCIFA_CR_SOC0_MASK);
8002358a:	fc 78 24 00 	mov	r8,-187392
8002358e:	30 19       	mov	r9,1
80023590:	91 09       	st.w	r8[0x0],r9
		break;
80023592:	c0 a8       	rjmp	800235a6 <adcifa_start_sequencer+0x3e>
	case ADCIFA_SEQ1:
		ADCIFA_softsoc_sequencer(AVR32_ADCIFA_CR_SOC1_MASK);
80023594:	fc 78 24 00 	mov	r8,-187392
80023598:	30 29       	mov	r9,2
8002359a:	91 09       	st.w	r8[0x0],r9
		break;
8002359c:	c0 58       	rjmp	800235a6 <adcifa_start_sequencer+0x3e>
	case ADCIFA_SEQ0_SEQ1:
		ADCIFA_softsoc_sequencer(AVR32_ADCIFA_CR_SOC0_MASK | AVR32_ADCIFA_CR_SOC1_MASK);
8002359e:	fc 78 24 00 	mov	r8,-187392
800235a2:	30 39       	mov	r9,3
800235a4:	91 09       	st.w	r8[0x0],r9
		break;
	default:
		break;
	}
}
800235a6:	2f ed       	sub	sp,-8
800235a8:	e3 cd 80 80 	ldm	sp++,r7,pc

800235ac <adcifa_check_eoc>:


bool adcifa_check_eoc(volatile avr32_adcifa_t * adcifa, U8 sequencer)
{
800235ac:	eb cd 40 80 	pushm	r7,lr
800235b0:	1a 97       	mov	r7,sp
800235b2:	20 2d       	sub	sp,8
800235b4:	ef 4c ff fc 	st.w	r7[-4],r12
800235b8:	16 98       	mov	r8,r11
800235ba:	ef 68 ff f8 	st.b	r7[-8],r8
	// Sanity Check
	Assert( adcifa!=NULL );

	// get SR register : EOC bit for channel
	switch (sequencer) {
800235be:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800235c2:	58 08       	cp.w	r8,0
800235c4:	c0 40       	breq	800235cc <adcifa_check_eoc+0x20>
800235c6:	58 18       	cp.w	r8,1
800235c8:	c0 a0       	breq	800235dc <adcifa_check_eoc+0x30>
800235ca:	c1 18       	rjmp	800235ec <adcifa_check_eoc+0x40>
	case 0:
		return ((ADCIFA_is_eoc_sequencer_0()) ? true : false);
800235cc:	fc 78 24 00 	mov	r8,-187392
800235d0:	70 28       	ld.w	r8,r8[0x8]
800235d2:	e2 18 00 02 	andl	r8,0x2,COH
800235d6:	5f 18       	srne	r8
800235d8:	5c 58       	castu.b	r8
800235da:	c0 a8       	rjmp	800235ee <adcifa_check_eoc+0x42>
	case 1:
		return ((ADCIFA_is_eoc_sequencer_1()) ? true : false);
800235dc:	fc 78 24 00 	mov	r8,-187392
800235e0:	70 28       	ld.w	r8,r8[0x8]
800235e2:	e2 18 00 20 	andl	r8,0x20,COH
800235e6:	5f 18       	srne	r8
800235e8:	5c 58       	castu.b	r8
800235ea:	c0 28       	rjmp	800235ee <adcifa_check_eoc+0x42>
	default:
		break;
	}
	return false;
800235ec:	30 08       	mov	r8,0
}
800235ee:	10 9c       	mov	r12,r8
800235f0:	2f ed       	sub	sp,-8
800235f2:	e3 cd 80 80 	ldm	sp++,r7,pc

800235f6 <adcifa_check_eos>:

bool adcifa_check_eos(volatile avr32_adcifa_t * adcifa, U8 sequencer)
{
800235f6:	eb cd 40 80 	pushm	r7,lr
800235fa:	1a 97       	mov	r7,sp
800235fc:	20 2d       	sub	sp,8
800235fe:	ef 4c ff fc 	st.w	r7[-4],r12
80023602:	16 98       	mov	r8,r11
80023604:	ef 68 ff f8 	st.b	r7[-8],r8
	// Sanity Check
	Assert( adcifa!=NULL );

	// get SR register : EOS bit for channel
	switch (sequencer) {
80023608:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8002360c:	58 08       	cp.w	r8,0
8002360e:	c0 40       	breq	80023616 <adcifa_check_eos+0x20>
80023610:	58 18       	cp.w	r8,1
80023612:	c0 90       	breq	80023624 <adcifa_check_eos+0x2e>
80023614:	c1 08       	rjmp	80023634 <adcifa_check_eos+0x3e>
	case 0:
		return ((ADCIFA_is_eos_sequencer_0()) ? true : false);
80023616:	fc 78 24 00 	mov	r8,-187392
8002361a:	70 28       	ld.w	r8,r8[0x8]
8002361c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80023620:	5c 58       	castu.b	r8
80023622:	c0 a8       	rjmp	80023636 <adcifa_check_eos+0x40>
	case 1:
		return ((ADCIFA_is_eos_sequencer_1()) ? true : false);
80023624:	fc 78 24 00 	mov	r8,-187392
80023628:	70 28       	ld.w	r8,r8[0x8]
8002362a:	e2 18 00 10 	andl	r8,0x10,COH
8002362e:	5f 18       	srne	r8
80023630:	5c 58       	castu.b	r8
80023632:	c0 28       	rjmp	80023636 <adcifa_check_eos+0x40>
	default:
		break;
	}
	return false;
80023634:	30 08       	mov	r8,0
}
80023636:	10 9c       	mov	r12,r8
80023638:	2f ed       	sub	sp,-8
8002363a:	e3 cd 80 80 	ldm	sp++,r7,pc

8002363e <adcifa_get_values_from_sequencer>:

U8 adcifa_get_values_from_sequencer(volatile avr32_adcifa_t * adcifa,
                                    U8 sequencer,
                                    adcifa_sequencer_opt_t * p_adcifa_sequencer_opt,
                                    S16* adcifa_values)
{
8002363e:	eb cd 40 c0 	pushm	r6-r7,lr
80023642:	1a 97       	mov	r7,sp
80023644:	20 5d       	sub	sp,20
80023646:	4b 46       	lddpc	r6,80023714 <adcifa_get_values_from_sequencer+0xd6>
80023648:	1e 26       	rsub	r6,pc
8002364a:	ef 4c ff f8 	st.w	r7[-8],r12
8002364e:	16 98       	mov	r8,r11
80023650:	ef 4a ff f0 	st.w	r7[-16],r10
80023654:	ef 49 ff ec 	st.w	r7[-20],r9
80023658:	ef 68 ff f4 	st.b	r7[-12],r8
	U8 i;
	// Sanity Check
	Assert( adcifa!=NULL );

	// wait for end of sequence
	if(adcifa_check_eos(adcifa, sequencer) != true)
8002365c:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80023660:	10 9b       	mov	r11,r8
80023662:	ee fc ff f8 	ld.w	r12,r7[-8]
80023666:	f0 16 01 2f 	mcall	r6[1212]
8002366a:	18 98       	mov	r8,r12
8002366c:	ec 18 00 01 	eorl	r8,0x1
80023670:	5c 58       	castu.b	r8
80023672:	c0 30       	breq	80023678 <adcifa_get_values_from_sequencer+0x3a>
		return ADCIFA_STATUS_NOT_COMPLETED;
80023674:	30 38       	mov	r8,3
80023676:	c4 b8       	rjmp	8002370c <adcifa_get_values_from_sequencer+0xce>

	switch (sequencer) {
80023678:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8002367c:	58 08       	cp.w	r8,0
8002367e:	c0 40       	breq	80023686 <adcifa_get_values_from_sequencer+0x48>
80023680:	58 18       	cp.w	r8,1
80023682:	c2 30       	breq	800236c8 <adcifa_get_values_from_sequencer+0x8a>
80023684:	c4 38       	rjmp	8002370a <adcifa_get_values_from_sequencer+0xcc>
	case 0:
		// Read values from Sequencer 0
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
80023686:	30 08       	mov	r8,0
80023688:	ef 68 ff ff 	st.b	r7[-1],r8
8002368c:	c1 58       	rjmp	800236b6 <adcifa_get_values_from_sequencer+0x78>
			adcifa_values[i] = ADCIFA_read_resx_sequencer_0(i);
8002368e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80023692:	a1 78       	lsl	r8,0x1
80023694:	ee f9 ff ec 	ld.w	r9,r7[-20]
80023698:	10 09       	add	r9,r8
8002369a:	fc 78 24 00 	mov	r8,-187392
8002369e:	ef 3a ff ff 	ld.ub	r10,r7[-1]
800236a2:	2d fa       	sub	r10,-33
800236a4:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
800236a8:	5c 88       	casts.h	r8
800236aa:	b2 08       	st.h	r9[0x0],r8
		return ADCIFA_STATUS_NOT_COMPLETED;

	switch (sequencer) {
	case 0:
		// Read values from Sequencer 0
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
800236ac:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800236b0:	2f f8       	sub	r8,-1
800236b2:	ef 68 ff ff 	st.b	r7[-1],r8
800236b6:	ee f8 ff f0 	ld.w	r8,r7[-16]
800236ba:	11 88       	ld.ub	r8,r8[0x0]
800236bc:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800236c0:	f0 09 18 00 	cp.b	r9,r8
800236c4:	ce 53       	brcs	8002368e <adcifa_get_values_from_sequencer+0x50>
			adcifa_values[i] = ADCIFA_read_resx_sequencer_0(i);
		}
		break;
800236c6:	c2 28       	rjmp	8002370a <adcifa_get_values_from_sequencer+0xcc>
	case 1:
		// Read values from Sequencer 1
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
800236c8:	30 08       	mov	r8,0
800236ca:	ef 68 ff ff 	st.b	r7[-1],r8
800236ce:	c1 68       	rjmp	800236fa <adcifa_get_values_from_sequencer+0xbc>
			adcifa_values[i] = ADCIFA_read_resx_sequencer_1(i);
800236d0:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800236d4:	a1 78       	lsl	r8,0x1
800236d6:	ee f9 ff ec 	ld.w	r9,r7[-20]
800236da:	10 09       	add	r9,r8
800236dc:	fc 78 24 00 	mov	r8,-187392
800236e0:	ef 3a ff ff 	ld.ub	r10,r7[-1]
800236e4:	2f 8a       	sub	r10,-8
800236e6:	2d fa       	sub	r10,-33
800236e8:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
800236ec:	5c 88       	casts.h	r8
800236ee:	b2 08       	st.h	r9[0x0],r8
			adcifa_values[i] = ADCIFA_read_resx_sequencer_0(i);
		}
		break;
	case 1:
		// Read values from Sequencer 1
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
800236f0:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800236f4:	2f f8       	sub	r8,-1
800236f6:	ef 68 ff ff 	st.b	r7[-1],r8
800236fa:	ee f8 ff f0 	ld.w	r8,r7[-16]
800236fe:	11 88       	ld.ub	r8,r8[0x0]
80023700:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80023704:	f0 09 18 00 	cp.b	r9,r8
80023708:	ce 43       	brcs	800236d0 <adcifa_get_values_from_sequencer+0x92>
		break;
	default:
		break;
	}

	return ADCIFA_STATUS_COMPLETED;
8002370a:	30 28       	mov	r8,2
}
8002370c:	10 9c       	mov	r12,r8
8002370e:	2f bd       	sub	sp,-20
80023710:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80023714:	80 02       	ld.sh	r2,r0[0x0]
80023716:	34 cc       	mov	r12,76

80023718 <adcifa_start_itimer>:

void adcifa_start_itimer(volatile avr32_adcifa_t * adcifa,
                         uint32_t timer_count)
{
80023718:	eb cd 40 80 	pushm	r7,lr
8002371c:	1a 97       	mov	r7,sp
8002371e:	20 2d       	sub	sp,8
80023720:	ef 4c ff fc 	st.w	r7[-4],r12
80023724:	ef 4b ff f8 	st.w	r7[-8],r11
	adcifa->itimer = timer_count;
80023728:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002372c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80023730:	f1 49 00 48 	st.w	r8[72],r9
	adcifa->cr = AVR32_ADCIFA_CR_TSTART_MASK;
80023734:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023738:	30 89       	mov	r9,8
8002373a:	91 09       	st.w	r8[0x0],r9
}
8002373c:	2f ed       	sub	sp,-8
8002373e:	e3 cd 80 80 	ldm	sp++,r7,pc

80023742 <adcifa_stop_itimer>:

void adcifa_stop_itimer(volatile avr32_adcifa_t * adcifa)
{
80023742:	eb cd 40 80 	pushm	r7,lr
80023746:	1a 97       	mov	r7,sp
80023748:	20 1d       	sub	sp,4
8002374a:	ef 4c ff fc 	st.w	r7[-4],r12
	adcifa->cr = AVR32_ADCIFA_CR_TSTOP_MASK;
8002374e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023752:	30 49       	mov	r9,4
80023754:	91 09       	st.w	r8[0x0],r9
}
80023756:	2f fd       	sub	sp,-4
80023758:	e3 cd 80 80 	ldm	sp++,r7,pc

8002375c <adcifa_enable_interrupt>:

void adcifa_enable_interrupt(volatile avr32_adcifa_t * adcifa,
                             uint32_t interrupt_flags)
{
8002375c:	eb cd 40 80 	pushm	r7,lr
80023760:	1a 97       	mov	r7,sp
80023762:	20 2d       	sub	sp,8
80023764:	ef 4c ff fc 	st.w	r7[-4],r12
80023768:	ef 4b ff f8 	st.w	r7[-8],r11
	adcifa->ier = interrupt_flags;   // Interrupt Enable Register
8002376c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023770:	ee f9 ff f8 	ld.w	r9,r7[-8]
80023774:	f1 49 00 70 	st.w	r8[112],r9
}
80023778:	2f ed       	sub	sp,-8
8002377a:	e3 cd 80 80 	ldm	sp++,r7,pc

8002377e <adcifa_disable_interrupt>:

void adcifa_disable_interrupt(volatile avr32_adcifa_t * adcifa,
                              uint32_t interrupt_flags)
{
8002377e:	eb cd 40 80 	pushm	r7,lr
80023782:	1a 97       	mov	r7,sp
80023784:	20 2d       	sub	sp,8
80023786:	ef 4c ff fc 	st.w	r7[-4],r12
8002378a:	ef 4b ff f8 	st.w	r7[-8],r11
	adcifa->idr = interrupt_flags;   // Interrupt Disable Register
8002378e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023792:	ee f9 ff f8 	ld.w	r9,r7[-8]
80023796:	f1 49 00 74 	st.w	r8[116],r9
}
8002379a:	2f ed       	sub	sp,-8
8002379c:	e3 cd 80 80 	ldm	sp++,r7,pc

800237a0 <adcifa_clear_interrupt>:

void adcifa_clear_interrupt(volatile avr32_adcifa_t * adcifa,
                            uint32_t interrupt_flags)
{
800237a0:	eb cd 40 80 	pushm	r7,lr
800237a4:	1a 97       	mov	r7,sp
800237a6:	20 2d       	sub	sp,8
800237a8:	ef 4c ff fc 	st.w	r7[-4],r12
800237ac:	ef 4b ff f8 	st.w	r7[-8],r11
	adcifa->scr = interrupt_flags;   // Status Clear Register
800237b0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800237b4:	ee f9 ff f8 	ld.w	r9,r7[-8]
800237b8:	91 39       	st.w	r8[0xc],r9
}
800237ba:	2f ed       	sub	sp,-8
800237bc:	e3 cd 80 80 	ldm	sp++,r7,pc

800237c0 <ast_is_busy>:
#include <avr32/io.h>
#include "compiler.h"
#include "ast.h"

static int ast_is_busy(volatile avr32_ast_t *ast)
{
800237c0:	eb cd 40 80 	pushm	r7,lr
800237c4:	1a 97       	mov	r7,sp
800237c6:	20 1d       	sub	sp,4
800237c8:	ef 4c ff fc 	st.w	r7[-4],r12
	return (ast->sr & AVR32_AST_SR_BUSY_MASK) != 0;
800237cc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800237d0:	70 28       	ld.w	r8,r8[0x8]
800237d2:	e6 18 01 00 	andh	r8,0x100,COH
800237d6:	5f 18       	srne	r8
}
800237d8:	10 9c       	mov	r12,r8
800237da:	2f fd       	sub	sp,-4
800237dc:	e3 cd 80 80 	ldm	sp++,r7,pc

800237e0 <ast_is_clkbusy>:

static int ast_is_clkbusy(volatile avr32_ast_t *ast)
{
800237e0:	eb cd 40 80 	pushm	r7,lr
800237e4:	1a 97       	mov	r7,sp
800237e6:	20 1d       	sub	sp,4
800237e8:	ef 4c ff fc 	st.w	r7[-4],r12
	return (ast->sr & AVR32_AST_SR_CLKBUSY_MASK) != 0;
800237ec:	ee f8 ff fc 	ld.w	r8,r7[-4]
800237f0:	70 28       	ld.w	r8,r8[0x8]
800237f2:	e6 18 10 00 	andh	r8,0x1000,COH
800237f6:	5f 18       	srne	r8
}
800237f8:	10 9c       	mov	r12,r8
800237fa:	2f fd       	sub	sp,-4
800237fc:	e3 cd 80 80 	ldm	sp++,r7,pc

80023800 <ast_init_calendar>:

int ast_init_calendar(volatile avr32_ast_t *ast,
                      unsigned char osc_type,
                      unsigned char psel,
                      ast_calendar_t ast_calendar)
{
80023800:	eb cd 40 c0 	pushm	r6-r7,lr
80023804:	1a 97       	mov	r7,sp
80023806:	20 4d       	sub	sp,16
80023808:	49 a6       	lddpc	r6,80023870 <ast_init_calendar+0x70>
8002380a:	1e 26       	rsub	r6,pc
8002380c:	ef 4c ff fc 	st.w	r7[-4],r12
80023810:	14 98       	mov	r8,r10
80023812:	ef 49 ff f0 	st.w	r7[-16],r9
80023816:	16 99       	mov	r9,r11
80023818:	ef 69 ff f8 	st.b	r7[-8],r9
8002381c:	ef 68 ff f4 	st.b	r7[-12],r8

	while (ast_is_clkbusy(ast));
80023820:	ee fc ff fc 	ld.w	r12,r7[-4]
80023824:	cd ef       	rcall	800237e0 <ast_is_clkbusy>
80023826:	18 98       	mov	r8,r12
80023828:	58 08       	cp.w	r8,0
8002382a:	cf b1       	brne	80023820 <ast_init_calendar+0x20>
	ast->clock = AVR32_AST_CLOCK_CEN_MASK |
		osc_type << AVR32_AST_CLOCK_CSSEL_OFFSET;
8002382c:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80023830:	a9 68       	lsl	r8,0x8
                      unsigned char psel,
                      ast_calendar_t ast_calendar)
{

	while (ast_is_clkbusy(ast));
	ast->clock = AVR32_AST_CLOCK_CEN_MASK |
80023832:	a1 a8       	sbr	r8,0x0
80023834:	10 99       	mov	r9,r8
80023836:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002383a:	f1 49 00 40 	st.w	r8[64],r9
		osc_type << AVR32_AST_CLOCK_CSSEL_OFFSET;

	// Set the new AST configuration
	ast->cr =   AST_MODE_CALENDAR << AVR32_AST_CR_CAL_OFFSET |
		psel << AVR32_AST_CR_PSEL_OFFSET ;
8002383e:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80023842:	b1 68       	lsl	r8,0x10
	while (ast_is_clkbusy(ast));
	ast->clock = AVR32_AST_CLOCK_CEN_MASK |
		osc_type << AVR32_AST_CLOCK_CSSEL_OFFSET;

	// Set the new AST configuration
	ast->cr =   AST_MODE_CALENDAR << AVR32_AST_CR_CAL_OFFSET |
80023844:	a3 a8       	sbr	r8,0x2
80023846:	10 99       	mov	r9,r8
80023848:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002384c:	91 09       	st.w	r8[0x0],r9
		psel << AVR32_AST_CR_PSEL_OFFSET ;

	// Wait until the ast CTRL register is up-to-date
	while (ast_is_busy(ast));
8002384e:	ee fc ff fc 	ld.w	r12,r7[-4]
80023852:	cb 7f       	rcall	800237c0 <ast_is_busy>
80023854:	18 98       	mov	r8,r12
80023856:	58 08       	cp.w	r8,0
80023858:	cf b1       	brne	8002384e <ast_init_calendar+0x4e>

	// Set the calendar
	ast_set_calendar_value(ast, ast_calendar);
8002385a:	ee fb ff f0 	ld.w	r11,r7[-16]
8002385e:	ee fc ff fc 	ld.w	r12,r7[-4]
80023862:	f0 16 01 bc 	mcall	r6[1776]

	return 1;
80023866:	30 18       	mov	r8,1
}
80023868:	10 9c       	mov	r12,r8
8002386a:	2f cd       	sub	sp,-16
8002386c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80023870:	80 02       	ld.sh	r2,r0[0x0]
80023872:	36 8e       	mov	lr,104

80023874 <ast_init_counter>:

int ast_init_counter(volatile avr32_ast_t *ast,
                     unsigned char osc_type,
                     unsigned char psel,
                     unsigned long ast_counter)
{
80023874:	eb cd 40 c0 	pushm	r6-r7,lr
80023878:	1a 97       	mov	r7,sp
8002387a:	20 4d       	sub	sp,16
8002387c:	49 46       	lddpc	r6,800238cc <ast_init_counter+0x58>
8002387e:	1e 26       	rsub	r6,pc
80023880:	ef 4c ff fc 	st.w	r7[-4],r12
80023884:	14 98       	mov	r8,r10
80023886:	ef 49 ff f0 	st.w	r7[-16],r9
8002388a:	16 99       	mov	r9,r11
8002388c:	ef 69 ff f8 	st.b	r7[-8],r9
80023890:	ef 68 ff f4 	st.b	r7[-12],r8

//	while (ast_is_clkbusy(ast));
	ast->clock = AVR32_AST_CLOCK_CEN_MASK |
		osc_type << AVR32_AST_CLOCK_CSSEL_OFFSET;
80023894:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80023898:	a9 68       	lsl	r8,0x8
                     unsigned char psel,
                     unsigned long ast_counter)
{

//	while (ast_is_clkbusy(ast));
	ast->clock = AVR32_AST_CLOCK_CEN_MASK |
8002389a:	a1 a8       	sbr	r8,0x0
8002389c:	10 99       	mov	r9,r8
8002389e:	ee f8 ff fc 	ld.w	r8,r7[-4]
800238a2:	f1 49 00 40 	st.w	r8[64],r9
		osc_type << AVR32_AST_CLOCK_CSSEL_OFFSET;

	// Set the new AST configuration
	ast->cr =   AST_MODE_COUNTER << AVR32_AST_CR_CAL_OFFSET |
800238a6:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800238aa:	b1 68       	lsl	r8,0x10
800238ac:	10 99       	mov	r9,r8
800238ae:	ee f8 ff fc 	ld.w	r8,r7[-4]
800238b2:	91 09       	st.w	r8[0x0],r9

	// Wait until the ast CTRL register is up-to-date
//	while (ast_is_busy(ast));

	// Set the calendar
	ast_set_counter_value(ast, ast_counter);
800238b4:	ee fb ff f0 	ld.w	r11,r7[-16]
800238b8:	ee fc ff fc 	ld.w	r12,r7[-4]
800238bc:	f0 16 02 0e 	mcall	r6[2104]

	return 1;
800238c0:	30 18       	mov	r8,1
}
800238c2:	10 9c       	mov	r12,r8
800238c4:	2f cd       	sub	sp,-16
800238c6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800238ca:	00 00       	add	r0,r0
800238cc:	80 02       	ld.sh	r2,r0[0x0]
800238ce:	37 02       	mov	r2,112

800238d0 <ast_enable>:


void ast_enable(volatile avr32_ast_t *ast)
{
800238d0:	eb cd 40 c0 	pushm	r6-r7,lr
800238d4:	1a 97       	mov	r7,sp
800238d6:	20 1d       	sub	sp,4
800238d8:	48 e6       	lddpc	r6,80023910 <ast_enable+0x40>
800238da:	1e 26       	rsub	r6,pc
800238dc:	ef 4c ff fc 	st.w	r7[-4],r12
	// Wait until the ast CTRL register is up-to-date
	while (ast_is_busy(ast));
800238e0:	ee fc ff fc 	ld.w	r12,r7[-4]
800238e4:	c6 ef       	rcall	800237c0 <ast_is_busy>
800238e6:	18 98       	mov	r8,r12
800238e8:	58 08       	cp.w	r8,0
800238ea:	cf b1       	brne	800238e0 <ast_enable+0x10>
	// Enable the RTC
	ast->cr |= AVR32_AST_CR_EN_MASK;
800238ec:	ee f8 ff fc 	ld.w	r8,r7[-4]
800238f0:	70 08       	ld.w	r8,r8[0x0]
800238f2:	10 99       	mov	r9,r8
800238f4:	a1 a9       	sbr	r9,0x0
800238f6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800238fa:	91 09       	st.w	r8[0x0],r9
	// Wait until write is done
	while (ast_is_busy(ast));
800238fc:	ee fc ff fc 	ld.w	r12,r7[-4]
80023900:	c6 0f       	rcall	800237c0 <ast_is_busy>
80023902:	18 98       	mov	r8,r12
80023904:	58 08       	cp.w	r8,0
80023906:	cf b1       	brne	800238fc <ast_enable+0x2c>
}
80023908:	2f fd       	sub	sp,-4
8002390a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002390e:	00 00       	add	r0,r0
80023910:	80 02       	ld.sh	r2,r0[0x0]
80023912:	37 5e       	mov	lr,117

80023914 <ast_set_calendar_value>:

void ast_set_calendar_value(volatile avr32_ast_t *ast,
                            ast_calendar_t ast_calendar)
{
80023914:	eb cd 40 c0 	pushm	r6-r7,lr
80023918:	1a 97       	mov	r7,sp
8002391a:	20 2d       	sub	sp,8
8002391c:	48 e6       	lddpc	r6,80023954 <ast_set_calendar_value+0x40>
8002391e:	1e 26       	rsub	r6,pc
80023920:	ef 4c ff fc 	st.w	r7[-4],r12
80023924:	ef 4b ff f8 	st.w	r7[-8],r11
	// Wait until we can write into the VAL register
	while (ast_is_busy(ast));
80023928:	ee fc ff fc 	ld.w	r12,r7[-4]
8002392c:	c4 af       	rcall	800237c0 <ast_is_busy>
8002392e:	18 98       	mov	r8,r12
80023930:	58 08       	cp.w	r8,0
80023932:	cf b1       	brne	80023928 <ast_set_calendar_value+0x14>
	// Set the new val value
	ast->calv = ast_calendar.field;
80023934:	ee f9 ff f8 	ld.w	r9,r7[-8]
80023938:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002393c:	f1 49 00 54 	st.w	r8[84],r9
	// Wait until write is done
	while (ast_is_busy(ast));
80023940:	ee fc ff fc 	ld.w	r12,r7[-4]
80023944:	c3 ef       	rcall	800237c0 <ast_is_busy>
80023946:	18 98       	mov	r8,r12
80023948:	58 08       	cp.w	r8,0
8002394a:	cf b1       	brne	80023940 <ast_set_calendar_value+0x2c>
}
8002394c:	2f ed       	sub	sp,-8
8002394e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80023952:	00 00       	add	r0,r0
80023954:	80 02       	ld.sh	r2,r0[0x0]
80023956:	37 a2       	mov	r2,122

80023958 <ast_set_counter_value>:

void ast_set_counter_value(volatile avr32_ast_t *ast, unsigned long ast_counter)
{
80023958:	eb cd 40 c0 	pushm	r6-r7,lr
8002395c:	1a 97       	mov	r7,sp
8002395e:	20 2d       	sub	sp,8
80023960:	48 d6       	lddpc	r6,80023994 <ast_set_counter_value+0x3c>
80023962:	1e 26       	rsub	r6,pc
80023964:	ef 4c ff fc 	st.w	r7[-4],r12
80023968:	ef 4b ff f8 	st.w	r7[-8],r11
	// Wait until we can write into the VAL register
	while (ast_is_busy(ast));
8002396c:	ee fc ff fc 	ld.w	r12,r7[-4]
80023970:	c2 8f       	rcall	800237c0 <ast_is_busy>
80023972:	18 98       	mov	r8,r12
80023974:	58 08       	cp.w	r8,0
80023976:	cf b1       	brne	8002396c <ast_set_counter_value+0x14>
	// Set the new val value
	ast->cv = ast_counter;
80023978:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002397c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80023980:	91 19       	st.w	r8[0x4],r9
	// Wait until write is done
	while (ast_is_busy(ast));
80023982:	ee fc ff fc 	ld.w	r12,r7[-4]
80023986:	c1 df       	rcall	800237c0 <ast_is_busy>
80023988:	18 98       	mov	r8,r12
8002398a:	58 08       	cp.w	r8,0
8002398c:	cf b1       	brne	80023982 <ast_set_counter_value+0x2a>
}
8002398e:	2f ed       	sub	sp,-8
80023990:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80023994:	80 02       	ld.sh	r2,r0[0x0]
80023996:	37 e6       	mov	r6,126

80023998 <ast_get_calendar_value>:


ast_calendar_t ast_get_calendar_value(volatile avr32_ast_t *ast)
{
80023998:	eb cd 40 80 	pushm	r7,lr
8002399c:	1a 97       	mov	r7,sp
8002399e:	20 2d       	sub	sp,8
800239a0:	ef 4c ff f8 	st.w	r7[-8],r12
	ast_calendar_t ast_calendar;
	ast_calendar.field = ast->calv;
800239a4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800239a8:	71 58       	ld.w	r8,r8[0x54]
800239aa:	ef 48 ff fc 	st.w	r7[-4],r8
	return ast_calendar;
800239ae:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
800239b2:	10 9c       	mov	r12,r8
800239b4:	2f ed       	sub	sp,-8
800239b6:	e3 cd 80 80 	ldm	sp++,r7,pc

800239ba <ast_get_counter_value>:


unsigned long ast_get_counter_value(volatile avr32_ast_t *ast)
{
800239ba:	eb cd 40 80 	pushm	r7,lr
800239be:	1a 97       	mov	r7,sp
800239c0:	20 1d       	sub	sp,4
800239c2:	ef 4c ff fc 	st.w	r7[-4],r12
	return ast->cv;
800239c6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800239ca:	70 18       	ld.w	r8,r8[0x4]
}
800239cc:	10 9c       	mov	r12,r8
800239ce:	2f fd       	sub	sp,-4
800239d0:	e3 cd 80 80 	ldm	sp++,r7,pc

800239d4 <ast_set_alarm0_value>:

void ast_set_alarm0_value(volatile avr32_ast_t *ast, U32 alarm_value)
{
800239d4:	eb cd 40 80 	pushm	r7,lr
800239d8:	1a 97       	mov	r7,sp
800239da:	20 2d       	sub	sp,8
800239dc:	ef 4c ff fc 	st.w	r7[-4],r12
800239e0:	ef 4b ff f8 	st.w	r7[-8],r11
	// Set the new val value
	ast->ar0 = alarm_value;
800239e4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800239e8:	ee f9 ff f8 	ld.w	r9,r7[-8]
800239ec:	91 89       	st.w	r8[0x20],r9
}
800239ee:	2f ed       	sub	sp,-8
800239f0:	e3 cd 80 80 	ldm	sp++,r7,pc

800239f4 <ast_set_alarm1_value>:


void ast_set_alarm1_value(volatile avr32_ast_t *ast, U32 alarm_value)
{
800239f4:	eb cd 40 80 	pushm	r7,lr
800239f8:	1a 97       	mov	r7,sp
800239fa:	20 2d       	sub	sp,8
800239fc:	ef 4c ff fc 	st.w	r7[-4],r12
80023a00:	ef 4b ff f8 	st.w	r7[-8],r11
	// Set the new val value
	ast->ar1 = alarm_value;
80023a04:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023a08:	ee f9 ff f8 	ld.w	r9,r7[-8]
80023a0c:	91 99       	st.w	r8[0x24],r9
}
80023a0e:	2f ed       	sub	sp,-8
80023a10:	e3 cd 80 80 	ldm	sp++,r7,pc

80023a14 <ast_enable_alarm0>:


void ast_enable_alarm0(volatile avr32_ast_t *ast)
{
80023a14:	eb cd 40 c0 	pushm	r6-r7,lr
80023a18:	1a 97       	mov	r7,sp
80023a1a:	20 1d       	sub	sp,4
80023a1c:	48 e6       	lddpc	r6,80023a54 <ast_enable_alarm0+0x40>
80023a1e:	1e 26       	rsub	r6,pc
80023a20:	ef 4c ff fc 	st.w	r7[-4],r12
	// Wait until the ast CTRL register is up-to-date
	while (ast_is_busy(ast));
80023a24:	ee fc ff fc 	ld.w	r12,r7[-4]
80023a28:	cc ce       	rcall	800237c0 <ast_is_busy>
80023a2a:	18 98       	mov	r8,r12
80023a2c:	58 08       	cp.w	r8,0
80023a2e:	cf b1       	brne	80023a24 <ast_enable_alarm0+0x10>
	// Enable the RTC
	ast->eve |= AVR32_AST_EVE_ALARM0_MASK;
80023a30:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023a34:	71 28       	ld.w	r8,r8[0x48]
80023a36:	10 99       	mov	r9,r8
80023a38:	a9 a9       	sbr	r9,0x8
80023a3a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023a3e:	f1 49 00 48 	st.w	r8[72],r9
	// Wait until write is done
	while (ast_is_busy(ast));
80023a42:	ee fc ff fc 	ld.w	r12,r7[-4]
80023a46:	cb de       	rcall	800237c0 <ast_is_busy>
80023a48:	18 98       	mov	r8,r12
80023a4a:	58 08       	cp.w	r8,0
80023a4c:	cf b1       	brne	80023a42 <ast_enable_alarm0+0x2e>
}
80023a4e:	2f fd       	sub	sp,-4
80023a50:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80023a54:	80 02       	ld.sh	r2,r0[0x0]
80023a56:	38 a2       	mov	r2,-118

80023a58 <ast_disable_alarm0>:


void ast_disable_alarm0(volatile avr32_ast_t *ast)
{
80023a58:	eb cd 40 c0 	pushm	r6-r7,lr
80023a5c:	1a 97       	mov	r7,sp
80023a5e:	20 1d       	sub	sp,4
80023a60:	48 e6       	lddpc	r6,80023a98 <ast_disable_alarm0+0x40>
80023a62:	1e 26       	rsub	r6,pc
80023a64:	ef 4c ff fc 	st.w	r7[-4],r12
	// Wait until the ast CTRL register is up-to-date
	while (ast_is_busy(ast));
80023a68:	ee fc ff fc 	ld.w	r12,r7[-4]
80023a6c:	ca ae       	rcall	800237c0 <ast_is_busy>
80023a6e:	18 98       	mov	r8,r12
80023a70:	58 08       	cp.w	r8,0
80023a72:	cf b1       	brne	80023a68 <ast_disable_alarm0+0x10>
	// Enable the RTC
	ast->evd |= AVR32_AST_EVE_ALARM0_MASK;
80023a74:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023a78:	71 38       	ld.w	r8,r8[0x4c]
80023a7a:	10 99       	mov	r9,r8
80023a7c:	a9 a9       	sbr	r9,0x8
80023a7e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023a82:	f1 49 00 4c 	st.w	r8[76],r9
	// Wait until write is done
	while (ast_is_busy(ast));
80023a86:	ee fc ff fc 	ld.w	r12,r7[-4]
80023a8a:	c9 be       	rcall	800237c0 <ast_is_busy>
80023a8c:	18 98       	mov	r8,r12
80023a8e:	58 08       	cp.w	r8,0
80023a90:	cf b1       	brne	80023a86 <ast_disable_alarm0+0x2e>
}
80023a92:	2f fd       	sub	sp,-4
80023a94:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80023a98:	80 02       	ld.sh	r2,r0[0x0]
80023a9a:	38 e6       	mov	r6,-114

80023a9c <ast_enable_alarm1>:


void ast_enable_alarm1(volatile avr32_ast_t *ast)
{
80023a9c:	eb cd 40 c0 	pushm	r6-r7,lr
80023aa0:	1a 97       	mov	r7,sp
80023aa2:	20 1d       	sub	sp,4
80023aa4:	48 e6       	lddpc	r6,80023adc <ast_enable_alarm1+0x40>
80023aa6:	1e 26       	rsub	r6,pc
80023aa8:	ef 4c ff fc 	st.w	r7[-4],r12
	// Wait until the ast CTRL register is up-to-date
	while (ast_is_busy(ast));
80023aac:	ee fc ff fc 	ld.w	r12,r7[-4]
80023ab0:	c8 8e       	rcall	800237c0 <ast_is_busy>
80023ab2:	18 98       	mov	r8,r12
80023ab4:	58 08       	cp.w	r8,0
80023ab6:	cf b1       	brne	80023aac <ast_enable_alarm1+0x10>
	// Enable the RTC
	ast->eve |= AVR32_AST_EVE_ALARM1_MASK;
80023ab8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023abc:	71 28       	ld.w	r8,r8[0x48]
80023abe:	10 99       	mov	r9,r8
80023ac0:	a9 b9       	sbr	r9,0x9
80023ac2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023ac6:	f1 49 00 48 	st.w	r8[72],r9
	// Wait until write is done
	while (ast_is_busy(ast));
80023aca:	ee fc ff fc 	ld.w	r12,r7[-4]
80023ace:	c7 9e       	rcall	800237c0 <ast_is_busy>
80023ad0:	18 98       	mov	r8,r12
80023ad2:	58 08       	cp.w	r8,0
80023ad4:	cf b1       	brne	80023aca <ast_enable_alarm1+0x2e>
}
80023ad6:	2f fd       	sub	sp,-4
80023ad8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80023adc:	80 02       	ld.sh	r2,r0[0x0]
80023ade:	39 2a       	mov	r10,-110

80023ae0 <ast_disable_alarm1>:


void ast_disable_alarm1(volatile avr32_ast_t *ast)
{
80023ae0:	eb cd 40 c0 	pushm	r6-r7,lr
80023ae4:	1a 97       	mov	r7,sp
80023ae6:	20 1d       	sub	sp,4
80023ae8:	48 e6       	lddpc	r6,80023b20 <ast_disable_alarm1+0x40>
80023aea:	1e 26       	rsub	r6,pc
80023aec:	ef 4c ff fc 	st.w	r7[-4],r12
	// Wait until the ast CTRL register is up-to-date
	while (ast_is_busy(ast));
80023af0:	ee fc ff fc 	ld.w	r12,r7[-4]
80023af4:	c6 6e       	rcall	800237c0 <ast_is_busy>
80023af6:	18 98       	mov	r8,r12
80023af8:	58 08       	cp.w	r8,0
80023afa:	cf b1       	brne	80023af0 <ast_disable_alarm1+0x10>
	// Enable the RTC
	ast->evd |= AVR32_AST_EVE_ALARM1_MASK;
80023afc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023b00:	71 38       	ld.w	r8,r8[0x4c]
80023b02:	10 99       	mov	r9,r8
80023b04:	a9 b9       	sbr	r9,0x9
80023b06:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023b0a:	f1 49 00 4c 	st.w	r8[76],r9
	// Wait until write is done
	while (ast_is_busy(ast));
80023b0e:	ee fc ff fc 	ld.w	r12,r7[-4]
80023b12:	c5 7e       	rcall	800237c0 <ast_is_busy>
80023b14:	18 98       	mov	r8,r12
80023b16:	58 08       	cp.w	r8,0
80023b18:	cf b1       	brne	80023b0e <ast_disable_alarm1+0x2e>
}
80023b1a:	2f fd       	sub	sp,-4
80023b1c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80023b20:	80 02       	ld.sh	r2,r0[0x0]
80023b22:	39 6e       	mov	lr,-106

80023b24 <ast_set_periodic0_value>:


void ast_set_periodic0_value(volatile avr32_ast_t *ast, avr32_ast_pir0_t pir)
{
80023b24:	eb cd 40 80 	pushm	r7,lr
80023b28:	1a 97       	mov	r7,sp
80023b2a:	20 2d       	sub	sp,8
80023b2c:	ef 4c ff fc 	st.w	r7[-4],r12
80023b30:	ef 4b ff f8 	st.w	r7[-8],r11
	// Set the new val value
	ast->PIR0 = pir;
80023b34:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023b38:	ee f9 ff f8 	ld.w	r9,r7[-8]
80023b3c:	91 c9       	st.w	r8[0x30],r9
}
80023b3e:	2f ed       	sub	sp,-8
80023b40:	e3 cd 80 80 	ldm	sp++,r7,pc

80023b44 <ast_set_periodic1_value>:


void ast_set_periodic1_value(volatile avr32_ast_t *ast, avr32_ast_pir1_t pir)
{
80023b44:	eb cd 40 80 	pushm	r7,lr
80023b48:	1a 97       	mov	r7,sp
80023b4a:	20 2d       	sub	sp,8
80023b4c:	ef 4c ff fc 	st.w	r7[-4],r12
80023b50:	ef 4b ff f8 	st.w	r7[-8],r11
	// Set the new val value
	ast->PIR1 = pir;
80023b54:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023b58:	ee f9 ff f8 	ld.w	r9,r7[-8]
80023b5c:	91 d9       	st.w	r8[0x34],r9
}
80023b5e:	2f ed       	sub	sp,-8
80023b60:	e3 cd 80 80 	ldm	sp++,r7,pc

80023b64 <ast_enable_periodic0>:


void ast_enable_periodic0(volatile avr32_ast_t *ast)
{
80023b64:	eb cd 40 c0 	pushm	r6-r7,lr
80023b68:	1a 97       	mov	r7,sp
80023b6a:	20 1d       	sub	sp,4
80023b6c:	48 e6       	lddpc	r6,80023ba4 <ast_enable_periodic0+0x40>
80023b6e:	1e 26       	rsub	r6,pc
80023b70:	ef 4c ff fc 	st.w	r7[-4],r12
	// Wait until the ast CTRL register is up-to-date
	while (ast_is_busy(ast));
80023b74:	ee fc ff fc 	ld.w	r12,r7[-4]
80023b78:	c2 4e       	rcall	800237c0 <ast_is_busy>
80023b7a:	18 98       	mov	r8,r12
80023b7c:	58 08       	cp.w	r8,0
80023b7e:	cf b1       	brne	80023b74 <ast_enable_periodic0+0x10>
	// Enable the RTC
	ast->eve |= AVR32_AST_EVE_PER0_MASK;
80023b80:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023b84:	71 28       	ld.w	r8,r8[0x48]
80023b86:	10 99       	mov	r9,r8
80023b88:	b1 a9       	sbr	r9,0x10
80023b8a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023b8e:	f1 49 00 48 	st.w	r8[72],r9
	// Wait until write is done
	while (ast_is_busy(ast));
80023b92:	ee fc ff fc 	ld.w	r12,r7[-4]
80023b96:	c1 5e       	rcall	800237c0 <ast_is_busy>
80023b98:	18 98       	mov	r8,r12
80023b9a:	58 08       	cp.w	r8,0
80023b9c:	cf b1       	brne	80023b92 <ast_enable_periodic0+0x2e>
}
80023b9e:	2f fd       	sub	sp,-4
80023ba0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80023ba4:	80 02       	ld.sh	r2,r0[0x0]
80023ba6:	39 f2       	mov	r2,-97

80023ba8 <ast_disable_periodic0>:


void ast_disable_periodic0(volatile avr32_ast_t *ast)
{
80023ba8:	eb cd 40 c0 	pushm	r6-r7,lr
80023bac:	1a 97       	mov	r7,sp
80023bae:	20 1d       	sub	sp,4
80023bb0:	48 f6       	lddpc	r6,80023bec <ast_disable_periodic0+0x44>
80023bb2:	1e 26       	rsub	r6,pc
80023bb4:	ef 4c ff fc 	st.w	r7[-4],r12
	// Wait until the ast CTRL register is up-to-date
	while (ast_is_busy(ast));
80023bb8:	ee fc ff fc 	ld.w	r12,r7[-4]
80023bbc:	c0 2e       	rcall	800237c0 <ast_is_busy>
80023bbe:	18 98       	mov	r8,r12
80023bc0:	58 08       	cp.w	r8,0
80023bc2:	cf b1       	brne	80023bb8 <ast_disable_periodic0+0x10>
	// Enable the RTC
	ast->evd |= AVR32_AST_EVE_PER0_MASK;
80023bc4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023bc8:	71 38       	ld.w	r8,r8[0x4c]
80023bca:	10 99       	mov	r9,r8
80023bcc:	b1 a9       	sbr	r9,0x10
80023bce:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023bd2:	f1 49 00 4c 	st.w	r8[76],r9
	// Wait until write is done
	while (ast_is_busy(ast));
80023bd6:	ee fc ff fc 	ld.w	r12,r7[-4]
80023bda:	fe b0 fd f3 	rcall	800237c0 <ast_is_busy>
80023bde:	18 98       	mov	r8,r12
80023be0:	58 08       	cp.w	r8,0
80023be2:	cf a1       	brne	80023bd6 <ast_disable_periodic0+0x2e>
}
80023be4:	2f fd       	sub	sp,-4
80023be6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80023bea:	00 00       	add	r0,r0
80023bec:	80 02       	ld.sh	r2,r0[0x0]
80023bee:	3a 36       	mov	r6,-93

80023bf0 <ast_enable_periodic1>:


void ast_enable_periodic1(volatile avr32_ast_t *ast)
{
80023bf0:	eb cd 40 c0 	pushm	r6-r7,lr
80023bf4:	1a 97       	mov	r7,sp
80023bf6:	20 1d       	sub	sp,4
80023bf8:	48 f6       	lddpc	r6,80023c34 <ast_enable_periodic1+0x44>
80023bfa:	1e 26       	rsub	r6,pc
80023bfc:	ef 4c ff fc 	st.w	r7[-4],r12
	// Wait until the ast CTRL register is up-to-date
	while (ast_is_busy(ast));
80023c00:	ee fc ff fc 	ld.w	r12,r7[-4]
80023c04:	fe b0 fd de 	rcall	800237c0 <ast_is_busy>
80023c08:	18 98       	mov	r8,r12
80023c0a:	58 08       	cp.w	r8,0
80023c0c:	cf a1       	brne	80023c00 <ast_enable_periodic1+0x10>
	// Enable the RTC
	ast->eve |= AVR32_AST_EVE_PER1_MASK;
80023c0e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023c12:	71 28       	ld.w	r8,r8[0x48]
80023c14:	10 99       	mov	r9,r8
80023c16:	b1 b9       	sbr	r9,0x11
80023c18:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023c1c:	f1 49 00 48 	st.w	r8[72],r9
	// Wait until write is done
	while (ast_is_busy(ast));
80023c20:	ee fc ff fc 	ld.w	r12,r7[-4]
80023c24:	fe b0 fd ce 	rcall	800237c0 <ast_is_busy>
80023c28:	18 98       	mov	r8,r12
80023c2a:	58 08       	cp.w	r8,0
80023c2c:	cf a1       	brne	80023c20 <ast_enable_periodic1+0x30>
}
80023c2e:	2f fd       	sub	sp,-4
80023c30:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80023c34:	80 02       	ld.sh	r2,r0[0x0]
80023c36:	3a 7e       	mov	lr,-89

80023c38 <ast_disable_periodic1>:


void ast_disable_periodic1(volatile avr32_ast_t *ast)
{
80023c38:	eb cd 40 c0 	pushm	r6-r7,lr
80023c3c:	1a 97       	mov	r7,sp
80023c3e:	20 1d       	sub	sp,4
80023c40:	48 f6       	lddpc	r6,80023c7c <ast_disable_periodic1+0x44>
80023c42:	1e 26       	rsub	r6,pc
80023c44:	ef 4c ff fc 	st.w	r7[-4],r12
	// Wait until the ast CTRL register is up-to-date
	while (ast_is_busy(ast));
80023c48:	ee fc ff fc 	ld.w	r12,r7[-4]
80023c4c:	fe b0 fd ba 	rcall	800237c0 <ast_is_busy>
80023c50:	18 98       	mov	r8,r12
80023c52:	58 08       	cp.w	r8,0
80023c54:	cf a1       	brne	80023c48 <ast_disable_periodic1+0x10>
	// Enable the RTC
	ast->evd |= AVR32_AST_EVE_PER0_MASK;
80023c56:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023c5a:	71 38       	ld.w	r8,r8[0x4c]
80023c5c:	10 99       	mov	r9,r8
80023c5e:	b1 a9       	sbr	r9,0x10
80023c60:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023c64:	f1 49 00 4c 	st.w	r8[76],r9
	// Wait until write is done
	while (ast_is_busy(ast));
80023c68:	ee fc ff fc 	ld.w	r12,r7[-4]
80023c6c:	fe b0 fd aa 	rcall	800237c0 <ast_is_busy>
80023c70:	18 98       	mov	r8,r12
80023c72:	58 08       	cp.w	r8,0
80023c74:	cf a1       	brne	80023c68 <ast_disable_periodic1+0x30>
}
80023c76:	2f fd       	sub	sp,-4
80023c78:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80023c7c:	80 02       	ld.sh	r2,r0[0x0]
80023c7e:	3a c6       	mov	r6,-84

80023c80 <dacifb_us_delay>:
 *
 * \param us Number of microseconds to wait.
 * \param hsb_mhz_up Rounded-up HSB frequency in MHz.
 */
static void dacifb_us_delay(us, hsb_mhz_up)
{
80023c80:	eb cd 40 cc 	pushm	r2-r3,r6-r7,lr
80023c84:	1a 97       	mov	r7,sp
80023c86:	20 cd       	sub	sp,48
80023c88:	4d 46       	lddpc	r6,80023dd8 <dacifb_us_delay+0x158>
80023c8a:	1e 26       	rsub	r6,pc
80023c8c:	ef 4c ff d4 	st.w	r7[-44],r12
80023c90:	ef 4b ff d0 	st.w	r7[-48],r11
	t_cpu_time timer;
    cpu_set_timeout( cpu_us_2_cy(us, hsb_mhz_up), &timer ); // timeout in 10 ms
80023c94:	ee fa ff d0 	ld.w	r10,r7[-48]
80023c98:	ee fb ff d4 	ld.w	r11,r7[-44]
80023c9c:	ef 4b ff e8 	st.w	r7[-24],r11
80023ca0:	ef 4a ff e4 	st.w	r7[-28],r10
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
80023ca4:	ee f2 ff e8 	ld.w	r2,r7[-24]
80023ca8:	30 03       	mov	r3,0
80023caa:	ee f8 ff e4 	ld.w	r8,r7[-28]
80023cae:	30 09       	mov	r9,0
80023cb0:	e6 08 02 4a 	mul	r10,r3,r8
80023cb4:	f2 02 02 4b 	mul	r11,r9,r2
80023cb8:	16 0a       	add	r10,r11
80023cba:	e4 08 06 48 	mulu.d	r8,r2,r8
80023cbe:	12 0a       	add	r10,r9
80023cc0:	14 99       	mov	r9,r10
80023cc2:	ee 7a 42 3f 	mov	r10,999999
80023cc6:	30 0b       	mov	r11,0
80023cc8:	f0 0a 00 0a 	add	r10,r8,r10
80023ccc:	f2 0b 00 4b 	adc	r11,r9,r11
80023cd0:	ee 78 42 40 	mov	r8,1000000
80023cd4:	30 09       	mov	r9,0
80023cd6:	f0 16 00 f8 	mcall	r6[992]
80023cda:	14 98       	mov	r8,r10
80023cdc:	16 99       	mov	r9,r11
80023cde:	ef 48 ff f0 	st.w	r7[-16],r8
80023ce2:	ee c8 00 28 	sub	r8,r7,40
80023ce6:	ef 48 ff ec 	st.w	r7[-20],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80023cea:	e1 b8 00 42 	mfsr	r8,0x108
80023cee:	10 99       	mov	r9,r8
80023cf0:	ee f8 ff ec 	ld.w	r8,r7[-20]
80023cf4:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80023cf6:	ee f8 ff ec 	ld.w	r8,r7[-20]
80023cfa:	70 09       	ld.w	r9,r8[0x0]
80023cfc:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023d00:	10 09       	add	r9,r8
80023d02:	ee f8 ff ec 	ld.w	r8,r7[-20]
80023d06:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80023d08:	ee f9 ff ec 	ld.w	r9,r7[-20]
80023d0c:	30 08       	mov	r8,0
80023d0e:	f3 68 00 08 	st.b	r9[8],r8
80023d12:	ee c8 00 28 	sub	r8,r7,40
80023d16:	ef 48 ff f4 	st.w	r7[-12],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80023d1a:	e1 b8 00 42 	mfsr	r8,0x108
80023d1e:	ef 48 ff f8 	st.w	r7[-8],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80023d22:	ee f8 ff f4 	ld.w	r8,r7[-12]
80023d26:	f1 39 00 08 	ld.ub	r9,r8[8]
80023d2a:	30 28       	mov	r8,2
80023d2c:	f0 09 18 00 	cp.b	r9,r8
80023d30:	c0 31       	brne	80023d36 <dacifb_us_delay+0xb6>
    return false;
80023d32:	30 08       	mov	r8,0
80023d34:	c4 38       	rjmp	80023dba <dacifb_us_delay+0x13a>

  // Test if the timeout as already occured.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80023d36:	ee f8 ff f4 	ld.w	r8,r7[-12]
80023d3a:	f1 39 00 08 	ld.ub	r9,r8[8]
80023d3e:	30 18       	mov	r8,1
80023d40:	f0 09 18 00 	cp.b	r9,r8
80023d44:	c0 31       	brne	80023d4a <dacifb_us_delay+0xca>
    return true;
80023d46:	30 18       	mov	r8,1
80023d48:	c3 98       	rjmp	80023dba <dacifb_us_delay+0x13a>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80023d4a:	ee f8 ff f4 	ld.w	r8,r7[-12]
80023d4e:	70 09       	ld.w	r9,r8[0x0]
80023d50:	ee f8 ff f4 	ld.w	r8,r7[-12]
80023d54:	70 18       	ld.w	r8,r8[0x4]
80023d56:	10 39       	cp.w	r9,r8
80023d58:	e0 88 00 1a 	brls	80023d8c <dacifb_us_delay+0x10c>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80023d5c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80023d60:	70 08       	ld.w	r8,r8[0x0]
80023d62:	ee f9 ff f8 	ld.w	r9,r7[-8]
80023d66:	10 39       	cp.w	r9,r8
80023d68:	c1 02       	brcc	80023d88 <dacifb_us_delay+0x108>
80023d6a:	ee f8 ff f4 	ld.w	r8,r7[-12]
80023d6e:	70 18       	ld.w	r8,r8[0x4]
80023d70:	ee f9 ff f8 	ld.w	r9,r7[-8]
80023d74:	10 39       	cp.w	r9,r8
80023d76:	e0 88 00 09 	brls	80023d88 <dacifb_us_delay+0x108>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80023d7a:	ee f9 ff f4 	ld.w	r9,r7[-12]
80023d7e:	30 18       	mov	r8,1
80023d80:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80023d84:	30 18       	mov	r8,1
80023d86:	c1 a8       	rjmp	80023dba <dacifb_us_delay+0x13a>
    }
    return false;
80023d88:	30 08       	mov	r8,0
80023d8a:	c1 88       	rjmp	80023dba <dacifb_us_delay+0x13a>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80023d8c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80023d90:	70 08       	ld.w	r8,r8[0x0]
80023d92:	ee f9 ff f8 	ld.w	r9,r7[-8]
80023d96:	10 39       	cp.w	r9,r8
80023d98:	c0 93       	brcs	80023daa <dacifb_us_delay+0x12a>
80023d9a:	ee f8 ff f4 	ld.w	r8,r7[-12]
80023d9e:	70 18       	ld.w	r8,r8[0x4]
80023da0:	ee f9 ff f8 	ld.w	r9,r7[-8]
80023da4:	10 39       	cp.w	r9,r8
80023da6:	e0 88 00 09 	brls	80023db8 <dacifb_us_delay+0x138>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80023daa:	ee f9 ff f4 	ld.w	r9,r7[-12]
80023dae:	30 18       	mov	r8,1
80023db0:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80023db4:	30 18       	mov	r8,1
80023db6:	c0 28       	rjmp	80023dba <dacifb_us_delay+0x13a>
    }
    return false;
80023db8:	30 08       	mov	r8,0
    while(! cpu_is_timeout(&timer) );
80023dba:	58 08       	cp.w	r8,0
80023dbc:	ca b0       	breq	80023d12 <dacifb_us_delay+0x92>
80023dbe:	ee c8 00 28 	sub	r8,r7,40
80023dc2:	ef 48 ff fc 	st.w	r7[-4],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void cpu_stop_timeout(t_cpu_time *cpu_time)
{
  cpu_time->timer_state = CPU_TIMER_STATE_STOPPED;
80023dc6:	ee f9 ff fc 	ld.w	r9,r7[-4]
80023dca:	30 28       	mov	r8,2
80023dcc:	f3 68 00 08 	st.b	r9[8],r8
    cpu_stop_timeout(&timer);
}
80023dd0:	2f 4d       	sub	sp,-48
80023dd2:	e3 cd 80 cc 	ldm	sp++,r2-r3,r6-r7,pc
80023dd6:	00 00       	add	r0,r0
80023dd8:	80 02       	ld.sh	r2,r0[0x0]
80023dda:	3b 0e       	mov	lr,-80

80023ddc <dacifb_get_calibration_data>:
 */

void dacifb_get_calibration_data( volatile avr32_dacifb_t * dacifb,
                                dacifb_opt_t * p_dacifb_opt,
                                U8 instance)
{
80023ddc:	eb cd 40 80 	pushm	r7,lr
80023de0:	1a 97       	mov	r7,sp
80023de2:	20 5d       	sub	sp,20
80023de4:	ef 4c ff f4 	st.w	r7[-12],r12
80023de8:	ef 4b ff f0 	st.w	r7[-16],r11
80023dec:	14 98       	mov	r8,r10
80023dee:	ef 68 ff ec 	st.b	r7[-20],r8
  {
    p_dacifb_opt->offset_calibration_value = ((*calibration_data >> 16) & 0x000000FF);
    p_dacifb_opt->gain_calibration_value = ((*calibration_data >> 24) & 0x000000FF);    
  }
#else
  unsigned int* calibration_data_0 = (unsigned int*)AVR32_FLASHC_CALIBRATION_FOURTH_WORD_ADDRESS;
80023df2:	e0 68 02 0c 	mov	r8,524
80023df6:	ea 18 80 80 	orh	r8,0x8080
80023dfa:	ef 48 ff f8 	st.w	r7[-8],r8
  unsigned int* calibration_data_1 = (unsigned int*)AVR32_FLASHC_CALIBRATION_FIVETH_WORD_ADDRESS;
80023dfe:	e0 68 02 14 	mov	r8,532
80023e02:	ea 18 80 80 	orh	r8,0x8080
80023e06:	ef 48 ff fc 	st.w	r7[-4],r8
  if (instance == 0)
80023e0a:	ef 39 ff ec 	ld.ub	r9,r7[-20]
80023e0e:	30 08       	mov	r8,0
80023e10:	f0 09 18 00 	cp.b	r9,r8
80023e14:	c1 71       	brne	80023e42 <dacifb_get_calibration_data+0x66>
  {
    p_dacifb_opt->offset_calibration_value = (*calibration_data_0 & 0x000001FF);
80023e16:	ee f8 ff f8 	ld.w	r8,r7[-8]
80023e1a:	70 08       	ld.w	r8,r8[0x0]
80023e1c:	5c 88       	casts.h	r8
80023e1e:	5c 88       	casts.h	r8
80023e20:	f1 d8 c0 09 	bfextu	r8,r8,0x0,0x9
80023e24:	ee f9 ff f0 	ld.w	r9,r7[-16]
80023e28:	b2 28       	st.h	r9[0x4],r8
    p_dacifb_opt->gain_calibration_value = ((*calibration_data_0 >> 16) & 0x000000FF);  
80023e2a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80023e2e:	70 08       	ld.w	r8,r8[0x0]
80023e30:	b1 88       	lsr	r8,0x10
80023e32:	5c 88       	casts.h	r8
80023e34:	5c 88       	casts.h	r8
80023e36:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
80023e3a:	ee f9 ff f0 	ld.w	r9,r7[-16]
80023e3e:	b2 18       	st.h	r9[0x2],r8
80023e40:	c1 68       	rjmp	80023e6c <dacifb_get_calibration_data+0x90>
  }
  else
  {
    p_dacifb_opt->offset_calibration_value = ((*calibration_data_1) & 0x000001FF);
80023e42:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023e46:	70 08       	ld.w	r8,r8[0x0]
80023e48:	5c 88       	casts.h	r8
80023e4a:	5c 88       	casts.h	r8
80023e4c:	f1 d8 c0 09 	bfextu	r8,r8,0x0,0x9
80023e50:	ee f9 ff f0 	ld.w	r9,r7[-16]
80023e54:	b2 28       	st.h	r9[0x4],r8
    p_dacifb_opt->gain_calibration_value = ((*calibration_data_1 >> 16) & 0x000000FF);    
80023e56:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023e5a:	70 08       	ld.w	r8,r8[0x0]
80023e5c:	b1 88       	lsr	r8,0x10
80023e5e:	5c 88       	casts.h	r8
80023e60:	5c 88       	casts.h	r8
80023e62:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
80023e66:	ee f9 ff f0 	ld.w	r9,r7[-16]
80023e6a:	b2 18       	st.h	r9[0x2],r8
  }
#endif  
}
80023e6c:	2f bd       	sub	sp,-20
80023e6e:	e3 cd 80 80 	ldm	sp++,r7,pc

80023e72 <dacifb_configure>:

U8 dacifb_configure(volatile avr32_dacifb_t * dacifb,
                           dacifb_opt_t * p_dacifb_opt,
                           U32 pb_hz)
{
80023e72:	eb cd 40 80 	pushm	r7,lr
80023e76:	1a 97       	mov	r7,sp
80023e78:	20 5d       	sub	sp,20
80023e7a:	ef 4c ff f4 	st.w	r7[-12],r12
80023e7e:	ef 4b ff f0 	st.w	r7[-16],r11
80023e82:	ef 4a ff ec 	st.w	r7[-20],r10
  U32 prescaler = 0;
80023e86:	30 08       	mov	r8,0
80023e88:	ef 48 ff f8 	st.w	r7[-8],r8
  U32 counter = 0;
80023e8c:	30 08       	mov	r8,0
80023e8e:	ef 48 ff fc 	st.w	r7[-4],r8
  
  Assert( dacifb!=NULL );
  
  // Calibration of DAC
  dacifb->goc = (((p_dacifb_opt->offset_calibration_value<<AVR32_DACIFB_GOC_OCR_OFFSET)&AVR32_DACIFB_GOC_OCR_MASK)|
80023e92:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023e96:	90 28       	ld.sh	r8,r8[0x4]
80023e98:	5c 78       	castu.h	r8
80023e9a:	f3 d8 c0 09 	bfextu	r9,r8,0x0,0x9
                 ((p_dacifb_opt->gain_calibration_value<<AVR32_DACIFB_GOC_GCR_OFFSET)&AVR32_DACIFB_GOC_GCR_MASK));
80023e9e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023ea2:	90 18       	ld.sh	r8,r8[0x2]
80023ea4:	5c 78       	castu.h	r8
80023ea6:	b1 68       	lsl	r8,0x10
80023ea8:	e6 18 01 ff 	andh	r8,0x1ff,COH
  U32 counter = 0;
  
  Assert( dacifb!=NULL );
  
  // Calibration of DAC
  dacifb->goc = (((p_dacifb_opt->offset_calibration_value<<AVR32_DACIFB_GOC_OCR_OFFSET)&AVR32_DACIFB_GOC_OCR_MASK)|
80023eac:	f3 e8 10 08 	or	r8,r9,r8
80023eb0:	10 99       	mov	r9,r8
80023eb2:	ee f8 ff f4 	ld.w	r8,r7[-12]
80023eb6:	91 d9       	st.w	r8[0x34],r9
                 ((p_dacifb_opt->gain_calibration_value<<AVR32_DACIFB_GOC_GCR_OFFSET)&AVR32_DACIFB_GOC_GCR_MASK));
  
  // Compute PRESC field
  prescaler = 31 - clz(pb_hz/p_dacifb_opt->prescaler_clock_hz);  
80023eb8:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023ebc:	70 29       	ld.w	r9,r8[0x8]
80023ebe:	ee f8 ff ec 	ld.w	r8,r7[-20]
80023ec2:	f0 09 0d 08 	divu	r8,r8,r9
80023ec6:	f0 08 12 00 	clz	r8,r8
80023eca:	f0 08 11 1f 	rsub	r8,r8,31
80023ece:	ef 48 ff f8 	st.w	r7[-8],r8

  // Check PRESC value
  if (prescaler > (1<<AVR32_DACIFB_TCR_PRESC_SIZE))
80023ed2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80023ed6:	58 88       	cp.w	r8,8
80023ed8:	e0 88 00 04 	brls	80023ee0 <dacifb_configure+0x6e>
    return DACIFB_CONFIGURATION_REFUSED;
80023edc:	30 08       	mov	r8,0
80023ede:	c6 d8       	rjmp	80023fb8 <dacifb_configure+0x146>

  // Update prescaler_clock_hz value
  p_dacifb_opt->prescaler_clock_hz = pb_hz / (1<<prescaler);
80023ee0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80023ee4:	ee f9 ff ec 	ld.w	r9,r7[-20]
80023ee8:	f2 08 0a 49 	lsr	r9,r9,r8
80023eec:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023ef0:	91 29       	st.w	r8[0x8],r9
    
  // Compute CHI field  ( minimum value of 2us) 
  counter = (p_dacifb_opt->prescaler_clock_hz/DACIFB_CHI_MIN_VALUE);
80023ef2:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023ef6:	70 29       	ld.w	r9,r8[0x8]
80023ef8:	e0 68 de 83 	mov	r8,56963
80023efc:	ea 18 43 1b 	orh	r8,0x431b
80023f00:	f2 08 06 48 	mulu.d	r8,r9,r8
80023f04:	f2 08 16 11 	lsr	r8,r9,0x11
80023f08:	ef 48 ff fc 	st.w	r7[-4],r8
  
  // Check CHI value
  if (counter > (1<<AVR32_DACIFB_TCR_CHI_SIZE))
80023f0c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023f10:	e0 48 00 80 	cp.w	r8,128
80023f14:	e0 88 00 04 	brls	80023f1c <dacifb_configure+0xaa>
    return DACIFB_CONFIGURATION_REFUSED;
80023f18:	30 08       	mov	r8,0
80023f1a:	c4 f8       	rjmp	80023fb8 <dacifb_configure+0x146>
  
  
  // Sampling Rate Frequency
  dacifb->tcr |= ( ((prescaler<<AVR32_DACIFB_TCR_PRESC_OFFSET)&AVR32_DACIFB_TCR_PRESC_MASK)|
80023f1c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80023f20:	70 39       	ld.w	r9,r8[0xc]
80023f22:	ee f8 ff f8 	ld.w	r8,r7[-8]
80023f26:	b9 68       	lsl	r8,0x18
80023f28:	10 9a       	mov	r10,r8
80023f2a:	e6 1a 07 00 	andh	r10,0x700,COH
                  ((counter<<AVR32_DACIFB_TCR_CHI_OFFSET)&AVR32_DACIFB_TCR_CHI_MASK) );
80023f2e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023f32:	b1 68       	lsl	r8,0x10
80023f34:	e6 18 00 7f 	andh	r8,0x7f,COH
  if (counter > (1<<AVR32_DACIFB_TCR_CHI_SIZE))
    return DACIFB_CONFIGURATION_REFUSED;
  
  
  // Sampling Rate Frequency
  dacifb->tcr |= ( ((prescaler<<AVR32_DACIFB_TCR_PRESC_OFFSET)&AVR32_DACIFB_TCR_PRESC_MASK)|
80023f38:	f5 e8 10 08 	or	r8,r10,r8
80023f3c:	10 49       	or	r9,r8
80023f3e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80023f42:	91 39       	st.w	r8[0xc],r9
                  ((counter<<AVR32_DACIFB_TCR_CHI_OFFSET)&AVR32_DACIFB_TCR_CHI_MASK) );
  
  // Channel Selection
  dacifb->cfr |= ((p_dacifb_opt->channel_selection<<AVR32_DACIFB_CFR_CHC_OFFSET)&AVR32_DACIFB_CFR_CHC_MASK);
80023f44:	ee f8 ff f4 	ld.w	r8,r7[-12]
80023f48:	70 19       	ld.w	r9,r8[0x4]
80023f4a:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023f4e:	11 98       	ld.ub	r8,r8[0x1]
80023f50:	b9 68       	lsl	r8,0x18
80023f52:	e6 18 03 00 	andh	r8,0x300,COH
80023f56:	10 49       	or	r9,r8
80023f58:	ee f8 ff f4 	ld.w	r8,r7[-12]
80023f5c:	91 19       	st.w	r8[0x4],r9
    
  // Reference Selection
  dacifb->cfr |= ((p_dacifb_opt->reference <<AVR32_DACIFB_CFR_REF_OFFSET)&AVR32_DACIFB_CFR_REF_MASK);
80023f5e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80023f62:	70 19       	ld.w	r9,r8[0x4]
80023f64:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023f68:	11 88       	ld.ub	r8,r8[0x0]
80023f6a:	a9 68       	lsl	r8,0x8
80023f6c:	e2 18 01 00 	andl	r8,0x100,COH
80023f70:	10 49       	or	r9,r8
80023f72:	ee f8 ff f4 	ld.w	r8,r7[-12]
80023f76:	91 19       	st.w	r8[0x4],r9

  // Dual Data
  dacifb->cfr |= ((p_dacifb_opt->dual<<AVR32_DACIFB_CFR_DDA_OFFSET)&AVR32_DACIFB_CFR_DDA_MASK);
80023f78:	ee f8 ff f4 	ld.w	r8,r7[-12]
80023f7c:	70 19       	ld.w	r9,r8[0x4]
80023f7e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023f82:	11 f8       	ld.ub	r8,r8[0x7]
80023f84:	a1 78       	lsl	r8,0x1
80023f86:	e2 18 00 02 	andl	r8,0x2,COH
80023f8a:	10 49       	or	r9,r8
80023f8c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80023f90:	91 19       	st.w	r8[0x4],r9
  
  // Low Power Mode
  dacifb->cfr |= ((p_dacifb_opt->low_power <<AVR32_DACIFB_CFR_LP_OFFSET)&AVR32_DACIFB_CFR_LP_MASK);
80023f92:	ee f8 ff f4 	ld.w	r8,r7[-12]
80023f96:	70 19       	ld.w	r9,r8[0x4]
80023f98:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023f9c:	11 e8       	ld.ub	r8,r8[0x6]
80023f9e:	10 49       	or	r9,r8
80023fa0:	ee f8 ff f4 	ld.w	r8,r7[-12]
80023fa4:	91 19       	st.w	r8[0x4],r9
  
  // Enable DAC
  dacifb->cr |= AVR32_DACIFB_CR_EN_MASK;
80023fa6:	ee f8 ff f4 	ld.w	r8,r7[-12]
80023faa:	70 08       	ld.w	r8,r8[0x0]
80023fac:	10 99       	mov	r9,r8
80023fae:	a1 a9       	sbr	r9,0x0
80023fb0:	ee f8 ff f4 	ld.w	r8,r7[-12]
80023fb4:	91 09       	st.w	r8[0x0],r9
  
  return DACIFB_CONFIGURATION_ACCEPTED;
80023fb6:	30 18       	mov	r8,1
}
80023fb8:	10 9c       	mov	r12,r8
80023fba:	2f bd       	sub	sp,-20
80023fbc:	e3 cd 80 80 	ldm	sp++,r7,pc

80023fc0 <dacifb_configure_channel>:

U8 dacifb_configure_channel( volatile avr32_dacifb_t * dacifb,
                             U8 channel,
                             dacifb_channel_opt_t * p_dacifb_channel_opt,
                             U32 prescaler_clock_hz)
{
80023fc0:	eb cd 40 80 	pushm	r7,lr
80023fc4:	1a 97       	mov	r7,sp
80023fc6:	20 7d       	sub	sp,28
80023fc8:	ef 4c ff f0 	st.w	r7[-16],r12
80023fcc:	16 98       	mov	r8,r11
80023fce:	ef 4a ff e8 	st.w	r7[-24],r10
80023fd2:	ef 49 ff e4 	st.w	r7[-28],r9
80023fd6:	ef 68 ff ec 	st.b	r7[-20],r8
  U32 prescaler_min = 0;
80023fda:	30 08       	mov	r8,0
80023fdc:	ef 48 ff f4 	st.w	r7[-12],r8
  U32 prescaler_max = 0;
80023fe0:	30 08       	mov	r8,0
80023fe2:	ef 48 ff f8 	st.w	r7[-8],r8
  U32 prescaler = 0;
80023fe6:	30 08       	mov	r8,0
80023fe8:	ef 48 ff fc 	st.w	r7[-4],r8
  
  Assert( dacifb!=NULL );
  
  // Auto-refresh Mode
  if (p_dacifb_channel_opt->auto_refresh_mode == true)
80023fec:	ee f8 ff e8 	ld.w	r8,r7[-24]
80023ff0:	11 88       	ld.ub	r8,r8[0x0]
80023ff2:	58 08       	cp.w	r8,0
80023ff4:	c2 40       	breq	8002403c <dacifb_configure_channel+0x7c>
  {
    switch(channel)
80023ff6:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80023ffa:	58 28       	cp.w	r8,2
80023ffc:	c0 e0       	breq	80024018 <dacifb_configure_channel+0x58>
80023ffe:	58 38       	cp.w	r8,3
80024000:	c1 50       	breq	8002402a <dacifb_configure_channel+0x6a>
80024002:	58 18       	cp.w	r8,1
80024004:	c1 c1       	brne	8002403c <dacifb_configure_channel+0x7c>
    {
      case DACIFB_CHANNEL_SELECTION_A:
           dacifb->cr |= (AVR32_DACIFB_CR_ARAE_MASK);      
80024006:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002400a:	70 08       	ld.w	r8,r8[0x0]
8002400c:	10 99       	mov	r9,r8
8002400e:	bb a9       	sbr	r9,0x1a
80024010:	ee f8 ff f0 	ld.w	r8,r7[-16]
80024014:	91 09       	st.w	r8[0x0],r9
        break;
80024016:	c1 38       	rjmp	8002403c <dacifb_configure_channel+0x7c>
      case DACIFB_CHANNEL_SELECTION_B:
           dacifb->cr |= (AVR32_DACIFB_CR_ARBE_MASK );
80024018:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002401c:	70 08       	ld.w	r8,r8[0x0]
8002401e:	10 99       	mov	r9,r8
80024020:	bb b9       	sbr	r9,0x1b
80024022:	ee f8 ff f0 	ld.w	r8,r7[-16]
80024026:	91 09       	st.w	r8[0x0],r9
        break;  
80024028:	c0 a8       	rjmp	8002403c <dacifb_configure_channel+0x7c>
      case DACIFB_CHANNEL_SELECTION_AB:
           dacifb->cr |= (AVR32_DACIFB_CR_ARAE_MASK)|(AVR32_DACIFB_CR_ARBE_MASK );
8002402a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002402e:	70 08       	ld.w	r8,r8[0x0]
80024030:	10 99       	mov	r9,r8
80024032:	ea 19 0c 00 	orh	r9,0xc00
80024036:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002403a:	91 09       	st.w	r8[0x0],r9
        break;  
    }
  }
  
  // Compute CHRA/CHRB fields  ( min value of 25us) 
  prescaler_min = 31 - clz(prescaler_clock_hz/DACIFB_CHRx_MIN_VALUE); 
8002403c:	ee f9 ff e4 	ld.w	r9,r7[-28]
80024040:	e0 68 17 59 	mov	r8,5977
80024044:	ea 18 d1 b7 	orh	r8,0xd1b7
80024048:	f2 08 06 48 	mulu.d	r8,r9,r8
8002404c:	f2 08 16 0f 	lsr	r8,r9,0xf
80024050:	f0 08 12 00 	clz	r8,r8
80024054:	f0 08 11 1f 	rsub	r8,r8,31
80024058:	ef 48 ff f4 	st.w	r7[-12],r8
  if (prescaler_min > 0) prescaler_min --;
8002405c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80024060:	58 08       	cp.w	r8,0
80024062:	c0 60       	breq	8002406e <dacifb_configure_channel+0xae>
80024064:	ee f8 ff f4 	ld.w	r8,r7[-12]
80024068:	20 18       	sub	r8,1
8002406a:	ef 48 ff f4 	st.w	r7[-12],r8
  
  // Check CHRA/CHRB fields
  if ( (prescaler_min > (1<<AVR32_DACIFB_TCR_CHRA_SIZE)) ||
8002406e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80024072:	59 08       	cp.w	r8,16
80024074:	e0 8b 00 07 	brhi	80024082 <dacifb_configure_channel+0xc2>
80024078:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002407c:	59 08       	cp.w	r8,16
8002407e:	e0 88 00 05 	brls	80024088 <dacifb_configure_channel+0xc8>
       (prescaler_min > (1<<AVR32_DACIFB_TCR_CHRB_SIZE))  )
    return DACIFB_CONFIGURATION_REFUSED;
80024082:	30 08       	mov	r8,0
80024084:	e0 8f 01 87 	bral	80024392 <dacifb_configure_channel+0x3d2>
  
  // Compute CHRA/CHRB fields  ( max value of 35us) 
  prescaler_max = 31 - clz(prescaler_clock_hz/DACIFB_CHRx_MAX_VALUE); 
80024088:	ee f9 ff e4 	ld.w	r9,r7[-28]
8002408c:	e0 68 27 59 	mov	r8,10073
80024090:	ea 18 fb a9 	orh	r8,0xfba9
80024094:	f2 08 06 48 	mulu.d	r8,r9,r8
80024098:	f2 08 16 0f 	lsr	r8,r9,0xf
8002409c:	f0 08 12 00 	clz	r8,r8
800240a0:	f0 08 11 1f 	rsub	r8,r8,31
800240a4:	ef 48 ff f8 	st.w	r7[-8],r8
  if (prescaler_max > 0) prescaler_max --;
800240a8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800240ac:	58 08       	cp.w	r8,0
800240ae:	c0 60       	breq	800240ba <dacifb_configure_channel+0xfa>
800240b0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800240b4:	20 18       	sub	r8,1
800240b6:	ef 48 ff f8 	st.w	r7[-8],r8
  
  // Check CHRA/CHRB fields
  if ( (prescaler_max > (1<<AVR32_DACIFB_TCR_CHRA_SIZE)) ||
800240ba:	ee f8 ff f8 	ld.w	r8,r7[-8]
800240be:	59 08       	cp.w	r8,16
800240c0:	e0 8b 00 07 	brhi	800240ce <dacifb_configure_channel+0x10e>
800240c4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800240c8:	59 08       	cp.w	r8,16
800240ca:	e0 88 00 04 	brls	800240d2 <dacifb_configure_channel+0x112>
       (prescaler_max > (1<<AVR32_DACIFB_TCR_CHRB_SIZE))  )
    return DACIFB_CONFIGURATION_REFUSED;      
800240ce:	30 08       	mov	r8,0
800240d0:	c6 19       	rjmp	80024392 <dacifb_configure_channel+0x3d2>
      
  // Find value for CHRA/CHRB in the range min/max values 25us/35us and stop if it is not possible.
  prescaler = 0;
800240d2:	30 08       	mov	r8,0
800240d4:	ef 48 ff fc 	st.w	r7[-4],r8
  while ((prescaler<<1) < prescaler_min)
800240d8:	c0 68       	rjmp	800240e4 <dacifb_configure_channel+0x124>
  {
      prescaler++;
800240da:	ee f8 ff fc 	ld.w	r8,r7[-4]
800240de:	2f f8       	sub	r8,-1
800240e0:	ef 48 ff fc 	st.w	r7[-4],r8
       (prescaler_max > (1<<AVR32_DACIFB_TCR_CHRB_SIZE))  )
    return DACIFB_CONFIGURATION_REFUSED;      
      
  // Find value for CHRA/CHRB in the range min/max values 25us/35us and stop if it is not possible.
  prescaler = 0;
  while ((prescaler<<1) < prescaler_min)
800240e4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800240e8:	f0 09 15 01 	lsl	r9,r8,0x1
800240ec:	ee f8 ff f4 	ld.w	r8,r7[-12]
800240f0:	10 39       	cp.w	r9,r8
800240f2:	cf 43       	brcs	800240da <dacifb_configure_channel+0x11a>
  {
      prescaler++;
  } 
  // If value found is out of range, configuration refused 
  if ((prescaler<<1) > prescaler_max)  
800240f4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800240f8:	f0 09 15 01 	lsl	r9,r8,0x1
800240fc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80024100:	10 39       	cp.w	r9,r8
80024102:	e0 88 00 04 	brls	8002410a <dacifb_configure_channel+0x14a>
    return DACIFB_CONFIGURATION_REFUSED;    
80024106:	30 08       	mov	r8,0
80024108:	c4 59       	rjmp	80024392 <dacifb_configure_channel+0x3d2>
    
  // Refresh Time 
  switch(channel)
8002410a:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8002410e:	58 28       	cp.w	r8,2
80024110:	c1 10       	breq	80024132 <dacifb_configure_channel+0x172>
80024112:	58 38       	cp.w	r8,3
80024114:	c1 c0       	breq	8002414c <dacifb_configure_channel+0x18c>
80024116:	58 18       	cp.w	r8,1
80024118:	c2 c1       	brne	80024170 <dacifb_configure_channel+0x1b0>
  {
    case DACIFB_CHANNEL_SELECTION_A:
         dacifb->tcr |= ((prescaler<<AVR32_DACIFB_TCR_CHRA_OFFSET)&AVR32_DACIFB_TCR_CHRA_MASK);      
8002411a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002411e:	70 39       	ld.w	r9,r8[0xc]
80024120:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024124:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80024128:	10 49       	or	r9,r8
8002412a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002412e:	91 39       	st.w	r8[0xc],r9
      break;
80024130:	c2 08       	rjmp	80024170 <dacifb_configure_channel+0x1b0>
    case DACIFB_CHANNEL_SELECTION_B:
         dacifb->tcr |= ((prescaler<<AVR32_DACIFB_TCR_CHRB_OFFSET)&AVR32_DACIFB_TCR_CHRB_MASK);
80024132:	ee f8 ff f0 	ld.w	r8,r7[-16]
80024136:	70 39       	ld.w	r9,r8[0xc]
80024138:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002413c:	a9 68       	lsl	r8,0x8
8002413e:	e2 18 0f 00 	andl	r8,0xf00,COH
80024142:	10 49       	or	r9,r8
80024144:	ee f8 ff f0 	ld.w	r8,r7[-16]
80024148:	91 39       	st.w	r8[0xc],r9
      break;  
8002414a:	c1 38       	rjmp	80024170 <dacifb_configure_channel+0x1b0>
    case DACIFB_CHANNEL_SELECTION_AB:
         dacifb->tcr |= ( ((prescaler<<AVR32_DACIFB_TCR_CHRA_OFFSET)&AVR32_DACIFB_TCR_CHRA_MASK) |
8002414c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80024150:	70 39       	ld.w	r9,r8[0xc]
80024152:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024156:	f5 d8 c0 04 	bfextu	r10,r8,0x0,0x4
                          ((prescaler<<AVR32_DACIFB_TCR_CHRB_OFFSET)&AVR32_DACIFB_TCR_CHRB_MASK) );
8002415a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002415e:	a9 68       	lsl	r8,0x8
80024160:	e2 18 0f 00 	andl	r8,0xf00,COH
      break;
    case DACIFB_CHANNEL_SELECTION_B:
         dacifb->tcr |= ((prescaler<<AVR32_DACIFB_TCR_CHRB_OFFSET)&AVR32_DACIFB_TCR_CHRB_MASK);
      break;  
    case DACIFB_CHANNEL_SELECTION_AB:
         dacifb->tcr |= ( ((prescaler<<AVR32_DACIFB_TCR_CHRA_OFFSET)&AVR32_DACIFB_TCR_CHRA_MASK) |
80024164:	f5 e8 10 08 	or	r8,r10,r8
80024168:	10 49       	or	r9,r8
8002416a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002416e:	91 39       	st.w	r8[0xc],r9
                          ((prescaler<<AVR32_DACIFB_TCR_CHRB_OFFSET)&AVR32_DACIFB_TCR_CHRB_MASK) );
      break;
  }

  // Trigger Mode
  switch(channel)
80024170:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80024174:	58 28       	cp.w	r8,2
80024176:	c3 30       	breq	800241dc <dacifb_configure_channel+0x21c>
80024178:	58 38       	cp.w	r8,3
8002417a:	c5 e0       	breq	80024236 <dacifb_configure_channel+0x276>
8002417c:	58 18       	cp.w	r8,1
8002417e:	e0 81 00 8f 	brne	8002429c <dacifb_configure_channel+0x2dc>
  {
    case DACIFB_CHANNEL_SELECTION_A:
         if (p_dacifb_channel_opt->trigger_mode!=DACIFB_TRIGGER_MODE_MANUAL)
80024182:	ee f8 ff e8 	ld.w	r8,r7[-24]
80024186:	11 98       	ld.ub	r8,r8[0x1]
80024188:	58 08       	cp.w	r8,0
8002418a:	c0 90       	breq	8002419c <dacifb_configure_channel+0x1dc>
         {
             dacifb->cfr |= (AVR32_DACIFB_CFR_AAE_MASK);
8002418c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80024190:	70 18       	ld.w	r8,r8[0x4]
80024192:	10 99       	mov	r9,r8
80024194:	b1 a9       	sbr	r9,0x10
80024196:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002419a:	91 19       	st.w	r8[0x4],r9
         }
         if (p_dacifb_channel_opt->trigger_mode==DACIFB_TRIGGER_MODE_EVENT)
8002419c:	ee f8 ff e8 	ld.w	r8,r7[-24]
800241a0:	11 99       	ld.ub	r9,r8[0x1]
800241a2:	30 28       	mov	r8,2
800241a4:	f0 09 18 00 	cp.b	r9,r8
800241a8:	c0 a1       	brne	800241bc <dacifb_configure_channel+0x1fc>
         {
           dacifb->ecr |= (AVR32_DACIFB_ECR_ESLA_MASK);
800241aa:	ee f8 ff f0 	ld.w	r8,r7[-16]
800241ae:	70 28       	ld.w	r8,r8[0x8]
800241b0:	10 99       	mov	r9,r8
800241b2:	a1 a9       	sbr	r9,0x0
800241b4:	ee f8 ff f0 	ld.w	r8,r7[-16]
800241b8:	91 29       	st.w	r8[0x8],r9
         }
         else if (p_dacifb_channel_opt->trigger_mode==DACIFB_TRIGGER_MODE_TIMER)
         {
           dacifb->cr |= (AVR32_DACIFB_CR_TRAE_MASK);
         }
      break;
800241ba:	c7 18       	rjmp	8002429c <dacifb_configure_channel+0x2dc>
         }
         if (p_dacifb_channel_opt->trigger_mode==DACIFB_TRIGGER_MODE_EVENT)
         {
           dacifb->ecr |= (AVR32_DACIFB_ECR_ESLA_MASK);
         }
         else if (p_dacifb_channel_opt->trigger_mode==DACIFB_TRIGGER_MODE_TIMER)
800241bc:	ee f8 ff e8 	ld.w	r8,r7[-24]
800241c0:	11 99       	ld.ub	r9,r8[0x1]
800241c2:	30 18       	mov	r8,1
800241c4:	f0 09 18 00 	cp.b	r9,r8
800241c8:	c6 71       	brne	80024296 <dacifb_configure_channel+0x2d6>
         {
           dacifb->cr |= (AVR32_DACIFB_CR_TRAE_MASK);
800241ca:	ee f8 ff f0 	ld.w	r8,r7[-16]
800241ce:	70 08       	ld.w	r8,r8[0x0]
800241d0:	10 99       	mov	r9,r8
800241d2:	b9 a9       	sbr	r9,0x18
800241d4:	ee f8 ff f0 	ld.w	r8,r7[-16]
800241d8:	91 09       	st.w	r8[0x0],r9
         }
      break;
800241da:	c6 18       	rjmp	8002429c <dacifb_configure_channel+0x2dc>
    case DACIFB_CHANNEL_SELECTION_B:
         if (p_dacifb_channel_opt->trigger_mode!=DACIFB_TRIGGER_MODE_MANUAL)
800241dc:	ee f8 ff e8 	ld.w	r8,r7[-24]
800241e0:	11 98       	ld.ub	r8,r8[0x1]
800241e2:	58 08       	cp.w	r8,0
800241e4:	c0 90       	breq	800241f6 <dacifb_configure_channel+0x236>
         {
             dacifb->cfr |= (AVR32_DACIFB_CFR_ABE_MASK);
800241e6:	ee f8 ff f0 	ld.w	r8,r7[-16]
800241ea:	70 18       	ld.w	r8,r8[0x4]
800241ec:	10 99       	mov	r9,r8
800241ee:	b1 b9       	sbr	r9,0x11
800241f0:	ee f8 ff f0 	ld.w	r8,r7[-16]
800241f4:	91 19       	st.w	r8[0x4],r9
         }
         if (p_dacifb_channel_opt->trigger_mode==DACIFB_TRIGGER_MODE_EVENT)
800241f6:	ee f8 ff e8 	ld.w	r8,r7[-24]
800241fa:	11 99       	ld.ub	r9,r8[0x1]
800241fc:	30 28       	mov	r8,2
800241fe:	f0 09 18 00 	cp.b	r9,r8
80024202:	c0 a1       	brne	80024216 <dacifb_configure_channel+0x256>
         {
           dacifb->ecr |= (AVR32_DACIFB_ECR_ESLB_MASK);
80024204:	ee f8 ff f0 	ld.w	r8,r7[-16]
80024208:	70 28       	ld.w	r8,r8[0x8]
8002420a:	10 99       	mov	r9,r8
8002420c:	a9 a9       	sbr	r9,0x8
8002420e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80024212:	91 29       	st.w	r8[0x8],r9
         }
         else if (p_dacifb_channel_opt->trigger_mode==DACIFB_TRIGGER_MODE_TIMER)
         {
           dacifb->cr |= (AVR32_DACIFB_CR_TRBE_MASK);
         }
      break;    
80024214:	c4 48       	rjmp	8002429c <dacifb_configure_channel+0x2dc>
         }
         if (p_dacifb_channel_opt->trigger_mode==DACIFB_TRIGGER_MODE_EVENT)
         {
           dacifb->ecr |= (AVR32_DACIFB_ECR_ESLB_MASK);
         }
         else if (p_dacifb_channel_opt->trigger_mode==DACIFB_TRIGGER_MODE_TIMER)
80024216:	ee f8 ff e8 	ld.w	r8,r7[-24]
8002421a:	11 99       	ld.ub	r9,r8[0x1]
8002421c:	30 18       	mov	r8,1
8002421e:	f0 09 18 00 	cp.b	r9,r8
80024222:	c3 c1       	brne	8002429a <dacifb_configure_channel+0x2da>
         {
           dacifb->cr |= (AVR32_DACIFB_CR_TRBE_MASK);
80024224:	ee f8 ff f0 	ld.w	r8,r7[-16]
80024228:	70 08       	ld.w	r8,r8[0x0]
8002422a:	10 99       	mov	r9,r8
8002422c:	b9 b9       	sbr	r9,0x19
8002422e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80024232:	91 09       	st.w	r8[0x0],r9
         }
      break;    
80024234:	c3 48       	rjmp	8002429c <dacifb_configure_channel+0x2dc>
    case DACIFB_CHANNEL_SELECTION_AB:
         if (p_dacifb_channel_opt->trigger_mode!=DACIFB_TRIGGER_MODE_MANUAL)
80024236:	ee f8 ff e8 	ld.w	r8,r7[-24]
8002423a:	11 98       	ld.ub	r8,r8[0x1]
8002423c:	58 08       	cp.w	r8,0
8002423e:	c0 a0       	breq	80024252 <dacifb_configure_channel+0x292>
         {
             dacifb->cfr |= (AVR32_DACIFB_CFR_AAE_MASK)|(AVR32_DACIFB_CFR_ABE_MASK);
80024240:	ee f8 ff f0 	ld.w	r8,r7[-16]
80024244:	70 18       	ld.w	r8,r8[0x4]
80024246:	10 99       	mov	r9,r8
80024248:	ea 19 00 03 	orh	r9,0x3
8002424c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80024250:	91 19       	st.w	r8[0x4],r9
         }
         if (p_dacifb_channel_opt->trigger_mode==DACIFB_TRIGGER_MODE_EVENT)
80024252:	ee f8 ff e8 	ld.w	r8,r7[-24]
80024256:	11 99       	ld.ub	r9,r8[0x1]
80024258:	30 28       	mov	r8,2
8002425a:	f0 09 18 00 	cp.b	r9,r8
8002425e:	c0 b1       	brne	80024274 <dacifb_configure_channel+0x2b4>
         {
           dacifb->ecr |= (AVR32_DACIFB_ECR_ESLA_MASK)|(AVR32_DACIFB_ECR_ESLB_MASK);
80024260:	ee f8 ff f0 	ld.w	r8,r7[-16]
80024264:	70 28       	ld.w	r8,r8[0x8]
80024266:	10 99       	mov	r9,r8
80024268:	e8 19 01 01 	orl	r9,0x101
8002426c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80024270:	91 29       	st.w	r8[0x8],r9
80024272:	c1 58       	rjmp	8002429c <dacifb_configure_channel+0x2dc>
         }
         else if (p_dacifb_channel_opt->trigger_mode==DACIFB_TRIGGER_MODE_TIMER)
80024274:	ee f8 ff e8 	ld.w	r8,r7[-24]
80024278:	11 99       	ld.ub	r9,r8[0x1]
8002427a:	30 18       	mov	r8,1
8002427c:	f0 09 18 00 	cp.b	r9,r8
80024280:	c0 e1       	brne	8002429c <dacifb_configure_channel+0x2dc>
         {
           dacifb->cr  |= (AVR32_DACIFB_CR_TRAE_MASK)|(AVR32_DACIFB_CR_TRBE_MASK);
80024282:	ee f8 ff f0 	ld.w	r8,r7[-16]
80024286:	70 08       	ld.w	r8,r8[0x0]
80024288:	10 99       	mov	r9,r8
8002428a:	ea 19 03 00 	orh	r9,0x300
8002428e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80024292:	91 09       	st.w	r8[0x0],r9
80024294:	c0 48       	rjmp	8002429c <dacifb_configure_channel+0x2dc>
         }
         else if (p_dacifb_channel_opt->trigger_mode==DACIFB_TRIGGER_MODE_TIMER)
         {
           dacifb->cr |= (AVR32_DACIFB_CR_TRAE_MASK);
         }
      break;
80024296:	d7 03       	nop
80024298:	c0 28       	rjmp	8002429c <dacifb_configure_channel+0x2dc>
         }
         else if (p_dacifb_channel_opt->trigger_mode==DACIFB_TRIGGER_MODE_TIMER)
         {
           dacifb->cr |= (AVR32_DACIFB_CR_TRBE_MASK);
         }
      break;    
8002429a:	d7 03       	nop
      break;  
  }
  
  
  // Left Adjust/ Shift Value / Data Rounding
  switch(channel)
8002429c:	ef 38 ff ec 	ld.ub	r8,r7[-20]
800242a0:	58 28       	cp.w	r8,2
800242a2:	c2 20       	breq	800242e6 <dacifb_configure_channel+0x326>
800242a4:	58 38       	cp.w	r8,3
800242a6:	c3 d0       	breq	80024320 <dacifb_configure_channel+0x360>
800242a8:	58 18       	cp.w	r8,1
800242aa:	c7 31       	brne	80024390 <dacifb_configure_channel+0x3d0>
  {
    case DACIFB_CHANNEL_SELECTION_A:
         dacifb->drca |= (((p_dacifb_channel_opt->left_adjustment<<AVR32_DACIFB_DRCA_DSD_OFFSET)&AVR32_DACIFB_DRCA_DSD_MASK) |
800242ac:	ee f8 ff f0 	ld.w	r8,r7[-16]
800242b0:	70 99       	ld.w	r9,r8[0x24]
800242b2:	ee f8 ff e8 	ld.w	r8,r7[-24]
800242b6:	11 a8       	ld.ub	r8,r8[0x2]
800242b8:	ab 78       	lsl	r8,0xb
800242ba:	10 9a       	mov	r10,r8
800242bc:	e2 1a 08 00 	andl	r10,0x800,COH
                         ((p_dacifb_channel_opt->data_shift<<AVR32_DACIFB_DRCA_DSV_OFFSET)&AVR32_DACIFB_DRCA_DSV_MASK) |
800242c0:	ee f8 ff e8 	ld.w	r8,r7[-24]
800242c4:	11 b8       	ld.ub	r8,r8[0x3]
800242c6:	a9 68       	lsl	r8,0x8
800242c8:	e2 18 07 00 	andl	r8,0x700,COH
800242cc:	10 4a       	or	r10,r8
                         ((p_dacifb_channel_opt->data_round_enable<<AVR32_DACIFB_DRCA_DRN_OFFSET)&AVR32_DACIFB_DRCA_DRN_MASK));      
800242ce:	ee f8 ff e8 	ld.w	r8,r7[-24]
800242d2:	11 c8       	ld.ub	r8,r8[0x4]
800242d4:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
  
  // Left Adjust/ Shift Value / Data Rounding
  switch(channel)
  {
    case DACIFB_CHANNEL_SELECTION_A:
         dacifb->drca |= (((p_dacifb_channel_opt->left_adjustment<<AVR32_DACIFB_DRCA_DSD_OFFSET)&AVR32_DACIFB_DRCA_DSD_MASK) |
800242d8:	f5 e8 10 08 	or	r8,r10,r8
800242dc:	10 49       	or	r9,r8
800242de:	ee f8 ff f0 	ld.w	r8,r7[-16]
800242e2:	91 99       	st.w	r8[0x24],r9
                         ((p_dacifb_channel_opt->data_shift<<AVR32_DACIFB_DRCA_DSV_OFFSET)&AVR32_DACIFB_DRCA_DSV_MASK) |
                         ((p_dacifb_channel_opt->data_round_enable<<AVR32_DACIFB_DRCA_DRN_OFFSET)&AVR32_DACIFB_DRCA_DRN_MASK));      
      break;
800242e4:	c5 68       	rjmp	80024390 <dacifb_configure_channel+0x3d0>
    case DACIFB_CHANNEL_SELECTION_B:
         dacifb->drcb |= (((p_dacifb_channel_opt->left_adjustment<<AVR32_DACIFB_DRCB_DSD_OFFSET)&AVR32_DACIFB_DRCB_DSD_MASK) |
800242e6:	ee f8 ff f0 	ld.w	r8,r7[-16]
800242ea:	70 a9       	ld.w	r9,r8[0x28]
800242ec:	ee f8 ff e8 	ld.w	r8,r7[-24]
800242f0:	11 a8       	ld.ub	r8,r8[0x2]
800242f2:	ab 78       	lsl	r8,0xb
800242f4:	10 9a       	mov	r10,r8
800242f6:	e2 1a 08 00 	andl	r10,0x800,COH
                         ((p_dacifb_channel_opt->data_shift<<AVR32_DACIFB_DRCB_DSV_OFFSET)&AVR32_DACIFB_DRCB_DSV_MASK) |
800242fa:	ee f8 ff e8 	ld.w	r8,r7[-24]
800242fe:	11 b8       	ld.ub	r8,r8[0x3]
80024300:	a9 68       	lsl	r8,0x8
80024302:	e2 18 07 00 	andl	r8,0x700,COH
80024306:	10 4a       	or	r10,r8
                         ((p_dacifb_channel_opt->data_round_enable<<AVR32_DACIFB_DRCB_DRN_OFFSET)&AVR32_DACIFB_DRCB_DRN_MASK));  
80024308:	ee f8 ff e8 	ld.w	r8,r7[-24]
8002430c:	11 c8       	ld.ub	r8,r8[0x4]
8002430e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
         dacifb->drca |= (((p_dacifb_channel_opt->left_adjustment<<AVR32_DACIFB_DRCA_DSD_OFFSET)&AVR32_DACIFB_DRCA_DSD_MASK) |
                         ((p_dacifb_channel_opt->data_shift<<AVR32_DACIFB_DRCA_DSV_OFFSET)&AVR32_DACIFB_DRCA_DSV_MASK) |
                         ((p_dacifb_channel_opt->data_round_enable<<AVR32_DACIFB_DRCA_DRN_OFFSET)&AVR32_DACIFB_DRCA_DRN_MASK));      
      break;
    case DACIFB_CHANNEL_SELECTION_B:
         dacifb->drcb |= (((p_dacifb_channel_opt->left_adjustment<<AVR32_DACIFB_DRCB_DSD_OFFSET)&AVR32_DACIFB_DRCB_DSD_MASK) |
80024312:	f5 e8 10 08 	or	r8,r10,r8
80024316:	10 49       	or	r9,r8
80024318:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002431c:	91 a9       	st.w	r8[0x28],r9
                         ((p_dacifb_channel_opt->data_shift<<AVR32_DACIFB_DRCB_DSV_OFFSET)&AVR32_DACIFB_DRCB_DSV_MASK) |
                         ((p_dacifb_channel_opt->data_round_enable<<AVR32_DACIFB_DRCB_DRN_OFFSET)&AVR32_DACIFB_DRCB_DRN_MASK));  
      break;    
8002431e:	c3 98       	rjmp	80024390 <dacifb_configure_channel+0x3d0>
    case DACIFB_CHANNEL_SELECTION_AB:
         dacifb->drca |= (((p_dacifb_channel_opt->left_adjustment<<AVR32_DACIFB_DRCA_DSD_OFFSET)&AVR32_DACIFB_DRCA_DSD_MASK) |
80024320:	ee f8 ff f0 	ld.w	r8,r7[-16]
80024324:	70 99       	ld.w	r9,r8[0x24]
80024326:	ee f8 ff e8 	ld.w	r8,r7[-24]
8002432a:	11 a8       	ld.ub	r8,r8[0x2]
8002432c:	ab 78       	lsl	r8,0xb
8002432e:	10 9a       	mov	r10,r8
80024330:	e2 1a 08 00 	andl	r10,0x800,COH
                         ((p_dacifb_channel_opt->data_shift<<AVR32_DACIFB_DRCA_DSV_OFFSET)&AVR32_DACIFB_DRCA_DSV_MASK) |
80024334:	ee f8 ff e8 	ld.w	r8,r7[-24]
80024338:	11 b8       	ld.ub	r8,r8[0x3]
8002433a:	a9 68       	lsl	r8,0x8
8002433c:	e2 18 07 00 	andl	r8,0x700,COH
80024340:	10 4a       	or	r10,r8
                         ((p_dacifb_channel_opt->data_round_enable<<AVR32_DACIFB_DRCA_DRN_OFFSET)&AVR32_DACIFB_DRCA_DRN_MASK));   
80024342:	ee f8 ff e8 	ld.w	r8,r7[-24]
80024346:	11 c8       	ld.ub	r8,r8[0x4]
80024348:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
         dacifb->drcb |= (((p_dacifb_channel_opt->left_adjustment<<AVR32_DACIFB_DRCB_DSD_OFFSET)&AVR32_DACIFB_DRCB_DSD_MASK) |
                         ((p_dacifb_channel_opt->data_shift<<AVR32_DACIFB_DRCB_DSV_OFFSET)&AVR32_DACIFB_DRCB_DSV_MASK) |
                         ((p_dacifb_channel_opt->data_round_enable<<AVR32_DACIFB_DRCB_DRN_OFFSET)&AVR32_DACIFB_DRCB_DRN_MASK));  
      break;    
    case DACIFB_CHANNEL_SELECTION_AB:
         dacifb->drca |= (((p_dacifb_channel_opt->left_adjustment<<AVR32_DACIFB_DRCA_DSD_OFFSET)&AVR32_DACIFB_DRCA_DSD_MASK) |
8002434c:	f5 e8 10 08 	or	r8,r10,r8
80024350:	10 49       	or	r9,r8
80024352:	ee f8 ff f0 	ld.w	r8,r7[-16]
80024356:	91 99       	st.w	r8[0x24],r9
                         ((p_dacifb_channel_opt->data_shift<<AVR32_DACIFB_DRCA_DSV_OFFSET)&AVR32_DACIFB_DRCA_DSV_MASK) |
                         ((p_dacifb_channel_opt->data_round_enable<<AVR32_DACIFB_DRCA_DRN_OFFSET)&AVR32_DACIFB_DRCA_DRN_MASK));   
         dacifb->drcb |= (((p_dacifb_channel_opt->left_adjustment<<AVR32_DACIFB_DRCB_DSD_OFFSET)&AVR32_DACIFB_DRCB_DSD_MASK) |
80024358:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002435c:	70 a9       	ld.w	r9,r8[0x28]
8002435e:	ee f8 ff e8 	ld.w	r8,r7[-24]
80024362:	11 a8       	ld.ub	r8,r8[0x2]
80024364:	ab 78       	lsl	r8,0xb
80024366:	10 9a       	mov	r10,r8
80024368:	e2 1a 08 00 	andl	r10,0x800,COH
                         ((p_dacifb_channel_opt->data_shift<<AVR32_DACIFB_DRCB_DSV_OFFSET)&AVR32_DACIFB_DRCB_DSV_MASK) |
8002436c:	ee f8 ff e8 	ld.w	r8,r7[-24]
80024370:	11 b8       	ld.ub	r8,r8[0x3]
80024372:	a9 68       	lsl	r8,0x8
80024374:	e2 18 07 00 	andl	r8,0x700,COH
80024378:	10 4a       	or	r10,r8
                         ((p_dacifb_channel_opt->data_round_enable<<AVR32_DACIFB_DRCB_DRN_OFFSET)&AVR32_DACIFB_DRCB_DRN_MASK));  
8002437a:	ee f8 ff e8 	ld.w	r8,r7[-24]
8002437e:	11 c8       	ld.ub	r8,r8[0x4]
80024380:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
      break;    
    case DACIFB_CHANNEL_SELECTION_AB:
         dacifb->drca |= (((p_dacifb_channel_opt->left_adjustment<<AVR32_DACIFB_DRCA_DSD_OFFSET)&AVR32_DACIFB_DRCA_DSD_MASK) |
                         ((p_dacifb_channel_opt->data_shift<<AVR32_DACIFB_DRCA_DSV_OFFSET)&AVR32_DACIFB_DRCA_DSV_MASK) |
                         ((p_dacifb_channel_opt->data_round_enable<<AVR32_DACIFB_DRCA_DRN_OFFSET)&AVR32_DACIFB_DRCA_DRN_MASK));   
         dacifb->drcb |= (((p_dacifb_channel_opt->left_adjustment<<AVR32_DACIFB_DRCB_DSD_OFFSET)&AVR32_DACIFB_DRCB_DSD_MASK) |
80024384:	f5 e8 10 08 	or	r8,r10,r8
80024388:	10 49       	or	r9,r8
8002438a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002438e:	91 a9       	st.w	r8[0x28],r9
                         ((p_dacifb_channel_opt->data_shift<<AVR32_DACIFB_DRCB_DSV_OFFSET)&AVR32_DACIFB_DRCB_DSV_MASK) |
                         ((p_dacifb_channel_opt->data_round_enable<<AVR32_DACIFB_DRCB_DRN_OFFSET)&AVR32_DACIFB_DRCB_DRN_MASK));  
      break;   
  }
  return DACIFB_CONFIGURATION_ACCEPTED;
80024390:	30 18       	mov	r8,1
}
80024392:	10 9c       	mov	r12,r8
80024394:	2f 9d       	sub	sp,-28
80024396:	e3 cd 80 80 	ldm	sp++,r7,pc

8002439a <dacifb_start_channel>:

void dacifb_start_channel(volatile avr32_dacifb_t * dacifb, 
                          U8 channel,
                          U32 cpu_hz)
{
8002439a:	eb cd 40 c0 	pushm	r6-r7,lr
8002439e:	1a 97       	mov	r7,sp
800243a0:	20 3d       	sub	sp,12
800243a2:	49 b6       	lddpc	r6,8002440c <dacifb_start_channel+0x72>
800243a4:	1e 26       	rsub	r6,pc
800243a6:	ef 4c ff fc 	st.w	r7[-4],r12
800243aa:	16 98       	mov	r8,r11
800243ac:	ef 4a ff f4 	st.w	r7[-12],r10
800243b0:	ef 68 ff f8 	st.b	r7[-8],r8
  Assert( dacifb!=NULL );
  
  // Wait 2us
  dacifb_us_delay(2,cpu_hz);
800243b4:	ee fb ff f4 	ld.w	r11,r7[-12]
800243b8:	30 2c       	mov	r12,2
800243ba:	fe b0 fc 63 	rcall	80023c80 <dacifb_us_delay>
  
  switch(channel)
800243be:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800243c2:	58 28       	cp.w	r8,2
800243c4:	c0 e0       	breq	800243e0 <dacifb_start_channel+0x46>
800243c6:	58 38       	cp.w	r8,3
800243c8:	c1 50       	breq	800243f2 <dacifb_start_channel+0x58>
800243ca:	58 18       	cp.w	r8,1
800243cc:	c1 c1       	brne	80024404 <dacifb_start_channel+0x6a>
  {
    case DACIFB_CHANNEL_SELECTION_A:
         dacifb->cr |= (AVR32_DACIFB_CR_AOE_MASK);      
800243ce:	ee f8 ff fc 	ld.w	r8,r7[-4]
800243d2:	70 08       	ld.w	r8,r8[0x0]
800243d4:	10 99       	mov	r9,r8
800243d6:	b1 a9       	sbr	r9,0x10
800243d8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800243dc:	91 09       	st.w	r8[0x0],r9
      break;
800243de:	c1 38       	rjmp	80024404 <dacifb_start_channel+0x6a>
    case DACIFB_CHANNEL_SELECTION_B:
         dacifb->cr |= (AVR32_DACIFB_CR_BOE_MASK );
800243e0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800243e4:	70 08       	ld.w	r8,r8[0x0]
800243e6:	10 99       	mov	r9,r8
800243e8:	b1 b9       	sbr	r9,0x11
800243ea:	ee f8 ff fc 	ld.w	r8,r7[-4]
800243ee:	91 09       	st.w	r8[0x0],r9
      break;
800243f0:	c0 a8       	rjmp	80024404 <dacifb_start_channel+0x6a>
    case DACIFB_CHANNEL_SELECTION_AB:
         dacifb->cr |= (AVR32_DACIFB_CR_AOE_MASK | AVR32_DACIFB_CR_BOE_MASK );
800243f2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800243f6:	70 08       	ld.w	r8,r8[0x0]
800243f8:	10 99       	mov	r9,r8
800243fa:	ea 19 00 03 	orh	r9,0x3
800243fe:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024402:	91 09       	st.w	r8[0x0],r9
      break;    
  }
  
}
80024404:	2f dd       	sub	sp,-12
80024406:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002440a:	00 00       	add	r0,r0
8002440c:	80 02       	ld.sh	r2,r0[0x0]
8002440e:	42 28       	lddsp	r8,sp[0x88]

80024410 <dacifb_check_eoc>:


bool dacifb_check_eoc(volatile avr32_dacifb_t * dacifb, 
                      U8 channel)
{
80024410:	eb cd 40 80 	pushm	r7,lr
80024414:	1a 97       	mov	r7,sp
80024416:	20 2d       	sub	sp,8
80024418:	ef 4c ff fc 	st.w	r7[-4],r12
8002441c:	16 98       	mov	r8,r11
8002441e:	ef 68 ff f8 	st.b	r7[-8],r8
  Assert( dacifb!=NULL );
     
  // get SR register : EOC bit for channel
  return ((((dacifb->sr)&(channel<<AVR32_DACIFB_SR_DEA_OFFSET))==(channel<<AVR32_DACIFB_SR_DEA_OFFSET))? DACIFB_STATUS_COMPLETED : DACIFB_STATUS_NOT_COMPLETED);
80024422:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024426:	70 78       	ld.w	r8,r8[0x1c]
80024428:	30 18       	mov	r8,1
}
8002442a:	10 9c       	mov	r12,r8
8002442c:	2f ed       	sub	sp,-8
8002442e:	e3 cd 80 80 	ldm	sp++,r7,pc

80024432 <dacifb_set_value>:

void dacifb_set_value(volatile avr32_dacifb_t * dacifb, 
                      U8 channel,
                      bool dual,
                      U32 value)
{
80024432:	eb cd 40 80 	pushm	r7,lr
80024436:	1a 97       	mov	r7,sp
80024438:	20 4d       	sub	sp,16
8002443a:	ef 4c ff fc 	st.w	r7[-4],r12
8002443e:	14 98       	mov	r8,r10
80024440:	ef 49 ff f0 	st.w	r7[-16],r9
80024444:	16 99       	mov	r9,r11
80024446:	ef 69 ff f8 	st.b	r7[-8],r9
8002444a:	ef 68 ff f4 	st.b	r7[-12],r8
  Assert( dacifb != NULL );

  // Set new conversion value
  switch(channel)
8002444e:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80024452:	58 28       	cp.w	r8,2
80024454:	c0 b0       	breq	8002446a <dacifb_set_value+0x38>
80024456:	58 38       	cp.w	r8,3
80024458:	c0 f0       	breq	80024476 <dacifb_set_value+0x44>
8002445a:	58 18       	cp.w	r8,1
8002445c:	c2 01       	brne	8002449c <dacifb_set_value+0x6a>
  {
    case DACIFB_CHANNEL_SELECTION_A:
         dacifb->dr0 = (value);      
8002445e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024462:	ee f9 ff f0 	ld.w	r9,r7[-16]
80024466:	91 b9       	st.w	r8[0x2c],r9
      break;
80024468:	c1 a8       	rjmp	8002449c <dacifb_set_value+0x6a>
    case DACIFB_CHANNEL_SELECTION_B:
         dacifb->dr1 = (value);
8002446a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002446e:	ee f9 ff f0 	ld.w	r9,r7[-16]
80024472:	91 c9       	st.w	r8[0x30],r9
      break;
80024474:	c1 48       	rjmp	8002449c <dacifb_set_value+0x6a>
    case DACIFB_CHANNEL_SELECTION_AB:
       if(dual==true)
80024476:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8002447a:	30 08       	mov	r8,0
8002447c:	f0 09 18 00 	cp.b	r9,r8
80024480:	c0 70       	breq	8002448e <dacifb_set_value+0x5c>
       {
         dacifb->dr0 = value;
80024482:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024486:	ee f9 ff f0 	ld.w	r9,r7[-16]
8002448a:	91 b9       	st.w	r8[0x2c],r9
8002448c:	c0 88       	rjmp	8002449c <dacifb_set_value+0x6a>
       }
       else
       {
           dacifb->dr0 = ((value&0x00FF) | ( (value&0xFF00>>16)<<16));
8002448e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80024492:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80024496:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002449a:	91 b9       	st.w	r8[0x2c],r9
       }
      break;    
  }
}
8002449c:	2f cd       	sub	sp,-16
8002449e:	e3 cd 80 80 	ldm	sp++,r7,pc

800244a2 <dacifb_reload_timer>:

void dacifb_reload_timer(volatile avr32_dacifb_t * dacifb,
                         U8 channel,
                         U8 timer_us,
                         U32 prescaler_clock_hz)
{
800244a2:	eb cd 40 80 	pushm	r7,lr
800244a6:	1a 97       	mov	r7,sp
800244a8:	20 5d       	sub	sp,20
800244aa:	ef 4c ff f8 	st.w	r7[-8],r12
800244ae:	14 98       	mov	r8,r10
800244b0:	ef 49 ff ec 	st.w	r7[-20],r9
800244b4:	16 99       	mov	r9,r11
800244b6:	ef 69 ff f4 	st.b	r7[-12],r9
800244ba:	ef 68 ff f0 	st.b	r7[-16],r8
    U32 timer;
    
    Assert( dacifb != NULL ); 
    
    timer = ( (timer_us * prescaler_clock_hz)/1000000);
800244be:	ef 39 ff f0 	ld.ub	r9,r7[-16]
800244c2:	ee f8 ff ec 	ld.w	r8,r7[-20]
800244c6:	b1 39       	mul	r9,r8
800244c8:	e0 68 de 83 	mov	r8,56963
800244cc:	ea 18 43 1b 	orh	r8,0x431b
800244d0:	f2 08 06 48 	mulu.d	r8,r9,r8
800244d4:	f2 08 16 12 	lsr	r8,r9,0x12
800244d8:	ef 48 ff fc 	st.w	r7[-4],r8
    // Reload Timer Valuie
    switch(channel)
800244dc:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800244e0:	58 28       	cp.w	r8,2
800244e2:	c0 f0       	breq	80024500 <dacifb_reload_timer+0x5e>
800244e4:	58 38       	cp.w	r8,3
800244e6:	c1 70       	breq	80024514 <dacifb_reload_timer+0x72>
800244e8:	58 18       	cp.w	r8,1
800244ea:	c2 71       	brne	80024538 <dacifb_reload_timer+0x96>
    {
      case DACIFB_CHANNEL_SELECTION_A:
           dacifb->tra = (AVR32_DACIFB_TRA_TRL_MASK)|((timer<<AVR32_DACIFB_TRA_TCD_OFFSET)&AVR32_DACIFB_TRA_TCD_MASK);      
800244ec:	ee f8 ff fc 	ld.w	r8,r7[-4]
800244f0:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
800244f4:	10 99       	mov	r9,r8
800244f6:	bf b9       	sbr	r9,0x1f
800244f8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800244fc:	91 e9       	st.w	r8[0x38],r9
        break;
800244fe:	c1 d8       	rjmp	80024538 <dacifb_reload_timer+0x96>
      case DACIFB_CHANNEL_SELECTION_B:
           dacifb->trb = (AVR32_DACIFB_TRB_TRL_MASK)|((timer<<AVR32_DACIFB_TRB_TCD_OFFSET)&AVR32_DACIFB_TRB_TCD_MASK);  
80024500:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024504:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
80024508:	10 99       	mov	r9,r8
8002450a:	bf b9       	sbr	r9,0x1f
8002450c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80024510:	91 f9       	st.w	r8[0x3c],r9
        break;
80024512:	c1 38       	rjmp	80024538 <dacifb_reload_timer+0x96>
      case DACIFB_CHANNEL_SELECTION_AB:
           dacifb->tra = (AVR32_DACIFB_TRA_TRL_MASK)|((timer<<AVR32_DACIFB_TRA_TCD_OFFSET)&AVR32_DACIFB_TRA_TCD_MASK); 
80024514:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024518:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
8002451c:	10 99       	mov	r9,r8
8002451e:	bf b9       	sbr	r9,0x1f
80024520:	ee f8 ff f8 	ld.w	r8,r7[-8]
80024524:	91 e9       	st.w	r8[0x38],r9
           dacifb->trb = (AVR32_DACIFB_TRB_TRL_MASK)|((timer<<AVR32_DACIFB_TRB_TCD_OFFSET)&AVR32_DACIFB_TRB_TCD_MASK); 
80024526:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002452a:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
8002452e:	10 99       	mov	r9,r8
80024530:	bf b9       	sbr	r9,0x1f
80024532:	ee f8 ff f8 	ld.w	r8,r7[-8]
80024536:	91 f9       	st.w	r8[0x3c],r9
        break;    
    }    
}
80024538:	2f bd       	sub	sp,-20
8002453a:	e3 cd 80 80 	ldm	sp++,r7,pc
	...

80024540 <cpu_irq_save>:
#endif

typedef uint32_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
80024540:	eb cd 40 80 	pushm	r7,lr
80024544:	1a 97       	mov	r7,sp
80024546:	20 1d       	sub	sp,4
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80024548:	e1 b8 00 00 	mfsr	r8,0x0
8002454c:	ef 48 ff fc 	st.w	r7[-4],r8
	cpu_irq_disable();
80024550:	d3 03       	ssrf	0x10

	return flags;
80024552:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80024556:	10 9c       	mov	r12,r8
80024558:	2f fd       	sub	sp,-4
8002455a:	e3 cd 80 80 	ldm	sp++,r7,pc

8002455e <cpu_irq_restore>:
{
	return !(flags & AVR32_SR_GM_MASK);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
8002455e:	eb cd 40 80 	pushm	r7,lr
80024562:	1a 97       	mov	r7,sp
80024564:	20 1d       	sub	sp,4
80024566:	ef 4c ff fc 	st.w	r7[-4],r12
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
8002456a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002456e:	e3 b8 00 00 	mtsr	0x0,r8
#endif
	barrier();
}
80024572:	2f fd       	sub	sp,-4
80024574:	e3 cd 80 80 	ldm	sp++,r7,pc

80024578 <eic_init>:
#include "eic.h"



void eic_init(volatile avr32_eic_t *eic, const eic_options_t *opt, uint32_t nb_lines)
{
80024578:	eb cd 40 80 	pushm	r7,lr
8002457c:	1a 97       	mov	r7,sp
8002457e:	20 4d       	sub	sp,16
80024580:	ef 4c ff f8 	st.w	r7[-8],r12
80024584:	ef 4b ff f4 	st.w	r7[-12],r11
80024588:	ef 4a ff f0 	st.w	r7[-16],r10
	int i;
	for (i = 0; i < nb_lines; i++)
8002458c:	30 08       	mov	r8,0
8002458e:	ef 48 ff fc 	st.w	r7[-4],r8
80024592:	c2 89       	rjmp	800247e2 <eic_init+0x26a>
	{
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
80024594:	ee f9 ff fc 	ld.w	r9,r7[-4]
80024598:	12 98       	mov	r8,r9
8002459a:	a1 78       	lsl	r8,0x1
8002459c:	12 08       	add	r8,r9
8002459e:	a1 78       	lsl	r8,0x1
800245a0:	ee f9 ff f4 	ld.w	r9,r7[-12]
800245a4:	f2 08 00 08 	add	r8,r9,r8
800245a8:	11 99       	ld.ub	r9,r8[0x1]
800245aa:	30 18       	mov	r8,1
800245ac:	f0 09 18 00 	cp.b	r9,r8
800245b0:	c1 51       	brne	800245da <eic_init+0x62>
			? (eic->mode | (1 << opt[i].eic_line))
800245b2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800245b6:	70 5a       	ld.w	r10,r8[0x14]
800245b8:	ee f9 ff fc 	ld.w	r9,r7[-4]
800245bc:	12 98       	mov	r8,r9
800245be:	a1 78       	lsl	r8,0x1
800245c0:	12 08       	add	r8,r9
800245c2:	a1 78       	lsl	r8,0x1
800245c4:	ee f9 ff f4 	ld.w	r9,r7[-12]
800245c8:	f2 08 00 08 	add	r8,r9,r8
800245cc:	11 88       	ld.ub	r8,r8[0x0]
800245ce:	30 19       	mov	r9,1
800245d0:	f2 08 09 48 	lsl	r8,r9,r8
{
	int i;
	for (i = 0; i < nb_lines; i++)
	{
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
800245d4:	f5 e8 10 08 	or	r8,r10,r8
800245d8:	c1 58       	rjmp	80024602 <eic_init+0x8a>
			? (eic->mode | (1 << opt[i].eic_line))
			: (eic->mode & ~(1 << opt[i].eic_line));
800245da:	ee f8 ff f8 	ld.w	r8,r7[-8]
800245de:	70 5a       	ld.w	r10,r8[0x14]
800245e0:	ee f9 ff fc 	ld.w	r9,r7[-4]
800245e4:	12 98       	mov	r8,r9
800245e6:	a1 78       	lsl	r8,0x1
800245e8:	12 08       	add	r8,r9
800245ea:	a1 78       	lsl	r8,0x1
800245ec:	ee f9 ff f4 	ld.w	r9,r7[-12]
800245f0:	f2 08 00 08 	add	r8,r9,r8
800245f4:	11 88       	ld.ub	r8,r8[0x0]
800245f6:	30 19       	mov	r9,1
800245f8:	f2 08 09 48 	lsl	r8,r9,r8
800245fc:	5c d8       	com	r8
{
	int i;
	for (i = 0; i < nb_lines; i++)
	{
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
800245fe:	f5 e8 00 08 	and	r8,r10,r8
80024602:	ee f9 ff f8 	ld.w	r9,r7[-8]
80024606:	93 58       	st.w	r9[0x14],r8
			? (eic->mode | (1 << opt[i].eic_line))
			: (eic->mode & ~(1 << opt[i].eic_line));
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
80024608:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002460c:	12 98       	mov	r8,r9
8002460e:	a1 78       	lsl	r8,0x1
80024610:	12 08       	add	r8,r9
80024612:	a1 78       	lsl	r8,0x1
80024614:	ee f9 ff f4 	ld.w	r9,r7[-12]
80024618:	f2 08 00 08 	add	r8,r9,r8
8002461c:	11 a9       	ld.ub	r9,r8[0x2]
8002461e:	30 18       	mov	r8,1
80024620:	f0 09 18 00 	cp.b	r9,r8
80024624:	c1 51       	brne	8002464e <eic_init+0xd6>
			? (eic->edge | (1 << opt[i].eic_line))
80024626:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002462a:	70 6a       	ld.w	r10,r8[0x18]
8002462c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80024630:	12 98       	mov	r8,r9
80024632:	a1 78       	lsl	r8,0x1
80024634:	12 08       	add	r8,r9
80024636:	a1 78       	lsl	r8,0x1
80024638:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002463c:	f2 08 00 08 	add	r8,r9,r8
80024640:	11 88       	ld.ub	r8,r8[0x0]
80024642:	30 19       	mov	r9,1
80024644:	f2 08 09 48 	lsl	r8,r9,r8
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
			? (eic->mode | (1 << opt[i].eic_line))
			: (eic->mode & ~(1 << opt[i].eic_line));
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
80024648:	f5 e8 10 08 	or	r8,r10,r8
8002464c:	c1 58       	rjmp	80024676 <eic_init+0xfe>
			? (eic->edge | (1 << opt[i].eic_line))
			: (eic->edge & ~(1 << opt[i].eic_line));
8002464e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80024652:	70 6a       	ld.w	r10,r8[0x18]
80024654:	ee f9 ff fc 	ld.w	r9,r7[-4]
80024658:	12 98       	mov	r8,r9
8002465a:	a1 78       	lsl	r8,0x1
8002465c:	12 08       	add	r8,r9
8002465e:	a1 78       	lsl	r8,0x1
80024660:	ee f9 ff f4 	ld.w	r9,r7[-12]
80024664:	f2 08 00 08 	add	r8,r9,r8
80024668:	11 88       	ld.ub	r8,r8[0x0]
8002466a:	30 19       	mov	r9,1
8002466c:	f2 08 09 48 	lsl	r8,r9,r8
80024670:	5c d8       	com	r8
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
			? (eic->mode | (1 << opt[i].eic_line))
			: (eic->mode & ~(1 << opt[i].eic_line));
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
80024672:	f5 e8 00 08 	and	r8,r10,r8
80024676:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002467a:	93 68       	st.w	r9[0x18],r8
			? (eic->edge | (1 << opt[i].eic_line))
			: (eic->edge & ~(1 << opt[i].eic_line));
		// Set up level
		eic->level = (opt[i].eic_level == 1)
8002467c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80024680:	12 98       	mov	r8,r9
80024682:	a1 78       	lsl	r8,0x1
80024684:	12 08       	add	r8,r9
80024686:	a1 78       	lsl	r8,0x1
80024688:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002468c:	f2 08 00 08 	add	r8,r9,r8
80024690:	11 b9       	ld.ub	r9,r8[0x3]
80024692:	30 18       	mov	r8,1
80024694:	f0 09 18 00 	cp.b	r9,r8
80024698:	c1 51       	brne	800246c2 <eic_init+0x14a>
			? (eic->level | (1 << opt[i].eic_line))
8002469a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002469e:	70 7a       	ld.w	r10,r8[0x1c]
800246a0:	ee f9 ff fc 	ld.w	r9,r7[-4]
800246a4:	12 98       	mov	r8,r9
800246a6:	a1 78       	lsl	r8,0x1
800246a8:	12 08       	add	r8,r9
800246aa:	a1 78       	lsl	r8,0x1
800246ac:	ee f9 ff f4 	ld.w	r9,r7[-12]
800246b0:	f2 08 00 08 	add	r8,r9,r8
800246b4:	11 88       	ld.ub	r8,r8[0x0]
800246b6:	30 19       	mov	r9,1
800246b8:	f2 08 09 48 	lsl	r8,r9,r8
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
			? (eic->edge | (1 << opt[i].eic_line))
			: (eic->edge & ~(1 << opt[i].eic_line));
		// Set up level
		eic->level = (opt[i].eic_level == 1)
800246bc:	f5 e8 10 08 	or	r8,r10,r8
800246c0:	c1 58       	rjmp	800246ea <eic_init+0x172>
			? (eic->level | (1 << opt[i].eic_line))
			: (eic->level & ~(1 << opt[i].eic_line));
800246c2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800246c6:	70 7a       	ld.w	r10,r8[0x1c]
800246c8:	ee f9 ff fc 	ld.w	r9,r7[-4]
800246cc:	12 98       	mov	r8,r9
800246ce:	a1 78       	lsl	r8,0x1
800246d0:	12 08       	add	r8,r9
800246d2:	a1 78       	lsl	r8,0x1
800246d4:	ee f9 ff f4 	ld.w	r9,r7[-12]
800246d8:	f2 08 00 08 	add	r8,r9,r8
800246dc:	11 88       	ld.ub	r8,r8[0x0]
800246de:	30 19       	mov	r9,1
800246e0:	f2 08 09 48 	lsl	r8,r9,r8
800246e4:	5c d8       	com	r8
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
			? (eic->edge | (1 << opt[i].eic_line))
			: (eic->edge & ~(1 << opt[i].eic_line));
		// Set up level
		eic->level = (opt[i].eic_level == 1)
800246e6:	f5 e8 00 08 	and	r8,r10,r8
800246ea:	ee f9 ff f8 	ld.w	r9,r7[-8]
800246ee:	93 78       	st.w	r9[0x1c],r8
			? (eic->level | (1 << opt[i].eic_line))
			: (eic->level & ~(1 << opt[i].eic_line));
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
800246f0:	ee f9 ff fc 	ld.w	r9,r7[-4]
800246f4:	12 98       	mov	r8,r9
800246f6:	a1 78       	lsl	r8,0x1
800246f8:	12 08       	add	r8,r9
800246fa:	a1 78       	lsl	r8,0x1
800246fc:	ee f9 ff f4 	ld.w	r9,r7[-12]
80024700:	f2 08 00 08 	add	r8,r9,r8
80024704:	11 c9       	ld.ub	r9,r8[0x4]
80024706:	30 18       	mov	r8,1
80024708:	f0 09 18 00 	cp.b	r9,r8
8002470c:	c1 51       	brne	80024736 <eic_init+0x1be>
			? (eic->filter | (1 << opt[i].eic_line))
8002470e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80024712:	70 8a       	ld.w	r10,r8[0x20]
80024714:	ee f9 ff fc 	ld.w	r9,r7[-4]
80024718:	12 98       	mov	r8,r9
8002471a:	a1 78       	lsl	r8,0x1
8002471c:	12 08       	add	r8,r9
8002471e:	a1 78       	lsl	r8,0x1
80024720:	ee f9 ff f4 	ld.w	r9,r7[-12]
80024724:	f2 08 00 08 	add	r8,r9,r8
80024728:	11 88       	ld.ub	r8,r8[0x0]
8002472a:	30 19       	mov	r9,1
8002472c:	f2 08 09 48 	lsl	r8,r9,r8
		// Set up level
		eic->level = (opt[i].eic_level == 1)
			? (eic->level | (1 << opt[i].eic_line))
			: (eic->level & ~(1 << opt[i].eic_line));
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
80024730:	f5 e8 10 08 	or	r8,r10,r8
80024734:	c1 58       	rjmp	8002475e <eic_init+0x1e6>
			? (eic->filter | (1 << opt[i].eic_line))
			: (eic->filter & ~(1 << opt[i].eic_line));
80024736:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002473a:	70 8a       	ld.w	r10,r8[0x20]
8002473c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80024740:	12 98       	mov	r8,r9
80024742:	a1 78       	lsl	r8,0x1
80024744:	12 08       	add	r8,r9
80024746:	a1 78       	lsl	r8,0x1
80024748:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002474c:	f2 08 00 08 	add	r8,r9,r8
80024750:	11 88       	ld.ub	r8,r8[0x0]
80024752:	30 19       	mov	r9,1
80024754:	f2 08 09 48 	lsl	r8,r9,r8
80024758:	5c d8       	com	r8
		// Set up level
		eic->level = (opt[i].eic_level == 1)
			? (eic->level | (1 << opt[i].eic_line))
			: (eic->level & ~(1 << opt[i].eic_line));
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
8002475a:	f5 e8 00 08 	and	r8,r10,r8
8002475e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80024762:	93 88       	st.w	r9[0x20],r8
			? (eic->filter | (1 << opt[i].eic_line))
			: (eic->filter & ~(1 << opt[i].eic_line));
		// Set up which mode is used : asynchronous mode/ synchronous mode
		eic->async = (opt[i].eic_async == 1)
80024764:	ee f9 ff fc 	ld.w	r9,r7[-4]
80024768:	12 98       	mov	r8,r9
8002476a:	a1 78       	lsl	r8,0x1
8002476c:	12 08       	add	r8,r9
8002476e:	a1 78       	lsl	r8,0x1
80024770:	ee f9 ff f4 	ld.w	r9,r7[-12]
80024774:	f2 08 00 08 	add	r8,r9,r8
80024778:	11 d9       	ld.ub	r9,r8[0x5]
8002477a:	30 18       	mov	r8,1
8002477c:	f0 09 18 00 	cp.b	r9,r8
80024780:	c1 51       	brne	800247aa <eic_init+0x232>
			? (eic->async | (1 << opt[i].eic_line))
80024782:	ee f8 ff f8 	ld.w	r8,r7[-8]
80024786:	70 aa       	ld.w	r10,r8[0x28]
80024788:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002478c:	12 98       	mov	r8,r9
8002478e:	a1 78       	lsl	r8,0x1
80024790:	12 08       	add	r8,r9
80024792:	a1 78       	lsl	r8,0x1
80024794:	ee f9 ff f4 	ld.w	r9,r7[-12]
80024798:	f2 08 00 08 	add	r8,r9,r8
8002479c:	11 88       	ld.ub	r8,r8[0x0]
8002479e:	30 19       	mov	r9,1
800247a0:	f2 08 09 48 	lsl	r8,r9,r8
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
			? (eic->filter | (1 << opt[i].eic_line))
			: (eic->filter & ~(1 << opt[i].eic_line));
		// Set up which mode is used : asynchronous mode/ synchronous mode
		eic->async = (opt[i].eic_async == 1)
800247a4:	f5 e8 10 08 	or	r8,r10,r8
800247a8:	c1 58       	rjmp	800247d2 <eic_init+0x25a>
			? (eic->async | (1 << opt[i].eic_line))
			: (eic->async & ~(1 << opt[i].eic_line));
800247aa:	ee f8 ff f8 	ld.w	r8,r7[-8]
800247ae:	70 aa       	ld.w	r10,r8[0x28]
800247b0:	ee f9 ff fc 	ld.w	r9,r7[-4]
800247b4:	12 98       	mov	r8,r9
800247b6:	a1 78       	lsl	r8,0x1
800247b8:	12 08       	add	r8,r9
800247ba:	a1 78       	lsl	r8,0x1
800247bc:	ee f9 ff f4 	ld.w	r9,r7[-12]
800247c0:	f2 08 00 08 	add	r8,r9,r8
800247c4:	11 88       	ld.ub	r8,r8[0x0]
800247c6:	30 19       	mov	r9,1
800247c8:	f2 08 09 48 	lsl	r8,r9,r8
800247cc:	5c d8       	com	r8
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
			? (eic->filter | (1 << opt[i].eic_line))
			: (eic->filter & ~(1 << opt[i].eic_line));
		// Set up which mode is used : asynchronous mode/ synchronous mode
		eic->async = (opt[i].eic_async == 1)
800247ce:	f5 e8 00 08 	and	r8,r10,r8
800247d2:	ee f9 ff f8 	ld.w	r9,r7[-8]
800247d6:	93 a8       	st.w	r9[0x28],r8


void eic_init(volatile avr32_eic_t *eic, const eic_options_t *opt, uint32_t nb_lines)
{
	int i;
	for (i = 0; i < nb_lines; i++)
800247d8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800247dc:	2f f8       	sub	r8,-1
800247de:	ef 48 ff fc 	st.w	r7[-4],r8
800247e2:	ee f9 ff fc 	ld.w	r9,r7[-4]
800247e6:	ee f8 ff f0 	ld.w	r8,r7[-16]
800247ea:	10 39       	cp.w	r9,r8
800247ec:	fe 93 fe d4 	brlo	80024594 <eic_init+0x1c>
		// Set up which mode is used : asynchronous mode/ synchronous mode
		eic->async = (opt[i].eic_async == 1)
			? (eic->async | (1 << opt[i].eic_line))
			: (eic->async & ~(1 << opt[i].eic_line));
	}
}
800247f0:	2f cd       	sub	sp,-16
800247f2:	e3 cd 80 80 	ldm	sp++,r7,pc

800247f6 <eic_enable_lines>:

void eic_enable_lines(volatile avr32_eic_t *eic, uint32_t mask_lines)
{
800247f6:	eb cd 40 80 	pushm	r7,lr
800247fa:	1a 97       	mov	r7,sp
800247fc:	20 2d       	sub	sp,8
800247fe:	ef 4c ff fc 	st.w	r7[-4],r12
80024802:	ef 4b ff f8 	st.w	r7[-8],r11
	eic->en = mask_lines;
80024806:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002480a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002480e:	91 c9       	st.w	r8[0x30],r9
}
80024810:	2f ed       	sub	sp,-8
80024812:	e3 cd 80 80 	ldm	sp++,r7,pc

80024816 <eic_enable_line>:

void eic_enable_line(volatile avr32_eic_t *eic, uint32_t line_number)
{
80024816:	eb cd 40 80 	pushm	r7,lr
8002481a:	1a 97       	mov	r7,sp
8002481c:	20 2d       	sub	sp,8
8002481e:	ef 4c ff fc 	st.w	r7[-4],r12
80024822:	ef 4b ff f8 	st.w	r7[-8],r11
	// Enable line line_number
	eic->en = 1 << line_number;
80024826:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002482a:	30 19       	mov	r9,1
8002482c:	f2 08 09 48 	lsl	r8,r9,r8
80024830:	10 99       	mov	r9,r8
80024832:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024836:	91 c9       	st.w	r8[0x30],r9
}
80024838:	2f ed       	sub	sp,-8
8002483a:	e3 cd 80 80 	ldm	sp++,r7,pc

8002483e <eic_disable_lines>:

void eic_disable_lines(volatile avr32_eic_t *eic, uint32_t mask_lines)
{
8002483e:	eb cd 40 80 	pushm	r7,lr
80024842:	1a 97       	mov	r7,sp
80024844:	20 2d       	sub	sp,8
80024846:	ef 4c ff fc 	st.w	r7[-4],r12
8002484a:	ef 4b ff f8 	st.w	r7[-8],r11
	eic->dis = mask_lines;
8002484e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024852:	ee f9 ff f8 	ld.w	r9,r7[-8]
80024856:	91 d9       	st.w	r8[0x34],r9
}
80024858:	2f ed       	sub	sp,-8
8002485a:	e3 cd 80 80 	ldm	sp++,r7,pc

8002485e <eic_disable_line>:

void eic_disable_line(volatile avr32_eic_t *eic, uint32_t line_number)
{
8002485e:	eb cd 40 80 	pushm	r7,lr
80024862:	1a 97       	mov	r7,sp
80024864:	20 2d       	sub	sp,8
80024866:	ef 4c ff fc 	st.w	r7[-4],r12
8002486a:	ef 4b ff f8 	st.w	r7[-8],r11
	// Disable line line_number
	eic->dis = 1 << line_number;
8002486e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80024872:	30 19       	mov	r9,1
80024874:	f2 08 09 48 	lsl	r8,r9,r8
80024878:	10 99       	mov	r9,r8
8002487a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002487e:	91 d9       	st.w	r8[0x34],r9
}
80024880:	2f ed       	sub	sp,-8
80024882:	e3 cd 80 80 	ldm	sp++,r7,pc

80024886 <eic_is_line_enabled>:

bool eic_is_line_enabled(volatile avr32_eic_t *eic, uint32_t line_number)
{
80024886:	eb cd 40 80 	pushm	r7,lr
8002488a:	1a 97       	mov	r7,sp
8002488c:	20 2d       	sub	sp,8
8002488e:	ef 4c ff fc 	st.w	r7[-4],r12
80024892:	ef 4b ff f8 	st.w	r7[-8],r11
	return (eic->ctrl & (1 << line_number)) != 0;
80024896:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002489a:	70 e9       	ld.w	r9,r8[0x38]
8002489c:	ee f8 ff f8 	ld.w	r8,r7[-8]
800248a0:	30 1a       	mov	r10,1
800248a2:	f4 08 09 48 	lsl	r8,r10,r8
800248a6:	f3 e8 00 08 	and	r8,r9,r8
800248aa:	5f 18       	srne	r8
800248ac:	5c 58       	castu.b	r8
}
800248ae:	10 9c       	mov	r12,r8
800248b0:	2f ed       	sub	sp,-8
800248b2:	e3 cd 80 80 	ldm	sp++,r7,pc

800248b6 <eic_enable_interrupt_lines>:

void eic_enable_interrupt_lines(volatile avr32_eic_t *eic, uint32_t mask_lines)
{
800248b6:	eb cd 40 80 	pushm	r7,lr
800248ba:	1a 97       	mov	r7,sp
800248bc:	20 2d       	sub	sp,8
800248be:	ef 4c ff fc 	st.w	r7[-4],r12
800248c2:	ef 4b ff f8 	st.w	r7[-8],r11
	eic->ier = mask_lines;
800248c6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800248ca:	ee f9 ff f8 	ld.w	r9,r7[-8]
800248ce:	91 09       	st.w	r8[0x0],r9
}
800248d0:	2f ed       	sub	sp,-8
800248d2:	e3 cd 80 80 	ldm	sp++,r7,pc

800248d6 <eic_enable_interrupt_line>:

void eic_enable_interrupt_line(volatile avr32_eic_t *eic, uint32_t line_number)
{
800248d6:	eb cd 40 80 	pushm	r7,lr
800248da:	1a 97       	mov	r7,sp
800248dc:	20 2d       	sub	sp,8
800248de:	ef 4c ff fc 	st.w	r7[-4],r12
800248e2:	ef 4b ff f8 	st.w	r7[-8],r11
	// Enable line line_number
	eic->ier = 1 << line_number;
800248e6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800248ea:	30 19       	mov	r9,1
800248ec:	f2 08 09 48 	lsl	r8,r9,r8
800248f0:	10 99       	mov	r9,r8
800248f2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800248f6:	91 09       	st.w	r8[0x0],r9
}
800248f8:	2f ed       	sub	sp,-8
800248fa:	e3 cd 80 80 	ldm	sp++,r7,pc

800248fe <eic_disable_interrupt_lines>:

void eic_disable_interrupt_lines(volatile avr32_eic_t *eic, uint32_t mask_lines)
{
800248fe:	eb cd 40 c0 	pushm	r6-r7,lr
80024902:	1a 97       	mov	r7,sp
80024904:	20 3d       	sub	sp,12
80024906:	48 d6       	lddpc	r6,80024938 <eic_disable_interrupt_lines+0x3a>
80024908:	1e 26       	rsub	r6,pc
8002490a:	ef 4c ff f8 	st.w	r7[-8],r12
8002490e:	ef 4b ff f4 	st.w	r7[-12],r11
	irqflags_t flags;
	flags = cpu_irq_save();
80024912:	c1 7e       	rcall	80024540 <cpu_irq_save>
80024914:	18 98       	mov	r8,r12
80024916:	ef 48 ff fc 	st.w	r7[-4],r8
	eic->idr = mask_lines;
8002491a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002491e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80024922:	91 19       	st.w	r8[0x4],r9
	eic->imr;
80024924:	ee f8 ff f8 	ld.w	r8,r7[-8]
80024928:	70 28       	ld.w	r8,r8[0x8]
	cpu_irq_restore(flags);
8002492a:	ee fc ff fc 	ld.w	r12,r7[-4]
8002492e:	c1 8e       	rcall	8002455e <cpu_irq_restore>
}
80024930:	2f dd       	sub	sp,-12
80024932:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80024936:	00 00       	add	r0,r0
80024938:	80 02       	ld.sh	r2,r0[0x0]
8002493a:	47 8c       	lddsp	r12,sp[0x1e0]

8002493c <eic_disable_interrupt_line>:

void eic_disable_interrupt_line(volatile avr32_eic_t *eic, uint32_t line_number)
{
8002493c:	eb cd 40 c0 	pushm	r6-r7,lr
80024940:	1a 97       	mov	r7,sp
80024942:	20 3d       	sub	sp,12
80024944:	48 f6       	lddpc	r6,80024980 <eic_disable_interrupt_line+0x44>
80024946:	1e 26       	rsub	r6,pc
80024948:	ef 4c ff f8 	st.w	r7[-8],r12
8002494c:	ef 4b ff f4 	st.w	r7[-12],r11
	irqflags_t flags;
	flags = cpu_irq_save();
80024950:	fe b0 fd f8 	rcall	80024540 <cpu_irq_save>
80024954:	18 98       	mov	r8,r12
80024956:	ef 48 ff fc 	st.w	r7[-4],r8
	eic->idr = 1 << line_number;
8002495a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002495e:	30 19       	mov	r9,1
80024960:	f2 08 09 48 	lsl	r8,r9,r8
80024964:	10 99       	mov	r9,r8
80024966:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002496a:	91 19       	st.w	r8[0x4],r9
	eic->imr;
8002496c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80024970:	70 28       	ld.w	r8,r8[0x8]
	cpu_irq_restore(flags);
80024972:	ee fc ff fc 	ld.w	r12,r7[-4]
80024976:	fe b0 fd f4 	rcall	8002455e <cpu_irq_restore>
}
8002497a:	2f dd       	sub	sp,-12
8002497c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80024980:	80 02       	ld.sh	r2,r0[0x0]
80024982:	47 ca       	lddsp	r10,sp[0x1f0]

80024984 <eic_is_interrupt_line_enabled>:

bool eic_is_interrupt_line_enabled(volatile avr32_eic_t *eic, uint32_t line_number)
{
80024984:	eb cd 40 80 	pushm	r7,lr
80024988:	1a 97       	mov	r7,sp
8002498a:	20 2d       	sub	sp,8
8002498c:	ef 4c ff fc 	st.w	r7[-4],r12
80024990:	ef 4b ff f8 	st.w	r7[-8],r11
	return (eic->imr & (1 << line_number)) != 0;
80024994:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024998:	70 29       	ld.w	r9,r8[0x8]
8002499a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002499e:	30 1a       	mov	r10,1
800249a0:	f4 08 09 48 	lsl	r8,r10,r8
800249a4:	f3 e8 00 08 	and	r8,r9,r8
800249a8:	5f 18       	srne	r8
800249aa:	5c 58       	castu.b	r8
}
800249ac:	10 9c       	mov	r12,r8
800249ae:	2f ed       	sub	sp,-8
800249b0:	e3 cd 80 80 	ldm	sp++,r7,pc

800249b4 <eic_clear_interrupt_lines>:

void eic_clear_interrupt_lines(volatile avr32_eic_t *eic, uint32_t mask_lines)
{
800249b4:	eb cd 40 c0 	pushm	r6-r7,lr
800249b8:	1a 97       	mov	r7,sp
800249ba:	20 3d       	sub	sp,12
800249bc:	48 d6       	lddpc	r6,800249f0 <eic_clear_interrupt_lines+0x3c>
800249be:	1e 26       	rsub	r6,pc
800249c0:	ef 4c ff f8 	st.w	r7[-8],r12
800249c4:	ef 4b ff f4 	st.w	r7[-12],r11
	irqflags_t flags;
	flags = cpu_irq_save();
800249c8:	fe b0 fd bc 	rcall	80024540 <cpu_irq_save>
800249cc:	18 98       	mov	r8,r12
800249ce:	ef 48 ff fc 	st.w	r7[-4],r8
	eic->icr = mask_lines;
800249d2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800249d6:	ee f9 ff f4 	ld.w	r9,r7[-12]
800249da:	91 49       	st.w	r8[0x10],r9
	eic->isr;
800249dc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800249e0:	70 38       	ld.w	r8,r8[0xc]
	cpu_irq_restore(flags);
800249e2:	ee fc ff fc 	ld.w	r12,r7[-4]
800249e6:	fe b0 fd bc 	rcall	8002455e <cpu_irq_restore>
}
800249ea:	2f dd       	sub	sp,-12
800249ec:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800249f0:	80 02       	ld.sh	r2,r0[0x0]
800249f2:	48 42       	lddpc	r2,80024a00 <eic_clear_interrupt_line+0xc>

800249f4 <eic_clear_interrupt_line>:

void eic_clear_interrupt_line(volatile avr32_eic_t *eic, uint32_t line_number)
{
800249f4:	eb cd 40 c0 	pushm	r6-r7,lr
800249f8:	1a 97       	mov	r7,sp
800249fa:	20 3d       	sub	sp,12
800249fc:	48 f6       	lddpc	r6,80024a38 <eic_clear_interrupt_line+0x44>
800249fe:	1e 26       	rsub	r6,pc
80024a00:	ef 4c ff f8 	st.w	r7[-8],r12
80024a04:	ef 4b ff f4 	st.w	r7[-12],r11
	irqflags_t flags;
	flags = cpu_irq_save();
80024a08:	fe b0 fd 9c 	rcall	80024540 <cpu_irq_save>
80024a0c:	18 98       	mov	r8,r12
80024a0e:	ef 48 ff fc 	st.w	r7[-4],r8
	eic->icr = 1 << line_number;
80024a12:	ee f8 ff f4 	ld.w	r8,r7[-12]
80024a16:	30 19       	mov	r9,1
80024a18:	f2 08 09 48 	lsl	r8,r9,r8
80024a1c:	10 99       	mov	r9,r8
80024a1e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80024a22:	91 49       	st.w	r8[0x10],r9
	eic->isr;
80024a24:	ee f8 ff f8 	ld.w	r8,r7[-8]
80024a28:	70 38       	ld.w	r8,r8[0xc]
	cpu_irq_restore(flags);
80024a2a:	ee fc ff fc 	ld.w	r12,r7[-4]
80024a2e:	fe b0 fd 98 	rcall	8002455e <cpu_irq_restore>
}
80024a32:	2f dd       	sub	sp,-12
80024a34:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80024a38:	80 02       	ld.sh	r2,r0[0x0]
80024a3a:	48 82       	lddpc	r2,80024a58 <eic_is_interrupt_line_pending+0x1c>

80024a3c <eic_is_interrupt_line_pending>:

bool eic_is_interrupt_line_pending(volatile avr32_eic_t *eic, uint32_t line_number)
{
80024a3c:	eb cd 40 80 	pushm	r7,lr
80024a40:	1a 97       	mov	r7,sp
80024a42:	20 2d       	sub	sp,8
80024a44:	ef 4c ff fc 	st.w	r7[-4],r12
80024a48:	ef 4b ff f8 	st.w	r7[-8],r11
	return (eic->isr & (1 << line_number)) != 0;
80024a4c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024a50:	70 39       	ld.w	r9,r8[0xc]
80024a52:	ee f8 ff f8 	ld.w	r8,r7[-8]
80024a56:	30 1a       	mov	r10,1
80024a58:	f4 08 09 48 	lsl	r8,r10,r8
80024a5c:	f3 e8 00 08 	and	r8,r9,r8
80024a60:	5f 18       	srne	r8
80024a62:	5c 58       	castu.b	r8
}
80024a64:	10 9c       	mov	r12,r8
80024a66:	2f ed       	sub	sp,-8
80024a68:	e3 cd 80 80 	ldm	sp++,r7,pc

80024a6c <flashc_get_flash_size>:
 */
//! @{


unsigned int flashc_get_flash_size(void)
{
80024a6c:	eb cd 40 c0 	pushm	r6-r7,lr
80024a70:	1a 97       	mov	r7,sp
80024a72:	48 86       	lddpc	r6,80024a90 <flashc_get_flash_size+0x24>
80024a74:	1e 26       	rsub	r6,pc
     512 << 10,
     768 << 10,
    1024 << 10,
    2048 << 10      
  };
  return FLASH_SIZE[(AVR32_FLASHC.pr & AVR32_FLASHC_PR_FSZ_MASK) >> AVR32_FLASHC_PR_FSZ_OFFSET];
80024a76:	fe 68 00 00 	mov	r8,-131072
80024a7a:	70 38       	ld.w	r8,r8[0xc]
80024a7c:	f3 d8 c0 04 	bfextu	r9,r8,0x0,0x4
80024a80:	ec f8 08 74 	ld.w	r8,r6[2164]
80024a84:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
     768 << 10,
    1024 << 10
  };
  return FLASH_SIZE[(AVR32_FLASHC.fsr & AVR32_FLASHC_FSR_FSZ_MASK) >> AVR32_FLASHC_FSR_FSZ_OFFSET];
#endif  
}
80024a88:	10 9c       	mov	r12,r8
80024a8a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80024a8e:	00 00       	add	r0,r0
80024a90:	80 02       	ld.sh	r2,r0[0x0]
80024a92:	48 f8       	lddpc	r8,80024acc <flashc_get_page_region>

80024a94 <flashc_get_page_count>:


unsigned int flashc_get_page_count(void)
{
80024a94:	eb cd 40 c0 	pushm	r6-r7,lr
80024a98:	1a 97       	mov	r7,sp
80024a9a:	48 56       	lddpc	r6,80024aac <flashc_get_page_count+0x18>
80024a9c:	1e 26       	rsub	r6,pc
  return flashc_get_flash_size() / AVR32_FLASHC_PAGE_SIZE;
80024a9e:	f0 16 00 bd 	mcall	r6[756]
80024aa2:	18 98       	mov	r8,r12
80024aa4:	a9 98       	lsr	r8,0x9
}
80024aa6:	10 9c       	mov	r12,r8
80024aa8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80024aac:	80 02       	ld.sh	r2,r0[0x0]
80024aae:	49 20       	lddpc	r0,80024af4 <flashc_get_page_region+0x28>

80024ab0 <flashc_get_page_count_per_region>:


unsigned int flashc_get_page_count_per_region(void)
{
80024ab0:	eb cd 40 c0 	pushm	r6-r7,lr
80024ab4:	1a 97       	mov	r7,sp
80024ab6:	48 56       	lddpc	r6,80024ac8 <flashc_get_page_count_per_region+0x18>
80024ab8:	1e 26       	rsub	r6,pc
  return flashc_get_page_count() / AVR32_FLASHC_REGIONS;
80024aba:	f0 16 00 fc 	mcall	r6[1008]
80024abe:	18 98       	mov	r8,r12
80024ac0:	a5 88       	lsr	r8,0x4
}
80024ac2:	10 9c       	mov	r12,r8
80024ac4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80024ac8:	80 02       	ld.sh	r2,r0[0x0]
80024aca:	49 3c       	lddpc	r12,80024b14 <flashc_get_region_first_page_number+0xc>

80024acc <flashc_get_page_region>:


unsigned int flashc_get_page_region(int page_number)
{
80024acc:	eb cd 40 e0 	pushm	r5-r7,lr
80024ad0:	1a 97       	mov	r7,sp
80024ad2:	20 1d       	sub	sp,4
80024ad4:	48 c6       	lddpc	r6,80024b04 <flashc_get_page_region+0x38>
80024ad6:	1e 26       	rsub	r6,pc
80024ad8:	ef 4c ff fc 	st.w	r7[-4],r12
  return ((page_number >= 0) ? page_number : flashc_get_page_number()) / flashc_get_page_count_per_region();
80024adc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024ae0:	58 08       	cp.w	r8,0
80024ae2:	c0 45       	brlt	80024aea <flashc_get_page_region+0x1e>
80024ae4:	ee f5 ff fc 	ld.w	r5,r7[-4]
80024ae8:	c0 58       	rjmp	80024af2 <flashc_get_page_region+0x26>
80024aea:	f0 16 01 80 	mcall	r6[1536]
80024aee:	18 98       	mov	r8,r12
80024af0:	10 95       	mov	r5,r8
80024af2:	f0 16 01 0b 	mcall	r6[1068]
80024af6:	18 98       	mov	r8,r12
80024af8:	ea 08 0d 08 	divu	r8,r5,r8
}
80024afc:	10 9c       	mov	r12,r8
80024afe:	2f fd       	sub	sp,-4
80024b00:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80024b04:	80 02       	ld.sh	r2,r0[0x0]
80024b06:	49 5a       	lddpc	r10,80024b58 <flashc_set_wait_state+0xc>

80024b08 <flashc_get_region_first_page_number>:


unsigned int flashc_get_region_first_page_number(unsigned int region)
{
80024b08:	eb cd 40 c0 	pushm	r6-r7,lr
80024b0c:	1a 97       	mov	r7,sp
80024b0e:	20 1d       	sub	sp,4
80024b10:	48 86       	lddpc	r6,80024b30 <flashc_get_region_first_page_number+0x28>
80024b12:	1e 26       	rsub	r6,pc
80024b14:	ef 4c ff fc 	st.w	r7[-4],r12
  return region * flashc_get_page_count_per_region();
80024b18:	f0 16 01 0b 	mcall	r6[1068]
80024b1c:	18 99       	mov	r9,r12
80024b1e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024b22:	f2 08 02 48 	mul	r8,r9,r8
}
80024b26:	10 9c       	mov	r12,r8
80024b28:	2f fd       	sub	sp,-4
80024b2a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80024b2e:	00 00       	add	r0,r0
80024b30:	80 02       	ld.sh	r2,r0[0x0]
80024b32:	49 96       	lddpc	r6,80024b94 <flashc_set_bus_freq+0x2>

80024b34 <flashc_get_wait_state>:
 */
//! @{


unsigned int flashc_get_wait_state(void)
{
80024b34:	eb cd 40 80 	pushm	r7,lr
80024b38:	1a 97       	mov	r7,sp
  return (AVR32_FLASHC.fcr & AVR32_FLASHC_FCR_FWS_MASK) >> AVR32_FLASHC_FCR_FWS_OFFSET;
80024b3a:	fe 68 00 00 	mov	r8,-131072
80024b3e:	70 08       	ld.w	r8,r8[0x0]
80024b40:	e2 18 00 40 	andl	r8,0x40,COH
80024b44:	a7 88       	lsr	r8,0x6
}
80024b46:	10 9c       	mov	r12,r8
80024b48:	e3 cd 80 80 	ldm	sp++,r7,pc

80024b4c <flashc_set_wait_state>:


void flashc_set_wait_state(unsigned int wait_state)
{
80024b4c:	eb cd 40 80 	pushm	r7,lr
80024b50:	1a 97       	mov	r7,sp
80024b52:	20 2d       	sub	sp,8
80024b54:	ef 4c ff f8 	st.w	r7[-8],r12
  u_avr32_flashc_fcr_t u_avr32_flashc_fcr = {AVR32_FLASHC.fcr};
80024b58:	fe 68 00 00 	mov	r8,-131072
80024b5c:	70 08       	ld.w	r8,r8[0x0]
80024b5e:	30 09       	mov	r9,0
80024b60:	ef 49 ff fc 	st.w	r7[-4],r9
80024b64:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_flashc_fcr.FCR.fws = wait_state;
80024b68:	ee f8 ff f8 	ld.w	r8,r7[-8]
80024b6c:	5c 58       	castu.b	r8
80024b6e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80024b72:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80024b76:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024b7a:	f1 d9 d0 c1 	bfins	r8,r9,0x6,0x1
80024b7e:	ef 48 ff fc 	st.w	r7[-4],r8
  AVR32_FLASHC.fcr = u_avr32_flashc_fcr.fcr;
80024b82:	fe 68 00 00 	mov	r8,-131072
80024b86:	ee f9 ff fc 	ld.w	r9,r7[-4]
80024b8a:	91 09       	st.w	r8[0x0],r9
}
80024b8c:	2f ed       	sub	sp,-8
80024b8e:	e3 cd 80 80 	ldm	sp++,r7,pc

80024b92 <flashc_set_bus_freq>:


void flashc_set_bus_freq(unsigned int cpu_f_hz)
{
80024b92:	eb cd 40 c0 	pushm	r6-r7,lr
80024b96:	1a 97       	mov	r7,sp
80024b98:	20 1d       	sub	sp,4
80024b9a:	48 c6       	lddpc	r6,80024bc8 <flashc_set_bus_freq+0x36>
80024b9c:	1e 26       	rsub	r6,pc
80024b9e:	ef 4c ff fc 	st.w	r7[-4],r12
  if(cpu_f_hz >= AVR32_FLASHC_FWS_0_MAX_FREQ)
80024ba2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024ba6:	e0 69 8a 3f 	mov	r9,35391
80024baa:	ea 19 01 f7 	orh	r9,0x1f7
80024bae:	12 38       	cp.w	r8,r9
80024bb0:	e0 88 00 06 	brls	80024bbc <flashc_set_bus_freq+0x2a>
  {
    // Set 1 WS.
    flashc_set_wait_state(1);
80024bb4:	30 1c       	mov	r12,1
80024bb6:	f0 16 00 91 	mcall	r6[580]
80024bba:	c0 48       	rjmp	80024bc2 <flashc_set_bus_freq+0x30>
  }
  else
  {
    // Set 0 WS.
    flashc_set_wait_state(0);
80024bbc:	30 0c       	mov	r12,0
80024bbe:	f0 16 00 91 	mcall	r6[580]
  }
}
80024bc2:	2f fd       	sub	sp,-4
80024bc4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80024bc8:	80 02       	ld.sh	r2,r0[0x0]
80024bca:	4a 20       	lddpc	r0,80024c50 <flashc_enable_lock_error_int+0x14>

80024bcc <flashc_is_ready_int_enabled>:

bool flashc_is_ready_int_enabled(void)
{
80024bcc:	eb cd 40 80 	pushm	r7,lr
80024bd0:	1a 97       	mov	r7,sp
  return ((AVR32_FLASHC.fcr & AVR32_FLASHC_FCR_FRDY_MASK) != 0);
80024bd2:	fe 68 00 00 	mov	r8,-131072
80024bd6:	70 08       	ld.w	r8,r8[0x0]
80024bd8:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80024bdc:	5c 58       	castu.b	r8
}
80024bde:	10 9c       	mov	r12,r8
80024be0:	e3 cd 80 80 	ldm	sp++,r7,pc

80024be4 <flashc_enable_ready_int>:


void flashc_enable_ready_int(bool enable)
{
80024be4:	eb cd 40 80 	pushm	r7,lr
80024be8:	1a 97       	mov	r7,sp
80024bea:	20 2d       	sub	sp,8
80024bec:	18 98       	mov	r8,r12
80024bee:	ef 68 ff f8 	st.b	r7[-8],r8
  u_avr32_flashc_fcr_t u_avr32_flashc_fcr = {AVR32_FLASHC.fcr};
80024bf2:	fe 68 00 00 	mov	r8,-131072
80024bf6:	70 08       	ld.w	r8,r8[0x0]
80024bf8:	30 09       	mov	r9,0
80024bfa:	ef 49 ff fc 	st.w	r7[-4],r9
80024bfe:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_flashc_fcr.FCR.frdy = (enable != false);
80024c02:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024c06:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80024c0a:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
80024c0e:	ef 48 ff fc 	st.w	r7[-4],r8
  AVR32_FLASHC.fcr = u_avr32_flashc_fcr.fcr;
80024c12:	fe 68 00 00 	mov	r8,-131072
80024c16:	ee f9 ff fc 	ld.w	r9,r7[-4]
80024c1a:	91 09       	st.w	r8[0x0],r9
}
80024c1c:	2f ed       	sub	sp,-8
80024c1e:	e3 cd 80 80 	ldm	sp++,r7,pc

80024c22 <flashc_is_lock_error_int_enabled>:


bool flashc_is_lock_error_int_enabled(void)
{
80024c22:	eb cd 40 80 	pushm	r7,lr
80024c26:	1a 97       	mov	r7,sp
  return ((AVR32_FLASHC.fcr & AVR32_FLASHC_FCR_LOCKE_MASK) != 0);
80024c28:	fe 68 00 00 	mov	r8,-131072
80024c2c:	70 08       	ld.w	r8,r8[0x0]
80024c2e:	e2 18 00 04 	andl	r8,0x4,COH
80024c32:	5f 18       	srne	r8
80024c34:	5c 58       	castu.b	r8
}
80024c36:	10 9c       	mov	r12,r8
80024c38:	e3 cd 80 80 	ldm	sp++,r7,pc

80024c3c <flashc_enable_lock_error_int>:


void flashc_enable_lock_error_int(bool enable)
{
80024c3c:	eb cd 40 80 	pushm	r7,lr
80024c40:	1a 97       	mov	r7,sp
80024c42:	20 2d       	sub	sp,8
80024c44:	18 98       	mov	r8,r12
80024c46:	ef 68 ff f8 	st.b	r7[-8],r8
  u_avr32_flashc_fcr_t u_avr32_flashc_fcr = {AVR32_FLASHC.fcr};
80024c4a:	fe 68 00 00 	mov	r8,-131072
80024c4e:	70 08       	ld.w	r8,r8[0x0]
80024c50:	30 09       	mov	r9,0
80024c52:	ef 49 ff fc 	st.w	r7[-4],r9
80024c56:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_flashc_fcr.FCR.locke = (enable != false);
80024c5a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024c5e:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80024c62:	f1 d9 d0 41 	bfins	r8,r9,0x2,0x1
80024c66:	ef 48 ff fc 	st.w	r7[-4],r8
  AVR32_FLASHC.fcr = u_avr32_flashc_fcr.fcr;
80024c6a:	fe 68 00 00 	mov	r8,-131072
80024c6e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80024c72:	91 09       	st.w	r8[0x0],r9
}
80024c74:	2f ed       	sub	sp,-8
80024c76:	e3 cd 80 80 	ldm	sp++,r7,pc

80024c7a <flashc_is_prog_error_int_enabled>:


bool flashc_is_prog_error_int_enabled(void)
{
80024c7a:	eb cd 40 80 	pushm	r7,lr
80024c7e:	1a 97       	mov	r7,sp
  return ((AVR32_FLASHC.fcr & AVR32_FLASHC_FCR_PROGE_MASK) != 0);
80024c80:	fe 68 00 00 	mov	r8,-131072
80024c84:	70 08       	ld.w	r8,r8[0x0]
80024c86:	e2 18 00 08 	andl	r8,0x8,COH
80024c8a:	5f 18       	srne	r8
80024c8c:	5c 58       	castu.b	r8
}
80024c8e:	10 9c       	mov	r12,r8
80024c90:	e3 cd 80 80 	ldm	sp++,r7,pc

80024c94 <flashc_enable_prog_error_int>:


void flashc_enable_prog_error_int(bool enable)
{
80024c94:	eb cd 40 80 	pushm	r7,lr
80024c98:	1a 97       	mov	r7,sp
80024c9a:	20 2d       	sub	sp,8
80024c9c:	18 98       	mov	r8,r12
80024c9e:	ef 68 ff f8 	st.b	r7[-8],r8
  u_avr32_flashc_fcr_t u_avr32_flashc_fcr = {AVR32_FLASHC.fcr};
80024ca2:	fe 68 00 00 	mov	r8,-131072
80024ca6:	70 08       	ld.w	r8,r8[0x0]
80024ca8:	30 09       	mov	r9,0
80024caa:	ef 49 ff fc 	st.w	r7[-4],r9
80024cae:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_flashc_fcr.FCR.proge = (enable != false);
80024cb2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024cb6:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80024cba:	f1 d9 d0 61 	bfins	r8,r9,0x3,0x1
80024cbe:	ef 48 ff fc 	st.w	r7[-4],r8
  AVR32_FLASHC.fcr = u_avr32_flashc_fcr.fcr;
80024cc2:	fe 68 00 00 	mov	r8,-131072
80024cc6:	ee f9 ff fc 	ld.w	r9,r7[-4]
80024cca:	91 09       	st.w	r8[0x0],r9
}
80024ccc:	2f ed       	sub	sp,-8
80024cce:	e3 cd 80 80 	ldm	sp++,r7,pc

80024cd2 <flashc_is_ready>:
 */
//! @{


bool flashc_is_ready(void)
{
80024cd2:	eb cd 40 80 	pushm	r7,lr
80024cd6:	1a 97       	mov	r7,sp
  return ((AVR32_FLASHC.fsr & AVR32_FLASHC_FSR_FRDY_MASK) != 0);
80024cd8:	fe 68 00 00 	mov	r8,-131072
80024cdc:	70 28       	ld.w	r8,r8[0x8]
80024cde:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80024ce2:	5c 58       	castu.b	r8
}
80024ce4:	10 9c       	mov	r12,r8
80024ce6:	e3 cd 80 80 	ldm	sp++,r7,pc

80024cea <flashc_default_wait_until_ready>:


void flashc_default_wait_until_ready(void)
{
80024cea:	eb cd 40 c0 	pushm	r6-r7,lr
80024cee:	1a 97       	mov	r7,sp
80024cf0:	48 66       	lddpc	r6,80024d08 <flashc_default_wait_until_ready+0x1e>
80024cf2:	1e 26       	rsub	r6,pc
  while (!flashc_is_ready());
80024cf4:	f0 16 01 a1 	mcall	r6[1668]
80024cf8:	18 98       	mov	r8,r12
80024cfa:	ec 18 00 01 	eorl	r8,0x1
80024cfe:	5c 58       	castu.b	r8
80024d00:	cf a1       	brne	80024cf4 <flashc_default_wait_until_ready+0xa>
}
80024d02:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80024d06:	00 00       	add	r0,r0
80024d08:	80 02       	ld.sh	r2,r0[0x0]
80024d0a:	4b 76       	lddpc	r6,80024de4 <flashc_issue_command+0x4a>

80024d0c <flashc_get_error_status>:
 *          Flash Status Register (FSR). This function is therefore not part of
 *          the driver's API which instead presents \ref flashc_is_lock_error
 *          and \ref flashc_is_programming_error.
 */
static unsigned int flashc_get_error_status(void)
{
80024d0c:	eb cd 40 80 	pushm	r7,lr
80024d10:	1a 97       	mov	r7,sp
  return AVR32_FLASHC.fsr & (AVR32_FLASHC_FSR_LOCKE_MASK |
80024d12:	fe 68 00 00 	mov	r8,-131072
80024d16:	70 28       	ld.w	r8,r8[0x8]
80024d18:	e2 18 00 0c 	andl	r8,0xc,COH
                             AVR32_FLASHC_FSR_PROGE_MASK);
}
80024d1c:	10 9c       	mov	r12,r8
80024d1e:	e3 cd 80 80 	ldm	sp++,r7,pc

80024d22 <flashc_is_lock_error>:
//! by a function.
static unsigned int flashc_error_status = 0;


bool flashc_is_lock_error(void)
{
80024d22:	eb cd 40 c0 	pushm	r6-r7,lr
80024d26:	1a 97       	mov	r7,sp
80024d28:	48 66       	lddpc	r6,80024d40 <flashc_is_lock_error+0x1e>
80024d2a:	1e 26       	rsub	r6,pc
  return ((flashc_error_status & AVR32_FLASHC_FSR_LOCKE_MASK) != 0);
80024d2c:	ec f8 00 54 	ld.w	r8,r6[84]
80024d30:	70 08       	ld.w	r8,r8[0x0]
80024d32:	e2 18 00 04 	andl	r8,0x4,COH
80024d36:	5f 18       	srne	r8
80024d38:	5c 58       	castu.b	r8
}
80024d3a:	10 9c       	mov	r12,r8
80024d3c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80024d40:	80 02       	ld.sh	r2,r0[0x0]
80024d42:	4b ae       	lddpc	lr,80024e28 <flashc_no_operation+0x4>

80024d44 <flashc_is_programming_error>:


bool flashc_is_programming_error(void)
{
80024d44:	eb cd 40 c0 	pushm	r6-r7,lr
80024d48:	1a 97       	mov	r7,sp
80024d4a:	48 76       	lddpc	r6,80024d64 <flashc_is_programming_error+0x20>
80024d4c:	1e 26       	rsub	r6,pc
  return ((flashc_error_status & AVR32_FLASHC_FSR_PROGE_MASK) != 0);
80024d4e:	ec f8 00 54 	ld.w	r8,r6[84]
80024d52:	70 08       	ld.w	r8,r8[0x0]
80024d54:	e2 18 00 08 	andl	r8,0x8,COH
80024d58:	5f 18       	srne	r8
80024d5a:	5c 58       	castu.b	r8
}
80024d5c:	10 9c       	mov	r12,r8
80024d5e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80024d62:	00 00       	add	r0,r0
80024d64:	80 02       	ld.sh	r2,r0[0x0]
80024d66:	4b d0       	lddpc	r0,80024e58 <flashc_erase_all+0x18>

80024d68 <flashc_get_command>:
 */
//! @{


unsigned int flashc_get_command(void)
{
80024d68:	eb cd 40 80 	pushm	r7,lr
80024d6c:	1a 97       	mov	r7,sp
  return (AVR32_FLASHC.fcmd & AVR32_FLASHC_FCMD_CMD_MASK) >> AVR32_FLASHC_FCMD_CMD_OFFSET;
80024d6e:	fe 68 00 00 	mov	r8,-131072
80024d72:	70 18       	ld.w	r8,r8[0x4]
80024d74:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
}
80024d78:	10 9c       	mov	r12,r8
80024d7a:	e3 cd 80 80 	ldm	sp++,r7,pc

80024d7e <flashc_get_page_number>:


unsigned int flashc_get_page_number(void)
{
80024d7e:	eb cd 40 80 	pushm	r7,lr
80024d82:	1a 97       	mov	r7,sp
  return (AVR32_FLASHC.fcmd & AVR32_FLASHC_FCMD_PAGEN_MASK) >> AVR32_FLASHC_FCMD_PAGEN_OFFSET;
80024d84:	fe 68 00 00 	mov	r8,-131072
80024d88:	70 18       	ld.w	r8,r8[0x4]
80024d8a:	e4 18 00 ff 	andh	r8,0xff
80024d8e:	e0 18 ff 00 	andl	r8,0xff00
80024d92:	a9 88       	lsr	r8,0x8
}
80024d94:	10 9c       	mov	r12,r8
80024d96:	e3 cd 80 80 	ldm	sp++,r7,pc

80024d9a <flashc_issue_command>:


void flashc_issue_command(unsigned int command, int page_number)
{
80024d9a:	eb cd 40 c0 	pushm	r6-r7,lr
80024d9e:	1a 97       	mov	r7,sp
80024da0:	20 3d       	sub	sp,12
80024da2:	4a 06       	lddpc	r6,80024e20 <flashc_issue_command+0x86>
80024da4:	1e 26       	rsub	r6,pc
80024da6:	ef 4c ff f8 	st.w	r7[-8],r12
80024daa:	ef 4b ff f4 	st.w	r7[-12],r11
  u_avr32_flashc_fcmd_t u_avr32_flashc_fcmd;
  flashc_wait_until_ready();
80024dae:	ec f8 04 84 	ld.w	r8,r6[1156]
80024db2:	70 08       	ld.w	r8,r8[0x0]
80024db4:	5d 18       	icall	r8
  u_avr32_flashc_fcmd.fcmd = AVR32_FLASHC.fcmd;
80024db6:	fe 68 00 00 	mov	r8,-131072
80024dba:	70 18       	ld.w	r8,r8[0x4]
80024dbc:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_flashc_fcmd.FCMD.cmd = command;
80024dc0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80024dc4:	5c 58       	castu.b	r8
80024dc6:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
80024dca:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80024dce:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024dd2:	f1 d9 d0 06 	bfins	r8,r9,0x0,0x6
80024dd6:	ef 48 ff fc 	st.w	r7[-4],r8
  if (page_number >= 0) u_avr32_flashc_fcmd.FCMD.pagen = page_number;
80024dda:	ee f8 ff f4 	ld.w	r8,r7[-12]
80024dde:	58 08       	cp.w	r8,0
80024de0:	c0 b5       	brlt	80024df6 <flashc_issue_command+0x5c>
80024de2:	ee f8 ff f4 	ld.w	r8,r7[-12]
80024de6:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
80024dea:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024dee:	f1 d9 d1 10 	bfins	r8,r9,0x8,0x10
80024df2:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_flashc_fcmd.FCMD.key = AVR32_FLASHC_FCMD_KEY_KEY;
80024df6:	3a 58       	mov	r8,-91
80024df8:	ef 68 ff fc 	st.b	r7[-4],r8
  AVR32_FLASHC.fcmd = u_avr32_flashc_fcmd.fcmd;
80024dfc:	fe 68 00 00 	mov	r8,-131072
80024e00:	ee f9 ff fc 	ld.w	r9,r7[-4]
80024e04:	91 19       	st.w	r8[0x4],r9
  flashc_error_status = flashc_get_error_status();
80024e06:	c8 3f       	rcall	80024d0c <flashc_get_error_status>
80024e08:	18 99       	mov	r9,r12
80024e0a:	ec f8 00 54 	ld.w	r8,r6[84]
80024e0e:	91 09       	st.w	r8[0x0],r9
  flashc_wait_until_ready();
80024e10:	ec f8 04 84 	ld.w	r8,r6[1156]
80024e14:	70 08       	ld.w	r8,r8[0x0]
80024e16:	5d 18       	icall	r8
}
80024e18:	2f dd       	sub	sp,-12
80024e1a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80024e1e:	00 00       	add	r0,r0
80024e20:	80 02       	ld.sh	r2,r0[0x0]
80024e22:	4c 28       	lddpc	r8,80024f28 <flashc_set_bootloader_protected_size+0x54>

80024e24 <flashc_no_operation>:
 */
//! @{


void flashc_no_operation(void)
{
80024e24:	eb cd 40 c0 	pushm	r6-r7,lr
80024e28:	1a 97       	mov	r7,sp
80024e2a:	48 56       	lddpc	r6,80024e3c <flashc_no_operation+0x18>
80024e2c:	1e 26       	rsub	r6,pc
  flashc_issue_command(AVR32_FLASHC_FCMD_CMD_NOP, -1);
80024e2e:	3f fb       	mov	r11,-1
80024e30:	30 0c       	mov	r12,0
80024e32:	f0 16 00 28 	mcall	r6[160]
}
80024e36:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80024e3a:	00 00       	add	r0,r0
80024e3c:	80 02       	ld.sh	r2,r0[0x0]
80024e3e:	4c b0       	lddpc	r0,80024f68 <flashc_set_bootloader_protected_size+0x94>

80024e40 <flashc_erase_all>:


void flashc_erase_all(void)
{
80024e40:	eb cd 40 c0 	pushm	r6-r7,lr
80024e44:	1a 97       	mov	r7,sp
80024e46:	48 56       	lddpc	r6,80024e58 <flashc_erase_all+0x18>
80024e48:	1e 26       	rsub	r6,pc
  flashc_issue_command(AVR32_FLASHC_FCMD_CMD_EA, -1);
80024e4a:	3f fb       	mov	r11,-1
80024e4c:	30 6c       	mov	r12,6
80024e4e:	f0 16 00 28 	mcall	r6[160]
}
80024e52:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80024e56:	00 00       	add	r0,r0
80024e58:	80 02       	ld.sh	r2,r0[0x0]
80024e5a:	4c cc       	lddpc	r12,80024f88 <flashc_is_external_privileged_fetch_locked+0x18>

80024e5c <flashc_is_security_bit_active>:
 */
//! @{


bool flashc_is_security_bit_active(void)
{
80024e5c:	eb cd 40 80 	pushm	r7,lr
80024e60:	1a 97       	mov	r7,sp
  return ((AVR32_FLASHC.fsr & AVR32_FLASHC_FSR_SECURITY_MASK) != 0);
80024e62:	fe 68 00 00 	mov	r8,-131072
80024e66:	70 28       	ld.w	r8,r8[0x8]
80024e68:	e2 18 00 10 	andl	r8,0x10,COH
80024e6c:	5f 18       	srne	r8
80024e6e:	5c 58       	castu.b	r8
}
80024e70:	10 9c       	mov	r12,r8
80024e72:	e3 cd 80 80 	ldm	sp++,r7,pc

80024e76 <flashc_activate_security_bit>:


void flashc_activate_security_bit(void)
{
80024e76:	eb cd 40 c0 	pushm	r6-r7,lr
80024e7a:	1a 97       	mov	r7,sp
80024e7c:	48 46       	lddpc	r6,80024e8c <flashc_activate_security_bit+0x16>
80024e7e:	1e 26       	rsub	r6,pc
  flashc_issue_command(AVR32_FLASHC_FCMD_CMD_SSB, -1);
80024e80:	3f fb       	mov	r11,-1
80024e82:	30 9c       	mov	r12,9
80024e84:	f0 16 00 28 	mcall	r6[160]
}
80024e88:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80024e8c:	80 02       	ld.sh	r2,r0[0x0]
80024e8e:	4d 02       	lddpc	r2,80024fcc <flashc_is_page_region_locked+0x8>

80024e90 <flashc_get_bootloader_protected_size>:


unsigned int flashc_get_bootloader_protected_size(void)
{
80024e90:	eb cd 40 c0 	pushm	r6-r7,lr
80024e94:	1a 97       	mov	r7,sp
80024e96:	20 1d       	sub	sp,4
80024e98:	48 e6       	lddpc	r6,80024ed0 <flashc_get_bootloader_protected_size+0x40>
80024e9a:	1e 26       	rsub	r6,pc
  unsigned int bootprot = (1 << AVR32_FLASHC_FGPFRLO_BOOTPROT_SIZE) - 1 -
                          flashc_read_gp_fuse_bitfield(AVR32_FLASHC_FGPFRLO_BOOTPROT_OFFSET,
                                                       AVR32_FLASHC_FGPFRLO_BOOTPROT_SIZE);
80024e9c:	30 3b       	mov	r11,3
80024e9e:	31 1c       	mov	r12,17
80024ea0:	f0 16 01 22 	mcall	r6[1160]
80024ea4:	14 98       	mov	r8,r10
80024ea6:	16 99       	mov	r9,r11
80024ea8:	f0 08 11 07 	rsub	r8,r8,7
80024eac:	ef 48 ff fc 	st.w	r7[-4],r8
  return (bootprot) ? AVR32_FLASHC_PAGE_SIZE << bootprot : 0;
80024eb0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024eb4:	58 08       	cp.w	r8,0
80024eb6:	c0 80       	breq	80024ec6 <flashc_get_bootloader_protected_size+0x36>
80024eb8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024ebc:	e0 69 02 00 	mov	r9,512
80024ec0:	f2 08 09 48 	lsl	r8,r9,r8
80024ec4:	c0 28       	rjmp	80024ec8 <flashc_get_bootloader_protected_size+0x38>
80024ec6:	30 08       	mov	r8,0
}
80024ec8:	10 9c       	mov	r12,r8
80024eca:	2f fd       	sub	sp,-4
80024ecc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80024ed0:	80 02       	ld.sh	r2,r0[0x0]
80024ed2:	4d 1e       	lddpc	lr,80025014 <flashc_is_region_locked+0x20>

80024ed4 <flashc_set_bootloader_protected_size>:


unsigned int flashc_set_bootloader_protected_size(unsigned int bootprot_size)
{
80024ed4:	eb cd 40 c0 	pushm	r6-r7,lr
80024ed8:	1a 97       	mov	r7,sp
80024eda:	20 7d       	sub	sp,28
80024edc:	4a 46       	lddpc	r6,80024f6c <flashc_set_bootloader_protected_size+0x98>
80024ede:	1e 26       	rsub	r6,pc
80024ee0:	ef 4c ff e4 	st.w	r7[-28],r12
  flashc_set_gp_fuse_bitfield(AVR32_FLASHC_FGPFRLO_BOOTPROT_OFFSET,
80024ee4:	ee fa ff e4 	ld.w	r10,r7[-28]
80024ee8:	58 0a       	cp.w	r10,0
80024eea:	c3 40       	breq	80024f52 <flashc_set_bootloader_protected_size+0x7e>
                              AVR32_FLASHC_FGPFRLO_BOOTPROT_SIZE,
                              (1 << AVR32_FLASHC_FGPFRLO_BOOTPROT_SIZE) - 1 -
                              ((bootprot_size) ?
                               32 - clz((((min(max(bootprot_size, AVR32_FLASHC_PAGE_SIZE << 1),
80024eec:	ee fa ff e4 	ld.w	r10,r7[-28]
80024ef0:	ef 4a ff f8 	st.w	r7[-8],r10
80024ef4:	e0 6a 04 00 	mov	r10,1024
80024ef8:	ef 4a ff fc 	st.w	r7[-4],r10
80024efc:	ee fa ff f8 	ld.w	r10,r7[-8]
80024f00:	ee fb ff fc 	ld.w	r11,r7[-4]
80024f04:	f4 0b 0c 4a 	max	r10,r10,r11
80024f08:	ef 4a ff f4 	st.w	r7[-12],r10
80024f0c:	ee fa ff f4 	ld.w	r10,r7[-12]
80024f10:	ef 4a ff ec 	st.w	r7[-20],r10
80024f14:	e0 7a 00 00 	mov	r10,65536
80024f18:	ef 4a ff f0 	st.w	r7[-16],r10
80024f1c:	ee fa ff ec 	ld.w	r10,r7[-20]
80024f20:	ee fb ff f0 	ld.w	r11,r7[-16]
80024f24:	f4 0b 0d 4a 	min	r10,r10,r11
80024f28:	ef 4a ff e8 	st.w	r7[-24],r10
80024f2c:	ee fa ff e8 	ld.w	r10,r7[-24]
80024f30:	f4 ca fe 01 	sub	r10,r10,-511
80024f34:	f4 cb fe 01 	sub	r11,r10,-511
80024f38:	58 0a       	cp.w	r10,0
80024f3a:	f6 0a 17 50 	movlt	r10,r11
80024f3e:	a9 5a       	asr	r10,0x9
80024f40:	a1 7a       	lsl	r10,0x1
80024f42:	20 1a       	sub	r10,1
}


unsigned int flashc_set_bootloader_protected_size(unsigned int bootprot_size)
{
  flashc_set_gp_fuse_bitfield(AVR32_FLASHC_FGPFRLO_BOOTPROT_OFFSET,
80024f44:	f4 0a 12 00 	clz	r10,r10
80024f48:	21 8a       	sub	r10,24
80024f4a:	14 98       	mov	r8,r10
80024f4c:	bf 5a       	asr	r10,0x1f
80024f4e:	14 99       	mov	r9,r10
80024f50:	c0 38       	rjmp	80024f56 <flashc_set_bootloader_protected_size+0x82>
80024f52:	30 78       	mov	r8,7
80024f54:	30 09       	mov	r9,0
80024f56:	30 3b       	mov	r11,3
80024f58:	31 1c       	mov	r12,17
80024f5a:	f0 16 01 4e 	mcall	r6[1336]
                                               AVR32_FLASHC_PAGE_SIZE <<
                                               ((1 << AVR32_FLASHC_FGPFRLO_BOOTPROT_SIZE) - 1)) +
                                           AVR32_FLASHC_PAGE_SIZE - 1) /
                                          AVR32_FLASHC_PAGE_SIZE) << 1) - 1) - 1 :
                               0));
  return flashc_get_bootloader_protected_size();
80024f5e:	f0 16 01 5f 	mcall	r6[1404]
80024f62:	18 98       	mov	r8,r12
}
80024f64:	10 9c       	mov	r12,r8
80024f66:	2f 9d       	sub	sp,-28
80024f68:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80024f6c:	80 02       	ld.sh	r2,r0[0x0]
80024f6e:	4d 62       	lddpc	r2,800250c4 <flashc_lock_all_regions+0x28>

80024f70 <flashc_is_external_privileged_fetch_locked>:


bool flashc_is_external_privileged_fetch_locked(void)
{
80024f70:	eb cd 40 c0 	pushm	r6-r7,lr
80024f74:	1a 97       	mov	r7,sp
80024f76:	48 76       	lddpc	r6,80024f90 <flashc_is_external_privileged_fetch_locked+0x20>
80024f78:	1e 26       	rsub	r6,pc
  return (!flashc_read_gp_fuse_bit(AVR32_FLASHC_FGPFRLO_EPFL_OFFSET));
80024f7a:	31 0c       	mov	r12,16
80024f7c:	f0 16 00 eb 	mcall	r6[940]
80024f80:	18 98       	mov	r8,r12
80024f82:	ec 18 00 01 	eorl	r8,0x1
80024f86:	5c 58       	castu.b	r8
80024f88:	5c 58       	castu.b	r8
}
80024f8a:	10 9c       	mov	r12,r8
80024f8c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80024f90:	80 02       	ld.sh	r2,r0[0x0]
80024f92:	4d fc       	lddpc	r12,8002510c <flashc_read_gp_fuse_bit+0x8>

80024f94 <flashc_lock_external_privileged_fetch>:


void flashc_lock_external_privileged_fetch(bool lock)
{
80024f94:	eb cd 40 c0 	pushm	r6-r7,lr
80024f98:	1a 97       	mov	r7,sp
80024f9a:	20 1d       	sub	sp,4
80024f9c:	48 96       	lddpc	r6,80024fc0 <flashc_lock_external_privileged_fetch+0x2c>
80024f9e:	1e 26       	rsub	r6,pc
80024fa0:	18 98       	mov	r8,r12
80024fa2:	ef 68 ff fc 	st.b	r7[-4],r8
  flashc_set_gp_fuse_bit(AVR32_FLASHC_FGPFRLO_EPFL_OFFSET, !lock);
80024fa6:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80024faa:	ec 18 00 01 	eorl	r8,0x1
80024fae:	5c 58       	castu.b	r8
80024fb0:	5c 58       	castu.b	r8
80024fb2:	10 9b       	mov	r11,r8
80024fb4:	31 0c       	mov	r12,16
80024fb6:	f0 16 01 12 	mcall	r6[1096]
}
80024fba:	2f fd       	sub	sp,-4
80024fbc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80024fc0:	80 02       	ld.sh	r2,r0[0x0]
80024fc2:	4e 22       	lddpc	r2,80025148 <flashc_read_gp_fuse_bit+0x44>

80024fc4 <flashc_is_page_region_locked>:


bool flashc_is_page_region_locked(int page_number)
{
80024fc4:	eb cd 40 c0 	pushm	r6-r7,lr
80024fc8:	1a 97       	mov	r7,sp
80024fca:	20 1d       	sub	sp,4
80024fcc:	48 96       	lddpc	r6,80024ff0 <flashc_is_page_region_locked+0x2c>
80024fce:	1e 26       	rsub	r6,pc
80024fd0:	ef 4c ff fc 	st.w	r7[-4],r12
  return flashc_is_region_locked(flashc_get_page_region(page_number));
80024fd4:	ee fc ff fc 	ld.w	r12,r7[-4]
80024fd8:	f0 16 01 87 	mcall	r6[1564]
80024fdc:	18 98       	mov	r8,r12
80024fde:	10 9c       	mov	r12,r8
80024fe0:	f0 16 01 37 	mcall	r6[1244]
80024fe4:	18 98       	mov	r8,r12
}
80024fe6:	10 9c       	mov	r12,r8
80024fe8:	2f fd       	sub	sp,-4
80024fea:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80024fee:	00 00       	add	r0,r0
80024ff0:	80 02       	ld.sh	r2,r0[0x0]
80024ff2:	4e 52       	lddpc	r2,80025184 <flashc_read_gp_fuse_bitfield+0x1c>

80024ff4 <flashc_is_region_locked>:


bool flashc_is_region_locked(unsigned int region)
{
80024ff4:	eb cd 40 80 	pushm	r7,lr
80024ff8:	1a 97       	mov	r7,sp
80024ffa:	20 1d       	sub	sp,4
80024ffc:	ef 4c ff fc 	st.w	r7[-4],r12
  return ((AVR32_FLASHC.fsr & AVR32_FLASHC_FSR_LOCK0_MASK << (region & (AVR32_FLASHC_REGIONS - 1))) != 0);
80025000:	fe 68 00 00 	mov	r8,-131072
80025004:	70 29       	ld.w	r9,r8[0x8]
80025006:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002500a:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8002500e:	e0 7a 00 00 	mov	r10,65536
80025012:	f4 08 09 48 	lsl	r8,r10,r8
80025016:	f3 e8 00 08 	and	r8,r9,r8
8002501a:	5f 18       	srne	r8
8002501c:	5c 58       	castu.b	r8
}
8002501e:	10 9c       	mov	r12,r8
80025020:	2f fd       	sub	sp,-4
80025022:	e3 cd 80 80 	ldm	sp++,r7,pc

80025026 <flashc_lock_page_region>:


void flashc_lock_page_region(int page_number, bool lock)
{
80025026:	eb cd 40 c0 	pushm	r6-r7,lr
8002502a:	1a 97       	mov	r7,sp
8002502c:	20 2d       	sub	sp,8
8002502e:	48 d6       	lddpc	r6,80025060 <flashc_lock_page_region+0x3a>
80025030:	1e 26       	rsub	r6,pc
80025032:	ef 4c ff fc 	st.w	r7[-4],r12
80025036:	16 98       	mov	r8,r11
80025038:	ef 68 ff f8 	st.b	r7[-8],r8
  flashc_issue_command((lock) ? AVR32_FLASHC_FCMD_CMD_LP : AVR32_FLASHC_FCMD_CMD_UP, page_number);
8002503c:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80025040:	30 08       	mov	r8,0
80025042:	f0 09 18 00 	cp.b	r9,r8
80025046:	c0 30       	breq	8002504c <flashc_lock_page_region+0x26>
80025048:	30 48       	mov	r8,4
8002504a:	c0 28       	rjmp	8002504e <flashc_lock_page_region+0x28>
8002504c:	30 58       	mov	r8,5
8002504e:	ee fb ff fc 	ld.w	r11,r7[-4]
80025052:	10 9c       	mov	r12,r8
80025054:	f0 16 00 28 	mcall	r6[160]
}
80025058:	2f ed       	sub	sp,-8
8002505a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002505e:	00 00       	add	r0,r0
80025060:	80 02       	ld.sh	r2,r0[0x0]
80025062:	4e b4       	lddpc	r4,8002520c <flashc_read_gp_fuse_bitfield+0xa4>

80025064 <flashc_lock_region>:


void flashc_lock_region(unsigned int region, bool lock)
{
80025064:	eb cd 40 e0 	pushm	r5-r7,lr
80025068:	1a 97       	mov	r7,sp
8002506a:	20 2d       	sub	sp,8
8002506c:	48 b6       	lddpc	r6,80025098 <flashc_lock_region+0x34>
8002506e:	1e 26       	rsub	r6,pc
80025070:	ef 4c ff fc 	st.w	r7[-4],r12
80025074:	16 98       	mov	r8,r11
80025076:	ef 68 ff f8 	st.b	r7[-8],r8
  flashc_lock_page_region(flashc_get_region_first_page_number(region), lock);
8002507a:	ef 35 ff f8 	ld.ub	r5,r7[-8]
8002507e:	ee fc ff fc 	ld.w	r12,r7[-4]
80025082:	f0 16 01 6e 	mcall	r6[1464]
80025086:	18 98       	mov	r8,r12
80025088:	0a 9b       	mov	r11,r5
8002508a:	10 9c       	mov	r12,r8
8002508c:	f0 16 01 ec 	mcall	r6[1968]
}
80025090:	2f ed       	sub	sp,-8
80025092:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80025096:	00 00       	add	r0,r0
80025098:	80 02       	ld.sh	r2,r0[0x0]
8002509a:	4e f2       	lddpc	r2,80025254 <flashc_read_gp_fuse_byte+0x1c>

8002509c <flashc_lock_all_regions>:


void flashc_lock_all_regions(bool lock)
{
8002509c:	eb cd 40 c0 	pushm	r6-r7,lr
800250a0:	1a 97       	mov	r7,sp
800250a2:	20 3d       	sub	sp,12
800250a4:	49 76       	lddpc	r6,80025100 <flashc_lock_all_regions+0x64>
800250a6:	1e 26       	rsub	r6,pc
800250a8:	18 98       	mov	r8,r12
800250aa:	ef 68 ff f4 	st.b	r7[-12],r8
  unsigned int error_status = 0;
800250ae:	30 08       	mov	r8,0
800250b0:	ef 48 ff f8 	st.w	r7[-8],r8
  unsigned int region = AVR32_FLASHC_REGIONS;
800250b4:	31 08       	mov	r8,16
800250b6:	ef 48 ff fc 	st.w	r7[-4],r8
  while (region)
800250ba:	c1 68       	rjmp	800250e6 <flashc_lock_all_regions+0x4a>
  {
    flashc_lock_region(--region, lock);
800250bc:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800250c0:	ee f9 ff fc 	ld.w	r9,r7[-4]
800250c4:	20 19       	sub	r9,1
800250c6:	ef 49 ff fc 	st.w	r7[-4],r9
800250ca:	10 9b       	mov	r11,r8
800250cc:	ee fc ff fc 	ld.w	r12,r7[-4]
800250d0:	f0 16 01 4f 	mcall	r6[1340]
    error_status |= flashc_error_status;
800250d4:	ec f8 00 54 	ld.w	r8,r6[84]
800250d8:	70 08       	ld.w	r8,r8[0x0]
800250da:	ee f9 ff f8 	ld.w	r9,r7[-8]
800250de:	f3 e8 10 08 	or	r8,r9,r8
800250e2:	ef 48 ff f8 	st.w	r7[-8],r8

void flashc_lock_all_regions(bool lock)
{
  unsigned int error_status = 0;
  unsigned int region = AVR32_FLASHC_REGIONS;
  while (region)
800250e6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800250ea:	58 08       	cp.w	r8,0
800250ec:	ce 81       	brne	800250bc <flashc_lock_all_regions+0x20>
  {
    flashc_lock_region(--region, lock);
    error_status |= flashc_error_status;
  }
  flashc_error_status = error_status;
800250ee:	ec f8 00 54 	ld.w	r8,r6[84]
800250f2:	ee f9 ff f8 	ld.w	r9,r7[-8]
800250f6:	91 09       	st.w	r8[0x0],r9
}
800250f8:	2f dd       	sub	sp,-12
800250fa:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800250fe:	00 00       	add	r0,r0
80025100:	80 02       	ld.sh	r2,r0[0x0]
80025102:	4f 2a       	lddpc	r10,800252c8 <flashc_read_all_gp_fuses+0x2c>

80025104 <flashc_read_gp_fuse_bit>:
 */
//! @{


bool flashc_read_gp_fuse_bit(unsigned int gp_fuse_bit)
{
80025104:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
80025108:	1a 97       	mov	r7,sp
8002510a:	20 1d       	sub	sp,4
8002510c:	49 66       	lddpc	r6,80025164 <flashc_read_gp_fuse_bit+0x60>
8002510e:	1e 26       	rsub	r6,pc
80025110:	ef 4c ff fc 	st.w	r7[-4],r12
  return ((flashc_read_all_gp_fuses() & 1ULL << (gp_fuse_bit & 0x3F)) != 0);
80025114:	f0 16 00 70 	mcall	r6[448]
80025118:	14 98       	mov	r8,r10
8002511a:	16 99       	mov	r9,r11
8002511c:	ee fa ff fc 	ld.w	r10,r7[-4]
80025120:	f5 da c0 06 	bfextu	r10,r10,0x0,0x6
80025124:	14 9b       	mov	r11,r10
80025126:	e2 1b 00 20 	andl	r11,0x20,COH
8002512a:	30 0c       	mov	r12,0
8002512c:	f2 05 15 01 	lsl	r5,r9,0x1
80025130:	14 9e       	mov	lr,r10
80025132:	ee 1e ff ff 	eorh	lr,0xffff
80025136:	ec 1e ff ff 	eorl	lr,0xffff
8002513a:	ea 0e 09 4e 	lsl	lr,r5,lr
8002513e:	f0 0a 0a 42 	lsr	r2,r8,r10
80025142:	fd e2 10 02 	or	r2,lr,r2
80025146:	f2 0a 0a 43 	lsr	r3,r9,r10
8002514a:	58 0b       	cp.w	r11,0
8002514c:	e6 02 17 10 	movne	r2,r3
80025150:	f8 03 17 10 	movne	r3,r12
80025154:	04 98       	mov	r8,r2
80025156:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002515a:	5c 58       	castu.b	r8
}
8002515c:	10 9c       	mov	r12,r8
8002515e:	2f fd       	sub	sp,-4
80025160:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
80025164:	80 02       	ld.sh	r2,r0[0x0]
80025166:	4f 92       	lddpc	r2,80025348 <flashc_erase_gp_fuse_bitfield+0x2c>

80025168 <flashc_read_gp_fuse_bitfield>:


U64 flashc_read_gp_fuse_bitfield(unsigned int pos, unsigned int width)
{
80025168:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
8002516c:	1a 97       	mov	r7,sp
8002516e:	20 5d       	sub	sp,20
80025170:	4b 16       	lddpc	r6,80025234 <flashc_read_gp_fuse_bitfield+0xcc>
80025172:	1e 26       	rsub	r6,pc
80025174:	ef 4c ff f0 	st.w	r7[-16],r12
80025178:	ef 4b ff ec 	st.w	r7[-20],r11
  return flashc_read_all_gp_fuses() >> (pos & 0x3F) & ((1ULL << min(width, 64)) - 1);
8002517c:	f0 16 00 70 	mcall	r6[448]
80025180:	14 98       	mov	r8,r10
80025182:	16 99       	mov	r9,r11
80025184:	ee fa ff f0 	ld.w	r10,r7[-16]
80025188:	f5 da c0 06 	bfextu	r10,r10,0x0,0x6
8002518c:	14 9b       	mov	r11,r10
8002518e:	e2 1b 00 20 	andl	r11,0x20,COH
80025192:	30 0c       	mov	r12,0
80025194:	f2 05 15 01 	lsl	r5,r9,0x1
80025198:	14 9e       	mov	lr,r10
8002519a:	ee 1e ff ff 	eorh	lr,0xffff
8002519e:	ec 1e ff ff 	eorl	lr,0xffff
800251a2:	ea 0e 09 4e 	lsl	lr,r5,lr
800251a6:	f0 0a 0a 42 	lsr	r2,r8,r10
800251aa:	fd e2 10 02 	or	r2,lr,r2
800251ae:	f2 0a 0a 43 	lsr	r3,r9,r10
800251b2:	58 0b       	cp.w	r11,0
800251b4:	e6 02 17 10 	movne	r2,r3
800251b8:	f8 03 17 10 	movne	r3,r12
800251bc:	ee f8 ff ec 	ld.w	r8,r7[-20]
800251c0:	ef 48 ff f8 	st.w	r7[-8],r8
800251c4:	34 08       	mov	r8,64
800251c6:	ef 48 ff fc 	st.w	r7[-4],r8
800251ca:	ee f8 ff f8 	ld.w	r8,r7[-8]
800251ce:	ee f9 ff fc 	ld.w	r9,r7[-4]
800251d2:	f0 09 0d 48 	min	r8,r8,r9
800251d6:	ef 48 ff f4 	st.w	r7[-12],r8
800251da:	ee f8 ff f4 	ld.w	r8,r7[-12]
800251de:	10 99       	mov	r9,r8
800251e0:	e2 19 00 20 	andl	r9,0x20,COH
800251e4:	30 0a       	mov	r10,0
800251e6:	30 1b       	mov	r11,1
800251e8:	f6 0c 16 01 	lsr	r12,r11,0x1
800251ec:	10 9b       	mov	r11,r8
800251ee:	ee 1b ff ff 	eorh	r11,0xffff
800251f2:	ec 1b ff ff 	eorl	r11,0xffff
800251f6:	f8 0b 0a 4b 	lsr	r11,r12,r11
800251fa:	30 0c       	mov	r12,0
800251fc:	f8 08 09 41 	lsl	r1,r12,r8
80025200:	f7 e1 10 01 	or	r1,r11,r1
80025204:	30 1b       	mov	r11,1
80025206:	f6 08 09 40 	lsl	r0,r11,r8
8002520a:	58 09       	cp.w	r9,0
8002520c:	e0 01 17 10 	movne	r1,r0
80025210:	f4 00 17 10 	movne	r0,r10
80025214:	3f f8       	mov	r8,-1
80025216:	3f f9       	mov	r9,-1
80025218:	e0 08 00 0a 	add	r10,r0,r8
8002521c:	e2 09 00 4b 	adc	r11,r1,r9
80025220:	e5 ea 00 08 	and	r8,r2,r10
80025224:	e7 eb 00 09 	and	r9,r3,r11
}
80025228:	10 9a       	mov	r10,r8
8002522a:	12 9b       	mov	r11,r9
8002522c:	2f bd       	sub	sp,-20
8002522e:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
80025232:	00 00       	add	r0,r0
80025234:	80 02       	ld.sh	r2,r0[0x0]
80025236:	4f f6       	lddpc	r6,80025430 <flashc_erase_gp_fuse_bitfield+0x114>

80025238 <flashc_read_gp_fuse_byte>:


U8 flashc_read_gp_fuse_byte(unsigned int gp_fuse_byte)
{
80025238:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
8002523c:	1a 97       	mov	r7,sp
8002523e:	20 1d       	sub	sp,4
80025240:	49 66       	lddpc	r6,80025298 <flashc_read_gp_fuse_byte+0x60>
80025242:	1e 26       	rsub	r6,pc
80025244:	ef 4c ff fc 	st.w	r7[-4],r12
  return flashc_read_all_gp_fuses() >> ((gp_fuse_byte & 0x07) << 3);
80025248:	f0 16 00 70 	mcall	r6[448]
8002524c:	14 98       	mov	r8,r10
8002524e:	16 99       	mov	r9,r11
80025250:	ee fa ff fc 	ld.w	r10,r7[-4]
80025254:	f5 da c0 03 	bfextu	r10,r10,0x0,0x3
80025258:	a3 7a       	lsl	r10,0x3
8002525a:	14 9b       	mov	r11,r10
8002525c:	e2 1b 00 20 	andl	r11,0x20,COH
80025260:	30 0c       	mov	r12,0
80025262:	f2 05 15 01 	lsl	r5,r9,0x1
80025266:	14 9e       	mov	lr,r10
80025268:	ee 1e ff ff 	eorh	lr,0xffff
8002526c:	ec 1e ff ff 	eorl	lr,0xffff
80025270:	ea 0e 09 4e 	lsl	lr,r5,lr
80025274:	f0 0a 0a 42 	lsr	r2,r8,r10
80025278:	fd e2 10 02 	or	r2,lr,r2
8002527c:	f2 0a 0a 43 	lsr	r3,r9,r10
80025280:	58 0b       	cp.w	r11,0
80025282:	e6 02 17 10 	movne	r2,r3
80025286:	f8 03 17 10 	movne	r3,r12
8002528a:	f1 d2 c0 08 	bfextu	r8,r2,0x0,0x8
}
8002528e:	10 9c       	mov	r12,r8
80025290:	2f fd       	sub	sp,-4
80025292:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
80025296:	00 00       	add	r0,r0
80025298:	80 02       	ld.sh	r2,r0[0x0]
8002529a:	50 c6       	stdsp	sp[0x30],r6

8002529c <flashc_read_all_gp_fuses>:


U64 flashc_read_all_gp_fuses(void)
{
8002529c:	eb cd 40 8c 	pushm	r2-r3,r7,lr
800252a0:	1a 97       	mov	r7,sp
  return AVR32_FLASHC.fgpfrlo | (U64)AVR32_FLASHC.fgpfrhi << 32;
800252a2:	fe 6c 00 00 	mov	r12,-131072
800252a6:	78 6c       	ld.w	r12,r12[0x18]
800252a8:	18 9a       	mov	r10,r12
800252aa:	30 0b       	mov	r11,0
800252ac:	fe 6c 00 00 	mov	r12,-131072
800252b0:	78 5c       	ld.w	r12,r12[0x14]
800252b2:	18 92       	mov	r2,r12
800252b4:	30 03       	mov	r3,0
800252b6:	e4 09 15 00 	lsl	r9,r2,0x0
800252ba:	30 08       	mov	r8,0
800252bc:	f5 e8 10 02 	or	r2,r10,r8
800252c0:	f7 e9 10 03 	or	r3,r11,r9
800252c4:	04 98       	mov	r8,r2
800252c6:	06 99       	mov	r9,r3
}
800252c8:	10 9a       	mov	r10,r8
800252ca:	12 9b       	mov	r11,r9
800252cc:	e3 cd 80 8c 	ldm	sp++,r2-r3,r7,pc

800252d0 <flashc_erase_gp_fuse_bit>:


bool flashc_erase_gp_fuse_bit(unsigned int gp_fuse_bit, bool check)
{
800252d0:	eb cd 40 c0 	pushm	r6-r7,lr
800252d4:	1a 97       	mov	r7,sp
800252d6:	20 2d       	sub	sp,8
800252d8:	49 06       	lddpc	r6,80025318 <flashc_erase_gp_fuse_bit+0x48>
800252da:	1e 26       	rsub	r6,pc
800252dc:	ef 4c ff fc 	st.w	r7[-4],r12
800252e0:	16 98       	mov	r8,r11
800252e2:	ef 68 ff f8 	st.b	r7[-8],r8
  flashc_issue_command(AVR32_FLASHC_FCMD_CMD_EGPB, gp_fuse_bit & 0x3F);
800252e6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800252ea:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
800252ee:	10 9b       	mov	r11,r8
800252f0:	30 8c       	mov	r12,8
800252f2:	f0 16 00 28 	mcall	r6[160]
  return (check) ? flashc_read_gp_fuse_bit(gp_fuse_bit) : true;
800252f6:	ef 39 ff f8 	ld.ub	r9,r7[-8]
800252fa:	30 08       	mov	r8,0
800252fc:	f0 09 18 00 	cp.b	r9,r8
80025300:	c0 70       	breq	8002530e <flashc_erase_gp_fuse_bit+0x3e>
80025302:	ee fc ff fc 	ld.w	r12,r7[-4]
80025306:	f0 16 00 eb 	mcall	r6[940]
8002530a:	18 98       	mov	r8,r12
8002530c:	c0 28       	rjmp	80025310 <flashc_erase_gp_fuse_bit+0x40>
8002530e:	30 18       	mov	r8,1
}
80025310:	10 9c       	mov	r12,r8
80025312:	2f ed       	sub	sp,-8
80025314:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80025318:	80 02       	ld.sh	r2,r0[0x0]
8002531a:	51 5e       	stdsp	sp[0x54],lr

8002531c <flashc_erase_gp_fuse_bitfield>:


bool flashc_erase_gp_fuse_bitfield(unsigned int pos, unsigned int width, bool check)
{
8002531c:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
80025320:	1a 97       	mov	r7,sp
80025322:	20 8d       	sub	sp,32
80025324:	4c 36       	lddpc	r6,80025430 <flashc_erase_gp_fuse_bitfield+0x114>
80025326:	1e 26       	rsub	r6,pc
80025328:	ef 4c ff e8 	st.w	r7[-24],r12
8002532c:	ef 4b ff e4 	st.w	r7[-28],r11
80025330:	14 98       	mov	r8,r10
80025332:	ef 68 ff e0 	st.b	r7[-32],r8
  unsigned int error_status = 0;
80025336:	30 08       	mov	r8,0
80025338:	ef 48 ff ec 	st.w	r7[-20],r8
  unsigned int gp_fuse_bit;
  pos &= 0x3F;
8002533c:	ee f8 ff e8 	ld.w	r8,r7[-24]
80025340:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
80025344:	ef 48 ff e8 	st.w	r7[-24],r8
  width = min(width, 64);
80025348:	ee f8 ff e4 	ld.w	r8,r7[-28]
8002534c:	ef 48 ff f8 	st.w	r7[-8],r8
80025350:	34 08       	mov	r8,64
80025352:	ef 48 ff fc 	st.w	r7[-4],r8
80025356:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002535a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002535e:	f0 09 0d 48 	min	r8,r8,r9
80025362:	ef 48 ff f4 	st.w	r7[-12],r8
80025366:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002536a:	ef 48 ff e4 	st.w	r7[-28],r8
  for (gp_fuse_bit = pos; gp_fuse_bit < pos + width; gp_fuse_bit++)
8002536e:	ee f8 ff e8 	ld.w	r8,r7[-24]
80025372:	ef 48 ff f0 	st.w	r7[-16],r8
80025376:	c1 48       	rjmp	8002539e <flashc_erase_gp_fuse_bitfield+0x82>
  {
    flashc_erase_gp_fuse_bit(gp_fuse_bit, false);
80025378:	30 0b       	mov	r11,0
8002537a:	ee fc ff f0 	ld.w	r12,r7[-16]
8002537e:	f0 16 00 e2 	mcall	r6[904]
    error_status |= flashc_error_status;
80025382:	ec f8 00 54 	ld.w	r8,r6[84]
80025386:	70 08       	ld.w	r8,r8[0x0]
80025388:	ee f9 ff ec 	ld.w	r9,r7[-20]
8002538c:	f3 e8 10 08 	or	r8,r9,r8
80025390:	ef 48 ff ec 	st.w	r7[-20],r8
{
  unsigned int error_status = 0;
  unsigned int gp_fuse_bit;
  pos &= 0x3F;
  width = min(width, 64);
  for (gp_fuse_bit = pos; gp_fuse_bit < pos + width; gp_fuse_bit++)
80025394:	ee f8 ff f0 	ld.w	r8,r7[-16]
80025398:	2f f8       	sub	r8,-1
8002539a:	ef 48 ff f0 	st.w	r7[-16],r8
8002539e:	ee f9 ff e8 	ld.w	r9,r7[-24]
800253a2:	ee f8 ff e4 	ld.w	r8,r7[-28]
800253a6:	10 09       	add	r9,r8
800253a8:	ee f8 ff f0 	ld.w	r8,r7[-16]
800253ac:	10 39       	cp.w	r9,r8
800253ae:	fe 9b ff e5 	brhi	80025378 <flashc_erase_gp_fuse_bitfield+0x5c>
  {
    flashc_erase_gp_fuse_bit(gp_fuse_bit, false);
    error_status |= flashc_error_status;
  }
  flashc_error_status = error_status;
800253b2:	ec f8 00 54 	ld.w	r8,r6[84]
800253b6:	ee f9 ff ec 	ld.w	r9,r7[-20]
800253ba:	91 09       	st.w	r8[0x0],r9
  return (check) ? (flashc_read_gp_fuse_bitfield(pos, width) == (1ULL << width) - 1) : true;
800253bc:	ef 39 ff e0 	ld.ub	r9,r7[-32]
800253c0:	30 08       	mov	r8,0
800253c2:	f0 09 18 00 	cp.b	r9,r8
800253c6:	c3 00       	breq	80025426 <flashc_erase_gp_fuse_bitfield+0x10a>
800253c8:	ee fb ff e4 	ld.w	r11,r7[-28]
800253cc:	ee fc ff e8 	ld.w	r12,r7[-24]
800253d0:	f0 16 01 22 	mcall	r6[1160]
800253d4:	ee f8 ff e4 	ld.w	r8,r7[-28]
800253d8:	10 99       	mov	r9,r8
800253da:	e2 19 00 20 	andl	r9,0x20,COH
800253de:	30 0c       	mov	r12,0
800253e0:	30 1e       	mov	lr,1
800253e2:	fc 05 16 01 	lsr	r5,lr,0x1
800253e6:	10 9e       	mov	lr,r8
800253e8:	ee 1e ff ff 	eorh	lr,0xffff
800253ec:	ec 1e ff ff 	eorl	lr,0xffff
800253f0:	ea 0e 0a 4e 	lsr	lr,r5,lr
800253f4:	30 05       	mov	r5,0
800253f6:	ea 08 09 43 	lsl	r3,r5,r8
800253fa:	fd e3 10 03 	or	r3,lr,r3
800253fe:	30 1e       	mov	lr,1
80025400:	fc 08 09 42 	lsl	r2,lr,r8
80025404:	58 09       	cp.w	r9,0
80025406:	e4 03 17 10 	movne	r3,r2
8002540a:	f8 02 17 10 	movne	r2,r12
8002540e:	3f f8       	mov	r8,-1
80025410:	3f f9       	mov	r9,-1
80025412:	e4 08 00 08 	add	r8,r2,r8
80025416:	e6 09 00 49 	adc	r9,r3,r9
8002541a:	10 3a       	cp.w	r10,r8
8002541c:	f2 0b 13 00 	cpc	r11,r9
80025420:	5f 08       	sreq	r8
80025422:	5c 58       	castu.b	r8
80025424:	c0 28       	rjmp	80025428 <flashc_erase_gp_fuse_bitfield+0x10c>
80025426:	30 18       	mov	r8,1
}
80025428:	10 9c       	mov	r12,r8
8002542a:	2f 8d       	sub	sp,-32
8002542c:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
80025430:	80 02       	ld.sh	r2,r0[0x0]
80025432:	51 aa       	stdsp	sp[0x68],r10

80025434 <flashc_erase_gp_fuse_byte>:


bool flashc_erase_gp_fuse_byte(unsigned int gp_fuse_byte, bool check)
{
80025434:	eb cd 40 c0 	pushm	r6-r7,lr
80025438:	1a 97       	mov	r7,sp
8002543a:	20 6d       	sub	sp,24
8002543c:	4b 26       	lddpc	r6,80025504 <flashc_erase_gp_fuse_byte+0xd0>
8002543e:	1e 26       	rsub	r6,pc
80025440:	ef 4c ff ec 	st.w	r7[-20],r12
80025444:	16 98       	mov	r8,r11
80025446:	ef 68 ff e8 	st.b	r7[-24],r8
  unsigned int error_status;
  unsigned int current_gp_fuse_byte;
  U64 value = flashc_read_all_gp_fuses();
8002544a:	f0 16 00 70 	mcall	r6[448]
8002544e:	14 98       	mov	r8,r10
80025450:	16 99       	mov	r9,r11
80025452:	ee e9 ff f8 	st.d	r7[-8],r8
  flashc_erase_all_gp_fuses(false);
80025456:	30 0c       	mov	r12,0
80025458:	f0 16 00 c7 	mcall	r6[796]
  error_status = flashc_error_status;
8002545c:	ec f8 00 54 	ld.w	r8,r6[84]
80025460:	70 08       	ld.w	r8,r8[0x0]
80025462:	ef 48 ff f0 	st.w	r7[-16],r8
  for (current_gp_fuse_byte = 0; current_gp_fuse_byte < 8; current_gp_fuse_byte++, value >>= 8)
80025466:	30 08       	mov	r8,0
80025468:	ef 48 ff f4 	st.w	r7[-12],r8
8002546c:	c2 b8       	rjmp	800254c2 <flashc_erase_gp_fuse_byte+0x8e>
  {
    if (current_gp_fuse_byte != gp_fuse_byte)
8002546e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80025472:	ee f8 ff ec 	ld.w	r8,r7[-20]
80025476:	10 39       	cp.w	r9,r8
80025478:	c1 10       	breq	8002549a <flashc_erase_gp_fuse_byte+0x66>
    {
      flashc_write_gp_fuse_byte(current_gp_fuse_byte, value);
8002547a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8002547e:	10 9b       	mov	r11,r8
80025480:	ee fc ff f4 	ld.w	r12,r7[-12]
80025484:	f0 16 00 83 	mcall	r6[524]
      error_status |= flashc_error_status;
80025488:	ec f8 00 54 	ld.w	r8,r6[84]
8002548c:	70 08       	ld.w	r8,r8[0x0]
8002548e:	ee f9 ff f0 	ld.w	r9,r7[-16]
80025492:	f3 e8 10 08 	or	r8,r9,r8
80025496:	ef 48 ff f0 	st.w	r7[-16],r8
  unsigned int error_status;
  unsigned int current_gp_fuse_byte;
  U64 value = flashc_read_all_gp_fuses();
  flashc_erase_all_gp_fuses(false);
  error_status = flashc_error_status;
  for (current_gp_fuse_byte = 0; current_gp_fuse_byte < 8; current_gp_fuse_byte++, value >>= 8)
8002549a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002549e:	2f f8       	sub	r8,-1
800254a0:	ef 48 ff f4 	st.w	r7[-12],r8
800254a4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800254a8:	b9 68       	lsl	r8,0x18
800254aa:	ee f9 ff fc 	ld.w	r9,r7[-4]
800254ae:	a9 89       	lsr	r9,0x8
800254b0:	f3 e8 10 08 	or	r8,r9,r8
800254b4:	ef 48 ff fc 	st.w	r7[-4],r8
800254b8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800254bc:	a9 88       	lsr	r8,0x8
800254be:	ef 48 ff f8 	st.w	r7[-8],r8
800254c2:	ee f8 ff f4 	ld.w	r8,r7[-12]
800254c6:	58 78       	cp.w	r8,7
800254c8:	fe 98 ff d3 	brls	8002546e <flashc_erase_gp_fuse_byte+0x3a>
    {
      flashc_write_gp_fuse_byte(current_gp_fuse_byte, value);
      error_status |= flashc_error_status;
    }
  }
  flashc_error_status = error_status;
800254cc:	ec f8 00 54 	ld.w	r8,r6[84]
800254d0:	ee f9 ff f0 	ld.w	r9,r7[-16]
800254d4:	91 09       	st.w	r8[0x0],r9
  return (check) ? (flashc_read_gp_fuse_byte(gp_fuse_byte) == 0xFF) : true;
800254d6:	ef 39 ff e8 	ld.ub	r9,r7[-24]
800254da:	30 08       	mov	r8,0
800254dc:	f0 09 18 00 	cp.b	r9,r8
800254e0:	c0 d0       	breq	800254fa <flashc_erase_gp_fuse_byte+0xc6>
800254e2:	ee fc ff ec 	ld.w	r12,r7[-20]
800254e6:	f0 16 02 13 	mcall	r6[2124]
800254ea:	18 98       	mov	r8,r12
800254ec:	10 99       	mov	r9,r8
800254ee:	3f f8       	mov	r8,-1
800254f0:	f0 09 18 00 	cp.b	r9,r8
800254f4:	5f 08       	sreq	r8
800254f6:	5c 58       	castu.b	r8
800254f8:	c0 28       	rjmp	800254fc <flashc_erase_gp_fuse_byte+0xc8>
800254fa:	30 18       	mov	r8,1
}
800254fc:	10 9c       	mov	r12,r8
800254fe:	2f ad       	sub	sp,-24
80025500:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80025504:	80 02       	ld.sh	r2,r0[0x0]
80025506:	52 c2       	stdsp	sp[0xb0],r2

80025508 <flashc_erase_all_gp_fuses>:


bool flashc_erase_all_gp_fuses(bool check)
{
80025508:	eb cd 40 c0 	pushm	r6-r7,lr
8002550c:	1a 97       	mov	r7,sp
8002550e:	20 1d       	sub	sp,4
80025510:	48 f6       	lddpc	r6,8002554c <flashc_erase_all_gp_fuses+0x44>
80025512:	1e 26       	rsub	r6,pc
80025514:	18 98       	mov	r8,r12
80025516:	ef 68 ff fc 	st.b	r7[-4],r8
  flashc_issue_command(AVR32_FLASHC_FCMD_CMD_EAGPF, -1);
8002551a:	3f fb       	mov	r11,-1
8002551c:	30 bc       	mov	r12,11
8002551e:	f0 16 00 28 	mcall	r6[160]
  return (check) ? (flashc_read_all_gp_fuses() == 0xFFFFFFFFFFFFFFFFULL) : true;
80025522:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80025526:	30 08       	mov	r8,0
80025528:	f0 09 18 00 	cp.b	r9,r8
8002552c:	c0 b0       	breq	80025542 <flashc_erase_all_gp_fuses+0x3a>
8002552e:	f0 16 00 70 	mcall	r6[448]
80025532:	14 98       	mov	r8,r10
80025534:	16 99       	mov	r9,r11
80025536:	f3 e8 00 08 	and	r8,r9,r8
8002553a:	5b f8       	cp.w	r8,-1
8002553c:	5f 08       	sreq	r8
8002553e:	5c 58       	castu.b	r8
80025540:	c0 28       	rjmp	80025544 <flashc_erase_all_gp_fuses+0x3c>
80025542:	30 18       	mov	r8,1
}
80025544:	10 9c       	mov	r12,r8
80025546:	2f fd       	sub	sp,-4
80025548:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002554c:	80 02       	ld.sh	r2,r0[0x0]
8002554e:	53 96       	stdsp	sp[0xe4],r6

80025550 <flashc_write_gp_fuse_bit>:


void flashc_write_gp_fuse_bit(unsigned int gp_fuse_bit, bool value)
{
80025550:	eb cd 40 c0 	pushm	r6-r7,lr
80025554:	1a 97       	mov	r7,sp
80025556:	20 2d       	sub	sp,8
80025558:	48 c6       	lddpc	r6,80025588 <flashc_write_gp_fuse_bit+0x38>
8002555a:	1e 26       	rsub	r6,pc
8002555c:	ef 4c ff fc 	st.w	r7[-4],r12
80025560:	16 98       	mov	r8,r11
80025562:	ef 68 ff f8 	st.b	r7[-8],r8
  if (!value)
80025566:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8002556a:	ec 18 00 01 	eorl	r8,0x1
8002556e:	5c 58       	castu.b	r8
80025570:	c0 90       	breq	80025582 <flashc_write_gp_fuse_bit+0x32>
    flashc_issue_command(AVR32_FLASHC_FCMD_CMD_WGPB, gp_fuse_bit & 0x3F);
80025572:	ee f8 ff fc 	ld.w	r8,r7[-4]
80025576:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
8002557a:	10 9b       	mov	r11,r8
8002557c:	30 7c       	mov	r12,7
8002557e:	f0 16 00 28 	mcall	r6[160]
}
80025582:	2f ed       	sub	sp,-8
80025584:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80025588:	80 02       	ld.sh	r2,r0[0x0]
8002558a:	53 de       	stdsp	sp[0xf4],lr

8002558c <flashc_write_gp_fuse_bitfield>:


void flashc_write_gp_fuse_bitfield(unsigned int pos, unsigned int width, U64 value)
{
8002558c:	eb cd 40 c0 	pushm	r6-r7,lr
80025590:	1a 97       	mov	r7,sp
80025592:	20 9d       	sub	sp,36
80025594:	4b 16       	lddpc	r6,80025658 <flashc_write_gp_fuse_bitfield+0xcc>
80025596:	1e 26       	rsub	r6,pc
80025598:	ef 4c ff e8 	st.w	r7[-24],r12
8002559c:	ef 4b ff e4 	st.w	r7[-28],r11
800255a0:	ee e9 ff dc 	st.d	r7[-36],r8
  unsigned int error_status = 0;
800255a4:	30 08       	mov	r8,0
800255a6:	ef 48 ff ec 	st.w	r7[-20],r8
  unsigned int gp_fuse_bit;
  pos &= 0x3F;
800255aa:	ee f8 ff e8 	ld.w	r8,r7[-24]
800255ae:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
800255b2:	ef 48 ff e8 	st.w	r7[-24],r8
  width = min(width, 64);
800255b6:	ee f8 ff e4 	ld.w	r8,r7[-28]
800255ba:	ef 48 ff f8 	st.w	r7[-8],r8
800255be:	34 08       	mov	r8,64
800255c0:	ef 48 ff fc 	st.w	r7[-4],r8
800255c4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800255c8:	ee f9 ff fc 	ld.w	r9,r7[-4]
800255cc:	f0 09 0d 48 	min	r8,r8,r9
800255d0:	ef 48 ff f4 	st.w	r7[-12],r8
800255d4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800255d8:	ef 48 ff e4 	st.w	r7[-28],r8
  for (gp_fuse_bit = pos; gp_fuse_bit < pos + width; gp_fuse_bit++, value >>= 1)
800255dc:	ee f8 ff e8 	ld.w	r8,r7[-24]
800255e0:	ef 48 ff f0 	st.w	r7[-16],r8
800255e4:	c2 88       	rjmp	80025634 <flashc_write_gp_fuse_bitfield+0xa8>
  {
    flashc_write_gp_fuse_bit(gp_fuse_bit, value & 0x01);
800255e6:	ee f8 ff e0 	ld.w	r8,r7[-32]
800255ea:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800255ee:	5c 58       	castu.b	r8
800255f0:	10 9b       	mov	r11,r8
800255f2:	ee fc ff f0 	ld.w	r12,r7[-16]
800255f6:	f0 16 00 d2 	mcall	r6[840]
    error_status |= flashc_error_status;
800255fa:	ec f8 00 54 	ld.w	r8,r6[84]
800255fe:	70 08       	ld.w	r8,r8[0x0]
80025600:	ee f9 ff ec 	ld.w	r9,r7[-20]
80025604:	f3 e8 10 08 	or	r8,r9,r8
80025608:	ef 48 ff ec 	st.w	r7[-20],r8
{
  unsigned int error_status = 0;
  unsigned int gp_fuse_bit;
  pos &= 0x3F;
  width = min(width, 64);
  for (gp_fuse_bit = pos; gp_fuse_bit < pos + width; gp_fuse_bit++, value >>= 1)
8002560c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80025610:	2f f8       	sub	r8,-1
80025612:	ef 48 ff f0 	st.w	r7[-16],r8
80025616:	ee f8 ff dc 	ld.w	r8,r7[-36]
8002561a:	bf 78       	lsl	r8,0x1f
8002561c:	ee f9 ff e0 	ld.w	r9,r7[-32]
80025620:	a1 99       	lsr	r9,0x1
80025622:	f3 e8 10 08 	or	r8,r9,r8
80025626:	ef 48 ff e0 	st.w	r7[-32],r8
8002562a:	ee f8 ff dc 	ld.w	r8,r7[-36]
8002562e:	a1 98       	lsr	r8,0x1
80025630:	ef 48 ff dc 	st.w	r7[-36],r8
80025634:	ee f9 ff e8 	ld.w	r9,r7[-24]
80025638:	ee f8 ff e4 	ld.w	r8,r7[-28]
8002563c:	10 09       	add	r9,r8
8002563e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80025642:	10 39       	cp.w	r9,r8
80025644:	fe 9b ff d1 	brhi	800255e6 <flashc_write_gp_fuse_bitfield+0x5a>
  {
    flashc_write_gp_fuse_bit(gp_fuse_bit, value & 0x01);
    error_status |= flashc_error_status;
  }
  flashc_error_status = error_status;
80025648:	ec f8 00 54 	ld.w	r8,r6[84]
8002564c:	ee f9 ff ec 	ld.w	r9,r7[-20]
80025650:	91 09       	st.w	r8[0x0],r9
}
80025652:	2f 7d       	sub	sp,-36
80025654:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80025658:	80 02       	ld.sh	r2,r0[0x0]
8002565a:	54 1a       	stdsp	sp[0x104],r10

8002565c <flashc_write_gp_fuse_byte>:


void flashc_write_gp_fuse_byte(unsigned int gp_fuse_byte, U8 value)
{
8002565c:	eb cd 40 c0 	pushm	r6-r7,lr
80025660:	1a 97       	mov	r7,sp
80025662:	20 2d       	sub	sp,8
80025664:	48 c6       	lddpc	r6,80025694 <flashc_write_gp_fuse_byte+0x38>
80025666:	1e 26       	rsub	r6,pc
80025668:	ef 4c ff fc 	st.w	r7[-4],r12
8002566c:	16 98       	mov	r8,r11
8002566e:	ef 68 ff f8 	st.b	r7[-8],r8
  flashc_issue_command(AVR32_FLASHC_FCMD_CMD_PGPFB, (gp_fuse_byte & 0x07) | value << 3);
80025672:	ee f8 ff fc 	ld.w	r8,r7[-4]
80025676:	f3 d8 c0 03 	bfextu	r9,r8,0x0,0x3
8002567a:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8002567e:	a3 78       	lsl	r8,0x3
80025680:	f3 e8 10 08 	or	r8,r9,r8
80025684:	10 9b       	mov	r11,r8
80025686:	30 ac       	mov	r12,10
80025688:	f0 16 00 28 	mcall	r6[160]
}
8002568c:	2f ed       	sub	sp,-8
8002568e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80025692:	00 00       	add	r0,r0
80025694:	80 02       	ld.sh	r2,r0[0x0]
80025696:	54 ea       	stdsp	sp[0x138],r10

80025698 <flashc_write_all_gp_fuses>:


void flashc_write_all_gp_fuses(U64 value)
{
80025698:	eb cd 40 c0 	pushm	r6-r7,lr
8002569c:	1a 97       	mov	r7,sp
8002569e:	20 4d       	sub	sp,16
800256a0:	49 e6       	lddpc	r6,80025718 <flashc_write_all_gp_fuses+0x80>
800256a2:	1e 26       	rsub	r6,pc
800256a4:	ee eb ff f0 	st.d	r7[-16],r10
  unsigned int error_status = 0;
800256a8:	30 08       	mov	r8,0
800256aa:	ef 48 ff f8 	st.w	r7[-8],r8
  unsigned int gp_fuse_byte;
  for (gp_fuse_byte = 0; gp_fuse_byte < 8; gp_fuse_byte++, value >>= 8)
800256ae:	30 08       	mov	r8,0
800256b0:	ef 48 ff fc 	st.w	r7[-4],r8
800256b4:	c2 58       	rjmp	800256fe <flashc_write_all_gp_fuses+0x66>
  {
    flashc_write_gp_fuse_byte(gp_fuse_byte, value);
800256b6:	ef 38 ff f7 	ld.ub	r8,r7[-9]
800256ba:	10 9b       	mov	r11,r8
800256bc:	ee fc ff fc 	ld.w	r12,r7[-4]
800256c0:	f0 16 00 83 	mcall	r6[524]
    error_status |= flashc_error_status;
800256c4:	ec f8 00 54 	ld.w	r8,r6[84]
800256c8:	70 08       	ld.w	r8,r8[0x0]
800256ca:	ee f9 ff f8 	ld.w	r9,r7[-8]
800256ce:	f3 e8 10 08 	or	r8,r9,r8
800256d2:	ef 48 ff f8 	st.w	r7[-8],r8

void flashc_write_all_gp_fuses(U64 value)
{
  unsigned int error_status = 0;
  unsigned int gp_fuse_byte;
  for (gp_fuse_byte = 0; gp_fuse_byte < 8; gp_fuse_byte++, value >>= 8)
800256d6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800256da:	2f f8       	sub	r8,-1
800256dc:	ef 48 ff fc 	st.w	r7[-4],r8
800256e0:	ee f8 ff f0 	ld.w	r8,r7[-16]
800256e4:	b9 68       	lsl	r8,0x18
800256e6:	ee f9 ff f4 	ld.w	r9,r7[-12]
800256ea:	a9 89       	lsr	r9,0x8
800256ec:	f3 e8 10 08 	or	r8,r9,r8
800256f0:	ef 48 ff f4 	st.w	r7[-12],r8
800256f4:	ee f8 ff f0 	ld.w	r8,r7[-16]
800256f8:	a9 88       	lsr	r8,0x8
800256fa:	ef 48 ff f0 	st.w	r7[-16],r8
800256fe:	ee f8 ff fc 	ld.w	r8,r7[-4]
80025702:	58 78       	cp.w	r8,7
80025704:	fe 98 ff d9 	brls	800256b6 <flashc_write_all_gp_fuses+0x1e>
  {
    flashc_write_gp_fuse_byte(gp_fuse_byte, value);
    error_status |= flashc_error_status;
  }
  flashc_error_status = error_status;
80025708:	ec f8 00 54 	ld.w	r8,r6[84]
8002570c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80025710:	91 09       	st.w	r8[0x0],r9
}
80025712:	2f cd       	sub	sp,-16
80025714:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80025718:	80 02       	ld.sh	r2,r0[0x0]
8002571a:	55 26       	stdsp	sp[0x148],r6

8002571c <flashc_set_gp_fuse_bit>:


void flashc_set_gp_fuse_bit(unsigned int gp_fuse_bit, bool value)
{
8002571c:	eb cd 40 c0 	pushm	r6-r7,lr
80025720:	1a 97       	mov	r7,sp
80025722:	20 2d       	sub	sp,8
80025724:	48 e6       	lddpc	r6,8002575c <flashc_set_gp_fuse_bit+0x40>
80025726:	1e 26       	rsub	r6,pc
80025728:	ef 4c ff fc 	st.w	r7[-4],r12
8002572c:	16 98       	mov	r8,r11
8002572e:	ef 68 ff f8 	st.b	r7[-8],r8
  if (value)
80025732:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80025736:	30 08       	mov	r8,0
80025738:	f0 09 18 00 	cp.b	r9,r8
8002573c:	c0 70       	breq	8002574a <flashc_set_gp_fuse_bit+0x2e>
    flashc_erase_gp_fuse_bit(gp_fuse_bit, false);
8002573e:	30 0b       	mov	r11,0
80025740:	ee fc ff fc 	ld.w	r12,r7[-4]
80025744:	f0 16 00 e2 	mcall	r6[904]
80025748:	c0 68       	rjmp	80025754 <flashc_set_gp_fuse_bit+0x38>
  else
    flashc_write_gp_fuse_bit(gp_fuse_bit, false);
8002574a:	30 0b       	mov	r11,0
8002574c:	ee fc ff fc 	ld.w	r12,r7[-4]
80025750:	f0 16 00 d2 	mcall	r6[840]
}
80025754:	2f ed       	sub	sp,-8
80025756:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002575a:	00 00       	add	r0,r0
8002575c:	80 02       	ld.sh	r2,r0[0x0]
8002575e:	55 aa       	stdsp	sp[0x168],r10

80025760 <flashc_set_gp_fuse_bitfield>:


void flashc_set_gp_fuse_bitfield(unsigned int pos, unsigned int width, U64 value)
{
80025760:	eb cd 40 c0 	pushm	r6-r7,lr
80025764:	1a 97       	mov	r7,sp
80025766:	20 9d       	sub	sp,36
80025768:	4b 16       	lddpc	r6,8002582c <flashc_set_gp_fuse_bitfield+0xcc>
8002576a:	1e 26       	rsub	r6,pc
8002576c:	ef 4c ff e8 	st.w	r7[-24],r12
80025770:	ef 4b ff e4 	st.w	r7[-28],r11
80025774:	ee e9 ff dc 	st.d	r7[-36],r8
  unsigned int error_status = 0;
80025778:	30 08       	mov	r8,0
8002577a:	ef 48 ff ec 	st.w	r7[-20],r8
  unsigned int gp_fuse_bit;
  pos &= 0x3F;
8002577e:	ee f8 ff e8 	ld.w	r8,r7[-24]
80025782:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
80025786:	ef 48 ff e8 	st.w	r7[-24],r8
  width = min(width, 64);
8002578a:	ee f8 ff e4 	ld.w	r8,r7[-28]
8002578e:	ef 48 ff f8 	st.w	r7[-8],r8
80025792:	34 08       	mov	r8,64
80025794:	ef 48 ff fc 	st.w	r7[-4],r8
80025798:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002579c:	ee f9 ff fc 	ld.w	r9,r7[-4]
800257a0:	f0 09 0d 48 	min	r8,r8,r9
800257a4:	ef 48 ff f4 	st.w	r7[-12],r8
800257a8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800257ac:	ef 48 ff e4 	st.w	r7[-28],r8
  for (gp_fuse_bit = pos; gp_fuse_bit < pos + width; gp_fuse_bit++, value >>= 1)
800257b0:	ee f8 ff e8 	ld.w	r8,r7[-24]
800257b4:	ef 48 ff f0 	st.w	r7[-16],r8
800257b8:	c2 88       	rjmp	80025808 <flashc_set_gp_fuse_bitfield+0xa8>
  {
    flashc_set_gp_fuse_bit(gp_fuse_bit, value & 0x01);
800257ba:	ee f8 ff e0 	ld.w	r8,r7[-32]
800257be:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800257c2:	5c 58       	castu.b	r8
800257c4:	10 9b       	mov	r11,r8
800257c6:	ee fc ff f0 	ld.w	r12,r7[-16]
800257ca:	f0 16 01 12 	mcall	r6[1096]
    error_status |= flashc_error_status;
800257ce:	ec f8 00 54 	ld.w	r8,r6[84]
800257d2:	70 08       	ld.w	r8,r8[0x0]
800257d4:	ee f9 ff ec 	ld.w	r9,r7[-20]
800257d8:	f3 e8 10 08 	or	r8,r9,r8
800257dc:	ef 48 ff ec 	st.w	r7[-20],r8
{
  unsigned int error_status = 0;
  unsigned int gp_fuse_bit;
  pos &= 0x3F;
  width = min(width, 64);
  for (gp_fuse_bit = pos; gp_fuse_bit < pos + width; gp_fuse_bit++, value >>= 1)
800257e0:	ee f8 ff f0 	ld.w	r8,r7[-16]
800257e4:	2f f8       	sub	r8,-1
800257e6:	ef 48 ff f0 	st.w	r7[-16],r8
800257ea:	ee f8 ff dc 	ld.w	r8,r7[-36]
800257ee:	bf 78       	lsl	r8,0x1f
800257f0:	ee f9 ff e0 	ld.w	r9,r7[-32]
800257f4:	a1 99       	lsr	r9,0x1
800257f6:	f3 e8 10 08 	or	r8,r9,r8
800257fa:	ef 48 ff e0 	st.w	r7[-32],r8
800257fe:	ee f8 ff dc 	ld.w	r8,r7[-36]
80025802:	a1 98       	lsr	r8,0x1
80025804:	ef 48 ff dc 	st.w	r7[-36],r8
80025808:	ee f9 ff e8 	ld.w	r9,r7[-24]
8002580c:	ee f8 ff e4 	ld.w	r8,r7[-28]
80025810:	10 09       	add	r9,r8
80025812:	ee f8 ff f0 	ld.w	r8,r7[-16]
80025816:	10 39       	cp.w	r9,r8
80025818:	fe 9b ff d1 	brhi	800257ba <flashc_set_gp_fuse_bitfield+0x5a>
  {
    flashc_set_gp_fuse_bit(gp_fuse_bit, value & 0x01);
    error_status |= flashc_error_status;
  }
  flashc_error_status = error_status;
8002581c:	ec f8 00 54 	ld.w	r8,r6[84]
80025820:	ee f9 ff ec 	ld.w	r9,r7[-20]
80025824:	91 09       	st.w	r8[0x0],r9
}
80025826:	2f 7d       	sub	sp,-36
80025828:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002582c:	80 02       	ld.sh	r2,r0[0x0]
8002582e:	55 ee       	stdsp	sp[0x178],lr

80025830 <flashc_set_gp_fuse_byte>:


void flashc_set_gp_fuse_byte(unsigned int gp_fuse_byte, U8 value)
{
80025830:	eb cd 40 c0 	pushm	r6-r7,lr
80025834:	1a 97       	mov	r7,sp
80025836:	20 3d       	sub	sp,12
80025838:	49 c6       	lddpc	r6,800258a8 <flashc_set_gp_fuse_byte+0x78>
8002583a:	1e 26       	rsub	r6,pc
8002583c:	ef 4c ff f8 	st.w	r7[-8],r12
80025840:	16 98       	mov	r8,r11
80025842:	ef 68 ff f4 	st.b	r7[-12],r8
  unsigned int error_status;
  switch (value)
80025846:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8002584a:	58 08       	cp.w	r8,0
8002584c:	c0 a0       	breq	80025860 <flashc_set_gp_fuse_byte+0x30>
8002584e:	e0 48 00 ff 	cp.w	r8,255
80025852:	c0 d1       	brne	8002586c <flashc_set_gp_fuse_byte+0x3c>
  {
  case 0xFF:
    flashc_erase_gp_fuse_byte(gp_fuse_byte, false);
80025854:	30 0b       	mov	r11,0
80025856:	ee fc ff f8 	ld.w	r12,r7[-8]
8002585a:	f0 16 01 08 	mcall	r6[1056]
    break;
8002585e:	c2 18       	rjmp	800258a0 <flashc_set_gp_fuse_byte+0x70>
  case 0x00:
    flashc_write_gp_fuse_byte(gp_fuse_byte, 0x00);
80025860:	30 0b       	mov	r11,0
80025862:	ee fc ff f8 	ld.w	r12,r7[-8]
80025866:	f0 16 00 83 	mcall	r6[524]
    break;
8002586a:	c1 b8       	rjmp	800258a0 <flashc_set_gp_fuse_byte+0x70>
  default:
    flashc_erase_gp_fuse_byte(gp_fuse_byte, false);
8002586c:	30 0b       	mov	r11,0
8002586e:	ee fc ff f8 	ld.w	r12,r7[-8]
80025872:	f0 16 01 08 	mcall	r6[1056]
    error_status = flashc_error_status;
80025876:	ec f8 00 54 	ld.w	r8,r6[84]
8002587a:	70 08       	ld.w	r8,r8[0x0]
8002587c:	ef 48 ff fc 	st.w	r7[-4],r8
    flashc_write_gp_fuse_byte(gp_fuse_byte, value);
80025880:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80025884:	10 9b       	mov	r11,r8
80025886:	ee fc ff f8 	ld.w	r12,r7[-8]
8002588a:	f0 16 00 83 	mcall	r6[524]
    flashc_error_status |= error_status;
8002588e:	ec f8 00 54 	ld.w	r8,r6[84]
80025892:	70 09       	ld.w	r9,r8[0x0]
80025894:	ee f8 ff fc 	ld.w	r8,r7[-4]
80025898:	10 49       	or	r9,r8
8002589a:	ec f8 00 54 	ld.w	r8,r6[84]
8002589e:	91 09       	st.w	r8[0x0],r9
  }
}
800258a0:	2f dd       	sub	sp,-12
800258a2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800258a6:	00 00       	add	r0,r0
800258a8:	80 02       	ld.sh	r2,r0[0x0]
800258aa:	56 be       	stdsp	sp[0x1ac],lr

800258ac <flashc_set_all_gp_fuses>:


void flashc_set_all_gp_fuses(U64 value)
{
800258ac:	eb cd 40 c0 	pushm	r6-r7,lr
800258b0:	1a 97       	mov	r7,sp
800258b2:	20 3d       	sub	sp,12
800258b4:	49 86       	lddpc	r6,80025914 <flashc_set_all_gp_fuses+0x68>
800258b6:	1e 26       	rsub	r6,pc
800258b8:	ee eb ff f4 	st.d	r7[-12],r10
  unsigned int error_status;
  switch (value)
800258bc:	ee e8 ff f4 	ld.d	r8,r7[-12]
800258c0:	58 08       	cp.w	r8,0
800258c2:	5c 29       	cpc	r9
800258c4:	c0 b0       	breq	800258da <flashc_set_all_gp_fuses+0x2e>
800258c6:	3f fa       	mov	r10,-1
800258c8:	3f fb       	mov	r11,-1
800258ca:	14 38       	cp.w	r8,r10
800258cc:	f6 09 13 00 	cpc	r9,r11
800258d0:	c0 a1       	brne	800258e4 <flashc_set_all_gp_fuses+0x38>
  {
  case 0xFFFFFFFFFFFFFFFFULL:
    flashc_erase_all_gp_fuses(false);
800258d2:	30 0c       	mov	r12,0
800258d4:	f0 16 00 c7 	mcall	r6[796]
    break;
800258d8:	c1 b8       	rjmp	8002590e <flashc_set_all_gp_fuses+0x62>
  case 0x0000000000000000ULL:
    flashc_write_all_gp_fuses(0x0000000000000000ULL);
800258da:	30 0a       	mov	r10,0
800258dc:	30 0b       	mov	r11,0
800258de:	f0 16 00 ea 	mcall	r6[936]
    break;
800258e2:	c1 68       	rjmp	8002590e <flashc_set_all_gp_fuses+0x62>
  default:
    flashc_erase_all_gp_fuses(false);
800258e4:	30 0c       	mov	r12,0
800258e6:	f0 16 00 c7 	mcall	r6[796]
    error_status = flashc_error_status;
800258ea:	ec f8 00 54 	ld.w	r8,r6[84]
800258ee:	70 08       	ld.w	r8,r8[0x0]
800258f0:	ef 48 ff fc 	st.w	r7[-4],r8
    flashc_write_all_gp_fuses(value);
800258f4:	ee ea ff f4 	ld.d	r10,r7[-12]
800258f8:	f0 16 00 ea 	mcall	r6[936]
    flashc_error_status |= error_status;
800258fc:	ec f8 00 54 	ld.w	r8,r6[84]
80025900:	70 09       	ld.w	r9,r8[0x0]
80025902:	ee f8 ff fc 	ld.w	r8,r7[-4]
80025906:	10 49       	or	r9,r8
80025908:	ec f8 00 54 	ld.w	r8,r6[84]
8002590c:	91 09       	st.w	r8[0x0],r9
  }
}
8002590e:	2f dd       	sub	sp,-12
80025910:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80025914:	80 02       	ld.sh	r2,r0[0x0]
80025916:	57 3a       	stdsp	sp[0x1cc],r10

80025918 <flashc_clear_page_buffer>:
 */
//! @{


void flashc_clear_page_buffer(void)
{
80025918:	eb cd 40 c0 	pushm	r6-r7,lr
8002591c:	1a 97       	mov	r7,sp
8002591e:	48 56       	lddpc	r6,80025930 <flashc_clear_page_buffer+0x18>
80025920:	1e 26       	rsub	r6,pc
  flashc_issue_command(AVR32_FLASHC_FCMD_CMD_CPB, -1);
80025922:	3f fb       	mov	r11,-1
80025924:	30 3c       	mov	r12,3
80025926:	f0 16 00 28 	mcall	r6[160]
}
8002592a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002592e:	00 00       	add	r0,r0
80025930:	80 02       	ld.sh	r2,r0[0x0]
80025932:	57 a4       	stdsp	sp[0x1e8],r4

80025934 <flashc_is_page_erased>:


bool flashc_is_page_erased(void)
{
80025934:	eb cd 40 80 	pushm	r7,lr
80025938:	1a 97       	mov	r7,sp
  return ((AVR32_FLASHC.fsr & AVR32_FLASHC_FSR_QPRR_MASK) != 0);
8002593a:	fe 68 00 00 	mov	r8,-131072
8002593e:	70 28       	ld.w	r8,r8[0x8]
80025940:	e2 18 00 20 	andl	r8,0x20,COH
80025944:	5f 18       	srne	r8
80025946:	5c 58       	castu.b	r8
}
80025948:	10 9c       	mov	r12,r8
8002594a:	e3 cd 80 80 	ldm	sp++,r7,pc

8002594e <flashc_quick_page_read>:


bool flashc_quick_page_read(int page_number)
{
8002594e:	eb cd 40 c0 	pushm	r6-r7,lr
80025952:	1a 97       	mov	r7,sp
80025954:	20 1d       	sub	sp,4
80025956:	48 96       	lddpc	r6,80025978 <flashc_quick_page_read+0x2a>
80025958:	1e 26       	rsub	r6,pc
8002595a:	ef 4c ff fc 	st.w	r7[-4],r12
  flashc_issue_command(AVR32_FLASHC_FCMD_CMD_QPR, page_number);
8002595e:	ee fb ff fc 	ld.w	r11,r7[-4]
80025962:	30 cc       	mov	r12,12
80025964:	f0 16 00 28 	mcall	r6[160]
  return flashc_is_page_erased();
80025968:	f0 16 00 d8 	mcall	r6[864]
8002596c:	18 98       	mov	r8,r12
}
8002596e:	10 9c       	mov	r12,r8
80025970:	2f fd       	sub	sp,-4
80025972:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80025976:	00 00       	add	r0,r0
80025978:	80 02       	ld.sh	r2,r0[0x0]
8002597a:	57 dc       	stdsp	sp[0x1f4],r12

8002597c <flashc_erase_page>:


bool flashc_erase_page(int page_number, bool check)
{
8002597c:	eb cd 40 c0 	pushm	r6-r7,lr
80025980:	1a 97       	mov	r7,sp
80025982:	20 4d       	sub	sp,16
80025984:	49 86       	lddpc	r6,800259e4 <flashc_erase_page+0x68>
80025986:	1e 26       	rsub	r6,pc
80025988:	ef 4c ff f4 	st.w	r7[-12],r12
8002598c:	16 98       	mov	r8,r11
8002598e:	ef 68 ff f0 	st.b	r7[-16],r8
  bool page_erased = true;
80025992:	30 18       	mov	r8,1
80025994:	ef 68 ff fb 	st.b	r7[-5],r8
  flashc_issue_command(AVR32_FLASHC_FCMD_CMD_EP, page_number);
80025998:	ee fb ff f4 	ld.w	r11,r7[-12]
8002599c:	30 2c       	mov	r12,2
8002599e:	f0 16 00 28 	mcall	r6[160]
  if (check)
800259a2:	ef 39 ff f0 	ld.ub	r9,r7[-16]
800259a6:	30 08       	mov	r8,0
800259a8:	f0 09 18 00 	cp.b	r9,r8
800259ac:	c1 50       	breq	800259d6 <flashc_erase_page+0x5a>
  {
    unsigned int error_status = flashc_error_status;
800259ae:	ec f8 00 54 	ld.w	r8,r6[84]
800259b2:	70 08       	ld.w	r8,r8[0x0]
800259b4:	ef 48 ff fc 	st.w	r7[-4],r8
    page_erased = flashc_quick_page_read(-1);
800259b8:	3f fc       	mov	r12,-1
800259ba:	f0 16 01 6d 	mcall	r6[1460]
800259be:	18 98       	mov	r8,r12
800259c0:	ef 68 ff fb 	st.b	r7[-5],r8
    flashc_error_status |= error_status;
800259c4:	ec f8 00 54 	ld.w	r8,r6[84]
800259c8:	70 09       	ld.w	r9,r8[0x0]
800259ca:	ee f8 ff fc 	ld.w	r8,r7[-4]
800259ce:	10 49       	or	r9,r8
800259d0:	ec f8 00 54 	ld.w	r8,r6[84]
800259d4:	91 09       	st.w	r8[0x0],r9
  }
  return page_erased;
800259d6:	ef 38 ff fb 	ld.ub	r8,r7[-5]
}
800259da:	10 9c       	mov	r12,r8
800259dc:	2f cd       	sub	sp,-16
800259de:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800259e2:	00 00       	add	r0,r0
800259e4:	80 02       	ld.sh	r2,r0[0x0]
800259e6:	58 0a       	cp.w	r10,0

800259e8 <flashc_erase_all_pages>:


bool flashc_erase_all_pages(bool check)
{
800259e8:	eb cd 40 e0 	pushm	r5-r7,lr
800259ec:	1a 97       	mov	r7,sp
800259ee:	20 4d       	sub	sp,16
800259f0:	49 f6       	lddpc	r6,80025a6c <flashc_erase_all_pages+0x84>
800259f2:	1e 26       	rsub	r6,pc
800259f4:	18 98       	mov	r8,r12
800259f6:	ef 68 ff f0 	st.b	r7[-16],r8
  bool all_pages_erased = true;
800259fa:	30 18       	mov	r8,1
800259fc:	ef 68 ff f7 	st.b	r7[-9],r8
  unsigned int error_status = 0;
80025a00:	30 08       	mov	r8,0
80025a02:	ef 48 ff f8 	st.w	r7[-8],r8
  unsigned int page_number = flashc_get_page_count();
80025a06:	f0 16 00 fc 	mcall	r6[1008]
80025a0a:	18 98       	mov	r8,r12
80025a0c:	ef 48 ff fc 	st.w	r7[-4],r8
  while (page_number)
80025a10:	c1 f8       	rjmp	80025a4e <flashc_erase_all_pages+0x66>
  {
    all_pages_erased &= flashc_erase_page(--page_number, check);
80025a12:	ef 35 ff f7 	ld.ub	r5,r7[-9]
80025a16:	ef 39 ff f0 	ld.ub	r9,r7[-16]
80025a1a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80025a1e:	20 18       	sub	r8,1
80025a20:	ef 48 ff fc 	st.w	r7[-4],r8
80025a24:	ee f8 ff fc 	ld.w	r8,r7[-4]
80025a28:	12 9b       	mov	r11,r9
80025a2a:	10 9c       	mov	r12,r8
80025a2c:	f0 16 00 99 	mcall	r6[612]
80025a30:	18 98       	mov	r8,r12
80025a32:	eb e8 00 08 	and	r8,r5,r8
80025a36:	5f 18       	srne	r8
80025a38:	ef 68 ff f7 	st.b	r7[-9],r8
    error_status |= flashc_error_status;
80025a3c:	ec f8 00 54 	ld.w	r8,r6[84]
80025a40:	70 08       	ld.w	r8,r8[0x0]
80025a42:	ee f9 ff f8 	ld.w	r9,r7[-8]
80025a46:	f3 e8 10 08 	or	r8,r9,r8
80025a4a:	ef 48 ff f8 	st.w	r7[-8],r8
bool flashc_erase_all_pages(bool check)
{
  bool all_pages_erased = true;
  unsigned int error_status = 0;
  unsigned int page_number = flashc_get_page_count();
  while (page_number)
80025a4e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80025a52:	58 08       	cp.w	r8,0
80025a54:	cd f1       	brne	80025a12 <flashc_erase_all_pages+0x2a>
  {
    all_pages_erased &= flashc_erase_page(--page_number, check);
    error_status |= flashc_error_status;
  }
  flashc_error_status = error_status;
80025a56:	ec f8 00 54 	ld.w	r8,r6[84]
80025a5a:	ee f9 ff f8 	ld.w	r9,r7[-8]
80025a5e:	91 09       	st.w	r8[0x0],r9
  return all_pages_erased;
80025a60:	ef 38 ff f7 	ld.ub	r8,r7[-9]
}
80025a64:	10 9c       	mov	r12,r8
80025a66:	2f cd       	sub	sp,-16
80025a68:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80025a6c:	80 02       	ld.sh	r2,r0[0x0]
80025a6e:	58 76       	cp.w	r6,7

80025a70 <flashc_write_page>:


void flashc_write_page(int page_number)
{
80025a70:	eb cd 40 c0 	pushm	r6-r7,lr
80025a74:	1a 97       	mov	r7,sp
80025a76:	20 1d       	sub	sp,4
80025a78:	48 66       	lddpc	r6,80025a90 <flashc_write_page+0x20>
80025a7a:	1e 26       	rsub	r6,pc
80025a7c:	ef 4c ff fc 	st.w	r7[-4],r12
  flashc_issue_command(AVR32_FLASHC_FCMD_CMD_WP, page_number);
80025a80:	ee fb ff fc 	ld.w	r11,r7[-4]
80025a84:	30 1c       	mov	r12,1
80025a86:	f0 16 00 28 	mcall	r6[160]
}
80025a8a:	2f fd       	sub	sp,-4
80025a8c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80025a90:	80 02       	ld.sh	r2,r0[0x0]
80025a92:	58 fe       	cp.w	lr,15

80025a94 <flashc_quick_user_page_read>:


bool flashc_quick_user_page_read(void)
{
80025a94:	eb cd 40 c0 	pushm	r6-r7,lr
80025a98:	1a 97       	mov	r7,sp
80025a9a:	48 76       	lddpc	r6,80025ab4 <flashc_quick_user_page_read+0x20>
80025a9c:	1e 26       	rsub	r6,pc
  flashc_issue_command(AVR32_FLASHC_FCMD_CMD_QPRUP, -1);
80025a9e:	3f fb       	mov	r11,-1
80025aa0:	30 fc       	mov	r12,15
80025aa2:	f0 16 00 28 	mcall	r6[160]
  return flashc_is_page_erased();
80025aa6:	f0 16 00 d8 	mcall	r6[864]
80025aaa:	18 98       	mov	r8,r12
}
80025aac:	10 9c       	mov	r12,r8
80025aae:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80025ab2:	00 00       	add	r0,r0
80025ab4:	80 02       	ld.sh	r2,r0[0x0]
80025ab6:	59 20       	cp.w	r0,18

80025ab8 <flashc_erase_user_page>:


bool flashc_erase_user_page(bool check)
{
80025ab8:	eb cd 40 c0 	pushm	r6-r7,lr
80025abc:	1a 97       	mov	r7,sp
80025abe:	20 1d       	sub	sp,4
80025ac0:	48 c6       	lddpc	r6,80025af0 <flashc_erase_user_page+0x38>
80025ac2:	1e 26       	rsub	r6,pc
80025ac4:	18 98       	mov	r8,r12
80025ac6:	ef 68 ff fc 	st.b	r7[-4],r8
  flashc_issue_command(AVR32_FLASHC_FCMD_CMD_EUP, -1);
80025aca:	3f fb       	mov	r11,-1
80025acc:	30 ec       	mov	r12,14
80025ace:	f0 16 00 28 	mcall	r6[160]
  return (check) ? flashc_quick_user_page_read() : true;
80025ad2:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80025ad6:	30 08       	mov	r8,0
80025ad8:	f0 09 18 00 	cp.b	r9,r8
80025adc:	c0 50       	breq	80025ae6 <flashc_erase_user_page+0x2e>
80025ade:	f0 16 02 0a 	mcall	r6[2088]
80025ae2:	18 98       	mov	r8,r12
80025ae4:	c0 28       	rjmp	80025ae8 <flashc_erase_user_page+0x30>
80025ae6:	30 18       	mov	r8,1
}
80025ae8:	10 9c       	mov	r12,r8
80025aea:	2f fd       	sub	sp,-4
80025aec:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80025af0:	80 02       	ld.sh	r2,r0[0x0]
80025af2:	59 46       	cp.w	r6,20

80025af4 <flashc_write_user_page>:


void flashc_write_user_page(void)
{
80025af4:	eb cd 40 c0 	pushm	r6-r7,lr
80025af8:	1a 97       	mov	r7,sp
80025afa:	48 56       	lddpc	r6,80025b0c <flashc_write_user_page+0x18>
80025afc:	1e 26       	rsub	r6,pc
  flashc_issue_command(AVR32_FLASHC_FCMD_CMD_WUP, -1);
80025afe:	3f fb       	mov	r11,-1
80025b00:	30 dc       	mov	r12,13
80025b02:	f0 16 00 28 	mcall	r6[160]
}
80025b06:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80025b0a:	00 00       	add	r0,r0
80025b0c:	80 02       	ld.sh	r2,r0[0x0]
80025b0e:	59 80       	cp.w	r0,24

80025b10 <flashc_memset8>:


volatile void *flashc_memset8(volatile void *dst, U8 src, size_t nbytes, bool erase)
{
80025b10:	eb cd 40 c0 	pushm	r6-r7,lr
80025b14:	1a 97       	mov	r7,sp
80025b16:	20 4d       	sub	sp,16
80025b18:	49 26       	lddpc	r6,80025b60 <flashc_memset8+0x50>
80025b1a:	1e 26       	rsub	r6,pc
80025b1c:	ef 4c ff fc 	st.w	r7[-4],r12
80025b20:	ef 4a ff f4 	st.w	r7[-12],r10
80025b24:	12 98       	mov	r8,r9
80025b26:	16 99       	mov	r9,r11
80025b28:	ef 69 ff f8 	st.b	r7[-8],r9
80025b2c:	ef 68 ff f0 	st.b	r7[-16],r8
  return flashc_memset16(dst, src | (U16)src << 8, nbytes, erase);
80025b30:	ef 39 ff f0 	ld.ub	r9,r7[-16]
80025b34:	ef 3a ff f8 	ld.ub	r10,r7[-8]
80025b38:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80025b3c:	a9 68       	lsl	r8,0x8
80025b3e:	5c 88       	casts.h	r8
80025b40:	f5 e8 10 08 	or	r8,r10,r8
80025b44:	5c 88       	casts.h	r8
80025b46:	5c 78       	castu.h	r8
80025b48:	ee fa ff f4 	ld.w	r10,r7[-12]
80025b4c:	10 9b       	mov	r11,r8
80025b4e:	ee fc ff fc 	ld.w	r12,r7[-4]
80025b52:	f0 16 01 79 	mcall	r6[1508]
80025b56:	18 98       	mov	r8,r12
}
80025b58:	10 9c       	mov	r12,r8
80025b5a:	2f cd       	sub	sp,-16
80025b5c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80025b60:	80 02       	ld.sh	r2,r0[0x0]
80025b62:	59 9e       	cp.w	lr,25

80025b64 <flashc_memset16>:


volatile void *flashc_memset16(volatile void *dst, U16 src, size_t nbytes, bool erase)
{
80025b64:	eb cd 40 c0 	pushm	r6-r7,lr
80025b68:	1a 97       	mov	r7,sp
80025b6a:	20 4d       	sub	sp,16
80025b6c:	49 16       	lddpc	r6,80025bb0 <flashc_memset16+0x4c>
80025b6e:	1e 26       	rsub	r6,pc
80025b70:	ef 4c ff fc 	st.w	r7[-4],r12
80025b74:	ef 4a ff f4 	st.w	r7[-12],r10
80025b78:	12 98       	mov	r8,r9
80025b7a:	16 99       	mov	r9,r11
80025b7c:	ef 59 ff f8 	st.h	r7[-8],r9
80025b80:	ef 68 ff f0 	st.b	r7[-16],r8
  return flashc_memset32(dst, src | (U32)src << 16, nbytes, erase);
80025b84:	ef 39 ff f0 	ld.ub	r9,r7[-16]
80025b88:	ef 1a ff f8 	ld.uh	r10,r7[-8]
80025b8c:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80025b90:	b1 68       	lsl	r8,0x10
80025b92:	f5 e8 10 08 	or	r8,r10,r8
80025b96:	ee fa ff f4 	ld.w	r10,r7[-12]
80025b9a:	10 9b       	mov	r11,r8
80025b9c:	ee fc ff fc 	ld.w	r12,r7[-4]
80025ba0:	f0 16 01 b4 	mcall	r6[1744]
80025ba4:	18 98       	mov	r8,r12
}
80025ba6:	10 9c       	mov	r12,r8
80025ba8:	2f cd       	sub	sp,-16
80025baa:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80025bae:	00 00       	add	r0,r0
80025bb0:	80 02       	ld.sh	r2,r0[0x0]
80025bb2:	59 f2       	cp.w	r2,31

80025bb4 <flashc_memset32>:


volatile void *flashc_memset32(volatile void *dst, U32 src, size_t nbytes, bool erase)
{
80025bb4:	eb cd 40 cf 	pushm	r0-r3,r6-r7,lr
80025bb8:	1a 97       	mov	r7,sp
80025bba:	20 6d       	sub	sp,24
80025bbc:	49 56       	lddpc	r6,80025c10 <flashc_memset32+0x5c>
80025bbe:	1e 26       	rsub	r6,pc
80025bc0:	ef 4c ff fc 	st.w	r7[-4],r12
80025bc4:	ef 4b ff f8 	st.w	r7[-8],r11
80025bc8:	ef 4a ff f4 	st.w	r7[-12],r10
80025bcc:	12 98       	mov	r8,r9
80025bce:	ef 68 ff f0 	st.b	r7[-16],r8
  return flashc_memset64(dst, src | (U64)src << 32, nbytes, erase);
80025bd2:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80025bd6:	ee f0 ff f8 	ld.w	r0,r7[-8]
80025bda:	30 01       	mov	r1,0
80025bdc:	ee f9 ff f8 	ld.w	r9,r7[-8]
80025be0:	ef 49 ff ec 	st.w	r7[-20],r9
80025be4:	30 09       	mov	r9,0
80025be6:	ef 49 ff e8 	st.w	r7[-24],r9
80025bea:	ee f3 ff ec 	ld.w	r3,r7[-20]
80025bee:	a1 63       	lsl	r3,0x0
80025bf0:	30 02       	mov	r2,0
80025bf2:	e1 e2 10 0a 	or	r10,r0,r2
80025bf6:	e3 e3 10 0b 	or	r11,r1,r3
80025bfa:	ee f9 ff f4 	ld.w	r9,r7[-12]
80025bfe:	ee fc ff fc 	ld.w	r12,r7[-4]
80025c02:	f0 16 01 98 	mcall	r6[1632]
80025c06:	18 98       	mov	r8,r12
}
80025c08:	10 9c       	mov	r12,r8
80025c0a:	2f ad       	sub	sp,-24
80025c0c:	e3 cd 80 cf 	ldm	sp++,r0-r3,r6-r7,pc
80025c10:	80 02       	ld.sh	r2,r0[0x0]
80025c12:	5a 42       	cp.w	r2,-28

80025c14 <flashc_memset64>:


volatile void *flashc_memset64(volatile void *dst, U64 src, size_t nbytes, bool erase)
{
80025c14:	eb cd 40 c0 	pushm	r6-r7,lr
80025c18:	1a 97       	mov	r7,sp
80025c1a:	21 bd       	sub	sp,108
80025c1c:	fe f6 04 14 	ld.w	r6,pc[1044]
80025c20:	1e 26       	rsub	r6,pc
80025c22:	ef 4c ff a4 	st.w	r7[-92],r12
80025c26:	ee eb ff 9c 	st.d	r7[-100],r10
80025c2a:	ef 49 ff 98 	st.w	r7[-104],r9
80025c2e:	ef 68 ff 94 	st.b	r7[-108],r8
  // Use aggregated pointers to have several alignments available for a same address.
  UnionCVPtr flash_array_end;
  UnionVPtr dest;
  Union64 source = {0};
80025c32:	30 08       	mov	r8,0
80025c34:	30 09       	mov	r9,0
80025c36:	ee e9 ff d8 	st.d	r7[-40],r8
  StructCVPtr dest_end;
  UnionCVPtr flash_page_source_end;
  bool incomplete_flash_page_end;
  Union64 flash_dword;
  UnionVPtr tmp;
  unsigned int error_status = 0;
80025c3a:	30 08       	mov	r8,0
80025c3c:	ef 48 ff ec 	st.w	r7[-20],r8
  unsigned int i;

  // Reformat arguments.
  flash_array_end.u8ptr = AVR32_FLASH + flashc_get_flash_size();
80025c40:	f0 16 00 bd 	mcall	r6[756]
80025c44:	18 99       	mov	r9,r12
80025c46:	fc 18 80 00 	movh	r8,0x8000
80025c4a:	f2 08 00 08 	add	r8,r9,r8
80025c4e:	ef 48 ff e4 	st.w	r7[-28],r8
  dest.u8ptr = dst;
80025c52:	ee f8 ff a4 	ld.w	r8,r7[-92]
80025c56:	ef 48 ff e0 	st.w	r7[-32],r8
  for (i = (Get_align((U32)dest.u8ptr, sizeof(U64)) - 1) & (sizeof(U64) - 1);
80025c5a:	ee f8 ff e0 	ld.w	r8,r7[-32]
80025c5e:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80025c62:	20 18       	sub	r8,1
80025c64:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80025c68:	ef 48 ff f0 	st.w	r7[-16],r8
80025c6c:	c1 f8       	rjmp	80025caa <flashc_memset64+0x96>
       src; i = (i - 1) & (sizeof(U64) - 1))
  {
    source.u8[i] = src;
80025c6e:	ee f9 ff f0 	ld.w	r9,r7[-16]
80025c72:	ef 38 ff a3 	ld.ub	r8,r7[-93]
80025c76:	ee 09 00 09 	add	r9,r7,r9
80025c7a:	f3 68 ff d8 	st.b	r9[-40],r8
    src >>= 8;
80025c7e:	ee f8 ff 9c 	ld.w	r8,r7[-100]
80025c82:	b9 68       	lsl	r8,0x18
80025c84:	ee f9 ff a0 	ld.w	r9,r7[-96]
80025c88:	a9 89       	lsr	r9,0x8
80025c8a:	f3 e8 10 08 	or	r8,r9,r8
80025c8e:	ef 48 ff a0 	st.w	r7[-96],r8
80025c92:	ee f8 ff 9c 	ld.w	r8,r7[-100]
80025c96:	a9 88       	lsr	r8,0x8
80025c98:	ef 48 ff 9c 	st.w	r7[-100],r8

  // Reformat arguments.
  flash_array_end.u8ptr = AVR32_FLASH + flashc_get_flash_size();
  dest.u8ptr = dst;
  for (i = (Get_align((U32)dest.u8ptr, sizeof(U64)) - 1) & (sizeof(U64) - 1);
       src; i = (i - 1) & (sizeof(U64) - 1))
80025c9c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80025ca0:	20 18       	sub	r8,1
80025ca2:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80025ca6:	ef 48 ff f0 	st.w	r7[-16],r8
  unsigned int i;

  // Reformat arguments.
  flash_array_end.u8ptr = AVR32_FLASH + flashc_get_flash_size();
  dest.u8ptr = dst;
  for (i = (Get_align((U32)dest.u8ptr, sizeof(U64)) - 1) & (sizeof(U64) - 1);
80025caa:	ee e8 ff 9c 	ld.d	r8,r7[-100]
80025cae:	58 08       	cp.w	r8,0
80025cb0:	5c 29       	cpc	r9
80025cb2:	cd e1       	brne	80025c6e <flashc_memset64+0x5a>
       src; i = (i - 1) & (sizeof(U64) - 1))
  {
    source.u8[i] = src;
    src >>= 8;
  }
  dest_end.u8ptr = dest.u8ptr + nbytes;
80025cb4:	ee f9 ff e0 	ld.w	r9,r7[-32]
80025cb8:	ee f8 ff 98 	ld.w	r8,r7[-104]
80025cbc:	f2 08 00 08 	add	r8,r9,r8
80025cc0:	ef 48 ff d4 	st.w	r7[-44],r8

  // If destination is outside flash, go to next flash page if any.
  if (dest.u8ptr < AVR32_FLASH)
80025cc4:	ee f8 ff e0 	ld.w	r8,r7[-32]
80025cc8:	e0 69 ff ff 	mov	r9,65535
80025ccc:	ea 19 7f ff 	orh	r9,0x7fff
80025cd0:	12 38       	cp.w	r8,r9
80025cd2:	e0 8b 00 07 	brhi	80025ce0 <flashc_memset64+0xcc>
  {
    dest.u8ptr = AVR32_FLASH;
80025cd6:	fc 18 80 00 	movh	r8,0x8000
80025cda:	ef 48 ff e0 	st.w	r7[-32],r8
80025cde:	c1 58       	rjmp	80025d08 <flashc_memset64+0xf4>
  }
  else if (flash_array_end.u8ptr <= dest.u8ptr && dest.u8ptr < AVR32_FLASHC_USER_PAGE)
80025ce0:	ee f9 ff e4 	ld.w	r9,r7[-28]
80025ce4:	ee f8 ff e0 	ld.w	r8,r7[-32]
80025ce8:	10 39       	cp.w	r9,r8
80025cea:	e0 8b 00 0f 	brhi	80025d08 <flashc_memset64+0xf4>
80025cee:	ee f8 ff e0 	ld.w	r8,r7[-32]
80025cf2:	e0 69 ff ff 	mov	r9,65535
80025cf6:	ea 19 80 7f 	orh	r9,0x807f
80025cfa:	12 38       	cp.w	r8,r9
80025cfc:	e0 8b 00 06 	brhi	80025d08 <flashc_memset64+0xf4>
  {
    dest.u8ptr = AVR32_FLASHC_USER_PAGE;
80025d00:	fc 18 80 80 	movh	r8,0x8080
80025d04:	ef 48 ff e0 	st.w	r7[-32],r8
  }

  // If end of destination is outside flash, move it to the end of the previous flash page if any.
  if (dest_end.u8ptr > AVR32_FLASHC_USER_PAGE + AVR32_FLASHC_USER_PAGE_SIZE)
80025d08:	ee f8 ff d4 	ld.w	r8,r7[-44]
80025d0c:	e0 69 02 00 	mov	r9,512
80025d10:	ea 19 80 80 	orh	r9,0x8080
80025d14:	12 38       	cp.w	r8,r9
80025d16:	e0 88 00 09 	brls	80025d28 <flashc_memset64+0x114>
  {
    dest_end.u8ptr = AVR32_FLASHC_USER_PAGE + AVR32_FLASHC_USER_PAGE_SIZE;
80025d1a:	e0 68 02 00 	mov	r8,512
80025d1e:	ea 18 80 80 	orh	r8,0x8080
80025d22:	ef 48 ff d4 	st.w	r7[-44],r8
80025d26:	c1 38       	rjmp	80025d4c <flashc_memset64+0x138>
  }
  else if (AVR32_FLASHC_USER_PAGE >= dest_end.u8ptr && dest_end.u8ptr > flash_array_end.u8ptr)
80025d28:	ee f8 ff d4 	ld.w	r8,r7[-44]
80025d2c:	fc 19 80 80 	movh	r9,0x8080
80025d30:	12 38       	cp.w	r8,r9
80025d32:	e0 8b 00 0d 	brhi	80025d4c <flashc_memset64+0x138>
80025d36:	ee f9 ff d4 	ld.w	r9,r7[-44]
80025d3a:	ee f8 ff e4 	ld.w	r8,r7[-28]
80025d3e:	10 39       	cp.w	r9,r8
80025d40:	e0 88 00 06 	brls	80025d4c <flashc_memset64+0x138>
  {
    dest_end.u8ptr = flash_array_end.u8ptr;
80025d44:	ee f8 ff e4 	ld.w	r8,r7[-28]
80025d48:	ef 48 ff d4 	st.w	r7[-44],r8
  }

  // Align each end of destination pointer with its natural boundary.
  dest_end.u16ptr = (U16 *)Align_down((U32)dest_end.u8ptr, sizeof(U16));
80025d4c:	ee f8 ff d4 	ld.w	r8,r7[-44]
80025d50:	a1 c8       	cbr	r8,0x0
80025d52:	ef 48 ff cc 	st.w	r7[-52],r8
  dest_end.u32ptr = (U32 *)Align_down((U32)dest_end.u16ptr, sizeof(U32));
80025d56:	ee f8 ff cc 	ld.w	r8,r7[-52]
80025d5a:	e0 18 ff fc 	andl	r8,0xfffc
80025d5e:	ef 48 ff c4 	st.w	r7[-60],r8
  dest_end.u64ptr = (U64 *)Align_down((U32)dest_end.u32ptr, sizeof(U64));
80025d62:	ee f8 ff c4 	ld.w	r8,r7[-60]
80025d66:	e0 18 ff f8 	andl	r8,0xfff8
80025d6a:	ef 48 ff bc 	st.w	r7[-68],r8

  // While end of destination is not reached...
  while (dest.u8ptr < dest_end.u8ptr)
80025d6e:	c4 f9       	rjmp	8002600c <flashc_memset64+0x3f8>
  {
    // Clear the page buffer in order to prepare data for a flash page write.
    flashc_clear_page_buffer();
80025d70:	f0 16 01 1e 	mcall	r6[1144]
    error_status |= flashc_error_status;
80025d74:	ec f8 00 54 	ld.w	r8,r6[84]
80025d78:	70 08       	ld.w	r8,r8[0x0]
80025d7a:	ee f9 ff ec 	ld.w	r9,r7[-20]
80025d7e:	f3 e8 10 08 	or	r8,r9,r8
80025d82:	ef 48 ff ec 	st.w	r7[-20],r8

    // Determine where the source data will end in the current flash page.
    flash_page_source_end.u64ptr =
      (U64 *)min((U32)dest_end.u64ptr,
80025d86:	ee f8 ff bc 	ld.w	r8,r7[-68]
80025d8a:	ef 48 ff f8 	st.w	r7[-8],r8
80025d8e:	ee f8 ff e0 	ld.w	r8,r7[-32]
80025d92:	e0 18 fe 00 	andl	r8,0xfe00
80025d96:	f0 c8 fe 00 	sub	r8,r8,-512
80025d9a:	ef 48 ff fc 	st.w	r7[-4],r8
80025d9e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80025da2:	ee f9 ff fc 	ld.w	r9,r7[-4]
80025da6:	f0 09 0d 48 	min	r8,r8,r9
80025daa:	ef 48 ff f4 	st.w	r7[-12],r8
80025dae:	ee f8 ff f4 	ld.w	r8,r7[-12]
    // Clear the page buffer in order to prepare data for a flash page write.
    flashc_clear_page_buffer();
    error_status |= flashc_error_status;

    // Determine where the source data will end in the current flash page.
    flash_page_source_end.u64ptr =
80025db2:	ef 48 ff b4 	st.w	r7[-76],r8
      (U64 *)min((U32)dest_end.u64ptr,
                 Align_down((U32)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE) + AVR32_FLASHC_PAGE_SIZE);

    // Determine if the current destination page has an incomplete end.
    incomplete_flash_page_end = (Align_down((U32)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE) >=
80025db6:	ee f8 ff e0 	ld.w	r8,r7[-32]
80025dba:	10 9a       	mov	r10,r8
80025dbc:	e0 1a fe 00 	andl	r10,0xfe00
                                 Align_down((U32)dest_end.u8ptr, AVR32_FLASHC_PAGE_SIZE));
80025dc0:	ee f8 ff d4 	ld.w	r8,r7[-44]
80025dc4:	10 99       	mov	r9,r8
80025dc6:	e0 19 fe 00 	andl	r9,0xfe00
    flash_page_source_end.u64ptr =
      (U64 *)min((U32)dest_end.u64ptr,
                 Align_down((U32)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE) + AVR32_FLASHC_PAGE_SIZE);

    // Determine if the current destination page has an incomplete end.
    incomplete_flash_page_end = (Align_down((U32)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE) >=
80025dca:	30 18       	mov	r8,1
80025dcc:	12 3a       	cp.w	r10,r9
80025dce:	c0 22       	brcc	80025dd2 <flashc_memset64+0x1be>
80025dd0:	30 08       	mov	r8,0
80025dd2:	ef 68 ff eb 	st.b	r7[-21],r8
                                 Align_down((U32)dest_end.u8ptr, AVR32_FLASHC_PAGE_SIZE));

    // Use a flash double-word buffer to manage unaligned accesses.
    flash_dword.u64 = source.u64;
80025dd6:	ee e8 ff d8 	ld.d	r8,r7[-40]
80025dda:	ee e9 ff ac 	st.d	r7[-84],r8

    // If destination does not point to the beginning of the current flash page...
    if (!Test_align((U32)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE))
80025dde:	ee f8 ff e0 	ld.w	r8,r7[-32]
80025de2:	f1 d8 c0 09 	bfextu	r8,r8,0x0,0x9
80025de6:	c5 b0       	breq	80025e9c <flashc_memset64+0x288>
    {
      // Fill the beginning of the page buffer with the current flash page data.
      // This is required by the hardware, even if page erase is not requested,
      // in order to be able to write successfully to erased parts of flash
      // pages that have already been written to.
      for (tmp.u8ptr = (U8 *)Align_down((U32)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE);
80025de8:	ee f8 ff e0 	ld.w	r8,r7[-32]
80025dec:	e0 18 fe 00 	andl	r8,0xfe00
80025df0:	ef 48 ff a8 	st.w	r7[-88],r8
80025df4:	c0 e8       	rjmp	80025e10 <flashc_memset64+0x1fc>
           tmp.u64ptr < (U64 *)Align_down((U32)dest.u8ptr, sizeof(U64));
           tmp.u64ptr++)
        *tmp.u64ptr = *tmp.u64ptr;
80025df6:	ee fa ff a8 	ld.w	r10,r7[-88]
80025dfa:	ee f8 ff a8 	ld.w	r8,r7[-88]
80025dfe:	f0 e8 00 00 	ld.d	r8,r8[0]
80025e02:	f4 e9 00 00 	st.d	r10[0],r8
      // This is required by the hardware, even if page erase is not requested,
      // in order to be able to write successfully to erased parts of flash
      // pages that have already been written to.
      for (tmp.u8ptr = (U8 *)Align_down((U32)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE);
           tmp.u64ptr < (U64 *)Align_down((U32)dest.u8ptr, sizeof(U64));
           tmp.u64ptr++)
80025e06:	ee f8 ff a8 	ld.w	r8,r7[-88]
80025e0a:	2f 88       	sub	r8,-8
80025e0c:	ef 48 ff a8 	st.w	r7[-88],r8
      // Fill the beginning of the page buffer with the current flash page data.
      // This is required by the hardware, even if page erase is not requested,
      // in order to be able to write successfully to erased parts of flash
      // pages that have already been written to.
      for (tmp.u8ptr = (U8 *)Align_down((U32)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE);
           tmp.u64ptr < (U64 *)Align_down((U32)dest.u8ptr, sizeof(U64));
80025e10:	ee f9 ff a8 	ld.w	r9,r7[-88]
80025e14:	ee f8 ff e0 	ld.w	r8,r7[-32]
80025e18:	e0 18 ff f8 	andl	r8,0xfff8
    {
      // Fill the beginning of the page buffer with the current flash page data.
      // This is required by the hardware, even if page erase is not requested,
      // in order to be able to write successfully to erased parts of flash
      // pages that have already been written to.
      for (tmp.u8ptr = (U8 *)Align_down((U32)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE);
80025e1c:	10 39       	cp.w	r9,r8
80025e1e:	ce c3       	brcs	80025df6 <flashc_memset64+0x1e2>
           tmp.u64ptr < (U64 *)Align_down((U32)dest.u8ptr, sizeof(U64));
           tmp.u64ptr++)
        *tmp.u64ptr = *tmp.u64ptr;

      // If destination is not 64-bit aligned...
      if (!Test_align((U32)dest.u8ptr, sizeof(U64)))
80025e20:	ee f8 ff e0 	ld.w	r8,r7[-32]
80025e24:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80025e28:	c3 a0       	breq	80025e9c <flashc_memset64+0x288>
        // Fill the beginning of the flash double-word buffer with the current
        // flash page data.
        // This is required by the hardware, even if page erase is not
        // requested, in order to be able to write successfully to erased parts
        // of flash pages that have already been written to.
        for (i = 0; i < Get_align((U32)dest.u8ptr, sizeof(U64)); i++)
80025e2a:	30 08       	mov	r8,0
80025e2c:	ef 48 ff f0 	st.w	r7[-16],r8
80025e30:	c1 38       	rjmp	80025e56 <flashc_memset64+0x242>
          flash_dword.u8[i] = *tmp.u8ptr++;
80025e32:	ee fa ff f0 	ld.w	r10,r7[-16]
80025e36:	ee f8 ff a8 	ld.w	r8,r7[-88]
80025e3a:	11 89       	ld.ub	r9,r8[0x0]
80025e3c:	5c 59       	castu.b	r9
80025e3e:	ee 0a 00 0a 	add	r10,r7,r10
80025e42:	f5 69 ff ac 	st.b	r10[-84],r9
80025e46:	2f f8       	sub	r8,-1
80025e48:	ef 48 ff a8 	st.w	r7[-88],r8
        // Fill the beginning of the flash double-word buffer with the current
        // flash page data.
        // This is required by the hardware, even if page erase is not
        // requested, in order to be able to write successfully to erased parts
        // of flash pages that have already been written to.
        for (i = 0; i < Get_align((U32)dest.u8ptr, sizeof(U64)); i++)
80025e4c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80025e50:	2f f8       	sub	r8,-1
80025e52:	ef 48 ff f0 	st.w	r7[-16],r8
80025e56:	ee f8 ff e0 	ld.w	r8,r7[-32]
80025e5a:	f3 d8 c0 03 	bfextu	r9,r8,0x0,0x3
80025e5e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80025e62:	10 39       	cp.w	r9,r8
80025e64:	fe 9b ff e7 	brhi	80025e32 <flashc_memset64+0x21e>
          flash_dword.u8[i] = *tmp.u8ptr++;

        // Align the destination pointer with its 64-bit boundary.
        dest.u64ptr = (U64 *)Align_down((U32)dest.u8ptr, sizeof(U64));
80025e68:	ee f8 ff e0 	ld.w	r8,r7[-32]
80025e6c:	e0 18 ff f8 	andl	r8,0xfff8
80025e70:	ef 48 ff e0 	st.w	r7[-32],r8

        // If the current destination double-word is not the last one...
        if (dest.u64ptr < dest_end.u64ptr)
80025e74:	ee f9 ff e0 	ld.w	r9,r7[-32]
80025e78:	ee f8 ff bc 	ld.w	r8,r7[-68]
80025e7c:	10 39       	cp.w	r9,r8
80025e7e:	c0 f2       	brcc	80025e9c <flashc_memset64+0x288>
        {
          // Write the flash double-word buffer to the page buffer and reinitialize it.
          *dest.u64ptr++ = flash_dword.u64;
80025e80:	ee fa ff e0 	ld.w	r10,r7[-32]
80025e84:	ee e8 ff ac 	ld.d	r8,r7[-84]
80025e88:	f4 e9 00 00 	st.d	r10[0],r8
80025e8c:	f4 c8 ff f8 	sub	r8,r10,-8
80025e90:	ef 48 ff e0 	st.w	r7[-32],r8
          flash_dword.u64 = source.u64;
80025e94:	ee e8 ff d8 	ld.d	r8,r7[-40]
80025e98:	ee e9 ff ac 	st.d	r7[-84],r8
        }
      }
    }

    // Write the source data to the page buffer with 64-bit alignment.
    for (i = flash_page_source_end.u64ptr - dest.u64ptr; i; i--)
80025e9c:	ee f8 ff b4 	ld.w	r8,r7[-76]
80025ea0:	10 99       	mov	r9,r8
80025ea2:	ee f8 ff e0 	ld.w	r8,r7[-32]
80025ea6:	f2 08 01 08 	sub	r8,r9,r8
80025eaa:	a3 58       	asr	r8,0x3
80025eac:	ef 48 ff f0 	st.w	r7[-16],r8
80025eb0:	c1 08       	rjmp	80025ed0 <flashc_memset64+0x2bc>
      *dest.u64ptr++ = source.u64;
80025eb2:	ee fa ff e0 	ld.w	r10,r7[-32]
80025eb6:	ee e8 ff d8 	ld.d	r8,r7[-40]
80025eba:	f4 e9 00 00 	st.d	r10[0],r8
80025ebe:	f4 c8 ff f8 	sub	r8,r10,-8
80025ec2:	ef 48 ff e0 	st.w	r7[-32],r8
        }
      }
    }

    // Write the source data to the page buffer with 64-bit alignment.
    for (i = flash_page_source_end.u64ptr - dest.u64ptr; i; i--)
80025ec6:	ee f8 ff f0 	ld.w	r8,r7[-16]
80025eca:	20 18       	sub	r8,1
80025ecc:	ef 48 ff f0 	st.w	r7[-16],r8
80025ed0:	ee f8 ff f0 	ld.w	r8,r7[-16]
80025ed4:	58 08       	cp.w	r8,0
80025ed6:	ce e1       	brne	80025eb2 <flashc_memset64+0x29e>
      *dest.u64ptr++ = source.u64;

    // If the current destination page has an incomplete end...
    if (incomplete_flash_page_end)
80025ed8:	ef 39 ff eb 	ld.ub	r9,r7[-21]
80025edc:	30 08       	mov	r8,0
80025ede:	f0 09 18 00 	cp.b	r9,r8
80025ee2:	c4 70       	breq	80025f70 <flashc_memset64+0x35c>
    {
      // This is required by the hardware, even if page erase is not requested,
      // in order to be able to write successfully to erased parts of flash
      // pages that have already been written to.
      {
        tmp.u8ptr = (volatile U8 *)dest_end.u8ptr;
80025ee4:	ee f8 ff d4 	ld.w	r8,r7[-44]
80025ee8:	ef 48 ff a8 	st.w	r7[-88],r8

        // If end of destination is not 64-bit aligned...
        if (!Test_align((U32)dest_end.u8ptr, sizeof(U64)))
80025eec:	ee f8 ff d4 	ld.w	r8,r7[-44]
80025ef0:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80025ef4:	c3 80       	breq	80025f64 <flashc_memset64+0x350>
        {
          // Fill the end of the flash double-word buffer with the current flash page data.
          for (i = Get_align((U32)dest_end.u8ptr, sizeof(U64)); i < sizeof(U64); i++)
80025ef6:	ee f8 ff d4 	ld.w	r8,r7[-44]
80025efa:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80025efe:	ef 48 ff f0 	st.w	r7[-16],r8
80025f02:	c1 38       	rjmp	80025f28 <flashc_memset64+0x314>
            flash_dword.u8[i] = *tmp.u8ptr++;
80025f04:	ee fa ff f0 	ld.w	r10,r7[-16]
80025f08:	ee f8 ff a8 	ld.w	r8,r7[-88]
80025f0c:	11 89       	ld.ub	r9,r8[0x0]
80025f0e:	5c 59       	castu.b	r9
80025f10:	ee 0a 00 0a 	add	r10,r7,r10
80025f14:	f5 69 ff ac 	st.b	r10[-84],r9
80025f18:	2f f8       	sub	r8,-1
80025f1a:	ef 48 ff a8 	st.w	r7[-88],r8

        // If end of destination is not 64-bit aligned...
        if (!Test_align((U32)dest_end.u8ptr, sizeof(U64)))
        {
          // Fill the end of the flash double-word buffer with the current flash page data.
          for (i = Get_align((U32)dest_end.u8ptr, sizeof(U64)); i < sizeof(U64); i++)
80025f1e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80025f22:	2f f8       	sub	r8,-1
80025f24:	ef 48 ff f0 	st.w	r7[-16],r8
80025f28:	ee f8 ff f0 	ld.w	r8,r7[-16]
80025f2c:	58 78       	cp.w	r8,7
80025f2e:	fe 98 ff eb 	brls	80025f04 <flashc_memset64+0x2f0>
            flash_dword.u8[i] = *tmp.u8ptr++;

          // Write the flash double-word buffer to the page buffer.
          *dest.u64ptr++ = flash_dword.u64;
80025f32:	ee fa ff e0 	ld.w	r10,r7[-32]
80025f36:	ee e8 ff ac 	ld.d	r8,r7[-84]
80025f3a:	f4 e9 00 00 	st.d	r10[0],r8
80025f3e:	f4 c8 ff f8 	sub	r8,r10,-8
80025f42:	ef 48 ff e0 	st.w	r7[-32],r8
        }

        // Fill the end of the page buffer with the current flash page data.
        for (; !Test_align((U32)tmp.u64ptr, AVR32_FLASHC_PAGE_SIZE); tmp.u64ptr++)
80025f46:	c1 08       	rjmp	80025f66 <flashc_memset64+0x352>
          *tmp.u64ptr = *tmp.u64ptr;
80025f48:	ee fa ff a8 	ld.w	r10,r7[-88]
80025f4c:	ee f8 ff a8 	ld.w	r8,r7[-88]
80025f50:	f0 e8 00 00 	ld.d	r8,r8[0]
80025f54:	f4 e9 00 00 	st.d	r10[0],r8
          // Write the flash double-word buffer to the page buffer.
          *dest.u64ptr++ = flash_dword.u64;
        }

        // Fill the end of the page buffer with the current flash page data.
        for (; !Test_align((U32)tmp.u64ptr, AVR32_FLASHC_PAGE_SIZE); tmp.u64ptr++)
80025f58:	ee f8 ff a8 	ld.w	r8,r7[-88]
80025f5c:	2f 88       	sub	r8,-8
80025f5e:	ef 48 ff a8 	st.w	r7[-88],r8
80025f62:	c0 28       	rjmp	80025f66 <flashc_memset64+0x352>
80025f64:	d7 03       	nop
80025f66:	ee f8 ff a8 	ld.w	r8,r7[-88]
80025f6a:	f1 d8 c0 09 	bfextu	r8,r8,0x0,0x9
80025f6e:	ce d1       	brne	80025f48 <flashc_memset64+0x334>
          *tmp.u64ptr = *tmp.u64ptr;
      }
    }

    // If the current flash page is in the flash array...
    if (dest.u8ptr <= AVR32_FLASHC_USER_PAGE)
80025f70:	ee f8 ff e0 	ld.w	r8,r7[-32]
80025f74:	fc 19 80 80 	movh	r9,0x8080
80025f78:	12 38       	cp.w	r8,r9
80025f7a:	e0 8b 00 2c 	brhi	80025fd2 <flashc_memset64+0x3be>
    {
      // Erase the current page if requested and write it from the page buffer.
      if (erase)
80025f7e:	ef 39 ff 94 	ld.ub	r9,r7[-108]
80025f82:	30 08       	mov	r8,0
80025f84:	f0 09 18 00 	cp.b	r9,r8
80025f88:	c0 e0       	breq	80025fa4 <flashc_memset64+0x390>
      {
        flashc_erase_page(-1, false);
80025f8a:	30 0b       	mov	r11,0
80025f8c:	3f fc       	mov	r12,-1
80025f8e:	f0 16 00 99 	mcall	r6[612]
        error_status |= flashc_error_status;
80025f92:	ec f8 00 54 	ld.w	r8,r6[84]
80025f96:	70 08       	ld.w	r8,r8[0x0]
80025f98:	ee f9 ff ec 	ld.w	r9,r7[-20]
80025f9c:	f3 e8 10 08 	or	r8,r9,r8
80025fa0:	ef 48 ff ec 	st.w	r7[-20],r8
      }
      flashc_write_page(-1);
80025fa4:	3f fc       	mov	r12,-1
80025fa6:	f0 16 00 ee 	mcall	r6[952]
      error_status |= flashc_error_status;
80025faa:	ec f8 00 54 	ld.w	r8,r6[84]
80025fae:	70 08       	ld.w	r8,r8[0x0]
80025fb0:	ee f9 ff ec 	ld.w	r9,r7[-20]
80025fb4:	f3 e8 10 08 	or	r8,r9,r8
80025fb8:	ef 48 ff ec 	st.w	r7[-20],r8

      // If the end of the flash array is reached, go to the User page.
      if (dest.u8ptr >= flash_array_end.u8ptr)
80025fbc:	ee f9 ff e0 	ld.w	r9,r7[-32]
80025fc0:	ee f8 ff e4 	ld.w	r8,r7[-28]
80025fc4:	10 39       	cp.w	r9,r8
80025fc6:	c2 33       	brcs	8002600c <flashc_memset64+0x3f8>
        dest.u8ptr = AVR32_FLASHC_USER_PAGE;
80025fc8:	fc 18 80 80 	movh	r8,0x8080
80025fcc:	ef 48 ff e0 	st.w	r7[-32],r8
80025fd0:	c1 e8       	rjmp	8002600c <flashc_memset64+0x3f8>
    }
    // If the current flash page is the User page...
    else
    {
      // Erase the User page if requested and write it from the page buffer.
      if (erase)
80025fd2:	ef 39 ff 94 	ld.ub	r9,r7[-108]
80025fd6:	30 08       	mov	r8,0
80025fd8:	f0 09 18 00 	cp.b	r9,r8
80025fdc:	c0 d0       	breq	80025ff6 <flashc_memset64+0x3e2>
      {
        flashc_erase_user_page(false);
80025fde:	30 0c       	mov	r12,0
80025fe0:	f0 16 01 23 	mcall	r6[1164]
        error_status |= flashc_error_status;
80025fe4:	ec f8 00 54 	ld.w	r8,r6[84]
80025fe8:	70 08       	ld.w	r8,r8[0x0]
80025fea:	ee f9 ff ec 	ld.w	r9,r7[-20]
80025fee:	f3 e8 10 08 	or	r8,r9,r8
80025ff2:	ef 48 ff ec 	st.w	r7[-20],r8
      }
      flashc_write_user_page();
80025ff6:	f0 16 00 ed 	mcall	r6[948]
      error_status |= flashc_error_status;
80025ffa:	ec f8 00 54 	ld.w	r8,r6[84]
80025ffe:	70 08       	ld.w	r8,r8[0x0]
80026000:	ee f9 ff ec 	ld.w	r9,r7[-20]
80026004:	f3 e8 10 08 	or	r8,r9,r8
80026008:	ef 48 ff ec 	st.w	r7[-20],r8
  dest_end.u16ptr = (U16 *)Align_down((U32)dest_end.u8ptr, sizeof(U16));
  dest_end.u32ptr = (U32 *)Align_down((U32)dest_end.u16ptr, sizeof(U32));
  dest_end.u64ptr = (U64 *)Align_down((U32)dest_end.u32ptr, sizeof(U64));

  // While end of destination is not reached...
  while (dest.u8ptr < dest_end.u8ptr)
8002600c:	ee f9 ff e0 	ld.w	r9,r7[-32]
80026010:	ee f8 ff d4 	ld.w	r8,r7[-44]
80026014:	10 39       	cp.w	r9,r8
80026016:	fe 93 fe ad 	brlo	80025d70 <flashc_memset64+0x15c>
      error_status |= flashc_error_status;
    }
  }

  // Update the FLASHC error status.
  flashc_error_status = error_status;
8002601a:	ec f8 00 54 	ld.w	r8,r6[84]
8002601e:	ee f9 ff ec 	ld.w	r9,r7[-20]
80026022:	91 09       	st.w	r8[0x0],r9

  // Return the initial destination pointer as the standard memset function does.
  return dst;
80026024:	ee f8 ff a4 	ld.w	r8,r7[-92]
}
80026028:	10 9c       	mov	r12,r8
8002602a:	2e 5d       	sub	sp,-108
8002602c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80026030:	80 02       	ld.sh	r2,r0[0x0]
80026032:	5a a4       	cp.w	r4,-22

80026034 <flashc_memcpy>:


volatile void *flashc_memcpy(volatile void *dst, const void *src, size_t nbytes, bool erase)
{
80026034:	eb cd 40 c0 	pushm	r6-r7,lr
80026038:	1a 97       	mov	r7,sp
8002603a:	21 ad       	sub	sp,104
8002603c:	fe f6 05 80 	ld.w	r6,pc[1408]
80026040:	1e 26       	rsub	r6,pc
80026042:	ef 4c ff a4 	st.w	r7[-92],r12
80026046:	ef 4b ff a0 	st.w	r7[-96],r11
8002604a:	ef 4a ff 9c 	st.w	r7[-100],r10
8002604e:	12 98       	mov	r8,r9
80026050:	ef 68 ff 98 	st.b	r7[-104],r8
  UnionCPtr source;
  StructCVPtr dest_end;
  UnionCVPtr flash_page_source_end;
  bool incomplete_flash_page_end;
  Union64 flash_dword;
  bool flash_dword_pending = false;
80026054:	30 08       	mov	r8,0
80026056:	ef 68 ff e7 	st.b	r7[-25],r8
  UnionVPtr tmp;
  unsigned int error_status = 0;
8002605a:	30 08       	mov	r8,0
8002605c:	ef 48 ff e8 	st.w	r7[-24],r8
  unsigned int i, j;

  // Reformat arguments.
  flash_array_end.u8ptr = AVR32_FLASH + flashc_get_flash_size();
80026060:	f0 16 00 bd 	mcall	r6[756]
80026064:	18 99       	mov	r9,r12
80026066:	fc 18 80 00 	movh	r8,0x8000
8002606a:	f2 08 00 08 	add	r8,r9,r8
8002606e:	ef 48 ff e0 	st.w	r7[-32],r8
  dest.u8ptr = dst;
80026072:	ee f8 ff a4 	ld.w	r8,r7[-92]
80026076:	ef 48 ff dc 	st.w	r7[-36],r8
  source.u8ptr = src;
8002607a:	ee f8 ff a0 	ld.w	r8,r7[-96]
8002607e:	ef 48 ff d8 	st.w	r7[-40],r8
  dest_end.u8ptr = dest.u8ptr + nbytes;
80026082:	ee f9 ff dc 	ld.w	r9,r7[-36]
80026086:	ee f8 ff 9c 	ld.w	r8,r7[-100]
8002608a:	f2 08 00 08 	add	r8,r9,r8
8002608e:	ef 48 ff d4 	st.w	r7[-44],r8

  // If destination is outside flash, go to next flash page if any.
  if (dest.u8ptr < AVR32_FLASH)
80026092:	ee f8 ff dc 	ld.w	r8,r7[-36]
80026096:	e0 6a ff ff 	mov	r10,65535
8002609a:	ea 1a 7f ff 	orh	r10,0x7fff
8002609e:	14 38       	cp.w	r8,r10
800260a0:	e0 8b 00 13 	brhi	800260c6 <flashc_memcpy+0x92>
  {
    source.u8ptr += AVR32_FLASH - dest.u8ptr;
800260a4:	ee f9 ff d8 	ld.w	r9,r7[-40]
800260a8:	ee f8 ff dc 	ld.w	r8,r7[-36]
800260ac:	fc 1a 80 00 	movh	r10,0x8000
800260b0:	f4 08 01 08 	sub	r8,r10,r8
800260b4:	f2 08 00 08 	add	r8,r9,r8
800260b8:	ef 48 ff d8 	st.w	r7[-40],r8
    dest.u8ptr = AVR32_FLASH;
800260bc:	fc 18 80 00 	movh	r8,0x8000
800260c0:	ef 48 ff dc 	st.w	r7[-36],r8
800260c4:	c2 18       	rjmp	80026106 <flashc_memcpy+0xd2>
  }
  else if (flash_array_end.u8ptr <= dest.u8ptr && dest.u8ptr < AVR32_FLASHC_USER_PAGE)
800260c6:	ee f9 ff e0 	ld.w	r9,r7[-32]
800260ca:	ee f8 ff dc 	ld.w	r8,r7[-36]
800260ce:	10 39       	cp.w	r9,r8
800260d0:	e0 8b 00 1b 	brhi	80026106 <flashc_memcpy+0xd2>
800260d4:	ee f8 ff dc 	ld.w	r8,r7[-36]
800260d8:	e0 69 ff ff 	mov	r9,65535
800260dc:	ea 19 80 7f 	orh	r9,0x807f
800260e0:	12 38       	cp.w	r8,r9
800260e2:	e0 8b 00 12 	brhi	80026106 <flashc_memcpy+0xd2>
  {
    source.u8ptr += AVR32_FLASHC_USER_PAGE - dest.u8ptr;
800260e6:	ee f9 ff d8 	ld.w	r9,r7[-40]
800260ea:	ee f8 ff dc 	ld.w	r8,r7[-36]
800260ee:	fc 1a 80 80 	movh	r10,0x8080
800260f2:	f4 08 01 08 	sub	r8,r10,r8
800260f6:	f2 08 00 08 	add	r8,r9,r8
800260fa:	ef 48 ff d8 	st.w	r7[-40],r8
    dest.u8ptr = AVR32_FLASHC_USER_PAGE;
800260fe:	fc 18 80 80 	movh	r8,0x8080
80026102:	ef 48 ff dc 	st.w	r7[-36],r8
  }

  // If end of destination is outside flash, move it to the end of the previous flash page if any.
  if (dest_end.u8ptr > AVR32_FLASHC_USER_PAGE + AVR32_FLASHC_USER_PAGE_SIZE)
80026106:	ee f8 ff d4 	ld.w	r8,r7[-44]
8002610a:	e0 69 02 00 	mov	r9,512
8002610e:	ea 19 80 80 	orh	r9,0x8080
80026112:	12 38       	cp.w	r8,r9
80026114:	e0 88 00 09 	brls	80026126 <flashc_memcpy+0xf2>
  {
    dest_end.u8ptr = AVR32_FLASHC_USER_PAGE + AVR32_FLASHC_USER_PAGE_SIZE;
80026118:	e0 68 02 00 	mov	r8,512
8002611c:	ea 18 80 80 	orh	r8,0x8080
80026120:	ef 48 ff d4 	st.w	r7[-44],r8
80026124:	c1 38       	rjmp	8002614a <flashc_memcpy+0x116>
  }
  else if (AVR32_FLASHC_USER_PAGE >= dest_end.u8ptr && dest_end.u8ptr > flash_array_end.u8ptr)
80026126:	ee f8 ff d4 	ld.w	r8,r7[-44]
8002612a:	fc 1a 80 80 	movh	r10,0x8080
8002612e:	14 38       	cp.w	r8,r10
80026130:	e0 8b 00 0d 	brhi	8002614a <flashc_memcpy+0x116>
80026134:	ee f9 ff d4 	ld.w	r9,r7[-44]
80026138:	ee f8 ff e0 	ld.w	r8,r7[-32]
8002613c:	10 39       	cp.w	r9,r8
8002613e:	e0 88 00 06 	brls	8002614a <flashc_memcpy+0x116>
  {
    dest_end.u8ptr = flash_array_end.u8ptr;
80026142:	ee f8 ff e0 	ld.w	r8,r7[-32]
80026146:	ef 48 ff d4 	st.w	r7[-44],r8
  }

  // Align each end of destination pointer with its natural boundary.
  dest_end.u16ptr = (U16 *)Align_down((U32)dest_end.u8ptr, sizeof(U16));
8002614a:	ee f8 ff d4 	ld.w	r8,r7[-44]
8002614e:	a1 c8       	cbr	r8,0x0
80026150:	ef 48 ff cc 	st.w	r7[-52],r8
  dest_end.u32ptr = (U32 *)Align_down((U32)dest_end.u16ptr, sizeof(U32));
80026154:	ee f8 ff cc 	ld.w	r8,r7[-52]
80026158:	e0 18 ff fc 	andl	r8,0xfffc
8002615c:	ef 48 ff c4 	st.w	r7[-60],r8
  dest_end.u64ptr = (U64 *)Align_down((U32)dest_end.u32ptr, sizeof(U64));
80026160:	ee f8 ff c4 	ld.w	r8,r7[-60]
80026164:	e0 18 ff f8 	andl	r8,0xfff8
80026168:	ef 48 ff bc 	st.w	r7[-68],r8

  // While end of destination is not reached...
  while (dest.u8ptr < dest_end.u8ptr)
8002616c:	e0 8f 02 16 	bral	80026598 <flashc_memcpy+0x564>
  {
    // Clear the page buffer in order to prepare data for a flash page write.
    flashc_clear_page_buffer();
80026170:	f0 16 01 1e 	mcall	r6[1144]
    error_status |= flashc_error_status;
80026174:	ec f8 00 54 	ld.w	r8,r6[84]
80026178:	70 08       	ld.w	r8,r8[0x0]
8002617a:	ee f9 ff e8 	ld.w	r9,r7[-24]
8002617e:	f3 e8 10 08 	or	r8,r9,r8
80026182:	ef 48 ff e8 	st.w	r7[-24],r8

    // Determine where the source data will end in the current flash page.
    flash_page_source_end.u64ptr =
      (U64 *)min((U32)dest_end.u64ptr,
80026186:	ee f8 ff bc 	ld.w	r8,r7[-68]
8002618a:	ef 48 ff f8 	st.w	r7[-8],r8
8002618e:	ee f8 ff dc 	ld.w	r8,r7[-36]
80026192:	e0 18 fe 00 	andl	r8,0xfe00
80026196:	f0 c8 fe 00 	sub	r8,r8,-512
8002619a:	ef 48 ff fc 	st.w	r7[-4],r8
8002619e:	ee f8 ff f8 	ld.w	r8,r7[-8]
800261a2:	ee f9 ff fc 	ld.w	r9,r7[-4]
800261a6:	f0 09 0d 48 	min	r8,r8,r9
800261aa:	ef 48 ff f4 	st.w	r7[-12],r8
800261ae:	ee f8 ff f4 	ld.w	r8,r7[-12]
    // Clear the page buffer in order to prepare data for a flash page write.
    flashc_clear_page_buffer();
    error_status |= flashc_error_status;

    // Determine where the source data will end in the current flash page.
    flash_page_source_end.u64ptr =
800261b2:	ef 48 ff b4 	st.w	r7[-76],r8
      (U64 *)min((U32)dest_end.u64ptr,
                 Align_down((U32)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE) + AVR32_FLASHC_PAGE_SIZE);

    // Determine if the current destination page has an incomplete end.
    incomplete_flash_page_end = (Align_down((U32)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE) >=
800261b6:	ee f8 ff dc 	ld.w	r8,r7[-36]
800261ba:	10 9a       	mov	r10,r8
800261bc:	e0 1a fe 00 	andl	r10,0xfe00
                                 Align_down((U32)dest_end.u8ptr, AVR32_FLASHC_PAGE_SIZE));
800261c0:	ee f8 ff d4 	ld.w	r8,r7[-44]
800261c4:	10 99       	mov	r9,r8
800261c6:	e0 19 fe 00 	andl	r9,0xfe00
    flash_page_source_end.u64ptr =
      (U64 *)min((U32)dest_end.u64ptr,
                 Align_down((U32)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE) + AVR32_FLASHC_PAGE_SIZE);

    // Determine if the current destination page has an incomplete end.
    incomplete_flash_page_end = (Align_down((U32)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE) >=
800261ca:	30 18       	mov	r8,1
800261cc:	12 3a       	cp.w	r10,r9
800261ce:	c0 22       	brcc	800261d2 <flashc_memcpy+0x19e>
800261d0:	30 08       	mov	r8,0
800261d2:	ef 68 ff e6 	st.b	r7[-26],r8
                                 Align_down((U32)dest_end.u8ptr, AVR32_FLASHC_PAGE_SIZE));

    // If destination does not point to the beginning of the current flash page...
    if (!Test_align((U32)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE))
800261d6:	ee f8 ff dc 	ld.w	r8,r7[-36]
800261da:	f1 d8 c0 09 	bfextu	r8,r8,0x0,0x9
800261de:	c7 20       	breq	800262c2 <flashc_memcpy+0x28e>
    {
      // Fill the beginning of the page buffer with the current flash page data.
      // This is required by the hardware, even if page erase is not requested,
      // in order to be able to write successfully to erased parts of flash
      // pages that have already been written to.
      for (tmp.u8ptr = (U8 *)Align_down((U32)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE);
800261e0:	ee f8 ff dc 	ld.w	r8,r7[-36]
800261e4:	e0 18 fe 00 	andl	r8,0xfe00
800261e8:	ef 48 ff a8 	st.w	r7[-88],r8
800261ec:	c0 e8       	rjmp	80026208 <flashc_memcpy+0x1d4>
           tmp.u64ptr < (U64 *)Align_down((U32)dest.u8ptr, sizeof(U64));
           tmp.u64ptr++)
        *tmp.u64ptr = *tmp.u64ptr;
800261ee:	ee fa ff a8 	ld.w	r10,r7[-88]
800261f2:	ee f8 ff a8 	ld.w	r8,r7[-88]
800261f6:	f0 e8 00 00 	ld.d	r8,r8[0]
800261fa:	f4 e9 00 00 	st.d	r10[0],r8
      // This is required by the hardware, even if page erase is not requested,
      // in order to be able to write successfully to erased parts of flash
      // pages that have already been written to.
      for (tmp.u8ptr = (U8 *)Align_down((U32)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE);
           tmp.u64ptr < (U64 *)Align_down((U32)dest.u8ptr, sizeof(U64));
           tmp.u64ptr++)
800261fe:	ee f8 ff a8 	ld.w	r8,r7[-88]
80026202:	2f 88       	sub	r8,-8
80026204:	ef 48 ff a8 	st.w	r7[-88],r8
      // Fill the beginning of the page buffer with the current flash page data.
      // This is required by the hardware, even if page erase is not requested,
      // in order to be able to write successfully to erased parts of flash
      // pages that have already been written to.
      for (tmp.u8ptr = (U8 *)Align_down((U32)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE);
           tmp.u64ptr < (U64 *)Align_down((U32)dest.u8ptr, sizeof(U64));
80026208:	ee f9 ff a8 	ld.w	r9,r7[-88]
8002620c:	ee f8 ff dc 	ld.w	r8,r7[-36]
80026210:	e0 18 ff f8 	andl	r8,0xfff8
    {
      // Fill the beginning of the page buffer with the current flash page data.
      // This is required by the hardware, even if page erase is not requested,
      // in order to be able to write successfully to erased parts of flash
      // pages that have already been written to.
      for (tmp.u8ptr = (U8 *)Align_down((U32)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE);
80026214:	10 39       	cp.w	r9,r8
80026216:	ce c3       	brcs	800261ee <flashc_memcpy+0x1ba>
           tmp.u64ptr < (U64 *)Align_down((U32)dest.u8ptr, sizeof(U64));
           tmp.u64ptr++)
        *tmp.u64ptr = *tmp.u64ptr;

      // If destination is not 64-bit aligned...
      if (!Test_align((U32)dest.u8ptr, sizeof(U64)))
80026218:	ee f8 ff dc 	ld.w	r8,r7[-36]
8002621c:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80026220:	c5 10       	breq	800262c2 <flashc_memcpy+0x28e>
        // Fill the beginning of the flash double-word buffer with the current
        // flash page data.
        // This is required by the hardware, even if page erase is not
        // requested, in order to be able to write successfully to erased parts
        // of flash pages that have already been written to.
        for (i = 0; i < Get_align((U32)dest.u8ptr, sizeof(U64)); i++)
80026222:	30 08       	mov	r8,0
80026224:	ef 48 ff ec 	st.w	r7[-20],r8
80026228:	c1 38       	rjmp	8002624e <flashc_memcpy+0x21a>
          flash_dword.u8[i] = *tmp.u8ptr++;
8002622a:	ee fa ff ec 	ld.w	r10,r7[-20]
8002622e:	ee f8 ff a8 	ld.w	r8,r7[-88]
80026232:	11 89       	ld.ub	r9,r8[0x0]
80026234:	5c 59       	castu.b	r9
80026236:	ee 0a 00 0a 	add	r10,r7,r10
8002623a:	f5 69 ff ac 	st.b	r10[-84],r9
8002623e:	2f f8       	sub	r8,-1
80026240:	ef 48 ff a8 	st.w	r7[-88],r8
        // Fill the beginning of the flash double-word buffer with the current
        // flash page data.
        // This is required by the hardware, even if page erase is not
        // requested, in order to be able to write successfully to erased parts
        // of flash pages that have already been written to.
        for (i = 0; i < Get_align((U32)dest.u8ptr, sizeof(U64)); i++)
80026244:	ee f8 ff ec 	ld.w	r8,r7[-20]
80026248:	2f f8       	sub	r8,-1
8002624a:	ef 48 ff ec 	st.w	r7[-20],r8
8002624e:	ee f8 ff dc 	ld.w	r8,r7[-36]
80026252:	f3 d8 c0 03 	bfextu	r9,r8,0x0,0x3
80026256:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002625a:	10 39       	cp.w	r9,r8
8002625c:	fe 9b ff e7 	brhi	8002622a <flashc_memcpy+0x1f6>
          flash_dword.u8[i] = *tmp.u8ptr++;

        // Fill the end of the flash double-word buffer with the source data.
        for (; i < sizeof(U64); i++)
80026260:	c1 28       	rjmp	80026284 <flashc_memcpy+0x250>
          flash_dword.u8[i] = *source.u8ptr++;
80026262:	ee fa ff ec 	ld.w	r10,r7[-20]
80026266:	ee f8 ff d8 	ld.w	r8,r7[-40]
8002626a:	11 89       	ld.ub	r9,r8[0x0]
8002626c:	ee 0a 00 0a 	add	r10,r7,r10
80026270:	f5 69 ff ac 	st.b	r10[-84],r9
80026274:	2f f8       	sub	r8,-1
80026276:	ef 48 ff d8 	st.w	r7[-40],r8
        // of flash pages that have already been written to.
        for (i = 0; i < Get_align((U32)dest.u8ptr, sizeof(U64)); i++)
          flash_dword.u8[i] = *tmp.u8ptr++;

        // Fill the end of the flash double-word buffer with the source data.
        for (; i < sizeof(U64); i++)
8002627a:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002627e:	2f f8       	sub	r8,-1
80026280:	ef 48 ff ec 	st.w	r7[-20],r8
80026284:	ee f8 ff ec 	ld.w	r8,r7[-20]
80026288:	58 78       	cp.w	r8,7
8002628a:	fe 98 ff ec 	brls	80026262 <flashc_memcpy+0x22e>
          flash_dword.u8[i] = *source.u8ptr++;

        // Align the destination pointer with its 64-bit boundary.
        dest.u64ptr = (U64 *)Align_down((U32)dest.u8ptr, sizeof(U64));
8002628e:	ee f8 ff dc 	ld.w	r8,r7[-36]
80026292:	e0 18 ff f8 	andl	r8,0xfff8
80026296:	ef 48 ff dc 	st.w	r7[-36],r8

        // If the current destination double-word is not the last one...
        if (dest.u64ptr < dest_end.u64ptr)
8002629a:	ee f9 ff dc 	ld.w	r9,r7[-36]
8002629e:	ee f8 ff bc 	ld.w	r8,r7[-68]
800262a2:	10 39       	cp.w	r9,r8
800262a4:	c0 c2       	brcc	800262bc <flashc_memcpy+0x288>
        {
          // Write the flash double-word buffer to the page buffer.
          *dest.u64ptr++ = flash_dword.u64;
800262a6:	ee fa ff dc 	ld.w	r10,r7[-36]
800262aa:	ee e8 ff ac 	ld.d	r8,r7[-84]
800262ae:	f4 e9 00 00 	st.d	r10[0],r8
800262b2:	f4 c8 ff f8 	sub	r8,r10,-8
800262b6:	ef 48 ff dc 	st.w	r7[-36],r8
800262ba:	c0 48       	rjmp	800262c2 <flashc_memcpy+0x28e>
        }
        // If the current destination double-word is the last one, the flash
        // double-word buffer must be kept for later.
        else flash_dword_pending = true;
800262bc:	30 18       	mov	r8,1
800262be:	ef 68 ff e7 	st.b	r7[-25],r8
      }
    }

    // Read the source data with the maximal possible alignment and write it to
    // the page buffer with 64-bit alignment.
    switch (Get_align((U32)source.u8ptr, sizeof(U32)))
800262c2:	ee f8 ff d8 	ld.w	r8,r7[-40]
800262c6:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
800262ca:	c0 40       	breq	800262d2 <flashc_memcpy+0x29e>
800262cc:	58 28       	cp.w	r8,2
800262ce:	c2 70       	breq	8002631c <flashc_memcpy+0x2e8>
800262d0:	c6 18       	rjmp	80026392 <flashc_memcpy+0x35e>
    {
    case 0:
      for (i = flash_page_source_end.u64ptr - dest.u64ptr; i; i--)
800262d2:	ee f8 ff b4 	ld.w	r8,r7[-76]
800262d6:	10 99       	mov	r9,r8
800262d8:	ee f8 ff dc 	ld.w	r8,r7[-36]
800262dc:	f2 08 01 08 	sub	r8,r9,r8
800262e0:	a3 58       	asr	r8,0x3
800262e2:	ef 48 ff ec 	st.w	r7[-20],r8
800262e6:	c1 68       	rjmp	80026312 <flashc_memcpy+0x2de>
        *dest.u64ptr++ = *source.u64ptr++;
800262e8:	ee fb ff dc 	ld.w	r11,r7[-36]
800262ec:	ee fa ff d8 	ld.w	r10,r7[-40]
800262f0:	f4 e8 00 00 	ld.d	r8,r10[0]
800262f4:	f6 e9 00 00 	st.d	r11[0],r8
800262f8:	f6 c8 ff f8 	sub	r8,r11,-8
800262fc:	ef 48 ff dc 	st.w	r7[-36],r8
80026300:	f4 c8 ff f8 	sub	r8,r10,-8
80026304:	ef 48 ff d8 	st.w	r7[-40],r8
    // Read the source data with the maximal possible alignment and write it to
    // the page buffer with 64-bit alignment.
    switch (Get_align((U32)source.u8ptr, sizeof(U32)))
    {
    case 0:
      for (i = flash_page_source_end.u64ptr - dest.u64ptr; i; i--)
80026308:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002630c:	20 18       	sub	r8,1
8002630e:	ef 48 ff ec 	st.w	r7[-20],r8
80026312:	ee f8 ff ec 	ld.w	r8,r7[-20]
80026316:	58 08       	cp.w	r8,0
80026318:	ce 81       	brne	800262e8 <flashc_memcpy+0x2b4>
        *dest.u64ptr++ = *source.u64ptr++;
      break;
8002631a:	c7 48       	rjmp	80026402 <flashc_memcpy+0x3ce>

    case sizeof(U16):
      for (i = flash_page_source_end.u64ptr - dest.u64ptr; i; i--)
8002631c:	ee f8 ff b4 	ld.w	r8,r7[-76]
80026320:	10 99       	mov	r9,r8
80026322:	ee f8 ff dc 	ld.w	r8,r7[-36]
80026326:	f2 08 01 08 	sub	r8,r9,r8
8002632a:	a3 58       	asr	r8,0x3
8002632c:	ef 48 ff ec 	st.w	r7[-20],r8
80026330:	c2 c8       	rjmp	80026388 <flashc_memcpy+0x354>
      {
        for (j = 0; j < sizeof(U64) / sizeof(U16); j++) flash_dword.u16[j] = *source.u16ptr++;
80026332:	30 08       	mov	r8,0
80026334:	ef 48 ff f0 	st.w	r7[-16],r8
80026338:	c1 48       	rjmp	80026360 <flashc_memcpy+0x32c>
8002633a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002633e:	ee f9 ff d8 	ld.w	r9,r7[-40]
80026342:	92 0a       	ld.sh	r10,r9[0x0]
80026344:	a1 78       	lsl	r8,0x1
80026346:	ee 08 00 08 	add	r8,r7,r8
8002634a:	f1 5a ff ac 	st.h	r8[-84],r10
8002634e:	f2 c8 ff fe 	sub	r8,r9,-2
80026352:	ef 48 ff d8 	st.w	r7[-40],r8
80026356:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002635a:	2f f8       	sub	r8,-1
8002635c:	ef 48 ff f0 	st.w	r7[-16],r8
80026360:	ee f8 ff f0 	ld.w	r8,r7[-16]
80026364:	58 38       	cp.w	r8,3
80026366:	fe 98 ff ea 	brls	8002633a <flashc_memcpy+0x306>
        *dest.u64ptr++ = flash_dword.u64;
8002636a:	ee fa ff dc 	ld.w	r10,r7[-36]
8002636e:	ee e8 ff ac 	ld.d	r8,r7[-84]
80026372:	f4 e9 00 00 	st.d	r10[0],r8
80026376:	f4 c8 ff f8 	sub	r8,r10,-8
8002637a:	ef 48 ff dc 	st.w	r7[-36],r8
      for (i = flash_page_source_end.u64ptr - dest.u64ptr; i; i--)
        *dest.u64ptr++ = *source.u64ptr++;
      break;

    case sizeof(U16):
      for (i = flash_page_source_end.u64ptr - dest.u64ptr; i; i--)
8002637e:	ee f8 ff ec 	ld.w	r8,r7[-20]
80026382:	20 18       	sub	r8,1
80026384:	ef 48 ff ec 	st.w	r7[-20],r8
80026388:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002638c:	58 08       	cp.w	r8,0
8002638e:	cd 21       	brne	80026332 <flashc_memcpy+0x2fe>
      {
        for (j = 0; j < sizeof(U64) / sizeof(U16); j++) flash_dword.u16[j] = *source.u16ptr++;
        *dest.u64ptr++ = flash_dword.u64;
      }
      break;
80026390:	c3 98       	rjmp	80026402 <flashc_memcpy+0x3ce>

    default:
      for (i = flash_page_source_end.u64ptr - dest.u64ptr; i; i--)
80026392:	ee f8 ff b4 	ld.w	r8,r7[-76]
80026396:	10 99       	mov	r9,r8
80026398:	ee f8 ff dc 	ld.w	r8,r7[-36]
8002639c:	f2 08 01 08 	sub	r8,r9,r8
800263a0:	a3 58       	asr	r8,0x3
800263a2:	ef 48 ff ec 	st.w	r7[-20],r8
800263a6:	c2 a8       	rjmp	800263fa <flashc_memcpy+0x3c6>
      {
        for (j = 0; j < sizeof(U64); j++) flash_dword.u8[j] = *source.u8ptr++;
800263a8:	30 08       	mov	r8,0
800263aa:	ef 48 ff f0 	st.w	r7[-16],r8
800263ae:	c1 28       	rjmp	800263d2 <flashc_memcpy+0x39e>
800263b0:	ee fa ff f0 	ld.w	r10,r7[-16]
800263b4:	ee f8 ff d8 	ld.w	r8,r7[-40]
800263b8:	11 89       	ld.ub	r9,r8[0x0]
800263ba:	ee 0a 00 0a 	add	r10,r7,r10
800263be:	f5 69 ff ac 	st.b	r10[-84],r9
800263c2:	2f f8       	sub	r8,-1
800263c4:	ef 48 ff d8 	st.w	r7[-40],r8
800263c8:	ee f8 ff f0 	ld.w	r8,r7[-16]
800263cc:	2f f8       	sub	r8,-1
800263ce:	ef 48 ff f0 	st.w	r7[-16],r8
800263d2:	ee f8 ff f0 	ld.w	r8,r7[-16]
800263d6:	58 78       	cp.w	r8,7
800263d8:	fe 98 ff ec 	brls	800263b0 <flashc_memcpy+0x37c>
        *dest.u64ptr++ = flash_dword.u64;
800263dc:	ee fa ff dc 	ld.w	r10,r7[-36]
800263e0:	ee e8 ff ac 	ld.d	r8,r7[-84]
800263e4:	f4 e9 00 00 	st.d	r10[0],r8
800263e8:	f4 c8 ff f8 	sub	r8,r10,-8
800263ec:	ef 48 ff dc 	st.w	r7[-36],r8
        *dest.u64ptr++ = flash_dword.u64;
      }
      break;

    default:
      for (i = flash_page_source_end.u64ptr - dest.u64ptr; i; i--)
800263f0:	ee f8 ff ec 	ld.w	r8,r7[-20]
800263f4:	20 18       	sub	r8,1
800263f6:	ef 48 ff ec 	st.w	r7[-20],r8
800263fa:	ee f8 ff ec 	ld.w	r8,r7[-20]
800263fe:	58 08       	cp.w	r8,0
80026400:	cd 41       	brne	800263a8 <flashc_memcpy+0x374>
        *dest.u64ptr++ = flash_dword.u64;
      }
    }

    // If the current destination page has an incomplete end...
    if (incomplete_flash_page_end)
80026402:	ef 39 ff e6 	ld.ub	r9,r7[-26]
80026406:	30 08       	mov	r8,0
80026408:	f0 09 18 00 	cp.b	r9,r8
8002640c:	c6 c0       	breq	800264e4 <flashc_memcpy+0x4b0>
    {
      // If the flash double-word buffer is in use, do not initialize it.
      if (flash_dword_pending) i = Get_align((U32)dest_end.u8ptr, sizeof(U64));
8002640e:	ef 39 ff e7 	ld.ub	r9,r7[-25]
80026412:	30 08       	mov	r8,0
80026414:	f0 09 18 00 	cp.b	r9,r8
80026418:	c0 80       	breq	80026428 <flashc_memcpy+0x3f4>
8002641a:	ee f8 ff d4 	ld.w	r8,r7[-44]
8002641e:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80026422:	ef 48 ff ec 	st.w	r7[-20],r8
80026426:	c1 f8       	rjmp	80026464 <flashc_memcpy+0x430>
      // If the flash double-word buffer is free...
      else
      {
        // Fill the beginning of the flash double-word buffer with the source data.
        for (i = 0; i < Get_align((U32)dest_end.u8ptr, sizeof(U64)); i++)
80026428:	30 08       	mov	r8,0
8002642a:	ef 48 ff ec 	st.w	r7[-20],r8
8002642e:	c1 28       	rjmp	80026452 <flashc_memcpy+0x41e>
          flash_dword.u8[i] = *source.u8ptr++;
80026430:	ee fa ff ec 	ld.w	r10,r7[-20]
80026434:	ee f8 ff d8 	ld.w	r8,r7[-40]
80026438:	11 89       	ld.ub	r9,r8[0x0]
8002643a:	ee 0a 00 0a 	add	r10,r7,r10
8002643e:	f5 69 ff ac 	st.b	r10[-84],r9
80026442:	2f f8       	sub	r8,-1
80026444:	ef 48 ff d8 	st.w	r7[-40],r8
      if (flash_dword_pending) i = Get_align((U32)dest_end.u8ptr, sizeof(U64));
      // If the flash double-word buffer is free...
      else
      {
        // Fill the beginning of the flash double-word buffer with the source data.
        for (i = 0; i < Get_align((U32)dest_end.u8ptr, sizeof(U64)); i++)
80026448:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002644c:	2f f8       	sub	r8,-1
8002644e:	ef 48 ff ec 	st.w	r7[-20],r8
80026452:	ee f8 ff d4 	ld.w	r8,r7[-44]
80026456:	f3 d8 c0 03 	bfextu	r9,r8,0x0,0x3
8002645a:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002645e:	10 39       	cp.w	r9,r8
80026460:	fe 9b ff e8 	brhi	80026430 <flashc_memcpy+0x3fc>

      // This is required by the hardware, even if page erase is not requested,
      // in order to be able to write successfully to erased parts of flash
      // pages that have already been written to.
      {
        tmp.u8ptr = (volatile U8 *)dest_end.u8ptr;
80026464:	ee f8 ff d4 	ld.w	r8,r7[-44]
80026468:	ef 48 ff a8 	st.w	r7[-88],r8

        // If end of destination is not 64-bit aligned...
        if (!Test_align((U32)dest_end.u8ptr, sizeof(U64)))
8002646c:	ee f8 ff d4 	ld.w	r8,r7[-44]
80026470:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80026474:	c3 20       	breq	800264d8 <flashc_memcpy+0x4a4>
        {
          // Fill the end of the flash double-word buffer with the current flash page data.
          for (; i < sizeof(U64); i++)
80026476:	c1 38       	rjmp	8002649c <flashc_memcpy+0x468>
            flash_dword.u8[i] = *tmp.u8ptr++;
80026478:	ee fa ff ec 	ld.w	r10,r7[-20]
8002647c:	ee f8 ff a8 	ld.w	r8,r7[-88]
80026480:	11 89       	ld.ub	r9,r8[0x0]
80026482:	5c 59       	castu.b	r9
80026484:	ee 0a 00 0a 	add	r10,r7,r10
80026488:	f5 69 ff ac 	st.b	r10[-84],r9
8002648c:	2f f8       	sub	r8,-1
8002648e:	ef 48 ff a8 	st.w	r7[-88],r8

        // If end of destination is not 64-bit aligned...
        if (!Test_align((U32)dest_end.u8ptr, sizeof(U64)))
        {
          // Fill the end of the flash double-word buffer with the current flash page data.
          for (; i < sizeof(U64); i++)
80026492:	ee f8 ff ec 	ld.w	r8,r7[-20]
80026496:	2f f8       	sub	r8,-1
80026498:	ef 48 ff ec 	st.w	r7[-20],r8
8002649c:	ee f8 ff ec 	ld.w	r8,r7[-20]
800264a0:	58 78       	cp.w	r8,7
800264a2:	fe 98 ff eb 	brls	80026478 <flashc_memcpy+0x444>
            flash_dword.u8[i] = *tmp.u8ptr++;

          // Write the flash double-word buffer to the page buffer.
          *dest.u64ptr++ = flash_dword.u64;
800264a6:	ee fa ff dc 	ld.w	r10,r7[-36]
800264aa:	ee e8 ff ac 	ld.d	r8,r7[-84]
800264ae:	f4 e9 00 00 	st.d	r10[0],r8
800264b2:	f4 c8 ff f8 	sub	r8,r10,-8
800264b6:	ef 48 ff dc 	st.w	r7[-36],r8
        }

        // Fill the end of the page buffer with the current flash page data.
        for (; !Test_align((U32)tmp.u64ptr, AVR32_FLASHC_PAGE_SIZE); tmp.u64ptr++)
800264ba:	c1 08       	rjmp	800264da <flashc_memcpy+0x4a6>
          *tmp.u64ptr = *tmp.u64ptr;
800264bc:	ee fa ff a8 	ld.w	r10,r7[-88]
800264c0:	ee f8 ff a8 	ld.w	r8,r7[-88]
800264c4:	f0 e8 00 00 	ld.d	r8,r8[0]
800264c8:	f4 e9 00 00 	st.d	r10[0],r8
          // Write the flash double-word buffer to the page buffer.
          *dest.u64ptr++ = flash_dword.u64;
        }

        // Fill the end of the page buffer with the current flash page data.
        for (; !Test_align((U32)tmp.u64ptr, AVR32_FLASHC_PAGE_SIZE); tmp.u64ptr++)
800264cc:	ee f8 ff a8 	ld.w	r8,r7[-88]
800264d0:	2f 88       	sub	r8,-8
800264d2:	ef 48 ff a8 	st.w	r7[-88],r8
800264d6:	c0 28       	rjmp	800264da <flashc_memcpy+0x4a6>
800264d8:	d7 03       	nop
800264da:	ee f8 ff a8 	ld.w	r8,r7[-88]
800264de:	f1 d8 c0 09 	bfextu	r8,r8,0x0,0x9
800264e2:	ce d1       	brne	800264bc <flashc_memcpy+0x488>
          *tmp.u64ptr = *tmp.u64ptr;
      }
    }

    // If the current flash page is in the flash array...
    if (dest.u8ptr <= AVR32_FLASHC_USER_PAGE)
800264e4:	ee f8 ff dc 	ld.w	r8,r7[-36]
800264e8:	fc 19 80 80 	movh	r9,0x8080
800264ec:	12 38       	cp.w	r8,r9
800264ee:	e0 8b 00 38 	brhi	8002655e <flashc_memcpy+0x52a>
    {
      // Erase the current page if requested and write it from the page buffer.
      if (erase)
800264f2:	ef 39 ff 98 	ld.ub	r9,r7[-104]
800264f6:	30 08       	mov	r8,0
800264f8:	f0 09 18 00 	cp.b	r9,r8
800264fc:	c0 e0       	breq	80026518 <flashc_memcpy+0x4e4>
      {
        flashc_erase_page(-1, false);
800264fe:	30 0b       	mov	r11,0
80026500:	3f fc       	mov	r12,-1
80026502:	f0 16 00 99 	mcall	r6[612]
        error_status |= flashc_error_status;
80026506:	ec f8 00 54 	ld.w	r8,r6[84]
8002650a:	70 08       	ld.w	r8,r8[0x0]
8002650c:	ee f9 ff e8 	ld.w	r9,r7[-24]
80026510:	f3 e8 10 08 	or	r8,r9,r8
80026514:	ef 48 ff e8 	st.w	r7[-24],r8
      }
      flashc_write_page(-1);
80026518:	3f fc       	mov	r12,-1
8002651a:	f0 16 00 ee 	mcall	r6[952]
      error_status |= flashc_error_status;
8002651e:	ec f8 00 54 	ld.w	r8,r6[84]
80026522:	70 08       	ld.w	r8,r8[0x0]
80026524:	ee f9 ff e8 	ld.w	r9,r7[-24]
80026528:	f3 e8 10 08 	or	r8,r9,r8
8002652c:	ef 48 ff e8 	st.w	r7[-24],r8

      // If the end of the flash array is reached, go to the User page.
      if (dest.u8ptr >= flash_array_end.u8ptr)
80026530:	ee f9 ff dc 	ld.w	r9,r7[-36]
80026534:	ee f8 ff e0 	ld.w	r8,r7[-32]
80026538:	10 39       	cp.w	r9,r8
8002653a:	c2 f3       	brcs	80026598 <flashc_memcpy+0x564>
      {
        source.u8ptr += AVR32_FLASHC_USER_PAGE - dest.u8ptr;
8002653c:	ee f9 ff d8 	ld.w	r9,r7[-40]
80026540:	ee f8 ff dc 	ld.w	r8,r7[-36]
80026544:	fc 1a 80 80 	movh	r10,0x8080
80026548:	f4 08 01 08 	sub	r8,r10,r8
8002654c:	f2 08 00 08 	add	r8,r9,r8
80026550:	ef 48 ff d8 	st.w	r7[-40],r8
        dest.u8ptr = AVR32_FLASHC_USER_PAGE;
80026554:	fc 18 80 80 	movh	r8,0x8080
80026558:	ef 48 ff dc 	st.w	r7[-36],r8
8002655c:	c1 e8       	rjmp	80026598 <flashc_memcpy+0x564>
    }
    // If the current flash page is the User page...
    else
    {
      // Erase the User page if requested and write it from the page buffer.
      if (erase)
8002655e:	ef 39 ff 98 	ld.ub	r9,r7[-104]
80026562:	30 08       	mov	r8,0
80026564:	f0 09 18 00 	cp.b	r9,r8
80026568:	c0 d0       	breq	80026582 <flashc_memcpy+0x54e>
      {
        flashc_erase_user_page(false);
8002656a:	30 0c       	mov	r12,0
8002656c:	f0 16 01 23 	mcall	r6[1164]
        error_status |= flashc_error_status;
80026570:	ec f8 00 54 	ld.w	r8,r6[84]
80026574:	70 08       	ld.w	r8,r8[0x0]
80026576:	ee f9 ff e8 	ld.w	r9,r7[-24]
8002657a:	f3 e8 10 08 	or	r8,r9,r8
8002657e:	ef 48 ff e8 	st.w	r7[-24],r8
      }
      flashc_write_user_page();
80026582:	f0 16 00 ed 	mcall	r6[948]
      error_status |= flashc_error_status;
80026586:	ec f8 00 54 	ld.w	r8,r6[84]
8002658a:	70 08       	ld.w	r8,r8[0x0]
8002658c:	ee f9 ff e8 	ld.w	r9,r7[-24]
80026590:	f3 e8 10 08 	or	r8,r9,r8
80026594:	ef 48 ff e8 	st.w	r7[-24],r8
  dest_end.u16ptr = (U16 *)Align_down((U32)dest_end.u8ptr, sizeof(U16));
  dest_end.u32ptr = (U32 *)Align_down((U32)dest_end.u16ptr, sizeof(U32));
  dest_end.u64ptr = (U64 *)Align_down((U32)dest_end.u32ptr, sizeof(U64));

  // While end of destination is not reached...
  while (dest.u8ptr < dest_end.u8ptr)
80026598:	ee f9 ff dc 	ld.w	r9,r7[-36]
8002659c:	ee f8 ff d4 	ld.w	r8,r7[-44]
800265a0:	10 39       	cp.w	r9,r8
800265a2:	fe 93 fd e7 	brlo	80026170 <flashc_memcpy+0x13c>
      error_status |= flashc_error_status;
    }
  }

  // Update the FLASHC error status.
  flashc_error_status = error_status;
800265a6:	ec f8 00 54 	ld.w	r8,r6[84]
800265aa:	ee f9 ff e8 	ld.w	r9,r7[-24]
800265ae:	91 09       	st.w	r8[0x0],r9

  // Return the initial destination pointer as the standard memcpy function does.
  return dst;
800265b0:	ee f8 ff a4 	ld.w	r8,r7[-92]
}
800265b4:	10 9c       	mov	r12,r8
800265b6:	2e 6d       	sub	sp,-104
800265b8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800265bc:	80 02       	ld.sh	r2,r0[0x0]
800265be:	5e c4       	retvs	r4

800265c0 <flashc_set_flash_waitstate_and_readmode>:


#if UC3C
void flashc_set_flash_waitstate_and_readmode(unsigned long cpu_f_hz)
{
800265c0:	eb cd 40 c0 	pushm	r6-r7,lr
800265c4:	1a 97       	mov	r7,sp
800265c6:	20 1d       	sub	sp,4
800265c8:	49 76       	lddpc	r6,80026624 <flashc_set_flash_waitstate_and_readmode+0x64>
800265ca:	1e 26       	rsub	r6,pc
800265cc:	ef 4c ff fc 	st.w	r7[-4],r12
  #define AVR32_FLASHC_HSEN_FWS_0_MAX_FREQ      33000000
  #define AVR32_FLASHC_HSEN_FWS_1_MAX_FREQ      72000000
  // These defines are missing from or wrong in the toolchain header files uc3cxxx.h
  // Put a Bugzilla 

  if(cpu_f_hz > AVR32_FLASHC_HSEN_FWS_0_MAX_FREQ)    // > 33MHz
800265d0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800265d4:	e0 69 8a 40 	mov	r9,35392
800265d8:	ea 19 01 f7 	orh	r9,0x1f7
800265dc:	12 38       	cp.w	r8,r9
800265de:	e0 88 00 18 	brls	8002660e <flashc_set_flash_waitstate_and_readmode+0x4e>
  {
    // Set a wait-state
    flashc_set_wait_state(1);
800265e2:	30 1c       	mov	r12,1
800265e4:	f0 16 00 91 	mcall	r6[580]
    if(cpu_f_hz <= AVR32_FLASHC_FWS_1_MAX_FREQ) // <= 66MHz and >33Mhz
800265e8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800265ec:	e0 69 14 80 	mov	r9,5248
800265f0:	ea 19 03 ef 	orh	r9,0x3ef
800265f4:	12 38       	cp.w	r8,r9
800265f6:	e0 8b 00 07 	brhi	80026604 <flashc_set_flash_waitstate_and_readmode+0x44>
    {
      // Disable the high-speed read mode.      
      flashc_issue_command(AVR32_FLASHC_FCMD_CMD_HSDIS, -1);
800265fa:	3f fb       	mov	r11,-1
800265fc:	31 1c       	mov	r12,17
800265fe:	f0 16 00 28 	mcall	r6[160]
80026602:	c0 d8       	rjmp	8002661c <flashc_set_flash_waitstate_and_readmode+0x5c>
    }
    else // > 66Mhz
    {
      // Enable the high-speed read mode.
      flashc_issue_command(AVR32_FLASHC_FCMD_CMD_HSEN, -1);                     
80026604:	3f fb       	mov	r11,-1
80026606:	31 0c       	mov	r12,16
80026608:	f0 16 00 28 	mcall	r6[160]
8002660c:	c0 88       	rjmp	8002661c <flashc_set_flash_waitstate_and_readmode+0x5c>
    }
  }
  else  // <= 33 MHz    
  {
    // Disable wait-state
    flashc_set_wait_state(0);
8002660e:	30 0c       	mov	r12,0
80026610:	f0 16 00 91 	mcall	r6[580]

    // Disable the high-speed read mode.
    flashc_issue_command(AVR32_FLASHC_FCMD_CMD_HSDIS, -1);
80026614:	3f fb       	mov	r11,-1
80026616:	31 1c       	mov	r12,17
80026618:	f0 16 00 28 	mcall	r6[160]
    
  }
}
8002661c:	2f fd       	sub	sp,-4
8002661e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80026622:	00 00       	add	r0,r0
80026624:	80 02       	ld.sh	r2,r0[0x0]
80026626:	64 4e       	ld.w	lr,r2[0x10]

80026628 <gpio_enable_module>:
 */
//! @{


int gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
80026628:	eb cd 40 c0 	pushm	r6-r7,lr
8002662c:	1a 97       	mov	r7,sp
8002662e:	20 4d       	sub	sp,16
80026630:	49 b6       	lddpc	r6,8002669c <gpio_enable_module+0x74>
80026632:	1e 26       	rsub	r6,pc
80026634:	ef 4c ff f4 	st.w	r7[-12],r12
80026638:	ef 4b ff f0 	st.w	r7[-16],r11
  int status = GPIO_SUCCESS;
8002663c:	30 08       	mov	r8,0
8002663e:	ef 48 ff f8 	st.w	r7[-8],r8
  uint32_t i;

  for (i = 0; i < size; i++)
80026642:	30 08       	mov	r8,0
80026644:	ef 48 ff fc 	st.w	r7[-4],r8
80026648:	c1 d8       	rjmp	80026682 <gpio_enable_module+0x5a>
  {
    status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
8002664a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002664e:	11 98       	ld.ub	r8,r8[0x1]
80026650:	10 99       	mov	r9,r8
80026652:	ee f8 ff f4 	ld.w	r8,r7[-12]
80026656:	11 88       	ld.ub	r8,r8[0x0]
80026658:	12 9b       	mov	r11,r9
8002665a:	10 9c       	mov	r12,r8
8002665c:	f0 16 00 3d 	mcall	r6[244]
80026660:	18 98       	mov	r8,r12
80026662:	ee f9 ff f8 	ld.w	r9,r7[-8]
80026666:	f3 e8 10 08 	or	r8,r9,r8
8002666a:	ef 48 ff f8 	st.w	r7[-8],r8
    gpiomap++;
8002666e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80026672:	2f e8       	sub	r8,-2
80026674:	ef 48 ff f4 	st.w	r7[-12],r8
int gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
  int status = GPIO_SUCCESS;
  uint32_t i;

  for (i = 0; i < size; i++)
80026678:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002667c:	2f f8       	sub	r8,-1
8002667e:	ef 48 ff fc 	st.w	r7[-4],r8
80026682:	ee f9 ff fc 	ld.w	r9,r7[-4]
80026686:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002668a:	10 39       	cp.w	r9,r8
8002668c:	cd f3       	brcs	8002664a <gpio_enable_module+0x22>
  {
    status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
    gpiomap++;
  }

  return status;
8002668e:	ee f8 ff f8 	ld.w	r8,r7[-8]
}
80026692:	10 9c       	mov	r12,r8
80026694:	2f cd       	sub	sp,-16
80026696:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002669a:	00 00       	add	r0,r0
8002669c:	80 02       	ld.sh	r2,r0[0x0]
8002669e:	64 b6       	ld.w	r6,r2[0x2c]

800266a0 <gpio_enable_module_pin>:


int gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
800266a0:	eb cd 40 c0 	pushm	r6-r7,lr
800266a4:	1a 97       	mov	r7,sp
800266a6:	20 3d       	sub	sp,12
800266a8:	fe f6 02 94 	ld.w	r6,pc[660]
800266ac:	1e 26       	rsub	r6,pc
800266ae:	ef 4c ff f8 	st.w	r7[-8],r12
800266b2:	ef 4b ff f4 	st.w	r7[-12],r11
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
800266b6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800266ba:	a5 98       	lsr	r8,0x5
800266bc:	a9 78       	lsl	r8,0x9
800266be:	e0 28 e0 00 	sub	r8,57344
800266c2:	ef 48 ff fc 	st.w	r7[-4],r8

  // Enable the correct function.
  switch (function)
800266c6:	ee f8 ff f4 	ld.w	r8,r7[-12]
800266ca:	58 78       	cp.w	r8,7
800266cc:	e0 8b 01 26 	brhi	80026918 <gpio_enable_module_pin+0x278>
800266d0:	fe c9 ff f8 	sub	r9,pc,-8
800266d4:	f2 08 00 2f 	add	pc,r9,r8<<0x2
800266d8:	e0 8f 00 10 	bral	800266f8 <gpio_enable_module_pin+0x58>
800266dc:	e0 8f 00 30 	bral	8002673c <gpio_enable_module_pin+0x9c>
800266e0:	e0 8f 00 50 	bral	80026780 <gpio_enable_module_pin+0xe0>
800266e4:	e0 8f 00 70 	bral	800267c4 <gpio_enable_module_pin+0x124>
800266e8:	e0 8f 00 90 	bral	80026808 <gpio_enable_module_pin+0x168>
800266ec:	e0 8f 00 b0 	bral	8002684c <gpio_enable_module_pin+0x1ac>
800266f0:	e0 8f 00 d0 	bral	80026890 <gpio_enable_module_pin+0x1f0>
800266f4:	e0 8f 00 f0 	bral	800268d4 <gpio_enable_module_pin+0x234>
  {
  case 0: // A function.
    gpio_port->pmr0c = 1 << (pin & 0x1F);
800266f8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800266fc:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026700:	30 19       	mov	r9,1
80026702:	f2 08 09 48 	lsl	r8,r9,r8
80026706:	10 99       	mov	r9,r8
80026708:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002670c:	91 69       	st.w	r8[0x18],r9
    gpio_port->pmr1c = 1 << (pin & 0x1F);
8002670e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026712:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026716:	30 19       	mov	r9,1
80026718:	f2 08 09 48 	lsl	r8,r9,r8
8002671c:	10 99       	mov	r9,r8
8002671e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026722:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
    gpio_port->pmr2c = 1 << (pin & 0x1F);
80026724:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026728:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8002672c:	30 19       	mov	r9,1
8002672e:	f2 08 09 48 	lsl	r8,r9,r8
80026732:	10 99       	mov	r9,r8
80026734:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026738:	91 e9       	st.w	r8[0x38],r9
#endif
    break;
8002673a:	cf 18       	rjmp	8002691c <gpio_enable_module_pin+0x27c>

  case 1: // B function.
    gpio_port->pmr0s = 1 << (pin & 0x1F);
8002673c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026740:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026744:	30 19       	mov	r9,1
80026746:	f2 08 09 48 	lsl	r8,r9,r8
8002674a:	10 99       	mov	r9,r8
8002674c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026750:	91 59       	st.w	r8[0x14],r9
    gpio_port->pmr1c = 1 << (pin & 0x1F);
80026752:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026756:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8002675a:	30 19       	mov	r9,1
8002675c:	f2 08 09 48 	lsl	r8,r9,r8
80026760:	10 99       	mov	r9,r8
80026762:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026766:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
    gpio_port->pmr2c = 1 << (pin & 0x1F);
80026768:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002676c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026770:	30 19       	mov	r9,1
80026772:	f2 08 09 48 	lsl	r8,r9,r8
80026776:	10 99       	mov	r9,r8
80026778:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002677c:	91 e9       	st.w	r8[0x38],r9
#endif
    break;
8002677e:	cc f8       	rjmp	8002691c <gpio_enable_module_pin+0x27c>

  case 2: // C function.
    gpio_port->pmr0c = 1 << (pin & 0x1F);
80026780:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026784:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026788:	30 19       	mov	r9,1
8002678a:	f2 08 09 48 	lsl	r8,r9,r8
8002678e:	10 99       	mov	r9,r8
80026790:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026794:	91 69       	st.w	r8[0x18],r9
    gpio_port->pmr1s = 1 << (pin & 0x1F);
80026796:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002679a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8002679e:	30 19       	mov	r9,1
800267a0:	f2 08 09 48 	lsl	r8,r9,r8
800267a4:	10 99       	mov	r9,r8
800267a6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800267aa:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
    gpio_port->pmr2c = 1 << (pin & 0x1F);
800267ac:	ee f8 ff f8 	ld.w	r8,r7[-8]
800267b0:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800267b4:	30 19       	mov	r9,1
800267b6:	f2 08 09 48 	lsl	r8,r9,r8
800267ba:	10 99       	mov	r9,r8
800267bc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800267c0:	91 e9       	st.w	r8[0x38],r9
#endif
    break;
800267c2:	ca d8       	rjmp	8002691c <gpio_enable_module_pin+0x27c>

  case 3: // D function.
    gpio_port->pmr0s = 1 << (pin & 0x1F);
800267c4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800267c8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800267cc:	30 19       	mov	r9,1
800267ce:	f2 08 09 48 	lsl	r8,r9,r8
800267d2:	10 99       	mov	r9,r8
800267d4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800267d8:	91 59       	st.w	r8[0x14],r9
    gpio_port->pmr1s = 1 << (pin & 0x1F);
800267da:	ee f8 ff f8 	ld.w	r8,r7[-8]
800267de:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800267e2:	30 19       	mov	r9,1
800267e4:	f2 08 09 48 	lsl	r8,r9,r8
800267e8:	10 99       	mov	r9,r8
800267ea:	ee f8 ff fc 	ld.w	r8,r7[-4]
800267ee:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
    gpio_port->pmr2c = 1 << (pin & 0x1F);
800267f0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800267f4:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800267f8:	30 19       	mov	r9,1
800267fa:	f2 08 09 48 	lsl	r8,r9,r8
800267fe:	10 99       	mov	r9,r8
80026800:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026804:	91 e9       	st.w	r8[0x38],r9
#endif
    break;
80026806:	c8 b8       	rjmp	8002691c <gpio_enable_module_pin+0x27c>

#if (AVR32_GPIO_H_VERSION >= 210)
  case 4: // E function.
    gpio_port->pmr0c = 1 << (pin & 0x1F);
80026808:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002680c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026810:	30 19       	mov	r9,1
80026812:	f2 08 09 48 	lsl	r8,r9,r8
80026816:	10 99       	mov	r9,r8
80026818:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002681c:	91 69       	st.w	r8[0x18],r9
    gpio_port->pmr1c = 1 << (pin & 0x1F);
8002681e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026822:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026826:	30 19       	mov	r9,1
80026828:	f2 08 09 48 	lsl	r8,r9,r8
8002682c:	10 99       	mov	r9,r8
8002682e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026832:	91 a9       	st.w	r8[0x28],r9
    gpio_port->pmr2s = 1 << (pin & 0x1F);
80026834:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026838:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8002683c:	30 19       	mov	r9,1
8002683e:	f2 08 09 48 	lsl	r8,r9,r8
80026842:	10 99       	mov	r9,r8
80026844:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026848:	91 d9       	st.w	r8[0x34],r9
    break;
8002684a:	c6 98       	rjmp	8002691c <gpio_enable_module_pin+0x27c>
    
  case 5: // F function.
    gpio_port->pmr0s = 1 << (pin & 0x1F);
8002684c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026850:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026854:	30 19       	mov	r9,1
80026856:	f2 08 09 48 	lsl	r8,r9,r8
8002685a:	10 99       	mov	r9,r8
8002685c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026860:	91 59       	st.w	r8[0x14],r9
    gpio_port->pmr1c = 1 << (pin & 0x1F);
80026862:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026866:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8002686a:	30 19       	mov	r9,1
8002686c:	f2 08 09 48 	lsl	r8,r9,r8
80026870:	10 99       	mov	r9,r8
80026872:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026876:	91 a9       	st.w	r8[0x28],r9
    gpio_port->pmr2s = 1 << (pin & 0x1F);
80026878:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002687c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026880:	30 19       	mov	r9,1
80026882:	f2 08 09 48 	lsl	r8,r9,r8
80026886:	10 99       	mov	r9,r8
80026888:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002688c:	91 d9       	st.w	r8[0x34],r9
    break;
8002688e:	c4 78       	rjmp	8002691c <gpio_enable_module_pin+0x27c>
    
  case 6: // G function.
    gpio_port->pmr0c = 1 << (pin & 0x1F);
80026890:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026894:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026898:	30 19       	mov	r9,1
8002689a:	f2 08 09 48 	lsl	r8,r9,r8
8002689e:	10 99       	mov	r9,r8
800268a0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800268a4:	91 69       	st.w	r8[0x18],r9
    gpio_port->pmr1s = 1 << (pin & 0x1F);
800268a6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800268aa:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800268ae:	30 19       	mov	r9,1
800268b0:	f2 08 09 48 	lsl	r8,r9,r8
800268b4:	10 99       	mov	r9,r8
800268b6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800268ba:	91 99       	st.w	r8[0x24],r9
    gpio_port->pmr2s = 1 << (pin & 0x1F);
800268bc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800268c0:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800268c4:	30 19       	mov	r9,1
800268c6:	f2 08 09 48 	lsl	r8,r9,r8
800268ca:	10 99       	mov	r9,r8
800268cc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800268d0:	91 d9       	st.w	r8[0x34],r9
    break;
800268d2:	c2 58       	rjmp	8002691c <gpio_enable_module_pin+0x27c>
    
  case 7: // H function.
    gpio_port->pmr0s = 1 << (pin & 0x1F);
800268d4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800268d8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800268dc:	30 19       	mov	r9,1
800268de:	f2 08 09 48 	lsl	r8,r9,r8
800268e2:	10 99       	mov	r9,r8
800268e4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800268e8:	91 59       	st.w	r8[0x14],r9
    gpio_port->pmr1s = 1 << (pin & 0x1F);
800268ea:	ee f8 ff f8 	ld.w	r8,r7[-8]
800268ee:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800268f2:	30 19       	mov	r9,1
800268f4:	f2 08 09 48 	lsl	r8,r9,r8
800268f8:	10 99       	mov	r9,r8
800268fa:	ee f8 ff fc 	ld.w	r8,r7[-4]
800268fe:	91 99       	st.w	r8[0x24],r9
    gpio_port->pmr2s = 1 << (pin & 0x1F);
80026900:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026904:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026908:	30 19       	mov	r9,1
8002690a:	f2 08 09 48 	lsl	r8,r9,r8
8002690e:	10 99       	mov	r9,r8
80026910:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026914:	91 d9       	st.w	r8[0x34],r9
    break;
80026916:	c0 38       	rjmp	8002691c <gpio_enable_module_pin+0x27c>
#endif

  default:
    return GPIO_INVALID_ARGUMENT;
80026918:	30 18       	mov	r8,1
8002691a:	c0 d8       	rjmp	80026934 <gpio_enable_module_pin+0x294>
  }

  // Disable GPIO control.
  gpio_port->gperc = 1 << (pin & 0x1F);
8002691c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026920:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026924:	30 19       	mov	r9,1
80026926:	f2 08 09 48 	lsl	r8,r9,r8
8002692a:	10 99       	mov	r9,r8
8002692c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026930:	91 29       	st.w	r8[0x8],r9

  return GPIO_SUCCESS;
80026932:	30 08       	mov	r8,0
}
80026934:	10 9c       	mov	r12,r8
80026936:	2f dd       	sub	sp,-12
80026938:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002693c:	80 02       	ld.sh	r2,r0[0x0]
8002693e:	65 30       	ld.w	r0,r2[0x4c]

80026940 <gpio_enable_gpio>:


void gpio_enable_gpio(const gpio_map_t gpiomap, uint32_t size)
{
80026940:	eb cd 40 c0 	pushm	r6-r7,lr
80026944:	1a 97       	mov	r7,sp
80026946:	20 3d       	sub	sp,12
80026948:	49 26       	lddpc	r6,80026990 <gpio_enable_gpio+0x50>
8002694a:	1e 26       	rsub	r6,pc
8002694c:	ef 4c ff f8 	st.w	r7[-8],r12
80026950:	ef 4b ff f4 	st.w	r7[-12],r11
  uint32_t i;

  for (i = 0; i < size; i++)
80026954:	30 08       	mov	r8,0
80026956:	ef 48 ff fc 	st.w	r7[-4],r8
8002695a:	c1 18       	rjmp	8002697c <gpio_enable_gpio+0x3c>
  {
    gpio_enable_gpio_pin(gpiomap->pin);
8002695c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026960:	11 88       	ld.ub	r8,r8[0x0]
80026962:	10 9c       	mov	r12,r8
80026964:	f0 16 01 4b 	mcall	r6[1324]
    gpiomap++;
80026968:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002696c:	2f e8       	sub	r8,-2
8002696e:	ef 48 ff f8 	st.w	r7[-8],r8

void gpio_enable_gpio(const gpio_map_t gpiomap, uint32_t size)
{
  uint32_t i;

  for (i = 0; i < size; i++)
80026972:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026976:	2f f8       	sub	r8,-1
80026978:	ef 48 ff fc 	st.w	r7[-4],r8
8002697c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80026980:	ee f8 ff f4 	ld.w	r8,r7[-12]
80026984:	10 39       	cp.w	r9,r8
80026986:	ce b3       	brcs	8002695c <gpio_enable_gpio+0x1c>
  {
    gpio_enable_gpio_pin(gpiomap->pin);
    gpiomap++;
  }
}
80026988:	2f dd       	sub	sp,-12
8002698a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002698e:	00 00       	add	r0,r0
80026990:	80 02       	ld.sh	r2,r0[0x0]
80026992:	67 ce       	ld.w	lr,r3[0x70]

80026994 <gpio_enable_gpio_pin>:


void gpio_enable_gpio_pin(uint32_t pin)
{
80026994:	eb cd 40 80 	pushm	r7,lr
80026998:	1a 97       	mov	r7,sp
8002699a:	20 2d       	sub	sp,8
8002699c:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
800269a0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800269a4:	a5 98       	lsr	r8,0x5
800269a6:	a9 78       	lsl	r8,0x9
800269a8:	e0 28 e0 00 	sub	r8,57344
800269ac:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->oderc = 1 << (pin & 0x1F);
800269b0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800269b4:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800269b8:	30 19       	mov	r9,1
800269ba:	f2 08 09 48 	lsl	r8,r9,r8
800269be:	10 99       	mov	r9,r8
800269c0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800269c4:	f1 49 00 48 	st.w	r8[72],r9
  gpio_port->gpers = 1 << (pin & 0x1F);
800269c8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800269cc:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800269d0:	30 19       	mov	r9,1
800269d2:	f2 08 09 48 	lsl	r8,r9,r8
800269d6:	10 99       	mov	r9,r8
800269d8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800269dc:	91 19       	st.w	r8[0x4],r9
}
800269de:	2f ed       	sub	sp,-8
800269e0:	e3 cd 80 80 	ldm	sp++,r7,pc

800269e4 <gpio_enable_pin_pull_up>:

#endif


void gpio_enable_pin_pull_up(uint32_t pin)
{
800269e4:	eb cd 40 80 	pushm	r7,lr
800269e8:	1a 97       	mov	r7,sp
800269ea:	20 2d       	sub	sp,8
800269ec:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
800269f0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800269f4:	a5 98       	lsr	r8,0x5
800269f6:	a9 78       	lsl	r8,0x9
800269f8:	e0 28 e0 00 	sub	r8,57344
800269fc:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->puers = 1 << (pin & 0x1F);
80026a00:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026a04:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026a08:	30 19       	mov	r9,1
80026a0a:	f2 08 09 48 	lsl	r8,r9,r8
80026a0e:	10 99       	mov	r9,r8
80026a10:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026a14:	f1 49 00 74 	st.w	r8[116],r9
#if defined(AVR32_GPIO_200_H_INCLUDED) || defined(AVR32_GPIO_210_H_INCLUDED) || defined(AVR32_GPIO_212_H_INCLUDED)
  gpio_port->pderc = 1 << (pin & 0x1F);
80026a18:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026a1c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026a20:	30 19       	mov	r9,1
80026a22:	f2 08 09 48 	lsl	r8,r9,r8
80026a26:	10 99       	mov	r9,r8
80026a28:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026a2c:	f1 49 00 88 	st.w	r8[136],r9
#endif
}
80026a30:	2f ed       	sub	sp,-8
80026a32:	e3 cd 80 80 	ldm	sp++,r7,pc

80026a36 <gpio_disable_pin_pull_up>:


void gpio_disable_pin_pull_up(uint32_t pin)
{
80026a36:	eb cd 40 80 	pushm	r7,lr
80026a3a:	1a 97       	mov	r7,sp
80026a3c:	20 2d       	sub	sp,8
80026a3e:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80026a42:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026a46:	a5 98       	lsr	r8,0x5
80026a48:	a9 78       	lsl	r8,0x9
80026a4a:	e0 28 e0 00 	sub	r8,57344
80026a4e:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->puerc = 1 << (pin & 0x1F);
80026a52:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026a56:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026a5a:	30 19       	mov	r9,1
80026a5c:	f2 08 09 48 	lsl	r8,r9,r8
80026a60:	10 99       	mov	r9,r8
80026a62:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026a66:	f1 49 00 78 	st.w	r8[120],r9
}
80026a6a:	2f ed       	sub	sp,-8
80026a6c:	e3 cd 80 80 	ldm	sp++,r7,pc

80026a70 <gpio_enable_pin_pull_down>:
/*! \brief Enables the pull-down resistor of a pin.
 *
 * \param pin The pin number.
 */
void gpio_enable_pin_pull_down(uint32_t pin)
{
80026a70:	eb cd 40 80 	pushm	r7,lr
80026a74:	1a 97       	mov	r7,sp
80026a76:	20 2d       	sub	sp,8
80026a78:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80026a7c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026a80:	a5 98       	lsr	r8,0x5
80026a82:	a9 78       	lsl	r8,0x9
80026a84:	e0 28 e0 00 	sub	r8,57344
80026a88:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->puerc = 1 << (pin & 0x1F);
80026a8c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026a90:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026a94:	30 19       	mov	r9,1
80026a96:	f2 08 09 48 	lsl	r8,r9,r8
80026a9a:	10 99       	mov	r9,r8
80026a9c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026aa0:	f1 49 00 78 	st.w	r8[120],r9
  gpio_port->pders = 1 << (pin & 0x1F);
80026aa4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026aa8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026aac:	30 19       	mov	r9,1
80026aae:	f2 08 09 48 	lsl	r8,r9,r8
80026ab2:	10 99       	mov	r9,r8
80026ab4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026ab8:	f1 49 00 84 	st.w	r8[132],r9
}
80026abc:	2f ed       	sub	sp,-8
80026abe:	e3 cd 80 80 	ldm	sp++,r7,pc

80026ac2 <gpio_disable_pin_pull_down>:
/*! \brief Disables the pull-down resistor of a pin.
 *
 * \param pin The pin number.
 */
void gpio_disable_pin_pull_down(uint32_t pin)
{
80026ac2:	eb cd 40 80 	pushm	r7,lr
80026ac6:	1a 97       	mov	r7,sp
80026ac8:	20 2d       	sub	sp,8
80026aca:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80026ace:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026ad2:	a5 98       	lsr	r8,0x5
80026ad4:	a9 78       	lsl	r8,0x9
80026ad6:	e0 28 e0 00 	sub	r8,57344
80026ada:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->pderc = 1 << (pin & 0x1F);
80026ade:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026ae2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026ae6:	30 19       	mov	r9,1
80026ae8:	f2 08 09 48 	lsl	r8,r9,r8
80026aec:	10 99       	mov	r9,r8
80026aee:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026af2:	f1 49 00 88 	st.w	r8[136],r9
}
80026af6:	2f ed       	sub	sp,-8
80026af8:	e3 cd 80 80 	ldm	sp++,r7,pc

80026afc <gpio_enable_pin_buskeeper>:
/*! \brief Enables the buskeeper functionality on a pin.
 *
 * \param pin The pin number.
 */
void gpio_enable_pin_buskeeper(uint32_t pin)
{
80026afc:	eb cd 40 80 	pushm	r7,lr
80026b00:	1a 97       	mov	r7,sp
80026b02:	20 2d       	sub	sp,8
80026b04:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80026b08:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026b0c:	a5 98       	lsr	r8,0x5
80026b0e:	a9 78       	lsl	r8,0x9
80026b10:	e0 28 e0 00 	sub	r8,57344
80026b14:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->puers = 1 << (pin & 0x1F);
80026b18:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026b1c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026b20:	30 19       	mov	r9,1
80026b22:	f2 08 09 48 	lsl	r8,r9,r8
80026b26:	10 99       	mov	r9,r8
80026b28:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026b2c:	f1 49 00 74 	st.w	r8[116],r9
  gpio_port->pders = 1 << (pin & 0x1F);
80026b30:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026b34:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026b38:	30 19       	mov	r9,1
80026b3a:	f2 08 09 48 	lsl	r8,r9,r8
80026b3e:	10 99       	mov	r9,r8
80026b40:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026b44:	f1 49 00 84 	st.w	r8[132],r9
}
80026b48:	2f ed       	sub	sp,-8
80026b4a:	e3 cd 80 80 	ldm	sp++,r7,pc

80026b4e <gpio_disable_pin_buskeeper>:
/*! \brief Disables the buskeeper functionality on a pin.
 *
 * \param pin The pin number.
 */
void gpio_disable_pin_buskeeper(uint32_t pin)
{
80026b4e:	eb cd 40 80 	pushm	r7,lr
80026b52:	1a 97       	mov	r7,sp
80026b54:	20 2d       	sub	sp,8
80026b56:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80026b5a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026b5e:	a5 98       	lsr	r8,0x5
80026b60:	a9 78       	lsl	r8,0x9
80026b62:	e0 28 e0 00 	sub	r8,57344
80026b66:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->puerc = 1 << (pin & 0x1F);
80026b6a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026b6e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026b72:	30 19       	mov	r9,1
80026b74:	f2 08 09 48 	lsl	r8,r9,r8
80026b78:	10 99       	mov	r9,r8
80026b7a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026b7e:	f1 49 00 78 	st.w	r8[120],r9
  gpio_port->pderc = 1 << (pin & 0x1F);
80026b82:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026b86:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026b8a:	30 19       	mov	r9,1
80026b8c:	f2 08 09 48 	lsl	r8,r9,r8
80026b90:	10 99       	mov	r9,r8
80026b92:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026b96:	f1 49 00 88 	st.w	r8[136],r9
}
80026b9a:	2f ed       	sub	sp,-8
80026b9c:	e3 cd 80 80 	ldm	sp++,r7,pc

80026ba0 <gpio_configure_pin>:

#endif

void gpio_configure_pin(uint32_t pin, uint32_t flags)
{  
80026ba0:	eb cd 40 80 	pushm	r7,lr
80026ba4:	1a 97       	mov	r7,sp
80026ba6:	20 3d       	sub	sp,12
80026ba8:	ef 4c ff f8 	st.w	r7[-8],r12
80026bac:	ef 4b ff f4 	st.w	r7[-12],r11
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];  
80026bb0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026bb4:	a5 98       	lsr	r8,0x5
80026bb6:	a9 78       	lsl	r8,0x9
80026bb8:	e0 28 e0 00 	sub	r8,57344
80026bbc:	ef 48 ff fc 	st.w	r7[-4],r8

  /* Both pull-up and pull-down set means buskeeper */
#if defined(AVR32_GPIO_200_H_INCLUDED) || defined(AVR32_GPIO_210_H_INCLUDED) || defined(AVR32_GPIO_212_H_INCLUDED)
    if (flags & GPIO_PULL_DOWN)
80026bc0:	ee f8 ff f4 	ld.w	r8,r7[-12]
80026bc4:	e2 18 00 08 	andl	r8,0x8,COH
80026bc8:	c0 e0       	breq	80026be4 <gpio_configure_pin+0x44>
            gpio_port->pders = 1 << (pin & 0x1F);
80026bca:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026bce:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026bd2:	30 19       	mov	r9,1
80026bd4:	f2 08 09 48 	lsl	r8,r9,r8
80026bd8:	10 99       	mov	r9,r8
80026bda:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026bde:	f1 49 00 84 	st.w	r8[132],r9
80026be2:	c0 d8       	rjmp	80026bfc <gpio_configure_pin+0x5c>
    else
            gpio_port->pderc = 1 << (pin & 0x1F);
80026be4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026be8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026bec:	30 19       	mov	r9,1
80026bee:	f2 08 09 48 	lsl	r8,r9,r8
80026bf2:	10 99       	mov	r9,r8
80026bf4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026bf8:	f1 49 00 88 	st.w	r8[136],r9
#endif    
    if (flags & GPIO_PULL_UP)
80026bfc:	ee f8 ff f4 	ld.w	r8,r7[-12]
80026c00:	e2 18 00 04 	andl	r8,0x4,COH
80026c04:	c0 e0       	breq	80026c20 <gpio_configure_pin+0x80>
            gpio_port->puers = 1 << (pin & 0x1F);
80026c06:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026c0a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026c0e:	30 19       	mov	r9,1
80026c10:	f2 08 09 48 	lsl	r8,r9,r8
80026c14:	10 99       	mov	r9,r8
80026c16:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026c1a:	f1 49 00 74 	st.w	r8[116],r9
80026c1e:	c0 d8       	rjmp	80026c38 <gpio_configure_pin+0x98>
    else
            gpio_port->puerc = 1 << (pin & 0x1F);
80026c20:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026c24:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026c28:	30 19       	mov	r9,1
80026c2a:	f2 08 09 48 	lsl	r8,r9,r8
80026c2e:	10 99       	mov	r9,r8
80026c30:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026c34:	f1 49 00 78 	st.w	r8[120],r9

    /* Enable open-drain mode if requested */
#if defined(AVR32_GPIO_200_H_INCLUDED) || defined(AVR32_GPIO_210_H_INCLUDED) || defined(AVR32_GPIO_212_H_INCLUDED)
            if (flags & GPIO_OPEN_DRAIN)
80026c38:	ee f8 ff f4 	ld.w	r8,r7[-12]
80026c3c:	e2 18 00 40 	andl	r8,0x40,COH
80026c40:	c0 e0       	breq	80026c5c <gpio_configure_pin+0xbc>
                    gpio_port->odmers = 1 << (pin & 0x1F);
80026c42:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026c46:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026c4a:	30 19       	mov	r9,1
80026c4c:	f2 08 09 48 	lsl	r8,r9,r8
80026c50:	10 99       	mov	r9,r8
80026c52:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026c56:	f1 49 00 e4 	st.w	r8[228],r9
80026c5a:	c0 d8       	rjmp	80026c74 <gpio_configure_pin+0xd4>
            else
                    gpio_port->odmerc = 1 << (pin & 0x1F);            
80026c5c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026c60:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026c64:	30 19       	mov	r9,1
80026c66:	f2 08 09 48 	lsl	r8,r9,r8
80026c6a:	10 99       	mov	r9,r8
80026c6c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026c70:	f1 49 00 e8 	st.w	r8[232],r9

            if (flags & GPIO_OPEN_DRAIN)
80026c74:	ee f8 ff f4 	ld.w	r8,r7[-12]
80026c78:	e2 18 00 40 	andl	r8,0x40,COH
80026c7c:	c0 e0       	breq	80026c98 <gpio_configure_pin+0xf8>
                    gpio_port->pders = 1 << (pin & 0x1F);
80026c7e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026c82:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026c86:	30 19       	mov	r9,1
80026c88:	f2 08 09 48 	lsl	r8,r9,r8
80026c8c:	10 99       	mov	r9,r8
80026c8e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026c92:	f1 49 00 84 	st.w	r8[132],r9
80026c96:	c0 d8       	rjmp	80026cb0 <gpio_configure_pin+0x110>
            else
                    gpio_port->pderc = 1 << (pin & 0x1F);
80026c98:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026c9c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026ca0:	30 19       	mov	r9,1
80026ca2:	f2 08 09 48 	lsl	r8,r9,r8
80026ca6:	10 99       	mov	r9,r8
80026ca8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026cac:	f1 49 00 88 	st.w	r8[136],r9
#endif 
            
#if defined(AVR32_GPIO_200_H_INCLUDED) || defined(AVR32_GPIO_210_H_INCLUDED) || defined(AVR32_GPIO_212_H_INCLUDED) 
            /* Select drive strength */
            if (flags & GPIO_DRIVE_LOW)
80026cb0:	ee f8 ff f4 	ld.w	r8,r7[-12]
80026cb4:	e2 18 00 10 	andl	r8,0x10,COH
80026cb8:	c0 e0       	breq	80026cd4 <gpio_configure_pin+0x134>
                    gpio_port->odcr0s = 1 << (pin & 0x1F);
80026cba:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026cbe:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026cc2:	30 19       	mov	r9,1
80026cc4:	f2 08 09 48 	lsl	r8,r9,r8
80026cc8:	10 99       	mov	r9,r8
80026cca:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026cce:	f1 49 01 04 	st.w	r8[260],r9
80026cd2:	c0 d8       	rjmp	80026cec <gpio_configure_pin+0x14c>
            else
                    gpio_port->odcr0c = 1 << (pin & 0x1F);
80026cd4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026cd8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026cdc:	30 19       	mov	r9,1
80026cde:	f2 08 09 48 	lsl	r8,r9,r8
80026ce2:	10 99       	mov	r9,r8
80026ce4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026ce8:	f1 49 01 08 	st.w	r8[264],r9
            if (flags & GPIO_DRIVE_HIGH)
80026cec:	ee f8 ff f4 	ld.w	r8,r7[-12]
80026cf0:	e2 18 00 20 	andl	r8,0x20,COH
80026cf4:	c0 e0       	breq	80026d10 <gpio_configure_pin+0x170>
                    gpio_port->odcr1s = 1 << (pin & 0x1F);
80026cf6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026cfa:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026cfe:	30 19       	mov	r9,1
80026d00:	f2 08 09 48 	lsl	r8,r9,r8
80026d04:	10 99       	mov	r9,r8
80026d06:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026d0a:	f1 49 01 14 	st.w	r8[276],r9
80026d0e:	c0 d8       	rjmp	80026d28 <gpio_configure_pin+0x188>
            else
                    gpio_port->odcr1c = 1 << (pin & 0x1F);
80026d10:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026d14:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026d18:	30 19       	mov	r9,1
80026d1a:	f2 08 09 48 	lsl	r8,r9,r8
80026d1e:	10 99       	mov	r9,r8
80026d20:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026d24:	f1 49 01 18 	st.w	r8[280],r9
#endif

    /* Select interrupt level for group */
    if (flags & GPIO_INTERRUPT) {
80026d28:	ee f8 ff f4 	ld.w	r8,r7[-12]
80026d2c:	e2 18 00 80 	andl	r8,0x80,COH
80026d30:	c5 a0       	breq	80026de4 <gpio_configure_pin+0x244>
            if (flags & GPIO_BOTHEDGES)
80026d32:	ee f8 ff f4 	ld.w	r8,r7[-12]
80026d36:	e2 18 01 80 	andl	r8,0x180,COH
80026d3a:	c1 a0       	breq	80026d6e <gpio_configure_pin+0x1ce>
            {
                   gpio_port->imr0c = 1 << (pin & 0x1F);
80026d3c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026d40:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026d44:	30 19       	mov	r9,1
80026d46:	f2 08 09 48 	lsl	r8,r9,r8
80026d4a:	10 99       	mov	r9,r8
80026d4c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026d50:	f1 49 00 a8 	st.w	r8[168],r9
                   gpio_port->imr1c = 1 << (pin & 0x1F);
80026d54:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026d58:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026d5c:	30 19       	mov	r9,1
80026d5e:	f2 08 09 48 	lsl	r8,r9,r8
80026d62:	10 99       	mov	r9,r8
80026d64:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026d68:	f1 49 00 b8 	st.w	r8[184],r9
80026d6c:	c3 c8       	rjmp	80026de4 <gpio_configure_pin+0x244>
            }
            else if (flags & GPIO_RISING)
80026d6e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80026d72:	e2 18 02 80 	andl	r8,0x280,COH
80026d76:	c1 a0       	breq	80026daa <gpio_configure_pin+0x20a>
            {
                   gpio_port->imr0s = 1 << (pin & 0x1F);
80026d78:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026d7c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026d80:	30 19       	mov	r9,1
80026d82:	f2 08 09 48 	lsl	r8,r9,r8
80026d86:	10 99       	mov	r9,r8
80026d88:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026d8c:	f1 49 00 a4 	st.w	r8[164],r9
                   gpio_port->imr1c = 1 << (pin & 0x1F);
80026d90:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026d94:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026d98:	30 19       	mov	r9,1
80026d9a:	f2 08 09 48 	lsl	r8,r9,r8
80026d9e:	10 99       	mov	r9,r8
80026da0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026da4:	f1 49 00 b8 	st.w	r8[184],r9
80026da8:	c1 e8       	rjmp	80026de4 <gpio_configure_pin+0x244>
            }
            else if (flags & GPIO_FALLING)
80026daa:	ee f8 ff f4 	ld.w	r8,r7[-12]
80026dae:	e2 18 03 80 	andl	r8,0x380,COH
80026db2:	c1 90       	breq	80026de4 <gpio_configure_pin+0x244>
            {
                   gpio_port->imr0c = 1 << (pin & 0x1F);
80026db4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026db8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026dbc:	30 19       	mov	r9,1
80026dbe:	f2 08 09 48 	lsl	r8,r9,r8
80026dc2:	10 99       	mov	r9,r8
80026dc4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026dc8:	f1 49 00 a8 	st.w	r8[168],r9
                   gpio_port->imr1s = 1 << (pin & 0x1F);
80026dcc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026dd0:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026dd4:	30 19       	mov	r9,1
80026dd6:	f2 08 09 48 	lsl	r8,r9,r8
80026dda:	10 99       	mov	r9,r8
80026ddc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026de0:	f1 49 00 b4 	st.w	r8[180],r9
            }
    }

    /* Select direction and initial pin state */
    if (flags & GPIO_DIR_OUTPUT) {
80026de4:	ee f8 ff f4 	ld.w	r8,r7[-12]
80026de8:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80026dec:	5c 58       	castu.b	r8
80026dee:	c2 c0       	breq	80026e46 <gpio_configure_pin+0x2a6>
            if (flags & GPIO_INIT_HIGH)
80026df0:	ee f8 ff f4 	ld.w	r8,r7[-12]
80026df4:	e2 18 00 02 	andl	r8,0x2,COH
80026df8:	c0 e0       	breq	80026e14 <gpio_configure_pin+0x274>
                    gpio_port->ovrs = 1 << (pin & 0x1F);
80026dfa:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026dfe:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026e02:	30 19       	mov	r9,1
80026e04:	f2 08 09 48 	lsl	r8,r9,r8
80026e08:	10 99       	mov	r9,r8
80026e0a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026e0e:	f1 49 00 54 	st.w	r8[84],r9
80026e12:	c0 d8       	rjmp	80026e2c <gpio_configure_pin+0x28c>
            else
                    gpio_port->ovrc = 1 << (pin & 0x1F);
80026e14:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026e18:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026e1c:	30 19       	mov	r9,1
80026e1e:	f2 08 09 48 	lsl	r8,r9,r8
80026e22:	10 99       	mov	r9,r8
80026e24:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026e28:	f1 49 00 58 	st.w	r8[88],r9
            gpio_port->oders = 1 << (pin & 0x1F);
80026e2c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026e30:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026e34:	30 19       	mov	r9,1
80026e36:	f2 08 09 48 	lsl	r8,r9,r8
80026e3a:	10 99       	mov	r9,r8
80026e3c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026e40:	f1 49 00 44 	st.w	r8[68],r9
80026e44:	c0 d8       	rjmp	80026e5e <gpio_configure_pin+0x2be>
    } else {
            gpio_port->oderc = 1 << (pin & 0x1F);
80026e46:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026e4a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026e4e:	30 19       	mov	r9,1
80026e50:	f2 08 09 48 	lsl	r8,r9,r8
80026e54:	10 99       	mov	r9,r8
80026e56:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026e5a:	f1 49 00 48 	st.w	r8[72],r9
    }

    /* Enable GPIO */
    gpio_port->gpers = 1 << (pin & 0x1F);
80026e5e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026e62:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026e66:	30 19       	mov	r9,1
80026e68:	f2 08 09 48 	lsl	r8,r9,r8
80026e6c:	10 99       	mov	r9,r8
80026e6e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026e72:	91 19       	st.w	r8[0x4],r9
}
80026e74:	2f dd       	sub	sp,-12
80026e76:	e3 cd 80 80 	ldm	sp++,r7,pc

80026e7a <gpio_configure_group>:

void gpio_configure_group(uint32_t port, uint32_t mask, uint32_t flags)
{  
80026e7a:	eb cd 40 80 	pushm	r7,lr
80026e7e:	1a 97       	mov	r7,sp
80026e80:	20 4d       	sub	sp,16
80026e82:	ef 4c ff f8 	st.w	r7[-8],r12
80026e86:	ef 4b ff f4 	st.w	r7[-12],r11
80026e8a:	ef 4a ff f0 	st.w	r7[-16],r10
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[port];  
80026e8e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026e92:	a9 78       	lsl	r8,0x9
80026e94:	e0 28 e0 00 	sub	r8,57344
80026e98:	ef 48 ff fc 	st.w	r7[-4],r8

  /* Both pull-up and pull-down set means buskeeper */
#if defined(AVR32_GPIO_200_H_INCLUDED) || defined(AVR32_GPIO_210_H_INCLUDED) || defined(AVR32_GPIO_212_H_INCLUDED)  
    if (flags & GPIO_PULL_DOWN)
80026e9c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80026ea0:	e2 18 00 08 	andl	r8,0x8,COH
80026ea4:	c0 80       	breq	80026eb4 <gpio_configure_group+0x3a>
            gpio_port->pders = mask;
80026ea6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026eaa:	ee f9 ff f4 	ld.w	r9,r7[-12]
80026eae:	f1 49 00 84 	st.w	r8[132],r9
80026eb2:	c0 78       	rjmp	80026ec0 <gpio_configure_group+0x46>
    else
            gpio_port->pderc = mask;
80026eb4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026eb8:	ee f9 ff f4 	ld.w	r9,r7[-12]
80026ebc:	f1 49 00 88 	st.w	r8[136],r9
#endif    
    if (flags & GPIO_PULL_UP)
80026ec0:	ee f8 ff f0 	ld.w	r8,r7[-16]
80026ec4:	e2 18 00 04 	andl	r8,0x4,COH
80026ec8:	c0 80       	breq	80026ed8 <gpio_configure_group+0x5e>
            gpio_port->puers = mask;
80026eca:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026ece:	ee f9 ff f4 	ld.w	r9,r7[-12]
80026ed2:	f1 49 00 74 	st.w	r8[116],r9
80026ed6:	c0 78       	rjmp	80026ee4 <gpio_configure_group+0x6a>
    else
            gpio_port->puerc = mask;
80026ed8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026edc:	ee f9 ff f4 	ld.w	r9,r7[-12]
80026ee0:	f1 49 00 78 	st.w	r8[120],r9

    /* Enable open-drain mode if requested */
#if defined(AVR32_GPIO_200_H_INCLUDED) || defined(AVR32_GPIO_210_H_INCLUDED) || defined(AVR32_GPIO_212_H_INCLUDED)  
            if (flags & GPIO_OPEN_DRAIN)
80026ee4:	ee f8 ff f0 	ld.w	r8,r7[-16]
80026ee8:	e2 18 00 40 	andl	r8,0x40,COH
80026eec:	c0 80       	breq	80026efc <gpio_configure_group+0x82>
                    gpio_port->odmers = mask;
80026eee:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026ef2:	ee f9 ff f4 	ld.w	r9,r7[-12]
80026ef6:	f1 49 00 e4 	st.w	r8[228],r9
80026efa:	c0 78       	rjmp	80026f08 <gpio_configure_group+0x8e>
            else
                    gpio_port->odmerc = mask;            
80026efc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026f00:	ee f9 ff f4 	ld.w	r9,r7[-12]
80026f04:	f1 49 00 e8 	st.w	r8[232],r9

            if (flags & GPIO_OPEN_DRAIN)
80026f08:	ee f8 ff f0 	ld.w	r8,r7[-16]
80026f0c:	e2 18 00 40 	andl	r8,0x40,COH
80026f10:	c0 80       	breq	80026f20 <gpio_configure_group+0xa6>
                    gpio_port->pders = mask;
80026f12:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026f16:	ee f9 ff f4 	ld.w	r9,r7[-12]
80026f1a:	f1 49 00 84 	st.w	r8[132],r9
80026f1e:	c0 78       	rjmp	80026f2c <gpio_configure_group+0xb2>
            else
                    gpio_port->pderc = mask;
80026f20:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026f24:	ee f9 ff f4 	ld.w	r9,r7[-12]
80026f28:	f1 49 00 88 	st.w	r8[136],r9
#endif 
            
#if defined(AVR32_GPIO_200_H_INCLUDED) || defined(AVR32_GPIO_210_H_INCLUDED) || defined(AVR32_GPIO_212_H_INCLUDED) 
            /* Select drive strength */
            if (flags & GPIO_DRIVE_LOW)
80026f2c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80026f30:	e2 18 00 10 	andl	r8,0x10,COH
80026f34:	c0 80       	breq	80026f44 <gpio_configure_group+0xca>
                    gpio_port->odcr0s = mask;
80026f36:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026f3a:	ee f9 ff f4 	ld.w	r9,r7[-12]
80026f3e:	f1 49 01 04 	st.w	r8[260],r9
80026f42:	c0 78       	rjmp	80026f50 <gpio_configure_group+0xd6>
            else
                    gpio_port->odcr0c = mask;
80026f44:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026f48:	ee f9 ff f4 	ld.w	r9,r7[-12]
80026f4c:	f1 49 01 08 	st.w	r8[264],r9
            if (flags & GPIO_DRIVE_HIGH)
80026f50:	ee f8 ff f0 	ld.w	r8,r7[-16]
80026f54:	e2 18 00 20 	andl	r8,0x20,COH
80026f58:	c0 80       	breq	80026f68 <gpio_configure_group+0xee>
                    gpio_port->odcr1s = mask;
80026f5a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026f5e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80026f62:	f1 49 01 14 	st.w	r8[276],r9
80026f66:	c0 78       	rjmp	80026f74 <gpio_configure_group+0xfa>
            else
                    gpio_port->odcr1c = mask;
80026f68:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026f6c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80026f70:	f1 49 01 18 	st.w	r8[280],r9
#endif

    /* Select interrupt level for group */
    if (flags & GPIO_INTERRUPT) {
80026f74:	ee f8 ff f0 	ld.w	r8,r7[-16]
80026f78:	e2 18 00 80 	andl	r8,0x80,COH
80026f7c:	c3 60       	breq	80026fe8 <gpio_configure_group+0x16e>
            if (flags & GPIO_BOTHEDGES)
80026f7e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80026f82:	e2 18 01 80 	andl	r8,0x180,COH
80026f86:	c0 e0       	breq	80026fa2 <gpio_configure_group+0x128>
            {
                   gpio_port->imr0c = mask;
80026f88:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026f8c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80026f90:	f1 49 00 a8 	st.w	r8[168],r9
                   gpio_port->imr1c = mask;
80026f94:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026f98:	ee f9 ff f4 	ld.w	r9,r7[-12]
80026f9c:	f1 49 00 b8 	st.w	r8[184],r9
80026fa0:	c2 48       	rjmp	80026fe8 <gpio_configure_group+0x16e>
            }
            else if (flags & GPIO_RISING)
80026fa2:	ee f8 ff f0 	ld.w	r8,r7[-16]
80026fa6:	e2 18 02 80 	andl	r8,0x280,COH
80026faa:	c0 e0       	breq	80026fc6 <gpio_configure_group+0x14c>
            {
                   gpio_port->imr0s = mask;
80026fac:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026fb0:	ee f9 ff f4 	ld.w	r9,r7[-12]
80026fb4:	f1 49 00 a4 	st.w	r8[164],r9
                   gpio_port->imr1c = mask;
80026fb8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026fbc:	ee f9 ff f4 	ld.w	r9,r7[-12]
80026fc0:	f1 49 00 b8 	st.w	r8[184],r9
80026fc4:	c1 28       	rjmp	80026fe8 <gpio_configure_group+0x16e>
            }
            else if (flags & GPIO_FALLING)
80026fc6:	ee f8 ff f0 	ld.w	r8,r7[-16]
80026fca:	e2 18 03 80 	andl	r8,0x380,COH
80026fce:	c0 d0       	breq	80026fe8 <gpio_configure_group+0x16e>
            {
                   gpio_port->imr0c = mask;
80026fd0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026fd4:	ee f9 ff f4 	ld.w	r9,r7[-12]
80026fd8:	f1 49 00 a8 	st.w	r8[168],r9
                   gpio_port->imr1s = mask;
80026fdc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026fe0:	ee f9 ff f4 	ld.w	r9,r7[-12]
80026fe4:	f1 49 00 b4 	st.w	r8[180],r9
            }
    }

    /* Select direction and initial pin state */
    if (flags & GPIO_DIR_OUTPUT) {
80026fe8:	ee f8 ff f0 	ld.w	r8,r7[-16]
80026fec:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80026ff0:	5c 58       	castu.b	r8
80026ff2:	c1 a0       	breq	80027026 <gpio_configure_group+0x1ac>
            if (flags & GPIO_INIT_HIGH)
80026ff4:	ee f8 ff f0 	ld.w	r8,r7[-16]
80026ff8:	e2 18 00 02 	andl	r8,0x2,COH
80026ffc:	c0 80       	breq	8002700c <gpio_configure_group+0x192>
                    gpio_port->ovrs = mask;
80026ffe:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027002:	ee f9 ff f4 	ld.w	r9,r7[-12]
80027006:	f1 49 00 54 	st.w	r8[84],r9
8002700a:	c0 78       	rjmp	80027018 <gpio_configure_group+0x19e>
            else
                    gpio_port->ovrc = mask;
8002700c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027010:	ee f9 ff f4 	ld.w	r9,r7[-12]
80027014:	f1 49 00 58 	st.w	r8[88],r9
            gpio_port->oders = mask;
80027018:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002701c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80027020:	f1 49 00 44 	st.w	r8[68],r9
80027024:	c0 78       	rjmp	80027032 <gpio_configure_group+0x1b8>
    } else {
            gpio_port->oderc = mask;
80027026:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002702a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002702e:	f1 49 00 48 	st.w	r8[72],r9
    }
    
    /* Enable GPIO */
    gpio_port->gpers = mask;
80027032:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027036:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002703a:	91 19       	st.w	r8[0x4],r9
}
8002703c:	2f cd       	sub	sp,-16
8002703e:	e3 cd 80 80 	ldm	sp++,r7,pc

80027042 <gpio_get_pin_value>:

int gpio_get_pin_value(uint32_t pin)
{
80027042:	eb cd 40 80 	pushm	r7,lr
80027046:	1a 97       	mov	r7,sp
80027048:	20 2d       	sub	sp,8
8002704a:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
8002704e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027052:	a5 98       	lsr	r8,0x5
80027054:	a9 78       	lsl	r8,0x9
80027056:	e0 28 e0 00 	sub	r8,57344
8002705a:	ef 48 ff fc 	st.w	r7[-4],r8
  return (gpio_port->pvr >> (pin & 0x1F)) & 1;
8002705e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027062:	71 89       	ld.w	r9,r8[0x60]
80027064:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027068:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8002706c:	f2 08 0a 48 	lsr	r8,r9,r8
80027070:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
}
80027074:	10 9c       	mov	r12,r8
80027076:	2f ed       	sub	sp,-8
80027078:	e3 cd 80 80 	ldm	sp++,r7,pc

8002707c <gpio_get_gpio_pin_output_value>:


int gpio_get_gpio_pin_output_value(uint32_t pin)
{
8002707c:	eb cd 40 80 	pushm	r7,lr
80027080:	1a 97       	mov	r7,sp
80027082:	20 2d       	sub	sp,8
80027084:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80027088:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002708c:	a5 98       	lsr	r8,0x5
8002708e:	a9 78       	lsl	r8,0x9
80027090:	e0 28 e0 00 	sub	r8,57344
80027094:	ef 48 ff fc 	st.w	r7[-4],r8
  return (gpio_port->ovr >> (pin & 0x1F)) & 1;
80027098:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002709c:	71 49       	ld.w	r9,r8[0x50]
8002709e:	ee f8 ff f8 	ld.w	r8,r7[-8]
800270a2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800270a6:	f2 08 0a 48 	lsr	r8,r9,r8
800270aa:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
}
800270ae:	10 9c       	mov	r12,r8
800270b0:	2f ed       	sub	sp,-8
800270b2:	e3 cd 80 80 	ldm	sp++,r7,pc

800270b6 <gpio_get_gpio_open_drain_pin_output_value>:


int gpio_get_gpio_open_drain_pin_output_value(uint32_t pin)
{
800270b6:	eb cd 40 80 	pushm	r7,lr
800270ba:	1a 97       	mov	r7,sp
800270bc:	20 2d       	sub	sp,8
800270be:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
800270c2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800270c6:	a5 98       	lsr	r8,0x5
800270c8:	a9 78       	lsl	r8,0x9
800270ca:	e0 28 e0 00 	sub	r8,57344
800270ce:	ef 48 ff fc 	st.w	r7[-4],r8
  return ((gpio_port->oder >> (pin & 0x1F)) & 1) ^ 1;
800270d2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800270d6:	71 09       	ld.w	r9,r8[0x40]
800270d8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800270dc:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800270e0:	f2 08 0a 48 	lsr	r8,r9,r8
800270e4:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800270e8:	5f 08       	sreq	r8
}
800270ea:	10 9c       	mov	r12,r8
800270ec:	2f ed       	sub	sp,-8
800270ee:	e3 cd 80 80 	ldm	sp++,r7,pc

800270f2 <gpio_set_gpio_pin>:


void gpio_set_gpio_pin(uint32_t pin)
{
800270f2:	eb cd 40 80 	pushm	r7,lr
800270f6:	1a 97       	mov	r7,sp
800270f8:	20 2d       	sub	sp,8
800270fa:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
800270fe:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027102:	a5 98       	lsr	r8,0x5
80027104:	a9 78       	lsl	r8,0x9
80027106:	e0 28 e0 00 	sub	r8,57344
8002710a:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->ovrs  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 1.
8002710e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027112:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027116:	30 19       	mov	r9,1
80027118:	f2 08 09 48 	lsl	r8,r9,r8
8002711c:	10 99       	mov	r9,r8
8002711e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027122:	f1 49 00 54 	st.w	r8[84],r9
  gpio_port->oders = 1 << (pin & 0x1F); // The GPIO output driver is enabled for that pin.
80027126:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002712a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8002712e:	30 19       	mov	r9,1
80027130:	f2 08 09 48 	lsl	r8,r9,r8
80027134:	10 99       	mov	r9,r8
80027136:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002713a:	f1 49 00 44 	st.w	r8[68],r9
  gpio_port->gpers = 1 << (pin & 0x1F); // The GPIO module controls that pin.
8002713e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027142:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027146:	30 19       	mov	r9,1
80027148:	f2 08 09 48 	lsl	r8,r9,r8
8002714c:	10 99       	mov	r9,r8
8002714e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027152:	91 19       	st.w	r8[0x4],r9
}
80027154:	2f ed       	sub	sp,-8
80027156:	e3 cd 80 80 	ldm	sp++,r7,pc

8002715a <gpio_set_pin_high>:

void gpio_set_pin_high(uint32_t pin)
{
8002715a:	eb cd 40 80 	pushm	r7,lr
8002715e:	1a 97       	mov	r7,sp
80027160:	20 2d       	sub	sp,8
80027162:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80027166:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002716a:	a5 98       	lsr	r8,0x5
8002716c:	a9 78       	lsl	r8,0x9
8002716e:	e0 28 e0 00 	sub	r8,57344
80027172:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->ovrs  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 1.
80027176:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002717a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8002717e:	30 19       	mov	r9,1
80027180:	f2 08 09 48 	lsl	r8,r9,r8
80027184:	10 99       	mov	r9,r8
80027186:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002718a:	f1 49 00 54 	st.w	r8[84],r9
}
8002718e:	2f ed       	sub	sp,-8
80027190:	e3 cd 80 80 	ldm	sp++,r7,pc

80027194 <gpio_set_group_high>:

void gpio_set_group_high(uint32_t port, uint32_t mask)
{
80027194:	eb cd 40 80 	pushm	r7,lr
80027198:	1a 97       	mov	r7,sp
8002719a:	20 3d       	sub	sp,12
8002719c:	ef 4c ff f8 	st.w	r7[-8],r12
800271a0:	ef 4b ff f4 	st.w	r7[-12],r11
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[port];
800271a4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800271a8:	a9 78       	lsl	r8,0x9
800271aa:	e0 28 e0 00 	sub	r8,57344
800271ae:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->ovrs  = mask; // Value to be driven on the I/O group: 1.
800271b2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800271b6:	ee f9 ff f4 	ld.w	r9,r7[-12]
800271ba:	f1 49 00 54 	st.w	r8[84],r9
}
800271be:	2f dd       	sub	sp,-12
800271c0:	e3 cd 80 80 	ldm	sp++,r7,pc

800271c4 <gpio_set_pin_low>:


void gpio_set_pin_low(uint32_t pin)
{
800271c4:	eb cd 40 80 	pushm	r7,lr
800271c8:	1a 97       	mov	r7,sp
800271ca:	20 2d       	sub	sp,8
800271cc:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
800271d0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800271d4:	a5 98       	lsr	r8,0x5
800271d6:	a9 78       	lsl	r8,0x9
800271d8:	e0 28 e0 00 	sub	r8,57344
800271dc:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->ovrc  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 0.
800271e0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800271e4:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800271e8:	30 19       	mov	r9,1
800271ea:	f2 08 09 48 	lsl	r8,r9,r8
800271ee:	10 99       	mov	r9,r8
800271f0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800271f4:	f1 49 00 58 	st.w	r8[88],r9
}
800271f8:	2f ed       	sub	sp,-8
800271fa:	e3 cd 80 80 	ldm	sp++,r7,pc

800271fe <gpio_clr_gpio_pin>:

void gpio_clr_gpio_pin(uint32_t pin)
{
800271fe:	eb cd 40 80 	pushm	r7,lr
80027202:	1a 97       	mov	r7,sp
80027204:	20 2d       	sub	sp,8
80027206:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
8002720a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002720e:	a5 98       	lsr	r8,0x5
80027210:	a9 78       	lsl	r8,0x9
80027212:	e0 28 e0 00 	sub	r8,57344
80027216:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->ovrc  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 0.
8002721a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002721e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027222:	30 19       	mov	r9,1
80027224:	f2 08 09 48 	lsl	r8,r9,r8
80027228:	10 99       	mov	r9,r8
8002722a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002722e:	f1 49 00 58 	st.w	r8[88],r9
  gpio_port->oders = 1 << (pin & 0x1F); // The GPIO output driver is enabled for that pin.
80027232:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027236:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8002723a:	30 19       	mov	r9,1
8002723c:	f2 08 09 48 	lsl	r8,r9,r8
80027240:	10 99       	mov	r9,r8
80027242:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027246:	f1 49 00 44 	st.w	r8[68],r9
  gpio_port->gpers = 1 << (pin & 0x1F); // The GPIO module controls that pin.  
8002724a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002724e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027252:	30 19       	mov	r9,1
80027254:	f2 08 09 48 	lsl	r8,r9,r8
80027258:	10 99       	mov	r9,r8
8002725a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002725e:	91 19       	st.w	r8[0x4],r9
}
80027260:	2f ed       	sub	sp,-8
80027262:	e3 cd 80 80 	ldm	sp++,r7,pc

80027266 <gpio_set_group_low>:

void gpio_set_group_low(uint32_t port, uint32_t mask)
{
80027266:	eb cd 40 80 	pushm	r7,lr
8002726a:	1a 97       	mov	r7,sp
8002726c:	20 3d       	sub	sp,12
8002726e:	ef 4c ff f8 	st.w	r7[-8],r12
80027272:	ef 4b ff f4 	st.w	r7[-12],r11
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[port];
80027276:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002727a:	a9 78       	lsl	r8,0x9
8002727c:	e0 28 e0 00 	sub	r8,57344
80027280:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->ovrc  = mask; // Value to be driven on the I/O group: 0.
80027284:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027288:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002728c:	f1 49 00 58 	st.w	r8[88],r9
}
80027290:	2f dd       	sub	sp,-12
80027292:	e3 cd 80 80 	ldm	sp++,r7,pc

80027296 <gpio_tgl_gpio_pin>:

void gpio_tgl_gpio_pin(uint32_t pin)
{
80027296:	eb cd 40 80 	pushm	r7,lr
8002729a:	1a 97       	mov	r7,sp
8002729c:	20 2d       	sub	sp,8
8002729e:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
800272a2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800272a6:	a5 98       	lsr	r8,0x5
800272a8:	a9 78       	lsl	r8,0x9
800272aa:	e0 28 e0 00 	sub	r8,57344
800272ae:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->ovrt  = 1 << (pin & 0x1F); // Toggle the I/O line.
800272b2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800272b6:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800272ba:	30 19       	mov	r9,1
800272bc:	f2 08 09 48 	lsl	r8,r9,r8
800272c0:	10 99       	mov	r9,r8
800272c2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800272c6:	f1 49 00 5c 	st.w	r8[92],r9
  gpio_port->oders = 1 << (pin & 0x1F); // The GPIO output driver is enabled for that pin.
800272ca:	ee f8 ff f8 	ld.w	r8,r7[-8]
800272ce:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800272d2:	30 19       	mov	r9,1
800272d4:	f2 08 09 48 	lsl	r8,r9,r8
800272d8:	10 99       	mov	r9,r8
800272da:	ee f8 ff fc 	ld.w	r8,r7[-4]
800272de:	f1 49 00 44 	st.w	r8[68],r9
  gpio_port->gpers = 1 << (pin & 0x1F); // The GPIO module controls that pin.
800272e2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800272e6:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800272ea:	30 19       	mov	r9,1
800272ec:	f2 08 09 48 	lsl	r8,r9,r8
800272f0:	10 99       	mov	r9,r8
800272f2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800272f6:	91 19       	st.w	r8[0x4],r9
}
800272f8:	2f ed       	sub	sp,-8
800272fa:	e3 cd 80 80 	ldm	sp++,r7,pc

800272fe <gpio_toggle_pin>:

void gpio_toggle_pin(uint32_t pin)
{
800272fe:	eb cd 40 80 	pushm	r7,lr
80027302:	1a 97       	mov	r7,sp
80027304:	20 2d       	sub	sp,8
80027306:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
8002730a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002730e:	a5 98       	lsr	r8,0x5
80027310:	a9 78       	lsl	r8,0x9
80027312:	e0 28 e0 00 	sub	r8,57344
80027316:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->ovrt  = 1 << (pin & 0x1F); // Toggle the I/O line.
8002731a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002731e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027322:	30 19       	mov	r9,1
80027324:	f2 08 09 48 	lsl	r8,r9,r8
80027328:	10 99       	mov	r9,r8
8002732a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002732e:	f1 49 00 5c 	st.w	r8[92],r9
}
80027332:	2f ed       	sub	sp,-8
80027334:	e3 cd 80 80 	ldm	sp++,r7,pc

80027338 <gpio_toggle_group>:

void gpio_toggle_group(uint32_t port, uint32_t mask)
{
80027338:	eb cd 40 80 	pushm	r7,lr
8002733c:	1a 97       	mov	r7,sp
8002733e:	20 3d       	sub	sp,12
80027340:	ef 4c ff f8 	st.w	r7[-8],r12
80027344:	ef 4b ff f4 	st.w	r7[-12],r11
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[port];
80027348:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002734c:	a9 78       	lsl	r8,0x9
8002734e:	e0 28 e0 00 	sub	r8,57344
80027352:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->ovrt  = mask; // Toggle the I/O port.
80027356:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002735a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002735e:	f1 49 00 5c 	st.w	r8[92],r9
}
80027362:	2f dd       	sub	sp,-12
80027364:	e3 cd 80 80 	ldm	sp++,r7,pc

80027368 <gpio_set_gpio_open_drain_pin>:

void gpio_set_gpio_open_drain_pin(uint32_t pin)
{
80027368:	eb cd 40 80 	pushm	r7,lr
8002736c:	1a 97       	mov	r7,sp
8002736e:	20 2d       	sub	sp,8
80027370:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80027374:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027378:	a5 98       	lsr	r8,0x5
8002737a:	a9 78       	lsl	r8,0x9
8002737c:	e0 28 e0 00 	sub	r8,57344
80027380:	ef 48 ff fc 	st.w	r7[-4],r8

  gpio_port->oderc = 1 << (pin & 0x1F); // The GPIO output driver is disabled for that pin.
80027384:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027388:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8002738c:	30 19       	mov	r9,1
8002738e:	f2 08 09 48 	lsl	r8,r9,r8
80027392:	10 99       	mov	r9,r8
80027394:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027398:	f1 49 00 48 	st.w	r8[72],r9
  gpio_port->gpers = 1 << (pin & 0x1F); // The GPIO module controls that pin.
8002739c:	ee f8 ff f8 	ld.w	r8,r7[-8]
800273a0:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800273a4:	30 19       	mov	r9,1
800273a6:	f2 08 09 48 	lsl	r8,r9,r8
800273aa:	10 99       	mov	r9,r8
800273ac:	ee f8 ff fc 	ld.w	r8,r7[-4]
800273b0:	91 19       	st.w	r8[0x4],r9
}
800273b2:	2f ed       	sub	sp,-8
800273b4:	e3 cd 80 80 	ldm	sp++,r7,pc

800273b8 <gpio_clr_gpio_open_drain_pin>:


void gpio_clr_gpio_open_drain_pin(uint32_t pin)
{
800273b8:	eb cd 40 80 	pushm	r7,lr
800273bc:	1a 97       	mov	r7,sp
800273be:	20 2d       	sub	sp,8
800273c0:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
800273c4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800273c8:	a5 98       	lsr	r8,0x5
800273ca:	a9 78       	lsl	r8,0x9
800273cc:	e0 28 e0 00 	sub	r8,57344
800273d0:	ef 48 ff fc 	st.w	r7[-4],r8

  gpio_port->ovrc  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 0.
800273d4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800273d8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800273dc:	30 19       	mov	r9,1
800273de:	f2 08 09 48 	lsl	r8,r9,r8
800273e2:	10 99       	mov	r9,r8
800273e4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800273e8:	f1 49 00 58 	st.w	r8[88],r9
  gpio_port->oders = 1 << (pin & 0x1F); // The GPIO output driver is enabled for that pin.
800273ec:	ee f8 ff f8 	ld.w	r8,r7[-8]
800273f0:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800273f4:	30 19       	mov	r9,1
800273f6:	f2 08 09 48 	lsl	r8,r9,r8
800273fa:	10 99       	mov	r9,r8
800273fc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027400:	f1 49 00 44 	st.w	r8[68],r9
  gpio_port->gpers = 1 << (pin & 0x1F); // The GPIO module controls that pin.
80027404:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027408:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8002740c:	30 19       	mov	r9,1
8002740e:	f2 08 09 48 	lsl	r8,r9,r8
80027412:	10 99       	mov	r9,r8
80027414:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027418:	91 19       	st.w	r8[0x4],r9
}
8002741a:	2f ed       	sub	sp,-8
8002741c:	e3 cd 80 80 	ldm	sp++,r7,pc

80027420 <gpio_tgl_gpio_open_drain_pin>:


void gpio_tgl_gpio_open_drain_pin(uint32_t pin)
{
80027420:	eb cd 40 80 	pushm	r7,lr
80027424:	1a 97       	mov	r7,sp
80027426:	20 2d       	sub	sp,8
80027428:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
8002742c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027430:	a5 98       	lsr	r8,0x5
80027432:	a9 78       	lsl	r8,0x9
80027434:	e0 28 e0 00 	sub	r8,57344
80027438:	ef 48 ff fc 	st.w	r7[-4],r8

  gpio_port->ovrc  = 1 << (pin & 0x1F); // Value to be driven on the I/O line if the GPIO output driver is enabled: 0.
8002743c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027440:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027444:	30 19       	mov	r9,1
80027446:	f2 08 09 48 	lsl	r8,r9,r8
8002744a:	10 99       	mov	r9,r8
8002744c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027450:	f1 49 00 58 	st.w	r8[88],r9
  gpio_port->odert = 1 << (pin & 0x1F); // The GPIO output driver is toggled for that pin.
80027454:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027458:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8002745c:	30 19       	mov	r9,1
8002745e:	f2 08 09 48 	lsl	r8,r9,r8
80027462:	10 99       	mov	r9,r8
80027464:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027468:	f1 49 00 4c 	st.w	r8[76],r9
  gpio_port->gpers = 1 << (pin & 0x1F); // The GPIO module controls that pin.
8002746c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027470:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027474:	30 19       	mov	r9,1
80027476:	f2 08 09 48 	lsl	r8,r9,r8
8002747a:	10 99       	mov	r9,r8
8002747c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027480:	91 19       	st.w	r8[0x4],r9
}
80027482:	2f ed       	sub	sp,-8
80027484:	e3 cd 80 80 	ldm	sp++,r7,pc

80027488 <gpio_enable_pin_glitch_filter>:


void gpio_enable_pin_glitch_filter(uint32_t pin)
{
80027488:	eb cd 40 80 	pushm	r7,lr
8002748c:	1a 97       	mov	r7,sp
8002748e:	20 2d       	sub	sp,8
80027490:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80027494:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027498:	a5 98       	lsr	r8,0x5
8002749a:	a9 78       	lsl	r8,0x9
8002749c:	e0 28 e0 00 	sub	r8,57344
800274a0:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->gfers = 1 << (pin & 0x1F);
800274a4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800274a8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800274ac:	30 19       	mov	r9,1
800274ae:	f2 08 09 48 	lsl	r8,r9,r8
800274b2:	10 99       	mov	r9,r8
800274b4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800274b8:	f1 49 00 c4 	st.w	r8[196],r9
}
800274bc:	2f ed       	sub	sp,-8
800274be:	e3 cd 80 80 	ldm	sp++,r7,pc

800274c2 <gpio_disable_pin_glitch_filter>:


void gpio_disable_pin_glitch_filter(uint32_t pin)
{
800274c2:	eb cd 40 80 	pushm	r7,lr
800274c6:	1a 97       	mov	r7,sp
800274c8:	20 2d       	sub	sp,8
800274ca:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
800274ce:	ee f8 ff f8 	ld.w	r8,r7[-8]
800274d2:	a5 98       	lsr	r8,0x5
800274d4:	a9 78       	lsl	r8,0x9
800274d6:	e0 28 e0 00 	sub	r8,57344
800274da:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->gferc = 1 << (pin & 0x1F);
800274de:	ee f8 ff f8 	ld.w	r8,r7[-8]
800274e2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800274e6:	30 19       	mov	r9,1
800274e8:	f2 08 09 48 	lsl	r8,r9,r8
800274ec:	10 99       	mov	r9,r8
800274ee:	ee f8 ff fc 	ld.w	r8,r7[-4]
800274f2:	f1 49 00 c8 	st.w	r8[200],r9
}
800274f6:	2f ed       	sub	sp,-8
800274f8:	e3 cd 80 80 	ldm	sp++,r7,pc

800274fc <gpio_configure_edge_detector>:
 *             or \ref GPIO_FALLING_EDGE).
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
static int gpio_configure_edge_detector(uint32_t pin, uint32_t mode)
{
800274fc:	eb cd 40 80 	pushm	r7,lr
80027500:	1a 97       	mov	r7,sp
80027502:	20 3d       	sub	sp,12
80027504:	ef 4c ff f8 	st.w	r7[-8],r12
80027508:	ef 4b ff f4 	st.w	r7[-12],r11
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
8002750c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027510:	a5 98       	lsr	r8,0x5
80027512:	a9 78       	lsl	r8,0x9
80027514:	e0 28 e0 00 	sub	r8,57344
80027518:	ef 48 ff fc 	st.w	r7[-4],r8
  
  // Configure the edge detector.
  switch (mode)
8002751c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80027520:	58 18       	cp.w	r8,1
80027522:	c1 e0       	breq	8002755e <gpio_configure_edge_detector+0x62>
80027524:	c0 43       	brcs	8002752c <gpio_configure_edge_detector+0x30>
80027526:	58 28       	cp.w	r8,2
80027528:	c3 40       	breq	80027590 <gpio_configure_edge_detector+0x94>
8002752a:	c4 c8       	rjmp	800275c2 <gpio_configure_edge_detector+0xc6>
  {
  case GPIO_PIN_CHANGE:
    gpio_port->imr0c = 1 << (pin & 0x1F);
8002752c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027530:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027534:	30 19       	mov	r9,1
80027536:	f2 08 09 48 	lsl	r8,r9,r8
8002753a:	10 99       	mov	r9,r8
8002753c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027540:	f1 49 00 a8 	st.w	r8[168],r9
    gpio_port->imr1c = 1 << (pin & 0x1F);
80027544:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027548:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8002754c:	30 19       	mov	r9,1
8002754e:	f2 08 09 48 	lsl	r8,r9,r8
80027552:	10 99       	mov	r9,r8
80027554:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027558:	f1 49 00 b8 	st.w	r8[184],r9
    break;
8002755c:	c3 58       	rjmp	800275c6 <gpio_configure_edge_detector+0xca>

  case GPIO_RISING_EDGE:
    gpio_port->imr0s = 1 << (pin & 0x1F);
8002755e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027562:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027566:	30 19       	mov	r9,1
80027568:	f2 08 09 48 	lsl	r8,r9,r8
8002756c:	10 99       	mov	r9,r8
8002756e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027572:	f1 49 00 a4 	st.w	r8[164],r9
    gpio_port->imr1c = 1 << (pin & 0x1F);
80027576:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002757a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8002757e:	30 19       	mov	r9,1
80027580:	f2 08 09 48 	lsl	r8,r9,r8
80027584:	10 99       	mov	r9,r8
80027586:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002758a:	f1 49 00 b8 	st.w	r8[184],r9
    break;
8002758e:	c1 c8       	rjmp	800275c6 <gpio_configure_edge_detector+0xca>

  case GPIO_FALLING_EDGE:
    gpio_port->imr0c = 1 << (pin & 0x1F);
80027590:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027594:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027598:	30 19       	mov	r9,1
8002759a:	f2 08 09 48 	lsl	r8,r9,r8
8002759e:	10 99       	mov	r9,r8
800275a0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800275a4:	f1 49 00 a8 	st.w	r8[168],r9
    gpio_port->imr1s = 1 << (pin & 0x1F);
800275a8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800275ac:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800275b0:	30 19       	mov	r9,1
800275b2:	f2 08 09 48 	lsl	r8,r9,r8
800275b6:	10 99       	mov	r9,r8
800275b8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800275bc:	f1 49 00 b4 	st.w	r8[180],r9
    break;
800275c0:	c0 38       	rjmp	800275c6 <gpio_configure_edge_detector+0xca>

  default:
    return GPIO_INVALID_ARGUMENT;
800275c2:	30 18       	mov	r8,1
800275c4:	c0 28       	rjmp	800275c8 <gpio_configure_edge_detector+0xcc>
  }

  return GPIO_SUCCESS;
800275c6:	30 08       	mov	r8,0
}
800275c8:	10 9c       	mov	r12,r8
800275ca:	2f dd       	sub	sp,-12
800275cc:	e3 cd 80 80 	ldm	sp++,r7,pc

800275d0 <gpio_enable_pin_interrupt>:


int gpio_enable_pin_interrupt(uint32_t pin, uint32_t mode)
{
800275d0:	eb cd 40 c0 	pushm	r6-r7,lr
800275d4:	1a 97       	mov	r7,sp
800275d6:	20 3d       	sub	sp,12
800275d8:	49 b6       	lddpc	r6,80027644 <gpio_enable_pin_interrupt+0x74>
800275da:	1e 26       	rsub	r6,pc
800275dc:	ef 4c ff f8 	st.w	r7[-8],r12
800275e0:	ef 4b ff f4 	st.w	r7[-12],r11
  volatile avr32_gpio_port_t  *gpio_port = &GPIO.port[pin >> 5];
800275e4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800275e8:	a5 98       	lsr	r8,0x5
800275ea:	a9 78       	lsl	r8,0x9
800275ec:	e0 28 e0 00 	sub	r8,57344
800275f0:	ef 48 ff fc 	st.w	r7[-4],r8

  // Enable the glitch filter.
  gpio_port->gfers = 1 << (pin & 0x1F);
800275f4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800275f8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800275fc:	30 19       	mov	r9,1
800275fe:	f2 08 09 48 	lsl	r8,r9,r8
80027602:	10 99       	mov	r9,r8
80027604:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027608:	f1 49 00 c4 	st.w	r8[196],r9

  // Configure the edge detector.
  if(GPIO_INVALID_ARGUMENT == gpio_configure_edge_detector(pin, mode))
8002760c:	ee fb ff f4 	ld.w	r11,r7[-12]
80027610:	ee fc ff f8 	ld.w	r12,r7[-8]
80027614:	c7 4f       	rcall	800274fc <gpio_configure_edge_detector>
80027616:	18 98       	mov	r8,r12
80027618:	58 18       	cp.w	r8,1
8002761a:	c0 31       	brne	80027620 <gpio_enable_pin_interrupt+0x50>
    return(GPIO_INVALID_ARGUMENT);
8002761c:	30 18       	mov	r8,1
8002761e:	c0 e8       	rjmp	8002763a <gpio_enable_pin_interrupt+0x6a>

  // Enable interrupt.
  gpio_port->iers = 1 << (pin & 0x1F);
80027620:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027624:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027628:	30 19       	mov	r9,1
8002762a:	f2 08 09 48 	lsl	r8,r9,r8
8002762e:	10 99       	mov	r9,r8
80027630:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027634:	f1 49 00 94 	st.w	r8[148],r9

  return GPIO_SUCCESS;
80027638:	30 08       	mov	r8,0
}
8002763a:	10 9c       	mov	r12,r8
8002763c:	2f dd       	sub	sp,-12
8002763e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80027642:	00 00       	add	r0,r0
80027644:	80 02       	ld.sh	r2,r0[0x0]
80027646:	74 5e       	ld.w	lr,r10[0x14]

80027648 <gpio_disable_pin_interrupt>:


void gpio_disable_pin_interrupt(uint32_t pin)
{
80027648:	eb cd 40 80 	pushm	r7,lr
8002764c:	1a 97       	mov	r7,sp
8002764e:	20 2d       	sub	sp,8
80027650:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80027654:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027658:	a5 98       	lsr	r8,0x5
8002765a:	a9 78       	lsl	r8,0x9
8002765c:	e0 28 e0 00 	sub	r8,57344
80027660:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->ierc = 1 << (pin & 0x1F);
80027664:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027668:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8002766c:	30 19       	mov	r9,1
8002766e:	f2 08 09 48 	lsl	r8,r9,r8
80027672:	10 99       	mov	r9,r8
80027674:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027678:	f1 49 00 98 	st.w	r8[152],r9
}
8002767c:	2f ed       	sub	sp,-8
8002767e:	e3 cd 80 80 	ldm	sp++,r7,pc

80027682 <gpio_get_pin_interrupt_flag>:


int gpio_get_pin_interrupt_flag(uint32_t pin)
{
80027682:	eb cd 40 80 	pushm	r7,lr
80027686:	1a 97       	mov	r7,sp
80027688:	20 2d       	sub	sp,8
8002768a:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
8002768e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027692:	a5 98       	lsr	r8,0x5
80027694:	a9 78       	lsl	r8,0x9
80027696:	e0 28 e0 00 	sub	r8,57344
8002769a:	ef 48 ff fc 	st.w	r7[-4],r8
  return (gpio_port->ifr >> (pin & 0x1F)) & 1;
8002769e:	ee f8 ff fc 	ld.w	r8,r7[-4]
800276a2:	f0 f9 00 d0 	ld.w	r9,r8[208]
800276a6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800276aa:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800276ae:	f2 08 0a 48 	lsr	r8,r9,r8
800276b2:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
}
800276b6:	10 9c       	mov	r12,r8
800276b8:	2f ed       	sub	sp,-8
800276ba:	e3 cd 80 80 	ldm	sp++,r7,pc

800276be <gpio_clear_pin_interrupt_flag>:


void gpio_clear_pin_interrupt_flag(uint32_t pin)
{
800276be:	eb cd 40 80 	pushm	r7,lr
800276c2:	1a 97       	mov	r7,sp
800276c4:	20 2d       	sub	sp,8
800276c6:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
800276ca:	ee f8 ff f8 	ld.w	r8,r7[-8]
800276ce:	a5 98       	lsr	r8,0x5
800276d0:	a9 78       	lsl	r8,0x9
800276d2:	e0 28 e0 00 	sub	r8,57344
800276d6:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->ifrc = 1 << (pin & 0x1F);

  // Restore interrupt enable register.
  gpio_port->ier = gpio_ier;
#else
  gpio_port->ifrc = 1 << (pin & 0x1F);
800276da:	ee f8 ff f8 	ld.w	r8,r7[-8]
800276de:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800276e2:	30 19       	mov	r9,1
800276e4:	f2 08 09 48 	lsl	r8,r9,r8
800276e8:	10 99       	mov	r9,r8
800276ea:	ee f8 ff fc 	ld.w	r8,r7[-4]
800276ee:	f1 49 00 d8 	st.w	r8[216],r9
#endif
}
800276f2:	2f ed       	sub	sp,-8
800276f4:	e3 cd 80 80 	ldm	sp++,r7,pc

800276f8 <_unhandled_interrupt>:
__attribute__((__interrupt__))
#elif (defined __ICCAVR32__)
__interrupt
#endif
static void _unhandled_interrupt(void)
{
800276f8:	eb cd 40 c0 	pushm	r6-r7,lr
800276fc:	1a 97       	mov	r7,sp
  // Catch unregistered interrupts.
  while (true);
800276fe:	c0 08       	rjmp	800276fe <_unhandled_interrupt+0x6>

80027700 <_get_interrupt_handler>:
 * \return Interrupt handler to execute.
 *
 * \note Taken and adapted from Newlib.
 */
__int_handler _get_interrupt_handler(unsigned int int_level)
{
80027700:	eb cd 40 c0 	pushm	r6-r7,lr
80027704:	1a 97       	mov	r7,sp
80027706:	20 3d       	sub	sp,12
80027708:	49 a6       	lddpc	r6,80027770 <_get_interrupt_handler+0x70>
8002770a:	1e 26       	rsub	r6,pc
8002770c:	ef 4c ff f4 	st.w	r7[-12],r12
  // ICR3 is mapped first, ICR0 last.
  // Code in exception.S puts int_level in R12 which is used by AVR32-GCC to
  // pass a single argument to a function.
  unsigned int int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
80027710:	fe 78 00 00 	mov	r8,-65536
80027714:	ee f9 ff f4 	ld.w	r9,r7[-12]
80027718:	f2 09 11 03 	rsub	r9,r9,3
8002771c:	28 09       	sub	r9,-128
8002771e:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80027722:	ef 48 ff f8 	st.w	r7[-8],r8
  unsigned int int_req = AVR32_INTC.irr[int_grp];
80027726:	fe 78 00 00 	mov	r8,-65536
8002772a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002772e:	2c 09       	sub	r9,-64
80027730:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80027734:	ef 48 ff fc 	st.w	r7[-4],r8
  // exception.S will provide the interrupt handler with a clean interrupt stack
  // frame, with nothing more pushed onto the stack. The interrupt handler must
  // manage the `rete' instruction, what can be done thanks to pure assembly,
  // inline assembly or the `__attribute__((__interrupt__))' C function
  // attribute.
  return (int_req) ? _int_handler_table[int_grp]._int_line_handler_table[32 - clz(int_req) - 1] : NULL;
80027738:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002773c:	58 08       	cp.w	r8,0
8002773e:	c1 40       	breq	80027766 <_get_interrupt_handler+0x66>
80027740:	ee f9 ff f8 	ld.w	r9,r7[-8]
80027744:	ec f8 02 54 	ld.w	r8,r6[596]
80027748:	a1 79       	lsl	r9,0x1
8002774a:	2f f9       	sub	r9,-1
8002774c:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80027750:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027754:	f0 08 12 00 	clz	r8,r8
80027758:	f0 08 11 1f 	rsub	r8,r8,31
8002775c:	a3 68       	lsl	r8,0x2
8002775e:	f2 08 00 08 	add	r8,r9,r8
80027762:	70 08       	ld.w	r8,r8[0x0]
80027764:	c0 28       	rjmp	80027768 <_get_interrupt_handler+0x68>
80027766:	30 08       	mov	r8,0
}
80027768:	10 9c       	mov	r12,r8
8002776a:	2f dd       	sub	sp,-12
8002776c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80027770:	80 02       	ld.sh	r2,r0[0x0]
80027772:	75 8e       	ld.w	lr,r10[0x60]

80027774 <INTC_init_evba>:

//! Init EVBA address. This sequence might also be done in the utils/startup/startup_uc3.S file.
static __inline__ void INTC_init_evba(void)
{
80027774:	eb cd 40 c0 	pushm	r6-r7,lr
80027778:	1a 97       	mov	r7,sp
8002777a:	48 56       	lddpc	r6,8002778c <INTC_init_evba+0x18>
8002777c:	1e 26       	rsub	r6,pc
  Set_system_register(AVR32_EVBA, (int)&_evba );
8002777e:	ec f8 07 5c 	ld.w	r8,r6[1884]
80027782:	e3 b8 00 01 	mtsr	0x4,r8
}
80027786:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002778a:	00 00       	add	r0,r0
8002778c:	80 02       	ld.sh	r2,r0[0x0]
8002778e:	76 00       	ld.w	r0,r11[0x0]

80027790 <INTC_init_interrupts>:

void INTC_init_interrupts(void)
{
80027790:	eb cd 40 c0 	pushm	r6-r7,lr
80027794:	1a 97       	mov	r7,sp
80027796:	20 2d       	sub	sp,8
80027798:	4a 16       	lddpc	r6,8002781c <INTC_init_interrupts+0x8c>
8002779a:	1e 26       	rsub	r6,pc
  unsigned int int_grp, int_req;

  INTC_init_evba();
8002779c:	ce cf       	rcall	80027774 <INTC_init_evba>

  // For all interrupt groups,
  for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
8002779e:	30 08       	mov	r8,0
800277a0:	ef 48 ff f8 	st.w	r7[-8],r8
800277a4:	c3 38       	rjmp	8002780a <INTC_init_interrupts+0x7a>
  {
    // For all interrupt request lines of each group,
    for (int_req = 0; int_req < _int_handler_table[int_grp].num_irqs; int_req++)
800277a6:	30 08       	mov	r8,0
800277a8:	ef 48 ff fc 	st.w	r7[-4],r8
800277ac:	c1 68       	rjmp	800277d8 <INTC_init_interrupts+0x48>
    {
      // Assign _unhandled_interrupt as default interrupt handler.
      _int_handler_table[int_grp]._int_line_handler_table[int_req] = &_unhandled_interrupt;
800277ae:	ee f9 ff f8 	ld.w	r9,r7[-8]
800277b2:	ec f8 02 54 	ld.w	r8,r6[596]
800277b6:	a1 79       	lsl	r9,0x1
800277b8:	2f f9       	sub	r9,-1
800277ba:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
800277be:	ee f8 ff fc 	ld.w	r8,r7[-4]
800277c2:	a3 68       	lsl	r8,0x2
800277c4:	f2 08 00 08 	add	r8,r9,r8
800277c8:	fe c9 00 d0 	sub	r9,pc,208
800277cc:	91 09       	st.w	r8[0x0],r9

  // For all interrupt groups,
  for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
  {
    // For all interrupt request lines of each group,
    for (int_req = 0; int_req < _int_handler_table[int_grp].num_irqs; int_req++)
800277ce:	ee f8 ff fc 	ld.w	r8,r7[-4]
800277d2:	2f f8       	sub	r8,-1
800277d4:	ef 48 ff fc 	st.w	r7[-4],r8
800277d8:	ee f9 ff f8 	ld.w	r9,r7[-8]
800277dc:	ec f8 02 54 	ld.w	r8,r6[596]
800277e0:	f0 09 03 39 	ld.w	r9,r8[r9<<0x3]
800277e4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800277e8:	10 39       	cp.w	r9,r8
800277ea:	fe 9b ff e2 	brhi	800277ae <INTC_init_interrupts+0x1e>
    }

    // Set the interrupt group priority register to its default value.
    // By default, all interrupt groups are linked to the interrupt priority
    // level 0 and to the interrupt vector _int0.
    AVR32_INTC.ipr[int_grp] = ipr_val[AVR32_INTC_INT0];
800277ee:	fe 78 00 00 	mov	r8,-65536
800277f2:	ee f9 ff f8 	ld.w	r9,r7[-8]
800277f6:	ec fa 03 b0 	ld.w	r10,r6[944]
800277fa:	74 0a       	ld.w	r10,r10[0x0]
800277fc:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
  unsigned int int_grp, int_req;

  INTC_init_evba();

  // For all interrupt groups,
  for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
80027800:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027804:	2f f8       	sub	r8,-1
80027806:	ef 48 ff f8 	st.w	r7[-8],r8
8002780a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002780e:	e0 48 00 2e 	cp.w	r8,46
80027812:	fe 98 ff ca 	brls	800277a6 <INTC_init_interrupts+0x16>
    // Set the interrupt group priority register to its default value.
    // By default, all interrupt groups are linked to the interrupt priority
    // level 0 and to the interrupt vector _int0.
    AVR32_INTC.ipr[int_grp] = ipr_val[AVR32_INTC_INT0];
  }
}
80027816:	2f ed       	sub	sp,-8
80027818:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002781c:	80 02       	ld.sh	r2,r0[0x0]
8002781e:	76 1e       	ld.w	lr,r11[0x4]

80027820 <INTC_register_interrupt>:


void INTC_register_interrupt(__int_handler handler, unsigned int irq, unsigned int int_level)
{
80027820:	eb cd 40 c0 	pushm	r6-r7,lr
80027824:	1a 97       	mov	r7,sp
80027826:	20 4d       	sub	sp,16
80027828:	49 86       	lddpc	r6,80027888 <INTC_register_interrupt+0x68>
8002782a:	1e 26       	rsub	r6,pc
8002782c:	ef 4c ff f8 	st.w	r7[-8],r12
80027830:	ef 4b ff f4 	st.w	r7[-12],r11
80027834:	ef 4a ff f0 	st.w	r7[-16],r10
  // Determine the group of the IRQ.
  unsigned int int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;
80027838:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002783c:	a5 98       	lsr	r8,0x5
8002783e:	ef 48 ff fc 	st.w	r7[-4],r8

  // Store in _int_line_handler_table_x the pointer to the interrupt handler, so
  // that _get_interrupt_handler can retrieve it when the interrupt is vectored.
  _int_handler_table[int_grp]._int_line_handler_table[irq % AVR32_INTC_MAX_NUM_IRQS_PER_GRP] = handler;
80027842:	ee f9 ff fc 	ld.w	r9,r7[-4]
80027846:	ec f8 02 54 	ld.w	r8,r6[596]
8002784a:	a1 79       	lsl	r9,0x1
8002784c:	2f f9       	sub	r9,-1
8002784e:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80027852:	ee f8 ff f4 	ld.w	r8,r7[-12]
80027856:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8002785a:	a3 68       	lsl	r8,0x2
8002785c:	f2 08 00 08 	add	r8,r9,r8
80027860:	ee f9 ff f8 	ld.w	r9,r7[-8]
80027864:	91 09       	st.w	r8[0x0],r9
  // Program the corresponding IPRX register to set the interrupt priority level
  // and the interrupt vector offset that will be fetched by the core interrupt
  // system.
  // NOTE: The _intx functions are intermediate assembly functions between the
  // core interrupt system and the user interrupt handler.
  AVR32_INTC.ipr[int_grp] = ipr_val[int_level & (AVR32_INTC_IPR_INTLEVEL_MASK >> AVR32_INTC_IPR_INTLEVEL_OFFSET)];
80027866:	fe 78 00 00 	mov	r8,-65536
8002786a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002786e:	ee fa ff f0 	ld.w	r10,r7[-16]
80027872:	f7 da c0 02 	bfextu	r11,r10,0x0,0x2
80027876:	ec fa 03 b0 	ld.w	r10,r6[944]
8002787a:	f4 0b 03 2a 	ld.w	r10,r10[r11<<0x2]
8002787e:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
}
80027882:	2f cd       	sub	sp,-16
80027884:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80027888:	80 02       	ld.sh	r2,r0[0x0]
8002788a:	76 ae       	ld.w	lr,r11[0x28]

8002788c <cpu_irq_is_enabled_flags>:

	return flags;
}

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
8002788c:	eb cd 40 80 	pushm	r7,lr
80027890:	1a 97       	mov	r7,sp
80027892:	20 1d       	sub	sp,4
80027894:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
80027898:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002789c:	e6 18 00 01 	andh	r8,0x1,COH
800278a0:	5f 08       	sreq	r8
800278a2:	5c 58       	castu.b	r8
}
800278a4:	10 9c       	mov	r12,r8
800278a6:	2f fd       	sub	sp,-4
800278a8:	e3 cd 80 80 	ldm	sp++,r7,pc

800278ac <pdca_get_handler>:
#include "compiler.h"
#include "pdca.h"


volatile avr32_pdca_channel_t *pdca_get_handler(unsigned int pdca_ch_number)
{
800278ac:	eb cd 40 80 	pushm	r7,lr
800278b0:	1a 97       	mov	r7,sp
800278b2:	20 2d       	sub	sp,8
800278b4:	ef 4c ff f8 	st.w	r7[-8],r12
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = &AVR32_PDCA.channel[pdca_ch_number];
800278b8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800278bc:	a7 68       	lsl	r8,0x6
800278be:	e2 38 00 00 	sub	r8,196608
800278c2:	ef 48 ff fc 	st.w	r7[-4],r8

  if (pdca_ch_number >= AVR32_PDCA_CHANNEL_LENGTH)
800278c6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800278ca:	58 f8       	cp.w	r8,15
800278cc:	e0 88 00 04 	brls	800278d4 <pdca_get_handler+0x28>
    return (volatile avr32_pdca_channel_t *)PDCA_INVALID_ARGUMENT;
800278d0:	3f f8       	mov	r8,-1
800278d2:	c0 38       	rjmp	800278d8 <pdca_get_handler+0x2c>

  return pdca_channel;
800278d4:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
800278d8:	10 9c       	mov	r12,r8
800278da:	2f ed       	sub	sp,-8
800278dc:	e3 cd 80 80 	ldm	sp++,r7,pc

800278e0 <pdca_init_channel>:


int pdca_init_channel(unsigned int pdca_ch_number, const pdca_channel_options_t *opt)
{
800278e0:	eb cd 40 c0 	pushm	r6-r7,lr
800278e4:	1a 97       	mov	r7,sp
800278e6:	20 4d       	sub	sp,16
800278e8:	4b 26       	lddpc	r6,800279b0 <pdca_init_channel+0xd0>
800278ea:	1e 26       	rsub	r6,pc
800278ec:	ef 4c ff f4 	st.w	r7[-12],r12
800278f0:	ef 4b ff f0 	st.w	r7[-16],r11
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);
800278f4:	ee fc ff f4 	ld.w	r12,r7[-12]
800278f8:	f0 16 00 25 	mcall	r6[148]
800278fc:	18 98       	mov	r8,r12
800278fe:	ef 48 ff f8 	st.w	r7[-8],r8

  pdca_disable_interrupt_transfer_complete(pdca_ch_number); // disable channel interrupt
80027902:	ee fc ff f4 	ld.w	r12,r7[-12]
80027906:	f0 16 00 ca 	mcall	r6[808]
  pdca_disable_interrupt_reload_counter_zero(pdca_ch_number); // disable channel interrupt
8002790a:	ee fc ff f4 	ld.w	r12,r7[-12]
8002790e:	f0 16 01 f5 	mcall	r6[2004]

  bool global_interrupt_enabled = cpu_irq_is_enabled();
80027912:	e1 b8 00 00 	mfsr	r8,0x0
80027916:	10 9c       	mov	r12,r8
80027918:	cb af       	rcall	8002788c <cpu_irq_is_enabled_flags>
8002791a:	18 98       	mov	r8,r12
8002791c:	ef 68 ff ff 	st.b	r7[-1],r8

  if (global_interrupt_enabled) cpu_irq_disable();
80027920:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80027924:	30 08       	mov	r8,0
80027926:	f0 09 18 00 	cp.b	r9,r8
8002792a:	c0 20       	breq	8002792e <pdca_init_channel+0x4e>
8002792c:	d3 03       	ssrf	0x10
  pdca_channel->mar = (unsigned long)opt->addr;
8002792e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80027932:	70 08       	ld.w	r8,r8[0x0]
80027934:	10 99       	mov	r9,r8
80027936:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002793a:	91 09       	st.w	r8[0x0],r9
  pdca_channel->tcr = opt->size;
8002793c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80027940:	70 19       	ld.w	r9,r8[0x4]
80027942:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027946:	91 29       	st.w	r8[0x8],r9
  pdca_channel->psr = opt->pid;
80027948:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002794c:	70 49       	ld.w	r9,r8[0x10]
8002794e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027952:	91 19       	st.w	r8[0x4],r9
  pdca_channel->marr = (unsigned long)opt->r_addr;
80027954:	ee f8 ff f0 	ld.w	r8,r7[-16]
80027958:	70 28       	ld.w	r8,r8[0x8]
8002795a:	10 99       	mov	r9,r8
8002795c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027960:	91 39       	st.w	r8[0xc],r9
  pdca_channel->tcrr = opt->r_size;
80027962:	ee f8 ff f0 	ld.w	r8,r7[-16]
80027966:	70 39       	ld.w	r9,r8[0xc]
80027968:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002796c:	91 49       	st.w	r8[0x10],r9
  pdca_channel->mr =
#if (AVR32_PDCA_H_VERSION >= 120)
opt->etrig << AVR32_PDCA_ETRIG_OFFSET |
8002796e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80027972:	f1 38 00 18 	ld.ub	r8,r8[24]
80027976:	a3 68       	lsl	r8,0x2
  pdca_channel->mar = (unsigned long)opt->addr;
  pdca_channel->tcr = opt->size;
  pdca_channel->psr = opt->pid;
  pdca_channel->marr = (unsigned long)opt->r_addr;
  pdca_channel->tcrr = opt->r_size;
  pdca_channel->mr =
80027978:	10 99       	mov	r9,r8
8002797a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002797e:	70 58       	ld.w	r8,r8[0x14]
#if (AVR32_PDCA_H_VERSION >= 120)
opt->etrig << AVR32_PDCA_ETRIG_OFFSET |
80027980:	10 49       	or	r9,r8
  pdca_channel->mar = (unsigned long)opt->addr;
  pdca_channel->tcr = opt->size;
  pdca_channel->psr = opt->pid;
  pdca_channel->marr = (unsigned long)opt->r_addr;
  pdca_channel->tcrr = opt->r_size;
  pdca_channel->mr =
80027982:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027986:	91 69       	st.w	r8[0x18],r9
#if (AVR32_PDCA_H_VERSION >= 120)
opt->etrig << AVR32_PDCA_ETRIG_OFFSET |
#endif
                     opt->transfer_size << AVR32_PDCA_SIZE_OFFSET;
  pdca_channel->cr = AVR32_PDCA_ECLR_MASK;
80027988:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002798c:	e0 69 01 00 	mov	r9,256
80027990:	91 59       	st.w	r8[0x14],r9
  pdca_channel->isr;
80027992:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027996:	70 b8       	ld.w	r8,r8[0x2c]
  if (global_interrupt_enabled) cpu_irq_enable();
80027998:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8002799c:	30 08       	mov	r8,0
8002799e:	f0 09 18 00 	cp.b	r9,r8
800279a2:	c0 20       	breq	800279a6 <pdca_init_channel+0xc6>
800279a4:	d5 03       	csrf	0x10

  return PDCA_SUCCESS;
800279a6:	30 08       	mov	r8,0
}
800279a8:	10 9c       	mov	r12,r8
800279aa:	2f cd       	sub	sp,-16
800279ac:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800279b0:	80 02       	ld.sh	r2,r0[0x0]
800279b2:	77 6e       	ld.w	lr,r11[0x58]

800279b4 <pdca_get_channel_status>:


unsigned int pdca_get_channel_status(unsigned int pdca_ch_number)
{
800279b4:	eb cd 40 c0 	pushm	r6-r7,lr
800279b8:	1a 97       	mov	r7,sp
800279ba:	20 2d       	sub	sp,8
800279bc:	48 a6       	lddpc	r6,800279e4 <pdca_get_channel_status+0x30>
800279be:	1e 26       	rsub	r6,pc
800279c0:	ef 4c ff f8 	st.w	r7[-8],r12
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);
800279c4:	ee fc ff f8 	ld.w	r12,r7[-8]
800279c8:	f0 16 00 25 	mcall	r6[148]
800279cc:	18 98       	mov	r8,r12
800279ce:	ef 48 ff fc 	st.w	r7[-4],r8

  return (pdca_channel->sr & AVR32_PDCA_TEN_MASK) != 0;
800279d2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800279d6:	70 78       	ld.w	r8,r8[0x1c]
800279d8:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
}
800279dc:	10 9c       	mov	r12,r8
800279de:	2f ed       	sub	sp,-8
800279e0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800279e4:	80 02       	ld.sh	r2,r0[0x0]
800279e6:	78 42       	ld.w	r2,r12[0x10]

800279e8 <pdca_disable>:


void pdca_disable(unsigned int pdca_ch_number)
{
800279e8:	eb cd 40 c0 	pushm	r6-r7,lr
800279ec:	1a 97       	mov	r7,sp
800279ee:	20 2d       	sub	sp,8
800279f0:	48 96       	lddpc	r6,80027a14 <pdca_disable+0x2c>
800279f2:	1e 26       	rsub	r6,pc
800279f4:	ef 4c ff f8 	st.w	r7[-8],r12
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);
800279f8:	ee fc ff f8 	ld.w	r12,r7[-8]
800279fc:	f0 16 00 25 	mcall	r6[148]
80027a00:	18 98       	mov	r8,r12
80027a02:	ef 48 ff fc 	st.w	r7[-4],r8

  // Disable transfer
  pdca_channel->cr = AVR32_PDCA_TDIS_MASK;
80027a06:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027a0a:	30 29       	mov	r9,2
80027a0c:	91 59       	st.w	r8[0x14],r9

}
80027a0e:	2f ed       	sub	sp,-8
80027a10:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80027a14:	80 02       	ld.sh	r2,r0[0x0]
80027a16:	78 76       	ld.w	r6,r12[0x1c]

80027a18 <pdca_enable>:


void pdca_enable(unsigned int pdca_ch_number)
{
80027a18:	eb cd 40 c0 	pushm	r6-r7,lr
80027a1c:	1a 97       	mov	r7,sp
80027a1e:	20 2d       	sub	sp,8
80027a20:	48 96       	lddpc	r6,80027a44 <pdca_enable+0x2c>
80027a22:	1e 26       	rsub	r6,pc
80027a24:	ef 4c ff f8 	st.w	r7[-8],r12
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);
80027a28:	ee fc ff f8 	ld.w	r12,r7[-8]
80027a2c:	f0 16 00 25 	mcall	r6[148]
80027a30:	18 98       	mov	r8,r12
80027a32:	ef 48 ff fc 	st.w	r7[-4],r8

  // Enable transfer
  pdca_channel->cr = AVR32_PDCA_TEN_MASK;
80027a36:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027a3a:	30 19       	mov	r9,1
80027a3c:	91 59       	st.w	r8[0x14],r9
}
80027a3e:	2f ed       	sub	sp,-8
80027a40:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80027a44:	80 02       	ld.sh	r2,r0[0x0]
80027a46:	78 a6       	ld.w	r6,r12[0x28]

80027a48 <pdca_get_load_size>:


unsigned int pdca_get_load_size(unsigned int pdca_ch_number)
{
80027a48:	eb cd 40 c0 	pushm	r6-r7,lr
80027a4c:	1a 97       	mov	r7,sp
80027a4e:	20 2d       	sub	sp,8
80027a50:	48 96       	lddpc	r6,80027a74 <pdca_get_load_size+0x2c>
80027a52:	1e 26       	rsub	r6,pc
80027a54:	ef 4c ff f8 	st.w	r7[-8],r12
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);
80027a58:	ee fc ff f8 	ld.w	r12,r7[-8]
80027a5c:	f0 16 00 25 	mcall	r6[148]
80027a60:	18 98       	mov	r8,r12
80027a62:	ef 48 ff fc 	st.w	r7[-4],r8

  return pdca_channel->tcr;
80027a66:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027a6a:	70 28       	ld.w	r8,r8[0x8]
}
80027a6c:	10 9c       	mov	r12,r8
80027a6e:	2f ed       	sub	sp,-8
80027a70:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80027a74:	80 02       	ld.sh	r2,r0[0x0]
80027a76:	78 d6       	ld.w	r6,r12[0x34]

80027a78 <pdca_load_channel>:


void pdca_load_channel(unsigned int pdca_ch_number, volatile void *addr, unsigned int size)
{
80027a78:	eb cd 40 c0 	pushm	r6-r7,lr
80027a7c:	1a 97       	mov	r7,sp
80027a7e:	20 5d       	sub	sp,20
80027a80:	49 d6       	lddpc	r6,80027af4 <pdca_load_channel+0x7c>
80027a82:	1e 26       	rsub	r6,pc
80027a84:	ef 4c ff f4 	st.w	r7[-12],r12
80027a88:	ef 4b ff f0 	st.w	r7[-16],r11
80027a8c:	ef 4a ff ec 	st.w	r7[-20],r10
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);
80027a90:	ee fc ff f4 	ld.w	r12,r7[-12]
80027a94:	f0 16 00 25 	mcall	r6[148]
80027a98:	18 98       	mov	r8,r12
80027a9a:	ef 48 ff f8 	st.w	r7[-8],r8

  bool global_interrupt_enabled = cpu_irq_is_enabled();
80027a9e:	e1 b8 00 00 	mfsr	r8,0x0
80027aa2:	10 9c       	mov	r12,r8
80027aa4:	cf 4e       	rcall	8002788c <cpu_irq_is_enabled_flags>
80027aa6:	18 98       	mov	r8,r12
80027aa8:	ef 68 ff ff 	st.b	r7[-1],r8

  if (global_interrupt_enabled) cpu_irq_disable();
80027aac:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80027ab0:	30 08       	mov	r8,0
80027ab2:	f0 09 18 00 	cp.b	r9,r8
80027ab6:	c0 20       	breq	80027aba <pdca_load_channel+0x42>
80027ab8:	d3 03       	ssrf	0x10
  pdca_channel->mar = (unsigned long)addr;
80027aba:	ee f9 ff f0 	ld.w	r9,r7[-16]
80027abe:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027ac2:	91 09       	st.w	r8[0x0],r9
  pdca_channel->tcr = size;
80027ac4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027ac8:	ee f9 ff ec 	ld.w	r9,r7[-20]
80027acc:	91 29       	st.w	r8[0x8],r9
  pdca_channel->cr = AVR32_PDCA_ECLR_MASK;
80027ace:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027ad2:	e0 69 01 00 	mov	r9,256
80027ad6:	91 59       	st.w	r8[0x14],r9
  pdca_channel->isr;
80027ad8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027adc:	70 b8       	ld.w	r8,r8[0x2c]
  if (global_interrupt_enabled) cpu_irq_enable();
80027ade:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80027ae2:	30 08       	mov	r8,0
80027ae4:	f0 09 18 00 	cp.b	r9,r8
80027ae8:	c0 20       	breq	80027aec <pdca_load_channel+0x74>
80027aea:	d5 03       	csrf	0x10
}
80027aec:	2f bd       	sub	sp,-20
80027aee:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80027af2:	00 00       	add	r0,r0
80027af4:	80 02       	ld.sh	r2,r0[0x0]
80027af6:	79 06       	ld.w	r6,r12[0x40]

80027af8 <pdca_get_reload_size>:


unsigned int pdca_get_reload_size(unsigned int pdca_ch_number)
{
80027af8:	eb cd 40 c0 	pushm	r6-r7,lr
80027afc:	1a 97       	mov	r7,sp
80027afe:	20 2d       	sub	sp,8
80027b00:	48 96       	lddpc	r6,80027b24 <pdca_get_reload_size+0x2c>
80027b02:	1e 26       	rsub	r6,pc
80027b04:	ef 4c ff f8 	st.w	r7[-8],r12
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);
80027b08:	ee fc ff f8 	ld.w	r12,r7[-8]
80027b0c:	f0 16 00 25 	mcall	r6[148]
80027b10:	18 98       	mov	r8,r12
80027b12:	ef 48 ff fc 	st.w	r7[-4],r8

  return pdca_channel->tcrr;
80027b16:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027b1a:	70 48       	ld.w	r8,r8[0x10]
}
80027b1c:	10 9c       	mov	r12,r8
80027b1e:	2f ed       	sub	sp,-8
80027b20:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80027b24:	80 02       	ld.sh	r2,r0[0x0]
80027b26:	79 86       	ld.w	r6,r12[0x60]

80027b28 <pdca_reload_channel>:


void pdca_reload_channel(unsigned int pdca_ch_number, volatile void *addr, unsigned int size)
{
80027b28:	eb cd 40 c0 	pushm	r6-r7,lr
80027b2c:	1a 97       	mov	r7,sp
80027b2e:	20 5d       	sub	sp,20
80027b30:	49 d6       	lddpc	r6,80027ba4 <pdca_reload_channel+0x7c>
80027b32:	1e 26       	rsub	r6,pc
80027b34:	ef 4c ff f4 	st.w	r7[-12],r12
80027b38:	ef 4b ff f0 	st.w	r7[-16],r11
80027b3c:	ef 4a ff ec 	st.w	r7[-20],r10
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);
80027b40:	ee fc ff f4 	ld.w	r12,r7[-12]
80027b44:	f0 16 00 25 	mcall	r6[148]
80027b48:	18 98       	mov	r8,r12
80027b4a:	ef 48 ff f8 	st.w	r7[-8],r8

  bool global_interrupt_enabled = cpu_irq_is_enabled();
80027b4e:	e1 b8 00 00 	mfsr	r8,0x0
80027b52:	10 9c       	mov	r12,r8
80027b54:	c9 ce       	rcall	8002788c <cpu_irq_is_enabled_flags>
80027b56:	18 98       	mov	r8,r12
80027b58:	ef 68 ff ff 	st.b	r7[-1],r8

  if (global_interrupt_enabled) cpu_irq_disable();
80027b5c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80027b60:	30 08       	mov	r8,0
80027b62:	f0 09 18 00 	cp.b	r9,r8
80027b66:	c0 20       	breq	80027b6a <pdca_reload_channel+0x42>
80027b68:	d3 03       	ssrf	0x10
  // set up next memory address
  pdca_channel->marr = (unsigned long)addr;
80027b6a:	ee f9 ff f0 	ld.w	r9,r7[-16]
80027b6e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027b72:	91 39       	st.w	r8[0xc],r9
  // set up next memory size
  pdca_channel->tcrr = size;
80027b74:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027b78:	ee f9 ff ec 	ld.w	r9,r7[-20]
80027b7c:	91 49       	st.w	r8[0x10],r9
  pdca_channel->cr = AVR32_PDCA_ECLR_MASK;
80027b7e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027b82:	e0 69 01 00 	mov	r9,256
80027b86:	91 59       	st.w	r8[0x14],r9
  pdca_channel->isr;
80027b88:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027b8c:	70 b8       	ld.w	r8,r8[0x2c]
  if (global_interrupt_enabled) cpu_irq_enable();
80027b8e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80027b92:	30 08       	mov	r8,0
80027b94:	f0 09 18 00 	cp.b	r9,r8
80027b98:	c0 20       	breq	80027b9c <pdca_reload_channel+0x74>
80027b9a:	d5 03       	csrf	0x10
}
80027b9c:	2f bd       	sub	sp,-20
80027b9e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80027ba2:	00 00       	add	r0,r0
80027ba4:	80 02       	ld.sh	r2,r0[0x0]
80027ba6:	79 b6       	ld.w	r6,r12[0x6c]

80027ba8 <pdca_set_peripheral_select>:


void pdca_set_peripheral_select(unsigned int pdca_ch_number, unsigned int pid)
{
80027ba8:	eb cd 40 c0 	pushm	r6-r7,lr
80027bac:	1a 97       	mov	r7,sp
80027bae:	20 3d       	sub	sp,12
80027bb0:	48 b6       	lddpc	r6,80027bdc <pdca_set_peripheral_select+0x34>
80027bb2:	1e 26       	rsub	r6,pc
80027bb4:	ef 4c ff f8 	st.w	r7[-8],r12
80027bb8:	ef 4b ff f4 	st.w	r7[-12],r11
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);
80027bbc:	ee fc ff f8 	ld.w	r12,r7[-8]
80027bc0:	f0 16 00 25 	mcall	r6[148]
80027bc4:	18 98       	mov	r8,r12
80027bc6:	ef 48 ff fc 	st.w	r7[-4],r8

  pdca_channel->psr = pid;
80027bca:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027bce:	ee f9 ff f4 	ld.w	r9,r7[-12]
80027bd2:	91 19       	st.w	r8[0x4],r9
}
80027bd4:	2f dd       	sub	sp,-12
80027bd6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80027bda:	00 00       	add	r0,r0
80027bdc:	80 02       	ld.sh	r2,r0[0x0]
80027bde:	7a 36       	ld.w	r6,sp[0xc]

80027be0 <pdca_set_transfer_size>:


void pdca_set_transfer_size(unsigned int pdca_ch_number, unsigned int transfer_size)
{
80027be0:	eb cd 40 c0 	pushm	r6-r7,lr
80027be4:	1a 97       	mov	r7,sp
80027be6:	20 3d       	sub	sp,12
80027be8:	48 e6       	lddpc	r6,80027c20 <pdca_set_transfer_size+0x40>
80027bea:	1e 26       	rsub	r6,pc
80027bec:	ef 4c ff f8 	st.w	r7[-8],r12
80027bf0:	ef 4b ff f4 	st.w	r7[-12],r11
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);
80027bf4:	ee fc ff f8 	ld.w	r12,r7[-8]
80027bf8:	f0 16 00 25 	mcall	r6[148]
80027bfc:	18 98       	mov	r8,r12
80027bfe:	ef 48 ff fc 	st.w	r7[-4],r8

  pdca_channel->mr = (pdca_channel->mr & ~AVR32_PDCA_SIZE_MASK) |
80027c02:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027c06:	70 68       	ld.w	r8,r8[0x18]
80027c08:	10 99       	mov	r9,r8
80027c0a:	e0 19 ff fc 	andl	r9,0xfffc
80027c0e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80027c12:	10 49       	or	r9,r8
80027c14:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027c18:	91 69       	st.w	r8[0x18],r9
                     transfer_size << AVR32_PDCA_SIZE_OFFSET;
}
80027c1a:	2f dd       	sub	sp,-12
80027c1c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80027c20:	80 02       	ld.sh	r2,r0[0x0]
80027c22:	7a 6e       	ld.w	lr,sp[0x18]

80027c24 <pdca_disable_event_trigger>:

#if (AVR32_PDCA_H_VERSION >= 120)


void pdca_disable_event_trigger(unsigned int pdca_ch_number)
{
80027c24:	eb cd 40 c0 	pushm	r6-r7,lr
80027c28:	1a 97       	mov	r7,sp
80027c2a:	20 2d       	sub	sp,8
80027c2c:	48 b6       	lddpc	r6,80027c58 <pdca_disable_event_trigger+0x34>
80027c2e:	1e 26       	rsub	r6,pc
80027c30:	ef 4c ff f8 	st.w	r7[-8],r12
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);
80027c34:	ee fc ff f8 	ld.w	r12,r7[-8]
80027c38:	f0 16 00 25 	mcall	r6[148]
80027c3c:	18 98       	mov	r8,r12
80027c3e:	ef 48 ff fc 	st.w	r7[-4],r8

  pdca_channel->mr &= ~AVR32_PDCA_ETRIG_MASK;
80027c42:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027c46:	70 68       	ld.w	r8,r8[0x18]
80027c48:	10 99       	mov	r9,r8
80027c4a:	a3 c9       	cbr	r9,0x2
80027c4c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027c50:	91 69       	st.w	r8[0x18],r9
}
80027c52:	2f ed       	sub	sp,-8
80027c54:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80027c58:	80 02       	ld.sh	r2,r0[0x0]
80027c5a:	7a b2       	ld.w	r2,sp[0x2c]

80027c5c <pdca_enable_event_trigger>:


void pdca_enable_event_trigger(unsigned int pdca_ch_number)
{
80027c5c:	eb cd 40 c0 	pushm	r6-r7,lr
80027c60:	1a 97       	mov	r7,sp
80027c62:	20 2d       	sub	sp,8
80027c64:	48 b6       	lddpc	r6,80027c90 <pdca_enable_event_trigger+0x34>
80027c66:	1e 26       	rsub	r6,pc
80027c68:	ef 4c ff f8 	st.w	r7[-8],r12
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);
80027c6c:	ee fc ff f8 	ld.w	r12,r7[-8]
80027c70:	f0 16 00 25 	mcall	r6[148]
80027c74:	18 98       	mov	r8,r12
80027c76:	ef 48 ff fc 	st.w	r7[-4],r8

  pdca_channel->mr |= AVR32_PDCA_ETRIG_MASK;
80027c7a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027c7e:	70 68       	ld.w	r8,r8[0x18]
80027c80:	10 99       	mov	r9,r8
80027c82:	a3 a9       	sbr	r9,0x2
80027c84:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027c88:	91 69       	st.w	r8[0x18],r9
}
80027c8a:	2f ed       	sub	sp,-8
80027c8c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80027c90:	80 02       	ld.sh	r2,r0[0x0]
80027c92:	7a ea       	ld.w	r10,sp[0x38]

80027c94 <pdca_disable_interrupt_transfer_error>:

#endif


void pdca_disable_interrupt_transfer_error(unsigned int pdca_ch_number)
{
80027c94:	eb cd 40 c0 	pushm	r6-r7,lr
80027c98:	1a 97       	mov	r7,sp
80027c9a:	20 3d       	sub	sp,12
80027c9c:	49 66       	lddpc	r6,80027cf4 <pdca_disable_interrupt_transfer_error+0x60>
80027c9e:	1e 26       	rsub	r6,pc
80027ca0:	ef 4c ff f4 	st.w	r7[-12],r12
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);
80027ca4:	ee fc ff f4 	ld.w	r12,r7[-12]
80027ca8:	f0 16 00 25 	mcall	r6[148]
80027cac:	18 98       	mov	r8,r12
80027cae:	ef 48 ff f8 	st.w	r7[-8],r8

  bool global_interrupt_enabled = cpu_irq_is_enabled();
80027cb2:	e1 b8 00 00 	mfsr	r8,0x0
80027cb6:	10 9c       	mov	r12,r8
80027cb8:	fe b0 fd ea 	rcall	8002788c <cpu_irq_is_enabled_flags>
80027cbc:	18 98       	mov	r8,r12
80027cbe:	ef 68 ff ff 	st.b	r7[-1],r8

  if (global_interrupt_enabled) cpu_irq_disable();
80027cc2:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80027cc6:	30 08       	mov	r8,0
80027cc8:	f0 09 18 00 	cp.b	r9,r8
80027ccc:	c0 20       	breq	80027cd0 <pdca_disable_interrupt_transfer_error+0x3c>
80027cce:	d3 03       	ssrf	0x10
  pdca_channel->idr = AVR32_PDCA_TERR_MASK;
80027cd0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027cd4:	30 49       	mov	r9,4
80027cd6:	91 99       	st.w	r8[0x24],r9
  pdca_channel->isr;
80027cd8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027cdc:	70 b8       	ld.w	r8,r8[0x2c]
  if (global_interrupt_enabled) cpu_irq_enable();
80027cde:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80027ce2:	30 08       	mov	r8,0
80027ce4:	f0 09 18 00 	cp.b	r9,r8
80027ce8:	c0 20       	breq	80027cec <pdca_disable_interrupt_transfer_error+0x58>
80027cea:	d5 03       	csrf	0x10
}
80027cec:	2f dd       	sub	sp,-12
80027cee:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80027cf2:	00 00       	add	r0,r0
80027cf4:	80 02       	ld.sh	r2,r0[0x0]
80027cf6:	7b 22       	ld.w	r2,sp[0x48]

80027cf8 <pdca_enable_interrupt_transfer_error>:


void pdca_enable_interrupt_transfer_error(unsigned int pdca_ch_number)
{
80027cf8:	eb cd 40 c0 	pushm	r6-r7,lr
80027cfc:	1a 97       	mov	r7,sp
80027cfe:	20 2d       	sub	sp,8
80027d00:	48 96       	lddpc	r6,80027d24 <pdca_enable_interrupt_transfer_error+0x2c>
80027d02:	1e 26       	rsub	r6,pc
80027d04:	ef 4c ff f8 	st.w	r7[-8],r12
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);
80027d08:	ee fc ff f8 	ld.w	r12,r7[-8]
80027d0c:	f0 16 00 25 	mcall	r6[148]
80027d10:	18 98       	mov	r8,r12
80027d12:	ef 48 ff fc 	st.w	r7[-4],r8

  pdca_channel->ier = AVR32_PDCA_TERR_MASK;
80027d16:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027d1a:	30 49       	mov	r9,4
80027d1c:	91 89       	st.w	r8[0x20],r9
}
80027d1e:	2f ed       	sub	sp,-8
80027d20:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80027d24:	80 02       	ld.sh	r2,r0[0x0]
80027d26:	7b 86       	ld.w	r6,sp[0x60]

80027d28 <pdca_disable_interrupt_transfer_complete>:


void pdca_disable_interrupt_transfer_complete(unsigned int pdca_ch_number)
{
80027d28:	eb cd 40 c0 	pushm	r6-r7,lr
80027d2c:	1a 97       	mov	r7,sp
80027d2e:	20 3d       	sub	sp,12
80027d30:	49 66       	lddpc	r6,80027d88 <pdca_disable_interrupt_transfer_complete+0x60>
80027d32:	1e 26       	rsub	r6,pc
80027d34:	ef 4c ff f4 	st.w	r7[-12],r12
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);
80027d38:	ee fc ff f4 	ld.w	r12,r7[-12]
80027d3c:	f0 16 00 25 	mcall	r6[148]
80027d40:	18 98       	mov	r8,r12
80027d42:	ef 48 ff f8 	st.w	r7[-8],r8

  bool global_interrupt_enabled = cpu_irq_is_enabled();
80027d46:	e1 b8 00 00 	mfsr	r8,0x0
80027d4a:	10 9c       	mov	r12,r8
80027d4c:	fe b0 fd a0 	rcall	8002788c <cpu_irq_is_enabled_flags>
80027d50:	18 98       	mov	r8,r12
80027d52:	ef 68 ff ff 	st.b	r7[-1],r8

  if (global_interrupt_enabled) cpu_irq_disable();
80027d56:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80027d5a:	30 08       	mov	r8,0
80027d5c:	f0 09 18 00 	cp.b	r9,r8
80027d60:	c0 20       	breq	80027d64 <pdca_disable_interrupt_transfer_complete+0x3c>
80027d62:	d3 03       	ssrf	0x10
  pdca_channel->idr = AVR32_PDCA_TRC_MASK;
80027d64:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027d68:	30 29       	mov	r9,2
80027d6a:	91 99       	st.w	r8[0x24],r9
  pdca_channel->isr;
80027d6c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027d70:	70 b8       	ld.w	r8,r8[0x2c]
  if (global_interrupt_enabled) cpu_irq_enable();
80027d72:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80027d76:	30 08       	mov	r8,0
80027d78:	f0 09 18 00 	cp.b	r9,r8
80027d7c:	c0 20       	breq	80027d80 <pdca_disable_interrupt_transfer_complete+0x58>
80027d7e:	d5 03       	csrf	0x10
}
80027d80:	2f dd       	sub	sp,-12
80027d82:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80027d86:	00 00       	add	r0,r0
80027d88:	80 02       	ld.sh	r2,r0[0x0]
80027d8a:	7b b6       	ld.w	r6,sp[0x6c]

80027d8c <pdca_enable_interrupt_transfer_complete>:


void pdca_enable_interrupt_transfer_complete(unsigned int pdca_ch_number)
{
80027d8c:	eb cd 40 c0 	pushm	r6-r7,lr
80027d90:	1a 97       	mov	r7,sp
80027d92:	20 2d       	sub	sp,8
80027d94:	48 96       	lddpc	r6,80027db8 <pdca_enable_interrupt_transfer_complete+0x2c>
80027d96:	1e 26       	rsub	r6,pc
80027d98:	ef 4c ff f8 	st.w	r7[-8],r12
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);
80027d9c:	ee fc ff f8 	ld.w	r12,r7[-8]
80027da0:	f0 16 00 25 	mcall	r6[148]
80027da4:	18 98       	mov	r8,r12
80027da6:	ef 48 ff fc 	st.w	r7[-4],r8

  pdca_channel->ier = AVR32_PDCA_TRC_MASK;
80027daa:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027dae:	30 29       	mov	r9,2
80027db0:	91 89       	st.w	r8[0x20],r9
}
80027db2:	2f ed       	sub	sp,-8
80027db4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80027db8:	80 02       	ld.sh	r2,r0[0x0]
80027dba:	7c 1a       	ld.w	r10,lr[0x4]

80027dbc <pdca_disable_interrupt_reload_counter_zero>:


void pdca_disable_interrupt_reload_counter_zero(unsigned int pdca_ch_number)
{
80027dbc:	eb cd 40 c0 	pushm	r6-r7,lr
80027dc0:	1a 97       	mov	r7,sp
80027dc2:	20 3d       	sub	sp,12
80027dc4:	49 66       	lddpc	r6,80027e1c <pdca_disable_interrupt_reload_counter_zero+0x60>
80027dc6:	1e 26       	rsub	r6,pc
80027dc8:	ef 4c ff f4 	st.w	r7[-12],r12
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);
80027dcc:	ee fc ff f4 	ld.w	r12,r7[-12]
80027dd0:	f0 16 00 25 	mcall	r6[148]
80027dd4:	18 98       	mov	r8,r12
80027dd6:	ef 48 ff f8 	st.w	r7[-8],r8

  bool global_interrupt_enabled = cpu_irq_is_enabled();
80027dda:	e1 b8 00 00 	mfsr	r8,0x0
80027dde:	10 9c       	mov	r12,r8
80027de0:	fe b0 fd 56 	rcall	8002788c <cpu_irq_is_enabled_flags>
80027de4:	18 98       	mov	r8,r12
80027de6:	ef 68 ff ff 	st.b	r7[-1],r8

  if (global_interrupt_enabled) cpu_irq_disable();
80027dea:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80027dee:	30 08       	mov	r8,0
80027df0:	f0 09 18 00 	cp.b	r9,r8
80027df4:	c0 20       	breq	80027df8 <pdca_disable_interrupt_reload_counter_zero+0x3c>
80027df6:	d3 03       	ssrf	0x10
  pdca_channel->idr = AVR32_PDCA_RCZ_MASK;
80027df8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027dfc:	30 19       	mov	r9,1
80027dfe:	91 99       	st.w	r8[0x24],r9
  pdca_channel->isr;
80027e00:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027e04:	70 b8       	ld.w	r8,r8[0x2c]
  if (global_interrupt_enabled) cpu_irq_enable();
80027e06:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80027e0a:	30 08       	mov	r8,0
80027e0c:	f0 09 18 00 	cp.b	r9,r8
80027e10:	c0 20       	breq	80027e14 <pdca_disable_interrupt_reload_counter_zero+0x58>
80027e12:	d5 03       	csrf	0x10
}
80027e14:	2f dd       	sub	sp,-12
80027e16:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80027e1a:	00 00       	add	r0,r0
80027e1c:	80 02       	ld.sh	r2,r0[0x0]
80027e1e:	7c 4a       	ld.w	r10,lr[0x10]

80027e20 <pdca_enable_interrupt_reload_counter_zero>:


void pdca_enable_interrupt_reload_counter_zero(unsigned int pdca_ch_number)
{
80027e20:	eb cd 40 c0 	pushm	r6-r7,lr
80027e24:	1a 97       	mov	r7,sp
80027e26:	20 2d       	sub	sp,8
80027e28:	48 96       	lddpc	r6,80027e4c <pdca_enable_interrupt_reload_counter_zero+0x2c>
80027e2a:	1e 26       	rsub	r6,pc
80027e2c:	ef 4c ff f8 	st.w	r7[-8],r12
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);
80027e30:	ee fc ff f8 	ld.w	r12,r7[-8]
80027e34:	f0 16 00 25 	mcall	r6[148]
80027e38:	18 98       	mov	r8,r12
80027e3a:	ef 48 ff fc 	st.w	r7[-4],r8

  pdca_channel->ier = AVR32_PDCA_RCZ_MASK;
80027e3e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027e42:	30 19       	mov	r9,1
80027e44:	91 89       	st.w	r8[0x20],r9
}
80027e46:	2f ed       	sub	sp,-8
80027e48:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80027e4c:	80 02       	ld.sh	r2,r0[0x0]
80027e4e:	7c ae       	ld.w	lr,lr[0x28]

80027e50 <pdca_get_transfer_status>:


unsigned long pdca_get_transfer_status(unsigned int pdca_ch_number)
{
80027e50:	eb cd 40 c0 	pushm	r6-r7,lr
80027e54:	1a 97       	mov	r7,sp
80027e56:	20 2d       	sub	sp,8
80027e58:	48 96       	lddpc	r6,80027e7c <pdca_get_transfer_status+0x2c>
80027e5a:	1e 26       	rsub	r6,pc
80027e5c:	ef 4c ff f8 	st.w	r7[-8],r12
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);
80027e60:	ee fc ff f8 	ld.w	r12,r7[-8]
80027e64:	f0 16 00 25 	mcall	r6[148]
80027e68:	18 98       	mov	r8,r12
80027e6a:	ef 48 ff fc 	st.w	r7[-4],r8

  return pdca_channel->isr;
80027e6e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027e72:	70 b8       	ld.w	r8,r8[0x2c]
}
80027e74:	10 9c       	mov	r12,r8
80027e76:	2f ed       	sub	sp,-8
80027e78:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80027e7c:	80 02       	ld.sh	r2,r0[0x0]
80027e7e:	7c de       	ld.w	lr,lr[0x34]

80027e80 <pevc_channel_configure>:
// See comment header in pevc.h
bool pevc_channel_configure( volatile avr32_pevc_t *pevc,
                             unsigned short int chan_id,
                             unsigned short int gen_id,
                             const pevc_evs_opt_t *pevs )
{
80027e80:	eb cd 40 80 	pushm	r7,lr
80027e84:	1a 97       	mov	r7,sp
80027e86:	20 4d       	sub	sp,16
80027e88:	ef 4c ff fc 	st.w	r7[-4],r12
80027e8c:	14 98       	mov	r8,r10
80027e8e:	ef 49 ff f0 	st.w	r7[-16],r9
80027e92:	16 99       	mov	r9,r11
80027e94:	ef 59 ff f8 	st.h	r7[-8],r9
80027e98:	ef 58 ff f4 	st.h	r7[-12],r8
  if( NULL != pevc )
80027e9c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027ea0:	58 08       	cp.w	r8,0
80027ea2:	c6 90       	breq	80027f74 <pevc_channel_configure+0xf4>
  {
    if(( gen_id < PEVC_NUMBER_OF_EVENT_GENERATORS )
80027ea4:	ef 09 ff f4 	ld.sh	r9,r7[-12]
80027ea8:	32 18       	mov	r8,33
80027eaa:	f0 09 19 00 	cp.h	r9,r8
80027eae:	e0 8b 00 61 	brhi	80027f70 <pevc_channel_configure+0xf0>
80027eb2:	ef 09 ff f8 	ld.sh	r9,r7[-8]
80027eb6:	31 58       	mov	r8,21
80027eb8:	f0 09 19 00 	cp.h	r9,r8
80027ebc:	e0 8b 00 5a 	brhi	80027f70 <pevc_channel_configure+0xf0>
    && ( chan_id < PEVC_NUMBER_OF_EVENT_USERS ))
    {
      // Connect the generator gen_id to the channel.
      pevc->CHMX[chan_id].evmx = gen_id;
80027ec0:	ef 1a ff f8 	ld.uh	r10,r7[-8]
80027ec4:	ef 08 ff f4 	ld.sh	r8,r7[-12]
80027ec8:	5c 58       	castu.b	r8
80027eca:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
80027ece:	f7 d8 c0 08 	bfextu	r11,r8,0x0,0x8
80027ed2:	ee f9 ff fc 	ld.w	r9,r7[-4]
80027ed6:	2c 0a       	sub	r10,-64
80027ed8:	f2 0a 03 28 	ld.w	r8,r9[r10<<0x2]
80027edc:	f1 db d0 06 	bfins	r8,r11,0x0,0x6
80027ee0:	f2 0a 09 28 	st.w	r9[r10<<0x2],r8

      // Configure the event shaper for the channel.
      if( NULL != pevs )
80027ee4:	ee f8 ff f0 	ld.w	r8,r7[-16]
80027ee8:	58 08       	cp.w	r8,0
80027eea:	c4 10       	breq	80027f6c <pevc_channel_configure+0xec>
      {
        pevc->igfdr = pevs->igfdr;  // Only one divider for all EVS channels.
80027eec:	ee f8 ff f0 	ld.w	r8,r7[-16]
80027ef0:	11 88       	ld.ub	r8,r8[0x0]
80027ef2:	10 99       	mov	r9,r8
80027ef4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027ef8:	91 29       	st.w	r8[0x8],r9
        pevc->EVS[gen_id].igf = pevs->igf;
80027efa:	ef 1a ff f4 	ld.uh	r10,r7[-12]
80027efe:	ee f8 ff f0 	ld.w	r8,r7[-16]
80027f02:	70 18       	ld.w	r8,r8[0x4]
80027f04:	5c 58       	castu.b	r8
80027f06:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80027f0a:	f7 d8 c0 08 	bfextu	r11,r8,0x0,0x8
80027f0e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80027f12:	28 0a       	sub	r10,-128
80027f14:	f2 0a 03 28 	ld.w	r8,r9[r10<<0x2]
80027f18:	f1 db d0 41 	bfins	r8,r11,0x2,0x1
80027f1c:	f2 0a 09 28 	st.w	r9[r10<<0x2],r8
        pevc->EVS[gen_id].evf = pevs->evf;
80027f20:	ef 1a ff f4 	ld.uh	r10,r7[-12]
80027f24:	ee f8 ff f0 	ld.w	r8,r7[-16]
80027f28:	70 28       	ld.w	r8,r8[0x8]
80027f2a:	5c 58       	castu.b	r8
80027f2c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80027f30:	f7 d8 c0 08 	bfextu	r11,r8,0x0,0x8
80027f34:	ee f9 ff fc 	ld.w	r9,r7[-4]
80027f38:	28 0a       	sub	r10,-128
80027f3a:	f2 0a 03 28 	ld.w	r8,r9[r10<<0x2]
80027f3e:	f1 db d0 21 	bfins	r8,r11,0x1,0x1
80027f42:	f2 0a 09 28 	st.w	r9[r10<<0x2],r8
        pevc->EVS[gen_id].evr = pevs->evr;
80027f46:	ef 1a ff f4 	ld.uh	r10,r7[-12]
80027f4a:	ee f8 ff f0 	ld.w	r8,r7[-16]
80027f4e:	70 38       	ld.w	r8,r8[0xc]
80027f50:	5c 58       	castu.b	r8
80027f52:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80027f56:	f7 d8 c0 08 	bfextu	r11,r8,0x0,0x8
80027f5a:	ee f9 ff fc 	ld.w	r9,r7[-4]
80027f5e:	28 0a       	sub	r10,-128
80027f60:	f2 0a 03 28 	ld.w	r8,r9[r10<<0x2]
80027f64:	f1 db d0 01 	bfins	r8,r11,0x0,0x1
80027f68:	f2 0a 09 28 	st.w	r9[r10<<0x2],r8
      }
      return( PASS );
80027f6c:	30 08       	mov	r8,0
80027f6e:	c0 48       	rjmp	80027f76 <pevc_channel_configure+0xf6>
    }
    else return( FAIL );
80027f70:	30 18       	mov	r8,1
80027f72:	c0 28       	rjmp	80027f76 <pevc_channel_configure+0xf6>
  }
  else
    return( FAIL );
80027f74:	30 18       	mov	r8,1
}
80027f76:	10 9c       	mov	r12,r8
80027f78:	2f cd       	sub	sp,-16
80027f7a:	e3 cd 80 80 	ldm	sp++,r7,pc

80027f7e <pevc_igfd_set>:


// See comment header in pevc.h
void pevc_igfd_set( volatile avr32_pevc_t *pevc, unsigned char igfd )
{
80027f7e:	eb cd 40 80 	pushm	r7,lr
80027f82:	1a 97       	mov	r7,sp
80027f84:	20 2d       	sub	sp,8
80027f86:	ef 4c ff fc 	st.w	r7[-4],r12
80027f8a:	16 98       	mov	r8,r11
80027f8c:	ef 68 ff f8 	st.b	r7[-8],r8
  Assert( NULL != pevc );
  PEVC_IGFD_SET(pevc, igfd);
80027f90:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80027f94:	f3 d8 c0 04 	bfextu	r9,r8,0x0,0x4
80027f98:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027f9c:	91 29       	st.w	r8[0x8],r9
}
80027f9e:	2f ed       	sub	sp,-8
80027fa0:	e3 cd 80 80 	ldm	sp++,r7,pc

80027fa4 <pevc_channels_enable>:
/**                                                                          **/
/******************************************************************************/

// See comment header in pevc.h
void pevc_channels_enable( volatile avr32_pevc_t *pevc, unsigned long long int chan_mask )
{
80027fa4:	eb cd 40 80 	pushm	r7,lr
80027fa8:	1a 97       	mov	r7,sp
80027faa:	20 3d       	sub	sp,12
80027fac:	ef 4c ff fc 	st.w	r7[-4],r12
80027fb0:	ee eb ff f4 	st.d	r7[-12],r10
  Assert( NULL != pevc );
  PEVC_CHANNELS_ENABLE(pevc, chan_mask);
80027fb4:	ee e8 ff f4 	ld.d	r8,r7[-12]
80027fb8:	fc 1a 80 00 	movh	r10,0x8000
80027fbc:	30 0b       	mov	r11,0
80027fbe:	14 38       	cp.w	r8,r10
80027fc0:	f6 09 13 00 	cpc	r9,r11
80027fc4:	e0 8b 00 08 	brhi	80027fd4 <pevc_channels_enable+0x30>
80027fc8:	ee f9 ff f8 	ld.w	r9,r7[-8]
80027fcc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027fd0:	91 89       	st.w	r8[0x20],r9
80027fd2:	c0 68       	rjmp	80027fde <pevc_channels_enable+0x3a>
80027fd4:	ee f9 ff f8 	ld.w	r9,r7[-8]
80027fd8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027fdc:	91 99       	st.w	r8[0x24],r9
}
80027fde:	2f dd       	sub	sp,-12
80027fe0:	e3 cd 80 80 	ldm	sp++,r7,pc

80027fe4 <pevc_channels_disable>:

// See comment header in pevc.h
void pevc_channels_disable( volatile avr32_pevc_t *pevc, unsigned long long int chan_mask )
{
80027fe4:	eb cd 40 80 	pushm	r7,lr
80027fe8:	1a 97       	mov	r7,sp
80027fea:	20 3d       	sub	sp,12
80027fec:	ef 4c ff fc 	st.w	r7[-4],r12
80027ff0:	ee eb ff f4 	st.d	r7[-12],r10
  Assert( NULL != pevc );
  PEVC_CHANNELS_DISABLE(pevc, chan_mask);
80027ff4:	ee e8 ff f4 	ld.d	r8,r7[-12]
80027ff8:	fc 1a 80 00 	movh	r10,0x8000
80027ffc:	30 0b       	mov	r11,0
80027ffe:	14 38       	cp.w	r8,r10
80028000:	f6 09 13 00 	cpc	r9,r11
80028004:	e0 8b 00 08 	brhi	80028014 <pevc_channels_disable+0x30>
80028008:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002800c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028010:	91 c9       	st.w	r8[0x30],r9
80028012:	c0 68       	rjmp	8002801e <pevc_channels_disable+0x3a>
80028014:	ee f9 ff f8 	ld.w	r9,r7[-8]
80028018:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002801c:	91 d9       	st.w	r8[0x34],r9
}
8002801e:	2f dd       	sub	sp,-12
80028020:	e3 cd 80 80 	ldm	sp++,r7,pc

80028024 <pevc_get_channel_status>:

// See comment header in pevc.h
bool pevc_get_channel_status( volatile avr32_pevc_t *pevc, unsigned short int chan_id )
{
80028024:	eb cd 40 80 	pushm	r7,lr
80028028:	1a 97       	mov	r7,sp
8002802a:	20 2d       	sub	sp,8
8002802c:	ef 4c ff fc 	st.w	r7[-4],r12
80028030:	16 98       	mov	r8,r11
80028032:	ef 58 ff f8 	st.h	r7[-8],r8
  Assert( NULL != pevc );
  Assert( chan_id < PEVC_NUMBER_OF_EVENT_USERS );
  if(chan_id<32)
80028036:	ef 09 ff f8 	ld.sh	r9,r7[-8]
8002803a:	31 f8       	mov	r8,31
8002803c:	f0 09 19 00 	cp.h	r9,r8
80028040:	e0 8b 00 12 	brhi	80028064 <pevc_get_channel_status+0x40>
    return( ((pevc->chsr0) & (1 << chan_id))>>chan_id );
80028044:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028048:	70 49       	ld.w	r9,r8[0x10]
8002804a:	ef 18 ff f8 	ld.uh	r8,r7[-8]
8002804e:	30 1a       	mov	r10,1
80028050:	f4 08 09 48 	lsl	r8,r10,r8
80028054:	10 69       	and	r9,r8
80028056:	ef 18 ff f8 	ld.uh	r8,r7[-8]
8002805a:	f2 08 0a 48 	lsr	r8,r9,r8
8002805e:	5f 18       	srne	r8
80028060:	5c 58       	castu.b	r8
80028062:	c1 28       	rjmp	80028086 <pevc_get_channel_status+0x62>
  else
    return( ((pevc->chsr1) & (1 << (chan_id-32)))>>(chan_id-32) );
80028064:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028068:	70 59       	ld.w	r9,r8[0x14]
8002806a:	ef 18 ff f8 	ld.uh	r8,r7[-8]
8002806e:	22 08       	sub	r8,32
80028070:	30 1a       	mov	r10,1
80028072:	f4 08 09 48 	lsl	r8,r10,r8
80028076:	10 69       	and	r9,r8
80028078:	ef 18 ff f8 	ld.uh	r8,r7[-8]
8002807c:	22 08       	sub	r8,32
8002807e:	f2 08 0a 48 	lsr	r8,r9,r8
80028082:	5f 18       	srne	r8
80028084:	5c 58       	castu.b	r8
}
80028086:	10 9c       	mov	r12,r8
80028088:	2f ed       	sub	sp,-8
8002808a:	e3 cd 80 80 	ldm	sp++,r7,pc

8002808e <pevc_get_channel_state>:
/**                                                                          **/
/******************************************************************************/

// See comment header in pevc.h
bool pevc_get_channel_state(volatile avr32_pevc_t *pevc, unsigned short int chan_id)
{
8002808e:	eb cd 40 80 	pushm	r7,lr
80028092:	1a 97       	mov	r7,sp
80028094:	20 2d       	sub	sp,8
80028096:	ef 4c ff fc 	st.w	r7[-4],r12
8002809a:	16 98       	mov	r8,r11
8002809c:	ef 58 ff f8 	st.h	r7[-8],r8
  Assert( NULL != pevc );
  Assert( chan_id < PEVC_NUMBER_OF_EVENT_USERS );
  if(chan_id<32)
800280a0:	ef 09 ff f8 	ld.sh	r9,r7[-8]
800280a4:	31 f8       	mov	r8,31
800280a6:	f0 09 19 00 	cp.h	r9,r8
800280aa:	e0 8b 00 12 	brhi	800280ce <pevc_get_channel_state+0x40>
    return( ((pevc->busy0) & (1 << chan_id))>>chan_id );
800280ae:	ee f8 ff fc 	ld.w	r8,r7[-4]
800280b2:	71 49       	ld.w	r9,r8[0x50]
800280b4:	ef 18 ff f8 	ld.uh	r8,r7[-8]
800280b8:	30 1a       	mov	r10,1
800280ba:	f4 08 09 48 	lsl	r8,r10,r8
800280be:	10 69       	and	r9,r8
800280c0:	ef 18 ff f8 	ld.uh	r8,r7[-8]
800280c4:	f2 08 0a 48 	lsr	r8,r9,r8
800280c8:	5f 18       	srne	r8
800280ca:	5c 58       	castu.b	r8
800280cc:	c1 28       	rjmp	800280f0 <pevc_get_channel_state+0x62>
  else
    return( ((pevc->busy1) & (1 << (chan_id-32)))>>(chan_id-32) );
800280ce:	ee f8 ff fc 	ld.w	r8,r7[-4]
800280d2:	71 59       	ld.w	r9,r8[0x54]
800280d4:	ef 18 ff f8 	ld.uh	r8,r7[-8]
800280d8:	22 08       	sub	r8,32
800280da:	30 1a       	mov	r10,1
800280dc:	f4 08 09 48 	lsl	r8,r10,r8
800280e0:	10 69       	and	r9,r8
800280e2:	ef 18 ff f8 	ld.uh	r8,r7[-8]
800280e6:	22 08       	sub	r8,32
800280e8:	f2 08 0a 48 	lsr	r8,r9,r8
800280ec:	5f 18       	srne	r8
800280ee:	5c 58       	castu.b	r8
}
800280f0:	10 9c       	mov	r12,r8
800280f2:	2f ed       	sub	sp,-8
800280f4:	e3 cd 80 80 	ldm	sp++,r7,pc

800280f8 <pevc_channel_sev_enable>:
/**                                                                          **/
/******************************************************************************/

// See comment header in pevc.h
void pevc_channel_sev_enable( volatile avr32_pevc_t *pevc, unsigned short int chan_id )
{
800280f8:	eb cd 40 80 	pushm	r7,lr
800280fc:	1a 97       	mov	r7,sp
800280fe:	20 2d       	sub	sp,8
80028100:	ef 4c ff fc 	st.w	r7[-4],r12
80028104:	16 98       	mov	r8,r11
80028106:	ef 58 ff f8 	st.h	r7[-8],r8
  Assert( NULL != pevc );
  Assert( chan_id < PEVC_NUMBER_OF_EVENT_USERS );
  pevc->CHMX[chan_id].smx = ENABLE;
8002810a:	ef 18 ff f8 	ld.uh	r8,r7[-8]
8002810e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80028112:	f0 ca ff c0 	sub	r10,r8,-64
80028116:	f2 0a 03 28 	ld.w	r8,r9[r10<<0x2]
8002811a:	30 1b       	mov	r11,1
8002811c:	f1 db d1 01 	bfins	r8,r11,0x8,0x1
80028120:	f2 0a 09 28 	st.w	r9[r10<<0x2],r8
}
80028124:	2f ed       	sub	sp,-8
80028126:	e3 cd 80 80 	ldm	sp++,r7,pc

8002812a <pevc_channels_trigger_sev>:

// See comment header in pevc.h
void pevc_channels_trigger_sev(volatile avr32_pevc_t *pevc, unsigned long long int chan_mask)
{
8002812a:	eb cd 40 80 	pushm	r7,lr
8002812e:	1a 97       	mov	r7,sp
80028130:	20 3d       	sub	sp,12
80028132:	ef 4c ff fc 	st.w	r7[-4],r12
80028136:	ee eb ff f4 	st.d	r7[-12],r10
  Assert( NULL != pevc );
  PEVC_CHANNELS_TRIGGER_SEV(pevc, chan_mask);
8002813a:	ee e8 ff f4 	ld.d	r8,r7[-12]
8002813e:	fc 1a 80 00 	movh	r10,0x8000
80028142:	30 0b       	mov	r11,0
80028144:	14 38       	cp.w	r8,r10
80028146:	f6 09 13 00 	cpc	r9,r11
8002814a:	e0 8b 00 09 	brhi	8002815c <pevc_channels_trigger_sev+0x32>
8002814e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80028152:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028156:	f1 49 00 40 	st.w	r8[64],r9
8002815a:	c0 78       	rjmp	80028168 <pevc_channels_trigger_sev+0x3e>
8002815c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80028160:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028164:	f1 49 00 44 	st.w	r8[68],r9
}
80028168:	2f dd       	sub	sp,-12
8002816a:	e3 cd 80 80 	ldm	sp++,r7,pc

8002816e <pevc_channel_sev_disable>:

// See comment header in pevc.h
void pevc_channel_sev_disable( volatile avr32_pevc_t *pevc, unsigned short int chan_id )
{
8002816e:	eb cd 40 80 	pushm	r7,lr
80028172:	1a 97       	mov	r7,sp
80028174:	20 2d       	sub	sp,8
80028176:	ef 4c ff fc 	st.w	r7[-4],r12
8002817a:	16 98       	mov	r8,r11
8002817c:	ef 58 ff f8 	st.h	r7[-8],r8
  Assert( NULL != pevc );
  Assert( chan_id < PEVC_NUMBER_OF_EVENT_USERS );
  pevc->CHMX[chan_id].smx = DISABLE;
80028180:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80028184:	ee f9 ff fc 	ld.w	r9,r7[-4]
80028188:	f0 ca ff c0 	sub	r10,r8,-64
8002818c:	f2 0a 03 28 	ld.w	r8,r9[r10<<0x2]
80028190:	30 0b       	mov	r11,0
80028192:	f1 db d1 01 	bfins	r8,r11,0x8,0x1
80028196:	f2 0a 09 28 	st.w	r9[r10<<0x2],r8
}
8002819a:	2f ed       	sub	sp,-8
8002819c:	e3 cd 80 80 	ldm	sp++,r7,pc

800281a0 <pevc_channels_enable_trigger_interrupt>:
/**                                                                          **/
/******************************************************************************/

// See comment header in pevc.h
void pevc_channels_enable_trigger_interrupt( volatile avr32_pevc_t *pevc, unsigned long long int chan_mask)
{
800281a0:	eb cd 40 80 	pushm	r7,lr
800281a4:	1a 97       	mov	r7,sp
800281a6:	20 3d       	sub	sp,12
800281a8:	ef 4c ff fc 	st.w	r7[-4],r12
800281ac:	ee eb ff f4 	st.d	r7[-12],r10
  Assert( NULL != pevc );
  PEVC_CHANNELS_ENABLE_TRIGGER_INTERRUPT(pevc, chan_mask);
800281b0:	ee e8 ff f4 	ld.d	r8,r7[-12]
800281b4:	fc 1a 80 00 	movh	r10,0x8000
800281b8:	30 0b       	mov	r11,0
800281ba:	14 38       	cp.w	r8,r10
800281bc:	f6 09 13 00 	cpc	r9,r11
800281c0:	e0 8b 00 09 	brhi	800281d2 <pevc_channels_enable_trigger_interrupt+0x32>
800281c4:	ee f9 ff f8 	ld.w	r9,r7[-8]
800281c8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800281cc:	f1 49 00 90 	st.w	r8[144],r9
800281d0:	c0 78       	rjmp	800281de <pevc_channels_enable_trigger_interrupt+0x3e>
800281d2:	ee f9 ff f8 	ld.w	r9,r7[-8]
800281d6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800281da:	f1 49 00 94 	st.w	r8[148],r9
}
800281de:	2f dd       	sub	sp,-12
800281e0:	e3 cd 80 80 	ldm	sp++,r7,pc

800281e4 <pevc_channels_disable_trigger_interrupt>:

// See comment header in pevc.h
void pevc_channels_disable_trigger_interrupt( volatile avr32_pevc_t *pevc, unsigned long long int chan_mask)
{
800281e4:	eb cd 40 80 	pushm	r7,lr
800281e8:	1a 97       	mov	r7,sp
800281ea:	20 3d       	sub	sp,12
800281ec:	ef 4c ff fc 	st.w	r7[-4],r12
800281f0:	ee eb ff f4 	st.d	r7[-12],r10
  Assert( NULL != pevc );
  PEVC_CHANNELS_DISABLE_TRIGGER_INTERRUPT(pevc, chan_mask);
800281f4:	ee e8 ff f4 	ld.d	r8,r7[-12]
800281f8:	fc 1a 80 00 	movh	r10,0x8000
800281fc:	30 0b       	mov	r11,0
800281fe:	14 38       	cp.w	r8,r10
80028200:	f6 09 13 00 	cpc	r9,r11
80028204:	e0 8b 00 09 	brhi	80028216 <pevc_channels_disable_trigger_interrupt+0x32>
80028208:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002820c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028210:	f1 49 00 a0 	st.w	r8[160],r9
80028214:	c0 78       	rjmp	80028222 <pevc_channels_disable_trigger_interrupt+0x3e>
80028216:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002821a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002821e:	f1 49 00 a4 	st.w	r8[164],r9
}
80028222:	2f dd       	sub	sp,-12
80028224:	e3 cd 80 80 	ldm	sp++,r7,pc

80028228 <pevc_channel_is_trigger_interrupt_enabled>:

// See comment header in pevc.h
bool pevc_channel_is_trigger_interrupt_enabled( volatile avr32_pevc_t *pevc, unsigned short int chan_id)
{
80028228:	eb cd 40 80 	pushm	r7,lr
8002822c:	1a 97       	mov	r7,sp
8002822e:	20 2d       	sub	sp,8
80028230:	ef 4c ff fc 	st.w	r7[-4],r12
80028234:	16 98       	mov	r8,r11
80028236:	ef 58 ff f8 	st.h	r7[-8],r8
  Assert( NULL != pevc );
  Assert( chan_id < PEVC_NUMBER_OF_EVENT_USERS );
  if(chan_id<32)
8002823a:	ef 09 ff f8 	ld.sh	r9,r7[-8]
8002823e:	31 f8       	mov	r8,31
80028240:	f0 09 19 00 	cp.h	r9,r8
80028244:	e0 8b 00 13 	brhi	8002826a <pevc_channel_is_trigger_interrupt_enabled+0x42>
    return( ((pevc->trimr0) & (1 << chan_id))>>chan_id );
80028248:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002824c:	f0 f9 00 80 	ld.w	r9,r8[128]
80028250:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80028254:	30 1a       	mov	r10,1
80028256:	f4 08 09 48 	lsl	r8,r10,r8
8002825a:	10 69       	and	r9,r8
8002825c:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80028260:	f2 08 0a 48 	lsr	r8,r9,r8
80028264:	5f 18       	srne	r8
80028266:	5c 58       	castu.b	r8
80028268:	c1 38       	rjmp	8002828e <pevc_channel_is_trigger_interrupt_enabled+0x66>
  else
    return( ((pevc->trimr1) & (1 << (chan_id-32)))>>(chan_id-32) );
8002826a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002826e:	f0 f9 00 84 	ld.w	r9,r8[132]
80028272:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80028276:	22 08       	sub	r8,32
80028278:	30 1a       	mov	r10,1
8002827a:	f4 08 09 48 	lsl	r8,r10,r8
8002827e:	10 69       	and	r9,r8
80028280:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80028284:	22 08       	sub	r8,32
80028286:	f2 08 0a 48 	lsr	r8,r9,r8
8002828a:	5f 18       	srne	r8
8002828c:	5c 58       	castu.b	r8
}
8002828e:	10 9c       	mov	r12,r8
80028290:	2f ed       	sub	sp,-8
80028292:	e3 cd 80 80 	ldm	sp++,r7,pc

80028296 <pevc_channel_is_trigger_interrupt_raised>:

// See comment header in pevc.h
bool pevc_channel_is_trigger_interrupt_raised( volatile avr32_pevc_t *pevc, unsigned short int chan_id)
{
80028296:	eb cd 40 80 	pushm	r7,lr
8002829a:	1a 97       	mov	r7,sp
8002829c:	20 2d       	sub	sp,8
8002829e:	ef 4c ff fc 	st.w	r7[-4],r12
800282a2:	16 98       	mov	r8,r11
800282a4:	ef 58 ff f8 	st.h	r7[-8],r8
  Assert( NULL != pevc );
  Assert( chan_id < PEVC_NUMBER_OF_EVENT_USERS );
  if(chan_id<32)
800282a8:	ef 09 ff f8 	ld.sh	r9,r7[-8]
800282ac:	31 f8       	mov	r8,31
800282ae:	f0 09 19 00 	cp.h	r9,r8
800282b2:	e0 8b 00 12 	brhi	800282d6 <pevc_channel_is_trigger_interrupt_raised+0x40>
    return( ((pevc->trsr0) & (1 << chan_id))>>chan_id );
800282b6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800282ba:	71 89       	ld.w	r9,r8[0x60]
800282bc:	ef 18 ff f8 	ld.uh	r8,r7[-8]
800282c0:	30 1a       	mov	r10,1
800282c2:	f4 08 09 48 	lsl	r8,r10,r8
800282c6:	10 69       	and	r9,r8
800282c8:	ef 18 ff f8 	ld.uh	r8,r7[-8]
800282cc:	f2 08 0a 48 	lsr	r8,r9,r8
800282d0:	5f 18       	srne	r8
800282d2:	5c 58       	castu.b	r8
800282d4:	c1 28       	rjmp	800282f8 <pevc_channel_is_trigger_interrupt_raised+0x62>
  else
    return( ((pevc->trsr1) & (1 << (chan_id-32)))>>(chan_id-32) );
800282d6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800282da:	71 99       	ld.w	r9,r8[0x64]
800282dc:	ef 18 ff f8 	ld.uh	r8,r7[-8]
800282e0:	22 08       	sub	r8,32
800282e2:	30 1a       	mov	r10,1
800282e4:	f4 08 09 48 	lsl	r8,r10,r8
800282e8:	10 69       	and	r9,r8
800282ea:	ef 18 ff f8 	ld.uh	r8,r7[-8]
800282ee:	22 08       	sub	r8,32
800282f0:	f2 08 0a 48 	lsr	r8,r9,r8
800282f4:	5f 18       	srne	r8
800282f6:	5c 58       	castu.b	r8
}
800282f8:	10 9c       	mov	r12,r8
800282fa:	2f ed       	sub	sp,-8
800282fc:	e3 cd 80 80 	ldm	sp++,r7,pc

80028300 <pevc_channel_clear_trigger_interrupt>:

// See comment header in pevc.h
void pevc_channel_clear_trigger_interrupt( volatile avr32_pevc_t *pevc, unsigned short int chan_id)
{
80028300:	eb cd 40 80 	pushm	r7,lr
80028304:	1a 97       	mov	r7,sp
80028306:	20 2d       	sub	sp,8
80028308:	ef 4c ff fc 	st.w	r7[-4],r12
8002830c:	16 98       	mov	r8,r11
8002830e:	ef 58 ff f8 	st.h	r7[-8],r8
  Assert( NULL != pevc );
  Assert( chan_id < PEVC_NUMBER_OF_EVENT_USERS );
  if(chan_id<32)
80028312:	ef 09 ff f8 	ld.sh	r9,r7[-8]
80028316:	31 f8       	mov	r8,31
80028318:	f0 09 19 00 	cp.h	r9,r8
8002831c:	e0 8b 00 0d 	brhi	80028336 <pevc_channel_clear_trigger_interrupt+0x36>
    pevc->trscr0 = (1 << chan_id);
80028320:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80028324:	30 19       	mov	r9,1
80028326:	f2 08 09 48 	lsl	r8,r9,r8
8002832a:	10 99       	mov	r9,r8
8002832c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028330:	f1 49 00 70 	st.w	r8[112],r9
80028334:	c0 c8       	rjmp	8002834c <pevc_channel_clear_trigger_interrupt+0x4c>
  else
    pevc->trscr1 = (1 << (chan_id-32));
80028336:	ef 18 ff f8 	ld.uh	r8,r7[-8]
8002833a:	22 08       	sub	r8,32
8002833c:	30 19       	mov	r9,1
8002833e:	f2 08 09 48 	lsl	r8,r9,r8
80028342:	10 99       	mov	r9,r8
80028344:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028348:	f1 49 00 74 	st.w	r8[116],r9
}
8002834c:	2f ed       	sub	sp,-8
8002834e:	e3 cd 80 80 	ldm	sp++,r7,pc

80028352 <pevc_channels_enable_overrun_interrupt>:
/**                                                                          **/
/******************************************************************************/

// See comment header in pevc.h
void pevc_channels_enable_overrun_interrupt( volatile avr32_pevc_t *pevc, unsigned long long int chan_mask)
{
80028352:	eb cd 40 80 	pushm	r7,lr
80028356:	1a 97       	mov	r7,sp
80028358:	20 3d       	sub	sp,12
8002835a:	ef 4c ff fc 	st.w	r7[-4],r12
8002835e:	ee eb ff f4 	st.d	r7[-12],r10
  Assert( NULL != pevc );
  PEVC_CHANNELS_ENABLE_OVERRUN_INTERRUPT(pevc, chan_mask);
80028362:	ee e8 ff f4 	ld.d	r8,r7[-12]
80028366:	fc 1a 80 00 	movh	r10,0x8000
8002836a:	30 0b       	mov	r11,0
8002836c:	14 38       	cp.w	r8,r10
8002836e:	f6 09 13 00 	cpc	r9,r11
80028372:	e0 8b 00 09 	brhi	80028384 <pevc_channels_enable_overrun_interrupt+0x32>
80028376:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002837a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002837e:	f1 49 00 e0 	st.w	r8[224],r9
80028382:	c0 78       	rjmp	80028390 <pevc_channels_enable_overrun_interrupt+0x3e>
80028384:	ee f9 ff f8 	ld.w	r9,r7[-8]
80028388:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002838c:	f1 49 00 e4 	st.w	r8[228],r9
}
80028390:	2f dd       	sub	sp,-12
80028392:	e3 cd 80 80 	ldm	sp++,r7,pc

80028396 <pevc_channels_disable_overrun_interrupt>:

// See comment header in pevc.h
void pevc_channels_disable_overrun_interrupt( volatile avr32_pevc_t *pevc, unsigned long long int chan_mask)
{
80028396:	eb cd 40 80 	pushm	r7,lr
8002839a:	1a 97       	mov	r7,sp
8002839c:	20 3d       	sub	sp,12
8002839e:	ef 4c ff fc 	st.w	r7[-4],r12
800283a2:	ee eb ff f4 	st.d	r7[-12],r10
  Assert( NULL != pevc );
  PEVC_CHANNELS_DISABLE_OVERRUN_INTERRUPT(pevc, chan_mask);
800283a6:	ee e8 ff f4 	ld.d	r8,r7[-12]
800283aa:	fc 1a 80 00 	movh	r10,0x8000
800283ae:	30 0b       	mov	r11,0
800283b0:	14 38       	cp.w	r8,r10
800283b2:	f6 09 13 00 	cpc	r9,r11
800283b6:	e0 8b 00 09 	brhi	800283c8 <pevc_channels_disable_overrun_interrupt+0x32>
800283ba:	ee f9 ff f8 	ld.w	r9,r7[-8]
800283be:	ee f8 ff fc 	ld.w	r8,r7[-4]
800283c2:	f1 49 00 f0 	st.w	r8[240],r9
800283c6:	c0 78       	rjmp	800283d4 <pevc_channels_disable_overrun_interrupt+0x3e>
800283c8:	ee f9 ff f8 	ld.w	r9,r7[-8]
800283cc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800283d0:	f1 49 00 f4 	st.w	r8[244],r9
}
800283d4:	2f dd       	sub	sp,-12
800283d6:	e3 cd 80 80 	ldm	sp++,r7,pc

800283da <pevc_channel_is_overrun_interrupt_enabled>:

// See comment header in pevc.h
bool pevc_channel_is_overrun_interrupt_enabled( volatile avr32_pevc_t *pevc, unsigned short int chan_id)
{
800283da:	eb cd 40 80 	pushm	r7,lr
800283de:	1a 97       	mov	r7,sp
800283e0:	20 2d       	sub	sp,8
800283e2:	ef 4c ff fc 	st.w	r7[-4],r12
800283e6:	16 98       	mov	r8,r11
800283e8:	ef 58 ff f8 	st.h	r7[-8],r8
  Assert( NULL != pevc );
  Assert( chan_id < PEVC_NUMBER_OF_EVENT_USERS );
  if(chan_id<32)
800283ec:	ef 09 ff f8 	ld.sh	r9,r7[-8]
800283f0:	31 f8       	mov	r8,31
800283f2:	f0 09 19 00 	cp.h	r9,r8
800283f6:	e0 8b 00 13 	brhi	8002841c <pevc_channel_is_overrun_interrupt_enabled+0x42>
    return( ((pevc->ovimr0) & (1 << chan_id))>>chan_id );
800283fa:	ee f8 ff fc 	ld.w	r8,r7[-4]
800283fe:	f0 f9 00 d0 	ld.w	r9,r8[208]
80028402:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80028406:	30 1a       	mov	r10,1
80028408:	f4 08 09 48 	lsl	r8,r10,r8
8002840c:	10 69       	and	r9,r8
8002840e:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80028412:	f2 08 0a 48 	lsr	r8,r9,r8
80028416:	5f 18       	srne	r8
80028418:	5c 58       	castu.b	r8
8002841a:	c1 38       	rjmp	80028440 <pevc_channel_is_overrun_interrupt_enabled+0x66>
  else
    return( ((pevc->ovimr1) & (1 << (chan_id-32)))>>(chan_id-32) );
8002841c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028420:	f0 f9 00 d4 	ld.w	r9,r8[212]
80028424:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80028428:	22 08       	sub	r8,32
8002842a:	30 1a       	mov	r10,1
8002842c:	f4 08 09 48 	lsl	r8,r10,r8
80028430:	10 69       	and	r9,r8
80028432:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80028436:	22 08       	sub	r8,32
80028438:	f2 08 0a 48 	lsr	r8,r9,r8
8002843c:	5f 18       	srne	r8
8002843e:	5c 58       	castu.b	r8
}
80028440:	10 9c       	mov	r12,r8
80028442:	2f ed       	sub	sp,-8
80028444:	e3 cd 80 80 	ldm	sp++,r7,pc

80028448 <pevc_channel_is_overrun_interrupt_raised>:

// See comment header in pevc.h
bool pevc_channel_is_overrun_interrupt_raised( volatile avr32_pevc_t *pevc, unsigned short int chan_id)
{
80028448:	eb cd 40 80 	pushm	r7,lr
8002844c:	1a 97       	mov	r7,sp
8002844e:	20 2d       	sub	sp,8
80028450:	ef 4c ff fc 	st.w	r7[-4],r12
80028454:	16 98       	mov	r8,r11
80028456:	ef 58 ff f8 	st.h	r7[-8],r8
  Assert( NULL != pevc );
  Assert( chan_id < PEVC_NUMBER_OF_EVENT_USERS );
  if(chan_id<32)
8002845a:	ef 09 ff f8 	ld.sh	r9,r7[-8]
8002845e:	31 f8       	mov	r8,31
80028460:	f0 09 19 00 	cp.h	r9,r8
80028464:	e0 8b 00 13 	brhi	8002848a <pevc_channel_is_overrun_interrupt_raised+0x42>
    return( ((pevc->ovsr0) & (1 << chan_id))>>chan_id );
80028468:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002846c:	f0 f9 00 b0 	ld.w	r9,r8[176]
80028470:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80028474:	30 1a       	mov	r10,1
80028476:	f4 08 09 48 	lsl	r8,r10,r8
8002847a:	10 69       	and	r9,r8
8002847c:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80028480:	f2 08 0a 48 	lsr	r8,r9,r8
80028484:	5f 18       	srne	r8
80028486:	5c 58       	castu.b	r8
80028488:	c1 38       	rjmp	800284ae <pevc_channel_is_overrun_interrupt_raised+0x66>
  else
    return( ((pevc->ovsr1) & (1 << (chan_id-32)))>>(chan_id-32) );
8002848a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002848e:	f0 f9 00 b4 	ld.w	r9,r8[180]
80028492:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80028496:	22 08       	sub	r8,32
80028498:	30 1a       	mov	r10,1
8002849a:	f4 08 09 48 	lsl	r8,r10,r8
8002849e:	10 69       	and	r9,r8
800284a0:	ef 18 ff f8 	ld.uh	r8,r7[-8]
800284a4:	22 08       	sub	r8,32
800284a6:	f2 08 0a 48 	lsr	r8,r9,r8
800284aa:	5f 18       	srne	r8
800284ac:	5c 58       	castu.b	r8
}
800284ae:	10 9c       	mov	r12,r8
800284b0:	2f ed       	sub	sp,-8
800284b2:	e3 cd 80 80 	ldm	sp++,r7,pc

800284b6 <pevc_channel_clear_overrun_interrupt>:

// See comment header in pevc.h
void pevc_channel_clear_overrun_interrupt( volatile avr32_pevc_t *pevc, unsigned short int chan_id)
{
800284b6:	eb cd 40 80 	pushm	r7,lr
800284ba:	1a 97       	mov	r7,sp
800284bc:	20 2d       	sub	sp,8
800284be:	ef 4c ff fc 	st.w	r7[-4],r12
800284c2:	16 98       	mov	r8,r11
800284c4:	ef 58 ff f8 	st.h	r7[-8],r8
  Assert( NULL != pevc );
  Assert( chan_id < PEVC_NUMBER_OF_EVENT_USERS );
  if(chan_id<32)
800284c8:	ef 09 ff f8 	ld.sh	r9,r7[-8]
800284cc:	31 f8       	mov	r8,31
800284ce:	f0 09 19 00 	cp.h	r9,r8
800284d2:	e0 8b 00 0d 	brhi	800284ec <pevc_channel_clear_overrun_interrupt+0x36>
    pevc->ovscr0 = (1 << chan_id);
800284d6:	ef 18 ff f8 	ld.uh	r8,r7[-8]
800284da:	30 19       	mov	r9,1
800284dc:	f2 08 09 48 	lsl	r8,r9,r8
800284e0:	10 99       	mov	r9,r8
800284e2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800284e6:	f1 49 00 c0 	st.w	r8[192],r9
800284ea:	c0 c8       	rjmp	80028502 <pevc_channel_clear_overrun_interrupt+0x4c>
  else
    pevc->ovscr1 = (1 << (chan_id-32));
800284ec:	ef 18 ff f8 	ld.uh	r8,r7[-8]
800284f0:	22 08       	sub	r8,32
800284f2:	30 19       	mov	r9,1
800284f4:	f2 08 09 48 	lsl	r8,r9,r8
800284f8:	10 99       	mov	r9,r8
800284fa:	ee f8 ff fc 	ld.w	r8,r7[-4]
800284fe:	f1 49 00 c4 	st.w	r8[196],r9
}
80028502:	2f ed       	sub	sp,-8
80028504:	e3 cd 80 80 	ldm	sp++,r7,pc

80028508 <cpu_irq_is_enabled_flags>:

	return flags;
}

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
80028508:	eb cd 40 80 	pushm	r7,lr
8002850c:	1a 97       	mov	r7,sp
8002850e:	20 1d       	sub	sp,4
80028510:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
80028514:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028518:	e6 18 00 01 	andh	r8,0x1,COH
8002851c:	5f 08       	sreq	r8
8002851e:	5c 58       	castu.b	r8
}
80028520:	10 9c       	mov	r12,r8
80028522:	2f fd       	sub	sp,-4
80028524:	e3 cd 80 80 	ldm	sp++,r7,pc

80028528 <scif_pclksr_statushigh_wait>:
 * \return Status.
 *   \retval 0   Status is high.
 *   \retval <0  SCIF_POLL_TIMEOUT Timeout expired before the status was high.
 */
static long int scif_pclksr_statushigh_wait(unsigned long statusMask)
{
80028528:	eb cd 40 80 	pushm	r7,lr
8002852c:	1a 97       	mov	r7,sp
8002852e:	20 2d       	sub	sp,8
80028530:	ef 4c ff f8 	st.w	r7[-8],r12
  unsigned int  timeout = SCIF_POLL_TIMEOUT;
80028534:	e0 78 86 a0 	mov	r8,100000
80028538:	ef 48 ff fc 	st.w	r7[-4],r8
  
  while(!(AVR32_SCIF.pclksr & statusMask))
8002853c:	c0 c8       	rjmp	80028554 <scif_pclksr_statushigh_wait+0x2c>
  {
    if(--timeout == 0)
8002853e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028542:	20 18       	sub	r8,1
80028544:	ef 48 ff fc 	st.w	r7[-4],r8
80028548:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002854c:	58 08       	cp.w	r8,0
8002854e:	c0 31       	brne	80028554 <scif_pclksr_statushigh_wait+0x2c>
      return -1;
80028550:	3f f8       	mov	r8,-1
80028552:	c0 a8       	rjmp	80028566 <scif_pclksr_statushigh_wait+0x3e>
 */
static long int scif_pclksr_statushigh_wait(unsigned long statusMask)
{
  unsigned int  timeout = SCIF_POLL_TIMEOUT;
  
  while(!(AVR32_SCIF.pclksr & statusMask))
80028554:	fe 78 08 00 	mov	r8,-63488
80028558:	70 59       	ld.w	r9,r8[0x14]
8002855a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002855e:	f3 e8 00 08 	and	r8,r9,r8
80028562:	ce e0       	breq	8002853e <scif_pclksr_statushigh_wait+0x16>
  {
    if(--timeout == 0)
      return -1;
  }
  return PASS;
80028564:	30 08       	mov	r8,0
}
80028566:	10 9c       	mov	r12,r8
80028568:	2f ed       	sub	sp,-8
8002856a:	e3 cd 80 80 	ldm	sp++,r7,pc

8002856e <scif_read_gplp>:

unsigned long scif_read_gplp(unsigned long gplp)
{
8002856e:	eb cd 40 80 	pushm	r7,lr
80028572:	1a 97       	mov	r7,sp
80028574:	20 1d       	sub	sp,4
80028576:	ef 4c ff fc 	st.w	r7[-4],r12
  return AVR32_SCIF.gplp[gplp];
8002857a:	fe 78 08 00 	mov	r8,-63488
8002857e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80028582:	2e 99       	sub	r9,-23
80028584:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
}
80028588:	10 9c       	mov	r12,r8
8002858a:	2f fd       	sub	sp,-4
8002858c:	e3 cd 80 80 	ldm	sp++,r7,pc

80028590 <scif_write_gplp>:


void scif_write_gplp(int gplp, unsigned long value)
{
80028590:	eb cd 40 80 	pushm	r7,lr
80028594:	1a 97       	mov	r7,sp
80028596:	20 2d       	sub	sp,8
80028598:	ef 4c ff fc 	st.w	r7[-4],r12
8002859c:	ef 4b ff f8 	st.w	r7[-8],r11
  SCIF_UNLOCK(AVR32_SCIF_GPLP + 4*gplp); 
800285a0:	fe 78 08 00 	mov	r8,-63488
800285a4:	ee f9 ff fc 	ld.w	r9,r7[-4]
800285a8:	2e 99       	sub	r9,-23
800285aa:	a3 69       	lsl	r9,0x2
800285ac:	ea 19 aa 00 	orh	r9,0xaa00
800285b0:	91 69       	st.w	r8[0x18],r9
  AVR32_SCIF.gplp[gplp] = value;
800285b2:	fe 78 08 00 	mov	r8,-63488
800285b6:	ee f9 ff fc 	ld.w	r9,r7[-4]
800285ba:	2e 99       	sub	r9,-23
800285bc:	ee fa ff f8 	ld.w	r10,r7[-8]
800285c0:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
}
800285c4:	2f ed       	sub	sp,-8
800285c6:	e3 cd 80 80 	ldm	sp++,r7,pc

800285ca <scif_start_osc>:
/**
 ** OSC0/OSC1 Functions
 **/

long int scif_start_osc(scif_osc_t osc, const scif_osc_opt_t *opt, bool wait_for_ready)
{
800285ca:	eb cd 40 c0 	pushm	r6-r7,lr
800285ce:	1a 97       	mov	r7,sp
800285d0:	20 6d       	sub	sp,24
800285d2:	4c c6       	lddpc	r6,80028700 <scif_start_osc+0x136>
800285d4:	1e 26       	rsub	r6,pc
800285d6:	ef 4c ff f0 	st.w	r7[-16],r12
800285da:	ef 4b ff ec 	st.w	r7[-20],r11
800285de:	14 98       	mov	r8,r10
800285e0:	ef 68 ff e8 	st.b	r7[-24],r8
      return -1;
    }  
  }
#endif  // AVR32SFW_INPUT_CHECK
  // Read Register
  u_avr32_scif_oscctrl.OSCCTRL[osc] = AVR32_SCIF.OSCCTRL[osc] ;
800285e4:	ee f8 ff f0 	ld.w	r8,r7[-16]
800285e8:	fe 79 08 00 	mov	r9,-63488
800285ec:	ee fa ff f0 	ld.w	r10,r7[-16]
800285f0:	a3 68       	lsl	r8,0x2
800285f2:	ee 08 00 08 	add	r8,r7,r8
800285f6:	2f 7a       	sub	r10,-9
800285f8:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
800285fc:	f1 49 ff f4 	st.w	r8[-12],r9
  // Modify: Configure & start OSC0.
  u_avr32_scif_oscctrl.OSCCTRL[osc].mode = opt->mode;
80028600:	ee f9 ff f0 	ld.w	r9,r7[-16]
80028604:	ee f8 ff ec 	ld.w	r8,r7[-20]
80028608:	70 18       	ld.w	r8,r8[0x4]
8002860a:	5c 58       	castu.b	r8
8002860c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80028610:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
80028614:	f2 08 15 02 	lsl	r8,r9,0x2
80028618:	ee 08 00 08 	add	r8,r7,r8
8002861c:	f0 f9 ff f4 	ld.w	r9,r8[-12]
80028620:	f3 da d0 01 	bfins	r9,r10,0x0,0x1
80028624:	f1 49 ff f4 	st.w	r8[-12],r9
  u_avr32_scif_oscctrl.OSCCTRL[osc].gain = opt->gain;
80028628:	ee f9 ff f0 	ld.w	r9,r7[-16]
8002862c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80028630:	f1 38 00 09 	ld.ub	r8,r8[9]
80028634:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
80028638:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
8002863c:	f2 08 15 02 	lsl	r8,r9,0x2
80028640:	ee 08 00 08 	add	r8,r7,r8
80028644:	f0 f9 ff f4 	ld.w	r9,r8[-12]
80028648:	f3 da d0 22 	bfins	r9,r10,0x1,0x2
8002864c:	f1 49 ff f4 	st.w	r8[-12],r9
  u_avr32_scif_oscctrl.OSCCTRL[osc].startup = opt->startup;
80028650:	ee f9 ff f0 	ld.w	r9,r7[-16]
80028654:	ee f8 ff ec 	ld.w	r8,r7[-20]
80028658:	f1 38 00 08 	ld.ub	r8,r8[8]
8002865c:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80028660:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
80028664:	f2 08 15 02 	lsl	r8,r9,0x2
80028668:	ee 08 00 08 	add	r8,r7,r8
8002866c:	f0 f9 ff f4 	ld.w	r9,r8[-12]
80028670:	f3 da d1 04 	bfins	r9,r10,0x8,0x4
80028674:	f1 49 ff f4 	st.w	r8[-12],r9
  u_avr32_scif_oscctrl.OSCCTRL[osc].oscen = ENABLE;
80028678:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002867c:	a3 68       	lsl	r8,0x2
8002867e:	ee 08 00 08 	add	r8,r7,r8
80028682:	f0 f9 ff f4 	ld.w	r9,r8[-12]
80028686:	30 1a       	mov	r10,1
80028688:	f3 da d2 01 	bfins	r9,r10,0x10,0x1
8002868c:	f1 49 ff f4 	st.w	r8[-12],r9
  AVR32_ENTER_CRITICAL_REGION( );
80028690:	e1 b8 00 00 	mfsr	r8,0x0
80028694:	10 9c       	mov	r12,r8
80028696:	c3 9f       	rcall	80028508 <cpu_irq_is_enabled_flags>
80028698:	18 98       	mov	r8,r12
8002869a:	ef 68 ff ff 	st.b	r7[-1],r8
8002869e:	d3 03       	ssrf	0x10
  // Unlock the write-protected OSCCTRL0 register
  SCIF_UNLOCK(AVR32_SCIF_OSCCTRL + 4*osc);    
800286a0:	fe 78 08 00 	mov	r8,-63488
800286a4:	ee f9 ff f0 	ld.w	r9,r7[-16]
800286a8:	2f 79       	sub	r9,-9
800286aa:	a3 69       	lsl	r9,0x2
800286ac:	ea 19 aa 00 	orh	r9,0xaa00
800286b0:	91 69       	st.w	r8[0x18],r9
  // Write Back
  AVR32_SCIF.OSCCTRL[osc] = u_avr32_scif_oscctrl.OSCCTRL[osc];
800286b2:	fe 79 08 00 	mov	r9,-63488
800286b6:	ee fa ff f0 	ld.w	r10,r7[-16]
800286ba:	ee f8 ff f0 	ld.w	r8,r7[-16]
800286be:	2f 7a       	sub	r10,-9
800286c0:	a3 68       	lsl	r8,0x2
800286c2:	ee 08 00 08 	add	r8,r7,r8
800286c6:	f0 f8 ff f4 	ld.w	r8,r8[-12]
800286ca:	f2 0a 09 28 	st.w	r9[r10<<0x2],r8
  AVR32_LEAVE_CRITICAL_REGION( );
800286ce:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800286d2:	30 08       	mov	r8,0
800286d4:	f0 09 18 00 	cp.b	r9,r8
800286d8:	c0 20       	breq	800286dc <scif_start_osc+0x112>
800286da:	d5 03       	csrf	0x10

  if(true == wait_for_ready)
800286dc:	ef 39 ff e8 	ld.ub	r9,r7[-24]
800286e0:	30 08       	mov	r8,0
800286e2:	f0 09 18 00 	cp.b	r9,r8
800286e6:	c0 80       	breq	800286f6 <scif_start_osc+0x12c>
  {
    // Wait until OSC0 is stable and ready to be used.
    if(scif_pclksr_statushigh_wait(AVR32_SCIF_PCLKSR_OSC0RDY_MASK))
800286e8:	30 1c       	mov	r12,1
800286ea:	c1 ff       	rcall	80028528 <scif_pclksr_statushigh_wait>
800286ec:	18 98       	mov	r8,r12
800286ee:	58 08       	cp.w	r8,0
800286f0:	c0 30       	breq	800286f6 <scif_start_osc+0x12c>
      return -1;
800286f2:	3f f8       	mov	r8,-1
800286f4:	c0 28       	rjmp	800286f8 <scif_start_osc+0x12e>
  }
  return PASS;
800286f6:	30 08       	mov	r8,0
}
800286f8:	10 9c       	mov	r12,r8
800286fa:	2f ad       	sub	sp,-24
800286fc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80028700:	80 02       	ld.sh	r2,r0[0x0]
80028702:	84 58       	ld.sh	r8,r2[0xa]

80028704 <scif_is_osc_ready>:


bool scif_is_osc_ready(scif_osc_t osc)
{
80028704:	eb cd 40 80 	pushm	r7,lr
80028708:	1a 97       	mov	r7,sp
8002870a:	20 1d       	sub	sp,4
8002870c:	ef 4c ff fc 	st.w	r7[-4],r12
  if (osc == SCIF_OSC0)
80028710:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028714:	58 08       	cp.w	r8,0
80028716:	c0 81       	brne	80028726 <scif_is_osc_ready+0x22>
  {
    return((AVR32_SCIF.pclksr & AVR32_SCIF_PCLKSR_OSC0RDY_MASK)>>AVR32_SCIF_PCLKSR_OSC0RDY_OFFSET);
80028718:	fe 78 08 00 	mov	r8,-63488
8002871c:	70 58       	ld.w	r8,r8[0x14]
8002871e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80028722:	5c 58       	castu.b	r8
80028724:	c0 98       	rjmp	80028736 <scif_is_osc_ready+0x32>
  }
  else
  {
    return((AVR32_SCIF.pclksr & AVR32_SCIF_PCLKSR_OSC1RDY_MASK)>>AVR32_SCIF_PCLKSR_OSC1RDY_OFFSET);  
80028726:	fe 78 08 00 	mov	r8,-63488
8002872a:	70 58       	ld.w	r8,r8[0x14]
8002872c:	e2 18 00 02 	andl	r8,0x2,COH
80028730:	a1 98       	lsr	r8,0x1
80028732:	5f 18       	srne	r8
80028734:	5c 58       	castu.b	r8
  }
}
80028736:	10 9c       	mov	r12,r8
80028738:	2f fd       	sub	sp,-4
8002873a:	e3 cd 80 80 	ldm	sp++,r7,pc

8002873e <scif_stop_osc>:


long int scif_stop_osc(scif_osc_t osc)
{
8002873e:	eb cd 40 c0 	pushm	r6-r7,lr
80028742:	1a 97       	mov	r7,sp
80028744:	20 3d       	sub	sp,12
80028746:	49 d6       	lddpc	r6,800287b8 <scif_stop_osc+0x7a>
80028748:	1e 26       	rsub	r6,pc
8002874a:	ef 4c ff f4 	st.w	r7[-12],r12

  unsigned long temp;

  temp = AVR32_SCIF.oscctrl[osc];
8002874e:	fe 78 08 00 	mov	r8,-63488
80028752:	ee f9 ff f4 	ld.w	r9,r7[-12]
80028756:	2f 79       	sub	r9,-9
80028758:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8002875c:	ef 48 ff f8 	st.w	r7[-8],r8
  temp &= ~AVR32_SCIF_OSCCTRL_OSCEN_MASK;
80028760:	ee f8 ff f8 	ld.w	r8,r7[-8]
80028764:	b1 c8       	cbr	r8,0x10
80028766:	ef 48 ff f8 	st.w	r7[-8],r8
  AVR32_ENTER_CRITICAL_REGION( );
8002876a:	e1 b8 00 00 	mfsr	r8,0x0
8002876e:	10 9c       	mov	r12,r8
80028770:	cc ce       	rcall	80028508 <cpu_irq_is_enabled_flags>
80028772:	18 98       	mov	r8,r12
80028774:	ef 68 ff ff 	st.b	r7[-1],r8
80028778:	d3 03       	ssrf	0x10
  // Unlock the write-protected OSCCTRL0 register
  SCIF_UNLOCK(AVR32_SCIF_OSCCTRL + 4*osc);
8002877a:	fe 78 08 00 	mov	r8,-63488
8002877e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80028782:	2f 79       	sub	r9,-9
80028784:	a3 69       	lsl	r9,0x2
80028786:	ea 19 aa 00 	orh	r9,0xaa00
8002878a:	91 69       	st.w	r8[0x18],r9
  // Stop OSC0.
  AVR32_SCIF.oscctrl[osc] = temp;
8002878c:	fe 78 08 00 	mov	r8,-63488
80028790:	ee f9 ff f4 	ld.w	r9,r7[-12]
80028794:	2f 79       	sub	r9,-9
80028796:	ee fa ff f8 	ld.w	r10,r7[-8]
8002879a:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
  AVR32_LEAVE_CRITICAL_REGION( );
8002879e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800287a2:	30 08       	mov	r8,0
800287a4:	f0 09 18 00 	cp.b	r9,r8
800287a8:	c0 20       	breq	800287ac <scif_stop_osc+0x6e>
800287aa:	d5 03       	csrf	0x10
      
  return PASS;
800287ac:	30 08       	mov	r8,0
}
800287ae:	10 9c       	mov	r12,r8
800287b0:	2f dd       	sub	sp,-12
800287b2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800287b6:	00 00       	add	r0,r0
800287b8:	80 02       	ld.sh	r2,r0[0x0]
800287ba:	85 cc       	st.w	r2[0x30],r12

800287bc <scif_configure_osc_crystalmode>:


long int scif_configure_osc_crystalmode(scif_osc_t osc, unsigned int fcrystal)
{
800287bc:	eb cd 40 c0 	pushm	r6-r7,lr
800287c0:	1a 97       	mov	r7,sp
800287c2:	20 5d       	sub	sp,20
800287c4:	4d 46       	lddpc	r6,80028914 <scif_configure_osc_crystalmode+0x158>
800287c6:	1e 26       	rsub	r6,pc
800287c8:	ef 4c ff f0 	st.w	r7[-16],r12
800287cc:	ef 4b ff ec 	st.w	r7[-20],r11
  u_avr32_scif_oscctrl_t   u_avr32_scif_oscctrl;
  
  if (osc == SCIF_OSC0)
800287d0:	ee f8 ff f0 	ld.w	r8,r7[-16]
800287d4:	58 08       	cp.w	r8,0
800287d6:	c4 e1       	brne	80028872 <scif_configure_osc_crystalmode+0xb6>
  {    
    // Read Register
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC0] = AVR32_SCIF.OSCCTRL[SCIF_OSC0] ;    
800287d8:	fe 78 08 00 	mov	r8,-63488
800287dc:	70 98       	ld.w	r8,r8[0x24]
800287de:	ef 48 ff f4 	st.w	r7[-12],r8
    // Modify : Configure the oscillator mode to crystal and set the gain according to the
    // cyrstal frequency.
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC0].mode = SCIF_OSC_MODE_2PIN_CRYSTAL;
800287e2:	ee f8 ff f4 	ld.w	r8,r7[-12]
800287e6:	30 19       	mov	r9,1
800287e8:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
800287ec:	ef 48 ff f4 	st.w	r7[-12],r8
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC0].gain = (fcrystal <  900000) ? AVR32_SCIF_OSCCTRL0_GAIN_G0 :
800287f0:	ee f8 ff ec 	ld.w	r8,r7[-20]
800287f4:	ec 58 bb 9f 	cp.w	r8,899999
800287f8:	e0 88 00 1b 	brls	8002882e <scif_configure_osc_crystalmode+0x72>
800287fc:	ee f8 ff ec 	ld.w	r8,r7[-20]
80028800:	e0 69 c6 bf 	mov	r9,50879
80028804:	ea 19 00 2d 	orh	r9,0x2d
80028808:	12 38       	cp.w	r8,r9
8002880a:	e0 88 00 0f 	brls	80028828 <scif_configure_osc_crystalmode+0x6c>
8002880e:	ee f8 ff ec 	ld.w	r8,r7[-20]
80028812:	e0 69 11 ff 	mov	r9,4607
80028816:	ea 19 00 7a 	orh	r9,0x7a
8002881a:	12 38       	cp.w	r8,r9
8002881c:	e0 8b 00 04 	brhi	80028824 <scif_configure_osc_crystalmode+0x68>
80028820:	30 28       	mov	r8,2
80028822:	c0 28       	rjmp	80028826 <scif_configure_osc_crystalmode+0x6a>
80028824:	30 38       	mov	r8,3
80028826:	c0 28       	rjmp	8002882a <scif_configure_osc_crystalmode+0x6e>
80028828:	30 18       	mov	r8,1
8002882a:	10 99       	mov	r9,r8
8002882c:	c0 28       	rjmp	80028830 <scif_configure_osc_crystalmode+0x74>
8002882e:	30 09       	mov	r9,0
80028830:	ee f8 ff f4 	ld.w	r8,r7[-12]
80028834:	f1 d9 d0 22 	bfins	r8,r9,0x1,0x2
80028838:	ef 48 ff f4 	st.w	r7[-12],r8
                                                   (fcrystal < 3000000) ? AVR32_SCIF_OSCCTRL0_GAIN_G1 :
                                                   (fcrystal < 8000000) ? AVR32_SCIF_OSCCTRL0_GAIN_G2 :
                                                                          AVR32_SCIF_OSCCTRL0_GAIN_G3;
    AVR32_ENTER_CRITICAL_REGION( );
8002883c:	e1 b8 00 00 	mfsr	r8,0x0
80028840:	10 9c       	mov	r12,r8
80028842:	c6 3e       	rcall	80028508 <cpu_irq_is_enabled_flags>
80028844:	18 98       	mov	r8,r12
80028846:	ef 68 ff fe 	st.b	r7[-2],r8
8002884a:	d3 03       	ssrf	0x10
    // Unlock the write-protected OSCCTRL0 register
    SCIF_UNLOCK(AVR32_SCIF_OSCCTRL);
8002884c:	fe 78 08 00 	mov	r8,-63488
80028850:	32 49       	mov	r9,36
80028852:	ea 19 aa 00 	orh	r9,0xaa00
80028856:	91 69       	st.w	r8[0x18],r9
    // Write Back
    AVR32_SCIF.OSCCTRL[SCIF_OSC0] = u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC0];
80028858:	fe 78 08 00 	mov	r8,-63488
8002885c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80028860:	91 99       	st.w	r8[0x24],r9
    AVR32_LEAVE_CRITICAL_REGION( );
80028862:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80028866:	30 08       	mov	r8,0
80028868:	f0 09 18 00 	cp.b	r9,r8
8002886c:	c4 f0       	breq	8002890a <scif_configure_osc_crystalmode+0x14e>
8002886e:	d5 03       	csrf	0x10
80028870:	c4 d8       	rjmp	8002890a <scif_configure_osc_crystalmode+0x14e>
  }
  else
  { 
    // Read Register
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC1] = AVR32_SCIF.OSCCTRL[SCIF_OSC1] ;    
80028872:	fe 78 08 00 	mov	r8,-63488
80028876:	70 a8       	ld.w	r8,r8[0x28]
80028878:	ef 48 ff f8 	st.w	r7[-8],r8
    // Modify : Configure the oscillator mode to crystal and set the gain according to the
    // cyrstal frequency.
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC1].mode = SCIF_OSC_MODE_2PIN_CRYSTAL;
8002887c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80028880:	30 19       	mov	r9,1
80028882:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
80028886:	ef 48 ff f8 	st.w	r7[-8],r8
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC1].gain = (fcrystal <  900000) ? AVR32_SCIF_OSCCTRL1_GAIN_G0 :
8002888a:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002888e:	ec 58 bb 9f 	cp.w	r8,899999
80028892:	e0 88 00 1b 	brls	800288c8 <scif_configure_osc_crystalmode+0x10c>
80028896:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002889a:	e0 69 c6 bf 	mov	r9,50879
8002889e:	ea 19 00 2d 	orh	r9,0x2d
800288a2:	12 38       	cp.w	r8,r9
800288a4:	e0 88 00 0f 	brls	800288c2 <scif_configure_osc_crystalmode+0x106>
800288a8:	ee f8 ff ec 	ld.w	r8,r7[-20]
800288ac:	e0 69 11 ff 	mov	r9,4607
800288b0:	ea 19 00 7a 	orh	r9,0x7a
800288b4:	12 38       	cp.w	r8,r9
800288b6:	e0 8b 00 04 	brhi	800288be <scif_configure_osc_crystalmode+0x102>
800288ba:	30 28       	mov	r8,2
800288bc:	c0 28       	rjmp	800288c0 <scif_configure_osc_crystalmode+0x104>
800288be:	30 38       	mov	r8,3
800288c0:	c0 28       	rjmp	800288c4 <scif_configure_osc_crystalmode+0x108>
800288c2:	30 18       	mov	r8,1
800288c4:	10 99       	mov	r9,r8
800288c6:	c0 28       	rjmp	800288ca <scif_configure_osc_crystalmode+0x10e>
800288c8:	30 09       	mov	r9,0
800288ca:	ee f8 ff f8 	ld.w	r8,r7[-8]
800288ce:	f1 d9 d0 22 	bfins	r8,r9,0x1,0x2
800288d2:	ef 48 ff f8 	st.w	r7[-8],r8
                                                   (fcrystal < 3000000) ? AVR32_SCIF_OSCCTRL1_GAIN_G1 :
                                                   (fcrystal < 8000000) ? AVR32_SCIF_OSCCTRL1_GAIN_G2 :
                                                                          AVR32_SCIF_OSCCTRL1_GAIN_G3;
    AVR32_ENTER_CRITICAL_REGION( );
800288d6:	e1 b8 00 00 	mfsr	r8,0x0
800288da:	10 9c       	mov	r12,r8
800288dc:	c1 6e       	rcall	80028508 <cpu_irq_is_enabled_flags>
800288de:	18 98       	mov	r8,r12
800288e0:	ef 68 ff ff 	st.b	r7[-1],r8
800288e4:	d3 03       	ssrf	0x10
    // Unlock the write-protected OSCCTRL1 register
    SCIF_UNLOCK(AVR32_SCIF_OSCCTRL + 4);
800288e6:	fe 78 08 00 	mov	r8,-63488
800288ea:	32 89       	mov	r9,40
800288ec:	ea 19 aa 00 	orh	r9,0xaa00
800288f0:	91 69       	st.w	r8[0x18],r9
    // Write Back
    AVR32_SCIF.OSCCTRL[SCIF_OSC1] = u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC1];
800288f2:	fe 78 08 00 	mov	r8,-63488
800288f6:	ee f9 ff f8 	ld.w	r9,r7[-8]
800288fa:	91 a9       	st.w	r8[0x28],r9
    AVR32_LEAVE_CRITICAL_REGION( );
800288fc:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80028900:	30 08       	mov	r8,0
80028902:	f0 09 18 00 	cp.b	r9,r8
80028906:	c0 20       	breq	8002890a <scif_configure_osc_crystalmode+0x14e>
80028908:	d5 03       	csrf	0x10
  }

  return PASS;
8002890a:	30 08       	mov	r8,0
}
8002890c:	10 9c       	mov	r12,r8
8002890e:	2f bd       	sub	sp,-20
80028910:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80028914:	80 02       	ld.sh	r2,r0[0x0]
80028916:	86 4a       	ld.sh	r10,r3[0x8]

80028918 <scif_configure_osc_extmode>:

long int scif_configure_osc_extmode(scif_osc_t osc)
{
80028918:	eb cd 40 c0 	pushm	r6-r7,lr
8002891c:	1a 97       	mov	r7,sp
8002891e:	20 4d       	sub	sp,16
80028920:	4a 56       	lddpc	r6,800289b4 <scif_configure_osc_extmode+0x9c>
80028922:	1e 26       	rsub	r6,pc
80028924:	ef 4c ff f0 	st.w	r7[-16],r12
  u_avr32_scif_oscctrl_t   u_avr32_scif_oscctrl;
  
      // Read Register
    u_avr32_scif_oscctrl.OSCCTRL[osc] = AVR32_SCIF.OSCCTRL[osc] ;
80028928:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002892c:	fe 79 08 00 	mov	r9,-63488
80028930:	ee fa ff f0 	ld.w	r10,r7[-16]
80028934:	a3 68       	lsl	r8,0x2
80028936:	ee 08 00 08 	add	r8,r7,r8
8002893a:	2f 7a       	sub	r10,-9
8002893c:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
80028940:	f1 49 ff f4 	st.w	r8[-12],r9
    // Modify : Configure the oscillator mode to crystal and set the gain according to the
    // cyrstal frequency.
    u_avr32_scif_oscctrl.OSCCTRL[osc].mode = SCIF_OSC_MODE_EXT_CLK;
80028944:	ee f8 ff f0 	ld.w	r8,r7[-16]
80028948:	a3 68       	lsl	r8,0x2
8002894a:	ee 08 00 08 	add	r8,r7,r8
8002894e:	f0 f9 ff f4 	ld.w	r9,r8[-12]
80028952:	30 0a       	mov	r10,0
80028954:	f3 da d0 01 	bfins	r9,r10,0x0,0x1
80028958:	f1 49 ff f4 	st.w	r8[-12],r9
    AVR32_ENTER_CRITICAL_REGION( );
8002895c:	e1 b8 00 00 	mfsr	r8,0x0
80028960:	10 9c       	mov	r12,r8
80028962:	fe b0 fd d3 	rcall	80028508 <cpu_irq_is_enabled_flags>
80028966:	18 98       	mov	r8,r12
80028968:	ef 68 ff ff 	st.b	r7[-1],r8
8002896c:	d3 03       	ssrf	0x10
    // Unlock the write-protected OSCCTRL0 register
    SCIF_UNLOCK(AVR32_SCIF_OSCCTRL + 4*osc);
8002896e:	fe 78 08 00 	mov	r8,-63488
80028972:	ee f9 ff f0 	ld.w	r9,r7[-16]
80028976:	2f 79       	sub	r9,-9
80028978:	a3 69       	lsl	r9,0x2
8002897a:	ea 19 aa 00 	orh	r9,0xaa00
8002897e:	91 69       	st.w	r8[0x18],r9
    // Write Back
    AVR32_SCIF.OSCCTRL[osc] = u_avr32_scif_oscctrl.OSCCTRL[osc];
80028980:	fe 79 08 00 	mov	r9,-63488
80028984:	ee fa ff f0 	ld.w	r10,r7[-16]
80028988:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002898c:	2f 7a       	sub	r10,-9
8002898e:	a3 68       	lsl	r8,0x2
80028990:	ee 08 00 08 	add	r8,r7,r8
80028994:	f0 f8 ff f4 	ld.w	r8,r8[-12]
80028998:	f2 0a 09 28 	st.w	r9[r10<<0x2],r8
    AVR32_LEAVE_CRITICAL_REGION( );
8002899c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800289a0:	30 08       	mov	r8,0
800289a2:	f0 09 18 00 	cp.b	r9,r8
800289a6:	c0 20       	breq	800289aa <scif_configure_osc_extmode+0x92>
800289a8:	d5 03       	csrf	0x10

  return PASS;
800289aa:	30 08       	mov	r8,0
}
800289ac:	10 9c       	mov	r12,r8
800289ae:	2f cd       	sub	sp,-16
800289b0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800289b4:	80 02       	ld.sh	r2,r0[0x0]
800289b6:	87 a6       	st.w	r3[0x28],r6

800289b8 <scif_enable_osc>:

long int scif_enable_osc(scif_osc_t osc, unsigned int startup, bool wait_for_ready)
{
800289b8:	eb cd 40 c0 	pushm	r6-r7,lr
800289bc:	1a 97       	mov	r7,sp
800289be:	20 6d       	sub	sp,24
800289c0:	4b 86       	lddpc	r6,80028aa0 <scif_enable_osc+0xe8>
800289c2:	1e 26       	rsub	r6,pc
800289c4:	ef 4c ff f0 	st.w	r7[-16],r12
800289c8:	ef 4b ff ec 	st.w	r7[-20],r11
800289cc:	14 98       	mov	r8,r10
800289ce:	ef 68 ff e8 	st.b	r7[-24],r8

  u_avr32_scif_oscctrl_t   u_avr32_scif_oscctrl;

  // Read Register
  u_avr32_scif_oscctrl.OSCCTRL[osc] = AVR32_SCIF.OSCCTRL[osc] ;      
800289d2:	ee f8 ff f0 	ld.w	r8,r7[-16]
800289d6:	fe 79 08 00 	mov	r9,-63488
800289da:	ee fa ff f0 	ld.w	r10,r7[-16]
800289de:	a3 68       	lsl	r8,0x2
800289e0:	ee 08 00 08 	add	r8,r7,r8
800289e4:	2f 7a       	sub	r10,-9
800289e6:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
800289ea:	f1 49 ff f4 	st.w	r8[-12],r9
  // Modify: Configure the oscillator startup and enable the osc.
  u_avr32_scif_oscctrl.OSCCTRL[osc].startup = startup;
800289ee:	ee f9 ff f0 	ld.w	r9,r7[-16]
800289f2:	ee f8 ff ec 	ld.w	r8,r7[-20]
800289f6:	5c 58       	castu.b	r8
800289f8:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
800289fc:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
80028a00:	f2 08 15 02 	lsl	r8,r9,0x2
80028a04:	ee 08 00 08 	add	r8,r7,r8
80028a08:	f0 f9 ff f4 	ld.w	r9,r8[-12]
80028a0c:	f3 da d1 04 	bfins	r9,r10,0x8,0x4
80028a10:	f1 49 ff f4 	st.w	r8[-12],r9
  u_avr32_scif_oscctrl.OSCCTRL[osc].oscen = ENABLE;
80028a14:	ee f8 ff f0 	ld.w	r8,r7[-16]
80028a18:	a3 68       	lsl	r8,0x2
80028a1a:	ee 08 00 08 	add	r8,r7,r8
80028a1e:	f0 f9 ff f4 	ld.w	r9,r8[-12]
80028a22:	30 1a       	mov	r10,1
80028a24:	f3 da d2 01 	bfins	r9,r10,0x10,0x1
80028a28:	f1 49 ff f4 	st.w	r8[-12],r9
  AVR32_ENTER_CRITICAL_REGION( );
80028a2c:	e1 b8 00 00 	mfsr	r8,0x0
80028a30:	10 9c       	mov	r12,r8
80028a32:	fe b0 fd 6b 	rcall	80028508 <cpu_irq_is_enabled_flags>
80028a36:	18 98       	mov	r8,r12
80028a38:	ef 68 ff ff 	st.b	r7[-1],r8
80028a3c:	d3 03       	ssrf	0x10
  // Unlock the write-protected OSCCTRL0 register
  SCIF_UNLOCK(AVR32_SCIF_OSCCTRL + 4*osc);
80028a3e:	fe 78 08 00 	mov	r8,-63488
80028a42:	ee f9 ff f0 	ld.w	r9,r7[-16]
80028a46:	2f 79       	sub	r9,-9
80028a48:	a3 69       	lsl	r9,0x2
80028a4a:	ea 19 aa 00 	orh	r9,0xaa00
80028a4e:	91 69       	st.w	r8[0x18],r9
  // Write Back
  AVR32_SCIF.OSCCTRL[osc] = u_avr32_scif_oscctrl.OSCCTRL[osc];
80028a50:	fe 79 08 00 	mov	r9,-63488
80028a54:	ee fa ff f0 	ld.w	r10,r7[-16]
80028a58:	ee f8 ff f0 	ld.w	r8,r7[-16]
80028a5c:	2f 7a       	sub	r10,-9
80028a5e:	a3 68       	lsl	r8,0x2
80028a60:	ee 08 00 08 	add	r8,r7,r8
80028a64:	f0 f8 ff f4 	ld.w	r8,r8[-12]
80028a68:	f2 0a 09 28 	st.w	r9[r10<<0x2],r8
  AVR32_LEAVE_CRITICAL_REGION( );
80028a6c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80028a70:	30 08       	mov	r8,0
80028a72:	f0 09 18 00 	cp.b	r9,r8
80028a76:	c0 20       	breq	80028a7a <scif_enable_osc+0xc2>
80028a78:	d5 03       	csrf	0x10

  if(true == wait_for_ready)
80028a7a:	ef 39 ff e8 	ld.ub	r9,r7[-24]
80028a7e:	30 08       	mov	r8,0
80028a80:	f0 09 18 00 	cp.b	r9,r8
80028a84:	c0 90       	breq	80028a96 <scif_enable_osc+0xde>
  {
    // Wait until OSC0 is stable and ready to be used.
    if(scif_pclksr_statushigh_wait(AVR32_SCIF_PCLKSR_OSC0RDY_MASK))
80028a86:	30 1c       	mov	r12,1
80028a88:	fe b0 fd 50 	rcall	80028528 <scif_pclksr_statushigh_wait>
80028a8c:	18 98       	mov	r8,r12
80028a8e:	58 08       	cp.w	r8,0
80028a90:	c0 30       	breq	80028a96 <scif_enable_osc+0xde>
      return -1;
80028a92:	3f f8       	mov	r8,-1
80028a94:	c0 28       	rjmp	80028a98 <scif_enable_osc+0xe0>
  }
      
  return PASS;
80028a96:	30 08       	mov	r8,0
}
80028a98:	10 9c       	mov	r12,r8
80028a9a:	2f ad       	sub	sp,-24
80028a9c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80028aa0:	80 02       	ld.sh	r2,r0[0x0]
80028aa2:	88 46       	ld.sh	r6,r4[0x8]

80028aa4 <scif_enable_extosc>:

long int scif_enable_extosc(scif_osc_t osc)
{
80028aa4:	eb cd 40 c0 	pushm	r6-r7,lr
80028aa8:	1a 97       	mov	r7,sp
80028aaa:	20 4d       	sub	sp,16
80028aac:	4a 56       	lddpc	r6,80028b40 <scif_enable_extosc+0x9c>
80028aae:	1e 26       	rsub	r6,pc
80028ab0:	ef 4c ff f0 	st.w	r7[-16],r12

  u_avr32_scif_oscctrl_t   u_avr32_scif_oscctrl;

  // Read Register
  u_avr32_scif_oscctrl.OSCCTRL[osc] = AVR32_SCIF.OSCCTRL[osc] ;    
80028ab4:	ee f8 ff f0 	ld.w	r8,r7[-16]
80028ab8:	fe 79 08 00 	mov	r9,-63488
80028abc:	ee fa ff f0 	ld.w	r10,r7[-16]
80028ac0:	a3 68       	lsl	r8,0x2
80028ac2:	ee 08 00 08 	add	r8,r7,r8
80028ac6:	2f 7a       	sub	r10,-9
80028ac8:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
80028acc:	f1 49 ff f4 	st.w	r8[-12],r9
  // Modify : Enable the osc.
  u_avr32_scif_oscctrl.OSCCTRL[osc].oscen = ENABLE;
80028ad0:	ee f8 ff f0 	ld.w	r8,r7[-16]
80028ad4:	a3 68       	lsl	r8,0x2
80028ad6:	ee 08 00 08 	add	r8,r7,r8
80028ada:	f0 f9 ff f4 	ld.w	r9,r8[-12]
80028ade:	30 1a       	mov	r10,1
80028ae0:	f3 da d2 01 	bfins	r9,r10,0x10,0x1
80028ae4:	f1 49 ff f4 	st.w	r8[-12],r9
  AVR32_ENTER_CRITICAL_REGION( );
80028ae8:	e1 b8 00 00 	mfsr	r8,0x0
80028aec:	10 9c       	mov	r12,r8
80028aee:	fe b0 fd 0d 	rcall	80028508 <cpu_irq_is_enabled_flags>
80028af2:	18 98       	mov	r8,r12
80028af4:	ef 68 ff ff 	st.b	r7[-1],r8
80028af8:	d3 03       	ssrf	0x10
  // Unlock the write-protected OSCCTRL0 register
  SCIF_UNLOCK(AVR32_SCIF_OSCCTRL + 4*osc);
80028afa:	fe 78 08 00 	mov	r8,-63488
80028afe:	ee f9 ff f0 	ld.w	r9,r7[-16]
80028b02:	2f 79       	sub	r9,-9
80028b04:	a3 69       	lsl	r9,0x2
80028b06:	ea 19 aa 00 	orh	r9,0xaa00
80028b0a:	91 69       	st.w	r8[0x18],r9
  // Write Back
  AVR32_SCIF.OSCCTRL[osc] = u_avr32_scif_oscctrl.OSCCTRL[osc];
80028b0c:	fe 79 08 00 	mov	r9,-63488
80028b10:	ee fa ff f0 	ld.w	r10,r7[-16]
80028b14:	ee f8 ff f0 	ld.w	r8,r7[-16]
80028b18:	2f 7a       	sub	r10,-9
80028b1a:	a3 68       	lsl	r8,0x2
80028b1c:	ee 08 00 08 	add	r8,r7,r8
80028b20:	f0 f8 ff f4 	ld.w	r8,r8[-12]
80028b24:	f2 0a 09 28 	st.w	r9[r10<<0x2],r8
  AVR32_LEAVE_CRITICAL_REGION( );
80028b28:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80028b2c:	30 08       	mov	r8,0
80028b2e:	f0 09 18 00 	cp.b	r9,r8
80028b32:	c0 20       	breq	80028b36 <scif_enable_extosc+0x92>
80028b34:	d5 03       	csrf	0x10
  
  return PASS;
80028b36:	30 08       	mov	r8,0
}
80028b38:	10 9c       	mov	r12,r8
80028b3a:	2f cd       	sub	sp,-16
80028b3c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80028b40:	80 02       	ld.sh	r2,r0[0x0]
80028b42:	89 32       	st.w	r4[0xc],r2

80028b44 <scif_pll_setup>:

/**
 ** PLL0/PLL1 Functions
 **/
long int scif_pll_setup(scif_pll_t pll, const scif_pll_opt_t opt)
{
80028b44:	eb cd 40 c0 	pushm	r6-r7,lr
80028b48:	1a 97       	mov	r7,sp
80028b4a:	20 4d       	sub	sp,16
80028b4c:	4d 46       	lddpc	r6,80028c9c <scif_pll_setup+0x158>
80028b4e:	1e 26       	rsub	r6,pc
80028b50:	ee c8 ff f4 	sub	r8,r7,-12
80028b54:	ef 4c ff f0 	st.w	r7[-16],r12

  u_avr32_scif_pll_t   u_avr32_scif_pll;

  // Read Register
  u_avr32_scif_pll.PLL[pll] = AVR32_SCIF.PLL[pll] ;
80028b58:	ee f9 ff f0 	ld.w	r9,r7[-16]
80028b5c:	fe 7a 08 00 	mov	r10,-63488
80028b60:	ee fb ff f0 	ld.w	r11,r7[-16]
80028b64:	a3 69       	lsl	r9,0x2
80028b66:	ee 09 00 09 	add	r9,r7,r9
80028b6a:	2f 9b       	sub	r11,-7
80028b6c:	f4 0b 03 2a 	ld.w	r10,r10[r11<<0x2]
80028b70:	f3 4a ff f4 	st.w	r9[-12],r10
  // Modify Configuration 
  u_avr32_scif_pll.PLL[pll].pllosc  = opt.osc;
80028b74:	ee fa ff f0 	ld.w	r10,r7[-16]
80028b78:	f1 39 00 10 	ld.ub	r9,r8[16]
80028b7c:	f3 d9 c0 02 	bfextu	r9,r9,0x0,0x2
80028b80:	f7 d9 c0 08 	bfextu	r11,r9,0x0,0x8
80028b84:	f4 09 15 02 	lsl	r9,r10,0x2
80028b88:	ee 09 00 09 	add	r9,r7,r9
80028b8c:	f2 fa ff f4 	ld.w	r10,r9[-12]
80028b90:	f5 db d0 22 	bfins	r10,r11,0x1,0x2
80028b94:	f3 4a ff f4 	st.w	r9[-12],r10
  u_avr32_scif_pll.PLL[pll].pllopt  = opt.pll_freq | (opt.pll_div2 << 1) | (opt.pll_wbwdisable << 2);
80028b98:	ee fc ff f0 	ld.w	r12,r7[-16]
80028b9c:	11 89       	ld.ub	r9,r8[0x0]
80028b9e:	12 9a       	mov	r10,r9
80028ba0:	11 a9       	ld.ub	r9,r8[0x2]
80028ba2:	a1 79       	lsl	r9,0x1
80028ba4:	5c 59       	castu.b	r9
80028ba6:	f5 e9 10 09 	or	r9,r10,r9
80028baa:	f5 d9 c0 08 	bfextu	r10,r9,0x0,0x8
80028bae:	11 99       	ld.ub	r9,r8[0x1]
80028bb0:	a3 69       	lsl	r9,0x2
80028bb2:	5c 59       	castu.b	r9
80028bb4:	f5 e9 10 09 	or	r9,r10,r9
80028bb8:	5c 59       	castu.b	r9
80028bba:	5c 59       	castu.b	r9
80028bbc:	f3 d9 c0 03 	bfextu	r9,r9,0x0,0x3
80028bc0:	f7 d9 c0 08 	bfextu	r11,r9,0x0,0x8
80028bc4:	f8 09 15 02 	lsl	r9,r12,0x2
80028bc8:	ee 09 00 09 	add	r9,r7,r9
80028bcc:	f2 fa ff f4 	ld.w	r10,r9[-12]
80028bd0:	f5 db d0 63 	bfins	r10,r11,0x3,0x3
80028bd4:	f3 4a ff f4 	st.w	r9[-12],r10
  u_avr32_scif_pll.PLL[pll].plldiv   = opt.div;
80028bd8:	ee fa ff f0 	ld.w	r10,r7[-16]
80028bdc:	70 29       	ld.w	r9,r8[0x8]
80028bde:	5c 59       	castu.b	r9
80028be0:	f3 d9 c0 04 	bfextu	r9,r9,0x0,0x4
80028be4:	f7 d9 c0 08 	bfextu	r11,r9,0x0,0x8
80028be8:	f4 09 15 02 	lsl	r9,r10,0x2
80028bec:	ee 09 00 09 	add	r9,r7,r9
80028bf0:	f2 fa ff f4 	ld.w	r10,r9[-12]
80028bf4:	f5 db d1 04 	bfins	r10,r11,0x8,0x4
80028bf8:	f3 4a ff f4 	st.w	r9[-12],r10
  u_avr32_scif_pll.PLL[pll].pllmul  = opt.mul;
80028bfc:	ee fa ff f0 	ld.w	r10,r7[-16]
80028c00:	70 19       	ld.w	r9,r8[0x4]
80028c02:	5c 59       	castu.b	r9
80028c04:	f3 d9 c0 04 	bfextu	r9,r9,0x0,0x4
80028c08:	f7 d9 c0 08 	bfextu	r11,r9,0x0,0x8
80028c0c:	f4 09 15 02 	lsl	r9,r10,0x2
80028c10:	ee 09 00 09 	add	r9,r7,r9
80028c14:	f2 fa ff f4 	ld.w	r10,r9[-12]
80028c18:	f5 db d2 04 	bfins	r10,r11,0x10,0x4
80028c1c:	f3 4a ff f4 	st.w	r9[-12],r10
  u_avr32_scif_pll.PLL[pll].pllcount= opt.lockcount;
80028c20:	ee f9 ff f0 	ld.w	r9,r7[-16]
80028c24:	70 38       	ld.w	r8,r8[0xc]
80028c26:	5c 58       	castu.b	r8
80028c28:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
80028c2c:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
80028c30:	f2 08 15 02 	lsl	r8,r9,0x2
80028c34:	ee 08 00 08 	add	r8,r7,r8
80028c38:	f0 f9 ff f4 	ld.w	r9,r8[-12]
80028c3c:	f3 da d3 06 	bfins	r9,r10,0x18,0x6
80028c40:	f1 49 ff f4 	st.w	r8[-12],r9
  AVR32_ENTER_CRITICAL_REGION( );
80028c44:	e1 b8 00 00 	mfsr	r8,0x0
80028c48:	10 9c       	mov	r12,r8
80028c4a:	fe b0 fc 5f 	rcall	80028508 <cpu_irq_is_enabled_flags>
80028c4e:	18 98       	mov	r8,r12
80028c50:	ef 68 ff ff 	st.b	r7[-1],r8
80028c54:	d3 03       	ssrf	0x10
  // Unlock the write-protected PLL0 register
  SCIF_UNLOCK(AVR32_SCIF_PLL + 4*pll); 
80028c56:	fe 78 08 00 	mov	r8,-63488
80028c5a:	ee f9 ff f0 	ld.w	r9,r7[-16]
80028c5e:	2f 99       	sub	r9,-7
80028c60:	a3 69       	lsl	r9,0x2
80028c62:	ea 19 aa 00 	orh	r9,0xaa00
80028c66:	91 69       	st.w	r8[0x18],r9
  // Write Back
  AVR32_SCIF.PLL[pll] = u_avr32_scif_pll.PLL[pll];
80028c68:	fe 79 08 00 	mov	r9,-63488
80028c6c:	ee fa ff f0 	ld.w	r10,r7[-16]
80028c70:	ee f8 ff f0 	ld.w	r8,r7[-16]
80028c74:	2f 9a       	sub	r10,-7
80028c76:	a3 68       	lsl	r8,0x2
80028c78:	ee 08 00 08 	add	r8,r7,r8
80028c7c:	f0 f8 ff f4 	ld.w	r8,r8[-12]
80028c80:	f2 0a 09 28 	st.w	r9[r10<<0x2],r8
  AVR32_LEAVE_CRITICAL_REGION( );
80028c84:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80028c88:	30 08       	mov	r8,0
80028c8a:	f0 09 18 00 	cp.b	r9,r8
80028c8e:	c0 20       	breq	80028c92 <scif_pll_setup+0x14e>
80028c90:	d5 03       	csrf	0x10

  return PASS;
80028c92:	30 08       	mov	r8,0
}
80028c94:	10 9c       	mov	r12,r8
80028c96:	2f cd       	sub	sp,-16
80028c98:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80028c9c:	80 02       	ld.sh	r2,r0[0x0]
80028c9e:	89 d2       	st.w	r4[0x34],r2

80028ca0 <scif_pll_enable>:

long int scif_pll_enable(scif_pll_t pll)
{
80028ca0:	eb cd 40 c0 	pushm	r6-r7,lr
80028ca4:	1a 97       	mov	r7,sp
80028ca6:	20 4d       	sub	sp,16
80028ca8:	4a 56       	lddpc	r6,80028d3c <scif_pll_enable+0x9c>
80028caa:	1e 26       	rsub	r6,pc
80028cac:	ef 4c ff f0 	st.w	r7[-16],r12

  u_avr32_scif_pll_t   u_avr32_scif_pll;
  
    // Read Register
    u_avr32_scif_pll.PLL[pll] = AVR32_SCIF.PLL[pll] ;
80028cb0:	ee f8 ff f0 	ld.w	r8,r7[-16]
80028cb4:	fe 79 08 00 	mov	r9,-63488
80028cb8:	ee fa ff f0 	ld.w	r10,r7[-16]
80028cbc:	a3 68       	lsl	r8,0x2
80028cbe:	ee 08 00 08 	add	r8,r7,r8
80028cc2:	2f 9a       	sub	r10,-7
80028cc4:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
80028cc8:	f1 49 ff f4 	st.w	r8[-12],r9
    // Modify Configuration 
    u_avr32_scif_pll.PLL[pll].pllen = ENABLE;
80028ccc:	ee f8 ff f0 	ld.w	r8,r7[-16]
80028cd0:	a3 68       	lsl	r8,0x2
80028cd2:	ee 08 00 08 	add	r8,r7,r8
80028cd6:	f0 f9 ff f4 	ld.w	r9,r8[-12]
80028cda:	30 1a       	mov	r10,1
80028cdc:	f3 da d0 01 	bfins	r9,r10,0x0,0x1
80028ce0:	f1 49 ff f4 	st.w	r8[-12],r9
    AVR32_ENTER_CRITICAL_REGION( );
80028ce4:	e1 b8 00 00 	mfsr	r8,0x0
80028ce8:	10 9c       	mov	r12,r8
80028cea:	fe b0 fc 0f 	rcall	80028508 <cpu_irq_is_enabled_flags>
80028cee:	18 98       	mov	r8,r12
80028cf0:	ef 68 ff ff 	st.b	r7[-1],r8
80028cf4:	d3 03       	ssrf	0x10
    // Unlock the write-protected PLL0 register
    SCIF_UNLOCK(AVR32_SCIF_PLL + 4*pll); 
80028cf6:	fe 78 08 00 	mov	r8,-63488
80028cfa:	ee f9 ff f0 	ld.w	r9,r7[-16]
80028cfe:	2f 99       	sub	r9,-7
80028d00:	a3 69       	lsl	r9,0x2
80028d02:	ea 19 aa 00 	orh	r9,0xaa00
80028d06:	91 69       	st.w	r8[0x18],r9
    // Write Back
    AVR32_SCIF.PLL[pll] = u_avr32_scif_pll.PLL[pll];
80028d08:	fe 79 08 00 	mov	r9,-63488
80028d0c:	ee fa ff f0 	ld.w	r10,r7[-16]
80028d10:	ee f8 ff f0 	ld.w	r8,r7[-16]
80028d14:	2f 9a       	sub	r10,-7
80028d16:	a3 68       	lsl	r8,0x2
80028d18:	ee 08 00 08 	add	r8,r7,r8
80028d1c:	f0 f8 ff f4 	ld.w	r8,r8[-12]
80028d20:	f2 0a 09 28 	st.w	r9[r10<<0x2],r8
    AVR32_LEAVE_CRITICAL_REGION( );
80028d24:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80028d28:	30 08       	mov	r8,0
80028d2a:	f0 09 18 00 	cp.b	r9,r8
80028d2e:	c0 20       	breq	80028d32 <scif_pll_enable+0x92>
80028d30:	d5 03       	csrf	0x10
  
  return PASS;
80028d32:	30 08       	mov	r8,0
}
80028d34:	10 9c       	mov	r12,r8
80028d36:	2f cd       	sub	sp,-16
80028d38:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80028d3c:	80 02       	ld.sh	r2,r0[0x0]
80028d3e:	8b 2e       	st.w	r5[0x8],lr

80028d40 <scif_pll_disable>:

long int scif_pll_disable(scif_pll_t pll)
{
80028d40:	eb cd 40 c0 	pushm	r6-r7,lr
80028d44:	1a 97       	mov	r7,sp
80028d46:	20 4d       	sub	sp,16
80028d48:	4a 56       	lddpc	r6,80028ddc <scif_pll_disable+0x9c>
80028d4a:	1e 26       	rsub	r6,pc
80028d4c:	ef 4c ff f0 	st.w	r7[-16],r12

  u_avr32_scif_pll_t   u_avr32_scif_pll;

  // Read Register
  u_avr32_scif_pll.PLL[pll] = AVR32_SCIF.PLL[pll] ;
80028d50:	ee f8 ff f0 	ld.w	r8,r7[-16]
80028d54:	fe 79 08 00 	mov	r9,-63488
80028d58:	ee fa ff f0 	ld.w	r10,r7[-16]
80028d5c:	a3 68       	lsl	r8,0x2
80028d5e:	ee 08 00 08 	add	r8,r7,r8
80028d62:	2f 9a       	sub	r10,-7
80028d64:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
80028d68:	f1 49 ff f4 	st.w	r8[-12],r9
  // Modify Configuration 
  u_avr32_scif_pll.PLL[pll].pllen = DISABLE;
80028d6c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80028d70:	a3 68       	lsl	r8,0x2
80028d72:	ee 08 00 08 	add	r8,r7,r8
80028d76:	f0 f9 ff f4 	ld.w	r9,r8[-12]
80028d7a:	30 0a       	mov	r10,0
80028d7c:	f3 da d0 01 	bfins	r9,r10,0x0,0x1
80028d80:	f1 49 ff f4 	st.w	r8[-12],r9
  AVR32_ENTER_CRITICAL_REGION( );
80028d84:	e1 b8 00 00 	mfsr	r8,0x0
80028d88:	10 9c       	mov	r12,r8
80028d8a:	fe b0 fb bf 	rcall	80028508 <cpu_irq_is_enabled_flags>
80028d8e:	18 98       	mov	r8,r12
80028d90:	ef 68 ff ff 	st.b	r7[-1],r8
80028d94:	d3 03       	ssrf	0x10
  // Unlock the write-protected PLL0 register
  SCIF_UNLOCK(AVR32_SCIF_PLL + 4*pll); 
80028d96:	fe 78 08 00 	mov	r8,-63488
80028d9a:	ee f9 ff f0 	ld.w	r9,r7[-16]
80028d9e:	2f 99       	sub	r9,-7
80028da0:	a3 69       	lsl	r9,0x2
80028da2:	ea 19 aa 00 	orh	r9,0xaa00
80028da6:	91 69       	st.w	r8[0x18],r9
  // Write Back
  AVR32_SCIF.PLL[pll] = u_avr32_scif_pll.PLL[pll];
80028da8:	fe 79 08 00 	mov	r9,-63488
80028dac:	ee fa ff f0 	ld.w	r10,r7[-16]
80028db0:	ee f8 ff f0 	ld.w	r8,r7[-16]
80028db4:	2f 9a       	sub	r10,-7
80028db6:	a3 68       	lsl	r8,0x2
80028db8:	ee 08 00 08 	add	r8,r7,r8
80028dbc:	f0 f8 ff f4 	ld.w	r8,r8[-12]
80028dc0:	f2 0a 09 28 	st.w	r9[r10<<0x2],r8
  AVR32_LEAVE_CRITICAL_REGION( );
80028dc4:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80028dc8:	30 08       	mov	r8,0
80028dca:	f0 09 18 00 	cp.b	r9,r8
80028dce:	c0 20       	breq	80028dd2 <scif_pll_disable+0x92>
80028dd0:	d5 03       	csrf	0x10

  return PASS;
80028dd2:	30 08       	mov	r8,0
}
80028dd4:	10 9c       	mov	r12,r8
80028dd6:	2f cd       	sub	sp,-16
80028dd8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80028ddc:	80 02       	ld.sh	r2,r0[0x0]
80028dde:	8b ce       	st.w	r5[0x30],lr

80028de0 <scif_wait_for_pll_locked>:

long int scif_wait_for_pll_locked(scif_pll_t pll)
{
80028de0:	eb cd 40 80 	pushm	r7,lr
80028de4:	1a 97       	mov	r7,sp
80028de6:	20 1d       	sub	sp,4
80028de8:	ef 4c ff fc 	st.w	r7[-4],r12
  
  if (pll == SCIF_PLL0)
80028dec:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028df0:	58 08       	cp.w	r8,0
80028df2:	c0 81       	brne	80028e02 <scif_wait_for_pll_locked+0x22>
  { 
      // Wait until PLL0 is stable and ready to be used.
      while(!(AVR32_SCIF.pclksr & AVR32_SCIF_PCLKSR_PLL0_LOCK_MASK));
80028df4:	fe 78 08 00 	mov	r8,-63488
80028df8:	70 58       	ld.w	r8,r8[0x14]
80028dfa:	e2 18 00 10 	andl	r8,0x10,COH
80028dfe:	cf b0       	breq	80028df4 <scif_wait_for_pll_locked+0x14>
80028e00:	c0 78       	rjmp	80028e0e <scif_wait_for_pll_locked+0x2e>
  }
  else
  {
      // Wait until PLL1 is stable and ready to be used.
      while(!(AVR32_SCIF.pclksr & AVR32_SCIF_PCLKSR_PLL1_LOCK_MASK));
80028e02:	fe 78 08 00 	mov	r8,-63488
80028e06:	70 58       	ld.w	r8,r8[0x14]
80028e08:	e2 18 00 20 	andl	r8,0x20,COH
80028e0c:	cf b0       	breq	80028e02 <scif_wait_for_pll_locked+0x22>
  }
  
  return PASS;
80028e0e:	30 08       	mov	r8,0
}
80028e10:	10 9c       	mov	r12,r8
80028e12:	2f fd       	sub	sp,-4
80028e14:	e3 cd 80 80 	ldm	sp++,r7,pc

80028e18 <scif_start_osc32>:
/**
 ** OSC32 Functions
 **/

long int scif_start_osc32(const scif_osc32_opt_t *opt, bool wait_for_ready)
{
80028e18:	eb cd 40 c0 	pushm	r6-r7,lr
80028e1c:	1a 97       	mov	r7,sp
80028e1e:	20 4d       	sub	sp,16
80028e20:	4a f6       	lddpc	r6,80028edc <scif_start_osc32+0xc4>
80028e22:	1e 26       	rsub	r6,pc
80028e24:	ef 4c ff f4 	st.w	r7[-12],r12
80028e28:	16 98       	mov	r8,r11
80028e2a:	ef 68 ff f0 	st.b	r7[-16],r8
    return -1;
  }
#endif  // AVR32SFW_INPUT_CHECK

  // Read Register
  u_avr32_scif_oscctrl32.oscctrl32 = AVR32_SCIF.oscctrl32 ;  
80028e2e:	fe 78 08 00 	mov	r8,-63488
80028e32:	71 38       	ld.w	r8,r8[0x4c]
80028e34:	ef 48 ff f8 	st.w	r7[-8],r8
  
  // Modify : Configure & start OSC32.
  u_avr32_scif_oscctrl32.OSCCTRL32.mode = opt->mode;
80028e38:	ee f8 ff f4 	ld.w	r8,r7[-12]
80028e3c:	70 18       	ld.w	r8,r8[0x4]
80028e3e:	5c 58       	castu.b	r8
80028e40:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
80028e44:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80028e48:	ee f8 ff f8 	ld.w	r8,r7[-8]
80028e4c:	f1 d9 d1 02 	bfins	r8,r9,0x8,0x2
80028e50:	ef 48 ff f8 	st.w	r7[-8],r8
  u_avr32_scif_oscctrl32.OSCCTRL32.startup = opt->startup;
80028e54:	ee f8 ff f4 	ld.w	r8,r7[-12]
80028e58:	f1 38 00 08 	ld.ub	r8,r8[8]
80028e5c:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80028e60:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80028e64:	ee f8 ff f8 	ld.w	r8,r7[-8]
80028e68:	f1 d9 d2 03 	bfins	r8,r9,0x10,0x3
80028e6c:	ef 48 ff f8 	st.w	r7[-8],r8
  u_avr32_scif_oscctrl32.OSCCTRL32.osc32en = ENABLE;
80028e70:	ee f8 ff f8 	ld.w	r8,r7[-8]
80028e74:	30 19       	mov	r9,1
80028e76:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
80028e7a:	ef 48 ff f8 	st.w	r7[-8],r8
  
  AVR32_ENTER_CRITICAL_REGION( );
80028e7e:	e1 b8 00 00 	mfsr	r8,0x0
80028e82:	10 9c       	mov	r12,r8
80028e84:	fe b0 fb 42 	rcall	80028508 <cpu_irq_is_enabled_flags>
80028e88:	18 98       	mov	r8,r12
80028e8a:	ef 68 ff ff 	st.b	r7[-1],r8
80028e8e:	d3 03       	ssrf	0x10
  // Unlock the write-protected OSCCTRL32 register
  SCIF_UNLOCK(AVR32_SCIF_OSCCTRL32);
80028e90:	fe 78 08 00 	mov	r8,-63488
80028e94:	34 c9       	mov	r9,76
80028e96:	ea 19 aa 00 	orh	r9,0xaa00
80028e9a:	91 69       	st.w	r8[0x18],r9
  
  // Write Back
  AVR32_SCIF.oscctrl32 = u_avr32_scif_oscctrl32.oscctrl32;
80028e9c:	fe 78 08 00 	mov	r8,-63488
80028ea0:	ee f9 ff f8 	ld.w	r9,r7[-8]
80028ea4:	f1 49 00 4c 	st.w	r8[76],r9
  AVR32_LEAVE_CRITICAL_REGION( );
80028ea8:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80028eac:	30 08       	mov	r8,0
80028eae:	f0 09 18 00 	cp.b	r9,r8
80028eb2:	c0 20       	breq	80028eb6 <scif_start_osc32+0x9e>
80028eb4:	d5 03       	csrf	0x10

  if(true == wait_for_ready)
80028eb6:	ef 39 ff f0 	ld.ub	r9,r7[-16]
80028eba:	30 08       	mov	r8,0
80028ebc:	f0 09 18 00 	cp.b	r9,r8
80028ec0:	c0 90       	breq	80028ed2 <scif_start_osc32+0xba>
  {
    // Wait until OSC32 is stable and ready to be used.
    if(scif_pclksr_statushigh_wait(AVR32_SCIF_PCLKSR_OSC32RDY_MASK))
80028ec2:	30 4c       	mov	r12,4
80028ec4:	fe b0 fb 32 	rcall	80028528 <scif_pclksr_statushigh_wait>
80028ec8:	18 98       	mov	r8,r12
80028eca:	58 08       	cp.w	r8,0
80028ecc:	c0 30       	breq	80028ed2 <scif_start_osc32+0xba>
      return -1;
80028ece:	3f f8       	mov	r8,-1
80028ed0:	c0 28       	rjmp	80028ed4 <scif_start_osc32+0xbc>
  }
  
  return PASS;
80028ed2:	30 08       	mov	r8,0
}
80028ed4:	10 9c       	mov	r12,r8
80028ed6:	2f cd       	sub	sp,-16
80028ed8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80028edc:	80 02       	ld.sh	r2,r0[0x0]
80028ede:	8c a6       	ld.uh	r6,r6[0x4]

80028ee0 <scif_stop_osc32>:


long scif_stop_osc32()
{
80028ee0:	eb cd 40 c0 	pushm	r6-r7,lr
80028ee4:	1a 97       	mov	r7,sp
80028ee6:	20 2d       	sub	sp,8
80028ee8:	49 76       	lddpc	r6,80028f44 <scif_stop_osc32+0x64>
80028eea:	1e 26       	rsub	r6,pc
  unsigned long temp = AVR32_SCIF.oscctrl32;
80028eec:	fe 78 08 00 	mov	r8,-63488
80028ef0:	71 38       	ld.w	r8,r8[0x4c]
80028ef2:	ef 48 ff f8 	st.w	r7[-8],r8
  temp &= ~AVR32_SCIF_OSCCTRL32_OSC32EN_MASK;
80028ef6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80028efa:	a1 c8       	cbr	r8,0x0
80028efc:	ef 48 ff f8 	st.w	r7[-8],r8

  AVR32_ENTER_CRITICAL_REGION( );
80028f00:	e1 b8 00 00 	mfsr	r8,0x0
80028f04:	10 9c       	mov	r12,r8
80028f06:	fe b0 fb 01 	rcall	80028508 <cpu_irq_is_enabled_flags>
80028f0a:	18 98       	mov	r8,r12
80028f0c:	ef 68 ff ff 	st.b	r7[-1],r8
80028f10:	d3 03       	ssrf	0x10
  // Unlock the write-protected OSCCTRL32 register
  SCIF_UNLOCK(AVR32_SCIF_OSCCTRL32);
80028f12:	fe 78 08 00 	mov	r8,-63488
80028f16:	34 c9       	mov	r9,76
80028f18:	ea 19 aa 00 	orh	r9,0xaa00
80028f1c:	91 69       	st.w	r8[0x18],r9
  
  // Stop OSC32.
  AVR32_SCIF.oscctrl32 = temp;
80028f1e:	fe 78 08 00 	mov	r8,-63488
80028f22:	ee f9 ff f8 	ld.w	r9,r7[-8]
80028f26:	f1 49 00 4c 	st.w	r8[76],r9
  AVR32_LEAVE_CRITICAL_REGION( );
80028f2a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80028f2e:	30 08       	mov	r8,0
80028f30:	f0 09 18 00 	cp.b	r9,r8
80028f34:	c0 20       	breq	80028f38 <scif_stop_osc32+0x58>
80028f36:	d5 03       	csrf	0x10

  return PASS;
80028f38:	30 08       	mov	r8,0
}
80028f3a:	10 9c       	mov	r12,r8
80028f3c:	2f ed       	sub	sp,-8
80028f3e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80028f42:	00 00       	add	r0,r0
80028f44:	80 02       	ld.sh	r2,r0[0x0]
80028f46:	8d 6e       	st.w	r6[0x18],lr

80028f48 <scif_start_rc8M>:
/**
 ** 8MHz RCosc Functions
 **/

void scif_start_rc8M(void)
{
80028f48:	eb cd 40 c0 	pushm	r6-r7,lr
80028f4c:	1a 97       	mov	r7,sp
80028f4e:	20 2d       	sub	sp,8
80028f50:	49 66       	lddpc	r6,80028fa8 <scif_start_rc8M+0x60>
80028f52:	1e 26       	rsub	r6,pc
  unsigned int* calibration_bits = (unsigned int*)0x80800200;
80028f54:	e0 68 02 00 	mov	r8,512
80028f58:	ea 18 80 80 	orh	r8,0x8080
80028f5c:	ef 48 ff f8 	st.w	r7[-8],r8
  AVR32_ENTER_CRITICAL_REGION( );
80028f60:	e1 b8 00 00 	mfsr	r8,0x0
80028f64:	10 9c       	mov	r12,r8
80028f66:	fe b0 fa d1 	rcall	80028508 <cpu_irq_is_enabled_flags>
80028f6a:	18 98       	mov	r8,r12
80028f6c:	ef 68 ff ff 	st.b	r7[-1],r8
80028f70:	d3 03       	ssrf	0x10
  // Unlock the write-protected RC8MCR register
  SCIF_UNLOCK(AVR32_SCIF_RCCR8);
80028f72:	fe 78 08 00 	mov	r8,-63488
80028f76:	34 89       	mov	r9,72
80028f78:	ea 19 aa 00 	orh	r9,0xaa00
80028f7c:	91 69       	st.w	r8[0x18],r9
  AVR32_SCIF.rccr8 = AVR32_SCIF_RCCR8_RCOSC8_EN_MASK | ((*calibration_bits)&AVR32_SCIF_RCCR8_CALIB_MASK);
80028f7e:	fe 78 08 00 	mov	r8,-63488
80028f82:	ee f9 ff f8 	ld.w	r9,r7[-8]
80028f86:	72 09       	ld.w	r9,r9[0x0]
80028f88:	f3 d9 c0 08 	bfextu	r9,r9,0x0,0x8
80028f8c:	b9 a9       	sbr	r9,0x18
80028f8e:	f1 49 00 48 	st.w	r8[72],r9
  AVR32_LEAVE_CRITICAL_REGION( );
80028f92:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80028f96:	30 08       	mov	r8,0
80028f98:	f0 09 18 00 	cp.b	r9,r8
80028f9c:	c0 20       	breq	80028fa0 <scif_start_rc8M+0x58>
80028f9e:	d5 03       	csrf	0x10
}
80028fa0:	2f ed       	sub	sp,-8
80028fa2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80028fa6:	00 00       	add	r0,r0
80028fa8:	80 02       	ld.sh	r2,r0[0x0]
80028faa:	8d d6       	st.w	r6[0x34],r6

80028fac <scif_stop_rc8M>:

void scif_stop_rc8M(void)
{
80028fac:	eb cd 40 c0 	pushm	r6-r7,lr
80028fb0:	1a 97       	mov	r7,sp
80028fb2:	20 2d       	sub	sp,8
80028fb4:	49 66       	lddpc	r6,8002900c <scif_stop_rc8M+0x60>
80028fb6:	1e 26       	rsub	r6,pc
  unsigned long temp = AVR32_SCIF.rccr8;
80028fb8:	fe 78 08 00 	mov	r8,-63488
80028fbc:	71 28       	ld.w	r8,r8[0x48]
80028fbe:	ef 48 ff f8 	st.w	r7[-8],r8
  
  AVR32_ENTER_CRITICAL_REGION( );
80028fc2:	e1 b8 00 00 	mfsr	r8,0x0
80028fc6:	10 9c       	mov	r12,r8
80028fc8:	fe b0 fa a0 	rcall	80028508 <cpu_irq_is_enabled_flags>
80028fcc:	18 98       	mov	r8,r12
80028fce:	ef 68 ff ff 	st.b	r7[-1],r8
80028fd2:	d3 03       	ssrf	0x10
  // Unlock the write-protected RC8MCR register
  SCIF_UNLOCK(AVR32_SCIF_RCCR8);
80028fd4:	fe 78 08 00 	mov	r8,-63488
80028fd8:	34 89       	mov	r9,72
80028fda:	ea 19 aa 00 	orh	r9,0xaa00
80028fde:	91 69       	st.w	r8[0x18],r9
  temp &= ~AVR32_SCIF_RCCR8_RCOSC8_EN_MASK;
80028fe0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80028fe4:	b9 c8       	cbr	r8,0x18
80028fe6:	ef 48 ff f8 	st.w	r7[-8],r8
  AVR32_SCIF.rccr8 = temp;
80028fea:	fe 78 08 00 	mov	r8,-63488
80028fee:	ee f9 ff f8 	ld.w	r9,r7[-8]
80028ff2:	f1 49 00 48 	st.w	r8[72],r9
  AVR32_LEAVE_CRITICAL_REGION( );
80028ff6:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80028ffa:	30 08       	mov	r8,0
80028ffc:	f0 09 18 00 	cp.b	r9,r8
80029000:	c0 20       	breq	80029004 <scif_stop_rc8M+0x58>
80029002:	d5 03       	csrf	0x10
}
80029004:	2f ed       	sub	sp,-8
80029006:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002900a:	00 00       	add	r0,r0
8002900c:	80 02       	ld.sh	r2,r0[0x0]
8002900e:	8e 3a       	ld.sh	r10,r7[0x6]

80029010 <scif_start_rc120M>:
/**
 ** 120MHz RCosc Functions
 **/

void scif_start_rc120M(void)
{
80029010:	eb cd 40 c0 	pushm	r6-r7,lr
80029014:	1a 97       	mov	r7,sp
80029016:	20 1d       	sub	sp,4
80029018:	49 06       	lddpc	r6,80029058 <scif_start_rc120M+0x48>
8002901a:	1e 26       	rsub	r6,pc
  AVR32_ENTER_CRITICAL_REGION( );
8002901c:	e1 b8 00 00 	mfsr	r8,0x0
80029020:	10 9c       	mov	r12,r8
80029022:	fe b0 fa 73 	rcall	80028508 <cpu_irq_is_enabled_flags>
80029026:	18 98       	mov	r8,r12
80029028:	ef 68 ff ff 	st.b	r7[-1],r8
8002902c:	d3 03       	ssrf	0x10
  // Unlock the write-protected RC120MCR register
  SCIF_UNLOCK(AVR32_SCIF_RC120MCR);
8002902e:	fe 78 08 00 	mov	r8,-63488
80029032:	35 89       	mov	r9,88
80029034:	ea 19 aa 00 	orh	r9,0xaa00
80029038:	91 69       	st.w	r8[0x18],r9
  AVR32_SCIF.rc120mcr = AVR32_SCIF_RC120MCR_EN_MASK;
8002903a:	fe 78 08 00 	mov	r8,-63488
8002903e:	30 19       	mov	r9,1
80029040:	f1 49 00 58 	st.w	r8[88],r9
  AVR32_LEAVE_CRITICAL_REGION( );
80029044:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80029048:	30 08       	mov	r8,0
8002904a:	f0 09 18 00 	cp.b	r9,r8
8002904e:	c0 20       	breq	80029052 <scif_start_rc120M+0x42>
80029050:	d5 03       	csrf	0x10
}
80029052:	2f fd       	sub	sp,-4
80029054:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80029058:	80 02       	ld.sh	r2,r0[0x0]
8002905a:	8e 9e       	ld.uh	lr,r7[0x2]

8002905c <scif_stop_rc120M>:

void scif_stop_rc120M(void)
{
8002905c:	eb cd 40 c0 	pushm	r6-r7,lr
80029060:	1a 97       	mov	r7,sp
80029062:	20 2d       	sub	sp,8
80029064:	49 66       	lddpc	r6,800290bc <scif_stop_rc120M+0x60>
80029066:	1e 26       	rsub	r6,pc
  unsigned long temp = AVR32_SCIF.rc120mcr;
80029068:	fe 78 08 00 	mov	r8,-63488
8002906c:	71 68       	ld.w	r8,r8[0x58]
8002906e:	ef 48 ff f8 	st.w	r7[-8],r8

  AVR32_ENTER_CRITICAL_REGION( );
80029072:	e1 b8 00 00 	mfsr	r8,0x0
80029076:	10 9c       	mov	r12,r8
80029078:	fe b0 fa 48 	rcall	80028508 <cpu_irq_is_enabled_flags>
8002907c:	18 98       	mov	r8,r12
8002907e:	ef 68 ff ff 	st.b	r7[-1],r8
80029082:	d3 03       	ssrf	0x10
  // Unlock the write-protected RC120MCR register
  SCIF_UNLOCK(AVR32_SCIF_RC120MCR);
80029084:	fe 78 08 00 	mov	r8,-63488
80029088:	35 89       	mov	r9,88
8002908a:	ea 19 aa 00 	orh	r9,0xaa00
8002908e:	91 69       	st.w	r8[0x18],r9
  temp &= ~AVR32_SCIF_RC120MCR_EN_MASK;
80029090:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029094:	a1 c8       	cbr	r8,0x0
80029096:	ef 48 ff f8 	st.w	r7[-8],r8
  AVR32_SCIF.rc120mcr = temp;
8002909a:	fe 78 08 00 	mov	r8,-63488
8002909e:	ee f9 ff f8 	ld.w	r9,r7[-8]
800290a2:	f1 49 00 58 	st.w	r8[88],r9
  AVR32_LEAVE_CRITICAL_REGION( );
800290a6:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800290aa:	30 08       	mov	r8,0
800290ac:	f0 09 18 00 	cp.b	r9,r8
800290b0:	c0 20       	breq	800290b4 <scif_stop_rc120M+0x58>
800290b2:	d5 03       	csrf	0x10
}
800290b4:	2f ed       	sub	sp,-8
800290b6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800290ba:	00 00       	add	r0,r0
800290bc:	80 02       	ld.sh	r2,r0[0x0]
800290be:	8e ea       	ld.uh	r10,r7[0xc]

800290c0 <scif_start_gclk>:
/**
 ** Generic Clock Functions
 **/

long int scif_start_gclk(unsigned int gclk, const scif_gclk_opt_t *opt)
{
800290c0:	eb cd 40 80 	pushm	r7,lr
800290c4:	1a 97       	mov	r7,sp
800290c6:	20 2d       	sub	sp,8
800290c8:	ef 4c ff fc 	st.w	r7[-4],r12
800290cc:	ef 4b ff f8 	st.w	r7[-8],r11
    return -1;
  }
#endif  // AVR32SFW_INPUT_CHECK

  // If the generic clock is already enabled, return an error.
  if(AVR32_SCIF.gcctrl[gclk] & AVR32_SCIF_GCCTRL_CEN_MASK)
800290d0:	fe 78 08 00 	mov	r8,-63488
800290d4:	ee f9 ff fc 	ld.w	r9,r7[-4]
800290d8:	2e 79       	sub	r9,-25
800290da:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800290de:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800290e2:	5c 58       	castu.b	r8
800290e4:	c0 30       	breq	800290ea <scif_start_gclk+0x2a>
    return -1;
800290e6:	3f f8       	mov	r8,-1
800290e8:	c2 08       	rjmp	80029128 <scif_start_gclk+0x68>

  // Configure & start the generic clock.
  AVR32_SCIF.gcctrl[gclk] = ((opt->divider << AVR32_SCIF_GCCTRL_DIV_OFFSET)&AVR32_SCIF_GCCTRL_DIV_MASK)
800290ea:	fe 78 08 00 	mov	r8,-63488
800290ee:	ee f9 ff fc 	ld.w	r9,r7[-4]
800290f2:	ee fa ff f8 	ld.w	r10,r7[-8]
800290f6:	74 1a       	ld.w	r10,r10[0x4]
800290f8:	b1 6a       	lsl	r10,0x10
800290fa:	14 9b       	mov	r11,r10
800290fc:	e6 1b 00 ff 	andh	r11,0xff,COH
                            |((opt->diven << AVR32_SCIF_GCCTRL_DIVEN_OFFSET)&AVR32_SCIF_GCCTRL_DIVEN_MASK)
80029100:	ee fa ff f8 	ld.w	r10,r7[-8]
80029104:	74 2a       	ld.w	r10,r10[0x8]
80029106:	a1 7a       	lsl	r10,0x1
80029108:	e2 1a 00 02 	andl	r10,0x2,COH
                            |((opt->clock_source << AVR32_SCIF_GCCTRL_OSCSEL_OFFSET)&AVR32_SCIF_GCCTRL_OSCSEL_MASK)
8002910c:	14 4b       	or	r11,r10
8002910e:	ee fa ff f8 	ld.w	r10,r7[-8]
80029112:	74 0a       	ld.w	r10,r10[0x0]
80029114:	a9 6a       	lsl	r10,0x8
80029116:	e2 1a 0f 00 	andl	r10,0xf00,COH
                            |(AVR32_SCIF_GCCTRL_CEN_MASK);
8002911a:	f7 ea 10 0a 	or	r10,r11,r10
  // If the generic clock is already enabled, return an error.
  if(AVR32_SCIF.gcctrl[gclk] & AVR32_SCIF_GCCTRL_CEN_MASK)
    return -1;

  // Configure & start the generic clock.
  AVR32_SCIF.gcctrl[gclk] = ((opt->divider << AVR32_SCIF_GCCTRL_DIV_OFFSET)&AVR32_SCIF_GCCTRL_DIV_MASK)
8002911e:	a1 aa       	sbr	r10,0x0
80029120:	2e 79       	sub	r9,-25
80029122:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
                            |((opt->diven << AVR32_SCIF_GCCTRL_DIVEN_OFFSET)&AVR32_SCIF_GCCTRL_DIVEN_MASK)
                            |((opt->clock_source << AVR32_SCIF_GCCTRL_OSCSEL_OFFSET)&AVR32_SCIF_GCCTRL_OSCSEL_MASK)
                            |(AVR32_SCIF_GCCTRL_CEN_MASK);

  return PASS;
80029126:	30 08       	mov	r8,0
}
80029128:	10 9c       	mov	r12,r8
8002912a:	2f ed       	sub	sp,-8
8002912c:	e3 cd 80 80 	ldm	sp++,r7,pc

80029130 <scif_stop_gclk>:


long int scif_stop_gclk(unsigned int gclk)
{
80029130:	eb cd 40 80 	pushm	r7,lr
80029134:	1a 97       	mov	r7,sp
80029136:	20 2d       	sub	sp,8
80029138:	ef 4c ff f8 	st.w	r7[-8],r12
  unsigned int  timeout = SCIF_POLL_TIMEOUT;
8002913c:	e0 78 86 a0 	mov	r8,100000
80029140:	ef 48 ff fc 	st.w	r7[-4],r8
    return -1;
  }
#endif  // AVR32SFW_INPUT_CHECK

  // Stop the generic clock.
  AVR32_SCIF.gcctrl[gclk] &= ~AVR32_SCIF_GCCTRL_CEN_MASK;
80029144:	fe 78 08 00 	mov	r8,-63488
80029148:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002914c:	fe 7a 08 00 	mov	r10,-63488
80029150:	ee fb ff f8 	ld.w	r11,r7[-8]
80029154:	2e 7b       	sub	r11,-25
80029156:	f4 0b 03 2a 	ld.w	r10,r10[r11<<0x2]
8002915a:	a1 ca       	cbr	r10,0x0
8002915c:	2e 79       	sub	r9,-25
8002915e:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
  
  // Wait until the generic clock is actually stopped.
  while(AVR32_SCIF.gcctrl[gclk] & AVR32_SCIF_GCCTRL_CEN_MASK)
80029162:	c0 c8       	rjmp	8002917a <scif_stop_gclk+0x4a>
  {
    if(--timeout == 0)
80029164:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029168:	20 18       	sub	r8,1
8002916a:	ef 48 ff fc 	st.w	r7[-4],r8
8002916e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029172:	58 08       	cp.w	r8,0
80029174:	c0 31       	brne	8002917a <scif_stop_gclk+0x4a>
      return -1;
80029176:	3f f8       	mov	r8,-1
80029178:	c0 d8       	rjmp	80029192 <scif_stop_gclk+0x62>

  // Stop the generic clock.
  AVR32_SCIF.gcctrl[gclk] &= ~AVR32_SCIF_GCCTRL_CEN_MASK;
  
  // Wait until the generic clock is actually stopped.
  while(AVR32_SCIF.gcctrl[gclk] & AVR32_SCIF_GCCTRL_CEN_MASK)
8002917a:	fe 78 08 00 	mov	r8,-63488
8002917e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80029182:	2e 79       	sub	r9,-25
80029184:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80029188:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002918c:	5c 58       	castu.b	r8
8002918e:	ce b1       	brne	80029164 <scif_stop_gclk+0x34>
  {
    if(--timeout == 0)
      return -1;
  }
  
  return PASS;
80029190:	30 08       	mov	r8,0
}
80029192:	10 9c       	mov	r12,r8
80029194:	2f ed       	sub	sp,-8
80029196:	e3 cd 80 80 	ldm	sp++,r7,pc

8002919a <scif_gc_setup>:


long int scif_gc_setup(unsigned int gclk, scif_gcctrl_oscsel_t clk_src, unsigned int diven, unsigned int divfactor)
{
8002919a:	eb cd 40 c0 	pushm	r6-r7,lr
8002919e:	1a 97       	mov	r7,sp
800291a0:	20 5d       	sub	sp,20
800291a2:	4a f6       	lddpc	r6,8002925c <scif_gc_setup+0xc2>
800291a4:	1e 26       	rsub	r6,pc
800291a6:	ef 4c ff f8 	st.w	r7[-8],r12
800291aa:	ef 4b ff f4 	st.w	r7[-12],r11
800291ae:	ef 4a ff f0 	st.w	r7[-16],r10
800291b2:	ef 49 ff ec 	st.w	r7[-20],r9
  int restart_gc = false;
800291b6:	30 08       	mov	r8,0
800291b8:	ef 48 ff fc 	st.w	r7[-4],r8
  
  
  // Change the division factor to conform to the equation: fgclk = fsrc/divfactor = fsrc/(2*(div+1))
  divfactor = (divfactor>>1) -1;
800291bc:	ee f8 ff ec 	ld.w	r8,r7[-20]
800291c0:	a1 98       	lsr	r8,0x1
800291c2:	20 18       	sub	r8,1
800291c4:	ef 48 ff ec 	st.w	r7[-20],r8
      return -1;
  }
#endif  // AVR32SFW_INPUT_CHECK

  // If the generic clock is already enabled, disable it before changing its setup.
  if(AVR32_SCIF.gcctrl[gclk] & AVR32_SCIF_GCCTRL_CEN_MASK)
800291c8:	fe 78 08 00 	mov	r8,-63488
800291cc:	ee f9 ff f8 	ld.w	r9,r7[-8]
800291d0:	2e 79       	sub	r9,-25
800291d2:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800291d6:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800291da:	5c 58       	castu.b	r8
800291dc:	c0 d0       	breq	800291f6 <scif_gc_setup+0x5c>
  {
    restart_gc = true;
800291de:	30 18       	mov	r8,1
800291e0:	ef 48 ff fc 	st.w	r7[-4],r8
    if(scif_stop_gclk(gclk) < 0)
800291e4:	ee fc ff f8 	ld.w	r12,r7[-8]
800291e8:	f0 16 02 10 	mcall	r6[2112]
800291ec:	18 98       	mov	r8,r12
800291ee:	58 08       	cp.w	r8,0
800291f0:	c0 34       	brge	800291f6 <scif_gc_setup+0x5c>
      return -1;  // Could not stop the generic clock.
800291f2:	3f f8       	mov	r8,-1
800291f4:	c2 f8       	rjmp	80029252 <scif_gc_setup+0xb8>
  }

  // Setup the generic clock.
  AVR32_SCIF.gcctrl[gclk] = ((divfactor << AVR32_SCIF_GCCTRL_DIV_OFFSET)&AVR32_SCIF_GCCTRL_DIV_MASK)
800291f6:	fe 78 08 00 	mov	r8,-63488
800291fa:	ee f9 ff f8 	ld.w	r9,r7[-8]
800291fe:	ee fa ff ec 	ld.w	r10,r7[-20]
80029202:	b1 6a       	lsl	r10,0x10
80029204:	14 9b       	mov	r11,r10
80029206:	e6 1b 00 ff 	andh	r11,0xff,COH
                            |((diven << AVR32_SCIF_GCCTRL_DIVEN_OFFSET)&AVR32_SCIF_GCCTRL_DIVEN_MASK)
8002920a:	ee fa ff f0 	ld.w	r10,r7[-16]
8002920e:	a1 7a       	lsl	r10,0x1
80029210:	e2 1a 00 02 	andl	r10,0x2,COH
                            |((clk_src << AVR32_SCIF_GCCTRL_OSCSEL_OFFSET)&AVR32_SCIF_GCCTRL_OSCSEL_MASK);
80029214:	14 4b       	or	r11,r10
80029216:	ee fa ff f4 	ld.w	r10,r7[-12]
8002921a:	a9 6a       	lsl	r10,0x8
8002921c:	e2 1a 0f 00 	andl	r10,0xf00,COH
    if(scif_stop_gclk(gclk) < 0)
      return -1;  // Could not stop the generic clock.
  }

  // Setup the generic clock.
  AVR32_SCIF.gcctrl[gclk] = ((divfactor << AVR32_SCIF_GCCTRL_DIV_OFFSET)&AVR32_SCIF_GCCTRL_DIV_MASK)
80029220:	f7 ea 10 0a 	or	r10,r11,r10
80029224:	2e 79       	sub	r9,-25
80029226:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
                            |((diven << AVR32_SCIF_GCCTRL_DIVEN_OFFSET)&AVR32_SCIF_GCCTRL_DIVEN_MASK)
                            |((clk_src << AVR32_SCIF_GCCTRL_OSCSEL_OFFSET)&AVR32_SCIF_GCCTRL_OSCSEL_MASK);
                            
  // Restart the gc if it previously was enabled.
  if(true == restart_gc)
8002922a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002922e:	58 18       	cp.w	r8,1
80029230:	c1 01       	brne	80029250 <scif_gc_setup+0xb6>
    AVR32_SCIF.gcctrl[gclk] |= AVR32_SCIF_GCCTRL_CEN_MASK ;
80029232:	fe 78 08 00 	mov	r8,-63488
80029236:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002923a:	fe 7a 08 00 	mov	r10,-63488
8002923e:	ee fb ff f8 	ld.w	r11,r7[-8]
80029242:	2e 7b       	sub	r11,-25
80029244:	f4 0b 03 2a 	ld.w	r10,r10[r11<<0x2]
80029248:	a1 aa       	sbr	r10,0x0
8002924a:	2e 79       	sub	r9,-25
8002924c:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10

  return PASS;
80029250:	30 08       	mov	r8,0
}
80029252:	10 9c       	mov	r12,r8
80029254:	2f bd       	sub	sp,-20
80029256:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002925a:	00 00       	add	r0,r0
8002925c:	80 02       	ld.sh	r2,r0[0x0]
8002925e:	90 28       	ld.sh	r8,r8[0x4]

80029260 <scif_gc_enable>:


long int scif_gc_enable(unsigned int gclk)
{
80029260:	eb cd 40 80 	pushm	r7,lr
80029264:	1a 97       	mov	r7,sp
80029266:	20 1d       	sub	sp,4
80029268:	ef 4c ff fc 	st.w	r7[-4],r12
    return -1;
  }
#endif  // AVR32SFW_INPUT_CHECK

  // If the generic clock is already enabled, do nothing.
  if(!(AVR32_SCIF.gcctrl[gclk] & AVR32_SCIF_GCCTRL_CEN_MASK))
8002926c:	fe 78 08 00 	mov	r8,-63488
80029270:	ee f9 ff fc 	ld.w	r9,r7[-4]
80029274:	2e 79       	sub	r9,-25
80029276:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8002927a:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002927e:	c1 01       	brne	8002929e <scif_gc_enable+0x3e>
    AVR32_SCIF.gcctrl[gclk] |= AVR32_SCIF_GCCTRL_CEN_MASK;
80029280:	fe 78 08 00 	mov	r8,-63488
80029284:	ee f9 ff fc 	ld.w	r9,r7[-4]
80029288:	fe 7a 08 00 	mov	r10,-63488
8002928c:	ee fb ff fc 	ld.w	r11,r7[-4]
80029290:	2e 7b       	sub	r11,-25
80029292:	f4 0b 03 2a 	ld.w	r10,r10[r11<<0x2]
80029296:	a1 aa       	sbr	r10,0x0
80029298:	2e 79       	sub	r9,-25
8002929a:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
    
  return PASS;
8002929e:	30 08       	mov	r8,0

}
800292a0:	10 9c       	mov	r12,r8
800292a2:	2f fd       	sub	sp,-4
800292a4:	e3 cd 80 80 	ldm	sp++,r7,pc

800292a8 <scif_bod18_enable_irq>:

void scif_bod18_enable_irq(void)
{
800292a8:	eb cd 40 80 	pushm	r7,lr
800292ac:	1a 97       	mov	r7,sp
  AVR32_SCIF.ier = AVR32_SCIF_IER_BODDET_MASK ;
800292ae:	fe 78 08 00 	mov	r8,-63488
800292b2:	34 09       	mov	r9,64
800292b4:	91 09       	st.w	r8[0x0],r9
}
800292b6:	e3 cd 80 80 	ldm	sp++,r7,pc

800292ba <scif_bod18_disable_irq>:

void scif_bod18_disable_irq(void)
{
800292ba:	eb cd 40 c0 	pushm	r6-r7,lr
800292be:	1a 97       	mov	r7,sp
800292c0:	20 1d       	sub	sp,4
800292c2:	49 26       	lddpc	r6,80029308 <scif_bod18_disable_irq+0x4e>
800292c4:	1e 26       	rsub	r6,pc
  bool global_interrupt_enabled = Is_global_interrupt_enabled();
800292c6:	e1 b8 00 00 	mfsr	r8,0x0
800292ca:	10 9c       	mov	r12,r8
800292cc:	fe b0 f9 1e 	rcall	80028508 <cpu_irq_is_enabled_flags>
800292d0:	18 98       	mov	r8,r12
800292d2:	ef 68 ff ff 	st.b	r7[-1],r8

  if (global_interrupt_enabled) Disable_global_interrupt();
800292d6:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800292da:	30 08       	mov	r8,0
800292dc:	f0 09 18 00 	cp.b	r9,r8
800292e0:	c0 20       	breq	800292e4 <scif_bod18_disable_irq+0x2a>
800292e2:	d3 03       	ssrf	0x10
  AVR32_SCIF.idr = AVR32_SCIF_IDR_BODDET_MASK;
800292e4:	fe 78 08 00 	mov	r8,-63488
800292e8:	34 09       	mov	r9,64
800292ea:	91 19       	st.w	r8[0x4],r9
  AVR32_SCIF.isr;
800292ec:	fe 78 08 00 	mov	r8,-63488
800292f0:	70 38       	ld.w	r8,r8[0xc]
  if (global_interrupt_enabled) Enable_global_interrupt();
800292f2:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800292f6:	30 08       	mov	r8,0
800292f8:	f0 09 18 00 	cp.b	r9,r8
800292fc:	c0 20       	breq	80029300 <scif_bod18_disable_irq+0x46>
800292fe:	d5 03       	csrf	0x10
}
80029300:	2f fd       	sub	sp,-4
80029302:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80029306:	00 00       	add	r0,r0
80029308:	80 02       	ld.sh	r2,r0[0x0]
8002930a:	91 48       	st.w	r8[0x10],r8

8002930c <scif_bod18_clear_irq>:

void scif_bod18_clear_irq(void)
{
8002930c:	eb cd 40 80 	pushm	r7,lr
80029310:	1a 97       	mov	r7,sp
  AVR32_SCIF.icr = AVR32_SCIF_ICR_BODDET_MASK;
80029312:	fe 78 08 00 	mov	r8,-63488
80029316:	34 09       	mov	r9,64
80029318:	91 49       	st.w	r8[0x10],r9
}
8002931a:	e3 cd 80 80 	ldm	sp++,r7,pc

8002931e <scif_bod18_get_irq_status>:

unsigned long scif_bod18_get_irq_status(void)
{
8002931e:	eb cd 40 80 	pushm	r7,lr
80029322:	1a 97       	mov	r7,sp
  return ((AVR32_SCIF.isr & AVR32_SCIF_ISR_BODDET_MASK) != 0);
80029324:	fe 78 08 00 	mov	r8,-63488
80029328:	70 38       	ld.w	r8,r8[0xc]
8002932a:	e2 18 00 40 	andl	r8,0x40,COH
8002932e:	5f 18       	srne	r8
}
80029330:	10 9c       	mov	r12,r8
80029332:	e3 cd 80 80 	ldm	sp++,r7,pc

80029336 <scif_bod18_get_irq_enable_bit>:

unsigned long scif_bod18_get_irq_enable_bit(void)
{
80029336:	eb cd 40 80 	pushm	r7,lr
8002933a:	1a 97       	mov	r7,sp
  return ((AVR32_SCIF.imr & AVR32_SCIF_IMR_BODDET_MASK) != 0);
8002933c:	fe 78 08 00 	mov	r8,-63488
80029340:	70 28       	ld.w	r8,r8[0x8]
80029342:	e2 18 00 40 	andl	r8,0x40,COH
80029346:	5f 18       	srne	r8
}
80029348:	10 9c       	mov	r12,r8
8002934a:	e3 cd 80 80 	ldm	sp++,r7,pc

8002934e <scif_bod18_get_level>:

unsigned long scif_bod18_get_level(void)
{
8002934e:	eb cd 40 80 	pushm	r7,lr
80029352:	1a 97       	mov	r7,sp
  return (AVR32_SCIF.bod & AVR32_SCIF_BOD_LEVEL_MASK) >> AVR32_SCIF_BOD_LEVEL_OFFSET;
80029354:	fe 78 08 00 	mov	r8,-63488
80029358:	70 b8       	ld.w	r8,r8[0x2c]
8002935a:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
}
8002935e:	10 9c       	mov	r12,r8
80029360:	e3 cd 80 80 	ldm	sp++,r7,pc

80029364 <scif_bod33_enable_irq>:

void scif_bod33_enable_irq(void)
{
80029364:	eb cd 40 80 	pushm	r7,lr
80029368:	1a 97       	mov	r7,sp
  AVR32_SCIF.ier = AVR32_SCIF_IER_BOD33DET_MASK ;
8002936a:	fe 78 08 00 	mov	r8,-63488
8002936e:	e0 69 00 80 	mov	r9,128
80029372:	91 09       	st.w	r8[0x0],r9
}
80029374:	e3 cd 80 80 	ldm	sp++,r7,pc

80029378 <scif_bod33_disable_irq>:

void scif_bod33_disable_irq(void)
{
80029378:	eb cd 40 c0 	pushm	r6-r7,lr
8002937c:	1a 97       	mov	r7,sp
8002937e:	20 1d       	sub	sp,4
80029380:	49 26       	lddpc	r6,800293c8 <scif_bod33_disable_irq+0x50>
80029382:	1e 26       	rsub	r6,pc
   bool global_interrupt_enabled = Is_global_interrupt_enabled();
80029384:	e1 b8 00 00 	mfsr	r8,0x0
80029388:	10 9c       	mov	r12,r8
8002938a:	fe b0 f8 bf 	rcall	80028508 <cpu_irq_is_enabled_flags>
8002938e:	18 98       	mov	r8,r12
80029390:	ef 68 ff ff 	st.b	r7[-1],r8

  if (global_interrupt_enabled) Disable_global_interrupt();
80029394:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80029398:	30 08       	mov	r8,0
8002939a:	f0 09 18 00 	cp.b	r9,r8
8002939e:	c0 20       	breq	800293a2 <scif_bod33_disable_irq+0x2a>
800293a0:	d3 03       	ssrf	0x10
  AVR32_SCIF.idr = AVR32_SCIF_IDR_BOD33DET_MASK;
800293a2:	fe 78 08 00 	mov	r8,-63488
800293a6:	e0 69 00 80 	mov	r9,128
800293aa:	91 19       	st.w	r8[0x4],r9
  AVR32_SCIF.isr;
800293ac:	fe 78 08 00 	mov	r8,-63488
800293b0:	70 38       	ld.w	r8,r8[0xc]
  if (global_interrupt_enabled) Enable_global_interrupt();
800293b2:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800293b6:	30 08       	mov	r8,0
800293b8:	f0 09 18 00 	cp.b	r9,r8
800293bc:	c0 20       	breq	800293c0 <scif_bod33_disable_irq+0x48>
800293be:	d5 03       	csrf	0x10
}
800293c0:	2f fd       	sub	sp,-4
800293c2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800293c6:	00 00       	add	r0,r0
800293c8:	80 02       	ld.sh	r2,r0[0x0]
800293ca:	92 06       	ld.sh	r6,r9[0x0]

800293cc <scif_bod33_clear_irq>:
 
void scif_bod33_clear_irq(void)
{
800293cc:	eb cd 40 80 	pushm	r7,lr
800293d0:	1a 97       	mov	r7,sp
  AVR32_SCIF.icr = AVR32_SCIF_ICR_BOD33DET_MASK;
800293d2:	fe 78 08 00 	mov	r8,-63488
800293d6:	e0 69 00 80 	mov	r9,128
800293da:	91 49       	st.w	r8[0x10],r9
}
800293dc:	e3 cd 80 80 	ldm	sp++,r7,pc

800293e0 <scif_bod33_get_irq_status>:
 
unsigned long scif_bod33_get_irq_status(void)
{
800293e0:	eb cd 40 80 	pushm	r7,lr
800293e4:	1a 97       	mov	r7,sp
  return ((AVR32_SCIF.isr & AVR32_SCIF_ISR_BOD33DET_MASK) != 0);
800293e6:	fe 78 08 00 	mov	r8,-63488
800293ea:	70 38       	ld.w	r8,r8[0xc]
800293ec:	e2 18 00 80 	andl	r8,0x80,COH
800293f0:	5f 18       	srne	r8
}
800293f2:	10 9c       	mov	r12,r8
800293f4:	e3 cd 80 80 	ldm	sp++,r7,pc

800293f8 <scif_bod33_get_irq_enable_bit>:
 
unsigned long scif_bod33_get_irq_enable_bit(void)
{
800293f8:	eb cd 40 80 	pushm	r7,lr
800293fc:	1a 97       	mov	r7,sp
  return ((AVR32_SCIF.imr & AVR32_SCIF_IMR_BOD33DET_MASK) != 0);
800293fe:	fe 78 08 00 	mov	r8,-63488
80029402:	70 28       	ld.w	r8,r8[0x8]
80029404:	e2 18 00 80 	andl	r8,0x80,COH
80029408:	5f 18       	srne	r8
}
8002940a:	10 9c       	mov	r12,r8
8002940c:	e3 cd 80 80 	ldm	sp++,r7,pc

80029410 <scif_bod33_get_level>:
 
unsigned long scif_bod33_get_level(void)
{
80029410:	eb cd 40 80 	pushm	r7,lr
80029414:	1a 97       	mov	r7,sp
  return (AVR32_SCIF.bod33 & AVR32_SCIF_BOD33_LEVEL_MASK) >> AVR32_SCIF_BOD33_LEVEL_OFFSET;
80029416:	fe 78 08 00 	mov	r8,-63488
8002941a:	70 d8       	ld.w	r8,r8[0x34]
8002941c:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
}
80029420:	10 9c       	mov	r12,r8
80029422:	e3 cd 80 80 	ldm	sp++,r7,pc

80029426 <scif_bod50_enable_irq>:

void scif_bod50_enable_irq(void)
{
80029426:	eb cd 40 80 	pushm	r7,lr
8002942a:	1a 97       	mov	r7,sp
  AVR32_SCIF.ier = AVR32_SCIF_IER_BOD50DET_MASK ;
8002942c:	fe 78 08 00 	mov	r8,-63488
80029430:	e0 69 01 00 	mov	r9,256
80029434:	91 09       	st.w	r8[0x0],r9
}
80029436:	e3 cd 80 80 	ldm	sp++,r7,pc

8002943a <scif_bod50_disable_irq>:

void scif_bod50_disable_irq(void)
{
8002943a:	eb cd 40 c0 	pushm	r6-r7,lr
8002943e:	1a 97       	mov	r7,sp
80029440:	20 1d       	sub	sp,4
80029442:	49 26       	lddpc	r6,80029488 <scif_bod50_disable_irq+0x4e>
80029444:	1e 26       	rsub	r6,pc
   bool global_interrupt_enabled = Is_global_interrupt_enabled();
80029446:	e1 b8 00 00 	mfsr	r8,0x0
8002944a:	10 9c       	mov	r12,r8
8002944c:	fe b0 f8 5e 	rcall	80028508 <cpu_irq_is_enabled_flags>
80029450:	18 98       	mov	r8,r12
80029452:	ef 68 ff ff 	st.b	r7[-1],r8

  if (global_interrupt_enabled) Disable_global_interrupt();
80029456:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8002945a:	30 08       	mov	r8,0
8002945c:	f0 09 18 00 	cp.b	r9,r8
80029460:	c0 20       	breq	80029464 <scif_bod50_disable_irq+0x2a>
80029462:	d3 03       	ssrf	0x10
  AVR32_SCIF.idr = AVR32_SCIF_IDR_BOD50DET_MASK;
80029464:	fe 78 08 00 	mov	r8,-63488
80029468:	e0 69 01 00 	mov	r9,256
8002946c:	91 19       	st.w	r8[0x4],r9
  AVR32_SCIF.isr;
8002946e:	fe 78 08 00 	mov	r8,-63488
80029472:	70 38       	ld.w	r8,r8[0xc]
  if (global_interrupt_enabled) Enable_global_interrupt();
80029474:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80029478:	30 08       	mov	r8,0
8002947a:	f0 09 18 00 	cp.b	r9,r8
8002947e:	c0 20       	breq	80029482 <scif_bod50_disable_irq+0x48>
80029480:	d5 03       	csrf	0x10
}
80029482:	2f fd       	sub	sp,-4
80029484:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80029488:	80 02       	ld.sh	r2,r0[0x0]
8002948a:	92 c8       	ld.uh	r8,r9[0x8]

8002948c <scif_bod50_clear_irq>:
 
void scif_bod50_clear_irq(void)
{
8002948c:	eb cd 40 80 	pushm	r7,lr
80029490:	1a 97       	mov	r7,sp
  AVR32_SCIF.icr = AVR32_SCIF_ICR_BOD50DET_MASK;
80029492:	fe 78 08 00 	mov	r8,-63488
80029496:	e0 69 01 00 	mov	r9,256
8002949a:	91 49       	st.w	r8[0x10],r9
}
8002949c:	e3 cd 80 80 	ldm	sp++,r7,pc

800294a0 <scif_bod50_get_irq_status>:
 
unsigned long scif_bod50_get_irq_status(void)
{
800294a0:	eb cd 40 80 	pushm	r7,lr
800294a4:	1a 97       	mov	r7,sp
  return ((AVR32_SCIF.isr & AVR32_SCIF_ISR_BOD50DET_MASK) != 0);
800294a6:	fe 78 08 00 	mov	r8,-63488
800294aa:	70 38       	ld.w	r8,r8[0xc]
800294ac:	e2 18 01 00 	andl	r8,0x100,COH
800294b0:	5f 18       	srne	r8
}
800294b2:	10 9c       	mov	r12,r8
800294b4:	e3 cd 80 80 	ldm	sp++,r7,pc

800294b8 <scif_bod50_get_irq_enable_bit>:
 
unsigned long scif_bod50_get_irq_enable_bit(void)
{
800294b8:	eb cd 40 80 	pushm	r7,lr
800294bc:	1a 97       	mov	r7,sp
  return ((AVR32_SCIF.imr & AVR32_SCIF_IMR_BOD50DET_MASK) != 0);
800294be:	fe 78 08 00 	mov	r8,-63488
800294c2:	70 28       	ld.w	r8,r8[0x8]
800294c4:	e2 18 01 00 	andl	r8,0x100,COH
800294c8:	5f 18       	srne	r8
}
800294ca:	10 9c       	mov	r12,r8
800294cc:	e3 cd 80 80 	ldm	sp++,r7,pc

800294d0 <scif_bod50_get_level>:
 
unsigned long scif_bod50_get_level(void)
{
800294d0:	eb cd 40 80 	pushm	r7,lr
800294d4:	1a 97       	mov	r7,sp
  return (AVR32_SCIF.bod50 & AVR32_SCIF_BOD50_LEVEL_MASK) >> AVR32_SCIF_BOD50_LEVEL_OFFSET;
800294d6:	fe 78 08 00 	mov	r8,-63488
800294da:	70 e8       	ld.w	r8,r8[0x38]
800294dc:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
}
800294e0:	10 9c       	mov	r12,r8
800294e2:	e3 cd 80 80 	ldm	sp++,r7,pc
	...

800294e8 <getBaudDiv>:

#endif


int16_t getBaudDiv(const unsigned int baudrate, uint32_t pba_hz)
{
800294e8:	eb cd 40 80 	pushm	r7,lr
800294ec:	1a 97       	mov	r7,sp
800294ee:	20 3d       	sub	sp,12
800294f0:	ef 4c ff f8 	st.w	r7[-8],r12
800294f4:	ef 4b ff f4 	st.w	r7[-12],r11
  int baudDiv = (pba_hz + baudrate / 2) / baudrate;
800294f8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800294fc:	f0 09 16 01 	lsr	r9,r8,0x1
80029500:	ee f8 ff f4 	ld.w	r8,r7[-12]
80029504:	f2 08 00 08 	add	r8,r9,r8
80029508:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002950c:	f0 09 0d 08 	divu	r8,r8,r9
80029510:	ef 48 ff fc 	st.w	r7[-4],r8

  if (baudDiv <= 0 || baudDiv > 255) {
80029514:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029518:	58 08       	cp.w	r8,0
8002951a:	e0 8a 00 08 	brle	8002952a <getBaudDiv+0x42>
8002951e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029522:	e0 48 00 ff 	cp.w	r8,255
80029526:	e0 8a 00 04 	brle	8002952e <getBaudDiv+0x46>
    return -1;
8002952a:	3f f8       	mov	r8,-1
8002952c:	c0 48       	rjmp	80029534 <getBaudDiv+0x4c>
  }

  return baudDiv;
8002952e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029532:	5c 88       	casts.h	r8
}
80029534:	10 9c       	mov	r12,r8
80029536:	2f dd       	sub	sp,-12
80029538:	e3 cd 80 80 	ldm	sp++,r7,pc

8002953c <spi_initSlave>:

spi_status_t spi_initSlave(volatile avr32_spi_t *spi,
                           unsigned char bits,
                           unsigned char spi_mode)
{
8002953c:	eb cd 40 80 	pushm	r7,lr
80029540:	1a 97       	mov	r7,sp
80029542:	20 3d       	sub	sp,12
80029544:	ef 4c ff fc 	st.w	r7[-4],r12
80029548:	16 99       	mov	r9,r11
8002954a:	14 98       	mov	r8,r10
8002954c:	ef 69 ff f8 	st.b	r7[-8],r9
80029550:	ef 68 ff f4 	st.b	r7[-12],r8
  if (spi_mode > 3 ||
80029554:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80029558:	30 38       	mov	r8,3
8002955a:	f0 09 18 00 	cp.b	r9,r8
8002955e:	e0 8b 00 10 	brhi	8002957e <spi_initSlave+0x42>
80029562:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80029566:	30 78       	mov	r8,7
80029568:	f0 09 18 00 	cp.b	r9,r8
8002956c:	e0 88 00 09 	brls	8002957e <spi_initSlave+0x42>
80029570:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80029574:	31 08       	mov	r8,16
80029576:	f0 09 18 00 	cp.b	r9,r8
8002957a:	e0 88 00 04 	brls	80029582 <spi_initSlave+0x46>
      bits < 8 || bits > 16) {
    return SPI_ERROR_ARGUMENT;
8002957e:	30 28       	mov	r8,2
80029580:	c1 f8       	rjmp	800295be <spi_initSlave+0x82>
  }

  // Reset.
  spi->cr = AVR32_SPI_CR_SWRST_MASK;
80029582:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029586:	e0 69 00 80 	mov	r9,128
8002958a:	91 09       	st.w	r8[0x0],r9

  // Will use CSR0 offsets; these are the same for CSR0 to CSR3.
  spi->csr0 = ((spi_mode >> 1) << AVR32_SPI_CSR0_CPOL_OFFSET) |
8002958c:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80029590:	a1 98       	lsr	r8,0x1
80029592:	5c 58       	castu.b	r8
80029594:	10 99       	mov	r9,r8
              (((spi_mode & 0x1) ^ 0x1) << AVR32_SPI_CSR0_NCPHA_OFFSET) |
80029596:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8002959a:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002959e:	c0 31       	brne	800295a4 <spi_initSlave+0x68>
800295a0:	30 28       	mov	r8,2
800295a2:	c0 28       	rjmp	800295a6 <spi_initSlave+0x6a>
800295a4:	30 08       	mov	r8,0
800295a6:	10 49       	or	r9,r8
              ((bits - 8) << AVR32_SPI_CSR0_BITS_OFFSET);
800295a8:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800295ac:	20 88       	sub	r8,8
800295ae:	a5 68       	lsl	r8,0x4

  // Reset.
  spi->cr = AVR32_SPI_CR_SWRST_MASK;

  // Will use CSR0 offsets; these are the same for CSR0 to CSR3.
  spi->csr0 = ((spi_mode >> 1) << AVR32_SPI_CSR0_CPOL_OFFSET) |
800295b0:	f3 e8 10 08 	or	r8,r9,r8
800295b4:	10 99       	mov	r9,r8
800295b6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800295ba:	91 c9       	st.w	r8[0x30],r9
              (((spi_mode & 0x1) ^ 0x1) << AVR32_SPI_CSR0_NCPHA_OFFSET) |
              ((bits - 8) << AVR32_SPI_CSR0_BITS_OFFSET);

  return SPI_OK;
800295bc:	30 08       	mov	r8,0
}
800295be:	10 9c       	mov	r12,r8
800295c0:	2f dd       	sub	sp,-12
800295c2:	e3 cd 80 80 	ldm	sp++,r7,pc

800295c6 <spi_initTest>:


spi_status_t spi_initTest(volatile avr32_spi_t *spi)
{
800295c6:	eb cd 40 80 	pushm	r7,lr
800295ca:	1a 97       	mov	r7,sp
800295cc:	20 1d       	sub	sp,4
800295ce:	ef 4c ff fc 	st.w	r7[-4],r12
  // Reset.
  spi->cr = AVR32_SPI_CR_SWRST_MASK;
800295d2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800295d6:	e0 69 00 80 	mov	r9,128
800295da:	91 09       	st.w	r8[0x0],r9
  spi->mr |= AVR32_SPI_MR_MSTR_MASK | // Master Mode.
800295dc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800295e0:	70 18       	ld.w	r8,r8[0x4]
800295e2:	10 99       	mov	r9,r8
800295e4:	e8 19 00 81 	orl	r9,0x81
800295e8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800295ec:	91 19       	st.w	r8[0x4],r9
             AVR32_SPI_MR_LLB_MASK;   // Local Loopback.

  return SPI_OK;
800295ee:	30 08       	mov	r8,0
}
800295f0:	10 9c       	mov	r12,r8
800295f2:	2f fd       	sub	sp,-4
800295f4:	e3 cd 80 80 	ldm	sp++,r7,pc

800295f8 <spi_initMaster>:


spi_status_t spi_initMaster(volatile avr32_spi_t *spi, const spi_options_t *options)
{
800295f8:	eb cd 40 80 	pushm	r7,lr
800295fc:	1a 97       	mov	r7,sp
800295fe:	20 3d       	sub	sp,12
80029600:	ef 4c ff f8 	st.w	r7[-8],r12
80029604:	ef 4b ff f4 	st.w	r7[-12],r11
  u_avr32_spi_mr_t u_avr32_spi_mr;

  if (options->modfdis > 1) {
80029608:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002960c:	f1 39 00 0d 	ld.ub	r9,r8[13]
80029610:	30 18       	mov	r8,1
80029612:	f0 09 18 00 	cp.b	r9,r8
80029616:	e0 88 00 04 	brls	8002961e <spi_initMaster+0x26>
    return SPI_ERROR_ARGUMENT;
8002961a:	30 28       	mov	r8,2
8002961c:	c3 48       	rjmp	80029684 <spi_initMaster+0x8c>
  }

  // Reset.
  spi->cr = AVR32_SPI_CR_SWRST_MASK;
8002961e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029622:	e0 69 00 80 	mov	r9,128
80029626:	91 09       	st.w	r8[0x0],r9

  // Master Mode.
  u_avr32_spi_mr.mr = spi->mr;
80029628:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002962c:	70 18       	ld.w	r8,r8[0x4]
8002962e:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_spi_mr.MR.mstr = 1;
80029632:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029636:	30 19       	mov	r9,1
80029638:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
8002963c:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_spi_mr.MR.modfdis = options->modfdis;
80029640:	ee f8 ff f4 	ld.w	r8,r7[-12]
80029644:	f1 38 00 0d 	ld.ub	r8,r8[13]
80029648:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002964c:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80029650:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029654:	f1 d9 d0 81 	bfins	r8,r9,0x4,0x1
80029658:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_spi_mr.MR.llb = 0;
8002965c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029660:	30 09       	mov	r9,0
80029662:	f1 d9 d0 e1 	bfins	r8,r9,0x7,0x1
80029666:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_spi_mr.MR.pcs = (1 << AVR32_SPI_MR_PCS_SIZE) - 1;
8002966a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002966e:	30 f9       	mov	r9,15
80029670:	f1 d9 d2 04 	bfins	r8,r9,0x10,0x4
80029674:	ef 48 ff fc 	st.w	r7[-4],r8
  spi->mr = u_avr32_spi_mr.mr;
80029678:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002967c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029680:	91 19       	st.w	r8[0x4],r9

  return SPI_OK;
80029682:	30 08       	mov	r8,0
}
80029684:	10 9c       	mov	r12,r8
80029686:	2f dd       	sub	sp,-12
80029688:	e3 cd 80 80 	ldm	sp++,r7,pc

8002968c <spi_selectionMode>:

spi_status_t spi_selectionMode(volatile avr32_spi_t *spi,
                               unsigned char variable_ps,
                               unsigned char pcs_decode,
                               unsigned char delay)
{
8002968c:	eb cd 40 80 	pushm	r7,lr
80029690:	1a 97       	mov	r7,sp
80029692:	20 5d       	sub	sp,20
80029694:	ef 4c ff f8 	st.w	r7[-8],r12
80029698:	12 98       	mov	r8,r9
8002969a:	16 99       	mov	r9,r11
8002969c:	ef 69 ff f4 	st.b	r7[-12],r9
800296a0:	14 99       	mov	r9,r10
800296a2:	ef 69 ff f0 	st.b	r7[-16],r9
800296a6:	ef 68 ff ec 	st.b	r7[-20],r8
  u_avr32_spi_mr_t u_avr32_spi_mr;

  if (variable_ps > 1 ||
800296aa:	ef 39 ff f4 	ld.ub	r9,r7[-12]
800296ae:	30 18       	mov	r8,1
800296b0:	f0 09 18 00 	cp.b	r9,r8
800296b4:	e0 8b 00 09 	brhi	800296c6 <spi_selectionMode+0x3a>
800296b8:	ef 39 ff f0 	ld.ub	r9,r7[-16]
800296bc:	30 18       	mov	r8,1
800296be:	f0 09 18 00 	cp.b	r9,r8
800296c2:	e0 88 00 04 	brls	800296ca <spi_selectionMode+0x3e>
      pcs_decode > 1) {
    return SPI_ERROR_ARGUMENT;
800296c6:	30 28       	mov	r8,2
800296c8:	c2 88       	rjmp	80029718 <spi_selectionMode+0x8c>
  }

  u_avr32_spi_mr.mr = spi->mr;
800296ca:	ee f8 ff f8 	ld.w	r8,r7[-8]
800296ce:	70 18       	ld.w	r8,r8[0x4]
800296d0:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_spi_mr.MR.ps = variable_ps;
800296d4:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800296d8:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800296dc:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800296e0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800296e4:	f1 d9 d0 21 	bfins	r8,r9,0x1,0x1
800296e8:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_spi_mr.MR.pcsdec = pcs_decode;
800296ec:	ef 38 ff f0 	ld.ub	r8,r7[-16]
800296f0:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800296f4:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800296f8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800296fc:	f1 d9 d0 41 	bfins	r8,r9,0x2,0x1
80029700:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_spi_mr.MR.dlybcs = delay;
80029704:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80029708:	ef 68 ff fc 	st.b	r7[-4],r8
  spi->mr = u_avr32_spi_mr.mr;
8002970c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80029710:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029714:	91 19       	st.w	r8[0x4],r9

  return SPI_OK;
80029716:	30 08       	mov	r8,0
}
80029718:	10 9c       	mov	r12,r8
8002971a:	2f bd       	sub	sp,-20
8002971c:	e3 cd 80 80 	ldm	sp++,r7,pc

80029720 <spi_selectChip>:


spi_status_t spi_selectChip(volatile avr32_spi_t *spi, unsigned char chip)
{
80029720:	eb cd 40 80 	pushm	r7,lr
80029724:	1a 97       	mov	r7,sp
80029726:	20 2d       	sub	sp,8
80029728:	ef 4c ff fc 	st.w	r7[-4],r12
8002972c:	16 98       	mov	r8,r11
8002972e:	ef 68 ff f8 	st.b	r7[-8],r8
#ifdef FREERTOS_USED
  while (pdFALSE == xSemaphoreTake(xSPIMutex, 20));
#endif

  // Assert all lines; no peripheral is selected.
  spi->mr |= AVR32_SPI_MR_PCS_MASK;
80029732:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029736:	70 18       	ld.w	r8,r8[0x4]
80029738:	10 99       	mov	r9,r8
8002973a:	ea 19 00 0f 	orh	r9,0xf
8002973e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029742:	91 19       	st.w	r8[0x4],r9

  if (spi->mr & AVR32_SPI_MR_PCSDEC_MASK) {
80029744:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029748:	70 18       	ld.w	r8,r8[0x4]
8002974a:	e2 18 00 04 	andl	r8,0x4,COH
8002974e:	c1 90       	breq	80029780 <spi_selectChip+0x60>
    // The signal is decoded; allow up to 15 chips.
    if (chip > 14) {
80029750:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80029754:	30 e8       	mov	r8,14
80029756:	f0 09 18 00 	cp.b	r9,r8
8002975a:	e0 88 00 04 	brls	80029762 <spi_selectChip+0x42>
      return SPI_ERROR_ARGUMENT;
8002975e:	30 28       	mov	r8,2
80029760:	c2 88       	rjmp	800297b0 <spi_selectChip+0x90>
    }

    spi->mr &= ~AVR32_SPI_MR_PCS_MASK | (chip << AVR32_SPI_MR_PCS_OFFSET);
80029762:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029766:	70 19       	ld.w	r9,r8[0x4]
80029768:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8002976c:	b1 68       	lsl	r8,0x10
8002976e:	ea 18 ff f0 	orh	r8,0xfff0
80029772:	e8 18 ff ff 	orl	r8,0xffff
80029776:	10 69       	and	r9,r8
80029778:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002977c:	91 19       	st.w	r8[0x4],r9
8002977e:	c1 88       	rjmp	800297ae <spi_selectChip+0x8e>
  } else {
    if (chip > 3) {
80029780:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80029784:	30 38       	mov	r8,3
80029786:	f0 09 18 00 	cp.b	r9,r8
8002978a:	e0 88 00 04 	brls	80029792 <spi_selectChip+0x72>
      return SPI_ERROR_ARGUMENT;
8002978e:	30 28       	mov	r8,2
80029790:	c1 08       	rjmp	800297b0 <spi_selectChip+0x90>
    }

    spi->mr &= ~(1 << (AVR32_SPI_MR_PCS_OFFSET + chip));
80029792:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029796:	70 19       	ld.w	r9,r8[0x4]
80029798:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8002979c:	2f 08       	sub	r8,-16
8002979e:	30 1a       	mov	r10,1
800297a0:	f4 08 09 48 	lsl	r8,r10,r8
800297a4:	5c d8       	com	r8
800297a6:	10 69       	and	r9,r8
800297a8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800297ac:	91 19       	st.w	r8[0x4],r9
  }

  return SPI_OK;
800297ae:	30 08       	mov	r8,0
}
800297b0:	10 9c       	mov	r12,r8
800297b2:	2f ed       	sub	sp,-8
800297b4:	e3 cd 80 80 	ldm	sp++,r7,pc

800297b8 <spi_unselectChip>:


spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, unsigned char chip)
{
800297b8:	eb cd 40 80 	pushm	r7,lr
800297bc:	1a 97       	mov	r7,sp
800297be:	20 3d       	sub	sp,12
800297c0:	ef 4c ff f8 	st.w	r7[-8],r12
800297c4:	16 98       	mov	r8,r11
800297c6:	ef 68 ff f4 	st.b	r7[-12],r8
  unsigned int timeout = SPI_TIMEOUT;
800297ca:	e0 68 3a 98 	mov	r8,15000
800297ce:	ef 48 ff fc 	st.w	r7[-4],r8

  while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
800297d2:	c0 f8       	rjmp	800297f0 <spi_unselectChip+0x38>
    if (!timeout--) {
800297d4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800297d8:	58 08       	cp.w	r8,0
800297da:	5f 08       	sreq	r8
800297dc:	5c 58       	castu.b	r8
800297de:	ee f9 ff fc 	ld.w	r9,r7[-4]
800297e2:	20 19       	sub	r9,1
800297e4:	ef 49 ff fc 	st.w	r7[-4],r9
800297e8:	58 08       	cp.w	r8,0
800297ea:	c0 30       	breq	800297f0 <spi_unselectChip+0x38>
      return SPI_ERROR_TIMEOUT;
800297ec:	30 18       	mov	r8,1
800297ee:	c1 68       	rjmp	8002981a <spi_unselectChip+0x62>

spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, unsigned char chip)
{
  unsigned int timeout = SPI_TIMEOUT;

  while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
800297f0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800297f4:	70 48       	ld.w	r8,r8[0x10]
800297f6:	e2 18 02 00 	andl	r8,0x200,COH
800297fa:	ce d0       	breq	800297d4 <spi_unselectChip+0x1c>
      return SPI_ERROR_TIMEOUT;
    }
  }

  // Assert all lines; no peripheral is selected.
  spi->mr |= AVR32_SPI_MR_PCS_MASK;
800297fc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029800:	70 18       	ld.w	r8,r8[0x4]
80029802:	10 99       	mov	r9,r8
80029804:	ea 19 00 0f 	orh	r9,0xf
80029808:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002980c:	91 19       	st.w	r8[0x4],r9

  // Last transfer, so deassert the current NPCS if CSAAT is set.
  spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
8002980e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029812:	fc 19 01 00 	movh	r9,0x100
80029816:	91 09       	st.w	r8[0x0],r9

#ifdef FREERTOS_USED
  xSemaphoreGive(xSPIMutex);
#endif

  return SPI_OK;
80029818:	30 08       	mov	r8,0
}
8002981a:	10 9c       	mov	r12,r8
8002981c:	2f dd       	sub	sp,-12
8002981e:	e3 cd 80 80 	ldm	sp++,r7,pc

80029822 <spi_setupChipReg>:


spi_status_t spi_setupChipReg(volatile avr32_spi_t *spi,
                              const spi_options_t *options,
                              uint32_t pba_hz)
{
80029822:	eb cd 40 c0 	pushm	r6-r7,lr
80029826:	1a 97       	mov	r7,sp
80029828:	20 5d       	sub	sp,20
8002982a:	4e 06       	lddpc	r6,800299a8 <spi_setupChipReg+0x186>
8002982c:	1e 26       	rsub	r6,pc
8002982e:	ef 4c ff f4 	st.w	r7[-12],r12
80029832:	ef 4b ff f0 	st.w	r7[-16],r11
80029836:	ef 4a ff ec 	st.w	r7[-20],r10
  u_avr32_spi_csr_t u_avr32_spi_csr;

  if (options->spi_mode > 3 ||
8002983a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002983e:	f1 39 00 0c 	ld.ub	r9,r8[12]
80029842:	30 38       	mov	r8,3
80029844:	f0 09 18 00 	cp.b	r9,r8
80029848:	e0 8b 00 1d 	brhi	80029882 <spi_setupChipReg+0x60>
      options->stay_act > 1 ||
8002984c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80029850:	f1 39 00 0b 	ld.ub	r9,r8[11]
                              const spi_options_t *options,
                              uint32_t pba_hz)
{
  u_avr32_spi_csr_t u_avr32_spi_csr;

  if (options->spi_mode > 3 ||
80029854:	30 18       	mov	r8,1
80029856:	f0 09 18 00 	cp.b	r9,r8
8002985a:	e0 8b 00 14 	brhi	80029882 <spi_setupChipReg+0x60>
      options->stay_act > 1 ||
      options->bits < 8 || options->bits > 16) {
8002985e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80029862:	f1 39 00 08 	ld.ub	r9,r8[8]
                              const spi_options_t *options,
                              uint32_t pba_hz)
{
  u_avr32_spi_csr_t u_avr32_spi_csr;

  if (options->spi_mode > 3 ||
80029866:	30 78       	mov	r8,7
80029868:	f0 09 18 00 	cp.b	r9,r8
8002986c:	e0 88 00 0b 	brls	80029882 <spi_setupChipReg+0x60>
      options->stay_act > 1 ||
      options->bits < 8 || options->bits > 16) {
80029870:	ee f8 ff f0 	ld.w	r8,r7[-16]
80029874:	f1 39 00 08 	ld.ub	r9,r8[8]
                              const spi_options_t *options,
                              uint32_t pba_hz)
{
  u_avr32_spi_csr_t u_avr32_spi_csr;

  if (options->spi_mode > 3 ||
80029878:	31 08       	mov	r8,16
8002987a:	f0 09 18 00 	cp.b	r9,r8
8002987e:	e0 88 00 04 	brls	80029886 <spi_setupChipReg+0x64>
      options->stay_act > 1 ||
      options->bits < 8 || options->bits > 16) {
    return SPI_ERROR_ARGUMENT;
80029882:	30 28       	mov	r8,2
80029884:	c8 d8       	rjmp	8002999e <spi_setupChipReg+0x17c>
  }

  int baudDiv = getBaudDiv(options->baudrate, pba_hz);
80029886:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002988a:	70 18       	ld.w	r8,r8[0x4]
8002988c:	ee fb ff ec 	ld.w	r11,r7[-20]
80029890:	10 9c       	mov	r12,r8
80029892:	f0 16 01 19 	mcall	r6[1124]
80029896:	18 98       	mov	r8,r12
80029898:	ef 48 ff fc 	st.w	r7[-4],r8

  if (baudDiv < 0) {
8002989c:	ee f8 ff fc 	ld.w	r8,r7[-4]
800298a0:	58 08       	cp.w	r8,0
800298a2:	c0 34       	brge	800298a8 <spi_setupChipReg+0x86>
    return SPI_ERROR_ARGUMENT;
800298a4:	30 28       	mov	r8,2
800298a6:	c7 c8       	rjmp	8002999e <spi_setupChipReg+0x17c>
  }

  // Will use CSR0 offsets; these are the same for CSR0 to CSR3.
  u_avr32_spi_csr.csr = 0;
800298a8:	30 08       	mov	r8,0
800298aa:	ef 48 ff f8 	st.w	r7[-8],r8
  u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
800298ae:	ee f8 ff f0 	ld.w	r8,r7[-16]
800298b2:	f1 38 00 0c 	ld.ub	r8,r8[12]
800298b6:	a1 98       	lsr	r8,0x1
800298b8:	5c 58       	castu.b	r8
800298ba:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800298be:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800298c2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800298c6:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
800298ca:	ef 48 ff f8 	st.w	r7[-8],r8
  u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
800298ce:	ee f8 ff f0 	ld.w	r8,r7[-16]
800298d2:	f1 38 00 0c 	ld.ub	r8,r8[12]
800298d6:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800298da:	5f 08       	sreq	r8
800298dc:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800298e0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800298e4:	f1 d9 d0 21 	bfins	r8,r9,0x1,0x1
800298e8:	ef 48 ff f8 	st.w	r7[-8],r8
  u_avr32_spi_csr.CSR.csaat  = options->stay_act;
800298ec:	ee f8 ff f0 	ld.w	r8,r7[-16]
800298f0:	f1 38 00 0b 	ld.ub	r8,r8[11]
800298f4:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800298f8:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800298fc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029900:	f1 d9 d0 61 	bfins	r8,r9,0x3,0x1
80029904:	ef 48 ff f8 	st.w	r7[-8],r8
  u_avr32_spi_csr.CSR.bits   = options->bits - 8;
80029908:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002990c:	f1 38 00 08 	ld.ub	r8,r8[8]
80029910:	20 88       	sub	r8,8
80029912:	5c 58       	castu.b	r8
80029914:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80029918:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8002991c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029920:	f1 d9 d0 84 	bfins	r8,r9,0x4,0x4
80029924:	ef 48 ff f8 	st.w	r7[-8],r8
  u_avr32_spi_csr.CSR.scbr   = baudDiv;
80029928:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002992c:	5c 58       	castu.b	r8
8002992e:	ef 68 ff fa 	st.b	r7[-6],r8
  u_avr32_spi_csr.CSR.dlybs  = options->spck_delay;
80029932:	ee f8 ff f0 	ld.w	r8,r7[-16]
80029936:	f1 38 00 09 	ld.ub	r8,r8[9]
8002993a:	ef 68 ff f9 	st.b	r7[-7],r8
  u_avr32_spi_csr.CSR.dlybct = options->trans_delay;
8002993e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80029942:	f1 38 00 0a 	ld.ub	r8,r8[10]
80029946:	ef 68 ff f8 	st.b	r7[-8],r8

  switch(options->reg) {
8002994a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002994e:	11 88       	ld.ub	r8,r8[0x0]
80029950:	58 18       	cp.w	r8,1
80029952:	c1 10       	breq	80029974 <spi_setupChipReg+0x152>
80029954:	e0 89 00 05 	brgt	8002995e <spi_setupChipReg+0x13c>
80029958:	58 08       	cp.w	r8,0
8002995a:	c0 70       	breq	80029968 <spi_setupChipReg+0x146>
8002995c:	c1 e8       	rjmp	80029998 <spi_setupChipReg+0x176>
8002995e:	58 28       	cp.w	r8,2
80029960:	c1 00       	breq	80029980 <spi_setupChipReg+0x15e>
80029962:	58 38       	cp.w	r8,3
80029964:	c1 40       	breq	8002998c <spi_setupChipReg+0x16a>
80029966:	c1 98       	rjmp	80029998 <spi_setupChipReg+0x176>
    case 0:
      spi->csr0 = u_avr32_spi_csr.csr;
80029968:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002996c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80029970:	91 c9       	st.w	r8[0x30],r9
      break;
80029972:	c1 58       	rjmp	8002999c <spi_setupChipReg+0x17a>
    case 1:
      spi->csr1 = u_avr32_spi_csr.csr;
80029974:	ee f9 ff f8 	ld.w	r9,r7[-8]
80029978:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002997c:	91 d9       	st.w	r8[0x34],r9
      break;
8002997e:	c0 f8       	rjmp	8002999c <spi_setupChipReg+0x17a>
    case 2:
      spi->csr2 = u_avr32_spi_csr.csr;
80029980:	ee f9 ff f8 	ld.w	r9,r7[-8]
80029984:	ee f8 ff f4 	ld.w	r8,r7[-12]
80029988:	91 e9       	st.w	r8[0x38],r9
      break;
8002998a:	c0 98       	rjmp	8002999c <spi_setupChipReg+0x17a>
    case 3:
      spi->csr3 = u_avr32_spi_csr.csr;
8002998c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80029990:	ee f8 ff f4 	ld.w	r8,r7[-12]
80029994:	91 f9       	st.w	r8[0x3c],r9
      break;
80029996:	c0 38       	rjmp	8002999c <spi_setupChipReg+0x17a>
    default:
      return SPI_ERROR_ARGUMENT;
80029998:	30 28       	mov	r8,2
8002999a:	c0 28       	rjmp	8002999e <spi_setupChipReg+0x17c>
      while(1);
    }
  }
#endif

  return SPI_OK;
8002999c:	30 08       	mov	r8,0
}
8002999e:	10 9c       	mov	r12,r8
800299a0:	2f bd       	sub	sp,-20
800299a2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800299a6:	00 00       	add	r0,r0
800299a8:	80 02       	ld.sh	r2,r0[0x0]
800299aa:	96 b0       	ld.uh	r0,r11[0x6]

800299ac <spi_enable>:


void spi_enable(volatile avr32_spi_t *spi)
{
800299ac:	eb cd 40 80 	pushm	r7,lr
800299b0:	1a 97       	mov	r7,sp
800299b2:	20 1d       	sub	sp,4
800299b4:	ef 4c ff fc 	st.w	r7[-4],r12
  spi->cr = AVR32_SPI_CR_SPIEN_MASK;
800299b8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800299bc:	30 19       	mov	r9,1
800299be:	91 09       	st.w	r8[0x0],r9
}
800299c0:	2f fd       	sub	sp,-4
800299c2:	e3 cd 80 80 	ldm	sp++,r7,pc

800299c6 <spi_disable>:


void spi_disable(volatile avr32_spi_t *spi)
{
800299c6:	eb cd 40 80 	pushm	r7,lr
800299ca:	1a 97       	mov	r7,sp
800299cc:	20 1d       	sub	sp,4
800299ce:	ef 4c ff fc 	st.w	r7[-4],r12
  spi->cr = AVR32_SPI_CR_SPIDIS_MASK;
800299d2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800299d6:	30 29       	mov	r9,2
800299d8:	91 09       	st.w	r8[0x0],r9
}
800299da:	2f fd       	sub	sp,-4
800299dc:	e3 cd 80 80 	ldm	sp++,r7,pc

800299e0 <spi_is_enabled>:


int spi_is_enabled(volatile avr32_spi_t *spi)
{
800299e0:	eb cd 40 80 	pushm	r7,lr
800299e4:	1a 97       	mov	r7,sp
800299e6:	20 1d       	sub	sp,4
800299e8:	ef 4c ff fc 	st.w	r7[-4],r12
  return (spi->sr & AVR32_SPI_SR_SPIENS_MASK) != 0;
800299ec:	ee f8 ff fc 	ld.w	r8,r7[-4]
800299f0:	70 48       	ld.w	r8,r8[0x10]
800299f2:	e6 18 00 01 	andh	r8,0x1,COH
800299f6:	5f 18       	srne	r8
}
800299f8:	10 9c       	mov	r12,r8
800299fa:	2f fd       	sub	sp,-4
800299fc:	e3 cd 80 80 	ldm	sp++,r7,pc

80029a00 <spi_writeRegisterEmptyCheck>:

unsigned char spi_writeRegisterEmptyCheck(volatile avr32_spi_t *spi)
{
80029a00:	eb cd 40 80 	pushm	r7,lr
80029a04:	1a 97       	mov	r7,sp
80029a06:	20 1d       	sub	sp,4
80029a08:	ef 4c ff fc 	st.w	r7[-4],r12
  return ((spi->sr & AVR32_SPI_SR_TDRE_MASK) != 0);
80029a0c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029a10:	70 48       	ld.w	r8,r8[0x10]
80029a12:	e2 18 00 02 	andl	r8,0x2,COH
80029a16:	5f 18       	srne	r8
}
80029a18:	10 9c       	mov	r12,r8
80029a1a:	2f fd       	sub	sp,-4
80029a1c:	e3 cd 80 80 	ldm	sp++,r7,pc

80029a20 <spi_write>:


spi_status_t spi_write(volatile avr32_spi_t *spi, uint16_t data)
{
80029a20:	eb cd 40 80 	pushm	r7,lr
80029a24:	1a 97       	mov	r7,sp
80029a26:	20 3d       	sub	sp,12
80029a28:	ef 4c ff f8 	st.w	r7[-8],r12
80029a2c:	16 98       	mov	r8,r11
80029a2e:	ef 58 ff f4 	st.h	r7[-12],r8
  unsigned int timeout = SPI_TIMEOUT;
80029a32:	e0 68 3a 98 	mov	r8,15000
80029a36:	ef 48 ff fc 	st.w	r7[-4],r8

  while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
80029a3a:	c0 f8       	rjmp	80029a58 <spi_write+0x38>
    if (!timeout--) {
80029a3c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029a40:	58 08       	cp.w	r8,0
80029a42:	5f 08       	sreq	r8
80029a44:	5c 58       	castu.b	r8
80029a46:	ee f9 ff fc 	ld.w	r9,r7[-4]
80029a4a:	20 19       	sub	r9,1
80029a4c:	ef 49 ff fc 	st.w	r7[-4],r9
80029a50:	58 08       	cp.w	r8,0
80029a52:	c0 30       	breq	80029a58 <spi_write+0x38>
      return SPI_ERROR_TIMEOUT;
80029a54:	30 18       	mov	r8,1
80029a56:	c0 d8       	rjmp	80029a70 <spi_write+0x50>

spi_status_t spi_write(volatile avr32_spi_t *spi, uint16_t data)
{
  unsigned int timeout = SPI_TIMEOUT;

  while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
80029a58:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029a5c:	70 48       	ld.w	r8,r8[0x10]
80029a5e:	e2 18 00 02 	andl	r8,0x2,COH
80029a62:	ce d0       	breq	80029a3c <spi_write+0x1c>
    if (!timeout--) {
      return SPI_ERROR_TIMEOUT;
    }
  }

  spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
80029a64:	ef 19 ff f4 	ld.uh	r9,r7[-12]
80029a68:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029a6c:	91 39       	st.w	r8[0xc],r9

  return SPI_OK;
80029a6e:	30 08       	mov	r8,0
}
80029a70:	10 9c       	mov	r12,r8
80029a72:	2f dd       	sub	sp,-12
80029a74:	e3 cd 80 80 	ldm	sp++,r7,pc

80029a78 <spi_variableSlaveWrite>:


spi_status_t spi_variableSlaveWrite(volatile avr32_spi_t *spi, uint16_t data,
                                    uint8_t pcs, uint8_t lastxfer)
{
80029a78:	eb cd 40 80 	pushm	r7,lr
80029a7c:	1a 97       	mov	r7,sp
80029a7e:	20 5d       	sub	sp,20
80029a80:	ef 4c ff f8 	st.w	r7[-8],r12
80029a84:	12 98       	mov	r8,r9
80029a86:	16 99       	mov	r9,r11
80029a88:	ef 59 ff f4 	st.h	r7[-12],r9
80029a8c:	14 99       	mov	r9,r10
80029a8e:	ef 69 ff f0 	st.b	r7[-16],r9
80029a92:	ef 68 ff ec 	st.b	r7[-20],r8
  unsigned int timeout = SPI_TIMEOUT;
80029a96:	e0 68 3a 98 	mov	r8,15000
80029a9a:	ef 48 ff fc 	st.w	r7[-4],r8

  if (pcs > 14 || lastxfer > 1) {
80029a9e:	ef 39 ff f0 	ld.ub	r9,r7[-16]
80029aa2:	30 e8       	mov	r8,14
80029aa4:	f0 09 18 00 	cp.b	r9,r8
80029aa8:	e0 8b 00 09 	brhi	80029aba <spi_variableSlaveWrite+0x42>
80029aac:	ef 39 ff ec 	ld.ub	r9,r7[-20]
80029ab0:	30 18       	mov	r8,1
80029ab2:	f0 09 18 00 	cp.b	r9,r8
80029ab6:	e0 88 00 12 	brls	80029ada <spi_variableSlaveWrite+0x62>
    return SPI_ERROR_ARGUMENT;
80029aba:	30 28       	mov	r8,2
80029abc:	c2 68       	rjmp	80029b08 <spi_variableSlaveWrite+0x90>
  }

  while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
    if (!timeout--) {
80029abe:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029ac2:	58 08       	cp.w	r8,0
80029ac4:	5f 08       	sreq	r8
80029ac6:	5c 58       	castu.b	r8
80029ac8:	ee f9 ff fc 	ld.w	r9,r7[-4]
80029acc:	20 19       	sub	r9,1
80029ace:	ef 49 ff fc 	st.w	r7[-4],r9
80029ad2:	58 08       	cp.w	r8,0
80029ad4:	c0 40       	breq	80029adc <spi_variableSlaveWrite+0x64>
      return SPI_ERROR_TIMEOUT;
80029ad6:	30 18       	mov	r8,1
80029ad8:	c1 88       	rjmp	80029b08 <spi_variableSlaveWrite+0x90>

  if (pcs > 14 || lastxfer > 1) {
    return SPI_ERROR_ARGUMENT;
  }

  while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
80029ada:	d7 03       	nop
80029adc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029ae0:	70 48       	ld.w	r8,r8[0x10]
80029ae2:	e2 18 00 02 	andl	r8,0x2,COH
80029ae6:	ce c0       	breq	80029abe <spi_variableSlaveWrite+0x46>
    if (!timeout--) {
      return SPI_ERROR_TIMEOUT;
    }
  }

  spi->tdr = (data << AVR32_SPI_TDR_TD_OFFSET) |
80029ae8:	ef 19 ff f4 	ld.uh	r9,r7[-12]
             (pcs << AVR32_SPI_TDR_PCS_OFFSET) |
80029aec:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80029af0:	b1 68       	lsl	r8,0x10
80029af2:	10 49       	or	r9,r8
             (lastxfer << AVR32_SPI_TDR_LASTXFER_OFFSET);
80029af4:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80029af8:	b9 68       	lsl	r8,0x18
    if (!timeout--) {
      return SPI_ERROR_TIMEOUT;
    }
  }

  spi->tdr = (data << AVR32_SPI_TDR_TD_OFFSET) |
80029afa:	f3 e8 10 08 	or	r8,r9,r8
80029afe:	10 99       	mov	r9,r8
80029b00:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029b04:	91 39       	st.w	r8[0xc],r9
             (pcs << AVR32_SPI_TDR_PCS_OFFSET) |
             (lastxfer << AVR32_SPI_TDR_LASTXFER_OFFSET);

  return SPI_OK;
80029b06:	30 08       	mov	r8,0
}
80029b08:	10 9c       	mov	r12,r8
80029b0a:	2f bd       	sub	sp,-20
80029b0c:	e3 cd 80 80 	ldm	sp++,r7,pc

80029b10 <spi_writeEndCheck>:


unsigned char spi_writeEndCheck(volatile avr32_spi_t *spi)
{
80029b10:	eb cd 40 80 	pushm	r7,lr
80029b14:	1a 97       	mov	r7,sp
80029b16:	20 1d       	sub	sp,4
80029b18:	ef 4c ff fc 	st.w	r7[-4],r12
  return ((spi->sr & AVR32_SPI_SR_TXEMPTY_MASK) != 0);
80029b1c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029b20:	70 48       	ld.w	r8,r8[0x10]
80029b22:	e2 18 02 00 	andl	r8,0x200,COH
80029b26:	5f 18       	srne	r8
}
80029b28:	10 9c       	mov	r12,r8
80029b2a:	2f fd       	sub	sp,-4
80029b2c:	e3 cd 80 80 	ldm	sp++,r7,pc

80029b30 <spi_readRegisterFullCheck>:


unsigned char spi_readRegisterFullCheck(volatile avr32_spi_t *spi)
{
80029b30:	eb cd 40 80 	pushm	r7,lr
80029b34:	1a 97       	mov	r7,sp
80029b36:	20 1d       	sub	sp,4
80029b38:	ef 4c ff fc 	st.w	r7[-4],r12
  return ((spi->sr & AVR32_SPI_SR_RDRF_MASK) != 0);
80029b3c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029b40:	70 48       	ld.w	r8,r8[0x10]
80029b42:	5c 58       	castu.b	r8
80029b44:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
}
80029b48:	10 9c       	mov	r12,r8
80029b4a:	2f fd       	sub	sp,-4
80029b4c:	e3 cd 80 80 	ldm	sp++,r7,pc

80029b50 <spi_read>:


spi_status_t spi_read(volatile avr32_spi_t *spi, unsigned short *data)
{
80029b50:	eb cd 40 80 	pushm	r7,lr
80029b54:	1a 97       	mov	r7,sp
80029b56:	20 3d       	sub	sp,12
80029b58:	ef 4c ff f8 	st.w	r7[-8],r12
80029b5c:	ef 4b ff f4 	st.w	r7[-12],r11
  unsigned int timeout = SPI_TIMEOUT;
80029b60:	e0 68 3a 98 	mov	r8,15000
80029b64:	ef 48 ff fc 	st.w	r7[-4],r8

  while ((spi->sr & (AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) !=
80029b68:	c0 f8       	rjmp	80029b86 <spi_read+0x36>
         (AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) {
    if (!timeout--) {
80029b6a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029b6e:	58 08       	cp.w	r8,0
80029b70:	5f 08       	sreq	r8
80029b72:	5c 58       	castu.b	r8
80029b74:	ee f9 ff fc 	ld.w	r9,r7[-4]
80029b78:	20 19       	sub	r9,1
80029b7a:	ef 49 ff fc 	st.w	r7[-4],r9
80029b7e:	58 08       	cp.w	r8,0
80029b80:	c0 30       	breq	80029b86 <spi_read+0x36>
      return SPI_ERROR_TIMEOUT;
80029b82:	30 18       	mov	r8,1
80029b84:	c1 18       	rjmp	80029ba6 <spi_read+0x56>

spi_status_t spi_read(volatile avr32_spi_t *spi, unsigned short *data)
{
  unsigned int timeout = SPI_TIMEOUT;

  while ((spi->sr & (AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) !=
80029b86:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029b8a:	70 48       	ld.w	r8,r8[0x10]
80029b8c:	e2 18 02 01 	andl	r8,0x201,COH
80029b90:	e0 48 02 01 	cp.w	r8,513
80029b94:	ce b1       	brne	80029b6a <spi_read+0x1a>
    if (!timeout--) {
      return SPI_ERROR_TIMEOUT;
    }
  }

  *data = spi->rdr >> AVR32_SPI_RDR_RD_OFFSET;
80029b96:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029b9a:	70 28       	ld.w	r8,r8[0x8]
80029b9c:	5c 88       	casts.h	r8
80029b9e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80029ba2:	b2 08       	st.h	r9[0x0],r8

  return SPI_OK;
80029ba4:	30 08       	mov	r8,0
}
80029ba6:	10 9c       	mov	r12,r8
80029ba8:	2f dd       	sub	sp,-12
80029baa:	e3 cd 80 80 	ldm	sp++,r7,pc

80029bae <spi_getStatus>:


unsigned char spi_getStatus(volatile avr32_spi_t *spi)
{
80029bae:	eb cd 40 80 	pushm	r7,lr
80029bb2:	1a 97       	mov	r7,sp
80029bb4:	20 3d       	sub	sp,12
80029bb6:	ef 4c ff f4 	st.w	r7[-12],r12
  spi_status_t ret = SPI_OK;
80029bba:	30 08       	mov	r8,0
80029bbc:	ef 48 ff f8 	st.w	r7[-8],r8
  unsigned long sr = spi->sr;
80029bc0:	ee f8 ff f4 	ld.w	r8,r7[-12]
80029bc4:	70 48       	ld.w	r8,r8[0x10]
80029bc6:	ef 48 ff fc 	st.w	r7[-4],r8

  if (sr & AVR32_SPI_SR_OVRES_MASK) {
80029bca:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029bce:	e2 18 00 08 	andl	r8,0x8,COH
80029bd2:	c0 40       	breq	80029bda <spi_getStatus+0x2c>
    ret = SPI_ERROR_OVERRUN;
80029bd4:	30 38       	mov	r8,3
80029bd6:	ef 48 ff f8 	st.w	r7[-8],r8
  }

  if (sr & AVR32_SPI_SR_MODF_MASK) {
80029bda:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029bde:	e2 18 00 04 	andl	r8,0x4,COH
80029be2:	c0 60       	breq	80029bee <spi_getStatus+0x40>
    ret += SPI_ERROR_MODE_FAULT;
80029be4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029be8:	2f c8       	sub	r8,-4
80029bea:	ef 48 ff f8 	st.w	r7[-8],r8
  }

  if (ret == (SPI_ERROR_OVERRUN + SPI_ERROR_MODE_FAULT)) {
80029bee:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029bf2:	58 78       	cp.w	r8,7
80029bf4:	c0 31       	brne	80029bfa <spi_getStatus+0x4c>
    return SPI_ERROR_OVERRUN_AND_MODE_FAULT;
80029bf6:	30 58       	mov	r8,5
80029bf8:	c0 b8       	rjmp	80029c0e <spi_getStatus+0x60>
  }
  else if (ret > 0) {
80029bfa:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029bfe:	58 08       	cp.w	r8,0
80029c00:	e0 8a 00 06 	brle	80029c0c <spi_getStatus+0x5e>
    return ret;
80029c04:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029c08:	5c 58       	castu.b	r8
80029c0a:	c0 28       	rjmp	80029c0e <spi_getStatus+0x60>
  } else {
    return SPI_OK;
80029c0c:	30 08       	mov	r8,0
  }
}
80029c0e:	10 9c       	mov	r12,r8
80029c10:	2f dd       	sub	sp,-12
80029c12:	e3 cd 80 80 	ldm	sp++,r7,pc
	...

80029c18 <cpu_irq_save>:
#endif

typedef uint32_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
80029c18:	eb cd 40 80 	pushm	r7,lr
80029c1c:	1a 97       	mov	r7,sp
80029c1e:	20 1d       	sub	sp,4
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80029c20:	e1 b8 00 00 	mfsr	r8,0x0
80029c24:	ef 48 ff fc 	st.w	r7[-4],r8
	cpu_irq_disable();
80029c28:	d3 03       	ssrf	0x10

	return flags;
80029c2a:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80029c2e:	10 9c       	mov	r12,r8
80029c30:	2f fd       	sub	sp,-4
80029c32:	e3 cd 80 80 	ldm	sp++,r7,pc

80029c36 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
80029c36:	eb cd 40 80 	pushm	r7,lr
80029c3a:	1a 97       	mov	r7,sp
80029c3c:	20 1d       	sub	sp,4
80029c3e:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
80029c42:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029c46:	e6 18 00 01 	andh	r8,0x1,COH
80029c4a:	5f 08       	sreq	r8
80029c4c:	5c 58       	castu.b	r8
}
80029c4e:	10 9c       	mov	r12,r8
80029c50:	2f fd       	sub	sp,-4
80029c52:	e3 cd 80 80 	ldm	sp++,r7,pc

80029c56 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
80029c56:	eb cd 40 80 	pushm	r7,lr
80029c5a:	1a 97       	mov	r7,sp
80029c5c:	20 1d       	sub	sp,4
80029c5e:	ef 4c ff fc 	st.w	r7[-4],r12
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80029c62:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029c66:	e3 b8 00 00 	mtsr	0x0,r8
#endif
	barrier();
}
80029c6a:	2f fd       	sub	sp,-4
80029c6c:	e3 cd 80 80 	ldm	sp++,r7,pc

80029c70 <twim_master_interrupt_handler>:
/** 
 * \internal  
 * \brief TWI interrupt handler.
 */
ISR(twim_master_interrupt_handler,CONF_TWIM_IRQ_GROUP,CONF_TWIM_IRQ_LEVEL)
{
80029c70:	eb cd 40 c0 	pushm	r6-r7,lr
80029c74:	1a 97       	mov	r7,sp
80029c76:	20 1d       	sub	sp,4
80029c78:	4d 96       	lddpc	r6,80029ddc <twim_master_interrupt_handler+0x16c>
80029c7a:	1e 26       	rsub	r6,pc
	// get masked status register value
	uint32_t status = twim_inst->sr & twim_it_mask;
80029c7c:	ec f8 00 40 	ld.w	r8,r6[64]
80029c80:	70 08       	ld.w	r8,r8[0x0]
80029c82:	70 79       	ld.w	r9,r8[0x1c]
80029c84:	ec f8 01 00 	ld.w	r8,r6[256]
80029c88:	70 08       	ld.w	r8,r8[0x0]
80029c8a:	f3 e8 00 08 	and	r8,r9,r8
80029c8e:	ef 48 ff fc 	st.w	r7[-4],r8
	// this is a NACK
	if (status & AVR32_TWIM_SR_STD_MASK) {
80029c92:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029c96:	e2 18 07 00 	andl	r8,0x700,COH
80029c9a:	c2 30       	breq	80029ce0 <twim_master_interrupt_handler+0x70>
		//if we get a nak, clear the valid bit in cmdr, 
		//otherwise the command will be resent.
		transfer_status =(status & AVR32_TWIM_IER_NAK_MASK) ? 
80029c9c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029ca0:	e2 18 03 00 	andl	r8,0x300,COH
80029ca4:	c0 30       	breq	80029caa <twim_master_interrupt_handler+0x3a>
80029ca6:	3f c8       	mov	r8,-4
80029ca8:	c0 28       	rjmp	80029cac <twim_master_interrupt_handler+0x3c>
80029caa:	3f e8       	mov	r8,-2
80029cac:	ec f9 00 78 	ld.w	r9,r6[120]
80029cb0:	93 08       	st.w	r9[0x0],r8
							TWI_RECEIVE_NACK : TWI_ARBITRATION_LOST;
		twim_inst->CMDR.valid = 0;
80029cb2:	ec f8 00 40 	ld.w	r8,r6[64]
80029cb6:	70 09       	ld.w	r9,r8[0x0]
80029cb8:	72 38       	ld.w	r8,r9[0xc]
80029cba:	30 0a       	mov	r10,0
80029cbc:	f1 da d1 e1 	bfins	r8,r10,0xf,0x1
80029cc0:	93 38       	st.w	r9[0xc],r8
		twim_inst->scr = ~0UL;
80029cc2:	ec f8 00 40 	ld.w	r8,r6[64]
80029cc6:	70 08       	ld.w	r8,r8[0x0]
80029cc8:	3f f9       	mov	r9,-1
80029cca:	91 b9       	st.w	r8[0x2c],r9
		twim_inst->idr = ~0UL;
80029ccc:	ec f8 00 40 	ld.w	r8,r6[64]
80029cd0:	70 08       	ld.w	r8,r8[0x0]
80029cd2:	3f f9       	mov	r9,-1
80029cd4:	91 99       	st.w	r8[0x24],r9
		twim_next = false;
80029cd6:	ec f9 00 b8 	ld.w	r9,r6[184]
80029cda:	30 08       	mov	r8,0
80029cdc:	b2 88       	st.b	r9[0x0],r8
80029cde:	c7 a8       	rjmp	80029dd2 <twim_master_interrupt_handler+0x162>
	}
	// this is a RXRDY
	else if (status & AVR32_TWIM_SR_RXRDY_MASK) {
80029ce0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029ce4:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80029ce8:	5c 58       	castu.b	r8
80029cea:	c2 d0       	breq	80029d44 <twim_master_interrupt_handler+0xd4>
		// get data from Receive Holding Register
		*twim_rx_data = twim_inst->rhr;
80029cec:	ec f8 00 bc 	ld.w	r8,r6[188]
80029cf0:	70 09       	ld.w	r9,r8[0x0]
80029cf2:	ec f8 00 40 	ld.w	r8,r6[64]
80029cf6:	70 08       	ld.w	r8,r8[0x0]
80029cf8:	70 58       	ld.w	r8,r8[0x14]
80029cfa:	5c 58       	castu.b	r8
80029cfc:	b2 88       	st.b	r9[0x0],r8
		twim_rx_data++;
80029cfe:	ec f8 00 bc 	ld.w	r8,r6[188]
80029d02:	70 08       	ld.w	r8,r8[0x0]
80029d04:	f0 c9 ff ff 	sub	r9,r8,-1
80029d08:	ec f8 00 bc 	ld.w	r8,r6[188]
80029d0c:	91 09       	st.w	r8[0x0],r9
		// decrease recieved bytes number
		twim_rx_nb_bytes--;
80029d0e:	ec f8 01 44 	ld.w	r8,r6[324]
80029d12:	70 08       	ld.w	r8,r8[0x0]
80029d14:	f0 c9 00 01 	sub	r9,r8,1
80029d18:	ec f8 01 44 	ld.w	r8,r6[324]
80029d1c:	91 09       	st.w	r8[0x0],r9
		// receive complete
		if (twim_rx_nb_bytes == 0) {
80029d1e:	ec f8 01 44 	ld.w	r8,r6[324]
80029d22:	70 08       	ld.w	r8,r8[0x0]
80029d24:	58 08       	cp.w	r8,0
80029d26:	c5 61       	brne	80029dd2 <twim_master_interrupt_handler+0x162>
			// finish the receive operation
			twim_inst->idr = AVR32_TWIM_IDR_RXRDY_MASK;
80029d28:	ec f8 00 40 	ld.w	r8,r6[64]
80029d2c:	70 08       	ld.w	r8,r8[0x0]
80029d2e:	30 19       	mov	r9,1
80029d30:	91 99       	st.w	r8[0x24],r9
			// set busy to false
			twim_next = false;
80029d32:	ec f9 00 b8 	ld.w	r9,r6[184]
80029d36:	30 08       	mov	r8,0
80029d38:	b2 88       	st.b	r9[0x0],r8
			transfer_status=true;
80029d3a:	ec f8 00 78 	ld.w	r8,r6[120]
80029d3e:	30 19       	mov	r9,1
80029d40:	91 09       	st.w	r8[0x0],r9
80029d42:	c4 88       	rjmp	80029dd2 <twim_master_interrupt_handler+0x162>
			
		}
	}
	// this is a TXRDY
	else if (status & AVR32_TWIM_SR_TXRDY_MASK) {
80029d44:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029d48:	e2 18 00 02 	andl	r8,0x2,COH
80029d4c:	c4 30       	breq	80029dd2 <twim_master_interrupt_handler+0x162>
		// no more bytes to transmit
		if (twim_tx_nb_bytes == 0) {
80029d4e:	ec f8 00 84 	ld.w	r8,r6[132]
80029d52:	70 08       	ld.w	r8,r8[0x0]
80029d54:	58 08       	cp.w	r8,0
80029d56:	c0 b1       	brne	80029d6c <twim_master_interrupt_handler+0xfc>
			// finish the receive operation
			twim_inst->idr = AVR32_TWIM_IDR_TXRDY_MASK;
80029d58:	ec f8 00 40 	ld.w	r8,r6[64]
80029d5c:	70 08       	ld.w	r8,r8[0x0]
80029d5e:	30 29       	mov	r9,2
80029d60:	91 99       	st.w	r8[0x24],r9
			// set busy to false
			twim_next = false;
80029d62:	ec f9 00 b8 	ld.w	r9,r6[184]
80029d66:	30 08       	mov	r8,0
80029d68:	b2 88       	st.b	r9[0x0],r8
80029d6a:	c3 48       	rjmp	80029dd2 <twim_master_interrupt_handler+0x162>
		} else {
			// put the byte in the Transmit Holding Register
			twim_inst->thr = *twim_tx_data++;
80029d6c:	ec f8 00 40 	ld.w	r8,r6[64]
80029d70:	70 0a       	ld.w	r10,r8[0x0]
80029d72:	ec f8 00 90 	ld.w	r8,r6[144]
80029d76:	70 08       	ld.w	r8,r8[0x0]
80029d78:	11 89       	ld.ub	r9,r8[0x0]
80029d7a:	5c 59       	castu.b	r9
80029d7c:	95 69       	st.w	r10[0x18],r9
80029d7e:	f0 c9 ff ff 	sub	r9,r8,-1
80029d82:	ec f8 00 90 	ld.w	r8,r6[144]
80029d86:	91 09       	st.w	r8[0x0],r9
			// decrease transmited bytes number
			twim_tx_nb_bytes--;
80029d88:	ec f8 00 84 	ld.w	r8,r6[132]
80029d8c:	70 08       	ld.w	r8,r8[0x0]
80029d8e:	f0 c9 00 01 	sub	r9,r8,1
80029d92:	ec f8 00 84 	ld.w	r8,r6[132]
80029d96:	91 09       	st.w	r8[0x0],r9
			if (twim_tx_nb_bytes == 0) {
80029d98:	ec f8 00 84 	ld.w	r8,r6[132]
80029d9c:	70 08       	ld.w	r8,r8[0x0]
80029d9e:	58 08       	cp.w	r8,0
80029da0:	c1 91       	brne	80029dd2 <twim_master_interrupt_handler+0x162>
				// Check for next transfer
				if(twim_next) {
80029da2:	ec f8 00 b8 	ld.w	r8,r6[184]
80029da6:	11 88       	ld.ub	r8,r8[0x0]
80029da8:	5c 58       	castu.b	r8
80029daa:	c1 40       	breq	80029dd2 <twim_master_interrupt_handler+0x162>
					twim_next = false;
80029dac:	ec f9 00 b8 	ld.w	r9,r6[184]
80029db0:	30 08       	mov	r8,0
80029db2:	b2 88       	st.b	r9[0x0],r8
					twim_tx_nb_bytes = twim_package->length;
80029db4:	ec f8 01 e4 	ld.w	r8,r6[484]
80029db8:	70 08       	ld.w	r8,r8[0x0]
80029dba:	70 49       	ld.w	r9,r8[0x10]
80029dbc:	ec f8 00 84 	ld.w	r8,r6[132]
80029dc0:	91 09       	st.w	r8[0x0],r9
					twim_tx_data = twim_package->buffer;
80029dc2:	ec f8 01 e4 	ld.w	r8,r6[484]
80029dc6:	70 08       	ld.w	r8,r8[0x0]
80029dc8:	70 38       	ld.w	r8,r8[0xc]
80029dca:	10 99       	mov	r9,r8
80029dcc:	ec f8 00 90 	ld.w	r8,r6[144]
80029dd0:	91 09       	st.w	r8[0x0],r9
				}
			}
		}
	}
	return;
}
80029dd2:	2f fd       	sub	sp,-4
80029dd4:	e3 cd 40 c0 	ldm	sp++,r6-r7,lr
80029dd8:	d6 03       	rete
80029dda:	00 00       	add	r0,r0
80029ddc:	80 02       	ld.sh	r2,r0[0x0]
80029dde:	9a fe       	ld.uh	lr,sp[0xe]

80029de0 <twim_master_interrupt_handler2>:
/** 
 * \internal  
 * \brief TWI interrupt handler.
 */
ISR(twim_master_interrupt_handler2,AVR32_TWIM1_GROUP,CONF_TWIM_IRQ_LEVEL)
{
80029de0:	eb cd 40 c0 	pushm	r6-r7,lr
80029de4:	1a 97       	mov	r7,sp
80029de6:	20 1d       	sub	sp,4
80029de8:	4d 76       	lddpc	r6,80029f44 <twim_master_interrupt_handler2+0x164>
80029dea:	1e 26       	rsub	r6,pc
	// get masked status register value
	uint32_t status = twim_inst->sr & twim_it_mask;
80029dec:	ec f8 00 40 	ld.w	r8,r6[64]
80029df0:	70 08       	ld.w	r8,r8[0x0]
80029df2:	70 79       	ld.w	r9,r8[0x1c]
80029df4:	ec f8 01 00 	ld.w	r8,r6[256]
80029df8:	70 08       	ld.w	r8,r8[0x0]
80029dfa:	f3 e8 00 08 	and	r8,r9,r8
80029dfe:	ef 48 ff fc 	st.w	r7[-4],r8
	// this is a NACK
	if (status & AVR32_TWIM_SR_STD_MASK) {
80029e02:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029e06:	e2 18 07 00 	andl	r8,0x700,COH
80029e0a:	c2 30       	breq	80029e50 <twim_master_interrupt_handler2+0x70>
		//if we get a nak, clear the valid bit in cmdr, 
		//otherwise the command will be resent.
		transfer_status =(status & AVR32_TWIM_IER_NAK_MASK) ? 
80029e0c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029e10:	e2 18 03 00 	andl	r8,0x300,COH
80029e14:	c0 30       	breq	80029e1a <twim_master_interrupt_handler2+0x3a>
80029e16:	3f c8       	mov	r8,-4
80029e18:	c0 28       	rjmp	80029e1c <twim_master_interrupt_handler2+0x3c>
80029e1a:	3f e8       	mov	r8,-2
80029e1c:	ec f9 00 78 	ld.w	r9,r6[120]
80029e20:	93 08       	st.w	r9[0x0],r8
							TWI_RECEIVE_NACK : TWI_ARBITRATION_LOST;
		twim_inst->CMDR.valid = 0;
80029e22:	ec f8 00 40 	ld.w	r8,r6[64]
80029e26:	70 09       	ld.w	r9,r8[0x0]
80029e28:	72 38       	ld.w	r8,r9[0xc]
80029e2a:	30 0a       	mov	r10,0
80029e2c:	f1 da d1 e1 	bfins	r8,r10,0xf,0x1
80029e30:	93 38       	st.w	r9[0xc],r8
		twim_inst->scr = ~0UL;
80029e32:	ec f8 00 40 	ld.w	r8,r6[64]
80029e36:	70 08       	ld.w	r8,r8[0x0]
80029e38:	3f f9       	mov	r9,-1
80029e3a:	91 b9       	st.w	r8[0x2c],r9
		twim_inst->idr = ~0UL;
80029e3c:	ec f8 00 40 	ld.w	r8,r6[64]
80029e40:	70 08       	ld.w	r8,r8[0x0]
80029e42:	3f f9       	mov	r9,-1
80029e44:	91 99       	st.w	r8[0x24],r9
		twim_next = false;
80029e46:	ec f9 00 b8 	ld.w	r9,r6[184]
80029e4a:	30 08       	mov	r8,0
80029e4c:	b2 88       	st.b	r9[0x0],r8
80029e4e:	c7 68       	rjmp	80029f3a <twim_master_interrupt_handler2+0x15a>
	}
	// this is a RXRDY
	else if (status & AVR32_TWIM_SR_RXRDY_MASK) {
80029e50:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029e54:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80029e58:	5c 58       	castu.b	r8
80029e5a:	c2 90       	breq	80029eac <twim_master_interrupt_handler2+0xcc>
		// get data from Receive Holding Register
		*twim_rx_data = twim_inst->rhr;
80029e5c:	ec f8 00 bc 	ld.w	r8,r6[188]
80029e60:	70 09       	ld.w	r9,r8[0x0]
80029e62:	ec f8 00 40 	ld.w	r8,r6[64]
80029e66:	70 08       	ld.w	r8,r8[0x0]
80029e68:	70 58       	ld.w	r8,r8[0x14]
80029e6a:	5c 58       	castu.b	r8
80029e6c:	b2 88       	st.b	r9[0x0],r8
		twim_rx_data++;
80029e6e:	ec f8 00 bc 	ld.w	r8,r6[188]
80029e72:	70 08       	ld.w	r8,r8[0x0]
80029e74:	f0 c9 ff ff 	sub	r9,r8,-1
80029e78:	ec f8 00 bc 	ld.w	r8,r6[188]
80029e7c:	91 09       	st.w	r8[0x0],r9
		// decrease recieved bytes number
		twim_rx_nb_bytes--;
80029e7e:	ec f8 01 44 	ld.w	r8,r6[324]
80029e82:	70 08       	ld.w	r8,r8[0x0]
80029e84:	f0 c9 00 01 	sub	r9,r8,1
80029e88:	ec f8 01 44 	ld.w	r8,r6[324]
80029e8c:	91 09       	st.w	r8[0x0],r9
		// receive complete
		if (twim_rx_nb_bytes == 0) {
80029e8e:	ec f8 01 44 	ld.w	r8,r6[324]
80029e92:	70 08       	ld.w	r8,r8[0x0]
80029e94:	58 08       	cp.w	r8,0
80029e96:	c5 21       	brne	80029f3a <twim_master_interrupt_handler2+0x15a>
			// finish the receive operation
			twim_inst->idr = AVR32_TWIM_IDR_RXRDY_MASK;
80029e98:	ec f8 00 40 	ld.w	r8,r6[64]
80029e9c:	70 08       	ld.w	r8,r8[0x0]
80029e9e:	30 19       	mov	r9,1
80029ea0:	91 99       	st.w	r8[0x24],r9
			// set busy to false
			twim_next = false;
80029ea2:	ec f9 00 b8 	ld.w	r9,r6[184]
80029ea6:	30 08       	mov	r8,0
80029ea8:	b2 88       	st.b	r9[0x0],r8
80029eaa:	c4 88       	rjmp	80029f3a <twim_master_interrupt_handler2+0x15a>
		}
	}
	// this is a TXRDY
	else if (status & AVR32_TWIM_SR_TXRDY_MASK) {
80029eac:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029eb0:	e2 18 00 02 	andl	r8,0x2,COH
80029eb4:	c4 30       	breq	80029f3a <twim_master_interrupt_handler2+0x15a>
		// no more bytes to transmit
		if (twim_tx_nb_bytes == 0) {
80029eb6:	ec f8 00 84 	ld.w	r8,r6[132]
80029eba:	70 08       	ld.w	r8,r8[0x0]
80029ebc:	58 08       	cp.w	r8,0
80029ebe:	c0 b1       	brne	80029ed4 <twim_master_interrupt_handler2+0xf4>
			// finish the receive operation
			twim_inst->idr = AVR32_TWIM_IDR_TXRDY_MASK;
80029ec0:	ec f8 00 40 	ld.w	r8,r6[64]
80029ec4:	70 08       	ld.w	r8,r8[0x0]
80029ec6:	30 29       	mov	r9,2
80029ec8:	91 99       	st.w	r8[0x24],r9
			// set busy to false
			twim_next = false;
80029eca:	ec f9 00 b8 	ld.w	r9,r6[184]
80029ece:	30 08       	mov	r8,0
80029ed0:	b2 88       	st.b	r9[0x0],r8
80029ed2:	c3 48       	rjmp	80029f3a <twim_master_interrupt_handler2+0x15a>
		} else {
			// put the byte in the Transmit Holding Register
			twim_inst->thr = *twim_tx_data++;
80029ed4:	ec f8 00 40 	ld.w	r8,r6[64]
80029ed8:	70 0a       	ld.w	r10,r8[0x0]
80029eda:	ec f8 00 90 	ld.w	r8,r6[144]
80029ede:	70 08       	ld.w	r8,r8[0x0]
80029ee0:	11 89       	ld.ub	r9,r8[0x0]
80029ee2:	5c 59       	castu.b	r9
80029ee4:	95 69       	st.w	r10[0x18],r9
80029ee6:	f0 c9 ff ff 	sub	r9,r8,-1
80029eea:	ec f8 00 90 	ld.w	r8,r6[144]
80029eee:	91 09       	st.w	r8[0x0],r9
			// decrease transmited bytes number
			twim_tx_nb_bytes--;
80029ef0:	ec f8 00 84 	ld.w	r8,r6[132]
80029ef4:	70 08       	ld.w	r8,r8[0x0]
80029ef6:	f0 c9 00 01 	sub	r9,r8,1
80029efa:	ec f8 00 84 	ld.w	r8,r6[132]
80029efe:	91 09       	st.w	r8[0x0],r9
			if (twim_tx_nb_bytes == 0) {
80029f00:	ec f8 00 84 	ld.w	r8,r6[132]
80029f04:	70 08       	ld.w	r8,r8[0x0]
80029f06:	58 08       	cp.w	r8,0
80029f08:	c1 91       	brne	80029f3a <twim_master_interrupt_handler2+0x15a>
				// Check for next transfer
				if(twim_next) {
80029f0a:	ec f8 00 b8 	ld.w	r8,r6[184]
80029f0e:	11 88       	ld.ub	r8,r8[0x0]
80029f10:	5c 58       	castu.b	r8
80029f12:	c1 40       	breq	80029f3a <twim_master_interrupt_handler2+0x15a>
					twim_next = false;
80029f14:	ec f9 00 b8 	ld.w	r9,r6[184]
80029f18:	30 08       	mov	r8,0
80029f1a:	b2 88       	st.b	r9[0x0],r8
					twim_tx_nb_bytes = twim_package->length;
80029f1c:	ec f8 01 e4 	ld.w	r8,r6[484]
80029f20:	70 08       	ld.w	r8,r8[0x0]
80029f22:	70 49       	ld.w	r9,r8[0x10]
80029f24:	ec f8 00 84 	ld.w	r8,r6[132]
80029f28:	91 09       	st.w	r8[0x0],r9
					twim_tx_data = twim_package->buffer;
80029f2a:	ec f8 01 e4 	ld.w	r8,r6[484]
80029f2e:	70 08       	ld.w	r8,r8[0x0]
80029f30:	70 38       	ld.w	r8,r8[0xc]
80029f32:	10 99       	mov	r9,r8
80029f34:	ec f8 00 90 	ld.w	r8,r6[144]
80029f38:	91 09       	st.w	r8[0x0],r9
				}
			}
		}
	}
	return;
}
80029f3a:	2f fd       	sub	sp,-4
80029f3c:	e3 cd 40 c0 	ldm	sp++,r6-r7,lr
80029f40:	d6 03       	rete
80029f42:	00 00       	add	r0,r0
80029f44:	80 02       	ld.sh	r2,r0[0x0]
80029f46:	9c 6e       	ld.sh	lr,lr[0xc]

80029f48 <twim_set_speed>:
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arg resulting in wrong CWGR Exponential
 */
status_code_t twim_set_speed (volatile avr32_twim_t *twim, uint32_t speed,
		uint32_t pba_hz)
{
80029f48:	eb cd 40 80 	pushm	r7,lr
80029f4c:	1a 97       	mov	r7,sp
80029f4e:	20 5d       	sub	sp,20
80029f50:	ef 4c ff f4 	st.w	r7[-12],r12
80029f54:	ef 4b ff f0 	st.w	r7[-16],r11
80029f58:	ef 4a ff ec 	st.w	r7[-20],r10
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
80029f5c:	30 08       	mov	r8,0
80029f5e:	ef 68 ff ff 	st.b	r7[-1],r8
	f_prescaled = (pba_hz / speed / 2);
80029f62:	ee f8 ff ec 	ld.w	r8,r7[-20]
80029f66:	ee f9 ff f0 	ld.w	r9,r7[-16]
80029f6a:	f0 09 0d 08 	divu	r8,r8,r9
80029f6e:	a1 98       	lsr	r8,0x1
80029f70:	ef 48 ff f8 	st.w	r7[-8],r8
	// f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
80029f74:	c0 b8       	rjmp	80029f8a <twim_set_speed+0x42>
		// increase clock divider
		cwgr_exp++;
80029f76:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80029f7a:	2f f8       	sub	r8,-1
80029f7c:	ef 68 ff ff 	st.b	r7[-1],r8
		// divide f_prescaled value
		f_prescaled /= 2;
80029f80:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029f84:	a1 98       	lsr	r8,0x1
80029f86:	ef 48 ff f8 	st.w	r7[-8],r8
{
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (pba_hz / speed / 2);
	// f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
80029f8a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029f8e:	e0 48 00 ff 	cp.w	r8,255
80029f92:	e0 88 00 09 	brls	80029fa4 <twim_set_speed+0x5c>
80029f96:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80029f9a:	30 78       	mov	r8,7
80029f9c:	f0 09 18 00 	cp.b	r9,r8
80029fa0:	fe 98 ff eb 	brls	80029f76 <twim_set_speed+0x2e>
		// increase clock divider
		cwgr_exp++;
		// divide f_prescaled value
		f_prescaled /= 2;
	}
	if (cwgr_exp > 0x7) {
80029fa4:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80029fa8:	30 78       	mov	r8,7
80029faa:	f0 09 18 00 	cp.b	r9,r8
80029fae:	e0 88 00 04 	brls	80029fb6 <twim_set_speed+0x6e>
		return ERR_INVALID_ARG;
80029fb2:	3f 88       	mov	r8,-8
80029fb4:	c1 a8       	rjmp	80029fe8 <twim_set_speed+0xa0>
	}
	// set clock waveform generator register
	twim->cwgr = ((f_prescaled/2) << AVR32_TWIM_CWGR_LOW_OFFSET)
80029fb6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029fba:	f0 09 16 01 	lsr	r9,r8,0x1
			| ((f_prescaled - f_prescaled/2) << AVR32_TWIM_CWGR_HIGH_OFFSET)
80029fbe:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029fc2:	a1 98       	lsr	r8,0x1
80029fc4:	ee fa ff f8 	ld.w	r10,r7[-8]
80029fc8:	f4 08 01 08 	sub	r8,r10,r8
80029fcc:	a9 68       	lsl	r8,0x8
			| (cwgr_exp << AVR32_TWIM_CWGR_EXP_OFFSET)
80029fce:	10 49       	or	r9,r8
80029fd0:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80029fd4:	bd 68       	lsl	r8,0x1c
			| (0     << AVR32_TWIM_CWGR_DATA_OFFSET)
			| (f_prescaled << AVR32_TWIM_CWGR_STASTO_OFFSET);
80029fd6:	10 49       	or	r9,r8
80029fd8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029fdc:	b1 68       	lsl	r8,0x10
	}
	if (cwgr_exp > 0x7) {
		return ERR_INVALID_ARG;
	}
	// set clock waveform generator register
	twim->cwgr = ((f_prescaled/2) << AVR32_TWIM_CWGR_LOW_OFFSET)
80029fde:	10 49       	or	r9,r8
80029fe0:	ee f8 ff f4 	ld.w	r8,r7[-12]
80029fe4:	91 19       	st.w	r8[0x4],r9
			| ((f_prescaled - f_prescaled/2) << AVR32_TWIM_CWGR_HIGH_OFFSET)
			| (cwgr_exp << AVR32_TWIM_CWGR_EXP_OFFSET)
			| (0     << AVR32_TWIM_CWGR_DATA_OFFSET)
			| (f_prescaled << AVR32_TWIM_CWGR_STASTO_OFFSET);
	return STATUS_OK;
80029fe6:	30 08       	mov	r8,0
}
80029fe8:	10 9c       	mov	r12,r8
80029fea:	2f bd       	sub	sp,-20
80029fec:	e3 cd 80 80 	ldm	sp++,r7,pc

80029ff0 <twim_master_init>:
 * \retval ERR_INVALID_ARG  Invalid arg resulting in wrong CWGR Exponential
 * \retval ERR_IO_ERROR     NACK is received or Bus Arbitration lost
 */
status_code_t twim_master_init (volatile avr32_twim_t *twim,
		const twim_options_t *opt)
{
80029ff0:	eb cd 40 c0 	pushm	r6-r7,lr
80029ff4:	1a 97       	mov	r7,sp
80029ff6:	20 4d       	sub	sp,16
80029ff8:	4c 06       	lddpc	r6,8002a0f8 <twim_master_init+0x108>
80029ffa:	1e 26       	rsub	r6,pc
80029ffc:	ef 4c ff f4 	st.w	r7[-12],r12
8002a000:	ef 4b ff f0 	st.w	r7[-16],r11
	bool global_interrupt_enabled = cpu_irq_is_enabled ();
8002a004:	e1 b8 00 00 	mfsr	r8,0x0
8002a008:	10 9c       	mov	r12,r8
8002a00a:	c1 6e       	rcall	80029c36 <cpu_irq_is_enabled_flags>
8002a00c:	18 98       	mov	r8,r12
8002a00e:	ef 68 ff fb 	st.b	r7[-5],r8
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
8002a012:	ec f8 00 78 	ld.w	r8,r6[120]
8002a016:	30 09       	mov	r9,0
8002a018:	91 09       	st.w	r8[0x0],r9
	// Disable TWI interrupts
	if (global_interrupt_enabled) {
8002a01a:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8002a01e:	30 08       	mov	r8,0
8002a020:	f0 09 18 00 	cp.b	r9,r8
8002a024:	c0 20       	breq	8002a028 <twim_master_init+0x38>
		cpu_irq_disable ();
8002a026:	d3 03       	ssrf	0x10
	}
	twim->idr = ~0UL;
8002a028:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002a02c:	3f f9       	mov	r9,-1
8002a02e:	91 99       	st.w	r8[0x24],r9
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
8002a030:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002a034:	30 19       	mov	r9,1
8002a036:	91 09       	st.w	r8[0x0],r9
	// Reset TWI
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
8002a038:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002a03c:	e0 69 00 80 	mov	r9,128
8002a040:	91 09       	st.w	r8[0x0],r9
	if (global_interrupt_enabled) {
8002a042:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8002a046:	30 08       	mov	r8,0
8002a048:	f0 09 18 00 	cp.b	r9,r8
8002a04c:	c0 20       	breq	8002a050 <twim_master_init+0x60>
		cpu_irq_enable ();
8002a04e:	d5 03       	csrf	0x10
	}
	// Clear SR
	twim->scr = ~0UL;
8002a050:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002a054:	3f f9       	mov	r9,-1
8002a056:	91 b9       	st.w	r8[0x2c],r9
	
	// register Register twim_master_interrupt_handler interrupt on level CONF_TWIM_IRQ_LEVEL
	irqflags_t flags = cpu_irq_save();
8002a058:	fe b0 fd e0 	rcall	80029c18 <cpu_irq_save>
8002a05c:	18 98       	mov	r8,r12
8002a05e:	ef 48 ff fc 	st.w	r7[-4],r8
	irq_register_handler(twim_master_interrupt_handler,
8002a062:	30 1a       	mov	r10,1
8002a064:	e0 6b 03 20 	mov	r11,800
8002a068:	fe cc 03 f8 	sub	r12,pc,1016
8002a06c:	f0 16 00 3c 	mcall	r6[240]
			CONF_TWIM_IRQ_LINE, CONF_TWIM_IRQ_LEVEL);
	irq_register_handler(twim_master_interrupt_handler2,
8002a070:	30 1a       	mov	r10,1
8002a072:	e0 6b 03 40 	mov	r11,832
8002a076:	fe cc 02 96 	sub	r12,pc,662
8002a07a:	f0 16 00 3c 	mcall	r6[240]
	AVR32_TWIM1_IRQ , CONF_TWIM_IRQ_LEVEL);
	cpu_irq_restore(flags);
8002a07e:	ee fc ff fc 	ld.w	r12,r7[-4]
8002a082:	fe b0 fd ea 	rcall	80029c56 <cpu_irq_restore>
	
	if (opt->smbus) {
8002a086:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002a08a:	f1 38 00 0c 	ld.ub	r8,r8[12]
8002a08e:	58 08       	cp.w	r8,0
8002a090:	c0 90       	breq	8002a0a2 <twim_master_init+0xb2>
		// Enable SMBUS Transfer
		twim->cr = AVR32_TWIM_CR_SMEN_MASK;
8002a092:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002a096:	31 09       	mov	r9,16
8002a098:	91 09       	st.w	r8[0x0],r9
		twim->smbtr = (uint32_t) -1;
8002a09a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002a09e:	3f f9       	mov	r9,-1
8002a0a0:	91 29       	st.w	r8[0x8],r9
	}
	// Select the speed
	if (twim_set_speed (twim, opt->speed, opt->pba_hz) == 
8002a0a2:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002a0a6:	70 09       	ld.w	r9,r8[0x0]
8002a0a8:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002a0ac:	70 18       	ld.w	r8,r8[0x4]
8002a0ae:	12 9a       	mov	r10,r9
8002a0b0:	10 9b       	mov	r11,r8
8002a0b2:	ee fc ff f4 	ld.w	r12,r7[-12]
8002a0b6:	f0 16 00 94 	mcall	r6[592]
8002a0ba:	18 98       	mov	r8,r12
8002a0bc:	5b 88       	cp.w	r8,-8
8002a0be:	c0 31       	brne	8002a0c4 <twim_master_init+0xd4>
			ERR_INVALID_ARG) {
		return ERR_INVALID_ARG;
8002a0c0:	3f 88       	mov	r8,-8
8002a0c2:	c1 68       	rjmp	8002a0ee <twim_master_init+0xfe>
	}
	// Probe the component
	twim_probe (twim, opt->chip);
8002a0c4:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002a0c8:	70 28       	ld.w	r8,r8[0x8]
8002a0ca:	10 9b       	mov	r11,r8
8002a0cc:	ee fc ff f4 	ld.w	r12,r7[-12]
8002a0d0:	f0 16 00 ff 	mcall	r6[1020]
	//Check for nack and abitration
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
8002a0d4:	ec f8 00 78 	ld.w	r8,r6[120]
8002a0d8:	70 08       	ld.w	r8,r8[0x0]
		return ERR_INVALID_ARG;
	}
	// Probe the component
	twim_probe (twim, opt->chip);
	//Check for nack and abitration
	if (transfer_status == TWI_RECEIVE_NACK
8002a0da:	5b c8       	cp.w	r8,-4
8002a0dc:	c0 60       	breq	8002a0e8 <twim_master_init+0xf8>
			|| transfer_status == TWI_ARBITRATION_LOST) {
8002a0de:	ec f8 00 78 	ld.w	r8,r6[120]
8002a0e2:	70 08       	ld.w	r8,r8[0x0]
		return ERR_INVALID_ARG;
	}
	// Probe the component
	twim_probe (twim, opt->chip);
	//Check for nack and abitration
	if (transfer_status == TWI_RECEIVE_NACK
8002a0e4:	5b e8       	cp.w	r8,-2
8002a0e6:	c0 31       	brne	8002a0ec <twim_master_init+0xfc>
			|| transfer_status == TWI_ARBITRATION_LOST) {
		return ERR_IO_ERROR;
8002a0e8:	3f f8       	mov	r8,-1
8002a0ea:	c0 28       	rjmp	8002a0ee <twim_master_init+0xfe>
	}
	return STATUS_OK;
8002a0ec:	30 08       	mov	r8,0
}
8002a0ee:	10 9c       	mov	r12,r8
8002a0f0:	2f cd       	sub	sp,-16
8002a0f2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002a0f6:	00 00       	add	r0,r0
8002a0f8:	80 02       	ld.sh	r2,r0[0x0]
8002a0fa:	9e 7e       	ld.sh	lr,pc[0xe]

8002a0fc <twim_disable_interrupt>:
 * \brief Disable the TWI interrupts and clear its status register
 *
 * \param twim         Base address of the TWIM (i.e. &AVR32_TWI).
 */
void twim_disable_interrupt (volatile avr32_twim_t *twim)
{
8002a0fc:	eb cd 40 c0 	pushm	r6-r7,lr
8002a100:	1a 97       	mov	r7,sp
8002a102:	20 2d       	sub	sp,8
8002a104:	48 f6       	lddpc	r6,8002a140 <twim_disable_interrupt+0x44>
8002a106:	1e 26       	rsub	r6,pc
8002a108:	ef 4c ff f8 	st.w	r7[-8],r12
	bool global_interrupt_enabled = cpu_irq_is_enabled ();
8002a10c:	e1 b8 00 00 	mfsr	r8,0x0
8002a110:	10 9c       	mov	r12,r8
8002a112:	fe b0 fd 92 	rcall	80029c36 <cpu_irq_is_enabled_flags>
8002a116:	18 98       	mov	r8,r12
8002a118:	ef 68 ff ff 	st.b	r7[-1],r8
	if (global_interrupt_enabled) {
8002a11c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8002a120:	30 08       	mov	r8,0
8002a122:	f0 09 18 00 	cp.b	r9,r8
8002a126:	c0 20       	breq	8002a12a <twim_disable_interrupt+0x2e>
		cpu_irq_disable ();
8002a128:	d3 03       	ssrf	0x10
	}
	// Clear the interrupt flags
	twim->idr = ~0UL;
8002a12a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a12e:	3f f9       	mov	r9,-1
8002a130:	91 99       	st.w	r8[0x24],r9
	// Clear the status flags
	twim->scr = ~0UL;
8002a132:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a136:	3f f9       	mov	r9,-1
8002a138:	91 b9       	st.w	r8[0x2c],r9
}
8002a13a:	2f ed       	sub	sp,-8
8002a13c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002a140:	80 02       	ld.sh	r2,r0[0x0]
8002a142:	9f 8a       	st.w	pc[0x20],r10

8002a144 <twim_probe>:
 * \param chip_addr       Address of the chip which is searched for
 * \retval STATUS_OK      Slave Found
 * \retval ERR_IO_ERROR   ANAK received or Bus Arbitration lost
 */
status_code_t twim_probe (volatile avr32_twim_t *twim, uint32_t chip_addr)
{
8002a144:	eb cd 40 c0 	pushm	r6-r7,lr
8002a148:	1a 97       	mov	r7,sp
8002a14a:	20 3d       	sub	sp,12
8002a14c:	48 c6       	lddpc	r6,8002a17c <twim_probe+0x38>
8002a14e:	1e 26       	rsub	r6,pc
8002a150:	ef 4c ff f8 	st.w	r7[-8],r12
8002a154:	ef 4b ff f4 	st.w	r7[-12],r11
	uint8_t data[1] = { 0 };
8002a158:	30 08       	mov	r8,0
8002a15a:	ef 68 ff fc 	st.b	r7[-4],r8
	return (twim_write (twim,data,0,chip_addr,0));
8002a15e:	ee cb 00 04 	sub	r11,r7,4
8002a162:	30 08       	mov	r8,0
8002a164:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002a168:	30 0a       	mov	r10,0
8002a16a:	ee fc ff f8 	ld.w	r12,r7[-8]
8002a16e:	f0 16 00 39 	mcall	r6[228]
8002a172:	18 98       	mov	r8,r12
}
8002a174:	10 9c       	mov	r12,r8
8002a176:	2f dd       	sub	sp,-12
8002a178:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002a17c:	80 02       	ld.sh	r2,r0[0x0]
8002a17e:	9f d2       	st.w	pc[0x34],r2

8002a180 <twim_read_packet>:
 * \retval STATUS_OK      If all bytes were read successfully
 * \retval ERR_IO_ERROR   NACK received or Bus Arbitration lost
 */
status_code_t twim_read_packet (volatile avr32_twim_t *twim,
		const twim_package_t *package)
{
8002a180:	eb cd 40 c0 	pushm	r6-r7,lr
8002a184:	1a 97       	mov	r7,sp
8002a186:	20 2d       	sub	sp,8
8002a188:	4e 76       	lddpc	r6,8002a324 <twim_read_packet+0x1a4>
8002a18a:	1e 26       	rsub	r6,pc
8002a18c:	ef 4c ff fc 	st.w	r7[-4],r12
8002a190:	ef 4b ff f8 	st.w	r7[-8],r11
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
8002a194:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a198:	30 29       	mov	r9,2
8002a19a:	91 09       	st.w	r8[0x0],r9
	// Set pointer to TWIM instance for IT
	twim_inst = twim;
8002a19c:	ec f8 00 40 	ld.w	r8,r6[64]
8002a1a0:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002a1a4:	91 09       	st.w	r8[0x0],r9
	// Disable the TWIM interrupts
	twim_disable_interrupt (twim_inst);
8002a1a6:	ec f8 00 40 	ld.w	r8,r6[64]
8002a1aa:	70 08       	ld.w	r8,r8[0x0]
8002a1ac:	10 9c       	mov	r12,r8
8002a1ae:	f0 16 00 77 	mcall	r6[476]
	// get a pointer to applicative data
	twim_rx_data = package->buffer;
8002a1b2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a1b6:	70 38       	ld.w	r8,r8[0xc]
8002a1b8:	10 99       	mov	r9,r8
8002a1ba:	ec f8 00 bc 	ld.w	r8,r6[188]
8002a1be:	91 09       	st.w	r8[0x0],r9
	// get a copy of nb bytes to read
	twim_rx_nb_bytes = package->length;
8002a1c0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a1c4:	70 49       	ld.w	r9,r8[0x10]
8002a1c6:	ec f8 01 44 	ld.w	r8,r6[324]
8002a1ca:	91 09       	st.w	r8[0x0],r9
	// Set next write transfer to false
	twim_next = false;
8002a1cc:	ec f9 00 b8 	ld.w	r9,r6[184]
8002a1d0:	30 08       	mov	r8,0
8002a1d2:	b2 88       	st.b	r9[0x0],r8
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
8002a1d4:	ec f8 00 78 	ld.w	r8,r6[120]
8002a1d8:	30 09       	mov	r9,0
8002a1da:	91 09       	st.w	r8[0x0],r9
	//check if internal address access is performed
	if (package->addr_length) {
8002a1dc:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a1e0:	f1 38 00 08 	ld.ub	r8,r8[8]
8002a1e4:	58 08       	cp.w	r8,0
8002a1e6:	c5 60       	breq	8002a292 <twim_read_packet+0x112>
		// Reset the TWIM module to clear the THR register
		twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
8002a1e8:	ec f8 00 40 	ld.w	r8,r6[64]
8002a1ec:	70 08       	ld.w	r8,r8[0x0]
8002a1ee:	30 19       	mov	r9,1
8002a1f0:	91 09       	st.w	r8[0x0],r9
		twim_inst->cr = AVR32_TWIM_CR_SWRST_MASK;
8002a1f2:	ec f8 00 40 	ld.w	r8,r6[64]
8002a1f6:	70 08       	ld.w	r8,r8[0x0]
8002a1f8:	e0 69 00 80 	mov	r9,128
8002a1fc:	91 09       	st.w	r8[0x0],r9
		twim_inst->cr = AVR32_TWIM_CR_MDIS_MASK;
8002a1fe:	ec f8 00 40 	ld.w	r8,r6[64]
8002a202:	70 08       	ld.w	r8,r8[0x0]
8002a204:	30 29       	mov	r9,2
8002a206:	91 09       	st.w	r8[0x0],r9
		// selection of first valid byte of the address
		twim_tx_data = (uint8_t *) (&(package->addr));
8002a208:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a20c:	2f c8       	sub	r8,-4
8002a20e:	10 99       	mov	r9,r8
8002a210:	ec f8 00 90 	ld.w	r8,r6[144]
8002a214:	91 09       	st.w	r8[0x0],r9
		twim_tx_data += (4 - package->addr_length);
8002a216:	ec f8 00 90 	ld.w	r8,r6[144]
8002a21a:	70 09       	ld.w	r9,r8[0x0]
8002a21c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a220:	f1 38 00 08 	ld.ub	r8,r8[8]
8002a224:	f0 08 11 04 	rsub	r8,r8,4
8002a228:	10 09       	add	r9,r8
8002a22a:	ec f8 00 90 	ld.w	r8,r6[144]
8002a22e:	91 09       	st.w	r8[0x0],r9
		// set the number of bytes to transmit
		twim_tx_nb_bytes = package->addr_length;
8002a230:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a234:	f1 38 00 08 	ld.ub	r8,r8[8]
8002a238:	10 99       	mov	r9,r8
8002a23a:	ec f8 00 84 	ld.w	r8,r6[132]
8002a23e:	91 09       	st.w	r8[0x0],r9
		// mask NACK, TXRDY and RXRDY interrupts
		twim_it_mask = AVR32_TWIM_IER_STD_MASK | 
8002a240:	ec f8 01 00 	ld.w	r8,r6[256]
8002a244:	e0 69 07 03 	mov	r9,1795
8002a248:	91 09       	st.w	r8[0x0],r9
				AVR32_TWIM_IER_TXRDY_MASK | AVR32_TWIM_IER_RXRDY_MASK;
		// Set the command register to initiate the transfer
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8002a24a:	ec f8 00 40 	ld.w	r8,r6[64]
8002a24e:	70 08       	ld.w	r8,r8[0x0]
				| (package->addr_length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
8002a250:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002a254:	72 09       	ld.w	r9,r9[0x0]
		twim_tx_nb_bytes = package->addr_length;
		// mask NACK, TXRDY and RXRDY interrupts
		twim_it_mask = AVR32_TWIM_IER_STD_MASK | 
				AVR32_TWIM_IER_TXRDY_MASK | AVR32_TWIM_IER_RXRDY_MASK;
		// Set the command register to initiate the transfer
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8002a256:	f2 0a 15 01 	lsl	r10,r9,0x1
				| (package->addr_length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
8002a25a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002a25e:	f3 39 00 08 	ld.ub	r9,r9[8]
8002a262:	b1 69       	lsl	r9,0x10
				| (AVR32_TWIM_CMDR_VALID_MASK)
8002a264:	f5 e9 10 09 	or	r9,r10,r9
		twim_tx_nb_bytes = package->addr_length;
		// mask NACK, TXRDY and RXRDY interrupts
		twim_it_mask = AVR32_TWIM_IER_STD_MASK | 
				AVR32_TWIM_IER_TXRDY_MASK | AVR32_TWIM_IER_RXRDY_MASK;
		// Set the command register to initiate the transfer
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8002a268:	e8 19 a0 00 	orl	r9,0xa000
8002a26c:	91 39       	st.w	r8[0xc],r9
				| (package->addr_length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
				| (AVR32_TWIM_CMDR_START_MASK)
				| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
		// set the next command register to followup with the previous command
		twim_inst->ncmdr = ((package->chip) << AVR32_TWIM_CMDR_SADR_OFFSET)
8002a26e:	ec f8 00 40 	ld.w	r8,r6[64]
8002a272:	70 08       	ld.w	r8,r8[0x0]
8002a274:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002a278:	72 09       	ld.w	r9,r9[0x0]
8002a27a:	f2 0a 15 01 	lsl	r10,r9,0x1
				| (package->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
8002a27e:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002a282:	72 49       	ld.w	r9,r9[0x10]
				| (AVR32_TWIM_CMDR_VALID_MASK)
				| (AVR32_TWIM_CMDR_START_MASK)
				| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
		// set the next command register to followup with the previous command
		twim_inst->ncmdr = ((package->chip) << AVR32_TWIM_CMDR_SADR_OFFSET)
				| (package->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
8002a284:	b1 69       	lsl	r9,0x10
				| (AVR32_TWIM_CMDR_VALID_MASK)
8002a286:	f5 e9 10 09 	or	r9,r10,r9
				| (package->addr_length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
				| (AVR32_TWIM_CMDR_START_MASK)
				| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
		// set the next command register to followup with the previous command
		twim_inst->ncmdr = ((package->chip) << AVR32_TWIM_CMDR_SADR_OFFSET)
8002a28a:	e8 19 e0 01 	orl	r9,0xe001
8002a28e:	91 49       	st.w	r8[0x10],r9
8002a290:	c1 b8       	rjmp	8002a2c6 <twim_read_packet+0x146>
				| (AVR32_TWIM_CMDR_VALID_MASK)
				| (AVR32_TWIM_CMDR_START_MASK)
				| (AVR32_TWIM_CMDR_STOP_MASK)
				| (AVR32_TWIM_CMDR_READ_MASK);
	} else {
		twim_tx_nb_bytes = 0;
8002a292:	ec f8 00 84 	ld.w	r8,r6[132]
8002a296:	30 09       	mov	r9,0
8002a298:	91 09       	st.w	r8[0x0],r9
		// mask NACK and RXRDY interrupts
		twim_it_mask = AVR32_TWIM_IER_STD_MASK | AVR32_TWIM_IER_RXRDY_MASK;
8002a29a:	ec f8 01 00 	ld.w	r8,r6[256]
8002a29e:	e0 69 07 01 	mov	r9,1793
8002a2a2:	91 09       	st.w	r8[0x0],r9
		// Set the command register to initiate the transfer
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8002a2a4:	ec f8 00 40 	ld.w	r8,r6[64]
8002a2a8:	70 08       	ld.w	r8,r8[0x0]
				| (package->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
8002a2aa:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002a2ae:	72 09       	ld.w	r9,r9[0x0]
	} else {
		twim_tx_nb_bytes = 0;
		// mask NACK and RXRDY interrupts
		twim_it_mask = AVR32_TWIM_IER_STD_MASK | AVR32_TWIM_IER_RXRDY_MASK;
		// Set the command register to initiate the transfer
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8002a2b0:	f2 0a 15 01 	lsl	r10,r9,0x1
				| (package->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
8002a2b4:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002a2b8:	72 49       	ld.w	r9,r9[0x10]
		twim_tx_nb_bytes = 0;
		// mask NACK and RXRDY interrupts
		twim_it_mask = AVR32_TWIM_IER_STD_MASK | AVR32_TWIM_IER_RXRDY_MASK;
		// Set the command register to initiate the transfer
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
				| (package->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
8002a2ba:	b1 69       	lsl	r9,0x10
				| (AVR32_TWIM_CMDR_VALID_MASK)
8002a2bc:	f5 e9 10 09 	or	r9,r10,r9
	} else {
		twim_tx_nb_bytes = 0;
		// mask NACK and RXRDY interrupts
		twim_it_mask = AVR32_TWIM_IER_STD_MASK | AVR32_TWIM_IER_RXRDY_MASK;
		// Set the command register to initiate the transfer
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8002a2c0:	e8 19 e0 01 	orl	r9,0xe001
8002a2c4:	91 39       	st.w	r8[0xc],r9
				| (AVR32_TWIM_CMDR_START_MASK)
				| (AVR32_TWIM_CMDR_STOP_MASK)
				| (AVR32_TWIM_CMDR_READ_MASK);
	}
	// update IMR through IER
	twim_inst->ier = twim_it_mask;
8002a2c6:	ec f8 00 40 	ld.w	r8,r6[64]
8002a2ca:	70 08       	ld.w	r8,r8[0x0]
8002a2cc:	ec f9 01 00 	ld.w	r9,r6[256]
8002a2d0:	72 09       	ld.w	r9,r9[0x0]
8002a2d2:	91 89       	st.w	r8[0x20],r9
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
8002a2d4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a2d8:	30 19       	mov	r9,1
8002a2da:	91 09       	st.w	r8[0x0],r9
	// Enable all interrupts
	cpu_irq_enable ();
8002a2dc:	d5 03       	csrf	0x10
	// get data
	while (!(transfer_status) && !(twim_status ())) {
8002a2de:	c0 38       	rjmp	8002a2e4 <twim_read_packet+0x164>
		cpu_relax();
8002a2e0:	fe cf ff fc 	sub	pc,pc,-4
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
	// Enable all interrupts
	cpu_irq_enable ();
	// get data
	while (!(transfer_status) && !(twim_status ())) {
8002a2e4:	ec f8 00 78 	ld.w	r8,r6[120]
8002a2e8:	70 08       	ld.w	r8,r8[0x0]
8002a2ea:	58 08       	cp.w	r8,0
8002a2ec:	c0 61       	brne	8002a2f8 <twim_read_packet+0x178>
8002a2ee:	f0 16 00 69 	mcall	r6[420]
8002a2f2:	18 98       	mov	r8,r12
8002a2f4:	58 08       	cp.w	r8,0
8002a2f6:	cf 50       	breq	8002a2e0 <twim_read_packet+0x160>
		cpu_relax();
	}
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
8002a2f8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a2fc:	30 29       	mov	r9,2
8002a2fe:	91 09       	st.w	r8[0x0],r9
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
8002a300:	ec f8 00 78 	ld.w	r8,r6[120]
8002a304:	70 08       	ld.w	r8,r8[0x0]
	while (!(transfer_status) && !(twim_status ())) {
		cpu_relax();
	}
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
	if (transfer_status == TWI_RECEIVE_NACK
8002a306:	5b c8       	cp.w	r8,-4
8002a308:	c0 60       	breq	8002a314 <twim_read_packet+0x194>
			|| transfer_status == TWI_ARBITRATION_LOST) {
8002a30a:	ec f8 00 78 	ld.w	r8,r6[120]
8002a30e:	70 08       	ld.w	r8,r8[0x0]
	while (!(transfer_status) && !(twim_status ())) {
		cpu_relax();
	}
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
	if (transfer_status == TWI_RECEIVE_NACK
8002a310:	5b e8       	cp.w	r8,-2
8002a312:	c0 31       	brne	8002a318 <twim_read_packet+0x198>
			|| transfer_status == TWI_ARBITRATION_LOST) {
		return ERR_IO_ERROR;
8002a314:	3f f8       	mov	r8,-1
8002a316:	c0 28       	rjmp	8002a31a <twim_read_packet+0x19a>
	}
	return STATUS_OK;
8002a318:	30 08       	mov	r8,0
}
8002a31a:	10 9c       	mov	r12,r8
8002a31c:	2f ed       	sub	sp,-8
8002a31e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002a322:	00 00       	add	r0,r0
8002a324:	80 02       	ld.sh	r2,r0[0x0]
8002a326:	a0 0e       	st.h	r0[0x0],lr

8002a328 <twim_read>:
 * \retval STATUS_OK      If all bytes were read successfully
 * \retval ERR_IO_ERROR   NACK received or Bus Arbitration lost
 */
status_code_t twim_read (volatile avr32_twim_t *twim, uint8_t *buffer,
		uint32_t nbytes, uint32_t saddr, bool tenbit)
{
8002a328:	eb cd 40 c0 	pushm	r6-r7,lr
8002a32c:	1a 97       	mov	r7,sp
8002a32e:	20 5d       	sub	sp,20
8002a330:	4c c6       	lddpc	r6,8002a460 <twim_read+0x138>
8002a332:	1e 26       	rsub	r6,pc
8002a334:	ef 4c ff fc 	st.w	r7[-4],r12
8002a338:	ef 4b ff f8 	st.w	r7[-8],r11
8002a33c:	ef 4a ff f4 	st.w	r7[-12],r10
8002a340:	ef 49 ff f0 	st.w	r7[-16],r9
8002a344:	ef 68 ff ec 	st.b	r7[-20],r8
	// Reset the TWIM module to clear the THR register
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
8002a348:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a34c:	30 19       	mov	r9,1
8002a34e:	91 09       	st.w	r8[0x0],r9
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
8002a350:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a354:	e0 69 00 80 	mov	r9,128
8002a358:	91 09       	st.w	r8[0x0],r9
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
8002a35a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a35e:	30 29       	mov	r9,2
8002a360:	91 09       	st.w	r8[0x0],r9
	// Set pointer to TWIM instance for IT
	twim_inst = twim;
8002a362:	ec f8 00 40 	ld.w	r8,r6[64]
8002a366:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002a36a:	91 09       	st.w	r8[0x0],r9
	// Disable the TWIM interrupts
	twim_disable_interrupt (twim_inst);
8002a36c:	ec f8 00 40 	ld.w	r8,r6[64]
8002a370:	70 08       	ld.w	r8,r8[0x0]
8002a372:	10 9c       	mov	r12,r8
8002a374:	f0 16 00 77 	mcall	r6[476]
	// get a pointer to applicative data
	twim_rx_data = buffer;
8002a378:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002a37c:	ec f8 00 bc 	ld.w	r8,r6[188]
8002a380:	91 09       	st.w	r8[0x0],r9
	// get a copy of nb bytes to read
	twim_rx_nb_bytes = nbytes;
8002a382:	ec f8 01 44 	ld.w	r8,r6[324]
8002a386:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002a38a:	91 09       	st.w	r8[0x0],r9
	// Set next transfer to false
	twim_next = false;
8002a38c:	ec f9 00 b8 	ld.w	r9,r6[184]
8002a390:	30 08       	mov	r8,0
8002a392:	b2 88       	st.b	r9[0x0],r8
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
8002a394:	ec f8 00 78 	ld.w	r8,r6[120]
8002a398:	30 09       	mov	r9,0
8002a39a:	91 09       	st.w	r8[0x0],r9
	//tenbit need special handling
	if (tenbit)	{
8002a39c:	ef 39 ff ec 	ld.ub	r9,r7[-20]
8002a3a0:	30 08       	mov	r8,0
8002a3a2:	f0 09 18 00 	cp.b	r9,r8
8002a3a6:	c1 a0       	breq	8002a3da <twim_read+0xb2>
		twim_inst->cmdr = (saddr << AVR32_TWIM_CMDR_SADR_OFFSET)
8002a3a8:	ec f8 00 40 	ld.w	r8,r6[64]
8002a3ac:	70 08       	ld.w	r8,r8[0x0]
8002a3ae:	ee f9 ff f0 	ld.w	r9,r7[-16]
8002a3b2:	a1 79       	lsl	r9,0x1
8002a3b4:	e8 19 a8 00 	orl	r9,0xa800
8002a3b8:	91 39       	st.w	r8[0xc],r9
				| (AVR32_TWIM_CMDR_START_MASK)
				| (0 << AVR32_TWIM_CMDR_STOP_OFFSET)
				| (AVR32_TWIM_CMDR_TENBIT_MASK)
				| (0 << AVR32_TWIM_CMDR_READ_OFFSET);

		twim_inst->ncmdr = (saddr << AVR32_TWIM_CMDR_SADR_OFFSET)
8002a3ba:	ec f8 00 40 	ld.w	r8,r6[64]
8002a3be:	70 08       	ld.w	r8,r8[0x0]
8002a3c0:	ee f9 ff f0 	ld.w	r9,r7[-16]
8002a3c4:	f2 0a 15 01 	lsl	r10,r9,0x1
				| (nbytes << AVR32_TWIM_CMDR_NBYTES_OFFSET)
8002a3c8:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002a3cc:	b1 69       	lsl	r9,0x10
				| (AVR32_TWIM_CMDR_VALID_MASK)
8002a3ce:	f5 e9 10 09 	or	r9,r10,r9
				| (AVR32_TWIM_CMDR_START_MASK)
				| (0 << AVR32_TWIM_CMDR_STOP_OFFSET)
				| (AVR32_TWIM_CMDR_TENBIT_MASK)
				| (0 << AVR32_TWIM_CMDR_READ_OFFSET);

		twim_inst->ncmdr = (saddr << AVR32_TWIM_CMDR_SADR_OFFSET)
8002a3d2:	e8 19 f8 01 	orl	r9,0xf801
8002a3d6:	91 49       	st.w	r8[0x10],r9
8002a3d8:	c1 08       	rjmp	8002a3f8 <twim_read+0xd0>
				| (AVR32_TWIM_CMDR_STOP_MASK)
				| (AVR32_TWIM_CMDR_TENBIT_MASK)
				| (AVR32_TWIM_CMDR_REPSAME_MASK)
				| (AVR32_TWIM_CMDR_READ_MASK);
	} else {
		twim_inst->cmdr = (saddr << AVR32_TWIM_CMDR_SADR_OFFSET)
8002a3da:	ec f8 00 40 	ld.w	r8,r6[64]
8002a3de:	70 08       	ld.w	r8,r8[0x0]
8002a3e0:	ee f9 ff f0 	ld.w	r9,r7[-16]
8002a3e4:	f2 0a 15 01 	lsl	r10,r9,0x1
				| (nbytes << AVR32_TWIM_CMDR_NBYTES_OFFSET)
8002a3e8:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002a3ec:	b1 69       	lsl	r9,0x10
				| (AVR32_TWIM_CMDR_VALID_MASK)
8002a3ee:	f5 e9 10 09 	or	r9,r10,r9
				| (AVR32_TWIM_CMDR_STOP_MASK)
				| (AVR32_TWIM_CMDR_TENBIT_MASK)
				| (AVR32_TWIM_CMDR_REPSAME_MASK)
				| (AVR32_TWIM_CMDR_READ_MASK);
	} else {
		twim_inst->cmdr = (saddr << AVR32_TWIM_CMDR_SADR_OFFSET)
8002a3f2:	e8 19 e0 01 	orl	r9,0xe001
8002a3f6:	91 39       	st.w	r8[0xc],r9
				| (AVR32_TWIM_CMDR_STOP_MASK)
				| (0 << AVR32_TWIM_CMDR_TENBIT_OFFSET)
				| (AVR32_TWIM_CMDR_READ_MASK);
	}
	// mask NACK and RXRDY interrupts
	twim_it_mask = AVR32_TWIM_IER_STD_MASK | AVR32_TWIM_IER_RXRDY_MASK;
8002a3f8:	ec f8 01 00 	ld.w	r8,r6[256]
8002a3fc:	e0 69 07 01 	mov	r9,1793
8002a400:	91 09       	st.w	r8[0x0],r9
	// update IMR through IER
	twim_inst->ier = twim_it_mask;
8002a402:	ec f8 00 40 	ld.w	r8,r6[64]
8002a406:	70 08       	ld.w	r8,r8[0x0]
8002a408:	ec f9 01 00 	ld.w	r9,r6[256]
8002a40c:	72 09       	ld.w	r9,r9[0x0]
8002a40e:	91 89       	st.w	r8[0x20],r9
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
8002a410:	ec f8 00 40 	ld.w	r8,r6[64]
8002a414:	70 08       	ld.w	r8,r8[0x0]
8002a416:	30 19       	mov	r9,1
8002a418:	91 09       	st.w	r8[0x0],r9
	// Enable all interrupts
	cpu_irq_enable ();
8002a41a:	d5 03       	csrf	0x10
	// get data
	while (!(transfer_status) && !(twim_status ())) {
8002a41c:	c0 38       	rjmp	8002a422 <twim_read+0xfa>
		cpu_relax();
8002a41e:	fe cf ff fc 	sub	pc,pc,-4
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
	// Enable all interrupts
	cpu_irq_enable ();
	// get data
	while (!(transfer_status) && !(twim_status ())) {
8002a422:	ec f8 00 78 	ld.w	r8,r6[120]
8002a426:	70 08       	ld.w	r8,r8[0x0]
8002a428:	58 08       	cp.w	r8,0
8002a42a:	c0 61       	brne	8002a436 <twim_read+0x10e>
8002a42c:	f0 16 00 69 	mcall	r6[420]
8002a430:	18 98       	mov	r8,r12
8002a432:	58 08       	cp.w	r8,0
8002a434:	cf 50       	breq	8002a41e <twim_read+0xf6>
		cpu_relax();
	}
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
8002a436:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a43a:	30 29       	mov	r9,2
8002a43c:	91 09       	st.w	r8[0x0],r9
	//Check for nack
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
8002a43e:	ec f8 00 78 	ld.w	r8,r6[120]
8002a442:	70 08       	ld.w	r8,r8[0x0]
		cpu_relax();
	}
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
	//Check for nack
	if (transfer_status == TWI_RECEIVE_NACK
8002a444:	5b c8       	cp.w	r8,-4
8002a446:	c0 60       	breq	8002a452 <twim_read+0x12a>
			|| transfer_status == TWI_ARBITRATION_LOST) {
8002a448:	ec f8 00 78 	ld.w	r8,r6[120]
8002a44c:	70 08       	ld.w	r8,r8[0x0]
		cpu_relax();
	}
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
	//Check for nack
	if (transfer_status == TWI_RECEIVE_NACK
8002a44e:	5b e8       	cp.w	r8,-2
8002a450:	c0 31       	brne	8002a456 <twim_read+0x12e>
			|| transfer_status == TWI_ARBITRATION_LOST) {
		return ERR_IO_ERROR;
8002a452:	3f f8       	mov	r8,-1
8002a454:	c0 28       	rjmp	8002a458 <twim_read+0x130>
	}
	return STATUS_OK;
8002a456:	30 08       	mov	r8,0
}
8002a458:	10 9c       	mov	r12,r8
8002a45a:	2f bd       	sub	sp,-20
8002a45c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002a460:	80 02       	ld.sh	r2,r0[0x0]
8002a462:	a1 b6       	sbr	r6,0x1

8002a464 <twim_write_packet>:
 * \retval STATUS_OK      If all bytes were send successfully
 * \retval ERR_IO_ERROR   NACK received or Bus Arbitration lost
 */
status_code_t twim_write_packet (volatile avr32_twim_t *twim,
		const twim_package_t *package)
{
8002a464:	eb cd 40 c0 	pushm	r6-r7,lr
8002a468:	1a 97       	mov	r7,sp
8002a46a:	20 2d       	sub	sp,8
8002a46c:	4f 16       	lddpc	r6,8002a630 <twim_write_packet+0x1cc>
8002a46e:	1e 26       	rsub	r6,pc
8002a470:	ef 4c ff fc 	st.w	r7[-4],r12
8002a474:	ef 4b ff f8 	st.w	r7[-8],r11
	// Reset the TWIM module to clear the THR register
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
8002a478:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a47c:	30 19       	mov	r9,1
8002a47e:	91 09       	st.w	r8[0x0],r9
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
8002a480:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a484:	e0 69 00 80 	mov	r9,128
8002a488:	91 09       	st.w	r8[0x0],r9
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
8002a48a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a48e:	30 29       	mov	r9,2
8002a490:	91 09       	st.w	r8[0x0],r9
	// Set pointer to TWIM instance for IT
	twim_inst = twim;
8002a492:	ec f8 00 40 	ld.w	r8,r6[64]
8002a496:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002a49a:	91 09       	st.w	r8[0x0],r9
	// Disable the TWIM interrupts
	twim_disable_interrupt (twim_inst);
8002a49c:	ec f8 00 40 	ld.w	r8,r6[64]
8002a4a0:	70 08       	ld.w	r8,r8[0x0]
8002a4a2:	10 9c       	mov	r12,r8
8002a4a4:	f0 16 00 77 	mcall	r6[476]
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
8002a4a8:	ec f8 00 78 	ld.w	r8,r6[120]
8002a4ac:	30 09       	mov	r9,0
8002a4ae:	91 09       	st.w	r8[0x0],r9
	// mask NACK and TXRDY interrupts
	twim_it_mask = AVR32_TWIM_IER_STD_MASK | AVR32_TWIM_IER_TXRDY_MASK;
8002a4b0:	ec f8 01 00 	ld.w	r8,r6[256]
8002a4b4:	e0 69 07 02 	mov	r9,1794
8002a4b8:	91 09       	st.w	r8[0x0],r9
	// Set next transfer to false
	twim_next = false;
8002a4ba:	ec f9 00 b8 	ld.w	r9,r6[184]
8002a4be:	30 08       	mov	r8,0
8002a4c0:	b2 88       	st.b	r9[0x0],r8
	//check if internal address access is performed
	if (package->addr_length) {
8002a4c2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a4c6:	f1 38 00 08 	ld.ub	r8,r8[8]
8002a4ca:	58 08       	cp.w	r8,0
8002a4cc:	c6 40       	breq	8002a594 <twim_write_packet+0x130>
		// selection of first valid byte of the address
		twim_tx_data = (uint8_t *) (&(package->addr));
8002a4ce:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a4d2:	2f c8       	sub	r8,-4
8002a4d4:	10 99       	mov	r9,r8
8002a4d6:	ec f8 00 90 	ld.w	r8,r6[144]
8002a4da:	91 09       	st.w	r8[0x0],r9
		twim_tx_data += (4 - package->addr_length);
8002a4dc:	ec f8 00 90 	ld.w	r8,r6[144]
8002a4e0:	70 09       	ld.w	r9,r8[0x0]
8002a4e2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a4e6:	f1 38 00 08 	ld.ub	r8,r8[8]
8002a4ea:	f0 08 11 04 	rsub	r8,r8,4
8002a4ee:	10 09       	add	r9,r8
8002a4f0:	ec f8 00 90 	ld.w	r8,r6[144]
8002a4f4:	91 09       	st.w	r8[0x0],r9
		// set the number of bytes to transmit
		twim_tx_nb_bytes = package->addr_length;
8002a4f6:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a4fa:	f1 38 00 08 	ld.ub	r8,r8[8]
8002a4fe:	10 99       	mov	r9,r8
8002a500:	ec f8 00 84 	ld.w	r8,r6[132]
8002a504:	91 09       	st.w	r8[0x0],r9
		// Initiate the transfer to send the internal address
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8002a506:	ec f8 00 40 	ld.w	r8,r6[64]
8002a50a:	70 08       	ld.w	r8,r8[0x0]
				| (package->addr_length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
8002a50c:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002a510:	72 09       	ld.w	r9,r9[0x0]
		twim_tx_data = (uint8_t *) (&(package->addr));
		twim_tx_data += (4 - package->addr_length);
		// set the number of bytes to transmit
		twim_tx_nb_bytes = package->addr_length;
		// Initiate the transfer to send the internal address
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8002a512:	f2 0a 15 01 	lsl	r10,r9,0x1
				| (package->addr_length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
8002a516:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002a51a:	f3 39 00 08 	ld.ub	r9,r9[8]
8002a51e:	b1 69       	lsl	r9,0x10
				| (AVR32_TWIM_CMDR_VALID_MASK)
8002a520:	f5 e9 10 09 	or	r9,r10,r9
		twim_tx_data = (uint8_t *) (&(package->addr));
		twim_tx_data += (4 - package->addr_length);
		// set the number of bytes to transmit
		twim_tx_nb_bytes = package->addr_length;
		// Initiate the transfer to send the internal address
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8002a524:	e8 19 a0 00 	orl	r9,0xa000
8002a528:	91 39       	st.w	r8[0xc],r9
				| (AVR32_TWIM_CMDR_VALID_MASK)
				| (AVR32_TWIM_CMDR_START_MASK)
				| (0 << AVR32_TWIM_CMDR_STOP_OFFSET)
				| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
		// set next transfer to true
		twim_next = true;
8002a52a:	ec f9 00 b8 	ld.w	r9,r6[184]
8002a52e:	30 18       	mov	r8,1
8002a530:	b2 88       	st.b	r9[0x0],r8
		// Set the number of bytes & address for next transfer
		twim_package = package;
8002a532:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002a536:	ec f8 01 e4 	ld.w	r8,r6[484]
8002a53a:	91 09       	st.w	r8[0x0],r9
		// set the next command register to followup with the previous command
		twim_inst->ncmdr = ((package->chip) << AVR32_TWIM_CMDR_SADR_OFFSET)
8002a53c:	ec f8 00 40 	ld.w	r8,r6[64]
8002a540:	70 08       	ld.w	r8,r8[0x0]
8002a542:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002a546:	72 09       	ld.w	r9,r9[0x0]
8002a548:	f2 0a 15 01 	lsl	r10,r9,0x1
				| (package->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
8002a54c:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002a550:	72 49       	ld.w	r9,r9[0x10]
		twim_next = true;
		// Set the number of bytes & address for next transfer
		twim_package = package;
		// set the next command register to followup with the previous command
		twim_inst->ncmdr = ((package->chip) << AVR32_TWIM_CMDR_SADR_OFFSET)
				| (package->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
8002a552:	b1 69       	lsl	r9,0x10
				| (AVR32_TWIM_CMDR_VALID_MASK)
8002a554:	f5 e9 10 09 	or	r9,r10,r9
		// set next transfer to true
		twim_next = true;
		// Set the number of bytes & address for next transfer
		twim_package = package;
		// set the next command register to followup with the previous command
		twim_inst->ncmdr = ((package->chip) << AVR32_TWIM_CMDR_SADR_OFFSET)
8002a558:	e8 19 e0 00 	orl	r9,0xe000
8002a55c:	91 49       	st.w	r8[0x10],r9
				| (AVR32_TWIM_CMDR_VALID_MASK)
				| (AVR32_TWIM_CMDR_START_MASK)
				| (AVR32_TWIM_CMDR_STOP_MASK)
				| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
		// update IMR through IER
		twim_inst->ier = twim_it_mask;
8002a55e:	ec f8 00 40 	ld.w	r8,r6[64]
8002a562:	70 08       	ld.w	r8,r8[0x0]
8002a564:	ec f9 01 00 	ld.w	r9,r6[256]
8002a568:	72 09       	ld.w	r9,r9[0x0]
8002a56a:	91 89       	st.w	r8[0x20],r9
		// Enable master transfer
		twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
8002a56c:	ec f8 00 40 	ld.w	r8,r6[64]
8002a570:	70 08       	ld.w	r8,r8[0x0]
8002a572:	30 19       	mov	r9,1
8002a574:	91 09       	st.w	r8[0x0],r9
		// Enable all interrupts
		cpu_irq_enable ();
8002a576:	d5 03       	csrf	0x10
		// wait until Busy to be false
		while (!(transfer_status) && !(twim_status ())) {
8002a578:	c0 38       	rjmp	8002a57e <twim_write_packet+0x11a>
		cpu_relax();
8002a57a:	fe cf ff fc 	sub	pc,pc,-4
		// Enable master transfer
		twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
		// Enable all interrupts
		cpu_irq_enable ();
		// wait until Busy to be false
		while (!(transfer_status) && !(twim_status ())) {
8002a57e:	ec f8 00 78 	ld.w	r8,r6[120]
8002a582:	70 08       	ld.w	r8,r8[0x0]
8002a584:	58 08       	cp.w	r8,0
8002a586:	c3 f1       	brne	8002a604 <twim_write_packet+0x1a0>
8002a588:	f0 16 00 69 	mcall	r6[420]
8002a58c:	18 98       	mov	r8,r12
8002a58e:	58 08       	cp.w	r8,0
8002a590:	cf 50       	breq	8002a57a <twim_write_packet+0x116>
8002a592:	c3 98       	rjmp	8002a604 <twim_write_packet+0x1a0>
		cpu_relax();
		}
	} else {
	// get a pointer to applicative data
	twim_tx_data = package->buffer;
8002a594:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a598:	70 38       	ld.w	r8,r8[0xc]
8002a59a:	10 99       	mov	r9,r8
8002a59c:	ec f8 00 90 	ld.w	r8,r6[144]
8002a5a0:	91 09       	st.w	r8[0x0],r9
	// get a copy of nb bytes to write
	twim_tx_nb_bytes = package->length;
8002a5a2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a5a6:	70 49       	ld.w	r9,r8[0x10]
8002a5a8:	ec f8 00 84 	ld.w	r8,r6[132]
8002a5ac:	91 09       	st.w	r8[0x0],r9
	// initiate the transfer to send the data
	twim->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
			| (package->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
			| (AVR32_TWIM_CMDR_VALID_MASK)
8002a5ae:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a5b2:	70 08       	ld.w	r8,r8[0x0]
	// get a pointer to applicative data
	twim_tx_data = package->buffer;
	// get a copy of nb bytes to write
	twim_tx_nb_bytes = package->length;
	// initiate the transfer to send the data
	twim->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8002a5b4:	f0 09 15 01 	lsl	r9,r8,0x1
			| (package->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
			| (AVR32_TWIM_CMDR_VALID_MASK)
8002a5b8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a5bc:	70 48       	ld.w	r8,r8[0x10]
	twim_tx_data = package->buffer;
	// get a copy of nb bytes to write
	twim_tx_nb_bytes = package->length;
	// initiate the transfer to send the data
	twim->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
			| (package->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
8002a5be:	b1 68       	lsl	r8,0x10
			| (AVR32_TWIM_CMDR_VALID_MASK)
8002a5c0:	f3 e8 10 08 	or	r8,r9,r8
	// get a pointer to applicative data
	twim_tx_data = package->buffer;
	// get a copy of nb bytes to write
	twim_tx_nb_bytes = package->length;
	// initiate the transfer to send the data
	twim->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8002a5c4:	10 99       	mov	r9,r8
8002a5c6:	e8 19 e0 00 	orl	r9,0xe000
8002a5ca:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a5ce:	91 39       	st.w	r8[0xc],r9
			| (AVR32_TWIM_CMDR_VALID_MASK)
			| (AVR32_TWIM_CMDR_START_MASK)
			| (AVR32_TWIM_CMDR_STOP_MASK) 
			| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
	// update IMR through IER
	twim_inst->ier = twim_it_mask;
8002a5d0:	ec f8 00 40 	ld.w	r8,r6[64]
8002a5d4:	70 08       	ld.w	r8,r8[0x0]
8002a5d6:	ec f9 01 00 	ld.w	r9,r6[256]
8002a5da:	72 09       	ld.w	r9,r9[0x0]
8002a5dc:	91 89       	st.w	r8[0x20],r9
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
8002a5de:	ec f8 00 40 	ld.w	r8,r6[64]
8002a5e2:	70 08       	ld.w	r8,r8[0x0]
8002a5e4:	30 19       	mov	r9,1
8002a5e6:	91 09       	st.w	r8[0x0],r9
	// Enable all interrupts
	cpu_irq_enable ();
8002a5e8:	d5 03       	csrf	0x10
	// send data
	while (!(transfer_status) && !(twim_status ())) {
8002a5ea:	c0 38       	rjmp	8002a5f0 <twim_write_packet+0x18c>
		cpu_relax();
8002a5ec:	fe cf ff fc 	sub	pc,pc,-4
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
	// Enable all interrupts
	cpu_irq_enable ();
	// send data
	while (!(transfer_status) && !(twim_status ())) {
8002a5f0:	ec f8 00 78 	ld.w	r8,r6[120]
8002a5f4:	70 08       	ld.w	r8,r8[0x0]
8002a5f6:	58 08       	cp.w	r8,0
8002a5f8:	c0 61       	brne	8002a604 <twim_write_packet+0x1a0>
8002a5fa:	f0 16 00 69 	mcall	r6[420]
8002a5fe:	18 98       	mov	r8,r12
8002a600:	58 08       	cp.w	r8,0
8002a602:	cf 50       	breq	8002a5ec <twim_write_packet+0x188>
		cpu_relax();
	}}
#if AVR32_TWIM_H_VERSION > 101	//Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
8002a604:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a608:	30 29       	mov	r9,2
8002a60a:	91 09       	st.w	r8[0x0],r9
#endif
	// Check for nack
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
8002a60c:	ec f8 00 78 	ld.w	r8,r6[120]
8002a610:	70 08       	ld.w	r8,r8[0x0]
#if AVR32_TWIM_H_VERSION > 101	//Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	// Check for nack
	if (transfer_status == TWI_RECEIVE_NACK
8002a612:	5b c8       	cp.w	r8,-4
8002a614:	c0 60       	breq	8002a620 <twim_write_packet+0x1bc>
			|| transfer_status == TWI_ARBITRATION_LOST) {
8002a616:	ec f8 00 78 	ld.w	r8,r6[120]
8002a61a:	70 08       	ld.w	r8,r8[0x0]
#if AVR32_TWIM_H_VERSION > 101	//Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	// Check for nack
	if (transfer_status == TWI_RECEIVE_NACK
8002a61c:	5b e8       	cp.w	r8,-2
8002a61e:	c0 31       	brne	8002a624 <twim_write_packet+0x1c0>
			|| transfer_status == TWI_ARBITRATION_LOST) {
		return ERR_IO_ERROR;
8002a620:	3f f8       	mov	r8,-1
8002a622:	c0 28       	rjmp	8002a626 <twim_write_packet+0x1c2>
	}
	return STATUS_OK;
8002a624:	30 08       	mov	r8,0
}
8002a626:	10 9c       	mov	r12,r8
8002a628:	2f ed       	sub	sp,-8
8002a62a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002a62e:	00 00       	add	r0,r0
8002a630:	80 02       	ld.sh	r2,r0[0x0]
8002a632:	a2 f2       	st.b	r1[0x7],r2

8002a634 <twim_write>:
 * \retval STATUS_OK      If all bytes were send successfully
 * \retval ERR_IO_ERROR   NACK received or Bus Arbitration lost
 */
status_code_t twim_write (volatile avr32_twim_t *twim, uint8_t const *buffer,
		uint32_t nbytes, uint32_t saddr, bool tenbit)
{
8002a634:	eb cd 40 c0 	pushm	r6-r7,lr
8002a638:	1a 97       	mov	r7,sp
8002a63a:	20 5d       	sub	sp,20
8002a63c:	4b f6       	lddpc	r6,8002a738 <twim_write+0x104>
8002a63e:	1e 26       	rsub	r6,pc
8002a640:	ef 4c ff fc 	st.w	r7[-4],r12
8002a644:	ef 4b ff f8 	st.w	r7[-8],r11
8002a648:	ef 4a ff f4 	st.w	r7[-12],r10
8002a64c:	ef 49 ff f0 	st.w	r7[-16],r9
8002a650:	ef 68 ff ec 	st.b	r7[-20],r8
	// Reset the TWIM module to clear the THR register
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
8002a654:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a658:	30 19       	mov	r9,1
8002a65a:	91 09       	st.w	r8[0x0],r9
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
8002a65c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a660:	e0 69 00 80 	mov	r9,128
8002a664:	91 09       	st.w	r8[0x0],r9
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
8002a666:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a66a:	30 29       	mov	r9,2
8002a66c:	91 09       	st.w	r8[0x0],r9
	// Set pointer to TWIM instance for IT
	twim_inst = twim;
8002a66e:	ec f8 00 40 	ld.w	r8,r6[64]
8002a672:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002a676:	91 09       	st.w	r8[0x0],r9
	// Disable the TWIM interrupts
	twim_disable_interrupt (twim_inst);
8002a678:	ec f8 00 40 	ld.w	r8,r6[64]
8002a67c:	70 08       	ld.w	r8,r8[0x0]
8002a67e:	10 9c       	mov	r12,r8
8002a680:	f0 16 00 77 	mcall	r6[476]
	// get a pointer to applicative data
	twim_tx_data = buffer;
8002a684:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002a688:	ec f8 00 90 	ld.w	r8,r6[144]
8002a68c:	91 09       	st.w	r8[0x0],r9
	// set the number of bytes to transmit
	twim_tx_nb_bytes = nbytes;
8002a68e:	ec f8 00 84 	ld.w	r8,r6[132]
8002a692:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002a696:	91 09       	st.w	r8[0x0],r9
	// Set next transfer to false
	twim_next = false;
8002a698:	ec f9 00 b8 	ld.w	r9,r6[184]
8002a69c:	30 08       	mov	r8,0
8002a69e:	b2 88       	st.b	r9[0x0],r8
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
8002a6a0:	ec f8 00 78 	ld.w	r8,r6[120]
8002a6a4:	30 09       	mov	r9,0
8002a6a6:	91 09       	st.w	r8[0x0],r9
	// set the command to start the transfer
	twim_inst->cmdr = (saddr << AVR32_TWIM_CMDR_SADR_OFFSET)
8002a6a8:	ec f8 00 40 	ld.w	r8,r6[64]
8002a6ac:	70 08       	ld.w	r8,r8[0x0]
8002a6ae:	ee f9 ff f0 	ld.w	r9,r7[-16]
8002a6b2:	f2 0a 15 01 	lsl	r10,r9,0x1
			| (nbytes << AVR32_TWIM_CMDR_NBYTES_OFFSET)
8002a6b6:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002a6ba:	b1 69       	lsl	r9,0x10
			| (AVR32_TWIM_CMDR_VALID_MASK)
8002a6bc:	12 4a       	or	r10,r9
			| (AVR32_TWIM_CMDR_START_MASK)
			| (AVR32_TWIM_CMDR_STOP_MASK)
			| ((tenbit ? 1 : 0) << AVR32_TWIM_CMDR_TENBIT_OFFSET)
8002a6be:	ef 39 ff ec 	ld.ub	r9,r7[-20]
8002a6c2:	ab 79       	lsl	r9,0xb
	// Set next transfer to false
	twim_next = false;
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
	// set the command to start the transfer
	twim_inst->cmdr = (saddr << AVR32_TWIM_CMDR_SADR_OFFSET)
8002a6c4:	f5 e9 10 09 	or	r9,r10,r9
8002a6c8:	e8 19 e0 00 	orl	r9,0xe000
8002a6cc:	91 39       	st.w	r8[0xc],r9
			| (AVR32_TWIM_CMDR_START_MASK)
			| (AVR32_TWIM_CMDR_STOP_MASK)
			| ((tenbit ? 1 : 0) << AVR32_TWIM_CMDR_TENBIT_OFFSET)
			| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
	// mask NACK and TXRDY interrupts
	twim_it_mask = AVR32_TWIM_IER_NAK_MASK | AVR32_TWIM_IER_TXRDY_MASK;
8002a6ce:	ec f8 01 00 	ld.w	r8,r6[256]
8002a6d2:	e0 69 03 02 	mov	r9,770
8002a6d6:	91 09       	st.w	r8[0x0],r9
	// update IMR through IER
	twim_inst->ier = twim_it_mask;
8002a6d8:	ec f8 00 40 	ld.w	r8,r6[64]
8002a6dc:	70 08       	ld.w	r8,r8[0x0]
8002a6de:	ec f9 01 00 	ld.w	r9,r6[256]
8002a6e2:	72 09       	ld.w	r9,r9[0x0]
8002a6e4:	91 89       	st.w	r8[0x20],r9
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
8002a6e6:	ec f8 00 40 	ld.w	r8,r6[64]
8002a6ea:	70 08       	ld.w	r8,r8[0x0]
8002a6ec:	30 19       	mov	r9,1
8002a6ee:	91 09       	st.w	r8[0x0],r9
	// Enable all interrupts
	cpu_irq_enable ();
8002a6f0:	d5 03       	csrf	0x10
	// send data
	while (!(transfer_status) && !(twim_status ())) {
8002a6f2:	c0 38       	rjmp	8002a6f8 <twim_write+0xc4>
		cpu_relax();
8002a6f4:	fe cf ff fc 	sub	pc,pc,-4
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
	// Enable all interrupts
	cpu_irq_enable ();
	// send data
	while (!(transfer_status) && !(twim_status ())) {
8002a6f8:	ec f8 00 78 	ld.w	r8,r6[120]
8002a6fc:	70 08       	ld.w	r8,r8[0x0]
8002a6fe:	58 08       	cp.w	r8,0
8002a700:	c0 61       	brne	8002a70c <twim_write+0xd8>
8002a702:	f0 16 00 69 	mcall	r6[420]
8002a706:	18 98       	mov	r8,r12
8002a708:	58 08       	cp.w	r8,0
8002a70a:	cf 50       	breq	8002a6f4 <twim_write+0xc0>
		cpu_relax();
	}
#if AVR32_TWIM_H_VERSION > 101	// Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
8002a70c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a710:	30 29       	mov	r9,2
8002a712:	91 09       	st.w	r8[0x0],r9
#endif
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
8002a714:	ec f8 00 78 	ld.w	r8,r6[120]
8002a718:	70 08       	ld.w	r8,r8[0x0]
	}
#if AVR32_TWIM_H_VERSION > 101	// Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	if (transfer_status == TWI_RECEIVE_NACK
8002a71a:	5b c8       	cp.w	r8,-4
8002a71c:	c0 60       	breq	8002a728 <twim_write+0xf4>
			|| transfer_status == TWI_ARBITRATION_LOST) {
8002a71e:	ec f8 00 78 	ld.w	r8,r6[120]
8002a722:	70 08       	ld.w	r8,r8[0x0]
	}
#if AVR32_TWIM_H_VERSION > 101	// Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	if (transfer_status == TWI_RECEIVE_NACK
8002a724:	5b e8       	cp.w	r8,-2
8002a726:	c0 31       	brne	8002a72c <twim_write+0xf8>
			|| transfer_status == TWI_ARBITRATION_LOST) {
		return ERR_IO_ERROR;
8002a728:	3f f8       	mov	r8,-1
8002a72a:	c0 28       	rjmp	8002a72e <twim_write+0xfa>
	}
	return STATUS_OK;
8002a72c:	30 08       	mov	r8,0
}
8002a72e:	10 9c       	mov	r12,r8
8002a730:	2f bd       	sub	sp,-20
8002a732:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002a736:	00 00       	add	r0,r0
8002a738:	80 02       	ld.sh	r2,r0[0x0]
8002a73a:	a4 c2       	st.b	r2[0x4],r2

8002a73c <twim_chained_transfer>:
 * \retval ERR_IO_ERROR   NACK received or Bus Arbitration lost
 */
status_code_t twim_chained_transfer (volatile avr32_twim_t *twim,
		volatile twim_transfer_t *first,
		volatile twim_transfer_t *second, bool tenbit)
{
8002a73c:	eb cd 40 c0 	pushm	r6-r7,lr
8002a740:	1a 97       	mov	r7,sp
8002a742:	20 4d       	sub	sp,16
8002a744:	fe f6 03 4c 	ld.w	r6,pc[844]
8002a748:	1e 26       	rsub	r6,pc
8002a74a:	ef 4c ff fc 	st.w	r7[-4],r12
8002a74e:	ef 4b ff f8 	st.w	r7[-8],r11
8002a752:	ef 4a ff f4 	st.w	r7[-12],r10
8002a756:	12 98       	mov	r8,r9
8002a758:	ef 68 ff f0 	st.b	r7[-16],r8
	// Reset the TWIM module to clear the THR register
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
8002a75c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a760:	30 19       	mov	r9,1
8002a762:	91 09       	st.w	r8[0x0],r9
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
8002a764:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a768:	e0 69 00 80 	mov	r9,128
8002a76c:	91 09       	st.w	r8[0x0],r9
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
8002a76e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a772:	30 29       	mov	r9,2
8002a774:	91 09       	st.w	r8[0x0],r9
	// Set pointer to TWIM instance for IT
	twim_inst = twim;
8002a776:	ec f8 00 40 	ld.w	r8,r6[64]
8002a77a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002a77e:	91 09       	st.w	r8[0x0],r9
	// Disable the TWIM interrupts
	twim_disable_interrupt (twim_inst);
8002a780:	ec f8 00 40 	ld.w	r8,r6[64]
8002a784:	70 08       	ld.w	r8,r8[0x0]
8002a786:	10 9c       	mov	r12,r8
8002a788:	f0 16 00 77 	mcall	r6[476]
	// Set next transfer to false
	twim_next = false;
8002a78c:	ec f9 00 b8 	ld.w	r9,r6[184]
8002a790:	30 08       	mov	r8,0
8002a792:	b2 88       	st.b	r9[0x0],r8
	transfer_status = TWI_SUCCESS;
8002a794:	ec f8 00 78 	ld.w	r8,r6[120]
8002a798:	30 09       	mov	r9,0
8002a79a:	91 09       	st.w	r8[0x0],r9
	if (tenbit && first->read) {
8002a79c:	ef 39 ff f0 	ld.ub	r9,r7[-16]
8002a7a0:	30 08       	mov	r8,0
8002a7a2:	f0 09 18 00 	cp.b	r9,r8
8002a7a6:	c3 00       	breq	8002a806 <twim_chained_transfer+0xca>
8002a7a8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a7ac:	f1 38 00 0c 	ld.ub	r8,r8[12]
8002a7b0:	5c 58       	castu.b	r8
8002a7b2:	c2 a0       	breq	8002a806 <twim_chained_transfer+0xca>
		twim->cmdr = (first->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
				| (0 << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
8002a7b4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a7b8:	70 08       	ld.w	r8,r8[0x0]
	twim_disable_interrupt (twim_inst);
	// Set next transfer to false
	twim_next = false;
	transfer_status = TWI_SUCCESS;
	if (tenbit && first->read) {
		twim->cmdr = (first->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8002a7ba:	a1 78       	lsl	r8,0x1
8002a7bc:	10 99       	mov	r9,r8
8002a7be:	e8 19 a8 00 	orl	r9,0xa800
8002a7c2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a7c6:	91 39       	st.w	r8[0xc],r9
				| (AVR32_TWIM_CMDR_TENBIT_MASK)
				| (0 << AVR32_TWIM_CMDR_READ_OFFSET);

		twim->ncmdr = (first->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
				| (first->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
8002a7c8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a7cc:	70 08       	ld.w	r8,r8[0x0]
				| (AVR32_TWIM_CMDR_START_MASK)
				| (0 << AVR32_TWIM_CMDR_STOP_OFFSET)
				| (AVR32_TWIM_CMDR_TENBIT_MASK)
				| (0 << AVR32_TWIM_CMDR_READ_OFFSET);

		twim->ncmdr = (first->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8002a7ce:	f0 09 15 01 	lsl	r9,r8,0x1
				| (first->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
8002a7d2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a7d6:	70 28       	ld.w	r8,r8[0x8]
				| (0 << AVR32_TWIM_CMDR_STOP_OFFSET)
				| (AVR32_TWIM_CMDR_TENBIT_MASK)
				| (0 << AVR32_TWIM_CMDR_READ_OFFSET);

		twim->ncmdr = (first->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
				| (first->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
8002a7d8:	b1 68       	lsl	r8,0x10
				| (AVR32_TWIM_CMDR_VALID_MASK)
8002a7da:	f3 e8 10 08 	or	r8,r9,r8
				| (AVR32_TWIM_CMDR_START_MASK)
				| (0 << AVR32_TWIM_CMDR_STOP_OFFSET)
				| (AVR32_TWIM_CMDR_TENBIT_MASK)
				| (0 << AVR32_TWIM_CMDR_READ_OFFSET);

		twim->ncmdr = (first->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8002a7de:	10 99       	mov	r9,r8
8002a7e0:	e8 19 b8 01 	orl	r9,0xb801
8002a7e4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a7e8:	91 49       	st.w	r8[0x10],r9
				| (AVR32_TWIM_CMDR_START_MASK)
				| (0 << AVR32_TWIM_CMDR_STOP_OFFSET)
				| (AVR32_TWIM_CMDR_TENBIT_MASK)
				| (AVR32_TWIM_CMDR_REPSAME_MASK)
				| (AVR32_TWIM_CMDR_READ_MASK);
		while (!(twim->sr & AVR32_TWIM_SR_CCOMP_MASK)) {
8002a7ea:	c0 38       	rjmp	8002a7f0 <twim_chained_transfer+0xb4>
			cpu_relax();
8002a7ec:	fe cf ff fc 	sub	pc,pc,-4
				| (AVR32_TWIM_CMDR_START_MASK)
				| (0 << AVR32_TWIM_CMDR_STOP_OFFSET)
				| (AVR32_TWIM_CMDR_TENBIT_MASK)
				| (AVR32_TWIM_CMDR_REPSAME_MASK)
				| (AVR32_TWIM_CMDR_READ_MASK);
		while (!(twim->sr & AVR32_TWIM_SR_CCOMP_MASK)) {
8002a7f0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a7f4:	70 78       	ld.w	r8,r8[0x1c]
8002a7f6:	e2 18 00 08 	andl	r8,0x8,COH
8002a7fa:	cf 90       	breq	8002a7ec <twim_chained_transfer+0xb0>
			cpu_relax();
		}
		twim->scr = AVR32_TWIM_SR_CCOMP_MASK;
8002a7fc:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a800:	30 89       	mov	r9,8
8002a802:	91 b9       	st.w	r8[0x2c],r9
	// Disable the TWIM interrupts
	twim_disable_interrupt (twim_inst);
	// Set next transfer to false
	twim_next = false;
	transfer_status = TWI_SUCCESS;
	if (tenbit && first->read) {
8002a804:	c1 c8       	rjmp	8002a83c <twim_chained_transfer+0x100>
		}
		twim->scr = AVR32_TWIM_SR_CCOMP_MASK;
	} else {
		twim->cmdr = (first->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
				| (first->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
8002a806:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a80a:	70 08       	ld.w	r8,r8[0x0]
		while (!(twim->sr & AVR32_TWIM_SR_CCOMP_MASK)) {
			cpu_relax();
		}
		twim->scr = AVR32_TWIM_SR_CCOMP_MASK;
	} else {
		twim->cmdr = (first->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8002a80c:	f0 09 15 01 	lsl	r9,r8,0x1
				| (first->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
8002a810:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a814:	70 28       	ld.w	r8,r8[0x8]
			cpu_relax();
		}
		twim->scr = AVR32_TWIM_SR_CCOMP_MASK;
	} else {
		twim->cmdr = (first->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
				| (first->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
8002a816:	b1 68       	lsl	r8,0x10
				| (AVR32_TWIM_CMDR_VALID_MASK)
8002a818:	10 49       	or	r9,r8
				| (AVR32_TWIM_CMDR_START_MASK)
				| (0 << AVR32_TWIM_CMDR_STOP_OFFSET)
				| ((tenbit ? 1 : 0) << AVR32_TWIM_CMDR_TENBIT_OFFSET)
8002a81a:	ef 38 ff f0 	ld.ub	r8,r7[-16]
8002a81e:	ab 78       	lsl	r8,0xb
		while (!(twim->sr & AVR32_TWIM_SR_CCOMP_MASK)) {
			cpu_relax();
		}
		twim->scr = AVR32_TWIM_SR_CCOMP_MASK;
	} else {
		twim->cmdr = (first->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8002a820:	10 49       	or	r9,r8
				| (first->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
				| (AVR32_TWIM_CMDR_START_MASK)
				| (0 << AVR32_TWIM_CMDR_STOP_OFFSET)
				| ((tenbit ? 1 : 0) << AVR32_TWIM_CMDR_TENBIT_OFFSET)
				| ((first->read ? 1 : 0) << AVR32_TWIM_CMDR_READ_OFFSET);
8002a822:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a826:	f1 38 00 0c 	ld.ub	r8,r8[12]
8002a82a:	5c 58       	castu.b	r8
		while (!(twim->sr & AVR32_TWIM_SR_CCOMP_MASK)) {
			cpu_relax();
		}
		twim->scr = AVR32_TWIM_SR_CCOMP_MASK;
	} else {
		twim->cmdr = (first->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8002a82c:	f3 e8 10 08 	or	r8,r9,r8
8002a830:	10 99       	mov	r9,r8
8002a832:	e8 19 a0 00 	orl	r9,0xa000
8002a836:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a83a:	91 39       	st.w	r8[0xc],r9
				| ((first->read ? 1 : 0) << AVR32_TWIM_CMDR_READ_OFFSET);
	}

	twim->ncmdr = (second->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
			| (second->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
			| (AVR32_TWIM_CMDR_VALID_MASK)
8002a83c:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002a840:	70 08       	ld.w	r8,r8[0x0]
				| (0 << AVR32_TWIM_CMDR_STOP_OFFSET)
				| ((tenbit ? 1 : 0) << AVR32_TWIM_CMDR_TENBIT_OFFSET)
				| ((first->read ? 1 : 0) << AVR32_TWIM_CMDR_READ_OFFSET);
	}

	twim->ncmdr = (second->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8002a842:	f0 09 15 01 	lsl	r9,r8,0x1
			| (second->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
			| (AVR32_TWIM_CMDR_VALID_MASK)
8002a846:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002a84a:	70 28       	ld.w	r8,r8[0x8]
				| ((tenbit ? 1 : 0) << AVR32_TWIM_CMDR_TENBIT_OFFSET)
				| ((first->read ? 1 : 0) << AVR32_TWIM_CMDR_READ_OFFSET);
	}

	twim->ncmdr = (second->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
			| (second->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
8002a84c:	b1 68       	lsl	r8,0x10
			| (AVR32_TWIM_CMDR_VALID_MASK)
8002a84e:	10 49       	or	r9,r8
			| (AVR32_TWIM_CMDR_START_MASK)
			| (AVR32_TWIM_CMDR_STOP_MASK)
			| ((tenbit ? 1 : 0) << AVR32_TWIM_CMDR_TENBIT_OFFSET)
8002a850:	ef 38 ff f0 	ld.ub	r8,r7[-16]
8002a854:	ab 78       	lsl	r8,0xb
				| (0 << AVR32_TWIM_CMDR_STOP_OFFSET)
				| ((tenbit ? 1 : 0) << AVR32_TWIM_CMDR_TENBIT_OFFSET)
				| ((first->read ? 1 : 0) << AVR32_TWIM_CMDR_READ_OFFSET);
	}

	twim->ncmdr = (second->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8002a856:	f3 e8 10 0a 	or	r10,r9,r8
			| (second->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
			| (AVR32_TWIM_CMDR_VALID_MASK)
			| (AVR32_TWIM_CMDR_START_MASK)
			| (AVR32_TWIM_CMDR_STOP_MASK)
			| ((tenbit ? 1 : 0) << AVR32_TWIM_CMDR_TENBIT_OFFSET)
			| (((tenbit && second->read) ? 1 : 0) 
8002a85a:	ef 39 ff f0 	ld.ub	r9,r7[-16]
8002a85e:	30 08       	mov	r8,0
8002a860:	f0 09 18 00 	cp.b	r9,r8
8002a864:	c0 90       	breq	8002a876 <twim_chained_transfer+0x13a>
8002a866:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002a86a:	f1 38 00 0c 	ld.ub	r8,r8[12]
8002a86e:	5c 58       	castu.b	r8
8002a870:	c0 30       	breq	8002a876 <twim_chained_transfer+0x13a>
8002a872:	30 18       	mov	r8,1
8002a874:	c0 28       	rjmp	8002a878 <twim_chained_transfer+0x13c>
8002a876:	30 08       	mov	r8,0
8002a878:	ad 68       	lsl	r8,0xc
				| (0 << AVR32_TWIM_CMDR_STOP_OFFSET)
				| ((tenbit ? 1 : 0) << AVR32_TWIM_CMDR_TENBIT_OFFSET)
				| ((first->read ? 1 : 0) << AVR32_TWIM_CMDR_READ_OFFSET);
	}

	twim->ncmdr = (second->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8002a87a:	f5 e8 10 09 	or	r9,r10,r8
			| (AVR32_TWIM_CMDR_START_MASK)
			| (AVR32_TWIM_CMDR_STOP_MASK)
			| ((tenbit ? 1 : 0) << AVR32_TWIM_CMDR_TENBIT_OFFSET)
			| (((tenbit && second->read) ? 1 : 0) 
			<< AVR32_TWIM_CMDR_REPSAME_OFFSET)
			| ((second->read ? 1 : 0) << AVR32_TWIM_CMDR_READ_OFFSET);
8002a87e:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002a882:	f1 38 00 0c 	ld.ub	r8,r8[12]
8002a886:	5c 58       	castu.b	r8
				| (0 << AVR32_TWIM_CMDR_STOP_OFFSET)
				| ((tenbit ? 1 : 0) << AVR32_TWIM_CMDR_TENBIT_OFFSET)
				| ((first->read ? 1 : 0) << AVR32_TWIM_CMDR_READ_OFFSET);
	}

	twim->ncmdr = (second->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8002a888:	f3 e8 10 08 	or	r8,r9,r8
8002a88c:	10 99       	mov	r9,r8
8002a88e:	e8 19 e0 00 	orl	r9,0xe000
8002a892:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a896:	91 49       	st.w	r8[0x10],r9
			| ((tenbit ? 1 : 0) << AVR32_TWIM_CMDR_TENBIT_OFFSET)
			| (((tenbit && second->read) ? 1 : 0) 
			<< AVR32_TWIM_CMDR_REPSAME_OFFSET)
			| ((second->read ? 1 : 0) << AVR32_TWIM_CMDR_READ_OFFSET);

	if (first->read) {
8002a898:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a89c:	f1 38 00 0c 	ld.ub	r8,r8[12]
8002a8a0:	5c 58       	castu.b	r8
8002a8a2:	c3 80       	breq	8002a912 <twim_chained_transfer+0x1d6>
		// get a pointer to applicative data
		twim_rx_data = first->buffer;
8002a8a4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a8a8:	70 18       	ld.w	r8,r8[0x4]
8002a8aa:	10 99       	mov	r9,r8
8002a8ac:	ec f8 00 bc 	ld.w	r8,r6[188]
8002a8b0:	91 09       	st.w	r8[0x0],r9
		// get data
		while (!(twim->sr & AVR32_TWIM_SR_CCOMP_MASK)) {
8002a8b2:	c1 58       	rjmp	8002a8dc <twim_chained_transfer+0x1a0>
			if (twim->sr & AVR32_TWIM_SR_RXRDY_MASK) {
8002a8b4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a8b8:	70 78       	ld.w	r8,r8[0x1c]
8002a8ba:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002a8be:	5c 58       	castu.b	r8
8002a8c0:	c0 e0       	breq	8002a8dc <twim_chained_transfer+0x1a0>
				*twim_rx_data++ = twim->rhr;
8002a8c2:	ec f8 00 bc 	ld.w	r8,r6[188]
8002a8c6:	70 08       	ld.w	r8,r8[0x0]
8002a8c8:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002a8cc:	72 59       	ld.w	r9,r9[0x14]
8002a8ce:	5c 59       	castu.b	r9
8002a8d0:	b0 89       	st.b	r8[0x0],r9
8002a8d2:	f0 c9 ff ff 	sub	r9,r8,-1
8002a8d6:	ec f8 00 bc 	ld.w	r8,r6[188]
8002a8da:	91 09       	st.w	r8[0x0],r9

	if (first->read) {
		// get a pointer to applicative data
		twim_rx_data = first->buffer;
		// get data
		while (!(twim->sr & AVR32_TWIM_SR_CCOMP_MASK)) {
8002a8dc:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a8e0:	70 78       	ld.w	r8,r8[0x1c]
8002a8e2:	e2 18 00 08 	andl	r8,0x8,COH
8002a8e6:	ce 70       	breq	8002a8b4 <twim_chained_transfer+0x178>
			if (twim->sr & AVR32_TWIM_SR_RXRDY_MASK) {
				*twim_rx_data++ = twim->rhr;
			}
		}
		if (twim->sr & AVR32_TWIM_SR_RXRDY_MASK) {
8002a8e8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a8ec:	70 78       	ld.w	r8,r8[0x1c]
8002a8ee:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002a8f2:	5c 58       	castu.b	r8
8002a8f4:	c4 40       	breq	8002a97c <twim_chained_transfer+0x240>
			*twim_rx_data++ = twim->rhr;
8002a8f6:	ec f8 00 bc 	ld.w	r8,r6[188]
8002a8fa:	70 08       	ld.w	r8,r8[0x0]
8002a8fc:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002a900:	72 59       	ld.w	r9,r9[0x14]
8002a902:	5c 59       	castu.b	r9
8002a904:	b0 89       	st.b	r8[0x0],r9
8002a906:	f0 c9 ff ff 	sub	r9,r8,-1
8002a90a:	ec f8 00 bc 	ld.w	r8,r6[188]
8002a90e:	91 09       	st.w	r8[0x0],r9
8002a910:	c3 68       	rjmp	8002a97c <twim_chained_transfer+0x240>
		}
	} else {
		// get a pointer to applicative data
		twim_tx_data = first->buffer;
8002a912:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a916:	70 18       	ld.w	r8,r8[0x4]
8002a918:	10 99       	mov	r9,r8
8002a91a:	ec f8 00 90 	ld.w	r8,r6[144]
8002a91e:	91 09       	st.w	r8[0x0],r9
		twim_tx_nb_bytes = first->length;
8002a920:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a924:	70 29       	ld.w	r9,r8[0x8]
8002a926:	ec f8 00 84 	ld.w	r8,r6[132]
8002a92a:	91 09       	st.w	r8[0x0],r9
		// send data
		while (!(twim->sr & AVR32_TWIM_SR_CCOMP_MASK)) {
8002a92c:	c2 28       	rjmp	8002a970 <twim_chained_transfer+0x234>
			if ((twim_tx_nb_bytes > 0) &&
8002a92e:	ec f8 00 84 	ld.w	r8,r6[132]
8002a932:	70 08       	ld.w	r8,r8[0x0]
8002a934:	58 08       	cp.w	r8,0
8002a936:	c1 d0       	breq	8002a970 <twim_chained_transfer+0x234>
					(twim->sr & AVR32_TWIM_SR_TXRDY_MASK)) {
8002a938:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a93c:	70 78       	ld.w	r8,r8[0x1c]
8002a93e:	e2 18 00 02 	andl	r8,0x2,COH
		// get a pointer to applicative data
		twim_tx_data = first->buffer;
		twim_tx_nb_bytes = first->length;
		// send data
		while (!(twim->sr & AVR32_TWIM_SR_CCOMP_MASK)) {
			if ((twim_tx_nb_bytes > 0) &&
8002a942:	c1 70       	breq	8002a970 <twim_chained_transfer+0x234>
					(twim->sr & AVR32_TWIM_SR_TXRDY_MASK)) {
				twim->thr = *twim_tx_data++;
8002a944:	ec f8 00 90 	ld.w	r8,r6[144]
8002a948:	70 08       	ld.w	r8,r8[0x0]
8002a94a:	11 89       	ld.ub	r9,r8[0x0]
8002a94c:	5c 59       	castu.b	r9
8002a94e:	12 9a       	mov	r10,r9
8002a950:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002a954:	93 6a       	st.w	r9[0x18],r10
8002a956:	f0 c9 ff ff 	sub	r9,r8,-1
8002a95a:	ec f8 00 90 	ld.w	r8,r6[144]
8002a95e:	91 09       	st.w	r8[0x0],r9
				twim_tx_nb_bytes--;
8002a960:	ec f8 00 84 	ld.w	r8,r6[132]
8002a964:	70 08       	ld.w	r8,r8[0x0]
8002a966:	f0 c9 00 01 	sub	r9,r8,1
8002a96a:	ec f8 00 84 	ld.w	r8,r6[132]
8002a96e:	91 09       	st.w	r8[0x0],r9
	} else {
		// get a pointer to applicative data
		twim_tx_data = first->buffer;
		twim_tx_nb_bytes = first->length;
		// send data
		while (!(twim->sr & AVR32_TWIM_SR_CCOMP_MASK)) {
8002a970:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a974:	70 78       	ld.w	r8,r8[0x1c]
8002a976:	e2 18 00 08 	andl	r8,0x8,COH
8002a97a:	cd a0       	breq	8002a92e <twim_chained_transfer+0x1f2>
				twim_tx_nb_bytes--;
			}
		}
	}

	twim->scr = AVR32_TWIM_SR_CCOMP_MASK;
8002a97c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a980:	30 89       	mov	r9,8
8002a982:	91 b9       	st.w	r8[0x2c],r9

	if (second->read) {
8002a984:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002a988:	f1 38 00 0c 	ld.ub	r8,r8[12]
8002a98c:	5c 58       	castu.b	r8
8002a98e:	c2 40       	breq	8002a9d6 <twim_chained_transfer+0x29a>
		// get a pointer to applicative data
		twim_rx_data = second->buffer;
8002a990:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002a994:	70 18       	ld.w	r8,r8[0x4]
8002a996:	10 99       	mov	r9,r8
8002a998:	ec f8 00 bc 	ld.w	r8,r6[188]
8002a99c:	91 09       	st.w	r8[0x0],r9
		// get data
		while (!(twim->sr & AVR32_TWIM_SR_IDLE_MASK)) {
8002a99e:	c1 58       	rjmp	8002a9c8 <twim_chained_transfer+0x28c>
			if (twim->sr & AVR32_TWIM_SR_RXRDY_MASK) {
8002a9a0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a9a4:	70 78       	ld.w	r8,r8[0x1c]
8002a9a6:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002a9aa:	5c 58       	castu.b	r8
8002a9ac:	c0 e0       	breq	8002a9c8 <twim_chained_transfer+0x28c>
				*twim_rx_data++ = twim->rhr;
8002a9ae:	ec f8 00 bc 	ld.w	r8,r6[188]
8002a9b2:	70 08       	ld.w	r8,r8[0x0]
8002a9b4:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002a9b8:	72 59       	ld.w	r9,r9[0x14]
8002a9ba:	5c 59       	castu.b	r9
8002a9bc:	b0 89       	st.b	r8[0x0],r9
8002a9be:	f0 c9 ff ff 	sub	r9,r8,-1
8002a9c2:	ec f8 00 bc 	ld.w	r8,r6[188]
8002a9c6:	91 09       	st.w	r8[0x0],r9

	if (second->read) {
		// get a pointer to applicative data
		twim_rx_data = second->buffer;
		// get data
		while (!(twim->sr & AVR32_TWIM_SR_IDLE_MASK)) {
8002a9c8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a9cc:	70 78       	ld.w	r8,r8[0x1c]
8002a9ce:	e2 18 00 10 	andl	r8,0x10,COH
8002a9d2:	ce 70       	breq	8002a9a0 <twim_chained_transfer+0x264>
8002a9d4:	c3 68       	rjmp	8002aa40 <twim_chained_transfer+0x304>
				*twim_rx_data++ = twim->rhr;
			}
		}
	} else {
		// get a pointer to applicative data
		twim_tx_data = second->buffer;
8002a9d6:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002a9da:	70 18       	ld.w	r8,r8[0x4]
8002a9dc:	10 99       	mov	r9,r8
8002a9de:	ec f8 00 90 	ld.w	r8,r6[144]
8002a9e2:	91 09       	st.w	r8[0x0],r9
		
		twim_tx_nb_bytes = second->length;
8002a9e4:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002a9e8:	70 29       	ld.w	r9,r8[0x8]
8002a9ea:	ec f8 00 84 	ld.w	r8,r6[132]
8002a9ee:	91 09       	st.w	r8[0x0],r9
		// send data
		while (!(twim->sr & AVR32_TWIM_SR_IDLE_MASK)) {
8002a9f0:	c2 28       	rjmp	8002aa34 <twim_chained_transfer+0x2f8>
			if ((twim_tx_nb_bytes > 0) && 
8002a9f2:	ec f8 00 84 	ld.w	r8,r6[132]
8002a9f6:	70 08       	ld.w	r8,r8[0x0]
8002a9f8:	58 08       	cp.w	r8,0
8002a9fa:	c1 d0       	breq	8002aa34 <twim_chained_transfer+0x2f8>
					(twim->sr & AVR32_TWIM_SR_TXRDY_MASK)) {
8002a9fc:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002aa00:	70 78       	ld.w	r8,r8[0x1c]
8002aa02:	e2 18 00 02 	andl	r8,0x2,COH
		twim_tx_data = second->buffer;
		
		twim_tx_nb_bytes = second->length;
		// send data
		while (!(twim->sr & AVR32_TWIM_SR_IDLE_MASK)) {
			if ((twim_tx_nb_bytes > 0) && 
8002aa06:	c1 70       	breq	8002aa34 <twim_chained_transfer+0x2f8>
					(twim->sr & AVR32_TWIM_SR_TXRDY_MASK)) {
			twim->thr = *twim_tx_data++;
8002aa08:	ec f8 00 90 	ld.w	r8,r6[144]
8002aa0c:	70 08       	ld.w	r8,r8[0x0]
8002aa0e:	11 89       	ld.ub	r9,r8[0x0]
8002aa10:	5c 59       	castu.b	r9
8002aa12:	12 9a       	mov	r10,r9
8002aa14:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002aa18:	93 6a       	st.w	r9[0x18],r10
8002aa1a:	f0 c9 ff ff 	sub	r9,r8,-1
8002aa1e:	ec f8 00 90 	ld.w	r8,r6[144]
8002aa22:	91 09       	st.w	r8[0x0],r9
			twim_tx_nb_bytes--;
8002aa24:	ec f8 00 84 	ld.w	r8,r6[132]
8002aa28:	70 08       	ld.w	r8,r8[0x0]
8002aa2a:	f0 c9 00 01 	sub	r9,r8,1
8002aa2e:	ec f8 00 84 	ld.w	r8,r6[132]
8002aa32:	91 09       	st.w	r8[0x0],r9
		// get a pointer to applicative data
		twim_tx_data = second->buffer;
		
		twim_tx_nb_bytes = second->length;
		// send data
		while (!(twim->sr & AVR32_TWIM_SR_IDLE_MASK)) {
8002aa34:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002aa38:	70 78       	ld.w	r8,r8[0x1c]
8002aa3a:	e2 18 00 10 	andl	r8,0x10,COH
8002aa3e:	cd a0       	breq	8002a9f2 <twim_chained_transfer+0x2b6>
			twim_tx_nb_bytes--;
			}
		}
	}

	if (twim->sr & AVR32_TWIM_SR_ARBLST_MASK) {
8002aa40:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002aa44:	70 78       	ld.w	r8,r8[0x1c]
8002aa46:	e2 18 04 00 	andl	r8,0x400,COH
8002aa4a:	c0 80       	breq	8002aa5a <twim_chained_transfer+0x31e>
		twim->scr = AVR32_TWIM_SCR_ARBLST_MASK;
8002aa4c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002aa50:	e0 69 04 00 	mov	r9,1024
8002aa54:	91 b9       	st.w	r8[0x2c],r9
		return ERR_IO_ERROR;
8002aa56:	3f f8       	mov	r8,-1
8002aa58:	c1 88       	rjmp	8002aa88 <twim_chained_transfer+0x34c>
	}

	if (twim->sr & AVR32_TWIM_SR_NAK_MASK) {
8002aa5a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002aa5e:	70 78       	ld.w	r8,r8[0x1c]
8002aa60:	e2 18 03 00 	andl	r8,0x300,COH
8002aa64:	c1 10       	breq	8002aa86 <twim_chained_transfer+0x34a>
		twim->cmdr = twim->cmdr ^ AVR32_TWIM_CMDR_VALID_MASK;
8002aa66:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002aa6a:	70 38       	ld.w	r8,r8[0xc]
8002aa6c:	10 99       	mov	r9,r8
8002aa6e:	ec 19 80 00 	eorl	r9,0x8000
8002aa72:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002aa76:	91 39       	st.w	r8[0xc],r9
		twim->scr = AVR32_TWIM_SCR_NAK_MASK;
8002aa78:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002aa7c:	e0 69 03 00 	mov	r9,768
8002aa80:	91 b9       	st.w	r8[0x2c],r9
		return ERR_IO_ERROR;
8002aa82:	3f f8       	mov	r8,-1
8002aa84:	c0 28       	rjmp	8002aa88 <twim_chained_transfer+0x34c>
	}
	return STATUS_OK;
8002aa86:	30 08       	mov	r8,0
}
8002aa88:	10 9c       	mov	r12,r8
8002aa8a:	2f cd       	sub	sp,-16
8002aa8c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002aa90:	80 02       	ld.sh	r2,r0[0x0]
8002aa92:	a5 cc       	cbr	r12,0x4

8002aa94 <twim_status>:

/**
 * \brief Information about the current status of the TWI Bus
 */
uint8_t twim_status ( void )
{
8002aa94:	eb cd 40 c0 	pushm	r6-r7,lr
8002aa98:	1a 97       	mov	r7,sp
8002aa9a:	20 1d       	sub	sp,4
8002aa9c:	48 a6       	lddpc	r6,8002aac4 <twim_status+0x30>
8002aa9e:	1e 26       	rsub	r6,pc
	uint32_t status = twim_inst->sr;
8002aaa0:	ec f8 00 40 	ld.w	r8,r6[64]
8002aaa4:	70 08       	ld.w	r8,r8[0x0]
8002aaa6:	70 78       	ld.w	r8,r8[0x1c]
8002aaa8:	ef 48 ff fc 	st.w	r7[-4],r8
	if ((status & AVR32_TWIM_SR_IDLE_MASK)
8002aaac:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002aab0:	e2 18 00 10 	andl	r8,0x10,COH
8002aab4:	c0 30       	breq	8002aaba <twim_status+0x26>
#if AVR32_TWIM_H_VERSION > 101 ||(status&AVR32_TWIM_SR_BUSFREE_MASK)
#endif 
		) {
		return 1;
8002aab6:	30 18       	mov	r8,1
8002aab8:	c0 28       	rjmp	8002aabc <twim_status+0x28>
	} else {
		return 0;
8002aaba:	30 08       	mov	r8,0
	}
}
8002aabc:	10 9c       	mov	r12,r8
8002aabe:	2f fd       	sub	sp,-4
8002aac0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002aac4:	80 02       	ld.sh	r2,r0[0x0]
8002aac6:	a9 22       	st.d	r4++,r2

8002aac8 <cpu_irq_is_enabled_flags>:

	return flags;
}

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
8002aac8:	eb cd 40 80 	pushm	r7,lr
8002aacc:	1a 97       	mov	r7,sp
8002aace:	20 1d       	sub	sp,4
8002aad0:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
8002aad4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002aad8:	e6 18 00 01 	andh	r8,0x1,COH
8002aadc:	5f 08       	sreq	r8
8002aade:	5c 58       	castu.b	r8
}
8002aae0:	10 9c       	mov	r12,r8
8002aae2:	2f fd       	sub	sp,-4
8002aae4:	e3 cd 80 80 	ldm	sp++,r7,pc

8002aae8 <usart_set_async_baudrate>:
 *
 * \retval USART_SUCCESS        Baud rate successfully initialized.
 * \retval USART_INVALID_INPUT  Baud rate set point is out of range for the given input clock frequency.
 */
static int usart_set_async_baudrate(volatile avr32_usart_t *usart, unsigned int baudrate, unsigned long pba_hz)
{
8002aae8:	eb cd 40 80 	pushm	r7,lr
8002aaec:	1a 97       	mov	r7,sp
8002aaee:	20 7d       	sub	sp,28
8002aaf0:	ef 4c ff ec 	st.w	r7[-20],r12
8002aaf4:	ef 4b ff e8 	st.w	r7[-24],r11
8002aaf8:	ef 4a ff e4 	st.w	r7[-28],r10
  unsigned int over = (pba_hz >= 16 * baudrate) ? 16 : 8;
8002aafc:	ee f8 ff e8 	ld.w	r8,r7[-24]
8002ab00:	f0 09 15 04 	lsl	r9,r8,0x4
8002ab04:	ee f8 ff e4 	ld.w	r8,r7[-28]
8002ab08:	10 39       	cp.w	r9,r8
8002ab0a:	e0 8b 00 04 	brhi	8002ab12 <usart_set_async_baudrate+0x2a>
8002ab0e:	31 08       	mov	r8,16
8002ab10:	c0 28       	rjmp	8002ab14 <usart_set_async_baudrate+0x2c>
8002ab12:	30 88       	mov	r8,8
8002ab14:	ef 48 ff f0 	st.w	r7[-16],r8
  unsigned int cd_fp = ((1 << AVR32_USART_BRGR_FP_SIZE) * pba_hz + (over * baudrate) / 2) / (over * baudrate);
8002ab18:	ee f8 ff e4 	ld.w	r8,r7[-28]
8002ab1c:	f0 09 15 03 	lsl	r9,r8,0x3
8002ab20:	ee fa ff f0 	ld.w	r10,r7[-16]
8002ab24:	ee f8 ff e8 	ld.w	r8,r7[-24]
8002ab28:	f4 08 02 48 	mul	r8,r10,r8
8002ab2c:	a1 98       	lsr	r8,0x1
8002ab2e:	f2 08 00 08 	add	r8,r9,r8
8002ab32:	ee fa ff f0 	ld.w	r10,r7[-16]
8002ab36:	ee f9 ff e8 	ld.w	r9,r7[-24]
8002ab3a:	f4 09 02 49 	mul	r9,r10,r9
8002ab3e:	f0 09 0d 08 	divu	r8,r8,r9
8002ab42:	ef 48 ff f4 	st.w	r7[-12],r8
  unsigned int cd = cd_fp >> AVR32_USART_BRGR_FP_SIZE;
8002ab46:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002ab4a:	a3 98       	lsr	r8,0x3
8002ab4c:	ef 48 ff f8 	st.w	r7[-8],r8
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);
8002ab50:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002ab54:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
8002ab58:	ef 48 ff fc 	st.w	r7[-4],r8

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
8002ab5c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ab60:	58 08       	cp.w	r8,0
8002ab62:	c0 70       	breq	8002ab70 <usart_set_async_baudrate+0x88>
8002ab64:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ab68:	e0 48 ff ff 	cp.w	r8,65535
8002ab6c:	e0 88 00 04 	brls	8002ab74 <usart_set_async_baudrate+0x8c>
    return USART_INVALID_INPUT;
8002ab70:	30 18       	mov	r8,1
8002ab72:	c2 08       	rjmp	8002abb2 <usart_set_async_baudrate+0xca>

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
8002ab74:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002ab78:	70 18       	ld.w	r8,r8[0x4]
8002ab7a:	10 99       	mov	r9,r8
8002ab7c:	e4 19 ff f7 	andh	r9,0xfff7
8002ab80:	e0 19 fe cf 	andl	r9,0xfecf
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
    return USART_INVALID_INPUT;

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
8002ab84:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002ab88:	59 08       	cp.w	r8,16
8002ab8a:	c0 40       	breq	8002ab92 <usart_set_async_baudrate+0xaa>
8002ab8c:	e8 68 00 00 	mov	r8,524288
8002ab90:	c0 28       	rjmp	8002ab94 <usart_set_async_baudrate+0xac>
8002ab92:	30 08       	mov	r8,0
8002ab94:	10 49       	or	r9,r8
8002ab96:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002ab9a:	91 19       	st.w	r8[0x4],r9
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
              ((over == 16) ? AVR32_USART_MR_OVER_X16 : AVR32_USART_MR_OVER_X8) << AVR32_USART_MR_OVER_OFFSET;

  usart->brgr = cd << AVR32_USART_BRGR_CD_OFFSET |
                fp << AVR32_USART_BRGR_FP_OFFSET;
8002ab9c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002aba0:	f0 09 15 10 	lsl	r9,r8,0x10
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
              ((over == 16) ? AVR32_USART_MR_OVER_X16 : AVR32_USART_MR_OVER_X8) << AVR32_USART_MR_OVER_OFFSET;

  usart->brgr = cd << AVR32_USART_BRGR_CD_OFFSET |
8002aba4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002aba8:	10 49       	or	r9,r8
8002abaa:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002abae:	91 89       	st.w	r8[0x20],r9
                fp << AVR32_USART_BRGR_FP_OFFSET;

  return USART_SUCCESS;
8002abb0:	30 08       	mov	r8,0
}
8002abb2:	10 9c       	mov	r12,r8
8002abb4:	2f 9d       	sub	sp,-28
8002abb6:	e3 cd 80 80 	ldm	sp++,r7,pc

8002abba <usart_set_sync_master_baudrate>:
 *
 * \retval USART_SUCCESS        Baud rate successfully initialized.
 * \retval USART_INVALID_INPUT  Baud rate set point is out of range for the given input clock frequency.
 */
static int usart_set_sync_master_baudrate(volatile avr32_usart_t *usart, unsigned int baudrate, unsigned long pba_hz)
{
8002abba:	eb cd 40 80 	pushm	r7,lr
8002abbe:	1a 97       	mov	r7,sp
8002abc0:	20 4d       	sub	sp,16
8002abc2:	ef 4c ff f8 	st.w	r7[-8],r12
8002abc6:	ef 4b ff f4 	st.w	r7[-12],r11
8002abca:	ef 4a ff f0 	st.w	r7[-16],r10
  unsigned int cd = (pba_hz + baudrate / 2) / baudrate;
8002abce:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002abd2:	f0 09 16 01 	lsr	r9,r8,0x1
8002abd6:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002abda:	f2 08 00 08 	add	r8,r9,r8
8002abde:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002abe2:	f0 09 0d 08 	divu	r8,r8,r9
8002abe6:	ef 48 ff fc 	st.w	r7[-4],r8

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
8002abea:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002abee:	58 08       	cp.w	r8,0
8002abf0:	c0 70       	breq	8002abfe <usart_set_sync_master_baudrate+0x44>
8002abf2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002abf6:	e0 48 ff ff 	cp.w	r8,65535
8002abfa:	e0 88 00 04 	brls	8002ac02 <usart_set_sync_master_baudrate+0x48>
    return USART_INVALID_INPUT;
8002abfe:	30 18       	mov	r8,1
8002ac00:	c1 18       	rjmp	8002ac22 <usart_set_sync_master_baudrate+0x68>

  usart->mr = (usart->mr & ~AVR32_USART_MR_USCLKS_MASK) |
8002ac02:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ac06:	70 18       	ld.w	r8,r8[0x4]
8002ac08:	e0 18 fe cf 	andl	r8,0xfecf
8002ac0c:	10 99       	mov	r9,r8
8002ac0e:	a9 a9       	sbr	r9,0x8
8002ac10:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ac14:	91 19       	st.w	r8[0x4],r9
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
              AVR32_USART_MR_SYNC_MASK;

  usart->brgr = cd << AVR32_USART_BRGR_CD_OFFSET;
8002ac16:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ac1a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002ac1e:	91 89       	st.w	r8[0x20],r9

  return USART_SUCCESS;
8002ac20:	30 08       	mov	r8,0
}
8002ac22:	10 9c       	mov	r12,r8
8002ac24:	2f cd       	sub	sp,-16
8002ac26:	e3 cd 80 80 	ldm	sp++,r7,pc

8002ac2a <usart_set_sync_slave_baudrate>:
 * \param usart Base address of the USART instance.
 *
 * \retval USART_SUCCESS  Baud rate successfully initialized.
 */
static int usart_set_sync_slave_baudrate(volatile avr32_usart_t *usart)
{
8002ac2a:	eb cd 40 80 	pushm	r7,lr
8002ac2e:	1a 97       	mov	r7,sp
8002ac30:	20 1d       	sub	sp,4
8002ac32:	ef 4c ff fc 	st.w	r7[-4],r12
  usart->mr = (usart->mr & ~AVR32_USART_MR_USCLKS_MASK) |
8002ac36:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ac3a:	70 18       	ld.w	r8,r8[0x4]
8002ac3c:	10 99       	mov	r9,r8
8002ac3e:	e8 19 01 30 	orl	r9,0x130
8002ac42:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ac46:	91 19       	st.w	r8[0x4],r9
              AVR32_USART_MR_USCLKS_SCK << AVR32_USART_MR_USCLKS_OFFSET |
              AVR32_USART_MR_SYNC_MASK;

  return USART_SUCCESS;
8002ac48:	30 08       	mov	r8,0
}
8002ac4a:	10 9c       	mov	r12,r8
8002ac4c:	2f fd       	sub	sp,-4
8002ac4e:	e3 cd 80 80 	ldm	sp++,r7,pc

8002ac52 <usart_set_iso7816_clock>:
 *
 * \retval USART_SUCCESS        ISO7816 clock successfully initialized.
 * \retval USART_INVALID_INPUT  ISO7816 clock set point is out of range for the given input clock frequency.
 */
static int usart_set_iso7816_clock(volatile avr32_usart_t *usart, unsigned int clock, unsigned long pba_hz)
{
8002ac52:	eb cd 40 80 	pushm	r7,lr
8002ac56:	1a 97       	mov	r7,sp
8002ac58:	20 4d       	sub	sp,16
8002ac5a:	ef 4c ff f8 	st.w	r7[-8],r12
8002ac5e:	ef 4b ff f4 	st.w	r7[-12],r11
8002ac62:	ef 4a ff f0 	st.w	r7[-16],r10
  unsigned int cd = (pba_hz + clock / 2) / clock;
8002ac66:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002ac6a:	f0 09 16 01 	lsr	r9,r8,0x1
8002ac6e:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002ac72:	f2 08 00 08 	add	r8,r9,r8
8002ac76:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002ac7a:	f0 09 0d 08 	divu	r8,r8,r9
8002ac7e:	ef 48 ff fc 	st.w	r7[-4],r8

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
8002ac82:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ac86:	58 08       	cp.w	r8,0
8002ac88:	c0 70       	breq	8002ac96 <usart_set_iso7816_clock+0x44>
8002ac8a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ac8e:	e0 48 ff ff 	cp.w	r8,65535
8002ac92:	e0 88 00 04 	brls	8002ac9a <usart_set_iso7816_clock+0x48>
    return USART_INVALID_INPUT;
8002ac96:	30 18       	mov	r8,1
8002ac98:	c1 28       	rjmp	8002acbc <usart_set_iso7816_clock+0x6a>

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
8002ac9a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ac9e:	70 18       	ld.w	r8,r8[0x4]
8002aca0:	10 99       	mov	r9,r8
8002aca2:	e4 19 ff f7 	andh	r9,0xfff7
8002aca6:	e0 19 fe cf 	andl	r9,0xfecf
8002acaa:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002acae:	91 19       	st.w	r8[0x4],r9
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
              AVR32_USART_MR_OVER_X16 << AVR32_USART_MR_OVER_OFFSET;

  usart->brgr = cd << AVR32_USART_BRGR_CD_OFFSET;
8002acb0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002acb4:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002acb8:	91 89       	st.w	r8[0x20],r9

  return USART_SUCCESS;
8002acba:	30 08       	mov	r8,0
}
8002acbc:	10 9c       	mov	r12,r8
8002acbe:	2f cd       	sub	sp,-16
8002acc0:	e3 cd 80 80 	ldm	sp++,r7,pc

8002acc4 <usart_set_spi_master_baudrate>:
 *
 * \retval USART_SUCCESS        Baud rate successfully initialized.
 * \retval USART_INVALID_INPUT  Baud rate set point is out of range for the given input clock frequency.
 */
static int usart_set_spi_master_baudrate(volatile avr32_usart_t *usart, unsigned int baudrate, unsigned long pba_hz)
{
8002acc4:	eb cd 40 80 	pushm	r7,lr
8002acc8:	1a 97       	mov	r7,sp
8002acca:	20 4d       	sub	sp,16
8002accc:	ef 4c ff f8 	st.w	r7[-8],r12
8002acd0:	ef 4b ff f4 	st.w	r7[-12],r11
8002acd4:	ef 4a ff f0 	st.w	r7[-16],r10
  unsigned int cd = (pba_hz + baudrate / 2) / baudrate;
8002acd8:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002acdc:	f0 09 16 01 	lsr	r9,r8,0x1
8002ace0:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002ace4:	f2 08 00 08 	add	r8,r9,r8
8002ace8:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002acec:	f0 09 0d 08 	divu	r8,r8,r9
8002acf0:	ef 48 ff fc 	st.w	r7[-4],r8

  if (cd < 4 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
8002acf4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002acf8:	58 38       	cp.w	r8,3
8002acfa:	e0 88 00 08 	brls	8002ad0a <usart_set_spi_master_baudrate+0x46>
8002acfe:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ad02:	e0 48 ff ff 	cp.w	r8,65535
8002ad06:	e0 88 00 04 	brls	8002ad0e <usart_set_spi_master_baudrate+0x4a>
    return USART_INVALID_INPUT;
8002ad0a:	30 18       	mov	r8,1
8002ad0c:	c1 08       	rjmp	8002ad2c <usart_set_spi_master_baudrate+0x68>

  usart->mr = (usart->mr & ~AVR32_USART_MR_USCLKS_MASK) |
8002ad0e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ad12:	70 18       	ld.w	r8,r8[0x4]
8002ad14:	10 99       	mov	r9,r8
8002ad16:	e0 19 ff cf 	andl	r9,0xffcf
8002ad1a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ad1e:	91 19       	st.w	r8[0x4],r9
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET;

  usart->brgr = cd << AVR32_USART_BRGR_CD_OFFSET;
8002ad20:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ad24:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002ad28:	91 89       	st.w	r8[0x20],r9

  return USART_SUCCESS;
8002ad2a:	30 08       	mov	r8,0
}
8002ad2c:	10 9c       	mov	r12,r8
8002ad2e:	2f cd       	sub	sp,-16
8002ad30:	e3 cd 80 80 	ldm	sp++,r7,pc

8002ad34 <usart_set_spi_slave_baudrate>:
 * \param usart Base address of the USART instance.
 *
 * \retval USART_SUCCESS  Baud rate successfully initialized.
 */
static int usart_set_spi_slave_baudrate(volatile avr32_usart_t *usart)
{
8002ad34:	eb cd 40 80 	pushm	r7,lr
8002ad38:	1a 97       	mov	r7,sp
8002ad3a:	20 1d       	sub	sp,4
8002ad3c:	ef 4c ff fc 	st.w	r7[-4],r12
  usart->mr = (usart->mr & ~AVR32_USART_MR_USCLKS_MASK) |
8002ad40:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ad44:	70 18       	ld.w	r8,r8[0x4]
8002ad46:	10 99       	mov	r9,r8
8002ad48:	e8 19 00 30 	orl	r9,0x30
8002ad4c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ad50:	91 19       	st.w	r8[0x4],r9
              AVR32_USART_MR_USCLKS_SCK << AVR32_USART_MR_USCLKS_OFFSET;

  return USART_SUCCESS;
8002ad52:	30 08       	mov	r8,0
}
8002ad54:	10 9c       	mov	r12,r8
8002ad56:	2f fd       	sub	sp,-4
8002ad58:	e3 cd 80 80 	ldm	sp++,r7,pc

8002ad5c <usart_reset>:
 */
//! @{


void usart_reset(volatile avr32_usart_t *usart)
{
8002ad5c:	eb cd 40 c0 	pushm	r6-r7,lr
8002ad60:	1a 97       	mov	r7,sp
8002ad62:	20 2d       	sub	sp,8
8002ad64:	49 a6       	lddpc	r6,8002adcc <usart_reset+0x70>
8002ad66:	1e 26       	rsub	r6,pc
8002ad68:	ef 4c ff f8 	st.w	r7[-8],r12
  bool global_interrupt_enabled = cpu_irq_is_enabled();
8002ad6c:	e1 b8 00 00 	mfsr	r8,0x0
8002ad70:	10 9c       	mov	r12,r8
8002ad72:	ca be       	rcall	8002aac8 <cpu_irq_is_enabled_flags>
8002ad74:	18 98       	mov	r8,r12
8002ad76:	ef 68 ff ff 	st.b	r7[-1],r8

  // Disable all USART interrupts.
  // Interrupts needed should be set explicitly on every reset.
  if (global_interrupt_enabled) cpu_irq_disable();
8002ad7a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8002ad7e:	30 08       	mov	r8,0
8002ad80:	f0 09 18 00 	cp.b	r9,r8
8002ad84:	c0 20       	breq	8002ad88 <usart_reset+0x2c>
8002ad86:	d3 03       	ssrf	0x10
  usart->idr = 0xFFFFFFFF;
8002ad88:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ad8c:	3f f9       	mov	r9,-1
8002ad8e:	91 39       	st.w	r8[0xc],r9
  usart->csr;
8002ad90:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ad94:	70 58       	ld.w	r8,r8[0x14]
  if (global_interrupt_enabled) cpu_irq_enable();
8002ad96:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8002ad9a:	30 08       	mov	r8,0
8002ad9c:	f0 09 18 00 	cp.b	r9,r8
8002ada0:	c0 20       	breq	8002ada4 <usart_reset+0x48>
8002ada2:	d5 03       	csrf	0x10

  // Reset mode and other registers that could cause unpredictable behavior after reset.
  usart->mr = 0;
8002ada4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ada8:	30 09       	mov	r9,0
8002adaa:	91 19       	st.w	r8[0x4],r9
  usart->rtor = 0;
8002adac:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002adb0:	30 09       	mov	r9,0
8002adb2:	91 99       	st.w	r8[0x24],r9
  usart->ttgr = 0;
8002adb4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002adb8:	30 09       	mov	r9,0
8002adba:	91 a9       	st.w	r8[0x28],r9

  // Shutdown TX and RX (will be re-enabled when setup has successfully completed),
  // reset status bits and turn off DTR and RTS.
  usart->cr = AVR32_USART_CR_RSTRX_MASK   |
8002adbc:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002adc0:	ea 69 61 0c 	mov	r9,680204
8002adc4:	91 09       	st.w	r8[0x0],r9
#ifndef AVR32_USART_440_H_INCLUDED
// Note: Modem Signal Management DTR-DSR-DCD-RI are not included in USART rev.440.
              AVR32_USART_CR_DTRDIS_MASK  |
#endif
              AVR32_USART_CR_RTSDIS_MASK;
}
8002adc6:	2f ed       	sub	sp,-8
8002adc8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002adcc:	80 02       	ld.sh	r2,r0[0x0]
8002adce:	ab ea       	*unknown*

8002add0 <usart_init_rs232>:


int usart_init_rs232(volatile avr32_usart_t *usart, const usart_options_t *opt, long pba_hz)
{
8002add0:	eb cd 40 c0 	pushm	r6-r7,lr
8002add4:	1a 97       	mov	r7,sp
8002add6:	20 3d       	sub	sp,12
8002add8:	4d 86       	lddpc	r6,8002af38 <usart_init_rs232+0x168>
8002adda:	1e 26       	rsub	r6,pc
8002addc:	ef 4c ff fc 	st.w	r7[-4],r12
8002ade0:	ef 4b ff f8 	st.w	r7[-8],r11
8002ade4:	ef 4a ff f4 	st.w	r7[-12],r10
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);
8002ade8:	ee fc ff fc 	ld.w	r12,r7[-4]
8002adec:	f0 16 00 4b 	mcall	r6[300]

  // Check input values.
  if (!opt || // Null pointer.
8002adf0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002adf4:	58 08       	cp.w	r8,0
8002adf6:	c3 80       	breq	8002ae66 <usart_init_rs232+0x96>
      opt->charlength < 5 || opt->charlength > 9 ||
8002adf8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002adfc:	11 c9       	ld.ub	r9,r8[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002adfe:	30 48       	mov	r8,4
8002ae00:	f0 09 18 00 	cp.b	r9,r8
8002ae04:	e0 88 00 31 	brls	8002ae66 <usart_init_rs232+0x96>
      opt->charlength < 5 || opt->charlength > 9 ||
8002ae08:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ae0c:	11 c9       	ld.ub	r9,r8[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002ae0e:	30 98       	mov	r8,9
8002ae10:	f0 09 18 00 	cp.b	r9,r8
8002ae14:	e0 8b 00 29 	brhi	8002ae66 <usart_init_rs232+0x96>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
8002ae18:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ae1c:	11 d9       	ld.ub	r9,r8[0x5]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002ae1e:	30 78       	mov	r8,7
8002ae20:	f0 09 18 00 	cp.b	r9,r8
8002ae24:	e0 8b 00 21 	brhi	8002ae66 <usart_init_rs232+0x96>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
8002ae28:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ae2c:	90 39       	ld.sh	r9,r8[0x6]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002ae2e:	e0 68 01 01 	mov	r8,257
8002ae32:	f0 09 19 00 	cp.h	r9,r8
8002ae36:	e0 8b 00 18 	brhi	8002ae66 <usart_init_rs232+0x96>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
8002ae3a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ae3e:	f1 39 00 08 	ld.ub	r9,r8[8]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002ae42:	30 38       	mov	r8,3
8002ae44:	f0 09 18 00 	cp.b	r9,r8
8002ae48:	e0 8b 00 0f 	brhi	8002ae66 <usart_init_rs232+0x96>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
8002ae4c:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002ae50:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ae54:	70 08       	ld.w	r8,r8[0x0]
8002ae56:	12 9a       	mov	r10,r9
8002ae58:	10 9b       	mov	r11,r8
8002ae5a:	ee fc ff fc 	ld.w	r12,r7[-4]
8002ae5e:	c4 5e       	rcall	8002aae8 <usart_set_async_baudrate>
8002ae60:	18 98       	mov	r8,r12
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002ae62:	58 18       	cp.w	r8,1
8002ae64:	c0 31       	brne	8002ae6a <usart_init_rs232+0x9a>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
    return USART_INVALID_INPUT;
8002ae66:	30 18       	mov	r8,1
8002ae68:	c6 48       	rjmp	8002af30 <usart_init_rs232+0x160>

  if (opt->charlength == 9)
8002ae6a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ae6e:	11 c9       	ld.ub	r9,r8[0x4]
8002ae70:	30 98       	mov	r8,9
8002ae72:	f0 09 18 00 	cp.b	r9,r8
8002ae76:	c0 a1       	brne	8002ae8a <usart_init_rs232+0xba>
  {
    // Character length set to 9 bits. MODE9 dominates CHRL.
    usart->mr |= AVR32_USART_MR_MODE9_MASK;
8002ae78:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ae7c:	70 18       	ld.w	r8,r8[0x4]
8002ae7e:	10 99       	mov	r9,r8
8002ae80:	b1 b9       	sbr	r9,0x11
8002ae82:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ae86:	91 19       	st.w	r8[0x4],r9
8002ae88:	c0 d8       	rjmp	8002aea2 <usart_init_rs232+0xd2>
  }
  else
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
8002ae8a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ae8e:	70 19       	ld.w	r9,r8[0x4]
8002ae90:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ae94:	11 c8       	ld.ub	r8,r8[0x4]
8002ae96:	20 58       	sub	r8,5
8002ae98:	a7 68       	lsl	r8,0x6
8002ae9a:	10 49       	or	r9,r8
8002ae9c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002aea0:	91 19       	st.w	r8[0x4],r9
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
8002aea2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002aea6:	70 19       	ld.w	r9,r8[0x4]
8002aea8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002aeac:	11 d8       	ld.ub	r8,r8[0x5]
8002aeae:	f0 0a 15 09 	lsl	r10,r8,0x9
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;
8002aeb2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002aeb6:	f1 38 00 08 	ld.ub	r8,r8[8]
8002aeba:	af 68       	lsl	r8,0xe
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
8002aebc:	f5 e8 10 08 	or	r8,r10,r8
8002aec0:	10 49       	or	r9,r8
8002aec2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002aec6:	91 19       	st.w	r8[0x4],r9
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;

  if (opt->stopbits > USART_2_STOPBITS)
8002aec8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002aecc:	90 39       	ld.sh	r9,r8[0x6]
8002aece:	30 28       	mov	r8,2
8002aed0:	f0 09 19 00 	cp.h	r9,r8
8002aed4:	e0 88 00 14 	brls	8002aefc <usart_init_rs232+0x12c>
  {
    // Set two stop bits
    usart->mr |= AVR32_USART_MR_NBSTOP_2 << AVR32_USART_MR_NBSTOP_OFFSET;
8002aed8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002aedc:	70 18       	ld.w	r8,r8[0x4]
8002aede:	10 99       	mov	r9,r8
8002aee0:	ad b9       	sbr	r9,0xd
8002aee2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002aee6:	91 19       	st.w	r8[0x4],r9
    // and a timeguard period gives the rest.
    usart->ttgr = opt->stopbits - USART_2_STOPBITS;
8002aee8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002aeec:	90 38       	ld.sh	r8,r8[0x6]
8002aeee:	5c 78       	castu.h	r8
8002aef0:	20 28       	sub	r8,2
8002aef2:	10 99       	mov	r9,r8
8002aef4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002aef8:	91 a9       	st.w	r8[0x28],r9
8002aefa:	c0 d8       	rjmp	8002af14 <usart_init_rs232+0x144>
  }
  else
    // Insert 1, 1.5 or 2 stop bits.
    usart->mr |= opt->stopbits << AVR32_USART_MR_NBSTOP_OFFSET;
8002aefc:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002af00:	70 19       	ld.w	r9,r8[0x4]
8002af02:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002af06:	90 38       	ld.sh	r8,r8[0x6]
8002af08:	5c 78       	castu.h	r8
8002af0a:	ad 68       	lsl	r8,0xc
8002af0c:	10 49       	or	r9,r8
8002af0e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002af12:	91 19       	st.w	r8[0x4],r9

  // Set normal mode.
  usart->mr = (usart->mr & ~AVR32_USART_MR_MODE_MASK) |
8002af14:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002af18:	70 18       	ld.w	r8,r8[0x4]
8002af1a:	10 99       	mov	r9,r8
8002af1c:	e0 19 ff f0 	andl	r9,0xfff0
8002af20:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002af24:	91 19       	st.w	r8[0x4],r9
              AVR32_USART_MR_MODE_NORMAL << AVR32_USART_MR_MODE_OFFSET;

  // Setup complete; enable communication.
  // Enable input and output.
  usart->cr = AVR32_USART_CR_RXEN_MASK |
8002af26:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002af2a:	35 09       	mov	r9,80
8002af2c:	91 09       	st.w	r8[0x0],r9
              AVR32_USART_CR_TXEN_MASK;

  return USART_SUCCESS;
8002af2e:	30 08       	mov	r8,0
}
8002af30:	10 9c       	mov	r12,r8
8002af32:	2f dd       	sub	sp,-12
8002af34:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002af38:	80 02       	ld.sh	r2,r0[0x0]
8002af3a:	ac 5e       	st.h	r6[0xa],lr

8002af3c <usart_init_rs232_tx_only>:


int usart_init_rs232_tx_only(volatile avr32_usart_t *usart, const usart_options_t *opt, long pba_hz)
{
8002af3c:	eb cd 40 c0 	pushm	r6-r7,lr
8002af40:	1a 97       	mov	r7,sp
8002af42:	20 3d       	sub	sp,12
8002af44:	4d c6       	lddpc	r6,8002b0b4 <usart_init_rs232_tx_only+0x178>
8002af46:	1e 26       	rsub	r6,pc
8002af48:	ef 4c ff fc 	st.w	r7[-4],r12
8002af4c:	ef 4b ff f8 	st.w	r7[-8],r11
8002af50:	ef 4a ff f4 	st.w	r7[-12],r10
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);
8002af54:	ee fc ff fc 	ld.w	r12,r7[-4]
8002af58:	f0 16 00 4b 	mcall	r6[300]

  // Check input values.
  if (!opt || // Null pointer.
8002af5c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002af60:	58 08       	cp.w	r8,0
8002af62:	c4 00       	breq	8002afe2 <usart_init_rs232_tx_only+0xa6>
      opt->charlength < 5 || opt->charlength > 9 ||
8002af64:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002af68:	11 c9       	ld.ub	r9,r8[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002af6a:	30 48       	mov	r8,4
8002af6c:	f0 09 18 00 	cp.b	r9,r8
8002af70:	e0 88 00 39 	brls	8002afe2 <usart_init_rs232_tx_only+0xa6>
      opt->charlength < 5 || opt->charlength > 9 ||
8002af74:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002af78:	11 c9       	ld.ub	r9,r8[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002af7a:	30 98       	mov	r8,9
8002af7c:	f0 09 18 00 	cp.b	r9,r8
8002af80:	e0 8b 00 31 	brhi	8002afe2 <usart_init_rs232_tx_only+0xa6>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
8002af84:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002af88:	11 d9       	ld.ub	r9,r8[0x5]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002af8a:	30 78       	mov	r8,7
8002af8c:	f0 09 18 00 	cp.b	r9,r8
8002af90:	e0 8b 00 29 	brhi	8002afe2 <usart_init_rs232_tx_only+0xa6>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits == 1 || opt->stopbits > 2 + 255 ||
8002af94:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002af98:	90 39       	ld.sh	r9,r8[0x6]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002af9a:	30 18       	mov	r8,1
8002af9c:	f0 09 19 00 	cp.h	r9,r8
8002afa0:	c2 10       	breq	8002afe2 <usart_init_rs232_tx_only+0xa6>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits == 1 || opt->stopbits > 2 + 255 ||
8002afa2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002afa6:	90 39       	ld.sh	r9,r8[0x6]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002afa8:	e0 68 01 01 	mov	r8,257
8002afac:	f0 09 19 00 	cp.h	r9,r8
8002afb0:	e0 8b 00 19 	brhi	8002afe2 <usart_init_rs232_tx_only+0xa6>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits == 1 || opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
8002afb4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002afb8:	f1 39 00 08 	ld.ub	r9,r8[8]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002afbc:	30 38       	mov	r8,3
8002afbe:	f0 09 18 00 	cp.b	r9,r8
8002afc2:	e0 8b 00 10 	brhi	8002afe2 <usart_init_rs232_tx_only+0xa6>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits == 1 || opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_sync_master_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
8002afc6:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002afca:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002afce:	70 08       	ld.w	r8,r8[0x0]
8002afd0:	12 9a       	mov	r10,r9
8002afd2:	10 9b       	mov	r11,r8
8002afd4:	ee fc ff fc 	ld.w	r12,r7[-4]
8002afd8:	fe b0 fd f1 	rcall	8002abba <usart_set_sync_master_baudrate>
8002afdc:	18 98       	mov	r8,r12
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002afde:	58 18       	cp.w	r8,1
8002afe0:	c0 31       	brne	8002afe6 <usart_init_rs232_tx_only+0xaa>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits == 1 || opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_sync_master_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
    return USART_INVALID_INPUT;
8002afe2:	30 18       	mov	r8,1
8002afe4:	c6 48       	rjmp	8002b0ac <usart_init_rs232_tx_only+0x170>

  if (opt->charlength == 9)
8002afe6:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002afea:	11 c9       	ld.ub	r9,r8[0x4]
8002afec:	30 98       	mov	r8,9
8002afee:	f0 09 18 00 	cp.b	r9,r8
8002aff2:	c0 a1       	brne	8002b006 <usart_init_rs232_tx_only+0xca>
  {
    // Character length set to 9 bits. MODE9 dominates CHRL.
    usart->mr |= AVR32_USART_MR_MODE9_MASK;
8002aff4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002aff8:	70 18       	ld.w	r8,r8[0x4]
8002affa:	10 99       	mov	r9,r8
8002affc:	b1 b9       	sbr	r9,0x11
8002affe:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b002:	91 19       	st.w	r8[0x4],r9
8002b004:	c0 d8       	rjmp	8002b01e <usart_init_rs232_tx_only+0xe2>
  }
  else
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
8002b006:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b00a:	70 19       	ld.w	r9,r8[0x4]
8002b00c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b010:	11 c8       	ld.ub	r8,r8[0x4]
8002b012:	20 58       	sub	r8,5
8002b014:	a7 68       	lsl	r8,0x6
8002b016:	10 49       	or	r9,r8
8002b018:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b01c:	91 19       	st.w	r8[0x4],r9
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
8002b01e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b022:	70 19       	ld.w	r9,r8[0x4]
8002b024:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b028:	11 d8       	ld.ub	r8,r8[0x5]
8002b02a:	f0 0a 15 09 	lsl	r10,r8,0x9
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;
8002b02e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b032:	f1 38 00 08 	ld.ub	r8,r8[8]
8002b036:	af 68       	lsl	r8,0xe
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
8002b038:	f5 e8 10 08 	or	r8,r10,r8
8002b03c:	10 49       	or	r9,r8
8002b03e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b042:	91 19       	st.w	r8[0x4],r9
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;

  if (opt->stopbits > USART_2_STOPBITS)
8002b044:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b048:	90 39       	ld.sh	r9,r8[0x6]
8002b04a:	30 28       	mov	r8,2
8002b04c:	f0 09 19 00 	cp.h	r9,r8
8002b050:	e0 88 00 14 	brls	8002b078 <usart_init_rs232_tx_only+0x13c>
  {
    // Set two stop bits
    usart->mr |= AVR32_USART_MR_NBSTOP_2 << AVR32_USART_MR_NBSTOP_OFFSET;
8002b054:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b058:	70 18       	ld.w	r8,r8[0x4]
8002b05a:	10 99       	mov	r9,r8
8002b05c:	ad b9       	sbr	r9,0xd
8002b05e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b062:	91 19       	st.w	r8[0x4],r9
    // and a timeguard period gives the rest.
    usart->ttgr = opt->stopbits - USART_2_STOPBITS;
8002b064:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b068:	90 38       	ld.sh	r8,r8[0x6]
8002b06a:	5c 78       	castu.h	r8
8002b06c:	20 28       	sub	r8,2
8002b06e:	10 99       	mov	r9,r8
8002b070:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b074:	91 a9       	st.w	r8[0x28],r9
8002b076:	c0 d8       	rjmp	8002b090 <usart_init_rs232_tx_only+0x154>
  }
  else
    // Insert 1 or 2 stop bits.
    usart->mr |= opt->stopbits << AVR32_USART_MR_NBSTOP_OFFSET;
8002b078:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b07c:	70 19       	ld.w	r9,r8[0x4]
8002b07e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b082:	90 38       	ld.sh	r8,r8[0x6]
8002b084:	5c 78       	castu.h	r8
8002b086:	ad 68       	lsl	r8,0xc
8002b088:	10 49       	or	r9,r8
8002b08a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b08e:	91 19       	st.w	r8[0x4],r9

  // Set normal mode.
  usart->mr = (usart->mr & ~AVR32_USART_MR_MODE_MASK) |
8002b090:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b094:	70 18       	ld.w	r8,r8[0x4]
8002b096:	10 99       	mov	r9,r8
8002b098:	e0 19 ff f0 	andl	r9,0xfff0
8002b09c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b0a0:	91 19       	st.w	r8[0x4],r9
              AVR32_USART_MR_MODE_NORMAL << AVR32_USART_MR_MODE_OFFSET;

  // Setup complete; enable communication.
  // Enable only output as input is not possible in synchronous mode without
  // transferring clock.
  usart->cr = AVR32_USART_CR_TXEN_MASK;
8002b0a2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b0a6:	34 09       	mov	r9,64
8002b0a8:	91 09       	st.w	r8[0x0],r9

  return USART_SUCCESS;
8002b0aa:	30 08       	mov	r8,0
}
8002b0ac:	10 9c       	mov	r12,r8
8002b0ae:	2f dd       	sub	sp,-12
8002b0b0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002b0b4:	80 02       	ld.sh	r2,r0[0x0]
8002b0b6:	ad ca       	cbr	r10,0xc

8002b0b8 <usart_init_hw_handshaking>:


int usart_init_hw_handshaking(volatile avr32_usart_t *usart, const usart_options_t *opt, long pba_hz)
{
8002b0b8:	eb cd 40 c0 	pushm	r6-r7,lr
8002b0bc:	1a 97       	mov	r7,sp
8002b0be:	20 3d       	sub	sp,12
8002b0c0:	49 26       	lddpc	r6,8002b108 <usart_init_hw_handshaking+0x50>
8002b0c2:	1e 26       	rsub	r6,pc
8002b0c4:	ef 4c ff fc 	st.w	r7[-4],r12
8002b0c8:	ef 4b ff f8 	st.w	r7[-8],r11
8002b0cc:	ef 4a ff f4 	st.w	r7[-12],r10
  // First: Setup standard RS232.
  if (usart_init_rs232(usart, opt, pba_hz) == USART_INVALID_INPUT)
8002b0d0:	ee fa ff f4 	ld.w	r10,r7[-12]
8002b0d4:	ee fb ff f8 	ld.w	r11,r7[-8]
8002b0d8:	ee fc ff fc 	ld.w	r12,r7[-4]
8002b0dc:	f0 16 00 61 	mcall	r6[388]
8002b0e0:	18 98       	mov	r8,r12
8002b0e2:	58 18       	cp.w	r8,1
8002b0e4:	c0 31       	brne	8002b0ea <usart_init_hw_handshaking+0x32>
    return USART_INVALID_INPUT;
8002b0e6:	30 18       	mov	r8,1
8002b0e8:	c0 c8       	rjmp	8002b100 <usart_init_hw_handshaking+0x48>

  // Set hardware handshaking mode.
  usart->mr = (usart->mr & ~AVR32_USART_MR_MODE_MASK) |
8002b0ea:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b0ee:	70 18       	ld.w	r8,r8[0x4]
8002b0f0:	e0 18 ff f0 	andl	r8,0xfff0
8002b0f4:	10 99       	mov	r9,r8
8002b0f6:	a1 b9       	sbr	r9,0x1
8002b0f8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b0fc:	91 19       	st.w	r8[0x4],r9
              AVR32_USART_MR_MODE_HARDWARE << AVR32_USART_MR_MODE_OFFSET;

  return USART_SUCCESS;
8002b0fe:	30 08       	mov	r8,0
}
8002b100:	10 9c       	mov	r12,r8
8002b102:	2f dd       	sub	sp,-12
8002b104:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002b108:	80 02       	ld.sh	r2,r0[0x0]
8002b10a:	af 46       	asr	r6,0xe

8002b10c <usart_init_modem>:


int usart_init_modem(volatile avr32_usart_t *usart, const usart_options_t *opt, long pba_hz)
{
8002b10c:	eb cd 40 c0 	pushm	r6-r7,lr
8002b110:	1a 97       	mov	r7,sp
8002b112:	20 3d       	sub	sp,12
8002b114:	49 36       	lddpc	r6,8002b160 <usart_init_modem+0x54>
8002b116:	1e 26       	rsub	r6,pc
8002b118:	ef 4c ff fc 	st.w	r7[-4],r12
8002b11c:	ef 4b ff f8 	st.w	r7[-8],r11
8002b120:	ef 4a ff f4 	st.w	r7[-12],r10
  // First: Setup standard RS232.
  if (usart_init_rs232(usart, opt, pba_hz) == USART_INVALID_INPUT)
8002b124:	ee fa ff f4 	ld.w	r10,r7[-12]
8002b128:	ee fb ff f8 	ld.w	r11,r7[-8]
8002b12c:	ee fc ff fc 	ld.w	r12,r7[-4]
8002b130:	f0 16 00 61 	mcall	r6[388]
8002b134:	18 98       	mov	r8,r12
8002b136:	58 18       	cp.w	r8,1
8002b138:	c0 31       	brne	8002b13e <usart_init_modem+0x32>
    return USART_INVALID_INPUT;
8002b13a:	30 18       	mov	r8,1
8002b13c:	c0 d8       	rjmp	8002b156 <usart_init_modem+0x4a>

  // Set modem mode.
  usart->mr = (usart->mr & ~AVR32_USART_MR_MODE_MASK) |
8002b13e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b142:	70 18       	ld.w	r8,r8[0x4]
8002b144:	e0 18 ff f0 	andl	r8,0xfff0
8002b148:	10 99       	mov	r9,r8
8002b14a:	e8 19 00 03 	orl	r9,0x3
8002b14e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b152:	91 19       	st.w	r8[0x4],r9
              AVR32_USART_MR_MODE_MODEM << AVR32_USART_MR_MODE_OFFSET;

  return USART_SUCCESS;
8002b154:	30 08       	mov	r8,0
}
8002b156:	10 9c       	mov	r12,r8
8002b158:	2f dd       	sub	sp,-12
8002b15a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002b15e:	00 00       	add	r0,r0
8002b160:	80 02       	ld.sh	r2,r0[0x0]
8002b162:	af 9a       	lsr	r10,0xf

8002b164 <usart_init_sync_master>:


int usart_init_sync_master(volatile avr32_usart_t *usart, const usart_options_t *opt, long pba_hz)
{
8002b164:	eb cd 40 c0 	pushm	r6-r7,lr
8002b168:	1a 97       	mov	r7,sp
8002b16a:	20 3d       	sub	sp,12
8002b16c:	4d e6       	lddpc	r6,8002b2e4 <usart_init_sync_master+0x180>
8002b16e:	1e 26       	rsub	r6,pc
8002b170:	ef 4c ff fc 	st.w	r7[-4],r12
8002b174:	ef 4b ff f8 	st.w	r7[-8],r11
8002b178:	ef 4a ff f4 	st.w	r7[-12],r10
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);
8002b17c:	ee fc ff fc 	ld.w	r12,r7[-4]
8002b180:	f0 16 00 4b 	mcall	r6[300]

  // Check input values.
  if (!opt || // Null pointer.
8002b184:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b188:	58 08       	cp.w	r8,0
8002b18a:	c4 00       	breq	8002b20a <usart_init_sync_master+0xa6>
      opt->charlength < 5 || opt->charlength > 9 ||
8002b18c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b190:	11 c9       	ld.ub	r9,r8[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002b192:	30 48       	mov	r8,4
8002b194:	f0 09 18 00 	cp.b	r9,r8
8002b198:	e0 88 00 39 	brls	8002b20a <usart_init_sync_master+0xa6>
      opt->charlength < 5 || opt->charlength > 9 ||
8002b19c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b1a0:	11 c9       	ld.ub	r9,r8[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002b1a2:	30 98       	mov	r8,9
8002b1a4:	f0 09 18 00 	cp.b	r9,r8
8002b1a8:	e0 8b 00 31 	brhi	8002b20a <usart_init_sync_master+0xa6>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
8002b1ac:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b1b0:	11 d9       	ld.ub	r9,r8[0x5]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002b1b2:	30 78       	mov	r8,7
8002b1b4:	f0 09 18 00 	cp.b	r9,r8
8002b1b8:	e0 8b 00 29 	brhi	8002b20a <usart_init_sync_master+0xa6>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits == 1 || opt->stopbits > 2 + 255 ||
8002b1bc:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b1c0:	90 39       	ld.sh	r9,r8[0x6]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002b1c2:	30 18       	mov	r8,1
8002b1c4:	f0 09 19 00 	cp.h	r9,r8
8002b1c8:	c2 10       	breq	8002b20a <usart_init_sync_master+0xa6>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits == 1 || opt->stopbits > 2 + 255 ||
8002b1ca:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b1ce:	90 39       	ld.sh	r9,r8[0x6]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002b1d0:	e0 68 01 01 	mov	r8,257
8002b1d4:	f0 09 19 00 	cp.h	r9,r8
8002b1d8:	e0 8b 00 19 	brhi	8002b20a <usart_init_sync_master+0xa6>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits == 1 || opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
8002b1dc:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b1e0:	f1 39 00 08 	ld.ub	r9,r8[8]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002b1e4:	30 38       	mov	r8,3
8002b1e6:	f0 09 18 00 	cp.b	r9,r8
8002b1ea:	e0 8b 00 10 	brhi	8002b20a <usart_init_sync_master+0xa6>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits == 1 || opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_sync_master_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
8002b1ee:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002b1f2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b1f6:	70 08       	ld.w	r8,r8[0x0]
8002b1f8:	12 9a       	mov	r10,r9
8002b1fa:	10 9b       	mov	r11,r8
8002b1fc:	ee fc ff fc 	ld.w	r12,r7[-4]
8002b200:	fe b0 fc dd 	rcall	8002abba <usart_set_sync_master_baudrate>
8002b204:	18 98       	mov	r8,r12
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002b206:	58 18       	cp.w	r8,1
8002b208:	c0 31       	brne	8002b20e <usart_init_sync_master+0xaa>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits == 1 || opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_sync_master_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
    return USART_INVALID_INPUT;
8002b20a:	30 18       	mov	r8,1
8002b20c:	c6 78       	rjmp	8002b2da <usart_init_sync_master+0x176>

  if (opt->charlength == 9)
8002b20e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b212:	11 c9       	ld.ub	r9,r8[0x4]
8002b214:	30 98       	mov	r8,9
8002b216:	f0 09 18 00 	cp.b	r9,r8
8002b21a:	c0 a1       	brne	8002b22e <usart_init_sync_master+0xca>
  {
    // Character length set to 9 bits. MODE9 dominates CHRL.
    usart->mr |= AVR32_USART_MR_MODE9_MASK;
8002b21c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b220:	70 18       	ld.w	r8,r8[0x4]
8002b222:	10 99       	mov	r9,r8
8002b224:	b1 b9       	sbr	r9,0x11
8002b226:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b22a:	91 19       	st.w	r8[0x4],r9
8002b22c:	c0 d8       	rjmp	8002b246 <usart_init_sync_master+0xe2>
  }
  else
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
8002b22e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b232:	70 19       	ld.w	r9,r8[0x4]
8002b234:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b238:	11 c8       	ld.ub	r8,r8[0x4]
8002b23a:	20 58       	sub	r8,5
8002b23c:	a7 68       	lsl	r8,0x6
8002b23e:	10 49       	or	r9,r8
8002b240:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b244:	91 19       	st.w	r8[0x4],r9
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
8002b246:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b24a:	70 19       	ld.w	r9,r8[0x4]
8002b24c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b250:	11 d8       	ld.ub	r8,r8[0x5]
8002b252:	f0 0a 15 09 	lsl	r10,r8,0x9
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;
8002b256:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b25a:	f1 38 00 08 	ld.ub	r8,r8[8]
8002b25e:	af 68       	lsl	r8,0xe
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
8002b260:	f5 e8 10 08 	or	r8,r10,r8
8002b264:	10 49       	or	r9,r8
8002b266:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b26a:	91 19       	st.w	r8[0x4],r9
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;

  if (opt->stopbits > USART_2_STOPBITS)
8002b26c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b270:	90 39       	ld.sh	r9,r8[0x6]
8002b272:	30 28       	mov	r8,2
8002b274:	f0 09 19 00 	cp.h	r9,r8
8002b278:	e0 88 00 14 	brls	8002b2a0 <usart_init_sync_master+0x13c>
  {
    // Set two stop bits
    usart->mr |= AVR32_USART_MR_NBSTOP_2 << AVR32_USART_MR_NBSTOP_OFFSET;
8002b27c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b280:	70 18       	ld.w	r8,r8[0x4]
8002b282:	10 99       	mov	r9,r8
8002b284:	ad b9       	sbr	r9,0xd
8002b286:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b28a:	91 19       	st.w	r8[0x4],r9
    // and a timeguard period gives the rest.
    usart->ttgr = opt->stopbits - USART_2_STOPBITS;
8002b28c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b290:	90 38       	ld.sh	r8,r8[0x6]
8002b292:	5c 78       	castu.h	r8
8002b294:	20 28       	sub	r8,2
8002b296:	10 99       	mov	r9,r8
8002b298:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b29c:	91 a9       	st.w	r8[0x28],r9
8002b29e:	c0 d8       	rjmp	8002b2b8 <usart_init_sync_master+0x154>
  }
  else
    // Insert 1 or 2 stop bits.
    usart->mr |= opt->stopbits << AVR32_USART_MR_NBSTOP_OFFSET;
8002b2a0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b2a4:	70 19       	ld.w	r9,r8[0x4]
8002b2a6:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b2aa:	90 38       	ld.sh	r8,r8[0x6]
8002b2ac:	5c 78       	castu.h	r8
8002b2ae:	ad 68       	lsl	r8,0xc
8002b2b0:	10 49       	or	r9,r8
8002b2b2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b2b6:	91 19       	st.w	r8[0x4],r9

  // Set normal mode.
  usart->mr = (usart->mr & ~AVR32_USART_MR_MODE_MASK) |
8002b2b8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b2bc:	70 18       	ld.w	r8,r8[0x4]
8002b2be:	e4 18 ff fb 	andh	r8,0xfffb
8002b2c2:	e0 18 ff f0 	andl	r8,0xfff0
8002b2c6:	10 99       	mov	r9,r8
8002b2c8:	b3 a9       	sbr	r9,0x12
8002b2ca:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b2ce:	91 19       	st.w	r8[0x4],r9
              AVR32_USART_MR_MODE_NORMAL << AVR32_USART_MR_MODE_OFFSET |
              AVR32_USART_MR_CLKO_MASK;

  // Setup complete; enable communication.
  // Enable input and output.
  usart->cr = AVR32_USART_CR_RXEN_MASK |
8002b2d0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b2d4:	35 09       	mov	r9,80
8002b2d6:	91 09       	st.w	r8[0x0],r9
              AVR32_USART_CR_TXEN_MASK;

  return USART_SUCCESS;
8002b2d8:	30 08       	mov	r8,0
}
8002b2da:	10 9c       	mov	r12,r8
8002b2dc:	2f dd       	sub	sp,-12
8002b2de:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002b2e2:	00 00       	add	r0,r0
8002b2e4:	80 02       	ld.sh	r2,r0[0x0]
8002b2e6:	af f2       	*unknown*

8002b2e8 <usart_init_sync_slave>:


int usart_init_sync_slave(volatile avr32_usart_t *usart, const usart_options_t *opt, long pba_hz)
{
8002b2e8:	eb cd 40 c0 	pushm	r6-r7,lr
8002b2ec:	1a 97       	mov	r7,sp
8002b2ee:	20 3d       	sub	sp,12
8002b2f0:	4d 96       	lddpc	r6,8002b454 <usart_init_sync_slave+0x16c>
8002b2f2:	1e 26       	rsub	r6,pc
8002b2f4:	ef 4c ff fc 	st.w	r7[-4],r12
8002b2f8:	ef 4b ff f8 	st.w	r7[-8],r11
8002b2fc:	ef 4a ff f4 	st.w	r7[-12],r10
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);
8002b300:	ee fc ff fc 	ld.w	r12,r7[-4]
8002b304:	f0 16 00 4b 	mcall	r6[300]

  // Check input values.
  if (!opt || // Null pointer.
8002b308:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b30c:	58 08       	cp.w	r8,0
8002b30e:	c3 90       	breq	8002b380 <usart_init_sync_slave+0x98>
      opt->charlength < 5 || opt->charlength > 9 ||
8002b310:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b314:	11 c9       	ld.ub	r9,r8[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002b316:	30 48       	mov	r8,4
8002b318:	f0 09 18 00 	cp.b	r9,r8
8002b31c:	e0 88 00 32 	brls	8002b380 <usart_init_sync_slave+0x98>
      opt->charlength < 5 || opt->charlength > 9 ||
8002b320:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b324:	11 c9       	ld.ub	r9,r8[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002b326:	30 98       	mov	r8,9
8002b328:	f0 09 18 00 	cp.b	r9,r8
8002b32c:	e0 8b 00 2a 	brhi	8002b380 <usart_init_sync_slave+0x98>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
8002b330:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b334:	11 d9       	ld.ub	r9,r8[0x5]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002b336:	30 78       	mov	r8,7
8002b338:	f0 09 18 00 	cp.b	r9,r8
8002b33c:	e0 8b 00 22 	brhi	8002b380 <usart_init_sync_slave+0x98>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits == 1 || opt->stopbits > 2 + 255 ||
8002b340:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b344:	90 39       	ld.sh	r9,r8[0x6]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002b346:	30 18       	mov	r8,1
8002b348:	f0 09 19 00 	cp.h	r9,r8
8002b34c:	c1 a0       	breq	8002b380 <usart_init_sync_slave+0x98>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits == 1 || opt->stopbits > 2 + 255 ||
8002b34e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b352:	90 39       	ld.sh	r9,r8[0x6]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002b354:	e0 68 01 01 	mov	r8,257
8002b358:	f0 09 19 00 	cp.h	r9,r8
8002b35c:	e0 8b 00 12 	brhi	8002b380 <usart_init_sync_slave+0x98>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits == 1 || opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
8002b360:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b364:	f1 39 00 08 	ld.ub	r9,r8[8]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002b368:	30 38       	mov	r8,3
8002b36a:	f0 09 18 00 	cp.b	r9,r8
8002b36e:	e0 8b 00 09 	brhi	8002b380 <usart_init_sync_slave+0x98>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits == 1 || opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_sync_slave_baudrate(usart) == USART_INVALID_INPUT)
8002b372:	ee fc ff fc 	ld.w	r12,r7[-4]
8002b376:	fe b0 fc 5a 	rcall	8002ac2a <usart_set_sync_slave_baudrate>
8002b37a:	18 98       	mov	r8,r12
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002b37c:	58 18       	cp.w	r8,1
8002b37e:	c0 31       	brne	8002b384 <usart_init_sync_slave+0x9c>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits == 1 || opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_sync_slave_baudrate(usart) == USART_INVALID_INPUT)
    return USART_INVALID_INPUT;
8002b380:	30 18       	mov	r8,1
8002b382:	c6 48       	rjmp	8002b44a <usart_init_sync_slave+0x162>

  if (opt->charlength == 9)
8002b384:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b388:	11 c9       	ld.ub	r9,r8[0x4]
8002b38a:	30 98       	mov	r8,9
8002b38c:	f0 09 18 00 	cp.b	r9,r8
8002b390:	c0 a1       	brne	8002b3a4 <usart_init_sync_slave+0xbc>
  {
    // Character length set to 9 bits. MODE9 dominates CHRL.
    usart->mr |= AVR32_USART_MR_MODE9_MASK;
8002b392:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b396:	70 18       	ld.w	r8,r8[0x4]
8002b398:	10 99       	mov	r9,r8
8002b39a:	b1 b9       	sbr	r9,0x11
8002b39c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b3a0:	91 19       	st.w	r8[0x4],r9
8002b3a2:	c0 d8       	rjmp	8002b3bc <usart_init_sync_slave+0xd4>
  }
  else
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
8002b3a4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b3a8:	70 19       	ld.w	r9,r8[0x4]
8002b3aa:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b3ae:	11 c8       	ld.ub	r8,r8[0x4]
8002b3b0:	20 58       	sub	r8,5
8002b3b2:	a7 68       	lsl	r8,0x6
8002b3b4:	10 49       	or	r9,r8
8002b3b6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b3ba:	91 19       	st.w	r8[0x4],r9
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
8002b3bc:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b3c0:	70 19       	ld.w	r9,r8[0x4]
8002b3c2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b3c6:	11 d8       	ld.ub	r8,r8[0x5]
8002b3c8:	f0 0a 15 09 	lsl	r10,r8,0x9
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;
8002b3cc:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b3d0:	f1 38 00 08 	ld.ub	r8,r8[8]
8002b3d4:	af 68       	lsl	r8,0xe
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
8002b3d6:	f5 e8 10 08 	or	r8,r10,r8
8002b3da:	10 49       	or	r9,r8
8002b3dc:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b3e0:	91 19       	st.w	r8[0x4],r9
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;

  if (opt->stopbits > USART_2_STOPBITS)
8002b3e2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b3e6:	90 39       	ld.sh	r9,r8[0x6]
8002b3e8:	30 28       	mov	r8,2
8002b3ea:	f0 09 19 00 	cp.h	r9,r8
8002b3ee:	e0 88 00 14 	brls	8002b416 <usart_init_sync_slave+0x12e>
  {
    // Set two stop bits
    usart->mr |= AVR32_USART_MR_NBSTOP_2 << AVR32_USART_MR_NBSTOP_OFFSET;
8002b3f2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b3f6:	70 18       	ld.w	r8,r8[0x4]
8002b3f8:	10 99       	mov	r9,r8
8002b3fa:	ad b9       	sbr	r9,0xd
8002b3fc:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b400:	91 19       	st.w	r8[0x4],r9
    // and a timeguard period gives the rest.
    usart->ttgr = opt->stopbits - USART_2_STOPBITS;
8002b402:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b406:	90 38       	ld.sh	r8,r8[0x6]
8002b408:	5c 78       	castu.h	r8
8002b40a:	20 28       	sub	r8,2
8002b40c:	10 99       	mov	r9,r8
8002b40e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b412:	91 a9       	st.w	r8[0x28],r9
8002b414:	c0 d8       	rjmp	8002b42e <usart_init_sync_slave+0x146>
  }
  else
    // Insert 1 or 2 stop bits.
    usart->mr |= opt->stopbits << AVR32_USART_MR_NBSTOP_OFFSET;
8002b416:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b41a:	70 19       	ld.w	r9,r8[0x4]
8002b41c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b420:	90 38       	ld.sh	r8,r8[0x6]
8002b422:	5c 78       	castu.h	r8
8002b424:	ad 68       	lsl	r8,0xc
8002b426:	10 49       	or	r9,r8
8002b428:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b42c:	91 19       	st.w	r8[0x4],r9

  // Set normal mode.
  usart->mr = (usart->mr & ~AVR32_USART_MR_MODE_MASK) |
8002b42e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b432:	70 18       	ld.w	r8,r8[0x4]
8002b434:	10 99       	mov	r9,r8
8002b436:	e0 19 ff f0 	andl	r9,0xfff0
8002b43a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b43e:	91 19       	st.w	r8[0x4],r9
              AVR32_USART_MR_MODE_NORMAL << AVR32_USART_MR_MODE_OFFSET;

  // Setup complete; enable communication.
  // Enable input and output.
  usart->cr = AVR32_USART_CR_RXEN_MASK |
8002b440:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b444:	35 09       	mov	r9,80
8002b446:	91 09       	st.w	r8[0x0],r9
              AVR32_USART_CR_TXEN_MASK;

  return USART_SUCCESS;
8002b448:	30 08       	mov	r8,0
}
8002b44a:	10 9c       	mov	r12,r8
8002b44c:	2f dd       	sub	sp,-12
8002b44e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002b452:	00 00       	add	r0,r0
8002b454:	80 02       	ld.sh	r2,r0[0x0]
8002b456:	b1 76       	lsl	r6,0x11

8002b458 <usart_init_rs485>:


int usart_init_rs485(volatile avr32_usart_t *usart, const usart_options_t *opt, long pba_hz)
{
8002b458:	eb cd 40 c0 	pushm	r6-r7,lr
8002b45c:	1a 97       	mov	r7,sp
8002b45e:	20 3d       	sub	sp,12
8002b460:	49 26       	lddpc	r6,8002b4a8 <usart_init_rs485+0x50>
8002b462:	1e 26       	rsub	r6,pc
8002b464:	ef 4c ff fc 	st.w	r7[-4],r12
8002b468:	ef 4b ff f8 	st.w	r7[-8],r11
8002b46c:	ef 4a ff f4 	st.w	r7[-12],r10
  // First: Setup standard RS232.
  if (usart_init_rs232(usart, opt, pba_hz) == USART_INVALID_INPUT)
8002b470:	ee fa ff f4 	ld.w	r10,r7[-12]
8002b474:	ee fb ff f8 	ld.w	r11,r7[-8]
8002b478:	ee fc ff fc 	ld.w	r12,r7[-4]
8002b47c:	f0 16 00 61 	mcall	r6[388]
8002b480:	18 98       	mov	r8,r12
8002b482:	58 18       	cp.w	r8,1
8002b484:	c0 31       	brne	8002b48a <usart_init_rs485+0x32>
    return USART_INVALID_INPUT;
8002b486:	30 18       	mov	r8,1
8002b488:	c0 c8       	rjmp	8002b4a0 <usart_init_rs485+0x48>

  // Set RS485 mode.
  usart->mr = (usart->mr & ~AVR32_USART_MR_MODE_MASK) |
8002b48a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b48e:	70 18       	ld.w	r8,r8[0x4]
8002b490:	e0 18 ff f0 	andl	r8,0xfff0
8002b494:	10 99       	mov	r9,r8
8002b496:	a1 a9       	sbr	r9,0x0
8002b498:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b49c:	91 19       	st.w	r8[0x4],r9
              AVR32_USART_MR_MODE_RS485 << AVR32_USART_MR_MODE_OFFSET;

  return USART_SUCCESS;
8002b49e:	30 08       	mov	r8,0
}
8002b4a0:	10 9c       	mov	r12,r8
8002b4a2:	2f dd       	sub	sp,-12
8002b4a4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002b4a8:	80 02       	ld.sh	r2,r0[0x0]
8002b4aa:	b2 e6       	st.b	r9[0x6],r6

8002b4ac <usart_init_IrDA>:


int usart_init_IrDA(volatile avr32_usart_t *usart, const usart_options_t *opt,
                    long pba_hz, unsigned char irda_filter)
{
8002b4ac:	eb cd 40 c0 	pushm	r6-r7,lr
8002b4b0:	1a 97       	mov	r7,sp
8002b4b2:	20 4d       	sub	sp,16
8002b4b4:	49 96       	lddpc	r6,8002b518 <usart_init_IrDA+0x6c>
8002b4b6:	1e 26       	rsub	r6,pc
8002b4b8:	ef 4c ff fc 	st.w	r7[-4],r12
8002b4bc:	ef 4b ff f8 	st.w	r7[-8],r11
8002b4c0:	ef 4a ff f4 	st.w	r7[-12],r10
8002b4c4:	12 98       	mov	r8,r9
8002b4c6:	ef 68 ff f0 	st.b	r7[-16],r8
  // First: Setup standard RS232.
  if (usart_init_rs232(usart, opt, pba_hz) == USART_INVALID_INPUT)
8002b4ca:	ee fa ff f4 	ld.w	r10,r7[-12]
8002b4ce:	ee fb ff f8 	ld.w	r11,r7[-8]
8002b4d2:	ee fc ff fc 	ld.w	r12,r7[-4]
8002b4d6:	f0 16 00 61 	mcall	r6[388]
8002b4da:	18 98       	mov	r8,r12
8002b4dc:	58 18       	cp.w	r8,1
8002b4de:	c0 31       	brne	8002b4e4 <usart_init_IrDA+0x38>
    return USART_INVALID_INPUT;
8002b4e0:	30 18       	mov	r8,1
8002b4e2:	c1 78       	rjmp	8002b510 <usart_init_IrDA+0x64>

  // Set IrDA filter.
  usart->ifr = irda_filter;
8002b4e4:	ef 39 ff f0 	ld.ub	r9,r7[-16]
8002b4e8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b4ec:	f1 49 00 4c 	st.w	r8[76],r9

  // Set IrDA mode and activate filtering of input.
  usart->mr = (usart->mr & ~AVR32_USART_MR_MODE_MASK) |
8002b4f0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b4f4:	70 18       	ld.w	r8,r8[0x4]
8002b4f6:	e4 18 ef ff 	andh	r8,0xefff
8002b4fa:	e0 18 ff f0 	andl	r8,0xfff0
8002b4fe:	10 99       	mov	r9,r8
8002b500:	ea 19 10 00 	orh	r9,0x1000
8002b504:	e8 19 00 08 	orl	r9,0x8
8002b508:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b50c:	91 19       	st.w	r8[0x4],r9
              AVR32_USART_MODE_IRDA << AVR32_USART_MR_MODE_OFFSET |
              AVR32_USART_MR_FILTER_MASK;

  return USART_SUCCESS;
8002b50e:	30 08       	mov	r8,0
}
8002b510:	10 9c       	mov	r12,r8
8002b512:	2f cd       	sub	sp,-16
8002b514:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002b518:	80 02       	ld.sh	r2,r0[0x0]
8002b51a:	b3 3a       	mul	r10,r9

8002b51c <usart_init_iso7816>:


int usart_init_iso7816(volatile avr32_usart_t *usart, const usart_iso7816_options_t *opt, int t, long pba_hz)
{
8002b51c:	eb cd 40 c0 	pushm	r6-r7,lr
8002b520:	1a 97       	mov	r7,sp
8002b522:	20 5d       	sub	sp,20
8002b524:	4c 46       	lddpc	r6,8002b634 <usart_init_iso7816+0x118>
8002b526:	1e 26       	rsub	r6,pc
8002b528:	ef 4c ff f8 	st.w	r7[-8],r12
8002b52c:	ef 4b ff f4 	st.w	r7[-12],r11
8002b530:	ef 4a ff f0 	st.w	r7[-16],r10
8002b534:	ef 49 ff ec 	st.w	r7[-20],r9
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);
8002b538:	ee fc ff f8 	ld.w	r12,r7[-8]
8002b53c:	f0 16 00 4b 	mcall	r6[300]

  // Check input values.
  if (!opt || // Null pointer.
8002b540:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002b544:	58 08       	cp.w	r8,0
8002b546:	c0 90       	breq	8002b558 <usart_init_iso7816+0x3c>
      opt->paritytype > 1)
8002b548:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002b54c:	11 e9       	ld.ub	r9,r8[0x6]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002b54e:	30 18       	mov	r8,1
8002b550:	f0 09 18 00 	cp.b	r9,r8
8002b554:	e0 88 00 04 	brls	8002b55c <usart_init_iso7816+0x40>
      opt->paritytype > 1)
    return USART_INVALID_INPUT;
8002b558:	30 18       	mov	r8,1
8002b55a:	c6 98       	rjmp	8002b62c <usart_init_iso7816+0x110>

  if (t == 0)
8002b55c:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002b560:	58 08       	cp.w	r8,0
8002b562:	c0 c1       	brne	8002b57a <usart_init_iso7816+0x5e>
  {
    // Set USART mode to ISO7816, T=0.
    // The T=0 protocol always uses 2 stop bits.
    usart->mr = AVR32_USART_MR_MODE_ISO7816_T0 << AVR32_USART_MR_MODE_OFFSET |
8002b564:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002b568:	70 58       	ld.w	r8,r8[0x14]
                AVR32_USART_MR_NBSTOP_2 << AVR32_USART_MR_NBSTOP_OFFSET |
                opt->bit_order << AVR32_USART_MR_MSBF_OFFSET; // Allow MSBF in T=0.
8002b56a:	b1 68       	lsl	r8,0x10

  if (t == 0)
  {
    // Set USART mode to ISO7816, T=0.
    // The T=0 protocol always uses 2 stop bits.
    usart->mr = AVR32_USART_MR_MODE_ISO7816_T0 << AVR32_USART_MR_MODE_OFFSET |
8002b56c:	e8 18 20 04 	orl	r8,0x2004
8002b570:	10 99       	mov	r9,r8
8002b572:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b576:	91 19       	st.w	r8[0x4],r9
8002b578:	c1 98       	rjmp	8002b5aa <usart_init_iso7816+0x8e>
                AVR32_USART_MR_NBSTOP_2 << AVR32_USART_MR_NBSTOP_OFFSET |
                opt->bit_order << AVR32_USART_MR_MSBF_OFFSET; // Allow MSBF in T=0.
  }
  else if (t == 1)
8002b57a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002b57e:	58 18       	cp.w	r8,1
8002b580:	c1 31       	brne	8002b5a6 <usart_init_iso7816+0x8a>
  {
    // Only LSB first in the T=1 protocol.
    // max_iterations field is only used in T=0 mode.
    if (opt->bit_order != 0 ||
8002b582:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002b586:	70 58       	ld.w	r8,r8[0x14]
8002b588:	58 08       	cp.w	r8,0
8002b58a:	c0 71       	brne	8002b598 <usart_init_iso7816+0x7c>
        opt->max_iterations != 0)
8002b58c:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002b590:	f1 38 00 10 	ld.ub	r8,r8[16]
  }
  else if (t == 1)
  {
    // Only LSB first in the T=1 protocol.
    // max_iterations field is only used in T=0 mode.
    if (opt->bit_order != 0 ||
8002b594:	58 08       	cp.w	r8,0
8002b596:	c0 30       	breq	8002b59c <usart_init_iso7816+0x80>
        opt->max_iterations != 0)
      return USART_INVALID_INPUT;
8002b598:	30 18       	mov	r8,1
8002b59a:	c4 98       	rjmp	8002b62c <usart_init_iso7816+0x110>

    // Set USART mode to ISO7816, T=1.
    // The T=1 protocol always uses 1 stop bit.
    usart->mr = AVR32_USART_MR_MODE_ISO7816_T1 << AVR32_USART_MR_MODE_OFFSET |
8002b59c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b5a0:	30 69       	mov	r9,6
8002b5a2:	91 19       	st.w	r8[0x4],r9
8002b5a4:	c0 38       	rjmp	8002b5aa <usart_init_iso7816+0x8e>
                AVR32_USART_MR_NBSTOP_1 << AVR32_USART_MR_NBSTOP_OFFSET;
  }
  else
    return USART_INVALID_INPUT;
8002b5a6:	30 18       	mov	r8,1
8002b5a8:	c4 28       	rjmp	8002b62c <usart_init_iso7816+0x110>

  if (usart_set_iso7816_clock(usart, opt->iso7816_hz, pba_hz) == USART_INVALID_INPUT)
8002b5aa:	ee f9 ff ec 	ld.w	r9,r7[-20]
8002b5ae:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002b5b2:	70 08       	ld.w	r8,r8[0x0]
8002b5b4:	12 9a       	mov	r10,r9
8002b5b6:	10 9b       	mov	r11,r8
8002b5b8:	ee fc ff f8 	ld.w	r12,r7[-8]
8002b5bc:	fe b0 fb 4b 	rcall	8002ac52 <usart_set_iso7816_clock>
8002b5c0:	18 98       	mov	r8,r12
8002b5c2:	58 18       	cp.w	r8,1
8002b5c4:	c0 31       	brne	8002b5ca <usart_init_iso7816+0xae>
    return USART_INVALID_INPUT;
8002b5c6:	30 18       	mov	r8,1
8002b5c8:	c3 28       	rjmp	8002b62c <usart_init_iso7816+0x110>

  // Set FIDI register: bit rate = selected clock/FI_DI_ratio/16.
  usart->fidi = opt->fidi_ratio;
8002b5ca:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002b5ce:	90 28       	ld.sh	r8,r8[0x4]
8002b5d0:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
8002b5d4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b5d8:	f1 49 00 40 	st.w	r8[64],r9

  // Set ISO7816 spesific options in the MODE register.
  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
8002b5dc:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b5e0:	70 19       	ld.w	r9,r8[0x4]
8002b5e2:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002b5e6:	11 e8       	ld.ub	r8,r8[0x6]
8002b5e8:	a9 78       	lsl	r8,0x9
               AVR32_USART_MR_CLKO_MASK | // Enable clock output.
8002b5ea:	10 9a       	mov	r10,r8
8002b5ec:	b3 aa       	sbr	r10,0x12
               opt->inhibit_nack << AVR32_USART_MR_INACK_OFFSET |
8002b5ee:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002b5f2:	70 28       	ld.w	r8,r8[0x8]
8002b5f4:	b5 68       	lsl	r8,0x14
8002b5f6:	10 4a       	or	r10,r8
               opt->dis_suc_nack << AVR32_USART_MR_DSNACK_OFFSET |
8002b5f8:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002b5fc:	70 38       	ld.w	r8,r8[0xc]
8002b5fe:	b5 78       	lsl	r8,0x15
8002b600:	10 4a       	or	r10,r8
               opt->max_iterations << AVR32_USART_MR_MAX_ITERATION_OFFSET;
8002b602:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002b606:	f1 38 00 10 	ld.ub	r8,r8[16]
8002b60a:	b9 68       	lsl	r8,0x18

  // Set FIDI register: bit rate = selected clock/FI_DI_ratio/16.
  usart->fidi = opt->fidi_ratio;

  // Set ISO7816 spesific options in the MODE register.
  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
8002b60c:	f5 e8 10 08 	or	r8,r10,r8
8002b610:	10 49       	or	r9,r8
8002b612:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b616:	91 19       	st.w	r8[0x4],r9
8002b618:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b61c:	ef 48 ff fc 	st.w	r7[-4],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void usart_iso7816_enable_receiver(volatile avr32_usart_t *usart)
{
  usart->cr = AVR32_USART_CR_TXDIS_MASK | AVR32_USART_CR_RXEN_MASK;
8002b620:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b624:	e0 69 00 90 	mov	r9,144
8002b628:	91 09       	st.w	r8[0x0],r9
               opt->max_iterations << AVR32_USART_MR_MAX_ITERATION_OFFSET;

  // Setup complete; enable the receiver by default.
  usart_iso7816_enable_receiver(usart);

  return USART_SUCCESS;
8002b62a:	30 08       	mov	r8,0
}
8002b62c:	10 9c       	mov	r12,r8
8002b62e:	2f bd       	sub	sp,-20
8002b630:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002b634:	80 02       	ld.sh	r2,r0[0x0]
8002b636:	b3 aa       	sbr	r10,0x12

8002b638 <usart_init_lin_master>:
    defined(AVR32_USART_440_H_INCLUDED) || \
    defined(AVR32_USART_602_H_INCLUDED)


int usart_init_lin_master(volatile avr32_usart_t *usart, unsigned long baudrate, long pba_hz)
{
8002b638:	eb cd 40 c0 	pushm	r6-r7,lr
8002b63c:	1a 97       	mov	r7,sp
8002b63e:	20 3d       	sub	sp,12
8002b640:	49 66       	lddpc	r6,8002b698 <usart_init_lin_master+0x60>
8002b642:	1e 26       	rsub	r6,pc
8002b644:	ef 4c ff fc 	st.w	r7[-4],r12
8002b648:	ef 4b ff f8 	st.w	r7[-8],r11
8002b64c:	ef 4a ff f4 	st.w	r7[-12],r10
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);
8002b650:	ee fc ff fc 	ld.w	r12,r7[-4]
8002b654:	f0 16 00 4b 	mcall	r6[300]

  // Check input values.
  if (usart_set_async_baudrate(usart, baudrate, pba_hz) == USART_INVALID_INPUT)
8002b658:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002b65c:	10 9a       	mov	r10,r8
8002b65e:	ee fb ff f8 	ld.w	r11,r7[-8]
8002b662:	ee fc ff fc 	ld.w	r12,r7[-4]
8002b666:	fe b0 fa 41 	rcall	8002aae8 <usart_set_async_baudrate>
8002b66a:	18 98       	mov	r8,r12
8002b66c:	58 18       	cp.w	r8,1
8002b66e:	c0 31       	brne	8002b674 <usart_init_lin_master+0x3c>
    return USART_INVALID_INPUT;
8002b670:	30 18       	mov	r8,1
8002b672:	c0 f8       	rjmp	8002b690 <usart_init_lin_master+0x58>

  usart->mr |= AVR32_USART_MR_MODE_LIN_MASTER << AVR32_USART_MR_MODE_OFFSET;  // LIN master mode.
8002b674:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b678:	70 18       	ld.w	r8,r8[0x4]
8002b67a:	10 99       	mov	r9,r8
8002b67c:	e8 19 00 0a 	orl	r9,0xa
8002b680:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b684:	91 19       	st.w	r8[0x4],r9

  // Setup complete; enable communication.
  // Enable input and output.
  usart->cr = AVR32_USART_CR_RXEN_MASK |
8002b686:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b68a:	35 09       	mov	r9,80
8002b68c:	91 09       	st.w	r8[0x0],r9
              AVR32_USART_CR_TXEN_MASK;

  return USART_SUCCESS;
8002b68e:	30 08       	mov	r8,0
}
8002b690:	10 9c       	mov	r12,r8
8002b692:	2f dd       	sub	sp,-12
8002b694:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002b698:	80 02       	ld.sh	r2,r0[0x0]
8002b69a:	b4 c6       	st.b	r10[0x4],r6

8002b69c <usart_init_lin_slave>:


int usart_init_lin_slave(volatile avr32_usart_t *usart, unsigned long baudrate, long pba_hz)
{
8002b69c:	eb cd 40 c0 	pushm	r6-r7,lr
8002b6a0:	1a 97       	mov	r7,sp
8002b6a2:	20 3d       	sub	sp,12
8002b6a4:	49 66       	lddpc	r6,8002b6fc <usart_init_lin_slave+0x60>
8002b6a6:	1e 26       	rsub	r6,pc
8002b6a8:	ef 4c ff fc 	st.w	r7[-4],r12
8002b6ac:	ef 4b ff f8 	st.w	r7[-8],r11
8002b6b0:	ef 4a ff f4 	st.w	r7[-12],r10
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);
8002b6b4:	ee fc ff fc 	ld.w	r12,r7[-4]
8002b6b8:	f0 16 00 4b 	mcall	r6[300]

  // Check input values.
  if (usart_set_async_baudrate(usart, baudrate, pba_hz) == USART_INVALID_INPUT)
8002b6bc:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002b6c0:	10 9a       	mov	r10,r8
8002b6c2:	ee fb ff f8 	ld.w	r11,r7[-8]
8002b6c6:	ee fc ff fc 	ld.w	r12,r7[-4]
8002b6ca:	fe b0 fa 0f 	rcall	8002aae8 <usart_set_async_baudrate>
8002b6ce:	18 98       	mov	r8,r12
8002b6d0:	58 18       	cp.w	r8,1
8002b6d2:	c0 31       	brne	8002b6d8 <usart_init_lin_slave+0x3c>
    return USART_INVALID_INPUT;
8002b6d4:	30 18       	mov	r8,1
8002b6d6:	c0 f8       	rjmp	8002b6f4 <usart_init_lin_slave+0x58>

  usart->mr |= AVR32_USART_MR_MODE_LIN_SLAVE << AVR32_USART_MR_MODE_OFFSET; // LIN slave mode.
8002b6d8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b6dc:	70 18       	ld.w	r8,r8[0x4]
8002b6de:	10 99       	mov	r9,r8
8002b6e0:	e8 19 00 0b 	orl	r9,0xb
8002b6e4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b6e8:	91 19       	st.w	r8[0x4],r9

  // Setup complete; enable communication.
  // Enable input and output.
  usart->cr = AVR32_USART_CR_RXEN_MASK |
8002b6ea:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b6ee:	35 09       	mov	r9,80
8002b6f0:	91 09       	st.w	r8[0x0],r9
              AVR32_USART_CR_TXEN_MASK;

  return USART_SUCCESS;
8002b6f2:	30 08       	mov	r8,0
}
8002b6f4:	10 9c       	mov	r12,r8
8002b6f6:	2f dd       	sub	sp,-12
8002b6f8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002b6fc:	80 02       	ld.sh	r2,r0[0x0]
8002b6fe:	b5 2a       	st.d	r10++,r10

8002b700 <usart_init_spi_master>:


int usart_init_spi_master(volatile avr32_usart_t *usart, const usart_spi_options_t *opt, long pba_hz)
{
8002b700:	eb cd 40 c0 	pushm	r6-r7,lr
8002b704:	1a 97       	mov	r7,sp
8002b706:	20 3d       	sub	sp,12
8002b708:	4c 46       	lddpc	r6,8002b818 <usart_init_spi_master+0x118>
8002b70a:	1e 26       	rsub	r6,pc
8002b70c:	ef 4c ff fc 	st.w	r7[-4],r12
8002b710:	ef 4b ff f8 	st.w	r7[-8],r11
8002b714:	ef 4a ff f4 	st.w	r7[-12],r10
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);
8002b718:	ee fc ff fc 	ld.w	r12,r7[-4]
8002b71c:	f0 16 00 4b 	mcall	r6[300]

  // Check input values.
  if (!opt || // Null pointer.
8002b720:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b724:	58 08       	cp.w	r8,0
8002b726:	c2 f0       	breq	8002b784 <usart_init_spi_master+0x84>
      opt->charlength < 5 || opt->charlength > 9 ||
8002b728:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b72c:	11 c9       	ld.ub	r9,r8[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002b72e:	30 48       	mov	r8,4
8002b730:	f0 09 18 00 	cp.b	r9,r8
8002b734:	e0 88 00 28 	brls	8002b784 <usart_init_spi_master+0x84>
      opt->charlength < 5 || opt->charlength > 9 ||
8002b738:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b73c:	11 c9       	ld.ub	r9,r8[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002b73e:	30 98       	mov	r8,9
8002b740:	f0 09 18 00 	cp.b	r9,r8
8002b744:	e0 8b 00 20 	brhi	8002b784 <usart_init_spi_master+0x84>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->spimode > 3 ||
8002b748:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b74c:	11 d9       	ld.ub	r9,r8[0x5]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002b74e:	30 38       	mov	r8,3
8002b750:	f0 09 18 00 	cp.b	r9,r8
8002b754:	e0 8b 00 18 	brhi	8002b784 <usart_init_spi_master+0x84>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->spimode > 3 ||
      opt->channelmode > 3 ||
8002b758:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b75c:	11 e9       	ld.ub	r9,r8[0x6]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002b75e:	30 38       	mov	r8,3
8002b760:	f0 09 18 00 	cp.b	r9,r8
8002b764:	e0 8b 00 10 	brhi	8002b784 <usart_init_spi_master+0x84>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->spimode > 3 ||
      opt->channelmode > 3 ||
      usart_set_spi_master_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
8002b768:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002b76c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b770:	70 08       	ld.w	r8,r8[0x0]
8002b772:	12 9a       	mov	r10,r9
8002b774:	10 9b       	mov	r11,r8
8002b776:	ee fc ff fc 	ld.w	r12,r7[-4]
8002b77a:	fe b0 fa a5 	rcall	8002acc4 <usart_set_spi_master_baudrate>
8002b77e:	18 98       	mov	r8,r12
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002b780:	58 18       	cp.w	r8,1
8002b782:	c0 31       	brne	8002b788 <usart_init_spi_master+0x88>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->spimode > 3 ||
      opt->channelmode > 3 ||
      usart_set_spi_master_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
    return USART_INVALID_INPUT;
8002b784:	30 18       	mov	r8,1
8002b786:	c4 48       	rjmp	8002b80e <usart_init_spi_master+0x10e>

  if (opt->charlength == 9)
8002b788:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b78c:	11 c9       	ld.ub	r9,r8[0x4]
8002b78e:	30 98       	mov	r8,9
8002b790:	f0 09 18 00 	cp.b	r9,r8
8002b794:	c0 a1       	brne	8002b7a8 <usart_init_spi_master+0xa8>
  {
    // Character length set to 9 bits. MODE9 dominates CHRL.
    usart->mr |= AVR32_USART_MR_MODE9_MASK;
8002b796:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b79a:	70 18       	ld.w	r8,r8[0x4]
8002b79c:	10 99       	mov	r9,r8
8002b79e:	b1 b9       	sbr	r9,0x11
8002b7a0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b7a4:	91 19       	st.w	r8[0x4],r9
8002b7a6:	c0 d8       	rjmp	8002b7c0 <usart_init_spi_master+0xc0>
  }
  else
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
8002b7a8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b7ac:	70 19       	ld.w	r9,r8[0x4]
8002b7ae:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b7b2:	11 c8       	ld.ub	r8,r8[0x4]
8002b7b4:	20 58       	sub	r8,5
8002b7b6:	a7 68       	lsl	r8,0x6
8002b7b8:	10 49       	or	r9,r8
8002b7ba:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b7be:	91 19       	st.w	r8[0x4],r9
  }

  usart->mr |= AVR32_USART_MR_MODE_SPI_MASTER << AVR32_USART_MR_MODE_OFFSET | // SPI master mode.
8002b7c0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b7c4:	70 19       	ld.w	r9,r8[0x4]
               ((opt->spimode & 0x1) ^ 0x1) << AVR32_USART_MR_SYNC_OFFSET |   // SPI clock phase.
8002b7c6:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b7ca:	11 d8       	ld.ub	r8,r8[0x5]
8002b7cc:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002b7d0:	c0 41       	brne	8002b7d8 <usart_init_spi_master+0xd8>
8002b7d2:	e0 68 01 0e 	mov	r8,270
8002b7d6:	c0 28       	rjmp	8002b7da <usart_init_spi_master+0xda>
8002b7d8:	30 e8       	mov	r8,14
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET |             // Channel mode.
8002b7da:	ee fa ff f8 	ld.w	r10,r7[-8]
8002b7de:	15 ea       	ld.ub	r10,r10[0x6]
8002b7e0:	af 6a       	lsl	r10,0xe
8002b7e2:	f1 ea 10 0a 	or	r10,r8,r10
               (opt->spimode >> 1) << AVR32_USART_MR_MSBF_OFFSET |            // SPI clock polarity.
8002b7e6:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b7ea:	11 d8       	ld.ub	r8,r8[0x5]
8002b7ec:	a1 98       	lsr	r8,0x1
8002b7ee:	5c 58       	castu.b	r8
8002b7f0:	b1 68       	lsl	r8,0x10
8002b7f2:	f5 e8 10 08 	or	r8,r10,r8
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
  }

  usart->mr |= AVR32_USART_MR_MODE_SPI_MASTER << AVR32_USART_MR_MODE_OFFSET | // SPI master mode.
8002b7f6:	f3 e8 10 08 	or	r8,r9,r8
8002b7fa:	10 99       	mov	r9,r8
8002b7fc:	b3 a9       	sbr	r9,0x12
8002b7fe:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b802:	91 19       	st.w	r8[0x4],r9
               (opt->spimode >> 1) << AVR32_USART_MR_MSBF_OFFSET |            // SPI clock polarity.
               AVR32_USART_MR_CLKO_MASK;                                      // Drive SCK pin.

  // Setup complete; enable communication.
  // Enable input and output.
  usart->cr = AVR32_USART_CR_RXEN_MASK |
8002b804:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b808:	35 09       	mov	r9,80
8002b80a:	91 09       	st.w	r8[0x0],r9
              AVR32_USART_CR_TXEN_MASK;

  return USART_SUCCESS;
8002b80c:	30 08       	mov	r8,0
}
8002b80e:	10 9c       	mov	r12,r8
8002b810:	2f dd       	sub	sp,-12
8002b812:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002b816:	00 00       	add	r0,r0
8002b818:	80 02       	ld.sh	r2,r0[0x0]
8002b81a:	b5 8e       	lsr	lr,0x14

8002b81c <usart_init_spi_slave>:


int usart_init_spi_slave(volatile avr32_usart_t *usart, const usart_spi_options_t *opt, long pba_hz)
{
8002b81c:	eb cd 40 c0 	pushm	r6-r7,lr
8002b820:	1a 97       	mov	r7,sp
8002b822:	20 3d       	sub	sp,12
8002b824:	4b f6       	lddpc	r6,8002b920 <usart_init_spi_slave+0x104>
8002b826:	1e 26       	rsub	r6,pc
8002b828:	ef 4c ff fc 	st.w	r7[-4],r12
8002b82c:	ef 4b ff f8 	st.w	r7[-8],r11
8002b830:	ef 4a ff f4 	st.w	r7[-12],r10
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);
8002b834:	ee fc ff fc 	ld.w	r12,r7[-4]
8002b838:	f0 16 00 4b 	mcall	r6[300]

  // Check input values.
  if (!opt || // Null pointer.
8002b83c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b840:	58 08       	cp.w	r8,0
8002b842:	c2 80       	breq	8002b892 <usart_init_spi_slave+0x76>
      opt->charlength < 5 || opt->charlength > 9 ||
8002b844:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b848:	11 c9       	ld.ub	r9,r8[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002b84a:	30 48       	mov	r8,4
8002b84c:	f0 09 18 00 	cp.b	r9,r8
8002b850:	e0 88 00 21 	brls	8002b892 <usart_init_spi_slave+0x76>
      opt->charlength < 5 || opt->charlength > 9 ||
8002b854:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b858:	11 c9       	ld.ub	r9,r8[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002b85a:	30 98       	mov	r8,9
8002b85c:	f0 09 18 00 	cp.b	r9,r8
8002b860:	e0 8b 00 19 	brhi	8002b892 <usart_init_spi_slave+0x76>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->spimode > 3 ||
8002b864:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b868:	11 d9       	ld.ub	r9,r8[0x5]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002b86a:	30 38       	mov	r8,3
8002b86c:	f0 09 18 00 	cp.b	r9,r8
8002b870:	e0 8b 00 11 	brhi	8002b892 <usart_init_spi_slave+0x76>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->spimode > 3 ||
      opt->channelmode > 3 ||
8002b874:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b878:	11 e9       	ld.ub	r9,r8[0x6]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002b87a:	30 38       	mov	r8,3
8002b87c:	f0 09 18 00 	cp.b	r9,r8
8002b880:	e0 8b 00 09 	brhi	8002b892 <usart_init_spi_slave+0x76>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->spimode > 3 ||
      opt->channelmode > 3 ||
      usart_set_spi_slave_baudrate(usart) == USART_INVALID_INPUT)
8002b884:	ee fc ff fc 	ld.w	r12,r7[-4]
8002b888:	fe b0 fa 56 	rcall	8002ad34 <usart_set_spi_slave_baudrate>
8002b88c:	18 98       	mov	r8,r12
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002b88e:	58 18       	cp.w	r8,1
8002b890:	c0 31       	brne	8002b896 <usart_init_spi_slave+0x7a>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->spimode > 3 ||
      opt->channelmode > 3 ||
      usart_set_spi_slave_baudrate(usart) == USART_INVALID_INPUT)
    return USART_INVALID_INPUT;
8002b892:	30 18       	mov	r8,1
8002b894:	c4 18       	rjmp	8002b916 <usart_init_spi_slave+0xfa>

  if (opt->charlength == 9)
8002b896:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b89a:	11 c9       	ld.ub	r9,r8[0x4]
8002b89c:	30 98       	mov	r8,9
8002b89e:	f0 09 18 00 	cp.b	r9,r8
8002b8a2:	c0 a1       	brne	8002b8b6 <usart_init_spi_slave+0x9a>
  {
    // Character length set to 9 bits. MODE9 dominates CHRL.
    usart->mr |= AVR32_USART_MR_MODE9_MASK;
8002b8a4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b8a8:	70 18       	ld.w	r8,r8[0x4]
8002b8aa:	10 99       	mov	r9,r8
8002b8ac:	b1 b9       	sbr	r9,0x11
8002b8ae:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b8b2:	91 19       	st.w	r8[0x4],r9
8002b8b4:	c0 d8       	rjmp	8002b8ce <usart_init_spi_slave+0xb2>
  }
  else
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
8002b8b6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b8ba:	70 19       	ld.w	r9,r8[0x4]
8002b8bc:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b8c0:	11 c8       	ld.ub	r8,r8[0x4]
8002b8c2:	20 58       	sub	r8,5
8002b8c4:	a7 68       	lsl	r8,0x6
8002b8c6:	10 49       	or	r9,r8
8002b8c8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b8cc:	91 19       	st.w	r8[0x4],r9
  }

  usart->mr |= AVR32_USART_MR_MODE_SPI_SLAVE << AVR32_USART_MR_MODE_OFFSET |  // SPI slave mode.
8002b8ce:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b8d2:	70 19       	ld.w	r9,r8[0x4]
               ((opt->spimode & 0x1) ^ 0x1) << AVR32_USART_MR_SYNC_OFFSET |   // SPI clock phase.
8002b8d4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b8d8:	11 d8       	ld.ub	r8,r8[0x5]
8002b8da:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002b8de:	c0 41       	brne	8002b8e6 <usart_init_spi_slave+0xca>
8002b8e0:	e0 68 01 0f 	mov	r8,271
8002b8e4:	c0 28       	rjmp	8002b8e8 <usart_init_spi_slave+0xcc>
8002b8e6:	30 f8       	mov	r8,15
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET |             // Channel mode.
8002b8e8:	ee fa ff f8 	ld.w	r10,r7[-8]
8002b8ec:	15 ea       	ld.ub	r10,r10[0x6]
8002b8ee:	af 6a       	lsl	r10,0xe
8002b8f0:	f1 ea 10 0a 	or	r10,r8,r10
               (opt->spimode >> 1) << AVR32_USART_MR_MSBF_OFFSET;             // SPI clock polarity.
8002b8f4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b8f8:	11 d8       	ld.ub	r8,r8[0x5]
8002b8fa:	a1 98       	lsr	r8,0x1
8002b8fc:	5c 58       	castu.b	r8
8002b8fe:	b1 68       	lsl	r8,0x10
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
  }

  usart->mr |= AVR32_USART_MR_MODE_SPI_SLAVE << AVR32_USART_MR_MODE_OFFSET |  // SPI slave mode.
8002b900:	f5 e8 10 08 	or	r8,r10,r8
8002b904:	10 49       	or	r9,r8
8002b906:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b90a:	91 19       	st.w	r8[0x4],r9
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET |             // Channel mode.
               (opt->spimode >> 1) << AVR32_USART_MR_MSBF_OFFSET;             // SPI clock polarity.

  // Setup complete; enable communication.
  // Enable input and output.
  usart->cr = AVR32_USART_CR_RXEN_MASK |
8002b90c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b910:	35 09       	mov	r9,80
8002b912:	91 09       	st.w	r8[0x0],r9
              AVR32_USART_CR_TXEN_MASK;

  return USART_SUCCESS;
8002b914:	30 08       	mov	r8,0
}
8002b916:	10 9c       	mov	r12,r8
8002b918:	2f dd       	sub	sp,-12
8002b91a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002b91e:	00 00       	add	r0,r0
8002b920:	80 02       	ld.sh	r2,r0[0x0]
8002b922:	b6 aa       	st.b	r11[0x2],r10

8002b924 <usart_spi_selectChip>:
 */
//! @{


int usart_spi_selectChip(volatile avr32_usart_t *usart)
{
8002b924:	eb cd 40 80 	pushm	r7,lr
8002b928:	1a 97       	mov	r7,sp
8002b92a:	20 1d       	sub	sp,4
8002b92c:	ef 4c ff fc 	st.w	r7[-4],r12
  // Force the SPI chip select.
  usart->cr = AVR32_USART_CR_RTSEN_MASK;
8002b930:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b934:	e4 69 00 00 	mov	r9,262144
8002b938:	91 09       	st.w	r8[0x0],r9

  return USART_SUCCESS;
8002b93a:	30 08       	mov	r8,0
}
8002b93c:	10 9c       	mov	r12,r8
8002b93e:	2f fd       	sub	sp,-4
8002b940:	e3 cd 80 80 	ldm	sp++,r7,pc

8002b944 <usart_spi_unselectChip>:


int usart_spi_unselectChip(volatile avr32_usart_t *usart)
{
8002b944:	eb cd 40 80 	pushm	r7,lr
8002b948:	1a 97       	mov	r7,sp
8002b94a:	20 3d       	sub	sp,12
8002b94c:	ef 4c ff f4 	st.w	r7[-12],r12
  int timeout = USART_DEFAULT_TIMEOUT;
8002b950:	e0 68 27 10 	mov	r8,10000
8002b954:	ef 48 ff f8 	st.w	r7[-8],r8

  do
  {
    if (!timeout--) return USART_FAILURE;
8002b958:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b95c:	58 08       	cp.w	r8,0
8002b95e:	5f 08       	sreq	r8
8002b960:	5c 58       	castu.b	r8
8002b962:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002b966:	20 19       	sub	r9,1
8002b968:	ef 49 ff f8 	st.w	r7[-8],r9
8002b96c:	58 08       	cp.w	r8,0
8002b96e:	c0 30       	breq	8002b974 <usart_spi_unselectChip+0x30>
8002b970:	3f f8       	mov	r8,-1
8002b972:	c1 38       	rjmp	8002b998 <usart_spi_unselectChip+0x54>
8002b974:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002b978:	ef 48 ff fc 	st.w	r7[-4],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int usart_tx_empty(volatile avr32_usart_t *usart)
{
  return (usart->csr & AVR32_USART_CSR_TXEMPTY_MASK) != 0;
8002b97c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b980:	70 58       	ld.w	r8,r8[0x14]
8002b982:	e2 18 02 00 	andl	r8,0x200,COH
8002b986:	5f 18       	srne	r8
  } while (!usart_tx_empty(usart));
8002b988:	58 08       	cp.w	r8,0
8002b98a:	ce 70       	breq	8002b958 <usart_spi_unselectChip+0x14>

  // Release the SPI chip select.
  usart->cr = AVR32_USART_CR_RTSDIS_MASK;
8002b98c:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002b990:	e8 69 00 00 	mov	r9,524288
8002b994:	91 09       	st.w	r8[0x0],r9

  return USART_SUCCESS;
8002b996:	30 08       	mov	r8,0
}
8002b998:	10 9c       	mov	r12,r8
8002b99a:	2f dd       	sub	sp,-12
8002b99c:	e3 cd 80 80 	ldm	sp++,r7,pc

8002b9a0 <usart_send_address>:
 */
//! @{


int usart_send_address(volatile avr32_usart_t *usart, int address)
{
8002b9a0:	eb cd 40 c0 	pushm	r6-r7,lr
8002b9a4:	1a 97       	mov	r7,sp
8002b9a6:	20 5d       	sub	sp,20
8002b9a8:	49 96       	lddpc	r6,8002ba0c <usart_send_address+0x6c>
8002b9aa:	1e 26       	rsub	r6,pc
8002b9ac:	ef 4c ff f0 	st.w	r7[-16],r12
8002b9b0:	ef 4b ff ec 	st.w	r7[-20],r11
8002b9b4:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002b9b8:	ef 48 ff f4 	st.w	r7[-12],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ int usart_mode_is_multidrop(volatile avr32_usart_t *usart)
{
  return ((usart->mr >> AVR32_USART_MR_PAR_OFFSET) & AVR32_USART_MR_PAR_MULTI) == AVR32_USART_MR_PAR_MULTI;
8002b9bc:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002b9c0:	70 18       	ld.w	r8,r8[0x4]
8002b9c2:	a9 98       	lsr	r8,0x9
8002b9c4:	e2 18 00 06 	andl	r8,0x6,COH
8002b9c8:	58 68       	cp.w	r8,6
8002b9ca:	5f 08       	sreq	r8


int usart_send_address(volatile avr32_usart_t *usart, int address)
{
  // Check if USART is in multidrop / RS485 mode.
  if (!usart_mode_is_multidrop(usart)) return USART_MODE_FAULT;
8002b9cc:	58 08       	cp.w	r8,0
8002b9ce:	c0 31       	brne	8002b9d4 <usart_send_address+0x34>
8002b9d0:	30 58       	mov	r8,5
8002b9d2:	c1 88       	rjmp	8002ba02 <usart_send_address+0x62>

  // Prepare to send an address.
  usart->cr = AVR32_USART_CR_SENDA_MASK;
8002b9d4:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002b9d8:	e0 69 10 00 	mov	r9,4096
8002b9dc:	91 09       	st.w	r8[0x0],r9
8002b9de:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002b9e2:	ef 48 ff fc 	st.w	r7[-4],r8
8002b9e6:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002b9ea:	ef 48 ff f8 	st.w	r7[-8],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void usart_bw_write_char(volatile avr32_usart_t *usart, int c)
{
  while (usart_write_char(usart, c) != USART_SUCCESS);
8002b9ee:	ee fb ff f8 	ld.w	r11,r7[-8]
8002b9f2:	ee fc ff fc 	ld.w	r12,r7[-4]
8002b9f6:	f0 16 01 0d 	mcall	r6[1076]
8002b9fa:	18 98       	mov	r8,r12
8002b9fc:	58 08       	cp.w	r8,0
8002b9fe:	cf 81       	brne	8002b9ee <usart_send_address+0x4e>

  // Write the address to TX.
  usart_bw_write_char(usart, address);

  return USART_SUCCESS;
8002ba00:	30 08       	mov	r8,0
}
8002ba02:	10 9c       	mov	r12,r8
8002ba04:	2f bd       	sub	sp,-20
8002ba06:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002ba0a:	00 00       	add	r0,r0
8002ba0c:	80 02       	ld.sh	r2,r0[0x0]
8002ba0e:	b8 2e       	st.h	r12[0x4],lr

8002ba10 <usart_write_char>:


int usart_write_char(volatile avr32_usart_t *usart, int c)
{
8002ba10:	eb cd 40 80 	pushm	r7,lr
8002ba14:	1a 97       	mov	r7,sp
8002ba16:	20 3d       	sub	sp,12
8002ba18:	ef 4c ff f8 	st.w	r7[-8],r12
8002ba1c:	ef 4b ff f4 	st.w	r7[-12],r11
8002ba20:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ba24:	ef 48 ff fc 	st.w	r7[-4],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int usart_tx_ready(volatile avr32_usart_t *usart)
{
  return (usart->csr & AVR32_USART_CSR_TXRDY_MASK) != 0;
8002ba28:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ba2c:	70 58       	ld.w	r8,r8[0x14]
8002ba2e:	e2 18 00 02 	andl	r8,0x2,COH
8002ba32:	5f 18       	srne	r8
  if (usart_tx_ready(usart))
8002ba34:	58 08       	cp.w	r8,0
8002ba36:	c0 a0       	breq	8002ba4a <usart_write_char+0x3a>
  {
    usart->thr = (c << AVR32_USART_THR_TXCHR_OFFSET) & AVR32_USART_THR_TXCHR_MASK;
8002ba38:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002ba3c:	f3 d8 c0 09 	bfextu	r9,r8,0x0,0x9
8002ba40:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ba44:	91 79       	st.w	r8[0x1c],r9
    return USART_SUCCESS;
8002ba46:	30 08       	mov	r8,0
8002ba48:	c0 28       	rjmp	8002ba4c <usart_write_char+0x3c>
  }
  else
    return USART_TX_BUSY;
8002ba4a:	30 28       	mov	r8,2
}
8002ba4c:	10 9c       	mov	r12,r8
8002ba4e:	2f dd       	sub	sp,-12
8002ba50:	e3 cd 80 80 	ldm	sp++,r7,pc

8002ba54 <usart_putchar>:


int usart_putchar(volatile avr32_usart_t *usart, int c)
{
8002ba54:	eb cd 40 c0 	pushm	r6-r7,lr
8002ba58:	1a 97       	mov	r7,sp
8002ba5a:	20 3d       	sub	sp,12
8002ba5c:	49 36       	lddpc	r6,8002baa8 <usart_putchar+0x54>
8002ba5e:	1e 26       	rsub	r6,pc
8002ba60:	ef 4c ff f8 	st.w	r7[-8],r12
8002ba64:	ef 4b ff f4 	st.w	r7[-12],r11
  int timeout = USART_DEFAULT_TIMEOUT;
8002ba68:	e0 68 27 10 	mov	r8,10000
8002ba6c:	ef 48 ff fc 	st.w	r7[-4],r8

  do
  {
    if (!timeout--) return USART_FAILURE;
8002ba70:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ba74:	58 08       	cp.w	r8,0
8002ba76:	5f 08       	sreq	r8
8002ba78:	5c 58       	castu.b	r8
8002ba7a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002ba7e:	20 19       	sub	r9,1
8002ba80:	ef 49 ff fc 	st.w	r7[-4],r9
8002ba84:	58 08       	cp.w	r8,0
8002ba86:	c0 30       	breq	8002ba8c <usart_putchar+0x38>
8002ba88:	3f f8       	mov	r8,-1
8002ba8a:	c0 b8       	rjmp	8002baa0 <usart_putchar+0x4c>
  } while (usart_write_char(usart, c) != USART_SUCCESS);
8002ba8c:	ee fb ff f4 	ld.w	r11,r7[-12]
8002ba90:	ee fc ff f8 	ld.w	r12,r7[-8]
8002ba94:	f0 16 01 0d 	mcall	r6[1076]
8002ba98:	18 98       	mov	r8,r12
8002ba9a:	58 08       	cp.w	r8,0
8002ba9c:	ce a1       	brne	8002ba70 <usart_putchar+0x1c>

  return USART_SUCCESS;
8002ba9e:	30 08       	mov	r8,0
}
8002baa0:	10 9c       	mov	r12,r8
8002baa2:	2f dd       	sub	sp,-12
8002baa4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002baa8:	80 02       	ld.sh	r2,r0[0x0]
8002baaa:	b8 e2       	st.b	r12[0x6],r2

8002baac <usart_read_char>:


int usart_read_char(volatile avr32_usart_t *usart, int *c)
{
8002baac:	eb cd 40 80 	pushm	r7,lr
8002bab0:	1a 97       	mov	r7,sp
8002bab2:	20 3d       	sub	sp,12
8002bab4:	ef 4c ff f8 	st.w	r7[-8],r12
8002bab8:	ef 4b ff f4 	st.w	r7[-12],r11
  // Check for errors: frame, parity and overrun. In RS485 mode, a parity error
  // would mean that an address char has been received.
  if (usart->csr & (AVR32_USART_CSR_OVRE_MASK |
8002babc:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002bac0:	70 58       	ld.w	r8,r8[0x14]
8002bac2:	e2 18 00 e0 	andl	r8,0xe0,COH
8002bac6:	c0 30       	breq	8002bacc <usart_read_char+0x20>
                    AVR32_USART_CSR_FRAME_MASK |
                    AVR32_USART_CSR_PARE_MASK))
    return USART_RX_ERROR;
8002bac8:	30 48       	mov	r8,4
8002baca:	c1 68       	rjmp	8002baf6 <usart_read_char+0x4a>
8002bacc:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002bad0:	ef 48 ff fc 	st.w	r7[-4],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int usart_test_hit(volatile avr32_usart_t *usart)
{
  return (usart->csr & AVR32_USART_CSR_RXRDY_MASK) != 0;
8002bad4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002bad8:	70 58       	ld.w	r8,r8[0x14]
8002bada:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1

  // No error; if we really did receive a char, read it and return SUCCESS.
  if (usart_test_hit(usart))
8002bade:	c0 b0       	breq	8002baf4 <usart_read_char+0x48>
  {
    *c = (usart->rhr & AVR32_USART_RHR_RXCHR_MASK) >> AVR32_USART_RHR_RXCHR_OFFSET;
8002bae0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002bae4:	70 68       	ld.w	r8,r8[0x18]
8002bae6:	f3 d8 c0 09 	bfextu	r9,r8,0x0,0x9
8002baea:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002baee:	91 09       	st.w	r8[0x0],r9
    return USART_SUCCESS;
8002baf0:	30 08       	mov	r8,0
8002baf2:	c0 28       	rjmp	8002baf6 <usart_read_char+0x4a>
  }
  else
    return USART_RX_EMPTY;
8002baf4:	30 38       	mov	r8,3
}
8002baf6:	10 9c       	mov	r12,r8
8002baf8:	2f dd       	sub	sp,-12
8002bafa:	e3 cd 80 80 	ldm	sp++,r7,pc

8002bafe <usart_getchar>:


int usart_getchar(volatile avr32_usart_t *usart)
{
8002bafe:	eb cd 40 c0 	pushm	r6-r7,lr
8002bb02:	1a 97       	mov	r7,sp
8002bb04:	20 3d       	sub	sp,12
8002bb06:	49 06       	lddpc	r6,8002bb44 <usart_getchar+0x46>
8002bb08:	1e 26       	rsub	r6,pc
8002bb0a:	ef 4c ff f4 	st.w	r7[-12],r12
  int c, ret;

  while ((ret = usart_read_char(usart, &c)) == USART_RX_EMPTY);
8002bb0e:	ee c8 00 08 	sub	r8,r7,8
8002bb12:	10 9b       	mov	r11,r8
8002bb14:	ee fc ff f4 	ld.w	r12,r7[-12]
8002bb18:	f0 16 01 f0 	mcall	r6[1984]
8002bb1c:	18 98       	mov	r8,r12
8002bb1e:	ef 48 ff fc 	st.w	r7[-4],r8
8002bb22:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002bb26:	58 38       	cp.w	r8,3
8002bb28:	cf 30       	breq	8002bb0e <usart_getchar+0x10>

  if (ret == USART_RX_ERROR)
8002bb2a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002bb2e:	58 48       	cp.w	r8,4
8002bb30:	c0 31       	brne	8002bb36 <usart_getchar+0x38>
    return USART_FAILURE;
8002bb32:	3f f8       	mov	r8,-1
8002bb34:	c0 38       	rjmp	8002bb3a <usart_getchar+0x3c>

  return c;
8002bb36:	ee f8 ff f8 	ld.w	r8,r7[-8]
}
8002bb3a:	10 9c       	mov	r12,r8
8002bb3c:	2f dd       	sub	sp,-12
8002bb3e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002bb42:	00 00       	add	r0,r0
8002bb44:	80 02       	ld.sh	r2,r0[0x0]
8002bb46:	b9 8c       	lsr	r12,0x18

8002bb48 <usart_write_line>:


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
8002bb48:	eb cd 40 c0 	pushm	r6-r7,lr
8002bb4c:	1a 97       	mov	r7,sp
8002bb4e:	20 2d       	sub	sp,8
8002bb50:	48 e6       	lddpc	r6,8002bb88 <usart_write_line+0x40>
8002bb52:	1e 26       	rsub	r6,pc
8002bb54:	ef 4c ff fc 	st.w	r7[-4],r12
8002bb58:	ef 4b ff f8 	st.w	r7[-8],r11
  while (*string != '\0')
8002bb5c:	c0 e8       	rjmp	8002bb78 <usart_write_line+0x30>
    usart_putchar(usart, *string++);
8002bb5e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002bb62:	11 88       	ld.ub	r8,r8[0x0]
8002bb64:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002bb68:	2f f9       	sub	r9,-1
8002bb6a:	ef 49 ff f8 	st.w	r7[-8],r9
8002bb6e:	10 9b       	mov	r11,r8
8002bb70:	ee fc ff fc 	ld.w	r12,r7[-4]
8002bb74:	f0 16 00 9a 	mcall	r6[616]
}


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
  while (*string != '\0')
8002bb78:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002bb7c:	11 88       	ld.ub	r8,r8[0x0]
8002bb7e:	58 08       	cp.w	r8,0
8002bb80:	ce f1       	brne	8002bb5e <usart_write_line+0x16>
    usart_putchar(usart, *string++);
}
8002bb82:	2f ed       	sub	sp,-8
8002bb84:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002bb88:	80 02       	ld.sh	r2,r0[0x0]
8002bb8a:	b9 d6       	cbr	r6,0x19
8002bb8c:	45 72       	lddsp	r2,sp[0x15c]
8002bb8e:	72 6f       	ld.w	pc,r9[0x18]
8002bb90:	72 21       	ld.w	r1,r9[0x8]
8002bb92:	21 21       	sub	r1,18
8002bb94:	0d 0a       	ld.w	r10,r6++
	...

8002bb98 <usart_get_echo_line>:


int usart_get_echo_line(volatile avr32_usart_t *usart)
{
8002bb98:	eb cd 40 c0 	pushm	r6-r7,lr
8002bb9c:	1a 97       	mov	r7,sp
8002bb9e:	20 3d       	sub	sp,12
8002bba0:	49 e6       	lddpc	r6,8002bc18 <usart_get_echo_line+0x80>
8002bba2:	1e 26       	rsub	r6,pc
8002bba4:	ef 4c ff f4 	st.w	r7[-12],r12
  int rx_char;
  int retval = USART_SUCCESS;
8002bba8:	30 08       	mov	r8,0
8002bbaa:	ef 48 ff fc 	st.w	r7[-4],r8
8002bbae:	c0 28       	rjmp	8002bbb2 <usart_get_echo_line+0x1a>
    if (rx_char == '\r')
    { // Add a LF and consider this as the end of the line.
      usart_putchar(usart, '\n');
      break;
    }
  }
8002bbb0:	d7 03       	nop
  int rx_char;
  int retval = USART_SUCCESS;

  while (1)
  {
    rx_char = usart_getchar(usart);
8002bbb2:	ee fc ff f4 	ld.w	r12,r7[-12]
8002bbb6:	f0 16 01 be 	mcall	r6[1784]
8002bbba:	18 98       	mov	r8,r12
8002bbbc:	ef 48 ff f8 	st.w	r7[-8],r8
    if (rx_char == USART_FAILURE)
8002bbc0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002bbc4:	5b f8       	cp.w	r8,-1
8002bbc6:	c0 b1       	brne	8002bbdc <usart_get_echo_line+0x44>
    {
      usart_write_line(usart, "Error!!!\r\n");
8002bbc8:	fe cb 00 3c 	sub	r11,pc,60
8002bbcc:	ee fc ff f4 	ld.w	r12,r7[-12]
8002bbd0:	f0 16 01 53 	mcall	r6[1356]
      retval = USART_FAILURE;
8002bbd4:	3f f8       	mov	r8,-1
8002bbd6:	ef 48 ff fc 	st.w	r7[-4],r8
      break;
8002bbda:	c1 98       	rjmp	8002bc0c <usart_get_echo_line+0x74>
    }
    if (rx_char == '\x03')
8002bbdc:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002bbe0:	58 38       	cp.w	r8,3
8002bbe2:	c0 51       	brne	8002bbec <usart_get_echo_line+0x54>
    {
      retval = USART_FAILURE;
8002bbe4:	3f f8       	mov	r8,-1
8002bbe6:	ef 48 ff fc 	st.w	r7[-4],r8
      break;
8002bbea:	c1 18       	rjmp	8002bc0c <usart_get_echo_line+0x74>
    }
    usart_putchar(usart, rx_char);
8002bbec:	ee fb ff f8 	ld.w	r11,r7[-8]
8002bbf0:	ee fc ff f4 	ld.w	r12,r7[-12]
8002bbf4:	f0 16 00 9a 	mcall	r6[616]
    if (rx_char == '\r')
8002bbf8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002bbfc:	58 d8       	cp.w	r8,13
8002bbfe:	cd 91       	brne	8002bbb0 <usart_get_echo_line+0x18>
    { // Add a LF and consider this as the end of the line.
      usart_putchar(usart, '\n');
8002bc00:	30 ab       	mov	r11,10
8002bc02:	ee fc ff f4 	ld.w	r12,r7[-12]
8002bc06:	f0 16 00 9a 	mcall	r6[616]
      break;
8002bc0a:	d7 03       	nop
    }
  }

  return retval;
8002bc0c:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8002bc10:	10 9c       	mov	r12,r8
8002bc12:	2f dd       	sub	sp,-12
8002bc14:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002bc18:	80 02       	ld.sh	r2,r0[0x0]
8002bc1a:	ba 26       	st.h	sp[0x4],r6

8002bc1c <delay_init>:
#endif

//_____ D E C L A R A T I O N S ____________________________________________

void delay_init(unsigned long fcpu_hz)
{
8002bc1c:	eb cd 40 c0 	pushm	r6-r7,lr
8002bc20:	1a 97       	mov	r7,sp
8002bc22:	20 1d       	sub	sp,4
8002bc24:	48 66       	lddpc	r6,8002bc3c <delay_init+0x20>
8002bc26:	1e 26       	rsub	r6,pc
8002bc28:	ef 4c ff fc 	st.w	r7[-4],r12
#ifndef FREERTOS_USED
  s_fcpu_hz = fcpu_hz;
8002bc2c:	ec f8 04 9c 	ld.w	r8,r6[1180]
8002bc30:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002bc34:	91 09       	st.w	r8[0x0],r9
#endif
}
8002bc36:	2f fd       	sub	sp,-4
8002bc38:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002bc3c:	80 02       	ld.sh	r2,r0[0x0]
8002bc3e:	ba aa       	st.b	sp[0x2],r10

8002bc40 <delay_ms>:


void delay_ms(unsigned long delay)
{
8002bc40:	eb cd 40 c0 	pushm	r6-r7,lr
8002bc44:	1a 97       	mov	r7,sp
8002bc46:	20 cd       	sub	sp,48
8002bc48:	4d 36       	lddpc	r6,8002bd94 <delay_ms+0x154>
8002bc4a:	1e 26       	rsub	r6,pc
8002bc4c:	ef 4c ff d0 	st.w	r7[-48],r12
#if (defined FREERTOS_USED)
  vTaskDelay( (portTickType)TASK_DELAY_MS(delay) );
#elif (defined NUTOS_USED)
  NutSleep(delay);
#else
  cpu_delay_ms(delay, s_fcpu_hz);
8002bc50:	ec fc 04 9c 	ld.w	r12,r6[1180]
8002bc54:	78 0c       	ld.w	r12,r12[0x0]
8002bc56:	ee fe ff d0 	ld.w	lr,r7[-48]
8002bc5a:	ef 4e ff e4 	st.w	r7[-28],lr
8002bc5e:	ef 4c ff e0 	st.w	r7[-32],r12
8002bc62:	ee fc ff e4 	ld.w	r12,r7[-28]
8002bc66:	ef 4c ff ec 	st.w	r7[-20],r12
8002bc6a:	ee fc ff e0 	ld.w	r12,r7[-32]
8002bc6e:	ef 4c ff e8 	st.w	r7[-24],r12
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
8002bc72:	ee fa ff ec 	ld.w	r10,r7[-20]
8002bc76:	30 0b       	mov	r11,0
8002bc78:	ee f8 ff e8 	ld.w	r8,r7[-24]
8002bc7c:	30 09       	mov	r9,0
8002bc7e:	f6 08 02 4c 	mul	r12,r11,r8
8002bc82:	f2 0a 02 4e 	mul	lr,r9,r10
8002bc86:	1c 0c       	add	r12,lr
8002bc88:	f4 08 06 48 	mulu.d	r8,r10,r8
8002bc8c:	12 0c       	add	r12,r9
8002bc8e:	18 99       	mov	r9,r12
8002bc90:	e0 6a 03 e7 	mov	r10,999
8002bc94:	30 0b       	mov	r11,0
8002bc96:	f0 0a 00 0a 	add	r10,r8,r10
8002bc9a:	f2 0b 00 4b 	adc	r11,r9,r11
8002bc9e:	e0 68 03 e8 	mov	r8,1000
8002bca2:	30 09       	mov	r9,0
8002bca4:	f0 16 00 f8 	mcall	r6[992]
8002bca8:	14 98       	mov	r8,r10
8002bcaa:	16 99       	mov	r9,r11
__attribute__((__always_inline__))
#endif
static inline void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
8002bcac:	ef 48 ff f4 	st.w	r7[-12],r8
8002bcb0:	ee c8 00 2c 	sub	r8,r7,44
8002bcb4:	ef 48 ff f0 	st.w	r7[-16],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8002bcb8:	e1 b8 00 42 	mfsr	r8,0x108
8002bcbc:	10 99       	mov	r9,r8
8002bcbe:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002bcc2:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8002bcc4:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002bcc8:	70 09       	ld.w	r9,r8[0x0]
8002bcca:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002bcce:	10 09       	add	r9,r8
8002bcd0:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002bcd4:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
8002bcd6:	ee f9 ff f0 	ld.w	r9,r7[-16]
8002bcda:	30 08       	mov	r8,0
8002bcdc:	f3 68 00 08 	st.b	r9[8],r8
8002bce0:	ee c8 00 2c 	sub	r8,r7,44
8002bce4:	ef 48 ff f8 	st.w	r7[-8],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8002bce8:	e1 b8 00 42 	mfsr	r8,0x108
8002bcec:	ef 48 ff fc 	st.w	r7[-4],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
8002bcf0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002bcf4:	f1 39 00 08 	ld.ub	r9,r8[8]
8002bcf8:	30 28       	mov	r8,2
8002bcfa:	f0 09 18 00 	cp.b	r9,r8
8002bcfe:	c0 31       	brne	8002bd04 <delay_ms+0xc4>
    return false;
8002bd00:	30 08       	mov	r8,0
8002bd02:	c4 38       	rjmp	8002bd88 <delay_ms+0x148>

  // Test if the timeout as already occured.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
8002bd04:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002bd08:	f1 39 00 08 	ld.ub	r9,r8[8]
8002bd0c:	30 18       	mov	r8,1
8002bd0e:	f0 09 18 00 	cp.b	r9,r8
8002bd12:	c0 31       	brne	8002bd18 <delay_ms+0xd8>
    return true;
8002bd14:	30 18       	mov	r8,1
8002bd16:	c3 98       	rjmp	8002bd88 <delay_ms+0x148>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8002bd18:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002bd1c:	70 09       	ld.w	r9,r8[0x0]
8002bd1e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002bd22:	70 18       	ld.w	r8,r8[0x4]
8002bd24:	10 39       	cp.w	r9,r8
8002bd26:	e0 88 00 1a 	brls	8002bd5a <delay_ms+0x11a>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8002bd2a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002bd2e:	70 08       	ld.w	r8,r8[0x0]
8002bd30:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002bd34:	10 39       	cp.w	r9,r8
8002bd36:	c1 02       	brcc	8002bd56 <delay_ms+0x116>
8002bd38:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002bd3c:	70 18       	ld.w	r8,r8[0x4]
8002bd3e:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002bd42:	10 39       	cp.w	r9,r8
8002bd44:	e0 88 00 09 	brls	8002bd56 <delay_ms+0x116>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8002bd48:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002bd4c:	30 18       	mov	r8,1
8002bd4e:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8002bd52:	30 18       	mov	r8,1
8002bd54:	c1 a8       	rjmp	8002bd88 <delay_ms+0x148>
    }
    return false;
8002bd56:	30 08       	mov	r8,0
8002bd58:	c1 88       	rjmp	8002bd88 <delay_ms+0x148>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8002bd5a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002bd5e:	70 08       	ld.w	r8,r8[0x0]
8002bd60:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002bd64:	10 39       	cp.w	r9,r8
8002bd66:	c0 93       	brcs	8002bd78 <delay_ms+0x138>
8002bd68:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002bd6c:	70 18       	ld.w	r8,r8[0x4]
8002bd6e:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002bd72:	10 39       	cp.w	r9,r8
8002bd74:	e0 88 00 09 	brls	8002bd86 <delay_ms+0x146>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8002bd78:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002bd7c:	30 18       	mov	r8,1
8002bd7e:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8002bd82:	30 18       	mov	r8,1
8002bd84:	c0 28       	rjmp	8002bd88 <delay_ms+0x148>
    }
    return false;
8002bd86:	30 08       	mov	r8,0
#endif
static inline void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
8002bd88:	58 08       	cp.w	r8,0
8002bd8a:	ca b0       	breq	8002bce0 <delay_ms+0xa0>
#endif
}
8002bd8c:	2f 4d       	sub	sp,-48
8002bd8e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002bd92:	00 00       	add	r0,r0
8002bd94:	80 02       	ld.sh	r2,r0[0x0]
8002bd96:	ba ce       	st.b	sp[0x4],lr

8002bd98 <_stext>:

  .global _stext
  .type _stext, @function
_stext:
  // Set initial stack pointer.
  lda.w   sp, _estack
8002bd98:	48 dd       	lddpc	sp,8002bdcc <udata_clear_loop_end+0x4>

  // Set up EVBA so interrupts can be enabled.
  lda.w   r0, _evba
8002bd9a:	fe c0 a7 9a 	sub	r0,pc,-22630
  mtsr    AVR32_EVBA, r0
8002bd9e:	e3 b0 00 01 	mtsr	0x4,r0

  // Enable the exception processing.
  csrf    AVR32_SR_EM_OFFSET

  // Load initialized data having a global lifetime from the data LMA.
  lda.w   r0, _data
8002bda2:	d5 53       	csrf	0x15
  lda.w   r1, _edata
8002bda4:	48 b0       	lddpc	r0,8002bdd0 <udata_clear_loop_end+0x8>
  cp      r0, r1
8002bda6:	48 c1       	lddpc	r1,8002bdd4 <udata_clear_loop_end+0xc>
  brhs    idata_load_loop_end
8002bda8:	02 30       	cp.w	r0,r1
  lda.w   r2, _data_lma
8002bdaa:	c0 62       	brcc	8002bdb6 <idata_load_loop_end>
idata_load_loop:
  ld.d    r4, r2++
8002bdac:	48 b2       	lddpc	r2,8002bdd8 <udata_clear_loop_end+0x10>

8002bdae <idata_load_loop>:
  st.d    r0++, r4
8002bdae:	a5 05       	ld.d	r4,r2++
  cp      r0, r1
8002bdb0:	a1 24       	st.d	r0++,r4
  brlo    idata_load_loop
8002bdb2:	02 30       	cp.w	r0,r1
idata_load_loop_end:

  // Clear uninitialized data having a global lifetime in the blank static storage section.
  lda.w   r0, __bss_start
8002bdb4:	cf d3       	brcs	8002bdae <idata_load_loop>

8002bdb6 <idata_load_loop_end>:
  lda.w   r1, _end
8002bdb6:	48 a0       	lddpc	r0,8002bddc <udata_clear_loop_end+0x14>
  cp      r0, r1
8002bdb8:	48 a1       	lddpc	r1,8002bde0 <udata_clear_loop_end+0x18>
  brhs    udata_clear_loop_end
8002bdba:	02 30       	cp.w	r0,r1
  mov     r2, 0
8002bdbc:	c0 62       	brcc	8002bdc8 <udata_clear_loop_end>
  mov     r3, 0
8002bdbe:	30 02       	mov	r2,0
udata_clear_loop:
  st.d    r0++, r2
8002bdc0:	30 03       	mov	r3,0

8002bdc2 <udata_clear_loop>:
  cp      r0, r1
8002bdc2:	a1 22       	st.d	r0++,r2
  brlo    udata_clear_loop
8002bdc4:	02 30       	cp.w	r0,r1
  // Safety: Set the default "return" @ to the exit routine address.
  lda.w   lr, exit
#endif

  // Start the show.
  lda.w   pc, main
8002bdc6:	cf e3       	brcs	8002bdc2 <udata_clear_loop>

8002bdc8 <udata_clear_loop_end>:
8002bdc8:	fe cf e6 ec 	sub	pc,pc,-6420
8002bdcc:	00 01       	add	r1,r0
8002bdce:	00 00       	add	r0,r0
8002bdd0:	00 00       	add	r0,r0
8002bdd2:	00 04       	add	r4,r0
8002bdd4:	00 00       	add	r0,r0
8002bdd6:	24 30       	sub	r0,67
8002bdd8:	80 03       	ld.sh	r3,r0[0x0]
8002bdda:	1e 48       	or	r8,pc
8002bddc:	00 00       	add	r0,r0
8002bdde:	24 30       	sub	r0,67
8002bde0:	00 00       	add	r0,r0
8002bde2:	96 d8       	ld.uh	r8,r11[0xa]

8002bde4 <board_init>:
8002bde4:	eb cd 40 c0 	pushm	r6-r7,lr
#if defined (CONF_BOARD_AT45DBX)
#define AT45DBX_MEM_CNT             1
#endif

void board_init(void)
{
8002bde8:	1a 97       	mov	r7,sp
8002bdea:	48 76       	lddpc	r6,8002be04 <board_init+0x20>
8002bdec:	1e 26       	rsub	r6,pc
		sizeof(AT45DBX_SPI_GPIO_MAP) / sizeof(AT45DBX_SPI_GPIO_MAP[0]));
#endif

	// Configure the pins connected to LEDs as output and set their default
	// initial state to high (LEDs off).        
	gpio_configure_pin(LED0_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_LOW);
8002bdee:	30 1b       	mov	r11,1
8002bdf0:	32 0c       	mov	r12,32
8002bdf2:	f0 16 00 3a 	mcall	r6[232]
	gpio_configure_pin(LED1_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_LOW);
8002bdf6:	30 1b       	mov	r11,1
8002bdf8:	32 1c       	mov	r12,33
8002bdfa:	f0 16 00 3a 	mcall	r6[232]
  };

  // TWI gpio pins cofiguration
  gpio_enable_module(TWI_GPIO_MAP, sizeof(TWI_GPIO_MAP) / sizeof(TWI_GPIO_MAP[0]));
#endif
}
8002bdfe:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002be02:	00 00       	add	r0,r0
8002be04:	80 02       	ld.sh	r2,r0[0x0]
8002be06:	bc 70       	st.h	lr[0xe],r0

8002be08 <cpu_irq_save>:
#endif

typedef uint32_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
8002be08:	eb cd 40 80 	pushm	r7,lr
8002be0c:	1a 97       	mov	r7,sp
8002be0e:	20 1d       	sub	sp,4
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8002be10:	e1 b8 00 00 	mfsr	r8,0x0
8002be14:	ef 48 ff fc 	st.w	r7[-4],r8
	cpu_irq_disable();
8002be18:	d3 03       	ssrf	0x10

	return flags;
8002be1a:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8002be1e:	10 9c       	mov	r12,r8
8002be20:	2f fd       	sub	sp,-4
8002be22:	e3 cd 80 80 	ldm	sp++,r7,pc

8002be26 <cpu_irq_restore>:
{
	return !(flags & AVR32_SR_GM_MASK);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
8002be26:	eb cd 40 80 	pushm	r7,lr
8002be2a:	1a 97       	mov	r7,sp
8002be2c:	20 1d       	sub	sp,4
8002be2e:	ef 4c ff fc 	st.w	r7[-4],r12
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
8002be32:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002be36:	e3 b8 00 00 	mtsr	0x0,r8
#endif
	barrier();
}
8002be3a:	2f fd       	sub	sp,-4
8002be3c:	e3 cd 80 80 	ldm	sp++,r7,pc

8002be40 <osc_priv_enable_osc0>:
 */
#include <osc.h>

#ifdef BOARD_OSC0_HZ
void osc_priv_enable_osc0(void)
{
8002be40:	eb cd 40 c0 	pushm	r6-r7,lr
8002be44:	1a 97       	mov	r7,sp
8002be46:	20 1d       	sub	sp,4
8002be48:	48 c6       	lddpc	r6,8002be78 <osc_priv_enable_osc0+0x38>
8002be4a:	1e 26       	rsub	r6,pc
	irqflags_t flags;

	flags = cpu_irq_save();
8002be4c:	cd ef       	rcall	8002be08 <cpu_irq_save>
8002be4e:	18 98       	mov	r8,r12
8002be50:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_SCIF.unlock = 0xaa000000 | AVR32_SCIF_OSCCTRL;
8002be54:	fe 78 08 00 	mov	r8,-63488
8002be58:	32 49       	mov	r9,36
8002be5a:	ea 19 aa 00 	orh	r9,0xaa00
8002be5e:	91 69       	st.w	r8[0x18],r9
	AVR32_SCIF.oscctrl[0] =
8002be60:	fe 78 08 00 	mov	r8,-63488
8002be64:	e0 79 0c 07 	mov	r9,68615
8002be68:	91 99       	st.w	r8[0x24],r9
			(OSC0_STARTUP_VALUE << AVR32_SCIF_OSCCTRL_STARTUP)
			| (OSC0_GAIN_VALUE << AVR32_SCIF_OSCCTRL_GAIN)
			| (OSC0_MODE_VALUE << AVR32_SCIF_OSCCTRL_MODE)
			| (1U << AVR32_SCIF_OSCCTRL_OSCEN);
	cpu_irq_restore(flags);
8002be6a:	ee fc ff fc 	ld.w	r12,r7[-4]
8002be6e:	cd cf       	rcall	8002be26 <cpu_irq_restore>
}
8002be70:	2f fd       	sub	sp,-4
8002be72:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002be76:	00 00       	add	r0,r0
8002be78:	80 02       	ld.sh	r2,r0[0x0]
8002be7a:	bc ce       	st.b	lr[0x4],lr

8002be7c <osc_priv_disable_osc0>:

void osc_priv_disable_osc0(void)
{
8002be7c:	eb cd 40 c0 	pushm	r6-r7,lr
8002be80:	1a 97       	mov	r7,sp
8002be82:	20 1d       	sub	sp,4
8002be84:	48 b6       	lddpc	r6,8002beb0 <osc_priv_disable_osc0+0x34>
8002be86:	1e 26       	rsub	r6,pc
	irqflags_t flags;

	flags = cpu_irq_save();
8002be88:	cc 0f       	rcall	8002be08 <cpu_irq_save>
8002be8a:	18 98       	mov	r8,r12
8002be8c:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_SCIF.unlock = 0xaa000000 | AVR32_SCIF_OSCCTRL;
8002be90:	fe 78 08 00 	mov	r8,-63488
8002be94:	32 49       	mov	r9,36
8002be96:	ea 19 aa 00 	orh	r9,0xaa00
8002be9a:	91 69       	st.w	r8[0x18],r9
	AVR32_SCIF.oscctrl[0] = 0;
8002be9c:	fe 78 08 00 	mov	r8,-63488
8002bea0:	30 09       	mov	r9,0
8002bea2:	91 99       	st.w	r8[0x24],r9
	cpu_irq_restore(flags);
8002bea4:	ee fc ff fc 	ld.w	r12,r7[-4]
8002bea8:	cb ff       	rcall	8002be26 <cpu_irq_restore>
}
8002beaa:	2f fd       	sub	sp,-4
8002beac:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002beb0:	80 02       	ld.sh	r2,r0[0x0]
8002beb2:	bd 0a       	ld.d	r10,lr

8002beb4 <osc_priv_enable_osc32>:
}
#endif /* BOARD_OSC0_HZ */

#ifdef BOARD_OSC32_HZ
void osc_priv_enable_osc32(void)
{
8002beb4:	eb cd 40 c0 	pushm	r6-r7,lr
8002beb8:	1a 97       	mov	r7,sp
8002beba:	20 1d       	sub	sp,4
8002bebc:	48 c6       	lddpc	r6,8002beec <osc_priv_enable_osc32+0x38>
8002bebe:	1e 26       	rsub	r6,pc
	irqflags_t flags;

	flags = cpu_irq_save();
8002bec0:	ca 4f       	rcall	8002be08 <cpu_irq_save>
8002bec2:	18 98       	mov	r8,r12
8002bec4:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_SCIF.unlock = 0xaa000000 | AVR32_SCIF_OSCCTRL32;
8002bec8:	fe 78 08 00 	mov	r8,-63488
8002becc:	34 c9       	mov	r9,76
8002bece:	ea 19 aa 00 	orh	r9,0xaa00
8002bed2:	91 69       	st.w	r8[0x18],r9
	AVR32_SCIF.oscctrl32 =
8002bed4:	fe 78 08 00 	mov	r8,-63488
8002bed8:	e2 69 01 01 	mov	r9,131329
8002bedc:	f1 49 00 4c 	st.w	r8[76],r9
			(OSC32_STARTUP_VALUE << AVR32_SCIF_OSCCTRL32_STARTUP)
			| (OSC32_MODE_VALUE << AVR32_SCIF_OSCCTRL32_MODE)
			| (1U << AVR32_SCIF_OSCCTRL32_OSC32EN);
	cpu_irq_restore(flags);
8002bee0:	ee fc ff fc 	ld.w	r12,r7[-4]
8002bee4:	ca 1f       	rcall	8002be26 <cpu_irq_restore>
}
8002bee6:	2f fd       	sub	sp,-4
8002bee8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002beec:	80 02       	ld.sh	r2,r0[0x0]
8002beee:	bd 42       	asr	r2,0x1c

8002bef0 <osc_priv_disable_osc32>:

void osc_priv_disable_osc32(void)
{
8002bef0:	eb cd 40 c0 	pushm	r6-r7,lr
8002bef4:	1a 97       	mov	r7,sp
8002bef6:	20 1d       	sub	sp,4
8002bef8:	48 c6       	lddpc	r6,8002bf28 <osc_priv_disable_osc32+0x38>
8002befa:	1e 26       	rsub	r6,pc
	irqflags_t flags;

	flags = cpu_irq_save();
8002befc:	c8 6f       	rcall	8002be08 <cpu_irq_save>
8002befe:	18 98       	mov	r8,r12
8002bf00:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_SCIF.unlock = 0xaa000000 | AVR32_SCIF_OSCCTRL32;
8002bf04:	fe 78 08 00 	mov	r8,-63488
8002bf08:	34 c9       	mov	r9,76
8002bf0a:	ea 19 aa 00 	orh	r9,0xaa00
8002bf0e:	91 69       	st.w	r8[0x18],r9
	AVR32_SCIF.oscctrl32 = 0;
8002bf10:	fe 78 08 00 	mov	r8,-63488
8002bf14:	30 09       	mov	r9,0
8002bf16:	f1 49 00 4c 	st.w	r8[76],r9
	cpu_irq_restore(flags);
8002bf1a:	ee fc ff fc 	ld.w	r12,r7[-4]
8002bf1e:	c8 4f       	rcall	8002be26 <cpu_irq_restore>
}
8002bf20:	2f fd       	sub	sp,-4
8002bf22:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002bf26:	00 00       	add	r0,r0
8002bf28:	80 02       	ld.sh	r2,r0[0x0]
8002bf2a:	bd 7e       	lsl	lr,0x1d

8002bf2c <osc_priv_enable_rc8m>:
#endif /* BOARD_OSC0_HZ */

void osc_priv_enable_rc8m(void)
{
8002bf2c:	eb cd 40 c0 	pushm	r6-r7,lr
8002bf30:	1a 97       	mov	r7,sp
8002bf32:	20 3d       	sub	sp,12
8002bf34:	49 d6       	lddpc	r6,8002bfa8 <osc_priv_enable_rc8m+0x7c>
8002bf36:	1e 26       	rsub	r6,pc
	irqflags_t flags;
	uint32_t   rccr8;
    uint32_t* calibration_bits = (uint32_t*)0x80800200;
8002bf38:	e0 68 02 00 	mov	r8,512
8002bf3c:	ea 18 80 80 	orh	r8,0x8080
8002bf40:	ef 48 ff fc 	st.w	r7[-4],r8
	/* Wait for the CALIB field to be updated from fuses after reset */
	while (!(AVR32_SCIF.rccr8 & AVR32_SCIF_RCCR8_FCD_MASK)) {
8002bf44:	fe 78 08 00 	mov	r8,-63488
8002bf48:	71 28       	ld.w	r8,r8[0x48]
8002bf4a:	e6 18 00 01 	andh	r8,0x1,COH
8002bf4e:	cf b0       	breq	8002bf44 <osc_priv_enable_rc8m+0x18>
		/* Do nothing */
	}

	/* Enable the oscillator without touching the CALIB and FCD fields */
	flags = cpu_irq_save();
8002bf50:	c5 cf       	rcall	8002be08 <cpu_irq_save>
8002bf52:	18 98       	mov	r8,r12
8002bf54:	ef 48 ff f4 	st.w	r7[-12],r8
	rccr8 = AVR32_SCIF.rccr8;
8002bf58:	fe 78 08 00 	mov	r8,-63488
8002bf5c:	71 28       	ld.w	r8,r8[0x48]
8002bf5e:	ef 48 ff f8 	st.w	r7[-8],r8
	rccr8 &= AVR32_SCIF_RCCR8_FCD_MASK | ((*calibration_bits)&AVR32_SCIF_RCCR8_CALIB_MASK);
8002bf62:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002bf66:	70 08       	ld.w	r8,r8[0x0]
8002bf68:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
8002bf6c:	b1 a8       	sbr	r8,0x10
8002bf6e:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002bf72:	f3 e8 00 08 	and	r8,r9,r8
8002bf76:	ef 48 ff f8 	st.w	r7[-8],r8
	rccr8 |= 1U << AVR32_SCIF_RCOSC8_EN;
8002bf7a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002bf7e:	b9 a8       	sbr	r8,0x18
8002bf80:	ef 48 ff f8 	st.w	r7[-8],r8
	AVR32_SCIF.unlock = 0xaa000000 | AVR32_SCIF_RCCR8;
8002bf84:	fe 78 08 00 	mov	r8,-63488
8002bf88:	34 89       	mov	r9,72
8002bf8a:	ea 19 aa 00 	orh	r9,0xaa00
8002bf8e:	91 69       	st.w	r8[0x18],r9
	AVR32_SCIF.rccr8 = rccr8;
8002bf90:	fe 78 08 00 	mov	r8,-63488
8002bf94:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002bf98:	f1 49 00 48 	st.w	r8[72],r9
	cpu_irq_restore(flags);
8002bf9c:	ee fc ff f4 	ld.w	r12,r7[-12]
8002bfa0:	c4 3f       	rcall	8002be26 <cpu_irq_restore>
}
8002bfa2:	2f dd       	sub	sp,-12
8002bfa4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002bfa8:	80 02       	ld.sh	r2,r0[0x0]
8002bfaa:	bd ba       	sbr	r10,0x1d

8002bfac <osc_priv_disable_rc8m>:

void osc_priv_disable_rc8m(void)
{
8002bfac:	eb cd 40 c0 	pushm	r6-r7,lr
8002bfb0:	1a 97       	mov	r7,sp
8002bfb2:	20 2d       	sub	sp,8
8002bfb4:	49 36       	lddpc	r6,8002c000 <osc_priv_disable_rc8m+0x54>
8002bfb6:	1e 26       	rsub	r6,pc
	irqflags_t flags;
	uint32_t   rccr8;

	/* Disable the oscillator without touching the CALIB and FCD fields */
	flags = cpu_irq_save();
8002bfb8:	c2 8f       	rcall	8002be08 <cpu_irq_save>
8002bfba:	18 98       	mov	r8,r12
8002bfbc:	ef 48 ff f8 	st.w	r7[-8],r8
	rccr8 = AVR32_SCIF.rccr8;
8002bfc0:	fe 78 08 00 	mov	r8,-63488
8002bfc4:	71 28       	ld.w	r8,r8[0x48]
8002bfc6:	ef 48 ff fc 	st.w	r7[-4],r8
	rccr8 &= AVR32_SCIF_RCCR8_FCD_MASK | AVR32_SCIF_RCCR8_CALIB_MASK;
8002bfca:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002bfce:	e4 18 00 01 	andh	r8,0x1
8002bfd2:	e0 18 00 ff 	andl	r8,0xff
8002bfd6:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_SCIF.unlock = 0xaa000000 | AVR32_SCIF_RCCR8;
8002bfda:	fe 78 08 00 	mov	r8,-63488
8002bfde:	34 89       	mov	r9,72
8002bfe0:	ea 19 aa 00 	orh	r9,0xaa00
8002bfe4:	91 69       	st.w	r8[0x18],r9
	AVR32_SCIF.rccr8 = rccr8;
8002bfe6:	fe 78 08 00 	mov	r8,-63488
8002bfea:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002bfee:	f1 49 00 48 	st.w	r8[72],r9
	cpu_irq_restore(flags);
8002bff2:	ee fc ff f8 	ld.w	r12,r7[-8]
8002bff6:	c1 8f       	rcall	8002be26 <cpu_irq_restore>
}
8002bff8:	2f ed       	sub	sp,-8
8002bffa:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002bffe:	00 00       	add	r0,r0
8002c000:	80 02       	ld.sh	r2,r0[0x0]
8002c002:	be 3a       	st.h	pc[0x6],r10

8002c004 <osc_priv_enable_rc120m>:

void osc_priv_enable_rc120m(void)
{
8002c004:	eb cd 40 c0 	pushm	r6-r7,lr
8002c008:	1a 97       	mov	r7,sp
8002c00a:	20 1d       	sub	sp,4
8002c00c:	48 c6       	lddpc	r6,8002c03c <osc_priv_enable_rc120m+0x38>
8002c00e:	1e 26       	rsub	r6,pc
	irqflags_t flags;

	flags = cpu_irq_save();
8002c010:	cf ce       	rcall	8002be08 <cpu_irq_save>
8002c012:	18 98       	mov	r8,r12
8002c014:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_SCIF.unlock = 0xaa000000 | AVR32_SCIF_RC120MCR;
8002c018:	fe 78 08 00 	mov	r8,-63488
8002c01c:	35 89       	mov	r9,88
8002c01e:	ea 19 aa 00 	orh	r9,0xaa00
8002c022:	91 69       	st.w	r8[0x18],r9
	AVR32_SCIF.rc120mcr = 1U << AVR32_SCIF_RC120MCR_EN;
8002c024:	fe 78 08 00 	mov	r8,-63488
8002c028:	30 19       	mov	r9,1
8002c02a:	f1 49 00 58 	st.w	r8[88],r9
	cpu_irq_restore(flags);
8002c02e:	ee fc ff fc 	ld.w	r12,r7[-4]
8002c032:	cf ae       	rcall	8002be26 <cpu_irq_restore>
}
8002c034:	2f fd       	sub	sp,-4
8002c036:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002c03a:	00 00       	add	r0,r0
8002c03c:	80 02       	ld.sh	r2,r0[0x0]
8002c03e:	be 92       	st.b	pc[0x1],r2

8002c040 <osc_priv_disable_rc120m>:

void osc_priv_disable_rc120m(void)
{
8002c040:	eb cd 40 c0 	pushm	r6-r7,lr
8002c044:	1a 97       	mov	r7,sp
8002c046:	20 1d       	sub	sp,4
8002c048:	48 c6       	lddpc	r6,8002c078 <osc_priv_disable_rc120m+0x38>
8002c04a:	1e 26       	rsub	r6,pc
	irqflags_t flags;

	flags = cpu_irq_save();
8002c04c:	cd ee       	rcall	8002be08 <cpu_irq_save>
8002c04e:	18 98       	mov	r8,r12
8002c050:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_SCIF.unlock = 0xaa000000 | AVR32_SCIF_RC120MCR;
8002c054:	fe 78 08 00 	mov	r8,-63488
8002c058:	35 89       	mov	r9,88
8002c05a:	ea 19 aa 00 	orh	r9,0xaa00
8002c05e:	91 69       	st.w	r8[0x18],r9
	AVR32_SCIF.rc120mcr = 0;
8002c060:	fe 78 08 00 	mov	r8,-63488
8002c064:	30 09       	mov	r9,0
8002c066:	f1 49 00 58 	st.w	r8[88],r9
	cpu_irq_restore(flags);
8002c06a:	ee fc ff fc 	ld.w	r12,r7[-4]
8002c06e:	cd ce       	rcall	8002be26 <cpu_irq_restore>
}
8002c070:	2f fd       	sub	sp,-4
8002c072:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002c076:	00 00       	add	r0,r0
8002c078:	80 02       	ld.sh	r2,r0[0x0]
8002c07a:	be ce       	st.b	pc[0x4],lr

8002c07c <cpu_irq_save>:
#endif

typedef uint32_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
8002c07c:	eb cd 40 80 	pushm	r7,lr
8002c080:	1a 97       	mov	r7,sp
8002c082:	20 1d       	sub	sp,4
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8002c084:	e1 b8 00 00 	mfsr	r8,0x0
8002c088:	ef 48 ff fc 	st.w	r7[-4],r8
	cpu_irq_disable();
8002c08c:	d3 03       	ssrf	0x10

	return flags;
8002c08e:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8002c092:	10 9c       	mov	r12,r8
8002c094:	2f fd       	sub	sp,-4
8002c096:	e3 cd 80 80 	ldm	sp++,r7,pc

8002c09a <cpu_irq_restore>:
{
	return !(flags & AVR32_SR_GM_MASK);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
8002c09a:	eb cd 40 80 	pushm	r7,lr
8002c09e:	1a 97       	mov	r7,sp
8002c0a0:	20 1d       	sub	sp,4
8002c0a2:	ef 4c ff fc 	st.w	r7[-4],r12
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
8002c0a6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c0aa:	e3 b8 00 00 	mtsr	0x0,r8
#endif
	barrier();
}
8002c0ae:	2f fd       	sub	sp,-4
8002c0b0:	e3 cd 80 80 	ldm	sp++,r7,pc

8002c0b4 <pll_config_write>:
#include <avr32/io.h>
#include <compiler.h>
#include <pll.h>

void pll_config_write(const struct pll_config *cfg, unsigned int pll_id)
{
8002c0b4:	eb cd 40 c0 	pushm	r6-r7,lr
8002c0b8:	1a 97       	mov	r7,sp
8002c0ba:	20 3d       	sub	sp,12
8002c0bc:	49 26       	lddpc	r6,8002c104 <pll_config_write+0x50>
8002c0be:	1e 26       	rsub	r6,pc
8002c0c0:	ef 4c ff f8 	st.w	r7[-8],r12
8002c0c4:	ef 4b ff f4 	st.w	r7[-12],r11
	irqflags_t flags;

	Assert(pll_id < NR_PLLS);

	flags = cpu_irq_save();
8002c0c8:	cd af       	rcall	8002c07c <cpu_irq_save>
8002c0ca:	18 98       	mov	r8,r12
8002c0cc:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_SCIF.unlock = 0xaa000000 | (AVR32_SCIF_PLL + (4 * pll_id));
8002c0d0:	fe 78 08 00 	mov	r8,-63488
8002c0d4:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002c0d8:	2f 99       	sub	r9,-7
8002c0da:	a3 69       	lsl	r9,0x2
8002c0dc:	ea 19 aa 00 	orh	r9,0xaa00
8002c0e0:	91 69       	st.w	r8[0x18],r9
	AVR32_SCIF.pll[pll_id] = cfg->ctrl;
8002c0e2:	fe 78 08 00 	mov	r8,-63488
8002c0e6:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002c0ea:	ee fa ff f8 	ld.w	r10,r7[-8]
8002c0ee:	74 0a       	ld.w	r10,r10[0x0]
8002c0f0:	2f 99       	sub	r9,-7
8002c0f2:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	cpu_irq_restore(flags);
8002c0f6:	ee fc ff fc 	ld.w	r12,r7[-4]
8002c0fa:	cd 0f       	rcall	8002c09a <cpu_irq_restore>
}
8002c0fc:	2f dd       	sub	sp,-12
8002c0fe:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002c102:	00 00       	add	r0,r0
8002c104:	80 02       	ld.sh	r2,r0[0x0]
8002c106:	bf 42       	asr	r2,0x1e

8002c108 <pll_enable>:

void pll_enable(const struct pll_config *cfg, unsigned int pll_id)
{
8002c108:	eb cd 40 c0 	pushm	r6-r7,lr
8002c10c:	1a 97       	mov	r7,sp
8002c10e:	20 3d       	sub	sp,12
8002c110:	49 26       	lddpc	r6,8002c158 <pll_enable+0x50>
8002c112:	1e 26       	rsub	r6,pc
8002c114:	ef 4c ff f8 	st.w	r7[-8],r12
8002c118:	ef 4b ff f4 	st.w	r7[-12],r11
	irqflags_t flags;

	Assert(pll_id < NR_PLLS);

	flags = cpu_irq_save();
8002c11c:	cb 0f       	rcall	8002c07c <cpu_irq_save>
8002c11e:	18 98       	mov	r8,r12
8002c120:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_SCIF.unlock = 0xaa000000 | (AVR32_SCIF_PLL + (4 * pll_id));
8002c124:	fe 78 08 00 	mov	r8,-63488
8002c128:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002c12c:	2f 99       	sub	r9,-7
8002c12e:	a3 69       	lsl	r9,0x2
8002c130:	ea 19 aa 00 	orh	r9,0xaa00
8002c134:	91 69       	st.w	r8[0x18],r9
	AVR32_SCIF.pll[pll_id] = cfg->ctrl | (1U << AVR32_SCIF_PLLEN);
8002c136:	fe 78 08 00 	mov	r8,-63488
8002c13a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002c13e:	ee fa ff f8 	ld.w	r10,r7[-8]
8002c142:	74 0a       	ld.w	r10,r10[0x0]
8002c144:	a1 aa       	sbr	r10,0x0
8002c146:	2f 99       	sub	r9,-7
8002c148:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	cpu_irq_restore(flags);
8002c14c:	ee fc ff fc 	ld.w	r12,r7[-4]
8002c150:	ca 5f       	rcall	8002c09a <cpu_irq_restore>
}
8002c152:	2f dd       	sub	sp,-12
8002c154:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002c158:	80 02       	ld.sh	r2,r0[0x0]
8002c15a:	bf 96       	lsr	r6,0x1f

8002c15c <pll_disable>:

void pll_disable(unsigned int pll_id)
{
8002c15c:	eb cd 40 c0 	pushm	r6-r7,lr
8002c160:	1a 97       	mov	r7,sp
8002c162:	20 2d       	sub	sp,8
8002c164:	49 06       	lddpc	r6,8002c1a4 <pll_disable+0x48>
8002c166:	1e 26       	rsub	r6,pc
8002c168:	ef 4c ff f8 	st.w	r7[-8],r12
	irqflags_t flags;

	Assert(pll_id < NR_PLLS);

	flags = cpu_irq_save();
8002c16c:	c8 8f       	rcall	8002c07c <cpu_irq_save>
8002c16e:	18 98       	mov	r8,r12
8002c170:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_SCIF.unlock = 0xaa000000 | (AVR32_SCIF_PLL + (4 * pll_id));
8002c174:	fe 78 08 00 	mov	r8,-63488
8002c178:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002c17c:	2f 99       	sub	r9,-7
8002c17e:	a3 69       	lsl	r9,0x2
8002c180:	ea 19 aa 00 	orh	r9,0xaa00
8002c184:	91 69       	st.w	r8[0x18],r9
	AVR32_SCIF.pll[pll_id] = 0;
8002c186:	fe 78 08 00 	mov	r8,-63488
8002c18a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002c18e:	2f 99       	sub	r9,-7
8002c190:	30 0a       	mov	r10,0
8002c192:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	cpu_irq_restore(flags);
8002c196:	ee fc ff fc 	ld.w	r12,r7[-4]
8002c19a:	c8 0f       	rcall	8002c09a <cpu_irq_restore>
}
8002c19c:	2f ed       	sub	sp,-8
8002c19e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002c1a2:	00 00       	add	r0,r0
8002c1a4:	80 02       	ld.sh	r2,r0[0x0]
8002c1a6:	bf ea       	*unknown*

8002c1a8 <cpu_irq_save>:
#endif

typedef uint32_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
8002c1a8:	eb cd 40 80 	pushm	r7,lr
8002c1ac:	1a 97       	mov	r7,sp
8002c1ae:	20 1d       	sub	sp,4
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8002c1b0:	e1 b8 00 00 	mfsr	r8,0x0
8002c1b4:	ef 48 ff fc 	st.w	r7[-4],r8
	cpu_irq_disable();
8002c1b8:	d3 03       	ssrf	0x10

	return flags;
8002c1ba:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8002c1be:	10 9c       	mov	r12,r8
8002c1c0:	2f fd       	sub	sp,-4
8002c1c2:	e3 cd 80 80 	ldm	sp++,r7,pc

8002c1c6 <cpu_irq_restore>:
{
	return !(flags & AVR32_SR_GM_MASK);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
8002c1c6:	eb cd 40 80 	pushm	r7,lr
8002c1ca:	1a 97       	mov	r7,sp
8002c1cc:	20 1d       	sub	sp,4
8002c1ce:	ef 4c ff fc 	st.w	r7[-4],r12
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
8002c1d2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c1d6:	e3 b8 00 00 	mtsr	0x0,r8
#endif
	barrier();
}
8002c1da:	2f fd       	sub	sp,-4
8002c1dc:	e3 cd 80 80 	ldm	sp++,r7,pc

8002c1e0 <osc_enable>:
extern void osc_priv_enable_rc120m(void);
extern void osc_priv_disable_rc120m(void);
extern bool osc_priv_rc120m_is_ready(void);

static inline void osc_enable(uint8_t id)
{
8002c1e0:	eb cd 40 c0 	pushm	r6-r7,lr
8002c1e4:	1a 97       	mov	r7,sp
8002c1e6:	20 1d       	sub	sp,4
8002c1e8:	49 16       	lddpc	r6,8002c22c <osc_enable+0x4c>
8002c1ea:	1e 26       	rsub	r6,pc
8002c1ec:	18 98       	mov	r8,r12
8002c1ee:	ef 68 ff fc 	st.b	r7[-4],r8
	switch (id) {
8002c1f2:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8002c1f6:	58 28       	cp.w	r8,2
8002c1f8:	c1 10       	breq	8002c21a <osc_enable+0x3a>
8002c1fa:	e0 89 00 05 	brgt	8002c204 <osc_enable+0x24>
8002c1fe:	58 08       	cp.w	r8,0
8002c200:	c0 70       	breq	8002c20e <osc_enable+0x2e>
8002c202:	c1 18       	rjmp	8002c224 <osc_enable+0x44>
8002c204:	58 38       	cp.w	r8,3
8002c206:	c0 70       	breq	8002c214 <osc_enable+0x34>
8002c208:	58 48       	cp.w	r8,4
8002c20a:	c0 b0       	breq	8002c220 <osc_enable+0x40>
8002c20c:	c0 c8       	rjmp	8002c224 <osc_enable+0x44>
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		osc_priv_enable_osc0();
8002c20e:	f0 16 01 d9 	mcall	r6[1892]
		break;
8002c212:	c0 98       	rjmp	8002c224 <osc_enable+0x44>
		break;
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		osc_priv_enable_osc32();
8002c214:	f0 16 01 d0 	mcall	r6[1856]
		break;
8002c218:	c0 68       	rjmp	8002c224 <osc_enable+0x44>
#endif

	case OSC_ID_RC8M:
		osc_priv_enable_rc8m();
8002c21a:	f0 16 01 64 	mcall	r6[1424]
		break;
8002c21e:	c0 38       	rjmp	8002c224 <osc_enable+0x44>

	case OSC_ID_RC120M:
		osc_priv_enable_rc120m();
8002c220:	f0 16 01 8f 	mcall	r6[1596]

	default:
		/* unhandled_case(id); */
		break;
	}
}
8002c224:	2f fd       	sub	sp,-4
8002c226:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002c22a:	00 00       	add	r0,r0
8002c22c:	80 02       	ld.sh	r2,r0[0x0]
8002c22e:	c0 6e       	rcall	8002be3a <cpu_irq_restore+0x14>

8002c230 <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint8_t id)
{
8002c230:	eb cd 40 80 	pushm	r7,lr
8002c234:	1a 97       	mov	r7,sp
8002c236:	20 1d       	sub	sp,4
8002c238:	18 98       	mov	r8,r12
8002c23a:	ef 68 ff fc 	st.b	r7[-4],r8
	switch (id) {
8002c23e:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8002c242:	58 38       	cp.w	r8,3
8002c244:	c1 50       	breq	8002c26e <osc_is_ready+0x3e>
8002c246:	e0 89 00 07 	brgt	8002c254 <osc_is_ready+0x24>
8002c24a:	58 08       	cp.w	r8,0
8002c24c:	c0 90       	breq	8002c25e <osc_is_ready+0x2e>
8002c24e:	58 28       	cp.w	r8,2
8002c250:	c1 70       	breq	8002c27e <osc_is_ready+0x4e>
8002c252:	c2 88       	rjmp	8002c2a2 <osc_is_ready+0x72>
8002c254:	58 48       	cp.w	r8,4
8002c256:	c1 c0       	breq	8002c28e <osc_is_ready+0x5e>
8002c258:	58 58       	cp.w	r8,5
8002c25a:	c2 20       	breq	8002c29e <osc_is_ready+0x6e>
8002c25c:	c2 38       	rjmp	8002c2a2 <osc_is_ready+0x72>
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return !!(AVR32_SCIF.pclksr & (1 << AVR32_SCIF_OSC0RDY));
8002c25e:	fe 78 08 00 	mov	r8,-63488
8002c262:	70 58       	ld.w	r8,r8[0x14]
8002c264:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002c268:	5f 18       	srne	r8
8002c26a:	5c 58       	castu.b	r8
8002c26c:	c1 c8       	rjmp	8002c2a4 <osc_is_ready+0x74>
		return !!(AVR32_SCIF.pclksr & (1 << AVR32_SCIF_OSC1RDY));
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		return !!(AVR32_SCIF.pclksr & (1 << AVR32_SCIF_OSC32RDY));
8002c26e:	fe 78 08 00 	mov	r8,-63488
8002c272:	70 58       	ld.w	r8,r8[0x14]
8002c274:	e2 18 00 04 	andl	r8,0x4,COH
8002c278:	5f 18       	srne	r8
8002c27a:	5c 58       	castu.b	r8
8002c27c:	c1 48       	rjmp	8002c2a4 <osc_is_ready+0x74>
#endif

	case OSC_ID_RC8M:
		return !!(AVR32_SCIF.pclksr & (1U << AVR32_SCIF_RCOSC8MRDY));
8002c27e:	fe 78 08 00 	mov	r8,-63488
8002c282:	70 58       	ld.w	r8,r8[0x14]
8002c284:	e2 18 00 08 	andl	r8,0x8,COH
8002c288:	5f 18       	srne	r8
8002c28a:	5c 58       	castu.b	r8
8002c28c:	c0 c8       	rjmp	8002c2a4 <osc_is_ready+0x74>

	case OSC_ID_RC120M:
		return !!(AVR32_SCIF.rc120mcr & (1 << AVR32_SCIF_RC120MCR_EN));
8002c28e:	fe 78 08 00 	mov	r8,-63488
8002c292:	71 68       	ld.w	r8,r8[0x58]
8002c294:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002c298:	5f 18       	srne	r8
8002c29a:	5c 58       	castu.b	r8
8002c29c:	c0 48       	rjmp	8002c2a4 <osc_is_ready+0x74>

	case OSC_ID_RCSYS:
		/* RCSYS is always ready */
		return true;
8002c29e:	30 18       	mov	r8,1
8002c2a0:	c0 28       	rjmp	8002c2a4 <osc_is_ready+0x74>

	default:
		/* unhandled_case(id); */
		return false;
8002c2a2:	30 08       	mov	r8,0
	}
}
8002c2a4:	10 9c       	mov	r12,r8
8002c2a6:	2f fd       	sub	sp,-4
8002c2a8:	e3 cd 80 80 	ldm	sp++,r7,pc

8002c2ac <osc_get_rate>:
/**
 * \todo RC8M may run at either 8 MHz or 1 MHz. Currently, we assume
 * it's always running at 8 MHz.
 */
static inline uint32_t osc_get_rate(uint8_t id)
{
8002c2ac:	eb cd 40 80 	pushm	r7,lr
8002c2b0:	1a 97       	mov	r7,sp
8002c2b2:	20 1d       	sub	sp,4
8002c2b4:	18 98       	mov	r8,r12
8002c2b6:	ef 68 ff fc 	st.b	r7[-4],r8
	switch (id) {
8002c2ba:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8002c2be:	58 38       	cp.w	r8,3
8002c2c0:	c1 20       	breq	8002c2e4 <osc_get_rate+0x38>
8002c2c2:	e0 89 00 07 	brgt	8002c2d0 <osc_get_rate+0x24>
8002c2c6:	58 08       	cp.w	r8,0
8002c2c8:	c0 90       	breq	8002c2da <osc_get_rate+0x2e>
8002c2ca:	58 28       	cp.w	r8,2
8002c2cc:	c0 f0       	breq	8002c2ea <osc_get_rate+0x3e>
8002c2ce:	c1 b8       	rjmp	8002c304 <osc_get_rate+0x58>
8002c2d0:	58 48       	cp.w	r8,4
8002c2d2:	c1 10       	breq	8002c2f4 <osc_get_rate+0x48>
8002c2d4:	58 58       	cp.w	r8,5
8002c2d6:	c1 40       	breq	8002c2fe <osc_get_rate+0x52>
8002c2d8:	c1 68       	rjmp	8002c304 <osc_get_rate+0x58>
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return BOARD_OSC0_HZ;
8002c2da:	e0 68 24 00 	mov	r8,9216
8002c2de:	ea 18 00 f4 	orh	r8,0xf4
8002c2e2:	c1 28       	rjmp	8002c306 <osc_get_rate+0x5a>
		return BOARD_OSC1_HZ;
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		return BOARD_OSC32_HZ;
8002c2e4:	e0 68 80 00 	mov	r8,32768
8002c2e8:	c0 f8       	rjmp	8002c306 <osc_get_rate+0x5a>
#endif

	case OSC_ID_RC8M:
		return OSC_RC8M_NOMINAL_HZ;
8002c2ea:	e0 68 12 00 	mov	r8,4608
8002c2ee:	ea 18 00 7a 	orh	r8,0x7a
8002c2f2:	c0 a8       	rjmp	8002c306 <osc_get_rate+0x5a>

	case OSC_ID_RC120M:
		return OSC_RC120M_NOMINAL_HZ;
8002c2f4:	e0 68 0e 00 	mov	r8,3584
8002c2f8:	ea 18 07 27 	orh	r8,0x727
8002c2fc:	c0 58       	rjmp	8002c306 <osc_get_rate+0x5a>

	case OSC_ID_RCSYS:
		return OSC_RCSYS_NOMINAL_HZ;
8002c2fe:	e0 78 c1 38 	mov	r8,115000
8002c302:	c0 28       	rjmp	8002c306 <osc_get_rate+0x5a>

	default:
		/* unhandled_case(id); */
		return 0;
8002c304:	30 08       	mov	r8,0
	}
}
8002c306:	10 9c       	mov	r12,r8
8002c308:	2f fd       	sub	sp,-4
8002c30a:	e3 cd 80 80 	ldm	sp++,r7,pc

8002c30e <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
8002c30e:	eb cd 40 c0 	pushm	r6-r7,lr
8002c312:	1a 97       	mov	r7,sp
8002c314:	20 1d       	sub	sp,4
8002c316:	48 96       	lddpc	r6,8002c338 <osc_wait_ready+0x2a>
8002c318:	1e 26       	rsub	r6,pc
8002c31a:	18 98       	mov	r8,r12
8002c31c:	ef 68 ff fc 	st.b	r7[-4],r8
	while (!osc_is_ready(id)) {
8002c320:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8002c324:	10 9c       	mov	r12,r8
8002c326:	c8 5f       	rcall	8002c230 <osc_is_ready>
8002c328:	18 98       	mov	r8,r12
8002c32a:	ec 18 00 01 	eorl	r8,0x1
8002c32e:	5c 58       	castu.b	r8
8002c330:	cf 81       	brne	8002c320 <osc_wait_ready+0x12>
		/* Do nothing */
	}
}
8002c332:	2f fd       	sub	sp,-4
8002c334:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002c338:	80 02       	ld.sh	r2,r0[0x0]
8002c33a:	c1 9c       	rcall	8002c36c <pll_config_init>

8002c33c <pll_config_set_option>:
			* CONFIG_PLL##pll_id##_MUL)                            \
			/ CONFIG_PLL##pll_id##_DIV)

static inline void pll_config_set_option(struct pll_config *cfg,
		unsigned int option)
{
8002c33c:	eb cd 40 80 	pushm	r7,lr
8002c340:	1a 97       	mov	r7,sp
8002c342:	20 2d       	sub	sp,8
8002c344:	ef 4c ff fc 	st.w	r7[-4],r12
8002c348:	ef 4b ff f8 	st.w	r7[-8],r11
	Assert(option < PLL_NR_OPTIONS);

	cfg->ctrl |= 1U << (AVR32_SCIF_PLLOPT + option);
8002c34c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c350:	70 09       	ld.w	r9,r8[0x0]
8002c352:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c356:	2f d8       	sub	r8,-3
8002c358:	30 1a       	mov	r10,1
8002c35a:	f4 08 09 48 	lsl	r8,r10,r8
8002c35e:	10 49       	or	r9,r8
8002c360:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c364:	91 09       	st.w	r8[0x0],r9
}
8002c366:	2f ed       	sub	sp,-8
8002c368:	e3 cd 80 80 	ldm	sp++,r7,pc

8002c36c <pll_config_init>:
 * The PLL options #PLL_OPT_VCO_RANGE_LOW and #PLL_OPT_OUTPUT_DIV will
 * be set automatically based on the calculated target frequency.
 */
static inline void pll_config_init(struct pll_config *cfg,
		enum pll_source src, unsigned int div, unsigned int mul)
{
8002c36c:	eb cd 40 c0 	pushm	r6-r7,lr
8002c370:	1a 97       	mov	r7,sp
8002c372:	20 5d       	sub	sp,20
8002c374:	4b 46       	lddpc	r6,8002c444 <pll_config_init+0xd8>
8002c376:	1e 26       	rsub	r6,pc
8002c378:	ef 4c ff f8 	st.w	r7[-8],r12
8002c37c:	ef 4b ff f4 	st.w	r7[-12],r11
8002c380:	ef 4a ff f0 	st.w	r7[-16],r10
8002c384:	ef 49 ff ec 	st.w	r7[-20],r9
	uint32_t vco_hz;

	Assert(src < PLL_NR_SOURCES);

	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(src) * mul;
8002c388:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002c38c:	5c 58       	castu.b	r8
8002c38e:	10 9c       	mov	r12,r8
8002c390:	c8 ef       	rcall	8002c2ac <osc_get_rate>
8002c392:	18 99       	mov	r9,r12
8002c394:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002c398:	f2 08 02 48 	mul	r8,r9,r8
8002c39c:	ef 48 ff fc 	st.w	r7[-4],r8
	vco_hz /= div;
8002c3a0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c3a4:	ee f9 ff f0 	ld.w	r9,r7[-16]
8002c3a8:	f0 09 0d 08 	divu	r8,r8,r9
8002c3ac:	ef 48 ff fc 	st.w	r7[-4],r8
	Assert(vco_hz >= PLL_MIN_HZ);
	Assert(vco_hz <= PLL_MAX_HZ);

	cfg->ctrl = 0;
8002c3b0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c3b4:	30 09       	mov	r9,0
8002c3b6:	91 09       	st.w	r8[0x0],r9

	/* Bring the internal VCO frequency up to the minimum value */
	if ((vco_hz < PLL_MIN_HZ * 2) && (mul <= 8)) {
8002c3b8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c3bc:	e0 69 b3 ff 	mov	r9,46079
8002c3c0:	ea 19 04 c4 	orh	r9,0x4c4
8002c3c4:	12 38       	cp.w	r8,r9
8002c3c6:	e0 8b 00 15 	brhi	8002c3f0 <pll_config_init+0x84>
8002c3ca:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002c3ce:	58 88       	cp.w	r8,8
8002c3d0:	e0 8b 00 10 	brhi	8002c3f0 <pll_config_init+0x84>
		mul *= 2;
8002c3d4:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002c3d8:	a1 78       	lsl	r8,0x1
8002c3da:	ef 48 ff ec 	st.w	r7[-20],r8
		vco_hz *= 2;
8002c3de:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c3e2:	a1 78       	lsl	r8,0x1
8002c3e4:	ef 48 ff fc 	st.w	r7[-4],r8
		pll_config_set_option(cfg, PLL_OPT_OUTPUT_DIV);
8002c3e8:	30 1b       	mov	r11,1
8002c3ea:	ee fc ff f8 	ld.w	r12,r7[-8]
8002c3ee:	ca 7f       	rcall	8002c33c <pll_config_set_option>
	}

	/* Set VCO frequency range according to calculated value */
	if (vco_hz < PLL_VCO_LOW_THRESHOLD)
8002c3f0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c3f4:	e0 69 fe 7f 	mov	r9,65151
8002c3f8:	ea 19 0a 21 	orh	r9,0xa21
8002c3fc:	12 38       	cp.w	r8,r9
8002c3fe:	e0 8b 00 06 	brhi	8002c40a <pll_config_init+0x9e>
		pll_config_set_option(cfg, PLL_OPT_VCO_RANGE_LOW);
8002c402:	30 0b       	mov	r11,0
8002c404:	ee fc ff f8 	ld.w	r12,r7[-8]
8002c408:	c9 af       	rcall	8002c33c <pll_config_set_option>

	Assert(mul > 2 && mul <= 16);
	Assert(div > 0 && div <= 15);

	cfg->ctrl |= ((mul - 1) << AVR32_SCIF_PLLMUL)
8002c40a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c40e:	70 09       	ld.w	r9,r8[0x0]
8002c410:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002c414:	20 18       	sub	r8,1
8002c416:	f0 0a 15 10 	lsl	r10,r8,0x10
		| (div << AVR32_SCIF_PLLDIV)
8002c41a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002c41e:	a9 68       	lsl	r8,0x8
		| (PLL_MAX_STARTUP_CYCLES << AVR32_SCIF_PLLCOUNT)
8002c420:	10 4a       	or	r10,r8
		| (src << AVR32_SCIF_PLLOSC);
8002c422:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002c426:	a1 78       	lsl	r8,0x1
		pll_config_set_option(cfg, PLL_OPT_VCO_RANGE_LOW);

	Assert(mul > 2 && mul <= 16);
	Assert(div > 0 && div <= 15);

	cfg->ctrl |= ((mul - 1) << AVR32_SCIF_PLLMUL)
8002c428:	f5 e8 10 08 	or	r8,r10,r8
8002c42c:	f3 e8 10 08 	or	r8,r9,r8
8002c430:	10 99       	mov	r9,r8
8002c432:	ea 19 3f 00 	orh	r9,0x3f00
8002c436:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c43a:	91 09       	st.w	r8[0x0],r9
		| (div << AVR32_SCIF_PLLDIV)
		| (PLL_MAX_STARTUP_CYCLES << AVR32_SCIF_PLLCOUNT)
		| (src << AVR32_SCIF_PLLOSC);
}
8002c43c:	2f bd       	sub	sp,-20
8002c43e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002c442:	00 00       	add	r0,r0
8002c444:	80 02       	ld.sh	r2,r0[0x0]
8002c446:	c1 fa       	rjmp	8002c084 <cpu_irq_save+0x8>

8002c448 <pll_is_locked>:
extern void pll_config_write(const struct pll_config *cfg, unsigned int pll_id);
extern void pll_enable(const struct pll_config *cfg, unsigned int pll_id);
extern void pll_disable(unsigned int pll_id);

static inline bool pll_is_locked(unsigned int pll_id)
{
8002c448:	eb cd 40 80 	pushm	r7,lr
8002c44c:	1a 97       	mov	r7,sp
8002c44e:	20 1d       	sub	sp,4
8002c450:	ef 4c ff fc 	st.w	r7[-4],r12
	Assert(pll_id < NR_PLLS);

	return !!(AVR32_SCIF.pclksr & (1U << (AVR32_SCIF_PLL0_LOCK + pll_id)));
8002c454:	fe 78 08 00 	mov	r8,-63488
8002c458:	70 59       	ld.w	r9,r8[0x14]
8002c45a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c45e:	2f c8       	sub	r8,-4
8002c460:	30 1a       	mov	r10,1
8002c462:	f4 08 09 48 	lsl	r8,r10,r8
8002c466:	f3 e8 00 08 	and	r8,r9,r8
8002c46a:	5f 18       	srne	r8
8002c46c:	5c 58       	castu.b	r8
}
8002c46e:	10 9c       	mov	r12,r8
8002c470:	2f fd       	sub	sp,-4
8002c472:	e3 cd 80 80 	ldm	sp++,r7,pc

8002c476 <pll_enable_source_sync>:

static inline void pll_enable_source_sync(enum pll_source src)
{
8002c476:	eb cd 40 c0 	pushm	r6-r7,lr
8002c47a:	1a 97       	mov	r7,sp
8002c47c:	20 1d       	sub	sp,4
8002c47e:	49 06       	lddpc	r6,8002c4bc <pll_enable_source_sync+0x46>
8002c480:	1e 26       	rsub	r6,pc
8002c482:	ef 4c ff fc 	st.w	r7[-4],r12
	switch (src) {
8002c486:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c48a:	58 18       	cp.w	r8,1
8002c48c:	e0 88 00 05 	brls	8002c496 <pll_enable_source_sync+0x20>
8002c490:	58 28       	cp.w	r8,2
8002c492:	c0 d0       	breq	8002c4ac <pll_enable_source_sync+0x36>
8002c494:	c1 08       	rjmp	8002c4b4 <pll_enable_source_sync+0x3e>
	case PLL_SRC_OSC0: /* Fall through */
	case PLL_SRC_OSC1:
		osc_enable(src);
8002c496:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c49a:	5c 58       	castu.b	r8
8002c49c:	10 9c       	mov	r12,r8
8002c49e:	ca 1e       	rcall	8002c1e0 <osc_enable>
		osc_wait_ready(src);
8002c4a0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c4a4:	5c 58       	castu.b	r8
8002c4a6:	10 9c       	mov	r12,r8
8002c4a8:	c3 3f       	rcall	8002c30e <osc_wait_ready>
		break;
8002c4aa:	c0 58       	rjmp	8002c4b4 <pll_enable_source_sync+0x3e>

	case PLL_SRC_RC8M:
		osc_enable(OSC_ID_RC8M);
8002c4ac:	30 2c       	mov	r12,2
8002c4ae:	c9 9e       	rcall	8002c1e0 <osc_enable>
		osc_wait_ready(OSC_ID_RC8M);
8002c4b0:	30 2c       	mov	r12,2
8002c4b2:	c2 ef       	rcall	8002c30e <osc_wait_ready>

	default:
		// unhandled_case(src);
		break;
	}
}
8002c4b4:	2f fd       	sub	sp,-4
8002c4b6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002c4ba:	00 00       	add	r0,r0
8002c4bc:	80 02       	ld.sh	r2,r0[0x0]
8002c4be:	c3 04       	brge	8002c51e <genclk_config_set_source+0x10>

8002c4c0 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
8002c4c0:	eb cd 40 c0 	pushm	r6-r7,lr
8002c4c4:	1a 97       	mov	r7,sp
8002c4c6:	20 1d       	sub	sp,4
8002c4c8:	48 96       	lddpc	r6,8002c4ec <pll_wait_for_lock+0x2c>
8002c4ca:	1e 26       	rsub	r6,pc
8002c4cc:	ef 4c ff fc 	st.w	r7[-4],r12
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
8002c4d0:	ee fc ff fc 	ld.w	r12,r7[-4]
8002c4d4:	cb af       	rcall	8002c448 <pll_is_locked>
8002c4d6:	18 98       	mov	r8,r12
8002c4d8:	ec 18 00 01 	eorl	r8,0x1
8002c4dc:	5c 58       	castu.b	r8
8002c4de:	cf 91       	brne	8002c4d0 <pll_wait_for_lock+0x10>
		/* Do nothing */
	}

	return 0;
8002c4e0:	30 08       	mov	r8,0
}
8002c4e2:	10 9c       	mov	r12,r8
8002c4e4:	2f fd       	sub	sp,-4
8002c4e6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002c4ea:	00 00       	add	r0,r0
8002c4ec:	80 02       	ld.sh	r2,r0[0x0]
8002c4ee:	c3 4e       	rcall	8002c156 <pll_enable+0x4e>

8002c4f0 <genclk_config_defaults>:
	uint32_t ctrl;
};

static inline void genclk_config_defaults(struct genclk_config *cfg,
		unsigned int id)
{
8002c4f0:	eb cd 40 80 	pushm	r7,lr
8002c4f4:	1a 97       	mov	r7,sp
8002c4f6:	20 2d       	sub	sp,8
8002c4f8:	ef 4c ff fc 	st.w	r7[-4],r12
8002c4fc:	ef 4b ff f8 	st.w	r7[-8],r11
	cfg->ctrl = 0;
8002c500:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c504:	30 09       	mov	r9,0
8002c506:	91 09       	st.w	r8[0x0],r9
}
8002c508:	2f ed       	sub	sp,-8
8002c50a:	e3 cd 80 80 	ldm	sp++,r7,pc

8002c50e <genclk_config_set_source>:
	AVR32_SCIF.gcctrl[id] = cfg->ctrl;
}

static inline void genclk_config_set_source(struct genclk_config *cfg,
		enum genclk_source src)
{
8002c50e:	eb cd 40 80 	pushm	r7,lr
8002c512:	1a 97       	mov	r7,sp
8002c514:	20 2d       	sub	sp,8
8002c516:	ef 4c ff fc 	st.w	r7[-4],r12
8002c51a:	ef 4b ff f8 	st.w	r7[-8],r11
	cfg->ctrl = (cfg->ctrl & ~AVR32_SCIF_GCCTRL_OSCSEL_MASK)
8002c51e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c522:	70 08       	ld.w	r8,r8[0x0]
8002c524:	10 99       	mov	r9,r8
8002c526:	e0 19 f0 ff 	andl	r9,0xf0ff
			| (src << AVR32_SCIF_GCCTRL_OSCSEL);
8002c52a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c52e:	a9 68       	lsl	r8,0x8
}

static inline void genclk_config_set_source(struct genclk_config *cfg,
		enum genclk_source src)
{
	cfg->ctrl = (cfg->ctrl & ~AVR32_SCIF_GCCTRL_OSCSEL_MASK)
8002c530:	10 49       	or	r9,r8
8002c532:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c536:	91 09       	st.w	r8[0x0],r9
			| (src << AVR32_SCIF_GCCTRL_OSCSEL);
}
8002c538:	2f ed       	sub	sp,-8
8002c53a:	e3 cd 80 80 	ldm	sp++,r7,pc

8002c53e <genclk_config_set_divider>:

static inline void genclk_config_set_divider(struct genclk_config *cfg,
		unsigned int divider)
{
8002c53e:	eb cd 40 80 	pushm	r7,lr
8002c542:	1a 97       	mov	r7,sp
8002c544:	20 2d       	sub	sp,8
8002c546:	ef 4c ff fc 	st.w	r7[-4],r12
8002c54a:	ef 4b ff f8 	st.w	r7[-8],r11
	Assert(divider > 0 && divider <= GENCLK_DIV_MAX);

	/* Clear all the bits we're about to modify */
	cfg->ctrl &= ~(AVR32_SCIF_GCCTRL_DIVEN_MASK
8002c54e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c552:	70 08       	ld.w	r8,r8[0x0]
8002c554:	10 99       	mov	r9,r8
8002c556:	e4 19 ff 00 	andh	r9,0xff00
8002c55a:	e0 19 ff fd 	andl	r9,0xfffd
8002c55e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c562:	91 09       	st.w	r8[0x0],r9
			| AVR32_SCIF_GCCTRL_DIV_MASK);

	if (divider > 1) {
8002c564:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c568:	58 18       	cp.w	r8,1
8002c56a:	e0 88 00 17 	brls	8002c598 <genclk_config_set_divider+0x5a>
		cfg->ctrl |= 1U << AVR32_SCIF_GCCTRL_DIVEN;
8002c56e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c572:	70 08       	ld.w	r8,r8[0x0]
8002c574:	10 99       	mov	r9,r8
8002c576:	a1 b9       	sbr	r9,0x1
8002c578:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c57c:	91 09       	st.w	r8[0x0],r9
		cfg->ctrl |= (((divider + 1) / 2) - 1) << AVR32_SCIF_GCCTRL_DIV;
8002c57e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c582:	70 09       	ld.w	r9,r8[0x0]
8002c584:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c588:	2f f8       	sub	r8,-1
8002c58a:	a1 98       	lsr	r8,0x1
8002c58c:	20 18       	sub	r8,1
8002c58e:	b1 68       	lsl	r8,0x10
8002c590:	10 49       	or	r9,r8
8002c592:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c596:	91 09       	st.w	r8[0x0],r9
	}
}
8002c598:	2f ed       	sub	sp,-8
8002c59a:	e3 cd 80 80 	ldm	sp++,r7,pc

8002c59e <genclk_enable>:

static inline void genclk_enable(const struct genclk_config *cfg,
		unsigned int id)
{
8002c59e:	eb cd 40 80 	pushm	r7,lr
8002c5a2:	1a 97       	mov	r7,sp
8002c5a4:	20 2d       	sub	sp,8
8002c5a6:	ef 4c ff fc 	st.w	r7[-4],r12
8002c5aa:	ef 4b ff f8 	st.w	r7[-8],r11
	AVR32_SCIF.gcctrl[id] = cfg->ctrl | (1U << AVR32_SCIF_GCCTRL_CEN);
8002c5ae:	fe 78 08 00 	mov	r8,-63488
8002c5b2:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002c5b6:	ee fa ff fc 	ld.w	r10,r7[-4]
8002c5ba:	74 0a       	ld.w	r10,r10[0x0]
8002c5bc:	a1 aa       	sbr	r10,0x0
8002c5be:	2e 79       	sub	r9,-25
8002c5c0:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
}
8002c5c4:	2f ed       	sub	sp,-8
8002c5c6:	e3 cd 80 80 	ldm	sp++,r7,pc

8002c5ca <genclk_disable>:

static inline void genclk_disable(unsigned int id)
{
8002c5ca:	eb cd 40 80 	pushm	r7,lr
8002c5ce:	1a 97       	mov	r7,sp
8002c5d0:	20 1d       	sub	sp,4
8002c5d2:	ef 4c ff fc 	st.w	r7[-4],r12
	AVR32_SCIF.gcctrl[id] = 0;
8002c5d6:	fe 78 08 00 	mov	r8,-63488
8002c5da:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002c5de:	2e 79       	sub	r9,-25
8002c5e0:	30 0a       	mov	r10,0
8002c5e2:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
}
8002c5e6:	2f fd       	sub	sp,-4
8002c5e8:	e3 cd 80 80 	ldm	sp++,r7,pc

8002c5ec <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern bool sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
8002c5ec:	eb cd 40 c0 	pushm	r6-r7,lr
8002c5f0:	1a 97       	mov	r7,sp
8002c5f2:	48 56       	lddpc	r6,8002c604 <sysclk_get_main_hz+0x18>
8002c5f4:	1e 26       	rsub	r6,pc
		return BOARD_OSC1_HZ;
#endif

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLL0:
		return pll_get_default_rate(0);
8002c5f6:	30 0c       	mov	r12,0
8002c5f8:	c5 ae       	rcall	8002c2ac <osc_get_rate>
8002c5fa:	18 98       	mov	r8,r12
8002c5fc:	a3 68       	lsl	r8,0x2

	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
8002c5fe:	10 9c       	mov	r12,r8
8002c600:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002c604:	80 02       	ld.sh	r2,r0[0x0]
8002c606:	c4 78       	rjmp	8002c694 <sysclk_priv_disable_module+0xc>

8002c608 <sysclk_priv_enable_module>:
 * \param bus_id Bus index, given by the \c AVR32_PM_CLK_GRP_xxx definitions.
 * \param module_index Index of the module to be enabled. This is the
 * bit number in the corresponding xxxMASK register.
 */
void sysclk_priv_enable_module(unsigned int bus_id, unsigned int module_index)
{
8002c608:	eb cd 40 c0 	pushm	r6-r7,lr
8002c60c:	1a 97       	mov	r7,sp
8002c60e:	20 4d       	sub	sp,16
8002c610:	49 d6       	lddpc	r6,8002c684 <sysclk_priv_enable_module+0x7c>
8002c612:	1e 26       	rsub	r6,pc
8002c614:	ef 4c ff f4 	st.w	r7[-12],r12
8002c618:	ef 4b ff f0 	st.w	r7[-16],r11
	irqflags_t flags;
	uint32_t   mask;

	flags = cpu_irq_save();
8002c61c:	fe b0 fd c6 	rcall	8002c1a8 <cpu_irq_save>
8002c620:	18 98       	mov	r8,r12
8002c622:	ef 48 ff f8 	st.w	r7[-8],r8

	/* Enable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
8002c626:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002c62a:	a3 68       	lsl	r8,0x2
8002c62c:	e0 28 fb e0 	sub	r8,64480
8002c630:	70 08       	ld.w	r8,r8[0x0]
8002c632:	ef 48 ff fc 	st.w	r7[-4],r8
	mask |= 1U << module_index;
8002c636:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002c63a:	30 19       	mov	r9,1
8002c63c:	f2 08 09 48 	lsl	r8,r9,r8
8002c640:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002c644:	f3 e8 10 08 	or	r8,r9,r8
8002c648:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_PM.unlock = 0xaa000020 + (4 * bus_id);
8002c64c:	fe 78 04 00 	mov	r8,-64512
8002c650:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002c654:	f2 0a 15 02 	lsl	r10,r9,0x2
8002c658:	32 09       	mov	r9,32
8002c65a:	ea 19 aa 00 	orh	r9,0xaa00
8002c65e:	f4 09 00 09 	add	r9,r10,r9
8002c662:	f1 49 00 58 	st.w	r8[88],r9
	*(&AVR32_PM.cpumask + bus_id) = mask;
8002c666:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002c66a:	a3 68       	lsl	r8,0x2
8002c66c:	e0 28 fb e0 	sub	r8,64480
8002c670:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002c674:	91 09       	st.w	r8[0x0],r9

	cpu_irq_restore(flags);
8002c676:	ee fc ff f8 	ld.w	r12,r7[-8]
8002c67a:	fe b0 fd a6 	rcall	8002c1c6 <cpu_irq_restore>
}
8002c67e:	2f cd       	sub	sp,-16
8002c680:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002c684:	80 02       	ld.sh	r2,r0[0x0]
8002c686:	c4 96       	brmi	8002c718 <sysclk_set_prescalers+0xc>

8002c688 <sysclk_priv_disable_module>:
 * \param bus_id Bus index, given by the \c AVR32_PM_CLK_GRP_xxx definitions.
 * \param module_index Index of the module to be disabled. This is the
 * bit number in the corresponding xxxMASK register.
 */
void sysclk_priv_disable_module(unsigned int bus_id, unsigned int module_index)
{
8002c688:	eb cd 40 c0 	pushm	r6-r7,lr
8002c68c:	1a 97       	mov	r7,sp
8002c68e:	20 4d       	sub	sp,16
8002c690:	49 e6       	lddpc	r6,8002c708 <sysclk_priv_disable_module+0x80>
8002c692:	1e 26       	rsub	r6,pc
8002c694:	ef 4c ff f4 	st.w	r7[-12],r12
8002c698:	ef 4b ff f0 	st.w	r7[-16],r11
	irqflags_t flags;
	uint32_t   mask;

	flags = cpu_irq_save();
8002c69c:	fe b0 fd 86 	rcall	8002c1a8 <cpu_irq_save>
8002c6a0:	18 98       	mov	r8,r12
8002c6a2:	ef 48 ff f8 	st.w	r7[-8],r8

	/* Disable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
8002c6a6:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002c6aa:	a3 68       	lsl	r8,0x2
8002c6ac:	e0 28 fb e0 	sub	r8,64480
8002c6b0:	70 08       	ld.w	r8,r8[0x0]
8002c6b2:	ef 48 ff fc 	st.w	r7[-4],r8
	mask &= ~(1U << module_index);
8002c6b6:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002c6ba:	30 19       	mov	r9,1
8002c6bc:	f2 08 09 48 	lsl	r8,r9,r8
8002c6c0:	5c d8       	com	r8
8002c6c2:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002c6c6:	f3 e8 00 08 	and	r8,r9,r8
8002c6ca:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_PM.unlock = 0xaa000020 + (4 * bus_id);
8002c6ce:	fe 78 04 00 	mov	r8,-64512
8002c6d2:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002c6d6:	f2 0a 15 02 	lsl	r10,r9,0x2
8002c6da:	32 09       	mov	r9,32
8002c6dc:	ea 19 aa 00 	orh	r9,0xaa00
8002c6e0:	f4 09 00 09 	add	r9,r10,r9
8002c6e4:	f1 49 00 58 	st.w	r8[88],r9
	*(&AVR32_PM.cpumask + bus_id) = mask;
8002c6e8:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002c6ec:	a3 68       	lsl	r8,0x2
8002c6ee:	e0 28 fb e0 	sub	r8,64480
8002c6f2:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002c6f6:	91 09       	st.w	r8[0x0],r9

	cpu_irq_restore(flags);
8002c6f8:	ee fc ff f8 	ld.w	r12,r7[-8]
8002c6fc:	fe b0 fd 65 	rcall	8002c1c6 <cpu_irq_restore>
}
8002c700:	2f cd       	sub	sp,-16
8002c702:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002c706:	00 00       	add	r0,r0
8002c708:	80 02       	ld.sh	r2,r0[0x0]
8002c70a:	c5 16       	brmi	8002c7ac <sysclk_set_prescalers+0xa0>

8002c70c <sysclk_set_prescalers>:
 * \param pbc_shift The PBC clock will be divided by \f$2^{pbc\_shift}\f$
 */
void sysclk_set_prescalers(unsigned int cpu_shift,
		unsigned int pba_shift, unsigned int pbb_shift,
		unsigned int pbc_shift)
{
8002c70c:	eb cd 40 c0 	pushm	r6-r7,lr
8002c710:	1a 97       	mov	r7,sp
8002c712:	20 9d       	sub	sp,36
8002c714:	4b f6       	lddpc	r6,8002c810 <sysclk_set_prescalers+0x104>
8002c716:	1e 26       	rsub	r6,pc
8002c718:	ef 4c ff e8 	st.w	r7[-24],r12
8002c71c:	ef 4b ff e4 	st.w	r7[-28],r11
8002c720:	ef 4a ff e0 	st.w	r7[-32],r10
8002c724:	ef 49 ff dc 	st.w	r7[-36],r9
	irqflags_t flags;
	uint32_t   cpu_cksel = 0;
8002c728:	30 08       	mov	r8,0
8002c72a:	ef 48 ff f0 	st.w	r7[-16],r8
	uint32_t   pba_cksel = 0;
8002c72e:	30 08       	mov	r8,0
8002c730:	ef 48 ff f4 	st.w	r7[-12],r8
	uint32_t   pbb_cksel = 0;
8002c734:	30 08       	mov	r8,0
8002c736:	ef 48 ff f8 	st.w	r7[-8],r8
	uint32_t   pbc_cksel = 0;
8002c73a:	30 08       	mov	r8,0
8002c73c:	ef 48 ff fc 	st.w	r7[-4],r8

	Assert(cpu_shift <= pba_shift);
	Assert(cpu_shift <= pbb_shift);

	if (cpu_shift > 0)
8002c740:	ee f8 ff e8 	ld.w	r8,r7[-24]
8002c744:	58 08       	cp.w	r8,0
8002c746:	c0 80       	breq	8002c756 <sysclk_set_prescalers+0x4a>
		cpu_cksel = ((cpu_shift - 1) << AVR32_PM_CPUSEL)
8002c748:	ee f8 ff e8 	ld.w	r8,r7[-24]
8002c74c:	20 18       	sub	r8,1
8002c74e:	a5 68       	lsl	r8,0x4
8002c750:	a7 b8       	sbr	r8,0x7
8002c752:	ef 48 ff f0 	st.w	r7[-16],r8
				| (1U << AVR32_PM_CPUDIV);

	if (pba_shift > 0)
8002c756:	ee f8 ff e4 	ld.w	r8,r7[-28]
8002c75a:	58 08       	cp.w	r8,0
8002c75c:	c0 80       	breq	8002c76c <sysclk_set_prescalers+0x60>
		pba_cksel = ((pba_shift - 1) << AVR32_PM_PBASEL)
8002c75e:	ee f8 ff e4 	ld.w	r8,r7[-28]
8002c762:	20 18       	sub	r8,1
8002c764:	ad 68       	lsl	r8,0xc
8002c766:	a7 b8       	sbr	r8,0x7
8002c768:	ef 48 ff f4 	st.w	r7[-12],r8
				| (1U << AVR32_PM_PBADIV);

	if (pbb_shift > 0)
8002c76c:	ee f8 ff e0 	ld.w	r8,r7[-32]
8002c770:	58 08       	cp.w	r8,0
8002c772:	c0 80       	breq	8002c782 <sysclk_set_prescalers+0x76>
		pbb_cksel = ((pbb_shift - 1) << AVR32_PM_PBBSEL)
8002c774:	ee f8 ff e0 	ld.w	r8,r7[-32]
8002c778:	20 18       	sub	r8,1
8002c77a:	b1 68       	lsl	r8,0x10
8002c77c:	a7 b8       	sbr	r8,0x7
8002c77e:	ef 48 ff f8 	st.w	r7[-8],r8
				| (1U << AVR32_PM_PBBDIV);

	if (pbc_shift > 0)
8002c782:	ee f8 ff dc 	ld.w	r8,r7[-36]
8002c786:	58 08       	cp.w	r8,0
8002c788:	c0 80       	breq	8002c798 <sysclk_set_prescalers+0x8c>
		pbc_cksel = ((pbc_shift - 1) << AVR32_PM_PBCSEL)
8002c78a:	ee f8 ff dc 	ld.w	r8,r7[-36]
8002c78e:	20 18       	sub	r8,1
8002c790:	b5 68       	lsl	r8,0x14
8002c792:	a7 b8       	sbr	r8,0x7
8002c794:	ef 48 ff fc 	st.w	r7[-4],r8
				| (1U << AVR32_PM_PBCDIV);

	flags = cpu_irq_save();
8002c798:	fe b0 fd 08 	rcall	8002c1a8 <cpu_irq_save>
8002c79c:	18 98       	mov	r8,r12
8002c79e:	ef 48 ff ec 	st.w	r7[-20],r8
	AVR32_PM.unlock = 0xaa000000 | AVR32_PM_CPUSEL;
8002c7a2:	fe 78 04 00 	mov	r8,-64512
8002c7a6:	30 49       	mov	r9,4
8002c7a8:	ea 19 aa 00 	orh	r9,0xaa00
8002c7ac:	f1 49 00 58 	st.w	r8[88],r9
	AVR32_PM.cpusel = cpu_cksel;
8002c7b0:	fe 78 04 00 	mov	r8,-64512
8002c7b4:	ee f9 ff f0 	ld.w	r9,r7[-16]
8002c7b8:	91 19       	st.w	r8[0x4],r9
	AVR32_PM.unlock = 0xaa000000 | AVR32_PM_PBASEL;
8002c7ba:	fe 78 04 00 	mov	r8,-64512
8002c7be:	30 c9       	mov	r9,12
8002c7c0:	ea 19 aa 00 	orh	r9,0xaa00
8002c7c4:	f1 49 00 58 	st.w	r8[88],r9
	AVR32_PM.pbasel = pba_cksel;
8002c7c8:	fe 78 04 00 	mov	r8,-64512
8002c7cc:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002c7d0:	91 39       	st.w	r8[0xc],r9
	AVR32_PM.unlock = 0xaa000000 | AVR32_PM_PBBSEL;
8002c7d2:	fe 78 04 00 	mov	r8,-64512
8002c7d6:	31 09       	mov	r9,16
8002c7d8:	ea 19 aa 00 	orh	r9,0xaa00
8002c7dc:	f1 49 00 58 	st.w	r8[88],r9
	AVR32_PM.pbbsel = pbb_cksel;
8002c7e0:	fe 78 04 00 	mov	r8,-64512
8002c7e4:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002c7e8:	91 49       	st.w	r8[0x10],r9
	AVR32_PM.unlock = 0xaa000000 | AVR32_PM_PBCSEL;
8002c7ea:	fe 78 04 00 	mov	r8,-64512
8002c7ee:	31 49       	mov	r9,20
8002c7f0:	ea 19 aa 00 	orh	r9,0xaa00
8002c7f4:	f1 49 00 58 	st.w	r8[88],r9
	AVR32_PM.pbbsel = pbc_cksel;
8002c7f8:	fe 78 04 00 	mov	r8,-64512
8002c7fc:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002c800:	91 49       	st.w	r8[0x10],r9
	cpu_irq_restore(flags);
8002c802:	ee fc ff ec 	ld.w	r12,r7[-20]
8002c806:	fe b0 fc e0 	rcall	8002c1c6 <cpu_irq_restore>
}
8002c80a:	2f 7d       	sub	sp,-36
8002c80c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002c810:	80 02       	ld.sh	r2,r0[0x0]
8002c812:	c5 9a       	rjmp	8002c4c4 <pll_wait_for_lock+0x4>

8002c814 <sysclk_set_source>:
 *
 * \param src The new system clock source. Must be one of the constants
 * from the <em>System Clock Sources</em> section.
 */
void sysclk_set_source(uint_fast8_t src)
{
8002c814:	eb cd 40 c0 	pushm	r6-r7,lr
8002c818:	1a 97       	mov	r7,sp
8002c81a:	20 2d       	sub	sp,8
8002c81c:	48 e6       	lddpc	r6,8002c854 <sysclk_set_source+0x40>
8002c81e:	1e 26       	rsub	r6,pc
8002c820:	ef 4c ff f8 	st.w	r7[-8],r12
	irqflags_t flags;

	Assert(src <= SYSCLK_SRC_RC8M);

	flags = cpu_irq_save();
8002c824:	fe b0 fc c2 	rcall	8002c1a8 <cpu_irq_save>
8002c828:	18 98       	mov	r8,r12
8002c82a:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_PM.unlock = 0xaa000000 | AVR32_PM_MCCTRL;
8002c82e:	fe 78 04 00 	mov	r8,-64512
8002c832:	fc 19 aa 00 	movh	r9,0xaa00
8002c836:	f1 49 00 58 	st.w	r8[88],r9
	AVR32_PM.mcctrl = src;
8002c83a:	fe 78 04 00 	mov	r8,-64512
8002c83e:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002c842:	91 09       	st.w	r8[0x0],r9
	cpu_irq_restore(flags);
8002c844:	ee fc ff fc 	ld.w	r12,r7[-4]
8002c848:	fe b0 fc bf 	rcall	8002c1c6 <cpu_irq_restore>
}
8002c84c:	2f ed       	sub	sp,-8
8002c84e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002c852:	00 00       	add	r0,r0
8002c854:	80 02       	ld.sh	r2,r0[0x0]
8002c856:	c6 a2       	brcc	8002c92a <sysclk_init+0x56>

8002c858 <sysclk_enable_usb>:
 * \pre The USB generick clock must be configurated to 48MHz.
 * CONFIG_USBCLK_SOURCE and CONFIG_USBCLK_DIV must be defined with proper
 * configuration. The selected clock source must also be configured.
 */
void sysclk_enable_usb(void)
{
8002c858:	eb cd 40 c0 	pushm	r6-r7,lr
8002c85c:	1a 97       	mov	r7,sp
8002c85e:	20 3d       	sub	sp,12
8002c860:	49 66       	lddpc	r6,8002c8b8 <sysclk_enable_usb+0x60>
8002c862:	1e 26       	rsub	r6,pc
	struct genclk_config gcfg;

	genclk_config_defaults(&gcfg, AVR32_USBC_GCLK_NUM);
8002c864:	ee c8 00 04 	sub	r8,r7,4
8002c868:	30 0b       	mov	r11,0
8002c86a:	10 9c       	mov	r12,r8
8002c86c:	c4 2e       	rcall	8002c4f0 <genclk_config_defaults>
#endif

#ifdef CONFIG_PLL1_SOURCE
	case USBCLK_SRC_PLL1: {
		struct pll_config pllcfg;
		pll_enable_source_sync(CONFIG_PLL1_SOURCE);
8002c86e:	30 0c       	mov	r12,0
8002c870:	c0 3e       	rcall	8002c476 <pll_enable_source_sync>
		pll_config_defaults(&pllcfg, 1);
8002c872:	ee c8 00 0c 	sub	r8,r7,12
8002c876:	30 39       	mov	r9,3
8002c878:	30 1a       	mov	r10,1
8002c87a:	30 0b       	mov	r11,0
8002c87c:	10 9c       	mov	r12,r8
8002c87e:	fe b0 fd 77 	rcall	8002c36c <pll_config_init>
		pll_enable(&pllcfg, 1);
8002c882:	ee c8 00 0c 	sub	r8,r7,12
8002c886:	30 1b       	mov	r11,1
8002c888:	10 9c       	mov	r12,r8
8002c88a:	f0 16 00 a3 	mcall	r6[652]
		pll_wait_for_lock(1);
8002c88e:	30 1c       	mov	r12,1
8002c890:	c1 8e       	rcall	8002c4c0 <pll_wait_for_lock>
		genclk_config_set_source(&gcfg, GENCLK_SRC_PLL1);
8002c892:	ee c8 00 04 	sub	r8,r7,4
8002c896:	30 6b       	mov	r11,6
8002c898:	10 9c       	mov	r12,r8
8002c89a:	c3 ae       	rcall	8002c50e <genclk_config_set_source>
	default:
		/* unhandled_case(CONFIG_USBCLK_SOURCE); */
		break;
	}

	genclk_config_set_divider(&gcfg, CONFIG_USBCLK_DIV);
8002c89c:	ee c8 00 04 	sub	r8,r7,4
8002c8a0:	30 1b       	mov	r11,1
8002c8a2:	10 9c       	mov	r12,r8
8002c8a4:	c4 de       	rcall	8002c53e <genclk_config_set_divider>
	genclk_enable(&gcfg, AVR32_USBC_GCLK_NUM);
8002c8a6:	ee c8 00 04 	sub	r8,r7,4
8002c8aa:	30 0b       	mov	r11,0
8002c8ac:	10 9c       	mov	r12,r8
8002c8ae:	c7 8e       	rcall	8002c59e <genclk_enable>
}
8002c8b0:	2f dd       	sub	sp,-12
8002c8b2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002c8b6:	00 00       	add	r0,r0
8002c8b8:	80 02       	ld.sh	r2,r0[0x0]
8002c8ba:	c6 e6       	brmi	8002c996 <osc_get_rate+0x4a>

8002c8bc <sysclk_disable_usb>:

/**
 * \brief Disable the USB generic clock
 */
void sysclk_disable_usb(void)
{
8002c8bc:	eb cd 40 c0 	pushm	r6-r7,lr
8002c8c0:	1a 97       	mov	r7,sp
8002c8c2:	48 46       	lddpc	r6,8002c8d0 <sysclk_disable_usb+0x14>
8002c8c4:	1e 26       	rsub	r6,pc
   genclk_disable(AVR32_USBC_GCLK_NUM);
8002c8c6:	30 0c       	mov	r12,0
8002c8c8:	c8 1e       	rcall	8002c5ca <genclk_disable>
}
8002c8ca:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002c8ce:	00 00       	add	r0,r0
8002c8d0:	80 02       	ld.sh	r2,r0[0x0]
8002c8d2:	c7 48       	rjmp	8002c9ba <sysclk_get_main_hz+0xc>

8002c8d4 <sysclk_init>:
#endif // CONFIG_USBCLK_SOURCE


void sysclk_init(void)
{
8002c8d4:	eb cd 40 c0 	pushm	r6-r7,lr
8002c8d8:	1a 97       	mov	r7,sp
8002c8da:	20 2d       	sub	sp,8
8002c8dc:	49 b6       	lddpc	r6,8002c948 <sysclk_init+0x74>
8002c8de:	1e 26       	rsub	r6,pc

#ifdef CONFIG_PLL0_SOURCE

		struct pll_config pllcfg;

		pll_enable_source_sync(CONFIG_PLL0_SOURCE);
8002c8e0:	30 0c       	mov	r12,0
8002c8e2:	fe b0 fd ca 	rcall	8002c476 <pll_enable_source_sync>
		pll_config_defaults(&pllcfg, 0);
8002c8e6:	ee c8 00 04 	sub	r8,r7,4
8002c8ea:	30 49       	mov	r9,4
8002c8ec:	30 1a       	mov	r10,1
8002c8ee:	30 0b       	mov	r11,0
8002c8f0:	10 9c       	mov	r12,r8
8002c8f2:	fe b0 fd 3d 	rcall	8002c36c <pll_config_init>
		pll_enable(&pllcfg, 0);
8002c8f6:	ee c8 00 04 	sub	r8,r7,4
8002c8fa:	30 0b       	mov	r11,0
8002c8fc:	10 9c       	mov	r12,r8
8002c8fe:	f0 16 00 a3 	mcall	r6[652]
		pll_wait_for_lock(0);
8002c902:	30 0c       	mov	r12,0
8002c904:	fe b0 fd de 	rcall	8002c4c0 <pll_wait_for_lock>

#ifdef CONFIG_PLL1_SOURCE
	
		struct pll_config pllcfg1;

		pll_enable_source_sync(CONFIG_PLL1_SOURCE);
8002c908:	30 0c       	mov	r12,0
8002c90a:	fe b0 fd b6 	rcall	8002c476 <pll_enable_source_sync>
		pll_config_defaults(&pllcfg1, 1);
8002c90e:	ee c8 00 08 	sub	r8,r7,8
8002c912:	30 39       	mov	r9,3
8002c914:	30 1a       	mov	r10,1
8002c916:	30 0b       	mov	r11,0
8002c918:	10 9c       	mov	r12,r8
8002c91a:	fe b0 fd 29 	rcall	8002c36c <pll_config_init>
		pll_enable(&pllcfg1, 1);
8002c91e:	ee c8 00 08 	sub	r8,r7,8
8002c922:	30 1b       	mov	r11,1
8002c924:	10 9c       	mov	r12,r8
8002c926:	f0 16 00 a3 	mcall	r6[652]
		pll_wait_for_lock(1);
8002c92a:	30 1c       	mov	r12,1
8002c92c:	fe b0 fd ca 	rcall	8002c4c0 <pll_wait_for_lock>


	case SYSCLK_SRC_PLL0: {

		// Set a flash wait state depending on the new cpu frequency.
		flash_set_bus_freq(sysclk_get_main_hz());
8002c930:	c5 ee       	rcall	8002c5ec <sysclk_get_main_hz>
8002c932:	18 98       	mov	r8,r12
8002c934:	10 9c       	mov	r12,r8
8002c936:	f0 16 01 57 	mcall	r6[1372]
		sysclk_set_source(SYSCLK_SRC_PLL0);
8002c93a:	30 3c       	mov	r12,3
8002c93c:	f0 16 01 bd 	mcall	r6[1780]

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = true;
#endif
}
8002c940:	2f ed       	sub	sp,-8
8002c942:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002c946:	00 00       	add	r0,r0
8002c948:	80 02       	ld.sh	r2,r0[0x0]
8002c94a:	c7 62       	brcc	8002ca36 <spi_set_chipselect_delay_bct+0x52>

8002c94c <osc_get_rate>:
/**
 * \todo RC8M may run at either 8 MHz or 1 MHz. Currently, we assume
 * it's always running at 8 MHz.
 */
static inline uint32_t osc_get_rate(uint8_t id)
{
8002c94c:	eb cd 40 80 	pushm	r7,lr
8002c950:	1a 97       	mov	r7,sp
8002c952:	20 1d       	sub	sp,4
8002c954:	18 98       	mov	r8,r12
8002c956:	ef 68 ff fc 	st.b	r7[-4],r8
	switch (id) {
8002c95a:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8002c95e:	58 38       	cp.w	r8,3
8002c960:	c1 20       	breq	8002c984 <osc_get_rate+0x38>
8002c962:	e0 89 00 07 	brgt	8002c970 <osc_get_rate+0x24>
8002c966:	58 08       	cp.w	r8,0
8002c968:	c0 90       	breq	8002c97a <osc_get_rate+0x2e>
8002c96a:	58 28       	cp.w	r8,2
8002c96c:	c0 f0       	breq	8002c98a <osc_get_rate+0x3e>
8002c96e:	c1 b8       	rjmp	8002c9a4 <osc_get_rate+0x58>
8002c970:	58 48       	cp.w	r8,4
8002c972:	c1 10       	breq	8002c994 <osc_get_rate+0x48>
8002c974:	58 58       	cp.w	r8,5
8002c976:	c1 40       	breq	8002c99e <osc_get_rate+0x52>
8002c978:	c1 68       	rjmp	8002c9a4 <osc_get_rate+0x58>
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return BOARD_OSC0_HZ;
8002c97a:	e0 68 24 00 	mov	r8,9216
8002c97e:	ea 18 00 f4 	orh	r8,0xf4
8002c982:	c1 28       	rjmp	8002c9a6 <osc_get_rate+0x5a>
		return BOARD_OSC1_HZ;
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		return BOARD_OSC32_HZ;
8002c984:	e0 68 80 00 	mov	r8,32768
8002c988:	c0 f8       	rjmp	8002c9a6 <osc_get_rate+0x5a>
#endif

	case OSC_ID_RC8M:
		return OSC_RC8M_NOMINAL_HZ;
8002c98a:	e0 68 12 00 	mov	r8,4608
8002c98e:	ea 18 00 7a 	orh	r8,0x7a
8002c992:	c0 a8       	rjmp	8002c9a6 <osc_get_rate+0x5a>

	case OSC_ID_RC120M:
		return OSC_RC120M_NOMINAL_HZ;
8002c994:	e0 68 0e 00 	mov	r8,3584
8002c998:	ea 18 07 27 	orh	r8,0x727
8002c99c:	c0 58       	rjmp	8002c9a6 <osc_get_rate+0x5a>

	case OSC_ID_RCSYS:
		return OSC_RCSYS_NOMINAL_HZ;
8002c99e:	e0 78 c1 38 	mov	r8,115000
8002c9a2:	c0 28       	rjmp	8002c9a6 <osc_get_rate+0x5a>

	default:
		/* unhandled_case(id); */
		return 0;
8002c9a4:	30 08       	mov	r8,0
	}
}
8002c9a6:	10 9c       	mov	r12,r8
8002c9a8:	2f fd       	sub	sp,-4
8002c9aa:	e3 cd 80 80 	ldm	sp++,r7,pc

8002c9ae <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern bool sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
8002c9ae:	eb cd 40 c0 	pushm	r6-r7,lr
8002c9b2:	1a 97       	mov	r7,sp
8002c9b4:	48 56       	lddpc	r6,8002c9c8 <sysclk_get_main_hz+0x1a>
8002c9b6:	1e 26       	rsub	r6,pc
		return BOARD_OSC1_HZ;
#endif

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLL0:
		return pll_get_default_rate(0);
8002c9b8:	30 0c       	mov	r12,0
8002c9ba:	cc 9f       	rcall	8002c94c <osc_get_rate>
8002c9bc:	18 98       	mov	r8,r12
8002c9be:	a3 68       	lsl	r8,0x2

	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
8002c9c0:	10 9c       	mov	r12,r8
8002c9c2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002c9c6:	00 00       	add	r0,r0
8002c9c8:	80 02       	ld.sh	r2,r0[0x0]
8002c9ca:	c8 3a       	rjmp	8002c6d0 <sysclk_priv_disable_module+0x48>

8002c9cc <sysclk_get_pba_hz>:
 * \brief Return the current rate in Hz of the Peripheral Bus A clock
 *
 * \return Frequency of the Peripheral Bus A clock, in Hz.
 */
static inline uint32_t sysclk_get_pba_hz(void)
{
8002c9cc:	eb cd 40 c0 	pushm	r6-r7,lr
8002c9d0:	1a 97       	mov	r7,sp
8002c9d2:	48 46       	lddpc	r6,8002c9e0 <sysclk_get_pba_hz+0x14>
8002c9d4:	1e 26       	rsub	r6,pc
	return sysclk_get_main_hz() >> CONFIG_SYSCLK_PBA_DIV;
8002c9d6:	ce cf       	rcall	8002c9ae <sysclk_get_main_hz>
8002c9d8:	18 98       	mov	r8,r12
}
8002c9da:	10 9c       	mov	r12,r8
8002c9dc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002c9e0:	80 02       	ld.sh	r2,r0[0x0]
8002c9e2:	c8 58       	rjmp	8002caec <spi_set_bits_per_transfer+0x8>

8002c9e4 <spi_set_chipselect_delay_bct>:
 * \param delay       Delay.
 */

static inline void spi_set_chipselect_delay_bct(volatile avr32_spi_t *spi,
                        uint8_t chip_select, uint8_t delay)
{
8002c9e4:	eb cd 40 80 	pushm	r7,lr
8002c9e8:	1a 97       	mov	r7,sp
8002c9ea:	20 3d       	sub	sp,12
8002c9ec:	ef 4c ff fc 	st.w	r7[-4],r12
8002c9f0:	16 99       	mov	r9,r11
8002c9f2:	14 98       	mov	r8,r10
8002c9f4:	ef 69 ff f8 	st.b	r7[-8],r9
8002c9f8:	ef 68 ff f4 	st.b	r7[-12],r8
  Assert(chip_select>3);
  switch(chip_select) {
8002c9fc:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8002ca00:	58 18       	cp.w	r8,1
8002ca02:	c1 40       	breq	8002ca2a <spi_set_chipselect_delay_bct+0x46>
8002ca04:	e0 89 00 05 	brgt	8002ca0e <spi_set_chipselect_delay_bct+0x2a>
8002ca08:	58 08       	cp.w	r8,0
8002ca0a:	c0 70       	breq	8002ca18 <spi_set_chipselect_delay_bct+0x34>
8002ca0c:	c2 98       	rjmp	8002ca5e <spi_set_chipselect_delay_bct+0x7a>
8002ca0e:	58 28       	cp.w	r8,2
8002ca10:	c1 60       	breq	8002ca3c <spi_set_chipselect_delay_bct+0x58>
8002ca12:	58 38       	cp.w	r8,3
8002ca14:	c1 d0       	breq	8002ca4e <spi_set_chipselect_delay_bct+0x6a>
8002ca16:	c2 48       	rjmp	8002ca5e <spi_set_chipselect_delay_bct+0x7a>
    case 0:
      spi->CSR0.dlybct = delay;
8002ca18:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002ca1c:	72 c8       	ld.w	r8,r9[0x30]
8002ca1e:	ef 3a ff f4 	ld.ub	r10,r7[-12]
8002ca22:	f1 da d3 08 	bfins	r8,r10,0x18,0x8
8002ca26:	93 c8       	st.w	r9[0x30],r8
      break;
8002ca28:	c1 b8       	rjmp	8002ca5e <spi_set_chipselect_delay_bct+0x7a>
    case 1:
      spi->CSR1.dlybct  = delay;
8002ca2a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002ca2e:	72 d8       	ld.w	r8,r9[0x34]
8002ca30:	ef 3a ff f4 	ld.ub	r10,r7[-12]
8002ca34:	f1 da d3 08 	bfins	r8,r10,0x18,0x8
8002ca38:	93 d8       	st.w	r9[0x34],r8
      break;
8002ca3a:	c1 28       	rjmp	8002ca5e <spi_set_chipselect_delay_bct+0x7a>
    case 2:
      spi->CSR2.dlybct  = delay;
8002ca3c:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002ca40:	72 e8       	ld.w	r8,r9[0x38]
8002ca42:	ef 3a ff f4 	ld.ub	r10,r7[-12]
8002ca46:	f1 da d3 08 	bfins	r8,r10,0x18,0x8
8002ca4a:	93 e8       	st.w	r9[0x38],r8
      break;
8002ca4c:	c0 98       	rjmp	8002ca5e <spi_set_chipselect_delay_bct+0x7a>
    case 3:
      spi->CSR3.dlybct  = delay;
8002ca4e:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002ca52:	72 f8       	ld.w	r8,r9[0x3c]
8002ca54:	ef 3a ff f4 	ld.ub	r10,r7[-12]
8002ca58:	f1 da d3 08 	bfins	r8,r10,0x18,0x8
8002ca5c:	93 f8       	st.w	r9[0x3c],r8
      break;
  }
}
8002ca5e:	2f dd       	sub	sp,-12
8002ca60:	e3 cd 80 80 	ldm	sp++,r7,pc

8002ca64 <spi_set_chipselect_delay_bs>:
 * \param chip_select Chip Select.
 * \param delay       Delay.
 */
static inline void spi_set_chipselect_delay_bs(volatile avr32_spi_t *spi,
                        uint8_t chip_select, uint8_t delay)
{
8002ca64:	eb cd 40 80 	pushm	r7,lr
8002ca68:	1a 97       	mov	r7,sp
8002ca6a:	20 3d       	sub	sp,12
8002ca6c:	ef 4c ff fc 	st.w	r7[-4],r12
8002ca70:	16 99       	mov	r9,r11
8002ca72:	14 98       	mov	r8,r10
8002ca74:	ef 69 ff f8 	st.b	r7[-8],r9
8002ca78:	ef 68 ff f4 	st.b	r7[-12],r8
  Assert(chip_select>3);
  switch(chip_select) {
8002ca7c:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8002ca80:	58 18       	cp.w	r8,1
8002ca82:	c1 40       	breq	8002caaa <spi_set_chipselect_delay_bs+0x46>
8002ca84:	e0 89 00 05 	brgt	8002ca8e <spi_set_chipselect_delay_bs+0x2a>
8002ca88:	58 08       	cp.w	r8,0
8002ca8a:	c0 70       	breq	8002ca98 <spi_set_chipselect_delay_bs+0x34>
8002ca8c:	c2 98       	rjmp	8002cade <spi_set_chipselect_delay_bs+0x7a>
8002ca8e:	58 28       	cp.w	r8,2
8002ca90:	c1 60       	breq	8002cabc <spi_set_chipselect_delay_bs+0x58>
8002ca92:	58 38       	cp.w	r8,3
8002ca94:	c1 d0       	breq	8002cace <spi_set_chipselect_delay_bs+0x6a>
8002ca96:	c2 48       	rjmp	8002cade <spi_set_chipselect_delay_bs+0x7a>
    case 0:
      spi->CSR0.dlybs = delay;
8002ca98:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002ca9c:	72 c8       	ld.w	r8,r9[0x30]
8002ca9e:	ef 3a ff f4 	ld.ub	r10,r7[-12]
8002caa2:	f1 da d2 08 	bfins	r8,r10,0x10,0x8
8002caa6:	93 c8       	st.w	r9[0x30],r8
      break;
8002caa8:	c1 b8       	rjmp	8002cade <spi_set_chipselect_delay_bs+0x7a>
    case 1:
      spi->CSR1.dlybs  = delay;
8002caaa:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002caae:	72 d8       	ld.w	r8,r9[0x34]
8002cab0:	ef 3a ff f4 	ld.ub	r10,r7[-12]
8002cab4:	f1 da d2 08 	bfins	r8,r10,0x10,0x8
8002cab8:	93 d8       	st.w	r9[0x34],r8
      break;
8002caba:	c1 28       	rjmp	8002cade <spi_set_chipselect_delay_bs+0x7a>
    case 2:
      spi->CSR2.dlybs  = delay;
8002cabc:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002cac0:	72 e8       	ld.w	r8,r9[0x38]
8002cac2:	ef 3a ff f4 	ld.ub	r10,r7[-12]
8002cac6:	f1 da d2 08 	bfins	r8,r10,0x10,0x8
8002caca:	93 e8       	st.w	r9[0x38],r8
      break;
8002cacc:	c0 98       	rjmp	8002cade <spi_set_chipselect_delay_bs+0x7a>
    case 3:
      spi->CSR3.dlybs  = delay;
8002cace:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002cad2:	72 f8       	ld.w	r8,r9[0x3c]
8002cad4:	ef 3a ff f4 	ld.ub	r10,r7[-12]
8002cad8:	f1 da d2 08 	bfins	r8,r10,0x10,0x8
8002cadc:	93 f8       	st.w	r9[0x3c],r8
      break;
  }
}
8002cade:	2f dd       	sub	sp,-12
8002cae0:	e3 cd 80 80 	ldm	sp++,r7,pc

8002cae4 <spi_set_bits_per_transfer>:
 * \param chip_select Chip Select.
 * \param len         Bits per Transfer [8...16].
 */
static inline void spi_set_bits_per_transfer(volatile avr32_spi_t *spi, uint8_t chip_select,
                        uint8_t len)
{
8002cae4:	eb cd 40 80 	pushm	r7,lr
8002cae8:	1a 97       	mov	r7,sp
8002caea:	20 3d       	sub	sp,12
8002caec:	ef 4c ff fc 	st.w	r7[-4],r12
8002caf0:	16 99       	mov	r9,r11
8002caf2:	14 98       	mov	r8,r10
8002caf4:	ef 69 ff f8 	st.b	r7[-8],r9
8002caf8:	ef 68 ff f4 	st.b	r7[-12],r8
  Assert((len>8)&&(len<16));
  switch(chip_select) {
8002cafc:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8002cb00:	58 18       	cp.w	r8,1
8002cb02:	c1 a0       	breq	8002cb36 <spi_set_bits_per_transfer+0x52>
8002cb04:	e0 89 00 05 	brgt	8002cb0e <spi_set_bits_per_transfer+0x2a>
8002cb08:	58 08       	cp.w	r8,0
8002cb0a:	c0 70       	breq	8002cb18 <spi_set_bits_per_transfer+0x34>
8002cb0c:	c4 18       	rjmp	8002cb8e <spi_set_bits_per_transfer+0xaa>
8002cb0e:	58 28       	cp.w	r8,2
8002cb10:	c2 20       	breq	8002cb54 <spi_set_bits_per_transfer+0x70>
8002cb12:	58 38       	cp.w	r8,3
8002cb14:	c2 f0       	breq	8002cb72 <spi_set_bits_per_transfer+0x8e>
8002cb16:	c3 c8       	rjmp	8002cb8e <spi_set_bits_per_transfer+0xaa>
    case 0:
      spi->CSR0.bits = len - 8;
8002cb18:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8002cb1c:	20 88       	sub	r8,8
8002cb1e:	5c 58       	castu.b	r8
8002cb20:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8002cb24:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
8002cb28:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002cb2c:	72 c8       	ld.w	r8,r9[0x30]
8002cb2e:	f1 da d0 84 	bfins	r8,r10,0x4,0x4
8002cb32:	93 c8       	st.w	r9[0x30],r8
      break;
8002cb34:	c2 d8       	rjmp	8002cb8e <spi_set_bits_per_transfer+0xaa>
    case 1:
      spi->CSR1.bits  = len - 8;
8002cb36:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8002cb3a:	20 88       	sub	r8,8
8002cb3c:	5c 58       	castu.b	r8
8002cb3e:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8002cb42:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
8002cb46:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002cb4a:	72 d8       	ld.w	r8,r9[0x34]
8002cb4c:	f1 da d0 84 	bfins	r8,r10,0x4,0x4
8002cb50:	93 d8       	st.w	r9[0x34],r8
      break;
8002cb52:	c1 e8       	rjmp	8002cb8e <spi_set_bits_per_transfer+0xaa>
    case 2:
      spi->CSR2.bits  = len - 8;
8002cb54:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8002cb58:	20 88       	sub	r8,8
8002cb5a:	5c 58       	castu.b	r8
8002cb5c:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8002cb60:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
8002cb64:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002cb68:	72 e8       	ld.w	r8,r9[0x38]
8002cb6a:	f1 da d0 84 	bfins	r8,r10,0x4,0x4
8002cb6e:	93 e8       	st.w	r9[0x38],r8
      break;
8002cb70:	c0 f8       	rjmp	8002cb8e <spi_set_bits_per_transfer+0xaa>
    case 3:
      spi->CSR3.bits  = len - 8;
8002cb72:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8002cb76:	20 88       	sub	r8,8
8002cb78:	5c 58       	castu.b	r8
8002cb7a:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8002cb7e:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
8002cb82:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002cb86:	72 f8       	ld.w	r8,r9[0x3c]
8002cb88:	f1 da d0 84 	bfins	r8,r10,0x4,0x4
8002cb8c:	93 f8       	st.w	r9[0x3c],r8
      break;
  }
}
8002cb8e:	2f dd       	sub	sp,-12
8002cb90:	e3 cd 80 80 	ldm	sp++,r7,pc

8002cb94 <spi_set_baudrate_register>:
 * \param chip_select Chip Select.
 * \param scbr        Baudrate Register.
 */
static inline void spi_set_baudrate_register(volatile avr32_spi_t *spi,uint8_t chip_select,
                        uint8_t scbr)
{
8002cb94:	eb cd 40 80 	pushm	r7,lr
8002cb98:	1a 97       	mov	r7,sp
8002cb9a:	20 3d       	sub	sp,12
8002cb9c:	ef 4c ff fc 	st.w	r7[-4],r12
8002cba0:	16 99       	mov	r9,r11
8002cba2:	14 98       	mov	r8,r10
8002cba4:	ef 69 ff f8 	st.b	r7[-8],r9
8002cba8:	ef 68 ff f4 	st.b	r7[-12],r8
  switch(chip_select) {
8002cbac:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8002cbb0:	58 18       	cp.w	r8,1
8002cbb2:	c1 40       	breq	8002cbda <spi_set_baudrate_register+0x46>
8002cbb4:	e0 89 00 05 	brgt	8002cbbe <spi_set_baudrate_register+0x2a>
8002cbb8:	58 08       	cp.w	r8,0
8002cbba:	c0 70       	breq	8002cbc8 <spi_set_baudrate_register+0x34>
8002cbbc:	c2 98       	rjmp	8002cc0e <spi_set_baudrate_register+0x7a>
8002cbbe:	58 28       	cp.w	r8,2
8002cbc0:	c1 60       	breq	8002cbec <spi_set_baudrate_register+0x58>
8002cbc2:	58 38       	cp.w	r8,3
8002cbc4:	c1 d0       	breq	8002cbfe <spi_set_baudrate_register+0x6a>
8002cbc6:	c2 48       	rjmp	8002cc0e <spi_set_baudrate_register+0x7a>
    case 0:
      spi->CSR0.scbr = scbr;
8002cbc8:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002cbcc:	72 c8       	ld.w	r8,r9[0x30]
8002cbce:	ef 3a ff f4 	ld.ub	r10,r7[-12]
8002cbd2:	f1 da d1 08 	bfins	r8,r10,0x8,0x8
8002cbd6:	93 c8       	st.w	r9[0x30],r8
      break;
8002cbd8:	c1 b8       	rjmp	8002cc0e <spi_set_baudrate_register+0x7a>
    case 1:
      spi->CSR1.scbr  = scbr;
8002cbda:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002cbde:	72 d8       	ld.w	r8,r9[0x34]
8002cbe0:	ef 3a ff f4 	ld.ub	r10,r7[-12]
8002cbe4:	f1 da d1 08 	bfins	r8,r10,0x8,0x8
8002cbe8:	93 d8       	st.w	r9[0x34],r8
      break;
8002cbea:	c1 28       	rjmp	8002cc0e <spi_set_baudrate_register+0x7a>
    case 2:
      spi->CSR2.scbr  = scbr;
8002cbec:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002cbf0:	72 e8       	ld.w	r8,r9[0x38]
8002cbf2:	ef 3a ff f4 	ld.ub	r10,r7[-12]
8002cbf6:	f1 da d1 08 	bfins	r8,r10,0x8,0x8
8002cbfa:	93 e8       	st.w	r9[0x38],r8
      break;
8002cbfc:	c0 98       	rjmp	8002cc0e <spi_set_baudrate_register+0x7a>
    case 3:
      spi->CSR3.scbr  = scbr;
8002cbfe:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002cc02:	72 f8       	ld.w	r8,r9[0x3c]
8002cc04:	ef 3a ff f4 	ld.ub	r10,r7[-12]
8002cc08:	f1 da d1 08 	bfins	r8,r10,0x8,0x8
8002cc0c:	93 f8       	st.w	r9[0x3c],r8
      break;
  }
}
8002cc0e:	2f dd       	sub	sp,-12
8002cc10:	e3 cd 80 80 	ldm	sp++,r7,pc

8002cc14 <spi_enable_active_mode>:
 *
 * \param spi         Base address of the SPI instance.
 * \param chip_select Chip Select.
 */
static inline void spi_enable_active_mode(volatile avr32_spi_t *spi,uint8_t chip_select)
{
8002cc14:	eb cd 40 80 	pushm	r7,lr
8002cc18:	1a 97       	mov	r7,sp
8002cc1a:	20 2d       	sub	sp,8
8002cc1c:	ef 4c ff fc 	st.w	r7[-4],r12
8002cc20:	16 98       	mov	r8,r11
8002cc22:	ef 68 ff f8 	st.b	r7[-8],r8
  switch(chip_select) {
8002cc26:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8002cc2a:	58 18       	cp.w	r8,1
8002cc2c:	c1 30       	breq	8002cc52 <spi_enable_active_mode+0x3e>
8002cc2e:	e0 89 00 05 	brgt	8002cc38 <spi_enable_active_mode+0x24>
8002cc32:	58 08       	cp.w	r8,0
8002cc34:	c0 70       	breq	8002cc42 <spi_enable_active_mode+0x2e>
8002cc36:	c2 58       	rjmp	8002cc80 <spi_enable_active_mode+0x6c>
8002cc38:	58 28       	cp.w	r8,2
8002cc3a:	c1 40       	breq	8002cc62 <spi_enable_active_mode+0x4e>
8002cc3c:	58 38       	cp.w	r8,3
8002cc3e:	c1 a0       	breq	8002cc72 <spi_enable_active_mode+0x5e>
8002cc40:	c2 08       	rjmp	8002cc80 <spi_enable_active_mode+0x6c>
    case 0:
      spi->CSR0.csaat = 1;
8002cc42:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002cc46:	72 c8       	ld.w	r8,r9[0x30]
8002cc48:	30 1a       	mov	r10,1
8002cc4a:	f1 da d0 61 	bfins	r8,r10,0x3,0x1
8002cc4e:	93 c8       	st.w	r9[0x30],r8
      break;
8002cc50:	c1 88       	rjmp	8002cc80 <spi_enable_active_mode+0x6c>
    case 1:
      spi->CSR1.csaat  = 1;
8002cc52:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002cc56:	72 d8       	ld.w	r8,r9[0x34]
8002cc58:	30 1a       	mov	r10,1
8002cc5a:	f1 da d0 61 	bfins	r8,r10,0x3,0x1
8002cc5e:	93 d8       	st.w	r9[0x34],r8
      break;
8002cc60:	c1 08       	rjmp	8002cc80 <spi_enable_active_mode+0x6c>
    case 2:
      spi->CSR2.csaat  = 1;
8002cc62:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002cc66:	72 e8       	ld.w	r8,r9[0x38]
8002cc68:	30 1a       	mov	r10,1
8002cc6a:	f1 da d0 61 	bfins	r8,r10,0x3,0x1
8002cc6e:	93 e8       	st.w	r9[0x38],r8
      break;
8002cc70:	c0 88       	rjmp	8002cc80 <spi_enable_active_mode+0x6c>
    case 3:
      spi->CSR3.csaat  = 1;
8002cc72:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002cc76:	72 f8       	ld.w	r8,r9[0x3c]
8002cc78:	30 1a       	mov	r10,1
8002cc7a:	f1 da d0 61 	bfins	r8,r10,0x3,0x1
8002cc7e:	93 f8       	st.w	r9[0x3c],r8
      break;
  }
}
8002cc80:	2f ed       	sub	sp,-8
8002cc82:	e3 cd 80 80 	ldm	sp++,r7,pc

8002cc86 <spi_set_mode>:
 * \param chip_select Chip Select.
 * \param flags       SPI Mode.
 */
static inline void spi_set_mode(volatile avr32_spi_t *spi,uint8_t chip_select,
                        uint8_t flags)
{
8002cc86:	eb cd 40 80 	pushm	r7,lr
8002cc8a:	1a 97       	mov	r7,sp
8002cc8c:	20 3d       	sub	sp,12
8002cc8e:	ef 4c ff fc 	st.w	r7[-4],r12
8002cc92:	16 99       	mov	r9,r11
8002cc94:	14 98       	mov	r8,r10
8002cc96:	ef 69 ff f8 	st.b	r7[-8],r9
8002cc9a:	ef 68 ff f4 	st.b	r7[-12],r8
  switch(chip_select) {
8002cc9e:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8002cca2:	58 18       	cp.w	r8,1
8002cca4:	c2 70       	breq	8002ccf2 <spi_set_mode+0x6c>
8002cca6:	e0 89 00 05 	brgt	8002ccb0 <spi_set_mode+0x2a>
8002ccaa:	58 08       	cp.w	r8,0
8002ccac:	c0 70       	breq	8002ccba <spi_set_mode+0x34>
8002ccae:	c7 58       	rjmp	8002cd98 <spi_set_mode+0x112>
8002ccb0:	58 28       	cp.w	r8,2
8002ccb2:	c3 c0       	breq	8002cd2a <spi_set_mode+0xa4>
8002ccb4:	58 38       	cp.w	r8,3
8002ccb6:	c5 60       	breq	8002cd62 <spi_set_mode+0xdc>
8002ccb8:	c7 08       	rjmp	8002cd98 <spi_set_mode+0x112>
    case 0:
      spi->CSR0.cpol = flags >> 1;
8002ccba:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8002ccbe:	a1 98       	lsr	r8,0x1
8002ccc0:	5c 58       	castu.b	r8
8002ccc2:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002ccc6:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
8002ccca:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002ccce:	72 c8       	ld.w	r8,r9[0x30]
8002ccd0:	f1 da d0 01 	bfins	r8,r10,0x0,0x1
8002ccd4:	93 c8       	st.w	r9[0x30],r8
      spi->CSR0.ncpha = (flags & 0x1) ^ 0x1;
8002ccd6:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8002ccda:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002ccde:	5f 08       	sreq	r8
8002cce0:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
8002cce4:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002cce8:	72 c8       	ld.w	r8,r9[0x30]
8002ccea:	f1 da d0 21 	bfins	r8,r10,0x1,0x1
8002ccee:	93 c8       	st.w	r9[0x30],r8
      break;
8002ccf0:	c5 48       	rjmp	8002cd98 <spi_set_mode+0x112>
    case 1:
      spi->CSR1.cpol  = flags >> 1;
8002ccf2:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8002ccf6:	a1 98       	lsr	r8,0x1
8002ccf8:	5c 58       	castu.b	r8
8002ccfa:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002ccfe:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
8002cd02:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002cd06:	72 d8       	ld.w	r8,r9[0x34]
8002cd08:	f1 da d0 01 	bfins	r8,r10,0x0,0x1
8002cd0c:	93 d8       	st.w	r9[0x34],r8
      spi->CSR1.ncpha = (flags & 0x1) ^ 0x1;
8002cd0e:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8002cd12:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002cd16:	5f 08       	sreq	r8
8002cd18:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
8002cd1c:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002cd20:	72 d8       	ld.w	r8,r9[0x34]
8002cd22:	f1 da d0 21 	bfins	r8,r10,0x1,0x1
8002cd26:	93 d8       	st.w	r9[0x34],r8
      break;
8002cd28:	c3 88       	rjmp	8002cd98 <spi_set_mode+0x112>
    case 2:
      spi->CSR2.cpol  = flags >> 1;
8002cd2a:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8002cd2e:	a1 98       	lsr	r8,0x1
8002cd30:	5c 58       	castu.b	r8
8002cd32:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002cd36:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
8002cd3a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002cd3e:	72 e8       	ld.w	r8,r9[0x38]
8002cd40:	f1 da d0 01 	bfins	r8,r10,0x0,0x1
8002cd44:	93 e8       	st.w	r9[0x38],r8
      spi->CSR2.ncpha = (flags & 0x1) ^ 0x1;
8002cd46:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8002cd4a:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002cd4e:	5f 08       	sreq	r8
8002cd50:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
8002cd54:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002cd58:	72 e8       	ld.w	r8,r9[0x38]
8002cd5a:	f1 da d0 21 	bfins	r8,r10,0x1,0x1
8002cd5e:	93 e8       	st.w	r9[0x38],r8
      break;
8002cd60:	c1 c8       	rjmp	8002cd98 <spi_set_mode+0x112>
    case 3:
      spi->CSR3.cpol  = flags >> 1;
8002cd62:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8002cd66:	a1 98       	lsr	r8,0x1
8002cd68:	5c 58       	castu.b	r8
8002cd6a:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002cd6e:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
8002cd72:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002cd76:	72 f8       	ld.w	r8,r9[0x3c]
8002cd78:	f1 da d0 01 	bfins	r8,r10,0x0,0x1
8002cd7c:	93 f8       	st.w	r9[0x3c],r8
      spi->CSR3.ncpha = (flags & 0x1) ^ 0x1;
8002cd7e:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8002cd82:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002cd86:	5f 08       	sreq	r8
8002cd88:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
8002cd8c:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002cd90:	72 f8       	ld.w	r8,r9[0x3c]
8002cd92:	f1 da d0 21 	bfins	r8,r10,0x1,0x1
8002cd96:	93 f8       	st.w	r9[0x3c],r8
      break;
  }
}
8002cd98:	2f dd       	sub	sp,-12
8002cd9a:	e3 cd 80 80 	ldm	sp++,r7,pc

8002cd9e <spi_put>:
 * \param spi Base address of the SPI instance.
 * \param data The data byte to be loaded 
 *
 */
static inline void spi_put(volatile avr32_spi_t *spi, uint16_t data)
{
8002cd9e:	eb cd 40 80 	pushm	r7,lr
8002cda2:	1a 97       	mov	r7,sp
8002cda4:	20 2d       	sub	sp,8
8002cda6:	ef 4c ff fc 	st.w	r7[-4],r12
8002cdaa:	16 98       	mov	r8,r11
8002cdac:	ef 58 ff f8 	st.h	r7[-8],r8
	spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
8002cdb0:	ef 19 ff f8 	ld.uh	r9,r7[-8]
8002cdb4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002cdb8:	91 39       	st.w	r8[0xc],r9
}
8002cdba:	2f ed       	sub	sp,-8
8002cdbc:	e3 cd 80 80 	ldm	sp++,r7,pc

8002cdc0 <spi_get>:
 * \param spi Base address of the SPI instance.
 * \return The data byte 
 *
 */
static inline uint16_t spi_get(volatile avr32_spi_t *spi)
{
8002cdc0:	eb cd 40 80 	pushm	r7,lr
8002cdc4:	1a 97       	mov	r7,sp
8002cdc6:	20 1d       	sub	sp,4
8002cdc8:	ef 4c ff fc 	st.w	r7[-4],r12
	return (spi->rdr >> AVR32_SPI_RDR_RD_OFFSET);
8002cdcc:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002cdd0:	70 28       	ld.w	r8,r8[0x8]
8002cdd2:	5c 88       	casts.h	r8
}
8002cdd4:	10 9c       	mov	r12,r8
8002cdd6:	2f fd       	sub	sp,-4
8002cdd8:	e3 cd 80 80 	ldm	sp++,r7,pc

8002cddc <spi_is_tx_ready>:
 * \return Status.
 *   \retval 1  All transmissions complete.
 *   \retval 0  Transmissions not complete.
 */
static inline bool spi_is_tx_ready(volatile avr32_spi_t *spi)
{
8002cddc:	eb cd 40 80 	pushm	r7,lr
8002cde0:	1a 97       	mov	r7,sp
8002cde2:	20 1d       	sub	sp,4
8002cde4:	ef 4c ff fc 	st.w	r7[-4],r12
  return (spi->sr & AVR32_SPI_SR_TDRE_MASK) != 0;
8002cde8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002cdec:	70 48       	ld.w	r8,r8[0x10]
8002cdee:	e2 18 00 02 	andl	r8,0x2,COH
8002cdf2:	5f 18       	srne	r8
8002cdf4:	5c 58       	castu.b	r8
}
8002cdf6:	10 9c       	mov	r12,r8
8002cdf8:	2f fd       	sub	sp,-4
8002cdfa:	e3 cd 80 80 	ldm	sp++,r7,pc

8002cdfe <spi_is_rx_ready>:
 * \param spi Base address of the SPI instance.
 *
 * \return \c 1 if the SPI Receiver is ready, otherwise \c 0.
 */
static inline bool spi_is_rx_ready(volatile avr32_spi_t *spi)
{
8002cdfe:	eb cd 40 80 	pushm	r7,lr
8002ce02:	1a 97       	mov	r7,sp
8002ce04:	20 1d       	sub	sp,4
8002ce06:	ef 4c ff fc 	st.w	r7[-4],r12
  return (spi->sr & (AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) ==
8002ce0a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ce0e:	70 48       	ld.w	r8,r8[0x10]
8002ce10:	e2 18 02 01 	andl	r8,0x201,COH
8002ce14:	e0 48 02 01 	cp.w	r8,513
8002ce18:	5f 08       	sreq	r8
8002ce1a:	5c 58       	castu.b	r8
         (AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK);
}
8002ce1c:	10 9c       	mov	r12,r8
8002ce1e:	2f fd       	sub	sp,-4
8002ce20:	e3 cd 80 80 	ldm	sp++,r7,pc

8002ce24 <spi_write_single>:
 * \param spi    Base address of the SPI instance.
 * \param data   Data to write
 *
 */
static inline void spi_write_single(volatile avr32_spi_t *spi, uint8_t data)
{
8002ce24:	eb cd 40 c0 	pushm	r6-r7,lr
8002ce28:	1a 97       	mov	r7,sp
8002ce2a:	20 2d       	sub	sp,8
8002ce2c:	48 86       	lddpc	r6,8002ce4c <spi_write_single+0x28>
8002ce2e:	1e 26       	rsub	r6,pc
8002ce30:	ef 4c ff fc 	st.w	r7[-4],r12
8002ce34:	16 98       	mov	r8,r11
8002ce36:	ef 68 ff f8 	st.b	r7[-8],r8
	spi_put(spi,(uint16_t)data);
8002ce3a:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8002ce3e:	10 9b       	mov	r11,r8
8002ce40:	ee fc ff fc 	ld.w	r12,r7[-4]
8002ce44:	ca df       	rcall	8002cd9e <spi_put>
}
8002ce46:	2f ed       	sub	sp,-8
8002ce48:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002ce4c:	80 02       	ld.sh	r2,r0[0x0]
8002ce4e:	cc b2       	brcc	8002cde4 <spi_is_tx_ready+0x8>

8002ce50 <spi_read_single>:
 * \param spi    Base address of the SPI instance.
 * \param data   Data to read
 *
 */
static inline void spi_read_single(volatile avr32_spi_t *spi, uint8_t *data)
{
8002ce50:	eb cd 40 c0 	pushm	r6-r7,lr
8002ce54:	1a 97       	mov	r7,sp
8002ce56:	20 2d       	sub	sp,8
8002ce58:	48 96       	lddpc	r6,8002ce7c <spi_read_single+0x2c>
8002ce5a:	1e 26       	rsub	r6,pc
8002ce5c:	ef 4c ff fc 	st.w	r7[-4],r12
8002ce60:	ef 4b ff f8 	st.w	r7[-8],r11
	*data = (uint8_t)spi_get(spi);
8002ce64:	ee fc ff fc 	ld.w	r12,r7[-4]
8002ce68:	ca cf       	rcall	8002cdc0 <spi_get>
8002ce6a:	18 98       	mov	r8,r12
8002ce6c:	5c 88       	casts.h	r8
8002ce6e:	5c 58       	castu.b	r8
8002ce70:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002ce74:	b2 88       	st.b	r9[0x0],r8
}
8002ce76:	2f ed       	sub	sp,-8
8002ce78:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002ce7c:	80 02       	ld.sh	r2,r0[0x0]
8002ce7e:	cc de       	rcall	8002cc18 <spi_enable_active_mode+0x4>

8002ce80 <spi_master_setup_device>:


void spi_master_setup_device(volatile avr32_spi_t *spi, struct spi_device *device, 
     spi_flags_t flags, uint32_t baud_rate,
     board_spi_select_id_t sel_id)
{
8002ce80:	eb cd 40 c0 	pushm	r6-r7,lr
8002ce84:	1a 97       	mov	r7,sp
8002ce86:	20 5d       	sub	sp,20
8002ce88:	4a 76       	lddpc	r6,8002cf24 <spi_master_setup_device+0xa4>
8002ce8a:	1e 26       	rsub	r6,pc
8002ce8c:	ef 4c ff fc 	st.w	r7[-4],r12
8002ce90:	ef 4b ff f8 	st.w	r7[-8],r11
8002ce94:	ef 49 ff f0 	st.w	r7[-16],r9
8002ce98:	14 99       	mov	r9,r10
8002ce9a:	ef 69 ff f4 	st.b	r7[-12],r9
8002ce9e:	ef 68 ff ec 	st.b	r7[-20],r8
  spi_set_chipselect_delay_bct(spi,device->id,CONFIG_SPI_MASTER_DELAY_BCT);
8002cea2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002cea6:	11 88       	ld.ub	r8,r8[0x0]
8002cea8:	30 0a       	mov	r10,0
8002ceaa:	10 9b       	mov	r11,r8
8002ceac:	ee fc ff fc 	ld.w	r12,r7[-4]
8002ceb0:	fe b0 fd 9a 	rcall	8002c9e4 <spi_set_chipselect_delay_bct>
  spi_set_chipselect_delay_bs(spi,device->id,CONFIG_SPI_MASTER_DELAY_BS);
8002ceb4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ceb8:	11 88       	ld.ub	r8,r8[0x0]
8002ceba:	30 0a       	mov	r10,0
8002cebc:	10 9b       	mov	r11,r8
8002cebe:	ee fc ff fc 	ld.w	r12,r7[-4]
8002cec2:	fe b0 fd d1 	rcall	8002ca64 <spi_set_chipselect_delay_bs>
  spi_set_bits_per_transfer(spi,device->id,CONFIG_SPI_MASTER_BITS_PER_TRANSFER);
8002cec6:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ceca:	11 88       	ld.ub	r8,r8[0x0]
8002cecc:	30 8a       	mov	r10,8
8002cece:	10 9b       	mov	r11,r8
8002ced0:	ee fc ff fc 	ld.w	r12,r7[-4]
8002ced4:	c0 8e       	rcall	8002cae4 <spi_set_bits_per_transfer>
  spi_set_baudrate_register(spi,device->id,getBaudDiv(baud_rate, sysclk_get_pba_hz()));
8002ced6:	fe b0 fd 7b 	rcall	8002c9cc <sysclk_get_pba_hz>
8002ceda:	18 98       	mov	r8,r12
8002cedc:	10 9b       	mov	r11,r8
8002cede:	ee fc ff f0 	ld.w	r12,r7[-16]
8002cee2:	f0 16 01 19 	mcall	r6[1124]
8002cee6:	18 98       	mov	r8,r12
8002cee8:	5c 58       	castu.b	r8
8002ceea:	10 99       	mov	r9,r8
8002ceec:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002cef0:	11 88       	ld.ub	r8,r8[0x0]
8002cef2:	12 9a       	mov	r10,r9
8002cef4:	10 9b       	mov	r11,r8
8002cef6:	ee fc ff fc 	ld.w	r12,r7[-4]
8002cefa:	c4 de       	rcall	8002cb94 <spi_set_baudrate_register>
  spi_enable_active_mode(spi,device->id);
8002cefc:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002cf00:	11 88       	ld.ub	r8,r8[0x0]
8002cf02:	10 9b       	mov	r11,r8
8002cf04:	ee fc ff fc 	ld.w	r12,r7[-4]
8002cf08:	c8 6e       	rcall	8002cc14 <spi_enable_active_mode>
  spi_set_mode(spi,device->id,flags);
8002cf0a:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8002cf0e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002cf12:	11 88       	ld.ub	r8,r8[0x0]
8002cf14:	12 9a       	mov	r10,r9
8002cf16:	10 9b       	mov	r11,r8
8002cf18:	ee fc ff fc 	ld.w	r12,r7[-4]
8002cf1c:	cb 5e       	rcall	8002cc86 <spi_set_mode>
    {
      while(1);
    }
  }
#endif
}
8002cf1e:	2f bd       	sub	sp,-20
8002cf20:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002cf24:	80 02       	ld.sh	r2,r0[0x0]
8002cf26:	cd 0e       	rcall	8002ccc6 <spi_set_mode+0x40>

8002cf28 <spi_read_packet>:

status_code_t spi_read_packet(volatile avr32_spi_t *spi,uint8_t *data, size_t len)
{
8002cf28:	eb cd 40 c0 	pushm	r6-r7,lr
8002cf2c:	1a 97       	mov	r7,sp
8002cf2e:	20 6d       	sub	sp,24
8002cf30:	4b 66       	lddpc	r6,8002d008 <spi_read_packet+0xe0>
8002cf32:	1e 26       	rsub	r6,pc
8002cf34:	ef 4c ff f0 	st.w	r7[-16],r12
8002cf38:	ef 4b ff ec 	st.w	r7[-20],r11
8002cf3c:	ef 4a ff e8 	st.w	r7[-24],r10
  unsigned int timeout = SPI_TIMEOUT;
8002cf40:	e0 68 3a 98 	mov	r8,15000
8002cf44:	ef 48 ff f8 	st.w	r7[-8],r8
  uint8_t val;  
  size_t i=0;  
8002cf48:	30 08       	mov	r8,0
8002cf4a:	ef 48 ff fc 	st.w	r7[-4],r8
  while(len) {
8002cf4e:	c5 48       	rjmp	8002cff6 <spi_read_packet+0xce>
  	 timeout = SPI_TIMEOUT;
8002cf50:	e0 68 3a 98 	mov	r8,15000
8002cf54:	ef 48 ff f8 	st.w	r7[-8],r8
     while (!spi_is_tx_ready(spi)) {
8002cf58:	c0 f8       	rjmp	8002cf76 <spi_read_packet+0x4e>
       if (!timeout--) {
8002cf5a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002cf5e:	58 08       	cp.w	r8,0
8002cf60:	5f 08       	sreq	r8
8002cf62:	5c 58       	castu.b	r8
8002cf64:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002cf68:	20 19       	sub	r9,1
8002cf6a:	ef 49 ff f8 	st.w	r7[-8],r9
8002cf6e:	58 08       	cp.w	r8,0
8002cf70:	c0 30       	breq	8002cf76 <spi_read_packet+0x4e>
         return ERR_TIMEOUT;
8002cf72:	3f d8       	mov	r8,-3
8002cf74:	c4 68       	rjmp	8002d000 <spi_read_packet+0xd8>
  unsigned int timeout = SPI_TIMEOUT;
  uint8_t val;  
  size_t i=0;  
  while(len) {
  	 timeout = SPI_TIMEOUT;
     while (!spi_is_tx_ready(spi)) {
8002cf76:	ee fc ff f0 	ld.w	r12,r7[-16]
8002cf7a:	c3 1f       	rcall	8002cddc <spi_is_tx_ready>
8002cf7c:	18 98       	mov	r8,r12
8002cf7e:	ec 18 00 01 	eorl	r8,0x1
8002cf82:	5c 58       	castu.b	r8
8002cf84:	ce b1       	brne	8002cf5a <spi_read_packet+0x32>
       if (!timeout--) {
         return ERR_TIMEOUT;
       }
     }
     spi_write_single(spi,CONFIG_SPI_MASTER_DUMMY);
8002cf86:	e0 6b 00 ff 	mov	r11,255
8002cf8a:	ee fc ff f0 	ld.w	r12,r7[-16]
8002cf8e:	c4 bf       	rcall	8002ce24 <spi_write_single>
     timeout = SPI_TIMEOUT;
8002cf90:	e0 68 3a 98 	mov	r8,15000
8002cf94:	ef 48 ff f8 	st.w	r7[-8],r8
     while (!spi_is_rx_ready(spi)) {
8002cf98:	c0 f8       	rjmp	8002cfb6 <spi_read_packet+0x8e>
       if (!timeout--) {
8002cf9a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002cf9e:	58 08       	cp.w	r8,0
8002cfa0:	5f 08       	sreq	r8
8002cfa2:	5c 58       	castu.b	r8
8002cfa4:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002cfa8:	20 19       	sub	r9,1
8002cfaa:	ef 49 ff f8 	st.w	r7[-8],r9
8002cfae:	58 08       	cp.w	r8,0
8002cfb0:	c0 30       	breq	8002cfb6 <spi_read_packet+0x8e>
         return ERR_TIMEOUT;
8002cfb2:	3f d8       	mov	r8,-3
8002cfb4:	c2 68       	rjmp	8002d000 <spi_read_packet+0xd8>
         return ERR_TIMEOUT;
       }
     }
     spi_write_single(spi,CONFIG_SPI_MASTER_DUMMY);
     timeout = SPI_TIMEOUT;
     while (!spi_is_rx_ready(spi)) {
8002cfb6:	ee fc ff f0 	ld.w	r12,r7[-16]
8002cfba:	c2 2f       	rcall	8002cdfe <spi_is_rx_ready>
8002cfbc:	18 98       	mov	r8,r12
8002cfbe:	ec 18 00 01 	eorl	r8,0x1
8002cfc2:	5c 58       	castu.b	r8
8002cfc4:	ce b1       	brne	8002cf9a <spi_read_packet+0x72>
       if (!timeout--) {
         return ERR_TIMEOUT;
       }
     }
     spi_read_single(spi,&val);
8002cfc6:	ee c8 00 09 	sub	r8,r7,9
8002cfca:	10 9b       	mov	r11,r8
8002cfcc:	ee fc ff f0 	ld.w	r12,r7[-16]
8002cfd0:	c4 0f       	rcall	8002ce50 <spi_read_single>
     data[i] = val;
8002cfd2:	ee f9 ff ec 	ld.w	r9,r7[-20]
8002cfd6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002cfda:	10 09       	add	r9,r8
8002cfdc:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8002cfe0:	b2 88       	st.b	r9[0x0],r8
     i++;
8002cfe2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002cfe6:	2f f8       	sub	r8,-1
8002cfe8:	ef 48 ff fc 	st.w	r7[-4],r8
     len--;
8002cfec:	ee f8 ff e8 	ld.w	r8,r7[-24]
8002cff0:	20 18       	sub	r8,1
8002cff2:	ef 48 ff e8 	st.w	r7[-24],r8
status_code_t spi_read_packet(volatile avr32_spi_t *spi,uint8_t *data, size_t len)
{
  unsigned int timeout = SPI_TIMEOUT;
  uint8_t val;  
  size_t i=0;  
  while(len) {
8002cff6:	ee f8 ff e8 	ld.w	r8,r7[-24]
8002cffa:	58 08       	cp.w	r8,0
8002cffc:	ca a1       	brne	8002cf50 <spi_read_packet+0x28>
     spi_read_single(spi,&val);
     data[i] = val;
     i++;
     len--;
  }
  return STATUS_OK;
8002cffe:	30 08       	mov	r8,0
}
8002d000:	10 9c       	mov	r12,r8
8002d002:	2f ad       	sub	sp,-24
8002d004:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002d008:	80 02       	ld.sh	r2,r0[0x0]
8002d00a:	cd b6       	brmi	8002cfc0 <spi_read_packet+0x98>

8002d00c <spi_write_packet>:

status_code_t spi_write_packet(volatile avr32_spi_t *spi, const uint8_t *data, size_t len)
{
8002d00c:	eb cd 40 c0 	pushm	r6-r7,lr
8002d010:	1a 97       	mov	r7,sp
8002d012:	20 6d       	sub	sp,24
8002d014:	4a 76       	lddpc	r6,8002d0b0 <spi_write_packet+0xa4>
8002d016:	1e 26       	rsub	r6,pc
8002d018:	ef 4c ff f0 	st.w	r7[-16],r12
8002d01c:	ef 4b ff ec 	st.w	r7[-20],r11
8002d020:	ef 4a ff e8 	st.w	r7[-24],r10
  unsigned int timeout = SPI_TIMEOUT;
8002d024:	e0 68 3a 98 	mov	r8,15000
8002d028:	ef 48 ff f4 	st.w	r7[-12],r8
  size_t i=0;
8002d02c:	30 08       	mov	r8,0
8002d02e:	ef 48 ff f8 	st.w	r7[-8],r8
  uint8_t val;
  while(len) {
8002d032:	c3 58       	rjmp	8002d09c <spi_write_packet+0x90>
     timeout = SPI_TIMEOUT;
8002d034:	e0 68 3a 98 	mov	r8,15000
8002d038:	ef 48 ff f4 	st.w	r7[-12],r8
     while (!spi_is_tx_ready(spi)) {
8002d03c:	c0 f8       	rjmp	8002d05a <spi_write_packet+0x4e>
       if (!timeout--) {
8002d03e:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d042:	58 08       	cp.w	r8,0
8002d044:	5f 08       	sreq	r8
8002d046:	5c 58       	castu.b	r8
8002d048:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002d04c:	20 19       	sub	r9,1
8002d04e:	ef 49 ff f4 	st.w	r7[-12],r9
8002d052:	58 08       	cp.w	r8,0
8002d054:	c0 30       	breq	8002d05a <spi_write_packet+0x4e>
         return ERR_TIMEOUT;
8002d056:	3f d8       	mov	r8,-3
8002d058:	c2 78       	rjmp	8002d0a6 <spi_write_packet+0x9a>
  unsigned int timeout = SPI_TIMEOUT;
  size_t i=0;
  uint8_t val;
  while(len) {
     timeout = SPI_TIMEOUT;
     while (!spi_is_tx_ready(spi)) {
8002d05a:	ee fc ff f0 	ld.w	r12,r7[-16]
8002d05e:	cb fe       	rcall	8002cddc <spi_is_tx_ready>
8002d060:	18 98       	mov	r8,r12
8002d062:	ec 18 00 01 	eorl	r8,0x1
8002d066:	5c 58       	castu.b	r8
8002d068:	ce b1       	brne	8002d03e <spi_write_packet+0x32>
       if (!timeout--) {
         return ERR_TIMEOUT;
       }
     }
     val = data[i];     
8002d06a:	ee f9 ff ec 	ld.w	r9,r7[-20]
8002d06e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002d072:	f2 08 00 08 	add	r8,r9,r8
8002d076:	11 88       	ld.ub	r8,r8[0x0]
8002d078:	ef 68 ff ff 	st.b	r7[-1],r8
     spi_write_single(spi,val);
8002d07c:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8002d080:	10 9b       	mov	r11,r8
8002d082:	ee fc ff f0 	ld.w	r12,r7[-16]
8002d086:	cc fe       	rcall	8002ce24 <spi_write_single>
     i++;
8002d088:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002d08c:	2f f8       	sub	r8,-1
8002d08e:	ef 48 ff f8 	st.w	r7[-8],r8
     len--;
8002d092:	ee f8 ff e8 	ld.w	r8,r7[-24]
8002d096:	20 18       	sub	r8,1
8002d098:	ef 48 ff e8 	st.w	r7[-24],r8
status_code_t spi_write_packet(volatile avr32_spi_t *spi, const uint8_t *data, size_t len)
{
  unsigned int timeout = SPI_TIMEOUT;
  size_t i=0;
  uint8_t val;
  while(len) {
8002d09c:	ee f8 ff e8 	ld.w	r8,r7[-24]
8002d0a0:	58 08       	cp.w	r8,0
8002d0a2:	cc 91       	brne	8002d034 <spi_write_packet+0x28>
     val = data[i];     
     spi_write_single(spi,val);
     i++;
     len--;
  }
  return STATUS_OK;
8002d0a4:	30 08       	mov	r8,0
}
8002d0a6:	10 9c       	mov	r12,r8
8002d0a8:	2f ad       	sub	sp,-24
8002d0aa:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002d0ae:	00 00       	add	r0,r0
8002d0b0:	80 02       	ld.sh	r2,r0[0x0]
8002d0b2:	ce 9a       	rjmp	8002ce84 <spi_master_setup_device+0x4>

8002d0b4 <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
8002d0b4:	eb cd 40 c0 	pushm	r6-r7,lr
8002d0b8:	1a 97       	mov	r7,sp
8002d0ba:	20 6d       	sub	sp,24
8002d0bc:	49 e6       	lddpc	r6,8002d134 <interpolate+0x80>
8002d0be:	1e 26       	rsub	r6,pc
8002d0c0:	ef 4c ff f8 	st.w	r7[-8],r12
8002d0c4:	ef 4b ff f4 	st.w	r7[-12],r11
8002d0c8:	ef 4a ff f0 	st.w	r7[-16],r10
8002d0cc:	ef 49 ff ec 	st.w	r7[-20],r9
8002d0d0:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
8002d0d4:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002d0d8:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002d0dc:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
8002d0e0:	c0 41       	brne	8002d0e8 <interpolate+0x34>
	{
		return y1;
8002d0e2:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002d0e6:	c2 38       	rjmp	8002d12c <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
8002d0e8:	ee f9 ff e8 	ld.w	r9,r7[-24]
8002d0ec:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002d0f0:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8002d0f4:	ee fa ff f8 	ld.w	r10,r7[-8]
8002d0f8:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d0fc:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
8002d100:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8002d104:	ee fa ff f0 	ld.w	r10,r7[-16]
8002d108:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002d10c:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8002d110:	12 9b       	mov	r11,r9
8002d112:	10 9c       	mov	r12,r8
8002d114:	f0 16 00 08 	mcall	r6[32]
8002d118:	18 98       	mov	r8,r12
8002d11a:	10 99       	mov	r9,r8
8002d11c:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002d120:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8002d124:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
8002d128:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
8002d12c:	10 9c       	mov	r12,r8
8002d12e:	2f ad       	sub	sp,-24
8002d130:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002d134:	80 02       	ld.sh	r2,r0[0x0]
8002d136:	cf 42       	brcc	8002d11e <interpolate+0x6a>

8002d138 <mav_array_memcpy>:

/*
  like memcpy(), but if src is NULL, do a memset to zero
*/
static void mav_array_memcpy(void *dest, const void *src, size_t n)
{
8002d138:	eb cd 40 c0 	pushm	r6-r7,lr
8002d13c:	1a 97       	mov	r7,sp
8002d13e:	20 3d       	sub	sp,12
8002d140:	49 06       	lddpc	r6,8002d180 <mav_array_memcpy+0x48>
8002d142:	1e 26       	rsub	r6,pc
8002d144:	ef 4c ff fc 	st.w	r7[-4],r12
8002d148:	ef 4b ff f8 	st.w	r7[-8],r11
8002d14c:	ef 4a ff f4 	st.w	r7[-12],r10
	if (src == NULL) {
8002d150:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002d154:	58 08       	cp.w	r8,0
8002d156:	c0 91       	brne	8002d168 <mav_array_memcpy+0x30>
		memset(dest, 0, n);
8002d158:	ee fa ff f4 	ld.w	r10,r7[-12]
8002d15c:	30 0b       	mov	r11,0
8002d15e:	ee fc ff fc 	ld.w	r12,r7[-4]
8002d162:	f0 16 00 30 	mcall	r6[192]
8002d166:	c0 98       	rjmp	8002d178 <mav_array_memcpy+0x40>
	} else {
		memcpy(dest, src, n);
8002d168:	ee fa ff f4 	ld.w	r10,r7[-12]
8002d16c:	ee fb ff f8 	ld.w	r11,r7[-8]
8002d170:	ee fc ff fc 	ld.w	r12,r7[-4]
8002d174:	f0 16 00 20 	mcall	r6[128]
	}
}
8002d178:	2f dd       	sub	sp,-12
8002d17a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002d17e:	00 00       	add	r0,r0
8002d180:	80 02       	ld.sh	r2,r0[0x0]
8002d182:	cf c6       	brmi	8002d17a <mav_array_memcpy+0x42>

8002d184 <osc_get_rate>:
/**
 * \todo RC8M may run at either 8 MHz or 1 MHz. Currently, we assume
 * it's always running at 8 MHz.
 */
static inline uint32_t osc_get_rate(uint8_t id)
{
8002d184:	eb cd 40 80 	pushm	r7,lr
8002d188:	1a 97       	mov	r7,sp
8002d18a:	20 1d       	sub	sp,4
8002d18c:	18 98       	mov	r8,r12
8002d18e:	ef 68 ff fc 	st.b	r7[-4],r8
	switch (id) {
8002d192:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8002d196:	58 38       	cp.w	r8,3
8002d198:	c1 20       	breq	8002d1bc <osc_get_rate+0x38>
8002d19a:	e0 89 00 07 	brgt	8002d1a8 <osc_get_rate+0x24>
8002d19e:	58 08       	cp.w	r8,0
8002d1a0:	c0 90       	breq	8002d1b2 <osc_get_rate+0x2e>
8002d1a2:	58 28       	cp.w	r8,2
8002d1a4:	c0 f0       	breq	8002d1c2 <osc_get_rate+0x3e>
8002d1a6:	c1 b8       	rjmp	8002d1dc <osc_get_rate+0x58>
8002d1a8:	58 48       	cp.w	r8,4
8002d1aa:	c1 10       	breq	8002d1cc <osc_get_rate+0x48>
8002d1ac:	58 58       	cp.w	r8,5
8002d1ae:	c1 40       	breq	8002d1d6 <osc_get_rate+0x52>
8002d1b0:	c1 68       	rjmp	8002d1dc <osc_get_rate+0x58>
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return BOARD_OSC0_HZ;
8002d1b2:	e0 68 24 00 	mov	r8,9216
8002d1b6:	ea 18 00 f4 	orh	r8,0xf4
8002d1ba:	c1 28       	rjmp	8002d1de <osc_get_rate+0x5a>
		return BOARD_OSC1_HZ;
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		return BOARD_OSC32_HZ;
8002d1bc:	e0 68 80 00 	mov	r8,32768
8002d1c0:	c0 f8       	rjmp	8002d1de <osc_get_rate+0x5a>
#endif

	case OSC_ID_RC8M:
		return OSC_RC8M_NOMINAL_HZ;
8002d1c2:	e0 68 12 00 	mov	r8,4608
8002d1c6:	ea 18 00 7a 	orh	r8,0x7a
8002d1ca:	c0 a8       	rjmp	8002d1de <osc_get_rate+0x5a>

	case OSC_ID_RC120M:
		return OSC_RC120M_NOMINAL_HZ;
8002d1cc:	e0 68 0e 00 	mov	r8,3584
8002d1d0:	ea 18 07 27 	orh	r8,0x727
8002d1d4:	c0 58       	rjmp	8002d1de <osc_get_rate+0x5a>

	case OSC_ID_RCSYS:
		return OSC_RCSYS_NOMINAL_HZ;
8002d1d6:	e0 78 c1 38 	mov	r8,115000
8002d1da:	c0 28       	rjmp	8002d1de <osc_get_rate+0x5a>

	default:
		/* unhandled_case(id); */
		return 0;
8002d1dc:	30 08       	mov	r8,0
	}
}
8002d1de:	10 9c       	mov	r12,r8
8002d1e0:	2f fd       	sub	sp,-4
8002d1e2:	e3 cd 80 80 	ldm	sp++,r7,pc

8002d1e6 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern bool sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
8002d1e6:	eb cd 40 c0 	pushm	r6-r7,lr
8002d1ea:	1a 97       	mov	r7,sp
8002d1ec:	48 56       	lddpc	r6,8002d200 <sysclk_get_main_hz+0x1a>
8002d1ee:	1e 26       	rsub	r6,pc
		return BOARD_OSC1_HZ;
#endif

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLL0:
		return pll_get_default_rate(0);
8002d1f0:	30 0c       	mov	r12,0
8002d1f2:	cc 9f       	rcall	8002d184 <osc_get_rate>
8002d1f4:	18 98       	mov	r8,r12
8002d1f6:	a3 68       	lsl	r8,0x2

	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
8002d1f8:	10 9c       	mov	r12,r8
8002d1fa:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002d1fe:	00 00       	add	r0,r0
8002d200:	80 02       	ld.sh	r2,r0[0x0]
8002d202:	d0 72       	popm	r0-r9

8002d204 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
8002d204:	eb cd 40 c0 	pushm	r6-r7,lr
8002d208:	1a 97       	mov	r7,sp
8002d20a:	48 46       	lddpc	r6,8002d218 <sysclk_get_cpu_hz+0x14>
8002d20c:	1e 26       	rsub	r6,pc
	return sysclk_get_main_hz() >> CONFIG_SYSCLK_CPU_DIV;
8002d20e:	ce cf       	rcall	8002d1e6 <sysclk_get_main_hz>
8002d210:	18 98       	mov	r8,r12
}
8002d212:	10 9c       	mov	r12,r8
8002d214:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002d218:	80 02       	ld.sh	r2,r0[0x0]
8002d21a:	d0 90       	acall	0x9

8002d21c <sleepmgr_init>:
 * Sets all lock counts to 0, except the very last one, which is set to 1. This
 * is done to simplify the algorithm for finding the deepest allowable sleep
 * mode in \ref sleepmgr_enter_sleep.
 */
static inline void sleepmgr_init(void)
{
8002d21c:	eb cd 40 c0 	pushm	r6-r7,lr
8002d220:	1a 97       	mov	r7,sp
8002d222:	20 1d       	sub	sp,4
8002d224:	49 06       	lddpc	r6,8002d264 <sleepmgr_init+0x48>
8002d226:	1e 26       	rsub	r6,pc
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
8002d228:	30 08       	mov	r8,0
8002d22a:	ef 68 ff ff 	st.b	r7[-1],r8
8002d22e:	c0 d8       	rjmp	8002d248 <sleepmgr_init+0x2c>
		sleepmgr_locks[i] = 0;
8002d230:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8002d234:	ec fa 03 d4 	ld.w	r10,r6[980]
8002d238:	30 08       	mov	r8,0
8002d23a:	f4 09 0b 08 	st.b	r10[r9],r8
static inline void sleepmgr_init(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
8002d23e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8002d242:	2f f8       	sub	r8,-1
8002d244:	ef 68 ff ff 	st.b	r7[-1],r8
8002d248:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8002d24c:	30 58       	mov	r8,5
8002d24e:	f0 09 18 00 	cp.b	r9,r8
8002d252:	fe 98 ff ef 	brls	8002d230 <sleepmgr_init+0x14>
		sleepmgr_locks[i] = 0;
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
8002d256:	ec f9 03 d4 	ld.w	r9,r6[980]
8002d25a:	30 18       	mov	r8,1
8002d25c:	b2 e8       	st.b	r9[0x6],r8
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
8002d25e:	2f fd       	sub	sp,-4
8002d260:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002d264:	80 02       	ld.sh	r2,r0[0x0]
8002d266:	d0 aa       	popm	r4-r7,r10
8002d268:	42 6f       	lddsp	pc,sp[0x98]
8002d26a:	61 72       	ld.w	r2,r0[0x5c]
8002d26c:	64 20       	ld.w	r0,r2[0x8]
8002d26e:	69 6e       	ld.w	lr,r4[0x58]
8002d270:	69 74       	ld.w	r4,r4[0x5c]
8002d272:	69 61       	ld.w	r1,r4[0x58]
8002d274:	6c 69       	ld.w	r9,r6[0x18]
8002d276:	73 65       	ld.w	r5,r9[0x58]
8002d278:	64 2e       	ld.w	lr,r2[0x8]
8002d27a:	0a 00       	add	r0,r5

8002d27c <initialise_board>:
#include "bmp085.h"
#include "analog_monitor.h"

//static volatile board_hardware_t board_hardware;

void initialise_board(central_data_t *centralData) {
8002d27c:	eb cd 40 e0 	pushm	r5-r7,lr
8002d280:	1a 97       	mov	r7,sp
8002d282:	20 3d       	sub	sp,12
8002d284:	4f 66       	lddpc	r6,8002d45c <initialise_board+0x1e0>
8002d286:	1e 26       	rsub	r6,pc
8002d288:	ef 4c ff f4 	st.w	r7[-12],r12
	int i;
	enum GPS_Engine_Setting engine_nav_settings = GPS_ENGINE_AIRBORNE_4G;
8002d28c:	30 88       	mov	r8,8
8002d28e:	ef 48 ff fc 	st.w	r7[-4],r8

	irq_initialize_vectors();
8002d292:	f0 16 01 13 	mcall	r6[1100]
	cpu_irq_enable();
8002d296:	d5 03       	csrf	0x10
	Disable_global_interrupt();
8002d298:	d3 03       	ssrf	0x10
		
	// Initialize the sleep manager
	sleepmgr_init();
8002d29a:	cc 1f       	rcall	8002d21c <sleepmgr_init>
	sysclk_init();
8002d29c:	f0 16 01 43 	mcall	r6[1292]
	board_init();
8002d2a0:	f0 16 01 9c 	mcall	r6[1648]
	delay_init(sysclk_get_cpu_hz());
8002d2a4:	cb 0f       	rcall	8002d204 <sysclk_get_cpu_hz>
8002d2a6:	18 98       	mov	r8,r12
8002d2a8:	10 9c       	mov	r12,r8
8002d2aa:	f0 16 01 ae 	mcall	r6[1720]
	init_time_keeper();
8002d2ae:	f0 16 01 f3 	mcall	r6[1996]
		
	INTC_init_interrupts();
8002d2b2:	f0 16 01 13 	mcall	r6[1100]
		
		
	if (init_i2c(0)!=STATUS_OK) {
8002d2b6:	30 0c       	mov	r12,0
8002d2b8:	f0 16 00 db 	mcall	r6[876]
8002d2bc:	18 98       	mov	r8,r12
8002d2be:	58 08       	cp.w	r8,0
8002d2c0:	c0 20       	breq	8002d2c4 <initialise_board+0x48>
		//putstring(STDOUT, "Error initialising I2C\n");
		while (1==1);
8002d2c2:	c0 08       	rjmp	8002d2c2 <initialise_board+0x46>
		} else {
		//putstring(STDOUT, "initialised I2C.\n");
	};
	if (init_i2c(1)!=STATUS_OK) {
8002d2c4:	30 1c       	mov	r12,1
8002d2c6:	f0 16 00 db 	mcall	r6[876]
8002d2ca:	18 98       	mov	r8,r12
8002d2cc:	58 08       	cp.w	r8,0
8002d2ce:	c0 20       	breq	8002d2d2 <initialise_board+0x56>
		//putstring(STDOUT, "Error initialising I2C\n");
		while (1==1);
8002d2d0:	c0 08       	rjmp	8002d2d0 <initialise_board+0x54>
		} else {
		//putstring(STDOUT, "initialised I2C.\n");
	};

	LED_Off(LED1);
8002d2d2:	30 2c       	mov	r12,2
8002d2d4:	f0 16 01 62 	mcall	r6[1416]
	// Configure the pins connected to LEDs as output and set their default
	// initial state to high (LEDs off).
	//gpio_configure_pin(LED0_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_LOW);
	//gpio_configure_pin(LED1_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_LOW);

	init_Servos();
8002d2d8:	f0 16 02 19 	mcall	r6[2148]
	set_servos(&servo_failsafe);
8002d2dc:	ec fc 08 70 	ld.w	r12,r6[2160]
8002d2e0:	f0 16 00 a0 	mcall	r6[640]
	
		
	init_UART_int(0);
8002d2e4:	30 0c       	mov	r12,0
8002d2e6:	f0 16 00 9c 	mcall	r6[624]
	register_write_stream(get_UART_handle(0), &(centralData->xbee_out_stream));
8002d2ea:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d2ee:	f0 c5 f6 8c 	sub	r5,r8,-2420
8002d2f2:	30 0c       	mov	r12,0
8002d2f4:	f0 16 00 62 	mcall	r6[392]
8002d2f8:	18 98       	mov	r8,r12
8002d2fa:	0a 9b       	mov	r11,r5
8002d2fc:	10 9c       	mov	r12,r8
8002d2fe:	f0 16 00 cc 	mcall	r6[816]
				
		
	init_UART_int(3);
8002d302:	30 3c       	mov	r12,3
8002d304:	f0 16 00 9c 	mcall	r6[624]
	make_buffered_stream(&(centralData->gps_buffer), &(centralData->gps_stream_in));
8002d308:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d30c:	f0 c9 f5 28 	sub	r9,r8,-2776
8002d310:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d314:	f0 c8 f6 2c 	sub	r8,r8,-2516
8002d318:	12 9b       	mov	r11,r9
8002d31a:	10 9c       	mov	r12,r8
8002d31c:	f0 16 01 65 	mcall	r6[1428]
	register_read_stream(get_UART_handle(3), &(centralData->gps_stream_in));
8002d320:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d324:	f0 c5 f5 28 	sub	r5,r8,-2776
8002d328:	30 3c       	mov	r12,3
8002d32a:	f0 16 00 62 	mcall	r6[392]
8002d32e:	18 98       	mov	r8,r12
8002d330:	0a 9b       	mov	r11,r5
8002d332:	10 9c       	mov	r12,r8
8002d334:	f0 16 00 b8 	mcall	r6[736]
	register_write_stream(get_UART_handle(3), &(centralData->gps_stream_out));
8002d338:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d33c:	f0 c5 f5 10 	sub	r5,r8,-2800
8002d340:	30 3c       	mov	r12,3
8002d342:	f0 16 00 62 	mcall	r6[392]
8002d346:	18 98       	mov	r8,r12
8002d348:	0a 9b       	mov	r11,r5
8002d34a:	10 9c       	mov	r12,r8
8002d34c:	f0 16 00 cc 	mcall	r6[816]
		
	init_UART_int(4);
8002d350:	30 4c       	mov	r12,4
8002d352:	f0 16 00 9c 	mcall	r6[624]
	register_write_stream(get_UART_handle(4), &(centralData->wired_out_stream));
8002d356:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d35a:	f0 c5 f6 5c 	sub	r5,r8,-2468
8002d35e:	30 4c       	mov	r12,4
8002d360:	f0 16 00 62 	mcall	r6[392]
8002d364:	18 98       	mov	r8,r12
8002d366:	0a 9b       	mov	r11,r5
8002d368:	10 9c       	mov	r12,r8
8002d36a:	f0 16 00 cc 	mcall	r6[816]


	make_buffered_stream_lossy(&(centralData->xbee_in_buffer), &(centralData->xbee_in_stream));
8002d36e:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d372:	f0 c9 f6 74 	sub	r9,r8,-2444
8002d376:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d37a:	f0 c8 f8 94 	sub	r8,r8,-1900
8002d37e:	12 9b       	mov	r11,r9
8002d380:	10 9c       	mov	r12,r8
8002d382:	f0 16 00 e9 	mcall	r6[932]
	make_buffered_stream_lossy(&(centralData->wired_in_buffer), &(centralData->wired_in_stream));
8002d386:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d38a:	f0 c9 f6 44 	sub	r9,r8,-2492
8002d38e:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d392:	f0 c8 f7 91 	sub	r8,r8,-2159
8002d396:	12 9b       	mov	r11,r9
8002d398:	10 9c       	mov	r12,r8
8002d39a:	f0 16 00 e9 	mcall	r6[932]
	register_read_stream(get_UART_handle(4), &(centralData->wired_in_stream));
8002d39e:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d3a2:	f0 c5 f6 44 	sub	r5,r8,-2492
8002d3a6:	30 4c       	mov	r12,4
8002d3a8:	f0 16 00 62 	mcall	r6[392]
8002d3ac:	18 98       	mov	r8,r12
8002d3ae:	0a 9b       	mov	r11,r5
8002d3b0:	10 9c       	mov	r12,r8
8002d3b2:	f0 16 00 b8 	mcall	r6[736]
	register_read_stream(get_UART_handle(0), &(centralData->xbee_in_stream));
8002d3b6:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d3ba:	f0 c5 f6 74 	sub	r5,r8,-2444
8002d3be:	30 0c       	mov	r12,0
8002d3c0:	f0 16 00 62 	mcall	r6[392]
8002d3c4:	18 98       	mov	r8,r12
8002d3c6:	0a 9b       	mov	r11,r5
8002d3c8:	10 9c       	mov	r12,r8
8002d3ca:	f0 16 00 b8 	mcall	r6[736]

		
	// connect abstracted aliases to hardware ports


	centralData->telemetry_down_stream=&(centralData->xbee_out_stream);
8002d3ce:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d3d2:	f0 c9 f6 8c 	sub	r9,r8,-2420
8002d3d6:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d3da:	f1 49 0d fc 	st.w	r8[3580],r9
	centralData->telemetry_up_stream=&(centralData->xbee_in_stream);
8002d3de:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d3e2:	f0 c9 f6 74 	sub	r9,r8,-2444
8002d3e6:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d3ea:	f1 49 0e 00 	st.w	r8[3584],r9
	centralData->debug_out_stream=&(centralData->wired_out_stream);
8002d3ee:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d3f2:	f0 c9 f6 5c 	sub	r9,r8,-2468
8002d3f6:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d3fa:	f1 49 0e 04 	st.w	r8[3588],r9
	centralData->debug_in_stream=&(centralData->wired_in_stream);
8002d3fe:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d402:	f0 c9 f6 44 	sub	r9,r8,-2492
8002d406:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d40a:	f1 49 0e 08 	st.w	r8[3592],r9
	centralData->telemetry_up_stream  =&(centralData->wired_in_stream);		
	centralData->debug_out_stream     =&(centralData->xbee_out_stream);
	centralData->debug_in_stream      =&(centralData->xbee_in_stream);
*/

	init_analog_monitor();
8002d40e:	f0 16 01 b9 	mcall	r6[1764]
	// init mavlink
	init_mavlink(centralData->telemetry_down_stream, centralData->telemetry_up_stream, MAVLINK_SYS_ID);
8002d412:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d416:	f0 f9 0e 00 	ld.w	r9,r8[3584]
8002d41a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d41e:	f0 f8 0d fc 	ld.w	r8,r8[3580]
8002d422:	32 ca       	mov	r10,44
8002d424:	12 9b       	mov	r11,r9
8002d426:	10 9c       	mov	r12,r8
8002d428:	f0 16 01 c6 	mcall	r6[1816]
		
	// init debug output
	dbg_print_init(centralData->debug_out_stream);
8002d42c:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d430:	f0 f8 0e 04 	ld.w	r8,r8[3588]
8002d434:	10 9c       	mov	r12,r8
8002d436:	f0 16 01 5c 	mcall	r6[1392]
		
	init_imu(&(centralData->imu1));
8002d43a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d43e:	10 9c       	mov	r12,r8
8002d440:	f0 16 01 67 	mcall	r6[1436]
	init_bmp085();
8002d444:	f0 16 01 e1 	mcall	r6[1924]

	rc_init();
8002d448:	f0 16 01 32 	mcall	r6[1224]


	Enable_global_interrupt();
8002d44c:	d5 03       	csrf	0x10
	dbg_print("Board initialised.\n");
8002d44e:	fe cc 01 e6 	sub	r12,pc,486
8002d452:	f0 16 00 01 	mcall	r6[4]
}
8002d456:	2f dd       	sub	sp,-12
8002d458:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8002d45c:	80 02       	ld.sh	r2,r0[0x0]
8002d45e:	d1 0a       	popm	r11

8002d460 <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
8002d460:	eb cd 40 c0 	pushm	r6-r7,lr
8002d464:	1a 97       	mov	r7,sp
8002d466:	20 6d       	sub	sp,24
8002d468:	49 e6       	lddpc	r6,8002d4e0 <interpolate+0x80>
8002d46a:	1e 26       	rsub	r6,pc
8002d46c:	ef 4c ff f8 	st.w	r7[-8],r12
8002d470:	ef 4b ff f4 	st.w	r7[-12],r11
8002d474:	ef 4a ff f0 	st.w	r7[-16],r10
8002d478:	ef 49 ff ec 	st.w	r7[-20],r9
8002d47c:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
8002d480:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002d484:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002d488:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
8002d48c:	c0 41       	brne	8002d494 <interpolate+0x34>
	{
		return y1;
8002d48e:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002d492:	c2 38       	rjmp	8002d4d8 <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
8002d494:	ee f9 ff e8 	ld.w	r9,r7[-24]
8002d498:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002d49c:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8002d4a0:	ee fa ff f8 	ld.w	r10,r7[-8]
8002d4a4:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d4a8:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
8002d4ac:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8002d4b0:	ee fa ff f0 	ld.w	r10,r7[-16]
8002d4b4:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002d4b8:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8002d4bc:	12 9b       	mov	r11,r9
8002d4be:	10 9c       	mov	r12,r8
8002d4c0:	f0 16 00 08 	mcall	r6[32]
8002d4c4:	18 98       	mov	r8,r12
8002d4c6:	10 99       	mov	r9,r8
8002d4c8:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002d4cc:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8002d4d0:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
8002d4d4:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
8002d4d8:	10 9c       	mov	r12,r8
8002d4da:	2f ad       	sub	sp,-24
8002d4dc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002d4e0:	80 02       	ld.sh	r2,r0[0x0]
8002d4e2:	d2 ee       	*unknown*

8002d4e4 <mav_array_memcpy>:

/*
  like memcpy(), but if src is NULL, do a memset to zero
*/
static void mav_array_memcpy(void *dest, const void *src, size_t n)
{
8002d4e4:	eb cd 40 c0 	pushm	r6-r7,lr
8002d4e8:	1a 97       	mov	r7,sp
8002d4ea:	20 3d       	sub	sp,12
8002d4ec:	49 06       	lddpc	r6,8002d52c <mav_array_memcpy+0x48>
8002d4ee:	1e 26       	rsub	r6,pc
8002d4f0:	ef 4c ff fc 	st.w	r7[-4],r12
8002d4f4:	ef 4b ff f8 	st.w	r7[-8],r11
8002d4f8:	ef 4a ff f4 	st.w	r7[-12],r10
	if (src == NULL) {
8002d4fc:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002d500:	58 08       	cp.w	r8,0
8002d502:	c0 91       	brne	8002d514 <mav_array_memcpy+0x30>
		memset(dest, 0, n);
8002d504:	ee fa ff f4 	ld.w	r10,r7[-12]
8002d508:	30 0b       	mov	r11,0
8002d50a:	ee fc ff fc 	ld.w	r12,r7[-4]
8002d50e:	f0 16 00 30 	mcall	r6[192]
8002d512:	c0 98       	rjmp	8002d524 <mav_array_memcpy+0x40>
	} else {
		memcpy(dest, src, n);
8002d514:	ee fa ff f4 	ld.w	r10,r7[-12]
8002d518:	ee fb ff f8 	ld.w	r11,r7[-8]
8002d51c:	ee fc ff fc 	ld.w	r12,r7[-4]
8002d520:	f0 16 00 20 	mcall	r6[128]
	}
}
8002d524:	2f dd       	sub	sp,-12
8002d526:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002d52a:	00 00       	add	r0,r0
8002d52c:	80 02       	ld.sh	r2,r0[0x0]
8002d52e:	d3 72       	popm	r0-r9,r11-r12
8002d530:	44 65       	lddsp	r5,sp[0x118]
8002d532:	62 75       	ld.w	r5,r1[0x1c]
8002d534:	67 20       	ld.w	r0,r3[0x48]
8002d536:	73 74       	ld.w	r4,r9[0x5c]
8002d538:	72 65       	ld.w	r5,r9[0x18]
8002d53a:	61 6d       	ld.w	sp,r0[0x58]
8002d53c:	20 69       	sub	r9,6
8002d53e:	6e 69       	ld.w	r9,r7[0x18]
8002d540:	74 69       	ld.w	r9,r10[0x18]
8002d542:	61 6c       	ld.w	r12,r0[0x58]
8002d544:	69 73       	ld.w	r3,r4[0x5c]
8002d546:	65 64       	ld.w	r4,r2[0x58]
8002d548:	0a 00       	add	r0,r5

8002d54a <initialisation>:
#include "orca.h"
//#include "flashvault.h"

central_data_t *centralData;

void initialisation() {
8002d54a:	eb cd 40 c0 	pushm	r6-r7,lr
8002d54e:	1a 97       	mov	r7,sp
8002d550:	20 2d       	sub	sp,8
8002d552:	4e 26       	lddpc	r6,8002d6d8 <initialisation+0x18e>
8002d554:	1e 26       	rsub	r6,pc
	int i;
	enum GPS_Engine_Setting engine_nav_settings = GPS_ENGINE_AIRBORNE_4G;
8002d556:	30 88       	mov	r8,8
8002d558:	ef 48 ff fc 	st.w	r7[-4],r8

	centralData = get_central_data();
8002d55c:	f0 16 00 32 	mcall	r6[200]
8002d560:	18 99       	mov	r9,r12
8002d562:	ec f8 00 00 	ld.w	r8,r6[0]
8002d566:	91 09       	st.w	r8[0x0],r9
	initialise_board(centralData);
8002d568:	ec f8 00 00 	ld.w	r8,r6[0]
8002d56c:	70 08       	ld.w	r8,r8[0x0]
8002d56e:	10 9c       	mov	r12,r8
8002d570:	f0 16 02 16 	mcall	r6[2136]
	initialise_central_data();
8002d574:	f0 16 01 b0 	mcall	r6[1728]
	

	init_radar_modules();
8002d578:	f0 16 01 63 	mcall	r6[1420]
	dbg_print("Debug stream initialised\n");
8002d57c:	fe cc 00 4c 	sub	r12,pc,76
8002d580:	f0 16 00 01 	mcall	r6[4]

	//init_gps_ubx(engine_nav_settings);
	
	set_servos(&servo_failsafe);
8002d584:	ec fc 08 6c 	ld.w	r12,r6[2156]
8002d588:	f0 16 00 a0 	mcall	r6[640]

	init_onboard_parameters();
8002d58c:	f0 16 01 de 	mcall	r6[1912]
	init_mavlink_actions();
8002d590:	f0 16 01 ce 	mcall	r6[1848]
	init_pos_integration(&centralData->position_estimator, &centralData->pressure, &centralData->GPS_data);
8002d594:	ec f8 00 00 	ld.w	r8,r6[0]
8002d598:	70 08       	ld.w	r8,r8[0x0]
8002d59a:	f0 ca f4 f8 	sub	r10,r8,-2824
8002d59e:	ec f8 00 00 	ld.w	r8,r6[0]
8002d5a2:	70 08       	ld.w	r8,r8[0x0]
8002d5a4:	f0 c9 ef 3c 	sub	r9,r8,-4292
8002d5a8:	ec f8 00 00 	ld.w	r8,r6[0]
8002d5ac:	70 08       	ld.w	r8,r8[0x0]
8002d5ae:	f0 c8 f2 c4 	sub	r8,r8,-3388
8002d5b2:	12 9b       	mov	r11,r9
8002d5b4:	10 9c       	mov	r12,r8
8002d5b6:	f0 16 01 69 	mcall	r6[1444]
	
	centralData->imu1.attitude.calibration_level=LEVELING;	
8002d5ba:	ec f8 00 00 	ld.w	r8,r6[0]
8002d5be:	70 09       	ld.w	r9,r8[0x0]
8002d5c0:	30 18       	mov	r8,1
8002d5c2:	f3 68 00 b8 	st.b	r9[184],r8
	centralData->mav_state = MAV_STATE_CALIBRATING;
8002d5c6:	ec f8 00 00 	ld.w	r8,r6[0]
8002d5ca:	70 09       	ld.w	r9,r8[0x0]
8002d5cc:	30 28       	mov	r8,2
8002d5ce:	f3 68 10 bd 	st.b	r9[4285],r8
	centralData->mav_mode = MAV_MODE_PREFLIGHT;
8002d5d2:	ec f8 00 00 	ld.w	r8,r6[0]
8002d5d6:	70 09       	ld.w	r9,r8[0x0]
8002d5d8:	30 08       	mov	r8,0
8002d5da:	f3 68 10 bc 	st.b	r9[4284],r8

//	calibrate_Gyros(&centralData->imu1);
	for (i=400; i>0; i--) {
8002d5de:	e0 68 01 90 	mov	r8,400
8002d5e2:	ef 48 ff f8 	st.w	r7[-8],r8
8002d5e6:	c2 68       	rjmp	8002d632 <initialisation+0xe8>
		imu_get_raw_data(&(centralData->imu1));
8002d5e8:	ec f8 00 00 	ld.w	r8,r6[0]
8002d5ec:	70 08       	ld.w	r8,r8[0x0]
8002d5ee:	10 9c       	mov	r12,r8
8002d5f0:	f0 16 00 8c 	mcall	r6[560]
		imu_update(&(centralData->imu1), &centralData->position_estimator, &centralData->pressure, &centralData->GPS_data);	
8002d5f4:	ec f8 00 00 	ld.w	r8,r6[0]
8002d5f8:	70 08       	ld.w	r8,r8[0x0]
8002d5fa:	f0 c9 f4 f8 	sub	r9,r8,-2824
8002d5fe:	ec f8 00 00 	ld.w	r8,r6[0]
8002d602:	70 08       	ld.w	r8,r8[0x0]
8002d604:	f0 ca ef 3c 	sub	r10,r8,-4292
8002d608:	ec f8 00 00 	ld.w	r8,r6[0]
8002d60c:	70 08       	ld.w	r8,r8[0x0]
8002d60e:	f0 cb f2 c4 	sub	r11,r8,-3388
8002d612:	ec f8 00 00 	ld.w	r8,r6[0]
8002d616:	70 08       	ld.w	r8,r8[0x0]
8002d618:	10 9c       	mov	r12,r8
8002d61a:	f0 16 00 8d 	mcall	r6[564]
		mavlink_protocol_update();	
8002d61e:	f0 16 00 d9 	mcall	r6[868]
		delay_ms(5);
8002d622:	30 5c       	mov	r12,5
8002d624:	f0 16 00 fa 	mcall	r6[1000]
	centralData->imu1.attitude.calibration_level=LEVELING;	
	centralData->mav_state = MAV_STATE_CALIBRATING;
	centralData->mav_mode = MAV_MODE_PREFLIGHT;

//	calibrate_Gyros(&centralData->imu1);
	for (i=400; i>0; i--) {
8002d628:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002d62c:	20 18       	sub	r8,1
8002d62e:	ef 48 ff f8 	st.w	r7[-8],r8
8002d632:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002d636:	58 08       	cp.w	r8,0
8002d638:	e0 8c 00 04 	brvs	8002d640 <initialisation+0xf6>
8002d63c:	fe 99 ff d6 	brgt	8002d5e8 <initialisation+0x9e>
	for (i=100; i>0; i--) {
		imu_update(&(centralData->imu1), &centralData->position_estimator, &centralData->pressure, &centralData->GPS_data);	
		mavlink_protocol_update();			
		delay_ms(5);
	}*/
	centralData->imu1.attitude.calibration_level=OFF;
8002d640:	ec f8 00 00 	ld.w	r8,r6[0]
8002d644:	70 09       	ld.w	r9,r8[0x0]
8002d646:	30 08       	mov	r8,0
8002d648:	f3 68 00 b8 	st.b	r9[184],r8
	//reset position estimate
	for (i=0; i<3; i++) {
8002d64c:	30 08       	mov	r8,0
8002d64e:	ef 48 ff f8 	st.w	r7[-8],r8
8002d652:	c2 48       	rjmp	8002d69a <initialisation+0x150>
		// clean acceleration estimate without gravity:
		centralData->position_estimator.vel_bf[i]=0.0;
8002d654:	ec f8 00 00 	ld.w	r8,r6[0]
8002d658:	70 08       	ld.w	r8,r8[0x0]
8002d65a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002d65e:	f2 c9 fc a6 	sub	r9,r9,-858
8002d662:	30 0a       	mov	r10,0
8002d664:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		centralData->position_estimator.vel[i]=0.0;
8002d668:	ec f8 00 00 	ld.w	r8,r6[0]
8002d66c:	70 08       	ld.w	r8,r8[0x0]
8002d66e:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002d672:	f2 c9 fc a3 	sub	r9,r9,-861
8002d676:	30 0a       	mov	r10,0
8002d678:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		centralData->position_estimator.localPosition.pos[i]=0.0;
8002d67c:	ec f8 00 00 	ld.w	r8,r6[0]
8002d680:	70 08       	ld.w	r8,r8[0x0]
8002d682:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002d686:	f2 c9 fc 99 	sub	r9,r9,-871
8002d68a:	30 0a       	mov	r10,0
8002d68c:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		mavlink_protocol_update();			
		delay_ms(5);
	}*/
	centralData->imu1.attitude.calibration_level=OFF;
	//reset position estimate
	for (i=0; i<3; i++) {
8002d690:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002d694:	2f f8       	sub	r8,-1
8002d696:	ef 48 ff f8 	st.w	r7[-8],r8
8002d69a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002d69e:	58 28       	cp.w	r8,2
8002d6a0:	fe 9a ff da 	brle	8002d654 <initialisation+0x10a>
		// clean acceleration estimate without gravity:
		centralData->position_estimator.vel_bf[i]=0.0;
		centralData->position_estimator.vel[i]=0.0;
		centralData->position_estimator.localPosition.pos[i]=0.0;
	}
	centralData->mav_state = MAV_STATE_STANDBY;
8002d6a4:	ec f8 00 00 	ld.w	r8,r6[0]
8002d6a8:	70 09       	ld.w	r9,r8[0x0]
8002d6aa:	30 38       	mov	r8,3
8002d6ac:	f3 68 10 bd 	st.b	r9[4285],r8
	centralData->mav_mode = MAV_MODE_MANUAL_DISARMED;
8002d6b0:	ec f8 00 00 	ld.w	r8,r6[0]
8002d6b4:	70 09       	ld.w	r9,r8[0x0]
8002d6b6:	34 08       	mov	r8,64
8002d6b8:	f3 68 10 bc 	st.b	r9[4284],r8
	init_nav();
8002d6bc:	f0 16 01 b7 	mcall	r6[1756]
	init_waypoint_handler();
8002d6c0:	f0 16 01 54 	mcall	r6[1360]
	//e_init();
	
	init_neighbors();
8002d6c4:	f0 16 01 84 	mcall	r6[1552]
	init_orca();
8002d6c8:	f0 16 01 ff 	mcall	r6[2044]
	
	LED_On(LED1);
8002d6cc:	30 2c       	mov	r12,2
8002d6ce:	f0 16 01 3d 	mcall	r6[1268]
}
8002d6d2:	2f ed       	sub	sp,-8
8002d6d4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002d6d8:	80 02       	ld.sh	r2,r0[0x0]
8002d6da:	d3 d8       	*unknown*

8002d6dc <main>:



void main (void)
{
8002d6dc:	eb cd 40 c0 	pushm	r6-r7,lr
8002d6e0:	1a 97       	mov	r7,sp
8002d6e2:	48 b6       	lddpc	r6,8002d70c <main+0x30>
8002d6e4:	1e 26       	rsub	r6,pc
	
	initialisation();
8002d6e6:	f0 16 01 d2 	mcall	r6[1864]
	
	create_tasks();
8002d6ea:	f0 16 02 0c 	mcall	r6[2096]
	
	// turn on simulation mode: 1: simulation mode, 0: reality
	centralData->simulation_mode = 1;
8002d6ee:	ec f8 00 00 	ld.w	r8,r6[0]
8002d6f2:	70 08       	ld.w	r8,r8[0x0]
8002d6f4:	30 19       	mov	r9,1
8002d6f6:	f1 49 10 c0 	st.w	r8[4288],r9
	// main loop
	
	while (1==1) {
		
		//run_scheduler_update(get_main_taskset(), FIXED_PRIORITY);
		run_scheduler_update(get_main_taskset(), ROUND_ROBIN);
8002d6fa:	f0 16 00 fb 	mcall	r6[1004]
8002d6fe:	18 98       	mov	r8,r12
8002d700:	30 0b       	mov	r11,0
8002d702:	10 9c       	mov	r12,r8
8002d704:	f0 16 00 e5 	mcall	r6[916]
		
		//LED_On(LED1);

		
	}		
8002d708:	cf 9b       	rjmp	8002d6fa <main+0x1e>
8002d70a:	00 00       	add	r0,r0
8002d70c:	80 02       	ld.sh	r2,r0[0x0]
8002d70e:	d5 68       	*unknown*

8002d710 <cos>:
8002d710:	d4 21       	pushm	r4-r7,lr
8002d712:	20 4d       	sub	sp,16
8002d714:	e0 6e 21 fb 	mov	lr,8699
8002d718:	ea 1e 3f e9 	orh	lr,0x3fe9
8002d71c:	14 98       	mov	r8,r10
8002d71e:	16 99       	mov	r9,r11
8002d720:	16 95       	mov	r5,r11
8002d722:	14 96       	mov	r6,r10
8002d724:	16 97       	mov	r7,r11
8002d726:	16 94       	mov	r4,r11
8002d728:	f9 db c0 1f 	bfextu	r12,r11,0x0,0x1f
8002d72c:	1c 3c       	cp.w	r12,lr
8002d72e:	e0 89 00 05 	brgt	8002d738 <cos+0x28>
8002d732:	30 08       	mov	r8,0
8002d734:	30 09       	mov	r9,0
8002d736:	c1 a8       	rjmp	8002d76a <cos+0x5a>
8002d738:	e0 65 ff ff 	mov	r5,65535
8002d73c:	ea 15 7f ef 	orh	r5,0x7fef
8002d740:	0a 3c       	cp.w	r12,r5
8002d742:	e0 8a 00 05 	brle	8002d74c <cos+0x3c>
8002d746:	e0 a0 17 bd 	rcall	800306c0 <__avr32_f64_sub>
8002d74a:	c2 68       	rjmp	8002d796 <cos+0x86>
8002d74c:	1a 9c       	mov	r12,sp
8002d74e:	e0 a0 0b 47 	rcall	8002eddc <__ieee754_rem_pio2>
8002d752:	f9 dc c0 02 	bfextu	r12,r12,0x0,0x2
8002d756:	58 1c       	cp.w	r12,1
8002d758:	c0 c0       	breq	8002d770 <cos+0x60>
8002d75a:	58 2c       	cp.w	r12,2
8002d75c:	c1 10       	breq	8002d77e <cos+0x6e>
8002d75e:	fa e8 00 08 	ld.d	r8,sp[8]
8002d762:	fa ea 00 00 	ld.d	r10,sp[0]
8002d766:	58 0c       	cp.w	r12,0
8002d768:	c1 41       	brne	8002d790 <cos+0x80>
8002d76a:	e0 a0 0e 37 	rcall	8002f3d8 <__kernel_cos>
8002d76e:	c1 48       	rjmp	8002d796 <cos+0x86>
8002d770:	fa e8 00 08 	ld.d	r8,sp[8]
8002d774:	fa ea 00 00 	ld.d	r10,sp[0]
8002d778:	e0 a0 12 94 	rcall	8002fca0 <__kernel_sin>
8002d77c:	c0 78       	rjmp	8002d78a <cos+0x7a>
8002d77e:	fa e8 00 08 	ld.d	r8,sp[8]
8002d782:	fa ea 00 00 	ld.d	r10,sp[0]
8002d786:	e0 a0 0e 29 	rcall	8002f3d8 <__kernel_cos>
8002d78a:	ee 1b 80 00 	eorh	r11,0x8000
8002d78e:	c0 48       	rjmp	8002d796 <cos+0x86>
8002d790:	30 1c       	mov	r12,1
8002d792:	e0 a0 12 87 	rcall	8002fca0 <__kernel_sin>
8002d796:	2f cd       	sub	sp,-16
8002d798:	d8 22       	popm	r4-r7,pc
8002d79a:	d7 03       	nop

8002d79c <sin>:
8002d79c:	d4 21       	pushm	r4-r7,lr
8002d79e:	20 4d       	sub	sp,16
8002d7a0:	e0 6e 21 fb 	mov	lr,8699
8002d7a4:	ea 1e 3f e9 	orh	lr,0x3fe9
8002d7a8:	14 98       	mov	r8,r10
8002d7aa:	16 99       	mov	r9,r11
8002d7ac:	16 95       	mov	r5,r11
8002d7ae:	14 96       	mov	r6,r10
8002d7b0:	16 97       	mov	r7,r11
8002d7b2:	16 94       	mov	r4,r11
8002d7b4:	f9 db c0 1f 	bfextu	r12,r11,0x0,0x1f
8002d7b8:	1c 3c       	cp.w	r12,lr
8002d7ba:	e0 89 00 06 	brgt	8002d7c6 <sin+0x2a>
8002d7be:	30 0c       	mov	r12,0
8002d7c0:	30 08       	mov	r8,0
8002d7c2:	30 09       	mov	r9,0
8002d7c4:	c1 b8       	rjmp	8002d7fa <sin+0x5e>
8002d7c6:	e0 65 ff ff 	mov	r5,65535
8002d7ca:	ea 15 7f ef 	orh	r5,0x7fef
8002d7ce:	0a 3c       	cp.w	r12,r5
8002d7d0:	e0 8a 00 05 	brle	8002d7da <sin+0x3e>
8002d7d4:	e0 a0 17 76 	rcall	800306c0 <__avr32_f64_sub>
8002d7d8:	c2 78       	rjmp	8002d826 <sin+0x8a>
8002d7da:	1a 9c       	mov	r12,sp
8002d7dc:	e0 a0 0b 00 	rcall	8002eddc <__ieee754_rem_pio2>
8002d7e0:	f9 dc c0 02 	bfextu	r12,r12,0x0,0x2
8002d7e4:	58 1c       	cp.w	r12,1
8002d7e6:	c0 d0       	breq	8002d800 <sin+0x64>
8002d7e8:	58 2c       	cp.w	r12,2
8002d7ea:	c1 20       	breq	8002d80e <sin+0x72>
8002d7ec:	fa e8 00 08 	ld.d	r8,sp[8]
8002d7f0:	fa ea 00 00 	ld.d	r10,sp[0]
8002d7f4:	58 0c       	cp.w	r12,0
8002d7f6:	c1 41       	brne	8002d81e <sin+0x82>
8002d7f8:	30 1c       	mov	r12,1
8002d7fa:	e0 a0 12 53 	rcall	8002fca0 <__kernel_sin>
8002d7fe:	c1 48       	rjmp	8002d826 <sin+0x8a>
8002d800:	fa e8 00 08 	ld.d	r8,sp[8]
8002d804:	fa ea 00 00 	ld.d	r10,sp[0]
8002d808:	e0 a0 0d e8 	rcall	8002f3d8 <__kernel_cos>
8002d80c:	c0 d8       	rjmp	8002d826 <sin+0x8a>
8002d80e:	30 1c       	mov	r12,1
8002d810:	fa e8 00 08 	ld.d	r8,sp[8]
8002d814:	fa ea 00 00 	ld.d	r10,sp[0]
8002d818:	e0 a0 12 44 	rcall	8002fca0 <__kernel_sin>
8002d81c:	c0 38       	rjmp	8002d822 <sin+0x86>
8002d81e:	e0 a0 0d dd 	rcall	8002f3d8 <__kernel_cos>
8002d822:	ee 1b 80 00 	eorh	r11,0x8000
8002d826:	2f cd       	sub	sp,-16
8002d828:	d8 22       	popm	r4-r7,pc
8002d82a:	d7 03       	nop

8002d82c <asin>:
8002d82c:	d4 31       	pushm	r0-r7,lr
8002d82e:	20 9d       	sub	sp,36
8002d830:	4a 17       	lddpc	r7,8002d8b4 <asin+0x88>
8002d832:	14 94       	mov	r4,r10
8002d834:	16 95       	mov	r5,r11
8002d836:	cf 3d       	rcall	8002dc1c <__ieee754_asin>
8002d838:	6e 08       	ld.w	r8,r7[0x0]
8002d83a:	14 92       	mov	r2,r10
8002d83c:	16 93       	mov	r3,r11
8002d83e:	5b f8       	cp.w	r8,-1
8002d840:	c3 50       	breq	8002d8aa <asin+0x7e>
8002d842:	08 9a       	mov	r10,r4
8002d844:	0a 9b       	mov	r11,r5
8002d846:	e0 a0 15 37 	rcall	800302b4 <__isnand>
8002d84a:	18 96       	mov	r6,r12
8002d84c:	c2 f1       	brne	8002d8aa <asin+0x7e>
8002d84e:	08 9a       	mov	r10,r4
8002d850:	0a 9b       	mov	r11,r5
8002d852:	e0 a0 14 95 	rcall	8003017c <fabs>
8002d856:	14 98       	mov	r8,r10
8002d858:	16 99       	mov	r9,r11
8002d85a:	30 0a       	mov	r10,0
8002d85c:	fc 1b 3f f0 	movh	r11,0x3ff0
8002d860:	e0 a0 19 56 	rcall	80030b0c <__avr32_f64_cmp_lt>
8002d864:	c2 30       	breq	8002d8aa <asin+0x7e>
8002d866:	30 18       	mov	r8,1
8002d868:	50 08       	stdsp	sp[0x0],r8
8002d86a:	49 48       	lddpc	r8,8002d8b8 <asin+0x8c>
8002d86c:	50 86       	stdsp	sp[0x20],r6
8002d86e:	50 18       	stdsp	sp[0x4],r8
8002d870:	fa e5 00 08 	st.d	sp[8],r4
8002d874:	fa e5 00 10 	st.d	sp[16],r4
8002d878:	49 1c       	lddpc	r12,8002d8bc <asin+0x90>
8002d87a:	e0 a0 15 2c 	rcall	800302d2 <nan>
8002d87e:	fa eb 00 18 	st.d	sp[24],r10
8002d882:	6e 08       	ld.w	r8,r7[0x0]
8002d884:	58 28       	cp.w	r8,2
8002d886:	c0 50       	breq	8002d890 <asin+0x64>
8002d888:	1a 9c       	mov	r12,sp
8002d88a:	e0 a0 15 23 	rcall	800302d0 <matherr>
8002d88e:	c0 51       	brne	8002d898 <asin+0x6c>
8002d890:	e0 a0 1d 56 	rcall	8003133c <__errno>
8002d894:	32 18       	mov	r8,33
8002d896:	99 08       	st.w	r12[0x0],r8
8002d898:	40 88       	lddsp	r8,sp[0x20]
8002d89a:	58 08       	cp.w	r8,0
8002d89c:	c0 50       	breq	8002d8a6 <asin+0x7a>
8002d89e:	e0 a0 1d 4f 	rcall	8003133c <__errno>
8002d8a2:	40 88       	lddsp	r8,sp[0x20]
8002d8a4:	99 08       	st.w	r12[0x0],r8
8002d8a6:	fa e2 00 18 	ld.d	r2,sp[24]
8002d8aa:	04 9a       	mov	r10,r2
8002d8ac:	06 9b       	mov	r11,r3
8002d8ae:	2f 7d       	sub	sp,-36
8002d8b0:	d8 32       	popm	r0-r7,pc
8002d8b2:	d7 03       	nop
8002d8b4:	00 00       	add	r0,r0
8002d8b6:	23 38       	sub	r8,51
8002d8b8:	80 03       	ld.sh	r3,r0[0x0]
8002d8ba:	1b 74       	ld.ub	r4,--sp
8002d8bc:	80 03       	ld.sh	r3,r0[0x0]
8002d8be:	1b 78       	ld.ub	r8,--sp

8002d8c0 <atan2>:
8002d8c0:	d4 01       	pushm	lr
8002d8c2:	e0 a0 04 25 	rcall	8002e10c <__ieee754_atan2>
8002d8c6:	d8 02       	popm	pc

8002d8c8 <pow>:
8002d8c8:	d4 31       	pushm	r0-r7,lr
8002d8ca:	20 cd       	sub	sp,48
8002d8cc:	10 94       	mov	r4,r8
8002d8ce:	14 92       	mov	r2,r10
8002d8d0:	16 93       	mov	r3,r11
8002d8d2:	12 95       	mov	r5,r9
8002d8d4:	e0 a0 05 32 	rcall	8002e338 <__ieee754_pow>
8002d8d8:	4b f6       	lddpc	r6,8002d9d4 <pow+0x10c>
8002d8da:	14 90       	mov	r0,r10
8002d8dc:	16 91       	mov	r1,r11
8002d8de:	6c 08       	ld.w	r8,r6[0x0]
8002d8e0:	5b f8       	cp.w	r8,-1
8002d8e2:	e0 80 01 46 	breq	8002db6e <pow+0x2a6>
8002d8e6:	08 9a       	mov	r10,r4
8002d8e8:	0a 9b       	mov	r11,r5
8002d8ea:	e0 a0 14 e5 	rcall	800302b4 <__isnand>
8002d8ee:	50 2c       	stdsp	sp[0x8],r12
8002d8f0:	e0 81 01 3f 	brne	8002db6e <pow+0x2a6>
8002d8f4:	04 9a       	mov	r10,r2
8002d8f6:	06 9b       	mov	r11,r3
8002d8f8:	e0 a0 14 de 	rcall	800302b4 <__isnand>
8002d8fc:	18 97       	mov	r7,r12
8002d8fe:	c2 40       	breq	8002d946 <pow+0x7e>
8002d900:	30 08       	mov	r8,0
8002d902:	30 09       	mov	r9,0
8002d904:	08 9a       	mov	r10,r4
8002d906:	0a 9b       	mov	r11,r5
8002d908:	e0 a0 18 bb 	rcall	80030a7e <__avr32_f64_cmp_eq>
8002d90c:	e0 80 01 31 	breq	8002db6e <pow+0x2a6>
8002d910:	30 18       	mov	r8,1
8002d912:	50 38       	stdsp	sp[0xc],r8
8002d914:	4b 18       	lddpc	r8,8002d9d8 <pow+0x110>
8002d916:	40 2c       	lddsp	r12,sp[0x8]
8002d918:	50 48       	stdsp	sp[0x10],r8
8002d91a:	fc 19 3f f0 	movh	r9,0x3ff0
8002d91e:	30 08       	mov	r8,0
8002d920:	fa e3 00 14 	st.d	sp[20],r2
8002d924:	fa e5 00 1c 	st.d	sp[28],r4
8002d928:	50 bc       	stdsp	sp[0x2c],r12
8002d92a:	fa e9 00 24 	st.d	sp[36],r8
8002d92e:	6c 0a       	ld.w	r10,r6[0x0]
8002d930:	5b fa       	cp.w	r10,-1
8002d932:	5f 0b       	sreq	r11
8002d934:	58 2a       	cp.w	r10,2
8002d936:	5f 0a       	sreq	r10
8002d938:	f5 eb 10 0b 	or	r11,r10,r11
8002d93c:	f8 0b 18 00 	cp.b	r11,r12
8002d940:	e0 81 01 0e 	brne	8002db5c <pow+0x294>
8002d944:	c8 08       	rjmp	8002da44 <pow+0x17c>
8002d946:	30 08       	mov	r8,0
8002d948:	30 09       	mov	r9,0
8002d94a:	04 9a       	mov	r10,r2
8002d94c:	06 9b       	mov	r11,r3
8002d94e:	e0 a0 18 98 	rcall	80030a7e <__avr32_f64_cmp_eq>
8002d952:	c4 50       	breq	8002d9dc <pow+0x114>
8002d954:	30 08       	mov	r8,0
8002d956:	30 09       	mov	r9,0
8002d958:	08 9a       	mov	r10,r4
8002d95a:	0a 9b       	mov	r11,r5
8002d95c:	e0 a0 18 91 	rcall	80030a7e <__avr32_f64_cmp_eq>
8002d960:	c1 70       	breq	8002d98e <pow+0xc6>
8002d962:	30 18       	mov	r8,1
8002d964:	50 38       	stdsp	sp[0xc],r8
8002d966:	49 d8       	lddpc	r8,8002d9d8 <pow+0x110>
8002d968:	30 09       	mov	r9,0
8002d96a:	50 48       	stdsp	sp[0x10],r8
8002d96c:	50 b7       	stdsp	sp[0x2c],r7
8002d96e:	30 08       	mov	r8,0
8002d970:	fa e3 00 14 	st.d	sp[20],r2
8002d974:	fa e9 00 24 	st.d	sp[36],r8
8002d978:	fa e5 00 1c 	st.d	sp[28],r4
8002d97c:	6c 08       	ld.w	r8,r6[0x0]
8002d97e:	58 08       	cp.w	r8,0
8002d980:	c6 20       	breq	8002da44 <pow+0x17c>
8002d982:	30 08       	mov	r8,0
8002d984:	fc 19 3f f0 	movh	r9,0x3ff0
8002d988:	fa e9 00 24 	st.d	sp[36],r8
8002d98c:	ce 88       	rjmp	8002db5c <pow+0x294>
8002d98e:	08 9a       	mov	r10,r4
8002d990:	0a 9b       	mov	r11,r5
8002d992:	e0 a0 13 f9 	rcall	80030184 <finite>
8002d996:	e0 80 00 ec 	breq	8002db6e <pow+0x2a6>
8002d99a:	30 08       	mov	r8,0
8002d99c:	30 09       	mov	r9,0
8002d99e:	08 9a       	mov	r10,r4
8002d9a0:	0a 9b       	mov	r11,r5
8002d9a2:	e0 a0 18 b5 	rcall	80030b0c <__avr32_f64_cmp_lt>
8002d9a6:	e0 80 00 e4 	breq	8002db6e <pow+0x2a6>
8002d9aa:	30 18       	mov	r8,1
8002d9ac:	50 b7       	stdsp	sp[0x2c],r7
8002d9ae:	50 38       	stdsp	sp[0xc],r8
8002d9b0:	fa e3 00 14 	st.d	sp[20],r2
8002d9b4:	48 98       	lddpc	r8,8002d9d8 <pow+0x110>
8002d9b6:	fa e5 00 1c 	st.d	sp[28],r4
8002d9ba:	50 48       	stdsp	sp[0x10],r8
8002d9bc:	6c 08       	ld.w	r8,r6[0x0]
8002d9be:	58 08       	cp.w	r8,0
8002d9c0:	c3 30       	breq	8002da26 <pow+0x15e>
8002d9c2:	30 0a       	mov	r10,0
8002d9c4:	f0 6b 00 00 	mov	r11,-1048576
8002d9c8:	fa eb 00 24 	st.d	sp[36],r10
8002d9cc:	58 28       	cp.w	r8,2
8002d9ce:	c4 10       	breq	8002da50 <pow+0x188>
8002d9d0:	c3 a8       	rjmp	8002da44 <pow+0x17c>
8002d9d2:	d7 03       	nop
8002d9d4:	00 00       	add	r0,r0
8002d9d6:	23 38       	sub	r8,51
8002d9d8:	80 03       	ld.sh	r3,r0[0x0]
8002d9da:	1b 7c       	ld.ub	r12,--sp
8002d9dc:	00 9a       	mov	r10,r0
8002d9de:	02 9b       	mov	r11,r1
8002d9e0:	e0 a0 13 d2 	rcall	80030184 <finite>
8002d9e4:	18 97       	mov	r7,r12
8002d9e6:	e0 81 00 8f 	brne	8002db04 <pow+0x23c>
8002d9ea:	04 9a       	mov	r10,r2
8002d9ec:	06 9b       	mov	r11,r3
8002d9ee:	e0 a0 13 cb 	rcall	80030184 <finite>
8002d9f2:	e0 80 00 89 	breq	8002db04 <pow+0x23c>
8002d9f6:	08 9a       	mov	r10,r4
8002d9f8:	0a 9b       	mov	r11,r5
8002d9fa:	e0 a0 13 c5 	rcall	80030184 <finite>
8002d9fe:	e0 80 00 83 	breq	8002db04 <pow+0x23c>
8002da02:	00 9a       	mov	r10,r0
8002da04:	02 9b       	mov	r11,r1
8002da06:	e0 a0 14 57 	rcall	800302b4 <__isnand>
8002da0a:	4b e8       	lddpc	r8,8002db00 <pow+0x238>
8002da0c:	58 0c       	cp.w	r12,0
8002da0e:	c2 50       	breq	8002da58 <pow+0x190>
8002da10:	50 48       	stdsp	sp[0x10],r8
8002da12:	50 b7       	stdsp	sp[0x2c],r7
8002da14:	30 18       	mov	r8,1
8002da16:	fa e3 00 14 	st.d	sp[20],r2
8002da1a:	fa e5 00 1c 	st.d	sp[28],r4
8002da1e:	50 38       	stdsp	sp[0xc],r8
8002da20:	6c 07       	ld.w	r7,r6[0x0]
8002da22:	58 07       	cp.w	r7,0
8002da24:	c0 61       	brne	8002da30 <pow+0x168>
8002da26:	30 08       	mov	r8,0
8002da28:	30 09       	mov	r9,0
8002da2a:	fa e9 00 24 	st.d	sp[36],r8
8002da2e:	c0 b8       	rjmp	8002da44 <pow+0x17c>
8002da30:	30 08       	mov	r8,0
8002da32:	30 09       	mov	r9,0
8002da34:	10 9a       	mov	r10,r8
8002da36:	12 9b       	mov	r11,r9
8002da38:	e0 a0 18 9e 	rcall	80030b74 <__avr32_f64_div>
8002da3c:	fa eb 00 24 	st.d	sp[36],r10
8002da40:	58 27       	cp.w	r7,2
8002da42:	c0 70       	breq	8002da50 <pow+0x188>
8002da44:	fa cc ff f4 	sub	r12,sp,-12
8002da48:	e0 a0 14 44 	rcall	800302d0 <matherr>
8002da4c:	e0 81 00 88 	brne	8002db5c <pow+0x294>
8002da50:	e0 a0 1c 76 	rcall	8003133c <__errno>
8002da54:	32 18       	mov	r8,33
8002da56:	c8 28       	rjmp	8002db5a <pow+0x292>
8002da58:	50 48       	stdsp	sp[0x10],r8
8002da5a:	50 bc       	stdsp	sp[0x2c],r12
8002da5c:	30 38       	mov	r8,3
8002da5e:	fa e3 00 14 	st.d	sp[20],r2
8002da62:	50 38       	stdsp	sp[0xc],r8
8002da64:	fa e5 00 1c 	st.d	sp[28],r4
8002da68:	6c 08       	ld.w	r8,r6[0x0]
8002da6a:	58 08       	cp.w	r8,0
8002da6c:	c2 81       	brne	8002dabc <pow+0x1f4>
8002da6e:	fc 18 e0 00 	movh	r8,0xe000
8002da72:	e0 69 ff ff 	mov	r9,65535
8002da76:	ea 19 47 ef 	orh	r9,0x47ef
8002da7a:	04 9a       	mov	r10,r2
8002da7c:	fa e9 00 24 	st.d	sp[36],r8
8002da80:	06 9b       	mov	r11,r3
8002da82:	30 08       	mov	r8,0
8002da84:	30 09       	mov	r9,0
8002da86:	e0 a0 18 43 	rcall	80030b0c <__avr32_f64_cmp_lt>
8002da8a:	c5 c0       	breq	8002db42 <pow+0x27a>
8002da8c:	fc 19 3f e0 	movh	r9,0x3fe0
8002da90:	30 08       	mov	r8,0
8002da92:	08 9a       	mov	r10,r4
8002da94:	0a 9b       	mov	r11,r5
8002da96:	e0 a0 15 29 	rcall	800304e8 <__avr32_f64_mul>
8002da9a:	16 99       	mov	r9,r11
8002da9c:	50 0a       	stdsp	sp[0x0],r10
8002da9e:	50 19       	stdsp	sp[0x4],r9
8002daa0:	e0 a0 14 1e 	rcall	800302dc <rint>
8002daa4:	40 19       	lddsp	r9,sp[0x4]
8002daa6:	40 08       	lddsp	r8,sp[0x0]
8002daa8:	e0 a0 17 eb 	rcall	80030a7e <__avr32_f64_cmp_eq>
8002daac:	c4 b1       	brne	8002db42 <pow+0x27a>
8002daae:	fc 18 e0 00 	movh	r8,0xe000
8002dab2:	e0 69 ff ff 	mov	r9,65535
8002dab6:	ea 19 c7 ef 	orh	r9,0xc7ef
8002daba:	c4 28       	rjmp	8002db3e <pow+0x276>
8002dabc:	30 08       	mov	r8,0
8002dabe:	fc 19 7f f0 	movh	r9,0x7ff0
8002dac2:	04 9a       	mov	r10,r2
8002dac4:	fa e9 00 24 	st.d	sp[36],r8
8002dac8:	06 9b       	mov	r11,r3
8002daca:	30 08       	mov	r8,0
8002dacc:	30 09       	mov	r9,0
8002dace:	e0 a0 18 1f 	rcall	80030b0c <__avr32_f64_cmp_lt>
8002dad2:	c3 80       	breq	8002db42 <pow+0x27a>
8002dad4:	fc 19 3f e0 	movh	r9,0x3fe0
8002dad8:	30 08       	mov	r8,0
8002dada:	08 9a       	mov	r10,r4
8002dadc:	0a 9b       	mov	r11,r5
8002dade:	e0 a0 15 05 	rcall	800304e8 <__avr32_f64_mul>
8002dae2:	16 99       	mov	r9,r11
8002dae4:	50 0a       	stdsp	sp[0x0],r10
8002dae6:	50 19       	stdsp	sp[0x4],r9
8002dae8:	e0 a0 13 fa 	rcall	800302dc <rint>
8002daec:	40 19       	lddsp	r9,sp[0x4]
8002daee:	40 08       	lddsp	r8,sp[0x0]
8002daf0:	e0 a0 17 c7 	rcall	80030a7e <__avr32_f64_cmp_eq>
8002daf4:	c2 71       	brne	8002db42 <pow+0x27a>
8002daf6:	30 08       	mov	r8,0
8002daf8:	f0 69 00 00 	mov	r9,-1048576
8002dafc:	c2 18       	rjmp	8002db3e <pow+0x276>
8002dafe:	d7 03       	nop
8002db00:	80 03       	ld.sh	r3,r0[0x0]
8002db02:	1b 7c       	ld.ub	r12,--sp
8002db04:	30 08       	mov	r8,0
8002db06:	30 09       	mov	r9,0
8002db08:	00 9a       	mov	r10,r0
8002db0a:	02 9b       	mov	r11,r1
8002db0c:	e0 a0 17 b9 	rcall	80030a7e <__avr32_f64_cmp_eq>
8002db10:	c2 f0       	breq	8002db6e <pow+0x2a6>
8002db12:	04 9a       	mov	r10,r2
8002db14:	06 9b       	mov	r11,r3
8002db16:	e0 a0 13 37 	rcall	80030184 <finite>
8002db1a:	c2 a0       	breq	8002db6e <pow+0x2a6>
8002db1c:	08 9a       	mov	r10,r4
8002db1e:	0a 9b       	mov	r11,r5
8002db20:	e0 a0 13 32 	rcall	80030184 <finite>
8002db24:	c2 50       	breq	8002db6e <pow+0x2a6>
8002db26:	30 48       	mov	r8,4
8002db28:	50 38       	stdsp	sp[0xc],r8
8002db2a:	49 48       	lddpc	r8,8002db78 <pow+0x2b0>
8002db2c:	50 48       	stdsp	sp[0x10],r8
8002db2e:	30 08       	mov	r8,0
8002db30:	fa e3 00 14 	st.d	sp[20],r2
8002db34:	50 b8       	stdsp	sp[0x2c],r8
8002db36:	fa e5 00 1c 	st.d	sp[28],r4
8002db3a:	30 08       	mov	r8,0
8002db3c:	30 09       	mov	r9,0
8002db3e:	fa e9 00 24 	st.d	sp[36],r8
8002db42:	48 f8       	lddpc	r8,8002db7c <pow+0x2b4>
8002db44:	70 08       	ld.w	r8,r8[0x0]
8002db46:	58 28       	cp.w	r8,2
8002db48:	c0 60       	breq	8002db54 <pow+0x28c>
8002db4a:	fa cc ff f4 	sub	r12,sp,-12
8002db4e:	e0 a0 13 c1 	rcall	800302d0 <matherr>
8002db52:	c0 51       	brne	8002db5c <pow+0x294>
8002db54:	e0 a0 1b f4 	rcall	8003133c <__errno>
8002db58:	32 28       	mov	r8,34
8002db5a:	99 08       	st.w	r12[0x0],r8
8002db5c:	40 b8       	lddsp	r8,sp[0x2c]
8002db5e:	58 08       	cp.w	r8,0
8002db60:	c0 50       	breq	8002db6a <pow+0x2a2>
8002db62:	e0 a0 1b ed 	rcall	8003133c <__errno>
8002db66:	40 b8       	lddsp	r8,sp[0x2c]
8002db68:	99 08       	st.w	r12[0x0],r8
8002db6a:	fa e0 00 24 	ld.d	r0,sp[36]
8002db6e:	00 9a       	mov	r10,r0
8002db70:	02 9b       	mov	r11,r1
8002db72:	2f 4d       	sub	sp,-48
8002db74:	d8 32       	popm	r0-r7,pc
8002db76:	d7 03       	nop
8002db78:	80 03       	ld.sh	r3,r0[0x0]
8002db7a:	1b 7c       	ld.ub	r12,--sp
8002db7c:	00 00       	add	r0,r0
8002db7e:	23 38       	sub	r8,51

8002db80 <sqrt>:
8002db80:	d4 31       	pushm	r0-r7,lr
8002db82:	20 9d       	sub	sp,36
8002db84:	4a 47       	lddpc	r7,8002dc14 <sqrt+0x94>
8002db86:	14 94       	mov	r4,r10
8002db88:	16 95       	mov	r5,r11
8002db8a:	e0 a0 0b 61 	rcall	8002f24c <__ieee754_sqrt>
8002db8e:	6e 08       	ld.w	r8,r7[0x0]
8002db90:	14 92       	mov	r2,r10
8002db92:	16 93       	mov	r3,r11
8002db94:	5b f8       	cp.w	r8,-1
8002db96:	c3 a0       	breq	8002dc0a <sqrt+0x8a>
8002db98:	08 9a       	mov	r10,r4
8002db9a:	0a 9b       	mov	r11,r5
8002db9c:	e0 a0 13 8c 	rcall	800302b4 <__isnand>
8002dba0:	18 96       	mov	r6,r12
8002dba2:	c3 41       	brne	8002dc0a <sqrt+0x8a>
8002dba4:	30 08       	mov	r8,0
8002dba6:	30 09       	mov	r9,0
8002dba8:	08 9a       	mov	r10,r4
8002dbaa:	0a 9b       	mov	r11,r5
8002dbac:	e0 a0 17 b0 	rcall	80030b0c <__avr32_f64_cmp_lt>
8002dbb0:	c2 d0       	breq	8002dc0a <sqrt+0x8a>
8002dbb2:	30 18       	mov	r8,1
8002dbb4:	50 86       	stdsp	sp[0x20],r6
8002dbb6:	50 08       	stdsp	sp[0x0],r8
8002dbb8:	fa e5 00 08 	st.d	sp[8],r4
8002dbbc:	49 78       	lddpc	r8,8002dc18 <sqrt+0x98>
8002dbbe:	fa e5 00 10 	st.d	sp[16],r4
8002dbc2:	50 18       	stdsp	sp[0x4],r8
8002dbc4:	6e 07       	ld.w	r7,r7[0x0]
8002dbc6:	58 07       	cp.w	r7,0
8002dbc8:	c0 61       	brne	8002dbd4 <sqrt+0x54>
8002dbca:	30 08       	mov	r8,0
8002dbcc:	30 09       	mov	r9,0
8002dbce:	fa e9 00 18 	st.d	sp[24],r8
8002dbd2:	c0 b8       	rjmp	8002dbe8 <sqrt+0x68>
8002dbd4:	30 08       	mov	r8,0
8002dbd6:	30 09       	mov	r9,0
8002dbd8:	10 9a       	mov	r10,r8
8002dbda:	12 9b       	mov	r11,r9
8002dbdc:	e0 a0 17 cc 	rcall	80030b74 <__avr32_f64_div>
8002dbe0:	fa eb 00 18 	st.d	sp[24],r10
8002dbe4:	58 27       	cp.w	r7,2
8002dbe6:	c0 50       	breq	8002dbf0 <sqrt+0x70>
8002dbe8:	1a 9c       	mov	r12,sp
8002dbea:	e0 a0 13 73 	rcall	800302d0 <matherr>
8002dbee:	c0 51       	brne	8002dbf8 <sqrt+0x78>
8002dbf0:	e0 a0 1b a6 	rcall	8003133c <__errno>
8002dbf4:	32 18       	mov	r8,33
8002dbf6:	99 08       	st.w	r12[0x0],r8
8002dbf8:	40 88       	lddsp	r8,sp[0x20]
8002dbfa:	58 08       	cp.w	r8,0
8002dbfc:	c0 50       	breq	8002dc06 <sqrt+0x86>
8002dbfe:	e0 a0 1b 9f 	rcall	8003133c <__errno>
8002dc02:	40 88       	lddsp	r8,sp[0x20]
8002dc04:	99 08       	st.w	r12[0x0],r8
8002dc06:	fa e2 00 18 	ld.d	r2,sp[24]
8002dc0a:	04 9a       	mov	r10,r2
8002dc0c:	06 9b       	mov	r11,r3
8002dc0e:	2f 7d       	sub	sp,-36
8002dc10:	d8 32       	popm	r0-r7,pc
8002dc12:	d7 03       	nop
8002dc14:	00 00       	add	r0,r0
8002dc16:	23 38       	sub	r8,51
8002dc18:	80 03       	ld.sh	r3,r0[0x0]
8002dc1a:	1b 80       	ld.ub	r0,sp[0x0]

8002dc1c <__ieee754_asin>:
8002dc1c:	d4 31       	pushm	r0-r7,lr
8002dc1e:	20 5d       	sub	sp,20
8002dc20:	50 0b       	stdsp	sp[0x0],r11
8002dc22:	16 96       	mov	r6,r11
8002dc24:	14 97       	mov	r7,r10
8002dc26:	eb db c0 1f 	bfextu	r5,r11,0x0,0x1f
8002dc2a:	e0 68 ff ff 	mov	r8,65535
8002dc2e:	ea 18 3f ef 	orh	r8,0x3fef
8002dc32:	10 35       	cp.w	r5,r8
8002dc34:	e0 8a 00 32 	brle	8002dc98 <__ieee754_asin+0x7c>
8002dc38:	fc 1a c0 10 	movh	r10,0xc010
8002dc3c:	14 05       	add	r5,r10
8002dc3e:	0e 45       	or	r5,r7
8002dc40:	c1 f1       	brne	8002dc7e <__ieee754_asin+0x62>
8002dc42:	e0 68 2d 18 	mov	r8,11544
8002dc46:	ea 18 54 44 	orh	r8,0x5444
8002dc4a:	e0 69 21 fb 	mov	r9,8699
8002dc4e:	ea 19 3f f9 	orh	r9,0x3ff9
8002dc52:	0e 9a       	mov	r10,r7
8002dc54:	e0 a0 14 4a 	rcall	800304e8 <__avr32_f64_mul>
8002dc58:	e0 68 5c 07 	mov	r8,23559
8002dc5c:	ea 18 33 14 	orh	r8,0x3314
8002dc60:	14 94       	mov	r4,r10
8002dc62:	16 95       	mov	r5,r11
8002dc64:	e0 69 a6 26 	mov	r9,42534
8002dc68:	ea 19 3c 91 	orh	r9,0x3c91
8002dc6c:	0c 9b       	mov	r11,r6
8002dc6e:	0e 9a       	mov	r10,r7
8002dc70:	e0 a0 14 3c 	rcall	800304e8 <__avr32_f64_mul>
8002dc74:	14 98       	mov	r8,r10
8002dc76:	16 99       	mov	r9,r11
8002dc78:	08 9a       	mov	r10,r4
8002dc7a:	0a 9b       	mov	r11,r5
8002dc7c:	ce 48       	rjmp	8002de44 <__ieee754_asin+0x228>
8002dc7e:	0c 99       	mov	r9,r6
8002dc80:	0e 98       	mov	r8,r7
8002dc82:	0e 9a       	mov	r10,r7
8002dc84:	e0 a0 15 1e 	rcall	800306c0 <__avr32_f64_sub>
8002dc88:	14 98       	mov	r8,r10
8002dc8a:	16 99       	mov	r9,r11
8002dc8c:	e0 a0 17 74 	rcall	80030b74 <__avr32_f64_div>
8002dc90:	16 96       	mov	r6,r11
8002dc92:	14 97       	mov	r7,r10
8002dc94:	e0 8f 02 37 	bral	8002e102 <__ieee754_asin+0x4e6>
8002dc98:	e0 68 ff ff 	mov	r8,65535
8002dc9c:	ea 18 3f df 	orh	r8,0x3fdf
8002dca0:	10 35       	cp.w	r5,r8
8002dca2:	e0 89 00 d4 	brgt	8002de4a <__ieee754_asin+0x22e>
8002dca6:	e0 68 ff ff 	mov	r8,65535
8002dcaa:	ea 18 3e 3f 	orh	r8,0x3e3f
8002dcae:	10 35       	cp.w	r5,r8
8002dcb0:	e0 89 00 17 	brgt	8002dcde <__ieee754_asin+0xc2>
8002dcb4:	e0 68 75 9c 	mov	r8,30108
8002dcb8:	ea 18 88 00 	orh	r8,0x8800
8002dcbc:	e0 69 e4 3c 	mov	r9,58428
8002dcc0:	ea 19 7e 37 	orh	r9,0x7e37
8002dcc4:	e0 a0 15 cc 	rcall	8003085c <__avr32_f64_add>
8002dcc8:	14 98       	mov	r8,r10
8002dcca:	16 99       	mov	r9,r11
8002dccc:	30 0a       	mov	r10,0
8002dcce:	fc 1b 3f f0 	movh	r11,0x3ff0
8002dcd2:	e0 a0 17 1d 	rcall	80030b0c <__avr32_f64_cmp_lt>
8002dcd6:	e0 80 00 ba 	breq	8002de4a <__ieee754_asin+0x22e>
8002dcda:	e0 8f 02 14 	bral	8002e102 <__ieee754_asin+0x4e6>
8002dcde:	16 99       	mov	r9,r11
8002dce0:	14 98       	mov	r8,r10
8002dce2:	e0 a0 14 03 	rcall	800304e8 <__avr32_f64_mul>
8002dce6:	e0 68 f7 09 	mov	r8,63241
8002dcea:	ea 18 0d fd 	orh	r8,0xdfd
8002dcee:	14 94       	mov	r4,r10
8002dcf0:	16 95       	mov	r5,r11
8002dcf2:	e0 69 3d e1 	mov	r9,15841
8002dcf6:	ea 19 3f 02 	orh	r9,0x3f02
8002dcfa:	e0 a0 13 f7 	rcall	800304e8 <__avr32_f64_mul>
8002dcfe:	e0 68 b2 88 	mov	r8,45704
8002dd02:	ea 18 75 01 	orh	r8,0x7501
8002dd06:	e0 69 ef e0 	mov	r9,61408
8002dd0a:	ea 19 3f 49 	orh	r9,0x3f49
8002dd0e:	e0 a0 15 a7 	rcall	8003085c <__avr32_f64_add>
8002dd12:	14 98       	mov	r8,r10
8002dd14:	16 99       	mov	r9,r11
8002dd16:	08 9a       	mov	r10,r4
8002dd18:	0a 9b       	mov	r11,r5
8002dd1a:	e0 a0 13 e7 	rcall	800304e8 <__avr32_f64_mul>
8002dd1e:	e0 68 8f 3b 	mov	r8,36667
8002dd22:	ea 18 b5 68 	orh	r8,0xb568
8002dd26:	e0 69 82 28 	mov	r9,33320
8002dd2a:	ea 19 3f a4 	orh	r9,0x3fa4
8002dd2e:	e0 a0 14 c9 	rcall	800306c0 <__avr32_f64_sub>
8002dd32:	14 98       	mov	r8,r10
8002dd34:	16 99       	mov	r9,r11
8002dd36:	08 9a       	mov	r10,r4
8002dd38:	0a 9b       	mov	r11,r5
8002dd3a:	e0 a0 13 d7 	rcall	800304e8 <__avr32_f64_mul>
8002dd3e:	e0 68 44 55 	mov	r8,17493
8002dd42:	ea 18 0e 88 	orh	r8,0xe88
8002dd46:	e0 69 c1 55 	mov	r9,49493
8002dd4a:	ea 19 3f c9 	orh	r9,0x3fc9
8002dd4e:	e0 a0 15 87 	rcall	8003085c <__avr32_f64_add>
8002dd52:	14 98       	mov	r8,r10
8002dd54:	16 99       	mov	r9,r11
8002dd56:	08 9a       	mov	r10,r4
8002dd58:	0a 9b       	mov	r11,r5
8002dd5a:	e0 a0 13 c7 	rcall	800304e8 <__avr32_f64_mul>
8002dd5e:	e0 68 6f 7d 	mov	r8,28541
8002dd62:	ea 18 03 eb 	orh	r8,0x3eb
8002dd66:	e0 69 d6 12 	mov	r9,54802
8002dd6a:	ea 19 3f d4 	orh	r9,0x3fd4
8002dd6e:	e0 a0 14 a9 	rcall	800306c0 <__avr32_f64_sub>
8002dd72:	14 98       	mov	r8,r10
8002dd74:	16 99       	mov	r9,r11
8002dd76:	08 9a       	mov	r10,r4
8002dd78:	0a 9b       	mov	r11,r5
8002dd7a:	e0 a0 13 b7 	rcall	800304e8 <__avr32_f64_mul>
8002dd7e:	e0 68 55 55 	mov	r8,21845
8002dd82:	ea 18 55 55 	orh	r8,0x5555
8002dd86:	e0 69 55 55 	mov	r9,21845
8002dd8a:	ea 19 3f c5 	orh	r9,0x3fc5
8002dd8e:	e0 a0 15 67 	rcall	8003085c <__avr32_f64_add>
8002dd92:	14 98       	mov	r8,r10
8002dd94:	16 99       	mov	r9,r11
8002dd96:	08 9a       	mov	r10,r4
8002dd98:	0a 9b       	mov	r11,r5
8002dd9a:	e0 a0 13 a7 	rcall	800304e8 <__avr32_f64_mul>
8002dd9e:	e0 68 92 82 	mov	r8,37506
8002dda2:	ea 18 b1 2e 	orh	r8,0xb12e
8002dda6:	14 92       	mov	r2,r10
8002dda8:	16 93       	mov	r3,r11
8002ddaa:	e0 69 b8 c5 	mov	r9,47301
8002ddae:	ea 19 3f b3 	orh	r9,0x3fb3
8002ddb2:	08 9a       	mov	r10,r4
8002ddb4:	0a 9b       	mov	r11,r5
8002ddb6:	e0 a0 13 99 	rcall	800304e8 <__avr32_f64_mul>
8002ddba:	e0 68 01 59 	mov	r8,345
8002ddbe:	ea 18 1b 8d 	orh	r8,0x1b8d
8002ddc2:	e0 69 06 6c 	mov	r9,1644
8002ddc6:	ea 19 3f e6 	orh	r9,0x3fe6
8002ddca:	e0 a0 14 7b 	rcall	800306c0 <__avr32_f64_sub>
8002ddce:	14 98       	mov	r8,r10
8002ddd0:	16 99       	mov	r9,r11
8002ddd2:	08 9a       	mov	r10,r4
8002ddd4:	0a 9b       	mov	r11,r5
8002ddd6:	e0 a0 13 89 	rcall	800304e8 <__avr32_f64_mul>
8002ddda:	e0 68 8a c8 	mov	r8,35528
8002ddde:	ea 18 9c 59 	orh	r8,0x9c59
8002dde2:	e0 69 2a e5 	mov	r9,10981
8002dde6:	ea 19 40 00 	orh	r9,0x4000
8002ddea:	e0 a0 15 39 	rcall	8003085c <__avr32_f64_add>
8002ddee:	14 98       	mov	r8,r10
8002ddf0:	16 99       	mov	r9,r11
8002ddf2:	08 9a       	mov	r10,r4
8002ddf4:	0a 9b       	mov	r11,r5
8002ddf6:	e0 a0 13 79 	rcall	800304e8 <__avr32_f64_mul>
8002ddfa:	e0 68 2d 4b 	mov	r8,11595
8002ddfe:	ea 18 1c 8a 	orh	r8,0x1c8a
8002de02:	e0 69 3a 27 	mov	r9,14887
8002de06:	ea 19 40 03 	orh	r9,0x4003
8002de0a:	e0 a0 14 5b 	rcall	800306c0 <__avr32_f64_sub>
8002de0e:	14 98       	mov	r8,r10
8002de10:	16 99       	mov	r9,r11
8002de12:	08 9a       	mov	r10,r4
8002de14:	0a 9b       	mov	r11,r5
8002de16:	e0 a0 13 69 	rcall	800304e8 <__avr32_f64_mul>
8002de1a:	30 08       	mov	r8,0
8002de1c:	fc 19 3f f0 	movh	r9,0x3ff0
8002de20:	e0 a0 15 1e 	rcall	8003085c <__avr32_f64_add>
8002de24:	14 98       	mov	r8,r10
8002de26:	16 99       	mov	r9,r11
8002de28:	04 9a       	mov	r10,r2
8002de2a:	06 9b       	mov	r11,r3
8002de2c:	e0 a0 16 a4 	rcall	80030b74 <__avr32_f64_div>
8002de30:	14 98       	mov	r8,r10
8002de32:	16 99       	mov	r9,r11
8002de34:	0e 9a       	mov	r10,r7
8002de36:	0c 9b       	mov	r11,r6
8002de38:	e0 a0 13 58 	rcall	800304e8 <__avr32_f64_mul>
8002de3c:	14 98       	mov	r8,r10
8002de3e:	16 99       	mov	r9,r11
8002de40:	0e 9a       	mov	r10,r7
8002de42:	0c 9b       	mov	r11,r6
8002de44:	e0 a0 15 0c 	rcall	8003085c <__avr32_f64_add>
8002de48:	c2 4b       	rjmp	8002dc90 <__ieee754_asin+0x74>
8002de4a:	0c 9b       	mov	r11,r6
8002de4c:	0e 9a       	mov	r10,r7
8002de4e:	e0 a0 11 97 	rcall	8003017c <fabs>
8002de52:	14 98       	mov	r8,r10
8002de54:	16 99       	mov	r9,r11
8002de56:	30 0a       	mov	r10,0
8002de58:	fc 1b 3f f0 	movh	r11,0x3ff0
8002de5c:	e0 a0 14 32 	rcall	800306c0 <__avr32_f64_sub>
8002de60:	30 08       	mov	r8,0
8002de62:	fc 19 3f e0 	movh	r9,0x3fe0
8002de66:	e0 a0 13 41 	rcall	800304e8 <__avr32_f64_mul>
8002de6a:	e0 68 f7 09 	mov	r8,63241
8002de6e:	ea 18 0d fd 	orh	r8,0xdfd
8002de72:	16 97       	mov	r7,r11
8002de74:	14 96       	mov	r6,r10
8002de76:	e0 69 3d e1 	mov	r9,15841
8002de7a:	ea 19 3f 02 	orh	r9,0x3f02
8002de7e:	e0 a0 13 35 	rcall	800304e8 <__avr32_f64_mul>
8002de82:	e0 68 b2 88 	mov	r8,45704
8002de86:	ea 18 75 01 	orh	r8,0x7501
8002de8a:	e0 69 ef e0 	mov	r9,61408
8002de8e:	ea 19 3f 49 	orh	r9,0x3f49
8002de92:	e0 a0 14 e5 	rcall	8003085c <__avr32_f64_add>
8002de96:	14 98       	mov	r8,r10
8002de98:	16 99       	mov	r9,r11
8002de9a:	0c 9a       	mov	r10,r6
8002de9c:	0e 9b       	mov	r11,r7
8002de9e:	e0 a0 13 25 	rcall	800304e8 <__avr32_f64_mul>
8002dea2:	e0 68 8f 3b 	mov	r8,36667
8002dea6:	ea 18 b5 68 	orh	r8,0xb568
8002deaa:	e0 69 82 28 	mov	r9,33320
8002deae:	ea 19 3f a4 	orh	r9,0x3fa4
8002deb2:	e0 a0 14 07 	rcall	800306c0 <__avr32_f64_sub>
8002deb6:	14 98       	mov	r8,r10
8002deb8:	16 99       	mov	r9,r11
8002deba:	0c 9a       	mov	r10,r6
8002debc:	0e 9b       	mov	r11,r7
8002debe:	e0 a0 13 15 	rcall	800304e8 <__avr32_f64_mul>
8002dec2:	e0 68 44 55 	mov	r8,17493
8002dec6:	ea 18 0e 88 	orh	r8,0xe88
8002deca:	e0 69 c1 55 	mov	r9,49493
8002dece:	ea 19 3f c9 	orh	r9,0x3fc9
8002ded2:	e0 a0 14 c5 	rcall	8003085c <__avr32_f64_add>
8002ded6:	14 98       	mov	r8,r10
8002ded8:	16 99       	mov	r9,r11
8002deda:	0c 9a       	mov	r10,r6
8002dedc:	0e 9b       	mov	r11,r7
8002dede:	e0 a0 13 05 	rcall	800304e8 <__avr32_f64_mul>
8002dee2:	e0 68 6f 7d 	mov	r8,28541
8002dee6:	ea 18 03 eb 	orh	r8,0x3eb
8002deea:	e0 69 d6 12 	mov	r9,54802
8002deee:	ea 19 3f d4 	orh	r9,0x3fd4
8002def2:	e0 a0 13 e7 	rcall	800306c0 <__avr32_f64_sub>
8002def6:	14 98       	mov	r8,r10
8002def8:	16 99       	mov	r9,r11
8002defa:	0c 9a       	mov	r10,r6
8002defc:	0e 9b       	mov	r11,r7
8002defe:	e0 a0 12 f5 	rcall	800304e8 <__avr32_f64_mul>
8002df02:	e0 68 55 55 	mov	r8,21845
8002df06:	ea 18 55 55 	orh	r8,0x5555
8002df0a:	e0 69 55 55 	mov	r9,21845
8002df0e:	ea 19 3f c5 	orh	r9,0x3fc5
8002df12:	e0 a0 14 a5 	rcall	8003085c <__avr32_f64_add>
8002df16:	14 98       	mov	r8,r10
8002df18:	16 99       	mov	r9,r11
8002df1a:	0c 9a       	mov	r10,r6
8002df1c:	0e 9b       	mov	r11,r7
8002df1e:	e0 a0 12 e5 	rcall	800304e8 <__avr32_f64_mul>
8002df22:	e0 68 92 82 	mov	r8,37506
8002df26:	ea 18 b1 2e 	orh	r8,0xb12e
8002df2a:	e0 69 b8 c5 	mov	r9,47301
8002df2e:	ea 19 3f b3 	orh	r9,0x3fb3
8002df32:	14 90       	mov	r0,r10
8002df34:	16 91       	mov	r1,r11
8002df36:	0c 9a       	mov	r10,r6
8002df38:	0e 9b       	mov	r11,r7
8002df3a:	e0 a0 12 d7 	rcall	800304e8 <__avr32_f64_mul>
8002df3e:	e0 68 01 59 	mov	r8,345
8002df42:	ea 18 1b 8d 	orh	r8,0x1b8d
8002df46:	e0 69 06 6c 	mov	r9,1644
8002df4a:	ea 19 3f e6 	orh	r9,0x3fe6
8002df4e:	e0 a0 13 b9 	rcall	800306c0 <__avr32_f64_sub>
8002df52:	14 98       	mov	r8,r10
8002df54:	16 99       	mov	r9,r11
8002df56:	0c 9a       	mov	r10,r6
8002df58:	0e 9b       	mov	r11,r7
8002df5a:	e0 a0 12 c7 	rcall	800304e8 <__avr32_f64_mul>
8002df5e:	e0 68 8a c8 	mov	r8,35528
8002df62:	ea 18 9c 59 	orh	r8,0x9c59
8002df66:	e0 69 2a e5 	mov	r9,10981
8002df6a:	ea 19 40 00 	orh	r9,0x4000
8002df6e:	e0 a0 14 77 	rcall	8003085c <__avr32_f64_add>
8002df72:	14 98       	mov	r8,r10
8002df74:	16 99       	mov	r9,r11
8002df76:	0c 9a       	mov	r10,r6
8002df78:	0e 9b       	mov	r11,r7
8002df7a:	e0 a0 12 b7 	rcall	800304e8 <__avr32_f64_mul>
8002df7e:	e0 68 2d 4b 	mov	r8,11595
8002df82:	ea 18 1c 8a 	orh	r8,0x1c8a
8002df86:	e0 69 3a 27 	mov	r9,14887
8002df8a:	ea 19 40 03 	orh	r9,0x4003
8002df8e:	e0 a0 13 99 	rcall	800306c0 <__avr32_f64_sub>
8002df92:	14 98       	mov	r8,r10
8002df94:	16 99       	mov	r9,r11
8002df96:	0c 9a       	mov	r10,r6
8002df98:	0e 9b       	mov	r11,r7
8002df9a:	e0 a0 12 a7 	rcall	800304e8 <__avr32_f64_mul>
8002df9e:	30 08       	mov	r8,0
8002dfa0:	fc 19 3f f0 	movh	r9,0x3ff0
8002dfa4:	e0 a0 14 5c 	rcall	8003085c <__avr32_f64_add>
8002dfa8:	fa eb 00 04 	st.d	sp[4],r10
8002dfac:	0c 9a       	mov	r10,r6
8002dfae:	0e 9b       	mov	r11,r7
8002dfb0:	e0 a0 09 4e 	rcall	8002f24c <__ieee754_sqrt>
8002dfb4:	e0 68 33 32 	mov	r8,13106
8002dfb8:	ea 18 3f ef 	orh	r8,0x3fef
8002dfbc:	14 92       	mov	r2,r10
8002dfbe:	16 93       	mov	r3,r11
8002dfc0:	10 35       	cp.w	r5,r8
8002dfc2:	e0 8a 00 2d 	brle	8002e01c <__ieee754_asin+0x400>
8002dfc6:	fa e8 00 04 	ld.d	r8,sp[4]
8002dfca:	00 9a       	mov	r10,r0
8002dfcc:	02 9b       	mov	r11,r1
8002dfce:	e0 a0 15 d3 	rcall	80030b74 <__avr32_f64_div>
8002dfd2:	14 98       	mov	r8,r10
8002dfd4:	16 99       	mov	r9,r11
8002dfd6:	04 9a       	mov	r10,r2
8002dfd8:	06 9b       	mov	r11,r3
8002dfda:	e0 a0 12 87 	rcall	800304e8 <__avr32_f64_mul>
8002dfde:	14 98       	mov	r8,r10
8002dfe0:	16 99       	mov	r9,r11
8002dfe2:	04 9a       	mov	r10,r2
8002dfe4:	06 9b       	mov	r11,r3
8002dfe6:	e0 a0 14 3b 	rcall	8003085c <__avr32_f64_add>
8002dfea:	14 98       	mov	r8,r10
8002dfec:	16 99       	mov	r9,r11
8002dfee:	e0 a0 14 37 	rcall	8003085c <__avr32_f64_add>
8002dff2:	e0 68 5c 07 	mov	r8,23559
8002dff6:	ea 18 33 14 	orh	r8,0x3314
8002dffa:	e0 69 a6 26 	mov	r9,42534
8002dffe:	ea 19 3c 91 	orh	r9,0x3c91
8002e002:	e0 a0 13 5f 	rcall	800306c0 <__avr32_f64_sub>
8002e006:	14 98       	mov	r8,r10
8002e008:	16 99       	mov	r9,r11
8002e00a:	e0 6a 2d 18 	mov	r10,11544
8002e00e:	ea 1a 54 44 	orh	r10,0x5444
8002e012:	e0 6b 21 fb 	mov	r11,8699
8002e016:	ea 1b 3f f9 	orh	r11,0x3ff9
8002e01a:	c6 98       	rjmp	8002e0ec <__ieee754_asin+0x4d0>
8002e01c:	14 98       	mov	r8,r10
8002e01e:	06 99       	mov	r9,r3
8002e020:	e0 a0 14 1e 	rcall	8003085c <__avr32_f64_add>
8002e024:	fa e8 00 04 	ld.d	r8,sp[4]
8002e028:	fa eb 00 0c 	st.d	sp[12],r10
8002e02c:	00 9a       	mov	r10,r0
8002e02e:	02 9b       	mov	r11,r1
8002e030:	e0 a0 15 a2 	rcall	80030b74 <__avr32_f64_div>
8002e034:	14 98       	mov	r8,r10
8002e036:	16 99       	mov	r9,r11
8002e038:	fa ea 00 0c 	ld.d	r10,sp[12]
8002e03c:	e0 a0 12 56 	rcall	800304e8 <__avr32_f64_mul>
8002e040:	30 04       	mov	r4,0
8002e042:	14 90       	mov	r0,r10
8002e044:	16 91       	mov	r1,r11
8002e046:	08 98       	mov	r8,r4
8002e048:	06 99       	mov	r9,r3
8002e04a:	08 9a       	mov	r10,r4
8002e04c:	06 9b       	mov	r11,r3
8002e04e:	e0 a0 12 4d 	rcall	800304e8 <__avr32_f64_mul>
8002e052:	14 98       	mov	r8,r10
8002e054:	16 99       	mov	r9,r11
8002e056:	0c 9a       	mov	r10,r6
8002e058:	0e 9b       	mov	r11,r7
8002e05a:	e0 a0 13 33 	rcall	800306c0 <__avr32_f64_sub>
8002e05e:	08 98       	mov	r8,r4
8002e060:	16 97       	mov	r7,r11
8002e062:	14 96       	mov	r6,r10
8002e064:	06 99       	mov	r9,r3
8002e066:	04 9a       	mov	r10,r2
8002e068:	06 9b       	mov	r11,r3
8002e06a:	e0 a0 13 f9 	rcall	8003085c <__avr32_f64_add>
8002e06e:	14 98       	mov	r8,r10
8002e070:	16 99       	mov	r9,r11
8002e072:	0c 9a       	mov	r10,r6
8002e074:	0e 9b       	mov	r11,r7
8002e076:	e0 a0 15 7f 	rcall	80030b74 <__avr32_f64_div>
8002e07a:	30 08       	mov	r8,0
8002e07c:	fc 19 c0 00 	movh	r9,0xc000
8002e080:	e0 a0 12 34 	rcall	800304e8 <__avr32_f64_mul>
8002e084:	e0 68 5c 07 	mov	r8,23559
8002e088:	ea 18 33 14 	orh	r8,0x3314
8002e08c:	e0 69 a6 26 	mov	r9,42534
8002e090:	ea 19 3c 91 	orh	r9,0x3c91
8002e094:	e0 a0 13 e4 	rcall	8003085c <__avr32_f64_add>
8002e098:	14 98       	mov	r8,r10
8002e09a:	16 99       	mov	r9,r11
8002e09c:	00 9a       	mov	r10,r0
8002e09e:	02 9b       	mov	r11,r1
8002e0a0:	e0 a0 13 10 	rcall	800306c0 <__avr32_f64_sub>
8002e0a4:	30 08       	mov	r8,0
8002e0a6:	16 97       	mov	r7,r11
8002e0a8:	14 96       	mov	r6,r10
8002e0aa:	fc 19 c0 00 	movh	r9,0xc000
8002e0ae:	08 9a       	mov	r10,r4
8002e0b0:	06 9b       	mov	r11,r3
8002e0b2:	e0 a0 12 1b 	rcall	800304e8 <__avr32_f64_mul>
8002e0b6:	e0 68 2d 18 	mov	r8,11544
8002e0ba:	ea 18 54 44 	orh	r8,0x5444
8002e0be:	e0 69 21 fb 	mov	r9,8699
8002e0c2:	ea 19 3f e9 	orh	r9,0x3fe9
8002e0c6:	e0 a0 13 cb 	rcall	8003085c <__avr32_f64_add>
8002e0ca:	14 98       	mov	r8,r10
8002e0cc:	16 99       	mov	r9,r11
8002e0ce:	0c 9a       	mov	r10,r6
8002e0d0:	0e 9b       	mov	r11,r7
8002e0d2:	e0 a0 12 f7 	rcall	800306c0 <__avr32_f64_sub>
8002e0d6:	06 95       	mov	r5,r3
8002e0d8:	14 98       	mov	r8,r10
8002e0da:	16 99       	mov	r9,r11
8002e0dc:	e0 6a 2d 18 	mov	r10,11544
8002e0e0:	ea 1a 54 44 	orh	r10,0x5444
8002e0e4:	e0 6b 21 fb 	mov	r11,8699
8002e0e8:	ea 1b 3f e9 	orh	r11,0x3fe9
8002e0ec:	e0 a0 12 ea 	rcall	800306c0 <__avr32_f64_sub>
8002e0f0:	40 08       	lddsp	r8,sp[0x0]
8002e0f2:	16 96       	mov	r6,r11
8002e0f4:	14 97       	mov	r7,r10
8002e0f6:	ee 16 80 00 	eorh	r6,0x8000
8002e0fa:	58 08       	cp.w	r8,0
8002e0fc:	e0 8a 00 03 	brle	8002e102 <__ieee754_asin+0x4e6>
8002e100:	16 96       	mov	r6,r11
8002e102:	0c 9b       	mov	r11,r6
8002e104:	0e 9a       	mov	r10,r7
8002e106:	2f bd       	sub	sp,-20
8002e108:	d8 32       	popm	r0-r7,pc
8002e10a:	d7 03       	nop

8002e10c <__ieee754_atan2>:
8002e10c:	d4 31       	pushm	r0-r7,lr
8002e10e:	20 2d       	sub	sp,8
8002e110:	50 0b       	stdsp	sp[0x0],r11
8002e112:	10 96       	mov	r6,r8
8002e114:	10 92       	mov	r2,r8
8002e116:	fd d9 c0 1f 	bfextu	lr,r9,0x0,0x1f
8002e11a:	5c 38       	neg	r8
8002e11c:	14 94       	mov	r4,r10
8002e11e:	0c 48       	or	r8,r6
8002e120:	16 95       	mov	r5,r11
8002e122:	12 93       	mov	r3,r9
8002e124:	14 90       	mov	r0,r10
8002e126:	16 91       	mov	r1,r11
8002e128:	12 9c       	mov	r12,r9
8002e12a:	fd e8 13 f8 	or	r8,lr,r8>>0x1f
8002e12e:	fc 17 7f f0 	movh	r7,0x7ff0
8002e132:	0e 38       	cp.w	r8,r7
8002e134:	e0 8b 00 0e 	brhi	8002e150 <__ieee754_atan2+0x44>
8002e138:	f1 db c0 1f 	bfextu	r8,r11,0x0,0x1f
8002e13c:	f4 07 11 00 	rsub	r7,r10,0
8002e140:	fc 10 7f f0 	movh	r0,0x7ff0
8002e144:	14 47       	or	r7,r10
8002e146:	f1 e7 13 f7 	or	r7,r8,r7>>0x1f
8002e14a:	00 37       	cp.w	r7,r0
8002e14c:	e0 88 00 09 	brls	8002e15e <__ieee754_atan2+0x52>
8002e150:	04 98       	mov	r8,r2
8002e152:	06 99       	mov	r9,r3
8002e154:	08 9a       	mov	r10,r4
8002e156:	0a 9b       	mov	r11,r5
8002e158:	e0 a0 13 82 	rcall	8003085c <__avr32_f64_add>
8002e15c:	ce 88       	rjmp	8002e32c <__ieee754_atan2+0x220>
8002e15e:	fc 17 c0 10 	movh	r7,0xc010
8002e162:	f8 07 00 07 	add	r7,r12,r7
8002e166:	0c 47       	or	r7,r6
8002e168:	c0 41       	brne	8002e170 <__ieee754_atan2+0x64>
8002e16a:	e0 a0 0e 65 	rcall	8002fe34 <atan>
8002e16e:	cd f8       	rjmp	8002e32c <__ieee754_atan2+0x220>
8002e170:	f8 07 14 1e 	asr	r7,r12,0x1e
8002e174:	f1 ea 10 09 	or	r9,r8,r10
8002e178:	e2 17 00 02 	andl	r7,0x2,COH
8002e17c:	ef eb 13 f7 	or	r7,r7,r11>>0x1f
8002e180:	58 09       	cp.w	r9,0
8002e182:	c0 71       	brne	8002e190 <__ieee754_atan2+0x84>
8002e184:	58 27       	cp.w	r7,2
8002e186:	c5 10       	breq	8002e228 <__ieee754_atan2+0x11c>
8002e188:	e0 8a 00 d4 	brle	8002e330 <__ieee754_atan2+0x224>
8002e18c:	58 37       	cp.w	r7,3
8002e18e:	c5 60       	breq	8002e23a <__ieee754_atan2+0x12e>
8002e190:	fd e6 10 06 	or	r6,lr,r6
8002e194:	c6 00       	breq	8002e254 <__ieee754_atan2+0x148>
8002e196:	fc 19 7f f0 	movh	r9,0x7ff0
8002e19a:	12 3e       	cp.w	lr,r9
8002e19c:	c5 81       	brne	8002e24c <__ieee754_atan2+0x140>
8002e19e:	12 38       	cp.w	r8,r9
8002e1a0:	c3 11       	brne	8002e202 <__ieee754_atan2+0xf6>
8002e1a2:	58 17       	cp.w	r7,1
8002e1a4:	c0 b0       	breq	8002e1ba <__ieee754_atan2+0xae>
8002e1a6:	e0 89 00 05 	brgt	8002e1b0 <__ieee754_atan2+0xa4>
8002e1aa:	58 07       	cp.w	r7,0
8002e1ac:	c1 00       	breq	8002e1cc <__ieee754_atan2+0xc0>
8002e1ae:	c5 38       	rjmp	8002e254 <__ieee754_atan2+0x148>
8002e1b0:	58 27       	cp.w	r7,2
8002e1b2:	c1 60       	breq	8002e1de <__ieee754_atan2+0xd2>
8002e1b4:	58 37       	cp.w	r7,3
8002e1b6:	c4 f1       	brne	8002e254 <__ieee754_atan2+0x148>
8002e1b8:	c1 c8       	rjmp	8002e1f0 <__ieee754_atan2+0xe4>
8002e1ba:	e0 64 2d 18 	mov	r4,11544
8002e1be:	ea 14 54 44 	orh	r4,0x5444
8002e1c2:	e0 65 21 fb 	mov	r5,8699
8002e1c6:	ea 15 bf e9 	orh	r5,0xbfe9
8002e1ca:	cb 38       	rjmp	8002e330 <__ieee754_atan2+0x224>
8002e1cc:	e0 64 2d 18 	mov	r4,11544
8002e1d0:	ea 14 54 44 	orh	r4,0x5444
8002e1d4:	e0 65 21 fb 	mov	r5,8699
8002e1d8:	ea 15 3f e9 	orh	r5,0x3fe9
8002e1dc:	ca a8       	rjmp	8002e330 <__ieee754_atan2+0x224>
8002e1de:	e0 64 21 d2 	mov	r4,8658
8002e1e2:	ea 14 7f 33 	orh	r4,0x7f33
8002e1e6:	e0 65 d9 7c 	mov	r5,55676
8002e1ea:	ea 15 40 02 	orh	r5,0x4002
8002e1ee:	ca 18       	rjmp	8002e330 <__ieee754_atan2+0x224>
8002e1f0:	e0 64 21 d2 	mov	r4,8658
8002e1f4:	ea 14 7f 33 	orh	r4,0x7f33
8002e1f8:	e0 65 d9 7c 	mov	r5,55676
8002e1fc:	ea 15 c0 02 	orh	r5,0xc002
8002e200:	c9 88       	rjmp	8002e330 <__ieee754_atan2+0x224>
8002e202:	58 17       	cp.w	r7,1
8002e204:	c0 b0       	breq	8002e21a <__ieee754_atan2+0x10e>
8002e206:	e0 89 00 05 	brgt	8002e210 <__ieee754_atan2+0x104>
8002e20a:	58 07       	cp.w	r7,0
8002e20c:	c0 b0       	breq	8002e222 <__ieee754_atan2+0x116>
8002e20e:	c1 f8       	rjmp	8002e24c <__ieee754_atan2+0x140>
8002e210:	58 27       	cp.w	r7,2
8002e212:	c0 b0       	breq	8002e228 <__ieee754_atan2+0x11c>
8002e214:	58 37       	cp.w	r7,3
8002e216:	c1 b1       	brne	8002e24c <__ieee754_atan2+0x140>
8002e218:	c1 18       	rjmp	8002e23a <__ieee754_atan2+0x12e>
8002e21a:	30 04       	mov	r4,0
8002e21c:	fc 15 80 00 	movh	r5,0x8000
8002e220:	c8 88       	rjmp	8002e330 <__ieee754_atan2+0x224>
8002e222:	30 04       	mov	r4,0
8002e224:	30 05       	mov	r5,0
8002e226:	c8 58       	rjmp	8002e330 <__ieee754_atan2+0x224>
8002e228:	e0 64 2d 18 	mov	r4,11544
8002e22c:	ea 14 54 44 	orh	r4,0x5444
8002e230:	e0 65 21 fb 	mov	r5,8699
8002e234:	ea 15 40 09 	orh	r5,0x4009
8002e238:	c7 c8       	rjmp	8002e330 <__ieee754_atan2+0x224>
8002e23a:	e0 64 2d 18 	mov	r4,11544
8002e23e:	ea 14 54 44 	orh	r4,0x5444
8002e242:	e0 65 21 fb 	mov	r5,8699
8002e246:	ea 15 c0 09 	orh	r5,0xc009
8002e24a:	c7 38       	rjmp	8002e330 <__ieee754_atan2+0x224>
8002e24c:	fc 10 7f f0 	movh	r0,0x7ff0
8002e250:	00 38       	cp.w	r8,r0
8002e252:	c1 51       	brne	8002e27c <__ieee754_atan2+0x170>
8002e254:	58 01       	cp.w	r1,0
8002e256:	c0 a5       	brlt	8002e26a <__ieee754_atan2+0x15e>
8002e258:	e0 64 2d 18 	mov	r4,11544
8002e25c:	ea 14 54 44 	orh	r4,0x5444
8002e260:	e0 65 21 fb 	mov	r5,8699
8002e264:	ea 15 3f f9 	orh	r5,0x3ff9
8002e268:	c6 48       	rjmp	8002e330 <__ieee754_atan2+0x224>
8002e26a:	e0 64 2d 18 	mov	r4,11544
8002e26e:	ea 14 54 44 	orh	r4,0x5444
8002e272:	e0 65 21 fb 	mov	r5,8699
8002e276:	ea 15 bf f9 	orh	r5,0xbff9
8002e27a:	c5 b8       	rjmp	8002e330 <__ieee754_atan2+0x224>
8002e27c:	1c 18       	sub	r8,lr
8002e27e:	b5 48       	asr	r8,0x14
8002e280:	e0 48 00 3c 	cp.w	r8,60
8002e284:	e0 8a 00 0b 	brle	8002e29a <__ieee754_atan2+0x18e>
8002e288:	e0 6a 2d 18 	mov	r10,11544
8002e28c:	ea 1a 54 44 	orh	r10,0x5444
8002e290:	e0 6b 21 fb 	mov	r11,8699
8002e294:	ea 1b 3f f9 	orh	r11,0x3ff9
8002e298:	c1 48       	rjmp	8002e2c0 <__ieee754_atan2+0x1b4>
8002e29a:	fe 58 ff c4 	cp.w	r8,-60
8002e29e:	5f 58       	srlt	r8
8002e2a0:	f1 ec 03 fc 	and	r12,r8,r12>>0x1f
8002e2a4:	c0 40       	breq	8002e2ac <__ieee754_atan2+0x1a0>
8002e2a6:	30 0a       	mov	r10,0
8002e2a8:	30 0b       	mov	r11,0
8002e2aa:	c0 b8       	rjmp	8002e2c0 <__ieee754_atan2+0x1b4>
8002e2ac:	04 98       	mov	r8,r2
8002e2ae:	06 99       	mov	r9,r3
8002e2b0:	08 9a       	mov	r10,r4
8002e2b2:	0a 9b       	mov	r11,r5
8002e2b4:	e0 a0 14 60 	rcall	80030b74 <__avr32_f64_div>
8002e2b8:	e0 a0 0f 62 	rcall	8003017c <fabs>
8002e2bc:	e0 a0 0d bc 	rcall	8002fe34 <atan>
8002e2c0:	58 17       	cp.w	r7,1
8002e2c2:	c0 60       	breq	8002e2ce <__ieee754_atan2+0x1c2>
8002e2c4:	58 27       	cp.w	r7,2
8002e2c6:	c0 a0       	breq	8002e2da <__ieee754_atan2+0x1ce>
8002e2c8:	58 07       	cp.w	r7,0
8002e2ca:	c1 d1       	brne	8002e304 <__ieee754_atan2+0x1f8>
8002e2cc:	c3 08       	rjmp	8002e32c <__ieee754_atan2+0x220>
8002e2ce:	fc 18 80 00 	movh	r8,0x8000
8002e2d2:	14 94       	mov	r4,r10
8002e2d4:	f6 08 00 05 	add	r5,r11,r8
8002e2d8:	c2 c8       	rjmp	8002e330 <__ieee754_atan2+0x224>
8002e2da:	e0 68 5c 07 	mov	r8,23559
8002e2de:	ea 18 33 14 	orh	r8,0x3314
8002e2e2:	e0 69 a6 26 	mov	r9,42534
8002e2e6:	ea 19 3c a1 	orh	r9,0x3ca1
8002e2ea:	e0 a0 11 eb 	rcall	800306c0 <__avr32_f64_sub>
8002e2ee:	14 98       	mov	r8,r10
8002e2f0:	16 99       	mov	r9,r11
8002e2f2:	e0 6a 2d 18 	mov	r10,11544
8002e2f6:	ea 1a 54 44 	orh	r10,0x5444
8002e2fa:	e0 6b 21 fb 	mov	r11,8699
8002e2fe:	ea 1b 40 09 	orh	r11,0x4009
8002e302:	c1 38       	rjmp	8002e328 <__ieee754_atan2+0x21c>
8002e304:	e0 68 5c 07 	mov	r8,23559
8002e308:	ea 18 33 14 	orh	r8,0x3314
8002e30c:	e0 69 a6 26 	mov	r9,42534
8002e310:	ea 19 3c a1 	orh	r9,0x3ca1
8002e314:	e0 a0 11 d6 	rcall	800306c0 <__avr32_f64_sub>
8002e318:	e0 68 2d 18 	mov	r8,11544
8002e31c:	ea 18 54 44 	orh	r8,0x5444
8002e320:	e0 69 21 fb 	mov	r9,8699
8002e324:	ea 19 40 09 	orh	r9,0x4009
8002e328:	e0 a0 11 cc 	rcall	800306c0 <__avr32_f64_sub>
8002e32c:	14 94       	mov	r4,r10
8002e32e:	16 95       	mov	r5,r11
8002e330:	08 9a       	mov	r10,r4
8002e332:	0a 9b       	mov	r11,r5
8002e334:	2f ed       	sub	sp,-8
8002e336:	d8 32       	popm	r0-r7,pc

8002e338 <__ieee754_pow>:
8002e338:	d4 31       	pushm	r0-r7,lr
8002e33a:	20 ed       	sub	sp,56
8002e33c:	10 94       	mov	r4,r8
8002e33e:	12 95       	mov	r5,r9
8002e340:	50 7b       	stdsp	sp[0x1c],r11
8002e342:	fa e5 00 0c 	st.d	sp[12],r4
8002e346:	12 97       	mov	r7,r9
8002e348:	10 96       	mov	r6,r8
8002e34a:	40 31       	lddsp	r1,sp[0xc]
8002e34c:	40 49       	lddsp	r9,sp[0x10]
8002e34e:	e5 d1 c0 1f 	bfextu	r2,r1,0x0,0x1f
8002e352:	16 90       	mov	r0,r11
8002e354:	14 93       	mov	r3,r10
8002e356:	14 98       	mov	r8,r10
8002e358:	e5 e9 10 0c 	or	r12,r2,r9
8002e35c:	e0 80 05 33 	breq	8002edc2 <__ieee754_pow+0xa8a>
8002e360:	50 1b       	stdsp	sp[0x4],r11
8002e362:	16 9e       	mov	lr,r11
8002e364:	e9 db c0 1f 	bfextu	r4,r11,0x0,0x1f
8002e368:	fc 1c 7f f0 	movh	r12,0x7ff0
8002e36c:	18 34       	cp.w	r4,r12
8002e36e:	e0 89 00 1a 	brgt	8002e3a2 <__ieee754_pow+0x6a>
8002e372:	5f 05       	sreq	r5
8002e374:	50 55       	stdsp	sp[0x14],r5
8002e376:	30 0c       	mov	r12,0
8002e378:	58 0a       	cp.w	r10,0
8002e37a:	5f 15       	srne	r5
8002e37c:	40 5e       	lddsp	lr,sp[0x14]
8002e37e:	fd e5 00 05 	and	r5,lr,r5
8002e382:	f8 05 18 00 	cp.b	r5,r12
8002e386:	c0 e1       	brne	8002e3a2 <__ieee754_pow+0x6a>
8002e388:	fc 1c 7f f0 	movh	r12,0x7ff0
8002e38c:	18 32       	cp.w	r2,r12
8002e38e:	e0 89 00 0a 	brgt	8002e3a2 <__ieee754_pow+0x6a>
8002e392:	5f 0c       	sreq	r12
8002e394:	58 09       	cp.w	r9,0
8002e396:	5f 1e       	srne	lr
8002e398:	f9 ee 00 0e 	and	lr,r12,lr
8002e39c:	ea 0e 18 00 	cp.b	lr,r5
8002e3a0:	c0 d0       	breq	8002e3ba <__ieee754_pow+0x82>
8002e3a2:	fc 19 c0 10 	movh	r9,0xc010
8002e3a6:	12 04       	add	r4,r9
8002e3a8:	e9 e8 10 08 	or	r8,r4,r8
8002e3ac:	e0 80 05 0b 	breq	8002edc2 <__ieee754_pow+0xa8a>
8002e3b0:	4d 6c       	lddpc	r12,8002e508 <__ieee754_pow+0x1d0>
8002e3b2:	e0 a0 0f 90 	rcall	800302d2 <nan>
8002e3b6:	e0 8f 05 03 	bral	8002edbc <__ieee754_pow+0xa84>
8002e3ba:	58 0b       	cp.w	r11,0
8002e3bc:	c3 64       	brge	8002e428 <__ieee754_pow+0xf0>
8002e3be:	e0 6b ff ff 	mov	r11,65535
8002e3c2:	ea 1b 43 3f 	orh	r11,0x433f
8002e3c6:	16 32       	cp.w	r2,r11
8002e3c8:	e0 8a 00 04 	brle	8002e3d0 <__ieee754_pow+0x98>
8002e3cc:	30 25       	mov	r5,2
8002e3ce:	c2 e8       	rjmp	8002e42a <__ieee754_pow+0xf2>
8002e3d0:	e0 6a ff ff 	mov	r10,65535
8002e3d4:	ea 1a 3f ef 	orh	r10,0x3fef
8002e3d8:	14 32       	cp.w	r2,r10
8002e3da:	e0 8a 00 27 	brle	8002e428 <__ieee754_pow+0xf0>
8002e3de:	e4 0a 14 14 	asr	r10,r2,0x14
8002e3e2:	f4 ca 03 ff 	sub	r10,r10,1023
8002e3e6:	59 4a       	cp.w	r10,20
8002e3e8:	e0 8a 00 0f 	brle	8002e406 <__ieee754_pow+0xce>
8002e3ec:	f4 0a 11 34 	rsub	r10,r10,52
8002e3f0:	f2 0a 0a 45 	lsr	r5,r9,r10
8002e3f4:	ea 0a 09 4a 	lsl	r10,r5,r10
8002e3f8:	12 3a       	cp.w	r10,r9
8002e3fa:	c1 71       	brne	8002e428 <__ieee754_pow+0xf0>
8002e3fc:	eb d5 c0 01 	bfextu	r5,r5,0x0,0x1
8002e400:	ea 05 11 02 	rsub	r5,r5,2
8002e404:	c1 38       	rjmp	8002e42a <__ieee754_pow+0xf2>
8002e406:	40 49       	lddsp	r9,sp[0x10]
8002e408:	58 09       	cp.w	r9,0
8002e40a:	c5 01       	brne	8002e4aa <__ieee754_pow+0x172>
8002e40c:	f4 0a 11 14 	rsub	r10,r10,20
8002e410:	e4 0a 08 45 	asr	r5,r2,r10
8002e414:	ea 0a 09 4a 	lsl	r10,r5,r10
8002e418:	04 3a       	cp.w	r10,r2
8002e41a:	e0 81 04 de 	brne	8002edd6 <__ieee754_pow+0xa9e>
8002e41e:	eb d5 c0 01 	bfextu	r5,r5,0x0,0x1
8002e422:	ea 05 11 02 	rsub	r5,r5,2
8002e426:	c0 48       	rjmp	8002e42e <__ieee754_pow+0xf6>
8002e428:	30 05       	mov	r5,0
8002e42a:	58 09       	cp.w	r9,0
8002e42c:	c4 01       	brne	8002e4ac <__ieee754_pow+0x174>
8002e42e:	58 0c       	cp.w	r12,0
8002e430:	c1 90       	breq	8002e462 <__ieee754_pow+0x12a>
8002e432:	fc 19 c0 10 	movh	r9,0xc010
8002e436:	e8 09 00 09 	add	r9,r4,r9
8002e43a:	f3 e8 10 08 	or	r8,r9,r8
8002e43e:	e0 80 04 c2 	breq	8002edc2 <__ieee754_pow+0xa8a>
8002e442:	e0 68 ff ff 	mov	r8,65535
8002e446:	ea 18 3f ef 	orh	r8,0x3fef
8002e44a:	10 34       	cp.w	r4,r8
8002e44c:	e0 8a 00 07 	brle	8002e45a <__ieee754_pow+0x122>
8002e450:	58 01       	cp.w	r1,0
8002e452:	e0 84 04 be 	brge	8002edce <__ieee754_pow+0xa96>
8002e456:	e0 8f 04 ba 	bral	8002edca <__ieee754_pow+0xa92>
8002e45a:	58 01       	cp.w	r1,0
8002e45c:	e0 84 04 b7 	brge	8002edca <__ieee754_pow+0xa92>
8002e460:	c5 98       	rjmp	8002e512 <__ieee754_pow+0x1da>
8002e462:	fc 1e 3f f0 	movh	lr,0x3ff0
8002e466:	1c 32       	cp.w	r2,lr
8002e468:	c0 d1       	brne	8002e482 <__ieee754_pow+0x14a>
8002e46a:	58 01       	cp.w	r1,0
8002e46c:	c0 55       	brlt	8002e476 <__ieee754_pow+0x13e>
8002e46e:	00 97       	mov	r7,r0
8002e470:	06 96       	mov	r6,r3
8002e472:	e0 8f 04 ae 	bral	8002edce <__ieee754_pow+0xa96>
8002e476:	00 99       	mov	r9,r0
8002e478:	06 98       	mov	r8,r3
8002e47a:	30 0a       	mov	r10,0
8002e47c:	fc 1b 3f f0 	movh	r11,0x3ff0
8002e480:	c5 c8       	rjmp	8002e538 <__ieee754_pow+0x200>
8002e482:	fc 1c 40 00 	movh	r12,0x4000
8002e486:	18 31       	cp.w	r1,r12
8002e488:	c0 41       	brne	8002e490 <__ieee754_pow+0x158>
8002e48a:	00 99       	mov	r9,r0
8002e48c:	06 98       	mov	r8,r3
8002e48e:	c8 68       	rjmp	8002e59a <__ieee754_pow+0x262>
8002e490:	fc 1b 3f e0 	movh	r11,0x3fe0
8002e494:	16 31       	cp.w	r1,r11
8002e496:	c0 b1       	brne	8002e4ac <__ieee754_pow+0x174>
8002e498:	40 1a       	lddsp	r10,sp[0x4]
8002e49a:	58 0a       	cp.w	r10,0
8002e49c:	c0 85       	brlt	8002e4ac <__ieee754_pow+0x174>
8002e49e:	00 9b       	mov	r11,r0
8002e4a0:	06 9a       	mov	r10,r3
8002e4a2:	e0 a0 06 d5 	rcall	8002f24c <__ieee754_sqrt>
8002e4a6:	e0 8f 04 8b 	bral	8002edbc <__ieee754_pow+0xa84>
8002e4aa:	30 05       	mov	r5,0
8002e4ac:	50 08       	stdsp	sp[0x0],r8
8002e4ae:	00 9b       	mov	r11,r0
8002e4b0:	06 9a       	mov	r10,r3
8002e4b2:	e0 a0 0e 65 	rcall	8003017c <fabs>
8002e4b6:	40 08       	lddsp	r8,sp[0x0]
8002e4b8:	58 08       	cp.w	r8,0
8002e4ba:	c3 01       	brne	8002e51a <__ieee754_pow+0x1e2>
8002e4bc:	58 04       	cp.w	r4,0
8002e4be:	5f 09       	sreq	r9
8002e4c0:	40 5e       	lddsp	lr,sp[0x14]
8002e4c2:	fd e9 10 09 	or	r9,lr,r9
8002e4c6:	f0 09 18 00 	cp.b	r9,r8
8002e4ca:	c0 51       	brne	8002e4d4 <__ieee754_pow+0x19c>
8002e4cc:	fc 1c 3f f0 	movh	r12,0x3ff0
8002e4d0:	18 34       	cp.w	r4,r12
8002e4d2:	c2 41       	brne	8002e51a <__ieee754_pow+0x1e2>
8002e4d4:	58 01       	cp.w	r1,0
8002e4d6:	c0 84       	brge	8002e4e6 <__ieee754_pow+0x1ae>
8002e4d8:	16 99       	mov	r9,r11
8002e4da:	14 98       	mov	r8,r10
8002e4dc:	fc 1b 3f f0 	movh	r11,0x3ff0
8002e4e0:	30 0a       	mov	r10,0
8002e4e2:	e0 a0 13 49 	rcall	80030b74 <__avr32_f64_div>
8002e4e6:	16 97       	mov	r7,r11
8002e4e8:	14 96       	mov	r6,r10
8002e4ea:	40 1b       	lddsp	r11,sp[0x4]
8002e4ec:	58 0b       	cp.w	r11,0
8002e4ee:	e0 84 04 70 	brge	8002edce <__ieee754_pow+0xa96>
8002e4f2:	fc 18 c0 10 	movh	r8,0xc010
8002e4f6:	10 04       	add	r4,r8
8002e4f8:	eb e4 10 04 	or	r4,r5,r4
8002e4fc:	c0 81       	brne	8002e50c <__ieee754_pow+0x1d4>
8002e4fe:	0e 9b       	mov	r11,r7
8002e500:	0e 99       	mov	r9,r7
8002e502:	0c 98       	mov	r8,r6
8002e504:	c1 68       	rjmp	8002e530 <__ieee754_pow+0x1f8>
8002e506:	d7 03       	nop
8002e508:	80 03       	ld.sh	r3,r0[0x0]
8002e50a:	1b 78       	ld.ub	r8,--sp
8002e50c:	58 15       	cp.w	r5,1
8002e50e:	e0 81 04 60 	brne	8002edce <__ieee754_pow+0xa96>
8002e512:	ee 17 80 00 	eorh	r7,0x8000
8002e516:	e0 8f 04 5c 	bral	8002edce <__ieee754_pow+0xa96>
8002e51a:	40 78       	lddsp	r8,sp[0x1c]
8002e51c:	bf 98       	lsr	r8,0x1f
8002e51e:	20 18       	sub	r8,1
8002e520:	50 d8       	stdsp	sp[0x34],r8
8002e522:	eb e8 10 08 	or	r8,r5,r8
8002e526:	c0 d1       	brne	8002e540 <__ieee754_pow+0x208>
8002e528:	00 99       	mov	r9,r0
8002e52a:	06 98       	mov	r8,r3
8002e52c:	06 9a       	mov	r10,r3
8002e52e:	00 9b       	mov	r11,r0
8002e530:	e0 a0 10 c8 	rcall	800306c0 <__avr32_f64_sub>
8002e534:	14 98       	mov	r8,r10
8002e536:	16 99       	mov	r9,r11
8002e538:	e0 a0 13 1e 	rcall	80030b74 <__avr32_f64_div>
8002e53c:	e0 8f 04 40 	bral	8002edbc <__ieee754_pow+0xa84>
8002e540:	fc 19 41 e0 	movh	r9,0x41e0
8002e544:	12 32       	cp.w	r2,r9
8002e546:	e0 8a 00 9f 	brle	8002e684 <__ieee754_pow+0x34c>
8002e54a:	fc 18 43 f0 	movh	r8,0x43f0
8002e54e:	10 32       	cp.w	r2,r8
8002e550:	e0 8a 00 0a 	brle	8002e564 <__ieee754_pow+0x22c>
8002e554:	e0 65 ff ff 	mov	r5,65535
8002e558:	ea 15 3f ef 	orh	r5,0x3fef
8002e55c:	0a 34       	cp.w	r4,r5
8002e55e:	e0 89 00 13 	brgt	8002e584 <__ieee754_pow+0x24c>
8002e562:	c0 88       	rjmp	8002e572 <__ieee754_pow+0x23a>
8002e564:	e0 60 ff fe 	mov	r0,65534
8002e568:	ea 10 3f ef 	orh	r0,0x3fef
8002e56c:	00 34       	cp.w	r4,r0
8002e56e:	e0 89 00 06 	brgt	8002e57a <__ieee754_pow+0x242>
8002e572:	58 01       	cp.w	r1,0
8002e574:	e0 84 04 2b 	brge	8002edca <__ieee754_pow+0xa92>
8002e578:	c0 98       	rjmp	8002e58a <__ieee754_pow+0x252>
8002e57a:	fc 1e 3f f0 	movh	lr,0x3ff0
8002e57e:	1c 34       	cp.w	r4,lr
8002e580:	e0 8a 00 11 	brle	8002e5a2 <__ieee754_pow+0x26a>
8002e584:	58 01       	cp.w	r1,0
8002e586:	e0 8a 04 22 	brle	8002edca <__ieee754_pow+0xa92>
8002e58a:	e0 68 75 9c 	mov	r8,30108
8002e58e:	ea 18 88 00 	orh	r8,0x8800
8002e592:	e0 69 e4 3c 	mov	r9,58428
8002e596:	ea 19 7e 37 	orh	r9,0x7e37
8002e59a:	10 9a       	mov	r10,r8
8002e59c:	12 9b       	mov	r11,r9
8002e59e:	e0 8f 04 0d 	bral	8002edb8 <__ieee754_pow+0xa80>
8002e5a2:	30 08       	mov	r8,0
8002e5a4:	fc 19 3f f0 	movh	r9,0x3ff0
8002e5a8:	e0 a0 10 8c 	rcall	800306c0 <__avr32_f64_sub>
8002e5ac:	fc 18 60 00 	movh	r8,0x6000
8002e5b0:	14 92       	mov	r2,r10
8002e5b2:	16 93       	mov	r3,r11
8002e5b4:	e0 69 15 47 	mov	r9,5447
8002e5b8:	ea 19 3f f7 	orh	r9,0x3ff7
8002e5bc:	e0 a0 0f 96 	rcall	800304e8 <__avr32_f64_mul>
8002e5c0:	e0 68 df 44 	mov	r8,57156
8002e5c4:	ea 18 f8 5d 	orh	r8,0xf85d
8002e5c8:	fa eb 00 0c 	st.d	sp[12],r10
8002e5cc:	e0 69 ae 0b 	mov	r9,44555
8002e5d0:	ea 19 3e 54 	orh	r9,0x3e54
8002e5d4:	04 9a       	mov	r10,r2
8002e5d6:	06 9b       	mov	r11,r3
8002e5d8:	e0 a0 0f 88 	rcall	800304e8 <__avr32_f64_mul>
8002e5dc:	04 98       	mov	r8,r2
8002e5de:	fa eb 00 04 	st.d	sp[4],r10
8002e5e2:	06 99       	mov	r9,r3
8002e5e4:	04 9a       	mov	r10,r2
8002e5e6:	06 9b       	mov	r11,r3
8002e5e8:	e0 a0 0f 80 	rcall	800304e8 <__avr32_f64_mul>
8002e5ec:	30 08       	mov	r8,0
8002e5ee:	14 90       	mov	r0,r10
8002e5f0:	16 91       	mov	r1,r11
8002e5f2:	fc 19 bf d0 	movh	r9,0xbfd0
8002e5f6:	04 9a       	mov	r10,r2
8002e5f8:	06 9b       	mov	r11,r3
8002e5fa:	e0 a0 0f 77 	rcall	800304e8 <__avr32_f64_mul>
8002e5fe:	e0 68 55 55 	mov	r8,21845
8002e602:	ea 18 55 55 	orh	r8,0x5555
8002e606:	e0 69 55 55 	mov	r9,21845
8002e60a:	ea 19 3f d5 	orh	r9,0x3fd5
8002e60e:	e0 a0 11 27 	rcall	8003085c <__avr32_f64_add>
8002e612:	14 98       	mov	r8,r10
8002e614:	16 99       	mov	r9,r11
8002e616:	04 9a       	mov	r10,r2
8002e618:	06 9b       	mov	r11,r3
8002e61a:	e0 a0 0f 67 	rcall	800304e8 <__avr32_f64_mul>
8002e61e:	14 98       	mov	r8,r10
8002e620:	16 99       	mov	r9,r11
8002e622:	30 0a       	mov	r10,0
8002e624:	fc 1b 3f e0 	movh	r11,0x3fe0
8002e628:	e0 a0 10 4c 	rcall	800306c0 <__avr32_f64_sub>
8002e62c:	14 98       	mov	r8,r10
8002e62e:	16 99       	mov	r9,r11
8002e630:	00 9a       	mov	r10,r0
8002e632:	02 9b       	mov	r11,r1
8002e634:	e0 a0 0f 5a 	rcall	800304e8 <__avr32_f64_mul>
8002e638:	e0 68 82 fe 	mov	r8,33534
8002e63c:	ea 18 65 2b 	orh	r8,0x652b
8002e640:	e0 69 15 47 	mov	r9,5447
8002e644:	ea 19 bf f7 	orh	r9,0xbff7
8002e648:	e0 a0 0f 50 	rcall	800304e8 <__avr32_f64_mul>
8002e64c:	14 98       	mov	r8,r10
8002e64e:	16 99       	mov	r9,r11
8002e650:	fa ea 00 04 	ld.d	r10,sp[4]
8002e654:	e0 a0 11 04 	rcall	8003085c <__avr32_f64_add>
8002e658:	16 91       	mov	r1,r11
8002e65a:	14 98       	mov	r8,r10
8002e65c:	14 90       	mov	r0,r10
8002e65e:	02 99       	mov	r9,r1
8002e660:	fa ea 00 0c 	ld.d	r10,sp[12]
8002e664:	e0 a0 10 fc 	rcall	8003085c <__avr32_f64_add>
8002e668:	fa e8 00 0c 	ld.d	r8,sp[12]
8002e66c:	16 93       	mov	r3,r11
8002e66e:	30 02       	mov	r2,0
8002e670:	06 9b       	mov	r11,r3
8002e672:	04 9a       	mov	r10,r2
8002e674:	e0 a0 10 26 	rcall	800306c0 <__avr32_f64_sub>
8002e678:	14 98       	mov	r8,r10
8002e67a:	16 99       	mov	r9,r11
8002e67c:	00 9a       	mov	r10,r0
8002e67e:	02 9b       	mov	r11,r1
8002e680:	e0 8f 01 c6 	bral	8002ea0c <__ieee754_pow+0x6d4>
8002e684:	ee 54 ff ff 	cp.w	r4,1048575
8002e688:	e0 8a 00 04 	brle	8002e690 <__ieee754_pow+0x358>
8002e68c:	30 0c       	mov	r12,0
8002e68e:	c0 98       	rjmp	8002e6a0 <__ieee754_pow+0x368>
8002e690:	fc 19 43 40 	movh	r9,0x4340
8002e694:	30 08       	mov	r8,0
8002e696:	e0 a0 0f 29 	rcall	800304e8 <__avr32_f64_mul>
8002e69a:	3c bc       	mov	r12,-53
8002e69c:	16 99       	mov	r9,r11
8002e69e:	12 94       	mov	r4,r9
8002e6a0:	f1 d4 c0 14 	bfextu	r8,r4,0x0,0x14
8002e6a4:	f8 cc 03 ff 	sub	r12,r12,1023
8002e6a8:	b5 44       	asr	r4,0x14
8002e6aa:	10 93       	mov	r3,r8
8002e6ac:	08 0c       	add	r12,r4
8002e6ae:	ea 13 3f f0 	orh	r3,0x3ff0
8002e6b2:	e2 58 98 8e 	cp.w	r8,235662
8002e6b6:	e0 8a 00 0c 	brle	8002e6ce <__ieee754_pow+0x396>
8002e6ba:	ea 58 b6 79 	cp.w	r8,767609
8002e6be:	e0 89 00 04 	brgt	8002e6c6 <__ieee754_pow+0x38e>
8002e6c2:	30 14       	mov	r4,1
8002e6c4:	c0 68       	rjmp	8002e6d0 <__ieee754_pow+0x398>
8002e6c6:	f0 68 00 00 	mov	r8,-1048576
8002e6ca:	2f fc       	sub	r12,-1
8002e6cc:	10 03       	add	r3,r8
8002e6ce:	30 04       	mov	r4,0
8002e6d0:	14 98       	mov	r8,r10
8002e6d2:	06 99       	mov	r9,r3
8002e6d4:	4d ea       	lddpc	r10,8002e84c <__ieee754_pow+0x514>
8002e6d6:	50 0c       	stdsp	sp[0x0],r12
8002e6d8:	f4 04 02 30 	ld.d	r0,r10[r4<<0x3]
8002e6dc:	fa e9 00 14 	st.d	sp[20],r8
8002e6e0:	fa e1 00 1c 	st.d	sp[28],r0
8002e6e4:	00 98       	mov	r8,r0
8002e6e6:	02 99       	mov	r9,r1
8002e6e8:	fa ea 00 14 	ld.d	r10,sp[20]
8002e6ec:	e0 a0 0f ea 	rcall	800306c0 <__avr32_f64_sub>
8002e6f0:	fa e8 00 1c 	ld.d	r8,sp[28]
8002e6f4:	fa eb 00 24 	st.d	sp[36],r10
8002e6f8:	fa ea 00 14 	ld.d	r10,sp[20]
8002e6fc:	e0 a0 10 b0 	rcall	8003085c <__avr32_f64_add>
8002e700:	14 98       	mov	r8,r10
8002e702:	16 99       	mov	r9,r11
8002e704:	30 0a       	mov	r10,0
8002e706:	fc 1b 3f f0 	movh	r11,0x3ff0
8002e70a:	e0 a0 12 35 	rcall	80030b74 <__avr32_f64_div>
8002e70e:	14 98       	mov	r8,r10
8002e710:	16 99       	mov	r9,r11
8002e712:	fa eb 00 2c 	st.d	sp[44],r10
8002e716:	fa ea 00 24 	ld.d	r10,sp[36]
8002e71a:	e0 a0 0e e7 	rcall	800304e8 <__avr32_f64_mul>
8002e71e:	30 09       	mov	r9,0
8002e720:	fa eb 00 0c 	st.d	sp[12],r10
8002e724:	fa eb 00 04 	st.d	sp[4],r10
8002e728:	a1 53       	asr	r3,0x1
8002e72a:	30 0a       	mov	r10,0
8002e72c:	bd b3       	sbr	r3,0x1d
8002e72e:	e8 08 15 12 	lsl	r8,r4,0x12
8002e732:	f8 28 00 00 	sub	r8,-524288
8002e736:	f0 03 00 0b 	add	r11,r8,r3
8002e73a:	50 49       	stdsp	sp[0x10],r9
8002e73c:	14 92       	mov	r2,r10
8002e73e:	fa e0 00 0c 	ld.d	r0,sp[12]
8002e742:	16 93       	mov	r3,r11
8002e744:	14 98       	mov	r8,r10
8002e746:	16 99       	mov	r9,r11
8002e748:	00 9a       	mov	r10,r0
8002e74a:	02 9b       	mov	r11,r1
8002e74c:	e0 a0 0e ce 	rcall	800304e8 <__avr32_f64_mul>
8002e750:	14 98       	mov	r8,r10
8002e752:	16 99       	mov	r9,r11
8002e754:	fa ea 00 24 	ld.d	r10,sp[36]
8002e758:	e0 a0 0f b4 	rcall	800306c0 <__avr32_f64_sub>
8002e75c:	fa e8 00 1c 	ld.d	r8,sp[28]
8002e760:	fa eb 00 24 	st.d	sp[36],r10
8002e764:	04 9a       	mov	r10,r2
8002e766:	06 9b       	mov	r11,r3
8002e768:	e0 a0 0f ac 	rcall	800306c0 <__avr32_f64_sub>
8002e76c:	14 98       	mov	r8,r10
8002e76e:	16 99       	mov	r9,r11
8002e770:	fa ea 00 14 	ld.d	r10,sp[20]
8002e774:	e0 a0 0f a6 	rcall	800306c0 <__avr32_f64_sub>
8002e778:	14 98       	mov	r8,r10
8002e77a:	16 99       	mov	r9,r11
8002e77c:	00 9a       	mov	r10,r0
8002e77e:	02 9b       	mov	r11,r1
8002e780:	e0 a0 0e b4 	rcall	800304e8 <__avr32_f64_mul>
8002e784:	14 98       	mov	r8,r10
8002e786:	16 99       	mov	r9,r11
8002e788:	fa ea 00 24 	ld.d	r10,sp[36]
8002e78c:	e0 a0 0f 9a 	rcall	800306c0 <__avr32_f64_sub>
8002e790:	14 98       	mov	r8,r10
8002e792:	16 99       	mov	r9,r11
8002e794:	fa ea 00 2c 	ld.d	r10,sp[44]
8002e798:	e0 a0 0e a8 	rcall	800304e8 <__avr32_f64_mul>
8002e79c:	fa e8 00 04 	ld.d	r8,sp[4]
8002e7a0:	fa eb 00 14 	st.d	sp[20],r10
8002e7a4:	10 9a       	mov	r10,r8
8002e7a6:	12 9b       	mov	r11,r9
8002e7a8:	e0 a0 0e a0 	rcall	800304e8 <__avr32_f64_mul>
8002e7ac:	16 93       	mov	r3,r11
8002e7ae:	14 92       	mov	r2,r10
8002e7b0:	06 99       	mov	r9,r3
8002e7b2:	14 98       	mov	r8,r10
8002e7b4:	e0 a0 0e 9a 	rcall	800304e8 <__avr32_f64_mul>
8002e7b8:	e0 68 4e ef 	mov	r8,20207
8002e7bc:	ea 18 4a 45 	orh	r8,0x4a45
8002e7c0:	fa eb 00 1c 	st.d	sp[28],r10
8002e7c4:	e0 69 7e 28 	mov	r9,32296
8002e7c8:	ea 19 3f ca 	orh	r9,0x3fca
8002e7cc:	04 9a       	mov	r10,r2
8002e7ce:	06 9b       	mov	r11,r3
8002e7d0:	e0 a0 0e 8c 	rcall	800304e8 <__avr32_f64_mul>
8002e7d4:	e0 68 db 65 	mov	r8,56165
8002e7d8:	ea 18 93 c9 	orh	r8,0x93c9
8002e7dc:	e0 69 86 4a 	mov	r9,34378
8002e7e0:	ea 19 3f cd 	orh	r9,0x3fcd
8002e7e4:	e0 a0 10 3c 	rcall	8003085c <__avr32_f64_add>
8002e7e8:	14 98       	mov	r8,r10
8002e7ea:	16 99       	mov	r9,r11
8002e7ec:	04 9a       	mov	r10,r2
8002e7ee:	06 9b       	mov	r11,r3
8002e7f0:	e0 a0 0e 7c 	rcall	800304e8 <__avr32_f64_mul>
8002e7f4:	e0 68 41 01 	mov	r8,16641
8002e7f8:	ea 18 a9 1d 	orh	r8,0xa91d
8002e7fc:	e0 69 74 60 	mov	r9,29792
8002e800:	ea 19 3f d1 	orh	r9,0x3fd1
8002e804:	e0 a0 10 2c 	rcall	8003085c <__avr32_f64_add>
8002e808:	14 98       	mov	r8,r10
8002e80a:	16 99       	mov	r9,r11
8002e80c:	04 9a       	mov	r10,r2
8002e80e:	06 9b       	mov	r11,r3
8002e810:	e0 a0 0e 6c 	rcall	800304e8 <__avr32_f64_mul>
8002e814:	e0 68 26 4d 	mov	r8,9805
8002e818:	ea 18 51 8f 	orh	r8,0x518f
8002e81c:	e0 69 55 55 	mov	r9,21845
8002e820:	ea 19 3f d5 	orh	r9,0x3fd5
8002e824:	e0 a0 10 1c 	rcall	8003085c <__avr32_f64_add>
8002e828:	14 98       	mov	r8,r10
8002e82a:	16 99       	mov	r9,r11
8002e82c:	04 9a       	mov	r10,r2
8002e82e:	06 9b       	mov	r11,r3
8002e830:	e0 a0 0e 5c 	rcall	800304e8 <__avr32_f64_mul>
8002e834:	e0 68 ab ff 	mov	r8,44031
8002e838:	ea 18 db 6f 	orh	r8,0xdb6f
8002e83c:	e0 69 6d b6 	mov	r9,28086
8002e840:	ea 19 3f db 	orh	r9,0x3fdb
8002e844:	e0 a0 10 0c 	rcall	8003085c <__avr32_f64_add>
8002e848:	c0 48       	rjmp	8002e850 <__ieee754_pow+0x518>
8002e84a:	d7 03       	nop
8002e84c:	80 03       	ld.sh	r3,r0[0x0]
8002e84e:	1b a8       	ld.ub	r8,sp[0x2]
8002e850:	14 98       	mov	r8,r10
8002e852:	16 99       	mov	r9,r11
8002e854:	04 9a       	mov	r10,r2
8002e856:	06 9b       	mov	r11,r3
8002e858:	e0 a0 0e 48 	rcall	800304e8 <__avr32_f64_mul>
8002e85c:	e0 68 33 03 	mov	r8,13059
8002e860:	ea 18 33 33 	orh	r8,0x3333
8002e864:	e0 69 33 33 	mov	r9,13107
8002e868:	ea 19 3f e3 	orh	r9,0x3fe3
8002e86c:	e0 a0 0f f8 	rcall	8003085c <__avr32_f64_add>
8002e870:	14 98       	mov	r8,r10
8002e872:	16 99       	mov	r9,r11
8002e874:	fa ea 00 1c 	ld.d	r10,sp[28]
8002e878:	e0 a0 0e 38 	rcall	800304e8 <__avr32_f64_mul>
8002e87c:	fa e8 00 04 	ld.d	r8,sp[4]
8002e880:	14 92       	mov	r2,r10
8002e882:	16 93       	mov	r3,r11
8002e884:	00 9a       	mov	r10,r0
8002e886:	02 9b       	mov	r11,r1
8002e888:	e0 a0 0f ea 	rcall	8003085c <__avr32_f64_add>
8002e88c:	14 98       	mov	r8,r10
8002e88e:	16 99       	mov	r9,r11
8002e890:	fa ea 00 14 	ld.d	r10,sp[20]
8002e894:	e0 a0 0e 2a 	rcall	800304e8 <__avr32_f64_mul>
8002e898:	14 98       	mov	r8,r10
8002e89a:	16 99       	mov	r9,r11
8002e89c:	04 9a       	mov	r10,r2
8002e89e:	06 9b       	mov	r11,r3
8002e8a0:	e0 a0 0f de 	rcall	8003085c <__avr32_f64_add>
8002e8a4:	00 98       	mov	r8,r0
8002e8a6:	fa eb 00 1c 	st.d	sp[28],r10
8002e8aa:	02 99       	mov	r9,r1
8002e8ac:	00 9a       	mov	r10,r0
8002e8ae:	02 9b       	mov	r11,r1
8002e8b0:	e0 a0 0e 1c 	rcall	800304e8 <__avr32_f64_mul>
8002e8b4:	30 08       	mov	r8,0
8002e8b6:	fc 19 40 08 	movh	r9,0x4008
8002e8ba:	fa eb 00 2c 	st.d	sp[44],r10
8002e8be:	e0 a0 0f cf 	rcall	8003085c <__avr32_f64_add>
8002e8c2:	fa e8 00 1c 	ld.d	r8,sp[28]
8002e8c6:	e0 a0 0f cb 	rcall	8003085c <__avr32_f64_add>
8002e8ca:	40 48       	lddsp	r8,sp[0x10]
8002e8cc:	16 93       	mov	r3,r11
8002e8ce:	10 92       	mov	r2,r8
8002e8d0:	06 99       	mov	r9,r3
8002e8d2:	00 9a       	mov	r10,r0
8002e8d4:	02 9b       	mov	r11,r1
8002e8d6:	e0 a0 0e 09 	rcall	800304e8 <__avr32_f64_mul>
8002e8da:	04 98       	mov	r8,r2
8002e8dc:	06 99       	mov	r9,r3
8002e8de:	fa eb 00 24 	st.d	sp[36],r10
8002e8e2:	fa ea 00 14 	ld.d	r10,sp[20]
8002e8e6:	e0 a0 0e 01 	rcall	800304e8 <__avr32_f64_mul>
8002e8ea:	30 08       	mov	r8,0
8002e8ec:	14 90       	mov	r0,r10
8002e8ee:	16 91       	mov	r1,r11
8002e8f0:	04 9a       	mov	r10,r2
8002e8f2:	06 9b       	mov	r11,r3
8002e8f4:	fc 19 40 08 	movh	r9,0x4008
8002e8f8:	e0 a0 0e e4 	rcall	800306c0 <__avr32_f64_sub>
8002e8fc:	fa e8 00 2c 	ld.d	r8,sp[44]
8002e900:	e0 a0 0e e0 	rcall	800306c0 <__avr32_f64_sub>
8002e904:	14 98       	mov	r8,r10
8002e906:	16 99       	mov	r9,r11
8002e908:	fa ea 00 1c 	ld.d	r10,sp[28]
8002e90c:	e0 a0 0e da 	rcall	800306c0 <__avr32_f64_sub>
8002e910:	fa e8 00 04 	ld.d	r8,sp[4]
8002e914:	e0 a0 0d ea 	rcall	800304e8 <__avr32_f64_mul>
8002e918:	14 98       	mov	r8,r10
8002e91a:	16 99       	mov	r9,r11
8002e91c:	00 9a       	mov	r10,r0
8002e91e:	02 9b       	mov	r11,r1
8002e920:	e0 a0 0f 9e 	rcall	8003085c <__avr32_f64_add>
8002e924:	16 91       	mov	r1,r11
8002e926:	14 90       	mov	r0,r10
8002e928:	14 98       	mov	r8,r10
8002e92a:	02 99       	mov	r9,r1
8002e92c:	fa ea 00 24 	ld.d	r10,sp[36]
8002e930:	e0 a0 0f 96 	rcall	8003085c <__avr32_f64_add>
8002e934:	40 4e       	lddsp	lr,sp[0x10]
8002e936:	16 93       	mov	r3,r11
8002e938:	1c 92       	mov	r2,lr
8002e93a:	1c 9a       	mov	r10,lr
8002e93c:	fc 18 e0 00 	movh	r8,0xe000
8002e940:	e0 69 c7 09 	mov	r9,50953
8002e944:	ea 19 3f ee 	orh	r9,0x3fee
8002e948:	06 9b       	mov	r11,r3
8002e94a:	e0 a0 0d cf 	rcall	800304e8 <__avr32_f64_mul>
8002e94e:	e0 68 01 f5 	mov	r8,501
8002e952:	ea 18 14 5b 	orh	r8,0x145b
8002e956:	fa eb 00 14 	st.d	sp[20],r10
8002e95a:	e0 69 2f e0 	mov	r9,12256
8002e95e:	ea 19 be 3e 	orh	r9,0xbe3e
8002e962:	04 9a       	mov	r10,r2
8002e964:	06 9b       	mov	r11,r3
8002e966:	e0 a0 0d c1 	rcall	800304e8 <__avr32_f64_mul>
8002e96a:	fa e8 00 24 	ld.d	r8,sp[36]
8002e96e:	fa eb 00 04 	st.d	sp[4],r10
8002e972:	04 9a       	mov	r10,r2
8002e974:	06 9b       	mov	r11,r3
8002e976:	e0 a0 0e a5 	rcall	800306c0 <__avr32_f64_sub>
8002e97a:	14 98       	mov	r8,r10
8002e97c:	16 99       	mov	r9,r11
8002e97e:	00 9a       	mov	r10,r0
8002e980:	02 9b       	mov	r11,r1
8002e982:	e0 a0 0e 9f 	rcall	800306c0 <__avr32_f64_sub>
8002e986:	e0 68 03 fd 	mov	r8,1021
8002e98a:	ea 18 dc 3a 	orh	r8,0xdc3a
8002e98e:	e0 69 c7 09 	mov	r9,50953
8002e992:	ea 19 3f ee 	orh	r9,0x3fee
8002e996:	e0 a0 0d a9 	rcall	800304e8 <__avr32_f64_mul>
8002e99a:	14 98       	mov	r8,r10
8002e99c:	16 99       	mov	r9,r11
8002e99e:	fa ea 00 04 	ld.d	r10,sp[4]
8002e9a2:	e0 a0 0f 5d 	rcall	8003085c <__avr32_f64_add>
8002e9a6:	4a 18       	lddpc	r8,8002ea28 <__ieee754_pow+0x6f0>
8002e9a8:	f0 04 02 38 	ld.d	r8,r8[r4<<0x3]
8002e9ac:	e0 a0 0f 58 	rcall	8003085c <__avr32_f64_add>
8002e9b0:	40 0c       	lddsp	r12,sp[0x0]
8002e9b2:	fa eb 00 1c 	st.d	sp[28],r10
8002e9b6:	e0 a0 0f f4 	rcall	8003099e <__avr32_s32_to_f64>
8002e9ba:	49 d8       	lddpc	r8,8002ea2c <__ieee754_pow+0x6f4>
8002e9bc:	14 90       	mov	r0,r10
8002e9be:	16 91       	mov	r1,r11
8002e9c0:	f0 04 02 3a 	ld.d	r10,r8[r4<<0x3]
8002e9c4:	fa e8 00 1c 	ld.d	r8,sp[28]
8002e9c8:	fa eb 00 04 	st.d	sp[4],r10
8002e9cc:	fa ea 00 14 	ld.d	r10,sp[20]
8002e9d0:	e0 a0 0f 46 	rcall	8003085c <__avr32_f64_add>
8002e9d4:	fa e8 00 04 	ld.d	r8,sp[4]
8002e9d8:	e0 a0 0f 42 	rcall	8003085c <__avr32_f64_add>
8002e9dc:	00 98       	mov	r8,r0
8002e9de:	02 99       	mov	r9,r1
8002e9e0:	e0 a0 0f 3e 	rcall	8003085c <__avr32_f64_add>
8002e9e4:	00 98       	mov	r8,r0
8002e9e6:	02 99       	mov	r9,r1
8002e9e8:	40 4a       	lddsp	r10,sp[0x10]
8002e9ea:	16 93       	mov	r3,r11
8002e9ec:	14 92       	mov	r2,r10
8002e9ee:	06 9b       	mov	r11,r3
8002e9f0:	e0 a0 0e 68 	rcall	800306c0 <__avr32_f64_sub>
8002e9f4:	fa e8 00 04 	ld.d	r8,sp[4]
8002e9f8:	e0 a0 0e 64 	rcall	800306c0 <__avr32_f64_sub>
8002e9fc:	fa e8 00 14 	ld.d	r8,sp[20]
8002ea00:	e0 a0 0e 60 	rcall	800306c0 <__avr32_f64_sub>
8002ea04:	14 98       	mov	r8,r10
8002ea06:	16 99       	mov	r9,r11
8002ea08:	fa ea 00 1c 	ld.d	r10,sp[28]
8002ea0c:	e0 a0 0e 5a 	rcall	800306c0 <__avr32_f64_sub>
8002ea10:	20 15       	sub	r5,1
8002ea12:	40 d9       	lddsp	r9,sp[0x34]
8002ea14:	14 90       	mov	r0,r10
8002ea16:	16 91       	mov	r1,r11
8002ea18:	12 45       	or	r5,r9
8002ea1a:	c0 b0       	breq	8002ea30 <__ieee754_pow+0x6f8>
8002ea1c:	30 04       	mov	r4,0
8002ea1e:	fc 15 3f f0 	movh	r5,0x3ff0
8002ea22:	fa e5 00 0c 	st.d	sp[12],r4
8002ea26:	c0 a8       	rjmp	8002ea3a <__ieee754_pow+0x702>
8002ea28:	80 03       	ld.sh	r3,r0[0x0]
8002ea2a:	1b 98       	ld.ub	r8,sp[0x1]
8002ea2c:	80 03       	ld.sh	r3,r0[0x0]
8002ea2e:	1b 88       	ld.ub	r8,sp[0x0]
8002ea30:	30 0a       	mov	r10,0
8002ea32:	fc 1b bf f0 	movh	r11,0xbff0
8002ea36:	fa eb 00 0c 	st.d	sp[12],r10
8002ea3a:	0e 99       	mov	r9,r7
8002ea3c:	30 08       	mov	r8,0
8002ea3e:	0e 9b       	mov	r11,r7
8002ea40:	fa e9 00 04 	st.d	sp[4],r8
8002ea44:	0c 9a       	mov	r10,r6
8002ea46:	e0 a0 0e 3d 	rcall	800306c0 <__avr32_f64_sub>
8002ea4a:	04 98       	mov	r8,r2
8002ea4c:	06 99       	mov	r9,r3
8002ea4e:	e0 a0 0d 4d 	rcall	800304e8 <__avr32_f64_mul>
8002ea52:	00 98       	mov	r8,r0
8002ea54:	14 94       	mov	r4,r10
8002ea56:	16 95       	mov	r5,r11
8002ea58:	02 99       	mov	r9,r1
8002ea5a:	0e 9b       	mov	r11,r7
8002ea5c:	0c 9a       	mov	r10,r6
8002ea5e:	e0 a0 0d 45 	rcall	800304e8 <__avr32_f64_mul>
8002ea62:	14 98       	mov	r8,r10
8002ea64:	16 99       	mov	r9,r11
8002ea66:	08 9a       	mov	r10,r4
8002ea68:	0a 9b       	mov	r11,r5
8002ea6a:	e0 a0 0e f9 	rcall	8003085c <__avr32_f64_add>
8002ea6e:	04 98       	mov	r8,r2
8002ea70:	06 99       	mov	r9,r3
8002ea72:	14 90       	mov	r0,r10
8002ea74:	16 91       	mov	r1,r11
8002ea76:	fa ea 00 04 	ld.d	r10,sp[4]
8002ea7a:	e0 a0 0d 37 	rcall	800304e8 <__avr32_f64_mul>
8002ea7e:	14 94       	mov	r4,r10
8002ea80:	16 95       	mov	r5,r11
8002ea82:	08 98       	mov	r8,r4
8002ea84:	00 9a       	mov	r10,r0
8002ea86:	02 9b       	mov	r11,r1
8002ea88:	0a 99       	mov	r9,r5
8002ea8a:	fa e5 00 04 	st.d	sp[4],r4
8002ea8e:	e0 a0 0e e7 	rcall	8003085c <__avr32_f64_add>
8002ea92:	e0 6e ff ff 	mov	lr,65535
8002ea96:	ea 1e 40 8f 	orh	lr,0x408f
8002ea9a:	16 93       	mov	r3,r11
8002ea9c:	14 92       	mov	r2,r10
8002ea9e:	06 97       	mov	r7,r3
8002eaa0:	06 98       	mov	r8,r3
8002eaa2:	1c 33       	cp.w	r3,lr
8002eaa4:	e0 8a 00 36 	brle	8002eb10 <__ieee754_pow+0x7d8>
8002eaa8:	fc 1a bf 70 	movh	r10,0xbf70
8002eaac:	14 08       	add	r8,r10
8002eaae:	f1 e2 10 09 	or	r9,r8,r2
8002eab2:	c1 a1       	brne	8002eae6 <__ieee754_pow+0x7ae>
8002eab4:	e0 68 82 fe 	mov	r8,33534
8002eab8:	ea 18 65 2b 	orh	r8,0x652b
8002eabc:	e0 69 15 47 	mov	r9,5447
8002eac0:	ea 19 3c 97 	orh	r9,0x3c97
8002eac4:	00 9a       	mov	r10,r0
8002eac6:	02 9b       	mov	r11,r1
8002eac8:	e0 a0 0e ca 	rcall	8003085c <__avr32_f64_add>
8002eacc:	08 98       	mov	r8,r4
8002eace:	fa eb 00 14 	st.d	sp[20],r10
8002ead2:	0a 99       	mov	r9,r5
8002ead4:	04 9a       	mov	r10,r2
8002ead6:	06 9b       	mov	r11,r3
8002ead8:	e0 a0 0d f4 	rcall	800306c0 <__avr32_f64_sub>
8002eadc:	fa e8 00 14 	ld.d	r8,sp[20]
8002eae0:	e0 a0 10 16 	rcall	80030b0c <__avr32_f64_cmp_lt>
8002eae4:	c4 40       	breq	8002eb6c <__ieee754_pow+0x834>
8002eae6:	e0 68 75 9c 	mov	r8,30108
8002eaea:	ea 18 88 00 	orh	r8,0x8800
8002eaee:	e0 69 e4 3c 	mov	r9,58428
8002eaf2:	ea 19 7e 37 	orh	r9,0x7e37
8002eaf6:	fa ea 00 0c 	ld.d	r10,sp[12]
8002eafa:	e0 a0 0c f7 	rcall	800304e8 <__avr32_f64_mul>
8002eafe:	e0 68 75 9c 	mov	r8,30108
8002eb02:	ea 18 88 00 	orh	r8,0x8800
8002eb06:	e0 69 e4 3c 	mov	r9,58428
8002eb0a:	ea 19 7e 37 	orh	r9,0x7e37
8002eb0e:	c5 59       	rjmp	8002edb8 <__ieee754_pow+0xa80>
8002eb10:	f9 d3 c0 1f 	bfextu	r12,r3,0x0,0x1f
8002eb14:	e0 6e cb ff 	mov	lr,52223
8002eb18:	ea 1e 40 90 	orh	lr,0x4090
8002eb1c:	1c 3c       	cp.w	r12,lr
8002eb1e:	e0 8a 00 27 	brle	8002eb6c <__ieee754_pow+0x834>
8002eb22:	e0 6c 34 00 	mov	r12,13312
8002eb26:	ea 1c 3f 6f 	orh	r12,0x3f6f
8002eb2a:	18 08       	add	r8,r12
8002eb2c:	14 48       	or	r8,r10
8002eb2e:	c0 a1       	brne	8002eb42 <__ieee754_pow+0x80a>
8002eb30:	08 98       	mov	r8,r4
8002eb32:	0a 99       	mov	r9,r5
8002eb34:	e0 a0 0d c6 	rcall	800306c0 <__avr32_f64_sub>
8002eb38:	00 98       	mov	r8,r0
8002eb3a:	02 99       	mov	r9,r1
8002eb3c:	e0 a0 0f b4 	rcall	80030aa4 <__avr32_f64_cmp_ge>
8002eb40:	c1 60       	breq	8002eb6c <__ieee754_pow+0x834>
8002eb42:	e0 68 f3 59 	mov	r8,62297
8002eb46:	ea 18 c2 f8 	orh	r8,0xc2f8
8002eb4a:	e0 69 6e 1f 	mov	r9,28191
8002eb4e:	ea 19 01 a5 	orh	r9,0x1a5
8002eb52:	fa ea 00 0c 	ld.d	r10,sp[12]
8002eb56:	e0 a0 0c c9 	rcall	800304e8 <__avr32_f64_mul>
8002eb5a:	e0 68 f3 59 	mov	r8,62297
8002eb5e:	ea 18 c2 f8 	orh	r8,0xc2f8
8002eb62:	e0 69 6e 1f 	mov	r9,28191
8002eb66:	ea 19 01 a5 	orh	r9,0x1a5
8002eb6a:	c2 79       	rjmp	8002edb8 <__ieee754_pow+0xa80>
8002eb6c:	f1 d7 c0 1f 	bfextu	r8,r7,0x0,0x1f
8002eb70:	fc 1c 3f e0 	movh	r12,0x3fe0
8002eb74:	18 38       	cp.w	r8,r12
8002eb76:	e0 89 00 04 	brgt	8002eb7e <__ieee754_pow+0x846>
8002eb7a:	30 06       	mov	r6,0
8002eb7c:	c2 78       	rjmp	8002ebca <__ieee754_pow+0x892>
8002eb7e:	fc 19 00 10 	movh	r9,0x10
8002eb82:	b5 48       	asr	r8,0x14
8002eb84:	f0 c8 03 fe 	sub	r8,r8,1022
8002eb88:	f2 08 08 48 	asr	r8,r9,r8
8002eb8c:	0e 08       	add	r8,r7
8002eb8e:	f3 d8 c0 14 	bfextu	r9,r8,0x0,0x14
8002eb92:	b5 a9       	sbr	r9,0x14
8002eb94:	f9 d8 c2 8b 	bfextu	r12,r8,0x14,0xb
8002eb98:	30 0a       	mov	r10,0
8002eb9a:	f8 cc 03 ff 	sub	r12,r12,1023
8002eb9e:	f8 06 11 14 	rsub	r6,r12,20
8002eba2:	f2 06 08 46 	asr	r6,r9,r6
8002eba6:	ee 79 ff ff 	mov	r9,1048575
8002ebaa:	f2 0c 08 4c 	asr	r12,r9,r12
8002ebae:	5c dc       	com	r12
8002ebb0:	f9 e8 00 0b 	and	r11,r12,r8
8002ebb4:	58 07       	cp.w	r7,0
8002ebb6:	fb b6 05 00 	rsublt	r6,0
8002ebba:	14 98       	mov	r8,r10
8002ebbc:	16 99       	mov	r9,r11
8002ebbe:	08 9a       	mov	r10,r4
8002ebc0:	0a 9b       	mov	r11,r5
8002ebc2:	e0 a0 0d 7f 	rcall	800306c0 <__avr32_f64_sub>
8002ebc6:	fa eb 00 04 	st.d	sp[4],r10
8002ebca:	fa e8 00 04 	ld.d	r8,sp[4]
8002ebce:	00 9a       	mov	r10,r0
8002ebd0:	02 9b       	mov	r11,r1
8002ebd2:	e0 a0 0e 45 	rcall	8003085c <__avr32_f64_add>
8002ebd6:	30 04       	mov	r4,0
8002ebd8:	16 95       	mov	r5,r11
8002ebda:	30 08       	mov	r8,0
8002ebdc:	e0 69 2e 43 	mov	r9,11843
8002ebe0:	ea 19 3f e6 	orh	r9,0x3fe6
8002ebe4:	08 9a       	mov	r10,r4
8002ebe6:	0a 9b       	mov	r11,r5
8002ebe8:	e0 a0 0c 80 	rcall	800304e8 <__avr32_f64_mul>
8002ebec:	fa e8 00 04 	ld.d	r8,sp[4]
8002ebf0:	fa eb 00 14 	st.d	sp[20],r10
8002ebf4:	08 9a       	mov	r10,r4
8002ebf6:	0a 9b       	mov	r11,r5
8002ebf8:	e0 a0 0d 64 	rcall	800306c0 <__avr32_f64_sub>
8002ebfc:	14 98       	mov	r8,r10
8002ebfe:	16 99       	mov	r9,r11
8002ec00:	00 9a       	mov	r10,r0
8002ec02:	02 9b       	mov	r11,r1
8002ec04:	e0 a0 0d 5e 	rcall	800306c0 <__avr32_f64_sub>
8002ec08:	e0 68 39 ef 	mov	r8,14831
8002ec0c:	ea 18 fe fa 	orh	r8,0xfefa
8002ec10:	e0 69 2e 42 	mov	r9,11842
8002ec14:	ea 19 3f e6 	orh	r9,0x3fe6
8002ec18:	e0 a0 0c 68 	rcall	800304e8 <__avr32_f64_mul>
8002ec1c:	e0 68 6c 39 	mov	r8,27705
8002ec20:	ea 18 0c a8 	orh	r8,0xca8
8002ec24:	14 92       	mov	r2,r10
8002ec26:	16 93       	mov	r3,r11
8002ec28:	08 9a       	mov	r10,r4
8002ec2a:	0a 9b       	mov	r11,r5
8002ec2c:	e0 69 5c 61 	mov	r9,23649
8002ec30:	ea 19 be 20 	orh	r9,0xbe20
8002ec34:	e0 a0 0c 5a 	rcall	800304e8 <__avr32_f64_mul>
8002ec38:	14 98       	mov	r8,r10
8002ec3a:	16 99       	mov	r9,r11
8002ec3c:	04 9a       	mov	r10,r2
8002ec3e:	06 9b       	mov	r11,r3
8002ec40:	e0 a0 0e 0e 	rcall	8003085c <__avr32_f64_add>
8002ec44:	16 93       	mov	r3,r11
8002ec46:	14 92       	mov	r2,r10
8002ec48:	14 98       	mov	r8,r10
8002ec4a:	06 99       	mov	r9,r3
8002ec4c:	fa ea 00 14 	ld.d	r10,sp[20]
8002ec50:	e0 a0 0e 06 	rcall	8003085c <__avr32_f64_add>
8002ec54:	fa e8 00 14 	ld.d	r8,sp[20]
8002ec58:	14 94       	mov	r4,r10
8002ec5a:	16 95       	mov	r5,r11
8002ec5c:	e0 a0 0d 32 	rcall	800306c0 <__avr32_f64_sub>
8002ec60:	14 98       	mov	r8,r10
8002ec62:	16 99       	mov	r9,r11
8002ec64:	04 9a       	mov	r10,r2
8002ec66:	06 9b       	mov	r11,r3
8002ec68:	e0 a0 0d 2c 	rcall	800306c0 <__avr32_f64_sub>
8002ec6c:	08 98       	mov	r8,r4
8002ec6e:	fa eb 00 04 	st.d	sp[4],r10
8002ec72:	0a 99       	mov	r9,r5
8002ec74:	08 9a       	mov	r10,r4
8002ec76:	0a 9b       	mov	r11,r5
8002ec78:	e0 a0 0c 38 	rcall	800304e8 <__avr32_f64_mul>
8002ec7c:	e0 68 a4 d0 	mov	r8,42192
8002ec80:	ea 18 72 be 	orh	r8,0x72be
8002ec84:	14 92       	mov	r2,r10
8002ec86:	16 93       	mov	r3,r11
8002ec88:	e0 69 37 69 	mov	r9,14185
8002ec8c:	ea 19 3e 66 	orh	r9,0x3e66
8002ec90:	e0 a0 0c 2c 	rcall	800304e8 <__avr32_f64_mul>
8002ec94:	e0 68 6b f1 	mov	r8,27633
8002ec98:	ea 18 c5 d2 	orh	r8,0xc5d2
8002ec9c:	e0 69 bd 41 	mov	r9,48449
8002eca0:	ea 19 3e bb 	orh	r9,0x3ebb
8002eca4:	e0 a0 0d 0e 	rcall	800306c0 <__avr32_f64_sub>
8002eca8:	14 98       	mov	r8,r10
8002ecaa:	16 99       	mov	r9,r11
8002ecac:	04 9a       	mov	r10,r2
8002ecae:	06 9b       	mov	r11,r3
8002ecb0:	e0 a0 0c 1c 	rcall	800304e8 <__avr32_f64_mul>
8002ecb4:	e0 68 de 2c 	mov	r8,56876
8002ecb8:	ea 18 af 25 	orh	r8,0xaf25
8002ecbc:	e0 69 56 6a 	mov	r9,22122
8002ecc0:	ea 19 3f 11 	orh	r9,0x3f11
8002ecc4:	e0 a0 0d cc 	rcall	8003085c <__avr32_f64_add>
8002ecc8:	14 98       	mov	r8,r10
8002ecca:	16 99       	mov	r9,r11
8002eccc:	04 9a       	mov	r10,r2
8002ecce:	06 9b       	mov	r11,r3
8002ecd0:	e0 a0 0c 0c 	rcall	800304e8 <__avr32_f64_mul>
8002ecd4:	e0 68 bd 93 	mov	r8,48531
8002ecd8:	ea 18 16 be 	orh	r8,0x16be
8002ecdc:	e0 69 c1 6c 	mov	r9,49516
8002ece0:	ea 19 3f 66 	orh	r9,0x3f66
8002ece4:	e0 a0 0c ee 	rcall	800306c0 <__avr32_f64_sub>
8002ece8:	14 98       	mov	r8,r10
8002ecea:	16 99       	mov	r9,r11
8002ecec:	04 9a       	mov	r10,r2
8002ecee:	06 9b       	mov	r11,r3
8002ecf0:	e0 a0 0b fc 	rcall	800304e8 <__avr32_f64_mul>
8002ecf4:	e0 68 55 3e 	mov	r8,21822
8002ecf8:	ea 18 55 55 	orh	r8,0x5555
8002ecfc:	e0 69 55 55 	mov	r9,21845
8002ed00:	ea 19 3f c5 	orh	r9,0x3fc5
8002ed04:	e0 a0 0d ac 	rcall	8003085c <__avr32_f64_add>
8002ed08:	14 98       	mov	r8,r10
8002ed0a:	16 99       	mov	r9,r11
8002ed0c:	04 9a       	mov	r10,r2
8002ed0e:	06 9b       	mov	r11,r3
8002ed10:	e0 a0 0b ec 	rcall	800304e8 <__avr32_f64_mul>
8002ed14:	14 98       	mov	r8,r10
8002ed16:	16 99       	mov	r9,r11
8002ed18:	08 9a       	mov	r10,r4
8002ed1a:	0a 9b       	mov	r11,r5
8002ed1c:	e0 a0 0c d2 	rcall	800306c0 <__avr32_f64_sub>
8002ed20:	16 93       	mov	r3,r11
8002ed22:	14 92       	mov	r2,r10
8002ed24:	14 98       	mov	r8,r10
8002ed26:	06 99       	mov	r9,r3
8002ed28:	08 9a       	mov	r10,r4
8002ed2a:	0a 9b       	mov	r11,r5
8002ed2c:	e0 a0 0b de 	rcall	800304e8 <__avr32_f64_mul>
8002ed30:	30 08       	mov	r8,0
8002ed32:	14 90       	mov	r0,r10
8002ed34:	16 91       	mov	r1,r11
8002ed36:	04 9a       	mov	r10,r2
8002ed38:	06 9b       	mov	r11,r3
8002ed3a:	fc 19 40 00 	movh	r9,0x4000
8002ed3e:	e0 a0 0c c1 	rcall	800306c0 <__avr32_f64_sub>
8002ed42:	14 98       	mov	r8,r10
8002ed44:	16 99       	mov	r9,r11
8002ed46:	00 9a       	mov	r10,r0
8002ed48:	02 9b       	mov	r11,r1
8002ed4a:	e0 a0 0f 15 	rcall	80030b74 <__avr32_f64_div>
8002ed4e:	fa e8 00 04 	ld.d	r8,sp[4]
8002ed52:	14 92       	mov	r2,r10
8002ed54:	16 93       	mov	r3,r11
8002ed56:	08 9a       	mov	r10,r4
8002ed58:	0a 9b       	mov	r11,r5
8002ed5a:	e0 a0 0b c7 	rcall	800304e8 <__avr32_f64_mul>
8002ed5e:	14 98       	mov	r8,r10
8002ed60:	16 99       	mov	r9,r11
8002ed62:	fa ea 00 04 	ld.d	r10,sp[4]
8002ed66:	e0 a0 0d 7b 	rcall	8003085c <__avr32_f64_add>
8002ed6a:	14 98       	mov	r8,r10
8002ed6c:	16 99       	mov	r9,r11
8002ed6e:	04 9a       	mov	r10,r2
8002ed70:	06 9b       	mov	r11,r3
8002ed72:	e0 a0 0c a7 	rcall	800306c0 <__avr32_f64_sub>
8002ed76:	08 98       	mov	r8,r4
8002ed78:	0a 99       	mov	r9,r5
8002ed7a:	e0 a0 0c a3 	rcall	800306c0 <__avr32_f64_sub>
8002ed7e:	14 98       	mov	r8,r10
8002ed80:	16 99       	mov	r9,r11
8002ed82:	30 0a       	mov	r10,0
8002ed84:	fc 1b 3f f0 	movh	r11,0x3ff0
8002ed88:	e0 a0 0c 9c 	rcall	800306c0 <__avr32_f64_sub>
8002ed8c:	ec 0c 15 14 	lsl	r12,r6,0x14
8002ed90:	16 95       	mov	r5,r11
8002ed92:	14 94       	mov	r4,r10
8002ed94:	f8 05 00 08 	add	r8,r12,r5
8002ed98:	f0 09 14 14 	asr	r9,r8,0x14
8002ed9c:	58 09       	cp.w	r9,0
8002ed9e:	e0 89 00 08 	brgt	8002edae <__ieee754_pow+0xa76>
8002eda2:	0c 9c       	mov	r12,r6
8002eda4:	e0 a0 0b 28 	rcall	800303f4 <scalbn>
8002eda8:	14 98       	mov	r8,r10
8002edaa:	16 99       	mov	r9,r11
8002edac:	c0 48       	rjmp	8002edb4 <__ieee754_pow+0xa7c>
8002edae:	10 95       	mov	r5,r8
8002edb0:	14 98       	mov	r8,r10
8002edb2:	0a 99       	mov	r9,r5
8002edb4:	fa ea 00 0c 	ld.d	r10,sp[12]
8002edb8:	e0 a0 0b 98 	rcall	800304e8 <__avr32_f64_mul>
8002edbc:	16 97       	mov	r7,r11
8002edbe:	14 96       	mov	r6,r10
8002edc0:	c0 78       	rjmp	8002edce <__ieee754_pow+0xa96>
8002edc2:	fc 17 3f f0 	movh	r7,0x3ff0
8002edc6:	30 06       	mov	r6,0
8002edc8:	c0 38       	rjmp	8002edce <__ieee754_pow+0xa96>
8002edca:	30 07       	mov	r7,0
8002edcc:	0e 96       	mov	r6,r7
8002edce:	0e 9b       	mov	r11,r7
8002edd0:	0c 9a       	mov	r10,r6
8002edd2:	2f 2d       	sub	sp,-56
8002edd4:	d8 32       	popm	r0-r7,pc
8002edd6:	30 05       	mov	r5,0
8002edd8:	fe 9f fb 2b 	bral	8002e42e <__ieee754_pow+0xf6>

8002eddc <__ieee754_rem_pio2>:
8002eddc:	d4 31       	pushm	r0-r7,lr
8002edde:	20 ad       	sub	sp,40
8002ede0:	50 3b       	stdsp	sp[0xc],r11
8002ede2:	18 96       	mov	r6,r12
8002ede4:	14 98       	mov	r8,r10
8002ede6:	16 99       	mov	r9,r11
8002ede8:	14 92       	mov	r2,r10
8002edea:	16 93       	mov	r3,r11
8002edec:	eb db c0 1f 	bfextu	r5,r11,0x0,0x1f
8002edf0:	e0 6c 21 fb 	mov	r12,8699
8002edf4:	ea 1c 3f e9 	orh	r12,0x3fe9
8002edf8:	18 35       	cp.w	r5,r12
8002edfa:	e0 89 00 0b 	brgt	8002ee10 <__ieee754_rem_pio2+0x34>
8002edfe:	ec e9 00 00 	st.d	r6[0],r8
8002ee02:	30 07       	mov	r7,0
8002ee04:	30 08       	mov	r8,0
8002ee06:	30 09       	mov	r9,0
8002ee08:	ec e9 00 08 	st.d	r6[8],r8
8002ee0c:	e0 8f 02 1a 	bral	8002f240 <__ieee754_rem_pio2+0x464>
8002ee10:	e0 6c d9 7b 	mov	r12,55675
8002ee14:	ea 1c 40 02 	orh	r12,0x4002
8002ee18:	18 35       	cp.w	r5,r12
8002ee1a:	e0 89 00 b6 	brgt	8002ef86 <__ieee754_rem_pio2+0x1aa>
8002ee1e:	58 0b       	cp.w	r11,0
8002ee20:	e0 8a 00 59 	brle	8002eed2 <__ieee754_rem_pio2+0xf6>
8002ee24:	fc 18 54 40 	movh	r8,0x5440
8002ee28:	e0 69 21 fb 	mov	r9,8699
8002ee2c:	ea 19 3f f9 	orh	r9,0x3ff9
8002ee30:	e0 a0 0c 48 	rcall	800306c0 <__avr32_f64_sub>
8002ee34:	e0 68 21 fb 	mov	r8,8699
8002ee38:	ea 18 3f f9 	orh	r8,0x3ff9
8002ee3c:	14 92       	mov	r2,r10
8002ee3e:	16 93       	mov	r3,r11
8002ee40:	10 35       	cp.w	r5,r8
8002ee42:	c1 e0       	breq	8002ee7e <__ieee754_rem_pio2+0xa2>
8002ee44:	e0 68 63 31 	mov	r8,25393
8002ee48:	ea 18 1a 62 	orh	r8,0x1a62
8002ee4c:	e0 69 b4 61 	mov	r9,46177
8002ee50:	ea 19 3d d0 	orh	r9,0x3dd0
8002ee54:	e0 a0 0c 36 	rcall	800306c0 <__avr32_f64_sub>
8002ee58:	14 94       	mov	r4,r10
8002ee5a:	16 95       	mov	r5,r11
8002ee5c:	08 98       	mov	r8,r4
8002ee5e:	0a 99       	mov	r9,r5
8002ee60:	04 9a       	mov	r10,r2
8002ee62:	06 9b       	mov	r11,r3
8002ee64:	ec e5 00 00 	st.d	r6[0],r4
8002ee68:	e0 a0 0c 2c 	rcall	800306c0 <__avr32_f64_sub>
8002ee6c:	e0 68 63 31 	mov	r8,25393
8002ee70:	ea 18 1a 62 	orh	r8,0x1a62
8002ee74:	e0 69 b4 61 	mov	r9,46177
8002ee78:	ea 19 3d d0 	orh	r9,0x3dd0
8002ee7c:	c2 78       	rjmp	8002eeca <__ieee754_rem_pio2+0xee>
8002ee7e:	fc 18 1a 60 	movh	r8,0x1a60
8002ee82:	e0 69 b4 61 	mov	r9,46177
8002ee86:	ea 19 3d d0 	orh	r9,0x3dd0
8002ee8a:	e0 a0 0c 1b 	rcall	800306c0 <__avr32_f64_sub>
8002ee8e:	e0 68 70 73 	mov	r8,28787
8002ee92:	ea 18 2e 03 	orh	r8,0x2e03
8002ee96:	14 94       	mov	r4,r10
8002ee98:	16 95       	mov	r5,r11
8002ee9a:	e0 69 19 8a 	mov	r9,6538
8002ee9e:	ea 19 3b a3 	orh	r9,0x3ba3
8002eea2:	e0 a0 0c 0f 	rcall	800306c0 <__avr32_f64_sub>
8002eea6:	14 92       	mov	r2,r10
8002eea8:	16 93       	mov	r3,r11
8002eeaa:	04 98       	mov	r8,r2
8002eeac:	06 99       	mov	r9,r3
8002eeae:	08 9a       	mov	r10,r4
8002eeb0:	0a 9b       	mov	r11,r5
8002eeb2:	ec e3 00 00 	st.d	r6[0],r2
8002eeb6:	e0 a0 0c 05 	rcall	800306c0 <__avr32_f64_sub>
8002eeba:	e0 68 70 73 	mov	r8,28787
8002eebe:	ea 18 2e 03 	orh	r8,0x2e03
8002eec2:	e0 69 19 8a 	mov	r9,6538
8002eec6:	ea 19 3b a3 	orh	r9,0x3ba3
8002eeca:	30 17       	mov	r7,1
8002eecc:	e0 a0 0b fa 	rcall	800306c0 <__avr32_f64_sub>
8002eed0:	c3 08       	rjmp	8002ef30 <__ieee754_rem_pio2+0x154>
8002eed2:	fc 18 54 40 	movh	r8,0x5440
8002eed6:	e0 69 21 fb 	mov	r9,8699
8002eeda:	ea 19 3f f9 	orh	r9,0x3ff9
8002eede:	e0 a0 0c bf 	rcall	8003085c <__avr32_f64_add>
8002eee2:	e0 6c 21 fb 	mov	r12,8699
8002eee6:	ea 1c 3f f9 	orh	r12,0x3ff9
8002eeea:	14 92       	mov	r2,r10
8002eeec:	16 93       	mov	r3,r11
8002eeee:	18 35       	cp.w	r5,r12
8002eef0:	c2 40       	breq	8002ef38 <__ieee754_rem_pio2+0x15c>
8002eef2:	e0 68 63 31 	mov	r8,25393
8002eef6:	ea 18 1a 62 	orh	r8,0x1a62
8002eefa:	e0 69 b4 61 	mov	r9,46177
8002eefe:	ea 19 3d d0 	orh	r9,0x3dd0
8002ef02:	e0 a0 0c ad 	rcall	8003085c <__avr32_f64_add>
8002ef06:	14 94       	mov	r4,r10
8002ef08:	16 95       	mov	r5,r11
8002ef0a:	08 98       	mov	r8,r4
8002ef0c:	0a 99       	mov	r9,r5
8002ef0e:	04 9a       	mov	r10,r2
8002ef10:	06 9b       	mov	r11,r3
8002ef12:	ec e5 00 00 	st.d	r6[0],r4
8002ef16:	e0 a0 0b d5 	rcall	800306c0 <__avr32_f64_sub>
8002ef1a:	e0 68 63 31 	mov	r8,25393
8002ef1e:	ea 18 1a 62 	orh	r8,0x1a62
8002ef22:	e0 69 b4 61 	mov	r9,46177
8002ef26:	ea 19 3d d0 	orh	r9,0x3dd0
8002ef2a:	3f f7       	mov	r7,-1
8002ef2c:	e0 a0 0c 98 	rcall	8003085c <__avr32_f64_add>
8002ef30:	ec eb 00 08 	st.d	r6[8],r10
8002ef34:	e0 8f 01 86 	bral	8002f240 <__ieee754_rem_pio2+0x464>
8002ef38:	fc 18 1a 60 	movh	r8,0x1a60
8002ef3c:	e0 69 b4 61 	mov	r9,46177
8002ef40:	ea 19 3d d0 	orh	r9,0x3dd0
8002ef44:	e0 a0 0c 8c 	rcall	8003085c <__avr32_f64_add>
8002ef48:	e0 68 70 73 	mov	r8,28787
8002ef4c:	ea 18 2e 03 	orh	r8,0x2e03
8002ef50:	14 94       	mov	r4,r10
8002ef52:	16 95       	mov	r5,r11
8002ef54:	e0 69 19 8a 	mov	r9,6538
8002ef58:	ea 19 3b a3 	orh	r9,0x3ba3
8002ef5c:	e0 a0 0c 80 	rcall	8003085c <__avr32_f64_add>
8002ef60:	14 92       	mov	r2,r10
8002ef62:	16 93       	mov	r3,r11
8002ef64:	04 98       	mov	r8,r2
8002ef66:	06 99       	mov	r9,r3
8002ef68:	08 9a       	mov	r10,r4
8002ef6a:	0a 9b       	mov	r11,r5
8002ef6c:	ec e3 00 00 	st.d	r6[0],r2
8002ef70:	e0 a0 0b a8 	rcall	800306c0 <__avr32_f64_sub>
8002ef74:	e0 68 70 73 	mov	r8,28787
8002ef78:	ea 18 2e 03 	orh	r8,0x2e03
8002ef7c:	e0 69 19 8a 	mov	r9,6538
8002ef80:	ea 19 3b a3 	orh	r9,0x3ba3
8002ef84:	cd 3b       	rjmp	8002ef2a <__ieee754_rem_pio2+0x14e>
8002ef86:	e0 6c 21 fb 	mov	r12,8699
8002ef8a:	ea 1c 41 39 	orh	r12,0x4139
8002ef8e:	18 35       	cp.w	r5,r12
8002ef90:	e0 89 00 f4 	brgt	8002f178 <__ieee754_rem_pio2+0x39c>
8002ef94:	e0 a0 08 f4 	rcall	8003017c <fabs>
8002ef98:	e0 68 c8 83 	mov	r8,51331
8002ef9c:	ea 18 6d c9 	orh	r8,0x6dc9
8002efa0:	14 92       	mov	r2,r10
8002efa2:	16 93       	mov	r3,r11
8002efa4:	e0 69 5f 30 	mov	r9,24368
8002efa8:	ea 19 3f e4 	orh	r9,0x3fe4
8002efac:	e0 a0 0a 9e 	rcall	800304e8 <__avr32_f64_mul>
8002efb0:	30 08       	mov	r8,0
8002efb2:	fc 19 3f e0 	movh	r9,0x3fe0
8002efb6:	e0 a0 0c 53 	rcall	8003085c <__avr32_f64_add>
8002efba:	e0 a0 0c db 	rcall	80030970 <__avr32_f64_to_s32>
8002efbe:	18 97       	mov	r7,r12
8002efc0:	e0 a0 0c ef 	rcall	8003099e <__avr32_s32_to_f64>
8002efc4:	fc 18 54 40 	movh	r8,0x5440
8002efc8:	e0 69 21 fb 	mov	r9,8699
8002efcc:	ea 19 bf f9 	orh	r9,0xbff9
8002efd0:	fa eb 00 04 	st.d	sp[4],r10
8002efd4:	e0 a0 0a 8a 	rcall	800304e8 <__avr32_f64_mul>
8002efd8:	14 98       	mov	r8,r10
8002efda:	16 99       	mov	r9,r11
8002efdc:	04 9a       	mov	r10,r2
8002efde:	06 9b       	mov	r11,r3
8002efe0:	e0 a0 0c 3e 	rcall	8003085c <__avr32_f64_add>
8002efe4:	e0 68 63 31 	mov	r8,25393
8002efe8:	ea 18 1a 62 	orh	r8,0x1a62
8002efec:	14 92       	mov	r2,r10
8002efee:	16 93       	mov	r3,r11
8002eff0:	e0 69 b4 61 	mov	r9,46177
8002eff4:	ea 19 3d d0 	orh	r9,0x3dd0
8002eff8:	fa ea 00 04 	ld.d	r10,sp[4]
8002effc:	e0 a0 0a 76 	rcall	800304e8 <__avr32_f64_mul>
8002f000:	14 90       	mov	r0,r10
8002f002:	16 91       	mov	r1,r11
8002f004:	59 f7       	cp.w	r7,31
8002f006:	e0 89 00 0a 	brgt	8002f01a <__ieee754_rem_pio2+0x23e>
8002f00a:	ee c9 00 01 	sub	r9,r7,1
8002f00e:	4d a8       	lddpc	r8,8002f174 <__ieee754_rem_pio2+0x398>
8002f010:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8002f014:	10 35       	cp.w	r5,r8
8002f016:	e0 81 00 8b 	brne	8002f12c <__ieee754_rem_pio2+0x350>
8002f01a:	00 98       	mov	r8,r0
8002f01c:	02 99       	mov	r9,r1
8002f01e:	04 9a       	mov	r10,r2
8002f020:	06 9b       	mov	r11,r3
8002f022:	e0 a0 0b 4f 	rcall	800306c0 <__avr32_f64_sub>
8002f026:	ec eb 00 00 	st.d	r6[0],r10
8002f02a:	ea 0c 14 14 	asr	r12,r5,0x14
8002f02e:	f7 db c2 8b 	bfextu	r11,r11,0x14,0xb
8002f032:	f8 0b 01 0b 	sub	r11,r12,r11
8002f036:	59 0b       	cp.w	r11,16
8002f038:	e0 8a 00 82 	brle	8002f13c <__ieee754_rem_pio2+0x360>
8002f03c:	50 0c       	stdsp	sp[0x0],r12
8002f03e:	fc 18 1a 60 	movh	r8,0x1a60
8002f042:	e0 69 b4 61 	mov	r9,46177
8002f046:	ea 19 3d d0 	orh	r9,0x3dd0
8002f04a:	fa ea 00 04 	ld.d	r10,sp[4]
8002f04e:	e0 a0 0a 4d 	rcall	800304e8 <__avr32_f64_mul>
8002f052:	16 91       	mov	r1,r11
8002f054:	14 90       	mov	r0,r10
8002f056:	14 98       	mov	r8,r10
8002f058:	02 99       	mov	r9,r1
8002f05a:	04 9a       	mov	r10,r2
8002f05c:	06 9b       	mov	r11,r3
8002f05e:	e0 a0 0b 31 	rcall	800306c0 <__avr32_f64_sub>
8002f062:	16 95       	mov	r5,r11
8002f064:	14 98       	mov	r8,r10
8002f066:	14 94       	mov	r4,r10
8002f068:	0a 99       	mov	r9,r5
8002f06a:	04 9a       	mov	r10,r2
8002f06c:	06 9b       	mov	r11,r3
8002f06e:	e0 a0 0b 29 	rcall	800306c0 <__avr32_f64_sub>
8002f072:	00 98       	mov	r8,r0
8002f074:	02 99       	mov	r9,r1
8002f076:	e0 a0 0b 25 	rcall	800306c0 <__avr32_f64_sub>
8002f07a:	e0 68 70 73 	mov	r8,28787
8002f07e:	ea 18 2e 03 	orh	r8,0x2e03
8002f082:	14 92       	mov	r2,r10
8002f084:	16 93       	mov	r3,r11
8002f086:	e0 69 19 8a 	mov	r9,6538
8002f08a:	ea 19 3b a3 	orh	r9,0x3ba3
8002f08e:	fa ea 00 04 	ld.d	r10,sp[4]
8002f092:	e0 a0 0a 2b 	rcall	800304e8 <__avr32_f64_mul>
8002f096:	04 98       	mov	r8,r2
8002f098:	06 99       	mov	r9,r3
8002f09a:	e0 a0 0b 13 	rcall	800306c0 <__avr32_f64_sub>
8002f09e:	16 91       	mov	r1,r11
8002f0a0:	14 98       	mov	r8,r10
8002f0a2:	14 90       	mov	r0,r10
8002f0a4:	02 99       	mov	r9,r1
8002f0a6:	08 9a       	mov	r10,r4
8002f0a8:	0a 9b       	mov	r11,r5
8002f0aa:	e0 a0 0b 0b 	rcall	800306c0 <__avr32_f64_sub>
8002f0ae:	ec eb 00 00 	st.d	r6[0],r10
8002f0b2:	40 0c       	lddsp	r12,sp[0x0]
8002f0b4:	f7 db c2 8b 	bfextu	r11,r11,0x14,0xb
8002f0b8:	16 1c       	sub	r12,r11
8002f0ba:	e0 4c 00 31 	cp.w	r12,49
8002f0be:	e0 89 00 05 	brgt	8002f0c8 <__ieee754_rem_pio2+0x2ec>
8002f0c2:	08 92       	mov	r2,r4
8002f0c4:	0a 93       	mov	r3,r5
8002f0c6:	c3 b8       	rjmp	8002f13c <__ieee754_rem_pio2+0x360>
8002f0c8:	fc 18 2e 00 	movh	r8,0x2e00
8002f0cc:	e0 69 19 8a 	mov	r9,6538
8002f0d0:	ea 19 3b a3 	orh	r9,0x3ba3
8002f0d4:	fa ea 00 04 	ld.d	r10,sp[4]
8002f0d8:	e0 a0 0a 08 	rcall	800304e8 <__avr32_f64_mul>
8002f0dc:	16 91       	mov	r1,r11
8002f0de:	14 90       	mov	r0,r10
8002f0e0:	14 98       	mov	r8,r10
8002f0e2:	02 99       	mov	r9,r1
8002f0e4:	08 9a       	mov	r10,r4
8002f0e6:	0a 9b       	mov	r11,r5
8002f0e8:	e0 a0 0a ec 	rcall	800306c0 <__avr32_f64_sub>
8002f0ec:	14 98       	mov	r8,r10
8002f0ee:	16 93       	mov	r3,r11
8002f0f0:	14 92       	mov	r2,r10
8002f0f2:	06 99       	mov	r9,r3
8002f0f4:	08 9a       	mov	r10,r4
8002f0f6:	0a 9b       	mov	r11,r5
8002f0f8:	e0 a0 0a e4 	rcall	800306c0 <__avr32_f64_sub>
8002f0fc:	00 98       	mov	r8,r0
8002f0fe:	02 99       	mov	r9,r1
8002f100:	e0 a0 0a e0 	rcall	800306c0 <__avr32_f64_sub>
8002f104:	e0 68 49 c1 	mov	r8,18881
8002f108:	ea 18 25 20 	orh	r8,0x2520
8002f10c:	14 94       	mov	r4,r10
8002f10e:	16 95       	mov	r5,r11
8002f110:	e0 69 83 9a 	mov	r9,33690
8002f114:	ea 19 39 7b 	orh	r9,0x397b
8002f118:	fa ea 00 04 	ld.d	r10,sp[4]
8002f11c:	e0 a0 09 e6 	rcall	800304e8 <__avr32_f64_mul>
8002f120:	08 98       	mov	r8,r4
8002f122:	0a 99       	mov	r9,r5
8002f124:	e0 a0 0a ce 	rcall	800306c0 <__avr32_f64_sub>
8002f128:	14 90       	mov	r0,r10
8002f12a:	16 91       	mov	r1,r11
8002f12c:	00 98       	mov	r8,r0
8002f12e:	02 99       	mov	r9,r1
8002f130:	04 9a       	mov	r10,r2
8002f132:	06 9b       	mov	r11,r3
8002f134:	e0 a0 0a c6 	rcall	800306c0 <__avr32_f64_sub>
8002f138:	ec eb 00 00 	st.d	r6[0],r10
8002f13c:	ec e8 00 00 	ld.d	r8,r6[0]
8002f140:	04 9a       	mov	r10,r2
8002f142:	06 9b       	mov	r11,r3
8002f144:	e0 a0 0a be 	rcall	800306c0 <__avr32_f64_sub>
8002f148:	00 98       	mov	r8,r0
8002f14a:	ec c5 ff f8 	sub	r5,r6,-8
8002f14e:	02 99       	mov	r9,r1
8002f150:	e0 a0 0a b8 	rcall	800306c0 <__avr32_f64_sub>
8002f154:	ea eb 00 00 	st.d	r5[0],r10
8002f158:	40 38       	lddsp	r8,sp[0xc]
8002f15a:	58 08       	cp.w	r8,0
8002f15c:	c7 24       	brge	8002f240 <__ieee754_rem_pio2+0x464>
8002f15e:	6c 08       	ld.w	r8,r6[0x0]
8002f160:	ee 18 80 00 	eorh	r8,0x8000
8002f164:	8d 08       	st.w	r6[0x0],r8
8002f166:	5c 37       	neg	r7
8002f168:	6a 08       	ld.w	r8,r5[0x0]
8002f16a:	ee 18 80 00 	eorh	r8,0x8000
8002f16e:	8b 08       	st.w	r5[0x0],r8
8002f170:	c6 88       	rjmp	8002f240 <__ieee754_rem_pio2+0x464>
8002f172:	d7 03       	nop
8002f174:	80 03       	ld.sh	r3,r0[0x0]
8002f176:	1b b8       	ld.ub	r8,sp[0x3]
8002f178:	e0 6c ff ff 	mov	r12,65535
8002f17c:	ea 1c 7f ef 	orh	r12,0x7fef
8002f180:	18 35       	cp.w	r5,r12
8002f182:	e0 8a 00 08 	brle	8002f192 <__ieee754_rem_pio2+0x3b6>
8002f186:	30 07       	mov	r7,0
8002f188:	e0 a0 0a 9c 	rcall	800306c0 <__avr32_f64_sub>
8002f18c:	ec eb 00 00 	st.d	r6[0],r10
8002f190:	cd 0a       	rjmp	8002ef30 <__ieee754_rem_pio2+0x154>
8002f192:	ea 03 14 14 	asr	r3,r5,0x14
8002f196:	e6 c3 04 16 	sub	r3,r3,1046
8002f19a:	e6 08 15 14 	lsl	r8,r3,0x14
8002f19e:	ea 08 01 01 	sub	r1,r5,r8
8002f1a2:	02 9b       	mov	r11,r1
8002f1a4:	e0 a0 0b e6 	rcall	80030970 <__avr32_f64_to_s32>
8002f1a8:	e0 a0 0b fb 	rcall	8003099e <__avr32_s32_to_f64>
8002f1ac:	14 94       	mov	r4,r10
8002f1ae:	16 95       	mov	r5,r11
8002f1b0:	08 98       	mov	r8,r4
8002f1b2:	0a 99       	mov	r9,r5
8002f1b4:	fa e5 00 10 	st.d	sp[16],r4
8002f1b8:	02 9b       	mov	r11,r1
8002f1ba:	04 9a       	mov	r10,r2
8002f1bc:	e0 a0 0a 82 	rcall	800306c0 <__avr32_f64_sub>
8002f1c0:	30 08       	mov	r8,0
8002f1c2:	fc 19 41 70 	movh	r9,0x4170
8002f1c6:	e0 a0 09 91 	rcall	800304e8 <__avr32_f64_mul>
8002f1ca:	14 90       	mov	r0,r10
8002f1cc:	16 91       	mov	r1,r11
8002f1ce:	e0 a0 0b d1 	rcall	80030970 <__avr32_f64_to_s32>
8002f1d2:	e0 a0 0b e6 	rcall	8003099e <__avr32_s32_to_f64>
8002f1d6:	16 95       	mov	r5,r11
8002f1d8:	14 94       	mov	r4,r10
8002f1da:	0a 99       	mov	r9,r5
8002f1dc:	08 98       	mov	r8,r4
8002f1de:	fa e5 00 18 	st.d	sp[24],r4
8002f1e2:	00 9a       	mov	r10,r0
8002f1e4:	02 9b       	mov	r11,r1
8002f1e6:	e0 a0 0a 6d 	rcall	800306c0 <__avr32_f64_sub>
8002f1ea:	30 08       	mov	r8,0
8002f1ec:	fc 19 41 70 	movh	r9,0x4170
8002f1f0:	30 35       	mov	r5,3
8002f1f2:	e0 a0 09 7b 	rcall	800304e8 <__avr32_f64_mul>
8002f1f6:	fa c7 ff d8 	sub	r7,sp,-40
8002f1fa:	af 2b       	st.d	--r7,r10
8002f1fc:	ee ea 00 00 	ld.d	r10,r7[0]
8002f200:	0a 91       	mov	r1,r5
8002f202:	20 87       	sub	r7,8
8002f204:	20 15       	sub	r5,1
8002f206:	30 08       	mov	r8,0
8002f208:	30 09       	mov	r9,0
8002f20a:	e0 a0 0c 3a 	rcall	80030a7e <__avr32_f64_cmp_eq>
8002f20e:	cf 71       	brne	8002f1fc <__ieee754_rem_pio2+0x420>
8002f210:	48 e8       	lddpc	r8,8002f248 <__ieee754_rem_pio2+0x46c>
8002f212:	02 99       	mov	r9,r1
8002f214:	1a d8       	st.w	--sp,r8
8002f216:	06 9a       	mov	r10,r3
8002f218:	30 28       	mov	r8,2
8002f21a:	fa cc ff ec 	sub	r12,sp,-20
8002f21e:	0c 9b       	mov	r11,r6
8002f220:	cd 0d       	rcall	8002f5c0 <__kernel_rem_pio2>
8002f222:	2f fd       	sub	sp,-4
8002f224:	18 97       	mov	r7,r12
8002f226:	40 38       	lddsp	r8,sp[0xc]
8002f228:	58 08       	cp.w	r8,0
8002f22a:	c0 b4       	brge	8002f240 <__ieee754_rem_pio2+0x464>
8002f22c:	6c 08       	ld.w	r8,r6[0x0]
8002f22e:	ee 18 80 00 	eorh	r8,0x8000
8002f232:	8d 08       	st.w	r6[0x0],r8
8002f234:	5c 37       	neg	r7
8002f236:	2f 86       	sub	r6,-8
8002f238:	6c 08       	ld.w	r8,r6[0x0]
8002f23a:	ee 18 80 00 	eorh	r8,0x8000
8002f23e:	8d 08       	st.w	r6[0x0],r8
8002f240:	0e 9c       	mov	r12,r7
8002f242:	2f 6d       	sub	sp,-40
8002f244:	d8 32       	popm	r0-r7,pc
8002f246:	d7 03       	nop
8002f248:	80 03       	ld.sh	r3,r0[0x0]
8002f24a:	1c 38       	cp.w	r8,lr

8002f24c <__ieee754_sqrt>:
8002f24c:	d4 31       	pushm	r0-r7,lr
8002f24e:	fc 1e 7f f0 	movh	lr,0x7ff0
8002f252:	16 9c       	mov	r12,r11
8002f254:	14 96       	mov	r6,r10
8002f256:	16 97       	mov	r7,r11
8002f258:	14 94       	mov	r4,r10
8002f25a:	16 95       	mov	r5,r11
8002f25c:	16 99       	mov	r9,r11
8002f25e:	14 98       	mov	r8,r10
8002f260:	e6 1c 7f f0 	andh	r12,0x7ff0,COH
8002f264:	1c 3c       	cp.w	r12,lr
8002f266:	c0 c1       	brne	8002f27e <__ieee754_sqrt+0x32>
8002f268:	14 98       	mov	r8,r10
8002f26a:	16 99       	mov	r9,r11
8002f26c:	e0 a0 09 3e 	rcall	800304e8 <__avr32_f64_mul>
8002f270:	14 98       	mov	r8,r10
8002f272:	16 99       	mov	r9,r11
8002f274:	0c 9a       	mov	r10,r6
8002f276:	0e 9b       	mov	r11,r7
8002f278:	e0 a0 0a f2 	rcall	8003085c <__avr32_f64_add>
8002f27c:	c1 38       	rjmp	8002f2a2 <__ieee754_sqrt+0x56>
8002f27e:	58 0b       	cp.w	r11,0
8002f280:	e0 89 00 14 	brgt	8002f2a8 <__ieee754_sqrt+0x5c>
8002f284:	f9 db c0 1f 	bfextu	r12,r11,0x0,0x1f
8002f288:	14 4c       	or	r12,r10
8002f28a:	e0 80 00 a3 	breq	8002f3d0 <__ieee754_sqrt+0x184>
8002f28e:	58 0b       	cp.w	r11,0
8002f290:	c0 c0       	breq	8002f2a8 <__ieee754_sqrt+0x5c>
8002f292:	14 98       	mov	r8,r10
8002f294:	16 99       	mov	r9,r11
8002f296:	e0 a0 0a 15 	rcall	800306c0 <__avr32_f64_sub>
8002f29a:	14 98       	mov	r8,r10
8002f29c:	16 99       	mov	r9,r11
8002f29e:	e0 a0 0c 6b 	rcall	80030b74 <__avr32_f64_div>
8002f2a2:	14 96       	mov	r6,r10
8002f2a4:	16 97       	mov	r7,r11
8002f2a6:	c9 58       	rjmp	8002f3d0 <__ieee754_sqrt+0x184>
8002f2a8:	f2 0a 14 14 	asr	r10,r9,0x14
8002f2ac:	c0 60       	breq	8002f2b8 <__ieee754_sqrt+0x6c>
8002f2ae:	c1 88       	rjmp	8002f2de <__ieee754_sqrt+0x92>
8002f2b0:	f0 09 16 0b 	lsr	r9,r8,0xb
8002f2b4:	21 5a       	sub	r10,21
8002f2b6:	b5 78       	lsl	r8,0x15
8002f2b8:	58 09       	cp.w	r9,0
8002f2ba:	cf b0       	breq	8002f2b0 <__ieee754_sqrt+0x64>
8002f2bc:	30 0b       	mov	r11,0
8002f2be:	c0 38       	rjmp	8002f2c4 <__ieee754_sqrt+0x78>
8002f2c0:	a1 79       	lsl	r9,0x1
8002f2c2:	2f fb       	sub	r11,-1
8002f2c4:	ed b9 00 14 	bld	r9,0x14
8002f2c8:	cf c1       	brne	8002f2c0 <__ieee754_sqrt+0x74>
8002f2ca:	2f fa       	sub	r10,-1
8002f2cc:	f6 0c 11 20 	rsub	r12,r11,32
8002f2d0:	16 1a       	sub	r10,r11
8002f2d2:	f0 0c 0a 4c 	lsr	r12,r8,r12
8002f2d6:	f0 0b 09 48 	lsl	r8,r8,r11
8002f2da:	f9 e9 10 09 	or	r9,r12,r9
8002f2de:	f3 d9 c0 14 	bfextu	r9,r9,0x0,0x14
8002f2e2:	f4 c6 03 ff 	sub	r6,r10,1023
8002f2e6:	b5 a9       	sbr	r9,0x14
8002f2e8:	ed b6 00 00 	bld	r6,0x0
8002f2ec:	c0 61       	brne	8002f2f8 <__ieee754_sqrt+0xac>
8002f2ee:	f0 0a 16 1f 	lsr	r10,r8,0x1f
8002f2f2:	a1 78       	lsl	r8,0x1
8002f2f4:	f4 09 00 19 	add	r9,r10,r9<<0x1
8002f2f8:	30 07       	mov	r7,0
8002f2fa:	f0 0a 15 01 	lsl	r10,r8,0x1
8002f2fe:	0e 9c       	mov	r12,r7
8002f300:	bf 98       	lsr	r8,0x1f
8002f302:	fc 1b 00 20 	movh	r11,0x20
8002f306:	f0 09 00 18 	add	r8,r8,r9<<0x1
8002f30a:	0e 99       	mov	r9,r7
8002f30c:	f2 0b 00 0e 	add	lr,r9,r11
8002f310:	2f f7       	sub	r7,-1
8002f312:	10 3e       	cp.w	lr,r8
8002f314:	f1 de ea 18 	suble	r8,r8,lr
8002f318:	f9 db ea 0c 	addle	r12,r12,r11
8002f31c:	fd db ea 09 	addle	r9,lr,r11
8002f320:	f4 0e 16 1f 	lsr	lr,r10,0x1f
8002f324:	a1 9b       	lsr	r11,0x1
8002f326:	fc 08 00 18 	add	r8,lr,r8<<0x1
8002f32a:	a1 7a       	lsl	r10,0x1
8002f32c:	59 67       	cp.w	r7,22
8002f32e:	ce f1       	brne	8002f30c <__ieee754_sqrt+0xc0>
8002f330:	30 07       	mov	r7,0
8002f332:	fc 15 80 00 	movh	r5,0x8000
8002f336:	0e 9b       	mov	r11,r7
8002f338:	0e 94       	mov	r4,r7
8002f33a:	0e 92       	mov	r2,r7
8002f33c:	ea 04 00 0e 	add	lr,r5,r4
8002f340:	10 39       	cp.w	r9,r8
8002f342:	c0 95       	brlt	8002f354 <__ieee754_sqrt+0x108>
8002f344:	5f 03       	sreq	r3
8002f346:	14 3e       	cp.w	lr,r10
8002f348:	5f 81       	srls	r1
8002f34a:	e3 e3 00 03 	and	r3,r1,r3
8002f34e:	e4 03 18 00 	cp.b	r3,r2
8002f352:	c1 70       	breq	8002f380 <__ieee754_sqrt+0x134>
8002f354:	1c 93       	mov	r3,lr
8002f356:	fc 05 00 04 	add	r4,lr,r5
8002f35a:	e6 13 80 00 	andh	r3,0x8000,COH
8002f35e:	fc 11 80 00 	movh	r1,0x8000
8002f362:	02 33       	cp.w	r3,r1
8002f364:	c0 61       	brne	8002f370 <__ieee754_sqrt+0x124>
8002f366:	58 04       	cp.w	r4,0
8002f368:	c0 45       	brlt	8002f370 <__ieee754_sqrt+0x124>
8002f36a:	f2 c3 ff ff 	sub	r3,r9,-1
8002f36e:	c0 28       	rjmp	8002f372 <__ieee754_sqrt+0x126>
8002f370:	12 93       	mov	r3,r9
8002f372:	12 18       	sub	r8,r9
8002f374:	0a 0b       	add	r11,r5
8002f376:	1c 3a       	cp.w	r10,lr
8002f378:	f7 b8 03 01 	sublo	r8,1
8002f37c:	06 99       	mov	r9,r3
8002f37e:	1c 1a       	sub	r10,lr
8002f380:	f4 0e 16 1f 	lsr	lr,r10,0x1f
8002f384:	a1 95       	lsr	r5,0x1
8002f386:	2f f7       	sub	r7,-1
8002f388:	fc 08 00 18 	add	r8,lr,r8<<0x1
8002f38c:	a1 7a       	lsl	r10,0x1
8002f38e:	e0 47 00 20 	cp.w	r7,32
8002f392:	cd 51       	brne	8002f33c <__ieee754_sqrt+0xf0>
8002f394:	14 48       	or	r8,r10
8002f396:	c0 a0       	breq	8002f3aa <__ieee754_sqrt+0x15e>
8002f398:	f1 db c0 01 	bfextu	r8,r11,0x0,0x1
8002f39c:	5b fb       	cp.w	r11,-1
8002f39e:	f7 bc 00 ff 	subeq	r12,-1
8002f3a2:	f9 bb 00 00 	moveq	r11,0
8002f3a6:	f1 db e1 0b 	addne	r11,r8,r11
8002f3aa:	a1 9b       	lsr	r11,0x1
8002f3ac:	16 99       	mov	r9,r11
8002f3ae:	bf b9       	sbr	r9,0x1f
8002f3b0:	ec 0a 14 01 	asr	r10,r6,0x1
8002f3b4:	f8 08 14 01 	asr	r8,r12,0x1
8002f3b8:	b5 6a       	lsl	r10,0x14
8002f3ba:	f9 dc c0 01 	bfextu	r12,r12,0x0,0x1
8002f3be:	f2 0b 17 10 	movne	r11,r9
8002f3c2:	fc 19 3f e0 	movh	r9,0x3fe0
8002f3c6:	16 96       	mov	r6,r11
8002f3c8:	12 0a       	add	r10,r9
8002f3ca:	f4 08 00 08 	add	r8,r10,r8
8002f3ce:	10 97       	mov	r7,r8
8002f3d0:	0c 9a       	mov	r10,r6
8002f3d2:	0e 9b       	mov	r11,r7
8002f3d4:	d8 32       	popm	r0-r7,pc
8002f3d6:	d7 03       	nop

8002f3d8 <__kernel_cos>:
8002f3d8:	d4 31       	pushm	r0-r7,lr
8002f3da:	20 6d       	sub	sp,24
8002f3dc:	fa e9 00 08 	st.d	sp[8],r8
8002f3e0:	14 92       	mov	r2,r10
8002f3e2:	16 93       	mov	r3,r11
8002f3e4:	14 96       	mov	r6,r10
8002f3e6:	ef db c0 1f 	bfextu	r7,r11,0x0,0x1f
8002f3ea:	e0 69 ff ff 	mov	r9,65535
8002f3ee:	ea 19 3e 3f 	orh	r9,0x3e3f
8002f3f2:	12 37       	cp.w	r7,r9
8002f3f4:	e0 89 00 09 	brgt	8002f406 <__kernel_cos+0x2e>
8002f3f8:	e0 a0 0a bc 	rcall	80030970 <__avr32_f64_to_s32>
8002f3fc:	c0 51       	brne	8002f406 <__kernel_cos+0x2e>
8002f3fe:	30 0a       	mov	r10,0
8002f400:	fc 1b 3f f0 	movh	r11,0x3ff0
8002f404:	cd b8       	rjmp	8002f5ba <__kernel_cos+0x1e2>
8002f406:	04 98       	mov	r8,r2
8002f408:	06 99       	mov	r9,r3
8002f40a:	04 9a       	mov	r10,r2
8002f40c:	06 9b       	mov	r11,r3
8002f40e:	e0 a0 08 6d 	rcall	800304e8 <__avr32_f64_mul>
8002f412:	e0 68 38 d4 	mov	r8,14548
8002f416:	ea 18 be 88 	orh	r8,0xbe88
8002f41a:	14 94       	mov	r4,r10
8002f41c:	16 95       	mov	r5,r11
8002f41e:	e0 69 fa e9 	mov	r9,64233
8002f422:	ea 19 bd a8 	orh	r9,0xbda8
8002f426:	e0 a0 08 61 	rcall	800304e8 <__avr32_f64_mul>
8002f42a:	e0 68 b1 c4 	mov	r8,45508
8002f42e:	ea 18 bd b4 	orh	r8,0xbdb4
8002f432:	e0 69 ee 9e 	mov	r9,61086
8002f436:	ea 19 3e 21 	orh	r9,0x3e21
8002f43a:	e0 a0 0a 11 	rcall	8003085c <__avr32_f64_add>
8002f43e:	14 98       	mov	r8,r10
8002f440:	16 99       	mov	r9,r11
8002f442:	08 9a       	mov	r10,r4
8002f444:	0a 9b       	mov	r11,r5
8002f446:	e0 a0 08 51 	rcall	800304e8 <__avr32_f64_mul>
8002f44a:	e0 68 52 ad 	mov	r8,21165
8002f44e:	ea 18 80 9c 	orh	r8,0x809c
8002f452:	e0 69 7e 4f 	mov	r9,32335
8002f456:	ea 19 3e 92 	orh	r9,0x3e92
8002f45a:	e0 a0 09 33 	rcall	800306c0 <__avr32_f64_sub>
8002f45e:	14 98       	mov	r8,r10
8002f460:	16 99       	mov	r9,r11
8002f462:	08 9a       	mov	r10,r4
8002f464:	0a 9b       	mov	r11,r5
8002f466:	e0 a0 08 41 	rcall	800304e8 <__avr32_f64_mul>
8002f46a:	e0 68 15 90 	mov	r8,5520
8002f46e:	ea 18 19 cb 	orh	r8,0x19cb
8002f472:	e0 69 01 a0 	mov	r9,416
8002f476:	ea 19 3e fa 	orh	r9,0x3efa
8002f47a:	e0 a0 09 f1 	rcall	8003085c <__avr32_f64_add>
8002f47e:	14 98       	mov	r8,r10
8002f480:	16 99       	mov	r9,r11
8002f482:	08 9a       	mov	r10,r4
8002f484:	0a 9b       	mov	r11,r5
8002f486:	e0 a0 08 31 	rcall	800304e8 <__avr32_f64_mul>
8002f48a:	e0 68 51 77 	mov	r8,20855
8002f48e:	ea 18 16 c1 	orh	r8,0x16c1
8002f492:	e0 69 c1 6c 	mov	r9,49516
8002f496:	ea 19 3f 56 	orh	r9,0x3f56
8002f49a:	e0 a0 09 13 	rcall	800306c0 <__avr32_f64_sub>
8002f49e:	14 98       	mov	r8,r10
8002f4a0:	16 99       	mov	r9,r11
8002f4a2:	08 9a       	mov	r10,r4
8002f4a4:	0a 9b       	mov	r11,r5
8002f4a6:	e0 a0 08 21 	rcall	800304e8 <__avr32_f64_mul>
8002f4aa:	e0 68 55 4c 	mov	r8,21836
8002f4ae:	ea 18 55 55 	orh	r8,0x5555
8002f4b2:	e0 69 55 55 	mov	r9,21845
8002f4b6:	ea 19 3f a5 	orh	r9,0x3fa5
8002f4ba:	e0 a0 09 d1 	rcall	8003085c <__avr32_f64_add>
8002f4be:	14 98       	mov	r8,r10
8002f4c0:	16 99       	mov	r9,r11
8002f4c2:	08 9a       	mov	r10,r4
8002f4c4:	0a 9b       	mov	r11,r5
8002f4c6:	e0 a0 08 11 	rcall	800304e8 <__avr32_f64_mul>
8002f4ca:	fa eb 00 00 	st.d	sp[0],r10
8002f4ce:	e0 68 33 32 	mov	r8,13106
8002f4d2:	ea 18 3f d3 	orh	r8,0x3fd3
8002f4d6:	10 37       	cp.w	r7,r8
8002f4d8:	e0 89 00 2b 	brgt	8002f52e <__kernel_cos+0x156>
8002f4dc:	30 08       	mov	r8,0
8002f4de:	fc 19 3f e0 	movh	r9,0x3fe0
8002f4e2:	08 9a       	mov	r10,r4
8002f4e4:	0a 9b       	mov	r11,r5
8002f4e6:	e0 a0 08 01 	rcall	800304e8 <__avr32_f64_mul>
8002f4ea:	fa e8 00 00 	ld.d	r8,sp[0]
8002f4ee:	14 90       	mov	r0,r10
8002f4f0:	16 91       	mov	r1,r11
8002f4f2:	08 9a       	mov	r10,r4
8002f4f4:	0a 9b       	mov	r11,r5
8002f4f6:	e0 a0 07 f9 	rcall	800304e8 <__avr32_f64_mul>
8002f4fa:	fa e8 00 08 	ld.d	r8,sp[8]
8002f4fe:	16 97       	mov	r7,r11
8002f500:	14 96       	mov	r6,r10
8002f502:	06 9b       	mov	r11,r3
8002f504:	04 9a       	mov	r10,r2
8002f506:	e0 a0 07 f1 	rcall	800304e8 <__avr32_f64_mul>
8002f50a:	14 98       	mov	r8,r10
8002f50c:	16 99       	mov	r9,r11
8002f50e:	0c 9a       	mov	r10,r6
8002f510:	0e 9b       	mov	r11,r7
8002f512:	e0 a0 08 d7 	rcall	800306c0 <__avr32_f64_sub>
8002f516:	14 98       	mov	r8,r10
8002f518:	16 99       	mov	r9,r11
8002f51a:	00 9a       	mov	r10,r0
8002f51c:	02 9b       	mov	r11,r1
8002f51e:	e0 a0 08 d1 	rcall	800306c0 <__avr32_f64_sub>
8002f522:	14 98       	mov	r8,r10
8002f524:	16 99       	mov	r9,r11
8002f526:	30 0a       	mov	r10,0
8002f528:	fc 1b 3f f0 	movh	r11,0x3ff0
8002f52c:	c4 58       	rjmp	8002f5b6 <__kernel_cos+0x1de>
8002f52e:	fc 19 3f e9 	movh	r9,0x3fe9
8002f532:	12 37       	cp.w	r7,r9
8002f534:	e0 8a 00 06 	brle	8002f540 <__kernel_cos+0x168>
8002f538:	30 06       	mov	r6,0
8002f53a:	fc 17 3f d2 	movh	r7,0x3fd2
8002f53e:	c0 88       	rjmp	8002f54e <__kernel_cos+0x176>
8002f540:	fc 1a ff e0 	movh	r10,0xffe0
8002f544:	30 08       	mov	r8,0
8002f546:	ee 0a 00 09 	add	r9,r7,r10
8002f54a:	10 96       	mov	r6,r8
8002f54c:	12 97       	mov	r7,r9
8002f54e:	0c 98       	mov	r8,r6
8002f550:	0e 99       	mov	r9,r7
8002f552:	30 0a       	mov	r10,0
8002f554:	fc 1b 3f f0 	movh	r11,0x3ff0
8002f558:	e0 a0 08 b4 	rcall	800306c0 <__avr32_f64_sub>
8002f55c:	30 08       	mov	r8,0
8002f55e:	fa eb 00 10 	st.d	sp[16],r10
8002f562:	fc 19 3f e0 	movh	r9,0x3fe0
8002f566:	08 9a       	mov	r10,r4
8002f568:	0a 9b       	mov	r11,r5
8002f56a:	e0 a0 07 bf 	rcall	800304e8 <__avr32_f64_mul>
8002f56e:	0c 98       	mov	r8,r6
8002f570:	0e 99       	mov	r9,r7
8002f572:	e0 a0 08 a7 	rcall	800306c0 <__avr32_f64_sub>
8002f576:	fa e8 00 00 	ld.d	r8,sp[0]
8002f57a:	14 90       	mov	r0,r10
8002f57c:	16 91       	mov	r1,r11
8002f57e:	08 9a       	mov	r10,r4
8002f580:	0a 9b       	mov	r11,r5
8002f582:	e0 a0 07 b3 	rcall	800304e8 <__avr32_f64_mul>
8002f586:	fa e8 00 08 	ld.d	r8,sp[8]
8002f58a:	16 97       	mov	r7,r11
8002f58c:	14 96       	mov	r6,r10
8002f58e:	06 9b       	mov	r11,r3
8002f590:	04 9a       	mov	r10,r2
8002f592:	e0 a0 07 ab 	rcall	800304e8 <__avr32_f64_mul>
8002f596:	14 98       	mov	r8,r10
8002f598:	16 99       	mov	r9,r11
8002f59a:	0c 9a       	mov	r10,r6
8002f59c:	0e 9b       	mov	r11,r7
8002f59e:	e0 a0 08 91 	rcall	800306c0 <__avr32_f64_sub>
8002f5a2:	14 98       	mov	r8,r10
8002f5a4:	16 99       	mov	r9,r11
8002f5a6:	00 9a       	mov	r10,r0
8002f5a8:	02 9b       	mov	r11,r1
8002f5aa:	e0 a0 08 8b 	rcall	800306c0 <__avr32_f64_sub>
8002f5ae:	14 98       	mov	r8,r10
8002f5b0:	16 99       	mov	r9,r11
8002f5b2:	fa ea 00 10 	ld.d	r10,sp[16]
8002f5b6:	e0 a0 08 85 	rcall	800306c0 <__avr32_f64_sub>
8002f5ba:	2f ad       	sub	sp,-24
8002f5bc:	d8 32       	popm	r0-r7,pc
8002f5be:	d7 03       	nop

8002f5c0 <__kernel_rem_pio2>:
8002f5c0:	d4 31       	pushm	r0-r7,lr
8002f5c2:	fa cd 02 70 	sub	sp,sp,624
8002f5c6:	50 b9       	stdsp	sp[0x2c],r9
8002f5c8:	fa f9 02 94 	ld.w	r9,sp[660]
8002f5cc:	50 68       	stdsp	sp[0x18],r8
8002f5ce:	50 c9       	stdsp	sp[0x30],r9
8002f5d0:	16 94       	mov	r4,r11
8002f5d2:	40 b8       	lddsp	r8,sp[0x2c]
8002f5d4:	4b e9       	lddpc	r9,8002f6cc <__kernel_rem_pio2+0x10c>
8002f5d6:	20 18       	sub	r8,1
8002f5d8:	40 6b       	lddsp	r11,sp[0x18]
8002f5da:	f2 0b 03 29 	ld.w	r9,r9[r11<<0x2]
8002f5de:	50 58       	stdsp	sp[0x14],r8
8002f5e0:	50 39       	stdsp	sp[0xc],r9
8002f5e2:	30 08       	mov	r8,0
8002f5e4:	f4 c9 00 03 	sub	r9,r10,3
8002f5e8:	10 97       	mov	r7,r8
8002f5ea:	31 83       	mov	r3,24
8002f5ec:	f2 03 0c 02 	divs	r2,r9,r3
8002f5f0:	f0 02 0c 48 	max	r8,r8,r2
8002f5f4:	40 59       	lddsp	r9,sp[0x14]
8002f5f6:	10 96       	mov	r6,r8
8002f5f8:	10 93       	mov	r3,r8
8002f5fa:	50 78       	stdsp	sp[0x1c],r8
8002f5fc:	40 31       	lddsp	r1,sp[0xc]
8002f5fe:	5c d6       	com	r6
8002f600:	12 13       	sub	r3,r9
8002f602:	ec 06 00 16 	add	r6,r6,r6<<0x1
8002f606:	40 c8       	lddsp	r8,sp[0x30]
8002f608:	50 ac       	stdsp	sp[0x28],r12
8002f60a:	12 01       	add	r1,r9
8002f60c:	f4 06 00 36 	add	r6,r10,r6<<0x3
8002f610:	fa c2 fe 80 	sub	r2,sp,-384
8002f614:	f0 03 00 25 	add	r5,r8,r3<<0x2
8002f618:	c0 d8       	rjmp	8002f632 <__kernel_rem_pio2+0x72>
8002f61a:	ee 03 00 08 	add	r8,r7,r3
8002f61e:	c0 47       	brpl	8002f626 <__kernel_rem_pio2+0x66>
8002f620:	30 0a       	mov	r10,0
8002f622:	30 0b       	mov	r11,0
8002f624:	c0 48       	rjmp	8002f62c <__kernel_rem_pio2+0x6c>
8002f626:	6a 0c       	ld.w	r12,r5[0x0]
8002f628:	e0 a0 09 bb 	rcall	8003099e <__avr32_s32_to_f64>
8002f62c:	a5 2a       	st.d	r2++,r10
8002f62e:	2f f7       	sub	r7,-1
8002f630:	2f c5       	sub	r5,-4
8002f632:	02 37       	cp.w	r7,r1
8002f634:	fe 9a ff f3 	brle	8002f61a <__kernel_rem_pio2+0x5a>
8002f638:	fa c0 ff c0 	sub	r0,sp,-64
8002f63c:	40 53       	lddsp	r3,sp[0x14]
8002f63e:	30 02       	mov	r2,0
8002f640:	fa cc fe 80 	sub	r12,sp,-384
8002f644:	0c 95       	mov	r5,r6
8002f646:	c1 b8       	rjmp	8002f67c <__kernel_rem_pio2+0xbc>
8002f648:	ee e8 00 00 	ld.d	r8,r7[0]
8002f64c:	50 0c       	stdsp	sp[0x0],r12
8002f64e:	20 87       	sub	r7,8
8002f650:	a3 0b       	ld.d	r10,r1++
8002f652:	e0 a0 07 4b 	rcall	800304e8 <__avr32_f64_mul>
8002f656:	14 98       	mov	r8,r10
8002f658:	16 99       	mov	r9,r11
8002f65a:	fa ea 00 04 	ld.d	r10,sp[4]
8002f65e:	e0 a0 08 ff 	rcall	8003085c <__avr32_f64_add>
8002f662:	2f f6       	sub	r6,-1
8002f664:	fa eb 00 04 	st.d	sp[4],r10
8002f668:	40 0c       	lddsp	r12,sp[0x0]
8002f66a:	40 5b       	lddsp	r11,sp[0x14]
8002f66c:	16 36       	cp.w	r6,r11
8002f66e:	fe 9a ff ed 	brle	8002f648 <__kernel_rem_pio2+0x88>
8002f672:	fa e8 00 04 	ld.d	r8,sp[4]
8002f676:	2f f2       	sub	r2,-1
8002f678:	a1 28       	st.d	r0++,r8
8002f67a:	2f f3       	sub	r3,-1
8002f67c:	40 38       	lddsp	r8,sp[0xc]
8002f67e:	10 32       	cp.w	r2,r8
8002f680:	e0 89 00 0b 	brgt	8002f696 <__kernel_rem_pio2+0xd6>
8002f684:	30 0a       	mov	r10,0
8002f686:	30 0b       	mov	r11,0
8002f688:	40 a1       	lddsp	r1,sp[0x28]
8002f68a:	f8 03 00 37 	add	r7,r12,r3<<0x3
8002f68e:	fa eb 00 04 	st.d	sp[4],r10
8002f692:	30 06       	mov	r6,0
8002f694:	ce bb       	rjmp	8002f66a <__kernel_rem_pio2+0xaa>
8002f696:	40 38       	lddsp	r8,sp[0xc]
8002f698:	fa ca fd e0 	sub	r10,sp,-544
8002f69c:	20 18       	sub	r8,1
8002f69e:	0a 96       	mov	r6,r5
8002f6a0:	f4 08 00 2a 	add	r10,r10,r8<<0x2
8002f6a4:	40 37       	lddsp	r7,sp[0xc]
8002f6a6:	50 fa       	stdsp	sp[0x3c],r10
8002f6a8:	50 e4       	stdsp	sp[0x38],r4
8002f6aa:	fa c9 fd 90 	sub	r9,sp,-624
8002f6ae:	f2 07 00 38 	add	r8,r9,r7<<0x3
8002f6b2:	ee c5 00 01 	sub	r5,r7,1
8002f6b6:	f0 e2 fd d0 	ld.d	r2,r8[-560]
8002f6ba:	fa c1 fd e0 	sub	r1,sp,-544
8002f6be:	fa c8 ff c0 	sub	r8,sp,-64
8002f6c2:	50 11       	stdsp	sp[0x4],r1
8002f6c4:	f0 05 00 34 	add	r4,r8,r5<<0x3
8002f6c8:	0e 90       	mov	r0,r7
8002f6ca:	c2 58       	rjmp	8002f714 <__kernel_rem_pio2+0x154>
8002f6cc:	80 03       	ld.sh	r3,r0[0x0]
8002f6ce:	1d 40       	ld.w	r0,--lr
8002f6d0:	e0 a0 07 0c 	rcall	800304e8 <__avr32_f64_mul>
8002f6d4:	e0 a0 09 4e 	rcall	80030970 <__avr32_f64_to_s32>
8002f6d8:	e0 a0 09 63 	rcall	8003099e <__avr32_s32_to_f64>
8002f6dc:	30 08       	mov	r8,0
8002f6de:	fc 19 c1 70 	movh	r9,0xc170
8002f6e2:	fa eb 00 20 	st.d	sp[32],r10
8002f6e6:	e0 a0 07 01 	rcall	800304e8 <__avr32_f64_mul>
8002f6ea:	14 98       	mov	r8,r10
8002f6ec:	16 99       	mov	r9,r11
8002f6ee:	04 9a       	mov	r10,r2
8002f6f0:	06 9b       	mov	r11,r3
8002f6f2:	e0 a0 08 b5 	rcall	8003085c <__avr32_f64_add>
8002f6f6:	e0 a0 09 3d 	rcall	80030970 <__avr32_f64_to_s32>
8002f6fa:	40 1a       	lddsp	r10,sp[0x4]
8002f6fc:	14 ac       	st.w	r10++,r12
8002f6fe:	e8 e8 00 00 	ld.d	r8,r4[0]
8002f702:	50 1a       	stdsp	sp[0x4],r10
8002f704:	20 10       	sub	r0,1
8002f706:	fa ea 00 20 	ld.d	r10,sp[32]
8002f70a:	20 84       	sub	r4,8
8002f70c:	e0 a0 08 a8 	rcall	8003085c <__avr32_f64_add>
8002f710:	14 92       	mov	r2,r10
8002f712:	16 93       	mov	r3,r11
8002f714:	30 08       	mov	r8,0
8002f716:	fc 19 3e 70 	movh	r9,0x3e70
8002f71a:	04 9a       	mov	r10,r2
8002f71c:	06 9b       	mov	r11,r3
8002f71e:	58 00       	cp.w	r0,0
8002f720:	fe 99 ff d8 	brgt	8002f6d0 <__kernel_rem_pio2+0x110>
8002f724:	0c 9c       	mov	r12,r6
8002f726:	e0 a0 06 67 	rcall	800303f4 <scalbn>
8002f72a:	30 08       	mov	r8,0
8002f72c:	fc 19 3f c0 	movh	r9,0x3fc0
8002f730:	14 92       	mov	r2,r10
8002f732:	16 93       	mov	r3,r11
8002f734:	e0 a0 06 da 	rcall	800304e8 <__avr32_f64_mul>
8002f738:	e0 a0 05 2e 	rcall	80030194 <floor>
8002f73c:	30 08       	mov	r8,0
8002f73e:	fc 19 c0 20 	movh	r9,0xc020
8002f742:	e0 a0 06 d3 	rcall	800304e8 <__avr32_f64_mul>
8002f746:	14 98       	mov	r8,r10
8002f748:	16 99       	mov	r9,r11
8002f74a:	04 9a       	mov	r10,r2
8002f74c:	06 9b       	mov	r11,r3
8002f74e:	e0 a0 08 87 	rcall	8003085c <__avr32_f64_add>
8002f752:	14 92       	mov	r2,r10
8002f754:	16 93       	mov	r3,r11
8002f756:	e0 a0 09 0d 	rcall	80030970 <__avr32_f64_to_s32>
8002f75a:	18 90       	mov	r0,r12
8002f75c:	e0 a0 09 21 	rcall	8003099e <__avr32_s32_to_f64>
8002f760:	14 98       	mov	r8,r10
8002f762:	16 99       	mov	r9,r11
8002f764:	04 9a       	mov	r10,r2
8002f766:	06 9b       	mov	r11,r3
8002f768:	e0 a0 07 ac 	rcall	800306c0 <__avr32_f64_sub>
8002f76c:	fa eb 00 04 	st.d	sp[4],r10
8002f770:	58 06       	cp.w	r6,0
8002f772:	e0 8a 00 18 	brle	8002f7a2 <__kernel_rem_pio2+0x1e2>
8002f776:	fa c8 fd 90 	sub	r8,sp,-624
8002f77a:	ec 0b 11 18 	rsub	r11,r6,24
8002f77e:	f0 05 00 29 	add	r9,r8,r5<<0x2
8002f782:	ec 0c 11 17 	rsub	r12,r6,23
8002f786:	f2 fa ff b0 	ld.w	r10,r9[-80]
8002f78a:	f4 0b 08 48 	asr	r8,r10,r11
8002f78e:	f0 0b 09 4b 	lsl	r11,r8,r11
8002f792:	10 00       	add	r0,r8
8002f794:	f4 0b 01 0b 	sub	r11,r10,r11
8002f798:	f3 4b ff b0 	st.w	r9[-80],r11
8002f79c:	f6 0c 08 44 	asr	r4,r11,r12
8002f7a0:	c1 58       	rjmp	8002f7ca <__kernel_rem_pio2+0x20a>
8002f7a2:	58 06       	cp.w	r6,0
8002f7a4:	c0 91       	brne	8002f7b6 <__kernel_rem_pio2+0x1f6>
8002f7a6:	fa cb fd 90 	sub	r11,sp,-624
8002f7aa:	f6 05 00 28 	add	r8,r11,r5<<0x2
8002f7ae:	f0 f4 ff b0 	ld.w	r4,r8[-80]
8002f7b2:	b7 54       	asr	r4,0x17
8002f7b4:	c0 b8       	rjmp	8002f7ca <__kernel_rem_pio2+0x20a>
8002f7b6:	30 08       	mov	r8,0
8002f7b8:	fc 19 3f e0 	movh	r9,0x3fe0
8002f7bc:	e0 a0 09 74 	rcall	80030aa4 <__avr32_f64_cmp_ge>
8002f7c0:	c0 31       	brne	8002f7c6 <__kernel_rem_pio2+0x206>
8002f7c2:	30 04       	mov	r4,0
8002f7c4:	c5 58       	rjmp	8002f86e <__kernel_rem_pio2+0x2ae>
8002f7c6:	30 24       	mov	r4,2
8002f7c8:	c0 48       	rjmp	8002f7d0 <__kernel_rem_pio2+0x210>
8002f7ca:	58 04       	cp.w	r4,0
8002f7cc:	e0 8a 00 51 	brle	8002f86e <__kernel_rem_pio2+0x2ae>
8002f7d0:	30 08       	mov	r8,0
8002f7d2:	2f f0       	sub	r0,-1
8002f7d4:	10 93       	mov	r3,r8
8002f7d6:	c1 48       	rjmp	8002f7fe <__kernel_rem_pio2+0x23e>
8002f7d8:	62 09       	ld.w	r9,r1[0x0]
8002f7da:	58 03       	cp.w	r3,0
8002f7dc:	c0 81       	brne	8002f7ec <__kernel_rem_pio2+0x22c>
8002f7de:	58 09       	cp.w	r9,0
8002f7e0:	c0 d0       	breq	8002f7fa <__kernel_rem_pio2+0x23a>
8002f7e2:	fc 1a 01 00 	movh	r10,0x100
8002f7e6:	12 1a       	sub	r10,r9
8002f7e8:	83 0a       	st.w	r1[0x0],r10
8002f7ea:	c0 78       	rjmp	8002f7f8 <__kernel_rem_pio2+0x238>
8002f7ec:	e0 6b ff ff 	mov	r11,65535
8002f7f0:	ea 1b 00 ff 	orh	r11,0xff
8002f7f4:	12 1b       	sub	r11,r9
8002f7f6:	83 0b       	st.w	r1[0x0],r11
8002f7f8:	30 13       	mov	r3,1
8002f7fa:	2f f8       	sub	r8,-1
8002f7fc:	2f c1       	sub	r1,-4
8002f7fe:	0e 38       	cp.w	r8,r7
8002f800:	ce c5       	brlt	8002f7d8 <__kernel_rem_pio2+0x218>
8002f802:	58 06       	cp.w	r6,0
8002f804:	e0 8a 00 1a 	brle	8002f838 <__kernel_rem_pio2+0x278>
8002f808:	58 16       	cp.w	r6,1
8002f80a:	c0 40       	breq	8002f812 <__kernel_rem_pio2+0x252>
8002f80c:	58 26       	cp.w	r6,2
8002f80e:	c1 51       	brne	8002f838 <__kernel_rem_pio2+0x278>
8002f810:	c0 a8       	rjmp	8002f824 <__kernel_rem_pio2+0x264>
8002f812:	fa ca fd 90 	sub	r10,sp,-624
8002f816:	f4 05 00 28 	add	r8,r10,r5<<0x2
8002f81a:	f0 f9 ff b0 	ld.w	r9,r8[-80]
8002f81e:	f3 d9 c0 17 	bfextu	r9,r9,0x0,0x17
8002f822:	c0 98       	rjmp	8002f834 <__kernel_rem_pio2+0x274>
8002f824:	fa c9 fd 90 	sub	r9,sp,-624
8002f828:	f2 05 00 28 	add	r8,r9,r5<<0x2
8002f82c:	f0 f9 ff b0 	ld.w	r9,r8[-80]
8002f830:	f3 d9 c0 16 	bfextu	r9,r9,0x0,0x16
8002f834:	f1 49 ff b0 	st.w	r8[-80],r9
8002f838:	58 24       	cp.w	r4,2
8002f83a:	c1 a1       	brne	8002f86e <__kernel_rem_pio2+0x2ae>
8002f83c:	fa e8 00 04 	ld.d	r8,sp[4]
8002f840:	30 0a       	mov	r10,0
8002f842:	fc 1b 3f f0 	movh	r11,0x3ff0
8002f846:	e0 a0 07 3d 	rcall	800306c0 <__avr32_f64_sub>
8002f84a:	fa eb 00 04 	st.d	sp[4],r10
8002f84e:	58 03       	cp.w	r3,0
8002f850:	c0 f0       	breq	8002f86e <__kernel_rem_pio2+0x2ae>
8002f852:	0c 9c       	mov	r12,r6
8002f854:	30 0a       	mov	r10,0
8002f856:	fc 1b 3f f0 	movh	r11,0x3ff0
8002f85a:	e0 a0 05 cd 	rcall	800303f4 <scalbn>
8002f85e:	14 98       	mov	r8,r10
8002f860:	16 99       	mov	r9,r11
8002f862:	fa ea 00 04 	ld.d	r10,sp[4]
8002f866:	e0 a0 07 2d 	rcall	800306c0 <__avr32_f64_sub>
8002f86a:	fa eb 00 04 	st.d	sp[4],r10
8002f86e:	30 08       	mov	r8,0
8002f870:	30 09       	mov	r9,0
8002f872:	fa ea 00 04 	ld.d	r10,sp[4]
8002f876:	e0 a0 09 04 	rcall	80030a7e <__avr32_f64_cmp_eq>
8002f87a:	c6 40       	breq	8002f942 <__kernel_rem_pio2+0x382>
8002f87c:	fa c8 fd e0 	sub	r8,sp,-544
8002f880:	f0 05 00 29 	add	r9,r8,r5<<0x2
8002f884:	30 08       	mov	r8,0
8002f886:	c0 58       	rjmp	8002f890 <__kernel_rem_pio2+0x2d0>
8002f888:	72 0a       	ld.w	r10,r9[0x0]
8002f88a:	20 15       	sub	r5,1
8002f88c:	14 48       	or	r8,r10
8002f88e:	20 49       	sub	r9,4
8002f890:	40 3b       	lddsp	r11,sp[0xc]
8002f892:	16 35       	cp.w	r5,r11
8002f894:	cf a4       	brge	8002f888 <__kernel_rem_pio2+0x2c8>
8002f896:	58 08       	cp.w	r8,0
8002f898:	c5 b1       	brne	8002f94e <__kernel_rem_pio2+0x38e>
8002f89a:	40 f9       	lddsp	r9,sp[0x3c]
8002f89c:	30 18       	mov	r8,1
8002f89e:	c0 28       	rjmp	8002f8a2 <__kernel_rem_pio2+0x2e2>
8002f8a0:	2f f8       	sub	r8,-1
8002f8a2:	72 0a       	ld.w	r10,r9[0x0]
8002f8a4:	20 49       	sub	r9,4
8002f8a6:	58 0a       	cp.w	r10,0
8002f8a8:	cf c0       	breq	8002f8a0 <__kernel_rem_pio2+0x2e0>
8002f8aa:	0e 08       	add	r8,r7
8002f8ac:	40 ba       	lddsp	r10,sp[0x2c]
8002f8ae:	50 d8       	stdsp	sp[0x34],r8
8002f8b0:	ee 0a 00 02 	add	r2,r7,r10
8002f8b4:	fa c8 fe 80 	sub	r8,sp,-384
8002f8b8:	04 91       	mov	r1,r2
8002f8ba:	ee c5 ff ff 	sub	r5,r7,-1
8002f8be:	40 73       	lddsp	r3,sp[0x1c]
8002f8c0:	40 c9       	lddsp	r9,sp[0x30]
8002f8c2:	2f f3       	sub	r3,-1
8002f8c4:	fa cb ff c0 	sub	r11,sp,-64
8002f8c8:	0e 03       	add	r3,r7
8002f8ca:	f6 05 00 3b 	add	r11,r11,r5<<0x3
8002f8ce:	f2 03 00 23 	add	r3,r9,r3<<0x2
8002f8d2:	50 8b       	stdsp	sp[0x20],r11
8002f8d4:	f0 02 00 32 	add	r2,r8,r2<<0x3
8002f8d8:	0c 94       	mov	r4,r6
8002f8da:	c2 d8       	rjmp	8002f934 <__kernel_rem_pio2+0x374>
8002f8dc:	66 0c       	ld.w	r12,r3[0x0]
8002f8de:	e0 a0 08 60 	rcall	8003099e <__avr32_s32_to_f64>
8002f8e2:	30 08       	mov	r8,0
8002f8e4:	e4 eb 00 00 	st.d	r2[0],r10
8002f8e8:	30 09       	mov	r9,0
8002f8ea:	fa ca fe 80 	sub	r10,sp,-384
8002f8ee:	40 a0       	lddsp	r0,sp[0x28]
8002f8f0:	f4 01 00 37 	add	r7,r10,r1<<0x3
8002f8f4:	30 06       	mov	r6,0
8002f8f6:	fa e9 00 04 	st.d	sp[4],r8
8002f8fa:	c1 08       	rjmp	8002f91a <__kernel_rem_pio2+0x35a>
8002f8fc:	ee e8 00 00 	ld.d	r8,r7[0]
8002f900:	a1 0b       	ld.d	r10,r0++
8002f902:	20 87       	sub	r7,8
8002f904:	e0 a0 05 f2 	rcall	800304e8 <__avr32_f64_mul>
8002f908:	2f f6       	sub	r6,-1
8002f90a:	14 98       	mov	r8,r10
8002f90c:	16 99       	mov	r9,r11
8002f90e:	fa ea 00 04 	ld.d	r10,sp[4]
8002f912:	e0 a0 07 a5 	rcall	8003085c <__avr32_f64_add>
8002f916:	fa eb 00 04 	st.d	sp[4],r10
8002f91a:	40 58       	lddsp	r8,sp[0x14]
8002f91c:	10 36       	cp.w	r6,r8
8002f91e:	fe 9a ff ef 	brle	8002f8fc <__kernel_rem_pio2+0x33c>
8002f922:	40 89       	lddsp	r9,sp[0x20]
8002f924:	fa ea 00 04 	ld.d	r10,sp[4]
8002f928:	2f f5       	sub	r5,-1
8002f92a:	b3 2a       	st.d	r9++,r10
8002f92c:	2f c3       	sub	r3,-4
8002f92e:	50 89       	stdsp	sp[0x20],r9
8002f930:	2f 82       	sub	r2,-8
8002f932:	2f f1       	sub	r1,-1
8002f934:	40 d8       	lddsp	r8,sp[0x34]
8002f936:	10 35       	cp.w	r5,r8
8002f938:	fe 9a ff d2 	brle	8002f8dc <__kernel_rem_pio2+0x31c>
8002f93c:	08 96       	mov	r6,r4
8002f93e:	10 97       	mov	r7,r8
8002f940:	cb 5a       	rjmp	8002f6aa <__kernel_rem_pio2+0xea>
8002f942:	50 50       	stdsp	sp[0x14],r0
8002f944:	08 95       	mov	r5,r4
8002f946:	40 e4       	lddsp	r4,sp[0x38]
8002f948:	58 0c       	cp.w	r12,0
8002f94a:	c1 30       	breq	8002f970 <__kernel_rem_pio2+0x3b0>
8002f94c:	c0 48       	rjmp	8002f954 <__kernel_rem_pio2+0x394>
8002f94e:	08 95       	mov	r5,r4
8002f950:	50 50       	stdsp	sp[0x14],r0
8002f952:	40 e4       	lddsp	r4,sp[0x38]
8002f954:	20 17       	sub	r7,1
8002f956:	fa c8 fd e0 	sub	r8,sp,-544
8002f95a:	21 86       	sub	r6,24
8002f95c:	f0 07 00 28 	add	r8,r8,r7<<0x2
8002f960:	c0 38       	rjmp	8002f966 <__kernel_rem_pio2+0x3a6>
8002f962:	20 17       	sub	r7,1
8002f964:	21 86       	sub	r6,24
8002f966:	70 09       	ld.w	r9,r8[0x0]
8002f968:	20 48       	sub	r8,4
8002f96a:	58 09       	cp.w	r9,0
8002f96c:	cf b0       	breq	8002f962 <__kernel_rem_pio2+0x3a2>
8002f96e:	c4 48       	rjmp	8002f9f6 <__kernel_rem_pio2+0x436>
8002f970:	fa ea 00 04 	ld.d	r10,sp[4]
8002f974:	ec 0c 11 00 	rsub	r12,r6,0
8002f978:	e0 a0 05 3e 	rcall	800303f4 <scalbn>
8002f97c:	30 08       	mov	r8,0
8002f97e:	14 90       	mov	r0,r10
8002f980:	16 91       	mov	r1,r11
8002f982:	fc 19 41 70 	movh	r9,0x4170
8002f986:	ee 03 15 02 	lsl	r3,r7,0x2
8002f98a:	e0 a0 08 8d 	rcall	80030aa4 <__avr32_f64_cmp_ge>
8002f98e:	c2 a0       	breq	8002f9e2 <__kernel_rem_pio2+0x422>
8002f990:	30 08       	mov	r8,0
8002f992:	fc 19 3e 70 	movh	r9,0x3e70
8002f996:	00 9a       	mov	r10,r0
8002f998:	02 9b       	mov	r11,r1
8002f99a:	e0 a0 05 a7 	rcall	800304e8 <__avr32_f64_mul>
8002f99e:	e0 a0 07 e9 	rcall	80030970 <__avr32_f64_to_s32>
8002f9a2:	e0 a0 07 fe 	rcall	8003099e <__avr32_s32_to_f64>
8002f9a6:	30 08       	mov	r8,0
8002f9a8:	fc 19 c1 70 	movh	r9,0xc170
8002f9ac:	fa eb 00 04 	st.d	sp[4],r10
8002f9b0:	e0 a0 05 9c 	rcall	800304e8 <__avr32_f64_mul>
8002f9b4:	16 99       	mov	r9,r11
8002f9b6:	14 98       	mov	r8,r10
8002f9b8:	02 9b       	mov	r11,r1
8002f9ba:	00 9a       	mov	r10,r0
8002f9bc:	e0 a0 07 50 	rcall	8003085c <__avr32_f64_add>
8002f9c0:	e0 a0 07 d8 	rcall	80030970 <__avr32_f64_to_s32>
8002f9c4:	fa cb fd 90 	sub	r11,sp,-624
8002f9c8:	f6 03 00 03 	add	r3,r11,r3
8002f9cc:	2f f7       	sub	r7,-1
8002f9ce:	e7 4c ff b0 	st.w	r3[-80],r12
8002f9d2:	fa c9 fd 90 	sub	r9,sp,-624
8002f9d6:	fa ea 00 04 	ld.d	r10,sp[4]
8002f9da:	2e 86       	sub	r6,-24
8002f9dc:	f2 07 00 23 	add	r3,r9,r7<<0x2
8002f9e0:	c0 78       	rjmp	8002f9ee <__kernel_rem_pio2+0x42e>
8002f9e2:	fa c8 fd 90 	sub	r8,sp,-624
8002f9e6:	00 9a       	mov	r10,r0
8002f9e8:	f0 03 00 03 	add	r3,r8,r3
8002f9ec:	02 9b       	mov	r11,r1
8002f9ee:	e0 a0 07 c1 	rcall	80030970 <__avr32_f64_to_s32>
8002f9f2:	e7 4c ff b0 	st.w	r3[-80],r12
8002f9f6:	0c 9c       	mov	r12,r6
8002f9f8:	30 0a       	mov	r10,0
8002f9fa:	fc 1b 3f f0 	movh	r11,0x3ff0
8002f9fe:	fa c3 fd e0 	sub	r3,sp,-544
8002fa02:	e0 a0 04 f9 	rcall	800303f4 <scalbn>
8002fa06:	fa c2 ff c0 	sub	r2,sp,-64
8002fa0a:	0e 96       	mov	r6,r7
8002fa0c:	14 90       	mov	r0,r10
8002fa0e:	16 91       	mov	r1,r11
8002fa10:	e6 07 00 23 	add	r3,r3,r7<<0x2
8002fa14:	e4 07 00 32 	add	r2,r2,r7<<0x3
8002fa18:	c1 88       	rjmp	8002fa48 <__kernel_rem_pio2+0x488>
8002fa1a:	66 0c       	ld.w	r12,r3[0x0]
8002fa1c:	e0 a0 07 c1 	rcall	8003099e <__avr32_s32_to_f64>
8002fa20:	14 98       	mov	r8,r10
8002fa22:	16 99       	mov	r9,r11
8002fa24:	00 9a       	mov	r10,r0
8002fa26:	02 9b       	mov	r11,r1
8002fa28:	e0 a0 05 60 	rcall	800304e8 <__avr32_f64_mul>
8002fa2c:	30 08       	mov	r8,0
8002fa2e:	e4 eb 00 00 	st.d	r2[0],r10
8002fa32:	fc 19 3e 70 	movh	r9,0x3e70
8002fa36:	00 9a       	mov	r10,r0
8002fa38:	02 9b       	mov	r11,r1
8002fa3a:	20 16       	sub	r6,1
8002fa3c:	e0 a0 05 56 	rcall	800304e8 <__avr32_f64_mul>
8002fa40:	20 43       	sub	r3,4
8002fa42:	20 82       	sub	r2,8
8002fa44:	14 90       	mov	r0,r10
8002fa46:	16 91       	mov	r1,r11
8002fa48:	58 06       	cp.w	r6,0
8002fa4a:	ce 84       	brge	8002fa1a <__kernel_rem_pio2+0x45a>
8002fa4c:	fa cc ff 20 	sub	r12,sp,-224
8002fa50:	0a 91       	mov	r1,r5
8002fa52:	0e 93       	mov	r3,r7
8002fa54:	30 02       	mov	r2,0
8002fa56:	18 96       	mov	r6,r12
8002fa58:	0e 95       	mov	r5,r7
8002fa5a:	c1 c8       	rjmp	8002fa92 <__kernel_rem_pio2+0x4d2>
8002fa5c:	ad 09       	ld.d	r8,r6++
8002fa5e:	2f f7       	sub	r7,-1
8002fa60:	a1 0b       	ld.d	r10,r0++
8002fa62:	e0 a0 05 43 	rcall	800304e8 <__avr32_f64_mul>
8002fa66:	14 98       	mov	r8,r10
8002fa68:	16 99       	mov	r9,r11
8002fa6a:	fa ea 00 04 	ld.d	r10,sp[4]
8002fa6e:	e0 a0 06 f7 	rcall	8003085c <__avr32_f64_add>
8002fa72:	fa eb 00 04 	st.d	sp[4],r10
8002fa76:	40 3b       	lddsp	r11,sp[0xc]
8002fa78:	16 37       	cp.w	r7,r11
8002fa7a:	e0 89 00 05 	brgt	8002fa84 <__kernel_rem_pio2+0x4c4>
8002fa7e:	04 37       	cp.w	r7,r2
8002fa80:	fe 9a ff ee 	brle	8002fa5c <__kernel_rem_pio2+0x49c>
8002fa84:	06 96       	mov	r6,r3
8002fa86:	fa e8 00 04 	ld.d	r8,sp[4]
8002fa8a:	40 73       	lddsp	r3,sp[0x1c]
8002fa8c:	ad 28       	st.d	r6++,r8
8002fa8e:	20 13       	sub	r3,1
8002fa90:	2f f2       	sub	r2,-1
8002fa92:	58 03       	cp.w	r3,0
8002fa94:	c0 f5       	brlt	8002fab2 <__kernel_rem_pio2+0x4f2>
8002fa96:	fa c8 ff c0 	sub	r8,sp,-64
8002fa9a:	30 0a       	mov	r10,0
8002fa9c:	f0 03 00 3c 	add	r12,r8,r3<<0x3
8002faa0:	30 0b       	mov	r11,0
8002faa2:	50 73       	stdsp	sp[0x1c],r3
8002faa4:	4d 00       	lddpc	r0,8002fbe4 <__kernel_rem_pio2+0x624>
8002faa6:	0c 93       	mov	r3,r6
8002faa8:	fa eb 00 04 	st.d	sp[4],r10
8002faac:	30 07       	mov	r7,0
8002faae:	18 96       	mov	r6,r12
8002fab0:	ce 3b       	rjmp	8002fa76 <__kernel_rem_pio2+0x4b6>
8002fab2:	0a 97       	mov	r7,r5
8002fab4:	40 6a       	lddsp	r10,sp[0x18]
8002fab6:	02 95       	mov	r5,r1
8002fab8:	58 2a       	cp.w	r10,2
8002faba:	e0 89 00 07 	brgt	8002fac8 <__kernel_rem_pio2+0x508>
8002fabe:	58 1a       	cp.w	r10,1
8002fac0:	c1 14       	brge	8002fae2 <__kernel_rem_pio2+0x522>
8002fac2:	58 0a       	cp.w	r10,0
8002fac4:	c1 70       	breq	8002faf2 <__kernel_rem_pio2+0x532>
8002fac6:	ce 68       	rjmp	8002fc92 <__kernel_rem_pio2+0x6d2>
8002fac8:	40 69       	lddsp	r9,sp[0x18]
8002faca:	58 39       	cp.w	r9,3
8002facc:	e0 81 00 e3 	brne	8002fc92 <__kernel_rem_pio2+0x6d2>
8002fad0:	ee c6 00 01 	sub	r6,r7,1
8002fad4:	fa c8 ff 20 	sub	r8,sp,-224
8002fad8:	0e 92       	mov	r2,r7
8002fada:	f0 06 00 36 	add	r6,r8,r6<<0x3
8002fade:	0c 93       	mov	r3,r6
8002fae0:	c7 d8       	rjmp	8002fbda <__kernel_rem_pio2+0x61a>
8002fae2:	fa c6 ff 20 	sub	r6,sp,-224
8002fae6:	30 0c       	mov	r12,0
8002fae8:	ec 07 00 36 	add	r6,r6,r7<<0x3
8002faec:	0e 93       	mov	r3,r7
8002faee:	18 9a       	mov	r10,r12
8002faf0:	c2 98       	rjmp	8002fb42 <__kernel_rem_pio2+0x582>
8002faf2:	40 6c       	lddsp	r12,sp[0x18]
8002faf4:	0e 96       	mov	r6,r7
8002faf6:	fa c8 ff 20 	sub	r8,sp,-224
8002fafa:	18 9a       	mov	r10,r12
8002fafc:	f0 07 00 37 	add	r7,r8,r7<<0x3
8002fb00:	c0 a8       	rjmp	8002fb14 <__kernel_rem_pio2+0x554>
8002fb02:	ee e8 00 00 	ld.d	r8,r7[0]
8002fb06:	18 9b       	mov	r11,r12
8002fb08:	20 87       	sub	r7,8
8002fb0a:	06 9a       	mov	r10,r3
8002fb0c:	20 16       	sub	r6,1
8002fb0e:	e0 a0 06 a7 	rcall	8003085c <__avr32_f64_add>
8002fb12:	16 9c       	mov	r12,r11
8002fb14:	14 93       	mov	r3,r10
8002fb16:	58 06       	cp.w	r6,0
8002fb18:	cf 54       	brge	8002fb02 <__kernel_rem_pio2+0x542>
8002fb1a:	18 98       	mov	r8,r12
8002fb1c:	ee 18 80 00 	eorh	r8,0x8000
8002fb20:	58 05       	cp.w	r5,0
8002fb22:	f0 0c 17 10 	movne	r12,r8
8002fb26:	14 98       	mov	r8,r10
8002fb28:	18 99       	mov	r9,r12
8002fb2a:	e8 e9 00 00 	st.d	r4[0],r8
8002fb2e:	cb 28       	rjmp	8002fc92 <__kernel_rem_pio2+0x6d2>
8002fb30:	ec e8 00 00 	ld.d	r8,r6[0]
8002fb34:	18 9b       	mov	r11,r12
8002fb36:	04 9a       	mov	r10,r2
8002fb38:	20 13       	sub	r3,1
8002fb3a:	e0 a0 06 91 	rcall	8003085c <__avr32_f64_add>
8002fb3e:	20 86       	sub	r6,8
8002fb40:	16 9c       	mov	r12,r11
8002fb42:	14 92       	mov	r2,r10
8002fb44:	58 03       	cp.w	r3,0
8002fb46:	cf 54       	brge	8002fb30 <__kernel_rem_pio2+0x570>
8002fb48:	18 9b       	mov	r11,r12
8002fb4a:	18 98       	mov	r8,r12
8002fb4c:	ee 18 80 00 	eorh	r8,0x8000
8002fb50:	58 05       	cp.w	r5,0
8002fb52:	f0 0c 17 10 	movne	r12,r8
8002fb56:	18 93       	mov	r3,r12
8002fb58:	14 92       	mov	r2,r10
8002fb5a:	16 99       	mov	r9,r11
8002fb5c:	e8 e3 00 00 	st.d	r4[0],r2
8002fb60:	14 98       	mov	r8,r10
8002fb62:	fa c3 ff 18 	sub	r3,sp,-232
8002fb66:	fa ea 00 e0 	ld.d	r10,sp[224]
8002fb6a:	30 16       	mov	r6,1
8002fb6c:	e0 a0 05 aa 	rcall	800306c0 <__avr32_f64_sub>
8002fb70:	c0 78       	rjmp	8002fb7e <__kernel_rem_pio2+0x5be>
8002fb72:	2f f6       	sub	r6,-1
8002fb74:	a7 09       	ld.d	r8,r3++
8002fb76:	18 9b       	mov	r11,r12
8002fb78:	04 9a       	mov	r10,r2
8002fb7a:	e0 a0 06 71 	rcall	8003085c <__avr32_f64_add>
8002fb7e:	16 9c       	mov	r12,r11
8002fb80:	14 92       	mov	r2,r10
8002fb82:	0e 36       	cp.w	r6,r7
8002fb84:	fe 9a ff f7 	brle	8002fb72 <__kernel_rem_pio2+0x5b2>
8002fb88:	16 98       	mov	r8,r11
8002fb8a:	ee 18 80 00 	eorh	r8,0x8000
8002fb8e:	58 05       	cp.w	r5,0
8002fb90:	f0 0c 17 10 	movne	r12,r8
8002fb94:	14 98       	mov	r8,r10
8002fb96:	18 99       	mov	r9,r12
8002fb98:	e8 e9 00 08 	st.d	r4[8],r8
8002fb9c:	c7 b8       	rjmp	8002fc92 <__kernel_rem_pio2+0x6d2>
8002fb9e:	e6 e0 00 00 	ld.d	r0,r3[0]
8002fba2:	e6 e8 00 08 	ld.d	r8,r3[8]
8002fba6:	00 9a       	mov	r10,r0
8002fba8:	02 9b       	mov	r11,r1
8002fbaa:	e0 a0 06 59 	rcall	8003085c <__avr32_f64_add>
8002fbae:	fa eb 00 0c 	st.d	sp[12],r10
8002fbb2:	14 98       	mov	r8,r10
8002fbb4:	16 99       	mov	r9,r11
8002fbb6:	00 9a       	mov	r10,r0
8002fbb8:	02 9b       	mov	r11,r1
8002fbba:	e0 a0 05 83 	rcall	800306c0 <__avr32_f64_sub>
8002fbbe:	14 98       	mov	r8,r10
8002fbc0:	16 99       	mov	r9,r11
8002fbc2:	e6 ea 00 08 	ld.d	r10,r3[8]
8002fbc6:	e0 a0 06 4b 	rcall	8003085c <__avr32_f64_add>
8002fbca:	fa e8 00 0c 	ld.d	r8,sp[12]
8002fbce:	e6 eb 00 08 	st.d	r3[8],r10
8002fbd2:	e6 e9 00 00 	st.d	r3[0],r8
8002fbd6:	20 12       	sub	r2,1
8002fbd8:	20 83       	sub	r3,8
8002fbda:	58 02       	cp.w	r2,0
8002fbdc:	fe 99 ff e1 	brgt	8002fb9e <__kernel_rem_pio2+0x5de>
8002fbe0:	0e 93       	mov	r3,r7
8002fbe2:	c2 18       	rjmp	8002fc24 <__kernel_rem_pio2+0x664>
8002fbe4:	80 03       	ld.sh	r3,r0[0x0]
8002fbe6:	1d 50       	ld.sh	r0,--lr
8002fbe8:	ec e0 00 00 	ld.d	r0,r6[0]
8002fbec:	ec e8 00 08 	ld.d	r8,r6[8]
8002fbf0:	00 9a       	mov	r10,r0
8002fbf2:	02 9b       	mov	r11,r1
8002fbf4:	e0 a0 06 34 	rcall	8003085c <__avr32_f64_add>
8002fbf8:	fa eb 00 0c 	st.d	sp[12],r10
8002fbfc:	14 98       	mov	r8,r10
8002fbfe:	16 99       	mov	r9,r11
8002fc00:	00 9a       	mov	r10,r0
8002fc02:	02 9b       	mov	r11,r1
8002fc04:	e0 a0 05 5e 	rcall	800306c0 <__avr32_f64_sub>
8002fc08:	14 98       	mov	r8,r10
8002fc0a:	16 99       	mov	r9,r11
8002fc0c:	ec ea 00 08 	ld.d	r10,r6[8]
8002fc10:	e0 a0 06 26 	rcall	8003085c <__avr32_f64_add>
8002fc14:	fa e8 00 0c 	ld.d	r8,sp[12]
8002fc18:	ec eb 00 08 	st.d	r6[8],r10
8002fc1c:	ec e9 00 00 	st.d	r6[0],r8
8002fc20:	20 13       	sub	r3,1
8002fc22:	20 86       	sub	r6,8
8002fc24:	58 13       	cp.w	r3,1
8002fc26:	fe 99 ff e1 	brgt	8002fbe8 <__kernel_rem_pio2+0x628>
8002fc2a:	0e 96       	mov	r6,r7
8002fc2c:	fa c8 ff 20 	sub	r8,sp,-224
8002fc30:	30 0c       	mov	r12,0
8002fc32:	f0 07 00 37 	add	r7,r8,r7<<0x3
8002fc36:	18 9a       	mov	r10,r12
8002fc38:	c0 a8       	rjmp	8002fc4c <__kernel_rem_pio2+0x68c>
8002fc3a:	ee e8 00 00 	ld.d	r8,r7[0]
8002fc3e:	18 9b       	mov	r11,r12
8002fc40:	20 87       	sub	r7,8
8002fc42:	06 9a       	mov	r10,r3
8002fc44:	20 16       	sub	r6,1
8002fc46:	e0 a0 06 0b 	rcall	8003085c <__avr32_f64_add>
8002fc4a:	16 9c       	mov	r12,r11
8002fc4c:	14 93       	mov	r3,r10
8002fc4e:	58 16       	cp.w	r6,1
8002fc50:	fe 99 ff f5 	brgt	8002fc3a <__kernel_rem_pio2+0x67a>
8002fc54:	58 05       	cp.w	r5,0
8002fc56:	c0 e1       	brne	8002fc72 <__kernel_rem_pio2+0x6b2>
8002fc58:	fa e8 00 e0 	ld.d	r8,sp[224]
8002fc5c:	e8 e9 00 00 	st.d	r4[0],r8
8002fc60:	fa e8 00 e8 	ld.d	r8,sp[232]
8002fc64:	e8 e9 00 08 	st.d	r4[8],r8
8002fc68:	18 99       	mov	r9,r12
8002fc6a:	14 98       	mov	r8,r10
8002fc6c:	e8 e9 00 10 	st.d	r4[16],r8
8002fc70:	c1 18       	rjmp	8002fc92 <__kernel_rem_pio2+0x6d2>
8002fc72:	89 5a       	st.w	r4[0x14],r10
8002fc74:	ee 1c 80 00 	eorh	r12,0x8000
8002fc78:	89 4c       	st.w	r4[0x10],r12
8002fc7a:	43 88       	lddsp	r8,sp[0xe0]
8002fc7c:	ee 18 80 00 	eorh	r8,0x8000
8002fc80:	89 08       	st.w	r4[0x0],r8
8002fc82:	43 98       	lddsp	r8,sp[0xe4]
8002fc84:	89 18       	st.w	r4[0x4],r8
8002fc86:	43 a8       	lddsp	r8,sp[0xe8]
8002fc88:	ee 18 80 00 	eorh	r8,0x8000
8002fc8c:	89 28       	st.w	r4[0x8],r8
8002fc8e:	43 b8       	lddsp	r8,sp[0xec]
8002fc90:	89 38       	st.w	r4[0xc],r8
8002fc92:	40 58       	lddsp	r8,sp[0x14]
8002fc94:	f9 d8 c0 03 	bfextu	r12,r8,0x0,0x3
8002fc98:	fe 3d fd 90 	sub	sp,-624
8002fc9c:	d8 32       	popm	r0-r7,pc
8002fc9e:	d7 03       	nop

8002fca0 <__kernel_sin>:
8002fca0:	d4 31       	pushm	r0-r7,lr
8002fca2:	20 4d       	sub	sp,16
8002fca4:	fa e9 00 08 	st.d	sp[8],r8
8002fca8:	50 0c       	stdsp	sp[0x0],r12
8002fcaa:	14 96       	mov	r6,r10
8002fcac:	16 97       	mov	r7,r11
8002fcae:	f1 db c0 1f 	bfextu	r8,r11,0x0,0x1f
8002fcb2:	e0 69 ff ff 	mov	r9,65535
8002fcb6:	ea 19 3e 3f 	orh	r9,0x3e3f
8002fcba:	12 38       	cp.w	r8,r9
8002fcbc:	e0 89 00 06 	brgt	8002fcc8 <__kernel_sin+0x28>
8002fcc0:	e0 a0 06 58 	rcall	80030970 <__avr32_f64_to_s32>
8002fcc4:	e0 80 00 b3 	breq	8002fe2a <__kernel_sin+0x18a>
8002fcc8:	0c 98       	mov	r8,r6
8002fcca:	0e 99       	mov	r9,r7
8002fccc:	0c 9a       	mov	r10,r6
8002fcce:	0e 9b       	mov	r11,r7
8002fcd0:	e0 a0 04 0c 	rcall	800304e8 <__avr32_f64_mul>
8002fcd4:	0c 98       	mov	r8,r6
8002fcd6:	14 94       	mov	r4,r10
8002fcd8:	16 95       	mov	r5,r11
8002fcda:	0e 99       	mov	r9,r7
8002fcdc:	e0 a0 04 06 	rcall	800304e8 <__avr32_f64_mul>
8002fce0:	e0 68 d5 7c 	mov	r8,54652
8002fce4:	ea 18 5a cf 	orh	r8,0x5acf
8002fce8:	e0 69 d9 3a 	mov	r9,55610
8002fcec:	ea 19 3d e5 	orh	r9,0x3de5
8002fcf0:	14 90       	mov	r0,r10
8002fcf2:	16 91       	mov	r1,r11
8002fcf4:	08 9a       	mov	r10,r4
8002fcf6:	0a 9b       	mov	r11,r5
8002fcf8:	e0 a0 03 f8 	rcall	800304e8 <__avr32_f64_mul>
8002fcfc:	e0 68 9c eb 	mov	r8,40171
8002fd00:	ea 18 8a 2b 	orh	r8,0x8a2b
8002fd04:	e0 69 e5 e6 	mov	r9,58854
8002fd08:	ea 19 3e 5a 	orh	r9,0x3e5a
8002fd0c:	e0 a0 04 da 	rcall	800306c0 <__avr32_f64_sub>
8002fd10:	14 98       	mov	r8,r10
8002fd12:	16 99       	mov	r9,r11
8002fd14:	08 9a       	mov	r10,r4
8002fd16:	0a 9b       	mov	r11,r5
8002fd18:	e0 a0 03 e8 	rcall	800304e8 <__avr32_f64_mul>
8002fd1c:	e0 68 fe 7d 	mov	r8,65149
8002fd20:	ea 18 57 b1 	orh	r8,0x57b1
8002fd24:	e0 69 1d e3 	mov	r9,7651
8002fd28:	ea 19 3e c7 	orh	r9,0x3ec7
8002fd2c:	e0 a0 05 98 	rcall	8003085c <__avr32_f64_add>
8002fd30:	14 98       	mov	r8,r10
8002fd32:	16 99       	mov	r9,r11
8002fd34:	08 9a       	mov	r10,r4
8002fd36:	0a 9b       	mov	r11,r5
8002fd38:	e0 a0 03 d8 	rcall	800304e8 <__avr32_f64_mul>
8002fd3c:	e0 68 61 d5 	mov	r8,25045
8002fd40:	ea 18 19 c1 	orh	r8,0x19c1
8002fd44:	e0 69 01 a0 	mov	r9,416
8002fd48:	ea 19 3f 2a 	orh	r9,0x3f2a
8002fd4c:	e0 a0 04 ba 	rcall	800306c0 <__avr32_f64_sub>
8002fd50:	14 98       	mov	r8,r10
8002fd52:	16 99       	mov	r9,r11
8002fd54:	08 9a       	mov	r10,r4
8002fd56:	0a 9b       	mov	r11,r5
8002fd58:	e0 a0 03 c8 	rcall	800304e8 <__avr32_f64_mul>
8002fd5c:	e0 68 f8 a6 	mov	r8,63654
8002fd60:	ea 18 11 10 	orh	r8,0x1110
8002fd64:	e0 69 11 11 	mov	r9,4369
8002fd68:	ea 19 3f 81 	orh	r9,0x3f81
8002fd6c:	e0 a0 05 78 	rcall	8003085c <__avr32_f64_add>
8002fd70:	40 08       	lddsp	r8,sp[0x0]
8002fd72:	14 92       	mov	r2,r10
8002fd74:	16 93       	mov	r3,r11
8002fd76:	58 08       	cp.w	r8,0
8002fd78:	c1 e1       	brne	8002fdb4 <__kernel_sin+0x114>
8002fd7a:	14 98       	mov	r8,r10
8002fd7c:	06 99       	mov	r9,r3
8002fd7e:	08 9a       	mov	r10,r4
8002fd80:	0a 9b       	mov	r11,r5
8002fd82:	e0 a0 03 b3 	rcall	800304e8 <__avr32_f64_mul>
8002fd86:	e0 68 55 49 	mov	r8,21833
8002fd8a:	ea 18 55 55 	orh	r8,0x5555
8002fd8e:	e0 69 55 55 	mov	r9,21845
8002fd92:	ea 19 3f c5 	orh	r9,0x3fc5
8002fd96:	e0 a0 04 95 	rcall	800306c0 <__avr32_f64_sub>
8002fd9a:	14 98       	mov	r8,r10
8002fd9c:	16 99       	mov	r9,r11
8002fd9e:	00 9a       	mov	r10,r0
8002fda0:	02 9b       	mov	r11,r1
8002fda2:	e0 a0 03 a3 	rcall	800304e8 <__avr32_f64_mul>
8002fda6:	14 98       	mov	r8,r10
8002fda8:	16 99       	mov	r9,r11
8002fdaa:	0c 9a       	mov	r10,r6
8002fdac:	0e 9b       	mov	r11,r7
8002fdae:	e0 a0 05 57 	rcall	8003085c <__avr32_f64_add>
8002fdb2:	c3 a8       	rjmp	8002fe26 <__kernel_sin+0x186>
8002fdb4:	30 08       	mov	r8,0
8002fdb6:	fc 19 3f e0 	movh	r9,0x3fe0
8002fdba:	fa ea 00 08 	ld.d	r10,sp[8]
8002fdbe:	e0 a0 03 95 	rcall	800304e8 <__avr32_f64_mul>
8002fdc2:	04 98       	mov	r8,r2
8002fdc4:	fa eb 00 00 	st.d	sp[0],r10
8002fdc8:	06 99       	mov	r9,r3
8002fdca:	00 9a       	mov	r10,r0
8002fdcc:	02 9b       	mov	r11,r1
8002fdce:	e0 a0 03 8d 	rcall	800304e8 <__avr32_f64_mul>
8002fdd2:	14 98       	mov	r8,r10
8002fdd4:	16 99       	mov	r9,r11
8002fdd6:	fa ea 00 00 	ld.d	r10,sp[0]
8002fdda:	e0 a0 04 73 	rcall	800306c0 <__avr32_f64_sub>
8002fdde:	14 98       	mov	r8,r10
8002fde0:	16 99       	mov	r9,r11
8002fde2:	08 9a       	mov	r10,r4
8002fde4:	0a 9b       	mov	r11,r5
8002fde6:	e0 a0 03 81 	rcall	800304e8 <__avr32_f64_mul>
8002fdea:	fa e8 00 08 	ld.d	r8,sp[8]
8002fdee:	e0 a0 04 69 	rcall	800306c0 <__avr32_f64_sub>
8002fdf2:	e0 68 55 49 	mov	r8,21833
8002fdf6:	ea 18 55 55 	orh	r8,0x5555
8002fdfa:	14 94       	mov	r4,r10
8002fdfc:	16 95       	mov	r5,r11
8002fdfe:	e0 69 55 55 	mov	r9,21845
8002fe02:	ea 19 3f c5 	orh	r9,0x3fc5
8002fe06:	00 9a       	mov	r10,r0
8002fe08:	02 9b       	mov	r11,r1
8002fe0a:	e0 a0 03 6f 	rcall	800304e8 <__avr32_f64_mul>
8002fe0e:	14 98       	mov	r8,r10
8002fe10:	16 99       	mov	r9,r11
8002fe12:	08 9a       	mov	r10,r4
8002fe14:	0a 9b       	mov	r11,r5
8002fe16:	e0 a0 05 23 	rcall	8003085c <__avr32_f64_add>
8002fe1a:	14 98       	mov	r8,r10
8002fe1c:	16 99       	mov	r9,r11
8002fe1e:	0c 9a       	mov	r10,r6
8002fe20:	0e 9b       	mov	r11,r7
8002fe22:	e0 a0 04 4f 	rcall	800306c0 <__avr32_f64_sub>
8002fe26:	14 96       	mov	r6,r10
8002fe28:	16 97       	mov	r7,r11
8002fe2a:	0c 9a       	mov	r10,r6
8002fe2c:	0e 9b       	mov	r11,r7
8002fe2e:	2f cd       	sub	sp,-16
8002fe30:	d8 32       	popm	r0-r7,pc
8002fe32:	d7 03       	nop

8002fe34 <atan>:
8002fe34:	d4 31       	pushm	r0-r7,lr
8002fe36:	20 1d       	sub	sp,4
8002fe38:	50 0b       	stdsp	sp[0x0],r11
8002fe3a:	16 96       	mov	r6,r11
8002fe3c:	14 97       	mov	r7,r10
8002fe3e:	e7 db c0 1f 	bfextu	r3,r11,0x0,0x1f
8002fe42:	e0 68 ff ff 	mov	r8,65535
8002fe46:	ea 18 44 0f 	orh	r8,0x440f
8002fe4a:	10 33       	cp.w	r3,r8
8002fe4c:	e0 8a 00 24 	brle	8002fe94 <atan+0x60>
8002fe50:	fc 1c 7f f0 	movh	r12,0x7ff0
8002fe54:	18 33       	cp.w	r3,r12
8002fe56:	e0 89 00 08 	brgt	8002fe66 <atan+0x32>
8002fe5a:	5f 0c       	sreq	r12
8002fe5c:	58 0a       	cp.w	r10,0
8002fe5e:	5f 18       	srne	r8
8002fe60:	f9 e8 00 08 	and	r8,r12,r8
8002fe64:	c0 80       	breq	8002fe74 <atan+0x40>
8002fe66:	0c 9b       	mov	r11,r6
8002fe68:	0e 9a       	mov	r10,r7
8002fe6a:	0c 99       	mov	r9,r6
8002fe6c:	0e 98       	mov	r8,r7
8002fe6e:	e0 a0 04 f7 	rcall	8003085c <__avr32_f64_add>
8002fe72:	c5 99       	rjmp	80030124 <atan+0x2f0>
8002fe74:	e0 68 21 fb 	mov	r8,8699
8002fe78:	ea 18 bf f9 	orh	r8,0xbff9
8002fe7c:	e0 66 21 fb 	mov	r6,8699
8002fe80:	ea 16 3f f9 	orh	r6,0x3ff9
8002fe84:	e0 67 2d 18 	mov	r7,11544
8002fe88:	ea 17 54 44 	orh	r7,0x5444
8002fe8c:	58 0b       	cp.w	r11,0
8002fe8e:	f0 06 17 a0 	movle	r6,r8
8002fe92:	c6 d9       	rjmp	8003016c <atan+0x338>
8002fe94:	e0 68 ff ff 	mov	r8,65535
8002fe98:	ea 18 3f db 	orh	r8,0x3fdb
8002fe9c:	10 33       	cp.w	r3,r8
8002fe9e:	e0 89 00 1d 	brgt	8002fed8 <atan+0xa4>
8002fea2:	e0 6c ff ff 	mov	r12,65535
8002fea6:	ea 1c 3e 1f 	orh	r12,0x3e1f
8002feaa:	18 33       	cp.w	r3,r12
8002feac:	e0 89 00 73 	brgt	8002ff92 <atan+0x15e>
8002feb0:	e0 68 75 9c 	mov	r8,30108
8002feb4:	ea 18 88 00 	orh	r8,0x8800
8002feb8:	e0 69 e4 3c 	mov	r9,58428
8002febc:	ea 19 7e 37 	orh	r9,0x7e37
8002fec0:	0c 9b       	mov	r11,r6
8002fec2:	e0 a0 04 cd 	rcall	8003085c <__avr32_f64_add>
8002fec6:	14 98       	mov	r8,r10
8002fec8:	16 99       	mov	r9,r11
8002feca:	30 0a       	mov	r10,0
8002fecc:	fc 1b 3f f0 	movh	r11,0x3ff0
8002fed0:	e0 a0 06 1e 	rcall	80030b0c <__avr32_f64_cmp_lt>
8002fed4:	c5 f0       	breq	8002ff92 <atan+0x15e>
8002fed6:	c4 b9       	rjmp	8003016c <atan+0x338>
8002fed8:	0c 9b       	mov	r11,r6
8002feda:	c5 1d       	rcall	8003017c <fabs>
8002fedc:	e0 68 ff ff 	mov	r8,65535
8002fee0:	ea 18 3f f2 	orh	r8,0x3ff2
8002fee4:	14 94       	mov	r4,r10
8002fee6:	16 95       	mov	r5,r11
8002fee8:	10 33       	cp.w	r3,r8
8002feea:	e0 89 00 33 	brgt	8002ff50 <atan+0x11c>
8002feee:	e0 6c ff ff 	mov	r12,65535
8002fef2:	ea 1c 3f e5 	orh	r12,0x3fe5
8002fef6:	18 33       	cp.w	r3,r12
8002fef8:	e0 89 00 14 	brgt	8002ff20 <atan+0xec>
8002fefc:	0a 99       	mov	r9,r5
8002fefe:	14 98       	mov	r8,r10
8002ff00:	e0 a0 04 ae 	rcall	8003085c <__avr32_f64_add>
8002ff04:	30 08       	mov	r8,0
8002ff06:	fc 19 3f f0 	movh	r9,0x3ff0
8002ff0a:	e0 a0 03 db 	rcall	800306c0 <__avr32_f64_sub>
8002ff0e:	30 08       	mov	r8,0
8002ff10:	14 96       	mov	r6,r10
8002ff12:	16 97       	mov	r7,r11
8002ff14:	08 9a       	mov	r10,r4
8002ff16:	0a 9b       	mov	r11,r5
8002ff18:	fc 19 40 00 	movh	r9,0x4000
8002ff1c:	30 05       	mov	r5,0
8002ff1e:	c0 e8       	rjmp	8002ff3a <atan+0x106>
8002ff20:	30 08       	mov	r8,0
8002ff22:	fc 19 3f f0 	movh	r9,0x3ff0
8002ff26:	e0 a0 03 cd 	rcall	800306c0 <__avr32_f64_sub>
8002ff2a:	30 08       	mov	r8,0
8002ff2c:	14 96       	mov	r6,r10
8002ff2e:	16 97       	mov	r7,r11
8002ff30:	08 9a       	mov	r10,r4
8002ff32:	0a 9b       	mov	r11,r5
8002ff34:	fc 19 3f f0 	movh	r9,0x3ff0
8002ff38:	30 15       	mov	r5,1
8002ff3a:	e0 a0 04 91 	rcall	8003085c <__avr32_f64_add>
8002ff3e:	14 98       	mov	r8,r10
8002ff40:	16 99       	mov	r9,r11
8002ff42:	0c 9a       	mov	r10,r6
8002ff44:	0e 9b       	mov	r11,r7
8002ff46:	e0 a0 06 17 	rcall	80030b74 <__avr32_f64_div>
8002ff4a:	16 96       	mov	r6,r11
8002ff4c:	14 97       	mov	r7,r10
8002ff4e:	c2 38       	rjmp	8002ff94 <atan+0x160>
8002ff50:	e0 68 7f ff 	mov	r8,32767
8002ff54:	ea 18 40 03 	orh	r8,0x4003
8002ff58:	10 33       	cp.w	r3,r8
8002ff5a:	e0 89 00 15 	brgt	8002ff84 <atan+0x150>
8002ff5e:	30 08       	mov	r8,0
8002ff60:	fc 19 3f f8 	movh	r9,0x3ff8
8002ff64:	e0 a0 03 ae 	rcall	800306c0 <__avr32_f64_sub>
8002ff68:	30 08       	mov	r8,0
8002ff6a:	16 97       	mov	r7,r11
8002ff6c:	fc 19 3f f8 	movh	r9,0x3ff8
8002ff70:	0a 9b       	mov	r11,r5
8002ff72:	14 96       	mov	r6,r10
8002ff74:	08 9a       	mov	r10,r4
8002ff76:	e0 a0 02 b9 	rcall	800304e8 <__avr32_f64_mul>
8002ff7a:	30 08       	mov	r8,0
8002ff7c:	fc 19 3f f0 	movh	r9,0x3ff0
8002ff80:	30 25       	mov	r5,2
8002ff82:	cd cb       	rjmp	8002ff3a <atan+0x106>
8002ff84:	14 98       	mov	r8,r10
8002ff86:	0a 99       	mov	r9,r5
8002ff88:	30 0a       	mov	r10,0
8002ff8a:	fc 1b bf f0 	movh	r11,0xbff0
8002ff8e:	30 35       	mov	r5,3
8002ff90:	cd bb       	rjmp	8002ff46 <atan+0x112>
8002ff92:	3f f5       	mov	r5,-1
8002ff94:	0c 99       	mov	r9,r6
8002ff96:	0e 98       	mov	r8,r7
8002ff98:	0c 9b       	mov	r11,r6
8002ff9a:	0e 9a       	mov	r10,r7
8002ff9c:	e0 a0 02 a6 	rcall	800304e8 <__avr32_f64_mul>
8002ffa0:	16 91       	mov	r1,r11
8002ffa2:	14 90       	mov	r0,r10
8002ffa4:	02 99       	mov	r9,r1
8002ffa6:	14 98       	mov	r8,r10
8002ffa8:	e0 a0 02 a0 	rcall	800304e8 <__avr32_f64_mul>
8002ffac:	e0 68 da 11 	mov	r8,55825
8002ffb0:	ea 18 e3 22 	orh	r8,0xe322
8002ffb4:	14 92       	mov	r2,r10
8002ffb6:	16 93       	mov	r3,r11
8002ffb8:	e0 69 ad 3a 	mov	r9,44346
8002ffbc:	ea 19 3f 90 	orh	r9,0x3f90
8002ffc0:	e0 a0 02 94 	rcall	800304e8 <__avr32_f64_mul>
8002ffc4:	e0 68 0d eb 	mov	r8,3563
8002ffc8:	ea 18 24 76 	orh	r8,0x2476
8002ffcc:	e0 69 7b 4b 	mov	r9,31563
8002ffd0:	ea 19 3f a9 	orh	r9,0x3fa9
8002ffd4:	e0 a0 04 44 	rcall	8003085c <__avr32_f64_add>
8002ffd8:	14 98       	mov	r8,r10
8002ffda:	16 99       	mov	r9,r11
8002ffdc:	04 9a       	mov	r10,r2
8002ffde:	06 9b       	mov	r11,r3
8002ffe0:	e0 a0 02 84 	rcall	800304e8 <__avr32_f64_mul>
8002ffe4:	e0 68 3d 51 	mov	r8,15697
8002ffe8:	ea 18 a0 d0 	orh	r8,0xa0d0
8002ffec:	e0 69 0d 66 	mov	r9,3430
8002fff0:	ea 19 3f b1 	orh	r9,0x3fb1
8002fff4:	e0 a0 04 34 	rcall	8003085c <__avr32_f64_add>
8002fff8:	14 98       	mov	r8,r10
8002fffa:	16 99       	mov	r9,r11
8002fffc:	04 9a       	mov	r10,r2
8002fffe:	06 9b       	mov	r11,r3
80030000:	e0 a0 02 74 	rcall	800304e8 <__avr32_f64_mul>
80030004:	e0 68 20 6e 	mov	r8,8302
80030008:	ea 18 c5 4c 	orh	r8,0xc54c
8003000c:	e0 69 45 cd 	mov	r9,17869
80030010:	ea 19 3f b7 	orh	r9,0x3fb7
80030014:	e0 a0 04 24 	rcall	8003085c <__avr32_f64_add>
80030018:	14 98       	mov	r8,r10
8003001a:	16 99       	mov	r9,r11
8003001c:	04 9a       	mov	r10,r2
8003001e:	06 9b       	mov	r11,r3
80030020:	e0 a0 02 64 	rcall	800304e8 <__avr32_f64_mul>
80030024:	e0 68 83 ff 	mov	r8,33791
80030028:	ea 18 92 00 	orh	r8,0x9200
8003002c:	e0 69 49 24 	mov	r9,18724
80030030:	ea 19 3f c2 	orh	r9,0x3fc2
80030034:	e0 a0 04 14 	rcall	8003085c <__avr32_f64_add>
80030038:	14 98       	mov	r8,r10
8003003a:	16 99       	mov	r9,r11
8003003c:	04 9a       	mov	r10,r2
8003003e:	06 9b       	mov	r11,r3
80030040:	e0 a0 02 54 	rcall	800304e8 <__avr32_f64_mul>
80030044:	e0 68 55 0d 	mov	r8,21773
80030048:	ea 18 55 55 	orh	r8,0x5555
8003004c:	e0 69 55 55 	mov	r9,21845
80030050:	ea 19 3f d5 	orh	r9,0x3fd5
80030054:	e0 a0 04 04 	rcall	8003085c <__avr32_f64_add>
80030058:	14 98       	mov	r8,r10
8003005a:	16 99       	mov	r9,r11
8003005c:	00 9a       	mov	r10,r0
8003005e:	02 9b       	mov	r11,r1
80030060:	e0 a0 02 44 	rcall	800304e8 <__avr32_f64_mul>
80030064:	e0 68 6c 2f 	mov	r8,27695
80030068:	ea 18 2c 6a 	orh	r8,0x2c6a
8003006c:	e0 69 b4 44 	mov	r9,46148
80030070:	ea 19 bf a2 	orh	r9,0xbfa2
80030074:	14 90       	mov	r0,r10
80030076:	16 91       	mov	r1,r11
80030078:	04 9a       	mov	r10,r2
8003007a:	06 9b       	mov	r11,r3
8003007c:	e0 a0 02 36 	rcall	800304e8 <__avr32_f64_mul>
80030080:	e0 68 fd 9a 	mov	r8,64922
80030084:	ea 18 52 de 	orh	r8,0x52de
80030088:	e0 69 de 2d 	mov	r9,56877
8003008c:	ea 19 3f ad 	orh	r9,0x3fad
80030090:	e0 a0 03 18 	rcall	800306c0 <__avr32_f64_sub>
80030094:	14 98       	mov	r8,r10
80030096:	16 99       	mov	r9,r11
80030098:	04 9a       	mov	r10,r2
8003009a:	06 9b       	mov	r11,r3
8003009c:	e0 a0 02 26 	rcall	800304e8 <__avr32_f64_mul>
800300a0:	e0 68 9a 6d 	mov	r8,39533
800300a4:	ea 18 af 74 	orh	r8,0xaf74
800300a8:	e0 69 b0 f2 	mov	r9,45298
800300ac:	ea 19 3f b3 	orh	r9,0x3fb3
800300b0:	e0 a0 03 08 	rcall	800306c0 <__avr32_f64_sub>
800300b4:	14 98       	mov	r8,r10
800300b6:	16 99       	mov	r9,r11
800300b8:	04 9a       	mov	r10,r2
800300ba:	06 9b       	mov	r11,r3
800300bc:	e0 a0 02 16 	rcall	800304e8 <__avr32_f64_mul>
800300c0:	e0 68 16 71 	mov	r8,5745
800300c4:	ea 18 fe 23 	orh	r8,0xfe23
800300c8:	e0 69 71 c6 	mov	r9,29126
800300cc:	ea 19 3f bc 	orh	r9,0x3fbc
800300d0:	e0 a0 02 f8 	rcall	800306c0 <__avr32_f64_sub>
800300d4:	14 98       	mov	r8,r10
800300d6:	16 99       	mov	r9,r11
800300d8:	04 9a       	mov	r10,r2
800300da:	06 9b       	mov	r11,r3
800300dc:	e0 a0 02 06 	rcall	800304e8 <__avr32_f64_mul>
800300e0:	e0 68 eb c4 	mov	r8,60356
800300e4:	ea 18 99 98 	orh	r8,0x9998
800300e8:	e0 69 99 99 	mov	r9,39321
800300ec:	ea 19 3f c9 	orh	r9,0x3fc9
800300f0:	e0 a0 02 e8 	rcall	800306c0 <__avr32_f64_sub>
800300f4:	14 98       	mov	r8,r10
800300f6:	16 99       	mov	r9,r11
800300f8:	04 9a       	mov	r10,r2
800300fa:	06 9b       	mov	r11,r3
800300fc:	cf 6d       	rcall	800304e8 <__avr32_f64_mul>
800300fe:	14 98       	mov	r8,r10
80030100:	16 99       	mov	r9,r11
80030102:	5b f5       	cp.w	r5,-1
80030104:	c1 31       	brne	8003012a <atan+0x2f6>
80030106:	00 9a       	mov	r10,r0
80030108:	02 9b       	mov	r11,r1
8003010a:	e0 a0 03 a9 	rcall	8003085c <__avr32_f64_add>
8003010e:	14 98       	mov	r8,r10
80030110:	16 99       	mov	r9,r11
80030112:	0e 9a       	mov	r10,r7
80030114:	0c 9b       	mov	r11,r6
80030116:	ce 9d       	rcall	800304e8 <__avr32_f64_mul>
80030118:	14 98       	mov	r8,r10
8003011a:	16 99       	mov	r9,r11
8003011c:	0e 9a       	mov	r10,r7
8003011e:	0c 9b       	mov	r11,r6
80030120:	e0 a0 02 d0 	rcall	800306c0 <__avr32_f64_sub>
80030124:	16 96       	mov	r6,r11
80030126:	14 97       	mov	r7,r10
80030128:	c2 28       	rjmp	8003016c <atan+0x338>
8003012a:	00 9a       	mov	r10,r0
8003012c:	02 9b       	mov	r11,r1
8003012e:	e0 a0 03 97 	rcall	8003085c <__avr32_f64_add>
80030132:	14 98       	mov	r8,r10
80030134:	16 99       	mov	r9,r11
80030136:	0e 9a       	mov	r10,r7
80030138:	0c 9b       	mov	r11,r6
8003013a:	cd 7d       	rcall	800304e8 <__avr32_f64_mul>
8003013c:	48 e8       	lddpc	r8,80030174 <atan+0x340>
8003013e:	f0 05 02 38 	ld.d	r8,r8[r5<<0x3]
80030142:	e0 a0 02 bf 	rcall	800306c0 <__avr32_f64_sub>
80030146:	0c 99       	mov	r9,r6
80030148:	0e 98       	mov	r8,r7
8003014a:	e0 a0 02 bb 	rcall	800306c0 <__avr32_f64_sub>
8003014e:	14 98       	mov	r8,r10
80030150:	16 99       	mov	r9,r11
80030152:	48 aa       	lddpc	r10,80030178 <atan+0x344>
80030154:	f4 05 02 3a 	ld.d	r10,r10[r5<<0x3]
80030158:	e0 a0 02 b4 	rcall	800306c0 <__avr32_f64_sub>
8003015c:	40 0c       	lddsp	r12,sp[0x0]
8003015e:	16 96       	mov	r6,r11
80030160:	14 97       	mov	r7,r10
80030162:	ee 16 80 00 	eorh	r6,0x8000
80030166:	58 0c       	cp.w	r12,0
80030168:	c0 25       	brlt	8003016c <atan+0x338>
8003016a:	16 96       	mov	r6,r11
8003016c:	0c 9b       	mov	r11,r6
8003016e:	0e 9a       	mov	r10,r7
80030170:	2f fd       	sub	sp,-4
80030172:	d8 32       	popm	r0-r7,pc
80030174:	80 03       	ld.sh	r3,r0[0x0]
80030176:	1d 90       	ld.ub	r0,lr[0x1]
80030178:	80 03       	ld.sh	r3,r0[0x0]
8003017a:	1d b0       	ld.ub	r0,lr[0x3]

8003017c <fabs>:
8003017c:	f3 db c0 1f 	bfextu	r9,r11,0x0,0x1f
80030180:	12 9b       	mov	r11,r9
80030182:	5e fc       	retal	r12

80030184 <finite>:
80030184:	f7 db c0 1f 	bfextu	r11,r11,0x0,0x1f
80030188:	fc 18 80 10 	movh	r8,0x8010
8003018c:	f6 08 00 0c 	add	r12,r11,r8
80030190:	bf 9c       	lsr	r12,0x1f
80030192:	5e fc       	retal	r12

80030194 <floor>:
80030194:	d4 31       	pushm	r0-r7,lr
80030196:	e9 db c2 8b 	bfextu	r4,r11,0x14,0xb
8003019a:	14 98       	mov	r8,r10
8003019c:	16 99       	mov	r9,r11
8003019e:	14 92       	mov	r2,r10
800301a0:	16 93       	mov	r3,r11
800301a2:	16 97       	mov	r7,r11
800301a4:	14 91       	mov	r1,r10
800301a6:	14 96       	mov	r6,r10
800301a8:	e8 c5 03 ff 	sub	r5,r4,1023
800301ac:	59 35       	cp.w	r5,19
800301ae:	e0 89 00 48 	brgt	8003023e <floor+0xaa>
800301b2:	58 05       	cp.w	r5,0
800301b4:	c2 04       	brge	800301f4 <floor+0x60>
800301b6:	e0 68 75 9c 	mov	r8,30108
800301ba:	ea 18 88 00 	orh	r8,0x8800
800301be:	e0 69 e4 3c 	mov	r9,58428
800301c2:	ea 19 7e 37 	orh	r9,0x7e37
800301c6:	e0 a0 03 4b 	rcall	8003085c <__avr32_f64_add>
800301ca:	14 98       	mov	r8,r10
800301cc:	16 99       	mov	r9,r11
800301ce:	30 0a       	mov	r10,0
800301d0:	30 0b       	mov	r11,0
800301d2:	e0 a0 04 9d 	rcall	80030b0c <__avr32_f64_cmp_lt>
800301d6:	c6 a0       	breq	800302aa <floor+0x116>
800301d8:	58 03       	cp.w	r3,0
800301da:	c0 45       	brlt	800301e2 <floor+0x4e>
800301dc:	30 06       	mov	r6,0
800301de:	0c 97       	mov	r7,r6
800301e0:	c6 58       	rjmp	800302aa <floor+0x116>
800301e2:	f1 d3 c0 1f 	bfextu	r8,r3,0x0,0x1f
800301e6:	f1 e2 10 06 	or	r6,r8,r2
800301ea:	fc 18 bf f0 	movh	r8,0xbff0
800301ee:	f0 07 17 10 	movne	r7,r8
800301f2:	c2 48       	rjmp	8003023a <floor+0xa6>
800301f4:	ee 74 ff ff 	mov	r4,1048575
800301f8:	e8 05 08 44 	asr	r4,r4,r5
800301fc:	e9 eb 00 0c 	and	r12,r4,r11
80030200:	f9 ea 10 01 	or	r1,r12,r10
80030204:	c5 50       	breq	800302ae <floor+0x11a>
80030206:	e0 68 75 9c 	mov	r8,30108
8003020a:	ea 18 88 00 	orh	r8,0x8800
8003020e:	e0 69 e4 3c 	mov	r9,58428
80030212:	ea 19 7e 37 	orh	r9,0x7e37
80030216:	e0 a0 03 23 	rcall	8003085c <__avr32_f64_add>
8003021a:	14 98       	mov	r8,r10
8003021c:	16 99       	mov	r9,r11
8003021e:	30 0a       	mov	r10,0
80030220:	30 0b       	mov	r11,0
80030222:	e0 a0 04 75 	rcall	80030b0c <__avr32_f64_cmp_lt>
80030226:	c4 20       	breq	800302aa <floor+0x116>
80030228:	58 03       	cp.w	r3,0
8003022a:	c0 64       	brge	80030236 <floor+0xa2>
8003022c:	fc 18 00 10 	movh	r8,0x10
80030230:	f0 05 08 45 	asr	r5,r8,r5
80030234:	0a 07       	add	r7,r5
80030236:	5c d4       	com	r4
80030238:	08 67       	and	r7,r4
8003023a:	30 06       	mov	r6,0
8003023c:	c3 78       	rjmp	800302aa <floor+0x116>
8003023e:	e0 45 00 33 	cp.w	r5,51
80030242:	e0 8a 00 0a 	brle	80030256 <floor+0xc2>
80030246:	e0 45 04 00 	cp.w	r5,1024
8003024a:	c3 21       	brne	800302ae <floor+0x11a>
8003024c:	e0 a0 03 08 	rcall	8003085c <__avr32_f64_add>
80030250:	14 98       	mov	r8,r10
80030252:	16 99       	mov	r9,r11
80030254:	c2 d8       	rjmp	800302ae <floor+0x11a>
80030256:	3f fc       	mov	r12,-1
80030258:	e8 c4 04 13 	sub	r4,r4,1043
8003025c:	f8 04 0a 44 	lsr	r4,r12,r4
80030260:	e9 ea 00 0c 	and	r12,r4,r10
80030264:	c2 50       	breq	800302ae <floor+0x11a>
80030266:	e0 68 75 9c 	mov	r8,30108
8003026a:	ea 18 88 00 	orh	r8,0x8800
8003026e:	e0 69 e4 3c 	mov	r9,58428
80030272:	ea 19 7e 37 	orh	r9,0x7e37
80030276:	e0 a0 02 f3 	rcall	8003085c <__avr32_f64_add>
8003027a:	14 98       	mov	r8,r10
8003027c:	16 99       	mov	r9,r11
8003027e:	30 0a       	mov	r10,0
80030280:	30 0b       	mov	r11,0
80030282:	e0 a0 04 45 	rcall	80030b0c <__avr32_f64_cmp_lt>
80030286:	c1 20       	breq	800302aa <floor+0x116>
80030288:	58 03       	cp.w	r3,0
8003028a:	c0 e4       	brge	800302a6 <floor+0x112>
8003028c:	59 45       	cp.w	r5,20
8003028e:	c0 31       	brne	80030294 <floor+0x100>
80030290:	2f f7       	sub	r7,-1
80030292:	c0 a8       	rjmp	800302a6 <floor+0x112>
80030294:	30 18       	mov	r8,1
80030296:	ea 05 11 34 	rsub	r5,r5,52
8003029a:	f0 05 09 45 	lsl	r5,r8,r5
8003029e:	0a 06       	add	r6,r5
800302a0:	04 36       	cp.w	r6,r2
800302a2:	e7 d8 e3 07 	addcs	r7,r3,r8
800302a6:	5c d4       	com	r4
800302a8:	08 66       	and	r6,r4
800302aa:	0e 99       	mov	r9,r7
800302ac:	0c 98       	mov	r8,r6
800302ae:	10 9a       	mov	r10,r8
800302b0:	12 9b       	mov	r11,r9
800302b2:	d8 32       	popm	r0-r7,pc

800302b4 <__isnand>:
800302b4:	14 98       	mov	r8,r10
800302b6:	f5 db c0 1f 	bfextu	r10,r11,0x0,0x1f
800302ba:	f0 0c 11 00 	rsub	r12,r8,0
800302be:	10 4c       	or	r12,r8
800302c0:	fc 18 7f f0 	movh	r8,0x7ff0
800302c4:	f5 ec 13 fc 	or	r12,r10,r12>>0x1f
800302c8:	f0 0c 01 0c 	sub	r12,r8,r12
800302cc:	bf 9c       	lsr	r12,0x1f
800302ce:	5e fc       	retal	r12

800302d0 <matherr>:
800302d0:	5e fd       	retal	0

800302d2 <nan>:
800302d2:	30 0a       	mov	r10,0
800302d4:	fc 1b 7f f8 	movh	r11,0x7ff8
800302d8:	5e fc       	retal	r12
800302da:	d7 03       	nop

800302dc <rint>:
800302dc:	d4 21       	pushm	r4-r7,lr
800302de:	20 2d       	sub	sp,8
800302e0:	ed db c2 8b 	bfextu	r6,r11,0x14,0xb
800302e4:	14 94       	mov	r4,r10
800302e6:	16 95       	mov	r5,r11
800302e8:	14 98       	mov	r8,r10
800302ea:	16 9e       	mov	lr,r11
800302ec:	16 9c       	mov	r12,r11
800302ee:	f6 07 16 1f 	lsr	r7,r11,0x1f
800302f2:	ec c9 03 ff 	sub	r9,r6,1023
800302f6:	59 39       	cp.w	r9,19
800302f8:	e0 89 00 49 	brgt	8003038a <rint+0xae>
800302fc:	58 09       	cp.w	r9,0
800302fe:	c2 b4       	brge	80030354 <rint+0x78>
80030300:	f3 db c0 1f 	bfextu	r9,r11,0x0,0x1f
80030304:	14 49       	or	r9,r10
80030306:	c7 10       	breq	800303e8 <rint+0x10c>
80030308:	fd db c0 14 	bfextu	lr,r11,0x0,0x14
8003030c:	4b 9c       	lddpc	r12,800303f0 <rint+0x114>
8003030e:	fd e4 10 08 	or	r8,lr,r4
80030312:	16 99       	mov	r9,r11
80030314:	f0 0e 11 00 	rsub	lr,r8,0
80030318:	e6 19 ff fe 	andh	r9,0xfffe,COH
8003031c:	fd e8 10 08 	or	r8,lr,r8
80030320:	ad 88       	lsr	r8,0xc
80030322:	e6 18 00 08 	andh	r8,0x8,COH
80030326:	f1 e9 10 0b 	or	r11,r8,r9
8003032a:	f8 07 02 34 	ld.d	r4,r12[r7<<0x3]
8003032e:	14 98       	mov	r8,r10
80030330:	16 99       	mov	r9,r11
80030332:	08 9a       	mov	r10,r4
80030334:	0a 9b       	mov	r11,r5
80030336:	e0 a0 02 93 	rcall	8003085c <__avr32_f64_add>
8003033a:	08 98       	mov	r8,r4
8003033c:	fa eb 00 00 	st.d	sp[0],r10
80030340:	0a 99       	mov	r9,r5
80030342:	fa ea 00 00 	ld.d	r10,sp[0]
80030346:	cb dd       	rcall	800306c0 <__avr32_f64_sub>
80030348:	f7 db c0 1f 	bfextu	r11,r11,0x0,0x1f
8003034c:	14 94       	mov	r4,r10
8003034e:	f7 e7 11 f5 	or	r5,r11,r7<<0x1f
80030352:	c4 b8       	rjmp	800303e8 <rint+0x10c>
80030354:	ee 7a ff ff 	mov	r10,1048575
80030358:	f4 09 08 4a 	asr	r10,r10,r9
8003035c:	f5 eb 00 0b 	and	r11,r10,r11
80030360:	08 4b       	or	r11,r4
80030362:	c4 30       	breq	800303e8 <rint+0x10c>
80030364:	a1 9a       	lsr	r10,0x1
80030366:	f5 e5 00 0b 	and	r11,r10,r5
8003036a:	08 4b       	or	r11,r4
8003036c:	c0 31       	brne	80030372 <rint+0x96>
8003036e:	16 98       	mov	r8,r11
80030370:	c2 b8       	rjmp	800303c6 <rint+0xea>
80030372:	59 39       	cp.w	r9,19
80030374:	c0 41       	brne	8003037c <rint+0xa0>
80030376:	fc 18 40 00 	movh	r8,0x4000
8003037a:	c2 68       	rjmp	800303c6 <rint+0xea>
8003037c:	14 8c       	andn	r12,r10
8003037e:	e2 6a 00 00 	mov	r10,131072
80030382:	f4 09 08 49 	asr	r9,r10,r9
80030386:	12 4c       	or	r12,r9
80030388:	c1 f8       	rjmp	800303c6 <rint+0xea>
8003038a:	e0 49 00 33 	cp.w	r9,51
8003038e:	e0 8a 00 0a 	brle	800303a2 <rint+0xc6>
80030392:	e0 49 04 00 	cp.w	r9,1024
80030396:	c2 91       	brne	800303e8 <rint+0x10c>
80030398:	14 98       	mov	r8,r10
8003039a:	16 99       	mov	r9,r11
8003039c:	e0 a0 02 60 	rcall	8003085c <__avr32_f64_add>
800303a0:	c2 28       	rjmp	800303e4 <rint+0x108>
800303a2:	ec c6 04 13 	sub	r6,r6,1043
800303a6:	3f f9       	mov	r9,-1
800303a8:	f2 06 0a 49 	lsr	r9,r9,r6
800303ac:	f3 ea 00 0a 	and	r10,r9,r10
800303b0:	c1 c0       	breq	800303e8 <rint+0x10c>
800303b2:	a1 99       	lsr	r9,0x1
800303b4:	f3 e4 00 0a 	and	r10,r9,r4
800303b8:	c0 70       	breq	800303c6 <rint+0xea>
800303ba:	12 88       	andn	r8,r9
800303bc:	fc 19 40 00 	movh	r9,0x4000
800303c0:	f2 06 08 46 	asr	r6,r9,r6
800303c4:	0c 48       	or	r8,r6
800303c6:	48 ba       	lddpc	r10,800303f0 <rint+0x114>
800303c8:	18 99       	mov	r9,r12
800303ca:	f4 07 02 36 	ld.d	r6,r10[r7<<0x3]
800303ce:	0c 9a       	mov	r10,r6
800303d0:	0e 9b       	mov	r11,r7
800303d2:	e0 a0 02 45 	rcall	8003085c <__avr32_f64_add>
800303d6:	0c 98       	mov	r8,r6
800303d8:	fa eb 00 00 	st.d	sp[0],r10
800303dc:	0e 99       	mov	r9,r7
800303de:	fa ea 00 00 	ld.d	r10,sp[0]
800303e2:	c6 fd       	rcall	800306c0 <__avr32_f64_sub>
800303e4:	14 94       	mov	r4,r10
800303e6:	16 95       	mov	r5,r11
800303e8:	08 9a       	mov	r10,r4
800303ea:	0a 9b       	mov	r11,r5
800303ec:	2f ed       	sub	sp,-8
800303ee:	d8 22       	popm	r4-r7,pc
800303f0:	80 03       	ld.sh	r3,r0[0x0]
800303f2:	1d d0       	ld.ub	r0,lr[0x5]

800303f4 <scalbn>:
800303f4:	d4 21       	pushm	r4-r7,lr
800303f6:	18 97       	mov	r7,r12
800303f8:	14 98       	mov	r8,r10
800303fa:	16 99       	mov	r9,r11
800303fc:	14 94       	mov	r4,r10
800303fe:	16 95       	mov	r5,r11
80030400:	14 96       	mov	r6,r10
80030402:	16 9c       	mov	r12,r11
80030404:	fd db c2 8b 	bfextu	lr,r11,0x14,0xb
80030408:	c1 11       	brne	8003042a <scalbn+0x36>
8003040a:	f9 db c0 1f 	bfextu	r12,r11,0x0,0x1f
8003040e:	14 4c       	or	r12,r10
80030410:	c5 c0       	breq	800304c8 <scalbn+0xd4>
80030412:	30 08       	mov	r8,0
80030414:	fc 19 43 50 	movh	r9,0x4350
80030418:	c6 8c       	rcall	800304e8 <__avr32_f64_mul>
8003041a:	16 99       	mov	r9,r11
8003041c:	14 98       	mov	r8,r10
8003041e:	14 94       	mov	r4,r10
80030420:	12 95       	mov	r5,r9
80030422:	fe 57 3c b0 	cp.w	r7,-50000
80030426:	c0 84       	brge	80030436 <scalbn+0x42>
80030428:	c3 a8       	rjmp	8003049c <scalbn+0xa8>
8003042a:	e0 4e 07 ff 	cp.w	lr,2047
8003042e:	c0 81       	brne	8003043e <scalbn+0x4a>
80030430:	e0 a0 02 16 	rcall	8003085c <__avr32_f64_add>
80030434:	c4 88       	rjmp	800304c4 <scalbn+0xd0>
80030436:	fd d9 c2 8b 	bfextu	lr,r9,0x14,0xb
8003043a:	12 9c       	mov	r12,r9
8003043c:	23 6e       	sub	lr,54
8003043e:	0e 0e       	add	lr,r7
80030440:	e0 4e 07 fe 	cp.w	lr,2046
80030444:	e0 89 00 11 	brgt	80030466 <scalbn+0x72>
80030448:	58 0e       	cp.w	lr,0
8003044a:	e0 8a 00 07 	brle	80030458 <scalbn+0x64>
8003044e:	e4 1c 80 0f 	andh	r12,0x800f
80030452:	f9 ee 11 49 	or	r9,r12,lr<<0x14
80030456:	c3 98       	rjmp	800304c8 <scalbn+0xd4>
80030458:	fe 5e ff cb 	cp.w	lr,-53
8003045c:	c2 94       	brge	800304ae <scalbn+0xba>
8003045e:	e0 47 c3 50 	cp.w	r7,50000
80030462:	e0 8a 00 14 	brle	8003048a <scalbn+0x96>
80030466:	e0 6a 75 9c 	mov	r10,30108
8003046a:	ea 1a 88 00 	orh	r10,0x8800
8003046e:	e0 6b e4 3c 	mov	r11,58428
80030472:	ea 1b 7e 37 	orh	r11,0x7e37
80030476:	c2 dc       	rcall	800304d0 <copysign>
80030478:	e0 68 75 9c 	mov	r8,30108
8003047c:	ea 18 88 00 	orh	r8,0x8800
80030480:	e0 69 e4 3c 	mov	r9,58428
80030484:	ea 19 7e 37 	orh	r9,0x7e37
80030488:	c1 d8       	rjmp	800304c2 <scalbn+0xce>
8003048a:	e0 6a f3 59 	mov	r10,62297
8003048e:	ea 1a c2 f8 	orh	r10,0xc2f8
80030492:	e0 6b 6e 1f 	mov	r11,28191
80030496:	ea 1b 01 a5 	orh	r11,0x1a5
8003049a:	c1 bc       	rcall	800304d0 <copysign>
8003049c:	e0 68 f3 59 	mov	r8,62297
800304a0:	ea 18 c2 f8 	orh	r8,0xc2f8
800304a4:	e0 69 6e 1f 	mov	r9,28191
800304a8:	ea 19 01 a5 	orh	r9,0x1a5
800304ac:	c0 b8       	rjmp	800304c2 <scalbn+0xce>
800304ae:	2c ae       	sub	lr,-54
800304b0:	e4 1c 80 0f 	andh	r12,0x800f
800304b4:	f9 ee 11 49 	or	r9,r12,lr<<0x14
800304b8:	10 9a       	mov	r10,r8
800304ba:	12 9b       	mov	r11,r9
800304bc:	30 08       	mov	r8,0
800304be:	fc 19 3c 90 	movh	r9,0x3c90
800304c2:	c1 3c       	rcall	800304e8 <__avr32_f64_mul>
800304c4:	14 98       	mov	r8,r10
800304c6:	16 99       	mov	r9,r11
800304c8:	10 9a       	mov	r10,r8
800304ca:	12 9b       	mov	r11,r9
800304cc:	d8 22       	popm	r4-r7,pc
800304ce:	d7 03       	nop

800304d0 <copysign>:
800304d0:	d4 21       	pushm	r4-r7,lr
800304d2:	e6 19 80 00 	andh	r9,0x8000,COH
800304d6:	16 95       	mov	r5,r11
800304d8:	14 94       	mov	r4,r10
800304da:	14 96       	mov	r6,r10
800304dc:	f7 db c0 1f 	bfextu	r11,r11,0x0,0x1f
800304e0:	f3 eb 10 0b 	or	r11,r9,r11
800304e4:	16 97       	mov	r7,r11
800304e6:	d8 22       	popm	r4-r7,pc

800304e8 <__avr32_f64_mul>:
800304e8:	f5 eb 10 1c 	or	r12,r10,r11<<0x1
800304ec:	e0 80 00 dc 	breq	800306a4 <__avr32_f64_mul_op1_zero>
800304f0:	d4 21       	pushm	r4-r7,lr
800304f2:	f7 e9 20 0e 	eor	lr,r11,r9
800304f6:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
800304fa:	30 15       	mov	r5,1
800304fc:	c4 30       	breq	80030582 <__avr32_f64_mul_op1_subnormal>
800304fe:	ab 6b       	lsl	r11,0xa
80030500:	f7 ea 13 6b 	or	r11,r11,r10>>0x16
80030504:	ab 6a       	lsl	r10,0xa
80030506:	f7 d5 d3 c2 	bfins	r11,r5,0x1e,0x2
8003050a:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
8003050e:	c5 c0       	breq	800305c6 <__avr32_f64_mul_op2_subnormal>
80030510:	a1 78       	lsl	r8,0x1
80030512:	5c f9       	rol	r9
80030514:	f3 d5 d2 ab 	bfins	r9,r5,0x15,0xb
80030518:	e0 47 07 ff 	cp.w	r7,2047
8003051c:	c7 70       	breq	8003060a <__avr32_f64_mul_op_nan_or_inf>
8003051e:	e0 46 07 ff 	cp.w	r6,2047
80030522:	c7 40       	breq	8003060a <__avr32_f64_mul_op_nan_or_inf>
80030524:	ee 06 00 0c 	add	r12,r7,r6
80030528:	e0 2c 03 fe 	sub	r12,1022
8003052c:	f6 08 06 44 	mulu.d	r4,r11,r8
80030530:	f4 09 07 44 	macu.d	r4,r10,r9
80030534:	f4 08 06 46 	mulu.d	r6,r10,r8
80030538:	f6 09 06 4a 	mulu.d	r10,r11,r9
8003053c:	08 07       	add	r7,r4
8003053e:	f4 05 00 4a 	adc	r10,r10,r5
80030542:	5c 0b       	acr	r11
80030544:	ed bb 00 14 	bld	r11,0x14
80030548:	c0 50       	breq	80030552 <__avr32_f64_mul+0x6a>
8003054a:	a1 77       	lsl	r7,0x1
8003054c:	5c fa       	rol	r10
8003054e:	5c fb       	rol	r11
80030550:	20 1c       	sub	r12,1
80030552:	58 0c       	cp.w	r12,0
80030554:	e0 8a 00 6f 	brle	80030632 <__avr32_f64_mul_res_subnormal>
80030558:	e0 4c 07 ff 	cp.w	r12,2047
8003055c:	e0 84 00 9c 	brge	80030694 <__avr32_f64_mul_res_inf>
80030560:	f7 dc d2 8b 	bfins	r11,r12,0x14,0xb
80030564:	ed ea 11 f6 	or	r6,r6,r10<<0x1f
80030568:	ef e6 12 17 	or	r7,r7,r6>>0x1
8003056c:	ee 17 80 00 	eorh	r7,0x8000
80030570:	f1 b7 04 20 	satu	r7,0x1
80030574:	0e 0a       	add	r10,r7
80030576:	5c 0b       	acr	r11
80030578:	ed be 00 1f 	bld	lr,0x1f
8003057c:	ef bb 00 1f 	bst	r11,0x1f
80030580:	d8 22       	popm	r4-r7,pc

80030582 <__avr32_f64_mul_op1_subnormal>:
80030582:	e4 1b 00 0f 	andh	r11,0xf
80030586:	f4 0c 12 00 	clz	r12,r10
8003058a:	f6 06 12 00 	clz	r6,r11
8003058e:	f7 bc 03 e1 	sublo	r12,-31
80030592:	f8 06 17 30 	movlo	r6,r12
80030596:	f7 b6 02 01 	subhs	r6,1
8003059a:	e0 46 00 20 	cp.w	r6,32
8003059e:	c0 d4       	brge	800305b8 <__avr32_f64_mul_op1_subnormal+0x36>
800305a0:	ec 0c 11 20 	rsub	r12,r6,32
800305a4:	f6 06 09 4b 	lsl	r11,r11,r6
800305a8:	f4 0c 0a 4c 	lsr	r12,r10,r12
800305ac:	18 4b       	or	r11,r12
800305ae:	f4 06 09 4a 	lsl	r10,r10,r6
800305b2:	20 b6       	sub	r6,11
800305b4:	0c 17       	sub	r7,r6
800305b6:	ca ab       	rjmp	8003050a <__avr32_f64_mul+0x22>
800305b8:	f4 06 09 4b 	lsl	r11,r10,r6
800305bc:	c6 40       	breq	80030684 <__avr32_f64_mul_res_zero>
800305be:	30 0a       	mov	r10,0
800305c0:	20 b6       	sub	r6,11
800305c2:	0c 17       	sub	r7,r6
800305c4:	ca 3b       	rjmp	8003050a <__avr32_f64_mul+0x22>

800305c6 <__avr32_f64_mul_op2_subnormal>:
800305c6:	e4 19 00 0f 	andh	r9,0xf
800305ca:	f0 0c 12 00 	clz	r12,r8
800305ce:	f2 05 12 00 	clz	r5,r9
800305d2:	f7 bc 03 ea 	sublo	r12,-22
800305d6:	f8 05 17 30 	movlo	r5,r12
800305da:	f7 b5 02 0a 	subhs	r5,10
800305de:	e0 45 00 20 	cp.w	r5,32
800305e2:	c0 d4       	brge	800305fc <__avr32_f64_mul_op2_subnormal+0x36>
800305e4:	ea 0c 11 20 	rsub	r12,r5,32
800305e8:	f2 05 09 49 	lsl	r9,r9,r5
800305ec:	f0 0c 0a 4c 	lsr	r12,r8,r12
800305f0:	18 49       	or	r9,r12
800305f2:	f0 05 09 48 	lsl	r8,r8,r5
800305f6:	20 25       	sub	r5,2
800305f8:	0a 16       	sub	r6,r5
800305fa:	c8 fb       	rjmp	80030518 <__avr32_f64_mul+0x30>
800305fc:	f0 05 09 49 	lsl	r9,r8,r5
80030600:	c4 20       	breq	80030684 <__avr32_f64_mul_res_zero>
80030602:	30 08       	mov	r8,0
80030604:	20 25       	sub	r5,2
80030606:	0a 16       	sub	r6,r5
80030608:	c8 8b       	rjmp	80030518 <__avr32_f64_mul+0x30>

8003060a <__avr32_f64_mul_op_nan_or_inf>:
8003060a:	e4 19 00 0f 	andh	r9,0xf
8003060e:	e4 1b 00 0f 	andh	r11,0xf
80030612:	14 4b       	or	r11,r10
80030614:	10 49       	or	r9,r8
80030616:	e0 47 07 ff 	cp.w	r7,2047
8003061a:	c0 91       	brne	8003062c <__avr32_f64_mul_op1_not_naninf>
8003061c:	58 0b       	cp.w	r11,0
8003061e:	c3 81       	brne	8003068e <__avr32_f64_mul_res_nan>
80030620:	e0 46 07 ff 	cp.w	r6,2047
80030624:	c3 81       	brne	80030694 <__avr32_f64_mul_res_inf>
80030626:	58 09       	cp.w	r9,0
80030628:	c3 60       	breq	80030694 <__avr32_f64_mul_res_inf>
8003062a:	c3 28       	rjmp	8003068e <__avr32_f64_mul_res_nan>

8003062c <__avr32_f64_mul_op1_not_naninf>:
8003062c:	58 09       	cp.w	r9,0
8003062e:	c3 30       	breq	80030694 <__avr32_f64_mul_res_inf>
80030630:	c2 f8       	rjmp	8003068e <__avr32_f64_mul_res_nan>

80030632 <__avr32_f64_mul_res_subnormal>:
80030632:	5c 3c       	neg	r12
80030634:	2f fc       	sub	r12,-1
80030636:	f1 bc 04 c0 	satu	r12,0x6
8003063a:	e0 4c 00 20 	cp.w	r12,32
8003063e:	c1 14       	brge	80030660 <__avr32_f64_mul_res_subnormal+0x2e>
80030640:	f8 08 11 20 	rsub	r8,r12,32
80030644:	0e 46       	or	r6,r7
80030646:	ee 0c 0a 47 	lsr	r7,r7,r12
8003064a:	f4 08 09 49 	lsl	r9,r10,r8
8003064e:	12 47       	or	r7,r9
80030650:	f4 0c 0a 4a 	lsr	r10,r10,r12
80030654:	f6 08 09 49 	lsl	r9,r11,r8
80030658:	12 4a       	or	r10,r9
8003065a:	f6 0c 0a 4b 	lsr	r11,r11,r12
8003065e:	c8 3b       	rjmp	80030564 <__avr32_f64_mul+0x7c>
80030660:	f8 08 11 20 	rsub	r8,r12,32
80030664:	f9 b9 00 00 	moveq	r9,0
80030668:	c0 30       	breq	8003066e <__avr32_f64_mul_res_subnormal+0x3c>
8003066a:	f6 08 09 49 	lsl	r9,r11,r8
8003066e:	0e 46       	or	r6,r7
80030670:	ed ea 10 16 	or	r6,r6,r10<<0x1
80030674:	f4 0c 0a 4a 	lsr	r10,r10,r12
80030678:	f3 ea 10 07 	or	r7,r9,r10
8003067c:	f6 0c 0a 4a 	lsr	r10,r11,r12
80030680:	30 0b       	mov	r11,0
80030682:	c7 1b       	rjmp	80030564 <__avr32_f64_mul+0x7c>

80030684 <__avr32_f64_mul_res_zero>:
80030684:	1c 9b       	mov	r11,lr
80030686:	e6 1b 80 00 	andh	r11,0x8000,COH
8003068a:	30 0a       	mov	r10,0
8003068c:	d8 22       	popm	r4-r7,pc

8003068e <__avr32_f64_mul_res_nan>:
8003068e:	3f fb       	mov	r11,-1
80030690:	3f fa       	mov	r10,-1
80030692:	d8 22       	popm	r4-r7,pc

80030694 <__avr32_f64_mul_res_inf>:
80030694:	f0 6b 00 00 	mov	r11,-1048576
80030698:	ed be 00 1f 	bld	lr,0x1f
8003069c:	ef bb 00 1f 	bst	r11,0x1f
800306a0:	30 0a       	mov	r10,0
800306a2:	d8 22       	popm	r4-r7,pc

800306a4 <__avr32_f64_mul_op1_zero>:
800306a4:	f7 e9 20 0b 	eor	r11,r11,r9
800306a8:	e6 1b 80 00 	andh	r11,0x8000,COH
800306ac:	f9 d9 c2 8b 	bfextu	r12,r9,0x14,0xb
800306b0:	e0 4c 07 ff 	cp.w	r12,2047
800306b4:	5e 1c       	retne	r12
800306b6:	3f fa       	mov	r10,-1
800306b8:	3f fb       	mov	r11,-1
800306ba:	5e fc       	retal	r12

800306bc <__avr32_f64_sub_from_add>:
800306bc:	ee 19 80 00 	eorh	r9,0x8000

800306c0 <__avr32_f64_sub>:
800306c0:	f7 e9 20 0c 	eor	r12,r11,r9
800306c4:	e0 86 00 ca 	brmi	80030858 <__avr32_f64_add_from_sub>
800306c8:	eb cd 40 e0 	pushm	r5-r7,lr
800306cc:	16 9c       	mov	r12,r11
800306ce:	e6 1c 80 00 	andh	r12,0x8000,COH
800306d2:	bf db       	cbr	r11,0x1f
800306d4:	bf d9       	cbr	r9,0x1f
800306d6:	10 3a       	cp.w	r10,r8
800306d8:	f2 0b 13 00 	cpc	r11,r9
800306dc:	c0 92       	brcc	800306ee <__avr32_f64_sub+0x2e>
800306de:	16 97       	mov	r7,r11
800306e0:	12 9b       	mov	r11,r9
800306e2:	0e 99       	mov	r9,r7
800306e4:	14 97       	mov	r7,r10
800306e6:	10 9a       	mov	r10,r8
800306e8:	0e 98       	mov	r8,r7
800306ea:	ee 1c 80 00 	eorh	r12,0x8000
800306ee:	f6 07 16 14 	lsr	r7,r11,0x14
800306f2:	ab 7b       	lsl	r11,0xb
800306f4:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
800306f8:	ab 7a       	lsl	r10,0xb
800306fa:	bf bb       	sbr	r11,0x1f
800306fc:	f2 06 16 14 	lsr	r6,r9,0x14
80030700:	c4 40       	breq	80030788 <__avr32_f64_sub_opL_subnormal>
80030702:	ab 79       	lsl	r9,0xb
80030704:	f3 e8 13 59 	or	r9,r9,r8>>0x15
80030708:	ab 78       	lsl	r8,0xb
8003070a:	bf b9       	sbr	r9,0x1f

8003070c <__avr32_f64_sub_opL_subnormal_done>:
8003070c:	e0 47 07 ff 	cp.w	r7,2047
80030710:	c4 f0       	breq	800307ae <__avr32_f64_sub_opH_nan_or_inf>
80030712:	0e 26       	rsub	r6,r7
80030714:	c1 20       	breq	80030738 <__avr32_f64_sub_shift_done>
80030716:	ec 05 11 20 	rsub	r5,r6,32
8003071a:	e0 46 00 20 	cp.w	r6,32
8003071e:	c7 c2       	brcc	80030816 <__avr32_f64_sub_longshift>
80030720:	f0 05 09 4e 	lsl	lr,r8,r5
80030724:	f2 05 09 45 	lsl	r5,r9,r5
80030728:	f0 06 0a 48 	lsr	r8,r8,r6
8003072c:	f2 06 0a 49 	lsr	r9,r9,r6
80030730:	0a 48       	or	r8,r5
80030732:	58 0e       	cp.w	lr,0
80030734:	5f 1e       	srne	lr
80030736:	1c 48       	or	r8,lr

80030738 <__avr32_f64_sub_shift_done>:
80030738:	10 1a       	sub	r10,r8
8003073a:	f6 09 01 4b 	sbc	r11,r11,r9
8003073e:	f6 06 12 00 	clz	r6,r11
80030742:	c0 e0       	breq	8003075e <__avr32_f64_sub_longnormalize_done>
80030744:	c7 83       	brcs	80030834 <__avr32_f64_sub_longnormalize>
80030746:	ec 0e 11 20 	rsub	lr,r6,32
8003074a:	f6 06 09 4b 	lsl	r11,r11,r6
8003074e:	f4 0e 0a 4e 	lsr	lr,r10,lr
80030752:	1c 4b       	or	r11,lr
80030754:	f4 06 09 4a 	lsl	r10,r10,r6
80030758:	0c 17       	sub	r7,r6
8003075a:	e0 8a 00 39 	brle	800307cc <__avr32_f64_sub_subnormal_result>

8003075e <__avr32_f64_sub_longnormalize_done>:
8003075e:	f4 09 15 15 	lsl	r9,r10,0x15
80030762:	ab 9a       	lsr	r10,0xb
80030764:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
80030768:	ab 9b       	lsr	r11,0xb
8003076a:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
8003076e:	18 4b       	or	r11,r12

80030770 <__avr32_f64_sub_round>:
80030770:	fc 17 80 00 	movh	r7,0x8000
80030774:	ed ba 00 00 	bld	r10,0x0
80030778:	f7 b7 01 ff 	subne	r7,-1
8003077c:	0e 39       	cp.w	r9,r7
8003077e:	5f 29       	srhs	r9
80030780:	12 0a       	add	r10,r9
80030782:	5c 0b       	acr	r11
80030784:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80030788 <__avr32_f64_sub_opL_subnormal>:
80030788:	ab 79       	lsl	r9,0xb
8003078a:	f3 e8 13 59 	or	r9,r9,r8>>0x15
8003078e:	ab 78       	lsl	r8,0xb
80030790:	f3 e8 10 0e 	or	lr,r9,r8
80030794:	f9 b6 01 01 	movne	r6,1
80030798:	ee 0e 11 00 	rsub	lr,r7,0
8003079c:	f9 b7 00 01 	moveq	r7,1
800307a0:	ef bb 00 1f 	bst	r11,0x1f
800307a4:	f7 ea 10 0e 	or	lr,r11,r10
800307a8:	f9 b7 00 00 	moveq	r7,0
800307ac:	cb 0b       	rjmp	8003070c <__avr32_f64_sub_opL_subnormal_done>

800307ae <__avr32_f64_sub_opH_nan_or_inf>:
800307ae:	bf db       	cbr	r11,0x1f
800307b0:	f7 ea 10 0e 	or	lr,r11,r10
800307b4:	c0 81       	brne	800307c4 <__avr32_f64_sub_return_nan>
800307b6:	e0 46 07 ff 	cp.w	r6,2047
800307ba:	c0 50       	breq	800307c4 <__avr32_f64_sub_return_nan>
800307bc:	f9 e7 11 4b 	or	r11,r12,r7<<0x14
800307c0:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800307c4 <__avr32_f64_sub_return_nan>:
800307c4:	3f fa       	mov	r10,-1
800307c6:	3f fb       	mov	r11,-1
800307c8:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800307cc <__avr32_f64_sub_subnormal_result>:
800307cc:	5c 37       	neg	r7
800307ce:	2f f7       	sub	r7,-1
800307d0:	f1 b7 04 c0 	satu	r7,0x6
800307d4:	e0 47 00 20 	cp.w	r7,32
800307d8:	c1 14       	brge	800307fa <__avr32_f64_sub_subnormal_result+0x2e>
800307da:	ee 08 11 20 	rsub	r8,r7,32
800307de:	f4 08 09 49 	lsl	r9,r10,r8
800307e2:	5f 16       	srne	r6
800307e4:	f4 07 0a 4a 	lsr	r10,r10,r7
800307e8:	0c 4a       	or	r10,r6
800307ea:	f6 08 09 49 	lsl	r9,r11,r8
800307ee:	f5 e9 10 0a 	or	r10,r10,r9
800307f2:	f4 07 0a 4b 	lsr	r11,r10,r7
800307f6:	30 07       	mov	r7,0
800307f8:	cb 3b       	rjmp	8003075e <__avr32_f64_sub_longnormalize_done>
800307fa:	ee 08 11 40 	rsub	r8,r7,64
800307fe:	f6 08 09 49 	lsl	r9,r11,r8
80030802:	14 49       	or	r9,r10
80030804:	5f 16       	srne	r6
80030806:	f6 07 0a 4a 	lsr	r10,r11,r7
8003080a:	0c 4a       	or	r10,r6
8003080c:	30 0b       	mov	r11,0
8003080e:	30 07       	mov	r7,0
80030810:	ca 7b       	rjmp	8003075e <__avr32_f64_sub_longnormalize_done>
80030812:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80030816 <__avr32_f64_sub_longshift>:
80030816:	f1 b6 04 c0 	satu	r6,0x6
8003081a:	f0 0e 17 00 	moveq	lr,r8
8003081e:	c0 40       	breq	80030826 <__avr32_f64_sub_longshift+0x10>
80030820:	f2 05 09 4e 	lsl	lr,r9,r5
80030824:	10 4e       	or	lr,r8
80030826:	f2 06 0a 48 	lsr	r8,r9,r6
8003082a:	30 09       	mov	r9,0
8003082c:	58 0e       	cp.w	lr,0
8003082e:	5f 1e       	srne	lr
80030830:	1c 48       	or	r8,lr
80030832:	c8 3b       	rjmp	80030738 <__avr32_f64_sub_shift_done>

80030834 <__avr32_f64_sub_longnormalize>:
80030834:	f4 06 12 00 	clz	r6,r10
80030838:	f9 b7 03 00 	movlo	r7,0
8003083c:	f9 b6 03 00 	movlo	r6,0
80030840:	f9 bc 03 00 	movlo	r12,0
80030844:	f7 b6 02 e0 	subhs	r6,-32
80030848:	f4 06 09 4b 	lsl	r11,r10,r6
8003084c:	30 0a       	mov	r10,0
8003084e:	0c 17       	sub	r7,r6
80030850:	fe 9a ff be 	brle	800307cc <__avr32_f64_sub_subnormal_result>
80030854:	c8 5b       	rjmp	8003075e <__avr32_f64_sub_longnormalize_done>
80030856:	d7 03       	nop

80030858 <__avr32_f64_add_from_sub>:
80030858:	ee 19 80 00 	eorh	r9,0x8000

8003085c <__avr32_f64_add>:
8003085c:	f7 e9 20 0c 	eor	r12,r11,r9
80030860:	fe 96 ff 2e 	brmi	800306bc <__avr32_f64_sub_from_add>
80030864:	eb cd 40 e0 	pushm	r5-r7,lr
80030868:	16 9c       	mov	r12,r11
8003086a:	e6 1c 80 00 	andh	r12,0x8000,COH
8003086e:	bf db       	cbr	r11,0x1f
80030870:	bf d9       	cbr	r9,0x1f
80030872:	12 3b       	cp.w	r11,r9
80030874:	c0 72       	brcc	80030882 <__avr32_f64_add+0x26>
80030876:	16 97       	mov	r7,r11
80030878:	12 9b       	mov	r11,r9
8003087a:	0e 99       	mov	r9,r7
8003087c:	14 97       	mov	r7,r10
8003087e:	10 9a       	mov	r10,r8
80030880:	0e 98       	mov	r8,r7
80030882:	30 0e       	mov	lr,0
80030884:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
80030888:	f7 db c0 14 	bfextu	r11,r11,0x0,0x14
8003088c:	b5 ab       	sbr	r11,0x14
8003088e:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
80030892:	c6 20       	breq	80030956 <__avr32_f64_add_op2_subnormal>
80030894:	f3 d9 c0 14 	bfextu	r9,r9,0x0,0x14
80030898:	b5 a9       	sbr	r9,0x14
8003089a:	e0 47 07 ff 	cp.w	r7,2047
8003089e:	c2 80       	breq	800308ee <__avr32_f64_add_opH_nan_or_inf>
800308a0:	0e 26       	rsub	r6,r7
800308a2:	c1 20       	breq	800308c6 <__avr32_f64_add_shift_done>
800308a4:	e0 46 00 36 	cp.w	r6,54
800308a8:	c1 52       	brcc	800308d2 <__avr32_f64_add_res_of_done>
800308aa:	ec 05 11 20 	rsub	r5,r6,32
800308ae:	e0 46 00 20 	cp.w	r6,32
800308b2:	c3 52       	brcc	8003091c <__avr32_f64_add_longshift>
800308b4:	f0 05 09 4e 	lsl	lr,r8,r5
800308b8:	f2 05 09 45 	lsl	r5,r9,r5
800308bc:	f0 06 0a 48 	lsr	r8,r8,r6
800308c0:	f2 06 0a 49 	lsr	r9,r9,r6
800308c4:	0a 48       	or	r8,r5

800308c6 <__avr32_f64_add_shift_done>:
800308c6:	10 0a       	add	r10,r8
800308c8:	f6 09 00 4b 	adc	r11,r11,r9
800308cc:	ed bb 00 15 	bld	r11,0x15
800308d0:	c3 40       	breq	80030938 <__avr32_f64_add_res_of>

800308d2 <__avr32_f64_add_res_of_done>:
800308d2:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
800308d6:	18 4b       	or	r11,r12

800308d8 <__avr32_f64_add_round>:
800308d8:	f9 da c0 01 	bfextu	r12,r10,0x0,0x1
800308dc:	18 4e       	or	lr,r12
800308de:	ee 1e 80 00 	eorh	lr,0x8000
800308e2:	f1 be 04 20 	satu	lr,0x1
800308e6:	1c 0a       	add	r10,lr
800308e8:	5c 0b       	acr	r11
800308ea:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800308ee <__avr32_f64_add_opH_nan_or_inf>:
800308ee:	b5 cb       	cbr	r11,0x14
800308f0:	f7 ea 10 0e 	or	lr,r11,r10
800308f4:	c1 01       	brne	80030914 <__avr32_f64_add_return_nan>
800308f6:	e0 46 07 ff 	cp.w	r6,2047
800308fa:	c0 30       	breq	80030900 <__avr32_f64_add_opL_nan_or_inf>
800308fc:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80030900 <__avr32_f64_add_opL_nan_or_inf>:
80030900:	b5 c9       	cbr	r9,0x14
80030902:	f3 e8 10 0e 	or	lr,r9,r8
80030906:	c0 71       	brne	80030914 <__avr32_f64_add_return_nan>
80030908:	30 0a       	mov	r10,0
8003090a:	fc 1b 7f f0 	movh	r11,0x7ff0
8003090e:	18 4b       	or	r11,r12
80030910:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80030914 <__avr32_f64_add_return_nan>:
80030914:	3f fa       	mov	r10,-1
80030916:	3f fb       	mov	r11,-1
80030918:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8003091c <__avr32_f64_add_longshift>:
8003091c:	f1 b6 04 c0 	satu	r6,0x6
80030920:	f0 0e 17 00 	moveq	lr,r8
80030924:	c0 60       	breq	80030930 <__avr32_f64_add_longshift+0x14>
80030926:	f2 05 09 4e 	lsl	lr,r9,r5
8003092a:	58 08       	cp.w	r8,0
8003092c:	5f 18       	srne	r8
8003092e:	10 4e       	or	lr,r8
80030930:	f2 06 0a 48 	lsr	r8,r9,r6
80030934:	30 09       	mov	r9,0
80030936:	cc 8b       	rjmp	800308c6 <__avr32_f64_add_shift_done>

80030938 <__avr32_f64_add_res_of>:
80030938:	fd ee 10 1e 	or	lr,lr,lr<<0x1
8003093c:	a1 9b       	lsr	r11,0x1
8003093e:	5d 0a       	ror	r10
80030940:	5d 0e       	ror	lr
80030942:	2f f7       	sub	r7,-1
80030944:	e0 47 07 ff 	cp.w	r7,2047
80030948:	f9 ba 00 00 	moveq	r10,0
8003094c:	f9 bb 00 00 	moveq	r11,0
80030950:	f9 be 00 00 	moveq	lr,0
80030954:	cb fb       	rjmp	800308d2 <__avr32_f64_add_res_of_done>

80030956 <__avr32_f64_add_op2_subnormal>:
80030956:	30 16       	mov	r6,1
80030958:	58 07       	cp.w	r7,0
8003095a:	ca 01       	brne	8003089a <__avr32_f64_add+0x3e>
8003095c:	b5 cb       	cbr	r11,0x14
8003095e:	10 0a       	add	r10,r8
80030960:	f6 09 00 4b 	adc	r11,r11,r9
80030964:	18 4b       	or	r11,r12
80030966:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8003096a:	d7 03       	nop

8003096c <__avr32_f64_to_u32>:
8003096c:	58 0b       	cp.w	r11,0
8003096e:	5e 6d       	retmi	0

80030970 <__avr32_f64_to_s32>:
80030970:	f6 0c 15 01 	lsl	r12,r11,0x1
80030974:	b5 9c       	lsr	r12,0x15
80030976:	e0 2c 03 ff 	sub	r12,1023
8003097a:	5e 3d       	retlo	0
8003097c:	f8 0c 11 1f 	rsub	r12,r12,31
80030980:	16 99       	mov	r9,r11
80030982:	ab 7b       	lsl	r11,0xb
80030984:	bf bb       	sbr	r11,0x1f
80030986:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
8003098a:	f6 0c 0a 4b 	lsr	r11,r11,r12
8003098e:	a1 79       	lsl	r9,0x1
80030990:	5e 2b       	reths	r11
80030992:	5c 3b       	neg	r11
80030994:	5e fb       	retal	r11

80030996 <__avr32_u32_to_f64>:
80030996:	f8 cb 00 00 	sub	r11,r12,0
8003099a:	30 0c       	mov	r12,0
8003099c:	c0 38       	rjmp	800309a2 <__avr32_s32_to_f64+0x4>

8003099e <__avr32_s32_to_f64>:
8003099e:	18 9b       	mov	r11,r12
800309a0:	5c 4b       	abs	r11
800309a2:	30 0a       	mov	r10,0
800309a4:	5e 0b       	reteq	r11
800309a6:	d4 01       	pushm	lr
800309a8:	e0 69 04 1e 	mov	r9,1054
800309ac:	f6 08 12 00 	clz	r8,r11
800309b0:	c1 70       	breq	800309de <__avr32_s32_to_f64+0x40>
800309b2:	c0 c3       	brcs	800309ca <__avr32_s32_to_f64+0x2c>
800309b4:	f0 0e 11 20 	rsub	lr,r8,32
800309b8:	f6 08 09 4b 	lsl	r11,r11,r8
800309bc:	f4 0e 0a 4e 	lsr	lr,r10,lr
800309c0:	1c 4b       	or	r11,lr
800309c2:	f4 08 09 4a 	lsl	r10,r10,r8
800309c6:	10 19       	sub	r9,r8
800309c8:	c0 b8       	rjmp	800309de <__avr32_s32_to_f64+0x40>
800309ca:	f4 08 12 00 	clz	r8,r10
800309ce:	f9 b8 03 00 	movlo	r8,0
800309d2:	f7 b8 02 e0 	subhs	r8,-32
800309d6:	f4 08 09 4b 	lsl	r11,r10,r8
800309da:	30 0a       	mov	r10,0
800309dc:	10 19       	sub	r9,r8
800309de:	58 09       	cp.w	r9,0
800309e0:	e0 89 00 30 	brgt	80030a40 <__avr32_s32_to_f64+0xa2>
800309e4:	5c 39       	neg	r9
800309e6:	2f f9       	sub	r9,-1
800309e8:	e0 49 00 36 	cp.w	r9,54
800309ec:	c0 43       	brcs	800309f4 <__avr32_s32_to_f64+0x56>
800309ee:	30 0b       	mov	r11,0
800309f0:	30 0a       	mov	r10,0
800309f2:	c2 68       	rjmp	80030a3e <__avr32_s32_to_f64+0xa0>
800309f4:	2f 69       	sub	r9,-10
800309f6:	f2 08 11 20 	rsub	r8,r9,32
800309fa:	e0 49 00 20 	cp.w	r9,32
800309fe:	c0 b2       	brcc	80030a14 <__avr32_s32_to_f64+0x76>
80030a00:	f4 08 09 4e 	lsl	lr,r10,r8
80030a04:	f6 08 09 48 	lsl	r8,r11,r8
80030a08:	f4 09 0a 4a 	lsr	r10,r10,r9
80030a0c:	f6 09 0a 4b 	lsr	r11,r11,r9
80030a10:	10 4b       	or	r11,r8
80030a12:	c0 88       	rjmp	80030a22 <__avr32_s32_to_f64+0x84>
80030a14:	f6 08 09 4e 	lsl	lr,r11,r8
80030a18:	14 4e       	or	lr,r10
80030a1a:	16 9a       	mov	r10,r11
80030a1c:	30 0b       	mov	r11,0
80030a1e:	f4 09 0a 4a 	lsr	r10,r10,r9
80030a22:	ed ba 00 00 	bld	r10,0x0
80030a26:	c0 92       	brcc	80030a38 <__avr32_s32_to_f64+0x9a>
80030a28:	1c 7e       	tst	lr,lr
80030a2a:	c0 41       	brne	80030a32 <__avr32_s32_to_f64+0x94>
80030a2c:	ed ba 00 01 	bld	r10,0x1
80030a30:	c0 42       	brcc	80030a38 <__avr32_s32_to_f64+0x9a>
80030a32:	2f fa       	sub	r10,-1
80030a34:	f7 bb 02 ff 	subhs	r11,-1
80030a38:	5c fc       	rol	r12
80030a3a:	5d 0b       	ror	r11
80030a3c:	5d 0a       	ror	r10
80030a3e:	d8 02       	popm	pc
80030a40:	e0 68 03 ff 	mov	r8,1023
80030a44:	ed ba 00 0b 	bld	r10,0xb
80030a48:	f7 b8 00 ff 	subeq	r8,-1
80030a4c:	10 0a       	add	r10,r8
80030a4e:	5c 0b       	acr	r11
80030a50:	f7 b9 03 fe 	sublo	r9,-2
80030a54:	e0 49 07 ff 	cp.w	r9,2047
80030a58:	c0 55       	brlt	80030a62 <__avr32_s32_to_f64+0xc4>
80030a5a:	30 0a       	mov	r10,0
80030a5c:	fc 1b ff e0 	movh	r11,0xffe0
80030a60:	c0 c8       	rjmp	80030a78 <__floatsidf_return_op1>
80030a62:	ed bb 00 1f 	bld	r11,0x1f
80030a66:	f7 b9 01 01 	subne	r9,1
80030a6a:	ab 9a       	lsr	r10,0xb
80030a6c:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
80030a70:	a1 7b       	lsl	r11,0x1
80030a72:	ab 9b       	lsr	r11,0xb
80030a74:	f7 e9 11 5b 	or	r11,r11,r9<<0x15

80030a78 <__floatsidf_return_op1>:
80030a78:	a1 7c       	lsl	r12,0x1
80030a7a:	5d 0b       	ror	r11
80030a7c:	d8 02       	popm	pc

80030a7e <__avr32_f64_cmp_eq>:
80030a7e:	10 3a       	cp.w	r10,r8
80030a80:	f2 0b 13 00 	cpc	r11,r9
80030a84:	c0 80       	breq	80030a94 <__avr32_f64_cmp_eq+0x16>
80030a86:	a1 7b       	lsl	r11,0x1
80030a88:	a1 79       	lsl	r9,0x1
80030a8a:	14 4b       	or	r11,r10
80030a8c:	12 4b       	or	r11,r9
80030a8e:	10 4b       	or	r11,r8
80030a90:	5e 0f       	reteq	1
80030a92:	5e fd       	retal	0
80030a94:	a1 7b       	lsl	r11,0x1
80030a96:	fc 1c ff e0 	movh	r12,0xffe0
80030a9a:	58 0a       	cp.w	r10,0
80030a9c:	f8 0b 13 00 	cpc	r11,r12
80030aa0:	5e 8f       	retls	1
80030aa2:	5e fd       	retal	0

80030aa4 <__avr32_f64_cmp_ge>:
80030aa4:	1a de       	st.w	--sp,lr
80030aa6:	1a d7       	st.w	--sp,r7
80030aa8:	a1 7b       	lsl	r11,0x1
80030aaa:	5f 3c       	srlo	r12
80030aac:	a1 79       	lsl	r9,0x1
80030aae:	5f 37       	srlo	r7
80030ab0:	5c fc       	rol	r12
80030ab2:	fc 1e ff e0 	movh	lr,0xffe0
80030ab6:	58 0a       	cp.w	r10,0
80030ab8:	fc 0b 13 00 	cpc	r11,lr
80030abc:	e0 8b 00 1d 	brhi	80030af6 <__avr32_f64_cmp_ge+0x52>
80030ac0:	58 08       	cp.w	r8,0
80030ac2:	fc 09 13 00 	cpc	r9,lr
80030ac6:	e0 8b 00 18 	brhi	80030af6 <__avr32_f64_cmp_ge+0x52>
80030aca:	58 0b       	cp.w	r11,0
80030acc:	f5 ba 00 00 	subfeq	r10,0
80030ad0:	c1 50       	breq	80030afa <__avr32_f64_cmp_ge+0x56>
80030ad2:	1b 07       	ld.w	r7,sp++
80030ad4:	1b 0e       	ld.w	lr,sp++
80030ad6:	58 3c       	cp.w	r12,3
80030ad8:	c0 a0       	breq	80030aec <__avr32_f64_cmp_ge+0x48>
80030ada:	58 1c       	cp.w	r12,1
80030adc:	c0 33       	brcs	80030ae2 <__avr32_f64_cmp_ge+0x3e>
80030ade:	5e 0f       	reteq	1
80030ae0:	5e 1d       	retne	0
80030ae2:	10 3a       	cp.w	r10,r8
80030ae4:	f2 0b 13 00 	cpc	r11,r9
80030ae8:	5e 2f       	reths	1
80030aea:	5e 3d       	retlo	0
80030aec:	14 38       	cp.w	r8,r10
80030aee:	f6 09 13 00 	cpc	r9,r11
80030af2:	5e 2f       	reths	1
80030af4:	5e 3d       	retlo	0
80030af6:	1b 07       	ld.w	r7,sp++
80030af8:	d8 0a       	popm	pc,r12=0
80030afa:	58 17       	cp.w	r7,1
80030afc:	5f 0c       	sreq	r12
80030afe:	58 09       	cp.w	r9,0
80030b00:	f5 b8 00 00 	subfeq	r8,0
80030b04:	1b 07       	ld.w	r7,sp++
80030b06:	1b 0e       	ld.w	lr,sp++
80030b08:	5e 0f       	reteq	1
80030b0a:	5e fc       	retal	r12

80030b0c <__avr32_f64_cmp_lt>:
80030b0c:	1a de       	st.w	--sp,lr
80030b0e:	1a d7       	st.w	--sp,r7
80030b10:	a1 7b       	lsl	r11,0x1
80030b12:	5f 3c       	srlo	r12
80030b14:	a1 79       	lsl	r9,0x1
80030b16:	5f 37       	srlo	r7
80030b18:	5c fc       	rol	r12
80030b1a:	fc 1e ff e0 	movh	lr,0xffe0
80030b1e:	58 0a       	cp.w	r10,0
80030b20:	fc 0b 13 00 	cpc	r11,lr
80030b24:	e0 8b 00 1d 	brhi	80030b5e <__avr32_f64_cmp_lt+0x52>
80030b28:	58 08       	cp.w	r8,0
80030b2a:	fc 09 13 00 	cpc	r9,lr
80030b2e:	e0 8b 00 18 	brhi	80030b5e <__avr32_f64_cmp_lt+0x52>
80030b32:	58 0b       	cp.w	r11,0
80030b34:	f5 ba 00 00 	subfeq	r10,0
80030b38:	c1 50       	breq	80030b62 <__avr32_f64_cmp_lt+0x56>
80030b3a:	1b 07       	ld.w	r7,sp++
80030b3c:	1b 0e       	ld.w	lr,sp++
80030b3e:	58 3c       	cp.w	r12,3
80030b40:	c0 a0       	breq	80030b54 <__avr32_f64_cmp_lt+0x48>
80030b42:	58 1c       	cp.w	r12,1
80030b44:	c0 33       	brcs	80030b4a <__avr32_f64_cmp_lt+0x3e>
80030b46:	5e 0d       	reteq	0
80030b48:	5e 1f       	retne	1
80030b4a:	10 3a       	cp.w	r10,r8
80030b4c:	f2 0b 13 00 	cpc	r11,r9
80030b50:	5e 2d       	reths	0
80030b52:	5e 3f       	retlo	1
80030b54:	14 38       	cp.w	r8,r10
80030b56:	f6 09 13 00 	cpc	r9,r11
80030b5a:	5e 2d       	reths	0
80030b5c:	5e 3f       	retlo	1
80030b5e:	1b 07       	ld.w	r7,sp++
80030b60:	d8 0a       	popm	pc,r12=0
80030b62:	58 17       	cp.w	r7,1
80030b64:	5f 1c       	srne	r12
80030b66:	58 09       	cp.w	r9,0
80030b68:	f5 b8 00 00 	subfeq	r8,0
80030b6c:	1b 07       	ld.w	r7,sp++
80030b6e:	1b 0e       	ld.w	lr,sp++
80030b70:	5e 0d       	reteq	0
80030b72:	5e fc       	retal	r12

80030b74 <__avr32_f64_div>:
80030b74:	eb cd 40 ff 	pushm	r0-r7,lr
80030b78:	f7 e9 20 0e 	eor	lr,r11,r9
80030b7c:	f6 07 16 14 	lsr	r7,r11,0x14
80030b80:	a9 7b       	lsl	r11,0x9
80030b82:	f7 ea 13 7b 	or	r11,r11,r10>>0x17
80030b86:	a9 7a       	lsl	r10,0x9
80030b88:	bd bb       	sbr	r11,0x1d
80030b8a:	e4 1b 3f ff 	andh	r11,0x3fff
80030b8e:	ab d7       	cbr	r7,0xb
80030b90:	e0 80 00 cc 	breq	80030d28 <__avr32_f64_div_round_subnormal+0x54>
80030b94:	e0 47 07 ff 	cp.w	r7,2047
80030b98:	e0 84 00 b5 	brge	80030d02 <__avr32_f64_div_round_subnormal+0x2e>
80030b9c:	f2 06 16 14 	lsr	r6,r9,0x14
80030ba0:	a9 79       	lsl	r9,0x9
80030ba2:	f3 e8 13 79 	or	r9,r9,r8>>0x17
80030ba6:	a9 78       	lsl	r8,0x9
80030ba8:	bd b9       	sbr	r9,0x1d
80030baa:	e4 19 3f ff 	andh	r9,0x3fff
80030bae:	ab d6       	cbr	r6,0xb
80030bb0:	e0 80 00 e2 	breq	80030d74 <__avr32_f64_div_round_subnormal+0xa0>
80030bb4:	e0 46 07 ff 	cp.w	r6,2047
80030bb8:	e0 84 00 b2 	brge	80030d1c <__avr32_f64_div_round_subnormal+0x48>
80030bbc:	0c 17       	sub	r7,r6
80030bbe:	fe 37 fc 01 	sub	r7,-1023
80030bc2:	fc 1c 80 00 	movh	r12,0x8000
80030bc6:	f8 03 16 01 	lsr	r3,r12,0x1
80030bca:	e9 d9 c3 62 	bfextu	r4,r9,0x1b,0x2
80030bce:	5c d4       	com	r4
80030bd0:	e7 d4 d3 82 	bfins	r3,r4,0x1c,0x2
80030bd4:	e6 09 06 44 	mulu.d	r4,r3,r9
80030bd8:	f8 05 01 25 	sub	r5,r12,r5<<0x2
80030bdc:	e6 05 06 44 	mulu.d	r4,r3,r5
80030be0:	ea 03 15 02 	lsl	r3,r5,0x2
80030be4:	e6 09 06 44 	mulu.d	r4,r3,r9
80030be8:	f8 05 01 25 	sub	r5,r12,r5<<0x2
80030bec:	e6 05 06 44 	mulu.d	r4,r3,r5
80030bf0:	ea 03 15 02 	lsl	r3,r5,0x2
80030bf4:	e6 09 06 44 	mulu.d	r4,r3,r9
80030bf8:	f8 05 01 25 	sub	r5,r12,r5<<0x2
80030bfc:	e6 05 06 44 	mulu.d	r4,r3,r5
80030c00:	ea 03 15 02 	lsl	r3,r5,0x2
80030c04:	e6 08 06 40 	mulu.d	r0,r3,r8
80030c08:	e4 09 07 40 	macu.d	r0,r2,r9
80030c0c:	e6 09 06 44 	mulu.d	r4,r3,r9
80030c10:	02 04       	add	r4,r1
80030c12:	5c 05       	acr	r5
80030c14:	a3 65       	lsl	r5,0x2
80030c16:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
80030c1a:	a3 64       	lsl	r4,0x2
80030c1c:	5c 34       	neg	r4
80030c1e:	f8 05 01 45 	sbc	r5,r12,r5
80030c22:	e6 04 06 40 	mulu.d	r0,r3,r4
80030c26:	e4 05 07 40 	macu.d	r0,r2,r5
80030c2a:	e6 05 06 44 	mulu.d	r4,r3,r5
80030c2e:	02 04       	add	r4,r1
80030c30:	5c 05       	acr	r5
80030c32:	ea 03 15 02 	lsl	r3,r5,0x2
80030c36:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
80030c3a:	e8 02 15 02 	lsl	r2,r4,0x2
80030c3e:	e6 08 06 40 	mulu.d	r0,r3,r8
80030c42:	e4 09 07 40 	macu.d	r0,r2,r9
80030c46:	e6 09 06 44 	mulu.d	r4,r3,r9
80030c4a:	02 04       	add	r4,r1
80030c4c:	5c 05       	acr	r5
80030c4e:	a3 65       	lsl	r5,0x2
80030c50:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
80030c54:	a3 64       	lsl	r4,0x2
80030c56:	5c 34       	neg	r4
80030c58:	f8 05 01 45 	sbc	r5,r12,r5
80030c5c:	e6 04 06 40 	mulu.d	r0,r3,r4
80030c60:	e4 05 07 40 	macu.d	r0,r2,r5
80030c64:	e6 05 06 44 	mulu.d	r4,r3,r5
80030c68:	02 04       	add	r4,r1
80030c6a:	5c 05       	acr	r5
80030c6c:	ea 03 15 02 	lsl	r3,r5,0x2
80030c70:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
80030c74:	e8 02 15 02 	lsl	r2,r4,0x2
80030c78:	e6 0a 06 40 	mulu.d	r0,r3,r10
80030c7c:	e4 0b 07 40 	macu.d	r0,r2,r11
80030c80:	e6 0b 06 42 	mulu.d	r2,r3,r11
80030c84:	02 02       	add	r2,r1
80030c86:	5c 03       	acr	r3
80030c88:	ed b3 00 1c 	bld	r3,0x1c
80030c8c:	c0 90       	breq	80030c9e <__avr32_f64_div+0x12a>
80030c8e:	a1 72       	lsl	r2,0x1
80030c90:	5c f3       	rol	r3
80030c92:	20 17       	sub	r7,1
80030c94:	a3 9a       	lsr	r10,0x3
80030c96:	f5 eb 11 da 	or	r10,r10,r11<<0x1d
80030c9a:	a3 9b       	lsr	r11,0x3
80030c9c:	c0 58       	rjmp	80030ca6 <__avr32_f64_div+0x132>
80030c9e:	a5 8a       	lsr	r10,0x4
80030ca0:	f5 eb 11 ca 	or	r10,r10,r11<<0x1c
80030ca4:	a5 8b       	lsr	r11,0x4
80030ca6:	58 07       	cp.w	r7,0
80030ca8:	e0 8a 00 8b 	brle	80030dbe <__avr32_f64_div_res_subnormal>
80030cac:	e0 12 ff 00 	andl	r2,0xff00
80030cb0:	e8 12 00 80 	orl	r2,0x80
80030cb4:	e6 08 06 40 	mulu.d	r0,r3,r8
80030cb8:	e4 09 07 40 	macu.d	r0,r2,r9
80030cbc:	e4 08 06 44 	mulu.d	r4,r2,r8
80030cc0:	e6 09 06 48 	mulu.d	r8,r3,r9
80030cc4:	00 05       	add	r5,r0
80030cc6:	f0 01 00 48 	adc	r8,r8,r1
80030cca:	5c 09       	acr	r9
80030ccc:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
80030cd0:	58 04       	cp.w	r4,0
80030cd2:	5c 25       	cpc	r5

80030cd4 <__avr32_f64_div_round_subnormal>:
80030cd4:	f4 08 13 00 	cpc	r8,r10
80030cd8:	f6 09 13 00 	cpc	r9,r11
80030cdc:	5f 36       	srlo	r6
80030cde:	f8 06 17 00 	moveq	r6,r12
80030ce2:	e4 0a 16 08 	lsr	r10,r2,0x8
80030ce6:	f5 e3 11 8a 	or	r10,r10,r3<<0x18
80030cea:	e6 0b 16 08 	lsr	r11,r3,0x8
80030cee:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
80030cf2:	ed be 00 1f 	bld	lr,0x1f
80030cf6:	ef bb 00 1f 	bst	r11,0x1f
80030cfa:	0c 0a       	add	r10,r6
80030cfc:	5c 0b       	acr	r11
80030cfe:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
80030d02:	e4 1b 00 0f 	andh	r11,0xf
80030d06:	14 4b       	or	r11,r10
80030d08:	e0 81 00 a7 	brne	80030e56 <__avr32_f64_div_res_subnormal+0x98>
80030d0c:	f2 06 16 14 	lsr	r6,r9,0x14
80030d10:	ab d6       	cbr	r6,0xb
80030d12:	e0 46 07 ff 	cp.w	r6,2047
80030d16:	e0 81 00 a4 	brne	80030e5e <__avr32_f64_div_res_subnormal+0xa0>
80030d1a:	c9 e8       	rjmp	80030e56 <__avr32_f64_div_res_subnormal+0x98>
80030d1c:	e4 19 00 0f 	andh	r9,0xf
80030d20:	10 49       	or	r9,r8
80030d22:	e0 81 00 9a 	brne	80030e56 <__avr32_f64_div_res_subnormal+0x98>
80030d26:	c9 28       	rjmp	80030e4a <__avr32_f64_div_res_subnormal+0x8c>
80030d28:	a3 7b       	lsl	r11,0x3
80030d2a:	f7 ea 13 db 	or	r11,r11,r10>>0x1d
80030d2e:	a3 7a       	lsl	r10,0x3
80030d30:	f5 eb 10 04 	or	r4,r10,r11
80030d34:	e0 80 00 a0 	breq	80030e74 <__avr32_f64_div_op1_zero>
80030d38:	f6 04 12 00 	clz	r4,r11
80030d3c:	c1 70       	breq	80030d6a <__avr32_f64_div_round_subnormal+0x96>
80030d3e:	c0 c3       	brcs	80030d56 <__avr32_f64_div_round_subnormal+0x82>
80030d40:	e8 05 11 20 	rsub	r5,r4,32
80030d44:	f6 04 09 4b 	lsl	r11,r11,r4
80030d48:	f4 05 0a 45 	lsr	r5,r10,r5
80030d4c:	0a 4b       	or	r11,r5
80030d4e:	f4 04 09 4a 	lsl	r10,r10,r4
80030d52:	08 17       	sub	r7,r4
80030d54:	c0 b8       	rjmp	80030d6a <__avr32_f64_div_round_subnormal+0x96>
80030d56:	f4 04 12 00 	clz	r4,r10
80030d5a:	f9 b4 03 00 	movlo	r4,0
80030d5e:	f7 b4 02 e0 	subhs	r4,-32
80030d62:	f4 04 09 4b 	lsl	r11,r10,r4
80030d66:	30 0a       	mov	r10,0
80030d68:	08 17       	sub	r7,r4
80030d6a:	a3 8a       	lsr	r10,0x2
80030d6c:	f5 eb 11 ea 	or	r10,r10,r11<<0x1e
80030d70:	a3 8b       	lsr	r11,0x2
80030d72:	c1 1b       	rjmp	80030b94 <__avr32_f64_div+0x20>
80030d74:	a3 79       	lsl	r9,0x3
80030d76:	f3 e8 13 d9 	or	r9,r9,r8>>0x1d
80030d7a:	a3 78       	lsl	r8,0x3
80030d7c:	f3 e8 10 04 	or	r4,r9,r8
80030d80:	c6 f0       	breq	80030e5e <__avr32_f64_div_res_subnormal+0xa0>
80030d82:	f2 04 12 00 	clz	r4,r9
80030d86:	c1 70       	breq	80030db4 <__avr32_f64_div_round_subnormal+0xe0>
80030d88:	c0 c3       	brcs	80030da0 <__avr32_f64_div_round_subnormal+0xcc>
80030d8a:	e8 05 11 20 	rsub	r5,r4,32
80030d8e:	f2 04 09 49 	lsl	r9,r9,r4
80030d92:	f0 05 0a 45 	lsr	r5,r8,r5
80030d96:	0a 49       	or	r9,r5
80030d98:	f0 04 09 48 	lsl	r8,r8,r4
80030d9c:	08 16       	sub	r6,r4
80030d9e:	c0 b8       	rjmp	80030db4 <__avr32_f64_div_round_subnormal+0xe0>
80030da0:	f0 04 12 00 	clz	r4,r8
80030da4:	f9 b4 03 00 	movlo	r4,0
80030da8:	f7 b4 02 e0 	subhs	r4,-32
80030dac:	f0 04 09 49 	lsl	r9,r8,r4
80030db0:	30 08       	mov	r8,0
80030db2:	08 16       	sub	r6,r4
80030db4:	a3 88       	lsr	r8,0x2
80030db6:	f1 e9 11 e8 	or	r8,r8,r9<<0x1e
80030dba:	a3 89       	lsr	r9,0x2
80030dbc:	cf ca       	rjmp	80030bb4 <__avr32_f64_div+0x40>

80030dbe <__avr32_f64_div_res_subnormal>:
80030dbe:	5c 37       	neg	r7
80030dc0:	2f f7       	sub	r7,-1
80030dc2:	f1 b7 04 c0 	satu	r7,0x6
80030dc6:	e0 47 00 20 	cp.w	r7,32
80030dca:	c1 54       	brge	80030df4 <__avr32_f64_div_res_subnormal+0x36>
80030dcc:	ee 06 11 20 	rsub	r6,r7,32
80030dd0:	e4 07 0a 42 	lsr	r2,r2,r7
80030dd4:	e6 06 09 4c 	lsl	r12,r3,r6
80030dd8:	18 42       	or	r2,r12
80030dda:	e6 07 0a 43 	lsr	r3,r3,r7
80030dde:	f4 06 09 41 	lsl	r1,r10,r6
80030de2:	f4 07 0a 4a 	lsr	r10,r10,r7
80030de6:	f6 06 09 4c 	lsl	r12,r11,r6
80030dea:	18 4a       	or	r10,r12
80030dec:	f6 07 0a 4b 	lsr	r11,r11,r7
80030df0:	30 00       	mov	r0,0
80030df2:	c1 58       	rjmp	80030e1c <__avr32_f64_div_res_subnormal+0x5e>
80030df4:	ee 06 11 20 	rsub	r6,r7,32
80030df8:	f9 b0 00 00 	moveq	r0,0
80030dfc:	f9 bc 00 00 	moveq	r12,0
80030e00:	c0 50       	breq	80030e0a <__avr32_f64_div_res_subnormal+0x4c>
80030e02:	f4 06 09 40 	lsl	r0,r10,r6
80030e06:	f6 06 09 4c 	lsl	r12,r11,r6
80030e0a:	e6 07 0a 42 	lsr	r2,r3,r7
80030e0e:	30 03       	mov	r3,0
80030e10:	f4 07 0a 41 	lsr	r1,r10,r7
80030e14:	18 41       	or	r1,r12
80030e16:	f6 07 0a 4a 	lsr	r10,r11,r7
80030e1a:	30 0b       	mov	r11,0
80030e1c:	e0 12 ff 00 	andl	r2,0xff00
80030e20:	e8 12 00 80 	orl	r2,0x80
80030e24:	e6 08 06 46 	mulu.d	r6,r3,r8
80030e28:	e4 09 07 46 	macu.d	r6,r2,r9
80030e2c:	e4 08 06 44 	mulu.d	r4,r2,r8
80030e30:	e6 09 06 48 	mulu.d	r8,r3,r9
80030e34:	0c 05       	add	r5,r6
80030e36:	f0 07 00 48 	adc	r8,r8,r7
80030e3a:	5c 09       	acr	r9
80030e3c:	30 07       	mov	r7,0
80030e3e:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
80030e42:	00 34       	cp.w	r4,r0
80030e44:	e2 05 13 00 	cpc	r5,r1
80030e48:	c4 6b       	rjmp	80030cd4 <__avr32_f64_div_round_subnormal>
80030e4a:	1c 9b       	mov	r11,lr
80030e4c:	e6 1b 80 00 	andh	r11,0x8000,COH
80030e50:	30 0a       	mov	r10,0
80030e52:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
80030e56:	3f fb       	mov	r11,-1
80030e58:	30 0a       	mov	r10,0
80030e5a:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
80030e5e:	f5 eb 10 04 	or	r4,r10,r11
80030e62:	c0 90       	breq	80030e74 <__avr32_f64_div_op1_zero>
80030e64:	1c 9b       	mov	r11,lr
80030e66:	e6 1b 80 00 	andh	r11,0x8000,COH
80030e6a:	ea 1b 7f f0 	orh	r11,0x7ff0
80030e6e:	30 0a       	mov	r10,0
80030e70:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc

80030e74 <__avr32_f64_div_op1_zero>:
80030e74:	f1 e9 10 15 	or	r5,r8,r9<<0x1
80030e78:	ce f0       	breq	80030e56 <__avr32_f64_div_res_subnormal+0x98>
80030e7a:	e9 d9 c2 8b 	bfextu	r4,r9,0x14,0xb
80030e7e:	e0 44 07 ff 	cp.w	r4,2047
80030e82:	ce 41       	brne	80030e4a <__avr32_f64_div_res_subnormal+0x8c>
80030e84:	f1 e9 10 c5 	or	r5,r8,r9<<0xc
80030e88:	ce 10       	breq	80030e4a <__avr32_f64_div_res_subnormal+0x8c>
80030e8a:	ce 6b       	rjmp	80030e56 <__avr32_f64_div_res_subnormal+0x98>

80030e8c <__avr32_f32_div>:
80030e8c:	f7 ec 20 08 	eor	r8,r11,r12
80030e90:	a1 7c       	lsl	r12,0x1
80030e92:	a1 7b       	lsl	r11,0x1
80030e94:	c7 a0       	breq	80030f88 <__divsf_return_op1+0x16>
80030e96:	18 7c       	tst	r12,r12
80030e98:	f9 b9 00 00 	moveq	r9,0
80030e9c:	c0 90       	breq	80030eae <__avr32_f32_div+0x22>
80030e9e:	f8 09 16 18 	lsr	r9,r12,0x18
80030ea2:	c7 e0       	breq	80030f9e <__divsf_return_op1+0x2c>
80030ea4:	e0 49 00 ff 	cp.w	r9,255
80030ea8:	c6 82       	brcc	80030f78 <__divsf_return_op1+0x6>
80030eaa:	a7 7c       	lsl	r12,0x7
80030eac:	bf bc       	sbr	r12,0x1f
80030eae:	f6 0a 16 18 	lsr	r10,r11,0x18
80030eb2:	c7 e0       	breq	80030fae <__divsf_return_op1+0x3c>
80030eb4:	e0 4a 00 ff 	cp.w	r10,255
80030eb8:	c6 62       	brcc	80030f84 <__divsf_return_op1+0x12>
80030eba:	a7 7b       	lsl	r11,0x7
80030ebc:	bf bb       	sbr	r11,0x1f
80030ebe:	58 09       	cp.w	r9,0
80030ec0:	f5 bc 00 00 	subfeq	r12,0
80030ec4:	5e 0d       	reteq	0
80030ec6:	1a d5       	st.w	--sp,r5
80030ec8:	bb 27       	st.d	--sp,r6
80030eca:	14 19       	sub	r9,r10
80030ecc:	28 19       	sub	r9,-127
80030ece:	fc 1a 80 00 	movh	r10,0x8000
80030ed2:	a3 8c       	lsr	r12,0x2
80030ed4:	f6 05 16 02 	lsr	r5,r11,0x2
80030ed8:	f4 0b 16 01 	lsr	r11,r10,0x1
80030edc:	ed d5 c3 62 	bfextu	r6,r5,0x1b,0x2
80030ee0:	5c d6       	com	r6
80030ee2:	f7 d6 d3 82 	bfins	r11,r6,0x1c,0x2
80030ee6:	f6 05 06 46 	mulu.d	r6,r11,r5
80030eea:	f4 07 01 27 	sub	r7,r10,r7<<0x2
80030eee:	f6 07 06 46 	mulu.d	r6,r11,r7
80030ef2:	ee 0b 15 02 	lsl	r11,r7,0x2
80030ef6:	f6 05 06 46 	mulu.d	r6,r11,r5
80030efa:	f4 07 01 27 	sub	r7,r10,r7<<0x2
80030efe:	f6 07 06 46 	mulu.d	r6,r11,r7
80030f02:	ee 0b 15 02 	lsl	r11,r7,0x2
80030f06:	f6 05 06 46 	mulu.d	r6,r11,r5
80030f0a:	f4 07 01 27 	sub	r7,r10,r7<<0x2
80030f0e:	f6 07 06 46 	mulu.d	r6,r11,r7
80030f12:	ee 0b 15 02 	lsl	r11,r7,0x2
80030f16:	f6 05 06 46 	mulu.d	r6,r11,r5
80030f1a:	f4 07 01 27 	sub	r7,r10,r7<<0x2
80030f1e:	f6 07 06 46 	mulu.d	r6,r11,r7
80030f22:	ee 0b 15 02 	lsl	r11,r7,0x2
80030f26:	f6 0c 06 46 	mulu.d	r6,r11,r12
80030f2a:	a5 8c       	lsr	r12,0x4
80030f2c:	ed b7 00 1c 	bld	r7,0x1c
80030f30:	c0 40       	breq	80030f38 <__avr32_f32_div+0xac>
80030f32:	a1 77       	lsl	r7,0x1
80030f34:	20 19       	sub	r9,1
80030f36:	a1 7c       	lsl	r12,0x1
80030f38:	58 09       	cp.w	r9,0
80030f3a:	e0 8a 00 42 	brle	80030fbe <__avr32_f32_div_res_subnormal>
80030f3e:	e0 17 ff e0 	andl	r7,0xffe0
80030f42:	e8 17 00 10 	orl	r7,0x10
80030f46:	ea 07 06 4a 	mulu.d	r10,r5,r7
80030f4a:	eb d7 c0 a1 	bfextu	r5,r7,0x5,0x1
80030f4e:	58 0a       	cp.w	r10,0

80030f50 <__avr32_f32_div_round_subnormal>:
80030f50:	f8 0b 13 00 	cpc	r11,r12
80030f54:	5f 3b       	srlo	r11
80030f56:	ea 0b 17 00 	moveq	r11,r5
80030f5a:	ee 0c 16 05 	lsr	r12,r7,0x5
80030f5e:	f9 d9 d2 e8 	bfins	r12,r9,0x17,0x8
80030f62:	bb 07       	ld.d	r6,sp++
80030f64:	1b 05       	ld.w	r5,sp++
80030f66:	ed b8 00 1f 	bld	r8,0x1f
80030f6a:	ef bc 00 1f 	bst	r12,0x1f
80030f6e:	16 0c       	add	r12,r11
80030f70:	5e fc       	retal	r12

80030f72 <__divsf_return_op1>:
80030f72:	a1 78       	lsl	r8,0x1
80030f74:	5d 0c       	ror	r12
80030f76:	5e fc       	retal	r12
80030f78:	5e 1e       	retne	-1
80030f7a:	fc 19 ff 00 	movh	r9,0xff00
80030f7e:	12 3b       	cp.w	r11,r9
80030f80:	cf 93       	brcs	80030f72 <__divsf_return_op1>
80030f82:	5e fe       	retal	-1
80030f84:	5e 0d       	reteq	0
80030f86:	5e fe       	retal	-1
80030f88:	18 7c       	tst	r12,r12
80030f8a:	5e 0e       	reteq	-1
80030f8c:	f8 09 16 18 	lsr	r9,r12,0x18
80030f90:	c0 70       	breq	80030f9e <__divsf_return_op1+0x2c>
80030f92:	e0 49 00 ff 	cp.w	r9,255
80030f96:	cf 12       	brcc	80030f78 <__divsf_return_op1+0x6>
80030f98:	fc 1c ff 00 	movh	r12,0xff00
80030f9c:	ce bb       	rjmp	80030f72 <__divsf_return_op1>
80030f9e:	a7 7c       	lsl	r12,0x7
80030fa0:	f8 09 12 00 	clz	r9,r12
80030fa4:	f8 09 09 4c 	lsl	r12,r12,r9
80030fa8:	f2 09 11 01 	rsub	r9,r9,1
80030fac:	c8 1b       	rjmp	80030eae <__avr32_f32_div+0x22>
80030fae:	a7 7b       	lsl	r11,0x7
80030fb0:	f6 0a 12 00 	clz	r10,r11
80030fb4:	f6 0a 09 4b 	lsl	r11,r11,r10
80030fb8:	f4 0a 11 01 	rsub	r10,r10,1
80030fbc:	c8 5b       	rjmp	80030ec6 <__avr32_f32_div+0x3a>

80030fbe <__avr32_f32_div_res_subnormal>:
80030fbe:	5c 39       	neg	r9
80030fc0:	2f f9       	sub	r9,-1
80030fc2:	f1 b9 04 a0 	satu	r9,0x5
80030fc6:	f2 0a 11 20 	rsub	r10,r9,32
80030fca:	ee 09 0a 47 	lsr	r7,r7,r9
80030fce:	f8 0a 09 46 	lsl	r6,r12,r10
80030fd2:	f8 09 0a 4c 	lsr	r12,r12,r9
80030fd6:	e0 17 ff e0 	andl	r7,0xffe0
80030fda:	e8 17 00 10 	orl	r7,0x10
80030fde:	ea 07 06 4a 	mulu.d	r10,r5,r7
80030fe2:	30 09       	mov	r9,0
80030fe4:	eb d7 c0 a1 	bfextu	r5,r7,0x5,0x1
80030fe8:	0c 3a       	cp.w	r10,r6
80030fea:	cb 3b       	rjmp	80030f50 <__avr32_f32_div_round_subnormal>

80030fec <__avr32_f32_to_f64>:
80030fec:	f8 0b 15 01 	lsl	r11,r12,0x1
80030ff0:	f9 ba 00 00 	moveq	r10,0
80030ff4:	5e 0b       	reteq	r11
80030ff6:	f3 db c3 08 	bfextu	r9,r11,0x18,0x8
80030ffa:	e0 49 00 ff 	cp.w	r9,255
80030ffe:	c1 e0       	breq	8003103a <__extendsfdf_return_op1+0x6>
80031000:	a7 7b       	lsl	r11,0x7
80031002:	30 0a       	mov	r10,0
80031004:	58 09       	cp.w	r9,0
80031006:	f7 b9 00 ff 	subeq	r9,-1
8003100a:	5f 18       	srne	r8
8003100c:	f7 e8 11 fb 	or	r11,r11,r8<<0x1f
80031010:	fe 39 fc 80 	sub	r9,-896
80031014:	f6 08 12 00 	clz	r8,r11
80031018:	10 19       	sub	r9,r8
8003101a:	f6 08 09 4b 	lsl	r11,r11,r8
8003101e:	ed bb 00 1f 	bld	r11,0x1f
80031022:	f7 b9 01 01 	subne	r9,1
80031026:	ab 9a       	lsr	r10,0xb
80031028:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
8003102c:	a1 7b       	lsl	r11,0x1
8003102e:	ab 9b       	lsr	r11,0xb
80031030:	f7 e9 11 5b 	or	r11,r11,r9<<0x15

80031034 <__extendsfdf_return_op1>:
80031034:	a1 7c       	lsl	r12,0x1
80031036:	5d 0b       	ror	r11
80031038:	5e fb       	retal	r11
8003103a:	fc 1a ff e0 	movh	r10,0xffe0
8003103e:	a9 6b       	lsl	r11,0x8
80031040:	f9 bb 01 ff 	movne	r11,-1
80031044:	f4 0b 17 00 	moveq	r11,r10
80031048:	30 0a       	mov	r10,0
8003104a:	cf 5b       	rjmp	80031034 <__extendsfdf_return_op1>

8003104c <__avr32_f64_to_f32>:
8003104c:	f6 09 15 01 	lsl	r9,r11,0x1
80031050:	b5 99       	lsr	r9,0x15
80031052:	5e 0d       	reteq	0
80031054:	f6 08 15 0a 	lsl	r8,r11,0xa
80031058:	f1 ea 13 6c 	or	r12,r8,r10>>0x16
8003105c:	ab 6a       	lsl	r10,0xa
8003105e:	5c 3a       	neg	r10
80031060:	5c fc       	rol	r12
80031062:	e0 49 07 ff 	cp.w	r9,2047
80031066:	c1 a0       	breq	8003109a <__truncdfsf_return_op1+0x6>
80031068:	e0 29 03 80 	sub	r9,896
8003106c:	bf bc       	sbr	r12,0x1f
8003106e:	58 09       	cp.w	r9,0
80031070:	e0 8a 00 1a 	brle	800310a4 <__truncdfsf_return_op1+0x10>
80031074:	37 fa       	mov	r10,127
80031076:	ed bc 00 08 	bld	r12,0x8
8003107a:	f7 ba 00 ff 	subeq	r10,-1
8003107e:	14 0c       	add	r12,r10
80031080:	f7 b9 03 fe 	sublo	r9,-2
80031084:	ed bc 00 1f 	bld	r12,0x1f
80031088:	f7 b9 01 01 	subne	r9,1
8003108c:	f8 0c 16 07 	lsr	r12,r12,0x7
80031090:	f9 d9 d3 08 	bfins	r12,r9,0x18,0x8

80031094 <__truncdfsf_return_op1>:
80031094:	a1 7b       	lsl	r11,0x1
80031096:	5d 0c       	ror	r12
80031098:	5e fc       	retal	r12
8003109a:	bf dc       	cbr	r12,0x1f
8003109c:	5e 1e       	retne	-1
8003109e:	fc 1c 7f 80 	movh	r12,0x7f80
800310a2:	5e fc       	retal	r12
800310a4:	f2 09 11 01 	rsub	r9,r9,1
800310a8:	59 99       	cp.w	r9,25
800310aa:	f9 bc 02 00 	movhs	r12,0
800310ae:	c1 32       	brcc	800310d4 <__truncdfsf_return_op1+0x40>
800310b0:	f2 0a 11 20 	rsub	r10,r9,32
800310b4:	f8 0a 09 4a 	lsl	r10,r12,r10
800310b8:	5f 1a       	srne	r10
800310ba:	f8 09 0a 4c 	lsr	r12,r12,r9
800310be:	14 4c       	or	r12,r10
800310c0:	37 fa       	mov	r10,127
800310c2:	ed bc 00 08 	bld	r12,0x8
800310c6:	f7 ba 00 ff 	subeq	r10,-1
800310ca:	14 0c       	add	r12,r10
800310cc:	f8 0c 16 07 	lsr	r12,r12,0x7
800310d0:	a1 7b       	lsl	r11,0x1
800310d2:	5d 0c       	ror	r12
800310d4:	5e fc       	retal	r12

800310d6 <__avr32_udiv64>:
800310d6:	d4 31       	pushm	r0-r7,lr
800310d8:	1a 97       	mov	r7,sp
800310da:	20 3d       	sub	sp,12
800310dc:	10 9c       	mov	r12,r8
800310de:	12 9e       	mov	lr,r9
800310e0:	14 93       	mov	r3,r10
800310e2:	58 09       	cp.w	r9,0
800310e4:	e0 81 00 bd 	brne	8003125e <__avr32_udiv64+0x188>
800310e8:	16 38       	cp.w	r8,r11
800310ea:	e0 88 00 40 	brls	8003116a <__avr32_udiv64+0x94>
800310ee:	f0 08 12 00 	clz	r8,r8
800310f2:	c0 d0       	breq	8003110c <__avr32_udiv64+0x36>
800310f4:	f6 08 09 4b 	lsl	r11,r11,r8
800310f8:	f0 09 11 20 	rsub	r9,r8,32
800310fc:	f8 08 09 4c 	lsl	r12,r12,r8
80031100:	f4 09 0a 49 	lsr	r9,r10,r9
80031104:	f4 08 09 43 	lsl	r3,r10,r8
80031108:	f3 eb 10 0b 	or	r11,r9,r11
8003110c:	f8 0e 16 10 	lsr	lr,r12,0x10
80031110:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
80031114:	f6 0e 0d 00 	divu	r0,r11,lr
80031118:	e6 0b 16 10 	lsr	r11,r3,0x10
8003111c:	00 99       	mov	r9,r0
8003111e:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80031122:	e0 0a 02 48 	mul	r8,r0,r10
80031126:	10 3b       	cp.w	r11,r8
80031128:	c0 a2       	brcc	8003113c <__avr32_udiv64+0x66>
8003112a:	20 19       	sub	r9,1
8003112c:	18 0b       	add	r11,r12
8003112e:	18 3b       	cp.w	r11,r12
80031130:	c0 63       	brcs	8003113c <__avr32_udiv64+0x66>
80031132:	10 3b       	cp.w	r11,r8
80031134:	f7 b9 03 01 	sublo	r9,1
80031138:	f7 dc e3 0b 	addcs	r11,r11,r12
8003113c:	f6 08 01 01 	sub	r1,r11,r8
80031140:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
80031144:	e2 0e 0d 00 	divu	r0,r1,lr
80031148:	e7 e1 11 03 	or	r3,r3,r1<<0x10
8003114c:	00 98       	mov	r8,r0
8003114e:	e0 0a 02 4a 	mul	r10,r0,r10
80031152:	14 33       	cp.w	r3,r10
80031154:	c0 82       	brcc	80031164 <__avr32_udiv64+0x8e>
80031156:	20 18       	sub	r8,1
80031158:	18 03       	add	r3,r12
8003115a:	18 33       	cp.w	r3,r12
8003115c:	c0 43       	brcs	80031164 <__avr32_udiv64+0x8e>
8003115e:	14 33       	cp.w	r3,r10
80031160:	f7 b8 03 01 	sublo	r8,1
80031164:	f1 e9 11 08 	or	r8,r8,r9<<0x10
80031168:	cd f8       	rjmp	80031326 <__avr32_udiv64+0x250>
8003116a:	58 08       	cp.w	r8,0
8003116c:	c0 51       	brne	80031176 <__avr32_udiv64+0xa0>
8003116e:	30 19       	mov	r9,1
80031170:	f2 08 0d 08 	divu	r8,r9,r8
80031174:	10 9c       	mov	r12,r8
80031176:	f8 06 12 00 	clz	r6,r12
8003117a:	c0 41       	brne	80031182 <__avr32_udiv64+0xac>
8003117c:	18 1b       	sub	r11,r12
8003117e:	30 19       	mov	r9,1
80031180:	c4 08       	rjmp	80031200 <__avr32_udiv64+0x12a>
80031182:	ec 01 11 20 	rsub	r1,r6,32
80031186:	f4 01 0a 49 	lsr	r9,r10,r1
8003118a:	f8 06 09 4c 	lsl	r12,r12,r6
8003118e:	f6 06 09 48 	lsl	r8,r11,r6
80031192:	f6 01 0a 41 	lsr	r1,r11,r1
80031196:	f3 e8 10 08 	or	r8,r9,r8
8003119a:	f8 03 16 10 	lsr	r3,r12,0x10
8003119e:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
800311a2:	e2 03 0d 00 	divu	r0,r1,r3
800311a6:	f0 0b 16 10 	lsr	r11,r8,0x10
800311aa:	00 9e       	mov	lr,r0
800311ac:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
800311b0:	e0 05 02 49 	mul	r9,r0,r5
800311b4:	12 3b       	cp.w	r11,r9
800311b6:	c0 a2       	brcc	800311ca <__avr32_udiv64+0xf4>
800311b8:	20 1e       	sub	lr,1
800311ba:	18 0b       	add	r11,r12
800311bc:	18 3b       	cp.w	r11,r12
800311be:	c0 63       	brcs	800311ca <__avr32_udiv64+0xf4>
800311c0:	12 3b       	cp.w	r11,r9
800311c2:	f7 be 03 01 	sublo	lr,1
800311c6:	f7 dc e3 0b 	addcs	r11,r11,r12
800311ca:	12 1b       	sub	r11,r9
800311cc:	f1 d8 c0 10 	bfextu	r8,r8,0x0,0x10
800311d0:	f6 03 0d 02 	divu	r2,r11,r3
800311d4:	f1 e3 11 08 	or	r8,r8,r3<<0x10
800311d8:	04 99       	mov	r9,r2
800311da:	e4 05 02 4b 	mul	r11,r2,r5
800311de:	16 38       	cp.w	r8,r11
800311e0:	c0 a2       	brcc	800311f4 <__avr32_udiv64+0x11e>
800311e2:	20 19       	sub	r9,1
800311e4:	18 08       	add	r8,r12
800311e6:	18 38       	cp.w	r8,r12
800311e8:	c0 63       	brcs	800311f4 <__avr32_udiv64+0x11e>
800311ea:	16 38       	cp.w	r8,r11
800311ec:	f7 b9 03 01 	sublo	r9,1
800311f0:	f1 dc e3 08 	addcs	r8,r8,r12
800311f4:	f4 06 09 43 	lsl	r3,r10,r6
800311f8:	f0 0b 01 0b 	sub	r11,r8,r11
800311fc:	f3 ee 11 09 	or	r9,r9,lr<<0x10
80031200:	f8 06 16 10 	lsr	r6,r12,0x10
80031204:	fd dc c0 10 	bfextu	lr,r12,0x0,0x10
80031208:	f6 06 0d 00 	divu	r0,r11,r6
8003120c:	e6 0b 16 10 	lsr	r11,r3,0x10
80031210:	00 9a       	mov	r10,r0
80031212:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80031216:	e0 0e 02 48 	mul	r8,r0,lr
8003121a:	10 3b       	cp.w	r11,r8
8003121c:	c0 a2       	brcc	80031230 <__avr32_udiv64+0x15a>
8003121e:	20 1a       	sub	r10,1
80031220:	18 0b       	add	r11,r12
80031222:	18 3b       	cp.w	r11,r12
80031224:	c0 63       	brcs	80031230 <__avr32_udiv64+0x15a>
80031226:	10 3b       	cp.w	r11,r8
80031228:	f7 ba 03 01 	sublo	r10,1
8003122c:	f7 dc e3 0b 	addcs	r11,r11,r12
80031230:	f6 08 01 01 	sub	r1,r11,r8
80031234:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
80031238:	e2 06 0d 00 	divu	r0,r1,r6
8003123c:	e7 e1 11 03 	or	r3,r3,r1<<0x10
80031240:	00 98       	mov	r8,r0
80031242:	e0 0e 02 4b 	mul	r11,r0,lr
80031246:	16 33       	cp.w	r3,r11
80031248:	c0 82       	brcc	80031258 <__avr32_udiv64+0x182>
8003124a:	20 18       	sub	r8,1
8003124c:	18 03       	add	r3,r12
8003124e:	18 33       	cp.w	r3,r12
80031250:	c0 43       	brcs	80031258 <__avr32_udiv64+0x182>
80031252:	16 33       	cp.w	r3,r11
80031254:	f7 b8 03 01 	sublo	r8,1
80031258:	f1 ea 11 08 	or	r8,r8,r10<<0x10
8003125c:	c6 98       	rjmp	8003132e <__avr32_udiv64+0x258>
8003125e:	16 39       	cp.w	r9,r11
80031260:	e0 8b 00 65 	brhi	8003132a <__avr32_udiv64+0x254>
80031264:	f2 09 12 00 	clz	r9,r9
80031268:	c0 b1       	brne	8003127e <__avr32_udiv64+0x1a8>
8003126a:	10 3a       	cp.w	r10,r8
8003126c:	5f 2a       	srhs	r10
8003126e:	1c 3b       	cp.w	r11,lr
80031270:	5f b8       	srhi	r8
80031272:	10 4a       	or	r10,r8
80031274:	f2 0a 18 00 	cp.b	r10,r9
80031278:	c5 90       	breq	8003132a <__avr32_udiv64+0x254>
8003127a:	30 18       	mov	r8,1
8003127c:	c5 98       	rjmp	8003132e <__avr32_udiv64+0x258>
8003127e:	f0 09 09 46 	lsl	r6,r8,r9
80031282:	f2 03 11 20 	rsub	r3,r9,32
80031286:	fc 09 09 4e 	lsl	lr,lr,r9
8003128a:	f0 03 0a 48 	lsr	r8,r8,r3
8003128e:	f6 09 09 4c 	lsl	r12,r11,r9
80031292:	f4 03 0a 42 	lsr	r2,r10,r3
80031296:	ef 46 ff f4 	st.w	r7[-12],r6
8003129a:	f6 03 0a 43 	lsr	r3,r11,r3
8003129e:	18 42       	or	r2,r12
800312a0:	f1 ee 10 0c 	or	r12,r8,lr
800312a4:	f8 01 16 10 	lsr	r1,r12,0x10
800312a8:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
800312ac:	e6 01 0d 04 	divu	r4,r3,r1
800312b0:	e4 03 16 10 	lsr	r3,r2,0x10
800312b4:	08 9e       	mov	lr,r4
800312b6:	e7 e5 11 03 	or	r3,r3,r5<<0x10
800312ba:	e8 06 02 48 	mul	r8,r4,r6
800312be:	10 33       	cp.w	r3,r8
800312c0:	c0 a2       	brcc	800312d4 <__avr32_udiv64+0x1fe>
800312c2:	20 1e       	sub	lr,1
800312c4:	18 03       	add	r3,r12
800312c6:	18 33       	cp.w	r3,r12
800312c8:	c0 63       	brcs	800312d4 <__avr32_udiv64+0x1fe>
800312ca:	10 33       	cp.w	r3,r8
800312cc:	f7 be 03 01 	sublo	lr,1
800312d0:	e7 dc e3 03 	addcs	r3,r3,r12
800312d4:	10 13       	sub	r3,r8
800312d6:	f7 d2 c0 10 	bfextu	r11,r2,0x0,0x10
800312da:	e6 01 0d 00 	divu	r0,r3,r1
800312de:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
800312e2:	00 98       	mov	r8,r0
800312e4:	e0 06 02 46 	mul	r6,r0,r6
800312e8:	0c 3b       	cp.w	r11,r6
800312ea:	c0 a2       	brcc	800312fe <__avr32_udiv64+0x228>
800312ec:	20 18       	sub	r8,1
800312ee:	18 0b       	add	r11,r12
800312f0:	18 3b       	cp.w	r11,r12
800312f2:	c0 63       	brcs	800312fe <__avr32_udiv64+0x228>
800312f4:	0c 3b       	cp.w	r11,r6
800312f6:	f7 dc e3 0b 	addcs	r11,r11,r12
800312fa:	f7 b8 03 01 	sublo	r8,1
800312fe:	f1 ee 11 08 	or	r8,r8,lr<<0x10
80031302:	ee f4 ff f4 	ld.w	r4,r7[-12]
80031306:	0c 1b       	sub	r11,r6
80031308:	f0 04 06 42 	mulu.d	r2,r8,r4
8003130c:	06 95       	mov	r5,r3
8003130e:	16 35       	cp.w	r5,r11
80031310:	e0 8b 00 0a 	brhi	80031324 <__avr32_udiv64+0x24e>
80031314:	5f 0b       	sreq	r11
80031316:	f4 09 09 49 	lsl	r9,r10,r9
8003131a:	12 32       	cp.w	r2,r9
8003131c:	5f b9       	srhi	r9
8003131e:	f7 e9 00 09 	and	r9,r11,r9
80031322:	c0 60       	breq	8003132e <__avr32_udiv64+0x258>
80031324:	20 18       	sub	r8,1
80031326:	30 09       	mov	r9,0
80031328:	c0 38       	rjmp	8003132e <__avr32_udiv64+0x258>
8003132a:	30 09       	mov	r9,0
8003132c:	12 98       	mov	r8,r9
8003132e:	10 9a       	mov	r10,r8
80031330:	12 93       	mov	r3,r9
80031332:	10 92       	mov	r2,r8
80031334:	12 9b       	mov	r11,r9
80031336:	2f dd       	sub	sp,-12
80031338:	d8 32       	popm	r0-r7,pc
8003133a:	d7 03       	nop

8003133c <__errno>:
8003133c:	48 28       	lddpc	r8,80031344 <__errno+0x8>
8003133e:	70 0c       	ld.w	r12,r8[0x0]
80031340:	2f 4c       	sub	r12,-12
80031342:	5e fc       	retal	r12
80031344:	00 00       	add	r0,r0
80031346:	24 2c       	sub	r12,66

80031348 <memcpy>:
80031348:	58 8a       	cp.w	r10,8
8003134a:	c2 f5       	brlt	800313a8 <memcpy+0x60>
8003134c:	f9 eb 10 09 	or	r9,r12,r11
80031350:	e2 19 00 03 	andl	r9,0x3,COH
80031354:	e0 81 00 97 	brne	80031482 <memcpy+0x13a>
80031358:	e0 4a 00 20 	cp.w	r10,32
8003135c:	c3 b4       	brge	800313d2 <memcpy+0x8a>
8003135e:	f4 08 14 02 	asr	r8,r10,0x2
80031362:	f0 09 11 08 	rsub	r9,r8,8
80031366:	fe 09 00 2f 	add	pc,pc,r9<<0x2
8003136a:	76 69       	ld.w	r9,r11[0x18]
8003136c:	99 69       	st.w	r12[0x18],r9
8003136e:	76 59       	ld.w	r9,r11[0x14]
80031370:	99 59       	st.w	r12[0x14],r9
80031372:	76 49       	ld.w	r9,r11[0x10]
80031374:	99 49       	st.w	r12[0x10],r9
80031376:	76 39       	ld.w	r9,r11[0xc]
80031378:	99 39       	st.w	r12[0xc],r9
8003137a:	76 29       	ld.w	r9,r11[0x8]
8003137c:	99 29       	st.w	r12[0x8],r9
8003137e:	76 19       	ld.w	r9,r11[0x4]
80031380:	99 19       	st.w	r12[0x4],r9
80031382:	76 09       	ld.w	r9,r11[0x0]
80031384:	99 09       	st.w	r12[0x0],r9
80031386:	f6 08 00 2b 	add	r11,r11,r8<<0x2
8003138a:	f8 08 00 28 	add	r8,r12,r8<<0x2
8003138e:	e0 1a 00 03 	andl	r10,0x3
80031392:	f4 0a 11 04 	rsub	r10,r10,4
80031396:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
8003139a:	17 a9       	ld.ub	r9,r11[0x2]
8003139c:	b0 a9       	st.b	r8[0x2],r9
8003139e:	17 99       	ld.ub	r9,r11[0x1]
800313a0:	b0 99       	st.b	r8[0x1],r9
800313a2:	17 89       	ld.ub	r9,r11[0x0]
800313a4:	b0 89       	st.b	r8[0x0],r9
800313a6:	5e fc       	retal	r12
800313a8:	f4 0a 11 09 	rsub	r10,r10,9
800313ac:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
800313b0:	17 f9       	ld.ub	r9,r11[0x7]
800313b2:	b8 f9       	st.b	r12[0x7],r9
800313b4:	17 e9       	ld.ub	r9,r11[0x6]
800313b6:	b8 e9       	st.b	r12[0x6],r9
800313b8:	17 d9       	ld.ub	r9,r11[0x5]
800313ba:	b8 d9       	st.b	r12[0x5],r9
800313bc:	17 c9       	ld.ub	r9,r11[0x4]
800313be:	b8 c9       	st.b	r12[0x4],r9
800313c0:	17 b9       	ld.ub	r9,r11[0x3]
800313c2:	b8 b9       	st.b	r12[0x3],r9
800313c4:	17 a9       	ld.ub	r9,r11[0x2]
800313c6:	b8 a9       	st.b	r12[0x2],r9
800313c8:	17 99       	ld.ub	r9,r11[0x1]
800313ca:	b8 99       	st.b	r12[0x1],r9
800313cc:	17 89       	ld.ub	r9,r11[0x0]
800313ce:	b8 89       	st.b	r12[0x0],r9
800313d0:	5e fc       	retal	r12
800313d2:	eb cd 40 c0 	pushm	r6-r7,lr
800313d6:	18 99       	mov	r9,r12
800313d8:	22 0a       	sub	r10,32
800313da:	b7 07       	ld.d	r6,r11++
800313dc:	b3 26       	st.d	r9++,r6
800313de:	b7 07       	ld.d	r6,r11++
800313e0:	b3 26       	st.d	r9++,r6
800313e2:	b7 07       	ld.d	r6,r11++
800313e4:	b3 26       	st.d	r9++,r6
800313e6:	b7 07       	ld.d	r6,r11++
800313e8:	b3 26       	st.d	r9++,r6
800313ea:	22 0a       	sub	r10,32
800313ec:	cf 74       	brge	800313da <memcpy+0x92>
800313ee:	2f 0a       	sub	r10,-16
800313f0:	c0 65       	brlt	800313fc <memcpy+0xb4>
800313f2:	b7 07       	ld.d	r6,r11++
800313f4:	b3 26       	st.d	r9++,r6
800313f6:	b7 07       	ld.d	r6,r11++
800313f8:	b3 26       	st.d	r9++,r6
800313fa:	21 0a       	sub	r10,16
800313fc:	5c 3a       	neg	r10
800313fe:	fe 0a 00 3f 	add	pc,pc,r10<<0x3
80031402:	d7 03       	nop
80031404:	d7 03       	nop
80031406:	f7 36 00 0e 	ld.ub	r6,r11[14]
8003140a:	f3 66 00 0e 	st.b	r9[14],r6
8003140e:	f7 36 00 0d 	ld.ub	r6,r11[13]
80031412:	f3 66 00 0d 	st.b	r9[13],r6
80031416:	f7 36 00 0c 	ld.ub	r6,r11[12]
8003141a:	f3 66 00 0c 	st.b	r9[12],r6
8003141e:	f7 36 00 0b 	ld.ub	r6,r11[11]
80031422:	f3 66 00 0b 	st.b	r9[11],r6
80031426:	f7 36 00 0a 	ld.ub	r6,r11[10]
8003142a:	f3 66 00 0a 	st.b	r9[10],r6
8003142e:	f7 36 00 09 	ld.ub	r6,r11[9]
80031432:	f3 66 00 09 	st.b	r9[9],r6
80031436:	f7 36 00 08 	ld.ub	r6,r11[8]
8003143a:	f3 66 00 08 	st.b	r9[8],r6
8003143e:	f7 36 00 07 	ld.ub	r6,r11[7]
80031442:	f3 66 00 07 	st.b	r9[7],r6
80031446:	f7 36 00 06 	ld.ub	r6,r11[6]
8003144a:	f3 66 00 06 	st.b	r9[6],r6
8003144e:	f7 36 00 05 	ld.ub	r6,r11[5]
80031452:	f3 66 00 05 	st.b	r9[5],r6
80031456:	f7 36 00 04 	ld.ub	r6,r11[4]
8003145a:	f3 66 00 04 	st.b	r9[4],r6
8003145e:	f7 36 00 03 	ld.ub	r6,r11[3]
80031462:	f3 66 00 03 	st.b	r9[3],r6
80031466:	f7 36 00 02 	ld.ub	r6,r11[2]
8003146a:	f3 66 00 02 	st.b	r9[2],r6
8003146e:	f7 36 00 01 	ld.ub	r6,r11[1]
80031472:	f3 66 00 01 	st.b	r9[1],r6
80031476:	f7 36 00 00 	ld.ub	r6,r11[0]
8003147a:	f3 66 00 00 	st.b	r9[0],r6
8003147e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80031482:	20 1a       	sub	r10,1
80031484:	f6 0a 07 09 	ld.ub	r9,r11[r10]
80031488:	f8 0a 0b 09 	st.b	r12[r10],r9
8003148c:	cf b1       	brne	80031482 <memcpy+0x13a>
8003148e:	5e fc       	retal	r12

80031490 <memset>:
80031490:	18 98       	mov	r8,r12
80031492:	c0 38       	rjmp	80031498 <memset+0x8>
80031494:	10 cb       	st.b	r8++,r11
80031496:	20 1a       	sub	r10,1
80031498:	58 0a       	cp.w	r10,0
8003149a:	cf d1       	brne	80031494 <memset+0x4>
8003149c:	5e fc       	retal	r12

8003149e <strcpy>:
8003149e:	30 08       	mov	r8,0
800314a0:	f6 08 07 09 	ld.ub	r9,r11[r8]
800314a4:	f8 08 0b 09 	st.b	r12[r8],r9
800314a8:	2f f8       	sub	r8,-1
800314aa:	58 09       	cp.w	r9,0
800314ac:	cf a1       	brne	800314a0 <strcpy+0x2>
800314ae:	5e fc       	retal	r12

800314b0 <strlen>:
800314b0:	30 09       	mov	r9,0
800314b2:	18 98       	mov	r8,r12
800314b4:	c0 28       	rjmp	800314b8 <strlen+0x8>
800314b6:	2f f8       	sub	r8,-1
800314b8:	11 8a       	ld.ub	r10,r8[0x0]
800314ba:	f2 0a 18 00 	cp.b	r10,r9
800314be:	cf c1       	brne	800314b6 <strlen+0x6>
800314c0:	f0 0c 01 0c 	sub	r12,r8,r12
800314c4:	5e fc       	retal	r12

Disassembly of section .exception:

80031600 <_evba>:
_evba:

        .org  0x000
        // Unrecoverable Exception.
_handle_Unrecoverable_Exception:
        rjmp $
80031600:	c0 08       	rjmp	80031600 <_evba>
	...

80031604 <_handle_TLB_Multiple_Hit>:

        .org  0x004
        // TLB Multiple Hit.
_handle_TLB_Multiple_Hit:
        rjmp $
80031604:	c0 08       	rjmp	80031604 <_handle_TLB_Multiple_Hit>
	...

80031608 <_handle_Bus_Error_Data_Fetch>:

        .org  0x008
        // Bus Error Data Fetch.
_handle_Bus_Error_Data_Fetch:
        rjmp $
80031608:	c0 08       	rjmp	80031608 <_handle_Bus_Error_Data_Fetch>
	...

8003160c <_handle_Bus_Error_Instruction_Fetch>:

        .org  0x00C
         // Bus Error Instruction Fetch.
_handle_Bus_Error_Instruction_Fetch:
        rjmp $
8003160c:	c0 08       	rjmp	8003160c <_handle_Bus_Error_Instruction_Fetch>
	...

80031610 <_handle_NMI>:

        .org  0x010
        // NMI.
_handle_NMI:
		lda.w   pc, eic_nmi_handler
80031610:	4c ff       	lddpc	pc,8003174c <ipr_val+0x10>
	...

80031614 <_handle_Instruction_Address>:
        .org  0x014
        // Instruction Address.
_handle_Instruction_Address:
        rjmp $
80031614:	c0 08       	rjmp	80031614 <_handle_Instruction_Address>
	...

80031618 <_handle_ITLB_Protection>:

        .org  0x018
        // ITLB Protection.
_handle_ITLB_Protection:
        rjmp $
80031618:	c0 08       	rjmp	80031618 <_handle_ITLB_Protection>
	...

8003161c <_handle_Breakpoint>:

        .org  0x01C
        // Breakpoint.
_handle_Breakpoint:
        rjmp $
8003161c:	c0 08       	rjmp	8003161c <_handle_Breakpoint>
	...

80031620 <_handle_Illegal_Opcode>:

        .org  0x020
        // Illegal Opcode.
_handle_Illegal_Opcode:
        rjmp $
80031620:	c0 08       	rjmp	80031620 <_handle_Illegal_Opcode>
	...

80031624 <_handle_Unimplemented_Instruction>:

        .org  0x024
        // Unimplemented Instruction.
_handle_Unimplemented_Instruction:
        rjmp $
80031624:	c0 08       	rjmp	80031624 <_handle_Unimplemented_Instruction>
	...

80031628 <_handle_Privilege_Violation>:

        .org  0x028
        // Privilege Violation.
_handle_Privilege_Violation:
        rjmp $
80031628:	c0 08       	rjmp	80031628 <_handle_Privilege_Violation>
	...

8003162c <_handle_Floating_Point>:

        .org  0x02C
        // Floating-Point: UNUSED IN AVR32UC and AVR32AP.
_handle_Floating_Point:
        rjmp $
8003162c:	c0 08       	rjmp	8003162c <_handle_Floating_Point>
	...

80031630 <_handle_Coprocessor_Absent>:

        .org  0x030
        // Coprocessor Absent: UNUSED IN AVR32UC.
_handle_Coprocessor_Absent:
        rjmp $
80031630:	c0 08       	rjmp	80031630 <_handle_Coprocessor_Absent>
	...

80031634 <_handle_Data_Address_Read>:

        .org  0x034
        // Data Address (Read).
_handle_Data_Address_Read:
        rjmp $
80031634:	c0 08       	rjmp	80031634 <_handle_Data_Address_Read>
	...

80031638 <_handle_Data_Address_Write>:

        .org  0x038
        // Data Address (Write).
_handle_Data_Address_Write:
        rjmp $
80031638:	c0 08       	rjmp	80031638 <_handle_Data_Address_Write>
	...

8003163c <_handle_DTLB_Protection_Read>:

        .org  0x03C
        // DTLB Protection (Read).
_handle_DTLB_Protection_Read:
        rjmp $
8003163c:	c0 08       	rjmp	8003163c <_handle_DTLB_Protection_Read>
	...

80031640 <_handle_DTLB_Protection_Write>:

        .org  0x040
        // DTLB Protection (Write).
_handle_DTLB_Protection_Write:
        rjmp $
80031640:	c0 08       	rjmp	80031640 <_handle_DTLB_Protection_Write>
	...

80031644 <_handle_DTLB_Modified>:

        .org  0x044
        // DTLB Modified: UNUSED IN AVR32UC.
_handle_DTLB_Modified:
        rjmp $
80031644:	c0 08       	rjmp	80031644 <_handle_DTLB_Modified>
	...

80031650 <_handle_ITLB_Miss>:

        .org  0x050
        // ITLB Miss.
_handle_ITLB_Miss:
        rjmp $
80031650:	c0 08       	rjmp	80031650 <_handle_ITLB_Miss>
	...

80031660 <_handle_DTLB_Miss_Read>:

        .org  0x060
        // DTLB Miss (Read).
_handle_DTLB_Miss_Read:
        rjmp $
80031660:	c0 08       	rjmp	80031660 <_handle_DTLB_Miss_Read>
	...

80031670 <_handle_DTLB_Miss_Write>:

        .org  0x070
        // DTLB Miss (Write).
_handle_DTLB_Miss_Write:
        rjmp $
80031670:	c0 08       	rjmp	80031670 <_handle_DTLB_Miss_Write>
	...

80031700 <_handle_Supervisor_Call>:

        .org  0x100
        // Supervisor Call.
_handle_Supervisor_Call:
        rjmp $
80031700:	c0 08       	rjmp	80031700 <_handle_Supervisor_Call>
80031702:	d7 03       	nop

80031704 <_int0>:
  // CPU upon interrupt entry. No other register is saved by hardware.
#elif __AVR32_AP__
  // PC and SR are automatically saved in respectively RAR_INTx and RSR_INTx by
  // the CPU upon interrupt entry. No other register is saved by hardware.
  pushm   r8-r12, lr
#endif
80031704:	30 0c       	mov	r12,0
80031706:	fe b0 af fd 	rcall	80027700 <_get_interrupt_handler>
8003170a:	58 0c       	cp.w	r12,0
8003170c:	f8 0f 17 10 	movne	pc,r12
80031710:	d6 03       	rete

80031712 <_int1>:
80031712:	30 1c       	mov	r12,1
80031714:	fe b0 af f6 	rcall	80027700 <_get_interrupt_handler>
80031718:	58 0c       	cp.w	r12,0
8003171a:	f8 0f 17 10 	movne	pc,r12
8003171e:	d6 03       	rete

80031720 <_int2>:
80031720:	30 2c       	mov	r12,2
80031722:	fe b0 af ef 	rcall	80027700 <_get_interrupt_handler>
80031726:	58 0c       	cp.w	r12,0
80031728:	f8 0f 17 10 	movne	pc,r12
8003172c:	d6 03       	rete

8003172e <_int3>:
8003172e:	30 3c       	mov	r12,3
80031730:	fe b0 af e8 	rcall	80027700 <_get_interrupt_handler>
80031734:	58 0c       	cp.w	r12,0
80031736:	f8 0f 17 10 	movne	pc,r12
8003173a:	d6 03       	rete

8003173c <ipr_val>:
8003173c:	00 00 01 04 40 00 01 12 80 00 01 20 c0 00 01 2e     ....@...... ....
8003174c:	80 01 60 58 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ..`X............
8003175c:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
8003176c:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
8003177c:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
8003178c:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
8003179c:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
800317ac:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
800317bc:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
800317cc:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
800317dc:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
800317ec:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
800317fc:	d7 03 d7 03                                         ....
