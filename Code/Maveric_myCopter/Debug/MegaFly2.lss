
MegaFly2.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002008  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0002f6de  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  80031800  80031800  00031c00  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000644  80031a00  80031a00  00031e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .dalign       00000004  80032044  80032044  00032444  2**0
                  ALLOC
  6 .data.rel.ro  00000178  00000004  80032048  00032804  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .got          000008ec  0000017c  800321c0  0003297c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000019d4  00000a68  80032aac  00033268  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .balign       00000004  0000243c  80034480  00034c3c  2**0
                  ALLOC
 10 .bss          000072a8  00002440  80034480  00034c40  2**2
                  ALLOC
 11 .comment      00000030  00000000  00000000  00034c3c  2**0
                  CONTENTS, READONLY
 12 .debug_aranges 00000c08  00000000  00000000  00034c70  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubnames 00007a1c  00000000  00000000  00035878  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_info   0005e5a2  00000000  00000000  0003d294  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 00009319  00000000  00000000  0009b836  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   000119ea  00000000  00000000  000a4b4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  000088e4  00000000  00000000  000b653c  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000ecb6  00000000  00000000  000bee20  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_loc    0000da2d  00000000  00000000  000cdad6  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .stack        00001000  0000f000  0000f000  00000400  2**0
                  ALLOC
 21 .debug_ranges 000005d8  00000000  00000000  000db508  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_trampoline>:

  .global _trampoline
  .type _trampoline, @function
_trampoline:
  // Jump to program start.
  rjmp    program_start
80000000:	e0 8f 10 00 	bral	80002000 <program_start>
	...

80002000 <program_start>:

  .org  PROGRAM_START_OFFSET
program_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80002000:	fe ff 00 04 	ld.w	pc,pc[4]
80002004:	80 02       	ld.sh	r2,r0[0x0]
80002006:	bf b8       	sbr	r8,0x1f

Disassembly of section .text:

80002008 <crc_accumulate>:
 *
 * @param data new char to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate(uint8_t data, uint16_t *crcAccum)
{
80002008:	eb cd 40 80 	pushm	r7,lr
8000200c:	1a 97       	mov	r7,sp
8000200e:	20 3d       	sub	sp,12
80002010:	18 98       	mov	r8,r12
80002012:	ef 4b ff f4 	st.w	r7[-12],r11
80002016:	ef 68 ff f8 	st.b	r7[-8],r8
        /*Accumulate one byte of data into the CRC*/
        uint8_t tmp;

        tmp = data ^ (uint8_t)(*crcAccum &0xff);
8000201a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000201e:	90 08       	ld.sh	r8,r8[0x0]
80002020:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80002024:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80002028:	f3 e8 20 08 	eor	r8,r9,r8
8000202c:	ef 68 ff ff 	st.b	r7[-1],r8
        tmp ^= (tmp<<4);
80002030:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80002034:	a5 68       	lsl	r8,0x4
80002036:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000203a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000203e:	f3 e8 20 08 	eor	r8,r9,r8
80002042:	5c 58       	castu.b	r8
80002044:	ef 68 ff ff 	st.b	r7[-1],r8
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
80002048:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000204c:	90 08       	ld.sh	r8,r8[0x0]
8000204e:	5c 78       	castu.h	r8
80002050:	a9 88       	lsr	r8,0x8
80002052:	5c 88       	casts.h	r8
80002054:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
80002058:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000205c:	a9 68       	lsl	r8,0x8
8000205e:	5c 88       	casts.h	r8
80002060:	f3 e8 20 08 	eor	r8,r9,r8
80002064:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
80002068:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000206c:	a3 78       	lsl	r8,0x3
8000206e:	5c 88       	casts.h	r8
80002070:	f3 e8 20 08 	eor	r8,r9,r8
80002074:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
80002078:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000207c:	a5 88       	lsr	r8,0x4
8000207e:	5c 58       	castu.b	r8
80002080:	f3 e8 20 08 	eor	r8,r9,r8
80002084:	5c 88       	casts.h	r8
80002086:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000208a:	b2 08       	st.h	r9[0x0],r8
}
8000208c:	2f dd       	sub	sp,-12
8000208e:	e3 cd 80 80 	ldm	sp++,r7,pc

80002092 <crc_init>:
 * @brief Initiliaze the buffer for the X.25 CRC
 *
 * @param crcAccum the 16 bit X.25 CRC
 */
static inline void crc_init(uint16_t* crcAccum)
{
80002092:	eb cd 40 80 	pushm	r7,lr
80002096:	1a 97       	mov	r7,sp
80002098:	20 1d       	sub	sp,4
8000209a:	ef 4c ff fc 	st.w	r7[-4],r12
        *crcAccum = X25_INIT_CRC;
8000209e:	ee f9 ff fc 	ld.w	r9,r7[-4]
800020a2:	3f f8       	mov	r8,-1
800020a4:	b2 08       	st.h	r9[0x0],r8
}
800020a6:	2f fd       	sub	sp,-4
800020a8:	e3 cd 80 80 	ldm	sp++,r7,pc

800020ac <crc_calculate>:
 * @param  pBuffer buffer containing the byte array to hash
 * @param  length  length of the byte array
 * @return the checksum over the buffer bytes
 **/
static inline uint16_t crc_calculate(const uint8_t* pBuffer, uint16_t length)
{
800020ac:	eb cd 40 c0 	pushm	r6-r7,lr
800020b0:	1a 97       	mov	r7,sp
800020b2:	20 3d       	sub	sp,12
800020b4:	49 76       	lddpc	r6,80002110 <crc_calculate+0x64>
800020b6:	1e 26       	rsub	r6,pc
800020b8:	ef 4c ff f8 	st.w	r7[-8],r12
800020bc:	16 98       	mov	r8,r11
800020be:	ef 58 ff f4 	st.h	r7[-12],r8
        uint16_t crcTmp;
        crc_init(&crcTmp);
800020c2:	ee c8 00 02 	sub	r8,r7,2
800020c6:	10 9c       	mov	r12,r8
800020c8:	ce 5f       	rcall	80002092 <crc_init>
	while (length--) {
800020ca:	c0 e8       	rjmp	800020e6 <crc_calculate+0x3a>
                crc_accumulate(*pBuffer++, &crcTmp);
800020cc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800020d0:	11 88       	ld.ub	r8,r8[0x0]
800020d2:	ee f9 ff f8 	ld.w	r9,r7[-8]
800020d6:	2f f9       	sub	r9,-1
800020d8:	ef 49 ff f8 	st.w	r7[-8],r9
800020dc:	ee c9 00 02 	sub	r9,r7,2
800020e0:	12 9b       	mov	r11,r9
800020e2:	10 9c       	mov	r12,r8
800020e4:	c9 2f       	rcall	80002008 <crc_accumulate>
 **/
static inline uint16_t crc_calculate(const uint8_t* pBuffer, uint16_t length)
{
        uint16_t crcTmp;
        crc_init(&crcTmp);
	while (length--) {
800020e6:	ef 09 ff f4 	ld.sh	r9,r7[-12]
800020ea:	30 08       	mov	r8,0
800020ec:	f0 09 19 00 	cp.h	r9,r8
800020f0:	5f 18       	srne	r8
800020f2:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800020f6:	ef 08 ff f4 	ld.sh	r8,r7[-12]
800020fa:	20 18       	sub	r8,1
800020fc:	ef 58 ff f4 	st.h	r7[-12],r8
80002100:	58 09       	cp.w	r9,0
80002102:	ce 51       	brne	800020cc <crc_calculate+0x20>
                crc_accumulate(*pBuffer++, &crcTmp);
        }
        return crcTmp;
80002104:	ef 08 ff fe 	ld.sh	r8,r7[-2]
}
80002108:	10 9c       	mov	r12,r8
8000210a:	2f dd       	sub	sp,-12
8000210c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002110:	80 00       	ld.sh	r0,r0[0x0]
80002112:	1f 3a       	ld.ub	r10,pc++

80002114 <crc_accumulate_buffer>:
 *
 * @param data new bytes to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate_buffer(uint16_t *crcAccum, const char *pBuffer, uint8_t length)
{
80002114:	eb cd 40 c0 	pushm	r6-r7,lr
80002118:	1a 97       	mov	r7,sp
8000211a:	20 4d       	sub	sp,16
8000211c:	49 66       	lddpc	r6,80002174 <crc_accumulate_buffer+0x60>
8000211e:	1e 26       	rsub	r6,pc
80002120:	ef 4c ff f8 	st.w	r7[-8],r12
80002124:	ef 4b ff f4 	st.w	r7[-12],r11
80002128:	14 98       	mov	r8,r10
8000212a:	ef 68 ff f0 	st.b	r7[-16],r8
	const uint8_t *p = (const uint8_t *)pBuffer;
8000212e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002132:	ef 48 ff fc 	st.w	r7[-4],r8
	while (length--) {
80002136:	c0 d8       	rjmp	80002150 <crc_accumulate_buffer+0x3c>
                crc_accumulate(*p++, crcAccum);
80002138:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000213c:	11 88       	ld.ub	r8,r8[0x0]
8000213e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002142:	2f f9       	sub	r9,-1
80002144:	ef 49 ff fc 	st.w	r7[-4],r9
80002148:	ee fb ff f8 	ld.w	r11,r7[-8]
8000214c:	10 9c       	mov	r12,r8
8000214e:	c5 df       	rcall	80002008 <crc_accumulate>
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate_buffer(uint16_t *crcAccum, const char *pBuffer, uint8_t length)
{
	const uint8_t *p = (const uint8_t *)pBuffer;
	while (length--) {
80002150:	ef 39 ff f0 	ld.ub	r9,r7[-16]
80002154:	30 08       	mov	r8,0
80002156:	f0 09 18 00 	cp.b	r9,r8
8000215a:	5f 18       	srne	r8
8000215c:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80002160:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80002164:	20 18       	sub	r8,1
80002166:	ef 68 ff f0 	st.b	r7[-16],r8
8000216a:	58 09       	cp.w	r9,0
8000216c:	ce 61       	brne	80002138 <crc_accumulate_buffer+0x24>
                crc_accumulate(*p++, crcAccum);
        }
}
8000216e:	2f cd       	sub	sp,-16
80002170:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002174:	80 00       	ld.sh	r0,r0[0x0]
80002176:	1f a2       	ld.ub	r2,pc[0x2]

80002178 <mavlink_get_channel_status>:
/*
 * Internal function to give access to the channel status for each channel
 */
#ifndef MAVLINK_GET_CHANNEL_STATUS
MAVLINK_HELPER mavlink_status_t* mavlink_get_channel_status(uint8_t chan)
{
80002178:	eb cd 40 c0 	pushm	r6-r7,lr
8000217c:	1a 97       	mov	r7,sp
8000217e:	20 1d       	sub	sp,4
80002180:	48 96       	lddpc	r6,800021a4 <mavlink_get_channel_status+0x2c>
80002182:	1e 26       	rsub	r6,pc
80002184:	18 98       	mov	r8,r12
80002186:	ef 68 ff fc 	st.b	r7[-4],r8
	static mavlink_status_t m_mavlink_status[MAVLINK_COMM_NUM_BUFFERS];
	return &m_mavlink_status[chan];
8000218a:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000218e:	f0 09 15 04 	lsl	r9,r8,0x4
80002192:	ec f8 08 e8 	ld.w	r8,r6[2280]
80002196:	f2 08 00 08 	add	r8,r9,r8
}
8000219a:	10 9c       	mov	r12,r8
8000219c:	2f fd       	sub	sp,-4
8000219e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800021a2:	00 00       	add	r0,r0
800021a4:	80 00       	ld.sh	r0,r0[0x0]
800021a6:	20 06       	sub	r6,0

800021a8 <_mav_finalize_message_chan_send>:
MAVLINK_HELPER void _mav_finalize_message_chan_send(mavlink_channel_t chan, uint8_t msgid, const char *packet, 
						    uint8_t length, uint8_t crc_extra)
#else
MAVLINK_HELPER void _mav_finalize_message_chan_send(mavlink_channel_t chan, uint8_t msgid, const char *packet, uint8_t length)
#endif
{
800021a8:	eb cd 40 c0 	pushm	r6-r7,lr
800021ac:	1a 97       	mov	r7,sp
800021ae:	20 9d       	sub	sp,36
800021b0:	4b d6       	lddpc	r6,800022a4 <_mav_finalize_message_chan_send+0xfc>
800021b2:	1e 26       	rsub	r6,pc
800021b4:	ef 4c ff ec 	st.w	r7[-20],r12
800021b8:	ef 4a ff e4 	st.w	r7[-28],r10
800021bc:	16 9a       	mov	r10,r11
800021be:	ef 6a ff e8 	st.b	r7[-24],r10
800021c2:	ef 69 ff e0 	st.b	r7[-32],r9
800021c6:	ef 68 ff dc 	st.b	r7[-36],r8
	uint16_t checksum;
	uint8_t buf[MAVLINK_NUM_HEADER_BYTES];
	uint8_t ck[2];
	mavlink_status_t *status = mavlink_get_channel_status(chan);
800021ca:	ee f8 ff ec 	ld.w	r8,r7[-20]
800021ce:	5c 58       	castu.b	r8
800021d0:	10 9c       	mov	r12,r8
800021d2:	cd 3f       	rcall	80002178 <mavlink_get_channel_status>
800021d4:	18 98       	mov	r8,r12
800021d6:	ef 48 ff fc 	st.w	r7[-4],r8
	buf[0] = MAVLINK_STX;
800021da:	3f e8       	mov	r8,-2
800021dc:	ef 68 ff f4 	st.b	r7[-12],r8
	buf[1] = length;
800021e0:	ef 38 ff e0 	ld.ub	r8,r7[-32]
800021e4:	ef 68 ff f5 	st.b	r7[-11],r8
	buf[2] = status->current_tx_seq;
800021e8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800021ec:	f1 38 00 0a 	ld.ub	r8,r8[10]
800021f0:	ef 68 ff f6 	st.b	r7[-10],r8
	buf[3] = mavlink_system.sysid;
800021f4:	ec f8 00 74 	ld.w	r8,r6[116]
800021f8:	11 88       	ld.ub	r8,r8[0x0]
800021fa:	ef 68 ff f7 	st.b	r7[-9],r8
	buf[4] = mavlink_system.compid;
800021fe:	ec f8 00 74 	ld.w	r8,r6[116]
80002202:	11 98       	ld.ub	r8,r8[0x1]
80002204:	ef 68 ff f8 	st.b	r7[-8],r8
	buf[5] = msgid;
80002208:	ef 38 ff e8 	ld.ub	r8,r7[-24]
8000220c:	ef 68 ff f9 	st.b	r7[-7],r8
	status->current_tx_seq++;
80002210:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002214:	f1 38 00 0a 	ld.ub	r8,r8[10]
80002218:	2f f8       	sub	r8,-1
8000221a:	5c 58       	castu.b	r8
8000221c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002220:	f3 68 00 0a 	st.b	r9[10],r8
	checksum = crc_calculate((uint8_t*)&buf[1], MAVLINK_CORE_HEADER_LEN);
80002224:	ee c8 00 0c 	sub	r8,r7,12
80002228:	2f f8       	sub	r8,-1
8000222a:	30 5b       	mov	r11,5
8000222c:	10 9c       	mov	r12,r8
8000222e:	c3 ff       	rcall	800020ac <crc_calculate>
80002230:	18 98       	mov	r8,r12
80002232:	5c 88       	casts.h	r8
80002234:	ef 58 ff fa 	st.h	r7[-6],r8
	crc_accumulate_buffer(&checksum, packet, length);
80002238:	ef 39 ff e0 	ld.ub	r9,r7[-32]
8000223c:	ee c8 00 06 	sub	r8,r7,6
80002240:	12 9a       	mov	r10,r9
80002242:	ee fb ff e4 	ld.w	r11,r7[-28]
80002246:	10 9c       	mov	r12,r8
80002248:	c6 6f       	rcall	80002114 <crc_accumulate_buffer>
#if MAVLINK_CRC_EXTRA
	crc_accumulate(crc_extra, &checksum);
8000224a:	ef 38 ff dc 	ld.ub	r8,r7[-36]
8000224e:	ee c9 00 06 	sub	r9,r7,6
80002252:	12 9b       	mov	r11,r9
80002254:	10 9c       	mov	r12,r8
80002256:	cd 9e       	rcall	80002008 <crc_accumulate>
#endif
	ck[0] = (uint8_t)(checksum & 0xFF);
80002258:	ef 08 ff fa 	ld.sh	r8,r7[-6]
8000225c:	5c 58       	castu.b	r8
8000225e:	ef 68 ff f0 	st.b	r7[-16],r8
	ck[1] = (uint8_t)(checksum >> 8);
80002262:	ef 08 ff fa 	ld.sh	r8,r7[-6]
80002266:	5c 78       	castu.h	r8
80002268:	a9 88       	lsr	r8,0x8
8000226a:	5c 88       	casts.h	r8
8000226c:	5c 58       	castu.b	r8
8000226e:	ef 68 ff f1 	st.b	r7[-15],r8

	MAVLINK_START_UART_SEND(chan, MAVLINK_NUM_NON_PAYLOAD_BYTES + (uint16_t)length);
	_mavlink_send_uart(chan, (const char *)buf, MAVLINK_NUM_HEADER_BYTES);
80002272:	ee c8 00 0c 	sub	r8,r7,12
80002276:	30 6a       	mov	r10,6
80002278:	10 9b       	mov	r11,r8
8000227a:	ee fc ff ec 	ld.w	r12,r7[-20]
8000227e:	c1 5c       	rcall	800022a8 <_mavlink_send_uart>
	_mavlink_send_uart(chan, packet, length);
80002280:	ef 38 ff e0 	ld.ub	r8,r7[-32]
80002284:	10 9a       	mov	r10,r8
80002286:	ee fb ff e4 	ld.w	r11,r7[-28]
8000228a:	ee fc ff ec 	ld.w	r12,r7[-20]
8000228e:	c0 dc       	rcall	800022a8 <_mavlink_send_uart>
	_mavlink_send_uart(chan, (const char *)ck, 2);
80002290:	ee c8 00 10 	sub	r8,r7,16
80002294:	30 2a       	mov	r10,2
80002296:	10 9b       	mov	r11,r8
80002298:	ee fc ff ec 	ld.w	r12,r7[-20]
8000229c:	c0 6c       	rcall	800022a8 <_mavlink_send_uart>
	MAVLINK_END_UART_SEND(chan, MAVLINK_NUM_NON_PAYLOAD_BYTES + (uint16_t)length);
}
8000229e:	2f 7d       	sub	sp,-36
800022a0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800022a4:	80 00       	ld.sh	r0,r0[0x0]
800022a6:	20 36       	sub	r6,3

800022a8 <_mavlink_send_uart>:
    }
}
 */

MAVLINK_HELPER void _mavlink_send_uart(mavlink_channel_t chan, const char *buf, uint16_t len)
{
800022a8:	eb cd 40 c0 	pushm	r6-r7,lr
800022ac:	1a 97       	mov	r7,sp
800022ae:	20 4d       	sub	sp,16
800022b0:	49 46       	lddpc	r6,80002300 <_mavlink_send_uart+0x58>
800022b2:	1e 26       	rsub	r6,pc
800022b4:	ef 4c ff f8 	st.w	r7[-8],r12
800022b8:	ef 4b ff f4 	st.w	r7[-12],r11
800022bc:	14 98       	mov	r8,r10
800022be:	ef 58 ff f0 	st.h	r7[-16],r8
	   defines it */
	MAVLINK_SEND_UART_BYTES(chan, (const uint8_t *)buf, len);
#else
	/* fallback to one byte at a time */
	uint16_t i;
	for (i = 0; i < len; i++) {
800022c2:	30 08       	mov	r8,0
800022c4:	ef 58 ff fe 	st.h	r7[-2],r8
800022c8:	c1 28       	rjmp	800022ec <_mavlink_send_uart+0x44>
		comm_send_ch(chan, (uint8_t)buf[i]);
800022ca:	ef 18 ff fe 	ld.uh	r8,r7[-2]
800022ce:	ee f9 ff f4 	ld.w	r9,r7[-12]
800022d2:	f2 08 00 08 	add	r8,r9,r8
800022d6:	11 88       	ld.ub	r8,r8[0x0]
800022d8:	10 9b       	mov	r11,r8
800022da:	ee fc ff f8 	ld.w	r12,r7[-8]
800022de:	f0 16 00 cc 	mcall	r6[816]
	   defines it */
	MAVLINK_SEND_UART_BYTES(chan, (const uint8_t *)buf, len);
#else
	/* fallback to one byte at a time */
	uint16_t i;
	for (i = 0; i < len; i++) {
800022e2:	ef 08 ff fe 	ld.sh	r8,r7[-2]
800022e6:	2f f8       	sub	r8,-1
800022e8:	ef 58 ff fe 	st.h	r7[-2],r8
800022ec:	ef 09 ff fe 	ld.sh	r9,r7[-2]
800022f0:	ef 08 ff f0 	ld.sh	r8,r7[-16]
800022f4:	f0 09 19 00 	cp.h	r9,r8
800022f8:	ce 93       	brcs	800022ca <_mavlink_send_uart+0x22>
		comm_send_ch(chan, (uint8_t)buf[i]);
	}
#endif
}
800022fa:	2f cd       	sub	sp,-16
800022fc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002300:	80 00       	ld.sh	r0,r0[0x0]
80002302:	21 36       	sub	r6,19

80002304 <byte_swap_2>:
	return msg->len + MAVLINK_NUM_NON_PAYLOAD_BYTES;
}

#if MAVLINK_NEED_BYTE_SWAP
static inline void byte_swap_2(char *dst, const char *src)
{
80002304:	eb cd 40 80 	pushm	r7,lr
80002308:	1a 97       	mov	r7,sp
8000230a:	20 2d       	sub	sp,8
8000230c:	ef 4c ff fc 	st.w	r7[-4],r12
80002310:	ef 4b ff f8 	st.w	r7[-8],r11
	dst[0] = src[1];
80002314:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002318:	2f f8       	sub	r8,-1
8000231a:	11 88       	ld.ub	r8,r8[0x0]
8000231c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002320:	b2 88       	st.b	r9[0x0],r8
	dst[1] = src[0];
80002322:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002326:	f0 c9 ff ff 	sub	r9,r8,-1
8000232a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000232e:	11 88       	ld.ub	r8,r8[0x0]
80002330:	b2 88       	st.b	r9[0x0],r8
}
80002332:	2f ed       	sub	sp,-8
80002334:	e3 cd 80 80 	ldm	sp++,r7,pc

80002338 <byte_swap_4>:
static inline void byte_swap_4(char *dst, const char *src)
{
80002338:	eb cd 40 80 	pushm	r7,lr
8000233c:	1a 97       	mov	r7,sp
8000233e:	20 2d       	sub	sp,8
80002340:	ef 4c ff fc 	st.w	r7[-4],r12
80002344:	ef 4b ff f8 	st.w	r7[-8],r11
	dst[0] = src[3];
80002348:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000234c:	2f d8       	sub	r8,-3
8000234e:	11 88       	ld.ub	r8,r8[0x0]
80002350:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002354:	b2 88       	st.b	r9[0x0],r8
	dst[1] = src[2];
80002356:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000235a:	f0 c9 ff ff 	sub	r9,r8,-1
8000235e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002362:	2f e8       	sub	r8,-2
80002364:	11 88       	ld.ub	r8,r8[0x0]
80002366:	b2 88       	st.b	r9[0x0],r8
	dst[2] = src[1];
80002368:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000236c:	f0 c9 ff fe 	sub	r9,r8,-2
80002370:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002374:	2f f8       	sub	r8,-1
80002376:	11 88       	ld.ub	r8,r8[0x0]
80002378:	b2 88       	st.b	r9[0x0],r8
	dst[3] = src[0];
8000237a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000237e:	f0 c9 ff fd 	sub	r9,r8,-3
80002382:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002386:	11 88       	ld.ub	r8,r8[0x0]
80002388:	b2 88       	st.b	r9[0x0],r8
}
8000238a:	2f ed       	sub	sp,-8
8000238c:	e3 cd 80 80 	ldm	sp++,r7,pc

80002390 <mav_array_memcpy>:

/*
  like memcpy(), but if src is NULL, do a memset to zero
*/
static void mav_array_memcpy(void *dest, const void *src, size_t n)
{
80002390:	eb cd 40 c0 	pushm	r6-r7,lr
80002394:	1a 97       	mov	r7,sp
80002396:	20 3d       	sub	sp,12
80002398:	49 06       	lddpc	r6,800023d8 <mav_array_memcpy+0x48>
8000239a:	1e 26       	rsub	r6,pc
8000239c:	ef 4c ff fc 	st.w	r7[-4],r12
800023a0:	ef 4b ff f8 	st.w	r7[-8],r11
800023a4:	ef 4a ff f4 	st.w	r7[-12],r10
	if (src == NULL) {
800023a8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800023ac:	58 08       	cp.w	r8,0
800023ae:	c0 91       	brne	800023c0 <mav_array_memcpy+0x30>
		memset(dest, 0, n);
800023b0:	ee fa ff f4 	ld.w	r10,r7[-12]
800023b4:	30 0b       	mov	r11,0
800023b6:	ee fc ff fc 	ld.w	r12,r7[-4]
800023ba:	f0 16 00 2f 	mcall	r6[188]
800023be:	c0 98       	rjmp	800023d0 <mav_array_memcpy+0x40>
	} else {
		memcpy(dest, src, n);
800023c0:	ee fa ff f4 	ld.w	r10,r7[-12]
800023c4:	ee fb ff f8 	ld.w	r11,r7[-8]
800023c8:	ee fc ff fc 	ld.w	r12,r7[-4]
800023cc:	f0 16 00 20 	mcall	r6[128]
	}
}
800023d0:	2f dd       	sub	sp,-12
800023d2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800023d6:	00 00       	add	r0,r0
800023d8:	80 00       	ld.sh	r0,r0[0x0]
800023da:	22 1e       	sub	lr,33

800023dc <_MAV_RETURN_uint16_t>:
#if MAVLINK_NEED_BYTE_SWAP
#define _MAV_MSG_RETURN_TYPE(TYPE, SIZE) \
static inline TYPE _MAV_RETURN_## TYPE(const mavlink_message_t *msg, uint8_t ofs) \
{ TYPE r; byte_swap_## SIZE((char*)&r, &_MAV_PAYLOAD(msg)[ofs]); return r; }

_MAV_MSG_RETURN_TYPE(uint16_t, 2)
800023dc:	eb cd 40 c0 	pushm	r6-r7,lr
800023e0:	1a 97       	mov	r7,sp
800023e2:	20 3d       	sub	sp,12
800023e4:	48 d6       	lddpc	r6,80002418 <_MAV_RETURN_uint16_t+0x3c>
800023e6:	1e 26       	rsub	r6,pc
800023e8:	ef 4c ff f8 	st.w	r7[-8],r12
800023ec:	16 98       	mov	r8,r11
800023ee:	ef 68 ff f4 	st.b	r7[-12],r8
800023f2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800023f6:	2f 88       	sub	r8,-8
800023f8:	10 99       	mov	r9,r8
800023fa:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800023fe:	10 09       	add	r9,r8
80002400:	ee c8 00 02 	sub	r8,r7,2
80002404:	12 9b       	mov	r11,r9
80002406:	10 9c       	mov	r12,r8
80002408:	c7 ef       	rcall	80002304 <byte_swap_2>
8000240a:	ef 08 ff fe 	ld.sh	r8,r7[-2]
8000240e:	10 9c       	mov	r12,r8
80002410:	2f dd       	sub	sp,-12
80002412:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002416:	00 00       	add	r0,r0
80002418:	80 00       	ld.sh	r0,r0[0x0]
8000241a:	22 6a       	sub	r10,38

8000241c <_MAV_RETURN_uint32_t>:
_MAV_MSG_RETURN_TYPE(int16_t,  2)
_MAV_MSG_RETURN_TYPE(uint32_t, 4)
8000241c:	eb cd 40 c0 	pushm	r6-r7,lr
80002420:	1a 97       	mov	r7,sp
80002422:	20 3d       	sub	sp,12
80002424:	48 d6       	lddpc	r6,80002458 <_MAV_RETURN_uint32_t+0x3c>
80002426:	1e 26       	rsub	r6,pc
80002428:	ef 4c ff f8 	st.w	r7[-8],r12
8000242c:	16 98       	mov	r8,r11
8000242e:	ef 68 ff f4 	st.b	r7[-12],r8
80002432:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002436:	2f 88       	sub	r8,-8
80002438:	10 99       	mov	r9,r8
8000243a:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000243e:	10 09       	add	r9,r8
80002440:	ee c8 00 04 	sub	r8,r7,4
80002444:	12 9b       	mov	r11,r9
80002446:	10 9c       	mov	r12,r8
80002448:	c7 8f       	rcall	80002338 <byte_swap_4>
8000244a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000244e:	10 9c       	mov	r12,r8
80002450:	2f dd       	sub	sp,-12
80002452:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002456:	00 00       	add	r0,r0
80002458:	80 00       	ld.sh	r0,r0[0x0]
8000245a:	22 aa       	sub	r10,42

8000245c <_MAV_RETURN_float>:
_MAV_MSG_RETURN_TYPE(int32_t,  4)
_MAV_MSG_RETURN_TYPE(uint64_t, 8)
_MAV_MSG_RETURN_TYPE(int64_t,  8)
_MAV_MSG_RETURN_TYPE(float,    4)
8000245c:	eb cd 40 c0 	pushm	r6-r7,lr
80002460:	1a 97       	mov	r7,sp
80002462:	20 3d       	sub	sp,12
80002464:	48 d6       	lddpc	r6,80002498 <_MAV_RETURN_float+0x3c>
80002466:	1e 26       	rsub	r6,pc
80002468:	ef 4c ff f8 	st.w	r7[-8],r12
8000246c:	16 98       	mov	r8,r11
8000246e:	ef 68 ff f4 	st.b	r7[-12],r8
80002472:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002476:	2f 88       	sub	r8,-8
80002478:	10 99       	mov	r9,r8
8000247a:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000247e:	10 09       	add	r9,r8
80002480:	ee c8 00 04 	sub	r8,r7,4
80002484:	12 9b       	mov	r11,r9
80002486:	10 9c       	mov	r12,r8
80002488:	c5 8f       	rcall	80002338 <byte_swap_4>
8000248a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000248e:	10 9c       	mov	r12,r8
80002490:	2f dd       	sub	sp,-12
80002492:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002496:	00 00       	add	r0,r0
80002498:	80 00       	ld.sh	r0,r0[0x0]
8000249a:	22 ea       	sub	r10,46

8000249c <mavlink_msg_set_mode_get_target_system>:
 * @brief Get field target_system from set_mode message
 *
 * @return The system setting the mode
 */
static inline uint8_t mavlink_msg_set_mode_get_target_system(const mavlink_message_t* msg)
{
8000249c:	eb cd 40 80 	pushm	r7,lr
800024a0:	1a 97       	mov	r7,sp
800024a2:	20 1d       	sub	sp,4
800024a4:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  4);
800024a8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800024ac:	2f 88       	sub	r8,-8
800024ae:	2f c8       	sub	r8,-4
800024b0:	11 88       	ld.ub	r8,r8[0x0]
}
800024b2:	10 9c       	mov	r12,r8
800024b4:	2f fd       	sub	sp,-4
800024b6:	e3 cd 80 80 	ldm	sp++,r7,pc

800024ba <mavlink_msg_set_mode_get_base_mode>:
 * @brief Get field base_mode from set_mode message
 *
 * @return The new base mode
 */
static inline uint8_t mavlink_msg_set_mode_get_base_mode(const mavlink_message_t* msg)
{
800024ba:	eb cd 40 80 	pushm	r7,lr
800024be:	1a 97       	mov	r7,sp
800024c0:	20 1d       	sub	sp,4
800024c2:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  5);
800024c6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800024ca:	2f 88       	sub	r8,-8
800024cc:	2f b8       	sub	r8,-5
800024ce:	11 88       	ld.ub	r8,r8[0x0]
}
800024d0:	10 9c       	mov	r12,r8
800024d2:	2f fd       	sub	sp,-4
800024d4:	e3 cd 80 80 	ldm	sp++,r7,pc

800024d8 <mavlink_msg_set_mode_get_custom_mode>:
 * @brief Get field custom_mode from set_mode message
 *
 * @return The new autopilot-specific mode. This field can be ignored by an autopilot.
 */
static inline uint32_t mavlink_msg_set_mode_get_custom_mode(const mavlink_message_t* msg)
{
800024d8:	eb cd 40 c0 	pushm	r6-r7,lr
800024dc:	1a 97       	mov	r7,sp
800024de:	20 1d       	sub	sp,4
800024e0:	48 76       	lddpc	r6,800024fc <mavlink_msg_set_mode_get_custom_mode+0x24>
800024e2:	1e 26       	rsub	r6,pc
800024e4:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint32_t(msg,  0);
800024e8:	30 0b       	mov	r11,0
800024ea:	ee fc ff fc 	ld.w	r12,r7[-4]
800024ee:	c9 7f       	rcall	8000241c <_MAV_RETURN_uint32_t>
800024f0:	18 98       	mov	r8,r12
}
800024f2:	10 9c       	mov	r12,r8
800024f4:	2f fd       	sub	sp,-4
800024f6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800024fa:	00 00       	add	r0,r0
800024fc:	80 00       	ld.sh	r0,r0[0x0]
800024fe:	23 66       	sub	r6,54

80002500 <mavlink_msg_set_mode_decode>:
 *
 * @param msg The message to decode
 * @param set_mode C-struct to decode the message contents into
 */
static inline void mavlink_msg_set_mode_decode(const mavlink_message_t* msg, mavlink_set_mode_t* set_mode)
{
80002500:	eb cd 40 c0 	pushm	r6-r7,lr
80002504:	1a 97       	mov	r7,sp
80002506:	20 2d       	sub	sp,8
80002508:	48 f6       	lddpc	r6,80002544 <mavlink_msg_set_mode_decode+0x44>
8000250a:	1e 26       	rsub	r6,pc
8000250c:	ef 4c ff fc 	st.w	r7[-4],r12
80002510:	ef 4b ff f8 	st.w	r7[-8],r11
#if MAVLINK_NEED_BYTE_SWAP
	set_mode->custom_mode = mavlink_msg_set_mode_get_custom_mode(msg);
80002514:	ee fc ff fc 	ld.w	r12,r7[-4]
80002518:	ce 0f       	rcall	800024d8 <mavlink_msg_set_mode_get_custom_mode>
8000251a:	18 99       	mov	r9,r12
8000251c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002520:	91 09       	st.w	r8[0x0],r9
	set_mode->target_system = mavlink_msg_set_mode_get_target_system(msg);
80002522:	ee fc ff fc 	ld.w	r12,r7[-4]
80002526:	cb bf       	rcall	8000249c <mavlink_msg_set_mode_get_target_system>
80002528:	18 98       	mov	r8,r12
8000252a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000252e:	b2 c8       	st.b	r9[0x4],r8
	set_mode->base_mode = mavlink_msg_set_mode_get_base_mode(msg);
80002530:	ee fc ff fc 	ld.w	r12,r7[-4]
80002534:	cc 3f       	rcall	800024ba <mavlink_msg_set_mode_get_base_mode>
80002536:	18 98       	mov	r8,r12
80002538:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000253c:	b2 d8       	st.b	r9[0x5],r8
#else
	memcpy(set_mode, _MAV_PAYLOAD(msg), MAVLINK_MSG_ID_SET_MODE_LEN);
#endif
}
8000253e:	2f ed       	sub	sp,-8
80002540:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002544:	80 00       	ld.sh	r0,r0[0x0]
80002546:	23 8e       	sub	lr,56

80002548 <mavlink_msg_mission_item_send>:
 * @param z PARAM7 / z position: global: altitude
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_mission_item_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t seq, uint8_t frame, uint16_t command, uint8_t current, uint8_t autocontinue, float param1, float param2, float param3, float param4, float x, float y, float z)
{
80002548:	eb cd 40 e8 	pushm	r3,r5-r7,lr
8000254c:	1a 97       	mov	r7,sp
8000254e:	21 2d       	sub	sp,72
80002550:	4c 26       	lddpc	r6,80002658 <mavlink_msg_mission_item_send+0x110>
80002552:	1e 26       	rsub	r6,pc
80002554:	ee c5 ff ec 	sub	r5,r7,-20
80002558:	ef 4c ff d4 	st.w	r7[-44],r12
8000255c:	16 93       	mov	r3,r11
8000255e:	14 9e       	mov	lr,r10
80002560:	12 9c       	mov	r12,r9
80002562:	10 9b       	mov	r11,r8
80002564:	6a 0a       	ld.w	r10,r5[0x0]
80002566:	6a 19       	ld.w	r9,r5[0x4]
80002568:	6a 28       	ld.w	r8,r5[0x8]
8000256a:	ef 63 ff d0 	st.b	r7[-48],r3
8000256e:	ef 6e ff cc 	st.b	r7[-52],lr
80002572:	ef 5c ff c8 	st.h	r7[-56],r12
80002576:	ef 6b ff c4 	st.b	r7[-60],r11
8000257a:	ef 5a ff c0 	st.h	r7[-64],r10
8000257e:	ef 69 ff bc 	st.b	r7[-68],r9
80002582:	ef 68 ff b8 	st.b	r7[-72],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_MISSION_ITEM_LEN];
	_mav_put_float(buf, 0, param1);
80002586:	ea c9 ff f4 	sub	r9,r5,-12
8000258a:	ee c8 00 28 	sub	r8,r7,40
8000258e:	12 9b       	mov	r11,r9
80002590:	10 9c       	mov	r12,r8
80002592:	cd 3e       	rcall	80002338 <byte_swap_4>
	_mav_put_float(buf, 4, param2);
80002594:	ea c9 ff f0 	sub	r9,r5,-16
80002598:	ee c8 00 28 	sub	r8,r7,40
8000259c:	2f c8       	sub	r8,-4
8000259e:	12 9b       	mov	r11,r9
800025a0:	10 9c       	mov	r12,r8
800025a2:	cc be       	rcall	80002338 <byte_swap_4>
	_mav_put_float(buf, 8, param3);
800025a4:	ea c9 ff ec 	sub	r9,r5,-20
800025a8:	ee c8 00 28 	sub	r8,r7,40
800025ac:	2f 88       	sub	r8,-8
800025ae:	12 9b       	mov	r11,r9
800025b0:	10 9c       	mov	r12,r8
800025b2:	cc 3e       	rcall	80002338 <byte_swap_4>
	_mav_put_float(buf, 12, param4);
800025b4:	ea c9 ff e8 	sub	r9,r5,-24
800025b8:	ee c8 00 28 	sub	r8,r7,40
800025bc:	2f 48       	sub	r8,-12
800025be:	12 9b       	mov	r11,r9
800025c0:	10 9c       	mov	r12,r8
800025c2:	cb be       	rcall	80002338 <byte_swap_4>
	_mav_put_float(buf, 16, x);
800025c4:	ea c9 ff e4 	sub	r9,r5,-28
800025c8:	ee c8 00 28 	sub	r8,r7,40
800025cc:	2f 08       	sub	r8,-16
800025ce:	12 9b       	mov	r11,r9
800025d0:	10 9c       	mov	r12,r8
800025d2:	cb 3e       	rcall	80002338 <byte_swap_4>
	_mav_put_float(buf, 20, y);
800025d4:	ea c9 ff e0 	sub	r9,r5,-32
800025d8:	ee c8 00 28 	sub	r8,r7,40
800025dc:	2e c8       	sub	r8,-20
800025de:	12 9b       	mov	r11,r9
800025e0:	10 9c       	mov	r12,r8
800025e2:	ca be       	rcall	80002338 <byte_swap_4>
	_mav_put_float(buf, 24, z);
800025e4:	ea c9 ff dc 	sub	r9,r5,-36
800025e8:	ee c8 00 28 	sub	r8,r7,40
800025ec:	2e 88       	sub	r8,-24
800025ee:	12 9b       	mov	r11,r9
800025f0:	10 9c       	mov	r12,r8
800025f2:	ca 3e       	rcall	80002338 <byte_swap_4>
	_mav_put_uint16_t(buf, 28, seq);
800025f4:	ee c9 00 38 	sub	r9,r7,56
800025f8:	ee c8 00 28 	sub	r8,r7,40
800025fc:	2e 48       	sub	r8,-28
800025fe:	12 9b       	mov	r11,r9
80002600:	10 9c       	mov	r12,r8
80002602:	c8 1e       	rcall	80002304 <byte_swap_2>
	_mav_put_uint16_t(buf, 30, command);
80002604:	ee c9 00 40 	sub	r9,r7,64
80002608:	ee c8 00 28 	sub	r8,r7,40
8000260c:	2e 28       	sub	r8,-30
8000260e:	12 9b       	mov	r11,r9
80002610:	10 9c       	mov	r12,r8
80002612:	c7 9e       	rcall	80002304 <byte_swap_2>
	_mav_put_uint8_t(buf, 32, target_system);
80002614:	ef 38 ff d0 	ld.ub	r8,r7[-48]
80002618:	ef 68 ff f8 	st.b	r7[-8],r8
	_mav_put_uint8_t(buf, 33, target_component);
8000261c:	ef 38 ff cc 	ld.ub	r8,r7[-52]
80002620:	ef 68 ff f9 	st.b	r7[-7],r8
	_mav_put_uint8_t(buf, 34, frame);
80002624:	ef 38 ff c4 	ld.ub	r8,r7[-60]
80002628:	ef 68 ff fa 	st.b	r7[-6],r8
	_mav_put_uint8_t(buf, 35, current);
8000262c:	ef 38 ff bc 	ld.ub	r8,r7[-68]
80002630:	ef 68 ff fb 	st.b	r7[-5],r8
	_mav_put_uint8_t(buf, 36, autocontinue);
80002634:	ef 38 ff b8 	ld.ub	r8,r7[-72]
80002638:	ef 68 ff fc 	st.b	r7[-4],r8

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_ITEM, buf, MAVLINK_MSG_ID_MISSION_ITEM_LEN, MAVLINK_MSG_ID_MISSION_ITEM_CRC);
8000263c:	ee ca 00 28 	sub	r10,r7,40
80002640:	e0 68 00 fe 	mov	r8,254
80002644:	32 59       	mov	r9,37
80002646:	32 7b       	mov	r11,39
80002648:	ee fc ff d4 	ld.w	r12,r7[-44]
8000264c:	fe b0 fd ae 	rcall	800021a8 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_ITEM, (const char *)&packet, MAVLINK_MSG_ID_MISSION_ITEM_LEN, MAVLINK_MSG_ID_MISSION_ITEM_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_ITEM, (const char *)&packet, MAVLINK_MSG_ID_MISSION_ITEM_LEN);
#endif
#endif
}
80002650:	2e ed       	sub	sp,-72
80002652:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
80002656:	00 00       	add	r0,r0
80002658:	80 00       	ld.sh	r0,r0[0x0]
8000265a:	23 d6       	sub	r6,61

8000265c <mavlink_msg_mission_item_get_target_system>:
 * @brief Get field target_system from mission_item message
 *
 * @return System ID
 */
static inline uint8_t mavlink_msg_mission_item_get_target_system(const mavlink_message_t* msg)
{
8000265c:	eb cd 40 80 	pushm	r7,lr
80002660:	1a 97       	mov	r7,sp
80002662:	20 1d       	sub	sp,4
80002664:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  32);
80002668:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000266c:	2f 88       	sub	r8,-8
8000266e:	2e 08       	sub	r8,-32
80002670:	11 88       	ld.ub	r8,r8[0x0]
}
80002672:	10 9c       	mov	r12,r8
80002674:	2f fd       	sub	sp,-4
80002676:	e3 cd 80 80 	ldm	sp++,r7,pc

8000267a <mavlink_msg_mission_item_get_target_component>:
 * @brief Get field target_component from mission_item message
 *
 * @return Component ID
 */
static inline uint8_t mavlink_msg_mission_item_get_target_component(const mavlink_message_t* msg)
{
8000267a:	eb cd 40 80 	pushm	r7,lr
8000267e:	1a 97       	mov	r7,sp
80002680:	20 1d       	sub	sp,4
80002682:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  33);
80002686:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000268a:	2f 88       	sub	r8,-8
8000268c:	2d f8       	sub	r8,-33
8000268e:	11 88       	ld.ub	r8,r8[0x0]
}
80002690:	10 9c       	mov	r12,r8
80002692:	2f fd       	sub	sp,-4
80002694:	e3 cd 80 80 	ldm	sp++,r7,pc

80002698 <mavlink_msg_mission_item_get_seq>:
 * @brief Get field seq from mission_item message
 *
 * @return Sequence
 */
static inline uint16_t mavlink_msg_mission_item_get_seq(const mavlink_message_t* msg)
{
80002698:	eb cd 40 c0 	pushm	r6-r7,lr
8000269c:	1a 97       	mov	r7,sp
8000269e:	20 1d       	sub	sp,4
800026a0:	48 86       	lddpc	r6,800026c0 <mavlink_msg_mission_item_get_seq+0x28>
800026a2:	1e 26       	rsub	r6,pc
800026a4:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint16_t(msg,  28);
800026a8:	31 cb       	mov	r11,28
800026aa:	ee fc ff fc 	ld.w	r12,r7[-4]
800026ae:	c9 7e       	rcall	800023dc <_MAV_RETURN_uint16_t>
800026b0:	18 98       	mov	r8,r12
800026b2:	5c 88       	casts.h	r8
800026b4:	5c 88       	casts.h	r8
}
800026b6:	10 9c       	mov	r12,r8
800026b8:	2f fd       	sub	sp,-4
800026ba:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800026be:	00 00       	add	r0,r0
800026c0:	80 00       	ld.sh	r0,r0[0x0]
800026c2:	25 26       	sub	r6,82

800026c4 <mavlink_msg_mission_item_get_frame>:
 * @brief Get field frame from mission_item message
 *
 * @return The coordinate system of the MISSION. see MAV_FRAME in mavlink_types.h
 */
static inline uint8_t mavlink_msg_mission_item_get_frame(const mavlink_message_t* msg)
{
800026c4:	eb cd 40 80 	pushm	r7,lr
800026c8:	1a 97       	mov	r7,sp
800026ca:	20 1d       	sub	sp,4
800026cc:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  34);
800026d0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800026d4:	2f 88       	sub	r8,-8
800026d6:	2d e8       	sub	r8,-34
800026d8:	11 88       	ld.ub	r8,r8[0x0]
}
800026da:	10 9c       	mov	r12,r8
800026dc:	2f fd       	sub	sp,-4
800026de:	e3 cd 80 80 	ldm	sp++,r7,pc

800026e2 <mavlink_msg_mission_item_get_command>:
 * @brief Get field command from mission_item message
 *
 * @return The scheduled action for the MISSION. see MAV_CMD in common.xml MAVLink specs
 */
static inline uint16_t mavlink_msg_mission_item_get_command(const mavlink_message_t* msg)
{
800026e2:	eb cd 40 c0 	pushm	r6-r7,lr
800026e6:	1a 97       	mov	r7,sp
800026e8:	20 1d       	sub	sp,4
800026ea:	48 86       	lddpc	r6,80002708 <mavlink_msg_mission_item_get_command+0x26>
800026ec:	1e 26       	rsub	r6,pc
800026ee:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint16_t(msg,  30);
800026f2:	31 eb       	mov	r11,30
800026f4:	ee fc ff fc 	ld.w	r12,r7[-4]
800026f8:	c7 2e       	rcall	800023dc <_MAV_RETURN_uint16_t>
800026fa:	18 98       	mov	r8,r12
800026fc:	5c 88       	casts.h	r8
800026fe:	5c 88       	casts.h	r8
}
80002700:	10 9c       	mov	r12,r8
80002702:	2f fd       	sub	sp,-4
80002704:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002708:	80 00       	ld.sh	r0,r0[0x0]
8000270a:	25 70       	sub	r0,87

8000270c <mavlink_msg_mission_item_get_current>:
 * @brief Get field current from mission_item message
 *
 * @return false:0, true:1
 */
static inline uint8_t mavlink_msg_mission_item_get_current(const mavlink_message_t* msg)
{
8000270c:	eb cd 40 80 	pushm	r7,lr
80002710:	1a 97       	mov	r7,sp
80002712:	20 1d       	sub	sp,4
80002714:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  35);
80002718:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000271c:	2f 88       	sub	r8,-8
8000271e:	2d d8       	sub	r8,-35
80002720:	11 88       	ld.ub	r8,r8[0x0]
}
80002722:	10 9c       	mov	r12,r8
80002724:	2f fd       	sub	sp,-4
80002726:	e3 cd 80 80 	ldm	sp++,r7,pc

8000272a <mavlink_msg_mission_item_get_autocontinue>:
 * @brief Get field autocontinue from mission_item message
 *
 * @return autocontinue to next wp
 */
static inline uint8_t mavlink_msg_mission_item_get_autocontinue(const mavlink_message_t* msg)
{
8000272a:	eb cd 40 80 	pushm	r7,lr
8000272e:	1a 97       	mov	r7,sp
80002730:	20 1d       	sub	sp,4
80002732:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  36);
80002736:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000273a:	2f 88       	sub	r8,-8
8000273c:	2d c8       	sub	r8,-36
8000273e:	11 88       	ld.ub	r8,r8[0x0]
}
80002740:	10 9c       	mov	r12,r8
80002742:	2f fd       	sub	sp,-4
80002744:	e3 cd 80 80 	ldm	sp++,r7,pc

80002748 <mavlink_msg_mission_item_get_param1>:
 * @brief Get field param1 from mission_item message
 *
 * @return PARAM1 / For NAV command MISSIONs: Radius in which the MISSION is accepted as reached, in meters
 */
static inline float mavlink_msg_mission_item_get_param1(const mavlink_message_t* msg)
{
80002748:	eb cd 40 c0 	pushm	r6-r7,lr
8000274c:	1a 97       	mov	r7,sp
8000274e:	20 1d       	sub	sp,4
80002750:	48 76       	lddpc	r6,8000276c <mavlink_msg_mission_item_get_param1+0x24>
80002752:	1e 26       	rsub	r6,pc
80002754:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_float(msg,  0);
80002758:	30 0b       	mov	r11,0
8000275a:	ee fc ff fc 	ld.w	r12,r7[-4]
8000275e:	c7 fe       	rcall	8000245c <_MAV_RETURN_float>
80002760:	18 98       	mov	r8,r12
}
80002762:	10 9c       	mov	r12,r8
80002764:	2f fd       	sub	sp,-4
80002766:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000276a:	00 00       	add	r0,r0
8000276c:	80 00       	ld.sh	r0,r0[0x0]
8000276e:	25 d6       	sub	r6,93

80002770 <mavlink_msg_mission_item_get_param2>:
 * @brief Get field param2 from mission_item message
 *
 * @return PARAM2 / For NAV command MISSIONs: Time that the MAV should stay inside the PARAM1 radius before advancing, in milliseconds
 */
static inline float mavlink_msg_mission_item_get_param2(const mavlink_message_t* msg)
{
80002770:	eb cd 40 c0 	pushm	r6-r7,lr
80002774:	1a 97       	mov	r7,sp
80002776:	20 1d       	sub	sp,4
80002778:	48 76       	lddpc	r6,80002794 <mavlink_msg_mission_item_get_param2+0x24>
8000277a:	1e 26       	rsub	r6,pc
8000277c:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_float(msg,  4);
80002780:	30 4b       	mov	r11,4
80002782:	ee fc ff fc 	ld.w	r12,r7[-4]
80002786:	c6 be       	rcall	8000245c <_MAV_RETURN_float>
80002788:	18 98       	mov	r8,r12
}
8000278a:	10 9c       	mov	r12,r8
8000278c:	2f fd       	sub	sp,-4
8000278e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002792:	00 00       	add	r0,r0
80002794:	80 00       	ld.sh	r0,r0[0x0]
80002796:	25 fe       	sub	lr,95

80002798 <mavlink_msg_mission_item_get_param3>:
 * @brief Get field param3 from mission_item message
 *
 * @return PARAM3 / For LOITER command MISSIONs: Orbit to circle around the MISSION, in meters. If positive the orbit direction should be clockwise, if negative the orbit direction should be counter-clockwise.
 */
static inline float mavlink_msg_mission_item_get_param3(const mavlink_message_t* msg)
{
80002798:	eb cd 40 c0 	pushm	r6-r7,lr
8000279c:	1a 97       	mov	r7,sp
8000279e:	20 1d       	sub	sp,4
800027a0:	48 76       	lddpc	r6,800027bc <mavlink_msg_mission_item_get_param3+0x24>
800027a2:	1e 26       	rsub	r6,pc
800027a4:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_float(msg,  8);
800027a8:	30 8b       	mov	r11,8
800027aa:	ee fc ff fc 	ld.w	r12,r7[-4]
800027ae:	c5 7e       	rcall	8000245c <_MAV_RETURN_float>
800027b0:	18 98       	mov	r8,r12
}
800027b2:	10 9c       	mov	r12,r8
800027b4:	2f fd       	sub	sp,-4
800027b6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800027ba:	00 00       	add	r0,r0
800027bc:	80 00       	ld.sh	r0,r0[0x0]
800027be:	26 26       	sub	r6,98

800027c0 <mavlink_msg_mission_item_get_param4>:
 * @brief Get field param4 from mission_item message
 *
 * @return PARAM4 / For NAV and LOITER command MISSIONs: Yaw orientation in degrees, [0..360] 0 = NORTH
 */
static inline float mavlink_msg_mission_item_get_param4(const mavlink_message_t* msg)
{
800027c0:	eb cd 40 c0 	pushm	r6-r7,lr
800027c4:	1a 97       	mov	r7,sp
800027c6:	20 1d       	sub	sp,4
800027c8:	48 76       	lddpc	r6,800027e4 <mavlink_msg_mission_item_get_param4+0x24>
800027ca:	1e 26       	rsub	r6,pc
800027cc:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_float(msg,  12);
800027d0:	30 cb       	mov	r11,12
800027d2:	ee fc ff fc 	ld.w	r12,r7[-4]
800027d6:	c4 3e       	rcall	8000245c <_MAV_RETURN_float>
800027d8:	18 98       	mov	r8,r12
}
800027da:	10 9c       	mov	r12,r8
800027dc:	2f fd       	sub	sp,-4
800027de:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800027e2:	00 00       	add	r0,r0
800027e4:	80 00       	ld.sh	r0,r0[0x0]
800027e6:	26 4e       	sub	lr,100

800027e8 <mavlink_msg_mission_item_get_x>:
 * @brief Get field x from mission_item message
 *
 * @return PARAM5 / local: x position, global: latitude
 */
static inline float mavlink_msg_mission_item_get_x(const mavlink_message_t* msg)
{
800027e8:	eb cd 40 c0 	pushm	r6-r7,lr
800027ec:	1a 97       	mov	r7,sp
800027ee:	20 1d       	sub	sp,4
800027f0:	48 76       	lddpc	r6,8000280c <mavlink_msg_mission_item_get_x+0x24>
800027f2:	1e 26       	rsub	r6,pc
800027f4:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_float(msg,  16);
800027f8:	31 0b       	mov	r11,16
800027fa:	ee fc ff fc 	ld.w	r12,r7[-4]
800027fe:	c2 fe       	rcall	8000245c <_MAV_RETURN_float>
80002800:	18 98       	mov	r8,r12
}
80002802:	10 9c       	mov	r12,r8
80002804:	2f fd       	sub	sp,-4
80002806:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000280a:	00 00       	add	r0,r0
8000280c:	80 00       	ld.sh	r0,r0[0x0]
8000280e:	26 76       	sub	r6,103

80002810 <mavlink_msg_mission_item_get_y>:
 * @brief Get field y from mission_item message
 *
 * @return PARAM6 / y position: global: longitude
 */
static inline float mavlink_msg_mission_item_get_y(const mavlink_message_t* msg)
{
80002810:	eb cd 40 c0 	pushm	r6-r7,lr
80002814:	1a 97       	mov	r7,sp
80002816:	20 1d       	sub	sp,4
80002818:	48 76       	lddpc	r6,80002834 <mavlink_msg_mission_item_get_y+0x24>
8000281a:	1e 26       	rsub	r6,pc
8000281c:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_float(msg,  20);
80002820:	31 4b       	mov	r11,20
80002822:	ee fc ff fc 	ld.w	r12,r7[-4]
80002826:	c1 be       	rcall	8000245c <_MAV_RETURN_float>
80002828:	18 98       	mov	r8,r12
}
8000282a:	10 9c       	mov	r12,r8
8000282c:	2f fd       	sub	sp,-4
8000282e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002832:	00 00       	add	r0,r0
80002834:	80 00       	ld.sh	r0,r0[0x0]
80002836:	26 9e       	sub	lr,105

80002838 <mavlink_msg_mission_item_get_z>:
 * @brief Get field z from mission_item message
 *
 * @return PARAM7 / z position: global: altitude
 */
static inline float mavlink_msg_mission_item_get_z(const mavlink_message_t* msg)
{
80002838:	eb cd 40 c0 	pushm	r6-r7,lr
8000283c:	1a 97       	mov	r7,sp
8000283e:	20 1d       	sub	sp,4
80002840:	48 76       	lddpc	r6,8000285c <mavlink_msg_mission_item_get_z+0x24>
80002842:	1e 26       	rsub	r6,pc
80002844:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_float(msg,  24);
80002848:	31 8b       	mov	r11,24
8000284a:	ee fc ff fc 	ld.w	r12,r7[-4]
8000284e:	c0 7e       	rcall	8000245c <_MAV_RETURN_float>
80002850:	18 98       	mov	r8,r12
}
80002852:	10 9c       	mov	r12,r8
80002854:	2f fd       	sub	sp,-4
80002856:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000285a:	00 00       	add	r0,r0
8000285c:	80 00       	ld.sh	r0,r0[0x0]
8000285e:	26 c6       	sub	r6,108

80002860 <mavlink_msg_mission_item_decode>:
 *
 * @param msg The message to decode
 * @param mission_item C-struct to decode the message contents into
 */
static inline void mavlink_msg_mission_item_decode(const mavlink_message_t* msg, mavlink_mission_item_t* mission_item)
{
80002860:	eb cd 40 c0 	pushm	r6-r7,lr
80002864:	1a 97       	mov	r7,sp
80002866:	20 2d       	sub	sp,8
80002868:	4b a6       	lddpc	r6,80002950 <mavlink_msg_mission_item_decode+0xf0>
8000286a:	1e 26       	rsub	r6,pc
8000286c:	ef 4c ff fc 	st.w	r7[-4],r12
80002870:	ef 4b ff f8 	st.w	r7[-8],r11
#if MAVLINK_NEED_BYTE_SWAP
	mission_item->param1 = mavlink_msg_mission_item_get_param1(msg);
80002874:	ee fc ff fc 	ld.w	r12,r7[-4]
80002878:	c6 8f       	rcall	80002748 <mavlink_msg_mission_item_get_param1>
8000287a:	18 99       	mov	r9,r12
8000287c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002880:	91 09       	st.w	r8[0x0],r9
	mission_item->param2 = mavlink_msg_mission_item_get_param2(msg);
80002882:	ee fc ff fc 	ld.w	r12,r7[-4]
80002886:	c7 5f       	rcall	80002770 <mavlink_msg_mission_item_get_param2>
80002888:	18 99       	mov	r9,r12
8000288a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000288e:	91 19       	st.w	r8[0x4],r9
	mission_item->param3 = mavlink_msg_mission_item_get_param3(msg);
80002890:	ee fc ff fc 	ld.w	r12,r7[-4]
80002894:	c8 2f       	rcall	80002798 <mavlink_msg_mission_item_get_param3>
80002896:	18 99       	mov	r9,r12
80002898:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000289c:	91 29       	st.w	r8[0x8],r9
	mission_item->param4 = mavlink_msg_mission_item_get_param4(msg);
8000289e:	ee fc ff fc 	ld.w	r12,r7[-4]
800028a2:	c8 ff       	rcall	800027c0 <mavlink_msg_mission_item_get_param4>
800028a4:	18 99       	mov	r9,r12
800028a6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800028aa:	91 39       	st.w	r8[0xc],r9
	mission_item->x = mavlink_msg_mission_item_get_x(msg);
800028ac:	ee fc ff fc 	ld.w	r12,r7[-4]
800028b0:	c9 cf       	rcall	800027e8 <mavlink_msg_mission_item_get_x>
800028b2:	18 99       	mov	r9,r12
800028b4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800028b8:	91 49       	st.w	r8[0x10],r9
	mission_item->y = mavlink_msg_mission_item_get_y(msg);
800028ba:	ee fc ff fc 	ld.w	r12,r7[-4]
800028be:	ca 9f       	rcall	80002810 <mavlink_msg_mission_item_get_y>
800028c0:	18 99       	mov	r9,r12
800028c2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800028c6:	91 59       	st.w	r8[0x14],r9
	mission_item->z = mavlink_msg_mission_item_get_z(msg);
800028c8:	ee fc ff fc 	ld.w	r12,r7[-4]
800028cc:	cb 6f       	rcall	80002838 <mavlink_msg_mission_item_get_z>
800028ce:	18 99       	mov	r9,r12
800028d0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800028d4:	91 69       	st.w	r8[0x18],r9
	mission_item->seq = mavlink_msg_mission_item_get_seq(msg);
800028d6:	ee fc ff fc 	ld.w	r12,r7[-4]
800028da:	cd fe       	rcall	80002698 <mavlink_msg_mission_item_get_seq>
800028dc:	18 98       	mov	r8,r12
800028de:	5c 88       	casts.h	r8
800028e0:	ee f9 ff f8 	ld.w	r9,r7[-8]
800028e4:	f3 58 00 1c 	st.h	r9[28],r8
	mission_item->command = mavlink_msg_mission_item_get_command(msg);
800028e8:	ee fc ff fc 	ld.w	r12,r7[-4]
800028ec:	cf be       	rcall	800026e2 <mavlink_msg_mission_item_get_command>
800028ee:	18 98       	mov	r8,r12
800028f0:	5c 88       	casts.h	r8
800028f2:	ee f9 ff f8 	ld.w	r9,r7[-8]
800028f6:	f3 58 00 1e 	st.h	r9[30],r8
	mission_item->target_system = mavlink_msg_mission_item_get_target_system(msg);
800028fa:	ee fc ff fc 	ld.w	r12,r7[-4]
800028fe:	ca fe       	rcall	8000265c <mavlink_msg_mission_item_get_target_system>
80002900:	18 98       	mov	r8,r12
80002902:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002906:	f3 68 00 20 	st.b	r9[32],r8
	mission_item->target_component = mavlink_msg_mission_item_get_target_component(msg);
8000290a:	ee fc ff fc 	ld.w	r12,r7[-4]
8000290e:	cb 6e       	rcall	8000267a <mavlink_msg_mission_item_get_target_component>
80002910:	18 98       	mov	r8,r12
80002912:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002916:	f3 68 00 21 	st.b	r9[33],r8
	mission_item->frame = mavlink_msg_mission_item_get_frame(msg);
8000291a:	ee fc ff fc 	ld.w	r12,r7[-4]
8000291e:	cd 3e       	rcall	800026c4 <mavlink_msg_mission_item_get_frame>
80002920:	18 98       	mov	r8,r12
80002922:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002926:	f3 68 00 22 	st.b	r9[34],r8
	mission_item->current = mavlink_msg_mission_item_get_current(msg);
8000292a:	ee fc ff fc 	ld.w	r12,r7[-4]
8000292e:	ce fe       	rcall	8000270c <mavlink_msg_mission_item_get_current>
80002930:	18 98       	mov	r8,r12
80002932:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002936:	f3 68 00 23 	st.b	r9[35],r8
	mission_item->autocontinue = mavlink_msg_mission_item_get_autocontinue(msg);
8000293a:	ee fc ff fc 	ld.w	r12,r7[-4]
8000293e:	cf 6e       	rcall	8000272a <mavlink_msg_mission_item_get_autocontinue>
80002940:	18 98       	mov	r8,r12
80002942:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002946:	f3 68 00 24 	st.b	r9[36],r8
#else
	memcpy(mission_item, _MAV_PAYLOAD(msg), MAVLINK_MSG_ID_MISSION_ITEM_LEN);
#endif
}
8000294a:	2f ed       	sub	sp,-8
8000294c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002950:	80 00       	ld.sh	r0,r0[0x0]
80002952:	26 ee       	sub	lr,110

80002954 <mavlink_msg_mission_request_send>:
 * @param seq Sequence
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_mission_request_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t seq)
{
80002954:	eb cd 40 c0 	pushm	r6-r7,lr
80002958:	1a 97       	mov	r7,sp
8000295a:	20 5d       	sub	sp,20
8000295c:	49 56       	lddpc	r6,800029b0 <mavlink_msg_mission_request_send+0x5c>
8000295e:	1e 26       	rsub	r6,pc
80002960:	ef 4c ff f8 	st.w	r7[-8],r12
80002964:	12 98       	mov	r8,r9
80002966:	16 99       	mov	r9,r11
80002968:	ef 69 ff f4 	st.b	r7[-12],r9
8000296c:	14 99       	mov	r9,r10
8000296e:	ef 69 ff f0 	st.b	r7[-16],r9
80002972:	ef 58 ff ec 	st.h	r7[-20],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_MISSION_REQUEST_LEN];
	_mav_put_uint16_t(buf, 0, seq);
80002976:	ee c9 00 14 	sub	r9,r7,20
8000297a:	ee c8 00 04 	sub	r8,r7,4
8000297e:	12 9b       	mov	r11,r9
80002980:	10 9c       	mov	r12,r8
80002982:	fe b0 fc c1 	rcall	80002304 <byte_swap_2>
	_mav_put_uint8_t(buf, 2, target_system);
80002986:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000298a:	ef 68 ff fe 	st.b	r7[-2],r8
	_mav_put_uint8_t(buf, 3, target_component);
8000298e:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80002992:	ef 68 ff ff 	st.b	r7[-1],r8

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_REQUEST, buf, MAVLINK_MSG_ID_MISSION_REQUEST_LEN, MAVLINK_MSG_ID_MISSION_REQUEST_CRC);
80002996:	ee ca 00 04 	sub	r10,r7,4
8000299a:	e0 68 00 e6 	mov	r8,230
8000299e:	30 49       	mov	r9,4
800029a0:	32 8b       	mov	r11,40
800029a2:	ee fc ff f8 	ld.w	r12,r7[-8]
800029a6:	fe b0 fc 01 	rcall	800021a8 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_REQUEST, (const char *)&packet, MAVLINK_MSG_ID_MISSION_REQUEST_LEN, MAVLINK_MSG_ID_MISSION_REQUEST_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_REQUEST, (const char *)&packet, MAVLINK_MSG_ID_MISSION_REQUEST_LEN);
#endif
#endif
}
800029aa:	2f bd       	sub	sp,-20
800029ac:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800029b0:	80 00       	ld.sh	r0,r0[0x0]
800029b2:	27 e2       	sub	r2,126

800029b4 <mavlink_msg_mission_request_get_target_system>:
 * @brief Get field target_system from mission_request message
 *
 * @return System ID
 */
static inline uint8_t mavlink_msg_mission_request_get_target_system(const mavlink_message_t* msg)
{
800029b4:	eb cd 40 80 	pushm	r7,lr
800029b8:	1a 97       	mov	r7,sp
800029ba:	20 1d       	sub	sp,4
800029bc:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  2);
800029c0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800029c4:	2f 88       	sub	r8,-8
800029c6:	2f e8       	sub	r8,-2
800029c8:	11 88       	ld.ub	r8,r8[0x0]
}
800029ca:	10 9c       	mov	r12,r8
800029cc:	2f fd       	sub	sp,-4
800029ce:	e3 cd 80 80 	ldm	sp++,r7,pc

800029d2 <mavlink_msg_mission_request_get_target_component>:
 * @brief Get field target_component from mission_request message
 *
 * @return Component ID
 */
static inline uint8_t mavlink_msg_mission_request_get_target_component(const mavlink_message_t* msg)
{
800029d2:	eb cd 40 80 	pushm	r7,lr
800029d6:	1a 97       	mov	r7,sp
800029d8:	20 1d       	sub	sp,4
800029da:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  3);
800029de:	ee f8 ff fc 	ld.w	r8,r7[-4]
800029e2:	2f 88       	sub	r8,-8
800029e4:	2f d8       	sub	r8,-3
800029e6:	11 88       	ld.ub	r8,r8[0x0]
}
800029e8:	10 9c       	mov	r12,r8
800029ea:	2f fd       	sub	sp,-4
800029ec:	e3 cd 80 80 	ldm	sp++,r7,pc

800029f0 <mavlink_msg_mission_request_get_seq>:
 * @brief Get field seq from mission_request message
 *
 * @return Sequence
 */
static inline uint16_t mavlink_msg_mission_request_get_seq(const mavlink_message_t* msg)
{
800029f0:	eb cd 40 c0 	pushm	r6-r7,lr
800029f4:	1a 97       	mov	r7,sp
800029f6:	20 1d       	sub	sp,4
800029f8:	48 86       	lddpc	r6,80002a18 <mavlink_msg_mission_request_get_seq+0x28>
800029fa:	1e 26       	rsub	r6,pc
800029fc:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint16_t(msg,  0);
80002a00:	30 0b       	mov	r11,0
80002a02:	ee fc ff fc 	ld.w	r12,r7[-4]
80002a06:	fe b0 fc eb 	rcall	800023dc <_MAV_RETURN_uint16_t>
80002a0a:	18 98       	mov	r8,r12
80002a0c:	5c 88       	casts.h	r8
80002a0e:	5c 88       	casts.h	r8
}
80002a10:	10 9c       	mov	r12,r8
80002a12:	2f fd       	sub	sp,-4
80002a14:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002a18:	80 00       	ld.sh	r0,r0[0x0]
80002a1a:	28 7e       	sub	lr,-121

80002a1c <mavlink_msg_mission_request_decode>:
 *
 * @param msg The message to decode
 * @param mission_request C-struct to decode the message contents into
 */
static inline void mavlink_msg_mission_request_decode(const mavlink_message_t* msg, mavlink_mission_request_t* mission_request)
{
80002a1c:	eb cd 40 c0 	pushm	r6-r7,lr
80002a20:	1a 97       	mov	r7,sp
80002a22:	20 2d       	sub	sp,8
80002a24:	49 06       	lddpc	r6,80002a64 <mavlink_msg_mission_request_decode+0x48>
80002a26:	1e 26       	rsub	r6,pc
80002a28:	ef 4c ff fc 	st.w	r7[-4],r12
80002a2c:	ef 4b ff f8 	st.w	r7[-8],r11
#if MAVLINK_NEED_BYTE_SWAP
	mission_request->seq = mavlink_msg_mission_request_get_seq(msg);
80002a30:	ee fc ff fc 	ld.w	r12,r7[-4]
80002a34:	cd ef       	rcall	800029f0 <mavlink_msg_mission_request_get_seq>
80002a36:	18 98       	mov	r8,r12
80002a38:	5c 88       	casts.h	r8
80002a3a:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002a3e:	b2 08       	st.h	r9[0x0],r8
	mission_request->target_system = mavlink_msg_mission_request_get_target_system(msg);
80002a40:	ee fc ff fc 	ld.w	r12,r7[-4]
80002a44:	cb 8f       	rcall	800029b4 <mavlink_msg_mission_request_get_target_system>
80002a46:	18 98       	mov	r8,r12
80002a48:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002a4c:	b2 a8       	st.b	r9[0x2],r8
	mission_request->target_component = mavlink_msg_mission_request_get_target_component(msg);
80002a4e:	ee fc ff fc 	ld.w	r12,r7[-4]
80002a52:	cc 0f       	rcall	800029d2 <mavlink_msg_mission_request_get_target_component>
80002a54:	18 98       	mov	r8,r12
80002a56:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002a5a:	b2 b8       	st.b	r9[0x3],r8
#else
	memcpy(mission_request, _MAV_PAYLOAD(msg), MAVLINK_MSG_ID_MISSION_REQUEST_LEN);
#endif
}
80002a5c:	2f ed       	sub	sp,-8
80002a5e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002a62:	00 00       	add	r0,r0
80002a64:	80 00       	ld.sh	r0,r0[0x0]
80002a66:	28 aa       	sub	r10,-118

80002a68 <mavlink_msg_mission_set_current_get_target_system>:
 * @brief Get field target_system from mission_set_current message
 *
 * @return System ID
 */
static inline uint8_t mavlink_msg_mission_set_current_get_target_system(const mavlink_message_t* msg)
{
80002a68:	eb cd 40 80 	pushm	r7,lr
80002a6c:	1a 97       	mov	r7,sp
80002a6e:	20 1d       	sub	sp,4
80002a70:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  2);
80002a74:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002a78:	2f 88       	sub	r8,-8
80002a7a:	2f e8       	sub	r8,-2
80002a7c:	11 88       	ld.ub	r8,r8[0x0]
}
80002a7e:	10 9c       	mov	r12,r8
80002a80:	2f fd       	sub	sp,-4
80002a82:	e3 cd 80 80 	ldm	sp++,r7,pc

80002a86 <mavlink_msg_mission_set_current_get_target_component>:
 * @brief Get field target_component from mission_set_current message
 *
 * @return Component ID
 */
static inline uint8_t mavlink_msg_mission_set_current_get_target_component(const mavlink_message_t* msg)
{
80002a86:	eb cd 40 80 	pushm	r7,lr
80002a8a:	1a 97       	mov	r7,sp
80002a8c:	20 1d       	sub	sp,4
80002a8e:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  3);
80002a92:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002a96:	2f 88       	sub	r8,-8
80002a98:	2f d8       	sub	r8,-3
80002a9a:	11 88       	ld.ub	r8,r8[0x0]
}
80002a9c:	10 9c       	mov	r12,r8
80002a9e:	2f fd       	sub	sp,-4
80002aa0:	e3 cd 80 80 	ldm	sp++,r7,pc

80002aa4 <mavlink_msg_mission_set_current_get_seq>:
 * @brief Get field seq from mission_set_current message
 *
 * @return Sequence
 */
static inline uint16_t mavlink_msg_mission_set_current_get_seq(const mavlink_message_t* msg)
{
80002aa4:	eb cd 40 c0 	pushm	r6-r7,lr
80002aa8:	1a 97       	mov	r7,sp
80002aaa:	20 1d       	sub	sp,4
80002aac:	48 86       	lddpc	r6,80002acc <mavlink_msg_mission_set_current_get_seq+0x28>
80002aae:	1e 26       	rsub	r6,pc
80002ab0:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint16_t(msg,  0);
80002ab4:	30 0b       	mov	r11,0
80002ab6:	ee fc ff fc 	ld.w	r12,r7[-4]
80002aba:	fe b0 fc 91 	rcall	800023dc <_MAV_RETURN_uint16_t>
80002abe:	18 98       	mov	r8,r12
80002ac0:	5c 88       	casts.h	r8
80002ac2:	5c 88       	casts.h	r8
}
80002ac4:	10 9c       	mov	r12,r8
80002ac6:	2f fd       	sub	sp,-4
80002ac8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002acc:	80 00       	ld.sh	r0,r0[0x0]
80002ace:	29 32       	sub	r2,-109

80002ad0 <mavlink_msg_mission_set_current_decode>:
 *
 * @param msg The message to decode
 * @param mission_set_current C-struct to decode the message contents into
 */
static inline void mavlink_msg_mission_set_current_decode(const mavlink_message_t* msg, mavlink_mission_set_current_t* mission_set_current)
{
80002ad0:	eb cd 40 c0 	pushm	r6-r7,lr
80002ad4:	1a 97       	mov	r7,sp
80002ad6:	20 2d       	sub	sp,8
80002ad8:	49 06       	lddpc	r6,80002b18 <mavlink_msg_mission_set_current_decode+0x48>
80002ada:	1e 26       	rsub	r6,pc
80002adc:	ef 4c ff fc 	st.w	r7[-4],r12
80002ae0:	ef 4b ff f8 	st.w	r7[-8],r11
#if MAVLINK_NEED_BYTE_SWAP
	mission_set_current->seq = mavlink_msg_mission_set_current_get_seq(msg);
80002ae4:	ee fc ff fc 	ld.w	r12,r7[-4]
80002ae8:	cd ef       	rcall	80002aa4 <mavlink_msg_mission_set_current_get_seq>
80002aea:	18 98       	mov	r8,r12
80002aec:	5c 88       	casts.h	r8
80002aee:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002af2:	b2 08       	st.h	r9[0x0],r8
	mission_set_current->target_system = mavlink_msg_mission_set_current_get_target_system(msg);
80002af4:	ee fc ff fc 	ld.w	r12,r7[-4]
80002af8:	cb 8f       	rcall	80002a68 <mavlink_msg_mission_set_current_get_target_system>
80002afa:	18 98       	mov	r8,r12
80002afc:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002b00:	b2 a8       	st.b	r9[0x2],r8
	mission_set_current->target_component = mavlink_msg_mission_set_current_get_target_component(msg);
80002b02:	ee fc ff fc 	ld.w	r12,r7[-4]
80002b06:	cc 0f       	rcall	80002a86 <mavlink_msg_mission_set_current_get_target_component>
80002b08:	18 98       	mov	r8,r12
80002b0a:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002b0e:	b2 b8       	st.b	r9[0x3],r8
#else
	memcpy(mission_set_current, _MAV_PAYLOAD(msg), MAVLINK_MSG_ID_MISSION_SET_CURRENT_LEN);
#endif
}
80002b10:	2f ed       	sub	sp,-8
80002b12:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002b16:	00 00       	add	r0,r0
80002b18:	80 00       	ld.sh	r0,r0[0x0]
80002b1a:	29 5e       	sub	lr,-107

80002b1c <mavlink_msg_mission_current_send>:
 * @param seq Sequence
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_mission_current_send(mavlink_channel_t chan, uint16_t seq)
{
80002b1c:	eb cd 40 c0 	pushm	r6-r7,lr
80002b20:	1a 97       	mov	r7,sp
80002b22:	20 3d       	sub	sp,12
80002b24:	48 e6       	lddpc	r6,80002b5c <mavlink_msg_mission_current_send+0x40>
80002b26:	1e 26       	rsub	r6,pc
80002b28:	ef 4c ff f8 	st.w	r7[-8],r12
80002b2c:	16 98       	mov	r8,r11
80002b2e:	ef 58 ff f4 	st.h	r7[-12],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_MISSION_CURRENT_LEN];
	_mav_put_uint16_t(buf, 0, seq);
80002b32:	ee c9 00 0c 	sub	r9,r7,12
80002b36:	ee c8 00 04 	sub	r8,r7,4
80002b3a:	12 9b       	mov	r11,r9
80002b3c:	10 9c       	mov	r12,r8
80002b3e:	fe b0 fb e3 	rcall	80002304 <byte_swap_2>

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_CURRENT, buf, MAVLINK_MSG_ID_MISSION_CURRENT_LEN, MAVLINK_MSG_ID_MISSION_CURRENT_CRC);
80002b42:	ee ca 00 04 	sub	r10,r7,4
80002b46:	31 c8       	mov	r8,28
80002b48:	30 29       	mov	r9,2
80002b4a:	32 ab       	mov	r11,42
80002b4c:	ee fc ff f8 	ld.w	r12,r7[-8]
80002b50:	fe b0 fb 2c 	rcall	800021a8 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_CURRENT, (const char *)&packet, MAVLINK_MSG_ID_MISSION_CURRENT_LEN, MAVLINK_MSG_ID_MISSION_CURRENT_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_CURRENT, (const char *)&packet, MAVLINK_MSG_ID_MISSION_CURRENT_LEN);
#endif
#endif
}
80002b54:	2f dd       	sub	sp,-12
80002b56:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002b5a:	00 00       	add	r0,r0
80002b5c:	80 00       	ld.sh	r0,r0[0x0]
80002b5e:	29 aa       	sub	r10,-102

80002b60 <mavlink_msg_mission_request_list_get_target_system>:
 * @brief Get field target_system from mission_request_list message
 *
 * @return System ID
 */
static inline uint8_t mavlink_msg_mission_request_list_get_target_system(const mavlink_message_t* msg)
{
80002b60:	eb cd 40 80 	pushm	r7,lr
80002b64:	1a 97       	mov	r7,sp
80002b66:	20 1d       	sub	sp,4
80002b68:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  0);
80002b6c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002b70:	2f 88       	sub	r8,-8
80002b72:	11 88       	ld.ub	r8,r8[0x0]
}
80002b74:	10 9c       	mov	r12,r8
80002b76:	2f fd       	sub	sp,-4
80002b78:	e3 cd 80 80 	ldm	sp++,r7,pc

80002b7c <mavlink_msg_mission_request_list_get_target_component>:
 * @brief Get field target_component from mission_request_list message
 *
 * @return Component ID
 */
static inline uint8_t mavlink_msg_mission_request_list_get_target_component(const mavlink_message_t* msg)
{
80002b7c:	eb cd 40 80 	pushm	r7,lr
80002b80:	1a 97       	mov	r7,sp
80002b82:	20 1d       	sub	sp,4
80002b84:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  1);
80002b88:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002b8c:	2f 88       	sub	r8,-8
80002b8e:	2f f8       	sub	r8,-1
80002b90:	11 88       	ld.ub	r8,r8[0x0]
}
80002b92:	10 9c       	mov	r12,r8
80002b94:	2f fd       	sub	sp,-4
80002b96:	e3 cd 80 80 	ldm	sp++,r7,pc

80002b9a <mavlink_msg_mission_request_list_decode>:
 *
 * @param msg The message to decode
 * @param mission_request_list C-struct to decode the message contents into
 */
static inline void mavlink_msg_mission_request_list_decode(const mavlink_message_t* msg, mavlink_mission_request_list_t* mission_request_list)
{
80002b9a:	eb cd 40 c0 	pushm	r6-r7,lr
80002b9e:	1a 97       	mov	r7,sp
80002ba0:	20 2d       	sub	sp,8
80002ba2:	48 c6       	lddpc	r6,80002bd0 <mavlink_msg_mission_request_list_decode+0x36>
80002ba4:	1e 26       	rsub	r6,pc
80002ba6:	ef 4c ff fc 	st.w	r7[-4],r12
80002baa:	ef 4b ff f8 	st.w	r7[-8],r11
#if MAVLINK_NEED_BYTE_SWAP
	mission_request_list->target_system = mavlink_msg_mission_request_list_get_target_system(msg);
80002bae:	ee fc ff fc 	ld.w	r12,r7[-4]
80002bb2:	cd 7f       	rcall	80002b60 <mavlink_msg_mission_request_list_get_target_system>
80002bb4:	18 98       	mov	r8,r12
80002bb6:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002bba:	b2 88       	st.b	r9[0x0],r8
	mission_request_list->target_component = mavlink_msg_mission_request_list_get_target_component(msg);
80002bbc:	ee fc ff fc 	ld.w	r12,r7[-4]
80002bc0:	cd ef       	rcall	80002b7c <mavlink_msg_mission_request_list_get_target_component>
80002bc2:	18 98       	mov	r8,r12
80002bc4:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002bc8:	b2 98       	st.b	r9[0x1],r8
#else
	memcpy(mission_request_list, _MAV_PAYLOAD(msg), MAVLINK_MSG_ID_MISSION_REQUEST_LIST_LEN);
#endif
}
80002bca:	2f ed       	sub	sp,-8
80002bcc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002bd0:	80 00       	ld.sh	r0,r0[0x0]
80002bd2:	2a 28       	sub	r8,-94

80002bd4 <mavlink_msg_mission_count_send>:
 * @param count Number of mission items in the sequence
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_mission_count_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t count)
{
80002bd4:	eb cd 40 c0 	pushm	r6-r7,lr
80002bd8:	1a 97       	mov	r7,sp
80002bda:	20 5d       	sub	sp,20
80002bdc:	49 56       	lddpc	r6,80002c30 <mavlink_msg_mission_count_send+0x5c>
80002bde:	1e 26       	rsub	r6,pc
80002be0:	ef 4c ff f8 	st.w	r7[-8],r12
80002be4:	12 98       	mov	r8,r9
80002be6:	16 99       	mov	r9,r11
80002be8:	ef 69 ff f4 	st.b	r7[-12],r9
80002bec:	14 99       	mov	r9,r10
80002bee:	ef 69 ff f0 	st.b	r7[-16],r9
80002bf2:	ef 58 ff ec 	st.h	r7[-20],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_MISSION_COUNT_LEN];
	_mav_put_uint16_t(buf, 0, count);
80002bf6:	ee c9 00 14 	sub	r9,r7,20
80002bfa:	ee c8 00 04 	sub	r8,r7,4
80002bfe:	12 9b       	mov	r11,r9
80002c00:	10 9c       	mov	r12,r8
80002c02:	fe b0 fb 81 	rcall	80002304 <byte_swap_2>
	_mav_put_uint8_t(buf, 2, target_system);
80002c06:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80002c0a:	ef 68 ff fe 	st.b	r7[-2],r8
	_mav_put_uint8_t(buf, 3, target_component);
80002c0e:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80002c12:	ef 68 ff ff 	st.b	r7[-1],r8

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_COUNT, buf, MAVLINK_MSG_ID_MISSION_COUNT_LEN, MAVLINK_MSG_ID_MISSION_COUNT_CRC);
80002c16:	ee ca 00 04 	sub	r10,r7,4
80002c1a:	e0 68 00 dd 	mov	r8,221
80002c1e:	30 49       	mov	r9,4
80002c20:	32 cb       	mov	r11,44
80002c22:	ee fc ff f8 	ld.w	r12,r7[-8]
80002c26:	fe b0 fa c1 	rcall	800021a8 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_COUNT, (const char *)&packet, MAVLINK_MSG_ID_MISSION_COUNT_LEN, MAVLINK_MSG_ID_MISSION_COUNT_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_COUNT, (const char *)&packet, MAVLINK_MSG_ID_MISSION_COUNT_LEN);
#endif
#endif
}
80002c2a:	2f bd       	sub	sp,-20
80002c2c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002c30:	80 00       	ld.sh	r0,r0[0x0]
80002c32:	2a 62       	sub	r2,-90

80002c34 <mavlink_msg_mission_count_get_target_system>:
 * @brief Get field target_system from mission_count message
 *
 * @return System ID
 */
static inline uint8_t mavlink_msg_mission_count_get_target_system(const mavlink_message_t* msg)
{
80002c34:	eb cd 40 80 	pushm	r7,lr
80002c38:	1a 97       	mov	r7,sp
80002c3a:	20 1d       	sub	sp,4
80002c3c:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  2);
80002c40:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002c44:	2f 88       	sub	r8,-8
80002c46:	2f e8       	sub	r8,-2
80002c48:	11 88       	ld.ub	r8,r8[0x0]
}
80002c4a:	10 9c       	mov	r12,r8
80002c4c:	2f fd       	sub	sp,-4
80002c4e:	e3 cd 80 80 	ldm	sp++,r7,pc

80002c52 <mavlink_msg_mission_count_get_target_component>:
 * @brief Get field target_component from mission_count message
 *
 * @return Component ID
 */
static inline uint8_t mavlink_msg_mission_count_get_target_component(const mavlink_message_t* msg)
{
80002c52:	eb cd 40 80 	pushm	r7,lr
80002c56:	1a 97       	mov	r7,sp
80002c58:	20 1d       	sub	sp,4
80002c5a:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  3);
80002c5e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002c62:	2f 88       	sub	r8,-8
80002c64:	2f d8       	sub	r8,-3
80002c66:	11 88       	ld.ub	r8,r8[0x0]
}
80002c68:	10 9c       	mov	r12,r8
80002c6a:	2f fd       	sub	sp,-4
80002c6c:	e3 cd 80 80 	ldm	sp++,r7,pc

80002c70 <mavlink_msg_mission_count_get_count>:
 * @brief Get field count from mission_count message
 *
 * @return Number of mission items in the sequence
 */
static inline uint16_t mavlink_msg_mission_count_get_count(const mavlink_message_t* msg)
{
80002c70:	eb cd 40 c0 	pushm	r6-r7,lr
80002c74:	1a 97       	mov	r7,sp
80002c76:	20 1d       	sub	sp,4
80002c78:	48 86       	lddpc	r6,80002c98 <mavlink_msg_mission_count_get_count+0x28>
80002c7a:	1e 26       	rsub	r6,pc
80002c7c:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint16_t(msg,  0);
80002c80:	30 0b       	mov	r11,0
80002c82:	ee fc ff fc 	ld.w	r12,r7[-4]
80002c86:	fe b0 fb ab 	rcall	800023dc <_MAV_RETURN_uint16_t>
80002c8a:	18 98       	mov	r8,r12
80002c8c:	5c 88       	casts.h	r8
80002c8e:	5c 88       	casts.h	r8
}
80002c90:	10 9c       	mov	r12,r8
80002c92:	2f fd       	sub	sp,-4
80002c94:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002c98:	80 00       	ld.sh	r0,r0[0x0]
80002c9a:	2a fe       	sub	lr,-81

80002c9c <mavlink_msg_mission_count_decode>:
 *
 * @param msg The message to decode
 * @param mission_count C-struct to decode the message contents into
 */
static inline void mavlink_msg_mission_count_decode(const mavlink_message_t* msg, mavlink_mission_count_t* mission_count)
{
80002c9c:	eb cd 40 c0 	pushm	r6-r7,lr
80002ca0:	1a 97       	mov	r7,sp
80002ca2:	20 2d       	sub	sp,8
80002ca4:	49 06       	lddpc	r6,80002ce4 <mavlink_msg_mission_count_decode+0x48>
80002ca6:	1e 26       	rsub	r6,pc
80002ca8:	ef 4c ff fc 	st.w	r7[-4],r12
80002cac:	ef 4b ff f8 	st.w	r7[-8],r11
#if MAVLINK_NEED_BYTE_SWAP
	mission_count->count = mavlink_msg_mission_count_get_count(msg);
80002cb0:	ee fc ff fc 	ld.w	r12,r7[-4]
80002cb4:	cd ef       	rcall	80002c70 <mavlink_msg_mission_count_get_count>
80002cb6:	18 98       	mov	r8,r12
80002cb8:	5c 88       	casts.h	r8
80002cba:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002cbe:	b2 08       	st.h	r9[0x0],r8
	mission_count->target_system = mavlink_msg_mission_count_get_target_system(msg);
80002cc0:	ee fc ff fc 	ld.w	r12,r7[-4]
80002cc4:	cb 8f       	rcall	80002c34 <mavlink_msg_mission_count_get_target_system>
80002cc6:	18 98       	mov	r8,r12
80002cc8:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002ccc:	b2 a8       	st.b	r9[0x2],r8
	mission_count->target_component = mavlink_msg_mission_count_get_target_component(msg);
80002cce:	ee fc ff fc 	ld.w	r12,r7[-4]
80002cd2:	cc 0f       	rcall	80002c52 <mavlink_msg_mission_count_get_target_component>
80002cd4:	18 98       	mov	r8,r12
80002cd6:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002cda:	b2 b8       	st.b	r9[0x3],r8
#else
	memcpy(mission_count, _MAV_PAYLOAD(msg), MAVLINK_MSG_ID_MISSION_COUNT_LEN);
#endif
}
80002cdc:	2f ed       	sub	sp,-8
80002cde:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002ce2:	00 00       	add	r0,r0
80002ce4:	80 00       	ld.sh	r0,r0[0x0]
80002ce6:	2b 2a       	sub	r10,-78

80002ce8 <mavlink_msg_mission_clear_all_get_target_system>:
 * @brief Get field target_system from mission_clear_all message
 *
 * @return System ID
 */
static inline uint8_t mavlink_msg_mission_clear_all_get_target_system(const mavlink_message_t* msg)
{
80002ce8:	eb cd 40 80 	pushm	r7,lr
80002cec:	1a 97       	mov	r7,sp
80002cee:	20 1d       	sub	sp,4
80002cf0:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  0);
80002cf4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002cf8:	2f 88       	sub	r8,-8
80002cfa:	11 88       	ld.ub	r8,r8[0x0]
}
80002cfc:	10 9c       	mov	r12,r8
80002cfe:	2f fd       	sub	sp,-4
80002d00:	e3 cd 80 80 	ldm	sp++,r7,pc

80002d04 <mavlink_msg_mission_clear_all_get_target_component>:
 * @brief Get field target_component from mission_clear_all message
 *
 * @return Component ID
 */
static inline uint8_t mavlink_msg_mission_clear_all_get_target_component(const mavlink_message_t* msg)
{
80002d04:	eb cd 40 80 	pushm	r7,lr
80002d08:	1a 97       	mov	r7,sp
80002d0a:	20 1d       	sub	sp,4
80002d0c:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  1);
80002d10:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002d14:	2f 88       	sub	r8,-8
80002d16:	2f f8       	sub	r8,-1
80002d18:	11 88       	ld.ub	r8,r8[0x0]
}
80002d1a:	10 9c       	mov	r12,r8
80002d1c:	2f fd       	sub	sp,-4
80002d1e:	e3 cd 80 80 	ldm	sp++,r7,pc

80002d22 <mavlink_msg_mission_clear_all_decode>:
 *
 * @param msg The message to decode
 * @param mission_clear_all C-struct to decode the message contents into
 */
static inline void mavlink_msg_mission_clear_all_decode(const mavlink_message_t* msg, mavlink_mission_clear_all_t* mission_clear_all)
{
80002d22:	eb cd 40 c0 	pushm	r6-r7,lr
80002d26:	1a 97       	mov	r7,sp
80002d28:	20 2d       	sub	sp,8
80002d2a:	48 c6       	lddpc	r6,80002d58 <mavlink_msg_mission_clear_all_decode+0x36>
80002d2c:	1e 26       	rsub	r6,pc
80002d2e:	ef 4c ff fc 	st.w	r7[-4],r12
80002d32:	ef 4b ff f8 	st.w	r7[-8],r11
#if MAVLINK_NEED_BYTE_SWAP
	mission_clear_all->target_system = mavlink_msg_mission_clear_all_get_target_system(msg);
80002d36:	ee fc ff fc 	ld.w	r12,r7[-4]
80002d3a:	cd 7f       	rcall	80002ce8 <mavlink_msg_mission_clear_all_get_target_system>
80002d3c:	18 98       	mov	r8,r12
80002d3e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002d42:	b2 88       	st.b	r9[0x0],r8
	mission_clear_all->target_component = mavlink_msg_mission_clear_all_get_target_component(msg);
80002d44:	ee fc ff fc 	ld.w	r12,r7[-4]
80002d48:	cd ef       	rcall	80002d04 <mavlink_msg_mission_clear_all_get_target_component>
80002d4a:	18 98       	mov	r8,r12
80002d4c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002d50:	b2 98       	st.b	r9[0x1],r8
#else
	memcpy(mission_clear_all, _MAV_PAYLOAD(msg), MAVLINK_MSG_ID_MISSION_CLEAR_ALL_LEN);
#endif
}
80002d52:	2f ed       	sub	sp,-8
80002d54:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002d58:	80 00       	ld.sh	r0,r0[0x0]
80002d5a:	2b b0       	sub	r0,-69

80002d5c <mavlink_msg_mission_item_reached_send>:
 * @param seq Sequence
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_mission_item_reached_send(mavlink_channel_t chan, uint16_t seq)
{
80002d5c:	eb cd 40 c0 	pushm	r6-r7,lr
80002d60:	1a 97       	mov	r7,sp
80002d62:	20 3d       	sub	sp,12
80002d64:	48 e6       	lddpc	r6,80002d9c <mavlink_msg_mission_item_reached_send+0x40>
80002d66:	1e 26       	rsub	r6,pc
80002d68:	ef 4c ff f8 	st.w	r7[-8],r12
80002d6c:	16 98       	mov	r8,r11
80002d6e:	ef 58 ff f4 	st.h	r7[-12],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_MISSION_ITEM_REACHED_LEN];
	_mav_put_uint16_t(buf, 0, seq);
80002d72:	ee c9 00 0c 	sub	r9,r7,12
80002d76:	ee c8 00 04 	sub	r8,r7,4
80002d7a:	12 9b       	mov	r11,r9
80002d7c:	10 9c       	mov	r12,r8
80002d7e:	fe b0 fa c3 	rcall	80002304 <byte_swap_2>

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_ITEM_REACHED, buf, MAVLINK_MSG_ID_MISSION_ITEM_REACHED_LEN, MAVLINK_MSG_ID_MISSION_ITEM_REACHED_CRC);
80002d82:	ee ca 00 04 	sub	r10,r7,4
80002d86:	30 b8       	mov	r8,11
80002d88:	30 29       	mov	r9,2
80002d8a:	32 eb       	mov	r11,46
80002d8c:	ee fc ff f8 	ld.w	r12,r7[-8]
80002d90:	fe b0 fa 0c 	rcall	800021a8 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_ITEM_REACHED, (const char *)&packet, MAVLINK_MSG_ID_MISSION_ITEM_REACHED_LEN, MAVLINK_MSG_ID_MISSION_ITEM_REACHED_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_ITEM_REACHED, (const char *)&packet, MAVLINK_MSG_ID_MISSION_ITEM_REACHED_LEN);
#endif
#endif
}
80002d94:	2f dd       	sub	sp,-12
80002d96:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002d9a:	00 00       	add	r0,r0
80002d9c:	80 00       	ld.sh	r0,r0[0x0]
80002d9e:	2b ea       	sub	r10,-66

80002da0 <mavlink_msg_mission_ack_send>:
 * @param type See MAV_MISSION_RESULT enum
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_mission_ack_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint8_t type)
{
80002da0:	eb cd 40 c0 	pushm	r6-r7,lr
80002da4:	1a 97       	mov	r7,sp
80002da6:	20 5d       	sub	sp,20
80002da8:	49 36       	lddpc	r6,80002df4 <mavlink_msg_mission_ack_send+0x54>
80002daa:	1e 26       	rsub	r6,pc
80002dac:	ef 4c ff f8 	st.w	r7[-8],r12
80002db0:	12 98       	mov	r8,r9
80002db2:	16 99       	mov	r9,r11
80002db4:	ef 69 ff f4 	st.b	r7[-12],r9
80002db8:	14 99       	mov	r9,r10
80002dba:	ef 69 ff f0 	st.b	r7[-16],r9
80002dbe:	ef 68 ff ec 	st.b	r7[-20],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_MISSION_ACK_LEN];
	_mav_put_uint8_t(buf, 0, target_system);
80002dc2:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80002dc6:	ef 68 ff fc 	st.b	r7[-4],r8
	_mav_put_uint8_t(buf, 1, target_component);
80002dca:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80002dce:	ef 68 ff fd 	st.b	r7[-3],r8
	_mav_put_uint8_t(buf, 2, type);
80002dd2:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80002dd6:	ef 68 ff fe 	st.b	r7[-2],r8

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_ACK, buf, MAVLINK_MSG_ID_MISSION_ACK_LEN, MAVLINK_MSG_ID_MISSION_ACK_CRC);
80002dda:	ee ca 00 04 	sub	r10,r7,4
80002dde:	e0 68 00 99 	mov	r8,153
80002de2:	30 39       	mov	r9,3
80002de4:	32 fb       	mov	r11,47
80002de6:	ee fc ff f8 	ld.w	r12,r7[-8]
80002dea:	fe b0 f9 df 	rcall	800021a8 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_ACK, (const char *)&packet, MAVLINK_MSG_ID_MISSION_ACK_LEN, MAVLINK_MSG_ID_MISSION_ACK_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_ACK, (const char *)&packet, MAVLINK_MSG_ID_MISSION_ACK_LEN);
#endif
#endif
}
80002dee:	2f bd       	sub	sp,-20
80002df0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002df4:	80 00       	ld.sh	r0,r0[0x0]
80002df6:	2c 2e       	sub	lr,-62

80002df8 <mavlink_msg_mission_ack_get_target_system>:
 * @brief Get field target_system from mission_ack message
 *
 * @return System ID
 */
static inline uint8_t mavlink_msg_mission_ack_get_target_system(const mavlink_message_t* msg)
{
80002df8:	eb cd 40 80 	pushm	r7,lr
80002dfc:	1a 97       	mov	r7,sp
80002dfe:	20 1d       	sub	sp,4
80002e00:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  0);
80002e04:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002e08:	2f 88       	sub	r8,-8
80002e0a:	11 88       	ld.ub	r8,r8[0x0]
}
80002e0c:	10 9c       	mov	r12,r8
80002e0e:	2f fd       	sub	sp,-4
80002e10:	e3 cd 80 80 	ldm	sp++,r7,pc

80002e14 <mavlink_msg_mission_ack_get_target_component>:
 * @brief Get field target_component from mission_ack message
 *
 * @return Component ID
 */
static inline uint8_t mavlink_msg_mission_ack_get_target_component(const mavlink_message_t* msg)
{
80002e14:	eb cd 40 80 	pushm	r7,lr
80002e18:	1a 97       	mov	r7,sp
80002e1a:	20 1d       	sub	sp,4
80002e1c:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  1);
80002e20:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002e24:	2f 88       	sub	r8,-8
80002e26:	2f f8       	sub	r8,-1
80002e28:	11 88       	ld.ub	r8,r8[0x0]
}
80002e2a:	10 9c       	mov	r12,r8
80002e2c:	2f fd       	sub	sp,-4
80002e2e:	e3 cd 80 80 	ldm	sp++,r7,pc

80002e32 <mavlink_msg_mission_ack_get_type>:
 * @brief Get field type from mission_ack message
 *
 * @return See MAV_MISSION_RESULT enum
 */
static inline uint8_t mavlink_msg_mission_ack_get_type(const mavlink_message_t* msg)
{
80002e32:	eb cd 40 80 	pushm	r7,lr
80002e36:	1a 97       	mov	r7,sp
80002e38:	20 1d       	sub	sp,4
80002e3a:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  2);
80002e3e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002e42:	2f 88       	sub	r8,-8
80002e44:	2f e8       	sub	r8,-2
80002e46:	11 88       	ld.ub	r8,r8[0x0]
}
80002e48:	10 9c       	mov	r12,r8
80002e4a:	2f fd       	sub	sp,-4
80002e4c:	e3 cd 80 80 	ldm	sp++,r7,pc

80002e50 <mavlink_msg_mission_ack_decode>:
 *
 * @param msg The message to decode
 * @param mission_ack C-struct to decode the message contents into
 */
static inline void mavlink_msg_mission_ack_decode(const mavlink_message_t* msg, mavlink_mission_ack_t* mission_ack)
{
80002e50:	eb cd 40 c0 	pushm	r6-r7,lr
80002e54:	1a 97       	mov	r7,sp
80002e56:	20 2d       	sub	sp,8
80002e58:	48 f6       	lddpc	r6,80002e94 <mavlink_msg_mission_ack_decode+0x44>
80002e5a:	1e 26       	rsub	r6,pc
80002e5c:	ef 4c ff fc 	st.w	r7[-4],r12
80002e60:	ef 4b ff f8 	st.w	r7[-8],r11
#if MAVLINK_NEED_BYTE_SWAP
	mission_ack->target_system = mavlink_msg_mission_ack_get_target_system(msg);
80002e64:	ee fc ff fc 	ld.w	r12,r7[-4]
80002e68:	cc 8f       	rcall	80002df8 <mavlink_msg_mission_ack_get_target_system>
80002e6a:	18 98       	mov	r8,r12
80002e6c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002e70:	b2 88       	st.b	r9[0x0],r8
	mission_ack->target_component = mavlink_msg_mission_ack_get_target_component(msg);
80002e72:	ee fc ff fc 	ld.w	r12,r7[-4]
80002e76:	cc ff       	rcall	80002e14 <mavlink_msg_mission_ack_get_target_component>
80002e78:	18 98       	mov	r8,r12
80002e7a:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002e7e:	b2 98       	st.b	r9[0x1],r8
	mission_ack->type = mavlink_msg_mission_ack_get_type(msg);
80002e80:	ee fc ff fc 	ld.w	r12,r7[-4]
80002e84:	cd 7f       	rcall	80002e32 <mavlink_msg_mission_ack_get_type>
80002e86:	18 98       	mov	r8,r12
80002e88:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002e8c:	b2 a8       	st.b	r9[0x2],r8
#else
	memcpy(mission_ack, _MAV_PAYLOAD(msg), MAVLINK_MSG_ID_MISSION_ACK_LEN);
#endif
}
80002e8e:	2f ed       	sub	sp,-8
80002e90:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002e94:	80 00       	ld.sh	r0,r0[0x0]
80002e96:	2c de       	sub	lr,-51

80002e98 <scalar_product>:
	return out;
}


float static inline scalar_product(const float u[], const float v[])
{
80002e98:	eb cd 40 80 	pushm	r7,lr
80002e9c:	1a 97       	mov	r7,sp
80002e9e:	20 3d       	sub	sp,12
80002ea0:	ef 4c ff f8 	st.w	r7[-8],r12
80002ea4:	ef 4b ff f4 	st.w	r7[-12],r11
	float scp = (u[0]*v[0]+u[1]*v[1]+u[2]*v[2]);
80002ea8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002eac:	70 09       	ld.w	r9,r8[0x0]
80002eae:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002eb2:	70 08       	ld.w	r8,r8[0x0]
80002eb4:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80002eb8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002ebc:	2f c8       	sub	r8,-4
80002ebe:	70 0a       	ld.w	r10,r8[0x0]
80002ec0:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002ec4:	2f c8       	sub	r8,-4
80002ec6:	70 08       	ld.w	r8,r8[0x0]
80002ec8:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80002ecc:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80002ed0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002ed4:	2f 88       	sub	r8,-8
80002ed6:	70 0a       	ld.w	r10,r8[0x0]
80002ed8:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002edc:	2f 88       	sub	r8,-8
80002ede:	70 08       	ld.w	r8,r8[0x0]
80002ee0:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80002ee4:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80002ee8:	ef 48 ff fc 	st.w	r7[-4],r8
	return scp;
80002eec:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80002ef0:	10 9c       	mov	r12,r8
80002ef2:	2f dd       	sub	sp,-12
80002ef4:	e3 cd 80 80 	ldm	sp++,r7,pc

80002ef8 <vector_norm_sqr>:
	result=0.5*(result+(input/result));
	return result;
}

float static inline vector_norm_sqr(float u[])
{
80002ef8:	eb cd 40 c0 	pushm	r6-r7,lr
80002efc:	1a 97       	mov	r7,sp
80002efe:	20 2d       	sub	sp,8
80002f00:	48 96       	lddpc	r6,80002f24 <vector_norm_sqr+0x2c>
80002f02:	1e 26       	rsub	r6,pc
80002f04:	ef 4c ff f8 	st.w	r7[-8],r12
	float norm = scalar_product(u,u);
80002f08:	ee fb ff f8 	ld.w	r11,r7[-8]
80002f0c:	ee fc ff f8 	ld.w	r12,r7[-8]
80002f10:	cc 4f       	rcall	80002e98 <scalar_product>
80002f12:	18 98       	mov	r8,r12
80002f14:	ef 48 ff fc 	st.w	r7[-4],r8
	return norm;
80002f18:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80002f1c:	10 9c       	mov	r12,r8
80002f1e:	2f ed       	sub	sp,-8
80002f20:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002f24:	80 00       	ld.sh	r0,r0[0x0]
80002f26:	2d 86       	sub	r6,-40

80002f28 <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
80002f28:	eb cd 40 c0 	pushm	r6-r7,lr
80002f2c:	1a 97       	mov	r7,sp
80002f2e:	20 6d       	sub	sp,24
80002f30:	49 e6       	lddpc	r6,80002fa8 <interpolate+0x80>
80002f32:	1e 26       	rsub	r6,pc
80002f34:	ef 4c ff f8 	st.w	r7[-8],r12
80002f38:	ef 4b ff f4 	st.w	r7[-12],r11
80002f3c:	ef 4a ff f0 	st.w	r7[-16],r10
80002f40:	ef 49 ff ec 	st.w	r7[-20],r9
80002f44:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
80002f48:	ee f9 ff f4 	ld.w	r9,r7[-12]
80002f4c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002f50:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
80002f54:	c0 41       	brne	80002f5c <interpolate+0x34>
	{
		return y1;
80002f56:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002f5a:	c2 38       	rjmp	80002fa0 <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
80002f5c:	ee f9 ff e8 	ld.w	r9,r7[-24]
80002f60:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002f64:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80002f68:	ee fa ff f8 	ld.w	r10,r7[-8]
80002f6c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002f70:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80002f74:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80002f78:	ee fa ff f0 	ld.w	r10,r7[-16]
80002f7c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80002f80:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80002f84:	12 9b       	mov	r11,r9
80002f86:	10 9c       	mov	r12,r8
80002f88:	f0 16 00 08 	mcall	r6[32]
80002f8c:	18 98       	mov	r8,r12
80002f8e:	10 99       	mov	r9,r8
80002f90:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002f94:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80002f98:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
80002f9c:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
80002fa0:	10 9c       	mov	r12,r8
80002fa2:	2f ad       	sub	sp,-24
80002fa4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002fa8:	80 00       	ld.sh	r0,r0[0x0]
80002faa:	2d b6       	sub	r6,-37

80002fac <get_thrust_from_remote>:


static float inline get_roll_from_remote()	{return rc_get_channel_neutral(RC_ROLL)*RC_ROLL_DIR * RC_SCALEFACTOR; };
static float inline get_pitch_from_remote()	{return rc_get_channel_neutral(RC_PITCH)*RC_PITCH_DIR * RC_SCALEFACTOR; };
static float inline get_yaw_from_remote()	{return rc_get_channel_neutral(RC_YAW)*RC_YAW_DIR * RC_SCALEFACTOR; };
static float inline get_thrust_from_remote()	{return rc_get_channel(RC_THROTTLE)*RC_THROTTLE_DIR*RC_SCALEFACTOR; };
80002fac:	eb cd 40 c0 	pushm	r6-r7,lr
80002fb0:	1a 97       	mov	r7,sp
80002fb2:	48 e6       	lddpc	r6,80002fe8 <get_thrust_from_remote+0x3c>
80002fb4:	1e 26       	rsub	r6,pc
80002fb6:	30 0c       	mov	r12,0
80002fb8:	f0 16 00 1b 	mcall	r6[108]
80002fbc:	18 98       	mov	r8,r12
80002fbe:	10 9c       	mov	r12,r8
80002fc0:	f0 16 00 1a 	mcall	r6[104]
80002fc4:	30 08       	mov	r8,0
80002fc6:	e0 69 60 00 	mov	r9,24576
80002fca:	ea 19 40 7b 	orh	r9,0x407b
80002fce:	f0 16 00 0c 	mcall	r6[48]
80002fd2:	14 98       	mov	r8,r10
80002fd4:	16 99       	mov	r9,r11
80002fd6:	10 9a       	mov	r10,r8
80002fd8:	12 9b       	mov	r11,r9
80002fda:	f0 16 00 09 	mcall	r6[36]
80002fde:	18 98       	mov	r8,r12
80002fe0:	10 9c       	mov	r12,r8
80002fe2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002fe6:	00 00       	add	r0,r0
80002fe8:	80 00       	ld.sh	r0,r0[0x0]
80002fea:	2e 38       	sub	r8,-29

80002fec <init_waypoint_handler>:
central_data_t *centralData;

int int_loop_count = 0;

void init_waypoint_handler()
{
80002fec:	eb cd 40 c0 	pushm	r6-r7,lr
80002ff0:	1a 97       	mov	r7,sp
80002ff2:	49 c6       	lddpc	r6,80003060 <init_waypoint_handler+0x74>
80002ff4:	1e 26       	rsub	r6,pc
	start_timeout = get_millis();
80002ff6:	f0 16 00 0f 	mcall	r6[60]
80002ffa:	18 99       	mov	r9,r12
80002ffc:	ec f8 01 60 	ld.w	r8,r6[352]
80003000:	91 09       	st.w	r8[0x0],r9
	timeout_max_wp = 10000;
80003002:	ec f8 03 f0 	ld.w	r8,r6[1008]
80003006:	e0 69 27 10 	mov	r9,10000
8000300a:	91 09       	st.w	r8[0x0],r9
	centralData = get_central_data();
8000300c:	f0 16 00 31 	mcall	r6[196]
80003010:	18 99       	mov	r9,r12
80003012:	ec f8 00 00 	ld.w	r8,r6[0]
80003016:	91 09       	st.w	r8[0x0],r9
	
	centralData->critical_behavior = CLIMB_TO_SAFE_ALT;
80003018:	ec f8 00 00 	ld.w	r8,r6[0]
8000301c:	70 08       	ld.w	r8,r8[0x0]
8000301e:	30 19       	mov	r9,1
80003020:	f1 49 12 e4 	st.w	r8[4836],r9
	centralData->critical_init = false;
80003024:	ec f8 00 00 	ld.w	r8,r6[0]
80003028:	70 09       	ld.w	r9,r8[0x0]
8000302a:	30 08       	mov	r8,0
8000302c:	f3 68 10 b9 	st.b	r9[4281],r8
	centralData->critical_next_state = false;
80003030:	ec f8 00 00 	ld.w	r8,r6[0]
80003034:	70 09       	ld.w	r9,r8[0x0]
80003036:	30 08       	mov	r8,0
80003038:	f3 68 10 ba 	st.b	r9[4282],r8
	
	init_waypoint_list(centralData->waypoint_list, &centralData->number_of_waypoints);
8000303c:	ec f8 00 00 	ld.w	r8,r6[0]
80003040:	70 08       	ld.w	r8,r8[0x0]
80003042:	f0 c9 ef e4 	sub	r9,r8,-4124
80003046:	ec f8 00 00 	ld.w	r8,r6[0]
8000304a:	70 08       	ld.w	r8,r8[0x0]
8000304c:	f0 c8 f1 f4 	sub	r8,r8,-3596
80003050:	12 9b       	mov	r11,r9
80003052:	10 9c       	mov	r12,r8
80003054:	f0 16 01 50 	mcall	r6[1344]
	init_wp();
80003058:	f0 16 00 6e 	mcall	r6[440]
}
8000305c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80003060:	80 00       	ld.sh	r0,r0[0x0]
80003062:	2e 78       	sub	r8,-25
80003064:	4e 61       	lddpc	r1,800031fc <init_wp+0x178>
80003066:	76 20       	ld.w	r0,r11[0x8]
80003068:	69 6e       	ld.w	lr,r4[0x58]
8000306a:	69 74       	ld.w	r4,r4[0x5c]
8000306c:	0a 00       	add	r0,r5
8000306e:	00 00       	add	r0,r0
80003070:	57 61       	stdsp	sp[0x1d8],r1
80003072:	79 70       	ld.w	r0,r12[0x5c]
80003074:	6f 69       	ld.w	r9,r7[0x58]
80003076:	6e 74       	ld.w	r4,r7[0x1c]
80003078:	20 4e       	sub	lr,4
8000307a:	72 00       	ld.w	r0,r9[0x0]
8000307c:	20 73       	sub	r3,7
8000307e:	65 74       	ld.w	r4,r2[0x5c]
80003080:	2c 0a       	sub	r10,-64
	...

80003084 <init_wp>:

void init_wp()
{
80003084:	eb cd 40 e8 	pushm	r3,r5-r7,lr
80003088:	1a 97       	mov	r7,sp
8000308a:	21 0d       	sub	sp,64
8000308c:	fe f6 02 fc 	ld.w	r6,pc[764]
80003090:	1e 26       	rsub	r6,pc
	uint8_t i,j;
	float rel_pos[3];
	
	if (int_loop_count==0)
80003092:	ec f8 03 1c 	ld.w	r8,r6[796]
80003096:	70 08       	ld.w	r8,r8[0x0]
80003098:	58 08       	cp.w	r8,0
8000309a:	c0 51       	brne	800030a4 <init_wp+0x20>
	{
		dbg_print("Nav init\n");
8000309c:	fe cc 00 38 	sub	r12,pc,56
800030a0:	f0 16 00 01 	mcall	r6[4]
	}
	int_loop_count=(int_loop_count+1)%1000;
800030a4:	ec f8 03 1c 	ld.w	r8,r6[796]
800030a8:	70 08       	ld.w	r8,r8[0x0]
800030aa:	f0 c9 ff ff 	sub	r9,r8,-1
800030ae:	e0 68 4d d3 	mov	r8,19923
800030b2:	ea 18 10 62 	orh	r8,0x1062
800030b6:	f2 08 04 4a 	muls.d	r10,r9,r8
800030ba:	f6 0a 14 06 	asr	r10,r11,0x6
800030be:	f2 08 14 1f 	asr	r8,r9,0x1f
800030c2:	f4 08 01 08 	sub	r8,r10,r8
800030c6:	e0 6a 03 e8 	mov	r10,1000
800030ca:	b5 38       	mul	r8,r10
800030cc:	f2 08 01 08 	sub	r8,r9,r8
800030d0:	ec f9 03 1c 	ld.w	r9,r6[796]
800030d4:	93 08       	st.w	r9[0x0],r8
	
	if ((centralData->number_of_waypoints > 0) && (centralData->position_estimator.init_gps_position || centralData->simulation_mode) && centralData->waypoint_receiving == false)
800030d6:	ec f8 00 00 	ld.w	r8,r6[0]
800030da:	70 08       	ld.w	r8,r8[0x0]
800030dc:	f1 08 10 1c 	ld.sh	r8,r8[4124]
800030e0:	58 08       	cp.w	r8,0
800030e2:	e0 80 01 4f 	breq	80003380 <init_wp+0x2fc>
800030e6:	ec f8 00 00 	ld.w	r8,r6[0]
800030ea:	70 08       	ld.w	r8,r8[0x0]
800030ec:	f1 38 0d 64 	ld.ub	r8,r8[3428]
800030f0:	58 08       	cp.w	r8,0
800030f2:	c0 91       	brne	80003104 <init_wp+0x80>
800030f4:	ec f8 00 00 	ld.w	r8,r6[0]
800030f8:	70 08       	ld.w	r8,r8[0x0]
800030fa:	f0 f8 10 c0 	ld.w	r8,r8[4288]
800030fe:	58 08       	cp.w	r8,0
80003100:	e0 80 01 40 	breq	80003380 <init_wp+0x2fc>
80003104:	ec f8 00 00 	ld.w	r8,r6[0]
80003108:	70 08       	ld.w	r8,r8[0x0]
8000310a:	f1 38 10 b6 	ld.ub	r8,r8[4278]
8000310e:	ec 18 00 01 	eorl	r8,0x1
80003112:	5c 58       	castu.b	r8
80003114:	e0 80 01 36 	breq	80003380 <init_wp+0x2fc>
	{
		for (i=0;i<centralData->number_of_waypoints;i++)
80003118:	30 08       	mov	r8,0
8000311a:	ef 68 ff fe 	st.b	r7[-2],r8
8000311e:	c2 69       	rjmp	8000336a <init_wp+0x2e6>
		{
			if ((centralData->waypoint_list[i].current == 1)&&(!centralData->waypoint_set))
80003120:	ec f8 00 00 	ld.w	r8,r6[0]
80003124:	70 0a       	ld.w	r10,r8[0x0]
80003126:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8000312a:	12 98       	mov	r8,r9
8000312c:	a1 78       	lsl	r8,0x1
8000312e:	12 08       	add	r8,r9
80003130:	a5 68       	lsl	r8,0x4
80003132:	f4 08 00 08 	add	r8,r10,r8
80003136:	f0 c8 f1 f0 	sub	r8,r8,-3600
8000313a:	11 89       	ld.ub	r9,r8[0x0]
8000313c:	30 18       	mov	r8,1
8000313e:	f0 09 18 00 	cp.b	r9,r8
80003142:	e0 81 01 0f 	brne	80003360 <init_wp+0x2dc>
80003146:	ec f8 00 00 	ld.w	r8,r6[0]
8000314a:	70 08       	ld.w	r8,r8[0x0]
8000314c:	f1 38 10 b4 	ld.ub	r8,r8[4276]
80003150:	ec 18 00 01 	eorl	r8,0x1
80003154:	5c 58       	castu.b	r8
80003156:	e0 80 01 05 	breq	80003360 <init_wp+0x2dc>
			{
				centralData->current_wp_count = i;
8000315a:	ec f8 00 00 	ld.w	r8,r6[0]
8000315e:	70 09       	ld.w	r9,r8[0x0]
80003160:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80003164:	f3 68 10 1e 	st.b	r9[4126],r8
				centralData->current_waypoint = centralData->waypoint_list[centralData->current_wp_count];
80003168:	ec f8 00 00 	ld.w	r8,r6[0]
8000316c:	70 0a       	ld.w	r10,r8[0x0]
8000316e:	ec f8 00 00 	ld.w	r8,r6[0]
80003172:	70 0b       	ld.w	r11,r8[0x0]
80003174:	ec f8 00 00 	ld.w	r8,r6[0]
80003178:	70 08       	ld.w	r8,r8[0x0]
8000317a:	f1 38 10 1e 	ld.ub	r8,r8[4126]
8000317e:	f3 d8 b0 08 	bfexts	r9,r8,0x0,0x8
80003182:	12 98       	mov	r8,r9
80003184:	a1 78       	lsl	r8,0x1
80003186:	12 08       	add	r8,r9
80003188:	a5 68       	lsl	r8,0x4
8000318a:	f6 08 00 08 	add	r8,r11,r8
8000318e:	f0 c8 f1 f4 	sub	r8,r8,-3596
80003192:	f4 cb f0 14 	sub	r11,r10,-4076
80003196:	10 9a       	mov	r10,r8
80003198:	f6 c8 00 00 	sub	r8,r11,0
8000319c:	f4 c9 00 00 	sub	r9,r10,0
800031a0:	72 0c       	ld.w	r12,r9[0x0]
800031a2:	91 0c       	st.w	r8[0x0],r12
800031a4:	72 1c       	ld.w	r12,r9[0x4]
800031a6:	91 1c       	st.w	r8[0x4],r12
800031a8:	72 2c       	ld.w	r12,r9[0x8]
800031aa:	91 2c       	st.w	r8[0x8],r12
800031ac:	72 39       	ld.w	r9,r9[0xc]
800031ae:	91 39       	st.w	r8[0xc],r9
800031b0:	f6 c8 ff f0 	sub	r8,r11,-16
800031b4:	f4 c9 ff f0 	sub	r9,r10,-16
800031b8:	72 0c       	ld.w	r12,r9[0x0]
800031ba:	91 0c       	st.w	r8[0x0],r12
800031bc:	72 1c       	ld.w	r12,r9[0x4]
800031be:	91 1c       	st.w	r8[0x4],r12
800031c0:	72 2c       	ld.w	r12,r9[0x8]
800031c2:	91 2c       	st.w	r8[0x8],r12
800031c4:	72 39       	ld.w	r9,r9[0xc]
800031c6:	91 39       	st.w	r8[0xc],r9
800031c8:	f6 c8 ff e0 	sub	r8,r11,-32
800031cc:	f4 c9 ff e0 	sub	r9,r10,-32
800031d0:	72 0a       	ld.w	r10,r9[0x0]
800031d2:	91 0a       	st.w	r8[0x0],r10
800031d4:	72 1a       	ld.w	r10,r9[0x4]
800031d6:	91 1a       	st.w	r8[0x4],r10
800031d8:	72 2a       	ld.w	r10,r9[0x8]
800031da:	91 2a       	st.w	r8[0x8],r10
800031dc:	72 39       	ld.w	r9,r9[0xc]
800031de:	91 39       	st.w	r8[0xc],r9
				centralData->waypoint_coordinates = set_waypoint_from_frame(centralData->current_waypoint,centralData->position_estimator.localPosition.origin);
800031e0:	ec f8 00 00 	ld.w	r8,r6[0]
800031e4:	70 05       	ld.w	r5,r8[0x0]
800031e6:	ec f8 00 00 	ld.w	r8,r6[0]
800031ea:	70 08       	ld.w	r8,r8[0x0]
800031ec:	ec f9 00 00 	ld.w	r9,r6[0]
800031f0:	72 0e       	ld.w	lr,r9[0x0]
800031f2:	ee cc 00 40 	sub	r12,r7,64
800031f6:	20 7d       	sub	sp,28
800031f8:	1a 99       	mov	r9,sp
800031fa:	12 9a       	mov	r10,r9
800031fc:	f0 cb f2 54 	sub	r11,r8,-3500
80003200:	f4 c8 00 00 	sub	r8,r10,0
80003204:	f6 c9 00 00 	sub	r9,r11,0
80003208:	72 03       	ld.w	r3,r9[0x0]
8000320a:	91 03       	st.w	r8[0x0],r3
8000320c:	72 13       	ld.w	r3,r9[0x4]
8000320e:	91 13       	st.w	r8[0x4],r3
80003210:	72 23       	ld.w	r3,r9[0x8]
80003212:	91 23       	st.w	r8[0x8],r3
80003214:	72 39       	ld.w	r9,r9[0xc]
80003216:	91 39       	st.w	r8[0xc],r9
80003218:	f6 e8 00 10 	ld.d	r8,r11[16]
8000321c:	f4 e9 00 10 	st.d	r10[16],r8
80003220:	76 68       	ld.w	r8,r11[0x18]
80003222:	95 68       	st.w	r10[0x18],r8
80003224:	20 cd       	sub	sp,48
80003226:	1a 98       	mov	r8,sp
80003228:	10 9b       	mov	r11,r8
8000322a:	fc ca f0 14 	sub	r10,lr,-4076
8000322e:	f6 c8 00 00 	sub	r8,r11,0
80003232:	f4 c9 00 00 	sub	r9,r10,0
80003236:	72 0e       	ld.w	lr,r9[0x0]
80003238:	91 0e       	st.w	r8[0x0],lr
8000323a:	72 1e       	ld.w	lr,r9[0x4]
8000323c:	91 1e       	st.w	r8[0x4],lr
8000323e:	72 2e       	ld.w	lr,r9[0x8]
80003240:	91 2e       	st.w	r8[0x8],lr
80003242:	72 39       	ld.w	r9,r9[0xc]
80003244:	91 39       	st.w	r8[0xc],r9
80003246:	f6 c8 ff f0 	sub	r8,r11,-16
8000324a:	f4 c9 ff f0 	sub	r9,r10,-16
8000324e:	72 0e       	ld.w	lr,r9[0x0]
80003250:	91 0e       	st.w	r8[0x0],lr
80003252:	72 1e       	ld.w	lr,r9[0x4]
80003254:	91 1e       	st.w	r8[0x4],lr
80003256:	72 2e       	ld.w	lr,r9[0x8]
80003258:	91 2e       	st.w	r8[0x8],lr
8000325a:	72 39       	ld.w	r9,r9[0xc]
8000325c:	91 39       	st.w	r8[0xc],r9
8000325e:	f6 c8 ff e0 	sub	r8,r11,-32
80003262:	f4 c9 ff e0 	sub	r9,r10,-32
80003266:	72 0a       	ld.w	r10,r9[0x0]
80003268:	91 0a       	st.w	r8[0x0],r10
8000326a:	72 1a       	ld.w	r10,r9[0x4]
8000326c:	91 1a       	st.w	r8[0x4],r10
8000326e:	72 2a       	ld.w	r10,r9[0x8]
80003270:	91 2a       	st.w	r8[0x8],r10
80003272:	72 39       	ld.w	r9,r9[0xc]
80003274:	91 39       	st.w	r8[0xc],r9
80003276:	f0 16 00 f5 	mcall	r6[980]
8000327a:	2e dd       	sub	sp,-76
8000327c:	ea cb ef e0 	sub	r11,r5,-4128
80003280:	ee ca 00 40 	sub	r10,r7,64
80003284:	f6 c8 00 00 	sub	r8,r11,0
80003288:	f4 c9 00 00 	sub	r9,r10,0
8000328c:	72 0c       	ld.w	r12,r9[0x0]
8000328e:	91 0c       	st.w	r8[0x0],r12
80003290:	72 1c       	ld.w	r12,r9[0x4]
80003292:	91 1c       	st.w	r8[0x4],r12
80003294:	72 2c       	ld.w	r12,r9[0x8]
80003296:	91 2c       	st.w	r8[0x8],r12
80003298:	72 39       	ld.w	r9,r9[0xc]
8000329a:	91 39       	st.w	r8[0xc],r9
8000329c:	f6 c8 ff f0 	sub	r8,r11,-16
800032a0:	f4 c9 ff f0 	sub	r9,r10,-16
800032a4:	72 0c       	ld.w	r12,r9[0x0]
800032a6:	91 0c       	st.w	r8[0x0],r12
800032a8:	72 1c       	ld.w	r12,r9[0x4]
800032aa:	91 1c       	st.w	r8[0x4],r12
800032ac:	72 2c       	ld.w	r12,r9[0x8]
800032ae:	91 2c       	st.w	r8[0x8],r12
800032b0:	72 39       	ld.w	r9,r9[0xc]
800032b2:	91 39       	st.w	r8[0xc],r9
800032b4:	f6 c8 ff e0 	sub	r8,r11,-32
800032b8:	f4 c9 ff e0 	sub	r9,r10,-32
800032bc:	72 0a       	ld.w	r10,r9[0x0]
800032be:	91 0a       	st.w	r8[0x0],r10
800032c0:	72 1a       	ld.w	r10,r9[0x4]
800032c2:	91 1a       	st.w	r8[0x4],r10
800032c4:	72 2a       	ld.w	r10,r9[0x8]
800032c6:	91 2a       	st.w	r8[0x8],r10
800032c8:	72 39       	ld.w	r9,r9[0xc]
800032ca:	91 39       	st.w	r8[0xc],r9
				
				dbg_print("Waypoint Nr");
800032cc:	fe cc 02 5c 	sub	r12,pc,604
800032d0:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(i,10);
800032d4:	ef 38 ff fe 	ld.ub	r8,r7[-2]
800032d8:	30 ab       	mov	r11,10
800032da:	10 9c       	mov	r12,r8
800032dc:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" set,\n");
800032e0:	fe cc 02 64 	sub	r12,pc,612
800032e4:	f0 16 00 01 	mcall	r6[4]
			
				centralData->waypoint_set = true;
800032e8:	ec f8 00 00 	ld.w	r8,r6[0]
800032ec:	70 09       	ld.w	r9,r8[0x0]
800032ee:	30 18       	mov	r8,1
800032f0:	f3 68 10 b4 	st.b	r9[4276],r8
				//waypoint_reached = false;
				
				for (j=0;j<3;j++)
800032f4:	30 08       	mov	r8,0
800032f6:	ef 68 ff ff 	st.b	r7[-1],r8
800032fa:	c2 18       	rjmp	8000333c <init_wp+0x2b8>
				{
					rel_pos[j] = centralData->waypoint_coordinates.pos[j]-centralData->position_estimator.localPosition.pos[j];
800032fc:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80003300:	ec f9 00 00 	ld.w	r9,r6[0]
80003304:	72 09       	ld.w	r9,r9[0x0]
80003306:	ef 3a ff ff 	ld.ub	r10,r7[-1]
8000330a:	f4 ca fb f8 	sub	r10,r10,-1032
8000330e:	f2 0a 03 2a 	ld.w	r10,r9[r10<<0x2]
80003312:	ec f9 00 00 	ld.w	r9,r6[0]
80003316:	72 09       	ld.w	r9,r9[0x0]
80003318:	ef 3b ff ff 	ld.ub	r11,r7[-1]
8000331c:	f6 cb fc 99 	sub	r11,r11,-871
80003320:	f2 0b 03 29 	ld.w	r9,r9[r11<<0x2]
80003324:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80003328:	a3 68       	lsl	r8,0x2
8000332a:	ee 08 00 08 	add	r8,r7,r8
8000332e:	f1 49 ff f0 	st.w	r8[-16],r9
				dbg_print(" set,\n");
			
				centralData->waypoint_set = true;
				//waypoint_reached = false;
				
				for (j=0;j<3;j++)
80003332:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80003336:	2f f8       	sub	r8,-1
80003338:	ef 68 ff ff 	st.b	r7[-1],r8
8000333c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80003340:	30 28       	mov	r8,2
80003342:	f0 09 18 00 	cp.b	r9,r8
80003346:	fe 98 ff db 	brls	800032fc <init_wp+0x278>
				{
					rel_pos[j] = centralData->waypoint_coordinates.pos[j]-centralData->position_estimator.localPosition.pos[j];
				}
				centralData->dist2wp_sqr = vector_norm_sqr(rel_pos);
8000334a:	ec f8 00 00 	ld.w	r8,r6[0]
8000334e:	70 05       	ld.w	r5,r8[0x0]
80003350:	ee c8 00 10 	sub	r8,r7,16
80003354:	10 9c       	mov	r12,r8
80003356:	fe b0 fd d1 	rcall	80002ef8 <vector_norm_sqr>
8000335a:	18 98       	mov	r8,r12
8000335c:	eb 48 10 b0 	st.w	r5[4272],r8
	}
	int_loop_count=(int_loop_count+1)%1000;
	
	if ((centralData->number_of_waypoints > 0) && (centralData->position_estimator.init_gps_position || centralData->simulation_mode) && centralData->waypoint_receiving == false)
	{
		for (i=0;i<centralData->number_of_waypoints;i++)
80003360:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80003364:	2f f8       	sub	r8,-1
80003366:	ef 68 ff fe 	st.b	r7[-2],r8
8000336a:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8000336e:	ec f8 00 00 	ld.w	r8,r6[0]
80003372:	70 08       	ld.w	r8,r8[0x0]
80003374:	f1 08 10 1c 	ld.sh	r8,r8[4124]
80003378:	f0 09 19 00 	cp.h	r9,r8
8000337c:	fe 93 fe d2 	brlo	80003120 <init_wp+0x9c>
				}
				centralData->dist2wp_sqr = vector_norm_sqr(rel_pos);
			}
		}
	}
}
80003380:	2f 0d       	sub	sp,-64
80003382:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
80003386:	00 00       	add	r0,r0
80003388:	80 00       	ld.sh	r0,r0[0x0]
8000338a:	2f 14       	sub	r4,-15
8000338c:	4e 75       	lddpc	r5,80003528 <init_waypoint_list+0x17e>
8000338e:	6d 62       	ld.w	r2,r6[0x58]
80003390:	65 72       	ld.w	r2,r2[0x5c]
80003392:	20 6f       	sub	pc,6
80003394:	66 20       	ld.w	r0,r3[0x8]
80003396:	57 61       	stdsp	sp[0x1d8],r1
80003398:	79 70       	ld.w	r0,r12[0x5c]
8000339a:	6f 69       	ld.w	r9,r7[0x58]
8000339c:	6e 74       	ld.w	r4,r7[0x1c]
8000339e:	20 6f       	sub	pc,6
800033a0:	6e 62       	ld.w	r2,r7[0x18]
800033a2:	6f 61       	ld.w	r1,r7[0x58]
800033a4:	72 64       	ld.w	r4,r9[0x18]
800033a6:	3a 00       	mov	r0,-96
800033a8:	0a 00       	add	r0,r5

800033aa <init_waypoint_list>:


void init_waypoint_list(waypoint_struct waypoint_list[], uint16_t* number_of_waypoints)
{
800033aa:	eb cd 40 c0 	pushm	r6-r7,lr
800033ae:	1a 97       	mov	r7,sp
800033b0:	20 ed       	sub	sp,56
800033b2:	fe f6 03 1a 	ld.w	r6,pc[794]
800033b6:	1e 26       	rsub	r6,pc
800033b8:	ef 4c ff cc 	st.w	r7[-52],r12
800033bc:	ef 4b ff c8 	st.w	r7[-56],r11
	
	
	// Visit https://code.google.com/p/ardupilot-mega/wiki/MAVLink to have a description of all messages (or common.h)
	waypoint_struct waypoint;
	*number_of_waypoints = 4;
800033c0:	ee f9 ff c8 	ld.w	r9,r7[-56]
800033c4:	30 48       	mov	r8,4
800033c6:	b2 08       	st.h	r9[0x0],r8
	
	num_waypoint_onboard = *number_of_waypoints;
800033c8:	ee f8 ff c8 	ld.w	r8,r7[-56]
800033cc:	90 08       	ld.sh	r8,r8[0x0]
800033ce:	ec f9 01 1c 	ld.w	r9,r6[284]
800033d2:	b2 08       	st.h	r9[0x0],r8
	
	// Set nav waypoint
	waypoint.autocontinue = 1;
800033d4:	30 18       	mov	r8,1
800033d6:	ef 68 ff d5 	st.b	r7[-43],r8
	waypoint.current = 1;
800033da:	30 18       	mov	r8,1
800033dc:	ef 68 ff d4 	st.b	r7[-44],r8
	waypoint.frame = MAV_FRAME_GLOBAL_RELATIVE_ALT;
800033e0:	30 38       	mov	r8,3
800033e2:	ef 68 ff d0 	st.b	r7[-48],r8
	waypoint.wp_id = MAV_CMD_NAV_WAYPOINT;
800033e6:	31 08       	mov	r8,16
800033e8:	ef 58 ff d2 	st.h	r7[-46],r8
	
	waypoint.x =  465185223.6174 / 1.0e7f; // convert to deg
800033ec:	e0 68 f5 80 	mov	r8,62848
800033f0:	ea 18 f0 d4 	orh	r8,0xf0d4
800033f4:	e0 69 42 5e 	mov	r9,16990
800033f8:	ea 19 40 47 	orh	r9,0x4047
800033fc:	ee e9 ff e8 	st.d	r7[-24],r8
	waypoint.y = 65670560 / 1.0e7f; // convert to deg
80003400:	fc 18 60 00 	movh	r8,0x6000
80003404:	e0 69 44 aa 	mov	r9,17578
80003408:	ea 19 40 1a 	orh	r9,0x401a
8000340c:	ee e9 ff f0 	st.d	r7[-16],r8
	waypoint.z = 20; //m
80003410:	30 08       	mov	r8,0
80003412:	fc 19 40 34 	movh	r9,0x4034
80003416:	ee e9 ff f8 	st.d	r7[-8],r8
	
	waypoint.param1 = 10; // Hold time in decimal seconds
8000341a:	fc 18 41 20 	movh	r8,0x4120
8000341e:	ef 48 ff d8 	st.w	r7[-40],r8
	waypoint.param2 = 2; // Acceptance radius in meters
80003422:	fc 18 40 00 	movh	r8,0x4000
80003426:	ef 48 ff dc 	st.w	r7[-36],r8
	waypoint.param3 = 0; //  0 to pass through the WP, if > 0 radius in meters to pass by WP. Positive value for clockwise orbit, negative value for counter-clockwise orbit. Allows trajectory control.
8000342a:	30 08       	mov	r8,0
8000342c:	ef 48 ff e0 	st.w	r7[-32],r8
	waypoint.param4 = 90; // Desired yaw angle at MISSION (rotary wing)
80003430:	fc 18 42 b4 	movh	r8,0x42b4
80003434:	ef 48 ff e4 	st.w	r7[-28],r8
	
	waypoint_list[0] = waypoint;
80003438:	ee f8 ff cc 	ld.w	r8,r7[-52]
8000343c:	10 9b       	mov	r11,r8
8000343e:	ee ca 00 30 	sub	r10,r7,48
80003442:	f6 c8 00 00 	sub	r8,r11,0
80003446:	f4 c9 00 00 	sub	r9,r10,0
8000344a:	72 0c       	ld.w	r12,r9[0x0]
8000344c:	91 0c       	st.w	r8[0x0],r12
8000344e:	72 1c       	ld.w	r12,r9[0x4]
80003450:	91 1c       	st.w	r8[0x4],r12
80003452:	72 2c       	ld.w	r12,r9[0x8]
80003454:	91 2c       	st.w	r8[0x8],r12
80003456:	72 39       	ld.w	r9,r9[0xc]
80003458:	91 39       	st.w	r8[0xc],r9
8000345a:	f6 c8 ff f0 	sub	r8,r11,-16
8000345e:	f4 c9 ff f0 	sub	r9,r10,-16
80003462:	72 0c       	ld.w	r12,r9[0x0]
80003464:	91 0c       	st.w	r8[0x0],r12
80003466:	72 1c       	ld.w	r12,r9[0x4]
80003468:	91 1c       	st.w	r8[0x4],r12
8000346a:	72 2c       	ld.w	r12,r9[0x8]
8000346c:	91 2c       	st.w	r8[0x8],r12
8000346e:	72 39       	ld.w	r9,r9[0xc]
80003470:	91 39       	st.w	r8[0xc],r9
80003472:	f6 c8 ff e0 	sub	r8,r11,-32
80003476:	f4 c9 ff e0 	sub	r9,r10,-32
8000347a:	72 0a       	ld.w	r10,r9[0x0]
8000347c:	91 0a       	st.w	r8[0x0],r10
8000347e:	72 1a       	ld.w	r10,r9[0x4]
80003480:	91 1a       	st.w	r8[0x4],r10
80003482:	72 2a       	ld.w	r10,r9[0x8]
80003484:	91 2a       	st.w	r8[0x8],r10
80003486:	72 39       	ld.w	r9,r9[0xc]
80003488:	91 39       	st.w	r8[0xc],r9
	
	// Set nav waypoint
	waypoint.autocontinue = 1;
8000348a:	30 18       	mov	r8,1
8000348c:	ef 68 ff d5 	st.b	r7[-43],r8
	waypoint.current = 0;
80003490:	30 08       	mov	r8,0
80003492:	ef 68 ff d4 	st.b	r7[-44],r8
	waypoint.frame = MAV_FRAME_GLOBAL_RELATIVE_ALT;
80003496:	30 38       	mov	r8,3
80003498:	ef 68 ff d0 	st.b	r7[-48],r8
	waypoint.wp_id = MAV_CMD_NAV_WAYPOINT;
8000349c:	31 08       	mov	r8,16
8000349e:	ef 58 ff d2 	st.h	r7[-46],r8
	
	waypoint.x = 465186816 / 1.0e7f; // convert to deg
800034a2:	fc 18 20 00 	movh	r8,0x2000
800034a6:	e0 69 42 64 	mov	r9,16996
800034aa:	ea 19 40 47 	orh	r9,0x4047
800034ae:	ee e9 ff e8 	st.d	r7[-24],r8
	waypoint.y = 65670560 / 1.0e7f; // convert to deg
800034b2:	fc 18 60 00 	movh	r8,0x6000
800034b6:	e0 69 44 aa 	mov	r9,17578
800034ba:	ea 19 40 1a 	orh	r9,0x401a
800034be:	ee e9 ff f0 	st.d	r7[-16],r8
	waypoint.z = 20; //m
800034c2:	30 08       	mov	r8,0
800034c4:	fc 19 40 34 	movh	r9,0x4034
800034c8:	ee e9 ff f8 	st.d	r7[-8],r8
	
	waypoint.param1 = 10; // Hold time in decimal seconds
800034cc:	fc 18 41 20 	movh	r8,0x4120
800034d0:	ef 48 ff d8 	st.w	r7[-40],r8
	waypoint.param2 = 4; // Acceptance radius in meters
800034d4:	fc 18 40 80 	movh	r8,0x4080
800034d8:	ef 48 ff dc 	st.w	r7[-36],r8
	waypoint.param3 = 0; //  0 to pass through the WP, if > 0 radius in meters to pass by WP. Positive value for clockwise orbit, negative value for counter-clockwise orbit. Allows trajectory control.
800034dc:	30 08       	mov	r8,0
800034de:	ef 48 ff e0 	st.w	r7[-32],r8
	waypoint.param4 = 90; // Desired yaw angle at MISSION (rotary wing)
800034e2:	fc 18 42 b4 	movh	r8,0x42b4
800034e6:	ef 48 ff e4 	st.w	r7[-28],r8
	
	waypoint_list[1] = waypoint;
800034ea:	ee f8 ff cc 	ld.w	r8,r7[-52]
800034ee:	2d 08       	sub	r8,-48
800034f0:	10 9b       	mov	r11,r8
800034f2:	ee ca 00 30 	sub	r10,r7,48
800034f6:	f6 c8 00 00 	sub	r8,r11,0
800034fa:	f4 c9 00 00 	sub	r9,r10,0
800034fe:	72 0c       	ld.w	r12,r9[0x0]
80003500:	91 0c       	st.w	r8[0x0],r12
80003502:	72 1c       	ld.w	r12,r9[0x4]
80003504:	91 1c       	st.w	r8[0x4],r12
80003506:	72 2c       	ld.w	r12,r9[0x8]
80003508:	91 2c       	st.w	r8[0x8],r12
8000350a:	72 39       	ld.w	r9,r9[0xc]
8000350c:	91 39       	st.w	r8[0xc],r9
8000350e:	f6 c8 ff f0 	sub	r8,r11,-16
80003512:	f4 c9 ff f0 	sub	r9,r10,-16
80003516:	72 0c       	ld.w	r12,r9[0x0]
80003518:	91 0c       	st.w	r8[0x0],r12
8000351a:	72 1c       	ld.w	r12,r9[0x4]
8000351c:	91 1c       	st.w	r8[0x4],r12
8000351e:	72 2c       	ld.w	r12,r9[0x8]
80003520:	91 2c       	st.w	r8[0x8],r12
80003522:	72 39       	ld.w	r9,r9[0xc]
80003524:	91 39       	st.w	r8[0xc],r9
80003526:	f6 c8 ff e0 	sub	r8,r11,-32
8000352a:	f4 c9 ff e0 	sub	r9,r10,-32
8000352e:	72 0a       	ld.w	r10,r9[0x0]
80003530:	91 0a       	st.w	r8[0x0],r10
80003532:	72 1a       	ld.w	r10,r9[0x4]
80003534:	91 1a       	st.w	r8[0x4],r10
80003536:	72 2a       	ld.w	r10,r9[0x8]
80003538:	91 2a       	st.w	r8[0x8],r10
8000353a:	72 39       	ld.w	r9,r9[0xc]
8000353c:	91 39       	st.w	r8[0xc],r9
	
	// Set nav waypoint
	waypoint.autocontinue = 1;
8000353e:	30 18       	mov	r8,1
80003540:	ef 68 ff d5 	st.b	r7[-43],r8
	waypoint.current = 0;
80003544:	30 08       	mov	r8,0
80003546:	ef 68 ff d4 	st.b	r7[-44],r8
	waypoint.frame = MAV_FRAME_GLOBAL_RELATIVE_ALT;
8000354a:	30 38       	mov	r8,3
8000354c:	ef 68 ff d0 	st.b	r7[-48],r8
	waypoint.wp_id = MAV_CMD_NAV_WAYPOINT;
80003550:	31 08       	mov	r8,16
80003552:	ef 58 ff d2 	st.h	r7[-46],r8
	
	waypoint.x = 465186816 / 1.0e7f; // convert to deg
80003556:	fc 18 20 00 	movh	r8,0x2000
8000355a:	e0 69 42 64 	mov	r9,16996
8000355e:	ea 19 40 47 	orh	r9,0x4047
80003562:	ee e9 ff e8 	st.d	r7[-24],r8
	waypoint.y = 65659084 / 1.0e7f; // convert to deg
80003566:	fc 18 80 00 	movh	r8,0x8000
8000356a:	e0 69 43 7d 	mov	r9,17277
8000356e:	ea 19 40 1a 	orh	r9,0x401a
80003572:	ee e9 ff f0 	st.d	r7[-16],r8
	waypoint.z = 40; //m
80003576:	30 08       	mov	r8,0
80003578:	fc 19 40 44 	movh	r9,0x4044
8000357c:	ee e9 ff f8 	st.d	r7[-8],r8
	
	waypoint.param1 = 10; // Hold time in decimal seconds
80003580:	fc 18 41 20 	movh	r8,0x4120
80003584:	ef 48 ff d8 	st.w	r7[-40],r8
	waypoint.param2 = 15; // Acceptance radius in meters
80003588:	fc 18 41 70 	movh	r8,0x4170
8000358c:	ef 48 ff dc 	st.w	r7[-36],r8
	waypoint.param3 = 0; //  0 to pass through the WP, if > 0 radius in meters to pass by WP. Positive value for clockwise orbit, negative value for counter-clockwise orbit. Allows trajectory control.
80003590:	30 08       	mov	r8,0
80003592:	ef 48 ff e0 	st.w	r7[-32],r8
	waypoint.param4 = 90; // Desired yaw angle at MISSION (rotary wing)
80003596:	fc 18 42 b4 	movh	r8,0x42b4
8000359a:	ef 48 ff e4 	st.w	r7[-28],r8
	
	waypoint_list[2] = waypoint;
8000359e:	ee f8 ff cc 	ld.w	r8,r7[-52]
800035a2:	2a 08       	sub	r8,-96
800035a4:	10 9b       	mov	r11,r8
800035a6:	ee ca 00 30 	sub	r10,r7,48
800035aa:	f6 c8 00 00 	sub	r8,r11,0
800035ae:	f4 c9 00 00 	sub	r9,r10,0
800035b2:	72 0c       	ld.w	r12,r9[0x0]
800035b4:	91 0c       	st.w	r8[0x0],r12
800035b6:	72 1c       	ld.w	r12,r9[0x4]
800035b8:	91 1c       	st.w	r8[0x4],r12
800035ba:	72 2c       	ld.w	r12,r9[0x8]
800035bc:	91 2c       	st.w	r8[0x8],r12
800035be:	72 39       	ld.w	r9,r9[0xc]
800035c0:	91 39       	st.w	r8[0xc],r9
800035c2:	f6 c8 ff f0 	sub	r8,r11,-16
800035c6:	f4 c9 ff f0 	sub	r9,r10,-16
800035ca:	72 0c       	ld.w	r12,r9[0x0]
800035cc:	91 0c       	st.w	r8[0x0],r12
800035ce:	72 1c       	ld.w	r12,r9[0x4]
800035d0:	91 1c       	st.w	r8[0x4],r12
800035d2:	72 2c       	ld.w	r12,r9[0x8]
800035d4:	91 2c       	st.w	r8[0x8],r12
800035d6:	72 39       	ld.w	r9,r9[0xc]
800035d8:	91 39       	st.w	r8[0xc],r9
800035da:	f6 c8 ff e0 	sub	r8,r11,-32
800035de:	f4 c9 ff e0 	sub	r9,r10,-32
800035e2:	72 0a       	ld.w	r10,r9[0x0]
800035e4:	91 0a       	st.w	r8[0x0],r10
800035e6:	72 1a       	ld.w	r10,r9[0x4]
800035e8:	91 1a       	st.w	r8[0x4],r10
800035ea:	72 2a       	ld.w	r10,r9[0x8]
800035ec:	91 2a       	st.w	r8[0x8],r10
800035ee:	72 39       	ld.w	r9,r9[0xc]
800035f0:	91 39       	st.w	r8[0xc],r9
	
	// Set nav waypoint
	waypoint.autocontinue = 1;
800035f2:	30 18       	mov	r8,1
800035f4:	ef 68 ff d5 	st.b	r7[-43],r8
	waypoint.current = 0;
800035f8:	30 08       	mov	r8,0
800035fa:	ef 68 ff d4 	st.b	r7[-44],r8
	waypoint.frame = MAV_FRAME_GLOBAL_RELATIVE_ALT;
800035fe:	30 38       	mov	r8,3
80003600:	ef 68 ff d0 	st.b	r7[-48],r8
	waypoint.wp_id = MAV_CMD_NAV_WAYPOINT;
80003604:	31 08       	mov	r8,16
80003606:	ef 58 ff d2 	st.h	r7[-46],r8

	waypoint.x = 465182186 / 1.0e7f; // convert to deg
8000360a:	30 08       	mov	r8,0
8000360c:	e0 69 42 55 	mov	r9,16981
80003610:	ea 19 40 47 	orh	r9,0x4047
80003614:	ee e9 ff e8 	st.d	r7[-24],r8
	waypoint.y = 65659084 / 1.0e7f; // convert to deg
80003618:	fc 18 80 00 	movh	r8,0x8000
8000361c:	e0 69 43 7d 	mov	r9,17277
80003620:	ea 19 40 1a 	orh	r9,0x401a
80003624:	ee e9 ff f0 	st.d	r7[-16],r8
	waypoint.z = 20; //m
80003628:	30 08       	mov	r8,0
8000362a:	fc 19 40 34 	movh	r9,0x4034
8000362e:	ee e9 ff f8 	st.d	r7[-8],r8

	waypoint.param1 = 10; // Hold time in decimal seconds
80003632:	fc 18 41 20 	movh	r8,0x4120
80003636:	ef 48 ff d8 	st.w	r7[-40],r8
	waypoint.param2 = 12; // Acceptance radius in meters
8000363a:	fc 18 41 40 	movh	r8,0x4140
8000363e:	ef 48 ff dc 	st.w	r7[-36],r8
	waypoint.param3 = 0; //  0 to pass through the WP, if > 0 radius in meters to pass by WP. Positive value for clockwise orbit, negative value for counter-clockwise orbit. Allows trajectory control.
80003642:	30 08       	mov	r8,0
80003644:	ef 48 ff e0 	st.w	r7[-32],r8
	waypoint.param4 = 90; // Desired yaw angle at MISSION (rotary wing)
80003648:	fc 18 42 b4 	movh	r8,0x42b4
8000364c:	ef 48 ff e4 	st.w	r7[-28],r8

	waypoint_list[3] = waypoint;
80003650:	ee f8 ff cc 	ld.w	r8,r7[-52]
80003654:	f0 c8 ff 70 	sub	r8,r8,-144
80003658:	10 9b       	mov	r11,r8
8000365a:	ee ca 00 30 	sub	r10,r7,48
8000365e:	f6 c8 00 00 	sub	r8,r11,0
80003662:	f4 c9 00 00 	sub	r9,r10,0
80003666:	72 0c       	ld.w	r12,r9[0x0]
80003668:	91 0c       	st.w	r8[0x0],r12
8000366a:	72 1c       	ld.w	r12,r9[0x4]
8000366c:	91 1c       	st.w	r8[0x4],r12
8000366e:	72 2c       	ld.w	r12,r9[0x8]
80003670:	91 2c       	st.w	r8[0x8],r12
80003672:	72 39       	ld.w	r9,r9[0xc]
80003674:	91 39       	st.w	r8[0xc],r9
80003676:	f6 c8 ff f0 	sub	r8,r11,-16
8000367a:	f4 c9 ff f0 	sub	r9,r10,-16
8000367e:	72 0c       	ld.w	r12,r9[0x0]
80003680:	91 0c       	st.w	r8[0x0],r12
80003682:	72 1c       	ld.w	r12,r9[0x4]
80003684:	91 1c       	st.w	r8[0x4],r12
80003686:	72 2c       	ld.w	r12,r9[0x8]
80003688:	91 2c       	st.w	r8[0x8],r12
8000368a:	72 39       	ld.w	r9,r9[0xc]
8000368c:	91 39       	st.w	r8[0xc],r9
8000368e:	f6 c8 ff e0 	sub	r8,r11,-32
80003692:	f4 c9 ff e0 	sub	r9,r10,-32
80003696:	72 0a       	ld.w	r10,r9[0x0]
80003698:	91 0a       	st.w	r8[0x0],r10
8000369a:	72 1a       	ld.w	r10,r9[0x4]
8000369c:	91 1a       	st.w	r8[0x4],r10
8000369e:	72 2a       	ld.w	r10,r9[0x8]
800036a0:	91 2a       	st.w	r8[0x8],r10
800036a2:	72 39       	ld.w	r9,r9[0xc]
800036a4:	91 39       	st.w	r8[0xc],r9
	//waypoint.param3 = 465186806 / 1.0e7f; // lat converted to deg
	//waypoint.param4 = 65659084 / 1.0e7f; // long converted to deg
	
	//waypoint_list[4] = waypoint;
	
	dbg_print("Number of Waypoint onboard:");
800036a6:	fe cc 03 1a 	sub	r12,pc,794
800036aa:	f0 16 00 01 	mcall	r6[4]
	dbg_print_num(num_waypoint_onboard,10);
800036ae:	ec f8 01 1c 	ld.w	r8,r6[284]
800036b2:	90 08       	ld.sh	r8,r8[0x0]
800036b4:	5c 78       	castu.h	r8
800036b6:	30 ab       	mov	r11,10
800036b8:	10 9c       	mov	r12,r8
800036ba:	f0 16 00 04 	mcall	r6[16]
	dbg_print("\n");
800036be:	fe cc 03 16 	sub	r12,pc,790
800036c2:	f0 16 00 01 	mcall	r6[4]
	
}
800036c6:	2f 2d       	sub	sp,-56
800036c8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800036cc:	80 00       	ld.sh	r0,r0[0x0]
800036ce:	32 3a       	mov	r10,35
800036d0:	57 69       	stdsp	sp[0x1d8],r9
800036d2:	6c 6c       	ld.w	r12,r6[0x18]
800036d4:	20 73       	sub	r3,7
800036d6:	65 6e       	ld.w	lr,r2[0x58]
800036d8:	64 20       	ld.w	r0,r2[0x8]
800036da:	00 00       	add	r0,r0
800036dc:	20 77       	sub	r7,7
800036de:	61 79       	ld.w	r9,r0[0x5c]
800036e0:	70 6f       	ld.w	pc,r8[0x18]
800036e2:	69 6e       	ld.w	lr,r4[0x58]
800036e4:	74 73       	ld.w	r3,r10[0x1c]
800036e6:	0a 00       	add	r0,r5

800036e8 <send_count>:

void send_count(Mavlink_Received_t* rec, uint16_t num_of_waypoint, bool* waypoint_receiving, bool * waypoint_sending)
{
800036e8:	eb cd 40 c0 	pushm	r6-r7,lr
800036ec:	1a 97       	mov	r7,sp
800036ee:	20 5d       	sub	sp,20
800036f0:	4a d6       	lddpc	r6,800037a4 <send_count+0xbc>
800036f2:	1e 26       	rsub	r6,pc
800036f4:	ef 4c ff f8 	st.w	r7[-8],r12
800036f8:	16 98       	mov	r8,r11
800036fa:	ef 4a ff f0 	st.w	r7[-16],r10
800036fe:	ef 49 ff ec 	st.w	r7[-20],r9
80003702:	ef 58 ff f4 	st.h	r7[-12],r8
	mavlink_mission_request_list_t packet;
	mavlink_msg_mission_request_list_decode(&rec->msg,&packet);
80003706:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000370a:	ee c9 00 02 	sub	r9,r7,2
8000370e:	12 9b       	mov	r11,r9
80003710:	10 9c       	mov	r12,r8
80003712:	fe b0 fa 44 	rcall	80002b9a <mavlink_msg_mission_request_list_decode>
	
	// Check if this message is for this system and subsystem
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_mission_planner.sysid
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
80003716:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8000371a:	ec f8 00 c0 	ld.w	r8,r6[192]
8000371e:	11 88       	ld.ub	r8,r8[0x0]
{
	mavlink_mission_request_list_t packet;
	mavlink_msg_mission_request_list_decode(&rec->msg,&packet);
	
	// Check if this message is for this system and subsystem
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_mission_planner.sysid
80003720:	f0 09 18 00 	cp.b	r9,r8
80003724:	c3 c1       	brne	8000379c <send_count+0xb4>
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
80003726:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000372a:	ec f8 00 c0 	ld.w	r8,r6[192]
8000372e:	11 98       	ld.ub	r8,r8[0x1]
{
	mavlink_mission_request_list_t packet;
	mavlink_msg_mission_request_list_decode(&rec->msg,&packet);
	
	// Check if this message is for this system and subsystem
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_mission_planner.sysid
80003730:	f0 09 18 00 	cp.b	r9,r8
80003734:	c3 41       	brne	8000379c <send_count+0xb4>
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
	{	
		mavlink_msg_mission_count_send(MAVLINK_COMM_0,rec->msg.sysid,rec->msg.compid,num_of_waypoint);
80003736:	ef 19 ff f4 	ld.uh	r9,r7[-12]
8000373a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000373e:	11 e8       	ld.ub	r8,r8[0x6]
80003740:	10 9a       	mov	r10,r8
80003742:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003746:	11 d8       	ld.ub	r8,r8[0x5]
80003748:	10 9b       	mov	r11,r8
8000374a:	30 0c       	mov	r12,0
8000374c:	fe b0 fa 44 	rcall	80002bd4 <mavlink_msg_mission_count_send>
		
		if (num_of_waypoint != 0)
80003750:	ef 09 ff f4 	ld.sh	r9,r7[-12]
80003754:	30 08       	mov	r8,0
80003756:	f0 09 19 00 	cp.h	r9,r8
8000375a:	c0 f0       	breq	80003778 <send_count+0x90>
		{
			*waypoint_sending = true;
8000375c:	ee f9 ff ec 	ld.w	r9,r7[-20]
80003760:	30 18       	mov	r8,1
80003762:	b2 88       	st.b	r9[0x0],r8
			*waypoint_receiving = false;
80003764:	ee f9 ff f0 	ld.w	r9,r7[-16]
80003768:	30 08       	mov	r8,0
8000376a:	b2 88       	st.b	r9[0x0],r8
			start_timeout = get_millis();
8000376c:	f0 16 00 0f 	mcall	r6[60]
80003770:	18 99       	mov	r9,r12
80003772:	ec f8 01 60 	ld.w	r8,r6[352]
80003776:	91 09       	st.w	r8[0x0],r9
		}
		
		sending_wp_num = 0;
80003778:	ec f8 00 a8 	ld.w	r8,r6[168]
8000377c:	30 09       	mov	r9,0
8000377e:	91 09       	st.w	r8[0x0],r9
		dbg_print("Will send ");
80003780:	fe cc 00 b0 	sub	r12,pc,176
80003784:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(num_of_waypoint,10);
80003788:	ef 18 ff f4 	ld.uh	r8,r7[-12]
8000378c:	30 ab       	mov	r11,10
8000378e:	10 9c       	mov	r12,r8
80003790:	f0 16 00 04 	mcall	r6[16]
		dbg_print(" waypoints\n");
80003794:	fe cc 00 b8 	sub	r12,pc,184
80003798:	f0 16 00 01 	mcall	r6[4]
	}
}
8000379c:	2f bd       	sub	sp,-20
8000379e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800037a2:	00 00       	add	r0,r0
800037a4:	80 00       	ld.sh	r0,r0[0x0]
800037a6:	35 76       	mov	r6,87
800037a8:	41 73       	lddsp	r3,sp[0x5c]
800037aa:	6b 69       	ld.w	r9,r5[0x58]
800037ac:	6e 67       	ld.w	r7,r7[0x18]
800037ae:	20 66       	sub	r6,6
800037b0:	6f 72       	ld.w	r2,r7[0x5c]
800037b2:	20 77       	sub	r7,7
800037b4:	61 79       	ld.w	r9,r0[0x5c]
800037b6:	70 6f       	ld.w	pc,r8[0x18]
800037b8:	69 6e       	ld.w	lr,r4[0x58]
800037ba:	74 20       	ld.w	r0,r10[0x8]
800037bc:	6e 75       	ld.w	r5,r7[0x1c]
800037be:	6d 62       	ld.w	r2,r6[0x58]
800037c0:	65 72       	ld.w	r2,r2[0x5c]
800037c2:	20 00       	sub	r0,0
800037c4:	53 65       	stdsp	sp[0xd8],r5
800037c6:	6e 64       	ld.w	r4,r7[0x18]
800037c8:	69 6e       	ld.w	lr,r4[0x58]
800037ca:	67 20       	ld.w	r0,r3[0x48]
800037cc:	77 61       	ld.w	r1,r11[0x58]
800037ce:	79 70       	ld.w	r0,r12[0x5c]
800037d0:	6f 69       	ld.w	r9,r7[0x58]
800037d2:	6e 74       	ld.w	r4,r7[0x1c]
800037d4:	20 00       	sub	r0,0

800037d6 <send_waypoint>:

void send_waypoint(Mavlink_Received_t* rec, waypoint_struct waypoint[], uint16_t num_of_waypoint, bool* waypoint_sending)
{
800037d6:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
800037da:	1a 97       	mov	r7,sp
800037dc:	20 9d       	sub	sp,36
800037de:	fe f6 02 62 	ld.w	r6,pc[610]
800037e2:	1e 26       	rsub	r6,pc
800037e4:	ef 4c ff f8 	st.w	r7[-8],r12
800037e8:	ef 4b ff f4 	st.w	r7[-12],r11
800037ec:	14 98       	mov	r8,r10
800037ee:	ef 49 ff ec 	st.w	r7[-20],r9
800037f2:	ef 58 ff f0 	st.h	r7[-16],r8
	if (*waypoint_sending)
800037f6:	ee f8 ff ec 	ld.w	r8,r7[-20]
800037fa:	11 88       	ld.ub	r8,r8[0x0]
800037fc:	58 08       	cp.w	r8,0
800037fe:	e0 80 01 1e 	breq	80003a3a <send_waypoint+0x264>
	{
		mavlink_mission_request_t packet;
		mavlink_msg_mission_request_decode(&rec->msg,&packet);
80003802:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003806:	ee c9 00 04 	sub	r9,r7,4
8000380a:	12 9b       	mov	r11,r9
8000380c:	10 9c       	mov	r12,r8
8000380e:	fe b0 f9 07 	rcall	80002a1c <mavlink_msg_mission_request_decode>
		
		dbg_print("Asking for waypoint number ");
80003812:	fe cc 00 6a 	sub	r12,pc,106
80003816:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(packet.seq,10);
8000381a:	ef 08 ff fc 	ld.sh	r8,r7[-4]
8000381e:	5c 78       	castu.h	r8
80003820:	30 ab       	mov	r11,10
80003822:	10 9c       	mov	r12,r8
80003824:	f0 16 00 04 	mcall	r6[16]
		dbg_print("\n");
80003828:	fe cc 04 80 	sub	r12,pc,1152
8000382c:	f0 16 00 01 	mcall	r6[4]
		
		// Check if this message is for this system and subsystem
		if ((uint8_t)packet.target_system == (uint8_t)mavlink_mission_planner.sysid
		&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
80003830:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80003834:	ec f8 00 c0 	ld.w	r8,r6[192]
80003838:	11 88       	ld.ub	r8,r8[0x0]
		dbg_print("Asking for waypoint number ");
		dbg_print_num(packet.seq,10);
		dbg_print("\n");
		
		// Check if this message is for this system and subsystem
		if ((uint8_t)packet.target_system == (uint8_t)mavlink_mission_planner.sysid
8000383a:	f0 09 18 00 	cp.b	r9,r8
8000383e:	e0 81 00 fe 	brne	80003a3a <send_waypoint+0x264>
		&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
80003842:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80003846:	ec f8 00 c0 	ld.w	r8,r6[192]
8000384a:	11 98       	ld.ub	r8,r8[0x1]
		dbg_print("Asking for waypoint number ");
		dbg_print_num(packet.seq,10);
		dbg_print("\n");
		
		// Check if this message is for this system and subsystem
		if ((uint8_t)packet.target_system == (uint8_t)mavlink_mission_planner.sysid
8000384c:	f0 09 18 00 	cp.b	r9,r8
80003850:	e0 81 00 f5 	brne	80003a3a <send_waypoint+0x264>
		&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
		{
			sending_wp_num = packet.seq;
80003854:	ef 08 ff fc 	ld.sh	r8,r7[-4]
80003858:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
8000385c:	ec f8 00 a8 	ld.w	r8,r6[168]
80003860:	91 09       	st.w	r8[0x0],r9
			if (sending_wp_num < num_of_waypoint)
80003862:	ef 19 ff f0 	ld.uh	r9,r7[-16]
80003866:	ec f8 00 a8 	ld.w	r8,r6[168]
8000386a:	70 08       	ld.w	r8,r8[0x0]
8000386c:	10 39       	cp.w	r9,r8
8000386e:	e0 8a 00 e6 	brle	80003a3a <send_waypoint+0x264>
				// mavlink_msg_mission_item_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t seq, uint8_t frame, uint16_t command, uint8_t current, uint8_t autocontinue, float param1, float param2, float param3, float param4, float x, float y, float z)
				mavlink_msg_mission_item_send(MAVLINK_COMM_0, rec->msg.sysid, rec->msg.compid, packet.seq,
				waypoint[sending_wp_num].frame,   waypoint[sending_wp_num].wp_id,
				waypoint[sending_wp_num].current, waypoint[sending_wp_num].autocontinue,
				waypoint[sending_wp_num].param1,  waypoint[sending_wp_num].param2,       waypoint[sending_wp_num].param3,    waypoint[sending_wp_num].param4,
				waypoint[sending_wp_num].x,       waypoint[sending_wp_num].y,            waypoint[sending_wp_num].z);
80003872:	ec f8 00 a8 	ld.w	r8,r6[168]
80003876:	70 08       	ld.w	r8,r8[0x0]
80003878:	10 99       	mov	r9,r8
8000387a:	12 98       	mov	r8,r9
8000387c:	a1 78       	lsl	r8,0x1
8000387e:	12 08       	add	r8,r9
80003880:	a5 68       	lsl	r8,0x4
80003882:	ee f9 ff f4 	ld.w	r9,r7[-12]
80003886:	f2 08 00 08 	add	r8,r9,r8
8000388a:	f0 e8 00 28 	ld.d	r8,r8[40]
		{
			sending_wp_num = packet.seq;
			if (sending_wp_num < num_of_waypoint)
			{
				// mavlink_msg_mission_item_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t seq, uint8_t frame, uint16_t command, uint8_t current, uint8_t autocontinue, float param1, float param2, float param3, float param4, float x, float y, float z)
				mavlink_msg_mission_item_send(MAVLINK_COMM_0, rec->msg.sysid, rec->msg.compid, packet.seq,
8000388e:	10 9a       	mov	r10,r8
80003890:	12 9b       	mov	r11,r9
80003892:	f0 16 00 09 	mcall	r6[36]
80003896:	18 95       	mov	r5,r12
				waypoint[sending_wp_num].frame,   waypoint[sending_wp_num].wp_id,
				waypoint[sending_wp_num].current, waypoint[sending_wp_num].autocontinue,
				waypoint[sending_wp_num].param1,  waypoint[sending_wp_num].param2,       waypoint[sending_wp_num].param3,    waypoint[sending_wp_num].param4,
				waypoint[sending_wp_num].x,       waypoint[sending_wp_num].y,            waypoint[sending_wp_num].z);
80003898:	ec f8 00 a8 	ld.w	r8,r6[168]
8000389c:	70 08       	ld.w	r8,r8[0x0]
8000389e:	10 99       	mov	r9,r8
800038a0:	12 98       	mov	r8,r9
800038a2:	a1 78       	lsl	r8,0x1
800038a4:	12 08       	add	r8,r9
800038a6:	a5 68       	lsl	r8,0x4
800038a8:	ee f9 ff f4 	ld.w	r9,r7[-12]
800038ac:	f2 08 00 08 	add	r8,r9,r8
800038b0:	f0 e8 00 20 	ld.d	r8,r8[32]
		{
			sending_wp_num = packet.seq;
			if (sending_wp_num < num_of_waypoint)
			{
				// mavlink_msg_mission_item_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t seq, uint8_t frame, uint16_t command, uint8_t current, uint8_t autocontinue, float param1, float param2, float param3, float param4, float x, float y, float z)
				mavlink_msg_mission_item_send(MAVLINK_COMM_0, rec->msg.sysid, rec->msg.compid, packet.seq,
800038b4:	10 9a       	mov	r10,r8
800038b6:	12 9b       	mov	r11,r9
800038b8:	f0 16 00 09 	mcall	r6[36]
800038bc:	ef 4c ff dc 	st.w	r7[-36],r12
				waypoint[sending_wp_num].frame,   waypoint[sending_wp_num].wp_id,
				waypoint[sending_wp_num].current, waypoint[sending_wp_num].autocontinue,
				waypoint[sending_wp_num].param1,  waypoint[sending_wp_num].param2,       waypoint[sending_wp_num].param3,    waypoint[sending_wp_num].param4,
				waypoint[sending_wp_num].x,       waypoint[sending_wp_num].y,            waypoint[sending_wp_num].z);
800038c0:	ec f8 00 a8 	ld.w	r8,r6[168]
800038c4:	70 08       	ld.w	r8,r8[0x0]
800038c6:	10 99       	mov	r9,r8
800038c8:	12 98       	mov	r8,r9
800038ca:	a1 78       	lsl	r8,0x1
800038cc:	12 08       	add	r8,r9
800038ce:	a5 68       	lsl	r8,0x4
800038d0:	ee f9 ff f4 	ld.w	r9,r7[-12]
800038d4:	f2 08 00 08 	add	r8,r9,r8
800038d8:	f0 e8 00 18 	ld.d	r8,r8[24]
		{
			sending_wp_num = packet.seq;
			if (sending_wp_num < num_of_waypoint)
			{
				// mavlink_msg_mission_item_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t seq, uint8_t frame, uint16_t command, uint8_t current, uint8_t autocontinue, float param1, float param2, float param3, float param4, float x, float y, float z)
				mavlink_msg_mission_item_send(MAVLINK_COMM_0, rec->msg.sysid, rec->msg.compid, packet.seq,
800038dc:	10 9a       	mov	r10,r8
800038de:	12 9b       	mov	r11,r9
800038e0:	f0 16 00 09 	mcall	r6[36]
800038e4:	ef 4c ff e0 	st.w	r7[-32],r12
				waypoint[sending_wp_num].frame,   waypoint[sending_wp_num].wp_id,
				waypoint[sending_wp_num].current, waypoint[sending_wp_num].autocontinue,
				waypoint[sending_wp_num].param1,  waypoint[sending_wp_num].param2,       waypoint[sending_wp_num].param3,    waypoint[sending_wp_num].param4,
800038e8:	ec f8 00 a8 	ld.w	r8,r6[168]
800038ec:	70 08       	ld.w	r8,r8[0x0]
800038ee:	10 99       	mov	r9,r8
800038f0:	12 98       	mov	r8,r9
800038f2:	a1 78       	lsl	r8,0x1
800038f4:	12 08       	add	r8,r9
800038f6:	a5 68       	lsl	r8,0x4
800038f8:	ee f9 ff f4 	ld.w	r9,r7[-12]
800038fc:	f2 08 00 08 	add	r8,r9,r8
		{
			sending_wp_num = packet.seq;
			if (sending_wp_num < num_of_waypoint)
			{
				// mavlink_msg_mission_item_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t seq, uint8_t frame, uint16_t command, uint8_t current, uint8_t autocontinue, float param1, float param2, float param3, float param4, float x, float y, float z)
				mavlink_msg_mission_item_send(MAVLINK_COMM_0, rec->msg.sysid, rec->msg.compid, packet.seq,
80003900:	70 58       	ld.w	r8,r8[0x14]
80003902:	ef 48 ff e4 	st.w	r7[-28],r8
				waypoint[sending_wp_num].frame,   waypoint[sending_wp_num].wp_id,
				waypoint[sending_wp_num].current, waypoint[sending_wp_num].autocontinue,
				waypoint[sending_wp_num].param1,  waypoint[sending_wp_num].param2,       waypoint[sending_wp_num].param3,    waypoint[sending_wp_num].param4,
80003906:	ec f8 00 a8 	ld.w	r8,r6[168]
8000390a:	70 08       	ld.w	r8,r8[0x0]
8000390c:	10 99       	mov	r9,r8
8000390e:	12 98       	mov	r8,r9
80003910:	a1 78       	lsl	r8,0x1
80003912:	12 08       	add	r8,r9
80003914:	a5 68       	lsl	r8,0x4
80003916:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000391a:	f2 08 00 08 	add	r8,r9,r8
		{
			sending_wp_num = packet.seq;
			if (sending_wp_num < num_of_waypoint)
			{
				// mavlink_msg_mission_item_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t seq, uint8_t frame, uint16_t command, uint8_t current, uint8_t autocontinue, float param1, float param2, float param3, float param4, float x, float y, float z)
				mavlink_msg_mission_item_send(MAVLINK_COMM_0, rec->msg.sysid, rec->msg.compid, packet.seq,
8000391e:	70 48       	ld.w	r8,r8[0x10]
80003920:	ef 48 ff e8 	st.w	r7[-24],r8
				waypoint[sending_wp_num].frame,   waypoint[sending_wp_num].wp_id,
				waypoint[sending_wp_num].current, waypoint[sending_wp_num].autocontinue,
				waypoint[sending_wp_num].param1,  waypoint[sending_wp_num].param2,       waypoint[sending_wp_num].param3,    waypoint[sending_wp_num].param4,
80003924:	ec f8 00 a8 	ld.w	r8,r6[168]
80003928:	70 08       	ld.w	r8,r8[0x0]
8000392a:	10 99       	mov	r9,r8
8000392c:	12 98       	mov	r8,r9
8000392e:	a1 78       	lsl	r8,0x1
80003930:	12 08       	add	r8,r9
80003932:	a5 68       	lsl	r8,0x4
80003934:	ee f9 ff f4 	ld.w	r9,r7[-12]
80003938:	f2 08 00 08 	add	r8,r9,r8
		{
			sending_wp_num = packet.seq;
			if (sending_wp_num < num_of_waypoint)
			{
				// mavlink_msg_mission_item_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t seq, uint8_t frame, uint16_t command, uint8_t current, uint8_t autocontinue, float param1, float param2, float param3, float param4, float x, float y, float z)
				mavlink_msg_mission_item_send(MAVLINK_COMM_0, rec->msg.sysid, rec->msg.compid, packet.seq,
8000393c:	70 30       	ld.w	r0,r8[0xc]
				waypoint[sending_wp_num].frame,   waypoint[sending_wp_num].wp_id,
				waypoint[sending_wp_num].current, waypoint[sending_wp_num].autocontinue,
				waypoint[sending_wp_num].param1,  waypoint[sending_wp_num].param2,       waypoint[sending_wp_num].param3,    waypoint[sending_wp_num].param4,
8000393e:	ec f8 00 a8 	ld.w	r8,r6[168]
80003942:	70 08       	ld.w	r8,r8[0x0]
80003944:	10 99       	mov	r9,r8
80003946:	12 98       	mov	r8,r9
80003948:	a1 78       	lsl	r8,0x1
8000394a:	12 08       	add	r8,r9
8000394c:	a5 68       	lsl	r8,0x4
8000394e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80003952:	f2 08 00 08 	add	r8,r9,r8
		{
			sending_wp_num = packet.seq;
			if (sending_wp_num < num_of_waypoint)
			{
				// mavlink_msg_mission_item_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t seq, uint8_t frame, uint16_t command, uint8_t current, uint8_t autocontinue, float param1, float param2, float param3, float param4, float x, float y, float z)
				mavlink_msg_mission_item_send(MAVLINK_COMM_0, rec->msg.sysid, rec->msg.compid, packet.seq,
80003956:	70 21       	ld.w	r1,r8[0x8]
				waypoint[sending_wp_num].frame,   waypoint[sending_wp_num].wp_id,
				waypoint[sending_wp_num].current, waypoint[sending_wp_num].autocontinue,
80003958:	ec f8 00 a8 	ld.w	r8,r6[168]
8000395c:	70 08       	ld.w	r8,r8[0x0]
8000395e:	10 99       	mov	r9,r8
80003960:	12 98       	mov	r8,r9
80003962:	a1 78       	lsl	r8,0x1
80003964:	12 08       	add	r8,r9
80003966:	a5 68       	lsl	r8,0x4
80003968:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000396c:	f2 08 00 08 	add	r8,r9,r8
80003970:	11 d8       	ld.ub	r8,r8[0x5]
		{
			sending_wp_num = packet.seq;
			if (sending_wp_num < num_of_waypoint)
			{
				// mavlink_msg_mission_item_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t seq, uint8_t frame, uint16_t command, uint8_t current, uint8_t autocontinue, float param1, float param2, float param3, float param4, float x, float y, float z)
				mavlink_msg_mission_item_send(MAVLINK_COMM_0, rec->msg.sysid, rec->msg.compid, packet.seq,
80003972:	10 92       	mov	r2,r8
				waypoint[sending_wp_num].frame,   waypoint[sending_wp_num].wp_id,
				waypoint[sending_wp_num].current, waypoint[sending_wp_num].autocontinue,
80003974:	ec f8 00 a8 	ld.w	r8,r6[168]
80003978:	70 08       	ld.w	r8,r8[0x0]
8000397a:	10 99       	mov	r9,r8
8000397c:	12 98       	mov	r8,r9
8000397e:	a1 78       	lsl	r8,0x1
80003980:	12 08       	add	r8,r9
80003982:	a5 68       	lsl	r8,0x4
80003984:	ee f9 ff f4 	ld.w	r9,r7[-12]
80003988:	f2 08 00 08 	add	r8,r9,r8
8000398c:	11 c8       	ld.ub	r8,r8[0x4]
		{
			sending_wp_num = packet.seq;
			if (sending_wp_num < num_of_waypoint)
			{
				// mavlink_msg_mission_item_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t seq, uint8_t frame, uint16_t command, uint8_t current, uint8_t autocontinue, float param1, float param2, float param3, float param4, float x, float y, float z)
				mavlink_msg_mission_item_send(MAVLINK_COMM_0, rec->msg.sysid, rec->msg.compid, packet.seq,
8000398e:	10 93       	mov	r3,r8
				waypoint[sending_wp_num].frame,   waypoint[sending_wp_num].wp_id,
80003990:	ec f8 00 a8 	ld.w	r8,r6[168]
80003994:	70 08       	ld.w	r8,r8[0x0]
80003996:	10 99       	mov	r9,r8
80003998:	12 98       	mov	r8,r9
8000399a:	a1 78       	lsl	r8,0x1
8000399c:	12 08       	add	r8,r9
8000399e:	a5 68       	lsl	r8,0x4
800039a0:	ee f9 ff f4 	ld.w	r9,r7[-12]
800039a4:	f2 08 00 08 	add	r8,r9,r8
800039a8:	90 18       	ld.sh	r8,r8[0x2]
		{
			sending_wp_num = packet.seq;
			if (sending_wp_num < num_of_waypoint)
			{
				// mavlink_msg_mission_item_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t seq, uint8_t frame, uint16_t command, uint8_t current, uint8_t autocontinue, float param1, float param2, float param3, float param4, float x, float y, float z)
				mavlink_msg_mission_item_send(MAVLINK_COMM_0, rec->msg.sysid, rec->msg.compid, packet.seq,
800039aa:	fd d8 c0 10 	bfextu	lr,r8,0x0,0x10
				waypoint[sending_wp_num].frame,   waypoint[sending_wp_num].wp_id,
800039ae:	ec f8 00 a8 	ld.w	r8,r6[168]
800039b2:	70 08       	ld.w	r8,r8[0x0]
800039b4:	10 99       	mov	r9,r8
800039b6:	12 98       	mov	r8,r9
800039b8:	a1 78       	lsl	r8,0x1
800039ba:	12 08       	add	r8,r9
800039bc:	a5 68       	lsl	r8,0x4
800039be:	ee f9 ff f4 	ld.w	r9,r7[-12]
800039c2:	f2 08 00 08 	add	r8,r9,r8
800039c6:	11 88       	ld.ub	r8,r8[0x0]
		{
			sending_wp_num = packet.seq;
			if (sending_wp_num < num_of_waypoint)
			{
				// mavlink_msg_mission_item_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t seq, uint8_t frame, uint16_t command, uint8_t current, uint8_t autocontinue, float param1, float param2, float param3, float param4, float x, float y, float z)
				mavlink_msg_mission_item_send(MAVLINK_COMM_0, rec->msg.sysid, rec->msg.compid, packet.seq,
800039c8:	10 9c       	mov	r12,r8
800039ca:	ef 08 ff fc 	ld.sh	r8,r7[-4]
800039ce:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
800039d2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800039d6:	11 e8       	ld.ub	r8,r8[0x6]
800039d8:	10 9a       	mov	r10,r8
800039da:	ee f8 ff f8 	ld.w	r8,r7[-8]
800039de:	11 d8       	ld.ub	r8,r8[0x5]
800039e0:	10 9b       	mov	r11,r8
800039e2:	1a d5       	st.w	--sp,r5
800039e4:	ee f8 ff dc 	ld.w	r8,r7[-36]
800039e8:	1a d8       	st.w	--sp,r8
800039ea:	ee f8 ff e0 	ld.w	r8,r7[-32]
800039ee:	1a d8       	st.w	--sp,r8
800039f0:	ee f8 ff e4 	ld.w	r8,r7[-28]
800039f4:	1a d8       	st.w	--sp,r8
800039f6:	ee f8 ff e8 	ld.w	r8,r7[-24]
800039fa:	1a d8       	st.w	--sp,r8
800039fc:	1a d0       	st.w	--sp,r0
800039fe:	1a d1       	st.w	--sp,r1
80003a00:	1a d2       	st.w	--sp,r2
80003a02:	1a d3       	st.w	--sp,r3
80003a04:	1a de       	st.w	--sp,lr
80003a06:	18 98       	mov	r8,r12
80003a08:	30 0c       	mov	r12,0
80003a0a:	fe b0 f5 9f 	rcall	80002548 <mavlink_msg_mission_item_send>
80003a0e:	2f 6d       	sub	sp,-40
				waypoint[sending_wp_num].frame,   waypoint[sending_wp_num].wp_id,
				waypoint[sending_wp_num].current, waypoint[sending_wp_num].autocontinue,
				waypoint[sending_wp_num].param1,  waypoint[sending_wp_num].param2,       waypoint[sending_wp_num].param3,    waypoint[sending_wp_num].param4,
				waypoint[sending_wp_num].x,       waypoint[sending_wp_num].y,            waypoint[sending_wp_num].z);
				
				dbg_print("Sending waypoint ");
80003a10:	fe cc 02 4c 	sub	r12,pc,588
80003a14:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(sending_wp_num, 10);
80003a18:	ec f8 00 a8 	ld.w	r8,r6[168]
80003a1c:	70 08       	ld.w	r8,r8[0x0]
80003a1e:	30 ab       	mov	r11,10
80003a20:	10 9c       	mov	r12,r8
80003a22:	f0 16 00 04 	mcall	r6[16]
				dbg_print("\n");
80003a26:	fe cc 06 7e 	sub	r12,pc,1662
80003a2a:	f0 16 00 01 	mcall	r6[4]
				
				start_timeout = get_millis();
80003a2e:	f0 16 00 0f 	mcall	r6[60]
80003a32:	18 99       	mov	r9,r12
80003a34:	ec f8 01 60 	ld.w	r8,r6[352]
80003a38:	91 09       	st.w	r8[0x0],r9
				
				//sending_wp_num += 1;
			}			
		}
	}	
}
80003a3a:	2f 7d       	sub	sp,-36
80003a3c:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
80003a40:	80 00       	ld.sh	r0,r0[0x0]
80003a42:	36 66       	mov	r6,102
80003a44:	41 63       	lddsp	r3,sp[0x58]
80003a46:	6b 6e       	ld.w	lr,r5[0x58]
80003a48:	6f 77       	ld.w	r7,r7[0x5c]
80003a4a:	6c 65       	ld.w	r5,r6[0x18]
80003a4c:	64 67       	ld.w	r7,r2[0x18]
80003a4e:	6d 65       	ld.w	r5,r6[0x58]
80003a50:	6e 74       	ld.w	r4,r7[0x1c]
80003a52:	20 72       	sub	r2,7
80003a54:	65 63       	ld.w	r3,r2[0x58]
80003a56:	65 69       	ld.w	r9,r2[0x58]
80003a58:	76 65       	ld.w	r5,r11[0x18]
80003a5a:	64 2c       	ld.w	r12,r2[0x8]
80003a5c:	20 65       	sub	r5,6
80003a5e:	6e 64       	ld.w	r4,r7[0x18]
80003a60:	20 6f       	sub	pc,6
80003a62:	66 20       	ld.w	r0,r3[0x8]
80003a64:	77 61       	ld.w	r1,r11[0x58]
80003a66:	79 70       	ld.w	r0,r12[0x5c]
80003a68:	6f 69       	ld.w	r9,r7[0x58]
80003a6a:	6e 74       	ld.w	r4,r7[0x1c]
80003a6c:	20 73       	sub	r3,7
80003a6e:	65 6e       	ld.w	lr,r2[0x58]
80003a70:	64 69       	ld.w	r9,r2[0x18]
80003a72:	6e 67       	ld.w	r7,r7[0x18]
80003a74:	2e 0a       	sub	r10,-32
	...

80003a78 <receive_ack_msg>:

void receive_ack_msg(Mavlink_Received_t* rec, bool* waypoint_sending)
{
80003a78:	eb cd 40 c0 	pushm	r6-r7,lr
80003a7c:	1a 97       	mov	r7,sp
80003a7e:	20 3d       	sub	sp,12
80003a80:	49 76       	lddpc	r6,80003adc <receive_ack_msg+0x64>
80003a82:	1e 26       	rsub	r6,pc
80003a84:	ef 4c ff f8 	st.w	r7[-8],r12
80003a88:	ef 4b ff f4 	st.w	r7[-12],r11
	mavlink_mission_ack_t packet;
	mavlink_msg_mission_ack_decode(&rec->msg, &packet);
80003a8c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003a90:	ee c9 00 03 	sub	r9,r7,3
80003a94:	12 9b       	mov	r11,r9
80003a96:	10 9c       	mov	r12,r8
80003a98:	fe b0 f9 dc 	rcall	80002e50 <mavlink_msg_mission_ack_decode>
	// Check if this message is for this system and subsystem
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_mission_planner.sysid
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
80003a9c:	ef 39 ff fd 	ld.ub	r9,r7[-3]
80003aa0:	ec f8 00 c0 	ld.w	r8,r6[192]
80003aa4:	11 88       	ld.ub	r8,r8[0x0]
void receive_ack_msg(Mavlink_Received_t* rec, bool* waypoint_sending)
{
	mavlink_mission_ack_t packet;
	mavlink_msg_mission_ack_decode(&rec->msg, &packet);
	// Check if this message is for this system and subsystem
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_mission_planner.sysid
80003aa6:	f0 09 18 00 	cp.b	r9,r8
80003aaa:	c1 51       	brne	80003ad4 <receive_ack_msg+0x5c>
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
80003aac:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80003ab0:	ec f8 00 c0 	ld.w	r8,r6[192]
80003ab4:	11 98       	ld.ub	r8,r8[0x1]
void receive_ack_msg(Mavlink_Received_t* rec, bool* waypoint_sending)
{
	mavlink_mission_ack_t packet;
	mavlink_msg_mission_ack_decode(&rec->msg, &packet);
	// Check if this message is for this system and subsystem
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_mission_planner.sysid
80003ab6:	f0 09 18 00 	cp.b	r9,r8
80003aba:	c0 d1       	brne	80003ad4 <receive_ack_msg+0x5c>
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
	{
		*waypoint_sending = false;
80003abc:	ee f9 ff f4 	ld.w	r9,r7[-12]
80003ac0:	30 08       	mov	r8,0
80003ac2:	b2 88       	st.b	r9[0x0],r8
		sending_wp_num = 0;
80003ac4:	ec f8 00 a8 	ld.w	r8,r6[168]
80003ac8:	30 09       	mov	r9,0
80003aca:	91 09       	st.w	r8[0x0],r9
		dbg_print("Acknowledgment received, end of waypoint sending.\n");
80003acc:	fe cc 00 88 	sub	r12,pc,136
80003ad0:	f0 16 00 01 	mcall	r6[4]
	}
}
80003ad4:	2f dd       	sub	sp,-12
80003ad6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80003ada:	00 00       	add	r0,r0
80003adc:	80 00       	ld.sh	r0,r0[0x0]
80003ade:	39 06       	mov	r6,-112
80003ae0:	52 65       	stdsp	sp[0x98],r5
80003ae2:	63 65       	ld.w	r5,r1[0x58]
80003ae4:	69 76       	ld.w	r6,r4[0x5c]
80003ae6:	69 6e       	ld.w	lr,r4[0x58]
80003ae8:	67 20       	ld.w	r0,r3[0x48]
80003aea:	00 00       	add	r0,r0
80003aec:	20 6e       	sub	lr,6
80003aee:	65 77       	ld.w	r7,r2[0x5c]
80003af0:	20 77       	sub	r7,7
80003af2:	61 79       	ld.w	r9,r0[0x5c]
80003af4:	70 6f       	ld.w	pc,r8[0x18]
80003af6:	69 6e       	ld.w	lr,r4[0x58]
80003af8:	74 73       	ld.w	r3,r10[0x1c]
80003afa:	2e 20       	sub	r0,-30
80003afc:	00 00       	add	r0,r0
80003afe:	00 00       	add	r0,r0
80003b00:	4e 65       	lddpc	r5,80003c98 <receive_count+0x162>
80003b02:	77 20       	ld.w	r0,r11[0x48]
80003b04:	74 6f       	ld.w	pc,r10[0x18]
80003b06:	74 61       	ld.w	r1,r10[0x18]
80003b08:	6c 20       	ld.w	r0,r6[0x8]
80003b0a:	6e 75       	ld.w	r5,r7[0x1c]
80003b0c:	6d 62       	ld.w	r2,r6[0x58]
80003b0e:	65 72       	ld.w	r2,r2[0x5c]
80003b10:	20 6f       	sub	pc,6
80003b12:	66 20       	ld.w	r0,r3[0x8]
80003b14:	77 61       	ld.w	r1,r11[0x58]
80003b16:	79 70       	ld.w	r0,r12[0x5c]
80003b18:	6f 69       	ld.w	r9,r7[0x58]
80003b1a:	6e 74       	ld.w	r4,r7[0x1c]
80003b1c:	73 3a       	ld.w	r10,r9[0x4c]
80003b1e:	00 00       	add	r0,r0
80003b20:	41 73       	lddsp	r3,sp[0x5c]
80003b22:	6b 69       	ld.w	r9,r5[0x58]
80003b24:	6e 67       	ld.w	r7,r7[0x18]
80003b26:	20 66       	sub	r6,6
80003b28:	6f 72       	ld.w	r2,r7[0x5c]
80003b2a:	20 77       	sub	r7,7
80003b2c:	61 79       	ld.w	r9,r0[0x5c]
80003b2e:	70 6f       	ld.w	pc,r8[0x18]
80003b30:	69 6e       	ld.w	lr,r4[0x58]
80003b32:	74 20       	ld.w	r0,r10[0x8]
	...

80003b36 <receive_count>:

void receive_count(Mavlink_Received_t* rec, uint16_t* number_of_waypoints, bool* waypoint_receiving, bool* waypoint_sending)
{
80003b36:	eb cd 40 c0 	pushm	r6-r7,lr
80003b3a:	1a 97       	mov	r7,sp
80003b3c:	20 5d       	sub	sp,20
80003b3e:	4d 46       	lddpc	r6,80003c8c <receive_count+0x156>
80003b40:	1e 26       	rsub	r6,pc
80003b42:	ef 4c ff f8 	st.w	r7[-8],r12
80003b46:	ef 4b ff f4 	st.w	r7[-12],r11
80003b4a:	ef 4a ff f0 	st.w	r7[-16],r10
80003b4e:	ef 49 ff ec 	st.w	r7[-20],r9
	mavlink_mission_count_t packet;
	mavlink_msg_mission_count_decode(&rec->msg, &packet);
80003b52:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003b56:	ee c9 00 04 	sub	r9,r7,4
80003b5a:	12 9b       	mov	r11,r9
80003b5c:	10 9c       	mov	r12,r8
80003b5e:	fe b0 f8 9f 	rcall	80002c9c <mavlink_msg_mission_count_decode>
	//dbg_print_num(mavlink_mission_planner.sysid,10);
	//dbg_print_num(packet.target_component,10);
	//dbg_print_num(mavlink_mission_planner.compid,10);
	//dbg_print("\n");
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_mission_planner.sysid
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
80003b62:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80003b66:	ec f8 00 c0 	ld.w	r8,r6[192]
80003b6a:	11 88       	ld.ub	r8,r8[0x0]
	//dbg_print_num(packet.target_system,10);
	//dbg_print_num(mavlink_mission_planner.sysid,10);
	//dbg_print_num(packet.target_component,10);
	//dbg_print_num(mavlink_mission_planner.compid,10);
	//dbg_print("\n");
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_mission_planner.sysid
80003b6c:	f0 09 18 00 	cp.b	r9,r8
80003b70:	e0 81 00 8b 	brne	80003c86 <receive_count+0x150>
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
80003b74:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80003b78:	ec f8 00 c0 	ld.w	r8,r6[192]
80003b7c:	11 98       	ld.ub	r8,r8[0x1]
	//dbg_print_num(packet.target_system,10);
	//dbg_print_num(mavlink_mission_planner.sysid,10);
	//dbg_print_num(packet.target_component,10);
	//dbg_print_num(mavlink_mission_planner.compid,10);
	//dbg_print("\n");
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_mission_planner.sysid
80003b7e:	f0 09 18 00 	cp.b	r9,r8
80003b82:	e0 81 00 82 	brne	80003c86 <receive_count+0x150>
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
	{
		if (*waypoint_receiving == false)
80003b86:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003b8a:	11 88       	ld.ub	r8,r8[0x0]
80003b8c:	ec 18 00 01 	eorl	r8,0x1
80003b90:	5c 58       	castu.b	r8
80003b92:	c5 a0       	breq	80003c46 <receive_count+0x110>
		{
			// comment these lines if you want to add new waypoints to the list instead of overwriting them
			num_waypoint_onboard = 0;
80003b94:	ec f9 01 1c 	ld.w	r9,r6[284]
80003b98:	30 08       	mov	r8,0
80003b9a:	b2 08       	st.h	r9[0x0],r8
			*number_of_waypoints =0;
80003b9c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80003ba0:	30 08       	mov	r8,0
80003ba2:	b2 08       	st.h	r9[0x0],r8
			//---//
			
			if ((packet.count + *number_of_waypoints) > MAX_WAYPOINTS)
80003ba4:	ef 08 ff fc 	ld.sh	r8,r7[-4]
80003ba8:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
80003bac:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003bb0:	90 08       	ld.sh	r8,r8[0x0]
80003bb2:	5c 78       	castu.h	r8
80003bb4:	f2 08 00 08 	add	r8,r9,r8
80003bb8:	58 a8       	cp.w	r8,10
80003bba:	e0 8a 00 0a 	brle	80003bce <receive_count+0x98>
			{
				packet.count = MAX_WAYPOINTS - *number_of_waypoints;
80003bbe:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003bc2:	90 08       	ld.sh	r8,r8[0x0]
80003bc4:	f0 08 11 0a 	rsub	r8,r8,10
80003bc8:	5c 88       	casts.h	r8
80003bca:	ef 58 ff fc 	st.h	r7[-4],r8
			}
			*number_of_waypoints =  packet.count+ *number_of_waypoints;
80003bce:	ef 09 ff fc 	ld.sh	r9,r7[-4]
80003bd2:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003bd6:	90 08       	ld.sh	r8,r8[0x0]
80003bd8:	f2 08 00 08 	add	r8,r9,r8
80003bdc:	5c 88       	casts.h	r8
80003bde:	ee f9 ff f4 	ld.w	r9,r7[-12]
80003be2:	b2 08       	st.h	r9[0x0],r8
			dbg_print("Receiving ");
80003be4:	fe cc 01 04 	sub	r12,pc,260
80003be8:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(packet.count,10);
80003bec:	ef 08 ff fc 	ld.sh	r8,r7[-4]
80003bf0:	5c 78       	castu.h	r8
80003bf2:	30 ab       	mov	r11,10
80003bf4:	10 9c       	mov	r12,r8
80003bf6:	f0 16 00 04 	mcall	r6[16]
			dbg_print(" new waypoints. ");
80003bfa:	fe cc 01 0e 	sub	r12,pc,270
80003bfe:	f0 16 00 01 	mcall	r6[4]
			dbg_print("New total number of waypoints:");
80003c02:	fe cc 01 02 	sub	r12,pc,258
80003c06:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(*number_of_waypoints,10);
80003c0a:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003c0e:	90 08       	ld.sh	r8,r8[0x0]
80003c10:	5c 78       	castu.h	r8
80003c12:	30 ab       	mov	r11,10
80003c14:	10 9c       	mov	r12,r8
80003c16:	f0 16 00 04 	mcall	r6[16]
			dbg_print("\n");
80003c1a:	fe cc 08 72 	sub	r12,pc,2162
80003c1e:	f0 16 00 01 	mcall	r6[4]
			
			*waypoint_receiving   = true;
80003c22:	ee f9 ff f0 	ld.w	r9,r7[-16]
80003c26:	30 18       	mov	r8,1
80003c28:	b2 88       	st.b	r9[0x0],r8
			*waypoint_sending     = false;
80003c2a:	ee f9 ff ec 	ld.w	r9,r7[-20]
80003c2e:	30 08       	mov	r8,0
80003c30:	b2 88       	st.b	r9[0x0],r8
			waypoint_request_number = 0;
80003c32:	ec f8 00 f8 	ld.w	r8,r6[248]
80003c36:	30 09       	mov	r9,0
80003c38:	91 09       	st.w	r8[0x0],r9
			
			
			start_timeout = get_millis();
80003c3a:	f0 16 00 0f 	mcall	r6[60]
80003c3e:	18 99       	mov	r9,r12
80003c40:	ec f8 01 60 	ld.w	r8,r6[352]
80003c44:	91 09       	st.w	r8[0x0],r9
		}
		
		mavlink_msg_mission_request_send(MAVLINK_COMM_0,rec->msg.sysid,rec->msg.compid,waypoint_request_number);
80003c46:	ec f8 00 f8 	ld.w	r8,r6[248]
80003c4a:	70 08       	ld.w	r8,r8[0x0]
80003c4c:	5c 88       	casts.h	r8
80003c4e:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
80003c52:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003c56:	11 e8       	ld.ub	r8,r8[0x6]
80003c58:	10 9a       	mov	r10,r8
80003c5a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003c5e:	11 d8       	ld.ub	r8,r8[0x5]
80003c60:	10 9b       	mov	r11,r8
80003c62:	30 0c       	mov	r12,0
80003c64:	fe b0 f6 78 	rcall	80002954 <mavlink_msg_mission_request_send>
		
		dbg_print("Asking for waypoint ");
80003c68:	fe cc 01 48 	sub	r12,pc,328
80003c6c:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(waypoint_request_number,10);
80003c70:	ec f8 00 f8 	ld.w	r8,r6[248]
80003c74:	70 08       	ld.w	r8,r8[0x0]
80003c76:	30 ab       	mov	r11,10
80003c78:	10 9c       	mov	r12,r8
80003c7a:	f0 16 00 04 	mcall	r6[16]
		dbg_print("\n");	
80003c7e:	fe cc 08 d6 	sub	r12,pc,2262
80003c82:	f0 16 00 01 	mcall	r6[4]
	}
	
}
80003c86:	2f bd       	sub	sp,-20
80003c88:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80003c8c:	80 00       	ld.sh	r0,r0[0x0]
80003c8e:	39 c4       	mov	r4,-100
80003c90:	4e 65       	lddpc	r5,80003e28 <receive_waypoint+0x102>
80003c92:	77 20       	ld.w	r0,r11[0x48]
80003c94:	77 61       	ld.w	r1,r11[0x58]
80003c96:	79 70       	ld.w	r0,r12[0x5c]
80003c98:	6f 69       	ld.w	r9,r7[0x58]
80003c9a:	6e 74       	ld.w	r4,r7[0x1c]
80003c9c:	20 72       	sub	r2,7
80003c9e:	65 63       	ld.w	r3,r2[0x58]
80003ca0:	65 69       	ld.w	r9,r2[0x58]
80003ca2:	76 65       	ld.w	r5,r11[0x18]
80003ca4:	64 20       	ld.w	r0,r2[0x8]
80003ca6:	00 00       	add	r0,r0
80003ca8:	20 72       	sub	r2,7
80003caa:	65 71       	ld.w	r1,r2[0x5c]
80003cac:	75 65       	ld.w	r5,r10[0x58]
80003cae:	73 74       	ld.w	r4,r9[0x5c]
80003cb0:	65 64       	ld.w	r4,r2[0x58]
80003cb2:	20 6e       	sub	lr,6
80003cb4:	75 6d       	ld.w	sp,r10[0x58]
80003cb6:	20 3a       	sub	r10,3
80003cb8:	00 00       	add	r0,r0
80003cba:	00 00       	add	r0,r0
80003cbc:	20 72       	sub	r2,7
80003cbe:	65 63       	ld.w	r3,r2[0x58]
80003cc0:	65 69       	ld.w	r9,r2[0x58]
80003cc2:	76 69       	ld.w	r9,r11[0x18]
80003cc4:	6e 67       	ld.w	r7,r7[0x18]
80003cc6:	20 6e       	sub	lr,6
80003cc8:	75 6d       	ld.w	sp,r10[0x58]
80003cca:	20 3a       	sub	r10,3
80003ccc:	00 00       	add	r0,r0
80003cce:	00 00       	add	r0,r0
80003cd0:	52 65       	stdsp	sp[0x98],r5
80003cd2:	63 65       	ld.w	r5,r1[0x58]
80003cd4:	69 76       	ld.w	r6,r4[0x5c]
80003cd6:	69 6e       	ld.w	lr,r4[0x58]
80003cd8:	67 20       	ld.w	r0,r3[0x48]
80003cda:	67 6f       	ld.w	pc,r3[0x58]
80003cdc:	6f 64       	ld.w	r4,r7[0x58]
80003cde:	20 77       	sub	r7,7
80003ce0:	61 79       	ld.w	r9,r0[0x5c]
80003ce2:	70 6f       	ld.w	pc,r8[0x18]
80003ce4:	69 6e       	ld.w	lr,r4[0x58]
80003ce6:	74 2c       	ld.w	r12,r10[0x8]
80003ce8:	20 6e       	sub	lr,6
80003cea:	75 6d       	ld.w	sp,r10[0x58]
80003cec:	62 65       	ld.w	r5,r1[0x18]
80003cee:	72 20       	ld.w	r0,r9[0x8]
80003cf0:	00 00       	add	r0,r0
80003cf2:	00 00       	add	r0,r0
80003cf4:	20 6f       	sub	pc,6
80003cf6:	66 20       	ld.w	r0,r3[0x8]
80003cf8:	00 00       	add	r0,r0
80003cfa:	00 00       	add	r0,r0
80003cfc:	66 6c       	ld.w	r12,r3[0x18]
80003cfe:	69 67       	ld.w	r7,r4[0x58]
80003d00:	68 74       	ld.w	r4,r4[0x1c]
80003d02:	20 70       	sub	r0,7
80003d04:	6c 61       	ld.w	r1,r6[0x18]
80003d06:	6e 20       	ld.w	r0,r7[0x8]
80003d08:	72 65       	ld.w	r5,r9[0x18]
80003d0a:	63 65       	ld.w	r5,r1[0x58]
80003d0c:	69 76       	ld.w	r6,r4[0x5c]
80003d0e:	65 64       	ld.w	r4,r2[0x58]
80003d10:	21 0a       	sub	r10,16
80003d12:	00 00       	add	r0,r0
80003d14:	41 63       	lddsp	r3,sp[0x58]
80003d16:	6b 20       	ld.w	r0,r5[0x48]
80003d18:	6e 6f       	ld.w	pc,r7[0x18]
80003d1a:	74 20       	ld.w	r0,r10[0x8]
80003d1c:	72 65       	ld.w	r5,r9[0x18]
80003d1e:	63 65       	ld.w	r5,r1[0x58]
80003d20:	69 76       	ld.w	r6,r4[0x5c]
80003d22:	65 64       	ld.w	r4,r2[0x58]
80003d24:	21 00       	sub	r0,16

80003d26 <receive_waypoint>:

void receive_waypoint(Mavlink_Received_t* rec,  waypoint_struct waypoint_list[], uint16_t number_of_waypoints, bool* waypoint_receiving)
{
80003d26:	eb cd 40 c0 	pushm	r6-r7,lr
80003d2a:	1a 97       	mov	r7,sp
80003d2c:	21 bd       	sub	sp,108
80003d2e:	fe f6 03 0e 	ld.w	r6,pc[782]
80003d32:	1e 26       	rsub	r6,pc
80003d34:	ef 4c ff a0 	st.w	r7[-96],r12
80003d38:	ef 4b ff 9c 	st.w	r7[-100],r11
80003d3c:	14 98       	mov	r8,r10
80003d3e:	ef 49 ff 94 	st.w	r7[-108],r9
80003d42:	ef 58 ff 98 	st.h	r7[-104],r8
	mavlink_mission_item_t packet;
	mavlink_msg_mission_item_decode(&rec->msg,&packet);
80003d46:	ee f8 ff a0 	ld.w	r8,r7[-96]
80003d4a:	ee c9 00 2c 	sub	r9,r7,44
80003d4e:	12 9b       	mov	r11,r9
80003d50:	10 9c       	mov	r12,r8
80003d52:	fe b0 f5 87 	rcall	80002860 <mavlink_msg_mission_item_decode>
	// Check if this message is for this system and subsystem
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_system.sysid
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
80003d56:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80003d5a:	ec f8 00 74 	ld.w	r8,r6[116]
80003d5e:	11 88       	ld.ub	r8,r8[0x0]
void receive_waypoint(Mavlink_Received_t* rec,  waypoint_struct waypoint_list[], uint16_t number_of_waypoints, bool* waypoint_receiving)
{
	mavlink_mission_item_t packet;
	mavlink_msg_mission_item_decode(&rec->msg,&packet);
	// Check if this message is for this system and subsystem
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_system.sysid
80003d60:	f0 09 18 00 	cp.b	r9,r8
80003d64:	e0 81 01 69 	brne	80004036 <receive_waypoint+0x310>
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
80003d68:	ef 39 ff f5 	ld.ub	r9,r7[-11]
80003d6c:	ec f8 00 c0 	ld.w	r8,r6[192]
80003d70:	11 98       	ld.ub	r8,r8[0x1]
void receive_waypoint(Mavlink_Received_t* rec,  waypoint_struct waypoint_list[], uint16_t number_of_waypoints, bool* waypoint_receiving)
{
	mavlink_mission_item_t packet;
	mavlink_msg_mission_item_decode(&rec->msg,&packet);
	// Check if this message is for this system and subsystem
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_system.sysid
80003d72:	f0 09 18 00 	cp.b	r9,r8
80003d76:	e0 81 01 60 	brne	80004036 <receive_waypoint+0x310>
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
	{
		start_timeout = get_millis();
80003d7a:	f0 16 00 0f 	mcall	r6[60]
80003d7e:	18 99       	mov	r9,r12
80003d80:	ec f8 01 60 	ld.w	r8,r6[352]
80003d84:	91 09       	st.w	r8[0x0],r9
		
		waypoint_struct new_waypoint;
		
		new_waypoint.wp_id = packet.command;
80003d86:	ef 08 ff f2 	ld.sh	r8,r7[-14]
80003d8a:	ef 58 ff a6 	st.h	r7[-90],r8
		
		new_waypoint.x = packet.x; // longitude
80003d8e:	ee f8 ff e4 	ld.w	r8,r7[-28]
80003d92:	10 9c       	mov	r12,r8
80003d94:	f0 16 00 02 	mcall	r6[8]
80003d98:	14 98       	mov	r8,r10
80003d9a:	16 99       	mov	r9,r11
80003d9c:	ee e9 ff bc 	st.d	r7[-68],r8
		new_waypoint.y = packet.y; // latitude 
80003da0:	ee f8 ff e8 	ld.w	r8,r7[-24]
80003da4:	10 9c       	mov	r12,r8
80003da6:	f0 16 00 02 	mcall	r6[8]
80003daa:	14 98       	mov	r8,r10
80003dac:	16 99       	mov	r9,r11
80003dae:	ee e9 ff c4 	st.d	r7[-60],r8
		new_waypoint.z = packet.z; // altitude
80003db2:	ee f8 ff ec 	ld.w	r8,r7[-20]
80003db6:	10 9c       	mov	r12,r8
80003db8:	f0 16 00 02 	mcall	r6[8]
80003dbc:	14 98       	mov	r8,r10
80003dbe:	16 99       	mov	r9,r11
80003dc0:	ee e9 ff cc 	st.d	r7[-52],r8
		
		new_waypoint.autocontinue = packet.autocontinue;
80003dc4:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80003dc8:	ef 68 ff a9 	st.b	r7[-87],r8
		new_waypoint.frame = packet.frame;
80003dcc:	ef 38 ff f6 	ld.ub	r8,r7[-10]
80003dd0:	ef 68 ff a4 	st.b	r7[-92],r8
		
		new_waypoint.current = packet.current;
80003dd4:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80003dd8:	ef 68 ff a8 	st.b	r7[-88],r8
		
		new_waypoint.param1 = packet.param1;
80003ddc:	ee f8 ff d4 	ld.w	r8,r7[-44]
80003de0:	ef 48 ff ac 	st.w	r7[-84],r8
		new_waypoint.param2 = packet.param2;
80003de4:	ee f8 ff d8 	ld.w	r8,r7[-40]
80003de8:	ef 48 ff b0 	st.w	r7[-80],r8
		new_waypoint.param3 = packet.param3;
80003dec:	ee f8 ff dc 	ld.w	r8,r7[-36]
80003df0:	ef 48 ff b4 	st.w	r7[-76],r8
		new_waypoint.param4 = packet.param4;
80003df4:	ee f8 ff e0 	ld.w	r8,r7[-32]
80003df8:	ef 48 ff b8 	st.w	r7[-72],r8
		
		dbg_print("New waypoint received ");
80003dfc:	fe cc 01 6c 	sub	r12,pc,364
80003e00:	f0 16 00 01 	mcall	r6[4]
 		//dbg_print_num(packet.current,10);
 		//dbg_print(" Seq :");
 		//dbg_print_num(packet.seq,10);
		//dbg_print(" command id :");
		//dbg_print_num(packet.command,10);
		dbg_print(" requested num :");
80003e04:	fe cc 01 5c 	sub	r12,pc,348
80003e08:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(waypoint_request_number,10);
80003e0c:	ec f8 00 f8 	ld.w	r8,r6[248]
80003e10:	70 08       	ld.w	r8,r8[0x0]
80003e12:	30 ab       	mov	r11,10
80003e14:	10 9c       	mov	r12,r8
80003e16:	f0 16 00 04 	mcall	r6[16]
		dbg_print(" receiving num :");
80003e1a:	fe cc 01 5e 	sub	r12,pc,350
80003e1e:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(packet.seq,10);
80003e22:	ef 08 ff f0 	ld.sh	r8,r7[-16]
80003e26:	5c 78       	castu.h	r8
80003e28:	30 ab       	mov	r11,10
80003e2a:	10 9c       	mov	r12,r8
80003e2c:	f0 16 00 04 	mcall	r6[16]
		//dbg_print(" is it receiving :");
		//dbg_print_num(waypoint_receiving,10); // boolean value
		dbg_print("\n");
80003e30:	fe cc 0a 88 	sub	r12,pc,2696
80003e34:	f0 16 00 01 	mcall	r6[4]
			//new_waypoint.alt = packet.param2;
			//new_waypoint.param1 = packet.param1;
			//break;
		//}
		
		if(packet.current == 2) {                                               //current = 2 is a flag to tell us this is a "guided mode" waypoint and not for the mission
80003e38:	ef 39 ff f7 	ld.ub	r9,r7[-9]
80003e3c:	30 28       	mov	r8,2
80003e3e:	f0 09 18 00 	cp.b	r9,r8
80003e42:	c0 e1       	brne	80003e5e <receive_waypoint+0x138>

			// set wp_nav's destination
			//wp_nav.set_destination(pv_location_to_vector(tell_command));

			// verify we received the command
			mavlink_msg_mission_ack_send(MAVLINK_COMM_0, rec->msg.sysid,rec->msg.compid, MAV_CMD_ACK_OK);
80003e44:	ee f8 ff a0 	ld.w	r8,r7[-96]
80003e48:	11 e8       	ld.ub	r8,r8[0x6]
80003e4a:	10 9a       	mov	r10,r8
80003e4c:	ee f8 ff a0 	ld.w	r8,r7[-96]
80003e50:	11 d8       	ld.ub	r8,r8[0x5]
80003e52:	30 19       	mov	r9,1
80003e54:	10 9b       	mov	r11,r8
80003e56:	30 0c       	mov	r12,0
80003e58:	fe b0 f7 a4 	rcall	80002da0 <mavlink_msg_mission_ack_send>
80003e5c:	ce d8       	rjmp	80004036 <receive_waypoint+0x310>

		} else if(packet.current == 3){                                    //current = 3 is a flag to tell us this is a alt change only
80003e5e:	ef 39 ff f7 	ld.ub	r9,r7[-9]
80003e62:	30 38       	mov	r8,3
80003e64:	f0 09 18 00 	cp.b	r9,r8
80003e68:	c0 e1       	brne	80003e84 <receive_waypoint+0x15e>
			// To-Do: update target altitude for loiter or waypoint controller depending upon nav mode
			// similar to how do_change_alt works
			//wp_nav.set_desired_alt(new_waypoint.alt);

			// verify we received the command
			mavlink_msg_mission_ack_send(MAVLINK_COMM_0, rec->msg.sysid,rec->msg.compid, MAV_CMD_ACK_OK);
80003e6a:	ee f8 ff a0 	ld.w	r8,r7[-96]
80003e6e:	11 e8       	ld.ub	r8,r8[0x6]
80003e70:	10 9a       	mov	r10,r8
80003e72:	ee f8 ff a0 	ld.w	r8,r7[-96]
80003e76:	11 d8       	ld.ub	r8,r8[0x5]
80003e78:	30 19       	mov	r9,1
80003e7a:	10 9b       	mov	r11,r8
80003e7c:	30 0c       	mov	r12,0
80003e7e:	fe b0 f7 91 	rcall	80002da0 <mavlink_msg_mission_ack_send>
80003e82:	cd a8       	rjmp	80004036 <receive_waypoint+0x310>

		} else {
			// Check if receiving waypoints
			if (*waypoint_receiving){
80003e84:	ee f8 ff 94 	ld.w	r8,r7[-108]
80003e88:	11 88       	ld.ub	r8,r8[0x0]
80003e8a:	58 08       	cp.w	r8,0
80003e8c:	e0 80 00 c1 	breq	8000400e <receive_waypoint+0x2e8>

				// check if this is the requested waypoint
				if (packet.seq == waypoint_request_number)
80003e90:	ef 08 ff f0 	ld.sh	r8,r7[-16]
80003e94:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
80003e98:	ec f8 00 f8 	ld.w	r8,r6[248]
80003e9c:	70 08       	ld.w	r8,r8[0x0]
80003e9e:	10 39       	cp.w	r9,r8
80003ea0:	e0 81 00 cb 	brne	80004036 <receive_waypoint+0x310>
				{
					dbg_print("Receiving good waypoint, number ");
80003ea4:	fe cc 01 d4 	sub	r12,pc,468
80003ea8:	f0 16 00 01 	mcall	r6[4]
					dbg_print_num(waypoint_request_number,10);
80003eac:	ec f8 00 f8 	ld.w	r8,r6[248]
80003eb0:	70 08       	ld.w	r8,r8[0x0]
80003eb2:	30 ab       	mov	r11,10
80003eb4:	10 9c       	mov	r12,r8
80003eb6:	f0 16 00 04 	mcall	r6[16]
					dbg_print(" of ");
80003eba:	fe cc 01 c6 	sub	r12,pc,454
80003ebe:	f0 16 00 01 	mcall	r6[4]
					dbg_print_num(number_of_waypoints-num_waypoint_onboard,10);
80003ec2:	ef 19 ff 98 	ld.uh	r9,r7[-104]
80003ec6:	ec f8 01 1c 	ld.w	r8,r6[284]
80003eca:	90 08       	ld.sh	r8,r8[0x0]
80003ecc:	5c 78       	castu.h	r8
80003ece:	f2 08 01 08 	sub	r8,r9,r8
80003ed2:	30 ab       	mov	r11,10
80003ed4:	10 9c       	mov	r12,r8
80003ed6:	f0 16 00 04 	mcall	r6[16]
					dbg_print("\n");
80003eda:	fe cc 0b 32 	sub	r12,pc,2866
80003ede:	f0 16 00 01 	mcall	r6[4]
					
				    waypoint_list[num_waypoint_onboard + waypoint_request_number] = new_waypoint;
80003ee2:	ec f8 01 1c 	ld.w	r8,r6[284]
80003ee6:	90 08       	ld.sh	r8,r8[0x0]
80003ee8:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
80003eec:	ec f8 00 f8 	ld.w	r8,r6[248]
80003ef0:	70 08       	ld.w	r8,r8[0x0]
80003ef2:	f2 08 00 08 	add	r8,r9,r8
80003ef6:	10 99       	mov	r9,r8
80003ef8:	12 98       	mov	r8,r9
80003efa:	a1 78       	lsl	r8,0x1
80003efc:	12 08       	add	r8,r9
80003efe:	a5 68       	lsl	r8,0x4
80003f00:	ee f9 ff 9c 	ld.w	r9,r7[-100]
80003f04:	f2 08 00 08 	add	r8,r9,r8
80003f08:	10 9b       	mov	r11,r8
80003f0a:	ee ca 00 5c 	sub	r10,r7,92
80003f0e:	f6 c8 00 00 	sub	r8,r11,0
80003f12:	f4 c9 00 00 	sub	r9,r10,0
80003f16:	72 0c       	ld.w	r12,r9[0x0]
80003f18:	91 0c       	st.w	r8[0x0],r12
80003f1a:	72 1c       	ld.w	r12,r9[0x4]
80003f1c:	91 1c       	st.w	r8[0x4],r12
80003f1e:	72 2c       	ld.w	r12,r9[0x8]
80003f20:	91 2c       	st.w	r8[0x8],r12
80003f22:	72 39       	ld.w	r9,r9[0xc]
80003f24:	91 39       	st.w	r8[0xc],r9
80003f26:	f6 c8 ff f0 	sub	r8,r11,-16
80003f2a:	f4 c9 ff f0 	sub	r9,r10,-16
80003f2e:	72 0c       	ld.w	r12,r9[0x0]
80003f30:	91 0c       	st.w	r8[0x0],r12
80003f32:	72 1c       	ld.w	r12,r9[0x4]
80003f34:	91 1c       	st.w	r8[0x4],r12
80003f36:	72 2c       	ld.w	r12,r9[0x8]
80003f38:	91 2c       	st.w	r8[0x8],r12
80003f3a:	72 39       	ld.w	r9,r9[0xc]
80003f3c:	91 39       	st.w	r8[0xc],r9
80003f3e:	f6 c8 ff e0 	sub	r8,r11,-32
80003f42:	f4 c9 ff e0 	sub	r9,r10,-32
80003f46:	72 0a       	ld.w	r10,r9[0x0]
80003f48:	91 0a       	st.w	r8[0x0],r10
80003f4a:	72 1a       	ld.w	r10,r9[0x4]
80003f4c:	91 1a       	st.w	r8[0x4],r10
80003f4e:	72 2a       	ld.w	r10,r9[0x8]
80003f50:	91 2a       	st.w	r8[0x8],r10
80003f52:	72 39       	ld.w	r9,r9[0xc]
80003f54:	91 39       	st.w	r8[0xc],r9
					waypoint_request_number++;
80003f56:	ec f8 00 f8 	ld.w	r8,r6[248]
80003f5a:	70 08       	ld.w	r8,r8[0x0]
80003f5c:	f0 c9 ff ff 	sub	r9,r8,-1
80003f60:	ec f8 00 f8 	ld.w	r8,r6[248]
80003f64:	91 09       	st.w	r8[0x0],r9
					
					if ((num_waypoint_onboard + waypoint_request_number) == number_of_waypoints) 
80003f66:	ec f8 01 1c 	ld.w	r8,r6[284]
80003f6a:	90 08       	ld.sh	r8,r8[0x0]
80003f6c:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
80003f70:	ec f8 00 f8 	ld.w	r8,r6[248]
80003f74:	70 08       	ld.w	r8,r8[0x0]
80003f76:	10 09       	add	r9,r8
80003f78:	ef 18 ff 98 	ld.uh	r8,r7[-104]
80003f7c:	10 39       	cp.w	r9,r8
80003f7e:	c2 71       	brne	80003fcc <receive_waypoint+0x2a6>
					{
						
						uint8_t type = MAV_CMD_ACK_OK;                         // ok (0), error(1) ???
80003f80:	30 18       	mov	r8,1
80003f82:	ef 68 ff fe 	st.b	r7[-2],r8
						//mavlink_msg_mission_ack_send(MAVLINK_COMM_0,rec->msg.sysid,mavlink_mission_planner.compid,type);
						mavlink_msg_mission_ack_send(MAVLINK_COMM_0,rec->msg.sysid,rec->msg.compid,type);
80003f86:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80003f8a:	ee f8 ff a0 	ld.w	r8,r7[-96]
80003f8e:	11 e8       	ld.ub	r8,r8[0x6]
80003f90:	10 9a       	mov	r10,r8
80003f92:	ee f8 ff a0 	ld.w	r8,r7[-96]
80003f96:	11 d8       	ld.ub	r8,r8[0x5]
80003f98:	10 9b       	mov	r11,r8
80003f9a:	30 0c       	mov	r12,0
80003f9c:	fe b0 f7 02 	rcall	80002da0 <mavlink_msg_mission_ack_send>
						//mavlink_msg_mission_ack_send(MAVLINK_COMM_0,rec->msg.sysid,0,type);
						//mavlink_msg_mission_ack_send(MAVLINK_COMM_0,rec->msg.sysid,mavlink_system.compid,type);
						
						//mavlink_msg_mission_ack_send(MAVLINK_COMM_0, packet.target_system, packet.target_component,type);

						dbg_print("flight plan received!\n");
80003fa0:	fe cc 02 a4 	sub	r12,pc,676
80003fa4:	f0 16 00 01 	mcall	r6[4]
						*waypoint_receiving = false;
80003fa8:	ee f9 ff 94 	ld.w	r9,r7[-108]
80003fac:	30 08       	mov	r8,0
80003fae:	b2 88       	st.b	r9[0x0],r8
						num_waypoint_onboard = number_of_waypoints;
80003fb0:	ec f9 01 1c 	ld.w	r9,r6[284]
80003fb4:	ef 08 ff 98 	ld.sh	r8,r7[-104]
80003fb8:	b2 08       	st.h	r9[0x0],r8
						centralData->waypoint_set = false;
80003fba:	ec f8 00 00 	ld.w	r8,r6[0]
80003fbe:	70 09       	ld.w	r9,r8[0x0]
80003fc0:	30 08       	mov	r8,0
80003fc2:	f3 68 10 b4 	st.b	r9[4276],r8
						init_wp();
80003fc6:	f0 16 00 6e 	mcall	r6[440]
80003fca:	c3 68       	rjmp	80004036 <receive_waypoint+0x310>
					}else{
						mavlink_msg_mission_request_send(MAVLINK_COMM_0,rec->msg.sysid,rec->msg.compid,waypoint_request_number);
80003fcc:	ec f8 00 f8 	ld.w	r8,r6[248]
80003fd0:	70 08       	ld.w	r8,r8[0x0]
80003fd2:	5c 88       	casts.h	r8
80003fd4:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
80003fd8:	ee f8 ff a0 	ld.w	r8,r7[-96]
80003fdc:	11 e8       	ld.ub	r8,r8[0x6]
80003fde:	10 9a       	mov	r10,r8
80003fe0:	ee f8 ff a0 	ld.w	r8,r7[-96]
80003fe4:	11 d8       	ld.ub	r8,r8[0x5]
80003fe6:	10 9b       	mov	r11,r8
80003fe8:	30 0c       	mov	r12,0
80003fea:	fe b0 f4 b5 	rcall	80002954 <mavlink_msg_mission_request_send>
						
						dbg_print("Asking for waypoint ");
80003fee:	fe cc 04 ce 	sub	r12,pc,1230
80003ff2:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(waypoint_request_number,10);
80003ff6:	ec f8 00 f8 	ld.w	r8,r6[248]
80003ffa:	70 08       	ld.w	r8,r8[0x0]
80003ffc:	30 ab       	mov	r11,10
80003ffe:	10 9c       	mov	r12,r8
80004000:	f0 16 00 04 	mcall	r6[16]
						dbg_print("\n");
80004004:	fe cc 0c 5c 	sub	r12,pc,3164
80004008:	f0 16 00 01 	mcall	r6[4]
8000400c:	c1 58       	rjmp	80004036 <receive_waypoint+0x310>
					}
				}
			}else{
				uint8_t type = MAV_CMD_ACK_OK; //MAV_CMD_ACK_ERR_FAIL;                         // ok (0), error(1)
8000400e:	30 18       	mov	r8,1
80004010:	ef 68 ff ff 	st.b	r7[-1],r8
				dbg_print("Ack not received!");
80004014:	fe cc 03 00 	sub	r12,pc,768
80004018:	f0 16 00 01 	mcall	r6[4]
				mavlink_msg_mission_ack_send(MAVLINK_COMM_0,rec->msg.sysid,rec->msg.compid,type);
8000401c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80004020:	ee f8 ff a0 	ld.w	r8,r7[-96]
80004024:	11 e8       	ld.ub	r8,r8[0x6]
80004026:	10 9a       	mov	r10,r8
80004028:	ee f8 ff a0 	ld.w	r8,r7[-96]
8000402c:	11 d8       	ld.ub	r8,r8[0x5]
8000402e:	10 9b       	mov	r11,r8
80004030:	30 0c       	mov	r12,0
80004032:	fe b0 f6 b7 	rcall	80002da0 <mavlink_msg_mission_ack_send>
			}				
		}		
	}			
}		
80004036:	2e 5d       	sub	sp,-108
80004038:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000403c:	80 00       	ld.sh	r0,r0[0x0]
8000403e:	3b b6       	mov	r6,-69
80004040:	53 65       	stdsp	sp[0xd8],r5
80004042:	74 20       	ld.w	r0,r10[0x8]
80004044:	63 75       	ld.w	r5,r1[0x5c]
80004046:	72 72       	ld.w	r2,r9[0x1c]
80004048:	65 6e       	ld.w	lr,r2[0x58]
8000404a:	74 20       	ld.w	r0,r10[0x8]
8000404c:	77 61       	ld.w	r1,r11[0x58]
8000404e:	79 70       	ld.w	r0,r12[0x5c]
80004050:	6f 69       	ld.w	r9,r7[0x58]
80004052:	6e 74       	ld.w	r4,r7[0x1c]
80004054:	20 74       	sub	r4,7
80004056:	6f 20       	ld.w	r0,r7[0x48]
80004058:	6e 75       	ld.w	r5,r7[0x1c]
8000405a:	6d 62       	ld.w	r2,r6[0x58]
8000405c:	65 72       	ld.w	r2,r2[0x5c]
	...

80004060 <set_current_wp>:

void set_current_wp(Mavlink_Received_t* rec,  waypoint_struct waypoint_list[], uint16_t num_of_waypoint)
{
80004060:	eb cd 40 c0 	pushm	r6-r7,lr
80004064:	1a 97       	mov	r7,sp
80004066:	20 5d       	sub	sp,20
80004068:	4c 56       	lddpc	r6,8000417c <set_current_wp+0x11c>
8000406a:	1e 26       	rsub	r6,pc
8000406c:	ef 4c ff f4 	st.w	r7[-12],r12
80004070:	ef 4b ff f0 	st.w	r7[-16],r11
80004074:	14 98       	mov	r8,r10
80004076:	ef 58 ff ec 	st.h	r7[-20],r8
	mavlink_mission_set_current_t packet;
	mavlink_msg_mission_set_current_decode(&rec->msg,&packet);
8000407a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000407e:	ee c9 00 08 	sub	r9,r7,8
80004082:	12 9b       	mov	r11,r9
80004084:	10 9c       	mov	r12,r8
80004086:	fe b0 f5 25 	rcall	80002ad0 <mavlink_msg_mission_set_current_decode>
	// Check if this message is for this system and subsystem
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_system.sysid
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
8000408a:	ef 39 ff fa 	ld.ub	r9,r7[-6]
8000408e:	ec f8 00 74 	ld.w	r8,r6[116]
80004092:	11 88       	ld.ub	r8,r8[0x0]
void set_current_wp(Mavlink_Received_t* rec,  waypoint_struct waypoint_list[], uint16_t num_of_waypoint)
{
	mavlink_mission_set_current_t packet;
	mavlink_msg_mission_set_current_decode(&rec->msg,&packet);
	// Check if this message is for this system and subsystem
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_system.sysid
80004094:	f0 09 18 00 	cp.b	r9,r8
80004098:	c6 e1       	brne	80004174 <set_current_wp+0x114>
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
8000409a:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000409e:	ec f8 00 c0 	ld.w	r8,r6[192]
800040a2:	11 98       	ld.ub	r8,r8[0x1]
void set_current_wp(Mavlink_Received_t* rec,  waypoint_struct waypoint_list[], uint16_t num_of_waypoint)
{
	mavlink_mission_set_current_t packet;
	mavlink_msg_mission_set_current_decode(&rec->msg,&packet);
	// Check if this message is for this system and subsystem
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_system.sysid
800040a4:	f0 09 18 00 	cp.b	r9,r8
800040a8:	c6 61       	brne	80004174 <set_current_wp+0x114>
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
	{
		if (packet.seq < num_of_waypoint)
800040aa:	ef 08 ff f8 	ld.sh	r8,r7[-8]
800040ae:	ef 09 ff ec 	ld.sh	r9,r7[-20]
800040b2:	f0 09 19 00 	cp.h	r9,r8
800040b6:	e0 88 00 53 	brls	8000415c <set_current_wp+0xfc>
		{
			//dbg_print("setting current wp\n");
			int i;
			for (i=0;i<num_of_waypoint;i++)
800040ba:	30 08       	mov	r8,0
800040bc:	ef 48 ff fc 	st.w	r7[-4],r8
800040c0:	c1 18       	rjmp	800040e2 <set_current_wp+0x82>
			{
				waypoint_list[i].current = 0;
800040c2:	ee f9 ff fc 	ld.w	r9,r7[-4]
800040c6:	12 98       	mov	r8,r9
800040c8:	a1 78       	lsl	r8,0x1
800040ca:	12 08       	add	r8,r9
800040cc:	a5 68       	lsl	r8,0x4
800040ce:	ee f9 ff f0 	ld.w	r9,r7[-16]
800040d2:	10 09       	add	r9,r8
800040d4:	30 08       	mov	r8,0
800040d6:	b2 c8       	st.b	r9[0x4],r8
	{
		if (packet.seq < num_of_waypoint)
		{
			//dbg_print("setting current wp\n");
			int i;
			for (i=0;i<num_of_waypoint;i++)
800040d8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800040dc:	2f f8       	sub	r8,-1
800040de:	ef 48 ff fc 	st.w	r7[-4],r8
800040e2:	ef 19 ff ec 	ld.uh	r9,r7[-20]
800040e6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800040ea:	10 39       	cp.w	r9,r8
800040ec:	fe 99 ff eb 	brgt	800040c2 <set_current_wp+0x62>
			{
				waypoint_list[i].current = 0;
			}
			
			waypoint_list[packet.seq].current = 1;
800040f0:	ef 08 ff f8 	ld.sh	r8,r7[-8]
800040f4:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
800040f8:	12 98       	mov	r8,r9
800040fa:	a1 78       	lsl	r8,0x1
800040fc:	12 08       	add	r8,r9
800040fe:	a5 68       	lsl	r8,0x4
80004100:	ee f9 ff f0 	ld.w	r9,r7[-16]
80004104:	10 09       	add	r9,r8
80004106:	30 18       	mov	r8,1
80004108:	b2 c8       	st.b	r9[0x4],r8
			mavlink_msg_mission_current_send(MAVLINK_COMM_0,waypoint_list[packet.seq].current);
8000410a:	ef 08 ff f8 	ld.sh	r8,r7[-8]
8000410e:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
80004112:	12 98       	mov	r8,r9
80004114:	a1 78       	lsl	r8,0x1
80004116:	12 08       	add	r8,r9
80004118:	a5 68       	lsl	r8,0x4
8000411a:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000411e:	f2 08 00 08 	add	r8,r9,r8
80004122:	11 c8       	ld.ub	r8,r8[0x4]
80004124:	10 9b       	mov	r11,r8
80004126:	30 0c       	mov	r12,0
80004128:	fe b0 f4 fa 	rcall	80002b1c <mavlink_msg_mission_current_send>
			
			dbg_print("Set current waypoint to number");
8000412c:	fe cc 00 ec 	sub	r12,pc,236
80004130:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(packet.seq,10);
80004134:	ef 08 ff f8 	ld.sh	r8,r7[-8]
80004138:	5c 78       	castu.h	r8
8000413a:	30 ab       	mov	r11,10
8000413c:	10 9c       	mov	r12,r8
8000413e:	f0 16 00 04 	mcall	r6[16]
			dbg_print("\n");
80004142:	fe cc 0d 9a 	sub	r12,pc,3482
80004146:	f0 16 00 01 	mcall	r6[4]
			
			centralData->waypoint_set = false;
8000414a:	ec f8 00 00 	ld.w	r8,r6[0]
8000414e:	70 09       	ld.w	r9,r8[0x0]
80004150:	30 08       	mov	r8,0
80004152:	f3 68 10 b4 	st.b	r9[4276],r8
			init_wp();
80004156:	f0 16 00 6e 	mcall	r6[440]
8000415a:	c0 d8       	rjmp	80004174 <set_current_wp+0x114>
		}else{
			mavlink_msg_mission_ack_send(MAVLINK_COMM_0,rec->msg.sysid,rec->msg.compid,MAV_CMD_ACK_ERR_ACCESS_DENIED);
8000415c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004160:	11 e8       	ld.ub	r8,r8[0x6]
80004162:	10 9a       	mov	r10,r8
80004164:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004168:	11 d8       	ld.ub	r8,r8[0x5]
8000416a:	30 39       	mov	r9,3
8000416c:	10 9b       	mov	r11,r8
8000416e:	30 0c       	mov	r12,0
80004170:	fe b0 f6 18 	rcall	80002da0 <mavlink_msg_mission_ack_send>
		}
	}
}
80004174:	2f bd       	sub	sp,-20
80004176:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000417a:	00 00       	add	r0,r0
8000417c:	80 00       	ld.sh	r0,r0[0x0]
8000417e:	3e ee       	mov	lr,-18
80004180:	43 6c       	lddsp	r12,sp[0xd8]
80004182:	65 61       	ld.w	r1,r2[0x58]
80004184:	72 20       	ld.w	r0,r9[0x8]
80004186:	57 61       	stdsp	sp[0x1d8],r1
80004188:	79 70       	ld.w	r0,r12[0x5c]
8000418a:	6f 69       	ld.w	r9,r7[0x58]
8000418c:	6e 74       	ld.w	r4,r7[0x1c]
8000418e:	20 6c       	sub	r12,6
80004190:	69 73       	ld.w	r3,r4[0x5c]
80004192:	74 00       	ld.w	r0,r10[0x0]

80004194 <clear_waypoint_list>:

void clear_waypoint_list(Mavlink_Received_t* rec,  uint16_t* number_of_waypoints, bool* waypoint_set)
{
80004194:	eb cd 40 c0 	pushm	r6-r7,lr
80004198:	1a 97       	mov	r7,sp
8000419a:	20 4d       	sub	sp,16
8000419c:	4a 06       	lddpc	r6,8000421c <clear_waypoint_list+0x88>
8000419e:	1e 26       	rsub	r6,pc
800041a0:	ef 4c ff f8 	st.w	r7[-8],r12
800041a4:	ef 4b ff f4 	st.w	r7[-12],r11
800041a8:	ef 4a ff f0 	st.w	r7[-16],r10
	mavlink_mission_clear_all_t packet;
	mavlink_msg_mission_clear_all_decode(&rec->msg,&packet);
800041ac:	ee f8 ff f8 	ld.w	r8,r7[-8]
800041b0:	ee c9 00 02 	sub	r9,r7,2
800041b4:	12 9b       	mov	r11,r9
800041b6:	10 9c       	mov	r12,r8
800041b8:	fe b0 f5 b5 	rcall	80002d22 <mavlink_msg_mission_clear_all_decode>
	// Check if this message is for this system and subsystem
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_system.sysid
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
800041bc:	ef 39 ff fe 	ld.ub	r9,r7[-2]
800041c0:	ec f8 00 74 	ld.w	r8,r6[116]
800041c4:	11 88       	ld.ub	r8,r8[0x0]
void clear_waypoint_list(Mavlink_Received_t* rec,  uint16_t* number_of_waypoints, bool* waypoint_set)
{
	mavlink_mission_clear_all_t packet;
	mavlink_msg_mission_clear_all_decode(&rec->msg,&packet);
	// Check if this message is for this system and subsystem
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_system.sysid
800041c6:	f0 09 18 00 	cp.b	r9,r8
800041ca:	c2 51       	brne	80004214 <clear_waypoint_list+0x80>
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
800041cc:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800041d0:	ec f8 00 c0 	ld.w	r8,r6[192]
800041d4:	11 98       	ld.ub	r8,r8[0x1]
void clear_waypoint_list(Mavlink_Received_t* rec,  uint16_t* number_of_waypoints, bool* waypoint_set)
{
	mavlink_mission_clear_all_t packet;
	mavlink_msg_mission_clear_all_decode(&rec->msg,&packet);
	// Check if this message is for this system and subsystem
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_system.sysid
800041d6:	f0 09 18 00 	cp.b	r9,r8
800041da:	c1 d1       	brne	80004214 <clear_waypoint_list+0x80>
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
	{
		*number_of_waypoints = 0;
800041dc:	ee f9 ff f4 	ld.w	r9,r7[-12]
800041e0:	30 08       	mov	r8,0
800041e2:	b2 08       	st.h	r9[0x0],r8
		num_waypoint_onboard = 0;
800041e4:	ec f9 01 1c 	ld.w	r9,r6[284]
800041e8:	30 08       	mov	r8,0
800041ea:	b2 08       	st.h	r9[0x0],r8
		*waypoint_set = 0;
800041ec:	ee f9 ff f0 	ld.w	r9,r7[-16]
800041f0:	30 08       	mov	r8,0
800041f2:	b2 88       	st.b	r9[0x0],r8
		mavlink_msg_mission_ack_send(MAVLINK_COMM_0,rec->msg.sysid,rec->msg.compid,MAV_CMD_ACK_OK);
800041f4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800041f8:	11 e8       	ld.ub	r8,r8[0x6]
800041fa:	10 9a       	mov	r10,r8
800041fc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004200:	11 d8       	ld.ub	r8,r8[0x5]
80004202:	30 19       	mov	r9,1
80004204:	10 9b       	mov	r11,r8
80004206:	30 0c       	mov	r12,0
80004208:	fe b0 f5 cc 	rcall	80002da0 <mavlink_msg_mission_ack_send>
		dbg_print("Clear Waypoint list");
8000420c:	fe cc 00 8c 	sub	r12,pc,140
80004210:	f0 16 00 01 	mcall	r6[4]
	}		
}
80004214:	2f cd       	sub	sp,-16
80004216:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000421a:	00 00       	add	r0,r0
8000421c:	80 00       	ld.sh	r0,r0[0x0]
8000421e:	40 22       	lddsp	r2,sp[0x8]
80004220:	62 61       	ld.w	r1,r1[0x18]
80004222:	73 65       	ld.w	r5,r9[0x58]
80004224:	5f 6d       	srmi	sp
80004226:	6f 64       	ld.w	r4,r7[0x58]
80004228:	65 3a       	ld.w	r10,r2[0x4c]
8000422a:	00 00       	add	r0,r0
8000422c:	2c 20       	sub	r0,-62
8000422e:	63 75       	ld.w	r5,r1[0x5c]
80004230:	73 74       	ld.w	r4,r9[0x5c]
80004232:	6f 6d       	ld.w	sp,r7[0x58]
80004234:	20 6d       	sub	sp,24
80004236:	6f 64       	ld.w	r4,r7[0x58]
80004238:	65 3a       	ld.w	r10,r2[0x4c]
	...

8000423c <set_mav_mode>:

void set_mav_mode(Mavlink_Received_t* rec, uint8_t* board_mav_mode, uint8_t* board_mav_state, uint8_t sim_mode)
{
8000423c:	eb cd 40 e0 	pushm	r5-r7,lr
80004240:	1a 97       	mov	r7,sp
80004242:	20 6d       	sub	sp,24
80004244:	4e 26       	lddpc	r6,800043cc <set_mav_mode+0x190>
80004246:	1e 26       	rsub	r6,pc
80004248:	ef 4c ff f4 	st.w	r7[-12],r12
8000424c:	ef 4b ff f0 	st.w	r7[-16],r11
80004250:	ef 4a ff ec 	st.w	r7[-20],r10
80004254:	12 98       	mov	r8,r9
80004256:	ef 68 ff e8 	st.b	r7[-24],r8
	mavlink_set_mode_t packet;
	mavlink_msg_set_mode_decode(&rec->msg,&packet);
8000425a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000425e:	ee c9 00 08 	sub	r9,r7,8
80004262:	12 9b       	mov	r11,r9
80004264:	10 9c       	mov	r12,r8
80004266:	fe b0 f1 4d 	rcall	80002500 <mavlink_msg_set_mode_decode>
	// Check if this message is for this system and subsystem
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_system.sysid)
8000426a:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8000426e:	ec f8 00 74 	ld.w	r8,r6[116]
80004272:	11 88       	ld.ub	r8,r8[0x0]
80004274:	f0 09 18 00 	cp.b	r9,r8
80004278:	e0 81 00 a6 	brne	800043c4 <set_mav_mode+0x188>
	{
		dbg_print("base_mode:");
8000427c:	fe cc 00 5c 	sub	r12,pc,92
80004280:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(packet.base_mode,10);
80004284:	ef 38 ff fd 	ld.ub	r8,r7[-3]
80004288:	30 ab       	mov	r11,10
8000428a:	10 9c       	mov	r12,r8
8000428c:	f0 16 00 04 	mcall	r6[16]
		dbg_print(", custom mode:");
80004290:	fe cc 00 64 	sub	r12,pc,100
80004294:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(packet.custom_mode,10);
80004298:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000429c:	30 ab       	mov	r11,10
8000429e:	10 9c       	mov	r12,r8
800042a0:	f0 16 00 04 	mcall	r6[16]
		dbg_print("\n");
800042a4:	fe cc 0e fc 	sub	r12,pc,3836
800042a8:	f0 16 00 01 	mcall	r6[4]

		if (sim_mode == 0)
800042ac:	ef 39 ff e8 	ld.ub	r9,r7[-24]
800042b0:	30 08       	mov	r8,0
800042b2:	f0 09 18 00 	cp.b	r9,r8
800042b6:	c3 e1       	brne	80004332 <set_mav_mode+0xf6>
		{
			switch(packet.base_mode)
800042b8:	ef 38 ff fd 	ld.ub	r8,r7[-3]
800042bc:	e0 48 00 58 	cp.w	r8,88
800042c0:	c0 e0       	breq	800042dc <set_mav_mode+0xa0>
800042c2:	e0 89 00 06 	brgt	800042ce <set_mav_mode+0x92>
800042c6:	e0 48 00 50 	cp.w	r8,80
800042ca:	c0 90       	breq	800042dc <set_mav_mode+0xa0>
				break;
				case MAV_MODE_MANUAL_ARMED:
					if (get_thrust_from_remote()<-0.95)
					{
						*board_mav_state = MAV_STATE_ACTIVE;
						*board_mav_mode = MAV_MODE_MANUAL_ARMED;
800042cc:	c7 c8       	rjmp	800043c4 <set_mav_mode+0x188>
		dbg_print_num(packet.custom_mode,10);
		dbg_print("\n");

		if (sim_mode == 0)
		{
			switch(packet.base_mode)
800042ce:	e0 48 00 5c 	cp.w	r8,92
800042d2:	c0 50       	breq	800042dc <set_mav_mode+0xa0>
800042d4:	e0 48 00 c0 	cp.w	r8,192
800042d8:	c0 c0       	breq	800042f0 <set_mav_mode+0xb4>
				break;
				case MAV_MODE_MANUAL_ARMED:
					if (get_thrust_from_remote()<-0.95)
					{
						*board_mav_state = MAV_STATE_ACTIVE;
						*board_mav_mode = MAV_MODE_MANUAL_ARMED;
800042da:	c7 58       	rjmp	800043c4 <set_mav_mode+0x188>
			switch(packet.base_mode)
			{
				case MAV_MODE_STABILIZE_DISARMED:
				case MAV_MODE_GUIDED_DISARMED:
				case MAV_MODE_AUTO_DISARMED:
					*board_mav_state = MAV_STATE_STANDBY;
800042dc:	ee f9 ff ec 	ld.w	r9,r7[-20]
800042e0:	30 38       	mov	r8,3
800042e2:	b2 88       	st.b	r9[0x0],r8
					*board_mav_mode = MAV_MODE_MANUAL_DISARMED;
800042e4:	ee f9 ff f0 	ld.w	r9,r7[-16]
800042e8:	34 08       	mov	r8,64
800042ea:	b2 88       	st.b	r9[0x0],r8
				break;
800042ec:	d7 03       	nop
800042ee:	c6 b8       	rjmp	800043c4 <set_mav_mode+0x188>
				case MAV_MODE_MANUAL_ARMED:
					if (get_thrust_from_remote()<-0.95)
800042f0:	fe b0 f6 5e 	rcall	80002fac <get_thrust_from_remote>
800042f4:	18 98       	mov	r8,r12
800042f6:	10 9c       	mov	r12,r8
800042f8:	f0 16 00 02 	mcall	r6[8]
800042fc:	30 05       	mov	r5,0
800042fe:	e0 68 66 66 	mov	r8,26214
80004302:	ea 18 66 66 	orh	r8,0x6666
80004306:	e0 69 66 66 	mov	r9,26214
8000430a:	ea 19 bf ee 	orh	r9,0xbfee
8000430e:	f0 16 00 1c 	mcall	r6[112]
80004312:	18 98       	mov	r8,r12
80004314:	58 08       	cp.w	r8,0
80004316:	c0 20       	breq	8000431a <set_mav_mode+0xde>
80004318:	30 15       	mov	r5,1
8000431a:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
8000431e:	c5 20       	breq	800043c2 <set_mav_mode+0x186>
					{
						*board_mav_state = MAV_STATE_ACTIVE;
80004320:	ee f9 ff ec 	ld.w	r9,r7[-20]
80004324:	30 48       	mov	r8,4
80004326:	b2 88       	st.b	r9[0x0],r8
						*board_mav_mode = MAV_MODE_MANUAL_ARMED;
80004328:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000432c:	3c 08       	mov	r8,-64
8000432e:	b2 88       	st.b	r9[0x0],r8
80004330:	c4 a8       	rjmp	800043c4 <set_mav_mode+0x188>
					}
				break;
			}
		}else{
			switch(packet.base_mode)
80004332:	ef 38 ff fd 	ld.ub	r8,r7[-3]
80004336:	e0 48 00 c0 	cp.w	r8,192
8000433a:	c2 00       	breq	8000437a <set_mav_mode+0x13e>
8000433c:	e0 89 00 0c 	brgt	80004354 <set_mav_mode+0x118>
80004340:	e0 48 00 58 	cp.w	r8,88
80004344:	c1 20       	breq	80004368 <set_mav_mode+0x12c>
80004346:	e0 48 00 5c 	cp.w	r8,92
8000434a:	c0 f0       	breq	80004368 <set_mav_mode+0x12c>
8000434c:	e0 48 00 50 	cp.w	r8,80
80004350:	c0 c0       	breq	80004368 <set_mav_mode+0x12c>
80004352:	c3 98       	rjmp	800043c4 <set_mav_mode+0x188>
80004354:	e0 48 00 d8 	cp.w	r8,216
80004358:	c2 30       	breq	8000439e <set_mav_mode+0x162>
8000435a:	e0 48 00 dc 	cp.w	r8,220
8000435e:	c2 90       	breq	800043b0 <set_mav_mode+0x174>
80004360:	e0 48 00 d0 	cp.w	r8,208
80004364:	c1 40       	breq	8000438c <set_mav_mode+0x150>
80004366:	c2 f8       	rjmp	800043c4 <set_mav_mode+0x188>
			{
				case MAV_MODE_STABILIZE_DISARMED:
				case MAV_MODE_GUIDED_DISARMED:
				case MAV_MODE_AUTO_DISARMED:
					*board_mav_state = MAV_STATE_STANDBY;
80004368:	ee f9 ff ec 	ld.w	r9,r7[-20]
8000436c:	30 38       	mov	r8,3
8000436e:	b2 88       	st.b	r9[0x0],r8
					*board_mav_mode = MAV_MODE_MANUAL_DISARMED;
80004370:	ee f9 ff f0 	ld.w	r9,r7[-16]
80004374:	34 08       	mov	r8,64
80004376:	b2 88       	st.b	r9[0x0],r8
				break;
80004378:	c2 68       	rjmp	800043c4 <set_mav_mode+0x188>
				case MAV_MODE_MANUAL_ARMED:
					*board_mav_state = MAV_STATE_ACTIVE;
8000437a:	ee f9 ff ec 	ld.w	r9,r7[-20]
8000437e:	30 48       	mov	r8,4
80004380:	b2 88       	st.b	r9[0x0],r8
					*board_mav_mode = MAV_MODE_MANUAL_ARMED;
80004382:	ee f9 ff f0 	ld.w	r9,r7[-16]
80004386:	3c 08       	mov	r8,-64
80004388:	b2 88       	st.b	r9[0x0],r8
				break;
8000438a:	c1 d8       	rjmp	800043c4 <set_mav_mode+0x188>
				case MAV_MODE_STABILIZE_ARMED:
					*board_mav_state = MAV_STATE_ACTIVE;
8000438c:	ee f9 ff ec 	ld.w	r9,r7[-20]
80004390:	30 48       	mov	r8,4
80004392:	b2 88       	st.b	r9[0x0],r8
					*board_mav_mode = MAV_MODE_STABILIZE_ARMED;
80004394:	ee f9 ff f0 	ld.w	r9,r7[-16]
80004398:	3d 08       	mov	r8,-48
8000439a:	b2 88       	st.b	r9[0x0],r8
				break;
8000439c:	c1 48       	rjmp	800043c4 <set_mav_mode+0x188>
				case MAV_MODE_GUIDED_ARMED:
					*board_mav_state = MAV_STATE_ACTIVE;
8000439e:	ee f9 ff ec 	ld.w	r9,r7[-20]
800043a2:	30 48       	mov	r8,4
800043a4:	b2 88       	st.b	r9[0x0],r8
					*board_mav_mode = MAV_MODE_GUIDED_ARMED;
800043a6:	ee f9 ff f0 	ld.w	r9,r7[-16]
800043aa:	3d 88       	mov	r8,-40
800043ac:	b2 88       	st.b	r9[0x0],r8
				break;
800043ae:	c0 b8       	rjmp	800043c4 <set_mav_mode+0x188>
				case MAV_MODE_AUTO_ARMED:
					*board_mav_state = MAV_STATE_ACTIVE;
800043b0:	ee f9 ff ec 	ld.w	r9,r7[-20]
800043b4:	30 48       	mov	r8,4
800043b6:	b2 88       	st.b	r9[0x0],r8
					*board_mav_mode = MAV_MODE_AUTO_ARMED;
800043b8:	ee f9 ff f0 	ld.w	r9,r7[-16]
800043bc:	3d c8       	mov	r8,-36
800043be:	b2 88       	st.b	r9[0x0],r8
800043c0:	c0 28       	rjmp	800043c4 <set_mav_mode+0x188>
				break;
				case MAV_MODE_MANUAL_ARMED:
					if (get_thrust_from_remote()<-0.95)
					{
						*board_mav_state = MAV_STATE_ACTIVE;
						*board_mav_mode = MAV_MODE_MANUAL_ARMED;
800043c2:	d7 03       	nop
				break;
			}
		}
		
	}
}
800043c4:	2f ad       	sub	sp,-24
800043c6:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800043ca:	00 00       	add	r0,r0
800043cc:	80 00       	ld.sh	r0,r0[0x0]
800043ce:	40 ca       	lddsp	r10,sp[0x30]
800043d0:	53 65       	stdsp	sp[0xd8],r5
800043d2:	6e 64       	ld.w	r4,r7[0x18]
800043d4:	69 6e       	ld.w	lr,r4[0x58]
800043d6:	67 20       	ld.w	r0,r3[0x48]
800043d8:	77 61       	ld.w	r1,r11[0x58]
800043da:	79 70       	ld.w	r0,r12[0x5c]
800043dc:	6f 69       	ld.w	r9,r7[0x58]
800043de:	6e 74       	ld.w	r4,r7[0x1c]
800043e0:	20 74       	sub	r4,7
800043e2:	69 6d       	ld.w	sp,r4[0x58]
800043e4:	65 6f       	ld.w	pc,r2[0x58]
800043e6:	75 74       	ld.w	r4,r10[0x5c]
800043e8:	00 00       	add	r0,r0
800043ea:	00 00       	add	r0,r0
800043ec:	52 65       	stdsp	sp[0x98],r5
800043ee:	63 65       	ld.w	r5,r1[0x58]
800043f0:	69 76       	ld.w	r6,r4[0x5c]
800043f2:	69 6e       	ld.w	lr,r4[0x58]
800043f4:	67 20       	ld.w	r0,r3[0x48]
800043f6:	77 61       	ld.w	r1,r11[0x58]
800043f8:	79 70       	ld.w	r0,r12[0x5c]
800043fa:	6f 69       	ld.w	r9,r7[0x58]
800043fc:	6e 74       	ld.w	r4,r7[0x1c]
800043fe:	20 74       	sub	r4,7
80004400:	69 6d       	ld.w	sp,r4[0x58]
80004402:	65 6f       	ld.w	pc,r2[0x58]
80004404:	75 74       	ld.w	r4,r10[0x5c]
	...

80004408 <control_time_out_waypoint_msg>:

void control_time_out_waypoint_msg(uint16_t* num_of_waypoint, bool* waypoint_receiving, bool* waypoint_sending)
{
80004408:	eb cd 40 c0 	pushm	r6-r7,lr
8000440c:	1a 97       	mov	r7,sp
8000440e:	20 4d       	sub	sp,16
80004410:	4a 76       	lddpc	r6,800044ac <control_time_out_waypoint_msg+0xa4>
80004412:	1e 26       	rsub	r6,pc
80004414:	ef 4c ff f8 	st.w	r7[-8],r12
80004418:	ef 4b ff f4 	st.w	r7[-12],r11
8000441c:	ef 4a ff f0 	st.w	r7[-16],r10
	if (*waypoint_sending || *waypoint_receiving)
80004420:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004424:	11 88       	ld.ub	r8,r8[0x0]
80004426:	58 08       	cp.w	r8,0
80004428:	c0 61       	brne	80004434 <control_time_out_waypoint_msg+0x2c>
8000442a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000442e:	11 88       	ld.ub	r8,r8[0x0]
80004430:	58 08       	cp.w	r8,0
80004432:	c3 90       	breq	800044a4 <control_time_out_waypoint_msg+0x9c>
	{
		uint32_t tnow = get_millis();
80004434:	f0 16 00 0f 	mcall	r6[60]
80004438:	18 98       	mov	r8,r12
8000443a:	ef 48 ff fc 	st.w	r7[-4],r8
		
		if ((tnow - start_timeout) > timeout_max_wp)
8000443e:	ec f8 01 60 	ld.w	r8,r6[352]
80004442:	70 08       	ld.w	r8,r8[0x0]
80004444:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004448:	10 19       	sub	r9,r8
8000444a:	ec f8 03 f0 	ld.w	r8,r6[1008]
8000444e:	70 08       	ld.w	r8,r8[0x0]
80004450:	10 39       	cp.w	r9,r8
80004452:	e0 88 00 29 	brls	800044a4 <control_time_out_waypoint_msg+0x9c>
		{
			start_timeout = tnow;
80004456:	ec f8 01 60 	ld.w	r8,r6[352]
8000445a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000445e:	91 09       	st.w	r8[0x0],r9
			if (*waypoint_sending)
80004460:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004464:	11 88       	ld.ub	r8,r8[0x0]
80004466:	58 08       	cp.w	r8,0
80004468:	c0 90       	breq	8000447a <control_time_out_waypoint_msg+0x72>
			{
				*waypoint_sending = false;
8000446a:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000446e:	30 08       	mov	r8,0
80004470:	b2 88       	st.b	r9[0x0],r8
				dbg_print("Sending waypoint timeout");
80004472:	fe cc 00 a2 	sub	r12,pc,162
80004476:	f0 16 00 01 	mcall	r6[4]
			}
			if (*waypoint_receiving)
8000447a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000447e:	11 88       	ld.ub	r8,r8[0x0]
80004480:	58 08       	cp.w	r8,0
80004482:	c1 10       	breq	800044a4 <control_time_out_waypoint_msg+0x9c>
			{
				*waypoint_receiving = false;
80004484:	ee f9 ff f4 	ld.w	r9,r7[-12]
80004488:	30 08       	mov	r8,0
8000448a:	b2 88       	st.b	r9[0x0],r8
				
				dbg_print("Receiving waypoint timeout");
8000448c:	fe cc 00 a0 	sub	r12,pc,160
80004490:	f0 16 00 01 	mcall	r6[4]
				*num_of_waypoint = 0;
80004494:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004498:	30 08       	mov	r8,0
8000449a:	b2 08       	st.h	r9[0x0],r8
				num_waypoint_onboard = 0;
8000449c:	ec f9 01 1c 	ld.w	r9,r6[284]
800044a0:	30 08       	mov	r8,0
800044a2:	b2 08       	st.h	r9[0x0],r8
				
			}
		}
	}
}
800044a4:	2f cd       	sub	sp,-16
800044a6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800044aa:	00 00       	add	r0,r0
800044ac:	80 00       	ld.sh	r0,r0[0x0]
800044ae:	42 96       	lddsp	r6,sp[0xa4]
800044b0:	77 70       	ld.w	r0,r11[0x5c]
800044b2:	5f 67       	srmi	r7
800044b4:	6c 6f       	ld.w	pc,r6[0x18]
800044b6:	62 61       	ld.w	r1,r1[0x18]
800044b8:	6c 3a       	ld.w	r10,r6[0xc]
800044ba:	20 6c       	sub	r12,6
800044bc:	61 74       	ld.w	r4,r0[0x5c]
800044be:	20 28       	sub	r8,2
800044c0:	78 31       	ld.w	r1,r12[0xc]
800044c2:	65 37       	ld.w	r7,r2[0x4c]
800044c4:	29 3a       	sub	r10,-109
800044c6:	00 00       	add	r0,r0
800044c8:	20 6c       	sub	r12,6
800044ca:	6f 6e       	ld.w	lr,r7[0x58]
800044cc:	67 20       	ld.w	r0,r3[0x48]
800044ce:	28 78       	sub	r8,-121
800044d0:	31 65       	mov	r5,22
800044d2:	37 29       	mov	r9,114
800044d4:	3a 00       	mov	r0,-96
800044d6:	00 00       	add	r0,r0
800044d8:	20 61       	sub	r1,6
800044da:	6c 74       	ld.w	r4,r6[0x1c]
800044dc:	20 28       	sub	r8,2
800044de:	78 31       	ld.w	r1,r12[0xc]
800044e0:	30 30       	mov	r0,3
800044e2:	30 29       	mov	r9,2
800044e4:	3a 00       	mov	r0,-96
800044e6:	00 00       	add	r0,r0
800044e8:	20 77       	sub	r7,7
800044ea:	70 5f       	ld.w	pc,r8[0x14]
800044ec:	63 6f       	ld.w	pc,r1[0x58]
800044ee:	6f 72       	ld.w	r2,r7[0x5c]
800044f0:	3a 20       	mov	r0,-94
800044f2:	78 20       	ld.w	r0,r12[0x8]
800044f4:	28 78       	sub	r8,-121
800044f6:	31 30       	mov	r0,19
800044f8:	30 29       	mov	r9,2
800044fa:	3a 00       	mov	r0,-96
800044fc:	2c 20       	sub	r0,-62
800044fe:	79 20       	ld.w	r0,r12[0x48]
80004500:	28 78       	sub	r8,-121
80004502:	31 30       	mov	r0,19
80004504:	30 29       	mov	r9,2
80004506:	3a 00       	mov	r0,-96
80004508:	2c 20       	sub	r0,-62
8000450a:	7a 20       	ld.w	r0,sp[0x8]
8000450c:	28 78       	sub	r8,-121
8000450e:	31 30       	mov	r0,19
80004510:	30 29       	mov	r9,2
80004512:	3a 00       	mov	r0,-96
80004514:	20 6c       	sub	r12,6
80004516:	6f 63       	ld.w	r3,r7[0x58]
80004518:	61 6c       	ld.w	r12,r0[0x58]
8000451a:	4f 72       	lddpc	r2,800046f4 <set_waypoint_from_frame+0x192>
8000451c:	69 67       	ld.w	r7,r4[0x58]
8000451e:	69 6e       	ld.w	lr,r4[0x58]
80004520:	20 6c       	sub	r12,6
80004522:	61 74       	ld.w	r4,r0[0x5c]
80004524:	20 28       	sub	r8,2
80004526:	78 31       	ld.w	r1,r12[0xc]
80004528:	65 37       	ld.w	r7,r2[0x4c]
8000452a:	29 3a       	sub	r10,-109
8000452c:	00 00       	add	r0,r0
8000452e:	00 00       	add	r0,r0
80004530:	4c 6f       	lddpc	pc,80004648 <set_waypoint_from_frame+0xe6>
80004532:	63 61       	ld.w	r1,r1[0x58]
80004534:	6c 4f       	ld.w	pc,r6[0x10]
80004536:	72 69       	ld.w	r9,r9[0x18]
80004538:	67 69       	ld.w	r9,r3[0x58]
8000453a:	6e 3a       	ld.w	r10,r7[0xc]
8000453c:	20 6c       	sub	r12,6
8000453e:	61 74       	ld.w	r4,r0[0x5c]
80004540:	20 28       	sub	r8,2
80004542:	78 31       	ld.w	r1,r12[0xc]
80004544:	65 37       	ld.w	r7,r2[0x4c]
80004546:	29 3a       	sub	r10,-109
80004548:	00 00       	add	r0,r0
8000454a:	00 00       	add	r0,r0
8000454c:	20 67       	sub	r7,6
8000454e:	6c 6f       	ld.w	pc,r6[0x18]
80004550:	62 61       	ld.w	r1,r1[0x18]
80004552:	6c 20       	ld.w	r0,r6[0x8]
80004554:	61 6c       	ld.w	r12,r0[0x58]
80004556:	74 20       	ld.w	r0,r10[0x8]
80004558:	28 78       	sub	r8,-121
8000455a:	31 30       	mov	r0,19
8000455c:	30 30       	mov	r0,3
8000455e:	29 3a       	sub	r10,-109
	...

80004562 <set_waypoint_from_frame>:

local_coordinates_t set_waypoint_from_frame(waypoint_struct current_wp, global_position_t origin)
{
80004562:	eb cd 40 e8 	pushm	r3,r5-r7,lr
80004566:	1a 97       	mov	r7,sp
80004568:	fa cd 00 a8 	sub	sp,sp,168
8000456c:	fe f6 05 f0 	ld.w	r6,pc[1520]
80004570:	1e 26       	rsub	r6,pc
80004572:	ee c5 ff ec 	sub	r5,r7,-20
80004576:	18 93       	mov	r3,r12
	global_position_t waypoint_global;
	local_coordinates_t waypoint_coor;
	
	float rel_pos[3];
	
	for (i=0;i<3;i++)
80004578:	30 08       	mov	r8,0
8000457a:	ef 68 ff ff 	st.b	r7[-1],r8
8000457e:	c0 e8       	rjmp	8000459a <set_waypoint_from_frame+0x38>
	{
		waypoint_coor.pos[i] = 0.0;
80004580:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80004584:	a3 68       	lsl	r8,0x2
80004586:	ee 08 00 08 	add	r8,r7,r8
8000458a:	30 09       	mov	r9,0
8000458c:	f1 49 ff b0 	st.w	r8[-80],r9
	global_position_t waypoint_global;
	local_coordinates_t waypoint_coor;
	
	float rel_pos[3];
	
	for (i=0;i<3;i++)
80004590:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80004594:	2f f8       	sub	r8,-1
80004596:	ef 68 ff ff 	st.b	r7[-1],r8
8000459a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000459e:	30 28       	mov	r8,2
800045a0:	f0 09 18 00 	cp.b	r9,r8
800045a4:	fe 98 ff ee 	brls	80004580 <set_waypoint_from_frame+0x1e>
	{
		waypoint_coor.pos[i] = 0.0;
	}

	switch(current_wp.frame)
800045a8:	0b 88       	ld.ub	r8,r5[0x0]
800045aa:	58 18       	cp.w	r8,1
800045ac:	e0 80 01 31 	breq	8000480e <set_waypoint_from_frame+0x2ac>
800045b0:	e0 89 00 06 	brgt	800045bc <set_waypoint_from_frame+0x5a>
800045b4:	58 08       	cp.w	r8,0
800045b6:	c0 b0       	breq	800045cc <set_waypoint_from_frame+0x6a>
800045b8:	e0 8f 02 a7 	bral	80004b06 <set_waypoint_from_frame+0x5a4>
800045bc:	58 28       	cp.w	r8,2
800045be:	e0 80 02 a3 	breq	80004b04 <set_waypoint_from_frame+0x5a2>
800045c2:	58 38       	cp.w	r8,3
800045c4:	e0 80 01 a7 	breq	80004912 <set_waypoint_from_frame+0x3b0>
800045c8:	e0 8f 02 9f 	bral	80004b06 <set_waypoint_from_frame+0x5a4>
	{
		case MAV_FRAME_GLOBAL:
			waypoint_global.latitude = current_wp.x;
800045cc:	ea e8 00 18 	ld.d	r8,r5[24]
800045d0:	ee e9 ff e8 	st.d	r7[-24],r8
			waypoint_global.longitude = current_wp.y;
800045d4:	ea e8 00 20 	ld.d	r8,r5[32]
800045d8:	ee e9 ff e0 	st.d	r7[-32],r8
			waypoint_global.altitude = current_wp.z;
800045dc:	ea e8 00 28 	ld.d	r8,r5[40]
800045e0:	10 9a       	mov	r10,r8
800045e2:	12 9b       	mov	r11,r9
800045e4:	f0 16 00 09 	mcall	r6[36]
800045e8:	18 98       	mov	r8,r12
800045ea:	ef 48 ff f0 	st.w	r7[-16],r8
			waypoint_coor = global_to_local_position(waypoint_global,origin);
800045ee:	ee cc 00 a8 	sub	r12,r7,168
800045f2:	20 7d       	sub	sp,28
800045f4:	1a 98       	mov	r8,sp
800045f6:	10 9a       	mov	r10,r8
800045f8:	ea cb ff d0 	sub	r11,r5,-48
800045fc:	f4 c8 00 00 	sub	r8,r10,0
80004600:	f6 c9 00 00 	sub	r9,r11,0
80004604:	72 0e       	ld.w	lr,r9[0x0]
80004606:	91 0e       	st.w	r8[0x0],lr
80004608:	72 1e       	ld.w	lr,r9[0x4]
8000460a:	91 1e       	st.w	r8[0x4],lr
8000460c:	72 2e       	ld.w	lr,r9[0x8]
8000460e:	91 2e       	st.w	r8[0x8],lr
80004610:	72 39       	ld.w	r9,r9[0xc]
80004612:	91 39       	st.w	r8[0xc],r9
80004614:	f6 e8 00 10 	ld.d	r8,r11[16]
80004618:	f4 e9 00 10 	st.d	r10[16],r8
8000461c:	76 68       	ld.w	r8,r11[0x18]
8000461e:	95 68       	st.w	r10[0x18],r8
80004620:	20 7d       	sub	sp,28
80004622:	1a 98       	mov	r8,sp
80004624:	10 9a       	mov	r10,r8
80004626:	ee cb 00 20 	sub	r11,r7,32
8000462a:	f4 c8 00 00 	sub	r8,r10,0
8000462e:	f6 c9 00 00 	sub	r9,r11,0
80004632:	72 0e       	ld.w	lr,r9[0x0]
80004634:	91 0e       	st.w	r8[0x0],lr
80004636:	72 1e       	ld.w	lr,r9[0x4]
80004638:	91 1e       	st.w	r8[0x4],lr
8000463a:	72 2e       	ld.w	lr,r9[0x8]
8000463c:	91 2e       	st.w	r8[0x8],lr
8000463e:	72 39       	ld.w	r9,r9[0xc]
80004640:	91 39       	st.w	r8[0xc],r9
80004642:	f6 e8 00 10 	ld.d	r8,r11[16]
80004646:	f4 e9 00 10 	st.d	r10[16],r8
8000464a:	76 68       	ld.w	r8,r11[0x18]
8000464c:	95 68       	st.w	r10[0x18],r8
8000464e:	f0 16 00 73 	mcall	r6[460]
80004652:	2f 2d       	sub	sp,-56
80004654:	ee cb 00 50 	sub	r11,r7,80
80004658:	ee ca 00 a8 	sub	r10,r7,168
8000465c:	f6 c8 00 00 	sub	r8,r11,0
80004660:	f4 c9 00 00 	sub	r9,r10,0
80004664:	72 0c       	ld.w	r12,r9[0x0]
80004666:	91 0c       	st.w	r8[0x0],r12
80004668:	72 1c       	ld.w	r12,r9[0x4]
8000466a:	91 1c       	st.w	r8[0x4],r12
8000466c:	72 2c       	ld.w	r12,r9[0x8]
8000466e:	91 2c       	st.w	r8[0x8],r12
80004670:	72 39       	ld.w	r9,r9[0xc]
80004672:	91 39       	st.w	r8[0xc],r9
80004674:	f6 c8 ff f0 	sub	r8,r11,-16
80004678:	f4 c9 ff f0 	sub	r9,r10,-16
8000467c:	72 0c       	ld.w	r12,r9[0x0]
8000467e:	91 0c       	st.w	r8[0x0],r12
80004680:	72 1c       	ld.w	r12,r9[0x4]
80004682:	91 1c       	st.w	r8[0x4],r12
80004684:	72 2c       	ld.w	r12,r9[0x8]
80004686:	91 2c       	st.w	r8[0x8],r12
80004688:	72 39       	ld.w	r9,r9[0xc]
8000468a:	91 39       	st.w	r8[0xc],r9
8000468c:	f6 c8 ff e0 	sub	r8,r11,-32
80004690:	f4 c9 ff e0 	sub	r9,r10,-32
80004694:	72 0a       	ld.w	r10,r9[0x0]
80004696:	91 0a       	st.w	r8[0x0],r10
80004698:	72 1a       	ld.w	r10,r9[0x4]
8000469a:	91 1a       	st.w	r8[0x4],r10
8000469c:	72 2a       	ld.w	r10,r9[0x8]
8000469e:	91 2a       	st.w	r8[0x8],r10
800046a0:	72 39       	ld.w	r9,r9[0xc]
800046a2:	91 39       	st.w	r8[0xc],r9
			
			dbg_print("wp_global: lat (x1e7):");
800046a4:	fe cc 01 f4 	sub	r12,pc,500
800046a8:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(waypoint_global.latitude*10000000,10);
800046ac:	ee ea ff e8 	ld.d	r10,r7[-24]
800046b0:	30 08       	mov	r8,0
800046b2:	e0 69 12 d0 	mov	r9,4816
800046b6:	ea 19 41 63 	orh	r9,0x4163
800046ba:	f0 16 00 03 	mcall	r6[12]
800046be:	14 98       	mov	r8,r10
800046c0:	16 99       	mov	r9,r11
800046c2:	10 9a       	mov	r10,r8
800046c4:	12 9b       	mov	r11,r9
800046c6:	f0 16 00 12 	mcall	r6[72]
800046ca:	18 98       	mov	r8,r12
800046cc:	30 ab       	mov	r11,10
800046ce:	10 9c       	mov	r12,r8
800046d0:	f0 16 00 04 	mcall	r6[16]
			dbg_print(" long (x1e7):");
800046d4:	fe cc 02 0c 	sub	r12,pc,524
800046d8:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(waypoint_global.longitude*10000000,10);
800046dc:	ee ea ff e0 	ld.d	r10,r7[-32]
800046e0:	30 08       	mov	r8,0
800046e2:	e0 69 12 d0 	mov	r9,4816
800046e6:	ea 19 41 63 	orh	r9,0x4163
800046ea:	f0 16 00 03 	mcall	r6[12]
800046ee:	14 98       	mov	r8,r10
800046f0:	16 99       	mov	r9,r11
800046f2:	10 9a       	mov	r10,r8
800046f4:	12 9b       	mov	r11,r9
800046f6:	f0 16 00 12 	mcall	r6[72]
800046fa:	18 98       	mov	r8,r12
800046fc:	30 ab       	mov	r11,10
800046fe:	10 9c       	mov	r12,r8
80004700:	f0 16 00 04 	mcall	r6[16]
			dbg_print(" alt (x1000):");
80004704:	fe cc 02 2c 	sub	r12,pc,556
80004708:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(waypoint_global.altitude*1000,10);
8000470c:	ee f9 ff f0 	ld.w	r9,r7[-16]
80004710:	fc 18 44 7a 	movh	r8,0x447a
80004714:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80004718:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000471c:	30 ab       	mov	r11,10
8000471e:	10 9c       	mov	r12,r8
80004720:	f0 16 00 04 	mcall	r6[16]
			dbg_print(" wp_coor: x (x100):");
80004724:	fe cc 02 3c 	sub	r12,pc,572
80004728:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(waypoint_coor.pos[X]*100,10);
8000472c:	ee f9 ff b0 	ld.w	r9,r7[-80]
80004730:	fc 18 42 c8 	movh	r8,0x42c8
80004734:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80004738:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000473c:	30 ab       	mov	r11,10
8000473e:	10 9c       	mov	r12,r8
80004740:	f0 16 00 04 	mcall	r6[16]
			dbg_print(", y (x100):");
80004744:	fe cc 02 48 	sub	r12,pc,584
80004748:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(waypoint_coor.pos[Y]*100,10);
8000474c:	ee f9 ff b4 	ld.w	r9,r7[-76]
80004750:	fc 18 42 c8 	movh	r8,0x42c8
80004754:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80004758:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000475c:	30 ab       	mov	r11,10
8000475e:	10 9c       	mov	r12,r8
80004760:	f0 16 00 04 	mcall	r6[16]
			dbg_print(", z (x100):");
80004764:	fe cc 02 5c 	sub	r12,pc,604
80004768:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(waypoint_coor.pos[Z]*100,10);
8000476c:	ee f9 ff b8 	ld.w	r9,r7[-72]
80004770:	fc 18 42 c8 	movh	r8,0x42c8
80004774:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80004778:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000477c:	30 ab       	mov	r11,10
8000477e:	10 9c       	mov	r12,r8
80004780:	f0 16 00 04 	mcall	r6[16]
			dbg_print(" localOrigin lat (x1e7):");
80004784:	fe cc 02 70 	sub	r12,pc,624
80004788:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(origin.latitude*10000000,10);
8000478c:	ea ea 00 38 	ld.d	r10,r5[56]
80004790:	30 08       	mov	r8,0
80004792:	e0 69 12 d0 	mov	r9,4816
80004796:	ea 19 41 63 	orh	r9,0x4163
8000479a:	f0 16 00 03 	mcall	r6[12]
8000479e:	14 98       	mov	r8,r10
800047a0:	16 99       	mov	r9,r11
800047a2:	10 9a       	mov	r10,r8
800047a4:	12 9b       	mov	r11,r9
800047a6:	f0 16 00 12 	mcall	r6[72]
800047aa:	18 98       	mov	r8,r12
800047ac:	30 ab       	mov	r11,10
800047ae:	10 9c       	mov	r12,r8
800047b0:	f0 16 00 04 	mcall	r6[16]
			dbg_print(" long (x1e7):");
800047b4:	fe cc 02 ec 	sub	r12,pc,748
800047b8:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(origin.longitude*10000000,10);
800047bc:	ea ea 00 30 	ld.d	r10,r5[48]
800047c0:	30 08       	mov	r8,0
800047c2:	e0 69 12 d0 	mov	r9,4816
800047c6:	ea 19 41 63 	orh	r9,0x4163
800047ca:	f0 16 00 03 	mcall	r6[12]
800047ce:	14 98       	mov	r8,r10
800047d0:	16 99       	mov	r9,r11
800047d2:	10 9a       	mov	r10,r8
800047d4:	12 9b       	mov	r11,r9
800047d6:	f0 16 00 12 	mcall	r6[72]
800047da:	18 98       	mov	r8,r12
800047dc:	30 ab       	mov	r11,10
800047de:	10 9c       	mov	r12,r8
800047e0:	f0 16 00 04 	mcall	r6[16]
			dbg_print(" alt (x1000):");
800047e4:	fe cc 03 0c 	sub	r12,pc,780
800047e8:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(origin.altitude*1000,10);
800047ec:	6b 09       	ld.w	r9,r5[0x40]
800047ee:	fc 18 44 7a 	movh	r8,0x447a
800047f2:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
800047f6:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
800047fa:	30 ab       	mov	r11,10
800047fc:	10 9c       	mov	r12,r8
800047fe:	f0 16 00 04 	mcall	r6[16]
			dbg_print("\n");
80004802:	fe cc 14 5a 	sub	r12,pc,5210
80004806:	f0 16 00 01 	mcall	r6[4]
		
		break;
8000480a:	e0 8f 01 7e 	bral	80004b06 <set_waypoint_from_frame+0x5a4>
		case MAV_FRAME_LOCAL_NED:
			waypoint_coor.pos[X] = current_wp.x;
8000480e:	ea e8 00 18 	ld.d	r8,r5[24]
80004812:	10 9a       	mov	r10,r8
80004814:	12 9b       	mov	r11,r9
80004816:	f0 16 00 09 	mcall	r6[36]
8000481a:	18 98       	mov	r8,r12
8000481c:	ef 48 ff b0 	st.w	r7[-80],r8
			waypoint_coor.pos[Y] = current_wp.y;
80004820:	ea e8 00 20 	ld.d	r8,r5[32]
80004824:	10 9a       	mov	r10,r8
80004826:	12 9b       	mov	r11,r9
80004828:	f0 16 00 09 	mcall	r6[36]
8000482c:	18 98       	mov	r8,r12
8000482e:	ef 48 ff b4 	st.w	r7[-76],r8
			waypoint_coor.pos[Z] = current_wp.z;
80004832:	ea e8 00 28 	ld.d	r8,r5[40]
80004836:	10 9a       	mov	r10,r8
80004838:	12 9b       	mov	r11,r9
8000483a:	f0 16 00 09 	mcall	r6[36]
8000483e:	18 98       	mov	r8,r12
80004840:	ef 48 ff b8 	st.w	r7[-72],r8
			waypoint_coor.heading= deg_to_rad(current_wp.param4);
80004844:	6a 58       	ld.w	r8,r5[0x14]
80004846:	10 9c       	mov	r12,r8
80004848:	f0 16 00 02 	mcall	r6[8]
8000484c:	e0 68 2d 18 	mov	r8,11544
80004850:	ea 18 54 44 	orh	r8,0x5444
80004854:	e0 69 21 fb 	mov	r9,8699
80004858:	ea 19 40 09 	orh	r9,0x4009
8000485c:	f0 16 00 03 	mcall	r6[12]
80004860:	14 98       	mov	r8,r10
80004862:	16 99       	mov	r9,r11
80004864:	10 9a       	mov	r10,r8
80004866:	12 9b       	mov	r11,r9
80004868:	30 08       	mov	r8,0
8000486a:	e0 69 80 00 	mov	r9,32768
8000486e:	ea 19 40 66 	orh	r9,0x4066
80004872:	f0 16 00 0c 	mcall	r6[48]
80004876:	14 98       	mov	r8,r10
80004878:	16 99       	mov	r9,r11
8000487a:	10 9a       	mov	r10,r8
8000487c:	12 9b       	mov	r11,r9
8000487e:	f0 16 00 09 	mcall	r6[36]
80004882:	18 98       	mov	r8,r12
80004884:	ef 48 ff bc 	st.w	r7[-68],r8
			waypoint_coor.origin = local_to_global_position(waypoint_coor);
80004888:	ee cc 00 a8 	sub	r12,r7,168
8000488c:	20 cd       	sub	sp,48
8000488e:	1a 98       	mov	r8,sp
80004890:	10 9b       	mov	r11,r8
80004892:	ee ca 00 50 	sub	r10,r7,80
80004896:	f6 c8 00 00 	sub	r8,r11,0
8000489a:	f4 c9 00 00 	sub	r9,r10,0
8000489e:	72 0e       	ld.w	lr,r9[0x0]
800048a0:	91 0e       	st.w	r8[0x0],lr
800048a2:	72 1e       	ld.w	lr,r9[0x4]
800048a4:	91 1e       	st.w	r8[0x4],lr
800048a6:	72 2e       	ld.w	lr,r9[0x8]
800048a8:	91 2e       	st.w	r8[0x8],lr
800048aa:	72 39       	ld.w	r9,r9[0xc]
800048ac:	91 39       	st.w	r8[0xc],r9
800048ae:	f6 c8 ff f0 	sub	r8,r11,-16
800048b2:	f4 c9 ff f0 	sub	r9,r10,-16
800048b6:	72 0e       	ld.w	lr,r9[0x0]
800048b8:	91 0e       	st.w	r8[0x0],lr
800048ba:	72 1e       	ld.w	lr,r9[0x4]
800048bc:	91 1e       	st.w	r8[0x4],lr
800048be:	72 2e       	ld.w	lr,r9[0x8]
800048c0:	91 2e       	st.w	r8[0x8],lr
800048c2:	72 39       	ld.w	r9,r9[0xc]
800048c4:	91 39       	st.w	r8[0xc],r9
800048c6:	f6 c8 ff e0 	sub	r8,r11,-32
800048ca:	f4 c9 ff e0 	sub	r9,r10,-32
800048ce:	72 0a       	ld.w	r10,r9[0x0]
800048d0:	91 0a       	st.w	r8[0x0],r10
800048d2:	72 1a       	ld.w	r10,r9[0x4]
800048d4:	91 1a       	st.w	r8[0x4],r10
800048d6:	72 2a       	ld.w	r10,r9[0x8]
800048d8:	91 2a       	st.w	r8[0x8],r10
800048da:	72 39       	ld.w	r9,r9[0xc]
800048dc:	91 39       	st.w	r8[0xc],r9
800048de:	f0 16 00 7f 	mcall	r6[508]
800048e2:	2f 4d       	sub	sp,-48
800048e4:	ee ca 00 40 	sub	r10,r7,64
800048e8:	ee cb 00 a8 	sub	r11,r7,168
800048ec:	f4 c8 00 00 	sub	r8,r10,0
800048f0:	f6 c9 00 00 	sub	r9,r11,0
800048f4:	72 0c       	ld.w	r12,r9[0x0]
800048f6:	91 0c       	st.w	r8[0x0],r12
800048f8:	72 1c       	ld.w	r12,r9[0x4]
800048fa:	91 1c       	st.w	r8[0x4],r12
800048fc:	72 2c       	ld.w	r12,r9[0x8]
800048fe:	91 2c       	st.w	r8[0x8],r12
80004900:	72 39       	ld.w	r9,r9[0xc]
80004902:	91 39       	st.w	r8[0xc],r9
80004904:	f6 e8 00 10 	ld.d	r8,r11[16]
80004908:	f4 e9 00 10 	st.d	r10[16],r8
8000490c:	76 68       	ld.w	r8,r11[0x18]
8000490e:	95 68       	st.w	r10[0x18],r8
		break;
80004910:	cf b8       	rjmp	80004b06 <set_waypoint_from_frame+0x5a4>
		case MAV_FRAME_MISSION:
			//mavlink_msg_mission_ack_send(MAVLINK_COMM_0,rec->msg.sysid,rec->msg.compid,MAV_RESULT_UNSUPPORTED);
		break;
		case MAV_FRAME_GLOBAL_RELATIVE_ALT:
			waypoint_global.latitude = current_wp.x;
80004912:	ea e8 00 18 	ld.d	r8,r5[24]
80004916:	ee e9 ff e8 	st.d	r7[-24],r8
			waypoint_global.longitude = current_wp.y;
8000491a:	ea e8 00 20 	ld.d	r8,r5[32]
8000491e:	ee e9 ff e0 	st.d	r7[-32],r8
			waypoint_global.altitude = current_wp.z;
80004922:	ea e8 00 28 	ld.d	r8,r5[40]
80004926:	10 9a       	mov	r10,r8
80004928:	12 9b       	mov	r11,r9
8000492a:	f0 16 00 09 	mcall	r6[36]
8000492e:	18 98       	mov	r8,r12
80004930:	ef 48 ff f0 	st.w	r7[-16],r8
		
			global_position_t origin_relative_alt = origin;
80004934:	ee ca 00 78 	sub	r10,r7,120
80004938:	ea cb ff d0 	sub	r11,r5,-48
8000493c:	f4 c8 00 00 	sub	r8,r10,0
80004940:	f6 c9 00 00 	sub	r9,r11,0
80004944:	72 0c       	ld.w	r12,r9[0x0]
80004946:	91 0c       	st.w	r8[0x0],r12
80004948:	72 1c       	ld.w	r12,r9[0x4]
8000494a:	91 1c       	st.w	r8[0x4],r12
8000494c:	72 2c       	ld.w	r12,r9[0x8]
8000494e:	91 2c       	st.w	r8[0x8],r12
80004950:	72 39       	ld.w	r9,r9[0xc]
80004952:	91 39       	st.w	r8[0xc],r9
80004954:	f6 e8 00 10 	ld.d	r8,r11[16]
80004958:	f4 e9 00 10 	st.d	r10[16],r8
8000495c:	76 68       	ld.w	r8,r11[0x18]
8000495e:	95 68       	st.w	r10[0x18],r8
			origin_relative_alt.altitude = 0.0;
80004960:	30 08       	mov	r8,0
80004962:	ef 48 ff 98 	st.w	r7[-104],r8
			waypoint_coor = global_to_local_position(waypoint_global,origin_relative_alt);
80004966:	ee cc 00 a8 	sub	r12,r7,168
8000496a:	20 7d       	sub	sp,28
8000496c:	1a 98       	mov	r8,sp
8000496e:	10 9a       	mov	r10,r8
80004970:	ee cb 00 78 	sub	r11,r7,120
80004974:	f4 c8 00 00 	sub	r8,r10,0
80004978:	f6 c9 00 00 	sub	r9,r11,0
8000497c:	72 0e       	ld.w	lr,r9[0x0]
8000497e:	91 0e       	st.w	r8[0x0],lr
80004980:	72 1e       	ld.w	lr,r9[0x4]
80004982:	91 1e       	st.w	r8[0x4],lr
80004984:	72 2e       	ld.w	lr,r9[0x8]
80004986:	91 2e       	st.w	r8[0x8],lr
80004988:	72 39       	ld.w	r9,r9[0xc]
8000498a:	91 39       	st.w	r8[0xc],r9
8000498c:	f6 e8 00 10 	ld.d	r8,r11[16]
80004990:	f4 e9 00 10 	st.d	r10[16],r8
80004994:	76 68       	ld.w	r8,r11[0x18]
80004996:	95 68       	st.w	r10[0x18],r8
80004998:	20 7d       	sub	sp,28
8000499a:	1a 98       	mov	r8,sp
8000499c:	10 9a       	mov	r10,r8
8000499e:	ee cb 00 20 	sub	r11,r7,32
800049a2:	f4 c8 00 00 	sub	r8,r10,0
800049a6:	f6 c9 00 00 	sub	r9,r11,0
800049aa:	72 0e       	ld.w	lr,r9[0x0]
800049ac:	91 0e       	st.w	r8[0x0],lr
800049ae:	72 1e       	ld.w	lr,r9[0x4]
800049b0:	91 1e       	st.w	r8[0x4],lr
800049b2:	72 2e       	ld.w	lr,r9[0x8]
800049b4:	91 2e       	st.w	r8[0x8],lr
800049b6:	72 39       	ld.w	r9,r9[0xc]
800049b8:	91 39       	st.w	r8[0xc],r9
800049ba:	f6 e8 00 10 	ld.d	r8,r11[16]
800049be:	f4 e9 00 10 	st.d	r10[16],r8
800049c2:	76 68       	ld.w	r8,r11[0x18]
800049c4:	95 68       	st.w	r10[0x18],r8
800049c6:	f0 16 00 73 	mcall	r6[460]
800049ca:	2f 2d       	sub	sp,-56
800049cc:	ee cb 00 50 	sub	r11,r7,80
800049d0:	ee ca 00 a8 	sub	r10,r7,168
800049d4:	f6 c8 00 00 	sub	r8,r11,0
800049d8:	f4 c9 00 00 	sub	r9,r10,0
800049dc:	72 0c       	ld.w	r12,r9[0x0]
800049de:	91 0c       	st.w	r8[0x0],r12
800049e0:	72 1c       	ld.w	r12,r9[0x4]
800049e2:	91 1c       	st.w	r8[0x4],r12
800049e4:	72 2c       	ld.w	r12,r9[0x8]
800049e6:	91 2c       	st.w	r8[0x8],r12
800049e8:	72 39       	ld.w	r9,r9[0xc]
800049ea:	91 39       	st.w	r8[0xc],r9
800049ec:	f6 c8 ff f0 	sub	r8,r11,-16
800049f0:	f4 c9 ff f0 	sub	r9,r10,-16
800049f4:	72 0c       	ld.w	r12,r9[0x0]
800049f6:	91 0c       	st.w	r8[0x0],r12
800049f8:	72 1c       	ld.w	r12,r9[0x4]
800049fa:	91 1c       	st.w	r8[0x4],r12
800049fc:	72 2c       	ld.w	r12,r9[0x8]
800049fe:	91 2c       	st.w	r8[0x8],r12
80004a00:	72 39       	ld.w	r9,r9[0xc]
80004a02:	91 39       	st.w	r8[0xc],r9
80004a04:	f6 c8 ff e0 	sub	r8,r11,-32
80004a08:	f4 c9 ff e0 	sub	r9,r10,-32
80004a0c:	72 0a       	ld.w	r10,r9[0x0]
80004a0e:	91 0a       	st.w	r8[0x0],r10
80004a10:	72 1a       	ld.w	r10,r9[0x4]
80004a12:	91 1a       	st.w	r8[0x4],r10
80004a14:	72 2a       	ld.w	r10,r9[0x8]
80004a16:	91 2a       	st.w	r8[0x8],r10
80004a18:	72 39       	ld.w	r9,r9[0xc]
80004a1a:	91 39       	st.w	r8[0xc],r9
		
			dbg_print("LocalOrigin: lat (x1e7):");
80004a1c:	fe cc 04 ec 	sub	r12,pc,1260
80004a20:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(origin_relative_alt.latitude * 10000000,10);
80004a24:	ee ea ff 90 	ld.d	r10,r7[-112]
80004a28:	30 08       	mov	r8,0
80004a2a:	e0 69 12 d0 	mov	r9,4816
80004a2e:	ea 19 41 63 	orh	r9,0x4163
80004a32:	f0 16 00 03 	mcall	r6[12]
80004a36:	14 98       	mov	r8,r10
80004a38:	16 99       	mov	r9,r11
80004a3a:	10 9a       	mov	r10,r8
80004a3c:	12 9b       	mov	r11,r9
80004a3e:	f0 16 00 12 	mcall	r6[72]
80004a42:	18 98       	mov	r8,r12
80004a44:	30 ab       	mov	r11,10
80004a46:	10 9c       	mov	r12,r8
80004a48:	f0 16 00 04 	mcall	r6[16]
			dbg_print(" long (x1e7):");
80004a4c:	fe cc 05 84 	sub	r12,pc,1412
80004a50:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(origin_relative_alt.longitude * 10000000,10);
80004a54:	ee ea ff 88 	ld.d	r10,r7[-120]
80004a58:	30 08       	mov	r8,0
80004a5a:	e0 69 12 d0 	mov	r9,4816
80004a5e:	ea 19 41 63 	orh	r9,0x4163
80004a62:	f0 16 00 03 	mcall	r6[12]
80004a66:	14 98       	mov	r8,r10
80004a68:	16 99       	mov	r9,r11
80004a6a:	10 9a       	mov	r10,r8
80004a6c:	12 9b       	mov	r11,r9
80004a6e:	f0 16 00 12 	mcall	r6[72]
80004a72:	18 98       	mov	r8,r12
80004a74:	30 ab       	mov	r11,10
80004a76:	10 9c       	mov	r12,r8
80004a78:	f0 16 00 04 	mcall	r6[16]
			dbg_print(" global alt (x1000):");
80004a7c:	fe cc 05 30 	sub	r12,pc,1328
80004a80:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(origin.altitude*1000,10);
80004a84:	6b 09       	ld.w	r9,r5[0x40]
80004a86:	fc 18 44 7a 	movh	r8,0x447a
80004a8a:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80004a8e:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80004a92:	30 ab       	mov	r11,10
80004a94:	10 9c       	mov	r12,r8
80004a96:	f0 16 00 04 	mcall	r6[16]
			dbg_print(" wp_coor: x (x100):");
80004a9a:	fe cc 05 b2 	sub	r12,pc,1458
80004a9e:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(waypoint_coor.pos[X]*100,10);
80004aa2:	ee f9 ff b0 	ld.w	r9,r7[-80]
80004aa6:	fc 18 42 c8 	movh	r8,0x42c8
80004aaa:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80004aae:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80004ab2:	30 ab       	mov	r11,10
80004ab4:	10 9c       	mov	r12,r8
80004ab6:	f0 16 00 04 	mcall	r6[16]
			dbg_print(", y (x100):");
80004aba:	fe cc 05 be 	sub	r12,pc,1470
80004abe:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(waypoint_coor.pos[Y]*100,10);
80004ac2:	ee f9 ff b4 	ld.w	r9,r7[-76]
80004ac6:	fc 18 42 c8 	movh	r8,0x42c8
80004aca:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80004ace:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80004ad2:	30 ab       	mov	r11,10
80004ad4:	10 9c       	mov	r12,r8
80004ad6:	f0 16 00 04 	mcall	r6[16]
			dbg_print(", z (x100):");
80004ada:	fe cc 05 d2 	sub	r12,pc,1490
80004ade:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(waypoint_coor.pos[Z]*100,10);
80004ae2:	ee f9 ff b8 	ld.w	r9,r7[-72]
80004ae6:	fc 18 42 c8 	movh	r8,0x42c8
80004aea:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80004aee:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80004af2:	30 ab       	mov	r11,10
80004af4:	10 9c       	mov	r12,r8
80004af6:	f0 16 00 04 	mcall	r6[16]
			dbg_print("\n");
80004afa:	fe cc 17 52 	sub	r12,pc,5970
80004afe:	f0 16 00 01 	mcall	r6[4]
80004b02:	c0 28       	rjmp	80004b06 <set_waypoint_from_frame+0x5a4>
			waypoint_coor.heading= deg_to_rad(current_wp.param4);
			waypoint_coor.origin = local_to_global_position(waypoint_coor);
		break;
		case MAV_FRAME_MISSION:
			//mavlink_msg_mission_ack_send(MAVLINK_COMM_0,rec->msg.sysid,rec->msg.compid,MAV_RESULT_UNSUPPORTED);
		break;
80004b04:	d7 03       	nop
		case MAV_FRAME_LOCAL_ENU:
			//mavlink_msg_mission_ack_send(MAVLINK_COMM_0,rec->msg.sysid,rec->msg.compid,MAV_RESULT_UNSUPPORTED);
		break;
	}
	
	return waypoint_coor;
80004b06:	06 9b       	mov	r11,r3
80004b08:	ee ca 00 50 	sub	r10,r7,80
80004b0c:	f6 c8 00 00 	sub	r8,r11,0
80004b10:	f4 c9 00 00 	sub	r9,r10,0
80004b14:	72 0c       	ld.w	r12,r9[0x0]
80004b16:	91 0c       	st.w	r8[0x0],r12
80004b18:	72 1c       	ld.w	r12,r9[0x4]
80004b1a:	91 1c       	st.w	r8[0x4],r12
80004b1c:	72 2c       	ld.w	r12,r9[0x8]
80004b1e:	91 2c       	st.w	r8[0x8],r12
80004b20:	72 39       	ld.w	r9,r9[0xc]
80004b22:	91 39       	st.w	r8[0xc],r9
80004b24:	f6 c8 ff f0 	sub	r8,r11,-16
80004b28:	f4 c9 ff f0 	sub	r9,r10,-16
80004b2c:	72 0c       	ld.w	r12,r9[0x0]
80004b2e:	91 0c       	st.w	r8[0x0],r12
80004b30:	72 1c       	ld.w	r12,r9[0x4]
80004b32:	91 1c       	st.w	r8[0x4],r12
80004b34:	72 2c       	ld.w	r12,r9[0x8]
80004b36:	91 2c       	st.w	r8[0x8],r12
80004b38:	72 39       	ld.w	r9,r9[0xc]
80004b3a:	91 39       	st.w	r8[0xc],r9
80004b3c:	f6 c8 ff e0 	sub	r8,r11,-32
80004b40:	f4 c9 ff e0 	sub	r9,r10,-32
80004b44:	72 0a       	ld.w	r10,r9[0x0]
80004b46:	91 0a       	st.w	r8[0x0],r10
80004b48:	72 1a       	ld.w	r10,r9[0x4]
80004b4a:	91 1a       	st.w	r8[0x4],r10
80004b4c:	72 2a       	ld.w	r10,r9[0x8]
80004b4e:	91 2a       	st.w	r8[0x8],r10
80004b50:	72 39       	ld.w	r9,r9[0xc]
80004b52:	91 39       	st.w	r8[0xc],r9
}
80004b54:	06 9c       	mov	r12,r3
80004b56:	2d 6d       	sub	sp,-168
80004b58:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
80004b5c:	80 00       	ld.sh	r0,r0[0x0]
80004b5e:	43 f4       	lddsp	r4,sp[0xfc]
80004b60:	50 6f       	stdsp	sp[0x18],pc
80004b62:	73 69       	ld.w	r9,r9[0x58]
80004b64:	74 69       	ld.w	r9,r10[0x18]
80004b66:	6f 6e       	ld.w	lr,r7[0x58]
80004b68:	20 68       	sub	r8,6
80004b6a:	6f 6c       	ld.w	r12,r7[0x58]
80004b6c:	64 20       	ld.w	r0,r2[0x8]
80004b6e:	61 74       	ld.w	r4,r0[0x5c]
80004b70:	3a 20       	mov	r0,-94
80004b72:	00 00       	add	r0,r0
80004b74:	29 0a       	sub	r10,-112
	...

80004b78 <wp_hold_init>:

void wp_hold_init()
{
80004b78:	eb cd 40 c0 	pushm	r6-r7,lr
80004b7c:	1a 97       	mov	r7,sp
80004b7e:	20 3d       	sub	sp,12
80004b80:	4d 86       	lddpc	r6,80004ce0 <wp_hold_init+0x168>
80004b82:	1e 26       	rsub	r6,pc
	if (centralData->waypoint_hold_init == 0)
80004b84:	ec f8 00 00 	ld.w	r8,r6[0]
80004b88:	70 08       	ld.w	r8,r8[0x0]
80004b8a:	f1 38 10 b7 	ld.ub	r8,r8[4279]
80004b8e:	ec 18 00 01 	eorl	r8,0x1
80004b92:	5c 58       	castu.b	r8
80004b94:	e0 80 00 a3 	breq	80004cda <wp_hold_init+0x162>
	{
		dbg_print("Position hold at: ");
80004b98:	fe cc 00 38 	sub	r12,pc,56
80004b9c:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(centralData->position_estimator.localPosition.pos[X],10);
80004ba0:	ec f8 00 00 	ld.w	r8,r6[0]
80004ba4:	70 08       	ld.w	r8,r8[0x0]
80004ba6:	f0 f8 0d 9c 	ld.w	r8,r8[3484]
80004baa:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80004bae:	30 ab       	mov	r11,10
80004bb0:	10 9c       	mov	r12,r8
80004bb2:	f0 16 00 04 	mcall	r6[16]
		dbg_print_num(centralData->position_estimator.localPosition.pos[Y],10);
80004bb6:	ec f8 00 00 	ld.w	r8,r6[0]
80004bba:	70 08       	ld.w	r8,r8[0x0]
80004bbc:	f0 f8 0d a0 	ld.w	r8,r8[3488]
80004bc0:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80004bc4:	30 ab       	mov	r11,10
80004bc6:	10 9c       	mov	r12,r8
80004bc8:	f0 16 00 04 	mcall	r6[16]
		dbg_print_num(centralData->position_estimator.localPosition.pos[Z],10);
80004bcc:	ec f8 00 00 	ld.w	r8,r6[0]
80004bd0:	70 08       	ld.w	r8,r8[0x0]
80004bd2:	f0 f8 0d a4 	ld.w	r8,r8[3492]
80004bd6:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80004bda:	30 ab       	mov	r11,10
80004bdc:	10 9c       	mov	r12,r8
80004bde:	f0 16 00 04 	mcall	r6[16]
		dbg_print_num((int)(centralData->position_estimator.localPosition.heading*180.0/3.14),10);
80004be2:	ec f8 00 00 	ld.w	r8,r6[0]
80004be6:	70 08       	ld.w	r8,r8[0x0]
80004be8:	f0 f8 0d a8 	ld.w	r8,r8[3496]
80004bec:	10 9c       	mov	r12,r8
80004bee:	f0 16 00 02 	mcall	r6[8]
80004bf2:	30 08       	mov	r8,0
80004bf4:	e0 69 80 00 	mov	r9,32768
80004bf8:	ea 19 40 66 	orh	r9,0x4066
80004bfc:	f0 16 00 03 	mcall	r6[12]
80004c00:	14 98       	mov	r8,r10
80004c02:	16 99       	mov	r9,r11
80004c04:	10 9a       	mov	r10,r8
80004c06:	12 9b       	mov	r11,r9
80004c08:	e0 68 85 1f 	mov	r8,34079
80004c0c:	ea 18 51 eb 	orh	r8,0x51eb
80004c10:	e0 69 1e b8 	mov	r9,7864
80004c14:	ea 19 40 09 	orh	r9,0x4009
80004c18:	f0 16 00 0c 	mcall	r6[48]
80004c1c:	14 98       	mov	r8,r10
80004c1e:	16 99       	mov	r9,r11
80004c20:	10 9a       	mov	r10,r8
80004c22:	12 9b       	mov	r11,r9
80004c24:	f0 16 00 12 	mcall	r6[72]
80004c28:	18 98       	mov	r8,r12
80004c2a:	30 ab       	mov	r11,10
80004c2c:	10 9c       	mov	r12,r8
80004c2e:	f0 16 00 04 	mcall	r6[16]
		dbg_print(")\n");
80004c32:	fe cc 00 be 	sub	r12,pc,190
80004c36:	f0 16 00 01 	mcall	r6[4]
		
		centralData->waypoint_hold_init = true;
80004c3a:	ec f8 00 00 	ld.w	r8,r6[0]
80004c3e:	70 09       	ld.w	r9,r8[0x0]
80004c40:	30 18       	mov	r8,1
80004c42:	f3 68 10 b7 	st.b	r9[4279],r8
		centralData->waypoint_hold_coordinates = centralData->position_estimator.localPosition;
80004c46:	ec f8 00 00 	ld.w	r8,r6[0]
80004c4a:	70 09       	ld.w	r9,r8[0x0]
80004c4c:	ec f8 00 00 	ld.w	r8,r6[0]
80004c50:	70 08       	ld.w	r8,r8[0x0]
80004c52:	f2 cb ef b0 	sub	r11,r9,-4176
80004c56:	f0 ca f2 64 	sub	r10,r8,-3484
80004c5a:	f6 c8 00 00 	sub	r8,r11,0
80004c5e:	f4 c9 00 00 	sub	r9,r10,0
80004c62:	72 0c       	ld.w	r12,r9[0x0]
80004c64:	91 0c       	st.w	r8[0x0],r12
80004c66:	72 1c       	ld.w	r12,r9[0x4]
80004c68:	91 1c       	st.w	r8[0x4],r12
80004c6a:	72 2c       	ld.w	r12,r9[0x8]
80004c6c:	91 2c       	st.w	r8[0x8],r12
80004c6e:	72 39       	ld.w	r9,r9[0xc]
80004c70:	91 39       	st.w	r8[0xc],r9
80004c72:	f6 c8 ff f0 	sub	r8,r11,-16
80004c76:	f4 c9 ff f0 	sub	r9,r10,-16
80004c7a:	72 0c       	ld.w	r12,r9[0x0]
80004c7c:	91 0c       	st.w	r8[0x0],r12
80004c7e:	72 1c       	ld.w	r12,r9[0x4]
80004c80:	91 1c       	st.w	r8[0x4],r12
80004c82:	72 2c       	ld.w	r12,r9[0x8]
80004c84:	91 2c       	st.w	r8[0x8],r12
80004c86:	72 39       	ld.w	r9,r9[0xc]
80004c88:	91 39       	st.w	r8[0xc],r9
80004c8a:	f6 c8 ff e0 	sub	r8,r11,-32
80004c8e:	f4 c9 ff e0 	sub	r9,r10,-32
80004c92:	72 0a       	ld.w	r10,r9[0x0]
80004c94:	91 0a       	st.w	r8[0x0],r10
80004c96:	72 1a       	ld.w	r10,r9[0x4]
80004c98:	91 1a       	st.w	r8[0x4],r10
80004c9a:	72 2a       	ld.w	r10,r9[0x8]
80004c9c:	91 2a       	st.w	r8[0x8],r10
80004c9e:	72 39       	ld.w	r9,r9[0xc]
80004ca0:	91 39       	st.w	r8[0xc],r9
		
		Aero_Attitude_t aero_attitude;
		aero_attitude=Quat_to_Aero(centralData->imu1.attitude.qe);
80004ca2:	ec f8 00 00 	ld.w	r8,r6[0]
80004ca6:	70 09       	ld.w	r9,r8[0x0]
80004ca8:	ee ca 00 0c 	sub	r10,r7,12
80004cac:	20 4d       	sub	sp,16
80004cae:	1a 98       	mov	r8,sp
80004cb0:	20 08       	sub	r8,0
80004cb2:	20 09       	sub	r9,0
80004cb4:	72 0b       	ld.w	r11,r9[0x0]
80004cb6:	91 0b       	st.w	r8[0x0],r11
80004cb8:	72 1b       	ld.w	r11,r9[0x4]
80004cba:	91 1b       	st.w	r8[0x4],r11
80004cbc:	72 2b       	ld.w	r11,r9[0x8]
80004cbe:	91 2b       	st.w	r8[0x8],r11
80004cc0:	72 39       	ld.w	r9,r9[0xc]
80004cc2:	91 39       	st.w	r8[0xc],r9
80004cc4:	14 9c       	mov	r12,r10
80004cc6:	f0 16 00 66 	mcall	r6[408]
80004cca:	2f cd       	sub	sp,-16
		centralData->waypoint_hold_coordinates.heading = aero_attitude.rpy[2];
80004ccc:	ec f8 00 00 	ld.w	r8,r6[0]
80004cd0:	70 08       	ld.w	r8,r8[0x0]
80004cd2:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004cd6:	f1 49 10 5c 	st.w	r8[4188],r9
	}
}
80004cda:	2f dd       	sub	sp,-12
80004cdc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80004ce0:	80 00       	ld.sh	r0,r0[0x0]
80004ce2:	4a 06       	lddpc	r6,80004d60 <waypoint_hold_position_handler+0x7c>

80004ce4 <waypoint_hold_position_handler>:

void waypoint_hold_position_handler()
{
80004ce4:	eb cd 40 c0 	pushm	r6-r7,lr
80004ce8:	1a 97       	mov	r7,sp
80004cea:	48 96       	lddpc	r6,80004d0c <waypoint_hold_position_handler+0x28>
80004cec:	1e 26       	rsub	r6,pc
	if (!centralData->waypoint_set)
80004cee:	ec f8 00 00 	ld.w	r8,r6[0]
80004cf2:	70 08       	ld.w	r8,r8[0x0]
80004cf4:	f1 38 10 b4 	ld.ub	r8,r8[4276]
80004cf8:	ec 18 00 01 	eorl	r8,0x1
80004cfc:	5c 58       	castu.b	r8
80004cfe:	c0 30       	breq	80004d04 <waypoint_hold_position_handler+0x20>
	{
		init_wp();
80004d00:	f0 16 00 6e 	mcall	r6[440]
	}
	wp_hold_init();
80004d04:	f0 16 00 a9 	mcall	r6[676]
}
80004d08:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80004d0c:	80 00       	ld.sh	r0,r0[0x0]
80004d0e:	4b 70       	lddpc	r0,80004de8 <waypoint_navigation_handler+0x86>
80004d10:	20 72       	sub	r2,7
80004d12:	65 61       	ld.w	r1,r2[0x58]
80004d14:	63 68       	ld.w	r8,r1[0x58]
80004d16:	65 64       	ld.w	r4,r2[0x58]
80004d18:	2c 20       	sub	r0,-62
80004d1a:	64 69       	ld.w	r9,r2[0x18]
80004d1c:	73 74       	ld.w	r4,r9[0x5c]
80004d1e:	61 6e       	ld.w	lr,r0[0x58]
80004d20:	63 65       	ld.w	r5,r1[0x58]
80004d22:	3a 00       	mov	r0,-96
80004d24:	20 6c       	sub	r12,6
80004d26:	65 73       	ld.w	r3,r2[0x5c]
80004d28:	73 20       	ld.w	r0,r9[0x48]
80004d2a:	74 68       	ld.w	r8,r10[0x18]
80004d2c:	61 6e       	ld.w	lr,r0[0x58]
80004d2e:	20 3a       	sub	r10,3
80004d30:	00 00       	add	r0,r0
80004d32:	00 00       	add	r0,r0
80004d34:	2e 0a       	sub	r10,-32
80004d36:	00 00       	add	r0,r0
80004d38:	41 75       	lddsp	r5,sp[0x5c]
80004d3a:	74 6f       	ld.w	pc,r10[0x18]
80004d3c:	63 6f       	ld.w	pc,r1[0x58]
80004d3e:	6e 74       	ld.w	r4,r7[0x1c]
80004d40:	69 6e       	ld.w	lr,r4[0x58]
80004d42:	75 65       	ld.w	r5,r10[0x58]
80004d44:	20 74       	sub	r4,7
80004d46:	6f 77       	ld.w	r7,r7[0x5c]
80004d48:	61 72       	ld.w	r2,r0[0x5c]
80004d4a:	64 73       	ld.w	r3,r2[0x1c]
80004d4c:	20 77       	sub	r7,7
80004d4e:	61 79       	ld.w	r9,r0[0x5c]
80004d50:	70 6f       	ld.w	pc,r8[0x18]
80004d52:	69 6e       	ld.w	lr,r4[0x58]
80004d54:	74 20       	ld.w	r0,r10[0x8]
80004d56:	4e 72       	lddpc	r2,80004ef0 <waypoint_navigation_handler+0x18e>
80004d58:	00 00       	add	r0,r0
80004d5a:	00 00       	add	r0,r0
80004d5c:	53 74       	stdsp	sp[0xdc],r4
80004d5e:	6f 70       	ld.w	r0,r7[0x5c]
80004d60:	0a 00       	add	r0,r5

80004d62 <waypoint_navigation_handler>:

void waypoint_navigation_handler()
{
80004d62:	eb cd 40 e8 	pushm	r3,r5-r7,lr
80004d66:	1a 97       	mov	r7,sp
80004d68:	21 0d       	sub	sp,64
80004d6a:	fe f6 03 ba 	ld.w	r6,pc[954]
80004d6e:	1e 26       	rsub	r6,pc

	if (centralData->waypoint_set)
80004d70:	ec f8 00 00 	ld.w	r8,r6[0]
80004d74:	70 08       	ld.w	r8,r8[0x0]
80004d76:	f1 38 10 b4 	ld.ub	r8,r8[4276]
80004d7a:	58 08       	cp.w	r8,0
80004d7c:	e0 80 01 cd 	breq	80005116 <waypoint_navigation_handler+0x3b4>
	{
		uint8_t i;
		float rel_pos[3];
		for (i=0;i<3;i++)
80004d80:	30 08       	mov	r8,0
80004d82:	ef 68 ff ff 	st.b	r7[-1],r8
80004d86:	c2 18       	rjmp	80004dc8 <waypoint_navigation_handler+0x66>
		{
			rel_pos[i] = centralData->waypoint_coordinates.pos[i]-centralData->position_estimator.localPosition.pos[i];
80004d88:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80004d8c:	ec f9 00 00 	ld.w	r9,r6[0]
80004d90:	72 09       	ld.w	r9,r9[0x0]
80004d92:	ef 3a ff ff 	ld.ub	r10,r7[-1]
80004d96:	f4 ca fb f8 	sub	r10,r10,-1032
80004d9a:	f2 0a 03 2a 	ld.w	r10,r9[r10<<0x2]
80004d9e:	ec f9 00 00 	ld.w	r9,r6[0]
80004da2:	72 09       	ld.w	r9,r9[0x0]
80004da4:	ef 3b ff ff 	ld.ub	r11,r7[-1]
80004da8:	f6 cb fc 99 	sub	r11,r11,-871
80004dac:	f2 0b 03 29 	ld.w	r9,r9[r11<<0x2]
80004db0:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80004db4:	a3 68       	lsl	r8,0x2
80004db6:	ee 08 00 08 	add	r8,r7,r8
80004dba:	f1 49 ff f0 	st.w	r8[-16],r9

	if (centralData->waypoint_set)
	{
		uint8_t i;
		float rel_pos[3];
		for (i=0;i<3;i++)
80004dbe:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80004dc2:	2f f8       	sub	r8,-1
80004dc4:	ef 68 ff ff 	st.b	r7[-1],r8
80004dc8:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80004dcc:	30 28       	mov	r8,2
80004dce:	f0 09 18 00 	cp.b	r9,r8
80004dd2:	fe 98 ff db 	brls	80004d88 <waypoint_navigation_handler+0x26>
		{
			rel_pos[i] = centralData->waypoint_coordinates.pos[i]-centralData->position_estimator.localPosition.pos[i];
		}
		centralData->dist2wp_sqr = vector_norm_sqr(rel_pos);
80004dd6:	ec f8 00 00 	ld.w	r8,r6[0]
80004dda:	70 05       	ld.w	r5,r8[0x0]
80004ddc:	ee c8 00 10 	sub	r8,r7,16
80004de0:	10 9c       	mov	r12,r8
80004de2:	fe b0 f0 8b 	rcall	80002ef8 <vector_norm_sqr>
80004de6:	18 98       	mov	r8,r12
80004de8:	eb 48 10 b0 	st.w	r5[4272],r8
		
		if (centralData->dist2wp_sqr < (centralData->current_waypoint.param2*centralData->current_waypoint.param2))
80004dec:	ec f8 00 00 	ld.w	r8,r6[0]
80004df0:	70 08       	ld.w	r8,r8[0x0]
80004df2:	f0 fa 10 b0 	ld.w	r10,r8[4272]
80004df6:	ec f8 00 00 	ld.w	r8,r6[0]
80004dfa:	70 08       	ld.w	r8,r8[0x0]
80004dfc:	f0 f9 0f f8 	ld.w	r9,r8[4088]
80004e00:	ec f8 00 00 	ld.w	r8,r6[0]
80004e04:	70 08       	ld.w	r8,r8[0x0]
80004e06:	f0 f8 0f f8 	ld.w	r8,r8[4088]
80004e0a:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80004e0e:	30 18       	mov	r8,1
80004e10:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80004e14:	e0 8c 00 03 	brvs	80004e1a <waypoint_navigation_handler+0xb8>
80004e18:	c0 25       	brlt	80004e1c <waypoint_navigation_handler+0xba>
80004e1a:	30 08       	mov	r8,0
80004e1c:	5c 58       	castu.b	r8
80004e1e:	e0 80 01 80 	breq	8000511e <waypoint_navigation_handler+0x3bc>
		{
			dbg_print("Waypoint Nr");
80004e22:	fe cc 1d b2 	sub	r12,pc,7602
80004e26:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(centralData->current_wp_count,10);
80004e2a:	ec f8 00 00 	ld.w	r8,r6[0]
80004e2e:	70 08       	ld.w	r8,r8[0x0]
80004e30:	f1 38 10 1e 	ld.ub	r8,r8[4126]
80004e34:	5c 68       	casts.b	r8
80004e36:	30 ab       	mov	r11,10
80004e38:	10 9c       	mov	r12,r8
80004e3a:	f0 16 00 04 	mcall	r6[16]
			dbg_print(" reached, distance:");
80004e3e:	fe cc 01 2e 	sub	r12,pc,302
80004e42:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(sqrt(centralData->dist2wp_sqr),10);
80004e46:	ec f8 00 00 	ld.w	r8,r6[0]
80004e4a:	70 08       	ld.w	r8,r8[0x0]
80004e4c:	f0 f8 10 b0 	ld.w	r8,r8[4272]
80004e50:	10 9c       	mov	r12,r8
80004e52:	f0 16 00 02 	mcall	r6[8]
80004e56:	14 98       	mov	r8,r10
80004e58:	16 99       	mov	r9,r11
80004e5a:	10 9a       	mov	r10,r8
80004e5c:	12 9b       	mov	r11,r9
80004e5e:	f0 16 00 64 	mcall	r6[400]
80004e62:	14 98       	mov	r8,r10
80004e64:	16 99       	mov	r9,r11
80004e66:	10 9a       	mov	r10,r8
80004e68:	12 9b       	mov	r11,r9
80004e6a:	f0 16 00 12 	mcall	r6[72]
80004e6e:	18 98       	mov	r8,r12
80004e70:	30 ab       	mov	r11,10
80004e72:	10 9c       	mov	r12,r8
80004e74:	f0 16 00 04 	mcall	r6[16]
			dbg_print(" less than :");
80004e78:	fe cc 01 54 	sub	r12,pc,340
80004e7c:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(centralData->current_waypoint.param2,10);
80004e80:	ec f8 00 00 	ld.w	r8,r6[0]
80004e84:	70 08       	ld.w	r8,r8[0x0]
80004e86:	f0 f8 0f f8 	ld.w	r8,r8[4088]
80004e8a:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80004e8e:	30 ab       	mov	r11,10
80004e90:	10 9c       	mov	r12,r8
80004e92:	f0 16 00 04 	mcall	r6[16]
			dbg_print(".\n");
80004e96:	fe cc 01 62 	sub	r12,pc,354
80004e9a:	f0 16 00 01 	mcall	r6[4]
			mavlink_msg_mission_item_reached_send(MAVLINK_COMM_0,centralData->current_wp_count);
80004e9e:	ec f8 00 00 	ld.w	r8,r6[0]
80004ea2:	70 08       	ld.w	r8,r8[0x0]
80004ea4:	f1 38 10 1e 	ld.ub	r8,r8[4126]
80004ea8:	5c 68       	casts.b	r8
80004eaa:	5c 88       	casts.h	r8
80004eac:	5c 78       	castu.h	r8
80004eae:	10 9b       	mov	r11,r8
80004eb0:	30 0c       	mov	r12,0
80004eb2:	fe b0 ef 55 	rcall	80002d5c <mavlink_msg_mission_item_reached_send>
			
			centralData->waypoint_list[centralData->current_wp_count].current = 0;
80004eb6:	ec f8 00 00 	ld.w	r8,r6[0]
80004eba:	70 0a       	ld.w	r10,r8[0x0]
80004ebc:	ec f8 00 00 	ld.w	r8,r6[0]
80004ec0:	70 08       	ld.w	r8,r8[0x0]
80004ec2:	f1 38 10 1e 	ld.ub	r8,r8[4126]
80004ec6:	f3 d8 b0 08 	bfexts	r9,r8,0x0,0x8
80004eca:	12 98       	mov	r8,r9
80004ecc:	a1 78       	lsl	r8,0x1
80004ece:	12 08       	add	r8,r9
80004ed0:	a5 68       	lsl	r8,0x4
80004ed2:	f4 08 00 08 	add	r8,r10,r8
80004ed6:	f0 c9 f1 f0 	sub	r9,r8,-3600
80004eda:	30 08       	mov	r8,0
80004edc:	b2 88       	st.b	r9[0x0],r8
			if (centralData->current_waypoint.autocontinue == 1)
80004ede:	ec f8 00 00 	ld.w	r8,r6[0]
80004ee2:	70 08       	ld.w	r8,r8[0x0]
80004ee4:	f1 39 0f f1 	ld.ub	r9,r8[4081]
80004ee8:	30 18       	mov	r8,1
80004eea:	f0 09 18 00 	cp.b	r9,r8
80004eee:	e0 81 01 07 	brne	800050fc <waypoint_navigation_handler+0x39a>
			{
				dbg_print("Autocontinue towards waypoint Nr");
80004ef2:	fe cc 01 ba 	sub	r12,pc,442
80004ef6:	f0 16 00 01 	mcall	r6[4]
				
				if (centralData->current_wp_count == (centralData->number_of_waypoints-1))
80004efa:	ec f8 00 00 	ld.w	r8,r6[0]
80004efe:	70 08       	ld.w	r8,r8[0x0]
80004f00:	f1 38 10 1e 	ld.ub	r8,r8[4126]
80004f04:	f3 d8 b0 08 	bfexts	r9,r8,0x0,0x8
80004f08:	ec f8 00 00 	ld.w	r8,r6[0]
80004f0c:	70 08       	ld.w	r8,r8[0x0]
80004f0e:	f1 08 10 1c 	ld.sh	r8,r8[4124]
80004f12:	5c 78       	castu.h	r8
80004f14:	20 18       	sub	r8,1
80004f16:	10 39       	cp.w	r9,r8
80004f18:	c0 81       	brne	80004f28 <waypoint_navigation_handler+0x1c6>
				{
					centralData->current_wp_count = 0;
80004f1a:	ec f8 00 00 	ld.w	r8,r6[0]
80004f1e:	70 09       	ld.w	r9,r8[0x0]
80004f20:	30 08       	mov	r8,0
80004f22:	f3 68 10 1e 	st.b	r9[4126],r8
80004f26:	c0 a8       	rjmp	80004f3a <waypoint_navigation_handler+0x1d8>
					}else{
					centralData->current_wp_count++;
80004f28:	ec f8 00 00 	ld.w	r8,r6[0]
80004f2c:	70 08       	ld.w	r8,r8[0x0]
80004f2e:	f1 39 10 1e 	ld.ub	r9,r8[4126]
80004f32:	2f f9       	sub	r9,-1
80004f34:	5c 59       	castu.b	r9
80004f36:	f1 69 10 1e 	st.b	r8[4126],r9
				}
				dbg_print_num(centralData->current_wp_count,10);
80004f3a:	ec f8 00 00 	ld.w	r8,r6[0]
80004f3e:	70 08       	ld.w	r8,r8[0x0]
80004f40:	f1 38 10 1e 	ld.ub	r8,r8[4126]
80004f44:	5c 68       	casts.b	r8
80004f46:	30 ab       	mov	r11,10
80004f48:	10 9c       	mov	r12,r8
80004f4a:	f0 16 00 04 	mcall	r6[16]
				dbg_print("\n");
80004f4e:	fe cc 1b a6 	sub	r12,pc,7078
80004f52:	f0 16 00 01 	mcall	r6[4]
				centralData->waypoint_list[centralData->current_wp_count].current = 1;
80004f56:	ec f8 00 00 	ld.w	r8,r6[0]
80004f5a:	70 0a       	ld.w	r10,r8[0x0]
80004f5c:	ec f8 00 00 	ld.w	r8,r6[0]
80004f60:	70 08       	ld.w	r8,r8[0x0]
80004f62:	f1 38 10 1e 	ld.ub	r8,r8[4126]
80004f66:	f3 d8 b0 08 	bfexts	r9,r8,0x0,0x8
80004f6a:	12 98       	mov	r8,r9
80004f6c:	a1 78       	lsl	r8,0x1
80004f6e:	12 08       	add	r8,r9
80004f70:	a5 68       	lsl	r8,0x4
80004f72:	f4 08 00 08 	add	r8,r10,r8
80004f76:	f0 c9 f1 f0 	sub	r9,r8,-3600
80004f7a:	30 18       	mov	r8,1
80004f7c:	b2 88       	st.b	r9[0x0],r8
				centralData->current_waypoint = centralData->waypoint_list[centralData->current_wp_count];
80004f7e:	ec f8 00 00 	ld.w	r8,r6[0]
80004f82:	70 0a       	ld.w	r10,r8[0x0]
80004f84:	ec f8 00 00 	ld.w	r8,r6[0]
80004f88:	70 0b       	ld.w	r11,r8[0x0]
80004f8a:	ec f8 00 00 	ld.w	r8,r6[0]
80004f8e:	70 08       	ld.w	r8,r8[0x0]
80004f90:	f1 38 10 1e 	ld.ub	r8,r8[4126]
80004f94:	f3 d8 b0 08 	bfexts	r9,r8,0x0,0x8
80004f98:	12 98       	mov	r8,r9
80004f9a:	a1 78       	lsl	r8,0x1
80004f9c:	12 08       	add	r8,r9
80004f9e:	a5 68       	lsl	r8,0x4
80004fa0:	f6 08 00 08 	add	r8,r11,r8
80004fa4:	f0 c8 f1 f4 	sub	r8,r8,-3596
80004fa8:	f4 cb f0 14 	sub	r11,r10,-4076
80004fac:	10 9a       	mov	r10,r8
80004fae:	f6 c8 00 00 	sub	r8,r11,0
80004fb2:	f4 c9 00 00 	sub	r9,r10,0
80004fb6:	72 0c       	ld.w	r12,r9[0x0]
80004fb8:	91 0c       	st.w	r8[0x0],r12
80004fba:	72 1c       	ld.w	r12,r9[0x4]
80004fbc:	91 1c       	st.w	r8[0x4],r12
80004fbe:	72 2c       	ld.w	r12,r9[0x8]
80004fc0:	91 2c       	st.w	r8[0x8],r12
80004fc2:	72 39       	ld.w	r9,r9[0xc]
80004fc4:	91 39       	st.w	r8[0xc],r9
80004fc6:	f6 c8 ff f0 	sub	r8,r11,-16
80004fca:	f4 c9 ff f0 	sub	r9,r10,-16
80004fce:	72 0c       	ld.w	r12,r9[0x0]
80004fd0:	91 0c       	st.w	r8[0x0],r12
80004fd2:	72 1c       	ld.w	r12,r9[0x4]
80004fd4:	91 1c       	st.w	r8[0x4],r12
80004fd6:	72 2c       	ld.w	r12,r9[0x8]
80004fd8:	91 2c       	st.w	r8[0x8],r12
80004fda:	72 39       	ld.w	r9,r9[0xc]
80004fdc:	91 39       	st.w	r8[0xc],r9
80004fde:	f6 c8 ff e0 	sub	r8,r11,-32
80004fe2:	f4 c9 ff e0 	sub	r9,r10,-32
80004fe6:	72 0a       	ld.w	r10,r9[0x0]
80004fe8:	91 0a       	st.w	r8[0x0],r10
80004fea:	72 1a       	ld.w	r10,r9[0x4]
80004fec:	91 1a       	st.w	r8[0x4],r10
80004fee:	72 2a       	ld.w	r10,r9[0x8]
80004ff0:	91 2a       	st.w	r8[0x8],r10
80004ff2:	72 39       	ld.w	r9,r9[0xc]
80004ff4:	91 39       	st.w	r8[0xc],r9
				centralData->waypoint_coordinates = set_waypoint_from_frame(centralData->current_waypoint,centralData->position_estimator.localPosition.origin);
80004ff6:	ec f8 00 00 	ld.w	r8,r6[0]
80004ffa:	70 05       	ld.w	r5,r8[0x0]
80004ffc:	ec f8 00 00 	ld.w	r8,r6[0]
80005000:	70 08       	ld.w	r8,r8[0x0]
80005002:	ec f9 00 00 	ld.w	r9,r6[0]
80005006:	72 0e       	ld.w	lr,r9[0x0]
80005008:	ee cc 00 40 	sub	r12,r7,64
8000500c:	20 7d       	sub	sp,28
8000500e:	1a 99       	mov	r9,sp
80005010:	12 9a       	mov	r10,r9
80005012:	f0 cb f2 54 	sub	r11,r8,-3500
80005016:	f4 c8 00 00 	sub	r8,r10,0
8000501a:	f6 c9 00 00 	sub	r9,r11,0
8000501e:	72 03       	ld.w	r3,r9[0x0]
80005020:	91 03       	st.w	r8[0x0],r3
80005022:	72 13       	ld.w	r3,r9[0x4]
80005024:	91 13       	st.w	r8[0x4],r3
80005026:	72 23       	ld.w	r3,r9[0x8]
80005028:	91 23       	st.w	r8[0x8],r3
8000502a:	72 39       	ld.w	r9,r9[0xc]
8000502c:	91 39       	st.w	r8[0xc],r9
8000502e:	f6 e8 00 10 	ld.d	r8,r11[16]
80005032:	f4 e9 00 10 	st.d	r10[16],r8
80005036:	76 68       	ld.w	r8,r11[0x18]
80005038:	95 68       	st.w	r10[0x18],r8
8000503a:	20 cd       	sub	sp,48
8000503c:	1a 98       	mov	r8,sp
8000503e:	10 9b       	mov	r11,r8
80005040:	fc ca f0 14 	sub	r10,lr,-4076
80005044:	f6 c8 00 00 	sub	r8,r11,0
80005048:	f4 c9 00 00 	sub	r9,r10,0
8000504c:	72 0e       	ld.w	lr,r9[0x0]
8000504e:	91 0e       	st.w	r8[0x0],lr
80005050:	72 1e       	ld.w	lr,r9[0x4]
80005052:	91 1e       	st.w	r8[0x4],lr
80005054:	72 2e       	ld.w	lr,r9[0x8]
80005056:	91 2e       	st.w	r8[0x8],lr
80005058:	72 39       	ld.w	r9,r9[0xc]
8000505a:	91 39       	st.w	r8[0xc],r9
8000505c:	f6 c8 ff f0 	sub	r8,r11,-16
80005060:	f4 c9 ff f0 	sub	r9,r10,-16
80005064:	72 0e       	ld.w	lr,r9[0x0]
80005066:	91 0e       	st.w	r8[0x0],lr
80005068:	72 1e       	ld.w	lr,r9[0x4]
8000506a:	91 1e       	st.w	r8[0x4],lr
8000506c:	72 2e       	ld.w	lr,r9[0x8]
8000506e:	91 2e       	st.w	r8[0x8],lr
80005070:	72 39       	ld.w	r9,r9[0xc]
80005072:	91 39       	st.w	r8[0xc],r9
80005074:	f6 c8 ff e0 	sub	r8,r11,-32
80005078:	f4 c9 ff e0 	sub	r9,r10,-32
8000507c:	72 0a       	ld.w	r10,r9[0x0]
8000507e:	91 0a       	st.w	r8[0x0],r10
80005080:	72 1a       	ld.w	r10,r9[0x4]
80005082:	91 1a       	st.w	r8[0x4],r10
80005084:	72 2a       	ld.w	r10,r9[0x8]
80005086:	91 2a       	st.w	r8[0x8],r10
80005088:	72 39       	ld.w	r9,r9[0xc]
8000508a:	91 39       	st.w	r8[0xc],r9
8000508c:	f0 16 00 f5 	mcall	r6[980]
80005090:	2e dd       	sub	sp,-76
80005092:	ea cb ef e0 	sub	r11,r5,-4128
80005096:	ee ca 00 40 	sub	r10,r7,64
8000509a:	f6 c8 00 00 	sub	r8,r11,0
8000509e:	f4 c9 00 00 	sub	r9,r10,0
800050a2:	72 0c       	ld.w	r12,r9[0x0]
800050a4:	91 0c       	st.w	r8[0x0],r12
800050a6:	72 1c       	ld.w	r12,r9[0x4]
800050a8:	91 1c       	st.w	r8[0x4],r12
800050aa:	72 2c       	ld.w	r12,r9[0x8]
800050ac:	91 2c       	st.w	r8[0x8],r12
800050ae:	72 39       	ld.w	r9,r9[0xc]
800050b0:	91 39       	st.w	r8[0xc],r9
800050b2:	f6 c8 ff f0 	sub	r8,r11,-16
800050b6:	f4 c9 ff f0 	sub	r9,r10,-16
800050ba:	72 0c       	ld.w	r12,r9[0x0]
800050bc:	91 0c       	st.w	r8[0x0],r12
800050be:	72 1c       	ld.w	r12,r9[0x4]
800050c0:	91 1c       	st.w	r8[0x4],r12
800050c2:	72 2c       	ld.w	r12,r9[0x8]
800050c4:	91 2c       	st.w	r8[0x8],r12
800050c6:	72 39       	ld.w	r9,r9[0xc]
800050c8:	91 39       	st.w	r8[0xc],r9
800050ca:	f6 c8 ff e0 	sub	r8,r11,-32
800050ce:	f4 c9 ff e0 	sub	r9,r10,-32
800050d2:	72 0a       	ld.w	r10,r9[0x0]
800050d4:	91 0a       	st.w	r8[0x0],r10
800050d6:	72 1a       	ld.w	r10,r9[0x4]
800050d8:	91 1a       	st.w	r8[0x4],r10
800050da:	72 2a       	ld.w	r10,r9[0x8]
800050dc:	91 2a       	st.w	r8[0x8],r10
800050de:	72 39       	ld.w	r9,r9[0xc]
800050e0:	91 39       	st.w	r8[0xc],r9
				
				mavlink_msg_mission_current_send(MAVLINK_COMM_0,centralData->current_wp_count);
800050e2:	ec f8 00 00 	ld.w	r8,r6[0]
800050e6:	70 08       	ld.w	r8,r8[0x0]
800050e8:	f1 38 10 1e 	ld.ub	r8,r8[4126]
800050ec:	5c 68       	casts.b	r8
800050ee:	5c 88       	casts.h	r8
800050f0:	5c 78       	castu.h	r8
800050f2:	10 9b       	mov	r11,r8
800050f4:	30 0c       	mov	r12,0
800050f6:	fe b0 ed 13 	rcall	80002b1c <mavlink_msg_mission_current_send>
800050fa:	c1 28       	rjmp	8000511e <waypoint_navigation_handler+0x3bc>
				
				}else{
				centralData->waypoint_set = false;
800050fc:	ec f8 00 00 	ld.w	r8,r6[0]
80005100:	70 09       	ld.w	r9,r8[0x0]
80005102:	30 08       	mov	r8,0
80005104:	f3 68 10 b4 	st.b	r9[4276],r8
				dbg_print("Stop\n");
80005108:	fe cc 03 ac 	sub	r12,pc,940
8000510c:	f0 16 00 01 	mcall	r6[4]
				
				wp_hold_init();
80005110:	f0 16 00 a9 	mcall	r6[676]
80005114:	c0 58       	rjmp	8000511e <waypoint_navigation_handler+0x3bc>
			}
		}
	}else{
		init_wp();
80005116:	f0 16 00 6e 	mcall	r6[440]
		wp_hold_init();
8000511a:	f0 16 00 a9 	mcall	r6[676]
	}
}
8000511e:	2f 0d       	sub	sp,-64
80005120:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
80005124:	80 00       	ld.sh	r0,r0[0x0]
80005126:	4b f2       	lddpc	r2,80005220 <waypoint_critical_handler+0x30>
80005128:	43 72       	lddsp	r2,sp[0xdc]
8000512a:	69 74       	ld.w	r4,r4[0x5c]
8000512c:	69 63       	ld.w	r3,r4[0x58]
8000512e:	61 6c       	ld.w	r12,r0[0x58]
80005130:	20 53       	sub	r3,5
80005132:	74 61       	ld.w	r1,r10[0x18]
80005134:	74 65       	ld.w	r5,r10[0x18]
80005136:	21 20       	sub	r0,18
80005138:	43 6c       	lddsp	r12,sp[0xd8]
8000513a:	69 6d       	ld.w	sp,r4[0x58]
8000513c:	62 69       	ld.w	r9,r1[0x18]
8000513e:	6e 67       	ld.w	r7,r7[0x18]
80005140:	20 74       	sub	r4,7
80005142:	6f 20       	ld.w	r0,r7[0x48]
80005144:	73 61       	ld.w	r1,r9[0x58]
80005146:	66 65       	ld.w	r5,r3[0x18]
80005148:	20 61       	sub	r1,6
8000514a:	6c 74       	ld.w	r4,r6[0x1c]
8000514c:	69 74       	ld.w	r4,r4[0x5c]
8000514e:	75 64       	ld.w	r4,r10[0x58]
80005150:	65 2e       	ld.w	lr,r2[0x48]
80005152:	0a 00       	add	r0,r5
80005154:	43 72       	lddsp	r2,sp[0xdc]
80005156:	69 74       	ld.w	r4,r4[0x5c]
80005158:	69 63       	ld.w	r3,r4[0x58]
8000515a:	61 6c       	ld.w	r12,r0[0x58]
8000515c:	20 53       	sub	r3,5
8000515e:	74 61       	ld.w	r1,r10[0x18]
80005160:	74 65       	ld.w	r5,r10[0x18]
80005162:	21 20       	sub	r0,18
80005164:	46 6c       	lddsp	r12,sp[0x198]
80005166:	79 69       	ld.w	r9,r12[0x58]
80005168:	6e 67       	ld.w	r7,r7[0x18]
8000516a:	20 74       	sub	r4,7
8000516c:	6f 20       	ld.w	r0,r7[0x48]
8000516e:	68 6f       	ld.w	pc,r4[0x18]
80005170:	6d 65       	ld.w	r5,r6[0x58]
80005172:	20 77       	sub	r7,7
80005174:	61 79       	ld.w	r9,r0[0x5c]
80005176:	70 6f       	ld.w	pc,r8[0x18]
80005178:	69 6e       	ld.w	lr,r4[0x58]
8000517a:	74 2e       	ld.w	lr,r10[0x8]
8000517c:	0a 00       	add	r0,r5
8000517e:	00 00       	add	r0,r0
80005180:	43 72       	lddsp	r2,sp[0xdc]
80005182:	69 74       	ld.w	r4,r4[0x5c]
80005184:	69 63       	ld.w	r3,r4[0x58]
80005186:	61 6c       	ld.w	r12,r0[0x58]
80005188:	20 53       	sub	r3,5
8000518a:	74 61       	ld.w	r1,r10[0x18]
8000518c:	74 65       	ld.w	r5,r10[0x18]
8000518e:	21 20       	sub	r0,18
80005190:	50 65       	stdsp	sp[0x18],r5
80005192:	72 66       	ld.w	r6,r9[0x18]
80005194:	6f 72       	ld.w	r2,r7[0x5c]
80005196:	6d 69       	ld.w	r9,r6[0x58]
80005198:	6e 67       	ld.w	r7,r7[0x18]
8000519a:	20 63       	sub	r3,6
8000519c:	72 69       	ld.w	r9,r9[0x18]
8000519e:	74 69       	ld.w	r9,r10[0x18]
800051a0:	63 61       	ld.w	r1,r1[0x58]
800051a2:	6c 20       	ld.w	r0,r6[0x8]
800051a4:	6c 61       	ld.w	r1,r6[0x18]
800051a6:	6e 64       	ld.w	r4,r7[0x18]
800051a8:	69 6e       	ld.w	lr,r4[0x58]
800051aa:	67 2e       	ld.w	lr,r3[0x48]
800051ac:	0a 00       	add	r0,r5
800051ae:	00 00       	add	r0,r0
800051b0:	43 72       	lddsp	r2,sp[0xdc]
800051b2:	69 74       	ld.w	r4,r4[0x5c]
800051b4:	69 63       	ld.w	r3,r4[0x58]
800051b6:	61 6c       	ld.w	r12,r0[0x58]
800051b8:	20 53       	sub	r3,5
800051ba:	74 61       	ld.w	r1,r10[0x18]
800051bc:	74 65       	ld.w	r5,r10[0x18]
800051be:	21 20       	sub	r0,18
800051c0:	4c 61       	lddpc	r1,800052d8 <waypoint_critical_handler+0xe8>
800051c2:	6e 64       	ld.w	r4,r7[0x18]
800051c4:	65 64       	ld.w	r4,r2[0x58]
800051c6:	2c 20       	sub	r0,-62
800051c8:	73 77       	ld.w	r7,r9[0x5c]
800051ca:	69 74       	ld.w	r4,r4[0x5c]
800051cc:	63 68       	ld.w	r8,r1[0x58]
800051ce:	69 6e       	ld.w	lr,r4[0x58]
800051d0:	67 20       	ld.w	r0,r3[0x48]
800051d2:	6f 66       	ld.w	r6,r7[0x58]
800051d4:	66 20       	ld.w	r0,r3[0x8]
800051d6:	6d 6f       	ld.w	pc,r6[0x58]
800051d8:	74 6f       	ld.w	pc,r10[0x18]
800051da:	72 73       	ld.w	r3,r9[0x1c]
800051dc:	2c 20       	sub	r0,-62
800051de:	45 6d       	lddsp	sp,sp[0x158]
800051e0:	65 72       	ld.w	r2,r2[0x5c]
800051e2:	67 65       	ld.w	r5,r3[0x58]
800051e4:	6e 63       	ld.w	r3,r7[0x18]
800051e6:	79 20       	ld.w	r0,r12[0x48]
800051e8:	6d 6f       	ld.w	pc,r6[0x58]
800051ea:	64 65       	ld.w	r5,r2[0x18]
800051ec:	2e 0a       	sub	r10,-32
	...

800051f0 <waypoint_critical_handler>:

void waypoint_critical_handler()
{
800051f0:	eb cd 40 e0 	pushm	r5-r7,lr
800051f4:	1a 97       	mov	r7,sp
800051f6:	20 7d       	sub	sp,28
800051f8:	fe f6 02 20 	ld.w	r6,pc[544]
800051fc:	1e 26       	rsub	r6,pc
	if (!(centralData->critical_init))
800051fe:	ec f8 00 00 	ld.w	r8,r6[0]
80005202:	70 08       	ld.w	r8,r8[0x0]
80005204:	f1 38 10 b9 	ld.ub	r8,r8[4281]
80005208:	ec 18 00 01 	eorl	r8,0x1
8000520c:	5c 58       	castu.b	r8
8000520e:	c1 10       	breq	80005230 <waypoint_critical_handler+0x40>
	{
		centralData->critical_init = true;
80005210:	ec f8 00 00 	ld.w	r8,r6[0]
80005214:	70 09       	ld.w	r9,r8[0x0]
80005216:	30 18       	mov	r8,1
80005218:	f3 68 10 b9 	st.b	r9[4281],r8
		dbg_print("Critical State! Climbing to safe altitude.\n");
8000521c:	fe cc 00 f4 	sub	r12,pc,244
80005220:	f0 16 00 01 	mcall	r6[4]
		centralData->critical_behavior = CLIMB_TO_SAFE_ALT;
80005224:	ec f8 00 00 	ld.w	r8,r6[0]
80005228:	70 08       	ld.w	r8,r8[0x0]
8000522a:	30 19       	mov	r9,1
8000522c:	f1 49 12 e4 	st.w	r8[4836],r9
	}
	
	if (!(centralData->critical_next_state))
80005230:	ec f8 00 00 	ld.w	r8,r6[0]
80005234:	70 08       	ld.w	r8,r8[0x0]
80005236:	f1 38 10 ba 	ld.ub	r8,r8[4282]
8000523a:	ec 18 00 01 	eorl	r8,0x1
8000523e:	5c 58       	castu.b	r8
80005240:	e0 80 00 a7 	breq	8000538e <waypoint_critical_handler+0x19e>
	{
		centralData->critical_next_state = true;
80005244:	ec f8 00 00 	ld.w	r8,r6[0]
80005248:	70 09       	ld.w	r9,r8[0x0]
8000524a:	30 18       	mov	r8,1
8000524c:	f3 68 10 ba 	st.b	r9[4282],r8
		
		Aero_Attitude_t aero_attitude;
		aero_attitude=Quat_to_Aero(centralData->imu1.attitude.qe);
80005250:	ec f8 00 00 	ld.w	r8,r6[0]
80005254:	70 09       	ld.w	r9,r8[0x0]
80005256:	ee ca 00 10 	sub	r10,r7,16
8000525a:	20 4d       	sub	sp,16
8000525c:	1a 98       	mov	r8,sp
8000525e:	20 08       	sub	r8,0
80005260:	20 09       	sub	r9,0
80005262:	72 0b       	ld.w	r11,r9[0x0]
80005264:	91 0b       	st.w	r8[0x0],r11
80005266:	72 1b       	ld.w	r11,r9[0x4]
80005268:	91 1b       	st.w	r8[0x4],r11
8000526a:	72 2b       	ld.w	r11,r9[0x8]
8000526c:	91 2b       	st.w	r8[0x8],r11
8000526e:	72 39       	ld.w	r9,r9[0xc]
80005270:	91 39       	st.w	r8[0xc],r9
80005272:	14 9c       	mov	r12,r10
80005274:	f0 16 00 66 	mcall	r6[408]
80005278:	2f cd       	sub	sp,-16
		centralData->waypoint_critical_coordinates.heading = aero_attitude.rpy[2];
8000527a:	ec f8 00 00 	ld.w	r8,r6[0]
8000527e:	70 08       	ld.w	r8,r8[0x0]
80005280:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005284:	f1 49 10 8c 	st.w	r8[4236],r9
		
		switch (centralData->critical_behavior)
80005288:	ec f8 00 00 	ld.w	r8,r6[0]
8000528c:	70 08       	ld.w	r8,r8[0x0]
8000528e:	f0 f8 12 e4 	ld.w	r8,r8[4836]
80005292:	58 28       	cp.w	r8,2
80005294:	c2 10       	breq	800052d6 <waypoint_critical_handler+0xe6>
80005296:	58 38       	cp.w	r8,3
80005298:	c3 30       	breq	800052fe <waypoint_critical_handler+0x10e>
8000529a:	58 18       	cp.w	r8,1
8000529c:	c4 31       	brne	80005322 <waypoint_critical_handler+0x132>
		{
			case CLIMB_TO_SAFE_ALT:
			centralData->waypoint_critical_coordinates.pos[X] = centralData->position_estimator.localPosition.pos[X];
8000529e:	ec f8 00 00 	ld.w	r8,r6[0]
800052a2:	70 08       	ld.w	r8,r8[0x0]
800052a4:	ec f9 00 00 	ld.w	r9,r6[0]
800052a8:	72 09       	ld.w	r9,r9[0x0]
800052aa:	f2 f9 0d 9c 	ld.w	r9,r9[3484]
800052ae:	f1 49 10 80 	st.w	r8[4224],r9
			centralData->waypoint_critical_coordinates.pos[Y] = centralData->position_estimator.localPosition.pos[Y];
800052b2:	ec f8 00 00 	ld.w	r8,r6[0]
800052b6:	70 08       	ld.w	r8,r8[0x0]
800052b8:	ec f9 00 00 	ld.w	r9,r6[0]
800052bc:	72 09       	ld.w	r9,r9[0x0]
800052be:	f2 f9 0d a0 	ld.w	r9,r9[3488]
800052c2:	f1 49 10 84 	st.w	r8[4228],r9
			centralData->waypoint_critical_coordinates.pos[Z] = -30.0;
800052c6:	ec f8 00 00 	ld.w	r8,r6[0]
800052ca:	70 08       	ld.w	r8,r8[0x0]
800052cc:	fc 19 c1 f0 	movh	r9,0xc1f0
800052d0:	f1 49 10 88 	st.w	r8[4232],r9
			
			break;
800052d4:	c2 78       	rjmp	80005322 <waypoint_critical_handler+0x132>
			case FLY_TO_HOME_WP:
			centralData->waypoint_critical_coordinates.pos[X] = 0.0;
800052d6:	ec f8 00 00 	ld.w	r8,r6[0]
800052da:	70 08       	ld.w	r8,r8[0x0]
800052dc:	30 09       	mov	r9,0
800052de:	f1 49 10 80 	st.w	r8[4224],r9
			centralData->waypoint_critical_coordinates.pos[Y] = 0.0;
800052e2:	ec f8 00 00 	ld.w	r8,r6[0]
800052e6:	70 08       	ld.w	r8,r8[0x0]
800052e8:	30 09       	mov	r9,0
800052ea:	f1 49 10 84 	st.w	r8[4228],r9
			centralData->waypoint_critical_coordinates.pos[Z] = -30.0;
800052ee:	ec f8 00 00 	ld.w	r8,r6[0]
800052f2:	70 08       	ld.w	r8,r8[0x0]
800052f4:	fc 19 c1 f0 	movh	r9,0xc1f0
800052f8:	f1 49 10 88 	st.w	r8[4232],r9
			break;
800052fc:	c1 38       	rjmp	80005322 <waypoint_critical_handler+0x132>
			case CRITICAL_LAND:
			centralData->waypoint_critical_coordinates.pos[X] = 0.0;
800052fe:	ec f8 00 00 	ld.w	r8,r6[0]
80005302:	70 08       	ld.w	r8,r8[0x0]
80005304:	30 09       	mov	r9,0
80005306:	f1 49 10 80 	st.w	r8[4224],r9
			centralData->waypoint_critical_coordinates.pos[Y] = 0.0;
8000530a:	ec f8 00 00 	ld.w	r8,r6[0]
8000530e:	70 08       	ld.w	r8,r8[0x0]
80005310:	30 09       	mov	r9,0
80005312:	f1 49 10 84 	st.w	r8[4228],r9
			centralData->waypoint_critical_coordinates.pos[Z] = 0.0;
80005316:	ec f8 00 00 	ld.w	r8,r6[0]
8000531a:	70 08       	ld.w	r8,r8[0x0]
8000531c:	30 09       	mov	r9,0
8000531e:	f1 49 10 88 	st.w	r8[4232],r9
			break;
		}
		float rel_pos[3];
		uint8_t i;
		for (i=0;i<3;i++)
80005322:	30 08       	mov	r8,0
80005324:	ef 68 ff ff 	st.b	r7[-1],r8
80005328:	c2 18       	rjmp	8000536a <waypoint_critical_handler+0x17a>
		{
			rel_pos[i] = centralData->waypoint_critical_coordinates.pos[i] - centralData->position_estimator.localPosition.pos[i];
8000532a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000532e:	ec f9 00 00 	ld.w	r9,r6[0]
80005332:	72 09       	ld.w	r9,r9[0x0]
80005334:	ef 3a ff ff 	ld.ub	r10,r7[-1]
80005338:	f4 ca fb e0 	sub	r10,r10,-1056
8000533c:	f2 0a 03 2a 	ld.w	r10,r9[r10<<0x2]
80005340:	ec f9 00 00 	ld.w	r9,r6[0]
80005344:	72 09       	ld.w	r9,r9[0x0]
80005346:	ef 3b ff ff 	ld.ub	r11,r7[-1]
8000534a:	f6 cb fc 99 	sub	r11,r11,-871
8000534e:	f2 0b 03 29 	ld.w	r9,r9[r11<<0x2]
80005352:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80005356:	a3 68       	lsl	r8,0x2
80005358:	ee 08 00 08 	add	r8,r7,r8
8000535c:	f1 49 ff e4 	st.w	r8[-28],r9
			centralData->waypoint_critical_coordinates.pos[Z] = 0.0;
			break;
		}
		float rel_pos[3];
		uint8_t i;
		for (i=0;i<3;i++)
80005360:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80005364:	2f f8       	sub	r8,-1
80005366:	ef 68 ff ff 	st.b	r7[-1],r8
8000536a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000536e:	30 28       	mov	r8,2
80005370:	f0 09 18 00 	cp.b	r9,r8
80005374:	fe 98 ff db 	brls	8000532a <waypoint_critical_handler+0x13a>
		{
			rel_pos[i] = centralData->waypoint_critical_coordinates.pos[i] - centralData->position_estimator.localPosition.pos[i];
		}
		centralData->dist2wp_sqr = vector_norm_sqr(rel_pos);
80005378:	ec f8 00 00 	ld.w	r8,r6[0]
8000537c:	70 05       	ld.w	r5,r8[0x0]
8000537e:	ee c8 00 1c 	sub	r8,r7,28
80005382:	10 9c       	mov	r12,r8
80005384:	fe b0 ed ba 	rcall	80002ef8 <vector_norm_sqr>
80005388:	18 98       	mov	r8,r12
8000538a:	eb 48 10 b0 	st.w	r5[4272],r8
	}
	
	if (centralData->dist2wp_sqr < 3.0)
8000538e:	ec f8 00 00 	ld.w	r8,r6[0]
80005392:	70 08       	ld.w	r8,r8[0x0]
80005394:	f0 fa 10 b0 	ld.w	r10,r8[4272]
80005398:	30 18       	mov	r8,1
8000539a:	fc 19 40 40 	movh	r9,0x4040
8000539e:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
800053a2:	e0 8c 00 03 	brvs	800053a8 <waypoint_critical_handler+0x1b8>
800053a6:	c0 25       	brlt	800053aa <waypoint_critical_handler+0x1ba>
800053a8:	30 08       	mov	r8,0
800053aa:	5c 58       	castu.b	r8
800053ac:	c3 20       	breq	80005410 <waypoint_critical_handler+0x220>
	{
		centralData->critical_next_state = false;
800053ae:	ec f8 00 00 	ld.w	r8,r6[0]
800053b2:	70 09       	ld.w	r9,r8[0x0]
800053b4:	30 08       	mov	r8,0
800053b6:	f3 68 10 ba 	st.b	r9[4282],r8
		switch (centralData->critical_behavior)
800053ba:	ec f8 00 00 	ld.w	r8,r6[0]
800053be:	70 08       	ld.w	r8,r8[0x0]
800053c0:	f0 f8 12 e4 	ld.w	r8,r8[4836]
800053c4:	58 28       	cp.w	r8,2
800053c6:	c1 00       	breq	800053e6 <waypoint_critical_handler+0x1f6>
800053c8:	58 38       	cp.w	r8,3
800053ca:	c1 90       	breq	800053fc <waypoint_critical_handler+0x20c>
800053cc:	58 18       	cp.w	r8,1
800053ce:	c2 11       	brne	80005410 <waypoint_critical_handler+0x220>
		{
			case CLIMB_TO_SAFE_ALT:
			dbg_print("Critical State! Flying to home waypoint.\n");
800053d0:	fe cc 02 7c 	sub	r12,pc,636
800053d4:	f0 16 00 01 	mcall	r6[4]
			centralData->critical_behavior = FLY_TO_HOME_WP;
800053d8:	ec f8 00 00 	ld.w	r8,r6[0]
800053dc:	70 08       	ld.w	r8,r8[0x0]
800053de:	30 29       	mov	r9,2
800053e0:	f1 49 12 e4 	st.w	r8[4836],r9
			break;
800053e4:	c1 68       	rjmp	80005410 <waypoint_critical_handler+0x220>
			case FLY_TO_HOME_WP:
			dbg_print("Critical State! Performing critical landing.\n");
800053e6:	fe cc 02 66 	sub	r12,pc,614
800053ea:	f0 16 00 01 	mcall	r6[4]
			centralData->critical_behavior = CRITICAL_LAND;
800053ee:	ec f8 00 00 	ld.w	r8,r6[0]
800053f2:	70 08       	ld.w	r8,r8[0x0]
800053f4:	30 39       	mov	r9,3
800053f6:	f1 49 12 e4 	st.w	r8[4836],r9
			break;
800053fa:	c0 b8       	rjmp	80005410 <waypoint_critical_handler+0x220>
			case CRITICAL_LAND:
			dbg_print("Critical State! Landed, switching off motors, Emergency mode.\n");
800053fc:	fe cc 02 4c 	sub	r12,pc,588
80005400:	f0 16 00 01 	mcall	r6[4]
			centralData->critical_landing = true;
80005404:	ec f8 00 00 	ld.w	r8,r6[0]
80005408:	70 09       	ld.w	r9,r8[0x0]
8000540a:	30 18       	mov	r8,1
8000540c:	f3 68 10 b8 	st.b	r9[4280],r8
			break;
		}
	}
80005410:	2f 9d       	sub	sp,-28
80005412:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80005416:	00 00       	add	r0,r0
80005418:	80 00       	ld.sh	r0,r0[0x0]
8000541a:	50 80       	stdsp	sp[0x20],r0

8000541c <mav_array_memcpy>:

/*
  like memcpy(), but if src is NULL, do a memset to zero
*/
static void mav_array_memcpy(void *dest, const void *src, size_t n)
{
8000541c:	eb cd 40 c0 	pushm	r6-r7,lr
80005420:	1a 97       	mov	r7,sp
80005422:	20 3d       	sub	sp,12
80005424:	49 06       	lddpc	r6,80005464 <mav_array_memcpy+0x48>
80005426:	1e 26       	rsub	r6,pc
80005428:	ef 4c ff fc 	st.w	r7[-4],r12
8000542c:	ef 4b ff f8 	st.w	r7[-8],r11
80005430:	ef 4a ff f4 	st.w	r7[-12],r10
	if (src == NULL) {
80005434:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005438:	58 08       	cp.w	r8,0
8000543a:	c0 91       	brne	8000544c <mav_array_memcpy+0x30>
		memset(dest, 0, n);
8000543c:	ee fa ff f4 	ld.w	r10,r7[-12]
80005440:	30 0b       	mov	r11,0
80005442:	ee fc ff fc 	ld.w	r12,r7[-4]
80005446:	f0 16 00 2f 	mcall	r6[188]
8000544a:	c0 98       	rjmp	8000545c <mav_array_memcpy+0x40>
	} else {
		memcpy(dest, src, n);
8000544c:	ee fa ff f4 	ld.w	r10,r7[-12]
80005450:	ee fb ff f8 	ld.w	r11,r7[-8]
80005454:	ee fc ff fc 	ld.w	r12,r7[-4]
80005458:	f0 16 00 20 	mcall	r6[128]
	}
}
8000545c:	2f dd       	sub	sp,-12
8000545e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80005462:	00 00       	add	r0,r0
80005464:	80 00       	ld.sh	r0,r0[0x0]
80005466:	52 aa       	stdsp	sp[0xa8],r10

80005468 <scalar_product>:
	return out;
}


float static inline scalar_product(const float u[], const float v[])
{
80005468:	eb cd 40 80 	pushm	r7,lr
8000546c:	1a 97       	mov	r7,sp
8000546e:	20 3d       	sub	sp,12
80005470:	ef 4c ff f8 	st.w	r7[-8],r12
80005474:	ef 4b ff f4 	st.w	r7[-12],r11
	float scp = (u[0]*v[0]+u[1]*v[1]+u[2]*v[2]);
80005478:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000547c:	70 09       	ld.w	r9,r8[0x0]
8000547e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005482:	70 08       	ld.w	r8,r8[0x0]
80005484:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80005488:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000548c:	2f c8       	sub	r8,-4
8000548e:	70 0a       	ld.w	r10,r8[0x0]
80005490:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005494:	2f c8       	sub	r8,-4
80005496:	70 08       	ld.w	r8,r8[0x0]
80005498:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000549c:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
800054a0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800054a4:	2f 88       	sub	r8,-8
800054a6:	70 0a       	ld.w	r10,r8[0x0]
800054a8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800054ac:	2f 88       	sub	r8,-8
800054ae:	70 08       	ld.w	r8,r8[0x0]
800054b0:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
800054b4:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
800054b8:	ef 48 ff fc 	st.w	r7[-4],r8
	return scp;
800054bc:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
800054c0:	10 9c       	mov	r12,r8
800054c2:	2f dd       	sub	sp,-12
800054c4:	e3 cd 80 80 	ldm	sp++,r7,pc

800054c8 <quat_multi>:
	out[2] = u[0] * v[1] - u[1] * v[0];
}


UQuat_t static inline quat_multi(const UQuat_t q1, const UQuat_t q2)
{
800054c8:	eb cd 40 e8 	pushm	r3,r5-r7,lr
800054cc:	1a 97       	mov	r7,sp
800054ce:	20 7d       	sub	sp,28
800054d0:	4b d6       	lddpc	r6,800055c4 <quat_multi+0xfc>
800054d2:	1e 26       	rsub	r6,pc
800054d4:	ee c8 ff ec 	sub	r8,r7,-20
800054d8:	18 95       	mov	r5,r12
	float tmp[3];
	UQuat_t out;
	tmp[0] = q1.v[1] * q2.v[2] - q1.v[2]*q2.v[1];
800054da:	70 2a       	ld.w	r10,r8[0x8]
800054dc:	70 79       	ld.w	r9,r8[0x1c]
800054de:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
800054e2:	70 3b       	ld.w	r11,r8[0xc]
800054e4:	70 69       	ld.w	r9,r8[0x18]
800054e6:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
800054ea:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
800054ee:	ef 49 ff f4 	st.w	r7[-12],r9
	tmp[1] = q1.v[2] * q2.v[0] - q1.v[0]*q2.v[2];
800054f2:	70 3a       	ld.w	r10,r8[0xc]
800054f4:	70 59       	ld.w	r9,r8[0x14]
800054f6:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
800054fa:	70 1b       	ld.w	r11,r8[0x4]
800054fc:	70 79       	ld.w	r9,r8[0x1c]
800054fe:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
80005502:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80005506:	ef 49 ff f8 	st.w	r7[-8],r9
	tmp[2] = q1.v[0] * q2.v[1] - q1.v[1]*q2.v[0];
8000550a:	70 1a       	ld.w	r10,r8[0x4]
8000550c:	70 69       	ld.w	r9,r8[0x18]
8000550e:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
80005512:	70 2b       	ld.w	r11,r8[0x8]
80005514:	70 59       	ld.w	r9,r8[0x14]
80005516:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8000551a:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8000551e:	ef 49 ff fc 	st.w	r7[-4],r9
	out.v[0] = q2.s*q1.v[0] + q1.s *q2.v[0] +tmp[0];
80005522:	70 4a       	ld.w	r10,r8[0x10]
80005524:	70 19       	ld.w	r9,r8[0x4]
80005526:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8000552a:	70 0b       	ld.w	r11,r8[0x0]
8000552c:	70 59       	ld.w	r9,r8[0x14]
8000552e:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
80005532:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
80005536:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000553a:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
8000553e:	ef 49 ff e8 	st.w	r7[-24],r9
	out.v[1] = q2.s*q1.v[1] + q1.s *q2.v[1] +tmp[1];
80005542:	70 4a       	ld.w	r10,r8[0x10]
80005544:	70 29       	ld.w	r9,r8[0x8]
80005546:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8000554a:	70 0b       	ld.w	r11,r8[0x0]
8000554c:	70 69       	ld.w	r9,r8[0x18]
8000554e:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
80005552:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
80005556:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000555a:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
8000555e:	ef 49 ff ec 	st.w	r7[-20],r9
	out.v[2] = q2.s*q1.v[2] + q1.s *q2.v[2] +tmp[2];
80005562:	70 4a       	ld.w	r10,r8[0x10]
80005564:	70 39       	ld.w	r9,r8[0xc]
80005566:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8000556a:	70 0b       	ld.w	r11,r8[0x0]
8000556c:	70 79       	ld.w	r9,r8[0x1c]
8000556e:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
80005572:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
80005576:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000557a:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
8000557e:	ef 49 ff f0 	st.w	r7[-16],r9
	out.s= q1.s*q2.s - scalar_product(q1.v, q2.v);
80005582:	70 0a       	ld.w	r10,r8[0x0]
80005584:	70 49       	ld.w	r9,r8[0x10]
80005586:	e5 a2 03 a9 	cop	cp0,cr3,cr10,cr9,0x44
8000558a:	f0 c9 ff f0 	sub	r9,r8,-16
8000558e:	2f c9       	sub	r9,-4
80005590:	2f c8       	sub	r8,-4
80005592:	12 9b       	mov	r11,r9
80005594:	10 9c       	mov	r12,r8
80005596:	c6 9f       	rcall	80005468 <scalar_product>
80005598:	18 98       	mov	r8,r12
8000559a:	e5 a1 08 38 	cop	cp0,cr8,cr3,cr8,0x42
8000559e:	ef 48 ff e4 	st.w	r7[-28],r8
	
	return out;
800055a2:	0a 98       	mov	r8,r5
800055a4:	ee c9 00 1c 	sub	r9,r7,28
800055a8:	20 08       	sub	r8,0
800055aa:	20 09       	sub	r9,0
800055ac:	72 0a       	ld.w	r10,r9[0x0]
800055ae:	91 0a       	st.w	r8[0x0],r10
800055b0:	72 1a       	ld.w	r10,r9[0x4]
800055b2:	91 1a       	st.w	r8[0x4],r10
800055b4:	72 2a       	ld.w	r10,r9[0x8]
800055b6:	91 2a       	st.w	r8[0x8],r10
800055b8:	72 39       	ld.w	r9,r9[0xc]
800055ba:	91 39       	st.w	r8[0xc],r9
}
800055bc:	0a 9c       	mov	r12,r5
800055be:	2f 9d       	sub	sp,-28
800055c0:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
800055c4:	80 00       	ld.sh	r0,r0[0x0]
800055c6:	53 56       	stdsp	sp[0xd4],r6

800055c8 <quat_inv>:

UQuat_t static inline quat_inv(const UQuat_t q)
{
800055c8:	eb cd 40 80 	pushm	r7,lr
800055cc:	1a 97       	mov	r7,sp
800055ce:	20 5d       	sub	sp,20
800055d0:	ee c9 ff f8 	sub	r9,r7,-8
800055d4:	18 9a       	mov	r10,r12
	int i;
	
	UQuat_t qinv;
	qinv.s = q.s;
800055d6:	72 08       	ld.w	r8,r9[0x0]
800055d8:	ef 48 ff ec 	st.w	r7[-20],r8
	for (i=0;i<3;i++)
800055dc:	30 08       	mov	r8,0
800055de:	ef 48 ff fc 	st.w	r7[-4],r8
800055e2:	c1 58       	rjmp	8000560c <quat_inv+0x44>
	{
		qinv.v[i] = -q.v[i];
800055e4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800055e8:	ee fb ff fc 	ld.w	r11,r7[-4]
800055ec:	2f fb       	sub	r11,-1
800055ee:	f2 0b 03 2b 	ld.w	r11,r9[r11<<0x2]
800055f2:	ee 1b 80 00 	eorh	r11,0x8000
800055f6:	2f f8       	sub	r8,-1
800055f8:	a3 68       	lsl	r8,0x2
800055fa:	ee 08 00 08 	add	r8,r7,r8
800055fe:	f1 4b ff ec 	st.w	r8[-20],r11
{
	int i;
	
	UQuat_t qinv;
	qinv.s = q.s;
	for (i=0;i<3;i++)
80005602:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005606:	2f f8       	sub	r8,-1
80005608:	ef 48 ff fc 	st.w	r7[-4],r8
8000560c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005610:	58 28       	cp.w	r8,2
80005612:	fe 9a ff e9 	brle	800055e4 <quat_inv+0x1c>
	{
		qinv.v[i] = -q.v[i];
	}
	return qinv;
80005616:	14 98       	mov	r8,r10
80005618:	ee c9 00 14 	sub	r9,r7,20
8000561c:	20 08       	sub	r8,0
8000561e:	20 09       	sub	r9,0
80005620:	72 0b       	ld.w	r11,r9[0x0]
80005622:	91 0b       	st.w	r8[0x0],r11
80005624:	72 1b       	ld.w	r11,r9[0x4]
80005626:	91 1b       	st.w	r8[0x4],r11
80005628:	72 2b       	ld.w	r11,r9[0x8]
8000562a:	91 2b       	st.w	r8[0x8],r11
8000562c:	72 39       	ld.w	r9,r9[0xc]
8000562e:	91 39       	st.w	r8[0xc],r9
}
80005630:	14 9c       	mov	r12,r10
80005632:	2f bd       	sub	sp,-20
80005634:	e3 cd 80 80 	ldm	sp++,r7,pc

80005638 <quat_global_to_local>:

UQuat_t static inline quat_global_to_local(const UQuat_t qe, const UQuat_t qvect)
{
80005638:	eb cd 40 e8 	pushm	r3,r5-r7,lr
8000563c:	1a 97       	mov	r7,sp
8000563e:	20 cd       	sub	sp,48
80005640:	4b c6       	lddpc	r6,80005730 <quat_global_to_local+0xf8>
80005642:	1e 26       	rsub	r6,pc
80005644:	ee c5 ff ec 	sub	r5,r7,-20
80005648:	18 93       	mov	r3,r12
	UQuat_t qinv, qtmp;
	
	qinv = quat_inv(qe);
8000564a:	ee ca 00 10 	sub	r10,r7,16
8000564e:	20 4d       	sub	sp,16
80005650:	1a 98       	mov	r8,sp
80005652:	0a 99       	mov	r9,r5
80005654:	20 08       	sub	r8,0
80005656:	20 09       	sub	r9,0
80005658:	72 0b       	ld.w	r11,r9[0x0]
8000565a:	91 0b       	st.w	r8[0x0],r11
8000565c:	72 1b       	ld.w	r11,r9[0x4]
8000565e:	91 1b       	st.w	r8[0x4],r11
80005660:	72 2b       	ld.w	r11,r9[0x8]
80005662:	91 2b       	st.w	r8[0x8],r11
80005664:	72 39       	ld.w	r9,r9[0xc]
80005666:	91 39       	st.w	r8[0xc],r9
80005668:	14 9c       	mov	r12,r10
8000566a:	ca ff       	rcall	800055c8 <quat_inv>
8000566c:	2f cd       	sub	sp,-16
	qtmp = quat_multi(qinv,qvect);
8000566e:	ee ca 00 20 	sub	r10,r7,32
80005672:	20 4d       	sub	sp,16
80005674:	1a 98       	mov	r8,sp
80005676:	ea c9 ff f0 	sub	r9,r5,-16
8000567a:	20 08       	sub	r8,0
8000567c:	20 09       	sub	r9,0
8000567e:	72 0b       	ld.w	r11,r9[0x0]
80005680:	91 0b       	st.w	r8[0x0],r11
80005682:	72 1b       	ld.w	r11,r9[0x4]
80005684:	91 1b       	st.w	r8[0x4],r11
80005686:	72 2b       	ld.w	r11,r9[0x8]
80005688:	91 2b       	st.w	r8[0x8],r11
8000568a:	72 39       	ld.w	r9,r9[0xc]
8000568c:	91 39       	st.w	r8[0xc],r9
8000568e:	20 4d       	sub	sp,16
80005690:	1a 98       	mov	r8,sp
80005692:	ee c9 00 10 	sub	r9,r7,16
80005696:	20 08       	sub	r8,0
80005698:	20 09       	sub	r9,0
8000569a:	72 0b       	ld.w	r11,r9[0x0]
8000569c:	91 0b       	st.w	r8[0x0],r11
8000569e:	72 1b       	ld.w	r11,r9[0x4]
800056a0:	91 1b       	st.w	r8[0x4],r11
800056a2:	72 2b       	ld.w	r11,r9[0x8]
800056a4:	91 2b       	st.w	r8[0x8],r11
800056a6:	72 39       	ld.w	r9,r9[0xc]
800056a8:	91 39       	st.w	r8[0xc],r9
800056aa:	14 9c       	mov	r12,r10
800056ac:	c0 ef       	rcall	800054c8 <quat_multi>
800056ae:	2f 8d       	sub	sp,-32
	qtmp = quat_multi(qtmp,qe);
800056b0:	ee ca 00 30 	sub	r10,r7,48
800056b4:	20 4d       	sub	sp,16
800056b6:	1a 98       	mov	r8,sp
800056b8:	0a 99       	mov	r9,r5
800056ba:	20 08       	sub	r8,0
800056bc:	20 09       	sub	r9,0
800056be:	72 0b       	ld.w	r11,r9[0x0]
800056c0:	91 0b       	st.w	r8[0x0],r11
800056c2:	72 1b       	ld.w	r11,r9[0x4]
800056c4:	91 1b       	st.w	r8[0x4],r11
800056c6:	72 2b       	ld.w	r11,r9[0x8]
800056c8:	91 2b       	st.w	r8[0x8],r11
800056ca:	72 39       	ld.w	r9,r9[0xc]
800056cc:	91 39       	st.w	r8[0xc],r9
800056ce:	20 4d       	sub	sp,16
800056d0:	1a 98       	mov	r8,sp
800056d2:	ee c9 00 20 	sub	r9,r7,32
800056d6:	20 08       	sub	r8,0
800056d8:	20 09       	sub	r9,0
800056da:	72 0b       	ld.w	r11,r9[0x0]
800056dc:	91 0b       	st.w	r8[0x0],r11
800056de:	72 1b       	ld.w	r11,r9[0x4]
800056e0:	91 1b       	st.w	r8[0x4],r11
800056e2:	72 2b       	ld.w	r11,r9[0x8]
800056e4:	91 2b       	st.w	r8[0x8],r11
800056e6:	72 39       	ld.w	r9,r9[0xc]
800056e8:	91 39       	st.w	r8[0xc],r9
800056ea:	14 9c       	mov	r12,r10
800056ec:	ce ee       	rcall	800054c8 <quat_multi>
800056ee:	2f 8d       	sub	sp,-32
800056f0:	ee c8 00 20 	sub	r8,r7,32
800056f4:	ee c9 00 30 	sub	r9,r7,48
800056f8:	20 08       	sub	r8,0
800056fa:	20 09       	sub	r9,0
800056fc:	72 0a       	ld.w	r10,r9[0x0]
800056fe:	91 0a       	st.w	r8[0x0],r10
80005700:	72 1a       	ld.w	r10,r9[0x4]
80005702:	91 1a       	st.w	r8[0x4],r10
80005704:	72 2a       	ld.w	r10,r9[0x8]
80005706:	91 2a       	st.w	r8[0x8],r10
80005708:	72 39       	ld.w	r9,r9[0xc]
8000570a:	91 39       	st.w	r8[0xc],r9

	return qtmp;
8000570c:	06 98       	mov	r8,r3
8000570e:	ee c9 00 20 	sub	r9,r7,32
80005712:	20 08       	sub	r8,0
80005714:	20 09       	sub	r9,0
80005716:	72 0a       	ld.w	r10,r9[0x0]
80005718:	91 0a       	st.w	r8[0x0],r10
8000571a:	72 1a       	ld.w	r10,r9[0x4]
8000571c:	91 1a       	st.w	r8[0x4],r10
8000571e:	72 2a       	ld.w	r10,r9[0x8]
80005720:	91 2a       	st.w	r8[0x8],r10
80005722:	72 39       	ld.w	r9,r9[0xc]
80005724:	91 39       	st.w	r8[0xc],r9
}
80005726:	06 9c       	mov	r12,r3
80005728:	2f 4d       	sub	sp,-48
8000572a:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
8000572e:	00 00       	add	r0,r0
80005730:	80 00       	ld.sh	r0,r0[0x0]
80005732:	54 c6       	stdsp	sp[0x130],r6

80005734 <fast_sqrt>:
	
	return qtmp;
}

// fast newton iteration for approximate square root
float static inline fast_sqrt(float input) {
80005734:	eb cd 40 c0 	pushm	r6-r7,lr
80005738:	1a 97       	mov	r7,sp
8000573a:	20 2d       	sub	sp,8
8000573c:	4b 26       	lddpc	r6,80005804 <fast_sqrt+0xd0>
8000573e:	1e 26       	rsub	r6,pc
80005740:	ef 4c ff f8 	st.w	r7[-8],r12
	if (input<0) {
80005744:	30 18       	mov	r8,1
80005746:	ee fa ff f8 	ld.w	r10,r7[-8]
8000574a:	30 09       	mov	r9,0
8000574c:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80005750:	e0 8c 00 03 	brvs	80005756 <fast_sqrt+0x22>
80005754:	c0 25       	brlt	80005758 <fast_sqrt+0x24>
80005756:	30 08       	mov	r8,0
80005758:	5c 58       	castu.b	r8
8000575a:	c0 30       	breq	80005760 <fast_sqrt+0x2c>
		//dbg_print("negative root");
		return 0.0;
8000575c:	30 08       	mov	r8,0
8000575e:	c4 f8       	rjmp	800057fc <fast_sqrt+0xc8>
	}
	float result=1.0;
80005760:	fc 18 3f 80 	movh	r8,0x3f80
80005764:	ef 48 ff fc 	st.w	r7[-4],r8
	result=0.5*(result+(input/result));
80005768:	ee fb ff fc 	ld.w	r11,r7[-4]
8000576c:	ee fc ff f8 	ld.w	r12,r7[-8]
80005770:	f0 16 00 08 	mcall	r6[32]
80005774:	18 98       	mov	r8,r12
80005776:	10 99       	mov	r9,r8
80005778:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000577c:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80005780:	fc 18 3f 00 	movh	r8,0x3f00
80005784:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80005788:	ef 48 ff fc 	st.w	r7[-4],r8
	result=0.5*(result+(input/result));
8000578c:	ee fb ff fc 	ld.w	r11,r7[-4]
80005790:	ee fc ff f8 	ld.w	r12,r7[-8]
80005794:	f0 16 00 08 	mcall	r6[32]
80005798:	18 98       	mov	r8,r12
8000579a:	10 99       	mov	r9,r8
8000579c:	ee f8 ff fc 	ld.w	r8,r7[-4]
800057a0:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
800057a4:	fc 18 3f 00 	movh	r8,0x3f00
800057a8:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
800057ac:	ef 48 ff fc 	st.w	r7[-4],r8
	result=0.5*(result+(input/result));
800057b0:	ee fb ff fc 	ld.w	r11,r7[-4]
800057b4:	ee fc ff f8 	ld.w	r12,r7[-8]
800057b8:	f0 16 00 08 	mcall	r6[32]
800057bc:	18 98       	mov	r8,r12
800057be:	10 99       	mov	r9,r8
800057c0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800057c4:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
800057c8:	fc 18 3f 00 	movh	r8,0x3f00
800057cc:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
800057d0:	ef 48 ff fc 	st.w	r7[-4],r8
	result=0.5*(result+(input/result));
800057d4:	ee fb ff fc 	ld.w	r11,r7[-4]
800057d8:	ee fc ff f8 	ld.w	r12,r7[-8]
800057dc:	f0 16 00 08 	mcall	r6[32]
800057e0:	18 98       	mov	r8,r12
800057e2:	10 99       	mov	r9,r8
800057e4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800057e8:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
800057ec:	fc 18 3f 00 	movh	r8,0x3f00
800057f0:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
800057f4:	ef 48 ff fc 	st.w	r7[-4],r8
	return result;
800057f8:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
800057fc:	10 9c       	mov	r12,r8
800057fe:	2f ed       	sub	sp,-8
80005800:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80005804:	80 00       	ld.sh	r0,r0[0x0]
80005806:	55 c2       	stdsp	sp[0x170],r2

80005808 <vector_norm_sqr>:

float static inline vector_norm_sqr(float u[])
{
80005808:	eb cd 40 c0 	pushm	r6-r7,lr
8000580c:	1a 97       	mov	r7,sp
8000580e:	20 2d       	sub	sp,8
80005810:	48 96       	lddpc	r6,80005834 <vector_norm_sqr+0x2c>
80005812:	1e 26       	rsub	r6,pc
80005814:	ef 4c ff f8 	st.w	r7[-8],r12
	float norm = scalar_product(u,u);
80005818:	ee fb ff f8 	ld.w	r11,r7[-8]
8000581c:	ee fc ff f8 	ld.w	r12,r7[-8]
80005820:	c2 4e       	rcall	80005468 <scalar_product>
80005822:	18 98       	mov	r8,r12
80005824:	ef 48 ff fc 	st.w	r7[-4],r8
	return norm;
80005828:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8000582c:	10 9c       	mov	r12,r8
8000582e:	2f ed       	sub	sp,-8
80005830:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80005834:	80 00       	ld.sh	r0,r0[0x0]
80005836:	56 96       	stdsp	sp[0x1a4],r6

80005838 <vector_norm>:

float static inline vector_norm(float u[])
{
80005838:	eb cd 40 c0 	pushm	r6-r7,lr
8000583c:	1a 97       	mov	r7,sp
8000583e:	20 1d       	sub	sp,4
80005840:	48 86       	lddpc	r6,80005860 <vector_norm+0x28>
80005842:	1e 26       	rsub	r6,pc
80005844:	ef 4c ff fc 	st.w	r7[-4],r12
	return fast_sqrt(vector_norm_sqr(u));
80005848:	ee fc ff fc 	ld.w	r12,r7[-4]
8000584c:	cd ef       	rcall	80005808 <vector_norm_sqr>
8000584e:	18 98       	mov	r8,r12
80005850:	10 9c       	mov	r12,r8
80005852:	c7 1f       	rcall	80005734 <fast_sqrt>
80005854:	18 98       	mov	r8,r12
}
80005856:	10 9c       	mov	r12,r8
80005858:	2f fd       	sub	sp,-4
8000585a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000585e:	00 00       	add	r0,r0
80005860:	80 00       	ld.sh	r0,r0[0x0]
80005862:	56 c6       	stdsp	sp[0x1b0],r6

80005864 <f_min>:
	}else{
		return -a;
	}
}

static inline float f_min(const float a, const float b){
80005864:	eb cd 40 80 	pushm	r7,lr
80005868:	1a 97       	mov	r7,sp
8000586a:	20 2d       	sub	sp,8
8000586c:	ef 4c ff fc 	st.w	r7[-4],r12
80005870:	ef 4b ff f8 	st.w	r7[-8],r11
	if (a <= b)
80005874:	30 18       	mov	r8,1
80005876:	ee fa ff fc 	ld.w	r10,r7[-4]
8000587a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000587e:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80005882:	e0 8c 00 04 	brvs	8000588a <f_min+0x26>
80005886:	e0 8a 00 03 	brle	8000588c <f_min+0x28>
8000588a:	30 08       	mov	r8,0
8000588c:	5c 58       	castu.b	r8
8000588e:	c0 40       	breq	80005896 <f_min+0x32>
	{
		return a;
80005890:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005894:	c0 38       	rjmp	8000589a <f_min+0x36>
	}else{
		return b;
80005896:	ee f8 ff f8 	ld.w	r8,r7[-8]
	}
}
8000589a:	10 9c       	mov	r12,r8
8000589c:	2f ed       	sub	sp,-8
8000589e:	e3 cd 80 80 	ldm	sp++,r7,pc

800058a2 <f_max>:

static inline float f_max(const float a, const float b){
800058a2:	eb cd 40 80 	pushm	r7,lr
800058a6:	1a 97       	mov	r7,sp
800058a8:	20 2d       	sub	sp,8
800058aa:	ef 4c ff fc 	st.w	r7[-4],r12
800058ae:	ef 4b ff f8 	st.w	r7[-8],r11
	if (a >= b)
800058b2:	30 18       	mov	r8,1
800058b4:	ee fa ff fc 	ld.w	r10,r7[-4]
800058b8:	ee f9 ff f8 	ld.w	r9,r7[-8]
800058bc:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
800058c0:	e0 8c 00 03 	brvs	800058c6 <f_max+0x24>
800058c4:	c0 24       	brge	800058c8 <f_max+0x26>
800058c6:	30 08       	mov	r8,0
800058c8:	5c 58       	castu.b	r8
800058ca:	c0 40       	breq	800058d2 <f_max+0x30>
	{
		return a;
800058cc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800058d0:	c0 38       	rjmp	800058d6 <f_max+0x34>
	}else{
		return b;
800058d2:	ee f8 ff f8 	ld.w	r8,r7[-8]
	}
}
800058d6:	10 9c       	mov	r12,r8
800058d8:	2f ed       	sub	sp,-8
800058da:	e3 cd 80 80 	ldm	sp++,r7,pc

800058de <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
800058de:	eb cd 40 c0 	pushm	r6-r7,lr
800058e2:	1a 97       	mov	r7,sp
800058e4:	20 6d       	sub	sp,24
800058e6:	49 f6       	lddpc	r6,80005960 <interpolate+0x82>
800058e8:	1e 26       	rsub	r6,pc
800058ea:	ef 4c ff f8 	st.w	r7[-8],r12
800058ee:	ef 4b ff f4 	st.w	r7[-12],r11
800058f2:	ef 4a ff f0 	st.w	r7[-16],r10
800058f6:	ef 49 ff ec 	st.w	r7[-20],r9
800058fa:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
800058fe:	ee f9 ff f4 	ld.w	r9,r7[-12]
80005902:	ee f8 ff f0 	ld.w	r8,r7[-16]
80005906:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
8000590a:	c0 41       	brne	80005912 <interpolate+0x34>
	{
		return y1;
8000590c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80005910:	c2 38       	rjmp	80005956 <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
80005912:	ee f9 ff e8 	ld.w	r9,r7[-24]
80005916:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000591a:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8000591e:	ee fa ff f8 	ld.w	r10,r7[-8]
80005922:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005926:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
8000592a:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8000592e:	ee fa ff f0 	ld.w	r10,r7[-16]
80005932:	ee f9 ff f4 	ld.w	r9,r7[-12]
80005936:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8000593a:	12 9b       	mov	r11,r9
8000593c:	10 9c       	mov	r12,r8
8000593e:	f0 16 00 08 	mcall	r6[32]
80005942:	18 98       	mov	r8,r12
80005944:	10 99       	mov	r9,r8
80005946:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000594a:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8000594e:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
80005952:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
80005956:	10 9c       	mov	r12,r8
80005958:	2f ad       	sub	sp,-24
8000595a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000595e:	00 00       	add	r0,r0
80005960:	80 00       	ld.sh	r0,r0[0x0]
80005962:	57 6c       	stdsp	sp[0x1d8],r12

80005964 <init_orca>:
float timeHorizon, invTimeHorizon;

int8_t loop_count_orca = 0;

void init_orca()
{
80005964:	eb cd 40 c0 	pushm	r6-r7,lr
80005968:	1a 97       	mov	r7,sp
8000596a:	49 26       	lddpc	r6,800059b0 <init_orca+0x4c>
8000596c:	1e 26       	rsub	r6,pc
	centralData = get_central_data();
8000596e:	f0 16 00 31 	mcall	r6[196]
80005972:	18 99       	mov	r9,r12
80005974:	ec f8 00 00 	ld.w	r8,r6[0]
80005978:	91 09       	st.w	r8[0x0],r9
	centralData->safe_size = SIZE_VHC_ORCA;
8000597a:	ec f8 00 00 	ld.w	r8,r6[0]
8000597e:	70 08       	ld.w	r8,r8[0x0]
80005980:	fc 19 40 a0 	movh	r9,0x40a0
80005984:	f1 49 11 00 	st.w	r8[4352],r9
		
	timeHorizon = TIME_HORIZON;
80005988:	ec f8 04 0c 	ld.w	r8,r6[1036]
8000598c:	fc 19 41 40 	movh	r9,0x4140
80005990:	91 09       	st.w	r8[0x0],r9
	invTimeHorizon = 1.0/timeHorizon;
80005992:	ec f8 04 0c 	ld.w	r8,r6[1036]
80005996:	70 08       	ld.w	r8,r8[0x0]
80005998:	10 9b       	mov	r11,r8
8000599a:	fc 1c 3f 80 	movh	r12,0x3f80
8000599e:	f0 16 00 08 	mcall	r6[32]
800059a2:	18 98       	mov	r8,r12
800059a4:	10 99       	mov	r9,r8
800059a6:	ec f8 02 90 	ld.w	r8,r6[656]
800059aa:	91 09       	st.w	r8[0x0],r9
}
800059ac:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800059b0:	80 00       	ld.sh	r0,r0[0x0]
800059b2:	57 f0       	stdsp	sp[0x1fc],r0
800059b4:	43 6f       	lddsp	pc,sp[0xd8]
800059b6:	6c 6c       	ld.w	r12,r6[0x18]
800059b8:	69 73       	ld.w	r3,r4[0x5c]
800059ba:	69 6f       	ld.w	pc,r4[0x58]
800059bc:	6e 21       	ld.w	r1,r7[0x8]
800059be:	20 00       	sub	r0,0
800059c0:	44 69       	lddsp	r9,sp[0x118]
800059c2:	73 74       	ld.w	r4,r9[0x5c]
800059c4:	61 6e       	ld.w	lr,r0[0x58]
800059c6:	63 65       	ld.w	r5,r1[0x58]
800059c8:	20 77       	sub	r7,7
800059ca:	69 74       	ld.w	r4,r4[0x5c]
800059cc:	68 20       	ld.w	r0,r4[0x8]
800059ce:	6e 65       	ld.w	r5,r7[0x18]
800059d0:	69 67       	ld.w	r7,r4[0x58]
800059d2:	68 62       	ld.w	r2,r4[0x18]
800059d4:	6f 72       	ld.w	r2,r7[0x5c]
800059d6:	20 00       	sub	r0,0
800059d8:	28 78       	sub	r8,-121
800059da:	31 30       	mov	r0,19
800059dc:	30 29       	mov	r9,2
800059de:	3a 00       	mov	r0,-96
800059e0:	0a 00       	add	r0,r5
800059e2:	00 00       	add	r0,r0
800059e4:	4f 72       	lddpc	r2,80005bc0 <computeNewVelocity+0x1b8>
800059e6:	63 61       	ld.w	r1,r1[0x58]
800059e8:	20 64       	sub	r4,6
800059ea:	69 66       	ld.w	r6,r4[0x58]
800059ec:	66 76       	ld.w	r6,r3[0x1c]
800059ee:	65 6c       	ld.w	r12,r2[0x58]
800059f0:	3a 00       	mov	r0,-96
800059f2:	00 00       	add	r0,r0
800059f4:	2c 20       	sub	r0,-62
800059f6:	4f 70       	lddpc	r0,80005bd0 <computeNewVelocity+0x1c8>
800059f8:	74 69       	ld.w	r9,r10[0x18]
800059fa:	6d 61       	ld.w	r1,r6[0x58]
800059fc:	6c 3a       	ld.w	r10,r6[0xc]
800059fe:	00 00       	add	r0,r0
80005a00:	2c 20       	sub	r0,-62
80005a02:	4e 65       	lddpc	r5,80005b98 <computeNewVelocity+0x190>
80005a04:	77 3a       	ld.w	r10,r11[0x4c]
	...

80005a08 <computeNewVelocity>:

void computeNewVelocity(float OptimalVelocity[], float NewVelocity[])
{
80005a08:	eb cd 40 ee 	pushm	r1-r3,r5-r7,lr
80005a0c:	1a 97       	mov	r7,sp
80005a0e:	fa cd 02 28 	sub	sp,sp,552
80005a12:	fe f6 09 f6 	ld.w	r6,pc[2550]
80005a16:	1e 26       	rsub	r6,pc
80005a18:	ef 4c fd ec 	st.w	r7[-532],r12
80005a1c:	ef 4b fd e8 	st.w	r7[-536],r11
	float relativePosition[3], relativeVelocity[3];
	float combinedRadius, distSq, combinedRadiusSq, dotProduct, wLength, wLenghtSq;
	
	float w[3], unitW[3], u[3];
	
	for (i=0;i<3;i++)
80005a20:	30 08       	mov	r8,0
80005a22:	ef 68 ff cf 	st.b	r7[-49],r8
80005a26:	c1 68       	rjmp	80005a52 <computeNewVelocity+0x4a>
	{
		NewVelocity[i] = OptimalVelocity[i];
80005a28:	ef 38 ff cf 	ld.ub	r8,r7[-49]
80005a2c:	a3 68       	lsl	r8,0x2
80005a2e:	ee f9 fd e8 	ld.w	r9,r7[-536]
80005a32:	f2 08 00 08 	add	r8,r9,r8
80005a36:	ef 39 ff cf 	ld.ub	r9,r7[-49]
80005a3a:	a3 69       	lsl	r9,0x2
80005a3c:	ee fa fd ec 	ld.w	r10,r7[-532]
80005a40:	f4 09 00 09 	add	r9,r10,r9
80005a44:	72 09       	ld.w	r9,r9[0x0]
80005a46:	91 09       	st.w	r8[0x0],r9
	float relativePosition[3], relativeVelocity[3];
	float combinedRadius, distSq, combinedRadiusSq, dotProduct, wLength, wLenghtSq;
	
	float w[3], unitW[3], u[3];
	
	for (i=0;i<3;i++)
80005a48:	ef 38 ff cf 	ld.ub	r8,r7[-49]
80005a4c:	2f f8       	sub	r8,-1
80005a4e:	ef 68 ff cf 	st.b	r7[-49],r8
80005a52:	ef 39 ff cf 	ld.ub	r9,r7[-49]
80005a56:	30 28       	mov	r8,2
80005a58:	f0 09 18 00 	cp.b	r9,r8
80005a5c:	fe 98 ff e6 	brls	80005a28 <computeNewVelocity+0x20>
	{
		NewVelocity[i] = OptimalVelocity[i];
	}
	
	/* Create agent ORCA planes. */
	for (ind=0; ind<centralData->number_of_neighbors; ind++)
80005a60:	30 08       	mov	r8,0
80005a62:	ef 68 ff ce 	st.b	r7[-50],r8
80005a66:	e0 8f 04 1a 	bral	8000629a <computeNewVelocity+0x892>
		//{
			//relativePosition[i] = centralData->listNeighbors[ind].position[i] - centralData->position_estimator.localPosition.pos[i];
			//relativeVelocity[i] = centralData->position_estimator.vel_bf[i] - neighor_bf[i];
		//}
		
		for (i=0;i<3;i++)
80005a6a:	30 08       	mov	r8,0
80005a6c:	ef 68 ff cf 	st.b	r7[-49],r8
80005a70:	c4 68       	rjmp	80005afc <computeNewVelocity+0xf4>
		{
			relativePosition[i] = centralData->listNeighbors[ind].position[i] - centralData->position_estimator.localPosition.pos[i];
80005a72:	ef 38 ff cf 	ld.ub	r8,r7[-49]
80005a76:	ec f9 00 00 	ld.w	r9,r6[0]
80005a7a:	72 09       	ld.w	r9,r9[0x0]
80005a7c:	ef 3b ff ce 	ld.ub	r11,r7[-50]
80005a80:	ef 3a ff cf 	ld.ub	r10,r7[-49]
80005a84:	a3 7b       	lsl	r11,0x3
80005a86:	f6 0a 00 0a 	add	r10,r11,r10
80005a8a:	f4 ca fb be 	sub	r10,r10,-1090
80005a8e:	f2 0a 03 2a 	ld.w	r10,r9[r10<<0x2]
80005a92:	ec f9 00 00 	ld.w	r9,r6[0]
80005a96:	72 09       	ld.w	r9,r9[0x0]
80005a98:	ef 3b ff cf 	ld.ub	r11,r7[-49]
80005a9c:	f6 cb fc 99 	sub	r11,r11,-871
80005aa0:	f2 0b 03 29 	ld.w	r9,r9[r11<<0x2]
80005aa4:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80005aa8:	a3 68       	lsl	r8,0x2
80005aaa:	ee 08 00 08 	add	r8,r7,r8
80005aae:	f1 49 fe 38 	st.w	r8[-456],r9
			relativeVelocity[i] = centralData->position_estimator.vel[i] - centralData->listNeighbors[ind].velocity[i];
80005ab2:	ef 38 ff cf 	ld.ub	r8,r7[-49]
80005ab6:	ec f9 00 00 	ld.w	r9,r6[0]
80005aba:	72 09       	ld.w	r9,r9[0x0]
80005abc:	ef 3a ff cf 	ld.ub	r10,r7[-49]
80005ac0:	f4 ca fc a3 	sub	r10,r10,-861
80005ac4:	f2 0a 03 2a 	ld.w	r10,r9[r10<<0x2]
80005ac8:	ec f9 00 00 	ld.w	r9,r6[0]
80005acc:	72 09       	ld.w	r9,r9[0x0]
80005ace:	ef 3c ff ce 	ld.ub	r12,r7[-50]
80005ad2:	ef 3b ff cf 	ld.ub	r11,r7[-49]
80005ad6:	a3 7c       	lsl	r12,0x3
80005ad8:	f8 0b 00 0b 	add	r11,r12,r11
80005adc:	f6 cb fb bb 	sub	r11,r11,-1093
80005ae0:	f2 0b 03 29 	ld.w	r9,r9[r11<<0x2]
80005ae4:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80005ae8:	a3 68       	lsl	r8,0x2
80005aea:	ee 08 00 08 	add	r8,r7,r8
80005aee:	f1 49 fe 2c 	st.w	r8[-468],r9
		//{
			//relativePosition[i] = centralData->listNeighbors[ind].position[i] - centralData->position_estimator.localPosition.pos[i];
			//relativeVelocity[i] = centralData->position_estimator.vel_bf[i] - neighor_bf[i];
		//}
		
		for (i=0;i<3;i++)
80005af2:	ef 38 ff cf 	ld.ub	r8,r7[-49]
80005af6:	2f f8       	sub	r8,-1
80005af8:	ef 68 ff cf 	st.b	r7[-49],r8
80005afc:	ef 39 ff cf 	ld.ub	r9,r7[-49]
80005b00:	30 28       	mov	r8,2
80005b02:	f0 09 18 00 	cp.b	r9,r8
80005b06:	fe 98 ff b6 	brls	80005a72 <computeNewVelocity+0x6a>
		{
			relativePosition[i] = centralData->listNeighbors[ind].position[i] - centralData->position_estimator.localPosition.pos[i];
			relativeVelocity[i] = centralData->position_estimator.vel[i] - centralData->listNeighbors[ind].velocity[i];
		}
		
		q_neighbor.s = 0.0;
80005b0a:	30 08       	mov	r8,0
80005b0c:	ef 48 fe 54 	st.w	r7[-428],r8
		q_neighbor.v[0] = relativeVelocity[0];
80005b10:	ee f8 fe 2c 	ld.w	r8,r7[-468]
80005b14:	ef 48 fe 58 	st.w	r7[-424],r8
		q_neighbor.v[1] = relativeVelocity[1];
80005b18:	ee f8 fe 30 	ld.w	r8,r7[-464]
80005b1c:	ef 48 fe 5c 	st.w	r7[-420],r8
		q_neighbor.v[2] = relativeVelocity[2];
80005b20:	ee f8 fe 34 	ld.w	r8,r7[-460]
80005b24:	ef 48 fe 60 	st.w	r7[-416],r8
		q_neighbor_bf = quat_global_to_local(centralData->imu1.attitude.qe,q_neighbor);
80005b28:	ec f8 00 00 	ld.w	r8,r6[0]
80005b2c:	70 0b       	ld.w	r11,r8[0x0]
80005b2e:	ee ca 02 28 	sub	r10,r7,552
80005b32:	20 4d       	sub	sp,16
80005b34:	1a 98       	mov	r8,sp
80005b36:	ee c9 01 ac 	sub	r9,r7,428
80005b3a:	20 08       	sub	r8,0
80005b3c:	20 09       	sub	r9,0
80005b3e:	72 0c       	ld.w	r12,r9[0x0]
80005b40:	91 0c       	st.w	r8[0x0],r12
80005b42:	72 1c       	ld.w	r12,r9[0x4]
80005b44:	91 1c       	st.w	r8[0x4],r12
80005b46:	72 2c       	ld.w	r12,r9[0x8]
80005b48:	91 2c       	st.w	r8[0x8],r12
80005b4a:	72 39       	ld.w	r9,r9[0xc]
80005b4c:	91 39       	st.w	r8[0xc],r9
80005b4e:	20 4d       	sub	sp,16
80005b50:	1a 98       	mov	r8,sp
80005b52:	16 99       	mov	r9,r11
80005b54:	20 08       	sub	r8,0
80005b56:	20 09       	sub	r9,0
80005b58:	72 0b       	ld.w	r11,r9[0x0]
80005b5a:	91 0b       	st.w	r8[0x0],r11
80005b5c:	72 1b       	ld.w	r11,r9[0x4]
80005b5e:	91 1b       	st.w	r8[0x4],r11
80005b60:	72 2b       	ld.w	r11,r9[0x8]
80005b62:	91 2b       	st.w	r8[0x8],r11
80005b64:	72 39       	ld.w	r9,r9[0xc]
80005b66:	91 39       	st.w	r8[0xc],r9
80005b68:	14 9c       	mov	r12,r10
80005b6a:	fe b0 fd 67 	rcall	80005638 <quat_global_to_local>
80005b6e:	2f 8d       	sub	sp,-32
80005b70:	ee c8 01 bc 	sub	r8,r7,444
80005b74:	ee c9 02 28 	sub	r9,r7,552
80005b78:	20 08       	sub	r8,0
80005b7a:	20 09       	sub	r9,0
80005b7c:	72 0a       	ld.w	r10,r9[0x0]
80005b7e:	91 0a       	st.w	r8[0x0],r10
80005b80:	72 1a       	ld.w	r10,r9[0x4]
80005b82:	91 1a       	st.w	r8[0x4],r10
80005b84:	72 2a       	ld.w	r10,r9[0x8]
80005b86:	91 2a       	st.w	r8[0x8],r10
80005b88:	72 39       	ld.w	r9,r9[0xc]
80005b8a:	91 39       	st.w	r8[0xc],r9
		
		for (i=0;i<3;i++)
80005b8c:	30 08       	mov	r8,0
80005b8e:	ef 68 ff cf 	st.b	r7[-49],r8
80005b92:	c1 68       	rjmp	80005bbe <computeNewVelocity+0x1b6>
		{
			relativeVelocity[i] = q_neighbor_bf.v[i];
80005b94:	ef 3a ff cf 	ld.ub	r10,r7[-49]
80005b98:	ef 38 ff cf 	ld.ub	r8,r7[-49]
80005b9c:	2f f8       	sub	r8,-1
80005b9e:	a3 68       	lsl	r8,0x2
80005ba0:	ee 08 00 08 	add	r8,r7,r8
80005ba4:	f0 f9 fe 44 	ld.w	r9,r8[-444]
80005ba8:	f4 08 15 02 	lsl	r8,r10,0x2
80005bac:	ee 08 00 08 	add	r8,r7,r8
80005bb0:	f1 49 fe 2c 	st.w	r8[-468],r9
		q_neighbor.v[0] = relativeVelocity[0];
		q_neighbor.v[1] = relativeVelocity[1];
		q_neighbor.v[2] = relativeVelocity[2];
		q_neighbor_bf = quat_global_to_local(centralData->imu1.attitude.qe,q_neighbor);
		
		for (i=0;i<3;i++)
80005bb4:	ef 38 ff cf 	ld.ub	r8,r7[-49]
80005bb8:	2f f8       	sub	r8,-1
80005bba:	ef 68 ff cf 	st.b	r7[-49],r8
80005bbe:	ef 39 ff cf 	ld.ub	r9,r7[-49]
80005bc2:	30 28       	mov	r8,2
80005bc4:	f0 09 18 00 	cp.b	r9,r8
80005bc8:	fe 98 ff e6 	brls	80005b94 <computeNewVelocity+0x18c>
		{
			relativeVelocity[i] = q_neighbor_bf.v[i];
		}
		
		q_neighbor.s = 0.0;
80005bcc:	30 08       	mov	r8,0
80005bce:	ef 48 fe 54 	st.w	r7[-428],r8
		q_neighbor.v[0] = relativePosition[0];
80005bd2:	ee f8 fe 38 	ld.w	r8,r7[-456]
80005bd6:	ef 48 fe 58 	st.w	r7[-424],r8
		q_neighbor.v[1] = relativePosition[1];
80005bda:	ee f8 fe 3c 	ld.w	r8,r7[-452]
80005bde:	ef 48 fe 5c 	st.w	r7[-420],r8
		q_neighbor.v[2] = relativePosition[2];
80005be2:	ee f8 fe 40 	ld.w	r8,r7[-448]
80005be6:	ef 48 fe 60 	st.w	r7[-416],r8
		q_neighbor_bf = quat_global_to_local(centralData->imu1.attitude.qe,q_neighbor);
80005bea:	ec f8 00 00 	ld.w	r8,r6[0]
80005bee:	70 0b       	ld.w	r11,r8[0x0]
80005bf0:	ee ca 02 28 	sub	r10,r7,552
80005bf4:	20 4d       	sub	sp,16
80005bf6:	1a 98       	mov	r8,sp
80005bf8:	ee c9 01 ac 	sub	r9,r7,428
80005bfc:	20 08       	sub	r8,0
80005bfe:	20 09       	sub	r9,0
80005c00:	72 0c       	ld.w	r12,r9[0x0]
80005c02:	91 0c       	st.w	r8[0x0],r12
80005c04:	72 1c       	ld.w	r12,r9[0x4]
80005c06:	91 1c       	st.w	r8[0x4],r12
80005c08:	72 2c       	ld.w	r12,r9[0x8]
80005c0a:	91 2c       	st.w	r8[0x8],r12
80005c0c:	72 39       	ld.w	r9,r9[0xc]
80005c0e:	91 39       	st.w	r8[0xc],r9
80005c10:	20 4d       	sub	sp,16
80005c12:	1a 98       	mov	r8,sp
80005c14:	16 99       	mov	r9,r11
80005c16:	20 08       	sub	r8,0
80005c18:	20 09       	sub	r9,0
80005c1a:	72 0b       	ld.w	r11,r9[0x0]
80005c1c:	91 0b       	st.w	r8[0x0],r11
80005c1e:	72 1b       	ld.w	r11,r9[0x4]
80005c20:	91 1b       	st.w	r8[0x4],r11
80005c22:	72 2b       	ld.w	r11,r9[0x8]
80005c24:	91 2b       	st.w	r8[0x8],r11
80005c26:	72 39       	ld.w	r9,r9[0xc]
80005c28:	91 39       	st.w	r8[0xc],r9
80005c2a:	14 9c       	mov	r12,r10
80005c2c:	fe b0 fd 06 	rcall	80005638 <quat_global_to_local>
80005c30:	2f 8d       	sub	sp,-32
80005c32:	ee c8 01 bc 	sub	r8,r7,444
80005c36:	ee c9 02 28 	sub	r9,r7,552
80005c3a:	20 08       	sub	r8,0
80005c3c:	20 09       	sub	r9,0
80005c3e:	72 0a       	ld.w	r10,r9[0x0]
80005c40:	91 0a       	st.w	r8[0x0],r10
80005c42:	72 1a       	ld.w	r10,r9[0x4]
80005c44:	91 1a       	st.w	r8[0x4],r10
80005c46:	72 2a       	ld.w	r10,r9[0x8]
80005c48:	91 2a       	st.w	r8[0x8],r10
80005c4a:	72 39       	ld.w	r9,r9[0xc]
80005c4c:	91 39       	st.w	r8[0xc],r9
		
		for (i=0;i<3;i++)
80005c4e:	30 08       	mov	r8,0
80005c50:	ef 68 ff cf 	st.b	r7[-49],r8
80005c54:	c1 68       	rjmp	80005c80 <computeNewVelocity+0x278>
		{
			relativePosition[i] = q_neighbor_bf.v[i];
80005c56:	ef 3a ff cf 	ld.ub	r10,r7[-49]
80005c5a:	ef 38 ff cf 	ld.ub	r8,r7[-49]
80005c5e:	2f f8       	sub	r8,-1
80005c60:	a3 68       	lsl	r8,0x2
80005c62:	ee 08 00 08 	add	r8,r7,r8
80005c66:	f0 f9 fe 44 	ld.w	r9,r8[-444]
80005c6a:	f4 08 15 02 	lsl	r8,r10,0x2
80005c6e:	ee 08 00 08 	add	r8,r7,r8
80005c72:	f1 49 fe 38 	st.w	r8[-456],r9
		q_neighbor.v[0] = relativePosition[0];
		q_neighbor.v[1] = relativePosition[1];
		q_neighbor.v[2] = relativePosition[2];
		q_neighbor_bf = quat_global_to_local(centralData->imu1.attitude.qe,q_neighbor);
		
		for (i=0;i<3;i++)
80005c76:	ef 38 ff cf 	ld.ub	r8,r7[-49]
80005c7a:	2f f8       	sub	r8,-1
80005c7c:	ef 68 ff cf 	st.b	r7[-49],r8
80005c80:	ef 39 ff cf 	ld.ub	r9,r7[-49]
80005c84:	30 28       	mov	r8,2
80005c86:	f0 09 18 00 	cp.b	r9,r8
80005c8a:	fe 98 ff e6 	brls	80005c56 <computeNewVelocity+0x24e>
		{
			relativePosition[i] = q_neighbor_bf.v[i];
		}
		
		distSq = vector_norm_sqr(relativePosition);
80005c8e:	ee c8 01 c8 	sub	r8,r7,456
80005c92:	10 9c       	mov	r12,r8
80005c94:	fe b0 fd ba 	rcall	80005808 <vector_norm_sqr>
80005c98:	18 98       	mov	r8,r12
80005c9a:	ef 48 ff d4 	st.w	r7[-44],r8
		combinedRadius = centralData->safe_size + centralData->listNeighbors[ind].size;
80005c9e:	ec f8 00 00 	ld.w	r8,r6[0]
80005ca2:	70 08       	ld.w	r8,r8[0x0]
80005ca4:	f0 f9 11 00 	ld.w	r9,r8[4352]
80005ca8:	ec f8 00 00 	ld.w	r8,r6[0]
80005cac:	70 0a       	ld.w	r10,r8[0x0]
80005cae:	ef 38 ff ce 	ld.ub	r8,r7[-50]
80005cb2:	f0 c8 ff 77 	sub	r8,r8,-137
80005cb6:	a5 78       	lsl	r8,0x5
80005cb8:	f4 08 00 08 	add	r8,r10,r8
80005cbc:	70 08       	ld.w	r8,r8[0x0]
80005cbe:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80005cc2:	ef 48 ff d0 	st.w	r7[-48],r8
		combinedRadiusSq = SQR(combinedRadius);
80005cc6:	ee f9 ff d0 	ld.w	r9,r7[-48]
80005cca:	ee f8 ff d0 	ld.w	r8,r7[-48]
80005cce:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80005cd2:	ef 48 ff d8 	st.w	r7[-40],r8
		
		
		if (distSq > combinedRadiusSq)
80005cd6:	30 18       	mov	r8,1
80005cd8:	ee fa ff d4 	ld.w	r10,r7[-44]
80005cdc:	ee f9 ff d8 	ld.w	r9,r7[-40]
80005ce0:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80005ce4:	e0 8c 00 04 	brvs	80005cec <computeNewVelocity+0x2e4>
80005ce8:	e0 89 00 03 	brgt	80005cee <computeNewVelocity+0x2e6>
80005cec:	30 08       	mov	r8,0
80005cee:	5c 58       	castu.b	r8
80005cf0:	e0 80 01 c7 	breq	8000607e <computeNewVelocity+0x676>
		{
			/* No collisions */
			for (i=0;i<3;i++)
80005cf4:	30 08       	mov	r8,0
80005cf6:	ef 68 ff cf 	st.b	r7[-49],r8
80005cfa:	c2 38       	rjmp	80005d40 <computeNewVelocity+0x338>
			{
				w[i] = relativeVelocity[i] - invTimeHorizon * relativePosition[i];
80005cfc:	ef 3a ff cf 	ld.ub	r10,r7[-49]
80005d00:	ef 38 ff cf 	ld.ub	r8,r7[-49]
80005d04:	a3 68       	lsl	r8,0x2
80005d06:	ee 08 00 08 	add	r8,r7,r8
80005d0a:	f0 f9 fe 2c 	ld.w	r9,r8[-468]
80005d0e:	ef 38 ff cf 	ld.ub	r8,r7[-49]
80005d12:	a3 68       	lsl	r8,0x2
80005d14:	ee 08 00 08 	add	r8,r7,r8
80005d18:	f0 fb fe 38 	ld.w	r11,r8[-456]
80005d1c:	ec f8 02 90 	ld.w	r8,r6[656]
80005d20:	70 08       	ld.w	r8,r8[0x0]
80005d22:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
80005d26:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80005d2a:	f4 08 15 02 	lsl	r8,r10,0x2
80005d2e:	ee 08 00 08 	add	r8,r7,r8
80005d32:	f1 49 fe 20 	st.w	r8[-480],r9
		
		
		if (distSq > combinedRadiusSq)
		{
			/* No collisions */
			for (i=0;i<3;i++)
80005d36:	ef 38 ff cf 	ld.ub	r8,r7[-49]
80005d3a:	2f f8       	sub	r8,-1
80005d3c:	ef 68 ff cf 	st.b	r7[-49],r8
80005d40:	ef 39 ff cf 	ld.ub	r9,r7[-49]
80005d44:	30 28       	mov	r8,2
80005d46:	f0 09 18 00 	cp.b	r9,r8
80005d4a:	fe 98 ff d9 	brls	80005cfc <computeNewVelocity+0x2f4>
			{
				w[i] = relativeVelocity[i] - invTimeHorizon * relativePosition[i];
			}
			wLenghtSq = vector_norm_sqr(w);
80005d4e:	ee c8 01 e0 	sub	r8,r7,480
80005d52:	10 9c       	mov	r12,r8
80005d54:	fe b0 fd 5a 	rcall	80005808 <vector_norm_sqr>
80005d58:	18 98       	mov	r8,r12
80005d5a:	ef 48 ff e4 	st.w	r7[-28],r8
			
			dotProduct = scalar_product(w,relativePosition);
80005d5e:	ee c9 01 c8 	sub	r9,r7,456
80005d62:	ee c8 01 e0 	sub	r8,r7,480
80005d66:	12 9b       	mov	r11,r9
80005d68:	10 9c       	mov	r12,r8
80005d6a:	fe b0 fb 7f 	rcall	80005468 <scalar_product>
80005d6e:	18 98       	mov	r8,r12
80005d70:	ef 48 ff dc 	st.w	r7[-36],r8
			
			if ((dotProduct < 0.0)&&(SQR(dotProduct) > (combinedRadiusSq * wLenghtSq)))
80005d74:	30 18       	mov	r8,1
80005d76:	ee fa ff dc 	ld.w	r10,r7[-36]
80005d7a:	30 09       	mov	r9,0
80005d7c:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80005d80:	e0 8c 00 03 	brvs	80005d86 <computeNewVelocity+0x37e>
80005d84:	c0 25       	brlt	80005d88 <computeNewVelocity+0x380>
80005d86:	30 08       	mov	r8,0
80005d88:	5c 58       	castu.b	r8
80005d8a:	c7 70       	breq	80005e78 <computeNewVelocity+0x470>
80005d8c:	ee f9 ff dc 	ld.w	r9,r7[-36]
80005d90:	ee f8 ff dc 	ld.w	r8,r7[-36]
80005d94:	e5 a2 0a 98 	cop	cp0,cr10,cr9,cr8,0x44
80005d98:	ee f9 ff d8 	ld.w	r9,r7[-40]
80005d9c:	ee f8 ff e4 	ld.w	r8,r7[-28]
80005da0:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80005da4:	30 18       	mov	r8,1
80005da6:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80005daa:	e0 8c 00 04 	brvs	80005db2 <computeNewVelocity+0x3aa>
80005dae:	e0 89 00 03 	brgt	80005db4 <computeNewVelocity+0x3ac>
80005db2:	30 08       	mov	r8,0
80005db4:	5c 58       	castu.b	r8
80005db6:	c6 10       	breq	80005e78 <computeNewVelocity+0x470>
			{
				/* Project on cut-off circle. */
				wLength = fast_sqrt(wLenghtSq);
80005db8:	ee fc ff e4 	ld.w	r12,r7[-28]
80005dbc:	fe b0 fc bc 	rcall	80005734 <fast_sqrt>
80005dc0:	18 98       	mov	r8,r12
80005dc2:	ef 48 ff e0 	st.w	r7[-32],r8
				for (i=0;i<3;i++)
80005dc6:	30 08       	mov	r8,0
80005dc8:	ef 68 ff cf 	st.b	r7[-49],r8
80005dcc:	c4 d8       	rjmp	80005e66 <computeNewVelocity+0x45e>
				{
					unitW[i] = w[i] / wLength;
80005dce:	ef 35 ff cf 	ld.ub	r5,r7[-49]
80005dd2:	ef 38 ff cf 	ld.ub	r8,r7[-49]
80005dd6:	a3 68       	lsl	r8,0x2
80005dd8:	ee 08 00 08 	add	r8,r7,r8
80005ddc:	f0 f8 fe 20 	ld.w	r8,r8[-480]
80005de0:	ee fb ff e0 	ld.w	r11,r7[-32]
80005de4:	10 9c       	mov	r12,r8
80005de6:	f0 16 00 08 	mcall	r6[32]
80005dea:	18 98       	mov	r8,r12
80005dec:	10 99       	mov	r9,r8
80005dee:	ea 08 15 02 	lsl	r8,r5,0x2
80005df2:	ee 08 00 08 	add	r8,r7,r8
80005df6:	f1 49 fe 14 	st.w	r8[-492],r9
					planes[ind].normal[i] = unitW[i];
80005dfa:	ef 39 ff ce 	ld.ub	r9,r7[-50]
80005dfe:	ef 3b ff cf 	ld.ub	r11,r7[-49]
80005e02:	ef 38 ff cf 	ld.ub	r8,r7[-49]
80005e06:	a3 68       	lsl	r8,0x2
80005e08:	ee 08 00 08 	add	r8,r7,r8
80005e0c:	f0 fa fe 14 	ld.w	r10,r8[-492]
80005e10:	12 98       	mov	r8,r9
80005e12:	a1 78       	lsl	r8,0x1
80005e14:	12 08       	add	r8,r9
80005e16:	a1 78       	lsl	r8,0x1
80005e18:	16 08       	add	r8,r11
80005e1a:	a3 68       	lsl	r8,0x2
80005e1c:	ee 08 00 08 	add	r8,r7,r8
80005e20:	f1 4a fe 64 	st.w	r8[-412],r10
					u[i] = (combinedRadius * invTimeHorizon - wLength) * unitW[i];
80005e24:	ef 3a ff cf 	ld.ub	r10,r7[-49]
80005e28:	ec f8 02 90 	ld.w	r8,r6[656]
80005e2c:	70 09       	ld.w	r9,r8[0x0]
80005e2e:	ee f8 ff d0 	ld.w	r8,r7[-48]
80005e32:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80005e36:	ee f8 ff e0 	ld.w	r8,r7[-32]
80005e3a:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80005e3e:	ef 38 ff cf 	ld.ub	r8,r7[-49]
80005e42:	a3 68       	lsl	r8,0x2
80005e44:	ee 08 00 08 	add	r8,r7,r8
80005e48:	f0 f8 fe 14 	ld.w	r8,r8[-492]
80005e4c:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80005e50:	f4 08 15 02 	lsl	r8,r10,0x2
80005e54:	ee 08 00 08 	add	r8,r7,r8
80005e58:	f1 49 fe 08 	st.w	r8[-504],r9
			
			if ((dotProduct < 0.0)&&(SQR(dotProduct) > (combinedRadiusSq * wLenghtSq)))
			{
				/* Project on cut-off circle. */
				wLength = fast_sqrt(wLenghtSq);
				for (i=0;i<3;i++)
80005e5c:	ef 38 ff cf 	ld.ub	r8,r7[-49]
80005e60:	2f f8       	sub	r8,-1
80005e62:	ef 68 ff cf 	st.b	r7[-49],r8
80005e66:	ef 39 ff cf 	ld.ub	r9,r7[-49]
80005e6a:	30 28       	mov	r8,2
80005e6c:	f0 09 18 00 	cp.b	r9,r8
80005e70:	fe 98 ff af 	brls	80005dce <computeNewVelocity+0x3c6>
			}
			wLenghtSq = vector_norm_sqr(w);
			
			dotProduct = scalar_product(w,relativePosition);
			
			if ((dotProduct < 0.0)&&(SQR(dotProduct) > (combinedRadiusSq * wLenghtSq)))
80005e74:	e0 8f 01 c5 	bral	800061fe <computeNewVelocity+0x7f6>
					planes[ind].normal[i] = unitW[i];
					u[i] = (combinedRadius * invTimeHorizon - wLength) * unitW[i];
				}
			}else{
				/* Project on cone. */
				float a = distSq;
80005e78:	ee f8 ff d4 	ld.w	r8,r7[-44]
80005e7c:	ef 48 ff ec 	st.w	r7[-20],r8
				float b = scalar_product(relativePosition,relativeVelocity);
80005e80:	ee c9 01 d4 	sub	r9,r7,468
80005e84:	ee c8 01 c8 	sub	r8,r7,456
80005e88:	12 9b       	mov	r11,r9
80005e8a:	10 9c       	mov	r12,r8
80005e8c:	fe b0 fa ee 	rcall	80005468 <scalar_product>
80005e90:	18 98       	mov	r8,r12
80005e92:	ef 48 ff f0 	st.w	r7[-16],r8
				float crossProduct[3];
				CROSS(relativePosition,relativeVelocity,crossProduct);
80005e96:	ee f9 fe 3c 	ld.w	r9,r7[-452]
80005e9a:	ee f8 fe 34 	ld.w	r8,r7[-460]
80005e9e:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80005ea2:	ee fa fe 40 	ld.w	r10,r7[-448]
80005ea6:	ee f8 fe 30 	ld.w	r8,r7[-464]
80005eaa:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80005eae:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80005eb2:	ef 48 fd f0 	st.w	r7[-528],r8
80005eb6:	ee f9 fe 40 	ld.w	r9,r7[-448]
80005eba:	ee f8 fe 2c 	ld.w	r8,r7[-468]
80005ebe:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80005ec2:	ee fa fe 38 	ld.w	r10,r7[-456]
80005ec6:	ee f8 fe 34 	ld.w	r8,r7[-460]
80005eca:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80005ece:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80005ed2:	ef 48 fd f4 	st.w	r7[-524],r8
80005ed6:	ee f9 fe 38 	ld.w	r9,r7[-456]
80005eda:	ee f8 fe 30 	ld.w	r8,r7[-464]
80005ede:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80005ee2:	ee fa fe 3c 	ld.w	r10,r7[-452]
80005ee6:	ee f8 fe 2c 	ld.w	r8,r7[-468]
80005eea:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80005eee:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80005ef2:	ef 48 fd f8 	st.w	r7[-520],r8
				float c = vector_norm_sqr(relativeVelocity) - vector_norm_sqr(crossProduct) / (distSq - combinedRadiusSq);
80005ef6:	ee c8 01 d4 	sub	r8,r7,468
80005efa:	10 9c       	mov	r12,r8
80005efc:	fe b0 fc 86 	rcall	80005808 <vector_norm_sqr>
80005f00:	18 95       	mov	r5,r12
80005f02:	ee c8 02 10 	sub	r8,r7,528
80005f06:	10 9c       	mov	r12,r8
80005f08:	fe b0 fc 80 	rcall	80005808 <vector_norm_sqr>
80005f0c:	18 98       	mov	r8,r12
80005f0e:	ee fa ff d4 	ld.w	r10,r7[-44]
80005f12:	ee f9 ff d8 	ld.w	r9,r7[-40]
80005f16:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80005f1a:	12 9b       	mov	r11,r9
80005f1c:	10 9c       	mov	r12,r8
80005f1e:	f0 16 00 08 	mcall	r6[32]
80005f22:	18 98       	mov	r8,r12
80005f24:	e5 a1 08 58 	cop	cp0,cr8,cr5,cr8,0x42
80005f28:	ef 48 ff f4 	st.w	r7[-12],r8
				float t = (b + fast_sqrt(SQR(b) - a*c)) / a;
80005f2c:	ee f9 ff f0 	ld.w	r9,r7[-16]
80005f30:	ee f8 ff f0 	ld.w	r8,r7[-16]
80005f34:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80005f38:	ee fa ff ec 	ld.w	r10,r7[-20]
80005f3c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005f40:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80005f44:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80005f48:	10 9c       	mov	r12,r8
80005f4a:	fe b0 fb f5 	rcall	80005734 <fast_sqrt>
80005f4e:	18 99       	mov	r9,r12
80005f50:	ee f8 ff f0 	ld.w	r8,r7[-16]
80005f54:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80005f58:	ee fb ff ec 	ld.w	r11,r7[-20]
80005f5c:	10 9c       	mov	r12,r8
80005f5e:	f0 16 00 08 	mcall	r6[32]
80005f62:	18 98       	mov	r8,r12
80005f64:	ef 48 ff f8 	st.w	r7[-8],r8
				for (i=0;i<3;i++)
80005f68:	30 08       	mov	r8,0
80005f6a:	ef 68 ff cf 	st.b	r7[-49],r8
80005f6e:	c2 28       	rjmp	80005fb2 <computeNewVelocity+0x5aa>
				{
					w[i] = relativeVelocity[i] - t * relativePosition[i];
80005f70:	ef 3a ff cf 	ld.ub	r10,r7[-49]
80005f74:	ef 38 ff cf 	ld.ub	r8,r7[-49]
80005f78:	a3 68       	lsl	r8,0x2
80005f7a:	ee 08 00 08 	add	r8,r7,r8
80005f7e:	f0 f9 fe 2c 	ld.w	r9,r8[-468]
80005f82:	ef 38 ff cf 	ld.ub	r8,r7[-49]
80005f86:	a3 68       	lsl	r8,0x2
80005f88:	ee 08 00 08 	add	r8,r7,r8
80005f8c:	f0 fb fe 38 	ld.w	r11,r8[-456]
80005f90:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005f94:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
80005f98:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80005f9c:	f4 08 15 02 	lsl	r8,r10,0x2
80005fa0:	ee 08 00 08 	add	r8,r7,r8
80005fa4:	f1 49 fe 20 	st.w	r8[-480],r9
				float b = scalar_product(relativePosition,relativeVelocity);
				float crossProduct[3];
				CROSS(relativePosition,relativeVelocity,crossProduct);
				float c = vector_norm_sqr(relativeVelocity) - vector_norm_sqr(crossProduct) / (distSq - combinedRadiusSq);
				float t = (b + fast_sqrt(SQR(b) - a*c)) / a;
				for (i=0;i<3;i++)
80005fa8:	ef 38 ff cf 	ld.ub	r8,r7[-49]
80005fac:	2f f8       	sub	r8,-1
80005fae:	ef 68 ff cf 	st.b	r7[-49],r8
80005fb2:	ef 39 ff cf 	ld.ub	r9,r7[-49]
80005fb6:	30 28       	mov	r8,2
80005fb8:	f0 09 18 00 	cp.b	r9,r8
80005fbc:	fe 98 ff da 	brls	80005f70 <computeNewVelocity+0x568>
				{
					w[i] = relativeVelocity[i] - t * relativePosition[i];
				}
				wLength = vector_norm(w);
80005fc0:	ee c8 01 e0 	sub	r8,r7,480
80005fc4:	10 9c       	mov	r12,r8
80005fc6:	fe b0 fc 39 	rcall	80005838 <vector_norm>
80005fca:	18 98       	mov	r8,r12
80005fcc:	ef 48 ff e0 	st.w	r7[-32],r8
				for (i=0;i<3;i++)
80005fd0:	30 08       	mov	r8,0
80005fd2:	ef 68 ff cf 	st.b	r7[-49],r8
80005fd6:	c4 c8       	rjmp	8000606e <computeNewVelocity+0x666>
				{
					unitW[i] = w[i] / wLength;
80005fd8:	ef 35 ff cf 	ld.ub	r5,r7[-49]
80005fdc:	ef 38 ff cf 	ld.ub	r8,r7[-49]
80005fe0:	a3 68       	lsl	r8,0x2
80005fe2:	ee 08 00 08 	add	r8,r7,r8
80005fe6:	f0 f8 fe 20 	ld.w	r8,r8[-480]
80005fea:	ee fb ff e0 	ld.w	r11,r7[-32]
80005fee:	10 9c       	mov	r12,r8
80005ff0:	f0 16 00 08 	mcall	r6[32]
80005ff4:	18 98       	mov	r8,r12
80005ff6:	10 99       	mov	r9,r8
80005ff8:	ea 08 15 02 	lsl	r8,r5,0x2
80005ffc:	ee 08 00 08 	add	r8,r7,r8
80006000:	f1 49 fe 14 	st.w	r8[-492],r9
					planes[ind].normal[i] = unitW[i];
80006004:	ef 39 ff ce 	ld.ub	r9,r7[-50]
80006008:	ef 3b ff cf 	ld.ub	r11,r7[-49]
8000600c:	ef 38 ff cf 	ld.ub	r8,r7[-49]
80006010:	a3 68       	lsl	r8,0x2
80006012:	ee 08 00 08 	add	r8,r7,r8
80006016:	f0 fa fe 14 	ld.w	r10,r8[-492]
8000601a:	12 98       	mov	r8,r9
8000601c:	a1 78       	lsl	r8,0x1
8000601e:	12 08       	add	r8,r9
80006020:	a1 78       	lsl	r8,0x1
80006022:	16 08       	add	r8,r11
80006024:	a3 68       	lsl	r8,0x2
80006026:	ee 08 00 08 	add	r8,r7,r8
8000602a:	f1 4a fe 64 	st.w	r8[-412],r10
					u[i] = (combinedRadius * t - wLength) * unitW[i];
8000602e:	ef 3a ff cf 	ld.ub	r10,r7[-49]
80006032:	ee f9 ff d0 	ld.w	r9,r7[-48]
80006036:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000603a:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000603e:	ee f8 ff e0 	ld.w	r8,r7[-32]
80006042:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80006046:	ef 38 ff cf 	ld.ub	r8,r7[-49]
8000604a:	a3 68       	lsl	r8,0x2
8000604c:	ee 08 00 08 	add	r8,r7,r8
80006050:	f0 f8 fe 14 	ld.w	r8,r8[-492]
80006054:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80006058:	f4 08 15 02 	lsl	r8,r10,0x2
8000605c:	ee 08 00 08 	add	r8,r7,r8
80006060:	f1 49 fe 08 	st.w	r8[-504],r9
				for (i=0;i<3;i++)
				{
					w[i] = relativeVelocity[i] - t * relativePosition[i];
				}
				wLength = vector_norm(w);
				for (i=0;i<3;i++)
80006064:	ef 38 ff cf 	ld.ub	r8,r7[-49]
80006068:	2f f8       	sub	r8,-1
8000606a:	ef 68 ff cf 	st.b	r7[-49],r8
8000606e:	ef 39 ff cf 	ld.ub	r9,r7[-49]
80006072:	30 28       	mov	r8,2
80006074:	f0 09 18 00 	cp.b	r9,r8
80006078:	fe 98 ff b0 	brls	80005fd8 <computeNewVelocity+0x5d0>
8000607c:	cc 18       	rjmp	800061fe <computeNewVelocity+0x7f6>
					u[i] = (combinedRadius * t - wLength) * unitW[i];
				}
			}
		}else{
			/* Collisions */
			dbg_print("Collision! ");
8000607e:	fe cc 06 ca 	sub	r12,pc,1738
80006082:	f0 16 00 01 	mcall	r6[4]
			dbg_print("Distance with neighbor ");
80006086:	fe cc 06 c6 	sub	r12,pc,1734
8000608a:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(ind,10);
8000608e:	ef 38 ff ce 	ld.ub	r8,r7[-50]
80006092:	30 ab       	mov	r11,10
80006094:	10 9c       	mov	r12,r8
80006096:	f0 16 00 04 	mcall	r6[16]
			dbg_print("(x100):");
8000609a:	fe cc 06 c2 	sub	r12,pc,1730
8000609e:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(sqrt(distSq)*100.0,10);
800060a2:	ee fc ff d4 	ld.w	r12,r7[-44]
800060a6:	f0 16 00 02 	mcall	r6[8]
800060aa:	14 98       	mov	r8,r10
800060ac:	16 99       	mov	r9,r11
800060ae:	10 9a       	mov	r10,r8
800060b0:	12 9b       	mov	r11,r9
800060b2:	f0 16 00 64 	mcall	r6[400]
800060b6:	30 08       	mov	r8,0
800060b8:	fc 19 40 59 	movh	r9,0x4059
800060bc:	f0 16 00 03 	mcall	r6[12]
800060c0:	14 98       	mov	r8,r10
800060c2:	16 99       	mov	r9,r11
800060c4:	10 9a       	mov	r10,r8
800060c6:	12 9b       	mov	r11,r9
800060c8:	f0 16 00 12 	mcall	r6[72]
800060cc:	18 98       	mov	r8,r12
800060ce:	30 ab       	mov	r11,10
800060d0:	10 9c       	mov	r12,r8
800060d2:	f0 16 00 04 	mcall	r6[16]
			dbg_print("\n");
800060d6:	fe cc 06 f6 	sub	r12,pc,1782
800060da:	f0 16 00 01 	mcall	r6[4]
			
			float invTimeStep = 1.0 / ORCA_TIME_STEP_MILLIS; //PROBLEM wrong time step
800060de:	e0 68 cc cd 	mov	r8,52429
800060e2:	ea 18 3d cc 	orh	r8,0x3dcc
800060e6:	ef 48 ff fc 	st.w	r7[-4],r8
			for (i=0;i<3;i++)
800060ea:	30 08       	mov	r8,0
800060ec:	ef 68 ff cf 	st.b	r7[-49],r8
800060f0:	c2 28       	rjmp	80006134 <computeNewVelocity+0x72c>
			{
				w[i] = relativeVelocity[i] - invTimeStep * relativePosition[i];
800060f2:	ef 3a ff cf 	ld.ub	r10,r7[-49]
800060f6:	ef 38 ff cf 	ld.ub	r8,r7[-49]
800060fa:	a3 68       	lsl	r8,0x2
800060fc:	ee 08 00 08 	add	r8,r7,r8
80006100:	f0 f9 fe 2c 	ld.w	r9,r8[-468]
80006104:	ef 38 ff cf 	ld.ub	r8,r7[-49]
80006108:	a3 68       	lsl	r8,0x2
8000610a:	ee 08 00 08 	add	r8,r7,r8
8000610e:	f0 fb fe 38 	ld.w	r11,r8[-456]
80006112:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006116:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
8000611a:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8000611e:	f4 08 15 02 	lsl	r8,r10,0x2
80006122:	ee 08 00 08 	add	r8,r7,r8
80006126:	f1 49 fe 20 	st.w	r8[-480],r9
			dbg_print("(x100):");
			dbg_print_num(sqrt(distSq)*100.0,10);
			dbg_print("\n");
			
			float invTimeStep = 1.0 / ORCA_TIME_STEP_MILLIS; //PROBLEM wrong time step
			for (i=0;i<3;i++)
8000612a:	ef 38 ff cf 	ld.ub	r8,r7[-49]
8000612e:	2f f8       	sub	r8,-1
80006130:	ef 68 ff cf 	st.b	r7[-49],r8
80006134:	ef 39 ff cf 	ld.ub	r9,r7[-49]
80006138:	30 28       	mov	r8,2
8000613a:	f0 09 18 00 	cp.b	r9,r8
8000613e:	fe 98 ff da 	brls	800060f2 <computeNewVelocity+0x6ea>
			{
				w[i] = relativeVelocity[i] - invTimeStep * relativePosition[i];
			}
			wLength = vector_norm(w);
80006142:	ee c8 01 e0 	sub	r8,r7,480
80006146:	10 9c       	mov	r12,r8
80006148:	fe b0 fb 78 	rcall	80005838 <vector_norm>
8000614c:	18 98       	mov	r8,r12
8000614e:	ef 48 ff e0 	st.w	r7[-32],r8
			for (i=0;i<3;i++)
80006152:	30 08       	mov	r8,0
80006154:	ef 68 ff cf 	st.b	r7[-49],r8
80006158:	c4 c8       	rjmp	800061f0 <computeNewVelocity+0x7e8>
			{
				unitW[i] = w[i] / wLength;
8000615a:	ef 35 ff cf 	ld.ub	r5,r7[-49]
8000615e:	ef 38 ff cf 	ld.ub	r8,r7[-49]
80006162:	a3 68       	lsl	r8,0x2
80006164:	ee 08 00 08 	add	r8,r7,r8
80006168:	f0 f8 fe 20 	ld.w	r8,r8[-480]
8000616c:	ee fb ff e0 	ld.w	r11,r7[-32]
80006170:	10 9c       	mov	r12,r8
80006172:	f0 16 00 08 	mcall	r6[32]
80006176:	18 98       	mov	r8,r12
80006178:	10 99       	mov	r9,r8
8000617a:	ea 08 15 02 	lsl	r8,r5,0x2
8000617e:	ee 08 00 08 	add	r8,r7,r8
80006182:	f1 49 fe 14 	st.w	r8[-492],r9
				planes[ind].normal[i] = unitW[i];
80006186:	ef 39 ff ce 	ld.ub	r9,r7[-50]
8000618a:	ef 3b ff cf 	ld.ub	r11,r7[-49]
8000618e:	ef 38 ff cf 	ld.ub	r8,r7[-49]
80006192:	a3 68       	lsl	r8,0x2
80006194:	ee 08 00 08 	add	r8,r7,r8
80006198:	f0 fa fe 14 	ld.w	r10,r8[-492]
8000619c:	12 98       	mov	r8,r9
8000619e:	a1 78       	lsl	r8,0x1
800061a0:	12 08       	add	r8,r9
800061a2:	a1 78       	lsl	r8,0x1
800061a4:	16 08       	add	r8,r11
800061a6:	a3 68       	lsl	r8,0x2
800061a8:	ee 08 00 08 	add	r8,r7,r8
800061ac:	f1 4a fe 64 	st.w	r8[-412],r10
				u[i] = (combinedRadius * invTimeStep - wLength) * unitW[i];
800061b0:	ef 3a ff cf 	ld.ub	r10,r7[-49]
800061b4:	ee f9 ff d0 	ld.w	r9,r7[-48]
800061b8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800061bc:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
800061c0:	ee f8 ff e0 	ld.w	r8,r7[-32]
800061c4:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
800061c8:	ef 38 ff cf 	ld.ub	r8,r7[-49]
800061cc:	a3 68       	lsl	r8,0x2
800061ce:	ee 08 00 08 	add	r8,r7,r8
800061d2:	f0 f8 fe 14 	ld.w	r8,r8[-492]
800061d6:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
800061da:	f4 08 15 02 	lsl	r8,r10,0x2
800061de:	ee 08 00 08 	add	r8,r7,r8
800061e2:	f1 49 fe 08 	st.w	r8[-504],r9
			for (i=0;i<3;i++)
			{
				w[i] = relativeVelocity[i] - invTimeStep * relativePosition[i];
			}
			wLength = vector_norm(w);
			for (i=0;i<3;i++)
800061e6:	ef 38 ff cf 	ld.ub	r8,r7[-49]
800061ea:	2f f8       	sub	r8,-1
800061ec:	ef 68 ff cf 	st.b	r7[-49],r8
800061f0:	ef 39 ff cf 	ld.ub	r9,r7[-49]
800061f4:	30 28       	mov	r8,2
800061f6:	f0 09 18 00 	cp.b	r9,r8
800061fa:	fe 98 ff b0 	brls	8000615a <computeNewVelocity+0x752>
				planes[ind].normal[i] = unitW[i];
				u[i] = (combinedRadius * invTimeStep - wLength) * unitW[i];
			}
		}
		
		for (i=0;i<3;i++)
800061fe:	30 08       	mov	r8,0
80006200:	ef 68 ff cf 	st.b	r7[-49],r8
80006204:	c3 f8       	rjmp	80006282 <computeNewVelocity+0x87a>
		{
			planes[ind].point[i] = centralData->position_estimator.vel_bf[i] + 0.5 * u[i];
80006206:	ef 35 ff ce 	ld.ub	r5,r7[-50]
8000620a:	ef 31 ff cf 	ld.ub	r1,r7[-49]
8000620e:	ec f8 00 00 	ld.w	r8,r6[0]
80006212:	70 08       	ld.w	r8,r8[0x0]
80006214:	ef 39 ff cf 	ld.ub	r9,r7[-49]
80006218:	f2 c9 fc a6 	sub	r9,r9,-858
8000621c:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80006220:	10 9c       	mov	r12,r8
80006222:	f0 16 00 02 	mcall	r6[8]
80006226:	14 92       	mov	r2,r10
80006228:	16 93       	mov	r3,r11
8000622a:	ef 38 ff cf 	ld.ub	r8,r7[-49]
8000622e:	a3 68       	lsl	r8,0x2
80006230:	ee 08 00 08 	add	r8,r7,r8
80006234:	f0 f8 fe 08 	ld.w	r8,r8[-504]
80006238:	10 9c       	mov	r12,r8
8000623a:	f0 16 00 02 	mcall	r6[8]
8000623e:	30 08       	mov	r8,0
80006240:	fc 19 3f e0 	movh	r9,0x3fe0
80006244:	f0 16 00 03 	mcall	r6[12]
80006248:	14 98       	mov	r8,r10
8000624a:	16 99       	mov	r9,r11
8000624c:	04 9a       	mov	r10,r2
8000624e:	06 9b       	mov	r11,r3
80006250:	f0 16 00 05 	mcall	r6[20]
80006254:	14 98       	mov	r8,r10
80006256:	16 99       	mov	r9,r11
80006258:	10 9a       	mov	r10,r8
8000625a:	12 9b       	mov	r11,r9
8000625c:	f0 16 00 09 	mcall	r6[36]
80006260:	18 99       	mov	r9,r12
80006262:	0a 98       	mov	r8,r5
80006264:	a1 78       	lsl	r8,0x1
80006266:	0a 08       	add	r8,r5
80006268:	a1 78       	lsl	r8,0x1
8000626a:	02 08       	add	r8,r1
8000626c:	2f d8       	sub	r8,-3
8000626e:	a3 68       	lsl	r8,0x2
80006270:	ee 08 00 08 	add	r8,r7,r8
80006274:	f1 49 fe 64 	st.w	r8[-412],r9
				planes[ind].normal[i] = unitW[i];
				u[i] = (combinedRadius * invTimeStep - wLength) * unitW[i];
			}
		}
		
		for (i=0;i<3;i++)
80006278:	ef 38 ff cf 	ld.ub	r8,r7[-49]
8000627c:	2f f8       	sub	r8,-1
8000627e:	ef 68 ff cf 	st.b	r7[-49],r8
80006282:	ef 39 ff cf 	ld.ub	r9,r7[-49]
80006286:	30 28       	mov	r8,2
80006288:	f0 09 18 00 	cp.b	r9,r8
8000628c:	fe 98 ff bd 	brls	80006206 <computeNewVelocity+0x7fe>
	{
		NewVelocity[i] = OptimalVelocity[i];
	}
	
	/* Create agent ORCA planes. */
	for (ind=0; ind<centralData->number_of_neighbors; ind++)
80006290:	ef 38 ff ce 	ld.ub	r8,r7[-50]
80006294:	2f f8       	sub	r8,-1
80006296:	ef 68 ff ce 	st.b	r7[-50],r8
8000629a:	ec f8 00 00 	ld.w	r8,r6[0]
8000629e:	70 08       	ld.w	r8,r8[0x0]
800062a0:	f1 38 10 fc 	ld.ub	r8,r8[4348]
800062a4:	ef 39 ff ce 	ld.ub	r9,r7[-50]
800062a8:	f0 09 18 00 	cp.b	r9,r8
800062ac:	fe 93 fb df 	brlo	80005a6a <computeNewVelocity+0x62>
		{
			planes[ind].point[i] = centralData->position_estimator.vel_bf[i] + 0.5 * u[i];
		}
		
	}
	float planeFail = linearProgram3(planes,centralData->number_of_neighbors, OptimalVelocity, MAXSPEED, NewVelocity, false);
800062b0:	ec f8 00 00 	ld.w	r8,r6[0]
800062b4:	70 08       	ld.w	r8,r8[0x0]
800062b6:	f1 38 10 fc 	ld.ub	r8,r8[4348]
800062ba:	10 9b       	mov	r11,r8
800062bc:	ee cc 01 9c 	sub	r12,r7,412
800062c0:	30 08       	mov	r8,0
800062c2:	1a d8       	st.w	--sp,r8
800062c4:	ee f8 fd e8 	ld.w	r8,r7[-536]
800062c8:	fc 19 40 90 	movh	r9,0x4090
800062cc:	ee fa fd ec 	ld.w	r10,r7[-532]
800062d0:	f0 16 01 06 	mcall	r6[1048]
800062d4:	2f fd       	sub	sp,-4
800062d6:	18 98       	mov	r8,r12
800062d8:	ef 48 ff e8 	st.w	r7[-24],r8
	if (planeFail < centralData->number_of_neighbors)
800062dc:	ec f8 00 00 	ld.w	r8,r6[0]
800062e0:	70 08       	ld.w	r8,r8[0x0]
800062e2:	f1 38 10 fc 	ld.ub	r8,r8[4348]
800062e6:	e5 a6 0a 08 	cop	cp0,cr10,cr0,cr8,0x4c
800062ea:	30 18       	mov	r8,1
800062ec:	ee f9 ff e8 	ld.w	r9,r7[-24]
800062f0:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
800062f4:	e0 8c 00 04 	brvs	800062fc <computeNewVelocity+0x8f4>
800062f8:	e0 89 00 03 	brgt	800062fe <computeNewVelocity+0x8f6>
800062fc:	30 08       	mov	r8,0
800062fe:	5c 58       	castu.b	r8
80006300:	c1 50       	breq	8000632a <computeNewVelocity+0x922>
	{
		linearProgram4(planes,centralData->number_of_neighbors,planeFail,MAXSPEED,NewVelocity);
80006302:	ee f8 ff e8 	ld.w	r8,r7[-24]
80006306:	e5 a9 08 08 	cop	cp0,cr8,cr0,cr8,0x52
8000630a:	5c 58       	castu.b	r8
8000630c:	10 9a       	mov	r10,r8
8000630e:	ec f8 00 00 	ld.w	r8,r6[0]
80006312:	70 08       	ld.w	r8,r8[0x0]
80006314:	f1 38 10 fc 	ld.ub	r8,r8[4348]
80006318:	10 9b       	mov	r11,r8
8000631a:	ee cc 01 9c 	sub	r12,r7,412
8000631e:	ee f8 fd e8 	ld.w	r8,r7[-536]
80006322:	fc 19 40 90 	movh	r9,0x4090
80006326:	f0 16 02 09 	mcall	r6[2084]
	}
	
	loop_count_orca = loop_count_orca++ % 100;
8000632a:	ec f8 02 10 	ld.w	r8,r6[528]
8000632e:	11 89       	ld.ub	r9,r8[0x0]
80006330:	f1 d9 b0 08 	bfexts	r8,r9,0x0,0x8
80006334:	e0 6a 85 1f 	mov	r10,34079
80006338:	ea 1a 51 eb 	orh	r10,0x51eb
8000633c:	f0 0a 04 4a 	muls.d	r10,r8,r10
80006340:	a5 5b       	asr	r11,0x5
80006342:	f0 0a 14 1f 	asr	r10,r8,0x1f
80006346:	f6 0a 01 0a 	sub	r10,r11,r10
8000634a:	f4 0a 10 64 	mul	r10,r10,100
8000634e:	14 18       	sub	r8,r10
80006350:	5c 58       	castu.b	r8
80006352:	ec fa 02 10 	ld.w	r10,r6[528]
80006356:	b4 88       	st.b	r10[0x0],r8
80006358:	f2 c8 ff ff 	sub	r8,r9,-1
8000635c:	5c 58       	castu.b	r8
8000635e:	ec f9 02 10 	ld.w	r9,r6[528]
80006362:	b2 88       	st.b	r9[0x0],r8
	float orca_diff[3];
	for (i=0;i<3;i++)
80006364:	30 08       	mov	r8,0
80006366:	ef 68 ff cf 	st.b	r7[-49],r8
8000636a:	c1 f8       	rjmp	800063a8 <computeNewVelocity+0x9a0>
	{
		orca_diff[i] = OptimalVelocity[i] - NewVelocity[i];
8000636c:	ef 38 ff cf 	ld.ub	r8,r7[-49]
80006370:	ef 39 ff cf 	ld.ub	r9,r7[-49]
80006374:	a3 69       	lsl	r9,0x2
80006376:	ee fa fd ec 	ld.w	r10,r7[-532]
8000637a:	f4 09 00 09 	add	r9,r10,r9
8000637e:	72 0a       	ld.w	r10,r9[0x0]
80006380:	ef 39 ff cf 	ld.ub	r9,r7[-49]
80006384:	a3 69       	lsl	r9,0x2
80006386:	ee fb fd e8 	ld.w	r11,r7[-536]
8000638a:	f6 09 00 09 	add	r9,r11,r9
8000638e:	72 09       	ld.w	r9,r9[0x0]
80006390:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80006394:	a3 68       	lsl	r8,0x2
80006396:	ee 08 00 08 	add	r8,r7,r8
8000639a:	f1 49 fd fc 	st.w	r8[-516],r9
		linearProgram4(planes,centralData->number_of_neighbors,planeFail,MAXSPEED,NewVelocity);
	}
	
	loop_count_orca = loop_count_orca++ % 100;
	float orca_diff[3];
	for (i=0;i<3;i++)
8000639e:	ef 38 ff cf 	ld.ub	r8,r7[-49]
800063a2:	2f f8       	sub	r8,-1
800063a4:	ef 68 ff cf 	st.b	r7[-49],r8
800063a8:	ef 39 ff cf 	ld.ub	r9,r7[-49]
800063ac:	30 28       	mov	r8,2
800063ae:	f0 09 18 00 	cp.b	r9,r8
800063b2:	fe 98 ff dd 	brls	8000636c <computeNewVelocity+0x964>
	{
		orca_diff[i] = OptimalVelocity[i] - NewVelocity[i];
	}
	if (loop_count_orca == 0)
800063b6:	ec f8 02 10 	ld.w	r8,r6[528]
800063ba:	11 88       	ld.ub	r8,r8[0x0]
800063bc:	58 08       	cp.w	r8,0
800063be:	c2 11       	brne	80006400 <computeNewVelocity+0x9f8>
	{
		dbg_print("Orca diffvel:");
800063c0:	fe cc 09 dc 	sub	r12,pc,2524
800063c4:	f0 16 00 01 	mcall	r6[4]
		dbg_print_vector(orca_diff,2);
800063c8:	ee c8 02 04 	sub	r8,r7,516
800063cc:	30 2b       	mov	r11,2
800063ce:	10 9c       	mov	r12,r8
800063d0:	f0 16 00 c3 	mcall	r6[780]
		dbg_print(", Optimal:");
800063d4:	fe cc 09 e0 	sub	r12,pc,2528
800063d8:	f0 16 00 01 	mcall	r6[4]
		dbg_print_vector(OptimalVelocity,2);
800063dc:	30 2b       	mov	r11,2
800063de:	ee fc fd ec 	ld.w	r12,r7[-532]
800063e2:	f0 16 00 c3 	mcall	r6[780]
		dbg_print(", New:");
800063e6:	fe cc 09 e6 	sub	r12,pc,2534
800063ea:	f0 16 00 01 	mcall	r6[4]
		dbg_print_vector(NewVelocity,2);
800063ee:	30 2b       	mov	r11,2
800063f0:	ee fc fd e8 	ld.w	r12,r7[-536]
800063f4:	f0 16 00 c3 	mcall	r6[780]
		dbg_print("\n");
800063f8:	fe cc 0a 18 	sub	r12,pc,2584
800063fc:	f0 16 00 01 	mcall	r6[4]
			//dbg_print_vector(NewVelocity,2);
			//dbg_print("\n");
		//}
	}

}
80006400:	fe 3d fd d8 	sub	sp,-552
80006404:	e3 cd 80 ee 	ldm	sp++,r1-r3,r5-r7,pc
80006408:	80 00       	ld.sh	r0,r0[0x0]
8000640a:	58 9a       	cp.w	r10,9

8000640c <linearProgram1>:

bool linearProgram1(plane_t planes[], uint8_t index, line_t line, float maxSpeed, float OptimalVelocity[], float NewVelocity[], bool directionOpt)
{
8000640c:	eb cd 40 e8 	pushm	r3,r5-r7,lr
80006410:	1a 97       	mov	r7,sp
80006412:	21 7d       	sub	sp,92
80006414:	fe f6 04 a8 	ld.w	r6,pc[1192]
80006418:	1e 26       	rsub	r6,pc
8000641a:	ee c5 ff ec 	sub	r5,r7,-20
8000641e:	ef 4c ff b8 	st.w	r7[-72],r12
80006422:	ef 4a ff b0 	st.w	r7[-80],r10
80006426:	ef 49 ff ac 	st.w	r7[-84],r9
8000642a:	ef 48 ff a8 	st.w	r7[-88],r8
8000642e:	6a 68       	ld.w	r8,r5[0x18]
80006430:	16 99       	mov	r9,r11
80006432:	ef 69 ff b4 	st.b	r7[-76],r9
80006436:	ef 68 ff a4 	st.b	r7[-92],r8
	uint8_t i;
	
	float dotProduct = scalar_product(line.point,line.direction);
8000643a:	ea c8 ff f4 	sub	r8,r5,-12
8000643e:	0a 9b       	mov	r11,r5
80006440:	10 9c       	mov	r12,r8
80006442:	fe b0 f8 13 	rcall	80005468 <scalar_product>
80006446:	18 98       	mov	r8,r12
80006448:	ef 48 ff d8 	st.w	r7[-40],r8
	float discriminant = SQR(dotProduct) + SQR(maxSpeed) - vector_norm_sqr(line.point);
8000644c:	ee f9 ff d8 	ld.w	r9,r7[-40]
80006450:	ee f8 ff d8 	ld.w	r8,r7[-40]
80006454:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80006458:	ee fa ff b0 	ld.w	r10,r7[-80]
8000645c:	ee f8 ff b0 	ld.w	r8,r7[-80]
80006460:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80006464:	e5 a0 03 98 	cop	cp0,cr3,cr9,cr8,0x40
80006468:	ea c8 ff f4 	sub	r8,r5,-12
8000646c:	10 9c       	mov	r12,r8
8000646e:	fe b0 f9 cd 	rcall	80005808 <vector_norm_sqr>
80006472:	18 98       	mov	r8,r12
80006474:	e5 a1 08 38 	cop	cp0,cr8,cr3,cr8,0x42
80006478:	ef 48 ff dc 	st.w	r7[-36],r8
	
	if (discriminant < 0.0)
8000647c:	30 18       	mov	r8,1
8000647e:	ee fa ff dc 	ld.w	r10,r7[-36]
80006482:	30 09       	mov	r9,0
80006484:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80006488:	e0 8c 00 03 	brvs	8000648e <linearProgram1+0x82>
8000648c:	c0 25       	brlt	80006490 <linearProgram1+0x84>
8000648e:	30 08       	mov	r8,0
80006490:	5c 58       	castu.b	r8
80006492:	c0 40       	breq	8000649a <linearProgram1+0x8e>
	{
		/* Max speed sphere fully invalidates line. */
		return false;
80006494:	30 08       	mov	r8,0
80006496:	e0 8f 02 0e 	bral	800068b2 <linearProgram1+0x4a6>
	}
	
	float sqrtDiscriminant = fast_sqrt(discriminant);
8000649a:	ee fc ff dc 	ld.w	r12,r7[-36]
8000649e:	fe b0 f9 4b 	rcall	80005734 <fast_sqrt>
800064a2:	18 98       	mov	r8,r12
800064a4:	ef 48 ff e0 	st.w	r7[-32],r8
	float tLeft = -dotProduct - sqrtDiscriminant;
800064a8:	ee f8 ff d8 	ld.w	r8,r7[-40]
800064ac:	10 99       	mov	r9,r8
800064ae:	ee 19 80 00 	eorh	r9,0x8000
800064b2:	ee f8 ff e0 	ld.w	r8,r7[-32]
800064b6:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
800064ba:	ef 48 ff e4 	st.w	r7[-28],r8
	float tRight = -dotProduct + sqrtDiscriminant;
800064be:	ee f9 ff e0 	ld.w	r9,r7[-32]
800064c2:	ee f8 ff d8 	ld.w	r8,r7[-40]
800064c6:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
800064ca:	ef 48 ff e8 	st.w	r7[-24],r8
	
	uint8_t index2;
	for (index2=0;index2<index;index2++)
800064ce:	30 08       	mov	r8,0
800064d0:	ef 68 ff ef 	st.b	r7[-17],r8
800064d4:	cb e8       	rjmp	80006650 <linearProgram1+0x244>
	{
		float diffPoints[3];
		for (i=0;i<3;i++)
800064d6:	30 08       	mov	r8,0
800064d8:	ef 68 ff d7 	st.b	r7[-41],r8
800064dc:	c2 48       	rjmp	80006524 <linearProgram1+0x118>
		{
			diffPoints[i] = planes[index2].point[i] - line.point[i];
800064de:	ef 3a ff d7 	ld.ub	r10,r7[-41]
800064e2:	ef 39 ff ef 	ld.ub	r9,r7[-17]
800064e6:	12 98       	mov	r8,r9
800064e8:	a1 78       	lsl	r8,0x1
800064ea:	12 08       	add	r8,r9
800064ec:	a3 78       	lsl	r8,0x3
800064ee:	ee f9 ff b8 	ld.w	r9,r7[-72]
800064f2:	f2 08 00 08 	add	r8,r9,r8
800064f6:	ef 39 ff d7 	ld.ub	r9,r7[-41]
800064fa:	2f d9       	sub	r9,-3
800064fc:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80006500:	ef 38 ff d7 	ld.ub	r8,r7[-41]
80006504:	2f d8       	sub	r8,-3
80006506:	ea 08 03 28 	ld.w	r8,r5[r8<<0x2]
8000650a:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8000650e:	f4 08 15 02 	lsl	r8,r10,0x2
80006512:	ee 08 00 08 	add	r8,r7,r8
80006516:	f1 49 ff c8 	st.w	r8[-56],r9
	
	uint8_t index2;
	for (index2=0;index2<index;index2++)
	{
		float diffPoints[3];
		for (i=0;i<3;i++)
8000651a:	ef 38 ff d7 	ld.ub	r8,r7[-41]
8000651e:	2f f8       	sub	r8,-1
80006520:	ef 68 ff d7 	st.b	r7[-41],r8
80006524:	ef 39 ff d7 	ld.ub	r9,r7[-41]
80006528:	30 28       	mov	r8,2
8000652a:	f0 09 18 00 	cp.b	r9,r8
8000652e:	fe 98 ff d8 	brls	800064de <linearProgram1+0xd2>
		{
			diffPoints[i] = planes[index2].point[i] - line.point[i];
		}
		float numerator = scalar_product(diffPoints, planes[index2].normal);
80006532:	ef 39 ff ef 	ld.ub	r9,r7[-17]
80006536:	12 98       	mov	r8,r9
80006538:	a1 78       	lsl	r8,0x1
8000653a:	12 08       	add	r8,r9
8000653c:	a3 78       	lsl	r8,0x3
8000653e:	ee f9 ff b8 	ld.w	r9,r7[-72]
80006542:	f2 08 00 08 	add	r8,r9,r8
80006546:	10 99       	mov	r9,r8
80006548:	ee c8 00 38 	sub	r8,r7,56
8000654c:	12 9b       	mov	r11,r9
8000654e:	10 9c       	mov	r12,r8
80006550:	fe b0 f7 8c 	rcall	80005468 <scalar_product>
80006554:	18 98       	mov	r8,r12
80006556:	ef 48 ff f0 	st.w	r7[-16],r8
		float denominator = scalar_product(line.direction, planes[index2].normal);
8000655a:	ef 39 ff ef 	ld.ub	r9,r7[-17]
8000655e:	12 98       	mov	r8,r9
80006560:	a1 78       	lsl	r8,0x1
80006562:	12 08       	add	r8,r9
80006564:	a3 78       	lsl	r8,0x3
80006566:	ee f9 ff b8 	ld.w	r9,r7[-72]
8000656a:	f2 08 00 08 	add	r8,r9,r8
8000656e:	10 9b       	mov	r11,r8
80006570:	0a 9c       	mov	r12,r5
80006572:	fe b0 f7 7b 	rcall	80005468 <scalar_product>
80006576:	18 98       	mov	r8,r12
80006578:	ef 48 ff f4 	st.w	r7[-12],r8
		
		if (SQR(denominator) <= RVO_EPSILON)
8000657c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80006580:	ee f8 ff f4 	ld.w	r8,r7[-12]
80006584:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80006588:	10 9c       	mov	r12,r8
8000658a:	f0 16 00 02 	mcall	r6[8]
8000658e:	14 98       	mov	r8,r10
80006590:	16 99       	mov	r9,r11
80006592:	30 03       	mov	r3,0
80006594:	e0 6a 43 2d 	mov	r10,17197
80006598:	ea 1a eb 1c 	orh	r10,0xeb1c
8000659c:	e0 6b 36 e2 	mov	r11,14050
800065a0:	ea 1b 3f 1a 	orh	r11,0x3f1a
800065a4:	f0 16 00 76 	mcall	r6[472]
800065a8:	18 98       	mov	r8,r12
800065aa:	58 08       	cp.w	r8,0
800065ac:	c0 20       	breq	800065b0 <linearProgram1+0x1a4>
800065ae:	30 13       	mov	r3,1
800065b0:	f1 d3 c0 08 	bfextu	r8,r3,0x0,0x8
800065b4:	c1 00       	breq	800065d4 <linearProgram1+0x1c8>
		{
			/* Lines line is (almost) parallel to plane i. */
			if (numerator > 0.0)
800065b6:	30 18       	mov	r8,1
800065b8:	ee fa ff f0 	ld.w	r10,r7[-16]
800065bc:	30 09       	mov	r9,0
800065be:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
800065c2:	e0 8c 00 04 	brvs	800065ca <linearProgram1+0x1be>
800065c6:	e0 89 00 03 	brgt	800065cc <linearProgram1+0x1c0>
800065ca:	30 08       	mov	r8,0
800065cc:	5c 58       	castu.b	r8
800065ce:	c3 b0       	breq	80006644 <linearProgram1+0x238>
			{
				return false;
800065d0:	30 08       	mov	r8,0
800065d2:	c7 09       	rjmp	800068b2 <linearProgram1+0x4a6>
			}else{
				continue;
			}
		}
		
		float t = numerator / denominator;
800065d4:	ee fb ff f4 	ld.w	r11,r7[-12]
800065d8:	ee fc ff f0 	ld.w	r12,r7[-16]
800065dc:	f0 16 00 08 	mcall	r6[32]
800065e0:	18 98       	mov	r8,r12
800065e2:	ef 48 ff f8 	st.w	r7[-8],r8
		
		if (denominator >= 0.0)
800065e6:	30 18       	mov	r8,1
800065e8:	ee fa ff f4 	ld.w	r10,r7[-12]
800065ec:	30 09       	mov	r9,0
800065ee:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
800065f2:	e0 8c 00 03 	brvs	800065f8 <linearProgram1+0x1ec>
800065f6:	c0 24       	brge	800065fa <linearProgram1+0x1ee>
800065f8:	30 08       	mov	r8,0
800065fa:	5c 58       	castu.b	r8
800065fc:	c0 b0       	breq	80006612 <linearProgram1+0x206>
		{
			/* Plane i bounds line on the left. */
			tLeft = f_max(tLeft, t);
800065fe:	ee fb ff f8 	ld.w	r11,r7[-8]
80006602:	ee fc ff e4 	ld.w	r12,r7[-28]
80006606:	fe b0 f9 4e 	rcall	800058a2 <f_max>
8000660a:	18 98       	mov	r8,r12
8000660c:	ef 48 ff e4 	st.w	r7[-28],r8
80006610:	c0 a8       	rjmp	80006624 <linearProgram1+0x218>
		}else{
			/* Plane i bounds line on the right. */
			tRight = f_min(tRight, t);
80006612:	ee fb ff f8 	ld.w	r11,r7[-8]
80006616:	ee fc ff e8 	ld.w	r12,r7[-24]
8000661a:	fe b0 f9 25 	rcall	80005864 <f_min>
8000661e:	18 98       	mov	r8,r12
80006620:	ef 48 ff e8 	st.w	r7[-24],r8
		}
		
		if (tLeft > tRight)
80006624:	30 18       	mov	r8,1
80006626:	ee fa ff e4 	ld.w	r10,r7[-28]
8000662a:	ee f9 ff e8 	ld.w	r9,r7[-24]
8000662e:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80006632:	e0 8c 00 04 	brvs	8000663a <linearProgram1+0x22e>
80006636:	e0 89 00 03 	brgt	8000663c <linearProgram1+0x230>
8000663a:	30 08       	mov	r8,0
8000663c:	5c 58       	castu.b	r8
8000663e:	c0 40       	breq	80006646 <linearProgram1+0x23a>
		{
			return false;
80006640:	30 08       	mov	r8,0
80006642:	c3 89       	rjmp	800068b2 <linearProgram1+0x4a6>
			/* Lines line is (almost) parallel to plane i. */
			if (numerator > 0.0)
			{
				return false;
			}else{
				continue;
80006644:	d7 03       	nop
	float sqrtDiscriminant = fast_sqrt(discriminant);
	float tLeft = -dotProduct - sqrtDiscriminant;
	float tRight = -dotProduct + sqrtDiscriminant;
	
	uint8_t index2;
	for (index2=0;index2<index;index2++)
80006646:	ef 38 ff ef 	ld.ub	r8,r7[-17]
8000664a:	2f f8       	sub	r8,-1
8000664c:	ef 68 ff ef 	st.b	r7[-17],r8
80006650:	ef 39 ff ef 	ld.ub	r9,r7[-17]
80006654:	ef 38 ff b4 	ld.ub	r8,r7[-76]
80006658:	f0 09 18 00 	cp.b	r9,r8
8000665c:	fe 93 ff 3d 	brlo	800064d6 <linearProgram1+0xca>
		{
			return false;
		}
	}
	
	if (directionOpt)
80006660:	ef 39 ff a4 	ld.ub	r9,r7[-92]
80006664:	30 08       	mov	r8,0
80006666:	f0 09 18 00 	cp.b	r9,r8
8000666a:	c6 20       	breq	8000672e <linearProgram1+0x322>
	{
		/* Optimize direction. */
		if (scalar_product(OptimalVelocity, line.direction) > 0.0f) {
8000666c:	0a 9b       	mov	r11,r5
8000666e:	ee fc ff ac 	ld.w	r12,r7[-84]
80006672:	fe b0 f6 fb 	rcall	80005468 <scalar_product>
80006676:	18 9a       	mov	r10,r12
80006678:	30 18       	mov	r8,1
8000667a:	30 09       	mov	r9,0
8000667c:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80006680:	e0 8c 00 04 	brvs	80006688 <linearProgram1+0x27c>
80006684:	e0 89 00 03 	brgt	8000668a <linearProgram1+0x27e>
80006688:	30 08       	mov	r8,0
8000668a:	5c 58       	castu.b	r8
8000668c:	c2 90       	breq	800066de <linearProgram1+0x2d2>
			/* Take right extreme. */
			for (i=0;i<3;i++)
8000668e:	30 08       	mov	r8,0
80006690:	ef 68 ff d7 	st.b	r7[-41],r8
80006694:	c1 d8       	rjmp	800066ce <linearProgram1+0x2c2>
			{
				NewVelocity[i] = line.point[i] + tRight * line.direction[i];
80006696:	ef 38 ff d7 	ld.ub	r8,r7[-41]
8000669a:	a3 68       	lsl	r8,0x2
8000669c:	ee f9 ff a8 	ld.w	r9,r7[-88]
800066a0:	f2 08 00 08 	add	r8,r9,r8
800066a4:	ef 39 ff d7 	ld.ub	r9,r7[-41]
800066a8:	2f d9       	sub	r9,-3
800066aa:	ea 09 03 2a 	ld.w	r10,r5[r9<<0x2]
800066ae:	ef 39 ff d7 	ld.ub	r9,r7[-41]
800066b2:	ea 09 03 2b 	ld.w	r11,r5[r9<<0x2]
800066b6:	ee f9 ff e8 	ld.w	r9,r7[-24]
800066ba:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
800066be:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
800066c2:	91 09       	st.w	r8[0x0],r9
	if (directionOpt)
	{
		/* Optimize direction. */
		if (scalar_product(OptimalVelocity, line.direction) > 0.0f) {
			/* Take right extreme. */
			for (i=0;i<3;i++)
800066c4:	ef 38 ff d7 	ld.ub	r8,r7[-41]
800066c8:	2f f8       	sub	r8,-1
800066ca:	ef 68 ff d7 	st.b	r7[-41],r8
800066ce:	ef 39 ff d7 	ld.ub	r9,r7[-41]
800066d2:	30 28       	mov	r8,2
800066d4:	f0 09 18 00 	cp.b	r9,r8
800066d8:	fe 98 ff df 	brls	80006696 <linearProgram1+0x28a>
800066dc:	ce a8       	rjmp	800068b0 <linearProgram1+0x4a4>
			{
				NewVelocity[i] = line.point[i] + tRight * line.direction[i];
			}
		}else {
			/* Take left extreme. */
			for (i=0;i<3;i++)
800066de:	30 08       	mov	r8,0
800066e0:	ef 68 ff d7 	st.b	r7[-41],r8
800066e4:	c1 d8       	rjmp	8000671e <linearProgram1+0x312>
			{
				NewVelocity[i] = line.point[i] + tLeft * line.direction[i];
800066e6:	ef 38 ff d7 	ld.ub	r8,r7[-41]
800066ea:	a3 68       	lsl	r8,0x2
800066ec:	ee f9 ff a8 	ld.w	r9,r7[-88]
800066f0:	f2 08 00 08 	add	r8,r9,r8
800066f4:	ef 39 ff d7 	ld.ub	r9,r7[-41]
800066f8:	2f d9       	sub	r9,-3
800066fa:	ea 09 03 2a 	ld.w	r10,r5[r9<<0x2]
800066fe:	ef 39 ff d7 	ld.ub	r9,r7[-41]
80006702:	ea 09 03 2b 	ld.w	r11,r5[r9<<0x2]
80006706:	ee f9 ff e4 	ld.w	r9,r7[-28]
8000670a:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8000670e:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
80006712:	91 09       	st.w	r8[0x0],r9
			{
				NewVelocity[i] = line.point[i] + tRight * line.direction[i];
			}
		}else {
			/* Take left extreme. */
			for (i=0;i<3;i++)
80006714:	ef 38 ff d7 	ld.ub	r8,r7[-41]
80006718:	2f f8       	sub	r8,-1
8000671a:	ef 68 ff d7 	st.b	r7[-41],r8
8000671e:	ef 39 ff d7 	ld.ub	r9,r7[-41]
80006722:	30 28       	mov	r8,2
80006724:	f0 09 18 00 	cp.b	r9,r8
80006728:	fe 98 ff df 	brls	800066e6 <linearProgram1+0x2da>
8000672c:	cc 28       	rjmp	800068b0 <linearProgram1+0x4a4>
			}
		}
	}else{
		/* Optimize closest point. */
		float diffVelPoint[3];
		for (i=0;i<3;i++)
8000672e:	30 08       	mov	r8,0
80006730:	ef 68 ff d7 	st.b	r7[-41],r8
80006734:	c1 c8       	rjmp	8000676c <linearProgram1+0x360>
		{
			diffVelPoint[i] = OptimalVelocity[i] - line.point[i];
80006736:	ef 38 ff d7 	ld.ub	r8,r7[-41]
8000673a:	ef 39 ff d7 	ld.ub	r9,r7[-41]
8000673e:	a3 69       	lsl	r9,0x2
80006740:	ee fa ff ac 	ld.w	r10,r7[-84]
80006744:	f4 09 00 09 	add	r9,r10,r9
80006748:	72 0a       	ld.w	r10,r9[0x0]
8000674a:	ef 39 ff d7 	ld.ub	r9,r7[-41]
8000674e:	2f d9       	sub	r9,-3
80006750:	ea 09 03 29 	ld.w	r9,r5[r9<<0x2]
80006754:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80006758:	a3 68       	lsl	r8,0x2
8000675a:	ee 08 00 08 	add	r8,r7,r8
8000675e:	f1 49 ff bc 	st.w	r8[-68],r9
			}
		}
	}else{
		/* Optimize closest point. */
		float diffVelPoint[3];
		for (i=0;i<3;i++)
80006762:	ef 38 ff d7 	ld.ub	r8,r7[-41]
80006766:	2f f8       	sub	r8,-1
80006768:	ef 68 ff d7 	st.b	r7[-41],r8
8000676c:	ef 39 ff d7 	ld.ub	r9,r7[-41]
80006770:	30 28       	mov	r8,2
80006772:	f0 09 18 00 	cp.b	r9,r8
80006776:	fe 98 ff e0 	brls	80006736 <linearProgram1+0x32a>
		{
			diffVelPoint[i] = OptimalVelocity[i] - line.point[i];
		}
		
		float t = scalar_product(line.direction, diffVelPoint);
8000677a:	ee c8 00 44 	sub	r8,r7,68
8000677e:	10 9b       	mov	r11,r8
80006780:	0a 9c       	mov	r12,r5
80006782:	fe b0 f6 73 	rcall	80005468 <scalar_product>
80006786:	18 98       	mov	r8,r12
80006788:	ef 48 ff fc 	st.w	r7[-4],r8

		if (t < tLeft)
8000678c:	30 18       	mov	r8,1
8000678e:	ee fa ff fc 	ld.w	r10,r7[-4]
80006792:	ee f9 ff e4 	ld.w	r9,r7[-28]
80006796:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
8000679a:	e0 8c 00 03 	brvs	800067a0 <linearProgram1+0x394>
8000679e:	c0 25       	brlt	800067a2 <linearProgram1+0x396>
800067a0:	30 08       	mov	r8,0
800067a2:	5c 58       	castu.b	r8
800067a4:	c2 90       	breq	800067f6 <linearProgram1+0x3ea>
		{
			for (i=0;i<3;i++)
800067a6:	30 08       	mov	r8,0
800067a8:	ef 68 ff d7 	st.b	r7[-41],r8
800067ac:	c1 d8       	rjmp	800067e6 <linearProgram1+0x3da>
			{
				NewVelocity[i] = line.point[i] + tLeft * line.direction[i];
800067ae:	ef 38 ff d7 	ld.ub	r8,r7[-41]
800067b2:	a3 68       	lsl	r8,0x2
800067b4:	ee f9 ff a8 	ld.w	r9,r7[-88]
800067b8:	f2 08 00 08 	add	r8,r9,r8
800067bc:	ef 39 ff d7 	ld.ub	r9,r7[-41]
800067c0:	2f d9       	sub	r9,-3
800067c2:	ea 09 03 2a 	ld.w	r10,r5[r9<<0x2]
800067c6:	ef 39 ff d7 	ld.ub	r9,r7[-41]
800067ca:	ea 09 03 2b 	ld.w	r11,r5[r9<<0x2]
800067ce:	ee f9 ff e4 	ld.w	r9,r7[-28]
800067d2:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
800067d6:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
800067da:	91 09       	st.w	r8[0x0],r9
		
		float t = scalar_product(line.direction, diffVelPoint);

		if (t < tLeft)
		{
			for (i=0;i<3;i++)
800067dc:	ef 38 ff d7 	ld.ub	r8,r7[-41]
800067e0:	2f f8       	sub	r8,-1
800067e2:	ef 68 ff d7 	st.b	r7[-41],r8
800067e6:	ef 39 ff d7 	ld.ub	r9,r7[-41]
800067ea:	30 28       	mov	r8,2
800067ec:	f0 09 18 00 	cp.b	r9,r8
800067f0:	fe 98 ff df 	brls	800067ae <linearProgram1+0x3a2>
800067f4:	c5 e8       	rjmp	800068b0 <linearProgram1+0x4a4>
			{
				NewVelocity[i] = line.point[i] + tLeft * line.direction[i];
			}
		}else if (t > tRight){
800067f6:	30 18       	mov	r8,1
800067f8:	ee fa ff fc 	ld.w	r10,r7[-4]
800067fc:	ee f9 ff e8 	ld.w	r9,r7[-24]
80006800:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80006804:	e0 8c 00 04 	brvs	8000680c <linearProgram1+0x400>
80006808:	e0 89 00 03 	brgt	8000680e <linearProgram1+0x402>
8000680c:	30 08       	mov	r8,0
8000680e:	5c 58       	castu.b	r8
80006810:	c2 90       	breq	80006862 <linearProgram1+0x456>
			for (i=0;i<3;i++)
80006812:	30 08       	mov	r8,0
80006814:	ef 68 ff d7 	st.b	r7[-41],r8
80006818:	c1 d8       	rjmp	80006852 <linearProgram1+0x446>
			{
				NewVelocity[i] = line.point[i] + tRight * line.direction[i];
8000681a:	ef 38 ff d7 	ld.ub	r8,r7[-41]
8000681e:	a3 68       	lsl	r8,0x2
80006820:	ee f9 ff a8 	ld.w	r9,r7[-88]
80006824:	f2 08 00 08 	add	r8,r9,r8
80006828:	ef 39 ff d7 	ld.ub	r9,r7[-41]
8000682c:	2f d9       	sub	r9,-3
8000682e:	ea 09 03 2a 	ld.w	r10,r5[r9<<0x2]
80006832:	ef 39 ff d7 	ld.ub	r9,r7[-41]
80006836:	ea 09 03 2b 	ld.w	r11,r5[r9<<0x2]
8000683a:	ee f9 ff e8 	ld.w	r9,r7[-24]
8000683e:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
80006842:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
80006846:	91 09       	st.w	r8[0x0],r9
			for (i=0;i<3;i++)
			{
				NewVelocity[i] = line.point[i] + tLeft * line.direction[i];
			}
		}else if (t > tRight){
			for (i=0;i<3;i++)
80006848:	ef 38 ff d7 	ld.ub	r8,r7[-41]
8000684c:	2f f8       	sub	r8,-1
8000684e:	ef 68 ff d7 	st.b	r7[-41],r8
80006852:	ef 39 ff d7 	ld.ub	r9,r7[-41]
80006856:	30 28       	mov	r8,2
80006858:	f0 09 18 00 	cp.b	r9,r8
8000685c:	fe 98 ff df 	brls	8000681a <linearProgram1+0x40e>
80006860:	c2 88       	rjmp	800068b0 <linearProgram1+0x4a4>
			{
				NewVelocity[i] = line.point[i] + tRight * line.direction[i];
			}
		}else{
			for (i=0;i<3;i++)
80006862:	30 08       	mov	r8,0
80006864:	ef 68 ff d7 	st.b	r7[-41],r8
80006868:	c1 d8       	rjmp	800068a2 <linearProgram1+0x496>
			{
				NewVelocity[i] = line.point[i] + t * line.direction[i];
8000686a:	ef 38 ff d7 	ld.ub	r8,r7[-41]
8000686e:	a3 68       	lsl	r8,0x2
80006870:	ee f9 ff a8 	ld.w	r9,r7[-88]
80006874:	f2 08 00 08 	add	r8,r9,r8
80006878:	ef 39 ff d7 	ld.ub	r9,r7[-41]
8000687c:	2f d9       	sub	r9,-3
8000687e:	ea 09 03 2a 	ld.w	r10,r5[r9<<0x2]
80006882:	ef 39 ff d7 	ld.ub	r9,r7[-41]
80006886:	ea 09 03 2b 	ld.w	r11,r5[r9<<0x2]
8000688a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000688e:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
80006892:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
80006896:	91 09       	st.w	r8[0x0],r9
			for (i=0;i<3;i++)
			{
				NewVelocity[i] = line.point[i] + tRight * line.direction[i];
			}
		}else{
			for (i=0;i<3;i++)
80006898:	ef 38 ff d7 	ld.ub	r8,r7[-41]
8000689c:	2f f8       	sub	r8,-1
8000689e:	ef 68 ff d7 	st.b	r7[-41],r8
800068a2:	ef 39 ff d7 	ld.ub	r9,r7[-41]
800068a6:	30 28       	mov	r8,2
800068a8:	f0 09 18 00 	cp.b	r9,r8
800068ac:	fe 98 ff df 	brls	8000686a <linearProgram1+0x45e>
			{
				NewVelocity[i] = line.point[i] + t * line.direction[i];
			}
		}
	}
	return true;
800068b0:	30 18       	mov	r8,1
}
800068b2:	10 9c       	mov	r12,r8
800068b4:	2e 9d       	sub	sp,-92
800068b6:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
800068ba:	00 00       	add	r0,r0
800068bc:	80 00       	ld.sh	r0,r0[0x0]
800068be:	62 9c       	ld.w	r12,r1[0x24]

800068c0 <linearProgram2>:

bool linearProgram2(plane_t planes[], uint8_t ind, float maxSpeed, float OptimalVelocity[], float NewVelocity[], bool directionOpt)
{
800068c0:	eb cd 40 e8 	pushm	r3,r5-r7,lr
800068c4:	1a 97       	mov	r7,sp
800068c6:	fa cd 00 cc 	sub	sp,sp,204
800068ca:	fe f6 09 6e 	ld.w	r6,pc[2414]
800068ce:	1e 26       	rsub	r6,pc
800068d0:	ee ce ff ec 	sub	lr,r7,-20
800068d4:	ef 4c ff 48 	st.w	r7[-184],r12
800068d8:	ef 4a ff 40 	st.w	r7[-192],r10
800068dc:	ef 49 ff 3c 	st.w	r7[-196],r9
800068e0:	ef 48 ff 38 	st.w	r7[-200],r8
800068e4:	7c 08       	ld.w	r8,lr[0x0]
800068e6:	16 99       	mov	r9,r11
800068e8:	ef 69 ff 44 	st.b	r7[-188],r9
800068ec:	ef 68 ff 34 	st.b	r7[-204],r8
	uint8_t i;
	
	float planeDist = scalar_product(planes[ind].point,planes[ind].normal);
800068f0:	ef 39 ff 44 	ld.ub	r9,r7[-188]
800068f4:	12 98       	mov	r8,r9
800068f6:	a1 78       	lsl	r8,0x1
800068f8:	12 08       	add	r8,r9
800068fa:	a3 78       	lsl	r8,0x3
800068fc:	ee f9 ff 48 	ld.w	r9,r7[-184]
80006900:	f2 08 00 08 	add	r8,r9,r8
80006904:	10 9a       	mov	r10,r8
80006906:	ef 39 ff 44 	ld.ub	r9,r7[-188]
8000690a:	12 98       	mov	r8,r9
8000690c:	a1 78       	lsl	r8,0x1
8000690e:	12 08       	add	r8,r9
80006910:	a3 78       	lsl	r8,0x3
80006912:	ee f9 ff 48 	ld.w	r9,r7[-184]
80006916:	f2 08 00 08 	add	r8,r9,r8
8000691a:	2f 48       	sub	r8,-12
8000691c:	14 9b       	mov	r11,r10
8000691e:	10 9c       	mov	r12,r8
80006920:	fe b0 f5 a4 	rcall	80005468 <scalar_product>
80006924:	18 98       	mov	r8,r12
80006926:	ef 48 ff c8 	st.w	r7[-56],r8
	float planeDistSq = SQR(planeDist);
8000692a:	ee f9 ff c8 	ld.w	r9,r7[-56]
8000692e:	ee f8 ff c8 	ld.w	r8,r7[-56]
80006932:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80006936:	ef 48 ff cc 	st.w	r7[-52],r8
	float radiusSq = SQR(maxSpeed);
8000693a:	ee f9 ff 40 	ld.w	r9,r7[-192]
8000693e:	ee f8 ff 40 	ld.w	r8,r7[-192]
80006942:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80006946:	ef 48 ff d0 	st.w	r7[-48],r8
	
	if (planeDistSq > radiusSq)
8000694a:	30 18       	mov	r8,1
8000694c:	ee fa ff cc 	ld.w	r10,r7[-52]
80006950:	ee f9 ff d0 	ld.w	r9,r7[-48]
80006954:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80006958:	e0 8c 00 04 	brvs	80006960 <linearProgram2+0xa0>
8000695c:	e0 89 00 03 	brgt	80006962 <linearProgram2+0xa2>
80006960:	30 08       	mov	r8,0
80006962:	5c 58       	castu.b	r8
80006964:	c0 40       	breq	8000696c <linearProgram2+0xac>
	{
		/* Max speed sphere fully invalidates plane planeNo. */
		return false;
80006966:	30 08       	mov	r8,0
80006968:	e0 8f 04 64 	bral	80007230 <linearProgram2+0x970>
	}
	
	float planeRadiusSq = radiusSq - planeDistSq;
8000696c:	ee f9 ff d0 	ld.w	r9,r7[-48]
80006970:	ee f8 ff cc 	ld.w	r8,r7[-52]
80006974:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80006978:	ef 48 ff d4 	st.w	r7[-44],r8
	
	float planeCenter[3];
	for(i=0;i<3;i++)
8000697c:	30 08       	mov	r8,0
8000697e:	ef 68 ff c7 	st.b	r7[-57],r8
80006982:	c2 08       	rjmp	800069c2 <linearProgram2+0x102>
	{
		planeCenter[i] = planeDist * planes[ind].normal[i];
80006984:	ef 3a ff c7 	ld.ub	r10,r7[-57]
80006988:	ef 39 ff 44 	ld.ub	r9,r7[-188]
8000698c:	12 98       	mov	r8,r9
8000698e:	a1 78       	lsl	r8,0x1
80006990:	12 08       	add	r8,r9
80006992:	a3 78       	lsl	r8,0x3
80006994:	ee f9 ff 48 	ld.w	r9,r7[-184]
80006998:	f2 08 00 08 	add	r8,r9,r8
8000699c:	ef 39 ff c7 	ld.ub	r9,r7[-57]
800069a0:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
800069a4:	ee f8 ff c8 	ld.w	r8,r7[-56]
800069a8:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
800069ac:	f4 08 15 02 	lsl	r8,r10,0x2
800069b0:	ee 08 00 08 	add	r8,r7,r8
800069b4:	f1 49 ff b8 	st.w	r8[-72],r9
	}
	
	float planeRadiusSq = radiusSq - planeDistSq;
	
	float planeCenter[3];
	for(i=0;i<3;i++)
800069b8:	ef 38 ff c7 	ld.ub	r8,r7[-57]
800069bc:	2f f8       	sub	r8,-1
800069be:	ef 68 ff c7 	st.b	r7[-57],r8
800069c2:	ef 39 ff c7 	ld.ub	r9,r7[-57]
800069c6:	30 28       	mov	r8,2
800069c8:	f0 09 18 00 	cp.b	r9,r8
800069cc:	fe 98 ff dc 	brls	80006984 <linearProgram2+0xc4>
	{
		planeCenter[i] = planeDist * planes[ind].normal[i];
	}
	
	if (directionOpt)
800069d0:	ef 39 ff 34 	ld.ub	r9,r7[-204]
800069d4:	30 08       	mov	r8,0
800069d6:	f0 09 18 00 	cp.b	r9,r8
800069da:	e0 80 00 c0 	breq	80006b5a <linearProgram2+0x29a>
	{
		/* Project direction optVelocity on plane ind. */
		float planeOptVelocity[3];
		float scalarProduct = scalar_product(OptimalVelocity,planes[ind].normal);
800069de:	ef 39 ff 44 	ld.ub	r9,r7[-188]
800069e2:	12 98       	mov	r8,r9
800069e4:	a1 78       	lsl	r8,0x1
800069e6:	12 08       	add	r8,r9
800069e8:	a3 78       	lsl	r8,0x3
800069ea:	ee f9 ff 48 	ld.w	r9,r7[-184]
800069ee:	f2 08 00 08 	add	r8,r9,r8
800069f2:	10 9b       	mov	r11,r8
800069f4:	ee fc ff 3c 	ld.w	r12,r7[-196]
800069f8:	fe b0 f5 38 	rcall	80005468 <scalar_product>
800069fc:	18 98       	mov	r8,r12
800069fe:	ef 48 ff dc 	st.w	r7[-36],r8
		for(i=0;i<3;i++)
80006a02:	30 08       	mov	r8,0
80006a04:	ef 68 ff c7 	st.b	r7[-57],r8
80006a08:	c2 a8       	rjmp	80006a5c <linearProgram2+0x19c>
		{
			planeOptVelocity[i] = OptimalVelocity[i] - scalarProduct * planes[ind].normal[i];
80006a0a:	ef 3a ff c7 	ld.ub	r10,r7[-57]
80006a0e:	ef 38 ff c7 	ld.ub	r8,r7[-57]
80006a12:	a3 68       	lsl	r8,0x2
80006a14:	ee f9 ff 3c 	ld.w	r9,r7[-196]
80006a18:	f2 08 00 08 	add	r8,r9,r8
80006a1c:	70 0b       	ld.w	r11,r8[0x0]
80006a1e:	ef 39 ff 44 	ld.ub	r9,r7[-188]
80006a22:	12 98       	mov	r8,r9
80006a24:	a1 78       	lsl	r8,0x1
80006a26:	12 08       	add	r8,r9
80006a28:	a3 78       	lsl	r8,0x3
80006a2a:	ee f9 ff 48 	ld.w	r9,r7[-184]
80006a2e:	f2 08 00 08 	add	r8,r9,r8
80006a32:	ef 39 ff c7 	ld.ub	r9,r7[-57]
80006a36:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80006a3a:	ee f8 ff dc 	ld.w	r8,r7[-36]
80006a3e:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80006a42:	e5 a1 09 b8 	cop	cp0,cr9,cr11,cr8,0x42
80006a46:	f4 08 15 02 	lsl	r8,r10,0x2
80006a4a:	ee 08 00 08 	add	r8,r7,r8
80006a4e:	f1 49 ff ac 	st.w	r8[-84],r9
	if (directionOpt)
	{
		/* Project direction optVelocity on plane ind. */
		float planeOptVelocity[3];
		float scalarProduct = scalar_product(OptimalVelocity,planes[ind].normal);
		for(i=0;i<3;i++)
80006a52:	ef 38 ff c7 	ld.ub	r8,r7[-57]
80006a56:	2f f8       	sub	r8,-1
80006a58:	ef 68 ff c7 	st.b	r7[-57],r8
80006a5c:	ef 39 ff c7 	ld.ub	r9,r7[-57]
80006a60:	30 28       	mov	r8,2
80006a62:	f0 09 18 00 	cp.b	r9,r8
80006a66:	fe 98 ff d2 	brls	80006a0a <linearProgram2+0x14a>
		{
			planeOptVelocity[i] = OptimalVelocity[i] - scalarProduct * planes[ind].normal[i];
		}
		float planeOptVelocityLengthSq = vector_norm_sqr(planeOptVelocity);
80006a6a:	ee c8 00 54 	sub	r8,r7,84
80006a6e:	10 9c       	mov	r12,r8
80006a70:	fe b0 f6 cc 	rcall	80005808 <vector_norm_sqr>
80006a74:	18 98       	mov	r8,r12
80006a76:	ef 48 ff e0 	st.w	r7[-32],r8
		
		if (planeOptVelocityLengthSq <= RVO_EPSILON)
80006a7a:	ee fc ff e0 	ld.w	r12,r7[-32]
80006a7e:	f0 16 00 02 	mcall	r6[8]
80006a82:	14 98       	mov	r8,r10
80006a84:	16 99       	mov	r9,r11
80006a86:	30 05       	mov	r5,0
80006a88:	e0 6a 43 2d 	mov	r10,17197
80006a8c:	ea 1a eb 1c 	orh	r10,0xeb1c
80006a90:	e0 6b 36 e2 	mov	r11,14050
80006a94:	ea 1b 3f 1a 	orh	r11,0x3f1a
80006a98:	f0 16 00 76 	mcall	r6[472]
80006a9c:	18 98       	mov	r8,r12
80006a9e:	58 08       	cp.w	r8,0
80006aa0:	c0 20       	breq	80006aa4 <linearProgram2+0x1e4>
80006aa2:	30 15       	mov	r5,1
80006aa4:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
80006aa8:	c2 00       	breq	80006ae8 <linearProgram2+0x228>
		{
			for(i=0;i<3;i++)
80006aaa:	30 08       	mov	r8,0
80006aac:	ef 68 ff c7 	st.b	r7[-57],r8
80006ab0:	c1 48       	rjmp	80006ad8 <linearProgram2+0x218>
			{
				NewVelocity[i] = planeCenter[i];
80006ab2:	ef 38 ff c7 	ld.ub	r8,r7[-57]
80006ab6:	a3 68       	lsl	r8,0x2
80006ab8:	ee f9 ff 38 	ld.w	r9,r7[-200]
80006abc:	10 09       	add	r9,r8
80006abe:	ef 38 ff c7 	ld.ub	r8,r7[-57]
80006ac2:	a3 68       	lsl	r8,0x2
80006ac4:	ee 08 00 08 	add	r8,r7,r8
80006ac8:	f0 f8 ff b8 	ld.w	r8,r8[-72]
80006acc:	93 08       	st.w	r9[0x0],r8
		}
		float planeOptVelocityLengthSq = vector_norm_sqr(planeOptVelocity);
		
		if (planeOptVelocityLengthSq <= RVO_EPSILON)
		{
			for(i=0;i<3;i++)
80006ace:	ef 38 ff c7 	ld.ub	r8,r7[-57]
80006ad2:	2f f8       	sub	r8,-1
80006ad4:	ef 68 ff c7 	st.b	r7[-57],r8
80006ad8:	ef 39 ff c7 	ld.ub	r9,r7[-57]
80006adc:	30 28       	mov	r8,2
80006ade:	f0 09 18 00 	cp.b	r9,r8
80006ae2:	fe 98 ff e8 	brls	80006ab2 <linearProgram2+0x1f2>
80006ae6:	c2 d9       	rjmp	80006d40 <linearProgram2+0x480>
			{
				NewVelocity[i] = planeCenter[i];
			}
		}else{
			float sqrtPlane = fast_sqrt(planeRadiusSq / planeOptVelocityLengthSq);
80006ae8:	ee fb ff e0 	ld.w	r11,r7[-32]
80006aec:	ee fc ff d4 	ld.w	r12,r7[-44]
80006af0:	f0 16 00 08 	mcall	r6[32]
80006af4:	18 98       	mov	r8,r12
80006af6:	10 9c       	mov	r12,r8
80006af8:	fe b0 f6 1e 	rcall	80005734 <fast_sqrt>
80006afc:	18 98       	mov	r8,r12
80006afe:	ef 48 ff e4 	st.w	r7[-28],r8
			for(i=0;i<3;i++)
80006b02:	30 08       	mov	r8,0
80006b04:	ef 68 ff c7 	st.b	r7[-57],r8
80006b08:	c2 18       	rjmp	80006b4a <linearProgram2+0x28a>
			{
				NewVelocity[i] = planeCenter[i] + sqrtPlane * planeOptVelocity[i];
80006b0a:	ef 38 ff c7 	ld.ub	r8,r7[-57]
80006b0e:	a3 68       	lsl	r8,0x2
80006b10:	ee f9 ff 38 	ld.w	r9,r7[-200]
80006b14:	10 09       	add	r9,r8
80006b16:	ef 38 ff c7 	ld.ub	r8,r7[-57]
80006b1a:	a3 68       	lsl	r8,0x2
80006b1c:	ee 08 00 08 	add	r8,r7,r8
80006b20:	f0 fa ff b8 	ld.w	r10,r8[-72]
80006b24:	ef 38 ff c7 	ld.ub	r8,r7[-57]
80006b28:	a3 68       	lsl	r8,0x2
80006b2a:	ee 08 00 08 	add	r8,r7,r8
80006b2e:	f0 fb ff ac 	ld.w	r11,r8[-84]
80006b32:	ee f8 ff e4 	ld.w	r8,r7[-28]
80006b36:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
80006b3a:	e5 a0 08 a8 	cop	cp0,cr8,cr10,cr8,0x40
80006b3e:	93 08       	st.w	r9[0x0],r8
			{
				NewVelocity[i] = planeCenter[i];
			}
		}else{
			float sqrtPlane = fast_sqrt(planeRadiusSq / planeOptVelocityLengthSq);
			for(i=0;i<3;i++)
80006b40:	ef 38 ff c7 	ld.ub	r8,r7[-57]
80006b44:	2f f8       	sub	r8,-1
80006b46:	ef 68 ff c7 	st.b	r7[-57],r8
80006b4a:	ef 39 ff c7 	ld.ub	r9,r7[-57]
80006b4e:	30 28       	mov	r8,2
80006b50:	f0 09 18 00 	cp.b	r9,r8
80006b54:	fe 98 ff db 	brls	80006b0a <linearProgram2+0x24a>
80006b58:	cf 48       	rjmp	80006d40 <linearProgram2+0x480>
			}
		}
	}else{
		/* Project point optVelocity on plane ind. */
		float diffPtsVel[3];
		for(i=0;i<3;i++)
80006b5a:	30 08       	mov	r8,0
80006b5c:	ef 68 ff c7 	st.b	r7[-57],r8
80006b60:	c2 78       	rjmp	80006bae <linearProgram2+0x2ee>
		{
			diffPtsVel[i] = planes[ind].point[i]-OptimalVelocity[i];
80006b62:	ef 3a ff c7 	ld.ub	r10,r7[-57]
80006b66:	ef 39 ff 44 	ld.ub	r9,r7[-188]
80006b6a:	12 98       	mov	r8,r9
80006b6c:	a1 78       	lsl	r8,0x1
80006b6e:	12 08       	add	r8,r9
80006b70:	a3 78       	lsl	r8,0x3
80006b72:	ee f9 ff 48 	ld.w	r9,r7[-184]
80006b76:	f2 08 00 08 	add	r8,r9,r8
80006b7a:	ef 39 ff c7 	ld.ub	r9,r7[-57]
80006b7e:	2f d9       	sub	r9,-3
80006b80:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80006b84:	ef 38 ff c7 	ld.ub	r8,r7[-57]
80006b88:	a3 68       	lsl	r8,0x2
80006b8a:	ee fb ff 3c 	ld.w	r11,r7[-196]
80006b8e:	f6 08 00 08 	add	r8,r11,r8
80006b92:	70 08       	ld.w	r8,r8[0x0]
80006b94:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80006b98:	f4 08 15 02 	lsl	r8,r10,0x2
80006b9c:	ee 08 00 08 	add	r8,r7,r8
80006ba0:	f1 49 ff a0 	st.w	r8[-96],r9
			}
		}
	}else{
		/* Project point optVelocity on plane ind. */
		float diffPtsVel[3];
		for(i=0;i<3;i++)
80006ba4:	ef 38 ff c7 	ld.ub	r8,r7[-57]
80006ba8:	2f f8       	sub	r8,-1
80006baa:	ef 68 ff c7 	st.b	r7[-57],r8
80006bae:	ef 39 ff c7 	ld.ub	r9,r7[-57]
80006bb2:	30 28       	mov	r8,2
80006bb4:	f0 09 18 00 	cp.b	r9,r8
80006bb8:	fe 98 ff d5 	brls	80006b62 <linearProgram2+0x2a2>
		{
			diffPtsVel[i] = planes[ind].point[i]-OptimalVelocity[i];
		}
		float scalarProduct = scalar_product(diffPtsVel,planes[ind].normal);
80006bbc:	ef 39 ff 44 	ld.ub	r9,r7[-188]
80006bc0:	12 98       	mov	r8,r9
80006bc2:	a1 78       	lsl	r8,0x1
80006bc4:	12 08       	add	r8,r9
80006bc6:	a3 78       	lsl	r8,0x3
80006bc8:	ee f9 ff 48 	ld.w	r9,r7[-184]
80006bcc:	f2 08 00 08 	add	r8,r9,r8
80006bd0:	10 99       	mov	r9,r8
80006bd2:	ee c8 00 60 	sub	r8,r7,96
80006bd6:	12 9b       	mov	r11,r9
80006bd8:	10 9c       	mov	r12,r8
80006bda:	fe b0 f4 47 	rcall	80005468 <scalar_product>
80006bde:	18 98       	mov	r8,r12
80006be0:	ef 48 ff e8 	st.w	r7[-24],r8
		for(i=0;i<3;i++)
80006be4:	30 08       	mov	r8,0
80006be6:	ef 68 ff c7 	st.b	r7[-57],r8
80006bea:	c2 a8       	rjmp	80006c3e <linearProgram2+0x37e>
		{
			NewVelocity[i] = OptimalVelocity[i] + scalarProduct * planes[ind].normal[i];
80006bec:	ef 38 ff c7 	ld.ub	r8,r7[-57]
80006bf0:	a3 68       	lsl	r8,0x2
80006bf2:	ee f9 ff 38 	ld.w	r9,r7[-200]
80006bf6:	f2 08 00 0a 	add	r10,r9,r8
80006bfa:	ef 38 ff c7 	ld.ub	r8,r7[-57]
80006bfe:	a3 68       	lsl	r8,0x2
80006c00:	ee f9 ff 3c 	ld.w	r9,r7[-196]
80006c04:	f2 08 00 08 	add	r8,r9,r8
80006c08:	70 0b       	ld.w	r11,r8[0x0]
80006c0a:	ef 39 ff 44 	ld.ub	r9,r7[-188]
80006c0e:	12 98       	mov	r8,r9
80006c10:	a1 78       	lsl	r8,0x1
80006c12:	12 08       	add	r8,r9
80006c14:	a3 78       	lsl	r8,0x3
80006c16:	ee f9 ff 48 	ld.w	r9,r7[-184]
80006c1a:	f2 08 00 08 	add	r8,r9,r8
80006c1e:	ef 39 ff c7 	ld.ub	r9,r7[-57]
80006c22:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80006c26:	ee f8 ff e8 	ld.w	r8,r7[-24]
80006c2a:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80006c2e:	e5 a0 08 b8 	cop	cp0,cr8,cr11,cr8,0x40
80006c32:	95 08       	st.w	r10[0x0],r8
		for(i=0;i<3;i++)
		{
			diffPtsVel[i] = planes[ind].point[i]-OptimalVelocity[i];
		}
		float scalarProduct = scalar_product(diffPtsVel,planes[ind].normal);
		for(i=0;i<3;i++)
80006c34:	ef 38 ff c7 	ld.ub	r8,r7[-57]
80006c38:	2f f8       	sub	r8,-1
80006c3a:	ef 68 ff c7 	st.b	r7[-57],r8
80006c3e:	ef 39 ff c7 	ld.ub	r9,r7[-57]
80006c42:	30 28       	mov	r8,2
80006c44:	f0 09 18 00 	cp.b	r9,r8
80006c48:	fe 98 ff d2 	brls	80006bec <linearProgram2+0x32c>
		{
			NewVelocity[i] = OptimalVelocity[i] + scalarProduct * planes[ind].normal[i];
		}
		/* If outside planeCircle, project on planeCircle. */
		if (vector_norm_sqr(NewVelocity) > radiusSq) {
80006c4c:	ee fc ff 38 	ld.w	r12,r7[-200]
80006c50:	fe b0 f5 dc 	rcall	80005808 <vector_norm_sqr>
80006c54:	18 9a       	mov	r10,r12
80006c56:	30 18       	mov	r8,1
80006c58:	ee f9 ff d0 	ld.w	r9,r7[-48]
80006c5c:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80006c60:	e0 8c 00 04 	brvs	80006c68 <linearProgram2+0x3a8>
80006c64:	e0 89 00 03 	brgt	80006c6a <linearProgram2+0x3aa>
80006c68:	30 08       	mov	r8,0
80006c6a:	5c 58       	castu.b	r8
80006c6c:	c6 a0       	breq	80006d40 <linearProgram2+0x480>
			float planeResult[3];
			for(i=0;i<3;i++)
80006c6e:	30 08       	mov	r8,0
80006c70:	ef 68 ff c7 	st.b	r7[-57],r8
80006c74:	c1 f8       	rjmp	80006cb2 <linearProgram2+0x3f2>
			{
				planeResult[i] = NewVelocity[i] - planeCenter[i];
80006c76:	ef 3a ff c7 	ld.ub	r10,r7[-57]
80006c7a:	ef 38 ff c7 	ld.ub	r8,r7[-57]
80006c7e:	a3 68       	lsl	r8,0x2
80006c80:	ee f9 ff 38 	ld.w	r9,r7[-200]
80006c84:	f2 08 00 08 	add	r8,r9,r8
80006c88:	70 09       	ld.w	r9,r8[0x0]
80006c8a:	ef 38 ff c7 	ld.ub	r8,r7[-57]
80006c8e:	a3 68       	lsl	r8,0x2
80006c90:	ee 08 00 08 	add	r8,r7,r8
80006c94:	f0 f8 ff b8 	ld.w	r8,r8[-72]
80006c98:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80006c9c:	f4 08 15 02 	lsl	r8,r10,0x2
80006ca0:	ee 08 00 08 	add	r8,r7,r8
80006ca4:	f1 49 ff 94 	st.w	r8[-108],r9
			NewVelocity[i] = OptimalVelocity[i] + scalarProduct * planes[ind].normal[i];
		}
		/* If outside planeCircle, project on planeCircle. */
		if (vector_norm_sqr(NewVelocity) > radiusSq) {
			float planeResult[3];
			for(i=0;i<3;i++)
80006ca8:	ef 38 ff c7 	ld.ub	r8,r7[-57]
80006cac:	2f f8       	sub	r8,-1
80006cae:	ef 68 ff c7 	st.b	r7[-57],r8
80006cb2:	ef 39 ff c7 	ld.ub	r9,r7[-57]
80006cb6:	30 28       	mov	r8,2
80006cb8:	f0 09 18 00 	cp.b	r9,r8
80006cbc:	fe 98 ff dd 	brls	80006c76 <linearProgram2+0x3b6>
			{
				planeResult[i] = NewVelocity[i] - planeCenter[i];
			}
			float planeResultLengthSq = vector_norm_sqr(planeResult);
80006cc0:	ee c8 00 6c 	sub	r8,r7,108
80006cc4:	10 9c       	mov	r12,r8
80006cc6:	fe b0 f5 a1 	rcall	80005808 <vector_norm_sqr>
80006cca:	18 98       	mov	r8,r12
80006ccc:	ef 48 ff ec 	st.w	r7[-20],r8
			
			float planeSqrt = fast_sqrt(planeRadiusSq / planeResultLengthSq);
80006cd0:	ee fb ff ec 	ld.w	r11,r7[-20]
80006cd4:	ee fc ff d4 	ld.w	r12,r7[-44]
80006cd8:	f0 16 00 08 	mcall	r6[32]
80006cdc:	18 98       	mov	r8,r12
80006cde:	10 9c       	mov	r12,r8
80006ce0:	fe b0 f5 2a 	rcall	80005734 <fast_sqrt>
80006ce4:	18 98       	mov	r8,r12
80006ce6:	ef 48 ff f0 	st.w	r7[-16],r8
			for(i=0;i<3;i++)
80006cea:	30 08       	mov	r8,0
80006cec:	ef 68 ff c7 	st.b	r7[-57],r8
80006cf0:	c2 18       	rjmp	80006d32 <linearProgram2+0x472>
			{
				NewVelocity[i] = planeCenter[i] + planeSqrt * planeResult[i];
80006cf2:	ef 38 ff c7 	ld.ub	r8,r7[-57]
80006cf6:	a3 68       	lsl	r8,0x2
80006cf8:	ee f9 ff 38 	ld.w	r9,r7[-200]
80006cfc:	10 09       	add	r9,r8
80006cfe:	ef 38 ff c7 	ld.ub	r8,r7[-57]
80006d02:	a3 68       	lsl	r8,0x2
80006d04:	ee 08 00 08 	add	r8,r7,r8
80006d08:	f0 fa ff b8 	ld.w	r10,r8[-72]
80006d0c:	ef 38 ff c7 	ld.ub	r8,r7[-57]
80006d10:	a3 68       	lsl	r8,0x2
80006d12:	ee 08 00 08 	add	r8,r7,r8
80006d16:	f0 fb ff 94 	ld.w	r11,r8[-108]
80006d1a:	ee f8 ff f0 	ld.w	r8,r7[-16]
80006d1e:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
80006d22:	e5 a0 08 a8 	cop	cp0,cr8,cr10,cr8,0x40
80006d26:	93 08       	st.w	r9[0x0],r8
				planeResult[i] = NewVelocity[i] - planeCenter[i];
			}
			float planeResultLengthSq = vector_norm_sqr(planeResult);
			
			float planeSqrt = fast_sqrt(planeRadiusSq / planeResultLengthSq);
			for(i=0;i<3;i++)
80006d28:	ef 38 ff c7 	ld.ub	r8,r7[-57]
80006d2c:	2f f8       	sub	r8,-1
80006d2e:	ef 68 ff c7 	st.b	r7[-57],r8
80006d32:	ef 39 ff c7 	ld.ub	r9,r7[-57]
80006d36:	30 28       	mov	r8,2
80006d38:	f0 09 18 00 	cp.b	r9,r8
80006d3c:	fe 98 ff db 	brls	80006cf2 <linearProgram2+0x432>
			}
		}
	}
	
	uint8_t index;
	for (index=0;index<ind;index++)
80006d40:	30 08       	mov	r8,0
80006d42:	ef 68 ff db 	st.b	r7[-37],r8
80006d46:	e0 8f 02 6c 	bral	8000721e <linearProgram2+0x95e>
	{
		float diffPtsNewVel[3];
		for (i=0;i<3;i++)
80006d4a:	30 08       	mov	r8,0
80006d4c:	ef 68 ff c7 	st.b	r7[-57],r8
80006d50:	c2 78       	rjmp	80006d9e <linearProgram2+0x4de>
		{
			diffPtsNewVel[i] = planes[index].point[i] - NewVelocity[i];
80006d52:	ef 3a ff c7 	ld.ub	r10,r7[-57]
80006d56:	ef 39 ff db 	ld.ub	r9,r7[-37]
80006d5a:	12 98       	mov	r8,r9
80006d5c:	a1 78       	lsl	r8,0x1
80006d5e:	12 08       	add	r8,r9
80006d60:	a3 78       	lsl	r8,0x3
80006d62:	ee f9 ff 48 	ld.w	r9,r7[-184]
80006d66:	f2 08 00 08 	add	r8,r9,r8
80006d6a:	ef 39 ff c7 	ld.ub	r9,r7[-57]
80006d6e:	2f d9       	sub	r9,-3
80006d70:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80006d74:	ef 38 ff c7 	ld.ub	r8,r7[-57]
80006d78:	a3 68       	lsl	r8,0x2
80006d7a:	ee fb ff 38 	ld.w	r11,r7[-200]
80006d7e:	f6 08 00 08 	add	r8,r11,r8
80006d82:	70 08       	ld.w	r8,r8[0x0]
80006d84:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80006d88:	f4 08 15 02 	lsl	r8,r10,0x2
80006d8c:	ee 08 00 08 	add	r8,r7,r8
80006d90:	f1 49 ff 88 	st.w	r8[-120],r9
	
	uint8_t index;
	for (index=0;index<ind;index++)
	{
		float diffPtsNewVel[3];
		for (i=0;i<3;i++)
80006d94:	ef 38 ff c7 	ld.ub	r8,r7[-57]
80006d98:	2f f8       	sub	r8,-1
80006d9a:	ef 68 ff c7 	st.b	r7[-57],r8
80006d9e:	ef 39 ff c7 	ld.ub	r9,r7[-57]
80006da2:	30 28       	mov	r8,2
80006da4:	f0 09 18 00 	cp.b	r9,r8
80006da8:	fe 98 ff d5 	brls	80006d52 <linearProgram2+0x492>
		{
			diffPtsNewVel[i] = planes[index].point[i] - NewVelocity[i];
		}
		if (scalar_product(planes[index].normal,diffPtsNewVel)>0.0)
80006dac:	ef 39 ff db 	ld.ub	r9,r7[-37]
80006db0:	12 98       	mov	r8,r9
80006db2:	a1 78       	lsl	r8,0x1
80006db4:	12 08       	add	r8,r9
80006db6:	a3 78       	lsl	r8,0x3
80006db8:	ee f9 ff 48 	ld.w	r9,r7[-184]
80006dbc:	f2 08 00 08 	add	r8,r9,r8
80006dc0:	ee c9 00 78 	sub	r9,r7,120
80006dc4:	12 9b       	mov	r11,r9
80006dc6:	10 9c       	mov	r12,r8
80006dc8:	fe b0 f3 50 	rcall	80005468 <scalar_product>
80006dcc:	18 9a       	mov	r10,r12
80006dce:	30 18       	mov	r8,1
80006dd0:	30 09       	mov	r9,0
80006dd2:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80006dd6:	e0 8c 00 04 	brvs	80006dde <linearProgram2+0x51e>
80006dda:	e0 89 00 03 	brgt	80006de0 <linearProgram2+0x520>
80006dde:	30 08       	mov	r8,0
80006de0:	5c 58       	castu.b	r8
80006de2:	e0 80 02 19 	breq	80007214 <linearProgram2+0x954>
		{
			/* Result does not satisfy constraint index. Compute new optimal result. */
			/* Compute intersection line of plane index and plane ind. */
			float crossProduct[3];
			CROSS(planes[index].normal,planes[ind].normal,crossProduct);
80006de6:	ef 39 ff db 	ld.ub	r9,r7[-37]
80006dea:	12 98       	mov	r8,r9
80006dec:	a1 78       	lsl	r8,0x1
80006dee:	12 08       	add	r8,r9
80006df0:	a3 78       	lsl	r8,0x3
80006df2:	ee f9 ff 48 	ld.w	r9,r7[-184]
80006df6:	f2 08 00 08 	add	r8,r9,r8
80006dfa:	70 1a       	ld.w	r10,r8[0x4]
80006dfc:	ef 39 ff 44 	ld.ub	r9,r7[-188]
80006e00:	12 98       	mov	r8,r9
80006e02:	a1 78       	lsl	r8,0x1
80006e04:	12 08       	add	r8,r9
80006e06:	a3 78       	lsl	r8,0x3
80006e08:	ee f9 ff 48 	ld.w	r9,r7[-184]
80006e0c:	f2 08 00 08 	add	r8,r9,r8
80006e10:	70 28       	ld.w	r8,r8[0x8]
80006e12:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
80006e16:	ef 39 ff db 	ld.ub	r9,r7[-37]
80006e1a:	12 98       	mov	r8,r9
80006e1c:	a1 78       	lsl	r8,0x1
80006e1e:	12 08       	add	r8,r9
80006e20:	a3 78       	lsl	r8,0x3
80006e22:	ee f9 ff 48 	ld.w	r9,r7[-184]
80006e26:	f2 08 00 08 	add	r8,r9,r8
80006e2a:	70 2b       	ld.w	r11,r8[0x8]
80006e2c:	ef 39 ff 44 	ld.ub	r9,r7[-188]
80006e30:	12 98       	mov	r8,r9
80006e32:	a1 78       	lsl	r8,0x1
80006e34:	12 08       	add	r8,r9
80006e36:	a3 78       	lsl	r8,0x3
80006e38:	ee f9 ff 48 	ld.w	r9,r7[-184]
80006e3c:	f2 08 00 08 	add	r8,r9,r8
80006e40:	70 18       	ld.w	r8,r8[0x4]
80006e42:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
80006e46:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80006e4a:	ef 48 ff 7c 	st.w	r7[-132],r8
80006e4e:	ef 39 ff db 	ld.ub	r9,r7[-37]
80006e52:	12 98       	mov	r8,r9
80006e54:	a1 78       	lsl	r8,0x1
80006e56:	12 08       	add	r8,r9
80006e58:	a3 78       	lsl	r8,0x3
80006e5a:	ee f9 ff 48 	ld.w	r9,r7[-184]
80006e5e:	f2 08 00 08 	add	r8,r9,r8
80006e62:	70 2a       	ld.w	r10,r8[0x8]
80006e64:	ef 39 ff 44 	ld.ub	r9,r7[-188]
80006e68:	12 98       	mov	r8,r9
80006e6a:	a1 78       	lsl	r8,0x1
80006e6c:	12 08       	add	r8,r9
80006e6e:	a3 78       	lsl	r8,0x3
80006e70:	ee f9 ff 48 	ld.w	r9,r7[-184]
80006e74:	f2 08 00 08 	add	r8,r9,r8
80006e78:	70 08       	ld.w	r8,r8[0x0]
80006e7a:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
80006e7e:	ef 39 ff db 	ld.ub	r9,r7[-37]
80006e82:	12 98       	mov	r8,r9
80006e84:	a1 78       	lsl	r8,0x1
80006e86:	12 08       	add	r8,r9
80006e88:	a3 78       	lsl	r8,0x3
80006e8a:	ee f9 ff 48 	ld.w	r9,r7[-184]
80006e8e:	f2 08 00 08 	add	r8,r9,r8
80006e92:	70 0b       	ld.w	r11,r8[0x0]
80006e94:	ef 39 ff 44 	ld.ub	r9,r7[-188]
80006e98:	12 98       	mov	r8,r9
80006e9a:	a1 78       	lsl	r8,0x1
80006e9c:	12 08       	add	r8,r9
80006e9e:	a3 78       	lsl	r8,0x3
80006ea0:	ee f9 ff 48 	ld.w	r9,r7[-184]
80006ea4:	f2 08 00 08 	add	r8,r9,r8
80006ea8:	70 28       	ld.w	r8,r8[0x8]
80006eaa:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
80006eae:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80006eb2:	ef 48 ff 80 	st.w	r7[-128],r8
80006eb6:	ef 39 ff db 	ld.ub	r9,r7[-37]
80006eba:	12 98       	mov	r8,r9
80006ebc:	a1 78       	lsl	r8,0x1
80006ebe:	12 08       	add	r8,r9
80006ec0:	a3 78       	lsl	r8,0x3
80006ec2:	ee f9 ff 48 	ld.w	r9,r7[-184]
80006ec6:	f2 08 00 08 	add	r8,r9,r8
80006eca:	70 0a       	ld.w	r10,r8[0x0]
80006ecc:	ef 39 ff 44 	ld.ub	r9,r7[-188]
80006ed0:	12 98       	mov	r8,r9
80006ed2:	a1 78       	lsl	r8,0x1
80006ed4:	12 08       	add	r8,r9
80006ed6:	a3 78       	lsl	r8,0x3
80006ed8:	ee f9 ff 48 	ld.w	r9,r7[-184]
80006edc:	f2 08 00 08 	add	r8,r9,r8
80006ee0:	70 18       	ld.w	r8,r8[0x4]
80006ee2:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
80006ee6:	ef 39 ff db 	ld.ub	r9,r7[-37]
80006eea:	12 98       	mov	r8,r9
80006eec:	a1 78       	lsl	r8,0x1
80006eee:	12 08       	add	r8,r9
80006ef0:	a3 78       	lsl	r8,0x3
80006ef2:	ee f9 ff 48 	ld.w	r9,r7[-184]
80006ef6:	f2 08 00 08 	add	r8,r9,r8
80006efa:	70 1b       	ld.w	r11,r8[0x4]
80006efc:	ef 39 ff 44 	ld.ub	r9,r7[-188]
80006f00:	12 98       	mov	r8,r9
80006f02:	a1 78       	lsl	r8,0x1
80006f04:	12 08       	add	r8,r9
80006f06:	a3 78       	lsl	r8,0x3
80006f08:	ee f9 ff 48 	ld.w	r9,r7[-184]
80006f0c:	f2 08 00 08 	add	r8,r9,r8
80006f10:	70 08       	ld.w	r8,r8[0x0]
80006f12:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
80006f16:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80006f1a:	ef 48 ff 84 	st.w	r7[-124],r8
			
			if (vector_norm_sqr(crossProduct) <= RVO_EPSILON)
80006f1e:	ee c8 00 84 	sub	r8,r7,132
80006f22:	10 9c       	mov	r12,r8
80006f24:	fe b0 f4 72 	rcall	80005808 <vector_norm_sqr>
80006f28:	18 98       	mov	r8,r12
80006f2a:	10 9c       	mov	r12,r8
80006f2c:	f0 16 00 02 	mcall	r6[8]
80006f30:	14 98       	mov	r8,r10
80006f32:	16 99       	mov	r9,r11
80006f34:	30 05       	mov	r5,0
80006f36:	e0 6a 43 2d 	mov	r10,17197
80006f3a:	ea 1a eb 1c 	orh	r10,0xeb1c
80006f3e:	e0 6b 36 e2 	mov	r11,14050
80006f42:	ea 1b 3f 1a 	orh	r11,0x3f1a
80006f46:	f0 16 00 76 	mcall	r6[472]
80006f4a:	18 98       	mov	r8,r12
80006f4c:	58 08       	cp.w	r8,0
80006f4e:	c0 20       	breq	80006f52 <linearProgram2+0x692>
80006f50:	30 15       	mov	r5,1
80006f52:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
80006f56:	c0 30       	breq	80006f5c <linearProgram2+0x69c>
			{
				/* Planes ind and index are (almost) parallel, and plane index fully invalidates plane ind. */
				return false;
80006f58:	30 08       	mov	r8,0
80006f5a:	c6 b9       	rjmp	80007230 <linearProgram2+0x970>
			}
			
			line_t line;
			float normCrossProduct = vector_norm(crossProduct);
80006f5c:	ee c8 00 84 	sub	r8,r7,132
80006f60:	10 9c       	mov	r12,r8
80006f62:	fe b0 f4 6b 	rcall	80005838 <vector_norm>
80006f66:	18 98       	mov	r8,r12
80006f68:	ef 48 ff f4 	st.w	r7[-12],r8
			for (i=0;i<3;i++)
80006f6c:	30 08       	mov	r8,0
80006f6e:	ef 68 ff c7 	st.b	r7[-57],r8
80006f72:	c1 c8       	rjmp	80006faa <linearProgram2+0x6ea>
			{
				line.direction[i] = crossProduct[i] / normCrossProduct;
80006f74:	ef 35 ff c7 	ld.ub	r5,r7[-57]
80006f78:	ef 38 ff c7 	ld.ub	r8,r7[-57]
80006f7c:	a3 68       	lsl	r8,0x2
80006f7e:	ee 08 00 08 	add	r8,r7,r8
80006f82:	f0 f8 ff 7c 	ld.w	r8,r8[-132]
80006f86:	ee fb ff f4 	ld.w	r11,r7[-12]
80006f8a:	10 9c       	mov	r12,r8
80006f8c:	f0 16 00 08 	mcall	r6[32]
80006f90:	18 98       	mov	r8,r12
80006f92:	10 99       	mov	r9,r8
80006f94:	ea 08 15 02 	lsl	r8,r5,0x2
80006f98:	ee 08 00 08 	add	r8,r7,r8
80006f9c:	f1 49 ff 64 	st.w	r8[-156],r9
				return false;
			}
			
			line_t line;
			float normCrossProduct = vector_norm(crossProduct);
			for (i=0;i<3;i++)
80006fa0:	ef 38 ff c7 	ld.ub	r8,r7[-57]
80006fa4:	2f f8       	sub	r8,-1
80006fa6:	ef 68 ff c7 	st.b	r7[-57],r8
80006faa:	ef 39 ff c7 	ld.ub	r9,r7[-57]
80006fae:	30 28       	mov	r8,2
80006fb0:	f0 09 18 00 	cp.b	r9,r8
80006fb4:	fe 98 ff e0 	brls	80006f74 <linearProgram2+0x6b4>
			{
				line.direction[i] = crossProduct[i] / normCrossProduct;
			}
			float lineNormal[3];
			CROSS(line.direction,planes[ind].normal,lineNormal);
80006fb8:	ee fa ff 68 	ld.w	r10,r7[-152]
80006fbc:	ef 39 ff 44 	ld.ub	r9,r7[-188]
80006fc0:	12 98       	mov	r8,r9
80006fc2:	a1 78       	lsl	r8,0x1
80006fc4:	12 08       	add	r8,r9
80006fc6:	a3 78       	lsl	r8,0x3
80006fc8:	ee f9 ff 48 	ld.w	r9,r7[-184]
80006fcc:	f2 08 00 08 	add	r8,r9,r8
80006fd0:	70 28       	ld.w	r8,r8[0x8]
80006fd2:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
80006fd6:	ee fb ff 6c 	ld.w	r11,r7[-148]
80006fda:	ef 39 ff 44 	ld.ub	r9,r7[-188]
80006fde:	12 98       	mov	r8,r9
80006fe0:	a1 78       	lsl	r8,0x1
80006fe2:	12 08       	add	r8,r9
80006fe4:	a3 78       	lsl	r8,0x3
80006fe6:	ee f9 ff 48 	ld.w	r9,r7[-184]
80006fea:	f2 08 00 08 	add	r8,r9,r8
80006fee:	70 18       	ld.w	r8,r8[0x4]
80006ff0:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
80006ff4:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80006ff8:	ef 48 ff 58 	st.w	r7[-168],r8
80006ffc:	ee fa ff 6c 	ld.w	r10,r7[-148]
80007000:	ef 39 ff 44 	ld.ub	r9,r7[-188]
80007004:	12 98       	mov	r8,r9
80007006:	a1 78       	lsl	r8,0x1
80007008:	12 08       	add	r8,r9
8000700a:	a3 78       	lsl	r8,0x3
8000700c:	ee f9 ff 48 	ld.w	r9,r7[-184]
80007010:	f2 08 00 08 	add	r8,r9,r8
80007014:	70 08       	ld.w	r8,r8[0x0]
80007016:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
8000701a:	ee fb ff 64 	ld.w	r11,r7[-156]
8000701e:	ef 39 ff 44 	ld.ub	r9,r7[-188]
80007022:	12 98       	mov	r8,r9
80007024:	a1 78       	lsl	r8,0x1
80007026:	12 08       	add	r8,r9
80007028:	a3 78       	lsl	r8,0x3
8000702a:	ee f9 ff 48 	ld.w	r9,r7[-184]
8000702e:	f2 08 00 08 	add	r8,r9,r8
80007032:	70 28       	ld.w	r8,r8[0x8]
80007034:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
80007038:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
8000703c:	ef 48 ff 5c 	st.w	r7[-164],r8
80007040:	ee fa ff 64 	ld.w	r10,r7[-156]
80007044:	ef 39 ff 44 	ld.ub	r9,r7[-188]
80007048:	12 98       	mov	r8,r9
8000704a:	a1 78       	lsl	r8,0x1
8000704c:	12 08       	add	r8,r9
8000704e:	a3 78       	lsl	r8,0x3
80007050:	ee f9 ff 48 	ld.w	r9,r7[-184]
80007054:	f2 08 00 08 	add	r8,r9,r8
80007058:	70 18       	ld.w	r8,r8[0x4]
8000705a:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
8000705e:	ee fb ff 68 	ld.w	r11,r7[-152]
80007062:	ef 39 ff 44 	ld.ub	r9,r7[-188]
80007066:	12 98       	mov	r8,r9
80007068:	a1 78       	lsl	r8,0x1
8000706a:	12 08       	add	r8,r9
8000706c:	a3 78       	lsl	r8,0x3
8000706e:	ee f9 ff 48 	ld.w	r9,r7[-184]
80007072:	f2 08 00 08 	add	r8,r9,r8
80007076:	70 08       	ld.w	r8,r8[0x0]
80007078:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
8000707c:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80007080:	ef 48 ff 60 	st.w	r7[-160],r8
			
			float diffPoints[3];
			for (i=0;i<3;i++)
80007084:	30 08       	mov	r8,0
80007086:	ef 68 ff c7 	st.b	r7[-57],r8
8000708a:	c2 e8       	rjmp	800070e6 <linearProgram2+0x826>
			{
				diffPoints[i] = planes[index].point[i] - planes[ind].point[i];
8000708c:	ef 3a ff c7 	ld.ub	r10,r7[-57]
80007090:	ef 39 ff db 	ld.ub	r9,r7[-37]
80007094:	12 98       	mov	r8,r9
80007096:	a1 78       	lsl	r8,0x1
80007098:	12 08       	add	r8,r9
8000709a:	a3 78       	lsl	r8,0x3
8000709c:	ee f9 ff 48 	ld.w	r9,r7[-184]
800070a0:	f2 08 00 08 	add	r8,r9,r8
800070a4:	ef 39 ff c7 	ld.ub	r9,r7[-57]
800070a8:	2f d9       	sub	r9,-3
800070aa:	f0 09 03 2b 	ld.w	r11,r8[r9<<0x2]
800070ae:	ef 39 ff 44 	ld.ub	r9,r7[-188]
800070b2:	12 98       	mov	r8,r9
800070b4:	a1 78       	lsl	r8,0x1
800070b6:	12 08       	add	r8,r9
800070b8:	a3 78       	lsl	r8,0x3
800070ba:	ee f9 ff 48 	ld.w	r9,r7[-184]
800070be:	f2 08 00 08 	add	r8,r9,r8
800070c2:	ef 39 ff c7 	ld.ub	r9,r7[-57]
800070c6:	2f d9       	sub	r9,-3
800070c8:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800070cc:	e5 a1 09 b8 	cop	cp0,cr9,cr11,cr8,0x42
800070d0:	f4 08 15 02 	lsl	r8,r10,0x2
800070d4:	ee 08 00 08 	add	r8,r7,r8
800070d8:	f1 49 ff 4c 	st.w	r8[-180],r9
			}
			float lineNormal[3];
			CROSS(line.direction,planes[ind].normal,lineNormal);
			
			float diffPoints[3];
			for (i=0;i<3;i++)
800070dc:	ef 38 ff c7 	ld.ub	r8,r7[-57]
800070e0:	2f f8       	sub	r8,-1
800070e2:	ef 68 ff c7 	st.b	r7[-57],r8
800070e6:	ef 39 ff c7 	ld.ub	r9,r7[-57]
800070ea:	30 28       	mov	r8,2
800070ec:	f0 09 18 00 	cp.b	r9,r8
800070f0:	fe 98 ff ce 	brls	8000708c <linearProgram2+0x7cc>
			{
				diffPoints[i] = planes[index].point[i] - planes[ind].point[i];
			}
			float scalarProductPointsNormal = scalar_product(diffPoints,planes[index].normal);
800070f4:	ef 39 ff db 	ld.ub	r9,r7[-37]
800070f8:	12 98       	mov	r8,r9
800070fa:	a1 78       	lsl	r8,0x1
800070fc:	12 08       	add	r8,r9
800070fe:	a3 78       	lsl	r8,0x3
80007100:	ee f9 ff 48 	ld.w	r9,r7[-184]
80007104:	f2 08 00 08 	add	r8,r9,r8
80007108:	10 99       	mov	r9,r8
8000710a:	ee c8 00 b4 	sub	r8,r7,180
8000710e:	12 9b       	mov	r11,r9
80007110:	10 9c       	mov	r12,r8
80007112:	fe b0 f1 ab 	rcall	80005468 <scalar_product>
80007116:	18 98       	mov	r8,r12
80007118:	ef 48 ff f8 	st.w	r7[-8],r8
			float scalarProductNormals = scalar_product(lineNormal,planes[index].normal);
8000711c:	ef 39 ff db 	ld.ub	r9,r7[-37]
80007120:	12 98       	mov	r8,r9
80007122:	a1 78       	lsl	r8,0x1
80007124:	12 08       	add	r8,r9
80007126:	a3 78       	lsl	r8,0x3
80007128:	ee f9 ff 48 	ld.w	r9,r7[-184]
8000712c:	f2 08 00 08 	add	r8,r9,r8
80007130:	10 99       	mov	r9,r8
80007132:	ee c8 00 a8 	sub	r8,r7,168
80007136:	12 9b       	mov	r11,r9
80007138:	10 9c       	mov	r12,r8
8000713a:	fe b0 f1 97 	rcall	80005468 <scalar_product>
8000713e:	18 98       	mov	r8,r12
80007140:	ef 48 ff fc 	st.w	r7[-4],r8
			for(i=0;i<3;i++)
80007144:	30 08       	mov	r8,0
80007146:	ef 68 ff c7 	st.b	r7[-57],r8
8000714a:	c3 18       	rjmp	800071ac <linearProgram2+0x8ec>
			{
				line.point[i] = planes[ind].point[i] + (scalarProductPointsNormal / scalarProductNormals) * lineNormal[i];
8000714c:	ef 35 ff c7 	ld.ub	r5,r7[-57]
80007150:	ef 39 ff 44 	ld.ub	r9,r7[-188]
80007154:	12 98       	mov	r8,r9
80007156:	a1 78       	lsl	r8,0x1
80007158:	12 08       	add	r8,r9
8000715a:	a3 78       	lsl	r8,0x3
8000715c:	ee f9 ff 48 	ld.w	r9,r7[-184]
80007160:	f2 08 00 08 	add	r8,r9,r8
80007164:	ef 39 ff c7 	ld.ub	r9,r7[-57]
80007168:	2f d9       	sub	r9,-3
8000716a:	f0 09 03 23 	ld.w	r3,r8[r9<<0x2]
8000716e:	ee fb ff fc 	ld.w	r11,r7[-4]
80007172:	ee fc ff f8 	ld.w	r12,r7[-8]
80007176:	f0 16 00 08 	mcall	r6[32]
8000717a:	18 98       	mov	r8,r12
8000717c:	10 99       	mov	r9,r8
8000717e:	ef 38 ff c7 	ld.ub	r8,r7[-57]
80007182:	a3 68       	lsl	r8,0x2
80007184:	ee 08 00 08 	add	r8,r7,r8
80007188:	f0 f8 ff 58 	ld.w	r8,r8[-168]
8000718c:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80007190:	e5 a0 09 38 	cop	cp0,cr9,cr3,cr8,0x40
80007194:	ea c8 ff fd 	sub	r8,r5,-3
80007198:	a3 68       	lsl	r8,0x2
8000719a:	ee 08 00 08 	add	r8,r7,r8
8000719e:	f1 49 ff 64 	st.w	r8[-156],r9
			{
				diffPoints[i] = planes[index].point[i] - planes[ind].point[i];
			}
			float scalarProductPointsNormal = scalar_product(diffPoints,planes[index].normal);
			float scalarProductNormals = scalar_product(lineNormal,planes[index].normal);
			for(i=0;i<3;i++)
800071a2:	ef 38 ff c7 	ld.ub	r8,r7[-57]
800071a6:	2f f8       	sub	r8,-1
800071a8:	ef 68 ff c7 	st.b	r7[-57],r8
800071ac:	ef 39 ff c7 	ld.ub	r9,r7[-57]
800071b0:	30 28       	mov	r8,2
800071b2:	f0 09 18 00 	cp.b	r9,r8
800071b6:	fe 98 ff cb 	brls	8000714c <linearProgram2+0x88c>
			{
				line.point[i] = planes[ind].point[i] + (scalarProductPointsNormal / scalarProductNormals) * lineNormal[i];
			}
			
			if (!(linearProgram1(planes,index,line,maxSpeed,OptimalVelocity,NewVelocity,directionOpt)))
800071ba:	ef 38 ff 34 	ld.ub	r8,r7[-204]
800071be:	ef 3c ff db 	ld.ub	r12,r7[-37]
800071c2:	1a d8       	st.w	--sp,r8
800071c4:	20 6d       	sub	sp,24
800071c6:	1a 98       	mov	r8,sp
800071c8:	10 9a       	mov	r10,r8
800071ca:	ee cb 00 9c 	sub	r11,r7,156
800071ce:	f4 c8 00 00 	sub	r8,r10,0
800071d2:	f6 c9 00 00 	sub	r9,r11,0
800071d6:	72 0e       	ld.w	lr,r9[0x0]
800071d8:	91 0e       	st.w	r8[0x0],lr
800071da:	72 1e       	ld.w	lr,r9[0x4]
800071dc:	91 1e       	st.w	r8[0x4],lr
800071de:	72 2e       	ld.w	lr,r9[0x8]
800071e0:	91 2e       	st.w	r8[0x8],lr
800071e2:	72 39       	ld.w	r9,r9[0xc]
800071e4:	91 39       	st.w	r8[0xc],r9
800071e6:	f6 e8 00 10 	ld.d	r8,r11[16]
800071ea:	f4 e9 00 10 	st.d	r10[16],r8
800071ee:	ee f8 ff 38 	ld.w	r8,r7[-200]
800071f2:	ee f9 ff 3c 	ld.w	r9,r7[-196]
800071f6:	ee fa ff 40 	ld.w	r10,r7[-192]
800071fa:	18 9b       	mov	r11,r12
800071fc:	ee fc ff 48 	ld.w	r12,r7[-184]
80007200:	f0 16 01 cb 	mcall	r6[1836]
80007204:	2f 9d       	sub	sp,-28
80007206:	18 98       	mov	r8,r12
80007208:	ec 18 00 01 	eorl	r8,0x1
8000720c:	5c 58       	castu.b	r8
8000720e:	c0 30       	breq	80007214 <linearProgram2+0x954>
			{
				return false;
80007210:	30 08       	mov	r8,0
80007212:	c0 f8       	rjmp	80007230 <linearProgram2+0x970>
			}
		}
	}
	
	uint8_t index;
	for (index=0;index<ind;index++)
80007214:	ef 38 ff db 	ld.ub	r8,r7[-37]
80007218:	2f f8       	sub	r8,-1
8000721a:	ef 68 ff db 	st.b	r7[-37],r8
8000721e:	ef 39 ff db 	ld.ub	r9,r7[-37]
80007222:	ef 38 ff 44 	ld.ub	r8,r7[-188]
80007226:	f0 09 18 00 	cp.b	r9,r8
8000722a:	fe 93 fd 90 	brlo	80006d4a <linearProgram2+0x48a>
			{
				return false;
			}
		}
	}
	return true;
8000722e:	30 18       	mov	r8,1
}
80007230:	10 9c       	mov	r12,r8
80007232:	2c dd       	sub	sp,-204
80007234:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
80007238:	80 00       	ld.sh	r0,r0[0x0]
8000723a:	67 52       	ld.w	r2,r3[0x54]

8000723c <linearProgram3>:

float linearProgram3(plane_t planes[], uint8_t planeSize, float OptimalVelocity[], float maxSpeed, float NewVelocity[], bool directionOpt)
{
8000723c:	eb cd 40 e0 	pushm	r5-r7,lr
80007240:	1a 97       	mov	r7,sp
80007242:	20 fd       	sub	sp,60
80007244:	fe f6 02 e4 	ld.w	r6,pc[740]
80007248:	1e 26       	rsub	r6,pc
8000724a:	ee ce ff f0 	sub	lr,r7,-16
8000724e:	ef 4c ff d8 	st.w	r7[-40],r12
80007252:	ef 4a ff d0 	st.w	r7[-48],r10
80007256:	ef 49 ff cc 	st.w	r7[-52],r9
8000725a:	ef 48 ff c8 	st.w	r7[-56],r8
8000725e:	7c 08       	ld.w	r8,lr[0x0]
80007260:	16 99       	mov	r9,r11
80007262:	ef 69 ff d4 	st.b	r7[-44],r9
80007266:	ef 68 ff c4 	st.b	r7[-60],r8
	uint8_t i;
	
	if (directionOpt)
8000726a:	ef 39 ff c4 	ld.ub	r9,r7[-60]
8000726e:	30 08       	mov	r8,0
80007270:	f0 09 18 00 	cp.b	r9,r8
80007274:	c3 40       	breq	800072dc <linearProgram3+0xa0>
	{
		/* Optimize direction. Note that the optimization velocity is of unit length in this case. */
		float normOptimalVelocity = vector_norm(OptimalVelocity);
80007276:	ee fc ff d0 	ld.w	r12,r7[-48]
8000727a:	fe b0 f2 df 	rcall	80005838 <vector_norm>
8000727e:	18 98       	mov	r8,r12
80007280:	ef 48 ff f8 	st.w	r7[-8],r8
		for(i=0;i<3;i++)
80007284:	30 08       	mov	r8,0
80007286:	ef 68 ff f6 	st.b	r7[-10],r8
8000728a:	c2 18       	rjmp	800072cc <linearProgram3+0x90>
		{
			NewVelocity[i] = OptimalVelocity[i]/normOptimalVelocity * maxSpeed;
8000728c:	ef 38 ff f6 	ld.ub	r8,r7[-10]
80007290:	a3 68       	lsl	r8,0x2
80007292:	ee f9 ff c8 	ld.w	r9,r7[-56]
80007296:	f2 08 00 05 	add	r5,r9,r8
8000729a:	ef 38 ff f6 	ld.ub	r8,r7[-10]
8000729e:	a3 68       	lsl	r8,0x2
800072a0:	ee f9 ff d0 	ld.w	r9,r7[-48]
800072a4:	f2 08 00 08 	add	r8,r9,r8
800072a8:	70 08       	ld.w	r8,r8[0x0]
800072aa:	ee fb ff f8 	ld.w	r11,r7[-8]
800072ae:	10 9c       	mov	r12,r8
800072b0:	f0 16 00 08 	mcall	r6[32]
800072b4:	18 98       	mov	r8,r12
800072b6:	10 99       	mov	r9,r8
800072b8:	ee f8 ff cc 	ld.w	r8,r7[-52]
800072bc:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
800072c0:	8b 08       	st.w	r5[0x0],r8
	
	if (directionOpt)
	{
		/* Optimize direction. Note that the optimization velocity is of unit length in this case. */
		float normOptimalVelocity = vector_norm(OptimalVelocity);
		for(i=0;i<3;i++)
800072c2:	ef 38 ff f6 	ld.ub	r8,r7[-10]
800072c6:	2f f8       	sub	r8,-1
800072c8:	ef 68 ff f6 	st.b	r7[-10],r8
800072cc:	ef 39 ff f6 	ld.ub	r9,r7[-10]
800072d0:	30 28       	mov	r8,2
800072d2:	f0 09 18 00 	cp.b	r9,r8
800072d6:	fe 98 ff db 	brls	8000728c <linearProgram3+0x50>
800072da:	c6 98       	rjmp	800073ac <linearProgram3+0x170>
		{
			NewVelocity[i] = OptimalVelocity[i]/normOptimalVelocity * maxSpeed;
		}
	}else if (vector_norm_sqr(OptimalVelocity) > SQR(maxSpeed)){
800072dc:	ee fc ff d0 	ld.w	r12,r7[-48]
800072e0:	fe b0 f2 94 	rcall	80005808 <vector_norm_sqr>
800072e4:	18 9a       	mov	r10,r12
800072e6:	ee f9 ff cc 	ld.w	r9,r7[-52]
800072ea:	ee f8 ff cc 	ld.w	r8,r7[-52]
800072ee:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
800072f2:	30 18       	mov	r8,1
800072f4:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
800072f8:	e0 8c 00 04 	brvs	80007300 <linearProgram3+0xc4>
800072fc:	e0 89 00 03 	brgt	80007302 <linearProgram3+0xc6>
80007300:	30 08       	mov	r8,0
80007302:	5c 58       	castu.b	r8
80007304:	c3 40       	breq	8000736c <linearProgram3+0x130>
		/* Optimize closest point and outside circle. */
		float normOptimalVelocity = vector_norm(OptimalVelocity);
80007306:	ee fc ff d0 	ld.w	r12,r7[-48]
8000730a:	fe b0 f2 97 	rcall	80005838 <vector_norm>
8000730e:	18 98       	mov	r8,r12
80007310:	ef 48 ff fc 	st.w	r7[-4],r8
		for(i=0;i<3;i++)
80007314:	30 08       	mov	r8,0
80007316:	ef 68 ff f6 	st.b	r7[-10],r8
8000731a:	c2 18       	rjmp	8000735c <linearProgram3+0x120>
		{
			NewVelocity[i] = OptimalVelocity[i]/normOptimalVelocity * maxSpeed;
8000731c:	ef 38 ff f6 	ld.ub	r8,r7[-10]
80007320:	a3 68       	lsl	r8,0x2
80007322:	ee f9 ff c8 	ld.w	r9,r7[-56]
80007326:	f2 08 00 05 	add	r5,r9,r8
8000732a:	ef 38 ff f6 	ld.ub	r8,r7[-10]
8000732e:	a3 68       	lsl	r8,0x2
80007330:	ee f9 ff d0 	ld.w	r9,r7[-48]
80007334:	f2 08 00 08 	add	r8,r9,r8
80007338:	70 08       	ld.w	r8,r8[0x0]
8000733a:	ee fb ff fc 	ld.w	r11,r7[-4]
8000733e:	10 9c       	mov	r12,r8
80007340:	f0 16 00 08 	mcall	r6[32]
80007344:	18 98       	mov	r8,r12
80007346:	10 99       	mov	r9,r8
80007348:	ee f8 ff cc 	ld.w	r8,r7[-52]
8000734c:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80007350:	8b 08       	st.w	r5[0x0],r8
			NewVelocity[i] = OptimalVelocity[i]/normOptimalVelocity * maxSpeed;
		}
	}else if (vector_norm_sqr(OptimalVelocity) > SQR(maxSpeed)){
		/* Optimize closest point and outside circle. */
		float normOptimalVelocity = vector_norm(OptimalVelocity);
		for(i=0;i<3;i++)
80007352:	ef 38 ff f6 	ld.ub	r8,r7[-10]
80007356:	2f f8       	sub	r8,-1
80007358:	ef 68 ff f6 	st.b	r7[-10],r8
8000735c:	ef 39 ff f6 	ld.ub	r9,r7[-10]
80007360:	30 28       	mov	r8,2
80007362:	f0 09 18 00 	cp.b	r9,r8
80007366:	fe 98 ff db 	brls	8000731c <linearProgram3+0xe0>
8000736a:	c2 18       	rjmp	800073ac <linearProgram3+0x170>
		{
			NewVelocity[i] = OptimalVelocity[i]/normOptimalVelocity * maxSpeed;
		}
	}else{
		for(i=0;i<3;i++)
8000736c:	30 08       	mov	r8,0
8000736e:	ef 68 ff f6 	st.b	r7[-10],r8
80007372:	c1 68       	rjmp	8000739e <linearProgram3+0x162>
		{
			NewVelocity[i] = OptimalVelocity[i];
80007374:	ef 38 ff f6 	ld.ub	r8,r7[-10]
80007378:	a3 68       	lsl	r8,0x2
8000737a:	ee f9 ff c8 	ld.w	r9,r7[-56]
8000737e:	f2 08 00 08 	add	r8,r9,r8
80007382:	ef 39 ff f6 	ld.ub	r9,r7[-10]
80007386:	a3 69       	lsl	r9,0x2
80007388:	ee fa ff d0 	ld.w	r10,r7[-48]
8000738c:	f4 09 00 09 	add	r9,r10,r9
80007390:	72 09       	ld.w	r9,r9[0x0]
80007392:	91 09       	st.w	r8[0x0],r9
		for(i=0;i<3;i++)
		{
			NewVelocity[i] = OptimalVelocity[i]/normOptimalVelocity * maxSpeed;
		}
	}else{
		for(i=0;i<3;i++)
80007394:	ef 38 ff f6 	ld.ub	r8,r7[-10]
80007398:	2f f8       	sub	r8,-1
8000739a:	ef 68 ff f6 	st.b	r7[-10],r8
8000739e:	ef 39 ff f6 	ld.ub	r9,r7[-10]
800073a2:	30 28       	mov	r8,2
800073a4:	f0 09 18 00 	cp.b	r9,r8
800073a8:	fe 98 ff e6 	brls	80007374 <linearProgram3+0x138>
		}
	}
	
	uint8_t ind;
	
	for (ind=0;ind<planeSize;ind++)
800073ac:	30 08       	mov	r8,0
800073ae:	ef 68 ff f7 	st.b	r7[-9],r8
800073b2:	ca a8       	rjmp	80007506 <linearProgram3+0x2ca>
	{
		float diffPointVel[3];
		for (i=0;i<3;i++)
800073b4:	30 08       	mov	r8,0
800073b6:	ef 68 ff f6 	st.b	r7[-10],r8
800073ba:	c2 78       	rjmp	80007408 <linearProgram3+0x1cc>
		{
			diffPointVel[i] = planes[ind].point[i] - NewVelocity[i];
800073bc:	ef 3a ff f6 	ld.ub	r10,r7[-10]
800073c0:	ef 39 ff f7 	ld.ub	r9,r7[-9]
800073c4:	12 98       	mov	r8,r9
800073c6:	a1 78       	lsl	r8,0x1
800073c8:	12 08       	add	r8,r9
800073ca:	a3 78       	lsl	r8,0x3
800073cc:	ee f9 ff d8 	ld.w	r9,r7[-40]
800073d0:	f2 08 00 08 	add	r8,r9,r8
800073d4:	ef 39 ff f6 	ld.ub	r9,r7[-10]
800073d8:	2f d9       	sub	r9,-3
800073da:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
800073de:	ef 38 ff f6 	ld.ub	r8,r7[-10]
800073e2:	a3 68       	lsl	r8,0x2
800073e4:	ee fb ff c8 	ld.w	r11,r7[-56]
800073e8:	f6 08 00 08 	add	r8,r11,r8
800073ec:	70 08       	ld.w	r8,r8[0x0]
800073ee:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
800073f2:	f4 08 15 02 	lsl	r8,r10,0x2
800073f6:	ee 08 00 08 	add	r8,r7,r8
800073fa:	f1 49 ff e8 	st.w	r8[-24],r9
	uint8_t ind;
	
	for (ind=0;ind<planeSize;ind++)
	{
		float diffPointVel[3];
		for (i=0;i<3;i++)
800073fe:	ef 38 ff f6 	ld.ub	r8,r7[-10]
80007402:	2f f8       	sub	r8,-1
80007404:	ef 68 ff f6 	st.b	r7[-10],r8
80007408:	ef 39 ff f6 	ld.ub	r9,r7[-10]
8000740c:	30 28       	mov	r8,2
8000740e:	f0 09 18 00 	cp.b	r9,r8
80007412:	fe 98 ff d5 	brls	800073bc <linearProgram3+0x180>
		{
			diffPointVel[i] = planes[ind].point[i] - NewVelocity[i];
		}
		if (scalar_product(planes[ind].normal, diffPointVel ) > 0.0)
80007416:	ef 39 ff f7 	ld.ub	r9,r7[-9]
8000741a:	12 98       	mov	r8,r9
8000741c:	a1 78       	lsl	r8,0x1
8000741e:	12 08       	add	r8,r9
80007420:	a3 78       	lsl	r8,0x3
80007422:	ee f9 ff d8 	ld.w	r9,r7[-40]
80007426:	f2 08 00 08 	add	r8,r9,r8
8000742a:	ee c9 00 18 	sub	r9,r7,24
8000742e:	12 9b       	mov	r11,r9
80007430:	10 9c       	mov	r12,r8
80007432:	fe b0 f0 1b 	rcall	80005468 <scalar_product>
80007436:	18 9a       	mov	r10,r12
80007438:	30 18       	mov	r8,1
8000743a:	30 09       	mov	r9,0
8000743c:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80007440:	e0 8c 00 04 	brvs	80007448 <linearProgram3+0x20c>
80007444:	e0 89 00 03 	brgt	8000744a <linearProgram3+0x20e>
80007448:	30 08       	mov	r8,0
8000744a:	5c 58       	castu.b	r8
8000744c:	c5 80       	breq	800074fc <linearProgram3+0x2c0>
		{
			/* Result does not satisfy constraint ind. Compute new optimal result. */
			float tempResult[3];
			for (i=0;i<3;i++)
8000744e:	30 08       	mov	r8,0
80007450:	ef 68 ff f6 	st.b	r7[-10],r8
80007454:	c1 58       	rjmp	8000747e <linearProgram3+0x242>
			{
				tempResult[i] = NewVelocity[i];
80007456:	ef 38 ff f6 	ld.ub	r8,r7[-10]
8000745a:	ef 39 ff f6 	ld.ub	r9,r7[-10]
8000745e:	a3 69       	lsl	r9,0x2
80007460:	ee fa ff c8 	ld.w	r10,r7[-56]
80007464:	f4 09 00 09 	add	r9,r10,r9
80007468:	72 09       	ld.w	r9,r9[0x0]
8000746a:	a3 68       	lsl	r8,0x2
8000746c:	ee 08 00 08 	add	r8,r7,r8
80007470:	f1 49 ff dc 	st.w	r8[-36],r9
		}
		if (scalar_product(planes[ind].normal, diffPointVel ) > 0.0)
		{
			/* Result does not satisfy constraint ind. Compute new optimal result. */
			float tempResult[3];
			for (i=0;i<3;i++)
80007474:	ef 38 ff f6 	ld.ub	r8,r7[-10]
80007478:	2f f8       	sub	r8,-1
8000747a:	ef 68 ff f6 	st.b	r7[-10],r8
8000747e:	ef 39 ff f6 	ld.ub	r9,r7[-10]
80007482:	30 28       	mov	r8,2
80007484:	f0 09 18 00 	cp.b	r9,r8
80007488:	fe 98 ff e7 	brls	80007456 <linearProgram3+0x21a>
			{
				tempResult[i] = NewVelocity[i];
			}
			if (!(linearProgram2(planes,ind,maxSpeed,OptimalVelocity,NewVelocity,directionOpt)))
8000748c:	ef 38 ff c4 	ld.ub	r8,r7[-60]
80007490:	ef 3b ff f7 	ld.ub	r11,r7[-9]
80007494:	1a d8       	st.w	--sp,r8
80007496:	ee f8 ff c8 	ld.w	r8,r7[-56]
8000749a:	ee f9 ff d0 	ld.w	r9,r7[-48]
8000749e:	ee fa ff cc 	ld.w	r10,r7[-52]
800074a2:	ee fc ff d8 	ld.w	r12,r7[-40]
800074a6:	f0 16 01 7a 	mcall	r6[1512]
800074aa:	2f fd       	sub	sp,-4
800074ac:	18 98       	mov	r8,r12
800074ae:	ec 18 00 01 	eorl	r8,0x1
800074b2:	5c 58       	castu.b	r8
800074b4:	c2 40       	breq	800074fc <linearProgram3+0x2c0>
			{
				for (i=0;i<3;i++)
800074b6:	30 08       	mov	r8,0
800074b8:	ef 68 ff f6 	st.b	r7[-10],r8
800074bc:	c1 48       	rjmp	800074e4 <linearProgram3+0x2a8>
				{
					NewVelocity[i] = tempResult[i];
800074be:	ef 38 ff f6 	ld.ub	r8,r7[-10]
800074c2:	a3 68       	lsl	r8,0x2
800074c4:	ee f9 ff c8 	ld.w	r9,r7[-56]
800074c8:	10 09       	add	r9,r8
800074ca:	ef 38 ff f6 	ld.ub	r8,r7[-10]
800074ce:	a3 68       	lsl	r8,0x2
800074d0:	ee 08 00 08 	add	r8,r7,r8
800074d4:	f0 f8 ff dc 	ld.w	r8,r8[-36]
800074d8:	93 08       	st.w	r9[0x0],r8
			{
				tempResult[i] = NewVelocity[i];
			}
			if (!(linearProgram2(planes,ind,maxSpeed,OptimalVelocity,NewVelocity,directionOpt)))
			{
				for (i=0;i<3;i++)
800074da:	ef 38 ff f6 	ld.ub	r8,r7[-10]
800074de:	2f f8       	sub	r8,-1
800074e0:	ef 68 ff f6 	st.b	r7[-10],r8
800074e4:	ef 39 ff f6 	ld.ub	r9,r7[-10]
800074e8:	30 28       	mov	r8,2
800074ea:	f0 09 18 00 	cp.b	r9,r8
800074ee:	fe 98 ff e8 	brls	800074be <linearProgram3+0x282>
				{
					NewVelocity[i] = tempResult[i];
				}
				
				return ind;
800074f2:	ef 38 ff f7 	ld.ub	r8,r7[-9]
800074f6:	e5 a4 08 08 	cop	cp0,cr8,cr0,cr8,0x48
800074fa:	c1 28       	rjmp	8000751e <linearProgram3+0x2e2>
		}
	}
	
	uint8_t ind;
	
	for (ind=0;ind<planeSize;ind++)
800074fc:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80007500:	2f f8       	sub	r8,-1
80007502:	ef 68 ff f7 	st.b	r7[-9],r8
80007506:	ef 39 ff f7 	ld.ub	r9,r7[-9]
8000750a:	ef 38 ff d4 	ld.ub	r8,r7[-44]
8000750e:	f0 09 18 00 	cp.b	r9,r8
80007512:	fe 93 ff 51 	brlo	800073b4 <linearProgram3+0x178>
				
				return ind;
			}
		}
	}
	return planeSize;
80007516:	ef 38 ff d4 	ld.ub	r8,r7[-44]
8000751a:	e5 a4 08 08 	cop	cp0,cr8,cr0,cr8,0x48
}
8000751e:	10 9c       	mov	r12,r8
80007520:	2f 1d       	sub	sp,-60
80007522:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80007526:	00 00       	add	r0,r0
80007528:	80 00       	ld.sh	r0,r0[0x0]
8000752a:	70 cc       	ld.w	r12,r8[0x30]

8000752c <linearProgram4>:

void linearProgram4(plane_t planes[], uint8_t planeSize, uint8_t ind, float maxSpeed, float NewVelocity[])
{
8000752c:	eb cd 40 e8 	pushm	r3,r5-r7,lr
80007530:	1a 97       	mov	r7,sp
80007532:	fa cd 01 f0 	sub	sp,sp,496
80007536:	fe f6 07 a2 	ld.w	r6,pc[1954]
8000753a:	1e 26       	rsub	r6,pc
8000753c:	ef 4c fe 20 	st.w	r7[-480],r12
80007540:	ef 49 fe 14 	st.w	r7[-492],r9
80007544:	ef 48 fe 10 	st.w	r7[-496],r8
80007548:	16 98       	mov	r8,r11
8000754a:	ef 68 fe 1c 	st.b	r7[-484],r8
8000754e:	14 98       	mov	r8,r10
80007550:	ef 68 fe 18 	st.b	r7[-488],r8
	
	uint8_t index,index2;
	
	plane_t projPlanes[MAX_NUM_NEIGHBORS];
	
	float distance = 0.0;
80007554:	30 08       	mov	r8,0
80007556:	ef 48 ff f0 	st.w	r7[-16],r8
	
	for (index = ind;index < planeSize;index++)
8000755a:	ef 38 fe 18 	ld.ub	r8,r7[-488]
8000755e:	ef 68 ff ee 	st.b	r7[-18],r8
80007562:	e0 8f 03 b0 	bral	80007cc2 <linearProgram4+0x796>
	{
		float diffPointVel[3];
		for (i=0;i<3;i++)
80007566:	30 08       	mov	r8,0
80007568:	ef 68 ff ed 	st.b	r7[-19],r8
8000756c:	c2 78       	rjmp	800075ba <linearProgram4+0x8e>
		{
			diffPointVel[i] = planes[index].point[i] - NewVelocity[i];
8000756e:	ef 3a ff ed 	ld.ub	r10,r7[-19]
80007572:	ef 39 ff ee 	ld.ub	r9,r7[-18]
80007576:	12 98       	mov	r8,r9
80007578:	a1 78       	lsl	r8,0x1
8000757a:	12 08       	add	r8,r9
8000757c:	a3 78       	lsl	r8,0x3
8000757e:	ee f9 fe 20 	ld.w	r9,r7[-480]
80007582:	f2 08 00 08 	add	r8,r9,r8
80007586:	ef 39 ff ed 	ld.ub	r9,r7[-19]
8000758a:	2f d9       	sub	r9,-3
8000758c:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80007590:	ef 38 ff ed 	ld.ub	r8,r7[-19]
80007594:	a3 68       	lsl	r8,0x2
80007596:	ee fb fe 10 	ld.w	r11,r7[-496]
8000759a:	f6 08 00 08 	add	r8,r11,r8
8000759e:	70 08       	ld.w	r8,r8[0x0]
800075a0:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
800075a4:	f4 08 15 02 	lsl	r8,r10,0x2
800075a8:	ee 08 00 08 	add	r8,r7,r8
800075ac:	f1 49 fe 78 	st.w	r8[-392],r9
	float distance = 0.0;
	
	for (index = ind;index < planeSize;index++)
	{
		float diffPointVel[3];
		for (i=0;i<3;i++)
800075b0:	ef 38 ff ed 	ld.ub	r8,r7[-19]
800075b4:	2f f8       	sub	r8,-1
800075b6:	ef 68 ff ed 	st.b	r7[-19],r8
800075ba:	ef 39 ff ed 	ld.ub	r9,r7[-19]
800075be:	30 28       	mov	r8,2
800075c0:	f0 09 18 00 	cp.b	r9,r8
800075c4:	fe 98 ff d5 	brls	8000756e <linearProgram4+0x42>
		{
			diffPointVel[i] = planes[index].point[i] - NewVelocity[i];
		}
		if (scalar_product(planes[index].normal,diffPointVel)>distance)
800075c8:	ef 39 ff ee 	ld.ub	r9,r7[-18]
800075cc:	12 98       	mov	r8,r9
800075ce:	a1 78       	lsl	r8,0x1
800075d0:	12 08       	add	r8,r9
800075d2:	a3 78       	lsl	r8,0x3
800075d4:	ee f9 fe 20 	ld.w	r9,r7[-480]
800075d8:	f2 08 00 08 	add	r8,r9,r8
800075dc:	ee c9 01 88 	sub	r9,r7,392
800075e0:	12 9b       	mov	r11,r9
800075e2:	10 9c       	mov	r12,r8
800075e4:	fe b0 ef 42 	rcall	80005468 <scalar_product>
800075e8:	18 9a       	mov	r10,r12
800075ea:	30 18       	mov	r8,1
800075ec:	ee f9 ff f0 	ld.w	r9,r7[-16]
800075f0:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
800075f4:	e0 8c 00 04 	brvs	800075fc <linearProgram4+0xd0>
800075f8:	e0 89 00 03 	brgt	800075fe <linearProgram4+0xd2>
800075fc:	30 08       	mov	r8,0
800075fe:	5c 58       	castu.b	r8
80007600:	e0 80 03 5c 	breq	80007cb8 <linearProgram4+0x78c>
		{
			/* Result does not satisfy constraint of plane i. */
			
			for (index2 = 0;index2<index;index2++)
80007604:	30 08       	mov	r8,0
80007606:	ef 68 ff ef 	st.b	r7[-17],r8
8000760a:	e0 8f 02 a8 	bral	80007b5a <linearProgram4+0x62e>
			{
				plane_t plane;
				float crossProduct[3];
				CROSS(planes[index2].normal, planes[index].normal, crossProduct);
8000760e:	ef 39 ff ef 	ld.ub	r9,r7[-17]
80007612:	12 98       	mov	r8,r9
80007614:	a1 78       	lsl	r8,0x1
80007616:	12 08       	add	r8,r9
80007618:	a3 78       	lsl	r8,0x3
8000761a:	ee f9 fe 20 	ld.w	r9,r7[-480]
8000761e:	f2 08 00 08 	add	r8,r9,r8
80007622:	70 1a       	ld.w	r10,r8[0x4]
80007624:	ef 39 ff ee 	ld.ub	r9,r7[-18]
80007628:	12 98       	mov	r8,r9
8000762a:	a1 78       	lsl	r8,0x1
8000762c:	12 08       	add	r8,r9
8000762e:	a3 78       	lsl	r8,0x3
80007630:	ee f9 fe 20 	ld.w	r9,r7[-480]
80007634:	f2 08 00 08 	add	r8,r9,r8
80007638:	70 28       	ld.w	r8,r8[0x8]
8000763a:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
8000763e:	ef 39 ff ef 	ld.ub	r9,r7[-17]
80007642:	12 98       	mov	r8,r9
80007644:	a1 78       	lsl	r8,0x1
80007646:	12 08       	add	r8,r9
80007648:	a3 78       	lsl	r8,0x3
8000764a:	ee f9 fe 20 	ld.w	r9,r7[-480]
8000764e:	f2 08 00 08 	add	r8,r9,r8
80007652:	70 2b       	ld.w	r11,r8[0x8]
80007654:	ef 39 ff ee 	ld.ub	r9,r7[-18]
80007658:	12 98       	mov	r8,r9
8000765a:	a1 78       	lsl	r8,0x1
8000765c:	12 08       	add	r8,r9
8000765e:	a3 78       	lsl	r8,0x3
80007660:	ee f9 fe 20 	ld.w	r9,r7[-480]
80007664:	f2 08 00 08 	add	r8,r9,r8
80007668:	70 18       	ld.w	r8,r8[0x4]
8000766a:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
8000766e:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80007672:	ef 48 fe 3c 	st.w	r7[-452],r8
80007676:	ef 39 ff ef 	ld.ub	r9,r7[-17]
8000767a:	12 98       	mov	r8,r9
8000767c:	a1 78       	lsl	r8,0x1
8000767e:	12 08       	add	r8,r9
80007680:	a3 78       	lsl	r8,0x3
80007682:	ee f9 fe 20 	ld.w	r9,r7[-480]
80007686:	f2 08 00 08 	add	r8,r9,r8
8000768a:	70 2a       	ld.w	r10,r8[0x8]
8000768c:	ef 39 ff ee 	ld.ub	r9,r7[-18]
80007690:	12 98       	mov	r8,r9
80007692:	a1 78       	lsl	r8,0x1
80007694:	12 08       	add	r8,r9
80007696:	a3 78       	lsl	r8,0x3
80007698:	ee f9 fe 20 	ld.w	r9,r7[-480]
8000769c:	f2 08 00 08 	add	r8,r9,r8
800076a0:	70 08       	ld.w	r8,r8[0x0]
800076a2:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
800076a6:	ef 39 ff ef 	ld.ub	r9,r7[-17]
800076aa:	12 98       	mov	r8,r9
800076ac:	a1 78       	lsl	r8,0x1
800076ae:	12 08       	add	r8,r9
800076b0:	a3 78       	lsl	r8,0x3
800076b2:	ee f9 fe 20 	ld.w	r9,r7[-480]
800076b6:	f2 08 00 08 	add	r8,r9,r8
800076ba:	70 0b       	ld.w	r11,r8[0x0]
800076bc:	ef 39 ff ee 	ld.ub	r9,r7[-18]
800076c0:	12 98       	mov	r8,r9
800076c2:	a1 78       	lsl	r8,0x1
800076c4:	12 08       	add	r8,r9
800076c6:	a3 78       	lsl	r8,0x3
800076c8:	ee f9 fe 20 	ld.w	r9,r7[-480]
800076cc:	f2 08 00 08 	add	r8,r9,r8
800076d0:	70 28       	ld.w	r8,r8[0x8]
800076d2:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
800076d6:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
800076da:	ef 48 fe 40 	st.w	r7[-448],r8
800076de:	ef 39 ff ef 	ld.ub	r9,r7[-17]
800076e2:	12 98       	mov	r8,r9
800076e4:	a1 78       	lsl	r8,0x1
800076e6:	12 08       	add	r8,r9
800076e8:	a3 78       	lsl	r8,0x3
800076ea:	ee f9 fe 20 	ld.w	r9,r7[-480]
800076ee:	f2 08 00 08 	add	r8,r9,r8
800076f2:	70 0a       	ld.w	r10,r8[0x0]
800076f4:	ef 39 ff ee 	ld.ub	r9,r7[-18]
800076f8:	12 98       	mov	r8,r9
800076fa:	a1 78       	lsl	r8,0x1
800076fc:	12 08       	add	r8,r9
800076fe:	a3 78       	lsl	r8,0x3
80007700:	ee f9 fe 20 	ld.w	r9,r7[-480]
80007704:	f2 08 00 08 	add	r8,r9,r8
80007708:	70 18       	ld.w	r8,r8[0x4]
8000770a:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
8000770e:	ef 39 ff ef 	ld.ub	r9,r7[-17]
80007712:	12 98       	mov	r8,r9
80007714:	a1 78       	lsl	r8,0x1
80007716:	12 08       	add	r8,r9
80007718:	a3 78       	lsl	r8,0x3
8000771a:	ee f9 fe 20 	ld.w	r9,r7[-480]
8000771e:	f2 08 00 08 	add	r8,r9,r8
80007722:	70 1b       	ld.w	r11,r8[0x4]
80007724:	ef 39 ff ee 	ld.ub	r9,r7[-18]
80007728:	12 98       	mov	r8,r9
8000772a:	a1 78       	lsl	r8,0x1
8000772c:	12 08       	add	r8,r9
8000772e:	a3 78       	lsl	r8,0x3
80007730:	ee f9 fe 20 	ld.w	r9,r7[-480]
80007734:	f2 08 00 08 	add	r8,r9,r8
80007738:	70 08       	ld.w	r8,r8[0x0]
8000773a:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
8000773e:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80007742:	ef 48 fe 44 	st.w	r7[-444],r8
				
				if (vector_norm_sqr(crossProduct)<=RVO_EPSILON)
80007746:	ee c8 01 c4 	sub	r8,r7,452
8000774a:	10 9c       	mov	r12,r8
8000774c:	fe b0 f0 5e 	rcall	80005808 <vector_norm_sqr>
80007750:	18 98       	mov	r8,r12
80007752:	10 9c       	mov	r12,r8
80007754:	f0 16 00 02 	mcall	r6[8]
80007758:	14 98       	mov	r8,r10
8000775a:	16 99       	mov	r9,r11
8000775c:	30 05       	mov	r5,0
8000775e:	e0 6a 43 2d 	mov	r10,17197
80007762:	ea 1a eb 1c 	orh	r10,0xeb1c
80007766:	e0 6b 36 e2 	mov	r11,14050
8000776a:	ea 1b 3f 1a 	orh	r11,0x3f1a
8000776e:	f0 16 00 76 	mcall	r6[472]
80007772:	18 98       	mov	r8,r12
80007774:	58 08       	cp.w	r8,0
80007776:	c0 20       	breq	8000777a <linearProgram4+0x24e>
80007778:	30 15       	mov	r5,1
8000777a:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
8000777e:	c6 50       	breq	80007848 <linearProgram4+0x31c>
				{
					/* Plane index and plane index2 are (almost) parallel. */
					if (scalar_product(planes[index].normal, planes[index2].normal) > 0.0f) {
80007780:	ef 39 ff ef 	ld.ub	r9,r7[-17]
80007784:	12 98       	mov	r8,r9
80007786:	a1 78       	lsl	r8,0x1
80007788:	12 08       	add	r8,r9
8000778a:	a3 78       	lsl	r8,0x3
8000778c:	ee f9 fe 20 	ld.w	r9,r7[-480]
80007790:	f2 08 00 08 	add	r8,r9,r8
80007794:	10 9a       	mov	r10,r8
80007796:	ef 39 ff ee 	ld.ub	r9,r7[-18]
8000779a:	12 98       	mov	r8,r9
8000779c:	a1 78       	lsl	r8,0x1
8000779e:	12 08       	add	r8,r9
800077a0:	a3 78       	lsl	r8,0x3
800077a2:	ee f9 fe 20 	ld.w	r9,r7[-480]
800077a6:	f2 08 00 08 	add	r8,r9,r8
800077aa:	14 9b       	mov	r11,r10
800077ac:	10 9c       	mov	r12,r8
800077ae:	fe b0 ee 5d 	rcall	80005468 <scalar_product>
800077b2:	18 9a       	mov	r10,r12
800077b4:	30 18       	mov	r8,1
800077b6:	30 09       	mov	r9,0
800077b8:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
800077bc:	e0 8c 00 04 	brvs	800077c4 <linearProgram4+0x298>
800077c0:	e0 89 00 03 	brgt	800077c6 <linearProgram4+0x29a>
800077c4:	30 08       	mov	r8,0
800077c6:	5c 58       	castu.b	r8
800077c8:	e0 81 01 c3 	brne	80007b4e <linearProgram4+0x622>
						/* Plane index and plane index2 point in the same direction. */
						continue;
					}else{
						/* Plane index and plane index2 point in opposite direction. */
						for (i=0;i<3;i++)
800077cc:	30 08       	mov	r8,0
800077ce:	ef 68 ff ed 	st.b	r7[-19],r8
800077d2:	c3 38       	rjmp	80007838 <linearProgram4+0x30c>
						{
							plane.point[i] = 0.5 * (planes[index].point[i] + planes[index2].point[i]);
800077d4:	ef 3a ff ed 	ld.ub	r10,r7[-19]
800077d8:	ef 39 ff ee 	ld.ub	r9,r7[-18]
800077dc:	12 98       	mov	r8,r9
800077de:	a1 78       	lsl	r8,0x1
800077e0:	12 08       	add	r8,r9
800077e2:	a3 78       	lsl	r8,0x3
800077e4:	ee f9 fe 20 	ld.w	r9,r7[-480]
800077e8:	f2 08 00 08 	add	r8,r9,r8
800077ec:	ef 39 ff ed 	ld.ub	r9,r7[-19]
800077f0:	2f d9       	sub	r9,-3
800077f2:	f0 09 03 2b 	ld.w	r11,r8[r9<<0x2]
800077f6:	ef 39 ff ef 	ld.ub	r9,r7[-17]
800077fa:	12 98       	mov	r8,r9
800077fc:	a1 78       	lsl	r8,0x1
800077fe:	12 08       	add	r8,r9
80007800:	a3 78       	lsl	r8,0x3
80007802:	ee f9 fe 20 	ld.w	r9,r7[-480]
80007806:	f2 08 00 08 	add	r8,r9,r8
8000780a:	ef 39 ff ed 	ld.ub	r9,r7[-19]
8000780e:	2f d9       	sub	r9,-3
80007810:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80007814:	e5 a0 09 b8 	cop	cp0,cr9,cr11,cr8,0x40
80007818:	fc 18 3f 00 	movh	r8,0x3f00
8000781c:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80007820:	f4 c8 ff fd 	sub	r8,r10,-3
80007824:	a3 68       	lsl	r8,0x2
80007826:	ee 08 00 08 	add	r8,r7,r8
8000782a:	f1 49 fe 48 	st.w	r8[-440],r9
					if (scalar_product(planes[index].normal, planes[index2].normal) > 0.0f) {
						/* Plane index and plane index2 point in the same direction. */
						continue;
					}else{
						/* Plane index and plane index2 point in opposite direction. */
						for (i=0;i<3;i++)
8000782e:	ef 38 ff ed 	ld.ub	r8,r7[-19]
80007832:	2f f8       	sub	r8,-1
80007834:	ef 68 ff ed 	st.b	r7[-19],r8
80007838:	ef 39 ff ed 	ld.ub	r9,r7[-19]
8000783c:	30 28       	mov	r8,2
8000783e:	f0 09 18 00 	cp.b	r9,r8
80007842:	fe 98 ff c9 	brls	800077d4 <linearProgram4+0x2a8>
80007846:	c0 29       	rjmp	80007a4a <linearProgram4+0x51e>
							plane.point[i] = 0.5 * (planes[index].point[i] + planes[index2].point[i]);
						}
					}
				}else{
					float lineNormal[3];
					CROSS(crossProduct,planes[index].normal,lineNormal);
80007848:	ee fa fe 40 	ld.w	r10,r7[-448]
8000784c:	ef 39 ff ee 	ld.ub	r9,r7[-18]
80007850:	12 98       	mov	r8,r9
80007852:	a1 78       	lsl	r8,0x1
80007854:	12 08       	add	r8,r9
80007856:	a3 78       	lsl	r8,0x3
80007858:	ee f9 fe 20 	ld.w	r9,r7[-480]
8000785c:	f2 08 00 08 	add	r8,r9,r8
80007860:	70 28       	ld.w	r8,r8[0x8]
80007862:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
80007866:	ee fb fe 44 	ld.w	r11,r7[-444]
8000786a:	ef 39 ff ee 	ld.ub	r9,r7[-18]
8000786e:	12 98       	mov	r8,r9
80007870:	a1 78       	lsl	r8,0x1
80007872:	12 08       	add	r8,r9
80007874:	a3 78       	lsl	r8,0x3
80007876:	ee f9 fe 20 	ld.w	r9,r7[-480]
8000787a:	f2 08 00 08 	add	r8,r9,r8
8000787e:	70 18       	ld.w	r8,r8[0x4]
80007880:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
80007884:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80007888:	ef 48 fe 30 	st.w	r7[-464],r8
8000788c:	ee fa fe 44 	ld.w	r10,r7[-444]
80007890:	ef 39 ff ee 	ld.ub	r9,r7[-18]
80007894:	12 98       	mov	r8,r9
80007896:	a1 78       	lsl	r8,0x1
80007898:	12 08       	add	r8,r9
8000789a:	a3 78       	lsl	r8,0x3
8000789c:	ee f9 fe 20 	ld.w	r9,r7[-480]
800078a0:	f2 08 00 08 	add	r8,r9,r8
800078a4:	70 08       	ld.w	r8,r8[0x0]
800078a6:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
800078aa:	ee fb fe 3c 	ld.w	r11,r7[-452]
800078ae:	ef 39 ff ee 	ld.ub	r9,r7[-18]
800078b2:	12 98       	mov	r8,r9
800078b4:	a1 78       	lsl	r8,0x1
800078b6:	12 08       	add	r8,r9
800078b8:	a3 78       	lsl	r8,0x3
800078ba:	ee f9 fe 20 	ld.w	r9,r7[-480]
800078be:	f2 08 00 08 	add	r8,r9,r8
800078c2:	70 28       	ld.w	r8,r8[0x8]
800078c4:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
800078c8:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
800078cc:	ef 48 fe 34 	st.w	r7[-460],r8
800078d0:	ee fa fe 3c 	ld.w	r10,r7[-452]
800078d4:	ef 39 ff ee 	ld.ub	r9,r7[-18]
800078d8:	12 98       	mov	r8,r9
800078da:	a1 78       	lsl	r8,0x1
800078dc:	12 08       	add	r8,r9
800078de:	a3 78       	lsl	r8,0x3
800078e0:	ee f9 fe 20 	ld.w	r9,r7[-480]
800078e4:	f2 08 00 08 	add	r8,r9,r8
800078e8:	70 18       	ld.w	r8,r8[0x4]
800078ea:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
800078ee:	ee fb fe 40 	ld.w	r11,r7[-448]
800078f2:	ef 39 ff ee 	ld.ub	r9,r7[-18]
800078f6:	12 98       	mov	r8,r9
800078f8:	a1 78       	lsl	r8,0x1
800078fa:	12 08       	add	r8,r9
800078fc:	a3 78       	lsl	r8,0x3
800078fe:	ee f9 fe 20 	ld.w	r9,r7[-480]
80007902:	f2 08 00 08 	add	r8,r9,r8
80007906:	70 08       	ld.w	r8,r8[0x0]
80007908:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
8000790c:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80007910:	ef 48 fe 38 	st.w	r7[-456],r8
					
					float diffPoints[3];
					for (i=0;i<3;i++)
80007914:	30 08       	mov	r8,0
80007916:	ef 68 ff ed 	st.b	r7[-19],r8
8000791a:	c2 e8       	rjmp	80007976 <linearProgram4+0x44a>
					{
						diffPoints[i] = planes[index2].point[i] - planes[index].point[i];
8000791c:	ef 3a ff ed 	ld.ub	r10,r7[-19]
80007920:	ef 39 ff ef 	ld.ub	r9,r7[-17]
80007924:	12 98       	mov	r8,r9
80007926:	a1 78       	lsl	r8,0x1
80007928:	12 08       	add	r8,r9
8000792a:	a3 78       	lsl	r8,0x3
8000792c:	ee f9 fe 20 	ld.w	r9,r7[-480]
80007930:	f2 08 00 08 	add	r8,r9,r8
80007934:	ef 39 ff ed 	ld.ub	r9,r7[-19]
80007938:	2f d9       	sub	r9,-3
8000793a:	f0 09 03 2b 	ld.w	r11,r8[r9<<0x2]
8000793e:	ef 39 ff ee 	ld.ub	r9,r7[-18]
80007942:	12 98       	mov	r8,r9
80007944:	a1 78       	lsl	r8,0x1
80007946:	12 08       	add	r8,r9
80007948:	a3 78       	lsl	r8,0x3
8000794a:	ee f9 fe 20 	ld.w	r9,r7[-480]
8000794e:	f2 08 00 08 	add	r8,r9,r8
80007952:	ef 39 ff ed 	ld.ub	r9,r7[-19]
80007956:	2f d9       	sub	r9,-3
80007958:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8000795c:	e5 a1 09 b8 	cop	cp0,cr9,cr11,cr8,0x42
80007960:	f4 08 15 02 	lsl	r8,r10,0x2
80007964:	ee 08 00 08 	add	r8,r7,r8
80007968:	f1 49 fe 24 	st.w	r8[-476],r9
				}else{
					float lineNormal[3];
					CROSS(crossProduct,planes[index].normal,lineNormal);
					
					float diffPoints[3];
					for (i=0;i<3;i++)
8000796c:	ef 38 ff ed 	ld.ub	r8,r7[-19]
80007970:	2f f8       	sub	r8,-1
80007972:	ef 68 ff ed 	st.b	r7[-19],r8
80007976:	ef 39 ff ed 	ld.ub	r9,r7[-19]
8000797a:	30 28       	mov	r8,2
8000797c:	f0 09 18 00 	cp.b	r9,r8
80007980:	fe 98 ff ce 	brls	8000791c <linearProgram4+0x3f0>
					{
						diffPoints[i] = planes[index2].point[i] - planes[index].point[i];
					}
					
					float scalarProdPtsNormal = scalar_product(diffPoints, planes[index2].normal);
80007984:	ef 39 ff ef 	ld.ub	r9,r7[-17]
80007988:	12 98       	mov	r8,r9
8000798a:	a1 78       	lsl	r8,0x1
8000798c:	12 08       	add	r8,r9
8000798e:	a3 78       	lsl	r8,0x3
80007990:	ee f9 fe 20 	ld.w	r9,r7[-480]
80007994:	f2 08 00 08 	add	r8,r9,r8
80007998:	10 99       	mov	r9,r8
8000799a:	ee c8 01 dc 	sub	r8,r7,476
8000799e:	12 9b       	mov	r11,r9
800079a0:	10 9c       	mov	r12,r8
800079a2:	fe b0 ed 63 	rcall	80005468 <scalar_product>
800079a6:	18 98       	mov	r8,r12
800079a8:	ef 48 ff f8 	st.w	r7[-8],r8
					float scalarProdNormals = scalar_product(lineNormal, planes[index2].normal);
800079ac:	ef 39 ff ef 	ld.ub	r9,r7[-17]
800079b0:	12 98       	mov	r8,r9
800079b2:	a1 78       	lsl	r8,0x1
800079b4:	12 08       	add	r8,r9
800079b6:	a3 78       	lsl	r8,0x3
800079b8:	ee f9 fe 20 	ld.w	r9,r7[-480]
800079bc:	f2 08 00 08 	add	r8,r9,r8
800079c0:	10 99       	mov	r9,r8
800079c2:	ee c8 01 d0 	sub	r8,r7,464
800079c6:	12 9b       	mov	r11,r9
800079c8:	10 9c       	mov	r12,r8
800079ca:	fe b0 ed 4f 	rcall	80005468 <scalar_product>
800079ce:	18 98       	mov	r8,r12
800079d0:	ef 48 ff fc 	st.w	r7[-4],r8
					for (i=0;i<3;i++)
800079d4:	30 08       	mov	r8,0
800079d6:	ef 68 ff ed 	st.b	r7[-19],r8
800079da:	c3 18       	rjmp	80007a3c <linearProgram4+0x510>
					{
						plane.point[i] = planes[index].point[i] + (scalarProdPtsNormal / scalarProdNormals) * lineNormal[i];
800079dc:	ef 35 ff ed 	ld.ub	r5,r7[-19]
800079e0:	ef 39 ff ee 	ld.ub	r9,r7[-18]
800079e4:	12 98       	mov	r8,r9
800079e6:	a1 78       	lsl	r8,0x1
800079e8:	12 08       	add	r8,r9
800079ea:	a3 78       	lsl	r8,0x3
800079ec:	ee f9 fe 20 	ld.w	r9,r7[-480]
800079f0:	f2 08 00 08 	add	r8,r9,r8
800079f4:	ef 39 ff ed 	ld.ub	r9,r7[-19]
800079f8:	2f d9       	sub	r9,-3
800079fa:	f0 09 03 23 	ld.w	r3,r8[r9<<0x2]
800079fe:	ee fb ff fc 	ld.w	r11,r7[-4]
80007a02:	ee fc ff f8 	ld.w	r12,r7[-8]
80007a06:	f0 16 00 08 	mcall	r6[32]
80007a0a:	18 98       	mov	r8,r12
80007a0c:	10 99       	mov	r9,r8
80007a0e:	ef 38 ff ed 	ld.ub	r8,r7[-19]
80007a12:	a3 68       	lsl	r8,0x2
80007a14:	ee 08 00 08 	add	r8,r7,r8
80007a18:	f0 f8 fe 30 	ld.w	r8,r8[-464]
80007a1c:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80007a20:	e5 a0 09 38 	cop	cp0,cr9,cr3,cr8,0x40
80007a24:	ea c8 ff fd 	sub	r8,r5,-3
80007a28:	a3 68       	lsl	r8,0x2
80007a2a:	ee 08 00 08 	add	r8,r7,r8
80007a2e:	f1 49 fe 48 	st.w	r8[-440],r9
						diffPoints[i] = planes[index2].point[i] - planes[index].point[i];
					}
					
					float scalarProdPtsNormal = scalar_product(diffPoints, planes[index2].normal);
					float scalarProdNormals = scalar_product(lineNormal, planes[index2].normal);
					for (i=0;i<3;i++)
80007a32:	ef 38 ff ed 	ld.ub	r8,r7[-19]
80007a36:	2f f8       	sub	r8,-1
80007a38:	ef 68 ff ed 	st.b	r7[-19],r8
80007a3c:	ef 39 ff ed 	ld.ub	r9,r7[-19]
80007a40:	30 28       	mov	r8,2
80007a42:	f0 09 18 00 	cp.b	r9,r8
80007a46:	fe 98 ff cb 	brls	800079dc <linearProgram4+0x4b0>
					{
						plane.point[i] = planes[index].point[i] + (scalarProdPtsNormal / scalarProdNormals) * lineNormal[i];
					}
				}
				
				for (i=0;i<3;i++)
80007a4a:	30 08       	mov	r8,0
80007a4c:	ef 68 ff ed 	st.b	r7[-19],r8
80007a50:	c2 c8       	rjmp	80007aa8 <linearProgram4+0x57c>
				{
					plane.normal[i] = planes[index2].normal[i] - planes[index].normal[i];
80007a52:	ef 3a ff ed 	ld.ub	r10,r7[-19]
80007a56:	ef 39 ff ef 	ld.ub	r9,r7[-17]
80007a5a:	12 98       	mov	r8,r9
80007a5c:	a1 78       	lsl	r8,0x1
80007a5e:	12 08       	add	r8,r9
80007a60:	a3 78       	lsl	r8,0x3
80007a62:	ee f9 fe 20 	ld.w	r9,r7[-480]
80007a66:	f2 08 00 08 	add	r8,r9,r8
80007a6a:	ef 39 ff ed 	ld.ub	r9,r7[-19]
80007a6e:	f0 09 03 2b 	ld.w	r11,r8[r9<<0x2]
80007a72:	ef 39 ff ee 	ld.ub	r9,r7[-18]
80007a76:	12 98       	mov	r8,r9
80007a78:	a1 78       	lsl	r8,0x1
80007a7a:	12 08       	add	r8,r9
80007a7c:	a3 78       	lsl	r8,0x3
80007a7e:	ee f9 fe 20 	ld.w	r9,r7[-480]
80007a82:	f2 08 00 08 	add	r8,r9,r8
80007a86:	ef 39 ff ed 	ld.ub	r9,r7[-19]
80007a8a:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80007a8e:	e5 a1 09 b8 	cop	cp0,cr9,cr11,cr8,0x42
80007a92:	f4 08 15 02 	lsl	r8,r10,0x2
80007a96:	ee 08 00 08 	add	r8,r7,r8
80007a9a:	f1 49 fe 48 	st.w	r8[-440],r9
					{
						plane.point[i] = planes[index].point[i] + (scalarProdPtsNormal / scalarProdNormals) * lineNormal[i];
					}
				}
				
				for (i=0;i<3;i++)
80007a9e:	ef 38 ff ed 	ld.ub	r8,r7[-19]
80007aa2:	2f f8       	sub	r8,-1
80007aa4:	ef 68 ff ed 	st.b	r7[-19],r8
80007aa8:	ef 39 ff ed 	ld.ub	r9,r7[-19]
80007aac:	30 28       	mov	r8,2
80007aae:	f0 09 18 00 	cp.b	r9,r8
80007ab2:	fe 98 ff d0 	brls	80007a52 <linearProgram4+0x526>
				{
					plane.normal[i] = planes[index2].normal[i] - planes[index].normal[i];
				}
				float normNormal = vector_norm(plane.normal);
80007ab6:	ee c8 01 b8 	sub	r8,r7,440
80007aba:	10 9c       	mov	r12,r8
80007abc:	fe b0 ee be 	rcall	80005838 <vector_norm>
80007ac0:	18 98       	mov	r8,r12
80007ac2:	ef 48 ff f4 	st.w	r7[-12],r8
				for(i=0;i<3;i++)
80007ac6:	30 08       	mov	r8,0
80007ac8:	ef 68 ff ed 	st.b	r7[-19],r8
80007acc:	c1 c8       	rjmp	80007b04 <linearProgram4+0x5d8>
				{
					plane.normal[i] = plane.normal[i] / normNormal;
80007ace:	ef 35 ff ed 	ld.ub	r5,r7[-19]
80007ad2:	ef 38 ff ed 	ld.ub	r8,r7[-19]
80007ad6:	a3 68       	lsl	r8,0x2
80007ad8:	ee 08 00 08 	add	r8,r7,r8
80007adc:	f0 f8 fe 48 	ld.w	r8,r8[-440]
80007ae0:	ee fb ff f4 	ld.w	r11,r7[-12]
80007ae4:	10 9c       	mov	r12,r8
80007ae6:	f0 16 00 08 	mcall	r6[32]
80007aea:	18 98       	mov	r8,r12
80007aec:	10 99       	mov	r9,r8
80007aee:	ea 08 15 02 	lsl	r8,r5,0x2
80007af2:	ee 08 00 08 	add	r8,r7,r8
80007af6:	f1 49 fe 48 	st.w	r8[-440],r9
				for (i=0;i<3;i++)
				{
					plane.normal[i] = planes[index2].normal[i] - planes[index].normal[i];
				}
				float normNormal = vector_norm(plane.normal);
				for(i=0;i<3;i++)
80007afa:	ef 38 ff ed 	ld.ub	r8,r7[-19]
80007afe:	2f f8       	sub	r8,-1
80007b00:	ef 68 ff ed 	st.b	r7[-19],r8
80007b04:	ef 39 ff ed 	ld.ub	r9,r7[-19]
80007b08:	30 28       	mov	r8,2
80007b0a:	f0 09 18 00 	cp.b	r9,r8
80007b0e:	fe 98 ff e0 	brls	80007ace <linearProgram4+0x5a2>
				{
					plane.normal[i] = plane.normal[i] / normNormal;
				}
				
				projPlanes[index2] = plane;
80007b12:	ef 39 ff ef 	ld.ub	r9,r7[-17]
80007b16:	12 98       	mov	r8,r9
80007b18:	a1 78       	lsl	r8,0x1
80007b1a:	12 08       	add	r8,r9
80007b1c:	a3 78       	lsl	r8,0x3
80007b1e:	ee 08 00 08 	add	r8,r7,r8
80007b22:	f0 c8 01 7c 	sub	r8,r8,380
80007b26:	10 9a       	mov	r10,r8
80007b28:	ee cb 01 b8 	sub	r11,r7,440
80007b2c:	f4 c8 00 00 	sub	r8,r10,0
80007b30:	f6 c9 00 00 	sub	r9,r11,0
80007b34:	72 0c       	ld.w	r12,r9[0x0]
80007b36:	91 0c       	st.w	r8[0x0],r12
80007b38:	72 1c       	ld.w	r12,r9[0x4]
80007b3a:	91 1c       	st.w	r8[0x4],r12
80007b3c:	72 2c       	ld.w	r12,r9[0x8]
80007b3e:	91 2c       	st.w	r8[0x8],r12
80007b40:	72 39       	ld.w	r9,r9[0xc]
80007b42:	91 39       	st.w	r8[0xc],r9
80007b44:	f6 e8 00 10 	ld.d	r8,r11[16]
80007b48:	f4 e9 00 10 	st.d	r10[16],r8
80007b4c:	c0 28       	rjmp	80007b50 <linearProgram4+0x624>
				if (vector_norm_sqr(crossProduct)<=RVO_EPSILON)
				{
					/* Plane index and plane index2 are (almost) parallel. */
					if (scalar_product(planes[index].normal, planes[index2].normal) > 0.0f) {
						/* Plane index and plane index2 point in the same direction. */
						continue;
80007b4e:	d7 03       	nop
		}
		if (scalar_product(planes[index].normal,diffPointVel)>distance)
		{
			/* Result does not satisfy constraint of plane i. */
			
			for (index2 = 0;index2<index;index2++)
80007b50:	ef 38 ff ef 	ld.ub	r8,r7[-17]
80007b54:	2f f8       	sub	r8,-1
80007b56:	ef 68 ff ef 	st.b	r7[-17],r8
80007b5a:	ef 39 ff ef 	ld.ub	r9,r7[-17]
80007b5e:	ef 38 ff ee 	ld.ub	r8,r7[-18]
80007b62:	f0 09 18 00 	cp.b	r9,r8
80007b66:	fe 93 fd 54 	brlo	8000760e <linearProgram4+0xe2>
				
				projPlanes[index2] = plane;
			}
			
			float tempResult[3];
			for (i=0;i<3;i++)
80007b6a:	30 08       	mov	r8,0
80007b6c:	ef 68 ff ed 	st.b	r7[-19],r8
80007b70:	c1 58       	rjmp	80007b9a <linearProgram4+0x66e>
			{
				tempResult[i] = NewVelocity[i];
80007b72:	ef 38 ff ed 	ld.ub	r8,r7[-19]
80007b76:	ef 39 ff ed 	ld.ub	r9,r7[-19]
80007b7a:	a3 69       	lsl	r9,0x2
80007b7c:	ee fa fe 10 	ld.w	r10,r7[-496]
80007b80:	f4 09 00 09 	add	r9,r10,r9
80007b84:	72 09       	ld.w	r9,r9[0x0]
80007b86:	a3 68       	lsl	r8,0x2
80007b88:	ee 08 00 08 	add	r8,r7,r8
80007b8c:	f1 49 fe 6c 	st.w	r8[-404],r9
				
				projPlanes[index2] = plane;
			}
			
			float tempResult[3];
			for (i=0;i<3;i++)
80007b90:	ef 38 ff ed 	ld.ub	r8,r7[-19]
80007b94:	2f f8       	sub	r8,-1
80007b96:	ef 68 ff ed 	st.b	r7[-19],r8
80007b9a:	ef 39 ff ed 	ld.ub	r9,r7[-19]
80007b9e:	30 28       	mov	r8,2
80007ba0:	f0 09 18 00 	cp.b	r9,r8
80007ba4:	fe 98 ff e7 	brls	80007b72 <linearProgram4+0x646>
			{
				tempResult[i] = NewVelocity[i];
			}
			if (linearProgram3(projPlanes,index2,planes[index].normal,maxSpeed,NewVelocity,true)<index2)
80007ba8:	ef 39 ff ee 	ld.ub	r9,r7[-18]
80007bac:	12 98       	mov	r8,r9
80007bae:	a1 78       	lsl	r8,0x1
80007bb0:	12 08       	add	r8,r9
80007bb2:	a3 78       	lsl	r8,0x3
80007bb4:	ee f9 fe 20 	ld.w	r9,r7[-480]
80007bb8:	f2 08 00 08 	add	r8,r9,r8
80007bbc:	10 9a       	mov	r10,r8
80007bbe:	ef 3b ff ef 	ld.ub	r11,r7[-17]
80007bc2:	ee cc 01 7c 	sub	r12,r7,380
80007bc6:	30 18       	mov	r8,1
80007bc8:	1a d8       	st.w	--sp,r8
80007bca:	ee f8 fe 10 	ld.w	r8,r7[-496]
80007bce:	ee f9 fe 14 	ld.w	r9,r7[-492]
80007bd2:	f0 16 01 06 	mcall	r6[1048]
80007bd6:	2f fd       	sub	sp,-4
80007bd8:	18 9a       	mov	r10,r12
80007bda:	ef 38 ff ef 	ld.ub	r8,r7[-17]
80007bde:	e5 a6 09 08 	cop	cp0,cr9,cr0,cr8,0x4c
80007be2:	30 18       	mov	r8,1
80007be4:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80007be8:	e0 8c 00 03 	brvs	80007bee <linearProgram4+0x6c2>
80007bec:	c0 25       	brlt	80007bf0 <linearProgram4+0x6c4>
80007bee:	30 08       	mov	r8,0
80007bf0:	5c 58       	castu.b	r8
80007bf2:	c1 f0       	breq	80007c30 <linearProgram4+0x704>
			{
				for (i=0;i<3;i++)
80007bf4:	30 08       	mov	r8,0
80007bf6:	ef 68 ff ed 	st.b	r7[-19],r8
80007bfa:	c1 48       	rjmp	80007c22 <linearProgram4+0x6f6>
				{
					NewVelocity[i] = tempResult[i];
80007bfc:	ef 38 ff ed 	ld.ub	r8,r7[-19]
80007c00:	a3 68       	lsl	r8,0x2
80007c02:	ee f9 fe 10 	ld.w	r9,r7[-496]
80007c06:	10 09       	add	r9,r8
80007c08:	ef 38 ff ed 	ld.ub	r8,r7[-19]
80007c0c:	a3 68       	lsl	r8,0x2
80007c0e:	ee 08 00 08 	add	r8,r7,r8
80007c12:	f0 f8 fe 6c 	ld.w	r8,r8[-404]
80007c16:	93 08       	st.w	r9[0x0],r8
			{
				tempResult[i] = NewVelocity[i];
			}
			if (linearProgram3(projPlanes,index2,planes[index].normal,maxSpeed,NewVelocity,true)<index2)
			{
				for (i=0;i<3;i++)
80007c18:	ef 38 ff ed 	ld.ub	r8,r7[-19]
80007c1c:	2f f8       	sub	r8,-1
80007c1e:	ef 68 ff ed 	st.b	r7[-19],r8
80007c22:	ef 39 ff ed 	ld.ub	r9,r7[-19]
80007c26:	30 28       	mov	r8,2
80007c28:	f0 09 18 00 	cp.b	r9,r8
80007c2c:	fe 98 ff e8 	brls	80007bfc <linearProgram4+0x6d0>
				{
					NewVelocity[i] = tempResult[i];
				}
			}
			float diffPointVel[3];
			for (i=0;i<3;i++)
80007c30:	30 08       	mov	r8,0
80007c32:	ef 68 ff ed 	st.b	r7[-19],r8
80007c36:	c2 78       	rjmp	80007c84 <linearProgram4+0x758>
			{
				diffPointVel[i] = planes[index].point[i] - NewVelocity[i];
80007c38:	ef 3a ff ed 	ld.ub	r10,r7[-19]
80007c3c:	ef 39 ff ee 	ld.ub	r9,r7[-18]
80007c40:	12 98       	mov	r8,r9
80007c42:	a1 78       	lsl	r8,0x1
80007c44:	12 08       	add	r8,r9
80007c46:	a3 78       	lsl	r8,0x3
80007c48:	ee f9 fe 20 	ld.w	r9,r7[-480]
80007c4c:	f2 08 00 08 	add	r8,r9,r8
80007c50:	ef 39 ff ed 	ld.ub	r9,r7[-19]
80007c54:	2f d9       	sub	r9,-3
80007c56:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80007c5a:	ef 38 ff ed 	ld.ub	r8,r7[-19]
80007c5e:	a3 68       	lsl	r8,0x2
80007c60:	ee fb fe 10 	ld.w	r11,r7[-496]
80007c64:	f6 08 00 08 	add	r8,r11,r8
80007c68:	70 08       	ld.w	r8,r8[0x0]
80007c6a:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80007c6e:	f4 08 15 02 	lsl	r8,r10,0x2
80007c72:	ee 08 00 08 	add	r8,r7,r8
80007c76:	f1 49 fe 60 	st.w	r8[-416],r9
				{
					NewVelocity[i] = tempResult[i];
				}
			}
			float diffPointVel[3];
			for (i=0;i<3;i++)
80007c7a:	ef 38 ff ed 	ld.ub	r8,r7[-19]
80007c7e:	2f f8       	sub	r8,-1
80007c80:	ef 68 ff ed 	st.b	r7[-19],r8
80007c84:	ef 39 ff ed 	ld.ub	r9,r7[-19]
80007c88:	30 28       	mov	r8,2
80007c8a:	f0 09 18 00 	cp.b	r9,r8
80007c8e:	fe 98 ff d5 	brls	80007c38 <linearProgram4+0x70c>
			{
				diffPointVel[i] = planes[index].point[i] - NewVelocity[i];
			}
			distance = scalar_product(planes[index].normal,diffPointVel);
80007c92:	ef 39 ff ee 	ld.ub	r9,r7[-18]
80007c96:	12 98       	mov	r8,r9
80007c98:	a1 78       	lsl	r8,0x1
80007c9a:	12 08       	add	r8,r9
80007c9c:	a3 78       	lsl	r8,0x3
80007c9e:	ee f9 fe 20 	ld.w	r9,r7[-480]
80007ca2:	f2 08 00 08 	add	r8,r9,r8
80007ca6:	ee c9 01 a0 	sub	r9,r7,416
80007caa:	12 9b       	mov	r11,r9
80007cac:	10 9c       	mov	r12,r8
80007cae:	fe b0 eb dd 	rcall	80005468 <scalar_product>
80007cb2:	18 98       	mov	r8,r12
80007cb4:	ef 48 ff f0 	st.w	r7[-16],r8
	
	plane_t projPlanes[MAX_NUM_NEIGHBORS];
	
	float distance = 0.0;
	
	for (index = ind;index < planeSize;index++)
80007cb8:	ef 38 ff ee 	ld.ub	r8,r7[-18]
80007cbc:	2f f8       	sub	r8,-1
80007cbe:	ef 68 ff ee 	st.b	r7[-18],r8
80007cc2:	ef 39 ff ee 	ld.ub	r9,r7[-18]
80007cc6:	ef 38 fe 1c 	ld.ub	r8,r7[-484]
80007cca:	f0 09 18 00 	cp.b	r9,r8
80007cce:	fe 93 fc 4c 	brlo	80007566 <linearProgram4+0x3a>
				diffPointVel[i] = planes[index].point[i] - NewVelocity[i];
			}
			distance = scalar_product(planes[index].normal,diffPointVel);
		}
	}
80007cd2:	28 4d       	sub	sp,-496
80007cd4:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
80007cd8:	80 00       	ld.sh	r0,r0[0x0]
80007cda:	73 be       	ld.w	lr,r9[0x6c]

80007cdc <clip>:
		return b;
	}
}


static float inline clip(float input_value, float clip_value) {
80007cdc:	eb cd 40 80 	pushm	r7,lr
80007ce0:	1a 97       	mov	r7,sp
80007ce2:	20 2d       	sub	sp,8
80007ce4:	ef 4c ff fc 	st.w	r7[-4],r12
80007ce8:	ef 4b ff f8 	st.w	r7[-8],r11
	
	if (input_value>clip_value)  return clip_value;     
80007cec:	30 18       	mov	r8,1
80007cee:	ee fa ff fc 	ld.w	r10,r7[-4]
80007cf2:	ee f9 ff f8 	ld.w	r9,r7[-8]
80007cf6:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80007cfa:	e0 8c 00 04 	brvs	80007d02 <clip+0x26>
80007cfe:	e0 89 00 03 	brgt	80007d04 <clip+0x28>
80007d02:	30 08       	mov	r8,0
80007d04:	5c 58       	castu.b	r8
80007d06:	c0 40       	breq	80007d0e <clip+0x32>
80007d08:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007d0c:	c1 98       	rjmp	80007d3e <clip+0x62>
	if (input_value<-clip_value) return -clip_value; 
80007d0e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007d12:	10 9a       	mov	r10,r8
80007d14:	ee 1a 80 00 	eorh	r10,0x8000
80007d18:	30 18       	mov	r8,1
80007d1a:	ee f9 ff fc 	ld.w	r9,r7[-4]
80007d1e:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80007d22:	e0 8c 00 04 	brvs	80007d2a <clip+0x4e>
80007d26:	e0 89 00 03 	brgt	80007d2c <clip+0x50>
80007d2a:	30 08       	mov	r8,0
80007d2c:	5c 58       	castu.b	r8
80007d2e:	c0 60       	breq	80007d3a <clip+0x5e>
80007d30:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007d34:	ee 18 80 00 	eorh	r8,0x8000
80007d38:	c0 38       	rjmp	80007d3e <clip+0x62>
	return input_value;
80007d3a:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80007d3e:	10 9c       	mov	r12,r8
80007d40:	2f ed       	sub	sp,-8
80007d42:	e3 cd 80 80 	ldm	sp++,r7,pc

80007d46 <soft_zone>:


static float inline soft_zone(float x, float soft_zone_width) {
80007d46:	eb cd 40 e0 	pushm	r5-r7,lr
80007d4a:	1a 97       	mov	r7,sp
80007d4c:	20 2d       	sub	sp,8
80007d4e:	4a 16       	lddpc	r6,80007dd0 <soft_zone+0x8a>
80007d50:	1e 26       	rsub	r6,pc
80007d52:	ef 4c ff fc 	st.w	r7[-4],r12
80007d56:	ef 4b ff f8 	st.w	r7[-8],r11
	if (soft_zone_width<0.0000001) return x; 
80007d5a:	ee fc ff f8 	ld.w	r12,r7[-8]
80007d5e:	f0 16 00 02 	mcall	r6[8]
80007d62:	30 05       	mov	r5,0
80007d64:	e0 68 af 48 	mov	r8,44872
80007d68:	ea 18 9a bc 	orh	r8,0x9abc
80007d6c:	e0 69 d7 f2 	mov	r9,55282
80007d70:	ea 19 3e 7a 	orh	r9,0x3e7a
80007d74:	f0 16 00 1c 	mcall	r6[112]
80007d78:	18 98       	mov	r8,r12
80007d7a:	58 08       	cp.w	r8,0
80007d7c:	c0 20       	breq	80007d80 <soft_zone+0x3a>
80007d7e:	30 15       	mov	r5,1
80007d80:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
80007d84:	c0 40       	breq	80007d8c <soft_zone+0x46>
80007d86:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007d8a:	c1 e8       	rjmp	80007dc6 <soft_zone+0x80>
	else {
		return (x*x*x/(SQR(soft_zone_width) + SQR(x)));
80007d8c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80007d90:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007d94:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80007d98:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007d9c:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80007da0:	ee fa ff f8 	ld.w	r10,r7[-8]
80007da4:	ee f9 ff f8 	ld.w	r9,r7[-8]
80007da8:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
80007dac:	ee fb ff fc 	ld.w	r11,r7[-4]
80007db0:	ee f9 ff fc 	ld.w	r9,r7[-4]
80007db4:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
80007db8:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
80007dbc:	12 9b       	mov	r11,r9
80007dbe:	10 9c       	mov	r12,r8
80007dc0:	f0 16 00 08 	mcall	r6[32]
80007dc4:	18 98       	mov	r8,r12
	}
};
80007dc6:	10 9c       	mov	r12,r8
80007dc8:	2f ed       	sub	sp,-8
80007dca:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80007dce:	00 00       	add	r0,r0
80007dd0:	80 00       	ld.sh	r0,r0[0x0]
80007dd2:	7b d4       	ld.w	r4,sp[0x74]

80007dd4 <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
80007dd4:	eb cd 40 c0 	pushm	r6-r7,lr
80007dd8:	1a 97       	mov	r7,sp
80007dda:	20 6d       	sub	sp,24
80007ddc:	49 e6       	lddpc	r6,80007e54 <interpolate+0x80>
80007dde:	1e 26       	rsub	r6,pc
80007de0:	ef 4c ff f8 	st.w	r7[-8],r12
80007de4:	ef 4b ff f4 	st.w	r7[-12],r11
80007de8:	ef 4a ff f0 	st.w	r7[-16],r10
80007dec:	ef 49 ff ec 	st.w	r7[-20],r9
80007df0:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
80007df4:	ee f9 ff f4 	ld.w	r9,r7[-12]
80007df8:	ee f8 ff f0 	ld.w	r8,r7[-16]
80007dfc:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
80007e00:	c0 41       	brne	80007e08 <interpolate+0x34>
	{
		return y1;
80007e02:	ee f8 ff ec 	ld.w	r8,r7[-20]
80007e06:	c2 38       	rjmp	80007e4c <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
80007e08:	ee f9 ff e8 	ld.w	r9,r7[-24]
80007e0c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80007e10:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80007e14:	ee fa ff f8 	ld.w	r10,r7[-8]
80007e18:	ee f8 ff f4 	ld.w	r8,r7[-12]
80007e1c:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80007e20:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80007e24:	ee fa ff f0 	ld.w	r10,r7[-16]
80007e28:	ee f9 ff f4 	ld.w	r9,r7[-12]
80007e2c:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80007e30:	12 9b       	mov	r11,r9
80007e32:	10 9c       	mov	r12,r8
80007e34:	f0 16 00 08 	mcall	r6[32]
80007e38:	18 98       	mov	r8,r12
80007e3a:	10 99       	mov	r9,r8
80007e3c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80007e40:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80007e44:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
80007e48:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
80007e4c:	10 9c       	mov	r12,r8
80007e4e:	2f ad       	sub	sp,-24
80007e50:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80007e54:	80 00       	ld.sh	r0,r0[0x0]
80007e56:	7c 62       	ld.w	r2,lr[0x18]

80007e58 <passthroughController>:
#include "time_keeper.h"

#include "pid_control.h"
#include "maths.h"

PID_Controller_t passthroughController() {
80007e58:	eb cd 40 e0 	pushm	r5-r7,lr
80007e5c:	1a 97       	mov	r7,sp
80007e5e:	21 1d       	sub	sp,68
80007e60:	49 e6       	lddpc	r6,80007ed8 <passthroughController+0x80>
80007e62:	1e 26       	rsub	r6,pc
80007e64:	18 95       	mov	r5,r12
	PID_Controller_t out;
	out.p_gain=1.0;
80007e66:	fc 18 3f 80 	movh	r8,0x3f80
80007e6a:	ef 48 ff bc 	st.w	r7[-68],r8
	out.last_update=get_time_ticks();	
80007e6e:	f0 16 00 4b 	mcall	r6[300]
80007e72:	18 98       	mov	r8,r12
80007e74:	ef 48 ff f4 	st.w	r7[-12],r8
	out.clip_min=-10000.0;
80007e78:	e0 68 40 00 	mov	r8,16384
80007e7c:	ea 18 c6 1c 	orh	r8,0xc61c
80007e80:	ef 48 ff c0 	st.w	r7[-64],r8
	out.clip_max= 10000.0;
80007e84:	e0 68 40 00 	mov	r8,16384
80007e88:	ea 18 46 1c 	orh	r8,0x461c
80007e8c:	ef 48 ff c4 	st.w	r7[-60],r8
	out.output=0.0;
80007e90:	30 08       	mov	r8,0
80007e92:	ef 48 ff ec 	st.w	r7[-20],r8
	out.soft_zone_width=0.0;
80007e96:	30 08       	mov	r8,0
80007e98:	ef 48 ff fc 	st.w	r7[-4],r8
	initDiff(&(out.differentiator), 0.0, 0.0, 0.0);
80007e9c:	ee c8 00 44 	sub	r8,r7,68
80007ea0:	2e 08       	sub	r8,-32
80007ea2:	30 09       	mov	r9,0
80007ea4:	30 0a       	mov	r10,0
80007ea6:	30 0b       	mov	r11,0
80007ea8:	10 9c       	mov	r12,r8
80007eaa:	f0 16 01 3e 	mcall	r6[1272]
	initInt(&(out.integrator), 0.0, 0.0, 0.0);
80007eae:	ee c8 00 44 	sub	r8,r7,68
80007eb2:	2f 48       	sub	r8,-12
80007eb4:	30 09       	mov	r9,0
80007eb6:	30 0a       	mov	r10,0
80007eb8:	30 0b       	mov	r11,0
80007eba:	10 9c       	mov	r12,r8
80007ebc:	f0 16 01 88 	mcall	r6[1568]
	return out;
80007ec0:	0a 98       	mov	r8,r5
80007ec2:	ee c9 00 44 	sub	r9,r7,68
80007ec6:	34 4a       	mov	r10,68
80007ec8:	12 9b       	mov	r11,r9
80007eca:	10 9c       	mov	r12,r8
80007ecc:	f0 16 00 20 	mcall	r6[128]
}
80007ed0:	0a 9c       	mov	r12,r5
80007ed2:	2e fd       	sub	sp,-68
80007ed4:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80007ed8:	80 00       	ld.sh	r0,r0[0x0]
80007eda:	7c e6       	ld.w	r6,lr[0x38]

80007edc <integrate>:




float integrate(Integrator_t *integrator, float input, float dt) {
80007edc:	eb cd 40 c0 	pushm	r6-r7,lr
80007ee0:	1a 97       	mov	r7,sp
80007ee2:	20 3d       	sub	sp,12
80007ee4:	49 76       	lddpc	r6,80007f40 <integrate+0x64>
80007ee6:	1e 26       	rsub	r6,pc
80007ee8:	ef 4c ff fc 	st.w	r7[-4],r12
80007eec:	ef 4b ff f8 	st.w	r7[-8],r11
80007ef0:	ef 4a ff f4 	st.w	r7[-12],r10

	integrator->accumulator=clip(integrator->accumulator+dt* integrator->pregain * input, integrator->clip);
80007ef4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007ef8:	70 39       	ld.w	r9,r8[0xc]
80007efa:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007efe:	70 2a       	ld.w	r10,r8[0x8]
80007f00:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007f04:	70 0b       	ld.w	r11,r8[0x0]
80007f06:	ee f8 ff f4 	ld.w	r8,r7[-12]
80007f0a:	e5 a2 0b b8 	cop	cp0,cr11,cr11,cr8,0x44
80007f0e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007f12:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
80007f16:	e5 a0 08 a8 	cop	cp0,cr8,cr10,cr8,0x40
80007f1a:	12 9b       	mov	r11,r9
80007f1c:	10 9c       	mov	r12,r8
80007f1e:	cd fe       	rcall	80007cdc <clip>
80007f20:	18 99       	mov	r9,r12
80007f22:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007f26:	91 29       	st.w	r8[0x8],r9
	return integrator->postgain* integrator->accumulator;
80007f28:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007f2c:	70 19       	ld.w	r9,r8[0x4]
80007f2e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007f32:	70 28       	ld.w	r8,r8[0x8]
80007f34:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44

}
80007f38:	10 9c       	mov	r12,r8
80007f3a:	2f dd       	sub	sp,-12
80007f3c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80007f40:	80 00       	ld.sh	r0,r0[0x0]
80007f42:	7d 6a       	ld.w	r10,lr[0x58]

80007f44 <initInt>:




void initInt(Integrator_t *integrator, float pregain, float postgain, float clip_val) {
80007f44:	eb cd 40 80 	pushm	r7,lr
80007f48:	1a 97       	mov	r7,sp
80007f4a:	20 4d       	sub	sp,16
80007f4c:	ef 4c ff fc 	st.w	r7[-4],r12
80007f50:	ef 4b ff f8 	st.w	r7[-8],r11
80007f54:	ef 4a ff f4 	st.w	r7[-12],r10
80007f58:	ef 49 ff f0 	st.w	r7[-16],r9
	integrator->pregain=pregain;
80007f5c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007f60:	ee f9 ff f8 	ld.w	r9,r7[-8]
80007f64:	91 09       	st.w	r8[0x0],r9
	integrator->postgain=postgain;
80007f66:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007f6a:	ee f9 ff f4 	ld.w	r9,r7[-12]
80007f6e:	91 19       	st.w	r8[0x4],r9
	integrator->clip=clip_val;
80007f70:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007f74:	ee f9 ff f0 	ld.w	r9,r7[-16]
80007f78:	91 39       	st.w	r8[0xc],r9
	integrator->accumulator=0.0;
80007f7a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007f7e:	30 09       	mov	r9,0
80007f80:	91 29       	st.w	r8[0x8],r9

}
80007f82:	2f cd       	sub	sp,-16
80007f84:	e3 cd 80 80 	ldm	sp++,r7,pc

80007f88 <resetInt>:
void resetInt(Integrator_t *integrator) {
80007f88:	eb cd 40 80 	pushm	r7,lr
80007f8c:	1a 97       	mov	r7,sp
80007f8e:	20 1d       	sub	sp,4
80007f90:	ef 4c ff fc 	st.w	r7[-4],r12
	integrator->accumulator=0.0;
80007f94:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007f98:	30 09       	mov	r9,0
80007f9a:	91 29       	st.w	r8[0x8],r9
}
80007f9c:	2f fd       	sub	sp,-4
80007f9e:	e3 cd 80 80 	ldm	sp++,r7,pc

80007fa2 <initDiff>:

void initDiff(Differentiator_t *diff, float gain, float LPF, float clip_val) {
80007fa2:	eb cd 40 80 	pushm	r7,lr
80007fa6:	1a 97       	mov	r7,sp
80007fa8:	20 4d       	sub	sp,16
80007faa:	ef 4c ff fc 	st.w	r7[-4],r12
80007fae:	ef 4b ff f8 	st.w	r7[-8],r11
80007fb2:	ef 4a ff f4 	st.w	r7[-12],r10
80007fb6:	ef 49 ff f0 	st.w	r7[-16],r9
	diff->gain=gain;
80007fba:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007fbe:	ee f9 ff f8 	ld.w	r9,r7[-8]
80007fc2:	91 09       	st.w	r8[0x0],r9
	diff->LPF=LPF;
80007fc4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007fc8:	ee f9 ff f4 	ld.w	r9,r7[-12]
80007fcc:	91 29       	st.w	r8[0x8],r9
	diff->clip=clip_val;
80007fce:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007fd2:	ee f9 ff f0 	ld.w	r9,r7[-16]
80007fd6:	91 39       	st.w	r8[0xc],r9
}
80007fd8:	2f cd       	sub	sp,-16
80007fda:	e3 cd 80 80 	ldm	sp++,r7,pc

80007fde <differentiate>:

float differentiate(Differentiator_t *diff, float input, float dt) {
80007fde:	eb cd 40 e0 	pushm	r5-r7,lr
80007fe2:	1a 97       	mov	r7,sp
80007fe4:	20 4d       	sub	sp,16
80007fe6:	4a 66       	lddpc	r6,8000807c <differentiate+0x9e>
80007fe8:	1e 26       	rsub	r6,pc
80007fea:	ef 4c ff f8 	st.w	r7[-8],r12
80007fee:	ef 4b ff f4 	st.w	r7[-12],r11
80007ff2:	ef 4a ff f0 	st.w	r7[-16],r10
	float output=0.0;
80007ff6:	30 08       	mov	r8,0
80007ff8:	ef 48 ff fc 	st.w	r7[-4],r8
	if (dt<0.000001) {
80007ffc:	ee fc ff f0 	ld.w	r12,r7[-16]
80008000:	f0 16 00 02 	mcall	r6[8]
80008004:	30 05       	mov	r5,0
80008006:	e0 68 ed 8d 	mov	r8,60813
8000800a:	ea 18 a0 b5 	orh	r8,0xa0b5
8000800e:	e0 69 c6 f7 	mov	r9,50935
80008012:	ea 19 3e b0 	orh	r9,0x3eb0
80008016:	f0 16 00 1c 	mcall	r6[112]
8000801a:	18 98       	mov	r8,r12
8000801c:	58 08       	cp.w	r8,0
8000801e:	c0 20       	breq	80008022 <differentiate+0x44>
80008020:	30 15       	mov	r5,1
80008022:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
80008026:	c0 50       	breq	80008030 <differentiate+0x52>
		output=0.0; 
80008028:	30 08       	mov	r8,0
8000802a:	ef 48 ff fc 	st.w	r7[-4],r8
8000802e:	c1 c8       	rjmp	80008066 <differentiate+0x88>
	} else {
		output=clip(diff->gain*(input - diff->previous)/dt, diff->clip);
80008030:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008034:	70 35       	ld.w	r5,r8[0xc]
80008036:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000803a:	70 09       	ld.w	r9,r8[0x0]
8000803c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008040:	70 18       	ld.w	r8,r8[0x4]
80008042:	ee fa ff f4 	ld.w	r10,r7[-12]
80008046:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
8000804a:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8000804e:	ee fb ff f0 	ld.w	r11,r7[-16]
80008052:	10 9c       	mov	r12,r8
80008054:	f0 16 00 08 	mcall	r6[32]
80008058:	18 98       	mov	r8,r12
8000805a:	0a 9b       	mov	r11,r5
8000805c:	10 9c       	mov	r12,r8
8000805e:	c3 fe       	rcall	80007cdc <clip>
80008060:	18 98       	mov	r8,r12
80008062:	ef 48 ff fc 	st.w	r7[-4],r8
	}	
	//diff->previous=(1.0-(diff->LPF))*input + (diff->LPF) * (diff->previous);
	diff->previous=input;
80008066:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000806a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000806e:	91 19       	st.w	r8[0x4],r9
	return output;
80008070:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80008074:	10 9c       	mov	r12,r8
80008076:	2f cd       	sub	sp,-16
80008078:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000807c:	80 00       	ld.sh	r0,r0[0x0]
8000807e:	7e 6c       	ld.w	r12,pc[0x18]

80008080 <pid_update>:

float pid_update(PID_Controller_t* controller, float error) {
80008080:	eb cd 40 e8 	pushm	r3,r5-r7,lr
80008084:	1a 97       	mov	r7,sp
80008086:	20 3d       	sub	sp,12
80008088:	4c 36       	lddpc	r6,80008194 <pid_update+0x114>
8000808a:	1e 26       	rsub	r6,pc
8000808c:	ef 4c ff f8 	st.w	r7[-8],r12
80008090:	ef 4b ff f4 	st.w	r7[-12],r11
	uint32_t t= get_time_ticks();
80008094:	f0 16 00 4b 	mcall	r6[300]
80008098:	18 98       	mov	r8,r12
8000809a:	ef 48 ff fc 	st.w	r7[-4],r8
	controller->error=soft_zone(error, controller->soft_zone_width);
8000809e:	ee f8 ff f8 	ld.w	r8,r7[-8]
800080a2:	71 08       	ld.w	r8,r8[0x40]
800080a4:	10 9b       	mov	r11,r8
800080a6:	ee fc ff f4 	ld.w	r12,r7[-12]
800080aa:	c4 ee       	rcall	80007d46 <soft_zone>
800080ac:	18 99       	mov	r9,r12
800080ae:	ee f8 ff f8 	ld.w	r8,r7[-8]
800080b2:	91 d9       	st.w	r8[0x34],r9
	controller->dt=ticks_to_seconds(t - controller->last_update);
800080b4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800080b8:	70 e8       	ld.w	r8,r8[0x38]
800080ba:	ee f9 ff fc 	ld.w	r9,r7[-4]
800080be:	f2 08 01 08 	sub	r8,r9,r8
800080c2:	10 9c       	mov	r12,r8
800080c4:	f0 16 00 ae 	mcall	r6[696]
800080c8:	18 99       	mov	r9,r12
800080ca:	ee f8 ff f8 	ld.w	r8,r7[-8]
800080ce:	91 f9       	st.w	r8[0x3c],r9
	controller->last_update=t;
800080d0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800080d4:	ee f9 ff fc 	ld.w	r9,r7[-4]
800080d8:	91 e9       	st.w	r8[0x38],r9
	
	controller->output = controller->p_gain* (controller->error +integrate(&controller->integrator, controller->error, controller->dt) + differentiate(&controller->differentiator, controller->error, controller->dt));
800080da:	ee f8 ff f8 	ld.w	r8,r7[-8]
800080de:	70 05       	ld.w	r5,r8[0x0]
800080e0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800080e4:	70 d3       	ld.w	r3,r8[0x34]
800080e6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800080ea:	70 fa       	ld.w	r10,r8[0x3c]
800080ec:	ee f8 ff f8 	ld.w	r8,r7[-8]
800080f0:	70 d9       	ld.w	r9,r8[0x34]
800080f2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800080f6:	2f 48       	sub	r8,-12
800080f8:	12 9b       	mov	r11,r9
800080fa:	10 9c       	mov	r12,r8
800080fc:	f0 16 00 d3 	mcall	r6[844]
80008100:	18 98       	mov	r8,r12
80008102:	e5 a0 03 38 	cop	cp0,cr3,cr3,cr8,0x40
80008106:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000810a:	70 fa       	ld.w	r10,r8[0x3c]
8000810c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008110:	70 d9       	ld.w	r9,r8[0x34]
80008112:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008116:	2e 08       	sub	r8,-32
80008118:	12 9b       	mov	r11,r9
8000811a:	10 9c       	mov	r12,r8
8000811c:	f0 16 01 01 	mcall	r6[1028]
80008120:	18 98       	mov	r8,r12
80008122:	e5 a0 08 38 	cop	cp0,cr8,cr3,cr8,0x40
80008126:	e5 a2 09 58 	cop	cp0,cr9,cr5,cr8,0x44
8000812a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000812e:	91 c9       	st.w	r8[0x30],r9
	if (controller->output < controller->clip_min) controller->output=controller->clip_min;
80008130:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008134:	70 ca       	ld.w	r10,r8[0x30]
80008136:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000813a:	70 19       	ld.w	r9,r8[0x4]
8000813c:	30 18       	mov	r8,1
8000813e:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80008142:	e0 8c 00 03 	brvs	80008148 <pid_update+0xc8>
80008146:	c0 25       	brlt	8000814a <pid_update+0xca>
80008148:	30 08       	mov	r8,0
8000814a:	5c 58       	castu.b	r8
8000814c:	c0 70       	breq	8000815a <pid_update+0xda>
8000814e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008152:	70 19       	ld.w	r9,r8[0x4]
80008154:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008158:	91 c9       	st.w	r8[0x30],r9
	if (controller->output > controller->clip_max) controller->output=controller->clip_max;
8000815a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000815e:	70 ca       	ld.w	r10,r8[0x30]
80008160:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008164:	70 29       	ld.w	r9,r8[0x8]
80008166:	30 18       	mov	r8,1
80008168:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
8000816c:	e0 8c 00 04 	brvs	80008174 <pid_update+0xf4>
80008170:	e0 89 00 03 	brgt	80008176 <pid_update+0xf6>
80008174:	30 08       	mov	r8,0
80008176:	5c 58       	castu.b	r8
80008178:	c0 70       	breq	80008186 <pid_update+0x106>
8000817a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000817e:	70 29       	ld.w	r9,r8[0x8]
80008180:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008184:	91 c9       	st.w	r8[0x30],r9
	return controller->output;	
80008186:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000818a:	70 c8       	ld.w	r8,r8[0x30]
}
8000818c:	10 9c       	mov	r12,r8
8000818e:	2f dd       	sub	sp,-12
80008190:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
80008194:	80 00       	ld.sh	r0,r0[0x0]
80008196:	7f 0e       	ld.w	lr,pc[0x40]

80008198 <pid_update_dt>:

float pid_update_dt(PID_Controller_t* controller, float error, float dt) {
80008198:	eb cd 40 e8 	pushm	r3,r5-r7,lr
8000819c:	1a 97       	mov	r7,sp
8000819e:	20 3d       	sub	sp,12
800081a0:	4b b6       	lddpc	r6,8000828c <pid_update_dt+0xf4>
800081a2:	1e 26       	rsub	r6,pc
800081a4:	ef 4c ff fc 	st.w	r7[-4],r12
800081a8:	ef 4b ff f8 	st.w	r7[-8],r11
800081ac:	ef 4a ff f4 	st.w	r7[-12],r10
	controller->error=error;
800081b0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800081b4:	ee f9 ff f8 	ld.w	r9,r7[-8]
800081b8:	91 d9       	st.w	r8[0x34],r9
	controller->dt=dt;
800081ba:	ee f8 ff fc 	ld.w	r8,r7[-4]
800081be:	ee f9 ff f4 	ld.w	r9,r7[-12]
800081c2:	91 f9       	st.w	r8[0x3c],r9
	controller->last_update=get_time_ticks();
800081c4:	f0 16 00 4b 	mcall	r6[300]
800081c8:	18 99       	mov	r9,r12
800081ca:	ee f8 ff fc 	ld.w	r8,r7[-4]
800081ce:	91 e9       	st.w	r8[0x38],r9
	
	controller->output = controller->p_gain* (controller->error +integrate(&controller->integrator, controller->error, controller->dt) + differentiate(&controller->differentiator, controller->error, controller->dt));
800081d0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800081d4:	70 05       	ld.w	r5,r8[0x0]
800081d6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800081da:	70 d3       	ld.w	r3,r8[0x34]
800081dc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800081e0:	70 fa       	ld.w	r10,r8[0x3c]
800081e2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800081e6:	70 d9       	ld.w	r9,r8[0x34]
800081e8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800081ec:	2f 48       	sub	r8,-12
800081ee:	12 9b       	mov	r11,r9
800081f0:	10 9c       	mov	r12,r8
800081f2:	f0 16 00 d3 	mcall	r6[844]
800081f6:	18 98       	mov	r8,r12
800081f8:	e5 a0 03 38 	cop	cp0,cr3,cr3,cr8,0x40
800081fc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008200:	70 fa       	ld.w	r10,r8[0x3c]
80008202:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008206:	70 d9       	ld.w	r9,r8[0x34]
80008208:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000820c:	2e 08       	sub	r8,-32
8000820e:	12 9b       	mov	r11,r9
80008210:	10 9c       	mov	r12,r8
80008212:	f0 16 01 01 	mcall	r6[1028]
80008216:	18 98       	mov	r8,r12
80008218:	e5 a0 08 38 	cop	cp0,cr8,cr3,cr8,0x40
8000821c:	e5 a2 09 58 	cop	cp0,cr9,cr5,cr8,0x44
80008220:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008224:	91 c9       	st.w	r8[0x30],r9
	if (controller->output < controller->clip_min) controller->output=controller->clip_min;
80008226:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000822a:	70 ca       	ld.w	r10,r8[0x30]
8000822c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008230:	70 19       	ld.w	r9,r8[0x4]
80008232:	30 18       	mov	r8,1
80008234:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80008238:	e0 8c 00 03 	brvs	8000823e <pid_update_dt+0xa6>
8000823c:	c0 25       	brlt	80008240 <pid_update_dt+0xa8>
8000823e:	30 08       	mov	r8,0
80008240:	5c 58       	castu.b	r8
80008242:	c0 70       	breq	80008250 <pid_update_dt+0xb8>
80008244:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008248:	70 19       	ld.w	r9,r8[0x4]
8000824a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000824e:	91 c9       	st.w	r8[0x30],r9
	if (controller->output > controller->clip_max) controller->output=controller->clip_max;
80008250:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008254:	70 ca       	ld.w	r10,r8[0x30]
80008256:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000825a:	70 29       	ld.w	r9,r8[0x8]
8000825c:	30 18       	mov	r8,1
8000825e:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80008262:	e0 8c 00 04 	brvs	8000826a <pid_update_dt+0xd2>
80008266:	e0 89 00 03 	brgt	8000826c <pid_update_dt+0xd4>
8000826a:	30 08       	mov	r8,0
8000826c:	5c 58       	castu.b	r8
8000826e:	c0 70       	breq	8000827c <pid_update_dt+0xe4>
80008270:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008274:	70 29       	ld.w	r9,r8[0x8]
80008276:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000827a:	91 c9       	st.w	r8[0x30],r9
	return controller->output;	
8000827c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008280:	70 c8       	ld.w	r8,r8[0x30]
}
80008282:	10 9c       	mov	r12,r8
80008284:	2f dd       	sub	sp,-12
80008286:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
8000828a:	00 00       	add	r0,r0
8000828c:	80 00       	ld.sh	r0,r0[0x0]
8000828e:	80 26       	ld.sh	r6,r0[0x4]

80008290 <calc_smaller_angle>:
#define SQR(in) \
		((in)*(in))



float static inline calc_smaller_angle(float angle) {
80008290:	eb cd 40 e0 	pushm	r5-r7,lr
80008294:	1a 97       	mov	r7,sp
80008296:	20 2d       	sub	sp,8
80008298:	4b 56       	lddpc	r6,8000836c <calc_smaller_angle+0xdc>
8000829a:	1e 26       	rsub	r6,pc
8000829c:	ef 4c ff f8 	st.w	r7[-8],r12
	float out=angle;
800082a0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800082a4:	ef 48 ff fc 	st.w	r7[-4],r8
	while (out<-PI) out+=2.0*PI;
800082a8:	c1 88       	rjmp	800082d8 <calc_smaller_angle+0x48>
800082aa:	ee fc ff fc 	ld.w	r12,r7[-4]
800082ae:	f0 16 00 02 	mcall	r6[8]
800082b2:	e0 68 2d 18 	mov	r8,11544
800082b6:	ea 18 54 44 	orh	r8,0x5444
800082ba:	e0 69 21 fb 	mov	r9,8699
800082be:	ea 19 40 19 	orh	r9,0x4019
800082c2:	f0 16 00 05 	mcall	r6[20]
800082c6:	14 98       	mov	r8,r10
800082c8:	16 99       	mov	r9,r11
800082ca:	10 9a       	mov	r10,r8
800082cc:	12 9b       	mov	r11,r9
800082ce:	f0 16 00 09 	mcall	r6[36]
800082d2:	18 98       	mov	r8,r12
800082d4:	ef 48 ff fc 	st.w	r7[-4],r8
800082d8:	ee fc ff fc 	ld.w	r12,r7[-4]
800082dc:	f0 16 00 02 	mcall	r6[8]
800082e0:	30 05       	mov	r5,0
800082e2:	e0 68 2d 18 	mov	r8,11544
800082e6:	ea 18 54 44 	orh	r8,0x5444
800082ea:	e0 69 21 fb 	mov	r9,8699
800082ee:	ea 19 c0 09 	orh	r9,0xc009
800082f2:	f0 16 00 1c 	mcall	r6[112]
800082f6:	18 98       	mov	r8,r12
800082f8:	58 08       	cp.w	r8,0
800082fa:	c0 20       	breq	800082fe <calc_smaller_angle+0x6e>
800082fc:	30 15       	mov	r5,1
800082fe:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
80008302:	cd 41       	brne	800082aa <calc_smaller_angle+0x1a>
	while (out>=PI) out-=2.0*PI;
80008304:	c1 88       	rjmp	80008334 <calc_smaller_angle+0xa4>
80008306:	ee fc ff fc 	ld.w	r12,r7[-4]
8000830a:	f0 16 00 02 	mcall	r6[8]
8000830e:	e0 68 2d 18 	mov	r8,11544
80008312:	ea 18 54 44 	orh	r8,0x5444
80008316:	e0 69 21 fb 	mov	r9,8699
8000831a:	ea 19 40 19 	orh	r9,0x4019
8000831e:	f0 16 00 11 	mcall	r6[68]
80008322:	14 98       	mov	r8,r10
80008324:	16 99       	mov	r9,r11
80008326:	10 9a       	mov	r10,r8
80008328:	12 9b       	mov	r11,r9
8000832a:	f0 16 00 09 	mcall	r6[36]
8000832e:	18 98       	mov	r8,r12
80008330:	ef 48 ff fc 	st.w	r7[-4],r8
80008334:	ee fc ff fc 	ld.w	r12,r7[-4]
80008338:	f0 16 00 02 	mcall	r6[8]
8000833c:	30 05       	mov	r5,0
8000833e:	e0 68 2d 18 	mov	r8,11544
80008342:	ea 18 54 44 	orh	r8,0x5444
80008346:	e0 69 21 fb 	mov	r9,8699
8000834a:	ea 19 40 09 	orh	r9,0x4009
8000834e:	f0 16 00 76 	mcall	r6[472]
80008352:	18 98       	mov	r8,r12
80008354:	58 08       	cp.w	r8,0
80008356:	c0 20       	breq	8000835a <calc_smaller_angle+0xca>
80008358:	30 15       	mov	r5,1
8000835a:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
8000835e:	cd 41       	brne	80008306 <calc_smaller_angle+0x76>
	return out;
80008360:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80008364:	10 9c       	mov	r12,r8
80008366:	2f ed       	sub	sp,-8
80008368:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000836c:	80 00       	ld.sh	r0,r0[0x0]
8000836e:	81 1e       	st.w	r0[0x4],lr

80008370 <fast_sqrt>:
	
	return qtmp;
}

// fast newton iteration for approximate square root
float static inline fast_sqrt(float input) {
80008370:	eb cd 40 c0 	pushm	r6-r7,lr
80008374:	1a 97       	mov	r7,sp
80008376:	20 2d       	sub	sp,8
80008378:	4b 26       	lddpc	r6,80008440 <fast_sqrt+0xd0>
8000837a:	1e 26       	rsub	r6,pc
8000837c:	ef 4c ff f8 	st.w	r7[-8],r12
	if (input<0) {
80008380:	30 18       	mov	r8,1
80008382:	ee fa ff f8 	ld.w	r10,r7[-8]
80008386:	30 09       	mov	r9,0
80008388:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
8000838c:	e0 8c 00 03 	brvs	80008392 <fast_sqrt+0x22>
80008390:	c0 25       	brlt	80008394 <fast_sqrt+0x24>
80008392:	30 08       	mov	r8,0
80008394:	5c 58       	castu.b	r8
80008396:	c0 30       	breq	8000839c <fast_sqrt+0x2c>
		//dbg_print("negative root");
		return 0.0;
80008398:	30 08       	mov	r8,0
8000839a:	c4 f8       	rjmp	80008438 <fast_sqrt+0xc8>
	}
	float result=1.0;
8000839c:	fc 18 3f 80 	movh	r8,0x3f80
800083a0:	ef 48 ff fc 	st.w	r7[-4],r8
	result=0.5*(result+(input/result));
800083a4:	ee fb ff fc 	ld.w	r11,r7[-4]
800083a8:	ee fc ff f8 	ld.w	r12,r7[-8]
800083ac:	f0 16 00 08 	mcall	r6[32]
800083b0:	18 98       	mov	r8,r12
800083b2:	10 99       	mov	r9,r8
800083b4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800083b8:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
800083bc:	fc 18 3f 00 	movh	r8,0x3f00
800083c0:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
800083c4:	ef 48 ff fc 	st.w	r7[-4],r8
	result=0.5*(result+(input/result));
800083c8:	ee fb ff fc 	ld.w	r11,r7[-4]
800083cc:	ee fc ff f8 	ld.w	r12,r7[-8]
800083d0:	f0 16 00 08 	mcall	r6[32]
800083d4:	18 98       	mov	r8,r12
800083d6:	10 99       	mov	r9,r8
800083d8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800083dc:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
800083e0:	fc 18 3f 00 	movh	r8,0x3f00
800083e4:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
800083e8:	ef 48 ff fc 	st.w	r7[-4],r8
	result=0.5*(result+(input/result));
800083ec:	ee fb ff fc 	ld.w	r11,r7[-4]
800083f0:	ee fc ff f8 	ld.w	r12,r7[-8]
800083f4:	f0 16 00 08 	mcall	r6[32]
800083f8:	18 98       	mov	r8,r12
800083fa:	10 99       	mov	r9,r8
800083fc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008400:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80008404:	fc 18 3f 00 	movh	r8,0x3f00
80008408:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8000840c:	ef 48 ff fc 	st.w	r7[-4],r8
	result=0.5*(result+(input/result));
80008410:	ee fb ff fc 	ld.w	r11,r7[-4]
80008414:	ee fc ff f8 	ld.w	r12,r7[-8]
80008418:	f0 16 00 08 	mcall	r6[32]
8000841c:	18 98       	mov	r8,r12
8000841e:	10 99       	mov	r9,r8
80008420:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008424:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80008428:	fc 18 3f 00 	movh	r8,0x3f00
8000842c:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80008430:	ef 48 ff fc 	st.w	r7[-4],r8
	return result;
80008434:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80008438:	10 9c       	mov	r12,r8
8000843a:	2f ed       	sub	sp,-8
8000843c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80008440:	80 00       	ld.sh	r0,r0[0x0]
80008442:	81 fe       	st.w	r0[0x3c],lr

80008444 <sigmoid>:
	else {
		return (x*x*x/(SQR(soft_zone_width) + SQR(x)));
	}
};

static float inline sigmoid(float x) {
80008444:	eb cd 40 c0 	pushm	r6-r7,lr
80008448:	1a 97       	mov	r7,sp
8000844a:	20 1d       	sub	sp,4
8000844c:	48 e6       	lddpc	r6,80008484 <sigmoid+0x40>
8000844e:	1e 26       	rsub	r6,pc
80008450:	ef 4c ff fc 	st.w	r7[-4],r12
	return (x/fast_sqrt(1+SQR(x)));
80008454:	ee f9 ff fc 	ld.w	r9,r7[-4]
80008458:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000845c:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80008460:	fc 18 3f 80 	movh	r8,0x3f80
80008464:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80008468:	10 9c       	mov	r12,r8
8000846a:	c8 3f       	rcall	80008370 <fast_sqrt>
8000846c:	18 98       	mov	r8,r12
8000846e:	10 9b       	mov	r11,r8
80008470:	ee fc ff fc 	ld.w	r12,r7[-4]
80008474:	f0 16 00 08 	mcall	r6[32]
80008478:	18 98       	mov	r8,r12
};
8000847a:	10 9c       	mov	r12,r8
8000847c:	2f fd       	sub	sp,-4
8000847e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80008482:	00 00       	add	r0,r0
80008484:	80 00       	ld.sh	r0,r0[0x0]
80008486:	82 d2       	ld.uh	r2,r1[0xa]

80008488 <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
80008488:	eb cd 40 c0 	pushm	r6-r7,lr
8000848c:	1a 97       	mov	r7,sp
8000848e:	20 6d       	sub	sp,24
80008490:	49 e6       	lddpc	r6,80008508 <interpolate+0x80>
80008492:	1e 26       	rsub	r6,pc
80008494:	ef 4c ff f8 	st.w	r7[-8],r12
80008498:	ef 4b ff f4 	st.w	r7[-12],r11
8000849c:	ef 4a ff f0 	st.w	r7[-16],r10
800084a0:	ef 49 ff ec 	st.w	r7[-20],r9
800084a4:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
800084a8:	ee f9 ff f4 	ld.w	r9,r7[-12]
800084ac:	ee f8 ff f0 	ld.w	r8,r7[-16]
800084b0:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
800084b4:	c0 41       	brne	800084bc <interpolate+0x34>
	{
		return y1;
800084b6:	ee f8 ff ec 	ld.w	r8,r7[-20]
800084ba:	c2 38       	rjmp	80008500 <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
800084bc:	ee f9 ff e8 	ld.w	r9,r7[-24]
800084c0:	ee f8 ff ec 	ld.w	r8,r7[-20]
800084c4:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
800084c8:	ee fa ff f8 	ld.w	r10,r7[-8]
800084cc:	ee f8 ff f4 	ld.w	r8,r7[-12]
800084d0:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
800084d4:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
800084d8:	ee fa ff f0 	ld.w	r10,r7[-16]
800084dc:	ee f9 ff f4 	ld.w	r9,r7[-12]
800084e0:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
800084e4:	12 9b       	mov	r11,r9
800084e6:	10 9c       	mov	r12,r8
800084e8:	f0 16 00 08 	mcall	r6[32]
800084ec:	18 98       	mov	r8,r12
800084ee:	10 99       	mov	r9,r8
800084f0:	ee f8 ff ec 	ld.w	r8,r7[-20]
800084f4:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
800084f8:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
800084fc:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
80008500:	10 9c       	mov	r12,r8
80008502:	2f ad       	sub	sp,-24
80008504:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80008508:	80 00       	ld.sh	r0,r0[0x0]
8000850a:	83 16       	st.w	r1[0x4],r6

8000850c <mav_array_memcpy>:

/*
  like memcpy(), but if src is NULL, do a memset to zero
*/
static void mav_array_memcpy(void *dest, const void *src, size_t n)
{
8000850c:	eb cd 40 c0 	pushm	r6-r7,lr
80008510:	1a 97       	mov	r7,sp
80008512:	20 3d       	sub	sp,12
80008514:	49 06       	lddpc	r6,80008554 <mav_array_memcpy+0x48>
80008516:	1e 26       	rsub	r6,pc
80008518:	ef 4c ff fc 	st.w	r7[-4],r12
8000851c:	ef 4b ff f8 	st.w	r7[-8],r11
80008520:	ef 4a ff f4 	st.w	r7[-12],r10
	if (src == NULL) {
80008524:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008528:	58 08       	cp.w	r8,0
8000852a:	c0 91       	brne	8000853c <mav_array_memcpy+0x30>
		memset(dest, 0, n);
8000852c:	ee fa ff f4 	ld.w	r10,r7[-12]
80008530:	30 0b       	mov	r11,0
80008532:	ee fc ff fc 	ld.w	r12,r7[-4]
80008536:	f0 16 00 2f 	mcall	r6[188]
8000853a:	c0 98       	rjmp	8000854c <mav_array_memcpy+0x40>
	} else {
		memcpy(dest, src, n);
8000853c:	ee fa ff f4 	ld.w	r10,r7[-12]
80008540:	ee fb ff f8 	ld.w	r11,r7[-8]
80008544:	ee fc ff fc 	ld.w	r12,r7[-4]
80008548:	f0 16 00 20 	mcall	r6[128]
	}
}
8000854c:	2f dd       	sub	sp,-12
8000854e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80008552:	00 00       	add	r0,r0
80008554:	80 00       	ld.sh	r0,r0[0x0]
80008556:	83 9a       	st.w	r1[0x24],r10

80008558 <init_stabilisation_copter>:
// 	initInt(&((stabiliser->thrust_controller).integrator), 1.5, 1.0, 1.0); // 1.0 1.0 0.5
		
// }

void init_stabilisation_copter(Stabiliser_Stack_copter_t* stabiliser_stack)
{
80008558:	eb cd 40 c0 	pushm	r6-r7,lr
8000855c:	1a 97       	mov	r7,sp
8000855e:	20 1d       	sub	sp,4
80008560:	49 56       	lddpc	r6,800085b4 <init_stabilisation_copter+0x5c>
80008562:	1e 26       	rsub	r6,pc
80008564:	ef 4c ff fc 	st.w	r7[-4],r12
	centralData = get_central_data();
80008568:	f0 16 00 31 	mcall	r6[196]
8000856c:	18 99       	mov	r9,r12
8000856e:	ec f8 00 00 	ld.w	r8,r6[0]
80008572:	91 09       	st.w	r8[0x0],r9
	centralData->controls.run_mode = MOTORS_OFF;
80008574:	ec f8 00 00 	ld.w	r8,r6[0]
80008578:	70 08       	ld.w	r8,r8[0x0]
8000857a:	30 09       	mov	r9,0
8000857c:	f1 49 01 70 	st.w	r8[368],r9
	centralData->controls.control_mode = ATTITUDE_COMMAND_MODE;
80008580:	ec f8 00 00 	ld.w	r8,r6[0]
80008584:	70 08       	ld.w	r8,r8[0x0]
80008586:	30 19       	mov	r9,1
80008588:	f1 49 01 68 	st.w	r8[360],r9
	centralData->controls.yaw_mode = YAW_RELATIVE;
8000858c:	ec f8 00 00 	ld.w	r8,r6[0]
80008590:	70 08       	ld.w	r8,r8[0x0]
80008592:	30 09       	mov	r9,0
80008594:	f1 49 01 6c 	st.w	r8[364],r9

	*stabiliser_stack = stabiliser_defaults_copter;
80008598:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000859c:	ec f9 08 e4 	ld.w	r9,r6[2276]
800085a0:	e0 6a 03 b8 	mov	r10,952
800085a4:	12 9b       	mov	r11,r9
800085a6:	10 9c       	mov	r12,r8
800085a8:	f0 16 00 20 	mcall	r6[128]
}
800085ac:	2f fd       	sub	sp,-4
800085ae:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800085b2:	00 00       	add	r0,r0
800085b4:	80 00       	ld.sh	r0,r0[0x0]
800085b6:	83 e6       	st.w	r1[0x38],r6

800085b8 <cascade_stabilise_copter>:


void cascade_stabilise_copter(Imu_Data_t *imu, position_estimator_t *pos_est, Control_Command_t *control_input) {
800085b8:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
800085bc:	1a 97       	mov	r7,sp
800085be:	21 5d       	sub	sp,84
800085c0:	fe f6 03 70 	ld.w	r6,pc[880]
800085c4:	1e 26       	rsub	r6,pc
800085c6:	ef 4c ff b4 	st.w	r7[-76],r12
800085ca:	ef 4b ff b0 	st.w	r7[-80],r11
800085ce:	ef 4a ff ac 	st.w	r7[-84],r10
	float rpyt_errors[4];
	Control_Command_t input;
	int i;
	
	// set the controller input
	input=*control_input;
800085d2:	ee f9 ff ac 	ld.w	r9,r7[-84]
800085d6:	ee c8 00 48 	sub	r8,r7,72
800085da:	f0 ca 00 00 	sub	r10,r8,0
800085de:	f2 cb 00 00 	sub	r11,r9,0
800085e2:	76 0c       	ld.w	r12,r11[0x0]
800085e4:	95 0c       	st.w	r10[0x0],r12
800085e6:	76 1c       	ld.w	r12,r11[0x4]
800085e8:	95 1c       	st.w	r10[0x4],r12
800085ea:	76 2c       	ld.w	r12,r11[0x8]
800085ec:	95 2c       	st.w	r10[0x8],r12
800085ee:	76 3b       	ld.w	r11,r11[0xc]
800085f0:	95 3b       	st.w	r10[0xc],r11
800085f2:	f0 ca ff f0 	sub	r10,r8,-16
800085f6:	f2 cb ff f0 	sub	r11,r9,-16
800085fa:	76 0c       	ld.w	r12,r11[0x0]
800085fc:	95 0c       	st.w	r10[0x0],r12
800085fe:	76 1c       	ld.w	r12,r11[0x4]
80008600:	95 1c       	st.w	r10[0x4],r12
80008602:	76 2c       	ld.w	r12,r11[0x8]
80008604:	95 2c       	st.w	r10[0x8],r12
80008606:	76 3b       	ld.w	r11,r11[0xc]
80008608:	95 3b       	st.w	r10[0xc],r11
8000860a:	f2 ea 00 20 	ld.d	r10,r9[32]
8000860e:	f0 eb 00 20 	st.d	r8[32],r10
80008612:	72 a9       	ld.w	r9,r9[0x28]
80008614:	91 a9       	st.w	r8[0x28],r9

	switch (control_input->control_mode) {
80008616:	ee f8 ff ac 	ld.w	r8,r7[-84]
8000861a:	70 88       	ld.w	r8,r8[0x20]
8000861c:	58 18       	cp.w	r8,1
8000861e:	e0 80 00 df 	breq	800087dc <cascade_stabilise_copter+0x224>
80008622:	c0 63       	brcs	8000862e <cascade_stabilise_copter+0x76>
80008624:	58 28       	cp.w	r8,2
80008626:	e0 80 01 40 	breq	800088a6 <cascade_stabilise_copter+0x2ee>
8000862a:	e0 8f 01 78 	bral	8000891a <cascade_stabilise_copter+0x362>
	case VELOCITY_COMMAND_MODE:
		rpyt_errors[ROLL]  =   input.tvel[Y] - pos_est->vel_bf[Y];     // map y-axis error to roll axis
8000862e:	ee f9 ff cc 	ld.w	r9,r7[-52]
80008632:	ee f8 ff b0 	ld.w	r8,r7[-80]
80008636:	70 c8       	ld.w	r8,r8[0x30]
80008638:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8000863c:	ef 48 ff e4 	st.w	r7[-28],r8
		rpyt_errors[PITCH] = -(input.tvel[X] - pos_est->vel_bf[X]);   // map x axis error to pitch axis
80008640:	ee f9 ff c8 	ld.w	r9,r7[-56]
80008644:	ee f8 ff b0 	ld.w	r8,r7[-80]
80008648:	70 b8       	ld.w	r8,r8[0x2c]
8000864a:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8000864e:	ee 18 80 00 	eorh	r8,0x8000
80008652:	ef 48 ff e8 	st.w	r7[-24],r8
		rpyt_errors[3]     = -(input.tvel[Z] - pos_est->vel[Z]);      // attention - input z-axis maps to thrust input!
80008656:	ee f9 ff d0 	ld.w	r9,r7[-48]
8000865a:	ee f8 ff b0 	ld.w	r8,r7[-80]
8000865e:	71 08       	ld.w	r8,r8[0x40]
80008660:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80008664:	ee 18 80 00 	eorh	r8,0x8000
80008668:	ef 48 ff f0 	st.w	r7[-16],r8
		

		if (control_input->yaw_mode == YAW_COORDINATED)  {
8000866c:	ee f8 ff ac 	ld.w	r8,r7[-84]
80008670:	70 98       	ld.w	r8,r8[0x24]
80008672:	58 28       	cp.w	r8,2
80008674:	c5 61       	brne	80008720 <cascade_stabilise_copter+0x168>
			float rel_heading = atan2(pos_est->vel_bf[Y], pos_est->vel_bf[X]);
80008676:	ee f8 ff b0 	ld.w	r8,r7[-80]
8000867a:	70 b8       	ld.w	r8,r8[0x2c]
8000867c:	10 9c       	mov	r12,r8
8000867e:	f0 16 00 02 	mcall	r6[8]
80008682:	14 92       	mov	r2,r10
80008684:	16 93       	mov	r3,r11
80008686:	ee f8 ff b0 	ld.w	r8,r7[-80]
8000868a:	70 c8       	ld.w	r8,r8[0x30]
8000868c:	10 9c       	mov	r12,r8
8000868e:	f0 16 00 02 	mcall	r6[8]
80008692:	04 98       	mov	r8,r2
80008694:	06 99       	mov	r9,r3
80008696:	f0 16 00 4e 	mcall	r6[312]
8000869a:	14 98       	mov	r8,r10
8000869c:	16 99       	mov	r9,r11
8000869e:	10 9a       	mov	r10,r8
800086a0:	12 9b       	mov	r11,r9
800086a2:	f0 16 00 09 	mcall	r6[36]
800086a6:	18 98       	mov	r8,r12
800086a8:	ef 48 ff f8 	st.w	r7[-8],r8
			float current_velocity_sqr=SQR(pos_est->vel_bf[X])+SQR(pos_est->vel_bf[Y]);
800086ac:	ee f8 ff b0 	ld.w	r8,r7[-80]
800086b0:	70 b9       	ld.w	r9,r8[0x2c]
800086b2:	ee f8 ff b0 	ld.w	r8,r7[-80]
800086b6:	70 b8       	ld.w	r8,r8[0x2c]
800086b8:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
800086bc:	ee f8 ff b0 	ld.w	r8,r7[-80]
800086c0:	70 ca       	ld.w	r10,r8[0x30]
800086c2:	ee f8 ff b0 	ld.w	r8,r7[-80]
800086c6:	70 c8       	ld.w	r8,r8[0x30]
800086c8:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
800086cc:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
800086d0:	ef 48 ff fc 	st.w	r7[-4],r8
			//float blend_func=0.5*(sigmoid(4.0*(current_velocity_sqr - yaw_coordination_velocity))+1.0);
			//blend_func=1.0;
			if (current_velocity_sqr > SQR(centralData->stabiliser_stack.yaw_coordination_velocity)) {
800086d4:	ec f8 00 00 	ld.w	r8,r6[0]
800086d8:	70 08       	ld.w	r8,r8[0x0]
800086da:	f0 f9 05 54 	ld.w	r9,r8[1364]
800086de:	ec f8 00 00 	ld.w	r8,r6[0]
800086e2:	70 08       	ld.w	r8,r8[0x0]
800086e4:	f0 f8 05 54 	ld.w	r8,r8[1364]
800086e8:	e5 a2 0a 98 	cop	cp0,cr10,cr9,cr8,0x44
800086ec:	30 18       	mov	r8,1
800086ee:	ee f9 ff fc 	ld.w	r9,r7[-4]
800086f2:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
800086f6:	e0 8c 00 03 	brvs	800086fc <cascade_stabilise_copter+0x144>
800086fa:	c0 25       	brlt	800086fe <cascade_stabilise_copter+0x146>
800086fc:	30 08       	mov	r8,0
800086fe:	5c 58       	castu.b	r8
80008700:	c1 00       	breq	80008720 <cascade_stabilise_copter+0x168>
				input.rpy[YAW]+=sigmoid(3.0*rel_heading);
80008702:	ee f5 ff c0 	ld.w	r5,r7[-64]
80008706:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000870a:	fc 18 40 40 	movh	r8,0x4040
8000870e:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80008712:	10 9c       	mov	r12,r8
80008714:	c9 8e       	rcall	80008444 <sigmoid>
80008716:	18 98       	mov	r8,r12
80008718:	e5 a0 08 58 	cop	cp0,cr8,cr5,cr8,0x40
8000871c:	ef 48 ff c0 	st.w	r7[-64],r8
			} else {
				//input.rpy[YAW]=input.theading;
			}
		}

		rpyt_errors[YAW]= input.rpy[YAW];
80008720:	ee f8 ff c0 	ld.w	r8,r7[-64]
80008724:	ef 48 ff ec 	st.w	r7[-20],r8
		
		// run PID update on all velocity controllers
		stabilise(&centralData->stabiliser_stack.velocity_stabiliser, centralData->imu1.dt, rpyt_errors);
80008728:	ec f8 00 00 	ld.w	r8,r6[0]
8000872c:	70 08       	ld.w	r8,r8[0x0]
8000872e:	f0 f9 01 40 	ld.w	r9,r8[320]
80008732:	ec f8 00 00 	ld.w	r8,r6[0]
80008736:	70 08       	ld.w	r8,r8[0x0]
80008738:	f0 c8 fb e8 	sub	r8,r8,-1048
8000873c:	ee ca 00 1c 	sub	r10,r7,28
80008740:	12 9b       	mov	r11,r9
80008742:	10 9c       	mov	r12,r8
80008744:	f0 16 00 c0 	mcall	r6[768]
		
		//velocity_stabiliser.output.thrust = f_min(velocity_stabiliser.output.thrust,control_input->thrust);
		
		centralData->stabiliser_stack.velocity_stabiliser.output.thrust += THRUST_HOVER_POINT;
80008748:	ec f8 00 00 	ld.w	r8,r6[0]
8000874c:	70 05       	ld.w	r5,r8[0x0]
8000874e:	ec f8 00 00 	ld.w	r8,r6[0]
80008752:	70 08       	ld.w	r8,r8[0x0]
80008754:	f0 f8 05 34 	ld.w	r8,r8[1332]
80008758:	10 9c       	mov	r12,r8
8000875a:	f0 16 00 02 	mcall	r6[8]
8000875e:	e0 68 33 33 	mov	r8,13107
80008762:	ea 18 33 33 	orh	r8,0x3333
80008766:	e0 69 33 33 	mov	r9,13107
8000876a:	ea 19 3f d3 	orh	r9,0x3fd3
8000876e:	f0 16 00 11 	mcall	r6[68]
80008772:	14 98       	mov	r8,r10
80008774:	16 99       	mov	r9,r11
80008776:	10 9a       	mov	r10,r8
80008778:	12 9b       	mov	r11,r9
8000877a:	f0 16 00 09 	mcall	r6[36]
8000877e:	18 98       	mov	r8,r12
80008780:	eb 48 05 34 	st.w	r5[1332],r8
		centralData->stabiliser_stack.velocity_stabiliser.output.theading = input.theading;
80008784:	ec f8 00 00 	ld.w	r8,r6[0]
80008788:	70 08       	ld.w	r8,r8[0x0]
8000878a:	ee f9 ff d4 	ld.w	r9,r7[-44]
8000878e:	f1 49 05 44 	st.w	r8[1348],r9
		input = centralData->stabiliser_stack.velocity_stabiliser.output;
80008792:	ec f8 00 00 	ld.w	r8,r6[0]
80008796:	70 09       	ld.w	r9,r8[0x0]
80008798:	ee c8 00 48 	sub	r8,r7,72
8000879c:	f2 c9 fa d8 	sub	r9,r9,-1320
800087a0:	f0 ca 00 00 	sub	r10,r8,0
800087a4:	f2 cb 00 00 	sub	r11,r9,0
800087a8:	76 0c       	ld.w	r12,r11[0x0]
800087aa:	95 0c       	st.w	r10[0x0],r12
800087ac:	76 1c       	ld.w	r12,r11[0x4]
800087ae:	95 1c       	st.w	r10[0x4],r12
800087b0:	76 2c       	ld.w	r12,r11[0x8]
800087b2:	95 2c       	st.w	r10[0x8],r12
800087b4:	76 3b       	ld.w	r11,r11[0xc]
800087b6:	95 3b       	st.w	r10[0xc],r11
800087b8:	f0 ca ff f0 	sub	r10,r8,-16
800087bc:	f2 cb ff f0 	sub	r11,r9,-16
800087c0:	76 0c       	ld.w	r12,r11[0x0]
800087c2:	95 0c       	st.w	r10[0x0],r12
800087c4:	76 1c       	ld.w	r12,r11[0x4]
800087c6:	95 1c       	st.w	r10[0x4],r12
800087c8:	76 2c       	ld.w	r12,r11[0x8]
800087ca:	95 2c       	st.w	r10[0x8],r12
800087cc:	76 3b       	ld.w	r11,r11[0xc]
800087ce:	95 3b       	st.w	r10[0xc],r11
800087d0:	f2 ea 00 20 	ld.d	r10,r9[32]
800087d4:	f0 eb 00 20 	st.d	r8[32],r10
800087d8:	72 a9       	ld.w	r9,r9[0x28]
800087da:	91 a9       	st.w	r8[0x28],r9
	
	// -- no break here  - we want to run the lower level modes as well! -- 
	
	case ATTITUDE_COMMAND_MODE:
		// run absolute attitude controller
		rpyt_errors[0]= input.rpy[0] - (-imu->attitude.up_vec.v[1] ); 
800087dc:	ee f9 ff b8 	ld.w	r9,r7[-72]
800087e0:	ee f8 ff b4 	ld.w	r8,r7[-76]
800087e4:	70 68       	ld.w	r8,r8[0x18]
800087e6:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
800087ea:	ef 48 ff e4 	st.w	r7[-28],r8
		rpyt_errors[1]= input.rpy[1] - imu->attitude.up_vec.v[0];
800087ee:	ee f9 ff bc 	ld.w	r9,r7[-68]
800087f2:	ee f8 ff b4 	ld.w	r8,r7[-76]
800087f6:	70 58       	ld.w	r8,r8[0x14]
800087f8:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
800087fc:	ef 48 ff e8 	st.w	r7[-24],r8
		
		rpyt_errors[2]= input.rpy[2];
80008800:	ee f8 ff c0 	ld.w	r8,r7[-64]
80008804:	ef 48 ff ec 	st.w	r7[-20],r8
		
		if ((control_input->yaw_mode == YAW_ABSOLUTE) ) {
80008808:	ee f8 ff ac 	ld.w	r8,r7[-84]
8000880c:	70 98       	ld.w	r8,r8[0x24]
8000880e:	58 18       	cp.w	r8,1
80008810:	c1 21       	brne	80008834 <cascade_stabilise_copter+0x27c>
			rpyt_errors[2] +=calc_smaller_angle(input.theading- pos_est->localPosition.heading);
80008812:	ee f5 ff ec 	ld.w	r5,r7[-20]
80008816:	ee f9 ff d4 	ld.w	r9,r7[-44]
8000881a:	ee f8 ff b0 	ld.w	r8,r7[-80]
8000881e:	71 b8       	ld.w	r8,r8[0x6c]
80008820:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80008824:	10 9c       	mov	r12,r8
80008826:	fe b0 fd 35 	rcall	80008290 <calc_smaller_angle>
8000882a:	18 98       	mov	r8,r12
8000882c:	e5 a0 08 58 	cop	cp0,cr8,cr5,cr8,0x40
80008830:	ef 48 ff ec 	st.w	r7[-20],r8
		}
		rpyt_errors[3]= input.thrust;       // no feedback for thrust at this level
80008834:	ee f8 ff c4 	ld.w	r8,r7[-60]
80008838:	ef 48 ff f0 	st.w	r7[-16],r8
		
		// run PID update on all attitude controllers
		stabilise(&centralData->stabiliser_stack.attitude_stabiliser, centralData->imu1.dt, &rpyt_errors);
8000883c:	ec f8 00 00 	ld.w	r8,r6[0]
80008840:	70 08       	ld.w	r8,r8[0x0]
80008842:	f0 f9 01 40 	ld.w	r9,r8[320]
80008846:	ec f8 00 00 	ld.w	r8,r6[0]
8000884a:	70 08       	ld.w	r8,r8[0x0]
8000884c:	f0 c8 fd 24 	sub	r8,r8,-732
80008850:	ee ca 00 1c 	sub	r10,r7,28
80008854:	12 9b       	mov	r11,r9
80008856:	10 9c       	mov	r12,r8
80008858:	f0 16 00 c0 	mcall	r6[768]
		
		// use output of attitude controller to set rate setpoints for rate controller 
		input = centralData->stabiliser_stack.attitude_stabiliser.output;
8000885c:	ec f8 00 00 	ld.w	r8,r6[0]
80008860:	70 09       	ld.w	r9,r8[0x0]
80008862:	ee c8 00 48 	sub	r8,r7,72
80008866:	f2 c9 fc 14 	sub	r9,r9,-1004
8000886a:	f0 ca 00 00 	sub	r10,r8,0
8000886e:	f2 cb 00 00 	sub	r11,r9,0
80008872:	76 0c       	ld.w	r12,r11[0x0]
80008874:	95 0c       	st.w	r10[0x0],r12
80008876:	76 1c       	ld.w	r12,r11[0x4]
80008878:	95 1c       	st.w	r10[0x4],r12
8000887a:	76 2c       	ld.w	r12,r11[0x8]
8000887c:	95 2c       	st.w	r10[0x8],r12
8000887e:	76 3b       	ld.w	r11,r11[0xc]
80008880:	95 3b       	st.w	r10[0xc],r11
80008882:	f0 ca ff f0 	sub	r10,r8,-16
80008886:	f2 cb ff f0 	sub	r11,r9,-16
8000888a:	76 0c       	ld.w	r12,r11[0x0]
8000888c:	95 0c       	st.w	r10[0x0],r12
8000888e:	76 1c       	ld.w	r12,r11[0x4]
80008890:	95 1c       	st.w	r10[0x4],r12
80008892:	76 2c       	ld.w	r12,r11[0x8]
80008894:	95 2c       	st.w	r10[0x8],r12
80008896:	76 3b       	ld.w	r11,r11[0xc]
80008898:	95 3b       	st.w	r10[0xc],r11
8000889a:	f2 ea 00 20 	ld.d	r10,r9[32]
8000889e:	f0 eb 00 20 	st.d	r8[32],r10
800088a2:	72 a9       	ld.w	r9,r9[0x28]
800088a4:	91 a9       	st.w	r8[0x28],r9
	
	// -- no break here  - we want to run the lower level modes as well! -- 
	
	case RATE_COMMAND_MODE: // this level is always run
		// get rate measurements from IMU (filtered angular rates)
		for (i=0; i<3; i++) {
800088a6:	30 08       	mov	r8,0
800088a8:	ef 48 ff f4 	st.w	r7[-12],r8
800088ac:	c1 e8       	rjmp	800088e8 <cascade_stabilise_copter+0x330>
			rpyt_errors[i]= input.rpy[i]- imu->attitude.om[i];
800088ae:	ee fa ff f4 	ld.w	r10,r7[-12]
800088b2:	ee f8 ff f4 	ld.w	r8,r7[-12]
800088b6:	a3 68       	lsl	r8,0x2
800088b8:	ee 08 00 08 	add	r8,r7,r8
800088bc:	f0 f9 ff b8 	ld.w	r9,r8[-72]
800088c0:	ee fb ff f4 	ld.w	r11,r7[-12]
800088c4:	ee f8 ff b4 	ld.w	r8,r7[-76]
800088c8:	2e 2b       	sub	r11,-30
800088ca:	f0 0b 03 28 	ld.w	r8,r8[r11<<0x2]
800088ce:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
800088d2:	f4 08 15 02 	lsl	r8,r10,0x2
800088d6:	ee 08 00 08 	add	r8,r7,r8
800088da:	f1 49 ff e4 	st.w	r8[-28],r9
	
	// -- no break here  - we want to run the lower level modes as well! -- 
	
	case RATE_COMMAND_MODE: // this level is always run
		// get rate measurements from IMU (filtered angular rates)
		for (i=0; i<3; i++) {
800088de:	ee f8 ff f4 	ld.w	r8,r7[-12]
800088e2:	2f f8       	sub	r8,-1
800088e4:	ef 48 ff f4 	st.w	r7[-12],r8
800088e8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800088ec:	58 28       	cp.w	r8,2
800088ee:	fe 9a ff e0 	brle	800088ae <cascade_stabilise_copter+0x2f6>
			rpyt_errors[i]= input.rpy[i]- imu->attitude.om[i];
		}
		rpyt_errors[3] = input.thrust ;  // no feedback for thrust at this level
800088f2:	ee f8 ff c4 	ld.w	r8,r7[-60]
800088f6:	ef 48 ff f0 	st.w	r7[-16],r8
		
		// run PID update on all rate controllers
		stabilise(&centralData->stabiliser_stack.rate_stabiliser, centralData->imu1.dt, &rpyt_errors );
800088fa:	ec f8 00 00 	ld.w	r8,r6[0]
800088fe:	70 08       	ld.w	r8,r8[0x0]
80008900:	f0 f9 01 40 	ld.w	r9,r8[320]
80008904:	ec f8 00 00 	ld.w	r8,r6[0]
80008908:	70 08       	ld.w	r8,r8[0x0]
8000890a:	f0 c8 fe 60 	sub	r8,r8,-416
8000890e:	ee ca 00 1c 	sub	r10,r7,28
80008912:	12 9b       	mov	r11,r9
80008914:	10 9c       	mov	r12,r8
80008916:	f0 16 00 c0 	mcall	r6[768]
	}
	
	// mix to servo outputs depending on configuration
	#ifdef CONF_DIAG
	mix_to_servos_diag_quad(&centralData->stabiliser_stack.rate_stabiliser.output);
8000891a:	ec f8 00 00 	ld.w	r8,r6[0]
8000891e:	70 08       	ld.w	r8,r8[0x0]
80008920:	f0 c8 fd 50 	sub	r8,r8,-688
80008924:	10 9c       	mov	r12,r8
80008926:	f0 16 01 e1 	mcall	r6[1924]
	#ifdef CONF_CROSS
	mix_to_servos_cross_quad(&centralData->stabiliser_stack.rate_stabiliser.output);
	#endif
	#endif
	
}
8000892a:	2e bd       	sub	sp,-84
8000892c:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
80008930:	80 00       	ld.sh	r0,r0[0x0]
80008932:	84 48       	ld.sh	r8,r2[0x8]

80008934 <mix_to_servos_diag_quad>:

void mix_to_servos_diag_quad(Control_Command_t *control){
80008934:	eb cd 40 e0 	pushm	r5-r7,lr
80008938:	1a 97       	mov	r7,sp
8000893a:	20 6d       	sub	sp,24
8000893c:	4e 96       	lddpc	r6,80008ae0 <mix_to_servos_diag_quad+0x1ac>
8000893e:	1e 26       	rsub	r6,pc
80008940:	ef 4c ff e8 	st.w	r7[-24],r12
	int i;
	float motor_command[4];
	
	motor_command[M_FRONT_RIGHT]= control->thrust + (-control->rpy[ROLL] + control->rpy[PITCH]) + M_FR_DIR * control->rpy[YAW];
80008944:	ee f8 ff e8 	ld.w	r8,r7[-24]
80008948:	70 39       	ld.w	r9,r8[0xc]
8000894a:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000894e:	70 1a       	ld.w	r10,r8[0x4]
80008950:	ee f8 ff e8 	ld.w	r8,r7[-24]
80008954:	70 08       	ld.w	r8,r8[0x0]
80008956:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
8000895a:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000895e:	ee f8 ff e8 	ld.w	r8,r7[-24]
80008962:	70 28       	ld.w	r8,r8[0x8]
80008964:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80008968:	ef 48 ff f0 	st.w	r7[-16],r8
	motor_command[M_FRONT_LEFT] = control->thrust + ( control->rpy[ROLL] + control->rpy[PITCH]) + M_FL_DIR * control->rpy[YAW];
8000896c:	ee f8 ff e8 	ld.w	r8,r7[-24]
80008970:	70 39       	ld.w	r9,r8[0xc]
80008972:	ee f8 ff e8 	ld.w	r8,r7[-24]
80008976:	70 0a       	ld.w	r10,r8[0x0]
80008978:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000897c:	70 18       	ld.w	r8,r8[0x4]
8000897e:	e5 a0 08 a8 	cop	cp0,cr8,cr10,cr8,0x40
80008982:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80008986:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000898a:	70 28       	ld.w	r8,r8[0x8]
8000898c:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80008990:	ef 48 ff f4 	st.w	r7[-12],r8
	motor_command[M_REAR_RIGHT] = control->thrust + (-control->rpy[ROLL] - control->rpy[PITCH]) + M_RR_DIR * control->rpy[YAW];
80008994:	ee f8 ff e8 	ld.w	r8,r7[-24]
80008998:	70 39       	ld.w	r9,r8[0xc]
8000899a:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000899e:	70 08       	ld.w	r8,r8[0x0]
800089a0:	10 9a       	mov	r10,r8
800089a2:	ee 1a 80 00 	eorh	r10,0x8000
800089a6:	ee f8 ff e8 	ld.w	r8,r7[-24]
800089aa:	70 18       	ld.w	r8,r8[0x4]
800089ac:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
800089b0:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
800089b4:	ee f8 ff e8 	ld.w	r8,r7[-24]
800089b8:	70 28       	ld.w	r8,r8[0x8]
800089ba:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
800089be:	ef 48 ff ec 	st.w	r7[-20],r8
	motor_command[M_REAR_LEFT]  = control->thrust + ( control->rpy[ROLL] - control->rpy[PITCH]) + M_RL_DIR * control->rpy[YAW];
800089c2:	ee f8 ff e8 	ld.w	r8,r7[-24]
800089c6:	70 39       	ld.w	r9,r8[0xc]
800089c8:	ee f8 ff e8 	ld.w	r8,r7[-24]
800089cc:	70 0a       	ld.w	r10,r8[0x0]
800089ce:	ee f8 ff e8 	ld.w	r8,r7[-24]
800089d2:	70 18       	ld.w	r8,r8[0x4]
800089d4:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
800089d8:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
800089dc:	ee f8 ff e8 	ld.w	r8,r7[-24]
800089e0:	70 28       	ld.w	r8,r8[0x8]
800089e2:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
800089e6:	ef 48 ff f8 	st.w	r7[-8],r8
	for (i=0; i<4; i++) {
800089ea:	30 08       	mov	r8,0
800089ec:	ef 48 ff fc 	st.w	r7[-4],r8
800089f0:	c4 98       	rjmp	80008a82 <mix_to_servos_diag_quad+0x14e>
		if (motor_command[i]<MIN_THRUST) motor_command[i]=MIN_THRUST;
800089f2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800089f6:	a3 68       	lsl	r8,0x2
800089f8:	ee 08 00 08 	add	r8,r7,r8
800089fc:	f0 f8 ff ec 	ld.w	r8,r8[-20]
80008a00:	10 9c       	mov	r12,r8
80008a02:	f0 16 00 02 	mcall	r6[8]
80008a06:	30 05       	mov	r5,0
80008a08:	e0 68 cc cd 	mov	r8,52429
80008a0c:	ea 18 cc cc 	orh	r8,0xcccc
80008a10:	e0 69 cc cc 	mov	r9,52428
80008a14:	ea 19 bf ec 	orh	r9,0xbfec
80008a18:	f0 16 00 1c 	mcall	r6[112]
80008a1c:	18 98       	mov	r8,r12
80008a1e:	58 08       	cp.w	r8,0
80008a20:	c0 20       	breq	80008a24 <mix_to_servos_diag_quad+0xf0>
80008a22:	30 15       	mov	r5,1
80008a24:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
80008a28:	c0 c0       	breq	80008a40 <mix_to_servos_diag_quad+0x10c>
80008a2a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008a2e:	a3 68       	lsl	r8,0x2
80008a30:	ee 08 00 08 	add	r8,r7,r8
80008a34:	e0 69 66 66 	mov	r9,26214
80008a38:	ea 19 bf 66 	orh	r9,0xbf66
80008a3c:	f1 49 ff ec 	st.w	r8[-20],r9
		if (motor_command[i]>MAX_THRUST) motor_command[i]=MAX_THRUST;
80008a40:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008a44:	a3 68       	lsl	r8,0x2
80008a46:	ee 08 00 08 	add	r8,r7,r8
80008a4a:	f0 fa ff ec 	ld.w	r10,r8[-20]
80008a4e:	30 18       	mov	r8,1
80008a50:	fc 19 3f 80 	movh	r9,0x3f80
80008a54:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80008a58:	e0 8c 00 04 	brvs	80008a60 <mix_to_servos_diag_quad+0x12c>
80008a5c:	e0 89 00 03 	brgt	80008a62 <mix_to_servos_diag_quad+0x12e>
80008a60:	30 08       	mov	r8,0
80008a62:	5c 58       	castu.b	r8
80008a64:	c0 a0       	breq	80008a78 <mix_to_servos_diag_quad+0x144>
80008a66:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008a6a:	a3 68       	lsl	r8,0x2
80008a6c:	ee 08 00 08 	add	r8,r7,r8
80008a70:	fc 19 3f 80 	movh	r9,0x3f80
80008a74:	f1 49 ff ec 	st.w	r8[-20],r9
	
	motor_command[M_FRONT_RIGHT]= control->thrust + (-control->rpy[ROLL] + control->rpy[PITCH]) + M_FR_DIR * control->rpy[YAW];
	motor_command[M_FRONT_LEFT] = control->thrust + ( control->rpy[ROLL] + control->rpy[PITCH]) + M_FL_DIR * control->rpy[YAW];
	motor_command[M_REAR_RIGHT] = control->thrust + (-control->rpy[ROLL] - control->rpy[PITCH]) + M_RR_DIR * control->rpy[YAW];
	motor_command[M_REAR_LEFT]  = control->thrust + ( control->rpy[ROLL] - control->rpy[PITCH]) + M_RL_DIR * control->rpy[YAW];
	for (i=0; i<4; i++) {
80008a78:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008a7c:	2f f8       	sub	r8,-1
80008a7e:	ef 48 ff fc 	st.w	r7[-4],r8
80008a82:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008a86:	58 38       	cp.w	r8,3
80008a88:	fe 9a ff b5 	brle	800089f2 <mix_to_servos_diag_quad+0xbe>
		if (motor_command[i]<MIN_THRUST) motor_command[i]=MIN_THRUST;
		if (motor_command[i]>MAX_THRUST) motor_command[i]=MAX_THRUST;
	}

	for (i=0; i<4; i++) {
80008a8c:	30 08       	mov	r8,0
80008a8e:	ef 48 ff fc 	st.w	r7[-4],r8
80008a92:	c1 f8       	rjmp	80008ad0 <mix_to_servos_diag_quad+0x19c>
		centralData->servos[i].value=SERVO_SCALE*motor_command[i];
80008a94:	ec f8 00 00 	ld.w	r8,r6[0]
80008a98:	70 0a       	ld.w	r10,r8[0x0]
80008a9a:	ee fb ff fc 	ld.w	r11,r7[-4]
80008a9e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008aa2:	a3 68       	lsl	r8,0x2
80008aa4:	ee 08 00 08 	add	r8,r7,r8
80008aa8:	f0 f9 ff ec 	ld.w	r9,r8[-20]
80008aac:	fc 18 43 fa 	movh	r8,0x43fa
80008ab0:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80008ab4:	e5 ab 09 08 	cop	cp0,cr9,cr0,cr8,0x56
80008ab8:	f6 08 15 04 	lsl	r8,r11,0x4
80008abc:	f4 08 00 08 	add	r8,r10,r8
80008ac0:	f0 c8 f9 14 	sub	r8,r8,-1772
80008ac4:	91 09       	st.w	r8[0x0],r9
	for (i=0; i<4; i++) {
		if (motor_command[i]<MIN_THRUST) motor_command[i]=MIN_THRUST;
		if (motor_command[i]>MAX_THRUST) motor_command[i]=MAX_THRUST;
	}

	for (i=0; i<4; i++) {
80008ac6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008aca:	2f f8       	sub	r8,-1
80008acc:	ef 48 ff fc 	st.w	r7[-4],r8
80008ad0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008ad4:	58 38       	cp.w	r8,3
80008ad6:	fe 9a ff df 	brle	80008a94 <mix_to_servos_diag_quad+0x160>
		centralData->servos[i].value=SERVO_SCALE*motor_command[i];
	}
}
80008ada:	2f ad       	sub	sp,-24
80008adc:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80008ae0:	80 00       	ld.sh	r0,r0[0x0]
80008ae2:	87 c2       	st.w	r3[0x30],r2

80008ae4 <mix_to_servos_cross_quad>:


void mix_to_servos_cross_quad(Control_Command_t *control){
80008ae4:	eb cd 40 e0 	pushm	r5-r7,lr
80008ae8:	1a 97       	mov	r7,sp
80008aea:	20 6d       	sub	sp,24
80008aec:	4d e6       	lddpc	r6,80008c64 <mix_to_servos_cross_quad+0x180>
80008aee:	1e 26       	rsub	r6,pc
80008af0:	ef 4c ff e8 	st.w	r7[-24],r12
	int i;
	float motor_command[4];
	
	motor_command[M_FRONT]= control->thrust + control->rpy[PITCH] + M_FRONT_DIR * control->rpy[YAW];
80008af4:	ee f8 ff e8 	ld.w	r8,r7[-24]
80008af8:	70 39       	ld.w	r9,r8[0xc]
80008afa:	ee f8 ff e8 	ld.w	r8,r7[-24]
80008afe:	70 18       	ld.w	r8,r8[0x4]
80008b00:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80008b04:	ee f8 ff e8 	ld.w	r8,r7[-24]
80008b08:	70 28       	ld.w	r8,r8[0x8]
80008b0a:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80008b0e:	ef 48 ff ec 	st.w	r7[-20],r8
	motor_command[M_RIGHT] = control->thrust - control->rpy[ROLL] + M_RIGHT_DIR * control->rpy[YAW];
80008b12:	ee f8 ff e8 	ld.w	r8,r7[-24]
80008b16:	70 39       	ld.w	r9,r8[0xc]
80008b18:	ee f8 ff e8 	ld.w	r8,r7[-24]
80008b1c:	70 08       	ld.w	r8,r8[0x0]
80008b1e:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80008b22:	ee f8 ff e8 	ld.w	r8,r7[-24]
80008b26:	70 28       	ld.w	r8,r8[0x8]
80008b28:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80008b2c:	ef 48 ff f0 	st.w	r7[-16],r8
	motor_command[M_REAR] = control->thrust - control->rpy[PITCH] + M_REAR_DIR * control->rpy[YAW];
80008b30:	ee f8 ff e8 	ld.w	r8,r7[-24]
80008b34:	70 39       	ld.w	r9,r8[0xc]
80008b36:	ee f8 ff e8 	ld.w	r8,r7[-24]
80008b3a:	70 18       	ld.w	r8,r8[0x4]
80008b3c:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80008b40:	ee f8 ff e8 	ld.w	r8,r7[-24]
80008b44:	70 28       	ld.w	r8,r8[0x8]
80008b46:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80008b4a:	ef 48 ff f4 	st.w	r7[-12],r8
	motor_command[M_LEFT]  = control->thrust + control->rpy[ROLL] + M_LEFT_DIR * control->rpy[YAW];
80008b4e:	ee f8 ff e8 	ld.w	r8,r7[-24]
80008b52:	70 39       	ld.w	r9,r8[0xc]
80008b54:	ee f8 ff e8 	ld.w	r8,r7[-24]
80008b58:	70 08       	ld.w	r8,r8[0x0]
80008b5a:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80008b5e:	ee f8 ff e8 	ld.w	r8,r7[-24]
80008b62:	70 28       	ld.w	r8,r8[0x8]
80008b64:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80008b68:	ef 48 ff f8 	st.w	r7[-8],r8
	for (i=0; i<4; i++) {
80008b6c:	30 08       	mov	r8,0
80008b6e:	ef 48 ff fc 	st.w	r7[-4],r8
80008b72:	c4 98       	rjmp	80008c04 <mix_to_servos_cross_quad+0x120>
		if (motor_command[i]<MIN_THRUST) motor_command[i]=MIN_THRUST;
80008b74:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008b78:	a3 68       	lsl	r8,0x2
80008b7a:	ee 08 00 08 	add	r8,r7,r8
80008b7e:	f0 f8 ff ec 	ld.w	r8,r8[-20]
80008b82:	10 9c       	mov	r12,r8
80008b84:	f0 16 00 02 	mcall	r6[8]
80008b88:	30 05       	mov	r5,0
80008b8a:	e0 68 cc cd 	mov	r8,52429
80008b8e:	ea 18 cc cc 	orh	r8,0xcccc
80008b92:	e0 69 cc cc 	mov	r9,52428
80008b96:	ea 19 bf ec 	orh	r9,0xbfec
80008b9a:	f0 16 00 1c 	mcall	r6[112]
80008b9e:	18 98       	mov	r8,r12
80008ba0:	58 08       	cp.w	r8,0
80008ba2:	c0 20       	breq	80008ba6 <mix_to_servos_cross_quad+0xc2>
80008ba4:	30 15       	mov	r5,1
80008ba6:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
80008baa:	c0 c0       	breq	80008bc2 <mix_to_servos_cross_quad+0xde>
80008bac:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008bb0:	a3 68       	lsl	r8,0x2
80008bb2:	ee 08 00 08 	add	r8,r7,r8
80008bb6:	e0 69 66 66 	mov	r9,26214
80008bba:	ea 19 bf 66 	orh	r9,0xbf66
80008bbe:	f1 49 ff ec 	st.w	r8[-20],r9
		if (motor_command[i]>MAX_THRUST) motor_command[i]=MAX_THRUST;
80008bc2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008bc6:	a3 68       	lsl	r8,0x2
80008bc8:	ee 08 00 08 	add	r8,r7,r8
80008bcc:	f0 fa ff ec 	ld.w	r10,r8[-20]
80008bd0:	30 18       	mov	r8,1
80008bd2:	fc 19 3f 80 	movh	r9,0x3f80
80008bd6:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80008bda:	e0 8c 00 04 	brvs	80008be2 <mix_to_servos_cross_quad+0xfe>
80008bde:	e0 89 00 03 	brgt	80008be4 <mix_to_servos_cross_quad+0x100>
80008be2:	30 08       	mov	r8,0
80008be4:	5c 58       	castu.b	r8
80008be6:	c0 a0       	breq	80008bfa <mix_to_servos_cross_quad+0x116>
80008be8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008bec:	a3 68       	lsl	r8,0x2
80008bee:	ee 08 00 08 	add	r8,r7,r8
80008bf2:	fc 19 3f 80 	movh	r9,0x3f80
80008bf6:	f1 49 ff ec 	st.w	r8[-20],r9
	
	motor_command[M_FRONT]= control->thrust + control->rpy[PITCH] + M_FRONT_DIR * control->rpy[YAW];
	motor_command[M_RIGHT] = control->thrust - control->rpy[ROLL] + M_RIGHT_DIR * control->rpy[YAW];
	motor_command[M_REAR] = control->thrust - control->rpy[PITCH] + M_REAR_DIR * control->rpy[YAW];
	motor_command[M_LEFT]  = control->thrust + control->rpy[ROLL] + M_LEFT_DIR * control->rpy[YAW];
	for (i=0; i<4; i++) {
80008bfa:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008bfe:	2f f8       	sub	r8,-1
80008c00:	ef 48 ff fc 	st.w	r7[-4],r8
80008c04:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008c08:	58 38       	cp.w	r8,3
80008c0a:	fe 9a ff b5 	brle	80008b74 <mix_to_servos_cross_quad+0x90>
		if (motor_command[i]<MIN_THRUST) motor_command[i]=MIN_THRUST;
		if (motor_command[i]>MAX_THRUST) motor_command[i]=MAX_THRUST;
	}

	for (i=0; i<4; i++) {
80008c0e:	30 08       	mov	r8,0
80008c10:	ef 48 ff fc 	st.w	r7[-4],r8
80008c14:	c1 f8       	rjmp	80008c52 <mix_to_servos_cross_quad+0x16e>
		centralData->servos[i].value=SERVO_SCALE*motor_command[i];
80008c16:	ec f8 00 00 	ld.w	r8,r6[0]
80008c1a:	70 0a       	ld.w	r10,r8[0x0]
80008c1c:	ee fb ff fc 	ld.w	r11,r7[-4]
80008c20:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008c24:	a3 68       	lsl	r8,0x2
80008c26:	ee 08 00 08 	add	r8,r7,r8
80008c2a:	f0 f9 ff ec 	ld.w	r9,r8[-20]
80008c2e:	fc 18 43 fa 	movh	r8,0x43fa
80008c32:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80008c36:	e5 ab 09 08 	cop	cp0,cr9,cr0,cr8,0x56
80008c3a:	f6 08 15 04 	lsl	r8,r11,0x4
80008c3e:	f4 08 00 08 	add	r8,r10,r8
80008c42:	f0 c8 f9 14 	sub	r8,r8,-1772
80008c46:	91 09       	st.w	r8[0x0],r9
	for (i=0; i<4; i++) {
		if (motor_command[i]<MIN_THRUST) motor_command[i]=MIN_THRUST;
		if (motor_command[i]>MAX_THRUST) motor_command[i]=MAX_THRUST;
	}

	for (i=0; i<4; i++) {
80008c48:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008c4c:	2f f8       	sub	r8,-1
80008c4e:	ef 48 ff fc 	st.w	r7[-4],r8
80008c52:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008c56:	58 38       	cp.w	r8,3
80008c58:	fe 9a ff df 	brle	80008c16 <mix_to_servos_cross_quad+0x132>
		centralData->servos[i].value=SERVO_SCALE*motor_command[i];
	}
	
80008c5c:	2f ad       	sub	sp,-24
80008c5e:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80008c62:	00 00       	add	r0,r0
80008c64:	80 00       	ld.sh	r0,r0[0x0]
80008c66:	89 72       	st.w	r4[0x1c],r2

80008c68 <init_analog_monitor>:
#define MONITOR_CHANNELS 4
#define MONITOR_SAMPLES 10

int16_t monitor_buffer[MONITOR_CHANNELS *MONITOR_SAMPLES];

void init_analog_monitor() {
80008c68:	eb cd 40 c0 	pushm	r6-r7,lr
80008c6c:	1a 97       	mov	r7,sp
80008c6e:	49 06       	lddpc	r6,80008cac <init_analog_monitor+0x44>
80008c70:	1e 26       	rsub	r6,pc
	Init_ADCI(100000, ADCIFA_REF06VDD, 16, 4);
80008c72:	30 49       	mov	r9,4
80008c74:	31 0a       	mov	r10,16
80008c76:	30 1b       	mov	r11,1
80008c78:	e0 7c 86 a0 	mov	r12,100000
80008c7c:	f0 16 02 08 	mcall	r6[2080]
	adc_sequencer_add(AVR32_ADCIFA_INP_ADCIN6, AVR32_ADCIFA_INN_GNDANA, ADCIFA_SHG_1);  // 6V
80008c80:	30 0a       	mov	r10,0
80008c82:	30 9b       	mov	r11,9
80008c84:	30 6c       	mov	r12,6
80008c86:	f0 16 00 87 	mcall	r6[540]
	adc_sequencer_add(AVR32_ADCIFA_INP_ADCIN7, AVR32_ADCIFA_INN_GNDANA, ADCIFA_SHG_1);  // 5V_ANALOG
80008c8a:	30 0a       	mov	r10,0
80008c8c:	30 9b       	mov	r11,9
80008c8e:	30 7c       	mov	r12,7
80008c90:	f0 16 00 87 	mcall	r6[540]
	adc_sequencer_add(AVR32_ADCIFA_INP_GNDANA, AVR32_ADCIFA_INN_ADCIN10,ADCIFA_SHG_1);  // BAT_FILTERED
80008c94:	30 0a       	mov	r10,0
80008c96:	30 2b       	mov	r11,2
80008c98:	30 ac       	mov	r12,10
80008c9a:	f0 16 00 87 	mcall	r6[540]
	adc_sequencer_add(AVR32_ADCIFA_INP_GNDANA, AVR32_ADCIFA_INN_ADCIN11, ADCIFA_SHG_1); //INPUT
80008c9e:	30 0a       	mov	r10,0
80008ca0:	30 3b       	mov	r11,3
80008ca2:	30 ac       	mov	r12,10
80008ca4:	f0 16 00 87 	mcall	r6[540]
	//ADCI_Start_Sampling(&monitor_buffer, MONITOR_CHANNELS, MONITOR_SAMPLES, 100, false);
}
80008ca8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80008cac:	80 00       	ld.sh	r0,r0[0x0]
80008cae:	8a f4       	ld.uh	r4,r5[0xe]

80008cb0 <trigger_analog_monitor>:

void trigger_analog_monitor() {
80008cb0:	eb cd 40 c0 	pushm	r6-r7,lr
80008cb4:	1a 97       	mov	r7,sp
80008cb6:	48 76       	lddpc	r6,80008cd0 <trigger_analog_monitor+0x20>
80008cb8:	1e 26       	rsub	r6,pc
	ADCI_Start_Sampling(&monitor_buffer, MONITOR_CHANNELS, MONITOR_SAMPLES, 100, false);
80008cba:	30 08       	mov	r8,0
80008cbc:	36 49       	mov	r9,100
80008cbe:	30 aa       	mov	r10,10
80008cc0:	30 4b       	mov	r11,4
80008cc2:	ec fc 03 98 	ld.w	r12,r6[920]
80008cc6:	f0 16 01 86 	mcall	r6[1560]
}
80008cca:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80008cce:	00 00       	add	r0,r0
80008cd0:	80 00       	ld.sh	r0,r0[0x0]
80008cd2:	8b 3c       	st.w	r5[0xc],r12

80008cd4 <get_monitored_avg>:

float get_monitored_avg(int channel) {
80008cd4:	eb cd 40 c0 	pushm	r6-r7,lr
80008cd8:	1a 97       	mov	r7,sp
80008cda:	20 3d       	sub	sp,12
80008cdc:	49 c6       	lddpc	r6,80008d4c <get_monitored_avg+0x78>
80008cde:	1e 26       	rsub	r6,pc
80008ce0:	ef 4c ff f4 	st.w	r7[-12],r12
	float out=0.0;
80008ce4:	30 08       	mov	r8,0
80008ce6:	ef 48 ff f8 	st.w	r7[-8],r8
	int i;
	for (i=0; i<MONITOR_SAMPLES; i++) {
80008cea:	30 08       	mov	r8,0
80008cec:	ef 48 ff fc 	st.w	r7[-4],r8
80008cf0:	c1 98       	rjmp	80008d22 <get_monitored_avg+0x4e>
		out+=(float)monitor_buffer[channel + i*MONITOR_CHANNELS];
80008cf2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008cf6:	f0 09 15 02 	lsl	r9,r8,0x2
80008cfa:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008cfe:	10 09       	add	r9,r8
80008d00:	ec f8 03 98 	ld.w	r8,r6[920]
80008d04:	f0 09 04 18 	ld.sh	r8,r8[r9<<0x1]
80008d08:	e5 a6 08 08 	cop	cp0,cr8,cr0,cr8,0x4c
80008d0c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80008d10:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80008d14:	ef 48 ff f8 	st.w	r7[-8],r8
}

float get_monitored_avg(int channel) {
	float out=0.0;
	int i;
	for (i=0; i<MONITOR_SAMPLES; i++) {
80008d18:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008d1c:	2f f8       	sub	r8,-1
80008d1e:	ef 48 ff fc 	st.w	r7[-4],r8
80008d22:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008d26:	58 98       	cp.w	r8,9
80008d28:	fe 9a ff e5 	brle	80008cf2 <get_monitored_avg+0x1e>
		out+=(float)monitor_buffer[channel + i*MONITOR_CHANNELS];
	}
	out=out / MONITOR_SAMPLES;
80008d2c:	fc 1b 41 20 	movh	r11,0x4120
80008d30:	ee fc ff f8 	ld.w	r12,r7[-8]
80008d34:	f0 16 00 08 	mcall	r6[32]
80008d38:	18 98       	mov	r8,r12
80008d3a:	ef 48 ff f8 	st.w	r7[-8],r8
	return out;
80008d3e:	ee f8 ff f8 	ld.w	r8,r7[-8]
}
80008d42:	10 9c       	mov	r12,r8
80008d44:	2f dd       	sub	sp,-12
80008d46:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80008d4a:	00 00       	add	r0,r0
80008d4c:	80 00       	ld.sh	r0,r0[0x0]
80008d4e:	8b 62       	st.w	r5[0x18],r2

80008d50 <get_battery_rail>:

float get_battery_rail(){
80008d50:	eb cd 40 c0 	pushm	r6-r7,lr
80008d54:	1a 97       	mov	r7,sp
80008d56:	48 f6       	lddpc	r6,80008d90 <get_battery_rail+0x40>
80008d58:	1e 26       	rsub	r6,pc
	return -CONV_FACTOR_BAT * get_monitored_avg(3);
80008d5a:	30 3c       	mov	r12,3
80008d5c:	f0 16 00 7e 	mcall	r6[504]
80008d60:	18 98       	mov	r8,r12
80008d62:	10 9c       	mov	r12,r8
80008d64:	f0 16 00 02 	mcall	r6[8]
80008d68:	e0 68 67 a1 	mov	r8,26529
80008d6c:	ea 18 ea b3 	orh	r8,0xeab3
80008d70:	e0 69 b5 73 	mov	r9,46451
80008d74:	ea 19 bf 65 	orh	r9,0xbf65
80008d78:	f0 16 00 03 	mcall	r6[12]
80008d7c:	14 98       	mov	r8,r10
80008d7e:	16 99       	mov	r9,r11
80008d80:	10 9a       	mov	r10,r8
80008d82:	12 9b       	mov	r11,r9
80008d84:	f0 16 00 09 	mcall	r6[36]
80008d88:	18 98       	mov	r8,r12
}
80008d8a:	10 9c       	mov	r12,r8
80008d8c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80008d90:	80 00       	ld.sh	r0,r0[0x0]
80008d92:	8b dc       	st.w	r5[0x34],r12

80008d94 <get_internal_rail>:

float get_internal_rail(){
80008d94:	eb cd 40 c0 	pushm	r6-r7,lr
80008d98:	1a 97       	mov	r7,sp
80008d9a:	48 f6       	lddpc	r6,80008dd4 <get_internal_rail+0x40>
80008d9c:	1e 26       	rsub	r6,pc
	return -CONV_FACTOR_INT * get_monitored_avg(2);
80008d9e:	30 2c       	mov	r12,2
80008da0:	f0 16 00 7e 	mcall	r6[504]
80008da4:	18 98       	mov	r8,r12
80008da6:	10 9c       	mov	r12,r8
80008da8:	f0 16 00 02 	mcall	r6[8]
80008dac:	e0 68 67 a1 	mov	r8,26529
80008db0:	ea 18 ea b3 	orh	r8,0xeab3
80008db4:	e0 69 b5 73 	mov	r9,46451
80008db8:	ea 19 bf 65 	orh	r9,0xbf65
80008dbc:	f0 16 00 03 	mcall	r6[12]
80008dc0:	14 98       	mov	r8,r10
80008dc2:	16 99       	mov	r9,r11
80008dc4:	10 9a       	mov	r10,r8
80008dc6:	12 9b       	mov	r11,r9
80008dc8:	f0 16 00 09 	mcall	r6[36]
80008dcc:	18 98       	mov	r8,r12
}
80008dce:	10 9c       	mov	r12,r8
80008dd0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80008dd4:	80 00       	ld.sh	r0,r0[0x0]
80008dd6:	8c 20       	ld.sh	r0,r6[0x4]

80008dd8 <get_6V_analog_rail>:


float get_6V_analog_rail(){
80008dd8:	eb cd 40 c0 	pushm	r6-r7,lr
80008ddc:	1a 97       	mov	r7,sp
80008dde:	48 f6       	lddpc	r6,80008e18 <get_6V_analog_rail+0x40>
80008de0:	1e 26       	rsub	r6,pc
	return CONV_FACTOR_6V * get_monitored_avg(0);
80008de2:	30 0c       	mov	r12,0
80008de4:	f0 16 00 7e 	mcall	r6[504]
80008de8:	18 98       	mov	r8,r12
80008dea:	10 9c       	mov	r12,r8
80008dec:	f0 16 00 02 	mcall	r6[8]
80008df0:	e0 68 61 13 	mov	r8,24851
80008df4:	ea 18 d3 c3 	orh	r8,0xd3c3
80008df8:	e0 69 65 2b 	mov	r9,25899
80008dfc:	ea 19 3f 59 	orh	r9,0x3f59
80008e00:	f0 16 00 03 	mcall	r6[12]
80008e04:	14 98       	mov	r8,r10
80008e06:	16 99       	mov	r9,r11
80008e08:	10 9a       	mov	r10,r8
80008e0a:	12 9b       	mov	r11,r9
80008e0c:	f0 16 00 09 	mcall	r6[36]
80008e10:	18 98       	mov	r8,r12
}
80008e12:	10 9c       	mov	r12,r8
80008e14:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80008e18:	80 00       	ld.sh	r0,r0[0x0]
80008e1a:	8c 64       	ld.sh	r4,r6[0xc]

80008e1c <get_5V_analog_rail>:


float get_5V_analog_rail(){
80008e1c:	eb cd 40 c0 	pushm	r6-r7,lr
80008e20:	1a 97       	mov	r7,sp
80008e22:	48 f6       	lddpc	r6,80008e5c <get_5V_analog_rail+0x40>
80008e24:	1e 26       	rsub	r6,pc
	return CONV_FACTOR_5V * get_monitored_avg(1);
80008e26:	30 1c       	mov	r12,1
80008e28:	f0 16 00 7e 	mcall	r6[504]
80008e2c:	18 98       	mov	r8,r12
80008e2e:	10 9c       	mov	r12,r8
80008e30:	f0 16 00 02 	mcall	r6[8]
80008e34:	e0 68 61 13 	mov	r8,24851
80008e38:	ea 18 d3 c3 	orh	r8,0xd3c3
80008e3c:	e0 69 65 2b 	mov	r9,25899
80008e40:	ea 19 3f 59 	orh	r9,0x3f59
80008e44:	f0 16 00 03 	mcall	r6[12]
80008e48:	14 98       	mov	r8,r10
80008e4a:	16 99       	mov	r9,r11
80008e4c:	10 9a       	mov	r10,r8
80008e4e:	12 9b       	mov	r11,r9
80008e50:	f0 16 00 09 	mcall	r6[36]
80008e54:	18 98       	mov	r8,r12
}
80008e56:	10 9c       	mov	r12,r8
80008e58:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80008e5c:	80 00       	ld.sh	r0,r0[0x0]
80008e5e:	8c a8       	ld.uh	r8,r6[0x4]

80008e60 <cpu_irq_is_enabled_flags>:

	return flags;
}

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
80008e60:	eb cd 40 80 	pushm	r7,lr
80008e64:	1a 97       	mov	r7,sp
80008e66:	20 1d       	sub	sp,4
80008e68:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
80008e6c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008e70:	e6 18 00 01 	andh	r8,0x1,COH
80008e74:	5f 08       	sreq	r8
80008e76:	5c 58       	castu.b	r8
}
80008e78:	10 9c       	mov	r12,r8
80008e7a:	2f fd       	sub	sp,-4
80008e7c:	e3 cd 80 80 	ldm	sp++,r7,pc

80008e80 <osc_get_rate>:
/**
 * \todo RC8M may run at either 8 MHz or 1 MHz. Currently, we assume
 * it's always running at 8 MHz.
 */
static inline uint32_t osc_get_rate(uint8_t id)
{
80008e80:	eb cd 40 80 	pushm	r7,lr
80008e84:	1a 97       	mov	r7,sp
80008e86:	20 1d       	sub	sp,4
80008e88:	18 98       	mov	r8,r12
80008e8a:	ef 68 ff fc 	st.b	r7[-4],r8
	switch (id) {
80008e8e:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80008e92:	58 38       	cp.w	r8,3
80008e94:	c1 20       	breq	80008eb8 <osc_get_rate+0x38>
80008e96:	e0 89 00 07 	brgt	80008ea4 <osc_get_rate+0x24>
80008e9a:	58 08       	cp.w	r8,0
80008e9c:	c0 90       	breq	80008eae <osc_get_rate+0x2e>
80008e9e:	58 28       	cp.w	r8,2
80008ea0:	c0 f0       	breq	80008ebe <osc_get_rate+0x3e>
80008ea2:	c1 b8       	rjmp	80008ed8 <osc_get_rate+0x58>
80008ea4:	58 48       	cp.w	r8,4
80008ea6:	c1 10       	breq	80008ec8 <osc_get_rate+0x48>
80008ea8:	58 58       	cp.w	r8,5
80008eaa:	c1 40       	breq	80008ed2 <osc_get_rate+0x52>
80008eac:	c1 68       	rjmp	80008ed8 <osc_get_rate+0x58>
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return BOARD_OSC0_HZ;
80008eae:	e0 68 24 00 	mov	r8,9216
80008eb2:	ea 18 00 f4 	orh	r8,0xf4
80008eb6:	c1 28       	rjmp	80008eda <osc_get_rate+0x5a>
		return BOARD_OSC1_HZ;
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		return BOARD_OSC32_HZ;
80008eb8:	e0 68 80 00 	mov	r8,32768
80008ebc:	c0 f8       	rjmp	80008eda <osc_get_rate+0x5a>
#endif

	case OSC_ID_RC8M:
		return OSC_RC8M_NOMINAL_HZ;
80008ebe:	e0 68 12 00 	mov	r8,4608
80008ec2:	ea 18 00 7a 	orh	r8,0x7a
80008ec6:	c0 a8       	rjmp	80008eda <osc_get_rate+0x5a>

	case OSC_ID_RC120M:
		return OSC_RC120M_NOMINAL_HZ;
80008ec8:	e0 68 0e 00 	mov	r8,3584
80008ecc:	ea 18 07 27 	orh	r8,0x727
80008ed0:	c0 58       	rjmp	80008eda <osc_get_rate+0x5a>

	case OSC_ID_RCSYS:
		return OSC_RCSYS_NOMINAL_HZ;
80008ed2:	e0 78 c1 38 	mov	r8,115000
80008ed6:	c0 28       	rjmp	80008eda <osc_get_rate+0x5a>

	default:
		/* unhandled_case(id); */
		return 0;
80008ed8:	30 08       	mov	r8,0
	}
}
80008eda:	10 9c       	mov	r12,r8
80008edc:	2f fd       	sub	sp,-4
80008ede:	e3 cd 80 80 	ldm	sp++,r7,pc

80008ee2 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern bool sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
80008ee2:	eb cd 40 c0 	pushm	r6-r7,lr
80008ee6:	1a 97       	mov	r7,sp
80008ee8:	48 56       	lddpc	r6,80008efc <sysclk_get_main_hz+0x1a>
80008eea:	1e 26       	rsub	r6,pc
		return BOARD_OSC1_HZ;
#endif

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLL0:
		return pll_get_default_rate(0);
80008eec:	30 0c       	mov	r12,0
80008eee:	cc 9f       	rcall	80008e80 <osc_get_rate>
80008ef0:	18 98       	mov	r8,r12
80008ef2:	a3 68       	lsl	r8,0x2

	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
80008ef4:	10 9c       	mov	r12,r8
80008ef6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80008efa:	00 00       	add	r0,r0
80008efc:	80 00       	ld.sh	r0,r0[0x0]
80008efe:	8d 6e       	st.w	r6[0x18],lr

80008f00 <sysclk_get_pba_hz>:
 * \brief Return the current rate in Hz of the Peripheral Bus A clock
 *
 * \return Frequency of the Peripheral Bus A clock, in Hz.
 */
static inline uint32_t sysclk_get_pba_hz(void)
{
80008f00:	eb cd 40 c0 	pushm	r6-r7,lr
80008f04:	1a 97       	mov	r7,sp
80008f06:	48 46       	lddpc	r6,80008f14 <sysclk_get_pba_hz+0x14>
80008f08:	1e 26       	rsub	r6,pc
	return sysclk_get_main_hz() >> CONFIG_SYSCLK_PBA_DIV;
80008f0a:	ce cf       	rcall	80008ee2 <sysclk_get_main_hz>
80008f0c:	18 98       	mov	r8,r12
}
80008f0e:	10 9c       	mov	r12,r8
80008f10:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80008f14:	80 00       	ld.sh	r0,r0[0x0]
80008f16:	8d 8c       	st.w	r6[0x20],r12

80008f18 <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
80008f18:	eb cd 40 c0 	pushm	r6-r7,lr
80008f1c:	1a 97       	mov	r7,sp
80008f1e:	20 6d       	sub	sp,24
80008f20:	49 e6       	lddpc	r6,80008f98 <interpolate+0x80>
80008f22:	1e 26       	rsub	r6,pc
80008f24:	ef 4c ff f8 	st.w	r7[-8],r12
80008f28:	ef 4b ff f4 	st.w	r7[-12],r11
80008f2c:	ef 4a ff f0 	st.w	r7[-16],r10
80008f30:	ef 49 ff ec 	st.w	r7[-20],r9
80008f34:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
80008f38:	ee f9 ff f4 	ld.w	r9,r7[-12]
80008f3c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80008f40:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
80008f44:	c0 41       	brne	80008f4c <interpolate+0x34>
	{
		return y1;
80008f46:	ee f8 ff ec 	ld.w	r8,r7[-20]
80008f4a:	c2 38       	rjmp	80008f90 <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
80008f4c:	ee f9 ff e8 	ld.w	r9,r7[-24]
80008f50:	ee f8 ff ec 	ld.w	r8,r7[-20]
80008f54:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80008f58:	ee fa ff f8 	ld.w	r10,r7[-8]
80008f5c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008f60:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80008f64:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80008f68:	ee fa ff f0 	ld.w	r10,r7[-16]
80008f6c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80008f70:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80008f74:	12 9b       	mov	r11,r9
80008f76:	10 9c       	mov	r12,r8
80008f78:	f0 16 00 08 	mcall	r6[32]
80008f7c:	18 98       	mov	r8,r12
80008f7e:	10 99       	mov	r9,r8
80008f80:	ee f8 ff ec 	ld.w	r8,r7[-20]
80008f84:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80008f88:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
80008f8c:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
80008f90:	10 9c       	mov	r12,r8
80008f92:	2f ad       	sub	sp,-24
80008f94:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80008f98:	80 00       	ld.sh	r0,r0[0x0]
80008f9a:	8d a6       	st.w	r6[0x28],r6

80008f9c <i2c_int_handler_i2c0>:
 */

ISR(i2c_int_handler_i2c0,CONF_TWIM_IRQ_GROUP,CONF_TWIM_IRQ_LEVEL)
//__attribute__((__interrupt__))
//static void i2c_int_handler_i2c0(void)
{
80008f9c:	eb cd 40 c0 	pushm	r6-r7,lr
80008fa0:	1a 97       	mov	r7,sp
80008fa2:	20 2d       	sub	sp,8
80008fa4:	4c e6       	lddpc	r6,800090dc <i2c_int_handler_i2c0+0x140>
80008fa6:	1e 26       	rsub	r6,pc
	 volatile avr32_twim_t *twim = &AVR32_TWIM0;
80008fa8:	fe 78 38 00 	mov	r8,-51200
80008fac:	ef 48 ff f8 	st.w	r7[-8],r8
		// get masked status register value
	uint32_t status = twim->sr &(AVR32_TWIM_SR_STD_MASK |AVR32_TWIM_SR_TXRDY_MASK |AVR32_TWIM_SR_RXRDY_MASK) ;
80008fb0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008fb4:	70 78       	ld.w	r8,r8[0x1c]
80008fb6:	e2 18 07 03 	andl	r8,0x703,COH
80008fba:	ef 48 ff fc 	st.w	r7[-4],r8
	// this is a NACK
	if (status & AVR32_TWIM_SR_STD_MASK) {
80008fbe:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008fc2:	e2 18 07 00 	andl	r8,0x700,COH
80008fc6:	c1 70       	breq	80008ff4 <i2c_int_handler_i2c0+0x58>
		//if we get a nak, clear the valid bit in cmdr, 
		//otherwise the command will be resent.
		current_transfer->transfer_in_progress = false;
80008fc8:	ec f8 00 a4 	ld.w	r8,r6[164]
80008fcc:	70 09       	ld.w	r9,r8[0x0]
80008fce:	30 08       	mov	r8,0
80008fd0:	f3 68 00 18 	st.b	r9[24],r8
		twim->CMDR.valid = 0;
80008fd4:	ee f9 ff f8 	ld.w	r9,r7[-8]
80008fd8:	72 38       	ld.w	r8,r9[0xc]
80008fda:	30 0a       	mov	r10,0
80008fdc:	f1 da d1 e1 	bfins	r8,r10,0xf,0x1
80008fe0:	93 38       	st.w	r9[0xc],r8
		twim->scr = ~0UL;
80008fe2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008fe6:	3f f9       	mov	r9,-1
80008fe8:	91 b9       	st.w	r8[0x2c],r9
		twim->idr = ~0UL;
80008fea:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008fee:	3f f9       	mov	r9,-1
80008ff0:	91 99       	st.w	r8[0x24],r9
80008ff2:	c7 18       	rjmp	800090d4 <i2c_int_handler_i2c0+0x138>
	}
	// this is a RXRDY
	else if (status & AVR32_TWIM_SR_RXRDY_MASK) {
80008ff4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008ff8:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80008ffc:	5c 58       	castu.b	r8
80008ffe:	c2 f0       	breq	8000905c <i2c_int_handler_i2c0+0xc0>
		
		// get data from Receive Holding Register
		if (current_transfer->data_index < current_transfer->data_size) {
80009000:	ec f8 00 a4 	ld.w	r8,r6[164]
80009004:	70 08       	ld.w	r8,r8[0x0]
80009006:	70 59       	ld.w	r9,r8[0x14]
80009008:	ec f8 00 a4 	ld.w	r8,r6[164]
8000900c:	70 08       	ld.w	r8,r8[0x0]
8000900e:	70 48       	ld.w	r8,r8[0x10]
80009010:	10 39       	cp.w	r9,r8
80009012:	c1 62       	brcc	8000903e <i2c_int_handler_i2c0+0xa2>
			current_transfer->data[current_transfer->data_index]= twim->rhr;
80009014:	ec f8 00 a4 	ld.w	r8,r6[164]
80009018:	70 08       	ld.w	r8,r8[0x0]
8000901a:	70 39       	ld.w	r9,r8[0xc]
8000901c:	ec f8 00 a4 	ld.w	r8,r6[164]
80009020:	70 08       	ld.w	r8,r8[0x0]
80009022:	70 58       	ld.w	r8,r8[0x14]
80009024:	10 09       	add	r9,r8
80009026:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000902a:	70 58       	ld.w	r8,r8[0x14]
8000902c:	5c 58       	castu.b	r8
8000902e:	b2 88       	st.b	r9[0x0],r8
			current_transfer->data_index++;
80009030:	ec f8 00 a4 	ld.w	r8,r6[164]
80009034:	70 08       	ld.w	r8,r8[0x0]
80009036:	70 59       	ld.w	r9,r8[0x14]
80009038:	2f f9       	sub	r9,-1
8000903a:	91 59       	st.w	r8[0x14],r9
8000903c:	c4 c8       	rjmp	800090d4 <i2c_int_handler_i2c0+0x138>
		} else {			
			// finish the receive operation
			twim->idr = AVR32_TWIM_IDR_RXRDY_MASK;
8000903e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009042:	30 19       	mov	r9,1
80009044:	91 99       	st.w	r8[0x24],r9
			twim->cr = AVR32_TWIM_CR_MDIS_MASK;
80009046:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000904a:	30 29       	mov	r9,2
8000904c:	91 09       	st.w	r8[0x0],r9
			// set busy to false
			current_transfer->transfer_in_progress = false;
8000904e:	ec f8 00 a4 	ld.w	r8,r6[164]
80009052:	70 09       	ld.w	r9,r8[0x0]
80009054:	30 08       	mov	r8,0
80009056:	f3 68 00 18 	st.b	r9[24],r8
8000905a:	c3 d8       	rjmp	800090d4 <i2c_int_handler_i2c0+0x138>
		}
	}
	// this is a TXRDY
	else if (status & AVR32_TWIM_SR_TXRDY_MASK) {
8000905c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009060:	e2 18 00 02 	andl	r8,0x2,COH
80009064:	c3 80       	breq	800090d4 <i2c_int_handler_i2c0+0x138>
		
		// get data from transmit data block
		if (current_transfer->data_index < current_transfer->data_size) {
80009066:	ec f8 00 a4 	ld.w	r8,r6[164]
8000906a:	70 08       	ld.w	r8,r8[0x0]
8000906c:	70 59       	ld.w	r9,r8[0x14]
8000906e:	ec f8 00 a4 	ld.w	r8,r6[164]
80009072:	70 08       	ld.w	r8,r8[0x0]
80009074:	70 48       	ld.w	r8,r8[0x10]
80009076:	10 39       	cp.w	r9,r8
80009078:	c1 72       	brcc	800090a6 <i2c_int_handler_i2c0+0x10a>
			
			// put the byte in the Transmit Holding Register
			twim->thr = current_transfer->data[current_transfer->data_index];
8000907a:	ec f8 00 a4 	ld.w	r8,r6[164]
8000907e:	70 08       	ld.w	r8,r8[0x0]
80009080:	70 39       	ld.w	r9,r8[0xc]
80009082:	ec f8 00 a4 	ld.w	r8,r6[164]
80009086:	70 08       	ld.w	r8,r8[0x0]
80009088:	70 58       	ld.w	r8,r8[0x14]
8000908a:	f2 08 00 08 	add	r8,r9,r8
8000908e:	11 88       	ld.ub	r8,r8[0x0]
80009090:	10 99       	mov	r9,r8
80009092:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009096:	91 69       	st.w	r8[0x18],r9
			current_transfer->data_index++;
80009098:	ec f8 00 a4 	ld.w	r8,r6[164]
8000909c:	70 08       	ld.w	r8,r8[0x0]
8000909e:	70 59       	ld.w	r9,r8[0x14]
800090a0:	2f f9       	sub	r9,-1
800090a2:	91 59       	st.w	r8[0x14],r9
800090a4:	c1 88       	rjmp	800090d4 <i2c_int_handler_i2c0+0x138>
			
		} else { //nothing more to write
			twim->idr = AVR32_TWIM_IDR_TXRDY_MASK;
800090a6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800090aa:	30 29       	mov	r9,2
800090ac:	91 99       	st.w	r8[0x24],r9
			
			if (current_transfer->direction==I2C_WRITE1_THEN_READ) {
800090ae:	ec f8 00 a4 	ld.w	r8,r6[164]
800090b2:	70 08       	ld.w	r8,r8[0x0]
800090b4:	f1 39 00 08 	ld.ub	r9,r8[8]
800090b8:	30 28       	mov	r8,2
800090ba:	f0 09 18 00 	cp.b	r9,r8
800090be:	c0 b0       	breq	800090d4 <i2c_int_handler_i2c0+0x138>
				// reading should already be set up in next command register...
				
			}	else  { // all done
				twim->cr = AVR32_TWIM_CR_MDIS_MASK;
800090c0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800090c4:	30 29       	mov	r9,2
800090c6:	91 09       	st.w	r8[0x0],r9
				// set busy to false
				current_transfer->transfer_in_progress=false;				
800090c8:	ec f8 00 a4 	ld.w	r8,r6[164]
800090cc:	70 09       	ld.w	r9,r8[0x0]
800090ce:	30 08       	mov	r8,0
800090d0:	f3 68 00 18 	st.b	r9[24],r8
   // to process data, and maybe add some more data
//   schedule[0][current_schedule_slot[0]].transfer_in_progress=0;
   
//   if (schedule[0][current_schedule_slot[0]].callback) schedule[0][current_schedule_slot[0]].callback;
   //putstring(&AVR32_USART0, "!");
}
800090d4:	2f ed       	sub	sp,-8
800090d6:	e3 cd 40 c0 	ldm	sp++,r6-r7,lr
800090da:	d6 03       	rete
800090dc:	80 00       	ld.sh	r0,r0[0x0]
800090de:	8e 2a       	ld.sh	r10,r7[0x4]

800090e0 <init_i2c>:

//}



int init_i2c(unsigned char i2c_device) {
800090e0:	eb cd 40 c0 	pushm	r6-r7,lr
800090e4:	1a 97       	mov	r7,sp
800090e6:	20 4d       	sub	sp,16
800090e8:	4b 66       	lddpc	r6,800091c0 <init_i2c+0xe0>
800090ea:	1e 26       	rsub	r6,pc
800090ec:	18 98       	mov	r8,r12
800090ee:	ef 68 ff f0 	st.b	r7[-16],r8
	int i;
	volatile avr32_twim_t *twim;
	switch (i2c_device) {
800090f2:	ef 38 ff f0 	ld.ub	r8,r7[-16]
800090f6:	58 08       	cp.w	r8,0
800090f8:	c0 40       	breq	80009100 <init_i2c+0x20>
800090fa:	58 18       	cp.w	r8,1
800090fc:	c1 60       	breq	80009128 <init_i2c+0x48>
800090fe:	c2 28       	rjmp	80009142 <init_i2c+0x62>
	case 0: 
		twim=&AVR32_TWIM0;
80009100:	fe 78 38 00 	mov	r8,-51200
80009104:	ef 48 ff f8 	st.w	r7[-8],r8
		// Register PDCA IRQ interrupt.
		INTC_register_interrupt( (__int_handler) &i2c_int_handler_i2c0, AVR32_TWIM0_IRQ, AVR32_INTC_INT1);
80009108:	30 1a       	mov	r10,1
8000910a:	e0 6b 03 20 	mov	r11,800
8000910e:	fe cc 01 72 	sub	r12,pc,370
80009112:	f0 16 00 3b 	mcall	r6[236]
		gpio_enable_module_pin(AVR32_TWIMS0_TWCK_0_0_PIN, AVR32_TWIMS0_TWCK_0_0_FUNCTION);
80009116:	30 0b       	mov	r11,0
80009118:	34 3c       	mov	r12,67
8000911a:	f0 16 00 3c 	mcall	r6[240]
		gpio_enable_module_pin(AVR32_TWIMS0_TWD_0_0_PIN, AVR32_TWIMS0_TWD_0_0_FUNCTION);
8000911e:	30 0b       	mov	r11,0
80009120:	34 2c       	mov	r12,66
80009122:	f0 16 00 3c 	mcall	r6[240]

	break;
80009126:	c1 08       	rjmp	80009146 <init_i2c+0x66>
	case 1:
		twim=&AVR32_TWIM1;// Register PDCA IRQ interrupt.
80009128:	fe 78 3c 00 	mov	r8,-50176
8000912c:	ef 48 ff f8 	st.w	r7[-8],r8
//		INTC_register_interrupt( (__int_handler) &i2c_int_handler_i2c1, AVR32_TWIM1_IRQ, AVR32_INTC_INT1);
		gpio_enable_module_pin(AVR32_TWIMS1_TWCK_0_0_PIN, AVR32_TWIMS1_TWCK_0_0_FUNCTION);
80009130:	30 0b       	mov	r11,0
80009132:	34 5c       	mov	r12,69
80009134:	f0 16 00 3c 	mcall	r6[240]
		gpio_enable_module_pin(AVR32_TWIMS1_TWD_0_0_PIN, AVR32_TWIMS1_TWD_0_0_FUNCTION);
80009138:	30 0b       	mov	r11,0
8000913a:	34 4c       	mov	r12,68
8000913c:	f0 16 00 3c 	mcall	r6[240]
		//gpio_enable_pin_pull_up(AVR32_TWIMS1_TWCK_0_0_PIN);
		//gpio_enable_pin_pull_up(AVR32_TWIMS1_TWD_0_0_PIN);
	break;
80009140:	c0 38       	rjmp	80009146 <init_i2c+0x66>
	default: // invalid device ID
		return -1;
80009142:	3f f8       	mov	r8,-1
80009144:	c3 a8       	rjmp	800091b8 <init_i2c+0xd8>
	}		
				
	bool global_interrupt_enabled = cpu_irq_is_enabled ();
80009146:	e1 b8 00 00 	mfsr	r8,0x0
8000914a:	10 9c       	mov	r12,r8
8000914c:	c8 ae       	rcall	80008e60 <cpu_irq_is_enabled_flags>
8000914e:	18 98       	mov	r8,r12
80009150:	ef 68 ff ff 	st.b	r7[-1],r8
	// Disable TWI interrupts
	if (global_interrupt_enabled) {
80009154:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80009158:	30 08       	mov	r8,0
8000915a:	f0 09 18 00 	cp.b	r9,r8
8000915e:	c0 20       	breq	80009162 <init_i2c+0x82>
		cpu_irq_disable ();
80009160:	d3 03       	ssrf	0x10
	}
	twim->idr = ~0UL;
80009162:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009166:	3f f9       	mov	r9,-1
80009168:	91 99       	st.w	r8[0x24],r9
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
8000916a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000916e:	30 19       	mov	r9,1
80009170:	91 09       	st.w	r8[0x0],r9
	// Reset TWI
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
80009172:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009176:	e0 69 00 80 	mov	r9,128
8000917a:	91 09       	st.w	r8[0x0],r9
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
8000917c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009180:	30 29       	mov	r9,2
80009182:	91 09       	st.w	r8[0x0],r9
	
	
	if (global_interrupt_enabled) {
80009184:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80009188:	30 08       	mov	r8,0
8000918a:	f0 09 18 00 	cp.b	r9,r8
8000918e:	c0 20       	breq	80009192 <init_i2c+0xb2>
		cpu_irq_enable ();
80009190:	d5 03       	csrf	0x10
	}
	// Clear SR
	twim->scr = ~0UL;
80009192:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009196:	3f f9       	mov	r9,-1
80009198:	91 b9       	st.w	r8[0x2c],r9
//	irq_register_handler(twim_master_interrupt_handler,
//			CONF_TWIM_IRQ_LINE, CONF_TWIM_IRQ_LEVEL);
//	cpu_irq_restore(flags);
	
	// Select the speed
	if (twim_set_speed(twim, 400000, sysclk_get_pba_hz()) == 
8000919a:	cb 3e       	rcall	80008f00 <sysclk_get_pba_hz>
8000919c:	18 98       	mov	r8,r12
8000919e:	10 9a       	mov	r10,r8
800091a0:	e6 6b 1a 80 	mov	r11,400000
800091a4:	ee fc ff f8 	ld.w	r12,r7[-8]
800091a8:	f0 16 00 94 	mcall	r6[592]
800091ac:	18 98       	mov	r8,r12
800091ae:	5b 88       	cp.w	r8,-8
800091b0:	c0 31       	brne	800091b6 <init_i2c+0xd6>
			ERR_INVALID_ARG) {
		
		return ERR_INVALID_ARG;
800091b2:	3f 88       	mov	r8,-8
800091b4:	c0 28       	rjmp	800091b8 <init_i2c+0xd8>
	}
	return STATUS_OK;				
800091b6:	30 08       	mov	r8,0

}
800091b8:	10 9c       	mov	r12,r8
800091ba:	2f cd       	sub	sp,-16
800091bc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800091c0:	80 00       	ld.sh	r0,r0[0x0]
800091c2:	8f 6e       	st.w	r7[0x18],lr

800091c4 <i2c_reset>:



char i2c_reset(unsigned char i2c_device) {
800091c4:	eb cd 40 c0 	pushm	r6-r7,lr
800091c8:	1a 97       	mov	r7,sp
800091ca:	20 3d       	sub	sp,12
800091cc:	4a 26       	lddpc	r6,80009254 <i2c_reset+0x90>
800091ce:	1e 26       	rsub	r6,pc
800091d0:	18 98       	mov	r8,r12
800091d2:	ef 68 ff f4 	st.b	r7[-12],r8
	volatile avr32_twim_t *twim;
	switch (i2c_device) {
800091d6:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800091da:	58 08       	cp.w	r8,0
800091dc:	c0 40       	breq	800091e4 <i2c_reset+0x20>
800091de:	58 18       	cp.w	r8,1
800091e0:	c0 70       	breq	800091ee <i2c_reset+0x2a>
800091e2:	c0 b8       	rjmp	800091f8 <i2c_reset+0x34>
	case 0: 
		twim=&AVR32_TWIM0;
800091e4:	fe 78 38 00 	mov	r8,-51200
800091e8:	ef 48 ff f8 	st.w	r7[-8],r8
	break;
800091ec:	c0 a8       	rjmp	80009200 <i2c_reset+0x3c>
	case 1:
		twim=&AVR32_TWIM1;
800091ee:	fe 78 3c 00 	mov	r8,-50176
800091f2:	ef 48 ff f8 	st.w	r7[-8],r8
	break;
800091f6:	c0 58       	rjmp	80009200 <i2c_reset+0x3c>
	default: // invalid device ID
		return -1;
800091f8:	e0 68 00 ff 	mov	r8,255
	if (global_interrupt_enabled) {
		cpu_irq_enable ();
	}
	// Clear SR
	twim->scr = ~0UL;
}
800091fc:	10 9c       	mov	r12,r8
800091fe:	c2 78       	rjmp	8000924c <i2c_reset+0x88>
		twim=&AVR32_TWIM1;
	break;
	default: // invalid device ID
		return -1;
	}		
	bool global_interrupt_enabled = cpu_irq_is_enabled ();
80009200:	e1 b8 00 00 	mfsr	r8,0x0
80009204:	10 9c       	mov	r12,r8
80009206:	c2 de       	rcall	80008e60 <cpu_irq_is_enabled_flags>
80009208:	18 98       	mov	r8,r12
8000920a:	ef 68 ff ff 	st.b	r7[-1],r8
	// Disable TWI interrupts
	if (global_interrupt_enabled) {
8000920e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80009212:	30 08       	mov	r8,0
80009214:	f0 09 18 00 	cp.b	r9,r8
80009218:	c0 20       	breq	8000921c <i2c_reset+0x58>
		cpu_irq_disable ();
8000921a:	d3 03       	ssrf	0x10
	}
	twim->idr = ~0UL;
8000921c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009220:	3f f9       	mov	r9,-1
80009222:	91 99       	st.w	r8[0x24],r9
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
80009224:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009228:	30 19       	mov	r9,1
8000922a:	91 09       	st.w	r8[0x0],r9
	// Reset TWI
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
8000922c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009230:	e0 69 00 80 	mov	r9,128
80009234:	91 09       	st.w	r8[0x0],r9
	if (global_interrupt_enabled) {
80009236:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000923a:	30 08       	mov	r8,0
8000923c:	f0 09 18 00 	cp.b	r9,r8
80009240:	c0 20       	breq	80009244 <i2c_reset+0x80>
		cpu_irq_enable ();
80009242:	d5 03       	csrf	0x10
	}
	// Clear SR
	twim->scr = ~0UL;
80009244:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009248:	3f f9       	mov	r9,-1
8000924a:	91 b9       	st.w	r8[0x2c],r9
}
8000924c:	2f dd       	sub	sp,-12
8000924e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80009252:	00 00       	add	r0,r0
80009254:	80 00       	ld.sh	r0,r0[0x0]
80009256:	90 52       	ld.sh	r2,r8[0xa]

80009258 <i2c_trigger_request>:


char i2c_trigger_request(unsigned char i2c_device, i2c_packet_t *transfer) {
80009258:	eb cd 40 c0 	pushm	r6-r7,lr
8000925c:	1a 97       	mov	r7,sp
8000925e:	20 4d       	sub	sp,16
80009260:	4d 96       	lddpc	r6,800093c4 <i2c_trigger_request+0x16c>
80009262:	1e 26       	rsub	r6,pc
80009264:	18 98       	mov	r8,r12
80009266:	ef 4b ff f0 	st.w	r7[-16],r11
8000926a:	ef 68 ff f4 	st.b	r7[-12],r8
	// initiate transfer of given request
	// set up DMA channel
	volatile avr32_twim_t *twim;
	
	bool global_interrupt_enabled = cpu_irq_is_enabled ();
8000926e:	e1 b8 00 00 	mfsr	r8,0x0
80009272:	10 9c       	mov	r12,r8
80009274:	fe b0 fd f6 	rcall	80008e60 <cpu_irq_is_enabled_flags>
80009278:	18 98       	mov	r8,r12
8000927a:	ef 68 ff ff 	st.b	r7[-1],r8
	if (global_interrupt_enabled) {
8000927e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80009282:	30 08       	mov	r8,0
80009284:	f0 09 18 00 	cp.b	r9,r8
80009288:	c0 20       	breq	8000928c <i2c_trigger_request+0x34>
		cpu_irq_disable ();
8000928a:	d3 03       	ssrf	0x10
	}
	
	switch (i2c_device) {
8000928c:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80009290:	58 08       	cp.w	r8,0
80009292:	c0 40       	breq	8000929a <i2c_trigger_request+0x42>
80009294:	58 18       	cp.w	r8,1
80009296:	c2 c0       	breq	800092ee <i2c_trigger_request+0x96>
80009298:	c5 68       	rjmp	80009344 <i2c_trigger_request+0xec>
	case 0: 
		twim=&AVR32_TWIM0;
8000929a:	fe 78 38 00 	mov	r8,-51200
8000929e:	ef 48 ff f8 	st.w	r7[-8],r8
		twim->cr = AVR32_TWIM_CR_MEN_MASK;
800092a2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800092a6:	30 19       	mov	r9,1
800092a8:	91 09       	st.w	r8[0x0],r9
		twim->cr = AVR32_TWIM_CR_SWRST_MASK;
800092aa:	ee f8 ff f8 	ld.w	r8,r7[-8]
800092ae:	e0 69 00 80 	mov	r9,128
800092b2:	91 09       	st.w	r8[0x0],r9
		twim->cr = AVR32_TWIM_CR_MDIS_MASK;
800092b4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800092b8:	30 29       	mov	r9,2
800092ba:	91 09       	st.w	r8[0x0],r9
		twim->scr = ~0UL;
800092bc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800092c0:	3f f9       	mov	r9,-1
800092c2:	91 b9       	st.w	r8[0x2c],r9
		// Clear the interrupt flags
		twim->idr = ~0UL;
800092c4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800092c8:	3f f9       	mov	r9,-1
800092ca:	91 99       	st.w	r8[0x24],r9
		if (twim_set_speed(twim, transfer->i2c_speed, sysclk_get_pba_hz()) == 
800092cc:	c1 ae       	rcall	80008f00 <sysclk_get_pba_hz>
800092ce:	18 99       	mov	r9,r12
800092d0:	ee f8 ff f0 	ld.w	r8,r7[-16]
800092d4:	70 18       	ld.w	r8,r8[0x4]
800092d6:	12 9a       	mov	r10,r9
800092d8:	10 9b       	mov	r11,r8
800092da:	ee fc ff f8 	ld.w	r12,r7[-8]
800092de:	f0 16 00 94 	mcall	r6[592]
800092e2:	18 98       	mov	r8,r12
800092e4:	5b 88       	cp.w	r8,-8
800092e6:	c3 21       	brne	8000934a <i2c_trigger_request+0xf2>
			ERR_INVALID_ARG) {
			return ERR_INVALID_ARG;
800092e8:	e0 68 00 f8 	mov	r8,248
800092ec:	c6 88       	rjmp	800093bc <i2c_trigger_request+0x164>
		//pdca_enable_interrupt_transfer_error(TWI0_DMA_CH);
		
		
		break;
	case 1:
		twim=&AVR32_TWIM1;
800092ee:	fe 78 3c 00 	mov	r8,-50176
800092f2:	ef 48 ff f8 	st.w	r7[-8],r8
		twim->cr = AVR32_TWIM_CR_MEN_MASK;
800092f6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800092fa:	30 19       	mov	r9,1
800092fc:	91 09       	st.w	r8[0x0],r9
		twim->cr = AVR32_TWIM_CR_SWRST_MASK;
800092fe:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009302:	e0 69 00 80 	mov	r9,128
80009306:	91 09       	st.w	r8[0x0],r9
		twim->cr = AVR32_TWIM_CR_MDIS_MASK;
80009308:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000930c:	30 29       	mov	r9,2
8000930e:	91 09       	st.w	r8[0x0],r9
		twim->scr = ~0UL;
80009310:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009314:	3f f9       	mov	r9,-1
80009316:	91 b9       	st.w	r8[0x2c],r9
		// Clear the interrupt flags
		twim->idr = ~0UL;
80009318:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000931c:	3f f9       	mov	r9,-1
8000931e:	91 99       	st.w	r8[0x24],r9
		if (twim_set_speed(twim, transfer->i2c_speed, sysclk_get_pba_hz()) ==
80009320:	fe b0 fd f0 	rcall	80008f00 <sysclk_get_pba_hz>
80009324:	18 99       	mov	r9,r12
80009326:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000932a:	70 18       	ld.w	r8,r8[0x4]
8000932c:	12 9a       	mov	r10,r9
8000932e:	10 9b       	mov	r11,r8
80009330:	ee fc ff f8 	ld.w	r12,r7[-8]
80009334:	f0 16 00 94 	mcall	r6[592]
80009338:	18 98       	mov	r8,r12
8000933a:	5b 88       	cp.w	r8,-8
8000933c:	c0 91       	brne	8000934e <i2c_trigger_request+0xf6>
		ERR_INVALID_ARG) {
			return ERR_INVALID_ARG;
8000933e:	e0 68 00 f8 	mov	r8,248
80009342:	c3 d8       	rjmp	800093bc <i2c_trigger_request+0x164>
		}
	break;
	default: // invalid device ID
		return -1;
80009344:	e0 68 00 ff 	mov	r8,255
80009348:	c3 a8       	rjmp	800093bc <i2c_trigger_request+0x164>
		// the whole block was received
		
		//pdca_enable_interrupt_transfer_error(TWI0_DMA_CH);
		
		
		break;
8000934a:	d7 03       	nop
8000934c:	c0 28       	rjmp	80009350 <i2c_trigger_request+0xf8>
		twim->idr = ~0UL;
		if (twim_set_speed(twim, transfer->i2c_speed, sysclk_get_pba_hz()) ==
		ERR_INVALID_ARG) {
			return ERR_INVALID_ARG;
		}
	break;
8000934e:	d7 03       	nop
			twim->thr=transfer->write_then_read_preamble;
			twim->cr = AVR32_TWIM_CR_MEN_MASK;
			
			break;	
		case I2C_WRITE:
 			twim->cmdr = (transfer->slave_address << AVR32_TWIM_CMDR_SADR_OFFSET)
80009350:	ee f8 ff f0 	ld.w	r8,r7[-16]
80009354:	11 88       	ld.ub	r8,r8[0x0]
80009356:	a1 78       	lsl	r8,0x1
 						| ((transfer->data_size) << AVR32_TWIM_CMDR_NBYTES_OFFSET)
 						| (AVR32_TWIM_CMDR_VALID_MASK)
80009358:	10 99       	mov	r9,r8
			twim->cr = AVR32_TWIM_CR_MEN_MASK;
			
			break;	
		case I2C_WRITE:
 			twim->cmdr = (transfer->slave_address << AVR32_TWIM_CMDR_SADR_OFFSET)
 						| ((transfer->data_size) << AVR32_TWIM_CMDR_NBYTES_OFFSET)
8000935a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000935e:	70 48       	ld.w	r8,r8[0x10]
80009360:	b1 68       	lsl	r8,0x10
 						| (AVR32_TWIM_CMDR_VALID_MASK)
80009362:	f3 e8 10 08 	or	r8,r9,r8
			twim->thr=transfer->write_then_read_preamble;
			twim->cr = AVR32_TWIM_CR_MEN_MASK;
			
			break;	
		case I2C_WRITE:
 			twim->cmdr = (transfer->slave_address << AVR32_TWIM_CMDR_SADR_OFFSET)
80009366:	10 99       	mov	r9,r8
80009368:	e8 19 e0 00 	orl	r9,0xe000
8000936c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009370:	91 39       	st.w	r8[0xc],r9
 						| ((transfer->data_size) << AVR32_TWIM_CMDR_NBYTES_OFFSET)
 						| (AVR32_TWIM_CMDR_VALID_MASK)
 						| (AVR32_TWIM_CMDR_START_MASK)
 						| (AVR32_TWIM_CMDR_STOP_MASK)					
 						;
			twim->ncmdr=0;						;	
80009372:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009376:	30 09       	mov	r9,0
80009378:	91 49       	st.w	r8[0x10],r9
			twim->ier = AVR32_TWIM_IER_NAK_MASK |  AVR32_TWIM_IER_TXRDY_MASK;
8000937a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000937e:	e0 69 03 02 	mov	r9,770
80009382:	91 89       	st.w	r8[0x20],r9
			
		break;	
	}		
	// start transfer
	
	current_transfer=transfer;
80009384:	ec f8 00 a4 	ld.w	r8,r6[164]
80009388:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000938c:	91 09       	st.w	r8[0x0],r9
	current_transfer->transfer_in_progress=1;
8000938e:	ec f8 00 a4 	ld.w	r8,r6[164]
80009392:	70 09       	ld.w	r9,r8[0x0]
80009394:	30 18       	mov	r8,1
80009396:	f3 68 00 18 	st.b	r9[24],r8
	current_transfer->data_index=0;
8000939a:	ec f8 00 a4 	ld.w	r8,r6[164]
8000939e:	70 08       	ld.w	r8,r8[0x0]
800093a0:	30 09       	mov	r9,0
800093a2:	91 59       	st.w	r8[0x14],r9
	
	if (global_interrupt_enabled) {
800093a4:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800093a8:	30 08       	mov	r8,0
800093aa:	f0 09 18 00 	cp.b	r9,r8
800093ae:	c0 20       	breq	800093b2 <i2c_trigger_request+0x15a>
			cpu_irq_enable ();
800093b0:	d5 03       	csrf	0x10
		}	
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
800093b2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800093b6:	30 19       	mov	r9,1
800093b8:	91 09       	st.w	r8[0x0],r9
800093ba:	c0 18       	rjmp	800093bc <i2c_trigger_request+0x164>

}
800093bc:	10 9c       	mov	r12,r8
800093be:	2f cd       	sub	sp,-16
800093c0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800093c4:	80 00       	ld.sh	r0,r0[0x0]
800093c6:	90 e6       	ld.uh	r6,r8[0xc]

800093c8 <init_time_keeper>:


#include "time_keeper.h"


void init_time_keeper() {
800093c8:	eb cd 40 c0 	pushm	r6-r7,lr
800093cc:	1a 97       	mov	r7,sp
800093ce:	48 86       	lddpc	r6,800093ec <init_time_keeper+0x24>
800093d0:	1e 26       	rsub	r6,pc
	ast_init_counter(&AVR32_AST, AST_OSC_PB, AST_PRESCALER_SETTING, 0);
800093d2:	30 09       	mov	r9,0
800093d4:	30 5a       	mov	r10,5
800093d6:	30 2b       	mov	r11,2
800093d8:	fe 7c 0c 00 	mov	r12,-62464
800093dc:	f0 16 01 73 	mcall	r6[1484]
	ast_enable(&AVR32_AST);
800093e0:	fe 7c 0c 00 	mov	r12,-62464
800093e4:	f0 16 01 d8 	mcall	r6[1888]
}
800093e8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800093ec:	80 00       	ld.sh	r0,r0[0x0]
800093ee:	92 54       	ld.sh	r4,r9[0xa]

800093f0 <get_time>:


double get_time(){          // time in seconds since system start
800093f0:	eb cd 40 c0 	pushm	r6-r7,lr
800093f4:	1a 97       	mov	r7,sp
800093f6:	48 a6       	lddpc	r6,8000941c <get_time+0x2c>
800093f8:	1e 26       	rsub	r6,pc
	return ticks_to_seconds(get_time_ticks());
800093fa:	f0 16 00 4b 	mcall	r6[300]
800093fe:	18 98       	mov	r8,r12
80009400:	10 9c       	mov	r12,r8
80009402:	f0 16 00 ae 	mcall	r6[696]
80009406:	18 98       	mov	r8,r12
80009408:	10 9c       	mov	r12,r8
8000940a:	f0 16 00 02 	mcall	r6[8]
8000940e:	14 98       	mov	r8,r10
80009410:	16 99       	mov	r9,r11
}
80009412:	10 9a       	mov	r10,r8
80009414:	12 9b       	mov	r11,r9
80009416:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000941a:	00 00       	add	r0,r0
8000941c:	80 00       	ld.sh	r0,r0[0x0]
8000941e:	92 7c       	ld.sh	r12,r9[0xe]

80009420 <get_millis>:
uint32_t get_millis() {     //milliseconds since system start
80009420:	eb cd 40 c0 	pushm	r6-r7,lr
80009424:	1a 97       	mov	r7,sp
80009426:	48 96       	lddpc	r6,80009448 <get_millis+0x28>
80009428:	1e 26       	rsub	r6,pc
	return get_time_ticks()/1000; /// (TK_AST_FREQUENCY/1000);
8000942a:	f0 16 00 4b 	mcall	r6[300]
8000942e:	18 99       	mov	r9,r12
80009430:	e0 68 4d d3 	mov	r8,19923
80009434:	ea 18 10 62 	orh	r8,0x1062
80009438:	f2 08 06 48 	mulu.d	r8,r9,r8
8000943c:	f2 08 16 06 	lsr	r8,r9,0x6
}	
80009440:	10 9c       	mov	r12,r8
80009442:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80009446:	00 00       	add	r0,r0
80009448:	80 00       	ld.sh	r0,r0[0x0]
8000944a:	92 ac       	ld.uh	r12,r9[0x4]

8000944c <get_micros>:
uint32_t get_micros() {     // microseconds since system start. Will run over after an hour.
8000944c:	eb cd 40 c0 	pushm	r6-r7,lr
80009450:	1a 97       	mov	r7,sp
80009452:	48 56       	lddpc	r6,80009464 <get_micros+0x18>
80009454:	1e 26       	rsub	r6,pc
	return get_time_ticks()* (1000000/TK_AST_FREQUENCY);
80009456:	f0 16 00 4b 	mcall	r6[300]
8000945a:	18 98       	mov	r8,r12
}	
8000945c:	10 9c       	mov	r12,r8
8000945e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80009462:	00 00       	add	r0,r0
80009464:	80 00       	ld.sh	r0,r0[0x0]
80009466:	92 d8       	ld.uh	r8,r9[0xa]

80009468 <get_time_ticks>:

uint32_t get_time_ticks(){ //raw timer ticks
80009468:	eb cd 40 c0 	pushm	r6-r7,lr
8000946c:	1a 97       	mov	r7,sp
8000946e:	48 66       	lddpc	r6,80009484 <get_time_ticks+0x1c>
80009470:	1e 26       	rsub	r6,pc
	return ast_get_counter_value(&AVR32_AST);
80009472:	fe 7c 0c 00 	mov	r12,-62464
80009476:	f0 16 02 0b 	mcall	r6[2092]
8000947a:	18 98       	mov	r8,r12
}
8000947c:	10 9c       	mov	r12,r8
8000947e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80009482:	00 00       	add	r0,r0
80009484:	80 00       	ld.sh	r0,r0[0x0]
80009486:	92 f4       	ld.uh	r4,r9[0xe]

80009488 <ticks_to_seconds>:

float ticks_to_seconds(uint32_t timer_ticks){
80009488:	eb cd 40 c0 	pushm	r6-r7,lr
8000948c:	1a 97       	mov	r7,sp
8000948e:	20 1d       	sub	sp,4
80009490:	48 d6       	lddpc	r6,800094c4 <ticks_to_seconds+0x3c>
80009492:	1e 26       	rsub	r6,pc
80009494:	ef 4c ff fc 	st.w	r7[-4],r12
	return ((double)timer_ticks/(double)TK_AST_FREQUENCY);
80009498:	ee fc ff fc 	ld.w	r12,r7[-4]
8000949c:	f0 16 00 4d 	mcall	r6[308]
800094a0:	30 08       	mov	r8,0
800094a2:	e0 69 84 80 	mov	r9,33920
800094a6:	ea 19 41 2e 	orh	r9,0x412e
800094aa:	f0 16 00 0c 	mcall	r6[48]
800094ae:	14 98       	mov	r8,r10
800094b0:	16 99       	mov	r9,r11
800094b2:	10 9a       	mov	r10,r8
800094b4:	12 9b       	mov	r11,r9
800094b6:	f0 16 00 09 	mcall	r6[36]
800094ba:	18 98       	mov	r8,r12
}
800094bc:	10 9c       	mov	r12,r8
800094be:	2f fd       	sub	sp,-4
800094c0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800094c4:	80 00       	ld.sh	r0,r0[0x0]
800094c6:	93 16       	st.w	r9[0x4],r6

800094c8 <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
800094c8:	eb cd 40 c0 	pushm	r6-r7,lr
800094cc:	1a 97       	mov	r7,sp
800094ce:	20 6d       	sub	sp,24
800094d0:	49 e6       	lddpc	r6,80009548 <interpolate+0x80>
800094d2:	1e 26       	rsub	r6,pc
800094d4:	ef 4c ff f8 	st.w	r7[-8],r12
800094d8:	ef 4b ff f4 	st.w	r7[-12],r11
800094dc:	ef 4a ff f0 	st.w	r7[-16],r10
800094e0:	ef 49 ff ec 	st.w	r7[-20],r9
800094e4:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
800094e8:	ee f9 ff f4 	ld.w	r9,r7[-12]
800094ec:	ee f8 ff f0 	ld.w	r8,r7[-16]
800094f0:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
800094f4:	c0 41       	brne	800094fc <interpolate+0x34>
	{
		return y1;
800094f6:	ee f8 ff ec 	ld.w	r8,r7[-20]
800094fa:	c2 38       	rjmp	80009540 <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
800094fc:	ee f9 ff e8 	ld.w	r9,r7[-24]
80009500:	ee f8 ff ec 	ld.w	r8,r7[-20]
80009504:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80009508:	ee fa ff f8 	ld.w	r10,r7[-8]
8000950c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80009510:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80009514:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80009518:	ee fa ff f0 	ld.w	r10,r7[-16]
8000951c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80009520:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80009524:	12 9b       	mov	r11,r9
80009526:	10 9c       	mov	r12,r8
80009528:	f0 16 00 08 	mcall	r6[32]
8000952c:	18 98       	mov	r8,r12
8000952e:	10 99       	mov	r9,r8
80009530:	ee f8 ff ec 	ld.w	r8,r7[-20]
80009534:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80009538:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
8000953c:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
80009540:	10 9c       	mov	r12,r8
80009542:	2f ad       	sub	sp,-24
80009544:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80009548:	80 00       	ld.sh	r0,r0[0x0]
8000954a:	93 56       	st.w	r9[0x14],r6

8000954c <mav_array_memcpy>:

/*
  like memcpy(), but if src is NULL, do a memset to zero
*/
static void mav_array_memcpy(void *dest, const void *src, size_t n)
{
8000954c:	eb cd 40 c0 	pushm	r6-r7,lr
80009550:	1a 97       	mov	r7,sp
80009552:	20 3d       	sub	sp,12
80009554:	49 06       	lddpc	r6,80009594 <mav_array_memcpy+0x48>
80009556:	1e 26       	rsub	r6,pc
80009558:	ef 4c ff fc 	st.w	r7[-4],r12
8000955c:	ef 4b ff f8 	st.w	r7[-8],r11
80009560:	ef 4a ff f4 	st.w	r7[-12],r10
	if (src == NULL) {
80009564:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009568:	58 08       	cp.w	r8,0
8000956a:	c0 91       	brne	8000957c <mav_array_memcpy+0x30>
		memset(dest, 0, n);
8000956c:	ee fa ff f4 	ld.w	r10,r7[-12]
80009570:	30 0b       	mov	r11,0
80009572:	ee fc ff fc 	ld.w	r12,r7[-4]
80009576:	f0 16 00 2f 	mcall	r6[188]
8000957a:	c0 98       	rjmp	8000958c <mav_array_memcpy+0x40>
	} else {
		memcpy(dest, src, n);
8000957c:	ee fa ff f4 	ld.w	r10,r7[-12]
80009580:	ee fb ff f8 	ld.w	r11,r7[-8]
80009584:	ee fc ff fc 	ld.w	r12,r7[-4]
80009588:	f0 16 00 20 	mcall	r6[128]
	}
}
8000958c:	2f dd       	sub	sp,-12
8000958e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80009592:	00 00       	add	r0,r0
80009594:	80 00       	ld.sh	r0,r0[0x0]
80009596:	93 da       	st.w	r9[0x34],r10

80009598 <e_init>:

uint32_t timeLastGpsMsgEstimator;

//----------------------------INITIALISATION------------------------
void e_init()
{
80009598:	eb cd 40 c0 	pushm	r6-r7,lr
8000959c:	1a 97       	mov	r7,sp
8000959e:	fe f6 02 06 	ld.w	r6,pc[518]
800095a2:	1e 26       	rsub	r6,pc
	//board=get_board_hardware();
	centralData=get_central_data();
800095a4:	f0 16 00 31 	mcall	r6[196]
800095a8:	18 99       	mov	r9,r12
800095aa:	ec f8 00 00 	ld.w	r8,r6[0]
800095ae:	91 09       	st.w	r8[0x0],r9
	e_kalman_init(X,INIT_X_P); //e stands for estimator not extended
800095b0:	fc 1b 41 20 	movh	r11,0x4120
800095b4:	30 0c       	mov	r12,0
800095b6:	f0 16 00 b9 	mcall	r6[740]
	e_kalman_init(Y,INIT_Y_P);
800095ba:	fc 1b 41 20 	movh	r11,0x4120
800095be:	30 1c       	mov	r12,1
800095c0:	f0 16 00 b9 	mcall	r6[740]
	e_kalman_init(Z,INIT_Z_P);
800095c4:	fc 1b 41 20 	movh	r11,0x4120
800095c8:	30 2c       	mov	r12,2
800095ca:	f0 16 00 b9 	mcall	r6[740]
	Q[0][0]=Q_X0;
800095ce:	ec fa 00 d4 	ld.w	r10,r6[212]
800095d2:	e0 68 a9 fc 	mov	r8,43516
800095d6:	ea 18 d2 f1 	orh	r8,0xd2f1
800095da:	e0 69 62 4d 	mov	r9,25165
800095de:	ea 19 3f 50 	orh	r9,0x3f50
800095e2:	f4 e9 00 00 	st.d	r10[0],r8
	Q[0][1]=Q_X1;
800095e6:	ec fa 00 d4 	ld.w	r10,r6[212]
800095ea:	30 08       	mov	r8,0
800095ec:	30 09       	mov	r9,0
800095ee:	f4 e9 00 08 	st.d	r10[8],r8
	Q[0][2]=Q_X2;
800095f2:	ec fa 00 d4 	ld.w	r10,r6[212]
800095f6:	30 08       	mov	r8,0
800095f8:	30 09       	mov	r9,0
800095fa:	f4 e9 00 10 	st.d	r10[16],r8
	Q[1][0]=Q_Y0;
800095fe:	ec fa 00 d4 	ld.w	r10,r6[212]
80009602:	30 08       	mov	r8,0
80009604:	30 09       	mov	r9,0
80009606:	f4 e9 00 18 	st.d	r10[24],r8
	Q[1][1]=Q_Y1;
8000960a:	ec fa 00 d4 	ld.w	r10,r6[212]
8000960e:	e0 68 a9 fc 	mov	r8,43516
80009612:	ea 18 d2 f1 	orh	r8,0xd2f1
80009616:	e0 69 62 4d 	mov	r9,25165
8000961a:	ea 19 3f 50 	orh	r9,0x3f50
8000961e:	f4 e9 00 20 	st.d	r10[32],r8
	Q[1][2]=Q_Y2;
80009622:	ec fa 00 d4 	ld.w	r10,r6[212]
80009626:	30 08       	mov	r8,0
80009628:	30 09       	mov	r9,0
8000962a:	f4 e9 00 28 	st.d	r10[40],r8
	Q[2][0]=Q_Z0;
8000962e:	ec fa 00 d4 	ld.w	r10,r6[212]
80009632:	30 08       	mov	r8,0
80009634:	30 09       	mov	r9,0
80009636:	f4 e9 00 30 	st.d	r10[48],r8
	Q[2][1]=Q_Z1;
8000963a:	ec fa 00 d4 	ld.w	r10,r6[212]
8000963e:	30 08       	mov	r8,0
80009640:	30 09       	mov	r9,0
80009642:	f4 e9 00 38 	st.d	r10[56],r8
	Q[2][2]=Q_Z2;
80009646:	ec fa 00 d4 	ld.w	r10,r6[212]
8000964a:	e0 68 a9 fc 	mov	r8,43516
8000964e:	ea 18 d2 f1 	orh	r8,0xd2f1
80009652:	e0 69 62 4d 	mov	r9,25165
80009656:	ea 19 3f 50 	orh	r9,0x3f50
8000965a:	f4 e9 00 40 	st.d	r10[64],r8
	R[0]=R_X_POS;
8000965e:	ec fa 01 50 	ld.w	r10,r6[336]
80009662:	e0 68 b0 21 	mov	r8,45089
80009666:	ea 18 68 72 	orh	r8,0x6872
8000966a:	e0 69 ed 91 	mov	r9,60817
8000966e:	ea 19 3f d8 	orh	r9,0x3fd8
80009672:	f4 e9 00 00 	st.d	r10[0],r8
	R[1]=R_Y_POS;
80009676:	ec fa 01 50 	ld.w	r10,r6[336]
8000967a:	e0 68 a1 62 	mov	r8,41314
8000967e:	ea 18 34 d6 	orh	r8,0x34d6
80009682:	e0 69 38 ef 	mov	r9,14575
80009686:	ea 19 3f e3 	orh	r9,0x3fe3
8000968a:	f4 e9 00 08 	st.d	r10[8],r8
	R[2]=R_Z_POS;
8000968e:	ec fa 01 50 	ld.w	r10,r6[336]
80009692:	e0 68 6e 2f 	mov	r8,28207
80009696:	ea 18 01 a3 	orh	r8,0x1a3
8000969a:	e0 69 05 bc 	mov	r9,1468
8000969e:	ea 19 40 05 	orh	r9,0x4005
800096a2:	f4 e9 00 10 	st.d	r10[16],r8
	
	Q2[0][0]=Q_X0;
800096a6:	ec fa 00 d8 	ld.w	r10,r6[216]
800096aa:	e0 68 a9 fc 	mov	r8,43516
800096ae:	ea 18 d2 f1 	orh	r8,0xd2f1
800096b2:	e0 69 62 4d 	mov	r9,25165
800096b6:	ea 19 3f 50 	orh	r9,0x3f50
800096ba:	f4 e9 00 00 	st.d	r10[0],r8
	Q2[0][1]=Q_X1;
800096be:	ec fa 00 d8 	ld.w	r10,r6[216]
800096c2:	30 08       	mov	r8,0
800096c4:	30 09       	mov	r9,0
800096c6:	f4 e9 00 08 	st.d	r10[8],r8
	Q2[0][2]=Q_X2;
800096ca:	ec fa 00 d8 	ld.w	r10,r6[216]
800096ce:	30 08       	mov	r8,0
800096d0:	30 09       	mov	r9,0
800096d2:	f4 e9 00 10 	st.d	r10[16],r8
	Q2[1][0]=Q_Y0;
800096d6:	ec fa 00 d8 	ld.w	r10,r6[216]
800096da:	30 08       	mov	r8,0
800096dc:	30 09       	mov	r9,0
800096de:	f4 e9 00 18 	st.d	r10[24],r8
	Q2[1][1]=Q_Y1;
800096e2:	ec fa 00 d8 	ld.w	r10,r6[216]
800096e6:	e0 68 a9 fc 	mov	r8,43516
800096ea:	ea 18 d2 f1 	orh	r8,0xd2f1
800096ee:	e0 69 62 4d 	mov	r9,25165
800096f2:	ea 19 3f 50 	orh	r9,0x3f50
800096f6:	f4 e9 00 20 	st.d	r10[32],r8
	Q2[1][2]=Q_Y2;
800096fa:	ec fa 00 d8 	ld.w	r10,r6[216]
800096fe:	30 08       	mov	r8,0
80009700:	30 09       	mov	r9,0
80009702:	f4 e9 00 28 	st.d	r10[40],r8
	Q2[2][0]=Q_Z0;
80009706:	ec fa 00 d8 	ld.w	r10,r6[216]
8000970a:	30 08       	mov	r8,0
8000970c:	30 09       	mov	r9,0
8000970e:	f4 e9 00 30 	st.d	r10[48],r8
	Q2[2][1]=Q_Z1;
80009712:	ec fa 00 d8 	ld.w	r10,r6[216]
80009716:	30 08       	mov	r8,0
80009718:	30 09       	mov	r9,0
8000971a:	f4 e9 00 38 	st.d	r10[56],r8
	Q2[2][2]=Q_Z2;
8000971e:	ec fa 00 d8 	ld.w	r10,r6[216]
80009722:	e0 68 a9 fc 	mov	r8,43516
80009726:	ea 18 d2 f1 	orh	r8,0xd2f1
8000972a:	e0 69 62 4d 	mov	r9,25165
8000972e:	ea 19 3f 50 	orh	r9,0x3f50
80009732:	f4 e9 00 40 	st.d	r10[64],r8
	R2[0]=R_X_POS;
80009736:	ec fa 01 4c 	ld.w	r10,r6[332]
8000973a:	e0 68 b0 21 	mov	r8,45089
8000973e:	ea 18 68 72 	orh	r8,0x6872
80009742:	e0 69 ed 91 	mov	r9,60817
80009746:	ea 19 3f d8 	orh	r9,0x3fd8
8000974a:	f4 e9 00 00 	st.d	r10[0],r8
	R2[1]=R_Y_POS;
8000974e:	ec fa 01 4c 	ld.w	r10,r6[332]
80009752:	e0 68 a1 62 	mov	r8,41314
80009756:	ea 18 34 d6 	orh	r8,0x34d6
8000975a:	e0 69 38 ef 	mov	r9,14575
8000975e:	ea 19 3f e3 	orh	r9,0x3fe3
80009762:	f4 e9 00 08 	st.d	r10[8],r8
	R2[2]=R_Z_POS;
80009766:	ec fa 01 4c 	ld.w	r10,r6[332]
8000976a:	e0 68 6e 2f 	mov	r8,28207
8000976e:	ea 18 01 a3 	orh	r8,0x1a3
80009772:	e0 69 05 bc 	mov	r9,1468
80009776:	ea 19 40 05 	orh	r9,0x4005
8000977a:	f4 e9 00 10 	st.d	r10[16],r8
	
	centralData->position_estimator.init_gps_position = false;
8000977e:	ec f8 00 00 	ld.w	r8,r6[0]
80009782:	70 09       	ld.w	r9,r8[0x0]
80009784:	30 08       	mov	r8,0
80009786:	f3 68 0d 64 	st.b	r9[3428],r8
	
	timeLastGpsMsgEstimator = 0;
8000978a:	ec f8 02 6c 	ld.w	r8,r6[620]
8000978e:	30 09       	mov	r9,0
80009790:	91 09       	st.w	r8[0x0],r9
	
	filter_init_delta_t = false;
80009792:	ec f9 02 b0 	ld.w	r9,r6[688]
80009796:	30 08       	mov	r8,0
80009798:	b2 88       	st.b	r9[0x0],r8
	
	init_pos_gps_estimator();
8000979a:	f0 16 01 0b 	mcall	r6[1068]
}
8000979e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800097a2:	00 00       	add	r0,r0
800097a4:	80 00       	ld.sh	r0,r0[0x0]
800097a6:	94 26       	ld.sh	r6,r10[0x4]
800097a8:	47 50       	lddsp	r0,sp[0x1d4]
800097aa:	53 20       	stdsp	sp[0xc8],r0
800097ac:	70 6f       	ld.w	pc,r8[0x18]
800097ae:	73 69       	ld.w	r9,r9[0x58]
800097b0:	74 69       	ld.w	r9,r10[0x18]
800097b2:	6f 6e       	ld.w	lr,r7[0x58]
800097b4:	20 69       	sub	r9,6
800097b6:	6e 69       	ld.w	r9,r7[0x18]
800097b8:	74 69       	ld.w	r9,r10[0x18]
800097ba:	61 6c       	ld.w	r12,r0[0x58]
800097bc:	69 7a       	ld.w	r10,r4[0x5c]
800097be:	65 64       	ld.w	r4,r2[0x58]
800097c0:	21 0a       	sub	r10,16
	...

800097c4 <init_pos_gps_estimator>:

void init_pos_gps_estimator()
{
800097c4:	eb cd 40 c0 	pushm	r6-r7,lr
800097c8:	1a 97       	mov	r7,sp
800097ca:	49 f6       	lddpc	r6,80009844 <init_pos_gps_estimator+0x80>
800097cc:	1e 26       	rsub	r6,pc
	if (newValidGpsMsg(&timeLastGpsMsgEstimator) && (!(centralData->position_estimator.init_gps_position)))
800097ce:	ec fc 02 6c 	ld.w	r12,r6[620]
800097d2:	f0 16 00 8b 	mcall	r6[556]
800097d6:	18 98       	mov	r8,r12
800097d8:	58 08       	cp.w	r8,0
800097da:	c3 20       	breq	8000983e <init_pos_gps_estimator+0x7a>
800097dc:	ec f8 00 00 	ld.w	r8,r6[0]
800097e0:	70 08       	ld.w	r8,r8[0x0]
800097e2:	f1 38 0d 64 	ld.ub	r8,r8[3428]
800097e6:	ec 18 00 01 	eorl	r8,0x1
800097ea:	5c 58       	castu.b	r8
800097ec:	c2 90       	breq	8000983e <init_pos_gps_estimator+0x7a>
	{
		centralData->position_estimator.init_gps_position = true;
800097ee:	ec f8 00 00 	ld.w	r8,r6[0]
800097f2:	70 09       	ld.w	r9,r8[0x0]
800097f4:	30 18       	mov	r8,1
800097f6:	f3 68 0d 64 	st.b	r9[3428],r8
		
		centralData->position_estimator.localPosition.origin.longitude = centralData->GPS_data.longitude;
800097fa:	ec f8 00 00 	ld.w	r8,r6[0]
800097fe:	70 0a       	ld.w	r10,r8[0x0]
80009800:	ec f8 00 00 	ld.w	r8,r6[0]
80009804:	70 08       	ld.w	r8,r8[0x0]
80009806:	f0 e8 0b 10 	ld.d	r8,r8[2832]
8000980a:	f4 e9 0d ac 	st.d	r10[3500],r8
		centralData->position_estimator.localPosition.origin.latitude = centralData->GPS_data.latitude;
8000980e:	ec f8 00 00 	ld.w	r8,r6[0]
80009812:	70 0a       	ld.w	r10,r8[0x0]
80009814:	ec f8 00 00 	ld.w	r8,r6[0]
80009818:	70 08       	ld.w	r8,r8[0x0]
8000981a:	f0 e8 0b 08 	ld.d	r8,r8[2824]
8000981e:	f4 e9 0d b4 	st.d	r10[3508],r8
		centralData->position_estimator.localPosition.origin.altitude = centralData->GPS_data.altitude;
80009822:	ec f8 00 00 	ld.w	r8,r6[0]
80009826:	70 08       	ld.w	r8,r8[0x0]
80009828:	ec f9 00 00 	ld.w	r9,r6[0]
8000982c:	72 09       	ld.w	r9,r9[0x0]
8000982e:	f2 f9 0b 18 	ld.w	r9,r9[2840]
80009832:	f1 49 0d bc 	st.w	r8[3516],r9
		
		dbg_print("GPS position initialized!\n");
80009836:	fe cc 00 8e 	sub	r12,pc,142
8000983a:	f0 16 00 01 	mcall	r6[4]
	}
}
8000983e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80009842:	00 00       	add	r0,r0
80009844:	80 00       	ld.sh	r0,r0[0x0]
80009846:	96 50       	ld.sh	r0,r11[0xa]

80009848 <e_kalman_init>:

void e_kalman_init (int axis,float init_p) // axis = Z, X or Y
{
80009848:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
8000984c:	1a 97       	mov	r7,sp
8000984e:	20 4d       	sub	sp,16
80009850:	4d e6       	lddpc	r6,800099c8 <e_kalman_init+0x180>
80009852:	1e 26       	rsub	r6,pc
80009854:	ef 4c ff f4 	st.w	r7[-12],r12
80009858:	ef 4b ff f0 	st.w	r7[-16],r11
	int i, j;
	
	centralData->estimation.state[axis][POSITION] = 0; // Differential par rapport au point de depart
8000985c:	ec f8 00 00 	ld.w	r8,r6[0]
80009860:	70 0a       	ld.w	r10,r8[0x0]
80009862:	ee f9 ff f4 	ld.w	r9,r7[-12]
80009866:	12 98       	mov	r8,r9
80009868:	a1 78       	lsl	r8,0x1
8000986a:	12 08       	add	r8,r9
8000986c:	a3 78       	lsl	r8,0x3
8000986e:	f4 08 00 08 	add	r8,r10,r8
80009872:	f0 ca f4 a4 	sub	r10,r8,-2908
80009876:	30 08       	mov	r8,0
80009878:	30 09       	mov	r9,0
8000987a:	f4 e9 00 00 	st.d	r10[0],r8
	centralData->estimation.state[axis][SPEED] = 0;
8000987e:	ec f8 00 00 	ld.w	r8,r6[0]
80009882:	70 0a       	ld.w	r10,r8[0x0]
80009884:	ee f9 ff f4 	ld.w	r9,r7[-12]
80009888:	12 98       	mov	r8,r9
8000988a:	a1 78       	lsl	r8,0x1
8000988c:	12 08       	add	r8,r9
8000988e:	2f f8       	sub	r8,-1
80009890:	a3 78       	lsl	r8,0x3
80009892:	f4 08 00 08 	add	r8,r10,r8
80009896:	30 0a       	mov	r10,0
80009898:	30 0b       	mov	r11,0
8000989a:	f0 eb 0b 5c 	st.d	r8[2908],r10
	
	centralData->estimation.state[axis][BIAIS] = centralData->imu1.attitude.be[axis + ACC_OFFSET];
8000989e:	ec f8 00 00 	ld.w	r8,r6[0]
800098a2:	70 03       	ld.w	r3,r8[0x0]
800098a4:	ee f5 ff f4 	ld.w	r5,r7[-12]
800098a8:	ec f8 00 00 	ld.w	r8,r6[0]
800098ac:	70 08       	ld.w	r8,r8[0x0]
800098ae:	ee f9 ff f4 	ld.w	r9,r7[-12]
800098b2:	2f d9       	sub	r9,-3
800098b4:	2f 49       	sub	r9,-12
800098b6:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800098ba:	10 9c       	mov	r12,r8
800098bc:	f0 16 00 02 	mcall	r6[8]
800098c0:	0a 98       	mov	r8,r5
800098c2:	a1 78       	lsl	r8,0x1
800098c4:	0a 08       	add	r8,r5
800098c6:	a3 78       	lsl	r8,0x3
800098c8:	e6 08 00 08 	add	r8,r3,r8
800098cc:	f0 c8 f4 94 	sub	r8,r8,-2924
800098d0:	f0 eb 00 00 	st.d	r8[0],r10
	
	for (i=0; i<3; i++)
800098d4:	30 08       	mov	r8,0
800098d6:	ef 48 ff f8 	st.w	r7[-8],r8
800098da:	c6 e8       	rjmp	800099b6 <e_kalman_init+0x16e>
	{
		for (j=0; j<3; j++)
800098dc:	30 08       	mov	r8,0
800098de:	ef 48 ff fc 	st.w	r7[-4],r8
800098e2:	c3 28       	rjmp	80009946 <e_kalman_init+0xfe>
		{
			P[axis][i][j] = 0.0;
800098e4:	ee fa ff f4 	ld.w	r10,r7[-12]
800098e8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800098ec:	ee fc ff fc 	ld.w	r12,r7[-4]
800098f0:	ec fb 00 18 	ld.w	r11,r6[24]
800098f4:	10 99       	mov	r9,r8
800098f6:	a1 79       	lsl	r9,0x1
800098f8:	10 09       	add	r9,r8
800098fa:	14 98       	mov	r8,r10
800098fc:	a3 78       	lsl	r8,0x3
800098fe:	14 08       	add	r8,r10
80009900:	f2 08 00 08 	add	r8,r9,r8
80009904:	f0 0c 00 0a 	add	r10,r8,r12
80009908:	30 08       	mov	r8,0
8000990a:	30 09       	mov	r9,0
8000990c:	f6 0a 08 38 	st.d	r11[r10<<0x3],r8
			P2[axis][i][j] = 0.0;
80009910:	ee fa ff f4 	ld.w	r10,r7[-12]
80009914:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009918:	ee fc ff fc 	ld.w	r12,r7[-4]
8000991c:	ec fb 00 1c 	ld.w	r11,r6[28]
80009920:	10 99       	mov	r9,r8
80009922:	a1 79       	lsl	r9,0x1
80009924:	10 09       	add	r9,r8
80009926:	14 98       	mov	r8,r10
80009928:	a3 78       	lsl	r8,0x3
8000992a:	14 08       	add	r8,r10
8000992c:	f2 08 00 08 	add	r8,r9,r8
80009930:	f0 0c 00 0a 	add	r10,r8,r12
80009934:	30 08       	mov	r8,0
80009936:	30 09       	mov	r9,0
80009938:	f6 0a 08 38 	st.d	r11[r10<<0x3],r8
	
	centralData->estimation.state[axis][BIAIS] = centralData->imu1.attitude.be[axis + ACC_OFFSET];
	
	for (i=0; i<3; i++)
	{
		for (j=0; j<3; j++)
8000993c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009940:	2f f8       	sub	r8,-1
80009942:	ef 48 ff fc 	st.w	r7[-4],r8
80009946:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000994a:	58 28       	cp.w	r8,2
8000994c:	fe 9a ff cc 	brle	800098e4 <e_kalman_init+0x9c>
		{
			P[axis][i][j] = 0.0;
			P2[axis][i][j] = 0.0;
		}
		P[axis][i][i] = init_p;
80009950:	ee f5 ff f4 	ld.w	r5,r7[-12]
80009954:	ee f3 ff f8 	ld.w	r3,r7[-8]
80009958:	ee f2 ff f8 	ld.w	r2,r7[-8]
8000995c:	ee fc ff f0 	ld.w	r12,r7[-16]
80009960:	f0 16 00 02 	mcall	r6[8]
80009964:	ec fc 00 18 	ld.w	r12,r6[24]
80009968:	06 99       	mov	r9,r3
8000996a:	a1 79       	lsl	r9,0x1
8000996c:	06 09       	add	r9,r3
8000996e:	0a 98       	mov	r8,r5
80009970:	a3 78       	lsl	r8,0x3
80009972:	0a 08       	add	r8,r5
80009974:	f2 08 00 08 	add	r8,r9,r8
80009978:	04 08       	add	r8,r2
8000997a:	f8 08 08 3a 	st.d	r12[r8<<0x3],r10
		P2[axis][i][i] = init_p;
8000997e:	ee f5 ff f4 	ld.w	r5,r7[-12]
80009982:	ee f3 ff f8 	ld.w	r3,r7[-8]
80009986:	ee f2 ff f8 	ld.w	r2,r7[-8]
8000998a:	ee fc ff f0 	ld.w	r12,r7[-16]
8000998e:	f0 16 00 02 	mcall	r6[8]
80009992:	ec fc 00 1c 	ld.w	r12,r6[28]
80009996:	06 99       	mov	r9,r3
80009998:	a1 79       	lsl	r9,0x1
8000999a:	06 09       	add	r9,r3
8000999c:	0a 98       	mov	r8,r5
8000999e:	a3 78       	lsl	r8,0x3
800099a0:	0a 08       	add	r8,r5
800099a2:	f2 08 00 08 	add	r8,r9,r8
800099a6:	04 08       	add	r8,r2
800099a8:	f8 08 08 3a 	st.d	r12[r8<<0x3],r10
	centralData->estimation.state[axis][POSITION] = 0; // Differential par rapport au point de depart
	centralData->estimation.state[axis][SPEED] = 0;
	
	centralData->estimation.state[axis][BIAIS] = centralData->imu1.attitude.be[axis + ACC_OFFSET];
	
	for (i=0; i<3; i++)
800099ac:	ee f8 ff f8 	ld.w	r8,r7[-8]
800099b0:	2f f8       	sub	r8,-1
800099b2:	ef 48 ff f8 	st.w	r7[-8],r8
800099b6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800099ba:	58 28       	cp.w	r8,2
800099bc:	fe 9a ff 90 	brle	800098dc <e_kalman_init+0x94>
			P2[axis][i][j] = 0.0;
		}
		P[axis][i][i] = init_p;
		P2[axis][i][i] = init_p;
	}
}
800099c0:	2f cd       	sub	sp,-16
800099c2:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
800099c6:	00 00       	add	r0,r0
800099c8:	80 00       	ld.sh	r0,r0[0x0]
800099ca:	96 d6       	ld.uh	r6,r11[0xa]

800099cc <e_predict>:

//------------------------------PREDICTION--------------------------
void e_predict (UQuat_t *qe, float a[], float dt)
{
800099cc:	eb cd 40 c0 	pushm	r6-r7,lr
800099d0:	1a 97       	mov	r7,sp
800099d2:	21 9d       	sub	sp,100
800099d4:	fe f6 03 00 	ld.w	r6,pc[768]
800099d8:	1e 26       	rsub	r6,pc
800099da:	ef 4c ff a4 	st.w	r7[-92],r12
800099de:	ef 4b ff a0 	st.w	r7[-96],r11
800099e2:	ef 4a ff 9c 	st.w	r7[-100],r10
	//MUL_V_SCA(z,-a[2])
	//e_kalman_predict(X,(x[0]*x[0]+y[0]*y[0]+z[0]*z[0]),dt);//final x (in NED) acc
	//e_kalman_predict(Y,(x[1]*x[1]+y[1]*y[1]+z[1]*z[1]),dt);
	//e_kalman_predict(Z,(x[2]*x[2]+y[2]*y[2]+z[2]*z[2]),dt);
	
	qe_tmp = *qe;
800099e6:	ee f9 ff a4 	ld.w	r9,r7[-92]
800099ea:	ee c8 00 40 	sub	r8,r7,64
800099ee:	20 08       	sub	r8,0
800099f0:	20 09       	sub	r9,0
800099f2:	72 0a       	ld.w	r10,r9[0x0]
800099f4:	91 0a       	st.w	r8[0x0],r10
800099f6:	72 1a       	ld.w	r10,r9[0x4]
800099f8:	91 1a       	st.w	r8[0x4],r10
800099fa:	72 2a       	ld.w	r10,r9[0x8]
800099fc:	91 2a       	st.w	r8[0x8],r10
800099fe:	72 39       	ld.w	r9,r9[0xc]
80009a00:	91 39       	st.w	r8[0xc],r9
	
	// compute acceleration in global frame
	// acc_glo = qe * acc_bf * qe-1
	qtmp1.s=0.0; qtmp1.v[0]=a[0]; qtmp1.v[1]=a[1];qtmp1.v[2]=a[2];
80009a02:	30 08       	mov	r8,0
80009a04:	ef 48 ff f0 	st.w	r7[-16],r8
80009a08:	ee f8 ff a0 	ld.w	r8,r7[-96]
80009a0c:	70 08       	ld.w	r8,r8[0x0]
80009a0e:	ef 48 ff f4 	st.w	r7[-12],r8
80009a12:	ee f8 ff a0 	ld.w	r8,r7[-96]
80009a16:	2f c8       	sub	r8,-4
80009a18:	70 08       	ld.w	r8,r8[0x0]
80009a1a:	ef 48 ff f8 	st.w	r7[-8],r8
80009a1e:	ee f8 ff a0 	ld.w	r8,r7[-96]
80009a22:	2f 88       	sub	r8,-8
80009a24:	70 08       	ld.w	r8,r8[0x0]
80009a26:	ef 48 ff fc 	st.w	r7[-4],r8
	QMUL(qe_tmp,qtmp1,qtmp2);
80009a2a:	ee f9 ff c8 	ld.w	r9,r7[-56]
80009a2e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009a32:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80009a36:	ee fa ff cc 	ld.w	r10,r7[-52]
80009a3a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009a3e:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80009a42:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80009a46:	ef 48 ff b4 	st.w	r7[-76],r8
80009a4a:	ee f9 ff cc 	ld.w	r9,r7[-52]
80009a4e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80009a52:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80009a56:	ee fa ff c4 	ld.w	r10,r7[-60]
80009a5a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009a5e:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80009a62:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80009a66:	ef 48 ff b8 	st.w	r7[-72],r8
80009a6a:	ee f9 ff c4 	ld.w	r9,r7[-60]
80009a6e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009a72:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80009a76:	ee fa ff c8 	ld.w	r10,r7[-56]
80009a7a:	ee f8 ff f4 	ld.w	r8,r7[-12]
80009a7e:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80009a82:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80009a86:	ef 48 ff bc 	st.w	r7[-68],r8
80009a8a:	ee f9 ff f0 	ld.w	r9,r7[-16]
80009a8e:	ee f8 ff c4 	ld.w	r8,r7[-60]
80009a92:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80009a96:	ee fa ff c0 	ld.w	r10,r7[-64]
80009a9a:	ee f8 ff f4 	ld.w	r8,r7[-12]
80009a9e:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80009aa2:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80009aa6:	ee f8 ff b4 	ld.w	r8,r7[-76]
80009aaa:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80009aae:	ef 48 ff e4 	st.w	r7[-28],r8
80009ab2:	ee f9 ff f0 	ld.w	r9,r7[-16]
80009ab6:	ee f8 ff c8 	ld.w	r8,r7[-56]
80009aba:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80009abe:	ee fa ff c0 	ld.w	r10,r7[-64]
80009ac2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009ac6:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80009aca:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80009ace:	ee f8 ff b8 	ld.w	r8,r7[-72]
80009ad2:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80009ad6:	ef 48 ff e8 	st.w	r7[-24],r8
80009ada:	ee f9 ff f0 	ld.w	r9,r7[-16]
80009ade:	ee f8 ff cc 	ld.w	r8,r7[-52]
80009ae2:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80009ae6:	ee fa ff c0 	ld.w	r10,r7[-64]
80009aea:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009aee:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80009af2:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80009af6:	ee f8 ff bc 	ld.w	r8,r7[-68]
80009afa:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80009afe:	ef 48 ff ec 	st.w	r7[-20],r8
80009b02:	ee f9 ff c0 	ld.w	r9,r7[-64]
80009b06:	ee f8 ff f0 	ld.w	r8,r7[-16]
80009b0a:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80009b0e:	ee fa ff c4 	ld.w	r10,r7[-60]
80009b12:	ee f8 ff f4 	ld.w	r8,r7[-12]
80009b16:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
80009b1a:	ee fb ff c8 	ld.w	r11,r7[-56]
80009b1e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009b22:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
80009b26:	e5 a0 0a a8 	cop	cp0,cr10,cr10,cr8,0x40
80009b2a:	ee fb ff cc 	ld.w	r11,r7[-52]
80009b2e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009b32:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
80009b36:	e5 a0 08 a8 	cop	cp0,cr8,cr10,cr8,0x40
80009b3a:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80009b3e:	ef 48 ff e0 	st.w	r7[-32],r8
	QI(qe_tmp,qtmp1);
80009b42:	ee f8 ff c0 	ld.w	r8,r7[-64]
80009b46:	ef 48 ff f0 	st.w	r7[-16],r8
80009b4a:	ee f8 ff c4 	ld.w	r8,r7[-60]
80009b4e:	ee 18 80 00 	eorh	r8,0x8000
80009b52:	ef 48 ff f4 	st.w	r7[-12],r8
80009b56:	ee f8 ff c8 	ld.w	r8,r7[-56]
80009b5a:	ee 18 80 00 	eorh	r8,0x8000
80009b5e:	ef 48 ff f8 	st.w	r7[-8],r8
80009b62:	ee f8 ff cc 	ld.w	r8,r7[-52]
80009b66:	ee 18 80 00 	eorh	r8,0x8000
80009b6a:	ef 48 ff fc 	st.w	r7[-4],r8
	QMUL(qtmp2,qtmp1,qtmp3);
80009b6e:	ee f9 ff e8 	ld.w	r9,r7[-24]
80009b72:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009b76:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80009b7a:	ee fa ff ec 	ld.w	r10,r7[-20]
80009b7e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009b82:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80009b86:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80009b8a:	ef 48 ff b4 	st.w	r7[-76],r8
80009b8e:	ee f9 ff ec 	ld.w	r9,r7[-20]
80009b92:	ee f8 ff f4 	ld.w	r8,r7[-12]
80009b96:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80009b9a:	ee fa ff e4 	ld.w	r10,r7[-28]
80009b9e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009ba2:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80009ba6:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80009baa:	ef 48 ff b8 	st.w	r7[-72],r8
80009bae:	ee f9 ff e4 	ld.w	r9,r7[-28]
80009bb2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009bb6:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80009bba:	ee fa ff e8 	ld.w	r10,r7[-24]
80009bbe:	ee f8 ff f4 	ld.w	r8,r7[-12]
80009bc2:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80009bc6:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80009bca:	ef 48 ff bc 	st.w	r7[-68],r8
80009bce:	ee f9 ff f0 	ld.w	r9,r7[-16]
80009bd2:	ee f8 ff e4 	ld.w	r8,r7[-28]
80009bd6:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80009bda:	ee fa ff e0 	ld.w	r10,r7[-32]
80009bde:	ee f8 ff f4 	ld.w	r8,r7[-12]
80009be2:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80009be6:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80009bea:	ee f8 ff b4 	ld.w	r8,r7[-76]
80009bee:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80009bf2:	ef 48 ff d4 	st.w	r7[-44],r8
80009bf6:	ee f9 ff f0 	ld.w	r9,r7[-16]
80009bfa:	ee f8 ff e8 	ld.w	r8,r7[-24]
80009bfe:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80009c02:	ee fa ff e0 	ld.w	r10,r7[-32]
80009c06:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009c0a:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80009c0e:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80009c12:	ee f8 ff b8 	ld.w	r8,r7[-72]
80009c16:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80009c1a:	ef 48 ff d8 	st.w	r7[-40],r8
80009c1e:	ee f9 ff f0 	ld.w	r9,r7[-16]
80009c22:	ee f8 ff ec 	ld.w	r8,r7[-20]
80009c26:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80009c2a:	ee fa ff e0 	ld.w	r10,r7[-32]
80009c2e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009c32:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80009c36:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80009c3a:	ee f8 ff bc 	ld.w	r8,r7[-68]
80009c3e:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80009c42:	ef 48 ff dc 	st.w	r7[-36],r8
80009c46:	ee f9 ff e0 	ld.w	r9,r7[-32]
80009c4a:	ee f8 ff f0 	ld.w	r8,r7[-16]
80009c4e:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80009c52:	ee fa ff e4 	ld.w	r10,r7[-28]
80009c56:	ee f8 ff f4 	ld.w	r8,r7[-12]
80009c5a:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
80009c5e:	ee fb ff e8 	ld.w	r11,r7[-24]
80009c62:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009c66:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
80009c6a:	e5 a0 0a a8 	cop	cp0,cr10,cr10,cr8,0x40
80009c6e:	ee fb ff ec 	ld.w	r11,r7[-20]
80009c72:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009c76:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
80009c7a:	e5 a0 08 a8 	cop	cp0,cr8,cr10,cr8,0x40
80009c7e:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80009c82:	ef 48 ff d0 	st.w	r7[-48],r8
	acc_glo[0]=qtmp3.v[0];acc_glo[1]=qtmp3.v[1];acc_glo[2]=qtmp3.v[2];
80009c86:	ee f8 ff d4 	ld.w	r8,r7[-44]
80009c8a:	ef 48 ff a8 	st.w	r7[-88],r8
80009c8e:	ee f8 ff d8 	ld.w	r8,r7[-40]
80009c92:	ef 48 ff ac 	st.w	r7[-84],r8
80009c96:	ee f8 ff dc 	ld.w	r8,r7[-36]
80009c9a:	ef 48 ff b0 	st.w	r7[-80],r8
	//dbg_print_num(centralData->imu1.attitude.a[X]*1000,10);
	//dbg_print_num(centralData->imu1.attitude.a[Y]*1000,10);
	//dbg_print_num(centralData->imu1.attitude.a[Z]*1000,10);
	//dbg_print("\n");

	e_kalman_predict(X,acc_glo[X],dt);//final x (in NED) acc
80009c9e:	ee f8 ff a8 	ld.w	r8,r7[-88]
80009ca2:	ee fa ff 9c 	ld.w	r10,r7[-100]
80009ca6:	10 9b       	mov	r11,r8
80009ca8:	30 0c       	mov	r12,0
80009caa:	f0 16 00 be 	mcall	r6[760]
	e_kalman_predict(Y,acc_glo[Y],dt);
80009cae:	ee f8 ff ac 	ld.w	r8,r7[-84]
80009cb2:	ee fa ff 9c 	ld.w	r10,r7[-100]
80009cb6:	10 9b       	mov	r11,r8
80009cb8:	30 1c       	mov	r12,1
80009cba:	f0 16 00 be 	mcall	r6[760]
	//e_kalman_predict_hf(X,acc_glo[X],dt);//final x (in NED) acc
	//e_kalman_predict_hf(Y,acc_glo[Y],dt);
	e_kalman_predict(Z,acc_glo[Z],dt);
80009cbe:	ee f8 ff b0 	ld.w	r8,r7[-80]
80009cc2:	ee fa ff 9c 	ld.w	r10,r7[-100]
80009cc6:	10 9b       	mov	r11,r8
80009cc8:	30 2c       	mov	r12,2
80009cca:	f0 16 00 be 	mcall	r6[760]
}
80009cce:	2e 7d       	sub	sp,-100
80009cd0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80009cd4:	80 00       	ld.sh	r0,r0[0x0]
80009cd6:	98 5c       	ld.sh	r12,r12[0xa]

80009cd8 <quat_rot>:

//Rotation of vector vect with the quaternion quat
void quat_rot(UQuat_t *quat,float *vect)
{
80009cd8:	eb cd 40 80 	pushm	r7,lr
80009cdc:	1a 97       	mov	r7,sp
80009cde:	20 8d       	sub	sp,32
80009ce0:	ef 4c ff e4 	st.w	r7[-28],r12
80009ce4:	ef 4b ff e0 	st.w	r7[-32],r11
	float temp1[3],temp2[3];
	CP((*quat).v,vect,temp1);
80009ce8:	ee f8 ff e4 	ld.w	r8,r7[-28]
80009cec:	70 29       	ld.w	r9,r8[0x8]
80009cee:	ee f8 ff e0 	ld.w	r8,r7[-32]
80009cf2:	2f 88       	sub	r8,-8
80009cf4:	70 08       	ld.w	r8,r8[0x0]
80009cf6:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80009cfa:	ee f8 ff e4 	ld.w	r8,r7[-28]
80009cfe:	70 3a       	ld.w	r10,r8[0xc]
80009d00:	ee f8 ff e0 	ld.w	r8,r7[-32]
80009d04:	2f c8       	sub	r8,-4
80009d06:	70 08       	ld.w	r8,r8[0x0]
80009d08:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80009d0c:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80009d10:	ef 48 ff f4 	st.w	r7[-12],r8
80009d14:	ee f8 ff e4 	ld.w	r8,r7[-28]
80009d18:	70 39       	ld.w	r9,r8[0xc]
80009d1a:	ee f8 ff e0 	ld.w	r8,r7[-32]
80009d1e:	70 08       	ld.w	r8,r8[0x0]
80009d20:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80009d24:	ee f8 ff e4 	ld.w	r8,r7[-28]
80009d28:	70 1a       	ld.w	r10,r8[0x4]
80009d2a:	ee f8 ff e0 	ld.w	r8,r7[-32]
80009d2e:	2f 88       	sub	r8,-8
80009d30:	70 08       	ld.w	r8,r8[0x0]
80009d32:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80009d36:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80009d3a:	ef 48 ff f8 	st.w	r7[-8],r8
80009d3e:	ee f8 ff e4 	ld.w	r8,r7[-28]
80009d42:	70 19       	ld.w	r9,r8[0x4]
80009d44:	ee f8 ff e0 	ld.w	r8,r7[-32]
80009d48:	2f c8       	sub	r8,-4
80009d4a:	70 08       	ld.w	r8,r8[0x0]
80009d4c:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80009d50:	ee f8 ff e4 	ld.w	r8,r7[-28]
80009d54:	70 2a       	ld.w	r10,r8[0x8]
80009d56:	ee f8 ff e0 	ld.w	r8,r7[-32]
80009d5a:	70 08       	ld.w	r8,r8[0x0]
80009d5c:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80009d60:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80009d64:	ef 48 ff fc 	st.w	r7[-4],r8
	temp1[0]=temp1[0]+(*quat).s*vect[0];
80009d68:	ee f9 ff f4 	ld.w	r9,r7[-12]
80009d6c:	ee f8 ff e4 	ld.w	r8,r7[-28]
80009d70:	70 0a       	ld.w	r10,r8[0x0]
80009d72:	ee f8 ff e0 	ld.w	r8,r7[-32]
80009d76:	70 08       	ld.w	r8,r8[0x0]
80009d78:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80009d7c:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80009d80:	ef 48 ff f4 	st.w	r7[-12],r8
	temp1[1]=temp1[1]+(*quat).s*vect[1];
80009d84:	ee f9 ff f8 	ld.w	r9,r7[-8]
80009d88:	ee f8 ff e4 	ld.w	r8,r7[-28]
80009d8c:	70 0a       	ld.w	r10,r8[0x0]
80009d8e:	ee f8 ff e0 	ld.w	r8,r7[-32]
80009d92:	2f c8       	sub	r8,-4
80009d94:	70 08       	ld.w	r8,r8[0x0]
80009d96:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80009d9a:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80009d9e:	ef 48 ff f8 	st.w	r7[-8],r8
	temp1[2]=temp1[2]+(*quat).s*vect[2];
80009da2:	ee f9 ff fc 	ld.w	r9,r7[-4]
80009da6:	ee f8 ff e4 	ld.w	r8,r7[-28]
80009daa:	70 0a       	ld.w	r10,r8[0x0]
80009dac:	ee f8 ff e0 	ld.w	r8,r7[-32]
80009db0:	2f 88       	sub	r8,-8
80009db2:	70 08       	ld.w	r8,r8[0x0]
80009db4:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80009db8:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80009dbc:	ef 48 ff fc 	st.w	r7[-4],r8
	CP((*quat).v,temp1,temp2);
80009dc0:	ee f8 ff e4 	ld.w	r8,r7[-28]
80009dc4:	70 29       	ld.w	r9,r8[0x8]
80009dc6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009dca:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80009dce:	ee f8 ff e4 	ld.w	r8,r7[-28]
80009dd2:	70 3a       	ld.w	r10,r8[0xc]
80009dd4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009dd8:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80009ddc:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80009de0:	ef 48 ff e8 	st.w	r7[-24],r8
80009de4:	ee f8 ff e4 	ld.w	r8,r7[-28]
80009de8:	70 39       	ld.w	r9,r8[0xc]
80009dea:	ee f8 ff f4 	ld.w	r8,r7[-12]
80009dee:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80009df2:	ee f8 ff e4 	ld.w	r8,r7[-28]
80009df6:	70 1a       	ld.w	r10,r8[0x4]
80009df8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009dfc:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80009e00:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80009e04:	ef 48 ff ec 	st.w	r7[-20],r8
80009e08:	ee f8 ff e4 	ld.w	r8,r7[-28]
80009e0c:	70 19       	ld.w	r9,r8[0x4]
80009e0e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009e12:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80009e16:	ee f8 ff e4 	ld.w	r8,r7[-28]
80009e1a:	70 2a       	ld.w	r10,r8[0x8]
80009e1c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80009e20:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80009e24:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80009e28:	ef 48 ff f0 	st.w	r7[-16],r8
	vect[0]= vect[0]+temp2[0]+temp2[0];
80009e2c:	ee f8 ff e0 	ld.w	r8,r7[-32]
80009e30:	70 09       	ld.w	r9,r8[0x0]
80009e32:	ee f8 ff e8 	ld.w	r8,r7[-24]
80009e36:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80009e3a:	ee f8 ff e8 	ld.w	r8,r7[-24]
80009e3e:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80009e42:	ee f8 ff e0 	ld.w	r8,r7[-32]
80009e46:	91 09       	st.w	r8[0x0],r9
	vect[1]= vect[1]+temp2[1]+temp2[1];
80009e48:	ee f8 ff e0 	ld.w	r8,r7[-32]
80009e4c:	2f c8       	sub	r8,-4
80009e4e:	ee f9 ff e0 	ld.w	r9,r7[-32]
80009e52:	2f c9       	sub	r9,-4
80009e54:	72 0a       	ld.w	r10,r9[0x0]
80009e56:	ee f9 ff ec 	ld.w	r9,r7[-20]
80009e5a:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
80009e5e:	ee f9 ff ec 	ld.w	r9,r7[-20]
80009e62:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
80009e66:	91 09       	st.w	r8[0x0],r9
	vect[2]= vect[2]+temp2[2]+temp2[2];
80009e68:	ee f8 ff e0 	ld.w	r8,r7[-32]
80009e6c:	2f 88       	sub	r8,-8
80009e6e:	ee f9 ff e0 	ld.w	r9,r7[-32]
80009e72:	2f 89       	sub	r9,-8
80009e74:	72 0a       	ld.w	r10,r9[0x0]
80009e76:	ee f9 ff f0 	ld.w	r9,r7[-16]
80009e7a:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
80009e7e:	ee f9 ff f0 	ld.w	r9,r7[-16]
80009e82:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
80009e86:	91 09       	st.w	r8[0x0],r9
}
80009e88:	2f 8d       	sub	sp,-32
80009e8a:	e3 cd 80 80 	ldm	sp++,r7,pc

80009e8e <e_kalman_predict>:

Pk1 = F * Pk0 * F' + Q;

*/
void e_kalman_predict (int axis, float accel_meas, float dt)
{
80009e8e:	d4 31       	pushm	r0-r7,lr
80009e90:	1a 97       	mov	r7,sp
80009e92:	fa cd 00 cc 	sub	sp,sp,204
80009e96:	fe f6 0d 02 	ld.w	r6,pc[3330]
80009e9a:	1e 26       	rsub	r6,pc
80009e9c:	ef 4c ff ac 	st.w	r7[-84],r12
80009ea0:	ef 4b ff a8 	st.w	r7[-88],r11
80009ea4:	ef 4a ff a4 	st.w	r7[-92],r10
	/* update state */

	//centralData->estimation.state[axis][SPEED] = centralData->estimation.state[axis][SPEED]*(1.0-(VEL_DECAY*dt)) + dt * accel_meas;
	//centralData->estimation.state[axis][POSITION] = centralData->estimation.state[axis][POSITION]*(1.0-(POS_DECAY*dt)) + dt * centralData->estimation.state[axis][SPEED];
	
	centralData->estimation.state[axis][SPEED] = centralData->estimation.state[axis][SPEED] + dt * accel_meas;
80009ea8:	ec f8 00 00 	ld.w	r8,r6[0]
80009eac:	70 01       	ld.w	r1,r8[0x0]
80009eae:	ee f5 ff ac 	ld.w	r5,r7[-84]
80009eb2:	ec f8 00 00 	ld.w	r8,r6[0]
80009eb6:	70 0a       	ld.w	r10,r8[0x0]
80009eb8:	ee f9 ff ac 	ld.w	r9,r7[-84]
80009ebc:	12 98       	mov	r8,r9
80009ebe:	a1 78       	lsl	r8,0x1
80009ec0:	12 08       	add	r8,r9
80009ec2:	2f f8       	sub	r8,-1
80009ec4:	a3 78       	lsl	r8,0x3
80009ec6:	f4 08 00 08 	add	r8,r10,r8
80009eca:	f0 e2 0b 5c 	ld.d	r2,r8[2908]
80009ece:	ee f9 ff a4 	ld.w	r9,r7[-92]
80009ed2:	ee f8 ff a8 	ld.w	r8,r7[-88]
80009ed6:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80009eda:	10 9c       	mov	r12,r8
80009edc:	f0 16 00 02 	mcall	r6[8]
80009ee0:	14 98       	mov	r8,r10
80009ee2:	16 99       	mov	r9,r11
80009ee4:	04 9a       	mov	r10,r2
80009ee6:	06 9b       	mov	r11,r3
80009ee8:	f0 16 00 05 	mcall	r6[20]
80009eec:	14 98       	mov	r8,r10
80009eee:	16 99       	mov	r9,r11
80009ef0:	10 9a       	mov	r10,r8
80009ef2:	12 9b       	mov	r11,r9
80009ef4:	0a 98       	mov	r8,r5
80009ef6:	a1 78       	lsl	r8,0x1
80009ef8:	0a 08       	add	r8,r5
80009efa:	2f f8       	sub	r8,-1
80009efc:	a3 78       	lsl	r8,0x3
80009efe:	e2 08 00 08 	add	r8,r1,r8
80009f02:	f0 eb 0b 5c 	st.d	r8[2908],r10
	centralData->estimation.state[axis][POSITION] = centralData->estimation.state[axis][POSITION] + dt * centralData->estimation.state[axis][SPEED];
80009f06:	ec f8 00 00 	ld.w	r8,r6[0]
80009f0a:	70 01       	ld.w	r1,r8[0x0]
80009f0c:	ee f5 ff ac 	ld.w	r5,r7[-84]
80009f10:	ec f8 00 00 	ld.w	r8,r6[0]
80009f14:	70 0a       	ld.w	r10,r8[0x0]
80009f16:	ee f9 ff ac 	ld.w	r9,r7[-84]
80009f1a:	12 98       	mov	r8,r9
80009f1c:	a1 78       	lsl	r8,0x1
80009f1e:	12 08       	add	r8,r9
80009f20:	a3 78       	lsl	r8,0x3
80009f22:	f4 08 00 08 	add	r8,r10,r8
80009f26:	f0 c8 f4 a4 	sub	r8,r8,-2908
80009f2a:	f0 e2 00 00 	ld.d	r2,r8[0]
80009f2e:	ee fc ff a4 	ld.w	r12,r7[-92]
80009f32:	f0 16 00 02 	mcall	r6[8]
80009f36:	ec f8 00 00 	ld.w	r8,r6[0]
80009f3a:	70 0c       	ld.w	r12,r8[0x0]
80009f3c:	ee f9 ff ac 	ld.w	r9,r7[-84]
80009f40:	12 98       	mov	r8,r9
80009f42:	a1 78       	lsl	r8,0x1
80009f44:	12 08       	add	r8,r9
80009f46:	2f f8       	sub	r8,-1
80009f48:	a3 78       	lsl	r8,0x3
80009f4a:	f8 08 00 08 	add	r8,r12,r8
80009f4e:	f0 e8 0b 5c 	ld.d	r8,r8[2908]
80009f52:	f0 16 00 03 	mcall	r6[12]
80009f56:	14 98       	mov	r8,r10
80009f58:	16 99       	mov	r9,r11
80009f5a:	04 9a       	mov	r10,r2
80009f5c:	06 9b       	mov	r11,r3
80009f5e:	f0 16 00 05 	mcall	r6[20]
80009f62:	14 98       	mov	r8,r10
80009f64:	16 99       	mov	r9,r11
80009f66:	10 9a       	mov	r10,r8
80009f68:	12 9b       	mov	r11,r9
80009f6a:	0a 98       	mov	r8,r5
80009f6c:	a1 78       	lsl	r8,0x1
80009f6e:	0a 08       	add	r8,r5
80009f70:	a3 78       	lsl	r8,0x3
80009f72:	e2 08 00 08 	add	r8,r1,r8
80009f76:	f0 c8 f4 a4 	sub	r8,r8,-2908
80009f7a:	f0 eb 00 00 	st.d	r8[0],r10
	//centralData->estimation.state[axis][SPEED] = centralData->position_estimator.vel[axis];
	
	
	/* update covariance */
	// F*P*F' calculation
	FPF00 = P[axis][0][0] + dt * ( P[axis][1][0] + P[axis][0][1] + dt * P[axis][1][1] );
80009f7e:	ee f9 ff ac 	ld.w	r9,r7[-84]
80009f82:	ec fa 00 18 	ld.w	r10,r6[24]
80009f86:	12 98       	mov	r8,r9
80009f88:	a3 78       	lsl	r8,0x3
80009f8a:	12 08       	add	r8,r9
80009f8c:	a3 78       	lsl	r8,0x3
80009f8e:	f4 08 00 08 	add	r8,r10,r8
80009f92:	f0 ea 00 00 	ld.d	r10,r8[0]
80009f96:	ee eb ff 34 	st.d	r7[-204],r10
80009f9a:	ee fc ff a4 	ld.w	r12,r7[-92]
80009f9e:	f0 16 00 02 	mcall	r6[8]
80009fa2:	14 90       	mov	r0,r10
80009fa4:	16 91       	mov	r1,r11
80009fa6:	ee f9 ff ac 	ld.w	r9,r7[-84]
80009faa:	ec fa 00 18 	ld.w	r10,r6[24]
80009fae:	12 98       	mov	r8,r9
80009fb0:	a3 78       	lsl	r8,0x3
80009fb2:	12 08       	add	r8,r9
80009fb4:	a3 78       	lsl	r8,0x3
80009fb6:	f4 08 00 08 	add	r8,r10,r8
80009fba:	2e 88       	sub	r8,-24
80009fbc:	f0 ea 00 00 	ld.d	r10,r8[0]
80009fc0:	ee f9 ff ac 	ld.w	r9,r7[-84]
80009fc4:	ec fc 00 18 	ld.w	r12,r6[24]
80009fc8:	12 98       	mov	r8,r9
80009fca:	a3 78       	lsl	r8,0x3
80009fcc:	12 08       	add	r8,r9
80009fce:	2f f8       	sub	r8,-1
80009fd0:	f8 08 02 38 	ld.d	r8,r12[r8<<0x3]
80009fd4:	f0 16 00 05 	mcall	r6[20]
80009fd8:	14 98       	mov	r8,r10
80009fda:	16 99       	mov	r9,r11
80009fdc:	10 92       	mov	r2,r8
80009fde:	12 93       	mov	r3,r9
80009fe0:	ee fc ff a4 	ld.w	r12,r7[-92]
80009fe4:	f0 16 00 02 	mcall	r6[8]
80009fe8:	ee f9 ff ac 	ld.w	r9,r7[-84]
80009fec:	ec fc 00 18 	ld.w	r12,r6[24]
80009ff0:	12 98       	mov	r8,r9
80009ff2:	a3 78       	lsl	r8,0x3
80009ff4:	12 08       	add	r8,r9
80009ff6:	a3 78       	lsl	r8,0x3
80009ff8:	f8 08 00 08 	add	r8,r12,r8
80009ffc:	2e 08       	sub	r8,-32
80009ffe:	f0 e8 00 00 	ld.d	r8,r8[0]
8000a002:	f0 16 00 03 	mcall	r6[12]
8000a006:	14 98       	mov	r8,r10
8000a008:	16 99       	mov	r9,r11
8000a00a:	04 9a       	mov	r10,r2
8000a00c:	06 9b       	mov	r11,r3
8000a00e:	f0 16 00 05 	mcall	r6[20]
8000a012:	14 98       	mov	r8,r10
8000a014:	16 99       	mov	r9,r11
8000a016:	00 9a       	mov	r10,r0
8000a018:	02 9b       	mov	r11,r1
8000a01a:	f0 16 00 03 	mcall	r6[12]
8000a01e:	14 98       	mov	r8,r10
8000a020:	16 99       	mov	r9,r11
8000a022:	ee ea ff 34 	ld.d	r10,r7[-204]
8000a026:	f0 16 00 05 	mcall	r6[20]
8000a02a:	14 98       	mov	r8,r10
8000a02c:	16 99       	mov	r9,r11
8000a02e:	ee e9 ff b8 	st.d	r7[-72],r8
	FPF01 = P[axis][0][1] + dt * ( P[axis][1][1] - P[axis][0][2] - dt * P[axis][1][2] );
8000a032:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000a036:	ec fa 00 18 	ld.w	r10,r6[24]
8000a03a:	12 98       	mov	r8,r9
8000a03c:	a3 78       	lsl	r8,0x3
8000a03e:	12 08       	add	r8,r9
8000a040:	2f f8       	sub	r8,-1
8000a042:	f4 08 02 34 	ld.d	r4,r10[r8<<0x3]
8000a046:	ee e5 ff 3c 	st.d	r7[-196],r4
8000a04a:	ee fc ff a4 	ld.w	r12,r7[-92]
8000a04e:	f0 16 00 02 	mcall	r6[8]
8000a052:	14 90       	mov	r0,r10
8000a054:	16 91       	mov	r1,r11
8000a056:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000a05a:	ec fa 00 18 	ld.w	r10,r6[24]
8000a05e:	12 98       	mov	r8,r9
8000a060:	a3 78       	lsl	r8,0x3
8000a062:	12 08       	add	r8,r9
8000a064:	a3 78       	lsl	r8,0x3
8000a066:	f4 08 00 08 	add	r8,r10,r8
8000a06a:	2e 08       	sub	r8,-32
8000a06c:	f0 ea 00 00 	ld.d	r10,r8[0]
8000a070:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000a074:	ec fc 00 18 	ld.w	r12,r6[24]
8000a078:	12 98       	mov	r8,r9
8000a07a:	a3 78       	lsl	r8,0x3
8000a07c:	12 08       	add	r8,r9
8000a07e:	a3 78       	lsl	r8,0x3
8000a080:	f8 08 00 08 	add	r8,r12,r8
8000a084:	2f 08       	sub	r8,-16
8000a086:	f0 e8 00 00 	ld.d	r8,r8[0]
8000a08a:	f0 16 00 11 	mcall	r6[68]
8000a08e:	14 98       	mov	r8,r10
8000a090:	16 99       	mov	r9,r11
8000a092:	10 92       	mov	r2,r8
8000a094:	12 93       	mov	r3,r9
8000a096:	ee fc ff a4 	ld.w	r12,r7[-92]
8000a09a:	f0 16 00 02 	mcall	r6[8]
8000a09e:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000a0a2:	ec fc 00 18 	ld.w	r12,r6[24]
8000a0a6:	12 98       	mov	r8,r9
8000a0a8:	a3 78       	lsl	r8,0x3
8000a0aa:	12 08       	add	r8,r9
8000a0ac:	a3 78       	lsl	r8,0x3
8000a0ae:	f8 08 00 08 	add	r8,r12,r8
8000a0b2:	2d 88       	sub	r8,-40
8000a0b4:	f0 e8 00 00 	ld.d	r8,r8[0]
8000a0b8:	f0 16 00 03 	mcall	r6[12]
8000a0bc:	14 98       	mov	r8,r10
8000a0be:	16 99       	mov	r9,r11
8000a0c0:	04 9a       	mov	r10,r2
8000a0c2:	06 9b       	mov	r11,r3
8000a0c4:	f0 16 00 11 	mcall	r6[68]
8000a0c8:	14 98       	mov	r8,r10
8000a0ca:	16 99       	mov	r9,r11
8000a0cc:	00 9a       	mov	r10,r0
8000a0ce:	02 9b       	mov	r11,r1
8000a0d0:	f0 16 00 03 	mcall	r6[12]
8000a0d4:	14 98       	mov	r8,r10
8000a0d6:	16 99       	mov	r9,r11
8000a0d8:	ee ea ff 3c 	ld.d	r10,r7[-196]
8000a0dc:	f0 16 00 05 	mcall	r6[20]
8000a0e0:	14 98       	mov	r8,r10
8000a0e2:	16 99       	mov	r9,r11
8000a0e4:	ee e9 ff c0 	st.d	r7[-64],r8
	FPF02 = P[axis][0][2] + dt * ( P[axis][1][2] );
8000a0e8:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000a0ec:	ec fa 00 18 	ld.w	r10,r6[24]
8000a0f0:	12 98       	mov	r8,r9
8000a0f2:	a3 78       	lsl	r8,0x3
8000a0f4:	12 08       	add	r8,r9
8000a0f6:	a3 78       	lsl	r8,0x3
8000a0f8:	f4 08 00 08 	add	r8,r10,r8
8000a0fc:	2f 08       	sub	r8,-16
8000a0fe:	f0 e2 00 00 	ld.d	r2,r8[0]
8000a102:	ee fc ff a4 	ld.w	r12,r7[-92]
8000a106:	f0 16 00 02 	mcall	r6[8]
8000a10a:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000a10e:	ec fc 00 18 	ld.w	r12,r6[24]
8000a112:	12 98       	mov	r8,r9
8000a114:	a3 78       	lsl	r8,0x3
8000a116:	12 08       	add	r8,r9
8000a118:	a3 78       	lsl	r8,0x3
8000a11a:	f8 08 00 08 	add	r8,r12,r8
8000a11e:	2d 88       	sub	r8,-40
8000a120:	f0 e8 00 00 	ld.d	r8,r8[0]
8000a124:	f0 16 00 03 	mcall	r6[12]
8000a128:	14 98       	mov	r8,r10
8000a12a:	16 99       	mov	r9,r11
8000a12c:	04 9a       	mov	r10,r2
8000a12e:	06 9b       	mov	r11,r3
8000a130:	f0 16 00 05 	mcall	r6[20]
8000a134:	14 98       	mov	r8,r10
8000a136:	16 99       	mov	r9,r11
8000a138:	ee e9 ff c8 	st.d	r7[-56],r8
	FPF10 = P[axis][1][0] + dt * (-P[axis][2][0] + P[axis][1][1] - dt * P[axis][2][1] );
8000a13c:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000a140:	ec fa 00 18 	ld.w	r10,r6[24]
8000a144:	12 98       	mov	r8,r9
8000a146:	a3 78       	lsl	r8,0x3
8000a148:	12 08       	add	r8,r9
8000a14a:	a3 78       	lsl	r8,0x3
8000a14c:	f4 08 00 08 	add	r8,r10,r8
8000a150:	2e 88       	sub	r8,-24
8000a152:	f0 ea 00 00 	ld.d	r10,r8[0]
8000a156:	ee eb ff 44 	st.d	r7[-188],r10
8000a15a:	ee fc ff a4 	ld.w	r12,r7[-92]
8000a15e:	f0 16 00 02 	mcall	r6[8]
8000a162:	14 90       	mov	r0,r10
8000a164:	16 91       	mov	r1,r11
8000a166:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000a16a:	ec fa 00 18 	ld.w	r10,r6[24]
8000a16e:	12 98       	mov	r8,r9
8000a170:	a3 78       	lsl	r8,0x3
8000a172:	12 08       	add	r8,r9
8000a174:	a3 78       	lsl	r8,0x3
8000a176:	f4 08 00 08 	add	r8,r10,r8
8000a17a:	2e 08       	sub	r8,-32
8000a17c:	f0 ea 00 00 	ld.d	r10,r8[0]
8000a180:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000a184:	ec fc 00 18 	ld.w	r12,r6[24]
8000a188:	12 98       	mov	r8,r9
8000a18a:	a3 78       	lsl	r8,0x3
8000a18c:	12 08       	add	r8,r9
8000a18e:	a3 78       	lsl	r8,0x3
8000a190:	f8 08 00 08 	add	r8,r12,r8
8000a194:	2d 08       	sub	r8,-48
8000a196:	f0 e8 00 00 	ld.d	r8,r8[0]
8000a19a:	f0 16 00 11 	mcall	r6[68]
8000a19e:	14 98       	mov	r8,r10
8000a1a0:	16 99       	mov	r9,r11
8000a1a2:	10 92       	mov	r2,r8
8000a1a4:	12 93       	mov	r3,r9
8000a1a6:	ee fc ff a4 	ld.w	r12,r7[-92]
8000a1aa:	f0 16 00 02 	mcall	r6[8]
8000a1ae:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000a1b2:	ec fc 00 18 	ld.w	r12,r6[24]
8000a1b6:	12 98       	mov	r8,r9
8000a1b8:	a3 78       	lsl	r8,0x3
8000a1ba:	12 08       	add	r8,r9
8000a1bc:	a3 78       	lsl	r8,0x3
8000a1be:	f8 08 00 08 	add	r8,r12,r8
8000a1c2:	2c 88       	sub	r8,-56
8000a1c4:	f0 e8 00 00 	ld.d	r8,r8[0]
8000a1c8:	f0 16 00 03 	mcall	r6[12]
8000a1cc:	14 98       	mov	r8,r10
8000a1ce:	16 99       	mov	r9,r11
8000a1d0:	04 9a       	mov	r10,r2
8000a1d2:	06 9b       	mov	r11,r3
8000a1d4:	f0 16 00 11 	mcall	r6[68]
8000a1d8:	14 98       	mov	r8,r10
8000a1da:	16 99       	mov	r9,r11
8000a1dc:	00 9a       	mov	r10,r0
8000a1de:	02 9b       	mov	r11,r1
8000a1e0:	f0 16 00 03 	mcall	r6[12]
8000a1e4:	14 98       	mov	r8,r10
8000a1e6:	16 99       	mov	r9,r11
8000a1e8:	ee ea ff 44 	ld.d	r10,r7[-188]
8000a1ec:	f0 16 00 05 	mcall	r6[20]
8000a1f0:	14 98       	mov	r8,r10
8000a1f2:	16 99       	mov	r9,r11
8000a1f4:	ee e9 ff d0 	st.d	r7[-48],r8
	FPF11 = P[axis][1][1] + dt * (-P[axis][2][1] - P[axis][1][2] + dt * P[axis][2][2] );
8000a1f8:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000a1fc:	ec fa 00 18 	ld.w	r10,r6[24]
8000a200:	12 98       	mov	r8,r9
8000a202:	a3 78       	lsl	r8,0x3
8000a204:	12 08       	add	r8,r9
8000a206:	a3 78       	lsl	r8,0x3
8000a208:	f4 08 00 08 	add	r8,r10,r8
8000a20c:	2e 08       	sub	r8,-32
8000a20e:	f0 e4 00 00 	ld.d	r4,r8[0]
8000a212:	ee e5 ff 4c 	st.d	r7[-180],r4
8000a216:	ee fc ff a4 	ld.w	r12,r7[-92]
8000a21a:	f0 16 00 02 	mcall	r6[8]
8000a21e:	14 90       	mov	r0,r10
8000a220:	16 91       	mov	r1,r11
8000a222:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000a226:	ec fa 00 18 	ld.w	r10,r6[24]
8000a22a:	12 98       	mov	r8,r9
8000a22c:	a3 78       	lsl	r8,0x3
8000a22e:	12 08       	add	r8,r9
8000a230:	a3 78       	lsl	r8,0x3
8000a232:	f4 08 00 08 	add	r8,r10,r8
8000a236:	2c 88       	sub	r8,-56
8000a238:	f0 e8 00 00 	ld.d	r8,r8[0]
8000a23c:	12 94       	mov	r4,r9
8000a23e:	ee 14 80 00 	eorh	r4,0x8000
8000a242:	ef 44 ff 54 	st.w	r7[-172],r4
8000a246:	10 9c       	mov	r12,r8
8000a248:	ef 4c ff 58 	st.w	r7[-168],r12
8000a24c:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000a250:	ec fa 00 18 	ld.w	r10,r6[24]
8000a254:	12 98       	mov	r8,r9
8000a256:	a3 78       	lsl	r8,0x3
8000a258:	12 08       	add	r8,r9
8000a25a:	a3 78       	lsl	r8,0x3
8000a25c:	f4 08 00 08 	add	r8,r10,r8
8000a260:	2d 88       	sub	r8,-40
8000a262:	f0 e8 00 00 	ld.d	r8,r8[0]
8000a266:	ee ea ff 54 	ld.d	r10,r7[-172]
8000a26a:	f0 16 00 11 	mcall	r6[68]
8000a26e:	14 98       	mov	r8,r10
8000a270:	16 99       	mov	r9,r11
8000a272:	10 92       	mov	r2,r8
8000a274:	12 93       	mov	r3,r9
8000a276:	ee fc ff a4 	ld.w	r12,r7[-92]
8000a27a:	f0 16 00 02 	mcall	r6[8]
8000a27e:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000a282:	ec fc 00 18 	ld.w	r12,r6[24]
8000a286:	12 98       	mov	r8,r9
8000a288:	a3 78       	lsl	r8,0x3
8000a28a:	12 08       	add	r8,r9
8000a28c:	a3 78       	lsl	r8,0x3
8000a28e:	f8 08 00 08 	add	r8,r12,r8
8000a292:	2c 08       	sub	r8,-64
8000a294:	f0 e8 00 00 	ld.d	r8,r8[0]
8000a298:	f0 16 00 03 	mcall	r6[12]
8000a29c:	14 98       	mov	r8,r10
8000a29e:	16 99       	mov	r9,r11
8000a2a0:	04 9a       	mov	r10,r2
8000a2a2:	06 9b       	mov	r11,r3
8000a2a4:	f0 16 00 05 	mcall	r6[20]
8000a2a8:	14 98       	mov	r8,r10
8000a2aa:	16 99       	mov	r9,r11
8000a2ac:	00 9a       	mov	r10,r0
8000a2ae:	02 9b       	mov	r11,r1
8000a2b0:	f0 16 00 03 	mcall	r6[12]
8000a2b4:	14 98       	mov	r8,r10
8000a2b6:	16 99       	mov	r9,r11
8000a2b8:	ee ea ff 4c 	ld.d	r10,r7[-180]
8000a2bc:	f0 16 00 05 	mcall	r6[20]
8000a2c0:	14 98       	mov	r8,r10
8000a2c2:	16 99       	mov	r9,r11
8000a2c4:	ee e9 ff d8 	st.d	r7[-40],r8
	FPF12 = P[axis][1][2] + dt * (-P[axis][2][2] );
8000a2c8:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000a2cc:	ec fa 00 18 	ld.w	r10,r6[24]
8000a2d0:	12 98       	mov	r8,r9
8000a2d2:	a3 78       	lsl	r8,0x3
8000a2d4:	12 08       	add	r8,r9
8000a2d6:	a3 78       	lsl	r8,0x3
8000a2d8:	f4 08 00 08 	add	r8,r10,r8
8000a2dc:	2d 88       	sub	r8,-40
8000a2de:	f0 e0 00 00 	ld.d	r0,r8[0]
8000a2e2:	ee fc ff a4 	ld.w	r12,r7[-92]
8000a2e6:	f0 16 00 02 	mcall	r6[8]
8000a2ea:	14 92       	mov	r2,r10
8000a2ec:	16 93       	mov	r3,r11
8000a2ee:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000a2f2:	ec fa 00 18 	ld.w	r10,r6[24]
8000a2f6:	12 98       	mov	r8,r9
8000a2f8:	a3 78       	lsl	r8,0x3
8000a2fa:	12 08       	add	r8,r9
8000a2fc:	a3 78       	lsl	r8,0x3
8000a2fe:	f4 08 00 08 	add	r8,r10,r8
8000a302:	2c 08       	sub	r8,-64
8000a304:	f0 e8 00 00 	ld.d	r8,r8[0]
8000a308:	12 9b       	mov	r11,r9
8000a30a:	ee 1b 80 00 	eorh	r11,0x8000
8000a30e:	ef 4b ff 5c 	st.w	r7[-164],r11
8000a312:	10 9a       	mov	r10,r8
8000a314:	ef 4a ff 60 	st.w	r7[-160],r10
8000a318:	ee e8 ff 5c 	ld.d	r8,r7[-164]
8000a31c:	04 9a       	mov	r10,r2
8000a31e:	06 9b       	mov	r11,r3
8000a320:	f0 16 00 03 	mcall	r6[12]
8000a324:	14 98       	mov	r8,r10
8000a326:	16 99       	mov	r9,r11
8000a328:	00 9a       	mov	r10,r0
8000a32a:	02 9b       	mov	r11,r1
8000a32c:	f0 16 00 05 	mcall	r6[20]
8000a330:	14 98       	mov	r8,r10
8000a332:	16 99       	mov	r9,r11
8000a334:	ee e9 ff e0 	st.d	r7[-32],r8
	FPF20 = P[axis][2][0] + dt * ( P[axis][2][1] );
8000a338:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000a33c:	ec fa 00 18 	ld.w	r10,r6[24]
8000a340:	12 98       	mov	r8,r9
8000a342:	a3 78       	lsl	r8,0x3
8000a344:	12 08       	add	r8,r9
8000a346:	a3 78       	lsl	r8,0x3
8000a348:	f4 08 00 08 	add	r8,r10,r8
8000a34c:	2d 08       	sub	r8,-48
8000a34e:	f0 e2 00 00 	ld.d	r2,r8[0]
8000a352:	ee fc ff a4 	ld.w	r12,r7[-92]
8000a356:	f0 16 00 02 	mcall	r6[8]
8000a35a:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000a35e:	ec fc 00 18 	ld.w	r12,r6[24]
8000a362:	12 98       	mov	r8,r9
8000a364:	a3 78       	lsl	r8,0x3
8000a366:	12 08       	add	r8,r9
8000a368:	a3 78       	lsl	r8,0x3
8000a36a:	f8 08 00 08 	add	r8,r12,r8
8000a36e:	2c 88       	sub	r8,-56
8000a370:	f0 e8 00 00 	ld.d	r8,r8[0]
8000a374:	f0 16 00 03 	mcall	r6[12]
8000a378:	14 98       	mov	r8,r10
8000a37a:	16 99       	mov	r9,r11
8000a37c:	04 9a       	mov	r10,r2
8000a37e:	06 9b       	mov	r11,r3
8000a380:	f0 16 00 05 	mcall	r6[20]
8000a384:	14 98       	mov	r8,r10
8000a386:	16 99       	mov	r9,r11
8000a388:	ee e9 ff e8 	st.d	r7[-24],r8
	FPF21 = P[axis][2][1] + dt * (-P[axis][2][2] );
8000a38c:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000a390:	ec fa 00 18 	ld.w	r10,r6[24]
8000a394:	12 98       	mov	r8,r9
8000a396:	a3 78       	lsl	r8,0x3
8000a398:	12 08       	add	r8,r9
8000a39a:	a3 78       	lsl	r8,0x3
8000a39c:	f4 08 00 08 	add	r8,r10,r8
8000a3a0:	2c 88       	sub	r8,-56
8000a3a2:	f0 e2 00 00 	ld.d	r2,r8[0]
8000a3a6:	ee fc ff a4 	ld.w	r12,r7[-92]
8000a3aa:	f0 16 00 02 	mcall	r6[8]
8000a3ae:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000a3b2:	ec fc 00 18 	ld.w	r12,r6[24]
8000a3b6:	12 98       	mov	r8,r9
8000a3b8:	a3 78       	lsl	r8,0x3
8000a3ba:	12 08       	add	r8,r9
8000a3bc:	a3 78       	lsl	r8,0x3
8000a3be:	f8 08 00 08 	add	r8,r12,r8
8000a3c2:	2c 08       	sub	r8,-64
8000a3c4:	f0 e8 00 00 	ld.d	r8,r8[0]
8000a3c8:	12 95       	mov	r5,r9
8000a3ca:	ee 15 80 00 	eorh	r5,0x8000
8000a3ce:	ef 45 ff 64 	st.w	r7[-156],r5
8000a3d2:	10 94       	mov	r4,r8
8000a3d4:	ef 44 ff 68 	st.w	r7[-152],r4
8000a3d8:	ee e8 ff 64 	ld.d	r8,r7[-156]
8000a3dc:	f0 16 00 03 	mcall	r6[12]
8000a3e0:	14 98       	mov	r8,r10
8000a3e2:	16 99       	mov	r9,r11
8000a3e4:	04 9a       	mov	r10,r2
8000a3e6:	06 9b       	mov	r11,r3
8000a3e8:	f0 16 00 05 	mcall	r6[20]
8000a3ec:	14 98       	mov	r8,r10
8000a3ee:	16 99       	mov	r9,r11
8000a3f0:	ee e9 ff f0 	st.d	r7[-16],r8
	FPF22 = P[axis][2][2];
8000a3f4:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000a3f8:	ec fa 00 18 	ld.w	r10,r6[24]
8000a3fc:	12 98       	mov	r8,r9
8000a3fe:	a3 78       	lsl	r8,0x3
8000a400:	12 08       	add	r8,r9
8000a402:	a3 78       	lsl	r8,0x3
8000a404:	f4 08 00 08 	add	r8,r10,r8
8000a408:	2c 08       	sub	r8,-64
8000a40a:	f0 e8 00 00 	ld.d	r8,r8[0]
8000a40e:	ee e9 ff f8 	st.d	r7[-8],r8
	// P = F*P*F' + Q
	P[axis][0][0] = FPF00 + Q[axis][POSITION];
8000a412:	ee f5 ff ac 	ld.w	r5,r7[-84]
8000a416:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000a41a:	ec fa 00 d4 	ld.w	r10,r6[212]
8000a41e:	12 98       	mov	r8,r9
8000a420:	a1 78       	lsl	r8,0x1
8000a422:	12 08       	add	r8,r9
8000a424:	a3 78       	lsl	r8,0x3
8000a426:	f4 08 00 08 	add	r8,r10,r8
8000a42a:	f0 ea 00 00 	ld.d	r10,r8[0]
8000a42e:	ee e8 ff b8 	ld.d	r8,r7[-72]
8000a432:	f0 16 00 05 	mcall	r6[20]
8000a436:	14 98       	mov	r8,r10
8000a438:	16 99       	mov	r9,r11
8000a43a:	10 9a       	mov	r10,r8
8000a43c:	12 9b       	mov	r11,r9
8000a43e:	ec f9 00 18 	ld.w	r9,r6[24]
8000a442:	0a 98       	mov	r8,r5
8000a444:	a3 78       	lsl	r8,0x3
8000a446:	0a 08       	add	r8,r5
8000a448:	a3 78       	lsl	r8,0x3
8000a44a:	f2 08 00 08 	add	r8,r9,r8
8000a44e:	f0 eb 00 00 	st.d	r8[0],r10
	P[axis][0][1] = FPF01;
8000a452:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000a456:	ec fa 00 18 	ld.w	r10,r6[24]
8000a45a:	12 98       	mov	r8,r9
8000a45c:	a3 78       	lsl	r8,0x3
8000a45e:	12 08       	add	r8,r9
8000a460:	f0 cb ff ff 	sub	r11,r8,-1
8000a464:	ee e8 ff c0 	ld.d	r8,r7[-64]
8000a468:	f4 0b 08 38 	st.d	r10[r11<<0x3],r8
	P[axis][0][2] = FPF02;
8000a46c:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000a470:	ec fa 00 18 	ld.w	r10,r6[24]
8000a474:	12 98       	mov	r8,r9
8000a476:	a3 78       	lsl	r8,0x3
8000a478:	12 08       	add	r8,r9
8000a47a:	a3 78       	lsl	r8,0x3
8000a47c:	f4 08 00 08 	add	r8,r10,r8
8000a480:	f0 ca ff f0 	sub	r10,r8,-16
8000a484:	ee e8 ff c8 	ld.d	r8,r7[-56]
8000a488:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][1][0] = FPF10;
8000a48c:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000a490:	ec fa 00 18 	ld.w	r10,r6[24]
8000a494:	12 98       	mov	r8,r9
8000a496:	a3 78       	lsl	r8,0x3
8000a498:	12 08       	add	r8,r9
8000a49a:	a3 78       	lsl	r8,0x3
8000a49c:	f4 08 00 08 	add	r8,r10,r8
8000a4a0:	f0 ca ff e8 	sub	r10,r8,-24
8000a4a4:	ee e8 ff d0 	ld.d	r8,r7[-48]
8000a4a8:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][1][1] = FPF11 + Q[axis][SPEED];
8000a4ac:	ee f5 ff ac 	ld.w	r5,r7[-84]
8000a4b0:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000a4b4:	ec fa 00 d4 	ld.w	r10,r6[212]
8000a4b8:	12 98       	mov	r8,r9
8000a4ba:	a1 78       	lsl	r8,0x1
8000a4bc:	12 08       	add	r8,r9
8000a4be:	2f f8       	sub	r8,-1
8000a4c0:	f4 08 02 3a 	ld.d	r10,r10[r8<<0x3]
8000a4c4:	ee e8 ff d8 	ld.d	r8,r7[-40]
8000a4c8:	f0 16 00 05 	mcall	r6[20]
8000a4cc:	14 98       	mov	r8,r10
8000a4ce:	16 99       	mov	r9,r11
8000a4d0:	10 9a       	mov	r10,r8
8000a4d2:	12 9b       	mov	r11,r9
8000a4d4:	ec f9 00 18 	ld.w	r9,r6[24]
8000a4d8:	0a 98       	mov	r8,r5
8000a4da:	a3 78       	lsl	r8,0x3
8000a4dc:	0a 08       	add	r8,r5
8000a4de:	a3 78       	lsl	r8,0x3
8000a4e0:	f2 08 00 08 	add	r8,r9,r8
8000a4e4:	2e 08       	sub	r8,-32
8000a4e6:	f0 eb 00 00 	st.d	r8[0],r10
	P[axis][1][2] = FPF12;
8000a4ea:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000a4ee:	ec fa 00 18 	ld.w	r10,r6[24]
8000a4f2:	12 98       	mov	r8,r9
8000a4f4:	a3 78       	lsl	r8,0x3
8000a4f6:	12 08       	add	r8,r9
8000a4f8:	a3 78       	lsl	r8,0x3
8000a4fa:	f4 08 00 08 	add	r8,r10,r8
8000a4fe:	f0 ca ff d8 	sub	r10,r8,-40
8000a502:	ee e8 ff e0 	ld.d	r8,r7[-32]
8000a506:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][2][0] = FPF20;
8000a50a:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000a50e:	ec fa 00 18 	ld.w	r10,r6[24]
8000a512:	12 98       	mov	r8,r9
8000a514:	a3 78       	lsl	r8,0x3
8000a516:	12 08       	add	r8,r9
8000a518:	a3 78       	lsl	r8,0x3
8000a51a:	f4 08 00 08 	add	r8,r10,r8
8000a51e:	f0 ca ff d0 	sub	r10,r8,-48
8000a522:	ee e8 ff e8 	ld.d	r8,r7[-24]
8000a526:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][2][1] = FPF21;
8000a52a:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000a52e:	ec fa 00 18 	ld.w	r10,r6[24]
8000a532:	12 98       	mov	r8,r9
8000a534:	a3 78       	lsl	r8,0x3
8000a536:	12 08       	add	r8,r9
8000a538:	a3 78       	lsl	r8,0x3
8000a53a:	f4 08 00 08 	add	r8,r10,r8
8000a53e:	f0 ca ff c8 	sub	r10,r8,-56
8000a542:	ee e8 ff f0 	ld.d	r8,r7[-16]
8000a546:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][2][2] = FPF22 + Q[axis][BIAIS];
8000a54a:	ee f5 ff ac 	ld.w	r5,r7[-84]
8000a54e:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000a552:	ec fa 00 d4 	ld.w	r10,r6[212]
8000a556:	12 98       	mov	r8,r9
8000a558:	a1 78       	lsl	r8,0x1
8000a55a:	12 08       	add	r8,r9
8000a55c:	a3 78       	lsl	r8,0x3
8000a55e:	f4 08 00 08 	add	r8,r10,r8
8000a562:	2f 08       	sub	r8,-16
8000a564:	f0 ea 00 00 	ld.d	r10,r8[0]
8000a568:	ee e8 ff f8 	ld.d	r8,r7[-8]
8000a56c:	f0 16 00 05 	mcall	r6[20]
8000a570:	14 98       	mov	r8,r10
8000a572:	16 99       	mov	r9,r11
8000a574:	10 9a       	mov	r10,r8
8000a576:	12 9b       	mov	r11,r9
8000a578:	ec f9 00 18 	ld.w	r9,r6[24]
8000a57c:	0a 98       	mov	r8,r5
8000a57e:	a3 78       	lsl	r8,0x3
8000a580:	0a 08       	add	r8,r5
8000a582:	a3 78       	lsl	r8,0x3
8000a584:	f2 08 00 08 	add	r8,r9,r8
8000a588:	2c 08       	sub	r8,-64
8000a58a:	f0 eb 00 00 	st.d	r8[0],r10
	
	
	/*************************************************************************************/
	FPF00 = P2[axis][0][0] + dt * ( P2[axis][1][0] + P2[axis][0][1] + dt * P2[axis][1][1] );
8000a58e:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000a592:	ec fa 00 1c 	ld.w	r10,r6[28]
8000a596:	12 98       	mov	r8,r9
8000a598:	a3 78       	lsl	r8,0x3
8000a59a:	12 08       	add	r8,r9
8000a59c:	a3 78       	lsl	r8,0x3
8000a59e:	f4 08 00 08 	add	r8,r10,r8
8000a5a2:	f0 ea 00 00 	ld.d	r10,r8[0]
8000a5a6:	ee eb ff 6c 	st.d	r7[-148],r10
8000a5aa:	ee fc ff a4 	ld.w	r12,r7[-92]
8000a5ae:	f0 16 00 02 	mcall	r6[8]
8000a5b2:	14 90       	mov	r0,r10
8000a5b4:	16 91       	mov	r1,r11
8000a5b6:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000a5ba:	ec fa 00 1c 	ld.w	r10,r6[28]
8000a5be:	12 98       	mov	r8,r9
8000a5c0:	a3 78       	lsl	r8,0x3
8000a5c2:	12 08       	add	r8,r9
8000a5c4:	a3 78       	lsl	r8,0x3
8000a5c6:	f4 08 00 08 	add	r8,r10,r8
8000a5ca:	2e 88       	sub	r8,-24
8000a5cc:	f0 ea 00 00 	ld.d	r10,r8[0]
8000a5d0:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000a5d4:	ec fc 00 1c 	ld.w	r12,r6[28]
8000a5d8:	12 98       	mov	r8,r9
8000a5da:	a3 78       	lsl	r8,0x3
8000a5dc:	12 08       	add	r8,r9
8000a5de:	2f f8       	sub	r8,-1
8000a5e0:	f8 08 02 38 	ld.d	r8,r12[r8<<0x3]
8000a5e4:	f0 16 00 05 	mcall	r6[20]
8000a5e8:	14 98       	mov	r8,r10
8000a5ea:	16 99       	mov	r9,r11
8000a5ec:	10 92       	mov	r2,r8
8000a5ee:	12 93       	mov	r3,r9
8000a5f0:	ee fc ff a4 	ld.w	r12,r7[-92]
8000a5f4:	f0 16 00 02 	mcall	r6[8]
8000a5f8:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000a5fc:	ec fc 00 1c 	ld.w	r12,r6[28]
8000a600:	12 98       	mov	r8,r9
8000a602:	a3 78       	lsl	r8,0x3
8000a604:	12 08       	add	r8,r9
8000a606:	a3 78       	lsl	r8,0x3
8000a608:	f8 08 00 08 	add	r8,r12,r8
8000a60c:	2e 08       	sub	r8,-32
8000a60e:	f0 e8 00 00 	ld.d	r8,r8[0]
8000a612:	f0 16 00 03 	mcall	r6[12]
8000a616:	14 98       	mov	r8,r10
8000a618:	16 99       	mov	r9,r11
8000a61a:	04 9a       	mov	r10,r2
8000a61c:	06 9b       	mov	r11,r3
8000a61e:	f0 16 00 05 	mcall	r6[20]
8000a622:	14 98       	mov	r8,r10
8000a624:	16 99       	mov	r9,r11
8000a626:	00 9a       	mov	r10,r0
8000a628:	02 9b       	mov	r11,r1
8000a62a:	f0 16 00 03 	mcall	r6[12]
8000a62e:	14 98       	mov	r8,r10
8000a630:	16 99       	mov	r9,r11
8000a632:	ee ea ff 6c 	ld.d	r10,r7[-148]
8000a636:	f0 16 00 05 	mcall	r6[20]
8000a63a:	14 98       	mov	r8,r10
8000a63c:	16 99       	mov	r9,r11
8000a63e:	ee e9 ff b8 	st.d	r7[-72],r8
	FPF01 = P2[axis][0][1] + dt * ( P2[axis][1][1] - P2[axis][0][2] - dt * P2[axis][1][2] );
8000a642:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000a646:	ec fa 00 1c 	ld.w	r10,r6[28]
8000a64a:	12 98       	mov	r8,r9
8000a64c:	a3 78       	lsl	r8,0x3
8000a64e:	12 08       	add	r8,r9
8000a650:	2f f8       	sub	r8,-1
8000a652:	f4 08 02 34 	ld.d	r4,r10[r8<<0x3]
8000a656:	ee e5 ff 74 	st.d	r7[-140],r4
8000a65a:	ee fc ff a4 	ld.w	r12,r7[-92]
8000a65e:	f0 16 00 02 	mcall	r6[8]
8000a662:	14 90       	mov	r0,r10
8000a664:	16 91       	mov	r1,r11
8000a666:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000a66a:	ec fa 00 1c 	ld.w	r10,r6[28]
8000a66e:	12 98       	mov	r8,r9
8000a670:	a3 78       	lsl	r8,0x3
8000a672:	12 08       	add	r8,r9
8000a674:	a3 78       	lsl	r8,0x3
8000a676:	f4 08 00 08 	add	r8,r10,r8
8000a67a:	2e 08       	sub	r8,-32
8000a67c:	f0 ea 00 00 	ld.d	r10,r8[0]
8000a680:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000a684:	ec fc 00 1c 	ld.w	r12,r6[28]
8000a688:	12 98       	mov	r8,r9
8000a68a:	a3 78       	lsl	r8,0x3
8000a68c:	12 08       	add	r8,r9
8000a68e:	a3 78       	lsl	r8,0x3
8000a690:	f8 08 00 08 	add	r8,r12,r8
8000a694:	2f 08       	sub	r8,-16
8000a696:	f0 e8 00 00 	ld.d	r8,r8[0]
8000a69a:	f0 16 00 11 	mcall	r6[68]
8000a69e:	14 98       	mov	r8,r10
8000a6a0:	16 99       	mov	r9,r11
8000a6a2:	10 92       	mov	r2,r8
8000a6a4:	12 93       	mov	r3,r9
8000a6a6:	ee fc ff a4 	ld.w	r12,r7[-92]
8000a6aa:	f0 16 00 02 	mcall	r6[8]
8000a6ae:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000a6b2:	ec fc 00 1c 	ld.w	r12,r6[28]
8000a6b6:	12 98       	mov	r8,r9
8000a6b8:	a3 78       	lsl	r8,0x3
8000a6ba:	12 08       	add	r8,r9
8000a6bc:	a3 78       	lsl	r8,0x3
8000a6be:	f8 08 00 08 	add	r8,r12,r8
8000a6c2:	2d 88       	sub	r8,-40
8000a6c4:	f0 e8 00 00 	ld.d	r8,r8[0]
8000a6c8:	f0 16 00 03 	mcall	r6[12]
8000a6cc:	14 98       	mov	r8,r10
8000a6ce:	16 99       	mov	r9,r11
8000a6d0:	04 9a       	mov	r10,r2
8000a6d2:	06 9b       	mov	r11,r3
8000a6d4:	f0 16 00 11 	mcall	r6[68]
8000a6d8:	14 98       	mov	r8,r10
8000a6da:	16 99       	mov	r9,r11
8000a6dc:	00 9a       	mov	r10,r0
8000a6de:	02 9b       	mov	r11,r1
8000a6e0:	f0 16 00 03 	mcall	r6[12]
8000a6e4:	14 98       	mov	r8,r10
8000a6e6:	16 99       	mov	r9,r11
8000a6e8:	ee ea ff 74 	ld.d	r10,r7[-140]
8000a6ec:	f0 16 00 05 	mcall	r6[20]
8000a6f0:	14 98       	mov	r8,r10
8000a6f2:	16 99       	mov	r9,r11
8000a6f4:	ee e9 ff c0 	st.d	r7[-64],r8
	FPF02 = P2[axis][0][2] + dt * ( P2[axis][1][2] );
8000a6f8:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000a6fc:	ec fa 00 1c 	ld.w	r10,r6[28]
8000a700:	12 98       	mov	r8,r9
8000a702:	a3 78       	lsl	r8,0x3
8000a704:	12 08       	add	r8,r9
8000a706:	a3 78       	lsl	r8,0x3
8000a708:	f4 08 00 08 	add	r8,r10,r8
8000a70c:	2f 08       	sub	r8,-16
8000a70e:	f0 e2 00 00 	ld.d	r2,r8[0]
8000a712:	ee fc ff a4 	ld.w	r12,r7[-92]
8000a716:	f0 16 00 02 	mcall	r6[8]
8000a71a:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000a71e:	ec fc 00 1c 	ld.w	r12,r6[28]
8000a722:	12 98       	mov	r8,r9
8000a724:	a3 78       	lsl	r8,0x3
8000a726:	12 08       	add	r8,r9
8000a728:	a3 78       	lsl	r8,0x3
8000a72a:	f8 08 00 08 	add	r8,r12,r8
8000a72e:	2d 88       	sub	r8,-40
8000a730:	f0 e8 00 00 	ld.d	r8,r8[0]
8000a734:	f0 16 00 03 	mcall	r6[12]
8000a738:	14 98       	mov	r8,r10
8000a73a:	16 99       	mov	r9,r11
8000a73c:	04 9a       	mov	r10,r2
8000a73e:	06 9b       	mov	r11,r3
8000a740:	f0 16 00 05 	mcall	r6[20]
8000a744:	14 98       	mov	r8,r10
8000a746:	16 99       	mov	r9,r11
8000a748:	ee e9 ff c8 	st.d	r7[-56],r8
	FPF10 = P2[axis][1][0] + dt * (-P2[axis][2][0] + P2[axis][1][1] - dt * P2[axis][2][1] );
8000a74c:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000a750:	ec fa 00 1c 	ld.w	r10,r6[28]
8000a754:	12 98       	mov	r8,r9
8000a756:	a3 78       	lsl	r8,0x3
8000a758:	12 08       	add	r8,r9
8000a75a:	a3 78       	lsl	r8,0x3
8000a75c:	f4 08 00 08 	add	r8,r10,r8
8000a760:	2e 88       	sub	r8,-24
8000a762:	f0 ea 00 00 	ld.d	r10,r8[0]
8000a766:	ee eb ff 7c 	st.d	r7[-132],r10
8000a76a:	ee fc ff a4 	ld.w	r12,r7[-92]
8000a76e:	f0 16 00 02 	mcall	r6[8]
8000a772:	14 90       	mov	r0,r10
8000a774:	16 91       	mov	r1,r11
8000a776:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000a77a:	ec fa 00 1c 	ld.w	r10,r6[28]
8000a77e:	12 98       	mov	r8,r9
8000a780:	a3 78       	lsl	r8,0x3
8000a782:	12 08       	add	r8,r9
8000a784:	a3 78       	lsl	r8,0x3
8000a786:	f4 08 00 08 	add	r8,r10,r8
8000a78a:	2e 08       	sub	r8,-32
8000a78c:	f0 ea 00 00 	ld.d	r10,r8[0]
8000a790:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000a794:	ec fc 00 1c 	ld.w	r12,r6[28]
8000a798:	12 98       	mov	r8,r9
8000a79a:	a3 78       	lsl	r8,0x3
8000a79c:	12 08       	add	r8,r9
8000a79e:	a3 78       	lsl	r8,0x3
8000a7a0:	f8 08 00 08 	add	r8,r12,r8
8000a7a4:	2d 08       	sub	r8,-48
8000a7a6:	f0 e8 00 00 	ld.d	r8,r8[0]
8000a7aa:	f0 16 00 11 	mcall	r6[68]
8000a7ae:	14 98       	mov	r8,r10
8000a7b0:	16 99       	mov	r9,r11
8000a7b2:	10 92       	mov	r2,r8
8000a7b4:	12 93       	mov	r3,r9
8000a7b6:	ee fc ff a4 	ld.w	r12,r7[-92]
8000a7ba:	f0 16 00 02 	mcall	r6[8]
8000a7be:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000a7c2:	ec fc 00 1c 	ld.w	r12,r6[28]
8000a7c6:	12 98       	mov	r8,r9
8000a7c8:	a3 78       	lsl	r8,0x3
8000a7ca:	12 08       	add	r8,r9
8000a7cc:	a3 78       	lsl	r8,0x3
8000a7ce:	f8 08 00 08 	add	r8,r12,r8
8000a7d2:	2c 88       	sub	r8,-56
8000a7d4:	f0 e8 00 00 	ld.d	r8,r8[0]
8000a7d8:	f0 16 00 03 	mcall	r6[12]
8000a7dc:	14 98       	mov	r8,r10
8000a7de:	16 99       	mov	r9,r11
8000a7e0:	04 9a       	mov	r10,r2
8000a7e2:	06 9b       	mov	r11,r3
8000a7e4:	f0 16 00 11 	mcall	r6[68]
8000a7e8:	14 98       	mov	r8,r10
8000a7ea:	16 99       	mov	r9,r11
8000a7ec:	00 9a       	mov	r10,r0
8000a7ee:	02 9b       	mov	r11,r1
8000a7f0:	f0 16 00 03 	mcall	r6[12]
8000a7f4:	14 98       	mov	r8,r10
8000a7f6:	16 99       	mov	r9,r11
8000a7f8:	ee ea ff 7c 	ld.d	r10,r7[-132]
8000a7fc:	f0 16 00 05 	mcall	r6[20]
8000a800:	14 98       	mov	r8,r10
8000a802:	16 99       	mov	r9,r11
8000a804:	ee e9 ff d0 	st.d	r7[-48],r8
	FPF11 = P2[axis][1][1] + dt * (-P2[axis][2][1] - P2[axis][1][2] + dt * P2[axis][2][2] );
8000a808:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000a80c:	ec fa 00 1c 	ld.w	r10,r6[28]
8000a810:	12 98       	mov	r8,r9
8000a812:	a3 78       	lsl	r8,0x3
8000a814:	12 08       	add	r8,r9
8000a816:	a3 78       	lsl	r8,0x3
8000a818:	f4 08 00 08 	add	r8,r10,r8
8000a81c:	2e 08       	sub	r8,-32
8000a81e:	f0 e0 00 00 	ld.d	r0,r8[0]
8000a822:	ee fc ff a4 	ld.w	r12,r7[-92]
8000a826:	f0 16 00 02 	mcall	r6[8]
8000a82a:	ee eb ff 84 	st.d	r7[-124],r10
8000a82e:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000a832:	ec fa 00 1c 	ld.w	r10,r6[28]
8000a836:	12 98       	mov	r8,r9
8000a838:	a3 78       	lsl	r8,0x3
8000a83a:	12 08       	add	r8,r9
8000a83c:	a3 78       	lsl	r8,0x3
8000a83e:	f4 08 00 08 	add	r8,r10,r8
8000a842:	2c 88       	sub	r8,-56
8000a844:	f0 e8 00 00 	ld.d	r8,r8[0]
8000a848:	12 9a       	mov	r10,r9
8000a84a:	ee 1a 80 00 	eorh	r10,0x8000
8000a84e:	ef 4a ff 8c 	st.w	r7[-116],r10
8000a852:	10 95       	mov	r5,r8
8000a854:	ef 45 ff 90 	st.w	r7[-112],r5
8000a858:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000a85c:	ec fa 00 1c 	ld.w	r10,r6[28]
8000a860:	12 98       	mov	r8,r9
8000a862:	a3 78       	lsl	r8,0x3
8000a864:	12 08       	add	r8,r9
8000a866:	a3 78       	lsl	r8,0x3
8000a868:	f4 08 00 08 	add	r8,r10,r8
8000a86c:	2d 88       	sub	r8,-40
8000a86e:	f0 e8 00 00 	ld.d	r8,r8[0]
8000a872:	ee ea ff 8c 	ld.d	r10,r7[-116]
8000a876:	f0 16 00 11 	mcall	r6[68]
8000a87a:	14 98       	mov	r8,r10
8000a87c:	16 99       	mov	r9,r11
8000a87e:	10 92       	mov	r2,r8
8000a880:	12 93       	mov	r3,r9
8000a882:	ee fc ff a4 	ld.w	r12,r7[-92]
8000a886:	f0 16 00 02 	mcall	r6[8]
8000a88a:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000a88e:	ec fc 00 1c 	ld.w	r12,r6[28]
8000a892:	12 98       	mov	r8,r9
8000a894:	a3 78       	lsl	r8,0x3
8000a896:	12 08       	add	r8,r9
8000a898:	a3 78       	lsl	r8,0x3
8000a89a:	f8 08 00 08 	add	r8,r12,r8
8000a89e:	2c 08       	sub	r8,-64
8000a8a0:	f0 e8 00 00 	ld.d	r8,r8[0]
8000a8a4:	f0 16 00 03 	mcall	r6[12]
8000a8a8:	14 98       	mov	r8,r10
8000a8aa:	16 99       	mov	r9,r11
8000a8ac:	04 9a       	mov	r10,r2
8000a8ae:	06 9b       	mov	r11,r3
8000a8b0:	f0 16 00 05 	mcall	r6[20]
8000a8b4:	14 98       	mov	r8,r10
8000a8b6:	16 99       	mov	r9,r11
8000a8b8:	ee ea ff 84 	ld.d	r10,r7[-124]
8000a8bc:	f0 16 00 03 	mcall	r6[12]
8000a8c0:	14 98       	mov	r8,r10
8000a8c2:	16 99       	mov	r9,r11
8000a8c4:	00 9a       	mov	r10,r0
8000a8c6:	02 9b       	mov	r11,r1
8000a8c8:	f0 16 00 05 	mcall	r6[20]
8000a8cc:	14 98       	mov	r8,r10
8000a8ce:	16 99       	mov	r9,r11
8000a8d0:	ee e9 ff d8 	st.d	r7[-40],r8
	FPF12 = P2[axis][1][2] + dt * (-P2[axis][2][2] );
8000a8d4:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000a8d8:	ec fa 00 1c 	ld.w	r10,r6[28]
8000a8dc:	12 98       	mov	r8,r9
8000a8de:	a3 78       	lsl	r8,0x3
8000a8e0:	12 08       	add	r8,r9
8000a8e2:	a3 78       	lsl	r8,0x3
8000a8e4:	f4 08 00 08 	add	r8,r10,r8
8000a8e8:	2d 88       	sub	r8,-40
8000a8ea:	f0 e2 00 00 	ld.d	r2,r8[0]
8000a8ee:	ee fc ff a4 	ld.w	r12,r7[-92]
8000a8f2:	f0 16 00 02 	mcall	r6[8]
8000a8f6:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000a8fa:	ec fc 00 1c 	ld.w	r12,r6[28]
8000a8fe:	12 98       	mov	r8,r9
8000a900:	a3 78       	lsl	r8,0x3
8000a902:	12 08       	add	r8,r9
8000a904:	a3 78       	lsl	r8,0x3
8000a906:	f8 08 00 08 	add	r8,r12,r8
8000a90a:	2c 08       	sub	r8,-64
8000a90c:	f0 e8 00 00 	ld.d	r8,r8[0]
8000a910:	12 94       	mov	r4,r9
8000a912:	ee 14 80 00 	eorh	r4,0x8000
8000a916:	ef 44 ff 94 	st.w	r7[-108],r4
8000a91a:	10 9c       	mov	r12,r8
8000a91c:	ef 4c ff 98 	st.w	r7[-104],r12
8000a920:	ee e8 ff 94 	ld.d	r8,r7[-108]
8000a924:	f0 16 00 03 	mcall	r6[12]
8000a928:	14 98       	mov	r8,r10
8000a92a:	16 99       	mov	r9,r11
8000a92c:	04 9a       	mov	r10,r2
8000a92e:	06 9b       	mov	r11,r3
8000a930:	f0 16 00 05 	mcall	r6[20]
8000a934:	14 98       	mov	r8,r10
8000a936:	16 99       	mov	r9,r11
8000a938:	ee e9 ff e0 	st.d	r7[-32],r8
	FPF20 = P2[axis][2][0] + dt * ( P2[axis][2][1] );
8000a93c:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000a940:	ec fa 00 1c 	ld.w	r10,r6[28]
8000a944:	12 98       	mov	r8,r9
8000a946:	a3 78       	lsl	r8,0x3
8000a948:	12 08       	add	r8,r9
8000a94a:	a3 78       	lsl	r8,0x3
8000a94c:	f4 08 00 08 	add	r8,r10,r8
8000a950:	2d 08       	sub	r8,-48
8000a952:	f0 e2 00 00 	ld.d	r2,r8[0]
8000a956:	ee fc ff a4 	ld.w	r12,r7[-92]
8000a95a:	f0 16 00 02 	mcall	r6[8]
8000a95e:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000a962:	ec fc 00 1c 	ld.w	r12,r6[28]
8000a966:	12 98       	mov	r8,r9
8000a968:	a3 78       	lsl	r8,0x3
8000a96a:	12 08       	add	r8,r9
8000a96c:	a3 78       	lsl	r8,0x3
8000a96e:	f8 08 00 08 	add	r8,r12,r8
8000a972:	2c 88       	sub	r8,-56
8000a974:	f0 e8 00 00 	ld.d	r8,r8[0]
8000a978:	f0 16 00 03 	mcall	r6[12]
8000a97c:	14 98       	mov	r8,r10
8000a97e:	16 99       	mov	r9,r11
8000a980:	04 9a       	mov	r10,r2
8000a982:	06 9b       	mov	r11,r3
8000a984:	f0 16 00 05 	mcall	r6[20]
8000a988:	14 98       	mov	r8,r10
8000a98a:	16 99       	mov	r9,r11
8000a98c:	ee e9 ff e8 	st.d	r7[-24],r8
	FPF21 = P2[axis][2][1] + dt * (-P2[axis][2][2] );
8000a990:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000a994:	ec fa 00 1c 	ld.w	r10,r6[28]
8000a998:	12 98       	mov	r8,r9
8000a99a:	a3 78       	lsl	r8,0x3
8000a99c:	12 08       	add	r8,r9
8000a99e:	a3 78       	lsl	r8,0x3
8000a9a0:	f4 08 00 08 	add	r8,r10,r8
8000a9a4:	2c 88       	sub	r8,-56
8000a9a6:	f0 e2 00 00 	ld.d	r2,r8[0]
8000a9aa:	ee fc ff a4 	ld.w	r12,r7[-92]
8000a9ae:	f0 16 00 02 	mcall	r6[8]
8000a9b2:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000a9b6:	ec fc 00 1c 	ld.w	r12,r6[28]
8000a9ba:	12 98       	mov	r8,r9
8000a9bc:	a3 78       	lsl	r8,0x3
8000a9be:	12 08       	add	r8,r9
8000a9c0:	a3 78       	lsl	r8,0x3
8000a9c2:	f8 08 00 08 	add	r8,r12,r8
8000a9c6:	2c 08       	sub	r8,-64
8000a9c8:	f0 e8 00 00 	ld.d	r8,r8[0]
8000a9cc:	12 95       	mov	r5,r9
8000a9ce:	ee 15 80 00 	eorh	r5,0x8000
8000a9d2:	ef 45 ff 9c 	st.w	r7[-100],r5
8000a9d6:	10 94       	mov	r4,r8
8000a9d8:	ef 44 ff a0 	st.w	r7[-96],r4
8000a9dc:	ee e8 ff 9c 	ld.d	r8,r7[-100]
8000a9e0:	f0 16 00 03 	mcall	r6[12]
8000a9e4:	14 98       	mov	r8,r10
8000a9e6:	16 99       	mov	r9,r11
8000a9e8:	04 9a       	mov	r10,r2
8000a9ea:	06 9b       	mov	r11,r3
8000a9ec:	f0 16 00 05 	mcall	r6[20]
8000a9f0:	14 98       	mov	r8,r10
8000a9f2:	16 99       	mov	r9,r11
8000a9f4:	ee e9 ff f0 	st.d	r7[-16],r8
	FPF22 = P2[axis][2][2];
8000a9f8:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000a9fc:	ec fa 00 1c 	ld.w	r10,r6[28]
8000aa00:	12 98       	mov	r8,r9
8000aa02:	a3 78       	lsl	r8,0x3
8000aa04:	12 08       	add	r8,r9
8000aa06:	a3 78       	lsl	r8,0x3
8000aa08:	f4 08 00 08 	add	r8,r10,r8
8000aa0c:	2c 08       	sub	r8,-64
8000aa0e:	f0 e8 00 00 	ld.d	r8,r8[0]
8000aa12:	ee e9 ff f8 	st.d	r7[-8],r8
	// P = F*P*F' + Q
	P2[axis][0][0] = FPF00 + Q2[axis][POSITION];
8000aa16:	ee f5 ff ac 	ld.w	r5,r7[-84]
8000aa1a:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000aa1e:	ec fa 00 d8 	ld.w	r10,r6[216]
8000aa22:	12 98       	mov	r8,r9
8000aa24:	a1 78       	lsl	r8,0x1
8000aa26:	12 08       	add	r8,r9
8000aa28:	a3 78       	lsl	r8,0x3
8000aa2a:	f4 08 00 08 	add	r8,r10,r8
8000aa2e:	f0 ea 00 00 	ld.d	r10,r8[0]
8000aa32:	ee e8 ff b8 	ld.d	r8,r7[-72]
8000aa36:	f0 16 00 05 	mcall	r6[20]
8000aa3a:	14 98       	mov	r8,r10
8000aa3c:	16 99       	mov	r9,r11
8000aa3e:	10 9a       	mov	r10,r8
8000aa40:	12 9b       	mov	r11,r9
8000aa42:	ec f9 00 1c 	ld.w	r9,r6[28]
8000aa46:	0a 98       	mov	r8,r5
8000aa48:	a3 78       	lsl	r8,0x3
8000aa4a:	0a 08       	add	r8,r5
8000aa4c:	a3 78       	lsl	r8,0x3
8000aa4e:	f2 08 00 08 	add	r8,r9,r8
8000aa52:	f0 eb 00 00 	st.d	r8[0],r10
	P2[axis][0][1] = FPF01;
8000aa56:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000aa5a:	ec fa 00 1c 	ld.w	r10,r6[28]
8000aa5e:	12 98       	mov	r8,r9
8000aa60:	a3 78       	lsl	r8,0x3
8000aa62:	12 08       	add	r8,r9
8000aa64:	f0 cb ff ff 	sub	r11,r8,-1
8000aa68:	ee e8 ff c0 	ld.d	r8,r7[-64]
8000aa6c:	f4 0b 08 38 	st.d	r10[r11<<0x3],r8
	P2[axis][0][2] = FPF02;
8000aa70:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000aa74:	ec fa 00 1c 	ld.w	r10,r6[28]
8000aa78:	12 98       	mov	r8,r9
8000aa7a:	a3 78       	lsl	r8,0x3
8000aa7c:	12 08       	add	r8,r9
8000aa7e:	a3 78       	lsl	r8,0x3
8000aa80:	f4 08 00 08 	add	r8,r10,r8
8000aa84:	f0 ca ff f0 	sub	r10,r8,-16
8000aa88:	ee e8 ff c8 	ld.d	r8,r7[-56]
8000aa8c:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][1][0] = FPF10;
8000aa90:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000aa94:	ec fa 00 1c 	ld.w	r10,r6[28]
8000aa98:	12 98       	mov	r8,r9
8000aa9a:	a3 78       	lsl	r8,0x3
8000aa9c:	12 08       	add	r8,r9
8000aa9e:	a3 78       	lsl	r8,0x3
8000aaa0:	f4 08 00 08 	add	r8,r10,r8
8000aaa4:	f0 ca ff e8 	sub	r10,r8,-24
8000aaa8:	ee e8 ff d0 	ld.d	r8,r7[-48]
8000aaac:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][1][1] = FPF11 + Q2[axis][SPEED];
8000aab0:	ee f5 ff ac 	ld.w	r5,r7[-84]
8000aab4:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000aab8:	ec fa 00 d8 	ld.w	r10,r6[216]
8000aabc:	12 98       	mov	r8,r9
8000aabe:	a1 78       	lsl	r8,0x1
8000aac0:	12 08       	add	r8,r9
8000aac2:	2f f8       	sub	r8,-1
8000aac4:	f4 08 02 3a 	ld.d	r10,r10[r8<<0x3]
8000aac8:	ee e8 ff d8 	ld.d	r8,r7[-40]
8000aacc:	f0 16 00 05 	mcall	r6[20]
8000aad0:	14 98       	mov	r8,r10
8000aad2:	16 99       	mov	r9,r11
8000aad4:	10 9a       	mov	r10,r8
8000aad6:	12 9b       	mov	r11,r9
8000aad8:	ec f9 00 1c 	ld.w	r9,r6[28]
8000aadc:	0a 98       	mov	r8,r5
8000aade:	a3 78       	lsl	r8,0x3
8000aae0:	0a 08       	add	r8,r5
8000aae2:	a3 78       	lsl	r8,0x3
8000aae4:	f2 08 00 08 	add	r8,r9,r8
8000aae8:	2e 08       	sub	r8,-32
8000aaea:	f0 eb 00 00 	st.d	r8[0],r10
	P2[axis][1][2] = FPF12;
8000aaee:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000aaf2:	ec fa 00 1c 	ld.w	r10,r6[28]
8000aaf6:	12 98       	mov	r8,r9
8000aaf8:	a3 78       	lsl	r8,0x3
8000aafa:	12 08       	add	r8,r9
8000aafc:	a3 78       	lsl	r8,0x3
8000aafe:	f4 08 00 08 	add	r8,r10,r8
8000ab02:	f0 ca ff d8 	sub	r10,r8,-40
8000ab06:	ee e8 ff e0 	ld.d	r8,r7[-32]
8000ab0a:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][2][0] = FPF20;
8000ab0e:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000ab12:	ec fa 00 1c 	ld.w	r10,r6[28]
8000ab16:	12 98       	mov	r8,r9
8000ab18:	a3 78       	lsl	r8,0x3
8000ab1a:	12 08       	add	r8,r9
8000ab1c:	a3 78       	lsl	r8,0x3
8000ab1e:	f4 08 00 08 	add	r8,r10,r8
8000ab22:	f0 ca ff d0 	sub	r10,r8,-48
8000ab26:	ee e8 ff e8 	ld.d	r8,r7[-24]
8000ab2a:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][2][1] = FPF21;
8000ab2e:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000ab32:	ec fa 00 1c 	ld.w	r10,r6[28]
8000ab36:	12 98       	mov	r8,r9
8000ab38:	a3 78       	lsl	r8,0x3
8000ab3a:	12 08       	add	r8,r9
8000ab3c:	a3 78       	lsl	r8,0x3
8000ab3e:	f4 08 00 08 	add	r8,r10,r8
8000ab42:	f0 ca ff c8 	sub	r10,r8,-56
8000ab46:	ee e8 ff f0 	ld.d	r8,r7[-16]
8000ab4a:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][2][2] = FPF22 + Q2[axis][BIAIS];
8000ab4e:	ee f5 ff ac 	ld.w	r5,r7[-84]
8000ab52:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000ab56:	ec fa 00 d8 	ld.w	r10,r6[216]
8000ab5a:	12 98       	mov	r8,r9
8000ab5c:	a1 78       	lsl	r8,0x1
8000ab5e:	12 08       	add	r8,r9
8000ab60:	a3 78       	lsl	r8,0x3
8000ab62:	f4 08 00 08 	add	r8,r10,r8
8000ab66:	2f 08       	sub	r8,-16
8000ab68:	f0 ea 00 00 	ld.d	r10,r8[0]
8000ab6c:	ee e8 ff f8 	ld.d	r8,r7[-8]
8000ab70:	f0 16 00 05 	mcall	r6[20]
8000ab74:	14 98       	mov	r8,r10
8000ab76:	16 99       	mov	r9,r11
8000ab78:	10 9a       	mov	r10,r8
8000ab7a:	12 9b       	mov	r11,r9
8000ab7c:	ec f9 00 1c 	ld.w	r9,r6[28]
8000ab80:	0a 98       	mov	r8,r5
8000ab82:	a3 78       	lsl	r8,0x3
8000ab84:	0a 08       	add	r8,r5
8000ab86:	a3 78       	lsl	r8,0x3
8000ab88:	f2 08 00 08 	add	r8,r9,r8
8000ab8c:	2c 08       	sub	r8,-64
8000ab8e:	f0 eb 00 00 	st.d	r8[0],r10
}
8000ab92:	2c dd       	sub	sp,-204
8000ab94:	d8 32       	popm	r0-r7,pc
8000ab96:	00 00       	add	r0,r0
8000ab98:	80 00       	ld.sh	r0,r0[0x0]
8000ab9a:	9d 1e       	st.w	lr[0x4],lr

8000ab9c <e_kalman_predict_hf>:


void e_kalman_predict_hf(int axis, float accel_meas, float dt)
{
8000ab9c:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
8000aba0:	1a 97       	mov	r7,sp
8000aba2:	20 fd       	sub	sp,60
8000aba4:	fe f6 05 88 	ld.w	r6,pc[1416]
8000aba8:	1e 26       	rsub	r6,pc
8000abaa:	ef 4c ff dc 	st.w	r7[-36],r12
8000abae:	ef 4b ff d8 	st.w	r7[-40],r11
8000abb2:	ef 4a ff d4 	st.w	r7[-44],r10
	double FPF00,FPF01,FPF10,FPF11;
	
	centralData->estimation.state[axis][POSITION] = centralData->estimation.state[axis][POSITION] + dt * centralData->estimation.state[axis][SPEED] + dt*dt*accel_meas;
8000abb6:	ec f8 00 00 	ld.w	r8,r6[0]
8000abba:	70 01       	ld.w	r1,r8[0x0]
8000abbc:	ee f5 ff dc 	ld.w	r5,r7[-36]
8000abc0:	ec f8 00 00 	ld.w	r8,r6[0]
8000abc4:	70 0a       	ld.w	r10,r8[0x0]
8000abc6:	ee f9 ff dc 	ld.w	r9,r7[-36]
8000abca:	12 98       	mov	r8,r9
8000abcc:	a1 78       	lsl	r8,0x1
8000abce:	12 08       	add	r8,r9
8000abd0:	a3 78       	lsl	r8,0x3
8000abd2:	f4 08 00 08 	add	r8,r10,r8
8000abd6:	f0 c8 f4 a4 	sub	r8,r8,-2908
8000abda:	f0 e2 00 00 	ld.d	r2,r8[0]
8000abde:	ee fc ff d4 	ld.w	r12,r7[-44]
8000abe2:	f0 16 00 02 	mcall	r6[8]
8000abe6:	ec f8 00 00 	ld.w	r8,r6[0]
8000abea:	70 0c       	ld.w	r12,r8[0x0]
8000abec:	ee f9 ff dc 	ld.w	r9,r7[-36]
8000abf0:	12 98       	mov	r8,r9
8000abf2:	a1 78       	lsl	r8,0x1
8000abf4:	12 08       	add	r8,r9
8000abf6:	2f f8       	sub	r8,-1
8000abf8:	a3 78       	lsl	r8,0x3
8000abfa:	f8 08 00 08 	add	r8,r12,r8
8000abfe:	f0 e8 0b 5c 	ld.d	r8,r8[2908]
8000ac02:	f0 16 00 03 	mcall	r6[12]
8000ac06:	14 98       	mov	r8,r10
8000ac08:	16 99       	mov	r9,r11
8000ac0a:	04 9a       	mov	r10,r2
8000ac0c:	06 9b       	mov	r11,r3
8000ac0e:	f0 16 00 05 	mcall	r6[20]
8000ac12:	14 98       	mov	r8,r10
8000ac14:	16 99       	mov	r9,r11
8000ac16:	10 92       	mov	r2,r8
8000ac18:	12 93       	mov	r3,r9
8000ac1a:	ee f9 ff d4 	ld.w	r9,r7[-44]
8000ac1e:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000ac22:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000ac26:	ee f8 ff d8 	ld.w	r8,r7[-40]
8000ac2a:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8000ac2e:	10 9c       	mov	r12,r8
8000ac30:	f0 16 00 02 	mcall	r6[8]
8000ac34:	14 98       	mov	r8,r10
8000ac36:	16 99       	mov	r9,r11
8000ac38:	04 9a       	mov	r10,r2
8000ac3a:	06 9b       	mov	r11,r3
8000ac3c:	f0 16 00 05 	mcall	r6[20]
8000ac40:	14 98       	mov	r8,r10
8000ac42:	16 99       	mov	r9,r11
8000ac44:	10 9a       	mov	r10,r8
8000ac46:	12 9b       	mov	r11,r9
8000ac48:	0a 98       	mov	r8,r5
8000ac4a:	a1 78       	lsl	r8,0x1
8000ac4c:	0a 08       	add	r8,r5
8000ac4e:	a3 78       	lsl	r8,0x3
8000ac50:	e2 08 00 08 	add	r8,r1,r8
8000ac54:	f0 c8 f4 a4 	sub	r8,r8,-2908
8000ac58:	f0 eb 00 00 	st.d	r8[0],r10
	centralData->estimation.state[axis][POSITION] = centralData->estimation.state[axis][POSITION] + dt * centralData->estimation.state[axis][SPEED];
8000ac5c:	ec f8 00 00 	ld.w	r8,r6[0]
8000ac60:	70 01       	ld.w	r1,r8[0x0]
8000ac62:	ee f5 ff dc 	ld.w	r5,r7[-36]
8000ac66:	ec f8 00 00 	ld.w	r8,r6[0]
8000ac6a:	70 0a       	ld.w	r10,r8[0x0]
8000ac6c:	ee f9 ff dc 	ld.w	r9,r7[-36]
8000ac70:	12 98       	mov	r8,r9
8000ac72:	a1 78       	lsl	r8,0x1
8000ac74:	12 08       	add	r8,r9
8000ac76:	a3 78       	lsl	r8,0x3
8000ac78:	f4 08 00 08 	add	r8,r10,r8
8000ac7c:	f0 c8 f4 a4 	sub	r8,r8,-2908
8000ac80:	f0 e2 00 00 	ld.d	r2,r8[0]
8000ac84:	ee fc ff d4 	ld.w	r12,r7[-44]
8000ac88:	f0 16 00 02 	mcall	r6[8]
8000ac8c:	ec f8 00 00 	ld.w	r8,r6[0]
8000ac90:	70 0c       	ld.w	r12,r8[0x0]
8000ac92:	ee f9 ff dc 	ld.w	r9,r7[-36]
8000ac96:	12 98       	mov	r8,r9
8000ac98:	a1 78       	lsl	r8,0x1
8000ac9a:	12 08       	add	r8,r9
8000ac9c:	2f f8       	sub	r8,-1
8000ac9e:	a3 78       	lsl	r8,0x3
8000aca0:	f8 08 00 08 	add	r8,r12,r8
8000aca4:	f0 e8 0b 5c 	ld.d	r8,r8[2908]
8000aca8:	f0 16 00 03 	mcall	r6[12]
8000acac:	14 98       	mov	r8,r10
8000acae:	16 99       	mov	r9,r11
8000acb0:	04 9a       	mov	r10,r2
8000acb2:	06 9b       	mov	r11,r3
8000acb4:	f0 16 00 05 	mcall	r6[20]
8000acb8:	14 98       	mov	r8,r10
8000acba:	16 99       	mov	r9,r11
8000acbc:	10 9a       	mov	r10,r8
8000acbe:	12 9b       	mov	r11,r9
8000acc0:	0a 98       	mov	r8,r5
8000acc2:	a1 78       	lsl	r8,0x1
8000acc4:	0a 08       	add	r8,r5
8000acc6:	a3 78       	lsl	r8,0x3
8000acc8:	e2 08 00 08 	add	r8,r1,r8
8000accc:	f0 c8 f4 a4 	sub	r8,r8,-2908
8000acd0:	f0 eb 00 00 	st.d	r8[0],r10
	
	FPF00 = P[axis][0][0] + dt * (P[axis][1][0] + P[axis][0][1] + dt * P[axis][1][1]);
8000acd4:	ee f9 ff dc 	ld.w	r9,r7[-36]
8000acd8:	ec fa 00 18 	ld.w	r10,r6[24]
8000acdc:	12 98       	mov	r8,r9
8000acde:	a3 78       	lsl	r8,0x3
8000ace0:	12 08       	add	r8,r9
8000ace2:	a3 78       	lsl	r8,0x3
8000ace4:	f4 08 00 08 	add	r8,r10,r8
8000ace8:	f0 e2 00 00 	ld.d	r2,r8[0]
8000acec:	ee fc ff d4 	ld.w	r12,r7[-44]
8000acf0:	f0 16 00 02 	mcall	r6[8]
8000acf4:	14 90       	mov	r0,r10
8000acf6:	16 91       	mov	r1,r11
8000acf8:	ee f9 ff dc 	ld.w	r9,r7[-36]
8000acfc:	ec fa 00 18 	ld.w	r10,r6[24]
8000ad00:	12 98       	mov	r8,r9
8000ad02:	a3 78       	lsl	r8,0x3
8000ad04:	12 08       	add	r8,r9
8000ad06:	a3 78       	lsl	r8,0x3
8000ad08:	f4 08 00 08 	add	r8,r10,r8
8000ad0c:	2e 88       	sub	r8,-24
8000ad0e:	f0 ea 00 00 	ld.d	r10,r8[0]
8000ad12:	ee f9 ff dc 	ld.w	r9,r7[-36]
8000ad16:	ec fc 00 18 	ld.w	r12,r6[24]
8000ad1a:	12 98       	mov	r8,r9
8000ad1c:	a3 78       	lsl	r8,0x3
8000ad1e:	12 08       	add	r8,r9
8000ad20:	2f f8       	sub	r8,-1
8000ad22:	f8 08 02 38 	ld.d	r8,r12[r8<<0x3]
8000ad26:	f0 16 00 05 	mcall	r6[20]
8000ad2a:	14 98       	mov	r8,r10
8000ad2c:	16 99       	mov	r9,r11
8000ad2e:	ee e9 ff c4 	st.d	r7[-60],r8
8000ad32:	ee fc ff d4 	ld.w	r12,r7[-44]
8000ad36:	f0 16 00 02 	mcall	r6[8]
8000ad3a:	ee f9 ff dc 	ld.w	r9,r7[-36]
8000ad3e:	ec fc 00 18 	ld.w	r12,r6[24]
8000ad42:	12 98       	mov	r8,r9
8000ad44:	a3 78       	lsl	r8,0x3
8000ad46:	12 08       	add	r8,r9
8000ad48:	a3 78       	lsl	r8,0x3
8000ad4a:	f8 08 00 08 	add	r8,r12,r8
8000ad4e:	2e 08       	sub	r8,-32
8000ad50:	f0 e8 00 00 	ld.d	r8,r8[0]
8000ad54:	f0 16 00 03 	mcall	r6[12]
8000ad58:	14 98       	mov	r8,r10
8000ad5a:	16 99       	mov	r9,r11
8000ad5c:	ee ea ff c4 	ld.d	r10,r7[-60]
8000ad60:	f0 16 00 05 	mcall	r6[20]
8000ad64:	14 98       	mov	r8,r10
8000ad66:	16 99       	mov	r9,r11
8000ad68:	00 9a       	mov	r10,r0
8000ad6a:	02 9b       	mov	r11,r1
8000ad6c:	f0 16 00 03 	mcall	r6[12]
8000ad70:	14 98       	mov	r8,r10
8000ad72:	16 99       	mov	r9,r11
8000ad74:	04 9a       	mov	r10,r2
8000ad76:	06 9b       	mov	r11,r3
8000ad78:	f0 16 00 05 	mcall	r6[20]
8000ad7c:	14 98       	mov	r8,r10
8000ad7e:	16 99       	mov	r9,r11
8000ad80:	ee e9 ff e0 	st.d	r7[-32],r8
	FPF01 = P[axis][0][1] + dt * P[axis][1][1];
8000ad84:	ee f9 ff dc 	ld.w	r9,r7[-36]
8000ad88:	ec fa 00 18 	ld.w	r10,r6[24]
8000ad8c:	12 98       	mov	r8,r9
8000ad8e:	a3 78       	lsl	r8,0x3
8000ad90:	12 08       	add	r8,r9
8000ad92:	2f f8       	sub	r8,-1
8000ad94:	f4 08 02 32 	ld.d	r2,r10[r8<<0x3]
8000ad98:	ee fc ff d4 	ld.w	r12,r7[-44]
8000ad9c:	f0 16 00 02 	mcall	r6[8]
8000ada0:	ee f9 ff dc 	ld.w	r9,r7[-36]
8000ada4:	ec fc 00 18 	ld.w	r12,r6[24]
8000ada8:	12 98       	mov	r8,r9
8000adaa:	a3 78       	lsl	r8,0x3
8000adac:	12 08       	add	r8,r9
8000adae:	a3 78       	lsl	r8,0x3
8000adb0:	f8 08 00 08 	add	r8,r12,r8
8000adb4:	2e 08       	sub	r8,-32
8000adb6:	f0 e8 00 00 	ld.d	r8,r8[0]
8000adba:	f0 16 00 03 	mcall	r6[12]
8000adbe:	14 98       	mov	r8,r10
8000adc0:	16 99       	mov	r9,r11
8000adc2:	04 9a       	mov	r10,r2
8000adc4:	06 9b       	mov	r11,r3
8000adc6:	f0 16 00 05 	mcall	r6[20]
8000adca:	14 98       	mov	r8,r10
8000adcc:	16 99       	mov	r9,r11
8000adce:	ee e9 ff e8 	st.d	r7[-24],r8
	FPF10 = P[axis][1][0] + dt * P[axis][1][1];
8000add2:	ee f9 ff dc 	ld.w	r9,r7[-36]
8000add6:	ec fa 00 18 	ld.w	r10,r6[24]
8000adda:	12 98       	mov	r8,r9
8000addc:	a3 78       	lsl	r8,0x3
8000adde:	12 08       	add	r8,r9
8000ade0:	a3 78       	lsl	r8,0x3
8000ade2:	f4 08 00 08 	add	r8,r10,r8
8000ade6:	2e 88       	sub	r8,-24
8000ade8:	f0 e2 00 00 	ld.d	r2,r8[0]
8000adec:	ee fc ff d4 	ld.w	r12,r7[-44]
8000adf0:	f0 16 00 02 	mcall	r6[8]
8000adf4:	ee f9 ff dc 	ld.w	r9,r7[-36]
8000adf8:	ec fc 00 18 	ld.w	r12,r6[24]
8000adfc:	12 98       	mov	r8,r9
8000adfe:	a3 78       	lsl	r8,0x3
8000ae00:	12 08       	add	r8,r9
8000ae02:	a3 78       	lsl	r8,0x3
8000ae04:	f8 08 00 08 	add	r8,r12,r8
8000ae08:	2e 08       	sub	r8,-32
8000ae0a:	f0 e8 00 00 	ld.d	r8,r8[0]
8000ae0e:	f0 16 00 03 	mcall	r6[12]
8000ae12:	14 98       	mov	r8,r10
8000ae14:	16 99       	mov	r9,r11
8000ae16:	04 9a       	mov	r10,r2
8000ae18:	06 9b       	mov	r11,r3
8000ae1a:	f0 16 00 05 	mcall	r6[20]
8000ae1e:	14 98       	mov	r8,r10
8000ae20:	16 99       	mov	r9,r11
8000ae22:	ee e9 ff f0 	st.d	r7[-16],r8
	FPF11 = P[axis][1][1];
8000ae26:	ee f9 ff dc 	ld.w	r9,r7[-36]
8000ae2a:	ec fa 00 18 	ld.w	r10,r6[24]
8000ae2e:	12 98       	mov	r8,r9
8000ae30:	a3 78       	lsl	r8,0x3
8000ae32:	12 08       	add	r8,r9
8000ae34:	a3 78       	lsl	r8,0x3
8000ae36:	f4 08 00 08 	add	r8,r10,r8
8000ae3a:	2e 08       	sub	r8,-32
8000ae3c:	f0 e8 00 00 	ld.d	r8,r8[0]
8000ae40:	ee e9 ff f8 	st.d	r7[-8],r8
	
	P[axis][0][0] = FPF00 + Q[axis][POSITION];
8000ae44:	ee f5 ff dc 	ld.w	r5,r7[-36]
8000ae48:	ee f9 ff dc 	ld.w	r9,r7[-36]
8000ae4c:	ec fa 00 d4 	ld.w	r10,r6[212]
8000ae50:	12 98       	mov	r8,r9
8000ae52:	a1 78       	lsl	r8,0x1
8000ae54:	12 08       	add	r8,r9
8000ae56:	a3 78       	lsl	r8,0x3
8000ae58:	f4 08 00 08 	add	r8,r10,r8
8000ae5c:	f0 ea 00 00 	ld.d	r10,r8[0]
8000ae60:	ee e8 ff e0 	ld.d	r8,r7[-32]
8000ae64:	f0 16 00 05 	mcall	r6[20]
8000ae68:	14 98       	mov	r8,r10
8000ae6a:	16 99       	mov	r9,r11
8000ae6c:	10 9a       	mov	r10,r8
8000ae6e:	12 9b       	mov	r11,r9
8000ae70:	ec f9 00 18 	ld.w	r9,r6[24]
8000ae74:	0a 98       	mov	r8,r5
8000ae76:	a3 78       	lsl	r8,0x3
8000ae78:	0a 08       	add	r8,r5
8000ae7a:	a3 78       	lsl	r8,0x3
8000ae7c:	f2 08 00 08 	add	r8,r9,r8
8000ae80:	f0 eb 00 00 	st.d	r8[0],r10
	P[axis][0][1] = FPF01;
8000ae84:	ee f9 ff dc 	ld.w	r9,r7[-36]
8000ae88:	ec fa 00 18 	ld.w	r10,r6[24]
8000ae8c:	12 98       	mov	r8,r9
8000ae8e:	a3 78       	lsl	r8,0x3
8000ae90:	12 08       	add	r8,r9
8000ae92:	f0 cb ff ff 	sub	r11,r8,-1
8000ae96:	ee e8 ff e8 	ld.d	r8,r7[-24]
8000ae9a:	f4 0b 08 38 	st.d	r10[r11<<0x3],r8
	P[axis][1][0] = FPF10;
8000ae9e:	ee f9 ff dc 	ld.w	r9,r7[-36]
8000aea2:	ec fa 00 18 	ld.w	r10,r6[24]
8000aea6:	12 98       	mov	r8,r9
8000aea8:	a3 78       	lsl	r8,0x3
8000aeaa:	12 08       	add	r8,r9
8000aeac:	a3 78       	lsl	r8,0x3
8000aeae:	f4 08 00 08 	add	r8,r10,r8
8000aeb2:	f0 ca ff e8 	sub	r10,r8,-24
8000aeb6:	ee e8 ff f0 	ld.d	r8,r7[-16]
8000aeba:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][1][1] = FPF11 + Q[axis][SPEED];
8000aebe:	ee f5 ff dc 	ld.w	r5,r7[-36]
8000aec2:	ee f9 ff dc 	ld.w	r9,r7[-36]
8000aec6:	ec fa 00 d4 	ld.w	r10,r6[212]
8000aeca:	12 98       	mov	r8,r9
8000aecc:	a1 78       	lsl	r8,0x1
8000aece:	12 08       	add	r8,r9
8000aed0:	2f f8       	sub	r8,-1
8000aed2:	f4 08 02 3a 	ld.d	r10,r10[r8<<0x3]
8000aed6:	ee e8 ff f8 	ld.d	r8,r7[-8]
8000aeda:	f0 16 00 05 	mcall	r6[20]
8000aede:	14 98       	mov	r8,r10
8000aee0:	16 99       	mov	r9,r11
8000aee2:	10 9a       	mov	r10,r8
8000aee4:	12 9b       	mov	r11,r9
8000aee6:	ec f9 00 18 	ld.w	r9,r6[24]
8000aeea:	0a 98       	mov	r8,r5
8000aeec:	a3 78       	lsl	r8,0x3
8000aeee:	0a 08       	add	r8,r5
8000aef0:	a3 78       	lsl	r8,0x3
8000aef2:	f2 08 00 08 	add	r8,r9,r8
8000aef6:	2e 08       	sub	r8,-32
8000aef8:	f0 eb 00 00 	st.d	r8[0],r10
	
	/*************************************************************************************/
	FPF00 = P2[axis][0][0] + dt * (P2[axis][1][0] + P2[axis][0][1] + dt * P2[axis][1][1]);
8000aefc:	ee f9 ff dc 	ld.w	r9,r7[-36]
8000af00:	ec fa 00 1c 	ld.w	r10,r6[28]
8000af04:	12 98       	mov	r8,r9
8000af06:	a3 78       	lsl	r8,0x3
8000af08:	12 08       	add	r8,r9
8000af0a:	a3 78       	lsl	r8,0x3
8000af0c:	f4 08 00 08 	add	r8,r10,r8
8000af10:	f0 e2 00 00 	ld.d	r2,r8[0]
8000af14:	ee fc ff d4 	ld.w	r12,r7[-44]
8000af18:	f0 16 00 02 	mcall	r6[8]
8000af1c:	14 90       	mov	r0,r10
8000af1e:	16 91       	mov	r1,r11
8000af20:	ee f9 ff dc 	ld.w	r9,r7[-36]
8000af24:	ec fa 00 1c 	ld.w	r10,r6[28]
8000af28:	12 98       	mov	r8,r9
8000af2a:	a3 78       	lsl	r8,0x3
8000af2c:	12 08       	add	r8,r9
8000af2e:	a3 78       	lsl	r8,0x3
8000af30:	f4 08 00 08 	add	r8,r10,r8
8000af34:	2e 88       	sub	r8,-24
8000af36:	f0 ea 00 00 	ld.d	r10,r8[0]
8000af3a:	ee f9 ff dc 	ld.w	r9,r7[-36]
8000af3e:	ec fc 00 1c 	ld.w	r12,r6[28]
8000af42:	12 98       	mov	r8,r9
8000af44:	a3 78       	lsl	r8,0x3
8000af46:	12 08       	add	r8,r9
8000af48:	2f f8       	sub	r8,-1
8000af4a:	f8 08 02 38 	ld.d	r8,r12[r8<<0x3]
8000af4e:	f0 16 00 05 	mcall	r6[20]
8000af52:	14 98       	mov	r8,r10
8000af54:	16 99       	mov	r9,r11
8000af56:	ee e9 ff cc 	st.d	r7[-52],r8
8000af5a:	ee fc ff d4 	ld.w	r12,r7[-44]
8000af5e:	f0 16 00 02 	mcall	r6[8]
8000af62:	ee f9 ff dc 	ld.w	r9,r7[-36]
8000af66:	ec fc 00 1c 	ld.w	r12,r6[28]
8000af6a:	12 98       	mov	r8,r9
8000af6c:	a3 78       	lsl	r8,0x3
8000af6e:	12 08       	add	r8,r9
8000af70:	a3 78       	lsl	r8,0x3
8000af72:	f8 08 00 08 	add	r8,r12,r8
8000af76:	2e 08       	sub	r8,-32
8000af78:	f0 e8 00 00 	ld.d	r8,r8[0]
8000af7c:	f0 16 00 03 	mcall	r6[12]
8000af80:	14 98       	mov	r8,r10
8000af82:	16 99       	mov	r9,r11
8000af84:	ee ea ff cc 	ld.d	r10,r7[-52]
8000af88:	f0 16 00 05 	mcall	r6[20]
8000af8c:	14 98       	mov	r8,r10
8000af8e:	16 99       	mov	r9,r11
8000af90:	00 9a       	mov	r10,r0
8000af92:	02 9b       	mov	r11,r1
8000af94:	f0 16 00 03 	mcall	r6[12]
8000af98:	14 98       	mov	r8,r10
8000af9a:	16 99       	mov	r9,r11
8000af9c:	04 9a       	mov	r10,r2
8000af9e:	06 9b       	mov	r11,r3
8000afa0:	f0 16 00 05 	mcall	r6[20]
8000afa4:	14 98       	mov	r8,r10
8000afa6:	16 99       	mov	r9,r11
8000afa8:	ee e9 ff e0 	st.d	r7[-32],r8
	FPF01 = P2[axis][0][1] + dt * P2[axis][1][1];
8000afac:	ee f9 ff dc 	ld.w	r9,r7[-36]
8000afb0:	ec fa 00 1c 	ld.w	r10,r6[28]
8000afb4:	12 98       	mov	r8,r9
8000afb6:	a3 78       	lsl	r8,0x3
8000afb8:	12 08       	add	r8,r9
8000afba:	2f f8       	sub	r8,-1
8000afbc:	f4 08 02 32 	ld.d	r2,r10[r8<<0x3]
8000afc0:	ee fc ff d4 	ld.w	r12,r7[-44]
8000afc4:	f0 16 00 02 	mcall	r6[8]
8000afc8:	ee f9 ff dc 	ld.w	r9,r7[-36]
8000afcc:	ec fc 00 1c 	ld.w	r12,r6[28]
8000afd0:	12 98       	mov	r8,r9
8000afd2:	a3 78       	lsl	r8,0x3
8000afd4:	12 08       	add	r8,r9
8000afd6:	a3 78       	lsl	r8,0x3
8000afd8:	f8 08 00 08 	add	r8,r12,r8
8000afdc:	2e 08       	sub	r8,-32
8000afde:	f0 e8 00 00 	ld.d	r8,r8[0]
8000afe2:	f0 16 00 03 	mcall	r6[12]
8000afe6:	14 98       	mov	r8,r10
8000afe8:	16 99       	mov	r9,r11
8000afea:	04 9a       	mov	r10,r2
8000afec:	06 9b       	mov	r11,r3
8000afee:	f0 16 00 05 	mcall	r6[20]
8000aff2:	14 98       	mov	r8,r10
8000aff4:	16 99       	mov	r9,r11
8000aff6:	ee e9 ff e8 	st.d	r7[-24],r8
	FPF10 = P2[axis][1][0] + dt * P2[axis][1][1];
8000affa:	ee f9 ff dc 	ld.w	r9,r7[-36]
8000affe:	ec fa 00 1c 	ld.w	r10,r6[28]
8000b002:	12 98       	mov	r8,r9
8000b004:	a3 78       	lsl	r8,0x3
8000b006:	12 08       	add	r8,r9
8000b008:	a3 78       	lsl	r8,0x3
8000b00a:	f4 08 00 08 	add	r8,r10,r8
8000b00e:	2e 88       	sub	r8,-24
8000b010:	f0 e2 00 00 	ld.d	r2,r8[0]
8000b014:	ee fc ff d4 	ld.w	r12,r7[-44]
8000b018:	f0 16 00 02 	mcall	r6[8]
8000b01c:	ee f9 ff dc 	ld.w	r9,r7[-36]
8000b020:	ec fc 00 1c 	ld.w	r12,r6[28]
8000b024:	12 98       	mov	r8,r9
8000b026:	a3 78       	lsl	r8,0x3
8000b028:	12 08       	add	r8,r9
8000b02a:	a3 78       	lsl	r8,0x3
8000b02c:	f8 08 00 08 	add	r8,r12,r8
8000b030:	2e 08       	sub	r8,-32
8000b032:	f0 e8 00 00 	ld.d	r8,r8[0]
8000b036:	f0 16 00 03 	mcall	r6[12]
8000b03a:	14 98       	mov	r8,r10
8000b03c:	16 99       	mov	r9,r11
8000b03e:	04 9a       	mov	r10,r2
8000b040:	06 9b       	mov	r11,r3
8000b042:	f0 16 00 05 	mcall	r6[20]
8000b046:	14 98       	mov	r8,r10
8000b048:	16 99       	mov	r9,r11
8000b04a:	ee e9 ff f0 	st.d	r7[-16],r8
	FPF11 = P2[axis][1][1];
8000b04e:	ee f9 ff dc 	ld.w	r9,r7[-36]
8000b052:	ec fa 00 1c 	ld.w	r10,r6[28]
8000b056:	12 98       	mov	r8,r9
8000b058:	a3 78       	lsl	r8,0x3
8000b05a:	12 08       	add	r8,r9
8000b05c:	a3 78       	lsl	r8,0x3
8000b05e:	f4 08 00 08 	add	r8,r10,r8
8000b062:	2e 08       	sub	r8,-32
8000b064:	f0 e8 00 00 	ld.d	r8,r8[0]
8000b068:	ee e9 ff f8 	st.d	r7[-8],r8
	
	P2[axis][0][0] = FPF00 + Q2[axis][POSITION];
8000b06c:	ee f5 ff dc 	ld.w	r5,r7[-36]
8000b070:	ee f9 ff dc 	ld.w	r9,r7[-36]
8000b074:	ec fa 00 d8 	ld.w	r10,r6[216]
8000b078:	12 98       	mov	r8,r9
8000b07a:	a1 78       	lsl	r8,0x1
8000b07c:	12 08       	add	r8,r9
8000b07e:	a3 78       	lsl	r8,0x3
8000b080:	f4 08 00 08 	add	r8,r10,r8
8000b084:	f0 ea 00 00 	ld.d	r10,r8[0]
8000b088:	ee e8 ff e0 	ld.d	r8,r7[-32]
8000b08c:	f0 16 00 05 	mcall	r6[20]
8000b090:	14 98       	mov	r8,r10
8000b092:	16 99       	mov	r9,r11
8000b094:	10 9a       	mov	r10,r8
8000b096:	12 9b       	mov	r11,r9
8000b098:	ec f9 00 1c 	ld.w	r9,r6[28]
8000b09c:	0a 98       	mov	r8,r5
8000b09e:	a3 78       	lsl	r8,0x3
8000b0a0:	0a 08       	add	r8,r5
8000b0a2:	a3 78       	lsl	r8,0x3
8000b0a4:	f2 08 00 08 	add	r8,r9,r8
8000b0a8:	f0 eb 00 00 	st.d	r8[0],r10
	P2[axis][0][1] = FPF01;
8000b0ac:	ee f9 ff dc 	ld.w	r9,r7[-36]
8000b0b0:	ec fa 00 1c 	ld.w	r10,r6[28]
8000b0b4:	12 98       	mov	r8,r9
8000b0b6:	a3 78       	lsl	r8,0x3
8000b0b8:	12 08       	add	r8,r9
8000b0ba:	f0 cb ff ff 	sub	r11,r8,-1
8000b0be:	ee e8 ff e8 	ld.d	r8,r7[-24]
8000b0c2:	f4 0b 08 38 	st.d	r10[r11<<0x3],r8
	P2[axis][1][0] = FPF10;
8000b0c6:	ee f9 ff dc 	ld.w	r9,r7[-36]
8000b0ca:	ec fa 00 1c 	ld.w	r10,r6[28]
8000b0ce:	12 98       	mov	r8,r9
8000b0d0:	a3 78       	lsl	r8,0x3
8000b0d2:	12 08       	add	r8,r9
8000b0d4:	a3 78       	lsl	r8,0x3
8000b0d6:	f4 08 00 08 	add	r8,r10,r8
8000b0da:	f0 ca ff e8 	sub	r10,r8,-24
8000b0de:	ee e8 ff f0 	ld.d	r8,r7[-16]
8000b0e2:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][1][1] = FPF11 + Q2[axis][SPEED];
8000b0e6:	ee f5 ff dc 	ld.w	r5,r7[-36]
8000b0ea:	ee f9 ff dc 	ld.w	r9,r7[-36]
8000b0ee:	ec fa 00 d8 	ld.w	r10,r6[216]
8000b0f2:	12 98       	mov	r8,r9
8000b0f4:	a1 78       	lsl	r8,0x1
8000b0f6:	12 08       	add	r8,r9
8000b0f8:	2f f8       	sub	r8,-1
8000b0fa:	f4 08 02 3a 	ld.d	r10,r10[r8<<0x3]
8000b0fe:	ee e8 ff f8 	ld.d	r8,r7[-8]
8000b102:	f0 16 00 05 	mcall	r6[20]
8000b106:	14 98       	mov	r8,r10
8000b108:	16 99       	mov	r9,r11
8000b10a:	10 9a       	mov	r10,r8
8000b10c:	12 9b       	mov	r11,r9
8000b10e:	ec f9 00 1c 	ld.w	r9,r6[28]
8000b112:	0a 98       	mov	r8,r5
8000b114:	a3 78       	lsl	r8,0x3
8000b116:	0a 08       	add	r8,r5
8000b118:	a3 78       	lsl	r8,0x3
8000b11a:	f2 08 00 08 	add	r8,r9,r8
8000b11e:	2e 08       	sub	r8,-32
8000b120:	f0 eb 00 00 	st.d	r8[0],r10
}
8000b124:	2f 1d       	sub	sp,-60
8000b126:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
8000b12a:	00 00       	add	r0,r0
8000b12c:	80 00       	ld.sh	r0,r0[0x0]
8000b12e:	aa 2c       	st.h	r5[0x4],r12

8000b130 <e_kalman_update_position>:

// update covariance
Pp = Pm - K*H*Pm;
*/
void e_kalman_update_position (int axis, double position_meas)
{
8000b130:	eb cd 40 ee 	pushm	r1-r3,r5-r7,lr
8000b134:	1a 97       	mov	r7,sp
8000b136:	fa cd 00 e4 	sub	sp,sp,228
8000b13a:	fe f6 0b fe 	ld.w	r6,pc[3070]
8000b13e:	1e 26       	rsub	r6,pc
8000b140:	ef 4c ff 84 	st.w	r7[-124],r12
8000b144:	ee eb ff 7c 	st.d	r7[-132],r10
	double y,y2,S,K1,K2,K3;
	double P11,P12,P13,P21,P22,P23,P31,P32,P33;

	y = position_meas - centralData->estimation.state[axis][POSITION];
8000b148:	ec f8 00 00 	ld.w	r8,r6[0]
8000b14c:	70 0a       	ld.w	r10,r8[0x0]
8000b14e:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000b152:	12 98       	mov	r8,r9
8000b154:	a1 78       	lsl	r8,0x1
8000b156:	12 08       	add	r8,r9
8000b158:	a3 78       	lsl	r8,0x3
8000b15a:	f4 08 00 08 	add	r8,r10,r8
8000b15e:	f0 c8 f4 a4 	sub	r8,r8,-2908
8000b162:	f0 e8 00 00 	ld.d	r8,r8[0]
8000b166:	ee ea ff 7c 	ld.d	r10,r7[-132]
8000b16a:	f0 16 00 11 	mcall	r6[68]
8000b16e:	14 98       	mov	r8,r10
8000b170:	16 99       	mov	r9,r11
8000b172:	ee e9 ff 88 	st.d	r7[-120],r8
	
	
	S = P[axis][0][0] + R[axis];
8000b176:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000b17a:	ec fa 00 18 	ld.w	r10,r6[24]
8000b17e:	12 98       	mov	r8,r9
8000b180:	a3 78       	lsl	r8,0x3
8000b182:	12 08       	add	r8,r9
8000b184:	a3 78       	lsl	r8,0x3
8000b186:	f4 08 00 08 	add	r8,r10,r8
8000b18a:	f0 ea 00 00 	ld.d	r10,r8[0]
8000b18e:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000b192:	ec f8 01 50 	ld.w	r8,r6[336]
8000b196:	f0 09 02 38 	ld.d	r8,r8[r9<<0x3]
8000b19a:	f0 16 00 05 	mcall	r6[20]
8000b19e:	14 98       	mov	r8,r10
8000b1a0:	16 99       	mov	r9,r11
8000b1a2:	ee e9 ff 98 	st.d	r7[-104],r8
	K1 = P[axis][0][0] * 1/S;
8000b1a6:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000b1aa:	ec fa 00 18 	ld.w	r10,r6[24]
8000b1ae:	12 98       	mov	r8,r9
8000b1b0:	a3 78       	lsl	r8,0x3
8000b1b2:	12 08       	add	r8,r9
8000b1b4:	a3 78       	lsl	r8,0x3
8000b1b6:	f4 08 00 08 	add	r8,r10,r8
8000b1ba:	f0 ea 00 00 	ld.d	r10,r8[0]
8000b1be:	ee e8 ff 98 	ld.d	r8,r7[-104]
8000b1c2:	f0 16 00 0c 	mcall	r6[48]
8000b1c6:	14 98       	mov	r8,r10
8000b1c8:	16 99       	mov	r9,r11
8000b1ca:	ee e9 ff a0 	st.d	r7[-96],r8
	K2 = P[axis][1][0] * 1/S;
8000b1ce:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000b1d2:	ec fa 00 18 	ld.w	r10,r6[24]
8000b1d6:	12 98       	mov	r8,r9
8000b1d8:	a3 78       	lsl	r8,0x3
8000b1da:	12 08       	add	r8,r9
8000b1dc:	a3 78       	lsl	r8,0x3
8000b1de:	f4 08 00 08 	add	r8,r10,r8
8000b1e2:	2e 88       	sub	r8,-24
8000b1e4:	f0 ea 00 00 	ld.d	r10,r8[0]
8000b1e8:	ee e8 ff 98 	ld.d	r8,r7[-104]
8000b1ec:	f0 16 00 0c 	mcall	r6[48]
8000b1f0:	14 98       	mov	r8,r10
8000b1f2:	16 99       	mov	r9,r11
8000b1f4:	ee e9 ff a8 	st.d	r7[-88],r8
	K3 = P[axis][2][0] * 1/S;
8000b1f8:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000b1fc:	ec fa 00 18 	ld.w	r10,r6[24]
8000b200:	12 98       	mov	r8,r9
8000b202:	a3 78       	lsl	r8,0x3
8000b204:	12 08       	add	r8,r9
8000b206:	a3 78       	lsl	r8,0x3
8000b208:	f4 08 00 08 	add	r8,r10,r8
8000b20c:	2d 08       	sub	r8,-48
8000b20e:	f0 ea 00 00 	ld.d	r10,r8[0]
8000b212:	ee e8 ff 98 	ld.d	r8,r7[-104]
8000b216:	f0 16 00 0c 	mcall	r6[48]
8000b21a:	14 98       	mov	r8,r10
8000b21c:	16 99       	mov	r9,r11
8000b21e:	ee e9 ff b0 	st.d	r7[-80],r8

	centralData->estimation.state[axis][POSITION] = centralData->estimation.state[axis][POSITION] + K1 * y;
8000b222:	ec f8 00 00 	ld.w	r8,r6[0]
8000b226:	70 01       	ld.w	r1,r8[0x0]
8000b228:	ee f5 ff 84 	ld.w	r5,r7[-124]
8000b22c:	ec f8 00 00 	ld.w	r8,r6[0]
8000b230:	70 0a       	ld.w	r10,r8[0x0]
8000b232:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000b236:	12 98       	mov	r8,r9
8000b238:	a1 78       	lsl	r8,0x1
8000b23a:	12 08       	add	r8,r9
8000b23c:	a3 78       	lsl	r8,0x3
8000b23e:	f4 08 00 08 	add	r8,r10,r8
8000b242:	f0 c8 f4 a4 	sub	r8,r8,-2908
8000b246:	f0 e2 00 00 	ld.d	r2,r8[0]
8000b24a:	ee e8 ff 88 	ld.d	r8,r7[-120]
8000b24e:	ee ea ff a0 	ld.d	r10,r7[-96]
8000b252:	f0 16 00 03 	mcall	r6[12]
8000b256:	14 98       	mov	r8,r10
8000b258:	16 99       	mov	r9,r11
8000b25a:	04 9a       	mov	r10,r2
8000b25c:	06 9b       	mov	r11,r3
8000b25e:	f0 16 00 05 	mcall	r6[20]
8000b262:	14 98       	mov	r8,r10
8000b264:	16 99       	mov	r9,r11
8000b266:	10 9a       	mov	r10,r8
8000b268:	12 9b       	mov	r11,r9
8000b26a:	0a 98       	mov	r8,r5
8000b26c:	a1 78       	lsl	r8,0x1
8000b26e:	0a 08       	add	r8,r5
8000b270:	a3 78       	lsl	r8,0x3
8000b272:	e2 08 00 08 	add	r8,r1,r8
8000b276:	f0 c8 f4 a4 	sub	r8,r8,-2908
8000b27a:	f0 eb 00 00 	st.d	r8[0],r10
	centralData->estimation.state[axis][SPEED] = centralData->estimation.state[axis][SPEED] + K2 * y;
8000b27e:	ec f8 00 00 	ld.w	r8,r6[0]
8000b282:	70 01       	ld.w	r1,r8[0x0]
8000b284:	ee f5 ff 84 	ld.w	r5,r7[-124]
8000b288:	ec f8 00 00 	ld.w	r8,r6[0]
8000b28c:	70 0a       	ld.w	r10,r8[0x0]
8000b28e:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000b292:	12 98       	mov	r8,r9
8000b294:	a1 78       	lsl	r8,0x1
8000b296:	12 08       	add	r8,r9
8000b298:	2f f8       	sub	r8,-1
8000b29a:	a3 78       	lsl	r8,0x3
8000b29c:	f4 08 00 08 	add	r8,r10,r8
8000b2a0:	f0 e2 0b 5c 	ld.d	r2,r8[2908]
8000b2a4:	ee e8 ff 88 	ld.d	r8,r7[-120]
8000b2a8:	ee ea ff a8 	ld.d	r10,r7[-88]
8000b2ac:	f0 16 00 03 	mcall	r6[12]
8000b2b0:	14 98       	mov	r8,r10
8000b2b2:	16 99       	mov	r9,r11
8000b2b4:	04 9a       	mov	r10,r2
8000b2b6:	06 9b       	mov	r11,r3
8000b2b8:	f0 16 00 05 	mcall	r6[20]
8000b2bc:	14 98       	mov	r8,r10
8000b2be:	16 99       	mov	r9,r11
8000b2c0:	10 9a       	mov	r10,r8
8000b2c2:	12 9b       	mov	r11,r9
8000b2c4:	0a 98       	mov	r8,r5
8000b2c6:	a1 78       	lsl	r8,0x1
8000b2c8:	0a 08       	add	r8,r5
8000b2ca:	2f f8       	sub	r8,-1
8000b2cc:	a3 78       	lsl	r8,0x3
8000b2ce:	e2 08 00 08 	add	r8,r1,r8
8000b2d2:	f0 eb 0b 5c 	st.d	r8[2908],r10
	centralData->estimation.state[axis][BIAIS] = centralData->estimation.state[axis][BIAIS] + K3 * y;
8000b2d6:	ec f8 00 00 	ld.w	r8,r6[0]
8000b2da:	70 01       	ld.w	r1,r8[0x0]
8000b2dc:	ee f5 ff 84 	ld.w	r5,r7[-124]
8000b2e0:	ec f8 00 00 	ld.w	r8,r6[0]
8000b2e4:	70 0a       	ld.w	r10,r8[0x0]
8000b2e6:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000b2ea:	12 98       	mov	r8,r9
8000b2ec:	a1 78       	lsl	r8,0x1
8000b2ee:	12 08       	add	r8,r9
8000b2f0:	a3 78       	lsl	r8,0x3
8000b2f2:	f4 08 00 08 	add	r8,r10,r8
8000b2f6:	f0 c8 f4 94 	sub	r8,r8,-2924
8000b2fa:	f0 e2 00 00 	ld.d	r2,r8[0]
8000b2fe:	ee e8 ff 88 	ld.d	r8,r7[-120]
8000b302:	ee ea ff b0 	ld.d	r10,r7[-80]
8000b306:	f0 16 00 03 	mcall	r6[12]
8000b30a:	14 98       	mov	r8,r10
8000b30c:	16 99       	mov	r9,r11
8000b30e:	04 9a       	mov	r10,r2
8000b310:	06 9b       	mov	r11,r3
8000b312:	f0 16 00 05 	mcall	r6[20]
8000b316:	14 98       	mov	r8,r10
8000b318:	16 99       	mov	r9,r11
8000b31a:	10 9a       	mov	r10,r8
8000b31c:	12 9b       	mov	r11,r9
8000b31e:	0a 98       	mov	r8,r5
8000b320:	a1 78       	lsl	r8,0x1
8000b322:	0a 08       	add	r8,r5
8000b324:	a3 78       	lsl	r8,0x3
8000b326:	e2 08 00 08 	add	r8,r1,r8
8000b32a:	f0 c8 f4 94 	sub	r8,r8,-2924
8000b32e:	f0 eb 00 00 	st.d	r8[0],r10

	P11 = (1. - K1) * P[axis][0][0];
8000b332:	ee e8 ff a0 	ld.d	r8,r7[-96]
8000b336:	30 0a       	mov	r10,0
8000b338:	fc 1b 3f f0 	movh	r11,0x3ff0
8000b33c:	f0 16 00 11 	mcall	r6[68]
8000b340:	14 98       	mov	r8,r10
8000b342:	16 99       	mov	r9,r11
8000b344:	10 9a       	mov	r10,r8
8000b346:	12 9b       	mov	r11,r9
8000b348:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000b34c:	ec fc 00 18 	ld.w	r12,r6[24]
8000b350:	12 98       	mov	r8,r9
8000b352:	a3 78       	lsl	r8,0x3
8000b354:	12 08       	add	r8,r9
8000b356:	a3 78       	lsl	r8,0x3
8000b358:	f8 08 00 08 	add	r8,r12,r8
8000b35c:	f0 e8 00 00 	ld.d	r8,r8[0]
8000b360:	f0 16 00 03 	mcall	r6[12]
8000b364:	14 98       	mov	r8,r10
8000b366:	16 99       	mov	r9,r11
8000b368:	ee e9 ff b8 	st.d	r7[-72],r8
	P12 = (1. - K1) * P[axis][0][1];
8000b36c:	ee e8 ff a0 	ld.d	r8,r7[-96]
8000b370:	30 0a       	mov	r10,0
8000b372:	fc 1b 3f f0 	movh	r11,0x3ff0
8000b376:	f0 16 00 11 	mcall	r6[68]
8000b37a:	14 98       	mov	r8,r10
8000b37c:	16 99       	mov	r9,r11
8000b37e:	10 9a       	mov	r10,r8
8000b380:	12 9b       	mov	r11,r9
8000b382:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000b386:	ec fc 00 18 	ld.w	r12,r6[24]
8000b38a:	12 98       	mov	r8,r9
8000b38c:	a3 78       	lsl	r8,0x3
8000b38e:	12 08       	add	r8,r9
8000b390:	2f f8       	sub	r8,-1
8000b392:	f8 08 02 38 	ld.d	r8,r12[r8<<0x3]
8000b396:	f0 16 00 03 	mcall	r6[12]
8000b39a:	14 98       	mov	r8,r10
8000b39c:	16 99       	mov	r9,r11
8000b39e:	ee e9 ff c0 	st.d	r7[-64],r8
	P13 = (1. - K1) * P[axis][0][2];
8000b3a2:	ee e8 ff a0 	ld.d	r8,r7[-96]
8000b3a6:	30 0a       	mov	r10,0
8000b3a8:	fc 1b 3f f0 	movh	r11,0x3ff0
8000b3ac:	f0 16 00 11 	mcall	r6[68]
8000b3b0:	14 98       	mov	r8,r10
8000b3b2:	16 99       	mov	r9,r11
8000b3b4:	10 9a       	mov	r10,r8
8000b3b6:	12 9b       	mov	r11,r9
8000b3b8:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000b3bc:	ec fc 00 18 	ld.w	r12,r6[24]
8000b3c0:	12 98       	mov	r8,r9
8000b3c2:	a3 78       	lsl	r8,0x3
8000b3c4:	12 08       	add	r8,r9
8000b3c6:	a3 78       	lsl	r8,0x3
8000b3c8:	f8 08 00 08 	add	r8,r12,r8
8000b3cc:	2f 08       	sub	r8,-16
8000b3ce:	f0 e8 00 00 	ld.d	r8,r8[0]
8000b3d2:	f0 16 00 03 	mcall	r6[12]
8000b3d6:	14 98       	mov	r8,r10
8000b3d8:	16 99       	mov	r9,r11
8000b3da:	ee e9 ff c8 	st.d	r7[-56],r8
	P21 = -K2 * P[axis][0][0] + P[axis][1][0];
8000b3de:	ee f8 ff a8 	ld.w	r8,r7[-88]
8000b3e2:	10 99       	mov	r9,r8
8000b3e4:	ee 19 80 00 	eorh	r9,0x8000
8000b3e8:	ef 49 ff 1c 	st.w	r7[-228],r9
8000b3ec:	ee f8 ff ac 	ld.w	r8,r7[-84]
8000b3f0:	ef 48 ff 20 	st.w	r7[-224],r8
8000b3f4:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000b3f8:	ec fa 00 18 	ld.w	r10,r6[24]
8000b3fc:	12 98       	mov	r8,r9
8000b3fe:	a3 78       	lsl	r8,0x3
8000b400:	12 08       	add	r8,r9
8000b402:	a3 78       	lsl	r8,0x3
8000b404:	f4 08 00 08 	add	r8,r10,r8
8000b408:	f0 e8 00 00 	ld.d	r8,r8[0]
8000b40c:	ee ea ff 1c 	ld.d	r10,r7[-228]
8000b410:	f0 16 00 03 	mcall	r6[12]
8000b414:	14 98       	mov	r8,r10
8000b416:	16 99       	mov	r9,r11
8000b418:	10 9a       	mov	r10,r8
8000b41a:	12 9b       	mov	r11,r9
8000b41c:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000b420:	ec fc 00 18 	ld.w	r12,r6[24]
8000b424:	12 98       	mov	r8,r9
8000b426:	a3 78       	lsl	r8,0x3
8000b428:	12 08       	add	r8,r9
8000b42a:	a3 78       	lsl	r8,0x3
8000b42c:	f8 08 00 08 	add	r8,r12,r8
8000b430:	2e 88       	sub	r8,-24
8000b432:	f0 e8 00 00 	ld.d	r8,r8[0]
8000b436:	f0 16 00 05 	mcall	r6[20]
8000b43a:	14 98       	mov	r8,r10
8000b43c:	16 99       	mov	r9,r11
8000b43e:	ee e9 ff d0 	st.d	r7[-48],r8
	P22 = -K2 * P[axis][0][1] + P[axis][1][1];
8000b442:	ee f8 ff a8 	ld.w	r8,r7[-88]
8000b446:	10 99       	mov	r9,r8
8000b448:	ee 19 80 00 	eorh	r9,0x8000
8000b44c:	ef 49 ff 24 	st.w	r7[-220],r9
8000b450:	ee f8 ff ac 	ld.w	r8,r7[-84]
8000b454:	ef 48 ff 28 	st.w	r7[-216],r8
8000b458:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000b45c:	ec fa 00 18 	ld.w	r10,r6[24]
8000b460:	12 98       	mov	r8,r9
8000b462:	a3 78       	lsl	r8,0x3
8000b464:	12 08       	add	r8,r9
8000b466:	2f f8       	sub	r8,-1
8000b468:	f4 08 02 38 	ld.d	r8,r10[r8<<0x3]
8000b46c:	ee ea ff 24 	ld.d	r10,r7[-220]
8000b470:	f0 16 00 03 	mcall	r6[12]
8000b474:	14 98       	mov	r8,r10
8000b476:	16 99       	mov	r9,r11
8000b478:	10 9a       	mov	r10,r8
8000b47a:	12 9b       	mov	r11,r9
8000b47c:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000b480:	ec fc 00 18 	ld.w	r12,r6[24]
8000b484:	12 98       	mov	r8,r9
8000b486:	a3 78       	lsl	r8,0x3
8000b488:	12 08       	add	r8,r9
8000b48a:	a3 78       	lsl	r8,0x3
8000b48c:	f8 08 00 08 	add	r8,r12,r8
8000b490:	2e 08       	sub	r8,-32
8000b492:	f0 e8 00 00 	ld.d	r8,r8[0]
8000b496:	f0 16 00 05 	mcall	r6[20]
8000b49a:	14 98       	mov	r8,r10
8000b49c:	16 99       	mov	r9,r11
8000b49e:	ee e9 ff d8 	st.d	r7[-40],r8
	P23 = -K2 * P[axis][0][2] + P[axis][1][2];
8000b4a2:	ee f8 ff a8 	ld.w	r8,r7[-88]
8000b4a6:	10 99       	mov	r9,r8
8000b4a8:	ee 19 80 00 	eorh	r9,0x8000
8000b4ac:	ef 49 ff 2c 	st.w	r7[-212],r9
8000b4b0:	ee f8 ff ac 	ld.w	r8,r7[-84]
8000b4b4:	ef 48 ff 30 	st.w	r7[-208],r8
8000b4b8:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000b4bc:	ec fa 00 18 	ld.w	r10,r6[24]
8000b4c0:	12 98       	mov	r8,r9
8000b4c2:	a3 78       	lsl	r8,0x3
8000b4c4:	12 08       	add	r8,r9
8000b4c6:	a3 78       	lsl	r8,0x3
8000b4c8:	f4 08 00 08 	add	r8,r10,r8
8000b4cc:	2f 08       	sub	r8,-16
8000b4ce:	f0 e8 00 00 	ld.d	r8,r8[0]
8000b4d2:	ee ea ff 2c 	ld.d	r10,r7[-212]
8000b4d6:	f0 16 00 03 	mcall	r6[12]
8000b4da:	14 98       	mov	r8,r10
8000b4dc:	16 99       	mov	r9,r11
8000b4de:	10 9a       	mov	r10,r8
8000b4e0:	12 9b       	mov	r11,r9
8000b4e2:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000b4e6:	ec fc 00 18 	ld.w	r12,r6[24]
8000b4ea:	12 98       	mov	r8,r9
8000b4ec:	a3 78       	lsl	r8,0x3
8000b4ee:	12 08       	add	r8,r9
8000b4f0:	a3 78       	lsl	r8,0x3
8000b4f2:	f8 08 00 08 	add	r8,r12,r8
8000b4f6:	2d 88       	sub	r8,-40
8000b4f8:	f0 e8 00 00 	ld.d	r8,r8[0]
8000b4fc:	f0 16 00 05 	mcall	r6[20]
8000b500:	14 98       	mov	r8,r10
8000b502:	16 99       	mov	r9,r11
8000b504:	ee e9 ff e0 	st.d	r7[-32],r8
	P31 = -K3 * P[axis][0][0] + P[axis][2][0];
8000b508:	ee f8 ff b0 	ld.w	r8,r7[-80]
8000b50c:	10 99       	mov	r9,r8
8000b50e:	ee 19 80 00 	eorh	r9,0x8000
8000b512:	ef 49 ff 34 	st.w	r7[-204],r9
8000b516:	ee f8 ff b4 	ld.w	r8,r7[-76]
8000b51a:	ef 48 ff 38 	st.w	r7[-200],r8
8000b51e:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000b522:	ec fa 00 18 	ld.w	r10,r6[24]
8000b526:	12 98       	mov	r8,r9
8000b528:	a3 78       	lsl	r8,0x3
8000b52a:	12 08       	add	r8,r9
8000b52c:	a3 78       	lsl	r8,0x3
8000b52e:	f4 08 00 08 	add	r8,r10,r8
8000b532:	f0 e8 00 00 	ld.d	r8,r8[0]
8000b536:	ee ea ff 34 	ld.d	r10,r7[-204]
8000b53a:	f0 16 00 03 	mcall	r6[12]
8000b53e:	14 98       	mov	r8,r10
8000b540:	16 99       	mov	r9,r11
8000b542:	10 9a       	mov	r10,r8
8000b544:	12 9b       	mov	r11,r9
8000b546:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000b54a:	ec fc 00 18 	ld.w	r12,r6[24]
8000b54e:	12 98       	mov	r8,r9
8000b550:	a3 78       	lsl	r8,0x3
8000b552:	12 08       	add	r8,r9
8000b554:	a3 78       	lsl	r8,0x3
8000b556:	f8 08 00 08 	add	r8,r12,r8
8000b55a:	2d 08       	sub	r8,-48
8000b55c:	f0 e8 00 00 	ld.d	r8,r8[0]
8000b560:	f0 16 00 05 	mcall	r6[20]
8000b564:	14 98       	mov	r8,r10
8000b566:	16 99       	mov	r9,r11
8000b568:	ee e9 ff e8 	st.d	r7[-24],r8
	P32 = -K3 * P[axis][0][1] + P[axis][2][1];
8000b56c:	ee f8 ff b0 	ld.w	r8,r7[-80]
8000b570:	10 99       	mov	r9,r8
8000b572:	ee 19 80 00 	eorh	r9,0x8000
8000b576:	ef 49 ff 3c 	st.w	r7[-196],r9
8000b57a:	ee f8 ff b4 	ld.w	r8,r7[-76]
8000b57e:	ef 48 ff 40 	st.w	r7[-192],r8
8000b582:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000b586:	ec fa 00 18 	ld.w	r10,r6[24]
8000b58a:	12 98       	mov	r8,r9
8000b58c:	a3 78       	lsl	r8,0x3
8000b58e:	12 08       	add	r8,r9
8000b590:	2f f8       	sub	r8,-1
8000b592:	f4 08 02 38 	ld.d	r8,r10[r8<<0x3]
8000b596:	ee ea ff 3c 	ld.d	r10,r7[-196]
8000b59a:	f0 16 00 03 	mcall	r6[12]
8000b59e:	14 98       	mov	r8,r10
8000b5a0:	16 99       	mov	r9,r11
8000b5a2:	10 9a       	mov	r10,r8
8000b5a4:	12 9b       	mov	r11,r9
8000b5a6:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000b5aa:	ec fc 00 18 	ld.w	r12,r6[24]
8000b5ae:	12 98       	mov	r8,r9
8000b5b0:	a3 78       	lsl	r8,0x3
8000b5b2:	12 08       	add	r8,r9
8000b5b4:	a3 78       	lsl	r8,0x3
8000b5b6:	f8 08 00 08 	add	r8,r12,r8
8000b5ba:	2c 88       	sub	r8,-56
8000b5bc:	f0 e8 00 00 	ld.d	r8,r8[0]
8000b5c0:	f0 16 00 05 	mcall	r6[20]
8000b5c4:	14 98       	mov	r8,r10
8000b5c6:	16 99       	mov	r9,r11
8000b5c8:	ee e9 ff f0 	st.d	r7[-16],r8
	P33 = -K3 * P[axis][0][2] + P[axis][2][2];
8000b5cc:	ee f8 ff b0 	ld.w	r8,r7[-80]
8000b5d0:	10 99       	mov	r9,r8
8000b5d2:	ee 19 80 00 	eorh	r9,0x8000
8000b5d6:	ef 49 ff 44 	st.w	r7[-188],r9
8000b5da:	ee f8 ff b4 	ld.w	r8,r7[-76]
8000b5de:	ef 48 ff 48 	st.w	r7[-184],r8
8000b5e2:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000b5e6:	ec fa 00 18 	ld.w	r10,r6[24]
8000b5ea:	12 98       	mov	r8,r9
8000b5ec:	a3 78       	lsl	r8,0x3
8000b5ee:	12 08       	add	r8,r9
8000b5f0:	a3 78       	lsl	r8,0x3
8000b5f2:	f4 08 00 08 	add	r8,r10,r8
8000b5f6:	2f 08       	sub	r8,-16
8000b5f8:	f0 e8 00 00 	ld.d	r8,r8[0]
8000b5fc:	ee ea ff 44 	ld.d	r10,r7[-188]
8000b600:	f0 16 00 03 	mcall	r6[12]
8000b604:	14 98       	mov	r8,r10
8000b606:	16 99       	mov	r9,r11
8000b608:	10 9a       	mov	r10,r8
8000b60a:	12 9b       	mov	r11,r9
8000b60c:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000b610:	ec fc 00 18 	ld.w	r12,r6[24]
8000b614:	12 98       	mov	r8,r9
8000b616:	a3 78       	lsl	r8,0x3
8000b618:	12 08       	add	r8,r9
8000b61a:	a3 78       	lsl	r8,0x3
8000b61c:	f8 08 00 08 	add	r8,r12,r8
8000b620:	2c 08       	sub	r8,-64
8000b622:	f0 e8 00 00 	ld.d	r8,r8[0]
8000b626:	f0 16 00 05 	mcall	r6[20]
8000b62a:	14 98       	mov	r8,r10
8000b62c:	16 99       	mov	r9,r11
8000b62e:	ee e9 ff f8 	st.d	r7[-8],r8

	P[axis][0][0] = P11;
8000b632:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000b636:	ec fa 00 18 	ld.w	r10,r6[24]
8000b63a:	12 98       	mov	r8,r9
8000b63c:	a3 78       	lsl	r8,0x3
8000b63e:	12 08       	add	r8,r9
8000b640:	a3 78       	lsl	r8,0x3
8000b642:	10 0a       	add	r10,r8
8000b644:	ee e8 ff b8 	ld.d	r8,r7[-72]
8000b648:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][0][1] = P12;
8000b64c:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000b650:	ec fb 00 18 	ld.w	r11,r6[24]
8000b654:	12 98       	mov	r8,r9
8000b656:	a3 78       	lsl	r8,0x3
8000b658:	12 08       	add	r8,r9
8000b65a:	f0 ca ff ff 	sub	r10,r8,-1
8000b65e:	ee e8 ff c0 	ld.d	r8,r7[-64]
8000b662:	f6 0a 08 38 	st.d	r11[r10<<0x3],r8
	P[axis][0][2] = P13;
8000b666:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000b66a:	ec fa 00 18 	ld.w	r10,r6[24]
8000b66e:	12 98       	mov	r8,r9
8000b670:	a3 78       	lsl	r8,0x3
8000b672:	12 08       	add	r8,r9
8000b674:	a3 78       	lsl	r8,0x3
8000b676:	f4 08 00 08 	add	r8,r10,r8
8000b67a:	f0 ca ff f0 	sub	r10,r8,-16
8000b67e:	ee e8 ff c8 	ld.d	r8,r7[-56]
8000b682:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][1][0] = P21;
8000b686:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000b68a:	ec fa 00 18 	ld.w	r10,r6[24]
8000b68e:	12 98       	mov	r8,r9
8000b690:	a3 78       	lsl	r8,0x3
8000b692:	12 08       	add	r8,r9
8000b694:	a3 78       	lsl	r8,0x3
8000b696:	f4 08 00 08 	add	r8,r10,r8
8000b69a:	f0 ca ff e8 	sub	r10,r8,-24
8000b69e:	ee e8 ff d0 	ld.d	r8,r7[-48]
8000b6a2:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][1][1] = P22;
8000b6a6:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000b6aa:	ec fa 00 18 	ld.w	r10,r6[24]
8000b6ae:	12 98       	mov	r8,r9
8000b6b0:	a3 78       	lsl	r8,0x3
8000b6b2:	12 08       	add	r8,r9
8000b6b4:	a3 78       	lsl	r8,0x3
8000b6b6:	f4 08 00 08 	add	r8,r10,r8
8000b6ba:	f0 ca ff e0 	sub	r10,r8,-32
8000b6be:	ee e8 ff d8 	ld.d	r8,r7[-40]
8000b6c2:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][1][2] = P23;
8000b6c6:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000b6ca:	ec fa 00 18 	ld.w	r10,r6[24]
8000b6ce:	12 98       	mov	r8,r9
8000b6d0:	a3 78       	lsl	r8,0x3
8000b6d2:	12 08       	add	r8,r9
8000b6d4:	a3 78       	lsl	r8,0x3
8000b6d6:	f4 08 00 08 	add	r8,r10,r8
8000b6da:	f0 ca ff d8 	sub	r10,r8,-40
8000b6de:	ee e8 ff e0 	ld.d	r8,r7[-32]
8000b6e2:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][2][0] = P31;
8000b6e6:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000b6ea:	ec fa 00 18 	ld.w	r10,r6[24]
8000b6ee:	12 98       	mov	r8,r9
8000b6f0:	a3 78       	lsl	r8,0x3
8000b6f2:	12 08       	add	r8,r9
8000b6f4:	a3 78       	lsl	r8,0x3
8000b6f6:	f4 08 00 08 	add	r8,r10,r8
8000b6fa:	f0 ca ff d0 	sub	r10,r8,-48
8000b6fe:	ee e8 ff e8 	ld.d	r8,r7[-24]
8000b702:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][2][1] = P32;
8000b706:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000b70a:	ec fa 00 18 	ld.w	r10,r6[24]
8000b70e:	12 98       	mov	r8,r9
8000b710:	a3 78       	lsl	r8,0x3
8000b712:	12 08       	add	r8,r9
8000b714:	a3 78       	lsl	r8,0x3
8000b716:	f4 08 00 08 	add	r8,r10,r8
8000b71a:	f0 ca ff c8 	sub	r10,r8,-56
8000b71e:	ee e8 ff f0 	ld.d	r8,r7[-16]
8000b722:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][2][2] = P33;
8000b726:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000b72a:	ec fa 00 18 	ld.w	r10,r6[24]
8000b72e:	12 98       	mov	r8,r9
8000b730:	a3 78       	lsl	r8,0x3
8000b732:	12 08       	add	r8,r9
8000b734:	a3 78       	lsl	r8,0x3
8000b736:	f4 08 00 08 	add	r8,r10,r8
8000b73a:	f0 ca ff c0 	sub	r10,r8,-64
8000b73e:	ee e8 ff f8 	ld.d	r8,r7[-8]
8000b742:	f4 e9 00 00 	st.d	r10[0],r8
	
	/*************************************************************************************/
	y = position_meas - centralData->position_estimator.localPosition.pos[axis];
8000b746:	ec f8 00 00 	ld.w	r8,r6[0]
8000b74a:	70 09       	ld.w	r9,r8[0x0]
8000b74c:	ee f8 ff 84 	ld.w	r8,r7[-124]
8000b750:	f0 c8 fc 99 	sub	r8,r8,-871
8000b754:	f2 08 03 28 	ld.w	r8,r9[r8<<0x2]
8000b758:	10 9c       	mov	r12,r8
8000b75a:	f0 16 00 02 	mcall	r6[8]
8000b75e:	14 98       	mov	r8,r10
8000b760:	16 99       	mov	r9,r11
8000b762:	ee ea ff 7c 	ld.d	r10,r7[-132]
8000b766:	f0 16 00 11 	mcall	r6[68]
8000b76a:	14 98       	mov	r8,r10
8000b76c:	16 99       	mov	r9,r11
8000b76e:	ee e9 ff 88 	st.d	r7[-120],r8
	
	S = P2[axis][0][0] + R2[axis];
8000b772:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000b776:	ec fa 00 1c 	ld.w	r10,r6[28]
8000b77a:	12 98       	mov	r8,r9
8000b77c:	a3 78       	lsl	r8,0x3
8000b77e:	12 08       	add	r8,r9
8000b780:	a3 78       	lsl	r8,0x3
8000b782:	f4 08 00 08 	add	r8,r10,r8
8000b786:	f0 ea 00 00 	ld.d	r10,r8[0]
8000b78a:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000b78e:	ec f8 01 4c 	ld.w	r8,r6[332]
8000b792:	f0 09 02 38 	ld.d	r8,r8[r9<<0x3]
8000b796:	f0 16 00 05 	mcall	r6[20]
8000b79a:	14 98       	mov	r8,r10
8000b79c:	16 99       	mov	r9,r11
8000b79e:	ee e9 ff 98 	st.d	r7[-104],r8
	K1 = P2[axis][0][0] * 1/S;
8000b7a2:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000b7a6:	ec fa 00 1c 	ld.w	r10,r6[28]
8000b7aa:	12 98       	mov	r8,r9
8000b7ac:	a3 78       	lsl	r8,0x3
8000b7ae:	12 08       	add	r8,r9
8000b7b0:	a3 78       	lsl	r8,0x3
8000b7b2:	f4 08 00 08 	add	r8,r10,r8
8000b7b6:	f0 ea 00 00 	ld.d	r10,r8[0]
8000b7ba:	ee e8 ff 98 	ld.d	r8,r7[-104]
8000b7be:	f0 16 00 0c 	mcall	r6[48]
8000b7c2:	14 98       	mov	r8,r10
8000b7c4:	16 99       	mov	r9,r11
8000b7c6:	ee e9 ff a0 	st.d	r7[-96],r8
	K2 = P2[axis][1][0] * 1/S;
8000b7ca:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000b7ce:	ec fa 00 1c 	ld.w	r10,r6[28]
8000b7d2:	12 98       	mov	r8,r9
8000b7d4:	a3 78       	lsl	r8,0x3
8000b7d6:	12 08       	add	r8,r9
8000b7d8:	a3 78       	lsl	r8,0x3
8000b7da:	f4 08 00 08 	add	r8,r10,r8
8000b7de:	2e 88       	sub	r8,-24
8000b7e0:	f0 ea 00 00 	ld.d	r10,r8[0]
8000b7e4:	ee e8 ff 98 	ld.d	r8,r7[-104]
8000b7e8:	f0 16 00 0c 	mcall	r6[48]
8000b7ec:	14 98       	mov	r8,r10
8000b7ee:	16 99       	mov	r9,r11
8000b7f0:	ee e9 ff a8 	st.d	r7[-88],r8
	K3 = P2[axis][2][0] * 1/S;
8000b7f4:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000b7f8:	ec fa 00 1c 	ld.w	r10,r6[28]
8000b7fc:	12 98       	mov	r8,r9
8000b7fe:	a3 78       	lsl	r8,0x3
8000b800:	12 08       	add	r8,r9
8000b802:	a3 78       	lsl	r8,0x3
8000b804:	f4 08 00 08 	add	r8,r10,r8
8000b808:	2d 08       	sub	r8,-48
8000b80a:	f0 ea 00 00 	ld.d	r10,r8[0]
8000b80e:	ee e8 ff 98 	ld.d	r8,r7[-104]
8000b812:	f0 16 00 0c 	mcall	r6[48]
8000b816:	14 98       	mov	r8,r10
8000b818:	16 99       	mov	r9,r11
8000b81a:	ee e9 ff b0 	st.d	r7[-80],r8
	
	centralData->position_estimator.localPosition.pos[axis] = centralData->position_estimator.localPosition.pos[axis] + K1 * y;
8000b81e:	ec f8 00 00 	ld.w	r8,r6[0]
8000b822:	70 01       	ld.w	r1,r8[0x0]
8000b824:	ee f5 ff 84 	ld.w	r5,r7[-124]
8000b828:	ec f8 00 00 	ld.w	r8,r6[0]
8000b82c:	70 09       	ld.w	r9,r8[0x0]
8000b82e:	ee f8 ff 84 	ld.w	r8,r7[-124]
8000b832:	f0 c8 fc 99 	sub	r8,r8,-871
8000b836:	f2 08 03 28 	ld.w	r8,r9[r8<<0x2]
8000b83a:	10 9c       	mov	r12,r8
8000b83c:	f0 16 00 02 	mcall	r6[8]
8000b840:	14 92       	mov	r2,r10
8000b842:	16 93       	mov	r3,r11
8000b844:	ee e8 ff 88 	ld.d	r8,r7[-120]
8000b848:	ee ea ff a0 	ld.d	r10,r7[-96]
8000b84c:	f0 16 00 03 	mcall	r6[12]
8000b850:	14 98       	mov	r8,r10
8000b852:	16 99       	mov	r9,r11
8000b854:	04 9a       	mov	r10,r2
8000b856:	06 9b       	mov	r11,r3
8000b858:	f0 16 00 05 	mcall	r6[20]
8000b85c:	14 98       	mov	r8,r10
8000b85e:	16 99       	mov	r9,r11
8000b860:	10 9a       	mov	r10,r8
8000b862:	12 9b       	mov	r11,r9
8000b864:	f0 16 00 09 	mcall	r6[36]
8000b868:	18 99       	mov	r9,r12
8000b86a:	ea c8 fc 99 	sub	r8,r5,-871
8000b86e:	e2 08 09 29 	st.w	r1[r8<<0x2],r9
	centralData->position_estimator.vel[axis] = centralData->position_estimator.vel[axis] + K2 * y;
8000b872:	ec f8 00 00 	ld.w	r8,r6[0]
8000b876:	70 01       	ld.w	r1,r8[0x0]
8000b878:	ee f5 ff 84 	ld.w	r5,r7[-124]
8000b87c:	ec f8 00 00 	ld.w	r8,r6[0]
8000b880:	70 09       	ld.w	r9,r8[0x0]
8000b882:	ee f8 ff 84 	ld.w	r8,r7[-124]
8000b886:	f0 c8 fc a3 	sub	r8,r8,-861
8000b88a:	f2 08 03 28 	ld.w	r8,r9[r8<<0x2]
8000b88e:	10 9c       	mov	r12,r8
8000b890:	f0 16 00 02 	mcall	r6[8]
8000b894:	14 92       	mov	r2,r10
8000b896:	16 93       	mov	r3,r11
8000b898:	ee e8 ff 88 	ld.d	r8,r7[-120]
8000b89c:	ee ea ff a8 	ld.d	r10,r7[-88]
8000b8a0:	f0 16 00 03 	mcall	r6[12]
8000b8a4:	14 98       	mov	r8,r10
8000b8a6:	16 99       	mov	r9,r11
8000b8a8:	04 9a       	mov	r10,r2
8000b8aa:	06 9b       	mov	r11,r3
8000b8ac:	f0 16 00 05 	mcall	r6[20]
8000b8b0:	14 98       	mov	r8,r10
8000b8b2:	16 99       	mov	r9,r11
8000b8b4:	10 9a       	mov	r10,r8
8000b8b6:	12 9b       	mov	r11,r9
8000b8b8:	f0 16 00 09 	mcall	r6[36]
8000b8bc:	18 99       	mov	r9,r12
8000b8be:	ea c8 fc a3 	sub	r8,r5,-861
8000b8c2:	e2 08 09 29 	st.w	r1[r8<<0x2],r9
	centralData->imu1.attitude.be[axis+ACC_OFFSET] = centralData->imu1.attitude.be[axis+ACC_OFFSET] + K3 * y;
8000b8c6:	ec f8 00 00 	ld.w	r8,r6[0]
8000b8ca:	70 01       	ld.w	r1,r8[0x0]
8000b8cc:	ee f8 ff 84 	ld.w	r8,r7[-124]
8000b8d0:	f0 c5 ff fd 	sub	r5,r8,-3
8000b8d4:	ec f8 00 00 	ld.w	r8,r6[0]
8000b8d8:	70 09       	ld.w	r9,r8[0x0]
8000b8da:	ee f8 ff 84 	ld.w	r8,r7[-124]
8000b8de:	2f d8       	sub	r8,-3
8000b8e0:	2f 48       	sub	r8,-12
8000b8e2:	f2 08 03 28 	ld.w	r8,r9[r8<<0x2]
8000b8e6:	10 9c       	mov	r12,r8
8000b8e8:	f0 16 00 02 	mcall	r6[8]
8000b8ec:	14 92       	mov	r2,r10
8000b8ee:	16 93       	mov	r3,r11
8000b8f0:	ee e8 ff 88 	ld.d	r8,r7[-120]
8000b8f4:	ee ea ff b0 	ld.d	r10,r7[-80]
8000b8f8:	f0 16 00 03 	mcall	r6[12]
8000b8fc:	14 98       	mov	r8,r10
8000b8fe:	16 99       	mov	r9,r11
8000b900:	04 9a       	mov	r10,r2
8000b902:	06 9b       	mov	r11,r3
8000b904:	f0 16 00 05 	mcall	r6[20]
8000b908:	14 98       	mov	r8,r10
8000b90a:	16 99       	mov	r9,r11
8000b90c:	10 9a       	mov	r10,r8
8000b90e:	12 9b       	mov	r11,r9
8000b910:	f0 16 00 09 	mcall	r6[36]
8000b914:	18 99       	mov	r9,r12
8000b916:	ea c8 ff f4 	sub	r8,r5,-12
8000b91a:	e2 08 09 29 	st.w	r1[r8<<0x2],r9
	
	P11 = (1. - K1) * P2[axis][0][0];
8000b91e:	ee e8 ff a0 	ld.d	r8,r7[-96]
8000b922:	30 0a       	mov	r10,0
8000b924:	fc 1b 3f f0 	movh	r11,0x3ff0
8000b928:	f0 16 00 11 	mcall	r6[68]
8000b92c:	14 98       	mov	r8,r10
8000b92e:	16 99       	mov	r9,r11
8000b930:	10 9a       	mov	r10,r8
8000b932:	12 9b       	mov	r11,r9
8000b934:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000b938:	ec fc 00 1c 	ld.w	r12,r6[28]
8000b93c:	12 98       	mov	r8,r9
8000b93e:	a3 78       	lsl	r8,0x3
8000b940:	12 08       	add	r8,r9
8000b942:	a3 78       	lsl	r8,0x3
8000b944:	f8 08 00 08 	add	r8,r12,r8
8000b948:	f0 e8 00 00 	ld.d	r8,r8[0]
8000b94c:	f0 16 00 03 	mcall	r6[12]
8000b950:	14 98       	mov	r8,r10
8000b952:	16 99       	mov	r9,r11
8000b954:	ee e9 ff b8 	st.d	r7[-72],r8
	P12 = (1. - K1) * P2[axis][0][1];
8000b958:	ee e8 ff a0 	ld.d	r8,r7[-96]
8000b95c:	30 0a       	mov	r10,0
8000b95e:	fc 1b 3f f0 	movh	r11,0x3ff0
8000b962:	f0 16 00 11 	mcall	r6[68]
8000b966:	14 98       	mov	r8,r10
8000b968:	16 99       	mov	r9,r11
8000b96a:	10 9a       	mov	r10,r8
8000b96c:	12 9b       	mov	r11,r9
8000b96e:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000b972:	ec fc 00 1c 	ld.w	r12,r6[28]
8000b976:	12 98       	mov	r8,r9
8000b978:	a3 78       	lsl	r8,0x3
8000b97a:	12 08       	add	r8,r9
8000b97c:	2f f8       	sub	r8,-1
8000b97e:	f8 08 02 38 	ld.d	r8,r12[r8<<0x3]
8000b982:	f0 16 00 03 	mcall	r6[12]
8000b986:	14 98       	mov	r8,r10
8000b988:	16 99       	mov	r9,r11
8000b98a:	ee e9 ff c0 	st.d	r7[-64],r8
	P13 = (1. - K1) * P2[axis][0][2];
8000b98e:	ee e8 ff a0 	ld.d	r8,r7[-96]
8000b992:	30 0a       	mov	r10,0
8000b994:	fc 1b 3f f0 	movh	r11,0x3ff0
8000b998:	f0 16 00 11 	mcall	r6[68]
8000b99c:	14 98       	mov	r8,r10
8000b99e:	16 99       	mov	r9,r11
8000b9a0:	10 9a       	mov	r10,r8
8000b9a2:	12 9b       	mov	r11,r9
8000b9a4:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000b9a8:	ec fc 00 1c 	ld.w	r12,r6[28]
8000b9ac:	12 98       	mov	r8,r9
8000b9ae:	a3 78       	lsl	r8,0x3
8000b9b0:	12 08       	add	r8,r9
8000b9b2:	a3 78       	lsl	r8,0x3
8000b9b4:	f8 08 00 08 	add	r8,r12,r8
8000b9b8:	2f 08       	sub	r8,-16
8000b9ba:	f0 e8 00 00 	ld.d	r8,r8[0]
8000b9be:	f0 16 00 03 	mcall	r6[12]
8000b9c2:	14 98       	mov	r8,r10
8000b9c4:	16 99       	mov	r9,r11
8000b9c6:	ee e9 ff c8 	st.d	r7[-56],r8
	P21 = -K2 * P2[axis][0][0] + P2[axis][1][0];
8000b9ca:	ee f8 ff a8 	ld.w	r8,r7[-88]
8000b9ce:	10 99       	mov	r9,r8
8000b9d0:	ee 19 80 00 	eorh	r9,0x8000
8000b9d4:	ef 49 ff 4c 	st.w	r7[-180],r9
8000b9d8:	ee f8 ff ac 	ld.w	r8,r7[-84]
8000b9dc:	ef 48 ff 50 	st.w	r7[-176],r8
8000b9e0:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000b9e4:	ec fa 00 1c 	ld.w	r10,r6[28]
8000b9e8:	12 98       	mov	r8,r9
8000b9ea:	a3 78       	lsl	r8,0x3
8000b9ec:	12 08       	add	r8,r9
8000b9ee:	a3 78       	lsl	r8,0x3
8000b9f0:	f4 08 00 08 	add	r8,r10,r8
8000b9f4:	f0 e8 00 00 	ld.d	r8,r8[0]
8000b9f8:	ee ea ff 4c 	ld.d	r10,r7[-180]
8000b9fc:	f0 16 00 03 	mcall	r6[12]
8000ba00:	14 98       	mov	r8,r10
8000ba02:	16 99       	mov	r9,r11
8000ba04:	10 9a       	mov	r10,r8
8000ba06:	12 9b       	mov	r11,r9
8000ba08:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000ba0c:	ec fc 00 1c 	ld.w	r12,r6[28]
8000ba10:	12 98       	mov	r8,r9
8000ba12:	a3 78       	lsl	r8,0x3
8000ba14:	12 08       	add	r8,r9
8000ba16:	a3 78       	lsl	r8,0x3
8000ba18:	f8 08 00 08 	add	r8,r12,r8
8000ba1c:	2e 88       	sub	r8,-24
8000ba1e:	f0 e8 00 00 	ld.d	r8,r8[0]
8000ba22:	f0 16 00 05 	mcall	r6[20]
8000ba26:	14 98       	mov	r8,r10
8000ba28:	16 99       	mov	r9,r11
8000ba2a:	ee e9 ff d0 	st.d	r7[-48],r8
	P22 = -K2 * P2[axis][0][1] + P2[axis][1][1];
8000ba2e:	ee f8 ff a8 	ld.w	r8,r7[-88]
8000ba32:	10 99       	mov	r9,r8
8000ba34:	ee 19 80 00 	eorh	r9,0x8000
8000ba38:	ef 49 ff 54 	st.w	r7[-172],r9
8000ba3c:	ee f8 ff ac 	ld.w	r8,r7[-84]
8000ba40:	ef 48 ff 58 	st.w	r7[-168],r8
8000ba44:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000ba48:	ec fa 00 1c 	ld.w	r10,r6[28]
8000ba4c:	12 98       	mov	r8,r9
8000ba4e:	a3 78       	lsl	r8,0x3
8000ba50:	12 08       	add	r8,r9
8000ba52:	2f f8       	sub	r8,-1
8000ba54:	f4 08 02 38 	ld.d	r8,r10[r8<<0x3]
8000ba58:	ee ea ff 54 	ld.d	r10,r7[-172]
8000ba5c:	f0 16 00 03 	mcall	r6[12]
8000ba60:	14 98       	mov	r8,r10
8000ba62:	16 99       	mov	r9,r11
8000ba64:	10 9a       	mov	r10,r8
8000ba66:	12 9b       	mov	r11,r9
8000ba68:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000ba6c:	ec fc 00 1c 	ld.w	r12,r6[28]
8000ba70:	12 98       	mov	r8,r9
8000ba72:	a3 78       	lsl	r8,0x3
8000ba74:	12 08       	add	r8,r9
8000ba76:	a3 78       	lsl	r8,0x3
8000ba78:	f8 08 00 08 	add	r8,r12,r8
8000ba7c:	2e 08       	sub	r8,-32
8000ba7e:	f0 e8 00 00 	ld.d	r8,r8[0]
8000ba82:	f0 16 00 05 	mcall	r6[20]
8000ba86:	14 98       	mov	r8,r10
8000ba88:	16 99       	mov	r9,r11
8000ba8a:	ee e9 ff d8 	st.d	r7[-40],r8
	P23 = -K2 * P2[axis][0][2] + P2[axis][1][2];
8000ba8e:	ee f8 ff a8 	ld.w	r8,r7[-88]
8000ba92:	10 99       	mov	r9,r8
8000ba94:	ee 19 80 00 	eorh	r9,0x8000
8000ba98:	ef 49 ff 5c 	st.w	r7[-164],r9
8000ba9c:	ee f8 ff ac 	ld.w	r8,r7[-84]
8000baa0:	ef 48 ff 60 	st.w	r7[-160],r8
8000baa4:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000baa8:	ec fa 00 1c 	ld.w	r10,r6[28]
8000baac:	12 98       	mov	r8,r9
8000baae:	a3 78       	lsl	r8,0x3
8000bab0:	12 08       	add	r8,r9
8000bab2:	a3 78       	lsl	r8,0x3
8000bab4:	f4 08 00 08 	add	r8,r10,r8
8000bab8:	2f 08       	sub	r8,-16
8000baba:	f0 e8 00 00 	ld.d	r8,r8[0]
8000babe:	ee ea ff 5c 	ld.d	r10,r7[-164]
8000bac2:	f0 16 00 03 	mcall	r6[12]
8000bac6:	14 98       	mov	r8,r10
8000bac8:	16 99       	mov	r9,r11
8000baca:	10 9a       	mov	r10,r8
8000bacc:	12 9b       	mov	r11,r9
8000bace:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000bad2:	ec fc 00 1c 	ld.w	r12,r6[28]
8000bad6:	12 98       	mov	r8,r9
8000bad8:	a3 78       	lsl	r8,0x3
8000bada:	12 08       	add	r8,r9
8000badc:	a3 78       	lsl	r8,0x3
8000bade:	f8 08 00 08 	add	r8,r12,r8
8000bae2:	2d 88       	sub	r8,-40
8000bae4:	f0 e8 00 00 	ld.d	r8,r8[0]
8000bae8:	f0 16 00 05 	mcall	r6[20]
8000baec:	14 98       	mov	r8,r10
8000baee:	16 99       	mov	r9,r11
8000baf0:	ee e9 ff e0 	st.d	r7[-32],r8
	P31 = -K3 * P2[axis][0][0] + P2[axis][2][0];
8000baf4:	ee f8 ff b0 	ld.w	r8,r7[-80]
8000baf8:	10 99       	mov	r9,r8
8000bafa:	ee 19 80 00 	eorh	r9,0x8000
8000bafe:	ef 49 ff 64 	st.w	r7[-156],r9
8000bb02:	ee f8 ff b4 	ld.w	r8,r7[-76]
8000bb06:	ef 48 ff 68 	st.w	r7[-152],r8
8000bb0a:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000bb0e:	ec fa 00 1c 	ld.w	r10,r6[28]
8000bb12:	12 98       	mov	r8,r9
8000bb14:	a3 78       	lsl	r8,0x3
8000bb16:	12 08       	add	r8,r9
8000bb18:	a3 78       	lsl	r8,0x3
8000bb1a:	f4 08 00 08 	add	r8,r10,r8
8000bb1e:	f0 e8 00 00 	ld.d	r8,r8[0]
8000bb22:	ee ea ff 64 	ld.d	r10,r7[-156]
8000bb26:	f0 16 00 03 	mcall	r6[12]
8000bb2a:	14 98       	mov	r8,r10
8000bb2c:	16 99       	mov	r9,r11
8000bb2e:	10 9a       	mov	r10,r8
8000bb30:	12 9b       	mov	r11,r9
8000bb32:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000bb36:	ec fc 00 1c 	ld.w	r12,r6[28]
8000bb3a:	12 98       	mov	r8,r9
8000bb3c:	a3 78       	lsl	r8,0x3
8000bb3e:	12 08       	add	r8,r9
8000bb40:	a3 78       	lsl	r8,0x3
8000bb42:	f8 08 00 08 	add	r8,r12,r8
8000bb46:	2d 08       	sub	r8,-48
8000bb48:	f0 e8 00 00 	ld.d	r8,r8[0]
8000bb4c:	f0 16 00 05 	mcall	r6[20]
8000bb50:	14 98       	mov	r8,r10
8000bb52:	16 99       	mov	r9,r11
8000bb54:	ee e9 ff e8 	st.d	r7[-24],r8
	P32 = -K3 * P2[axis][0][1] + P2[axis][2][1];
8000bb58:	ee f8 ff b0 	ld.w	r8,r7[-80]
8000bb5c:	10 99       	mov	r9,r8
8000bb5e:	ee 19 80 00 	eorh	r9,0x8000
8000bb62:	ef 49 ff 6c 	st.w	r7[-148],r9
8000bb66:	ee f8 ff b4 	ld.w	r8,r7[-76]
8000bb6a:	ef 48 ff 70 	st.w	r7[-144],r8
8000bb6e:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000bb72:	ec fa 00 1c 	ld.w	r10,r6[28]
8000bb76:	12 98       	mov	r8,r9
8000bb78:	a3 78       	lsl	r8,0x3
8000bb7a:	12 08       	add	r8,r9
8000bb7c:	2f f8       	sub	r8,-1
8000bb7e:	f4 08 02 38 	ld.d	r8,r10[r8<<0x3]
8000bb82:	ee ea ff 6c 	ld.d	r10,r7[-148]
8000bb86:	f0 16 00 03 	mcall	r6[12]
8000bb8a:	14 98       	mov	r8,r10
8000bb8c:	16 99       	mov	r9,r11
8000bb8e:	10 9a       	mov	r10,r8
8000bb90:	12 9b       	mov	r11,r9
8000bb92:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000bb96:	ec fc 00 1c 	ld.w	r12,r6[28]
8000bb9a:	12 98       	mov	r8,r9
8000bb9c:	a3 78       	lsl	r8,0x3
8000bb9e:	12 08       	add	r8,r9
8000bba0:	a3 78       	lsl	r8,0x3
8000bba2:	f8 08 00 08 	add	r8,r12,r8
8000bba6:	2c 88       	sub	r8,-56
8000bba8:	f0 e8 00 00 	ld.d	r8,r8[0]
8000bbac:	f0 16 00 05 	mcall	r6[20]
8000bbb0:	14 98       	mov	r8,r10
8000bbb2:	16 99       	mov	r9,r11
8000bbb4:	ee e9 ff f0 	st.d	r7[-16],r8
	P33 = -K3 * P2[axis][0][2] + P2[axis][2][2];
8000bbb8:	ee f8 ff b0 	ld.w	r8,r7[-80]
8000bbbc:	10 99       	mov	r9,r8
8000bbbe:	ee 19 80 00 	eorh	r9,0x8000
8000bbc2:	ef 49 ff 74 	st.w	r7[-140],r9
8000bbc6:	ee f8 ff b4 	ld.w	r8,r7[-76]
8000bbca:	ef 48 ff 78 	st.w	r7[-136],r8
8000bbce:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000bbd2:	ec fa 00 1c 	ld.w	r10,r6[28]
8000bbd6:	12 98       	mov	r8,r9
8000bbd8:	a3 78       	lsl	r8,0x3
8000bbda:	12 08       	add	r8,r9
8000bbdc:	a3 78       	lsl	r8,0x3
8000bbde:	f4 08 00 08 	add	r8,r10,r8
8000bbe2:	2f 08       	sub	r8,-16
8000bbe4:	f0 e8 00 00 	ld.d	r8,r8[0]
8000bbe8:	ee ea ff 74 	ld.d	r10,r7[-140]
8000bbec:	f0 16 00 03 	mcall	r6[12]
8000bbf0:	14 98       	mov	r8,r10
8000bbf2:	16 99       	mov	r9,r11
8000bbf4:	10 9a       	mov	r10,r8
8000bbf6:	12 9b       	mov	r11,r9
8000bbf8:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000bbfc:	ec fc 00 1c 	ld.w	r12,r6[28]
8000bc00:	12 98       	mov	r8,r9
8000bc02:	a3 78       	lsl	r8,0x3
8000bc04:	12 08       	add	r8,r9
8000bc06:	a3 78       	lsl	r8,0x3
8000bc08:	f8 08 00 08 	add	r8,r12,r8
8000bc0c:	2c 08       	sub	r8,-64
8000bc0e:	f0 e8 00 00 	ld.d	r8,r8[0]
8000bc12:	f0 16 00 05 	mcall	r6[20]
8000bc16:	14 98       	mov	r8,r10
8000bc18:	16 99       	mov	r9,r11
8000bc1a:	ee e9 ff f8 	st.d	r7[-8],r8

	P2[axis][0][0] = P11;
8000bc1e:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000bc22:	ec fa 00 1c 	ld.w	r10,r6[28]
8000bc26:	12 98       	mov	r8,r9
8000bc28:	a3 78       	lsl	r8,0x3
8000bc2a:	12 08       	add	r8,r9
8000bc2c:	a3 78       	lsl	r8,0x3
8000bc2e:	10 0a       	add	r10,r8
8000bc30:	ee e8 ff b8 	ld.d	r8,r7[-72]
8000bc34:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][0][1] = P12;
8000bc38:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000bc3c:	ec fa 00 1c 	ld.w	r10,r6[28]
8000bc40:	12 98       	mov	r8,r9
8000bc42:	a3 78       	lsl	r8,0x3
8000bc44:	12 08       	add	r8,r9
8000bc46:	f0 cb ff ff 	sub	r11,r8,-1
8000bc4a:	ee e8 ff c0 	ld.d	r8,r7[-64]
8000bc4e:	f4 0b 08 38 	st.d	r10[r11<<0x3],r8
	P2[axis][0][2] = P13;
8000bc52:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000bc56:	ec fa 00 1c 	ld.w	r10,r6[28]
8000bc5a:	12 98       	mov	r8,r9
8000bc5c:	a3 78       	lsl	r8,0x3
8000bc5e:	12 08       	add	r8,r9
8000bc60:	a3 78       	lsl	r8,0x3
8000bc62:	f4 08 00 08 	add	r8,r10,r8
8000bc66:	f0 ca ff f0 	sub	r10,r8,-16
8000bc6a:	ee e8 ff c8 	ld.d	r8,r7[-56]
8000bc6e:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][1][0] = P21;
8000bc72:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000bc76:	ec fa 00 1c 	ld.w	r10,r6[28]
8000bc7a:	12 98       	mov	r8,r9
8000bc7c:	a3 78       	lsl	r8,0x3
8000bc7e:	12 08       	add	r8,r9
8000bc80:	a3 78       	lsl	r8,0x3
8000bc82:	f4 08 00 08 	add	r8,r10,r8
8000bc86:	f0 ca ff e8 	sub	r10,r8,-24
8000bc8a:	ee e8 ff d0 	ld.d	r8,r7[-48]
8000bc8e:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][1][1] = P22;
8000bc92:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000bc96:	ec fa 00 1c 	ld.w	r10,r6[28]
8000bc9a:	12 98       	mov	r8,r9
8000bc9c:	a3 78       	lsl	r8,0x3
8000bc9e:	12 08       	add	r8,r9
8000bca0:	a3 78       	lsl	r8,0x3
8000bca2:	f4 08 00 08 	add	r8,r10,r8
8000bca6:	f0 ca ff e0 	sub	r10,r8,-32
8000bcaa:	ee e8 ff d8 	ld.d	r8,r7[-40]
8000bcae:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][1][2] = P23;
8000bcb2:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000bcb6:	ec fa 00 1c 	ld.w	r10,r6[28]
8000bcba:	12 98       	mov	r8,r9
8000bcbc:	a3 78       	lsl	r8,0x3
8000bcbe:	12 08       	add	r8,r9
8000bcc0:	a3 78       	lsl	r8,0x3
8000bcc2:	f4 08 00 08 	add	r8,r10,r8
8000bcc6:	f0 ca ff d8 	sub	r10,r8,-40
8000bcca:	ee e8 ff e0 	ld.d	r8,r7[-32]
8000bcce:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][2][0] = P31;
8000bcd2:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000bcd6:	ec fa 00 1c 	ld.w	r10,r6[28]
8000bcda:	12 98       	mov	r8,r9
8000bcdc:	a3 78       	lsl	r8,0x3
8000bcde:	12 08       	add	r8,r9
8000bce0:	a3 78       	lsl	r8,0x3
8000bce2:	f4 08 00 08 	add	r8,r10,r8
8000bce6:	f0 ca ff d0 	sub	r10,r8,-48
8000bcea:	ee e8 ff e8 	ld.d	r8,r7[-24]
8000bcee:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][2][1] = P32;
8000bcf2:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000bcf6:	ec fa 00 1c 	ld.w	r10,r6[28]
8000bcfa:	12 98       	mov	r8,r9
8000bcfc:	a3 78       	lsl	r8,0x3
8000bcfe:	12 08       	add	r8,r9
8000bd00:	a3 78       	lsl	r8,0x3
8000bd02:	f4 08 00 08 	add	r8,r10,r8
8000bd06:	f0 ca ff c8 	sub	r10,r8,-56
8000bd0a:	ee e8 ff f0 	ld.d	r8,r7[-16]
8000bd0e:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][2][2] = P33;
8000bd12:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000bd16:	ec fa 00 1c 	ld.w	r10,r6[28]
8000bd1a:	12 98       	mov	r8,r9
8000bd1c:	a3 78       	lsl	r8,0x3
8000bd1e:	12 08       	add	r8,r9
8000bd20:	a3 78       	lsl	r8,0x3
8000bd22:	f4 08 00 08 	add	r8,r10,r8
8000bd26:	f0 ca ff c0 	sub	r10,r8,-64
8000bd2a:	ee e8 ff f8 	ld.d	r8,r7[-8]
8000bd2e:	f4 e9 00 00 	st.d	r10[0],r8
}
8000bd32:	2c 7d       	sub	sp,-228
8000bd34:	e3 cd 80 ee 	ldm	sp++,r1-r3,r5-r7,pc
8000bd38:	80 00       	ld.sh	r0,r0[0x0]
8000bd3a:	af c2       	cbr	r2,0xe

8000bd3c <e_kalman_update_speed>:

// update covariance
Pp = Pm - K*H*Pm;
*/
void e_kalman_update_speed(int axis, float speed_meas)
{
8000bd3c:	eb cd 40 ee 	pushm	r1-r3,r5-r7,lr
8000bd40:	1a 97       	mov	r7,sp
8000bd42:	fa cd 00 d8 	sub	sp,sp,216
8000bd46:	fe f6 0c 1a 	ld.w	r6,pc[3098]
8000bd4a:	1e 26       	rsub	r6,pc
8000bd4c:	ef 4c ff 8c 	st.w	r7[-116],r12
8000bd50:	ef 4b ff 88 	st.w	r7[-120],r11
	
	double yd,S,K1,K2,K3;
	double P11,P12,P13,P21,P22,P23,P31,P32,P33;
	
	yd = speed_meas - centralData->estimation.state[axis][SPEED];
8000bd54:	ee fc ff 88 	ld.w	r12,r7[-120]
8000bd58:	f0 16 00 02 	mcall	r6[8]
8000bd5c:	ec f8 00 00 	ld.w	r8,r6[0]
8000bd60:	70 0c       	ld.w	r12,r8[0x0]
8000bd62:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8000bd66:	12 98       	mov	r8,r9
8000bd68:	a1 78       	lsl	r8,0x1
8000bd6a:	12 08       	add	r8,r9
8000bd6c:	2f f8       	sub	r8,-1
8000bd6e:	a3 78       	lsl	r8,0x3
8000bd70:	f8 08 00 08 	add	r8,r12,r8
8000bd74:	f0 e8 0b 5c 	ld.d	r8,r8[2908]
8000bd78:	f0 16 00 11 	mcall	r6[68]
8000bd7c:	14 98       	mov	r8,r10
8000bd7e:	16 99       	mov	r9,r11
8000bd80:	ee e9 ff 90 	st.d	r7[-112],r8
	
	
	S = P[axis][1][1] + R[axis];
8000bd84:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8000bd88:	ec fa 00 18 	ld.w	r10,r6[24]
8000bd8c:	12 98       	mov	r8,r9
8000bd8e:	a3 78       	lsl	r8,0x3
8000bd90:	12 08       	add	r8,r9
8000bd92:	a3 78       	lsl	r8,0x3
8000bd94:	f4 08 00 08 	add	r8,r10,r8
8000bd98:	2e 08       	sub	r8,-32
8000bd9a:	f0 ea 00 00 	ld.d	r10,r8[0]
8000bd9e:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8000bda2:	ec f8 01 50 	ld.w	r8,r6[336]
8000bda6:	f0 09 02 38 	ld.d	r8,r8[r9<<0x3]
8000bdaa:	f0 16 00 05 	mcall	r6[20]
8000bdae:	14 98       	mov	r8,r10
8000bdb0:	16 99       	mov	r9,r11
8000bdb2:	ee e9 ff 98 	st.d	r7[-104],r8
	K1 = P[axis][0][1] * 1/S;
8000bdb6:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8000bdba:	ec fa 00 18 	ld.w	r10,r6[24]
8000bdbe:	12 98       	mov	r8,r9
8000bdc0:	a3 78       	lsl	r8,0x3
8000bdc2:	12 08       	add	r8,r9
8000bdc4:	2f f8       	sub	r8,-1
8000bdc6:	f4 08 02 3a 	ld.d	r10,r10[r8<<0x3]
8000bdca:	ee e8 ff 98 	ld.d	r8,r7[-104]
8000bdce:	f0 16 00 0c 	mcall	r6[48]
8000bdd2:	14 98       	mov	r8,r10
8000bdd4:	16 99       	mov	r9,r11
8000bdd6:	ee e9 ff a0 	st.d	r7[-96],r8
	K2 = P[axis][1][1] * 1/S;
8000bdda:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8000bdde:	ec fa 00 18 	ld.w	r10,r6[24]
8000bde2:	12 98       	mov	r8,r9
8000bde4:	a3 78       	lsl	r8,0x3
8000bde6:	12 08       	add	r8,r9
8000bde8:	a3 78       	lsl	r8,0x3
8000bdea:	f4 08 00 08 	add	r8,r10,r8
8000bdee:	2e 08       	sub	r8,-32
8000bdf0:	f0 ea 00 00 	ld.d	r10,r8[0]
8000bdf4:	ee e8 ff 98 	ld.d	r8,r7[-104]
8000bdf8:	f0 16 00 0c 	mcall	r6[48]
8000bdfc:	14 98       	mov	r8,r10
8000bdfe:	16 99       	mov	r9,r11
8000be00:	ee e9 ff a8 	st.d	r7[-88],r8
	K3 = P[axis][2][1] * 1/S;
8000be04:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8000be08:	ec fa 00 18 	ld.w	r10,r6[24]
8000be0c:	12 98       	mov	r8,r9
8000be0e:	a3 78       	lsl	r8,0x3
8000be10:	12 08       	add	r8,r9
8000be12:	a3 78       	lsl	r8,0x3
8000be14:	f4 08 00 08 	add	r8,r10,r8
8000be18:	2c 88       	sub	r8,-56
8000be1a:	f0 ea 00 00 	ld.d	r10,r8[0]
8000be1e:	ee e8 ff 98 	ld.d	r8,r7[-104]
8000be22:	f0 16 00 0c 	mcall	r6[48]
8000be26:	14 98       	mov	r8,r10
8000be28:	16 99       	mov	r9,r11
8000be2a:	ee e9 ff b0 	st.d	r7[-80],r8

	centralData->estimation.state[axis][POSITION] = centralData->estimation.state[axis][POSITION] + K1 * yd;
8000be2e:	ec f8 00 00 	ld.w	r8,r6[0]
8000be32:	70 01       	ld.w	r1,r8[0x0]
8000be34:	ee f5 ff 8c 	ld.w	r5,r7[-116]
8000be38:	ec f8 00 00 	ld.w	r8,r6[0]
8000be3c:	70 0a       	ld.w	r10,r8[0x0]
8000be3e:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8000be42:	12 98       	mov	r8,r9
8000be44:	a1 78       	lsl	r8,0x1
8000be46:	12 08       	add	r8,r9
8000be48:	a3 78       	lsl	r8,0x3
8000be4a:	f4 08 00 08 	add	r8,r10,r8
8000be4e:	f0 c8 f4 a4 	sub	r8,r8,-2908
8000be52:	f0 e2 00 00 	ld.d	r2,r8[0]
8000be56:	ee e8 ff 90 	ld.d	r8,r7[-112]
8000be5a:	ee ea ff a0 	ld.d	r10,r7[-96]
8000be5e:	f0 16 00 03 	mcall	r6[12]
8000be62:	14 98       	mov	r8,r10
8000be64:	16 99       	mov	r9,r11
8000be66:	04 9a       	mov	r10,r2
8000be68:	06 9b       	mov	r11,r3
8000be6a:	f0 16 00 05 	mcall	r6[20]
8000be6e:	14 98       	mov	r8,r10
8000be70:	16 99       	mov	r9,r11
8000be72:	10 9a       	mov	r10,r8
8000be74:	12 9b       	mov	r11,r9
8000be76:	0a 98       	mov	r8,r5
8000be78:	a1 78       	lsl	r8,0x1
8000be7a:	0a 08       	add	r8,r5
8000be7c:	a3 78       	lsl	r8,0x3
8000be7e:	e2 08 00 08 	add	r8,r1,r8
8000be82:	f0 c8 f4 a4 	sub	r8,r8,-2908
8000be86:	f0 eb 00 00 	st.d	r8[0],r10
	centralData->estimation.state[axis][SPEED] = centralData->estimation.state[axis][SPEED] + K2 * yd;
8000be8a:	ec f8 00 00 	ld.w	r8,r6[0]
8000be8e:	70 01       	ld.w	r1,r8[0x0]
8000be90:	ee f5 ff 8c 	ld.w	r5,r7[-116]
8000be94:	ec f8 00 00 	ld.w	r8,r6[0]
8000be98:	70 0a       	ld.w	r10,r8[0x0]
8000be9a:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8000be9e:	12 98       	mov	r8,r9
8000bea0:	a1 78       	lsl	r8,0x1
8000bea2:	12 08       	add	r8,r9
8000bea4:	2f f8       	sub	r8,-1
8000bea6:	a3 78       	lsl	r8,0x3
8000bea8:	f4 08 00 08 	add	r8,r10,r8
8000beac:	f0 e2 0b 5c 	ld.d	r2,r8[2908]
8000beb0:	ee e8 ff 90 	ld.d	r8,r7[-112]
8000beb4:	ee ea ff a8 	ld.d	r10,r7[-88]
8000beb8:	f0 16 00 03 	mcall	r6[12]
8000bebc:	14 98       	mov	r8,r10
8000bebe:	16 99       	mov	r9,r11
8000bec0:	04 9a       	mov	r10,r2
8000bec2:	06 9b       	mov	r11,r3
8000bec4:	f0 16 00 05 	mcall	r6[20]
8000bec8:	14 98       	mov	r8,r10
8000beca:	16 99       	mov	r9,r11
8000becc:	10 9a       	mov	r10,r8
8000bece:	12 9b       	mov	r11,r9
8000bed0:	0a 98       	mov	r8,r5
8000bed2:	a1 78       	lsl	r8,0x1
8000bed4:	0a 08       	add	r8,r5
8000bed6:	2f f8       	sub	r8,-1
8000bed8:	a3 78       	lsl	r8,0x3
8000beda:	e2 08 00 08 	add	r8,r1,r8
8000bede:	f0 eb 0b 5c 	st.d	r8[2908],r10
	centralData->estimation.state[axis][BIAIS] = centralData->estimation.state[axis][BIAIS] + K3 * yd;
8000bee2:	ec f8 00 00 	ld.w	r8,r6[0]
8000bee6:	70 01       	ld.w	r1,r8[0x0]
8000bee8:	ee f5 ff 8c 	ld.w	r5,r7[-116]
8000beec:	ec f8 00 00 	ld.w	r8,r6[0]
8000bef0:	70 0a       	ld.w	r10,r8[0x0]
8000bef2:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8000bef6:	12 98       	mov	r8,r9
8000bef8:	a1 78       	lsl	r8,0x1
8000befa:	12 08       	add	r8,r9
8000befc:	a3 78       	lsl	r8,0x3
8000befe:	f4 08 00 08 	add	r8,r10,r8
8000bf02:	f0 c8 f4 94 	sub	r8,r8,-2924
8000bf06:	f0 e2 00 00 	ld.d	r2,r8[0]
8000bf0a:	ee e8 ff 90 	ld.d	r8,r7[-112]
8000bf0e:	ee ea ff b0 	ld.d	r10,r7[-80]
8000bf12:	f0 16 00 03 	mcall	r6[12]
8000bf16:	14 98       	mov	r8,r10
8000bf18:	16 99       	mov	r9,r11
8000bf1a:	04 9a       	mov	r10,r2
8000bf1c:	06 9b       	mov	r11,r3
8000bf1e:	f0 16 00 05 	mcall	r6[20]
8000bf22:	14 98       	mov	r8,r10
8000bf24:	16 99       	mov	r9,r11
8000bf26:	10 9a       	mov	r10,r8
8000bf28:	12 9b       	mov	r11,r9
8000bf2a:	0a 98       	mov	r8,r5
8000bf2c:	a1 78       	lsl	r8,0x1
8000bf2e:	0a 08       	add	r8,r5
8000bf30:	a3 78       	lsl	r8,0x3
8000bf32:	e2 08 00 08 	add	r8,r1,r8
8000bf36:	f0 c8 f4 94 	sub	r8,r8,-2924
8000bf3a:	f0 eb 00 00 	st.d	r8[0],r10

	P11 = -K1 * P[axis][1][0] + P[axis][0][0];
8000bf3e:	ee f8 ff a0 	ld.w	r8,r7[-96]
8000bf42:	10 99       	mov	r9,r8
8000bf44:	ee 19 80 00 	eorh	r9,0x8000
8000bf48:	ef 49 ff 28 	st.w	r7[-216],r9
8000bf4c:	ee f8 ff a4 	ld.w	r8,r7[-92]
8000bf50:	ef 48 ff 2c 	st.w	r7[-212],r8
8000bf54:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8000bf58:	ec fa 00 18 	ld.w	r10,r6[24]
8000bf5c:	12 98       	mov	r8,r9
8000bf5e:	a3 78       	lsl	r8,0x3
8000bf60:	12 08       	add	r8,r9
8000bf62:	a3 78       	lsl	r8,0x3
8000bf64:	f4 08 00 08 	add	r8,r10,r8
8000bf68:	2e 88       	sub	r8,-24
8000bf6a:	f0 e8 00 00 	ld.d	r8,r8[0]
8000bf6e:	ee ea ff 28 	ld.d	r10,r7[-216]
8000bf72:	f0 16 00 03 	mcall	r6[12]
8000bf76:	14 98       	mov	r8,r10
8000bf78:	16 99       	mov	r9,r11
8000bf7a:	10 9a       	mov	r10,r8
8000bf7c:	12 9b       	mov	r11,r9
8000bf7e:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8000bf82:	ec fc 00 18 	ld.w	r12,r6[24]
8000bf86:	12 98       	mov	r8,r9
8000bf88:	a3 78       	lsl	r8,0x3
8000bf8a:	12 08       	add	r8,r9
8000bf8c:	a3 78       	lsl	r8,0x3
8000bf8e:	f8 08 00 08 	add	r8,r12,r8
8000bf92:	f0 e8 00 00 	ld.d	r8,r8[0]
8000bf96:	f0 16 00 05 	mcall	r6[20]
8000bf9a:	14 98       	mov	r8,r10
8000bf9c:	16 99       	mov	r9,r11
8000bf9e:	ee e9 ff b8 	st.d	r7[-72],r8
	P12 = -K1 * P[axis][1][1] + P[axis][0][1];
8000bfa2:	ee f8 ff a0 	ld.w	r8,r7[-96]
8000bfa6:	10 99       	mov	r9,r8
8000bfa8:	ee 19 80 00 	eorh	r9,0x8000
8000bfac:	ef 49 ff 30 	st.w	r7[-208],r9
8000bfb0:	ee f8 ff a4 	ld.w	r8,r7[-92]
8000bfb4:	ef 48 ff 34 	st.w	r7[-204],r8
8000bfb8:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8000bfbc:	ec fa 00 18 	ld.w	r10,r6[24]
8000bfc0:	12 98       	mov	r8,r9
8000bfc2:	a3 78       	lsl	r8,0x3
8000bfc4:	12 08       	add	r8,r9
8000bfc6:	a3 78       	lsl	r8,0x3
8000bfc8:	f4 08 00 08 	add	r8,r10,r8
8000bfcc:	2e 08       	sub	r8,-32
8000bfce:	f0 e8 00 00 	ld.d	r8,r8[0]
8000bfd2:	ee ea ff 30 	ld.d	r10,r7[-208]
8000bfd6:	f0 16 00 03 	mcall	r6[12]
8000bfda:	14 98       	mov	r8,r10
8000bfdc:	16 99       	mov	r9,r11
8000bfde:	10 9a       	mov	r10,r8
8000bfe0:	12 9b       	mov	r11,r9
8000bfe2:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8000bfe6:	ec fc 00 18 	ld.w	r12,r6[24]
8000bfea:	12 98       	mov	r8,r9
8000bfec:	a3 78       	lsl	r8,0x3
8000bfee:	12 08       	add	r8,r9
8000bff0:	2f f8       	sub	r8,-1
8000bff2:	f8 08 02 38 	ld.d	r8,r12[r8<<0x3]
8000bff6:	f0 16 00 05 	mcall	r6[20]
8000bffa:	14 98       	mov	r8,r10
8000bffc:	16 99       	mov	r9,r11
8000bffe:	ee e9 ff c0 	st.d	r7[-64],r8
	P13 = -K1 * P[axis][1][2] + P[axis][0][2];
8000c002:	ee f8 ff a0 	ld.w	r8,r7[-96]
8000c006:	10 99       	mov	r9,r8
8000c008:	ee 19 80 00 	eorh	r9,0x8000
8000c00c:	ef 49 ff 38 	st.w	r7[-200],r9
8000c010:	ee f8 ff a4 	ld.w	r8,r7[-92]
8000c014:	ef 48 ff 3c 	st.w	r7[-196],r8
8000c018:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8000c01c:	ec fa 00 18 	ld.w	r10,r6[24]
8000c020:	12 98       	mov	r8,r9
8000c022:	a3 78       	lsl	r8,0x3
8000c024:	12 08       	add	r8,r9
8000c026:	a3 78       	lsl	r8,0x3
8000c028:	f4 08 00 08 	add	r8,r10,r8
8000c02c:	2d 88       	sub	r8,-40
8000c02e:	f0 e8 00 00 	ld.d	r8,r8[0]
8000c032:	ee ea ff 38 	ld.d	r10,r7[-200]
8000c036:	f0 16 00 03 	mcall	r6[12]
8000c03a:	14 98       	mov	r8,r10
8000c03c:	16 99       	mov	r9,r11
8000c03e:	10 9a       	mov	r10,r8
8000c040:	12 9b       	mov	r11,r9
8000c042:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8000c046:	ec fc 00 18 	ld.w	r12,r6[24]
8000c04a:	12 98       	mov	r8,r9
8000c04c:	a3 78       	lsl	r8,0x3
8000c04e:	12 08       	add	r8,r9
8000c050:	a3 78       	lsl	r8,0x3
8000c052:	f8 08 00 08 	add	r8,r12,r8
8000c056:	2f 08       	sub	r8,-16
8000c058:	f0 e8 00 00 	ld.d	r8,r8[0]
8000c05c:	f0 16 00 05 	mcall	r6[20]
8000c060:	14 98       	mov	r8,r10
8000c062:	16 99       	mov	r9,r11
8000c064:	ee e9 ff c8 	st.d	r7[-56],r8
	P21 = (1. - K2) * P[axis][1][0];
8000c068:	ee e8 ff a8 	ld.d	r8,r7[-88]
8000c06c:	30 0a       	mov	r10,0
8000c06e:	fc 1b 3f f0 	movh	r11,0x3ff0
8000c072:	f0 16 00 11 	mcall	r6[68]
8000c076:	14 98       	mov	r8,r10
8000c078:	16 99       	mov	r9,r11
8000c07a:	10 9a       	mov	r10,r8
8000c07c:	12 9b       	mov	r11,r9
8000c07e:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8000c082:	ec fc 00 18 	ld.w	r12,r6[24]
8000c086:	12 98       	mov	r8,r9
8000c088:	a3 78       	lsl	r8,0x3
8000c08a:	12 08       	add	r8,r9
8000c08c:	a3 78       	lsl	r8,0x3
8000c08e:	f8 08 00 08 	add	r8,r12,r8
8000c092:	2e 88       	sub	r8,-24
8000c094:	f0 e8 00 00 	ld.d	r8,r8[0]
8000c098:	f0 16 00 03 	mcall	r6[12]
8000c09c:	14 98       	mov	r8,r10
8000c09e:	16 99       	mov	r9,r11
8000c0a0:	ee e9 ff d0 	st.d	r7[-48],r8
	P22 = (1. - K2) * P[axis][1][1];
8000c0a4:	ee e8 ff a8 	ld.d	r8,r7[-88]
8000c0a8:	30 0a       	mov	r10,0
8000c0aa:	fc 1b 3f f0 	movh	r11,0x3ff0
8000c0ae:	f0 16 00 11 	mcall	r6[68]
8000c0b2:	14 98       	mov	r8,r10
8000c0b4:	16 99       	mov	r9,r11
8000c0b6:	10 9a       	mov	r10,r8
8000c0b8:	12 9b       	mov	r11,r9
8000c0ba:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8000c0be:	ec fc 00 18 	ld.w	r12,r6[24]
8000c0c2:	12 98       	mov	r8,r9
8000c0c4:	a3 78       	lsl	r8,0x3
8000c0c6:	12 08       	add	r8,r9
8000c0c8:	a3 78       	lsl	r8,0x3
8000c0ca:	f8 08 00 08 	add	r8,r12,r8
8000c0ce:	2e 08       	sub	r8,-32
8000c0d0:	f0 e8 00 00 	ld.d	r8,r8[0]
8000c0d4:	f0 16 00 03 	mcall	r6[12]
8000c0d8:	14 98       	mov	r8,r10
8000c0da:	16 99       	mov	r9,r11
8000c0dc:	ee e9 ff d8 	st.d	r7[-40],r8
	P23 = (1. - K2) * P[axis][1][2];
8000c0e0:	ee e8 ff a8 	ld.d	r8,r7[-88]
8000c0e4:	30 0a       	mov	r10,0
8000c0e6:	fc 1b 3f f0 	movh	r11,0x3ff0
8000c0ea:	f0 16 00 11 	mcall	r6[68]
8000c0ee:	14 98       	mov	r8,r10
8000c0f0:	16 99       	mov	r9,r11
8000c0f2:	10 9a       	mov	r10,r8
8000c0f4:	12 9b       	mov	r11,r9
8000c0f6:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8000c0fa:	ec fc 00 18 	ld.w	r12,r6[24]
8000c0fe:	12 98       	mov	r8,r9
8000c100:	a3 78       	lsl	r8,0x3
8000c102:	12 08       	add	r8,r9
8000c104:	a3 78       	lsl	r8,0x3
8000c106:	f8 08 00 08 	add	r8,r12,r8
8000c10a:	2d 88       	sub	r8,-40
8000c10c:	f0 e8 00 00 	ld.d	r8,r8[0]
8000c110:	f0 16 00 03 	mcall	r6[12]
8000c114:	14 98       	mov	r8,r10
8000c116:	16 99       	mov	r9,r11
8000c118:	ee e9 ff e0 	st.d	r7[-32],r8
	P31 = -K3 * P[axis][1][0] + P[axis][2][0];
8000c11c:	ee f8 ff b0 	ld.w	r8,r7[-80]
8000c120:	10 99       	mov	r9,r8
8000c122:	ee 19 80 00 	eorh	r9,0x8000
8000c126:	ef 49 ff 40 	st.w	r7[-192],r9
8000c12a:	ee f8 ff b4 	ld.w	r8,r7[-76]
8000c12e:	ef 48 ff 44 	st.w	r7[-188],r8
8000c132:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8000c136:	ec fa 00 18 	ld.w	r10,r6[24]
8000c13a:	12 98       	mov	r8,r9
8000c13c:	a3 78       	lsl	r8,0x3
8000c13e:	12 08       	add	r8,r9
8000c140:	a3 78       	lsl	r8,0x3
8000c142:	f4 08 00 08 	add	r8,r10,r8
8000c146:	2e 88       	sub	r8,-24
8000c148:	f0 e8 00 00 	ld.d	r8,r8[0]
8000c14c:	ee ea ff 40 	ld.d	r10,r7[-192]
8000c150:	f0 16 00 03 	mcall	r6[12]
8000c154:	14 98       	mov	r8,r10
8000c156:	16 99       	mov	r9,r11
8000c158:	10 9a       	mov	r10,r8
8000c15a:	12 9b       	mov	r11,r9
8000c15c:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8000c160:	ec fc 00 18 	ld.w	r12,r6[24]
8000c164:	12 98       	mov	r8,r9
8000c166:	a3 78       	lsl	r8,0x3
8000c168:	12 08       	add	r8,r9
8000c16a:	a3 78       	lsl	r8,0x3
8000c16c:	f8 08 00 08 	add	r8,r12,r8
8000c170:	2d 08       	sub	r8,-48
8000c172:	f0 e8 00 00 	ld.d	r8,r8[0]
8000c176:	f0 16 00 05 	mcall	r6[20]
8000c17a:	14 98       	mov	r8,r10
8000c17c:	16 99       	mov	r9,r11
8000c17e:	ee e9 ff e8 	st.d	r7[-24],r8
	P32 = -K3 * P[axis][1][1] + P[axis][2][1];
8000c182:	ee f8 ff b0 	ld.w	r8,r7[-80]
8000c186:	10 99       	mov	r9,r8
8000c188:	ee 19 80 00 	eorh	r9,0x8000
8000c18c:	ef 49 ff 48 	st.w	r7[-184],r9
8000c190:	ee f8 ff b4 	ld.w	r8,r7[-76]
8000c194:	ef 48 ff 4c 	st.w	r7[-180],r8
8000c198:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8000c19c:	ec fa 00 18 	ld.w	r10,r6[24]
8000c1a0:	12 98       	mov	r8,r9
8000c1a2:	a3 78       	lsl	r8,0x3
8000c1a4:	12 08       	add	r8,r9
8000c1a6:	a3 78       	lsl	r8,0x3
8000c1a8:	f4 08 00 08 	add	r8,r10,r8
8000c1ac:	2e 08       	sub	r8,-32
8000c1ae:	f0 e8 00 00 	ld.d	r8,r8[0]
8000c1b2:	ee ea ff 48 	ld.d	r10,r7[-184]
8000c1b6:	f0 16 00 03 	mcall	r6[12]
8000c1ba:	14 98       	mov	r8,r10
8000c1bc:	16 99       	mov	r9,r11
8000c1be:	10 9a       	mov	r10,r8
8000c1c0:	12 9b       	mov	r11,r9
8000c1c2:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8000c1c6:	ec fc 00 18 	ld.w	r12,r6[24]
8000c1ca:	12 98       	mov	r8,r9
8000c1cc:	a3 78       	lsl	r8,0x3
8000c1ce:	12 08       	add	r8,r9
8000c1d0:	a3 78       	lsl	r8,0x3
8000c1d2:	f8 08 00 08 	add	r8,r12,r8
8000c1d6:	2c 88       	sub	r8,-56
8000c1d8:	f0 e8 00 00 	ld.d	r8,r8[0]
8000c1dc:	f0 16 00 05 	mcall	r6[20]
8000c1e0:	14 98       	mov	r8,r10
8000c1e2:	16 99       	mov	r9,r11
8000c1e4:	ee e9 ff f0 	st.d	r7[-16],r8
	P33 = -K3 * P[axis][1][2] + P[axis][2][2];
8000c1e8:	ee f8 ff b0 	ld.w	r8,r7[-80]
8000c1ec:	10 99       	mov	r9,r8
8000c1ee:	ee 19 80 00 	eorh	r9,0x8000
8000c1f2:	ef 49 ff 50 	st.w	r7[-176],r9
8000c1f6:	ee f8 ff b4 	ld.w	r8,r7[-76]
8000c1fa:	ef 48 ff 54 	st.w	r7[-172],r8
8000c1fe:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8000c202:	ec fa 00 18 	ld.w	r10,r6[24]
8000c206:	12 98       	mov	r8,r9
8000c208:	a3 78       	lsl	r8,0x3
8000c20a:	12 08       	add	r8,r9
8000c20c:	a3 78       	lsl	r8,0x3
8000c20e:	f4 08 00 08 	add	r8,r10,r8
8000c212:	2d 88       	sub	r8,-40
8000c214:	f0 e8 00 00 	ld.d	r8,r8[0]
8000c218:	ee ea ff 50 	ld.d	r10,r7[-176]
8000c21c:	f0 16 00 03 	mcall	r6[12]
8000c220:	14 98       	mov	r8,r10
8000c222:	16 99       	mov	r9,r11
8000c224:	10 9a       	mov	r10,r8
8000c226:	12 9b       	mov	r11,r9
8000c228:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8000c22c:	ec fc 00 18 	ld.w	r12,r6[24]
8000c230:	12 98       	mov	r8,r9
8000c232:	a3 78       	lsl	r8,0x3
8000c234:	12 08       	add	r8,r9
8000c236:	a3 78       	lsl	r8,0x3
8000c238:	f8 08 00 08 	add	r8,r12,r8
8000c23c:	2c 08       	sub	r8,-64
8000c23e:	f0 e8 00 00 	ld.d	r8,r8[0]
8000c242:	f0 16 00 05 	mcall	r6[20]
8000c246:	14 98       	mov	r8,r10
8000c248:	16 99       	mov	r9,r11
8000c24a:	ee e9 ff f8 	st.d	r7[-8],r8

	P[axis][0][0] = P11;
8000c24e:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8000c252:	ec fa 00 18 	ld.w	r10,r6[24]
8000c256:	12 98       	mov	r8,r9
8000c258:	a3 78       	lsl	r8,0x3
8000c25a:	12 08       	add	r8,r9
8000c25c:	a3 78       	lsl	r8,0x3
8000c25e:	10 0a       	add	r10,r8
8000c260:	ee e8 ff b8 	ld.d	r8,r7[-72]
8000c264:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][0][1] = P12;
8000c268:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8000c26c:	ec fb 00 18 	ld.w	r11,r6[24]
8000c270:	12 98       	mov	r8,r9
8000c272:	a3 78       	lsl	r8,0x3
8000c274:	12 08       	add	r8,r9
8000c276:	f0 ca ff ff 	sub	r10,r8,-1
8000c27a:	ee e8 ff c0 	ld.d	r8,r7[-64]
8000c27e:	f6 0a 08 38 	st.d	r11[r10<<0x3],r8
	P[axis][0][2] = P13;
8000c282:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8000c286:	ec fa 00 18 	ld.w	r10,r6[24]
8000c28a:	12 98       	mov	r8,r9
8000c28c:	a3 78       	lsl	r8,0x3
8000c28e:	12 08       	add	r8,r9
8000c290:	a3 78       	lsl	r8,0x3
8000c292:	f4 08 00 08 	add	r8,r10,r8
8000c296:	f0 ca ff f0 	sub	r10,r8,-16
8000c29a:	ee e8 ff c8 	ld.d	r8,r7[-56]
8000c29e:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][1][0] = P21;
8000c2a2:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8000c2a6:	ec fa 00 18 	ld.w	r10,r6[24]
8000c2aa:	12 98       	mov	r8,r9
8000c2ac:	a3 78       	lsl	r8,0x3
8000c2ae:	12 08       	add	r8,r9
8000c2b0:	a3 78       	lsl	r8,0x3
8000c2b2:	f4 08 00 08 	add	r8,r10,r8
8000c2b6:	f0 ca ff e8 	sub	r10,r8,-24
8000c2ba:	ee e8 ff d0 	ld.d	r8,r7[-48]
8000c2be:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][1][1] = P22;
8000c2c2:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8000c2c6:	ec fa 00 18 	ld.w	r10,r6[24]
8000c2ca:	12 98       	mov	r8,r9
8000c2cc:	a3 78       	lsl	r8,0x3
8000c2ce:	12 08       	add	r8,r9
8000c2d0:	a3 78       	lsl	r8,0x3
8000c2d2:	f4 08 00 08 	add	r8,r10,r8
8000c2d6:	f0 ca ff e0 	sub	r10,r8,-32
8000c2da:	ee e8 ff d8 	ld.d	r8,r7[-40]
8000c2de:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][1][2] = P23;
8000c2e2:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8000c2e6:	ec fa 00 18 	ld.w	r10,r6[24]
8000c2ea:	12 98       	mov	r8,r9
8000c2ec:	a3 78       	lsl	r8,0x3
8000c2ee:	12 08       	add	r8,r9
8000c2f0:	a3 78       	lsl	r8,0x3
8000c2f2:	f4 08 00 08 	add	r8,r10,r8
8000c2f6:	f0 ca ff d8 	sub	r10,r8,-40
8000c2fa:	ee e8 ff e0 	ld.d	r8,r7[-32]
8000c2fe:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][2][0] = P31;
8000c302:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8000c306:	ec fa 00 18 	ld.w	r10,r6[24]
8000c30a:	12 98       	mov	r8,r9
8000c30c:	a3 78       	lsl	r8,0x3
8000c30e:	12 08       	add	r8,r9
8000c310:	a3 78       	lsl	r8,0x3
8000c312:	f4 08 00 08 	add	r8,r10,r8
8000c316:	f0 ca ff d0 	sub	r10,r8,-48
8000c31a:	ee e8 ff e8 	ld.d	r8,r7[-24]
8000c31e:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][2][1] = P32;
8000c322:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8000c326:	ec fa 00 18 	ld.w	r10,r6[24]
8000c32a:	12 98       	mov	r8,r9
8000c32c:	a3 78       	lsl	r8,0x3
8000c32e:	12 08       	add	r8,r9
8000c330:	a3 78       	lsl	r8,0x3
8000c332:	f4 08 00 08 	add	r8,r10,r8
8000c336:	f0 ca ff c8 	sub	r10,r8,-56
8000c33a:	ee e8 ff f0 	ld.d	r8,r7[-16]
8000c33e:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][2][2] = P33;
8000c342:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8000c346:	ec fa 00 18 	ld.w	r10,r6[24]
8000c34a:	12 98       	mov	r8,r9
8000c34c:	a3 78       	lsl	r8,0x3
8000c34e:	12 08       	add	r8,r9
8000c350:	a3 78       	lsl	r8,0x3
8000c352:	f4 08 00 08 	add	r8,r10,r8
8000c356:	f0 ca ff c0 	sub	r10,r8,-64
8000c35a:	ee e8 ff f8 	ld.d	r8,r7[-8]
8000c35e:	f4 e9 00 00 	st.d	r10[0],r8
	
	/*************************************************************************************/
	yd = speed_meas - centralData->position_estimator.vel[axis];
8000c362:	ec f8 00 00 	ld.w	r8,r6[0]
8000c366:	70 09       	ld.w	r9,r8[0x0]
8000c368:	ee f8 ff 8c 	ld.w	r8,r7[-116]
8000c36c:	f0 c8 fc a3 	sub	r8,r8,-861
8000c370:	f2 08 03 29 	ld.w	r9,r9[r8<<0x2]
8000c374:	ee f8 ff 88 	ld.w	r8,r7[-120]
8000c378:	e5 a1 08 89 	cop	cp0,cr8,cr8,cr9,0x42
8000c37c:	10 9c       	mov	r12,r8
8000c37e:	f0 16 00 02 	mcall	r6[8]
8000c382:	14 98       	mov	r8,r10
8000c384:	16 99       	mov	r9,r11
8000c386:	ee e9 ff 90 	st.d	r7[-112],r8
	
	S = P2[axis][1][1] + R2[axis];
8000c38a:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8000c38e:	ec fa 00 1c 	ld.w	r10,r6[28]
8000c392:	12 98       	mov	r8,r9
8000c394:	a3 78       	lsl	r8,0x3
8000c396:	12 08       	add	r8,r9
8000c398:	a3 78       	lsl	r8,0x3
8000c39a:	f4 08 00 08 	add	r8,r10,r8
8000c39e:	2e 08       	sub	r8,-32
8000c3a0:	f0 ea 00 00 	ld.d	r10,r8[0]
8000c3a4:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8000c3a8:	ec f8 01 4c 	ld.w	r8,r6[332]
8000c3ac:	f0 09 02 38 	ld.d	r8,r8[r9<<0x3]
8000c3b0:	f0 16 00 05 	mcall	r6[20]
8000c3b4:	14 98       	mov	r8,r10
8000c3b6:	16 99       	mov	r9,r11
8000c3b8:	ee e9 ff 98 	st.d	r7[-104],r8
	K1 = P2[axis][0][1] * 1/S;
8000c3bc:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8000c3c0:	ec fa 00 1c 	ld.w	r10,r6[28]
8000c3c4:	12 98       	mov	r8,r9
8000c3c6:	a3 78       	lsl	r8,0x3
8000c3c8:	12 08       	add	r8,r9
8000c3ca:	2f f8       	sub	r8,-1
8000c3cc:	f4 08 02 3a 	ld.d	r10,r10[r8<<0x3]
8000c3d0:	ee e8 ff 98 	ld.d	r8,r7[-104]
8000c3d4:	f0 16 00 0c 	mcall	r6[48]
8000c3d8:	14 98       	mov	r8,r10
8000c3da:	16 99       	mov	r9,r11
8000c3dc:	ee e9 ff a0 	st.d	r7[-96],r8
	K2 = P2[axis][1][1] * 1/S;
8000c3e0:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8000c3e4:	ec fa 00 1c 	ld.w	r10,r6[28]
8000c3e8:	12 98       	mov	r8,r9
8000c3ea:	a3 78       	lsl	r8,0x3
8000c3ec:	12 08       	add	r8,r9
8000c3ee:	a3 78       	lsl	r8,0x3
8000c3f0:	f4 08 00 08 	add	r8,r10,r8
8000c3f4:	2e 08       	sub	r8,-32
8000c3f6:	f0 ea 00 00 	ld.d	r10,r8[0]
8000c3fa:	ee e8 ff 98 	ld.d	r8,r7[-104]
8000c3fe:	f0 16 00 0c 	mcall	r6[48]
8000c402:	14 98       	mov	r8,r10
8000c404:	16 99       	mov	r9,r11
8000c406:	ee e9 ff a8 	st.d	r7[-88],r8
	K3 = P2[axis][2][1] * 1/S;
8000c40a:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8000c40e:	ec fa 00 1c 	ld.w	r10,r6[28]
8000c412:	12 98       	mov	r8,r9
8000c414:	a3 78       	lsl	r8,0x3
8000c416:	12 08       	add	r8,r9
8000c418:	a3 78       	lsl	r8,0x3
8000c41a:	f4 08 00 08 	add	r8,r10,r8
8000c41e:	2c 88       	sub	r8,-56
8000c420:	f0 ea 00 00 	ld.d	r10,r8[0]
8000c424:	ee e8 ff 98 	ld.d	r8,r7[-104]
8000c428:	f0 16 00 0c 	mcall	r6[48]
8000c42c:	14 98       	mov	r8,r10
8000c42e:	16 99       	mov	r9,r11
8000c430:	ee e9 ff b0 	st.d	r7[-80],r8
	
	centralData->position_estimator.localPosition.pos[axis] = centralData->position_estimator.localPosition.pos[axis] + K1 * yd;
8000c434:	ec f8 00 00 	ld.w	r8,r6[0]
8000c438:	70 01       	ld.w	r1,r8[0x0]
8000c43a:	ee f5 ff 8c 	ld.w	r5,r7[-116]
8000c43e:	ec f8 00 00 	ld.w	r8,r6[0]
8000c442:	70 09       	ld.w	r9,r8[0x0]
8000c444:	ee f8 ff 8c 	ld.w	r8,r7[-116]
8000c448:	f0 c8 fc 99 	sub	r8,r8,-871
8000c44c:	f2 08 03 28 	ld.w	r8,r9[r8<<0x2]
8000c450:	10 9c       	mov	r12,r8
8000c452:	f0 16 00 02 	mcall	r6[8]
8000c456:	14 92       	mov	r2,r10
8000c458:	16 93       	mov	r3,r11
8000c45a:	ee e8 ff 90 	ld.d	r8,r7[-112]
8000c45e:	ee ea ff a0 	ld.d	r10,r7[-96]
8000c462:	f0 16 00 03 	mcall	r6[12]
8000c466:	14 98       	mov	r8,r10
8000c468:	16 99       	mov	r9,r11
8000c46a:	04 9a       	mov	r10,r2
8000c46c:	06 9b       	mov	r11,r3
8000c46e:	f0 16 00 05 	mcall	r6[20]
8000c472:	14 98       	mov	r8,r10
8000c474:	16 99       	mov	r9,r11
8000c476:	10 9a       	mov	r10,r8
8000c478:	12 9b       	mov	r11,r9
8000c47a:	f0 16 00 09 	mcall	r6[36]
8000c47e:	18 99       	mov	r9,r12
8000c480:	ea c8 fc 99 	sub	r8,r5,-871
8000c484:	e2 08 09 29 	st.w	r1[r8<<0x2],r9
	centralData->position_estimator.vel[axis] = centralData->position_estimator.vel[axis] + K2 * yd;
8000c488:	ec f8 00 00 	ld.w	r8,r6[0]
8000c48c:	70 01       	ld.w	r1,r8[0x0]
8000c48e:	ee f5 ff 8c 	ld.w	r5,r7[-116]
8000c492:	ec f8 00 00 	ld.w	r8,r6[0]
8000c496:	70 09       	ld.w	r9,r8[0x0]
8000c498:	ee f8 ff 8c 	ld.w	r8,r7[-116]
8000c49c:	f0 c8 fc a3 	sub	r8,r8,-861
8000c4a0:	f2 08 03 28 	ld.w	r8,r9[r8<<0x2]
8000c4a4:	10 9c       	mov	r12,r8
8000c4a6:	f0 16 00 02 	mcall	r6[8]
8000c4aa:	14 92       	mov	r2,r10
8000c4ac:	16 93       	mov	r3,r11
8000c4ae:	ee e8 ff 90 	ld.d	r8,r7[-112]
8000c4b2:	ee ea ff a8 	ld.d	r10,r7[-88]
8000c4b6:	f0 16 00 03 	mcall	r6[12]
8000c4ba:	14 98       	mov	r8,r10
8000c4bc:	16 99       	mov	r9,r11
8000c4be:	04 9a       	mov	r10,r2
8000c4c0:	06 9b       	mov	r11,r3
8000c4c2:	f0 16 00 05 	mcall	r6[20]
8000c4c6:	14 98       	mov	r8,r10
8000c4c8:	16 99       	mov	r9,r11
8000c4ca:	10 9a       	mov	r10,r8
8000c4cc:	12 9b       	mov	r11,r9
8000c4ce:	f0 16 00 09 	mcall	r6[36]
8000c4d2:	18 99       	mov	r9,r12
8000c4d4:	ea c8 fc a3 	sub	r8,r5,-861
8000c4d8:	e2 08 09 29 	st.w	r1[r8<<0x2],r9
	centralData->imu1.attitude.be[axis+ACC_OFFSET] = centralData->imu1.attitude.be[axis+ACC_OFFSET] + K3 * yd;
8000c4dc:	ec f8 00 00 	ld.w	r8,r6[0]
8000c4e0:	70 01       	ld.w	r1,r8[0x0]
8000c4e2:	ee f8 ff 8c 	ld.w	r8,r7[-116]
8000c4e6:	f0 c5 ff fd 	sub	r5,r8,-3
8000c4ea:	ec f8 00 00 	ld.w	r8,r6[0]
8000c4ee:	70 09       	ld.w	r9,r8[0x0]
8000c4f0:	ee f8 ff 8c 	ld.w	r8,r7[-116]
8000c4f4:	2f d8       	sub	r8,-3
8000c4f6:	2f 48       	sub	r8,-12
8000c4f8:	f2 08 03 28 	ld.w	r8,r9[r8<<0x2]
8000c4fc:	10 9c       	mov	r12,r8
8000c4fe:	f0 16 00 02 	mcall	r6[8]
8000c502:	14 92       	mov	r2,r10
8000c504:	16 93       	mov	r3,r11
8000c506:	ee e8 ff 90 	ld.d	r8,r7[-112]
8000c50a:	ee ea ff b0 	ld.d	r10,r7[-80]
8000c50e:	f0 16 00 03 	mcall	r6[12]
8000c512:	14 98       	mov	r8,r10
8000c514:	16 99       	mov	r9,r11
8000c516:	04 9a       	mov	r10,r2
8000c518:	06 9b       	mov	r11,r3
8000c51a:	f0 16 00 05 	mcall	r6[20]
8000c51e:	14 98       	mov	r8,r10
8000c520:	16 99       	mov	r9,r11
8000c522:	10 9a       	mov	r10,r8
8000c524:	12 9b       	mov	r11,r9
8000c526:	f0 16 00 09 	mcall	r6[36]
8000c52a:	18 99       	mov	r9,r12
8000c52c:	ea c8 ff f4 	sub	r8,r5,-12
8000c530:	e2 08 09 29 	st.w	r1[r8<<0x2],r9
	
	P11 = -K1 * P2[axis][1][0] + P2[axis][0][0];
8000c534:	ee f8 ff a0 	ld.w	r8,r7[-96]
8000c538:	10 99       	mov	r9,r8
8000c53a:	ee 19 80 00 	eorh	r9,0x8000
8000c53e:	ef 49 ff 58 	st.w	r7[-168],r9
8000c542:	ee f8 ff a4 	ld.w	r8,r7[-92]
8000c546:	ef 48 ff 5c 	st.w	r7[-164],r8
8000c54a:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8000c54e:	ec fa 00 1c 	ld.w	r10,r6[28]
8000c552:	12 98       	mov	r8,r9
8000c554:	a3 78       	lsl	r8,0x3
8000c556:	12 08       	add	r8,r9
8000c558:	a3 78       	lsl	r8,0x3
8000c55a:	f4 08 00 08 	add	r8,r10,r8
8000c55e:	2e 88       	sub	r8,-24
8000c560:	f0 e8 00 00 	ld.d	r8,r8[0]
8000c564:	ee ea ff 58 	ld.d	r10,r7[-168]
8000c568:	f0 16 00 03 	mcall	r6[12]
8000c56c:	14 98       	mov	r8,r10
8000c56e:	16 99       	mov	r9,r11
8000c570:	10 9a       	mov	r10,r8
8000c572:	12 9b       	mov	r11,r9
8000c574:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8000c578:	ec fc 00 1c 	ld.w	r12,r6[28]
8000c57c:	12 98       	mov	r8,r9
8000c57e:	a3 78       	lsl	r8,0x3
8000c580:	12 08       	add	r8,r9
8000c582:	a3 78       	lsl	r8,0x3
8000c584:	f8 08 00 08 	add	r8,r12,r8
8000c588:	f0 e8 00 00 	ld.d	r8,r8[0]
8000c58c:	f0 16 00 05 	mcall	r6[20]
8000c590:	14 98       	mov	r8,r10
8000c592:	16 99       	mov	r9,r11
8000c594:	ee e9 ff b8 	st.d	r7[-72],r8
	P12 = -K1 * P2[axis][1][1] + P2[axis][0][1];
8000c598:	ee f8 ff a0 	ld.w	r8,r7[-96]
8000c59c:	10 99       	mov	r9,r8
8000c59e:	ee 19 80 00 	eorh	r9,0x8000
8000c5a2:	ef 49 ff 60 	st.w	r7[-160],r9
8000c5a6:	ee f8 ff a4 	ld.w	r8,r7[-92]
8000c5aa:	ef 48 ff 64 	st.w	r7[-156],r8
8000c5ae:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8000c5b2:	ec fa 00 1c 	ld.w	r10,r6[28]
8000c5b6:	12 98       	mov	r8,r9
8000c5b8:	a3 78       	lsl	r8,0x3
8000c5ba:	12 08       	add	r8,r9
8000c5bc:	a3 78       	lsl	r8,0x3
8000c5be:	f4 08 00 08 	add	r8,r10,r8
8000c5c2:	2e 08       	sub	r8,-32
8000c5c4:	f0 e8 00 00 	ld.d	r8,r8[0]
8000c5c8:	ee ea ff 60 	ld.d	r10,r7[-160]
8000c5cc:	f0 16 00 03 	mcall	r6[12]
8000c5d0:	14 98       	mov	r8,r10
8000c5d2:	16 99       	mov	r9,r11
8000c5d4:	10 9a       	mov	r10,r8
8000c5d6:	12 9b       	mov	r11,r9
8000c5d8:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8000c5dc:	ec fc 00 1c 	ld.w	r12,r6[28]
8000c5e0:	12 98       	mov	r8,r9
8000c5e2:	a3 78       	lsl	r8,0x3
8000c5e4:	12 08       	add	r8,r9
8000c5e6:	2f f8       	sub	r8,-1
8000c5e8:	f8 08 02 38 	ld.d	r8,r12[r8<<0x3]
8000c5ec:	f0 16 00 05 	mcall	r6[20]
8000c5f0:	14 98       	mov	r8,r10
8000c5f2:	16 99       	mov	r9,r11
8000c5f4:	ee e9 ff c0 	st.d	r7[-64],r8
	P13 = -K1 * P2[axis][1][2] + P2[axis][0][2];
8000c5f8:	ee f8 ff a0 	ld.w	r8,r7[-96]
8000c5fc:	10 99       	mov	r9,r8
8000c5fe:	ee 19 80 00 	eorh	r9,0x8000
8000c602:	ef 49 ff 68 	st.w	r7[-152],r9
8000c606:	ee f8 ff a4 	ld.w	r8,r7[-92]
8000c60a:	ef 48 ff 6c 	st.w	r7[-148],r8
8000c60e:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8000c612:	ec fa 00 1c 	ld.w	r10,r6[28]
8000c616:	12 98       	mov	r8,r9
8000c618:	a3 78       	lsl	r8,0x3
8000c61a:	12 08       	add	r8,r9
8000c61c:	a3 78       	lsl	r8,0x3
8000c61e:	f4 08 00 08 	add	r8,r10,r8
8000c622:	2d 88       	sub	r8,-40
8000c624:	f0 e8 00 00 	ld.d	r8,r8[0]
8000c628:	ee ea ff 68 	ld.d	r10,r7[-152]
8000c62c:	f0 16 00 03 	mcall	r6[12]
8000c630:	14 98       	mov	r8,r10
8000c632:	16 99       	mov	r9,r11
8000c634:	10 9a       	mov	r10,r8
8000c636:	12 9b       	mov	r11,r9
8000c638:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8000c63c:	ec fc 00 1c 	ld.w	r12,r6[28]
8000c640:	12 98       	mov	r8,r9
8000c642:	a3 78       	lsl	r8,0x3
8000c644:	12 08       	add	r8,r9
8000c646:	a3 78       	lsl	r8,0x3
8000c648:	f8 08 00 08 	add	r8,r12,r8
8000c64c:	2f 08       	sub	r8,-16
8000c64e:	f0 e8 00 00 	ld.d	r8,r8[0]
8000c652:	f0 16 00 05 	mcall	r6[20]
8000c656:	14 98       	mov	r8,r10
8000c658:	16 99       	mov	r9,r11
8000c65a:	ee e9 ff c8 	st.d	r7[-56],r8
	P21 = (1. - K2) * P2[axis][1][0];
8000c65e:	ee e8 ff a8 	ld.d	r8,r7[-88]
8000c662:	30 0a       	mov	r10,0
8000c664:	fc 1b 3f f0 	movh	r11,0x3ff0
8000c668:	f0 16 00 11 	mcall	r6[68]
8000c66c:	14 98       	mov	r8,r10
8000c66e:	16 99       	mov	r9,r11
8000c670:	10 9a       	mov	r10,r8
8000c672:	12 9b       	mov	r11,r9
8000c674:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8000c678:	ec fc 00 1c 	ld.w	r12,r6[28]
8000c67c:	12 98       	mov	r8,r9
8000c67e:	a3 78       	lsl	r8,0x3
8000c680:	12 08       	add	r8,r9
8000c682:	a3 78       	lsl	r8,0x3
8000c684:	f8 08 00 08 	add	r8,r12,r8
8000c688:	2e 88       	sub	r8,-24
8000c68a:	f0 e8 00 00 	ld.d	r8,r8[0]
8000c68e:	f0 16 00 03 	mcall	r6[12]
8000c692:	14 98       	mov	r8,r10
8000c694:	16 99       	mov	r9,r11
8000c696:	ee e9 ff d0 	st.d	r7[-48],r8
	P22 = (1. - K2) * P2[axis][1][1];
8000c69a:	ee e8 ff a8 	ld.d	r8,r7[-88]
8000c69e:	30 0a       	mov	r10,0
8000c6a0:	fc 1b 3f f0 	movh	r11,0x3ff0
8000c6a4:	f0 16 00 11 	mcall	r6[68]
8000c6a8:	14 98       	mov	r8,r10
8000c6aa:	16 99       	mov	r9,r11
8000c6ac:	10 9a       	mov	r10,r8
8000c6ae:	12 9b       	mov	r11,r9
8000c6b0:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8000c6b4:	ec fc 00 1c 	ld.w	r12,r6[28]
8000c6b8:	12 98       	mov	r8,r9
8000c6ba:	a3 78       	lsl	r8,0x3
8000c6bc:	12 08       	add	r8,r9
8000c6be:	a3 78       	lsl	r8,0x3
8000c6c0:	f8 08 00 08 	add	r8,r12,r8
8000c6c4:	2e 08       	sub	r8,-32
8000c6c6:	f0 e8 00 00 	ld.d	r8,r8[0]
8000c6ca:	f0 16 00 03 	mcall	r6[12]
8000c6ce:	14 98       	mov	r8,r10
8000c6d0:	16 99       	mov	r9,r11
8000c6d2:	ee e9 ff d8 	st.d	r7[-40],r8
	P23 = (1. - K2) * P2[axis][1][2];
8000c6d6:	ee e8 ff a8 	ld.d	r8,r7[-88]
8000c6da:	30 0a       	mov	r10,0
8000c6dc:	fc 1b 3f f0 	movh	r11,0x3ff0
8000c6e0:	f0 16 00 11 	mcall	r6[68]
8000c6e4:	14 98       	mov	r8,r10
8000c6e6:	16 99       	mov	r9,r11
8000c6e8:	10 9a       	mov	r10,r8
8000c6ea:	12 9b       	mov	r11,r9
8000c6ec:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8000c6f0:	ec fc 00 1c 	ld.w	r12,r6[28]
8000c6f4:	12 98       	mov	r8,r9
8000c6f6:	a3 78       	lsl	r8,0x3
8000c6f8:	12 08       	add	r8,r9
8000c6fa:	a3 78       	lsl	r8,0x3
8000c6fc:	f8 08 00 08 	add	r8,r12,r8
8000c700:	2d 88       	sub	r8,-40
8000c702:	f0 e8 00 00 	ld.d	r8,r8[0]
8000c706:	f0 16 00 03 	mcall	r6[12]
8000c70a:	14 98       	mov	r8,r10
8000c70c:	16 99       	mov	r9,r11
8000c70e:	ee e9 ff e0 	st.d	r7[-32],r8
	P31 = -K3 * P2[axis][1][0] + P2[axis][2][0];
8000c712:	ee f8 ff b0 	ld.w	r8,r7[-80]
8000c716:	10 99       	mov	r9,r8
8000c718:	ee 19 80 00 	eorh	r9,0x8000
8000c71c:	ef 49 ff 70 	st.w	r7[-144],r9
8000c720:	ee f8 ff b4 	ld.w	r8,r7[-76]
8000c724:	ef 48 ff 74 	st.w	r7[-140],r8
8000c728:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8000c72c:	ec fa 00 1c 	ld.w	r10,r6[28]
8000c730:	12 98       	mov	r8,r9
8000c732:	a3 78       	lsl	r8,0x3
8000c734:	12 08       	add	r8,r9
8000c736:	a3 78       	lsl	r8,0x3
8000c738:	f4 08 00 08 	add	r8,r10,r8
8000c73c:	2e 88       	sub	r8,-24
8000c73e:	f0 e8 00 00 	ld.d	r8,r8[0]
8000c742:	ee ea ff 70 	ld.d	r10,r7[-144]
8000c746:	f0 16 00 03 	mcall	r6[12]
8000c74a:	14 98       	mov	r8,r10
8000c74c:	16 99       	mov	r9,r11
8000c74e:	10 9a       	mov	r10,r8
8000c750:	12 9b       	mov	r11,r9
8000c752:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8000c756:	ec fc 00 1c 	ld.w	r12,r6[28]
8000c75a:	12 98       	mov	r8,r9
8000c75c:	a3 78       	lsl	r8,0x3
8000c75e:	12 08       	add	r8,r9
8000c760:	a3 78       	lsl	r8,0x3
8000c762:	f8 08 00 08 	add	r8,r12,r8
8000c766:	2d 08       	sub	r8,-48
8000c768:	f0 e8 00 00 	ld.d	r8,r8[0]
8000c76c:	f0 16 00 05 	mcall	r6[20]
8000c770:	14 98       	mov	r8,r10
8000c772:	16 99       	mov	r9,r11
8000c774:	ee e9 ff e8 	st.d	r7[-24],r8
	P32 = -K3 * P2[axis][1][1] + P2[axis][2][1];
8000c778:	ee f8 ff b0 	ld.w	r8,r7[-80]
8000c77c:	10 99       	mov	r9,r8
8000c77e:	ee 19 80 00 	eorh	r9,0x8000
8000c782:	ef 49 ff 78 	st.w	r7[-136],r9
8000c786:	ee f8 ff b4 	ld.w	r8,r7[-76]
8000c78a:	ef 48 ff 7c 	st.w	r7[-132],r8
8000c78e:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8000c792:	ec fa 00 1c 	ld.w	r10,r6[28]
8000c796:	12 98       	mov	r8,r9
8000c798:	a3 78       	lsl	r8,0x3
8000c79a:	12 08       	add	r8,r9
8000c79c:	a3 78       	lsl	r8,0x3
8000c79e:	f4 08 00 08 	add	r8,r10,r8
8000c7a2:	2e 08       	sub	r8,-32
8000c7a4:	f0 e8 00 00 	ld.d	r8,r8[0]
8000c7a8:	ee ea ff 78 	ld.d	r10,r7[-136]
8000c7ac:	f0 16 00 03 	mcall	r6[12]
8000c7b0:	14 98       	mov	r8,r10
8000c7b2:	16 99       	mov	r9,r11
8000c7b4:	10 9a       	mov	r10,r8
8000c7b6:	12 9b       	mov	r11,r9
8000c7b8:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8000c7bc:	ec fc 00 1c 	ld.w	r12,r6[28]
8000c7c0:	12 98       	mov	r8,r9
8000c7c2:	a3 78       	lsl	r8,0x3
8000c7c4:	12 08       	add	r8,r9
8000c7c6:	a3 78       	lsl	r8,0x3
8000c7c8:	f8 08 00 08 	add	r8,r12,r8
8000c7cc:	2c 88       	sub	r8,-56
8000c7ce:	f0 e8 00 00 	ld.d	r8,r8[0]
8000c7d2:	f0 16 00 05 	mcall	r6[20]
8000c7d6:	14 98       	mov	r8,r10
8000c7d8:	16 99       	mov	r9,r11
8000c7da:	ee e9 ff f0 	st.d	r7[-16],r8
	P33 = -K3 * P2[axis][1][2] + P2[axis][2][2];
8000c7de:	ee f8 ff b0 	ld.w	r8,r7[-80]
8000c7e2:	10 99       	mov	r9,r8
8000c7e4:	ee 19 80 00 	eorh	r9,0x8000
8000c7e8:	ef 49 ff 80 	st.w	r7[-128],r9
8000c7ec:	ee f8 ff b4 	ld.w	r8,r7[-76]
8000c7f0:	ef 48 ff 84 	st.w	r7[-124],r8
8000c7f4:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8000c7f8:	ec fa 00 1c 	ld.w	r10,r6[28]
8000c7fc:	12 98       	mov	r8,r9
8000c7fe:	a3 78       	lsl	r8,0x3
8000c800:	12 08       	add	r8,r9
8000c802:	a3 78       	lsl	r8,0x3
8000c804:	f4 08 00 08 	add	r8,r10,r8
8000c808:	2d 88       	sub	r8,-40
8000c80a:	f0 e8 00 00 	ld.d	r8,r8[0]
8000c80e:	ee ea ff 80 	ld.d	r10,r7[-128]
8000c812:	f0 16 00 03 	mcall	r6[12]
8000c816:	14 98       	mov	r8,r10
8000c818:	16 99       	mov	r9,r11
8000c81a:	10 9a       	mov	r10,r8
8000c81c:	12 9b       	mov	r11,r9
8000c81e:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8000c822:	ec fc 00 1c 	ld.w	r12,r6[28]
8000c826:	12 98       	mov	r8,r9
8000c828:	a3 78       	lsl	r8,0x3
8000c82a:	12 08       	add	r8,r9
8000c82c:	a3 78       	lsl	r8,0x3
8000c82e:	f8 08 00 08 	add	r8,r12,r8
8000c832:	2c 08       	sub	r8,-64
8000c834:	f0 e8 00 00 	ld.d	r8,r8[0]
8000c838:	f0 16 00 05 	mcall	r6[20]
8000c83c:	14 98       	mov	r8,r10
8000c83e:	16 99       	mov	r9,r11
8000c840:	ee e9 ff f8 	st.d	r7[-8],r8

	P2[axis][0][0] = P11;
8000c844:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8000c848:	ec fa 00 1c 	ld.w	r10,r6[28]
8000c84c:	12 98       	mov	r8,r9
8000c84e:	a3 78       	lsl	r8,0x3
8000c850:	12 08       	add	r8,r9
8000c852:	a3 78       	lsl	r8,0x3
8000c854:	10 0a       	add	r10,r8
8000c856:	ee e8 ff b8 	ld.d	r8,r7[-72]
8000c85a:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][0][1] = P12;
8000c85e:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8000c862:	ec fa 00 1c 	ld.w	r10,r6[28]
8000c866:	12 98       	mov	r8,r9
8000c868:	a3 78       	lsl	r8,0x3
8000c86a:	12 08       	add	r8,r9
8000c86c:	f0 cb ff ff 	sub	r11,r8,-1
8000c870:	ee e8 ff c0 	ld.d	r8,r7[-64]
8000c874:	f4 0b 08 38 	st.d	r10[r11<<0x3],r8
	P2[axis][0][2] = P13;
8000c878:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8000c87c:	ec fa 00 1c 	ld.w	r10,r6[28]
8000c880:	12 98       	mov	r8,r9
8000c882:	a3 78       	lsl	r8,0x3
8000c884:	12 08       	add	r8,r9
8000c886:	a3 78       	lsl	r8,0x3
8000c888:	f4 08 00 08 	add	r8,r10,r8
8000c88c:	f0 ca ff f0 	sub	r10,r8,-16
8000c890:	ee e8 ff c8 	ld.d	r8,r7[-56]
8000c894:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][1][0] = P21;
8000c898:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8000c89c:	ec fa 00 1c 	ld.w	r10,r6[28]
8000c8a0:	12 98       	mov	r8,r9
8000c8a2:	a3 78       	lsl	r8,0x3
8000c8a4:	12 08       	add	r8,r9
8000c8a6:	a3 78       	lsl	r8,0x3
8000c8a8:	f4 08 00 08 	add	r8,r10,r8
8000c8ac:	f0 ca ff e8 	sub	r10,r8,-24
8000c8b0:	ee e8 ff d0 	ld.d	r8,r7[-48]
8000c8b4:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][1][1] = P22;
8000c8b8:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8000c8bc:	ec fa 00 1c 	ld.w	r10,r6[28]
8000c8c0:	12 98       	mov	r8,r9
8000c8c2:	a3 78       	lsl	r8,0x3
8000c8c4:	12 08       	add	r8,r9
8000c8c6:	a3 78       	lsl	r8,0x3
8000c8c8:	f4 08 00 08 	add	r8,r10,r8
8000c8cc:	f0 ca ff e0 	sub	r10,r8,-32
8000c8d0:	ee e8 ff d8 	ld.d	r8,r7[-40]
8000c8d4:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][1][2] = P23;
8000c8d8:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8000c8dc:	ec fa 00 1c 	ld.w	r10,r6[28]
8000c8e0:	12 98       	mov	r8,r9
8000c8e2:	a3 78       	lsl	r8,0x3
8000c8e4:	12 08       	add	r8,r9
8000c8e6:	a3 78       	lsl	r8,0x3
8000c8e8:	f4 08 00 08 	add	r8,r10,r8
8000c8ec:	f0 ca ff d8 	sub	r10,r8,-40
8000c8f0:	ee e8 ff e0 	ld.d	r8,r7[-32]
8000c8f4:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][2][0] = P31;
8000c8f8:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8000c8fc:	ec fa 00 1c 	ld.w	r10,r6[28]
8000c900:	12 98       	mov	r8,r9
8000c902:	a3 78       	lsl	r8,0x3
8000c904:	12 08       	add	r8,r9
8000c906:	a3 78       	lsl	r8,0x3
8000c908:	f4 08 00 08 	add	r8,r10,r8
8000c90c:	f0 ca ff d0 	sub	r10,r8,-48
8000c910:	ee e8 ff e8 	ld.d	r8,r7[-24]
8000c914:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][2][1] = P32;
8000c918:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8000c91c:	ec fa 00 1c 	ld.w	r10,r6[28]
8000c920:	12 98       	mov	r8,r9
8000c922:	a3 78       	lsl	r8,0x3
8000c924:	12 08       	add	r8,r9
8000c926:	a3 78       	lsl	r8,0x3
8000c928:	f4 08 00 08 	add	r8,r10,r8
8000c92c:	f0 ca ff c8 	sub	r10,r8,-56
8000c930:	ee e8 ff f0 	ld.d	r8,r7[-16]
8000c934:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][2][2] = P33;
8000c938:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8000c93c:	ec fa 00 1c 	ld.w	r10,r6[28]
8000c940:	12 98       	mov	r8,r9
8000c942:	a3 78       	lsl	r8,0x3
8000c944:	12 08       	add	r8,r9
8000c946:	a3 78       	lsl	r8,0x3
8000c948:	f4 08 00 08 	add	r8,r10,r8
8000c94c:	f0 ca ff c0 	sub	r10,r8,-64
8000c950:	ee e8 ff f8 	ld.d	r8,r7[-8]
8000c954:	f4 e9 00 00 	st.d	r10[0],r8
}
8000c958:	2c ad       	sub	sp,-216
8000c95a:	e3 cd 80 ee 	ldm	sp++,r1-r3,r5-r7,pc
8000c95e:	00 00       	add	r0,r0
8000c960:	80 00       	ld.sh	r0,r0[0x0]
8000c962:	bb ce       	cbr	lr,0x1a

8000c964 <e_kalman_update_position_hf>:
  Xp = Xm + K*y;
  // update covariance
  Pp = Pm - K*H*Pm;
*/
void e_kalman_update_position_hf(int axis, double position_meas)
{
8000c964:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
8000c968:	1a 97       	mov	r7,sp
8000c96a:	21 bd       	sub	sp,108
8000c96c:	fe f6 05 80 	ld.w	r6,pc[1408]
8000c970:	1e 26       	rsub	r6,pc
8000c972:	ef 4c ff bc 	st.w	r7[-68],r12
8000c976:	ee eb ff b4 	st.d	r7[-76],r10
	double posxy,S,K1,K2;
	double P11,P12,P21,P22;
	
	posxy = position_meas - centralData->estimation.state[axis][POSITION];
8000c97a:	ec f8 00 00 	ld.w	r8,r6[0]
8000c97e:	70 0a       	ld.w	r10,r8[0x0]
8000c980:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000c984:	12 98       	mov	r8,r9
8000c986:	a1 78       	lsl	r8,0x1
8000c988:	12 08       	add	r8,r9
8000c98a:	a3 78       	lsl	r8,0x3
8000c98c:	f4 08 00 08 	add	r8,r10,r8
8000c990:	f0 c8 f4 a4 	sub	r8,r8,-2908
8000c994:	f0 e8 00 00 	ld.d	r8,r8[0]
8000c998:	ee ea ff b4 	ld.d	r10,r7[-76]
8000c99c:	f0 16 00 11 	mcall	r6[68]
8000c9a0:	14 98       	mov	r8,r10
8000c9a2:	16 99       	mov	r9,r11
8000c9a4:	ee e9 ff c0 	st.d	r7[-64],r8
	
	
	S = P[axis][0][0] + R[axis];
8000c9a8:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000c9ac:	ec fa 00 18 	ld.w	r10,r6[24]
8000c9b0:	12 98       	mov	r8,r9
8000c9b2:	a3 78       	lsl	r8,0x3
8000c9b4:	12 08       	add	r8,r9
8000c9b6:	a3 78       	lsl	r8,0x3
8000c9b8:	f4 08 00 08 	add	r8,r10,r8
8000c9bc:	f0 ea 00 00 	ld.d	r10,r8[0]
8000c9c0:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000c9c4:	ec f8 01 50 	ld.w	r8,r6[336]
8000c9c8:	f0 09 02 38 	ld.d	r8,r8[r9<<0x3]
8000c9cc:	f0 16 00 05 	mcall	r6[20]
8000c9d0:	14 98       	mov	r8,r10
8000c9d2:	16 99       	mov	r9,r11
8000c9d4:	ee e9 ff c8 	st.d	r7[-56],r8
	K1 = P[axis][0][0] * 1/S;
8000c9d8:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000c9dc:	ec fa 00 18 	ld.w	r10,r6[24]
8000c9e0:	12 98       	mov	r8,r9
8000c9e2:	a3 78       	lsl	r8,0x3
8000c9e4:	12 08       	add	r8,r9
8000c9e6:	a3 78       	lsl	r8,0x3
8000c9e8:	f4 08 00 08 	add	r8,r10,r8
8000c9ec:	f0 ea 00 00 	ld.d	r10,r8[0]
8000c9f0:	ee e8 ff c8 	ld.d	r8,r7[-56]
8000c9f4:	f0 16 00 0c 	mcall	r6[48]
8000c9f8:	14 98       	mov	r8,r10
8000c9fa:	16 99       	mov	r9,r11
8000c9fc:	ee e9 ff d0 	st.d	r7[-48],r8
	K2 = P[axis][1][0] * 1/S;
8000ca00:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000ca04:	ec fa 00 18 	ld.w	r10,r6[24]
8000ca08:	12 98       	mov	r8,r9
8000ca0a:	a3 78       	lsl	r8,0x3
8000ca0c:	12 08       	add	r8,r9
8000ca0e:	a3 78       	lsl	r8,0x3
8000ca10:	f4 08 00 08 	add	r8,r10,r8
8000ca14:	2e 88       	sub	r8,-24
8000ca16:	f0 ea 00 00 	ld.d	r10,r8[0]
8000ca1a:	ee e8 ff c8 	ld.d	r8,r7[-56]
8000ca1e:	f0 16 00 0c 	mcall	r6[48]
8000ca22:	14 98       	mov	r8,r10
8000ca24:	16 99       	mov	r9,r11
8000ca26:	ee e9 ff d8 	st.d	r7[-40],r8
	
	centralData->estimation.state[axis][POSITION] = centralData->estimation.state[axis][POSITION] + K1 * posxy;
8000ca2a:	ec f8 00 00 	ld.w	r8,r6[0]
8000ca2e:	70 08       	ld.w	r8,r8[0x0]
8000ca30:	ef 48 ff 94 	st.w	r7[-108],r8
8000ca34:	ee f5 ff bc 	ld.w	r5,r7[-68]
8000ca38:	ec f8 00 00 	ld.w	r8,r6[0]
8000ca3c:	70 0a       	ld.w	r10,r8[0x0]
8000ca3e:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000ca42:	12 98       	mov	r8,r9
8000ca44:	a1 78       	lsl	r8,0x1
8000ca46:	12 08       	add	r8,r9
8000ca48:	a3 78       	lsl	r8,0x3
8000ca4a:	f4 08 00 08 	add	r8,r10,r8
8000ca4e:	f0 c8 f4 a4 	sub	r8,r8,-2908
8000ca52:	f0 e2 00 00 	ld.d	r2,r8[0]
8000ca56:	ee e8 ff c0 	ld.d	r8,r7[-64]
8000ca5a:	ee ea ff d0 	ld.d	r10,r7[-48]
8000ca5e:	f0 16 00 03 	mcall	r6[12]
8000ca62:	14 98       	mov	r8,r10
8000ca64:	16 99       	mov	r9,r11
8000ca66:	04 9a       	mov	r10,r2
8000ca68:	06 9b       	mov	r11,r3
8000ca6a:	f0 16 00 05 	mcall	r6[20]
8000ca6e:	14 98       	mov	r8,r10
8000ca70:	16 99       	mov	r9,r11
8000ca72:	10 9a       	mov	r10,r8
8000ca74:	12 9b       	mov	r11,r9
8000ca76:	0a 98       	mov	r8,r5
8000ca78:	a1 78       	lsl	r8,0x1
8000ca7a:	0a 08       	add	r8,r5
8000ca7c:	a3 78       	lsl	r8,0x3
8000ca7e:	ee f9 ff 94 	ld.w	r9,r7[-108]
8000ca82:	f2 08 00 08 	add	r8,r9,r8
8000ca86:	f0 c8 f4 a4 	sub	r8,r8,-2908
8000ca8a:	f0 eb 00 00 	st.d	r8[0],r10
	centralData->estimation.state[axis][SPEED] = centralData->estimation.state[axis][SPEED] + K2 * posxy;
8000ca8e:	ec f8 00 00 	ld.w	r8,r6[0]
8000ca92:	70 08       	ld.w	r8,r8[0x0]
8000ca94:	ef 48 ff 98 	st.w	r7[-104],r8
8000ca98:	ee f5 ff bc 	ld.w	r5,r7[-68]
8000ca9c:	ec f8 00 00 	ld.w	r8,r6[0]
8000caa0:	70 0a       	ld.w	r10,r8[0x0]
8000caa2:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000caa6:	12 98       	mov	r8,r9
8000caa8:	a1 78       	lsl	r8,0x1
8000caaa:	12 08       	add	r8,r9
8000caac:	2f f8       	sub	r8,-1
8000caae:	a3 78       	lsl	r8,0x3
8000cab0:	f4 08 00 08 	add	r8,r10,r8
8000cab4:	f0 e2 0b 5c 	ld.d	r2,r8[2908]
8000cab8:	ee e8 ff c0 	ld.d	r8,r7[-64]
8000cabc:	ee ea ff d8 	ld.d	r10,r7[-40]
8000cac0:	f0 16 00 03 	mcall	r6[12]
8000cac4:	14 98       	mov	r8,r10
8000cac6:	16 99       	mov	r9,r11
8000cac8:	04 9a       	mov	r10,r2
8000caca:	06 9b       	mov	r11,r3
8000cacc:	f0 16 00 05 	mcall	r6[20]
8000cad0:	14 98       	mov	r8,r10
8000cad2:	16 99       	mov	r9,r11
8000cad4:	10 9a       	mov	r10,r8
8000cad6:	12 9b       	mov	r11,r9
8000cad8:	0a 98       	mov	r8,r5
8000cada:	a1 78       	lsl	r8,0x1
8000cadc:	0a 08       	add	r8,r5
8000cade:	2f f8       	sub	r8,-1
8000cae0:	a3 78       	lsl	r8,0x3
8000cae2:	ee f9 ff 98 	ld.w	r9,r7[-104]
8000cae6:	f2 08 00 08 	add	r8,r9,r8
8000caea:	f0 eb 0b 5c 	st.d	r8[2908],r10
	
	P11 = (1. - K1) * P[axis][0][0];
8000caee:	ee e8 ff d0 	ld.d	r8,r7[-48]
8000caf2:	30 0a       	mov	r10,0
8000caf4:	fc 1b 3f f0 	movh	r11,0x3ff0
8000caf8:	f0 16 00 11 	mcall	r6[68]
8000cafc:	14 98       	mov	r8,r10
8000cafe:	16 99       	mov	r9,r11
8000cb00:	10 9a       	mov	r10,r8
8000cb02:	12 9b       	mov	r11,r9
8000cb04:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000cb08:	ec fc 00 18 	ld.w	r12,r6[24]
8000cb0c:	12 98       	mov	r8,r9
8000cb0e:	a3 78       	lsl	r8,0x3
8000cb10:	12 08       	add	r8,r9
8000cb12:	a3 78       	lsl	r8,0x3
8000cb14:	f8 08 00 08 	add	r8,r12,r8
8000cb18:	f0 e8 00 00 	ld.d	r8,r8[0]
8000cb1c:	f0 16 00 03 	mcall	r6[12]
8000cb20:	14 98       	mov	r8,r10
8000cb22:	16 99       	mov	r9,r11
8000cb24:	ee e9 ff e0 	st.d	r7[-32],r8
	P12 = (1. - K1) * P[axis][0][1];
8000cb28:	ee e8 ff d0 	ld.d	r8,r7[-48]
8000cb2c:	30 0a       	mov	r10,0
8000cb2e:	fc 1b 3f f0 	movh	r11,0x3ff0
8000cb32:	f0 16 00 11 	mcall	r6[68]
8000cb36:	14 98       	mov	r8,r10
8000cb38:	16 99       	mov	r9,r11
8000cb3a:	10 9a       	mov	r10,r8
8000cb3c:	12 9b       	mov	r11,r9
8000cb3e:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000cb42:	ec fc 00 18 	ld.w	r12,r6[24]
8000cb46:	12 98       	mov	r8,r9
8000cb48:	a3 78       	lsl	r8,0x3
8000cb4a:	12 08       	add	r8,r9
8000cb4c:	2f f8       	sub	r8,-1
8000cb4e:	f8 08 02 38 	ld.d	r8,r12[r8<<0x3]
8000cb52:	f0 16 00 03 	mcall	r6[12]
8000cb56:	14 98       	mov	r8,r10
8000cb58:	16 99       	mov	r9,r11
8000cb5a:	ee e9 ff e8 	st.d	r7[-24],r8
	P21 = -K2 * P[axis][0][0] + P[axis][1][0];
8000cb5e:	ee f8 ff d8 	ld.w	r8,r7[-40]
8000cb62:	10 99       	mov	r9,r8
8000cb64:	ee 19 80 00 	eorh	r9,0x8000
8000cb68:	ef 49 ff 9c 	st.w	r7[-100],r9
8000cb6c:	ee f8 ff dc 	ld.w	r8,r7[-36]
8000cb70:	ef 48 ff a0 	st.w	r7[-96],r8
8000cb74:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000cb78:	ec fa 00 18 	ld.w	r10,r6[24]
8000cb7c:	12 98       	mov	r8,r9
8000cb7e:	a3 78       	lsl	r8,0x3
8000cb80:	12 08       	add	r8,r9
8000cb82:	a3 78       	lsl	r8,0x3
8000cb84:	f4 08 00 08 	add	r8,r10,r8
8000cb88:	f0 e8 00 00 	ld.d	r8,r8[0]
8000cb8c:	ee ea ff 9c 	ld.d	r10,r7[-100]
8000cb90:	f0 16 00 03 	mcall	r6[12]
8000cb94:	14 98       	mov	r8,r10
8000cb96:	16 99       	mov	r9,r11
8000cb98:	10 9a       	mov	r10,r8
8000cb9a:	12 9b       	mov	r11,r9
8000cb9c:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000cba0:	ec fc 00 18 	ld.w	r12,r6[24]
8000cba4:	12 98       	mov	r8,r9
8000cba6:	a3 78       	lsl	r8,0x3
8000cba8:	12 08       	add	r8,r9
8000cbaa:	a3 78       	lsl	r8,0x3
8000cbac:	f8 08 00 08 	add	r8,r12,r8
8000cbb0:	2e 88       	sub	r8,-24
8000cbb2:	f0 e8 00 00 	ld.d	r8,r8[0]
8000cbb6:	f0 16 00 05 	mcall	r6[20]
8000cbba:	14 98       	mov	r8,r10
8000cbbc:	16 99       	mov	r9,r11
8000cbbe:	ee e9 ff f0 	st.d	r7[-16],r8
	P22 = -K2 * P[axis][0][1] + P[axis][1][1];
8000cbc2:	ee f8 ff d8 	ld.w	r8,r7[-40]
8000cbc6:	10 99       	mov	r9,r8
8000cbc8:	ee 19 80 00 	eorh	r9,0x8000
8000cbcc:	ef 49 ff a4 	st.w	r7[-92],r9
8000cbd0:	ee f8 ff dc 	ld.w	r8,r7[-36]
8000cbd4:	ef 48 ff a8 	st.w	r7[-88],r8
8000cbd8:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000cbdc:	ec fa 00 18 	ld.w	r10,r6[24]
8000cbe0:	12 98       	mov	r8,r9
8000cbe2:	a3 78       	lsl	r8,0x3
8000cbe4:	12 08       	add	r8,r9
8000cbe6:	2f f8       	sub	r8,-1
8000cbe8:	f4 08 02 38 	ld.d	r8,r10[r8<<0x3]
8000cbec:	ee ea ff a4 	ld.d	r10,r7[-92]
8000cbf0:	f0 16 00 03 	mcall	r6[12]
8000cbf4:	14 98       	mov	r8,r10
8000cbf6:	16 99       	mov	r9,r11
8000cbf8:	10 9a       	mov	r10,r8
8000cbfa:	12 9b       	mov	r11,r9
8000cbfc:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000cc00:	ec fc 00 18 	ld.w	r12,r6[24]
8000cc04:	12 98       	mov	r8,r9
8000cc06:	a3 78       	lsl	r8,0x3
8000cc08:	12 08       	add	r8,r9
8000cc0a:	a3 78       	lsl	r8,0x3
8000cc0c:	f8 08 00 08 	add	r8,r12,r8
8000cc10:	2e 08       	sub	r8,-32
8000cc12:	f0 e8 00 00 	ld.d	r8,r8[0]
8000cc16:	f0 16 00 05 	mcall	r6[20]
8000cc1a:	14 98       	mov	r8,r10
8000cc1c:	16 99       	mov	r9,r11
8000cc1e:	ee e9 ff f8 	st.d	r7[-8],r8

	P[axis][0][0] = P11;
8000cc22:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000cc26:	ec fa 00 18 	ld.w	r10,r6[24]
8000cc2a:	12 98       	mov	r8,r9
8000cc2c:	a3 78       	lsl	r8,0x3
8000cc2e:	12 08       	add	r8,r9
8000cc30:	a3 78       	lsl	r8,0x3
8000cc32:	10 0a       	add	r10,r8
8000cc34:	ee e8 ff e0 	ld.d	r8,r7[-32]
8000cc38:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][0][1] = P12;
8000cc3c:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000cc40:	ec fa 00 18 	ld.w	r10,r6[24]
8000cc44:	12 98       	mov	r8,r9
8000cc46:	a3 78       	lsl	r8,0x3
8000cc48:	12 08       	add	r8,r9
8000cc4a:	f0 cb ff ff 	sub	r11,r8,-1
8000cc4e:	ee e8 ff e8 	ld.d	r8,r7[-24]
8000cc52:	f4 0b 08 38 	st.d	r10[r11<<0x3],r8
	P[axis][1][0] = P21;
8000cc56:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000cc5a:	ec fa 00 18 	ld.w	r10,r6[24]
8000cc5e:	12 98       	mov	r8,r9
8000cc60:	a3 78       	lsl	r8,0x3
8000cc62:	12 08       	add	r8,r9
8000cc64:	a3 78       	lsl	r8,0x3
8000cc66:	f4 08 00 08 	add	r8,r10,r8
8000cc6a:	f0 ca ff e8 	sub	r10,r8,-24
8000cc6e:	ee e8 ff f0 	ld.d	r8,r7[-16]
8000cc72:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][1][1] = P22;
8000cc76:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000cc7a:	ec fa 00 18 	ld.w	r10,r6[24]
8000cc7e:	12 98       	mov	r8,r9
8000cc80:	a3 78       	lsl	r8,0x3
8000cc82:	12 08       	add	r8,r9
8000cc84:	a3 78       	lsl	r8,0x3
8000cc86:	f4 08 00 08 	add	r8,r10,r8
8000cc8a:	f0 ca ff e0 	sub	r10,r8,-32
8000cc8e:	ee e8 ff f8 	ld.d	r8,r7[-8]
8000cc92:	f4 e9 00 00 	st.d	r10[0],r8
	
	/*************************************************************************************/
	posxy = position_meas - centralData->position_estimator.localPosition.pos[axis];
8000cc96:	ec f8 00 00 	ld.w	r8,r6[0]
8000cc9a:	70 08       	ld.w	r8,r8[0x0]
8000cc9c:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000cca0:	f2 c9 fc 99 	sub	r9,r9,-871
8000cca4:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8000cca8:	10 9c       	mov	r12,r8
8000ccaa:	f0 16 00 02 	mcall	r6[8]
8000ccae:	14 98       	mov	r8,r10
8000ccb0:	16 99       	mov	r9,r11
8000ccb2:	ee ea ff b4 	ld.d	r10,r7[-76]
8000ccb6:	f0 16 00 11 	mcall	r6[68]
8000ccba:	14 98       	mov	r8,r10
8000ccbc:	16 99       	mov	r9,r11
8000ccbe:	ee e9 ff c0 	st.d	r7[-64],r8
	
	S = P2[axis][0][0] + R2[axis];
8000ccc2:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000ccc6:	ec fa 00 1c 	ld.w	r10,r6[28]
8000ccca:	12 98       	mov	r8,r9
8000cccc:	a3 78       	lsl	r8,0x3
8000ccce:	12 08       	add	r8,r9
8000ccd0:	a3 78       	lsl	r8,0x3
8000ccd2:	f4 08 00 08 	add	r8,r10,r8
8000ccd6:	f0 ea 00 00 	ld.d	r10,r8[0]
8000ccda:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000ccde:	ec f8 01 4c 	ld.w	r8,r6[332]
8000cce2:	f0 09 02 38 	ld.d	r8,r8[r9<<0x3]
8000cce6:	f0 16 00 05 	mcall	r6[20]
8000ccea:	14 98       	mov	r8,r10
8000ccec:	16 99       	mov	r9,r11
8000ccee:	ee e9 ff c8 	st.d	r7[-56],r8
	K1 = P2[axis][0][0] * 1/S;
8000ccf2:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000ccf6:	ec fa 00 1c 	ld.w	r10,r6[28]
8000ccfa:	12 98       	mov	r8,r9
8000ccfc:	a3 78       	lsl	r8,0x3
8000ccfe:	12 08       	add	r8,r9
8000cd00:	a3 78       	lsl	r8,0x3
8000cd02:	f4 08 00 08 	add	r8,r10,r8
8000cd06:	f0 ea 00 00 	ld.d	r10,r8[0]
8000cd0a:	ee e8 ff c8 	ld.d	r8,r7[-56]
8000cd0e:	f0 16 00 0c 	mcall	r6[48]
8000cd12:	14 98       	mov	r8,r10
8000cd14:	16 99       	mov	r9,r11
8000cd16:	ee e9 ff d0 	st.d	r7[-48],r8
	K2 = P2[axis][1][0] * 1/S;
8000cd1a:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000cd1e:	ec fa 00 1c 	ld.w	r10,r6[28]
8000cd22:	12 98       	mov	r8,r9
8000cd24:	a3 78       	lsl	r8,0x3
8000cd26:	12 08       	add	r8,r9
8000cd28:	a3 78       	lsl	r8,0x3
8000cd2a:	f4 08 00 08 	add	r8,r10,r8
8000cd2e:	2e 88       	sub	r8,-24
8000cd30:	f0 ea 00 00 	ld.d	r10,r8[0]
8000cd34:	ee e8 ff c8 	ld.d	r8,r7[-56]
8000cd38:	f0 16 00 0c 	mcall	r6[48]
8000cd3c:	14 98       	mov	r8,r10
8000cd3e:	16 99       	mov	r9,r11
8000cd40:	ee e9 ff d8 	st.d	r7[-40],r8
	
	//centralData->position_estimator.localPosition.pos[axis] = centralData->position_estimator.localPosition.pos[axis] + K1 * posxy;
	//centralData->position_estimator.vel[axis] = centralData->position_estimator.vel[axis] + K2 * posxy;
	
	P11 = (1. - K1) * P2[axis][0][0];
8000cd44:	ee e8 ff d0 	ld.d	r8,r7[-48]
8000cd48:	30 0a       	mov	r10,0
8000cd4a:	fc 1b 3f f0 	movh	r11,0x3ff0
8000cd4e:	f0 16 00 11 	mcall	r6[68]
8000cd52:	14 98       	mov	r8,r10
8000cd54:	16 99       	mov	r9,r11
8000cd56:	10 9a       	mov	r10,r8
8000cd58:	12 9b       	mov	r11,r9
8000cd5a:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000cd5e:	ec fc 00 1c 	ld.w	r12,r6[28]
8000cd62:	12 98       	mov	r8,r9
8000cd64:	a3 78       	lsl	r8,0x3
8000cd66:	12 08       	add	r8,r9
8000cd68:	a3 78       	lsl	r8,0x3
8000cd6a:	f8 08 00 08 	add	r8,r12,r8
8000cd6e:	f0 e8 00 00 	ld.d	r8,r8[0]
8000cd72:	f0 16 00 03 	mcall	r6[12]
8000cd76:	14 98       	mov	r8,r10
8000cd78:	16 99       	mov	r9,r11
8000cd7a:	ee e9 ff e0 	st.d	r7[-32],r8
	P12 = (1. - K1) * P2[axis][0][1];
8000cd7e:	ee e8 ff d0 	ld.d	r8,r7[-48]
8000cd82:	30 0a       	mov	r10,0
8000cd84:	fc 1b 3f f0 	movh	r11,0x3ff0
8000cd88:	f0 16 00 11 	mcall	r6[68]
8000cd8c:	14 98       	mov	r8,r10
8000cd8e:	16 99       	mov	r9,r11
8000cd90:	10 9a       	mov	r10,r8
8000cd92:	12 9b       	mov	r11,r9
8000cd94:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000cd98:	ec fc 00 1c 	ld.w	r12,r6[28]
8000cd9c:	12 98       	mov	r8,r9
8000cd9e:	a3 78       	lsl	r8,0x3
8000cda0:	12 08       	add	r8,r9
8000cda2:	2f f8       	sub	r8,-1
8000cda4:	f8 08 02 38 	ld.d	r8,r12[r8<<0x3]
8000cda8:	f0 16 00 03 	mcall	r6[12]
8000cdac:	14 98       	mov	r8,r10
8000cdae:	16 99       	mov	r9,r11
8000cdb0:	ee e9 ff e8 	st.d	r7[-24],r8
	P21 = -K2 * P2[axis][0][0] + P2[axis][1][0];
8000cdb4:	ee f8 ff d8 	ld.w	r8,r7[-40]
8000cdb8:	10 99       	mov	r9,r8
8000cdba:	ee 19 80 00 	eorh	r9,0x8000
8000cdbe:	ef 49 ff ac 	st.w	r7[-84],r9
8000cdc2:	ee f8 ff dc 	ld.w	r8,r7[-36]
8000cdc6:	ef 48 ff b0 	st.w	r7[-80],r8
8000cdca:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000cdce:	ec fa 00 1c 	ld.w	r10,r6[28]
8000cdd2:	12 98       	mov	r8,r9
8000cdd4:	a3 78       	lsl	r8,0x3
8000cdd6:	12 08       	add	r8,r9
8000cdd8:	a3 78       	lsl	r8,0x3
8000cdda:	f4 08 00 08 	add	r8,r10,r8
8000cdde:	f0 e8 00 00 	ld.d	r8,r8[0]
8000cde2:	ee ea ff ac 	ld.d	r10,r7[-84]
8000cde6:	f0 16 00 03 	mcall	r6[12]
8000cdea:	14 98       	mov	r8,r10
8000cdec:	16 99       	mov	r9,r11
8000cdee:	10 9a       	mov	r10,r8
8000cdf0:	12 9b       	mov	r11,r9
8000cdf2:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000cdf6:	ec fc 00 1c 	ld.w	r12,r6[28]
8000cdfa:	12 98       	mov	r8,r9
8000cdfc:	a3 78       	lsl	r8,0x3
8000cdfe:	12 08       	add	r8,r9
8000ce00:	a3 78       	lsl	r8,0x3
8000ce02:	f8 08 00 08 	add	r8,r12,r8
8000ce06:	2e 88       	sub	r8,-24
8000ce08:	f0 e8 00 00 	ld.d	r8,r8[0]
8000ce0c:	f0 16 00 05 	mcall	r6[20]
8000ce10:	14 98       	mov	r8,r10
8000ce12:	16 99       	mov	r9,r11
8000ce14:	ee e9 ff f0 	st.d	r7[-16],r8
	P22 = -K2 * P2[axis][0][1] + P2[axis][1][1];
8000ce18:	ee f8 ff d8 	ld.w	r8,r7[-40]
8000ce1c:	10 91       	mov	r1,r8
8000ce1e:	ee 11 80 00 	eorh	r1,0x8000
8000ce22:	ee f0 ff dc 	ld.w	r0,r7[-36]
8000ce26:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000ce2a:	ec fa 00 1c 	ld.w	r10,r6[28]
8000ce2e:	12 98       	mov	r8,r9
8000ce30:	a3 78       	lsl	r8,0x3
8000ce32:	12 08       	add	r8,r9
8000ce34:	2f f8       	sub	r8,-1
8000ce36:	f4 08 02 38 	ld.d	r8,r10[r8<<0x3]
8000ce3a:	00 9a       	mov	r10,r0
8000ce3c:	02 9b       	mov	r11,r1
8000ce3e:	f0 16 00 03 	mcall	r6[12]
8000ce42:	14 98       	mov	r8,r10
8000ce44:	16 99       	mov	r9,r11
8000ce46:	10 9a       	mov	r10,r8
8000ce48:	12 9b       	mov	r11,r9
8000ce4a:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000ce4e:	ec fc 00 1c 	ld.w	r12,r6[28]
8000ce52:	12 98       	mov	r8,r9
8000ce54:	a3 78       	lsl	r8,0x3
8000ce56:	12 08       	add	r8,r9
8000ce58:	a3 78       	lsl	r8,0x3
8000ce5a:	f8 08 00 08 	add	r8,r12,r8
8000ce5e:	2e 08       	sub	r8,-32
8000ce60:	f0 e8 00 00 	ld.d	r8,r8[0]
8000ce64:	f0 16 00 05 	mcall	r6[20]
8000ce68:	14 98       	mov	r8,r10
8000ce6a:	16 99       	mov	r9,r11
8000ce6c:	ee e9 ff f8 	st.d	r7[-8],r8

	P2[axis][0][0] = P11;
8000ce70:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000ce74:	ec fa 00 1c 	ld.w	r10,r6[28]
8000ce78:	12 98       	mov	r8,r9
8000ce7a:	a3 78       	lsl	r8,0x3
8000ce7c:	12 08       	add	r8,r9
8000ce7e:	a3 78       	lsl	r8,0x3
8000ce80:	10 0a       	add	r10,r8
8000ce82:	ee e8 ff e0 	ld.d	r8,r7[-32]
8000ce86:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][0][1] = P12;
8000ce8a:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000ce8e:	ec fa 00 1c 	ld.w	r10,r6[28]
8000ce92:	12 98       	mov	r8,r9
8000ce94:	a3 78       	lsl	r8,0x3
8000ce96:	12 08       	add	r8,r9
8000ce98:	f0 cb ff ff 	sub	r11,r8,-1
8000ce9c:	ee e8 ff e8 	ld.d	r8,r7[-24]
8000cea0:	f4 0b 08 38 	st.d	r10[r11<<0x3],r8
	P2[axis][1][0] = P21;
8000cea4:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000cea8:	ec fa 00 1c 	ld.w	r10,r6[28]
8000ceac:	12 98       	mov	r8,r9
8000ceae:	a3 78       	lsl	r8,0x3
8000ceb0:	12 08       	add	r8,r9
8000ceb2:	a3 78       	lsl	r8,0x3
8000ceb4:	f4 08 00 08 	add	r8,r10,r8
8000ceb8:	f0 ca ff e8 	sub	r10,r8,-24
8000cebc:	ee e8 ff f0 	ld.d	r8,r7[-16]
8000cec0:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][1][1] = P22;
8000cec4:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000cec8:	ec fa 00 1c 	ld.w	r10,r6[28]
8000cecc:	12 98       	mov	r8,r9
8000cece:	a3 78       	lsl	r8,0x3
8000ced0:	12 08       	add	r8,r9
8000ced2:	a3 78       	lsl	r8,0x3
8000ced4:	f4 08 00 08 	add	r8,r10,r8
8000ced8:	f0 ca ff e0 	sub	r10,r8,-32
8000cedc:	ee e8 ff f8 	ld.d	r8,r7[-8]
8000cee0:	f4 e9 00 00 	st.d	r10[0],r8
}
8000cee4:	2e 5d       	sub	sp,-108
8000cee6:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
8000ceea:	00 00       	add	r0,r0
8000ceec:	80 00       	ld.sh	r0,r0[0x0]
8000ceee:	c7 f4       	brge	8000cfec <e_kalman_update_speed_hf+0xfc>

8000cef0 <e_kalman_update_speed_hf>:
  
  // update covariance
  Pp = Pm - K*H*Pm;
*/
void e_kalman_update_speed_hf(int axis, float speed_meas)
{
8000cef0:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
8000cef4:	1a 97       	mov	r7,sp
8000cef6:	21 ad       	sub	sp,104
8000cef8:	fe f6 05 88 	ld.w	r6,pc[1416]
8000cefc:	1e 26       	rsub	r6,pc
8000cefe:	ef 4c ff bc 	st.w	r7[-68],r12
8000cf02:	ef 4b ff b8 	st.w	r7[-72],r11
		double velxy,S,K1,K2;
		double P11,P12,P21,P22;
		
		velxy = speed_meas - centralData->estimation.state[axis][SPEED];
8000cf06:	ee fc ff b8 	ld.w	r12,r7[-72]
8000cf0a:	f0 16 00 02 	mcall	r6[8]
8000cf0e:	ec f8 00 00 	ld.w	r8,r6[0]
8000cf12:	70 0c       	ld.w	r12,r8[0x0]
8000cf14:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000cf18:	12 98       	mov	r8,r9
8000cf1a:	a1 78       	lsl	r8,0x1
8000cf1c:	12 08       	add	r8,r9
8000cf1e:	2f f8       	sub	r8,-1
8000cf20:	a3 78       	lsl	r8,0x3
8000cf22:	f8 08 00 08 	add	r8,r12,r8
8000cf26:	f0 e8 0b 5c 	ld.d	r8,r8[2908]
8000cf2a:	f0 16 00 11 	mcall	r6[68]
8000cf2e:	14 98       	mov	r8,r10
8000cf30:	16 99       	mov	r9,r11
8000cf32:	ee e9 ff c0 	st.d	r7[-64],r8
		
		S = P[axis][1][1] + R[axis];
8000cf36:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000cf3a:	ec fa 00 18 	ld.w	r10,r6[24]
8000cf3e:	12 98       	mov	r8,r9
8000cf40:	a3 78       	lsl	r8,0x3
8000cf42:	12 08       	add	r8,r9
8000cf44:	a3 78       	lsl	r8,0x3
8000cf46:	f4 08 00 08 	add	r8,r10,r8
8000cf4a:	2e 08       	sub	r8,-32
8000cf4c:	f0 ea 00 00 	ld.d	r10,r8[0]
8000cf50:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000cf54:	ec f8 01 50 	ld.w	r8,r6[336]
8000cf58:	f0 09 02 38 	ld.d	r8,r8[r9<<0x3]
8000cf5c:	f0 16 00 05 	mcall	r6[20]
8000cf60:	14 98       	mov	r8,r10
8000cf62:	16 99       	mov	r9,r11
8000cf64:	ee e9 ff c8 	st.d	r7[-56],r8
		K1 = P[axis][0][1] * 1/S;
8000cf68:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000cf6c:	ec fa 00 18 	ld.w	r10,r6[24]
8000cf70:	12 98       	mov	r8,r9
8000cf72:	a3 78       	lsl	r8,0x3
8000cf74:	12 08       	add	r8,r9
8000cf76:	2f f8       	sub	r8,-1
8000cf78:	f4 08 02 3a 	ld.d	r10,r10[r8<<0x3]
8000cf7c:	ee e8 ff c8 	ld.d	r8,r7[-56]
8000cf80:	f0 16 00 0c 	mcall	r6[48]
8000cf84:	14 98       	mov	r8,r10
8000cf86:	16 99       	mov	r9,r11
8000cf88:	ee e9 ff d0 	st.d	r7[-48],r8
		K2 = P[axis][1][1] * 1/S;
8000cf8c:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000cf90:	ec fa 00 18 	ld.w	r10,r6[24]
8000cf94:	12 98       	mov	r8,r9
8000cf96:	a3 78       	lsl	r8,0x3
8000cf98:	12 08       	add	r8,r9
8000cf9a:	a3 78       	lsl	r8,0x3
8000cf9c:	f4 08 00 08 	add	r8,r10,r8
8000cfa0:	2e 08       	sub	r8,-32
8000cfa2:	f0 ea 00 00 	ld.d	r10,r8[0]
8000cfa6:	ee e8 ff c8 	ld.d	r8,r7[-56]
8000cfaa:	f0 16 00 0c 	mcall	r6[48]
8000cfae:	14 98       	mov	r8,r10
8000cfb0:	16 99       	mov	r9,r11
8000cfb2:	ee e9 ff d8 	st.d	r7[-40],r8

		centralData->estimation.state[axis][POSITION] = centralData->estimation.state[axis][POSITION] + K1 * velxy;
8000cfb6:	ec f8 00 00 	ld.w	r8,r6[0]
8000cfba:	70 08       	ld.w	r8,r8[0x0]
8000cfbc:	ef 48 ff 98 	st.w	r7[-104],r8
8000cfc0:	ee f5 ff bc 	ld.w	r5,r7[-68]
8000cfc4:	ec f8 00 00 	ld.w	r8,r6[0]
8000cfc8:	70 0a       	ld.w	r10,r8[0x0]
8000cfca:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000cfce:	12 98       	mov	r8,r9
8000cfd0:	a1 78       	lsl	r8,0x1
8000cfd2:	12 08       	add	r8,r9
8000cfd4:	a3 78       	lsl	r8,0x3
8000cfd6:	f4 08 00 08 	add	r8,r10,r8
8000cfda:	f0 c8 f4 a4 	sub	r8,r8,-2908
8000cfde:	f0 e2 00 00 	ld.d	r2,r8[0]
8000cfe2:	ee e8 ff c0 	ld.d	r8,r7[-64]
8000cfe6:	ee ea ff d0 	ld.d	r10,r7[-48]
8000cfea:	f0 16 00 03 	mcall	r6[12]
8000cfee:	14 98       	mov	r8,r10
8000cff0:	16 99       	mov	r9,r11
8000cff2:	04 9a       	mov	r10,r2
8000cff4:	06 9b       	mov	r11,r3
8000cff6:	f0 16 00 05 	mcall	r6[20]
8000cffa:	14 98       	mov	r8,r10
8000cffc:	16 99       	mov	r9,r11
8000cffe:	10 9a       	mov	r10,r8
8000d000:	12 9b       	mov	r11,r9
8000d002:	0a 98       	mov	r8,r5
8000d004:	a1 78       	lsl	r8,0x1
8000d006:	0a 08       	add	r8,r5
8000d008:	a3 78       	lsl	r8,0x3
8000d00a:	ee f9 ff 98 	ld.w	r9,r7[-104]
8000d00e:	f2 08 00 08 	add	r8,r9,r8
8000d012:	f0 c8 f4 a4 	sub	r8,r8,-2908
8000d016:	f0 eb 00 00 	st.d	r8[0],r10
		centralData->estimation.state[axis][SPEED] = centralData->estimation.state[axis][SPEED] + K2 * velxy;
8000d01a:	ec f8 00 00 	ld.w	r8,r6[0]
8000d01e:	70 08       	ld.w	r8,r8[0x0]
8000d020:	ef 48 ff 9c 	st.w	r7[-100],r8
8000d024:	ee f5 ff bc 	ld.w	r5,r7[-68]
8000d028:	ec f8 00 00 	ld.w	r8,r6[0]
8000d02c:	70 0a       	ld.w	r10,r8[0x0]
8000d02e:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000d032:	12 98       	mov	r8,r9
8000d034:	a1 78       	lsl	r8,0x1
8000d036:	12 08       	add	r8,r9
8000d038:	2f f8       	sub	r8,-1
8000d03a:	a3 78       	lsl	r8,0x3
8000d03c:	f4 08 00 08 	add	r8,r10,r8
8000d040:	f0 e2 0b 5c 	ld.d	r2,r8[2908]
8000d044:	ee e8 ff c0 	ld.d	r8,r7[-64]
8000d048:	ee ea ff d8 	ld.d	r10,r7[-40]
8000d04c:	f0 16 00 03 	mcall	r6[12]
8000d050:	14 98       	mov	r8,r10
8000d052:	16 99       	mov	r9,r11
8000d054:	04 9a       	mov	r10,r2
8000d056:	06 9b       	mov	r11,r3
8000d058:	f0 16 00 05 	mcall	r6[20]
8000d05c:	14 98       	mov	r8,r10
8000d05e:	16 99       	mov	r9,r11
8000d060:	10 9a       	mov	r10,r8
8000d062:	12 9b       	mov	r11,r9
8000d064:	0a 98       	mov	r8,r5
8000d066:	a1 78       	lsl	r8,0x1
8000d068:	0a 08       	add	r8,r5
8000d06a:	2f f8       	sub	r8,-1
8000d06c:	a3 78       	lsl	r8,0x3
8000d06e:	ee f9 ff 9c 	ld.w	r9,r7[-100]
8000d072:	f2 08 00 08 	add	r8,r9,r8
8000d076:	f0 eb 0b 5c 	st.d	r8[2908],r10

		P11 = -K1 * P[axis][1][0] + P[axis][0][0];
8000d07a:	ee f8 ff d0 	ld.w	r8,r7[-48]
8000d07e:	10 99       	mov	r9,r8
8000d080:	ee 19 80 00 	eorh	r9,0x8000
8000d084:	ef 49 ff a0 	st.w	r7[-96],r9
8000d088:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000d08c:	ef 48 ff a4 	st.w	r7[-92],r8
8000d090:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000d094:	ec fa 00 18 	ld.w	r10,r6[24]
8000d098:	12 98       	mov	r8,r9
8000d09a:	a3 78       	lsl	r8,0x3
8000d09c:	12 08       	add	r8,r9
8000d09e:	a3 78       	lsl	r8,0x3
8000d0a0:	f4 08 00 08 	add	r8,r10,r8
8000d0a4:	2e 88       	sub	r8,-24
8000d0a6:	f0 e8 00 00 	ld.d	r8,r8[0]
8000d0aa:	ee ea ff a0 	ld.d	r10,r7[-96]
8000d0ae:	f0 16 00 03 	mcall	r6[12]
8000d0b2:	14 98       	mov	r8,r10
8000d0b4:	16 99       	mov	r9,r11
8000d0b6:	10 9a       	mov	r10,r8
8000d0b8:	12 9b       	mov	r11,r9
8000d0ba:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000d0be:	ec fc 00 18 	ld.w	r12,r6[24]
8000d0c2:	12 98       	mov	r8,r9
8000d0c4:	a3 78       	lsl	r8,0x3
8000d0c6:	12 08       	add	r8,r9
8000d0c8:	a3 78       	lsl	r8,0x3
8000d0ca:	f8 08 00 08 	add	r8,r12,r8
8000d0ce:	f0 e8 00 00 	ld.d	r8,r8[0]
8000d0d2:	f0 16 00 05 	mcall	r6[20]
8000d0d6:	14 98       	mov	r8,r10
8000d0d8:	16 99       	mov	r9,r11
8000d0da:	ee e9 ff e0 	st.d	r7[-32],r8
		P12 = -K1 * P[axis][1][1] + P[axis][0][1];
8000d0de:	ee f8 ff d0 	ld.w	r8,r7[-48]
8000d0e2:	10 99       	mov	r9,r8
8000d0e4:	ee 19 80 00 	eorh	r9,0x8000
8000d0e8:	ef 49 ff a8 	st.w	r7[-88],r9
8000d0ec:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000d0f0:	ef 48 ff ac 	st.w	r7[-84],r8
8000d0f4:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000d0f8:	ec fa 00 18 	ld.w	r10,r6[24]
8000d0fc:	12 98       	mov	r8,r9
8000d0fe:	a3 78       	lsl	r8,0x3
8000d100:	12 08       	add	r8,r9
8000d102:	a3 78       	lsl	r8,0x3
8000d104:	f4 08 00 08 	add	r8,r10,r8
8000d108:	2e 08       	sub	r8,-32
8000d10a:	f0 e8 00 00 	ld.d	r8,r8[0]
8000d10e:	ee ea ff a8 	ld.d	r10,r7[-88]
8000d112:	f0 16 00 03 	mcall	r6[12]
8000d116:	14 98       	mov	r8,r10
8000d118:	16 99       	mov	r9,r11
8000d11a:	10 9a       	mov	r10,r8
8000d11c:	12 9b       	mov	r11,r9
8000d11e:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000d122:	ec fc 00 18 	ld.w	r12,r6[24]
8000d126:	12 98       	mov	r8,r9
8000d128:	a3 78       	lsl	r8,0x3
8000d12a:	12 08       	add	r8,r9
8000d12c:	2f f8       	sub	r8,-1
8000d12e:	f8 08 02 38 	ld.d	r8,r12[r8<<0x3]
8000d132:	f0 16 00 05 	mcall	r6[20]
8000d136:	14 98       	mov	r8,r10
8000d138:	16 99       	mov	r9,r11
8000d13a:	ee e9 ff e8 	st.d	r7[-24],r8
		P21 = (1.0 - K2) * P[axis][1][0];
8000d13e:	ee e8 ff d8 	ld.d	r8,r7[-40]
8000d142:	30 0a       	mov	r10,0
8000d144:	fc 1b 3f f0 	movh	r11,0x3ff0
8000d148:	f0 16 00 11 	mcall	r6[68]
8000d14c:	14 98       	mov	r8,r10
8000d14e:	16 99       	mov	r9,r11
8000d150:	10 9a       	mov	r10,r8
8000d152:	12 9b       	mov	r11,r9
8000d154:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000d158:	ec fc 00 18 	ld.w	r12,r6[24]
8000d15c:	12 98       	mov	r8,r9
8000d15e:	a3 78       	lsl	r8,0x3
8000d160:	12 08       	add	r8,r9
8000d162:	a3 78       	lsl	r8,0x3
8000d164:	f8 08 00 08 	add	r8,r12,r8
8000d168:	2e 88       	sub	r8,-24
8000d16a:	f0 e8 00 00 	ld.d	r8,r8[0]
8000d16e:	f0 16 00 03 	mcall	r6[12]
8000d172:	14 98       	mov	r8,r10
8000d174:	16 99       	mov	r9,r11
8000d176:	ee e9 ff f0 	st.d	r7[-16],r8
		P22 = (1.0 - K2) * P[axis][1][1];
8000d17a:	ee e8 ff d8 	ld.d	r8,r7[-40]
8000d17e:	30 0a       	mov	r10,0
8000d180:	fc 1b 3f f0 	movh	r11,0x3ff0
8000d184:	f0 16 00 11 	mcall	r6[68]
8000d188:	14 98       	mov	r8,r10
8000d18a:	16 99       	mov	r9,r11
8000d18c:	10 9a       	mov	r10,r8
8000d18e:	12 9b       	mov	r11,r9
8000d190:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000d194:	ec fc 00 18 	ld.w	r12,r6[24]
8000d198:	12 98       	mov	r8,r9
8000d19a:	a3 78       	lsl	r8,0x3
8000d19c:	12 08       	add	r8,r9
8000d19e:	a3 78       	lsl	r8,0x3
8000d1a0:	f8 08 00 08 	add	r8,r12,r8
8000d1a4:	2e 08       	sub	r8,-32
8000d1a6:	f0 e8 00 00 	ld.d	r8,r8[0]
8000d1aa:	f0 16 00 03 	mcall	r6[12]
8000d1ae:	14 98       	mov	r8,r10
8000d1b0:	16 99       	mov	r9,r11
8000d1b2:	ee e9 ff f8 	st.d	r7[-8],r8

		P[axis][0][0] = P11;
8000d1b6:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000d1ba:	ec fa 00 18 	ld.w	r10,r6[24]
8000d1be:	12 98       	mov	r8,r9
8000d1c0:	a3 78       	lsl	r8,0x3
8000d1c2:	12 08       	add	r8,r9
8000d1c4:	a3 78       	lsl	r8,0x3
8000d1c6:	10 0a       	add	r10,r8
8000d1c8:	ee e8 ff e0 	ld.d	r8,r7[-32]
8000d1cc:	f4 e9 00 00 	st.d	r10[0],r8
		P[axis][0][1] = P12;
8000d1d0:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000d1d4:	ec fa 00 18 	ld.w	r10,r6[24]
8000d1d8:	12 98       	mov	r8,r9
8000d1da:	a3 78       	lsl	r8,0x3
8000d1dc:	12 08       	add	r8,r9
8000d1de:	f0 cb ff ff 	sub	r11,r8,-1
8000d1e2:	ee e8 ff e8 	ld.d	r8,r7[-24]
8000d1e6:	f4 0b 08 38 	st.d	r10[r11<<0x3],r8
		P[axis][1][0] = P21;
8000d1ea:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000d1ee:	ec fa 00 18 	ld.w	r10,r6[24]
8000d1f2:	12 98       	mov	r8,r9
8000d1f4:	a3 78       	lsl	r8,0x3
8000d1f6:	12 08       	add	r8,r9
8000d1f8:	a3 78       	lsl	r8,0x3
8000d1fa:	f4 08 00 08 	add	r8,r10,r8
8000d1fe:	f0 ca ff e8 	sub	r10,r8,-24
8000d202:	ee e8 ff f0 	ld.d	r8,r7[-16]
8000d206:	f4 e9 00 00 	st.d	r10[0],r8
		P[axis][1][1] = P22;
8000d20a:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000d20e:	ec fa 00 18 	ld.w	r10,r6[24]
8000d212:	12 98       	mov	r8,r9
8000d214:	a3 78       	lsl	r8,0x3
8000d216:	12 08       	add	r8,r9
8000d218:	a3 78       	lsl	r8,0x3
8000d21a:	f4 08 00 08 	add	r8,r10,r8
8000d21e:	f0 ca ff e0 	sub	r10,r8,-32
8000d222:	ee e8 ff f8 	ld.d	r8,r7[-8]
8000d226:	f4 e9 00 00 	st.d	r10[0],r8
		
		/*************************************************************************************/
		velxy = speed_meas - centralData->position_estimator.vel[axis];
8000d22a:	ec f8 00 00 	ld.w	r8,r6[0]
8000d22e:	70 08       	ld.w	r8,r8[0x0]
8000d230:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000d234:	f2 c9 fc a3 	sub	r9,r9,-861
8000d238:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8000d23c:	ee f9 ff b8 	ld.w	r9,r7[-72]
8000d240:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8000d244:	10 9c       	mov	r12,r8
8000d246:	f0 16 00 02 	mcall	r6[8]
8000d24a:	14 98       	mov	r8,r10
8000d24c:	16 99       	mov	r9,r11
8000d24e:	ee e9 ff c0 	st.d	r7[-64],r8
		
		S = P2[axis][1][1] + R2[axis];
8000d252:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000d256:	ec fa 00 1c 	ld.w	r10,r6[28]
8000d25a:	12 98       	mov	r8,r9
8000d25c:	a3 78       	lsl	r8,0x3
8000d25e:	12 08       	add	r8,r9
8000d260:	a3 78       	lsl	r8,0x3
8000d262:	f4 08 00 08 	add	r8,r10,r8
8000d266:	2e 08       	sub	r8,-32
8000d268:	f0 ea 00 00 	ld.d	r10,r8[0]
8000d26c:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000d270:	ec f8 01 4c 	ld.w	r8,r6[332]
8000d274:	f0 09 02 38 	ld.d	r8,r8[r9<<0x3]
8000d278:	f0 16 00 05 	mcall	r6[20]
8000d27c:	14 98       	mov	r8,r10
8000d27e:	16 99       	mov	r9,r11
8000d280:	ee e9 ff c8 	st.d	r7[-56],r8
		K1 = P2[axis][0][1] * 1/S;
8000d284:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000d288:	ec fa 00 1c 	ld.w	r10,r6[28]
8000d28c:	12 98       	mov	r8,r9
8000d28e:	a3 78       	lsl	r8,0x3
8000d290:	12 08       	add	r8,r9
8000d292:	2f f8       	sub	r8,-1
8000d294:	f4 08 02 3a 	ld.d	r10,r10[r8<<0x3]
8000d298:	ee e8 ff c8 	ld.d	r8,r7[-56]
8000d29c:	f0 16 00 0c 	mcall	r6[48]
8000d2a0:	14 98       	mov	r8,r10
8000d2a2:	16 99       	mov	r9,r11
8000d2a4:	ee e9 ff d0 	st.d	r7[-48],r8
		K2 = P2[axis][1][1] * 1/S;
8000d2a8:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000d2ac:	ec fa 00 1c 	ld.w	r10,r6[28]
8000d2b0:	12 98       	mov	r8,r9
8000d2b2:	a3 78       	lsl	r8,0x3
8000d2b4:	12 08       	add	r8,r9
8000d2b6:	a3 78       	lsl	r8,0x3
8000d2b8:	f4 08 00 08 	add	r8,r10,r8
8000d2bc:	2e 08       	sub	r8,-32
8000d2be:	f0 ea 00 00 	ld.d	r10,r8[0]
8000d2c2:	ee e8 ff c8 	ld.d	r8,r7[-56]
8000d2c6:	f0 16 00 0c 	mcall	r6[48]
8000d2ca:	14 98       	mov	r8,r10
8000d2cc:	16 99       	mov	r9,r11
8000d2ce:	ee e9 ff d8 	st.d	r7[-40],r8
		
		//centralData->position_estimator.localPosition.pos[axis] = centralData->position_estimator.localPosition.pos[axis] + K1 * velxy;
		//centralData->position_estimator.vel[axis] = centralData->position_estimator.vel[axis] + K2 * velxy;
		
		P11 = -K1 * P2[axis][1][0] + P2[axis][0][0];
8000d2d2:	ee f8 ff d0 	ld.w	r8,r7[-48]
8000d2d6:	10 99       	mov	r9,r8
8000d2d8:	ee 19 80 00 	eorh	r9,0x8000
8000d2dc:	ef 49 ff b0 	st.w	r7[-80],r9
8000d2e0:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000d2e4:	ef 48 ff b4 	st.w	r7[-76],r8
8000d2e8:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000d2ec:	ec fa 00 1c 	ld.w	r10,r6[28]
8000d2f0:	12 98       	mov	r8,r9
8000d2f2:	a3 78       	lsl	r8,0x3
8000d2f4:	12 08       	add	r8,r9
8000d2f6:	a3 78       	lsl	r8,0x3
8000d2f8:	f4 08 00 08 	add	r8,r10,r8
8000d2fc:	2e 88       	sub	r8,-24
8000d2fe:	f0 e8 00 00 	ld.d	r8,r8[0]
8000d302:	ee ea ff b0 	ld.d	r10,r7[-80]
8000d306:	f0 16 00 03 	mcall	r6[12]
8000d30a:	14 98       	mov	r8,r10
8000d30c:	16 99       	mov	r9,r11
8000d30e:	10 9a       	mov	r10,r8
8000d310:	12 9b       	mov	r11,r9
8000d312:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000d316:	ec fc 00 1c 	ld.w	r12,r6[28]
8000d31a:	12 98       	mov	r8,r9
8000d31c:	a3 78       	lsl	r8,0x3
8000d31e:	12 08       	add	r8,r9
8000d320:	a3 78       	lsl	r8,0x3
8000d322:	f8 08 00 08 	add	r8,r12,r8
8000d326:	f0 e8 00 00 	ld.d	r8,r8[0]
8000d32a:	f0 16 00 05 	mcall	r6[20]
8000d32e:	14 98       	mov	r8,r10
8000d330:	16 99       	mov	r9,r11
8000d332:	ee e9 ff e0 	st.d	r7[-32],r8
		P12 = -K1 * P2[axis][1][1] + P2[axis][0][1];
8000d336:	ee f8 ff d0 	ld.w	r8,r7[-48]
8000d33a:	10 91       	mov	r1,r8
8000d33c:	ee 11 80 00 	eorh	r1,0x8000
8000d340:	ee f0 ff d4 	ld.w	r0,r7[-44]
8000d344:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000d348:	ec fa 00 1c 	ld.w	r10,r6[28]
8000d34c:	12 98       	mov	r8,r9
8000d34e:	a3 78       	lsl	r8,0x3
8000d350:	12 08       	add	r8,r9
8000d352:	a3 78       	lsl	r8,0x3
8000d354:	f4 08 00 08 	add	r8,r10,r8
8000d358:	2e 08       	sub	r8,-32
8000d35a:	f0 e8 00 00 	ld.d	r8,r8[0]
8000d35e:	00 9a       	mov	r10,r0
8000d360:	02 9b       	mov	r11,r1
8000d362:	f0 16 00 03 	mcall	r6[12]
8000d366:	14 98       	mov	r8,r10
8000d368:	16 99       	mov	r9,r11
8000d36a:	10 9a       	mov	r10,r8
8000d36c:	12 9b       	mov	r11,r9
8000d36e:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000d372:	ec fc 00 1c 	ld.w	r12,r6[28]
8000d376:	12 98       	mov	r8,r9
8000d378:	a3 78       	lsl	r8,0x3
8000d37a:	12 08       	add	r8,r9
8000d37c:	2f f8       	sub	r8,-1
8000d37e:	f8 08 02 38 	ld.d	r8,r12[r8<<0x3]
8000d382:	f0 16 00 05 	mcall	r6[20]
8000d386:	14 98       	mov	r8,r10
8000d388:	16 99       	mov	r9,r11
8000d38a:	ee e9 ff e8 	st.d	r7[-24],r8
		P21 = (1.0 - K2) * P2[axis][1][0];
8000d38e:	ee e8 ff d8 	ld.d	r8,r7[-40]
8000d392:	30 0a       	mov	r10,0
8000d394:	fc 1b 3f f0 	movh	r11,0x3ff0
8000d398:	f0 16 00 11 	mcall	r6[68]
8000d39c:	14 98       	mov	r8,r10
8000d39e:	16 99       	mov	r9,r11
8000d3a0:	10 9a       	mov	r10,r8
8000d3a2:	12 9b       	mov	r11,r9
8000d3a4:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000d3a8:	ec fc 00 1c 	ld.w	r12,r6[28]
8000d3ac:	12 98       	mov	r8,r9
8000d3ae:	a3 78       	lsl	r8,0x3
8000d3b0:	12 08       	add	r8,r9
8000d3b2:	a3 78       	lsl	r8,0x3
8000d3b4:	f8 08 00 08 	add	r8,r12,r8
8000d3b8:	2e 88       	sub	r8,-24
8000d3ba:	f0 e8 00 00 	ld.d	r8,r8[0]
8000d3be:	f0 16 00 03 	mcall	r6[12]
8000d3c2:	14 98       	mov	r8,r10
8000d3c4:	16 99       	mov	r9,r11
8000d3c6:	ee e9 ff f0 	st.d	r7[-16],r8
		P22 = (1.0 - K2) * P2[axis][1][1];
8000d3ca:	ee e8 ff d8 	ld.d	r8,r7[-40]
8000d3ce:	30 0a       	mov	r10,0
8000d3d0:	fc 1b 3f f0 	movh	r11,0x3ff0
8000d3d4:	f0 16 00 11 	mcall	r6[68]
8000d3d8:	14 98       	mov	r8,r10
8000d3da:	16 99       	mov	r9,r11
8000d3dc:	10 9a       	mov	r10,r8
8000d3de:	12 9b       	mov	r11,r9
8000d3e0:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000d3e4:	ec fc 00 1c 	ld.w	r12,r6[28]
8000d3e8:	12 98       	mov	r8,r9
8000d3ea:	a3 78       	lsl	r8,0x3
8000d3ec:	12 08       	add	r8,r9
8000d3ee:	a3 78       	lsl	r8,0x3
8000d3f0:	f8 08 00 08 	add	r8,r12,r8
8000d3f4:	2e 08       	sub	r8,-32
8000d3f6:	f0 e8 00 00 	ld.d	r8,r8[0]
8000d3fa:	f0 16 00 03 	mcall	r6[12]
8000d3fe:	14 98       	mov	r8,r10
8000d400:	16 99       	mov	r9,r11
8000d402:	ee e9 ff f8 	st.d	r7[-8],r8

		P2[axis][0][0] = P11;
8000d406:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000d40a:	ec fa 00 1c 	ld.w	r10,r6[28]
8000d40e:	12 98       	mov	r8,r9
8000d410:	a3 78       	lsl	r8,0x3
8000d412:	12 08       	add	r8,r9
8000d414:	a3 78       	lsl	r8,0x3
8000d416:	10 0a       	add	r10,r8
8000d418:	ee e8 ff e0 	ld.d	r8,r7[-32]
8000d41c:	f4 e9 00 00 	st.d	r10[0],r8
		P2[axis][0][1] = P12;
8000d420:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000d424:	ec fa 00 1c 	ld.w	r10,r6[28]
8000d428:	12 98       	mov	r8,r9
8000d42a:	a3 78       	lsl	r8,0x3
8000d42c:	12 08       	add	r8,r9
8000d42e:	f0 cb ff ff 	sub	r11,r8,-1
8000d432:	ee e8 ff e8 	ld.d	r8,r7[-24]
8000d436:	f4 0b 08 38 	st.d	r10[r11<<0x3],r8
		P2[axis][1][0] = P21;
8000d43a:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000d43e:	ec fa 00 1c 	ld.w	r10,r6[28]
8000d442:	12 98       	mov	r8,r9
8000d444:	a3 78       	lsl	r8,0x3
8000d446:	12 08       	add	r8,r9
8000d448:	a3 78       	lsl	r8,0x3
8000d44a:	f4 08 00 08 	add	r8,r10,r8
8000d44e:	f0 ca ff e8 	sub	r10,r8,-24
8000d452:	ee e8 ff f0 	ld.d	r8,r7[-16]
8000d456:	f4 e9 00 00 	st.d	r10[0],r8
		P2[axis][1][1] = P22;
8000d45a:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000d45e:	ec fa 00 1c 	ld.w	r10,r6[28]
8000d462:	12 98       	mov	r8,r9
8000d464:	a3 78       	lsl	r8,0x3
8000d466:	12 08       	add	r8,r9
8000d468:	a3 78       	lsl	r8,0x3
8000d46a:	f4 08 00 08 	add	r8,r10,r8
8000d46e:	f0 ca ff e0 	sub	r10,r8,-32
8000d472:	ee e8 ff f8 	ld.d	r8,r7[-8]
8000d476:	f4 e9 00 00 	st.d	r10[0],r8
}
8000d47a:	2e 6d       	sub	sp,-104
8000d47c:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
8000d480:	80 00       	ld.sh	r0,r0[0x0]
8000d482:	cd 80       	breq	8000d432 <e_kalman_update_speed_hf+0x542>

8000d484 <estimator_loop>:

//--------------------------------GLOBAL--------------------------
void estimator_loop()
{
8000d484:	eb cd 40 e0 	pushm	r5-r7,lr
8000d488:	1a 97       	mov	r7,sp
8000d48a:	21 dd       	sub	sp,116
8000d48c:	fe f6 02 00 	ld.w	r6,pc[512]
8000d490:	1e 26       	rsub	r6,pc
	
	global_position_t global_gps_position;
	local_coordinates_t local_coordinates;
	//static uint32_t dt_baro,time_before_baro;
	
	if (!centralData->position_estimator.init_gps_position)
8000d492:	ec f8 00 00 	ld.w	r8,r6[0]
8000d496:	70 08       	ld.w	r8,r8[0x0]
8000d498:	f1 38 0d 64 	ld.ub	r8,r8[3428]
8000d49c:	ec 18 00 01 	eorl	r8,0x1
8000d4a0:	5c 58       	castu.b	r8
8000d4a2:	c0 30       	breq	8000d4a8 <estimator_loop+0x24>
	{
		init_pos_gps_estimator();
8000d4a4:	f0 16 01 0b 	mcall	r6[1068]
	}

	if(!filter_init_delta_t)
8000d4a8:	ec f8 02 b0 	ld.w	r8,r6[688]
8000d4ac:	11 88       	ld.ub	r8,r8[0x0]
8000d4ae:	ec 18 00 01 	eorl	r8,0x1
8000d4b2:	5c 58       	castu.b	r8
8000d4b4:	c0 c0       	breq	8000d4cc <estimator_loop+0x48>
	{
		filter_init_delta_t = true;
8000d4b6:	ec f9 02 b0 	ld.w	r9,r6[688]
8000d4ba:	30 18       	mov	r8,1
8000d4bc:	b2 88       	st.b	r9[0x0],r8
		prev_time = get_micros();
8000d4be:	f0 16 00 27 	mcall	r6[156]
8000d4c2:	18 99       	mov	r9,r12
8000d4c4:	ec f8 02 ac 	ld.w	r8,r6[684]
8000d4c8:	91 09       	st.w	r8[0x0],r9
8000d4ca:	cd e8       	rjmp	8000d686 <estimator_loop+0x202>
	}else{
		actual_time = get_micros();
8000d4cc:	f0 16 00 27 	mcall	r6[156]
8000d4d0:	18 98       	mov	r8,r12
8000d4d2:	ef 48 ff fc 	st.w	r7[-4],r8
		centralData->estimation.delta_t_filter = (float)(actual_time-prev_time);
8000d4d6:	ec f8 00 00 	ld.w	r8,r6[0]
8000d4da:	70 08       	ld.w	r8,r8[0x0]
8000d4dc:	ec f9 02 ac 	ld.w	r9,r6[684]
8000d4e0:	72 09       	ld.w	r9,r9[0x0]
8000d4e2:	ee fa ff fc 	ld.w	r10,r7[-4]
8000d4e6:	f4 09 01 09 	sub	r9,r10,r9
8000d4ea:	e5 a4 09 09 	cop	cp0,cr9,cr0,cr9,0x48
8000d4ee:	f1 49 0b a4 	st.w	r8[2980],r9
		prev_time = actual_time;
8000d4f2:	ec f8 02 ac 	ld.w	r8,r6[684]
8000d4f6:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000d4fa:	91 09       	st.w	r8[0x0],r9
		centralData->estimation.delta_t_filter /= 1000000.0;
8000d4fc:	ec f8 00 00 	ld.w	r8,r6[0]
8000d500:	70 05       	ld.w	r5,r8[0x0]
8000d502:	ec f8 00 00 	ld.w	r8,r6[0]
8000d506:	70 08       	ld.w	r8,r8[0x0]
8000d508:	f0 f8 0b a4 	ld.w	r8,r8[2980]
8000d50c:	e0 6b 24 00 	mov	r11,9216
8000d510:	ea 1b 49 74 	orh	r11,0x4974
8000d514:	10 9c       	mov	r12,r8
8000d516:	f0 16 00 08 	mcall	r6[32]
8000d51a:	18 98       	mov	r8,r12
8000d51c:	eb 48 0b a4 	st.w	r5[2980],r8
		
		e_predict(&(centralData->imu1.attitude.qe),centralData->imu1.attitude.acc_bf,centralData->estimation.delta_t_filter);
8000d520:	ec f8 00 00 	ld.w	r8,r6[0]
8000d524:	70 08       	ld.w	r8,r8[0x0]
8000d526:	f0 fa 0b a4 	ld.w	r10,r8[2980]
8000d52a:	ec f8 00 00 	ld.w	r8,r6[0]
8000d52e:	70 08       	ld.w	r8,r8[0x0]
8000d530:	f0 c9 ff 40 	sub	r9,r8,-192
8000d534:	ec f8 00 00 	ld.w	r8,r6[0]
8000d538:	70 08       	ld.w	r8,r8[0x0]
8000d53a:	12 9b       	mov	r11,r9
8000d53c:	10 9c       	mov	r12,r8
8000d53e:	f0 16 01 d6 	mcall	r6[1880]
		
		//Check new values from GPS/Baro, if yes, update
		if (newValidGpsMsg(&timeLastGpsMsgEstimator) && centralData->position_estimator.init_gps_position && (centralData->simulation_mode == 0))
8000d542:	ec fc 02 6c 	ld.w	r12,r6[620]
8000d546:	f0 16 00 8b 	mcall	r6[556]
8000d54a:	18 98       	mov	r8,r12
8000d54c:	58 08       	cp.w	r8,0
8000d54e:	e0 80 00 9c 	breq	8000d686 <estimator_loop+0x202>
8000d552:	ec f8 00 00 	ld.w	r8,r6[0]
8000d556:	70 08       	ld.w	r8,r8[0x0]
8000d558:	f1 38 0d 64 	ld.ub	r8,r8[3428]
8000d55c:	58 08       	cp.w	r8,0
8000d55e:	e0 80 00 94 	breq	8000d686 <estimator_loop+0x202>
8000d562:	ec f8 00 00 	ld.w	r8,r6[0]
8000d566:	70 08       	ld.w	r8,r8[0x0]
8000d568:	f0 f8 10 c0 	ld.w	r8,r8[4288]
8000d56c:	58 08       	cp.w	r8,0
8000d56e:	e0 81 00 8c 	brne	8000d686 <estimator_loop+0x202>
			//latitude_rad= ((double) (centralData->GPS_data.latitude-init_lat))*DEGREE_TO_RADIAN; //in rad E+7
			//pos_y= (float) (((double) (centralData->GPS_data.longitude-init_long)*EARTH_RADIUS)*DEGREE_TO_RADIAN*(COS_PI_4-COS_PI_4*(centralData->GPS_data.latitude*DEGREE_TO_RADIAN*0.0000001-PI_4)-COS_PI_4*0.5*(centralData->GPS_data.latitude*DEGREE_TO_RADIAN*0.0000001-PI_4)*(centralData->GPS_data.latitude*DEGREE_TO_RADIAN*0.0000001-PI_4)));//Taylor 2nd order cos() approx
			//pos_x= (float) (latitude_rad*EARTH_RADIUS);
			//pos_z= -centralData->GPS_data.altitude+init_alt;
			
			global_gps_position.longitude = centralData->GPS_data.longitude;
8000d572:	ec f8 00 00 	ld.w	r8,r6[0]
8000d576:	70 08       	ld.w	r8,r8[0x0]
8000d578:	f0 e8 0b 10 	ld.d	r8,r8[2832]
8000d57c:	ee e9 ff bc 	st.d	r7[-68],r8
			global_gps_position.latitude = centralData->GPS_data.latitude;
8000d580:	ec f8 00 00 	ld.w	r8,r6[0]
8000d584:	70 08       	ld.w	r8,r8[0x0]
8000d586:	f0 e8 0b 08 	ld.d	r8,r8[2824]
8000d58a:	ee e9 ff c4 	st.d	r7[-60],r8
			global_gps_position.altitude = centralData->GPS_data.altitude;
8000d58e:	ec f8 00 00 	ld.w	r8,r6[0]
8000d592:	70 08       	ld.w	r8,r8[0x0]
8000d594:	f0 f8 0b 18 	ld.w	r8,r8[2840]
8000d598:	ef 48 ff cc 	st.w	r7[-52],r8
			
			local_coordinates = global_to_local_position(global_gps_position,centralData->position_estimator.localPosition.origin);
8000d59c:	ec f8 00 00 	ld.w	r8,r6[0]
8000d5a0:	70 08       	ld.w	r8,r8[0x0]
8000d5a2:	ee cc 00 74 	sub	r12,r7,116
8000d5a6:	20 7d       	sub	sp,28
8000d5a8:	1a 99       	mov	r9,sp
8000d5aa:	12 9a       	mov	r10,r9
8000d5ac:	f0 cb f2 54 	sub	r11,r8,-3500
8000d5b0:	f4 c8 00 00 	sub	r8,r10,0
8000d5b4:	f6 c9 00 00 	sub	r9,r11,0
8000d5b8:	72 0e       	ld.w	lr,r9[0x0]
8000d5ba:	91 0e       	st.w	r8[0x0],lr
8000d5bc:	72 1e       	ld.w	lr,r9[0x4]
8000d5be:	91 1e       	st.w	r8[0x4],lr
8000d5c0:	72 2e       	ld.w	lr,r9[0x8]
8000d5c2:	91 2e       	st.w	r8[0x8],lr
8000d5c4:	72 39       	ld.w	r9,r9[0xc]
8000d5c6:	91 39       	st.w	r8[0xc],r9
8000d5c8:	f6 e8 00 10 	ld.d	r8,r11[16]
8000d5cc:	f4 e9 00 10 	st.d	r10[16],r8
8000d5d0:	76 68       	ld.w	r8,r11[0x18]
8000d5d2:	95 68       	st.w	r10[0x18],r8
8000d5d4:	20 7d       	sub	sp,28
8000d5d6:	1a 98       	mov	r8,sp
8000d5d8:	10 9a       	mov	r10,r8
8000d5da:	ee cb 00 44 	sub	r11,r7,68
8000d5de:	f4 c8 00 00 	sub	r8,r10,0
8000d5e2:	f6 c9 00 00 	sub	r9,r11,0
8000d5e6:	72 0e       	ld.w	lr,r9[0x0]
8000d5e8:	91 0e       	st.w	r8[0x0],lr
8000d5ea:	72 1e       	ld.w	lr,r9[0x4]
8000d5ec:	91 1e       	st.w	r8[0x4],lr
8000d5ee:	72 2e       	ld.w	lr,r9[0x8]
8000d5f0:	91 2e       	st.w	r8[0x8],lr
8000d5f2:	72 39       	ld.w	r9,r9[0xc]
8000d5f4:	91 39       	st.w	r8[0xc],r9
8000d5f6:	f6 e8 00 10 	ld.d	r8,r11[16]
8000d5fa:	f4 e9 00 10 	st.d	r10[16],r8
8000d5fe:	76 68       	ld.w	r8,r11[0x18]
8000d600:	95 68       	st.w	r10[0x18],r8
8000d602:	f0 16 00 73 	mcall	r6[460]
8000d606:	2f 2d       	sub	sp,-56
			
			//get delay of GPS measure
			//do prediction up to the corresponding delay
			
			e_kalman_update_position(X,local_coordinates.pos[X]);
8000d608:	ee f8 ff 8c 	ld.w	r8,r7[-116]
8000d60c:	10 9c       	mov	r12,r8
8000d60e:	f0 16 00 02 	mcall	r6[8]
8000d612:	14 98       	mov	r8,r10
8000d614:	16 99       	mov	r9,r11
8000d616:	10 9a       	mov	r10,r8
8000d618:	12 9b       	mov	r11,r9
8000d61a:	30 0c       	mov	r12,0
8000d61c:	f0 16 00 c2 	mcall	r6[776]
			e_kalman_update_position(Y,local_coordinates.pos[Y]);
8000d620:	ee f8 ff 90 	ld.w	r8,r7[-112]
8000d624:	10 9c       	mov	r12,r8
8000d626:	f0 16 00 02 	mcall	r6[8]
8000d62a:	14 98       	mov	r8,r10
8000d62c:	16 99       	mov	r9,r11
8000d62e:	10 9a       	mov	r10,r8
8000d630:	12 9b       	mov	r11,r9
8000d632:	30 1c       	mov	r12,1
8000d634:	f0 16 00 c2 	mcall	r6[776]
			//e_kalman_update_position_hf(X,local_coordinates.pos[X]);
			//e_kalman_update_position_hf(Y,local_coordinates.pos[Y]);
			e_kalman_update_position(Z,local_coordinates.pos[Z]);
8000d638:	ee f8 ff 94 	ld.w	r8,r7[-108]
8000d63c:	10 9c       	mov	r12,r8
8000d63e:	f0 16 00 02 	mcall	r6[8]
8000d642:	14 98       	mov	r8,r10
8000d644:	16 99       	mov	r9,r11
8000d646:	10 9a       	mov	r10,r8
8000d648:	12 9b       	mov	r11,r9
8000d64a:	30 2c       	mov	r12,2
8000d64c:	f0 16 00 c2 	mcall	r6[776]
			
			e_kalman_update_speed(X,centralData->GPS_data.northSpeed);
8000d650:	ec f8 00 00 	ld.w	r8,r6[0]
8000d654:	70 08       	ld.w	r8,r8[0x0]
8000d656:	f0 f8 0b 28 	ld.w	r8,r8[2856]
8000d65a:	10 9b       	mov	r11,r8
8000d65c:	30 0c       	mov	r12,0
8000d65e:	f0 16 00 9f 	mcall	r6[636]
			e_kalman_update_speed(Y,centralData->GPS_data.eastSpeed);
8000d662:	ec f8 00 00 	ld.w	r8,r6[0]
8000d666:	70 08       	ld.w	r8,r8[0x0]
8000d668:	f0 f8 0b 2c 	ld.w	r8,r8[2860]
8000d66c:	10 9b       	mov	r11,r8
8000d66e:	30 1c       	mov	r12,1
8000d670:	f0 16 00 9f 	mcall	r6[636]
			//e_kalman_update_speed_hf(X,centralData->GPS_data.northSpeed);
			//e_kalman_update_speed_hf(Y,centralData->GPS_data.eastSpeed);
			e_kalman_update_speed(Z,centralData->GPS_data.verticalSpeed);
8000d674:	ec f8 00 00 	ld.w	r8,r6[0]
8000d678:	70 08       	ld.w	r8,r8[0x0]
8000d67a:	f0 f8 0b 30 	ld.w	r8,r8[2864]
8000d67e:	10 9b       	mov	r11,r8
8000d680:	30 2c       	mov	r12,2
8000d682:	f0 16 00 9f 	mcall	r6[636]
		e_kalman_update_position(Z,baro->altitude,dt_baro);
		time_before_baro=get_millis();
		}	*/
		//}
	}
8000d686:	2e 3d       	sub	sp,-116
8000d688:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000d68c:	80 00       	ld.sh	r0,r0[0x0]
8000d68e:	d3 14       	*unknown*

8000d690 <byte_swap_2>:
	return msg->len + MAVLINK_NUM_NON_PAYLOAD_BYTES;
}

#if MAVLINK_NEED_BYTE_SWAP
static inline void byte_swap_2(char *dst, const char *src)
{
8000d690:	eb cd 40 80 	pushm	r7,lr
8000d694:	1a 97       	mov	r7,sp
8000d696:	20 2d       	sub	sp,8
8000d698:	ef 4c ff fc 	st.w	r7[-4],r12
8000d69c:	ef 4b ff f8 	st.w	r7[-8],r11
	dst[0] = src[1];
8000d6a0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d6a4:	2f f8       	sub	r8,-1
8000d6a6:	11 88       	ld.ub	r8,r8[0x0]
8000d6a8:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000d6ac:	b2 88       	st.b	r9[0x0],r8
	dst[1] = src[0];
8000d6ae:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d6b2:	f0 c9 ff ff 	sub	r9,r8,-1
8000d6b6:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d6ba:	11 88       	ld.ub	r8,r8[0x0]
8000d6bc:	b2 88       	st.b	r9[0x0],r8
}
8000d6be:	2f ed       	sub	sp,-8
8000d6c0:	e3 cd 80 80 	ldm	sp++,r7,pc

8000d6c4 <byte_swap_4>:
static inline void byte_swap_4(char *dst, const char *src)
{
8000d6c4:	eb cd 40 80 	pushm	r7,lr
8000d6c8:	1a 97       	mov	r7,sp
8000d6ca:	20 2d       	sub	sp,8
8000d6cc:	ef 4c ff fc 	st.w	r7[-4],r12
8000d6d0:	ef 4b ff f8 	st.w	r7[-8],r11
	dst[0] = src[3];
8000d6d4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d6d8:	2f d8       	sub	r8,-3
8000d6da:	11 88       	ld.ub	r8,r8[0x0]
8000d6dc:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000d6e0:	b2 88       	st.b	r9[0x0],r8
	dst[1] = src[2];
8000d6e2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d6e6:	f0 c9 ff ff 	sub	r9,r8,-1
8000d6ea:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d6ee:	2f e8       	sub	r8,-2
8000d6f0:	11 88       	ld.ub	r8,r8[0x0]
8000d6f2:	b2 88       	st.b	r9[0x0],r8
	dst[2] = src[1];
8000d6f4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d6f8:	f0 c9 ff fe 	sub	r9,r8,-2
8000d6fc:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d700:	2f f8       	sub	r8,-1
8000d702:	11 88       	ld.ub	r8,r8[0x0]
8000d704:	b2 88       	st.b	r9[0x0],r8
	dst[3] = src[0];
8000d706:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d70a:	f0 c9 ff fd 	sub	r9,r8,-3
8000d70e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d712:	11 88       	ld.ub	r8,r8[0x0]
8000d714:	b2 88       	st.b	r9[0x0],r8
}
8000d716:	2f ed       	sub	sp,-8
8000d718:	e3 cd 80 80 	ldm	sp++,r7,pc

8000d71c <mav_array_memcpy>:

/*
  like memcpy(), but if src is NULL, do a memset to zero
*/
static void mav_array_memcpy(void *dest, const void *src, size_t n)
{
8000d71c:	eb cd 40 c0 	pushm	r6-r7,lr
8000d720:	1a 97       	mov	r7,sp
8000d722:	20 3d       	sub	sp,12
8000d724:	49 06       	lddpc	r6,8000d764 <mav_array_memcpy+0x48>
8000d726:	1e 26       	rsub	r6,pc
8000d728:	ef 4c ff fc 	st.w	r7[-4],r12
8000d72c:	ef 4b ff f8 	st.w	r7[-8],r11
8000d730:	ef 4a ff f4 	st.w	r7[-12],r10
	if (src == NULL) {
8000d734:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d738:	58 08       	cp.w	r8,0
8000d73a:	c0 91       	brne	8000d74c <mav_array_memcpy+0x30>
		memset(dest, 0, n);
8000d73c:	ee fa ff f4 	ld.w	r10,r7[-12]
8000d740:	30 0b       	mov	r11,0
8000d742:	ee fc ff fc 	ld.w	r12,r7[-4]
8000d746:	f0 16 00 2f 	mcall	r6[188]
8000d74a:	c0 98       	rjmp	8000d75c <mav_array_memcpy+0x40>
	} else {
		memcpy(dest, src, n);
8000d74c:	ee fa ff f4 	ld.w	r10,r7[-12]
8000d750:	ee fb ff f8 	ld.w	r11,r7[-8]
8000d754:	ee fc ff fc 	ld.w	r12,r7[-4]
8000d758:	f0 16 00 20 	mcall	r6[128]
	}
}
8000d75c:	2f dd       	sub	sp,-12
8000d75e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000d762:	00 00       	add	r0,r0
8000d764:	80 00       	ld.sh	r0,r0[0x0]
8000d766:	d5 aa       	popm	r4-r7,r10-r11,lr

8000d768 <_MAV_RETURN_uint16_t>:
#if MAVLINK_NEED_BYTE_SWAP
#define _MAV_MSG_RETURN_TYPE(TYPE, SIZE) \
static inline TYPE _MAV_RETURN_## TYPE(const mavlink_message_t *msg, uint8_t ofs) \
{ TYPE r; byte_swap_## SIZE((char*)&r, &_MAV_PAYLOAD(msg)[ofs]); return r; }

_MAV_MSG_RETURN_TYPE(uint16_t, 2)
8000d768:	eb cd 40 c0 	pushm	r6-r7,lr
8000d76c:	1a 97       	mov	r7,sp
8000d76e:	20 3d       	sub	sp,12
8000d770:	48 d6       	lddpc	r6,8000d7a4 <_MAV_RETURN_uint16_t+0x3c>
8000d772:	1e 26       	rsub	r6,pc
8000d774:	ef 4c ff f8 	st.w	r7[-8],r12
8000d778:	16 98       	mov	r8,r11
8000d77a:	ef 68 ff f4 	st.b	r7[-12],r8
8000d77e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d782:	2f 88       	sub	r8,-8
8000d784:	10 99       	mov	r9,r8
8000d786:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000d78a:	10 09       	add	r9,r8
8000d78c:	ee c8 00 02 	sub	r8,r7,2
8000d790:	12 9b       	mov	r11,r9
8000d792:	10 9c       	mov	r12,r8
8000d794:	c7 ef       	rcall	8000d690 <byte_swap_2>
8000d796:	ef 08 ff fe 	ld.sh	r8,r7[-2]
8000d79a:	10 9c       	mov	r12,r8
8000d79c:	2f dd       	sub	sp,-12
8000d79e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000d7a2:	00 00       	add	r0,r0
8000d7a4:	80 00       	ld.sh	r0,r0[0x0]
8000d7a6:	d5 f6       	*unknown*

8000d7a8 <_MAV_RETURN_int16_t>:
_MAV_MSG_RETURN_TYPE(int16_t,  2)
8000d7a8:	eb cd 40 c0 	pushm	r6-r7,lr
8000d7ac:	1a 97       	mov	r7,sp
8000d7ae:	20 3d       	sub	sp,12
8000d7b0:	48 d6       	lddpc	r6,8000d7e4 <_MAV_RETURN_int16_t+0x3c>
8000d7b2:	1e 26       	rsub	r6,pc
8000d7b4:	ef 4c ff f8 	st.w	r7[-8],r12
8000d7b8:	16 98       	mov	r8,r11
8000d7ba:	ef 68 ff f4 	st.b	r7[-12],r8
8000d7be:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d7c2:	2f 88       	sub	r8,-8
8000d7c4:	10 99       	mov	r9,r8
8000d7c6:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000d7ca:	10 09       	add	r9,r8
8000d7cc:	ee c8 00 02 	sub	r8,r7,2
8000d7d0:	12 9b       	mov	r11,r9
8000d7d2:	10 9c       	mov	r12,r8
8000d7d4:	c5 ef       	rcall	8000d690 <byte_swap_2>
8000d7d6:	ef 08 ff fe 	ld.sh	r8,r7[-2]
8000d7da:	10 9c       	mov	r12,r8
8000d7dc:	2f dd       	sub	sp,-12
8000d7de:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000d7e2:	00 00       	add	r0,r0
8000d7e4:	80 00       	ld.sh	r0,r0[0x0]
8000d7e6:	d6 36       	*unknown*

8000d7e8 <_MAV_RETURN_uint32_t>:
_MAV_MSG_RETURN_TYPE(uint32_t, 4)
8000d7e8:	eb cd 40 c0 	pushm	r6-r7,lr
8000d7ec:	1a 97       	mov	r7,sp
8000d7ee:	20 3d       	sub	sp,12
8000d7f0:	48 d6       	lddpc	r6,8000d824 <_MAV_RETURN_uint32_t+0x3c>
8000d7f2:	1e 26       	rsub	r6,pc
8000d7f4:	ef 4c ff f8 	st.w	r7[-8],r12
8000d7f8:	16 98       	mov	r8,r11
8000d7fa:	ef 68 ff f4 	st.b	r7[-12],r8
8000d7fe:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d802:	2f 88       	sub	r8,-8
8000d804:	10 99       	mov	r9,r8
8000d806:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000d80a:	10 09       	add	r9,r8
8000d80c:	ee c8 00 04 	sub	r8,r7,4
8000d810:	12 9b       	mov	r11,r9
8000d812:	10 9c       	mov	r12,r8
8000d814:	c5 8f       	rcall	8000d6c4 <byte_swap_4>
8000d816:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d81a:	10 9c       	mov	r12,r8
8000d81c:	2f dd       	sub	sp,-12
8000d81e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000d822:	00 00       	add	r0,r0
8000d824:	80 00       	ld.sh	r0,r0[0x0]
8000d826:	d6 76       	*unknown*

8000d828 <_MAV_RETURN_int32_t>:
_MAV_MSG_RETURN_TYPE(int32_t,  4)
8000d828:	eb cd 40 c0 	pushm	r6-r7,lr
8000d82c:	1a 97       	mov	r7,sp
8000d82e:	20 3d       	sub	sp,12
8000d830:	48 d6       	lddpc	r6,8000d864 <_MAV_RETURN_int32_t+0x3c>
8000d832:	1e 26       	rsub	r6,pc
8000d834:	ef 4c ff f8 	st.w	r7[-8],r12
8000d838:	16 98       	mov	r8,r11
8000d83a:	ef 68 ff f4 	st.b	r7[-12],r8
8000d83e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d842:	2f 88       	sub	r8,-8
8000d844:	10 99       	mov	r9,r8
8000d846:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000d84a:	10 09       	add	r9,r8
8000d84c:	ee c8 00 04 	sub	r8,r7,4
8000d850:	12 9b       	mov	r11,r9
8000d852:	10 9c       	mov	r12,r8
8000d854:	c3 8f       	rcall	8000d6c4 <byte_swap_4>
8000d856:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d85a:	10 9c       	mov	r12,r8
8000d85c:	2f dd       	sub	sp,-12
8000d85e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000d862:	00 00       	add	r0,r0
8000d864:	80 00       	ld.sh	r0,r0[0x0]
8000d866:	d6 b6       	*unknown*

8000d868 <mavlink_msg_global_position_int_get_time_boot_ms>:
 * @brief Get field time_boot_ms from global_position_int message
 *
 * @return Timestamp (milliseconds since system boot)
 */
static inline uint32_t mavlink_msg_global_position_int_get_time_boot_ms(const mavlink_message_t* msg)
{
8000d868:	eb cd 40 c0 	pushm	r6-r7,lr
8000d86c:	1a 97       	mov	r7,sp
8000d86e:	20 1d       	sub	sp,4
8000d870:	48 76       	lddpc	r6,8000d88c <mavlink_msg_global_position_int_get_time_boot_ms+0x24>
8000d872:	1e 26       	rsub	r6,pc
8000d874:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint32_t(msg,  0);
8000d878:	30 0b       	mov	r11,0
8000d87a:	ee fc ff fc 	ld.w	r12,r7[-4]
8000d87e:	cb 5f       	rcall	8000d7e8 <_MAV_RETURN_uint32_t>
8000d880:	18 98       	mov	r8,r12
}
8000d882:	10 9c       	mov	r12,r8
8000d884:	2f fd       	sub	sp,-4
8000d886:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000d88a:	00 00       	add	r0,r0
8000d88c:	80 00       	ld.sh	r0,r0[0x0]
8000d88e:	d6 f6       	*unknown*

8000d890 <mavlink_msg_global_position_int_get_lat>:
 * @brief Get field lat from global_position_int message
 *
 * @return Latitude, expressed as * 1E7
 */
static inline int32_t mavlink_msg_global_position_int_get_lat(const mavlink_message_t* msg)
{
8000d890:	eb cd 40 c0 	pushm	r6-r7,lr
8000d894:	1a 97       	mov	r7,sp
8000d896:	20 1d       	sub	sp,4
8000d898:	48 76       	lddpc	r6,8000d8b4 <mavlink_msg_global_position_int_get_lat+0x24>
8000d89a:	1e 26       	rsub	r6,pc
8000d89c:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_int32_t(msg,  4);
8000d8a0:	30 4b       	mov	r11,4
8000d8a2:	ee fc ff fc 	ld.w	r12,r7[-4]
8000d8a6:	cc 1f       	rcall	8000d828 <_MAV_RETURN_int32_t>
8000d8a8:	18 98       	mov	r8,r12
}
8000d8aa:	10 9c       	mov	r12,r8
8000d8ac:	2f fd       	sub	sp,-4
8000d8ae:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000d8b2:	00 00       	add	r0,r0
8000d8b4:	80 00       	ld.sh	r0,r0[0x0]
8000d8b6:	d7 1e       	*unknown*

8000d8b8 <mavlink_msg_global_position_int_get_lon>:
 * @brief Get field lon from global_position_int message
 *
 * @return Longitude, expressed as * 1E7
 */
static inline int32_t mavlink_msg_global_position_int_get_lon(const mavlink_message_t* msg)
{
8000d8b8:	eb cd 40 c0 	pushm	r6-r7,lr
8000d8bc:	1a 97       	mov	r7,sp
8000d8be:	20 1d       	sub	sp,4
8000d8c0:	48 76       	lddpc	r6,8000d8dc <mavlink_msg_global_position_int_get_lon+0x24>
8000d8c2:	1e 26       	rsub	r6,pc
8000d8c4:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_int32_t(msg,  8);
8000d8c8:	30 8b       	mov	r11,8
8000d8ca:	ee fc ff fc 	ld.w	r12,r7[-4]
8000d8ce:	ca df       	rcall	8000d828 <_MAV_RETURN_int32_t>
8000d8d0:	18 98       	mov	r8,r12
}
8000d8d2:	10 9c       	mov	r12,r8
8000d8d4:	2f fd       	sub	sp,-4
8000d8d6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000d8da:	00 00       	add	r0,r0
8000d8dc:	80 00       	ld.sh	r0,r0[0x0]
8000d8de:	d7 46       	*unknown*

8000d8e0 <mavlink_msg_global_position_int_get_alt>:
 * @brief Get field alt from global_position_int message
 *
 * @return Altitude in meters, expressed as * 1000 (millimeters), above MSL
 */
static inline int32_t mavlink_msg_global_position_int_get_alt(const mavlink_message_t* msg)
{
8000d8e0:	eb cd 40 c0 	pushm	r6-r7,lr
8000d8e4:	1a 97       	mov	r7,sp
8000d8e6:	20 1d       	sub	sp,4
8000d8e8:	48 76       	lddpc	r6,8000d904 <mavlink_msg_global_position_int_get_alt+0x24>
8000d8ea:	1e 26       	rsub	r6,pc
8000d8ec:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_int32_t(msg,  12);
8000d8f0:	30 cb       	mov	r11,12
8000d8f2:	ee fc ff fc 	ld.w	r12,r7[-4]
8000d8f6:	c9 9f       	rcall	8000d828 <_MAV_RETURN_int32_t>
8000d8f8:	18 98       	mov	r8,r12
}
8000d8fa:	10 9c       	mov	r12,r8
8000d8fc:	2f fd       	sub	sp,-4
8000d8fe:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000d902:	00 00       	add	r0,r0
8000d904:	80 00       	ld.sh	r0,r0[0x0]
8000d906:	d7 6e       	*unknown*

8000d908 <mavlink_msg_global_position_int_get_relative_alt>:
 * @brief Get field relative_alt from global_position_int message
 *
 * @return Altitude above ground in meters, expressed as * 1000 (millimeters)
 */
static inline int32_t mavlink_msg_global_position_int_get_relative_alt(const mavlink_message_t* msg)
{
8000d908:	eb cd 40 c0 	pushm	r6-r7,lr
8000d90c:	1a 97       	mov	r7,sp
8000d90e:	20 1d       	sub	sp,4
8000d910:	48 76       	lddpc	r6,8000d92c <mavlink_msg_global_position_int_get_relative_alt+0x24>
8000d912:	1e 26       	rsub	r6,pc
8000d914:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_int32_t(msg,  16);
8000d918:	31 0b       	mov	r11,16
8000d91a:	ee fc ff fc 	ld.w	r12,r7[-4]
8000d91e:	c8 5f       	rcall	8000d828 <_MAV_RETURN_int32_t>
8000d920:	18 98       	mov	r8,r12
}
8000d922:	10 9c       	mov	r12,r8
8000d924:	2f fd       	sub	sp,-4
8000d926:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000d92a:	00 00       	add	r0,r0
8000d92c:	80 00       	ld.sh	r0,r0[0x0]
8000d92e:	d7 96       	*unknown*

8000d930 <mavlink_msg_global_position_int_get_vx>:
 * @brief Get field vx from global_position_int message
 *
 * @return Ground X Speed (Latitude), expressed as m/s * 100
 */
static inline int16_t mavlink_msg_global_position_int_get_vx(const mavlink_message_t* msg)
{
8000d930:	eb cd 40 c0 	pushm	r6-r7,lr
8000d934:	1a 97       	mov	r7,sp
8000d936:	20 1d       	sub	sp,4
8000d938:	48 76       	lddpc	r6,8000d954 <mavlink_msg_global_position_int_get_vx+0x24>
8000d93a:	1e 26       	rsub	r6,pc
8000d93c:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_int16_t(msg,  20);
8000d940:	31 4b       	mov	r11,20
8000d942:	ee fc ff fc 	ld.w	r12,r7[-4]
8000d946:	c3 1f       	rcall	8000d7a8 <_MAV_RETURN_int16_t>
8000d948:	18 98       	mov	r8,r12
}
8000d94a:	10 9c       	mov	r12,r8
8000d94c:	2f fd       	sub	sp,-4
8000d94e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000d952:	00 00       	add	r0,r0
8000d954:	80 00       	ld.sh	r0,r0[0x0]
8000d956:	d7 be       	*unknown*

8000d958 <mavlink_msg_global_position_int_get_vy>:
 * @brief Get field vy from global_position_int message
 *
 * @return Ground Y Speed (Longitude), expressed as m/s * 100
 */
static inline int16_t mavlink_msg_global_position_int_get_vy(const mavlink_message_t* msg)
{
8000d958:	eb cd 40 c0 	pushm	r6-r7,lr
8000d95c:	1a 97       	mov	r7,sp
8000d95e:	20 1d       	sub	sp,4
8000d960:	48 76       	lddpc	r6,8000d97c <mavlink_msg_global_position_int_get_vy+0x24>
8000d962:	1e 26       	rsub	r6,pc
8000d964:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_int16_t(msg,  22);
8000d968:	31 6b       	mov	r11,22
8000d96a:	ee fc ff fc 	ld.w	r12,r7[-4]
8000d96e:	c1 df       	rcall	8000d7a8 <_MAV_RETURN_int16_t>
8000d970:	18 98       	mov	r8,r12
}
8000d972:	10 9c       	mov	r12,r8
8000d974:	2f fd       	sub	sp,-4
8000d976:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000d97a:	00 00       	add	r0,r0
8000d97c:	80 00       	ld.sh	r0,r0[0x0]
8000d97e:	d7 e6       	*unknown*

8000d980 <mavlink_msg_global_position_int_get_vz>:
 * @brief Get field vz from global_position_int message
 *
 * @return Ground Z Speed (Altitude), expressed as m/s * 100
 */
static inline int16_t mavlink_msg_global_position_int_get_vz(const mavlink_message_t* msg)
{
8000d980:	eb cd 40 c0 	pushm	r6-r7,lr
8000d984:	1a 97       	mov	r7,sp
8000d986:	20 1d       	sub	sp,4
8000d988:	48 76       	lddpc	r6,8000d9a4 <mavlink_msg_global_position_int_get_vz+0x24>
8000d98a:	1e 26       	rsub	r6,pc
8000d98c:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_int16_t(msg,  24);
8000d990:	31 8b       	mov	r11,24
8000d992:	ee fc ff fc 	ld.w	r12,r7[-4]
8000d996:	c0 9f       	rcall	8000d7a8 <_MAV_RETURN_int16_t>
8000d998:	18 98       	mov	r8,r12
}
8000d99a:	10 9c       	mov	r12,r8
8000d99c:	2f fd       	sub	sp,-4
8000d99e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000d9a2:	00 00       	add	r0,r0
8000d9a4:	80 00       	ld.sh	r0,r0[0x0]
8000d9a6:	d8 0e       	*unknown*

8000d9a8 <mavlink_msg_global_position_int_get_hdg>:
 * @brief Get field hdg from global_position_int message
 *
 * @return Compass heading in degrees * 100, 0.0..359.99 degrees. If unknown, set to: UINT16_MAX
 */
static inline uint16_t mavlink_msg_global_position_int_get_hdg(const mavlink_message_t* msg)
{
8000d9a8:	eb cd 40 c0 	pushm	r6-r7,lr
8000d9ac:	1a 97       	mov	r7,sp
8000d9ae:	20 1d       	sub	sp,4
8000d9b0:	48 86       	lddpc	r6,8000d9d0 <mavlink_msg_global_position_int_get_hdg+0x28>
8000d9b2:	1e 26       	rsub	r6,pc
8000d9b4:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint16_t(msg,  26);
8000d9b8:	31 ab       	mov	r11,26
8000d9ba:	ee fc ff fc 	ld.w	r12,r7[-4]
8000d9be:	cd 5e       	rcall	8000d768 <_MAV_RETURN_uint16_t>
8000d9c0:	18 98       	mov	r8,r12
8000d9c2:	5c 88       	casts.h	r8
8000d9c4:	5c 88       	casts.h	r8
}
8000d9c6:	10 9c       	mov	r12,r8
8000d9c8:	2f fd       	sub	sp,-4
8000d9ca:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000d9ce:	00 00       	add	r0,r0
8000d9d0:	80 00       	ld.sh	r0,r0[0x0]
8000d9d2:	d8 36       	*unknown*

8000d9d4 <mavlink_msg_global_position_int_decode>:
 *
 * @param msg The message to decode
 * @param global_position_int C-struct to decode the message contents into
 */
static inline void mavlink_msg_global_position_int_decode(const mavlink_message_t* msg, mavlink_global_position_int_t* global_position_int)
{
8000d9d4:	eb cd 40 c0 	pushm	r6-r7,lr
8000d9d8:	1a 97       	mov	r7,sp
8000d9da:	20 2d       	sub	sp,8
8000d9dc:	4a 76       	lddpc	r6,8000da78 <mavlink_msg_global_position_int_decode+0xa4>
8000d9de:	1e 26       	rsub	r6,pc
8000d9e0:	ef 4c ff fc 	st.w	r7[-4],r12
8000d9e4:	ef 4b ff f8 	st.w	r7[-8],r11
#if MAVLINK_NEED_BYTE_SWAP
	global_position_int->time_boot_ms = mavlink_msg_global_position_int_get_time_boot_ms(msg);
8000d9e8:	ee fc ff fc 	ld.w	r12,r7[-4]
8000d9ec:	c3 ef       	rcall	8000d868 <mavlink_msg_global_position_int_get_time_boot_ms>
8000d9ee:	18 99       	mov	r9,r12
8000d9f0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d9f4:	91 09       	st.w	r8[0x0],r9
	global_position_int->lat = mavlink_msg_global_position_int_get_lat(msg);
8000d9f6:	ee fc ff fc 	ld.w	r12,r7[-4]
8000d9fa:	c4 bf       	rcall	8000d890 <mavlink_msg_global_position_int_get_lat>
8000d9fc:	18 99       	mov	r9,r12
8000d9fe:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000da02:	91 19       	st.w	r8[0x4],r9
	global_position_int->lon = mavlink_msg_global_position_int_get_lon(msg);
8000da04:	ee fc ff fc 	ld.w	r12,r7[-4]
8000da08:	c5 8f       	rcall	8000d8b8 <mavlink_msg_global_position_int_get_lon>
8000da0a:	18 99       	mov	r9,r12
8000da0c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000da10:	91 29       	st.w	r8[0x8],r9
	global_position_int->alt = mavlink_msg_global_position_int_get_alt(msg);
8000da12:	ee fc ff fc 	ld.w	r12,r7[-4]
8000da16:	c6 5f       	rcall	8000d8e0 <mavlink_msg_global_position_int_get_alt>
8000da18:	18 99       	mov	r9,r12
8000da1a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000da1e:	91 39       	st.w	r8[0xc],r9
	global_position_int->relative_alt = mavlink_msg_global_position_int_get_relative_alt(msg);
8000da20:	ee fc ff fc 	ld.w	r12,r7[-4]
8000da24:	c7 2f       	rcall	8000d908 <mavlink_msg_global_position_int_get_relative_alt>
8000da26:	18 99       	mov	r9,r12
8000da28:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000da2c:	91 49       	st.w	r8[0x10],r9
	global_position_int->vx = mavlink_msg_global_position_int_get_vx(msg);
8000da2e:	ee fc ff fc 	ld.w	r12,r7[-4]
8000da32:	c7 ff       	rcall	8000d930 <mavlink_msg_global_position_int_get_vx>
8000da34:	18 98       	mov	r8,r12
8000da36:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000da3a:	f3 58 00 14 	st.h	r9[20],r8
	global_position_int->vy = mavlink_msg_global_position_int_get_vy(msg);
8000da3e:	ee fc ff fc 	ld.w	r12,r7[-4]
8000da42:	c8 bf       	rcall	8000d958 <mavlink_msg_global_position_int_get_vy>
8000da44:	18 98       	mov	r8,r12
8000da46:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000da4a:	f3 58 00 16 	st.h	r9[22],r8
	global_position_int->vz = mavlink_msg_global_position_int_get_vz(msg);
8000da4e:	ee fc ff fc 	ld.w	r12,r7[-4]
8000da52:	c9 7f       	rcall	8000d980 <mavlink_msg_global_position_int_get_vz>
8000da54:	18 98       	mov	r8,r12
8000da56:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000da5a:	f3 58 00 18 	st.h	r9[24],r8
	global_position_int->hdg = mavlink_msg_global_position_int_get_hdg(msg);
8000da5e:	ee fc ff fc 	ld.w	r12,r7[-4]
8000da62:	ca 3f       	rcall	8000d9a8 <mavlink_msg_global_position_int_get_hdg>
8000da64:	18 98       	mov	r8,r12
8000da66:	5c 88       	casts.h	r8
8000da68:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000da6c:	f3 58 00 1a 	st.h	r9[26],r8
#else
	memcpy(global_position_int, _MAV_PAYLOAD(msg), MAVLINK_MSG_ID_GLOBAL_POSITION_INT_LEN);
#endif
}
8000da70:	2f ed       	sub	sp,-8
8000da72:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000da76:	00 00       	add	r0,r0
8000da78:	80 00       	ld.sh	r0,r0[0x0]
8000da7a:	d8 62       	popm	r4-r9,pc

8000da7c <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
8000da7c:	eb cd 40 c0 	pushm	r6-r7,lr
8000da80:	1a 97       	mov	r7,sp
8000da82:	20 6d       	sub	sp,24
8000da84:	49 e6       	lddpc	r6,8000dafc <interpolate+0x80>
8000da86:	1e 26       	rsub	r6,pc
8000da88:	ef 4c ff f8 	st.w	r7[-8],r12
8000da8c:	ef 4b ff f4 	st.w	r7[-12],r11
8000da90:	ef 4a ff f0 	st.w	r7[-16],r10
8000da94:	ef 49 ff ec 	st.w	r7[-20],r9
8000da98:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
8000da9c:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000daa0:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000daa4:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
8000daa8:	c0 41       	brne	8000dab0 <interpolate+0x34>
	{
		return y1;
8000daaa:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000daae:	c2 38       	rjmp	8000daf4 <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
8000dab0:	ee f9 ff e8 	ld.w	r9,r7[-24]
8000dab4:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000dab8:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8000dabc:	ee fa ff f8 	ld.w	r10,r7[-8]
8000dac0:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000dac4:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
8000dac8:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8000dacc:	ee fa ff f0 	ld.w	r10,r7[-16]
8000dad0:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000dad4:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8000dad8:	12 9b       	mov	r11,r9
8000dada:	10 9c       	mov	r12,r8
8000dadc:	f0 16 00 08 	mcall	r6[32]
8000dae0:	18 98       	mov	r8,r12
8000dae2:	10 99       	mov	r9,r8
8000dae4:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000dae8:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8000daec:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
8000daf0:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
8000daf4:	10 9c       	mov	r12,r8
8000daf6:	2f ad       	sub	sp,-24
8000daf8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000dafc:	80 00       	ld.sh	r0,r0[0x0]
8000dafe:	d9 0a       	popm	r11,pc,r12=0

8000db00 <init_neighbors>:
#include <stdbool.h>

central_data_t *centralData;

void init_neighbors()
{
8000db00:	eb cd 40 c0 	pushm	r6-r7,lr
8000db04:	1a 97       	mov	r7,sp
8000db06:	48 96       	lddpc	r6,8000db28 <init_neighbors+0x28>
8000db08:	1e 26       	rsub	r6,pc
	centralData = get_central_data();
8000db0a:	f0 16 00 31 	mcall	r6[196]
8000db0e:	18 99       	mov	r9,r12
8000db10:	ec f8 00 00 	ld.w	r8,r6[0]
8000db14:	91 09       	st.w	r8[0x0],r9
	centralData->number_of_neighbors = 0;
8000db16:	ec f8 00 00 	ld.w	r8,r6[0]
8000db1a:	70 09       	ld.w	r9,r8[0x0]
8000db1c:	30 08       	mov	r8,0
8000db1e:	f3 68 10 fc 	st.b	r9[4348],r8
}
8000db22:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000db26:	00 00       	add	r0,r0
8000db28:	80 00       	ld.sh	r0,r0[0x0]
8000db2a:	d9 8c       	*unknown*
8000db2c:	45 72       	lddsp	r2,sp[0x15c]
8000db2e:	72 6f       	ld.w	pc,r9[0x18]
8000db30:	72 21       	ld.w	r1,r9[0x8]
8000db32:	20 54       	sub	r4,5
8000db34:	68 65       	ld.w	r5,r4[0x18]
8000db36:	72 65       	ld.w	r5,r9[0x18]
8000db38:	20 69       	sub	r9,6
8000db3a:	73 20       	ld.w	r0,r9[0x48]
8000db3c:	6d 6f       	ld.w	pc,r6[0x58]
8000db3e:	72 65       	ld.w	r5,r9[0x18]
8000db40:	20 6e       	sub	lr,6
8000db42:	65 69       	ld.w	r9,r2[0x58]
8000db44:	67 68       	ld.w	r8,r3[0x58]
8000db46:	62 6f       	ld.w	pc,r1[0x18]
8000db48:	72 73       	ld.w	r3,r9[0x1c]
8000db4a:	20 74       	sub	r4,7
8000db4c:	68 61       	ld.w	r1,r4[0x18]
8000db4e:	6e 20       	ld.w	r0,r7[0x8]
8000db50:	70 6c       	ld.w	r12,r8[0x18]
8000db52:	61 6e       	ld.w	lr,r0[0x58]
8000db54:	6e 65       	ld.w	r5,r7[0x18]
8000db56:	64 21       	ld.w	r1,r2[0x8]
8000db58:	0a 00       	add	r0,r5

8000db5a <read_msg_from_neighbors>:


void read_msg_from_neighbors(Mavlink_Received_t* rec)
{
8000db5a:	eb cd 40 e8 	pushm	r3,r5-r7,lr
8000db5e:	1a 97       	mov	r7,sp
8000db60:	fa cd 00 a0 	sub	sp,sp,160
8000db64:	fe f6 03 54 	ld.w	r6,pc[852]
8000db68:	1e 26       	rsub	r6,pc
8000db6a:	ef 4c ff 90 	st.w	r7[-112],r12
	uint8_t i;
	
	mavlink_global_position_int_t packet;
	mavlink_msg_global_position_int_decode(&rec->msg,&packet);
8000db6e:	ee f8 ff 90 	ld.w	r8,r7[-112]
8000db72:	ee c9 00 20 	sub	r9,r7,32
8000db76:	12 9b       	mov	r11,r9
8000db78:	10 9c       	mov	r12,r8
8000db7a:	c2 df       	rcall	8000d9d4 <mavlink_msg_global_position_int_decode>
	//Check if coming from a neighbor
	
	if (rec->msg.sysid != mavlink_system.sysid)
8000db7c:	ee f8 ff 90 	ld.w	r8,r7[-112]
8000db80:	11 d9       	ld.ub	r9,r8[0x5]
8000db82:	ec f8 00 74 	ld.w	r8,r6[116]
8000db86:	11 88       	ld.ub	r8,r8[0x0]
8000db88:	f0 09 18 00 	cp.b	r9,r8
8000db8c:	e0 80 01 93 	breq	8000deb2 <read_msg_from_neighbors+0x358>
	{
		global_position_t globalPosNeighbor;
		local_coordinates_t localPosNeighbor;
		uint8_t actualNeighbor;
		
		globalPosNeighbor.longitude = (double)packet.lon / 10000000.0;
8000db90:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000db94:	10 9c       	mov	r12,r8
8000db96:	f0 16 00 1a 	mcall	r6[104]
8000db9a:	30 08       	mov	r8,0
8000db9c:	e0 69 12 d0 	mov	r9,4816
8000dba0:	ea 19 41 63 	orh	r9,0x4163
8000dba4:	f0 16 00 0c 	mcall	r6[48]
8000dba8:	14 98       	mov	r8,r10
8000dbaa:	16 99       	mov	r9,r11
8000dbac:	ee e9 ff c4 	st.d	r7[-60],r8
		globalPosNeighbor.latitude = (double)packet.lat / 10000000.0;
8000dbb0:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000dbb4:	10 9c       	mov	r12,r8
8000dbb6:	f0 16 00 1a 	mcall	r6[104]
8000dbba:	30 08       	mov	r8,0
8000dbbc:	e0 69 12 d0 	mov	r9,4816
8000dbc0:	ea 19 41 63 	orh	r9,0x4163
8000dbc4:	f0 16 00 0c 	mcall	r6[48]
8000dbc8:	14 98       	mov	r8,r10
8000dbca:	16 99       	mov	r9,r11
8000dbcc:	ee e9 ff cc 	st.d	r7[-52],r8
		globalPosNeighbor.altitude = (float)packet.alt / 1000.0;
8000dbd0:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000dbd4:	e5 a6 08 08 	cop	cp0,cr8,cr0,cr8,0x4c
8000dbd8:	fc 1b 44 7a 	movh	r11,0x447a
8000dbdc:	10 9c       	mov	r12,r8
8000dbde:	f0 16 00 08 	mcall	r6[32]
8000dbe2:	18 98       	mov	r8,r12
8000dbe4:	ef 48 ff d4 	st.w	r7[-44],r8
		globalPosNeighbor.heading = (float)packet.hdg;
8000dbe8:	ef 08 ff fa 	ld.sh	r8,r7[-6]
8000dbec:	5c 78       	castu.h	r8
8000dbee:	e5 a4 08 08 	cop	cp0,cr8,cr0,cr8,0x48
8000dbf2:	ef 48 ff d8 	st.w	r7[-40],r8
		
		localPosNeighbor = global_to_local_position(globalPosNeighbor,centralData->position_estimator.localPosition.origin);
8000dbf6:	ec f8 00 00 	ld.w	r8,r6[0]
8000dbfa:	70 08       	ld.w	r8,r8[0x0]
8000dbfc:	ee cc 00 a0 	sub	r12,r7,160
8000dc00:	20 7d       	sub	sp,28
8000dc02:	1a 99       	mov	r9,sp
8000dc04:	12 9a       	mov	r10,r9
8000dc06:	f0 cb f2 54 	sub	r11,r8,-3500
8000dc0a:	f4 c8 00 00 	sub	r8,r10,0
8000dc0e:	f6 c9 00 00 	sub	r9,r11,0
8000dc12:	72 0e       	ld.w	lr,r9[0x0]
8000dc14:	91 0e       	st.w	r8[0x0],lr
8000dc16:	72 1e       	ld.w	lr,r9[0x4]
8000dc18:	91 1e       	st.w	r8[0x4],lr
8000dc1a:	72 2e       	ld.w	lr,r9[0x8]
8000dc1c:	91 2e       	st.w	r8[0x8],lr
8000dc1e:	72 39       	ld.w	r9,r9[0xc]
8000dc20:	91 39       	st.w	r8[0xc],r9
8000dc22:	f6 e8 00 10 	ld.d	r8,r11[16]
8000dc26:	f4 e9 00 10 	st.d	r10[16],r8
8000dc2a:	76 68       	ld.w	r8,r11[0x18]
8000dc2c:	95 68       	st.w	r10[0x18],r8
8000dc2e:	20 7d       	sub	sp,28
8000dc30:	1a 98       	mov	r8,sp
8000dc32:	10 9a       	mov	r10,r8
8000dc34:	ee cb 00 3c 	sub	r11,r7,60
8000dc38:	f4 c8 00 00 	sub	r8,r10,0
8000dc3c:	f6 c9 00 00 	sub	r9,r11,0
8000dc40:	72 0e       	ld.w	lr,r9[0x0]
8000dc42:	91 0e       	st.w	r8[0x0],lr
8000dc44:	72 1e       	ld.w	lr,r9[0x4]
8000dc46:	91 1e       	st.w	r8[0x4],lr
8000dc48:	72 2e       	ld.w	lr,r9[0x8]
8000dc4a:	91 2e       	st.w	r8[0x8],lr
8000dc4c:	72 39       	ld.w	r9,r9[0xc]
8000dc4e:	91 39       	st.w	r8[0xc],r9
8000dc50:	f6 e8 00 10 	ld.d	r8,r11[16]
8000dc54:	f4 e9 00 10 	st.d	r10[16],r8
8000dc58:	76 68       	ld.w	r8,r11[0x18]
8000dc5a:	95 68       	st.w	r10[0x18],r8
8000dc5c:	f0 16 00 73 	mcall	r6[460]
8000dc60:	2f 2d       	sub	sp,-56
8000dc62:	ee cb 00 6c 	sub	r11,r7,108
8000dc66:	ee ca 00 a0 	sub	r10,r7,160
8000dc6a:	f6 c8 00 00 	sub	r8,r11,0
8000dc6e:	f4 c9 00 00 	sub	r9,r10,0
8000dc72:	72 0c       	ld.w	r12,r9[0x0]
8000dc74:	91 0c       	st.w	r8[0x0],r12
8000dc76:	72 1c       	ld.w	r12,r9[0x4]
8000dc78:	91 1c       	st.w	r8[0x4],r12
8000dc7a:	72 2c       	ld.w	r12,r9[0x8]
8000dc7c:	91 2c       	st.w	r8[0x8],r12
8000dc7e:	72 39       	ld.w	r9,r9[0xc]
8000dc80:	91 39       	st.w	r8[0xc],r9
8000dc82:	f6 c8 ff f0 	sub	r8,r11,-16
8000dc86:	f4 c9 ff f0 	sub	r9,r10,-16
8000dc8a:	72 0c       	ld.w	r12,r9[0x0]
8000dc8c:	91 0c       	st.w	r8[0x0],r12
8000dc8e:	72 1c       	ld.w	r12,r9[0x4]
8000dc90:	91 1c       	st.w	r8[0x4],r12
8000dc92:	72 2c       	ld.w	r12,r9[0x8]
8000dc94:	91 2c       	st.w	r8[0x8],r12
8000dc96:	72 39       	ld.w	r9,r9[0xc]
8000dc98:	91 39       	st.w	r8[0xc],r9
8000dc9a:	f6 c8 ff e0 	sub	r8,r11,-32
8000dc9e:	f4 c9 ff e0 	sub	r9,r10,-32
8000dca2:	72 0a       	ld.w	r10,r9[0x0]
8000dca4:	91 0a       	st.w	r8[0x0],r10
8000dca6:	72 1a       	ld.w	r10,r9[0x4]
8000dca8:	91 1a       	st.w	r8[0x4],r10
8000dcaa:	72 2a       	ld.w	r10,r9[0x8]
8000dcac:	91 2a       	st.w	r8[0x8],r10
8000dcae:	72 39       	ld.w	r9,r9[0xc]
8000dcb0:	91 39       	st.w	r8[0xc],r9
		
		bool ID_found = false;
8000dcb2:	30 08       	mov	r8,0
8000dcb4:	ef 68 ff ff 	st.b	r7[-1],r8
		i = 0;
8000dcb8:	30 08       	mov	r8,0
8000dcba:	ef 68 ff fd 	st.b	r7[-3],r8
		while ((!ID_found)&&(i<centralData->number_of_neighbors))
8000dcbe:	c1 b8       	rjmp	8000dcf4 <read_msg_from_neighbors+0x19a>
		{
			if (rec->msg.sysid == centralData->listNeighbors[i].neighborID)
8000dcc0:	ee f8 ff 90 	ld.w	r8,r7[-112]
8000dcc4:	11 d9       	ld.ub	r9,r8[0x5]
8000dcc6:	ec f8 00 00 	ld.w	r8,r6[0]
8000dcca:	70 0a       	ld.w	r10,r8[0x0]
8000dccc:	ef 38 ff fd 	ld.ub	r8,r7[-3]
8000dcd0:	a5 78       	lsl	r8,0x5
8000dcd2:	f4 08 00 08 	add	r8,r10,r8
8000dcd6:	f0 c8 ee fc 	sub	r8,r8,-4356
8000dcda:	11 88       	ld.ub	r8,r8[0x0]
8000dcdc:	f0 09 18 00 	cp.b	r9,r8
8000dce0:	c0 51       	brne	8000dcea <read_msg_from_neighbors+0x190>
			{
				ID_found = true;
8000dce2:	30 18       	mov	r8,1
8000dce4:	ef 68 ff ff 	st.b	r7[-1],r8
8000dce8:	c0 68       	rjmp	8000dcf4 <read_msg_from_neighbors+0x19a>
			}else{
				i++;
8000dcea:	ef 38 ff fd 	ld.ub	r8,r7[-3]
8000dcee:	2f f8       	sub	r8,-1
8000dcf0:	ef 68 ff fd 	st.b	r7[-3],r8
		
		localPosNeighbor = global_to_local_position(globalPosNeighbor,centralData->position_estimator.localPosition.origin);
		
		bool ID_found = false;
		i = 0;
		while ((!ID_found)&&(i<centralData->number_of_neighbors))
8000dcf4:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000dcf8:	ec 18 00 01 	eorl	r8,0x1
8000dcfc:	5c 58       	castu.b	r8
8000dcfe:	c0 b0       	breq	8000dd14 <read_msg_from_neighbors+0x1ba>
8000dd00:	ec f8 00 00 	ld.w	r8,r6[0]
8000dd04:	70 08       	ld.w	r8,r8[0x0]
8000dd06:	f1 38 10 fc 	ld.ub	r8,r8[4348]
8000dd0a:	ef 39 ff fd 	ld.ub	r9,r7[-3]
8000dd0e:	f0 09 18 00 	cp.b	r9,r8
8000dd12:	cd 73       	brcs	8000dcc0 <read_msg_from_neighbors+0x166>
			//{
				//ID_found = true;
			//}
		}
		
		if (i>=centralData->number_of_neighbors)
8000dd14:	ec f8 00 00 	ld.w	r8,r6[0]
8000dd18:	70 08       	ld.w	r8,r8[0x0]
8000dd1a:	f1 38 10 fc 	ld.ub	r8,r8[4348]
8000dd1e:	ef 39 ff fd 	ld.ub	r9,r7[-3]
8000dd22:	f0 09 18 00 	cp.b	r9,r8
8000dd26:	c2 93       	brcs	8000dd78 <read_msg_from_neighbors+0x21e>
		{
			if (centralData->number_of_neighbors < MAX_NUM_NEIGHBORS)
8000dd28:	ec f8 00 00 	ld.w	r8,r6[0]
8000dd2c:	70 08       	ld.w	r8,r8[0x0]
8000dd2e:	f1 39 10 fc 	ld.ub	r9,r8[4348]
8000dd32:	30 e8       	mov	r8,14
8000dd34:	f0 09 18 00 	cp.b	r9,r8
8000dd38:	e0 8b 00 13 	brhi	8000dd5e <read_msg_from_neighbors+0x204>
			{
				actualNeighbor = centralData->number_of_neighbors;
8000dd3c:	ec f8 00 00 	ld.w	r8,r6[0]
8000dd40:	70 08       	ld.w	r8,r8[0x0]
8000dd42:	f1 38 10 fc 	ld.ub	r8,r8[4348]
8000dd46:	ef 68 ff fe 	st.b	r7[-2],r8
				centralData->number_of_neighbors++;
8000dd4a:	ec f8 00 00 	ld.w	r8,r6[0]
8000dd4e:	70 08       	ld.w	r8,r8[0x0]
8000dd50:	f1 39 10 fc 	ld.ub	r9,r8[4348]
8000dd54:	2f f9       	sub	r9,-1
8000dd56:	5c 59       	castu.b	r9
8000dd58:	f1 69 10 fc 	st.b	r8[4348],r9
8000dd5c:	c1 28       	rjmp	8000dd80 <read_msg_from_neighbors+0x226>
			}else{
				// This case shouldn't happen
				dbg_print("Error! There is more neighbors than planned!\n");
8000dd5e:	fe cc 02 32 	sub	r12,pc,562
8000dd62:	f0 16 00 01 	mcall	r6[4]
				actualNeighbor = centralData->number_of_neighbors-1;
8000dd66:	ec f8 00 00 	ld.w	r8,r6[0]
8000dd6a:	70 08       	ld.w	r8,r8[0x0]
8000dd6c:	f1 38 10 fc 	ld.ub	r8,r8[4348]
8000dd70:	20 18       	sub	r8,1
8000dd72:	ef 68 ff fe 	st.b	r7[-2],r8
8000dd76:	c0 58       	rjmp	8000dd80 <read_msg_from_neighbors+0x226>
			}
		}else{
			actualNeighbor = i;
8000dd78:	ef 38 ff fd 	ld.ub	r8,r7[-3]
8000dd7c:	ef 68 ff fe 	st.b	r7[-2],r8
		}
		
		
		
		centralData->listNeighbors[actualNeighbor].neighborID = rec->msg.sysid;
8000dd80:	ec f8 00 00 	ld.w	r8,r6[0]
8000dd84:	70 0a       	ld.w	r10,r8[0x0]
8000dd86:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8000dd8a:	ee f8 ff 90 	ld.w	r8,r7[-112]
8000dd8e:	11 d8       	ld.ub	r8,r8[0x5]
8000dd90:	a5 79       	lsl	r9,0x5
8000dd92:	f4 09 00 09 	add	r9,r10,r9
8000dd96:	f2 c9 ee fc 	sub	r9,r9,-4356
8000dd9a:	b2 88       	st.b	r9[0x0],r8
		
		for (i=0;i<3;i++)
8000dd9c:	30 08       	mov	r8,0
8000dd9e:	ef 68 ff fd 	st.b	r7[-3],r8
8000dda2:	c1 b8       	rjmp	8000ddd8 <read_msg_from_neighbors+0x27e>
		{
			centralData->listNeighbors[actualNeighbor].position[i] = localPosNeighbor.pos[i];
8000dda4:	ec f8 00 00 	ld.w	r8,r6[0]
8000dda8:	70 09       	ld.w	r9,r8[0x0]
8000ddaa:	ef 3c ff fe 	ld.ub	r12,r7[-2]
8000ddae:	ef 3b ff fd 	ld.ub	r11,r7[-3]
8000ddb2:	ef 38 ff fd 	ld.ub	r8,r7[-3]
8000ddb6:	a3 68       	lsl	r8,0x2
8000ddb8:	ee 08 00 08 	add	r8,r7,r8
8000ddbc:	f0 fa ff 94 	ld.w	r10,r8[-108]
8000ddc0:	f8 08 15 03 	lsl	r8,r12,0x3
8000ddc4:	16 08       	add	r8,r11
8000ddc6:	f0 c8 fb be 	sub	r8,r8,-1090
8000ddca:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
		
		
		
		centralData->listNeighbors[actualNeighbor].neighborID = rec->msg.sysid;
		
		for (i=0;i<3;i++)
8000ddce:	ef 38 ff fd 	ld.ub	r8,r7[-3]
8000ddd2:	2f f8       	sub	r8,-1
8000ddd4:	ef 68 ff fd 	st.b	r7[-3],r8
8000ddd8:	ef 39 ff fd 	ld.ub	r9,r7[-3]
8000dddc:	30 28       	mov	r8,2
8000ddde:	f0 09 18 00 	cp.b	r9,r8
8000dde2:	fe 98 ff e1 	brls	8000dda4 <read_msg_from_neighbors+0x24a>
		{
			centralData->listNeighbors[actualNeighbor].position[i] = localPosNeighbor.pos[i];
		}
		centralData->listNeighbors[actualNeighbor].velocity[X] = packet.vx / 100.0;
8000dde6:	ec f8 00 00 	ld.w	r8,r6[0]
8000ddea:	70 05       	ld.w	r5,r8[0x0]
8000ddec:	ef 33 ff fe 	ld.ub	r3,r7[-2]
8000ddf0:	ef 08 ff f4 	ld.sh	r8,r7[-12]
8000ddf4:	10 9c       	mov	r12,r8
8000ddf6:	f0 16 00 1a 	mcall	r6[104]
8000ddfa:	30 08       	mov	r8,0
8000ddfc:	fc 19 40 59 	movh	r9,0x4059
8000de00:	f0 16 00 0c 	mcall	r6[48]
8000de04:	14 98       	mov	r8,r10
8000de06:	16 99       	mov	r9,r11
8000de08:	10 9a       	mov	r10,r8
8000de0a:	12 9b       	mov	r11,r9
8000de0c:	f0 16 00 09 	mcall	r6[36]
8000de10:	18 99       	mov	r9,r12
8000de12:	e6 08 15 01 	lsl	r8,r3,0x1
8000de16:	2f f8       	sub	r8,-1
8000de18:	a5 68       	lsl	r8,0x4
8000de1a:	ea 08 00 08 	add	r8,r5,r8
8000de1e:	f0 c8 ee fc 	sub	r8,r8,-4356
8000de22:	91 09       	st.w	r8[0x0],r9
		centralData->listNeighbors[actualNeighbor].velocity[Y] = packet.vy / 100.0;
8000de24:	ec f8 00 00 	ld.w	r8,r6[0]
8000de28:	70 05       	ld.w	r5,r8[0x0]
8000de2a:	ef 33 ff fe 	ld.ub	r3,r7[-2]
8000de2e:	ef 08 ff f6 	ld.sh	r8,r7[-10]
8000de32:	10 9c       	mov	r12,r8
8000de34:	f0 16 00 1a 	mcall	r6[104]
8000de38:	30 08       	mov	r8,0
8000de3a:	fc 19 40 59 	movh	r9,0x4059
8000de3e:	f0 16 00 0c 	mcall	r6[48]
8000de42:	14 98       	mov	r8,r10
8000de44:	16 99       	mov	r9,r11
8000de46:	10 9a       	mov	r10,r8
8000de48:	12 9b       	mov	r11,r9
8000de4a:	f0 16 00 09 	mcall	r6[36]
8000de4e:	18 99       	mov	r9,r12
8000de50:	e6 08 15 05 	lsl	r8,r3,0x5
8000de54:	ea 08 00 08 	add	r8,r5,r8
8000de58:	f0 c8 ee e8 	sub	r8,r8,-4376
8000de5c:	91 09       	st.w	r8[0x0],r9
		centralData->listNeighbors[actualNeighbor].velocity[Z] = packet.vz / 100.0;
8000de5e:	ec f8 00 00 	ld.w	r8,r6[0]
8000de62:	70 05       	ld.w	r5,r8[0x0]
8000de64:	ef 33 ff fe 	ld.ub	r3,r7[-2]
8000de68:	ef 08 ff f8 	ld.sh	r8,r7[-8]
8000de6c:	10 9c       	mov	r12,r8
8000de6e:	f0 16 00 1a 	mcall	r6[104]
8000de72:	30 08       	mov	r8,0
8000de74:	fc 19 40 59 	movh	r9,0x4059
8000de78:	f0 16 00 0c 	mcall	r6[48]
8000de7c:	14 98       	mov	r8,r10
8000de7e:	16 99       	mov	r9,r11
8000de80:	10 9a       	mov	r10,r8
8000de82:	12 9b       	mov	r11,r9
8000de84:	f0 16 00 09 	mcall	r6[36]
8000de88:	18 99       	mov	r9,r12
8000de8a:	e6 08 15 05 	lsl	r8,r3,0x5
8000de8e:	ea 08 00 08 	add	r8,r5,r8
8000de92:	f0 c8 ee e4 	sub	r8,r8,-4380
8000de96:	91 09       	st.w	r8[0x0],r9
		
		centralData->listNeighbors[actualNeighbor].size = SIZE_VHC_ORCA;
8000de98:	ec f8 00 00 	ld.w	r8,r6[0]
8000de9c:	70 09       	ld.w	r9,r8[0x0]
8000de9e:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000dea2:	f0 c8 ff 77 	sub	r8,r8,-137
8000dea6:	a5 78       	lsl	r8,0x5
8000dea8:	f2 08 00 08 	add	r8,r9,r8
8000deac:	fc 19 40 a0 	movh	r9,0x40a0
8000deb0:	91 09       	st.w	r8[0x0],r9
		//}
		//dbg_print_vector(rel_pos,3);
		//dbg_print("\n");
		
	}
8000deb2:	2d 8d       	sub	sp,-160
8000deb4:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
8000deb8:	80 00       	ld.sh	r0,r0[0x0]
8000deba:	d9 ec       	*unknown*

8000debc <scalar_product>:
	return out;
}


float static inline scalar_product(const float u[], const float v[])
{
8000debc:	eb cd 40 80 	pushm	r7,lr
8000dec0:	1a 97       	mov	r7,sp
8000dec2:	20 3d       	sub	sp,12
8000dec4:	ef 4c ff f8 	st.w	r7[-8],r12
8000dec8:	ef 4b ff f4 	st.w	r7[-12],r11
	float scp = (u[0]*v[0]+u[1]*v[1]+u[2]*v[2]);
8000decc:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000ded0:	70 09       	ld.w	r9,r8[0x0]
8000ded2:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000ded6:	70 08       	ld.w	r8,r8[0x0]
8000ded8:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000dedc:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000dee0:	2f c8       	sub	r8,-4
8000dee2:	70 0a       	ld.w	r10,r8[0x0]
8000dee4:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000dee8:	2f c8       	sub	r8,-4
8000deea:	70 08       	ld.w	r8,r8[0x0]
8000deec:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000def0:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000def4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000def8:	2f 88       	sub	r8,-8
8000defa:	70 0a       	ld.w	r10,r8[0x0]
8000defc:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000df00:	2f 88       	sub	r8,-8
8000df02:	70 08       	ld.w	r8,r8[0x0]
8000df04:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000df08:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8000df0c:	ef 48 ff fc 	st.w	r7[-4],r8
	return scp;
8000df10:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8000df14:	10 9c       	mov	r12,r8
8000df16:	2f dd       	sub	sp,-12
8000df18:	e3 cd 80 80 	ldm	sp++,r7,pc

8000df1c <quat_multi>:
	out[2] = u[0] * v[1] - u[1] * v[0];
}


UQuat_t static inline quat_multi(const UQuat_t q1, const UQuat_t q2)
{
8000df1c:	eb cd 40 e8 	pushm	r3,r5-r7,lr
8000df20:	1a 97       	mov	r7,sp
8000df22:	20 7d       	sub	sp,28
8000df24:	4b d6       	lddpc	r6,8000e018 <quat_multi+0xfc>
8000df26:	1e 26       	rsub	r6,pc
8000df28:	ee c8 ff ec 	sub	r8,r7,-20
8000df2c:	18 95       	mov	r5,r12
	float tmp[3];
	UQuat_t out;
	tmp[0] = q1.v[1] * q2.v[2] - q1.v[2]*q2.v[1];
8000df2e:	70 2a       	ld.w	r10,r8[0x8]
8000df30:	70 79       	ld.w	r9,r8[0x1c]
8000df32:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8000df36:	70 3b       	ld.w	r11,r8[0xc]
8000df38:	70 69       	ld.w	r9,r8[0x18]
8000df3a:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8000df3e:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8000df42:	ef 49 ff f4 	st.w	r7[-12],r9
	tmp[1] = q1.v[2] * q2.v[0] - q1.v[0]*q2.v[2];
8000df46:	70 3a       	ld.w	r10,r8[0xc]
8000df48:	70 59       	ld.w	r9,r8[0x14]
8000df4a:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8000df4e:	70 1b       	ld.w	r11,r8[0x4]
8000df50:	70 79       	ld.w	r9,r8[0x1c]
8000df52:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8000df56:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8000df5a:	ef 49 ff f8 	st.w	r7[-8],r9
	tmp[2] = q1.v[0] * q2.v[1] - q1.v[1]*q2.v[0];
8000df5e:	70 1a       	ld.w	r10,r8[0x4]
8000df60:	70 69       	ld.w	r9,r8[0x18]
8000df62:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8000df66:	70 2b       	ld.w	r11,r8[0x8]
8000df68:	70 59       	ld.w	r9,r8[0x14]
8000df6a:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8000df6e:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8000df72:	ef 49 ff fc 	st.w	r7[-4],r9
	out.v[0] = q2.s*q1.v[0] + q1.s *q2.v[0] +tmp[0];
8000df76:	70 4a       	ld.w	r10,r8[0x10]
8000df78:	70 19       	ld.w	r9,r8[0x4]
8000df7a:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8000df7e:	70 0b       	ld.w	r11,r8[0x0]
8000df80:	70 59       	ld.w	r9,r8[0x14]
8000df82:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8000df86:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
8000df8a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000df8e:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
8000df92:	ef 49 ff e8 	st.w	r7[-24],r9
	out.v[1] = q2.s*q1.v[1] + q1.s *q2.v[1] +tmp[1];
8000df96:	70 4a       	ld.w	r10,r8[0x10]
8000df98:	70 29       	ld.w	r9,r8[0x8]
8000df9a:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8000df9e:	70 0b       	ld.w	r11,r8[0x0]
8000dfa0:	70 69       	ld.w	r9,r8[0x18]
8000dfa2:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8000dfa6:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
8000dfaa:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000dfae:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
8000dfb2:	ef 49 ff ec 	st.w	r7[-20],r9
	out.v[2] = q2.s*q1.v[2] + q1.s *q2.v[2] +tmp[2];
8000dfb6:	70 4a       	ld.w	r10,r8[0x10]
8000dfb8:	70 39       	ld.w	r9,r8[0xc]
8000dfba:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8000dfbe:	70 0b       	ld.w	r11,r8[0x0]
8000dfc0:	70 79       	ld.w	r9,r8[0x1c]
8000dfc2:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8000dfc6:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
8000dfca:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000dfce:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
8000dfd2:	ef 49 ff f0 	st.w	r7[-16],r9
	out.s= q1.s*q2.s - scalar_product(q1.v, q2.v);
8000dfd6:	70 0a       	ld.w	r10,r8[0x0]
8000dfd8:	70 49       	ld.w	r9,r8[0x10]
8000dfda:	e5 a2 03 a9 	cop	cp0,cr3,cr10,cr9,0x44
8000dfde:	f0 c9 ff f0 	sub	r9,r8,-16
8000dfe2:	2f c9       	sub	r9,-4
8000dfe4:	2f c8       	sub	r8,-4
8000dfe6:	12 9b       	mov	r11,r9
8000dfe8:	10 9c       	mov	r12,r8
8000dfea:	c6 9f       	rcall	8000debc <scalar_product>
8000dfec:	18 98       	mov	r8,r12
8000dfee:	e5 a1 08 38 	cop	cp0,cr8,cr3,cr8,0x42
8000dff2:	ef 48 ff e4 	st.w	r7[-28],r8
	
	return out;
8000dff6:	0a 98       	mov	r8,r5
8000dff8:	ee c9 00 1c 	sub	r9,r7,28
8000dffc:	20 08       	sub	r8,0
8000dffe:	20 09       	sub	r9,0
8000e000:	72 0a       	ld.w	r10,r9[0x0]
8000e002:	91 0a       	st.w	r8[0x0],r10
8000e004:	72 1a       	ld.w	r10,r9[0x4]
8000e006:	91 1a       	st.w	r8[0x4],r10
8000e008:	72 2a       	ld.w	r10,r9[0x8]
8000e00a:	91 2a       	st.w	r8[0x8],r10
8000e00c:	72 39       	ld.w	r9,r9[0xc]
8000e00e:	91 39       	st.w	r8[0xc],r9
}
8000e010:	0a 9c       	mov	r12,r5
8000e012:	2f 9d       	sub	sp,-28
8000e014:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
8000e018:	80 00       	ld.sh	r0,r0[0x0]
8000e01a:	dd aa       	popm	r4-r7,r10-r11,pc,r12=-1

8000e01c <quat_inv>:

UQuat_t static inline quat_inv(const UQuat_t q)
{
8000e01c:	eb cd 40 80 	pushm	r7,lr
8000e020:	1a 97       	mov	r7,sp
8000e022:	20 5d       	sub	sp,20
8000e024:	ee c9 ff f8 	sub	r9,r7,-8
8000e028:	18 9a       	mov	r10,r12
	int i;
	
	UQuat_t qinv;
	qinv.s = q.s;
8000e02a:	72 08       	ld.w	r8,r9[0x0]
8000e02c:	ef 48 ff ec 	st.w	r7[-20],r8
	for (i=0;i<3;i++)
8000e030:	30 08       	mov	r8,0
8000e032:	ef 48 ff fc 	st.w	r7[-4],r8
8000e036:	c1 58       	rjmp	8000e060 <quat_inv+0x44>
	{
		qinv.v[i] = -q.v[i];
8000e038:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e03c:	ee fb ff fc 	ld.w	r11,r7[-4]
8000e040:	2f fb       	sub	r11,-1
8000e042:	f2 0b 03 2b 	ld.w	r11,r9[r11<<0x2]
8000e046:	ee 1b 80 00 	eorh	r11,0x8000
8000e04a:	2f f8       	sub	r8,-1
8000e04c:	a3 68       	lsl	r8,0x2
8000e04e:	ee 08 00 08 	add	r8,r7,r8
8000e052:	f1 4b ff ec 	st.w	r8[-20],r11
{
	int i;
	
	UQuat_t qinv;
	qinv.s = q.s;
	for (i=0;i<3;i++)
8000e056:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e05a:	2f f8       	sub	r8,-1
8000e05c:	ef 48 ff fc 	st.w	r7[-4],r8
8000e060:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e064:	58 28       	cp.w	r8,2
8000e066:	fe 9a ff e9 	brle	8000e038 <quat_inv+0x1c>
	{
		qinv.v[i] = -q.v[i];
	}
	return qinv;
8000e06a:	14 98       	mov	r8,r10
8000e06c:	ee c9 00 14 	sub	r9,r7,20
8000e070:	20 08       	sub	r8,0
8000e072:	20 09       	sub	r9,0
8000e074:	72 0b       	ld.w	r11,r9[0x0]
8000e076:	91 0b       	st.w	r8[0x0],r11
8000e078:	72 1b       	ld.w	r11,r9[0x4]
8000e07a:	91 1b       	st.w	r8[0x4],r11
8000e07c:	72 2b       	ld.w	r11,r9[0x8]
8000e07e:	91 2b       	st.w	r8[0x8],r11
8000e080:	72 39       	ld.w	r9,r9[0xc]
8000e082:	91 39       	st.w	r8[0xc],r9
}
8000e084:	14 9c       	mov	r12,r10
8000e086:	2f bd       	sub	sp,-20
8000e088:	e3 cd 80 80 	ldm	sp++,r7,pc

8000e08c <quat_global_to_local>:

UQuat_t static inline quat_global_to_local(const UQuat_t qe, const UQuat_t qvect)
{
8000e08c:	eb cd 40 e8 	pushm	r3,r5-r7,lr
8000e090:	1a 97       	mov	r7,sp
8000e092:	20 cd       	sub	sp,48
8000e094:	4b c6       	lddpc	r6,8000e184 <quat_global_to_local+0xf8>
8000e096:	1e 26       	rsub	r6,pc
8000e098:	ee c5 ff ec 	sub	r5,r7,-20
8000e09c:	18 93       	mov	r3,r12
	UQuat_t qinv, qtmp;
	
	qinv = quat_inv(qe);
8000e09e:	ee ca 00 10 	sub	r10,r7,16
8000e0a2:	20 4d       	sub	sp,16
8000e0a4:	1a 98       	mov	r8,sp
8000e0a6:	0a 99       	mov	r9,r5
8000e0a8:	20 08       	sub	r8,0
8000e0aa:	20 09       	sub	r9,0
8000e0ac:	72 0b       	ld.w	r11,r9[0x0]
8000e0ae:	91 0b       	st.w	r8[0x0],r11
8000e0b0:	72 1b       	ld.w	r11,r9[0x4]
8000e0b2:	91 1b       	st.w	r8[0x4],r11
8000e0b4:	72 2b       	ld.w	r11,r9[0x8]
8000e0b6:	91 2b       	st.w	r8[0x8],r11
8000e0b8:	72 39       	ld.w	r9,r9[0xc]
8000e0ba:	91 39       	st.w	r8[0xc],r9
8000e0bc:	14 9c       	mov	r12,r10
8000e0be:	ca ff       	rcall	8000e01c <quat_inv>
8000e0c0:	2f cd       	sub	sp,-16
	qtmp = quat_multi(qinv,qvect);
8000e0c2:	ee ca 00 20 	sub	r10,r7,32
8000e0c6:	20 4d       	sub	sp,16
8000e0c8:	1a 98       	mov	r8,sp
8000e0ca:	ea c9 ff f0 	sub	r9,r5,-16
8000e0ce:	20 08       	sub	r8,0
8000e0d0:	20 09       	sub	r9,0
8000e0d2:	72 0b       	ld.w	r11,r9[0x0]
8000e0d4:	91 0b       	st.w	r8[0x0],r11
8000e0d6:	72 1b       	ld.w	r11,r9[0x4]
8000e0d8:	91 1b       	st.w	r8[0x4],r11
8000e0da:	72 2b       	ld.w	r11,r9[0x8]
8000e0dc:	91 2b       	st.w	r8[0x8],r11
8000e0de:	72 39       	ld.w	r9,r9[0xc]
8000e0e0:	91 39       	st.w	r8[0xc],r9
8000e0e2:	20 4d       	sub	sp,16
8000e0e4:	1a 98       	mov	r8,sp
8000e0e6:	ee c9 00 10 	sub	r9,r7,16
8000e0ea:	20 08       	sub	r8,0
8000e0ec:	20 09       	sub	r9,0
8000e0ee:	72 0b       	ld.w	r11,r9[0x0]
8000e0f0:	91 0b       	st.w	r8[0x0],r11
8000e0f2:	72 1b       	ld.w	r11,r9[0x4]
8000e0f4:	91 1b       	st.w	r8[0x4],r11
8000e0f6:	72 2b       	ld.w	r11,r9[0x8]
8000e0f8:	91 2b       	st.w	r8[0x8],r11
8000e0fa:	72 39       	ld.w	r9,r9[0xc]
8000e0fc:	91 39       	st.w	r8[0xc],r9
8000e0fe:	14 9c       	mov	r12,r10
8000e100:	c0 ef       	rcall	8000df1c <quat_multi>
8000e102:	2f 8d       	sub	sp,-32
	qtmp = quat_multi(qtmp,qe);
8000e104:	ee ca 00 30 	sub	r10,r7,48
8000e108:	20 4d       	sub	sp,16
8000e10a:	1a 98       	mov	r8,sp
8000e10c:	0a 99       	mov	r9,r5
8000e10e:	20 08       	sub	r8,0
8000e110:	20 09       	sub	r9,0
8000e112:	72 0b       	ld.w	r11,r9[0x0]
8000e114:	91 0b       	st.w	r8[0x0],r11
8000e116:	72 1b       	ld.w	r11,r9[0x4]
8000e118:	91 1b       	st.w	r8[0x4],r11
8000e11a:	72 2b       	ld.w	r11,r9[0x8]
8000e11c:	91 2b       	st.w	r8[0x8],r11
8000e11e:	72 39       	ld.w	r9,r9[0xc]
8000e120:	91 39       	st.w	r8[0xc],r9
8000e122:	20 4d       	sub	sp,16
8000e124:	1a 98       	mov	r8,sp
8000e126:	ee c9 00 20 	sub	r9,r7,32
8000e12a:	20 08       	sub	r8,0
8000e12c:	20 09       	sub	r9,0
8000e12e:	72 0b       	ld.w	r11,r9[0x0]
8000e130:	91 0b       	st.w	r8[0x0],r11
8000e132:	72 1b       	ld.w	r11,r9[0x4]
8000e134:	91 1b       	st.w	r8[0x4],r11
8000e136:	72 2b       	ld.w	r11,r9[0x8]
8000e138:	91 2b       	st.w	r8[0x8],r11
8000e13a:	72 39       	ld.w	r9,r9[0xc]
8000e13c:	91 39       	st.w	r8[0xc],r9
8000e13e:	14 9c       	mov	r12,r10
8000e140:	ce ee       	rcall	8000df1c <quat_multi>
8000e142:	2f 8d       	sub	sp,-32
8000e144:	ee c8 00 20 	sub	r8,r7,32
8000e148:	ee c9 00 30 	sub	r9,r7,48
8000e14c:	20 08       	sub	r8,0
8000e14e:	20 09       	sub	r9,0
8000e150:	72 0a       	ld.w	r10,r9[0x0]
8000e152:	91 0a       	st.w	r8[0x0],r10
8000e154:	72 1a       	ld.w	r10,r9[0x4]
8000e156:	91 1a       	st.w	r8[0x4],r10
8000e158:	72 2a       	ld.w	r10,r9[0x8]
8000e15a:	91 2a       	st.w	r8[0x8],r10
8000e15c:	72 39       	ld.w	r9,r9[0xc]
8000e15e:	91 39       	st.w	r8[0xc],r9

	return qtmp;
8000e160:	06 98       	mov	r8,r3
8000e162:	ee c9 00 20 	sub	r9,r7,32
8000e166:	20 08       	sub	r8,0
8000e168:	20 09       	sub	r9,0
8000e16a:	72 0a       	ld.w	r10,r9[0x0]
8000e16c:	91 0a       	st.w	r8[0x0],r10
8000e16e:	72 1a       	ld.w	r10,r9[0x4]
8000e170:	91 1a       	st.w	r8[0x4],r10
8000e172:	72 2a       	ld.w	r10,r9[0x8]
8000e174:	91 2a       	st.w	r8[0x8],r10
8000e176:	72 39       	ld.w	r9,r9[0xc]
8000e178:	91 39       	st.w	r8[0xc],r9
}
8000e17a:	06 9c       	mov	r12,r3
8000e17c:	2f 4d       	sub	sp,-48
8000e17e:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
8000e182:	00 00       	add	r0,r0
8000e184:	80 00       	ld.sh	r0,r0[0x0]
8000e186:	df 1a       	popm	r0-r3,r11,pc,r12=-1

8000e188 <quat_local_to_global>:

UQuat_t static inline quat_local_to_global(const UQuat_t qe, const UQuat_t qvect)
{
8000e188:	eb cd 40 e8 	pushm	r3,r5-r7,lr
8000e18c:	1a 97       	mov	r7,sp
8000e18e:	20 cd       	sub	sp,48
8000e190:	4b c6       	lddpc	r6,8000e280 <quat_local_to_global+0xf8>
8000e192:	1e 26       	rsub	r6,pc
8000e194:	ee c5 ff ec 	sub	r5,r7,-20
8000e198:	18 93       	mov	r3,r12
	UQuat_t qinv, qtmp;
	
	qinv = quat_inv(qe);
8000e19a:	ee ca 00 10 	sub	r10,r7,16
8000e19e:	20 4d       	sub	sp,16
8000e1a0:	1a 98       	mov	r8,sp
8000e1a2:	0a 99       	mov	r9,r5
8000e1a4:	20 08       	sub	r8,0
8000e1a6:	20 09       	sub	r9,0
8000e1a8:	72 0b       	ld.w	r11,r9[0x0]
8000e1aa:	91 0b       	st.w	r8[0x0],r11
8000e1ac:	72 1b       	ld.w	r11,r9[0x4]
8000e1ae:	91 1b       	st.w	r8[0x4],r11
8000e1b0:	72 2b       	ld.w	r11,r9[0x8]
8000e1b2:	91 2b       	st.w	r8[0x8],r11
8000e1b4:	72 39       	ld.w	r9,r9[0xc]
8000e1b6:	91 39       	st.w	r8[0xc],r9
8000e1b8:	14 9c       	mov	r12,r10
8000e1ba:	c3 1f       	rcall	8000e01c <quat_inv>
8000e1bc:	2f cd       	sub	sp,-16
	qtmp = quat_multi(qe, qvect);
8000e1be:	ee ca 00 20 	sub	r10,r7,32
8000e1c2:	20 4d       	sub	sp,16
8000e1c4:	1a 98       	mov	r8,sp
8000e1c6:	ea c9 ff f0 	sub	r9,r5,-16
8000e1ca:	20 08       	sub	r8,0
8000e1cc:	20 09       	sub	r9,0
8000e1ce:	72 0b       	ld.w	r11,r9[0x0]
8000e1d0:	91 0b       	st.w	r8[0x0],r11
8000e1d2:	72 1b       	ld.w	r11,r9[0x4]
8000e1d4:	91 1b       	st.w	r8[0x4],r11
8000e1d6:	72 2b       	ld.w	r11,r9[0x8]
8000e1d8:	91 2b       	st.w	r8[0x8],r11
8000e1da:	72 39       	ld.w	r9,r9[0xc]
8000e1dc:	91 39       	st.w	r8[0xc],r9
8000e1de:	20 4d       	sub	sp,16
8000e1e0:	1a 98       	mov	r8,sp
8000e1e2:	0a 99       	mov	r9,r5
8000e1e4:	20 08       	sub	r8,0
8000e1e6:	20 09       	sub	r9,0
8000e1e8:	72 0b       	ld.w	r11,r9[0x0]
8000e1ea:	91 0b       	st.w	r8[0x0],r11
8000e1ec:	72 1b       	ld.w	r11,r9[0x4]
8000e1ee:	91 1b       	st.w	r8[0x4],r11
8000e1f0:	72 2b       	ld.w	r11,r9[0x8]
8000e1f2:	91 2b       	st.w	r8[0x8],r11
8000e1f4:	72 39       	ld.w	r9,r9[0xc]
8000e1f6:	91 39       	st.w	r8[0xc],r9
8000e1f8:	14 9c       	mov	r12,r10
8000e1fa:	c9 1e       	rcall	8000df1c <quat_multi>
8000e1fc:	2f 8d       	sub	sp,-32
	qtmp = quat_multi(qtmp, qinv);
8000e1fe:	ee ca 00 30 	sub	r10,r7,48
8000e202:	20 4d       	sub	sp,16
8000e204:	1a 98       	mov	r8,sp
8000e206:	ee c9 00 10 	sub	r9,r7,16
8000e20a:	20 08       	sub	r8,0
8000e20c:	20 09       	sub	r9,0
8000e20e:	72 0b       	ld.w	r11,r9[0x0]
8000e210:	91 0b       	st.w	r8[0x0],r11
8000e212:	72 1b       	ld.w	r11,r9[0x4]
8000e214:	91 1b       	st.w	r8[0x4],r11
8000e216:	72 2b       	ld.w	r11,r9[0x8]
8000e218:	91 2b       	st.w	r8[0x8],r11
8000e21a:	72 39       	ld.w	r9,r9[0xc]
8000e21c:	91 39       	st.w	r8[0xc],r9
8000e21e:	20 4d       	sub	sp,16
8000e220:	1a 98       	mov	r8,sp
8000e222:	ee c9 00 20 	sub	r9,r7,32
8000e226:	20 08       	sub	r8,0
8000e228:	20 09       	sub	r9,0
8000e22a:	72 0b       	ld.w	r11,r9[0x0]
8000e22c:	91 0b       	st.w	r8[0x0],r11
8000e22e:	72 1b       	ld.w	r11,r9[0x4]
8000e230:	91 1b       	st.w	r8[0x4],r11
8000e232:	72 2b       	ld.w	r11,r9[0x8]
8000e234:	91 2b       	st.w	r8[0x8],r11
8000e236:	72 39       	ld.w	r9,r9[0xc]
8000e238:	91 39       	st.w	r8[0xc],r9
8000e23a:	14 9c       	mov	r12,r10
8000e23c:	c7 0e       	rcall	8000df1c <quat_multi>
8000e23e:	2f 8d       	sub	sp,-32
8000e240:	ee c8 00 20 	sub	r8,r7,32
8000e244:	ee c9 00 30 	sub	r9,r7,48
8000e248:	20 08       	sub	r8,0
8000e24a:	20 09       	sub	r9,0
8000e24c:	72 0a       	ld.w	r10,r9[0x0]
8000e24e:	91 0a       	st.w	r8[0x0],r10
8000e250:	72 1a       	ld.w	r10,r9[0x4]
8000e252:	91 1a       	st.w	r8[0x4],r10
8000e254:	72 2a       	ld.w	r10,r9[0x8]
8000e256:	91 2a       	st.w	r8[0x8],r10
8000e258:	72 39       	ld.w	r9,r9[0xc]
8000e25a:	91 39       	st.w	r8[0xc],r9
	
	return qtmp;
8000e25c:	06 98       	mov	r8,r3
8000e25e:	ee c9 00 20 	sub	r9,r7,32
8000e262:	20 08       	sub	r8,0
8000e264:	20 09       	sub	r9,0
8000e266:	72 0a       	ld.w	r10,r9[0x0]
8000e268:	91 0a       	st.w	r8[0x0],r10
8000e26a:	72 1a       	ld.w	r10,r9[0x4]
8000e26c:	91 1a       	st.w	r8[0x4],r10
8000e26e:	72 2a       	ld.w	r10,r9[0x8]
8000e270:	91 2a       	st.w	r8[0x8],r10
8000e272:	72 39       	ld.w	r9,r9[0xc]
8000e274:	91 39       	st.w	r8[0xc],r9
}
8000e276:	06 9c       	mov	r12,r3
8000e278:	2f 4d       	sub	sp,-48
8000e27a:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
8000e27e:	00 00       	add	r0,r0
8000e280:	80 00       	ld.sh	r0,r0[0x0]
8000e282:	e0 16 eb cd 	andl	r6,0xebcd

8000e284 <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
8000e284:	eb cd 40 c0 	pushm	r6-r7,lr
8000e288:	1a 97       	mov	r7,sp
8000e28a:	20 6d       	sub	sp,24
8000e28c:	49 e6       	lddpc	r6,8000e304 <interpolate+0x80>
8000e28e:	1e 26       	rsub	r6,pc
8000e290:	ef 4c ff f8 	st.w	r7[-8],r12
8000e294:	ef 4b ff f4 	st.w	r7[-12],r11
8000e298:	ef 4a ff f0 	st.w	r7[-16],r10
8000e29c:	ef 49 ff ec 	st.w	r7[-20],r9
8000e2a0:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
8000e2a4:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000e2a8:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000e2ac:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
8000e2b0:	c0 41       	brne	8000e2b8 <interpolate+0x34>
	{
		return y1;
8000e2b2:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000e2b6:	c2 38       	rjmp	8000e2fc <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
8000e2b8:	ee f9 ff e8 	ld.w	r9,r7[-24]
8000e2bc:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000e2c0:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8000e2c4:	ee fa ff f8 	ld.w	r10,r7[-8]
8000e2c8:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000e2cc:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
8000e2d0:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8000e2d4:	ee fa ff f0 	ld.w	r10,r7[-16]
8000e2d8:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000e2dc:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8000e2e0:	12 9b       	mov	r11,r9
8000e2e2:	10 9c       	mov	r12,r8
8000e2e4:	f0 16 00 08 	mcall	r6[32]
8000e2e8:	18 98       	mov	r8,r12
8000e2ea:	10 99       	mov	r9,r8
8000e2ec:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000e2f0:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8000e2f4:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
8000e2f8:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
8000e2fc:	10 9c       	mov	r12,r8
8000e2fe:	2f ad       	sub	sp,-24
8000e300:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000e304:	80 00       	ld.sh	r0,r0[0x0]
8000e306:	e1 12 eb cd 	ld.uh	r2,r0[-5171]

8000e308 <init_pos_integration>:
void init_pos_gps(position_estimator_t *pos_est, gps_Data_type *gps);
void init_barometer_offset(position_estimator_t *pos_est, pressure_data *barometer);


void init_pos_integration(position_estimator_t *pos_est, pressure_data *barometer, gps_Data_type *gps)
{
8000e308:	eb cd 40 c0 	pushm	r6-r7,lr
8000e30c:	1a 97       	mov	r7,sp
8000e30e:	20 3d       	sub	sp,12
8000e310:	4a 66       	lddpc	r6,8000e3a8 <init_pos_integration+0xa0>
8000e312:	1e 26       	rsub	r6,pc
8000e314:	ef 4c ff fc 	st.w	r7[-4],r12
8000e318:	ef 4b ff f8 	st.w	r7[-8],r11
8000e31c:	ef 4a ff f4 	st.w	r7[-12],r10
	//centralData = get_central_data();
	pos_est->init_gps_position = false;
8000e320:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000e324:	30 08       	mov	r8,0
8000e326:	f3 68 00 28 	st.b	r9[40],r8
	pos_est->init_barometer=false;
8000e32a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000e32e:	30 08       	mov	r8,0
8000e330:	f3 68 00 29 	st.b	r9[41],r8
	pos_est->timeLastGpsMsg = 0;
8000e334:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e338:	30 09       	mov	r9,0
8000e33a:	91 89       	st.w	r8[0x20],r9
	pos_est->timeLastBarometerMsg=0;
8000e33c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e340:	30 09       	mov	r9,0
8000e342:	91 99       	st.w	r8[0x24],r9
	
	pos_est->kp_pos[0] = 2.0;
8000e344:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e348:	fc 19 40 00 	movh	r9,0x4000
8000e34c:	91 39       	st.w	r8[0xc],r9
	pos_est->kp_pos[1] = 2.0;
8000e34e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e352:	fc 19 40 00 	movh	r9,0x4000
8000e356:	91 49       	st.w	r8[0x10],r9
	pos_est->kp_pos[2] = 1.0;
8000e358:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e35c:	fc 19 3f 80 	movh	r9,0x3f80
8000e360:	91 59       	st.w	r8[0x14],r9
	
	pos_est->kp_vel[0] = 1.0;
8000e362:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e366:	fc 19 3f 80 	movh	r9,0x3f80
8000e36a:	91 09       	st.w	r8[0x0],r9
	pos_est->kp_vel[1] = 1.0;
8000e36c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e370:	fc 19 3f 80 	movh	r9,0x3f80
8000e374:	91 19       	st.w	r8[0x4],r9
	pos_est->kp_vel[2] = 0.5;
8000e376:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e37a:	fc 19 3f 00 	movh	r9,0x3f00
8000e37e:	91 29       	st.w	r8[0x8],r9
	
	pos_est->kp_alt=2.0;
8000e380:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e384:	fc 19 40 00 	movh	r9,0x4000
8000e388:	91 69       	st.w	r8[0x18],r9
	pos_est->kp_vel_baro=1.0;
8000e38a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e38e:	fc 19 3f 80 	movh	r9,0x3f80
8000e392:	91 79       	st.w	r8[0x1c],r9
	
	init_pos_gps(pos_est, gps);
8000e394:	ee fb ff f4 	ld.w	r11,r7[-12]
8000e398:	ee fc ff fc 	ld.w	r12,r7[-4]
8000e39c:	f0 16 00 db 	mcall	r6[876]
}
8000e3a0:	2f dd       	sub	sp,-12
8000e3a2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000e3a6:	00 00       	add	r0,r0
8000e3a8:	80 00       	ld.sh	r0,r0[0x0]
8000e3aa:	e1 96       	*unknown*
8000e3ac:	47 50       	lddsp	r0,sp[0x1d4]
8000e3ae:	53 20       	stdsp	sp[0xc8],r0
8000e3b0:	70 6f       	ld.w	pc,r8[0x18]
8000e3b2:	73 69       	ld.w	r9,r9[0x58]
8000e3b4:	74 69       	ld.w	r9,r10[0x18]
8000e3b6:	6f 6e       	ld.w	lr,r7[0x58]
8000e3b8:	20 69       	sub	r9,6
8000e3ba:	6e 69       	ld.w	r9,r7[0x18]
8000e3bc:	74 69       	ld.w	r9,r10[0x18]
8000e3be:	61 6c       	ld.w	r12,r0[0x58]
8000e3c0:	69 7a       	ld.w	r10,r4[0x5c]
8000e3c2:	65 64       	ld.w	r4,r2[0x58]
8000e3c4:	21 0a       	sub	r10,16
	...

8000e3c8 <init_pos_gps>:

void init_pos_gps(position_estimator_t *pos_est, gps_Data_type *gps)
{
8000e3c8:	eb cd 40 c0 	pushm	r6-r7,lr
8000e3cc:	1a 97       	mov	r7,sp
8000e3ce:	20 3d       	sub	sp,12
8000e3d0:	4d 16       	lddpc	r6,8000e514 <init_pos_gps+0x14c>
8000e3d2:	1e 26       	rsub	r6,pc
8000e3d4:	ef 4c ff f8 	st.w	r7[-8],r12
8000e3d8:	ef 4b ff f4 	st.w	r7[-12],r11
	int i;
	
	if (newValidGpsMsg(&pos_est->timeLastGpsMsg) && (!(pos_est->init_gps_position)))
8000e3dc:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000e3e0:	2e 08       	sub	r8,-32
8000e3e2:	10 9c       	mov	r12,r8
8000e3e4:	f0 16 00 8b 	mcall	r6[556]
8000e3e8:	18 98       	mov	r8,r12
8000e3ea:	58 08       	cp.w	r8,0
8000e3ec:	e0 80 00 91 	breq	8000e50e <init_pos_gps+0x146>
8000e3f0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000e3f4:	f1 38 00 28 	ld.ub	r8,r8[40]
8000e3f8:	ec 18 00 01 	eorl	r8,0x1
8000e3fc:	5c 58       	castu.b	r8
8000e3fe:	e0 80 00 88 	breq	8000e50e <init_pos_gps+0x146>
	{
		pos_est->init_gps_position = true;
8000e402:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000e406:	30 18       	mov	r8,1
8000e408:	f3 68 00 28 	st.b	r9[40],r8
		
		pos_est->localPosition.origin.longitude = gps->longitude;
8000e40c:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000e410:	f0 e8 00 08 	ld.d	r8,r8[8]
8000e414:	ee fa ff f8 	ld.w	r10,r7[-8]
8000e418:	f4 e9 00 70 	st.d	r10[112],r8
		pos_est->localPosition.origin.latitude = gps->latitude;
8000e41c:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000e420:	f0 e8 00 00 	ld.d	r8,r8[0]
8000e424:	ee fa ff f8 	ld.w	r10,r7[-8]
8000e428:	f4 e9 00 78 	st.d	r10[120],r8
		pos_est->localPosition.origin.altitude = gps->altitude;
8000e42c:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000e430:	70 49       	ld.w	r9,r8[0x10]
8000e432:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000e436:	f1 49 00 80 	st.w	r8[128],r9
		pos_est->localPosition.timestamp_ms=gps->timeLastMsg;
8000e43a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000e43e:	71 19       	ld.w	r9,r8[0x44]
8000e440:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000e444:	f1 49 00 8c 	st.w	r8[140],r9

		pos_est->lastGpsPos=pos_est->localPosition;
8000e448:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000e44c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000e450:	f2 cb ff 70 	sub	r11,r9,-144
8000e454:	f0 ca ff a0 	sub	r10,r8,-96
8000e458:	f6 c8 00 00 	sub	r8,r11,0
8000e45c:	f4 c9 00 00 	sub	r9,r10,0
8000e460:	72 0c       	ld.w	r12,r9[0x0]
8000e462:	91 0c       	st.w	r8[0x0],r12
8000e464:	72 1c       	ld.w	r12,r9[0x4]
8000e466:	91 1c       	st.w	r8[0x4],r12
8000e468:	72 2c       	ld.w	r12,r9[0x8]
8000e46a:	91 2c       	st.w	r8[0x8],r12
8000e46c:	72 39       	ld.w	r9,r9[0xc]
8000e46e:	91 39       	st.w	r8[0xc],r9
8000e470:	f6 c8 ff f0 	sub	r8,r11,-16
8000e474:	f4 c9 ff f0 	sub	r9,r10,-16
8000e478:	72 0c       	ld.w	r12,r9[0x0]
8000e47a:	91 0c       	st.w	r8[0x0],r12
8000e47c:	72 1c       	ld.w	r12,r9[0x4]
8000e47e:	91 1c       	st.w	r8[0x4],r12
8000e480:	72 2c       	ld.w	r12,r9[0x8]
8000e482:	91 2c       	st.w	r8[0x8],r12
8000e484:	72 39       	ld.w	r9,r9[0xc]
8000e486:	91 39       	st.w	r8[0xc],r9
8000e488:	f6 c8 ff e0 	sub	r8,r11,-32
8000e48c:	f4 c9 ff e0 	sub	r9,r10,-32
8000e490:	72 0a       	ld.w	r10,r9[0x0]
8000e492:	91 0a       	st.w	r8[0x0],r10
8000e494:	72 1a       	ld.w	r10,r9[0x4]
8000e496:	91 1a       	st.w	r8[0x4],r10
8000e498:	72 2a       	ld.w	r10,r9[0x8]
8000e49a:	91 2a       	st.w	r8[0x8],r10
8000e49c:	72 39       	ld.w	r9,r9[0xc]
8000e49e:	91 39       	st.w	r8[0xc],r9
		
		
		pos_est->last_alt=0;
8000e4a0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000e4a4:	30 09       	mov	r9,0
8000e4a6:	f1 49 00 50 	st.w	r8[80],r9
		for(i=0;i<3;i++)
8000e4aa:	30 08       	mov	r8,0
8000e4ac:	ef 48 ff fc 	st.w	r7[-4],r8
8000e4b0:	c2 68       	rjmp	8000e4fc <init_pos_gps+0x134>
		{
			pos_est->pos_correction[i]=0.0;
8000e4b2:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000e4b6:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000e4ba:	2e f9       	sub	r9,-17
8000e4bc:	30 0a       	mov	r10,0
8000e4be:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
			pos_est->last_vel[i]=0.0;
8000e4c2:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000e4c6:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000e4ca:	2e b9       	sub	r9,-21
8000e4cc:	30 0a       	mov	r10,0
8000e4ce:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
			pos_est->localPosition.pos[i] = 0.0;
8000e4d2:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000e4d6:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000e4da:	2e 89       	sub	r9,-24
8000e4dc:	30 0a       	mov	r10,0
8000e4de:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
			pos_est->vel[i]=0.0;
8000e4e2:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000e4e6:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000e4ea:	2f 29       	sub	r9,-14
8000e4ec:	30 0a       	mov	r10,0
8000e4ee:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10

		pos_est->lastGpsPos=pos_est->localPosition;
		
		
		pos_est->last_alt=0;
		for(i=0;i<3;i++)
8000e4f2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e4f6:	2f f8       	sub	r8,-1
8000e4f8:	ef 48 ff fc 	st.w	r7[-4],r8
8000e4fc:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e500:	58 28       	cp.w	r8,2
8000e502:	fe 9a ff d8 	brle	8000e4b2 <init_pos_gps+0xea>
			pos_est->last_vel[i]=0.0;
			pos_est->localPosition.pos[i] = 0.0;
			pos_est->vel[i]=0.0;
		}
		
		dbg_print("GPS position initialized!\n");
8000e506:	fe cc 01 5a 	sub	r12,pc,346
8000e50a:	f0 16 00 01 	mcall	r6[4]
	}
}
8000e50e:	2f dd       	sub	sp,-12
8000e510:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000e514:	80 00       	ld.sh	r0,r0[0x0]
8000e516:	e2 56 4f 66 	cp.w	r6,216934
8000e51a:	66 73       	ld.w	r3,r3[0x1c]
8000e51c:	65 74       	ld.w	r4,r2[0x5c]
8000e51e:	20 6f       	sub	pc,6
8000e520:	66 20       	ld.w	r0,r3[0x8]
8000e522:	74 68       	ld.w	r8,r10[0x18]
8000e524:	65 20       	ld.w	r0,r2[0x48]
8000e526:	62 61       	ld.w	r1,r1[0x18]
8000e528:	72 6f       	ld.w	pc,r9[0x18]
8000e52a:	6d 65       	ld.w	r5,r6[0x58]
8000e52c:	74 65       	ld.w	r5,r10[0x18]
8000e52e:	72 20       	ld.w	r0,r9[0x8]
8000e530:	73 65       	ld.w	r5,r9[0x58]
8000e532:	74 20       	ld.w	r0,r10[0x8]
8000e534:	74 6f       	ld.w	pc,r10[0x18]
8000e536:	20 74       	sub	r4,7
8000e538:	68 65       	ld.w	r5,r4[0x18]
8000e53a:	20 47       	sub	r7,4
8000e53c:	50 53       	stdsp	sp[0x14],r3
8000e53e:	20 61       	sub	r1,6
8000e540:	6c 74       	ld.w	r4,r6[0x1c]
8000e542:	69 74       	ld.w	r4,r4[0x5c]
8000e544:	75 64       	ld.w	r4,r10[0x58]
8000e546:	65 2c       	ld.w	r12,r2[0x48]
8000e548:	20 6f       	sub	pc,6
8000e54a:	66 66       	ld.w	r6,r3[0x18]
8000e54c:	73 65       	ld.w	r5,r9[0x58]
8000e54e:	74 20       	ld.w	r0,r10[0x8]
8000e550:	76 61       	ld.w	r1,r11[0x18]
8000e552:	6c 75       	ld.w	r5,r6[0x1c]
8000e554:	65 20       	ld.w	r0,r2[0x48]
8000e556:	6f 66       	ld.w	r6,r7[0x58]
8000e558:	3a 00       	mov	r0,-96
8000e55a:	00 00       	add	r0,r0
8000e55c:	20 3d       	sub	sp,12
8000e55e:	20 2d       	sub	sp,8
8000e560:	00 00       	add	r0,r0
8000e562:	00 00       	add	r0,r0
8000e564:	20 2d       	sub	sp,8
8000e566:	20 00       	sub	r0,0
8000e568:	20 2b       	sub	r11,2
8000e56a:	20 00       	sub	r0,0
8000e56c:	0a 00       	add	r0,r5

8000e56e <init_barometer_offset>:

void init_barometer_offset(position_estimator_t *pos_est, pressure_data *barometer)
{
8000e56e:	eb cd 40 c0 	pushm	r6-r7,lr
8000e572:	1a 97       	mov	r7,sp
8000e574:	20 3d       	sub	sp,12
8000e576:	4b 36       	lddpc	r6,8000e640 <init_barometer_offset+0xd2>
8000e578:	1e 26       	rsub	r6,pc
8000e57a:	ef 4c ff f8 	st.w	r7[-8],r12
8000e57e:	ef 4b ff f4 	st.w	r7[-12],r11
	bool boolNewBaro = newValidBarometer(&pos_est->timeLastBarometerMsg);
8000e582:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000e586:	2d c8       	sub	r8,-36
8000e588:	10 9c       	mov	r12,r8
8000e58a:	f0 16 00 dc 	mcall	r6[880]
8000e58e:	18 98       	mov	r8,r12
8000e590:	ef 68 ff ff 	st.b	r7[-1],r8

		
	//if ((centralData->init_gps_position)&&(boolNewBaro))
	if ((boolNewBaro))
8000e594:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000e598:	30 08       	mov	r8,0
8000e59a:	f0 09 18 00 	cp.b	r9,r8
8000e59e:	c4 e0       	breq	8000e63a <init_barometer_offset+0xcc>
	{
		
		barometer->altitude_offset = -(barometer->altitude - pos_est->localPosition.origin.altitude);
8000e5a0:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000e5a4:	70 79       	ld.w	r9,r8[0x1c]
8000e5a6:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000e5aa:	f0 f8 00 80 	ld.w	r8,r8[128]
8000e5ae:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8000e5b2:	10 99       	mov	r9,r8
8000e5b4:	ee 19 80 00 	eorh	r9,0x8000
8000e5b8:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000e5bc:	91 89       	st.w	r8[0x20],r9
		//barometer->altitude_offset = -barometer->altitude - pos_est->localPosition.pos[2] + pos_est->localPosition.origin.altitude;
		pos_est->init_barometer = true;
8000e5be:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000e5c2:	30 18       	mov	r8,1
8000e5c4:	f3 68 00 29 	st.b	r9[41],r8
		
		dbg_print("Offset of the barometer set to the GPS altitude, offset value of:");
8000e5c8:	fe cc 00 b0 	sub	r12,pc,176
8000e5cc:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(barometer->altitude_offset,10);
8000e5d0:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000e5d4:	70 88       	ld.w	r8,r8[0x20]
8000e5d6:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000e5da:	30 ab       	mov	r11,10
8000e5dc:	10 9c       	mov	r12,r8
8000e5de:	f0 16 00 04 	mcall	r6[16]
		dbg_print(" = -");
8000e5e2:	fe cc 00 86 	sub	r12,pc,134
8000e5e6:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(barometer->altitude,10);
8000e5ea:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000e5ee:	70 78       	ld.w	r8,r8[0x1c]
8000e5f0:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000e5f4:	30 ab       	mov	r11,10
8000e5f6:	10 9c       	mov	r12,r8
8000e5f8:	f0 16 00 04 	mcall	r6[16]
		dbg_print(" - ");
8000e5fc:	fe cc 00 98 	sub	r12,pc,152
8000e600:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(pos_est->localPosition.pos[2],10);
8000e604:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000e608:	71 a8       	ld.w	r8,r8[0x68]
8000e60a:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000e60e:	30 ab       	mov	r11,10
8000e610:	10 9c       	mov	r12,r8
8000e612:	f0 16 00 04 	mcall	r6[16]
		dbg_print(" + ");
8000e616:	fe cc 00 ae 	sub	r12,pc,174
8000e61a:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(pos_est->localPosition.origin.altitude,10);
8000e61e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000e622:	f0 f8 00 80 	ld.w	r8,r8[128]
8000e626:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000e62a:	30 ab       	mov	r11,10
8000e62c:	10 9c       	mov	r12,r8
8000e62e:	f0 16 00 04 	mcall	r6[16]
		dbg_print("\n");
8000e632:	fe cc 00 c6 	sub	r12,pc,198
8000e636:	f0 16 00 01 	mcall	r6[4]
	}
}
8000e63a:	2f dd       	sub	sp,-12
8000e63c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000e640:	80 00       	ld.sh	r0,r0[0x0]
8000e642:	e3 fc eb cd 	st.wqs	r1[0x734],r12

8000e644 <position_reset_home_altitude>:

void position_reset_home_altitude(position_estimator_t *pos_est, pressure_data *barometer, gps_Data_type *gps) {
8000e644:	eb cd 40 c0 	pushm	r6-r7,lr
8000e648:	1a 97       	mov	r7,sp
8000e64a:	20 4d       	sub	sp,16
8000e64c:	4f 06       	lddpc	r6,8000e80c <position_reset_home_altitude+0x1c8>
8000e64e:	1e 26       	rsub	r6,pc
8000e650:	ef 4c ff f8 	st.w	r7[-8],r12
8000e654:	ef 4b ff f4 	st.w	r7[-12],r11
8000e658:	ef 4a ff f0 	st.w	r7[-16],r10
		int i;
		// reset origin to position where quad is armed if we have GPS
		if (pos_est->init_gps_position) {
8000e65c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000e660:	f1 38 00 28 	ld.ub	r8,r8[40]
8000e664:	58 08       	cp.w	r8,0
8000e666:	c4 b0       	breq	8000e6fc <position_reset_home_altitude+0xb8>
			pos_est->localPosition.origin.longitude = gps->longitude;
8000e668:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000e66c:	f0 e8 00 08 	ld.d	r8,r8[8]
8000e670:	ee fa ff f8 	ld.w	r10,r7[-8]
8000e674:	f4 e9 00 70 	st.d	r10[112],r8
			pos_est->localPosition.origin.latitude = gps->latitude;
8000e678:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000e67c:	f0 e8 00 00 	ld.d	r8,r8[0]
8000e680:	ee fa ff f8 	ld.w	r10,r7[-8]
8000e684:	f4 e9 00 78 	st.d	r10[120],r8
			pos_est->localPosition.origin.altitude = gps->altitude;
8000e688:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000e68c:	70 49       	ld.w	r9,r8[0x10]
8000e68e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000e692:	f1 49 00 80 	st.w	r8[128],r9
			pos_est->localPosition.timestamp_ms=gps->timeLastMsg;
8000e696:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000e69a:	71 19       	ld.w	r9,r8[0x44]
8000e69c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000e6a0:	f1 49 00 8c 	st.w	r8[140],r9

			pos_est->lastGpsPos=pos_est->localPosition;
8000e6a4:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000e6a8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000e6ac:	f2 cb ff 70 	sub	r11,r9,-144
8000e6b0:	f0 ca ff a0 	sub	r10,r8,-96
8000e6b4:	f6 c8 00 00 	sub	r8,r11,0
8000e6b8:	f4 c9 00 00 	sub	r9,r10,0
8000e6bc:	72 0c       	ld.w	r12,r9[0x0]
8000e6be:	91 0c       	st.w	r8[0x0],r12
8000e6c0:	72 1c       	ld.w	r12,r9[0x4]
8000e6c2:	91 1c       	st.w	r8[0x4],r12
8000e6c4:	72 2c       	ld.w	r12,r9[0x8]
8000e6c6:	91 2c       	st.w	r8[0x8],r12
8000e6c8:	72 39       	ld.w	r9,r9[0xc]
8000e6ca:	91 39       	st.w	r8[0xc],r9
8000e6cc:	f6 c8 ff f0 	sub	r8,r11,-16
8000e6d0:	f4 c9 ff f0 	sub	r9,r10,-16
8000e6d4:	72 0c       	ld.w	r12,r9[0x0]
8000e6d6:	91 0c       	st.w	r8[0x0],r12
8000e6d8:	72 1c       	ld.w	r12,r9[0x4]
8000e6da:	91 1c       	st.w	r8[0x4],r12
8000e6dc:	72 2c       	ld.w	r12,r9[0x8]
8000e6de:	91 2c       	st.w	r8[0x8],r12
8000e6e0:	72 39       	ld.w	r9,r9[0xc]
8000e6e2:	91 39       	st.w	r8[0xc],r9
8000e6e4:	f6 c8 ff e0 	sub	r8,r11,-32
8000e6e8:	f4 c9 ff e0 	sub	r9,r10,-32
8000e6ec:	72 0a       	ld.w	r10,r9[0x0]
8000e6ee:	91 0a       	st.w	r8[0x0],r10
8000e6f0:	72 1a       	ld.w	r10,r9[0x4]
8000e6f2:	91 1a       	st.w	r8[0x4],r10
8000e6f4:	72 2a       	ld.w	r10,r9[0x8]
8000e6f6:	91 2a       	st.w	r8[0x8],r10
8000e6f8:	72 39       	ld.w	r9,r9[0xc]
8000e6fa:	91 39       	st.w	r8[0xc],r9
		}
		// reset barometer offset
		barometer->altitude_offset = -(barometer->altitude - barometer->altitude_offset - pos_est->localPosition.origin.altitude);
8000e6fc:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000e700:	70 79       	ld.w	r9,r8[0x1c]
8000e702:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000e706:	70 88       	ld.w	r8,r8[0x20]
8000e708:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8000e70c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000e710:	f0 f8 00 80 	ld.w	r8,r8[128]
8000e714:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8000e718:	10 99       	mov	r9,r8
8000e71a:	ee 19 80 00 	eorh	r9,0x8000
8000e71e:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000e722:	91 89       	st.w	r8[0x20],r9
		//barometer->altitude_offset = -barometer->altitude - pos_est->localPosition.pos[2] + pos_est->localPosition.origin.altitude;
		pos_est->init_barometer = true;
8000e724:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000e728:	30 18       	mov	r8,1
8000e72a:	f3 68 00 29 	st.b	r9[41],r8
		
		dbg_print("Offset of the barometer set to the GPS altitude, offset value of:");
8000e72e:	fe cc 02 16 	sub	r12,pc,534
8000e732:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(barometer->altitude_offset,10);
8000e736:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000e73a:	70 88       	ld.w	r8,r8[0x20]
8000e73c:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000e740:	30 ab       	mov	r11,10
8000e742:	10 9c       	mov	r12,r8
8000e744:	f0 16 00 04 	mcall	r6[16]
		dbg_print(" = -");
8000e748:	fe cc 01 ec 	sub	r12,pc,492
8000e74c:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(barometer->altitude,10);
8000e750:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000e754:	70 78       	ld.w	r8,r8[0x1c]
8000e756:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000e75a:	30 ab       	mov	r11,10
8000e75c:	10 9c       	mov	r12,r8
8000e75e:	f0 16 00 04 	mcall	r6[16]
		dbg_print(" - ");
8000e762:	fe cc 01 fe 	sub	r12,pc,510
8000e766:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(pos_est->localPosition.pos[2],10);
8000e76a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000e76e:	71 a8       	ld.w	r8,r8[0x68]
8000e770:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000e774:	30 ab       	mov	r11,10
8000e776:	10 9c       	mov	r12,r8
8000e778:	f0 16 00 04 	mcall	r6[16]
		dbg_print(" + ");
8000e77c:	fe cc 02 14 	sub	r12,pc,532
8000e780:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(pos_est->localPosition.origin.altitude,10);
8000e784:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000e788:	f0 f8 00 80 	ld.w	r8,r8[128]
8000e78c:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000e790:	30 ab       	mov	r11,10
8000e792:	10 9c       	mov	r12,r8
8000e794:	f0 16 00 04 	mcall	r6[16]
		dbg_print("\n");
8000e798:	fe cc 02 2c 	sub	r12,pc,556
8000e79c:	f0 16 00 01 	mcall	r6[4]

		// reset position estimator
		pos_est->last_alt=0;
8000e7a0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000e7a4:	30 09       	mov	r9,0
8000e7a6:	f1 49 00 50 	st.w	r8[80],r9
		for(i=0;i<3;i++)
8000e7aa:	30 08       	mov	r8,0
8000e7ac:	ef 48 ff fc 	st.w	r7[-4],r8
8000e7b0:	c2 68       	rjmp	8000e7fc <position_reset_home_altitude+0x1b8>
		{
			pos_est->pos_correction[i]=0.0;
8000e7b2:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000e7b6:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000e7ba:	2e f9       	sub	r9,-17
8000e7bc:	30 0a       	mov	r10,0
8000e7be:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
			pos_est->last_vel[i]=0.0;
8000e7c2:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000e7c6:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000e7ca:	2e b9       	sub	r9,-21
8000e7cc:	30 0a       	mov	r10,0
8000e7ce:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
			pos_est->localPosition.pos[i] = 0.0;
8000e7d2:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000e7d6:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000e7da:	2e 89       	sub	r9,-24
8000e7dc:	30 0a       	mov	r10,0
8000e7de:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
			pos_est->vel[i]=0.0;
8000e7e2:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000e7e6:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000e7ea:	2f 29       	sub	r9,-14
8000e7ec:	30 0a       	mov	r10,0
8000e7ee:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		dbg_print_num(pos_est->localPosition.origin.altitude,10);
		dbg_print("\n");

		// reset position estimator
		pos_est->last_alt=0;
		for(i=0;i<3;i++)
8000e7f2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e7f6:	2f f8       	sub	r8,-1
8000e7f8:	ef 48 ff fc 	st.w	r7[-4],r8
8000e7fc:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e800:	58 28       	cp.w	r8,2
8000e802:	fe 9a ff d8 	brle	8000e7b2 <position_reset_home_altitude+0x16e>
			pos_est->localPosition.pos[i] = 0.0;
			pos_est->vel[i]=0.0;
		}

	
}
8000e806:	2f cd       	sub	sp,-16
8000e808:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000e80c:	80 00       	ld.sh	r0,r0[0x0]
8000e80e:	e4 d2 eb cd 	satsub.w	r2,r2,-5171

8000e810 <position_integration>:

void position_integration(position_estimator_t *pos_est, Quat_Attitude_t *attitude, float dt)
{
8000e810:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
8000e814:	1a 97       	mov	r7,sp
8000e816:	21 fd       	sub	sp,124
8000e818:	fe f6 03 64 	ld.w	r6,pc[868]
8000e81c:	1e 26       	rsub	r6,pc
8000e81e:	ef 4c ff 9c 	st.w	r7[-100],r12
8000e822:	ef 4b ff 98 	st.w	r7[-104],r11
8000e826:	ef 4a ff 94 	st.w	r7[-108],r10
	int i;
	
	UQuat_t qvel_bf,qvel, qtmp1, qtmp2, qtmp3;
	float tmp[3];
	qvel.s=0;
8000e82a:	30 08       	mov	r8,0
8000e82c:	ef 48 ff dc 	st.w	r7[-36],r8
	for (i=0; i<3; i++) qvel.v[i]=pos_est->vel[i];
8000e830:	30 08       	mov	r8,0
8000e832:	ef 48 ff fc 	st.w	r7[-4],r8
8000e836:	c1 58       	rjmp	8000e860 <position_integration+0x50>
8000e838:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e83c:	ee fa ff fc 	ld.w	r10,r7[-4]
8000e840:	ee f9 ff 9c 	ld.w	r9,r7[-100]
8000e844:	2f 2a       	sub	r10,-14
8000e846:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
8000e84a:	2f f8       	sub	r8,-1
8000e84c:	a3 68       	lsl	r8,0x2
8000e84e:	ee 08 00 08 	add	r8,r7,r8
8000e852:	f1 49 ff dc 	st.w	r8[-36],r9
8000e856:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e85a:	2f f8       	sub	r8,-1
8000e85c:	ef 48 ff fc 	st.w	r7[-4],r8
8000e860:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e864:	58 28       	cp.w	r8,2
8000e866:	fe 9a ff e9 	brle	8000e838 <position_integration+0x28>
	qvel_bf=quat_global_to_local(attitude->qe, qvel);
8000e86a:	ee ca 00 7c 	sub	r10,r7,124
8000e86e:	20 4d       	sub	sp,16
8000e870:	1a 98       	mov	r8,sp
8000e872:	ee c9 00 24 	sub	r9,r7,36
8000e876:	20 08       	sub	r8,0
8000e878:	20 09       	sub	r9,0
8000e87a:	72 0b       	ld.w	r11,r9[0x0]
8000e87c:	91 0b       	st.w	r8[0x0],r11
8000e87e:	72 1b       	ld.w	r11,r9[0x4]
8000e880:	91 1b       	st.w	r8[0x4],r11
8000e882:	72 2b       	ld.w	r11,r9[0x8]
8000e884:	91 2b       	st.w	r8[0x8],r11
8000e886:	72 39       	ld.w	r9,r9[0xc]
8000e888:	91 39       	st.w	r8[0xc],r9
8000e88a:	ee f9 ff 98 	ld.w	r9,r7[-104]
8000e88e:	20 4d       	sub	sp,16
8000e890:	1a 98       	mov	r8,sp
8000e892:	20 08       	sub	r8,0
8000e894:	20 09       	sub	r9,0
8000e896:	72 0b       	ld.w	r11,r9[0x0]
8000e898:	91 0b       	st.w	r8[0x0],r11
8000e89a:	72 1b       	ld.w	r11,r9[0x4]
8000e89c:	91 1b       	st.w	r8[0x4],r11
8000e89e:	72 2b       	ld.w	r11,r9[0x8]
8000e8a0:	91 2b       	st.w	r8[0x8],r11
8000e8a2:	72 39       	ld.w	r9,r9[0xc]
8000e8a4:	91 39       	st.w	r8[0xc],r9
8000e8a6:	14 9c       	mov	r12,r10
8000e8a8:	fe b0 fb f2 	rcall	8000e08c <quat_global_to_local>
8000e8ac:	2f 8d       	sub	sp,-32
8000e8ae:	ee c8 00 14 	sub	r8,r7,20
8000e8b2:	ee c9 00 7c 	sub	r9,r7,124
8000e8b6:	20 08       	sub	r8,0
8000e8b8:	20 09       	sub	r9,0
8000e8ba:	72 0a       	ld.w	r10,r9[0x0]
8000e8bc:	91 0a       	st.w	r8[0x0],r10
8000e8be:	72 1a       	ld.w	r10,r9[0x4]
8000e8c0:	91 1a       	st.w	r8[0x4],r10
8000e8c2:	72 2a       	ld.w	r10,r9[0x8]
8000e8c4:	91 2a       	st.w	r8[0x8],r10
8000e8c6:	72 39       	ld.w	r9,r9[0xc]
8000e8c8:	91 39       	st.w	r8[0xc],r9
	for (i=0; i<3; i++) {
8000e8ca:	30 08       	mov	r8,0
8000e8cc:	ef 48 ff fc 	st.w	r7[-4],r8
8000e8d0:	c8 c8       	rjmp	8000e9e8 <position_integration+0x1d8>
		pos_est->vel_bf[i]=qvel_bf.v[i];
8000e8d2:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000e8d6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e8da:	2f f8       	sub	r8,-1
8000e8dc:	a3 68       	lsl	r8,0x2
8000e8de:	ee 08 00 08 	add	r8,r7,r8
8000e8e2:	f0 fa ff ec 	ld.w	r10,r8[-20]
8000e8e6:	ee f8 ff 9c 	ld.w	r8,r7[-100]
8000e8ea:	2f 59       	sub	r9,-11
8000e8ec:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		// clean acceleration estimate without gravity:
		attitude->acc_bf[i]=GRAVITY * (attitude->a[i] - attitude->up_vec.v[i]) ;
8000e8f0:	ee f5 ff fc 	ld.w	r5,r7[-4]
8000e8f4:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000e8f8:	ee f8 ff 98 	ld.w	r8,r7[-104]
8000e8fc:	2d f9       	sub	r9,-33
8000e8fe:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
8000e902:	ee fa ff fc 	ld.w	r10,r7[-4]
8000e906:	ee f8 ff 98 	ld.w	r8,r7[-104]
8000e90a:	2f ba       	sub	r10,-5
8000e90c:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
8000e910:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8000e914:	10 9c       	mov	r12,r8
8000e916:	f0 16 00 02 	mcall	r6[8]
8000e91a:	e0 68 85 1f 	mov	r8,34079
8000e91e:	ea 18 51 eb 	orh	r8,0x51eb
8000e922:	e0 69 9e b8 	mov	r9,40632
8000e926:	ea 19 40 23 	orh	r9,0x4023
8000e92a:	f0 16 00 03 	mcall	r6[12]
8000e92e:	14 98       	mov	r8,r10
8000e930:	16 99       	mov	r9,r11
8000e932:	10 9a       	mov	r10,r8
8000e934:	12 9b       	mov	r11,r9
8000e936:	f0 16 00 09 	mcall	r6[36]
8000e93a:	18 9a       	mov	r10,r12
8000e93c:	ee f8 ff 98 	ld.w	r8,r7[-104]
8000e940:	ea c9 ff d0 	sub	r9,r5,-48
8000e944:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		pos_est->vel_bf[i]=pos_est->vel_bf[i]*(1.0-(VEL_DECAY*dt)) + attitude->acc_bf[i]  * dt;
8000e948:	ee f5 ff fc 	ld.w	r5,r7[-4]
8000e94c:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000e950:	ee f8 ff 9c 	ld.w	r8,r7[-100]
8000e954:	2f 59       	sub	r9,-11
8000e956:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8000e95a:	10 9c       	mov	r12,r8
8000e95c:	f0 16 00 02 	mcall	r6[8]
8000e960:	14 92       	mov	r2,r10
8000e962:	16 93       	mov	r3,r11
8000e964:	ee fc ff 94 	ld.w	r12,r7[-108]
8000e968:	f0 16 00 02 	mcall	r6[8]
8000e96c:	30 08       	mov	r8,0
8000e96e:	fc 19 80 00 	movh	r9,0x8000
8000e972:	f0 16 00 03 	mcall	r6[12]
8000e976:	14 98       	mov	r8,r10
8000e978:	16 99       	mov	r9,r11
8000e97a:	10 9a       	mov	r10,r8
8000e97c:	12 9b       	mov	r11,r9
8000e97e:	30 08       	mov	r8,0
8000e980:	fc 19 3f f0 	movh	r9,0x3ff0
8000e984:	f0 16 00 05 	mcall	r6[20]
8000e988:	14 98       	mov	r8,r10
8000e98a:	16 99       	mov	r9,r11
8000e98c:	04 9a       	mov	r10,r2
8000e98e:	06 9b       	mov	r11,r3
8000e990:	f0 16 00 03 	mcall	r6[12]
8000e994:	14 98       	mov	r8,r10
8000e996:	16 99       	mov	r9,r11
8000e998:	10 92       	mov	r2,r8
8000e99a:	12 93       	mov	r3,r9
8000e99c:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000e9a0:	ee f8 ff 98 	ld.w	r8,r7[-104]
8000e9a4:	2d 09       	sub	r9,-48
8000e9a6:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
8000e9aa:	ee f8 ff 94 	ld.w	r8,r7[-108]
8000e9ae:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8000e9b2:	10 9c       	mov	r12,r8
8000e9b4:	f0 16 00 02 	mcall	r6[8]
8000e9b8:	14 98       	mov	r8,r10
8000e9ba:	16 99       	mov	r9,r11
8000e9bc:	04 9a       	mov	r10,r2
8000e9be:	06 9b       	mov	r11,r3
8000e9c0:	f0 16 00 05 	mcall	r6[20]
8000e9c4:	14 98       	mov	r8,r10
8000e9c6:	16 99       	mov	r9,r11
8000e9c8:	10 9a       	mov	r10,r8
8000e9ca:	12 9b       	mov	r11,r9
8000e9cc:	f0 16 00 09 	mcall	r6[36]
8000e9d0:	18 9a       	mov	r10,r12
8000e9d2:	ee f8 ff 9c 	ld.w	r8,r7[-100]
8000e9d6:	ea c9 ff f5 	sub	r9,r5,-11
8000e9da:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	UQuat_t qvel_bf,qvel, qtmp1, qtmp2, qtmp3;
	float tmp[3];
	qvel.s=0;
	for (i=0; i<3; i++) qvel.v[i]=pos_est->vel[i];
	qvel_bf=quat_global_to_local(attitude->qe, qvel);
	for (i=0; i<3; i++) {
8000e9de:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e9e2:	2f f8       	sub	r8,-1
8000e9e4:	ef 48 ff fc 	st.w	r7[-4],r8
8000e9e8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e9ec:	58 28       	cp.w	r8,2
8000e9ee:	fe 9a ff 72 	brle	8000e8d2 <position_integration+0xc2>
		pos_est->vel_bf[i]=pos_est->vel_bf[i]*(1.0-(VEL_DECAY*dt)) + attitude->acc_bf[i]  * dt;
	}
	
	// calculate velocity in global frame
	// vel = qe *vel_bf * qe-1
	qvel_bf.s= 0.0; qvel_bf.v[0]=pos_est->vel_bf[0]; qvel_bf.v[1]=pos_est->vel_bf[1]; qvel_bf.v[2]=pos_est->vel_bf[2];
8000e9f2:	30 08       	mov	r8,0
8000e9f4:	ef 48 ff ec 	st.w	r7[-20],r8
8000e9f8:	ee f8 ff 9c 	ld.w	r8,r7[-100]
8000e9fc:	70 b8       	ld.w	r8,r8[0x2c]
8000e9fe:	ef 48 ff f0 	st.w	r7[-16],r8
8000ea02:	ee f8 ff 9c 	ld.w	r8,r7[-100]
8000ea06:	70 c8       	ld.w	r8,r8[0x30]
8000ea08:	ef 48 ff f4 	st.w	r7[-12],r8
8000ea0c:	ee f8 ff 9c 	ld.w	r8,r7[-100]
8000ea10:	70 d8       	ld.w	r8,r8[0x34]
8000ea12:	ef 48 ff f8 	st.w	r7[-8],r8
	qvel = quat_local_to_global(attitude->qe, qvel_bf);
8000ea16:	ee ca 00 7c 	sub	r10,r7,124
8000ea1a:	20 4d       	sub	sp,16
8000ea1c:	1a 98       	mov	r8,sp
8000ea1e:	ee c9 00 14 	sub	r9,r7,20
8000ea22:	20 08       	sub	r8,0
8000ea24:	20 09       	sub	r9,0
8000ea26:	72 0b       	ld.w	r11,r9[0x0]
8000ea28:	91 0b       	st.w	r8[0x0],r11
8000ea2a:	72 1b       	ld.w	r11,r9[0x4]
8000ea2c:	91 1b       	st.w	r8[0x4],r11
8000ea2e:	72 2b       	ld.w	r11,r9[0x8]
8000ea30:	91 2b       	st.w	r8[0x8],r11
8000ea32:	72 39       	ld.w	r9,r9[0xc]
8000ea34:	91 39       	st.w	r8[0xc],r9
8000ea36:	ee f9 ff 98 	ld.w	r9,r7[-104]
8000ea3a:	20 4d       	sub	sp,16
8000ea3c:	1a 98       	mov	r8,sp
8000ea3e:	20 08       	sub	r8,0
8000ea40:	20 09       	sub	r9,0
8000ea42:	72 0b       	ld.w	r11,r9[0x0]
8000ea44:	91 0b       	st.w	r8[0x0],r11
8000ea46:	72 1b       	ld.w	r11,r9[0x4]
8000ea48:	91 1b       	st.w	r8[0x4],r11
8000ea4a:	72 2b       	ld.w	r11,r9[0x8]
8000ea4c:	91 2b       	st.w	r8[0x8],r11
8000ea4e:	72 39       	ld.w	r9,r9[0xc]
8000ea50:	91 39       	st.w	r8[0xc],r9
8000ea52:	14 9c       	mov	r12,r10
8000ea54:	fe b0 fb 9a 	rcall	8000e188 <quat_local_to_global>
8000ea58:	2f 8d       	sub	sp,-32
8000ea5a:	ee c8 00 24 	sub	r8,r7,36
8000ea5e:	ee c9 00 7c 	sub	r9,r7,124
8000ea62:	20 08       	sub	r8,0
8000ea64:	20 09       	sub	r9,0
8000ea66:	72 0a       	ld.w	r10,r9[0x0]
8000ea68:	91 0a       	st.w	r8[0x0],r10
8000ea6a:	72 1a       	ld.w	r10,r9[0x4]
8000ea6c:	91 1a       	st.w	r8[0x4],r10
8000ea6e:	72 2a       	ld.w	r10,r9[0x8]
8000ea70:	91 2a       	st.w	r8[0x8],r10
8000ea72:	72 39       	ld.w	r9,r9[0xc]
8000ea74:	91 39       	st.w	r8[0xc],r9
	pos_est->vel[0]=qvel.v[0]; pos_est->vel[1]=qvel.v[1]; pos_est->vel[2]=qvel.v[2];
8000ea76:	ee f9 ff e0 	ld.w	r9,r7[-32]
8000ea7a:	ee f8 ff 9c 	ld.w	r8,r7[-100]
8000ea7e:	91 e9       	st.w	r8[0x38],r9
8000ea80:	ee f9 ff e4 	ld.w	r9,r7[-28]
8000ea84:	ee f8 ff 9c 	ld.w	r8,r7[-100]
8000ea88:	91 f9       	st.w	r8[0x3c],r9
8000ea8a:	ee f9 ff e8 	ld.w	r9,r7[-24]
8000ea8e:	ee f8 ff 9c 	ld.w	r8,r7[-100]
8000ea92:	f1 49 00 40 	st.w	r8[64],r9
	//QMUL(attitude->qe, qtmp1, qtmp2);
	//QI(attitude->qe, qtmp1);
	//QMUL(qtmp2, qtmp1, qtmp3);
	//attitude->vel[0]=qtmp3.v[0]; attitude->vel[1]=qtmp3.v[1]; attitude->vel[2]=qtmp3.v[2];
	
	for (i=0; i<3; i++) {
8000ea96:	30 08       	mov	r8,0
8000ea98:	ef 48 ff fc 	st.w	r7[-4],r8
8000ea9c:	c6 78       	rjmp	8000eb6a <position_integration+0x35a>
		// clean position estimate without gravity:
		//prev_pos[i]=attitude->localPosition.pos[i];
		pos_est->localPosition.pos[i] =pos_est->localPosition.pos[i]*(1.0-(POS_DECAY*dt)) + pos_est->vel[i] *dt;
8000ea9e:	ee f5 ff fc 	ld.w	r5,r7[-4]
8000eaa2:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000eaa6:	ee f8 ff 9c 	ld.w	r8,r7[-100]
8000eaaa:	2e 89       	sub	r9,-24
8000eaac:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8000eab0:	10 9c       	mov	r12,r8
8000eab2:	f0 16 00 02 	mcall	r6[8]
8000eab6:	14 92       	mov	r2,r10
8000eab8:	16 93       	mov	r3,r11
8000eaba:	ee fc ff 94 	ld.w	r12,r7[-108]
8000eabe:	f0 16 00 02 	mcall	r6[8]
8000eac2:	30 08       	mov	r8,0
8000eac4:	fc 19 80 00 	movh	r9,0x8000
8000eac8:	f0 16 00 03 	mcall	r6[12]
8000eacc:	14 98       	mov	r8,r10
8000eace:	16 99       	mov	r9,r11
8000ead0:	10 9a       	mov	r10,r8
8000ead2:	12 9b       	mov	r11,r9
8000ead4:	30 08       	mov	r8,0
8000ead6:	fc 19 3f f0 	movh	r9,0x3ff0
8000eada:	f0 16 00 05 	mcall	r6[20]
8000eade:	14 98       	mov	r8,r10
8000eae0:	16 99       	mov	r9,r11
8000eae2:	04 9a       	mov	r10,r2
8000eae4:	06 9b       	mov	r11,r3
8000eae6:	f0 16 00 03 	mcall	r6[12]
8000eaea:	14 98       	mov	r8,r10
8000eaec:	16 99       	mov	r9,r11
8000eaee:	10 92       	mov	r2,r8
8000eaf0:	12 93       	mov	r3,r9
8000eaf2:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000eaf6:	ee f8 ff 9c 	ld.w	r8,r7[-100]
8000eafa:	2f 29       	sub	r9,-14
8000eafc:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
8000eb00:	ee f8 ff 94 	ld.w	r8,r7[-108]
8000eb04:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8000eb08:	10 9c       	mov	r12,r8
8000eb0a:	f0 16 00 02 	mcall	r6[8]
8000eb0e:	14 98       	mov	r8,r10
8000eb10:	16 99       	mov	r9,r11
8000eb12:	04 9a       	mov	r10,r2
8000eb14:	06 9b       	mov	r11,r3
8000eb16:	f0 16 00 05 	mcall	r6[20]
8000eb1a:	14 98       	mov	r8,r10
8000eb1c:	16 99       	mov	r9,r11
8000eb1e:	10 9a       	mov	r10,r8
8000eb20:	12 9b       	mov	r11,r9
8000eb22:	f0 16 00 09 	mcall	r6[36]
8000eb26:	18 9a       	mov	r10,r12
8000eb28:	ee f8 ff 9c 	ld.w	r8,r7[-100]
8000eb2c:	ea c9 ff e8 	sub	r9,r5,-24
8000eb30:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		pos_est->localPosition.heading=get_yaw(attitude->qe);
8000eb34:	ee f9 ff 98 	ld.w	r9,r7[-104]
8000eb38:	20 4d       	sub	sp,16
8000eb3a:	1a 98       	mov	r8,sp
8000eb3c:	20 08       	sub	r8,0
8000eb3e:	20 09       	sub	r9,0
8000eb40:	72 0a       	ld.w	r10,r9[0x0]
8000eb42:	91 0a       	st.w	r8[0x0],r10
8000eb44:	72 1a       	ld.w	r10,r9[0x4]
8000eb46:	91 1a       	st.w	r8[0x4],r10
8000eb48:	72 2a       	ld.w	r10,r9[0x8]
8000eb4a:	91 2a       	st.w	r8[0x8],r10
8000eb4c:	72 39       	ld.w	r9,r9[0xc]
8000eb4e:	91 39       	st.w	r8[0xc],r9
8000eb50:	f0 16 01 09 	mcall	r6[1060]
8000eb54:	2f cd       	sub	sp,-16
8000eb56:	18 99       	mov	r9,r12
8000eb58:	ee f8 ff 9c 	ld.w	r8,r7[-100]
8000eb5c:	f1 49 00 6c 	st.w	r8[108],r9
	//QMUL(attitude->qe, qtmp1, qtmp2);
	//QI(attitude->qe, qtmp1);
	//QMUL(qtmp2, qtmp1, qtmp3);
	//attitude->vel[0]=qtmp3.v[0]; attitude->vel[1]=qtmp3.v[1]; attitude->vel[2]=qtmp3.v[2];
	
	for (i=0; i<3; i++) {
8000eb60:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000eb64:	2f f8       	sub	r8,-1
8000eb66:	ef 48 ff fc 	st.w	r7[-4],r8
8000eb6a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000eb6e:	58 28       	cp.w	r8,2
8000eb70:	fe 9a ff 97 	brle	8000ea9e <position_integration+0x28e>
		//prev_pos[i]=attitude->localPosition.pos[i];
		pos_est->localPosition.pos[i] =pos_est->localPosition.pos[i]*(1.0-(POS_DECAY*dt)) + pos_est->vel[i] *dt;
		pos_est->localPosition.heading=get_yaw(attitude->qe);
	}

}
8000eb74:	2e 1d       	sub	sp,-124
8000eb76:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
8000eb7a:	00 00       	add	r0,r0
8000eb7c:	80 00       	ld.sh	r0,r0[0x0]
8000eb7e:	e6 a0 47 50 	rcall	800d7a1e <_data_lma+0xa59d6>
8000eb82:	53 20       	stdsp	sp[0xc8],r0
8000eb84:	64 74       	ld.w	r4,r2[0x1c]
8000eb86:	20 69       	sub	r9,6
8000eb88:	73 20       	ld.w	r0,r9[0x48]
8000eb8a:	74 6f       	ld.w	pc,r10[0x18]
8000eb8c:	6f 20       	ld.w	r0,r7[0x48]
8000eb8e:	73 6d       	ld.w	sp,r9[0x58]
8000eb90:	61 6c       	ld.w	r12,r0[0x58]
8000eb92:	6c 21       	ld.w	r1,r6[0x8]
	...

8000eb96 <position_correction>:
	
void position_correction(position_estimator_t *pos_est, pressure_data *barometer, gps_Data_type *gps, float dt)
{
8000eb96:	eb cd 40 e0 	pushm	r5-r7,lr
8000eb9a:	1a 97       	mov	r7,sp
8000eb9c:	fa cd 00 e4 	sub	sp,sp,228
8000eba0:	fe f6 06 7c 	ld.w	r6,pc[1660]
8000eba4:	1e 26       	rsub	r6,pc
8000eba6:	ef 4c ff 58 	st.w	r7[-168],r12
8000ebaa:	ef 4b ff 54 	st.w	r7[-172],r11
8000ebae:	ef 4a ff 50 	st.w	r7[-176],r10
8000ebb2:	ef 49 ff 4c 	st.w	r7[-180],r9
	global_position_t global_gps_position;
	local_coordinates_t local_coordinates;
	
	UQuat_t bias_correction ={.s=0, .v={0.0, 0.0, 1.0}};
8000ebb6:	30 08       	mov	r8,0
8000ebb8:	ef 48 ff 84 	st.w	r7[-124],r8
8000ebbc:	30 08       	mov	r8,0
8000ebbe:	ef 48 ff 88 	st.w	r7[-120],r8
8000ebc2:	30 08       	mov	r8,0
8000ebc4:	ef 48 ff 8c 	st.w	r7[-116],r8
8000ebc8:	fc 18 3f 80 	movh	r8,0x3f80
8000ebcc:	ef 48 ff 90 	st.w	r7[-112],r8
	UQuat_t vel_correction ={.s=0, .v={0.0, 0.0, 1.0}};
8000ebd0:	30 08       	mov	r8,0
8000ebd2:	ef 48 ff 74 	st.w	r7[-140],r8
8000ebd6:	30 08       	mov	r8,0
8000ebd8:	ef 48 ff 78 	st.w	r7[-136],r8
8000ebdc:	30 08       	mov	r8,0
8000ebde:	ef 48 ff 7c 	st.w	r7[-132],r8
8000ebe2:	fc 18 3f 80 	movh	r8,0x3f80
8000ebe6:	ef 48 ff 80 	st.w	r7[-128],r8
	float pos_error[3]= {0.0,0.0,0.0};
8000ebea:	30 08       	mov	r8,0
8000ebec:	ef 48 ff 68 	st.w	r7[-152],r8
8000ebf0:	30 08       	mov	r8,0
8000ebf2:	ef 48 ff 6c 	st.w	r7[-148],r8
8000ebf6:	30 08       	mov	r8,0
8000ebf8:	ef 48 ff 70 	st.w	r7[-144],r8
	float baro_alt_error=0.0;
8000ebfc:	30 08       	mov	r8,0
8000ebfe:	ef 48 ff e0 	st.w	r7[-32],r8
	float baro_vel_error=0.0;
8000ec02:	30 08       	mov	r8,0
8000ec04:	ef 48 ff e4 	st.w	r7[-28],r8
	float baro_gain=0.0;
8000ec08:	30 08       	mov	r8,0
8000ec0a:	ef 48 ff e8 	st.w	r7[-24],r8
	float gps_gain=0.0;
8000ec0e:	30 08       	mov	r8,0
8000ec10:	ef 48 ff ec 	st.w	r7[-20],r8
	float gps_dt=0.0;
8000ec14:	30 08       	mov	r8,0
8000ec16:	ef 48 ff f0 	st.w	r7[-16],r8
	float vel_error[3]={0.0,0.0,0.0};
8000ec1a:	30 08       	mov	r8,0
8000ec1c:	ef 48 ff 5c 	st.w	r7[-164],r8
8000ec20:	30 08       	mov	r8,0
8000ec22:	ef 48 ff 60 	st.w	r7[-160],r8
8000ec26:	30 08       	mov	r8,0
8000ec28:	ef 48 ff 64 	st.w	r7[-156],r8
	uint32_t tinterGps, tinterBaro;
	int i;
	//if ((centralData->simulation_mode == 0))
	{
		if (pos_est->init_barometer)
8000ec2c:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000ec30:	f1 38 00 29 	ld.ub	r8,r8[41]
8000ec34:	58 08       	cp.w	r8,0
8000ec36:	c6 40       	breq	8000ecfe <position_correction+0x168>
		{
			// altimeter correction
			if (newValidBarometer(&pos_est->timeLastBarometerMsg))
8000ec38:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000ec3c:	2d c8       	sub	r8,-36
8000ec3e:	10 9c       	mov	r12,r8
8000ec40:	f0 16 00 dc 	mcall	r6[880]
8000ec44:	18 98       	mov	r8,r12
8000ec46:	58 08       	cp.w	r8,0
8000ec48:	c2 70       	breq	8000ec96 <position_correction+0x100>
			{
				//alt_error = -(barometer->altitude + barometer->altitude_offset) - pos_est->localPosition.pos[2]+pos_est->localPosition.origin.altitude;
				pos_est->last_alt= -(barometer->altitude ) + pos_est->localPosition.origin.altitude;
8000ec4a:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000ec4e:	f0 f9 00 80 	ld.w	r9,r8[128]
8000ec52:	ee f8 ff 54 	ld.w	r8,r7[-172]
8000ec56:	70 78       	ld.w	r8,r8[0x1c]
8000ec58:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8000ec5c:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000ec60:	f1 49 00 50 	st.w	r8[80],r9
				baro_alt_error = -(barometer->altitude ) - pos_est->localPosition.pos[2]+pos_est->localPosition.origin.altitude;
8000ec64:	ee f8 ff 54 	ld.w	r8,r7[-172]
8000ec68:	70 78       	ld.w	r8,r8[0x1c]
8000ec6a:	10 99       	mov	r9,r8
8000ec6c:	ee 19 80 00 	eorh	r9,0x8000
8000ec70:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000ec74:	71 a8       	ld.w	r8,r8[0x68]
8000ec76:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8000ec7a:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000ec7e:	f0 f8 00 80 	ld.w	r8,r8[128]
8000ec82:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8000ec86:	ef 48 ff e0 	st.w	r7[-32],r8
				dbg_print(") - ");
				dbg_print_num(pos_est->localPosition.pos[2],10);
				dbg_print(" + ");
				dbg_print_num(pos_est->localPosition.origin.altitude,10);
				dbg_print("\n");*/
				pos_est->timeLastBarometerMsg=barometer->last_update;
8000ec8a:	ee f8 ff 54 	ld.w	r8,r7[-172]
8000ec8e:	70 a9       	ld.w	r9,r8[0x28]
8000ec90:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000ec94:	91 99       	st.w	r8[0x24],r9
			}
			tinterBaro = (get_micros()-barometer->last_update)/1000.0;
8000ec96:	f0 16 00 27 	mcall	r6[156]
8000ec9a:	18 99       	mov	r9,r12
8000ec9c:	ee f8 ff 54 	ld.w	r8,r7[-172]
8000eca0:	70 a8       	ld.w	r8,r8[0x28]
8000eca2:	f2 08 01 08 	sub	r8,r9,r8
8000eca6:	10 9c       	mov	r12,r8
8000eca8:	f0 16 00 4d 	mcall	r6[308]
8000ecac:	30 08       	mov	r8,0
8000ecae:	e0 69 40 00 	mov	r9,16384
8000ecb2:	ea 19 40 8f 	orh	r9,0x408f
8000ecb6:	f0 16 00 0c 	mcall	r6[48]
8000ecba:	14 98       	mov	r8,r10
8000ecbc:	16 99       	mov	r9,r11
8000ecbe:	10 9a       	mov	r10,r8
8000ecc0:	12 9b       	mov	r11,r9
8000ecc2:	f0 16 00 74 	mcall	r6[464]
8000ecc6:	18 98       	mov	r8,r12
8000ecc8:	ef 48 ff f8 	st.w	r7[-8],r8
			baro_gain=1.0;//fmax(1.0-tinterBaro/1000.0, 0.0);
8000eccc:	fc 18 3f 80 	movh	r8,0x3f80
8000ecd0:	ef 48 ff e8 	st.w	r7[-24],r8
			
			//pos_est->localPosition.pos[2] += kp_alt/((float)(tinterBaro/2.5 + 1.0)) * alt_error;
			baro_alt_error=pos_est->last_alt  - pos_est->localPosition.pos[2];
8000ecd4:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000ecd8:	71 49       	ld.w	r9,r8[0x50]
8000ecda:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000ecde:	71 a8       	ld.w	r8,r8[0x68]
8000ece0:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8000ece4:	ef 48 ff e0 	st.w	r7[-32],r8
			baro_vel_error=barometer->vario_vz - pos_est->vel[2];
8000ece8:	ee f8 ff 54 	ld.w	r8,r7[-172]
8000ecec:	70 99       	ld.w	r9,r8[0x24]
8000ecee:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000ecf2:	71 08       	ld.w	r8,r8[0x40]
8000ecf4:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8000ecf8:	ef 48 ff e4 	st.w	r7[-28],r8
8000ecfc:	c0 78       	rjmp	8000ed0a <position_correction+0x174>
			//vel_error[2]=0.1*pos_error[2];
			//pos_est->vel[2] += kp_alt_v * vel_error[2];
				
		}else{
			init_barometer_offset(pos_est, barometer);
8000ecfe:	ee fb ff 54 	ld.w	r11,r7[-172]
8000ed02:	ee fc ff 58 	ld.w	r12,r7[-168]
8000ed06:	f0 16 02 03 	mcall	r6[2060]
		}
	
		if (pos_est->init_gps_position)
8000ed0a:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000ed0e:	f1 38 00 28 	ld.ub	r8,r8[40]
8000ed12:	58 08       	cp.w	r8,0
8000ed14:	e0 80 01 9c 	breq	8000f04c <position_correction+0x4b6>
		{
			if (newValidGpsMsg(&pos_est->timeLastGpsMsg))
8000ed18:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000ed1c:	2e 08       	sub	r8,-32
8000ed1e:	10 9c       	mov	r12,r8
8000ed20:	f0 16 00 8b 	mcall	r6[556]
8000ed24:	18 98       	mov	r8,r12
8000ed26:	58 08       	cp.w	r8,0
8000ed28:	e0 80 01 07 	breq	8000ef36 <position_correction+0x3a0>
			{
				//dbg_print("New valid message\n");
				global_gps_position.longitude = gps->longitude;
8000ed2c:	ee f8 ff 50 	ld.w	r8,r7[-176]
8000ed30:	f0 e8 00 08 	ld.d	r8,r8[8]
8000ed34:	ee e9 ff c4 	st.d	r7[-60],r8
				global_gps_position.latitude = gps->latitude;
8000ed38:	ee f8 ff 50 	ld.w	r8,r7[-176]
8000ed3c:	f0 e8 00 00 	ld.d	r8,r8[0]
8000ed40:	ee e9 ff cc 	st.d	r7[-52],r8
				global_gps_position.altitude = gps->altitude;
8000ed44:	ee f8 ff 50 	ld.w	r8,r7[-176]
8000ed48:	70 48       	ld.w	r8,r8[0x10]
8000ed4a:	ef 48 ff d4 	st.w	r7[-44],r8
				global_gps_position.heading=0.0;
8000ed4e:	30 08       	mov	r8,0
8000ed50:	ef 48 ff d8 	st.w	r7[-40],r8
				local_coordinates = global_to_local_position(global_gps_position,pos_est->localPosition.origin);
8000ed54:	ee cc 00 e4 	sub	r12,r7,228
8000ed58:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000ed5c:	20 7d       	sub	sp,28
8000ed5e:	1a 99       	mov	r9,sp
8000ed60:	12 9a       	mov	r10,r9
8000ed62:	f0 cb ff 90 	sub	r11,r8,-112
8000ed66:	f4 c8 00 00 	sub	r8,r10,0
8000ed6a:	f6 c9 00 00 	sub	r9,r11,0
8000ed6e:	72 0e       	ld.w	lr,r9[0x0]
8000ed70:	91 0e       	st.w	r8[0x0],lr
8000ed72:	72 1e       	ld.w	lr,r9[0x4]
8000ed74:	91 1e       	st.w	r8[0x4],lr
8000ed76:	72 2e       	ld.w	lr,r9[0x8]
8000ed78:	91 2e       	st.w	r8[0x8],lr
8000ed7a:	72 39       	ld.w	r9,r9[0xc]
8000ed7c:	91 39       	st.w	r8[0xc],r9
8000ed7e:	f6 e8 00 10 	ld.d	r8,r11[16]
8000ed82:	f4 e9 00 10 	st.d	r10[16],r8
8000ed86:	76 68       	ld.w	r8,r11[0x18]
8000ed88:	95 68       	st.w	r10[0x18],r8
8000ed8a:	20 7d       	sub	sp,28
8000ed8c:	1a 98       	mov	r8,sp
8000ed8e:	10 9a       	mov	r10,r8
8000ed90:	ee cb 00 3c 	sub	r11,r7,60
8000ed94:	f4 c8 00 00 	sub	r8,r10,0
8000ed98:	f6 c9 00 00 	sub	r9,r11,0
8000ed9c:	72 0e       	ld.w	lr,r9[0x0]
8000ed9e:	91 0e       	st.w	r8[0x0],lr
8000eda0:	72 1e       	ld.w	lr,r9[0x4]
8000eda2:	91 1e       	st.w	r8[0x4],lr
8000eda4:	72 2e       	ld.w	lr,r9[0x8]
8000eda6:	91 2e       	st.w	r8[0x8],lr
8000eda8:	72 39       	ld.w	r9,r9[0xc]
8000edaa:	91 39       	st.w	r8[0xc],r9
8000edac:	f6 e8 00 10 	ld.d	r8,r11[16]
8000edb0:	f4 e9 00 10 	st.d	r10[16],r8
8000edb4:	76 68       	ld.w	r8,r11[0x18]
8000edb6:	95 68       	st.w	r10[0x18],r8
8000edb8:	f0 16 00 73 	mcall	r6[460]
8000edbc:	2f 2d       	sub	sp,-56
8000edbe:	ee cb 00 6c 	sub	r11,r7,108
8000edc2:	ee ca 00 e4 	sub	r10,r7,228
8000edc6:	f6 c8 00 00 	sub	r8,r11,0
8000edca:	f4 c9 00 00 	sub	r9,r10,0
8000edce:	72 0c       	ld.w	r12,r9[0x0]
8000edd0:	91 0c       	st.w	r8[0x0],r12
8000edd2:	72 1c       	ld.w	r12,r9[0x4]
8000edd4:	91 1c       	st.w	r8[0x4],r12
8000edd6:	72 2c       	ld.w	r12,r9[0x8]
8000edd8:	91 2c       	st.w	r8[0x8],r12
8000edda:	72 39       	ld.w	r9,r9[0xc]
8000eddc:	91 39       	st.w	r8[0xc],r9
8000edde:	f6 c8 ff f0 	sub	r8,r11,-16
8000ede2:	f4 c9 ff f0 	sub	r9,r10,-16
8000ede6:	72 0c       	ld.w	r12,r9[0x0]
8000ede8:	91 0c       	st.w	r8[0x0],r12
8000edea:	72 1c       	ld.w	r12,r9[0x4]
8000edec:	91 1c       	st.w	r8[0x4],r12
8000edee:	72 2c       	ld.w	r12,r9[0x8]
8000edf0:	91 2c       	st.w	r8[0x8],r12
8000edf2:	72 39       	ld.w	r9,r9[0xc]
8000edf4:	91 39       	st.w	r8[0xc],r9
8000edf6:	f6 c8 ff e0 	sub	r8,r11,-32
8000edfa:	f4 c9 ff e0 	sub	r9,r10,-32
8000edfe:	72 0a       	ld.w	r10,r9[0x0]
8000ee00:	91 0a       	st.w	r8[0x0],r10
8000ee02:	72 1a       	ld.w	r10,r9[0x4]
8000ee04:	91 1a       	st.w	r8[0x4],r10
8000ee06:	72 2a       	ld.w	r10,r9[0x8]
8000ee08:	91 2a       	st.w	r8[0x8],r10
8000ee0a:	72 39       	ld.w	r9,r9[0xc]
8000ee0c:	91 39       	st.w	r8[0xc],r9
				local_coordinates.timestamp_ms=gps->timeLastMsg;
8000ee0e:	ee f8 ff 50 	ld.w	r8,r7[-176]
8000ee12:	71 18       	ld.w	r8,r8[0x44]
8000ee14:	ef 48 ff c0 	st.w	r7[-64],r8
				// compute GPS velocity estimate
				gps_dt=(local_coordinates.timestamp_ms - pos_est->lastGpsPos.timestamp_ms)/1000.0;
8000ee18:	ee f9 ff c0 	ld.w	r9,r7[-64]
8000ee1c:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000ee20:	f0 f8 00 bc 	ld.w	r8,r8[188]
8000ee24:	f2 08 01 08 	sub	r8,r9,r8
8000ee28:	10 9c       	mov	r12,r8
8000ee2a:	f0 16 00 4d 	mcall	r6[308]
8000ee2e:	30 08       	mov	r8,0
8000ee30:	e0 69 40 00 	mov	r9,16384
8000ee34:	ea 19 40 8f 	orh	r9,0x408f
8000ee38:	f0 16 00 0c 	mcall	r6[48]
8000ee3c:	14 98       	mov	r8,r10
8000ee3e:	16 99       	mov	r9,r11
8000ee40:	10 9a       	mov	r10,r8
8000ee42:	12 9b       	mov	r11,r9
8000ee44:	f0 16 00 09 	mcall	r6[36]
8000ee48:	18 98       	mov	r8,r12
8000ee4a:	ef 48 ff f0 	st.w	r7[-16],r8
				if (gps_dt>0.001) {
8000ee4e:	ee fc ff f0 	ld.w	r12,r7[-16]
8000ee52:	f0 16 00 02 	mcall	r6[8]
8000ee56:	14 98       	mov	r8,r10
8000ee58:	16 99       	mov	r9,r11
8000ee5a:	30 05       	mov	r5,0
8000ee5c:	e0 6a a9 fc 	mov	r10,43516
8000ee60:	ea 1a d2 f1 	orh	r10,0xd2f1
8000ee64:	e0 6b 62 4d 	mov	r11,25165
8000ee68:	ea 1b 3f 50 	orh	r11,0x3f50
8000ee6c:	f0 16 00 1c 	mcall	r6[112]
8000ee70:	18 98       	mov	r8,r12
8000ee72:	58 08       	cp.w	r8,0
8000ee74:	c0 20       	breq	8000ee78 <position_correction+0x2e2>
8000ee76:	30 15       	mov	r5,1
8000ee78:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
8000ee7c:	c5 90       	breq	8000ef2e <position_correction+0x398>
					for (i=0; i<3; i++) pos_est->last_vel[i] = (local_coordinates.pos[i]-pos_est->lastGpsPos.pos[i])/gps_dt;
8000ee7e:	30 08       	mov	r8,0
8000ee80:	ef 48 ff fc 	st.w	r7[-4],r8
8000ee84:	c2 58       	rjmp	8000eece <position_correction+0x338>
8000ee86:	ee f5 ff fc 	ld.w	r5,r7[-4]
8000ee8a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ee8e:	a3 68       	lsl	r8,0x2
8000ee90:	ee 08 00 08 	add	r8,r7,r8
8000ee94:	f0 f9 ff 94 	ld.w	r9,r8[-108]
8000ee98:	ee fa ff fc 	ld.w	r10,r7[-4]
8000ee9c:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000eea0:	2d ca       	sub	r10,-36
8000eea2:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
8000eea6:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8000eeaa:	ee fb ff f0 	ld.w	r11,r7[-16]
8000eeae:	10 9c       	mov	r12,r8
8000eeb0:	f0 16 00 08 	mcall	r6[32]
8000eeb4:	18 98       	mov	r8,r12
8000eeb6:	10 9a       	mov	r10,r8
8000eeb8:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000eebc:	ea c9 ff eb 	sub	r9,r5,-21
8000eec0:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
8000eec4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000eec8:	2f f8       	sub	r8,-1
8000eeca:	ef 48 ff fc 	st.w	r7[-4],r8
8000eece:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000eed2:	58 28       	cp.w	r8,2
8000eed4:	fe 9a ff d9 	brle	8000ee86 <position_correction+0x2f0>
					pos_est->lastGpsPos=local_coordinates;
8000eed8:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000eedc:	f0 cb ff 70 	sub	r11,r8,-144
8000eee0:	ee ca 00 6c 	sub	r10,r7,108
8000eee4:	f6 c8 00 00 	sub	r8,r11,0
8000eee8:	f4 c9 00 00 	sub	r9,r10,0
8000eeec:	72 0c       	ld.w	r12,r9[0x0]
8000eeee:	91 0c       	st.w	r8[0x0],r12
8000eef0:	72 1c       	ld.w	r12,r9[0x4]
8000eef2:	91 1c       	st.w	r8[0x4],r12
8000eef4:	72 2c       	ld.w	r12,r9[0x8]
8000eef6:	91 2c       	st.w	r8[0x8],r12
8000eef8:	72 39       	ld.w	r9,r9[0xc]
8000eefa:	91 39       	st.w	r8[0xc],r9
8000eefc:	f6 c8 ff f0 	sub	r8,r11,-16
8000ef00:	f4 c9 ff f0 	sub	r9,r10,-16
8000ef04:	72 0c       	ld.w	r12,r9[0x0]
8000ef06:	91 0c       	st.w	r8[0x0],r12
8000ef08:	72 1c       	ld.w	r12,r9[0x4]
8000ef0a:	91 1c       	st.w	r8[0x4],r12
8000ef0c:	72 2c       	ld.w	r12,r9[0x8]
8000ef0e:	91 2c       	st.w	r8[0x8],r12
8000ef10:	72 39       	ld.w	r9,r9[0xc]
8000ef12:	91 39       	st.w	r8[0xc],r9
8000ef14:	f6 c8 ff e0 	sub	r8,r11,-32
8000ef18:	f4 c9 ff e0 	sub	r9,r10,-32
8000ef1c:	72 0a       	ld.w	r10,r9[0x0]
8000ef1e:	91 0a       	st.w	r8[0x0],r10
8000ef20:	72 1a       	ld.w	r10,r9[0x4]
8000ef22:	91 1a       	st.w	r8[0x4],r10
8000ef24:	72 2a       	ld.w	r10,r9[0x8]
8000ef26:	91 2a       	st.w	r8[0x8],r10
8000ef28:	72 39       	ld.w	r9,r9[0xc]
8000ef2a:	91 39       	st.w	r8[0xc],r9
8000ef2c:	c0 58       	rjmp	8000ef36 <position_correction+0x3a0>
				} else dbg_print("GPS dt is too small!");
8000ef2e:	fe cc 03 ae 	sub	r12,pc,942
8000ef32:	f0 16 00 01 	mcall	r6[4]
			}
			tinterGps = get_millis() - gps->timeLastMsg;
8000ef36:	f0 16 00 0f 	mcall	r6[60]
8000ef3a:	18 99       	mov	r9,r12
8000ef3c:	ee f8 ff 50 	ld.w	r8,r7[-176]
8000ef40:	71 18       	ld.w	r8,r8[0x44]
8000ef42:	10 19       	sub	r9,r8
8000ef44:	ef 49 ff f4 	st.w	r7[-12],r9
			
			gps_gain=fmax(1.0-tinterGps/1000.0, 0.0);
8000ef48:	ee fc ff f4 	ld.w	r12,r7[-12]
8000ef4c:	f0 16 00 4d 	mcall	r6[308]
8000ef50:	30 08       	mov	r8,0
8000ef52:	e0 69 40 00 	mov	r9,16384
8000ef56:	ea 19 c0 8f 	orh	r9,0xc08f
8000ef5a:	f0 16 00 0c 	mcall	r6[48]
8000ef5e:	14 98       	mov	r8,r10
8000ef60:	16 99       	mov	r9,r11
8000ef62:	10 9a       	mov	r10,r8
8000ef64:	12 9b       	mov	r11,r9
8000ef66:	30 08       	mov	r8,0
8000ef68:	fc 19 3f f0 	movh	r9,0x3ff0
8000ef6c:	f0 16 00 05 	mcall	r6[20]
8000ef70:	14 98       	mov	r8,r10
8000ef72:	16 99       	mov	r9,r11
8000ef74:	30 05       	mov	r5,0
8000ef76:	30 0a       	mov	r10,0
8000ef78:	30 0b       	mov	r11,0
8000ef7a:	f0 16 00 1c 	mcall	r6[112]
8000ef7e:	18 98       	mov	r8,r12
8000ef80:	58 08       	cp.w	r8,0
8000ef82:	c0 20       	breq	8000ef86 <position_correction+0x3f0>
8000ef84:	30 15       	mov	r5,1
8000ef86:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
8000ef8a:	c1 d0       	breq	8000efc4 <position_correction+0x42e>
8000ef8c:	ee fc ff f4 	ld.w	r12,r7[-12]
8000ef90:	f0 16 00 4d 	mcall	r6[308]
8000ef94:	30 08       	mov	r8,0
8000ef96:	e0 69 40 00 	mov	r9,16384
8000ef9a:	ea 19 c0 8f 	orh	r9,0xc08f
8000ef9e:	f0 16 00 0c 	mcall	r6[48]
8000efa2:	14 98       	mov	r8,r10
8000efa4:	16 99       	mov	r9,r11
8000efa6:	10 9a       	mov	r10,r8
8000efa8:	12 9b       	mov	r11,r9
8000efaa:	30 08       	mov	r8,0
8000efac:	fc 19 3f f0 	movh	r9,0x3ff0
8000efb0:	f0 16 00 05 	mcall	r6[20]
8000efb4:	14 98       	mov	r8,r10
8000efb6:	16 99       	mov	r9,r11
8000efb8:	10 9a       	mov	r10,r8
8000efba:	12 9b       	mov	r11,r9
8000efbc:	f0 16 00 09 	mcall	r6[36]
8000efc0:	18 98       	mov	r8,r12
8000efc2:	c0 28       	rjmp	8000efc6 <position_correction+0x430>
8000efc4:	30 08       	mov	r8,0
8000efc6:	ef 48 ff ec 	st.w	r7[-20],r8
			gps_gain=1.0;
8000efca:	fc 18 3f 80 	movh	r8,0x3f80
8000efce:	ef 48 ff ec 	st.w	r7[-20],r8
			
			for (i=0;i<3;i++){
8000efd2:	30 08       	mov	r8,0
8000efd4:	ef 48 ff fc 	st.w	r7[-4],r8
8000efd8:	c3 48       	rjmp	8000f040 <position_correction+0x4aa>
				pos_error[i] = pos_est->lastGpsPos.pos[i] - pos_est->localPosition.pos[i];
8000efda:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000efde:	ee fa ff fc 	ld.w	r10,r7[-4]
8000efe2:	ee f9 ff 58 	ld.w	r9,r7[-168]
8000efe6:	2d ca       	sub	r10,-36
8000efe8:	f2 0a 03 2a 	ld.w	r10,r9[r10<<0x2]
8000efec:	ee fb ff fc 	ld.w	r11,r7[-4]
8000eff0:	ee f9 ff 58 	ld.w	r9,r7[-168]
8000eff4:	2e 8b       	sub	r11,-24
8000eff6:	f2 0b 03 29 	ld.w	r9,r9[r11<<0x2]
8000effa:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8000effe:	a3 68       	lsl	r8,0x2
8000f000:	ee 08 00 08 	add	r8,r7,r8
8000f004:	f1 49 ff 68 	st.w	r8[-152],r9
				vel_error[i] = pos_est->last_vel[i]       - pos_est->vel[i]; 
8000f008:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000f00c:	ee fa ff fc 	ld.w	r10,r7[-4]
8000f010:	ee f9 ff 58 	ld.w	r9,r7[-168]
8000f014:	2e ba       	sub	r10,-21
8000f016:	f2 0a 03 2a 	ld.w	r10,r9[r10<<0x2]
8000f01a:	ee fb ff fc 	ld.w	r11,r7[-4]
8000f01e:	ee f9 ff 58 	ld.w	r9,r7[-168]
8000f022:	2f 2b       	sub	r11,-14
8000f024:	f2 0b 03 29 	ld.w	r9,r9[r11<<0x2]
8000f028:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8000f02c:	a3 68       	lsl	r8,0x2
8000f02e:	ee 08 00 08 	add	r8,r7,r8
8000f032:	f1 49 ff 5c 	st.w	r8[-164],r9
			tinterGps = get_millis() - gps->timeLastMsg;
			
			gps_gain=fmax(1.0-tinterGps/1000.0, 0.0);
			gps_gain=1.0;
			
			for (i=0;i<3;i++){
8000f036:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000f03a:	2f f8       	sub	r8,-1
8000f03c:	ef 48 ff fc 	st.w	r7[-4],r8
8000f040:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000f044:	58 28       	cp.w	r8,2
8000f046:	fe 9a ff ca 	brle	8000efda <position_correction+0x444>
8000f04a:	c2 b8       	rjmp	8000f0a0 <position_correction+0x50a>
				pos_error[i] = pos_est->lastGpsPos.pos[i] - pos_est->localPosition.pos[i];
				vel_error[i] = pos_est->last_vel[i]       - pos_est->vel[i]; 
			}
		}else{
			init_pos_gps(pos_est, gps);
8000f04c:	ee fb ff 50 	ld.w	r11,r7[-176]
8000f050:	ee fc ff 58 	ld.w	r12,r7[-168]
8000f054:	f0 16 00 db 	mcall	r6[876]
			for (i=0;i<2;i++){
8000f058:	30 08       	mov	r8,0
8000f05a:	ef 48 ff fc 	st.w	r7[-4],r8
8000f05e:	c1 68       	rjmp	8000f08a <position_correction+0x4f4>
				//pos_error[i] = pos_est->lastGpsPos.pos[i] - pos_est->localPosition.pos[i];
				pos_error[i] = 0.0;
8000f060:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000f064:	a3 68       	lsl	r8,0x2
8000f066:	ee 08 00 08 	add	r8,r7,r8
8000f06a:	30 09       	mov	r9,0
8000f06c:	f1 49 ff 68 	st.w	r8[-152],r9
				vel_error[i] = 0.0;
8000f070:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000f074:	a3 68       	lsl	r8,0x2
8000f076:	ee 08 00 08 	add	r8,r7,r8
8000f07a:	30 09       	mov	r9,0
8000f07c:	f1 49 ff 5c 	st.w	r8[-164],r9
				pos_error[i] = pos_est->lastGpsPos.pos[i] - pos_est->localPosition.pos[i];
				vel_error[i] = pos_est->last_vel[i]       - pos_est->vel[i]; 
			}
		}else{
			init_pos_gps(pos_est, gps);
			for (i=0;i<2;i++){
8000f080:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000f084:	2f f8       	sub	r8,-1
8000f086:	ef 48 ff fc 	st.w	r7[-4],r8
8000f08a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000f08e:	58 18       	cp.w	r8,1
8000f090:	fe 9a ff e8 	brle	8000f060 <position_correction+0x4ca>
				//pos_error[i] = pos_est->lastGpsPos.pos[i] - pos_est->localPosition.pos[i];
				pos_error[i] = 0.0;
				vel_error[i] = 0.0;
			}
			gps_gain=0.1;
8000f094:	e0 68 cc cd 	mov	r8,52429
8000f098:	ea 18 3d cc 	orh	r8,0x3dcc
8000f09c:	ef 48 ff ec 	st.w	r7[-20],r8
		}
		
		// Apply error correction to velocity and position estimates
		for (i=0;i<3;i++) {
8000f0a0:	30 08       	mov	r8,0
8000f0a2:	ef 48 ff fc 	st.w	r7[-4],r8
8000f0a6:	c2 e8       	rjmp	8000f102 <position_correction+0x56c>
			pos_est->localPosition.pos[i] += pos_est->kp_pos[i] * gps_gain * pos_error[i]* dt;
8000f0a8:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000f0ac:	ee fa ff fc 	ld.w	r10,r7[-4]
8000f0b0:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000f0b4:	2e 8a       	sub	r10,-24
8000f0b6:	f0 0a 03 2a 	ld.w	r10,r8[r10<<0x2]
8000f0ba:	ee fb ff fc 	ld.w	r11,r7[-4]
8000f0be:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000f0c2:	2f db       	sub	r11,-3
8000f0c4:	f0 0b 03 2b 	ld.w	r11,r8[r11<<0x2]
8000f0c8:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000f0cc:	e5 a2 0b b8 	cop	cp0,cr11,cr11,cr8,0x44
8000f0d0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000f0d4:	a3 68       	lsl	r8,0x2
8000f0d6:	ee 08 00 08 	add	r8,r7,r8
8000f0da:	f0 f8 ff 68 	ld.w	r8,r8[-152]
8000f0de:	e5 a2 0b b8 	cop	cp0,cr11,cr11,cr8,0x44
8000f0e2:	ee f8 ff 4c 	ld.w	r8,r7[-180]
8000f0e6:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
8000f0ea:	e5 a0 0a a8 	cop	cp0,cr10,cr10,cr8,0x40
8000f0ee:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000f0f2:	2e 89       	sub	r9,-24
8000f0f4:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
			}
			gps_gain=0.1;
		}
		
		// Apply error correction to velocity and position estimates
		for (i=0;i<3;i++) {
8000f0f8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000f0fc:	2f f8       	sub	r8,-1
8000f0fe:	ef 48 ff fc 	st.w	r7[-4],r8
8000f102:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000f106:	58 28       	cp.w	r8,2
8000f108:	fe 9a ff d0 	brle	8000f0a8 <position_correction+0x512>
			pos_est->localPosition.pos[i] += pos_est->kp_pos[i] * gps_gain * pos_error[i]* dt;
		}
		pos_est->localPosition.pos[2] += pos_est->kp_alt * baro_gain * baro_alt_error* dt;
8000f10c:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000f110:	71 a9       	ld.w	r9,r8[0x68]
8000f112:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000f116:	70 6a       	ld.w	r10,r8[0x18]
8000f118:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000f11c:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
8000f120:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000f124:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
8000f128:	ee f8 ff 4c 	ld.w	r8,r7[-180]
8000f12c:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000f130:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000f134:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000f138:	f1 49 00 68 	st.w	r8[104],r9


		for (i=0; i<3; i++) vel_correction.v[i] = vel_error[i];
8000f13c:	30 08       	mov	r8,0
8000f13e:	ef 48 ff fc 	st.w	r7[-4],r8
8000f142:	c1 68       	rjmp	8000f16e <position_correction+0x5d8>
8000f144:	ee fa ff fc 	ld.w	r10,r7[-4]
8000f148:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000f14c:	a3 68       	lsl	r8,0x2
8000f14e:	ee 08 00 08 	add	r8,r7,r8
8000f152:	f0 f9 ff 5c 	ld.w	r9,r8[-164]
8000f156:	f4 c8 ff ff 	sub	r8,r10,-1
8000f15a:	a3 68       	lsl	r8,0x2
8000f15c:	ee 08 00 08 	add	r8,r7,r8
8000f160:	f1 49 ff 74 	st.w	r8[-140],r9
8000f164:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000f168:	2f f8       	sub	r8,-1
8000f16a:	ef 48 ff fc 	st.w	r7[-4],r8
8000f16e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000f172:	58 28       	cp.w	r8,2
8000f174:	fe 9a ff e8 	brle	8000f144 <position_correction+0x5ae>
		//for (i=0; i<3; i++) vel_correction.v[i] = pos_error[i];
		//vel_correction = quat_global_to_local(pos_est->qe, vel_correction);
				
		for (i=0;i<3;i++) {			
8000f178:	30 08       	mov	r8,0
8000f17a:	ef 48 ff fc 	st.w	r7[-4],r8
8000f17e:	c2 e8       	rjmp	8000f1da <position_correction+0x644>
			pos_est->vel[i] += pos_est->kp_vel[i]*gps_gain * vel_correction.v[i]* dt;
8000f180:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000f184:	ee fa ff fc 	ld.w	r10,r7[-4]
8000f188:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000f18c:	2f 2a       	sub	r10,-14
8000f18e:	f0 0a 03 2a 	ld.w	r10,r8[r10<<0x2]
8000f192:	ee fb ff fc 	ld.w	r11,r7[-4]
8000f196:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000f19a:	f0 0b 03 2b 	ld.w	r11,r8[r11<<0x2]
8000f19e:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000f1a2:	e5 a2 0b b8 	cop	cp0,cr11,cr11,cr8,0x44
8000f1a6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000f1aa:	2f f8       	sub	r8,-1
8000f1ac:	a3 68       	lsl	r8,0x2
8000f1ae:	ee 08 00 08 	add	r8,r7,r8
8000f1b2:	f0 f8 ff 74 	ld.w	r8,r8[-140]
8000f1b6:	e5 a2 0b b8 	cop	cp0,cr11,cr11,cr8,0x44
8000f1ba:	ee f8 ff 4c 	ld.w	r8,r7[-180]
8000f1be:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
8000f1c2:	e5 a0 0a a8 	cop	cp0,cr10,cr10,cr8,0x40
8000f1c6:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000f1ca:	2f 29       	sub	r9,-14
8000f1cc:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10

		for (i=0; i<3; i++) vel_correction.v[i] = vel_error[i];
		//for (i=0; i<3; i++) vel_correction.v[i] = pos_error[i];
		//vel_correction = quat_global_to_local(pos_est->qe, vel_correction);
				
		for (i=0;i<3;i++) {			
8000f1d0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000f1d4:	2f f8       	sub	r8,-1
8000f1d6:	ef 48 ff fc 	st.w	r7[-4],r8
8000f1da:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000f1de:	58 28       	cp.w	r8,2
8000f1e0:	fe 9a ff d0 	brle	8000f180 <position_correction+0x5ea>
			pos_est->vel[i] += pos_est->kp_vel[i]*gps_gain * vel_correction.v[i]* dt;
		}
		pos_est->vel[2] += pos_est->kp_vel_baro * baro_gain * baro_vel_error* dt;
8000f1e4:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000f1e8:	71 09       	ld.w	r9,r8[0x40]
8000f1ea:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000f1ee:	70 7a       	ld.w	r10,r8[0x1c]
8000f1f0:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000f1f4:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
8000f1f8:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000f1fc:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
8000f200:	ee f8 ff 4c 	ld.w	r8,r7[-180]
8000f204:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000f208:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000f20c:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000f210:	f1 49 00 40 	st.w	r8[64],r9

	}
8000f214:	2c 7d       	sub	sp,-228
8000f216:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000f21a:	00 00       	add	r0,r0
8000f21c:	80 00       	ld.sh	r0,r0[0x0]
8000f21e:	ea 28 eb cd 	sub	r8,715725

8000f220 <quat_from_vector>:
	out.v[2] = -q.v[2];

#define QUAT(q, s, v0, v1, v2) \
	q.s=s; q.v[0]=v0; q.v[1]=v1; q.v[2]=v2;

UQuat_t static inline quat_from_vector(float *v) {
8000f220:	eb cd 40 80 	pushm	r7,lr
8000f224:	1a 97       	mov	r7,sp
8000f226:	20 5d       	sub	sp,20
8000f228:	18 9a       	mov	r10,r12
8000f22a:	ef 4b ff ec 	st.w	r7[-20],r11
	UQuat_t q;	
	q.s=0; 
8000f22e:	30 08       	mov	r8,0
8000f230:	ef 48 ff f0 	st.w	r7[-16],r8
	q.v[0]=v[0]; 
8000f234:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000f238:	70 08       	ld.w	r8,r8[0x0]
8000f23a:	ef 48 ff f4 	st.w	r7[-12],r8
	q.v[1]=v[1]; 
8000f23e:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000f242:	2f c8       	sub	r8,-4
8000f244:	70 08       	ld.w	r8,r8[0x0]
8000f246:	ef 48 ff f8 	st.w	r7[-8],r8
	q.v[2]=v[2];
8000f24a:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000f24e:	2f 88       	sub	r8,-8
8000f250:	70 08       	ld.w	r8,r8[0x0]
8000f252:	ef 48 ff fc 	st.w	r7[-4],r8
	return q;
8000f256:	14 98       	mov	r8,r10
8000f258:	ee c9 00 10 	sub	r9,r7,16
8000f25c:	20 08       	sub	r8,0
8000f25e:	20 09       	sub	r9,0
8000f260:	72 0b       	ld.w	r11,r9[0x0]
8000f262:	91 0b       	st.w	r8[0x0],r11
8000f264:	72 1b       	ld.w	r11,r9[0x4]
8000f266:	91 1b       	st.w	r8[0x4],r11
8000f268:	72 2b       	ld.w	r11,r9[0x8]
8000f26a:	91 2b       	st.w	r8[0x8],r11
8000f26c:	72 39       	ld.w	r9,r9[0xc]
8000f26e:	91 39       	st.w	r8[0xc],r9
}
8000f270:	14 9c       	mov	r12,r10
8000f272:	2f bd       	sub	sp,-20
8000f274:	e3 cd 80 80 	ldm	sp++,r7,pc

8000f278 <scalar_product>:
	return out;
}


float static inline scalar_product(const float u[], const float v[])
{
8000f278:	eb cd 40 80 	pushm	r7,lr
8000f27c:	1a 97       	mov	r7,sp
8000f27e:	20 3d       	sub	sp,12
8000f280:	ef 4c ff f8 	st.w	r7[-8],r12
8000f284:	ef 4b ff f4 	st.w	r7[-12],r11
	float scp = (u[0]*v[0]+u[1]*v[1]+u[2]*v[2]);
8000f288:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000f28c:	70 09       	ld.w	r9,r8[0x0]
8000f28e:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000f292:	70 08       	ld.w	r8,r8[0x0]
8000f294:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000f298:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000f29c:	2f c8       	sub	r8,-4
8000f29e:	70 0a       	ld.w	r10,r8[0x0]
8000f2a0:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000f2a4:	2f c8       	sub	r8,-4
8000f2a6:	70 08       	ld.w	r8,r8[0x0]
8000f2a8:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000f2ac:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000f2b0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000f2b4:	2f 88       	sub	r8,-8
8000f2b6:	70 0a       	ld.w	r10,r8[0x0]
8000f2b8:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000f2bc:	2f 88       	sub	r8,-8
8000f2be:	70 08       	ld.w	r8,r8[0x0]
8000f2c0:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000f2c4:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8000f2c8:	ef 48 ff fc 	st.w	r7[-4],r8
	return scp;
8000f2cc:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8000f2d0:	10 9c       	mov	r12,r8
8000f2d2:	2f dd       	sub	sp,-12
8000f2d4:	e3 cd 80 80 	ldm	sp++,r7,pc

8000f2d8 <quat_multi>:
	out[2] = u[0] * v[1] - u[1] * v[0];
}


UQuat_t static inline quat_multi(const UQuat_t q1, const UQuat_t q2)
{
8000f2d8:	eb cd 40 e8 	pushm	r3,r5-r7,lr
8000f2dc:	1a 97       	mov	r7,sp
8000f2de:	20 7d       	sub	sp,28
8000f2e0:	4b d6       	lddpc	r6,8000f3d4 <quat_multi+0xfc>
8000f2e2:	1e 26       	rsub	r6,pc
8000f2e4:	ee c8 ff ec 	sub	r8,r7,-20
8000f2e8:	18 95       	mov	r5,r12
	float tmp[3];
	UQuat_t out;
	tmp[0] = q1.v[1] * q2.v[2] - q1.v[2]*q2.v[1];
8000f2ea:	70 2a       	ld.w	r10,r8[0x8]
8000f2ec:	70 79       	ld.w	r9,r8[0x1c]
8000f2ee:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8000f2f2:	70 3b       	ld.w	r11,r8[0xc]
8000f2f4:	70 69       	ld.w	r9,r8[0x18]
8000f2f6:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8000f2fa:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8000f2fe:	ef 49 ff f4 	st.w	r7[-12],r9
	tmp[1] = q1.v[2] * q2.v[0] - q1.v[0]*q2.v[2];
8000f302:	70 3a       	ld.w	r10,r8[0xc]
8000f304:	70 59       	ld.w	r9,r8[0x14]
8000f306:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8000f30a:	70 1b       	ld.w	r11,r8[0x4]
8000f30c:	70 79       	ld.w	r9,r8[0x1c]
8000f30e:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8000f312:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8000f316:	ef 49 ff f8 	st.w	r7[-8],r9
	tmp[2] = q1.v[0] * q2.v[1] - q1.v[1]*q2.v[0];
8000f31a:	70 1a       	ld.w	r10,r8[0x4]
8000f31c:	70 69       	ld.w	r9,r8[0x18]
8000f31e:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8000f322:	70 2b       	ld.w	r11,r8[0x8]
8000f324:	70 59       	ld.w	r9,r8[0x14]
8000f326:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8000f32a:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8000f32e:	ef 49 ff fc 	st.w	r7[-4],r9
	out.v[0] = q2.s*q1.v[0] + q1.s *q2.v[0] +tmp[0];
8000f332:	70 4a       	ld.w	r10,r8[0x10]
8000f334:	70 19       	ld.w	r9,r8[0x4]
8000f336:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8000f33a:	70 0b       	ld.w	r11,r8[0x0]
8000f33c:	70 59       	ld.w	r9,r8[0x14]
8000f33e:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8000f342:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
8000f346:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000f34a:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
8000f34e:	ef 49 ff e8 	st.w	r7[-24],r9
	out.v[1] = q2.s*q1.v[1] + q1.s *q2.v[1] +tmp[1];
8000f352:	70 4a       	ld.w	r10,r8[0x10]
8000f354:	70 29       	ld.w	r9,r8[0x8]
8000f356:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8000f35a:	70 0b       	ld.w	r11,r8[0x0]
8000f35c:	70 69       	ld.w	r9,r8[0x18]
8000f35e:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8000f362:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
8000f366:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000f36a:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
8000f36e:	ef 49 ff ec 	st.w	r7[-20],r9
	out.v[2] = q2.s*q1.v[2] + q1.s *q2.v[2] +tmp[2];
8000f372:	70 4a       	ld.w	r10,r8[0x10]
8000f374:	70 39       	ld.w	r9,r8[0xc]
8000f376:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8000f37a:	70 0b       	ld.w	r11,r8[0x0]
8000f37c:	70 79       	ld.w	r9,r8[0x1c]
8000f37e:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8000f382:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
8000f386:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000f38a:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
8000f38e:	ef 49 ff f0 	st.w	r7[-16],r9
	out.s= q1.s*q2.s - scalar_product(q1.v, q2.v);
8000f392:	70 0a       	ld.w	r10,r8[0x0]
8000f394:	70 49       	ld.w	r9,r8[0x10]
8000f396:	e5 a2 03 a9 	cop	cp0,cr3,cr10,cr9,0x44
8000f39a:	f0 c9 ff f0 	sub	r9,r8,-16
8000f39e:	2f c9       	sub	r9,-4
8000f3a0:	2f c8       	sub	r8,-4
8000f3a2:	12 9b       	mov	r11,r9
8000f3a4:	10 9c       	mov	r12,r8
8000f3a6:	c6 9f       	rcall	8000f278 <scalar_product>
8000f3a8:	18 98       	mov	r8,r12
8000f3aa:	e5 a1 08 38 	cop	cp0,cr8,cr3,cr8,0x42
8000f3ae:	ef 48 ff e4 	st.w	r7[-28],r8
	
	return out;
8000f3b2:	0a 98       	mov	r8,r5
8000f3b4:	ee c9 00 1c 	sub	r9,r7,28
8000f3b8:	20 08       	sub	r8,0
8000f3ba:	20 09       	sub	r9,0
8000f3bc:	72 0a       	ld.w	r10,r9[0x0]
8000f3be:	91 0a       	st.w	r8[0x0],r10
8000f3c0:	72 1a       	ld.w	r10,r9[0x4]
8000f3c2:	91 1a       	st.w	r8[0x4],r10
8000f3c4:	72 2a       	ld.w	r10,r9[0x8]
8000f3c6:	91 2a       	st.w	r8[0x8],r10
8000f3c8:	72 39       	ld.w	r9,r9[0xc]
8000f3ca:	91 39       	st.w	r8[0xc],r9
}
8000f3cc:	0a 9c       	mov	r12,r5
8000f3ce:	2f 9d       	sub	sp,-28
8000f3d0:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
8000f3d4:	80 00       	ld.sh	r0,r0[0x0]
8000f3d6:	f1 66 eb cd 	st.b	r8[-5171],r6

8000f3d8 <quat_inv>:

UQuat_t static inline quat_inv(const UQuat_t q)
{
8000f3d8:	eb cd 40 80 	pushm	r7,lr
8000f3dc:	1a 97       	mov	r7,sp
8000f3de:	20 5d       	sub	sp,20
8000f3e0:	ee c9 ff f8 	sub	r9,r7,-8
8000f3e4:	18 9a       	mov	r10,r12
	int i;
	
	UQuat_t qinv;
	qinv.s = q.s;
8000f3e6:	72 08       	ld.w	r8,r9[0x0]
8000f3e8:	ef 48 ff ec 	st.w	r7[-20],r8
	for (i=0;i<3;i++)
8000f3ec:	30 08       	mov	r8,0
8000f3ee:	ef 48 ff fc 	st.w	r7[-4],r8
8000f3f2:	c1 58       	rjmp	8000f41c <quat_inv+0x44>
	{
		qinv.v[i] = -q.v[i];
8000f3f4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000f3f8:	ee fb ff fc 	ld.w	r11,r7[-4]
8000f3fc:	2f fb       	sub	r11,-1
8000f3fe:	f2 0b 03 2b 	ld.w	r11,r9[r11<<0x2]
8000f402:	ee 1b 80 00 	eorh	r11,0x8000
8000f406:	2f f8       	sub	r8,-1
8000f408:	a3 68       	lsl	r8,0x2
8000f40a:	ee 08 00 08 	add	r8,r7,r8
8000f40e:	f1 4b ff ec 	st.w	r8[-20],r11
{
	int i;
	
	UQuat_t qinv;
	qinv.s = q.s;
	for (i=0;i<3;i++)
8000f412:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000f416:	2f f8       	sub	r8,-1
8000f418:	ef 48 ff fc 	st.w	r7[-4],r8
8000f41c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000f420:	58 28       	cp.w	r8,2
8000f422:	fe 9a ff e9 	brle	8000f3f4 <quat_inv+0x1c>
	{
		qinv.v[i] = -q.v[i];
	}
	return qinv;
8000f426:	14 98       	mov	r8,r10
8000f428:	ee c9 00 14 	sub	r9,r7,20
8000f42c:	20 08       	sub	r8,0
8000f42e:	20 09       	sub	r9,0
8000f430:	72 0b       	ld.w	r11,r9[0x0]
8000f432:	91 0b       	st.w	r8[0x0],r11
8000f434:	72 1b       	ld.w	r11,r9[0x4]
8000f436:	91 1b       	st.w	r8[0x4],r11
8000f438:	72 2b       	ld.w	r11,r9[0x8]
8000f43a:	91 2b       	st.w	r8[0x8],r11
8000f43c:	72 39       	ld.w	r9,r9[0xc]
8000f43e:	91 39       	st.w	r8[0xc],r9
}
8000f440:	14 9c       	mov	r12,r10
8000f442:	2f bd       	sub	sp,-20
8000f444:	e3 cd 80 80 	ldm	sp++,r7,pc

8000f448 <quat_global_to_local>:

UQuat_t static inline quat_global_to_local(const UQuat_t qe, const UQuat_t qvect)
{
8000f448:	eb cd 40 e8 	pushm	r3,r5-r7,lr
8000f44c:	1a 97       	mov	r7,sp
8000f44e:	20 cd       	sub	sp,48
8000f450:	4b c6       	lddpc	r6,8000f540 <quat_global_to_local+0xf8>
8000f452:	1e 26       	rsub	r6,pc
8000f454:	ee c5 ff ec 	sub	r5,r7,-20
8000f458:	18 93       	mov	r3,r12
	UQuat_t qinv, qtmp;
	
	qinv = quat_inv(qe);
8000f45a:	ee ca 00 10 	sub	r10,r7,16
8000f45e:	20 4d       	sub	sp,16
8000f460:	1a 98       	mov	r8,sp
8000f462:	0a 99       	mov	r9,r5
8000f464:	20 08       	sub	r8,0
8000f466:	20 09       	sub	r9,0
8000f468:	72 0b       	ld.w	r11,r9[0x0]
8000f46a:	91 0b       	st.w	r8[0x0],r11
8000f46c:	72 1b       	ld.w	r11,r9[0x4]
8000f46e:	91 1b       	st.w	r8[0x4],r11
8000f470:	72 2b       	ld.w	r11,r9[0x8]
8000f472:	91 2b       	st.w	r8[0x8],r11
8000f474:	72 39       	ld.w	r9,r9[0xc]
8000f476:	91 39       	st.w	r8[0xc],r9
8000f478:	14 9c       	mov	r12,r10
8000f47a:	ca ff       	rcall	8000f3d8 <quat_inv>
8000f47c:	2f cd       	sub	sp,-16
	qtmp = quat_multi(qinv,qvect);
8000f47e:	ee ca 00 20 	sub	r10,r7,32
8000f482:	20 4d       	sub	sp,16
8000f484:	1a 98       	mov	r8,sp
8000f486:	ea c9 ff f0 	sub	r9,r5,-16
8000f48a:	20 08       	sub	r8,0
8000f48c:	20 09       	sub	r9,0
8000f48e:	72 0b       	ld.w	r11,r9[0x0]
8000f490:	91 0b       	st.w	r8[0x0],r11
8000f492:	72 1b       	ld.w	r11,r9[0x4]
8000f494:	91 1b       	st.w	r8[0x4],r11
8000f496:	72 2b       	ld.w	r11,r9[0x8]
8000f498:	91 2b       	st.w	r8[0x8],r11
8000f49a:	72 39       	ld.w	r9,r9[0xc]
8000f49c:	91 39       	st.w	r8[0xc],r9
8000f49e:	20 4d       	sub	sp,16
8000f4a0:	1a 98       	mov	r8,sp
8000f4a2:	ee c9 00 10 	sub	r9,r7,16
8000f4a6:	20 08       	sub	r8,0
8000f4a8:	20 09       	sub	r9,0
8000f4aa:	72 0b       	ld.w	r11,r9[0x0]
8000f4ac:	91 0b       	st.w	r8[0x0],r11
8000f4ae:	72 1b       	ld.w	r11,r9[0x4]
8000f4b0:	91 1b       	st.w	r8[0x4],r11
8000f4b2:	72 2b       	ld.w	r11,r9[0x8]
8000f4b4:	91 2b       	st.w	r8[0x8],r11
8000f4b6:	72 39       	ld.w	r9,r9[0xc]
8000f4b8:	91 39       	st.w	r8[0xc],r9
8000f4ba:	14 9c       	mov	r12,r10
8000f4bc:	c0 ef       	rcall	8000f2d8 <quat_multi>
8000f4be:	2f 8d       	sub	sp,-32
	qtmp = quat_multi(qtmp,qe);
8000f4c0:	ee ca 00 30 	sub	r10,r7,48
8000f4c4:	20 4d       	sub	sp,16
8000f4c6:	1a 98       	mov	r8,sp
8000f4c8:	0a 99       	mov	r9,r5
8000f4ca:	20 08       	sub	r8,0
8000f4cc:	20 09       	sub	r9,0
8000f4ce:	72 0b       	ld.w	r11,r9[0x0]
8000f4d0:	91 0b       	st.w	r8[0x0],r11
8000f4d2:	72 1b       	ld.w	r11,r9[0x4]
8000f4d4:	91 1b       	st.w	r8[0x4],r11
8000f4d6:	72 2b       	ld.w	r11,r9[0x8]
8000f4d8:	91 2b       	st.w	r8[0x8],r11
8000f4da:	72 39       	ld.w	r9,r9[0xc]
8000f4dc:	91 39       	st.w	r8[0xc],r9
8000f4de:	20 4d       	sub	sp,16
8000f4e0:	1a 98       	mov	r8,sp
8000f4e2:	ee c9 00 20 	sub	r9,r7,32
8000f4e6:	20 08       	sub	r8,0
8000f4e8:	20 09       	sub	r9,0
8000f4ea:	72 0b       	ld.w	r11,r9[0x0]
8000f4ec:	91 0b       	st.w	r8[0x0],r11
8000f4ee:	72 1b       	ld.w	r11,r9[0x4]
8000f4f0:	91 1b       	st.w	r8[0x4],r11
8000f4f2:	72 2b       	ld.w	r11,r9[0x8]
8000f4f4:	91 2b       	st.w	r8[0x8],r11
8000f4f6:	72 39       	ld.w	r9,r9[0xc]
8000f4f8:	91 39       	st.w	r8[0xc],r9
8000f4fa:	14 9c       	mov	r12,r10
8000f4fc:	ce ee       	rcall	8000f2d8 <quat_multi>
8000f4fe:	2f 8d       	sub	sp,-32
8000f500:	ee c8 00 20 	sub	r8,r7,32
8000f504:	ee c9 00 30 	sub	r9,r7,48
8000f508:	20 08       	sub	r8,0
8000f50a:	20 09       	sub	r9,0
8000f50c:	72 0a       	ld.w	r10,r9[0x0]
8000f50e:	91 0a       	st.w	r8[0x0],r10
8000f510:	72 1a       	ld.w	r10,r9[0x4]
8000f512:	91 1a       	st.w	r8[0x4],r10
8000f514:	72 2a       	ld.w	r10,r9[0x8]
8000f516:	91 2a       	st.w	r8[0x8],r10
8000f518:	72 39       	ld.w	r9,r9[0xc]
8000f51a:	91 39       	st.w	r8[0xc],r9

	return qtmp;
8000f51c:	06 98       	mov	r8,r3
8000f51e:	ee c9 00 20 	sub	r9,r7,32
8000f522:	20 08       	sub	r8,0
8000f524:	20 09       	sub	r9,0
8000f526:	72 0a       	ld.w	r10,r9[0x0]
8000f528:	91 0a       	st.w	r8[0x0],r10
8000f52a:	72 1a       	ld.w	r10,r9[0x4]
8000f52c:	91 1a       	st.w	r8[0x4],r10
8000f52e:	72 2a       	ld.w	r10,r9[0x8]
8000f530:	91 2a       	st.w	r8[0x8],r10
8000f532:	72 39       	ld.w	r9,r9[0xc]
8000f534:	91 39       	st.w	r8[0xc],r9
}
8000f536:	06 9c       	mov	r12,r3
8000f538:	2f 4d       	sub	sp,-48
8000f53a:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
8000f53e:	00 00       	add	r0,r0
8000f540:	80 00       	ld.sh	r0,r0[0x0]
8000f542:	f2 d6 eb cd 	satsub.w	r6,r9,-5171

8000f544 <quat_local_to_global>:

UQuat_t static inline quat_local_to_global(const UQuat_t qe, const UQuat_t qvect)
{
8000f544:	eb cd 40 e8 	pushm	r3,r5-r7,lr
8000f548:	1a 97       	mov	r7,sp
8000f54a:	20 cd       	sub	sp,48
8000f54c:	4b c6       	lddpc	r6,8000f63c <quat_local_to_global+0xf8>
8000f54e:	1e 26       	rsub	r6,pc
8000f550:	ee c5 ff ec 	sub	r5,r7,-20
8000f554:	18 93       	mov	r3,r12
	UQuat_t qinv, qtmp;
	
	qinv = quat_inv(qe);
8000f556:	ee ca 00 10 	sub	r10,r7,16
8000f55a:	20 4d       	sub	sp,16
8000f55c:	1a 98       	mov	r8,sp
8000f55e:	0a 99       	mov	r9,r5
8000f560:	20 08       	sub	r8,0
8000f562:	20 09       	sub	r9,0
8000f564:	72 0b       	ld.w	r11,r9[0x0]
8000f566:	91 0b       	st.w	r8[0x0],r11
8000f568:	72 1b       	ld.w	r11,r9[0x4]
8000f56a:	91 1b       	st.w	r8[0x4],r11
8000f56c:	72 2b       	ld.w	r11,r9[0x8]
8000f56e:	91 2b       	st.w	r8[0x8],r11
8000f570:	72 39       	ld.w	r9,r9[0xc]
8000f572:	91 39       	st.w	r8[0xc],r9
8000f574:	14 9c       	mov	r12,r10
8000f576:	c3 1f       	rcall	8000f3d8 <quat_inv>
8000f578:	2f cd       	sub	sp,-16
	qtmp = quat_multi(qe, qvect);
8000f57a:	ee ca 00 20 	sub	r10,r7,32
8000f57e:	20 4d       	sub	sp,16
8000f580:	1a 98       	mov	r8,sp
8000f582:	ea c9 ff f0 	sub	r9,r5,-16
8000f586:	20 08       	sub	r8,0
8000f588:	20 09       	sub	r9,0
8000f58a:	72 0b       	ld.w	r11,r9[0x0]
8000f58c:	91 0b       	st.w	r8[0x0],r11
8000f58e:	72 1b       	ld.w	r11,r9[0x4]
8000f590:	91 1b       	st.w	r8[0x4],r11
8000f592:	72 2b       	ld.w	r11,r9[0x8]
8000f594:	91 2b       	st.w	r8[0x8],r11
8000f596:	72 39       	ld.w	r9,r9[0xc]
8000f598:	91 39       	st.w	r8[0xc],r9
8000f59a:	20 4d       	sub	sp,16
8000f59c:	1a 98       	mov	r8,sp
8000f59e:	0a 99       	mov	r9,r5
8000f5a0:	20 08       	sub	r8,0
8000f5a2:	20 09       	sub	r9,0
8000f5a4:	72 0b       	ld.w	r11,r9[0x0]
8000f5a6:	91 0b       	st.w	r8[0x0],r11
8000f5a8:	72 1b       	ld.w	r11,r9[0x4]
8000f5aa:	91 1b       	st.w	r8[0x4],r11
8000f5ac:	72 2b       	ld.w	r11,r9[0x8]
8000f5ae:	91 2b       	st.w	r8[0x8],r11
8000f5b0:	72 39       	ld.w	r9,r9[0xc]
8000f5b2:	91 39       	st.w	r8[0xc],r9
8000f5b4:	14 9c       	mov	r12,r10
8000f5b6:	c9 1e       	rcall	8000f2d8 <quat_multi>
8000f5b8:	2f 8d       	sub	sp,-32
	qtmp = quat_multi(qtmp, qinv);
8000f5ba:	ee ca 00 30 	sub	r10,r7,48
8000f5be:	20 4d       	sub	sp,16
8000f5c0:	1a 98       	mov	r8,sp
8000f5c2:	ee c9 00 10 	sub	r9,r7,16
8000f5c6:	20 08       	sub	r8,0
8000f5c8:	20 09       	sub	r9,0
8000f5ca:	72 0b       	ld.w	r11,r9[0x0]
8000f5cc:	91 0b       	st.w	r8[0x0],r11
8000f5ce:	72 1b       	ld.w	r11,r9[0x4]
8000f5d0:	91 1b       	st.w	r8[0x4],r11
8000f5d2:	72 2b       	ld.w	r11,r9[0x8]
8000f5d4:	91 2b       	st.w	r8[0x8],r11
8000f5d6:	72 39       	ld.w	r9,r9[0xc]
8000f5d8:	91 39       	st.w	r8[0xc],r9
8000f5da:	20 4d       	sub	sp,16
8000f5dc:	1a 98       	mov	r8,sp
8000f5de:	ee c9 00 20 	sub	r9,r7,32
8000f5e2:	20 08       	sub	r8,0
8000f5e4:	20 09       	sub	r9,0
8000f5e6:	72 0b       	ld.w	r11,r9[0x0]
8000f5e8:	91 0b       	st.w	r8[0x0],r11
8000f5ea:	72 1b       	ld.w	r11,r9[0x4]
8000f5ec:	91 1b       	st.w	r8[0x4],r11
8000f5ee:	72 2b       	ld.w	r11,r9[0x8]
8000f5f0:	91 2b       	st.w	r8[0x8],r11
8000f5f2:	72 39       	ld.w	r9,r9[0xc]
8000f5f4:	91 39       	st.w	r8[0xc],r9
8000f5f6:	14 9c       	mov	r12,r10
8000f5f8:	c7 0e       	rcall	8000f2d8 <quat_multi>
8000f5fa:	2f 8d       	sub	sp,-32
8000f5fc:	ee c8 00 20 	sub	r8,r7,32
8000f600:	ee c9 00 30 	sub	r9,r7,48
8000f604:	20 08       	sub	r8,0
8000f606:	20 09       	sub	r9,0
8000f608:	72 0a       	ld.w	r10,r9[0x0]
8000f60a:	91 0a       	st.w	r8[0x0],r10
8000f60c:	72 1a       	ld.w	r10,r9[0x4]
8000f60e:	91 1a       	st.w	r8[0x4],r10
8000f610:	72 2a       	ld.w	r10,r9[0x8]
8000f612:	91 2a       	st.w	r8[0x8],r10
8000f614:	72 39       	ld.w	r9,r9[0xc]
8000f616:	91 39       	st.w	r8[0xc],r9
	
	return qtmp;
8000f618:	06 98       	mov	r8,r3
8000f61a:	ee c9 00 20 	sub	r9,r7,32
8000f61e:	20 08       	sub	r8,0
8000f620:	20 09       	sub	r9,0
8000f622:	72 0a       	ld.w	r10,r9[0x0]
8000f624:	91 0a       	st.w	r8[0x0],r10
8000f626:	72 1a       	ld.w	r10,r9[0x4]
8000f628:	91 1a       	st.w	r8[0x4],r10
8000f62a:	72 2a       	ld.w	r10,r9[0x8]
8000f62c:	91 2a       	st.w	r8[0x8],r10
8000f62e:	72 39       	ld.w	r9,r9[0xc]
8000f630:	91 39       	st.w	r8[0xc],r9
}
8000f632:	06 9c       	mov	r12,r3
8000f634:	2f 4d       	sub	sp,-48
8000f636:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
8000f63a:	00 00       	add	r0,r0
8000f63c:	80 00       	ld.sh	r0,r0[0x0]
8000f63e:	f3 d2       	*unknown*

8000f640 <fast_sqrt>:

// fast newton iteration for approximate square root
float static inline fast_sqrt(float input) {
8000f640:	eb cd 40 c0 	pushm	r6-r7,lr
8000f644:	1a 97       	mov	r7,sp
8000f646:	20 2d       	sub	sp,8
8000f648:	4b 26       	lddpc	r6,8000f710 <fast_sqrt+0xd0>
8000f64a:	1e 26       	rsub	r6,pc
8000f64c:	ef 4c ff f8 	st.w	r7[-8],r12
	if (input<0) {
8000f650:	30 18       	mov	r8,1
8000f652:	ee fa ff f8 	ld.w	r10,r7[-8]
8000f656:	30 09       	mov	r9,0
8000f658:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
8000f65c:	e0 8c 00 03 	brvs	8000f662 <fast_sqrt+0x22>
8000f660:	c0 25       	brlt	8000f664 <fast_sqrt+0x24>
8000f662:	30 08       	mov	r8,0
8000f664:	5c 58       	castu.b	r8
8000f666:	c0 30       	breq	8000f66c <fast_sqrt+0x2c>
		//dbg_print("negative root");
		return 0.0;
8000f668:	30 08       	mov	r8,0
8000f66a:	c4 f8       	rjmp	8000f708 <fast_sqrt+0xc8>
	}
	float result=1.0;
8000f66c:	fc 18 3f 80 	movh	r8,0x3f80
8000f670:	ef 48 ff fc 	st.w	r7[-4],r8
	result=0.5*(result+(input/result));
8000f674:	ee fb ff fc 	ld.w	r11,r7[-4]
8000f678:	ee fc ff f8 	ld.w	r12,r7[-8]
8000f67c:	f0 16 00 08 	mcall	r6[32]
8000f680:	18 98       	mov	r8,r12
8000f682:	10 99       	mov	r9,r8
8000f684:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000f688:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000f68c:	fc 18 3f 00 	movh	r8,0x3f00
8000f690:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8000f694:	ef 48 ff fc 	st.w	r7[-4],r8
	result=0.5*(result+(input/result));
8000f698:	ee fb ff fc 	ld.w	r11,r7[-4]
8000f69c:	ee fc ff f8 	ld.w	r12,r7[-8]
8000f6a0:	f0 16 00 08 	mcall	r6[32]
8000f6a4:	18 98       	mov	r8,r12
8000f6a6:	10 99       	mov	r9,r8
8000f6a8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000f6ac:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000f6b0:	fc 18 3f 00 	movh	r8,0x3f00
8000f6b4:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8000f6b8:	ef 48 ff fc 	st.w	r7[-4],r8
	result=0.5*(result+(input/result));
8000f6bc:	ee fb ff fc 	ld.w	r11,r7[-4]
8000f6c0:	ee fc ff f8 	ld.w	r12,r7[-8]
8000f6c4:	f0 16 00 08 	mcall	r6[32]
8000f6c8:	18 98       	mov	r8,r12
8000f6ca:	10 99       	mov	r9,r8
8000f6cc:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000f6d0:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000f6d4:	fc 18 3f 00 	movh	r8,0x3f00
8000f6d8:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8000f6dc:	ef 48 ff fc 	st.w	r7[-4],r8
	result=0.5*(result+(input/result));
8000f6e0:	ee fb ff fc 	ld.w	r11,r7[-4]
8000f6e4:	ee fc ff f8 	ld.w	r12,r7[-8]
8000f6e8:	f0 16 00 08 	mcall	r6[32]
8000f6ec:	18 98       	mov	r8,r12
8000f6ee:	10 99       	mov	r9,r8
8000f6f0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000f6f4:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000f6f8:	fc 18 3f 00 	movh	r8,0x3f00
8000f6fc:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8000f700:	ef 48 ff fc 	st.w	r7[-4],r8
	return result;
8000f704:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8000f708:	10 9c       	mov	r12,r8
8000f70a:	2f ed       	sub	sp,-8
8000f70c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000f710:	80 00       	ld.sh	r0,r0[0x0]
8000f712:	f4 ce eb cd 	sub	lr,r10,-5171

8000f714 <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
8000f714:	eb cd 40 c0 	pushm	r6-r7,lr
8000f718:	1a 97       	mov	r7,sp
8000f71a:	20 6d       	sub	sp,24
8000f71c:	49 e6       	lddpc	r6,8000f794 <interpolate+0x80>
8000f71e:	1e 26       	rsub	r6,pc
8000f720:	ef 4c ff f8 	st.w	r7[-8],r12
8000f724:	ef 4b ff f4 	st.w	r7[-12],r11
8000f728:	ef 4a ff f0 	st.w	r7[-16],r10
8000f72c:	ef 49 ff ec 	st.w	r7[-20],r9
8000f730:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
8000f734:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000f738:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000f73c:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
8000f740:	c0 41       	brne	8000f748 <interpolate+0x34>
	{
		return y1;
8000f742:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000f746:	c2 38       	rjmp	8000f78c <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
8000f748:	ee f9 ff e8 	ld.w	r9,r7[-24]
8000f74c:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000f750:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8000f754:	ee fa ff f8 	ld.w	r10,r7[-8]
8000f758:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000f75c:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
8000f760:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8000f764:	ee fa ff f0 	ld.w	r10,r7[-16]
8000f768:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000f76c:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8000f770:	12 9b       	mov	r11,r9
8000f772:	10 9c       	mov	r12,r8
8000f774:	f0 16 00 08 	mcall	r6[32]
8000f778:	18 98       	mov	r8,r12
8000f77a:	10 99       	mov	r9,r8
8000f77c:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000f780:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8000f784:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
8000f788:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
8000f78c:	10 9c       	mov	r12,r8
8000f78e:	2f ad       	sub	sp,-24
8000f790:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000f794:	80 00       	ld.sh	r0,r0[0x0]
8000f796:	f5 a2 49 6e 	stc0.w	r2[0x11b8],cr9
8000f79a:	69 74       	ld.w	r4,r4[0x5c]
8000f79c:	69 61       	ld.w	r1,r4[0x58]
8000f79e:	6c 20       	ld.w	r0,r6[0x8]
8000f7a0:	79 61       	ld.w	r1,r12[0x58]
8000f7a2:	77 3a       	ld.w	r10,r11[0x4c]
8000f7a4:	00 00       	add	r0,r0
8000f7a6:	00 00       	add	r0,r0
8000f7a8:	20 3d       	sub	sp,12
8000f7aa:	20 61       	sub	r1,6
8000f7ac:	74 61       	ld.w	r1,r10[0x18]
8000f7ae:	6e 32       	ld.w	r2,r7[0xc]
8000f7b0:	28 6d       	sub	sp,-488
8000f7b2:	61 67       	ld.w	r7,r0[0x58]
8000f7b4:	5f 79       	srpl	r9
8000f7b6:	2c 6d       	sub	sp,-232
8000f7b8:	61 67       	ld.w	r7,r0[0x58]
8000f7ba:	5f 78       	srpl	r8
8000f7bc:	29 20       	sub	r0,-110
8000f7be:	3d 00       	mov	r0,-48
8000f7c0:	20 2c       	sub	r12,2
8000f7c2:	00 00       	add	r0,r0
8000f7c4:	0a 00       	add	r0,r5
8000f7c6:	00 00       	add	r0,r0
8000f7c8:	46 72       	lddsp	r2,sp[0x19c]
8000f7ca:	6f 6e       	ld.w	lr,r7[0x58]
8000f7cc:	74 20       	ld.w	r0,r10[0x8]
8000f7ce:	6d 61       	ld.w	r1,r6[0x58]
8000f7d0:	67 28       	ld.w	r8,r3[0x48]
8000f7d2:	7a 29       	ld.w	r9,sp[0x8]
8000f7d4:	20 28       	sub	r8,2
8000f7d6:	2a 31       	sub	r1,-93
8000f7d8:	30 30       	mov	r0,3
8000f7da:	29 3a       	sub	r10,-109
	...

8000f7de <qfInit>:

float front_mag_vect_z;



void qfInit(Quat_Attitude_t *attitude,  float *scalefactor, float *bias) {
8000f7de:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
8000f7e2:	1a 97       	mov	r7,sp
8000f7e4:	20 5d       	sub	sp,20
8000f7e6:	fe f6 03 46 	ld.w	r6,pc[838]
8000f7ea:	1e 26       	rsub	r6,pc
8000f7ec:	ef 4c ff f4 	st.w	r7[-12],r12
8000f7f0:	ef 4b ff f0 	st.w	r7[-16],r11
8000f7f4:	ef 4a ff ec 	st.w	r7[-20],r10
	uint8_t i;
	float init_angle;

	for (i=0; i<9; i++){
8000f7f8:	30 08       	mov	r8,0
8000f7fa:	ef 68 ff fb 	st.b	r7[-5],r8
8000f7fe:	c2 c8       	rjmp	8000f856 <qfInit+0x78>
		attitude->sf[i]=1.0/(float)scalefactor[i];
8000f800:	ef 35 ff fb 	ld.ub	r5,r7[-5]
8000f804:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000f808:	a3 68       	lsl	r8,0x2
8000f80a:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000f80e:	f2 08 00 08 	add	r8,r9,r8
8000f812:	70 08       	ld.w	r8,r8[0x0]
8000f814:	10 9b       	mov	r11,r8
8000f816:	fc 1c 3f 80 	movh	r12,0x3f80
8000f81a:	f0 16 00 08 	mcall	r6[32]
8000f81e:	18 98       	mov	r8,r12
8000f820:	10 9a       	mov	r10,r8
8000f822:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000f826:	ea c9 ff eb 	sub	r9,r5,-21
8000f82a:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		attitude->be[i]=bias[i];
8000f82e:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000f832:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000f836:	a3 68       	lsl	r8,0x2
8000f838:	ee fa ff ec 	ld.w	r10,r7[-20]
8000f83c:	f4 08 00 08 	add	r8,r10,r8
8000f840:	70 0a       	ld.w	r10,r8[0x0]
8000f842:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000f846:	2f 49       	sub	r9,-12
8000f848:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10

void qfInit(Quat_Attitude_t *attitude,  float *scalefactor, float *bias) {
	uint8_t i;
	float init_angle;

	for (i=0; i<9; i++){
8000f84c:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000f850:	2f f8       	sub	r8,-1
8000f852:	ef 68 ff fb 	st.b	r7[-5],r8
8000f856:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000f85a:	30 88       	mov	r8,8
8000f85c:	f0 09 18 00 	cp.b	r9,r8
8000f860:	fe 98 ff d0 	brls	8000f800 <qfInit+0x22>
		attitude->sf[i]=1.0/(float)scalefactor[i];
		attitude->be[i]=bias[i];
		
	}
	for (i=0; i<3; i++){
8000f864:	30 08       	mov	r8,0
8000f866:	ef 68 ff fb 	st.b	r7[-5],r8
8000f86a:	c0 e8       	rjmp	8000f886 <qfInit+0xa8>
		attitude->acc_bf[i]=0.0;
8000f86c:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000f870:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000f874:	2d 09       	sub	r9,-48
8000f876:	30 0a       	mov	r10,0
8000f878:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	for (i=0; i<9; i++){
		attitude->sf[i]=1.0/(float)scalefactor[i];
		attitude->be[i]=bias[i];
		
	}
	for (i=0; i<3; i++){
8000f87c:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000f880:	2f f8       	sub	r8,-1
8000f882:	ef 68 ff fb 	st.b	r7[-5],r8
8000f886:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000f88a:	30 28       	mov	r8,2
8000f88c:	f0 09 18 00 	cp.b	r9,r8
8000f890:	fe 98 ff ee 	brls	8000f86c <qfInit+0x8e>

//	attitude->be[3]=-0.03;
//	attitude->be[4]=0.08;
//	attitude->be[5]=0.15;

	attitude->qe.s=1.0;
8000f894:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000f898:	fc 19 3f 80 	movh	r9,0x3f80
8000f89c:	91 09       	st.w	r8[0x0],r9
	attitude->qe.v[0]=0.0;
8000f89e:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000f8a2:	30 09       	mov	r9,0
8000f8a4:	91 19       	st.w	r8[0x4],r9
	attitude->qe.v[1]=0.0;
8000f8a6:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000f8aa:	30 09       	mov	r9,0
8000f8ac:	91 29       	st.w	r8[0x8],r9
	attitude->qe.v[2]=0.0;
8000f8ae:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000f8b2:	30 09       	mov	r9,0
8000f8b4:	91 39       	st.w	r8[0xc],r9

	for(i=0; i<3; i++)
8000f8b6:	30 08       	mov	r8,0
8000f8b8:	ef 68 ff fb 	st.b	r7[-5],r8
8000f8bc:	c2 a8       	rjmp	8000f910 <qfInit+0x132>
	{
		attitude->mag[i]=((float)attitude->raw_mag_mean[i])*attitude->sf[i+COMPASS_OFFSET]-attitude->be[i+COMPASS_OFFSET];
8000f8be:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000f8c2:	ef 3a ff fb 	ld.ub	r10,r7[-5]
8000f8c6:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000f8ca:	2d 5a       	sub	r10,-43
8000f8cc:	f0 0a 03 2a 	ld.w	r10,r8[r10<<0x2]
8000f8d0:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000f8d4:	f0 cb ff fa 	sub	r11,r8,-6
8000f8d8:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000f8dc:	2e bb       	sub	r11,-21
8000f8de:	f0 0b 03 28 	ld.w	r8,r8[r11<<0x2]
8000f8e2:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
8000f8e6:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000f8ea:	f0 cb ff fa 	sub	r11,r8,-6
8000f8ee:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000f8f2:	2f 4b       	sub	r11,-12
8000f8f4:	f0 0b 03 28 	ld.w	r8,r8[r11<<0x2]
8000f8f8:	e5 a1 0a a8 	cop	cp0,cr10,cr10,cr8,0x42
8000f8fc:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000f900:	2d c9       	sub	r9,-36
8000f902:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	attitude->qe.s=1.0;
	attitude->qe.v[0]=0.0;
	attitude->qe.v[1]=0.0;
	attitude->qe.v[2]=0.0;

	for(i=0; i<3; i++)
8000f906:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000f90a:	2f f8       	sub	r8,-1
8000f90c:	ef 68 ff fb 	st.b	r7[-5],r8
8000f910:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000f914:	30 28       	mov	r8,2
8000f916:	f0 09 18 00 	cp.b	r9,r8
8000f91a:	fe 98 ff d2 	brls	8000f8be <qfInit+0xe0>
	{
		attitude->mag[i]=((float)attitude->raw_mag_mean[i])*attitude->sf[i+COMPASS_OFFSET]-attitude->be[i+COMPASS_OFFSET];
	}
	
	init_angle = atan2(-attitude->mag[1],attitude->mag[0]);
8000f91e:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000f922:	f0 f8 00 90 	ld.w	r8,r8[144]
8000f926:	10 9c       	mov	r12,r8
8000f928:	f0 16 00 02 	mcall	r6[8]
8000f92c:	14 92       	mov	r2,r10
8000f92e:	16 93       	mov	r3,r11
8000f930:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000f934:	f0 f8 00 94 	ld.w	r8,r8[148]
8000f938:	ee 18 80 00 	eorh	r8,0x8000
8000f93c:	10 9c       	mov	r12,r8
8000f93e:	f0 16 00 02 	mcall	r6[8]
8000f942:	04 98       	mov	r8,r2
8000f944:	06 99       	mov	r9,r3
8000f946:	f0 16 00 4e 	mcall	r6[312]
8000f94a:	14 98       	mov	r8,r10
8000f94c:	16 99       	mov	r9,r11
8000f94e:	10 9a       	mov	r10,r8
8000f950:	12 9b       	mov	r11,r9
8000f952:	f0 16 00 09 	mcall	r6[36]
8000f956:	18 98       	mov	r8,r12
8000f958:	ef 48 ff fc 	st.w	r7[-4],r8

	dbg_print("Initial yaw:");
8000f95c:	fe cc 01 c4 	sub	r12,pc,452
8000f960:	f0 16 00 01 	mcall	r6[4]
	dbg_print_num(init_angle*100.0,10);
8000f964:	ee fc ff fc 	ld.w	r12,r7[-4]
8000f968:	f0 16 00 02 	mcall	r6[8]
8000f96c:	30 08       	mov	r8,0
8000f96e:	fc 19 40 59 	movh	r9,0x4059
8000f972:	f0 16 00 03 	mcall	r6[12]
8000f976:	14 98       	mov	r8,r10
8000f978:	16 99       	mov	r9,r11
8000f97a:	10 9a       	mov	r10,r8
8000f97c:	12 9b       	mov	r11,r9
8000f97e:	f0 16 00 12 	mcall	r6[72]
8000f982:	18 98       	mov	r8,r12
8000f984:	30 ab       	mov	r11,10
8000f986:	10 9c       	mov	r12,r8
8000f988:	f0 16 00 04 	mcall	r6[16]
	dbg_print(" = atan2(mag_y,mag_x) =");
8000f98c:	fe cc 01 e4 	sub	r12,pc,484
8000f990:	f0 16 00 01 	mcall	r6[4]
	dbg_print_num(attitude->mag[1]*100.0,10);
8000f994:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000f998:	f0 f8 00 94 	ld.w	r8,r8[148]
8000f99c:	10 9c       	mov	r12,r8
8000f99e:	f0 16 00 02 	mcall	r6[8]
8000f9a2:	30 08       	mov	r8,0
8000f9a4:	fc 19 40 59 	movh	r9,0x4059
8000f9a8:	f0 16 00 03 	mcall	r6[12]
8000f9ac:	14 98       	mov	r8,r10
8000f9ae:	16 99       	mov	r9,r11
8000f9b0:	10 9a       	mov	r10,r8
8000f9b2:	12 9b       	mov	r11,r9
8000f9b4:	f0 16 00 12 	mcall	r6[72]
8000f9b8:	18 98       	mov	r8,r12
8000f9ba:	30 ab       	mov	r11,10
8000f9bc:	10 9c       	mov	r12,r8
8000f9be:	f0 16 00 04 	mcall	r6[16]
	dbg_print(" ,");
8000f9c2:	fe cc 02 02 	sub	r12,pc,514
8000f9c6:	f0 16 00 01 	mcall	r6[4]
	dbg_print_num(attitude->mag[0]*100.0,10);
8000f9ca:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000f9ce:	f0 f8 00 90 	ld.w	r8,r8[144]
8000f9d2:	10 9c       	mov	r12,r8
8000f9d4:	f0 16 00 02 	mcall	r6[8]
8000f9d8:	30 08       	mov	r8,0
8000f9da:	fc 19 40 59 	movh	r9,0x4059
8000f9de:	f0 16 00 03 	mcall	r6[12]
8000f9e2:	14 98       	mov	r8,r10
8000f9e4:	16 99       	mov	r9,r11
8000f9e6:	10 9a       	mov	r10,r8
8000f9e8:	12 9b       	mov	r11,r9
8000f9ea:	f0 16 00 12 	mcall	r6[72]
8000f9ee:	18 98       	mov	r8,r12
8000f9f0:	30 ab       	mov	r11,10
8000f9f2:	10 9c       	mov	r12,r8
8000f9f4:	f0 16 00 04 	mcall	r6[16]
	dbg_print("\n");
8000f9f8:	fe cc 02 34 	sub	r12,pc,564
8000f9fc:	f0 16 00 01 	mcall	r6[4]

	front_mag_vect_z = attitude->mag[2];
8000fa00:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000fa04:	f0 f9 00 98 	ld.w	r9,r8[152]
8000fa08:	ec f8 03 7c 	ld.w	r8,r6[892]
8000fa0c:	91 09       	st.w	r8[0x0],r9
	dbg_print("Front mag(z) (*100):");
8000fa0e:	fe cc 02 46 	sub	r12,pc,582
8000fa12:	f0 16 00 01 	mcall	r6[4]
	dbg_print_num(front_mag_vect_z*100.0,10);
8000fa16:	ec f8 03 7c 	ld.w	r8,r6[892]
8000fa1a:	70 08       	ld.w	r8,r8[0x0]
8000fa1c:	10 9c       	mov	r12,r8
8000fa1e:	f0 16 00 02 	mcall	r6[8]
8000fa22:	30 08       	mov	r8,0
8000fa24:	fc 19 40 59 	movh	r9,0x4059
8000fa28:	f0 16 00 03 	mcall	r6[12]
8000fa2c:	14 98       	mov	r8,r10
8000fa2e:	16 99       	mov	r9,r11
8000fa30:	10 9a       	mov	r10,r8
8000fa32:	12 9b       	mov	r11,r9
8000fa34:	f0 16 00 12 	mcall	r6[72]
8000fa38:	18 98       	mov	r8,r12
8000fa3a:	30 ab       	mov	r11,10
8000fa3c:	10 9c       	mov	r12,r8
8000fa3e:	f0 16 00 04 	mcall	r6[16]
	dbg_print("\n");
8000fa42:	fe cc 02 7e 	sub	r12,pc,638
8000fa46:	f0 16 00 01 	mcall	r6[4]

	attitude->qe.s = cos(init_angle/2.0);
8000fa4a:	ee fc ff fc 	ld.w	r12,r7[-4]
8000fa4e:	f0 16 00 02 	mcall	r6[8]
8000fa52:	30 08       	mov	r8,0
8000fa54:	fc 19 40 00 	movh	r9,0x4000
8000fa58:	f0 16 00 0c 	mcall	r6[48]
8000fa5c:	14 98       	mov	r8,r10
8000fa5e:	16 99       	mov	r9,r11
8000fa60:	10 9a       	mov	r10,r8
8000fa62:	12 9b       	mov	r11,r9
8000fa64:	f0 16 00 b0 	mcall	r6[704]
8000fa68:	14 98       	mov	r8,r10
8000fa6a:	16 99       	mov	r9,r11
8000fa6c:	10 9a       	mov	r10,r8
8000fa6e:	12 9b       	mov	r11,r9
8000fa70:	f0 16 00 09 	mcall	r6[36]
8000fa74:	18 99       	mov	r9,r12
8000fa76:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000fa7a:	91 09       	st.w	r8[0x0],r9
	attitude->qe.v[0]=0.0;
8000fa7c:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000fa80:	30 09       	mov	r9,0
8000fa82:	91 19       	st.w	r8[0x4],r9
	attitude->qe.v[1]=0.0;
8000fa84:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000fa88:	30 09       	mov	r9,0
8000fa8a:	91 29       	st.w	r8[0x8],r9
	//attitude->qe.v[2]=sin((PI + init_angle)/2.0);
	attitude->qe.v[2]=sin(init_angle/2.0);
8000fa8c:	ee fc ff fc 	ld.w	r12,r7[-4]
8000fa90:	f0 16 00 02 	mcall	r6[8]
8000fa94:	30 08       	mov	r8,0
8000fa96:	fc 19 40 00 	movh	r9,0x4000
8000fa9a:	f0 16 00 0c 	mcall	r6[48]
8000fa9e:	14 98       	mov	r8,r10
8000faa0:	16 99       	mov	r9,r11
8000faa2:	10 9a       	mov	r10,r8
8000faa4:	12 9b       	mov	r11,r9
8000faa6:	f0 16 00 ad 	mcall	r6[692]
8000faaa:	14 98       	mov	r8,r10
8000faac:	16 99       	mov	r9,r11
8000faae:	10 9a       	mov	r10,r8
8000fab0:	12 9b       	mov	r11,r9
8000fab2:	f0 16 00 09 	mcall	r6[36]
8000fab6:	18 99       	mov	r9,r12
8000fab8:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000fabc:	91 39       	st.w	r8[0xc],r9
	
	attitude->kp=0.09;
8000fabe:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000fac2:	e0 69 51 ec 	mov	r9,20972
8000fac6:	ea 19 3d b8 	orh	r9,0x3db8
8000faca:	f1 49 00 9c 	st.w	r8[156],r9
	attitude->ki=attitude->kp/15.0;
8000face:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000fad2:	f0 f8 00 9c 	ld.w	r8,r8[156]
8000fad6:	fc 1b 41 70 	movh	r11,0x4170
8000fada:	10 9c       	mov	r12,r8
8000fadc:	f0 16 00 08 	mcall	r6[32]
8000fae0:	18 98       	mov	r8,r12
8000fae2:	10 99       	mov	r9,r8
8000fae4:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000fae8:	f1 49 00 a0 	st.w	r8[160],r9
	
	attitude->kp_mag = 0.1;
8000faec:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000faf0:	e0 69 cc cd 	mov	r9,52429
8000faf4:	ea 19 3d cc 	orh	r9,0x3dcc
8000faf8:	f1 49 00 a4 	st.w	r8[164],r9
	attitude->ki_mag = attitude->kp_mag/15.0;
8000fafc:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000fb00:	f0 f8 00 a4 	ld.w	r8,r8[164]
8000fb04:	fc 1b 41 70 	movh	r11,0x4170
8000fb08:	10 9c       	mov	r12,r8
8000fb0a:	f0 16 00 08 	mcall	r6[32]
8000fb0e:	18 98       	mov	r8,r12
8000fb10:	10 99       	mov	r9,r8
8000fb12:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000fb16:	f1 49 00 a8 	st.w	r8[168],r9
	
	attitude->calibration_level=LEVELING;
8000fb1a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000fb1e:	30 18       	mov	r8,1
8000fb20:	f3 68 00 b8 	st.b	r9[184],r8
	//dt=1.0/samplingrate;
}
8000fb24:	2f bd       	sub	sp,-20
8000fb26:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
8000fb2a:	00 00       	add	r0,r0
8000fb2c:	80 00       	ld.sh	r0,r0[0x0]
8000fb2e:	f6 6e eb cd 	mov	lr,-594995

8000fb30 <qfilter>:


void qfilter(Quat_Attitude_t *attitude, float *rates, float dt, bool simu_mode){
8000fb30:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
8000fb34:	1a 97       	mov	r7,sp
8000fb36:	fa cd 01 04 	sub	sp,sp,260
8000fb3a:	fe f6 0b 0a 	ld.w	r6,pc[2826]
8000fb3e:	1e 26       	rsub	r6,pc
8000fb40:	ef 4c ff 18 	st.w	r7[-232],r12
8000fb44:	ef 4b ff 14 	st.w	r7[-236],r11
8000fb48:	ef 4a ff 10 	st.w	r7[-240],r10
8000fb4c:	12 98       	mov	r8,r9
8000fb4e:	ef 68 ff 0c 	st.b	r7[-244],r8
	uint8_t i;
	float  omc[3], omc_mag[3], rvc[3], tmp[3], snorm, norm, s_acc_norm, acc_norm, s_mag_norm, mag_norm;
	UQuat_t qed, qtmp1, up, up_bf, qtmp2, qtmp3;
	UQuat_t mag_global, mag_corrected_local;
	UQuat_t front_vec_global = {.s=0.0, .v={1.0, 0.0, 0.0}};
8000fb52:	30 08       	mov	r8,0
8000fb54:	ef 48 ff 1c 	st.w	r7[-228],r8
8000fb58:	fc 18 3f 80 	movh	r8,0x3f80
8000fb5c:	ef 48 ff 20 	st.w	r7[-224],r8
8000fb60:	30 08       	mov	r8,0
8000fb62:	ef 48 ff 24 	st.w	r7[-220],r8
8000fb66:	30 08       	mov	r8,0
8000fb68:	ef 48 ff 28 	st.w	r7[-216],r8
	float kp, kp_mag;
	
	
	for (i=0; i<3; i++){
8000fb6c:	30 08       	mov	r8,0
8000fb6e:	ef 68 ff df 	st.b	r7[-33],r8
8000fb72:	c0 c9       	rjmp	8000fd8a <qfilter+0x25a>
		attitude->om[i]  = (1.0-GYRO_LPF)*attitude->om[i]+GYRO_LPF*(((float)rates[GYRO_OFFSET+i]-attitude->be[GYRO_OFFSET+i])*attitude->sf[i]);
8000fb74:	ef 35 ff df 	ld.ub	r5,r7[-33]
8000fb78:	ef 39 ff df 	ld.ub	r9,r7[-33]
8000fb7c:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000fb80:	2e 29       	sub	r9,-30
8000fb82:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8000fb86:	10 9c       	mov	r12,r8
8000fb88:	f0 16 00 02 	mcall	r6[8]
8000fb8c:	e0 68 cc cd 	mov	r8,52429
8000fb90:	ea 18 cc cc 	orh	r8,0xcccc
8000fb94:	e0 69 cc cc 	mov	r9,52428
8000fb98:	ea 19 3f ec 	orh	r9,0x3fec
8000fb9c:	f0 16 00 03 	mcall	r6[12]
8000fba0:	14 98       	mov	r8,r10
8000fba2:	16 99       	mov	r9,r11
8000fba4:	10 92       	mov	r2,r8
8000fba6:	12 93       	mov	r3,r9
8000fba8:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000fbac:	a3 68       	lsl	r8,0x2
8000fbae:	ee f9 ff 14 	ld.w	r9,r7[-236]
8000fbb2:	f2 08 00 08 	add	r8,r9,r8
8000fbb6:	70 09       	ld.w	r9,r8[0x0]
8000fbb8:	ef 3a ff df 	ld.ub	r10,r7[-33]
8000fbbc:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000fbc0:	2f 4a       	sub	r10,-12
8000fbc2:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
8000fbc6:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8000fbca:	ef 3a ff df 	ld.ub	r10,r7[-33]
8000fbce:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000fbd2:	2e ba       	sub	r10,-21
8000fbd4:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
8000fbd8:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8000fbdc:	10 9c       	mov	r12,r8
8000fbde:	f0 16 00 02 	mcall	r6[8]
8000fbe2:	e0 68 99 9a 	mov	r8,39322
8000fbe6:	ea 18 99 99 	orh	r8,0x9999
8000fbea:	e0 69 99 99 	mov	r9,39321
8000fbee:	ea 19 3f b9 	orh	r9,0x3fb9
8000fbf2:	f0 16 00 03 	mcall	r6[12]
8000fbf6:	14 98       	mov	r8,r10
8000fbf8:	16 99       	mov	r9,r11
8000fbfa:	04 9a       	mov	r10,r2
8000fbfc:	06 9b       	mov	r11,r3
8000fbfe:	f0 16 00 05 	mcall	r6[20]
8000fc02:	14 98       	mov	r8,r10
8000fc04:	16 99       	mov	r9,r11
8000fc06:	10 9a       	mov	r10,r8
8000fc08:	12 9b       	mov	r11,r9
8000fc0a:	f0 16 00 09 	mcall	r6[36]
8000fc0e:	18 9a       	mov	r10,r12
8000fc10:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000fc14:	ea c9 ff e2 	sub	r9,r5,-30
8000fc18:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		attitude->a[i]   = (1.0-ACC_LPF)*attitude->a[i]+ACC_LPF*(((float)rates[i+ACC_OFFSET]-attitude->be[i+ACC_OFFSET])*attitude->sf[i+ACC_OFFSET]);
8000fc1c:	ef 35 ff df 	ld.ub	r5,r7[-33]
8000fc20:	ef 39 ff df 	ld.ub	r9,r7[-33]
8000fc24:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000fc28:	2d f9       	sub	r9,-33
8000fc2a:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8000fc2e:	10 9c       	mov	r12,r8
8000fc30:	f0 16 00 02 	mcall	r6[8]
8000fc34:	e0 68 8f 5c 	mov	r8,36700
8000fc38:	ea 18 f5 c2 	orh	r8,0xf5c2
8000fc3c:	e0 69 5c 28 	mov	r9,23592
8000fc40:	ea 19 3f ef 	orh	r9,0x3fef
8000fc44:	f0 16 00 03 	mcall	r6[12]
8000fc48:	14 98       	mov	r8,r10
8000fc4a:	16 99       	mov	r9,r11
8000fc4c:	10 92       	mov	r2,r8
8000fc4e:	12 93       	mov	r3,r9
8000fc50:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000fc54:	2f d8       	sub	r8,-3
8000fc56:	a3 68       	lsl	r8,0x2
8000fc58:	ee f9 ff 14 	ld.w	r9,r7[-236]
8000fc5c:	f2 08 00 08 	add	r8,r9,r8
8000fc60:	70 09       	ld.w	r9,r8[0x0]
8000fc62:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000fc66:	f0 ca ff fd 	sub	r10,r8,-3
8000fc6a:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000fc6e:	2f 4a       	sub	r10,-12
8000fc70:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
8000fc74:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8000fc78:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000fc7c:	f0 ca ff fd 	sub	r10,r8,-3
8000fc80:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000fc84:	2e ba       	sub	r10,-21
8000fc86:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
8000fc8a:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8000fc8e:	10 9c       	mov	r12,r8
8000fc90:	f0 16 00 02 	mcall	r6[8]
8000fc94:	e0 68 14 7b 	mov	r8,5243
8000fc98:	ea 18 47 ae 	orh	r8,0x47ae
8000fc9c:	e0 69 7a e1 	mov	r9,31457
8000fca0:	ea 19 3f 94 	orh	r9,0x3f94
8000fca4:	f0 16 00 03 	mcall	r6[12]
8000fca8:	14 98       	mov	r8,r10
8000fcaa:	16 99       	mov	r9,r11
8000fcac:	04 9a       	mov	r10,r2
8000fcae:	06 9b       	mov	r11,r3
8000fcb0:	f0 16 00 05 	mcall	r6[20]
8000fcb4:	14 98       	mov	r8,r10
8000fcb6:	16 99       	mov	r9,r11
8000fcb8:	10 9a       	mov	r10,r8
8000fcba:	12 9b       	mov	r11,r9
8000fcbc:	f0 16 00 09 	mcall	r6[36]
8000fcc0:	18 9a       	mov	r10,r12
8000fcc2:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000fcc6:	ea c9 ff df 	sub	r9,r5,-33
8000fcca:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		attitude->mag[i] = (1.0-MAG_LPF)*attitude->mag[i]+MAG_LPF*(((float)rates[i+COMPASS_OFFSET]-attitude->be[i+COMPASS_OFFSET])*attitude->sf[i+COMPASS_OFFSET]);
8000fcce:	ef 35 ff df 	ld.ub	r5,r7[-33]
8000fcd2:	ef 39 ff df 	ld.ub	r9,r7[-33]
8000fcd6:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000fcda:	2d c9       	sub	r9,-36
8000fcdc:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8000fce0:	10 9c       	mov	r12,r8
8000fce2:	f0 16 00 02 	mcall	r6[8]
8000fce6:	e0 68 cc cd 	mov	r8,52429
8000fcea:	ea 18 cc cc 	orh	r8,0xcccc
8000fcee:	e0 69 cc cc 	mov	r9,52428
8000fcf2:	ea 19 3f ec 	orh	r9,0x3fec
8000fcf6:	f0 16 00 03 	mcall	r6[12]
8000fcfa:	14 98       	mov	r8,r10
8000fcfc:	16 99       	mov	r9,r11
8000fcfe:	10 92       	mov	r2,r8
8000fd00:	12 93       	mov	r3,r9
8000fd02:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000fd06:	2f a8       	sub	r8,-6
8000fd08:	a3 68       	lsl	r8,0x2
8000fd0a:	ee f9 ff 14 	ld.w	r9,r7[-236]
8000fd0e:	f2 08 00 08 	add	r8,r9,r8
8000fd12:	70 09       	ld.w	r9,r8[0x0]
8000fd14:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000fd18:	f0 ca ff fa 	sub	r10,r8,-6
8000fd1c:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000fd20:	2f 4a       	sub	r10,-12
8000fd22:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
8000fd26:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8000fd2a:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000fd2e:	f0 ca ff fa 	sub	r10,r8,-6
8000fd32:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000fd36:	2e ba       	sub	r10,-21
8000fd38:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
8000fd3c:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8000fd40:	10 9c       	mov	r12,r8
8000fd42:	f0 16 00 02 	mcall	r6[8]
8000fd46:	e0 68 99 9a 	mov	r8,39322
8000fd4a:	ea 18 99 99 	orh	r8,0x9999
8000fd4e:	e0 69 99 99 	mov	r9,39321
8000fd52:	ea 19 3f b9 	orh	r9,0x3fb9
8000fd56:	f0 16 00 03 	mcall	r6[12]
8000fd5a:	14 98       	mov	r8,r10
8000fd5c:	16 99       	mov	r9,r11
8000fd5e:	04 9a       	mov	r10,r2
8000fd60:	06 9b       	mov	r11,r3
8000fd62:	f0 16 00 05 	mcall	r6[20]
8000fd66:	14 98       	mov	r8,r10
8000fd68:	16 99       	mov	r9,r11
8000fd6a:	10 9a       	mov	r10,r8
8000fd6c:	12 9b       	mov	r11,r9
8000fd6e:	f0 16 00 09 	mcall	r6[36]
8000fd72:	18 9a       	mov	r10,r12
8000fd74:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000fd78:	ea c9 ff dc 	sub	r9,r5,-36
8000fd7c:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	UQuat_t mag_global, mag_corrected_local;
	UQuat_t front_vec_global = {.s=0.0, .v={1.0, 0.0, 0.0}};
	float kp, kp_mag;
	
	
	for (i=0; i<3; i++){
8000fd80:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000fd84:	2f f8       	sub	r8,-1
8000fd86:	ef 68 ff df 	st.b	r7[-33],r8
8000fd8a:	ef 39 ff df 	ld.ub	r9,r7[-33]
8000fd8e:	30 28       	mov	r8,2
8000fd90:	f0 09 18 00 	cp.b	r9,r8
8000fd94:	fe 98 fe f0 	brls	8000fb74 <qfilter+0x44>
		attitude->a[i]   = (1.0-ACC_LPF)*attitude->a[i]+ACC_LPF*(((float)rates[i+ACC_OFFSET]-attitude->be[i+ACC_OFFSET])*attitude->sf[i+ACC_OFFSET]);
		attitude->mag[i] = (1.0-MAG_LPF)*attitude->mag[i]+MAG_LPF*(((float)rates[i+COMPASS_OFFSET]-attitude->be[i+COMPASS_OFFSET])*attitude->sf[i+COMPASS_OFFSET]);
	}

	// up_bf = qe^-1 *(0,0,0,-1) * qe
	up.s=0; up.v[0]=UPVECTOR_X; up.v[1]=UPVECTOR_Y; up.v[2]=UPVECTOR_Z;
8000fd98:	30 08       	mov	r8,0
8000fd9a:	ef 48 ff 7c 	st.w	r7[-132],r8
8000fd9e:	30 08       	mov	r8,0
8000fda0:	ef 48 ff 80 	st.w	r7[-128],r8
8000fda4:	30 08       	mov	r8,0
8000fda6:	ef 48 ff 84 	st.w	r7[-124],r8
8000fdaa:	fc 18 bf 80 	movh	r8,0xbf80
8000fdae:	ef 48 ff 88 	st.w	r7[-120],r8
	up_bf = quat_global_to_local(attitude->qe, up);
8000fdb2:	ee ca 00 94 	sub	r10,r7,148
8000fdb6:	20 4d       	sub	sp,16
8000fdb8:	1a 98       	mov	r8,sp
8000fdba:	ee c9 00 84 	sub	r9,r7,132
8000fdbe:	20 08       	sub	r8,0
8000fdc0:	20 09       	sub	r9,0
8000fdc2:	72 0b       	ld.w	r11,r9[0x0]
8000fdc4:	91 0b       	st.w	r8[0x0],r11
8000fdc6:	72 1b       	ld.w	r11,r9[0x4]
8000fdc8:	91 1b       	st.w	r8[0x4],r11
8000fdca:	72 2b       	ld.w	r11,r9[0x8]
8000fdcc:	91 2b       	st.w	r8[0x8],r11
8000fdce:	72 39       	ld.w	r9,r9[0xc]
8000fdd0:	91 39       	st.w	r8[0xc],r9
8000fdd2:	ee f9 ff 18 	ld.w	r9,r7[-232]
8000fdd6:	20 4d       	sub	sp,16
8000fdd8:	1a 98       	mov	r8,sp
8000fdda:	20 08       	sub	r8,0
8000fddc:	20 09       	sub	r9,0
8000fdde:	72 0b       	ld.w	r11,r9[0x0]
8000fde0:	91 0b       	st.w	r8[0x0],r11
8000fde2:	72 1b       	ld.w	r11,r9[0x4]
8000fde4:	91 1b       	st.w	r8[0x4],r11
8000fde6:	72 2b       	ld.w	r11,r9[0x8]
8000fde8:	91 2b       	st.w	r8[0x8],r11
8000fdea:	72 39       	ld.w	r9,r9[0xc]
8000fdec:	91 39       	st.w	r8[0xc],r9
8000fdee:	14 9c       	mov	r12,r10
8000fdf0:	fe b0 fb 2c 	rcall	8000f448 <quat_global_to_local>
8000fdf4:	2f 8d       	sub	sp,-32
	
	// calculate norm of acceleration vector
	s_acc_norm=attitude->a[0]*attitude->a[0]+attitude->a[1]*attitude->a[1]+attitude->a[2]*attitude->a[2];
8000fdf6:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000fdfa:	f0 f9 00 84 	ld.w	r9,r8[132]
8000fdfe:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000fe02:	f0 f8 00 84 	ld.w	r8,r8[132]
8000fe06:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000fe0a:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000fe0e:	f0 fa 00 88 	ld.w	r10,r8[136]
8000fe12:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000fe16:	f0 f8 00 88 	ld.w	r8,r8[136]
8000fe1a:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000fe1e:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000fe22:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000fe26:	f0 fa 00 8c 	ld.w	r10,r8[140]
8000fe2a:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000fe2e:	f0 f8 00 8c 	ld.w	r8,r8[140]
8000fe32:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000fe36:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8000fe3a:	ef 48 ff e8 	st.w	r7[-24],r8
	if ((s_acc_norm>0.7*0.7)&&(s_acc_norm<1.3*1.3)) {
8000fe3e:	ee fc ff e8 	ld.w	r12,r7[-24]
8000fe42:	f0 16 00 02 	mcall	r6[8]
8000fe46:	14 98       	mov	r8,r10
8000fe48:	16 99       	mov	r9,r11
8000fe4a:	30 05       	mov	r5,0
8000fe4c:	e0 6a 8f 5b 	mov	r10,36699
8000fe50:	ea 1a f5 c2 	orh	r10,0xf5c2
8000fe54:	e0 6b 5c 28 	mov	r11,23592
8000fe58:	ea 1b 3f df 	orh	r11,0x3fdf
8000fe5c:	f0 16 00 1c 	mcall	r6[112]
8000fe60:	18 98       	mov	r8,r12
8000fe62:	58 08       	cp.w	r8,0
8000fe64:	c0 20       	breq	8000fe68 <qfilter+0x338>
8000fe66:	30 15       	mov	r5,1
8000fe68:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
8000fe6c:	c7 30       	breq	8000ff52 <qfilter+0x422>
8000fe6e:	ee fc ff e8 	ld.w	r12,r7[-24]
8000fe72:	f0 16 00 02 	mcall	r6[8]
8000fe76:	30 05       	mov	r5,0
8000fe78:	e0 68 d7 0b 	mov	r8,55051
8000fe7c:	ea 18 70 a3 	orh	r8,0x70a3
8000fe80:	e0 69 0a 3d 	mov	r9,2621
8000fe84:	ea 19 3f fb 	orh	r9,0x3ffb
8000fe88:	f0 16 00 1c 	mcall	r6[112]
8000fe8c:	18 98       	mov	r8,r12
8000fe8e:	58 08       	cp.w	r8,0
8000fe90:	c0 20       	breq	8000fe94 <qfilter+0x364>
8000fe92:	30 15       	mov	r5,1
8000fe94:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
8000fe98:	c5 d0       	breq	8000ff52 <qfilter+0x422>
		// approximate square root by running 2 iterations of newton method
		acc_norm=fast_sqrt(s_acc_norm);
8000fe9a:	ee fc ff e8 	ld.w	r12,r7[-24]
8000fe9e:	fe b0 fb d1 	rcall	8000f640 <fast_sqrt>
8000fea2:	18 98       	mov	r8,r12
8000fea4:	ef 48 ff ec 	st.w	r7[-20],r8

		tmp[0]=attitude->a[0]/acc_norm;
8000fea8:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000feac:	f0 f8 00 84 	ld.w	r8,r8[132]
8000feb0:	ee fb ff ec 	ld.w	r11,r7[-20]
8000feb4:	10 9c       	mov	r12,r8
8000feb6:	f0 16 00 08 	mcall	r6[32]
8000feba:	18 98       	mov	r8,r12
8000febc:	ef 48 ff ac 	st.w	r7[-84],r8
		tmp[1]=attitude->a[1]/acc_norm;
8000fec0:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000fec4:	f0 f8 00 88 	ld.w	r8,r8[136]
8000fec8:	ee fb ff ec 	ld.w	r11,r7[-20]
8000fecc:	10 9c       	mov	r12,r8
8000fece:	f0 16 00 08 	mcall	r6[32]
8000fed2:	18 98       	mov	r8,r12
8000fed4:	ef 48 ff b0 	st.w	r7[-80],r8
		tmp[2]=attitude->a[2]/acc_norm;
8000fed8:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000fedc:	f0 f8 00 8c 	ld.w	r8,r8[140]
8000fee0:	ee fb ff ec 	ld.w	r11,r7[-20]
8000fee4:	10 9c       	mov	r12,r8
8000fee6:	f0 16 00 08 	mcall	r6[32]
8000feea:	18 98       	mov	r8,r12
8000feec:	ef 48 ff b4 	st.w	r7[-76],r8
		// omc = a x up_bf.v
		CROSS(tmp, up_bf.v, omc);
8000fef0:	ee f9 ff b0 	ld.w	r9,r7[-80]
8000fef4:	ee f8 ff 78 	ld.w	r8,r7[-136]
8000fef8:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000fefc:	ee fa ff b4 	ld.w	r10,r7[-76]
8000ff00:	ee f8 ff 74 	ld.w	r8,r7[-140]
8000ff04:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000ff08:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8000ff0c:	ef 48 ff d0 	st.w	r7[-48],r8
8000ff10:	ee f9 ff b4 	ld.w	r9,r7[-76]
8000ff14:	ee f8 ff 70 	ld.w	r8,r7[-144]
8000ff18:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000ff1c:	ee fa ff ac 	ld.w	r10,r7[-84]
8000ff20:	ee f8 ff 78 	ld.w	r8,r7[-136]
8000ff24:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000ff28:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8000ff2c:	ef 48 ff d4 	st.w	r7[-44],r8
8000ff30:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000ff34:	ee f8 ff 74 	ld.w	r8,r7[-140]
8000ff38:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000ff3c:	ee fa ff b0 	ld.w	r10,r7[-80]
8000ff40:	ee f8 ff 70 	ld.w	r8,r7[-144]
8000ff44:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000ff48:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8000ff4c:	ef 48 ff d8 	st.w	r7[-40],r8
	up.s=0; up.v[0]=UPVECTOR_X; up.v[1]=UPVECTOR_Y; up.v[2]=UPVECTOR_Z;
	up_bf = quat_global_to_local(attitude->qe, up);
	
	// calculate norm of acceleration vector
	s_acc_norm=attitude->a[0]*attitude->a[0]+attitude->a[1]*attitude->a[1]+attitude->a[2]*attitude->a[2];
	if ((s_acc_norm>0.7*0.7)&&(s_acc_norm<1.3*1.3)) {
8000ff50:	c0 a8       	rjmp	8000ff64 <qfilter+0x434>
		tmp[1]=attitude->a[1]/acc_norm;
		tmp[2]=attitude->a[2]/acc_norm;
		// omc = a x up_bf.v
		CROSS(tmp, up_bf.v, omc);
	} else {
		omc[0]=0;		omc[1]=0; 		omc[2]=0;
8000ff52:	30 08       	mov	r8,0
8000ff54:	ef 48 ff d0 	st.w	r7[-48],r8
8000ff58:	30 08       	mov	r8,0
8000ff5a:	ef 48 ff d4 	st.w	r7[-44],r8
8000ff5e:	30 08       	mov	r8,0
8000ff60:	ef 48 ff d8 	st.w	r7[-40],r8
	}

	// Heading computation
	// transfer 
	qtmp1=quat_from_vector(attitude->mag); 
8000ff64:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000ff68:	f0 c9 ff 70 	sub	r9,r8,-144
8000ff6c:	ee c8 01 04 	sub	r8,r7,260
8000ff70:	12 9b       	mov	r11,r9
8000ff72:	10 9c       	mov	r12,r8
8000ff74:	fe b0 f9 56 	rcall	8000f220 <quat_from_vector>
8000ff78:	ee c8 00 74 	sub	r8,r7,116
8000ff7c:	ee c9 01 04 	sub	r9,r7,260
8000ff80:	20 08       	sub	r8,0
8000ff82:	20 09       	sub	r9,0
8000ff84:	72 0a       	ld.w	r10,r9[0x0]
8000ff86:	91 0a       	st.w	r8[0x0],r10
8000ff88:	72 1a       	ld.w	r10,r9[0x4]
8000ff8a:	91 1a       	st.w	r8[0x4],r10
8000ff8c:	72 2a       	ld.w	r10,r9[0x8]
8000ff8e:	91 2a       	st.w	r8[0x8],r10
8000ff90:	72 39       	ld.w	r9,r9[0xc]
8000ff92:	91 39       	st.w	r8[0xc],r9
	mag_global = quat_local_to_global(attitude->qe, qtmp1);
8000ff94:	ee ca 00 c4 	sub	r10,r7,196
8000ff98:	20 4d       	sub	sp,16
8000ff9a:	1a 98       	mov	r8,sp
8000ff9c:	ee c9 00 74 	sub	r9,r7,116
8000ffa0:	20 08       	sub	r8,0
8000ffa2:	20 09       	sub	r9,0
8000ffa4:	72 0b       	ld.w	r11,r9[0x0]
8000ffa6:	91 0b       	st.w	r8[0x0],r11
8000ffa8:	72 1b       	ld.w	r11,r9[0x4]
8000ffaa:	91 1b       	st.w	r8[0x4],r11
8000ffac:	72 2b       	ld.w	r11,r9[0x8]
8000ffae:	91 2b       	st.w	r8[0x8],r11
8000ffb0:	72 39       	ld.w	r9,r9[0xc]
8000ffb2:	91 39       	st.w	r8[0xc],r9
8000ffb4:	ee f9 ff 18 	ld.w	r9,r7[-232]
8000ffb8:	20 4d       	sub	sp,16
8000ffba:	1a 98       	mov	r8,sp
8000ffbc:	20 08       	sub	r8,0
8000ffbe:	20 09       	sub	r9,0
8000ffc0:	72 0b       	ld.w	r11,r9[0x0]
8000ffc2:	91 0b       	st.w	r8[0x0],r11
8000ffc4:	72 1b       	ld.w	r11,r9[0x4]
8000ffc6:	91 1b       	st.w	r8[0x4],r11
8000ffc8:	72 2b       	ld.w	r11,r9[0x8]
8000ffca:	91 2b       	st.w	r8[0x8],r11
8000ffcc:	72 39       	ld.w	r9,r9[0xc]
8000ffce:	91 39       	st.w	r8[0xc],r9
8000ffd0:	14 9c       	mov	r12,r10
8000ffd2:	fe b0 fa b9 	rcall	8000f544 <quat_local_to_global>
8000ffd6:	2f 8d       	sub	sp,-32
	//QI(attitude->qe,qtmp4);
	//QMUL(qtmp4, front_bf, qtmp5);
	//QMUL(qtmp5, attitude->qe, front_bf);
	
	// calculate norm of compass vector
	s_mag_norm=SQR(mag_global.v[0])+SQR(mag_global.v[1])+SQR(mag_global.v[2]);
8000ffd8:	ee f9 ff 40 	ld.w	r9,r7[-192]
8000ffdc:	ee f8 ff 40 	ld.w	r8,r7[-192]
8000ffe0:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000ffe4:	ee fa ff 44 	ld.w	r10,r7[-188]
8000ffe8:	ee f8 ff 44 	ld.w	r8,r7[-188]
8000ffec:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000fff0:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000fff4:	ee fa ff 48 	ld.w	r10,r7[-184]
8000fff8:	ee f8 ff 48 	ld.w	r8,r7[-184]
8000fffc:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80010000:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80010004:	ef 48 ff f0 	st.w	r7[-16],r8
	if ((s_mag_norm>0.4*0.4)&&(s_mag_norm<1.8*1.8)) 
80010008:	ee fc ff f0 	ld.w	r12,r7[-16]
8001000c:	f0 16 00 02 	mcall	r6[8]
80010010:	14 98       	mov	r8,r10
80010012:	16 99       	mov	r9,r11
80010014:	30 05       	mov	r5,0
80010016:	e0 6a 14 7c 	mov	r10,5244
8001001a:	ea 1a 47 ae 	orh	r10,0x47ae
8001001e:	e0 6b 7a e1 	mov	r11,31457
80010022:	ea 1b 3f c4 	orh	r11,0x3fc4
80010026:	f0 16 00 1c 	mcall	r6[112]
8001002a:	18 98       	mov	r8,r12
8001002c:	58 08       	cp.w	r8,0
8001002e:	c0 20       	breq	80010032 <qfilter+0x502>
80010030:	30 15       	mov	r5,1
80010032:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
80010036:	e0 80 00 c2 	breq	800101ba <qfilter+0x68a>
8001003a:	ee fc ff f0 	ld.w	r12,r7[-16]
8001003e:	f0 16 00 02 	mcall	r6[8]
80010042:	30 05       	mov	r5,0
80010044:	e0 68 51 ec 	mov	r8,20972
80010048:	ea 18 1e b8 	orh	r8,0x1eb8
8001004c:	e0 69 eb 85 	mov	r9,60293
80010050:	ea 19 40 09 	orh	r9,0x4009
80010054:	f0 16 00 1c 	mcall	r6[112]
80010058:	18 98       	mov	r8,r12
8001005a:	58 08       	cp.w	r8,0
8001005c:	c0 20       	breq	80010060 <qfilter+0x530>
8001005e:	30 15       	mov	r5,1
80010060:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
80010064:	e0 80 00 ab 	breq	800101ba <qfilter+0x68a>
	{
		mag_norm=fast_sqrt(s_mag_norm);
80010068:	ee fc ff f0 	ld.w	r12,r7[-16]
8001006c:	fe b0 fa ea 	rcall	8000f640 <fast_sqrt>
80010070:	18 98       	mov	r8,r12
80010072:	ef 48 ff f4 	st.w	r7[-12],r8

		mag_global.v[0]/=mag_norm;
80010076:	ee f8 ff 40 	ld.w	r8,r7[-192]
8001007a:	ee fb ff f4 	ld.w	r11,r7[-12]
8001007e:	10 9c       	mov	r12,r8
80010080:	f0 16 00 08 	mcall	r6[32]
80010084:	18 98       	mov	r8,r12
80010086:	ef 48 ff 40 	st.w	r7[-192],r8
		mag_global.v[1]/=mag_norm;
8001008a:	ee f8 ff 44 	ld.w	r8,r7[-188]
8001008e:	ee fb ff f4 	ld.w	r11,r7[-12]
80010092:	10 9c       	mov	r12,r8
80010094:	f0 16 00 08 	mcall	r6[32]
80010098:	18 98       	mov	r8,r12
8001009a:	ef 48 ff 44 	st.w	r7[-188],r8
		mag_global.v[2]=0.0;   // set z component in global frame to 0
8001009e:	30 08       	mov	r8,0
800100a0:	ef 48 ff 48 	st.w	r7[-184],r8

		// transfer magneto vector back to body frame 
		attitude->north_vec=quat_global_to_local(attitude->qe, front_vec_global);		
800100a4:	ee f5 ff 18 	ld.w	r5,r7[-232]
800100a8:	ee ca 01 04 	sub	r10,r7,260
800100ac:	20 4d       	sub	sp,16
800100ae:	1a 98       	mov	r8,sp
800100b0:	ee c9 00 e4 	sub	r9,r7,228
800100b4:	20 08       	sub	r8,0
800100b6:	20 09       	sub	r9,0
800100b8:	72 0b       	ld.w	r11,r9[0x0]
800100ba:	91 0b       	st.w	r8[0x0],r11
800100bc:	72 1b       	ld.w	r11,r9[0x4]
800100be:	91 1b       	st.w	r8[0x4],r11
800100c0:	72 2b       	ld.w	r11,r9[0x8]
800100c2:	91 2b       	st.w	r8[0x8],r11
800100c4:	72 39       	ld.w	r9,r9[0xc]
800100c6:	91 39       	st.w	r8[0xc],r9
800100c8:	ee f9 ff 18 	ld.w	r9,r7[-232]
800100cc:	20 4d       	sub	sp,16
800100ce:	1a 98       	mov	r8,sp
800100d0:	20 08       	sub	r8,0
800100d2:	20 09       	sub	r9,0
800100d4:	72 0b       	ld.w	r11,r9[0x0]
800100d6:	91 0b       	st.w	r8[0x0],r11
800100d8:	72 1b       	ld.w	r11,r9[0x4]
800100da:	91 1b       	st.w	r8[0x4],r11
800100dc:	72 2b       	ld.w	r11,r9[0x8]
800100de:	91 2b       	st.w	r8[0x8],r11
800100e0:	72 39       	ld.w	r9,r9[0xc]
800100e2:	91 39       	st.w	r8[0xc],r9
800100e4:	14 9c       	mov	r12,r10
800100e6:	fe b0 f9 b1 	rcall	8000f448 <quat_global_to_local>
800100ea:	2f 8d       	sub	sp,-32
800100ec:	ea c8 ff e0 	sub	r8,r5,-32
800100f0:	ee c9 01 04 	sub	r9,r7,260
800100f4:	20 08       	sub	r8,0
800100f6:	20 09       	sub	r9,0
800100f8:	72 0a       	ld.w	r10,r9[0x0]
800100fa:	91 0a       	st.w	r8[0x0],r10
800100fc:	72 1a       	ld.w	r10,r9[0x4]
800100fe:	91 1a       	st.w	r8[0x4],r10
80010100:	72 2a       	ld.w	r10,r9[0x8]
80010102:	91 2a       	st.w	r8[0x8],r10
80010104:	72 39       	ld.w	r9,r9[0xc]
80010106:	91 39       	st.w	r8[0xc],r9
		mag_corrected_local=quat_global_to_local(attitude->qe, mag_global);		
80010108:	ee ca 00 d4 	sub	r10,r7,212
8001010c:	20 4d       	sub	sp,16
8001010e:	1a 98       	mov	r8,sp
80010110:	ee c9 00 c4 	sub	r9,r7,196
80010114:	20 08       	sub	r8,0
80010116:	20 09       	sub	r9,0
80010118:	72 0b       	ld.w	r11,r9[0x0]
8001011a:	91 0b       	st.w	r8[0x0],r11
8001011c:	72 1b       	ld.w	r11,r9[0x4]
8001011e:	91 1b       	st.w	r8[0x4],r11
80010120:	72 2b       	ld.w	r11,r9[0x8]
80010122:	91 2b       	st.w	r8[0x8],r11
80010124:	72 39       	ld.w	r9,r9[0xc]
80010126:	91 39       	st.w	r8[0xc],r9
80010128:	ee f9 ff 18 	ld.w	r9,r7[-232]
8001012c:	20 4d       	sub	sp,16
8001012e:	1a 98       	mov	r8,sp
80010130:	20 08       	sub	r8,0
80010132:	20 09       	sub	r9,0
80010134:	72 0b       	ld.w	r11,r9[0x0]
80010136:	91 0b       	st.w	r8[0x0],r11
80010138:	72 1b       	ld.w	r11,r9[0x4]
8001013a:	91 1b       	st.w	r8[0x4],r11
8001013c:	72 2b       	ld.w	r11,r9[0x8]
8001013e:	91 2b       	st.w	r8[0x8],r11
80010140:	72 39       	ld.w	r9,r9[0xc]
80010142:	91 39       	st.w	r8[0xc],r9
80010144:	14 9c       	mov	r12,r10
80010146:	fe b0 f9 81 	rcall	8000f448 <quat_global_to_local>
8001014a:	2f 8d       	sub	sp,-32
		// omc = a x up_bf.v
		CROSS(mag_corrected_local.v, attitude->north_vec.v,  omc_mag);
8001014c:	ee f9 ff 34 	ld.w	r9,r7[-204]
80010150:	ee f8 ff 18 	ld.w	r8,r7[-232]
80010154:	70 b8       	ld.w	r8,r8[0x2c]
80010156:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8001015a:	ee fa ff 38 	ld.w	r10,r7[-200]
8001015e:	ee f8 ff 18 	ld.w	r8,r7[-232]
80010162:	70 a8       	ld.w	r8,r8[0x28]
80010164:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80010168:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8001016c:	ef 48 ff c4 	st.w	r7[-60],r8
80010170:	ee f9 ff 38 	ld.w	r9,r7[-200]
80010174:	ee f8 ff 18 	ld.w	r8,r7[-232]
80010178:	70 98       	ld.w	r8,r8[0x24]
8001017a:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8001017e:	ee fa ff 30 	ld.w	r10,r7[-208]
80010182:	ee f8 ff 18 	ld.w	r8,r7[-232]
80010186:	70 b8       	ld.w	r8,r8[0x2c]
80010188:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8001018c:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80010190:	ef 48 ff c8 	st.w	r7[-56],r8
80010194:	ee f9 ff 30 	ld.w	r9,r7[-208]
80010198:	ee f8 ff 18 	ld.w	r8,r7[-232]
8001019c:	70 a8       	ld.w	r8,r8[0x28]
8001019e:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
800101a2:	ee fa ff 34 	ld.w	r10,r7[-204]
800101a6:	ee f8 ff 18 	ld.w	r8,r7[-232]
800101aa:	70 98       	ld.w	r8,r8[0x24]
800101ac:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
800101b0:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
800101b4:	ef 48 ff cc 	st.w	r7[-52],r8
	//QMUL(qtmp4, front_bf, qtmp5);
	//QMUL(qtmp5, attitude->qe, front_bf);
	
	// calculate norm of compass vector
	s_mag_norm=SQR(mag_global.v[0])+SQR(mag_global.v[1])+SQR(mag_global.v[2]);
	if ((s_mag_norm>0.4*0.4)&&(s_mag_norm<1.8*1.8)) 
800101b8:	c0 a8       	rjmp	800101cc <qfilter+0x69c>
		mag_corrected_local=quat_global_to_local(attitude->qe, mag_global);		
		// omc = a x up_bf.v
		CROSS(mag_corrected_local.v, attitude->north_vec.v,  omc_mag);
		
	} else {
		omc_mag[0]=0;		omc_mag[1]=0; 		omc_mag[2]=0;
800101ba:	30 08       	mov	r8,0
800101bc:	ef 48 ff c4 	st.w	r7[-60],r8
800101c0:	30 08       	mov	r8,0
800101c2:	ef 48 ff c8 	st.w	r7[-56],r8
800101c6:	30 08       	mov	r8,0
800101c8:	ef 48 ff cc 	st.w	r7[-52],r8
	}

	for (i=0; i<3; i++){
800101cc:	30 08       	mov	r8,0
800101ce:	ef 68 ff df 	st.b	r7[-33],r8
800101d2:	c3 48       	rjmp	8001023a <qfilter+0x70a>
		qtmp1.v[i] = attitude->om[i] +attitude->kp*omc[i] +attitude->kp_mag*omc_mag[i];
800101d4:	ef 3a ff df 	ld.ub	r10,r7[-33]
800101d8:	ef 39 ff df 	ld.ub	r9,r7[-33]
800101dc:	ee f8 ff 18 	ld.w	r8,r7[-232]
800101e0:	2e 29       	sub	r9,-30
800101e2:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
800101e6:	ee f8 ff 18 	ld.w	r8,r7[-232]
800101ea:	f0 fb 00 9c 	ld.w	r11,r8[156]
800101ee:	ef 38 ff df 	ld.ub	r8,r7[-33]
800101f2:	a3 68       	lsl	r8,0x2
800101f4:	ee 08 00 08 	add	r8,r7,r8
800101f8:	f0 f8 ff d0 	ld.w	r8,r8[-48]
800101fc:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
80010200:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80010204:	ee f8 ff 18 	ld.w	r8,r7[-232]
80010208:	f0 fb 00 a4 	ld.w	r11,r8[164]
8001020c:	ef 38 ff df 	ld.ub	r8,r7[-33]
80010210:	a3 68       	lsl	r8,0x2
80010212:	ee 08 00 08 	add	r8,r7,r8
80010216:	f0 f8 ff c4 	ld.w	r8,r8[-60]
8001021a:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
8001021e:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80010222:	f4 c8 ff ff 	sub	r8,r10,-1
80010226:	a3 68       	lsl	r8,0x2
80010228:	ee 08 00 08 	add	r8,r7,r8
8001022c:	f1 49 ff 8c 	st.w	r8[-116],r9
		
	} else {
		omc_mag[0]=0;		omc_mag[1]=0; 		omc_mag[2]=0;
	}

	for (i=0; i<3; i++){
80010230:	ef 38 ff df 	ld.ub	r8,r7[-33]
80010234:	2f f8       	sub	r8,-1
80010236:	ef 68 ff df 	st.b	r7[-33],r8
8001023a:	ef 39 ff df 	ld.ub	r9,r7[-33]
8001023e:	30 28       	mov	r8,2
80010240:	f0 09 18 00 	cp.b	r9,r8
80010244:	fe 98 ff c8 	brls	800101d4 <qfilter+0x6a4>
		qtmp1.v[i] = attitude->om[i] +attitude->kp*omc[i] +attitude->kp_mag*omc_mag[i];
	}
	qtmp1.s=0;
80010248:	30 08       	mov	r8,0
8001024a:	ef 48 ff 8c 	st.w	r7[-116],r8

	// apply step rotation with corrections
	qed = quat_multi(attitude->qe,qtmp1);
8001024e:	ee ca 00 64 	sub	r10,r7,100
80010252:	20 4d       	sub	sp,16
80010254:	1a 98       	mov	r8,sp
80010256:	ee c9 00 74 	sub	r9,r7,116
8001025a:	20 08       	sub	r8,0
8001025c:	20 09       	sub	r9,0
8001025e:	72 0b       	ld.w	r11,r9[0x0]
80010260:	91 0b       	st.w	r8[0x0],r11
80010262:	72 1b       	ld.w	r11,r9[0x4]
80010264:	91 1b       	st.w	r8[0x4],r11
80010266:	72 2b       	ld.w	r11,r9[0x8]
80010268:	91 2b       	st.w	r8[0x8],r11
8001026a:	72 39       	ld.w	r9,r9[0xc]
8001026c:	91 39       	st.w	r8[0xc],r9
8001026e:	ee f9 ff 18 	ld.w	r9,r7[-232]
80010272:	20 4d       	sub	sp,16
80010274:	1a 98       	mov	r8,sp
80010276:	20 08       	sub	r8,0
80010278:	20 09       	sub	r9,0
8001027a:	72 0b       	ld.w	r11,r9[0x0]
8001027c:	91 0b       	st.w	r8[0x0],r11
8001027e:	72 1b       	ld.w	r11,r9[0x4]
80010280:	91 1b       	st.w	r8[0x4],r11
80010282:	72 2b       	ld.w	r11,r9[0x8]
80010284:	91 2b       	st.w	r8[0x8],r11
80010286:	72 39       	ld.w	r9,r9[0xc]
80010288:	91 39       	st.w	r8[0xc],r9
8001028a:	14 9c       	mov	r12,r10
8001028c:	fe b0 f8 26 	rcall	8000f2d8 <quat_multi>
80010290:	2f 8d       	sub	sp,-32

	attitude->qe.s=attitude->qe.s+qed.s*dt;
80010292:	ee f8 ff 18 	ld.w	r8,r7[-232]
80010296:	70 09       	ld.w	r9,r8[0x0]
80010298:	ee fa ff 9c 	ld.w	r10,r7[-100]
8001029c:	ee f8 ff 10 	ld.w	r8,r7[-240]
800102a0:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
800102a4:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
800102a8:	ee f8 ff 18 	ld.w	r8,r7[-232]
800102ac:	91 09       	st.w	r8[0x0],r9
	attitude->qe.v[0]+=qed.v[0]*dt;
800102ae:	ee f8 ff 18 	ld.w	r8,r7[-232]
800102b2:	70 19       	ld.w	r9,r8[0x4]
800102b4:	ee fa ff a0 	ld.w	r10,r7[-96]
800102b8:	ee f8 ff 10 	ld.w	r8,r7[-240]
800102bc:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
800102c0:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
800102c4:	ee f8 ff 18 	ld.w	r8,r7[-232]
800102c8:	91 19       	st.w	r8[0x4],r9
	attitude->qe.v[1]+=qed.v[1]*dt;
800102ca:	ee f8 ff 18 	ld.w	r8,r7[-232]
800102ce:	70 29       	ld.w	r9,r8[0x8]
800102d0:	ee fa ff a4 	ld.w	r10,r7[-92]
800102d4:	ee f8 ff 10 	ld.w	r8,r7[-240]
800102d8:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
800102dc:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
800102e0:	ee f8 ff 18 	ld.w	r8,r7[-232]
800102e4:	91 29       	st.w	r8[0x8],r9
	attitude->qe.v[2]+=qed.v[2]*dt;
800102e6:	ee f8 ff 18 	ld.w	r8,r7[-232]
800102ea:	70 39       	ld.w	r9,r8[0xc]
800102ec:	ee fa ff a8 	ld.w	r10,r7[-88]
800102f0:	ee f8 ff 10 	ld.w	r8,r7[-240]
800102f4:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
800102f8:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
800102fc:	ee f8 ff 18 	ld.w	r8,r7[-232]
80010300:	91 39       	st.w	r8[0xc],r9

	snorm=attitude->qe.s*attitude->qe.s+attitude->qe.v[0]*attitude->qe.v[0] + attitude->qe.v[1] * attitude->qe.v[1] + attitude->qe.v[2] * attitude->qe.v[2];
80010302:	ee f8 ff 18 	ld.w	r8,r7[-232]
80010306:	70 09       	ld.w	r9,r8[0x0]
80010308:	ee f8 ff 18 	ld.w	r8,r7[-232]
8001030c:	70 08       	ld.w	r8,r8[0x0]
8001030e:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80010312:	ee f8 ff 18 	ld.w	r8,r7[-232]
80010316:	70 1a       	ld.w	r10,r8[0x4]
80010318:	ee f8 ff 18 	ld.w	r8,r7[-232]
8001031c:	70 18       	ld.w	r8,r8[0x4]
8001031e:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80010322:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80010326:	ee f8 ff 18 	ld.w	r8,r7[-232]
8001032a:	70 2a       	ld.w	r10,r8[0x8]
8001032c:	ee f8 ff 18 	ld.w	r8,r7[-232]
80010330:	70 28       	ld.w	r8,r8[0x8]
80010332:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80010336:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001033a:	ee f8 ff 18 	ld.w	r8,r7[-232]
8001033e:	70 3a       	ld.w	r10,r8[0xc]
80010340:	ee f8 ff 18 	ld.w	r8,r7[-232]
80010344:	70 38       	ld.w	r8,r8[0xc]
80010346:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8001034a:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8001034e:	ef 48 ff e0 	st.w	r7[-32],r8
	if (snorm<0.0001) norm=0.01; else {
80010352:	ee fc ff e0 	ld.w	r12,r7[-32]
80010356:	f0 16 00 02 	mcall	r6[8]
8001035a:	30 05       	mov	r5,0
8001035c:	e0 68 43 2d 	mov	r8,17197
80010360:	ea 18 eb 1c 	orh	r8,0xeb1c
80010364:	e0 69 36 e2 	mov	r9,14050
80010368:	ea 19 3f 1a 	orh	r9,0x3f1a
8001036c:	f0 16 00 1c 	mcall	r6[112]
80010370:	18 98       	mov	r8,r12
80010372:	58 08       	cp.w	r8,0
80010374:	c0 20       	breq	80010378 <qfilter+0x848>
80010376:	30 15       	mov	r5,1
80010378:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
8001037c:	c0 80       	breq	8001038c <qfilter+0x85c>
8001037e:	e0 68 d7 0a 	mov	r8,55050
80010382:	ea 18 3c 23 	orh	r8,0x3c23
80010386:	ef 48 ff e4 	st.w	r7[-28],r8
8001038a:	c0 88       	rjmp	8001039a <qfilter+0x86a>
		// approximate square root by running 2 iterations of newton method
		norm=fast_sqrt(snorm);
8001038c:	ee fc ff e0 	ld.w	r12,r7[-32]
80010390:	fe b0 f9 58 	rcall	8000f640 <fast_sqrt>
80010394:	18 98       	mov	r8,r12
80010396:	ef 48 ff e4 	st.w	r7[-28],r8
		//norm=0.5*(norm+(snorm/norm));
	}	
	attitude->qe.s/= norm;
8001039a:	ee f8 ff 18 	ld.w	r8,r7[-232]
8001039e:	70 08       	ld.w	r8,r8[0x0]
800103a0:	ee fb ff e4 	ld.w	r11,r7[-28]
800103a4:	10 9c       	mov	r12,r8
800103a6:	f0 16 00 08 	mcall	r6[32]
800103aa:	18 98       	mov	r8,r12
800103ac:	10 99       	mov	r9,r8
800103ae:	ee f8 ff 18 	ld.w	r8,r7[-232]
800103b2:	91 09       	st.w	r8[0x0],r9
	attitude->qe.v[0] /= norm;
800103b4:	ee f8 ff 18 	ld.w	r8,r7[-232]
800103b8:	70 18       	ld.w	r8,r8[0x4]
800103ba:	ee fb ff e4 	ld.w	r11,r7[-28]
800103be:	10 9c       	mov	r12,r8
800103c0:	f0 16 00 08 	mcall	r6[32]
800103c4:	18 98       	mov	r8,r12
800103c6:	10 99       	mov	r9,r8
800103c8:	ee f8 ff 18 	ld.w	r8,r7[-232]
800103cc:	91 19       	st.w	r8[0x4],r9
	attitude->qe.v[1] /= norm;
800103ce:	ee f8 ff 18 	ld.w	r8,r7[-232]
800103d2:	70 28       	ld.w	r8,r8[0x8]
800103d4:	ee fb ff e4 	ld.w	r11,r7[-28]
800103d8:	10 9c       	mov	r12,r8
800103da:	f0 16 00 08 	mcall	r6[32]
800103de:	18 98       	mov	r8,r12
800103e0:	10 99       	mov	r9,r8
800103e2:	ee f8 ff 18 	ld.w	r8,r7[-232]
800103e6:	91 29       	st.w	r8[0x8],r9
	attitude->qe.v[2] /= norm;
800103e8:	ee f8 ff 18 	ld.w	r8,r7[-232]
800103ec:	70 38       	ld.w	r8,r8[0xc]
800103ee:	ee fb ff e4 	ld.w	r11,r7[-28]
800103f2:	10 9c       	mov	r12,r8
800103f4:	f0 16 00 08 	mcall	r6[32]
800103f8:	18 98       	mov	r8,r12
800103fa:	10 99       	mov	r9,r8
800103fc:	ee f8 ff 18 	ld.w	r8,r7[-232]
80010400:	91 39       	st.w	r8[0xc],r9

	// bias estimate update
	attitude->be[0]+= - dt * attitude->ki * omc[0] / attitude->sf[0];
80010402:	ee f8 ff 18 	ld.w	r8,r7[-232]
80010406:	70 c5       	ld.w	r5,r8[0x30]
80010408:	ee f8 ff 10 	ld.w	r8,r7[-240]
8001040c:	10 99       	mov	r9,r8
8001040e:	ee 19 80 00 	eorh	r9,0x8000
80010412:	ee f8 ff 18 	ld.w	r8,r7[-232]
80010416:	f0 f8 00 a0 	ld.w	r8,r8[160]
8001041a:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8001041e:	ee f8 ff d0 	ld.w	r8,r7[-48]
80010422:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80010426:	ee f9 ff 18 	ld.w	r9,r7[-232]
8001042a:	73 59       	ld.w	r9,r9[0x54]
8001042c:	12 9b       	mov	r11,r9
8001042e:	10 9c       	mov	r12,r8
80010430:	f0 16 00 08 	mcall	r6[32]
80010434:	18 98       	mov	r8,r12
80010436:	e5 a0 09 58 	cop	cp0,cr9,cr5,cr8,0x40
8001043a:	ee f8 ff 18 	ld.w	r8,r7[-232]
8001043e:	91 c9       	st.w	r8[0x30],r9
	attitude->be[1]+= - dt * attitude->ki * omc[1] / attitude->sf[1];
80010440:	ee f8 ff 18 	ld.w	r8,r7[-232]
80010444:	70 d5       	ld.w	r5,r8[0x34]
80010446:	ee f8 ff 10 	ld.w	r8,r7[-240]
8001044a:	10 99       	mov	r9,r8
8001044c:	ee 19 80 00 	eorh	r9,0x8000
80010450:	ee f8 ff 18 	ld.w	r8,r7[-232]
80010454:	f0 f8 00 a0 	ld.w	r8,r8[160]
80010458:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8001045c:	ee f8 ff d4 	ld.w	r8,r7[-44]
80010460:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80010464:	ee f9 ff 18 	ld.w	r9,r7[-232]
80010468:	73 69       	ld.w	r9,r9[0x58]
8001046a:	12 9b       	mov	r11,r9
8001046c:	10 9c       	mov	r12,r8
8001046e:	f0 16 00 08 	mcall	r6[32]
80010472:	18 98       	mov	r8,r12
80010474:	e5 a0 09 58 	cop	cp0,cr9,cr5,cr8,0x40
80010478:	ee f8 ff 18 	ld.w	r8,r7[-232]
8001047c:	91 d9       	st.w	r8[0x34],r9
	attitude->be[2]+= - dt * attitude->ki * omc[2] / attitude->sf[2];
8001047e:	ee f8 ff 18 	ld.w	r8,r7[-232]
80010482:	70 e5       	ld.w	r5,r8[0x38]
80010484:	ee f8 ff 10 	ld.w	r8,r7[-240]
80010488:	10 99       	mov	r9,r8
8001048a:	ee 19 80 00 	eorh	r9,0x8000
8001048e:	ee f8 ff 18 	ld.w	r8,r7[-232]
80010492:	f0 f8 00 a0 	ld.w	r8,r8[160]
80010496:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8001049a:	ee f8 ff d8 	ld.w	r8,r7[-40]
8001049e:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
800104a2:	ee f9 ff 18 	ld.w	r9,r7[-232]
800104a6:	73 79       	ld.w	r9,r9[0x5c]
800104a8:	12 9b       	mov	r11,r9
800104aa:	10 9c       	mov	r12,r8
800104ac:	f0 16 00 08 	mcall	r6[32]
800104b0:	18 98       	mov	r8,r12
800104b2:	e5 a0 09 58 	cop	cp0,cr9,cr5,cr8,0x40
800104b6:	ee f8 ff 18 	ld.w	r8,r7[-232]
800104ba:	91 e9       	st.w	r8[0x38],r9
	// bias estimate update
	//attitude->be[6]+= - dt * attitude->ki_mag * omc[0];
	//attitude->be[7]+= - dt * attitude->ki_mag * omc[1];
	//attitude->be[8]+= - dt * attitude->ki_mag * omc[2];

	switch (attitude->calibration_level) {
800104bc:	ee f8 ff 18 	ld.w	r8,r7[-232]
800104c0:	f1 38 00 b8 	ld.ub	r8,r8[184]
800104c4:	58 18       	cp.w	r8,1
800104c6:	c1 c0       	breq	800104fe <qfilter+0x9ce>
800104c8:	58 28       	cp.w	r8,2
800104ca:	c3 00       	breq	8001052a <qfilter+0x9fa>
800104cc:	58 08       	cp.w	r8,0
800104ce:	e0 81 00 94 	brne	800105f6 <qfilter+0xac6>
		case OFF:
			kp=attitude->kp;//*(0.1/(0.1+s_acc_norm-1.0));
800104d2:	ee f8 ff 18 	ld.w	r8,r7[-232]
800104d6:	f0 f8 00 9c 	ld.w	r8,r8[156]
800104da:	ef 48 ff f8 	st.w	r7[-8],r8
			attitude->ki=attitude->kp/15.0;
800104de:	ee f8 ff 18 	ld.w	r8,r7[-232]
800104e2:	f0 f8 00 9c 	ld.w	r8,r8[156]
800104e6:	fc 1b 41 70 	movh	r11,0x4170
800104ea:	10 9c       	mov	r12,r8
800104ec:	f0 16 00 08 	mcall	r6[32]
800104f0:	18 98       	mov	r8,r12
800104f2:	10 99       	mov	r9,r8
800104f4:	ee f8 ff 18 	ld.w	r8,r7[-232]
800104f8:	f1 49 00 a0 	st.w	r8[160],r9
			break;
800104fc:	c9 28       	rjmp	80010620 <qfilter+0xaf0>
		case LEVELING:
			kp=0.3;
800104fe:	e0 68 99 9a 	mov	r8,39322
80010502:	ea 18 3e 99 	orh	r8,0x3e99
80010506:	ef 48 ff f8 	st.w	r7[-8],r8
			attitude->ki=attitude->kp/10.0;
8001050a:	ee f8 ff 18 	ld.w	r8,r7[-232]
8001050e:	f0 f8 00 9c 	ld.w	r8,r8[156]
80010512:	fc 1b 41 20 	movh	r11,0x4120
80010516:	10 9c       	mov	r12,r8
80010518:	f0 16 00 08 	mcall	r6[32]
8001051c:	18 98       	mov	r8,r12
8001051e:	10 99       	mov	r9,r8
80010520:	ee f8 ff 18 	ld.w	r8,r7[-232]
80010524:	f1 49 00 a0 	st.w	r8[160],r9
			break;
80010528:	c7 c8       	rjmp	80010620 <qfilter+0xaf0>
		case LEVEL_PLUS_ACCEL:
			kp=0.3;
8001052a:	e0 68 99 9a 	mov	r8,39322
8001052e:	ea 18 3e 99 	orh	r8,0x3e99
80010532:	ef 48 ff f8 	st.w	r7[-8],r8
			attitude->ki=attitude->kp/10.0;
80010536:	ee f8 ff 18 	ld.w	r8,r7[-232]
8001053a:	f0 f8 00 9c 	ld.w	r8,r8[156]
8001053e:	fc 1b 41 20 	movh	r11,0x4120
80010542:	10 9c       	mov	r12,r8
80010544:	f0 16 00 08 	mcall	r6[32]
80010548:	18 98       	mov	r8,r12
8001054a:	10 99       	mov	r9,r8
8001054c:	ee f8 ff 18 	ld.w	r8,r7[-232]
80010550:	f1 49 00 a0 	st.w	r8[160],r9
			attitude->be[3]+=   dt * attitude->kp * (attitude->a[0]-up_bf.v[0]);
80010554:	ee f8 ff 18 	ld.w	r8,r7[-232]
80010558:	70 f9       	ld.w	r9,r8[0x3c]
8001055a:	ee f8 ff 18 	ld.w	r8,r7[-232]
8001055e:	f0 fa 00 9c 	ld.w	r10,r8[156]
80010562:	ee f8 ff 10 	ld.w	r8,r7[-240]
80010566:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
8001056a:	ee f8 ff 18 	ld.w	r8,r7[-232]
8001056e:	f0 fb 00 84 	ld.w	r11,r8[132]
80010572:	ee f8 ff 70 	ld.w	r8,r7[-144]
80010576:	e5 a1 08 b8 	cop	cp0,cr8,cr11,cr8,0x42
8001057a:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8001057e:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80010582:	ee f8 ff 18 	ld.w	r8,r7[-232]
80010586:	91 f9       	st.w	r8[0x3c],r9
			attitude->be[4]+=   dt * attitude->kp * (attitude->a[1]-up_bf.v[1]);
80010588:	ee f8 ff 18 	ld.w	r8,r7[-232]
8001058c:	71 09       	ld.w	r9,r8[0x40]
8001058e:	ee f8 ff 18 	ld.w	r8,r7[-232]
80010592:	f0 fa 00 9c 	ld.w	r10,r8[156]
80010596:	ee f8 ff 10 	ld.w	r8,r7[-240]
8001059a:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
8001059e:	ee f8 ff 18 	ld.w	r8,r7[-232]
800105a2:	f0 fb 00 88 	ld.w	r11,r8[136]
800105a6:	ee f8 ff 74 	ld.w	r8,r7[-140]
800105aa:	e5 a1 08 b8 	cop	cp0,cr8,cr11,cr8,0x42
800105ae:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
800105b2:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
800105b6:	ee f8 ff 18 	ld.w	r8,r7[-232]
800105ba:	f1 49 00 40 	st.w	r8[64],r9
			attitude->be[5]+=   dt * attitude->kp * (attitude->a[2]-up_bf.v[2]);
800105be:	ee f8 ff 18 	ld.w	r8,r7[-232]
800105c2:	71 19       	ld.w	r9,r8[0x44]
800105c4:	ee f8 ff 18 	ld.w	r8,r7[-232]
800105c8:	f0 fa 00 9c 	ld.w	r10,r8[156]
800105cc:	ee f8 ff 10 	ld.w	r8,r7[-240]
800105d0:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
800105d4:	ee f8 ff 18 	ld.w	r8,r7[-232]
800105d8:	f0 fb 00 8c 	ld.w	r11,r8[140]
800105dc:	ee f8 ff 78 	ld.w	r8,r7[-136]
800105e0:	e5 a1 08 b8 	cop	cp0,cr8,cr11,cr8,0x42
800105e4:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
800105e8:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
800105ec:	ee f8 ff 18 	ld.w	r8,r7[-232]
800105f0:	f1 49 00 44 	st.w	r8[68],r9
			break;
800105f4:	c1 68       	rjmp	80010620 <qfilter+0xaf0>
		default:
			kp=attitude->kp;
800105f6:	ee f8 ff 18 	ld.w	r8,r7[-232]
800105fa:	f0 f8 00 9c 	ld.w	r8,r8[156]
800105fe:	ef 48 ff f8 	st.w	r7[-8],r8
			attitude->ki=attitude->kp/15.0;
80010602:	ee f8 ff 18 	ld.w	r8,r7[-232]
80010606:	f0 f8 00 9c 	ld.w	r8,r8[156]
8001060a:	fc 1b 41 70 	movh	r11,0x4170
8001060e:	10 9c       	mov	r12,r8
80010610:	f0 16 00 08 	mcall	r6[32]
80010614:	18 98       	mov	r8,r12
80010616:	10 99       	mov	r9,r8
80010618:	ee f8 ff 18 	ld.w	r8,r7[-232]
8001061c:	f1 49 00 a0 	st.w	r8[160],r9
			break;
	}

	// set up-vector (bodyframe) in attitude
	attitude->up_vec.v[0]=up_bf.v[0];
80010620:	ee f9 ff 70 	ld.w	r9,r7[-144]
80010624:	ee f8 ff 18 	ld.w	r8,r7[-232]
80010628:	91 59       	st.w	r8[0x14],r9
	attitude->up_vec.v[1]=up_bf.v[1];
8001062a:	ee f9 ff 74 	ld.w	r9,r7[-140]
8001062e:	ee f8 ff 18 	ld.w	r8,r7[-232]
80010632:	91 69       	st.w	r8[0x18],r9
	attitude->up_vec.v[2]=up_bf.v[2];
80010634:	ee f9 ff 78 	ld.w	r9,r7[-136]
80010638:	ee f8 ff 18 	ld.w	r8,r7[-232]
8001063c:	91 79       	st.w	r8[0x1c],r9
	
}
8001063e:	2b fd       	sub	sp,-260
80010640:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
80010644:	80 00       	ld.sh	r0,r0[0x0]
80010646:	f9 c2       	*unknown*

80010648 <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
80010648:	eb cd 40 c0 	pushm	r6-r7,lr
8001064c:	1a 97       	mov	r7,sp
8001064e:	20 6d       	sub	sp,24
80010650:	49 e6       	lddpc	r6,800106c8 <interpolate+0x80>
80010652:	1e 26       	rsub	r6,pc
80010654:	ef 4c ff f8 	st.w	r7[-8],r12
80010658:	ef 4b ff f4 	st.w	r7[-12],r11
8001065c:	ef 4a ff f0 	st.w	r7[-16],r10
80010660:	ef 49 ff ec 	st.w	r7[-20],r9
80010664:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
80010668:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001066c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80010670:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
80010674:	c0 41       	brne	8001067c <interpolate+0x34>
	{
		return y1;
80010676:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001067a:	c2 38       	rjmp	800106c0 <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
8001067c:	ee f9 ff e8 	ld.w	r9,r7[-24]
80010680:	ee f8 ff ec 	ld.w	r8,r7[-20]
80010684:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80010688:	ee fa ff f8 	ld.w	r10,r7[-8]
8001068c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80010690:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80010694:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80010698:	ee fa ff f0 	ld.w	r10,r7[-16]
8001069c:	ee f9 ff f4 	ld.w	r9,r7[-12]
800106a0:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
800106a4:	12 9b       	mov	r11,r9
800106a6:	10 9c       	mov	r12,r8
800106a8:	f0 16 00 08 	mcall	r6[32]
800106ac:	18 98       	mov	r8,r12
800106ae:	10 99       	mov	r9,r8
800106b0:	ee f8 ff ec 	ld.w	r8,r7[-20]
800106b4:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
800106b8:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
800106bc:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
800106c0:	10 9c       	mov	r12,r8
800106c2:	2f ad       	sub	sp,-24
800106c4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800106c8:	80 01       	ld.sh	r1,r0[0x0]
800106ca:	04 d6       	st.w	--r2,r6

800106cc <mav_array_memcpy>:

/*
  like memcpy(), but if src is NULL, do a memset to zero
*/
static void mav_array_memcpy(void *dest, const void *src, size_t n)
{
800106cc:	eb cd 40 c0 	pushm	r6-r7,lr
800106d0:	1a 97       	mov	r7,sp
800106d2:	20 3d       	sub	sp,12
800106d4:	49 06       	lddpc	r6,80010714 <mav_array_memcpy+0x48>
800106d6:	1e 26       	rsub	r6,pc
800106d8:	ef 4c ff fc 	st.w	r7[-4],r12
800106dc:	ef 4b ff f8 	st.w	r7[-8],r11
800106e0:	ef 4a ff f4 	st.w	r7[-12],r10
	if (src == NULL) {
800106e4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800106e8:	58 08       	cp.w	r8,0
800106ea:	c0 91       	brne	800106fc <mav_array_memcpy+0x30>
		memset(dest, 0, n);
800106ec:	ee fa ff f4 	ld.w	r10,r7[-12]
800106f0:	30 0b       	mov	r11,0
800106f2:	ee fc ff fc 	ld.w	r12,r7[-4]
800106f6:	f0 16 00 2f 	mcall	r6[188]
800106fa:	c0 98       	rjmp	8001070c <mav_array_memcpy+0x40>
	} else {
		memcpy(dest, src, n);
800106fc:	ee fa ff f4 	ld.w	r10,r7[-12]
80010700:	ee fb ff f8 	ld.w	r11,r7[-8]
80010704:	ee fc ff fc 	ld.w	r12,r7[-4]
80010708:	f0 16 00 20 	mcall	r6[128]
	}
}
8001070c:	2f dd       	sub	sp,-12
8001070e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80010712:	00 00       	add	r0,r0
80010714:	80 01       	ld.sh	r1,r0[0x0]
80010716:	05 5a       	ld.sh	r10,--r2

80010718 <initialise_central_data>:
#include "conf_sim_model.h"


static volatile central_data_t centralData;

void initialise_central_data(){
80010718:	eb cd 40 c0 	pushm	r6-r7,lr
8001071c:	1a 97       	mov	r7,sp
8001071e:	4d 86       	lddpc	r6,8001087c <initialise_central_data+0x164>
80010720:	1e 26       	rsub	r6,pc
		
		// init controls
		centralData.controls.rpy[ROLL]=0;
80010722:	ec f8 00 64 	ld.w	r8,r6[100]
80010726:	30 09       	mov	r9,0
80010728:	f1 49 01 48 	st.w	r8[328],r9
		centralData.controls.rpy[PITCH]=0;
8001072c:	ec f8 00 64 	ld.w	r8,r6[100]
80010730:	30 09       	mov	r9,0
80010732:	f1 49 01 4c 	st.w	r8[332],r9
		centralData.controls.rpy[YAW]=0;
80010736:	ec f8 00 64 	ld.w	r8,r6[100]
8001073a:	30 09       	mov	r9,0
8001073c:	f1 49 01 50 	st.w	r8[336],r9
		centralData.controls.thrust=-1.0;
80010740:	ec f8 00 64 	ld.w	r8,r6[100]
80010744:	fc 19 bf 80 	movh	r9,0xbf80
80010748:	f1 49 01 54 	st.w	r8[340],r9
		
		// init stabilisers
		init_stabilisation_copter(&centralData.stabiliser_stack);
8001074c:	ec f8 00 64 	ld.w	r8,r6[100]
80010750:	f0 c8 fe 60 	sub	r8,r8,-416
80010754:	10 9c       	mov	r12,r8
80010756:	f0 16 01 72 	mcall	r6[1480]
		// centralData.stabilisers_stack = 

		centralData.simulation_mode=0;
8001075a:	ec f8 00 64 	ld.w	r8,r6[100]
8001075e:	30 09       	mov	r9,0
80010760:	f1 49 10 c0 	st.w	r8[4288],r9

		// init waypoint navigation
		centralData.number_of_waypoints = 0;		
80010764:	ec f9 00 64 	ld.w	r9,r6[100]
80010768:	30 08       	mov	r8,0
8001076a:	f3 58 10 1c 	st.h	r9[4124],r8
		centralData.waypoint_set = false;
8001076e:	ec f9 00 64 	ld.w	r9,r6[100]
80010772:	30 08       	mov	r8,0
80010774:	f3 68 10 b4 	st.b	r9[4276],r8
		centralData.waypoint_sending = false;
80010778:	ec f9 00 64 	ld.w	r9,r6[100]
8001077c:	30 08       	mov	r8,0
8001077e:	f3 68 10 b5 	st.b	r9[4277],r8
		centralData.waypoint_receiving = false;
80010782:	ec f9 00 64 	ld.w	r9,r6[100]
80010786:	30 08       	mov	r8,0
80010788:	f3 68 10 b6 	st.b	r9[4278],r8
		centralData.waypoint_hold_init = false;
8001078c:	ec f9 00 64 	ld.w	r9,r6[100]
80010790:	30 08       	mov	r8,0
80010792:	f3 68 10 b7 	st.b	r9[4279],r8
		centralData.critical_landing = false;
80010796:	ec f9 00 64 	ld.w	r9,r6[100]
8001079a:	30 08       	mov	r8,0
8001079c:	f3 68 10 b8 	st.b	r9[4280],r8
		centralData.critical_init = false;
800107a0:	ec f9 00 64 	ld.w	r9,r6[100]
800107a4:	30 08       	mov	r8,0
800107a6:	f3 68 10 b9 	st.b	r9[4281],r8
		centralData.collision_avoidance = false;
800107aa:	ec f9 00 64 	ld.w	r9,r6[100]
800107ae:	30 08       	mov	r8,0
800107b0:	f3 68 10 bb 	st.b	r9[4283],r8

		// default GPS home position
		centralData.position_estimator.localPosition.origin.longitude=   HOME_LONGITUDE;
800107b4:	ec fa 00 64 	ld.w	r10,r6[100]
800107b8:	e0 68 33 27 	mov	r8,13095
800107bc:	ea 18 3f a0 	orh	r8,0x3fa0
800107c0:	e0 69 43 a1 	mov	r9,17313
800107c4:	ea 19 40 1a 	orh	r9,0x401a
800107c8:	f4 e9 0d ac 	st.d	r10[3500],r8
		centralData.position_estimator.localPosition.origin.latitude =   HOME_LATITUDE;
800107cc:	ec fa 00 64 	ld.w	r10,r6[100]
800107d0:	e0 68 f8 9c 	mov	r8,63644
800107d4:	ea 18 f0 d4 	orh	r8,0xf0d4
800107d8:	e0 69 42 5e 	mov	r9,16990
800107dc:	ea 19 40 47 	orh	r9,0x4047
800107e0:	f4 e9 0d b4 	st.d	r10[3508],r8
		centralData.position_estimator.localPosition.origin.altitude =   HOME_ALTITUDE;
800107e4:	ec f8 00 64 	ld.w	r8,r6[100]
800107e8:	fc 19 43 c8 	movh	r9,0x43c8
800107ec:	f1 49 0d bc 	st.w	r8[3516],r9
		centralData.position_estimator.localPosition.pos[0]=0;
800107f0:	ec f8 00 64 	ld.w	r8,r6[100]
800107f4:	30 09       	mov	r9,0
800107f6:	f1 49 0d 9c 	st.w	r8[3484],r9
		centralData.position_estimator.localPosition.pos[1]=0;
800107fa:	ec f8 00 64 	ld.w	r8,r6[100]
800107fe:	30 09       	mov	r9,0
80010800:	f1 49 0d a0 	st.w	r8[3488],r9
		centralData.position_estimator.localPosition.pos[2]=0;
80010804:	ec f8 00 64 	ld.w	r8,r6[100]
80010808:	30 09       	mov	r9,0
8001080a:	f1 49 0d a4 	st.w	r8[3492],r9

		// init simulation
		init_simulation(&(centralData.sim_model),&(centralData.imu1.attitude));
8001080e:	ec f8 00 64 	ld.w	r8,r6[100]
80010812:	f0 c8 f4 58 	sub	r8,r8,-2984
80010816:	ec fb 00 64 	ld.w	r11,r6[100]
8001081a:	10 9c       	mov	r12,r8
8001081c:	f0 16 01 dd 	mcall	r6[1908]
		centralData.sim_model.localPosition = centralData.position_estimator.localPosition;
80010820:	ec f9 00 64 	ld.w	r9,r6[100]
80010824:	ec f8 00 64 	ld.w	r8,r6[100]
80010828:	f2 cb f3 44 	sub	r11,r9,-3260
8001082c:	f0 ca f2 64 	sub	r10,r8,-3484
80010830:	f6 c8 00 00 	sub	r8,r11,0
80010834:	f4 c9 00 00 	sub	r9,r10,0
80010838:	72 0c       	ld.w	r12,r9[0x0]
8001083a:	91 0c       	st.w	r8[0x0],r12
8001083c:	72 1c       	ld.w	r12,r9[0x4]
8001083e:	91 1c       	st.w	r8[0x4],r12
80010840:	72 2c       	ld.w	r12,r9[0x8]
80010842:	91 2c       	st.w	r8[0x8],r12
80010844:	72 39       	ld.w	r9,r9[0xc]
80010846:	91 39       	st.w	r8[0xc],r9
80010848:	f6 c8 ff f0 	sub	r8,r11,-16
8001084c:	f4 c9 ff f0 	sub	r9,r10,-16
80010850:	72 0c       	ld.w	r12,r9[0x0]
80010852:	91 0c       	st.w	r8[0x0],r12
80010854:	72 1c       	ld.w	r12,r9[0x4]
80010856:	91 1c       	st.w	r8[0x4],r12
80010858:	72 2c       	ld.w	r12,r9[0x8]
8001085a:	91 2c       	st.w	r8[0x8],r12
8001085c:	72 39       	ld.w	r9,r9[0xc]
8001085e:	91 39       	st.w	r8[0xc],r9
80010860:	f6 c8 ff e0 	sub	r8,r11,-32
80010864:	f4 c9 ff e0 	sub	r9,r10,-32
80010868:	72 0a       	ld.w	r10,r9[0x0]
8001086a:	91 0a       	st.w	r8[0x0],r10
8001086c:	72 1a       	ld.w	r10,r9[0x4]
8001086e:	91 1a       	st.w	r8[0x4],r10
80010870:	72 2a       	ld.w	r10,r9[0x8]
80010872:	91 2a       	st.w	r8[0x8],r10
80010874:	72 39       	ld.w	r9,r9[0xc]
80010876:	91 39       	st.w	r8[0xc],r9
		
		//init_waypoint_list(centralData.waypoint_list,&(centralData.number_of_waypoints));

}
80010878:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001087c:	80 01       	ld.sh	r1,r0[0x0]
8001087e:	05 a4       	ld.ub	r4,r2[0x2]

80010880 <get_central_data>:

central_data_t* get_central_data(void)
{
80010880:	eb cd 40 c0 	pushm	r6-r7,lr
80010884:	1a 97       	mov	r7,sp
80010886:	48 46       	lddpc	r6,80010894 <get_central_data+0x14>
80010888:	1e 26       	rsub	r6,pc
	return &centralData;
8001088a:	ec f8 00 64 	ld.w	r8,r6[100]
}
8001088e:	10 9c       	mov	r12,r8
80010890:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80010894:	80 01       	ld.sh	r1,r0[0x0]
80010896:	07 0c       	ld.w	r12,r3++

80010898 <get_telemetry_upstream>:

byte_stream_t* get_telemetry_upstream() {
80010898:	eb cd 40 c0 	pushm	r6-r7,lr
8001089c:	1a 97       	mov	r7,sp
8001089e:	48 56       	lddpc	r6,800108b0 <get_telemetry_upstream+0x18>
800108a0:	1e 26       	rsub	r6,pc
	return centralData.telemetry_up_stream;
800108a2:	ec f8 00 64 	ld.w	r8,r6[100]
800108a6:	f0 f8 0e 00 	ld.w	r8,r8[3584]
}
800108aa:	10 9c       	mov	r12,r8
800108ac:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800108b0:	80 01       	ld.sh	r1,r0[0x0]
800108b2:	07 24       	ld.uh	r4,r3++

800108b4 <get_telemetry_downstream>:
byte_stream_t* get_telemetry_downstream() {
800108b4:	eb cd 40 c0 	pushm	r6-r7,lr
800108b8:	1a 97       	mov	r7,sp
800108ba:	48 56       	lddpc	r6,800108cc <get_telemetry_downstream+0x18>
800108bc:	1e 26       	rsub	r6,pc
	return centralData.telemetry_down_stream;
800108be:	ec f8 00 64 	ld.w	r8,r6[100]
800108c2:	f0 f8 0d fc 	ld.w	r8,r8[3580]
}
800108c6:	10 9c       	mov	r12,r8
800108c8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800108cc:	80 01       	ld.sh	r1,r0[0x0]
800108ce:	07 40       	ld.w	r0,--r3

800108d0 <get_debug_stream>:
byte_stream_t* get_debug_stream() {
800108d0:	eb cd 40 c0 	pushm	r6-r7,lr
800108d4:	1a 97       	mov	r7,sp
800108d6:	48 56       	lddpc	r6,800108e8 <get_debug_stream+0x18>
800108d8:	1e 26       	rsub	r6,pc
	return centralData.debug_out_stream;
800108da:	ec f8 00 64 	ld.w	r8,r6[100]
800108de:	f0 f8 0e 04 	ld.w	r8,r8[3588]
}
800108e2:	10 9c       	mov	r12,r8
800108e4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800108e8:	80 01       	ld.sh	r1,r0[0x0]
800108ea:	07 5c       	ld.sh	r12,--r3

800108ec <get_imu_data>:

Imu_Data_t* get_imu_data() {
800108ec:	eb cd 40 c0 	pushm	r6-r7,lr
800108f0:	1a 97       	mov	r7,sp
800108f2:	48 46       	lddpc	r6,80010900 <get_imu_data+0x14>
800108f4:	1e 26       	rsub	r6,pc
	return &centralData.imu1;
800108f6:	ec f8 00 64 	ld.w	r8,r6[100]
}
800108fa:	10 9c       	mov	r12,r8
800108fc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80010900:	80 01       	ld.sh	r1,r0[0x0]
80010902:	07 78       	ld.ub	r8,--r3

80010904 <get_control_inputs_data>:
Control_Command_t* get_control_inputs_data() {
80010904:	eb cd 40 c0 	pushm	r6-r7,lr
80010908:	1a 97       	mov	r7,sp
8001090a:	48 56       	lddpc	r6,8001091c <get_control_inputs_data+0x18>
8001090c:	1e 26       	rsub	r6,pc
	return &centralData.controls;
8001090e:	ec f8 00 64 	ld.w	r8,r6[100]
80010912:	f0 c8 fe b8 	sub	r8,r8,-328
80010916:	10 9c       	mov	r12,r8
80010918:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001091c:	80 01       	ld.sh	r1,r0[0x0]
8001091e:	07 90       	ld.ub	r0,r3[0x1]

80010920 <crc_accumulate>:
 *
 * @param data new char to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate(uint8_t data, uint16_t *crcAccum)
{
80010920:	eb cd 40 80 	pushm	r7,lr
80010924:	1a 97       	mov	r7,sp
80010926:	20 3d       	sub	sp,12
80010928:	18 98       	mov	r8,r12
8001092a:	ef 4b ff f4 	st.w	r7[-12],r11
8001092e:	ef 68 ff f8 	st.b	r7[-8],r8
        /*Accumulate one byte of data into the CRC*/
        uint8_t tmp;

        tmp = data ^ (uint8_t)(*crcAccum &0xff);
80010932:	ee f8 ff f4 	ld.w	r8,r7[-12]
80010936:	90 08       	ld.sh	r8,r8[0x0]
80010938:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8001093c:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80010940:	f3 e8 20 08 	eor	r8,r9,r8
80010944:	ef 68 ff ff 	st.b	r7[-1],r8
        tmp ^= (tmp<<4);
80010948:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8001094c:	a5 68       	lsl	r8,0x4
8001094e:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80010952:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80010956:	f3 e8 20 08 	eor	r8,r9,r8
8001095a:	5c 58       	castu.b	r8
8001095c:	ef 68 ff ff 	st.b	r7[-1],r8
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
80010960:	ee f8 ff f4 	ld.w	r8,r7[-12]
80010964:	90 08       	ld.sh	r8,r8[0x0]
80010966:	5c 78       	castu.h	r8
80010968:	a9 88       	lsr	r8,0x8
8001096a:	5c 88       	casts.h	r8
8001096c:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
80010970:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80010974:	a9 68       	lsl	r8,0x8
80010976:	5c 88       	casts.h	r8
80010978:	f3 e8 20 08 	eor	r8,r9,r8
8001097c:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
80010980:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80010984:	a3 78       	lsl	r8,0x3
80010986:	5c 88       	casts.h	r8
80010988:	f3 e8 20 08 	eor	r8,r9,r8
8001098c:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
80010990:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80010994:	a5 88       	lsr	r8,0x4
80010996:	5c 58       	castu.b	r8
80010998:	f3 e8 20 08 	eor	r8,r9,r8
8001099c:	5c 88       	casts.h	r8
8001099e:	ee f9 ff f4 	ld.w	r9,r7[-12]
800109a2:	b2 08       	st.h	r9[0x0],r8
}
800109a4:	2f dd       	sub	sp,-12
800109a6:	e3 cd 80 80 	ldm	sp++,r7,pc

800109aa <crc_init>:
 * @brief Initiliaze the buffer for the X.25 CRC
 *
 * @param crcAccum the 16 bit X.25 CRC
 */
static inline void crc_init(uint16_t* crcAccum)
{
800109aa:	eb cd 40 80 	pushm	r7,lr
800109ae:	1a 97       	mov	r7,sp
800109b0:	20 1d       	sub	sp,4
800109b2:	ef 4c ff fc 	st.w	r7[-4],r12
        *crcAccum = X25_INIT_CRC;
800109b6:	ee f9 ff fc 	ld.w	r9,r7[-4]
800109ba:	3f f8       	mov	r8,-1
800109bc:	b2 08       	st.h	r9[0x0],r8
}
800109be:	2f fd       	sub	sp,-4
800109c0:	e3 cd 80 80 	ldm	sp++,r7,pc

800109c4 <crc_calculate>:
 * @param  pBuffer buffer containing the byte array to hash
 * @param  length  length of the byte array
 * @return the checksum over the buffer bytes
 **/
static inline uint16_t crc_calculate(const uint8_t* pBuffer, uint16_t length)
{
800109c4:	eb cd 40 c0 	pushm	r6-r7,lr
800109c8:	1a 97       	mov	r7,sp
800109ca:	20 3d       	sub	sp,12
800109cc:	49 76       	lddpc	r6,80010a28 <crc_calculate+0x64>
800109ce:	1e 26       	rsub	r6,pc
800109d0:	ef 4c ff f8 	st.w	r7[-8],r12
800109d4:	16 98       	mov	r8,r11
800109d6:	ef 58 ff f4 	st.h	r7[-12],r8
        uint16_t crcTmp;
        crc_init(&crcTmp);
800109da:	ee c8 00 02 	sub	r8,r7,2
800109de:	10 9c       	mov	r12,r8
800109e0:	ce 5f       	rcall	800109aa <crc_init>
	while (length--) {
800109e2:	c0 e8       	rjmp	800109fe <crc_calculate+0x3a>
                crc_accumulate(*pBuffer++, &crcTmp);
800109e4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800109e8:	11 88       	ld.ub	r8,r8[0x0]
800109ea:	ee f9 ff f8 	ld.w	r9,r7[-8]
800109ee:	2f f9       	sub	r9,-1
800109f0:	ef 49 ff f8 	st.w	r7[-8],r9
800109f4:	ee c9 00 02 	sub	r9,r7,2
800109f8:	12 9b       	mov	r11,r9
800109fa:	10 9c       	mov	r12,r8
800109fc:	c9 2f       	rcall	80010920 <crc_accumulate>
 **/
static inline uint16_t crc_calculate(const uint8_t* pBuffer, uint16_t length)
{
        uint16_t crcTmp;
        crc_init(&crcTmp);
	while (length--) {
800109fe:	ef 09 ff f4 	ld.sh	r9,r7[-12]
80010a02:	30 08       	mov	r8,0
80010a04:	f0 09 19 00 	cp.h	r9,r8
80010a08:	5f 18       	srne	r8
80010a0a:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80010a0e:	ef 08 ff f4 	ld.sh	r8,r7[-12]
80010a12:	20 18       	sub	r8,1
80010a14:	ef 58 ff f4 	st.h	r7[-12],r8
80010a18:	58 09       	cp.w	r9,0
80010a1a:	ce 51       	brne	800109e4 <crc_calculate+0x20>
                crc_accumulate(*pBuffer++, &crcTmp);
        }
        return crcTmp;
80010a1c:	ef 08 ff fe 	ld.sh	r8,r7[-2]
}
80010a20:	10 9c       	mov	r12,r8
80010a22:	2f dd       	sub	sp,-12
80010a24:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80010a28:	80 01       	ld.sh	r1,r0[0x0]
80010a2a:	08 52       	eor	r2,r4

80010a2c <crc_accumulate_buffer>:
 *
 * @param data new bytes to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate_buffer(uint16_t *crcAccum, const char *pBuffer, uint8_t length)
{
80010a2c:	eb cd 40 c0 	pushm	r6-r7,lr
80010a30:	1a 97       	mov	r7,sp
80010a32:	20 4d       	sub	sp,16
80010a34:	49 66       	lddpc	r6,80010a8c <crc_accumulate_buffer+0x60>
80010a36:	1e 26       	rsub	r6,pc
80010a38:	ef 4c ff f8 	st.w	r7[-8],r12
80010a3c:	ef 4b ff f4 	st.w	r7[-12],r11
80010a40:	14 98       	mov	r8,r10
80010a42:	ef 68 ff f0 	st.b	r7[-16],r8
	const uint8_t *p = (const uint8_t *)pBuffer;
80010a46:	ee f8 ff f4 	ld.w	r8,r7[-12]
80010a4a:	ef 48 ff fc 	st.w	r7[-4],r8
	while (length--) {
80010a4e:	c0 d8       	rjmp	80010a68 <crc_accumulate_buffer+0x3c>
                crc_accumulate(*p++, crcAccum);
80010a50:	ee f8 ff fc 	ld.w	r8,r7[-4]
80010a54:	11 88       	ld.ub	r8,r8[0x0]
80010a56:	ee f9 ff fc 	ld.w	r9,r7[-4]
80010a5a:	2f f9       	sub	r9,-1
80010a5c:	ef 49 ff fc 	st.w	r7[-4],r9
80010a60:	ee fb ff f8 	ld.w	r11,r7[-8]
80010a64:	10 9c       	mov	r12,r8
80010a66:	c5 df       	rcall	80010920 <crc_accumulate>
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate_buffer(uint16_t *crcAccum, const char *pBuffer, uint8_t length)
{
	const uint8_t *p = (const uint8_t *)pBuffer;
	while (length--) {
80010a68:	ef 39 ff f0 	ld.ub	r9,r7[-16]
80010a6c:	30 08       	mov	r8,0
80010a6e:	f0 09 18 00 	cp.b	r9,r8
80010a72:	5f 18       	srne	r8
80010a74:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80010a78:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80010a7c:	20 18       	sub	r8,1
80010a7e:	ef 68 ff f0 	st.b	r7[-16],r8
80010a82:	58 09       	cp.w	r9,0
80010a84:	ce 61       	brne	80010a50 <crc_accumulate_buffer+0x24>
                crc_accumulate(*p++, crcAccum);
        }
}
80010a86:	2f cd       	sub	sp,-16
80010a88:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80010a8c:	80 01       	ld.sh	r1,r0[0x0]
80010a8e:	08 ba       	st.h	r4++,r10

80010a90 <mavlink_get_channel_status>:
/*
 * Internal function to give access to the channel status for each channel
 */
#ifndef MAVLINK_GET_CHANNEL_STATUS
MAVLINK_HELPER mavlink_status_t* mavlink_get_channel_status(uint8_t chan)
{
80010a90:	eb cd 40 c0 	pushm	r6-r7,lr
80010a94:	1a 97       	mov	r7,sp
80010a96:	20 1d       	sub	sp,4
80010a98:	48 96       	lddpc	r6,80010abc <mavlink_get_channel_status+0x2c>
80010a9a:	1e 26       	rsub	r6,pc
80010a9c:	18 98       	mov	r8,r12
80010a9e:	ef 68 ff fc 	st.b	r7[-4],r8
	static mavlink_status_t m_mavlink_status[MAVLINK_COMM_NUM_BUFFERS];
	return &m_mavlink_status[chan];
80010aa2:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80010aa6:	f0 09 15 04 	lsl	r9,r8,0x4
80010aaa:	ec f8 08 e0 	ld.w	r8,r6[2272]
80010aae:	f2 08 00 08 	add	r8,r9,r8
}
80010ab2:	10 9c       	mov	r12,r8
80010ab4:	2f fd       	sub	sp,-4
80010ab6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80010aba:	00 00       	add	r0,r0
80010abc:	80 01       	ld.sh	r1,r0[0x0]
80010abe:	09 1e       	ld.sh	lr,r4++

80010ac0 <_mav_finalize_message_chan_send>:
MAVLINK_HELPER void _mav_finalize_message_chan_send(mavlink_channel_t chan, uint8_t msgid, const char *packet, 
						    uint8_t length, uint8_t crc_extra)
#else
MAVLINK_HELPER void _mav_finalize_message_chan_send(mavlink_channel_t chan, uint8_t msgid, const char *packet, uint8_t length)
#endif
{
80010ac0:	eb cd 40 c0 	pushm	r6-r7,lr
80010ac4:	1a 97       	mov	r7,sp
80010ac6:	20 9d       	sub	sp,36
80010ac8:	4b d6       	lddpc	r6,80010bbc <_mav_finalize_message_chan_send+0xfc>
80010aca:	1e 26       	rsub	r6,pc
80010acc:	ef 4c ff ec 	st.w	r7[-20],r12
80010ad0:	ef 4a ff e4 	st.w	r7[-28],r10
80010ad4:	16 9a       	mov	r10,r11
80010ad6:	ef 6a ff e8 	st.b	r7[-24],r10
80010ada:	ef 69 ff e0 	st.b	r7[-32],r9
80010ade:	ef 68 ff dc 	st.b	r7[-36],r8
	uint16_t checksum;
	uint8_t buf[MAVLINK_NUM_HEADER_BYTES];
	uint8_t ck[2];
	mavlink_status_t *status = mavlink_get_channel_status(chan);
80010ae2:	ee f8 ff ec 	ld.w	r8,r7[-20]
80010ae6:	5c 58       	castu.b	r8
80010ae8:	10 9c       	mov	r12,r8
80010aea:	cd 3f       	rcall	80010a90 <mavlink_get_channel_status>
80010aec:	18 98       	mov	r8,r12
80010aee:	ef 48 ff fc 	st.w	r7[-4],r8
	buf[0] = MAVLINK_STX;
80010af2:	3f e8       	mov	r8,-2
80010af4:	ef 68 ff f4 	st.b	r7[-12],r8
	buf[1] = length;
80010af8:	ef 38 ff e0 	ld.ub	r8,r7[-32]
80010afc:	ef 68 ff f5 	st.b	r7[-11],r8
	buf[2] = status->current_tx_seq;
80010b00:	ee f8 ff fc 	ld.w	r8,r7[-4]
80010b04:	f1 38 00 0a 	ld.ub	r8,r8[10]
80010b08:	ef 68 ff f6 	st.b	r7[-10],r8
	buf[3] = mavlink_system.sysid;
80010b0c:	ec f8 00 74 	ld.w	r8,r6[116]
80010b10:	11 88       	ld.ub	r8,r8[0x0]
80010b12:	ef 68 ff f7 	st.b	r7[-9],r8
	buf[4] = mavlink_system.compid;
80010b16:	ec f8 00 74 	ld.w	r8,r6[116]
80010b1a:	11 98       	ld.ub	r8,r8[0x1]
80010b1c:	ef 68 ff f8 	st.b	r7[-8],r8
	buf[5] = msgid;
80010b20:	ef 38 ff e8 	ld.ub	r8,r7[-24]
80010b24:	ef 68 ff f9 	st.b	r7[-7],r8
	status->current_tx_seq++;
80010b28:	ee f8 ff fc 	ld.w	r8,r7[-4]
80010b2c:	f1 38 00 0a 	ld.ub	r8,r8[10]
80010b30:	2f f8       	sub	r8,-1
80010b32:	5c 58       	castu.b	r8
80010b34:	ee f9 ff fc 	ld.w	r9,r7[-4]
80010b38:	f3 68 00 0a 	st.b	r9[10],r8
	checksum = crc_calculate((uint8_t*)&buf[1], MAVLINK_CORE_HEADER_LEN);
80010b3c:	ee c8 00 0c 	sub	r8,r7,12
80010b40:	2f f8       	sub	r8,-1
80010b42:	30 5b       	mov	r11,5
80010b44:	10 9c       	mov	r12,r8
80010b46:	c3 ff       	rcall	800109c4 <crc_calculate>
80010b48:	18 98       	mov	r8,r12
80010b4a:	5c 88       	casts.h	r8
80010b4c:	ef 58 ff fa 	st.h	r7[-6],r8
	crc_accumulate_buffer(&checksum, packet, length);
80010b50:	ef 39 ff e0 	ld.ub	r9,r7[-32]
80010b54:	ee c8 00 06 	sub	r8,r7,6
80010b58:	12 9a       	mov	r10,r9
80010b5a:	ee fb ff e4 	ld.w	r11,r7[-28]
80010b5e:	10 9c       	mov	r12,r8
80010b60:	c6 6f       	rcall	80010a2c <crc_accumulate_buffer>
#if MAVLINK_CRC_EXTRA
	crc_accumulate(crc_extra, &checksum);
80010b62:	ef 38 ff dc 	ld.ub	r8,r7[-36]
80010b66:	ee c9 00 06 	sub	r9,r7,6
80010b6a:	12 9b       	mov	r11,r9
80010b6c:	10 9c       	mov	r12,r8
80010b6e:	cd 9e       	rcall	80010920 <crc_accumulate>
#endif
	ck[0] = (uint8_t)(checksum & 0xFF);
80010b70:	ef 08 ff fa 	ld.sh	r8,r7[-6]
80010b74:	5c 58       	castu.b	r8
80010b76:	ef 68 ff f0 	st.b	r7[-16],r8
	ck[1] = (uint8_t)(checksum >> 8);
80010b7a:	ef 08 ff fa 	ld.sh	r8,r7[-6]
80010b7e:	5c 78       	castu.h	r8
80010b80:	a9 88       	lsr	r8,0x8
80010b82:	5c 88       	casts.h	r8
80010b84:	5c 58       	castu.b	r8
80010b86:	ef 68 ff f1 	st.b	r7[-15],r8

	MAVLINK_START_UART_SEND(chan, MAVLINK_NUM_NON_PAYLOAD_BYTES + (uint16_t)length);
	_mavlink_send_uart(chan, (const char *)buf, MAVLINK_NUM_HEADER_BYTES);
80010b8a:	ee c8 00 0c 	sub	r8,r7,12
80010b8e:	30 6a       	mov	r10,6
80010b90:	10 9b       	mov	r11,r8
80010b92:	ee fc ff ec 	ld.w	r12,r7[-20]
80010b96:	c1 5c       	rcall	80010bc0 <_mavlink_send_uart>
	_mavlink_send_uart(chan, packet, length);
80010b98:	ef 38 ff e0 	ld.ub	r8,r7[-32]
80010b9c:	10 9a       	mov	r10,r8
80010b9e:	ee fb ff e4 	ld.w	r11,r7[-28]
80010ba2:	ee fc ff ec 	ld.w	r12,r7[-20]
80010ba6:	c0 dc       	rcall	80010bc0 <_mavlink_send_uart>
	_mavlink_send_uart(chan, (const char *)ck, 2);
80010ba8:	ee c8 00 10 	sub	r8,r7,16
80010bac:	30 2a       	mov	r10,2
80010bae:	10 9b       	mov	r11,r8
80010bb0:	ee fc ff ec 	ld.w	r12,r7[-20]
80010bb4:	c0 6c       	rcall	80010bc0 <_mavlink_send_uart>
	MAVLINK_END_UART_SEND(chan, MAVLINK_NUM_NON_PAYLOAD_BYTES + (uint16_t)length);
}
80010bb6:	2f 7d       	sub	sp,-36
80010bb8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80010bbc:	80 01       	ld.sh	r1,r0[0x0]
80010bbe:	09 4e       	ld.w	lr,--r4

80010bc0 <_mavlink_send_uart>:
    }
}
 */

MAVLINK_HELPER void _mavlink_send_uart(mavlink_channel_t chan, const char *buf, uint16_t len)
{
80010bc0:	eb cd 40 c0 	pushm	r6-r7,lr
80010bc4:	1a 97       	mov	r7,sp
80010bc6:	20 4d       	sub	sp,16
80010bc8:	49 46       	lddpc	r6,80010c18 <_mavlink_send_uart+0x58>
80010bca:	1e 26       	rsub	r6,pc
80010bcc:	ef 4c ff f8 	st.w	r7[-8],r12
80010bd0:	ef 4b ff f4 	st.w	r7[-12],r11
80010bd4:	14 98       	mov	r8,r10
80010bd6:	ef 58 ff f0 	st.h	r7[-16],r8
	   defines it */
	MAVLINK_SEND_UART_BYTES(chan, (const uint8_t *)buf, len);
#else
	/* fallback to one byte at a time */
	uint16_t i;
	for (i = 0; i < len; i++) {
80010bda:	30 08       	mov	r8,0
80010bdc:	ef 58 ff fe 	st.h	r7[-2],r8
80010be0:	c1 28       	rjmp	80010c04 <_mavlink_send_uart+0x44>
		comm_send_ch(chan, (uint8_t)buf[i]);
80010be2:	ef 18 ff fe 	ld.uh	r8,r7[-2]
80010be6:	ee f9 ff f4 	ld.w	r9,r7[-12]
80010bea:	f2 08 00 08 	add	r8,r9,r8
80010bee:	11 88       	ld.ub	r8,r8[0x0]
80010bf0:	10 9b       	mov	r11,r8
80010bf2:	ee fc ff f8 	ld.w	r12,r7[-8]
80010bf6:	f0 16 00 cc 	mcall	r6[816]
	   defines it */
	MAVLINK_SEND_UART_BYTES(chan, (const uint8_t *)buf, len);
#else
	/* fallback to one byte at a time */
	uint16_t i;
	for (i = 0; i < len; i++) {
80010bfa:	ef 08 ff fe 	ld.sh	r8,r7[-2]
80010bfe:	2f f8       	sub	r8,-1
80010c00:	ef 58 ff fe 	st.h	r7[-2],r8
80010c04:	ef 09 ff fe 	ld.sh	r9,r7[-2]
80010c08:	ef 08 ff f0 	ld.sh	r8,r7[-16]
80010c0c:	f0 09 19 00 	cp.h	r9,r8
80010c10:	ce 93       	brcs	80010be2 <_mavlink_send_uart+0x22>
		comm_send_ch(chan, (uint8_t)buf[i]);
	}
#endif
}
80010c12:	2f cd       	sub	sp,-16
80010c14:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80010c18:	80 01       	ld.sh	r1,r0[0x0]
80010c1a:	0a 4e       	or	lr,r5

80010c1c <byte_swap_2>:
	return msg->len + MAVLINK_NUM_NON_PAYLOAD_BYTES;
}

#if MAVLINK_NEED_BYTE_SWAP
static inline void byte_swap_2(char *dst, const char *src)
{
80010c1c:	eb cd 40 80 	pushm	r7,lr
80010c20:	1a 97       	mov	r7,sp
80010c22:	20 2d       	sub	sp,8
80010c24:	ef 4c ff fc 	st.w	r7[-4],r12
80010c28:	ef 4b ff f8 	st.w	r7[-8],r11
	dst[0] = src[1];
80010c2c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80010c30:	2f f8       	sub	r8,-1
80010c32:	11 88       	ld.ub	r8,r8[0x0]
80010c34:	ee f9 ff fc 	ld.w	r9,r7[-4]
80010c38:	b2 88       	st.b	r9[0x0],r8
	dst[1] = src[0];
80010c3a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80010c3e:	f0 c9 ff ff 	sub	r9,r8,-1
80010c42:	ee f8 ff f8 	ld.w	r8,r7[-8]
80010c46:	11 88       	ld.ub	r8,r8[0x0]
80010c48:	b2 88       	st.b	r9[0x0],r8
}
80010c4a:	2f ed       	sub	sp,-8
80010c4c:	e3 cd 80 80 	ldm	sp++,r7,pc

80010c50 <byte_swap_4>:
static inline void byte_swap_4(char *dst, const char *src)
{
80010c50:	eb cd 40 80 	pushm	r7,lr
80010c54:	1a 97       	mov	r7,sp
80010c56:	20 2d       	sub	sp,8
80010c58:	ef 4c ff fc 	st.w	r7[-4],r12
80010c5c:	ef 4b ff f8 	st.w	r7[-8],r11
	dst[0] = src[3];
80010c60:	ee f8 ff f8 	ld.w	r8,r7[-8]
80010c64:	2f d8       	sub	r8,-3
80010c66:	11 88       	ld.ub	r8,r8[0x0]
80010c68:	ee f9 ff fc 	ld.w	r9,r7[-4]
80010c6c:	b2 88       	st.b	r9[0x0],r8
	dst[1] = src[2];
80010c6e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80010c72:	f0 c9 ff ff 	sub	r9,r8,-1
80010c76:	ee f8 ff f8 	ld.w	r8,r7[-8]
80010c7a:	2f e8       	sub	r8,-2
80010c7c:	11 88       	ld.ub	r8,r8[0x0]
80010c7e:	b2 88       	st.b	r9[0x0],r8
	dst[2] = src[1];
80010c80:	ee f8 ff fc 	ld.w	r8,r7[-4]
80010c84:	f0 c9 ff fe 	sub	r9,r8,-2
80010c88:	ee f8 ff f8 	ld.w	r8,r7[-8]
80010c8c:	2f f8       	sub	r8,-1
80010c8e:	11 88       	ld.ub	r8,r8[0x0]
80010c90:	b2 88       	st.b	r9[0x0],r8
	dst[3] = src[0];
80010c92:	ee f8 ff fc 	ld.w	r8,r7[-4]
80010c96:	f0 c9 ff fd 	sub	r9,r8,-3
80010c9a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80010c9e:	11 88       	ld.ub	r8,r8[0x0]
80010ca0:	b2 88       	st.b	r9[0x0],r8
}
80010ca2:	2f ed       	sub	sp,-8
80010ca4:	e3 cd 80 80 	ldm	sp++,r7,pc

80010ca8 <byte_swap_8>:
static inline void byte_swap_8(char *dst, const char *src)
{
80010ca8:	eb cd 40 80 	pushm	r7,lr
80010cac:	1a 97       	mov	r7,sp
80010cae:	20 2d       	sub	sp,8
80010cb0:	ef 4c ff fc 	st.w	r7[-4],r12
80010cb4:	ef 4b ff f8 	st.w	r7[-8],r11
	dst[0] = src[7];
80010cb8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80010cbc:	2f 98       	sub	r8,-7
80010cbe:	11 88       	ld.ub	r8,r8[0x0]
80010cc0:	ee f9 ff fc 	ld.w	r9,r7[-4]
80010cc4:	b2 88       	st.b	r9[0x0],r8
	dst[1] = src[6];
80010cc6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80010cca:	f0 c9 ff ff 	sub	r9,r8,-1
80010cce:	ee f8 ff f8 	ld.w	r8,r7[-8]
80010cd2:	2f a8       	sub	r8,-6
80010cd4:	11 88       	ld.ub	r8,r8[0x0]
80010cd6:	b2 88       	st.b	r9[0x0],r8
	dst[2] = src[5];
80010cd8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80010cdc:	f0 c9 ff fe 	sub	r9,r8,-2
80010ce0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80010ce4:	2f b8       	sub	r8,-5
80010ce6:	11 88       	ld.ub	r8,r8[0x0]
80010ce8:	b2 88       	st.b	r9[0x0],r8
	dst[3] = src[4];
80010cea:	ee f8 ff fc 	ld.w	r8,r7[-4]
80010cee:	f0 c9 ff fd 	sub	r9,r8,-3
80010cf2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80010cf6:	2f c8       	sub	r8,-4
80010cf8:	11 88       	ld.ub	r8,r8[0x0]
80010cfa:	b2 88       	st.b	r9[0x0],r8
	dst[4] = src[3];
80010cfc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80010d00:	f0 c9 ff fc 	sub	r9,r8,-4
80010d04:	ee f8 ff f8 	ld.w	r8,r7[-8]
80010d08:	2f d8       	sub	r8,-3
80010d0a:	11 88       	ld.ub	r8,r8[0x0]
80010d0c:	b2 88       	st.b	r9[0x0],r8
	dst[5] = src[2];
80010d0e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80010d12:	f0 c9 ff fb 	sub	r9,r8,-5
80010d16:	ee f8 ff f8 	ld.w	r8,r7[-8]
80010d1a:	2f e8       	sub	r8,-2
80010d1c:	11 88       	ld.ub	r8,r8[0x0]
80010d1e:	b2 88       	st.b	r9[0x0],r8
	dst[6] = src[1];
80010d20:	ee f8 ff fc 	ld.w	r8,r7[-4]
80010d24:	f0 c9 ff fa 	sub	r9,r8,-6
80010d28:	ee f8 ff f8 	ld.w	r8,r7[-8]
80010d2c:	2f f8       	sub	r8,-1
80010d2e:	11 88       	ld.ub	r8,r8[0x0]
80010d30:	b2 88       	st.b	r9[0x0],r8
	dst[7] = src[0];
80010d32:	ee f8 ff fc 	ld.w	r8,r7[-4]
80010d36:	f0 c9 ff f9 	sub	r9,r8,-7
80010d3a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80010d3e:	11 88       	ld.ub	r8,r8[0x0]
80010d40:	b2 88       	st.b	r9[0x0],r8
}
80010d42:	2f ed       	sub	sp,-8
80010d44:	e3 cd 80 80 	ldm	sp++,r7,pc

80010d48 <mav_array_memcpy>:

/*
  like memcpy(), but if src is NULL, do a memset to zero
*/
static void mav_array_memcpy(void *dest, const void *src, size_t n)
{
80010d48:	eb cd 40 c0 	pushm	r6-r7,lr
80010d4c:	1a 97       	mov	r7,sp
80010d4e:	20 3d       	sub	sp,12
80010d50:	49 06       	lddpc	r6,80010d90 <mav_array_memcpy+0x48>
80010d52:	1e 26       	rsub	r6,pc
80010d54:	ef 4c ff fc 	st.w	r7[-4],r12
80010d58:	ef 4b ff f8 	st.w	r7[-8],r11
80010d5c:	ef 4a ff f4 	st.w	r7[-12],r10
	if (src == NULL) {
80010d60:	ee f8 ff f8 	ld.w	r8,r7[-8]
80010d64:	58 08       	cp.w	r8,0
80010d66:	c0 91       	brne	80010d78 <mav_array_memcpy+0x30>
		memset(dest, 0, n);
80010d68:	ee fa ff f4 	ld.w	r10,r7[-12]
80010d6c:	30 0b       	mov	r11,0
80010d6e:	ee fc ff fc 	ld.w	r12,r7[-4]
80010d72:	f0 16 00 2f 	mcall	r6[188]
80010d76:	c0 98       	rjmp	80010d88 <mav_array_memcpy+0x40>
	} else {
		memcpy(dest, src, n);
80010d78:	ee fa ff f4 	ld.w	r10,r7[-12]
80010d7c:	ee fb ff f8 	ld.w	r11,r7[-8]
80010d80:	ee fc ff fc 	ld.w	r12,r7[-4]
80010d84:	f0 16 00 20 	mcall	r6[128]
	}
}
80010d88:	2f dd       	sub	sp,-12
80010d8a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80010d8e:	00 00       	add	r0,r0
80010d90:	80 01       	ld.sh	r1,r0[0x0]
80010d92:	0b d6       	ld.ub	r6,r5[0x5]

80010d94 <_mav_put_char_array>:

/*
 * Place a char array into a buffer
 */
static inline void _mav_put_char_array(char *buf, uint8_t wire_offset, const char *b, uint8_t array_length)
{
80010d94:	eb cd 40 c0 	pushm	r6-r7,lr
80010d98:	1a 97       	mov	r7,sp
80010d9a:	20 4d       	sub	sp,16
80010d9c:	48 e6       	lddpc	r6,80010dd4 <_mav_put_char_array+0x40>
80010d9e:	1e 26       	rsub	r6,pc
80010da0:	ef 4c ff fc 	st.w	r7[-4],r12
80010da4:	ef 4a ff f4 	st.w	r7[-12],r10
80010da8:	12 98       	mov	r8,r9
80010daa:	16 99       	mov	r9,r11
80010dac:	ef 69 ff f8 	st.b	r7[-8],r9
80010db0:	ef 68 ff f0 	st.b	r7[-16],r8
	mav_array_memcpy(&buf[wire_offset], b, array_length);
80010db4:	ef 39 ff f0 	ld.ub	r9,r7[-16]
80010db8:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80010dbc:	ee fa ff fc 	ld.w	r10,r7[-4]
80010dc0:	f4 08 00 08 	add	r8,r10,r8
80010dc4:	12 9a       	mov	r10,r9
80010dc6:	ee fb ff f4 	ld.w	r11,r7[-12]
80010dca:	10 9c       	mov	r12,r8
80010dcc:	cb ef       	rcall	80010d48 <mav_array_memcpy>

}
80010dce:	2f cd       	sub	sp,-16
80010dd0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80010dd4:	80 01       	ld.sh	r1,r0[0x0]
80010dd6:	0c 22       	rsub	r2,r6

80010dd8 <_MAV_RETURN_uint16_t>:
#if MAVLINK_NEED_BYTE_SWAP
#define _MAV_MSG_RETURN_TYPE(TYPE, SIZE) \
static inline TYPE _MAV_RETURN_## TYPE(const mavlink_message_t *msg, uint8_t ofs) \
{ TYPE r; byte_swap_## SIZE((char*)&r, &_MAV_PAYLOAD(msg)[ofs]); return r; }

_MAV_MSG_RETURN_TYPE(uint16_t, 2)
80010dd8:	eb cd 40 c0 	pushm	r6-r7,lr
80010ddc:	1a 97       	mov	r7,sp
80010dde:	20 3d       	sub	sp,12
80010de0:	48 d6       	lddpc	r6,80010e14 <_MAV_RETURN_uint16_t+0x3c>
80010de2:	1e 26       	rsub	r6,pc
80010de4:	ef 4c ff f8 	st.w	r7[-8],r12
80010de8:	16 98       	mov	r8,r11
80010dea:	ef 68 ff f4 	st.b	r7[-12],r8
80010dee:	ee f8 ff f8 	ld.w	r8,r7[-8]
80010df2:	2f 88       	sub	r8,-8
80010df4:	10 99       	mov	r9,r8
80010df6:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80010dfa:	10 09       	add	r9,r8
80010dfc:	ee c8 00 02 	sub	r8,r7,2
80010e00:	12 9b       	mov	r11,r9
80010e02:	10 9c       	mov	r12,r8
80010e04:	c0 cf       	rcall	80010c1c <byte_swap_2>
80010e06:	ef 08 ff fe 	ld.sh	r8,r7[-2]
80010e0a:	10 9c       	mov	r12,r8
80010e0c:	2f dd       	sub	sp,-12
80010e0e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80010e12:	00 00       	add	r0,r0
80010e14:	80 01       	ld.sh	r1,r0[0x0]
80010e16:	0c 66       	and	r6,r6

80010e18 <_MAV_RETURN_float>:
_MAV_MSG_RETURN_TYPE(int16_t,  2)
_MAV_MSG_RETURN_TYPE(uint32_t, 4)
_MAV_MSG_RETURN_TYPE(int32_t,  4)
_MAV_MSG_RETURN_TYPE(uint64_t, 8)
_MAV_MSG_RETURN_TYPE(int64_t,  8)
_MAV_MSG_RETURN_TYPE(float,    4)
80010e18:	eb cd 40 c0 	pushm	r6-r7,lr
80010e1c:	1a 97       	mov	r7,sp
80010e1e:	20 3d       	sub	sp,12
80010e20:	48 d6       	lddpc	r6,80010e54 <_MAV_RETURN_float+0x3c>
80010e22:	1e 26       	rsub	r6,pc
80010e24:	ef 4c ff f8 	st.w	r7[-8],r12
80010e28:	16 98       	mov	r8,r11
80010e2a:	ef 68 ff f4 	st.b	r7[-12],r8
80010e2e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80010e32:	2f 88       	sub	r8,-8
80010e34:	10 99       	mov	r9,r8
80010e36:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80010e3a:	10 09       	add	r9,r8
80010e3c:	ee c8 00 04 	sub	r8,r7,4
80010e40:	12 9b       	mov	r11,r9
80010e42:	10 9c       	mov	r12,r8
80010e44:	c0 6f       	rcall	80010c50 <byte_swap_4>
80010e46:	ee f8 ff fc 	ld.w	r8,r7[-4]
80010e4a:	10 9c       	mov	r12,r8
80010e4c:	2f dd       	sub	sp,-12
80010e4e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80010e52:	00 00       	add	r0,r0
80010e54:	80 01       	ld.sh	r1,r0[0x0]
80010e56:	0c a6       	st.w	r6++,r6

80010e58 <mavlink_msg_heartbeat_send>:
 * @param system_status System status flag, see MAV_STATE ENUM
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_heartbeat_send(mavlink_channel_t chan, uint8_t type, uint8_t autopilot, uint8_t base_mode, uint32_t custom_mode, uint8_t system_status)
{
80010e58:	eb cd 40 c0 	pushm	r6-r7,lr
80010e5c:	1a 97       	mov	r7,sp
80010e5e:	20 9d       	sub	sp,36
80010e60:	49 c6       	lddpc	r6,80010ed0 <mavlink_msg_heartbeat_send+0x78>
80010e62:	1e 26       	rsub	r6,pc
80010e64:	ee ce ff f4 	sub	lr,r7,-12
80010e68:	ef 4c ff f0 	st.w	r7[-16],r12
80010e6c:	ef 48 ff e0 	st.w	r7[-32],r8
80010e70:	7c 08       	ld.w	r8,lr[0x0]
80010e72:	ef 6b ff ec 	st.b	r7[-20],r11
80010e76:	ef 6a ff e8 	st.b	r7[-24],r10
80010e7a:	ef 69 ff e4 	st.b	r7[-28],r9
80010e7e:	ef 68 ff dc 	st.b	r7[-36],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_HEARTBEAT_LEN];
	_mav_put_uint32_t(buf, 0, custom_mode);
80010e82:	ee c9 00 20 	sub	r9,r7,32
80010e86:	ee c8 00 0c 	sub	r8,r7,12
80010e8a:	12 9b       	mov	r11,r9
80010e8c:	10 9c       	mov	r12,r8
80010e8e:	ce 1e       	rcall	80010c50 <byte_swap_4>
	_mav_put_uint8_t(buf, 4, type);
80010e90:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80010e94:	ef 68 ff f8 	st.b	r7[-8],r8
	_mav_put_uint8_t(buf, 5, autopilot);
80010e98:	ef 38 ff e8 	ld.ub	r8,r7[-24]
80010e9c:	ef 68 ff f9 	st.b	r7[-7],r8
	_mav_put_uint8_t(buf, 6, base_mode);
80010ea0:	ef 38 ff e4 	ld.ub	r8,r7[-28]
80010ea4:	ef 68 ff fa 	st.b	r7[-6],r8
	_mav_put_uint8_t(buf, 7, system_status);
80010ea8:	ef 38 ff dc 	ld.ub	r8,r7[-36]
80010eac:	ef 68 ff fb 	st.b	r7[-5],r8
	_mav_put_uint8_t(buf, 8, 3);
80010eb0:	30 38       	mov	r8,3
80010eb2:	ef 68 ff fc 	st.b	r7[-4],r8

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_HEARTBEAT, buf, MAVLINK_MSG_ID_HEARTBEAT_LEN, MAVLINK_MSG_ID_HEARTBEAT_CRC);
80010eb6:	ee ca 00 0c 	sub	r10,r7,12
80010eba:	33 28       	mov	r8,50
80010ebc:	30 99       	mov	r9,9
80010ebe:	30 0b       	mov	r11,0
80010ec0:	ee fc ff f0 	ld.w	r12,r7[-16]
80010ec4:	fe b0 fd fe 	rcall	80010ac0 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_HEARTBEAT, (const char *)&packet, MAVLINK_MSG_ID_HEARTBEAT_LEN, MAVLINK_MSG_ID_HEARTBEAT_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_HEARTBEAT, (const char *)&packet, MAVLINK_MSG_ID_HEARTBEAT_LEN);
#endif
#endif
}
80010ec8:	2f 7d       	sub	sp,-36
80010eca:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80010ece:	00 00       	add	r0,r0
80010ed0:	80 01       	ld.sh	r1,r0[0x0]
80010ed2:	0c e6       	st.h	--r6,r6

80010ed4 <mavlink_msg_gps_raw_int_send>:
 * @param satellites_visible Number of satellites visible. If unknown, set to 255
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_gps_raw_int_send(mavlink_channel_t chan, uint64_t time_usec, uint8_t fix_type, int32_t lat, int32_t lon, int32_t alt, uint16_t eph, uint16_t epv, uint16_t vel, uint16_t cog, uint8_t satellites_visible)
{
80010ed4:	eb cd 40 e0 	pushm	r5-r7,lr
80010ed8:	1a 97       	mov	r7,sp
80010eda:	21 2d       	sub	sp,72
80010edc:	4b 76       	lddpc	r6,80010fb8 <mavlink_msg_gps_raw_int_send+0xe4>
80010ede:	1e 26       	rsub	r6,pc
80010ee0:	ee c5 ff f0 	sub	r5,r7,-16
80010ee4:	ef 4c ff dc 	st.w	r7[-36],r12
80010ee8:	ee eb ff d4 	st.d	r7[-44],r10
80010eec:	12 9e       	mov	lr,r9
80010eee:	ef 48 ff cc 	st.w	r7[-52],r8
80010ef2:	6a 2c       	ld.w	r12,r5[0x8]
80010ef4:	6a 3b       	ld.w	r11,r5[0xc]
80010ef6:	6a 4a       	ld.w	r10,r5[0x10]
80010ef8:	6a 59       	ld.w	r9,r5[0x14]
80010efa:	6a 68       	ld.w	r8,r5[0x18]
80010efc:	ef 6e ff d0 	st.b	r7[-48],lr
80010f00:	ef 5c ff c8 	st.h	r7[-56],r12
80010f04:	ef 5b ff c4 	st.h	r7[-60],r11
80010f08:	ef 5a ff c0 	st.h	r7[-64],r10
80010f0c:	ef 59 ff bc 	st.h	r7[-68],r9
80010f10:	ef 68 ff b8 	st.b	r7[-72],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_GPS_RAW_INT_LEN];
	_mav_put_uint64_t(buf, 0, time_usec);
80010f14:	ee c9 00 2c 	sub	r9,r7,44
80010f18:	ee c8 00 20 	sub	r8,r7,32
80010f1c:	12 9b       	mov	r11,r9
80010f1e:	10 9c       	mov	r12,r8
80010f20:	cc 4e       	rcall	80010ca8 <byte_swap_8>
	_mav_put_int32_t(buf, 8, lat);
80010f22:	ee c9 00 34 	sub	r9,r7,52
80010f26:	ee c8 00 20 	sub	r8,r7,32
80010f2a:	2f 88       	sub	r8,-8
80010f2c:	12 9b       	mov	r11,r9
80010f2e:	10 9c       	mov	r12,r8
80010f30:	c9 0e       	rcall	80010c50 <byte_swap_4>
	_mav_put_int32_t(buf, 12, lon);
80010f32:	0a 99       	mov	r9,r5
80010f34:	ee c8 00 20 	sub	r8,r7,32
80010f38:	2f 48       	sub	r8,-12
80010f3a:	12 9b       	mov	r11,r9
80010f3c:	10 9c       	mov	r12,r8
80010f3e:	c8 9e       	rcall	80010c50 <byte_swap_4>
	_mav_put_int32_t(buf, 16, alt);
80010f40:	ea c9 ff fc 	sub	r9,r5,-4
80010f44:	ee c8 00 20 	sub	r8,r7,32
80010f48:	2f 08       	sub	r8,-16
80010f4a:	12 9b       	mov	r11,r9
80010f4c:	10 9c       	mov	r12,r8
80010f4e:	c8 1e       	rcall	80010c50 <byte_swap_4>
	_mav_put_uint16_t(buf, 20, eph);
80010f50:	ee c9 00 38 	sub	r9,r7,56
80010f54:	ee c8 00 20 	sub	r8,r7,32
80010f58:	2e c8       	sub	r8,-20
80010f5a:	12 9b       	mov	r11,r9
80010f5c:	10 9c       	mov	r12,r8
80010f5e:	c5 fe       	rcall	80010c1c <byte_swap_2>
	_mav_put_uint16_t(buf, 22, epv);
80010f60:	ee c9 00 3c 	sub	r9,r7,60
80010f64:	ee c8 00 20 	sub	r8,r7,32
80010f68:	2e a8       	sub	r8,-22
80010f6a:	12 9b       	mov	r11,r9
80010f6c:	10 9c       	mov	r12,r8
80010f6e:	c5 7e       	rcall	80010c1c <byte_swap_2>
	_mav_put_uint16_t(buf, 24, vel);
80010f70:	ee c9 00 40 	sub	r9,r7,64
80010f74:	ee c8 00 20 	sub	r8,r7,32
80010f78:	2e 88       	sub	r8,-24
80010f7a:	12 9b       	mov	r11,r9
80010f7c:	10 9c       	mov	r12,r8
80010f7e:	c4 fe       	rcall	80010c1c <byte_swap_2>
	_mav_put_uint16_t(buf, 26, cog);
80010f80:	ee c9 00 44 	sub	r9,r7,68
80010f84:	ee c8 00 20 	sub	r8,r7,32
80010f88:	2e 68       	sub	r8,-26
80010f8a:	12 9b       	mov	r11,r9
80010f8c:	10 9c       	mov	r12,r8
80010f8e:	c4 7e       	rcall	80010c1c <byte_swap_2>
	_mav_put_uint8_t(buf, 28, fix_type);
80010f90:	ef 38 ff d0 	ld.ub	r8,r7[-48]
80010f94:	ef 68 ff fc 	st.b	r7[-4],r8
	_mav_put_uint8_t(buf, 29, satellites_visible);
80010f98:	ef 38 ff b8 	ld.ub	r8,r7[-72]
80010f9c:	ef 68 ff fd 	st.b	r7[-3],r8

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_GPS_RAW_INT, buf, MAVLINK_MSG_ID_GPS_RAW_INT_LEN, MAVLINK_MSG_ID_GPS_RAW_INT_CRC);
80010fa0:	ee ca 00 20 	sub	r10,r7,32
80010fa4:	31 88       	mov	r8,24
80010fa6:	31 e9       	mov	r9,30
80010fa8:	31 8b       	mov	r11,24
80010faa:	ee fc ff dc 	ld.w	r12,r7[-36]
80010fae:	fe b0 fd 89 	rcall	80010ac0 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_GPS_RAW_INT, (const char *)&packet, MAVLINK_MSG_ID_GPS_RAW_INT_LEN, MAVLINK_MSG_ID_GPS_RAW_INT_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_GPS_RAW_INT, (const char *)&packet, MAVLINK_MSG_ID_GPS_RAW_INT_LEN);
#endif
#endif
}
80010fb2:	2e ed       	sub	sp,-72
80010fb4:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80010fb8:	80 01       	ld.sh	r1,r0[0x0]
80010fba:	0d 62       	ld.uh	r2,--r6

80010fbc <mavlink_msg_scaled_imu_send>:
 * @param zmag Z Magnetic field (milli tesla)
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_scaled_imu_send(mavlink_channel_t chan, uint32_t time_boot_ms, int16_t xacc, int16_t yacc, int16_t zacc, int16_t xgyro, int16_t ygyro, int16_t zgyro, int16_t xmag, int16_t ymag, int16_t zmag)
{
80010fbc:	eb cd 40 ee 	pushm	r1-r3,r5-r7,lr
80010fc0:	1a 97       	mov	r7,sp
80010fc2:	21 1d       	sub	sp,68
80010fc4:	4c 66       	lddpc	r6,800110dc <mavlink_msg_scaled_imu_send+0x120>
80010fc6:	1e 26       	rsub	r6,pc
80010fc8:	ee ce ff e4 	sub	lr,r7,-28
80010fcc:	ef 4c ff e4 	st.w	r7[-28],r12
80010fd0:	ef 4b ff e0 	st.w	r7[-32],r11
80010fd4:	14 91       	mov	r1,r10
80010fd6:	12 92       	mov	r2,r9
80010fd8:	10 93       	mov	r3,r8
80010fda:	7c 05       	ld.w	r5,lr[0x0]
80010fdc:	7c 1c       	ld.w	r12,lr[0x4]
80010fde:	7c 2b       	ld.w	r11,lr[0x8]
80010fe0:	7c 3a       	ld.w	r10,lr[0xc]
80010fe2:	7c 49       	ld.w	r9,lr[0x10]
80010fe4:	7c 58       	ld.w	r8,lr[0x14]
80010fe6:	02 9e       	mov	lr,r1
80010fe8:	ef 5e ff dc 	st.h	r7[-36],lr
80010fec:	04 9e       	mov	lr,r2
80010fee:	ef 5e ff d8 	st.h	r7[-40],lr
80010ff2:	06 9e       	mov	lr,r3
80010ff4:	ef 5e ff d4 	st.h	r7[-44],lr
80010ff8:	0a 9e       	mov	lr,r5
80010ffa:	ef 5e ff d0 	st.h	r7[-48],lr
80010ffe:	ef 5c ff cc 	st.h	r7[-52],r12
80011002:	ef 5b ff c8 	st.h	r7[-56],r11
80011006:	ef 5a ff c4 	st.h	r7[-60],r10
8001100a:	ef 59 ff c0 	st.h	r7[-64],r9
8001100e:	ef 58 ff bc 	st.h	r7[-68],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_SCALED_IMU_LEN];
	_mav_put_uint32_t(buf, 0, time_boot_ms);
80011012:	ee c9 00 20 	sub	r9,r7,32
80011016:	ee c8 00 18 	sub	r8,r7,24
8001101a:	12 9b       	mov	r11,r9
8001101c:	10 9c       	mov	r12,r8
8001101e:	c1 9e       	rcall	80010c50 <byte_swap_4>
	_mav_put_int16_t(buf, 4, xacc);
80011020:	ee c9 00 24 	sub	r9,r7,36
80011024:	ee c8 00 18 	sub	r8,r7,24
80011028:	2f c8       	sub	r8,-4
8001102a:	12 9b       	mov	r11,r9
8001102c:	10 9c       	mov	r12,r8
8001102e:	fe b0 fd f7 	rcall	80010c1c <byte_swap_2>
	_mav_put_int16_t(buf, 6, yacc);
80011032:	ee c9 00 28 	sub	r9,r7,40
80011036:	ee c8 00 18 	sub	r8,r7,24
8001103a:	2f a8       	sub	r8,-6
8001103c:	12 9b       	mov	r11,r9
8001103e:	10 9c       	mov	r12,r8
80011040:	fe b0 fd ee 	rcall	80010c1c <byte_swap_2>
	_mav_put_int16_t(buf, 8, zacc);
80011044:	ee c9 00 2c 	sub	r9,r7,44
80011048:	ee c8 00 18 	sub	r8,r7,24
8001104c:	2f 88       	sub	r8,-8
8001104e:	12 9b       	mov	r11,r9
80011050:	10 9c       	mov	r12,r8
80011052:	fe b0 fd e5 	rcall	80010c1c <byte_swap_2>
	_mav_put_int16_t(buf, 10, xgyro);
80011056:	ee c9 00 30 	sub	r9,r7,48
8001105a:	ee c8 00 18 	sub	r8,r7,24
8001105e:	2f 68       	sub	r8,-10
80011060:	12 9b       	mov	r11,r9
80011062:	10 9c       	mov	r12,r8
80011064:	fe b0 fd dc 	rcall	80010c1c <byte_swap_2>
	_mav_put_int16_t(buf, 12, ygyro);
80011068:	ee c9 00 34 	sub	r9,r7,52
8001106c:	ee c8 00 18 	sub	r8,r7,24
80011070:	2f 48       	sub	r8,-12
80011072:	12 9b       	mov	r11,r9
80011074:	10 9c       	mov	r12,r8
80011076:	fe b0 fd d3 	rcall	80010c1c <byte_swap_2>
	_mav_put_int16_t(buf, 14, zgyro);
8001107a:	ee c9 00 38 	sub	r9,r7,56
8001107e:	ee c8 00 18 	sub	r8,r7,24
80011082:	2f 28       	sub	r8,-14
80011084:	12 9b       	mov	r11,r9
80011086:	10 9c       	mov	r12,r8
80011088:	fe b0 fd ca 	rcall	80010c1c <byte_swap_2>
	_mav_put_int16_t(buf, 16, xmag);
8001108c:	ee c9 00 3c 	sub	r9,r7,60
80011090:	ee c8 00 18 	sub	r8,r7,24
80011094:	2f 08       	sub	r8,-16
80011096:	12 9b       	mov	r11,r9
80011098:	10 9c       	mov	r12,r8
8001109a:	fe b0 fd c1 	rcall	80010c1c <byte_swap_2>
	_mav_put_int16_t(buf, 18, ymag);
8001109e:	ee c9 00 40 	sub	r9,r7,64
800110a2:	ee c8 00 18 	sub	r8,r7,24
800110a6:	2e e8       	sub	r8,-18
800110a8:	12 9b       	mov	r11,r9
800110aa:	10 9c       	mov	r12,r8
800110ac:	fe b0 fd b8 	rcall	80010c1c <byte_swap_2>
	_mav_put_int16_t(buf, 20, zmag);
800110b0:	ee c9 00 44 	sub	r9,r7,68
800110b4:	ee c8 00 18 	sub	r8,r7,24
800110b8:	2e c8       	sub	r8,-20
800110ba:	12 9b       	mov	r11,r9
800110bc:	10 9c       	mov	r12,r8
800110be:	fe b0 fd af 	rcall	80010c1c <byte_swap_2>

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_SCALED_IMU, buf, MAVLINK_MSG_ID_SCALED_IMU_LEN, MAVLINK_MSG_ID_SCALED_IMU_CRC);
800110c2:	ee ca 00 18 	sub	r10,r7,24
800110c6:	e0 68 00 aa 	mov	r8,170
800110ca:	31 69       	mov	r9,22
800110cc:	31 ab       	mov	r11,26
800110ce:	ee fc ff e4 	ld.w	r12,r7[-28]
800110d2:	fe b0 fc f7 	rcall	80010ac0 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_SCALED_IMU, (const char *)&packet, MAVLINK_MSG_ID_SCALED_IMU_LEN, MAVLINK_MSG_ID_SCALED_IMU_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_SCALED_IMU, (const char *)&packet, MAVLINK_MSG_ID_SCALED_IMU_LEN);
#endif
#endif
}
800110d6:	2e fd       	sub	sp,-68
800110d8:	e3 cd 80 ee 	ldm	sp++,r1-r3,r5-r7,pc
800110dc:	80 01       	ld.sh	r1,r0[0x0]
800110de:	0e 4a       	or	r10,r7

800110e0 <mavlink_msg_raw_imu_send>:
 * @param zmag Z Magnetic field (raw)
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_raw_imu_send(mavlink_channel_t chan, uint64_t time_usec, int16_t xacc, int16_t yacc, int16_t zacc, int16_t xgyro, int16_t ygyro, int16_t zgyro, int16_t xmag, int16_t ymag, int16_t zmag)
{
800110e0:	eb cd 40 ee 	pushm	r1-r3,r5-r7,lr
800110e4:	1a 97       	mov	r7,sp
800110e6:	21 3d       	sub	sp,76
800110e8:	4c 76       	lddpc	r6,80011204 <mavlink_msg_raw_imu_send+0x124>
800110ea:	1e 26       	rsub	r6,pc
800110ec:	ee ce ff e4 	sub	lr,r7,-28
800110f0:	ef 4c ff e0 	st.w	r7[-32],r12
800110f4:	ee eb ff d8 	st.d	r7[-40],r10
800110f8:	12 91       	mov	r1,r9
800110fa:	10 92       	mov	r2,r8
800110fc:	7c 03       	ld.w	r3,lr[0x0]
800110fe:	7c 15       	ld.w	r5,lr[0x4]
80011100:	7c 2c       	ld.w	r12,lr[0x8]
80011102:	7c 3b       	ld.w	r11,lr[0xc]
80011104:	7c 4a       	ld.w	r10,lr[0x10]
80011106:	7c 59       	ld.w	r9,lr[0x14]
80011108:	7c 68       	ld.w	r8,lr[0x18]
8001110a:	02 9e       	mov	lr,r1
8001110c:	ef 5e ff d4 	st.h	r7[-44],lr
80011110:	04 9e       	mov	lr,r2
80011112:	ef 5e ff d0 	st.h	r7[-48],lr
80011116:	06 9e       	mov	lr,r3
80011118:	ef 5e ff cc 	st.h	r7[-52],lr
8001111c:	0a 9e       	mov	lr,r5
8001111e:	ef 5e ff c8 	st.h	r7[-56],lr
80011122:	ef 5c ff c4 	st.h	r7[-60],r12
80011126:	ef 5b ff c0 	st.h	r7[-64],r11
8001112a:	ef 5a ff bc 	st.h	r7[-68],r10
8001112e:	ef 59 ff b8 	st.h	r7[-72],r9
80011132:	ef 58 ff b4 	st.h	r7[-76],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_RAW_IMU_LEN];
	_mav_put_uint64_t(buf, 0, time_usec);
80011136:	ee c9 00 28 	sub	r9,r7,40
8001113a:	ee c8 00 1c 	sub	r8,r7,28
8001113e:	12 9b       	mov	r11,r9
80011140:	10 9c       	mov	r12,r8
80011142:	fe b0 fd b3 	rcall	80010ca8 <byte_swap_8>
	_mav_put_int16_t(buf, 8, xacc);
80011146:	ee c9 00 2c 	sub	r9,r7,44
8001114a:	ee c8 00 1c 	sub	r8,r7,28
8001114e:	2f 88       	sub	r8,-8
80011150:	12 9b       	mov	r11,r9
80011152:	10 9c       	mov	r12,r8
80011154:	fe b0 fd 64 	rcall	80010c1c <byte_swap_2>
	_mav_put_int16_t(buf, 10, yacc);
80011158:	ee c9 00 30 	sub	r9,r7,48
8001115c:	ee c8 00 1c 	sub	r8,r7,28
80011160:	2f 68       	sub	r8,-10
80011162:	12 9b       	mov	r11,r9
80011164:	10 9c       	mov	r12,r8
80011166:	fe b0 fd 5b 	rcall	80010c1c <byte_swap_2>
	_mav_put_int16_t(buf, 12, zacc);
8001116a:	ee c9 00 34 	sub	r9,r7,52
8001116e:	ee c8 00 1c 	sub	r8,r7,28
80011172:	2f 48       	sub	r8,-12
80011174:	12 9b       	mov	r11,r9
80011176:	10 9c       	mov	r12,r8
80011178:	fe b0 fd 52 	rcall	80010c1c <byte_swap_2>
	_mav_put_int16_t(buf, 14, xgyro);
8001117c:	ee c9 00 38 	sub	r9,r7,56
80011180:	ee c8 00 1c 	sub	r8,r7,28
80011184:	2f 28       	sub	r8,-14
80011186:	12 9b       	mov	r11,r9
80011188:	10 9c       	mov	r12,r8
8001118a:	fe b0 fd 49 	rcall	80010c1c <byte_swap_2>
	_mav_put_int16_t(buf, 16, ygyro);
8001118e:	ee c9 00 3c 	sub	r9,r7,60
80011192:	ee c8 00 1c 	sub	r8,r7,28
80011196:	2f 08       	sub	r8,-16
80011198:	12 9b       	mov	r11,r9
8001119a:	10 9c       	mov	r12,r8
8001119c:	fe b0 fd 40 	rcall	80010c1c <byte_swap_2>
	_mav_put_int16_t(buf, 18, zgyro);
800111a0:	ee c9 00 40 	sub	r9,r7,64
800111a4:	ee c8 00 1c 	sub	r8,r7,28
800111a8:	2e e8       	sub	r8,-18
800111aa:	12 9b       	mov	r11,r9
800111ac:	10 9c       	mov	r12,r8
800111ae:	fe b0 fd 37 	rcall	80010c1c <byte_swap_2>
	_mav_put_int16_t(buf, 20, xmag);
800111b2:	ee c9 00 44 	sub	r9,r7,68
800111b6:	ee c8 00 1c 	sub	r8,r7,28
800111ba:	2e c8       	sub	r8,-20
800111bc:	12 9b       	mov	r11,r9
800111be:	10 9c       	mov	r12,r8
800111c0:	fe b0 fd 2e 	rcall	80010c1c <byte_swap_2>
	_mav_put_int16_t(buf, 22, ymag);
800111c4:	ee c9 00 48 	sub	r9,r7,72
800111c8:	ee c8 00 1c 	sub	r8,r7,28
800111cc:	2e a8       	sub	r8,-22
800111ce:	12 9b       	mov	r11,r9
800111d0:	10 9c       	mov	r12,r8
800111d2:	fe b0 fd 25 	rcall	80010c1c <byte_swap_2>
	_mav_put_int16_t(buf, 24, zmag);
800111d6:	ee c9 00 4c 	sub	r9,r7,76
800111da:	ee c8 00 1c 	sub	r8,r7,28
800111de:	2e 88       	sub	r8,-24
800111e0:	12 9b       	mov	r11,r9
800111e2:	10 9c       	mov	r12,r8
800111e4:	fe b0 fd 1c 	rcall	80010c1c <byte_swap_2>

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_RAW_IMU, buf, MAVLINK_MSG_ID_RAW_IMU_LEN, MAVLINK_MSG_ID_RAW_IMU_CRC);
800111e8:	ee ca 00 1c 	sub	r10,r7,28
800111ec:	e0 68 00 90 	mov	r8,144
800111f0:	31 a9       	mov	r9,26
800111f2:	31 bb       	mov	r11,27
800111f4:	ee fc ff e0 	ld.w	r12,r7[-32]
800111f8:	fe b0 fc 64 	rcall	80010ac0 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_RAW_IMU, (const char *)&packet, MAVLINK_MSG_ID_RAW_IMU_LEN, MAVLINK_MSG_ID_RAW_IMU_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_RAW_IMU, (const char *)&packet, MAVLINK_MSG_ID_RAW_IMU_LEN);
#endif
#endif
}
800111fc:	2e dd       	sub	sp,-76
800111fe:	e3 cd 80 ee 	ldm	sp++,r1-r3,r5-r7,pc
80011202:	00 00       	add	r0,r0
80011204:	80 01       	ld.sh	r1,r0[0x0]
80011206:	0f 6e       	ld.uh	lr,--r7

80011208 <mavlink_msg_scaled_pressure_send>:
 * @param temperature Temperature measurement (0.01 degrees celsius)
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_scaled_pressure_send(mavlink_channel_t chan, uint32_t time_boot_ms, float press_abs, float press_diff, int16_t temperature)
{
80011208:	eb cd 40 c0 	pushm	r6-r7,lr
8001120c:	1a 97       	mov	r7,sp
8001120e:	20 9d       	sub	sp,36
80011210:	49 e6       	lddpc	r6,80011288 <mavlink_msg_scaled_pressure_send+0x80>
80011212:	1e 26       	rsub	r6,pc
80011214:	ef 4c ff ec 	st.w	r7[-20],r12
80011218:	ef 4b ff e8 	st.w	r7[-24],r11
8001121c:	ef 4a ff e4 	st.w	r7[-28],r10
80011220:	ef 49 ff e0 	st.w	r7[-32],r9
80011224:	ef 58 ff dc 	st.h	r7[-36],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_SCALED_PRESSURE_LEN];
	_mav_put_uint32_t(buf, 0, time_boot_ms);
80011228:	ee c9 00 18 	sub	r9,r7,24
8001122c:	ee c8 00 10 	sub	r8,r7,16
80011230:	12 9b       	mov	r11,r9
80011232:	10 9c       	mov	r12,r8
80011234:	fe b0 fd 0e 	rcall	80010c50 <byte_swap_4>
	_mav_put_float(buf, 4, press_abs);
80011238:	ee c9 00 1c 	sub	r9,r7,28
8001123c:	ee c8 00 10 	sub	r8,r7,16
80011240:	2f c8       	sub	r8,-4
80011242:	12 9b       	mov	r11,r9
80011244:	10 9c       	mov	r12,r8
80011246:	fe b0 fd 05 	rcall	80010c50 <byte_swap_4>
	_mav_put_float(buf, 8, press_diff);
8001124a:	ee c9 00 20 	sub	r9,r7,32
8001124e:	ee c8 00 10 	sub	r8,r7,16
80011252:	2f 88       	sub	r8,-8
80011254:	12 9b       	mov	r11,r9
80011256:	10 9c       	mov	r12,r8
80011258:	fe b0 fc fc 	rcall	80010c50 <byte_swap_4>
	_mav_put_int16_t(buf, 12, temperature);
8001125c:	ee c9 00 24 	sub	r9,r7,36
80011260:	ee c8 00 10 	sub	r8,r7,16
80011264:	2f 48       	sub	r8,-12
80011266:	12 9b       	mov	r11,r9
80011268:	10 9c       	mov	r12,r8
8001126a:	fe b0 fc d9 	rcall	80010c1c <byte_swap_2>

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_SCALED_PRESSURE, buf, MAVLINK_MSG_ID_SCALED_PRESSURE_LEN, MAVLINK_MSG_ID_SCALED_PRESSURE_CRC);
8001126e:	ee ca 00 10 	sub	r10,r7,16
80011272:	37 38       	mov	r8,115
80011274:	30 e9       	mov	r9,14
80011276:	31 db       	mov	r11,29
80011278:	ee fc ff ec 	ld.w	r12,r7[-20]
8001127c:	fe b0 fc 22 	rcall	80010ac0 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_SCALED_PRESSURE, (const char *)&packet, MAVLINK_MSG_ID_SCALED_PRESSURE_LEN, MAVLINK_MSG_ID_SCALED_PRESSURE_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_SCALED_PRESSURE, (const char *)&packet, MAVLINK_MSG_ID_SCALED_PRESSURE_LEN);
#endif
#endif
}
80011280:	2f 7d       	sub	sp,-36
80011282:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80011286:	00 00       	add	r0,r0
80011288:	80 01       	ld.sh	r1,r0[0x0]
8001128a:	10 96       	mov	r6,r8

8001128c <mavlink_msg_attitude_send>:
 * @param yawspeed Yaw angular speed (rad/s)
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_attitude_send(mavlink_channel_t chan, uint32_t time_boot_ms, float roll, float pitch, float yaw, float rollspeed, float pitchspeed, float yawspeed)
{
8001128c:	eb cd 40 e0 	pushm	r5-r7,lr
80011290:	1a 97       	mov	r7,sp
80011292:	20 cd       	sub	sp,48
80011294:	4a c6       	lddpc	r6,80011344 <mavlink_msg_attitude_send+0xb8>
80011296:	1e 26       	rsub	r6,pc
80011298:	ee c5 ff f0 	sub	r5,r7,-16
8001129c:	ef 4c ff e0 	st.w	r7[-32],r12
800112a0:	ef 4b ff dc 	st.w	r7[-36],r11
800112a4:	ef 4a ff d8 	st.w	r7[-40],r10
800112a8:	ef 49 ff d4 	st.w	r7[-44],r9
800112ac:	ef 48 ff d0 	st.w	r7[-48],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_ATTITUDE_LEN];
	_mav_put_uint32_t(buf, 0, time_boot_ms);
800112b0:	ee c9 00 24 	sub	r9,r7,36
800112b4:	ee c8 00 1c 	sub	r8,r7,28
800112b8:	12 9b       	mov	r11,r9
800112ba:	10 9c       	mov	r12,r8
800112bc:	fe b0 fc ca 	rcall	80010c50 <byte_swap_4>
	_mav_put_float(buf, 4, roll);
800112c0:	ee c9 00 28 	sub	r9,r7,40
800112c4:	ee c8 00 1c 	sub	r8,r7,28
800112c8:	2f c8       	sub	r8,-4
800112ca:	12 9b       	mov	r11,r9
800112cc:	10 9c       	mov	r12,r8
800112ce:	fe b0 fc c1 	rcall	80010c50 <byte_swap_4>
	_mav_put_float(buf, 8, pitch);
800112d2:	ee c9 00 2c 	sub	r9,r7,44
800112d6:	ee c8 00 1c 	sub	r8,r7,28
800112da:	2f 88       	sub	r8,-8
800112dc:	12 9b       	mov	r11,r9
800112de:	10 9c       	mov	r12,r8
800112e0:	fe b0 fc b8 	rcall	80010c50 <byte_swap_4>
	_mav_put_float(buf, 12, yaw);
800112e4:	ee c9 00 30 	sub	r9,r7,48
800112e8:	ee c8 00 1c 	sub	r8,r7,28
800112ec:	2f 48       	sub	r8,-12
800112ee:	12 9b       	mov	r11,r9
800112f0:	10 9c       	mov	r12,r8
800112f2:	fe b0 fc af 	rcall	80010c50 <byte_swap_4>
	_mav_put_float(buf, 16, rollspeed);
800112f6:	0a 99       	mov	r9,r5
800112f8:	ee c8 00 1c 	sub	r8,r7,28
800112fc:	2f 08       	sub	r8,-16
800112fe:	12 9b       	mov	r11,r9
80011300:	10 9c       	mov	r12,r8
80011302:	fe b0 fc a7 	rcall	80010c50 <byte_swap_4>
	_mav_put_float(buf, 20, pitchspeed);
80011306:	ea c9 ff fc 	sub	r9,r5,-4
8001130a:	ee c8 00 1c 	sub	r8,r7,28
8001130e:	2e c8       	sub	r8,-20
80011310:	12 9b       	mov	r11,r9
80011312:	10 9c       	mov	r12,r8
80011314:	fe b0 fc 9e 	rcall	80010c50 <byte_swap_4>
	_mav_put_float(buf, 24, yawspeed);
80011318:	ea c9 ff f8 	sub	r9,r5,-8
8001131c:	ee c8 00 1c 	sub	r8,r7,28
80011320:	2e 88       	sub	r8,-24
80011322:	12 9b       	mov	r11,r9
80011324:	10 9c       	mov	r12,r8
80011326:	fe b0 fc 95 	rcall	80010c50 <byte_swap_4>

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_ATTITUDE, buf, MAVLINK_MSG_ID_ATTITUDE_LEN, MAVLINK_MSG_ID_ATTITUDE_CRC);
8001132a:	ee ca 00 1c 	sub	r10,r7,28
8001132e:	32 78       	mov	r8,39
80011330:	31 c9       	mov	r9,28
80011332:	31 eb       	mov	r11,30
80011334:	ee fc ff e0 	ld.w	r12,r7[-32]
80011338:	fe b0 fb c4 	rcall	80010ac0 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_ATTITUDE, (const char *)&packet, MAVLINK_MSG_ID_ATTITUDE_LEN, MAVLINK_MSG_ID_ATTITUDE_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_ATTITUDE, (const char *)&packet, MAVLINK_MSG_ID_ATTITUDE_LEN);
#endif
#endif
}
8001133c:	2f 4d       	sub	sp,-48
8001133e:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80011342:	00 00       	add	r0,r0
80011344:	80 01       	ld.sh	r1,r0[0x0]
80011346:	11 1a       	ld.sh	r10,r8++

80011348 <mavlink_msg_attitude_quaternion_send>:
 * @param yawspeed Yaw angular speed (rad/s)
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_attitude_quaternion_send(mavlink_channel_t chan, uint32_t time_boot_ms, float q1, float q2, float q3, float q4, float rollspeed, float pitchspeed, float yawspeed)
{
80011348:	eb cd 40 e0 	pushm	r5-r7,lr
8001134c:	1a 97       	mov	r7,sp
8001134e:	20 dd       	sub	sp,52
80011350:	4b 16       	lddpc	r6,80011414 <mavlink_msg_attitude_quaternion_send+0xcc>
80011352:	1e 26       	rsub	r6,pc
80011354:	ee c5 ff f0 	sub	r5,r7,-16
80011358:	ef 4c ff dc 	st.w	r7[-36],r12
8001135c:	ef 4b ff d8 	st.w	r7[-40],r11
80011360:	ef 4a ff d4 	st.w	r7[-44],r10
80011364:	ef 49 ff d0 	st.w	r7[-48],r9
80011368:	ef 48 ff cc 	st.w	r7[-52],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_ATTITUDE_QUATERNION_LEN];
	_mav_put_uint32_t(buf, 0, time_boot_ms);
8001136c:	ee c9 00 28 	sub	r9,r7,40
80011370:	ee c8 00 20 	sub	r8,r7,32
80011374:	12 9b       	mov	r11,r9
80011376:	10 9c       	mov	r12,r8
80011378:	fe b0 fc 6c 	rcall	80010c50 <byte_swap_4>
	_mav_put_float(buf, 4, q1);
8001137c:	ee c9 00 2c 	sub	r9,r7,44
80011380:	ee c8 00 20 	sub	r8,r7,32
80011384:	2f c8       	sub	r8,-4
80011386:	12 9b       	mov	r11,r9
80011388:	10 9c       	mov	r12,r8
8001138a:	fe b0 fc 63 	rcall	80010c50 <byte_swap_4>
	_mav_put_float(buf, 8, q2);
8001138e:	ee c9 00 30 	sub	r9,r7,48
80011392:	ee c8 00 20 	sub	r8,r7,32
80011396:	2f 88       	sub	r8,-8
80011398:	12 9b       	mov	r11,r9
8001139a:	10 9c       	mov	r12,r8
8001139c:	fe b0 fc 5a 	rcall	80010c50 <byte_swap_4>
	_mav_put_float(buf, 12, q3);
800113a0:	ee c9 00 34 	sub	r9,r7,52
800113a4:	ee c8 00 20 	sub	r8,r7,32
800113a8:	2f 48       	sub	r8,-12
800113aa:	12 9b       	mov	r11,r9
800113ac:	10 9c       	mov	r12,r8
800113ae:	fe b0 fc 51 	rcall	80010c50 <byte_swap_4>
	_mav_put_float(buf, 16, q4);
800113b2:	0a 99       	mov	r9,r5
800113b4:	ee c8 00 20 	sub	r8,r7,32
800113b8:	2f 08       	sub	r8,-16
800113ba:	12 9b       	mov	r11,r9
800113bc:	10 9c       	mov	r12,r8
800113be:	fe b0 fc 49 	rcall	80010c50 <byte_swap_4>
	_mav_put_float(buf, 20, rollspeed);
800113c2:	ea c9 ff fc 	sub	r9,r5,-4
800113c6:	ee c8 00 20 	sub	r8,r7,32
800113ca:	2e c8       	sub	r8,-20
800113cc:	12 9b       	mov	r11,r9
800113ce:	10 9c       	mov	r12,r8
800113d0:	fe b0 fc 40 	rcall	80010c50 <byte_swap_4>
	_mav_put_float(buf, 24, pitchspeed);
800113d4:	ea c9 ff f8 	sub	r9,r5,-8
800113d8:	ee c8 00 20 	sub	r8,r7,32
800113dc:	2e 88       	sub	r8,-24
800113de:	12 9b       	mov	r11,r9
800113e0:	10 9c       	mov	r12,r8
800113e2:	fe b0 fc 37 	rcall	80010c50 <byte_swap_4>
	_mav_put_float(buf, 28, yawspeed);
800113e6:	ea c9 ff f4 	sub	r9,r5,-12
800113ea:	ee c8 00 20 	sub	r8,r7,32
800113ee:	2e 48       	sub	r8,-28
800113f0:	12 9b       	mov	r11,r9
800113f2:	10 9c       	mov	r12,r8
800113f4:	fe b0 fc 2e 	rcall	80010c50 <byte_swap_4>

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_ATTITUDE_QUATERNION, buf, MAVLINK_MSG_ID_ATTITUDE_QUATERNION_LEN, MAVLINK_MSG_ID_ATTITUDE_QUATERNION_CRC);
800113f8:	ee ca 00 20 	sub	r10,r7,32
800113fc:	e0 68 00 f6 	mov	r8,246
80011400:	32 09       	mov	r9,32
80011402:	31 fb       	mov	r11,31
80011404:	ee fc ff dc 	ld.w	r12,r7[-36]
80011408:	fe b0 fb 5c 	rcall	80010ac0 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_ATTITUDE_QUATERNION, (const char *)&packet, MAVLINK_MSG_ID_ATTITUDE_QUATERNION_LEN, MAVLINK_MSG_ID_ATTITUDE_QUATERNION_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_ATTITUDE_QUATERNION, (const char *)&packet, MAVLINK_MSG_ID_ATTITUDE_QUATERNION_LEN);
#endif
#endif
}
8001140c:	2f 3d       	sub	sp,-52
8001140e:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80011412:	00 00       	add	r0,r0
80011414:	80 01       	ld.sh	r1,r0[0x0]
80011416:	11 d6       	ld.ub	r6,r8[0x5]

80011418 <mavlink_msg_local_position_ned_send>:
 * @param vz Z Speed
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_local_position_ned_send(mavlink_channel_t chan, uint32_t time_boot_ms, float x, float y, float z, float vx, float vy, float vz)
{
80011418:	eb cd 40 e0 	pushm	r5-r7,lr
8001141c:	1a 97       	mov	r7,sp
8001141e:	20 cd       	sub	sp,48
80011420:	4a c6       	lddpc	r6,800114d0 <mavlink_msg_local_position_ned_send+0xb8>
80011422:	1e 26       	rsub	r6,pc
80011424:	ee c5 ff f0 	sub	r5,r7,-16
80011428:	ef 4c ff e0 	st.w	r7[-32],r12
8001142c:	ef 4b ff dc 	st.w	r7[-36],r11
80011430:	ef 4a ff d8 	st.w	r7[-40],r10
80011434:	ef 49 ff d4 	st.w	r7[-44],r9
80011438:	ef 48 ff d0 	st.w	r7[-48],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_LOCAL_POSITION_NED_LEN];
	_mav_put_uint32_t(buf, 0, time_boot_ms);
8001143c:	ee c9 00 24 	sub	r9,r7,36
80011440:	ee c8 00 1c 	sub	r8,r7,28
80011444:	12 9b       	mov	r11,r9
80011446:	10 9c       	mov	r12,r8
80011448:	fe b0 fc 04 	rcall	80010c50 <byte_swap_4>
	_mav_put_float(buf, 4, x);
8001144c:	ee c9 00 28 	sub	r9,r7,40
80011450:	ee c8 00 1c 	sub	r8,r7,28
80011454:	2f c8       	sub	r8,-4
80011456:	12 9b       	mov	r11,r9
80011458:	10 9c       	mov	r12,r8
8001145a:	fe b0 fb fb 	rcall	80010c50 <byte_swap_4>
	_mav_put_float(buf, 8, y);
8001145e:	ee c9 00 2c 	sub	r9,r7,44
80011462:	ee c8 00 1c 	sub	r8,r7,28
80011466:	2f 88       	sub	r8,-8
80011468:	12 9b       	mov	r11,r9
8001146a:	10 9c       	mov	r12,r8
8001146c:	fe b0 fb f2 	rcall	80010c50 <byte_swap_4>
	_mav_put_float(buf, 12, z);
80011470:	ee c9 00 30 	sub	r9,r7,48
80011474:	ee c8 00 1c 	sub	r8,r7,28
80011478:	2f 48       	sub	r8,-12
8001147a:	12 9b       	mov	r11,r9
8001147c:	10 9c       	mov	r12,r8
8001147e:	fe b0 fb e9 	rcall	80010c50 <byte_swap_4>
	_mav_put_float(buf, 16, vx);
80011482:	0a 99       	mov	r9,r5
80011484:	ee c8 00 1c 	sub	r8,r7,28
80011488:	2f 08       	sub	r8,-16
8001148a:	12 9b       	mov	r11,r9
8001148c:	10 9c       	mov	r12,r8
8001148e:	fe b0 fb e1 	rcall	80010c50 <byte_swap_4>
	_mav_put_float(buf, 20, vy);
80011492:	ea c9 ff fc 	sub	r9,r5,-4
80011496:	ee c8 00 1c 	sub	r8,r7,28
8001149a:	2e c8       	sub	r8,-20
8001149c:	12 9b       	mov	r11,r9
8001149e:	10 9c       	mov	r12,r8
800114a0:	fe b0 fb d8 	rcall	80010c50 <byte_swap_4>
	_mav_put_float(buf, 24, vz);
800114a4:	ea c9 ff f8 	sub	r9,r5,-8
800114a8:	ee c8 00 1c 	sub	r8,r7,28
800114ac:	2e 88       	sub	r8,-24
800114ae:	12 9b       	mov	r11,r9
800114b0:	10 9c       	mov	r12,r8
800114b2:	fe b0 fb cf 	rcall	80010c50 <byte_swap_4>

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_LOCAL_POSITION_NED, buf, MAVLINK_MSG_ID_LOCAL_POSITION_NED_LEN, MAVLINK_MSG_ID_LOCAL_POSITION_NED_CRC);
800114b6:	ee ca 00 1c 	sub	r10,r7,28
800114ba:	e0 68 00 b9 	mov	r8,185
800114be:	31 c9       	mov	r9,28
800114c0:	32 0b       	mov	r11,32
800114c2:	ee fc ff e0 	ld.w	r12,r7[-32]
800114c6:	fe b0 fa fd 	rcall	80010ac0 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_LOCAL_POSITION_NED, (const char *)&packet, MAVLINK_MSG_ID_LOCAL_POSITION_NED_LEN, MAVLINK_MSG_ID_LOCAL_POSITION_NED_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_LOCAL_POSITION_NED, (const char *)&packet, MAVLINK_MSG_ID_LOCAL_POSITION_NED_LEN);
#endif
#endif
}
800114ca:	2f 4d       	sub	sp,-48
800114cc:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800114d0:	80 01       	ld.sh	r1,r0[0x0]
800114d2:	12 a6       	st.w	r9++,r6

800114d4 <mavlink_msg_global_position_int_send>:
 * @param hdg Compass heading in degrees * 100, 0.0..359.99 degrees. If unknown, set to: UINT16_MAX
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_global_position_int_send(mavlink_channel_t chan, uint32_t time_boot_ms, int32_t lat, int32_t lon, int32_t alt, int32_t relative_alt, int16_t vx, int16_t vy, int16_t vz, uint16_t hdg)
{
800114d4:	eb cd 40 e0 	pushm	r5-r7,lr
800114d8:	1a 97       	mov	r7,sp
800114da:	21 0d       	sub	sp,64
800114dc:	4b b6       	lddpc	r6,800115c8 <mavlink_msg_global_position_int_send+0xf4>
800114de:	1e 26       	rsub	r6,pc
800114e0:	ee c5 ff f0 	sub	r5,r7,-16
800114e4:	ef 4c ff e0 	st.w	r7[-32],r12
800114e8:	ef 4b ff dc 	st.w	r7[-36],r11
800114ec:	ef 4a ff d8 	st.w	r7[-40],r10
800114f0:	ef 49 ff d4 	st.w	r7[-44],r9
800114f4:	ef 48 ff d0 	st.w	r7[-48],r8
800114f8:	6a 1b       	ld.w	r11,r5[0x4]
800114fa:	6a 2a       	ld.w	r10,r5[0x8]
800114fc:	6a 39       	ld.w	r9,r5[0xc]
800114fe:	6a 48       	ld.w	r8,r5[0x10]
80011500:	ef 5b ff cc 	st.h	r7[-52],r11
80011504:	ef 5a ff c8 	st.h	r7[-56],r10
80011508:	ef 59 ff c4 	st.h	r7[-60],r9
8001150c:	ef 58 ff c0 	st.h	r7[-64],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_GLOBAL_POSITION_INT_LEN];
	_mav_put_uint32_t(buf, 0, time_boot_ms);
80011510:	ee c9 00 24 	sub	r9,r7,36
80011514:	ee c8 00 1c 	sub	r8,r7,28
80011518:	12 9b       	mov	r11,r9
8001151a:	10 9c       	mov	r12,r8
8001151c:	fe b0 fb 9a 	rcall	80010c50 <byte_swap_4>
	_mav_put_int32_t(buf, 4, lat);
80011520:	ee c9 00 28 	sub	r9,r7,40
80011524:	ee c8 00 1c 	sub	r8,r7,28
80011528:	2f c8       	sub	r8,-4
8001152a:	12 9b       	mov	r11,r9
8001152c:	10 9c       	mov	r12,r8
8001152e:	fe b0 fb 91 	rcall	80010c50 <byte_swap_4>
	_mav_put_int32_t(buf, 8, lon);
80011532:	ee c9 00 2c 	sub	r9,r7,44
80011536:	ee c8 00 1c 	sub	r8,r7,28
8001153a:	2f 88       	sub	r8,-8
8001153c:	12 9b       	mov	r11,r9
8001153e:	10 9c       	mov	r12,r8
80011540:	fe b0 fb 88 	rcall	80010c50 <byte_swap_4>
	_mav_put_int32_t(buf, 12, alt);
80011544:	ee c9 00 30 	sub	r9,r7,48
80011548:	ee c8 00 1c 	sub	r8,r7,28
8001154c:	2f 48       	sub	r8,-12
8001154e:	12 9b       	mov	r11,r9
80011550:	10 9c       	mov	r12,r8
80011552:	fe b0 fb 7f 	rcall	80010c50 <byte_swap_4>
	_mav_put_int32_t(buf, 16, relative_alt);
80011556:	0a 99       	mov	r9,r5
80011558:	ee c8 00 1c 	sub	r8,r7,28
8001155c:	2f 08       	sub	r8,-16
8001155e:	12 9b       	mov	r11,r9
80011560:	10 9c       	mov	r12,r8
80011562:	fe b0 fb 77 	rcall	80010c50 <byte_swap_4>
	_mav_put_int16_t(buf, 20, vx);
80011566:	ee c9 00 34 	sub	r9,r7,52
8001156a:	ee c8 00 1c 	sub	r8,r7,28
8001156e:	2e c8       	sub	r8,-20
80011570:	12 9b       	mov	r11,r9
80011572:	10 9c       	mov	r12,r8
80011574:	fe b0 fb 54 	rcall	80010c1c <byte_swap_2>
	_mav_put_int16_t(buf, 22, vy);
80011578:	ee c9 00 38 	sub	r9,r7,56
8001157c:	ee c8 00 1c 	sub	r8,r7,28
80011580:	2e a8       	sub	r8,-22
80011582:	12 9b       	mov	r11,r9
80011584:	10 9c       	mov	r12,r8
80011586:	fe b0 fb 4b 	rcall	80010c1c <byte_swap_2>
	_mav_put_int16_t(buf, 24, vz);
8001158a:	ee c9 00 3c 	sub	r9,r7,60
8001158e:	ee c8 00 1c 	sub	r8,r7,28
80011592:	2e 88       	sub	r8,-24
80011594:	12 9b       	mov	r11,r9
80011596:	10 9c       	mov	r12,r8
80011598:	fe b0 fb 42 	rcall	80010c1c <byte_swap_2>
	_mav_put_uint16_t(buf, 26, hdg);
8001159c:	ee c9 00 40 	sub	r9,r7,64
800115a0:	ee c8 00 1c 	sub	r8,r7,28
800115a4:	2e 68       	sub	r8,-26
800115a6:	12 9b       	mov	r11,r9
800115a8:	10 9c       	mov	r12,r8
800115aa:	fe b0 fb 39 	rcall	80010c1c <byte_swap_2>

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_GLOBAL_POSITION_INT, buf, MAVLINK_MSG_ID_GLOBAL_POSITION_INT_LEN, MAVLINK_MSG_ID_GLOBAL_POSITION_INT_CRC);
800115ae:	ee ca 00 1c 	sub	r10,r7,28
800115b2:	36 88       	mov	r8,104
800115b4:	31 c9       	mov	r9,28
800115b6:	32 1b       	mov	r11,33
800115b8:	ee fc ff e0 	ld.w	r12,r7[-32]
800115bc:	fe b0 fa 82 	rcall	80010ac0 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_GLOBAL_POSITION_INT, (const char *)&packet, MAVLINK_MSG_ID_GLOBAL_POSITION_INT_LEN, MAVLINK_MSG_ID_GLOBAL_POSITION_INT_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_GLOBAL_POSITION_INT, (const char *)&packet, MAVLINK_MSG_ID_GLOBAL_POSITION_INT_LEN);
#endif
#endif
}
800115c0:	2f 0d       	sub	sp,-64
800115c2:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800115c6:	00 00       	add	r0,r0
800115c8:	80 01       	ld.sh	r1,r0[0x0]
800115ca:	13 62       	ld.uh	r2,--r9

800115cc <mavlink_msg_rc_channels_scaled_send>:
 * @param rssi Receive signal strength indicator, 0: 0%, 100: 100%, 255: invalid/unknown.
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_rc_channels_scaled_send(mavlink_channel_t chan, uint32_t time_boot_ms, uint8_t port, int16_t chan1_scaled, int16_t chan2_scaled, int16_t chan3_scaled, int16_t chan4_scaled, int16_t chan5_scaled, int16_t chan6_scaled, int16_t chan7_scaled, int16_t chan8_scaled, uint8_t rssi)
{
800115cc:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
800115d0:	1a 97       	mov	r7,sp
800115d2:	21 2d       	sub	sp,72
800115d4:	4c 86       	lddpc	r6,800116f4 <mavlink_msg_rc_channels_scaled_send+0x128>
800115d6:	1e 26       	rsub	r6,pc
800115d8:	ee ce ff e0 	sub	lr,r7,-32
800115dc:	ef 4c ff e4 	st.w	r7[-28],r12
800115e0:	ef 4b ff e0 	st.w	r7[-32],r11
800115e4:	14 90       	mov	r0,r10
800115e6:	12 91       	mov	r1,r9
800115e8:	10 92       	mov	r2,r8
800115ea:	7c 03       	ld.w	r3,lr[0x0]
800115ec:	7c 15       	ld.w	r5,lr[0x4]
800115ee:	7c 2c       	ld.w	r12,lr[0x8]
800115f0:	7c 3b       	ld.w	r11,lr[0xc]
800115f2:	7c 4a       	ld.w	r10,lr[0x10]
800115f4:	7c 59       	ld.w	r9,lr[0x14]
800115f6:	7c 68       	ld.w	r8,lr[0x18]
800115f8:	00 9e       	mov	lr,r0
800115fa:	ef 6e ff dc 	st.b	r7[-36],lr
800115fe:	02 9e       	mov	lr,r1
80011600:	ef 5e ff d8 	st.h	r7[-40],lr
80011604:	04 9e       	mov	lr,r2
80011606:	ef 5e ff d4 	st.h	r7[-44],lr
8001160a:	06 9e       	mov	lr,r3
8001160c:	ef 5e ff d0 	st.h	r7[-48],lr
80011610:	0a 9e       	mov	lr,r5
80011612:	ef 5e ff cc 	st.h	r7[-52],lr
80011616:	ef 5c ff c8 	st.h	r7[-56],r12
8001161a:	ef 5b ff c4 	st.h	r7[-60],r11
8001161e:	ef 5a ff c0 	st.h	r7[-64],r10
80011622:	ef 59 ff bc 	st.h	r7[-68],r9
80011626:	ef 68 ff b8 	st.b	r7[-72],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_RC_CHANNELS_SCALED_LEN];
	_mav_put_uint32_t(buf, 0, time_boot_ms);
8001162a:	ee c9 00 20 	sub	r9,r7,32
8001162e:	ee c8 00 18 	sub	r8,r7,24
80011632:	12 9b       	mov	r11,r9
80011634:	10 9c       	mov	r12,r8
80011636:	fe b0 fb 0d 	rcall	80010c50 <byte_swap_4>
	_mav_put_int16_t(buf, 4, chan1_scaled);
8001163a:	ee c9 00 28 	sub	r9,r7,40
8001163e:	ee c8 00 18 	sub	r8,r7,24
80011642:	2f c8       	sub	r8,-4
80011644:	12 9b       	mov	r11,r9
80011646:	10 9c       	mov	r12,r8
80011648:	fe b0 fa ea 	rcall	80010c1c <byte_swap_2>
	_mav_put_int16_t(buf, 6, chan2_scaled);
8001164c:	ee c9 00 2c 	sub	r9,r7,44
80011650:	ee c8 00 18 	sub	r8,r7,24
80011654:	2f a8       	sub	r8,-6
80011656:	12 9b       	mov	r11,r9
80011658:	10 9c       	mov	r12,r8
8001165a:	fe b0 fa e1 	rcall	80010c1c <byte_swap_2>
	_mav_put_int16_t(buf, 8, chan3_scaled);
8001165e:	ee c9 00 30 	sub	r9,r7,48
80011662:	ee c8 00 18 	sub	r8,r7,24
80011666:	2f 88       	sub	r8,-8
80011668:	12 9b       	mov	r11,r9
8001166a:	10 9c       	mov	r12,r8
8001166c:	fe b0 fa d8 	rcall	80010c1c <byte_swap_2>
	_mav_put_int16_t(buf, 10, chan4_scaled);
80011670:	ee c9 00 34 	sub	r9,r7,52
80011674:	ee c8 00 18 	sub	r8,r7,24
80011678:	2f 68       	sub	r8,-10
8001167a:	12 9b       	mov	r11,r9
8001167c:	10 9c       	mov	r12,r8
8001167e:	fe b0 fa cf 	rcall	80010c1c <byte_swap_2>
	_mav_put_int16_t(buf, 12, chan5_scaled);
80011682:	ee c9 00 38 	sub	r9,r7,56
80011686:	ee c8 00 18 	sub	r8,r7,24
8001168a:	2f 48       	sub	r8,-12
8001168c:	12 9b       	mov	r11,r9
8001168e:	10 9c       	mov	r12,r8
80011690:	fe b0 fa c6 	rcall	80010c1c <byte_swap_2>
	_mav_put_int16_t(buf, 14, chan6_scaled);
80011694:	ee c9 00 3c 	sub	r9,r7,60
80011698:	ee c8 00 18 	sub	r8,r7,24
8001169c:	2f 28       	sub	r8,-14
8001169e:	12 9b       	mov	r11,r9
800116a0:	10 9c       	mov	r12,r8
800116a2:	fe b0 fa bd 	rcall	80010c1c <byte_swap_2>
	_mav_put_int16_t(buf, 16, chan7_scaled);
800116a6:	ee c9 00 40 	sub	r9,r7,64
800116aa:	ee c8 00 18 	sub	r8,r7,24
800116ae:	2f 08       	sub	r8,-16
800116b0:	12 9b       	mov	r11,r9
800116b2:	10 9c       	mov	r12,r8
800116b4:	fe b0 fa b4 	rcall	80010c1c <byte_swap_2>
	_mav_put_int16_t(buf, 18, chan8_scaled);
800116b8:	ee c9 00 44 	sub	r9,r7,68
800116bc:	ee c8 00 18 	sub	r8,r7,24
800116c0:	2e e8       	sub	r8,-18
800116c2:	12 9b       	mov	r11,r9
800116c4:	10 9c       	mov	r12,r8
800116c6:	fe b0 fa ab 	rcall	80010c1c <byte_swap_2>
	_mav_put_uint8_t(buf, 20, port);
800116ca:	ef 38 ff dc 	ld.ub	r8,r7[-36]
800116ce:	ef 68 ff fc 	st.b	r7[-4],r8
	_mav_put_uint8_t(buf, 21, rssi);
800116d2:	ef 38 ff b8 	ld.ub	r8,r7[-72]
800116d6:	ef 68 ff fd 	st.b	r7[-3],r8

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_RC_CHANNELS_SCALED, buf, MAVLINK_MSG_ID_RC_CHANNELS_SCALED_LEN, MAVLINK_MSG_ID_RC_CHANNELS_SCALED_CRC);
800116da:	ee ca 00 18 	sub	r10,r7,24
800116de:	e0 68 00 ed 	mov	r8,237
800116e2:	31 69       	mov	r9,22
800116e4:	32 2b       	mov	r11,34
800116e6:	ee fc ff e4 	ld.w	r12,r7[-28]
800116ea:	fe b0 f9 eb 	rcall	80010ac0 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_RC_CHANNELS_SCALED, (const char *)&packet, MAVLINK_MSG_ID_RC_CHANNELS_SCALED_LEN, MAVLINK_MSG_ID_RC_CHANNELS_SCALED_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_RC_CHANNELS_SCALED, (const char *)&packet, MAVLINK_MSG_ID_RC_CHANNELS_SCALED_LEN);
#endif
#endif
}
800116ee:	2e ed       	sub	sp,-72
800116f0:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
800116f4:	80 01       	ld.sh	r1,r0[0x0]
800116f6:	14 5a       	eor	r10,r10

800116f8 <mavlink_msg_rc_channels_raw_send>:
 * @param rssi Receive signal strength indicator, 0: 0%, 100: 100%, 255: invalid/unknown.
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_rc_channels_raw_send(mavlink_channel_t chan, uint32_t time_boot_ms, uint8_t port, uint16_t chan1_raw, uint16_t chan2_raw, uint16_t chan3_raw, uint16_t chan4_raw, uint16_t chan5_raw, uint16_t chan6_raw, uint16_t chan7_raw, uint16_t chan8_raw, uint8_t rssi)
{
800116f8:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
800116fc:	1a 97       	mov	r7,sp
800116fe:	21 2d       	sub	sp,72
80011700:	4c 86       	lddpc	r6,80011820 <mavlink_msg_rc_channels_raw_send+0x128>
80011702:	1e 26       	rsub	r6,pc
80011704:	ee ce ff e0 	sub	lr,r7,-32
80011708:	ef 4c ff e4 	st.w	r7[-28],r12
8001170c:	ef 4b ff e0 	st.w	r7[-32],r11
80011710:	14 90       	mov	r0,r10
80011712:	12 91       	mov	r1,r9
80011714:	10 92       	mov	r2,r8
80011716:	7c 03       	ld.w	r3,lr[0x0]
80011718:	7c 15       	ld.w	r5,lr[0x4]
8001171a:	7c 2c       	ld.w	r12,lr[0x8]
8001171c:	7c 3b       	ld.w	r11,lr[0xc]
8001171e:	7c 4a       	ld.w	r10,lr[0x10]
80011720:	7c 59       	ld.w	r9,lr[0x14]
80011722:	7c 68       	ld.w	r8,lr[0x18]
80011724:	00 9e       	mov	lr,r0
80011726:	ef 6e ff dc 	st.b	r7[-36],lr
8001172a:	02 9e       	mov	lr,r1
8001172c:	ef 5e ff d8 	st.h	r7[-40],lr
80011730:	04 9e       	mov	lr,r2
80011732:	ef 5e ff d4 	st.h	r7[-44],lr
80011736:	06 9e       	mov	lr,r3
80011738:	ef 5e ff d0 	st.h	r7[-48],lr
8001173c:	0a 9e       	mov	lr,r5
8001173e:	ef 5e ff cc 	st.h	r7[-52],lr
80011742:	ef 5c ff c8 	st.h	r7[-56],r12
80011746:	ef 5b ff c4 	st.h	r7[-60],r11
8001174a:	ef 5a ff c0 	st.h	r7[-64],r10
8001174e:	ef 59 ff bc 	st.h	r7[-68],r9
80011752:	ef 68 ff b8 	st.b	r7[-72],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_RC_CHANNELS_RAW_LEN];
	_mav_put_uint32_t(buf, 0, time_boot_ms);
80011756:	ee c9 00 20 	sub	r9,r7,32
8001175a:	ee c8 00 18 	sub	r8,r7,24
8001175e:	12 9b       	mov	r11,r9
80011760:	10 9c       	mov	r12,r8
80011762:	fe b0 fa 77 	rcall	80010c50 <byte_swap_4>
	_mav_put_uint16_t(buf, 4, chan1_raw);
80011766:	ee c9 00 28 	sub	r9,r7,40
8001176a:	ee c8 00 18 	sub	r8,r7,24
8001176e:	2f c8       	sub	r8,-4
80011770:	12 9b       	mov	r11,r9
80011772:	10 9c       	mov	r12,r8
80011774:	fe b0 fa 54 	rcall	80010c1c <byte_swap_2>
	_mav_put_uint16_t(buf, 6, chan2_raw);
80011778:	ee c9 00 2c 	sub	r9,r7,44
8001177c:	ee c8 00 18 	sub	r8,r7,24
80011780:	2f a8       	sub	r8,-6
80011782:	12 9b       	mov	r11,r9
80011784:	10 9c       	mov	r12,r8
80011786:	fe b0 fa 4b 	rcall	80010c1c <byte_swap_2>
	_mav_put_uint16_t(buf, 8, chan3_raw);
8001178a:	ee c9 00 30 	sub	r9,r7,48
8001178e:	ee c8 00 18 	sub	r8,r7,24
80011792:	2f 88       	sub	r8,-8
80011794:	12 9b       	mov	r11,r9
80011796:	10 9c       	mov	r12,r8
80011798:	fe b0 fa 42 	rcall	80010c1c <byte_swap_2>
	_mav_put_uint16_t(buf, 10, chan4_raw);
8001179c:	ee c9 00 34 	sub	r9,r7,52
800117a0:	ee c8 00 18 	sub	r8,r7,24
800117a4:	2f 68       	sub	r8,-10
800117a6:	12 9b       	mov	r11,r9
800117a8:	10 9c       	mov	r12,r8
800117aa:	fe b0 fa 39 	rcall	80010c1c <byte_swap_2>
	_mav_put_uint16_t(buf, 12, chan5_raw);
800117ae:	ee c9 00 38 	sub	r9,r7,56
800117b2:	ee c8 00 18 	sub	r8,r7,24
800117b6:	2f 48       	sub	r8,-12
800117b8:	12 9b       	mov	r11,r9
800117ba:	10 9c       	mov	r12,r8
800117bc:	fe b0 fa 30 	rcall	80010c1c <byte_swap_2>
	_mav_put_uint16_t(buf, 14, chan6_raw);
800117c0:	ee c9 00 3c 	sub	r9,r7,60
800117c4:	ee c8 00 18 	sub	r8,r7,24
800117c8:	2f 28       	sub	r8,-14
800117ca:	12 9b       	mov	r11,r9
800117cc:	10 9c       	mov	r12,r8
800117ce:	fe b0 fa 27 	rcall	80010c1c <byte_swap_2>
	_mav_put_uint16_t(buf, 16, chan7_raw);
800117d2:	ee c9 00 40 	sub	r9,r7,64
800117d6:	ee c8 00 18 	sub	r8,r7,24
800117da:	2f 08       	sub	r8,-16
800117dc:	12 9b       	mov	r11,r9
800117de:	10 9c       	mov	r12,r8
800117e0:	fe b0 fa 1e 	rcall	80010c1c <byte_swap_2>
	_mav_put_uint16_t(buf, 18, chan8_raw);
800117e4:	ee c9 00 44 	sub	r9,r7,68
800117e8:	ee c8 00 18 	sub	r8,r7,24
800117ec:	2e e8       	sub	r8,-18
800117ee:	12 9b       	mov	r11,r9
800117f0:	10 9c       	mov	r12,r8
800117f2:	fe b0 fa 15 	rcall	80010c1c <byte_swap_2>
	_mav_put_uint8_t(buf, 20, port);
800117f6:	ef 38 ff dc 	ld.ub	r8,r7[-36]
800117fa:	ef 68 ff fc 	st.b	r7[-4],r8
	_mav_put_uint8_t(buf, 21, rssi);
800117fe:	ef 38 ff b8 	ld.ub	r8,r7[-72]
80011802:	ef 68 ff fd 	st.b	r7[-3],r8

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_RC_CHANNELS_RAW, buf, MAVLINK_MSG_ID_RC_CHANNELS_RAW_LEN, MAVLINK_MSG_ID_RC_CHANNELS_RAW_CRC);
80011806:	ee ca 00 18 	sub	r10,r7,24
8001180a:	e0 68 00 f4 	mov	r8,244
8001180e:	31 69       	mov	r9,22
80011810:	32 3b       	mov	r11,35
80011812:	ee fc ff e4 	ld.w	r12,r7[-28]
80011816:	fe b0 f9 55 	rcall	80010ac0 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_RC_CHANNELS_RAW, (const char *)&packet, MAVLINK_MSG_ID_RC_CHANNELS_RAW_LEN, MAVLINK_MSG_ID_RC_CHANNELS_RAW_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_RC_CHANNELS_RAW, (const char *)&packet, MAVLINK_MSG_ID_RC_CHANNELS_RAW_LEN);
#endif
#endif
}
8001181a:	2e ed       	sub	sp,-72
8001181c:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
80011820:	80 01       	ld.sh	r1,r0[0x0]
80011822:	15 86       	ld.ub	r6,r10[0x0]

80011824 <mavlink_msg_servo_output_raw_send>:
 * @param servo8_raw Servo output 8 value, in microseconds
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_servo_output_raw_send(mavlink_channel_t chan, uint32_t time_usec, uint8_t port, uint16_t servo1_raw, uint16_t servo2_raw, uint16_t servo3_raw, uint16_t servo4_raw, uint16_t servo5_raw, uint16_t servo6_raw, uint16_t servo7_raw, uint16_t servo8_raw)
{
80011824:	eb cd 40 ee 	pushm	r1-r3,r5-r7,lr
80011828:	1a 97       	mov	r7,sp
8001182a:	21 1d       	sub	sp,68
8001182c:	4c 46       	lddpc	r6,8001193c <mavlink_msg_servo_output_raw_send+0x118>
8001182e:	1e 26       	rsub	r6,pc
80011830:	ee ce ff e4 	sub	lr,r7,-28
80011834:	ef 4c ff e4 	st.w	r7[-28],r12
80011838:	ef 4b ff e0 	st.w	r7[-32],r11
8001183c:	14 91       	mov	r1,r10
8001183e:	12 92       	mov	r2,r9
80011840:	10 93       	mov	r3,r8
80011842:	7c 05       	ld.w	r5,lr[0x0]
80011844:	7c 1c       	ld.w	r12,lr[0x4]
80011846:	7c 2b       	ld.w	r11,lr[0x8]
80011848:	7c 3a       	ld.w	r10,lr[0xc]
8001184a:	7c 49       	ld.w	r9,lr[0x10]
8001184c:	7c 58       	ld.w	r8,lr[0x14]
8001184e:	02 9e       	mov	lr,r1
80011850:	ef 6e ff dc 	st.b	r7[-36],lr
80011854:	04 9e       	mov	lr,r2
80011856:	ef 5e ff d8 	st.h	r7[-40],lr
8001185a:	06 9e       	mov	lr,r3
8001185c:	ef 5e ff d4 	st.h	r7[-44],lr
80011860:	0a 9e       	mov	lr,r5
80011862:	ef 5e ff d0 	st.h	r7[-48],lr
80011866:	ef 5c ff cc 	st.h	r7[-52],r12
8001186a:	ef 5b ff c8 	st.h	r7[-56],r11
8001186e:	ef 5a ff c4 	st.h	r7[-60],r10
80011872:	ef 59 ff c0 	st.h	r7[-64],r9
80011876:	ef 58 ff bc 	st.h	r7[-68],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_SERVO_OUTPUT_RAW_LEN];
	_mav_put_uint32_t(buf, 0, time_usec);
8001187a:	ee c9 00 20 	sub	r9,r7,32
8001187e:	ee c8 00 18 	sub	r8,r7,24
80011882:	12 9b       	mov	r11,r9
80011884:	10 9c       	mov	r12,r8
80011886:	fe b0 f9 e5 	rcall	80010c50 <byte_swap_4>
	_mav_put_uint16_t(buf, 4, servo1_raw);
8001188a:	ee c9 00 28 	sub	r9,r7,40
8001188e:	ee c8 00 18 	sub	r8,r7,24
80011892:	2f c8       	sub	r8,-4
80011894:	12 9b       	mov	r11,r9
80011896:	10 9c       	mov	r12,r8
80011898:	fe b0 f9 c2 	rcall	80010c1c <byte_swap_2>
	_mav_put_uint16_t(buf, 6, servo2_raw);
8001189c:	ee c9 00 2c 	sub	r9,r7,44
800118a0:	ee c8 00 18 	sub	r8,r7,24
800118a4:	2f a8       	sub	r8,-6
800118a6:	12 9b       	mov	r11,r9
800118a8:	10 9c       	mov	r12,r8
800118aa:	fe b0 f9 b9 	rcall	80010c1c <byte_swap_2>
	_mav_put_uint16_t(buf, 8, servo3_raw);
800118ae:	ee c9 00 30 	sub	r9,r7,48
800118b2:	ee c8 00 18 	sub	r8,r7,24
800118b6:	2f 88       	sub	r8,-8
800118b8:	12 9b       	mov	r11,r9
800118ba:	10 9c       	mov	r12,r8
800118bc:	fe b0 f9 b0 	rcall	80010c1c <byte_swap_2>
	_mav_put_uint16_t(buf, 10, servo4_raw);
800118c0:	ee c9 00 34 	sub	r9,r7,52
800118c4:	ee c8 00 18 	sub	r8,r7,24
800118c8:	2f 68       	sub	r8,-10
800118ca:	12 9b       	mov	r11,r9
800118cc:	10 9c       	mov	r12,r8
800118ce:	fe b0 f9 a7 	rcall	80010c1c <byte_swap_2>
	_mav_put_uint16_t(buf, 12, servo5_raw);
800118d2:	ee c9 00 38 	sub	r9,r7,56
800118d6:	ee c8 00 18 	sub	r8,r7,24
800118da:	2f 48       	sub	r8,-12
800118dc:	12 9b       	mov	r11,r9
800118de:	10 9c       	mov	r12,r8
800118e0:	fe b0 f9 9e 	rcall	80010c1c <byte_swap_2>
	_mav_put_uint16_t(buf, 14, servo6_raw);
800118e4:	ee c9 00 3c 	sub	r9,r7,60
800118e8:	ee c8 00 18 	sub	r8,r7,24
800118ec:	2f 28       	sub	r8,-14
800118ee:	12 9b       	mov	r11,r9
800118f0:	10 9c       	mov	r12,r8
800118f2:	fe b0 f9 95 	rcall	80010c1c <byte_swap_2>
	_mav_put_uint16_t(buf, 16, servo7_raw);
800118f6:	ee c9 00 40 	sub	r9,r7,64
800118fa:	ee c8 00 18 	sub	r8,r7,24
800118fe:	2f 08       	sub	r8,-16
80011900:	12 9b       	mov	r11,r9
80011902:	10 9c       	mov	r12,r8
80011904:	fe b0 f9 8c 	rcall	80010c1c <byte_swap_2>
	_mav_put_uint16_t(buf, 18, servo8_raw);
80011908:	ee c9 00 44 	sub	r9,r7,68
8001190c:	ee c8 00 18 	sub	r8,r7,24
80011910:	2e e8       	sub	r8,-18
80011912:	12 9b       	mov	r11,r9
80011914:	10 9c       	mov	r12,r8
80011916:	fe b0 f9 83 	rcall	80010c1c <byte_swap_2>
	_mav_put_uint8_t(buf, 20, port);
8001191a:	ef 38 ff dc 	ld.ub	r8,r7[-36]
8001191e:	ef 68 ff fc 	st.b	r7[-4],r8

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_SERVO_OUTPUT_RAW, buf, MAVLINK_MSG_ID_SERVO_OUTPUT_RAW_LEN, MAVLINK_MSG_ID_SERVO_OUTPUT_RAW_CRC);
80011922:	ee ca 00 18 	sub	r10,r7,24
80011926:	e0 68 00 de 	mov	r8,222
8001192a:	31 59       	mov	r9,21
8001192c:	32 4b       	mov	r11,36
8001192e:	ee fc ff e4 	ld.w	r12,r7[-28]
80011932:	fe b0 f8 c7 	rcall	80010ac0 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_SERVO_OUTPUT_RAW, (const char *)&packet, MAVLINK_MSG_ID_SERVO_OUTPUT_RAW_LEN, MAVLINK_MSG_ID_SERVO_OUTPUT_RAW_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_SERVO_OUTPUT_RAW, (const char *)&packet, MAVLINK_MSG_ID_SERVO_OUTPUT_RAW_LEN);
#endif
#endif
}
80011936:	2e fd       	sub	sp,-68
80011938:	e3 cd 80 ee 	ldm	sp++,r1-r3,r5-r7,pc
8001193c:	80 01       	ld.sh	r1,r0[0x0]
8001193e:	16 b2       	st.h	r11++,r2

80011940 <mavlink_msg_roll_pitch_yaw_thrust_setpoint_send>:
 * @param thrust Collective thrust, normalized to 0 .. 1
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_roll_pitch_yaw_thrust_setpoint_send(mavlink_channel_t chan, uint32_t time_boot_ms, float roll, float pitch, float yaw, float thrust)
{
80011940:	eb cd 40 e0 	pushm	r5-r7,lr
80011944:	1a 97       	mov	r7,sp
80011946:	20 ad       	sub	sp,40
80011948:	4a 36       	lddpc	r6,800119d4 <mavlink_msg_roll_pitch_yaw_thrust_setpoint_send+0x94>
8001194a:	1e 26       	rsub	r6,pc
8001194c:	ee c5 ff f0 	sub	r5,r7,-16
80011950:	ef 4c ff e8 	st.w	r7[-24],r12
80011954:	ef 4b ff e4 	st.w	r7[-28],r11
80011958:	ef 4a ff e0 	st.w	r7[-32],r10
8001195c:	ef 49 ff dc 	st.w	r7[-36],r9
80011960:	ef 48 ff d8 	st.w	r7[-40],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_ROLL_PITCH_YAW_THRUST_SETPOINT_LEN];
	_mav_put_uint32_t(buf, 0, time_boot_ms);
80011964:	ee c9 00 1c 	sub	r9,r7,28
80011968:	ee c8 00 14 	sub	r8,r7,20
8001196c:	12 9b       	mov	r11,r9
8001196e:	10 9c       	mov	r12,r8
80011970:	fe b0 f9 70 	rcall	80010c50 <byte_swap_4>
	_mav_put_float(buf, 4, roll);
80011974:	ee c9 00 20 	sub	r9,r7,32
80011978:	ee c8 00 14 	sub	r8,r7,20
8001197c:	2f c8       	sub	r8,-4
8001197e:	12 9b       	mov	r11,r9
80011980:	10 9c       	mov	r12,r8
80011982:	fe b0 f9 67 	rcall	80010c50 <byte_swap_4>
	_mav_put_float(buf, 8, pitch);
80011986:	ee c9 00 24 	sub	r9,r7,36
8001198a:	ee c8 00 14 	sub	r8,r7,20
8001198e:	2f 88       	sub	r8,-8
80011990:	12 9b       	mov	r11,r9
80011992:	10 9c       	mov	r12,r8
80011994:	fe b0 f9 5e 	rcall	80010c50 <byte_swap_4>
	_mav_put_float(buf, 12, yaw);
80011998:	ee c9 00 28 	sub	r9,r7,40
8001199c:	ee c8 00 14 	sub	r8,r7,20
800119a0:	2f 48       	sub	r8,-12
800119a2:	12 9b       	mov	r11,r9
800119a4:	10 9c       	mov	r12,r8
800119a6:	fe b0 f9 55 	rcall	80010c50 <byte_swap_4>
	_mav_put_float(buf, 16, thrust);
800119aa:	0a 99       	mov	r9,r5
800119ac:	ee c8 00 14 	sub	r8,r7,20
800119b0:	2f 08       	sub	r8,-16
800119b2:	12 9b       	mov	r11,r9
800119b4:	10 9c       	mov	r12,r8
800119b6:	fe b0 f9 4d 	rcall	80010c50 <byte_swap_4>

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_ROLL_PITCH_YAW_THRUST_SETPOINT, buf, MAVLINK_MSG_ID_ROLL_PITCH_YAW_THRUST_SETPOINT_LEN, MAVLINK_MSG_ID_ROLL_PITCH_YAW_THRUST_SETPOINT_CRC);
800119ba:	ee ca 00 14 	sub	r10,r7,20
800119be:	e0 68 00 ef 	mov	r8,239
800119c2:	31 49       	mov	r9,20
800119c4:	33 ab       	mov	r11,58
800119c6:	ee fc ff e8 	ld.w	r12,r7[-24]
800119ca:	fe b0 f8 7b 	rcall	80010ac0 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_ROLL_PITCH_YAW_THRUST_SETPOINT, (const char *)&packet, MAVLINK_MSG_ID_ROLL_PITCH_YAW_THRUST_SETPOINT_LEN, MAVLINK_MSG_ID_ROLL_PITCH_YAW_THRUST_SETPOINT_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_ROLL_PITCH_YAW_THRUST_SETPOINT, (const char *)&packet, MAVLINK_MSG_ID_ROLL_PITCH_YAW_THRUST_SETPOINT_LEN);
#endif
#endif
}
800119ce:	2f 6d       	sub	sp,-40
800119d0:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800119d4:	80 01       	ld.sh	r1,r0[0x0]
800119d6:	17 ce       	ld.ub	lr,r11[0x4]

800119d8 <mavlink_msg_roll_pitch_yaw_speed_thrust_setpoint_send>:
 * @param thrust Collective thrust, normalized to 0 .. 1
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_roll_pitch_yaw_speed_thrust_setpoint_send(mavlink_channel_t chan, uint32_t time_boot_ms, float roll_speed, float pitch_speed, float yaw_speed, float thrust)
{
800119d8:	eb cd 40 e0 	pushm	r5-r7,lr
800119dc:	1a 97       	mov	r7,sp
800119de:	20 ad       	sub	sp,40
800119e0:	4a 36       	lddpc	r6,80011a6c <mavlink_msg_roll_pitch_yaw_speed_thrust_setpoint_send+0x94>
800119e2:	1e 26       	rsub	r6,pc
800119e4:	ee c5 ff f0 	sub	r5,r7,-16
800119e8:	ef 4c ff e8 	st.w	r7[-24],r12
800119ec:	ef 4b ff e4 	st.w	r7[-28],r11
800119f0:	ef 4a ff e0 	st.w	r7[-32],r10
800119f4:	ef 49 ff dc 	st.w	r7[-36],r9
800119f8:	ef 48 ff d8 	st.w	r7[-40],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_ROLL_PITCH_YAW_SPEED_THRUST_SETPOINT_LEN];
	_mav_put_uint32_t(buf, 0, time_boot_ms);
800119fc:	ee c9 00 1c 	sub	r9,r7,28
80011a00:	ee c8 00 14 	sub	r8,r7,20
80011a04:	12 9b       	mov	r11,r9
80011a06:	10 9c       	mov	r12,r8
80011a08:	fe b0 f9 24 	rcall	80010c50 <byte_swap_4>
	_mav_put_float(buf, 4, roll_speed);
80011a0c:	ee c9 00 20 	sub	r9,r7,32
80011a10:	ee c8 00 14 	sub	r8,r7,20
80011a14:	2f c8       	sub	r8,-4
80011a16:	12 9b       	mov	r11,r9
80011a18:	10 9c       	mov	r12,r8
80011a1a:	fe b0 f9 1b 	rcall	80010c50 <byte_swap_4>
	_mav_put_float(buf, 8, pitch_speed);
80011a1e:	ee c9 00 24 	sub	r9,r7,36
80011a22:	ee c8 00 14 	sub	r8,r7,20
80011a26:	2f 88       	sub	r8,-8
80011a28:	12 9b       	mov	r11,r9
80011a2a:	10 9c       	mov	r12,r8
80011a2c:	fe b0 f9 12 	rcall	80010c50 <byte_swap_4>
	_mav_put_float(buf, 12, yaw_speed);
80011a30:	ee c9 00 28 	sub	r9,r7,40
80011a34:	ee c8 00 14 	sub	r8,r7,20
80011a38:	2f 48       	sub	r8,-12
80011a3a:	12 9b       	mov	r11,r9
80011a3c:	10 9c       	mov	r12,r8
80011a3e:	fe b0 f9 09 	rcall	80010c50 <byte_swap_4>
	_mav_put_float(buf, 16, thrust);
80011a42:	0a 99       	mov	r9,r5
80011a44:	ee c8 00 14 	sub	r8,r7,20
80011a48:	2f 08       	sub	r8,-16
80011a4a:	12 9b       	mov	r11,r9
80011a4c:	10 9c       	mov	r12,r8
80011a4e:	fe b0 f9 01 	rcall	80010c50 <byte_swap_4>

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_ROLL_PITCH_YAW_SPEED_THRUST_SETPOINT, buf, MAVLINK_MSG_ID_ROLL_PITCH_YAW_SPEED_THRUST_SETPOINT_LEN, MAVLINK_MSG_ID_ROLL_PITCH_YAW_SPEED_THRUST_SETPOINT_CRC);
80011a52:	ee ca 00 14 	sub	r10,r7,20
80011a56:	e0 68 00 ee 	mov	r8,238
80011a5a:	31 49       	mov	r9,20
80011a5c:	33 bb       	mov	r11,59
80011a5e:	ee fc ff e8 	ld.w	r12,r7[-24]
80011a62:	fe b0 f8 2f 	rcall	80010ac0 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_ROLL_PITCH_YAW_SPEED_THRUST_SETPOINT, (const char *)&packet, MAVLINK_MSG_ID_ROLL_PITCH_YAW_SPEED_THRUST_SETPOINT_LEN, MAVLINK_MSG_ID_ROLL_PITCH_YAW_SPEED_THRUST_SETPOINT_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_ROLL_PITCH_YAW_SPEED_THRUST_SETPOINT, (const char *)&packet, MAVLINK_MSG_ID_ROLL_PITCH_YAW_SPEED_THRUST_SETPOINT_LEN);
#endif
#endif
}
80011a66:	2f 6d       	sub	sp,-40
80011a68:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80011a6c:	80 01       	ld.sh	r1,r0[0x0]
80011a6e:	18 66       	and	r6,r12

80011a70 <mavlink_msg_vfr_hud_send>:
 * @param climb Current climb rate in meters/second
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_vfr_hud_send(mavlink_channel_t chan, float airspeed, float groundspeed, int16_t heading, uint16_t throttle, float alt, float climb)
{
80011a70:	eb cd 40 e0 	pushm	r5-r7,lr
80011a74:	1a 97       	mov	r7,sp
80011a76:	20 ad       	sub	sp,40
80011a78:	4a 76       	lddpc	r6,80011b14 <mavlink_msg_vfr_hud_send+0xa4>
80011a7a:	1e 26       	rsub	r6,pc
80011a7c:	ee c5 ff f0 	sub	r5,r7,-16
80011a80:	ef 4c ff e8 	st.w	r7[-24],r12
80011a84:	ef 4b ff e4 	st.w	r7[-28],r11
80011a88:	ef 4a ff e0 	st.w	r7[-32],r10
80011a8c:	ef 59 ff dc 	st.h	r7[-36],r9
80011a90:	ef 58 ff d8 	st.h	r7[-40],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_VFR_HUD_LEN];
	_mav_put_float(buf, 0, airspeed);
80011a94:	ee c9 00 1c 	sub	r9,r7,28
80011a98:	ee c8 00 14 	sub	r8,r7,20
80011a9c:	12 9b       	mov	r11,r9
80011a9e:	10 9c       	mov	r12,r8
80011aa0:	fe b0 f8 d8 	rcall	80010c50 <byte_swap_4>
	_mav_put_float(buf, 4, groundspeed);
80011aa4:	ee c9 00 20 	sub	r9,r7,32
80011aa8:	ee c8 00 14 	sub	r8,r7,20
80011aac:	2f c8       	sub	r8,-4
80011aae:	12 9b       	mov	r11,r9
80011ab0:	10 9c       	mov	r12,r8
80011ab2:	fe b0 f8 cf 	rcall	80010c50 <byte_swap_4>
	_mav_put_float(buf, 8, alt);
80011ab6:	0a 99       	mov	r9,r5
80011ab8:	ee c8 00 14 	sub	r8,r7,20
80011abc:	2f 88       	sub	r8,-8
80011abe:	12 9b       	mov	r11,r9
80011ac0:	10 9c       	mov	r12,r8
80011ac2:	fe b0 f8 c7 	rcall	80010c50 <byte_swap_4>
	_mav_put_float(buf, 12, climb);
80011ac6:	ea c9 ff fc 	sub	r9,r5,-4
80011aca:	ee c8 00 14 	sub	r8,r7,20
80011ace:	2f 48       	sub	r8,-12
80011ad0:	12 9b       	mov	r11,r9
80011ad2:	10 9c       	mov	r12,r8
80011ad4:	fe b0 f8 be 	rcall	80010c50 <byte_swap_4>
	_mav_put_int16_t(buf, 16, heading);
80011ad8:	ee c9 00 24 	sub	r9,r7,36
80011adc:	ee c8 00 14 	sub	r8,r7,20
80011ae0:	2f 08       	sub	r8,-16
80011ae2:	12 9b       	mov	r11,r9
80011ae4:	10 9c       	mov	r12,r8
80011ae6:	fe b0 f8 9b 	rcall	80010c1c <byte_swap_2>
	_mav_put_uint16_t(buf, 18, throttle);
80011aea:	ee c9 00 28 	sub	r9,r7,40
80011aee:	ee c8 00 14 	sub	r8,r7,20
80011af2:	2e e8       	sub	r8,-18
80011af4:	12 9b       	mov	r11,r9
80011af6:	10 9c       	mov	r12,r8
80011af8:	fe b0 f8 92 	rcall	80010c1c <byte_swap_2>

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_VFR_HUD, buf, MAVLINK_MSG_ID_VFR_HUD_LEN, MAVLINK_MSG_ID_VFR_HUD_CRC);
80011afc:	ee ca 00 14 	sub	r10,r7,20
80011b00:	31 48       	mov	r8,20
80011b02:	31 49       	mov	r9,20
80011b04:	34 ab       	mov	r11,74
80011b06:	ee fc ff e8 	ld.w	r12,r7[-24]
80011b0a:	fe b0 f7 db 	rcall	80010ac0 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_VFR_HUD, (const char *)&packet, MAVLINK_MSG_ID_VFR_HUD_LEN, MAVLINK_MSG_ID_VFR_HUD_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_VFR_HUD, (const char *)&packet, MAVLINK_MSG_ID_VFR_HUD_LEN);
#endif
#endif
}
80011b0e:	2f 6d       	sub	sp,-40
80011b10:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80011b14:	80 01       	ld.sh	r1,r0[0x0]
80011b16:	18 fe       	st.b	--r12,lr

80011b18 <mavlink_msg_command_long_get_target_system>:
 * @brief Get field target_system from command_long message
 *
 * @return System which should execute the command
 */
static inline uint8_t mavlink_msg_command_long_get_target_system(const mavlink_message_t* msg)
{
80011b18:	eb cd 40 80 	pushm	r7,lr
80011b1c:	1a 97       	mov	r7,sp
80011b1e:	20 1d       	sub	sp,4
80011b20:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  30);
80011b24:	ee f8 ff fc 	ld.w	r8,r7[-4]
80011b28:	2f 88       	sub	r8,-8
80011b2a:	2e 28       	sub	r8,-30
80011b2c:	11 88       	ld.ub	r8,r8[0x0]
}
80011b2e:	10 9c       	mov	r12,r8
80011b30:	2f fd       	sub	sp,-4
80011b32:	e3 cd 80 80 	ldm	sp++,r7,pc

80011b36 <mavlink_msg_command_long_get_target_component>:
 * @brief Get field target_component from command_long message
 *
 * @return Component which should execute the command, 0 for all components
 */
static inline uint8_t mavlink_msg_command_long_get_target_component(const mavlink_message_t* msg)
{
80011b36:	eb cd 40 80 	pushm	r7,lr
80011b3a:	1a 97       	mov	r7,sp
80011b3c:	20 1d       	sub	sp,4
80011b3e:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  31);
80011b42:	ee f8 ff fc 	ld.w	r8,r7[-4]
80011b46:	2f 88       	sub	r8,-8
80011b48:	2e 18       	sub	r8,-31
80011b4a:	11 88       	ld.ub	r8,r8[0x0]
}
80011b4c:	10 9c       	mov	r12,r8
80011b4e:	2f fd       	sub	sp,-4
80011b50:	e3 cd 80 80 	ldm	sp++,r7,pc

80011b54 <mavlink_msg_command_long_get_command>:
 * @brief Get field command from command_long message
 *
 * @return Command ID, as defined by MAV_CMD enum.
 */
static inline uint16_t mavlink_msg_command_long_get_command(const mavlink_message_t* msg)
{
80011b54:	eb cd 40 c0 	pushm	r6-r7,lr
80011b58:	1a 97       	mov	r7,sp
80011b5a:	20 1d       	sub	sp,4
80011b5c:	48 86       	lddpc	r6,80011b7c <mavlink_msg_command_long_get_command+0x28>
80011b5e:	1e 26       	rsub	r6,pc
80011b60:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint16_t(msg,  28);
80011b64:	31 cb       	mov	r11,28
80011b66:	ee fc ff fc 	ld.w	r12,r7[-4]
80011b6a:	fe b0 f9 37 	rcall	80010dd8 <_MAV_RETURN_uint16_t>
80011b6e:	18 98       	mov	r8,r12
80011b70:	5c 88       	casts.h	r8
80011b72:	5c 88       	casts.h	r8
}
80011b74:	10 9c       	mov	r12,r8
80011b76:	2f fd       	sub	sp,-4
80011b78:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80011b7c:	80 01       	ld.sh	r1,r0[0x0]
80011b7e:	19 e2       	ld.ub	r2,r12[0x6]

80011b80 <mavlink_msg_command_long_get_confirmation>:
 * @brief Get field confirmation from command_long message
 *
 * @return 0: First transmission of this command. 1-255: Confirmation transmissions (e.g. for kill command)
 */
static inline uint8_t mavlink_msg_command_long_get_confirmation(const mavlink_message_t* msg)
{
80011b80:	eb cd 40 80 	pushm	r7,lr
80011b84:	1a 97       	mov	r7,sp
80011b86:	20 1d       	sub	sp,4
80011b88:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  32);
80011b8c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80011b90:	2f 88       	sub	r8,-8
80011b92:	2e 08       	sub	r8,-32
80011b94:	11 88       	ld.ub	r8,r8[0x0]
}
80011b96:	10 9c       	mov	r12,r8
80011b98:	2f fd       	sub	sp,-4
80011b9a:	e3 cd 80 80 	ldm	sp++,r7,pc

80011b9e <mavlink_msg_command_long_get_param1>:
 * @brief Get field param1 from command_long message
 *
 * @return Parameter 1, as defined by MAV_CMD enum.
 */
static inline float mavlink_msg_command_long_get_param1(const mavlink_message_t* msg)
{
80011b9e:	eb cd 40 c0 	pushm	r6-r7,lr
80011ba2:	1a 97       	mov	r7,sp
80011ba4:	20 1d       	sub	sp,4
80011ba6:	48 86       	lddpc	r6,80011bc4 <mavlink_msg_command_long_get_param1+0x26>
80011ba8:	1e 26       	rsub	r6,pc
80011baa:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_float(msg,  0);
80011bae:	30 0b       	mov	r11,0
80011bb0:	ee fc ff fc 	ld.w	r12,r7[-4]
80011bb4:	fe b0 f9 32 	rcall	80010e18 <_MAV_RETURN_float>
80011bb8:	18 98       	mov	r8,r12
}
80011bba:	10 9c       	mov	r12,r8
80011bbc:	2f fd       	sub	sp,-4
80011bbe:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80011bc2:	00 00       	add	r0,r0
80011bc4:	80 01       	ld.sh	r1,r0[0x0]
80011bc6:	1a 2c       	rsub	r12,sp

80011bc8 <mavlink_msg_command_long_get_param2>:
 * @brief Get field param2 from command_long message
 *
 * @return Parameter 2, as defined by MAV_CMD enum.
 */
static inline float mavlink_msg_command_long_get_param2(const mavlink_message_t* msg)
{
80011bc8:	eb cd 40 c0 	pushm	r6-r7,lr
80011bcc:	1a 97       	mov	r7,sp
80011bce:	20 1d       	sub	sp,4
80011bd0:	48 76       	lddpc	r6,80011bec <mavlink_msg_command_long_get_param2+0x24>
80011bd2:	1e 26       	rsub	r6,pc
80011bd4:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_float(msg,  4);
80011bd8:	30 4b       	mov	r11,4
80011bda:	ee fc ff fc 	ld.w	r12,r7[-4]
80011bde:	fe b0 f9 1d 	rcall	80010e18 <_MAV_RETURN_float>
80011be2:	18 98       	mov	r8,r12
}
80011be4:	10 9c       	mov	r12,r8
80011be6:	2f fd       	sub	sp,-4
80011be8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80011bec:	80 01       	ld.sh	r1,r0[0x0]
80011bee:	1a 56       	eor	r6,sp

80011bf0 <mavlink_msg_command_long_get_param3>:
 * @brief Get field param3 from command_long message
 *
 * @return Parameter 3, as defined by MAV_CMD enum.
 */
static inline float mavlink_msg_command_long_get_param3(const mavlink_message_t* msg)
{
80011bf0:	eb cd 40 c0 	pushm	r6-r7,lr
80011bf4:	1a 97       	mov	r7,sp
80011bf6:	20 1d       	sub	sp,4
80011bf8:	48 76       	lddpc	r6,80011c14 <mavlink_msg_command_long_get_param3+0x24>
80011bfa:	1e 26       	rsub	r6,pc
80011bfc:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_float(msg,  8);
80011c00:	30 8b       	mov	r11,8
80011c02:	ee fc ff fc 	ld.w	r12,r7[-4]
80011c06:	fe b0 f9 09 	rcall	80010e18 <_MAV_RETURN_float>
80011c0a:	18 98       	mov	r8,r12
}
80011c0c:	10 9c       	mov	r12,r8
80011c0e:	2f fd       	sub	sp,-4
80011c10:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80011c14:	80 01       	ld.sh	r1,r0[0x0]
80011c16:	1a 7e       	tst	lr,sp

80011c18 <mavlink_msg_command_long_get_param4>:
 * @brief Get field param4 from command_long message
 *
 * @return Parameter 4, as defined by MAV_CMD enum.
 */
static inline float mavlink_msg_command_long_get_param4(const mavlink_message_t* msg)
{
80011c18:	eb cd 40 c0 	pushm	r6-r7,lr
80011c1c:	1a 97       	mov	r7,sp
80011c1e:	20 1d       	sub	sp,4
80011c20:	48 76       	lddpc	r6,80011c3c <mavlink_msg_command_long_get_param4+0x24>
80011c22:	1e 26       	rsub	r6,pc
80011c24:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_float(msg,  12);
80011c28:	30 cb       	mov	r11,12
80011c2a:	ee fc ff fc 	ld.w	r12,r7[-4]
80011c2e:	fe b0 f8 f5 	rcall	80010e18 <_MAV_RETURN_float>
80011c32:	18 98       	mov	r8,r12
}
80011c34:	10 9c       	mov	r12,r8
80011c36:	2f fd       	sub	sp,-4
80011c38:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80011c3c:	80 01       	ld.sh	r1,r0[0x0]
80011c3e:	1a a6       	st.w	sp++,r6

80011c40 <mavlink_msg_command_long_get_param5>:
 * @brief Get field param5 from command_long message
 *
 * @return Parameter 5, as defined by MAV_CMD enum.
 */
static inline float mavlink_msg_command_long_get_param5(const mavlink_message_t* msg)
{
80011c40:	eb cd 40 c0 	pushm	r6-r7,lr
80011c44:	1a 97       	mov	r7,sp
80011c46:	20 1d       	sub	sp,4
80011c48:	48 76       	lddpc	r6,80011c64 <mavlink_msg_command_long_get_param5+0x24>
80011c4a:	1e 26       	rsub	r6,pc
80011c4c:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_float(msg,  16);
80011c50:	31 0b       	mov	r11,16
80011c52:	ee fc ff fc 	ld.w	r12,r7[-4]
80011c56:	fe b0 f8 e1 	rcall	80010e18 <_MAV_RETURN_float>
80011c5a:	18 98       	mov	r8,r12
}
80011c5c:	10 9c       	mov	r12,r8
80011c5e:	2f fd       	sub	sp,-4
80011c60:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80011c64:	80 01       	ld.sh	r1,r0[0x0]
80011c66:	1a ce       	st.b	sp++,lr

80011c68 <mavlink_msg_command_long_get_param6>:
 * @brief Get field param6 from command_long message
 *
 * @return Parameter 6, as defined by MAV_CMD enum.
 */
static inline float mavlink_msg_command_long_get_param6(const mavlink_message_t* msg)
{
80011c68:	eb cd 40 c0 	pushm	r6-r7,lr
80011c6c:	1a 97       	mov	r7,sp
80011c6e:	20 1d       	sub	sp,4
80011c70:	48 76       	lddpc	r6,80011c8c <mavlink_msg_command_long_get_param6+0x24>
80011c72:	1e 26       	rsub	r6,pc
80011c74:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_float(msg,  20);
80011c78:	31 4b       	mov	r11,20
80011c7a:	ee fc ff fc 	ld.w	r12,r7[-4]
80011c7e:	fe b0 f8 cd 	rcall	80010e18 <_MAV_RETURN_float>
80011c82:	18 98       	mov	r8,r12
}
80011c84:	10 9c       	mov	r12,r8
80011c86:	2f fd       	sub	sp,-4
80011c88:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80011c8c:	80 01       	ld.sh	r1,r0[0x0]
80011c8e:	1a f6       	st.b	--sp,r6

80011c90 <mavlink_msg_command_long_get_param7>:
 * @brief Get field param7 from command_long message
 *
 * @return Parameter 7, as defined by MAV_CMD enum.
 */
static inline float mavlink_msg_command_long_get_param7(const mavlink_message_t* msg)
{
80011c90:	eb cd 40 c0 	pushm	r6-r7,lr
80011c94:	1a 97       	mov	r7,sp
80011c96:	20 1d       	sub	sp,4
80011c98:	48 76       	lddpc	r6,80011cb4 <mavlink_msg_command_long_get_param7+0x24>
80011c9a:	1e 26       	rsub	r6,pc
80011c9c:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_float(msg,  24);
80011ca0:	31 8b       	mov	r11,24
80011ca2:	ee fc ff fc 	ld.w	r12,r7[-4]
80011ca6:	fe b0 f8 b9 	rcall	80010e18 <_MAV_RETURN_float>
80011caa:	18 98       	mov	r8,r12
}
80011cac:	10 9c       	mov	r12,r8
80011cae:	2f fd       	sub	sp,-4
80011cb0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80011cb4:	80 01       	ld.sh	r1,r0[0x0]
80011cb6:	1b 1e       	ld.sh	lr,sp++

80011cb8 <mavlink_msg_command_long_decode>:
 *
 * @param msg The message to decode
 * @param command_long C-struct to decode the message contents into
 */
static inline void mavlink_msg_command_long_decode(const mavlink_message_t* msg, mavlink_command_long_t* command_long)
{
80011cb8:	eb cd 40 c0 	pushm	r6-r7,lr
80011cbc:	1a 97       	mov	r7,sp
80011cbe:	20 2d       	sub	sp,8
80011cc0:	4a e6       	lddpc	r6,80011d78 <mavlink_msg_command_long_decode+0xc0>
80011cc2:	1e 26       	rsub	r6,pc
80011cc4:	ef 4c ff fc 	st.w	r7[-4],r12
80011cc8:	ef 4b ff f8 	st.w	r7[-8],r11
#if MAVLINK_NEED_BYTE_SWAP
	command_long->param1 = mavlink_msg_command_long_get_param1(msg);
80011ccc:	ee fc ff fc 	ld.w	r12,r7[-4]
80011cd0:	c6 7f       	rcall	80011b9e <mavlink_msg_command_long_get_param1>
80011cd2:	18 99       	mov	r9,r12
80011cd4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80011cd8:	91 09       	st.w	r8[0x0],r9
	command_long->param2 = mavlink_msg_command_long_get_param2(msg);
80011cda:	ee fc ff fc 	ld.w	r12,r7[-4]
80011cde:	c7 5f       	rcall	80011bc8 <mavlink_msg_command_long_get_param2>
80011ce0:	18 99       	mov	r9,r12
80011ce2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80011ce6:	91 19       	st.w	r8[0x4],r9
	command_long->param3 = mavlink_msg_command_long_get_param3(msg);
80011ce8:	ee fc ff fc 	ld.w	r12,r7[-4]
80011cec:	c8 2f       	rcall	80011bf0 <mavlink_msg_command_long_get_param3>
80011cee:	18 99       	mov	r9,r12
80011cf0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80011cf4:	91 29       	st.w	r8[0x8],r9
	command_long->param4 = mavlink_msg_command_long_get_param4(msg);
80011cf6:	ee fc ff fc 	ld.w	r12,r7[-4]
80011cfa:	c8 ff       	rcall	80011c18 <mavlink_msg_command_long_get_param4>
80011cfc:	18 99       	mov	r9,r12
80011cfe:	ee f8 ff f8 	ld.w	r8,r7[-8]
80011d02:	91 39       	st.w	r8[0xc],r9
	command_long->param5 = mavlink_msg_command_long_get_param5(msg);
80011d04:	ee fc ff fc 	ld.w	r12,r7[-4]
80011d08:	c9 cf       	rcall	80011c40 <mavlink_msg_command_long_get_param5>
80011d0a:	18 99       	mov	r9,r12
80011d0c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80011d10:	91 49       	st.w	r8[0x10],r9
	command_long->param6 = mavlink_msg_command_long_get_param6(msg);
80011d12:	ee fc ff fc 	ld.w	r12,r7[-4]
80011d16:	ca 9f       	rcall	80011c68 <mavlink_msg_command_long_get_param6>
80011d18:	18 99       	mov	r9,r12
80011d1a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80011d1e:	91 59       	st.w	r8[0x14],r9
	command_long->param7 = mavlink_msg_command_long_get_param7(msg);
80011d20:	ee fc ff fc 	ld.w	r12,r7[-4]
80011d24:	cb 6f       	rcall	80011c90 <mavlink_msg_command_long_get_param7>
80011d26:	18 99       	mov	r9,r12
80011d28:	ee f8 ff f8 	ld.w	r8,r7[-8]
80011d2c:	91 69       	st.w	r8[0x18],r9
	command_long->command = mavlink_msg_command_long_get_command(msg);
80011d2e:	ee fc ff fc 	ld.w	r12,r7[-4]
80011d32:	c1 1f       	rcall	80011b54 <mavlink_msg_command_long_get_command>
80011d34:	18 98       	mov	r8,r12
80011d36:	5c 88       	casts.h	r8
80011d38:	ee f9 ff f8 	ld.w	r9,r7[-8]
80011d3c:	f3 58 00 1c 	st.h	r9[28],r8
	command_long->target_system = mavlink_msg_command_long_get_target_system(msg);
80011d40:	ee fc ff fc 	ld.w	r12,r7[-4]
80011d44:	ce ae       	rcall	80011b18 <mavlink_msg_command_long_get_target_system>
80011d46:	18 98       	mov	r8,r12
80011d48:	ee f9 ff f8 	ld.w	r9,r7[-8]
80011d4c:	f3 68 00 1e 	st.b	r9[30],r8
	command_long->target_component = mavlink_msg_command_long_get_target_component(msg);
80011d50:	ee fc ff fc 	ld.w	r12,r7[-4]
80011d54:	cf 1e       	rcall	80011b36 <mavlink_msg_command_long_get_target_component>
80011d56:	18 98       	mov	r8,r12
80011d58:	ee f9 ff f8 	ld.w	r9,r7[-8]
80011d5c:	f3 68 00 1f 	st.b	r9[31],r8
	command_long->confirmation = mavlink_msg_command_long_get_confirmation(msg);
80011d60:	ee fc ff fc 	ld.w	r12,r7[-4]
80011d64:	c0 ef       	rcall	80011b80 <mavlink_msg_command_long_get_confirmation>
80011d66:	18 98       	mov	r8,r12
80011d68:	ee f9 ff f8 	ld.w	r9,r7[-8]
80011d6c:	f3 68 00 20 	st.b	r9[32],r8
#else
	memcpy(command_long, _MAV_PAYLOAD(msg), MAVLINK_MSG_ID_COMMAND_LONG_LEN);
#endif
}
80011d70:	2f ed       	sub	sp,-8
80011d72:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80011d76:	00 00       	add	r0,r0
80011d78:	80 01       	ld.sh	r1,r0[0x0]
80011d7a:	1b 46       	ld.w	r6,--sp

80011d7c <mavlink_msg_roll_pitch_yaw_rates_thrust_setpoint_send>:
 * @param thrust Collective thrust, normalized to 0 .. 1
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_roll_pitch_yaw_rates_thrust_setpoint_send(mavlink_channel_t chan, uint32_t time_boot_ms, float roll_rate, float pitch_rate, float yaw_rate, float thrust)
{
80011d7c:	eb cd 40 e0 	pushm	r5-r7,lr
80011d80:	1a 97       	mov	r7,sp
80011d82:	20 ad       	sub	sp,40
80011d84:	4a 36       	lddpc	r6,80011e10 <mavlink_msg_roll_pitch_yaw_rates_thrust_setpoint_send+0x94>
80011d86:	1e 26       	rsub	r6,pc
80011d88:	ee c5 ff f0 	sub	r5,r7,-16
80011d8c:	ef 4c ff e8 	st.w	r7[-24],r12
80011d90:	ef 4b ff e4 	st.w	r7[-28],r11
80011d94:	ef 4a ff e0 	st.w	r7[-32],r10
80011d98:	ef 49 ff dc 	st.w	r7[-36],r9
80011d9c:	ef 48 ff d8 	st.w	r7[-40],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_ROLL_PITCH_YAW_RATES_THRUST_SETPOINT_LEN];
	_mav_put_uint32_t(buf, 0, time_boot_ms);
80011da0:	ee c9 00 1c 	sub	r9,r7,28
80011da4:	ee c8 00 14 	sub	r8,r7,20
80011da8:	12 9b       	mov	r11,r9
80011daa:	10 9c       	mov	r12,r8
80011dac:	fe b0 f7 52 	rcall	80010c50 <byte_swap_4>
	_mav_put_float(buf, 4, roll_rate);
80011db0:	ee c9 00 20 	sub	r9,r7,32
80011db4:	ee c8 00 14 	sub	r8,r7,20
80011db8:	2f c8       	sub	r8,-4
80011dba:	12 9b       	mov	r11,r9
80011dbc:	10 9c       	mov	r12,r8
80011dbe:	fe b0 f7 49 	rcall	80010c50 <byte_swap_4>
	_mav_put_float(buf, 8, pitch_rate);
80011dc2:	ee c9 00 24 	sub	r9,r7,36
80011dc6:	ee c8 00 14 	sub	r8,r7,20
80011dca:	2f 88       	sub	r8,-8
80011dcc:	12 9b       	mov	r11,r9
80011dce:	10 9c       	mov	r12,r8
80011dd0:	fe b0 f7 40 	rcall	80010c50 <byte_swap_4>
	_mav_put_float(buf, 12, yaw_rate);
80011dd4:	ee c9 00 28 	sub	r9,r7,40
80011dd8:	ee c8 00 14 	sub	r8,r7,20
80011ddc:	2f 48       	sub	r8,-12
80011dde:	12 9b       	mov	r11,r9
80011de0:	10 9c       	mov	r12,r8
80011de2:	fe b0 f7 37 	rcall	80010c50 <byte_swap_4>
	_mav_put_float(buf, 16, thrust);
80011de6:	0a 99       	mov	r9,r5
80011de8:	ee c8 00 14 	sub	r8,r7,20
80011dec:	2f 08       	sub	r8,-16
80011dee:	12 9b       	mov	r11,r9
80011df0:	10 9c       	mov	r12,r8
80011df2:	fe b0 f7 2f 	rcall	80010c50 <byte_swap_4>

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_ROLL_PITCH_YAW_RATES_THRUST_SETPOINT, buf, MAVLINK_MSG_ID_ROLL_PITCH_YAW_RATES_THRUST_SETPOINT_LEN, MAVLINK_MSG_ID_ROLL_PITCH_YAW_RATES_THRUST_SETPOINT_CRC);
80011df6:	ee ca 00 14 	sub	r10,r7,20
80011dfa:	37 f8       	mov	r8,127
80011dfc:	31 49       	mov	r9,20
80011dfe:	35 0b       	mov	r11,80
80011e00:	ee fc ff e8 	ld.w	r12,r7[-24]
80011e04:	fe b0 f6 5e 	rcall	80010ac0 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_ROLL_PITCH_YAW_RATES_THRUST_SETPOINT, (const char *)&packet, MAVLINK_MSG_ID_ROLL_PITCH_YAW_RATES_THRUST_SETPOINT_LEN, MAVLINK_MSG_ID_ROLL_PITCH_YAW_RATES_THRUST_SETPOINT_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_ROLL_PITCH_YAW_RATES_THRUST_SETPOINT, (const char *)&packet, MAVLINK_MSG_ID_ROLL_PITCH_YAW_RATES_THRUST_SETPOINT_LEN);
#endif
#endif
}
80011e08:	2f 6d       	sub	sp,-40
80011e0a:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80011e0e:	00 00       	add	r0,r0
80011e10:	80 01       	ld.sh	r1,r0[0x0]
80011e12:	1c 0a       	add	r10,lr

80011e14 <mavlink_msg_hil_state_send>:
 * @param zacc Z acceleration (mg)
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_hil_state_send(mavlink_channel_t chan, uint64_t time_usec, float roll, float pitch, float yaw, float rollspeed, float pitchspeed, float yawspeed, int32_t lat, int32_t lon, int32_t alt, int16_t vx, int16_t vy, int16_t vz, int16_t xacc, int16_t yacc, int16_t zacc)
{
80011e14:	eb cd 40 e0 	pushm	r5-r7,lr
80011e18:	1a 97       	mov	r7,sp
80011e1a:	21 9d       	sub	sp,100
80011e1c:	4d d6       	lddpc	r6,80011f90 <mavlink_msg_hil_state_send+0x17c>
80011e1e:	1e 26       	rsub	r6,pc
80011e20:	ee c5 ff f0 	sub	r5,r7,-16
80011e24:	ef 4c ff c4 	st.w	r7[-60],r12
80011e28:	ee eb ff bc 	st.d	r7[-68],r10
80011e2c:	ef 49 ff b8 	st.w	r7[-72],r9
80011e30:	ef 48 ff b4 	st.w	r7[-76],r8
80011e34:	6a 7e       	ld.w	lr,r5[0x1c]
80011e36:	6a 8c       	ld.w	r12,r5[0x20]
80011e38:	6a 9b       	ld.w	r11,r5[0x24]
80011e3a:	6a aa       	ld.w	r10,r5[0x28]
80011e3c:	6a b9       	ld.w	r9,r5[0x2c]
80011e3e:	6a c8       	ld.w	r8,r5[0x30]
80011e40:	ef 5e ff b0 	st.h	r7[-80],lr
80011e44:	ef 5c ff ac 	st.h	r7[-84],r12
80011e48:	ef 5b ff a8 	st.h	r7[-88],r11
80011e4c:	ef 5a ff a4 	st.h	r7[-92],r10
80011e50:	ef 59 ff a0 	st.h	r7[-96],r9
80011e54:	ef 58 ff 9c 	st.h	r7[-100],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_HIL_STATE_LEN];
	_mav_put_uint64_t(buf, 0, time_usec);
80011e58:	ee c9 00 44 	sub	r9,r7,68
80011e5c:	ee c8 00 38 	sub	r8,r7,56
80011e60:	12 9b       	mov	r11,r9
80011e62:	10 9c       	mov	r12,r8
80011e64:	fe b0 f7 22 	rcall	80010ca8 <byte_swap_8>
	_mav_put_float(buf, 8, roll);
80011e68:	ee c9 00 48 	sub	r9,r7,72
80011e6c:	ee c8 00 38 	sub	r8,r7,56
80011e70:	2f 88       	sub	r8,-8
80011e72:	12 9b       	mov	r11,r9
80011e74:	10 9c       	mov	r12,r8
80011e76:	fe b0 f6 ed 	rcall	80010c50 <byte_swap_4>
	_mav_put_float(buf, 12, pitch);
80011e7a:	ee c9 00 4c 	sub	r9,r7,76
80011e7e:	ee c8 00 38 	sub	r8,r7,56
80011e82:	2f 48       	sub	r8,-12
80011e84:	12 9b       	mov	r11,r9
80011e86:	10 9c       	mov	r12,r8
80011e88:	fe b0 f6 e4 	rcall	80010c50 <byte_swap_4>
	_mav_put_float(buf, 16, yaw);
80011e8c:	0a 99       	mov	r9,r5
80011e8e:	ee c8 00 38 	sub	r8,r7,56
80011e92:	2f 08       	sub	r8,-16
80011e94:	12 9b       	mov	r11,r9
80011e96:	10 9c       	mov	r12,r8
80011e98:	fe b0 f6 dc 	rcall	80010c50 <byte_swap_4>
	_mav_put_float(buf, 20, rollspeed);
80011e9c:	ea c9 ff fc 	sub	r9,r5,-4
80011ea0:	ee c8 00 38 	sub	r8,r7,56
80011ea4:	2e c8       	sub	r8,-20
80011ea6:	12 9b       	mov	r11,r9
80011ea8:	10 9c       	mov	r12,r8
80011eaa:	fe b0 f6 d3 	rcall	80010c50 <byte_swap_4>
	_mav_put_float(buf, 24, pitchspeed);
80011eae:	ea c9 ff f8 	sub	r9,r5,-8
80011eb2:	ee c8 00 38 	sub	r8,r7,56
80011eb6:	2e 88       	sub	r8,-24
80011eb8:	12 9b       	mov	r11,r9
80011eba:	10 9c       	mov	r12,r8
80011ebc:	fe b0 f6 ca 	rcall	80010c50 <byte_swap_4>
	_mav_put_float(buf, 28, yawspeed);
80011ec0:	ea c9 ff f4 	sub	r9,r5,-12
80011ec4:	ee c8 00 38 	sub	r8,r7,56
80011ec8:	2e 48       	sub	r8,-28
80011eca:	12 9b       	mov	r11,r9
80011ecc:	10 9c       	mov	r12,r8
80011ece:	fe b0 f6 c1 	rcall	80010c50 <byte_swap_4>
	_mav_put_int32_t(buf, 32, lat);
80011ed2:	ea c9 ff f0 	sub	r9,r5,-16
80011ed6:	ee c8 00 38 	sub	r8,r7,56
80011eda:	2e 08       	sub	r8,-32
80011edc:	12 9b       	mov	r11,r9
80011ede:	10 9c       	mov	r12,r8
80011ee0:	fe b0 f6 b8 	rcall	80010c50 <byte_swap_4>
	_mav_put_int32_t(buf, 36, lon);
80011ee4:	ea c9 ff ec 	sub	r9,r5,-20
80011ee8:	ee c8 00 38 	sub	r8,r7,56
80011eec:	2d c8       	sub	r8,-36
80011eee:	12 9b       	mov	r11,r9
80011ef0:	10 9c       	mov	r12,r8
80011ef2:	fe b0 f6 af 	rcall	80010c50 <byte_swap_4>
	_mav_put_int32_t(buf, 40, alt);
80011ef6:	ea c9 ff e8 	sub	r9,r5,-24
80011efa:	ee c8 00 38 	sub	r8,r7,56
80011efe:	2d 88       	sub	r8,-40
80011f00:	12 9b       	mov	r11,r9
80011f02:	10 9c       	mov	r12,r8
80011f04:	fe b0 f6 a6 	rcall	80010c50 <byte_swap_4>
	_mav_put_int16_t(buf, 44, vx);
80011f08:	ee c9 00 50 	sub	r9,r7,80
80011f0c:	ee c8 00 38 	sub	r8,r7,56
80011f10:	2d 48       	sub	r8,-44
80011f12:	12 9b       	mov	r11,r9
80011f14:	10 9c       	mov	r12,r8
80011f16:	fe b0 f6 83 	rcall	80010c1c <byte_swap_2>
	_mav_put_int16_t(buf, 46, vy);
80011f1a:	ee c9 00 54 	sub	r9,r7,84
80011f1e:	ee c8 00 38 	sub	r8,r7,56
80011f22:	2d 28       	sub	r8,-46
80011f24:	12 9b       	mov	r11,r9
80011f26:	10 9c       	mov	r12,r8
80011f28:	fe b0 f6 7a 	rcall	80010c1c <byte_swap_2>
	_mav_put_int16_t(buf, 48, vz);
80011f2c:	ee c9 00 58 	sub	r9,r7,88
80011f30:	ee c8 00 38 	sub	r8,r7,56
80011f34:	2d 08       	sub	r8,-48
80011f36:	12 9b       	mov	r11,r9
80011f38:	10 9c       	mov	r12,r8
80011f3a:	fe b0 f6 71 	rcall	80010c1c <byte_swap_2>
	_mav_put_int16_t(buf, 50, xacc);
80011f3e:	ee c9 00 5c 	sub	r9,r7,92
80011f42:	ee c8 00 38 	sub	r8,r7,56
80011f46:	2c e8       	sub	r8,-50
80011f48:	12 9b       	mov	r11,r9
80011f4a:	10 9c       	mov	r12,r8
80011f4c:	fe b0 f6 68 	rcall	80010c1c <byte_swap_2>
	_mav_put_int16_t(buf, 52, yacc);
80011f50:	ee c9 00 60 	sub	r9,r7,96
80011f54:	ee c8 00 38 	sub	r8,r7,56
80011f58:	2c c8       	sub	r8,-52
80011f5a:	12 9b       	mov	r11,r9
80011f5c:	10 9c       	mov	r12,r8
80011f5e:	fe b0 f6 5f 	rcall	80010c1c <byte_swap_2>
	_mav_put_int16_t(buf, 54, zacc);
80011f62:	ee c9 00 64 	sub	r9,r7,100
80011f66:	ee c8 00 38 	sub	r8,r7,56
80011f6a:	2c a8       	sub	r8,-54
80011f6c:	12 9b       	mov	r11,r9
80011f6e:	10 9c       	mov	r12,r8
80011f70:	fe b0 f6 56 	rcall	80010c1c <byte_swap_2>

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_HIL_STATE, buf, MAVLINK_MSG_ID_HIL_STATE_LEN, MAVLINK_MSG_ID_HIL_STATE_CRC);
80011f74:	ee ca 00 38 	sub	r10,r7,56
80011f78:	e0 68 00 b7 	mov	r8,183
80011f7c:	33 89       	mov	r9,56
80011f7e:	35 ab       	mov	r11,90
80011f80:	ee fc ff c4 	ld.w	r12,r7[-60]
80011f84:	fe b0 f5 9e 	rcall	80010ac0 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_HIL_STATE, (const char *)&packet, MAVLINK_MSG_ID_HIL_STATE_LEN, MAVLINK_MSG_ID_HIL_STATE_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_HIL_STATE, (const char *)&packet, MAVLINK_MSG_ID_HIL_STATE_LEN);
#endif
#endif
}
80011f88:	2e 7d       	sub	sp,-100
80011f8a:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80011f8e:	00 00       	add	r0,r0
80011f90:	80 01       	ld.sh	r1,r0[0x0]
80011f92:	1c a2       	st.w	lr++,r2

80011f94 <mavlink_msg_battery_status_send>:
 * @param battery_remaining Remaining battery energy: (0%: 0, 100%: 100), -1: autopilot does not estimate the remaining battery
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_battery_status_send(mavlink_channel_t chan, uint8_t accu_id, uint16_t voltage_cell_1, uint16_t voltage_cell_2, uint16_t voltage_cell_3, uint16_t voltage_cell_4, uint16_t voltage_cell_5, uint16_t voltage_cell_6, int16_t current_battery, int8_t battery_remaining)
{
80011f94:	eb cd 40 ee 	pushm	r1-r3,r5-r7,lr
80011f98:	1a 97       	mov	r7,sp
80011f9a:	20 ed       	sub	sp,56
80011f9c:	4b c6       	lddpc	r6,8001208c <mavlink_msg_battery_status_send+0xf8>
80011f9e:	1e 26       	rsub	r6,pc
80011fa0:	ee ce ff e4 	sub	lr,r7,-28
80011fa4:	ef 4c ff ec 	st.w	r7[-20],r12
80011fa8:	16 91       	mov	r1,r11
80011faa:	14 92       	mov	r2,r10
80011fac:	12 93       	mov	r3,r9
80011fae:	10 95       	mov	r5,r8
80011fb0:	7c 0c       	ld.w	r12,lr[0x0]
80011fb2:	7c 1b       	ld.w	r11,lr[0x4]
80011fb4:	7c 2a       	ld.w	r10,lr[0x8]
80011fb6:	7c 39       	ld.w	r9,lr[0xc]
80011fb8:	7c 48       	ld.w	r8,lr[0x10]
80011fba:	02 9e       	mov	lr,r1
80011fbc:	ef 6e ff e8 	st.b	r7[-24],lr
80011fc0:	04 9e       	mov	lr,r2
80011fc2:	ef 5e ff e4 	st.h	r7[-28],lr
80011fc6:	06 9e       	mov	lr,r3
80011fc8:	ef 5e ff e0 	st.h	r7[-32],lr
80011fcc:	0a 9e       	mov	lr,r5
80011fce:	ef 5e ff dc 	st.h	r7[-36],lr
80011fd2:	ef 5c ff d8 	st.h	r7[-40],r12
80011fd6:	ef 5b ff d4 	st.h	r7[-44],r11
80011fda:	ef 5a ff d0 	st.h	r7[-48],r10
80011fde:	ef 59 ff cc 	st.h	r7[-52],r9
80011fe2:	ef 68 ff c8 	st.b	r7[-56],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_BATTERY_STATUS_LEN];
	_mav_put_uint16_t(buf, 0, voltage_cell_1);
80011fe6:	ee c9 00 1c 	sub	r9,r7,28
80011fea:	ee c8 00 10 	sub	r8,r7,16
80011fee:	12 9b       	mov	r11,r9
80011ff0:	10 9c       	mov	r12,r8
80011ff2:	fe b0 f6 15 	rcall	80010c1c <byte_swap_2>
	_mav_put_uint16_t(buf, 2, voltage_cell_2);
80011ff6:	ee c9 00 20 	sub	r9,r7,32
80011ffa:	ee c8 00 10 	sub	r8,r7,16
80011ffe:	2f e8       	sub	r8,-2
80012000:	12 9b       	mov	r11,r9
80012002:	10 9c       	mov	r12,r8
80012004:	fe b0 f6 0c 	rcall	80010c1c <byte_swap_2>
	_mav_put_uint16_t(buf, 4, voltage_cell_3);
80012008:	ee c9 00 24 	sub	r9,r7,36
8001200c:	ee c8 00 10 	sub	r8,r7,16
80012010:	2f c8       	sub	r8,-4
80012012:	12 9b       	mov	r11,r9
80012014:	10 9c       	mov	r12,r8
80012016:	fe b0 f6 03 	rcall	80010c1c <byte_swap_2>
	_mav_put_uint16_t(buf, 6, voltage_cell_4);
8001201a:	ee c9 00 28 	sub	r9,r7,40
8001201e:	ee c8 00 10 	sub	r8,r7,16
80012022:	2f a8       	sub	r8,-6
80012024:	12 9b       	mov	r11,r9
80012026:	10 9c       	mov	r12,r8
80012028:	fe b0 f5 fa 	rcall	80010c1c <byte_swap_2>
	_mav_put_uint16_t(buf, 8, voltage_cell_5);
8001202c:	ee c9 00 2c 	sub	r9,r7,44
80012030:	ee c8 00 10 	sub	r8,r7,16
80012034:	2f 88       	sub	r8,-8
80012036:	12 9b       	mov	r11,r9
80012038:	10 9c       	mov	r12,r8
8001203a:	fe b0 f5 f1 	rcall	80010c1c <byte_swap_2>
	_mav_put_uint16_t(buf, 10, voltage_cell_6);
8001203e:	ee c9 00 30 	sub	r9,r7,48
80012042:	ee c8 00 10 	sub	r8,r7,16
80012046:	2f 68       	sub	r8,-10
80012048:	12 9b       	mov	r11,r9
8001204a:	10 9c       	mov	r12,r8
8001204c:	fe b0 f5 e8 	rcall	80010c1c <byte_swap_2>
	_mav_put_int16_t(buf, 12, current_battery);
80012050:	ee c9 00 34 	sub	r9,r7,52
80012054:	ee c8 00 10 	sub	r8,r7,16
80012058:	2f 48       	sub	r8,-12
8001205a:	12 9b       	mov	r11,r9
8001205c:	10 9c       	mov	r12,r8
8001205e:	fe b0 f5 df 	rcall	80010c1c <byte_swap_2>
	_mav_put_uint8_t(buf, 14, accu_id);
80012062:	ef 38 ff e8 	ld.ub	r8,r7[-24]
80012066:	ef 68 ff fe 	st.b	r7[-2],r8
	_mav_put_int8_t(buf, 15, battery_remaining);
8001206a:	ef 38 ff c8 	ld.ub	r8,r7[-56]
8001206e:	ef 68 ff ff 	st.b	r7[-1],r8

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_BATTERY_STATUS, buf, MAVLINK_MSG_ID_BATTERY_STATUS_LEN, MAVLINK_MSG_ID_BATTERY_STATUS_CRC);
80012072:	ee ca 00 10 	sub	r10,r7,16
80012076:	32 a8       	mov	r8,42
80012078:	31 09       	mov	r9,16
8001207a:	e0 6b 00 93 	mov	r11,147
8001207e:	ee fc ff ec 	ld.w	r12,r7[-20]
80012082:	fe b0 f5 1f 	rcall	80010ac0 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_BATTERY_STATUS, (const char *)&packet, MAVLINK_MSG_ID_BATTERY_STATUS_LEN, MAVLINK_MSG_ID_BATTERY_STATUS_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_BATTERY_STATUS, (const char *)&packet, MAVLINK_MSG_ID_BATTERY_STATUS_LEN);
#endif
#endif
}
80012086:	2f 2d       	sub	sp,-56
80012088:	e3 cd 80 ee 	ldm	sp++,r1-r3,r5-r7,pc
8001208c:	80 01       	ld.sh	r1,r0[0x0]
8001208e:	1e 22       	rsub	r2,pc

80012090 <mavlink_msg_named_value_float_send>:
 * @param value Floating point value
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_named_value_float_send(mavlink_channel_t chan, uint32_t time_boot_ms, const char *name, float value)
{
80012090:	eb cd 40 c0 	pushm	r6-r7,lr
80012094:	1a 97       	mov	r7,sp
80012096:	20 9d       	sub	sp,36
80012098:	49 96       	lddpc	r6,800120fc <mavlink_msg_named_value_float_send+0x6c>
8001209a:	1e 26       	rsub	r6,pc
8001209c:	ef 4c ff e8 	st.w	r7[-24],r12
800120a0:	ef 4b ff e4 	st.w	r7[-28],r11
800120a4:	ef 4a ff e0 	st.w	r7[-32],r10
800120a8:	ef 49 ff dc 	st.w	r7[-36],r9
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_NAMED_VALUE_FLOAT_LEN];
	_mav_put_uint32_t(buf, 0, time_boot_ms);
800120ac:	ee c9 00 1c 	sub	r9,r7,28
800120b0:	ee c8 00 14 	sub	r8,r7,20
800120b4:	12 9b       	mov	r11,r9
800120b6:	10 9c       	mov	r12,r8
800120b8:	fe b0 f5 cc 	rcall	80010c50 <byte_swap_4>
	_mav_put_float(buf, 4, value);
800120bc:	ee c9 00 24 	sub	r9,r7,36
800120c0:	ee c8 00 14 	sub	r8,r7,20
800120c4:	2f c8       	sub	r8,-4
800120c6:	12 9b       	mov	r11,r9
800120c8:	10 9c       	mov	r12,r8
800120ca:	fe b0 f5 c3 	rcall	80010c50 <byte_swap_4>
	_mav_put_char_array(buf, 8, name, 10);
800120ce:	ee c8 00 14 	sub	r8,r7,20
800120d2:	30 a9       	mov	r9,10
800120d4:	ee fa ff e0 	ld.w	r10,r7[-32]
800120d8:	30 8b       	mov	r11,8
800120da:	10 9c       	mov	r12,r8
800120dc:	fe b0 f6 5c 	rcall	80010d94 <_mav_put_char_array>
#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_NAMED_VALUE_FLOAT, buf, MAVLINK_MSG_ID_NAMED_VALUE_FLOAT_LEN, MAVLINK_MSG_ID_NAMED_VALUE_FLOAT_CRC);
800120e0:	ee ca 00 14 	sub	r10,r7,20
800120e4:	e0 68 00 aa 	mov	r8,170
800120e8:	31 29       	mov	r9,18
800120ea:	e0 6b 00 fb 	mov	r11,251
800120ee:	ee fc ff e8 	ld.w	r12,r7[-24]
800120f2:	fe b0 f4 e7 	rcall	80010ac0 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_NAMED_VALUE_FLOAT, (const char *)&packet, MAVLINK_MSG_ID_NAMED_VALUE_FLOAT_LEN, MAVLINK_MSG_ID_NAMED_VALUE_FLOAT_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_NAMED_VALUE_FLOAT, (const char *)&packet, MAVLINK_MSG_ID_NAMED_VALUE_FLOAT_LEN);
#endif
#endif
}
800120f6:	2f 7d       	sub	sp,-36
800120f8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800120fc:	80 01       	ld.sh	r1,r0[0x0]
800120fe:	1f 1e       	ld.sh	lr,pc++

80012100 <mavlink_msg_named_value_int_send>:
 * @param value Signed integer value
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_named_value_int_send(mavlink_channel_t chan, uint32_t time_boot_ms, const char *name, int32_t value)
{
80012100:	eb cd 40 c0 	pushm	r6-r7,lr
80012104:	1a 97       	mov	r7,sp
80012106:	20 9d       	sub	sp,36
80012108:	49 96       	lddpc	r6,8001216c <mavlink_msg_named_value_int_send+0x6c>
8001210a:	1e 26       	rsub	r6,pc
8001210c:	ef 4c ff e8 	st.w	r7[-24],r12
80012110:	ef 4b ff e4 	st.w	r7[-28],r11
80012114:	ef 4a ff e0 	st.w	r7[-32],r10
80012118:	ef 49 ff dc 	st.w	r7[-36],r9
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_NAMED_VALUE_INT_LEN];
	_mav_put_uint32_t(buf, 0, time_boot_ms);
8001211c:	ee c9 00 1c 	sub	r9,r7,28
80012120:	ee c8 00 14 	sub	r8,r7,20
80012124:	12 9b       	mov	r11,r9
80012126:	10 9c       	mov	r12,r8
80012128:	fe b0 f5 94 	rcall	80010c50 <byte_swap_4>
	_mav_put_int32_t(buf, 4, value);
8001212c:	ee c9 00 24 	sub	r9,r7,36
80012130:	ee c8 00 14 	sub	r8,r7,20
80012134:	2f c8       	sub	r8,-4
80012136:	12 9b       	mov	r11,r9
80012138:	10 9c       	mov	r12,r8
8001213a:	fe b0 f5 8b 	rcall	80010c50 <byte_swap_4>
	_mav_put_char_array(buf, 8, name, 10);
8001213e:	ee c8 00 14 	sub	r8,r7,20
80012142:	30 a9       	mov	r9,10
80012144:	ee fa ff e0 	ld.w	r10,r7[-32]
80012148:	30 8b       	mov	r11,8
8001214a:	10 9c       	mov	r12,r8
8001214c:	fe b0 f6 24 	rcall	80010d94 <_mav_put_char_array>
#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_NAMED_VALUE_INT, buf, MAVLINK_MSG_ID_NAMED_VALUE_INT_LEN, MAVLINK_MSG_ID_NAMED_VALUE_INT_CRC);
80012150:	ee ca 00 14 	sub	r10,r7,20
80012154:	32 c8       	mov	r8,44
80012156:	31 29       	mov	r9,18
80012158:	e0 6b 00 fc 	mov	r11,252
8001215c:	ee fc ff e8 	ld.w	r12,r7[-24]
80012160:	fe b0 f4 b0 	rcall	80010ac0 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_NAMED_VALUE_INT, (const char *)&packet, MAVLINK_MSG_ID_NAMED_VALUE_INT_LEN, MAVLINK_MSG_ID_NAMED_VALUE_INT_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_NAMED_VALUE_INT, (const char *)&packet, MAVLINK_MSG_ID_NAMED_VALUE_INT_LEN);
#endif
#endif
}
80012164:	2f 7d       	sub	sp,-36
80012166:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001216a:	00 00       	add	r0,r0
8001216c:	80 01       	ld.sh	r1,r0[0x0]
8001216e:	1f 8e       	ld.ub	lr,pc[0x0]

80012170 <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
80012170:	eb cd 40 c0 	pushm	r6-r7,lr
80012174:	1a 97       	mov	r7,sp
80012176:	20 6d       	sub	sp,24
80012178:	49 e6       	lddpc	r6,800121f0 <interpolate+0x80>
8001217a:	1e 26       	rsub	r6,pc
8001217c:	ef 4c ff f8 	st.w	r7[-8],r12
80012180:	ef 4b ff f4 	st.w	r7[-12],r11
80012184:	ef 4a ff f0 	st.w	r7[-16],r10
80012188:	ef 49 ff ec 	st.w	r7[-20],r9
8001218c:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
80012190:	ee f9 ff f4 	ld.w	r9,r7[-12]
80012194:	ee f8 ff f0 	ld.w	r8,r7[-16]
80012198:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
8001219c:	c0 41       	brne	800121a4 <interpolate+0x34>
	{
		return y1;
8001219e:	ee f8 ff ec 	ld.w	r8,r7[-20]
800121a2:	c2 38       	rjmp	800121e8 <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
800121a4:	ee f9 ff e8 	ld.w	r9,r7[-24]
800121a8:	ee f8 ff ec 	ld.w	r8,r7[-20]
800121ac:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
800121b0:	ee fa ff f8 	ld.w	r10,r7[-8]
800121b4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800121b8:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
800121bc:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
800121c0:	ee fa ff f0 	ld.w	r10,r7[-16]
800121c4:	ee f9 ff f4 	ld.w	r9,r7[-12]
800121c8:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
800121cc:	12 9b       	mov	r11,r9
800121ce:	10 9c       	mov	r12,r8
800121d0:	f0 16 00 08 	mcall	r6[32]
800121d4:	18 98       	mov	r8,r12
800121d6:	10 99       	mov	r9,r8
800121d8:	ee f8 ff ec 	ld.w	r8,r7[-20]
800121dc:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
800121e0:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
800121e4:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
800121e8:	10 9c       	mov	r12,r8
800121ea:	2f ad       	sub	sp,-24
800121ec:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800121f0:	80 01       	ld.sh	r1,r0[0x0]
800121f2:	1f fe       	ld.ub	lr,pc[0x7]

800121f4 <mavlink_send_heartbeat>:
#include "mavlink_waypoint_handler.h"
#include "neighbor_selection.h"

central_data_t *centralData;

void mavlink_send_heartbeat(void) {
800121f4:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
800121f8:	1a 97       	mov	r7,sp
800121fa:	20 1d       	sub	sp,4
800121fc:	4c 46       	lddpc	r6,8001230c <mavlink_send_heartbeat+0x118>
800121fe:	1e 26       	rsub	r6,pc

	central_data_t *centralData=get_central_data();
80012200:	f0 16 00 31 	mcall	r6[196]
80012204:	18 98       	mov	r8,r12
80012206:	ef 48 ff fc 	st.w	r7[-4],r8

	mavlink_msg_heartbeat_send(MAVLINK_COMM_0, MAV_TYPE_QUADROTOR, MAV_AUTOPILOT_GENERIC, centralData->mav_mode, 0, centralData->mav_state);
8001220a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001220e:	f1 38 10 bd 	ld.ub	r8,r8[4285]
80012212:	ee f9 ff fc 	ld.w	r9,r7[-4]
80012216:	f3 39 10 bc 	ld.ub	r9,r9[4284]
8001221a:	1a d8       	st.w	--sp,r8
8001221c:	30 08       	mov	r8,0
8001221e:	30 0a       	mov	r10,0
80012220:	30 2b       	mov	r11,2
80012222:	30 0c       	mov	r12,0
80012224:	fe b0 f6 1a 	rcall	80010e58 <mavlink_msg_heartbeat_send>
80012228:	2f fd       	sub	sp,-4
								//0, 0,  				// comms drop, comms errors
								//0, 0, 0, 0);        // autopilot specific errors
	mavlink_msg_battery_status_send(MAVLINK_COMM_0, 0, (int)(1000.0*get_battery_rail()), 
														(int)(1000.0*get_internal_rail()), 
														(int)(1000.0*get_6V_analog_rail()), 
														(int)(1000.0*get_5V_analog_rail()),
8001222a:	f0 16 01 f7 	mcall	r6[2012]
8001222e:	18 98       	mov	r8,r12
80012230:	10 9c       	mov	r12,r8
80012232:	f0 16 00 02 	mcall	r6[8]
80012236:	30 08       	mov	r8,0
80012238:	e0 69 40 00 	mov	r9,16384
8001223c:	ea 19 40 8f 	orh	r9,0x408f
80012240:	f0 16 00 03 	mcall	r6[12]
80012244:	14 98       	mov	r8,r10
80012246:	16 99       	mov	r9,r11
80012248:	10 9a       	mov	r10,r8
8001224a:	12 9b       	mov	r11,r9
8001224c:	f0 16 00 12 	mcall	r6[72]
80012250:	18 98       	mov	r8,r12
								//(int)(1000.0*get_battery_rail()), // bat voltage (mV)
								//100,                // current (mA)
								//99,					// battery remaining
								//0, 0,  				// comms drop, comms errors
								//0, 0, 0, 0);        // autopilot specific errors
	mavlink_msg_battery_status_send(MAVLINK_COMM_0, 0, (int)(1000.0*get_battery_rail()), 
80012252:	5c 88       	casts.h	r8
80012254:	e5 d8 c0 10 	bfextu	r2,r8,0x0,0x10
														(int)(1000.0*get_internal_rail()), 
														(int)(1000.0*get_6V_analog_rail()), 
80012258:	f0 16 01 66 	mcall	r6[1432]
8001225c:	18 98       	mov	r8,r12
8001225e:	10 9c       	mov	r12,r8
80012260:	f0 16 00 02 	mcall	r6[8]
80012264:	30 08       	mov	r8,0
80012266:	e0 69 40 00 	mov	r9,16384
8001226a:	ea 19 40 8f 	orh	r9,0x408f
8001226e:	f0 16 00 03 	mcall	r6[12]
80012272:	14 98       	mov	r8,r10
80012274:	16 99       	mov	r9,r11
80012276:	10 9a       	mov	r10,r8
80012278:	12 9b       	mov	r11,r9
8001227a:	f0 16 00 12 	mcall	r6[72]
8001227e:	18 98       	mov	r8,r12
								//(int)(1000.0*get_battery_rail()), // bat voltage (mV)
								//100,                // current (mA)
								//99,					// battery remaining
								//0, 0,  				// comms drop, comms errors
								//0, 0, 0, 0);        // autopilot specific errors
	mavlink_msg_battery_status_send(MAVLINK_COMM_0, 0, (int)(1000.0*get_battery_rail()), 
80012280:	5c 88       	casts.h	r8
80012282:	e7 d8 c0 10 	bfextu	r3,r8,0x0,0x10
														(int)(1000.0*get_internal_rail()), 
80012286:	f0 16 01 8b 	mcall	r6[1580]
8001228a:	18 98       	mov	r8,r12
8001228c:	10 9c       	mov	r12,r8
8001228e:	f0 16 00 02 	mcall	r6[8]
80012292:	30 08       	mov	r8,0
80012294:	e0 69 40 00 	mov	r9,16384
80012298:	ea 19 40 8f 	orh	r9,0x408f
8001229c:	f0 16 00 03 	mcall	r6[12]
800122a0:	14 98       	mov	r8,r10
800122a2:	16 99       	mov	r9,r11
800122a4:	10 9a       	mov	r10,r8
800122a6:	12 9b       	mov	r11,r9
800122a8:	f0 16 00 12 	mcall	r6[72]
800122ac:	18 98       	mov	r8,r12
								//(int)(1000.0*get_battery_rail()), // bat voltage (mV)
								//100,                // current (mA)
								//99,					// battery remaining
								//0, 0,  				// comms drop, comms errors
								//0, 0, 0, 0);        // autopilot specific errors
	mavlink_msg_battery_status_send(MAVLINK_COMM_0, 0, (int)(1000.0*get_battery_rail()), 
800122ae:	5c 88       	casts.h	r8
800122b0:	eb d8 c0 10 	bfextu	r5,r8,0x0,0x10
800122b4:	f0 16 01 c0 	mcall	r6[1792]
800122b8:	18 98       	mov	r8,r12
800122ba:	10 9c       	mov	r12,r8
800122bc:	f0 16 00 02 	mcall	r6[8]
800122c0:	30 08       	mov	r8,0
800122c2:	e0 69 40 00 	mov	r9,16384
800122c6:	ea 19 40 8f 	orh	r9,0x408f
800122ca:	f0 16 00 03 	mcall	r6[12]
800122ce:	14 98       	mov	r8,r10
800122d0:	16 99       	mov	r9,r11
800122d2:	10 9a       	mov	r10,r8
800122d4:	12 9b       	mov	r11,r9
800122d6:	f0 16 00 12 	mcall	r6[72]
800122da:	18 98       	mov	r8,r12
800122dc:	5c 88       	casts.h	r8
800122de:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
800122e2:	30 08       	mov	r8,0
800122e4:	1a d8       	st.w	--sp,r8
800122e6:	30 08       	mov	r8,0
800122e8:	1a d8       	st.w	--sp,r8
800122ea:	30 08       	mov	r8,0
800122ec:	1a d8       	st.w	--sp,r8
800122ee:	30 08       	mov	r8,0
800122f0:	1a d8       	st.w	--sp,r8
800122f2:	1a d2       	st.w	--sp,r2
800122f4:	06 98       	mov	r8,r3
800122f6:	0a 99       	mov	r9,r5
800122f8:	30 0b       	mov	r11,0
800122fa:	30 0c       	mov	r12,0
800122fc:	c4 ce       	rcall	80011f94 <mavlink_msg_battery_status_send>
800122fe:	2f bd       	sub	sp,-20
														(int)(1000.0*get_internal_rail()), 
														(int)(1000.0*get_6V_analog_rail()), 
														(int)(1000.0*get_5V_analog_rail()),
														0.0, 0.0, 0.0, 0.0);
														
	trigger_analog_monitor();
80012300:	f0 16 01 ec 	mcall	r6[1968]
	
	//dbg_print("Send hearbeat.\n");
}
80012304:	2f fd       	sub	sp,-4
80012306:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
8001230a:	00 00       	add	r0,r0
8001230c:	80 01       	ld.sh	r1,r0[0x0]
8001230e:	20 82       	sub	r2,8

80012310 <mavlink_send_raw_imu>:

void mavlink_send_raw_imu(void) {
80012310:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
80012314:	1a 97       	mov	r7,sp
80012316:	20 6d       	sub	sp,24
80012318:	4b e6       	lddpc	r6,80012410 <mavlink_send_raw_imu+0x100>
8001231a:	1e 26       	rsub	r6,pc
	centralData->imu1.raw_channels[GYRO_OFFSET+IMU_X], 
	centralData->imu1.raw_channels[GYRO_OFFSET+IMU_Y], 
	centralData->imu1.raw_channels[GYRO_OFFSET+IMU_Z], 
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_X], 
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_Y], 
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_Z]
8001231c:	ec f8 00 00 	ld.w	r8,r6[0]
80012320:	70 08       	ld.w	r8,r8[0x0]
80012322:	f0 f8 00 ec 	ld.w	r8,r8[236]
	
	//dbg_print("Send hearbeat.\n");
}

void mavlink_send_raw_imu(void) {
	mavlink_msg_raw_imu_send(MAVLINK_COMM_0, get_micros(), 
80012326:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8001232a:	5c 88       	casts.h	r8
8001232c:	ef 48 ff e8 	st.w	r7[-24],r8
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_Z], 
	centralData->imu1.raw_channels[GYRO_OFFSET+IMU_X], 
	centralData->imu1.raw_channels[GYRO_OFFSET+IMU_Y], 
	centralData->imu1.raw_channels[GYRO_OFFSET+IMU_Z], 
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_X], 
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_Y], 
80012330:	ec f8 00 00 	ld.w	r8,r6[0]
80012334:	70 08       	ld.w	r8,r8[0x0]
80012336:	f0 f8 00 e8 	ld.w	r8,r8[232]
	
	//dbg_print("Send hearbeat.\n");
}

void mavlink_send_raw_imu(void) {
	mavlink_msg_raw_imu_send(MAVLINK_COMM_0, get_micros(), 
8001233a:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8001233e:	5c 88       	casts.h	r8
80012340:	ef 48 ff ec 	st.w	r7[-20],r8
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_Y], 
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_Z], 
	centralData->imu1.raw_channels[GYRO_OFFSET+IMU_X], 
	centralData->imu1.raw_channels[GYRO_OFFSET+IMU_Y], 
	centralData->imu1.raw_channels[GYRO_OFFSET+IMU_Z], 
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_X], 
80012344:	ec f8 00 00 	ld.w	r8,r6[0]
80012348:	70 08       	ld.w	r8,r8[0x0]
8001234a:	f0 f8 00 e4 	ld.w	r8,r8[228]
	
	//dbg_print("Send hearbeat.\n");
}

void mavlink_send_raw_imu(void) {
	mavlink_msg_raw_imu_send(MAVLINK_COMM_0, get_micros(), 
8001234e:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80012352:	5c 88       	casts.h	r8
80012354:	ef 48 ff f0 	st.w	r7[-16],r8
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_X], 
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_Y], 
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_Z], 
	centralData->imu1.raw_channels[GYRO_OFFSET+IMU_X], 
	centralData->imu1.raw_channels[GYRO_OFFSET+IMU_Y], 
	centralData->imu1.raw_channels[GYRO_OFFSET+IMU_Z], 
80012358:	ec f8 00 00 	ld.w	r8,r6[0]
8001235c:	70 08       	ld.w	r8,r8[0x0]
8001235e:	f0 f8 00 d4 	ld.w	r8,r8[212]
	
	//dbg_print("Send hearbeat.\n");
}

void mavlink_send_raw_imu(void) {
	mavlink_msg_raw_imu_send(MAVLINK_COMM_0, get_micros(), 
80012362:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80012366:	5c 88       	casts.h	r8
80012368:	ef 48 ff f4 	st.w	r7[-12],r8
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_X], 
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_Y], 
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_Z], 
	centralData->imu1.raw_channels[GYRO_OFFSET+IMU_X], 
	centralData->imu1.raw_channels[GYRO_OFFSET+IMU_Y], 
8001236c:	ec f8 00 00 	ld.w	r8,r6[0]
80012370:	70 08       	ld.w	r8,r8[0x0]
80012372:	f0 f8 00 d0 	ld.w	r8,r8[208]
	
	//dbg_print("Send hearbeat.\n");
}

void mavlink_send_raw_imu(void) {
	mavlink_msg_raw_imu_send(MAVLINK_COMM_0, get_micros(), 
80012376:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8001237a:	5c 88       	casts.h	r8
8001237c:	ef 48 ff f8 	st.w	r7[-8],r8
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_X], 
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_Y], 
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_Z], 
	centralData->imu1.raw_channels[GYRO_OFFSET+IMU_X], 
80012380:	ec f8 00 00 	ld.w	r8,r6[0]
80012384:	70 08       	ld.w	r8,r8[0x0]
80012386:	f0 f8 00 cc 	ld.w	r8,r8[204]
	
	//dbg_print("Send hearbeat.\n");
}

void mavlink_send_raw_imu(void) {
	mavlink_msg_raw_imu_send(MAVLINK_COMM_0, get_micros(), 
8001238a:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8001238e:	5c 88       	casts.h	r8
80012390:	ef 48 ff fc 	st.w	r7[-4],r8
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_X], 
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_Y], 
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_Z], 
80012394:	ec f8 00 00 	ld.w	r8,r6[0]
80012398:	70 08       	ld.w	r8,r8[0x0]
8001239a:	f0 f8 00 e0 	ld.w	r8,r8[224]
	
	//dbg_print("Send hearbeat.\n");
}

void mavlink_send_raw_imu(void) {
	mavlink_msg_raw_imu_send(MAVLINK_COMM_0, get_micros(), 
8001239e:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
800123a2:	5c 88       	casts.h	r8
800123a4:	10 90       	mov	r0,r8
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_X], 
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_Y], 
800123a6:	ec f8 00 00 	ld.w	r8,r6[0]
800123aa:	70 08       	ld.w	r8,r8[0x0]
800123ac:	f0 f8 00 dc 	ld.w	r8,r8[220]
	
	//dbg_print("Send hearbeat.\n");
}

void mavlink_send_raw_imu(void) {
	mavlink_msg_raw_imu_send(MAVLINK_COMM_0, get_micros(), 
800123b0:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
800123b4:	5c 88       	casts.h	r8
800123b6:	10 91       	mov	r1,r8
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_X], 
800123b8:	ec f8 00 00 	ld.w	r8,r6[0]
800123bc:	70 08       	ld.w	r8,r8[0x0]
800123be:	f0 f8 00 d8 	ld.w	r8,r8[216]
	
	//dbg_print("Send hearbeat.\n");
}

void mavlink_send_raw_imu(void) {
	mavlink_msg_raw_imu_send(MAVLINK_COMM_0, get_micros(), 
800123c2:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
800123c6:	5c 88       	casts.h	r8
800123c8:	10 95       	mov	r5,r8
800123ca:	f0 16 00 27 	mcall	r6[156]
800123ce:	18 98       	mov	r8,r12
800123d0:	10 92       	mov	r2,r8
800123d2:	30 03       	mov	r3,0
800123d4:	ee f8 ff e8 	ld.w	r8,r7[-24]
800123d8:	1a d8       	st.w	--sp,r8
800123da:	ee f8 ff ec 	ld.w	r8,r7[-20]
800123de:	1a d8       	st.w	--sp,r8
800123e0:	ee f8 ff f0 	ld.w	r8,r7[-16]
800123e4:	1a d8       	st.w	--sp,r8
800123e6:	ee f8 ff f4 	ld.w	r8,r7[-12]
800123ea:	1a d8       	st.w	--sp,r8
800123ec:	ee f8 ff f8 	ld.w	r8,r7[-8]
800123f0:	1a d8       	st.w	--sp,r8
800123f2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800123f6:	1a d8       	st.w	--sp,r8
800123f8:	1a d0       	st.w	--sp,r0
800123fa:	02 98       	mov	r8,r1
800123fc:	0a 99       	mov	r9,r5
800123fe:	04 9a       	mov	r10,r2
80012400:	06 9b       	mov	r11,r3
80012402:	30 0c       	mov	r12,0
80012404:	fe b0 f6 6e 	rcall	800110e0 <mavlink_msg_raw_imu_send>
80012408:	2f 9d       	sub	sp,-28
	centralData->imu1.raw_channels[GYRO_OFFSET+IMU_Z], 
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_X], 
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_Y], 
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_Z]
	);
}
8001240a:	2f ad       	sub	sp,-24
8001240c:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
80012410:	80 01       	ld.sh	r1,r0[0x0]
80012412:	21 9e       	sub	lr,25

80012414 <mavlink_send_scaled_imu>:

void mavlink_send_scaled_imu(void) {
80012414:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
80012418:	1a 97       	mov	r7,sp
8001241a:	20 4d       	sub	sp,16
8001241c:	4c 96       	lddpc	r6,80012540 <mavlink_send_scaled_imu+0x12c>
8001241e:	1e 26       	rsub	r6,pc
	//1000*centralData->imu1.attitude.mag[IMU_X],
	//1000*centralData->imu1.attitude.mag[IMU_Y],
	//1000*centralData->imu1.attitude.mag[IMU_Z]
	1000*centralData->imu1.attitude.north_vec.v[0],
	1000*centralData->imu1.attitude.north_vec.v[1],
	1000*centralData->imu1.attitude.north_vec.v[2]
80012420:	ec f8 00 00 	ld.w	r8,r6[0]
80012424:	70 08       	ld.w	r8,r8[0x0]
80012426:	70 b9       	ld.w	r9,r8[0x2c]
80012428:	fc 18 44 7a 	movh	r8,0x447a
8001242c:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_Z]
	);
}

void mavlink_send_scaled_imu(void) {
	mavlink_msg_scaled_imu_send(MAVLINK_COMM_0, get_millis(),
80012430:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80012434:	5c 88       	casts.h	r8
80012436:	ef 48 ff f0 	st.w	r7[-16],r8
	1000*centralData->imu1.attitude.om[IMU_Z], 
	//1000*centralData->imu1.attitude.mag[IMU_X],
	//1000*centralData->imu1.attitude.mag[IMU_Y],
	//1000*centralData->imu1.attitude.mag[IMU_Z]
	1000*centralData->imu1.attitude.north_vec.v[0],
	1000*centralData->imu1.attitude.north_vec.v[1],
8001243a:	ec f8 00 00 	ld.w	r8,r6[0]
8001243e:	70 08       	ld.w	r8,r8[0x0]
80012440:	70 a9       	ld.w	r9,r8[0x28]
80012442:	fc 18 44 7a 	movh	r8,0x447a
80012446:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_Z]
	);
}

void mavlink_send_scaled_imu(void) {
	mavlink_msg_scaled_imu_send(MAVLINK_COMM_0, get_millis(),
8001244a:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8001244e:	5c 88       	casts.h	r8
80012450:	ef 48 ff f4 	st.w	r7[-12],r8
	1000*centralData->imu1.attitude.om[IMU_Y], 
	1000*centralData->imu1.attitude.om[IMU_Z], 
	//1000*centralData->imu1.attitude.mag[IMU_X],
	//1000*centralData->imu1.attitude.mag[IMU_Y],
	//1000*centralData->imu1.attitude.mag[IMU_Z]
	1000*centralData->imu1.attitude.north_vec.v[0],
80012454:	ec f8 00 00 	ld.w	r8,r6[0]
80012458:	70 08       	ld.w	r8,r8[0x0]
8001245a:	70 99       	ld.w	r9,r8[0x24]
8001245c:	fc 18 44 7a 	movh	r8,0x447a
80012460:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_Z]
	);
}

void mavlink_send_scaled_imu(void) {
	mavlink_msg_scaled_imu_send(MAVLINK_COMM_0, get_millis(),
80012464:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80012468:	5c 88       	casts.h	r8
8001246a:	ef 48 ff f8 	st.w	r7[-8],r8
	1000*centralData->imu1.attitude.a [IMU_X],
	1000*centralData->imu1.attitude.a [IMU_Y], 
	1000*centralData->imu1.attitude.a [IMU_Z], 
	1000*centralData->imu1.attitude.om[IMU_X], 
	1000*centralData->imu1.attitude.om[IMU_Y], 
	1000*centralData->imu1.attitude.om[IMU_Z], 
8001246e:	ec f8 00 00 	ld.w	r8,r6[0]
80012472:	70 08       	ld.w	r8,r8[0x0]
80012474:	f0 f9 00 80 	ld.w	r9,r8[128]
80012478:	fc 18 44 7a 	movh	r8,0x447a
8001247c:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_Z]
	);
}

void mavlink_send_scaled_imu(void) {
	mavlink_msg_scaled_imu_send(MAVLINK_COMM_0, get_millis(),
80012480:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80012484:	5c 88       	casts.h	r8
80012486:	ef 48 ff fc 	st.w	r7[-4],r8
	1000*centralData->imu1.attitude.a [IMU_X],
	1000*centralData->imu1.attitude.a [IMU_Y], 
	1000*centralData->imu1.attitude.a [IMU_Z], 
	1000*centralData->imu1.attitude.om[IMU_X], 
	1000*centralData->imu1.attitude.om[IMU_Y], 
8001248a:	ec f8 00 00 	ld.w	r8,r6[0]
8001248e:	70 08       	ld.w	r8,r8[0x0]
80012490:	71 f9       	ld.w	r9,r8[0x7c]
80012492:	fc 18 44 7a 	movh	r8,0x447a
80012496:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_Z]
	);
}

void mavlink_send_scaled_imu(void) {
	mavlink_msg_scaled_imu_send(MAVLINK_COMM_0, get_millis(),
8001249a:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8001249e:	5c 88       	casts.h	r8
800124a0:	10 90       	mov	r0,r8
	1000*centralData->imu1.attitude.a [IMU_X],
	1000*centralData->imu1.attitude.a [IMU_Y], 
	1000*centralData->imu1.attitude.a [IMU_Z], 
	1000*centralData->imu1.attitude.om[IMU_X], 
800124a2:	ec f8 00 00 	ld.w	r8,r6[0]
800124a6:	70 08       	ld.w	r8,r8[0x0]
800124a8:	71 e9       	ld.w	r9,r8[0x78]
800124aa:	fc 18 44 7a 	movh	r8,0x447a
800124ae:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_Z]
	);
}

void mavlink_send_scaled_imu(void) {
	mavlink_msg_scaled_imu_send(MAVLINK_COMM_0, get_millis(),
800124b2:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
800124b6:	5c 88       	casts.h	r8
800124b8:	10 91       	mov	r1,r8
	1000*centralData->imu1.attitude.a [IMU_X],
	1000*centralData->imu1.attitude.a [IMU_Y], 
	1000*centralData->imu1.attitude.a [IMU_Z], 
800124ba:	ec f8 00 00 	ld.w	r8,r6[0]
800124be:	70 08       	ld.w	r8,r8[0x0]
800124c0:	f0 f9 00 8c 	ld.w	r9,r8[140]
800124c4:	fc 18 44 7a 	movh	r8,0x447a
800124c8:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_Z]
	);
}

void mavlink_send_scaled_imu(void) {
	mavlink_msg_scaled_imu_send(MAVLINK_COMM_0, get_millis(),
800124cc:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
800124d0:	5c 88       	casts.h	r8
800124d2:	10 92       	mov	r2,r8
	1000*centralData->imu1.attitude.a [IMU_X],
	1000*centralData->imu1.attitude.a [IMU_Y], 
800124d4:	ec f8 00 00 	ld.w	r8,r6[0]
800124d8:	70 08       	ld.w	r8,r8[0x0]
800124da:	f0 f9 00 88 	ld.w	r9,r8[136]
800124de:	fc 18 44 7a 	movh	r8,0x447a
800124e2:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_Z]
	);
}

void mavlink_send_scaled_imu(void) {
	mavlink_msg_scaled_imu_send(MAVLINK_COMM_0, get_millis(),
800124e6:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
800124ea:	5c 88       	casts.h	r8
800124ec:	10 93       	mov	r3,r8
	1000*centralData->imu1.attitude.a [IMU_X],
800124ee:	ec f8 00 00 	ld.w	r8,r6[0]
800124f2:	70 08       	ld.w	r8,r8[0x0]
800124f4:	f0 f9 00 84 	ld.w	r9,r8[132]
800124f8:	fc 18 44 7a 	movh	r8,0x447a
800124fc:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_Z]
	);
}

void mavlink_send_scaled_imu(void) {
	mavlink_msg_scaled_imu_send(MAVLINK_COMM_0, get_millis(),
80012500:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80012504:	5c 88       	casts.h	r8
80012506:	10 95       	mov	r5,r8
80012508:	f0 16 00 0f 	mcall	r6[60]
8001250c:	18 9b       	mov	r11,r12
8001250e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80012512:	1a d8       	st.w	--sp,r8
80012514:	ee f8 ff f4 	ld.w	r8,r7[-12]
80012518:	1a d8       	st.w	--sp,r8
8001251a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001251e:	1a d8       	st.w	--sp,r8
80012520:	ee f8 ff fc 	ld.w	r8,r7[-4]
80012524:	1a d8       	st.w	--sp,r8
80012526:	1a d0       	st.w	--sp,r0
80012528:	1a d1       	st.w	--sp,r1
8001252a:	04 98       	mov	r8,r2
8001252c:	06 99       	mov	r9,r3
8001252e:	0a 9a       	mov	r10,r5
80012530:	30 0c       	mov	r12,0
80012532:	fe b0 f5 45 	rcall	80010fbc <mavlink_msg_scaled_imu_send>
80012536:	2f ad       	sub	sp,-24
	1000*centralData->imu1.attitude.north_vec.v[2]
	//1000*centralData->imu1.attitude.up_vec.v[0],
	//1000*centralData->imu1.attitude.up_vec.v[1],
	//1000*centralData->imu1.attitude.up_vec.v[2]
	);
}
80012538:	2f cd       	sub	sp,-16
8001253a:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
8001253e:	00 00       	add	r0,r0
80012540:	80 01       	ld.sh	r1,r0[0x0]
80012542:	22 a2       	sub	r2,42

80012544 <mavlink_send_rpy_rates_error>:
void  mavlink_send_rpy_rates_error(void) {
80012544:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
80012548:	1a 97       	mov	r7,sp
8001254a:	20 1d       	sub	sp,4
8001254c:	49 16       	lddpc	r6,80012590 <mavlink_send_rpy_rates_error+0x4c>
8001254e:	1e 26       	rsub	r6,pc
	Stabiliser_t *rate_stab = &centralData->stabiliser_stack.rate_stabiliser;
80012550:	ec f8 00 00 	ld.w	r8,r6[0]
80012554:	70 08       	ld.w	r8,r8[0x0]
80012556:	f0 c8 fe 60 	sub	r8,r8,-416
8001255a:	ef 48 ff fc 	st.w	r7[-4],r8
	mavlink_msg_roll_pitch_yaw_rates_thrust_setpoint_send(MAVLINK_COMM_0, get_millis(), rate_stab->rpy_controller[0].error, rate_stab->rpy_controller[1].error,rate_stab->rpy_controller[2].error,0 );
8001255e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80012562:	f0 f2 00 bc 	ld.w	r2,r8[188]
80012566:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001256a:	71 e3       	ld.w	r3,r8[0x78]
8001256c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80012570:	70 d5       	ld.w	r5,r8[0x34]
80012572:	f0 16 00 0f 	mcall	r6[60]
80012576:	18 9b       	mov	r11,r12
80012578:	30 08       	mov	r8,0
8001257a:	1a d8       	st.w	--sp,r8
8001257c:	04 98       	mov	r8,r2
8001257e:	06 99       	mov	r9,r3
80012580:	0a 9a       	mov	r10,r5
80012582:	30 0c       	mov	r12,0
80012584:	fe b0 fb fc 	rcall	80011d7c <mavlink_msg_roll_pitch_yaw_rates_thrust_setpoint_send>
80012588:	2f fd       	sub	sp,-4
}
8001258a:	2f fd       	sub	sp,-4
8001258c:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
80012590:	80 01       	ld.sh	r1,r0[0x0]
80012592:	23 d2       	sub	r2,61

80012594 <mavlink_send_rpy_speed_thrust_setpoint>:
void  mavlink_send_rpy_speed_thrust_setpoint(void) {
80012594:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
80012598:	1a 97       	mov	r7,sp
8001259a:	20 1d       	sub	sp,4
8001259c:	49 16       	lddpc	r6,800125e0 <mavlink_send_rpy_speed_thrust_setpoint+0x4c>
8001259e:	1e 26       	rsub	r6,pc
	Stabiliser_t *rate_stab = &centralData->stabiliser_stack.rate_stabiliser;
800125a0:	ec f8 00 00 	ld.w	r8,r6[0]
800125a4:	70 08       	ld.w	r8,r8[0x0]
800125a6:	f0 c8 fe 60 	sub	r8,r8,-416
800125aa:	ef 48 ff fc 	st.w	r7[-4],r8
	mavlink_msg_roll_pitch_yaw_speed_thrust_setpoint_send(MAVLINK_COMM_0, get_millis(), rate_stab->rpy_controller[0].output, rate_stab->rpy_controller[1].output,rate_stab->rpy_controller[2].output,0 );
800125ae:	ee f8 ff fc 	ld.w	r8,r7[-4]
800125b2:	f0 f2 00 b8 	ld.w	r2,r8[184]
800125b6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800125ba:	71 d3       	ld.w	r3,r8[0x74]
800125bc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800125c0:	70 c5       	ld.w	r5,r8[0x30]
800125c2:	f0 16 00 0f 	mcall	r6[60]
800125c6:	18 9b       	mov	r11,r12
800125c8:	30 08       	mov	r8,0
800125ca:	1a d8       	st.w	--sp,r8
800125cc:	04 98       	mov	r8,r2
800125ce:	06 99       	mov	r9,r3
800125d0:	0a 9a       	mov	r10,r5
800125d2:	30 0c       	mov	r12,0
800125d4:	fe b0 fa 02 	rcall	800119d8 <mavlink_msg_roll_pitch_yaw_speed_thrust_setpoint_send>
800125d8:	2f fd       	sub	sp,-4
}
800125da:	2f fd       	sub	sp,-4
800125dc:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
800125e0:	80 01       	ld.sh	r1,r0[0x0]
800125e2:	24 22       	sub	r2,66

800125e4 <mavlink_send_rpy_thrust_setpoint>:
void mavlink_send_rpy_thrust_setpoint(void) {
800125e4:	eb cd 40 ee 	pushm	r1-r3,r5-r7,lr
800125e8:	1a 97       	mov	r7,sp
800125ea:	49 26       	lddpc	r6,80012630 <mavlink_send_rpy_thrust_setpoint+0x4c>
800125ec:	1e 26       	rsub	r6,pc
	
	// Controls output
	//mavlink_msg_roll_pitch_yaw_thrust_setpoint_send(mavlink_channel_t chan, uint32_t time_boot_ms, float roll, float pitch, float yaw, float thrust)
	mavlink_msg_roll_pitch_yaw_thrust_setpoint_send(MAVLINK_COMM_0, get_millis(), centralData->controls.rpy[ROLL], centralData->controls.rpy[PITCH], centralData->controls.rpy[YAW], centralData->controls.thrust);
800125ee:	ec f8 00 00 	ld.w	r8,r6[0]
800125f2:	70 08       	ld.w	r8,r8[0x0]
800125f4:	f0 f1 01 54 	ld.w	r1,r8[340]
800125f8:	ec f8 00 00 	ld.w	r8,r6[0]
800125fc:	70 08       	ld.w	r8,r8[0x0]
800125fe:	f0 f2 01 50 	ld.w	r2,r8[336]
80012602:	ec f8 00 00 	ld.w	r8,r6[0]
80012606:	70 08       	ld.w	r8,r8[0x0]
80012608:	f0 f3 01 4c 	ld.w	r3,r8[332]
8001260c:	ec f8 00 00 	ld.w	r8,r6[0]
80012610:	70 08       	ld.w	r8,r8[0x0]
80012612:	f0 f5 01 48 	ld.w	r5,r8[328]
80012616:	f0 16 00 0f 	mcall	r6[60]
8001261a:	18 9b       	mov	r11,r12
8001261c:	1a d1       	st.w	--sp,r1
8001261e:	04 98       	mov	r8,r2
80012620:	06 99       	mov	r9,r3
80012622:	0a 9a       	mov	r10,r5
80012624:	30 0c       	mov	r12,0
80012626:	fe b0 f9 8d 	rcall	80011940 <mavlink_msg_roll_pitch_yaw_thrust_setpoint_send>
8001262a:	2f fd       	sub	sp,-4
}
8001262c:	e3 cd 80 ee 	ldm	sp++,r1-r3,r5-r7,pc
80012630:	80 01       	ld.sh	r1,r0[0x0]
80012632:	24 70       	sub	r0,71

80012634 <mavlink_send_servo_output>:

void mavlink_send_servo_output(void) {
80012634:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
80012638:	1a 97       	mov	r7,sp
8001263a:	20 4d       	sub	sp,16
8001263c:	4c b6       	lddpc	r6,80012768 <mavlink_send_servo_output+0x134>
8001263e:	1e 26       	rsub	r6,pc
	Stabiliser_t *rate_stab = &centralData->stabiliser_stack.rate_stabiliser;
80012640:	ec f8 00 00 	ld.w	r8,r6[0]
80012644:	70 08       	ld.w	r8,r8[0x0]
80012646:	f0 c8 fe 60 	sub	r8,r8,-416
8001264a:	ef 48 ff fc 	st.w	r7[-4],r8
	(uint16_t)(centralData->servos[2].value+1500),
	(uint16_t)(centralData->servos[3].value+1500),
	1000*rate_stab->output.rpy[0]+1000, 
	1000*rate_stab->output.rpy[1]+1000,
	1000*rate_stab->output.rpy[2]+1000,
	1000*rate_stab->output.thrust+1000
8001264e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80012652:	f0 f9 01 1c 	ld.w	r9,r8[284]
80012656:	fc 18 44 7a 	movh	r8,0x447a
8001265a:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8001265e:	fc 18 44 7a 	movh	r8,0x447a
80012662:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
	mavlink_msg_roll_pitch_yaw_thrust_setpoint_send(MAVLINK_COMM_0, get_millis(), centralData->controls.rpy[ROLL], centralData->controls.rpy[PITCH], centralData->controls.rpy[YAW], centralData->controls.thrust);
}

void mavlink_send_servo_output(void) {
	Stabiliser_t *rate_stab = &centralData->stabiliser_stack.rate_stabiliser;
	mavlink_msg_servo_output_raw_send(MAVLINK_COMM_0, get_micros(), 0, 
80012666:	e5 a9 08 08 	cop	cp0,cr8,cr0,cr8,0x52
8001266a:	5c 88       	casts.h	r8
8001266c:	5c 78       	castu.h	r8
8001266e:	ef 48 ff f0 	st.w	r7[-16],r8
	(uint16_t)(centralData->servos[1].value+1500),
	(uint16_t)(centralData->servos[2].value+1500),
	(uint16_t)(centralData->servos[3].value+1500),
	1000*rate_stab->output.rpy[0]+1000, 
	1000*rate_stab->output.rpy[1]+1000,
	1000*rate_stab->output.rpy[2]+1000,
80012672:	ee f8 ff fc 	ld.w	r8,r7[-4]
80012676:	f0 f9 01 18 	ld.w	r9,r8[280]
8001267a:	fc 18 44 7a 	movh	r8,0x447a
8001267e:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80012682:	fc 18 44 7a 	movh	r8,0x447a
80012686:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
	mavlink_msg_roll_pitch_yaw_thrust_setpoint_send(MAVLINK_COMM_0, get_millis(), centralData->controls.rpy[ROLL], centralData->controls.rpy[PITCH], centralData->controls.rpy[YAW], centralData->controls.thrust);
}

void mavlink_send_servo_output(void) {
	Stabiliser_t *rate_stab = &centralData->stabiliser_stack.rate_stabiliser;
	mavlink_msg_servo_output_raw_send(MAVLINK_COMM_0, get_micros(), 0, 
8001268a:	e5 a9 08 08 	cop	cp0,cr8,cr0,cr8,0x52
8001268e:	5c 88       	casts.h	r8
80012690:	5c 78       	castu.h	r8
80012692:	ef 48 ff f4 	st.w	r7[-12],r8
	(uint16_t)(centralData->servos[0].value+1500),
	(uint16_t)(centralData->servos[1].value+1500),
	(uint16_t)(centralData->servos[2].value+1500),
	(uint16_t)(centralData->servos[3].value+1500),
	1000*rate_stab->output.rpy[0]+1000, 
	1000*rate_stab->output.rpy[1]+1000,
80012696:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001269a:	f0 f9 01 14 	ld.w	r9,r8[276]
8001269e:	fc 18 44 7a 	movh	r8,0x447a
800126a2:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
800126a6:	fc 18 44 7a 	movh	r8,0x447a
800126aa:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
	mavlink_msg_roll_pitch_yaw_thrust_setpoint_send(MAVLINK_COMM_0, get_millis(), centralData->controls.rpy[ROLL], centralData->controls.rpy[PITCH], centralData->controls.rpy[YAW], centralData->controls.thrust);
}

void mavlink_send_servo_output(void) {
	Stabiliser_t *rate_stab = &centralData->stabiliser_stack.rate_stabiliser;
	mavlink_msg_servo_output_raw_send(MAVLINK_COMM_0, get_micros(), 0, 
800126ae:	e5 a9 08 08 	cop	cp0,cr8,cr0,cr8,0x52
800126b2:	5c 88       	casts.h	r8
800126b4:	5c 78       	castu.h	r8
800126b6:	ef 48 ff f8 	st.w	r7[-8],r8
	(uint16_t)(centralData->servos[0].value+1500),
	(uint16_t)(centralData->servos[1].value+1500),
	(uint16_t)(centralData->servos[2].value+1500),
	(uint16_t)(centralData->servos[3].value+1500),
	1000*rate_stab->output.rpy[0]+1000, 
800126ba:	ee f8 ff fc 	ld.w	r8,r7[-4]
800126be:	f0 f9 01 10 	ld.w	r9,r8[272]
800126c2:	fc 18 44 7a 	movh	r8,0x447a
800126c6:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
800126ca:	fc 18 44 7a 	movh	r8,0x447a
800126ce:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
	mavlink_msg_roll_pitch_yaw_thrust_setpoint_send(MAVLINK_COMM_0, get_millis(), centralData->controls.rpy[ROLL], centralData->controls.rpy[PITCH], centralData->controls.rpy[YAW], centralData->controls.thrust);
}

void mavlink_send_servo_output(void) {
	Stabiliser_t *rate_stab = &centralData->stabiliser_stack.rate_stabiliser;
	mavlink_msg_servo_output_raw_send(MAVLINK_COMM_0, get_micros(), 0, 
800126d2:	e5 a9 08 08 	cop	cp0,cr8,cr0,cr8,0x52
800126d6:	5c 88       	casts.h	r8
800126d8:	e1 d8 c0 10 	bfextu	r0,r8,0x0,0x10
	(uint16_t)(centralData->servos[0].value+1500),
	(uint16_t)(centralData->servos[1].value+1500),
	(uint16_t)(centralData->servos[2].value+1500),
	(uint16_t)(centralData->servos[3].value+1500),
800126dc:	ec f8 00 00 	ld.w	r8,r6[0]
800126e0:	70 08       	ld.w	r8,r8[0x0]
800126e2:	f0 f8 07 1c 	ld.w	r8,r8[1820]
800126e6:	5c 88       	casts.h	r8
800126e8:	f0 c8 fa 24 	sub	r8,r8,-1500
800126ec:	5c 88       	casts.h	r8
	mavlink_msg_roll_pitch_yaw_thrust_setpoint_send(MAVLINK_COMM_0, get_millis(), centralData->controls.rpy[ROLL], centralData->controls.rpy[PITCH], centralData->controls.rpy[YAW], centralData->controls.thrust);
}

void mavlink_send_servo_output(void) {
	Stabiliser_t *rate_stab = &centralData->stabiliser_stack.rate_stabiliser;
	mavlink_msg_servo_output_raw_send(MAVLINK_COMM_0, get_micros(), 0, 
800126ee:	e3 d8 c0 10 	bfextu	r1,r8,0x0,0x10
	(uint16_t)(centralData->servos[0].value+1500),
	(uint16_t)(centralData->servos[1].value+1500),
	(uint16_t)(centralData->servos[2].value+1500),
800126f2:	ec f8 00 00 	ld.w	r8,r6[0]
800126f6:	70 08       	ld.w	r8,r8[0x0]
800126f8:	f0 f8 07 0c 	ld.w	r8,r8[1804]
800126fc:	5c 88       	casts.h	r8
800126fe:	f0 c8 fa 24 	sub	r8,r8,-1500
80012702:	5c 88       	casts.h	r8
	mavlink_msg_roll_pitch_yaw_thrust_setpoint_send(MAVLINK_COMM_0, get_millis(), centralData->controls.rpy[ROLL], centralData->controls.rpy[PITCH], centralData->controls.rpy[YAW], centralData->controls.thrust);
}

void mavlink_send_servo_output(void) {
	Stabiliser_t *rate_stab = &centralData->stabiliser_stack.rate_stabiliser;
	mavlink_msg_servo_output_raw_send(MAVLINK_COMM_0, get_micros(), 0, 
80012704:	e5 d8 c0 10 	bfextu	r2,r8,0x0,0x10
	(uint16_t)(centralData->servos[0].value+1500),
	(uint16_t)(centralData->servos[1].value+1500),
80012708:	ec f8 00 00 	ld.w	r8,r6[0]
8001270c:	70 08       	ld.w	r8,r8[0x0]
8001270e:	f0 f8 06 fc 	ld.w	r8,r8[1788]
80012712:	5c 88       	casts.h	r8
80012714:	f0 c8 fa 24 	sub	r8,r8,-1500
80012718:	5c 88       	casts.h	r8
	mavlink_msg_roll_pitch_yaw_thrust_setpoint_send(MAVLINK_COMM_0, get_millis(), centralData->controls.rpy[ROLL], centralData->controls.rpy[PITCH], centralData->controls.rpy[YAW], centralData->controls.thrust);
}

void mavlink_send_servo_output(void) {
	Stabiliser_t *rate_stab = &centralData->stabiliser_stack.rate_stabiliser;
	mavlink_msg_servo_output_raw_send(MAVLINK_COMM_0, get_micros(), 0, 
8001271a:	e7 d8 c0 10 	bfextu	r3,r8,0x0,0x10
	(uint16_t)(centralData->servos[0].value+1500),
8001271e:	ec f8 00 00 	ld.w	r8,r6[0]
80012722:	70 08       	ld.w	r8,r8[0x0]
80012724:	f0 f8 06 ec 	ld.w	r8,r8[1772]
80012728:	5c 88       	casts.h	r8
8001272a:	f0 c8 fa 24 	sub	r8,r8,-1500
8001272e:	5c 88       	casts.h	r8
	mavlink_msg_roll_pitch_yaw_thrust_setpoint_send(MAVLINK_COMM_0, get_millis(), centralData->controls.rpy[ROLL], centralData->controls.rpy[PITCH], centralData->controls.rpy[YAW], centralData->controls.thrust);
}

void mavlink_send_servo_output(void) {
	Stabiliser_t *rate_stab = &centralData->stabiliser_stack.rate_stabiliser;
	mavlink_msg_servo_output_raw_send(MAVLINK_COMM_0, get_micros(), 0, 
80012730:	eb d8 c0 10 	bfextu	r5,r8,0x0,0x10
80012734:	f0 16 00 27 	mcall	r6[156]
80012738:	18 9b       	mov	r11,r12
8001273a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001273e:	1a d8       	st.w	--sp,r8
80012740:	ee f8 ff f4 	ld.w	r8,r7[-12]
80012744:	1a d8       	st.w	--sp,r8
80012746:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001274a:	1a d8       	st.w	--sp,r8
8001274c:	1a d0       	st.w	--sp,r0
8001274e:	1a d1       	st.w	--sp,r1
80012750:	1a d2       	st.w	--sp,r2
80012752:	06 98       	mov	r8,r3
80012754:	0a 99       	mov	r9,r5
80012756:	30 0a       	mov	r10,0
80012758:	30 0c       	mov	r12,0
8001275a:	fe b0 f8 65 	rcall	80011824 <mavlink_msg_servo_output_raw_send>
8001275e:	2f ad       	sub	sp,-24
	1000*rate_stab->output.rpy[0]+1000, 
	1000*rate_stab->output.rpy[1]+1000,
	1000*rate_stab->output.rpy[2]+1000,
	1000*rate_stab->output.thrust+1000
	);
}
80012760:	2f cd       	sub	sp,-16
80012762:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
80012766:	00 00       	add	r0,r0
80012768:	80 01       	ld.sh	r1,r0[0x0]
8001276a:	24 c2       	sub	r2,76

8001276c <mavlink_send_attitude_quaternion>:

void mavlink_send_attitude_quaternion(void) {
8001276c:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
80012770:	1a 97       	mov	r7,sp
80012772:	20 2d       	sub	sp,8
80012774:	49 c6       	lddpc	r6,800127e4 <mavlink_send_attitude_quaternion+0x78>
80012776:	1e 26       	rsub	r6,pc
	// ATTITUDE QUATERNION
	mavlink_msg_attitude_quaternion_send(MAVLINK_COMM_0, get_millis(), centralData->imu1.attitude.qe.s, centralData->imu1.attitude.qe.v[0], centralData->imu1.attitude.qe.v[1], centralData->imu1.attitude.qe.v[2], centralData->imu1.attitude.om[0], centralData->imu1.attitude.om[1], centralData->imu1.attitude.om[2]);
80012778:	ec f8 00 00 	ld.w	r8,r6[0]
8001277c:	70 08       	ld.w	r8,r8[0x0]
8001277e:	f0 f8 00 80 	ld.w	r8,r8[128]
80012782:	ef 48 ff f8 	st.w	r7[-8],r8
80012786:	ec f8 00 00 	ld.w	r8,r6[0]
8001278a:	70 08       	ld.w	r8,r8[0x0]
8001278c:	71 f8       	ld.w	r8,r8[0x7c]
8001278e:	ef 48 ff fc 	st.w	r7[-4],r8
80012792:	ec f8 00 00 	ld.w	r8,r6[0]
80012796:	70 08       	ld.w	r8,r8[0x0]
80012798:	71 e0       	ld.w	r0,r8[0x78]
8001279a:	ec f8 00 00 	ld.w	r8,r6[0]
8001279e:	70 08       	ld.w	r8,r8[0x0]
800127a0:	70 31       	ld.w	r1,r8[0xc]
800127a2:	ec f8 00 00 	ld.w	r8,r6[0]
800127a6:	70 08       	ld.w	r8,r8[0x0]
800127a8:	70 22       	ld.w	r2,r8[0x8]
800127aa:	ec f8 00 00 	ld.w	r8,r6[0]
800127ae:	70 08       	ld.w	r8,r8[0x0]
800127b0:	70 13       	ld.w	r3,r8[0x4]
800127b2:	ec f8 00 00 	ld.w	r8,r6[0]
800127b6:	70 08       	ld.w	r8,r8[0x0]
800127b8:	70 05       	ld.w	r5,r8[0x0]
800127ba:	f0 16 00 0f 	mcall	r6[60]
800127be:	18 9b       	mov	r11,r12
800127c0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800127c4:	1a d8       	st.w	--sp,r8
800127c6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800127ca:	1a d8       	st.w	--sp,r8
800127cc:	1a d0       	st.w	--sp,r0
800127ce:	1a d1       	st.w	--sp,r1
800127d0:	04 98       	mov	r8,r2
800127d2:	06 99       	mov	r9,r3
800127d4:	0a 9a       	mov	r10,r5
800127d6:	30 0c       	mov	r12,0
800127d8:	fe b0 f5 b8 	rcall	80011348 <mavlink_msg_attitude_quaternion_send>
800127dc:	2f cd       	sub	sp,-16
}
800127de:	2f ed       	sub	sp,-8
800127e0:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
800127e4:	80 01       	ld.sh	r1,r0[0x0]
800127e6:	25 fa       	sub	r10,95

800127e8 <mavlink_send_attitude>:
void mavlink_send_attitude(void) {
800127e8:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
800127ec:	1a 97       	mov	r7,sp
800127ee:	20 4d       	sub	sp,16
800127f0:	49 f6       	lddpc	r6,8001286c <mavlink_send_attitude+0x84>
800127f2:	1e 26       	rsub	r6,pc
	// ATTITUDE
	Aero_Attitude_t aero_attitude;
	aero_attitude=Quat_to_Aero(centralData->imu1.attitude.qe);
800127f4:	ec f8 00 00 	ld.w	r8,r6[0]
800127f8:	70 09       	ld.w	r9,r8[0x0]
800127fa:	ee ca 00 0c 	sub	r10,r7,12
800127fe:	20 4d       	sub	sp,16
80012800:	1a 98       	mov	r8,sp
80012802:	20 08       	sub	r8,0
80012804:	20 09       	sub	r9,0
80012806:	72 0b       	ld.w	r11,r9[0x0]
80012808:	91 0b       	st.w	r8[0x0],r11
8001280a:	72 1b       	ld.w	r11,r9[0x4]
8001280c:	91 1b       	st.w	r8[0x4],r11
8001280e:	72 2b       	ld.w	r11,r9[0x8]
80012810:	91 2b       	st.w	r8[0x8],r11
80012812:	72 39       	ld.w	r9,r9[0xc]
80012814:	91 39       	st.w	r8[0xc],r9
80012816:	14 9c       	mov	r12,r10
80012818:	f0 16 00 66 	mcall	r6[408]
8001281c:	2f cd       	sub	sp,-16
	mavlink_msg_attitude_send(MAVLINK_COMM_0, get_millis(), aero_attitude.rpy[0], aero_attitude.rpy[1], aero_attitude.rpy[2], centralData->imu1.attitude.om[0], centralData->imu1.attitude.om[1], centralData->imu1.attitude.om[2]);
8001281e:	ec f8 00 00 	ld.w	r8,r6[0]
80012822:	70 08       	ld.w	r8,r8[0x0]
80012824:	f0 f8 00 80 	ld.w	r8,r8[128]
80012828:	ef 48 ff f0 	st.w	r7[-16],r8
8001282c:	ec f8 00 00 	ld.w	r8,r6[0]
80012830:	70 08       	ld.w	r8,r8[0x0]
80012832:	71 f0       	ld.w	r0,r8[0x7c]
80012834:	ec f8 00 00 	ld.w	r8,r6[0]
80012838:	70 08       	ld.w	r8,r8[0x0]
8001283a:	71 e1       	ld.w	r1,r8[0x78]
8001283c:	ee f2 ff fc 	ld.w	r2,r7[-4]
80012840:	ee f3 ff f8 	ld.w	r3,r7[-8]
80012844:	ee f5 ff f4 	ld.w	r5,r7[-12]
80012848:	f0 16 00 0f 	mcall	r6[60]
8001284c:	18 9b       	mov	r11,r12
8001284e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80012852:	1a d8       	st.w	--sp,r8
80012854:	1a d0       	st.w	--sp,r0
80012856:	1a d1       	st.w	--sp,r1
80012858:	04 98       	mov	r8,r2
8001285a:	06 99       	mov	r9,r3
8001285c:	0a 9a       	mov	r10,r5
8001285e:	30 0c       	mov	r12,0
80012860:	fe b0 f5 16 	rcall	8001128c <mavlink_msg_attitude_send>
80012864:	2f dd       	sub	sp,-12
}
80012866:	2f cd       	sub	sp,-16
80012868:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
8001286c:	80 01       	ld.sh	r1,r0[0x0]
8001286e:	26 76       	sub	r6,103

80012870 <mavlink_send_global_position>:

void mavlink_send_global_position(void) {				
80012870:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
80012874:	1a 97       	mov	r7,sp
80012876:	20 9d       	sub	sp,36
80012878:	4e 66       	lddpc	r6,80012a10 <mavlink_send_global_position+0x1a0>
8001287a:	1e 26       	rsub	r6,pc
   //{
	   //mavlink_msg_global_position_int_send(MAVLINK_COMM_0, get_millis() , centralData->GPS_data.latitude*10000000.0, centralData->GPS_data.longitude*10000000.0, centralData->GPS_data.altitude*1000.0, 1, centralData->GPS_data.northSpeed*100.0, centralData->GPS_data.eastSpeed*100.0, centralData->GPS_data.verticalSpeed*100.0, centralData->GPS_data.course);
   //}else{
	   //mavlink_msg_global_position_int_send(MAVLINK_COMM_0, get_millis(), 46.5193*10000000, 6.56507*10000000, 400*1000, 1, 0, 0, 0, centralData->imu1.attitude.om[2]);
	   	// send integrated position (for now there is no GPS error correction...!!!)
		global_position_t gpos=local_to_global_position(centralData->position_estimator.localPosition);
8001287c:	ec f8 00 00 	ld.w	r8,r6[0]
80012880:	70 08       	ld.w	r8,r8[0x0]
80012882:	ee cc 00 1c 	sub	r12,r7,28
80012886:	20 cd       	sub	sp,48
80012888:	1a 99       	mov	r9,sp
8001288a:	12 9b       	mov	r11,r9
8001288c:	f0 ca f2 64 	sub	r10,r8,-3484
80012890:	f6 c8 00 00 	sub	r8,r11,0
80012894:	f4 c9 00 00 	sub	r9,r10,0
80012898:	72 0e       	ld.w	lr,r9[0x0]
8001289a:	91 0e       	st.w	r8[0x0],lr
8001289c:	72 1e       	ld.w	lr,r9[0x4]
8001289e:	91 1e       	st.w	r8[0x4],lr
800128a0:	72 2e       	ld.w	lr,r9[0x8]
800128a2:	91 2e       	st.w	r8[0x8],lr
800128a4:	72 39       	ld.w	r9,r9[0xc]
800128a6:	91 39       	st.w	r8[0xc],r9
800128a8:	f6 c8 ff f0 	sub	r8,r11,-16
800128ac:	f4 c9 ff f0 	sub	r9,r10,-16
800128b0:	72 0e       	ld.w	lr,r9[0x0]
800128b2:	91 0e       	st.w	r8[0x0],lr
800128b4:	72 1e       	ld.w	lr,r9[0x4]
800128b6:	91 1e       	st.w	r8[0x4],lr
800128b8:	72 2e       	ld.w	lr,r9[0x8]
800128ba:	91 2e       	st.w	r8[0x8],lr
800128bc:	72 39       	ld.w	r9,r9[0xc]
800128be:	91 39       	st.w	r8[0xc],r9
800128c0:	f6 c8 ff e0 	sub	r8,r11,-32
800128c4:	f4 c9 ff e0 	sub	r9,r10,-32
800128c8:	72 0a       	ld.w	r10,r9[0x0]
800128ca:	91 0a       	st.w	r8[0x0],r10
800128cc:	72 1a       	ld.w	r10,r9[0x4]
800128ce:	91 1a       	st.w	r8[0x4],r10
800128d0:	72 2a       	ld.w	r10,r9[0x8]
800128d2:	91 2a       	st.w	r8[0x8],r10
800128d4:	72 39       	ld.w	r9,r9[0xc]
800128d6:	91 39       	st.w	r8[0xc],r9
800128d8:	f0 16 00 7f 	mcall	r6[508]
800128dc:	2f 4d       	sub	sp,-48
		mavlink_msg_global_position_int_send(MAVLINK_COMM_0, get_millis(), gpos.latitude*10000000, gpos.longitude*10000000, gpos.altitude*1000.0, 1, centralData->position_estimator.vel[0]*100.0, centralData->position_estimator.vel[1]*100.0, centralData->position_estimator.vel[2]*100.0, centralData->imu1.attitude.om[2]);
800128de:	ec f8 00 00 	ld.w	r8,r6[0]
800128e2:	70 08       	ld.w	r8,r8[0x0]
800128e4:	f0 f8 00 80 	ld.w	r8,r8[128]
800128e8:	e5 a9 08 08 	cop	cp0,cr8,cr0,cr8,0x52
800128ec:	5c 88       	casts.h	r8
800128ee:	5c 78       	castu.h	r8
800128f0:	ef 48 ff dc 	st.w	r7[-36],r8
800128f4:	ec f8 00 00 	ld.w	r8,r6[0]
800128f8:	70 08       	ld.w	r8,r8[0x0]
800128fa:	f0 f8 0d 7c 	ld.w	r8,r8[3452]
800128fe:	10 9c       	mov	r12,r8
80012900:	f0 16 00 02 	mcall	r6[8]
80012904:	30 08       	mov	r8,0
80012906:	fc 19 40 59 	movh	r9,0x4059
8001290a:	f0 16 00 03 	mcall	r6[12]
8001290e:	14 98       	mov	r8,r10
80012910:	16 99       	mov	r9,r11
80012912:	10 9a       	mov	r10,r8
80012914:	12 9b       	mov	r11,r9
80012916:	f0 16 00 12 	mcall	r6[72]
8001291a:	18 98       	mov	r8,r12
8001291c:	5c 88       	casts.h	r8
8001291e:	ef 48 ff e0 	st.w	r7[-32],r8
80012922:	ec f8 00 00 	ld.w	r8,r6[0]
80012926:	70 08       	ld.w	r8,r8[0x0]
80012928:	f0 f8 0d 78 	ld.w	r8,r8[3448]
8001292c:	10 9c       	mov	r12,r8
8001292e:	f0 16 00 02 	mcall	r6[8]
80012932:	30 08       	mov	r8,0
80012934:	fc 19 40 59 	movh	r9,0x4059
80012938:	f0 16 00 03 	mcall	r6[12]
8001293c:	14 98       	mov	r8,r10
8001293e:	16 99       	mov	r9,r11
80012940:	10 9a       	mov	r10,r8
80012942:	12 9b       	mov	r11,r9
80012944:	f0 16 00 12 	mcall	r6[72]
80012948:	18 98       	mov	r8,r12
8001294a:	5c 88       	casts.h	r8
8001294c:	10 90       	mov	r0,r8
8001294e:	ec f8 00 00 	ld.w	r8,r6[0]
80012952:	70 08       	ld.w	r8,r8[0x0]
80012954:	f0 f8 0d 74 	ld.w	r8,r8[3444]
80012958:	10 9c       	mov	r12,r8
8001295a:	f0 16 00 02 	mcall	r6[8]
8001295e:	30 08       	mov	r8,0
80012960:	fc 19 40 59 	movh	r9,0x4059
80012964:	f0 16 00 03 	mcall	r6[12]
80012968:	14 98       	mov	r8,r10
8001296a:	16 99       	mov	r9,r11
8001296c:	10 9a       	mov	r10,r8
8001296e:	12 9b       	mov	r11,r9
80012970:	f0 16 00 12 	mcall	r6[72]
80012974:	18 98       	mov	r8,r12
80012976:	5c 88       	casts.h	r8
80012978:	10 91       	mov	r1,r8
8001297a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001297e:	10 9c       	mov	r12,r8
80012980:	f0 16 00 02 	mcall	r6[8]
80012984:	30 08       	mov	r8,0
80012986:	e0 69 40 00 	mov	r9,16384
8001298a:	ea 19 40 8f 	orh	r9,0x408f
8001298e:	f0 16 00 03 	mcall	r6[12]
80012992:	14 98       	mov	r8,r10
80012994:	16 99       	mov	r9,r11
80012996:	10 9a       	mov	r10,r8
80012998:	12 9b       	mov	r11,r9
8001299a:	f0 16 00 12 	mcall	r6[72]
8001299e:	18 92       	mov	r2,r12
800129a0:	ee ea ff e4 	ld.d	r10,r7[-28]
800129a4:	30 08       	mov	r8,0
800129a6:	e0 69 12 d0 	mov	r9,4816
800129aa:	ea 19 41 63 	orh	r9,0x4163
800129ae:	f0 16 00 03 	mcall	r6[12]
800129b2:	14 98       	mov	r8,r10
800129b4:	16 99       	mov	r9,r11
800129b6:	10 9a       	mov	r10,r8
800129b8:	12 9b       	mov	r11,r9
800129ba:	f0 16 00 12 	mcall	r6[72]
800129be:	18 93       	mov	r3,r12
800129c0:	ee ea ff ec 	ld.d	r10,r7[-20]
800129c4:	30 08       	mov	r8,0
800129c6:	e0 69 12 d0 	mov	r9,4816
800129ca:	ea 19 41 63 	orh	r9,0x4163
800129ce:	f0 16 00 03 	mcall	r6[12]
800129d2:	14 98       	mov	r8,r10
800129d4:	16 99       	mov	r9,r11
800129d6:	10 9a       	mov	r10,r8
800129d8:	12 9b       	mov	r11,r9
800129da:	f0 16 00 12 	mcall	r6[72]
800129de:	18 95       	mov	r5,r12
800129e0:	f0 16 00 0f 	mcall	r6[60]
800129e4:	18 9b       	mov	r11,r12
800129e6:	ee f8 ff dc 	ld.w	r8,r7[-36]
800129ea:	1a d8       	st.w	--sp,r8
800129ec:	ee f8 ff e0 	ld.w	r8,r7[-32]
800129f0:	1a d8       	st.w	--sp,r8
800129f2:	1a d0       	st.w	--sp,r0
800129f4:	1a d1       	st.w	--sp,r1
800129f6:	30 18       	mov	r8,1
800129f8:	1a d8       	st.w	--sp,r8
800129fa:	04 98       	mov	r8,r2
800129fc:	06 99       	mov	r9,r3
800129fe:	0a 9a       	mov	r10,r5
80012a00:	30 0c       	mov	r12,0
80012a02:	fe b0 f5 69 	rcall	800114d4 <mavlink_msg_global_position_int_send>
80012a06:	2f bd       	sub	sp,-20
   //} 
}
80012a08:	2f 7d       	sub	sp,-36
80012a0a:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
80012a0e:	00 00       	add	r0,r0
80012a10:	80 01       	ld.sh	r1,r0[0x0]
80012a12:	26 fe       	sub	lr,111

80012a14 <mavlink_send_hud>:

void mavlink_send_hud(void) {
80012a14:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
80012a18:	1a 97       	mov	r7,sp
80012a1a:	20 5d       	sub	sp,20
80012a1c:	4d 46       	lddpc	r6,80012b6c <mavlink_send_hud+0x158>
80012a1e:	1e 26       	rsub	r6,pc
	float groundspeed=sqrt(centralData->position_estimator.vel[0]*centralData->position_estimator.vel[0] +centralData->position_estimator.vel[1]*centralData->position_estimator.vel[1]);
80012a20:	ec f8 00 00 	ld.w	r8,r6[0]
80012a24:	70 08       	ld.w	r8,r8[0x0]
80012a26:	f0 f9 0d 74 	ld.w	r9,r8[3444]
80012a2a:	ec f8 00 00 	ld.w	r8,r6[0]
80012a2e:	70 08       	ld.w	r8,r8[0x0]
80012a30:	f0 f8 0d 74 	ld.w	r8,r8[3444]
80012a34:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80012a38:	ec f8 00 00 	ld.w	r8,r6[0]
80012a3c:	70 08       	ld.w	r8,r8[0x0]
80012a3e:	f0 fa 0d 78 	ld.w	r10,r8[3448]
80012a42:	ec f8 00 00 	ld.w	r8,r6[0]
80012a46:	70 08       	ld.w	r8,r8[0x0]
80012a48:	f0 f8 0d 78 	ld.w	r8,r8[3448]
80012a4c:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80012a50:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80012a54:	10 9c       	mov	r12,r8
80012a56:	f0 16 00 02 	mcall	r6[8]
80012a5a:	14 98       	mov	r8,r10
80012a5c:	16 99       	mov	r9,r11
80012a5e:	10 9a       	mov	r10,r8
80012a60:	12 9b       	mov	r11,r9
80012a62:	f0 16 00 64 	mcall	r6[400]
80012a66:	14 98       	mov	r8,r10
80012a68:	16 99       	mov	r9,r11
80012a6a:	10 9a       	mov	r10,r8
80012a6c:	12 9b       	mov	r11,r9
80012a6e:	f0 16 00 09 	mcall	r6[36]
80012a72:	18 98       	mov	r8,r12
80012a74:	ef 48 ff f8 	st.w	r7[-8],r8
	float airspeed=groundspeed;
80012a78:	ee f8 ff f8 	ld.w	r8,r7[-8]
80012a7c:	ef 48 ff fc 	st.w	r7[-4],r8
	Aero_Attitude_t aero_attitude;
	aero_attitude=Quat_to_Aero(centralData->imu1.attitude.qe);
80012a80:	ec f8 00 00 	ld.w	r8,r6[0]
80012a84:	70 09       	ld.w	r9,r8[0x0]
80012a86:	ee ca 00 14 	sub	r10,r7,20
80012a8a:	20 4d       	sub	sp,16
80012a8c:	1a 98       	mov	r8,sp
80012a8e:	20 08       	sub	r8,0
80012a90:	20 09       	sub	r9,0
80012a92:	72 0b       	ld.w	r11,r9[0x0]
80012a94:	91 0b       	st.w	r8[0x0],r11
80012a96:	72 1b       	ld.w	r11,r9[0x4]
80012a98:	91 1b       	st.w	r8[0x4],r11
80012a9a:	72 2b       	ld.w	r11,r9[0x8]
80012a9c:	91 2b       	st.w	r8[0x8],r11
80012a9e:	72 39       	ld.w	r9,r9[0xc]
80012aa0:	91 39       	st.w	r8[0xc],r9
80012aa2:	14 9c       	mov	r12,r10
80012aa4:	f0 16 00 66 	mcall	r6[408]
80012aa8:	2f cd       	sub	sp,-16
	// mavlink_msg_vfr_hud_send(mavlink_channel_t chan, float airspeed, float groundspeed, int16_t heading, uint16_t throttle, float alt, float climb)
	mavlink_msg_vfr_hud_send(MAVLINK_COMM_0, airspeed, groundspeed, 180.0*aero_attitude.rpy[2]/PI, (int)((centralData->controls.thrust+1.0)*50), -centralData->position_estimator.localPosition.pos[2], -centralData->position_estimator.vel[2]);
80012aaa:	ec f8 00 00 	ld.w	r8,r6[0]
80012aae:	70 08       	ld.w	r8,r8[0x0]
80012ab0:	f0 f8 0d 7c 	ld.w	r8,r8[3452]
80012ab4:	10 92       	mov	r2,r8
80012ab6:	ee 12 80 00 	eorh	r2,0x8000
80012aba:	ec f8 00 00 	ld.w	r8,r6[0]
80012abe:	70 08       	ld.w	r8,r8[0x0]
80012ac0:	f0 f8 0d a4 	ld.w	r8,r8[3492]
80012ac4:	10 93       	mov	r3,r8
80012ac6:	ee 13 80 00 	eorh	r3,0x8000
80012aca:	ec f8 00 00 	ld.w	r8,r6[0]
80012ace:	70 08       	ld.w	r8,r8[0x0]
80012ad0:	f0 f8 01 54 	ld.w	r8,r8[340]
80012ad4:	10 9c       	mov	r12,r8
80012ad6:	f0 16 00 02 	mcall	r6[8]
80012ada:	30 08       	mov	r8,0
80012adc:	fc 19 3f f0 	movh	r9,0x3ff0
80012ae0:	f0 16 00 05 	mcall	r6[20]
80012ae4:	14 98       	mov	r8,r10
80012ae6:	16 99       	mov	r9,r11
80012ae8:	10 9a       	mov	r10,r8
80012aea:	12 9b       	mov	r11,r9
80012aec:	30 08       	mov	r8,0
80012aee:	fc 19 40 49 	movh	r9,0x4049
80012af2:	f0 16 00 03 	mcall	r6[12]
80012af6:	14 98       	mov	r8,r10
80012af8:	16 99       	mov	r9,r11
80012afa:	10 9a       	mov	r10,r8
80012afc:	12 9b       	mov	r11,r9
80012afe:	f0 16 00 12 	mcall	r6[72]
80012b02:	18 98       	mov	r8,r12
80012b04:	5c 88       	casts.h	r8
80012b06:	eb d8 c0 10 	bfextu	r5,r8,0x0,0x10
80012b0a:	ee f8 ff f4 	ld.w	r8,r7[-12]
80012b0e:	10 9c       	mov	r12,r8
80012b10:	f0 16 00 02 	mcall	r6[8]
80012b14:	30 08       	mov	r8,0
80012b16:	e0 69 80 00 	mov	r9,32768
80012b1a:	ea 19 40 66 	orh	r9,0x4066
80012b1e:	f0 16 00 03 	mcall	r6[12]
80012b22:	14 98       	mov	r8,r10
80012b24:	16 99       	mov	r9,r11
80012b26:	10 9a       	mov	r10,r8
80012b28:	12 9b       	mov	r11,r9
80012b2a:	e0 68 2d 18 	mov	r8,11544
80012b2e:	ea 18 54 44 	orh	r8,0x5444
80012b32:	e0 69 21 fb 	mov	r9,8699
80012b36:	ea 19 40 09 	orh	r9,0x4009
80012b3a:	f0 16 00 0c 	mcall	r6[48]
80012b3e:	14 98       	mov	r8,r10
80012b40:	16 99       	mov	r9,r11
80012b42:	10 9a       	mov	r10,r8
80012b44:	12 9b       	mov	r11,r9
80012b46:	f0 16 00 12 	mcall	r6[72]
80012b4a:	18 98       	mov	r8,r12
80012b4c:	5c 88       	casts.h	r8
80012b4e:	10 99       	mov	r9,r8
80012b50:	1a d2       	st.w	--sp,r2
80012b52:	1a d3       	st.w	--sp,r3
80012b54:	0a 98       	mov	r8,r5
80012b56:	ee fa ff f8 	ld.w	r10,r7[-8]
80012b5a:	ee fb ff fc 	ld.w	r11,r7[-4]
80012b5e:	30 0c       	mov	r12,0
80012b60:	fe b0 f7 88 	rcall	80011a70 <mavlink_msg_vfr_hud_send>
80012b64:	2f ed       	sub	sp,-8

	
}
80012b66:	2f bd       	sub	sp,-20
80012b68:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
80012b6c:	80 01       	ld.sh	r1,r0[0x0]
80012b6e:	28 a2       	sub	r2,-118

80012b70 <mavlink_send_gps_raw>:

void mavlink_send_gps_raw(void) {	
80012b70:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
80012b74:	1a 97       	mov	r7,sp
80012b76:	20 4d       	sub	sp,16
80012b78:	4f d6       	lddpc	r6,80012d6c <mavlink_send_gps_raw+0x1fc>
80012b7a:	1e 26       	rsub	r6,pc
	// mavlink_msg_gps_raw_int_send(mavlink_channel_t chan, uint64_t time_usec, uint8_t fix_type, int32_t lat, int32_t lon, int32_t alt, uint16_t eph, uint16_t epv, uint16_t vel, uint16_t cog, uint8_t satellites_visible)
	if (centralData->GPS_data.status == GPS_OK)
80012b7c:	ec f8 00 00 	ld.w	r8,r6[0]
80012b80:	70 08       	ld.w	r8,r8[0x0]
80012b82:	f1 39 0b 54 	ld.ub	r9,r8[2900]
80012b86:	30 28       	mov	r8,2
80012b88:	f0 09 18 00 	cp.b	r9,r8
80012b8c:	e0 81 00 c0 	brne	80012d0c <mavlink_send_gps_raw+0x19c>
	{
		mavlink_msg_gps_raw_int_send(MAVLINK_COMM_0,1000*centralData->GPS_data.timeLastMsg, centralData->GPS_data.status, centralData->GPS_data.latitude*10000000.0, centralData->GPS_data.longitude*10000000.0, centralData->GPS_data.altitude*1000.0, centralData->GPS_data.hdop*100.0, centralData->GPS_data.speedAccuracy*100.0 ,centralData->GPS_data.groundSpeed*100.0, centralData->GPS_data.course, centralData->GPS_data.num_sats);	
80012b90:	ec f8 00 00 	ld.w	r8,r6[0]
80012b94:	70 08       	ld.w	r8,r8[0x0]
80012b96:	f1 38 0b 48 	ld.ub	r8,r8[2888]
80012b9a:	ef 48 ff f0 	st.w	r7[-16],r8
80012b9e:	ec f8 00 00 	ld.w	r8,r6[0]
80012ba2:	70 08       	ld.w	r8,r8[0x0]
80012ba4:	f0 f8 0b 34 	ld.w	r8,r8[2868]
80012ba8:	e5 a9 08 08 	cop	cp0,cr8,cr0,cr8,0x52
80012bac:	5c 88       	casts.h	r8
80012bae:	5c 78       	castu.h	r8
80012bb0:	ef 48 ff f4 	st.w	r7[-12],r8
80012bb4:	ec f8 00 00 	ld.w	r8,r6[0]
80012bb8:	70 08       	ld.w	r8,r8[0x0]
80012bba:	f0 f8 0b 24 	ld.w	r8,r8[2852]
80012bbe:	10 9c       	mov	r12,r8
80012bc0:	f0 16 00 02 	mcall	r6[8]
80012bc4:	30 08       	mov	r8,0
80012bc6:	fc 19 40 59 	movh	r9,0x4059
80012bca:	f0 16 00 03 	mcall	r6[12]
80012bce:	14 98       	mov	r8,r10
80012bd0:	16 99       	mov	r9,r11
80012bd2:	10 9a       	mov	r10,r8
80012bd4:	12 9b       	mov	r11,r9
80012bd6:	f0 16 00 74 	mcall	r6[464]
80012bda:	18 98       	mov	r8,r12
80012bdc:	5c 88       	casts.h	r8
80012bde:	5c 78       	castu.h	r8
80012be0:	ef 48 ff f8 	st.w	r7[-8],r8
80012be4:	ec f8 00 00 	ld.w	r8,r6[0]
80012be8:	70 08       	ld.w	r8,r8[0x0]
80012bea:	f0 f8 0b 40 	ld.w	r8,r8[2880]
80012bee:	10 9c       	mov	r12,r8
80012bf0:	f0 16 00 02 	mcall	r6[8]
80012bf4:	30 08       	mov	r8,0
80012bf6:	fc 19 40 59 	movh	r9,0x4059
80012bfa:	f0 16 00 03 	mcall	r6[12]
80012bfe:	14 98       	mov	r8,r10
80012c00:	16 99       	mov	r9,r11
80012c02:	10 9a       	mov	r10,r8
80012c04:	12 9b       	mov	r11,r9
80012c06:	f0 16 00 74 	mcall	r6[464]
80012c0a:	18 98       	mov	r8,r12
80012c0c:	5c 88       	casts.h	r8
80012c0e:	5c 78       	castu.h	r8
80012c10:	ef 48 ff fc 	st.w	r7[-4],r8
80012c14:	ec f8 00 00 	ld.w	r8,r6[0]
80012c18:	70 08       	ld.w	r8,r8[0x0]
80012c1a:	f1 08 0b 4a 	ld.sh	r8,r8[2890]
80012c1e:	5c 78       	castu.h	r8
80012c20:	10 9c       	mov	r12,r8
80012c22:	f0 16 00 1a 	mcall	r6[104]
80012c26:	30 08       	mov	r8,0
80012c28:	fc 19 40 59 	movh	r9,0x4059
80012c2c:	f0 16 00 03 	mcall	r6[12]
80012c30:	14 98       	mov	r8,r10
80012c32:	16 99       	mov	r9,r11
80012c34:	10 9a       	mov	r10,r8
80012c36:	12 9b       	mov	r11,r9
80012c38:	f0 16 00 74 	mcall	r6[464]
80012c3c:	18 98       	mov	r8,r12
80012c3e:	5c 88       	casts.h	r8
80012c40:	e5 d8 c0 10 	bfextu	r2,r8,0x0,0x10
80012c44:	ec f8 00 00 	ld.w	r8,r6[0]
80012c48:	70 08       	ld.w	r8,r8[0x0]
80012c4a:	f0 f8 0b 18 	ld.w	r8,r8[2840]
80012c4e:	10 9c       	mov	r12,r8
80012c50:	f0 16 00 02 	mcall	r6[8]
80012c54:	30 08       	mov	r8,0
80012c56:	e0 69 40 00 	mov	r9,16384
80012c5a:	ea 19 40 8f 	orh	r9,0x408f
80012c5e:	f0 16 00 03 	mcall	r6[12]
80012c62:	14 98       	mov	r8,r10
80012c64:	16 99       	mov	r9,r11
80012c66:	10 9a       	mov	r10,r8
80012c68:	12 9b       	mov	r11,r9
80012c6a:	f0 16 00 12 	mcall	r6[72]
80012c6e:	18 93       	mov	r3,r12
80012c70:	ec f8 00 00 	ld.w	r8,r6[0]
80012c74:	70 08       	ld.w	r8,r8[0x0]
80012c76:	f0 ea 0b 10 	ld.d	r10,r8[2832]
80012c7a:	30 08       	mov	r8,0
80012c7c:	e0 69 12 d0 	mov	r9,4816
80012c80:	ea 19 41 63 	orh	r9,0x4163
80012c84:	f0 16 00 03 	mcall	r6[12]
80012c88:	14 98       	mov	r8,r10
80012c8a:	16 99       	mov	r9,r11
80012c8c:	10 9a       	mov	r10,r8
80012c8e:	12 9b       	mov	r11,r9
80012c90:	f0 16 00 12 	mcall	r6[72]
80012c94:	18 95       	mov	r5,r12
80012c96:	ec f8 00 00 	ld.w	r8,r6[0]
80012c9a:	70 08       	ld.w	r8,r8[0x0]
80012c9c:	f0 ea 0b 08 	ld.d	r10,r8[2824]
80012ca0:	30 08       	mov	r8,0
80012ca2:	e0 69 12 d0 	mov	r9,4816
80012ca6:	ea 19 41 63 	orh	r9,0x4163
80012caa:	f0 16 00 03 	mcall	r6[12]
80012cae:	14 98       	mov	r8,r10
80012cb0:	16 99       	mov	r9,r11
80012cb2:	10 9a       	mov	r10,r8
80012cb4:	12 9b       	mov	r11,r9
80012cb6:	f0 16 00 12 	mcall	r6[72]
80012cba:	18 9a       	mov	r10,r12
80012cbc:	ec f8 00 00 	ld.w	r8,r6[0]
80012cc0:	70 08       	ld.w	r8,r8[0x0]
80012cc2:	f1 38 0b 54 	ld.ub	r8,r8[2900]
80012cc6:	10 99       	mov	r9,r8
80012cc8:	ec f8 00 00 	ld.w	r8,r6[0]
80012ccc:	70 08       	ld.w	r8,r8[0x0]
80012cce:	f0 fb 0b 4c 	ld.w	r11,r8[2892]
80012cd2:	e0 68 03 e8 	mov	r8,1000
80012cd6:	f6 08 02 48 	mul	r8,r11,r8
80012cda:	10 90       	mov	r0,r8
80012cdc:	30 01       	mov	r1,0
80012cde:	ee f8 ff f0 	ld.w	r8,r7[-16]
80012ce2:	1a d8       	st.w	--sp,r8
80012ce4:	ee f8 ff f4 	ld.w	r8,r7[-12]
80012ce8:	1a d8       	st.w	--sp,r8
80012cea:	ee f8 ff f8 	ld.w	r8,r7[-8]
80012cee:	1a d8       	st.w	--sp,r8
80012cf0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80012cf4:	1a d8       	st.w	--sp,r8
80012cf6:	1a d2       	st.w	--sp,r2
80012cf8:	1a d3       	st.w	--sp,r3
80012cfa:	1a d5       	st.w	--sp,r5
80012cfc:	14 98       	mov	r8,r10
80012cfe:	00 9a       	mov	r10,r0
80012d00:	02 9b       	mov	r11,r1
80012d02:	30 0c       	mov	r12,0
80012d04:	fe b0 f0 e8 	rcall	80010ed4 <mavlink_msg_gps_raw_int_send>
80012d08:	2f 9d       	sub	sp,-28
80012d0a:	c2 e8       	rjmp	80012d66 <mavlink_send_gps_raw+0x1f6>
	}else{
		mavlink_msg_gps_raw_int_send(MAVLINK_COMM_0,get_micros(), centralData->GPS_data.status, 46.5193*10000000, 6.56507*10000000, 400 * 1000, 0, 0 , 0, 0, centralData->GPS_data.num_sats);
80012d0c:	ec f8 00 00 	ld.w	r8,r6[0]
80012d10:	70 08       	ld.w	r8,r8[0x0]
80012d12:	f1 38 0b 48 	ld.ub	r8,r8[2888]
80012d16:	10 91       	mov	r1,r8
80012d18:	ec f8 00 00 	ld.w	r8,r6[0]
80012d1c:	70 08       	ld.w	r8,r8[0x0]
80012d1e:	f1 38 0b 54 	ld.ub	r8,r8[2900]
80012d22:	10 95       	mov	r5,r8
80012d24:	f0 16 00 27 	mcall	r6[156]
80012d28:	18 98       	mov	r8,r12
80012d2a:	10 92       	mov	r2,r8
80012d2c:	30 03       	mov	r3,0
80012d2e:	1a d1       	st.w	--sp,r1
80012d30:	30 08       	mov	r8,0
80012d32:	1a d8       	st.w	--sp,r8
80012d34:	30 08       	mov	r8,0
80012d36:	1a d8       	st.w	--sp,r8
80012d38:	30 08       	mov	r8,0
80012d3a:	1a d8       	st.w	--sp,r8
80012d3c:	30 08       	mov	r8,0
80012d3e:	1a d8       	st.w	--sp,r8
80012d40:	e6 68 1a 80 	mov	r8,400000
80012d44:	1a d8       	st.w	--sp,r8
80012d46:	e0 68 c0 0c 	mov	r8,49164
80012d4a:	ea 18 03 e9 	orh	r8,0x3e9
80012d4e:	1a d8       	st.w	--sp,r8
80012d50:	e0 68 48 28 	mov	r8,18472
80012d54:	ea 18 1b ba 	orh	r8,0x1bba
80012d58:	0a 99       	mov	r9,r5
80012d5a:	04 9a       	mov	r10,r2
80012d5c:	06 9b       	mov	r11,r3
80012d5e:	30 0c       	mov	r12,0
80012d60:	fe b0 f0 ba 	rcall	80010ed4 <mavlink_msg_gps_raw_int_send>
80012d64:	2f 9d       	sub	sp,-28
	}
}
80012d66:	2f cd       	sub	sp,-16
80012d68:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
80012d6c:	80 01       	ld.sh	r1,r0[0x0]
80012d6e:	29 fe       	sub	lr,-97
80012d70:	70 72       	ld.w	r2,r8[0x1c]
80012d72:	65 73       	ld.w	r3,r2[0x5c]
80012d74:	73 41       	ld.w	r1,r9[0x50]
80012d76:	6c 74       	ld.w	r4,r6[0x1c]
80012d78:	00 00       	add	r0,r0
80012d7a:	00 00       	add	r0,r0
80012d7c:	6c 61       	ld.w	r1,r6[0x18]
80012d7e:	73 74       	ld.w	r4,r9[0x5c]
80012d80:	41 6c       	lddsp	r12,sp[0x58]
80012d82:	74 00       	ld.w	r0,r10[0x0]
80012d84:	62 61       	ld.w	r1,r1[0x18]
80012d86:	72 6f       	ld.w	pc,r9[0x18]
80012d88:	5f 64       	srmi	r4
80012d8a:	74 00       	ld.w	r0,r10[0x0]

80012d8c <mavlink_send_pressure>:


void mavlink_send_pressure(void) {			
80012d8c:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
80012d90:	1a 97       	mov	r7,sp
80012d92:	4b 16       	lddpc	r6,80012e54 <mavlink_send_pressure+0xc8>
80012d94:	1e 26       	rsub	r6,pc
	//mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "Altitude", centralData->pressure.altitude);
	
	
	//mavlink_msg_scaled_pressure_send(mavlink_channel_t chan, uint32_t time_boot_ms, float press_abs, float press_diff, int16_t temperature)
	
	mavlink_msg_scaled_pressure_send(MAVLINK_COMM_0, get_millis(), centralData->pressure.pressure/100.0, centralData->pressure.vario_vz, centralData->pressure.temperature*100.0);
80012d96:	ec f8 00 00 	ld.w	r8,r6[0]
80012d9a:	70 08       	ld.w	r8,r8[0x0]
80012d9c:	f0 f8 10 d0 	ld.w	r8,r8[4304]
80012da0:	10 9c       	mov	r12,r8
80012da2:	f0 16 00 02 	mcall	r6[8]
80012da6:	30 08       	mov	r8,0
80012da8:	fc 19 40 59 	movh	r9,0x4059
80012dac:	f0 16 00 03 	mcall	r6[12]
80012db0:	14 98       	mov	r8,r10
80012db2:	16 99       	mov	r9,r11
80012db4:	10 9a       	mov	r10,r8
80012db6:	12 9b       	mov	r11,r9
80012db8:	f0 16 00 12 	mcall	r6[72]
80012dbc:	18 98       	mov	r8,r12
80012dbe:	5c 88       	casts.h	r8
80012dc0:	10 92       	mov	r2,r8
80012dc2:	ec f8 00 00 	ld.w	r8,r6[0]
80012dc6:	70 08       	ld.w	r8,r8[0x0]
80012dc8:	f0 f3 10 e8 	ld.w	r3,r8[4328]
80012dcc:	ec f8 00 00 	ld.w	r8,r6[0]
80012dd0:	70 08       	ld.w	r8,r8[0x0]
80012dd2:	f0 f8 10 cc 	ld.w	r8,r8[4300]
80012dd6:	fc 1b 42 c8 	movh	r11,0x42c8
80012dda:	10 9c       	mov	r12,r8
80012ddc:	f0 16 00 08 	mcall	r6[32]
80012de0:	18 98       	mov	r8,r12
80012de2:	10 95       	mov	r5,r8
80012de4:	f0 16 00 0f 	mcall	r6[60]
80012de8:	18 9b       	mov	r11,r12
80012dea:	04 98       	mov	r8,r2
80012dec:	06 99       	mov	r9,r3
80012dee:	0a 9a       	mov	r10,r5
80012df0:	30 0c       	mov	r12,0
80012df2:	fe b0 f2 0b 	rcall	80011208 <mavlink_msg_scaled_pressure_send>
	//flush_mavlink();
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0,get_millis(),"pressAlt", centralData->pressure.altitude);
80012df6:	ec f8 00 00 	ld.w	r8,r6[0]
80012dfa:	70 08       	ld.w	r8,r8[0x0]
80012dfc:	f0 f5 10 e0 	ld.w	r5,r8[4320]
80012e00:	f0 16 00 0f 	mcall	r6[60]
80012e04:	18 98       	mov	r8,r12
80012e06:	0a 99       	mov	r9,r5
80012e08:	fe ca 00 98 	sub	r10,pc,152
80012e0c:	10 9b       	mov	r11,r8
80012e0e:	30 0c       	mov	r12,0
80012e10:	fe b0 f9 40 	rcall	80012090 <mavlink_msg_named_value_float_send>
	//flush_mavlink();
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0,get_millis(),"lastAlt", centralData->position_estimator.last_alt);
80012e14:	ec f8 00 00 	ld.w	r8,r6[0]
80012e18:	70 08       	ld.w	r8,r8[0x0]
80012e1a:	f0 f5 0d 8c 	ld.w	r5,r8[3468]
80012e1e:	f0 16 00 0f 	mcall	r6[60]
80012e22:	18 98       	mov	r8,r12
80012e24:	0a 99       	mov	r9,r5
80012e26:	fe ca 00 aa 	sub	r10,pc,170
80012e2a:	10 9b       	mov	r11,r8
80012e2c:	30 0c       	mov	r12,0
80012e2e:	fe b0 f9 31 	rcall	80012090 <mavlink_msg_named_value_float_send>
	//flush_mavlink();
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0,get_millis(),"baro_dt", centralData->pressure.dt);
80012e32:	ec f8 00 00 	ld.w	r8,r6[0]
80012e36:	70 08       	ld.w	r8,r8[0x0]
80012e38:	f0 f5 10 f8 	ld.w	r5,r8[4344]
80012e3c:	f0 16 00 0f 	mcall	r6[60]
80012e40:	18 98       	mov	r8,r12
80012e42:	0a 99       	mov	r9,r5
80012e44:	fe ca 00 c0 	sub	r10,pc,192
80012e48:	10 9b       	mov	r11,r8
80012e4a:	30 0c       	mov	r12,0
80012e4c:	fe b0 f9 22 	rcall	80012090 <mavlink_msg_named_value_float_send>
	//flush_mavlink();
	//mavlink_msg_named_value_float_send(MAVLINK_COMM_0,get_millis(),"pressFilt", centralData->altitude_filtered);
}
80012e50:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
80012e54:	80 01       	ld.sh	r1,r0[0x0]
80012e56:	2c 18       	sub	r8,-63
80012e58:	52 61       	stdsp	sp[0x98],r1
80012e5a:	64 61       	ld.w	r1,r2[0x18]
80012e5c:	72 5f       	ld.w	pc,r9[0x14]
80012e5e:	76 65       	ld.w	r5,r11[0x18]
80012e60:	6c 6f       	ld.w	pc,r6[0x18]
80012e62:	63 69       	ld.w	r9,r1[0x58]
80012e64:	74 79       	ld.w	r9,r10[0x1c]
80012e66:	00 00       	add	r0,r0
80012e68:	52 61       	stdsp	sp[0x98],r1
80012e6a:	64 61       	ld.w	r1,r2[0x18]
80012e6c:	72 5f       	ld.w	pc,r9[0x14]
80012e6e:	61 6d       	ld.w	sp,r0[0x58]
80012e70:	70 6c       	ld.w	r12,r8[0x18]
80012e72:	69 74       	ld.w	r4,r4[0x5c]
80012e74:	75 64       	ld.w	r4,r10[0x58]
80012e76:	65 00       	ld.w	r0,r2[0x40]

80012e78 <mavlink_send_radar>:

void mavlink_send_radar(void) {
80012e78:	eb cd 40 e0 	pushm	r5-r7,lr
80012e7c:	1a 97       	mov	r7,sp
80012e7e:	20 1d       	sub	sp,4
80012e80:	49 76       	lddpc	r6,80012edc <mavlink_send_radar+0x64>
80012e82:	1e 26       	rsub	r6,pc
	read_radar();
80012e84:	f0 16 01 97 	mcall	r6[1628]
	radar_target *target=get_radar_main_target();
80012e88:	f0 16 01 a1 	mcall	r6[1668]
80012e8c:	18 98       	mov	r8,r12
80012e8e:	ef 48 ff fc 	st.w	r7[-4],r8
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "Radar_velocity", target->velocity);
80012e92:	ee f8 ff fc 	ld.w	r8,r7[-4]
80012e96:	70 05       	ld.w	r5,r8[0x0]
80012e98:	f0 16 00 0f 	mcall	r6[60]
80012e9c:	18 98       	mov	r8,r12
80012e9e:	0a 99       	mov	r9,r5
80012ea0:	fe ca 00 48 	sub	r10,pc,72
80012ea4:	10 9b       	mov	r11,r8
80012ea6:	30 0c       	mov	r12,0
80012ea8:	fe b0 f8 f4 	rcall	80012090 <mavlink_msg_named_value_float_send>
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "Radar_amplitude", target->amplitude/1000.0);
80012eac:	ee f8 ff fc 	ld.w	r8,r7[-4]
80012eb0:	70 18       	ld.w	r8,r8[0x4]
80012eb2:	fc 1b 44 7a 	movh	r11,0x447a
80012eb6:	10 9c       	mov	r12,r8
80012eb8:	f0 16 00 08 	mcall	r6[32]
80012ebc:	18 98       	mov	r8,r12
80012ebe:	10 95       	mov	r5,r8
80012ec0:	f0 16 00 0f 	mcall	r6[60]
80012ec4:	18 98       	mov	r8,r12
80012ec6:	0a 99       	mov	r9,r5
80012ec8:	fe ca 00 60 	sub	r10,pc,96
80012ecc:	10 9b       	mov	r11,r8
80012ece:	30 0c       	mov	r12,0
80012ed0:	fe b0 f8 e0 	rcall	80012090 <mavlink_msg_named_value_float_send>
}
80012ed4:	2f fd       	sub	sp,-4
80012ed6:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80012eda:	00 00       	add	r0,r0
80012edc:	80 01       	ld.sh	r1,r0[0x0]
80012ede:	2d 06       	sub	r6,-48

80012ee0 <mavlink_send_estimator>:

void mavlink_send_estimator(void)
{
80012ee0:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
80012ee4:	1a 97       	mov	r7,sp
80012ee6:	20 1d       	sub	sp,4
80012ee8:	49 a6       	lddpc	r6,80012f50 <mavlink_send_estimator+0x70>
80012eea:	1e 26       	rsub	r6,pc
	//mavlink_msg_local_position_ned_send(mavlink_channel_t chan, uint32_t time_boot_ms, float x, float y, float z, float vx, float vy, float vz)
	//mavlink_msg_local_position_ned_send(MAVLINK_COMM_0, get_millis(), centralData->estimation.state[0][0], centralData->estimation.state[1][0], centralData->estimation.state[2][0], centralData->estimation.state[0][1], centralData->estimation.state[1][1], centralData->estimation.state[2][1]);
	mavlink_msg_local_position_ned_send(MAVLINK_COMM_0, get_millis(), centralData->position_estimator.localPosition.pos[0], centralData->position_estimator.localPosition.pos[1], centralData->position_estimator.localPosition.pos[2], centralData->position_estimator.vel[0], centralData->position_estimator.vel[1], centralData->position_estimator.vel[2]);
80012eec:	ec f8 00 00 	ld.w	r8,r6[0]
80012ef0:	70 08       	ld.w	r8,r8[0x0]
80012ef2:	f0 f8 0d 7c 	ld.w	r8,r8[3452]
80012ef6:	ef 48 ff fc 	st.w	r7[-4],r8
80012efa:	ec f8 00 00 	ld.w	r8,r6[0]
80012efe:	70 08       	ld.w	r8,r8[0x0]
80012f00:	f0 f0 0d 78 	ld.w	r0,r8[3448]
80012f04:	ec f8 00 00 	ld.w	r8,r6[0]
80012f08:	70 08       	ld.w	r8,r8[0x0]
80012f0a:	f0 f1 0d 74 	ld.w	r1,r8[3444]
80012f0e:	ec f8 00 00 	ld.w	r8,r6[0]
80012f12:	70 08       	ld.w	r8,r8[0x0]
80012f14:	f0 f2 0d a4 	ld.w	r2,r8[3492]
80012f18:	ec f8 00 00 	ld.w	r8,r6[0]
80012f1c:	70 08       	ld.w	r8,r8[0x0]
80012f1e:	f0 f3 0d a0 	ld.w	r3,r8[3488]
80012f22:	ec f8 00 00 	ld.w	r8,r6[0]
80012f26:	70 08       	ld.w	r8,r8[0x0]
80012f28:	f0 f5 0d 9c 	ld.w	r5,r8[3484]
80012f2c:	f0 16 00 0f 	mcall	r6[60]
80012f30:	18 9b       	mov	r11,r12
80012f32:	ee f8 ff fc 	ld.w	r8,r7[-4]
80012f36:	1a d8       	st.w	--sp,r8
80012f38:	1a d0       	st.w	--sp,r0
80012f3a:	1a d1       	st.w	--sp,r1
80012f3c:	04 98       	mov	r8,r2
80012f3e:	06 99       	mov	r9,r3
80012f40:	0a 9a       	mov	r10,r5
80012f42:	30 0c       	mov	r12,0
80012f44:	fe b0 f2 6a 	rcall	80011418 <mavlink_msg_local_position_ned_send>
80012f48:	2f dd       	sub	sp,-12
	//dbg_print(", ");
	//dbg_print_num(centralData->position_estimator.localPosition.pos[Y],10);
	//dbg_print(", ");
	//dbg_print_num(centralData->position_estimator.localPosition.pos[Z],10);
	//dbg_print(")\n");
}
80012f4a:	2f fd       	sub	sp,-4
80012f4c:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
80012f50:	80 01       	ld.sh	r1,r0[0x0]
80012f52:	2d 6e       	sub	lr,-42
80012f54:	65 73       	ld.w	r3,r2[0x5c]
80012f56:	74 69       	ld.w	r9,r10[0x18]
80012f58:	58 00       	cp.w	r0,0
80012f5a:	00 00       	add	r0,r0
80012f5c:	65 73       	ld.w	r3,r2[0x5c]
80012f5e:	74 69       	ld.w	r9,r10[0x18]
80012f60:	59 00       	cp.w	r0,16
80012f62:	00 00       	add	r0,r0
80012f64:	65 73       	ld.w	r3,r2[0x5c]
80012f66:	74 69       	ld.w	r9,r10[0x18]
80012f68:	5a 00       	cp.w	r0,-32
80012f6a:	00 00       	add	r0,r0
80012f6c:	65 73       	ld.w	r3,r2[0x5c]
80012f6e:	74 69       	ld.w	r9,r10[0x18]
80012f70:	56 78       	stdsp	sp[0x19c],r8
80012f72:	00 00       	add	r0,r0
80012f74:	65 73       	ld.w	r3,r2[0x5c]
80012f76:	74 69       	ld.w	r9,r10[0x18]
80012f78:	56 79       	stdsp	sp[0x19c],r9
80012f7a:	00 00       	add	r0,r0
80012f7c:	65 73       	ld.w	r3,r2[0x5c]
80012f7e:	74 69       	ld.w	r9,r10[0x18]
80012f80:	56 7a       	stdsp	sp[0x19c],r10
80012f82:	00 00       	add	r0,r0
80012f84:	65 73       	ld.w	r3,r2[0x5c]
80012f86:	74 69       	ld.w	r9,r10[0x18]
80012f88:	62 69       	ld.w	r9,r1[0x18]
80012f8a:	61 69       	ld.w	r9,r0[0x58]
80012f8c:	73 58       	ld.w	r8,r9[0x54]
80012f8e:	00 00       	add	r0,r0
80012f90:	65 73       	ld.w	r3,r2[0x5c]
80012f92:	74 69       	ld.w	r9,r10[0x18]
80012f94:	62 69       	ld.w	r9,r1[0x18]
80012f96:	61 69       	ld.w	r9,r0[0x58]
80012f98:	73 59       	ld.w	r9,r9[0x54]
80012f9a:	00 00       	add	r0,r0
80012f9c:	65 73       	ld.w	r3,r2[0x5c]
80012f9e:	74 69       	ld.w	r9,r10[0x18]
80012fa0:	62 69       	ld.w	r9,r1[0x18]
80012fa2:	61 69       	ld.w	r9,r0[0x58]
80012fa4:	73 5a       	ld.w	r10,r9[0x54]
	...

80012fa8 <mavlink_send_kalman_estimator>:

void mavlink_send_kalman_estimator(void)
{
80012fa8:	eb cd 40 e0 	pushm	r5-r7,lr
80012fac:	1a 97       	mov	r7,sp
80012fae:	4d d6       	lddpc	r6,80013120 <mavlink_send_kalman_estimator+0x178>
80012fb0:	1e 26       	rsub	r6,pc
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "estiX", centralData->estimation.state[X][POSITION]);
80012fb2:	ec f8 00 00 	ld.w	r8,r6[0]
80012fb6:	70 08       	ld.w	r8,r8[0x0]
80012fb8:	f0 e8 0b 5c 	ld.d	r8,r8[2908]
80012fbc:	10 9a       	mov	r10,r8
80012fbe:	12 9b       	mov	r11,r9
80012fc0:	f0 16 00 09 	mcall	r6[36]
80012fc4:	18 95       	mov	r5,r12
80012fc6:	f0 16 00 0f 	mcall	r6[60]
80012fca:	18 98       	mov	r8,r12
80012fcc:	0a 99       	mov	r9,r5
80012fce:	fe ca 00 7a 	sub	r10,pc,122
80012fd2:	10 9b       	mov	r11,r8
80012fd4:	30 0c       	mov	r12,0
80012fd6:	fe b0 f8 5d 	rcall	80012090 <mavlink_msg_named_value_float_send>
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "estiY", centralData->estimation.state[Y][POSITION]);
80012fda:	ec f8 00 00 	ld.w	r8,r6[0]
80012fde:	70 08       	ld.w	r8,r8[0x0]
80012fe0:	f0 e8 0b 74 	ld.d	r8,r8[2932]
80012fe4:	10 9a       	mov	r10,r8
80012fe6:	12 9b       	mov	r11,r9
80012fe8:	f0 16 00 09 	mcall	r6[36]
80012fec:	18 95       	mov	r5,r12
80012fee:	f0 16 00 0f 	mcall	r6[60]
80012ff2:	18 98       	mov	r8,r12
80012ff4:	0a 99       	mov	r9,r5
80012ff6:	fe ca 00 9a 	sub	r10,pc,154
80012ffa:	10 9b       	mov	r11,r8
80012ffc:	30 0c       	mov	r12,0
80012ffe:	fe b0 f8 49 	rcall	80012090 <mavlink_msg_named_value_float_send>
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "estiZ", centralData->estimation.state[Z][POSITION]);
80013002:	ec f8 00 00 	ld.w	r8,r6[0]
80013006:	70 08       	ld.w	r8,r8[0x0]
80013008:	f0 e8 0b 8c 	ld.d	r8,r8[2956]
8001300c:	10 9a       	mov	r10,r8
8001300e:	12 9b       	mov	r11,r9
80013010:	f0 16 00 09 	mcall	r6[36]
80013014:	18 95       	mov	r5,r12
80013016:	f0 16 00 0f 	mcall	r6[60]
8001301a:	18 98       	mov	r8,r12
8001301c:	0a 99       	mov	r9,r5
8001301e:	fe ca 00 ba 	sub	r10,pc,186
80013022:	10 9b       	mov	r11,r8
80013024:	30 0c       	mov	r12,0
80013026:	fe b0 f8 35 	rcall	80012090 <mavlink_msg_named_value_float_send>
	
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "estiVx", centralData->estimation.state[X][SPEED]);
8001302a:	ec f8 00 00 	ld.w	r8,r6[0]
8001302e:	70 08       	ld.w	r8,r8[0x0]
80013030:	f0 e8 0b 64 	ld.d	r8,r8[2916]
80013034:	10 9a       	mov	r10,r8
80013036:	12 9b       	mov	r11,r9
80013038:	f0 16 00 09 	mcall	r6[36]
8001303c:	18 95       	mov	r5,r12
8001303e:	f0 16 00 0f 	mcall	r6[60]
80013042:	18 98       	mov	r8,r12
80013044:	0a 99       	mov	r9,r5
80013046:	fe ca 00 da 	sub	r10,pc,218
8001304a:	10 9b       	mov	r11,r8
8001304c:	30 0c       	mov	r12,0
8001304e:	fe b0 f8 21 	rcall	80012090 <mavlink_msg_named_value_float_send>
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "estiVy", centralData->estimation.state[Y][SPEED]);
80013052:	ec f8 00 00 	ld.w	r8,r6[0]
80013056:	70 08       	ld.w	r8,r8[0x0]
80013058:	f0 e8 0b 7c 	ld.d	r8,r8[2940]
8001305c:	10 9a       	mov	r10,r8
8001305e:	12 9b       	mov	r11,r9
80013060:	f0 16 00 09 	mcall	r6[36]
80013064:	18 95       	mov	r5,r12
80013066:	f0 16 00 0f 	mcall	r6[60]
8001306a:	18 98       	mov	r8,r12
8001306c:	0a 99       	mov	r9,r5
8001306e:	fe ca 00 fa 	sub	r10,pc,250
80013072:	10 9b       	mov	r11,r8
80013074:	30 0c       	mov	r12,0
80013076:	fe b0 f8 0d 	rcall	80012090 <mavlink_msg_named_value_float_send>
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "estiVz", centralData->estimation.state[Z][SPEED]);
8001307a:	ec f8 00 00 	ld.w	r8,r6[0]
8001307e:	70 08       	ld.w	r8,r8[0x0]
80013080:	f0 e8 0b 94 	ld.d	r8,r8[2964]
80013084:	10 9a       	mov	r10,r8
80013086:	12 9b       	mov	r11,r9
80013088:	f0 16 00 09 	mcall	r6[36]
8001308c:	18 95       	mov	r5,r12
8001308e:	f0 16 00 0f 	mcall	r6[60]
80013092:	18 98       	mov	r8,r12
80013094:	0a 99       	mov	r9,r5
80013096:	fe ca 01 1a 	sub	r10,pc,282
8001309a:	10 9b       	mov	r11,r8
8001309c:	30 0c       	mov	r12,0
8001309e:	fe b0 f7 f9 	rcall	80012090 <mavlink_msg_named_value_float_send>
	
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "estibiaisX", centralData->estimation.state[X][BIAIS]);
800130a2:	ec f8 00 00 	ld.w	r8,r6[0]
800130a6:	70 08       	ld.w	r8,r8[0x0]
800130a8:	f0 e8 0b 6c 	ld.d	r8,r8[2924]
800130ac:	10 9a       	mov	r10,r8
800130ae:	12 9b       	mov	r11,r9
800130b0:	f0 16 00 09 	mcall	r6[36]
800130b4:	18 95       	mov	r5,r12
800130b6:	f0 16 00 0f 	mcall	r6[60]
800130ba:	18 98       	mov	r8,r12
800130bc:	0a 99       	mov	r9,r5
800130be:	fe ca 01 3a 	sub	r10,pc,314
800130c2:	10 9b       	mov	r11,r8
800130c4:	30 0c       	mov	r12,0
800130c6:	fe b0 f7 e5 	rcall	80012090 <mavlink_msg_named_value_float_send>
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "estibiaisY", centralData->estimation.state[Y][BIAIS]);
800130ca:	ec f8 00 00 	ld.w	r8,r6[0]
800130ce:	70 08       	ld.w	r8,r8[0x0]
800130d0:	f0 e8 0b 84 	ld.d	r8,r8[2948]
800130d4:	10 9a       	mov	r10,r8
800130d6:	12 9b       	mov	r11,r9
800130d8:	f0 16 00 09 	mcall	r6[36]
800130dc:	18 95       	mov	r5,r12
800130de:	f0 16 00 0f 	mcall	r6[60]
800130e2:	18 98       	mov	r8,r12
800130e4:	0a 99       	mov	r9,r5
800130e6:	fe ca 01 56 	sub	r10,pc,342
800130ea:	10 9b       	mov	r11,r8
800130ec:	30 0c       	mov	r12,0
800130ee:	fe b0 f7 d1 	rcall	80012090 <mavlink_msg_named_value_float_send>
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "estibiaisZ", centralData->estimation.state[Z][BIAIS]);
800130f2:	ec f8 00 00 	ld.w	r8,r6[0]
800130f6:	70 08       	ld.w	r8,r8[0x0]
800130f8:	f0 e8 0b 9c 	ld.d	r8,r8[2972]
800130fc:	10 9a       	mov	r10,r8
800130fe:	12 9b       	mov	r11,r9
80013100:	f0 16 00 09 	mcall	r6[36]
80013104:	18 95       	mov	r5,r12
80013106:	f0 16 00 0f 	mcall	r6[60]
8001310a:	18 98       	mov	r8,r12
8001310c:	0a 99       	mov	r9,r5
8001310e:	fe ca 01 72 	sub	r10,pc,370
80013112:	10 9b       	mov	r11,r8
80013114:	30 0c       	mov	r12,0
80013116:	fe b0 f7 bd 	rcall	80012090 <mavlink_msg_named_value_float_send>
	//mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "acc_bfZ", centralData->position_estimator.vel_bf[Y]);
	//mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "acc_bfZ", centralData->position_estimator.vel_bf[Z]);
	
	//mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "estiDeltaT", centralData->estimation.delta_t_filter);
	//mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "imuDeltaT", centralData->imu1.dt);
}
8001311a:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8001311e:	00 00       	add	r0,r0
80013120:	80 01       	ld.sh	r1,r0[0x0]
80013122:	2e 34       	sub	r4,-29

80013124 <mavlink_send_raw_rc_channels>:
void mavlink_send_raw_rc_channels(void)
{
80013124:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
80013128:	1a 97       	mov	r7,sp
8001312a:	20 4d       	sub	sp,16
8001312c:	4b 86       	lddpc	r6,8001320c <mavlink_send_raw_rc_channels+0xe8>
8001312e:	1e 26       	rsub	r6,pc
	rc_get_channel(3)+1000,
	rc_get_channel(4)+1000,
	rc_get_channel(5)+1000,
	rc_get_channel(6)+1000,
	rc_get_channel(7)+1000,
	rc_check_receivers());
80013130:	f0 16 00 9e 	mcall	r6[632]
80013134:	18 98       	mov	r8,r12
80013136:	5c 58       	castu.b	r8
	//mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "estiDeltaT", centralData->estimation.delta_t_filter);
	//mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "imuDeltaT", centralData->imu1.dt);
}
void mavlink_send_raw_rc_channels(void)
{
	mavlink_msg_rc_channels_raw_send(MAVLINK_COMM_0,get_millis(),1,
80013138:	5c 58       	castu.b	r8
8001313a:	ef 48 ff f0 	st.w	r7[-16],r8
8001313e:	30 7c       	mov	r12,7
80013140:	f0 16 00 1b 	mcall	r6[108]
80013144:	18 98       	mov	r8,r12
80013146:	f0 c8 fc 18 	sub	r8,r8,-1000
8001314a:	5c 88       	casts.h	r8
8001314c:	5c 78       	castu.h	r8
8001314e:	ef 48 ff f4 	st.w	r7[-12],r8
80013152:	30 6c       	mov	r12,6
80013154:	f0 16 00 1b 	mcall	r6[108]
80013158:	18 98       	mov	r8,r12
8001315a:	f0 c8 fc 18 	sub	r8,r8,-1000
8001315e:	5c 88       	casts.h	r8
80013160:	5c 78       	castu.h	r8
80013162:	ef 48 ff f8 	st.w	r7[-8],r8
80013166:	30 5c       	mov	r12,5
80013168:	f0 16 00 1b 	mcall	r6[108]
8001316c:	18 98       	mov	r8,r12
8001316e:	f0 c8 fc 18 	sub	r8,r8,-1000
80013172:	5c 88       	casts.h	r8
80013174:	5c 78       	castu.h	r8
80013176:	ef 48 ff fc 	st.w	r7[-4],r8
8001317a:	30 4c       	mov	r12,4
8001317c:	f0 16 00 1b 	mcall	r6[108]
80013180:	18 98       	mov	r8,r12
80013182:	f0 c8 fc 18 	sub	r8,r8,-1000
80013186:	5c 88       	casts.h	r8
80013188:	e1 d8 c0 10 	bfextu	r0,r8,0x0,0x10
8001318c:	30 3c       	mov	r12,3
8001318e:	f0 16 00 1b 	mcall	r6[108]
80013192:	18 98       	mov	r8,r12
80013194:	f0 c8 fc 18 	sub	r8,r8,-1000
80013198:	5c 88       	casts.h	r8
8001319a:	e3 d8 c0 10 	bfextu	r1,r8,0x0,0x10
8001319e:	30 2c       	mov	r12,2
800131a0:	f0 16 00 1b 	mcall	r6[108]
800131a4:	18 98       	mov	r8,r12
800131a6:	f0 c8 fc 18 	sub	r8,r8,-1000
800131aa:	5c 88       	casts.h	r8
800131ac:	e5 d8 c0 10 	bfextu	r2,r8,0x0,0x10
800131b0:	30 1c       	mov	r12,1
800131b2:	f0 16 00 1b 	mcall	r6[108]
800131b6:	18 98       	mov	r8,r12
800131b8:	f0 c8 fc 18 	sub	r8,r8,-1000
800131bc:	5c 88       	casts.h	r8
800131be:	e7 d8 c0 10 	bfextu	r3,r8,0x0,0x10
800131c2:	30 0c       	mov	r12,0
800131c4:	f0 16 00 1b 	mcall	r6[108]
800131c8:	18 98       	mov	r8,r12
800131ca:	f0 c8 fc 18 	sub	r8,r8,-1000
800131ce:	5c 88       	casts.h	r8
800131d0:	eb d8 c0 10 	bfextu	r5,r8,0x0,0x10
800131d4:	f0 16 00 0f 	mcall	r6[60]
800131d8:	18 9b       	mov	r11,r12
800131da:	ee f8 ff f0 	ld.w	r8,r7[-16]
800131de:	1a d8       	st.w	--sp,r8
800131e0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800131e4:	1a d8       	st.w	--sp,r8
800131e6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800131ea:	1a d8       	st.w	--sp,r8
800131ec:	ee f8 ff fc 	ld.w	r8,r7[-4]
800131f0:	1a d8       	st.w	--sp,r8
800131f2:	1a d0       	st.w	--sp,r0
800131f4:	1a d1       	st.w	--sp,r1
800131f6:	1a d2       	st.w	--sp,r2
800131f8:	06 98       	mov	r8,r3
800131fa:	0a 99       	mov	r9,r5
800131fc:	30 1a       	mov	r10,1
800131fe:	30 0c       	mov	r12,0
80013200:	fe b0 f2 7c 	rcall	800116f8 <mavlink_msg_rc_channels_raw_send>
80013204:	2f 9d       	sub	sp,-28
	rc_get_channel(4)+1000,
	rc_get_channel(5)+1000,
	rc_get_channel(6)+1000,
	rc_get_channel(7)+1000,
	rc_check_receivers());
}
80013206:	2f cd       	sub	sp,-16
80013208:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
8001320c:	80 01       	ld.sh	r1,r0[0x0]
8001320e:	2f b2       	sub	r2,-5
80013210:	43 6f       	lddsp	pc,sp[0xd8]
80013212:	6c 6c       	ld.w	r12,r6[0x18]
80013214:	5f 41       	srge	r1
80013216:	76 6f       	ld.w	pc,r11[0x18]
80013218:	69 64       	ld.w	r4,r4[0x58]
8001321a:	61 6e       	ld.w	lr,r0[0x58]
8001321c:	63 65       	ld.w	r5,r1[0x58]
	...

80013220 <mavlink_send_scaled_rc_channels>:

void mavlink_send_scaled_rc_channels(void)
{
80013220:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
80013224:	1a 97       	mov	r7,sp
80013226:	20 4d       	sub	sp,16
80013228:	fe f6 02 94 	ld.w	r6,pc[660]
8001322c:	1e 26       	rsub	r6,pc
	rc_get_channel(3) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(4) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(5) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(6) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(7) * 1000.0 * RC_SCALEFACTOR,
	rc_check_receivers());
8001322e:	f0 16 00 9e 	mcall	r6[632]
80013232:	18 98       	mov	r8,r12
80013234:	5c 58       	castu.b	r8
	rc_check_receivers());
}

void mavlink_send_scaled_rc_channels(void)
{
	mavlink_msg_rc_channels_scaled_send(MAVLINK_COMM_0,get_millis(),1,
80013236:	5c 58       	castu.b	r8
80013238:	ef 48 ff f0 	st.w	r7[-16],r8
	rc_get_channel(2) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(3) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(4) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(5) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(6) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(7) * 1000.0 * RC_SCALEFACTOR,
8001323c:	30 7c       	mov	r12,7
8001323e:	f0 16 00 1b 	mcall	r6[108]
80013242:	18 98       	mov	r8,r12
80013244:	10 9c       	mov	r12,r8
80013246:	f0 16 00 1a 	mcall	r6[104]
8001324a:	30 08       	mov	r8,0
8001324c:	e0 69 40 00 	mov	r9,16384
80013250:	ea 19 40 8f 	orh	r9,0x408f
80013254:	f0 16 00 03 	mcall	r6[12]
80013258:	14 98       	mov	r8,r10
8001325a:	16 99       	mov	r9,r11
8001325c:	10 9a       	mov	r10,r8
8001325e:	12 9b       	mov	r11,r9
80013260:	30 08       	mov	r8,0
80013262:	e0 69 60 00 	mov	r9,24576
80013266:	ea 19 40 7b 	orh	r9,0x407b
8001326a:	f0 16 00 0c 	mcall	r6[48]
8001326e:	14 98       	mov	r8,r10
80013270:	16 99       	mov	r9,r11
	rc_check_receivers());
}

void mavlink_send_scaled_rc_channels(void)
{
	mavlink_msg_rc_channels_scaled_send(MAVLINK_COMM_0,get_millis(),1,
80013272:	10 9a       	mov	r10,r8
80013274:	12 9b       	mov	r11,r9
80013276:	f0 16 00 12 	mcall	r6[72]
8001327a:	18 98       	mov	r8,r12
8001327c:	5c 88       	casts.h	r8
8001327e:	ef 48 ff f4 	st.w	r7[-12],r8
	rc_get_channel(1) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(2) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(3) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(4) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(5) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(6) * 1000.0 * RC_SCALEFACTOR,
80013282:	30 6c       	mov	r12,6
80013284:	f0 16 00 1b 	mcall	r6[108]
80013288:	18 98       	mov	r8,r12
8001328a:	10 9c       	mov	r12,r8
8001328c:	f0 16 00 1a 	mcall	r6[104]
80013290:	30 08       	mov	r8,0
80013292:	e0 69 40 00 	mov	r9,16384
80013296:	ea 19 40 8f 	orh	r9,0x408f
8001329a:	f0 16 00 03 	mcall	r6[12]
8001329e:	14 98       	mov	r8,r10
800132a0:	16 99       	mov	r9,r11
800132a2:	10 9a       	mov	r10,r8
800132a4:	12 9b       	mov	r11,r9
800132a6:	30 08       	mov	r8,0
800132a8:	e0 69 60 00 	mov	r9,24576
800132ac:	ea 19 40 7b 	orh	r9,0x407b
800132b0:	f0 16 00 0c 	mcall	r6[48]
800132b4:	14 98       	mov	r8,r10
800132b6:	16 99       	mov	r9,r11
	rc_check_receivers());
}

void mavlink_send_scaled_rc_channels(void)
{
	mavlink_msg_rc_channels_scaled_send(MAVLINK_COMM_0,get_millis(),1,
800132b8:	10 9a       	mov	r10,r8
800132ba:	12 9b       	mov	r11,r9
800132bc:	f0 16 00 12 	mcall	r6[72]
800132c0:	18 98       	mov	r8,r12
800132c2:	5c 88       	casts.h	r8
800132c4:	ef 48 ff f8 	st.w	r7[-8],r8
	rc_get_channel(0) * 1000.0 * RC_SCALEFACTOR ,
	rc_get_channel(1) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(2) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(3) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(4) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(5) * 1000.0 * RC_SCALEFACTOR,
800132c8:	30 5c       	mov	r12,5
800132ca:	f0 16 00 1b 	mcall	r6[108]
800132ce:	18 98       	mov	r8,r12
800132d0:	10 9c       	mov	r12,r8
800132d2:	f0 16 00 1a 	mcall	r6[104]
800132d6:	30 08       	mov	r8,0
800132d8:	e0 69 40 00 	mov	r9,16384
800132dc:	ea 19 40 8f 	orh	r9,0x408f
800132e0:	f0 16 00 03 	mcall	r6[12]
800132e4:	14 98       	mov	r8,r10
800132e6:	16 99       	mov	r9,r11
800132e8:	10 9a       	mov	r10,r8
800132ea:	12 9b       	mov	r11,r9
800132ec:	30 08       	mov	r8,0
800132ee:	e0 69 60 00 	mov	r9,24576
800132f2:	ea 19 40 7b 	orh	r9,0x407b
800132f6:	f0 16 00 0c 	mcall	r6[48]
800132fa:	14 98       	mov	r8,r10
800132fc:	16 99       	mov	r9,r11
	rc_check_receivers());
}

void mavlink_send_scaled_rc_channels(void)
{
	mavlink_msg_rc_channels_scaled_send(MAVLINK_COMM_0,get_millis(),1,
800132fe:	10 9a       	mov	r10,r8
80013300:	12 9b       	mov	r11,r9
80013302:	f0 16 00 12 	mcall	r6[72]
80013306:	18 98       	mov	r8,r12
80013308:	5c 88       	casts.h	r8
8001330a:	ef 48 ff fc 	st.w	r7[-4],r8
	rc_get_channel(0) * 1000.0 * RC_SCALEFACTOR ,
	rc_get_channel(1) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(2) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(3) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(4) * 1000.0 * RC_SCALEFACTOR,
8001330e:	30 4c       	mov	r12,4
80013310:	f0 16 00 1b 	mcall	r6[108]
80013314:	18 98       	mov	r8,r12
80013316:	10 9c       	mov	r12,r8
80013318:	f0 16 00 1a 	mcall	r6[104]
8001331c:	30 08       	mov	r8,0
8001331e:	e0 69 40 00 	mov	r9,16384
80013322:	ea 19 40 8f 	orh	r9,0x408f
80013326:	f0 16 00 03 	mcall	r6[12]
8001332a:	14 98       	mov	r8,r10
8001332c:	16 99       	mov	r9,r11
8001332e:	10 9a       	mov	r10,r8
80013330:	12 9b       	mov	r11,r9
80013332:	30 08       	mov	r8,0
80013334:	e0 69 60 00 	mov	r9,24576
80013338:	ea 19 40 7b 	orh	r9,0x407b
8001333c:	f0 16 00 0c 	mcall	r6[48]
80013340:	14 98       	mov	r8,r10
80013342:	16 99       	mov	r9,r11
	rc_check_receivers());
}

void mavlink_send_scaled_rc_channels(void)
{
	mavlink_msg_rc_channels_scaled_send(MAVLINK_COMM_0,get_millis(),1,
80013344:	10 9a       	mov	r10,r8
80013346:	12 9b       	mov	r11,r9
80013348:	f0 16 00 12 	mcall	r6[72]
8001334c:	18 98       	mov	r8,r12
8001334e:	5c 88       	casts.h	r8
80013350:	10 90       	mov	r0,r8
	rc_get_channel(0) * 1000.0 * RC_SCALEFACTOR ,
	rc_get_channel(1) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(2) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(3) * 1000.0 * RC_SCALEFACTOR,
80013352:	30 3c       	mov	r12,3
80013354:	f0 16 00 1b 	mcall	r6[108]
80013358:	18 98       	mov	r8,r12
8001335a:	10 9c       	mov	r12,r8
8001335c:	f0 16 00 1a 	mcall	r6[104]
80013360:	30 08       	mov	r8,0
80013362:	e0 69 40 00 	mov	r9,16384
80013366:	ea 19 40 8f 	orh	r9,0x408f
8001336a:	f0 16 00 03 	mcall	r6[12]
8001336e:	14 98       	mov	r8,r10
80013370:	16 99       	mov	r9,r11
80013372:	10 9a       	mov	r10,r8
80013374:	12 9b       	mov	r11,r9
80013376:	30 08       	mov	r8,0
80013378:	e0 69 60 00 	mov	r9,24576
8001337c:	ea 19 40 7b 	orh	r9,0x407b
80013380:	f0 16 00 0c 	mcall	r6[48]
80013384:	14 98       	mov	r8,r10
80013386:	16 99       	mov	r9,r11
	rc_check_receivers());
}

void mavlink_send_scaled_rc_channels(void)
{
	mavlink_msg_rc_channels_scaled_send(MAVLINK_COMM_0,get_millis(),1,
80013388:	10 9a       	mov	r10,r8
8001338a:	12 9b       	mov	r11,r9
8001338c:	f0 16 00 12 	mcall	r6[72]
80013390:	18 98       	mov	r8,r12
80013392:	5c 88       	casts.h	r8
80013394:	10 91       	mov	r1,r8
	rc_get_channel(0) * 1000.0 * RC_SCALEFACTOR ,
	rc_get_channel(1) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(2) * 1000.0 * RC_SCALEFACTOR,
80013396:	30 2c       	mov	r12,2
80013398:	f0 16 00 1b 	mcall	r6[108]
8001339c:	18 98       	mov	r8,r12
8001339e:	10 9c       	mov	r12,r8
800133a0:	f0 16 00 1a 	mcall	r6[104]
800133a4:	30 08       	mov	r8,0
800133a6:	e0 69 40 00 	mov	r9,16384
800133aa:	ea 19 40 8f 	orh	r9,0x408f
800133ae:	f0 16 00 03 	mcall	r6[12]
800133b2:	14 98       	mov	r8,r10
800133b4:	16 99       	mov	r9,r11
800133b6:	10 9a       	mov	r10,r8
800133b8:	12 9b       	mov	r11,r9
800133ba:	30 08       	mov	r8,0
800133bc:	e0 69 60 00 	mov	r9,24576
800133c0:	ea 19 40 7b 	orh	r9,0x407b
800133c4:	f0 16 00 0c 	mcall	r6[48]
800133c8:	14 98       	mov	r8,r10
800133ca:	16 99       	mov	r9,r11
	rc_check_receivers());
}

void mavlink_send_scaled_rc_channels(void)
{
	mavlink_msg_rc_channels_scaled_send(MAVLINK_COMM_0,get_millis(),1,
800133cc:	10 9a       	mov	r10,r8
800133ce:	12 9b       	mov	r11,r9
800133d0:	f0 16 00 12 	mcall	r6[72]
800133d4:	18 98       	mov	r8,r12
800133d6:	5c 88       	casts.h	r8
800133d8:	10 92       	mov	r2,r8
	rc_get_channel(0) * 1000.0 * RC_SCALEFACTOR ,
	rc_get_channel(1) * 1000.0 * RC_SCALEFACTOR,
800133da:	30 1c       	mov	r12,1
800133dc:	f0 16 00 1b 	mcall	r6[108]
800133e0:	18 98       	mov	r8,r12
800133e2:	10 9c       	mov	r12,r8
800133e4:	f0 16 00 1a 	mcall	r6[104]
800133e8:	30 08       	mov	r8,0
800133ea:	e0 69 40 00 	mov	r9,16384
800133ee:	ea 19 40 8f 	orh	r9,0x408f
800133f2:	f0 16 00 03 	mcall	r6[12]
800133f6:	14 98       	mov	r8,r10
800133f8:	16 99       	mov	r9,r11
800133fa:	10 9a       	mov	r10,r8
800133fc:	12 9b       	mov	r11,r9
800133fe:	30 08       	mov	r8,0
80013400:	e0 69 60 00 	mov	r9,24576
80013404:	ea 19 40 7b 	orh	r9,0x407b
80013408:	f0 16 00 0c 	mcall	r6[48]
8001340c:	14 98       	mov	r8,r10
8001340e:	16 99       	mov	r9,r11
	rc_check_receivers());
}

void mavlink_send_scaled_rc_channels(void)
{
	mavlink_msg_rc_channels_scaled_send(MAVLINK_COMM_0,get_millis(),1,
80013410:	10 9a       	mov	r10,r8
80013412:	12 9b       	mov	r11,r9
80013414:	f0 16 00 12 	mcall	r6[72]
80013418:	18 98       	mov	r8,r12
8001341a:	5c 88       	casts.h	r8
8001341c:	10 93       	mov	r3,r8
	rc_get_channel(0) * 1000.0 * RC_SCALEFACTOR ,
8001341e:	30 0c       	mov	r12,0
80013420:	f0 16 00 1b 	mcall	r6[108]
80013424:	18 98       	mov	r8,r12
80013426:	10 9c       	mov	r12,r8
80013428:	f0 16 00 1a 	mcall	r6[104]
8001342c:	30 08       	mov	r8,0
8001342e:	e0 69 40 00 	mov	r9,16384
80013432:	ea 19 40 8f 	orh	r9,0x408f
80013436:	f0 16 00 03 	mcall	r6[12]
8001343a:	14 98       	mov	r8,r10
8001343c:	16 99       	mov	r9,r11
8001343e:	10 9a       	mov	r10,r8
80013440:	12 9b       	mov	r11,r9
80013442:	30 08       	mov	r8,0
80013444:	e0 69 60 00 	mov	r9,24576
80013448:	ea 19 40 7b 	orh	r9,0x407b
8001344c:	f0 16 00 0c 	mcall	r6[48]
80013450:	14 98       	mov	r8,r10
80013452:	16 99       	mov	r9,r11
	rc_check_receivers());
}

void mavlink_send_scaled_rc_channels(void)
{
	mavlink_msg_rc_channels_scaled_send(MAVLINK_COMM_0,get_millis(),1,
80013454:	10 9a       	mov	r10,r8
80013456:	12 9b       	mov	r11,r9
80013458:	f0 16 00 12 	mcall	r6[72]
8001345c:	18 98       	mov	r8,r12
8001345e:	5c 88       	casts.h	r8
80013460:	10 95       	mov	r5,r8
80013462:	f0 16 00 0f 	mcall	r6[60]
80013466:	18 9b       	mov	r11,r12
80013468:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001346c:	1a d8       	st.w	--sp,r8
8001346e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80013472:	1a d8       	st.w	--sp,r8
80013474:	ee f8 ff f8 	ld.w	r8,r7[-8]
80013478:	1a d8       	st.w	--sp,r8
8001347a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001347e:	1a d8       	st.w	--sp,r8
80013480:	1a d0       	st.w	--sp,r0
80013482:	1a d1       	st.w	--sp,r1
80013484:	1a d2       	st.w	--sp,r2
80013486:	06 98       	mov	r8,r3
80013488:	0a 99       	mov	r9,r5
8001348a:	30 1a       	mov	r10,1
8001348c:	30 0c       	mov	r12,0
8001348e:	fe b0 f0 9f 	rcall	800115cc <mavlink_msg_rc_channels_scaled_send>
80013492:	2f 9d       	sub	sp,-28
	rc_get_channel(5) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(6) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(7) * 1000.0 * RC_SCALEFACTOR,
	rc_check_receivers());
	
	mavlink_msg_named_value_int_send(MAVLINK_COMM_0,get_millis(),"Coll_Avoidance",centralData->collision_avoidance);
80013494:	ec f8 00 00 	ld.w	r8,r6[0]
80013498:	70 08       	ld.w	r8,r8[0x0]
8001349a:	f1 38 10 bb 	ld.ub	r8,r8[4283]
8001349e:	10 95       	mov	r5,r8
800134a0:	f0 16 00 0f 	mcall	r6[60]
800134a4:	18 98       	mov	r8,r12
800134a6:	0a 99       	mov	r9,r5
800134a8:	fe ca 02 98 	sub	r10,pc,664
800134ac:	10 9b       	mov	r11,r8
800134ae:	30 0c       	mov	r12,0
800134b0:	fe b0 f6 28 	rcall	80012100 <mavlink_msg_named_value_int_send>
}
800134b4:	2f cd       	sub	sp,-16
800134b6:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
800134ba:	00 00       	add	r0,r0
800134bc:	80 01       	ld.sh	r1,r0[0x0]
800134be:	30 b0       	mov	r0,11
800134c0:	72 6f       	ld.w	pc,r9[0x18]
800134c2:	6c 6c       	ld.w	r12,r6[0x18]
800134c4:	74 6f       	ld.w	pc,r10[0x18]
800134c6:	72 71       	ld.w	r1,r9[0x1c]
800134c8:	75 65       	ld.w	r5,r10[0x58]
800134ca:	00 00       	add	r0,r0
800134cc:	70 69       	ld.w	r9,r8[0x18]
800134ce:	74 63       	ld.w	r3,r10[0x18]
800134d0:	68 74       	ld.w	r4,r4[0x1c]
800134d2:	6f 72       	ld.w	r2,r7[0x5c]
800134d4:	71 75       	ld.w	r5,r8[0x5c]
800134d6:	65 00       	ld.w	r0,r2[0x40]
800134d8:	79 61       	ld.w	r1,r12[0x58]
800134da:	77 74       	ld.w	r4,r11[0x5c]
800134dc:	6f 72       	ld.w	r2,r7[0x5c]
800134de:	71 75       	ld.w	r5,r8[0x5c]
800134e0:	65 00       	ld.w	r0,r2[0x40]
800134e2:	00 00       	add	r0,r0
800134e4:	74 68       	ld.w	r8,r10[0x18]
800134e6:	72 75       	ld.w	r5,r9[0x1c]
800134e8:	73 74       	ld.w	r4,r9[0x5c]
800134ea:	00 00       	add	r0,r0
800134ec:	72 70       	ld.w	r0,r9[0x1c]
800134ee:	6d 31       	ld.w	r1,r6[0x4c]
800134f0:	00 00       	add	r0,r0
800134f2:	00 00       	add	r0,r0
800134f4:	72 70       	ld.w	r0,r9[0x1c]
800134f6:	6d 32       	ld.w	r2,r6[0x4c]
800134f8:	00 00       	add	r0,r0
800134fa:	00 00       	add	r0,r0
800134fc:	72 70       	ld.w	r0,r9[0x1c]
800134fe:	6d 33       	ld.w	r3,r6[0x4c]
80013500:	00 00       	add	r0,r0
80013502:	00 00       	add	r0,r0
80013504:	72 70       	ld.w	r0,r9[0x1c]
80013506:	6d 34       	ld.w	r4,r6[0x4c]
	...

8001350a <mavlink_send_simulation>:

void mavlink_send_simulation(void) {
8001350a:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
8001350e:	1a 97       	mov	r7,sp
80013510:	21 6d       	sub	sp,88
80013512:	fe f6 03 46 	ld.w	r6,pc[838]
80013516:	1e 26       	rsub	r6,pc
	Aero_Attitude_t aero_attitude;
	aero_attitude=Quat_to_Aero(centralData->sim_model.attitude.qe);
80013518:	ec f8 00 00 	ld.w	r8,r6[0]
8001351c:	70 09       	ld.w	r9,r8[0x0]
8001351e:	ee ca 00 0c 	sub	r10,r7,12
80013522:	20 4d       	sub	sp,16
80013524:	1a 98       	mov	r8,sp
80013526:	f2 c9 f4 10 	sub	r9,r9,-3056
8001352a:	20 08       	sub	r8,0
8001352c:	20 09       	sub	r9,0
8001352e:	72 0b       	ld.w	r11,r9[0x0]
80013530:	91 0b       	st.w	r8[0x0],r11
80013532:	72 1b       	ld.w	r11,r9[0x4]
80013534:	91 1b       	st.w	r8[0x4],r11
80013536:	72 2b       	ld.w	r11,r9[0x8]
80013538:	91 2b       	st.w	r8[0x8],r11
8001353a:	72 39       	ld.w	r9,r9[0xc]
8001353c:	91 39       	st.w	r8[0xc],r9
8001353e:	14 9c       	mov	r12,r10
80013540:	f0 16 00 66 	mcall	r6[408]
80013544:	2f cd       	sub	sp,-16
	global_position_t gpos=local_to_global_position(centralData->sim_model.localPosition);
80013546:	ec f8 00 00 	ld.w	r8,r6[0]
8001354a:	70 08       	ld.w	r8,r8[0x0]
8001354c:	ee cc 00 28 	sub	r12,r7,40
80013550:	20 cd       	sub	sp,48
80013552:	1a 99       	mov	r9,sp
80013554:	12 9b       	mov	r11,r9
80013556:	f0 ca f3 44 	sub	r10,r8,-3260
8001355a:	f6 c8 00 00 	sub	r8,r11,0
8001355e:	f4 c9 00 00 	sub	r9,r10,0
80013562:	72 0e       	ld.w	lr,r9[0x0]
80013564:	91 0e       	st.w	r8[0x0],lr
80013566:	72 1e       	ld.w	lr,r9[0x4]
80013568:	91 1e       	st.w	r8[0x4],lr
8001356a:	72 2e       	ld.w	lr,r9[0x8]
8001356c:	91 2e       	st.w	r8[0x8],lr
8001356e:	72 39       	ld.w	r9,r9[0xc]
80013570:	91 39       	st.w	r8[0xc],r9
80013572:	f6 c8 ff f0 	sub	r8,r11,-16
80013576:	f4 c9 ff f0 	sub	r9,r10,-16
8001357a:	72 0e       	ld.w	lr,r9[0x0]
8001357c:	91 0e       	st.w	r8[0x0],lr
8001357e:	72 1e       	ld.w	lr,r9[0x4]
80013580:	91 1e       	st.w	r8[0x4],lr
80013582:	72 2e       	ld.w	lr,r9[0x8]
80013584:	91 2e       	st.w	r8[0x8],lr
80013586:	72 39       	ld.w	r9,r9[0xc]
80013588:	91 39       	st.w	r8[0xc],r9
8001358a:	f6 c8 ff e0 	sub	r8,r11,-32
8001358e:	f4 c9 ff e0 	sub	r9,r10,-32
80013592:	72 0a       	ld.w	r10,r9[0x0]
80013594:	91 0a       	st.w	r8[0x0],r10
80013596:	72 1a       	ld.w	r10,r9[0x4]
80013598:	91 1a       	st.w	r8[0x4],r10
8001359a:	72 2a       	ld.w	r10,r9[0x8]
8001359c:	91 2a       	st.w	r8[0x8],r10
8001359e:	72 39       	ld.w	r9,r9[0xc]
800135a0:	91 39       	st.w	r8[0xc],r9
800135a2:	f0 16 00 7f 	mcall	r6[508]
800135a6:	2f 4d       	sub	sp,-48
	mavlink_msg_hil_state_send(MAVLINK_COMM_0, get_micros(), 
	aero_attitude.rpy[0], aero_attitude.rpy[1], aero_attitude.rpy[2],
	centralData->sim_model.rates_bf[ROLL], centralData->sim_model.rates_bf[PITCH], centralData->sim_model.rates_bf[YAW],
	gpos.latitude*10000000, gpos.longitude*10000000, gpos.altitude*1000.0,
	100*centralData->sim_model.vel[X], 100*centralData->sim_model.vel[Y], 100*centralData->sim_model.vel[Z],
	1000*centralData->sim_model.lin_forces_bf[0], 1000*centralData->sim_model.lin_forces_bf[1], 1000*centralData->sim_model.lin_forces_bf[2]
800135a8:	ec f8 00 00 	ld.w	r8,r6[0]
800135ac:	70 08       	ld.w	r8,r8[0x0]
800135ae:	f0 f9 0b c8 	ld.w	r9,r8[3016]
800135b2:	fc 18 44 7a 	movh	r8,0x447a
800135b6:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
void mavlink_send_simulation(void) {
	Aero_Attitude_t aero_attitude;
	aero_attitude=Quat_to_Aero(centralData->sim_model.attitude.qe);
	global_position_t gpos=local_to_global_position(centralData->sim_model.localPosition);
	
	mavlink_msg_hil_state_send(MAVLINK_COMM_0, get_micros(), 
800135ba:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
800135be:	5c 88       	casts.h	r8
800135c0:	ef 48 ff a8 	st.w	r7[-88],r8
	aero_attitude.rpy[0], aero_attitude.rpy[1], aero_attitude.rpy[2],
	centralData->sim_model.rates_bf[ROLL], centralData->sim_model.rates_bf[PITCH], centralData->sim_model.rates_bf[YAW],
	gpos.latitude*10000000, gpos.longitude*10000000, gpos.altitude*1000.0,
	100*centralData->sim_model.vel[X], 100*centralData->sim_model.vel[Y], 100*centralData->sim_model.vel[Z],
	1000*centralData->sim_model.lin_forces_bf[0], 1000*centralData->sim_model.lin_forces_bf[1], 1000*centralData->sim_model.lin_forces_bf[2]
800135c4:	ec f8 00 00 	ld.w	r8,r6[0]
800135c8:	70 08       	ld.w	r8,r8[0x0]
800135ca:	f0 f9 0b c4 	ld.w	r9,r8[3012]
800135ce:	fc 18 44 7a 	movh	r8,0x447a
800135d2:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
void mavlink_send_simulation(void) {
	Aero_Attitude_t aero_attitude;
	aero_attitude=Quat_to_Aero(centralData->sim_model.attitude.qe);
	global_position_t gpos=local_to_global_position(centralData->sim_model.localPosition);
	
	mavlink_msg_hil_state_send(MAVLINK_COMM_0, get_micros(), 
800135d6:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
800135da:	5c 88       	casts.h	r8
800135dc:	ef 48 ff ac 	st.w	r7[-84],r8
	aero_attitude.rpy[0], aero_attitude.rpy[1], aero_attitude.rpy[2],
	centralData->sim_model.rates_bf[ROLL], centralData->sim_model.rates_bf[PITCH], centralData->sim_model.rates_bf[YAW],
	gpos.latitude*10000000, gpos.longitude*10000000, gpos.altitude*1000.0,
	100*centralData->sim_model.vel[X], 100*centralData->sim_model.vel[Y], 100*centralData->sim_model.vel[Z],
	1000*centralData->sim_model.lin_forces_bf[0], 1000*centralData->sim_model.lin_forces_bf[1], 1000*centralData->sim_model.lin_forces_bf[2]
800135e0:	ec f8 00 00 	ld.w	r8,r6[0]
800135e4:	70 08       	ld.w	r8,r8[0x0]
800135e6:	f0 f9 0b c0 	ld.w	r9,r8[3008]
800135ea:	fc 18 44 7a 	movh	r8,0x447a
800135ee:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
void mavlink_send_simulation(void) {
	Aero_Attitude_t aero_attitude;
	aero_attitude=Quat_to_Aero(centralData->sim_model.attitude.qe);
	global_position_t gpos=local_to_global_position(centralData->sim_model.localPosition);
	
	mavlink_msg_hil_state_send(MAVLINK_COMM_0, get_micros(), 
800135f2:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
800135f6:	5c 88       	casts.h	r8
800135f8:	ef 48 ff b0 	st.w	r7[-80],r8
	aero_attitude.rpy[0], aero_attitude.rpy[1], aero_attitude.rpy[2],
	centralData->sim_model.rates_bf[ROLL], centralData->sim_model.rates_bf[PITCH], centralData->sim_model.rates_bf[YAW],
	gpos.latitude*10000000, gpos.longitude*10000000, gpos.altitude*1000.0,
	100*centralData->sim_model.vel[X], 100*centralData->sim_model.vel[Y], 100*centralData->sim_model.vel[Z],
800135fc:	ec f8 00 00 	ld.w	r8,r6[0]
80013600:	70 08       	ld.w	r8,r8[0x0]
80013602:	f0 f9 0b e0 	ld.w	r9,r8[3040]
80013606:	fc 18 42 c8 	movh	r8,0x42c8
8001360a:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
void mavlink_send_simulation(void) {
	Aero_Attitude_t aero_attitude;
	aero_attitude=Quat_to_Aero(centralData->sim_model.attitude.qe);
	global_position_t gpos=local_to_global_position(centralData->sim_model.localPosition);
	
	mavlink_msg_hil_state_send(MAVLINK_COMM_0, get_micros(), 
8001360e:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80013612:	5c 88       	casts.h	r8
80013614:	ef 48 ff b4 	st.w	r7[-76],r8
	aero_attitude.rpy[0], aero_attitude.rpy[1], aero_attitude.rpy[2],
	centralData->sim_model.rates_bf[ROLL], centralData->sim_model.rates_bf[PITCH], centralData->sim_model.rates_bf[YAW],
	gpos.latitude*10000000, gpos.longitude*10000000, gpos.altitude*1000.0,
	100*centralData->sim_model.vel[X], 100*centralData->sim_model.vel[Y], 100*centralData->sim_model.vel[Z],
80013618:	ec f8 00 00 	ld.w	r8,r6[0]
8001361c:	70 08       	ld.w	r8,r8[0x0]
8001361e:	f0 f9 0b dc 	ld.w	r9,r8[3036]
80013622:	fc 18 42 c8 	movh	r8,0x42c8
80013626:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
void mavlink_send_simulation(void) {
	Aero_Attitude_t aero_attitude;
	aero_attitude=Quat_to_Aero(centralData->sim_model.attitude.qe);
	global_position_t gpos=local_to_global_position(centralData->sim_model.localPosition);
	
	mavlink_msg_hil_state_send(MAVLINK_COMM_0, get_micros(), 
8001362a:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8001362e:	5c 88       	casts.h	r8
80013630:	ef 48 ff b8 	st.w	r7[-72],r8
	aero_attitude.rpy[0], aero_attitude.rpy[1], aero_attitude.rpy[2],
	centralData->sim_model.rates_bf[ROLL], centralData->sim_model.rates_bf[PITCH], centralData->sim_model.rates_bf[YAW],
	gpos.latitude*10000000, gpos.longitude*10000000, gpos.altitude*1000.0,
	100*centralData->sim_model.vel[X], 100*centralData->sim_model.vel[Y], 100*centralData->sim_model.vel[Z],
80013634:	ec f8 00 00 	ld.w	r8,r6[0]
80013638:	70 08       	ld.w	r8,r8[0x0]
8001363a:	f0 f9 0b d8 	ld.w	r9,r8[3032]
8001363e:	fc 18 42 c8 	movh	r8,0x42c8
80013642:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
void mavlink_send_simulation(void) {
	Aero_Attitude_t aero_attitude;
	aero_attitude=Quat_to_Aero(centralData->sim_model.attitude.qe);
	global_position_t gpos=local_to_global_position(centralData->sim_model.localPosition);
	
	mavlink_msg_hil_state_send(MAVLINK_COMM_0, get_micros(), 
80013646:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8001364a:	5c 88       	casts.h	r8
8001364c:	ef 48 ff bc 	st.w	r7[-68],r8
	aero_attitude.rpy[0], aero_attitude.rpy[1], aero_attitude.rpy[2],
	centralData->sim_model.rates_bf[ROLL], centralData->sim_model.rates_bf[PITCH], centralData->sim_model.rates_bf[YAW],
	gpos.latitude*10000000, gpos.longitude*10000000, gpos.altitude*1000.0,
80013650:	ee f8 ff e8 	ld.w	r8,r7[-24]
80013654:	10 9c       	mov	r12,r8
80013656:	f0 16 00 02 	mcall	r6[8]
8001365a:	30 08       	mov	r8,0
8001365c:	e0 69 40 00 	mov	r9,16384
80013660:	ea 19 40 8f 	orh	r9,0x408f
80013664:	f0 16 00 03 	mcall	r6[12]
80013668:	14 98       	mov	r8,r10
8001366a:	16 99       	mov	r9,r11
void mavlink_send_simulation(void) {
	Aero_Attitude_t aero_attitude;
	aero_attitude=Quat_to_Aero(centralData->sim_model.attitude.qe);
	global_position_t gpos=local_to_global_position(centralData->sim_model.localPosition);
	
	mavlink_msg_hil_state_send(MAVLINK_COMM_0, get_micros(), 
8001366c:	10 9a       	mov	r10,r8
8001366e:	12 9b       	mov	r11,r9
80013670:	f0 16 00 12 	mcall	r6[72]
80013674:	ef 4c ff c0 	st.w	r7[-64],r12
	aero_attitude.rpy[0], aero_attitude.rpy[1], aero_attitude.rpy[2],
	centralData->sim_model.rates_bf[ROLL], centralData->sim_model.rates_bf[PITCH], centralData->sim_model.rates_bf[YAW],
	gpos.latitude*10000000, gpos.longitude*10000000, gpos.altitude*1000.0,
80013678:	ee ea ff d8 	ld.d	r10,r7[-40]
8001367c:	30 08       	mov	r8,0
8001367e:	e0 69 12 d0 	mov	r9,4816
80013682:	ea 19 41 63 	orh	r9,0x4163
80013686:	f0 16 00 03 	mcall	r6[12]
8001368a:	14 98       	mov	r8,r10
8001368c:	16 99       	mov	r9,r11
void mavlink_send_simulation(void) {
	Aero_Attitude_t aero_attitude;
	aero_attitude=Quat_to_Aero(centralData->sim_model.attitude.qe);
	global_position_t gpos=local_to_global_position(centralData->sim_model.localPosition);
	
	mavlink_msg_hil_state_send(MAVLINK_COMM_0, get_micros(), 
8001368e:	10 9a       	mov	r10,r8
80013690:	12 9b       	mov	r11,r9
80013692:	f0 16 00 12 	mcall	r6[72]
80013696:	ef 4c ff c4 	st.w	r7[-60],r12
	aero_attitude.rpy[0], aero_attitude.rpy[1], aero_attitude.rpy[2],
	centralData->sim_model.rates_bf[ROLL], centralData->sim_model.rates_bf[PITCH], centralData->sim_model.rates_bf[YAW],
	gpos.latitude*10000000, gpos.longitude*10000000, gpos.altitude*1000.0,
8001369a:	ee ea ff e0 	ld.d	r10,r7[-32]
8001369e:	30 08       	mov	r8,0
800136a0:	e0 69 12 d0 	mov	r9,4816
800136a4:	ea 19 41 63 	orh	r9,0x4163
800136a8:	f0 16 00 03 	mcall	r6[12]
800136ac:	14 98       	mov	r8,r10
800136ae:	16 99       	mov	r9,r11
void mavlink_send_simulation(void) {
	Aero_Attitude_t aero_attitude;
	aero_attitude=Quat_to_Aero(centralData->sim_model.attitude.qe);
	global_position_t gpos=local_to_global_position(centralData->sim_model.localPosition);
	
	mavlink_msg_hil_state_send(MAVLINK_COMM_0, get_micros(), 
800136b0:	10 9a       	mov	r10,r8
800136b2:	12 9b       	mov	r11,r9
800136b4:	f0 16 00 12 	mcall	r6[72]
800136b8:	ef 4c ff c8 	st.w	r7[-56],r12
	aero_attitude.rpy[0], aero_attitude.rpy[1], aero_attitude.rpy[2],
	centralData->sim_model.rates_bf[ROLL], centralData->sim_model.rates_bf[PITCH], centralData->sim_model.rates_bf[YAW],
800136bc:	ec f8 00 00 	ld.w	r8,r6[0]
800136c0:	70 08       	ld.w	r8,r8[0x0]
void mavlink_send_simulation(void) {
	Aero_Attitude_t aero_attitude;
	aero_attitude=Quat_to_Aero(centralData->sim_model.attitude.qe);
	global_position_t gpos=local_to_global_position(centralData->sim_model.localPosition);
	
	mavlink_msg_hil_state_send(MAVLINK_COMM_0, get_micros(), 
800136c2:	f0 f8 0b bc 	ld.w	r8,r8[3004]
800136c6:	ef 48 ff cc 	st.w	r7[-52],r8
	aero_attitude.rpy[0], aero_attitude.rpy[1], aero_attitude.rpy[2],
	centralData->sim_model.rates_bf[ROLL], centralData->sim_model.rates_bf[PITCH], centralData->sim_model.rates_bf[YAW],
800136ca:	ec f8 00 00 	ld.w	r8,r6[0]
800136ce:	70 08       	ld.w	r8,r8[0x0]
void mavlink_send_simulation(void) {
	Aero_Attitude_t aero_attitude;
	aero_attitude=Quat_to_Aero(centralData->sim_model.attitude.qe);
	global_position_t gpos=local_to_global_position(centralData->sim_model.localPosition);
	
	mavlink_msg_hil_state_send(MAVLINK_COMM_0, get_micros(), 
800136d0:	f0 f8 0b b8 	ld.w	r8,r8[3000]
800136d4:	ef 48 ff d0 	st.w	r7[-48],r8
	aero_attitude.rpy[0], aero_attitude.rpy[1], aero_attitude.rpy[2],
	centralData->sim_model.rates_bf[ROLL], centralData->sim_model.rates_bf[PITCH], centralData->sim_model.rates_bf[YAW],
800136d8:	ec f8 00 00 	ld.w	r8,r6[0]
800136dc:	70 08       	ld.w	r8,r8[0x0]
void mavlink_send_simulation(void) {
	Aero_Attitude_t aero_attitude;
	aero_attitude=Quat_to_Aero(centralData->sim_model.attitude.qe);
	global_position_t gpos=local_to_global_position(centralData->sim_model.localPosition);
	
	mavlink_msg_hil_state_send(MAVLINK_COMM_0, get_micros(), 
800136de:	f0 f8 0b b4 	ld.w	r8,r8[2996]
800136e2:	ef 48 ff d4 	st.w	r7[-44],r8
800136e6:	ee f0 ff fc 	ld.w	r0,r7[-4]
800136ea:	ee f1 ff f8 	ld.w	r1,r7[-8]
800136ee:	ee f5 ff f4 	ld.w	r5,r7[-12]
800136f2:	f0 16 00 27 	mcall	r6[156]
800136f6:	18 98       	mov	r8,r12
800136f8:	10 92       	mov	r2,r8
800136fa:	30 03       	mov	r3,0
800136fc:	ee f8 ff a8 	ld.w	r8,r7[-88]
80013700:	1a d8       	st.w	--sp,r8
80013702:	ee f8 ff ac 	ld.w	r8,r7[-84]
80013706:	1a d8       	st.w	--sp,r8
80013708:	ee f8 ff b0 	ld.w	r8,r7[-80]
8001370c:	1a d8       	st.w	--sp,r8
8001370e:	ee f8 ff b4 	ld.w	r8,r7[-76]
80013712:	1a d8       	st.w	--sp,r8
80013714:	ee f8 ff b8 	ld.w	r8,r7[-72]
80013718:	1a d8       	st.w	--sp,r8
8001371a:	ee f8 ff bc 	ld.w	r8,r7[-68]
8001371e:	1a d8       	st.w	--sp,r8
80013720:	ee f8 ff c0 	ld.w	r8,r7[-64]
80013724:	1a d8       	st.w	--sp,r8
80013726:	ee f8 ff c4 	ld.w	r8,r7[-60]
8001372a:	1a d8       	st.w	--sp,r8
8001372c:	ee f8 ff c8 	ld.w	r8,r7[-56]
80013730:	1a d8       	st.w	--sp,r8
80013732:	ee f8 ff cc 	ld.w	r8,r7[-52]
80013736:	1a d8       	st.w	--sp,r8
80013738:	ee f8 ff d0 	ld.w	r8,r7[-48]
8001373c:	1a d8       	st.w	--sp,r8
8001373e:	ee f8 ff d4 	ld.w	r8,r7[-44]
80013742:	1a d8       	st.w	--sp,r8
80013744:	1a d0       	st.w	--sp,r0
80013746:	02 98       	mov	r8,r1
80013748:	0a 99       	mov	r9,r5
8001374a:	04 9a       	mov	r10,r2
8001374c:	06 9b       	mov	r11,r3
8001374e:	30 0c       	mov	r12,0
80013750:	fe b0 f3 62 	rcall	80011e14 <mavlink_msg_hil_state_send>
80013754:	2f 3d       	sub	sp,-52
	gpos.latitude*10000000, gpos.longitude*10000000, gpos.altitude*1000.0,
	100*centralData->sim_model.vel[X], 100*centralData->sim_model.vel[Y], 100*centralData->sim_model.vel[Z],
	1000*centralData->sim_model.lin_forces_bf[0], 1000*centralData->sim_model.lin_forces_bf[1], 1000*centralData->sim_model.lin_forces_bf[2]
	);
	//flush_mavlink();
	mavlink_msg_named_value_int_send(MAVLINK_COMM_0, get_millis(), "rolltorque", centralData->sim_model.torques_bf[0]);//flush_mavlink();
80013756:	ec f8 00 00 	ld.w	r8,r6[0]
8001375a:	70 08       	ld.w	r8,r8[0x0]
8001375c:	f0 f8 0b a8 	ld.w	r8,r8[2984]
80013760:	e5 ab 05 08 	cop	cp0,cr5,cr0,cr8,0x56
80013764:	f0 16 00 0f 	mcall	r6[60]
80013768:	18 98       	mov	r8,r12
8001376a:	0a 99       	mov	r9,r5
8001376c:	fe ca 02 ac 	sub	r10,pc,684
80013770:	10 9b       	mov	r11,r8
80013772:	30 0c       	mov	r12,0
80013774:	fe b0 f4 c6 	rcall	80012100 <mavlink_msg_named_value_int_send>
	mavlink_msg_named_value_int_send(MAVLINK_COMM_0, get_millis(), "pitchtorque", centralData->sim_model.torques_bf[1]);//flush_mavlink();
80013778:	ec f8 00 00 	ld.w	r8,r6[0]
8001377c:	70 08       	ld.w	r8,r8[0x0]
8001377e:	f0 f8 0b ac 	ld.w	r8,r8[2988]
80013782:	e5 ab 05 08 	cop	cp0,cr5,cr0,cr8,0x56
80013786:	f0 16 00 0f 	mcall	r6[60]
8001378a:	18 98       	mov	r8,r12
8001378c:	0a 99       	mov	r9,r5
8001378e:	fe ca 02 c2 	sub	r10,pc,706
80013792:	10 9b       	mov	r11,r8
80013794:	30 0c       	mov	r12,0
80013796:	fe b0 f4 b5 	rcall	80012100 <mavlink_msg_named_value_int_send>
	mavlink_msg_named_value_int_send(MAVLINK_COMM_0, get_millis(), "yawtorque", centralData->sim_model.torques_bf[2]);//flush_mavlink();
8001379a:	ec f8 00 00 	ld.w	r8,r6[0]
8001379e:	70 08       	ld.w	r8,r8[0x0]
800137a0:	f0 f8 0b b0 	ld.w	r8,r8[2992]
800137a4:	e5 ab 05 08 	cop	cp0,cr5,cr0,cr8,0x56
800137a8:	f0 16 00 0f 	mcall	r6[60]
800137ac:	18 98       	mov	r8,r12
800137ae:	0a 99       	mov	r9,r5
800137b0:	fe ca 02 d8 	sub	r10,pc,728
800137b4:	10 9b       	mov	r11,r8
800137b6:	30 0c       	mov	r12,0
800137b8:	fe b0 f4 a4 	rcall	80012100 <mavlink_msg_named_value_int_send>
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "thrust", centralData->sim_model.lin_forces_bf[2]);//flush_mavlink();
800137bc:	ec f8 00 00 	ld.w	r8,r6[0]
800137c0:	70 08       	ld.w	r8,r8[0x0]
800137c2:	f0 f5 0b c8 	ld.w	r5,r8[3016]
800137c6:	f0 16 00 0f 	mcall	r6[60]
800137ca:	18 98       	mov	r8,r12
800137cc:	0a 99       	mov	r9,r5
800137ce:	fe ca 02 ea 	sub	r10,pc,746
800137d2:	10 9b       	mov	r11,r8
800137d4:	30 0c       	mov	r12,0
800137d6:	fe b0 f4 5d 	rcall	80012090 <mavlink_msg_named_value_float_send>
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "rpm1", centralData->sim_model.rotorspeeds[0]);//flush_mavlink();
800137da:	ec f8 00 00 	ld.w	r8,r6[0]
800137de:	70 08       	ld.w	r8,r8[0x0]
800137e0:	f0 f5 0c ec 	ld.w	r5,r8[3308]
800137e4:	f0 16 00 0f 	mcall	r6[60]
800137e8:	18 98       	mov	r8,r12
800137ea:	0a 99       	mov	r9,r5
800137ec:	fe ca 03 00 	sub	r10,pc,768
800137f0:	10 9b       	mov	r11,r8
800137f2:	30 0c       	mov	r12,0
800137f4:	fe b0 f4 4e 	rcall	80012090 <mavlink_msg_named_value_float_send>
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "rpm2", centralData->sim_model.rotorspeeds[1]);//flush_mavlink();
800137f8:	ec f8 00 00 	ld.w	r8,r6[0]
800137fc:	70 08       	ld.w	r8,r8[0x0]
800137fe:	f0 f5 0c f0 	ld.w	r5,r8[3312]
80013802:	f0 16 00 0f 	mcall	r6[60]
80013806:	18 98       	mov	r8,r12
80013808:	0a 99       	mov	r9,r5
8001380a:	fe ca 03 16 	sub	r10,pc,790
8001380e:	10 9b       	mov	r11,r8
80013810:	30 0c       	mov	r12,0
80013812:	fe b0 f4 3f 	rcall	80012090 <mavlink_msg_named_value_float_send>
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "rpm3", centralData->sim_model.rotorspeeds[2]);//flush_mavlink();
80013816:	ec f8 00 00 	ld.w	r8,r6[0]
8001381a:	70 08       	ld.w	r8,r8[0x0]
8001381c:	f0 f5 0c f4 	ld.w	r5,r8[3316]
80013820:	f0 16 00 0f 	mcall	r6[60]
80013824:	18 98       	mov	r8,r12
80013826:	0a 99       	mov	r9,r5
80013828:	fe ca 03 2c 	sub	r10,pc,812
8001382c:	10 9b       	mov	r11,r8
8001382e:	30 0c       	mov	r12,0
80013830:	fe b0 f4 30 	rcall	80012090 <mavlink_msg_named_value_float_send>
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "rpm4", centralData->sim_model.rotorspeeds[3]);
80013834:	ec f8 00 00 	ld.w	r8,r6[0]
80013838:	70 08       	ld.w	r8,r8[0x0]
8001383a:	f0 f5 0c f8 	ld.w	r5,r8[3320]
8001383e:	f0 16 00 0f 	mcall	r6[60]
80013842:	18 98       	mov	r8,r12
80013844:	0a 99       	mov	r9,r5
80013846:	fe ca 03 42 	sub	r10,pc,834
8001384a:	10 9b       	mov	r11,r8
8001384c:	30 0c       	mov	r12,0
8001384e:	fe b0 f4 21 	rcall	80012090 <mavlink_msg_named_value_float_send>

	
}
80013852:	2e ad       	sub	sp,-88
80013854:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
80013858:	80 01       	ld.sh	r1,r0[0x0]
8001385a:	33 9a       	mov	r10,57
8001385c:	73 74       	ld.w	r4,r9[0x5c]
8001385e:	61 62       	ld.w	r2,r0[0x58]
80013860:	41 76       	lddsp	r6,sp[0x5c]
80013862:	67 44       	ld.w	r4,r3[0x50]
80013864:	65 6c       	ld.w	r12,r2[0x58]
80013866:	61 79       	ld.w	r9,r0[0x5c]
80013868:	00 00       	add	r0,r0
8001386a:	00 00       	add	r0,r0
8001386c:	73 74       	ld.w	r4,r9[0x5c]
8001386e:	61 62       	ld.w	r2,r0[0x58]
80013870:	44 65       	lddsp	r5,sp[0x118]
80013872:	6c 61       	ld.w	r1,r6[0x18]
80013874:	79 56       	ld.w	r6,r12[0x54]
80013876:	61 72       	ld.w	r2,r0[0x5c]
80013878:	00 00       	add	r0,r0
8001387a:	00 00       	add	r0,r0
8001387c:	73 74       	ld.w	r4,r9[0x5c]
8001387e:	61 62       	ld.w	r2,r0[0x58]
80013880:	4d 61       	lddpc	r1,800139d8 <send_rt_stats+0x110>
80013882:	78 44       	ld.w	r4,r12[0x10]
80013884:	65 6c       	ld.w	r12,r2[0x58]
80013886:	61 79       	ld.w	r9,r0[0x5c]
80013888:	00 00       	add	r0,r0
8001388a:	00 00       	add	r0,r0
8001388c:	73 74       	ld.w	r4,r9[0x5c]
8001388e:	61 62       	ld.w	r2,r0[0x58]
80013890:	52 54       	stdsp	sp[0x94],r4
80013892:	76 69       	ld.w	r9,r11[0x18]
80013894:	6f 00       	ld.w	r0,r7[0x40]
80013896:	00 00       	add	r0,r0
80013898:	62 61       	ld.w	r1,r1[0x18]
8001389a:	72 6f       	ld.w	pc,r9[0x18]
8001389c:	41 76       	lddsp	r6,sp[0x5c]
8001389e:	67 44       	ld.w	r4,r3[0x50]
800138a0:	65 6c       	ld.w	r12,r2[0x58]
800138a2:	61 79       	ld.w	r9,r0[0x5c]
800138a4:	00 00       	add	r0,r0
800138a6:	00 00       	add	r0,r0
800138a8:	69 6d       	ld.w	sp,r4[0x58]
800138aa:	75 45       	ld.w	r5,r10[0x50]
800138ac:	78 54       	ld.w	r4,r12[0x14]
800138ae:	69 6d       	ld.w	sp,r4[0x58]
800138b0:	65 00       	ld.w	r0,r2[0x40]
800138b2:	00 00       	add	r0,r0
800138b4:	6e 61       	ld.w	r1,r7[0x18]
800138b6:	76 45       	ld.w	r5,r11[0x10]
800138b8:	78 54       	ld.w	r4,r12[0x14]
800138ba:	69 6d       	ld.w	sp,r4[0x58]
800138bc:	65 00       	ld.w	r0,r2[0x40]
800138be:	00 00       	add	r0,r0
800138c0:	69 6d       	ld.w	sp,r4[0x58]
800138c2:	75 5f       	ld.w	pc,r10[0x54]
800138c4:	64 74       	ld.w	r4,r2[0x1c]
	...

800138c8 <send_rt_stats>:

task_return_t send_rt_stats() {
800138c8:	eb cd 40 e0 	pushm	r5-r7,lr
800138cc:	1a 97       	mov	r7,sp
800138ce:	20 1d       	sub	sp,4
800138d0:	4c e6       	lddpc	r6,80013a08 <send_rt_stats+0x140>
800138d2:	1e 26       	rsub	r6,pc
	task_set *main_tasks=get_main_taskset();
800138d4:	f0 16 00 fa 	mcall	r6[1000]
800138d8:	18 98       	mov	r8,r12
800138da:	ef 48 ff fc 	st.w	r7[-4],r8
	
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "stabAvgDelay", main_tasks->tasks[0].delay_avg);
800138de:	ee f8 ff fc 	ld.w	r8,r7[-4]
800138e2:	70 c8       	ld.w	r8,r8[0x30]
800138e4:	e5 a4 05 08 	cop	cp0,cr5,cr0,cr8,0x48
800138e8:	f0 16 00 0f 	mcall	r6[60]
800138ec:	18 98       	mov	r8,r12
800138ee:	0a 99       	mov	r9,r5
800138f0:	fe ca 00 94 	sub	r10,pc,148
800138f4:	10 9b       	mov	r11,r8
800138f6:	30 0c       	mov	r12,0
800138f8:	fe b0 f3 cc 	rcall	80012090 <mavlink_msg_named_value_float_send>
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "stabDelayVar", sqrt(main_tasks->tasks[0].delay_var_squared));
800138fc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80013900:	70 d8       	ld.w	r8,r8[0x34]
80013902:	10 9c       	mov	r12,r8
80013904:	f0 16 00 4d 	mcall	r6[308]
80013908:	14 98       	mov	r8,r10
8001390a:	16 99       	mov	r9,r11
8001390c:	10 9a       	mov	r10,r8
8001390e:	12 9b       	mov	r11,r9
80013910:	f0 16 00 64 	mcall	r6[400]
80013914:	14 98       	mov	r8,r10
80013916:	16 99       	mov	r9,r11
80013918:	10 9a       	mov	r10,r8
8001391a:	12 9b       	mov	r11,r9
8001391c:	f0 16 00 09 	mcall	r6[36]
80013920:	18 95       	mov	r5,r12
80013922:	f0 16 00 0f 	mcall	r6[60]
80013926:	18 98       	mov	r8,r12
80013928:	0a 99       	mov	r9,r5
8001392a:	fe ca 00 be 	sub	r10,pc,190
8001392e:	10 9b       	mov	r11,r8
80013930:	30 0c       	mov	r12,0
80013932:	fe b0 f3 af 	rcall	80012090 <mavlink_msg_named_value_float_send>
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "stabMaxDelay", main_tasks->tasks[0].delay_max);
80013936:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001393a:	70 b8       	ld.w	r8,r8[0x2c]
8001393c:	e5 a4 05 08 	cop	cp0,cr5,cr0,cr8,0x48
80013940:	f0 16 00 0f 	mcall	r6[60]
80013944:	18 98       	mov	r8,r12
80013946:	0a 99       	mov	r9,r5
80013948:	fe ca 00 cc 	sub	r10,pc,204
8001394c:	10 9b       	mov	r11,r8
8001394e:	30 0c       	mov	r12,0
80013950:	fe b0 f3 a0 	rcall	80012090 <mavlink_msg_named_value_float_send>
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "stabRTvio", main_tasks->tasks[0].rt_violations);
80013954:	ee f8 ff fc 	ld.w	r8,r7[-4]
80013958:	70 e8       	ld.w	r8,r8[0x38]
8001395a:	e5 a4 05 08 	cop	cp0,cr5,cr0,cr8,0x48
8001395e:	f0 16 00 0f 	mcall	r6[60]
80013962:	18 98       	mov	r8,r12
80013964:	0a 99       	mov	r9,r5
80013966:	fe ca 00 da 	sub	r10,pc,218
8001396a:	10 9b       	mov	r11,r8
8001396c:	30 0c       	mov	r12,0
8001396e:	fe b0 f3 91 	rcall	80012090 <mavlink_msg_named_value_float_send>

	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "baroAvgDelay", main_tasks->tasks[1].delay_avg);
80013972:	ee f8 ff fc 	ld.w	r8,r7[-4]
80013976:	71 88       	ld.w	r8,r8[0x60]
80013978:	e5 a4 05 08 	cop	cp0,cr5,cr0,cr8,0x48
8001397c:	f0 16 00 0f 	mcall	r6[60]
80013980:	18 98       	mov	r8,r12
80013982:	0a 99       	mov	r9,r5
80013984:	fe ca 00 ec 	sub	r10,pc,236
80013988:	10 9b       	mov	r11,r8
8001398a:	30 0c       	mov	r12,0
8001398c:	fe b0 f3 82 	rcall	80012090 <mavlink_msg_named_value_float_send>


	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "imuExTime", main_tasks->tasks[0].execution_time);
80013990:	ee f8 ff fc 	ld.w	r8,r7[-4]
80013994:	70 a8       	ld.w	r8,r8[0x28]
80013996:	e5 a4 05 08 	cop	cp0,cr5,cr0,cr8,0x48
8001399a:	f0 16 00 0f 	mcall	r6[60]
8001399e:	18 98       	mov	r8,r12
800139a0:	0a 99       	mov	r9,r5
800139a2:	fe ca 00 fa 	sub	r10,pc,250
800139a6:	10 9b       	mov	r11,r8
800139a8:	30 0c       	mov	r12,0
800139aa:	fe b0 f3 73 	rcall	80012090 <mavlink_msg_named_value_float_send>
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "navExTime", main_tasks->tasks[3].execution_time);
800139ae:	ee f8 ff fc 	ld.w	r8,r7[-4]
800139b2:	f0 f8 00 b8 	ld.w	r8,r8[184]
800139b6:	e5 a4 05 08 	cop	cp0,cr5,cr0,cr8,0x48
800139ba:	f0 16 00 0f 	mcall	r6[60]
800139be:	18 98       	mov	r8,r12
800139c0:	0a 99       	mov	r9,r5
800139c2:	fe ca 01 0e 	sub	r10,pc,270
800139c6:	10 9b       	mov	r11,r8
800139c8:	30 0c       	mov	r12,0
800139ca:	fe b0 f3 63 	rcall	80012090 <mavlink_msg_named_value_float_send>
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "imu_dt", get_central_data()->imu1.dt);
800139ce:	f0 16 00 31 	mcall	r6[196]
800139d2:	18 98       	mov	r8,r12
800139d4:	f0 f5 01 40 	ld.w	r5,r8[320]
800139d8:	f0 16 00 0f 	mcall	r6[60]
800139dc:	18 98       	mov	r8,r12
800139de:	0a 99       	mov	r9,r5
800139e0:	fe ca 01 20 	sub	r10,pc,288
800139e4:	10 9b       	mov	r11,r8
800139e6:	30 0c       	mov	r12,0
800139e8:	fe b0 f3 54 	rcall	80012090 <mavlink_msg_named_value_float_send>

	
	main_tasks->tasks[1].rt_violations=0;
800139ec:	ee f8 ff fc 	ld.w	r8,r7[-4]
800139f0:	30 09       	mov	r9,0
800139f2:	f1 49 00 68 	st.w	r8[104],r9
	main_tasks->tasks[1].delay_max=0;
800139f6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800139fa:	30 09       	mov	r9,0
800139fc:	f1 49 00 5c 	st.w	r8[92],r9

}
80013a00:	2f fd       	sub	sp,-4
80013a02:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80013a06:	00 00       	add	r0,r0
80013a08:	80 01       	ld.sh	r1,r0[0x0]
80013a0a:	37 56       	mov	r6,117
80013a0c:	53 69       	stdsp	sp[0xd8],r9
80013a0e:	6d 5f       	ld.w	pc,r6[0x54]
80013a10:	6d 6f       	ld.w	pc,r6[0x58]
80013a12:	64 65       	ld.w	r5,r2[0x18]
80013a14:	00 00       	add	r0,r0
80013a16:	00 00       	add	r0,r0
80013a18:	52 6f       	stdsp	sp[0x98],pc
80013a1a:	6c 6c       	ld.w	r12,r6[0x18]
80013a1c:	52 50       	stdsp	sp[0x94],r0
80013a1e:	69 64       	ld.w	r4,r4[0x58]
80013a20:	5f 50       	srlt	r0
80013a22:	5f 47       	srge	r7
80013a24:	00 00       	add	r0,r0
80013a26:	00 00       	add	r0,r0
80013a28:	52 6f       	stdsp	sp[0x98],pc
80013a2a:	6c 6c       	ld.w	r12,r6[0x18]
80013a2c:	52 50       	stdsp	sp[0x94],r0
80013a2e:	69 64       	ld.w	r4,r4[0x58]
80013a30:	5f 49       	srge	r9
80013a32:	5f 50       	srlt	r0
80013a34:	73 74       	ld.w	r4,r9[0x5c]
80013a36:	47 00       	lddsp	r0,sp[0x1c0]
80013a38:	52 6f       	stdsp	sp[0x98],pc
80013a3a:	6c 6c       	ld.w	r12,r6[0x18]
80013a3c:	52 50       	stdsp	sp[0x94],r0
80013a3e:	69 64       	ld.w	r4,r4[0x58]
80013a40:	5f 49       	srge	r9
80013a42:	5f 50       	srlt	r0
80013a44:	72 65       	ld.w	r5,r9[0x18]
80013a46:	47 00       	lddsp	r0,sp[0x1c0]
80013a48:	52 6f       	stdsp	sp[0x98],pc
80013a4a:	6c 6c       	ld.w	r12,r6[0x18]
80013a4c:	52 50       	stdsp	sp[0x94],r0
80013a4e:	69 64       	ld.w	r4,r4[0x58]
80013a50:	5f 44       	srge	r4
80013a52:	5f 47       	srge	r7
80013a54:	61 69       	ld.w	r9,r0[0x58]
80013a56:	6e 00       	ld.w	r0,r7[0x0]
80013a58:	52 6f       	stdsp	sp[0x98],pc
80013a5a:	6c 6c       	ld.w	r12,r6[0x18]
80013a5c:	41 50       	lddsp	r0,sp[0x54]
80013a5e:	69 64       	ld.w	r4,r4[0x58]
80013a60:	5f 50       	srlt	r0
80013a62:	5f 47       	srge	r7
80013a64:	00 00       	add	r0,r0
80013a66:	00 00       	add	r0,r0
80013a68:	52 6f       	stdsp	sp[0x98],pc
80013a6a:	6c 6c       	ld.w	r12,r6[0x18]
80013a6c:	41 50       	lddsp	r0,sp[0x54]
80013a6e:	69 64       	ld.w	r4,r4[0x58]
80013a70:	5f 49       	srge	r9
80013a72:	5f 50       	srlt	r0
80013a74:	73 74       	ld.w	r4,r9[0x5c]
80013a76:	47 00       	lddsp	r0,sp[0x1c0]
80013a78:	52 6f       	stdsp	sp[0x98],pc
80013a7a:	6c 6c       	ld.w	r12,r6[0x18]
80013a7c:	41 50       	lddsp	r0,sp[0x54]
80013a7e:	69 64       	ld.w	r4,r4[0x58]
80013a80:	5f 49       	srge	r9
80013a82:	5f 50       	srlt	r0
80013a84:	72 65       	ld.w	r5,r9[0x18]
80013a86:	47 00       	lddsp	r0,sp[0x1c0]
80013a88:	52 6f       	stdsp	sp[0x98],pc
80013a8a:	6c 6c       	ld.w	r12,r6[0x18]
80013a8c:	41 50       	lddsp	r0,sp[0x54]
80013a8e:	69 64       	ld.w	r4,r4[0x58]
80013a90:	5f 44       	srge	r4
80013a92:	5f 47       	srge	r7
80013a94:	61 69       	ld.w	r9,r0[0x58]
80013a96:	6e 00       	ld.w	r0,r7[0x0]
80013a98:	50 69       	stdsp	sp[0x18],r9
80013a9a:	74 63       	ld.w	r3,r10[0x18]
80013a9c:	68 52       	ld.w	r2,r4[0x14]
80013a9e:	50 69       	stdsp	sp[0x18],r9
80013aa0:	64 5f       	ld.w	pc,r2[0x14]
80013aa2:	50 5f       	stdsp	sp[0x14],pc
80013aa4:	47 00       	lddsp	r0,sp[0x1c0]
80013aa6:	00 00       	add	r0,r0
80013aa8:	50 69       	stdsp	sp[0x18],r9
80013aaa:	74 63       	ld.w	r3,r10[0x18]
80013aac:	68 52       	ld.w	r2,r4[0x14]
80013aae:	50 69       	stdsp	sp[0x18],r9
80013ab0:	64 5f       	ld.w	pc,r2[0x14]
80013ab2:	49 5f       	lddpc	pc,80013b04 <send_rt_stats+0x23c>
80013ab4:	50 73       	stdsp	sp[0x1c],r3
80013ab6:	74 47       	ld.w	r7,r10[0x10]
80013ab8:	00 00       	add	r0,r0
80013aba:	00 00       	add	r0,r0
80013abc:	50 69       	stdsp	sp[0x18],r9
80013abe:	74 63       	ld.w	r3,r10[0x18]
80013ac0:	68 52       	ld.w	r2,r4[0x14]
80013ac2:	50 69       	stdsp	sp[0x18],r9
80013ac4:	64 5f       	ld.w	pc,r2[0x14]
80013ac6:	49 5f       	lddpc	pc,80013b18 <send_rt_stats+0x250>
80013ac8:	50 72       	stdsp	sp[0x1c],r2
80013aca:	65 47       	ld.w	r7,r2[0x50]
80013acc:	00 00       	add	r0,r0
80013ace:	00 00       	add	r0,r0
80013ad0:	50 69       	stdsp	sp[0x18],r9
80013ad2:	74 63       	ld.w	r3,r10[0x18]
80013ad4:	68 52       	ld.w	r2,r4[0x14]
80013ad6:	50 69       	stdsp	sp[0x18],r9
80013ad8:	64 5f       	ld.w	pc,r2[0x14]
80013ada:	44 5f       	lddsp	pc,sp[0x114]
80013adc:	47 61       	lddsp	r1,sp[0x1d8]
80013ade:	69 6e       	ld.w	lr,r4[0x58]
80013ae0:	00 00       	add	r0,r0
80013ae2:	00 00       	add	r0,r0
80013ae4:	50 69       	stdsp	sp[0x18],r9
80013ae6:	74 63       	ld.w	r3,r10[0x18]
80013ae8:	68 41       	ld.w	r1,r4[0x10]
80013aea:	50 69       	stdsp	sp[0x18],r9
80013aec:	64 5f       	ld.w	pc,r2[0x14]
80013aee:	50 5f       	stdsp	sp[0x14],pc
80013af0:	47 00       	lddsp	r0,sp[0x1c0]
80013af2:	00 00       	add	r0,r0
80013af4:	50 69       	stdsp	sp[0x18],r9
80013af6:	74 63       	ld.w	r3,r10[0x18]
80013af8:	68 41       	ld.w	r1,r4[0x10]
80013afa:	50 69       	stdsp	sp[0x18],r9
80013afc:	64 5f       	ld.w	pc,r2[0x14]
80013afe:	49 5f       	lddpc	pc,80013b50 <send_rt_stats+0x288>
80013b00:	50 73       	stdsp	sp[0x1c],r3
80013b02:	74 47       	ld.w	r7,r10[0x10]
80013b04:	00 00       	add	r0,r0
80013b06:	00 00       	add	r0,r0
80013b08:	50 69       	stdsp	sp[0x18],r9
80013b0a:	74 63       	ld.w	r3,r10[0x18]
80013b0c:	68 41       	ld.w	r1,r4[0x10]
80013b0e:	50 69       	stdsp	sp[0x18],r9
80013b10:	64 5f       	ld.w	pc,r2[0x14]
80013b12:	49 5f       	lddpc	pc,80013b64 <send_rt_stats+0x29c>
80013b14:	50 72       	stdsp	sp[0x1c],r2
80013b16:	65 47       	ld.w	r7,r2[0x50]
80013b18:	00 00       	add	r0,r0
80013b1a:	00 00       	add	r0,r0
80013b1c:	50 69       	stdsp	sp[0x18],r9
80013b1e:	74 63       	ld.w	r3,r10[0x18]
80013b20:	68 41       	ld.w	r1,r4[0x10]
80013b22:	50 69       	stdsp	sp[0x18],r9
80013b24:	64 5f       	ld.w	pc,r2[0x14]
80013b26:	44 5f       	lddsp	pc,sp[0x114]
80013b28:	47 61       	lddsp	r1,sp[0x1d8]
80013b2a:	69 6e       	ld.w	lr,r4[0x58]
80013b2c:	00 00       	add	r0,r0
80013b2e:	00 00       	add	r0,r0
80013b30:	59 61       	cp.w	r1,22
80013b32:	77 52       	ld.w	r2,r11[0x54]
80013b34:	50 69       	stdsp	sp[0x18],r9
80013b36:	64 5f       	ld.w	pc,r2[0x14]
80013b38:	50 5f       	stdsp	sp[0x14],pc
80013b3a:	47 00       	lddsp	r0,sp[0x1c0]
80013b3c:	59 61       	cp.w	r1,22
80013b3e:	77 52       	ld.w	r2,r11[0x54]
80013b40:	50 69       	stdsp	sp[0x18],r9
80013b42:	64 5f       	ld.w	pc,r2[0x14]
80013b44:	49 5f       	lddpc	pc,80013b98 <send_rt_stats+0x2d0>
80013b46:	50 73       	stdsp	sp[0x1c],r3
80013b48:	74 47       	ld.w	r7,r10[0x10]
80013b4a:	00 00       	add	r0,r0
80013b4c:	59 61       	cp.w	r1,22
80013b4e:	77 52       	ld.w	r2,r11[0x54]
80013b50:	50 69       	stdsp	sp[0x18],r9
80013b52:	64 5f       	ld.w	pc,r2[0x14]
80013b54:	49 5f       	lddpc	pc,80013ba8 <send_rt_stats+0x2e0>
80013b56:	50 72       	stdsp	sp[0x1c],r2
80013b58:	65 47       	ld.w	r7,r2[0x50]
80013b5a:	00 00       	add	r0,r0
80013b5c:	59 61       	cp.w	r1,22
80013b5e:	77 52       	ld.w	r2,r11[0x54]
80013b60:	50 69       	stdsp	sp[0x18],r9
80013b62:	64 5f       	ld.w	pc,r2[0x14]
80013b64:	44 5f       	lddsp	pc,sp[0x114]
80013b66:	47 61       	lddsp	r1,sp[0x1d8]
80013b68:	69 6e       	ld.w	lr,r4[0x58]
80013b6a:	00 00       	add	r0,r0
80013b6c:	59 61       	cp.w	r1,22
80013b6e:	77 41       	ld.w	r1,r11[0x50]
80013b70:	50 69       	stdsp	sp[0x18],r9
80013b72:	64 5f       	ld.w	pc,r2[0x14]
80013b74:	50 5f       	stdsp	sp[0x14],pc
80013b76:	47 00       	lddsp	r0,sp[0x1c0]
80013b78:	59 61       	cp.w	r1,22
80013b7a:	77 41       	ld.w	r1,r11[0x50]
80013b7c:	50 69       	stdsp	sp[0x18],r9
80013b7e:	64 5f       	ld.w	pc,r2[0x14]
80013b80:	49 5f       	lddpc	pc,80013bd4 <send_rt_stats+0x30c>
80013b82:	50 73       	stdsp	sp[0x1c],r3
80013b84:	74 47       	ld.w	r7,r10[0x10]
80013b86:	00 00       	add	r0,r0
80013b88:	59 61       	cp.w	r1,22
80013b8a:	77 41       	ld.w	r1,r11[0x50]
80013b8c:	50 69       	stdsp	sp[0x18],r9
80013b8e:	64 5f       	ld.w	pc,r2[0x14]
80013b90:	49 5f       	lddpc	pc,80013be4 <send_rt_stats+0x31c>
80013b92:	50 72       	stdsp	sp[0x1c],r2
80013b94:	65 47       	ld.w	r7,r2[0x50]
80013b96:	00 00       	add	r0,r0
80013b98:	59 61       	cp.w	r1,22
80013b9a:	77 41       	ld.w	r1,r11[0x50]
80013b9c:	50 69       	stdsp	sp[0x18],r9
80013b9e:	64 5f       	ld.w	pc,r2[0x14]
80013ba0:	44 5f       	lddsp	pc,sp[0x114]
80013ba2:	47 61       	lddsp	r1,sp[0x1d8]
80013ba4:	69 6e       	ld.w	lr,r4[0x58]
80013ba6:	00 00       	add	r0,r0
80013ba8:	52 6f       	stdsp	sp[0x98],pc
80013baa:	6c 6c       	ld.w	r12,r6[0x18]
80013bac:	56 50       	stdsp	sp[0x194],r0
80013bae:	69 64       	ld.w	r4,r4[0x58]
80013bb0:	5f 50       	srlt	r0
80013bb2:	5f 47       	srge	r7
80013bb4:	00 00       	add	r0,r0
80013bb6:	00 00       	add	r0,r0
80013bb8:	52 6f       	stdsp	sp[0x98],pc
80013bba:	6c 6c       	ld.w	r12,r6[0x18]
80013bbc:	56 50       	stdsp	sp[0x194],r0
80013bbe:	69 64       	ld.w	r4,r4[0x58]
80013bc0:	5f 49       	srge	r9
80013bc2:	5f 50       	srlt	r0
80013bc4:	73 74       	ld.w	r4,r9[0x5c]
80013bc6:	47 00       	lddsp	r0,sp[0x1c0]
80013bc8:	52 6f       	stdsp	sp[0x98],pc
80013bca:	6c 6c       	ld.w	r12,r6[0x18]
80013bcc:	56 50       	stdsp	sp[0x194],r0
80013bce:	69 64       	ld.w	r4,r4[0x58]
80013bd0:	5f 49       	srge	r9
80013bd2:	5f 50       	srlt	r0
80013bd4:	72 65       	ld.w	r5,r9[0x18]
80013bd6:	47 00       	lddsp	r0,sp[0x1c0]
80013bd8:	52 6f       	stdsp	sp[0x98],pc
80013bda:	6c 6c       	ld.w	r12,r6[0x18]
80013bdc:	56 50       	stdsp	sp[0x194],r0
80013bde:	69 64       	ld.w	r4,r4[0x58]
80013be0:	5f 44       	srge	r4
80013be2:	5f 47       	srge	r7
80013be4:	61 69       	ld.w	r9,r0[0x58]
80013be6:	6e 00       	ld.w	r0,r7[0x0]
80013be8:	50 69       	stdsp	sp[0x18],r9
80013bea:	74 63       	ld.w	r3,r10[0x18]
80013bec:	68 56       	ld.w	r6,r4[0x14]
80013bee:	50 69       	stdsp	sp[0x18],r9
80013bf0:	64 5f       	ld.w	pc,r2[0x14]
80013bf2:	50 5f       	stdsp	sp[0x14],pc
80013bf4:	47 00       	lddsp	r0,sp[0x1c0]
80013bf6:	00 00       	add	r0,r0
80013bf8:	50 69       	stdsp	sp[0x18],r9
80013bfa:	74 63       	ld.w	r3,r10[0x18]
80013bfc:	68 56       	ld.w	r6,r4[0x14]
80013bfe:	50 69       	stdsp	sp[0x18],r9
80013c00:	64 5f       	ld.w	pc,r2[0x14]
80013c02:	49 5f       	lddpc	pc,80013c54 <send_rt_stats+0x38c>
80013c04:	50 73       	stdsp	sp[0x1c],r3
80013c06:	74 47       	ld.w	r7,r10[0x10]
80013c08:	00 00       	add	r0,r0
80013c0a:	00 00       	add	r0,r0
80013c0c:	50 69       	stdsp	sp[0x18],r9
80013c0e:	74 63       	ld.w	r3,r10[0x18]
80013c10:	68 56       	ld.w	r6,r4[0x14]
80013c12:	50 69       	stdsp	sp[0x18],r9
80013c14:	64 5f       	ld.w	pc,r2[0x14]
80013c16:	49 5f       	lddpc	pc,80013c68 <send_rt_stats+0x3a0>
80013c18:	50 72       	stdsp	sp[0x1c],r2
80013c1a:	65 47       	ld.w	r7,r2[0x50]
80013c1c:	00 00       	add	r0,r0
80013c1e:	00 00       	add	r0,r0
80013c20:	50 69       	stdsp	sp[0x18],r9
80013c22:	74 63       	ld.w	r3,r10[0x18]
80013c24:	68 56       	ld.w	r6,r4[0x14]
80013c26:	50 69       	stdsp	sp[0x18],r9
80013c28:	64 5f       	ld.w	pc,r2[0x14]
80013c2a:	44 5f       	lddsp	pc,sp[0x114]
80013c2c:	47 61       	lddsp	r1,sp[0x1d8]
80013c2e:	69 6e       	ld.w	lr,r4[0x58]
80013c30:	00 00       	add	r0,r0
80013c32:	00 00       	add	r0,r0
80013c34:	54 68       	stdsp	sp[0x118],r8
80013c36:	72 56       	ld.w	r6,r9[0x14]
80013c38:	50 69       	stdsp	sp[0x18],r9
80013c3a:	64 5f       	ld.w	pc,r2[0x14]
80013c3c:	50 5f       	stdsp	sp[0x14],pc
80013c3e:	47 00       	lddsp	r0,sp[0x1c0]
80013c40:	54 68       	stdsp	sp[0x118],r8
80013c42:	72 56       	ld.w	r6,r9[0x14]
80013c44:	50 69       	stdsp	sp[0x18],r9
80013c46:	64 5f       	ld.w	pc,r2[0x14]
80013c48:	49 5f       	lddpc	pc,80013c9c <send_rt_stats+0x3d4>
80013c4a:	50 73       	stdsp	sp[0x1c],r3
80013c4c:	74 47       	ld.w	r7,r10[0x10]
80013c4e:	00 00       	add	r0,r0
80013c50:	54 68       	stdsp	sp[0x118],r8
80013c52:	72 56       	ld.w	r6,r9[0x14]
80013c54:	50 69       	stdsp	sp[0x18],r9
80013c56:	64 5f       	ld.w	pc,r2[0x14]
80013c58:	49 5f       	lddpc	pc,80013cac <send_rt_stats+0x3e4>
80013c5a:	50 72       	stdsp	sp[0x1c],r2
80013c5c:	65 47       	ld.w	r7,r2[0x50]
80013c5e:	00 00       	add	r0,r0
80013c60:	54 68       	stdsp	sp[0x118],r8
80013c62:	72 56       	ld.w	r6,r9[0x14]
80013c64:	50 69       	stdsp	sp[0x18],r9
80013c66:	64 5f       	ld.w	pc,r2[0x14]
80013c68:	44 5f       	lddsp	pc,sp[0x114]
80013c6a:	47 61       	lddsp	r1,sp[0x1d8]
80013c6c:	69 6e       	ld.w	lr,r4[0x58]
80013c6e:	00 00       	add	r0,r0
80013c70:	54 68       	stdsp	sp[0x118],r8
80013c72:	72 56       	ld.w	r6,r9[0x14]
80013c74:	50 69       	stdsp	sp[0x18],r9
80013c76:	64 5f       	ld.w	pc,r2[0x14]
80013c78:	44 5f       	lddsp	pc,sp[0x114]
80013c7a:	4c 50       	lddpc	r0,80013d8c <send_rt_stats+0x4c4>
80013c7c:	46 00       	lddsp	r0,sp[0x180]
80013c7e:	00 00       	add	r0,r0
80013c80:	54 68       	stdsp	sp[0x118],r8
80013c82:	72 56       	ld.w	r6,r9[0x14]
80013c84:	50 69       	stdsp	sp[0x18],r9
80013c86:	64 5f       	ld.w	pc,r2[0x14]
80013c88:	73 6f       	ld.w	pc,r9[0x58]
80013c8a:	66 74       	ld.w	r4,r3[0x1c]
80013c8c:	00 00       	add	r0,r0
80013c8e:	00 00       	add	r0,r0
80013c90:	51 46       	stdsp	sp[0x50],r6
80013c92:	5f 6b       	srmi	r11
80013c94:	70 5f       	ld.w	pc,r8[0x14]
80013c96:	61 63       	ld.w	r3,r0[0x58]
80013c98:	63 00       	ld.w	r0,r1[0x40]
80013c9a:	00 00       	add	r0,r0
80013c9c:	51 46       	stdsp	sp[0x50],r6
80013c9e:	5f 6b       	srmi	r11
80013ca0:	70 5f       	ld.w	pc,r8[0x14]
80013ca2:	6d 61       	ld.w	r1,r6[0x58]
80013ca4:	67 00       	ld.w	r0,r3[0x40]
80013ca6:	00 00       	add	r0,r0
80013ca8:	42 69       	lddsp	r9,sp[0x98]
80013caa:	61 73       	ld.w	r3,r0[0x5c]
80013cac:	5f 47       	srge	r7
80013cae:	79 72       	ld.w	r2,r12[0x5c]
80013cb0:	6f 5f       	ld.w	pc,r7[0x54]
80013cb2:	58 00       	cp.w	r0,0
80013cb4:	42 69       	lddsp	r9,sp[0x98]
80013cb6:	61 73       	ld.w	r3,r0[0x5c]
80013cb8:	5f 47       	srge	r7
80013cba:	79 72       	ld.w	r2,r12[0x5c]
80013cbc:	6f 5f       	ld.w	pc,r7[0x54]
80013cbe:	59 00       	cp.w	r0,16
80013cc0:	42 69       	lddsp	r9,sp[0x98]
80013cc2:	61 73       	ld.w	r3,r0[0x5c]
80013cc4:	5f 47       	srge	r7
80013cc6:	79 72       	ld.w	r2,r12[0x5c]
80013cc8:	6f 5f       	ld.w	pc,r7[0x54]
80013cca:	5a 00       	cp.w	r0,-32
80013ccc:	42 69       	lddsp	r9,sp[0x98]
80013cce:	61 73       	ld.w	r3,r0[0x5c]
80013cd0:	5f 41       	srge	r1
80013cd2:	63 63       	ld.w	r3,r1[0x58]
80013cd4:	5f 58       	srlt	r8
80013cd6:	00 00       	add	r0,r0
80013cd8:	42 69       	lddsp	r9,sp[0x98]
80013cda:	61 73       	ld.w	r3,r0[0x5c]
80013cdc:	5f 41       	srge	r1
80013cde:	63 63       	ld.w	r3,r1[0x58]
80013ce0:	5f 59       	srlt	r9
80013ce2:	00 00       	add	r0,r0
80013ce4:	42 69       	lddsp	r9,sp[0x98]
80013ce6:	61 73       	ld.w	r3,r0[0x5c]
80013ce8:	5f 41       	srge	r1
80013cea:	63 63       	ld.w	r3,r1[0x58]
80013cec:	5f 5a       	srlt	r10
80013cee:	00 00       	add	r0,r0
80013cf0:	42 69       	lddsp	r9,sp[0x98]
80013cf2:	61 73       	ld.w	r3,r0[0x5c]
80013cf4:	5f 4d       	srge	sp
80013cf6:	61 67       	ld.w	r7,r0[0x58]
80013cf8:	5f 58       	srlt	r8
80013cfa:	00 00       	add	r0,r0
80013cfc:	42 69       	lddsp	r9,sp[0x98]
80013cfe:	61 73       	ld.w	r3,r0[0x5c]
80013d00:	5f 4d       	srge	sp
80013d02:	61 67       	ld.w	r7,r0[0x58]
80013d04:	5f 59       	srlt	r9
80013d06:	00 00       	add	r0,r0
80013d08:	42 69       	lddsp	r9,sp[0x98]
80013d0a:	61 73       	ld.w	r3,r0[0x5c]
80013d0c:	5f 4d       	srge	sp
80013d0e:	61 67       	ld.w	r7,r0[0x58]
80013d10:	5f 5a       	srlt	r10
80013d12:	00 00       	add	r0,r0
80013d14:	53 63       	stdsp	sp[0xd8],r3
80013d16:	61 6c       	ld.w	r12,r0[0x58]
80013d18:	65 5f       	ld.w	pc,r2[0x54]
80013d1a:	47 79       	lddsp	r9,sp[0x1dc]
80013d1c:	72 6f       	ld.w	pc,r9[0x18]
80013d1e:	5f 58       	srlt	r8
80013d20:	00 00       	add	r0,r0
80013d22:	00 00       	add	r0,r0
80013d24:	53 63       	stdsp	sp[0xd8],r3
80013d26:	61 6c       	ld.w	r12,r0[0x58]
80013d28:	65 5f       	ld.w	pc,r2[0x54]
80013d2a:	47 79       	lddsp	r9,sp[0x1dc]
80013d2c:	72 6f       	ld.w	pc,r9[0x18]
80013d2e:	5f 59       	srlt	r9
80013d30:	00 00       	add	r0,r0
80013d32:	00 00       	add	r0,r0
80013d34:	53 63       	stdsp	sp[0xd8],r3
80013d36:	61 6c       	ld.w	r12,r0[0x58]
80013d38:	65 5f       	ld.w	pc,r2[0x54]
80013d3a:	47 79       	lddsp	r9,sp[0x1dc]
80013d3c:	72 6f       	ld.w	pc,r9[0x18]
80013d3e:	5f 5a       	srlt	r10
80013d40:	00 00       	add	r0,r0
80013d42:	00 00       	add	r0,r0
80013d44:	53 63       	stdsp	sp[0xd8],r3
80013d46:	61 6c       	ld.w	r12,r0[0x58]
80013d48:	65 5f       	ld.w	pc,r2[0x54]
80013d4a:	41 63       	lddsp	r3,sp[0x58]
80013d4c:	63 5f       	ld.w	pc,r1[0x54]
80013d4e:	58 00       	cp.w	r0,0
80013d50:	53 63       	stdsp	sp[0xd8],r3
80013d52:	61 6c       	ld.w	r12,r0[0x58]
80013d54:	65 5f       	ld.w	pc,r2[0x54]
80013d56:	41 63       	lddsp	r3,sp[0x58]
80013d58:	63 5f       	ld.w	pc,r1[0x54]
80013d5a:	59 00       	cp.w	r0,16
80013d5c:	53 63       	stdsp	sp[0xd8],r3
80013d5e:	61 6c       	ld.w	r12,r0[0x58]
80013d60:	65 5f       	ld.w	pc,r2[0x54]
80013d62:	41 63       	lddsp	r3,sp[0x58]
80013d64:	63 5f       	ld.w	pc,r1[0x54]
80013d66:	5a 00       	cp.w	r0,-32
80013d68:	53 63       	stdsp	sp[0xd8],r3
80013d6a:	61 6c       	ld.w	r12,r0[0x58]
80013d6c:	65 5f       	ld.w	pc,r2[0x54]
80013d6e:	4d 61       	lddpc	r1,80013ec4 <add_PID_parameters+0xe4>
80013d70:	67 5f       	ld.w	pc,r3[0x54]
80013d72:	58 00       	cp.w	r0,0
80013d74:	53 63       	stdsp	sp[0xd8],r3
80013d76:	61 6c       	ld.w	r12,r0[0x58]
80013d78:	65 5f       	ld.w	pc,r2[0x54]
80013d7a:	4d 61       	lddpc	r1,80013ed0 <add_PID_parameters+0xf0>
80013d7c:	67 5f       	ld.w	pc,r3[0x54]
80013d7e:	59 00       	cp.w	r0,16
80013d80:	53 63       	stdsp	sp[0xd8],r3
80013d82:	61 6c       	ld.w	r12,r0[0x58]
80013d84:	65 5f       	ld.w	pc,r2[0x54]
80013d86:	4d 61       	lddpc	r1,80013edc <add_PID_parameters+0xfc>
80013d88:	67 5f       	ld.w	pc,r3[0x54]
80013d8a:	5a 00       	cp.w	r0,-32
80013d8c:	49 44       	lddpc	r4,80013ddc <send_rt_stats+0x514>
80013d8e:	5f 53       	srlt	r3
80013d90:	79 73       	ld.w	r3,r12[0x5c]
80013d92:	74 65       	ld.w	r5,r10[0x18]
80013d94:	6d 00       	ld.w	r0,r6[0x40]
80013d96:	00 00       	add	r0,r0
80013d98:	49 44       	lddpc	r4,80013de8 <add_PID_parameters+0x8>
80013d9a:	5f 50       	srlt	r0
80013d9c:	6c 61       	ld.w	r1,r6[0x18]
80013d9e:	6e 6e       	ld.w	lr,r7[0x18]
80013da0:	65 72       	ld.w	r2,r2[0x5c]
80013da2:	00 00       	add	r0,r0
80013da4:	50 6f       	stdsp	sp[0x18],pc
80013da6:	73 5f       	ld.w	pc,r9[0x54]
80013da8:	6b 70       	ld.w	r0,r5[0x5c]
80013daa:	5f 61       	srmi	r1
80013dac:	6c 74       	ld.w	r4,r6[0x1c]
80013dae:	00 00       	add	r0,r0
80013db0:	50 6f       	stdsp	sp[0x18],pc
80013db2:	73 5f       	ld.w	pc,r9[0x54]
80013db4:	6b 70       	ld.w	r0,r5[0x5c]
80013db6:	5f 76       	srpl	r6
80013db8:	65 6c       	ld.w	r12,r2[0x58]
80013dba:	62 00       	ld.w	r0,r1[0x0]
80013dbc:	50 6f       	stdsp	sp[0x18],pc
80013dbe:	73 5f       	ld.w	pc,r9[0x54]
80013dc0:	6b 70       	ld.w	r0,r5[0x5c]
80013dc2:	5f 70       	srpl	r0
80013dc4:	6f 73       	ld.w	r3,r7[0x5c]
80013dc6:	30 00       	mov	r0,0
80013dc8:	50 6f       	stdsp	sp[0x18],pc
80013dca:	73 5f       	ld.w	pc,r9[0x54]
80013dcc:	6b 70       	ld.w	r0,r5[0x5c]
80013dce:	5f 70       	srpl	r0
80013dd0:	6f 73       	ld.w	r3,r7[0x5c]
80013dd2:	31 00       	mov	r0,16
80013dd4:	50 6f       	stdsp	sp[0x18],pc
80013dd6:	73 5f       	ld.w	pc,r9[0x54]
80013dd8:	6b 70       	ld.w	r0,r5[0x5c]
80013dda:	5f 70       	srpl	r0
80013ddc:	6f 73       	ld.w	r3,r7[0x5c]
80013dde:	32 00       	mov	r0,32

80013de0 <add_PID_parameters>:


void add_PID_parameters(void) {
80013de0:	eb cd 40 c0 	pushm	r6-r7,lr
80013de4:	1a 97       	mov	r7,sp
80013de6:	20 3d       	sub	sp,12
80013de8:	fe f6 04 cc 	ld.w	r6,pc[1228]
80013dec:	1e 26       	rsub	r6,pc
	Stabiliser_t* rate_stabiliser = &centralData->stabiliser_stack.rate_stabiliser;
80013dee:	ec f8 00 00 	ld.w	r8,r6[0]
80013df2:	70 08       	ld.w	r8,r8[0x0]
80013df4:	f0 c8 fe 60 	sub	r8,r8,-416
80013df8:	ef 48 ff f4 	st.w	r7[-12],r8
	Stabiliser_t* attitude_stabiliser = &centralData->stabiliser_stack.attitude_stabiliser;
80013dfc:	ec f8 00 00 	ld.w	r8,r6[0]
80013e00:	70 08       	ld.w	r8,r8[0x0]
80013e02:	f0 c8 fd 24 	sub	r8,r8,-732
80013e06:	ef 48 ff f8 	st.w	r7[-8],r8
	Stabiliser_t* velocity_stabiliser= &centralData->stabiliser_stack.velocity_stabiliser;
80013e0a:	ec f8 00 00 	ld.w	r8,r6[0]
80013e0e:	70 08       	ld.w	r8,r8[0x0]
80013e10:	f0 c8 fb e8 	sub	r8,r8,-1048
80013e14:	ef 48 ff fc 	st.w	r7[-4],r8

	
	add_parameter_int32(&centralData->simulation_mode, "Sim_mode");
80013e18:	ec f8 00 00 	ld.w	r8,r6[0]
80013e1c:	70 08       	ld.w	r8,r8[0x0]
80013e1e:	f0 c8 ef 40 	sub	r8,r8,-4288
80013e22:	fe cb 04 16 	sub	r11,pc,1046
80013e26:	10 9c       	mov	r12,r8
80013e28:	f0 16 01 fd 	mcall	r6[2036]
	// Roll rate PID
	add_parameter_float(&rate_stabiliser->rpy_controller[ROLL].p_gain, "RollRPid_P_G");
80013e2c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80013e30:	fe cb 04 18 	sub	r11,pc,1048
80013e34:	10 9c       	mov	r12,r8
80013e36:	f0 16 00 0e 	mcall	r6[56]
	//add_parameter_float(&rate_stabiliser->rpy_controller[ROLL].clip_max, "RollRPid_P_CLmx");
	//add_parameter_float(&rate_stabiliser->rpy_controller[ROLL].clip_min, "RollRPid_P_CLmn");
	//add_parameter_float(&rate_stabiliser->rpy_controller[ROLL].integrator.clip, "RollRPid_I_CLip");
	add_parameter_float(&rate_stabiliser->rpy_controller[ROLL].integrator.postgain, "RollRPid_I_PstG");
80013e3a:	ee f8 ff f4 	ld.w	r8,r7[-12]
80013e3e:	2f 08       	sub	r8,-16
80013e40:	fe cb 04 18 	sub	r11,pc,1048
80013e44:	10 9c       	mov	r12,r8
80013e46:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&rate_stabiliser->rpy_controller[ROLL].integrator.pregain, "RollRPid_I_PreG");
80013e4a:	ee f8 ff f4 	ld.w	r8,r7[-12]
80013e4e:	2f 48       	sub	r8,-12
80013e50:	fe cb 04 18 	sub	r11,pc,1048
80013e54:	10 9c       	mov	r12,r8
80013e56:	f0 16 00 0e 	mcall	r6[56]
	//add_parameter_float(&rate_stabiliser->rpy_controller[ROLL].differentiator.clip, "RollRPid_D_Clip");
	add_parameter_float(&rate_stabiliser->rpy_controller[ROLL].differentiator.gain, "RollRPid_D_Gain");
80013e5a:	ee f8 ff f4 	ld.w	r8,r7[-12]
80013e5e:	2e 08       	sub	r8,-32
80013e60:	fe cb 04 18 	sub	r11,pc,1048
80013e64:	10 9c       	mov	r12,r8
80013e66:	f0 16 00 0e 	mcall	r6[56]
	//add_parameter_float(&rate_stabiliser->rpy_controller[ROLL].differentiator.LPF, "RollRPid_D_LPF");
	
	// Roll attitude PID
	add_parameter_float(&attitude_stabiliser->rpy_controller[ROLL].p_gain, "RollAPid_P_G");
80013e6a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80013e6e:	fe cb 04 16 	sub	r11,pc,1046
80013e72:	10 9c       	mov	r12,r8
80013e74:	f0 16 00 0e 	mcall	r6[56]
	//add_parameter_float(&attitude_stabiliser->rpy_controller[ROLL].clip_max, "RollAPid_P_CLmx");
	//add_parameter_float(&attitude_stabiliser->rpy_controller[ROLL].clip_min, "RollAPid_P_CLmn");
	//add_parameter_float(&attitude_stabiliser->rpy_controller[ROLL].integrator.clip, "RollAPid_I_CLip");
	add_parameter_float(&attitude_stabiliser->rpy_controller[ROLL].integrator.postgain, "RollAPid_I_PstG");
80013e78:	ee f8 ff f8 	ld.w	r8,r7[-8]
80013e7c:	2f 08       	sub	r8,-16
80013e7e:	fe cb 04 16 	sub	r11,pc,1046
80013e82:	10 9c       	mov	r12,r8
80013e84:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&attitude_stabiliser->rpy_controller[ROLL].integrator.pregain, "RollAPid_I_PreG");
80013e88:	ee f8 ff f8 	ld.w	r8,r7[-8]
80013e8c:	2f 48       	sub	r8,-12
80013e8e:	fe cb 04 16 	sub	r11,pc,1046
80013e92:	10 9c       	mov	r12,r8
80013e94:	f0 16 00 0e 	mcall	r6[56]
	//add_parameter_float(&attitude_stabiliser->rpy_controller[ROLL].differentiator.clip, "RollAPid_D_Clip");
	add_parameter_float(&attitude_stabiliser->rpy_controller[ROLL].differentiator.gain, "RollAPid_D_Gain");
80013e98:	ee f8 ff f8 	ld.w	r8,r7[-8]
80013e9c:	2e 08       	sub	r8,-32
80013e9e:	fe cb 04 16 	sub	r11,pc,1046
80013ea2:	10 9c       	mov	r12,r8
80013ea4:	f0 16 00 0e 	mcall	r6[56]
	//add_parameter_float(&attitude_stabiliser->rpy_controller[ROLL].differentiator.LPF, "RollAPid_D_LPF");

	// Pitch rate PID
	add_parameter_float(&rate_stabiliser->rpy_controller[PITCH].p_gain, "PitchRPid_P_G");
80013ea8:	ee f8 ff f4 	ld.w	r8,r7[-12]
80013eac:	2b c8       	sub	r8,-68
80013eae:	fe cb 04 16 	sub	r11,pc,1046
80013eb2:	10 9c       	mov	r12,r8
80013eb4:	f0 16 00 0e 	mcall	r6[56]
	//add_parameter_float(&rate_stabiliser->rpy_controller[PITCH].clip_max, "PitchRPid_P_CLmx");
	//add_parameter_float(&rate_stabiliser->rpy_controller[PITCH].clip_min, "PitchRPid_P_CLmn");
	//add_parameter_float(&rate_stabiliser->rpy_controller[PITCH].integrator.clip, "PitchRPid_I_CLip");
	add_parameter_float(&rate_stabiliser->rpy_controller[PITCH].integrator.postgain, "PitchRPid_I_PstG");
80013eb8:	ee f8 ff f4 	ld.w	r8,r7[-12]
80013ebc:	2a c8       	sub	r8,-84
80013ebe:	fe cb 04 16 	sub	r11,pc,1046
80013ec2:	10 9c       	mov	r12,r8
80013ec4:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&rate_stabiliser->rpy_controller[PITCH].integrator.pregain, "PitchRPid_I_PreG");
80013ec8:	ee f8 ff f4 	ld.w	r8,r7[-12]
80013ecc:	2b 08       	sub	r8,-80
80013ece:	fe cb 04 12 	sub	r11,pc,1042
80013ed2:	10 9c       	mov	r12,r8
80013ed4:	f0 16 00 0e 	mcall	r6[56]
	//add_parameter_float(&rate_stabiliser->rpy_controller[PITCH].differentiator.clip, "PitchRPid_D_Clip");
	add_parameter_float(&rate_stabiliser->rpy_controller[PITCH].differentiator.gain, "PitchRPid_D_Gain");
80013ed8:	ee f8 ff f4 	ld.w	r8,r7[-12]
80013edc:	29 c8       	sub	r8,-100
80013ede:	fe cb 04 0e 	sub	r11,pc,1038
80013ee2:	10 9c       	mov	r12,r8
80013ee4:	f0 16 00 0e 	mcall	r6[56]
	//add_parameter_float(&rate_stabiliser->rpy_controller[PITCH].differentiator.LPF, "PitchRPid_D_LPF");
	
	// Pitch attitude PID
	add_parameter_float(&attitude_stabiliser->rpy_controller[PITCH].p_gain, "PitchAPid_P_G");
80013ee8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80013eec:	2b c8       	sub	r8,-68
80013eee:	fe cb 04 0a 	sub	r11,pc,1034
80013ef2:	10 9c       	mov	r12,r8
80013ef4:	f0 16 00 0e 	mcall	r6[56]
	//add_parameter_float(&attitude_stabiliser->rpy_controller[PITCH].clip_max, "PitchAPid_P_CLmx");
	//add_parameter_float(&attitude_stabiliser->rpy_controller[PITCH].clip_min, "PitchAPid_P_CLmn");
	//add_parameter_float(&attitude_stabiliser->rpy_controller[PITCH].integrator.clip, "PitchAPid_I_CLip");
	add_parameter_float(&attitude_stabiliser->rpy_controller[PITCH].integrator.postgain, "PitchAPid_I_PstG");
80013ef8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80013efc:	2a c8       	sub	r8,-84
80013efe:	fe cb 04 0a 	sub	r11,pc,1034
80013f02:	10 9c       	mov	r12,r8
80013f04:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&attitude_stabiliser->rpy_controller[PITCH].integrator.pregain, "PitchAPid_I_PreG");
80013f08:	ee f8 ff f8 	ld.w	r8,r7[-8]
80013f0c:	2b 08       	sub	r8,-80
80013f0e:	fe cb 04 06 	sub	r11,pc,1030
80013f12:	10 9c       	mov	r12,r8
80013f14:	f0 16 00 0e 	mcall	r6[56]
	//add_parameter_float(&attitude_stabiliser->rpy_controller[PITCH].differentiator.clip, "PitchAPid_D_Clip");
	add_parameter_float(&attitude_stabiliser->rpy_controller[PITCH].differentiator.gain, "PitchAPid_D_Gain");
80013f18:	ee f8 ff f8 	ld.w	r8,r7[-8]
80013f1c:	29 c8       	sub	r8,-100
80013f1e:	fe cb 04 02 	sub	r11,pc,1026
80013f22:	10 9c       	mov	r12,r8
80013f24:	f0 16 00 0e 	mcall	r6[56]
	//add_parameter_float(&attitude_stabiliser->rpy_controller[PITCH].differentiator.LPF, "PitchAPid_D_LPF");

	// Yaw rate PID
	add_parameter_float(&rate_stabiliser->rpy_controller[YAW].p_gain, "YawRPid_P_G");
80013f28:	ee f8 ff f4 	ld.w	r8,r7[-12]
80013f2c:	f0 c8 ff 78 	sub	r8,r8,-136
80013f30:	fe cb 04 00 	sub	r11,pc,1024
80013f34:	10 9c       	mov	r12,r8
80013f36:	f0 16 00 0e 	mcall	r6[56]
	//add_parameter_float(&rate_stabiliser->rpy_controller[YAW].clip_max, "YawRPid_P_CLmx");
	//add_parameter_float(&rate_stabiliser->rpy_controller[YAW].clip_min, "YawRPid_P_CLmn");
	//add_parameter_float(&rate_stabiliser->rpy_controller[YAW].integrator.clip, "YawRPid_I_CLip");
	add_parameter_float(&rate_stabiliser->rpy_controller[YAW].integrator.postgain, "YawRPid_I_PstG");
80013f3a:	ee f8 ff f4 	ld.w	r8,r7[-12]
80013f3e:	f0 c8 ff 68 	sub	r8,r8,-152
80013f42:	fe cb 04 06 	sub	r11,pc,1030
80013f46:	10 9c       	mov	r12,r8
80013f48:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&rate_stabiliser->rpy_controller[YAW].integrator.pregain, "YawRPid_I_PreG");
80013f4c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80013f50:	f0 c8 ff 6c 	sub	r8,r8,-148
80013f54:	fe cb 04 08 	sub	r11,pc,1032
80013f58:	10 9c       	mov	r12,r8
80013f5a:	f0 16 00 0e 	mcall	r6[56]
	//add_parameter_float(&rate_stabiliser->rpy_controller[YAW].differentiator.clip, "YawRPid_D_Clip");
	add_parameter_float(&rate_stabiliser->rpy_controller[YAW].differentiator.gain, "YawRPid_D_Gain");
80013f5e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80013f62:	f0 c8 ff 58 	sub	r8,r8,-168
80013f66:	fe cb 04 0a 	sub	r11,pc,1034
80013f6a:	10 9c       	mov	r12,r8
80013f6c:	f0 16 00 0e 	mcall	r6[56]
	//add_parameter_float(&rate_stabiliser->rpy_controller[YAW].differentiator.LPF, "YawRPid_D_LPF");
	
	// Yaw attitude PID
	add_parameter_float(&attitude_stabiliser->rpy_controller[YAW].p_gain, "YawAPid_P_G");
80013f70:	ee f8 ff f8 	ld.w	r8,r7[-8]
80013f74:	f0 c8 ff 78 	sub	r8,r8,-136
80013f78:	fe cb 04 0c 	sub	r11,pc,1036
80013f7c:	10 9c       	mov	r12,r8
80013f7e:	f0 16 00 0e 	mcall	r6[56]
	//add_parameter_float(&attitude_stabiliser->rpy_controller[YAW].clip_max, "YawAPid_P_CLmx");
	//add_parameter_float(&attitude_stabiliser->rpy_controller[YAW].clip_min, "YawAPid_P_CLmn");
	//add_parameter_float(&attitude_stabiliser->rpy_controller[YAW].integrator.clip, "YawAPid_I_CLip");
	add_parameter_float(&attitude_stabiliser->rpy_controller[YAW].integrator.postgain, "YawAPid_I_PstG");
80013f82:	ee f8 ff f8 	ld.w	r8,r7[-8]
80013f86:	f0 c8 ff 68 	sub	r8,r8,-152
80013f8a:	fe cb 04 12 	sub	r11,pc,1042
80013f8e:	10 9c       	mov	r12,r8
80013f90:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&attitude_stabiliser->rpy_controller[YAW].integrator.pregain, "YawAPid_I_PreG");
80013f94:	ee f8 ff f8 	ld.w	r8,r7[-8]
80013f98:	f0 c8 ff 6c 	sub	r8,r8,-148
80013f9c:	fe cb 04 14 	sub	r11,pc,1044
80013fa0:	10 9c       	mov	r12,r8
80013fa2:	f0 16 00 0e 	mcall	r6[56]
	//add_parameter_float(&attitude_stabiliser->rpy_controller[YAW].differentiator.clip, "YawAPid_D_Clip");
	add_parameter_float(&attitude_stabiliser->rpy_controller[YAW].differentiator.gain, "YawAPid_D_Gain");
80013fa6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80013faa:	f0 c8 ff 58 	sub	r8,r8,-168
80013fae:	fe cb 04 16 	sub	r11,pc,1046
80013fb2:	10 9c       	mov	r12,r8
80013fb4:	f0 16 00 0e 	mcall	r6[56]
	//add_parameter_float(&attitude_stabiliser->rpy_controller[YAW].differentiator.LPF, "YawAPid_D_LPF");


	// Roll velocity PID
	add_parameter_float(&velocity_stabiliser->rpy_controller[ROLL].p_gain, "RollVPid_P_G");
80013fb8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80013fbc:	fe cb 04 14 	sub	r11,pc,1044
80013fc0:	10 9c       	mov	r12,r8
80013fc2:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&velocity_stabiliser->rpy_controller[ROLL].integrator.postgain, "RollVPid_I_PstG");
80013fc6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80013fca:	2f 08       	sub	r8,-16
80013fcc:	fe cb 04 14 	sub	r11,pc,1044
80013fd0:	10 9c       	mov	r12,r8
80013fd2:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&velocity_stabiliser->rpy_controller[ROLL].integrator.pregain, "RollVPid_I_PreG");
80013fd6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80013fda:	2f 48       	sub	r8,-12
80013fdc:	fe cb 04 14 	sub	r11,pc,1044
80013fe0:	10 9c       	mov	r12,r8
80013fe2:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&velocity_stabiliser->rpy_controller[ROLL].differentiator.gain, "RollVPid_D_Gain");
80013fe6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80013fea:	2e 08       	sub	r8,-32
80013fec:	fe cb 04 14 	sub	r11,pc,1044
80013ff0:	10 9c       	mov	r12,r8
80013ff2:	f0 16 00 0e 	mcall	r6[56]

	// Pitch velocity PID
	add_parameter_float(&velocity_stabiliser->rpy_controller[PITCH].p_gain, "PitchVPid_P_G");
80013ff6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80013ffa:	2b c8       	sub	r8,-68
80013ffc:	fe cb 04 14 	sub	r11,pc,1044
80014000:	10 9c       	mov	r12,r8
80014002:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&velocity_stabiliser->rpy_controller[PITCH].integrator.postgain, "PitchVPid_I_PstG");
80014006:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001400a:	2a c8       	sub	r8,-84
8001400c:	fe cb 04 14 	sub	r11,pc,1044
80014010:	10 9c       	mov	r12,r8
80014012:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&velocity_stabiliser->rpy_controller[PITCH].integrator.pregain, "PitchVPid_I_PreG");
80014016:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001401a:	2b 08       	sub	r8,-80
8001401c:	fe cb 04 10 	sub	r11,pc,1040
80014020:	10 9c       	mov	r12,r8
80014022:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&velocity_stabiliser->rpy_controller[PITCH].differentiator.gain, "PitchVPid_D_Gain");
80014026:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001402a:	29 c8       	sub	r8,-100
8001402c:	fe cb 04 0c 	sub	r11,pc,1036
80014030:	10 9c       	mov	r12,r8
80014032:	f0 16 00 0e 	mcall	r6[56]

	// Thrust velocity PID
	add_parameter_float(&velocity_stabiliser->thrust_controller.p_gain, "ThrVPid_P_G");
80014036:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001403a:	f0 c8 ff 34 	sub	r8,r8,-204
8001403e:	fe cb 04 0a 	sub	r11,pc,1034
80014042:	10 9c       	mov	r12,r8
80014044:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&velocity_stabiliser->thrust_controller.integrator.postgain, "ThrVPid_I_PstG");
80014048:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001404c:	f0 c8 ff 24 	sub	r8,r8,-220
80014050:	fe cb 04 10 	sub	r11,pc,1040
80014054:	10 9c       	mov	r12,r8
80014056:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&velocity_stabiliser->thrust_controller.integrator.pregain, "ThrVPid_I_PreG");
8001405a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001405e:	f0 c8 ff 28 	sub	r8,r8,-216
80014062:	fe cb 04 12 	sub	r11,pc,1042
80014066:	10 9c       	mov	r12,r8
80014068:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&velocity_stabiliser->thrust_controller.differentiator.gain, "ThrVPid_D_Gain");
8001406c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80014070:	f0 c8 ff 14 	sub	r8,r8,-236
80014074:	fe cb 04 14 	sub	r11,pc,1044
80014078:	10 9c       	mov	r12,r8
8001407a:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&velocity_stabiliser->thrust_controller.differentiator.LPF, "ThrVPid_D_LPF");
8001407e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80014082:	f0 c8 ff 0c 	sub	r8,r8,-244
80014086:	fe cb 04 16 	sub	r11,pc,1046
8001408a:	10 9c       	mov	r12,r8
8001408c:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&velocity_stabiliser->thrust_controller.soft_zone_width, "ThrVPid_soft");
80014090:	ee f8 ff fc 	ld.w	r8,r7[-4]
80014094:	f0 c8 fe f4 	sub	r8,r8,-268
80014098:	fe cb 04 18 	sub	r11,pc,1048
8001409c:	10 9c       	mov	r12,r8
8001409e:	f0 16 00 0e 	mcall	r6[56]

	// qfilter
	add_parameter_float(&centralData->imu1.attitude.kp, "QF_kp_acc");
800140a2:	ec f8 00 00 	ld.w	r8,r6[0]
800140a6:	70 08       	ld.w	r8,r8[0x0]
800140a8:	f0 c8 ff 64 	sub	r8,r8,-156
800140ac:	fe cb 04 1c 	sub	r11,pc,1052
800140b0:	10 9c       	mov	r12,r8
800140b2:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&centralData->imu1.attitude.kp_mag, "QF_kp_mag");
800140b6:	ec f8 00 00 	ld.w	r8,r6[0]
800140ba:	70 08       	ld.w	r8,r8[0x0]
800140bc:	f0 c8 ff 5c 	sub	r8,r8,-164
800140c0:	fe cb 04 24 	sub	r11,pc,1060
800140c4:	10 9c       	mov	r12,r8
800140c6:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&attitude_stabiliser->rpy_controller[YAW].differentiator.gain, "YawAPid_D_Gain");
800140ca:	ee f8 ff f8 	ld.w	r8,r7[-8]
800140ce:	f0 c8 ff 58 	sub	r8,r8,-168
800140d2:	fe cb 05 3a 	sub	r11,pc,1338
800140d6:	10 9c       	mov	r12,r8
800140d8:	f0 16 00 0e 	mcall	r6[56]
	
	// Biaises
	add_parameter_float(&centralData->imu1.attitude.be[GYRO_OFFSET+X],"Bias_Gyro_X");
800140dc:	ec f8 00 00 	ld.w	r8,r6[0]
800140e0:	70 08       	ld.w	r8,r8[0x0]
800140e2:	2d 08       	sub	r8,-48
800140e4:	fe cb 04 3c 	sub	r11,pc,1084
800140e8:	10 9c       	mov	r12,r8
800140ea:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&centralData->imu1.attitude.be[GYRO_OFFSET+Y],"Bias_Gyro_Y");
800140ee:	ec f8 00 00 	ld.w	r8,r6[0]
800140f2:	70 08       	ld.w	r8,r8[0x0]
800140f4:	2c c8       	sub	r8,-52
800140f6:	fe cb 04 42 	sub	r11,pc,1090
800140fa:	10 9c       	mov	r12,r8
800140fc:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&centralData->imu1.attitude.be[GYRO_OFFSET+Z],"Bias_Gyro_Z");
80014100:	ec f8 00 00 	ld.w	r8,r6[0]
80014104:	70 08       	ld.w	r8,r8[0x0]
80014106:	2c 88       	sub	r8,-56
80014108:	fe cb 04 48 	sub	r11,pc,1096
8001410c:	10 9c       	mov	r12,r8
8001410e:	f0 16 00 0e 	mcall	r6[56]
	
	add_parameter_float(&centralData->imu1.attitude.be[ACC_OFFSET+X],"Bias_Acc_X");
80014112:	ec f8 00 00 	ld.w	r8,r6[0]
80014116:	70 08       	ld.w	r8,r8[0x0]
80014118:	2c 48       	sub	r8,-60
8001411a:	fe cb 04 4e 	sub	r11,pc,1102
8001411e:	10 9c       	mov	r12,r8
80014120:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&centralData->imu1.attitude.be[ACC_OFFSET+Y],"Bias_Acc_Y");
80014124:	ec f8 00 00 	ld.w	r8,r6[0]
80014128:	70 08       	ld.w	r8,r8[0x0]
8001412a:	2c 08       	sub	r8,-64
8001412c:	fe cb 04 54 	sub	r11,pc,1108
80014130:	10 9c       	mov	r12,r8
80014132:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&centralData->imu1.attitude.be[ACC_OFFSET+Z],"Bias_Acc_Z");
80014136:	ec f8 00 00 	ld.w	r8,r6[0]
8001413a:	70 08       	ld.w	r8,r8[0x0]
8001413c:	2b c8       	sub	r8,-68
8001413e:	fe cb 04 5a 	sub	r11,pc,1114
80014142:	10 9c       	mov	r12,r8
80014144:	f0 16 00 0e 	mcall	r6[56]
	
	add_parameter_float(&centralData->imu1.attitude.be[COMPASS_OFFSET+X],"Bias_Mag_X");
80014148:	ec f8 00 00 	ld.w	r8,r6[0]
8001414c:	70 08       	ld.w	r8,r8[0x0]
8001414e:	2b 88       	sub	r8,-72
80014150:	fe cb 04 60 	sub	r11,pc,1120
80014154:	10 9c       	mov	r12,r8
80014156:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&centralData->imu1.attitude.be[COMPASS_OFFSET+Y],"Bias_Mag_Y");
8001415a:	ec f8 00 00 	ld.w	r8,r6[0]
8001415e:	70 08       	ld.w	r8,r8[0x0]
80014160:	2b 48       	sub	r8,-76
80014162:	fe cb 04 66 	sub	r11,pc,1126
80014166:	10 9c       	mov	r12,r8
80014168:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&centralData->imu1.attitude.be[COMPASS_OFFSET+Z],"Bias_Mag_Z");
8001416c:	ec f8 00 00 	ld.w	r8,r6[0]
80014170:	70 08       	ld.w	r8,r8[0x0]
80014172:	2b 08       	sub	r8,-80
80014174:	fe cb 04 6c 	sub	r11,pc,1132
80014178:	10 9c       	mov	r12,r8
8001417a:	f0 16 00 0e 	mcall	r6[56]
	
	// Scale factor
	add_parameter_float(&centralData->imu1.raw_scale[GYRO_OFFSET+X],"Scale_Gyro_X");
8001417e:	ec f8 00 00 	ld.w	r8,r6[0]
80014182:	70 08       	ld.w	r8,r8[0x0]
80014184:	f0 c8 fe ec 	sub	r8,r8,-276
80014188:	fe cb 04 74 	sub	r11,pc,1140
8001418c:	10 9c       	mov	r12,r8
8001418e:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&centralData->imu1.raw_scale[GYRO_OFFSET+Y],"Scale_Gyro_Y");
80014192:	ec f8 00 00 	ld.w	r8,r6[0]
80014196:	70 08       	ld.w	r8,r8[0x0]
80014198:	f0 c8 fe e8 	sub	r8,r8,-280
8001419c:	fe cb 04 78 	sub	r11,pc,1144
800141a0:	10 9c       	mov	r12,r8
800141a2:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&centralData->imu1.raw_scale[GYRO_OFFSET+Z],"Scale_Gyro_Z");
800141a6:	ec f8 00 00 	ld.w	r8,r6[0]
800141aa:	70 08       	ld.w	r8,r8[0x0]
800141ac:	f0 c8 fe e4 	sub	r8,r8,-284
800141b0:	fe cb 04 7c 	sub	r11,pc,1148
800141b4:	10 9c       	mov	r12,r8
800141b6:	f0 16 00 0e 	mcall	r6[56]
	
	add_parameter_float(&centralData->imu1.raw_scale[ACC_OFFSET+X],"Scale_Acc_X");
800141ba:	ec f8 00 00 	ld.w	r8,r6[0]
800141be:	70 08       	ld.w	r8,r8[0x0]
800141c0:	f0 c8 fe e0 	sub	r8,r8,-288
800141c4:	fe cb 04 80 	sub	r11,pc,1152
800141c8:	10 9c       	mov	r12,r8
800141ca:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&centralData->imu1.raw_scale[ACC_OFFSET+Y],"Scale_Acc_Y");
800141ce:	ec f8 00 00 	ld.w	r8,r6[0]
800141d2:	70 08       	ld.w	r8,r8[0x0]
800141d4:	f0 c8 fe dc 	sub	r8,r8,-292
800141d8:	fe cb 04 88 	sub	r11,pc,1160
800141dc:	10 9c       	mov	r12,r8
800141de:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&centralData->imu1.raw_scale[ACC_OFFSET+Z],"Scale_Acc_Z");
800141e2:	ec f8 00 00 	ld.w	r8,r6[0]
800141e6:	70 08       	ld.w	r8,r8[0x0]
800141e8:	f0 c8 fe d8 	sub	r8,r8,-296
800141ec:	fe cb 04 90 	sub	r11,pc,1168
800141f0:	10 9c       	mov	r12,r8
800141f2:	f0 16 00 0e 	mcall	r6[56]
	
	add_parameter_float(&centralData->imu1.raw_scale[COMPASS_OFFSET+X],"Scale_Mag_X");
800141f6:	ec f8 00 00 	ld.w	r8,r6[0]
800141fa:	70 08       	ld.w	r8,r8[0x0]
800141fc:	f0 c8 fe d4 	sub	r8,r8,-300
80014200:	fe cb 04 98 	sub	r11,pc,1176
80014204:	10 9c       	mov	r12,r8
80014206:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&centralData->imu1.raw_scale[COMPASS_OFFSET+Y],"Scale_Mag_Y");
8001420a:	ec f8 00 00 	ld.w	r8,r6[0]
8001420e:	70 08       	ld.w	r8,r8[0x0]
80014210:	f0 c8 fe d0 	sub	r8,r8,-304
80014214:	fe cb 04 a0 	sub	r11,pc,1184
80014218:	10 9c       	mov	r12,r8
8001421a:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&centralData->imu1.raw_scale[COMPASS_OFFSET+Z],"Scale_Mag_Z");
8001421e:	ec f8 00 00 	ld.w	r8,r6[0]
80014222:	70 08       	ld.w	r8,r8[0x0]
80014224:	f0 c8 fe cc 	sub	r8,r8,-308
80014228:	fe cb 04 a8 	sub	r11,pc,1192
8001422c:	10 9c       	mov	r12,r8
8001422e:	f0 16 00 0e 	mcall	r6[56]
	
	add_parameter_uint8(&(mavlink_system.sysid),"ID_System");
80014232:	fe cb 04 a6 	sub	r11,pc,1190
80014236:	ec fc 00 74 	ld.w	r12,r6[116]
8001423a:	f0 16 00 d6 	mcall	r6[856]
	add_parameter_uint8(&(mavlink_mission_planner.sysid),"ID_Planner");
8001423e:	fe cb 04 a6 	sub	r11,pc,1190
80014242:	ec fc 00 c0 	ld.w	r12,r6[192]
80014246:	f0 16 00 d6 	mcall	r6[856]

	add_parameter_float(&centralData->position_estimator.kp_alt,"Pos_kp_alt");
8001424a:	ec f8 00 00 	ld.w	r8,r6[0]
8001424e:	70 08       	ld.w	r8,r8[0x0]
80014250:	f0 c8 f2 ac 	sub	r8,r8,-3412
80014254:	fe cb 04 b0 	sub	r11,pc,1200
80014258:	10 9c       	mov	r12,r8
8001425a:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&centralData->position_estimator.kp_vel_baro,"Pos_kp_velb");
8001425e:	ec f8 00 00 	ld.w	r8,r6[0]
80014262:	70 08       	ld.w	r8,r8[0x0]
80014264:	f0 c8 f2 a8 	sub	r8,r8,-3416
80014268:	fe cb 04 b8 	sub	r11,pc,1208
8001426c:	10 9c       	mov	r12,r8
8001426e:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&centralData->position_estimator.kp_pos[0],"Pos_kp_pos0");
80014272:	ec f8 00 00 	ld.w	r8,r6[0]
80014276:	70 08       	ld.w	r8,r8[0x0]
80014278:	f0 c8 f2 b8 	sub	r8,r8,-3400
8001427c:	fe cb 04 c0 	sub	r11,pc,1216
80014280:	10 9c       	mov	r12,r8
80014282:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&centralData->position_estimator.kp_pos[1],"Pos_kp_pos1");
80014286:	ec f8 00 00 	ld.w	r8,r6[0]
8001428a:	70 08       	ld.w	r8,r8[0x0]
8001428c:	f0 c8 f2 b4 	sub	r8,r8,-3404
80014290:	fe cb 04 c8 	sub	r11,pc,1224
80014294:	10 9c       	mov	r12,r8
80014296:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&centralData->position_estimator.kp_pos[2],"Pos_kp_pos2");
8001429a:	ec f8 00 00 	ld.w	r8,r6[0]
8001429e:	70 08       	ld.w	r8,r8[0x0]
800142a0:	f0 c8 f2 b0 	sub	r8,r8,-3408
800142a4:	fe cb 04 d0 	sub	r11,pc,1232
800142a8:	10 9c       	mov	r12,r8
800142aa:	f0 16 00 0e 	mcall	r6[56]
}
800142ae:	2f dd       	sub	sp,-12
800142b0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800142b4:	80 01       	ld.sh	r1,r0[0x0]
800142b6:	3c 70       	mov	r0,-57

800142b8 <control_waypoint_timeout>:


task_return_t control_waypoint_timeout () {
800142b8:	eb cd 40 c0 	pushm	r6-r7,lr
800142bc:	1a 97       	mov	r7,sp
800142be:	48 c6       	lddpc	r6,800142ec <control_waypoint_timeout+0x34>
800142c0:	1e 26       	rsub	r6,pc
	control_time_out_waypoint_msg(&(centralData->number_of_waypoints),&centralData->waypoint_receiving,&centralData->waypoint_sending);
800142c2:	ec f8 00 00 	ld.w	r8,r6[0]
800142c6:	70 08       	ld.w	r8,r8[0x0]
800142c8:	f0 ca ef 4b 	sub	r10,r8,-4277
800142cc:	ec f8 00 00 	ld.w	r8,r6[0]
800142d0:	70 08       	ld.w	r8,r8[0x0]
800142d2:	f0 c9 ef 4a 	sub	r9,r8,-4278
800142d6:	ec f8 00 00 	ld.w	r8,r6[0]
800142da:	70 08       	ld.w	r8,r8[0x0]
800142dc:	f0 c8 ef e4 	sub	r8,r8,-4124
800142e0:	12 9b       	mov	r11,r9
800142e2:	10 9c       	mov	r12,r8
800142e4:	f0 16 02 07 	mcall	r6[2076]
}
800142e8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800142ec:	80 01       	ld.sh	r1,r0[0x0]
800142ee:	41 44       	lddsp	r4,sp[0x50]
800142f0:	0a 20       	rsub	r0,r5
800142f2:	52 65       	stdsp	sp[0x98],r5
800142f4:	63 65       	ld.w	r5,r1[0x58]
800142f6:	69 76       	ld.w	r6,r4[0x5c]
800142f8:	65 64       	ld.w	r4,r2[0x58]
800142fa:	20 6d       	sub	sp,24
800142fc:	65 73       	ld.w	r3,r2[0x5c]
800142fe:	73 61       	ld.w	r1,r9[0x58]
80014300:	67 65       	ld.w	r5,r3[0x58]
80014302:	20 77       	sub	r7,7
80014304:	69 74       	ld.w	r4,r4[0x5c]
80014306:	68 20       	ld.w	r0,r4[0x8]
80014308:	49 44       	lddpc	r4,80014358 <handle_specific_messages+0x2a>
8001430a:	00 00       	add	r0,r0
8001430c:	20 66       	sub	r6,6
8001430e:	72 6f       	ld.w	pc,r9[0x18]
80014310:	6d 20       	ld.w	r0,r6[0x48]
80014312:	73 79       	ld.w	r9,r9[0x5c]
80014314:	73 74       	ld.w	r4,r9[0x5c]
80014316:	65 6d       	ld.w	sp,r2[0x58]
80014318:	00 00       	add	r0,r0
8001431a:	00 00       	add	r0,r0
8001431c:	20 66       	sub	r6,6
8001431e:	6f 72       	ld.w	r2,r7[0x5c]
80014320:	20 63       	sub	r3,6
80014322:	6f 6d       	ld.w	sp,r7[0x58]
80014324:	70 6f       	ld.w	pc,r8[0x18]
80014326:	6e 65       	ld.w	r5,r7[0x18]
80014328:	6e 74       	ld.w	r4,r7[0x1c]
8001432a:	00 00       	add	r0,r0
8001432c:	0a 00       	add	r0,r5

8001432e <handle_specific_messages>:

void handle_specific_messages (Mavlink_Received_t* rec) {
8001432e:	eb cd 40 c0 	pushm	r6-r7,lr
80014332:	1a 97       	mov	r7,sp
80014334:	20 1d       	sub	sp,4
80014336:	fe f6 03 16 	ld.w	r6,pc[790]
8001433a:	1e 26       	rsub	r6,pc
8001433c:	ef 4c ff fc 	st.w	r7[-4],r12
	if (rec->msg.sysid == MAVLINK_BASE_STATION_ID) {
80014340:	ee f8 ff fc 	ld.w	r8,r7[-4]
80014344:	11 d9       	ld.ub	r9,r8[0x5]
80014346:	3f f8       	mov	r8,-1
80014348:	f0 09 18 00 	cp.b	r9,r8
8001434c:	e0 81 01 6d 	brne	80014626 <handle_specific_messages+0x2f8>
		
		dbg_print("\n Received message with ID");
80014350:	fe cc 00 60 	sub	r12,pc,96
80014354:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(rec->msg.msgid, 10);
80014358:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001435c:	11 f8       	ld.ub	r8,r8[0x7]
8001435e:	30 ab       	mov	r11,10
80014360:	10 9c       	mov	r12,r8
80014362:	f0 16 00 04 	mcall	r6[16]
		dbg_print(" from system");
80014366:	fe cc 00 5a 	sub	r12,pc,90
8001436a:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(rec->msg.sysid, 10);
8001436e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80014372:	11 d8       	ld.ub	r8,r8[0x5]
80014374:	30 ab       	mov	r11,10
80014376:	10 9c       	mov	r12,r8
80014378:	f0 16 00 04 	mcall	r6[16]
		dbg_print(" for component");
8001437c:	fe cc 00 60 	sub	r12,pc,96
80014380:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(rec->msg.compid,10);
80014384:	ee f8 ff fc 	ld.w	r8,r7[-4]
80014388:	11 e8       	ld.ub	r8,r8[0x6]
8001438a:	30 ab       	mov	r11,10
8001438c:	10 9c       	mov	r12,r8
8001438e:	f0 16 00 04 	mcall	r6[16]
		dbg_print( "\n");
80014392:	fe cc 00 66 	sub	r12,pc,102
80014396:	f0 16 00 01 	mcall	r6[4]
		
		switch(rec->msg.msgid) {
8001439a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001439e:	11 f8       	ld.ub	r8,r8[0x7]
800143a0:	20 b8       	sub	r8,11
800143a2:	e0 48 00 41 	cp.w	r8,65
800143a6:	e0 8b 01 4c 	brhi	8001463e <handle_specific_messages+0x310>
800143aa:	fe c9 ff f6 	sub	r9,pc,-10
800143ae:	f2 08 00 2f 	add	pc,r9,r8<<0x2
800143b2:	00 00       	add	r0,r0
800143b4:	e0 8f 01 1c 	bral	800145ec <handle_specific_messages+0x2be>
800143b8:	e0 8f 01 45 	bral	80014642 <handle_specific_messages+0x314>
800143bc:	e0 8f 01 43 	bral	80014642 <handle_specific_messages+0x314>
800143c0:	e0 8f 01 41 	bral	80014642 <handle_specific_messages+0x314>
800143c4:	e0 8f 01 3f 	bral	80014642 <handle_specific_messages+0x314>
800143c8:	e0 8f 01 3d 	bral	80014642 <handle_specific_messages+0x314>
800143cc:	e0 8f 01 3b 	bral	80014642 <handle_specific_messages+0x314>
800143d0:	e0 8f 01 39 	bral	80014642 <handle_specific_messages+0x314>
800143d4:	e0 8f 01 37 	bral	80014642 <handle_specific_messages+0x314>
800143d8:	e0 8f 01 35 	bral	80014642 <handle_specific_messages+0x314>
800143dc:	e0 8f 01 33 	bral	80014642 <handle_specific_messages+0x314>
800143e0:	e0 8f 01 31 	bral	80014642 <handle_specific_messages+0x314>
800143e4:	e0 8f 01 2f 	bral	80014642 <handle_specific_messages+0x314>
800143e8:	e0 8f 01 2d 	bral	80014642 <handle_specific_messages+0x314>
800143ec:	e0 8f 01 2b 	bral	80014642 <handle_specific_messages+0x314>
800143f0:	e0 8f 01 29 	bral	80014642 <handle_specific_messages+0x314>
800143f4:	e0 8f 01 27 	bral	80014642 <handle_specific_messages+0x314>
800143f8:	e0 8f 01 25 	bral	80014642 <handle_specific_messages+0x314>
800143fc:	e0 8f 01 23 	bral	80014642 <handle_specific_messages+0x314>
80014400:	e0 8f 01 21 	bral	80014642 <handle_specific_messages+0x314>
80014404:	e0 8f 01 1f 	bral	80014642 <handle_specific_messages+0x314>
80014408:	e0 8f 01 1d 	bral	80014642 <handle_specific_messages+0x314>
8001440c:	e0 8f 01 1b 	bral	80014642 <handle_specific_messages+0x314>
80014410:	e0 8f 01 19 	bral	80014642 <handle_specific_messages+0x314>
80014414:	e0 8f 01 17 	bral	80014642 <handle_specific_messages+0x314>
80014418:	e0 8f 01 15 	bral	80014642 <handle_specific_messages+0x314>
8001441c:	e0 8f 01 13 	bral	80014642 <handle_specific_messages+0x314>
80014420:	e0 8f 01 11 	bral	80014642 <handle_specific_messages+0x314>
80014424:	e0 8f 00 4c 	bral	800144bc <handle_specific_messages+0x18e>
80014428:	e0 8f 00 65 	bral	800144f2 <handle_specific_messages+0x1c4>
8001442c:	e0 8f 00 7e 	bral	80014528 <handle_specific_messages+0x1fa>
80014430:	e0 8f 01 09 	bral	80014642 <handle_specific_messages+0x314>
80014434:	e0 8f 00 8d 	bral	8001454e <handle_specific_messages+0x220>
80014438:	e0 8f 00 a5 	bral	80014582 <handle_specific_messages+0x254>
8001443c:	e0 8f 00 bc 	bral	800145b4 <handle_specific_messages+0x286>
80014440:	e0 8f 01 01 	bral	80014642 <handle_specific_messages+0x314>
80014444:	e0 8f 00 c9 	bral	800145d6 <handle_specific_messages+0x2a8>
80014448:	e0 8f 00 fd 	bral	80014642 <handle_specific_messages+0x314>
8001444c:	e0 8f 00 fb 	bral	80014642 <handle_specific_messages+0x314>
80014450:	e0 8f 00 f9 	bral	80014642 <handle_specific_messages+0x314>
80014454:	e0 8f 00 f7 	bral	80014642 <handle_specific_messages+0x314>
80014458:	e0 8f 00 f5 	bral	80014642 <handle_specific_messages+0x314>
8001445c:	e0 8f 00 f3 	bral	80014642 <handle_specific_messages+0x314>
80014460:	e0 8f 00 f1 	bral	80014642 <handle_specific_messages+0x314>
80014464:	e0 8f 00 ef 	bral	80014642 <handle_specific_messages+0x314>
80014468:	e0 8f 00 ed 	bral	80014642 <handle_specific_messages+0x314>
8001446c:	e0 8f 00 eb 	bral	80014642 <handle_specific_messages+0x314>
80014470:	e0 8f 00 e9 	bral	80014642 <handle_specific_messages+0x314>
80014474:	e0 8f 00 e7 	bral	80014642 <handle_specific_messages+0x314>
80014478:	e0 8f 00 e5 	bral	80014642 <handle_specific_messages+0x314>
8001447c:	e0 8f 00 e3 	bral	80014642 <handle_specific_messages+0x314>
80014480:	e0 8f 00 e1 	bral	80014642 <handle_specific_messages+0x314>
80014484:	e0 8f 00 df 	bral	80014642 <handle_specific_messages+0x314>
80014488:	e0 8f 00 dd 	bral	80014642 <handle_specific_messages+0x314>
8001448c:	e0 8f 00 db 	bral	80014642 <handle_specific_messages+0x314>
80014490:	e0 8f 00 d9 	bral	80014642 <handle_specific_messages+0x314>
80014494:	e0 8f 00 d7 	bral	80014642 <handle_specific_messages+0x314>
80014498:	e0 8f 00 d5 	bral	80014642 <handle_specific_messages+0x314>
8001449c:	e0 8f 00 d3 	bral	80014642 <handle_specific_messages+0x314>
800144a0:	e0 8f 00 d1 	bral	80014642 <handle_specific_messages+0x314>
800144a4:	e0 8f 00 cf 	bral	80014642 <handle_specific_messages+0x314>
800144a8:	e0 8f 00 cd 	bral	80014642 <handle_specific_messages+0x314>
800144ac:	e0 8f 00 cb 	bral	80014642 <handle_specific_messages+0x314>
800144b0:	e0 8f 00 c9 	bral	80014642 <handle_specific_messages+0x314>
800144b4:	e0 8f 00 c7 	bral	80014642 <handle_specific_messages+0x314>
800144b8:	e0 8f 00 b2 	bral	8001461c <handle_specific_messages+0x2ee>
				case MAVLINK_MSG_ID_MISSION_ITEM: { // 39
					suspend_downstream(500000);
800144bc:	e6 7c a1 20 	mov	r12,500000
800144c0:	f0 16 00 71 	mcall	r6[452]
					receive_waypoint(rec, centralData->waypoint_list, centralData->number_of_waypoints,&centralData->waypoint_receiving);
800144c4:	ec f8 00 00 	ld.w	r8,r6[0]
800144c8:	70 08       	ld.w	r8,r8[0x0]
800144ca:	f0 c9 ef 4a 	sub	r9,r8,-4278
800144ce:	ec f8 00 00 	ld.w	r8,r6[0]
800144d2:	70 08       	ld.w	r8,r8[0x0]
800144d4:	f1 08 10 1c 	ld.sh	r8,r8[4124]
800144d8:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
800144dc:	ec f8 00 00 	ld.w	r8,r6[0]
800144e0:	70 08       	ld.w	r8,r8[0x0]
800144e2:	f0 c8 f1 f4 	sub	r8,r8,-3596
800144e6:	10 9b       	mov	r11,r8
800144e8:	ee fc ff fc 	ld.w	r12,r7[-4]
800144ec:	f0 16 01 5f 	mcall	r6[1404]
					//flush_mavlink();
				}
				break;
800144f0:	ca a8       	rjmp	80014644 <handle_specific_messages+0x316>
				case MAVLINK_MSG_ID_MISSION_REQUEST : { // 40
					suspend_downstream(500000);
800144f2:	e6 7c a1 20 	mov	r12,500000
800144f6:	f0 16 00 71 	mcall	r6[452]
					send_waypoint(rec, centralData->waypoint_list, centralData->number_of_waypoints,&centralData->waypoint_sending);
800144fa:	ec f8 00 00 	ld.w	r8,r6[0]
800144fe:	70 08       	ld.w	r8,r8[0x0]
80014500:	f0 c9 ef 4b 	sub	r9,r8,-4277
80014504:	ec f8 00 00 	ld.w	r8,r6[0]
80014508:	70 08       	ld.w	r8,r8[0x0]
8001450a:	f1 08 10 1c 	ld.sh	r8,r8[4124]
8001450e:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
80014512:	ec f8 00 00 	ld.w	r8,r6[0]
80014516:	70 08       	ld.w	r8,r8[0x0]
80014518:	f0 c8 f1 f4 	sub	r8,r8,-3596
8001451c:	10 9b       	mov	r11,r8
8001451e:	ee fc ff fc 	ld.w	r12,r7[-4]
80014522:	f0 16 01 81 	mcall	r6[1540]
					//flush_mavlink();
				}
				break;
80014526:	c8 f8       	rjmp	80014644 <handle_specific_messages+0x316>
				case MAVLINK_MSG_ID_MISSION_SET_CURRENT : { // 41
					set_current_wp(rec, centralData->waypoint_list, centralData->number_of_waypoints);
80014528:	ec f8 00 00 	ld.w	r8,r6[0]
8001452c:	70 08       	ld.w	r8,r8[0x0]
8001452e:	f1 08 10 1c 	ld.sh	r8,r8[4124]
80014532:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
80014536:	ec f8 00 00 	ld.w	r8,r6[0]
8001453a:	70 08       	ld.w	r8,r8[0x0]
8001453c:	f0 c8 f1 f4 	sub	r8,r8,-3596
80014540:	12 9a       	mov	r10,r9
80014542:	10 9b       	mov	r11,r8
80014544:	ee fc ff fc 	ld.w	r12,r7[-4]
80014548:	f0 16 01 6c 	mcall	r6[1456]
				}
				break;
8001454c:	c7 c8       	rjmp	80014644 <handle_specific_messages+0x316>
				case MAVLINK_MSG_ID_MISSION_REQUEST_LIST: { // 43
					// this initiates all waypoints being sent to the base-station - therefore, we pause the downstream telemetry to free the channel
					// (at least until we have a radio system with guaranteed bandwidth)
					suspend_downstream(500000);
8001454e:	e6 7c a1 20 	mov	r12,500000
80014552:	f0 16 00 71 	mcall	r6[452]
					send_count(rec, centralData->number_of_waypoints,&centralData->waypoint_receiving,&centralData->waypoint_sending);
80014556:	ec f8 00 00 	ld.w	r8,r6[0]
8001455a:	70 08       	ld.w	r8,r8[0x0]
8001455c:	f0 c9 ef 4b 	sub	r9,r8,-4277
80014560:	ec f8 00 00 	ld.w	r8,r6[0]
80014564:	70 08       	ld.w	r8,r8[0x0]
80014566:	f0 ca ef 4a 	sub	r10,r8,-4278
8001456a:	ec f8 00 00 	ld.w	r8,r6[0]
8001456e:	70 08       	ld.w	r8,r8[0x0]
80014570:	f1 08 10 1c 	ld.sh	r8,r8[4124]
80014574:	5c 78       	castu.h	r8
80014576:	10 9b       	mov	r11,r8
80014578:	ee fc ff fc 	ld.w	r12,r7[-4]
8001457c:	f0 16 01 a0 	mcall	r6[1664]
					//flush_mavlink();
				}
				break;
80014580:	c6 28       	rjmp	80014644 <handle_specific_messages+0x316>
				case MAVLINK_MSG_ID_MISSION_COUNT : { // 44
					// this initiates all waypoints being sent from base-station - therefore, we pause the downstream telemetry to free the channel
					// (at least until we have a radio system with guaranteed bandwidth)
					suspend_downstream(500000);
80014582:	e6 7c a1 20 	mov	r12,500000
80014586:	f0 16 00 71 	mcall	r6[452]
					receive_count(rec, &(centralData->number_of_waypoints),&centralData->waypoint_receiving,&centralData->waypoint_sending);
8001458a:	ec f8 00 00 	ld.w	r8,r6[0]
8001458e:	70 08       	ld.w	r8,r8[0x0]
80014590:	f0 c9 ef 4b 	sub	r9,r8,-4277
80014594:	ec f8 00 00 	ld.w	r8,r6[0]
80014598:	70 08       	ld.w	r8,r8[0x0]
8001459a:	f0 ca ef 4a 	sub	r10,r8,-4278
8001459e:	ec f8 00 00 	ld.w	r8,r6[0]
800145a2:	70 08       	ld.w	r8,r8[0x0]
800145a4:	f0 c8 ef e4 	sub	r8,r8,-4124
800145a8:	10 9b       	mov	r11,r8
800145aa:	ee fc ff fc 	ld.w	r12,r7[-4]
800145ae:	f0 16 02 1a 	mcall	r6[2152]
				}
				break;
800145b2:	c4 98       	rjmp	80014644 <handle_specific_messages+0x316>
				case MAVLINK_MSG_ID_MISSION_CLEAR_ALL : { // 45
					clear_waypoint_list(rec, &(centralData->number_of_waypoints),&centralData->waypoint_set);
800145b4:	ec f8 00 00 	ld.w	r8,r6[0]
800145b8:	70 08       	ld.w	r8,r8[0x0]
800145ba:	f0 c9 ef 4c 	sub	r9,r8,-4276
800145be:	ec f8 00 00 	ld.w	r8,r6[0]
800145c2:	70 08       	ld.w	r8,r8[0x0]
800145c4:	f0 c8 ef e4 	sub	r8,r8,-4124
800145c8:	12 9a       	mov	r10,r9
800145ca:	10 9b       	mov	r11,r8
800145cc:	ee fc ff fc 	ld.w	r12,r7[-4]
800145d0:	f0 16 01 76 	mcall	r6[1496]
				}
				break;
800145d4:	c3 88       	rjmp	80014644 <handle_specific_messages+0x316>
				case MAVLINK_MSG_ID_MISSION_ACK : { // 47
					receive_ack_msg(rec,&centralData->waypoint_sending);
800145d6:	ec f8 00 00 	ld.w	r8,r6[0]
800145da:	70 08       	ld.w	r8,r8[0x0]
800145dc:	f0 c8 ef 4b 	sub	r8,r8,-4277
800145e0:	10 9b       	mov	r11,r8
800145e2:	ee fc ff fc 	ld.w	r12,r7[-4]
800145e6:	f0 16 01 ea 	mcall	r6[1960]
				}
				break;
800145ea:	c2 d8       	rjmp	80014644 <handle_specific_messages+0x316>
				case MAVLINK_MSG_ID_SET_MODE : { // 11
					set_mav_mode(rec, &centralData->mav_mode, &(centralData->mav_state),centralData->simulation_mode);
800145ec:	ec f8 00 00 	ld.w	r8,r6[0]
800145f0:	70 08       	ld.w	r8,r8[0x0]
800145f2:	f0 f8 10 c0 	ld.w	r8,r8[4288]
800145f6:	5c 58       	castu.b	r8
800145f8:	10 99       	mov	r9,r8
800145fa:	ec f8 00 00 	ld.w	r8,r6[0]
800145fe:	70 08       	ld.w	r8,r8[0x0]
80014600:	f0 ca ef 43 	sub	r10,r8,-4285
80014604:	ec f8 00 00 	ld.w	r8,r6[0]
80014608:	70 08       	ld.w	r8,r8[0x0]
8001460a:	f0 c8 ef 44 	sub	r8,r8,-4284
8001460e:	10 9b       	mov	r11,r8
80014610:	ee fc ff fc 	ld.w	r12,r7[-4]
80014614:	f0 16 01 c7 	mcall	r6[1820]
				}
				break;
80014618:	d7 03       	nop
8001461a:	c1 58       	rjmp	80014644 <handle_specific_messages+0x316>
				case MAVLINK_MSG_ID_COMMAND_LONG : { // 76
					receive_message_long(rec);
8001461c:	ee fc ff fc 	ld.w	r12,r7[-4]
80014620:	f0 16 01 7c 	mcall	r6[1520]
80014624:	c1 08       	rjmp	80014644 <handle_specific_messages+0x316>
				}
				break;
		}
	} else if (rec->msg.msgid == MAVLINK_MSG_ID_GLOBAL_POSITION_INT)
80014626:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001462a:	11 f9       	ld.ub	r9,r8[0x7]
8001462c:	32 18       	mov	r8,33
8001462e:	f0 09 18 00 	cp.b	r9,r8
80014632:	c0 91       	brne	80014644 <handle_specific_messages+0x316>
		//dbg_print_num(rec->msg.sysid, 10);
		//dbg_print(" for component");
		//dbg_print_num(rec->msg.compid,10);
		//dbg_print( "\n");
		
		read_msg_from_neighbors(rec);
80014634:	ee fc ff fc 	ld.w	r12,r7[-4]
80014638:	f0 16 01 35 	mcall	r6[1236]
8001463c:	c0 48       	rjmp	80014644 <handle_specific_messages+0x316>
				case MAVLINK_MSG_ID_SET_MODE : { // 11
					set_mav_mode(rec, &centralData->mav_mode, &(centralData->mav_state),centralData->simulation_mode);
				}
				break;
				case MAVLINK_MSG_ID_COMMAND_LONG : { // 76
					receive_message_long(rec);
8001463e:	d7 03       	nop
80014640:	c0 28       	rjmp	80014644 <handle_specific_messages+0x316>
80014642:	d7 03       	nop
		//dbg_print_num(rec->msg.compid,10);
		//dbg_print( "\n");
		
		read_msg_from_neighbors(rec);
	}
}
80014644:	2f fd       	sub	sp,-4
80014646:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001464a:	00 00       	add	r0,r0
8001464c:	80 01       	ld.sh	r1,r0[0x0]
8001464e:	41 be       	lddsp	lr,sp[0x6c]
80014650:	70 61       	ld.w	r1,r8[0x18]
80014652:	72 61       	ld.w	r1,r9[0x18]
80014654:	6d 65       	ld.w	r5,r6[0x58]
80014656:	74 65       	ld.w	r5,r10[0x18]
80014658:	72 73       	ld.w	r3,r9[0x1c]
8001465a:	3a 00       	mov	r0,-96
8001465c:	2c 20       	sub	r0,-62
8001465e:	63 6f       	ld.w	pc,r1[0x58]
80014660:	6d 6d       	ld.w	sp,r6[0x58]
80014662:	61 6e       	ld.w	lr,r0[0x58]
80014664:	64 20       	ld.w	r0,r2[0x8]
80014666:	69 64       	ld.w	r4,r4[0x58]
80014668:	3a 00       	mov	r0,-96
8001466a:	00 00       	add	r0,r0
8001466c:	2c 20       	sub	r0,-62
8001466e:	63 6f       	ld.w	pc,r1[0x58]
80014670:	6e 66       	ld.w	r6,r7[0x18]
80014672:	69 72       	ld.w	r2,r4[0x5c]
80014674:	6d 61       	ld.w	r1,r6[0x58]
80014676:	74 69       	ld.w	r9,r10[0x18]
80014678:	6f 6e       	ld.w	lr,r7[0x58]
8001467a:	3a 00       	mov	r0,-96
8001467c:	52 65       	stdsp	sp[0x98],r5
8001467e:	61 64       	ld.w	r4,r0[0x58]
80014680:	69 6e       	ld.w	lr,r4[0x58]
80014682:	67 20       	ld.w	r0,r3[0x48]
80014684:	66 72       	ld.w	r2,r3[0x1c]
80014686:	6f 6d       	ld.w	sp,r7[0x58]
80014688:	20 66       	sub	r6,6
8001468a:	6c 61       	ld.w	r1,r6[0x18]
8001468c:	73 68       	ld.w	r8,r9[0x58]
8001468e:	63 2e       	ld.w	lr,r1[0x48]
80014690:	2e 2e       	sub	lr,-30
80014692:	0a 00       	add	r0,r5
80014694:	57 72       	stdsp	sp[0x1dc],r2
80014696:	69 74       	ld.w	r4,r4[0x5c]
80014698:	74 69       	ld.w	r9,r10[0x18]
8001469a:	6e 67       	ld.w	r7,r7[0x18]
8001469c:	20 74       	sub	r4,7
8001469e:	6f 20       	ld.w	r0,r7[0x48]
800146a0:	66 6c       	ld.w	r12,r3[0x18]
800146a2:	61 73       	ld.w	r3,r0[0x5c]
800146a4:	68 63       	ld.w	r3,r4[0x18]
800146a6:	0a 00       	add	r0,r5

800146a8 <receive_message_long>:

void receive_message_long(Mavlink_Received_t* rec)
{
800146a8:	eb cd 40 c0 	pushm	r6-r7,lr
800146ac:	1a 97       	mov	r7,sp
800146ae:	20 ad       	sub	sp,40
800146b0:	fe f6 04 cc 	ld.w	r6,pc[1228]
800146b4:	1e 26       	rsub	r6,pc
800146b6:	ef 4c ff d8 	st.w	r7[-40],r12
	mavlink_command_long_t packet;
	mavlink_msg_command_long_decode(&rec->msg,&packet);
800146ba:	ee f8 ff d8 	ld.w	r8,r7[-40]
800146be:	ee c9 00 24 	sub	r9,r7,36
800146c2:	12 9b       	mov	r11,r9
800146c4:	10 9c       	mov	r12,r8
800146c6:	fe b0 ea f9 	rcall	80011cb8 <mavlink_msg_command_long_decode>
	// Check if this message is for this system and subsystem
	// dbg_print("target_comp:");
	// dbg_print_num(packet.target_component,10);
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_system.sysid
	&&(uint8_t)packet.target_component == (uint8_t)0)
800146ca:	ef 39 ff fa 	ld.ub	r9,r7[-6]
800146ce:	ec f8 00 74 	ld.w	r8,r6[116]
800146d2:	11 88       	ld.ub	r8,r8[0x0]
	mavlink_command_long_t packet;
	mavlink_msg_command_long_decode(&rec->msg,&packet);
	// Check if this message is for this system and subsystem
	// dbg_print("target_comp:");
	// dbg_print_num(packet.target_component,10);
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_system.sysid
800146d4:	f0 09 18 00 	cp.b	r9,r8
800146d8:	e0 81 02 4e 	brne	80014b74 <receive_message_long+0x4cc>
	&&(uint8_t)packet.target_component == (uint8_t)0)
800146dc:	ef 38 ff fb 	ld.ub	r8,r7[-5]
	mavlink_command_long_t packet;
	mavlink_msg_command_long_decode(&rec->msg,&packet);
	// Check if this message is for this system and subsystem
	// dbg_print("target_comp:");
	// dbg_print_num(packet.target_component,10);
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_system.sysid
800146e0:	58 08       	cp.w	r8,0
800146e2:	e0 81 02 49 	brne	80014b74 <receive_message_long+0x4cc>
	&&(uint8_t)packet.target_component == (uint8_t)0)
	{
		// print packet command and parameters for debug
		dbg_print("parameters:");
800146e6:	fe cc 00 96 	sub	r12,pc,150
800146ea:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(packet.param1,10);
800146ee:	ee f8 ff dc 	ld.w	r8,r7[-36]
800146f2:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
800146f6:	30 ab       	mov	r11,10
800146f8:	10 9c       	mov	r12,r8
800146fa:	f0 16 00 04 	mcall	r6[16]
		dbg_print_num(packet.param2,10);
800146fe:	ee f8 ff e0 	ld.w	r8,r7[-32]
80014702:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80014706:	30 ab       	mov	r11,10
80014708:	10 9c       	mov	r12,r8
8001470a:	f0 16 00 04 	mcall	r6[16]
		dbg_print_num(packet.param3,10);
8001470e:	ee f8 ff e4 	ld.w	r8,r7[-28]
80014712:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80014716:	30 ab       	mov	r11,10
80014718:	10 9c       	mov	r12,r8
8001471a:	f0 16 00 04 	mcall	r6[16]
		dbg_print_num(packet.param4,10);
8001471e:	ee f8 ff e8 	ld.w	r8,r7[-24]
80014722:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80014726:	30 ab       	mov	r11,10
80014728:	10 9c       	mov	r12,r8
8001472a:	f0 16 00 04 	mcall	r6[16]
		dbg_print_num(packet.param5,10);
8001472e:	ee f8 ff ec 	ld.w	r8,r7[-20]
80014732:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80014736:	30 ab       	mov	r11,10
80014738:	10 9c       	mov	r12,r8
8001473a:	f0 16 00 04 	mcall	r6[16]
		dbg_print_num(packet.param6,10);
8001473e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80014742:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80014746:	30 ab       	mov	r11,10
80014748:	10 9c       	mov	r12,r8
8001474a:	f0 16 00 04 	mcall	r6[16]
		dbg_print_num(packet.param7,10);
8001474e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80014752:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80014756:	30 ab       	mov	r11,10
80014758:	10 9c       	mov	r12,r8
8001475a:	f0 16 00 04 	mcall	r6[16]
		dbg_print(", command id:");
8001475e:	fe cc 01 02 	sub	r12,pc,258
80014762:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(packet.command,10);
80014766:	ef 08 ff f8 	ld.sh	r8,r7[-8]
8001476a:	5c 78       	castu.h	r8
8001476c:	30 ab       	mov	r11,10
8001476e:	10 9c       	mov	r12,r8
80014770:	f0 16 00 04 	mcall	r6[16]
		dbg_print(", confirmation:");
80014774:	fe cc 01 08 	sub	r12,pc,264
80014778:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(packet.confirmation,10);
8001477c:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80014780:	30 ab       	mov	r11,10
80014782:	10 9c       	mov	r12,r8
80014784:	f0 16 00 04 	mcall	r6[16]
		dbg_print("\n");
80014788:	fe cc 04 5c 	sub	r12,pc,1116
8001478c:	f0 16 00 01 	mcall	r6[4]
		
		switch(packet.command) {
80014790:	ef 08 ff f8 	ld.sh	r8,r7[-8]
80014794:	5c 78       	castu.h	r8
80014796:	21 08       	sub	r8,16
80014798:	e0 48 00 e5 	cp.w	r8,229
8001479c:	e0 8b 01 ec 	brhi	80014b74 <receive_message_long+0x4cc>
800147a0:	fe c9 ff f8 	sub	r9,pc,-8
800147a4:	f2 08 00 2f 	add	pc,r9,r8<<0x2
800147a8:	e0 8f 01 e6 	bral	80014b74 <receive_message_long+0x4cc>
800147ac:	e0 8f 01 e4 	bral	80014b74 <receive_message_long+0x4cc>
800147b0:	e0 8f 01 e2 	bral	80014b74 <receive_message_long+0x4cc>
800147b4:	e0 8f 01 e0 	bral	80014b74 <receive_message_long+0x4cc>
800147b8:	e0 8f 01 de 	bral	80014b74 <receive_message_long+0x4cc>
800147bc:	e0 8f 01 dc 	bral	80014b74 <receive_message_long+0x4cc>
800147c0:	e0 8f 01 da 	bral	80014b74 <receive_message_long+0x4cc>
800147c4:	e0 8f 01 d8 	bral	80014b74 <receive_message_long+0x4cc>
800147c8:	e0 8f 01 d6 	bral	80014b74 <receive_message_long+0x4cc>
800147cc:	e0 8f 01 d4 	bral	80014b74 <receive_message_long+0x4cc>
800147d0:	e0 8f 01 d2 	bral	80014b74 <receive_message_long+0x4cc>
800147d4:	e0 8f 01 d0 	bral	80014b74 <receive_message_long+0x4cc>
800147d8:	e0 8f 01 ce 	bral	80014b74 <receive_message_long+0x4cc>
800147dc:	e0 8f 01 cc 	bral	80014b74 <receive_message_long+0x4cc>
800147e0:	e0 8f 01 ca 	bral	80014b74 <receive_message_long+0x4cc>
800147e4:	e0 8f 01 c8 	bral	80014b74 <receive_message_long+0x4cc>
800147e8:	e0 8f 01 c6 	bral	80014b74 <receive_message_long+0x4cc>
800147ec:	e0 8f 01 c4 	bral	80014b74 <receive_message_long+0x4cc>
800147f0:	e0 8f 01 c2 	bral	80014b74 <receive_message_long+0x4cc>
800147f4:	e0 8f 01 c0 	bral	80014b74 <receive_message_long+0x4cc>
800147f8:	e0 8f 01 be 	bral	80014b74 <receive_message_long+0x4cc>
800147fc:	e0 8f 01 bc 	bral	80014b74 <receive_message_long+0x4cc>
80014800:	e0 8f 01 ba 	bral	80014b74 <receive_message_long+0x4cc>
80014804:	e0 8f 01 b8 	bral	80014b74 <receive_message_long+0x4cc>
80014808:	e0 8f 01 b6 	bral	80014b74 <receive_message_long+0x4cc>
8001480c:	e0 8f 01 b4 	bral	80014b74 <receive_message_long+0x4cc>
80014810:	e0 8f 01 b2 	bral	80014b74 <receive_message_long+0x4cc>
80014814:	e0 8f 01 b0 	bral	80014b74 <receive_message_long+0x4cc>
80014818:	e0 8f 01 ae 	bral	80014b74 <receive_message_long+0x4cc>
8001481c:	e0 8f 01 ac 	bral	80014b74 <receive_message_long+0x4cc>
80014820:	e0 8f 01 aa 	bral	80014b74 <receive_message_long+0x4cc>
80014824:	e0 8f 01 a8 	bral	80014b74 <receive_message_long+0x4cc>
80014828:	e0 8f 01 a6 	bral	80014b74 <receive_message_long+0x4cc>
8001482c:	e0 8f 01 a4 	bral	80014b74 <receive_message_long+0x4cc>
80014830:	e0 8f 01 a2 	bral	80014b74 <receive_message_long+0x4cc>
80014834:	e0 8f 01 a0 	bral	80014b74 <receive_message_long+0x4cc>
80014838:	e0 8f 01 9e 	bral	80014b74 <receive_message_long+0x4cc>
8001483c:	e0 8f 01 9c 	bral	80014b74 <receive_message_long+0x4cc>
80014840:	e0 8f 01 9a 	bral	80014b74 <receive_message_long+0x4cc>
80014844:	e0 8f 01 98 	bral	80014b74 <receive_message_long+0x4cc>
80014848:	e0 8f 01 96 	bral	80014b74 <receive_message_long+0x4cc>
8001484c:	e0 8f 01 94 	bral	80014b74 <receive_message_long+0x4cc>
80014850:	e0 8f 01 92 	bral	80014b74 <receive_message_long+0x4cc>
80014854:	e0 8f 01 90 	bral	80014b74 <receive_message_long+0x4cc>
80014858:	e0 8f 01 8e 	bral	80014b74 <receive_message_long+0x4cc>
8001485c:	e0 8f 01 8c 	bral	80014b74 <receive_message_long+0x4cc>
80014860:	e0 8f 01 8a 	bral	80014b74 <receive_message_long+0x4cc>
80014864:	e0 8f 01 88 	bral	80014b74 <receive_message_long+0x4cc>
80014868:	e0 8f 01 86 	bral	80014b74 <receive_message_long+0x4cc>
8001486c:	e0 8f 01 84 	bral	80014b74 <receive_message_long+0x4cc>
80014870:	e0 8f 01 82 	bral	80014b74 <receive_message_long+0x4cc>
80014874:	e0 8f 01 80 	bral	80014b74 <receive_message_long+0x4cc>
80014878:	e0 8f 01 7e 	bral	80014b74 <receive_message_long+0x4cc>
8001487c:	e0 8f 01 7c 	bral	80014b74 <receive_message_long+0x4cc>
80014880:	e0 8f 01 7a 	bral	80014b74 <receive_message_long+0x4cc>
80014884:	e0 8f 01 78 	bral	80014b74 <receive_message_long+0x4cc>
80014888:	e0 8f 01 76 	bral	80014b74 <receive_message_long+0x4cc>
8001488c:	e0 8f 01 74 	bral	80014b74 <receive_message_long+0x4cc>
80014890:	e0 8f 01 72 	bral	80014b74 <receive_message_long+0x4cc>
80014894:	e0 8f 01 70 	bral	80014b74 <receive_message_long+0x4cc>
80014898:	e0 8f 01 6e 	bral	80014b74 <receive_message_long+0x4cc>
8001489c:	e0 8f 01 6c 	bral	80014b74 <receive_message_long+0x4cc>
800148a0:	e0 8f 01 6a 	bral	80014b74 <receive_message_long+0x4cc>
800148a4:	e0 8f 01 68 	bral	80014b74 <receive_message_long+0x4cc>
800148a8:	e0 8f 01 66 	bral	80014b74 <receive_message_long+0x4cc>
800148ac:	e0 8f 01 64 	bral	80014b74 <receive_message_long+0x4cc>
800148b0:	e0 8f 01 62 	bral	80014b74 <receive_message_long+0x4cc>
800148b4:	e0 8f 01 60 	bral	80014b74 <receive_message_long+0x4cc>
800148b8:	e0 8f 01 5e 	bral	80014b74 <receive_message_long+0x4cc>
800148bc:	e0 8f 01 5c 	bral	80014b74 <receive_message_long+0x4cc>
800148c0:	e0 8f 01 5a 	bral	80014b74 <receive_message_long+0x4cc>
800148c4:	e0 8f 01 58 	bral	80014b74 <receive_message_long+0x4cc>
800148c8:	e0 8f 01 56 	bral	80014b74 <receive_message_long+0x4cc>
800148cc:	e0 8f 01 54 	bral	80014b74 <receive_message_long+0x4cc>
800148d0:	e0 8f 01 52 	bral	80014b74 <receive_message_long+0x4cc>
800148d4:	e0 8f 01 50 	bral	80014b74 <receive_message_long+0x4cc>
800148d8:	e0 8f 01 4e 	bral	80014b74 <receive_message_long+0x4cc>
800148dc:	e0 8f 01 4c 	bral	80014b74 <receive_message_long+0x4cc>
800148e0:	e0 8f 01 4a 	bral	80014b74 <receive_message_long+0x4cc>
800148e4:	e0 8f 01 48 	bral	80014b74 <receive_message_long+0x4cc>
800148e8:	e0 8f 01 46 	bral	80014b74 <receive_message_long+0x4cc>
800148ec:	e0 8f 01 44 	bral	80014b74 <receive_message_long+0x4cc>
800148f0:	e0 8f 01 42 	bral	80014b74 <receive_message_long+0x4cc>
800148f4:	e0 8f 01 40 	bral	80014b74 <receive_message_long+0x4cc>
800148f8:	e0 8f 01 3e 	bral	80014b74 <receive_message_long+0x4cc>
800148fc:	e0 8f 01 3c 	bral	80014b74 <receive_message_long+0x4cc>
80014900:	e0 8f 01 3a 	bral	80014b74 <receive_message_long+0x4cc>
80014904:	e0 8f 01 38 	bral	80014b74 <receive_message_long+0x4cc>
80014908:	e0 8f 01 36 	bral	80014b74 <receive_message_long+0x4cc>
8001490c:	e0 8f 01 34 	bral	80014b74 <receive_message_long+0x4cc>
80014910:	e0 8f 01 32 	bral	80014b74 <receive_message_long+0x4cc>
80014914:	e0 8f 01 30 	bral	80014b74 <receive_message_long+0x4cc>
80014918:	e0 8f 01 2e 	bral	80014b74 <receive_message_long+0x4cc>
8001491c:	e0 8f 01 2c 	bral	80014b74 <receive_message_long+0x4cc>
80014920:	e0 8f 01 2a 	bral	80014b74 <receive_message_long+0x4cc>
80014924:	e0 8f 01 28 	bral	80014b74 <receive_message_long+0x4cc>
80014928:	e0 8f 01 26 	bral	80014b74 <receive_message_long+0x4cc>
8001492c:	e0 8f 01 24 	bral	80014b74 <receive_message_long+0x4cc>
80014930:	e0 8f 01 22 	bral	80014b74 <receive_message_long+0x4cc>
80014934:	e0 8f 01 20 	bral	80014b74 <receive_message_long+0x4cc>
80014938:	e0 8f 01 1e 	bral	80014b74 <receive_message_long+0x4cc>
8001493c:	e0 8f 01 1c 	bral	80014b74 <receive_message_long+0x4cc>
80014940:	e0 8f 01 1a 	bral	80014b74 <receive_message_long+0x4cc>
80014944:	e0 8f 01 18 	bral	80014b74 <receive_message_long+0x4cc>
80014948:	e0 8f 01 16 	bral	80014b74 <receive_message_long+0x4cc>
8001494c:	e0 8f 01 14 	bral	80014b74 <receive_message_long+0x4cc>
80014950:	e0 8f 01 12 	bral	80014b74 <receive_message_long+0x4cc>
80014954:	e0 8f 01 10 	bral	80014b74 <receive_message_long+0x4cc>
80014958:	e0 8f 01 0e 	bral	80014b74 <receive_message_long+0x4cc>
8001495c:	e0 8f 01 0c 	bral	80014b74 <receive_message_long+0x4cc>
80014960:	e0 8f 01 0a 	bral	80014b74 <receive_message_long+0x4cc>
80014964:	e0 8f 01 08 	bral	80014b74 <receive_message_long+0x4cc>
80014968:	e0 8f 01 06 	bral	80014b74 <receive_message_long+0x4cc>
8001496c:	e0 8f 01 04 	bral	80014b74 <receive_message_long+0x4cc>
80014970:	e0 8f 01 02 	bral	80014b74 <receive_message_long+0x4cc>
80014974:	e0 8f 01 00 	bral	80014b74 <receive_message_long+0x4cc>
80014978:	e0 8f 00 fe 	bral	80014b74 <receive_message_long+0x4cc>
8001497c:	e0 8f 00 fc 	bral	80014b74 <receive_message_long+0x4cc>
80014980:	e0 8f 00 fa 	bral	80014b74 <receive_message_long+0x4cc>
80014984:	e0 8f 00 f8 	bral	80014b74 <receive_message_long+0x4cc>
80014988:	e0 8f 00 f6 	bral	80014b74 <receive_message_long+0x4cc>
8001498c:	e0 8f 00 f4 	bral	80014b74 <receive_message_long+0x4cc>
80014990:	e0 8f 00 f2 	bral	80014b74 <receive_message_long+0x4cc>
80014994:	e0 8f 00 f0 	bral	80014b74 <receive_message_long+0x4cc>
80014998:	e0 8f 00 ee 	bral	80014b74 <receive_message_long+0x4cc>
8001499c:	e0 8f 00 ec 	bral	80014b74 <receive_message_long+0x4cc>
800149a0:	e0 8f 00 ea 	bral	80014b74 <receive_message_long+0x4cc>
800149a4:	e0 8f 00 e8 	bral	80014b74 <receive_message_long+0x4cc>
800149a8:	e0 8f 00 e6 	bral	80014b74 <receive_message_long+0x4cc>
800149ac:	e0 8f 00 e4 	bral	80014b74 <receive_message_long+0x4cc>
800149b0:	e0 8f 00 e2 	bral	80014b74 <receive_message_long+0x4cc>
800149b4:	e0 8f 00 e0 	bral	80014b74 <receive_message_long+0x4cc>
800149b8:	e0 8f 00 de 	bral	80014b74 <receive_message_long+0x4cc>
800149bc:	e0 8f 00 dc 	bral	80014b74 <receive_message_long+0x4cc>
800149c0:	e0 8f 00 da 	bral	80014b74 <receive_message_long+0x4cc>
800149c4:	e0 8f 00 d8 	bral	80014b74 <receive_message_long+0x4cc>
800149c8:	e0 8f 00 d6 	bral	80014b74 <receive_message_long+0x4cc>
800149cc:	e0 8f 00 d4 	bral	80014b74 <receive_message_long+0x4cc>
800149d0:	e0 8f 00 d2 	bral	80014b74 <receive_message_long+0x4cc>
800149d4:	e0 8f 00 d0 	bral	80014b74 <receive_message_long+0x4cc>
800149d8:	e0 8f 00 ce 	bral	80014b74 <receive_message_long+0x4cc>
800149dc:	e0 8f 00 cc 	bral	80014b74 <receive_message_long+0x4cc>
800149e0:	e0 8f 00 ca 	bral	80014b74 <receive_message_long+0x4cc>
800149e4:	e0 8f 00 c8 	bral	80014b74 <receive_message_long+0x4cc>
800149e8:	e0 8f 00 c6 	bral	80014b74 <receive_message_long+0x4cc>
800149ec:	e0 8f 00 c4 	bral	80014b74 <receive_message_long+0x4cc>
800149f0:	e0 8f 00 c2 	bral	80014b74 <receive_message_long+0x4cc>
800149f4:	e0 8f 00 c0 	bral	80014b74 <receive_message_long+0x4cc>
800149f8:	e0 8f 00 be 	bral	80014b74 <receive_message_long+0x4cc>
800149fc:	e0 8f 00 bc 	bral	80014b74 <receive_message_long+0x4cc>
80014a00:	e0 8f 00 ba 	bral	80014b74 <receive_message_long+0x4cc>
80014a04:	e0 8f 00 b8 	bral	80014b74 <receive_message_long+0x4cc>
80014a08:	e0 8f 00 b6 	bral	80014b74 <receive_message_long+0x4cc>
80014a0c:	e0 8f 00 b4 	bral	80014b74 <receive_message_long+0x4cc>
80014a10:	e0 8f 00 b2 	bral	80014b74 <receive_message_long+0x4cc>
80014a14:	e0 8f 00 b0 	bral	80014b74 <receive_message_long+0x4cc>
80014a18:	e0 8f 00 ae 	bral	80014b74 <receive_message_long+0x4cc>
80014a1c:	e0 8f 00 ac 	bral	80014b74 <receive_message_long+0x4cc>
80014a20:	e0 8f 00 aa 	bral	80014b74 <receive_message_long+0x4cc>
80014a24:	e0 8f 00 a8 	bral	80014b74 <receive_message_long+0x4cc>
80014a28:	e0 8f 00 a6 	bral	80014b74 <receive_message_long+0x4cc>
80014a2c:	e0 8f 00 a4 	bral	80014b74 <receive_message_long+0x4cc>
80014a30:	e0 8f 00 a2 	bral	80014b74 <receive_message_long+0x4cc>
80014a34:	e0 8f 00 a0 	bral	80014b74 <receive_message_long+0x4cc>
80014a38:	e0 8f 00 9e 	bral	80014b74 <receive_message_long+0x4cc>
80014a3c:	e0 8f 00 9c 	bral	80014b74 <receive_message_long+0x4cc>
80014a40:	e0 8f 00 9a 	bral	80014b74 <receive_message_long+0x4cc>
80014a44:	e0 8f 00 98 	bral	80014b74 <receive_message_long+0x4cc>
80014a48:	e0 8f 00 96 	bral	80014b74 <receive_message_long+0x4cc>
80014a4c:	e0 8f 00 94 	bral	80014b74 <receive_message_long+0x4cc>
80014a50:	e0 8f 00 92 	bral	80014b74 <receive_message_long+0x4cc>
80014a54:	e0 8f 00 90 	bral	80014b74 <receive_message_long+0x4cc>
80014a58:	e0 8f 00 8e 	bral	80014b74 <receive_message_long+0x4cc>
80014a5c:	e0 8f 00 8c 	bral	80014b74 <receive_message_long+0x4cc>
80014a60:	e0 8f 00 8a 	bral	80014b74 <receive_message_long+0x4cc>
80014a64:	e0 8f 00 88 	bral	80014b74 <receive_message_long+0x4cc>
80014a68:	e0 8f 00 86 	bral	80014b74 <receive_message_long+0x4cc>
80014a6c:	e0 8f 00 84 	bral	80014b74 <receive_message_long+0x4cc>
80014a70:	e0 8f 00 82 	bral	80014b74 <receive_message_long+0x4cc>
80014a74:	e0 8f 00 80 	bral	80014b74 <receive_message_long+0x4cc>
80014a78:	e0 8f 00 7e 	bral	80014b74 <receive_message_long+0x4cc>
80014a7c:	e0 8f 00 7c 	bral	80014b74 <receive_message_long+0x4cc>
80014a80:	e0 8f 00 7a 	bral	80014b74 <receive_message_long+0x4cc>
80014a84:	e0 8f 00 78 	bral	80014b74 <receive_message_long+0x4cc>
80014a88:	e0 8f 00 76 	bral	80014b74 <receive_message_long+0x4cc>
80014a8c:	e0 8f 00 74 	bral	80014b74 <receive_message_long+0x4cc>
80014a90:	e0 8f 00 72 	bral	80014b74 <receive_message_long+0x4cc>
80014a94:	e0 8f 00 70 	bral	80014b74 <receive_message_long+0x4cc>
80014a98:	e0 8f 00 6e 	bral	80014b74 <receive_message_long+0x4cc>
80014a9c:	e0 8f 00 6c 	bral	80014b74 <receive_message_long+0x4cc>
80014aa0:	e0 8f 00 6a 	bral	80014b74 <receive_message_long+0x4cc>
80014aa4:	e0 8f 00 68 	bral	80014b74 <receive_message_long+0x4cc>
80014aa8:	e0 8f 00 66 	bral	80014b74 <receive_message_long+0x4cc>
80014aac:	e0 8f 00 64 	bral	80014b74 <receive_message_long+0x4cc>
80014ab0:	e0 8f 00 62 	bral	80014b74 <receive_message_long+0x4cc>
80014ab4:	e0 8f 00 60 	bral	80014b74 <receive_message_long+0x4cc>
80014ab8:	e0 8f 00 5e 	bral	80014b74 <receive_message_long+0x4cc>
80014abc:	e0 8f 00 5c 	bral	80014b74 <receive_message_long+0x4cc>
80014ac0:	e0 8f 00 5a 	bral	80014b74 <receive_message_long+0x4cc>
80014ac4:	e0 8f 00 58 	bral	80014b74 <receive_message_long+0x4cc>
80014ac8:	e0 8f 00 56 	bral	80014b74 <receive_message_long+0x4cc>
80014acc:	e0 8f 00 54 	bral	80014b74 <receive_message_long+0x4cc>
80014ad0:	e0 8f 00 52 	bral	80014b74 <receive_message_long+0x4cc>
80014ad4:	e0 8f 00 50 	bral	80014b74 <receive_message_long+0x4cc>
80014ad8:	e0 8f 00 4e 	bral	80014b74 <receive_message_long+0x4cc>
80014adc:	e0 8f 00 4c 	bral	80014b74 <receive_message_long+0x4cc>
80014ae0:	e0 8f 00 4a 	bral	80014b74 <receive_message_long+0x4cc>
80014ae4:	e0 8f 00 48 	bral	80014b74 <receive_message_long+0x4cc>
80014ae8:	e0 8f 00 46 	bral	80014b74 <receive_message_long+0x4cc>
80014aec:	e0 8f 00 44 	bral	80014b74 <receive_message_long+0x4cc>
80014af0:	e0 8f 00 42 	bral	80014b74 <receive_message_long+0x4cc>
80014af4:	e0 8f 00 40 	bral	80014b74 <receive_message_long+0x4cc>
80014af8:	e0 8f 00 3e 	bral	80014b74 <receive_message_long+0x4cc>
80014afc:	e0 8f 00 3c 	bral	80014b74 <receive_message_long+0x4cc>
80014b00:	e0 8f 00 3a 	bral	80014b74 <receive_message_long+0x4cc>
80014b04:	e0 8f 00 38 	bral	80014b74 <receive_message_long+0x4cc>
80014b08:	e0 8f 00 36 	bral	80014b74 <receive_message_long+0x4cc>
80014b0c:	e0 8f 00 34 	bral	80014b74 <receive_message_long+0x4cc>
80014b10:	e0 8f 00 32 	bral	80014b74 <receive_message_long+0x4cc>
80014b14:	e0 8f 00 30 	bral	80014b74 <receive_message_long+0x4cc>
80014b18:	e0 8f 00 2e 	bral	80014b74 <receive_message_long+0x4cc>
80014b1c:	e0 8f 00 2c 	bral	80014b74 <receive_message_long+0x4cc>
80014b20:	e0 8f 00 2a 	bral	80014b74 <receive_message_long+0x4cc>
80014b24:	e0 8f 00 28 	bral	80014b74 <receive_message_long+0x4cc>
80014b28:	e0 8f 00 26 	bral	80014b74 <receive_message_long+0x4cc>
80014b2c:	e0 8f 00 24 	bral	80014b74 <receive_message_long+0x4cc>
80014b30:	e0 8f 00 22 	bral	80014b74 <receive_message_long+0x4cc>
80014b34:	e0 8f 00 20 	bral	80014b74 <receive_message_long+0x4cc>
80014b38:	e0 8f 00 1e 	bral	80014b74 <receive_message_long+0x4cc>
80014b3c:	e0 8f 00 02 	bral	80014b40 <receive_message_long+0x498>
			break;
			case MAV_CMD_PREFLIGHT_STORAGE: {
				/* Request storage of different parameter values and logs. This command will be only accepted if in pre-flight mode. |Parameter storage: 0: READ FROM FLASH/EEPROM, 1: WRITE CURRENT TO FLASH/EEPROM| Mission storage: 0: READ FROM FLASH/EEPROM, 1: WRITE CURRENT TO FLASH/EEPROM| Reserved| Reserved| Empty| Empty| Empty|  */
				
				// Onboard parameters storage
				if (packet.param1 == 0) {
80014b40:	ee f9 ff dc 	ld.w	r9,r7[-36]
80014b44:	30 08       	mov	r8,0
80014b46:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
80014b4a:	c0 81       	brne	80014b5a <receive_message_long+0x4b2>
					// read parameters from flash
					dbg_print("Reading from flashc...\n");
80014b4c:	fe cc 04 d0 	sub	r12,pc,1232
80014b50:	f0 16 00 01 	mcall	r6[4]
					read_parameters_from_flashc();
80014b54:	f0 16 01 0f 	mcall	r6[1084]
80014b58:	c0 e8       	rjmp	80014b74 <receive_message_long+0x4cc>
				}
				else if (packet.param1 == 1) {
80014b5a:	ee f9 ff dc 	ld.w	r9,r7[-36]
80014b5e:	fc 18 3f 80 	movh	r8,0x3f80
80014b62:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
80014b66:	c0 71       	brne	80014b74 <receive_message_long+0x4cc>
					// write parameters to flash
					dbg_print("Writting to flashc\n");
80014b68:	fe cc 04 d4 	sub	r12,pc,1236
80014b6c:	f0 16 00 01 	mcall	r6[4]
					write_parameters_to_flashc();
80014b70:	f0 16 01 c1 	mcall	r6[1796]
				/*  | */
			}
			break;
		}
	}
}
80014b74:	2f 6d       	sub	sp,-40
80014b76:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80014b7a:	00 00       	add	r0,r0
80014b7c:	80 01       	ld.sh	r1,r0[0x0]
80014b7e:	45 38       	lddsp	r8,sp[0x14c]

80014b80 <init_mavlink_actions>:


void init_mavlink_actions(void) {
80014b80:	eb cd 40 e0 	pushm	r5-r7,lr
80014b84:	1a 97       	mov	r7,sp
80014b86:	4f 46       	lddpc	r6,80014d54 <init_mavlink_actions+0x1d4>
80014b88:	1e 26       	rsub	r6,pc
	//board=get_board_hardware();
	centralData=get_central_data();
80014b8a:	f0 16 00 31 	mcall	r6[196]
80014b8e:	18 99       	mov	r9,r12
80014b90:	ec f8 00 00 	ld.w	r8,r6[0]
80014b94:	91 09       	st.w	r8[0x0],r9
	add_PID_parameters();
80014b96:	f0 16 01 92 	mcall	r6[1608]
	
	//write_parameters_to_flashc();
	
	read_parameters_from_flashc();
80014b9a:	f0 16 01 0f 	mcall	r6[1084]
	
	add_task(get_mavlink_taskset(),   10000, RUN_REGULAR, &control_waypoint_timeout, 0);
80014b9e:	ec f5 08 38 	ld.w	r5,r6[2104]
80014ba2:	f0 16 00 23 	mcall	r6[140]
80014ba6:	30 08       	mov	r8,0
80014ba8:	0a 99       	mov	r9,r5
80014baa:	30 2a       	mov	r10,2
80014bac:	e0 6b 27 10 	mov	r11,10000
80014bb0:	f0 16 00 22 	mcall	r6[136]
	
	add_task(get_mavlink_taskset(),  500000, RUN_REGULAR, &mavlink_send_heartbeat, MAVLINK_MSG_ID_HEARTBEAT);
80014bb4:	ec f5 06 a4 	ld.w	r5,r6[1700]
80014bb8:	f0 16 00 23 	mcall	r6[140]
80014bbc:	30 08       	mov	r8,0
80014bbe:	0a 99       	mov	r9,r5
80014bc0:	30 2a       	mov	r10,2
80014bc2:	e6 7b a1 20 	mov	r11,500000
80014bc6:	f0 16 00 22 	mcall	r6[136]
	add_task(get_mavlink_taskset(), 1000000, RUN_NEVER, &mavlink_send_attitude_quaternion, MAVLINK_MSG_ID_ATTITUDE_QUATERNION);
80014bca:	ec f5 07 3c 	ld.w	r5,r6[1852]
80014bce:	f0 16 00 23 	mcall	r6[140]
80014bd2:	31 f8       	mov	r8,31
80014bd4:	0a 99       	mov	r9,r5
80014bd6:	30 0a       	mov	r10,0
80014bd8:	ee 7b 42 40 	mov	r11,1000000
80014bdc:	f0 16 00 22 	mcall	r6[136]
	add_task(get_mavlink_taskset(),  200000, RUN_REGULAR, &mavlink_send_attitude, MAVLINK_MSG_ID_ATTITUDE);
80014be0:	ec f5 07 a0 	ld.w	r5,r6[1952]
80014be4:	f0 16 00 23 	mcall	r6[140]
80014be8:	31 e8       	mov	r8,30
80014bea:	0a 99       	mov	r9,r5
80014bec:	30 2a       	mov	r10,2
80014bee:	e2 7b 0d 40 	mov	r11,200000
80014bf2:	f0 16 00 22 	mcall	r6[136]
	
	add_task(get_mavlink_taskset(),  500000, RUN_REGULAR, &mavlink_send_hud, MAVLINK_MSG_ID_VFR_HUD);
80014bf6:	ec f5 06 14 	ld.w	r5,r6[1556]
80014bfa:	f0 16 00 23 	mcall	r6[140]
80014bfe:	34 a8       	mov	r8,74
80014c00:	0a 99       	mov	r9,r5
80014c02:	30 2a       	mov	r10,2
80014c04:	e6 7b a1 20 	mov	r11,500000
80014c08:	f0 16 00 22 	mcall	r6[136]
	add_task(get_mavlink_taskset(),  500000, RUN_NEVER, &mavlink_send_pressure, MAVLINK_MSG_ID_SCALED_PRESSURE);
80014c0c:	ec f5 04 cc 	ld.w	r5,r6[1228]
80014c10:	f0 16 00 23 	mcall	r6[140]
80014c14:	31 d8       	mov	r8,29
80014c16:	0a 99       	mov	r9,r5
80014c18:	30 0a       	mov	r10,0
80014c1a:	e6 7b a1 20 	mov	r11,500000
80014c1e:	f0 16 00 22 	mcall	r6[136]
	add_task(get_mavlink_taskset(),  200000, RUN_REGULAR, &mavlink_send_scaled_imu, MAVLINK_MSG_ID_SCALED_IMU);
80014c22:	ec f5 04 c8 	ld.w	r5,r6[1224]
80014c26:	f0 16 00 23 	mcall	r6[140]
80014c2a:	31 a8       	mov	r8,26
80014c2c:	0a 99       	mov	r9,r5
80014c2e:	30 2a       	mov	r10,2
80014c30:	e2 7b 0d 40 	mov	r11,200000
80014c34:	f0 16 00 22 	mcall	r6[136]
	add_task(get_mavlink_taskset(),  500000, RUN_NEVER, &mavlink_send_raw_imu, MAVLINK_MSG_ID_RAW_IMU);
80014c38:	ec f5 04 d0 	ld.w	r5,r6[1232]
80014c3c:	f0 16 00 23 	mcall	r6[140]
80014c40:	31 b8       	mov	r8,27
80014c42:	0a 99       	mov	r9,r5
80014c44:	30 0a       	mov	r10,0
80014c46:	e6 7b a1 20 	mov	r11,500000
80014c4a:	f0 16 00 22 	mcall	r6[136]

	add_task(get_mavlink_taskset(),  200000, RUN_NEVER, &mavlink_send_rpy_rates_error, MAVLINK_MSG_ID_ROLL_PITCH_YAW_RATES_THRUST_SETPOINT);
80014c4e:	ec f5 05 60 	ld.w	r5,r6[1376]
80014c52:	f0 16 00 23 	mcall	r6[140]
80014c56:	35 08       	mov	r8,80
80014c58:	0a 99       	mov	r9,r5
80014c5a:	30 0a       	mov	r10,0
80014c5c:	e2 7b 0d 40 	mov	r11,200000
80014c60:	f0 16 00 22 	mcall	r6[136]
	add_task(get_mavlink_taskset(),  200000, RUN_NEVER, &mavlink_send_rpy_speed_thrust_setpoint, MAVLINK_MSG_ID_ROLL_PITCH_YAW_SPEED_THRUST_SETPOINT);
80014c64:	ec f5 05 50 	ld.w	r5,r6[1360]
80014c68:	f0 16 00 23 	mcall	r6[140]
80014c6c:	33 b8       	mov	r8,59
80014c6e:	0a 99       	mov	r9,r5
80014c70:	30 0a       	mov	r10,0
80014c72:	e2 7b 0d 40 	mov	r11,200000
80014c76:	f0 16 00 22 	mcall	r6[136]
	add_task(get_mavlink_taskset(),  200000, RUN_NEVER, &mavlink_send_rpy_thrust_setpoint, MAVLINK_MSG_ID_ROLL_PITCH_YAW_THRUST_SETPOINT);
80014c7a:	ec f5 04 f4 	ld.w	r5,r6[1268]
80014c7e:	f0 16 00 23 	mcall	r6[140]
80014c82:	33 a8       	mov	r8,58
80014c84:	0a 99       	mov	r9,r5
80014c86:	30 0a       	mov	r10,0
80014c88:	e2 7b 0d 40 	mov	r11,200000
80014c8c:	f0 16 00 22 	mcall	r6[136]

	add_task(get_mavlink_taskset(),  250000, RUN_NEVER, &mavlink_send_servo_output, MAVLINK_MSG_ID_SERVO_OUTPUT_RAW);
80014c90:	ec f5 07 30 	ld.w	r5,r6[1840]
80014c94:	f0 16 00 23 	mcall	r6[140]
80014c98:	32 48       	mov	r8,36
80014c9a:	0a 99       	mov	r9,r5
80014c9c:	30 0a       	mov	r10,0
80014c9e:	e2 7b d0 90 	mov	r11,250000
80014ca2:	f0 16 00 22 	mcall	r6[136]

//	add_task(get_mavlink_taskset(),  50000, &mavlink_send_radar);
	add_task(get_mavlink_taskset(),  200000, RUN_REGULAR, &mavlink_send_estimator, MAVLINK_MSG_ID_LOCAL_POSITION_NED);
80014ca6:	ec f5 06 c0 	ld.w	r5,r6[1728]
80014caa:	f0 16 00 23 	mcall	r6[140]
80014cae:	32 08       	mov	r8,32
80014cb0:	0a 99       	mov	r9,r5
80014cb2:	30 2a       	mov	r10,2
80014cb4:	e2 7b 0d 40 	mov	r11,200000
80014cb8:	f0 16 00 22 	mcall	r6[136]
	add_task(get_mavlink_taskset(),  200000, RUN_REGULAR, &mavlink_send_global_position, MAVLINK_MSG_ID_GLOBAL_POSITION_INT);
80014cbc:	ec f5 07 24 	ld.w	r5,r6[1828]
80014cc0:	f0 16 00 23 	mcall	r6[140]
80014cc4:	32 18       	mov	r8,33
80014cc6:	0a 99       	mov	r9,r5
80014cc8:	30 2a       	mov	r10,2
80014cca:	e2 7b 0d 40 	mov	r11,200000
80014cce:	f0 16 00 22 	mcall	r6[136]
	add_task(get_mavlink_taskset(),  250000, RUN_NEVER, &mavlink_send_gps_raw, MAVLINK_MSG_ID_GPS_RAW_INT);
80014cd2:	ec f5 07 54 	ld.w	r5,r6[1876]
80014cd6:	f0 16 00 23 	mcall	r6[140]
80014cda:	31 88       	mov	r8,24
80014cdc:	0a 99       	mov	r9,r5
80014cde:	30 0a       	mov	r10,0
80014ce0:	e2 7b d0 90 	mov	r11,250000
80014ce4:	f0 16 00 22 	mcall	r6[136]
	add_task(get_mavlink_taskset(),  200000, RUN_NEVER, &mavlink_send_raw_rc_channels, MAVLINK_MSG_ID_RC_CHANNELS_RAW);
80014ce8:	ec f5 05 f8 	ld.w	r5,r6[1528]
80014cec:	f0 16 00 23 	mcall	r6[140]
80014cf0:	32 38       	mov	r8,35
80014cf2:	0a 99       	mov	r9,r5
80014cf4:	30 0a       	mov	r10,0
80014cf6:	e2 7b 0d 40 	mov	r11,200000
80014cfa:	f0 16 00 22 	mcall	r6[136]
	add_task(get_mavlink_taskset(),  250000, RUN_REGULAR, &mavlink_send_scaled_rc_channels, MAVLINK_MSG_ID_RC_CHANNELS_SCALED);
80014cfe:	ec f5 07 28 	ld.w	r5,r6[1832]
80014d02:	f0 16 00 23 	mcall	r6[140]
80014d06:	32 28       	mov	r8,34
80014d08:	0a 99       	mov	r9,r5
80014d0a:	30 2a       	mov	r10,2
80014d0c:	e2 7b d0 90 	mov	r11,250000
80014d10:	f0 16 00 22 	mcall	r6[136]

	add_task(get_mavlink_taskset(),  500000, RUN_REGULAR, &mavlink_send_simulation, MAVLINK_MSG_ID_HIL_STATE);
80014d14:	ec f5 07 b4 	ld.w	r5,r6[1972]
80014d18:	f0 16 00 23 	mcall	r6[140]
80014d1c:	35 a8       	mov	r8,90
80014d1e:	0a 99       	mov	r9,r5
80014d20:	30 2a       	mov	r10,2
80014d22:	e6 7b a1 20 	mov	r11,500000
80014d26:	f0 16 00 22 	mcall	r6[136]

	//add_task(get_mavlink_taskset(),  250000, RUN_REGULAR, &mavlink_send_kalman_estimator, MAVLINK_MSG_ID_NAMED_VALUE_FLOAT);
	add_task(get_mavlink_taskset(),  250000, RUN_NEVER, &send_rt_stats, MAVLINK_MSG_ID_NAMED_VALUE_FLOAT);
80014d2a:	ec f5 06 60 	ld.w	r5,r6[1632]
80014d2e:	f0 16 00 23 	mcall	r6[140]
80014d32:	e0 68 00 fb 	mov	r8,251
80014d36:	0a 99       	mov	r9,r5
80014d38:	30 0a       	mov	r10,0
80014d3a:	e2 7b d0 90 	mov	r11,250000
80014d3e:	f0 16 00 22 	mcall	r6[136]
	
	sort_taskset_by_period(get_mavlink_taskset());
80014d42:	f0 16 00 23 	mcall	r6[140]
80014d46:	18 98       	mov	r8,r12
80014d48:	10 9c       	mov	r12,r8
80014d4a:	f0 16 01 9c 	mcall	r6[1648]
}
80014d4e:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80014d52:	00 00       	add	r0,r0
80014d54:	80 01       	ld.sh	r1,r0[0x0]
80014d56:	4a 0c       	lddpc	r12,80014dd4 <interpolate+0x30>

80014d58 <mav_array_memcpy>:

/*
  like memcpy(), but if src is NULL, do a memset to zero
*/
static void mav_array_memcpy(void *dest, const void *src, size_t n)
{
80014d58:	eb cd 40 c0 	pushm	r6-r7,lr
80014d5c:	1a 97       	mov	r7,sp
80014d5e:	20 3d       	sub	sp,12
80014d60:	49 06       	lddpc	r6,80014da0 <mav_array_memcpy+0x48>
80014d62:	1e 26       	rsub	r6,pc
80014d64:	ef 4c ff fc 	st.w	r7[-4],r12
80014d68:	ef 4b ff f8 	st.w	r7[-8],r11
80014d6c:	ef 4a ff f4 	st.w	r7[-12],r10
	if (src == NULL) {
80014d70:	ee f8 ff f8 	ld.w	r8,r7[-8]
80014d74:	58 08       	cp.w	r8,0
80014d76:	c0 91       	brne	80014d88 <mav_array_memcpy+0x30>
		memset(dest, 0, n);
80014d78:	ee fa ff f4 	ld.w	r10,r7[-12]
80014d7c:	30 0b       	mov	r11,0
80014d7e:	ee fc ff fc 	ld.w	r12,r7[-4]
80014d82:	f0 16 00 2f 	mcall	r6[188]
80014d86:	c0 98       	rjmp	80014d98 <mav_array_memcpy+0x40>
	} else {
		memcpy(dest, src, n);
80014d88:	ee fa ff f4 	ld.w	r10,r7[-12]
80014d8c:	ee fb ff f8 	ld.w	r11,r7[-8]
80014d90:	ee fc ff fc 	ld.w	r12,r7[-4]
80014d94:	f0 16 00 20 	mcall	r6[128]
	}
}
80014d98:	2f dd       	sub	sp,-12
80014d9a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80014d9e:	00 00       	add	r0,r0
80014da0:	80 01       	ld.sh	r1,r0[0x0]
80014da2:	4b e6       	lddpc	r6,80014e98 <get_pitch_from_remote+0x30>

80014da4 <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
80014da4:	eb cd 40 c0 	pushm	r6-r7,lr
80014da8:	1a 97       	mov	r7,sp
80014daa:	20 6d       	sub	sp,24
80014dac:	49 e6       	lddpc	r6,80014e24 <interpolate+0x80>
80014dae:	1e 26       	rsub	r6,pc
80014db0:	ef 4c ff f8 	st.w	r7[-8],r12
80014db4:	ef 4b ff f4 	st.w	r7[-12],r11
80014db8:	ef 4a ff f0 	st.w	r7[-16],r10
80014dbc:	ef 49 ff ec 	st.w	r7[-20],r9
80014dc0:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
80014dc4:	ee f9 ff f4 	ld.w	r9,r7[-12]
80014dc8:	ee f8 ff f0 	ld.w	r8,r7[-16]
80014dcc:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
80014dd0:	c0 41       	brne	80014dd8 <interpolate+0x34>
	{
		return y1;
80014dd2:	ee f8 ff ec 	ld.w	r8,r7[-20]
80014dd6:	c2 38       	rjmp	80014e1c <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
80014dd8:	ee f9 ff e8 	ld.w	r9,r7[-24]
80014ddc:	ee f8 ff ec 	ld.w	r8,r7[-20]
80014de0:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80014de4:	ee fa ff f8 	ld.w	r10,r7[-8]
80014de8:	ee f8 ff f4 	ld.w	r8,r7[-12]
80014dec:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80014df0:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80014df4:	ee fa ff f0 	ld.w	r10,r7[-16]
80014df8:	ee f9 ff f4 	ld.w	r9,r7[-12]
80014dfc:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80014e00:	12 9b       	mov	r11,r9
80014e02:	10 9c       	mov	r12,r8
80014e04:	f0 16 00 08 	mcall	r6[32]
80014e08:	18 98       	mov	r8,r12
80014e0a:	10 99       	mov	r9,r8
80014e0c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80014e10:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80014e14:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
80014e18:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
80014e1c:	10 9c       	mov	r12,r8
80014e1e:	2f ad       	sub	sp,-24
80014e20:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80014e24:	80 01       	ld.sh	r1,r0[0x0]
80014e26:	4c 32       	lddpc	r2,80014f30 <get_command_from_remote+0x8>

80014e28 <get_roll_from_remote>:
	#include "joystick_rc.h"
#endif



static float inline get_roll_from_remote()	{return rc_get_channel_neutral(RC_ROLL)*RC_ROLL_DIR * RC_SCALEFACTOR; };
80014e28:	eb cd 40 c0 	pushm	r6-r7,lr
80014e2c:	1a 97       	mov	r7,sp
80014e2e:	48 e6       	lddpc	r6,80014e64 <get_roll_from_remote+0x3c>
80014e30:	1e 26       	rsub	r6,pc
80014e32:	30 1c       	mov	r12,1
80014e34:	f0 16 00 85 	mcall	r6[532]
80014e38:	18 98       	mov	r8,r12
80014e3a:	10 9c       	mov	r12,r8
80014e3c:	f0 16 00 1a 	mcall	r6[104]
80014e40:	30 08       	mov	r8,0
80014e42:	e0 69 60 00 	mov	r9,24576
80014e46:	ea 19 40 7b 	orh	r9,0x407b
80014e4a:	f0 16 00 0c 	mcall	r6[48]
80014e4e:	14 98       	mov	r8,r10
80014e50:	16 99       	mov	r9,r11
80014e52:	10 9a       	mov	r10,r8
80014e54:	12 9b       	mov	r11,r9
80014e56:	f0 16 00 09 	mcall	r6[36]
80014e5a:	18 98       	mov	r8,r12
80014e5c:	10 9c       	mov	r12,r8
80014e5e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80014e62:	00 00       	add	r0,r0
80014e64:	80 01       	ld.sh	r1,r0[0x0]
80014e66:	4c b4       	lddpc	r4,80014f90 <get_command_from_remote+0x68>

80014e68 <get_pitch_from_remote>:
static float inline get_pitch_from_remote()	{return rc_get_channel_neutral(RC_PITCH)*RC_PITCH_DIR * RC_SCALEFACTOR; };
80014e68:	eb cd 40 c0 	pushm	r6-r7,lr
80014e6c:	1a 97       	mov	r7,sp
80014e6e:	48 e6       	lddpc	r6,80014ea4 <get_pitch_from_remote+0x3c>
80014e70:	1e 26       	rsub	r6,pc
80014e72:	30 2c       	mov	r12,2
80014e74:	f0 16 00 85 	mcall	r6[532]
80014e78:	18 98       	mov	r8,r12
80014e7a:	5c 38       	neg	r8
80014e7c:	10 9c       	mov	r12,r8
80014e7e:	f0 16 00 1a 	mcall	r6[104]
80014e82:	30 08       	mov	r8,0
80014e84:	e0 69 60 00 	mov	r9,24576
80014e88:	ea 19 40 7b 	orh	r9,0x407b
80014e8c:	f0 16 00 0c 	mcall	r6[48]
80014e90:	14 98       	mov	r8,r10
80014e92:	16 99       	mov	r9,r11
80014e94:	10 9a       	mov	r10,r8
80014e96:	12 9b       	mov	r11,r9
80014e98:	f0 16 00 09 	mcall	r6[36]
80014e9c:	18 98       	mov	r8,r12
80014e9e:	10 9c       	mov	r12,r8
80014ea0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80014ea4:	80 01       	ld.sh	r1,r0[0x0]
80014ea6:	4c f4       	lddpc	r4,80014fe0 <get_command_from_remote+0xb8>

80014ea8 <get_yaw_from_remote>:
static float inline get_yaw_from_remote()	{return rc_get_channel_neutral(RC_YAW)*RC_YAW_DIR * RC_SCALEFACTOR; };
80014ea8:	eb cd 40 c0 	pushm	r6-r7,lr
80014eac:	1a 97       	mov	r7,sp
80014eae:	48 e6       	lddpc	r6,80014ee4 <get_yaw_from_remote+0x3c>
80014eb0:	1e 26       	rsub	r6,pc
80014eb2:	30 3c       	mov	r12,3
80014eb4:	f0 16 00 85 	mcall	r6[532]
80014eb8:	18 98       	mov	r8,r12
80014eba:	10 9c       	mov	r12,r8
80014ebc:	f0 16 00 1a 	mcall	r6[104]
80014ec0:	30 08       	mov	r8,0
80014ec2:	e0 69 60 00 	mov	r9,24576
80014ec6:	ea 19 40 7b 	orh	r9,0x407b
80014eca:	f0 16 00 0c 	mcall	r6[48]
80014ece:	14 98       	mov	r8,r10
80014ed0:	16 99       	mov	r9,r11
80014ed2:	10 9a       	mov	r10,r8
80014ed4:	12 9b       	mov	r11,r9
80014ed6:	f0 16 00 09 	mcall	r6[36]
80014eda:	18 98       	mov	r8,r12
80014edc:	10 9c       	mov	r12,r8
80014ede:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80014ee2:	00 00       	add	r0,r0
80014ee4:	80 01       	ld.sh	r1,r0[0x0]
80014ee6:	4d 34       	lddpc	r4,80015030 <get_channel_mode+0x14>

80014ee8 <get_thrust_from_remote>:
static float inline get_thrust_from_remote()	{return rc_get_channel(RC_THROTTLE)*RC_THROTTLE_DIR*RC_SCALEFACTOR; };
80014ee8:	eb cd 40 c0 	pushm	r6-r7,lr
80014eec:	1a 97       	mov	r7,sp
80014eee:	48 e6       	lddpc	r6,80014f24 <get_thrust_from_remote+0x3c>
80014ef0:	1e 26       	rsub	r6,pc
80014ef2:	30 0c       	mov	r12,0
80014ef4:	f0 16 00 1b 	mcall	r6[108]
80014ef8:	18 98       	mov	r8,r12
80014efa:	10 9c       	mov	r12,r8
80014efc:	f0 16 00 1a 	mcall	r6[104]
80014f00:	30 08       	mov	r8,0
80014f02:	e0 69 60 00 	mov	r9,24576
80014f06:	ea 19 40 7b 	orh	r9,0x407b
80014f0a:	f0 16 00 0c 	mcall	r6[48]
80014f0e:	14 98       	mov	r8,r10
80014f10:	16 99       	mov	r9,r11
80014f12:	10 9a       	mov	r10,r8
80014f14:	12 9b       	mov	r11,r9
80014f16:	f0 16 00 09 	mcall	r6[36]
80014f1a:	18 98       	mov	r8,r12
80014f1c:	10 9c       	mov	r12,r8
80014f1e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80014f22:	00 00       	add	r0,r0
80014f24:	80 01       	ld.sh	r1,r0[0x0]
80014f26:	4d 74       	lddpc	r4,80015080 <get_channel_mode+0x64>

80014f28 <get_command_from_remote>:


static inline Control_Command_t get_command_from_remote()
{
80014f28:	eb cd 40 e0 	pushm	r5-r7,lr
80014f2c:	1a 97       	mov	r7,sp
80014f2e:	20 bd       	sub	sp,44
80014f30:	4b a6       	lddpc	r6,80015018 <get_command_from_remote+0xf0>
80014f32:	1e 26       	rsub	r6,pc
80014f34:	18 95       	mov	r5,r12
	Control_Command_t controls;
	controls.rpy[ROLL]= get_roll_from_remote()*RC_INPUT_SCALE;
80014f36:	c7 9f       	rcall	80014e28 <get_roll_from_remote>
80014f38:	18 98       	mov	r8,r12
80014f3a:	10 9c       	mov	r12,r8
80014f3c:	f0 16 00 02 	mcall	r6[8]
80014f40:	e0 68 99 9a 	mov	r8,39322
80014f44:	ea 18 99 99 	orh	r8,0x9999
80014f48:	e0 69 99 99 	mov	r9,39321
80014f4c:	ea 19 3f e9 	orh	r9,0x3fe9
80014f50:	f0 16 00 03 	mcall	r6[12]
80014f54:	14 98       	mov	r8,r10
80014f56:	16 99       	mov	r9,r11
80014f58:	10 9a       	mov	r10,r8
80014f5a:	12 9b       	mov	r11,r9
80014f5c:	f0 16 00 09 	mcall	r6[36]
80014f60:	18 98       	mov	r8,r12
80014f62:	ef 48 ff d4 	st.w	r7[-44],r8
	controls.rpy[PITCH]= get_pitch_from_remote()*RC_INPUT_SCALE;
80014f66:	c8 1f       	rcall	80014e68 <get_pitch_from_remote>
80014f68:	18 98       	mov	r8,r12
80014f6a:	10 9c       	mov	r12,r8
80014f6c:	f0 16 00 02 	mcall	r6[8]
80014f70:	e0 68 99 9a 	mov	r8,39322
80014f74:	ea 18 99 99 	orh	r8,0x9999
80014f78:	e0 69 99 99 	mov	r9,39321
80014f7c:	ea 19 3f e9 	orh	r9,0x3fe9
80014f80:	f0 16 00 03 	mcall	r6[12]
80014f84:	14 98       	mov	r8,r10
80014f86:	16 99       	mov	r9,r11
80014f88:	10 9a       	mov	r10,r8
80014f8a:	12 9b       	mov	r11,r9
80014f8c:	f0 16 00 09 	mcall	r6[36]
80014f90:	18 98       	mov	r8,r12
80014f92:	ef 48 ff d8 	st.w	r7[-40],r8
	controls.rpy[YAW]= get_yaw_from_remote()*RC_INPUT_SCALE;
80014f96:	c8 9f       	rcall	80014ea8 <get_yaw_from_remote>
80014f98:	18 98       	mov	r8,r12
80014f9a:	10 9c       	mov	r12,r8
80014f9c:	f0 16 00 02 	mcall	r6[8]
80014fa0:	e0 68 99 9a 	mov	r8,39322
80014fa4:	ea 18 99 99 	orh	r8,0x9999
80014fa8:	e0 69 99 99 	mov	r9,39321
80014fac:	ea 19 3f e9 	orh	r9,0x3fe9
80014fb0:	f0 16 00 03 	mcall	r6[12]
80014fb4:	14 98       	mov	r8,r10
80014fb6:	16 99       	mov	r9,r11
80014fb8:	10 9a       	mov	r10,r8
80014fba:	12 9b       	mov	r11,r9
80014fbc:	f0 16 00 09 	mcall	r6[36]
80014fc0:	18 98       	mov	r8,r12
80014fc2:	ef 48 ff dc 	st.w	r7[-36],r8
	controls.thrust = get_thrust_from_remote();
80014fc6:	c9 1f       	rcall	80014ee8 <get_thrust_from_remote>
80014fc8:	18 98       	mov	r8,r12
80014fca:	ef 48 ff e0 	st.w	r7[-32],r8
	
	return controls;
80014fce:	0a 98       	mov	r8,r5
80014fd0:	ee c9 00 2c 	sub	r9,r7,44
80014fd4:	f0 ca 00 00 	sub	r10,r8,0
80014fd8:	f2 cb 00 00 	sub	r11,r9,0
80014fdc:	76 0c       	ld.w	r12,r11[0x0]
80014fde:	95 0c       	st.w	r10[0x0],r12
80014fe0:	76 1c       	ld.w	r12,r11[0x4]
80014fe2:	95 1c       	st.w	r10[0x4],r12
80014fe4:	76 2c       	ld.w	r12,r11[0x8]
80014fe6:	95 2c       	st.w	r10[0x8],r12
80014fe8:	76 3b       	ld.w	r11,r11[0xc]
80014fea:	95 3b       	st.w	r10[0xc],r11
80014fec:	f0 ca ff f0 	sub	r10,r8,-16
80014ff0:	f2 cb ff f0 	sub	r11,r9,-16
80014ff4:	76 0c       	ld.w	r12,r11[0x0]
80014ff6:	95 0c       	st.w	r10[0x0],r12
80014ff8:	76 1c       	ld.w	r12,r11[0x4]
80014ffa:	95 1c       	st.w	r10[0x4],r12
80014ffc:	76 2c       	ld.w	r12,r11[0x8]
80014ffe:	95 2c       	st.w	r10[0x8],r12
80015000:	76 3b       	ld.w	r11,r11[0xc]
80015002:	95 3b       	st.w	r10[0xc],r11
80015004:	f2 ea 00 20 	ld.d	r10,r9[32]
80015008:	f0 eb 00 20 	st.d	r8[32],r10
8001500c:	72 a9       	ld.w	r9,r9[0x28]
8001500e:	91 a9       	st.w	r8[0x28],r9
}
80015010:	0a 9c       	mov	r12,r5
80015012:	2f 5d       	sub	sp,-44
80015014:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80015018:	80 01       	ld.sh	r1,r0[0x0]
8001501a:	4d b6       	lddpc	r6,80015184 <rc_user_channels+0x44>

8001501c <get_channel_mode>:
	}
#endif

#ifdef TURNIGY_REMOTE
	static inline void get_channel_mode(uint8_t* chanSwitch)
	{
8001501c:	eb cd 40 c0 	pushm	r6-r7,lr
80015020:	1a 97       	mov	r7,sp
80015022:	20 1d       	sub	sp,4
80015024:	4a d6       	lddpc	r6,800150d8 <get_channel_mode+0xbc>
80015026:	1e 26       	rsub	r6,pc
80015028:	ef 4c ff fc 	st.w	r7[-4],r12
		if (rc_get_channel(RC_SAFETY)<0)
8001502c:	30 4c       	mov	r12,4
8001502e:	f0 16 00 1b 	mcall	r6[108]
80015032:	18 98       	mov	r8,r12
80015034:	10 99       	mov	r9,r8
80015036:	30 08       	mov	r8,0
80015038:	f0 09 19 00 	cp.h	r9,r8
8001503c:	c0 84       	brge	8001504c <get_channel_mode+0x30>
		{
			*chanSwitch |= 0x00;
8001503e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80015042:	11 88       	ld.ub	r8,r8[0x0]
80015044:	ee f9 ff fc 	ld.w	r9,r7[-4]
80015048:	b2 88       	st.b	r9[0x0],r8
8001504a:	c4 38       	rjmp	800150d0 <get_channel_mode+0xb4>
			}else if(rc_get_channel(RC_SAFETY)>0 && rc_get_channel(RC_ID_MODE)<0){
8001504c:	30 4c       	mov	r12,4
8001504e:	f0 16 00 1b 	mcall	r6[108]
80015052:	18 98       	mov	r8,r12
80015054:	10 99       	mov	r9,r8
80015056:	30 08       	mov	r8,0
80015058:	f0 09 19 00 	cp.h	r9,r8
8001505c:	e0 8a 00 14 	brle	80015084 <get_channel_mode+0x68>
80015060:	30 5c       	mov	r12,5
80015062:	f0 16 00 1b 	mcall	r6[108]
80015066:	18 98       	mov	r8,r12
80015068:	10 99       	mov	r9,r8
8001506a:	30 08       	mov	r8,0
8001506c:	f0 09 19 00 	cp.h	r9,r8
80015070:	c0 a4       	brge	80015084 <get_channel_mode+0x68>
			*chanSwitch |= 0x01;
80015072:	ee f8 ff fc 	ld.w	r8,r7[-4]
80015076:	11 88       	ld.ub	r8,r8[0x0]
80015078:	a1 a8       	sbr	r8,0x0
8001507a:	5c 58       	castu.b	r8
8001507c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80015080:	b2 88       	st.b	r9[0x0],r8
	static inline void get_channel_mode(uint8_t* chanSwitch)
	{
		if (rc_get_channel(RC_SAFETY)<0)
		{
			*chanSwitch |= 0x00;
			}else if(rc_get_channel(RC_SAFETY)>0 && rc_get_channel(RC_ID_MODE)<0){
80015082:	c2 78       	rjmp	800150d0 <get_channel_mode+0xb4>
			*chanSwitch |= 0x01;
			}else if (rc_get_channel(RC_SAFETY)>0 && rc_get_channel(RC_ID_MODE)>20){
80015084:	30 4c       	mov	r12,4
80015086:	f0 16 00 1b 	mcall	r6[108]
8001508a:	18 98       	mov	r8,r12
8001508c:	10 99       	mov	r9,r8
8001508e:	30 08       	mov	r8,0
80015090:	f0 09 19 00 	cp.h	r9,r8
80015094:	e0 8a 00 16 	brle	800150c0 <get_channel_mode+0xa4>
80015098:	30 5c       	mov	r12,5
8001509a:	f0 16 00 1b 	mcall	r6[108]
8001509e:	18 98       	mov	r8,r12
800150a0:	10 99       	mov	r9,r8
800150a2:	31 48       	mov	r8,20
800150a4:	f0 09 19 00 	cp.h	r9,r8
800150a8:	e0 8a 00 0c 	brle	800150c0 <get_channel_mode+0xa4>
			*chanSwitch |= 0x03;
800150ac:	ee f8 ff fc 	ld.w	r8,r7[-4]
800150b0:	11 88       	ld.ub	r8,r8[0x0]
800150b2:	e8 18 00 03 	orl	r8,0x3
800150b6:	5c 58       	castu.b	r8
800150b8:	ee f9 ff fc 	ld.w	r9,r7[-4]
800150bc:	b2 88       	st.b	r9[0x0],r8
		if (rc_get_channel(RC_SAFETY)<0)
		{
			*chanSwitch |= 0x00;
			}else if(rc_get_channel(RC_SAFETY)>0 && rc_get_channel(RC_ID_MODE)<0){
			*chanSwitch |= 0x01;
			}else if (rc_get_channel(RC_SAFETY)>0 && rc_get_channel(RC_ID_MODE)>20){
800150be:	c0 98       	rjmp	800150d0 <get_channel_mode+0xb4>
			*chanSwitch |= 0x03;
			}else{
			*chanSwitch |= 0x02;
800150c0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800150c4:	11 88       	ld.ub	r8,r8[0x0]
800150c6:	a1 b8       	sbr	r8,0x1
800150c8:	5c 58       	castu.b	r8
800150ca:	ee f9 ff fc 	ld.w	r9,r7[-4]
800150ce:	b2 88       	st.b	r9[0x0],r8
		}
	}
800150d0:	2f fd       	sub	sp,-4
800150d2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800150d6:	00 00       	add	r0,r0
800150d8:	80 01       	ld.sh	r1,r0[0x0]
800150da:	4e aa       	lddpc	r10,80015280 <rc_user_channels+0x140>

800150dc <get_main_taskset>:

#define PRESSURE_LPF 0.1

central_data_t *centralData;

task_set* get_main_taskset() {
800150dc:	eb cd 40 c0 	pushm	r6-r7,lr
800150e0:	1a 97       	mov	r7,sp
800150e2:	48 46       	lddpc	r6,800150f0 <get_main_taskset+0x14>
800150e4:	1e 26       	rsub	r6,pc
	return &main_tasks;
800150e6:	ec f8 01 24 	ld.w	r8,r6[292]
}
800150ea:	10 9c       	mov	r12,r8
800150ec:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800150f0:	80 01       	ld.sh	r1,r0[0x0]
800150f2:	4f 68       	lddpc	r8,800152c8 <rc_user_channels+0x188>

800150f4 <run_imu_update>:

task_return_t run_imu_update() {
800150f4:	eb cd 40 c0 	pushm	r6-r7,lr
800150f8:	1a 97       	mov	r7,sp
800150fa:	48 d6       	lddpc	r6,8001512c <run_imu_update+0x38>
800150fc:	1e 26       	rsub	r6,pc
	imu_update(&(centralData->imu1), &centralData->position_estimator, &centralData->pressure, &centralData->GPS_data);	
800150fe:	ec f8 00 00 	ld.w	r8,r6[0]
80015102:	70 08       	ld.w	r8,r8[0x0]
80015104:	f0 c9 f4 f8 	sub	r9,r8,-2824
80015108:	ec f8 00 00 	ld.w	r8,r6[0]
8001510c:	70 08       	ld.w	r8,r8[0x0]
8001510e:	f0 ca ef 3c 	sub	r10,r8,-4292
80015112:	ec f8 00 00 	ld.w	r8,r6[0]
80015116:	70 08       	ld.w	r8,r8[0x0]
80015118:	f0 cb f2 c4 	sub	r11,r8,-3388
8001511c:	ec f8 00 00 	ld.w	r8,r6[0]
80015120:	70 08       	ld.w	r8,r8[0x0]
80015122:	10 9c       	mov	r12,r8
80015124:	f0 16 00 8d 	mcall	r6[564]
}	
80015128:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001512c:	80 01       	ld.sh	r1,r0[0x0]
8001512e:	4f 80       	lddpc	r0,8001530c <rc_user_channels+0x1cc>
80015130:	6d 6f       	ld.w	pc,r6[0x58]
80015132:	74 6f       	ld.w	pc,r10[0x18]
80015134:	72 20       	ld.w	r0,r9[0x8]
80015136:	6f 6e       	ld.w	lr,r7[0x58]
80015138:	3a 20       	mov	r0,-94
8001513a:	79 61       	ld.w	r1,r12[0x58]
8001513c:	77 3d       	ld.w	sp,r11[0x4c]
8001513e:	0a 00       	add	r0,r5

80015140 <rc_user_channels>:

void rc_user_channels(uint8_t *chanSwitch, int8_t *rc_check, int8_t *motorbool)
{
80015140:	eb cd 40 e0 	pushm	r5-r7,lr
80015144:	1a 97       	mov	r7,sp
80015146:	20 3d       	sub	sp,12
80015148:	4e 46       	lddpc	r6,800152d8 <rc_user_channels+0x198>
8001514a:	1e 26       	rsub	r6,pc
8001514c:	ef 4c ff fc 	st.w	r7[-4],r12
80015150:	ef 4b ff f8 	st.w	r7[-8],r11
80015154:	ef 4a ff f4 	st.w	r7[-12],r10
	
	get_channel_mode(chanSwitch);
80015158:	ee fc ff fc 	ld.w	r12,r7[-4]
8001515c:	c6 0f       	rcall	8001501c <get_channel_mode>
	
	if ((rc_get_channel_neutral(RC_TRIM_P3) * RC_SCALEFACTOR)>0.0)
8001515e:	30 6c       	mov	r12,6
80015160:	f0 16 00 85 	mcall	r6[532]
80015164:	18 98       	mov	r8,r12
80015166:	10 9c       	mov	r12,r8
80015168:	f0 16 00 1a 	mcall	r6[104]
8001516c:	30 08       	mov	r8,0
8001516e:	e0 69 60 00 	mov	r9,24576
80015172:	ea 19 40 7b 	orh	r9,0x407b
80015176:	f0 16 00 0c 	mcall	r6[48]
8001517a:	14 98       	mov	r8,r10
8001517c:	16 99       	mov	r9,r11
8001517e:	30 05       	mov	r5,0
80015180:	30 0a       	mov	r10,0
80015182:	30 0b       	mov	r11,0
80015184:	f0 16 00 1c 	mcall	r6[112]
80015188:	18 98       	mov	r8,r12
8001518a:	58 08       	cp.w	r8,0
8001518c:	c0 20       	breq	80015190 <rc_user_channels+0x50>
8001518e:	30 15       	mov	r5,1
80015190:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
80015194:	c0 80       	breq	800151a4 <rc_user_channels+0x64>
	{
		centralData->collision_avoidance = true;
80015196:	ec f8 00 00 	ld.w	r8,r6[0]
8001519a:	70 09       	ld.w	r9,r8[0x0]
8001519c:	30 18       	mov	r8,1
8001519e:	f3 68 10 bb 	st.b	r9[4283],r8
800151a2:	c0 78       	rjmp	800151b0 <rc_user_channels+0x70>
	}else{
		centralData->collision_avoidance = false;
800151a4:	ec f8 00 00 	ld.w	r8,r6[0]
800151a8:	70 09       	ld.w	r9,r8[0x0]
800151aa:	30 08       	mov	r8,0
800151ac:	f3 68 10 bb 	st.b	r9[4283],r8
	//dbg_print_num(*chanSwitch,10);
	//dbg_print_num(getChannel(4),10);
	//dbg_print_num(getChannel(5),10);
	//dbg_print("\n");
	
	if((get_thrust_from_remote()<-0.95) && (get_yaw_from_remote() > 0.9))
800151b0:	c9 ce       	rcall	80014ee8 <get_thrust_from_remote>
800151b2:	18 98       	mov	r8,r12
800151b4:	10 9c       	mov	r12,r8
800151b6:	f0 16 00 02 	mcall	r6[8]
800151ba:	30 05       	mov	r5,0
800151bc:	e0 68 66 66 	mov	r8,26214
800151c0:	ea 18 66 66 	orh	r8,0x6666
800151c4:	e0 69 66 66 	mov	r9,26214
800151c8:	ea 19 bf ee 	orh	r9,0xbfee
800151cc:	f0 16 00 1c 	mcall	r6[112]
800151d0:	18 98       	mov	r8,r12
800151d2:	58 08       	cp.w	r8,0
800151d4:	c0 20       	breq	800151d8 <rc_user_channels+0x98>
800151d6:	30 15       	mov	r5,1
800151d8:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
800151dc:	c2 90       	breq	8001522e <rc_user_channels+0xee>
800151de:	c6 5e       	rcall	80014ea8 <get_yaw_from_remote>
800151e0:	18 98       	mov	r8,r12
800151e2:	10 9c       	mov	r12,r8
800151e4:	f0 16 00 02 	mcall	r6[8]
800151e8:	14 98       	mov	r8,r10
800151ea:	16 99       	mov	r9,r11
800151ec:	30 05       	mov	r5,0
800151ee:	e0 6a cc cd 	mov	r10,52429
800151f2:	ea 1a cc cc 	orh	r10,0xcccc
800151f6:	e0 6b cc cc 	mov	r11,52428
800151fa:	ea 1b 3f ec 	orh	r11,0x3fec
800151fe:	f0 16 00 1c 	mcall	r6[112]
80015202:	18 98       	mov	r8,r12
80015204:	58 08       	cp.w	r8,0
80015206:	c0 20       	breq	8001520a <rc_user_channels+0xca>
80015208:	30 15       	mov	r5,1
8001520a:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
8001520e:	c1 00       	breq	8001522e <rc_user_channels+0xee>
	{
		//dbg_print("motor on\n");
		dbg_print("motor on: yaw=\n"); dbg_putfloat(get_yaw_from_remote(),2);
80015210:	fe cc 00 e0 	sub	r12,pc,224
80015214:	f0 16 00 01 	mcall	r6[4]
80015218:	c4 8e       	rcall	80014ea8 <get_yaw_from_remote>
8001521a:	18 98       	mov	r8,r12
8001521c:	30 2b       	mov	r11,2
8001521e:	10 9c       	mov	r12,r8
80015220:	f0 16 02 05 	mcall	r6[2068]
		*motorbool = 1;
80015224:	ee f9 ff f4 	ld.w	r9,r7[-12]
80015228:	30 18       	mov	r8,1
8001522a:	b2 88       	st.b	r9[0x0],r8
	//dbg_print_num(*chanSwitch,10);
	//dbg_print_num(getChannel(4),10);
	//dbg_print_num(getChannel(5),10);
	//dbg_print("\n");
	
	if((get_thrust_from_remote()<-0.95) && (get_yaw_from_remote() > 0.9))
8001522c:	c3 88       	rjmp	8001529c <rc_user_channels+0x15c>
	{
		//dbg_print("motor on\n");
		dbg_print("motor on: yaw=\n"); dbg_putfloat(get_yaw_from_remote(),2);
		*motorbool = 1;
	}else if((get_thrust_from_remote()<-0.95) && (get_yaw_from_remote() <-0.9))
8001522e:	c5 de       	rcall	80014ee8 <get_thrust_from_remote>
80015230:	18 98       	mov	r8,r12
80015232:	10 9c       	mov	r12,r8
80015234:	f0 16 00 02 	mcall	r6[8]
80015238:	30 05       	mov	r5,0
8001523a:	e0 68 66 66 	mov	r8,26214
8001523e:	ea 18 66 66 	orh	r8,0x6666
80015242:	e0 69 66 66 	mov	r9,26214
80015246:	ea 19 bf ee 	orh	r9,0xbfee
8001524a:	f0 16 00 1c 	mcall	r6[112]
8001524e:	18 98       	mov	r8,r12
80015250:	58 08       	cp.w	r8,0
80015252:	c0 20       	breq	80015256 <rc_user_channels+0x116>
80015254:	30 15       	mov	r5,1
80015256:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
8001525a:	c1 d0       	breq	80015294 <rc_user_channels+0x154>
8001525c:	c2 6e       	rcall	80014ea8 <get_yaw_from_remote>
8001525e:	18 98       	mov	r8,r12
80015260:	10 9c       	mov	r12,r8
80015262:	f0 16 00 02 	mcall	r6[8]
80015266:	30 05       	mov	r5,0
80015268:	e0 68 cc cd 	mov	r8,52429
8001526c:	ea 18 cc cc 	orh	r8,0xcccc
80015270:	e0 69 cc cc 	mov	r9,52428
80015274:	ea 19 bf ec 	orh	r9,0xbfec
80015278:	f0 16 00 1c 	mcall	r6[112]
8001527c:	18 98       	mov	r8,r12
8001527e:	58 08       	cp.w	r8,0
80015280:	c0 20       	breq	80015284 <rc_user_channels+0x144>
80015282:	30 15       	mov	r5,1
80015284:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
80015288:	c0 60       	breq	80015294 <rc_user_channels+0x154>
	{
		//dbg_print("motor off\n");
		*motorbool = -1;
8001528a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001528e:	3f f8       	mov	r8,-1
80015290:	b2 88       	st.b	r9[0x0],r8
	if((get_thrust_from_remote()<-0.95) && (get_yaw_from_remote() > 0.9))
	{
		//dbg_print("motor on\n");
		dbg_print("motor on: yaw=\n"); dbg_putfloat(get_yaw_from_remote(),2);
		*motorbool = 1;
	}else if((get_thrust_from_remote()<-0.95) && (get_yaw_from_remote() <-0.9))
80015292:	c0 58       	rjmp	8001529c <rc_user_channels+0x15c>
	{
		//dbg_print("motor off\n");
		*motorbool = -1;
	}else{
		//dbg_print("motor nothing\n");
		*motorbool = 0;
80015294:	ee f9 ff f4 	ld.w	r9,r7[-12]
80015298:	30 08       	mov	r8,0
8001529a:	b2 88       	st.b	r9[0x0],r8
	}
	
	switch (rc_check_receivers())
8001529c:	f0 16 00 9e 	mcall	r6[632]
800152a0:	18 98       	mov	r8,r12
800152a2:	5c 58       	castu.b	r8
800152a4:	5c 68       	casts.b	r8
800152a6:	5b f8       	cp.w	r8,-1
800152a8:	c0 b0       	breq	800152be <rc_user_channels+0x17e>
800152aa:	58 18       	cp.w	r8,1
800152ac:	c0 40       	breq	800152b4 <rc_user_channels+0x174>
800152ae:	5b e8       	cp.w	r8,-2
800152b0:	c0 c0       	breq	800152c8 <rc_user_channels+0x188>
800152b2:	c0 f8       	rjmp	800152d0 <rc_user_channels+0x190>
	{
		case 1:
		*rc_check = 1;
800152b4:	ee f9 ff f8 	ld.w	r9,r7[-8]
800152b8:	30 18       	mov	r8,1
800152ba:	b2 88       	st.b	r9[0x0],r8
		break;
800152bc:	c0 a8       	rjmp	800152d0 <rc_user_channels+0x190>
		case -1:
		*rc_check = -1;
800152be:	ee f9 ff f8 	ld.w	r9,r7[-8]
800152c2:	3f f8       	mov	r8,-1
800152c4:	b2 88       	st.b	r9[0x0],r8
		break;
800152c6:	c0 58       	rjmp	800152d0 <rc_user_channels+0x190>
		case -2:
		*rc_check = -2;
800152c8:	ee f9 ff f8 	ld.w	r9,r7[-8]
800152cc:	3f e8       	mov	r8,-2
800152ce:	b2 88       	st.b	r9[0x0],r8
	//dbg_print("rc_check: ");
	//dbg_print_num(rc_check,10);
	//dbg_print("; motorbool : ");
	//dbg_print_num(*motorbool,10);
	//dbg_print("\n");
}
800152d0:	2f dd       	sub	sp,-12
800152d2:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800152d6:	00 00       	add	r0,r0
800152d8:	80 01       	ld.sh	r1,r0[0x0]
800152da:	4f ce       	lddpc	lr,800154c8 <set_mav_mode_n_state+0x18c>
800152dc:	53 77       	stdsp	sp[0xdc],r7
800152de:	69 74       	ld.w	r4,r4[0x5c]
800152e0:	63 68       	ld.w	r8,r1[0x58]
800152e2:	69 6e       	ld.w	lr,r4[0x58]
800152e4:	67 20       	ld.w	r0,r3[0x48]
800152e6:	6f 6e       	ld.w	lr,r7[0x58]
800152e8:	20 74       	sub	r4,7
800152ea:	68 65       	ld.w	r5,r4[0x18]
800152ec:	20 6d       	sub	sp,24
800152ee:	6f 74       	ld.w	r4,r7[0x5c]
800152f0:	6f 72       	ld.w	r2,r7[0x5c]
800152f2:	73 21       	ld.w	r1,r9[0x48]
800152f4:	0a 00       	add	r0,r5
800152f6:	00 00       	add	r0,r0
800152f8:	53 77       	stdsp	sp[0xdc],r7
800152fa:	69 74       	ld.w	r4,r4[0x5c]
800152fc:	63 68       	ld.w	r8,r1[0x58]
800152fe:	65 73       	ld.w	r3,r2[0x5c]
80015300:	20 6e       	sub	lr,6
80015302:	6f 74       	ld.w	r4,r7[0x5c]
80015304:	20 72       	sub	r2,7
80015306:	65 61       	ld.w	r1,r2[0x58]
80015308:	64 79       	ld.w	r9,r2[0x1c]
8001530a:	2c 20       	sub	r0,-62
8001530c:	62 6f       	ld.w	pc,r1[0x18]
8001530e:	74 68       	ld.w	r8,r10[0x18]
80015310:	20 73       	sub	r3,7
80015312:	68 6f       	ld.w	pc,r4[0x18]
80015314:	75 6c       	ld.w	r12,r10[0x58]
80015316:	64 20       	ld.w	r0,r2[0x8]
80015318:	62 65       	ld.w	r5,r1[0x18]
8001531a:	20 70       	sub	r0,7
8001531c:	75 73       	ld.w	r3,r10[0x5c]
8001531e:	68 65       	ld.w	r5,r4[0x18]
80015320:	64 21       	ld.w	r1,r2[0x8]
80015322:	0a 00       	add	r0,r5
80015324:	53 77       	stdsp	sp[0xdc],r7
80015326:	69 74       	ld.w	r4,r4[0x5c]
80015328:	63 68       	ld.w	r8,r1[0x58]
8001532a:	69 6e       	ld.w	lr,r4[0x58]
8001532c:	67 20       	ld.w	r0,r3[0x48]
8001532e:	6f 66       	ld.w	r6,r7[0x58]
80015330:	66 20       	ld.w	r0,r3[0x8]
80015332:	6d 6f       	ld.w	pc,r6[0x58]
80015334:	74 6f       	ld.w	pc,r10[0x18]
80015336:	72 73       	ld.w	r3,r9[0x1c]
80015338:	21 0a       	sub	r10,16
	...

8001533c <set_mav_mode_n_state>:

task_return_t set_mav_mode_n_state()
{
8001533c:	eb cd 40 c0 	pushm	r6-r7,lr
80015340:	1a 97       	mov	r7,sp
80015342:	20 1d       	sub	sp,4
80015344:	fe f6 03 9c 	ld.w	r6,pc[924]
80015348:	1e 26       	rsub	r6,pc
	uint8_t channelSwitches = 0;
8001534a:	30 08       	mov	r8,0
8001534c:	ef 68 ff ff 	st.b	r7[-1],r8
	int8_t RC_check = 0;
80015350:	30 08       	mov	r8,0
80015352:	ef 68 ff fe 	st.b	r7[-2],r8
	int8_t motor_switch = 0;
80015356:	30 08       	mov	r8,0
80015358:	ef 68 ff fd 	st.b	r7[-3],r8
	
	LED_Toggle(LED1);
8001535c:	30 2c       	mov	r12,2
8001535e:	f0 16 01 c2 	mcall	r6[1800]
	
	rc_user_channels(&channelSwitches,&RC_check, &motor_switch);
80015362:	ee ca 00 03 	sub	r10,r7,3
80015366:	ee c9 00 02 	sub	r9,r7,2
8001536a:	ee c8 00 01 	sub	r8,r7,1
8001536e:	12 9b       	mov	r11,r9
80015370:	10 9c       	mov	r12,r8
80015372:	f0 16 01 4b 	mcall	r6[1324]
	
	switch(centralData->mav_state)
80015376:	ec f8 00 00 	ld.w	r8,r6[0]
8001537a:	70 08       	ld.w	r8,r8[0x0]
8001537c:	f1 38 10 bd 	ld.ub	r8,r8[4285]
80015380:	58 48       	cp.w	r8,4
80015382:	c6 50       	breq	8001544c <set_mav_mode_n_state+0x110>
80015384:	e0 89 00 09 	brgt	80015396 <set_mav_mode_n_state+0x5a>
80015388:	58 28       	cp.w	r8,2
8001538a:	e0 80 01 a2 	breq	800156ce <set_mav_mode_n_state+0x392>
8001538e:	58 38       	cp.w	r8,3
80015390:	c0 b0       	breq	800153a6 <set_mav_mode_n_state+0x6a>
80015392:	e0 8f 01 a3 	bral	800156d8 <set_mav_mode_n_state+0x39c>
80015396:	58 58       	cp.w	r8,5
80015398:	e0 80 00 fa 	breq	8001558c <set_mav_mode_n_state+0x250>
8001539c:	58 68       	cp.w	r8,6
8001539e:	e0 80 01 70 	breq	8001567e <set_mav_mode_n_state+0x342>
800153a2:	e0 8f 01 9b 	bral	800156d8 <set_mav_mode_n_state+0x39c>
	{
		case MAV_STATE_CALIBRATING:
			break;
		case MAV_STATE_STANDBY:
			if (motor_switch == 1)
800153a6:	ef 39 ff fd 	ld.ub	r9,r7[-3]
800153aa:	30 18       	mov	r8,1
800153ac:	f0 09 18 00 	cp.b	r9,r8
800153b0:	e0 81 01 91 	brne	800156d2 <set_mav_mode_n_state+0x396>
			{
				switch(channelSwitches)
800153b4:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800153b8:	58 18       	cp.w	r8,1
800153ba:	c3 70       	breq	80015428 <set_mav_mode_n_state+0xec>
800153bc:	e0 89 00 06 	brgt	800153c8 <set_mav_mode_n_state+0x8c>
800153c0:	58 08       	cp.w	r8,0
800153c2:	c0 90       	breq	800153d4 <set_mav_mode_n_state+0x98>
					case 3:
						dbg_print("Switches not ready, both should be pushed!\n");
						break;
				}
			}
			break;
800153c4:	e0 8f 01 8a 	bral	800156d8 <set_mav_mode_n_state+0x39c>
		case MAV_STATE_CALIBRATING:
			break;
		case MAV_STATE_STANDBY:
			if (motor_switch == 1)
			{
				switch(channelSwitches)
800153c8:	58 28       	cp.w	r8,2
800153ca:	c3 40       	breq	80015432 <set_mav_mode_n_state+0xf6>
800153cc:	58 38       	cp.w	r8,3
800153ce:	c3 70       	breq	8001543c <set_mav_mode_n_state+0x100>
					case 3:
						dbg_print("Switches not ready, both should be pushed!\n");
						break;
				}
			}
			break;
800153d0:	e0 8f 01 84 	bral	800156d8 <set_mav_mode_n_state+0x39c>
			if (motor_switch == 1)
			{
				switch(channelSwitches)
				{
					case 0:
						dbg_print("Switching on the motors!\n");
800153d4:	fe cc 00 f8 	sub	r12,pc,248
800153d8:	f0 16 00 01 	mcall	r6[4]
						position_reset_home_altitude(&centralData->position_estimator, &centralData->pressure, &centralData->GPS_data);
800153dc:	ec f8 00 00 	ld.w	r8,r6[0]
800153e0:	70 08       	ld.w	r8,r8[0x0]
800153e2:	f0 ca f4 f8 	sub	r10,r8,-2824
800153e6:	ec f8 00 00 	ld.w	r8,r6[0]
800153ea:	70 08       	ld.w	r8,r8[0x0]
800153ec:	f0 c9 ef 3c 	sub	r9,r8,-4292
800153f0:	ec f8 00 00 	ld.w	r8,r6[0]
800153f4:	70 08       	ld.w	r8,r8[0x0]
800153f6:	f0 c8 f2 c4 	sub	r8,r8,-3388
800153fa:	12 9b       	mov	r11,r9
800153fc:	10 9c       	mov	r12,r8
800153fe:	f0 16 02 01 	mcall	r6[2052]
						centralData->controls.run_mode = MOTORS_ON;
80015402:	ec f8 00 00 	ld.w	r8,r6[0]
80015406:	70 08       	ld.w	r8,r8[0x0]
80015408:	30 19       	mov	r9,1
8001540a:	f1 49 01 70 	st.w	r8[368],r9
						centralData->mav_state = MAV_STATE_ACTIVE;
8001540e:	ec f8 00 00 	ld.w	r8,r6[0]
80015412:	70 09       	ld.w	r9,r8[0x0]
80015414:	30 48       	mov	r8,4
80015416:	f3 68 10 bd 	st.b	r9[4285],r8
						centralData->mav_mode = MAV_MODE_MANUAL_ARMED;
8001541a:	ec f8 00 00 	ld.w	r8,r6[0]
8001541e:	70 09       	ld.w	r9,r8[0x0]
80015420:	3c 08       	mov	r8,-64
80015422:	f3 68 10 bc 	st.b	r9[4284],r8
						break;
80015426:	c1 18       	rjmp	80015448 <set_mav_mode_n_state+0x10c>
					case 1:
						dbg_print("Switches not ready, both should be pushed!\n");
80015428:	fe cc 01 30 	sub	r12,pc,304
8001542c:	f0 16 00 01 	mcall	r6[4]
						//centralData->controls.run_mode = MOTORS_ON;
						//centralData->mav_state = MAV_STATE_ACTIVE;
						//centralData->mav_mode = MAV_MODE_STABILIZE_ARMED;
						break;
80015430:	c0 c8       	rjmp	80015448 <set_mav_mode_n_state+0x10c>
					case 2:
						dbg_print("Switches not ready, both should be pushed!\n");
80015432:	fe cc 01 3a 	sub	r12,pc,314
80015436:	f0 16 00 01 	mcall	r6[4]
						break;
8001543a:	c0 78       	rjmp	80015448 <set_mav_mode_n_state+0x10c>
					case 3:
						dbg_print("Switches not ready, both should be pushed!\n");
8001543c:	fe cc 01 44 	sub	r12,pc,324
80015440:	f0 16 00 01 	mcall	r6[4]
						break;
				}
			}
			break;
80015444:	e0 8f 01 4a 	bral	800156d8 <set_mav_mode_n_state+0x39c>
80015448:	e0 8f 01 48 	bral	800156d8 <set_mav_mode_n_state+0x39c>
		case MAV_STATE_ACTIVE:
			switch(channelSwitches)
8001544c:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80015450:	58 18       	cp.w	r8,1
80015452:	c1 80       	breq	80015482 <set_mav_mode_n_state+0x146>
80015454:	e0 89 00 05 	brgt	8001545e <set_mav_mode_n_state+0x122>
80015458:	58 08       	cp.w	r8,0
8001545a:	c0 70       	breq	80015468 <set_mav_mode_n_state+0x12c>
8001545c:	c2 d8       	rjmp	800154b6 <set_mav_mode_n_state+0x17a>
8001545e:	58 28       	cp.w	r8,2
80015460:	c1 e0       	breq	8001549c <set_mav_mode_n_state+0x160>
80015462:	58 38       	cp.w	r8,3
80015464:	c2 30       	breq	800154aa <set_mav_mode_n_state+0x16e>
80015466:	c2 88       	rjmp	800154b6 <set_mav_mode_n_state+0x17a>
			{
				case 0:
					centralData->waypoint_hold_init = false;
80015468:	ec f8 00 00 	ld.w	r8,r6[0]
8001546c:	70 09       	ld.w	r9,r8[0x0]
8001546e:	30 08       	mov	r8,0
80015470:	f3 68 10 b7 	st.b	r9[4279],r8
					centralData->mav_mode= MAV_MODE_MANUAL_ARMED;
80015474:	ec f8 00 00 	ld.w	r8,r6[0]
80015478:	70 09       	ld.w	r9,r8[0x0]
8001547a:	3c 08       	mov	r8,-64
8001547c:	f3 68 10 bc 	st.b	r9[4284],r8
					break;
80015480:	c1 b8       	rjmp	800154b6 <set_mav_mode_n_state+0x17a>
				case 1:
					centralData->waypoint_hold_init = false;
80015482:	ec f8 00 00 	ld.w	r8,r6[0]
80015486:	70 09       	ld.w	r9,r8[0x0]
80015488:	30 08       	mov	r8,0
8001548a:	f3 68 10 b7 	st.b	r9[4279],r8
					centralData->mav_mode= MAV_MODE_STABILIZE_ARMED;
8001548e:	ec f8 00 00 	ld.w	r8,r6[0]
80015492:	70 09       	ld.w	r9,r8[0x0]
80015494:	3d 08       	mov	r8,-48
80015496:	f3 68 10 bc 	st.b	r9[4284],r8
					break;
8001549a:	c0 e8       	rjmp	800154b6 <set_mav_mode_n_state+0x17a>
				case 2:
					centralData->mav_mode = MAV_MODE_GUIDED_ARMED;
8001549c:	ec f8 00 00 	ld.w	r8,r6[0]
800154a0:	70 09       	ld.w	r9,r8[0x0]
800154a2:	3d 88       	mov	r8,-40
800154a4:	f3 68 10 bc 	st.b	r9[4284],r8
					break;
800154a8:	c0 78       	rjmp	800154b6 <set_mav_mode_n_state+0x17a>
				case 3:
					
					centralData->mav_mode = MAV_MODE_AUTO_ARMED;
800154aa:	ec f8 00 00 	ld.w	r8,r6[0]
800154ae:	70 09       	ld.w	r9,r8[0x0]
800154b0:	3d c8       	mov	r8,-36
800154b2:	f3 68 10 bc 	st.b	r9[4284],r8
					break;
			}
			
			switch (centralData->mav_mode)
800154b6:	ec f8 00 00 	ld.w	r8,r6[0]
800154ba:	70 08       	ld.w	r8,r8[0x0]
800154bc:	f1 38 10 bc 	ld.ub	r8,r8[4284]
800154c0:	e0 48 00 d0 	cp.w	r8,208
800154c4:	c1 50       	breq	800154ee <set_mav_mode_n_state+0x1b2>
800154c6:	e0 89 00 06 	brgt	800154d2 <set_mav_mode_n_state+0x196>
800154ca:	e0 48 00 c0 	cp.w	r8,192
800154ce:	c0 90       	breq	800154e0 <set_mav_mode_n_state+0x1a4>
800154d0:	c2 88       	rjmp	80015520 <set_mav_mode_n_state+0x1e4>
800154d2:	e0 48 00 d8 	cp.w	r8,216
800154d6:	c1 30       	breq	800154fc <set_mav_mode_n_state+0x1c0>
800154d8:	e0 48 00 dc 	cp.w	r8,220
800154dc:	c1 30       	breq	80015502 <set_mav_mode_n_state+0x1c6>
800154de:	c2 18       	rjmp	80015520 <set_mav_mode_n_state+0x1e4>
			{
				case MAV_MODE_MANUAL_ARMED:
					centralData->waypoint_hold_init = false;
800154e0:	ec f8 00 00 	ld.w	r8,r6[0]
800154e4:	70 09       	ld.w	r9,r8[0x0]
800154e6:	30 08       	mov	r8,0
800154e8:	f3 68 10 b7 	st.b	r9[4279],r8
					break;
800154ec:	c1 a8       	rjmp	80015520 <set_mav_mode_n_state+0x1e4>
				case MAV_MODE_STABILIZE_ARMED:
					centralData->waypoint_hold_init = false;
800154ee:	ec f8 00 00 	ld.w	r8,r6[0]
800154f2:	70 09       	ld.w	r9,r8[0x0]
800154f4:	30 08       	mov	r8,0
800154f6:	f3 68 10 b7 	st.b	r9[4279],r8
					break;
800154fa:	c1 38       	rjmp	80015520 <set_mav_mode_n_state+0x1e4>
				case MAV_MODE_GUIDED_ARMED:
					waypoint_hold_position_handler();
800154fc:	f0 16 01 b6 	mcall	r6[1752]
					break;
80015500:	c1 08       	rjmp	80015520 <set_mav_mode_n_state+0x1e4>
				case MAV_MODE_AUTO_ARMED:
					if (centralData->waypoint_set)
80015502:	ec f8 00 00 	ld.w	r8,r6[0]
80015506:	70 08       	ld.w	r8,r8[0x0]
80015508:	f1 38 10 b4 	ld.ub	r8,r8[4276]
8001550c:	58 08       	cp.w	r8,0
8001550e:	c0 70       	breq	8001551c <set_mav_mode_n_state+0x1e0>
					{
						centralData->waypoint_hold_init = false;
80015510:	ec f8 00 00 	ld.w	r8,r6[0]
80015514:	70 09       	ld.w	r9,r8[0x0]
80015516:	30 08       	mov	r8,0
80015518:	f3 68 10 b7 	st.b	r9[4279],r8
					}
					waypoint_navigation_handler();
8001551c:	f0 16 02 06 	mcall	r6[2072]
					break;
			}
			
			//dbg_print("motor_switch: ");
			//dbg_print_num(motor_switch,10);
			if (motor_switch == -1)
80015520:	ef 39 ff fd 	ld.ub	r9,r7[-3]
80015524:	3f f8       	mov	r8,-1
80015526:	f0 09 18 00 	cp.b	r9,r8
8001552a:	c1 71       	brne	80015558 <set_mav_mode_n_state+0x21c>
			{
				dbg_print("Switching off motors!\n");
8001552c:	fe cc 02 08 	sub	r12,pc,520
80015530:	f0 16 00 01 	mcall	r6[4]
				centralData->controls.run_mode = MOTORS_OFF;
80015534:	ec f8 00 00 	ld.w	r8,r6[0]
80015538:	70 08       	ld.w	r8,r8[0x0]
8001553a:	30 09       	mov	r9,0
8001553c:	f1 49 01 70 	st.w	r8[368],r9
				centralData->mav_state = MAV_STATE_STANDBY;
80015540:	ec f8 00 00 	ld.w	r8,r6[0]
80015544:	70 09       	ld.w	r9,r8[0x0]
80015546:	30 38       	mov	r8,3
80015548:	f3 68 10 bd 	st.b	r9[4285],r8
				centralData->mav_mode = MAV_MODE_MANUAL_DISARMED;
8001554c:	ec f8 00 00 	ld.w	r8,r6[0]
80015550:	70 09       	ld.w	r9,r8[0x0]
80015552:	34 08       	mov	r8,64
80015554:	f3 68 10 bc 	st.b	r9[4284],r8
			}
		
			switch (RC_check)
80015558:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8001555c:	5c 68       	casts.b	r8
8001555e:	5b f8       	cp.w	r8,-1
80015560:	c0 70       	breq	8001556e <set_mav_mode_n_state+0x232>
80015562:	58 18       	cp.w	r8,1
80015564:	c0 40       	breq	8001556c <set_mav_mode_n_state+0x230>
80015566:	5b e8       	cp.w	r8,-2
80015568:	c0 a0       	breq	8001557c <set_mav_mode_n_state+0x240>
					break;
				case -2:
					centralData->mav_state = MAV_STATE_CRITICAL;
					break;
			}
			break;
8001556a:	cb 78       	rjmp	800156d8 <set_mav_mode_n_state+0x39c>
			}
		
			switch (RC_check)
			{
				case 1:
					break;
8001556c:	c0 f8       	rjmp	8001558a <set_mav_mode_n_state+0x24e>
				case -1:
					centralData->mav_state = MAV_STATE_CRITICAL;
8001556e:	ec f8 00 00 	ld.w	r8,r6[0]
80015572:	70 09       	ld.w	r9,r8[0x0]
80015574:	30 58       	mov	r8,5
80015576:	f3 68 10 bd 	st.b	r9[4285],r8
					break;
8001557a:	c0 88       	rjmp	8001558a <set_mav_mode_n_state+0x24e>
				case -2:
					centralData->mav_state = MAV_STATE_CRITICAL;
8001557c:	ec f8 00 00 	ld.w	r8,r6[0]
80015580:	70 09       	ld.w	r9,r8[0x0]
80015582:	30 58       	mov	r8,5
80015584:	f3 68 10 bd 	st.b	r9[4285],r8
					break;
			}
			break;
80015588:	ca 88       	rjmp	800156d8 <set_mav_mode_n_state+0x39c>
8001558a:	ca 78       	rjmp	800156d8 <set_mav_mode_n_state+0x39c>
		case MAV_STATE_CRITICAL:
			switch(channelSwitches)
8001558c:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80015590:	58 18       	cp.w	r8,1
80015592:	c1 20       	breq	800155b6 <set_mav_mode_n_state+0x27a>
80015594:	e0 89 00 05 	brgt	8001559e <set_mav_mode_n_state+0x262>
80015598:	58 08       	cp.w	r8,0
8001559a:	c0 70       	breq	800155a8 <set_mav_mode_n_state+0x26c>
8001559c:	c2 18       	rjmp	800155de <set_mav_mode_n_state+0x2a2>
8001559e:	58 28       	cp.w	r8,2
800155a0:	c1 20       	breq	800155c4 <set_mav_mode_n_state+0x288>
800155a2:	58 38       	cp.w	r8,3
800155a4:	c1 70       	breq	800155d2 <set_mav_mode_n_state+0x296>
800155a6:	c1 c8       	rjmp	800155de <set_mav_mode_n_state+0x2a2>
			{
				case 0:
					centralData->mav_mode= MAV_MODE_MANUAL_ARMED;
800155a8:	ec f8 00 00 	ld.w	r8,r6[0]
800155ac:	70 09       	ld.w	r9,r8[0x0]
800155ae:	3c 08       	mov	r8,-64
800155b0:	f3 68 10 bc 	st.b	r9[4284],r8
					break;
800155b4:	c1 58       	rjmp	800155de <set_mav_mode_n_state+0x2a2>
				case 1:
					centralData->mav_mode= MAV_MODE_STABILIZE_ARMED;
800155b6:	ec f8 00 00 	ld.w	r8,r6[0]
800155ba:	70 09       	ld.w	r9,r8[0x0]
800155bc:	3d 08       	mov	r8,-48
800155be:	f3 68 10 bc 	st.b	r9[4284],r8
					break;
800155c2:	c0 e8       	rjmp	800155de <set_mav_mode_n_state+0x2a2>
				case 2:
					centralData->mav_mode = MAV_MODE_GUIDED_ARMED;
800155c4:	ec f8 00 00 	ld.w	r8,r6[0]
800155c8:	70 09       	ld.w	r9,r8[0x0]
800155ca:	3d 88       	mov	r8,-40
800155cc:	f3 68 10 bc 	st.b	r9[4284],r8
					break;
800155d0:	c0 78       	rjmp	800155de <set_mav_mode_n_state+0x2a2>
				case 3:
					centralData->mav_mode = MAV_MODE_AUTO_ARMED;
800155d2:	ec f8 00 00 	ld.w	r8,r6[0]
800155d6:	70 09       	ld.w	r9,r8[0x0]
800155d8:	3d c8       	mov	r8,-36
800155da:	f3 68 10 bc 	st.b	r9[4284],r8
					break;
			}
			if (motor_switch == -1)
800155de:	ef 39 ff fd 	ld.ub	r9,r7[-3]
800155e2:	3f f8       	mov	r8,-1
800155e4:	f0 09 18 00 	cp.b	r9,r8
800155e8:	c1 71       	brne	80015616 <set_mav_mode_n_state+0x2da>
			{
				dbg_print("Switching off motors!\n");
800155ea:	fe cc 02 c6 	sub	r12,pc,710
800155ee:	f0 16 00 01 	mcall	r6[4]
				centralData->controls.run_mode = MOTORS_OFF;
800155f2:	ec f8 00 00 	ld.w	r8,r6[0]
800155f6:	70 08       	ld.w	r8,r8[0x0]
800155f8:	30 09       	mov	r9,0
800155fa:	f1 49 01 70 	st.w	r8[368],r9
				centralData->mav_state = MAV_STATE_STANDBY;
800155fe:	ec f8 00 00 	ld.w	r8,r6[0]
80015602:	70 09       	ld.w	r9,r8[0x0]
80015604:	30 38       	mov	r8,3
80015606:	f3 68 10 bd 	st.b	r9[4285],r8
				centralData->mav_mode = MAV_MODE_MANUAL_DISARMED;
8001560a:	ec f8 00 00 	ld.w	r8,r6[0]
8001560e:	70 09       	ld.w	r9,r8[0x0]
80015610:	34 08       	mov	r8,64
80015612:	f3 68 10 bc 	st.b	r9[4284],r8
			}
			
			switch (centralData->mav_mode)
80015616:	ec f8 00 00 	ld.w	r8,r6[0]
8001561a:	70 08       	ld.w	r8,r8[0x0]
8001561c:	f1 38 10 bc 	ld.ub	r8,r8[4284]
80015620:	e0 48 00 d8 	cp.w	r8,216
80015624:	c0 40       	breq	8001562c <set_mav_mode_n_state+0x2f0>
80015626:	e0 48 00 dc 	cp.w	r8,220
8001562a:	c0 31       	brne	80015630 <set_mav_mode_n_state+0x2f4>
			{
				case MAV_MODE_GUIDED_ARMED:
				case MAV_MODE_AUTO_ARMED:
					waypoint_critical_handler();
8001562c:	f0 16 01 d3 	mcall	r6[1868]
					break;
			}
			
			switch (RC_check)
80015630:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80015634:	5c 68       	casts.b	r8
80015636:	5b f8       	cp.w	r8,-1
80015638:	c1 30       	breq	8001565e <set_mav_mode_n_state+0x322>
8001563a:	58 18       	cp.w	r8,1
8001563c:	c0 40       	breq	80015644 <set_mav_mode_n_state+0x308>
8001563e:	5b e8       	cp.w	r8,-2
80015640:	c1 00       	breq	80015660 <set_mav_mode_n_state+0x324>
						centralData->mav_state = MAV_STATE_EMERGENCY;
					}
					//centralData->mav_state = MAV_STATE_EMERGENCY;
					break;
			}
			break;
80015642:	c4 b8       	rjmp	800156d8 <set_mav_mode_n_state+0x39c>
			}
			
			switch (RC_check)
			{
				case 1:
					centralData->mav_state = MAV_STATE_ACTIVE;
80015644:	ec f8 00 00 	ld.w	r8,r6[0]
80015648:	70 09       	ld.w	r9,r8[0x0]
8001564a:	30 48       	mov	r8,4
8001564c:	f3 68 10 bd 	st.b	r9[4285],r8
					centralData->critical_init = false;
80015650:	ec f8 00 00 	ld.w	r8,r6[0]
80015654:	70 09       	ld.w	r9,r8[0x0]
80015656:	30 08       	mov	r8,0
80015658:	f3 68 10 b9 	st.b	r9[4281],r8
					break;
8001565c:	c1 08       	rjmp	8001567c <set_mav_mode_n_state+0x340>
				case -1:
					break;
8001565e:	c0 f8       	rjmp	8001567c <set_mav_mode_n_state+0x340>
				case -2:
					if (centralData->critical_landing)
80015660:	ec f8 00 00 	ld.w	r8,r6[0]
80015664:	70 08       	ld.w	r8,r8[0x0]
80015666:	f1 38 10 b8 	ld.ub	r8,r8[4280]
8001566a:	58 08       	cp.w	r8,0
8001566c:	c3 50       	breq	800156d6 <set_mav_mode_n_state+0x39a>
					{
						centralData->mav_state = MAV_STATE_EMERGENCY;
8001566e:	ec f8 00 00 	ld.w	r8,r6[0]
80015672:	70 09       	ld.w	r9,r8[0x0]
80015674:	30 68       	mov	r8,6
80015676:	f3 68 10 bd 	st.b	r9[4285],r8
					}
					//centralData->mav_state = MAV_STATE_EMERGENCY;
					break;
			}
			break;
8001567a:	c2 f8       	rjmp	800156d8 <set_mav_mode_n_state+0x39c>
8001567c:	c2 e8       	rjmp	800156d8 <set_mav_mode_n_state+0x39c>
		case MAV_STATE_EMERGENCY:
			if (centralData->position_estimator.localPosition.pos[Z] < 1.0)
8001567e:	ec f8 00 00 	ld.w	r8,r6[0]
80015682:	70 08       	ld.w	r8,r8[0x0]
80015684:	f0 fa 0d a4 	ld.w	r10,r8[3492]
80015688:	30 18       	mov	r8,1
8001568a:	fc 19 3f 80 	movh	r9,0x3f80
8001568e:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80015692:	e0 8c 00 03 	brvs	80015698 <set_mav_mode_n_state+0x35c>
80015696:	c0 25       	brlt	8001569a <set_mav_mode_n_state+0x35e>
80015698:	30 08       	mov	r8,0
8001569a:	5c 58       	castu.b	r8
8001569c:	c1 e0       	breq	800156d8 <set_mav_mode_n_state+0x39c>
			{
				centralData->mav_mode = MAV_MODE_MANUAL_DISARMED;
8001569e:	ec f8 00 00 	ld.w	r8,r6[0]
800156a2:	70 09       	ld.w	r9,r8[0x0]
800156a4:	34 08       	mov	r8,64
800156a6:	f3 68 10 bc 	st.b	r9[4284],r8
				centralData->controls.control_mode = ATTITUDE_COMMAND_MODE;
800156aa:	ec f8 00 00 	ld.w	r8,r6[0]
800156ae:	70 08       	ld.w	r8,r8[0x0]
800156b0:	30 19       	mov	r9,1
800156b2:	f1 49 01 68 	st.w	r8[360],r9
				switch (RC_check)
800156b6:	ef 38 ff fe 	ld.ub	r8,r7[-2]
800156ba:	5c 68       	casts.b	r8
800156bc:	58 18       	cp.w	r8,1
800156be:	c0 d1       	brne	800156d8 <set_mav_mode_n_state+0x39c>
				{
					case 1:
						centralData->mav_state = MAV_STATE_STANDBY;
800156c0:	ec f8 00 00 	ld.w	r8,r6[0]
800156c4:	70 09       	ld.w	r9,r8[0x0]
800156c6:	30 38       	mov	r8,3
800156c8:	f3 68 10 bd 	st.b	r9[4285],r8
800156cc:	c0 68       	rjmp	800156d8 <set_mav_mode_n_state+0x39c>
	rc_user_channels(&channelSwitches,&RC_check, &motor_switch);
	
	switch(centralData->mav_state)
	{
		case MAV_STATE_CALIBRATING:
			break;
800156ce:	d7 03       	nop
800156d0:	c0 48       	rjmp	800156d8 <set_mav_mode_n_state+0x39c>
					case 3:
						dbg_print("Switches not ready, both should be pushed!\n");
						break;
				}
			}
			break;
800156d2:	d7 03       	nop
800156d4:	c0 28       	rjmp	800156d8 <set_mav_mode_n_state+0x39c>
						centralData->mav_state = MAV_STATE_EMERGENCY;
					}
					//centralData->mav_state = MAV_STATE_EMERGENCY;
					break;
			}
			break;
800156d6:	d7 03       	nop
	//dbg_print_num(centralData->mav_state,10);
	//dbg_print(", MAV mode :");
	//dbg_print_num(centralData->mav_mode,10);
	//dbg_print("\n");
	
}
800156d8:	2f fd       	sub	sp,-4
800156da:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800156de:	00 00       	add	r0,r0
800156e0:	80 01       	ld.sh	r1,r0[0x0]
800156e2:	51 cc       	stdsp	sp[0x70],r12

800156e4 <run_stabilisation>:

task_return_t run_stabilisation() {
800156e4:	eb cd 40 e0 	pushm	r5-r7,lr
800156e8:	1a 97       	mov	r7,sp
800156ea:	20 cd       	sub	sp,48
800156ec:	fe f6 04 18 	ld.w	r6,pc[1048]
800156f0:	1e 26       	rsub	r6,pc
	int i;
	
	if (centralData->simulation_mode==1) {
800156f2:	ec f8 00 00 	ld.w	r8,r6[0]
800156f6:	70 08       	ld.w	r8,r8[0x0]
800156f8:	f0 f8 10 c0 	ld.w	r8,r8[4288]
800156fc:	58 18       	cp.w	r8,1
800156fe:	c2 d1       	brne	80015758 <run_stabilisation+0x74>
		simu_update(&centralData->sim_model, &centralData->servos, &(centralData->imu1), &centralData->position_estimator);
80015700:	ec f8 00 00 	ld.w	r8,r6[0]
80015704:	70 08       	ld.w	r8,r8[0x0]
80015706:	f0 c9 f2 c4 	sub	r9,r8,-3388
8001570a:	ec f8 00 00 	ld.w	r8,r6[0]
8001570e:	70 08       	ld.w	r8,r8[0x0]
80015710:	10 9a       	mov	r10,r8
80015712:	ec f8 00 00 	ld.w	r8,r6[0]
80015716:	70 08       	ld.w	r8,r8[0x0]
80015718:	f0 cb f9 14 	sub	r11,r8,-1772
8001571c:	ec f8 00 00 	ld.w	r8,r6[0]
80015720:	70 08       	ld.w	r8,r8[0x0]
80015722:	f0 c8 f4 58 	sub	r8,r8,-2984
80015726:	10 9c       	mov	r12,r8
80015728:	f0 16 01 94 	mcall	r6[1616]
		
		
		imu_update(&(centralData->imu1), &(centralData->position_estimator), &centralData->pressure, &centralData->GPS_data);
8001572c:	ec f8 00 00 	ld.w	r8,r6[0]
80015730:	70 08       	ld.w	r8,r8[0x0]
80015732:	f0 c9 f4 f8 	sub	r9,r8,-2824
80015736:	ec f8 00 00 	ld.w	r8,r6[0]
8001573a:	70 08       	ld.w	r8,r8[0x0]
8001573c:	f0 ca ef 3c 	sub	r10,r8,-4292
80015740:	ec f8 00 00 	ld.w	r8,r6[0]
80015744:	70 08       	ld.w	r8,r8[0x0]
80015746:	f0 cb f2 c4 	sub	r11,r8,-3388
8001574a:	ec f8 00 00 	ld.w	r8,r6[0]
8001574e:	70 08       	ld.w	r8,r8[0x0]
80015750:	10 9c       	mov	r12,r8
80015752:	f0 16 00 8d 	mcall	r6[564]
80015756:	c1 c8       	rjmp	8001578e <run_stabilisation+0xaa>
		
		//for (i=0; i<3; i++) centralData->position_estimator.vel[i]=centralData->sim_model.vel[i];
		//centralData->position_estimator.localPosition=centralData->sim_model.localPosition;
	} else {
		imu_get_raw_data(&(centralData->imu1));
80015758:	ec f8 00 00 	ld.w	r8,r6[0]
8001575c:	70 08       	ld.w	r8,r8[0x0]
8001575e:	10 9c       	mov	r12,r8
80015760:	f0 16 00 8c 	mcall	r6[560]
		imu_update(&(centralData->imu1), &centralData->position_estimator, &centralData->pressure, &centralData->GPS_data);
80015764:	ec f8 00 00 	ld.w	r8,r6[0]
80015768:	70 08       	ld.w	r8,r8[0x0]
8001576a:	f0 c9 f4 f8 	sub	r9,r8,-2824
8001576e:	ec f8 00 00 	ld.w	r8,r6[0]
80015772:	70 08       	ld.w	r8,r8[0x0]
80015774:	f0 ca ef 3c 	sub	r10,r8,-4292
80015778:	ec f8 00 00 	ld.w	r8,r6[0]
8001577c:	70 08       	ld.w	r8,r8[0x0]
8001577e:	f0 cb f2 c4 	sub	r11,r8,-3388
80015782:	ec f8 00 00 	ld.w	r8,r6[0]
80015786:	70 08       	ld.w	r8,r8[0x0]
80015788:	10 9c       	mov	r12,r8
8001578a:	f0 16 00 8d 	mcall	r6[564]
	}

	switch(centralData->mav_mode)
8001578e:	ec f8 00 00 	ld.w	r8,r6[0]
80015792:	70 08       	ld.w	r8,r8[0x0]
80015794:	f1 38 10 bc 	ld.ub	r8,r8[4284]
80015798:	e0 48 00 5c 	cp.w	r8,92
8001579c:	e0 80 01 73 	breq	80015a82 <run_stabilisation+0x39e>
800157a0:	e0 89 00 17 	brgt	800157ce <run_stabilisation+0xea>
800157a4:	e0 48 00 40 	cp.w	r8,64
800157a8:	e0 80 01 6d 	breq	80015a82 <run_stabilisation+0x39e>
800157ac:	e0 89 00 07 	brgt	800157ba <run_stabilisation+0xd6>
800157b0:	58 08       	cp.w	r8,0
800157b2:	e0 80 01 68 	breq	80015a82 <run_stabilisation+0x39e>
800157b6:	e0 8f 01 95 	bral	80015ae0 <run_stabilisation+0x3fc>
800157ba:	e0 48 00 50 	cp.w	r8,80
800157be:	e0 80 01 62 	breq	80015a82 <run_stabilisation+0x39e>
800157c2:	e0 48 00 58 	cp.w	r8,88
800157c6:	e0 80 01 5e 	breq	80015a82 <run_stabilisation+0x39e>
800157ca:	e0 8f 01 8b 	bral	80015ae0 <run_stabilisation+0x3fc>
800157ce:	e0 48 00 d0 	cp.w	r8,208
800157d2:	c5 a0       	breq	80015886 <run_stabilisation+0x1a2>
800157d4:	e0 89 00 07 	brgt	800157e2 <run_stabilisation+0xfe>
800157d8:	e0 48 00 c0 	cp.w	r8,192
800157dc:	c0 d0       	breq	800157f6 <run_stabilisation+0x112>
800157de:	e0 8f 01 81 	bral	80015ae0 <run_stabilisation+0x3fc>
800157e2:	e0 48 00 d8 	cp.w	r8,216
800157e6:	e0 80 00 c2 	breq	8001596a <run_stabilisation+0x286>
800157ea:	e0 48 00 dc 	cp.w	r8,220
800157ee:	e0 80 01 04 	breq	800159f6 <run_stabilisation+0x312>
800157f2:	e0 8f 01 77 	bral	80015ae0 <run_stabilisation+0x3fc>
	{
		
		case MAV_MODE_MANUAL_ARMED:
			centralData->controls = get_command_from_remote();
800157f6:	ec f8 00 00 	ld.w	r8,r6[0]
800157fa:	70 05       	ld.w	r5,r8[0x0]
800157fc:	ee c8 00 30 	sub	r8,r7,48
80015800:	10 9c       	mov	r12,r8
80015802:	fe b0 fb 93 	rcall	80014f28 <get_command_from_remote>
80015806:	ea c8 fe b8 	sub	r8,r5,-328
8001580a:	ee c9 00 30 	sub	r9,r7,48
8001580e:	f0 ca 00 00 	sub	r10,r8,0
80015812:	f2 cb 00 00 	sub	r11,r9,0
80015816:	76 0c       	ld.w	r12,r11[0x0]
80015818:	95 0c       	st.w	r10[0x0],r12
8001581a:	76 1c       	ld.w	r12,r11[0x4]
8001581c:	95 1c       	st.w	r10[0x4],r12
8001581e:	76 2c       	ld.w	r12,r11[0x8]
80015820:	95 2c       	st.w	r10[0x8],r12
80015822:	76 3b       	ld.w	r11,r11[0xc]
80015824:	95 3b       	st.w	r10[0xc],r11
80015826:	f0 ca ff f0 	sub	r10,r8,-16
8001582a:	f2 cb ff f0 	sub	r11,r9,-16
8001582e:	76 0c       	ld.w	r12,r11[0x0]
80015830:	95 0c       	st.w	r10[0x0],r12
80015832:	76 1c       	ld.w	r12,r11[0x4]
80015834:	95 1c       	st.w	r10[0x4],r12
80015836:	76 2c       	ld.w	r12,r11[0x8]
80015838:	95 2c       	st.w	r10[0x8],r12
8001583a:	76 3b       	ld.w	r11,r11[0xc]
8001583c:	95 3b       	st.w	r10[0xc],r11
8001583e:	f2 ea 00 20 	ld.d	r10,r9[32]
80015842:	f0 eb 00 20 	st.d	r8[32],r10
80015846:	72 a9       	ld.w	r9,r9[0x28]
80015848:	91 a9       	st.w	r8[0x28],r9
			
			centralData->controls.yaw_mode=YAW_RELATIVE;
8001584a:	ec f8 00 00 	ld.w	r8,r6[0]
8001584e:	70 08       	ld.w	r8,r8[0x0]
80015850:	30 09       	mov	r9,0
80015852:	f1 49 01 6c 	st.w	r8[364],r9
			centralData->controls.control_mode = ATTITUDE_COMMAND_MODE;
80015856:	ec f8 00 00 	ld.w	r8,r6[0]
8001585a:	70 08       	ld.w	r8,r8[0x0]
8001585c:	30 19       	mov	r9,1
8001585e:	f1 49 01 68 	st.w	r8[360],r9
			
			cascade_stabilise_copter(&(centralData->imu1), &centralData->position_estimator, &(centralData->controls));
80015862:	ec f8 00 00 	ld.w	r8,r6[0]
80015866:	70 08       	ld.w	r8,r8[0x0]
80015868:	f0 ca fe b8 	sub	r10,r8,-328
8001586c:	ec f8 00 00 	ld.w	r8,r6[0]
80015870:	70 08       	ld.w	r8,r8[0x0]
80015872:	f0 c9 f2 c4 	sub	r9,r8,-3388
80015876:	ec f8 00 00 	ld.w	r8,r6[0]
8001587a:	70 08       	ld.w	r8,r8[0x0]
8001587c:	12 9b       	mov	r11,r9
8001587e:	10 9c       	mov	r12,r8
80015880:	f0 16 00 8e 	mcall	r6[568]
			break;
80015884:	c2 e9       	rjmp	80015ae0 <run_stabilisation+0x3fc>
		case MAV_MODE_STABILIZE_ARMED:
			centralData->controls = get_command_from_remote();
80015886:	ec f8 00 00 	ld.w	r8,r6[0]
8001588a:	70 05       	ld.w	r5,r8[0x0]
8001588c:	ee c8 00 30 	sub	r8,r7,48
80015890:	10 9c       	mov	r12,r8
80015892:	fe b0 fb 4b 	rcall	80014f28 <get_command_from_remote>
80015896:	ea c8 fe b8 	sub	r8,r5,-328
8001589a:	ee c9 00 30 	sub	r9,r7,48
8001589e:	f0 ca 00 00 	sub	r10,r8,0
800158a2:	f2 cb 00 00 	sub	r11,r9,0
800158a6:	76 0c       	ld.w	r12,r11[0x0]
800158a8:	95 0c       	st.w	r10[0x0],r12
800158aa:	76 1c       	ld.w	r12,r11[0x4]
800158ac:	95 1c       	st.w	r10[0x4],r12
800158ae:	76 2c       	ld.w	r12,r11[0x8]
800158b0:	95 2c       	st.w	r10[0x8],r12
800158b2:	76 3b       	ld.w	r11,r11[0xc]
800158b4:	95 3b       	st.w	r10[0xc],r11
800158b6:	f0 ca ff f0 	sub	r10,r8,-16
800158ba:	f2 cb ff f0 	sub	r11,r9,-16
800158be:	76 0c       	ld.w	r12,r11[0x0]
800158c0:	95 0c       	st.w	r10[0x0],r12
800158c2:	76 1c       	ld.w	r12,r11[0x4]
800158c4:	95 1c       	st.w	r10[0x4],r12
800158c6:	76 2c       	ld.w	r12,r11[0x8]
800158c8:	95 2c       	st.w	r10[0x8],r12
800158ca:	76 3b       	ld.w	r11,r11[0xc]
800158cc:	95 3b       	st.w	r10[0xc],r11
800158ce:	f2 ea 00 20 	ld.d	r10,r9[32]
800158d2:	f0 eb 00 20 	st.d	r8[32],r10
800158d6:	72 a9       	ld.w	r9,r9[0x28]
800158d8:	91 a9       	st.w	r8[0x28],r9
			centralData->controls.control_mode = VELOCITY_COMMAND_MODE;
800158da:	ec f8 00 00 	ld.w	r8,r6[0]
800158de:	70 08       	ld.w	r8,r8[0x0]
800158e0:	30 09       	mov	r9,0
800158e2:	f1 49 01 68 	st.w	r8[360],r9
			centralData->controls.yaw_mode=YAW_RELATIVE;
800158e6:	ec f8 00 00 	ld.w	r8,r6[0]
800158ea:	70 08       	ld.w	r8,r8[0x0]
800158ec:	30 09       	mov	r9,0
800158ee:	f1 49 01 6c 	st.w	r8[364],r9
			
			centralData->controls.tvel[X]=-10.0*centralData->controls.rpy[PITCH];
800158f2:	ec f8 00 00 	ld.w	r8,r6[0]
800158f6:	70 08       	ld.w	r8,r8[0x0]
800158f8:	ec f9 00 00 	ld.w	r9,r6[0]
800158fc:	72 09       	ld.w	r9,r9[0x0]
800158fe:	f2 fa 01 4c 	ld.w	r10,r9[332]
80015902:	fc 19 c1 20 	movh	r9,0xc120
80015906:	e5 a2 09 a9 	cop	cp0,cr9,cr10,cr9,0x44
8001590a:	f1 49 01 58 	st.w	r8[344],r9
			centralData->controls.tvel[Y]= 10.0*centralData->controls.rpy[ROLL];
8001590e:	ec f8 00 00 	ld.w	r8,r6[0]
80015912:	70 08       	ld.w	r8,r8[0x0]
80015914:	ec f9 00 00 	ld.w	r9,r6[0]
80015918:	72 09       	ld.w	r9,r9[0x0]
8001591a:	f2 fa 01 48 	ld.w	r10,r9[328]
8001591e:	fc 19 41 20 	movh	r9,0x4120
80015922:	e5 a2 09 a9 	cop	cp0,cr9,cr10,cr9,0x44
80015926:	f1 49 01 5c 	st.w	r8[348],r9
			centralData->controls.tvel[Z]=- 1.5*centralData->controls.thrust;
8001592a:	ec f8 00 00 	ld.w	r8,r6[0]
8001592e:	70 08       	ld.w	r8,r8[0x0]
80015930:	ec f9 00 00 	ld.w	r9,r6[0]
80015934:	72 09       	ld.w	r9,r9[0x0]
80015936:	f2 fa 01 54 	ld.w	r10,r9[340]
8001593a:	fc 19 bf c0 	movh	r9,0xbfc0
8001593e:	e5 a2 09 a9 	cop	cp0,cr9,cr10,cr9,0x44
80015942:	f1 49 01 60 	st.w	r8[352],r9
			
			cascade_stabilise_copter(&(centralData->imu1), &centralData->position_estimator, &(centralData->controls));
80015946:	ec f8 00 00 	ld.w	r8,r6[0]
8001594a:	70 08       	ld.w	r8,r8[0x0]
8001594c:	f0 ca fe b8 	sub	r10,r8,-328
80015950:	ec f8 00 00 	ld.w	r8,r6[0]
80015954:	70 08       	ld.w	r8,r8[0x0]
80015956:	f0 c9 f2 c4 	sub	r9,r8,-3388
8001595a:	ec f8 00 00 	ld.w	r8,r6[0]
8001595e:	70 08       	ld.w	r8,r8[0x0]
80015960:	12 9b       	mov	r11,r9
80015962:	10 9c       	mov	r12,r8
80015964:	f0 16 00 8e 	mcall	r6[568]
			
			break;
80015968:	cb c8       	rjmp	80015ae0 <run_stabilisation+0x3fc>
		case MAV_MODE_GUIDED_ARMED:
			centralData->controls = centralData->controls_nav;
8001596a:	ec f8 00 00 	ld.w	r8,r6[0]
8001596e:	70 08       	ld.w	r8,r8[0x0]
80015970:	ec f9 00 00 	ld.w	r9,r6[0]
80015974:	72 09       	ld.w	r9,r9[0x0]
80015976:	f0 c8 fe b8 	sub	r8,r8,-328
8001597a:	f2 c9 fe 8c 	sub	r9,r9,-372
8001597e:	f0 ca 00 00 	sub	r10,r8,0
80015982:	f2 cb 00 00 	sub	r11,r9,0
80015986:	76 0c       	ld.w	r12,r11[0x0]
80015988:	95 0c       	st.w	r10[0x0],r12
8001598a:	76 1c       	ld.w	r12,r11[0x4]
8001598c:	95 1c       	st.w	r10[0x4],r12
8001598e:	76 2c       	ld.w	r12,r11[0x8]
80015990:	95 2c       	st.w	r10[0x8],r12
80015992:	76 3b       	ld.w	r11,r11[0xc]
80015994:	95 3b       	st.w	r10[0xc],r11
80015996:	f0 ca ff f0 	sub	r10,r8,-16
8001599a:	f2 cb ff f0 	sub	r11,r9,-16
8001599e:	76 0c       	ld.w	r12,r11[0x0]
800159a0:	95 0c       	st.w	r10[0x0],r12
800159a2:	76 1c       	ld.w	r12,r11[0x4]
800159a4:	95 1c       	st.w	r10[0x4],r12
800159a6:	76 2c       	ld.w	r12,r11[0x8]
800159a8:	95 2c       	st.w	r10[0x8],r12
800159aa:	76 3b       	ld.w	r11,r11[0xc]
800159ac:	95 3b       	st.w	r10[0xc],r11
800159ae:	f2 ea 00 20 	ld.d	r10,r9[32]
800159b2:	f0 eb 00 20 	st.d	r8[32],r10
800159b6:	72 a9       	ld.w	r9,r9[0x28]
800159b8:	91 a9       	st.w	r8[0x28],r9
			//centralData->controls.thrust = f_min(get_thrust_from_remote()*100000.0,centralData->controls_nav.thrust*100000.0)/100000.0;
			//centralData->controls.thrust = get_thrust_from_remote();
			
			centralData->controls.control_mode = VELOCITY_COMMAND_MODE;
800159ba:	ec f8 00 00 	ld.w	r8,r6[0]
800159be:	70 08       	ld.w	r8,r8[0x0]
800159c0:	30 09       	mov	r9,0
800159c2:	f1 49 01 68 	st.w	r8[360],r9
			centralData->controls.yaw_mode = YAW_ABSOLUTE;
800159c6:	ec f8 00 00 	ld.w	r8,r6[0]
800159ca:	70 08       	ld.w	r8,r8[0x0]
800159cc:	30 19       	mov	r9,1
800159ce:	f1 49 01 6c 	st.w	r8[364],r9
			cascade_stabilise_copter(&(centralData->imu1), &centralData->position_estimator, &(centralData->controls));
800159d2:	ec f8 00 00 	ld.w	r8,r6[0]
800159d6:	70 08       	ld.w	r8,r8[0x0]
800159d8:	f0 ca fe b8 	sub	r10,r8,-328
800159dc:	ec f8 00 00 	ld.w	r8,r6[0]
800159e0:	70 08       	ld.w	r8,r8[0x0]
800159e2:	f0 c9 f2 c4 	sub	r9,r8,-3388
800159e6:	ec f8 00 00 	ld.w	r8,r6[0]
800159ea:	70 08       	ld.w	r8,r8[0x0]
800159ec:	12 9b       	mov	r11,r9
800159ee:	10 9c       	mov	r12,r8
800159f0:	f0 16 00 8e 	mcall	r6[568]
			break;
800159f4:	c7 68       	rjmp	80015ae0 <run_stabilisation+0x3fc>
		case MAV_MODE_AUTO_ARMED:
			centralData->controls = centralData->controls_nav;
800159f6:	ec f8 00 00 	ld.w	r8,r6[0]
800159fa:	70 08       	ld.w	r8,r8[0x0]
800159fc:	ec f9 00 00 	ld.w	r9,r6[0]
80015a00:	72 09       	ld.w	r9,r9[0x0]
80015a02:	f0 c8 fe b8 	sub	r8,r8,-328
80015a06:	f2 c9 fe 8c 	sub	r9,r9,-372
80015a0a:	f0 ca 00 00 	sub	r10,r8,0
80015a0e:	f2 cb 00 00 	sub	r11,r9,0
80015a12:	76 0c       	ld.w	r12,r11[0x0]
80015a14:	95 0c       	st.w	r10[0x0],r12
80015a16:	76 1c       	ld.w	r12,r11[0x4]
80015a18:	95 1c       	st.w	r10[0x4],r12
80015a1a:	76 2c       	ld.w	r12,r11[0x8]
80015a1c:	95 2c       	st.w	r10[0x8],r12
80015a1e:	76 3b       	ld.w	r11,r11[0xc]
80015a20:	95 3b       	st.w	r10[0xc],r11
80015a22:	f0 ca ff f0 	sub	r10,r8,-16
80015a26:	f2 cb ff f0 	sub	r11,r9,-16
80015a2a:	76 0c       	ld.w	r12,r11[0x0]
80015a2c:	95 0c       	st.w	r10[0x0],r12
80015a2e:	76 1c       	ld.w	r12,r11[0x4]
80015a30:	95 1c       	st.w	r10[0x4],r12
80015a32:	76 2c       	ld.w	r12,r11[0x8]
80015a34:	95 2c       	st.w	r10[0x8],r12
80015a36:	76 3b       	ld.w	r11,r11[0xc]
80015a38:	95 3b       	st.w	r10[0xc],r11
80015a3a:	f2 ea 00 20 	ld.d	r10,r9[32]
80015a3e:	f0 eb 00 20 	st.d	r8[32],r10
80015a42:	72 a9       	ld.w	r9,r9[0x28]
80015a44:	91 a9       	st.w	r8[0x28],r9
			//centralData->controls.thrust = f_min(get_thrust_from_remote()*100000.0,centralData->controls_nav.thrust*100000.0)/100000.0;
			//centralData->controls.thrust = get_thrust_from_remote();
			
			centralData->controls.control_mode = VELOCITY_COMMAND_MODE;	
80015a46:	ec f8 00 00 	ld.w	r8,r6[0]
80015a4a:	70 08       	ld.w	r8,r8[0x0]
80015a4c:	30 09       	mov	r9,0
80015a4e:	f1 49 01 68 	st.w	r8[360],r9
			centralData->controls.yaw_mode = YAW_COORDINATED;
80015a52:	ec f8 00 00 	ld.w	r8,r6[0]
80015a56:	70 08       	ld.w	r8,r8[0x0]
80015a58:	30 29       	mov	r9,2
80015a5a:	f1 49 01 6c 	st.w	r8[364],r9
			cascade_stabilise_copter(&(centralData->imu1), &centralData->position_estimator, &(centralData->controls));
80015a5e:	ec f8 00 00 	ld.w	r8,r6[0]
80015a62:	70 08       	ld.w	r8,r8[0x0]
80015a64:	f0 ca fe b8 	sub	r10,r8,-328
80015a68:	ec f8 00 00 	ld.w	r8,r6[0]
80015a6c:	70 08       	ld.w	r8,r8[0x0]
80015a6e:	f0 c9 f2 c4 	sub	r9,r8,-3388
80015a72:	ec f8 00 00 	ld.w	r8,r6[0]
80015a76:	70 08       	ld.w	r8,r8[0x0]
80015a78:	12 9b       	mov	r11,r9
80015a7a:	10 9c       	mov	r12,r8
80015a7c:	f0 16 00 8e 	mcall	r6[568]
			break;
80015a80:	c3 08       	rjmp	80015ae0 <run_stabilisation+0x3fc>
		case MAV_MODE_PREFLIGHT:
		case MAV_MODE_MANUAL_DISARMED:
		case MAV_MODE_STABILIZE_DISARMED:
		case MAV_MODE_GUIDED_DISARMED:
		case MAV_MODE_AUTO_DISARMED:
			centralData->controls.run_mode = MOTORS_OFF;
80015a82:	ec f8 00 00 	ld.w	r8,r6[0]
80015a86:	70 08       	ld.w	r8,r8[0x0]
80015a88:	30 09       	mov	r9,0
80015a8a:	f1 49 01 70 	st.w	r8[368],r9
			for (i=0; i<NUMBER_OF_SERVO_OUTPUTS; i++) {
80015a8e:	30 08       	mov	r8,0
80015a90:	ef 48 ff fc 	st.w	r7[-4],r8
80015a94:	c2 18       	rjmp	80015ad6 <run_stabilisation+0x3f2>
				centralData->servos[i]=servo_failsafe[i];
80015a96:	ec f8 00 00 	ld.w	r8,r6[0]
80015a9a:	70 0a       	ld.w	r10,r8[0x0]
80015a9c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80015aa0:	ee f9 ff fc 	ld.w	r9,r7[-4]
80015aa4:	a5 68       	lsl	r8,0x4
80015aa6:	f4 08 00 08 	add	r8,r10,r8
80015aaa:	f0 c8 f9 14 	sub	r8,r8,-1772
80015aae:	ec fa 08 dc 	ld.w	r10,r6[2268]
80015ab2:	a5 69       	lsl	r9,0x4
80015ab4:	f4 09 00 09 	add	r9,r10,r9
80015ab8:	20 08       	sub	r8,0
80015aba:	20 09       	sub	r9,0
80015abc:	72 0a       	ld.w	r10,r9[0x0]
80015abe:	91 0a       	st.w	r8[0x0],r10
80015ac0:	72 1a       	ld.w	r10,r9[0x4]
80015ac2:	91 1a       	st.w	r8[0x4],r10
80015ac4:	72 2a       	ld.w	r10,r9[0x8]
80015ac6:	91 2a       	st.w	r8[0x8],r10
80015ac8:	72 39       	ld.w	r9,r9[0xc]
80015aca:	91 39       	st.w	r8[0xc],r9
		case MAV_MODE_MANUAL_DISARMED:
		case MAV_MODE_STABILIZE_DISARMED:
		case MAV_MODE_GUIDED_DISARMED:
		case MAV_MODE_AUTO_DISARMED:
			centralData->controls.run_mode = MOTORS_OFF;
			for (i=0; i<NUMBER_OF_SERVO_OUTPUTS; i++) {
80015acc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80015ad0:	2f f8       	sub	r8,-1
80015ad2:	ef 48 ff fc 	st.w	r7[-4],r8
80015ad6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80015ada:	58 78       	cp.w	r8,7
80015adc:	fe 9a ff dd 	brle	80015a96 <run_stabilisation+0x3b2>
			break;
		
	}
	
	// !!! -- for safety, this should remain the only place where values are written to the servo outputs! --- !!!
	if (centralData->simulation_mode!=1) {
80015ae0:	ec f8 00 00 	ld.w	r8,r6[0]
80015ae4:	70 08       	ld.w	r8,r8[0x0]
80015ae6:	f0 f8 10 c0 	ld.w	r8,r8[4288]
80015aea:	58 18       	cp.w	r8,1
80015aec:	c0 90       	breq	80015afe <run_stabilisation+0x41a>
		set_servos(&(centralData->servos));
80015aee:	ec f8 00 00 	ld.w	r8,r6[0]
80015af2:	70 08       	ld.w	r8,r8[0x0]
80015af4:	f0 c8 f9 14 	sub	r8,r8,-1772
80015af8:	10 9c       	mov	r12,r8
80015afa:	f0 16 00 a0 	mcall	r6[640]
	}
		

}
80015afe:	2f 4d       	sub	sp,-48
80015b00:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80015b04:	80 01       	ld.sh	r1,r0[0x0]
80015b06:	55 74       	stdsp	sp[0x15c],r4

80015b08 <gps_task>:

task_return_t gps_task() {
80015b08:	eb cd 40 c0 	pushm	r6-r7,lr
80015b0c:	1a 97       	mov	r7,sp
80015b0e:	20 1d       	sub	sp,4
80015b10:	49 16       	lddpc	r6,80015b54 <gps_task+0x4c>
80015b12:	1e 26       	rsub	r6,pc
	uint32_t tnow = get_millis();	
80015b14:	f0 16 00 0f 	mcall	r6[60]
80015b18:	18 98       	mov	r8,r12
80015b1a:	ef 48 ff fc 	st.w	r7[-4],r8
	if (centralData->simulation_mode==1) {
80015b1e:	ec f8 00 00 	ld.w	r8,r6[0]
80015b22:	70 08       	ld.w	r8,r8[0x0]
80015b24:	f0 f8 10 c0 	ld.w	r8,r8[4288]
80015b28:	58 18       	cp.w	r8,1
80015b2a:	c1 01       	brne	80015b4a <gps_task+0x42>
		simulate_gps(&centralData->sim_model, &centralData->GPS_data);
80015b2c:	ec f8 00 00 	ld.w	r8,r6[0]
80015b30:	70 08       	ld.w	r8,r8[0x0]
80015b32:	f0 c9 f4 f8 	sub	r9,r8,-2824
80015b36:	ec f8 00 00 	ld.w	r8,r6[0]
80015b3a:	70 08       	ld.w	r8,r8[0x0]
80015b3c:	f0 c8 f4 58 	sub	r8,r8,-2984
80015b40:	12 9b       	mov	r11,r9
80015b42:	10 9c       	mov	r12,r8
80015b44:	f0 16 01 40 	mcall	r6[1280]
80015b48:	c0 38       	rjmp	80015b4e <gps_task+0x46>
	} else {
		gps_update();
80015b4a:	f0 16 01 f6 	mcall	r6[2008]
	}
}
80015b4e:	2f fd       	sub	sp,-4
80015b50:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80015b54:	80 01       	ld.sh	r1,r0[0x0]
80015b56:	59 96       	cp.w	r6,25

80015b58 <run_estimator>:

task_return_t run_estimator()
{
80015b58:	eb cd 40 c0 	pushm	r6-r7,lr
80015b5c:	1a 97       	mov	r7,sp
80015b5e:	48 46       	lddpc	r6,80015b6c <run_estimator+0x14>
80015b60:	1e 26       	rsub	r6,pc
	estimator_loop();
80015b62:	f0 16 01 5c 	mcall	r6[1392]
}
80015b66:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80015b6a:	00 00       	add	r0,r0
80015b6c:	80 01       	ld.sh	r1,r0[0x0]
80015b6e:	59 e4       	cp.w	r4,30

80015b70 <run_navigation_task>:

task_return_t run_navigation_task()
{
80015b70:	eb cd 40 c0 	pushm	r6-r7,lr
80015b74:	1a 97       	mov	r7,sp
80015b76:	20 1d       	sub	sp,4
80015b78:	fe f6 02 20 	ld.w	r6,pc[544]
80015b7c:	1e 26       	rsub	r6,pc
	int8_t i;
	
		switch (centralData->mav_state)
80015b7e:	ec f8 00 00 	ld.w	r8,r6[0]
80015b82:	70 08       	ld.w	r8,r8[0x0]
80015b84:	f1 38 10 bd 	ld.ub	r8,r8[4285]
80015b88:	58 48       	cp.w	r8,4
80015b8a:	c0 50       	breq	80015b94 <run_navigation_task+0x24>
80015b8c:	58 58       	cp.w	r8,5
80015b8e:	e0 80 00 b5 	breq	80015cf8 <run_navigation_task+0x188>
80015b92:	cf f8       	rjmp	80015d90 <run_navigation_task+0x220>
		{
			case MAV_STATE_ACTIVE:
				switch (centralData->mav_mode)
80015b94:	ec f8 00 00 	ld.w	r8,r6[0]
80015b98:	70 08       	ld.w	r8,r8[0x0]
80015b9a:	f1 38 10 bc 	ld.ub	r8,r8[4284]
80015b9e:	e0 48 00 d8 	cp.w	r8,216
80015ba2:	c7 40       	breq	80015c8a <run_navigation_task+0x11a>
80015ba4:	e0 48 00 dc 	cp.w	r8,220
80015ba8:	e0 81 00 f1 	brne	80015d8a <run_navigation_task+0x21a>
				{
					case MAV_MODE_AUTO_ARMED:
						if (centralData->waypoint_set)
80015bac:	ec f8 00 00 	ld.w	r8,r6[0]
80015bb0:	70 08       	ld.w	r8,r8[0x0]
80015bb2:	f1 38 10 b4 	ld.ub	r8,r8[4276]
80015bb6:	58 08       	cp.w	r8,0
80015bb8:	c3 10       	breq	80015c1a <run_navigation_task+0xaa>
						{
							run_navigation(centralData->waypoint_coordinates);
80015bba:	ec f8 00 00 	ld.w	r8,r6[0]
80015bbe:	70 08       	ld.w	r8,r8[0x0]
80015bc0:	20 cd       	sub	sp,48
80015bc2:	1a 99       	mov	r9,sp
80015bc4:	12 9b       	mov	r11,r9
80015bc6:	f0 ca ef e0 	sub	r10,r8,-4128
80015bca:	f6 c8 00 00 	sub	r8,r11,0
80015bce:	f4 c9 00 00 	sub	r9,r10,0
80015bd2:	72 0c       	ld.w	r12,r9[0x0]
80015bd4:	91 0c       	st.w	r8[0x0],r12
80015bd6:	72 1c       	ld.w	r12,r9[0x4]
80015bd8:	91 1c       	st.w	r8[0x4],r12
80015bda:	72 2c       	ld.w	r12,r9[0x8]
80015bdc:	91 2c       	st.w	r8[0x8],r12
80015bde:	72 39       	ld.w	r9,r9[0xc]
80015be0:	91 39       	st.w	r8[0xc],r9
80015be2:	f6 c8 ff f0 	sub	r8,r11,-16
80015be6:	f4 c9 ff f0 	sub	r9,r10,-16
80015bea:	72 0c       	ld.w	r12,r9[0x0]
80015bec:	91 0c       	st.w	r8[0x0],r12
80015bee:	72 1c       	ld.w	r12,r9[0x4]
80015bf0:	91 1c       	st.w	r8[0x4],r12
80015bf2:	72 2c       	ld.w	r12,r9[0x8]
80015bf4:	91 2c       	st.w	r8[0x8],r12
80015bf6:	72 39       	ld.w	r9,r9[0xc]
80015bf8:	91 39       	st.w	r8[0xc],r9
80015bfa:	f6 c8 ff e0 	sub	r8,r11,-32
80015bfe:	f4 c9 ff e0 	sub	r9,r10,-32
80015c02:	72 0a       	ld.w	r10,r9[0x0]
80015c04:	91 0a       	st.w	r8[0x0],r10
80015c06:	72 1a       	ld.w	r10,r9[0x4]
80015c08:	91 1a       	st.w	r8[0x4],r10
80015c0a:	72 2a       	ld.w	r10,r9[0x8]
80015c0c:	91 2a       	st.w	r8[0x8],r10
80015c0e:	72 39       	ld.w	r9,r9[0xc]
80015c10:	91 39       	st.w	r8[0xc],r9
80015c12:	f0 16 00 81 	mcall	r6[516]
80015c16:	2f 4d       	sub	sp,-48
80015c18:	c3 78       	rjmp	80015c86 <run_navigation_task+0x116>
					
							//computeNewVelocity(centralData->controls_nav.tvel,newVelocity);
						}else if(centralData->waypoint_hold_init)
80015c1a:	ec f8 00 00 	ld.w	r8,r6[0]
80015c1e:	70 08       	ld.w	r8,r8[0x0]
80015c20:	f1 38 10 b7 	ld.ub	r8,r8[4279]
80015c24:	58 08       	cp.w	r8,0
80015c26:	c3 00       	breq	80015c86 <run_navigation_task+0x116>
						{
							run_navigation(centralData->waypoint_hold_coordinates);
80015c28:	ec f8 00 00 	ld.w	r8,r6[0]
80015c2c:	70 08       	ld.w	r8,r8[0x0]
80015c2e:	20 cd       	sub	sp,48
80015c30:	1a 99       	mov	r9,sp
80015c32:	12 9b       	mov	r11,r9
80015c34:	f0 ca ef b0 	sub	r10,r8,-4176
80015c38:	f6 c8 00 00 	sub	r8,r11,0
80015c3c:	f4 c9 00 00 	sub	r9,r10,0
80015c40:	72 0c       	ld.w	r12,r9[0x0]
80015c42:	91 0c       	st.w	r8[0x0],r12
80015c44:	72 1c       	ld.w	r12,r9[0x4]
80015c46:	91 1c       	st.w	r8[0x4],r12
80015c48:	72 2c       	ld.w	r12,r9[0x8]
80015c4a:	91 2c       	st.w	r8[0x8],r12
80015c4c:	72 39       	ld.w	r9,r9[0xc]
80015c4e:	91 39       	st.w	r8[0xc],r9
80015c50:	f6 c8 ff f0 	sub	r8,r11,-16
80015c54:	f4 c9 ff f0 	sub	r9,r10,-16
80015c58:	72 0c       	ld.w	r12,r9[0x0]
80015c5a:	91 0c       	st.w	r8[0x0],r12
80015c5c:	72 1c       	ld.w	r12,r9[0x4]
80015c5e:	91 1c       	st.w	r8[0x4],r12
80015c60:	72 2c       	ld.w	r12,r9[0x8]
80015c62:	91 2c       	st.w	r8[0x8],r12
80015c64:	72 39       	ld.w	r9,r9[0xc]
80015c66:	91 39       	st.w	r8[0xc],r9
80015c68:	f6 c8 ff e0 	sub	r8,r11,-32
80015c6c:	f4 c9 ff e0 	sub	r9,r10,-32
80015c70:	72 0a       	ld.w	r10,r9[0x0]
80015c72:	91 0a       	st.w	r8[0x0],r10
80015c74:	72 1a       	ld.w	r10,r9[0x4]
80015c76:	91 1a       	st.w	r8[0x4],r10
80015c78:	72 2a       	ld.w	r10,r9[0x8]
80015c7a:	91 2a       	st.w	r8[0x8],r10
80015c7c:	72 39       	ld.w	r9,r9[0xc]
80015c7e:	91 39       	st.w	r8[0xc],r9
80015c80:	f0 16 00 81 	mcall	r6[516]
80015c84:	2f 4d       	sub	sp,-48
						}
						break;
80015c86:	d7 03       	nop
						{
							run_navigation(centralData->waypoint_hold_coordinates);
						}
						break;
				}
				break;
80015c88:	c8 48       	rjmp	80015d90 <run_navigation_task+0x220>
						{
							run_navigation(centralData->waypoint_hold_coordinates);
						}
						break;
					case MAV_MODE_GUIDED_ARMED:
						if(centralData->waypoint_hold_init)
80015c8a:	ec f8 00 00 	ld.w	r8,r6[0]
80015c8e:	70 08       	ld.w	r8,r8[0x0]
80015c90:	f1 38 10 b7 	ld.ub	r8,r8[4279]
80015c94:	58 08       	cp.w	r8,0
80015c96:	c7 c0       	breq	80015d8e <run_navigation_task+0x21e>
						{
							run_navigation(centralData->waypoint_hold_coordinates);
80015c98:	ec f8 00 00 	ld.w	r8,r6[0]
80015c9c:	70 08       	ld.w	r8,r8[0x0]
80015c9e:	20 cd       	sub	sp,48
80015ca0:	1a 99       	mov	r9,sp
80015ca2:	12 9b       	mov	r11,r9
80015ca4:	f0 ca ef b0 	sub	r10,r8,-4176
80015ca8:	f6 c8 00 00 	sub	r8,r11,0
80015cac:	f4 c9 00 00 	sub	r9,r10,0
80015cb0:	72 0c       	ld.w	r12,r9[0x0]
80015cb2:	91 0c       	st.w	r8[0x0],r12
80015cb4:	72 1c       	ld.w	r12,r9[0x4]
80015cb6:	91 1c       	st.w	r8[0x4],r12
80015cb8:	72 2c       	ld.w	r12,r9[0x8]
80015cba:	91 2c       	st.w	r8[0x8],r12
80015cbc:	72 39       	ld.w	r9,r9[0xc]
80015cbe:	91 39       	st.w	r8[0xc],r9
80015cc0:	f6 c8 ff f0 	sub	r8,r11,-16
80015cc4:	f4 c9 ff f0 	sub	r9,r10,-16
80015cc8:	72 0c       	ld.w	r12,r9[0x0]
80015cca:	91 0c       	st.w	r8[0x0],r12
80015ccc:	72 1c       	ld.w	r12,r9[0x4]
80015cce:	91 1c       	st.w	r8[0x4],r12
80015cd0:	72 2c       	ld.w	r12,r9[0x8]
80015cd2:	91 2c       	st.w	r8[0x8],r12
80015cd4:	72 39       	ld.w	r9,r9[0xc]
80015cd6:	91 39       	st.w	r8[0xc],r9
80015cd8:	f6 c8 ff e0 	sub	r8,r11,-32
80015cdc:	f4 c9 ff e0 	sub	r9,r10,-32
80015ce0:	72 0a       	ld.w	r10,r9[0x0]
80015ce2:	91 0a       	st.w	r8[0x0],r10
80015ce4:	72 1a       	ld.w	r10,r9[0x4]
80015ce6:	91 1a       	st.w	r8[0x4],r10
80015ce8:	72 2a       	ld.w	r10,r9[0x8]
80015cea:	91 2a       	st.w	r8[0x8],r10
80015cec:	72 39       	ld.w	r9,r9[0xc]
80015cee:	91 39       	st.w	r8[0xc],r9
80015cf0:	f0 16 00 81 	mcall	r6[516]
80015cf4:	2f 4d       	sub	sp,-48
						}
						break;
				}
				break;
80015cf6:	c4 d8       	rjmp	80015d90 <run_navigation_task+0x220>
			case MAV_STATE_CRITICAL:
				if ((centralData->mav_mode == MAV_MODE_GUIDED_ARMED)||(centralData->mav_mode == MAV_MODE_AUTO_ARMED))
80015cf8:	ec f8 00 00 	ld.w	r8,r6[0]
80015cfc:	70 08       	ld.w	r8,r8[0x0]
80015cfe:	f1 39 10 bc 	ld.ub	r9,r8[4284]
80015d02:	3d 88       	mov	r8,-40
80015d04:	f0 09 18 00 	cp.b	r9,r8
80015d08:	c0 a0       	breq	80015d1c <run_navigation_task+0x1ac>
80015d0a:	ec f8 00 00 	ld.w	r8,r6[0]
80015d0e:	70 08       	ld.w	r8,r8[0x0]
80015d10:	f1 39 10 bc 	ld.ub	r9,r8[4284]
80015d14:	3d c8       	mov	r8,-36
80015d16:	f0 09 18 00 	cp.b	r9,r8
80015d1a:	c3 b1       	brne	80015d90 <run_navigation_task+0x220>
				{
					if(centralData->critical_init)
80015d1c:	ec f8 00 00 	ld.w	r8,r6[0]
80015d20:	70 08       	ld.w	r8,r8[0x0]
80015d22:	f1 38 10 b9 	ld.ub	r8,r8[4281]
80015d26:	58 08       	cp.w	r8,0
80015d28:	c3 40       	breq	80015d90 <run_navigation_task+0x220>
					{
						run_navigation(centralData->waypoint_critical_coordinates);
80015d2a:	ec f8 00 00 	ld.w	r8,r6[0]
80015d2e:	70 08       	ld.w	r8,r8[0x0]
80015d30:	20 cd       	sub	sp,48
80015d32:	1a 99       	mov	r9,sp
80015d34:	12 9b       	mov	r11,r9
80015d36:	f0 ca ef 80 	sub	r10,r8,-4224
80015d3a:	f6 c8 00 00 	sub	r8,r11,0
80015d3e:	f4 c9 00 00 	sub	r9,r10,0
80015d42:	72 0c       	ld.w	r12,r9[0x0]
80015d44:	91 0c       	st.w	r8[0x0],r12
80015d46:	72 1c       	ld.w	r12,r9[0x4]
80015d48:	91 1c       	st.w	r8[0x4],r12
80015d4a:	72 2c       	ld.w	r12,r9[0x8]
80015d4c:	91 2c       	st.w	r8[0x8],r12
80015d4e:	72 39       	ld.w	r9,r9[0xc]
80015d50:	91 39       	st.w	r8[0xc],r9
80015d52:	f6 c8 ff f0 	sub	r8,r11,-16
80015d56:	f4 c9 ff f0 	sub	r9,r10,-16
80015d5a:	72 0c       	ld.w	r12,r9[0x0]
80015d5c:	91 0c       	st.w	r8[0x0],r12
80015d5e:	72 1c       	ld.w	r12,r9[0x4]
80015d60:	91 1c       	st.w	r8[0x4],r12
80015d62:	72 2c       	ld.w	r12,r9[0x8]
80015d64:	91 2c       	st.w	r8[0x8],r12
80015d66:	72 39       	ld.w	r9,r9[0xc]
80015d68:	91 39       	st.w	r8[0xc],r9
80015d6a:	f6 c8 ff e0 	sub	r8,r11,-32
80015d6e:	f4 c9 ff e0 	sub	r9,r10,-32
80015d72:	72 0a       	ld.w	r10,r9[0x0]
80015d74:	91 0a       	st.w	r8[0x0],r10
80015d76:	72 1a       	ld.w	r10,r9[0x4]
80015d78:	91 1a       	st.w	r8[0x4],r10
80015d7a:	72 2a       	ld.w	r10,r9[0x8]
80015d7c:	91 2a       	st.w	r8[0x8],r10
80015d7e:	72 39       	ld.w	r9,r9[0xc]
80015d80:	91 39       	st.w	r8[0xc],r9
80015d82:	f0 16 00 81 	mcall	r6[516]
80015d86:	2f 4d       	sub	sp,-48
80015d88:	c0 48       	rjmp	80015d90 <run_navigation_task+0x220>
						{
							run_navigation(centralData->waypoint_hold_coordinates);
						}
						break;
				}
				break;
80015d8a:	d7 03       	nop
80015d8c:	c0 28       	rjmp	80015d90 <run_navigation_task+0x220>
80015d8e:	d7 03       	nop
					}
				}
				break;
		}
	
}
80015d90:	2f fd       	sub	sp,-4
80015d92:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80015d96:	00 00       	add	r0,r0
80015d98:	80 01       	ld.sh	r1,r0[0x0]
80015d9a:	5a 00       	cp.w	r0,-32

80015d9c <run_barometer>:
uint32_t last_baro_update;
task_return_t run_barometer()
{
80015d9c:	eb cd 40 c0 	pushm	r6-r7,lr
80015da0:	1a 97       	mov	r7,sp
80015da2:	20 3d       	sub	sp,12
80015da4:	4a d6       	lddpc	r6,80015e58 <run_barometer+0xbc>
80015da6:	1e 26       	rsub	r6,pc
	uint32_t tnow = get_micros();
80015da8:	f0 16 00 27 	mcall	r6[156]
80015dac:	18 98       	mov	r8,r12
80015dae:	ef 48 ff f4 	st.w	r7[-12],r8
	central_data_t *central_data=get_central_data();
80015db2:	f0 16 00 31 	mcall	r6[196]
80015db6:	18 98       	mov	r8,r12
80015db8:	ef 48 ff f8 	st.w	r7[-8],r8
	
	pressure_data *pressure= get_pressure_data_slow(centralData->pressure.altitude_offset);
80015dbc:	ec f8 00 00 	ld.w	r8,r6[0]
80015dc0:	70 08       	ld.w	r8,r8[0x0]
80015dc2:	f0 f8 10 e4 	ld.w	r8,r8[4324]
80015dc6:	10 9c       	mov	r12,r8
80015dc8:	f0 16 01 b4 	mcall	r6[1744]
80015dcc:	18 98       	mov	r8,r12
80015dce:	ef 48 ff fc 	st.w	r7[-4],r8
	if (central_data->simulation_mode==1) {
80015dd2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80015dd6:	f0 f8 10 c0 	ld.w	r8,r8[4288]
80015dda:	58 18       	cp.w	r8,1
80015ddc:	c0 b1       	brne	80015df2 <run_barometer+0x56>
		simulate_barometer(&centralData->sim_model, pressure);
80015dde:	ec f8 00 00 	ld.w	r8,r6[0]
80015de2:	70 08       	ld.w	r8,r8[0x0]
80015de4:	f0 c8 f4 58 	sub	r8,r8,-2984
80015de8:	ee fb ff fc 	ld.w	r11,r7[-4]
80015dec:	10 9c       	mov	r12,r8
80015dee:	f0 16 01 8d 	mcall	r6[1588]
	} 
	centralData->pressure=*pressure;
80015df2:	ec f8 00 00 	ld.w	r8,r6[0]
80015df6:	70 08       	ld.w	r8,r8[0x0]
80015df8:	ee f9 ff fc 	ld.w	r9,r7[-4]
80015dfc:	f0 c8 ef 3c 	sub	r8,r8,-4292
80015e00:	f0 ca 00 00 	sub	r10,r8,0
80015e04:	f2 cb 00 00 	sub	r11,r9,0
80015e08:	76 0c       	ld.w	r12,r11[0x0]
80015e0a:	95 0c       	st.w	r10[0x0],r12
80015e0c:	76 1c       	ld.w	r12,r11[0x4]
80015e0e:	95 1c       	st.w	r10[0x4],r12
80015e10:	76 2c       	ld.w	r12,r11[0x8]
80015e12:	95 2c       	st.w	r10[0x8],r12
80015e14:	76 3b       	ld.w	r11,r11[0xc]
80015e16:	95 3b       	st.w	r10[0xc],r11
80015e18:	f0 ca ff f0 	sub	r10,r8,-16
80015e1c:	f2 cb ff f0 	sub	r11,r9,-16
80015e20:	76 0c       	ld.w	r12,r11[0x0]
80015e22:	95 0c       	st.w	r10[0x0],r12
80015e24:	76 1c       	ld.w	r12,r11[0x4]
80015e26:	95 1c       	st.w	r10[0x4],r12
80015e28:	76 2c       	ld.w	r12,r11[0x8]
80015e2a:	95 2c       	st.w	r10[0x8],r12
80015e2c:	76 3b       	ld.w	r11,r11[0xc]
80015e2e:	95 3b       	st.w	r10[0xc],r11
80015e30:	f0 ca ff e0 	sub	r10,r8,-32
80015e34:	f2 cb ff e0 	sub	r11,r9,-32
80015e38:	76 0c       	ld.w	r12,r11[0x0]
80015e3a:	95 0c       	st.w	r10[0x0],r12
80015e3c:	76 1c       	ld.w	r12,r11[0x4]
80015e3e:	95 1c       	st.w	r10[0x4],r12
80015e40:	76 2c       	ld.w	r12,r11[0x8]
80015e42:	95 2c       	st.w	r10[0x8],r12
80015e44:	76 3b       	ld.w	r11,r11[0xc]
80015e46:	95 3b       	st.w	r10[0xc],r11
80015e48:	f2 ea 00 30 	ld.d	r10,r9[48]
80015e4c:	f0 eb 00 30 	st.d	r8[48],r10
	
}
80015e50:	2f dd       	sub	sp,-12
80015e52:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80015e56:	00 00       	add	r0,r0
80015e58:	80 01       	ld.sh	r1,r0[0x0]
80015e5a:	5c 2a       	cpc	r10

80015e5c <create_tasks>:


void create_tasks() {
80015e5c:	eb cd 40 c0 	pushm	r6-r7,lr
80015e60:	1a 97       	mov	r7,sp
80015e62:	4a 96       	lddpc	r6,80015f04 <create_tasks+0xa8>
80015e64:	1e 26       	rsub	r6,pc
	
	init_scheduler(&main_tasks);
80015e66:	ec f8 01 24 	ld.w	r8,r6[292]
80015e6a:	10 9c       	mov	r12,r8
80015e6c:	f0 16 01 00 	mcall	r6[1024]
	
	centralData = get_central_data();
80015e70:	f0 16 00 31 	mcall	r6[196]
80015e74:	18 99       	mov	r9,r12
80015e76:	ec f8 00 00 	ld.w	r8,r6[0]
80015e7a:	91 09       	st.w	r8[0x0],r9
	
	register_task(&main_tasks, 0, 4000, RUN_REGULAR, &run_stabilisation );
80015e7c:	ec f8 08 54 	ld.w	r8,r6[2132]
80015e80:	ec fc 01 24 	ld.w	r12,r6[292]
80015e84:	30 29       	mov	r9,2
80015e86:	e0 6a 0f a0 	mov	r10,4000
80015e8a:	30 0b       	mov	r11,0
80015e8c:	f0 16 00 59 	mcall	r6[356]
	
	register_task(&main_tasks, 1, 15000, RUN_REGULAR, &run_barometer);
80015e90:	ec f8 07 18 	ld.w	r8,r6[1816]
80015e94:	ec fc 01 24 	ld.w	r12,r6[292]
80015e98:	30 29       	mov	r9,2
80015e9a:	e0 6a 3a 98 	mov	r10,15000
80015e9e:	30 1b       	mov	r11,1
80015ea0:	f0 16 00 59 	mcall	r6[356]
	main_tasks.tasks[1].timing_mode=PERIODIC_RELATIVE;
80015ea4:	ec f8 01 24 	ld.w	r8,r6[292]
80015ea8:	30 19       	mov	r9,1
80015eaa:	f1 49 00 44 	st.w	r8[68],r9

	register_task(&main_tasks, 2, 100000, RUN_REGULAR, &gps_task);
80015eae:	ec f8 07 98 	ld.w	r8,r6[1944]
80015eb2:	ec fc 01 24 	ld.w	r12,r6[292]
80015eb6:	30 29       	mov	r9,2
80015eb8:	e0 7a 86 a0 	mov	r10,100000
80015ebc:	30 2b       	mov	r11,2
80015ebe:	f0 16 00 59 	mcall	r6[356]
	//register_task(&main_tasks, 4, 4000, RUN_REGULAR, &run_estimator);
	//register_task(&main_tasks, , 100000, RUN_REGULAR, &read_radar);

	register_task(&main_tasks, 3, ORCA_TIME_STEP_MILLIS * 1000.0, RUN_REGULAR, &run_navigation_task);
80015ec2:	ec f8 06 a0 	ld.w	r8,r6[1696]
80015ec6:	ec fc 01 24 	ld.w	r12,r6[292]
80015eca:	30 29       	mov	r9,2
80015ecc:	e0 6a 27 10 	mov	r10,10000
80015ed0:	30 3b       	mov	r11,3
80015ed2:	f0 16 00 59 	mcall	r6[356]

	register_task(&main_tasks, 4, 200000, RUN_REGULAR, &set_mav_mode_n_state);
80015ed6:	ec f8 06 f0 	ld.w	r8,r6[1776]
80015eda:	ec fc 01 24 	ld.w	r12,r6[292]
80015ede:	30 29       	mov	r9,2
80015ee0:	e2 7a 0d 40 	mov	r10,200000
80015ee4:	30 4b       	mov	r11,4
80015ee6:	f0 16 00 59 	mcall	r6[356]
	

	register_task(&main_tasks, 5, 4000, RUN_REGULAR, &mavlink_protocol_update);
80015eea:	ec f8 03 60 	ld.w	r8,r6[864]
80015eee:	ec fc 01 24 	ld.w	r12,r6[292]
80015ef2:	30 29       	mov	r9,2
80015ef4:	e0 6a 0f a0 	mov	r10,4000
80015ef8:	30 5b       	mov	r11,5
80015efa:	f0 16 00 59 	mcall	r6[356]

80015efe:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80015f02:	00 00       	add	r0,r0
80015f04:	80 01       	ld.sh	r1,r0[0x0]
80015f06:	5c e8       	tnbz	r8

80015f08 <crc_accumulate>:
 *
 * @param data new char to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate(uint8_t data, uint16_t *crcAccum)
{
80015f08:	eb cd 40 80 	pushm	r7,lr
80015f0c:	1a 97       	mov	r7,sp
80015f0e:	20 3d       	sub	sp,12
80015f10:	18 98       	mov	r8,r12
80015f12:	ef 4b ff f4 	st.w	r7[-12],r11
80015f16:	ef 68 ff f8 	st.b	r7[-8],r8
        /*Accumulate one byte of data into the CRC*/
        uint8_t tmp;

        tmp = data ^ (uint8_t)(*crcAccum &0xff);
80015f1a:	ee f8 ff f4 	ld.w	r8,r7[-12]
80015f1e:	90 08       	ld.sh	r8,r8[0x0]
80015f20:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80015f24:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80015f28:	f3 e8 20 08 	eor	r8,r9,r8
80015f2c:	ef 68 ff ff 	st.b	r7[-1],r8
        tmp ^= (tmp<<4);
80015f30:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80015f34:	a5 68       	lsl	r8,0x4
80015f36:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80015f3a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80015f3e:	f3 e8 20 08 	eor	r8,r9,r8
80015f42:	5c 58       	castu.b	r8
80015f44:	ef 68 ff ff 	st.b	r7[-1],r8
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
80015f48:	ee f8 ff f4 	ld.w	r8,r7[-12]
80015f4c:	90 08       	ld.sh	r8,r8[0x0]
80015f4e:	5c 78       	castu.h	r8
80015f50:	a9 88       	lsr	r8,0x8
80015f52:	5c 88       	casts.h	r8
80015f54:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
80015f58:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80015f5c:	a9 68       	lsl	r8,0x8
80015f5e:	5c 88       	casts.h	r8
80015f60:	f3 e8 20 08 	eor	r8,r9,r8
80015f64:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
80015f68:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80015f6c:	a3 78       	lsl	r8,0x3
80015f6e:	5c 88       	casts.h	r8
80015f70:	f3 e8 20 08 	eor	r8,r9,r8
80015f74:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
80015f78:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80015f7c:	a5 88       	lsr	r8,0x4
80015f7e:	5c 58       	castu.b	r8
80015f80:	f3 e8 20 08 	eor	r8,r9,r8
80015f84:	5c 88       	casts.h	r8
80015f86:	ee f9 ff f4 	ld.w	r9,r7[-12]
80015f8a:	b2 08       	st.h	r9[0x0],r8
}
80015f8c:	2f dd       	sub	sp,-12
80015f8e:	e3 cd 80 80 	ldm	sp++,r7,pc

80015f92 <crc_init>:
 * @brief Initiliaze the buffer for the X.25 CRC
 *
 * @param crcAccum the 16 bit X.25 CRC
 */
static inline void crc_init(uint16_t* crcAccum)
{
80015f92:	eb cd 40 80 	pushm	r7,lr
80015f96:	1a 97       	mov	r7,sp
80015f98:	20 1d       	sub	sp,4
80015f9a:	ef 4c ff fc 	st.w	r7[-4],r12
        *crcAccum = X25_INIT_CRC;
80015f9e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80015fa2:	3f f8       	mov	r8,-1
80015fa4:	b2 08       	st.h	r9[0x0],r8
}
80015fa6:	2f fd       	sub	sp,-4
80015fa8:	e3 cd 80 80 	ldm	sp++,r7,pc

80015fac <mavlink_get_channel_status>:
/*
 * Internal function to give access to the channel status for each channel
 */
#ifndef MAVLINK_GET_CHANNEL_STATUS
MAVLINK_HELPER mavlink_status_t* mavlink_get_channel_status(uint8_t chan)
{
80015fac:	eb cd 40 c0 	pushm	r6-r7,lr
80015fb0:	1a 97       	mov	r7,sp
80015fb2:	20 1d       	sub	sp,4
80015fb4:	48 96       	lddpc	r6,80015fd8 <mavlink_get_channel_status+0x2c>
80015fb6:	1e 26       	rsub	r6,pc
80015fb8:	18 98       	mov	r8,r12
80015fba:	ef 68 ff fc 	st.b	r7[-4],r8
	static mavlink_status_t m_mavlink_status[MAVLINK_COMM_NUM_BUFFERS];
	return &m_mavlink_status[chan];
80015fbe:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80015fc2:	f0 09 15 04 	lsl	r9,r8,0x4
80015fc6:	ec f8 08 d8 	ld.w	r8,r6[2264]
80015fca:	f2 08 00 08 	add	r8,r9,r8
}
80015fce:	10 9c       	mov	r12,r8
80015fd0:	2f fd       	sub	sp,-4
80015fd2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80015fd6:	00 00       	add	r0,r0
80015fd8:	80 01       	ld.sh	r1,r0[0x0]
80015fda:	5e 3a       	retlo	r10

80015fdc <mavlink_get_channel_buffer>:
/*
 * Internal function to give access to the channel buffer for each channel
 */
#ifndef MAVLINK_GET_CHANNEL_BUFFER
MAVLINK_HELPER mavlink_message_t* mavlink_get_channel_buffer(uint8_t chan)
{
80015fdc:	eb cd 40 c0 	pushm	r6-r7,lr
80015fe0:	1a 97       	mov	r7,sp
80015fe2:	20 1d       	sub	sp,4
80015fe4:	48 a6       	lddpc	r6,8001600c <mavlink_get_channel_buffer+0x30>
80015fe6:	1e 26       	rsub	r6,pc
80015fe8:	18 98       	mov	r8,r12
80015fea:	ef 68 ff fc 	st.b	r7[-4],r8
#error ERROR: IF #define MAVLINK_EXTERNAL_RX_BUFFER IS SET, THE BUFFER HAS TO BE ALLOCATED OUTSIDE OF THIS FUNCTION (mavlink_message_t m_mavlink_buffer[MAVLINK_COMM_NUM_BUFFERS];)
#endif
#else
	static mavlink_message_t m_mavlink_buffer[MAVLINK_COMM_NUM_BUFFERS];
#endif
	return &m_mavlink_buffer[chan];
80015fee:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80015ff2:	12 98       	mov	r8,r9
80015ff4:	a5 68       	lsl	r8,0x4
80015ff6:	12 08       	add	r8,r9
80015ff8:	a5 68       	lsl	r8,0x4
80015ffa:	10 99       	mov	r9,r8
80015ffc:	ec f8 08 d4 	ld.w	r8,r6[2260]
80016000:	f2 08 00 08 	add	r8,r9,r8
}
80016004:	10 9c       	mov	r12,r8
80016006:	2f fd       	sub	sp,-4
80016008:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001600c:	80 01       	ld.sh	r1,r0[0x0]
8001600e:	5e 6a       	retmi	r10

80016010 <mavlink_start_checksum>:
	int32_t int32;
};


MAVLINK_HELPER void mavlink_start_checksum(mavlink_message_t* msg)
{
80016010:	eb cd 40 c0 	pushm	r6-r7,lr
80016014:	1a 97       	mov	r7,sp
80016016:	20 1d       	sub	sp,4
80016018:	48 66       	lddpc	r6,80016030 <mavlink_start_checksum+0x20>
8001601a:	1e 26       	rsub	r6,pc
8001601c:	ef 4c ff fc 	st.w	r7[-4],r12
	crc_init(&msg->checksum);
80016020:	ee f8 ff fc 	ld.w	r8,r7[-4]
80016024:	10 9c       	mov	r12,r8
80016026:	cb 6f       	rcall	80015f92 <crc_init>
}
80016028:	2f fd       	sub	sp,-4
8001602a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001602e:	00 00       	add	r0,r0
80016030:	80 01       	ld.sh	r1,r0[0x0]
80016032:	5e 9e       	retgt	-1

80016034 <mavlink_update_checksum>:

MAVLINK_HELPER void mavlink_update_checksum(mavlink_message_t* msg, uint8_t c)
{
80016034:	eb cd 40 c0 	pushm	r6-r7,lr
80016038:	1a 97       	mov	r7,sp
8001603a:	20 2d       	sub	sp,8
8001603c:	48 96       	lddpc	r6,80016060 <mavlink_update_checksum+0x2c>
8001603e:	1e 26       	rsub	r6,pc
80016040:	ef 4c ff fc 	st.w	r7[-4],r12
80016044:	16 98       	mov	r8,r11
80016046:	ef 68 ff f8 	st.b	r7[-8],r8
	crc_accumulate(c, &msg->checksum);
8001604a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001604e:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80016052:	12 9b       	mov	r11,r9
80016054:	10 9c       	mov	r12,r8
80016056:	c5 9f       	rcall	80015f08 <crc_accumulate>
}
80016058:	2f ed       	sub	sp,-8
8001605a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001605e:	00 00       	add	r0,r0
80016060:	80 01       	ld.sh	r1,r0[0x0]
80016062:	5e c2       	retvs	r2

80016064 <mavlink_parse_char>:
 *
 *
 * @endcode
 */
MAVLINK_HELPER uint8_t mavlink_parse_char(uint8_t chan, uint8_t c, mavlink_message_t* r_message, mavlink_status_t* r_mavlink_status)
{
80016064:	eb cd 40 c0 	pushm	r6-r7,lr
80016068:	1a 97       	mov	r7,sp
8001606a:	20 7d       	sub	sp,28
8001606c:	fe f6 03 b8 	ld.w	r6,pc[952]
80016070:	1e 26       	rsub	r6,pc
80016072:	16 98       	mov	r8,r11
80016074:	ef 4a ff e8 	st.w	r7[-24],r10
80016078:	ef 49 ff e4 	st.w	r7[-28],r9
8001607c:	18 99       	mov	r9,r12
8001607e:	ef 69 ff f0 	st.b	r7[-16],r9
80016082:	ef 68 ff ec 	st.b	r7[-20],r8
	static const uint8_t mavlink_message_lengths[256] = MAVLINK_MESSAGE_LENGTHS;
#define MAVLINK_MESSAGE_LENGTH(msgid) mavlink_message_lengths[msgid]
#endif
#endif

	mavlink_message_t* rxmsg = mavlink_get_channel_buffer(chan); ///< The currently decoded message
80016086:	ef 38 ff f0 	ld.ub	r8,r7[-16]
8001608a:	10 9c       	mov	r12,r8
8001608c:	ca 8f       	rcall	80015fdc <mavlink_get_channel_buffer>
8001608e:	18 98       	mov	r8,r12
80016090:	ef 48 ff f4 	st.w	r7[-12],r8
	mavlink_status_t* status = mavlink_get_channel_status(chan); ///< The current decode status
80016094:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80016098:	10 9c       	mov	r12,r8
8001609a:	c8 9f       	rcall	80015fac <mavlink_get_channel_status>
8001609c:	18 98       	mov	r8,r12
8001609e:	ef 48 ff f8 	st.w	r7[-8],r8
	int bufferIndex = 0;
800160a2:	30 08       	mov	r8,0
800160a4:	ef 48 ff fc 	st.w	r7[-4],r8

	status->msg_received = 0;
800160a8:	ee f9 ff f8 	ld.w	r9,r7[-8]
800160ac:	30 08       	mov	r8,0
800160ae:	b2 88       	st.b	r9[0x0],r8

	switch (status->parse_state)
800160b0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800160b4:	70 18       	ld.w	r8,r8[0x4]
800160b6:	58 98       	cp.w	r8,9
800160b8:	e0 8b 01 70 	brhi	80016398 <mavlink_parse_char+0x334>
800160bc:	fe c9 ff f8 	sub	r9,pc,-8
800160c0:	f2 08 00 2f 	add	pc,r9,r8<<0x2
800160c4:	e0 8f 00 14 	bral	800160ec <mavlink_parse_char+0x88>
800160c8:	e0 8f 00 12 	bral	800160ec <mavlink_parse_char+0x88>
800160cc:	e0 8f 00 28 	bral	8001611c <mavlink_parse_char+0xb8>
800160d0:	e0 8f 00 69 	bral	800161a2 <mavlink_parse_char+0x13e>
800160d4:	e0 8f 00 57 	bral	80016182 <mavlink_parse_char+0x11e>
800160d8:	e0 8f 00 75 	bral	800161c2 <mavlink_parse_char+0x15e>
800160dc:	e0 8f 00 83 	bral	800161e2 <mavlink_parse_char+0x17e>
800160e0:	e0 8f 00 9b 	bral	80016216 <mavlink_parse_char+0x1b2>
800160e4:	e0 8f 00 c2 	bral	80016268 <mavlink_parse_char+0x204>
800160e8:	e0 8f 01 08 	bral	800162f8 <mavlink_parse_char+0x294>
	{
	case MAVLINK_PARSE_STATE_UNINIT:
	case MAVLINK_PARSE_STATE_IDLE:
		if (c == MAVLINK_STX)
800160ec:	ef 39 ff ec 	ld.ub	r9,r7[-20]
800160f0:	3f e8       	mov	r8,-2
800160f2:	f0 09 18 00 	cp.b	r9,r8
800160f6:	e0 81 01 4c 	brne	8001638e <mavlink_parse_char+0x32a>
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
800160fa:	ee f8 ff f8 	ld.w	r8,r7[-8]
800160fe:	30 29       	mov	r9,2
80016100:	91 19       	st.w	r8[0x4],r9
			rxmsg->len = 0;
80016102:	ee f9 ff f4 	ld.w	r9,r7[-12]
80016106:	30 08       	mov	r8,0
80016108:	b2 b8       	st.b	r9[0x3],r8
			rxmsg->magic = c;
8001610a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001610e:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80016112:	b2 a8       	st.b	r9[0x2],r8
			mavlink_start_checksum(rxmsg);
80016114:	ee fc ff f4 	ld.w	r12,r7[-12]
80016118:	c7 cf       	rcall	80016010 <mavlink_start_checksum>
		}
		break;
8001611a:	c3 f9       	rjmp	80016398 <mavlink_parse_char+0x334>

	case MAVLINK_PARSE_STATE_GOT_STX:
			if (status->msg_received 
8001611c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80016120:	11 88       	ld.ub	r8,r8[0x0]
80016122:	58 08       	cp.w	r8,0
80016124:	c1 a0       	breq	80016158 <mavlink_parse_char+0xf4>
#if (MAVLINK_MAX_PAYLOAD_LEN < 255)
				|| c > MAVLINK_MAX_PAYLOAD_LEN
#endif
				)
		{
			status->buffer_overrun++;
80016126:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001612a:	11 98       	ld.ub	r8,r8[0x1]
8001612c:	2f f8       	sub	r8,-1
8001612e:	5c 58       	castu.b	r8
80016130:	ee f9 ff f8 	ld.w	r9,r7[-8]
80016134:	b2 98       	st.b	r9[0x1],r8
			status->parse_error++;
80016136:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001613a:	11 a8       	ld.ub	r8,r8[0x2]
8001613c:	2f f8       	sub	r8,-1
8001613e:	5c 58       	castu.b	r8
80016140:	ee f9 ff f8 	ld.w	r9,r7[-8]
80016144:	b2 a8       	st.b	r9[0x2],r8
			status->msg_received = 0;
80016146:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001614a:	30 08       	mov	r8,0
8001614c:	b2 88       	st.b	r9[0x0],r8
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
8001614e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80016152:	30 19       	mov	r9,1
80016154:	91 19       	st.w	r8[0x4],r9
			rxmsg->len = c;
			status->packet_idx = 0;
			mavlink_update_checksum(rxmsg, c);
			status->parse_state = MAVLINK_PARSE_STATE_GOT_LENGTH;
		}
		break;
80016156:	c2 19       	rjmp	80016398 <mavlink_parse_char+0x334>
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
		}
		else
		{
			// NOT counting STX, LENGTH, SEQ, SYSID, COMPID, MSGID, CRC1 and CRC2
			rxmsg->len = c;
80016158:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001615c:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80016160:	b2 b8       	st.b	r9[0x3],r8
			status->packet_idx = 0;
80016162:	ee f9 ff f8 	ld.w	r9,r7[-8]
80016166:	30 08       	mov	r8,0
80016168:	f3 68 00 08 	st.b	r9[8],r8
			mavlink_update_checksum(rxmsg, c);
8001616c:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80016170:	10 9b       	mov	r11,r8
80016172:	ee fc ff f4 	ld.w	r12,r7[-12]
80016176:	c5 ff       	rcall	80016034 <mavlink_update_checksum>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_LENGTH;
80016178:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001617c:	30 49       	mov	r9,4
8001617e:	91 19       	st.w	r8[0x4],r9
		}
		break;
80016180:	c0 c9       	rjmp	80016398 <mavlink_parse_char+0x334>

	case MAVLINK_PARSE_STATE_GOT_LENGTH:
		rxmsg->seq = c;
80016182:	ee f9 ff f4 	ld.w	r9,r7[-12]
80016186:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8001618a:	b2 c8       	st.b	r9[0x4],r8
		mavlink_update_checksum(rxmsg, c);
8001618c:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80016190:	10 9b       	mov	r11,r8
80016192:	ee fc ff f4 	ld.w	r12,r7[-12]
80016196:	c4 ff       	rcall	80016034 <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_SEQ;
80016198:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001619c:	30 39       	mov	r9,3
8001619e:	91 19       	st.w	r8[0x4],r9
		break;
800161a0:	cf c8       	rjmp	80016398 <mavlink_parse_char+0x334>

	case MAVLINK_PARSE_STATE_GOT_SEQ:
		rxmsg->sysid = c;
800161a2:	ee f9 ff f4 	ld.w	r9,r7[-12]
800161a6:	ef 38 ff ec 	ld.ub	r8,r7[-20]
800161aa:	b2 d8       	st.b	r9[0x5],r8
		mavlink_update_checksum(rxmsg, c);
800161ac:	ef 38 ff ec 	ld.ub	r8,r7[-20]
800161b0:	10 9b       	mov	r11,r8
800161b2:	ee fc ff f4 	ld.w	r12,r7[-12]
800161b6:	c3 ff       	rcall	80016034 <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_SYSID;
800161b8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800161bc:	30 59       	mov	r9,5
800161be:	91 19       	st.w	r8[0x4],r9
		break;
800161c0:	ce c8       	rjmp	80016398 <mavlink_parse_char+0x334>

	case MAVLINK_PARSE_STATE_GOT_SYSID:
		rxmsg->compid = c;
800161c2:	ee f9 ff f4 	ld.w	r9,r7[-12]
800161c6:	ef 38 ff ec 	ld.ub	r8,r7[-20]
800161ca:	b2 e8       	st.b	r9[0x6],r8
		mavlink_update_checksum(rxmsg, c);
800161cc:	ef 38 ff ec 	ld.ub	r8,r7[-20]
800161d0:	10 9b       	mov	r11,r8
800161d2:	ee fc ff f4 	ld.w	r12,r7[-12]
800161d6:	c2 ff       	rcall	80016034 <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPID;
800161d8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800161dc:	30 69       	mov	r9,6
800161de:	91 19       	st.w	r8[0x4],r9
		break;
800161e0:	cd c8       	rjmp	80016398 <mavlink_parse_char+0x334>
				status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
				mavlink_start_checksum(rxmsg);
			}
	        }
#endif
		rxmsg->msgid = c;
800161e2:	ee f9 ff f4 	ld.w	r9,r7[-12]
800161e6:	ef 38 ff ec 	ld.ub	r8,r7[-20]
800161ea:	b2 f8       	st.b	r9[0x7],r8
		mavlink_update_checksum(rxmsg, c);
800161ec:	ef 38 ff ec 	ld.ub	r8,r7[-20]
800161f0:	10 9b       	mov	r11,r8
800161f2:	ee fc ff f4 	ld.w	r12,r7[-12]
800161f6:	c1 ff       	rcall	80016034 <mavlink_update_checksum>
		if (rxmsg->len == 0)
800161f8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800161fc:	11 b8       	ld.ub	r8,r8[0x3]
800161fe:	58 08       	cp.w	r8,0
80016200:	c0 61       	brne	8001620c <mavlink_parse_char+0x1a8>
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
80016202:	ee f8 ff f8 	ld.w	r8,r7[-8]
80016206:	30 89       	mov	r9,8
80016208:	91 19       	st.w	r8[0x4],r9
		}
		else
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID;
		}
		break;
8001620a:	cc 78       	rjmp	80016398 <mavlink_parse_char+0x334>
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
		}
		else
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID;
8001620c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80016210:	30 79       	mov	r9,7
80016212:	91 19       	st.w	r8[0x4],r9
		}
		break;
80016214:	cc 28       	rjmp	80016398 <mavlink_parse_char+0x334>

	case MAVLINK_PARSE_STATE_GOT_MSGID:
		_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx++] = (char)c;
80016216:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001621a:	2f 88       	sub	r8,-8
8001621c:	10 9a       	mov	r10,r8
8001621e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80016222:	f1 38 00 08 	ld.ub	r8,r8[8]
80016226:	10 99       	mov	r9,r8
80016228:	12 0a       	add	r10,r9
8001622a:	ef 39 ff ec 	ld.ub	r9,r7[-20]
8001622e:	b4 89       	st.b	r10[0x0],r9
80016230:	2f f8       	sub	r8,-1
80016232:	5c 58       	castu.b	r8
80016234:	ee f9 ff f8 	ld.w	r9,r7[-8]
80016238:	f3 68 00 08 	st.b	r9[8],r8
		mavlink_update_checksum(rxmsg, c);
8001623c:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80016240:	10 9b       	mov	r11,r8
80016242:	ee fc ff f4 	ld.w	r12,r7[-12]
80016246:	cf 7e       	rcall	80016034 <mavlink_update_checksum>
		if (status->packet_idx == rxmsg->len)
80016248:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001624c:	f1 39 00 08 	ld.ub	r9,r8[8]
80016250:	ee f8 ff f4 	ld.w	r8,r7[-12]
80016254:	11 b8       	ld.ub	r8,r8[0x3]
80016256:	f0 09 18 00 	cp.b	r9,r8
8001625a:	e0 81 00 9c 	brne	80016392 <mavlink_parse_char+0x32e>
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
8001625e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80016262:	30 89       	mov	r9,8
80016264:	91 19       	st.w	r8[0x4],r9
		}
		break;
80016266:	c9 98       	rjmp	80016398 <mavlink_parse_char+0x334>

	case MAVLINK_PARSE_STATE_GOT_PAYLOAD:
#if MAVLINK_CRC_EXTRA
		mavlink_update_checksum(rxmsg, MAVLINK_MESSAGE_CRC(rxmsg->msgid));
80016268:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001626c:	11 f8       	ld.ub	r8,r8[0x7]
8001626e:	ec f9 08 d0 	ld.w	r9,r6[2256]
80016272:	f2 08 07 08 	ld.ub	r8,r9[r8]
80016276:	10 9b       	mov	r11,r8
80016278:	ee fc ff f4 	ld.w	r12,r7[-12]
8001627c:	cd ce       	rcall	80016034 <mavlink_update_checksum>
#endif
		if (c != (rxmsg->checksum & 0xFF)) {
8001627e:	ef 39 ff ec 	ld.ub	r9,r7[-20]
80016282:	ee f8 ff f4 	ld.w	r8,r7[-12]
80016286:	90 08       	ld.sh	r8,r8[0x0]
80016288:	5c 78       	castu.h	r8
8001628a:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
8001628e:	10 39       	cp.w	r9,r8
80016290:	c2 30       	breq	800162d6 <mavlink_parse_char+0x272>
			// Check first checksum byte
			status->parse_error++;
80016292:	ee f8 ff f8 	ld.w	r8,r7[-8]
80016296:	11 a8       	ld.ub	r8,r8[0x2]
80016298:	2f f8       	sub	r8,-1
8001629a:	5c 58       	castu.b	r8
8001629c:	ee f9 ff f8 	ld.w	r9,r7[-8]
800162a0:	b2 a8       	st.b	r9[0x2],r8
			status->msg_received = 0;
800162a2:	ee f9 ff f8 	ld.w	r9,r7[-8]
800162a6:	30 08       	mov	r8,0
800162a8:	b2 88       	st.b	r9[0x0],r8
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
800162aa:	ee f8 ff f8 	ld.w	r8,r7[-8]
800162ae:	30 19       	mov	r9,1
800162b0:	91 19       	st.w	r8[0x4],r9
			if (c == MAVLINK_STX)
800162b2:	ef 39 ff ec 	ld.ub	r9,r7[-20]
800162b6:	3f e8       	mov	r8,-2
800162b8:	f0 09 18 00 	cp.b	r9,r8
800162bc:	c6 d1       	brne	80016396 <mavlink_parse_char+0x332>
			{
				status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
800162be:	ee f8 ff f8 	ld.w	r8,r7[-8]
800162c2:	30 29       	mov	r9,2
800162c4:	91 19       	st.w	r8[0x4],r9
				rxmsg->len = 0;
800162c6:	ee f9 ff f4 	ld.w	r9,r7[-12]
800162ca:	30 08       	mov	r8,0
800162cc:	b2 b8       	st.b	r9[0x3],r8
				mavlink_start_checksum(rxmsg);
800162ce:	ee fc ff f4 	ld.w	r12,r7[-12]
800162d2:	c9 fe       	rcall	80016010 <mavlink_start_checksum>
		else
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_CRC1;
			_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx] = (char)c;
		}
		break;
800162d4:	c6 28       	rjmp	80016398 <mavlink_parse_char+0x334>
				mavlink_start_checksum(rxmsg);
			}
		}
		else
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_CRC1;
800162d6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800162da:	30 99       	mov	r9,9
800162dc:	91 19       	st.w	r8[0x4],r9
			_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx] = (char)c;
800162de:	ee f8 ff f4 	ld.w	r8,r7[-12]
800162e2:	2f 88       	sub	r8,-8
800162e4:	10 99       	mov	r9,r8
800162e6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800162ea:	f1 38 00 08 	ld.ub	r8,r8[8]
800162ee:	10 09       	add	r9,r8
800162f0:	ef 38 ff ec 	ld.ub	r8,r7[-20]
800162f4:	b2 88       	st.b	r9[0x0],r8
		}
		break;
800162f6:	c5 18       	rjmp	80016398 <mavlink_parse_char+0x334>

	case MAVLINK_PARSE_STATE_GOT_CRC1:
		if (c != (rxmsg->checksum >> 8)) {
800162f8:	ef 39 ff ec 	ld.ub	r9,r7[-20]
800162fc:	ee f8 ff f4 	ld.w	r8,r7[-12]
80016300:	90 08       	ld.sh	r8,r8[0x0]
80016302:	5c 78       	castu.h	r8
80016304:	a9 88       	lsr	r8,0x8
80016306:	5c 88       	casts.h	r8
80016308:	f0 09 19 00 	cp.h	r9,r8
8001630c:	c2 30       	breq	80016352 <mavlink_parse_char+0x2ee>
			// Check second checksum byte
			status->parse_error++;
8001630e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80016312:	11 a8       	ld.ub	r8,r8[0x2]
80016314:	2f f8       	sub	r8,-1
80016316:	5c 58       	castu.b	r8
80016318:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001631c:	b2 a8       	st.b	r9[0x2],r8
			status->msg_received = 0;
8001631e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80016322:	30 08       	mov	r8,0
80016324:	b2 88       	st.b	r9[0x0],r8
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
80016326:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001632a:	30 19       	mov	r9,1
8001632c:	91 19       	st.w	r8[0x4],r9
			if (c == MAVLINK_STX)
8001632e:	ef 39 ff ec 	ld.ub	r9,r7[-20]
80016332:	3f e8       	mov	r8,-2
80016334:	f0 09 18 00 	cp.b	r9,r8
80016338:	c3 01       	brne	80016398 <mavlink_parse_char+0x334>
			{
				status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
8001633a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001633e:	30 29       	mov	r9,2
80016340:	91 19       	st.w	r8[0x4],r9
				rxmsg->len = 0;
80016342:	ee f9 ff f4 	ld.w	r9,r7[-12]
80016346:	30 08       	mov	r8,0
80016348:	b2 b8       	st.b	r9[0x3],r8
				mavlink_start_checksum(rxmsg);
8001634a:	ee fc ff f4 	ld.w	r12,r7[-12]
8001634e:	c6 1e       	rcall	80016010 <mavlink_start_checksum>
80016350:	c2 48       	rjmp	80016398 <mavlink_parse_char+0x334>
			}
		}
		else
		{
			// Successfully got message
			status->msg_received = 1;
80016352:	ee f9 ff f8 	ld.w	r9,r7[-8]
80016356:	30 18       	mov	r8,1
80016358:	b2 88       	st.b	r9[0x0],r8
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
8001635a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001635e:	30 19       	mov	r9,1
80016360:	91 19       	st.w	r8[0x4],r9
			_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx+1] = (char)c;
80016362:	ee f8 ff f4 	ld.w	r8,r7[-12]
80016366:	2f 88       	sub	r8,-8
80016368:	10 99       	mov	r9,r8
8001636a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001636e:	f1 38 00 08 	ld.ub	r8,r8[8]
80016372:	2f f8       	sub	r8,-1
80016374:	10 09       	add	r9,r8
80016376:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8001637a:	b2 88       	st.b	r9[0x0],r8
			memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
8001637c:	e0 6a 01 10 	mov	r10,272
80016380:	ee fb ff f4 	ld.w	r11,r7[-12]
80016384:	ee fc ff e8 	ld.w	r12,r7[-24]
80016388:	f0 16 00 20 	mcall	r6[128]
8001638c:	c0 68       	rjmp	80016398 <mavlink_parse_char+0x334>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
			rxmsg->len = 0;
			rxmsg->magic = c;
			mavlink_start_checksum(rxmsg);
		}
		break;
8001638e:	d7 03       	nop
80016390:	c0 48       	rjmp	80016398 <mavlink_parse_char+0x334>
		mavlink_update_checksum(rxmsg, c);
		if (status->packet_idx == rxmsg->len)
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
		}
		break;
80016392:	d7 03       	nop
80016394:	c0 28       	rjmp	80016398 <mavlink_parse_char+0x334>
		else
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_CRC1;
			_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx] = (char)c;
		}
		break;
80016396:	d7 03       	nop
			memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
		}
		break;
	}

	bufferIndex++;
80016398:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001639c:	2f f8       	sub	r8,-1
8001639e:	ef 48 ff fc 	st.w	r7[-4],r8
	// If a message has been sucessfully decoded, check index
	if (status->msg_received == 1)
800163a2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800163a6:	11 89       	ld.ub	r9,r8[0x0]
800163a8:	30 18       	mov	r8,1
800163aa:	f0 09 18 00 	cp.b	r9,r8
800163ae:	c1 91       	brne	800163e0 <mavlink_parse_char+0x37c>
		//while(status->current_seq != rxmsg->seq)
		//{
		//	status->packet_rx_drop_count++;
		//               status->current_seq++;
		//}
		status->current_rx_seq = rxmsg->seq;
800163b0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800163b4:	11 c8       	ld.ub	r8,r8[0x4]
800163b6:	ee f9 ff f8 	ld.w	r9,r7[-8]
800163ba:	f3 68 00 09 	st.b	r9[9],r8
		// Initial condition: If no packet has been received so far, drop count is undefined
		if (status->packet_rx_success_count == 0) status->packet_rx_drop_count = 0;
800163be:	ee f8 ff f8 	ld.w	r8,r7[-8]
800163c2:	90 68       	ld.sh	r8,r8[0xc]
800163c4:	58 08       	cp.w	r8,0
800163c6:	c0 51       	brne	800163d0 <mavlink_parse_char+0x36c>
800163c8:	ee f9 ff f8 	ld.w	r9,r7[-8]
800163cc:	30 08       	mov	r8,0
800163ce:	b2 78       	st.h	r9[0xe],r8
		// Count this packet as received
		status->packet_rx_success_count++;
800163d0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800163d4:	90 68       	ld.sh	r8,r8[0xc]
800163d6:	2f f8       	sub	r8,-1
800163d8:	5c 88       	casts.h	r8
800163da:	ee f9 ff f8 	ld.w	r9,r7[-8]
800163de:	b2 68       	st.h	r9[0xc],r8
	}

	r_mavlink_status->current_rx_seq = status->current_rx_seq+1;
800163e0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800163e4:	f1 38 00 09 	ld.ub	r8,r8[9]
800163e8:	2f f8       	sub	r8,-1
800163ea:	5c 58       	castu.b	r8
800163ec:	ee f9 ff e4 	ld.w	r9,r7[-28]
800163f0:	f3 68 00 09 	st.b	r9[9],r8
	r_mavlink_status->packet_rx_success_count = status->packet_rx_success_count;
800163f4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800163f8:	90 68       	ld.sh	r8,r8[0xc]
800163fa:	ee f9 ff e4 	ld.w	r9,r7[-28]
800163fe:	b2 68       	st.h	r9[0xc],r8
	r_mavlink_status->packet_rx_drop_count = status->parse_error;
80016400:	ee f8 ff f8 	ld.w	r8,r7[-8]
80016404:	11 a8       	ld.ub	r8,r8[0x2]
80016406:	ee f9 ff e4 	ld.w	r9,r7[-28]
8001640a:	b2 78       	st.h	r9[0xe],r8
	status->parse_error = 0;
8001640c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80016410:	30 08       	mov	r8,0
80016412:	b2 a8       	st.b	r9[0x2],r8
	return status->msg_received;
80016414:	ee f8 ff f8 	ld.w	r8,r7[-8]
80016418:	11 88       	ld.ub	r8,r8[0x0]
}
8001641a:	10 9c       	mov	r12,r8
8001641c:	2f 9d       	sub	sp,-28
8001641e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80016422:	00 00       	add	r0,r0
80016424:	80 01       	ld.sh	r1,r0[0x0]
80016426:	5e f4       	retal	r4

80016428 <byte_swap_2>:
	return msg->len + MAVLINK_NUM_NON_PAYLOAD_BYTES;
}

#if MAVLINK_NEED_BYTE_SWAP
static inline void byte_swap_2(char *dst, const char *src)
{
80016428:	eb cd 40 80 	pushm	r7,lr
8001642c:	1a 97       	mov	r7,sp
8001642e:	20 2d       	sub	sp,8
80016430:	ef 4c ff fc 	st.w	r7[-4],r12
80016434:	ef 4b ff f8 	st.w	r7[-8],r11
	dst[0] = src[1];
80016438:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001643c:	2f f8       	sub	r8,-1
8001643e:	11 88       	ld.ub	r8,r8[0x0]
80016440:	ee f9 ff fc 	ld.w	r9,r7[-4]
80016444:	b2 88       	st.b	r9[0x0],r8
	dst[1] = src[0];
80016446:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001644a:	f0 c9 ff ff 	sub	r9,r8,-1
8001644e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80016452:	11 88       	ld.ub	r8,r8[0x0]
80016454:	b2 88       	st.b	r9[0x0],r8
}
80016456:	2f ed       	sub	sp,-8
80016458:	e3 cd 80 80 	ldm	sp++,r7,pc

8001645c <mav_array_memcpy>:

/*
  like memcpy(), but if src is NULL, do a memset to zero
*/
static void mav_array_memcpy(void *dest, const void *src, size_t n)
{
8001645c:	eb cd 40 c0 	pushm	r6-r7,lr
80016460:	1a 97       	mov	r7,sp
80016462:	20 3d       	sub	sp,12
80016464:	49 06       	lddpc	r6,800164a4 <mav_array_memcpy+0x48>
80016466:	1e 26       	rsub	r6,pc
80016468:	ef 4c ff fc 	st.w	r7[-4],r12
8001646c:	ef 4b ff f8 	st.w	r7[-8],r11
80016470:	ef 4a ff f4 	st.w	r7[-12],r10
	if (src == NULL) {
80016474:	ee f8 ff f8 	ld.w	r8,r7[-8]
80016478:	58 08       	cp.w	r8,0
8001647a:	c0 91       	brne	8001648c <mav_array_memcpy+0x30>
		memset(dest, 0, n);
8001647c:	ee fa ff f4 	ld.w	r10,r7[-12]
80016480:	30 0b       	mov	r11,0
80016482:	ee fc ff fc 	ld.w	r12,r7[-4]
80016486:	f0 16 00 2f 	mcall	r6[188]
8001648a:	c0 98       	rjmp	8001649c <mav_array_memcpy+0x40>
	} else {
		memcpy(dest, src, n);
8001648c:	ee fa ff f4 	ld.w	r10,r7[-12]
80016490:	ee fb ff f8 	ld.w	r11,r7[-8]
80016494:	ee fc ff fc 	ld.w	r12,r7[-4]
80016498:	f0 16 00 20 	mcall	r6[128]
	}
}
8001649c:	2f dd       	sub	sp,-12
8001649e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800164a2:	00 00       	add	r0,r0
800164a4:	80 01       	ld.sh	r1,r0[0x0]
800164a6:	62 ea       	ld.w	r10,r1[0x38]

800164a8 <_MAV_RETURN_uint16_t>:
#if MAVLINK_NEED_BYTE_SWAP
#define _MAV_MSG_RETURN_TYPE(TYPE, SIZE) \
static inline TYPE _MAV_RETURN_## TYPE(const mavlink_message_t *msg, uint8_t ofs) \
{ TYPE r; byte_swap_## SIZE((char*)&r, &_MAV_PAYLOAD(msg)[ofs]); return r; }

_MAV_MSG_RETURN_TYPE(uint16_t, 2)
800164a8:	eb cd 40 c0 	pushm	r6-r7,lr
800164ac:	1a 97       	mov	r7,sp
800164ae:	20 3d       	sub	sp,12
800164b0:	48 d6       	lddpc	r6,800164e4 <_MAV_RETURN_uint16_t+0x3c>
800164b2:	1e 26       	rsub	r6,pc
800164b4:	ef 4c ff f8 	st.w	r7[-8],r12
800164b8:	16 98       	mov	r8,r11
800164ba:	ef 68 ff f4 	st.b	r7[-12],r8
800164be:	ee f8 ff f8 	ld.w	r8,r7[-8]
800164c2:	2f 88       	sub	r8,-8
800164c4:	10 99       	mov	r9,r8
800164c6:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800164ca:	10 09       	add	r9,r8
800164cc:	ee c8 00 02 	sub	r8,r7,2
800164d0:	12 9b       	mov	r11,r9
800164d2:	10 9c       	mov	r12,r8
800164d4:	ca af       	rcall	80016428 <byte_swap_2>
800164d6:	ef 08 ff fe 	ld.sh	r8,r7[-2]
800164da:	10 9c       	mov	r12,r8
800164dc:	2f dd       	sub	sp,-12
800164de:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800164e2:	00 00       	add	r0,r0
800164e4:	80 01       	ld.sh	r1,r0[0x0]
800164e6:	63 36       	ld.w	r6,r1[0x4c]

800164e8 <_MAV_RETURN_int16_t>:
_MAV_MSG_RETURN_TYPE(int16_t,  2)
800164e8:	eb cd 40 c0 	pushm	r6-r7,lr
800164ec:	1a 97       	mov	r7,sp
800164ee:	20 3d       	sub	sp,12
800164f0:	48 d6       	lddpc	r6,80016524 <_MAV_RETURN_int16_t+0x3c>
800164f2:	1e 26       	rsub	r6,pc
800164f4:	ef 4c ff f8 	st.w	r7[-8],r12
800164f8:	16 98       	mov	r8,r11
800164fa:	ef 68 ff f4 	st.b	r7[-12],r8
800164fe:	ee f8 ff f8 	ld.w	r8,r7[-8]
80016502:	2f 88       	sub	r8,-8
80016504:	10 99       	mov	r9,r8
80016506:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8001650a:	10 09       	add	r9,r8
8001650c:	ee c8 00 02 	sub	r8,r7,2
80016510:	12 9b       	mov	r11,r9
80016512:	10 9c       	mov	r12,r8
80016514:	c8 af       	rcall	80016428 <byte_swap_2>
80016516:	ef 08 ff fe 	ld.sh	r8,r7[-2]
8001651a:	10 9c       	mov	r12,r8
8001651c:	2f dd       	sub	sp,-12
8001651e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80016522:	00 00       	add	r0,r0
80016524:	80 01       	ld.sh	r1,r0[0x0]
80016526:	63 76       	ld.w	r6,r1[0x5c]

80016528 <_MAV_RETURN_char_array>:
_MAV_MSG_RETURN_TYPE(double)
#endif // MAVLINK_NEED_BYTE_SWAP

static inline uint16_t _MAV_RETURN_char_array(const mavlink_message_t *msg, char *value, 
						     uint8_t array_length, uint8_t wire_offset)
{
80016528:	eb cd 40 c0 	pushm	r6-r7,lr
8001652c:	1a 97       	mov	r7,sp
8001652e:	20 4d       	sub	sp,16
80016530:	49 16       	lddpc	r6,80016574 <_MAV_RETURN_char_array+0x4c>
80016532:	1e 26       	rsub	r6,pc
80016534:	ef 4c ff fc 	st.w	r7[-4],r12
80016538:	ef 4b ff f8 	st.w	r7[-8],r11
8001653c:	12 98       	mov	r8,r9
8001653e:	14 99       	mov	r9,r10
80016540:	ef 69 ff f4 	st.b	r7[-12],r9
80016544:	ef 68 ff f0 	st.b	r7[-16],r8
	memcpy(value, &_MAV_PAYLOAD(msg)[wire_offset], array_length);
80016548:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8001654c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80016550:	f0 ca ff f8 	sub	r10,r8,-8
80016554:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80016558:	f4 08 00 08 	add	r8,r10,r8
8001655c:	12 9a       	mov	r10,r9
8001655e:	10 9b       	mov	r11,r8
80016560:	ee fc ff f8 	ld.w	r12,r7[-8]
80016564:	f0 16 00 20 	mcall	r6[128]
	return array_length;
80016568:	ef 38 ff f4 	ld.ub	r8,r7[-12]
}
8001656c:	10 9c       	mov	r12,r8
8001656e:	2f cd       	sub	sp,-16
80016570:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80016574:	80 01       	ld.sh	r1,r0[0x0]
80016576:	63 b6       	ld.w	r6,r1[0x6c]

80016578 <mavlink_msg_param_request_read_get_target_system>:
 * @brief Get field target_system from param_request_read message
 *
 * @return System ID
 */
static inline uint8_t mavlink_msg_param_request_read_get_target_system(const mavlink_message_t* msg)
{
80016578:	eb cd 40 80 	pushm	r7,lr
8001657c:	1a 97       	mov	r7,sp
8001657e:	20 1d       	sub	sp,4
80016580:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  2);
80016584:	ee f8 ff fc 	ld.w	r8,r7[-4]
80016588:	2f 88       	sub	r8,-8
8001658a:	2f e8       	sub	r8,-2
8001658c:	11 88       	ld.ub	r8,r8[0x0]
}
8001658e:	10 9c       	mov	r12,r8
80016590:	2f fd       	sub	sp,-4
80016592:	e3 cd 80 80 	ldm	sp++,r7,pc

80016596 <mavlink_msg_param_request_read_get_target_component>:
 * @brief Get field target_component from param_request_read message
 *
 * @return Component ID
 */
static inline uint8_t mavlink_msg_param_request_read_get_target_component(const mavlink_message_t* msg)
{
80016596:	eb cd 40 80 	pushm	r7,lr
8001659a:	1a 97       	mov	r7,sp
8001659c:	20 1d       	sub	sp,4
8001659e:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  3);
800165a2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800165a6:	2f 88       	sub	r8,-8
800165a8:	2f d8       	sub	r8,-3
800165aa:	11 88       	ld.ub	r8,r8[0x0]
}
800165ac:	10 9c       	mov	r12,r8
800165ae:	2f fd       	sub	sp,-4
800165b0:	e3 cd 80 80 	ldm	sp++,r7,pc

800165b4 <mavlink_msg_param_request_read_get_param_id>:
 * @brief Get field param_id from param_request_read message
 *
 * @return Onboard parameter id, terminated by NULL if the length is less than 16 human-readable chars and WITHOUT null termination (NULL) byte if the length is exactly 16 chars - applications have to provide 16+1 bytes storage if the ID is stored as string
 */
static inline uint16_t mavlink_msg_param_request_read_get_param_id(const mavlink_message_t* msg, char *param_id)
{
800165b4:	eb cd 40 c0 	pushm	r6-r7,lr
800165b8:	1a 97       	mov	r7,sp
800165ba:	20 2d       	sub	sp,8
800165bc:	48 a6       	lddpc	r6,800165e4 <mavlink_msg_param_request_read_get_param_id+0x30>
800165be:	1e 26       	rsub	r6,pc
800165c0:	ef 4c ff fc 	st.w	r7[-4],r12
800165c4:	ef 4b ff f8 	st.w	r7[-8],r11
	return _MAV_RETURN_char_array(msg, param_id, 16,  4);
800165c8:	30 49       	mov	r9,4
800165ca:	31 0a       	mov	r10,16
800165cc:	ee fb ff f8 	ld.w	r11,r7[-8]
800165d0:	ee fc ff fc 	ld.w	r12,r7[-4]
800165d4:	ca af       	rcall	80016528 <_MAV_RETURN_char_array>
800165d6:	18 98       	mov	r8,r12
800165d8:	5c 88       	casts.h	r8
800165da:	5c 88       	casts.h	r8
}
800165dc:	10 9c       	mov	r12,r8
800165de:	2f ed       	sub	sp,-8
800165e0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800165e4:	80 01       	ld.sh	r1,r0[0x0]
800165e6:	64 42       	ld.w	r2,r2[0x10]

800165e8 <mavlink_msg_param_request_read_get_param_index>:
 * @brief Get field param_index from param_request_read message
 *
 * @return Parameter index. Send -1 to use the param ID field as identifier (else the param id will be ignored)
 */
static inline int16_t mavlink_msg_param_request_read_get_param_index(const mavlink_message_t* msg)
{
800165e8:	eb cd 40 c0 	pushm	r6-r7,lr
800165ec:	1a 97       	mov	r7,sp
800165ee:	20 1d       	sub	sp,4
800165f0:	48 76       	lddpc	r6,8001660c <mavlink_msg_param_request_read_get_param_index+0x24>
800165f2:	1e 26       	rsub	r6,pc
800165f4:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_int16_t(msg,  0);
800165f8:	30 0b       	mov	r11,0
800165fa:	ee fc ff fc 	ld.w	r12,r7[-4]
800165fe:	c7 5f       	rcall	800164e8 <_MAV_RETURN_int16_t>
80016600:	18 98       	mov	r8,r12
}
80016602:	10 9c       	mov	r12,r8
80016604:	2f fd       	sub	sp,-4
80016606:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001660a:	00 00       	add	r0,r0
8001660c:	80 01       	ld.sh	r1,r0[0x0]
8001660e:	64 76       	ld.w	r6,r2[0x1c]

80016610 <mavlink_msg_param_request_read_decode>:
 *
 * @param msg The message to decode
 * @param param_request_read C-struct to decode the message contents into
 */
static inline void mavlink_msg_param_request_read_decode(const mavlink_message_t* msg, mavlink_param_request_read_t* param_request_read)
{
80016610:	eb cd 40 c0 	pushm	r6-r7,lr
80016614:	1a 97       	mov	r7,sp
80016616:	20 2d       	sub	sp,8
80016618:	49 36       	lddpc	r6,80016664 <mavlink_msg_param_request_read_decode+0x54>
8001661a:	1e 26       	rsub	r6,pc
8001661c:	ef 4c ff fc 	st.w	r7[-4],r12
80016620:	ef 4b ff f8 	st.w	r7[-8],r11
#if MAVLINK_NEED_BYTE_SWAP
	param_request_read->param_index = mavlink_msg_param_request_read_get_param_index(msg);
80016624:	ee fc ff fc 	ld.w	r12,r7[-4]
80016628:	ce 0f       	rcall	800165e8 <mavlink_msg_param_request_read_get_param_index>
8001662a:	18 98       	mov	r8,r12
8001662c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80016630:	b2 08       	st.h	r9[0x0],r8
	param_request_read->target_system = mavlink_msg_param_request_read_get_target_system(msg);
80016632:	ee fc ff fc 	ld.w	r12,r7[-4]
80016636:	ca 1f       	rcall	80016578 <mavlink_msg_param_request_read_get_target_system>
80016638:	18 98       	mov	r8,r12
8001663a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001663e:	b2 a8       	st.b	r9[0x2],r8
	param_request_read->target_component = mavlink_msg_param_request_read_get_target_component(msg);
80016640:	ee fc ff fc 	ld.w	r12,r7[-4]
80016644:	ca 9f       	rcall	80016596 <mavlink_msg_param_request_read_get_target_component>
80016646:	18 98       	mov	r8,r12
80016648:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001664c:	b2 b8       	st.b	r9[0x3],r8
	mavlink_msg_param_request_read_get_param_id(msg, param_request_read->param_id);
8001664e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80016652:	2f c8       	sub	r8,-4
80016654:	10 9b       	mov	r11,r8
80016656:	ee fc ff fc 	ld.w	r12,r7[-4]
8001665a:	ca df       	rcall	800165b4 <mavlink_msg_param_request_read_get_param_id>
#else
	memcpy(param_request_read, _MAV_PAYLOAD(msg), MAVLINK_MSG_ID_PARAM_REQUEST_READ_LEN);
#endif
}
8001665c:	2f ed       	sub	sp,-8
8001665e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80016662:	00 00       	add	r0,r0
80016664:	80 01       	ld.sh	r1,r0[0x0]
80016666:	64 9e       	ld.w	lr,r2[0x24]

80016668 <mavlink_msg_param_request_list_get_target_system>:
 * @brief Get field target_system from param_request_list message
 *
 * @return System ID
 */
static inline uint8_t mavlink_msg_param_request_list_get_target_system(const mavlink_message_t* msg)
{
80016668:	eb cd 40 80 	pushm	r7,lr
8001666c:	1a 97       	mov	r7,sp
8001666e:	20 1d       	sub	sp,4
80016670:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  0);
80016674:	ee f8 ff fc 	ld.w	r8,r7[-4]
80016678:	2f 88       	sub	r8,-8
8001667a:	11 88       	ld.ub	r8,r8[0x0]
}
8001667c:	10 9c       	mov	r12,r8
8001667e:	2f fd       	sub	sp,-4
80016680:	e3 cd 80 80 	ldm	sp++,r7,pc

80016684 <mavlink_msg_param_request_list_get_target_component>:
 * @brief Get field target_component from param_request_list message
 *
 * @return Component ID
 */
static inline uint8_t mavlink_msg_param_request_list_get_target_component(const mavlink_message_t* msg)
{
80016684:	eb cd 40 80 	pushm	r7,lr
80016688:	1a 97       	mov	r7,sp
8001668a:	20 1d       	sub	sp,4
8001668c:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  1);
80016690:	ee f8 ff fc 	ld.w	r8,r7[-4]
80016694:	2f 88       	sub	r8,-8
80016696:	2f f8       	sub	r8,-1
80016698:	11 88       	ld.ub	r8,r8[0x0]
}
8001669a:	10 9c       	mov	r12,r8
8001669c:	2f fd       	sub	sp,-4
8001669e:	e3 cd 80 80 	ldm	sp++,r7,pc

800166a2 <mavlink_msg_param_request_list_decode>:
 *
 * @param msg The message to decode
 * @param param_request_list C-struct to decode the message contents into
 */
static inline void mavlink_msg_param_request_list_decode(const mavlink_message_t* msg, mavlink_param_request_list_t* param_request_list)
{
800166a2:	eb cd 40 c0 	pushm	r6-r7,lr
800166a6:	1a 97       	mov	r7,sp
800166a8:	20 2d       	sub	sp,8
800166aa:	48 c6       	lddpc	r6,800166d8 <mavlink_msg_param_request_list_decode+0x36>
800166ac:	1e 26       	rsub	r6,pc
800166ae:	ef 4c ff fc 	st.w	r7[-4],r12
800166b2:	ef 4b ff f8 	st.w	r7[-8],r11
#if MAVLINK_NEED_BYTE_SWAP
	param_request_list->target_system = mavlink_msg_param_request_list_get_target_system(msg);
800166b6:	ee fc ff fc 	ld.w	r12,r7[-4]
800166ba:	cd 7f       	rcall	80016668 <mavlink_msg_param_request_list_get_target_system>
800166bc:	18 98       	mov	r8,r12
800166be:	ee f9 ff f8 	ld.w	r9,r7[-8]
800166c2:	b2 88       	st.b	r9[0x0],r8
	param_request_list->target_component = mavlink_msg_param_request_list_get_target_component(msg);
800166c4:	ee fc ff fc 	ld.w	r12,r7[-4]
800166c8:	cd ef       	rcall	80016684 <mavlink_msg_param_request_list_get_target_component>
800166ca:	18 98       	mov	r8,r12
800166cc:	ee f9 ff f8 	ld.w	r9,r7[-8]
800166d0:	b2 98       	st.b	r9[0x1],r8
#else
	memcpy(param_request_list, _MAV_PAYLOAD(msg), MAVLINK_MSG_ID_PARAM_REQUEST_LIST_LEN);
#endif
}
800166d2:	2f ed       	sub	sp,-8
800166d4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800166d8:	80 01       	ld.sh	r1,r0[0x0]
800166da:	65 30       	ld.w	r0,r2[0x4c]

800166dc <mavlink_msg_request_data_stream_get_target_system>:
 * @brief Get field target_system from request_data_stream message
 *
 * @return The target requested to send the message stream.
 */
static inline uint8_t mavlink_msg_request_data_stream_get_target_system(const mavlink_message_t* msg)
{
800166dc:	eb cd 40 80 	pushm	r7,lr
800166e0:	1a 97       	mov	r7,sp
800166e2:	20 1d       	sub	sp,4
800166e4:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  2);
800166e8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800166ec:	2f 88       	sub	r8,-8
800166ee:	2f e8       	sub	r8,-2
800166f0:	11 88       	ld.ub	r8,r8[0x0]
}
800166f2:	10 9c       	mov	r12,r8
800166f4:	2f fd       	sub	sp,-4
800166f6:	e3 cd 80 80 	ldm	sp++,r7,pc

800166fa <mavlink_msg_request_data_stream_get_target_component>:
 * @brief Get field target_component from request_data_stream message
 *
 * @return The target requested to send the message stream.
 */
static inline uint8_t mavlink_msg_request_data_stream_get_target_component(const mavlink_message_t* msg)
{
800166fa:	eb cd 40 80 	pushm	r7,lr
800166fe:	1a 97       	mov	r7,sp
80016700:	20 1d       	sub	sp,4
80016702:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  3);
80016706:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001670a:	2f 88       	sub	r8,-8
8001670c:	2f d8       	sub	r8,-3
8001670e:	11 88       	ld.ub	r8,r8[0x0]
}
80016710:	10 9c       	mov	r12,r8
80016712:	2f fd       	sub	sp,-4
80016714:	e3 cd 80 80 	ldm	sp++,r7,pc

80016718 <mavlink_msg_request_data_stream_get_req_stream_id>:
 * @brief Get field req_stream_id from request_data_stream message
 *
 * @return The ID of the requested data stream
 */
static inline uint8_t mavlink_msg_request_data_stream_get_req_stream_id(const mavlink_message_t* msg)
{
80016718:	eb cd 40 80 	pushm	r7,lr
8001671c:	1a 97       	mov	r7,sp
8001671e:	20 1d       	sub	sp,4
80016720:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  4);
80016724:	ee f8 ff fc 	ld.w	r8,r7[-4]
80016728:	2f 88       	sub	r8,-8
8001672a:	2f c8       	sub	r8,-4
8001672c:	11 88       	ld.ub	r8,r8[0x0]
}
8001672e:	10 9c       	mov	r12,r8
80016730:	2f fd       	sub	sp,-4
80016732:	e3 cd 80 80 	ldm	sp++,r7,pc

80016736 <mavlink_msg_request_data_stream_get_req_message_rate>:
 * @brief Get field req_message_rate from request_data_stream message
 *
 * @return The requested interval between two messages of this type
 */
static inline uint16_t mavlink_msg_request_data_stream_get_req_message_rate(const mavlink_message_t* msg)
{
80016736:	eb cd 40 c0 	pushm	r6-r7,lr
8001673a:	1a 97       	mov	r7,sp
8001673c:	20 1d       	sub	sp,4
8001673e:	48 86       	lddpc	r6,8001675c <mavlink_msg_request_data_stream_get_req_message_rate+0x26>
80016740:	1e 26       	rsub	r6,pc
80016742:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint16_t(msg,  0);
80016746:	30 0b       	mov	r11,0
80016748:	ee fc ff fc 	ld.w	r12,r7[-4]
8001674c:	ca ee       	rcall	800164a8 <_MAV_RETURN_uint16_t>
8001674e:	18 98       	mov	r8,r12
80016750:	5c 88       	casts.h	r8
80016752:	5c 88       	casts.h	r8
}
80016754:	10 9c       	mov	r12,r8
80016756:	2f fd       	sub	sp,-4
80016758:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001675c:	80 01       	ld.sh	r1,r0[0x0]
8001675e:	65 c4       	ld.w	r4,r2[0x70]

80016760 <mavlink_msg_request_data_stream_get_start_stop>:
 * @brief Get field start_stop from request_data_stream message
 *
 * @return 1 to start sending, 0 to stop sending.
 */
static inline uint8_t mavlink_msg_request_data_stream_get_start_stop(const mavlink_message_t* msg)
{
80016760:	eb cd 40 80 	pushm	r7,lr
80016764:	1a 97       	mov	r7,sp
80016766:	20 1d       	sub	sp,4
80016768:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  5);
8001676c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80016770:	2f 88       	sub	r8,-8
80016772:	2f b8       	sub	r8,-5
80016774:	11 88       	ld.ub	r8,r8[0x0]
}
80016776:	10 9c       	mov	r12,r8
80016778:	2f fd       	sub	sp,-4
8001677a:	e3 cd 80 80 	ldm	sp++,r7,pc

8001677e <mavlink_msg_request_data_stream_decode>:
 *
 * @param msg The message to decode
 * @param request_data_stream C-struct to decode the message contents into
 */
static inline void mavlink_msg_request_data_stream_decode(const mavlink_message_t* msg, mavlink_request_data_stream_t* request_data_stream)
{
8001677e:	eb cd 40 c0 	pushm	r6-r7,lr
80016782:	1a 97       	mov	r7,sp
80016784:	20 2d       	sub	sp,8
80016786:	49 76       	lddpc	r6,800167e0 <mavlink_msg_request_data_stream_decode+0x62>
80016788:	1e 26       	rsub	r6,pc
8001678a:	ef 4c ff fc 	st.w	r7[-4],r12
8001678e:	ef 4b ff f8 	st.w	r7[-8],r11
#if MAVLINK_NEED_BYTE_SWAP
	request_data_stream->req_message_rate = mavlink_msg_request_data_stream_get_req_message_rate(msg);
80016792:	ee fc ff fc 	ld.w	r12,r7[-4]
80016796:	cd 0f       	rcall	80016736 <mavlink_msg_request_data_stream_get_req_message_rate>
80016798:	18 98       	mov	r8,r12
8001679a:	5c 88       	casts.h	r8
8001679c:	ee f9 ff f8 	ld.w	r9,r7[-8]
800167a0:	b2 08       	st.h	r9[0x0],r8
	request_data_stream->target_system = mavlink_msg_request_data_stream_get_target_system(msg);
800167a2:	ee fc ff fc 	ld.w	r12,r7[-4]
800167a6:	c9 bf       	rcall	800166dc <mavlink_msg_request_data_stream_get_target_system>
800167a8:	18 98       	mov	r8,r12
800167aa:	ee f9 ff f8 	ld.w	r9,r7[-8]
800167ae:	b2 a8       	st.b	r9[0x2],r8
	request_data_stream->target_component = mavlink_msg_request_data_stream_get_target_component(msg);
800167b0:	ee fc ff fc 	ld.w	r12,r7[-4]
800167b4:	ca 3f       	rcall	800166fa <mavlink_msg_request_data_stream_get_target_component>
800167b6:	18 98       	mov	r8,r12
800167b8:	ee f9 ff f8 	ld.w	r9,r7[-8]
800167bc:	b2 b8       	st.b	r9[0x3],r8
	request_data_stream->req_stream_id = mavlink_msg_request_data_stream_get_req_stream_id(msg);
800167be:	ee fc ff fc 	ld.w	r12,r7[-4]
800167c2:	ca bf       	rcall	80016718 <mavlink_msg_request_data_stream_get_req_stream_id>
800167c4:	18 98       	mov	r8,r12
800167c6:	ee f9 ff f8 	ld.w	r9,r7[-8]
800167ca:	b2 c8       	st.b	r9[0x4],r8
	request_data_stream->start_stop = mavlink_msg_request_data_stream_get_start_stop(msg);
800167cc:	ee fc ff fc 	ld.w	r12,r7[-4]
800167d0:	cc 8f       	rcall	80016760 <mavlink_msg_request_data_stream_get_start_stop>
800167d2:	18 98       	mov	r8,r12
800167d4:	ee f9 ff f8 	ld.w	r9,r7[-8]
800167d8:	b2 d8       	st.b	r9[0x5],r8
#else
	memcpy(request_data_stream, _MAV_PAYLOAD(msg), MAVLINK_MSG_ID_REQUEST_DATA_STREAM_LEN);
#endif
}
800167da:	2f ed       	sub	sp,-8
800167dc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800167e0:	80 01       	ld.sh	r1,r0[0x0]
800167e2:	66 0c       	ld.w	r12,r3[0x0]

800167e4 <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
800167e4:	eb cd 40 c0 	pushm	r6-r7,lr
800167e8:	1a 97       	mov	r7,sp
800167ea:	20 6d       	sub	sp,24
800167ec:	49 e6       	lddpc	r6,80016864 <interpolate+0x80>
800167ee:	1e 26       	rsub	r6,pc
800167f0:	ef 4c ff f8 	st.w	r7[-8],r12
800167f4:	ef 4b ff f4 	st.w	r7[-12],r11
800167f8:	ef 4a ff f0 	st.w	r7[-16],r10
800167fc:	ef 49 ff ec 	st.w	r7[-20],r9
80016800:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
80016804:	ee f9 ff f4 	ld.w	r9,r7[-12]
80016808:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001680c:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
80016810:	c0 41       	brne	80016818 <interpolate+0x34>
	{
		return y1;
80016812:	ee f8 ff ec 	ld.w	r8,r7[-20]
80016816:	c2 38       	rjmp	8001685c <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
80016818:	ee f9 ff e8 	ld.w	r9,r7[-24]
8001681c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80016820:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80016824:	ee fa ff f8 	ld.w	r10,r7[-8]
80016828:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001682c:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80016830:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80016834:	ee fa ff f0 	ld.w	r10,r7[-16]
80016838:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001683c:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80016840:	12 9b       	mov	r11,r9
80016842:	10 9c       	mov	r12,r8
80016844:	f0 16 00 08 	mcall	r6[32]
80016848:	18 98       	mov	r8,r12
8001684a:	10 99       	mov	r9,r8
8001684c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80016850:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80016854:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
80016858:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
8001685c:	10 9c       	mov	r12,r8
8001685e:	2f ad       	sub	sp,-24
80016860:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80016864:	80 01       	ld.sh	r1,r0[0x0]
80016866:	66 72       	ld.w	r2,r3[0x1c]

80016868 <comm_send_ch>:
central_data_t *centralData;

NEW_TASK_SET (mavlink_tasks, 30)

void comm_send_ch(mavlink_channel_t chan, uint8_t ch)
{
80016868:	eb cd 40 c0 	pushm	r6-r7,lr
8001686c:	1a 97       	mov	r7,sp
8001686e:	20 2d       	sub	sp,8
80016870:	48 e6       	lddpc	r6,800168a8 <comm_send_ch+0x40>
80016872:	1e 26       	rsub	r6,pc
80016874:	ef 4c ff fc 	st.w	r7[-4],r12
80016878:	16 98       	mov	r8,r11
8001687a:	ef 68 ff f8 	st.b	r7[-8],r8
	if (chan == MAVLINK_COMM_0)
8001687e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80016882:	58 08       	cp.w	r8,0
80016884:	c0 e1       	brne	800168a0 <comm_send_ch+0x38>
	{
		//uart0_transmit(ch);
		mavlink_out_stream->put(mavlink_out_stream->data, ch);
80016886:	ec f8 01 48 	ld.w	r8,r6[328]
8001688a:	70 08       	ld.w	r8,r8[0x0]
8001688c:	70 18       	ld.w	r8,r8[0x4]
8001688e:	ef 3a ff f8 	ld.ub	r10,r7[-8]
80016892:	ec f9 01 48 	ld.w	r9,r6[328]
80016896:	72 09       	ld.w	r9,r9[0x0]
80016898:	72 59       	ld.w	r9,r9[0x14]
8001689a:	14 9b       	mov	r11,r10
8001689c:	12 9c       	mov	r12,r9
8001689e:	5d 18       	icall	r8
	}
	if (chan == MAVLINK_COMM_1)
	{
		//uart1_transmit(ch);
	}
}
800168a0:	2f ed       	sub	sp,-8
800168a2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800168a6:	00 00       	add	r0,r0
800168a8:	80 01       	ld.sh	r1,r0[0x0]
800168aa:	66 f6       	ld.w	r6,r3[0x3c]

800168ac <mavlink_receive_handler>:

void mavlink_receive_handler() {
800168ac:	eb cd 40 c0 	pushm	r6-r7,lr
800168b0:	1a 97       	mov	r7,sp
800168b2:	fa cd 01 20 	sub	sp,sp,288
800168b6:	48 c6       	lddpc	r6,800168e4 <mavlink_receive_handler+0x38>
800168b8:	1e 26       	rsub	r6,pc
	Mavlink_Received_t rec;
	
	if(mavlink_receive(mavlink_in_stream, &rec)) {
800168ba:	ec f8 04 b4 	ld.w	r8,r6[1204]
800168be:	70 08       	ld.w	r8,r8[0x0]
800168c0:	ee c9 01 20 	sub	r9,r7,288
800168c4:	12 9b       	mov	r11,r9
800168c6:	10 9c       	mov	r12,r8
800168c8:	f0 16 01 3b 	mcall	r6[1260]
800168cc:	18 98       	mov	r8,r12
800168ce:	58 08       	cp.w	r8,0
800168d0:	c0 60       	breq	800168dc <mavlink_receive_handler+0x30>
		handle_mavlink_message(&rec);
800168d2:	ee c8 01 20 	sub	r8,r7,288
800168d6:	10 9c       	mov	r12,r8
800168d8:	f0 16 01 70 	mcall	r6[1472]
	}
}
800168dc:	2b 8d       	sub	sp,-288
800168de:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800168e2:	00 00       	add	r0,r0
800168e4:	80 01       	ld.sh	r1,r0[0x0]
800168e6:	67 3c       	ld.w	r12,r3[0x4c]

800168e8 <init_mavlink>:

void init_mavlink(byte_stream_t *transmit_stream, byte_stream_t *receive_stream, int sysid) {
800168e8:	eb cd 40 c0 	pushm	r6-r7,lr
800168ec:	1a 97       	mov	r7,sp
800168ee:	20 3d       	sub	sp,12
800168f0:	4a 36       	lddpc	r6,8001697c <init_mavlink+0x94>
800168f2:	1e 26       	rsub	r6,pc
800168f4:	ef 4c ff fc 	st.w	r7[-4],r12
800168f8:	ef 4b ff f8 	st.w	r7[-8],r11
800168fc:	ef 4a ff f4 	st.w	r7[-12],r10
	mavlink_system.sysid = sysid; // System ID, 1-255
80016900:	ee f8 ff f4 	ld.w	r8,r7[-12]
80016904:	5c 58       	castu.b	r8
80016906:	ec f9 00 74 	ld.w	r9,r6[116]
8001690a:	b2 88       	st.b	r9[0x0],r8
	mavlink_system.compid = 50; // Component/Subsystem ID, 1-255
8001690c:	ec f9 00 74 	ld.w	r9,r6[116]
80016910:	33 28       	mov	r8,50
80016912:	b2 98       	st.b	r9[0x1],r8
	mavlink_system.type = MAV_TYPE_QUADROTOR;
80016914:	ec f9 00 74 	ld.w	r9,r6[116]
80016918:	30 28       	mov	r8,2
8001691a:	b2 a8       	st.b	r9[0x2],r8
	
	mavlink_mission_planner.sysid = mavlink_system.sysid;
8001691c:	ec f8 00 74 	ld.w	r8,r6[116]
80016920:	11 88       	ld.ub	r8,r8[0x0]
80016922:	ec f9 00 c0 	ld.w	r9,r6[192]
80016926:	b2 88       	st.b	r9[0x0],r8
	mavlink_mission_planner.compid = MAV_COMP_ID_MISSIONPLANNER;
80016928:	ec f9 00 c0 	ld.w	r9,r6[192]
8001692c:	3b e8       	mov	r8,-66
8001692e:	b2 98       	st.b	r9[0x1],r8
	mavlink_mission_planner.type = MAV_TYPE_QUADROTOR;
80016930:	ec f9 00 c0 	ld.w	r9,r6[192]
80016934:	30 28       	mov	r8,2
80016936:	b2 a8       	st.b	r9[0x2],r8
	
	mavlink_out_stream = transmit_stream;
80016938:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001693c:	ec f8 01 48 	ld.w	r8,r6[328]
80016940:	91 09       	st.w	r8[0x0],r9
	mavlink_in_stream = receive_stream;
80016942:	ee f9 ff f8 	ld.w	r9,r7[-8]
80016946:	ec f8 04 b4 	ld.w	r8,r6[1204]
8001694a:	91 09       	st.w	r8[0x0],r9
	
	init_scheduler(&mavlink_tasks);
8001694c:	ec f8 01 20 	ld.w	r8,r6[288]
80016950:	10 9c       	mov	r12,r8
80016952:	f0 16 01 00 	mcall	r6[1024]
	
	add_task(&mavlink_tasks, 100000, RUN_REGULAR, &send_scheduled_parameters, MAVLINK_MSG_ID_PARAM_VALUE);
80016956:	ec f9 05 10 	ld.w	r9,r6[1296]
8001695a:	ec fc 01 20 	ld.w	r12,r6[288]
8001695e:	31 68       	mov	r8,22
80016960:	30 2a       	mov	r10,2
80016962:	e0 7b 86 a0 	mov	r11,100000
80016966:	f0 16 00 22 	mcall	r6[136]

	centralData = get_central_data();
8001696a:	f0 16 00 31 	mcall	r6[196]
8001696e:	18 99       	mov	r9,r12
80016970:	ec f8 00 00 	ld.w	r8,r6[0]
80016974:	91 09       	st.w	r8[0x0],r9
}
80016976:	2f dd       	sub	sp,-12
80016978:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001697c:	80 01       	ld.sh	r1,r0[0x0]
8001697e:	67 76       	ld.w	r6,r3[0x5c]

80016980 <flush_mavlink>:

void flush_mavlink() {
80016980:	eb cd 40 c0 	pushm	r6-r7,lr
80016984:	1a 97       	mov	r7,sp
80016986:	48 b6       	lddpc	r6,800169b0 <flush_mavlink+0x30>
80016988:	1e 26       	rsub	r6,pc
	if (mavlink_out_stream->flush!=NULL) {
8001698a:	ec f8 01 48 	ld.w	r8,r6[328]
8001698e:	70 08       	ld.w	r8,r8[0x0]
80016990:	70 28       	ld.w	r8,r8[0x8]
80016992:	58 08       	cp.w	r8,0
80016994:	c0 b0       	breq	800169aa <flush_mavlink+0x2a>
		//mavlink_out_stream->buffer_empty(mavlink_out_stream->data);
		mavlink_out_stream->flush(mavlink_out_stream->data);	
80016996:	ec f8 01 48 	ld.w	r8,r6[328]
8001699a:	70 08       	ld.w	r8,r8[0x0]
8001699c:	70 28       	ld.w	r8,r8[0x8]
8001699e:	ec f9 01 48 	ld.w	r9,r6[328]
800169a2:	72 09       	ld.w	r9,r9[0x0]
800169a4:	72 59       	ld.w	r9,r9[0x14]
800169a6:	12 9c       	mov	r12,r9
800169a8:	5d 18       	icall	r8
	
	}
}
800169aa:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800169ae:	00 00       	add	r0,r0
800169b0:	80 01       	ld.sh	r1,r0[0x0]
800169b2:	68 0c       	ld.w	r12,r4[0x0]

800169b4 <mavlink_protocol_update>:

task_return_t mavlink_protocol_update() {
800169b4:	eb cd 40 c0 	pushm	r6-r7,lr
800169b8:	1a 97       	mov	r7,sp
800169ba:	20 1d       	sub	sp,4
800169bc:	49 26       	lddpc	r6,80016a04 <mavlink_protocol_update+0x50>
800169be:	1e 26       	rsub	r6,pc
	task_return_t result=0;
800169c0:	30 08       	mov	r8,0
800169c2:	ef 48 ff fc 	st.w	r7[-4],r8
	mavlink_receive_handler();
800169c6:	f0 16 02 1d 	mcall	r6[2164]
	if ((mavlink_out_stream->buffer_empty(mavlink_out_stream->data))==true) {
800169ca:	ec f8 01 48 	ld.w	r8,r6[328]
800169ce:	70 08       	ld.w	r8,r8[0x0]
800169d0:	70 38       	ld.w	r8,r8[0xc]
800169d2:	ec f9 01 48 	ld.w	r9,r6[328]
800169d6:	72 09       	ld.w	r9,r9[0x0]
800169d8:	72 59       	ld.w	r9,r9[0x14]
800169da:	12 9c       	mov	r12,r9
800169dc:	5d 18       	icall	r8
800169de:	18 98       	mov	r8,r12
800169e0:	58 18       	cp.w	r8,1
800169e2:	c0 a1       	brne	800169f6 <mavlink_protocol_update+0x42>
		result = run_scheduler_update(&mavlink_tasks, ROUND_ROBIN);
800169e4:	ec f8 01 20 	ld.w	r8,r6[288]
800169e8:	30 0b       	mov	r11,0
800169ea:	10 9c       	mov	r12,r8
800169ec:	f0 16 00 e4 	mcall	r6[912]
800169f0:	18 98       	mov	r8,r12
800169f2:	ef 48 ff fc 	st.w	r7[-4],r8
		//flush_mavlink();
	}
		
	
	return result;
800169f6:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
800169fa:	10 9c       	mov	r12,r8
800169fc:	2f fd       	sub	sp,-4
800169fe:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80016a02:	00 00       	add	r0,r0
80016a04:	80 01       	ld.sh	r1,r0[0x0]
80016a06:	68 42       	ld.w	r2,r4[0x10]

80016a08 <get_mavlink_taskset>:

task_set* get_mavlink_taskset() {
80016a08:	eb cd 40 c0 	pushm	r6-r7,lr
80016a0c:	1a 97       	mov	r7,sp
80016a0e:	48 46       	lddpc	r6,80016a1c <get_mavlink_taskset+0x14>
80016a10:	1e 26       	rsub	r6,pc
	return &mavlink_tasks;
80016a12:	ec f8 01 20 	ld.w	r8,r6[288]
}
80016a16:	10 9c       	mov	r12,r8
80016a18:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80016a1c:	80 01       	ld.sh	r1,r0[0x0]
80016a1e:	68 94       	ld.w	r4,r4[0x24]

80016a20 <suspend_downstream>:

void suspend_downstream(uint32_t delay) {
80016a20:	eb cd 40 c0 	pushm	r6-r7,lr
80016a24:	1a 97       	mov	r7,sp
80016a26:	20 2d       	sub	sp,8
80016a28:	49 56       	lddpc	r6,80016a7c <suspend_downstream+0x5c>
80016a2a:	1e 26       	rsub	r6,pc
80016a2c:	ef 4c ff f8 	st.w	r7[-8],r12
	int i;
	for (i=0; i<mavlink_tasks.number_of_tasks; i++) {
80016a30:	30 08       	mov	r8,0
80016a32:	ef 48 ff fc 	st.w	r7[-4],r8
80016a36:	c1 78       	rjmp	80016a64 <suspend_downstream+0x44>
		suspend_task(&mavlink_tasks.tasks[i], delay);
80016a38:	ee f9 ff fc 	ld.w	r9,r7[-4]
80016a3c:	12 98       	mov	r8,r9
80016a3e:	a1 78       	lsl	r8,0x1
80016a40:	12 08       	add	r8,r9
80016a42:	a5 68       	lsl	r8,0x4
80016a44:	10 99       	mov	r9,r8
80016a46:	ec f8 01 20 	ld.w	r8,r6[288]
80016a4a:	2f c8       	sub	r8,-4
80016a4c:	f2 08 00 08 	add	r8,r9,r8
80016a50:	ee fb ff f8 	ld.w	r11,r7[-8]
80016a54:	10 9c       	mov	r12,r8
80016a56:	f0 16 01 b7 	mcall	r6[1756]
	return &mavlink_tasks;
}

void suspend_downstream(uint32_t delay) {
	int i;
	for (i=0; i<mavlink_tasks.number_of_tasks; i++) {
80016a5a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80016a5e:	2f f8       	sub	r8,-1
80016a60:	ef 48 ff fc 	st.w	r7[-4],r8
80016a64:	ec f8 01 20 	ld.w	r8,r6[288]
80016a68:	11 88       	ld.ub	r8,r8[0x0]
80016a6a:	10 99       	mov	r9,r8
80016a6c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80016a70:	10 39       	cp.w	r9,r8
80016a72:	fe 99 ff e3 	brgt	80016a38 <suspend_downstream+0x18>
		suspend_task(&mavlink_tasks.tasks[i], delay);
	}	
}
80016a76:	2f ed       	sub	sp,-8
80016a78:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80016a7c:	80 01       	ld.sh	r1,r0[0x0]
80016a7e:	68 ae       	ld.w	lr,r4[0x28]

80016a80 <mavlink_receive>:

uint8_t mavlink_receive(byte_stream_t* stream, Mavlink_Received_t* rec) {
80016a80:	eb cd 40 c0 	pushm	r6-r7,lr
80016a84:	1a 97       	mov	r7,sp
80016a86:	20 3d       	sub	sp,12
80016a88:	49 a6       	lddpc	r6,80016af0 <mavlink_receive+0x70>
80016a8a:	1e 26       	rsub	r6,pc
80016a8c:	ef 4c ff f8 	st.w	r7[-8],r12
80016a90:	ef 4b ff f4 	st.w	r7[-12],r11
	uint8_t byte;
	//dbg_print(" ");
	while(stream->bytes_available(stream->data) > 0) {
80016a94:	c1 d8       	rjmp	80016ace <mavlink_receive+0x4e>
		byte = stream->get(stream->data);
80016a96:	ee f8 ff f8 	ld.w	r8,r7[-8]
80016a9a:	70 08       	ld.w	r8,r8[0x0]
80016a9c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80016aa0:	72 59       	ld.w	r9,r9[0x14]
80016aa2:	12 9c       	mov	r12,r9
80016aa4:	5d 18       	icall	r8
80016aa6:	18 98       	mov	r8,r12
80016aa8:	ef 68 ff ff 	st.b	r7[-1],r8
		//dbg_print(".");
		//dbg_print_num(byte, 16);
		//dbg_print(" ");
		if(mavlink_parse_char(MAVLINK_COMM_0, byte, &rec->msg, &rec->status)) {
80016aac:	ee f8 ff f4 	ld.w	r8,r7[-12]
80016ab0:	f0 c9 fe f0 	sub	r9,r8,-272
80016ab4:	ee fa ff f4 	ld.w	r10,r7[-12]
80016ab8:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80016abc:	10 9b       	mov	r11,r8
80016abe:	30 0c       	mov	r12,0
80016ac0:	fe b0 fa d2 	rcall	80016064 <mavlink_parse_char>
80016ac4:	18 98       	mov	r8,r12
80016ac6:	58 08       	cp.w	r8,0
80016ac8:	c0 30       	breq	80016ace <mavlink_receive+0x4e>
			//dbg_print("\n");
			return 1;
80016aca:	30 18       	mov	r8,1
80016acc:	c0 e8       	rjmp	80016ae8 <mavlink_receive+0x68>
}

uint8_t mavlink_receive(byte_stream_t* stream, Mavlink_Received_t* rec) {
	uint8_t byte;
	//dbg_print(" ");
	while(stream->bytes_available(stream->data) > 0) {
80016ace:	ee f8 ff f8 	ld.w	r8,r7[-8]
80016ad2:	70 48       	ld.w	r8,r8[0x10]
80016ad4:	ee f9 ff f8 	ld.w	r9,r7[-8]
80016ad8:	72 59       	ld.w	r9,r9[0x14]
80016ada:	12 9c       	mov	r12,r9
80016adc:	5d 18       	icall	r8
80016ade:	18 98       	mov	r8,r12
80016ae0:	58 08       	cp.w	r8,0
80016ae2:	fe 99 ff da 	brgt	80016a96 <mavlink_receive+0x16>
			return 1;
		}
		//dbg_print_num(rec->status.parse_state, 16);
		//dbg_print("\n");
	}
	return 0;
80016ae6:	30 08       	mov	r8,0
}
80016ae8:	10 9c       	mov	r12,r8
80016aea:	2f dd       	sub	sp,-12
80016aec:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80016af0:	80 01       	ld.sh	r1,r0[0x0]
80016af2:	69 0e       	ld.w	lr,r4[0x40]
80016af4:	6d 73       	ld.w	r3,r6[0x5c]
80016af6:	67 20       	ld.w	r0,r3[0x48]
80016af8:	63 6f       	ld.w	pc,r1[0x58]
80016afa:	6d 70       	ld.w	r0,r6[0x5c]
80016afc:	20 69       	sub	r9,6
80016afe:	64 3a       	ld.w	r10,r2[0xc]
80016b00:	00 00       	add	r0,r0
80016b02:	00 00       	add	r0,r0
80016b04:	0a 00       	add	r0,r5
80016b06:	00 00       	add	r0,r0
80016b08:	73 74       	ld.w	r4,r9[0x5c]
80016b0a:	72 65       	ld.w	r5,r9[0x18]
80016b0c:	61 6d       	ld.w	sp,r0[0x58]
80016b0e:	20 72       	sub	r2,7
80016b10:	65 71       	ld.w	r1,r2[0x5c]
80016b12:	75 65       	ld.w	r5,r10[0x58]
80016b14:	73 74       	ld.w	r4,r9[0x5c]
80016b16:	3a 00       	mov	r0,-96
80016b18:	73 65       	ld.w	r5,r9[0x58]
80016b1a:	6e 64       	ld.w	r4,r7[0x18]
80016b1c:	20 61       	sub	r1,6
80016b1e:	6c 6c       	ld.w	r12,r6[0x18]
80016b20:	0a 00       	add	r0,r5
80016b22:	00 00       	add	r0,r0
80016b24:	20 73       	sub	r3,7
80016b26:	74 72       	ld.w	r2,r10[0x1c]
80016b28:	65 61       	ld.w	r1,r2[0x58]
80016b2a:	6d 3d       	ld.w	sp,r6[0x4c]
80016b2c:	00 00       	add	r0,r0
80016b2e:	00 00       	add	r0,r0
80016b30:	20 73       	sub	r3,7
80016b32:	74 61       	ld.w	r1,r10[0x18]
80016b34:	72 74       	ld.w	r4,r9[0x1c]
80016b36:	5f 73       	srpl	r3
80016b38:	74 6f       	ld.w	pc,r10[0x18]
80016b3a:	70 3d       	ld.w	sp,r8[0xc]
80016b3c:	00 00       	add	r0,r0
80016b3e:	00 00       	add	r0,r0
80016b40:	20 72       	sub	r2,7
80016b42:	61 74       	ld.w	r4,r0[0x5c]
80016b44:	65 3d       	ld.w	sp,r2[0x4c]
	...

80016b48 <handle_mavlink_message>:

void handle_mavlink_message(Mavlink_Received_t* rec) {
80016b48:	eb cd 40 c0 	pushm	r6-r7,lr
80016b4c:	1a 97       	mov	r7,sp
80016b4e:	20 cd       	sub	sp,48
80016b50:	fe f6 02 38 	ld.w	r6,pc[568]
80016b54:	1e 26       	rsub	r6,pc
80016b56:	ef 4c ff d0 	st.w	r7[-48],r12
	if (rec->msg.sysid == MAVLINK_BASE_STATION_ID) {
80016b5a:	ee f8 ff d0 	ld.w	r8,r7[-48]
80016b5e:	11 d9       	ld.ub	r9,r8[0x5]
80016b60:	3f f8       	mov	r8,-1
80016b62:	f0 09 18 00 	cp.b	r9,r8
80016b66:	e0 81 01 09 	brne	80016d78 <handle_mavlink_message+0x230>
		switch(rec->msg.msgid) {
80016b6a:	ee f8 ff d0 	ld.w	r8,r7[-48]
80016b6e:	11 f8       	ld.ub	r8,r8[0x7]
80016b70:	59 58       	cp.w	r8,21
80016b72:	c0 c0       	breq	80016b8a <handle_mavlink_message+0x42>
80016b74:	e0 89 00 05 	brgt	80016b7e <handle_mavlink_message+0x36>
80016b78:	59 48       	cp.w	r8,20
80016b7a:	c2 a0       	breq	80016bce <handle_mavlink_message+0x86>
80016b7c:	cf e8       	rjmp	80016d78 <handle_mavlink_message+0x230>
80016b7e:	59 78       	cp.w	r8,23
80016b80:	c4 70       	breq	80016c0e <handle_mavlink_message+0xc6>
80016b82:	e0 48 00 42 	cp.w	r8,66
80016b86:	c4 d0       	breq	80016c20 <handle_mavlink_message+0xd8>
80016b88:	cf 88       	rjmp	80016d78 <handle_mavlink_message+0x230>
			case MAVLINK_MSG_ID_PARAM_REQUEST_LIST: { // 21
				mavlink_param_request_list_t request;
				mavlink_msg_param_request_list_decode(&rec->msg, &request);
80016b8a:	ee f8 ff d0 	ld.w	r8,r7[-48]
80016b8e:	ee c9 00 12 	sub	r9,r7,18
80016b92:	12 9b       	mov	r11,r9
80016b94:	10 9c       	mov	r12,r8
80016b96:	fe b0 fd 86 	rcall	800166a2 <mavlink_msg_param_request_list_decode>
			
				dbg_print("msg comp id:");
80016b9a:	fe cc 00 a6 	sub	r12,pc,166
80016b9e:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(request.target_component,10);
80016ba2:	ef 38 ff ef 	ld.ub	r8,r7[-17]
80016ba6:	30 ab       	mov	r11,10
80016ba8:	10 9c       	mov	r12,r8
80016baa:	f0 16 00 04 	mcall	r6[16]
				dbg_print("\n");
80016bae:	fe cc 00 aa 	sub	r12,pc,170
80016bb2:	f0 16 00 01 	mcall	r6[4]
			
				// Check if this message is for this system
				if ((uint8_t)request.target_system == (uint8_t)mavlink_system.sysid) {
80016bb6:	ef 39 ff ee 	ld.ub	r9,r7[-18]
80016bba:	ec f8 00 74 	ld.w	r8,r6[116]
80016bbe:	11 88       	ld.ub	r8,r8[0x0]
80016bc0:	f0 09 18 00 	cp.b	r9,r8
80016bc4:	e0 81 00 d5 	brne	80016d6e <handle_mavlink_message+0x226>
					send_all_parameters();
80016bc8:	f0 16 01 4c 	mcall	r6[1328]
				}				
			}
			break;
80016bcc:	cd 68       	rjmp	80016d78 <handle_mavlink_message+0x230>
			case MAVLINK_MSG_ID_PARAM_REQUEST_READ: { //20
				mavlink_param_request_read_t request;
				mavlink_msg_param_request_read_decode(&rec->msg, &request);
80016bce:	ee f8 ff d0 	ld.w	r8,r7[-48]
80016bd2:	ee c9 00 26 	sub	r9,r7,38
80016bd6:	12 9b       	mov	r11,r9
80016bd8:	10 9c       	mov	r12,r8
80016bda:	fe b0 fd 1b 	rcall	80016610 <mavlink_msg_param_request_read_decode>
				// Check if this message is for this system and subsystem
				if ((uint8_t)request.target_system == (uint8_t)mavlink_system.sysid
				&& (uint8_t)request.target_component == (uint8_t)mavlink_system.compid) {
80016bde:	ef 39 ff dc 	ld.ub	r9,r7[-36]
80016be2:	ec f8 00 74 	ld.w	r8,r6[116]
80016be6:	11 88       	ld.ub	r8,r8[0x0]
			break;
			case MAVLINK_MSG_ID_PARAM_REQUEST_READ: { //20
				mavlink_param_request_read_t request;
				mavlink_msg_param_request_read_decode(&rec->msg, &request);
				// Check if this message is for this system and subsystem
				if ((uint8_t)request.target_system == (uint8_t)mavlink_system.sysid
80016be8:	f0 09 18 00 	cp.b	r9,r8
80016bec:	e0 81 00 c3 	brne	80016d72 <handle_mavlink_message+0x22a>
				&& (uint8_t)request.target_component == (uint8_t)mavlink_system.compid) {
80016bf0:	ef 39 ff dd 	ld.ub	r9,r7[-35]
80016bf4:	ec f8 00 74 	ld.w	r8,r6[116]
80016bf8:	11 98       	ld.ub	r8,r8[0x1]
			break;
			case MAVLINK_MSG_ID_PARAM_REQUEST_READ: { //20
				mavlink_param_request_read_t request;
				mavlink_msg_param_request_read_decode(&rec->msg, &request);
				// Check if this message is for this system and subsystem
				if ((uint8_t)request.target_system == (uint8_t)mavlink_system.sysid
80016bfa:	f0 09 18 00 	cp.b	r9,r8
80016bfe:	e0 81 00 bc 	brne	80016d76 <handle_mavlink_message+0x22e>
				&& (uint8_t)request.target_component == (uint8_t)mavlink_system.compid) {

					send_parameter(&request);
80016c02:	ee c8 00 26 	sub	r8,r7,38
80016c06:	10 9c       	mov	r12,r8
80016c08:	f0 16 01 47 	mcall	r6[1308]
				}				
			}
			break;
80016c0c:	cb 68       	rjmp	80016d78 <handle_mavlink_message+0x230>
			case MAVLINK_MSG_ID_PARAM_SET: { //23
				suspend_downstream(100000);
80016c0e:	e0 7c 86 a0 	mov	r12,100000
80016c12:	f0 16 00 71 	mcall	r6[452]
				receive_parameter(rec);
80016c16:	ee fc ff d0 	ld.w	r12,r7[-48]
80016c1a:	f0 16 01 6f 	mcall	r6[1468]
			}
			break;
80016c1e:	ca d8       	rjmp	80016d78 <handle_mavlink_message+0x230>

			case MAVLINK_MSG_ID_REQUEST_DATA_STREAM: { // 66
				mavlink_request_data_stream_t request;
				mavlink_msg_request_data_stream_decode(&rec->msg, &request);
80016c20:	ee f8 ff d0 	ld.w	r8,r7[-48]
80016c24:	ee c9 00 2c 	sub	r9,r7,44
80016c28:	12 9b       	mov	r11,r9
80016c2a:	10 9c       	mov	r12,r8
80016c2c:	fe b0 fd a9 	rcall	8001677e <mavlink_msg_request_data_stream_decode>
				// TODO: control target_component == compid!
				if ((uint8_t)request.target_system == (uint8_t)mavlink_system.sysid
				&& (uint8_t)request.target_component == (uint8_t)mavlink_system.compid)
80016c30:	ef 39 ff d6 	ld.ub	r9,r7[-42]
80016c34:	ec f8 00 74 	ld.w	r8,r6[116]
80016c38:	11 88       	ld.ub	r8,r8[0x0]

			case MAVLINK_MSG_ID_REQUEST_DATA_STREAM: { // 66
				mavlink_request_data_stream_t request;
				mavlink_msg_request_data_stream_decode(&rec->msg, &request);
				// TODO: control target_component == compid!
				if ((uint8_t)request.target_system == (uint8_t)mavlink_system.sysid
80016c3a:	f0 09 18 00 	cp.b	r9,r8
80016c3e:	e0 81 00 9d 	brne	80016d78 <handle_mavlink_message+0x230>
				&& (uint8_t)request.target_component == (uint8_t)mavlink_system.compid)
80016c42:	ef 39 ff d7 	ld.ub	r9,r7[-41]
80016c46:	ec f8 00 74 	ld.w	r8,r6[116]
80016c4a:	11 98       	ld.ub	r8,r8[0x1]

			case MAVLINK_MSG_ID_REQUEST_DATA_STREAM: { // 66
				mavlink_request_data_stream_t request;
				mavlink_msg_request_data_stream_decode(&rec->msg, &request);
				// TODO: control target_component == compid!
				if ((uint8_t)request.target_system == (uint8_t)mavlink_system.sysid
80016c4c:	f0 09 18 00 	cp.b	r9,r8
80016c50:	e0 81 00 94 	brne	80016d78 <handle_mavlink_message+0x230>
				&& (uint8_t)request.target_component == (uint8_t)mavlink_system.compid)
				{
					dbg_print("stream request:");
80016c54:	fe cc 01 4c 	sub	r12,pc,332
80016c58:	f0 16 00 01 	mcall	r6[4]
					dbg_print_num(request.target_component,10);
80016c5c:	ef 38 ff d7 	ld.ub	r8,r7[-41]
80016c60:	30 ab       	mov	r11,10
80016c62:	10 9c       	mov	r12,r8
80016c64:	f0 16 00 04 	mcall	r6[16]
					if (request.req_stream_id==255) {
80016c68:	ef 39 ff d8 	ld.ub	r9,r7[-40]
80016c6c:	3f f8       	mov	r8,-1
80016c6e:	f0 09 18 00 	cp.b	r9,r8
80016c72:	c2 a1       	brne	80016cc6 <handle_mavlink_message+0x17e>
						int i;
						dbg_print("send all\n");
80016c74:	fe cc 01 5c 	sub	r12,pc,348
80016c78:	f0 16 00 01 	mcall	r6[4]
						// send full list of streams
						for (i=0; i<mavlink_tasks.number_of_tasks; i++) {
80016c7c:	30 08       	mov	r8,0
80016c7e:	ef 48 ff f0 	st.w	r7[-16],r8
80016c82:	c1 88       	rjmp	80016cb2 <handle_mavlink_message+0x16a>
							task_entry *task=get_task_by_index(&mavlink_tasks, i);
80016c84:	ee f8 ff f0 	ld.w	r8,r7[-16]
80016c88:	5c 88       	casts.h	r8
80016c8a:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
80016c8e:	ec f8 01 20 	ld.w	r8,r6[288]
80016c92:	12 9b       	mov	r11,r9
80016c94:	10 9c       	mov	r12,r8
80016c96:	f0 16 01 ac 	mcall	r6[1712]
80016c9a:	18 98       	mov	r8,r12
80016c9c:	ef 48 ff f4 	st.w	r7[-12],r8
							run_task_now(task);
80016ca0:	ee fc ff f4 	ld.w	r12,r7[-12]
80016ca4:	f0 16 00 f6 	mcall	r6[984]
					dbg_print_num(request.target_component,10);
					if (request.req_stream_id==255) {
						int i;
						dbg_print("send all\n");
						// send full list of streams
						for (i=0; i<mavlink_tasks.number_of_tasks; i++) {
80016ca8:	ee f8 ff f0 	ld.w	r8,r7[-16]
80016cac:	2f f8       	sub	r8,-1
80016cae:	ef 48 ff f0 	st.w	r7[-16],r8
80016cb2:	ec f8 01 20 	ld.w	r8,r6[288]
80016cb6:	11 88       	ld.ub	r8,r8[0x0]
80016cb8:	10 99       	mov	r9,r8
80016cba:	ee f8 ff f0 	ld.w	r8,r7[-16]
80016cbe:	10 39       	cp.w	r9,r8
80016cc0:	fe 99 ff e2 	brgt	80016c84 <handle_mavlink_message+0x13c>
80016cc4:	c5 a8       	rjmp	80016d78 <handle_mavlink_message+0x230>
							task_entry *task=get_task_by_index(&mavlink_tasks, i);
							run_task_now(task);
						}					
					} else {
						int i;
						task_entry *task=get_task_by_id(&mavlink_tasks, request.req_stream_id);
80016cc6:	ef 38 ff d8 	ld.ub	r8,r7[-40]
80016cca:	10 99       	mov	r9,r8
80016ccc:	ec f8 01 20 	ld.w	r8,r6[288]
80016cd0:	12 9b       	mov	r11,r9
80016cd2:	10 9c       	mov	r12,r8
80016cd4:	f0 16 01 ae 	mcall	r6[1720]
80016cd8:	18 98       	mov	r8,r12
80016cda:	ef 48 ff fc 	st.w	r7[-4],r8
						dbg_print(" stream="); dbg_print_num(request.req_stream_id, 10);
80016cde:	fe cc 01 ba 	sub	r12,pc,442
80016ce2:	f0 16 00 01 	mcall	r6[4]
80016ce6:	ef 38 ff d8 	ld.ub	r8,r7[-40]
80016cea:	30 ab       	mov	r11,10
80016cec:	10 9c       	mov	r12,r8
80016cee:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" start_stop=");dbg_print_num(request.start_stop, 10);
80016cf2:	fe cc 01 c2 	sub	r12,pc,450
80016cf6:	f0 16 00 01 	mcall	r6[4]
80016cfa:	ef 38 ff d9 	ld.ub	r8,r7[-39]
80016cfe:	30 ab       	mov	r11,10
80016d00:	10 9c       	mov	r12,r8
80016d02:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" rate=");dbg_print_num(request.req_message_rate,10);
80016d06:	fe cc 01 c6 	sub	r12,pc,454
80016d0a:	f0 16 00 01 	mcall	r6[4]
80016d0e:	ef 08 ff d4 	ld.sh	r8,r7[-44]
80016d12:	5c 78       	castu.h	r8
80016d14:	30 ab       	mov	r11,10
80016d16:	10 9c       	mov	r12,r8
80016d18:	f0 16 00 04 	mcall	r6[16]
						dbg_print("\n");
80016d1c:	fe cc 02 18 	sub	r12,pc,536
80016d20:	f0 16 00 01 	mcall	r6[4]
						dbg_print("\n");
80016d24:	fe cc 02 20 	sub	r12,pc,544
80016d28:	f0 16 00 01 	mcall	r6[4]
						if (request.start_stop) {
80016d2c:	ef 38 ff d9 	ld.ub	r8,r7[-39]
80016d30:	58 08       	cp.w	r8,0
80016d32:	c0 70       	breq	80016d40 <handle_mavlink_message+0x1f8>
							change_run_mode(task, RUN_REGULAR);
80016d34:	30 2b       	mov	r11,2
80016d36:	ee fc ff fc 	ld.w	r12,r7[-4]
80016d3a:	f0 16 00 a2 	mcall	r6[648]
80016d3e:	c0 68       	rjmp	80016d4a <handle_mavlink_message+0x202>
						}else {
							change_run_mode(task, RUN_NEVER);
80016d40:	30 0b       	mov	r11,0
80016d42:	ee fc ff fc 	ld.w	r12,r7[-4]
80016d46:	f0 16 00 a2 	mcall	r6[648]
						}
						if (request.req_message_rate>0) {
80016d4a:	ef 08 ff d4 	ld.sh	r8,r7[-44]
80016d4e:	58 08       	cp.w	r8,0
80016d50:	c1 40       	breq	80016d78 <handle_mavlink_message+0x230>
							change_task_period(task, SCHEDULER_TIMEBASE/(uint32_t)request.req_message_rate);
80016d52:	ef 08 ff d4 	ld.sh	r8,r7[-44]
80016d56:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
80016d5a:	ee 78 42 40 	mov	r8,1000000
80016d5e:	f0 09 0d 08 	divu	r8,r8,r9
80016d62:	10 9b       	mov	r11,r8
80016d64:	ee fc ff fc 	ld.w	r12,r7[-4]
80016d68:	f0 16 01 95 	mcall	r6[1620]
80016d6c:	c0 68       	rjmp	80016d78 <handle_mavlink_message+0x230>
				// Check if this message is for this system
				if ((uint8_t)request.target_system == (uint8_t)mavlink_system.sysid) {
					send_all_parameters();
				}				
			}
			break;
80016d6e:	d7 03       	nop
80016d70:	c0 48       	rjmp	80016d78 <handle_mavlink_message+0x230>
				&& (uint8_t)request.target_component == (uint8_t)mavlink_system.compid) {

					send_parameter(&request);
				}				
			}
			break;
80016d72:	d7 03       	nop
80016d74:	c0 28       	rjmp	80016d78 <handle_mavlink_message+0x230>
80016d76:	d7 03       	nop
			break;
		}
	}

	// handle all platform-specific messages in mavlink-actions:
	handle_specific_messages(rec);
80016d78:	ee fc ff d0 	ld.w	r12,r7[-48]
80016d7c:	f0 16 01 a7 	mcall	r6[1692]
}	
80016d80:	2f 4d       	sub	sp,-48
80016d82:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80016d86:	00 00       	add	r0,r0
80016d88:	80 01       	ld.sh	r1,r0[0x0]
80016d8a:	69 d8       	ld.w	r8,r4[0x74]

80016d8c <crc_accumulate>:
 *
 * @param data new char to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate(uint8_t data, uint16_t *crcAccum)
{
80016d8c:	eb cd 40 80 	pushm	r7,lr
80016d90:	1a 97       	mov	r7,sp
80016d92:	20 3d       	sub	sp,12
80016d94:	18 98       	mov	r8,r12
80016d96:	ef 4b ff f4 	st.w	r7[-12],r11
80016d9a:	ef 68 ff f8 	st.b	r7[-8],r8
        /*Accumulate one byte of data into the CRC*/
        uint8_t tmp;

        tmp = data ^ (uint8_t)(*crcAccum &0xff);
80016d9e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80016da2:	90 08       	ld.sh	r8,r8[0x0]
80016da4:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80016da8:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80016dac:	f3 e8 20 08 	eor	r8,r9,r8
80016db0:	ef 68 ff ff 	st.b	r7[-1],r8
        tmp ^= (tmp<<4);
80016db4:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80016db8:	a5 68       	lsl	r8,0x4
80016dba:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80016dbe:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80016dc2:	f3 e8 20 08 	eor	r8,r9,r8
80016dc6:	5c 58       	castu.b	r8
80016dc8:	ef 68 ff ff 	st.b	r7[-1],r8
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
80016dcc:	ee f8 ff f4 	ld.w	r8,r7[-12]
80016dd0:	90 08       	ld.sh	r8,r8[0x0]
80016dd2:	5c 78       	castu.h	r8
80016dd4:	a9 88       	lsr	r8,0x8
80016dd6:	5c 88       	casts.h	r8
80016dd8:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
80016ddc:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80016de0:	a9 68       	lsl	r8,0x8
80016de2:	5c 88       	casts.h	r8
80016de4:	f3 e8 20 08 	eor	r8,r9,r8
80016de8:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
80016dec:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80016df0:	a3 78       	lsl	r8,0x3
80016df2:	5c 88       	casts.h	r8
80016df4:	f3 e8 20 08 	eor	r8,r9,r8
80016df8:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
80016dfc:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80016e00:	a5 88       	lsr	r8,0x4
80016e02:	5c 58       	castu.b	r8
80016e04:	f3 e8 20 08 	eor	r8,r9,r8
80016e08:	5c 88       	casts.h	r8
80016e0a:	ee f9 ff f4 	ld.w	r9,r7[-12]
80016e0e:	b2 08       	st.h	r9[0x0],r8
}
80016e10:	2f dd       	sub	sp,-12
80016e12:	e3 cd 80 80 	ldm	sp++,r7,pc

80016e16 <crc_init>:
 * @brief Initiliaze the buffer for the X.25 CRC
 *
 * @param crcAccum the 16 bit X.25 CRC
 */
static inline void crc_init(uint16_t* crcAccum)
{
80016e16:	eb cd 40 80 	pushm	r7,lr
80016e1a:	1a 97       	mov	r7,sp
80016e1c:	20 1d       	sub	sp,4
80016e1e:	ef 4c ff fc 	st.w	r7[-4],r12
        *crcAccum = X25_INIT_CRC;
80016e22:	ee f9 ff fc 	ld.w	r9,r7[-4]
80016e26:	3f f8       	mov	r8,-1
80016e28:	b2 08       	st.h	r9[0x0],r8
}
80016e2a:	2f fd       	sub	sp,-4
80016e2c:	e3 cd 80 80 	ldm	sp++,r7,pc

80016e30 <crc_calculate>:
 * @param  pBuffer buffer containing the byte array to hash
 * @param  length  length of the byte array
 * @return the checksum over the buffer bytes
 **/
static inline uint16_t crc_calculate(const uint8_t* pBuffer, uint16_t length)
{
80016e30:	eb cd 40 c0 	pushm	r6-r7,lr
80016e34:	1a 97       	mov	r7,sp
80016e36:	20 3d       	sub	sp,12
80016e38:	49 76       	lddpc	r6,80016e94 <crc_calculate+0x64>
80016e3a:	1e 26       	rsub	r6,pc
80016e3c:	ef 4c ff f8 	st.w	r7[-8],r12
80016e40:	16 98       	mov	r8,r11
80016e42:	ef 58 ff f4 	st.h	r7[-12],r8
        uint16_t crcTmp;
        crc_init(&crcTmp);
80016e46:	ee c8 00 02 	sub	r8,r7,2
80016e4a:	10 9c       	mov	r12,r8
80016e4c:	ce 5f       	rcall	80016e16 <crc_init>
	while (length--) {
80016e4e:	c0 e8       	rjmp	80016e6a <crc_calculate+0x3a>
                crc_accumulate(*pBuffer++, &crcTmp);
80016e50:	ee f8 ff f8 	ld.w	r8,r7[-8]
80016e54:	11 88       	ld.ub	r8,r8[0x0]
80016e56:	ee f9 ff f8 	ld.w	r9,r7[-8]
80016e5a:	2f f9       	sub	r9,-1
80016e5c:	ef 49 ff f8 	st.w	r7[-8],r9
80016e60:	ee c9 00 02 	sub	r9,r7,2
80016e64:	12 9b       	mov	r11,r9
80016e66:	10 9c       	mov	r12,r8
80016e68:	c9 2f       	rcall	80016d8c <crc_accumulate>
 **/
static inline uint16_t crc_calculate(const uint8_t* pBuffer, uint16_t length)
{
        uint16_t crcTmp;
        crc_init(&crcTmp);
	while (length--) {
80016e6a:	ef 09 ff f4 	ld.sh	r9,r7[-12]
80016e6e:	30 08       	mov	r8,0
80016e70:	f0 09 19 00 	cp.h	r9,r8
80016e74:	5f 18       	srne	r8
80016e76:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80016e7a:	ef 08 ff f4 	ld.sh	r8,r7[-12]
80016e7e:	20 18       	sub	r8,1
80016e80:	ef 58 ff f4 	st.h	r7[-12],r8
80016e84:	58 09       	cp.w	r9,0
80016e86:	ce 51       	brne	80016e50 <crc_calculate+0x20>
                crc_accumulate(*pBuffer++, &crcTmp);
        }
        return crcTmp;
80016e88:	ef 08 ff fe 	ld.sh	r8,r7[-2]
}
80016e8c:	10 9c       	mov	r12,r8
80016e8e:	2f dd       	sub	sp,-12
80016e90:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80016e94:	80 01       	ld.sh	r1,r0[0x0]
80016e96:	6c be       	ld.w	lr,r6[0x2c]

80016e98 <crc_accumulate_buffer>:
 *
 * @param data new bytes to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate_buffer(uint16_t *crcAccum, const char *pBuffer, uint8_t length)
{
80016e98:	eb cd 40 c0 	pushm	r6-r7,lr
80016e9c:	1a 97       	mov	r7,sp
80016e9e:	20 4d       	sub	sp,16
80016ea0:	49 66       	lddpc	r6,80016ef8 <crc_accumulate_buffer+0x60>
80016ea2:	1e 26       	rsub	r6,pc
80016ea4:	ef 4c ff f8 	st.w	r7[-8],r12
80016ea8:	ef 4b ff f4 	st.w	r7[-12],r11
80016eac:	14 98       	mov	r8,r10
80016eae:	ef 68 ff f0 	st.b	r7[-16],r8
	const uint8_t *p = (const uint8_t *)pBuffer;
80016eb2:	ee f8 ff f4 	ld.w	r8,r7[-12]
80016eb6:	ef 48 ff fc 	st.w	r7[-4],r8
	while (length--) {
80016eba:	c0 d8       	rjmp	80016ed4 <crc_accumulate_buffer+0x3c>
                crc_accumulate(*p++, crcAccum);
80016ebc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80016ec0:	11 88       	ld.ub	r8,r8[0x0]
80016ec2:	ee f9 ff fc 	ld.w	r9,r7[-4]
80016ec6:	2f f9       	sub	r9,-1
80016ec8:	ef 49 ff fc 	st.w	r7[-4],r9
80016ecc:	ee fb ff f8 	ld.w	r11,r7[-8]
80016ed0:	10 9c       	mov	r12,r8
80016ed2:	c5 df       	rcall	80016d8c <crc_accumulate>
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate_buffer(uint16_t *crcAccum, const char *pBuffer, uint8_t length)
{
	const uint8_t *p = (const uint8_t *)pBuffer;
	while (length--) {
80016ed4:	ef 39 ff f0 	ld.ub	r9,r7[-16]
80016ed8:	30 08       	mov	r8,0
80016eda:	f0 09 18 00 	cp.b	r9,r8
80016ede:	5f 18       	srne	r8
80016ee0:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80016ee4:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80016ee8:	20 18       	sub	r8,1
80016eea:	ef 68 ff f0 	st.b	r7[-16],r8
80016eee:	58 09       	cp.w	r9,0
80016ef0:	ce 61       	brne	80016ebc <crc_accumulate_buffer+0x24>
                crc_accumulate(*p++, crcAccum);
        }
}
80016ef2:	2f cd       	sub	sp,-16
80016ef4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80016ef8:	80 01       	ld.sh	r1,r0[0x0]
80016efa:	6d 26       	ld.w	r6,r6[0x48]

80016efc <mavlink_get_channel_status>:
/*
 * Internal function to give access to the channel status for each channel
 */
#ifndef MAVLINK_GET_CHANNEL_STATUS
MAVLINK_HELPER mavlink_status_t* mavlink_get_channel_status(uint8_t chan)
{
80016efc:	eb cd 40 c0 	pushm	r6-r7,lr
80016f00:	1a 97       	mov	r7,sp
80016f02:	20 1d       	sub	sp,4
80016f04:	48 96       	lddpc	r6,80016f28 <mavlink_get_channel_status+0x2c>
80016f06:	1e 26       	rsub	r6,pc
80016f08:	18 98       	mov	r8,r12
80016f0a:	ef 68 ff fc 	st.b	r7[-4],r8
	static mavlink_status_t m_mavlink_status[MAVLINK_COMM_NUM_BUFFERS];
	return &m_mavlink_status[chan];
80016f0e:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80016f12:	f0 09 15 04 	lsl	r9,r8,0x4
80016f16:	ec f8 08 cc 	ld.w	r8,r6[2252]
80016f1a:	f2 08 00 08 	add	r8,r9,r8
}
80016f1e:	10 9c       	mov	r12,r8
80016f20:	2f fd       	sub	sp,-4
80016f22:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80016f26:	00 00       	add	r0,r0
80016f28:	80 01       	ld.sh	r1,r0[0x0]
80016f2a:	6d 8a       	ld.w	r10,r6[0x60]

80016f2c <_mav_finalize_message_chan_send>:
MAVLINK_HELPER void _mav_finalize_message_chan_send(mavlink_channel_t chan, uint8_t msgid, const char *packet, 
						    uint8_t length, uint8_t crc_extra)
#else
MAVLINK_HELPER void _mav_finalize_message_chan_send(mavlink_channel_t chan, uint8_t msgid, const char *packet, uint8_t length)
#endif
{
80016f2c:	eb cd 40 c0 	pushm	r6-r7,lr
80016f30:	1a 97       	mov	r7,sp
80016f32:	20 9d       	sub	sp,36
80016f34:	4b d6       	lddpc	r6,80017028 <_mav_finalize_message_chan_send+0xfc>
80016f36:	1e 26       	rsub	r6,pc
80016f38:	ef 4c ff ec 	st.w	r7[-20],r12
80016f3c:	ef 4a ff e4 	st.w	r7[-28],r10
80016f40:	16 9a       	mov	r10,r11
80016f42:	ef 6a ff e8 	st.b	r7[-24],r10
80016f46:	ef 69 ff e0 	st.b	r7[-32],r9
80016f4a:	ef 68 ff dc 	st.b	r7[-36],r8
	uint16_t checksum;
	uint8_t buf[MAVLINK_NUM_HEADER_BYTES];
	uint8_t ck[2];
	mavlink_status_t *status = mavlink_get_channel_status(chan);
80016f4e:	ee f8 ff ec 	ld.w	r8,r7[-20]
80016f52:	5c 58       	castu.b	r8
80016f54:	10 9c       	mov	r12,r8
80016f56:	cd 3f       	rcall	80016efc <mavlink_get_channel_status>
80016f58:	18 98       	mov	r8,r12
80016f5a:	ef 48 ff fc 	st.w	r7[-4],r8
	buf[0] = MAVLINK_STX;
80016f5e:	3f e8       	mov	r8,-2
80016f60:	ef 68 ff f4 	st.b	r7[-12],r8
	buf[1] = length;
80016f64:	ef 38 ff e0 	ld.ub	r8,r7[-32]
80016f68:	ef 68 ff f5 	st.b	r7[-11],r8
	buf[2] = status->current_tx_seq;
80016f6c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80016f70:	f1 38 00 0a 	ld.ub	r8,r8[10]
80016f74:	ef 68 ff f6 	st.b	r7[-10],r8
	buf[3] = mavlink_system.sysid;
80016f78:	ec f8 00 74 	ld.w	r8,r6[116]
80016f7c:	11 88       	ld.ub	r8,r8[0x0]
80016f7e:	ef 68 ff f7 	st.b	r7[-9],r8
	buf[4] = mavlink_system.compid;
80016f82:	ec f8 00 74 	ld.w	r8,r6[116]
80016f86:	11 98       	ld.ub	r8,r8[0x1]
80016f88:	ef 68 ff f8 	st.b	r7[-8],r8
	buf[5] = msgid;
80016f8c:	ef 38 ff e8 	ld.ub	r8,r7[-24]
80016f90:	ef 68 ff f9 	st.b	r7[-7],r8
	status->current_tx_seq++;
80016f94:	ee f8 ff fc 	ld.w	r8,r7[-4]
80016f98:	f1 38 00 0a 	ld.ub	r8,r8[10]
80016f9c:	2f f8       	sub	r8,-1
80016f9e:	5c 58       	castu.b	r8
80016fa0:	ee f9 ff fc 	ld.w	r9,r7[-4]
80016fa4:	f3 68 00 0a 	st.b	r9[10],r8
	checksum = crc_calculate((uint8_t*)&buf[1], MAVLINK_CORE_HEADER_LEN);
80016fa8:	ee c8 00 0c 	sub	r8,r7,12
80016fac:	2f f8       	sub	r8,-1
80016fae:	30 5b       	mov	r11,5
80016fb0:	10 9c       	mov	r12,r8
80016fb2:	c3 ff       	rcall	80016e30 <crc_calculate>
80016fb4:	18 98       	mov	r8,r12
80016fb6:	5c 88       	casts.h	r8
80016fb8:	ef 58 ff fa 	st.h	r7[-6],r8
	crc_accumulate_buffer(&checksum, packet, length);
80016fbc:	ef 39 ff e0 	ld.ub	r9,r7[-32]
80016fc0:	ee c8 00 06 	sub	r8,r7,6
80016fc4:	12 9a       	mov	r10,r9
80016fc6:	ee fb ff e4 	ld.w	r11,r7[-28]
80016fca:	10 9c       	mov	r12,r8
80016fcc:	c6 6f       	rcall	80016e98 <crc_accumulate_buffer>
#if MAVLINK_CRC_EXTRA
	crc_accumulate(crc_extra, &checksum);
80016fce:	ef 38 ff dc 	ld.ub	r8,r7[-36]
80016fd2:	ee c9 00 06 	sub	r9,r7,6
80016fd6:	12 9b       	mov	r11,r9
80016fd8:	10 9c       	mov	r12,r8
80016fda:	cd 9e       	rcall	80016d8c <crc_accumulate>
#endif
	ck[0] = (uint8_t)(checksum & 0xFF);
80016fdc:	ef 08 ff fa 	ld.sh	r8,r7[-6]
80016fe0:	5c 58       	castu.b	r8
80016fe2:	ef 68 ff f0 	st.b	r7[-16],r8
	ck[1] = (uint8_t)(checksum >> 8);
80016fe6:	ef 08 ff fa 	ld.sh	r8,r7[-6]
80016fea:	5c 78       	castu.h	r8
80016fec:	a9 88       	lsr	r8,0x8
80016fee:	5c 88       	casts.h	r8
80016ff0:	5c 58       	castu.b	r8
80016ff2:	ef 68 ff f1 	st.b	r7[-15],r8

	MAVLINK_START_UART_SEND(chan, MAVLINK_NUM_NON_PAYLOAD_BYTES + (uint16_t)length);
	_mavlink_send_uart(chan, (const char *)buf, MAVLINK_NUM_HEADER_BYTES);
80016ff6:	ee c8 00 0c 	sub	r8,r7,12
80016ffa:	30 6a       	mov	r10,6
80016ffc:	10 9b       	mov	r11,r8
80016ffe:	ee fc ff ec 	ld.w	r12,r7[-20]
80017002:	c1 5c       	rcall	8001702c <_mavlink_send_uart>
	_mavlink_send_uart(chan, packet, length);
80017004:	ef 38 ff e0 	ld.ub	r8,r7[-32]
80017008:	10 9a       	mov	r10,r8
8001700a:	ee fb ff e4 	ld.w	r11,r7[-28]
8001700e:	ee fc ff ec 	ld.w	r12,r7[-20]
80017012:	c0 dc       	rcall	8001702c <_mavlink_send_uart>
	_mavlink_send_uart(chan, (const char *)ck, 2);
80017014:	ee c8 00 10 	sub	r8,r7,16
80017018:	30 2a       	mov	r10,2
8001701a:	10 9b       	mov	r11,r8
8001701c:	ee fc ff ec 	ld.w	r12,r7[-20]
80017020:	c0 6c       	rcall	8001702c <_mavlink_send_uart>
	MAVLINK_END_UART_SEND(chan, MAVLINK_NUM_NON_PAYLOAD_BYTES + (uint16_t)length);
}
80017022:	2f 7d       	sub	sp,-36
80017024:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80017028:	80 01       	ld.sh	r1,r0[0x0]
8001702a:	6d ba       	ld.w	r10,r6[0x6c]

8001702c <_mavlink_send_uart>:
    }
}
 */

MAVLINK_HELPER void _mavlink_send_uart(mavlink_channel_t chan, const char *buf, uint16_t len)
{
8001702c:	eb cd 40 c0 	pushm	r6-r7,lr
80017030:	1a 97       	mov	r7,sp
80017032:	20 4d       	sub	sp,16
80017034:	49 46       	lddpc	r6,80017084 <_mavlink_send_uart+0x58>
80017036:	1e 26       	rsub	r6,pc
80017038:	ef 4c ff f8 	st.w	r7[-8],r12
8001703c:	ef 4b ff f4 	st.w	r7[-12],r11
80017040:	14 98       	mov	r8,r10
80017042:	ef 58 ff f0 	st.h	r7[-16],r8
	   defines it */
	MAVLINK_SEND_UART_BYTES(chan, (const uint8_t *)buf, len);
#else
	/* fallback to one byte at a time */
	uint16_t i;
	for (i = 0; i < len; i++) {
80017046:	30 08       	mov	r8,0
80017048:	ef 58 ff fe 	st.h	r7[-2],r8
8001704c:	c1 28       	rjmp	80017070 <_mavlink_send_uart+0x44>
		comm_send_ch(chan, (uint8_t)buf[i]);
8001704e:	ef 18 ff fe 	ld.uh	r8,r7[-2]
80017052:	ee f9 ff f4 	ld.w	r9,r7[-12]
80017056:	f2 08 00 08 	add	r8,r9,r8
8001705a:	11 88       	ld.ub	r8,r8[0x0]
8001705c:	10 9b       	mov	r11,r8
8001705e:	ee fc ff f8 	ld.w	r12,r7[-8]
80017062:	f0 16 00 cc 	mcall	r6[816]
	   defines it */
	MAVLINK_SEND_UART_BYTES(chan, (const uint8_t *)buf, len);
#else
	/* fallback to one byte at a time */
	uint16_t i;
	for (i = 0; i < len; i++) {
80017066:	ef 08 ff fe 	ld.sh	r8,r7[-2]
8001706a:	2f f8       	sub	r8,-1
8001706c:	ef 58 ff fe 	st.h	r7[-2],r8
80017070:	ef 09 ff fe 	ld.sh	r9,r7[-2]
80017074:	ef 08 ff f0 	ld.sh	r8,r7[-16]
80017078:	f0 09 19 00 	cp.h	r9,r8
8001707c:	ce 93       	brcs	8001704e <_mavlink_send_uart+0x22>
		comm_send_ch(chan, (uint8_t)buf[i]);
	}
#endif
}
8001707e:	2f cd       	sub	sp,-16
80017080:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80017084:	80 01       	ld.sh	r1,r0[0x0]
80017086:	6e ba       	ld.w	r10,r7[0x2c]

80017088 <byte_swap_2>:
	return msg->len + MAVLINK_NUM_NON_PAYLOAD_BYTES;
}

#if MAVLINK_NEED_BYTE_SWAP
static inline void byte_swap_2(char *dst, const char *src)
{
80017088:	eb cd 40 80 	pushm	r7,lr
8001708c:	1a 97       	mov	r7,sp
8001708e:	20 2d       	sub	sp,8
80017090:	ef 4c ff fc 	st.w	r7[-4],r12
80017094:	ef 4b ff f8 	st.w	r7[-8],r11
	dst[0] = src[1];
80017098:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001709c:	2f f8       	sub	r8,-1
8001709e:	11 88       	ld.ub	r8,r8[0x0]
800170a0:	ee f9 ff fc 	ld.w	r9,r7[-4]
800170a4:	b2 88       	st.b	r9[0x0],r8
	dst[1] = src[0];
800170a6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800170aa:	f0 c9 ff ff 	sub	r9,r8,-1
800170ae:	ee f8 ff f8 	ld.w	r8,r7[-8]
800170b2:	11 88       	ld.ub	r8,r8[0x0]
800170b4:	b2 88       	st.b	r9[0x0],r8
}
800170b6:	2f ed       	sub	sp,-8
800170b8:	e3 cd 80 80 	ldm	sp++,r7,pc

800170bc <byte_swap_4>:
static inline void byte_swap_4(char *dst, const char *src)
{
800170bc:	eb cd 40 80 	pushm	r7,lr
800170c0:	1a 97       	mov	r7,sp
800170c2:	20 2d       	sub	sp,8
800170c4:	ef 4c ff fc 	st.w	r7[-4],r12
800170c8:	ef 4b ff f8 	st.w	r7[-8],r11
	dst[0] = src[3];
800170cc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800170d0:	2f d8       	sub	r8,-3
800170d2:	11 88       	ld.ub	r8,r8[0x0]
800170d4:	ee f9 ff fc 	ld.w	r9,r7[-4]
800170d8:	b2 88       	st.b	r9[0x0],r8
	dst[1] = src[2];
800170da:	ee f8 ff fc 	ld.w	r8,r7[-4]
800170de:	f0 c9 ff ff 	sub	r9,r8,-1
800170e2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800170e6:	2f e8       	sub	r8,-2
800170e8:	11 88       	ld.ub	r8,r8[0x0]
800170ea:	b2 88       	st.b	r9[0x0],r8
	dst[2] = src[1];
800170ec:	ee f8 ff fc 	ld.w	r8,r7[-4]
800170f0:	f0 c9 ff fe 	sub	r9,r8,-2
800170f4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800170f8:	2f f8       	sub	r8,-1
800170fa:	11 88       	ld.ub	r8,r8[0x0]
800170fc:	b2 88       	st.b	r9[0x0],r8
	dst[3] = src[0];
800170fe:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017102:	f0 c9 ff fd 	sub	r9,r8,-3
80017106:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001710a:	11 88       	ld.ub	r8,r8[0x0]
8001710c:	b2 88       	st.b	r9[0x0],r8
}
8001710e:	2f ed       	sub	sp,-8
80017110:	e3 cd 80 80 	ldm	sp++,r7,pc

80017114 <mav_array_memcpy>:

/*
  like memcpy(), but if src is NULL, do a memset to zero
*/
static void mav_array_memcpy(void *dest, const void *src, size_t n)
{
80017114:	eb cd 40 c0 	pushm	r6-r7,lr
80017118:	1a 97       	mov	r7,sp
8001711a:	20 3d       	sub	sp,12
8001711c:	49 06       	lddpc	r6,8001715c <mav_array_memcpy+0x48>
8001711e:	1e 26       	rsub	r6,pc
80017120:	ef 4c ff fc 	st.w	r7[-4],r12
80017124:	ef 4b ff f8 	st.w	r7[-8],r11
80017128:	ef 4a ff f4 	st.w	r7[-12],r10
	if (src == NULL) {
8001712c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80017130:	58 08       	cp.w	r8,0
80017132:	c0 91       	brne	80017144 <mav_array_memcpy+0x30>
		memset(dest, 0, n);
80017134:	ee fa ff f4 	ld.w	r10,r7[-12]
80017138:	30 0b       	mov	r11,0
8001713a:	ee fc ff fc 	ld.w	r12,r7[-4]
8001713e:	f0 16 00 2f 	mcall	r6[188]
80017142:	c0 98       	rjmp	80017154 <mav_array_memcpy+0x40>
	} else {
		memcpy(dest, src, n);
80017144:	ee fa ff f4 	ld.w	r10,r7[-12]
80017148:	ee fb ff f8 	ld.w	r11,r7[-8]
8001714c:	ee fc ff fc 	ld.w	r12,r7[-4]
80017150:	f0 16 00 20 	mcall	r6[128]
	}
}
80017154:	2f dd       	sub	sp,-12
80017156:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001715a:	00 00       	add	r0,r0
8001715c:	80 01       	ld.sh	r1,r0[0x0]
8001715e:	6f a2       	ld.w	r2,r7[0x68]

80017160 <_mav_put_char_array>:

/*
 * Place a char array into a buffer
 */
static inline void _mav_put_char_array(char *buf, uint8_t wire_offset, const char *b, uint8_t array_length)
{
80017160:	eb cd 40 c0 	pushm	r6-r7,lr
80017164:	1a 97       	mov	r7,sp
80017166:	20 4d       	sub	sp,16
80017168:	48 e6       	lddpc	r6,800171a0 <_mav_put_char_array+0x40>
8001716a:	1e 26       	rsub	r6,pc
8001716c:	ef 4c ff fc 	st.w	r7[-4],r12
80017170:	ef 4a ff f4 	st.w	r7[-12],r10
80017174:	12 98       	mov	r8,r9
80017176:	16 99       	mov	r9,r11
80017178:	ef 69 ff f8 	st.b	r7[-8],r9
8001717c:	ef 68 ff f0 	st.b	r7[-16],r8
	mav_array_memcpy(&buf[wire_offset], b, array_length);
80017180:	ef 39 ff f0 	ld.ub	r9,r7[-16]
80017184:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80017188:	ee fa ff fc 	ld.w	r10,r7[-4]
8001718c:	f4 08 00 08 	add	r8,r10,r8
80017190:	12 9a       	mov	r10,r9
80017192:	ee fb ff f4 	ld.w	r11,r7[-12]
80017196:	10 9c       	mov	r12,r8
80017198:	cb ef       	rcall	80017114 <mav_array_memcpy>

}
8001719a:	2f cd       	sub	sp,-16
8001719c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800171a0:	80 01       	ld.sh	r1,r0[0x0]
800171a2:	6f ee       	ld.w	lr,r7[0x78]

800171a4 <_MAV_RETURN_float>:
_MAV_MSG_RETURN_TYPE(int16_t,  2)
_MAV_MSG_RETURN_TYPE(uint32_t, 4)
_MAV_MSG_RETURN_TYPE(int32_t,  4)
_MAV_MSG_RETURN_TYPE(uint64_t, 8)
_MAV_MSG_RETURN_TYPE(int64_t,  8)
_MAV_MSG_RETURN_TYPE(float,    4)
800171a4:	eb cd 40 c0 	pushm	r6-r7,lr
800171a8:	1a 97       	mov	r7,sp
800171aa:	20 3d       	sub	sp,12
800171ac:	48 d6       	lddpc	r6,800171e0 <_MAV_RETURN_float+0x3c>
800171ae:	1e 26       	rsub	r6,pc
800171b0:	ef 4c ff f8 	st.w	r7[-8],r12
800171b4:	16 98       	mov	r8,r11
800171b6:	ef 68 ff f4 	st.b	r7[-12],r8
800171ba:	ee f8 ff f8 	ld.w	r8,r7[-8]
800171be:	2f 88       	sub	r8,-8
800171c0:	10 99       	mov	r9,r8
800171c2:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800171c6:	10 09       	add	r9,r8
800171c8:	ee c8 00 04 	sub	r8,r7,4
800171cc:	12 9b       	mov	r11,r9
800171ce:	10 9c       	mov	r12,r8
800171d0:	c7 6f       	rcall	800170bc <byte_swap_4>
800171d2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800171d6:	10 9c       	mov	r12,r8
800171d8:	2f dd       	sub	sp,-12
800171da:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800171de:	00 00       	add	r0,r0
800171e0:	80 01       	ld.sh	r1,r0[0x0]
800171e2:	70 32       	ld.w	r2,r8[0xc]

800171e4 <_MAV_RETURN_char_array>:
_MAV_MSG_RETURN_TYPE(double)
#endif // MAVLINK_NEED_BYTE_SWAP

static inline uint16_t _MAV_RETURN_char_array(const mavlink_message_t *msg, char *value, 
						     uint8_t array_length, uint8_t wire_offset)
{
800171e4:	eb cd 40 c0 	pushm	r6-r7,lr
800171e8:	1a 97       	mov	r7,sp
800171ea:	20 4d       	sub	sp,16
800171ec:	49 16       	lddpc	r6,80017230 <_MAV_RETURN_char_array+0x4c>
800171ee:	1e 26       	rsub	r6,pc
800171f0:	ef 4c ff fc 	st.w	r7[-4],r12
800171f4:	ef 4b ff f8 	st.w	r7[-8],r11
800171f8:	12 98       	mov	r8,r9
800171fa:	14 99       	mov	r9,r10
800171fc:	ef 69 ff f4 	st.b	r7[-12],r9
80017200:	ef 68 ff f0 	st.b	r7[-16],r8
	memcpy(value, &_MAV_PAYLOAD(msg)[wire_offset], array_length);
80017204:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80017208:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001720c:	f0 ca ff f8 	sub	r10,r8,-8
80017210:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80017214:	f4 08 00 08 	add	r8,r10,r8
80017218:	12 9a       	mov	r10,r9
8001721a:	10 9b       	mov	r11,r8
8001721c:	ee fc ff f8 	ld.w	r12,r7[-8]
80017220:	f0 16 00 20 	mcall	r6[128]
	return array_length;
80017224:	ef 38 ff f4 	ld.ub	r8,r7[-12]
}
80017228:	10 9c       	mov	r12,r8
8001722a:	2f cd       	sub	sp,-16
8001722c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80017230:	80 01       	ld.sh	r1,r0[0x0]
80017232:	70 72       	ld.w	r2,r8[0x1c]

80017234 <mavlink_msg_param_value_send>:
 * @param param_index Index of this onboard parameter
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_param_value_send(mavlink_channel_t chan, const char *param_id, float param_value, uint8_t param_type, uint16_t param_count, uint16_t param_index)
{
80017234:	eb cd 40 c0 	pushm	r6-r7,lr
80017238:	1a 97       	mov	r7,sp
8001723a:	20 dd       	sub	sp,52
8001723c:	4a 16       	lddpc	r6,800172c0 <mavlink_msg_param_value_send+0x8c>
8001723e:	1e 26       	rsub	r6,pc
80017240:	ee ce ff f4 	sub	lr,r7,-12
80017244:	ef 4c ff e0 	st.w	r7[-32],r12
80017248:	ef 4b ff dc 	st.w	r7[-36],r11
8001724c:	ef 4a ff d8 	st.w	r7[-40],r10
80017250:	12 9a       	mov	r10,r9
80017252:	10 99       	mov	r9,r8
80017254:	7c 08       	ld.w	r8,lr[0x0]
80017256:	ef 6a ff d4 	st.b	r7[-44],r10
8001725a:	ef 59 ff d0 	st.h	r7[-48],r9
8001725e:	ef 58 ff cc 	st.h	r7[-52],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_PARAM_VALUE_LEN];
	_mav_put_float(buf, 0, param_value);
80017262:	ee c9 00 28 	sub	r9,r7,40
80017266:	ee c8 00 1c 	sub	r8,r7,28
8001726a:	12 9b       	mov	r11,r9
8001726c:	10 9c       	mov	r12,r8
8001726e:	c2 7f       	rcall	800170bc <byte_swap_4>
	_mav_put_uint16_t(buf, 4, param_count);
80017270:	ee c9 00 30 	sub	r9,r7,48
80017274:	ee c8 00 1c 	sub	r8,r7,28
80017278:	2f c8       	sub	r8,-4
8001727a:	12 9b       	mov	r11,r9
8001727c:	10 9c       	mov	r12,r8
8001727e:	c0 5f       	rcall	80017088 <byte_swap_2>
	_mav_put_uint16_t(buf, 6, param_index);
80017280:	ee c9 00 34 	sub	r9,r7,52
80017284:	ee c8 00 1c 	sub	r8,r7,28
80017288:	2f a8       	sub	r8,-6
8001728a:	12 9b       	mov	r11,r9
8001728c:	10 9c       	mov	r12,r8
8001728e:	cf de       	rcall	80017088 <byte_swap_2>
	_mav_put_uint8_t(buf, 24, param_type);
80017290:	ef 38 ff d4 	ld.ub	r8,r7[-44]
80017294:	ef 68 ff fc 	st.b	r7[-4],r8
	_mav_put_char_array(buf, 8, param_id, 16);
80017298:	ee c8 00 1c 	sub	r8,r7,28
8001729c:	31 09       	mov	r9,16
8001729e:	ee fa ff dc 	ld.w	r10,r7[-36]
800172a2:	30 8b       	mov	r11,8
800172a4:	10 9c       	mov	r12,r8
800172a6:	c5 df       	rcall	80017160 <_mav_put_char_array>
#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_PARAM_VALUE, buf, MAVLINK_MSG_ID_PARAM_VALUE_LEN, MAVLINK_MSG_ID_PARAM_VALUE_CRC);
800172a8:	ee ca 00 1c 	sub	r10,r7,28
800172ac:	e0 68 00 dc 	mov	r8,220
800172b0:	31 99       	mov	r9,25
800172b2:	31 6b       	mov	r11,22
800172b4:	ee fc ff e0 	ld.w	r12,r7[-32]
800172b8:	c3 ae       	rcall	80016f2c <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_PARAM_VALUE, (const char *)&packet, MAVLINK_MSG_ID_PARAM_VALUE_LEN, MAVLINK_MSG_ID_PARAM_VALUE_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_PARAM_VALUE, (const char *)&packet, MAVLINK_MSG_ID_PARAM_VALUE_LEN);
#endif
#endif
}
800172ba:	2f 3d       	sub	sp,-52
800172bc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800172c0:	80 01       	ld.sh	r1,r0[0x0]
800172c2:	70 c2       	ld.w	r2,r8[0x30]

800172c4 <mavlink_msg_param_set_get_target_system>:
 * @brief Get field target_system from param_set message
 *
 * @return System ID
 */
static inline uint8_t mavlink_msg_param_set_get_target_system(const mavlink_message_t* msg)
{
800172c4:	eb cd 40 80 	pushm	r7,lr
800172c8:	1a 97       	mov	r7,sp
800172ca:	20 1d       	sub	sp,4
800172cc:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  4);
800172d0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800172d4:	2f 88       	sub	r8,-8
800172d6:	2f c8       	sub	r8,-4
800172d8:	11 88       	ld.ub	r8,r8[0x0]
}
800172da:	10 9c       	mov	r12,r8
800172dc:	2f fd       	sub	sp,-4
800172de:	e3 cd 80 80 	ldm	sp++,r7,pc

800172e2 <mavlink_msg_param_set_get_target_component>:
 * @brief Get field target_component from param_set message
 *
 * @return Component ID
 */
static inline uint8_t mavlink_msg_param_set_get_target_component(const mavlink_message_t* msg)
{
800172e2:	eb cd 40 80 	pushm	r7,lr
800172e6:	1a 97       	mov	r7,sp
800172e8:	20 1d       	sub	sp,4
800172ea:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  5);
800172ee:	ee f8 ff fc 	ld.w	r8,r7[-4]
800172f2:	2f 88       	sub	r8,-8
800172f4:	2f b8       	sub	r8,-5
800172f6:	11 88       	ld.ub	r8,r8[0x0]
}
800172f8:	10 9c       	mov	r12,r8
800172fa:	2f fd       	sub	sp,-4
800172fc:	e3 cd 80 80 	ldm	sp++,r7,pc

80017300 <mavlink_msg_param_set_get_param_id>:
 * @brief Get field param_id from param_set message
 *
 * @return Onboard parameter id, terminated by NULL if the length is less than 16 human-readable chars and WITHOUT null termination (NULL) byte if the length is exactly 16 chars - applications have to provide 16+1 bytes storage if the ID is stored as string
 */
static inline uint16_t mavlink_msg_param_set_get_param_id(const mavlink_message_t* msg, char *param_id)
{
80017300:	eb cd 40 c0 	pushm	r6-r7,lr
80017304:	1a 97       	mov	r7,sp
80017306:	20 2d       	sub	sp,8
80017308:	48 a6       	lddpc	r6,80017330 <mavlink_msg_param_set_get_param_id+0x30>
8001730a:	1e 26       	rsub	r6,pc
8001730c:	ef 4c ff fc 	st.w	r7[-4],r12
80017310:	ef 4b ff f8 	st.w	r7[-8],r11
	return _MAV_RETURN_char_array(msg, param_id, 16,  6);
80017314:	30 69       	mov	r9,6
80017316:	31 0a       	mov	r10,16
80017318:	ee fb ff f8 	ld.w	r11,r7[-8]
8001731c:	ee fc ff fc 	ld.w	r12,r7[-4]
80017320:	c6 2f       	rcall	800171e4 <_MAV_RETURN_char_array>
80017322:	18 98       	mov	r8,r12
80017324:	5c 88       	casts.h	r8
80017326:	5c 88       	casts.h	r8
}
80017328:	10 9c       	mov	r12,r8
8001732a:	2f ed       	sub	sp,-8
8001732c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80017330:	80 01       	ld.sh	r1,r0[0x0]
80017332:	71 8e       	ld.w	lr,r8[0x60]

80017334 <mavlink_msg_param_set_get_param_value>:
 * @brief Get field param_value from param_set message
 *
 * @return Onboard parameter value
 */
static inline float mavlink_msg_param_set_get_param_value(const mavlink_message_t* msg)
{
80017334:	eb cd 40 c0 	pushm	r6-r7,lr
80017338:	1a 97       	mov	r7,sp
8001733a:	20 1d       	sub	sp,4
8001733c:	48 76       	lddpc	r6,80017358 <mavlink_msg_param_set_get_param_value+0x24>
8001733e:	1e 26       	rsub	r6,pc
80017340:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_float(msg,  0);
80017344:	30 0b       	mov	r11,0
80017346:	ee fc ff fc 	ld.w	r12,r7[-4]
8001734a:	c2 df       	rcall	800171a4 <_MAV_RETURN_float>
8001734c:	18 98       	mov	r8,r12
}
8001734e:	10 9c       	mov	r12,r8
80017350:	2f fd       	sub	sp,-4
80017352:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80017356:	00 00       	add	r0,r0
80017358:	80 01       	ld.sh	r1,r0[0x0]
8001735a:	71 c2       	ld.w	r2,r8[0x70]

8001735c <mavlink_msg_param_set_get_param_type>:
 * @brief Get field param_type from param_set message
 *
 * @return Onboard parameter type: see the MAV_PARAM_TYPE enum for supported data types.
 */
static inline uint8_t mavlink_msg_param_set_get_param_type(const mavlink_message_t* msg)
{
8001735c:	eb cd 40 80 	pushm	r7,lr
80017360:	1a 97       	mov	r7,sp
80017362:	20 1d       	sub	sp,4
80017364:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  22);
80017368:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001736c:	2f 88       	sub	r8,-8
8001736e:	2e a8       	sub	r8,-22
80017370:	11 88       	ld.ub	r8,r8[0x0]
}
80017372:	10 9c       	mov	r12,r8
80017374:	2f fd       	sub	sp,-4
80017376:	e3 cd 80 80 	ldm	sp++,r7,pc

8001737a <mavlink_msg_param_set_decode>:
 *
 * @param msg The message to decode
 * @param param_set C-struct to decode the message contents into
 */
static inline void mavlink_msg_param_set_decode(const mavlink_message_t* msg, mavlink_param_set_t* param_set)
{
8001737a:	eb cd 40 c0 	pushm	r6-r7,lr
8001737e:	1a 97       	mov	r7,sp
80017380:	20 2d       	sub	sp,8
80017382:	49 76       	lddpc	r6,800173dc <mavlink_msg_param_set_decode+0x62>
80017384:	1e 26       	rsub	r6,pc
80017386:	ef 4c ff fc 	st.w	r7[-4],r12
8001738a:	ef 4b ff f8 	st.w	r7[-8],r11
#if MAVLINK_NEED_BYTE_SWAP
	param_set->param_value = mavlink_msg_param_set_get_param_value(msg);
8001738e:	ee fc ff fc 	ld.w	r12,r7[-4]
80017392:	cd 1f       	rcall	80017334 <mavlink_msg_param_set_get_param_value>
80017394:	18 99       	mov	r9,r12
80017396:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001739a:	91 09       	st.w	r8[0x0],r9
	param_set->target_system = mavlink_msg_param_set_get_target_system(msg);
8001739c:	ee fc ff fc 	ld.w	r12,r7[-4]
800173a0:	c9 2f       	rcall	800172c4 <mavlink_msg_param_set_get_target_system>
800173a2:	18 98       	mov	r8,r12
800173a4:	ee f9 ff f8 	ld.w	r9,r7[-8]
800173a8:	b2 c8       	st.b	r9[0x4],r8
	param_set->target_component = mavlink_msg_param_set_get_target_component(msg);
800173aa:	ee fc ff fc 	ld.w	r12,r7[-4]
800173ae:	c9 af       	rcall	800172e2 <mavlink_msg_param_set_get_target_component>
800173b0:	18 98       	mov	r8,r12
800173b2:	ee f9 ff f8 	ld.w	r9,r7[-8]
800173b6:	b2 d8       	st.b	r9[0x5],r8
	mavlink_msg_param_set_get_param_id(msg, param_set->param_id);
800173b8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800173bc:	2f a8       	sub	r8,-6
800173be:	10 9b       	mov	r11,r8
800173c0:	ee fc ff fc 	ld.w	r12,r7[-4]
800173c4:	c9 ef       	rcall	80017300 <mavlink_msg_param_set_get_param_id>
	param_set->param_type = mavlink_msg_param_set_get_param_type(msg);
800173c6:	ee fc ff fc 	ld.w	r12,r7[-4]
800173ca:	cc 9f       	rcall	8001735c <mavlink_msg_param_set_get_param_type>
800173cc:	18 98       	mov	r8,r12
800173ce:	ee f9 ff f8 	ld.w	r9,r7[-8]
800173d2:	f3 68 00 16 	st.b	r9[22],r8
#else
	memcpy(param_set, _MAV_PAYLOAD(msg), MAVLINK_MSG_ID_PARAM_SET_LEN);
#endif
}
800173d6:	2f ed       	sub	sp,-8
800173d8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800173dc:	80 01       	ld.sh	r1,r0[0x0]
800173de:	72 08       	ld.w	r8,r9[0x0]

800173e0 <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
800173e0:	eb cd 40 c0 	pushm	r6-r7,lr
800173e4:	1a 97       	mov	r7,sp
800173e6:	20 6d       	sub	sp,24
800173e8:	49 e6       	lddpc	r6,80017460 <interpolate+0x80>
800173ea:	1e 26       	rsub	r6,pc
800173ec:	ef 4c ff f8 	st.w	r7[-8],r12
800173f0:	ef 4b ff f4 	st.w	r7[-12],r11
800173f4:	ef 4a ff f0 	st.w	r7[-16],r10
800173f8:	ef 49 ff ec 	st.w	r7[-20],r9
800173fc:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
80017400:	ee f9 ff f4 	ld.w	r9,r7[-12]
80017404:	ee f8 ff f0 	ld.w	r8,r7[-16]
80017408:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
8001740c:	c0 41       	brne	80017414 <interpolate+0x34>
	{
		return y1;
8001740e:	ee f8 ff ec 	ld.w	r8,r7[-20]
80017412:	c2 38       	rjmp	80017458 <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
80017414:	ee f9 ff e8 	ld.w	r9,r7[-24]
80017418:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001741c:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80017420:	ee fa ff f8 	ld.w	r10,r7[-8]
80017424:	ee f8 ff f4 	ld.w	r8,r7[-12]
80017428:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
8001742c:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80017430:	ee fa ff f0 	ld.w	r10,r7[-16]
80017434:	ee f9 ff f4 	ld.w	r9,r7[-12]
80017438:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8001743c:	12 9b       	mov	r11,r9
8001743e:	10 9c       	mov	r12,r8
80017440:	f0 16 00 08 	mcall	r6[32]
80017444:	18 98       	mov	r8,r12
80017446:	10 99       	mov	r9,r8
80017448:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001744c:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80017450:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
80017454:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
80017458:	10 9c       	mov	r12,r8
8001745a:	2f ad       	sub	sp,-24
8001745c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80017460:	80 01       	ld.sh	r1,r0[0x0]
80017462:	72 6e       	ld.w	lr,r9[0x18]

80017464 <init_onboard_parameters>:
#include "flashc.h"
#include "print_util.h"

Parameter_Set_t param_set;

void init_onboard_parameters(void) {
80017464:	eb cd 40 c0 	pushm	r6-r7,lr
80017468:	1a 97       	mov	r7,sp
8001746a:	48 a6       	lddpc	r6,80017490 <init_onboard_parameters+0x2c>
8001746c:	1e 26       	rsub	r6,pc
	param_set.param_count = 0;
8001746e:	ec f8 00 28 	ld.w	r8,r6[40]
80017472:	30 09       	mov	r9,0
80017474:	f1 49 0d 20 	st.w	r8[3360],r9
	param_set.enumerate=false;
80017478:	ec f9 00 28 	ld.w	r9,r6[40]
8001747c:	30 08       	mov	r8,0
8001747e:	f3 68 0d 24 	st.b	r9[3364],r8
	param_set.transmit_parameter_index=0;
80017482:	ec f8 00 28 	ld.w	r8,r6[40]
80017486:	30 09       	mov	r9,0
80017488:	f1 49 0d 28 	st.w	r8[3368],r9
	
}
8001748c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80017490:	80 01       	ld.sh	r1,r0[0x0]
80017492:	72 f0       	ld.w	r0,r9[0x3c]

80017494 <add_parameter_uint8>:

void add_parameter_uint8(uint8_t* val, const char* param_name) {
80017494:	eb cd 40 e0 	pushm	r5-r7,lr
80017498:	1a 97       	mov	r7,sp
8001749a:	20 2d       	sub	sp,8
8001749c:	4b 66       	lddpc	r6,80017574 <add_parameter_uint8+0xe0>
8001749e:	1e 26       	rsub	r6,pc
800174a0:	ef 4c ff fc 	st.w	r7[-4],r12
800174a4:	ef 4b ff f8 	st.w	r7[-8],r11
	param_set.parameters[param_set.param_count].param = val;
800174a8:	ec f8 00 28 	ld.w	r8,r6[40]
800174ac:	f0 f9 0d 20 	ld.w	r9,r8[3360]
800174b0:	ee fa ff fc 	ld.w	r10,r7[-4]
800174b4:	ec fb 00 28 	ld.w	r11,r6[40]
800174b8:	12 98       	mov	r8,r9
800174ba:	a3 78       	lsl	r8,0x3
800174bc:	12 18       	sub	r8,r9
800174be:	a3 68       	lsl	r8,0x2
800174c0:	f6 08 00 08 	add	r8,r11,r8
800174c4:	91 0a       	st.w	r8[0x0],r10
	strcpy(param_set.parameters[param_set.param_count].param_name, param_name);
800174c6:	ec f8 00 28 	ld.w	r8,r6[40]
800174ca:	f0 f9 0d 20 	ld.w	r9,r8[3360]
800174ce:	12 98       	mov	r8,r9
800174d0:	a3 78       	lsl	r8,0x3
800174d2:	12 18       	sub	r8,r9
800174d4:	2f f8       	sub	r8,-1
800174d6:	f0 09 15 02 	lsl	r9,r8,0x2
800174da:	ec f8 00 28 	ld.w	r8,r6[40]
800174de:	f2 08 00 08 	add	r8,r9,r8
800174e2:	ee fb ff f8 	ld.w	r11,r7[-8]
800174e6:	10 9c       	mov	r12,r8
800174e8:	f0 16 00 92 	mcall	r6[584]
	param_set.parameters[param_set.param_count].data_type= MAVLINK_TYPE_UINT8_T;
800174ec:	ec f8 00 28 	ld.w	r8,r6[40]
800174f0:	f0 f9 0d 20 	ld.w	r9,r8[3360]
800174f4:	ec fa 00 28 	ld.w	r10,r6[40]
800174f8:	12 98       	mov	r8,r9
800174fa:	a3 78       	lsl	r8,0x3
800174fc:	12 18       	sub	r8,r9
800174fe:	a3 68       	lsl	r8,0x2
80017500:	f4 08 00 08 	add	r8,r10,r8
80017504:	2e c8       	sub	r8,-20
80017506:	30 19       	mov	r9,1
80017508:	91 09       	st.w	r8[0x0],r9
	param_set.parameters[param_set.param_count].param_name_length = strlen(param_name);
8001750a:	ec f8 00 28 	ld.w	r8,r6[40]
8001750e:	f0 f5 0d 20 	ld.w	r5,r8[3360]
80017512:	ee fc ff f8 	ld.w	r12,r7[-8]
80017516:	f0 16 00 7c 	mcall	r6[496]
8001751a:	18 98       	mov	r8,r12
8001751c:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80017520:	ec fa 00 28 	ld.w	r10,r6[40]
80017524:	0a 98       	mov	r8,r5
80017526:	a3 78       	lsl	r8,0x3
80017528:	0a 18       	sub	r8,r5
8001752a:	a3 68       	lsl	r8,0x2
8001752c:	f4 08 00 08 	add	r8,r10,r8
80017530:	f0 ca ff e8 	sub	r10,r8,-24
80017534:	12 98       	mov	r8,r9
80017536:	b4 88       	st.b	r10[0x0],r8
	param_set.parameters[param_set.param_count].schedule_for_transmission=true;
80017538:	ec f8 00 28 	ld.w	r8,r6[40]
8001753c:	f0 f9 0d 20 	ld.w	r9,r8[3360]
80017540:	ec fa 00 28 	ld.w	r10,r6[40]
80017544:	12 98       	mov	r8,r9
80017546:	a3 78       	lsl	r8,0x3
80017548:	12 18       	sub	r8,r9
8001754a:	a3 68       	lsl	r8,0x2
8001754c:	f4 08 00 08 	add	r8,r10,r8
80017550:	f0 c9 ff e8 	sub	r9,r8,-24
80017554:	30 18       	mov	r8,1
80017556:	b2 a8       	st.b	r9[0x2],r8
	param_set.param_count++;
80017558:	ec f8 00 28 	ld.w	r8,r6[40]
8001755c:	f0 f8 0d 20 	ld.w	r8,r8[3360]
80017560:	f0 c9 ff ff 	sub	r9,r8,-1
80017564:	ec f8 00 28 	ld.w	r8,r6[40]
80017568:	f1 49 0d 20 	st.w	r8[3360],r9
}
8001756c:	2f ed       	sub	sp,-8
8001756e:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80017572:	00 00       	add	r0,r0
80017574:	80 01       	ld.sh	r1,r0[0x0]
80017576:	73 22       	ld.w	r2,r9[0x48]

80017578 <add_parameter_uint32>:

void add_parameter_uint32(uint32_t* val, const char* param_name) {
80017578:	eb cd 40 e0 	pushm	r5-r7,lr
8001757c:	1a 97       	mov	r7,sp
8001757e:	20 2d       	sub	sp,8
80017580:	4b 66       	lddpc	r6,80017658 <add_parameter_uint32+0xe0>
80017582:	1e 26       	rsub	r6,pc
80017584:	ef 4c ff fc 	st.w	r7[-4],r12
80017588:	ef 4b ff f8 	st.w	r7[-8],r11
	param_set.parameters[param_set.param_count].param = val;
8001758c:	ec f8 00 28 	ld.w	r8,r6[40]
80017590:	f0 f9 0d 20 	ld.w	r9,r8[3360]
80017594:	ee fa ff fc 	ld.w	r10,r7[-4]
80017598:	ec fb 00 28 	ld.w	r11,r6[40]
8001759c:	12 98       	mov	r8,r9
8001759e:	a3 78       	lsl	r8,0x3
800175a0:	12 18       	sub	r8,r9
800175a2:	a3 68       	lsl	r8,0x2
800175a4:	f6 08 00 08 	add	r8,r11,r8
800175a8:	91 0a       	st.w	r8[0x0],r10
	strcpy(param_set.parameters[param_set.param_count].param_name, param_name);
800175aa:	ec f8 00 28 	ld.w	r8,r6[40]
800175ae:	f0 f9 0d 20 	ld.w	r9,r8[3360]
800175b2:	12 98       	mov	r8,r9
800175b4:	a3 78       	lsl	r8,0x3
800175b6:	12 18       	sub	r8,r9
800175b8:	2f f8       	sub	r8,-1
800175ba:	f0 09 15 02 	lsl	r9,r8,0x2
800175be:	ec f8 00 28 	ld.w	r8,r6[40]
800175c2:	f2 08 00 08 	add	r8,r9,r8
800175c6:	ee fb ff f8 	ld.w	r11,r7[-8]
800175ca:	10 9c       	mov	r12,r8
800175cc:	f0 16 00 92 	mcall	r6[584]
	param_set.parameters[param_set.param_count].data_type= MAVLINK_TYPE_UINT32_T;
800175d0:	ec f8 00 28 	ld.w	r8,r6[40]
800175d4:	f0 f9 0d 20 	ld.w	r9,r8[3360]
800175d8:	ec fa 00 28 	ld.w	r10,r6[40]
800175dc:	12 98       	mov	r8,r9
800175de:	a3 78       	lsl	r8,0x3
800175e0:	12 18       	sub	r8,r9
800175e2:	a3 68       	lsl	r8,0x2
800175e4:	f4 08 00 08 	add	r8,r10,r8
800175e8:	2e c8       	sub	r8,-20
800175ea:	30 59       	mov	r9,5
800175ec:	91 09       	st.w	r8[0x0],r9
    param_set.parameters[param_set.param_count].param_name_length = strlen(param_name);
800175ee:	ec f8 00 28 	ld.w	r8,r6[40]
800175f2:	f0 f5 0d 20 	ld.w	r5,r8[3360]
800175f6:	ee fc ff f8 	ld.w	r12,r7[-8]
800175fa:	f0 16 00 7c 	mcall	r6[496]
800175fe:	18 98       	mov	r8,r12
80017600:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80017604:	ec fa 00 28 	ld.w	r10,r6[40]
80017608:	0a 98       	mov	r8,r5
8001760a:	a3 78       	lsl	r8,0x3
8001760c:	0a 18       	sub	r8,r5
8001760e:	a3 68       	lsl	r8,0x2
80017610:	f4 08 00 08 	add	r8,r10,r8
80017614:	f0 ca ff e8 	sub	r10,r8,-24
80017618:	12 98       	mov	r8,r9
8001761a:	b4 88       	st.b	r10[0x0],r8
	param_set.parameters[param_set.param_count].schedule_for_transmission=true;
8001761c:	ec f8 00 28 	ld.w	r8,r6[40]
80017620:	f0 f9 0d 20 	ld.w	r9,r8[3360]
80017624:	ec fa 00 28 	ld.w	r10,r6[40]
80017628:	12 98       	mov	r8,r9
8001762a:	a3 78       	lsl	r8,0x3
8001762c:	12 18       	sub	r8,r9
8001762e:	a3 68       	lsl	r8,0x2
80017630:	f4 08 00 08 	add	r8,r10,r8
80017634:	f0 c9 ff e8 	sub	r9,r8,-24
80017638:	30 18       	mov	r8,1
8001763a:	b2 a8       	st.b	r9[0x2],r8
	param_set.param_count++;
8001763c:	ec f8 00 28 	ld.w	r8,r6[40]
80017640:	f0 f8 0d 20 	ld.w	r8,r8[3360]
80017644:	f0 c9 ff ff 	sub	r9,r8,-1
80017648:	ec f8 00 28 	ld.w	r8,r6[40]
8001764c:	f1 49 0d 20 	st.w	r8[3360],r9
}
80017650:	2f ed       	sub	sp,-8
80017652:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80017656:	00 00       	add	r0,r0
80017658:	80 01       	ld.sh	r1,r0[0x0]
8001765a:	74 06       	ld.w	r6,r10[0x0]

8001765c <add_parameter_int32>:

void add_parameter_int32(int32_t* val, const char* param_name) {
8001765c:	eb cd 40 e0 	pushm	r5-r7,lr
80017660:	1a 97       	mov	r7,sp
80017662:	20 2d       	sub	sp,8
80017664:	4b 66       	lddpc	r6,8001773c <add_parameter_int32+0xe0>
80017666:	1e 26       	rsub	r6,pc
80017668:	ef 4c ff fc 	st.w	r7[-4],r12
8001766c:	ef 4b ff f8 	st.w	r7[-8],r11
	param_set.parameters[param_set.param_count].param = val;
80017670:	ec f8 00 28 	ld.w	r8,r6[40]
80017674:	f0 f9 0d 20 	ld.w	r9,r8[3360]
80017678:	ee fa ff fc 	ld.w	r10,r7[-4]
8001767c:	ec fb 00 28 	ld.w	r11,r6[40]
80017680:	12 98       	mov	r8,r9
80017682:	a3 78       	lsl	r8,0x3
80017684:	12 18       	sub	r8,r9
80017686:	a3 68       	lsl	r8,0x2
80017688:	f6 08 00 08 	add	r8,r11,r8
8001768c:	91 0a       	st.w	r8[0x0],r10
	strcpy(param_set.parameters[param_set.param_count].param_name, param_name);
8001768e:	ec f8 00 28 	ld.w	r8,r6[40]
80017692:	f0 f9 0d 20 	ld.w	r9,r8[3360]
80017696:	12 98       	mov	r8,r9
80017698:	a3 78       	lsl	r8,0x3
8001769a:	12 18       	sub	r8,r9
8001769c:	2f f8       	sub	r8,-1
8001769e:	f0 09 15 02 	lsl	r9,r8,0x2
800176a2:	ec f8 00 28 	ld.w	r8,r6[40]
800176a6:	f2 08 00 08 	add	r8,r9,r8
800176aa:	ee fb ff f8 	ld.w	r11,r7[-8]
800176ae:	10 9c       	mov	r12,r8
800176b0:	f0 16 00 92 	mcall	r6[584]
	param_set.parameters[param_set.param_count].data_type = MAVLINK_TYPE_INT32_T;
800176b4:	ec f8 00 28 	ld.w	r8,r6[40]
800176b8:	f0 f9 0d 20 	ld.w	r9,r8[3360]
800176bc:	ec fa 00 28 	ld.w	r10,r6[40]
800176c0:	12 98       	mov	r8,r9
800176c2:	a3 78       	lsl	r8,0x3
800176c4:	12 18       	sub	r8,r9
800176c6:	a3 68       	lsl	r8,0x2
800176c8:	f4 08 00 08 	add	r8,r10,r8
800176cc:	2e c8       	sub	r8,-20
800176ce:	30 69       	mov	r9,6
800176d0:	91 09       	st.w	r8[0x0],r9
	param_set.parameters[param_set.param_count].param_name_length = strlen(param_name);
800176d2:	ec f8 00 28 	ld.w	r8,r6[40]
800176d6:	f0 f5 0d 20 	ld.w	r5,r8[3360]
800176da:	ee fc ff f8 	ld.w	r12,r7[-8]
800176de:	f0 16 00 7c 	mcall	r6[496]
800176e2:	18 98       	mov	r8,r12
800176e4:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800176e8:	ec fa 00 28 	ld.w	r10,r6[40]
800176ec:	0a 98       	mov	r8,r5
800176ee:	a3 78       	lsl	r8,0x3
800176f0:	0a 18       	sub	r8,r5
800176f2:	a3 68       	lsl	r8,0x2
800176f4:	f4 08 00 08 	add	r8,r10,r8
800176f8:	f0 ca ff e8 	sub	r10,r8,-24
800176fc:	12 98       	mov	r8,r9
800176fe:	b4 88       	st.b	r10[0x0],r8
	param_set.parameters[param_set.param_count].schedule_for_transmission=true;
80017700:	ec f8 00 28 	ld.w	r8,r6[40]
80017704:	f0 f9 0d 20 	ld.w	r9,r8[3360]
80017708:	ec fa 00 28 	ld.w	r10,r6[40]
8001770c:	12 98       	mov	r8,r9
8001770e:	a3 78       	lsl	r8,0x3
80017710:	12 18       	sub	r8,r9
80017712:	a3 68       	lsl	r8,0x2
80017714:	f4 08 00 08 	add	r8,r10,r8
80017718:	f0 c9 ff e8 	sub	r9,r8,-24
8001771c:	30 18       	mov	r8,1
8001771e:	b2 a8       	st.b	r9[0x2],r8
	param_set.param_count++;
80017720:	ec f8 00 28 	ld.w	r8,r6[40]
80017724:	f0 f8 0d 20 	ld.w	r8,r8[3360]
80017728:	f0 c9 ff ff 	sub	r9,r8,-1
8001772c:	ec f8 00 28 	ld.w	r8,r6[40]
80017730:	f1 49 0d 20 	st.w	r8[3360],r9
}
80017734:	2f ed       	sub	sp,-8
80017736:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8001773a:	00 00       	add	r0,r0
8001773c:	80 01       	ld.sh	r1,r0[0x0]
8001773e:	74 ea       	ld.w	r10,r10[0x38]

80017740 <add_parameter_float>:

void add_parameter_float(float* val, const char* param_name) {
80017740:	eb cd 40 e0 	pushm	r5-r7,lr
80017744:	1a 97       	mov	r7,sp
80017746:	20 2d       	sub	sp,8
80017748:	4b 66       	lddpc	r6,80017820 <add_parameter_float+0xe0>
8001774a:	1e 26       	rsub	r6,pc
8001774c:	ef 4c ff fc 	st.w	r7[-4],r12
80017750:	ef 4b ff f8 	st.w	r7[-8],r11
	param_set.parameters[param_set.param_count].param = val;
80017754:	ec f8 00 28 	ld.w	r8,r6[40]
80017758:	f0 f9 0d 20 	ld.w	r9,r8[3360]
8001775c:	ec fa 00 28 	ld.w	r10,r6[40]
80017760:	12 98       	mov	r8,r9
80017762:	a3 78       	lsl	r8,0x3
80017764:	12 18       	sub	r8,r9
80017766:	a3 68       	lsl	r8,0x2
80017768:	f4 08 00 08 	add	r8,r10,r8
8001776c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80017770:	91 09       	st.w	r8[0x0],r9
	strcpy(param_set.parameters[param_set.param_count].param_name, param_name);
80017772:	ec f8 00 28 	ld.w	r8,r6[40]
80017776:	f0 f9 0d 20 	ld.w	r9,r8[3360]
8001777a:	12 98       	mov	r8,r9
8001777c:	a3 78       	lsl	r8,0x3
8001777e:	12 18       	sub	r8,r9
80017780:	2f f8       	sub	r8,-1
80017782:	f0 09 15 02 	lsl	r9,r8,0x2
80017786:	ec f8 00 28 	ld.w	r8,r6[40]
8001778a:	f2 08 00 08 	add	r8,r9,r8
8001778e:	ee fb ff f8 	ld.w	r11,r7[-8]
80017792:	10 9c       	mov	r12,r8
80017794:	f0 16 00 92 	mcall	r6[584]
	param_set.parameters[param_set.param_count].data_type = MAVLINK_TYPE_FLOAT;
80017798:	ec f8 00 28 	ld.w	r8,r6[40]
8001779c:	f0 f9 0d 20 	ld.w	r9,r8[3360]
800177a0:	ec fa 00 28 	ld.w	r10,r6[40]
800177a4:	12 98       	mov	r8,r9
800177a6:	a3 78       	lsl	r8,0x3
800177a8:	12 18       	sub	r8,r9
800177aa:	a3 68       	lsl	r8,0x2
800177ac:	f4 08 00 08 	add	r8,r10,r8
800177b0:	2e c8       	sub	r8,-20
800177b2:	30 99       	mov	r9,9
800177b4:	91 09       	st.w	r8[0x0],r9
	param_set.parameters[param_set.param_count].param_name_length = strlen(param_name);
800177b6:	ec f8 00 28 	ld.w	r8,r6[40]
800177ba:	f0 f5 0d 20 	ld.w	r5,r8[3360]
800177be:	ee fc ff f8 	ld.w	r12,r7[-8]
800177c2:	f0 16 00 7c 	mcall	r6[496]
800177c6:	18 98       	mov	r8,r12
800177c8:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800177cc:	ec fa 00 28 	ld.w	r10,r6[40]
800177d0:	0a 98       	mov	r8,r5
800177d2:	a3 78       	lsl	r8,0x3
800177d4:	0a 18       	sub	r8,r5
800177d6:	a3 68       	lsl	r8,0x2
800177d8:	f4 08 00 08 	add	r8,r10,r8
800177dc:	f0 ca ff e8 	sub	r10,r8,-24
800177e0:	12 98       	mov	r8,r9
800177e2:	b4 88       	st.b	r10[0x0],r8
	param_set.parameters[param_set.param_count].schedule_for_transmission=true;
800177e4:	ec f8 00 28 	ld.w	r8,r6[40]
800177e8:	f0 f9 0d 20 	ld.w	r9,r8[3360]
800177ec:	ec fa 00 28 	ld.w	r10,r6[40]
800177f0:	12 98       	mov	r8,r9
800177f2:	a3 78       	lsl	r8,0x3
800177f4:	12 18       	sub	r8,r9
800177f6:	a3 68       	lsl	r8,0x2
800177f8:	f4 08 00 08 	add	r8,r10,r8
800177fc:	f0 c9 ff e8 	sub	r9,r8,-24
80017800:	30 18       	mov	r8,1
80017802:	b2 a8       	st.b	r9[0x2],r8
	param_set.param_count++;
80017804:	ec f8 00 28 	ld.w	r8,r6[40]
80017808:	f0 f8 0d 20 	ld.w	r8,r8[3360]
8001780c:	f0 c9 ff ff 	sub	r9,r8,-1
80017810:	ec f8 00 28 	ld.w	r8,r6[40]
80017814:	f1 49 0d 20 	st.w	r8[3360],r9
}
80017818:	2f ed       	sub	sp,-8
8001781a:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8001781e:	00 00       	add	r0,r0
80017820:	80 01       	ld.sh	r1,r0[0x0]
80017822:	75 ce       	ld.w	lr,r10[0x70]

80017824 <send_all_parameters>:

void send_all_parameters() {
80017824:	eb cd 40 c0 	pushm	r6-r7,lr
80017828:	1a 97       	mov	r7,sp
8001782a:	20 1d       	sub	sp,4
8001782c:	49 26       	lddpc	r6,80017874 <send_all_parameters+0x50>
8001782e:	1e 26       	rsub	r6,pc
	// schedule all parameters for transmission
	for (uint8_t i = 0; i < param_set.param_count; i++) {
80017830:	30 08       	mov	r8,0
80017832:	ef 68 ff ff 	st.b	r7[-1],r8
80017836:	c1 48       	rjmp	8001785e <send_all_parameters+0x3a>
		param_set.parameters[i].schedule_for_transmission=true;
80017838:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8001783c:	ec fa 00 28 	ld.w	r10,r6[40]
80017840:	12 98       	mov	r8,r9
80017842:	a3 78       	lsl	r8,0x3
80017844:	12 18       	sub	r8,r9
80017846:	a3 68       	lsl	r8,0x2
80017848:	f4 08 00 08 	add	r8,r10,r8
8001784c:	f0 c9 ff e8 	sub	r9,r8,-24
80017850:	30 18       	mov	r8,1
80017852:	b2 a8       	st.b	r9[0x2],r8
	param_set.param_count++;
}

void send_all_parameters() {
	// schedule all parameters for transmission
	for (uint8_t i = 0; i < param_set.param_count; i++) {
80017854:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80017858:	2f f8       	sub	r8,-1
8001785a:	ef 68 ff ff 	st.b	r7[-1],r8
8001785e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80017862:	ec f8 00 28 	ld.w	r8,r6[40]
80017866:	f0 f8 0d 20 	ld.w	r8,r8[3360]
8001786a:	10 39       	cp.w	r9,r8
8001786c:	ce 65       	brlt	80017838 <send_all_parameters+0x14>
		param_set.parameters[i].schedule_for_transmission=true;
	}		
}
8001786e:	2f fd       	sub	sp,-4
80017870:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80017874:	80 01       	ld.sh	r1,r0[0x0]
80017876:	76 b2       	ld.w	r2,r11[0x2c]

80017878 <send_all_parameters_now>:

void send_all_parameters_now() {
80017878:	eb cd 40 e0 	pushm	r5-r7,lr
8001787c:	1a 97       	mov	r7,sp
8001787e:	20 1d       	sub	sp,4
80017880:	4a d6       	lddpc	r6,80017934 <send_all_parameters_now+0xbc>
80017882:	1e 26       	rsub	r6,pc
	for (uint8_t i = 0; i < param_set.param_count; i++) {
80017884:	30 08       	mov	r8,0
80017886:	ef 68 ff ff 	st.b	r7[-1],r8
8001788a:	c4 a8       	rjmp	8001791e <send_all_parameters_now+0xa6>
		mavlink_msg_param_value_send(MAVLINK_COMM_0,
8001788c:	ef 35 ff ff 	ld.ub	r5,r7[-1]
										(int8_t*)param_set.parameters[i].param_name,
										*param_set.parameters[i].param,
										param_set.parameters[i].data_type,
										param_set.param_count,
80017890:	ec f8 00 28 	ld.w	r8,r6[40]
80017894:	f0 f8 0d 20 	ld.w	r8,r8[3360]
	}		
}

void send_all_parameters_now() {
	for (uint8_t i = 0; i < param_set.param_count; i++) {
		mavlink_msg_param_value_send(MAVLINK_COMM_0,
80017898:	5c 88       	casts.h	r8
8001789a:	fd d8 c0 10 	bfextu	lr,r8,0x0,0x10
										(int8_t*)param_set.parameters[i].param_name,
										*param_set.parameters[i].param,
										param_set.parameters[i].data_type,
8001789e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800178a2:	ec fa 00 28 	ld.w	r10,r6[40]
800178a6:	12 98       	mov	r8,r9
800178a8:	a3 78       	lsl	r8,0x3
800178aa:	12 18       	sub	r8,r9
800178ac:	a3 68       	lsl	r8,0x2
800178ae:	f4 08 00 08 	add	r8,r10,r8
800178b2:	2e c8       	sub	r8,-20
800178b4:	70 08       	ld.w	r8,r8[0x0]
	}		
}

void send_all_parameters_now() {
	for (uint8_t i = 0; i < param_set.param_count; i++) {
		mavlink_msg_param_value_send(MAVLINK_COMM_0,
800178b6:	5c 58       	castu.b	r8
800178b8:	10 9c       	mov	r12,r8
800178ba:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800178be:	ec fa 00 28 	ld.w	r10,r6[40]
800178c2:	12 98       	mov	r8,r9
800178c4:	a3 78       	lsl	r8,0x3
800178c6:	12 18       	sub	r8,r9
800178c8:	a3 68       	lsl	r8,0x2
800178ca:	f4 08 00 08 	add	r8,r10,r8
800178ce:	70 08       	ld.w	r8,r8[0x0]
800178d0:	70 0a       	ld.w	r10,r8[0x0]
800178d2:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800178d6:	12 98       	mov	r8,r9
800178d8:	a3 78       	lsl	r8,0x3
800178da:	12 18       	sub	r8,r9
800178dc:	2f f8       	sub	r8,-1
800178de:	f0 09 15 02 	lsl	r9,r8,0x2
800178e2:	ec f8 00 28 	ld.w	r8,r6[40]
800178e6:	f2 08 00 0b 	add	r11,r9,r8
800178ea:	1a d5       	st.w	--sp,r5
800178ec:	1c 98       	mov	r8,lr
800178ee:	18 99       	mov	r9,r12
800178f0:	30 0c       	mov	r12,0
800178f2:	fe b0 fc a1 	rcall	80017234 <mavlink_msg_param_value_send>
800178f6:	2f fd       	sub	sp,-4
										(int8_t*)param_set.parameters[i].param_name,
										*param_set.parameters[i].param,
										param_set.parameters[i].data_type,
										param_set.param_count,
										i);
		param_set.parameters[i].schedule_for_transmission=false;
800178f8:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800178fc:	ec fa 00 28 	ld.w	r10,r6[40]
80017900:	12 98       	mov	r8,r9
80017902:	a3 78       	lsl	r8,0x3
80017904:	12 18       	sub	r8,r9
80017906:	a3 68       	lsl	r8,0x2
80017908:	f4 08 00 08 	add	r8,r10,r8
8001790c:	f0 c9 ff e8 	sub	r9,r8,-24
80017910:	30 08       	mov	r8,0
80017912:	b2 a8       	st.b	r9[0x2],r8
		param_set.parameters[i].schedule_for_transmission=true;
	}		
}

void send_all_parameters_now() {
	for (uint8_t i = 0; i < param_set.param_count; i++) {
80017914:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80017918:	2f f8       	sub	r8,-1
8001791a:	ef 68 ff ff 	st.b	r7[-1],r8
8001791e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80017922:	ec f8 00 28 	ld.w	r8,r6[40]
80017926:	f0 f8 0d 20 	ld.w	r8,r8[3360]
8001792a:	10 39       	cp.w	r9,r8
8001792c:	cb 05       	brlt	8001788c <send_all_parameters_now+0x14>
										i);
		param_set.parameters[i].schedule_for_transmission=false;

	}

}
8001792e:	2f fd       	sub	sp,-4
80017930:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80017934:	80 01       	ld.sh	r1,r0[0x0]
80017936:	77 06       	ld.w	r6,r11[0x40]

80017938 <send_scheduled_parameters>:


void send_scheduled_parameters() {
80017938:	eb cd 40 e0 	pushm	r5-r7,lr
8001793c:	1a 97       	mov	r7,sp
8001793e:	20 1d       	sub	sp,4
80017940:	4b 56       	lddpc	r6,80017a14 <send_scheduled_parameters+0xdc>
80017942:	1e 26       	rsub	r6,pc
	for (uint8_t i = 0; i < param_set.param_count; i++) {
80017944:	30 08       	mov	r8,0
80017946:	ef 68 ff ff 	st.b	r7[-1],r8
8001794a:	c5 98       	rjmp	800179fc <send_scheduled_parameters+0xc4>
		if (param_set.parameters[i].schedule_for_transmission) {
8001794c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80017950:	ec fa 00 28 	ld.w	r10,r6[40]
80017954:	12 98       	mov	r8,r9
80017956:	a3 78       	lsl	r8,0x3
80017958:	12 18       	sub	r8,r9
8001795a:	a3 68       	lsl	r8,0x2
8001795c:	f4 08 00 08 	add	r8,r10,r8
80017960:	2e 88       	sub	r8,-24
80017962:	11 a8       	ld.ub	r8,r8[0x2]
80017964:	58 08       	cp.w	r8,0
80017966:	c4 60       	breq	800179f2 <send_scheduled_parameters+0xba>
			mavlink_msg_param_value_send(MAVLINK_COMM_0,
80017968:	ef 35 ff ff 	ld.ub	r5,r7[-1]
										(int8_t*)param_set.parameters[i].param_name,
										*param_set.parameters[i].param,
										param_set.parameters[i].data_type,
										param_set.param_count,
8001796c:	ec f8 00 28 	ld.w	r8,r6[40]
80017970:	f0 f8 0d 20 	ld.w	r8,r8[3360]


void send_scheduled_parameters() {
	for (uint8_t i = 0; i < param_set.param_count; i++) {
		if (param_set.parameters[i].schedule_for_transmission) {
			mavlink_msg_param_value_send(MAVLINK_COMM_0,
80017974:	5c 88       	casts.h	r8
80017976:	fd d8 c0 10 	bfextu	lr,r8,0x0,0x10
										(int8_t*)param_set.parameters[i].param_name,
										*param_set.parameters[i].param,
										param_set.parameters[i].data_type,
8001797a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8001797e:	ec fa 00 28 	ld.w	r10,r6[40]
80017982:	12 98       	mov	r8,r9
80017984:	a3 78       	lsl	r8,0x3
80017986:	12 18       	sub	r8,r9
80017988:	a3 68       	lsl	r8,0x2
8001798a:	f4 08 00 08 	add	r8,r10,r8
8001798e:	2e c8       	sub	r8,-20
80017990:	70 08       	ld.w	r8,r8[0x0]


void send_scheduled_parameters() {
	for (uint8_t i = 0; i < param_set.param_count; i++) {
		if (param_set.parameters[i].schedule_for_transmission) {
			mavlink_msg_param_value_send(MAVLINK_COMM_0,
80017992:	5c 58       	castu.b	r8
80017994:	10 9c       	mov	r12,r8
80017996:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8001799a:	ec fa 00 28 	ld.w	r10,r6[40]
8001799e:	12 98       	mov	r8,r9
800179a0:	a3 78       	lsl	r8,0x3
800179a2:	12 18       	sub	r8,r9
800179a4:	a3 68       	lsl	r8,0x2
800179a6:	f4 08 00 08 	add	r8,r10,r8
800179aa:	70 08       	ld.w	r8,r8[0x0]
800179ac:	70 0a       	ld.w	r10,r8[0x0]
800179ae:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800179b2:	12 98       	mov	r8,r9
800179b4:	a3 78       	lsl	r8,0x3
800179b6:	12 18       	sub	r8,r9
800179b8:	2f f8       	sub	r8,-1
800179ba:	f0 09 15 02 	lsl	r9,r8,0x2
800179be:	ec f8 00 28 	ld.w	r8,r6[40]
800179c2:	f2 08 00 0b 	add	r11,r9,r8
800179c6:	1a d5       	st.w	--sp,r5
800179c8:	1c 98       	mov	r8,lr
800179ca:	18 99       	mov	r9,r12
800179cc:	30 0c       	mov	r12,0
800179ce:	fe b0 fc 33 	rcall	80017234 <mavlink_msg_param_value_send>
800179d2:	2f fd       	sub	sp,-4
										(int8_t*)param_set.parameters[i].param_name,
										*param_set.parameters[i].param,
										param_set.parameters[i].data_type,
										param_set.param_count,
										i);
			param_set.parameters[i].schedule_for_transmission=false;
800179d4:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800179d8:	ec fa 00 28 	ld.w	r10,r6[40]
800179dc:	12 98       	mov	r8,r9
800179de:	a3 78       	lsl	r8,0x3
800179e0:	12 18       	sub	r8,r9
800179e2:	a3 68       	lsl	r8,0x2
800179e4:	f4 08 00 08 	add	r8,r10,r8
800179e8:	f0 c9 ff e8 	sub	r9,r8,-24
800179ec:	30 08       	mov	r8,0
800179ee:	b2 a8       	st.b	r9[0x2],r8
			return;
800179f0:	c0 e8       	rjmp	80017a0c <send_scheduled_parameters+0xd4>

}


void send_scheduled_parameters() {
	for (uint8_t i = 0; i < param_set.param_count; i++) {
800179f2:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800179f6:	2f f8       	sub	r8,-1
800179f8:	ef 68 ff ff 	st.b	r7[-1],r8
800179fc:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80017a00:	ec f8 00 28 	ld.w	r8,r6[40]
80017a04:	f0 f8 0d 20 	ld.w	r8,r8[3360]
80017a08:	10 39       	cp.w	r9,r8
80017a0a:	ca 15       	brlt	8001794c <send_scheduled_parameters+0x14>
			param_set.parameters[i].schedule_for_transmission=false;
			return;
		}			

	}
}
80017a0c:	2f fd       	sub	sp,-4
80017a0e:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80017a12:	00 00       	add	r0,r0
80017a14:	80 01       	ld.sh	r1,r0[0x0]
80017a16:	77 c6       	ld.w	r6,r11[0x70]

80017a18 <send_parameter>:


void send_parameter(mavlink_param_request_read_t* request) {
80017a18:	eb cd 40 c0 	pushm	r6-r7,lr
80017a1c:	1a 97       	mov	r7,sp
80017a1e:	20 4d       	sub	sp,16
80017a20:	4d 26       	lddpc	r6,80017b68 <send_parameter+0x150>
80017a22:	1e 26       	rsub	r6,pc
80017a24:	ef 4c ff f0 	st.w	r7[-16],r12
	if(request->param_index!=-1) {
80017a28:	ee f8 ff f0 	ld.w	r8,r7[-16]
80017a2c:	90 09       	ld.sh	r9,r8[0x0]
80017a2e:	3f f8       	mov	r8,-1
80017a30:	f0 09 19 00 	cp.h	r9,r8
80017a34:	c1 d0       	breq	80017a6e <send_parameter+0x56>
									(int8_t*)param_set.parameters[request->param_index].param_name,
									*param_set.parameters[request->param_index].param,
									param_set.parameters[request->param_index].data_type,
									param_set.param_count,
									request->param_index);*/
		if (request->param_index>param_set.param_count) return;
80017a36:	ee f8 ff f0 	ld.w	r8,r7[-16]
80017a3a:	90 08       	ld.sh	r8,r8[0x0]
80017a3c:	10 99       	mov	r9,r8
80017a3e:	ec f8 00 28 	ld.w	r8,r6[40]
80017a42:	f0 f8 0d 20 	ld.w	r8,r8[3360]
80017a46:	10 39       	cp.w	r9,r8
80017a48:	e0 89 00 8b 	brgt	80017b5e <send_parameter+0x146>
		param_set.parameters[request->param_index].schedule_for_transmission=true;
80017a4c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80017a50:	90 08       	ld.sh	r8,r8[0x0]
80017a52:	10 99       	mov	r9,r8
80017a54:	ec fa 00 28 	ld.w	r10,r6[40]
80017a58:	12 98       	mov	r8,r9
80017a5a:	a3 78       	lsl	r8,0x3
80017a5c:	12 18       	sub	r8,r9
80017a5e:	a3 68       	lsl	r8,0x2
80017a60:	f4 08 00 08 	add	r8,r10,r8
80017a64:	f0 c9 ff e8 	sub	r9,r8,-24
80017a68:	30 18       	mov	r8,1
80017a6a:	b2 a8       	st.b	r9[0x2],r8
80017a6c:	c7 a8       	rjmp	80017b60 <send_parameter+0x148>

	}
	else {
		char* key = (char*) request->param_id;		
80017a6e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80017a72:	2f c8       	sub	r8,-4
80017a74:	ef 48 ff f4 	st.w	r7[-12],r8
		for (uint16_t i = 0; i < param_set.param_count; i++) {
80017a78:	30 08       	mov	r8,0
80017a7a:	ef 58 ff fa 	st.h	r7[-6],r8
80017a7e:	c6 78       	rjmp	80017b4c <send_parameter+0x134>
			bool match = true;
80017a80:	30 18       	mov	r8,1
80017a82:	ef 68 ff fd 	st.b	r7[-3],r8
			for (uint16_t j = 0; j < param_set.parameters[i].param_name_length; j++) {
80017a86:	30 08       	mov	r8,0
80017a88:	ef 58 ff fe 	st.h	r7[-2],r8
80017a8c:	c3 38       	rjmp	80017af2 <send_parameter+0xda>
				// Compare
				if ((char)param_set.parameters[i].param_name[j] != (char)key[j]) {
80017a8e:	ef 19 ff fa 	ld.uh	r9,r7[-6]
80017a92:	ef 1a ff fe 	ld.uh	r10,r7[-2]
80017a96:	ec fb 00 28 	ld.w	r11,r6[40]
80017a9a:	12 98       	mov	r8,r9
80017a9c:	a3 78       	lsl	r8,0x3
80017a9e:	12 18       	sub	r8,r9
80017aa0:	a3 68       	lsl	r8,0x2
80017aa2:	f6 08 00 08 	add	r8,r11,r8
80017aa6:	14 08       	add	r8,r10
80017aa8:	2f c8       	sub	r8,-4
80017aaa:	11 89       	ld.ub	r9,r8[0x0]
80017aac:	ef 18 ff fe 	ld.uh	r8,r7[-2]
80017ab0:	ee fa ff f4 	ld.w	r10,r7[-12]
80017ab4:	f4 08 00 08 	add	r8,r10,r8
80017ab8:	11 88       	ld.ub	r8,r8[0x0]
80017aba:	f0 09 18 00 	cp.b	r9,r8
80017abe:	c0 40       	breq	80017ac6 <send_parameter+0xae>
					match = false;
80017ac0:	30 08       	mov	r8,0
80017ac2:	ef 68 ff fd 	st.b	r7[-3],r8
				}
 
				// End matching if null termination is reached
				if (((char)param_set.parameters[i].param_name[j]) == '\0') {
80017ac6:	ef 19 ff fa 	ld.uh	r9,r7[-6]
80017aca:	ef 1a ff fe 	ld.uh	r10,r7[-2]
80017ace:	ec fb 00 28 	ld.w	r11,r6[40]
80017ad2:	12 98       	mov	r8,r9
80017ad4:	a3 78       	lsl	r8,0x3
80017ad6:	12 18       	sub	r8,r9
80017ad8:	a3 68       	lsl	r8,0x2
80017ada:	f6 08 00 08 	add	r8,r11,r8
80017ade:	14 08       	add	r8,r10
80017ae0:	2f c8       	sub	r8,-4
80017ae2:	11 88       	ld.ub	r8,r8[0x0]
80017ae4:	58 08       	cp.w	r8,0
80017ae6:	c1 80       	breq	80017b16 <send_parameter+0xfe>
	}
	else {
		char* key = (char*) request->param_id;		
		for (uint16_t i = 0; i < param_set.param_count; i++) {
			bool match = true;
			for (uint16_t j = 0; j < param_set.parameters[i].param_name_length; j++) {
80017ae8:	ef 08 ff fe 	ld.sh	r8,r7[-2]
80017aec:	2f f8       	sub	r8,-1
80017aee:	ef 58 ff fe 	st.h	r7[-2],r8
80017af2:	ef 19 ff fa 	ld.uh	r9,r7[-6]
80017af6:	ec fa 00 28 	ld.w	r10,r6[40]
80017afa:	12 98       	mov	r8,r9
80017afc:	a3 78       	lsl	r8,0x3
80017afe:	12 18       	sub	r8,r9
80017b00:	a3 68       	lsl	r8,0x2
80017b02:	f4 08 00 08 	add	r8,r10,r8
80017b06:	2e 88       	sub	r8,-24
80017b08:	11 88       	ld.ub	r8,r8[0x0]
80017b0a:	ef 09 ff fe 	ld.sh	r9,r7[-2]
80017b0e:	f0 09 19 00 	cp.h	r9,r8
80017b12:	cb e3       	brcs	80017a8e <send_parameter+0x76>
80017b14:	c0 28       	rjmp	80017b18 <send_parameter+0x100>
					match = false;
				}
 
				// End matching if null termination is reached
				if (((char)param_set.parameters[i].param_name[j]) == '\0') {
					break;
80017b16:	d7 03       	nop
				}
			}
 
			// Check if matched
			if (match) {
80017b18:	ef 39 ff fd 	ld.ub	r9,r7[-3]
80017b1c:	30 08       	mov	r8,0
80017b1e:	f0 09 18 00 	cp.b	r9,r8
80017b22:	c1 00       	breq	80017b42 <send_parameter+0x12a>
				/*
				mavlink_msg_param_value_send(MAVLINK_COMM_0,
											(int8_t*)param_set.parameters[i].param_name,
											*param_set.parameters[i].param, param_set.parameters[i].data_type, 
											param_set.param_count, i);*/
				param_set.parameters[i].schedule_for_transmission=true;
80017b24:	ef 19 ff fa 	ld.uh	r9,r7[-6]
80017b28:	ec fa 00 28 	ld.w	r10,r6[40]
80017b2c:	12 98       	mov	r8,r9
80017b2e:	a3 78       	lsl	r8,0x3
80017b30:	12 18       	sub	r8,r9
80017b32:	a3 68       	lsl	r8,0x2
80017b34:	f4 08 00 08 	add	r8,r10,r8
80017b38:	f0 c9 ff e8 	sub	r9,r8,-24
80017b3c:	30 18       	mov	r8,1
80017b3e:	b2 a8       	st.b	r9[0x2],r8

				break;
80017b40:	c1 08       	rjmp	80017b60 <send_parameter+0x148>
		param_set.parameters[request->param_index].schedule_for_transmission=true;

	}
	else {
		char* key = (char*) request->param_id;		
		for (uint16_t i = 0; i < param_set.param_count; i++) {
80017b42:	ef 08 ff fa 	ld.sh	r8,r7[-6]
80017b46:	2f f8       	sub	r8,-1
80017b48:	ef 58 ff fa 	st.h	r7[-6],r8
80017b4c:	ef 19 ff fa 	ld.uh	r9,r7[-6]
80017b50:	ec f8 00 28 	ld.w	r8,r6[40]
80017b54:	f0 f8 0d 20 	ld.w	r8,r8[3360]
80017b58:	10 39       	cp.w	r9,r8
80017b5a:	c9 35       	brlt	80017a80 <send_parameter+0x68>
80017b5c:	c0 28       	rjmp	80017b60 <send_parameter+0x148>
									(int8_t*)param_set.parameters[request->param_index].param_name,
									*param_set.parameters[request->param_index].param,
									param_set.parameters[request->param_index].data_type,
									param_set.param_count,
									request->param_index);*/
		if (request->param_index>param_set.param_count) return;
80017b5e:	d7 03       	nop

				break;
			}					
		}
	}
}
80017b60:	2f cd       	sub	sp,-16
80017b62:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80017b66:	00 00       	add	r0,r0
80017b68:	80 01       	ld.sh	r1,r0[0x0]
80017b6a:	78 a6       	ld.w	r6,r12[0x28]

80017b6c <receive_parameter>:

void receive_parameter(Mavlink_Received_t* rec) {
80017b6c:	eb cd 40 c0 	pushm	r6-r7,lr
80017b70:	1a 97       	mov	r7,sp
80017b72:	20 ad       	sub	sp,40
80017b74:	4e 76       	lddpc	r6,80017d10 <receive_parameter+0x1a4>
80017b76:	1e 26       	rsub	r6,pc
80017b78:	ef 4c ff d8 	st.w	r7[-40],r12
	mavlink_param_set_t set;
	mavlink_msg_param_set_decode(&rec->msg, &set);
80017b7c:	ee f8 ff d8 	ld.w	r8,r7[-40]
80017b80:	ee c9 00 24 	sub	r9,r7,36
80017b84:	12 9b       	mov	r11,r9
80017b86:	10 9c       	mov	r12,r8
80017b88:	fe b0 fb f9 	rcall	8001737a <mavlink_msg_param_set_decode>
 
	// Check if this message is for this system and subsystem
	if ((uint8_t)set.target_system == (uint8_t)mavlink_system.sysid
	&& (uint8_t)set.target_component == (uint8_t)mavlink_system.compid) {
80017b8c:	ef 39 ff e0 	ld.ub	r9,r7[-32]
80017b90:	ec f8 00 74 	ld.w	r8,r6[116]
80017b94:	11 88       	ld.ub	r8,r8[0x0]
void receive_parameter(Mavlink_Received_t* rec) {
	mavlink_param_set_t set;
	mavlink_msg_param_set_decode(&rec->msg, &set);
 
	// Check if this message is for this system and subsystem
	if ((uint8_t)set.target_system == (uint8_t)mavlink_system.sysid
80017b96:	f0 09 18 00 	cp.b	r9,r8
80017b9a:	e0 81 00 b7 	brne	80017d08 <receive_parameter+0x19c>
	&& (uint8_t)set.target_component == (uint8_t)mavlink_system.compid) {
80017b9e:	ef 39 ff e1 	ld.ub	r9,r7[-31]
80017ba2:	ec f8 00 74 	ld.w	r8,r6[116]
80017ba6:	11 98       	ld.ub	r8,r8[0x1]
void receive_parameter(Mavlink_Received_t* rec) {
	mavlink_param_set_t set;
	mavlink_msg_param_set_decode(&rec->msg, &set);
 
	// Check if this message is for this system and subsystem
	if ((uint8_t)set.target_system == (uint8_t)mavlink_system.sysid
80017ba8:	f0 09 18 00 	cp.b	r9,r8
80017bac:	e0 81 00 ae 	brne	80017d08 <receive_parameter+0x19c>
	&& (uint8_t)set.target_component == (uint8_t)mavlink_system.compid) {
		char* key = (char*) set.param_id;
80017bb0:	ee c8 00 24 	sub	r8,r7,36
80017bb4:	2f a8       	sub	r8,-6
80017bb6:	ef 48 ff f4 	st.w	r7[-12],r8
				
		for (uint16_t i = 0; i < param_set.param_count; i++) {
80017bba:	30 08       	mov	r8,0
80017bbc:	ef 58 ff fa 	st.h	r7[-6],r8
80017bc0:	c9 78       	rjmp	80017cee <receive_parameter+0x182>
			bool match = true;
80017bc2:	30 18       	mov	r8,1
80017bc4:	ef 68 ff fd 	st.b	r7[-3],r8
			for (uint16_t j = 0; j < param_set.parameters[i].param_name_length; j++) {
80017bc8:	30 08       	mov	r8,0
80017bca:	ef 58 ff fe 	st.h	r7[-2],r8
80017bce:	c3 38       	rjmp	80017c34 <receive_parameter+0xc8>
				// Compare
				if ((char)param_set.parameters[i].param_name[j] != (char)key[j]) {
80017bd0:	ef 19 ff fa 	ld.uh	r9,r7[-6]
80017bd4:	ef 1a ff fe 	ld.uh	r10,r7[-2]
80017bd8:	ec fb 00 28 	ld.w	r11,r6[40]
80017bdc:	12 98       	mov	r8,r9
80017bde:	a3 78       	lsl	r8,0x3
80017be0:	12 18       	sub	r8,r9
80017be2:	a3 68       	lsl	r8,0x2
80017be4:	f6 08 00 08 	add	r8,r11,r8
80017be8:	14 08       	add	r8,r10
80017bea:	2f c8       	sub	r8,-4
80017bec:	11 89       	ld.ub	r9,r8[0x0]
80017bee:	ef 18 ff fe 	ld.uh	r8,r7[-2]
80017bf2:	ee fa ff f4 	ld.w	r10,r7[-12]
80017bf6:	f4 08 00 08 	add	r8,r10,r8
80017bfa:	11 88       	ld.ub	r8,r8[0x0]
80017bfc:	f0 09 18 00 	cp.b	r9,r8
80017c00:	c0 40       	breq	80017c08 <receive_parameter+0x9c>
					match = false;
80017c02:	30 08       	mov	r8,0
80017c04:	ef 68 ff fd 	st.b	r7[-3],r8
				}
		
				// End matching if null termination is reached
				if (((char)param_set.parameters[i].param_name[j]) == '\0') {
80017c08:	ef 19 ff fa 	ld.uh	r9,r7[-6]
80017c0c:	ef 1a ff fe 	ld.uh	r10,r7[-2]
80017c10:	ec fb 00 28 	ld.w	r11,r6[40]
80017c14:	12 98       	mov	r8,r9
80017c16:	a3 78       	lsl	r8,0x3
80017c18:	12 18       	sub	r8,r9
80017c1a:	a3 68       	lsl	r8,0x2
80017c1c:	f6 08 00 08 	add	r8,r11,r8
80017c20:	14 08       	add	r8,r10
80017c22:	2f c8       	sub	r8,-4
80017c24:	11 88       	ld.ub	r8,r8[0x0]
80017c26:	58 08       	cp.w	r8,0
80017c28:	c1 80       	breq	80017c58 <receive_parameter+0xec>
	&& (uint8_t)set.target_component == (uint8_t)mavlink_system.compid) {
		char* key = (char*) set.param_id;
				
		for (uint16_t i = 0; i < param_set.param_count; i++) {
			bool match = true;
			for (uint16_t j = 0; j < param_set.parameters[i].param_name_length; j++) {
80017c2a:	ef 08 ff fe 	ld.sh	r8,r7[-2]
80017c2e:	2f f8       	sub	r8,-1
80017c30:	ef 58 ff fe 	st.h	r7[-2],r8
80017c34:	ef 19 ff fa 	ld.uh	r9,r7[-6]
80017c38:	ec fa 00 28 	ld.w	r10,r6[40]
80017c3c:	12 98       	mov	r8,r9
80017c3e:	a3 78       	lsl	r8,0x3
80017c40:	12 18       	sub	r8,r9
80017c42:	a3 68       	lsl	r8,0x2
80017c44:	f4 08 00 08 	add	r8,r10,r8
80017c48:	2e 88       	sub	r8,-24
80017c4a:	11 88       	ld.ub	r8,r8[0x0]
80017c4c:	ef 09 ff fe 	ld.sh	r9,r7[-2]
80017c50:	f0 09 19 00 	cp.h	r9,r8
80017c54:	cb e3       	brcs	80017bd0 <receive_parameter+0x64>
80017c56:	c0 28       	rjmp	80017c5a <receive_parameter+0xee>
					match = false;
				}
		
				// End matching if null termination is reached
				if (((char)param_set.parameters[i].param_name[j]) == '\0') {
					break;
80017c58:	d7 03       	nop
				}
			}
 
			// Check if matched
			if (match) {
80017c5a:	ef 39 ff fd 	ld.ub	r9,r7[-3]
80017c5e:	30 08       	mov	r8,0
80017c60:	f0 09 18 00 	cp.b	r9,r8
80017c64:	c4 00       	breq	80017ce4 <receive_parameter+0x178>
				// Only write and emit changes if there is actually a difference
				if (*param_set.parameters[i].param != set.param_value && set.param_type == param_set.parameters[i].data_type) {
80017c66:	ef 19 ff fa 	ld.uh	r9,r7[-6]
80017c6a:	ec fa 00 28 	ld.w	r10,r6[40]
80017c6e:	12 98       	mov	r8,r9
80017c70:	a3 78       	lsl	r8,0x3
80017c72:	12 18       	sub	r8,r9
80017c74:	a3 68       	lsl	r8,0x2
80017c76:	f4 08 00 08 	add	r8,r10,r8
80017c7a:	70 08       	ld.w	r8,r8[0x0]
80017c7c:	70 09       	ld.w	r9,r8[0x0]
80017c7e:	ee f8 ff dc 	ld.w	r8,r7[-36]
80017c82:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
80017c86:	c3 e0       	breq	80017d02 <receive_parameter+0x196>
80017c88:	ef 38 ff f2 	ld.ub	r8,r7[-14]
80017c8c:	10 9a       	mov	r10,r8
80017c8e:	ef 19 ff fa 	ld.uh	r9,r7[-6]
80017c92:	ec fb 00 28 	ld.w	r11,r6[40]
80017c96:	12 98       	mov	r8,r9
80017c98:	a3 78       	lsl	r8,0x3
80017c9a:	12 18       	sub	r8,r9
80017c9c:	a3 68       	lsl	r8,0x2
80017c9e:	f6 08 00 08 	add	r8,r11,r8
80017ca2:	2e c8       	sub	r8,-20
80017ca4:	70 08       	ld.w	r8,r8[0x0]
80017ca6:	10 3a       	cp.w	r10,r8
80017ca8:	c2 f1       	brne	80017d06 <receive_parameter+0x19a>
					*param_set.parameters[i].param = set.param_value;
80017caa:	ef 19 ff fa 	ld.uh	r9,r7[-6]
80017cae:	ec fa 00 28 	ld.w	r10,r6[40]
80017cb2:	12 98       	mov	r8,r9
80017cb4:	a3 78       	lsl	r8,0x3
80017cb6:	12 18       	sub	r8,r9
80017cb8:	a3 68       	lsl	r8,0x2
80017cba:	f4 08 00 08 	add	r8,r10,r8
80017cbe:	70 08       	ld.w	r8,r8[0x0]
80017cc0:	ee f9 ff dc 	ld.w	r9,r7[-36]
80017cc4:	91 09       	st.w	r8[0x0],r9
//					mavlink_msg_param_value_send(MAVLINK_COMM_0,
//												(int8_t*)param_set.parameters[i].param_name,
//												*param_set.parameters[i].param, param_set.parameters[i].data_type, 
//												param_set.param_count, i);
					// schedule parameter for transmission downstream
					param_set.parameters[i].schedule_for_transmission=true;
80017cc6:	ef 19 ff fa 	ld.uh	r9,r7[-6]
80017cca:	ec fa 00 28 	ld.w	r10,r6[40]
80017cce:	12 98       	mov	r8,r9
80017cd0:	a3 78       	lsl	r8,0x3
80017cd2:	12 18       	sub	r8,r9
80017cd4:	a3 68       	lsl	r8,0x2
80017cd6:	f4 08 00 08 	add	r8,r10,r8
80017cda:	f0 c9 ff e8 	sub	r9,r8,-24
80017cde:	30 18       	mov	r8,1
80017ce0:	b2 a8       	st.b	r9[0x2],r8
				}
				break;
80017ce2:	c1 38       	rjmp	80017d08 <receive_parameter+0x19c>
	// Check if this message is for this system and subsystem
	if ((uint8_t)set.target_system == (uint8_t)mavlink_system.sysid
	&& (uint8_t)set.target_component == (uint8_t)mavlink_system.compid) {
		char* key = (char*) set.param_id;
				
		for (uint16_t i = 0; i < param_set.param_count; i++) {
80017ce4:	ef 08 ff fa 	ld.sh	r8,r7[-6]
80017ce8:	2f f8       	sub	r8,-1
80017cea:	ef 58 ff fa 	st.h	r7[-6],r8
80017cee:	ef 19 ff fa 	ld.uh	r9,r7[-6]
80017cf2:	ec f8 00 28 	ld.w	r8,r6[40]
80017cf6:	f0 f8 0d 20 	ld.w	r8,r8[3360]
80017cfa:	10 39       	cp.w	r9,r8
80017cfc:	fe 95 ff 63 	brlt	80017bc2 <receive_parameter+0x56>
80017d00:	c0 48       	rjmp	80017d08 <receive_parameter+0x19c>
//												*param_set.parameters[i].param, param_set.parameters[i].data_type, 
//												param_set.param_count, i);
					// schedule parameter for transmission downstream
					param_set.parameters[i].schedule_for_transmission=true;
				}
				break;
80017d02:	d7 03       	nop
80017d04:	c0 28       	rjmp	80017d08 <receive_parameter+0x19c>
80017d06:	d7 03       	nop
			}
		}
	}
}
80017d08:	2f 6d       	sub	sp,-40
80017d0a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80017d0e:	00 00       	add	r0,r0
80017d10:	80 01       	ld.sh	r1,r0[0x0]
80017d12:	79 fa       	ld.w	r10,r12[0x7c]
80017d14:	46 6c       	lddsp	r12,sp[0x198]
80017d16:	61 73       	ld.w	r3,r0[0x5c]
80017d18:	68 20       	ld.w	r0,r4[0x8]
80017d1a:	72 65       	ld.w	r5,r9[0x18]
80017d1c:	61 64       	ld.w	r4,r0[0x58]
80017d1e:	20 73       	sub	r3,7
80017d20:	75 63       	ld.w	r3,r10[0x58]
80017d22:	63 65       	ld.w	r5,r1[0x58]
80017d24:	73 73       	ld.w	r3,r9[0x5c]
80017d26:	66 75       	ld.w	r5,r3[0x1c]
80017d28:	6c 21       	ld.w	r1,r6[0x8]
80017d2a:	20 4e       	sub	lr,4
80017d2c:	65 77       	ld.w	r7,r2[0x5c]
80017d2e:	20 50       	sub	r0,5
80017d30:	61 72       	ld.w	r2,r0[0x5c]
80017d32:	61 6d       	ld.w	sp,r0[0x58]
80017d34:	65 74       	ld.w	r4,r2[0x5c]
80017d36:	65 72       	ld.w	r2,r2[0x5c]
80017d38:	73 20       	ld.w	r0,r9[0x48]
80017d3a:	69 6e       	ld.w	lr,r4[0x58]
80017d3c:	73 65       	ld.w	r5,r9[0x58]
80017d3e:	72 74       	ld.w	r4,r9[0x1c]
80017d40:	65 64       	ld.w	r4,r2[0x58]
80017d42:	2e 20       	sub	r0,-30
80017d44:	0a 00       	add	r0,r5
80017d46:	00 00       	add	r0,r0
80017d48:	46 6c       	lddsp	r12,sp[0x198]
80017d4a:	61 73       	ld.w	r3,r0[0x5c]
80017d4c:	68 20       	ld.w	r0,r4[0x8]
80017d4e:	6d 65       	ld.w	r5,r6[0x58]
80017d50:	6d 6f       	ld.w	pc,r6[0x58]
80017d52:	72 79       	ld.w	r9,r9[0x1c]
80017d54:	20 63       	sub	r3,6
80017d56:	6f 72       	ld.w	r2,r7[0x5c]
80017d58:	72 75       	ld.w	r5,r9[0x1c]
80017d5a:	70 74       	ld.w	r4,r8[0x1c]
80017d5c:	65 64       	ld.w	r4,r2[0x58]
80017d5e:	21 20       	sub	r0,18
80017d60:	48 61       	lddpc	r1,80017d78 <receive_parameter+0x20c>
80017d62:	72 64       	ld.w	r4,r9[0x18]
80017d64:	63 6f       	ld.w	pc,r1[0x58]
80017d66:	64 65       	ld.w	r5,r2[0x18]
80017d68:	64 20       	ld.w	r0,r2[0x8]
80017d6a:	76 61       	ld.w	r1,r11[0x18]
80017d6c:	6c 75       	ld.w	r5,r6[0x1c]
80017d6e:	65 73       	ld.w	r3,r2[0x5c]
80017d70:	20 74       	sub	r4,7
80017d72:	61 6b       	ld.w	r11,r0[0x58]
80017d74:	65 6e       	ld.w	lr,r2[0x58]
80017d76:	2e 0a       	sub	r10,-32
	...

80017d7a <read_parameters_from_flashc>:

void read_parameters_from_flashc()
{
80017d7a:	eb cd 40 c0 	pushm	r6-r7,lr
80017d7e:	1a 97       	mov	r7,sp
80017d80:	fa cd 01 f8 	sub	sp,sp,504
80017d84:	4d 06       	lddpc	r6,80017ec4 <read_parameters_from_flashc+0x14a>
80017d86:	1e 26       	rsub	r6,pc
	uint8_t i;
	nvram_array = AVR32_FLASHC_USER_PAGE_ADDRESS + 0x04;
80017d88:	ec f8 01 74 	ld.w	r8,r6[372]
80017d8c:	30 49       	mov	r9,4
80017d8e:	ea 19 80 80 	orh	r9,0x8080
80017d92:	91 09       	st.w	r8[0x0],r9
	
	nvram_data_ttt local_array;
	
	float cksum1, cksum2;
	cksum1 = 0;
80017d94:	30 08       	mov	r8,0
80017d96:	ef 48 ff f8 	st.w	r7[-8],r8
	cksum2 = 0;
80017d9a:	30 08       	mov	r8,0
80017d9c:	ef 48 ff fc 	st.w	r7[-4],r8
	
	for (i=0;i<(param_set.param_count+1);i++)
80017da0:	30 08       	mov	r8,0
80017da2:	ef 68 ff f7 	st.b	r7[-9],r8
80017da6:	c2 98       	rjmp	80017df8 <read_parameters_from_flashc+0x7e>
	{
		local_array.values[i] = nvram_array->values[i];
80017da8:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80017dac:	ec f9 01 74 	ld.w	r9,r6[372]
80017db0:	72 09       	ld.w	r9,r9[0x0]
80017db2:	ef 3a ff f7 	ld.ub	r10,r7[-9]
80017db6:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
80017dba:	a3 68       	lsl	r8,0x2
80017dbc:	ee 08 00 08 	add	r8,r7,r8
80017dc0:	f1 49 fe 08 	st.w	r8[-504],r9
		cksum1 += local_array.values[i];
80017dc4:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80017dc8:	a3 68       	lsl	r8,0x2
80017dca:	ee 08 00 08 	add	r8,r7,r8
80017dce:	f0 f8 fe 08 	ld.w	r8,r8[-504]
80017dd2:	ee f9 ff f8 	ld.w	r9,r7[-8]
80017dd6:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80017dda:	ef 48 ff f8 	st.w	r7[-8],r8
		cksum2 += cksum1;
80017dde:	ee f9 ff fc 	ld.w	r9,r7[-4]
80017de2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80017de6:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80017dea:	ef 48 ff fc 	st.w	r7[-4],r8
	
	float cksum1, cksum2;
	cksum1 = 0;
	cksum2 = 0;
	
	for (i=0;i<(param_set.param_count+1);i++)
80017dee:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80017df2:	2f f8       	sub	r8,-1
80017df4:	ef 68 ff f7 	st.b	r7[-9],r8
80017df8:	ef 39 ff f7 	ld.ub	r9,r7[-9]
80017dfc:	ec f8 00 28 	ld.w	r8,r6[40]
80017e00:	f0 f8 0d 20 	ld.w	r8,r8[3360]
80017e04:	2f f8       	sub	r8,-1
80017e06:	10 39       	cp.w	r9,r8
80017e08:	cd 05       	brlt	80017da8 <read_parameters_from_flashc+0x2e>
		local_array.values[i] = nvram_array->values[i];
		cksum1 += local_array.values[i];
		cksum2 += cksum1;
	}
	
	if ((param_set.param_count==local_array.values[0])&&(cksum1 == nvram_array->values[param_set.param_count+1])&&(cksum2 == nvram_array->values[param_set.param_count+2]))
80017e0a:	ec f8 00 28 	ld.w	r8,r6[40]
80017e0e:	f0 f8 0d 20 	ld.w	r8,r8[3360]
80017e12:	e5 a6 09 08 	cop	cp0,cr9,cr0,cr8,0x4c
80017e16:	ee f8 fe 08 	ld.w	r8,r7[-504]
80017e1a:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
80017e1e:	c4 b1       	brne	80017eb4 <read_parameters_from_flashc+0x13a>
80017e20:	ec f8 01 74 	ld.w	r8,r6[372]
80017e24:	70 08       	ld.w	r8,r8[0x0]
80017e26:	ec f9 00 28 	ld.w	r9,r6[40]
80017e2a:	f2 f9 0d 20 	ld.w	r9,r9[3360]
80017e2e:	2f f9       	sub	r9,-1
80017e30:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80017e34:	ee f8 ff f8 	ld.w	r8,r7[-8]
80017e38:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
80017e3c:	c3 c1       	brne	80017eb4 <read_parameters_from_flashc+0x13a>
80017e3e:	ec f8 01 74 	ld.w	r8,r6[372]
80017e42:	70 08       	ld.w	r8,r8[0x0]
80017e44:	ec f9 00 28 	ld.w	r9,r6[40]
80017e48:	f2 f9 0d 20 	ld.w	r9,r9[3360]
80017e4c:	2f e9       	sub	r9,-2
80017e4e:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80017e52:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017e56:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
80017e5a:	c2 d1       	brne	80017eb4 <read_parameters_from_flashc+0x13a>
	{
		dbg_print("Flash read successful! New Parameters inserted. \n");
80017e5c:	fe cc 01 48 	sub	r12,pc,328
80017e60:	f0 16 00 01 	mcall	r6[4]
		for (i=1;i<(param_set.param_count+1);i++)
80017e64:	30 18       	mov	r8,1
80017e66:	ef 68 ff f7 	st.b	r7[-9],r8
80017e6a:	c1 b8       	rjmp	80017ea0 <read_parameters_from_flashc+0x126>
		{
			*param_set.parameters[i-1].param = local_array.values[i];
80017e6c:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80017e70:	f0 c9 00 01 	sub	r9,r8,1
80017e74:	ec fa 00 28 	ld.w	r10,r6[40]
80017e78:	12 98       	mov	r8,r9
80017e7a:	a3 78       	lsl	r8,0x3
80017e7c:	12 18       	sub	r8,r9
80017e7e:	a3 68       	lsl	r8,0x2
80017e80:	f4 08 00 08 	add	r8,r10,r8
80017e84:	70 09       	ld.w	r9,r8[0x0]
80017e86:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80017e8a:	a3 68       	lsl	r8,0x2
80017e8c:	ee 08 00 08 	add	r8,r7,r8
80017e90:	f0 f8 fe 08 	ld.w	r8,r8[-504]
80017e94:	93 08       	st.w	r9[0x0],r8
	}
	
	if ((param_set.param_count==local_array.values[0])&&(cksum1 == nvram_array->values[param_set.param_count+1])&&(cksum2 == nvram_array->values[param_set.param_count+2]))
	{
		dbg_print("Flash read successful! New Parameters inserted. \n");
		for (i=1;i<(param_set.param_count+1);i++)
80017e96:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80017e9a:	2f f8       	sub	r8,-1
80017e9c:	ef 68 ff f7 	st.b	r7[-9],r8
80017ea0:	ef 39 ff f7 	ld.ub	r9,r7[-9]
80017ea4:	ec f8 00 28 	ld.w	r8,r6[40]
80017ea8:	f0 f8 0d 20 	ld.w	r8,r8[3360]
80017eac:	2f f8       	sub	r8,-1
80017eae:	10 39       	cp.w	r9,r8
80017eb0:	cd e5       	brlt	80017e6c <read_parameters_from_flashc+0xf2>
		local_array.values[i] = nvram_array->values[i];
		cksum1 += local_array.values[i];
		cksum2 += cksum1;
	}
	
	if ((param_set.param_count==local_array.values[0])&&(cksum1 == nvram_array->values[param_set.param_count+1])&&(cksum2 == nvram_array->values[param_set.param_count+2]))
80017eb2:	c0 58       	rjmp	80017ebc <read_parameters_from_flashc+0x142>
		for (i=1;i<(param_set.param_count+1);i++)
		{
			*param_set.parameters[i-1].param = local_array.values[i];
		}
	}else{
		dbg_print("Flash memory corrupted! Hardcoded values taken.\n");
80017eb4:	fe cc 01 6c 	sub	r12,pc,364
80017eb8:	f0 16 00 01 	mcall	r6[4]
	}
}
80017ebc:	28 2d       	sub	sp,-504
80017ebe:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80017ec2:	00 00       	add	r0,r0
80017ec4:	80 01       	ld.sh	r1,r0[0x0]
80017ec6:	7c 0a       	ld.w	r10,lr[0x0]
80017ec8:	42 65       	lddsp	r5,sp[0x98]
80017eca:	67 69       	ld.w	r9,r3[0x58]
80017ecc:	6e 20       	ld.w	r0,r7[0x8]
80017ece:	77 72       	ld.w	r2,r11[0x5c]
80017ed0:	69 74       	ld.w	r4,r4[0x5c]
80017ed2:	65 20       	ld.w	r0,r2[0x48]
80017ed4:	74 6f       	ld.w	pc,r10[0x18]
80017ed6:	20 66       	sub	r6,6
80017ed8:	6c 61       	ld.w	r1,r6[0x18]
80017eda:	73 68       	ld.w	r8,r9[0x58]
80017edc:	63 2e       	ld.w	lr,r1[0x48]
80017ede:	2e 2e       	sub	lr,-30
80017ee0:	0a 00       	add	r0,r5
80017ee2:	00 00       	add	r0,r0
80017ee4:	57 72       	stdsp	sp[0x1dc],r2
80017ee6:	69 74       	ld.w	r4,r4[0x5c]
80017ee8:	65 20       	ld.w	r0,r2[0x48]
80017eea:	74 6f       	ld.w	pc,r10[0x18]
80017eec:	20 66       	sub	r6,6
80017eee:	61 6c       	ld.w	r12,r0[0x58]
80017ef0:	73 68       	ld.w	r8,r9[0x58]
80017ef2:	63 20       	ld.w	r0,r1[0x48]
80017ef4:	63 6f       	ld.w	pc,r1[0x58]
80017ef6:	6d 70       	ld.w	r0,r6[0x5c]
80017ef8:	6c 65       	ld.w	r5,r6[0x18]
80017efa:	74 65       	ld.w	r5,r10[0x18]
80017efc:	64 2e       	ld.w	lr,r2[0x8]
80017efe:	0a 00       	add	r0,r5

80017f00 <write_parameters_to_flashc>:

void write_parameters_to_flashc()
{
80017f00:	eb cd 40 c0 	pushm	r6-r7,lr
80017f04:	1a 97       	mov	r7,sp
80017f06:	fa cd 01 f8 	sub	sp,sp,504
80017f0a:	4c 96       	lddpc	r6,8001802c <write_parameters_to_flashc+0x12c>
80017f0c:	1e 26       	rsub	r6,pc
	float cksum1, cksum2;
	cksum1 = 0;
80017f0e:	30 08       	mov	r8,0
80017f10:	ef 48 ff f4 	st.w	r7[-12],r8
	cksum2 = 0;
80017f14:	30 08       	mov	r8,0
80017f16:	ef 48 ff f8 	st.w	r7[-8],r8

	uint8_t i;
	nvram_array = AVR32_FLASHC_USER_PAGE_ADDRESS + 0x04;
80017f1a:	ec f8 01 74 	ld.w	r8,r6[372]
80017f1e:	30 49       	mov	r9,4
80017f20:	ea 19 80 80 	orh	r9,0x8080
80017f24:	91 09       	st.w	r8[0x0],r9
	
	nvram_data_ttt local_array;
	
	local_array.values[0] = param_set.param_count;
80017f26:	ec f8 00 28 	ld.w	r8,r6[40]
80017f2a:	f0 f8 0d 20 	ld.w	r8,r8[3360]
80017f2e:	e5 a6 08 08 	cop	cp0,cr8,cr0,cr8,0x4c
80017f32:	ef 48 fe 08 	st.w	r7[-504],r8
	cksum1 += local_array.values[0];
80017f36:	ee f8 fe 08 	ld.w	r8,r7[-504]
80017f3a:	ee f9 ff f4 	ld.w	r9,r7[-12]
80017f3e:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80017f42:	ef 48 ff f4 	st.w	r7[-12],r8
	cksum2 += cksum1;
80017f46:	ee f9 ff f8 	ld.w	r9,r7[-8]
80017f4a:	ee f8 ff f4 	ld.w	r8,r7[-12]
80017f4e:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80017f52:	ef 48 ff f8 	st.w	r7[-8],r8
	
	dbg_print("Begin write to flashc...\n");
80017f56:	fe cc 00 8e 	sub	r12,pc,142
80017f5a:	f0 16 00 01 	mcall	r6[4]
	
	for (i=1;i<(param_set.param_count+1);i++)
80017f5e:	30 18       	mov	r8,1
80017f60:	ef 68 ff ff 	st.b	r7[-1],r8
80017f64:	c3 18       	rjmp	80017fc6 <write_parameters_to_flashc+0xc6>
	{
		//flashc_memcpy((void *)&(nvram_array->values[i]),   param_set.parameters[i].param, sizeof((nvram_array->values[i])),   true);
		local_array.values[i] = *param_set.parameters[i-1].param;
80017f66:	ef 3a ff ff 	ld.ub	r10,r7[-1]
80017f6a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80017f6e:	f0 c9 00 01 	sub	r9,r8,1
80017f72:	ec fb 00 28 	ld.w	r11,r6[40]
80017f76:	12 98       	mov	r8,r9
80017f78:	a3 78       	lsl	r8,0x3
80017f7a:	12 18       	sub	r8,r9
80017f7c:	a3 68       	lsl	r8,0x2
80017f7e:	f6 08 00 08 	add	r8,r11,r8
80017f82:	70 08       	ld.w	r8,r8[0x0]
80017f84:	70 09       	ld.w	r9,r8[0x0]
80017f86:	f4 08 15 02 	lsl	r8,r10,0x2
80017f8a:	ee 08 00 08 	add	r8,r7,r8
80017f8e:	f1 49 fe 08 	st.w	r8[-504],r9
		cksum1 += local_array.values[i];
80017f92:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80017f96:	a3 68       	lsl	r8,0x2
80017f98:	ee 08 00 08 	add	r8,r7,r8
80017f9c:	f0 f8 fe 08 	ld.w	r8,r8[-504]
80017fa0:	ee f9 ff f4 	ld.w	r9,r7[-12]
80017fa4:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80017fa8:	ef 48 ff f4 	st.w	r7[-12],r8
		cksum2 += cksum1;
80017fac:	ee f9 ff f8 	ld.w	r9,r7[-8]
80017fb0:	ee f8 ff f4 	ld.w	r8,r7[-12]
80017fb4:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80017fb8:	ef 48 ff f8 	st.w	r7[-8],r8
	cksum1 += local_array.values[0];
	cksum2 += cksum1;
	
	dbg_print("Begin write to flashc...\n");
	
	for (i=1;i<(param_set.param_count+1);i++)
80017fbc:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80017fc0:	2f f8       	sub	r8,-1
80017fc2:	ef 68 ff ff 	st.b	r7[-1],r8
80017fc6:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80017fca:	ec f8 00 28 	ld.w	r8,r6[40]
80017fce:	f0 f8 0d 20 	ld.w	r8,r8[3360]
80017fd2:	2f f8       	sub	r8,-1
80017fd4:	10 39       	cp.w	r9,r8
80017fd6:	cc 85       	brlt	80017f66 <write_parameters_to_flashc+0x66>
		//flashc_memcpy((void *)&(nvram_array->values[i]),   param_set.parameters[i].param, sizeof((nvram_array->values[i])),   true);
		local_array.values[i] = *param_set.parameters[i-1].param;
		cksum1 += local_array.values[i];
		cksum2 += cksum1;
	}
	local_array.values[param_set.param_count+1] = cksum1;
80017fd8:	ec f8 00 28 	ld.w	r8,r6[40]
80017fdc:	f0 f8 0d 20 	ld.w	r8,r8[3360]
80017fe0:	2f f8       	sub	r8,-1
80017fe2:	a3 68       	lsl	r8,0x2
80017fe4:	ee 08 00 08 	add	r8,r7,r8
80017fe8:	ee f9 ff f4 	ld.w	r9,r7[-12]
80017fec:	f1 49 fe 08 	st.w	r8[-504],r9
	local_array.values[param_set.param_count+2] = cksum2;
80017ff0:	ec f8 00 28 	ld.w	r8,r6[40]
80017ff4:	f0 f8 0d 20 	ld.w	r8,r8[3360]
80017ff8:	2f e8       	sub	r8,-2
80017ffa:	a3 68       	lsl	r8,0x2
80017ffc:	ee 08 00 08 	add	r8,r7,r8
80018000:	ee f9 ff f8 	ld.w	r9,r7[-8]
80018004:	f1 49 fe 08 	st.w	r8[-504],r9
	
	flashc_memcpy((void *)nvram_array, &local_array, sizeof(*nvram_array) ,   true);
80018008:	ec f8 01 74 	ld.w	r8,r6[372]
8001800c:	70 08       	ld.w	r8,r8[0x0]
8001800e:	ee cb 01 f8 	sub	r11,r7,504
80018012:	30 19       	mov	r9,1
80018014:	e0 6a 01 ec 	mov	r10,492
80018018:	10 9c       	mov	r12,r8
8001801a:	f0 16 01 51 	mcall	r6[1348]
	dbg_print("Write to falshc completed.\n");
8001801e:	fe cc 01 3a 	sub	r12,pc,314
80018022:	f0 16 00 01 	mcall	r6[4]
80018026:	28 2d       	sub	sp,-504
80018028:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001802c:	80 01       	ld.sh	r1,r0[0x0]
8001802e:	7d 90       	ld.w	r0,lr[0x64]

80018030 <quat_from_vector>:
	out.v[2] = -q.v[2];

#define QUAT(q, s, v0, v1, v2) \
	q.s=s; q.v[0]=v0; q.v[1]=v1; q.v[2]=v2;

UQuat_t static inline quat_from_vector(float *v) {
80018030:	eb cd 40 80 	pushm	r7,lr
80018034:	1a 97       	mov	r7,sp
80018036:	20 5d       	sub	sp,20
80018038:	18 9a       	mov	r10,r12
8001803a:	ef 4b ff ec 	st.w	r7[-20],r11
	UQuat_t q;	
	q.s=0; 
8001803e:	30 08       	mov	r8,0
80018040:	ef 48 ff f0 	st.w	r7[-16],r8
	q.v[0]=v[0]; 
80018044:	ee f8 ff ec 	ld.w	r8,r7[-20]
80018048:	70 08       	ld.w	r8,r8[0x0]
8001804a:	ef 48 ff f4 	st.w	r7[-12],r8
	q.v[1]=v[1]; 
8001804e:	ee f8 ff ec 	ld.w	r8,r7[-20]
80018052:	2f c8       	sub	r8,-4
80018054:	70 08       	ld.w	r8,r8[0x0]
80018056:	ef 48 ff f8 	st.w	r7[-8],r8
	q.v[2]=v[2];
8001805a:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001805e:	2f 88       	sub	r8,-8
80018060:	70 08       	ld.w	r8,r8[0x0]
80018062:	ef 48 ff fc 	st.w	r7[-4],r8
	return q;
80018066:	14 98       	mov	r8,r10
80018068:	ee c9 00 10 	sub	r9,r7,16
8001806c:	20 08       	sub	r8,0
8001806e:	20 09       	sub	r9,0
80018070:	72 0b       	ld.w	r11,r9[0x0]
80018072:	91 0b       	st.w	r8[0x0],r11
80018074:	72 1b       	ld.w	r11,r9[0x4]
80018076:	91 1b       	st.w	r8[0x4],r11
80018078:	72 2b       	ld.w	r11,r9[0x8]
8001807a:	91 2b       	st.w	r8[0x8],r11
8001807c:	72 39       	ld.w	r9,r9[0xc]
8001807e:	91 39       	st.w	r8[0xc],r9
}
80018080:	14 9c       	mov	r12,r10
80018082:	2f bd       	sub	sp,-20
80018084:	e3 cd 80 80 	ldm	sp++,r7,pc

80018088 <scalar_product>:
	return out;
}


float static inline scalar_product(const float u[], const float v[])
{
80018088:	eb cd 40 80 	pushm	r7,lr
8001808c:	1a 97       	mov	r7,sp
8001808e:	20 3d       	sub	sp,12
80018090:	ef 4c ff f8 	st.w	r7[-8],r12
80018094:	ef 4b ff f4 	st.w	r7[-12],r11
	float scp = (u[0]*v[0]+u[1]*v[1]+u[2]*v[2]);
80018098:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001809c:	70 09       	ld.w	r9,r8[0x0]
8001809e:	ee f8 ff f4 	ld.w	r8,r7[-12]
800180a2:	70 08       	ld.w	r8,r8[0x0]
800180a4:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
800180a8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800180ac:	2f c8       	sub	r8,-4
800180ae:	70 0a       	ld.w	r10,r8[0x0]
800180b0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800180b4:	2f c8       	sub	r8,-4
800180b6:	70 08       	ld.w	r8,r8[0x0]
800180b8:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
800180bc:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
800180c0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800180c4:	2f 88       	sub	r8,-8
800180c6:	70 0a       	ld.w	r10,r8[0x0]
800180c8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800180cc:	2f 88       	sub	r8,-8
800180ce:	70 08       	ld.w	r8,r8[0x0]
800180d0:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
800180d4:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
800180d8:	ef 48 ff fc 	st.w	r7[-4],r8
	return scp;
800180dc:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
800180e0:	10 9c       	mov	r12,r8
800180e2:	2f dd       	sub	sp,-12
800180e4:	e3 cd 80 80 	ldm	sp++,r7,pc

800180e8 <quat_multi>:
	out[2] = u[0] * v[1] - u[1] * v[0];
}


UQuat_t static inline quat_multi(const UQuat_t q1, const UQuat_t q2)
{
800180e8:	eb cd 40 e8 	pushm	r3,r5-r7,lr
800180ec:	1a 97       	mov	r7,sp
800180ee:	20 7d       	sub	sp,28
800180f0:	4b d6       	lddpc	r6,800181e4 <quat_multi+0xfc>
800180f2:	1e 26       	rsub	r6,pc
800180f4:	ee c8 ff ec 	sub	r8,r7,-20
800180f8:	18 95       	mov	r5,r12
	float tmp[3];
	UQuat_t out;
	tmp[0] = q1.v[1] * q2.v[2] - q1.v[2]*q2.v[1];
800180fa:	70 2a       	ld.w	r10,r8[0x8]
800180fc:	70 79       	ld.w	r9,r8[0x1c]
800180fe:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
80018102:	70 3b       	ld.w	r11,r8[0xc]
80018104:	70 69       	ld.w	r9,r8[0x18]
80018106:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8001810a:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8001810e:	ef 49 ff f4 	st.w	r7[-12],r9
	tmp[1] = q1.v[2] * q2.v[0] - q1.v[0]*q2.v[2];
80018112:	70 3a       	ld.w	r10,r8[0xc]
80018114:	70 59       	ld.w	r9,r8[0x14]
80018116:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8001811a:	70 1b       	ld.w	r11,r8[0x4]
8001811c:	70 79       	ld.w	r9,r8[0x1c]
8001811e:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
80018122:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80018126:	ef 49 ff f8 	st.w	r7[-8],r9
	tmp[2] = q1.v[0] * q2.v[1] - q1.v[1]*q2.v[0];
8001812a:	70 1a       	ld.w	r10,r8[0x4]
8001812c:	70 69       	ld.w	r9,r8[0x18]
8001812e:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
80018132:	70 2b       	ld.w	r11,r8[0x8]
80018134:	70 59       	ld.w	r9,r8[0x14]
80018136:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8001813a:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8001813e:	ef 49 ff fc 	st.w	r7[-4],r9
	out.v[0] = q2.s*q1.v[0] + q1.s *q2.v[0] +tmp[0];
80018142:	70 4a       	ld.w	r10,r8[0x10]
80018144:	70 19       	ld.w	r9,r8[0x4]
80018146:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8001814a:	70 0b       	ld.w	r11,r8[0x0]
8001814c:	70 59       	ld.w	r9,r8[0x14]
8001814e:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
80018152:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
80018156:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001815a:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
8001815e:	ef 49 ff e8 	st.w	r7[-24],r9
	out.v[1] = q2.s*q1.v[1] + q1.s *q2.v[1] +tmp[1];
80018162:	70 4a       	ld.w	r10,r8[0x10]
80018164:	70 29       	ld.w	r9,r8[0x8]
80018166:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8001816a:	70 0b       	ld.w	r11,r8[0x0]
8001816c:	70 69       	ld.w	r9,r8[0x18]
8001816e:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
80018172:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
80018176:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001817a:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
8001817e:	ef 49 ff ec 	st.w	r7[-20],r9
	out.v[2] = q2.s*q1.v[2] + q1.s *q2.v[2] +tmp[2];
80018182:	70 4a       	ld.w	r10,r8[0x10]
80018184:	70 39       	ld.w	r9,r8[0xc]
80018186:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8001818a:	70 0b       	ld.w	r11,r8[0x0]
8001818c:	70 79       	ld.w	r9,r8[0x1c]
8001818e:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
80018192:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
80018196:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001819a:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
8001819e:	ef 49 ff f0 	st.w	r7[-16],r9
	out.s= q1.s*q2.s - scalar_product(q1.v, q2.v);
800181a2:	70 0a       	ld.w	r10,r8[0x0]
800181a4:	70 49       	ld.w	r9,r8[0x10]
800181a6:	e5 a2 03 a9 	cop	cp0,cr3,cr10,cr9,0x44
800181aa:	f0 c9 ff f0 	sub	r9,r8,-16
800181ae:	2f c9       	sub	r9,-4
800181b0:	2f c8       	sub	r8,-4
800181b2:	12 9b       	mov	r11,r9
800181b4:	10 9c       	mov	r12,r8
800181b6:	c6 9f       	rcall	80018088 <scalar_product>
800181b8:	18 98       	mov	r8,r12
800181ba:	e5 a1 08 38 	cop	cp0,cr8,cr3,cr8,0x42
800181be:	ef 48 ff e4 	st.w	r7[-28],r8
	
	return out;
800181c2:	0a 98       	mov	r8,r5
800181c4:	ee c9 00 1c 	sub	r9,r7,28
800181c8:	20 08       	sub	r8,0
800181ca:	20 09       	sub	r9,0
800181cc:	72 0a       	ld.w	r10,r9[0x0]
800181ce:	91 0a       	st.w	r8[0x0],r10
800181d0:	72 1a       	ld.w	r10,r9[0x4]
800181d2:	91 1a       	st.w	r8[0x4],r10
800181d4:	72 2a       	ld.w	r10,r9[0x8]
800181d6:	91 2a       	st.w	r8[0x8],r10
800181d8:	72 39       	ld.w	r9,r9[0xc]
800181da:	91 39       	st.w	r8[0xc],r9
}
800181dc:	0a 9c       	mov	r12,r5
800181de:	2f 9d       	sub	sp,-28
800181e0:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
800181e4:	80 01       	ld.sh	r1,r0[0x0]
800181e6:	7f 76       	ld.w	r6,pc[0x5c]

800181e8 <quat_inv>:

UQuat_t static inline quat_inv(const UQuat_t q)
{
800181e8:	eb cd 40 80 	pushm	r7,lr
800181ec:	1a 97       	mov	r7,sp
800181ee:	20 5d       	sub	sp,20
800181f0:	ee c9 ff f8 	sub	r9,r7,-8
800181f4:	18 9a       	mov	r10,r12
	int i;
	
	UQuat_t qinv;
	qinv.s = q.s;
800181f6:	72 08       	ld.w	r8,r9[0x0]
800181f8:	ef 48 ff ec 	st.w	r7[-20],r8
	for (i=0;i<3;i++)
800181fc:	30 08       	mov	r8,0
800181fe:	ef 48 ff fc 	st.w	r7[-4],r8
80018202:	c1 58       	rjmp	8001822c <quat_inv+0x44>
	{
		qinv.v[i] = -q.v[i];
80018204:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018208:	ee fb ff fc 	ld.w	r11,r7[-4]
8001820c:	2f fb       	sub	r11,-1
8001820e:	f2 0b 03 2b 	ld.w	r11,r9[r11<<0x2]
80018212:	ee 1b 80 00 	eorh	r11,0x8000
80018216:	2f f8       	sub	r8,-1
80018218:	a3 68       	lsl	r8,0x2
8001821a:	ee 08 00 08 	add	r8,r7,r8
8001821e:	f1 4b ff ec 	st.w	r8[-20],r11
{
	int i;
	
	UQuat_t qinv;
	qinv.s = q.s;
	for (i=0;i<3;i++)
80018222:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018226:	2f f8       	sub	r8,-1
80018228:	ef 48 ff fc 	st.w	r7[-4],r8
8001822c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018230:	58 28       	cp.w	r8,2
80018232:	fe 9a ff e9 	brle	80018204 <quat_inv+0x1c>
	{
		qinv.v[i] = -q.v[i];
	}
	return qinv;
80018236:	14 98       	mov	r8,r10
80018238:	ee c9 00 14 	sub	r9,r7,20
8001823c:	20 08       	sub	r8,0
8001823e:	20 09       	sub	r9,0
80018240:	72 0b       	ld.w	r11,r9[0x0]
80018242:	91 0b       	st.w	r8[0x0],r11
80018244:	72 1b       	ld.w	r11,r9[0x4]
80018246:	91 1b       	st.w	r8[0x4],r11
80018248:	72 2b       	ld.w	r11,r9[0x8]
8001824a:	91 2b       	st.w	r8[0x8],r11
8001824c:	72 39       	ld.w	r9,r9[0xc]
8001824e:	91 39       	st.w	r8[0xc],r9
}
80018250:	14 9c       	mov	r12,r10
80018252:	2f bd       	sub	sp,-20
80018254:	e3 cd 80 80 	ldm	sp++,r7,pc

80018258 <quat_global_to_local>:

UQuat_t static inline quat_global_to_local(const UQuat_t qe, const UQuat_t qvect)
{
80018258:	eb cd 40 e8 	pushm	r3,r5-r7,lr
8001825c:	1a 97       	mov	r7,sp
8001825e:	20 cd       	sub	sp,48
80018260:	4b c6       	lddpc	r6,80018350 <quat_global_to_local+0xf8>
80018262:	1e 26       	rsub	r6,pc
80018264:	ee c5 ff ec 	sub	r5,r7,-20
80018268:	18 93       	mov	r3,r12
	UQuat_t qinv, qtmp;
	
	qinv = quat_inv(qe);
8001826a:	ee ca 00 10 	sub	r10,r7,16
8001826e:	20 4d       	sub	sp,16
80018270:	1a 98       	mov	r8,sp
80018272:	0a 99       	mov	r9,r5
80018274:	20 08       	sub	r8,0
80018276:	20 09       	sub	r9,0
80018278:	72 0b       	ld.w	r11,r9[0x0]
8001827a:	91 0b       	st.w	r8[0x0],r11
8001827c:	72 1b       	ld.w	r11,r9[0x4]
8001827e:	91 1b       	st.w	r8[0x4],r11
80018280:	72 2b       	ld.w	r11,r9[0x8]
80018282:	91 2b       	st.w	r8[0x8],r11
80018284:	72 39       	ld.w	r9,r9[0xc]
80018286:	91 39       	st.w	r8[0xc],r9
80018288:	14 9c       	mov	r12,r10
8001828a:	ca ff       	rcall	800181e8 <quat_inv>
8001828c:	2f cd       	sub	sp,-16
	qtmp = quat_multi(qinv,qvect);
8001828e:	ee ca 00 20 	sub	r10,r7,32
80018292:	20 4d       	sub	sp,16
80018294:	1a 98       	mov	r8,sp
80018296:	ea c9 ff f0 	sub	r9,r5,-16
8001829a:	20 08       	sub	r8,0
8001829c:	20 09       	sub	r9,0
8001829e:	72 0b       	ld.w	r11,r9[0x0]
800182a0:	91 0b       	st.w	r8[0x0],r11
800182a2:	72 1b       	ld.w	r11,r9[0x4]
800182a4:	91 1b       	st.w	r8[0x4],r11
800182a6:	72 2b       	ld.w	r11,r9[0x8]
800182a8:	91 2b       	st.w	r8[0x8],r11
800182aa:	72 39       	ld.w	r9,r9[0xc]
800182ac:	91 39       	st.w	r8[0xc],r9
800182ae:	20 4d       	sub	sp,16
800182b0:	1a 98       	mov	r8,sp
800182b2:	ee c9 00 10 	sub	r9,r7,16
800182b6:	20 08       	sub	r8,0
800182b8:	20 09       	sub	r9,0
800182ba:	72 0b       	ld.w	r11,r9[0x0]
800182bc:	91 0b       	st.w	r8[0x0],r11
800182be:	72 1b       	ld.w	r11,r9[0x4]
800182c0:	91 1b       	st.w	r8[0x4],r11
800182c2:	72 2b       	ld.w	r11,r9[0x8]
800182c4:	91 2b       	st.w	r8[0x8],r11
800182c6:	72 39       	ld.w	r9,r9[0xc]
800182c8:	91 39       	st.w	r8[0xc],r9
800182ca:	14 9c       	mov	r12,r10
800182cc:	c0 ef       	rcall	800180e8 <quat_multi>
800182ce:	2f 8d       	sub	sp,-32
	qtmp = quat_multi(qtmp,qe);
800182d0:	ee ca 00 30 	sub	r10,r7,48
800182d4:	20 4d       	sub	sp,16
800182d6:	1a 98       	mov	r8,sp
800182d8:	0a 99       	mov	r9,r5
800182da:	20 08       	sub	r8,0
800182dc:	20 09       	sub	r9,0
800182de:	72 0b       	ld.w	r11,r9[0x0]
800182e0:	91 0b       	st.w	r8[0x0],r11
800182e2:	72 1b       	ld.w	r11,r9[0x4]
800182e4:	91 1b       	st.w	r8[0x4],r11
800182e6:	72 2b       	ld.w	r11,r9[0x8]
800182e8:	91 2b       	st.w	r8[0x8],r11
800182ea:	72 39       	ld.w	r9,r9[0xc]
800182ec:	91 39       	st.w	r8[0xc],r9
800182ee:	20 4d       	sub	sp,16
800182f0:	1a 98       	mov	r8,sp
800182f2:	ee c9 00 20 	sub	r9,r7,32
800182f6:	20 08       	sub	r8,0
800182f8:	20 09       	sub	r9,0
800182fa:	72 0b       	ld.w	r11,r9[0x0]
800182fc:	91 0b       	st.w	r8[0x0],r11
800182fe:	72 1b       	ld.w	r11,r9[0x4]
80018300:	91 1b       	st.w	r8[0x4],r11
80018302:	72 2b       	ld.w	r11,r9[0x8]
80018304:	91 2b       	st.w	r8[0x8],r11
80018306:	72 39       	ld.w	r9,r9[0xc]
80018308:	91 39       	st.w	r8[0xc],r9
8001830a:	14 9c       	mov	r12,r10
8001830c:	ce ee       	rcall	800180e8 <quat_multi>
8001830e:	2f 8d       	sub	sp,-32
80018310:	ee c8 00 20 	sub	r8,r7,32
80018314:	ee c9 00 30 	sub	r9,r7,48
80018318:	20 08       	sub	r8,0
8001831a:	20 09       	sub	r9,0
8001831c:	72 0a       	ld.w	r10,r9[0x0]
8001831e:	91 0a       	st.w	r8[0x0],r10
80018320:	72 1a       	ld.w	r10,r9[0x4]
80018322:	91 1a       	st.w	r8[0x4],r10
80018324:	72 2a       	ld.w	r10,r9[0x8]
80018326:	91 2a       	st.w	r8[0x8],r10
80018328:	72 39       	ld.w	r9,r9[0xc]
8001832a:	91 39       	st.w	r8[0xc],r9

	return qtmp;
8001832c:	06 98       	mov	r8,r3
8001832e:	ee c9 00 20 	sub	r9,r7,32
80018332:	20 08       	sub	r8,0
80018334:	20 09       	sub	r9,0
80018336:	72 0a       	ld.w	r10,r9[0x0]
80018338:	91 0a       	st.w	r8[0x0],r10
8001833a:	72 1a       	ld.w	r10,r9[0x4]
8001833c:	91 1a       	st.w	r8[0x4],r10
8001833e:	72 2a       	ld.w	r10,r9[0x8]
80018340:	91 2a       	st.w	r8[0x8],r10
80018342:	72 39       	ld.w	r9,r9[0xc]
80018344:	91 39       	st.w	r8[0xc],r9
}
80018346:	06 9c       	mov	r12,r3
80018348:	2f 4d       	sub	sp,-48
8001834a:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
8001834e:	00 00       	add	r0,r0
80018350:	80 01       	ld.sh	r1,r0[0x0]
80018352:	80 e6       	ld.uh	r6,r0[0xc]

80018354 <vector_norm_sqr>:
	result=0.5*(result+(input/result));
	return result;
}

float static inline vector_norm_sqr(float u[])
{
80018354:	eb cd 40 c0 	pushm	r6-r7,lr
80018358:	1a 97       	mov	r7,sp
8001835a:	20 2d       	sub	sp,8
8001835c:	48 96       	lddpc	r6,80018380 <vector_norm_sqr+0x2c>
8001835e:	1e 26       	rsub	r6,pc
80018360:	ef 4c ff f8 	st.w	r7[-8],r12
	float norm = scalar_product(u,u);
80018364:	ee fb ff f8 	ld.w	r11,r7[-8]
80018368:	ee fc ff f8 	ld.w	r12,r7[-8]
8001836c:	c8 ee       	rcall	80018088 <scalar_product>
8001836e:	18 98       	mov	r8,r12
80018370:	ef 48 ff fc 	st.w	r7[-4],r8
	return norm;
80018374:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80018378:	10 9c       	mov	r12,r8
8001837a:	2f ed       	sub	sp,-8
8001837c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80018380:	80 01       	ld.sh	r1,r0[0x0]
80018382:	81 e2       	st.w	r0[0x38],r2

80018384 <f_abs>:

	}
	return result;
}

static inline float f_abs(const float a){
80018384:	eb cd 40 80 	pushm	r7,lr
80018388:	1a 97       	mov	r7,sp
8001838a:	20 1d       	sub	sp,4
8001838c:	ef 4c ff fc 	st.w	r7[-4],r12
	if (a >= 0.0)
80018390:	30 18       	mov	r8,1
80018392:	ee fa ff fc 	ld.w	r10,r7[-4]
80018396:	30 09       	mov	r9,0
80018398:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
8001839c:	e0 8c 00 03 	brvs	800183a2 <f_abs+0x1e>
800183a0:	c0 24       	brge	800183a4 <f_abs+0x20>
800183a2:	30 08       	mov	r8,0
800183a4:	5c 58       	castu.b	r8
800183a6:	c0 40       	breq	800183ae <f_abs+0x2a>
	{
		return a;
800183a8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800183ac:	c0 58       	rjmp	800183b6 <f_abs+0x32>
	}else{
		return -a;
800183ae:	ee f8 ff fc 	ld.w	r8,r7[-4]
800183b2:	ee 18 80 00 	eorh	r8,0x8000
	}
}
800183b6:	10 9c       	mov	r12,r8
800183b8:	2f fd       	sub	sp,-4
800183ba:	e3 cd 80 80 	ldm	sp++,r7,pc

800183be <f_min>:

static inline float f_min(const float a, const float b){
800183be:	eb cd 40 80 	pushm	r7,lr
800183c2:	1a 97       	mov	r7,sp
800183c4:	20 2d       	sub	sp,8
800183c6:	ef 4c ff fc 	st.w	r7[-4],r12
800183ca:	ef 4b ff f8 	st.w	r7[-8],r11
	if (a <= b)
800183ce:	30 18       	mov	r8,1
800183d0:	ee fa ff fc 	ld.w	r10,r7[-4]
800183d4:	ee f9 ff f8 	ld.w	r9,r7[-8]
800183d8:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
800183dc:	e0 8c 00 04 	brvs	800183e4 <f_min+0x26>
800183e0:	e0 8a 00 03 	brle	800183e6 <f_min+0x28>
800183e4:	30 08       	mov	r8,0
800183e6:	5c 58       	castu.b	r8
800183e8:	c0 40       	breq	800183f0 <f_min+0x32>
	{
		return a;
800183ea:	ee f8 ff fc 	ld.w	r8,r7[-4]
800183ee:	c0 38       	rjmp	800183f4 <f_min+0x36>
	}else{
		return b;
800183f0:	ee f8 ff f8 	ld.w	r8,r7[-8]
	}
}
800183f4:	10 9c       	mov	r12,r8
800183f6:	2f ed       	sub	sp,-8
800183f8:	e3 cd 80 80 	ldm	sp++,r7,pc

800183fc <center_window_2>:

static float inline sigmoid(float x) {
	return (x/fast_sqrt(1+SQR(x)));
};

static float inline center_window_2(float x) {
800183fc:	eb cd 40 c0 	pushm	r6-r7,lr
80018400:	1a 97       	mov	r7,sp
80018402:	20 1d       	sub	sp,4
80018404:	48 c6       	lddpc	r6,80018434 <center_window_2+0x38>
80018406:	1e 26       	rsub	r6,pc
80018408:	ef 4c ff fc 	st.w	r7[-4],r12
	return 1.0/(1+SQR(x));
8001840c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80018410:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018414:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80018418:	fc 18 3f 80 	movh	r8,0x3f80
8001841c:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80018420:	10 9b       	mov	r11,r8
80018422:	fc 1c 3f 80 	movh	r12,0x3f80
80018426:	f0 16 00 08 	mcall	r6[32]
8001842a:	18 98       	mov	r8,r12
}
8001842c:	10 9c       	mov	r12,r8
8001842e:	2f fd       	sub	sp,-4
80018430:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80018434:	80 01       	ld.sh	r1,r0[0x0]
80018436:	82 8a       	ld.uh	r10,r1[0x0]

80018438 <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
80018438:	eb cd 40 c0 	pushm	r6-r7,lr
8001843c:	1a 97       	mov	r7,sp
8001843e:	20 6d       	sub	sp,24
80018440:	49 e6       	lddpc	r6,800184b8 <interpolate+0x80>
80018442:	1e 26       	rsub	r6,pc
80018444:	ef 4c ff f8 	st.w	r7[-8],r12
80018448:	ef 4b ff f4 	st.w	r7[-12],r11
8001844c:	ef 4a ff f0 	st.w	r7[-16],r10
80018450:	ef 49 ff ec 	st.w	r7[-20],r9
80018454:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
80018458:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001845c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80018460:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
80018464:	c0 41       	brne	8001846c <interpolate+0x34>
	{
		return y1;
80018466:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001846a:	c2 38       	rjmp	800184b0 <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
8001846c:	ee f9 ff e8 	ld.w	r9,r7[-24]
80018470:	ee f8 ff ec 	ld.w	r8,r7[-20]
80018474:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80018478:	ee fa ff f8 	ld.w	r10,r7[-8]
8001847c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80018480:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80018484:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80018488:	ee fa ff f0 	ld.w	r10,r7[-16]
8001848c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80018490:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80018494:	12 9b       	mov	r11,r9
80018496:	10 9c       	mov	r12,r8
80018498:	f0 16 00 08 	mcall	r6[32]
8001849c:	18 98       	mov	r8,r12
8001849e:	10 99       	mov	r9,r8
800184a0:	ee f8 ff ec 	ld.w	r8,r7[-20]
800184a4:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
800184a8:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
800184ac:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
800184b0:	10 9c       	mov	r12,r8
800184b2:	2f ad       	sub	sp,-24
800184b4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800184b8:	80 01       	ld.sh	r1,r0[0x0]
800184ba:	82 c6       	ld.uh	r6,r1[0x8]

800184bc <mav_array_memcpy>:

/*
  like memcpy(), but if src is NULL, do a memset to zero
*/
static void mav_array_memcpy(void *dest, const void *src, size_t n)
{
800184bc:	eb cd 40 c0 	pushm	r6-r7,lr
800184c0:	1a 97       	mov	r7,sp
800184c2:	20 3d       	sub	sp,12
800184c4:	49 06       	lddpc	r6,80018504 <mav_array_memcpy+0x48>
800184c6:	1e 26       	rsub	r6,pc
800184c8:	ef 4c ff fc 	st.w	r7[-4],r12
800184cc:	ef 4b ff f8 	st.w	r7[-8],r11
800184d0:	ef 4a ff f4 	st.w	r7[-12],r10
	if (src == NULL) {
800184d4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800184d8:	58 08       	cp.w	r8,0
800184da:	c0 91       	brne	800184ec <mav_array_memcpy+0x30>
		memset(dest, 0, n);
800184dc:	ee fa ff f4 	ld.w	r10,r7[-12]
800184e0:	30 0b       	mov	r11,0
800184e2:	ee fc ff fc 	ld.w	r12,r7[-4]
800184e6:	f0 16 00 2f 	mcall	r6[188]
800184ea:	c0 98       	rjmp	800184fc <mav_array_memcpy+0x40>
	} else {
		memcpy(dest, src, n);
800184ec:	ee fa ff f4 	ld.w	r10,r7[-12]
800184f0:	ee fb ff f8 	ld.w	r11,r7[-8]
800184f4:	ee fc ff fc 	ld.w	r12,r7[-4]
800184f8:	f0 16 00 20 	mcall	r6[128]
	}
}
800184fc:	2f dd       	sub	sp,-12
800184fe:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80018502:	00 00       	add	r0,r0
80018504:	80 01       	ld.sh	r1,r0[0x0]
80018506:	83 4a       	st.w	r1[0x10],r10

80018508 <init_nav>:

central_data_t *centralData;
float alt_integrator;

void init_nav()
{
80018508:	eb cd 40 c0 	pushm	r6-r7,lr
8001850c:	1a 97       	mov	r7,sp
8001850e:	20 1d       	sub	sp,4
80018510:	49 46       	lddpc	r6,80018560 <init_nav+0x58>
80018512:	1e 26       	rsub	r6,pc
	int8_t i;
	
	centralData = get_central_data();
80018514:	f0 16 00 31 	mcall	r6[196]
80018518:	18 99       	mov	r9,r12
8001851a:	ec f8 00 00 	ld.w	r8,r6[0]
8001851e:	91 09       	st.w	r8[0x0],r9
	
	centralData->controls_nav.tvel[X] = 0.0;
80018520:	ec f8 00 00 	ld.w	r8,r6[0]
80018524:	70 08       	ld.w	r8,r8[0x0]
80018526:	30 09       	mov	r9,0
80018528:	f1 49 01 84 	st.w	r8[388],r9
	centralData->controls_nav.tvel[Y] = 0.0;
8001852c:	ec f8 00 00 	ld.w	r8,r6[0]
80018530:	70 08       	ld.w	r8,r8[0x0]
80018532:	30 09       	mov	r9,0
80018534:	f1 49 01 88 	st.w	r8[392],r9
	centralData->controls_nav.rpy[YAW] = 0.0;
80018538:	ec f8 00 00 	ld.w	r8,r6[0]
8001853c:	70 08       	ld.w	r8,r8[0x0]
8001853e:	30 09       	mov	r9,0
80018540:	f1 49 01 7c 	st.w	r8[380],r9
	centralData->controls_nav.tvel[Z] = 0.0; //centralData->controls.thrust;
80018544:	ec f8 00 00 	ld.w	r8,r6[0]
80018548:	70 08       	ld.w	r8,r8[0x0]
8001854a:	30 09       	mov	r9,0
8001854c:	f1 49 01 8c 	st.w	r8[396],r9
	
	alt_integrator = 0.0;
80018550:	ec f8 07 68 	ld.w	r8,r6[1896]
80018554:	30 09       	mov	r9,0
80018556:	91 09       	st.w	r8[0x0],r9
}
80018558:	2f fd       	sub	sp,-4
8001855a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001855e:	00 00       	add	r0,r0
80018560:	80 01       	ld.sh	r1,r0[0x0]
80018562:	83 96       	st.w	r1[0x24],r6

80018564 <run_navigation>:


void run_navigation(local_coordinates_t waypoint_input)
{
80018564:	eb cd 40 e8 	pushm	r3,r5-r7,lr
80018568:	1a 97       	mov	r7,sp
8001856a:	20 8d       	sub	sp,32
8001856c:	49 26       	lddpc	r6,800185b4 <run_navigation+0x50>
8001856e:	1e 26       	rsub	r6,pc
80018570:	ee c5 ff ec 	sub	r5,r7,-20
	float newVelocity[3];
	
	float rel_pos[3], dist2wp_sqr;
	
	// Control in translational speed of the platform
	centralData->dist2wp_sqr = set_rel_pos_n_dist2wp(waypoint_input.pos, rel_pos);
80018574:	ec f8 00 00 	ld.w	r8,r6[0]
80018578:	70 03       	ld.w	r3,r8[0x0]
8001857a:	ee c8 00 20 	sub	r8,r7,32
8001857e:	10 9b       	mov	r11,r8
80018580:	0a 9c       	mov	r12,r5
80018582:	f0 16 01 9a 	mcall	r6[1640]
80018586:	18 98       	mov	r8,r12
80018588:	e7 48 10 b0 	st.w	r3[4272],r8
	set_speed_command(rel_pos,centralData->dist2wp_sqr);
8001858c:	ec f8 00 00 	ld.w	r8,r6[0]
80018590:	70 08       	ld.w	r8,r8[0x0]
80018592:	f0 f9 10 b0 	ld.w	r9,r8[4272]
80018596:	ee c8 00 20 	sub	r8,r7,32
8001859a:	12 9b       	mov	r11,r9
8001859c:	10 9c       	mov	r12,r8
8001859e:	f0 16 01 49 	mcall	r6[1316]
	
	centralData->controls_nav.theading=waypoint_input.heading;
800185a2:	ec f8 00 00 	ld.w	r8,r6[0]
800185a6:	70 08       	ld.w	r8,r8[0x0]
800185a8:	6a 39       	ld.w	r9,r5[0xc]
800185aa:	f1 49 01 90 	st.w	r8[400],r9
}
800185ae:	2f 8d       	sub	sp,-32
800185b0:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
800185b4:	80 01       	ld.sh	r1,r0[0x0]
800185b6:	83 f2       	st.w	r1[0x3c],r2

800185b8 <set_rel_pos_n_dist2wp>:

float set_rel_pos_n_dist2wp(float waypointPos[], float rel_pos[])
{
800185b8:	eb cd 40 c0 	pushm	r6-r7,lr
800185bc:	1a 97       	mov	r7,sp
800185be:	20 3d       	sub	sp,12
800185c0:	49 f6       	lddpc	r6,8001863c <set_rel_pos_n_dist2wp+0x84>
800185c2:	1e 26       	rsub	r6,pc
800185c4:	ef 4c ff f8 	st.w	r7[-8],r12
800185c8:	ef 4b ff f4 	st.w	r7[-12],r11
	float dist2wp_sqr;
	
	rel_pos[X] = (float)(waypointPos[X] - centralData->position_estimator.localPosition.pos[X]);
800185cc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800185d0:	70 09       	ld.w	r9,r8[0x0]
800185d2:	ec f8 00 00 	ld.w	r8,r6[0]
800185d6:	70 08       	ld.w	r8,r8[0x0]
800185d8:	f0 f8 0d 9c 	ld.w	r8,r8[3484]
800185dc:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
800185e0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800185e4:	91 09       	st.w	r8[0x0],r9
	rel_pos[Y] = (float)(waypointPos[Y] - centralData->position_estimator.localPosition.pos[Y]);
800185e6:	ee f8 ff f4 	ld.w	r8,r7[-12]
800185ea:	2f c8       	sub	r8,-4
800185ec:	ee f9 ff f8 	ld.w	r9,r7[-8]
800185f0:	2f c9       	sub	r9,-4
800185f2:	72 0a       	ld.w	r10,r9[0x0]
800185f4:	ec f9 00 00 	ld.w	r9,r6[0]
800185f8:	72 09       	ld.w	r9,r9[0x0]
800185fa:	f2 f9 0d a0 	ld.w	r9,r9[3488]
800185fe:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80018602:	91 09       	st.w	r8[0x0],r9
	rel_pos[Z] = (float)(waypointPos[Z] - centralData->position_estimator.localPosition.pos[Z]);
80018604:	ee f8 ff f4 	ld.w	r8,r7[-12]
80018608:	2f 88       	sub	r8,-8
8001860a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001860e:	2f 89       	sub	r9,-8
80018610:	72 0a       	ld.w	r10,r9[0x0]
80018612:	ec f9 00 00 	ld.w	r9,r6[0]
80018616:	72 09       	ld.w	r9,r9[0x0]
80018618:	f2 f9 0d a4 	ld.w	r9,r9[3492]
8001861c:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80018620:	91 09       	st.w	r8[0x0],r9
	
	dist2wp_sqr = vector_norm_sqr(rel_pos);
80018622:	ee fc ff f4 	ld.w	r12,r7[-12]
80018626:	c9 7e       	rcall	80018354 <vector_norm_sqr>
80018628:	18 98       	mov	r8,r12
8001862a:	ef 48 ff fc 	st.w	r7[-4],r8
	
	return dist2wp_sqr;
8001862e:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80018632:	10 9c       	mov	r12,r8
80018634:	2f dd       	sub	sp,-12
80018636:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001863a:	00 00       	add	r0,r0
8001863c:	80 01       	ld.sh	r1,r0[0x0]
8001863e:	84 46       	ld.sh	r6,r2[0x8]

80018640 <set_speed_command>:

void set_speed_command(float rel_pos[], float dist2wpSqr)
{
80018640:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
80018644:	1a 97       	mov	r7,sp
80018646:	21 7d       	sub	sp,92
80018648:	fe f6 02 f0 	ld.w	r6,pc[752]
8001864c:	1e 26       	rsub	r6,pc
8001864e:	ef 4c ff a8 	st.w	r7[-88],r12
80018652:	ef 4b ff a4 	st.w	r7[-92],r11
	
	float dir_desired_bf[3], dir_desired[3], new_velocity[3];
	
	float rel_heading;
	
	norm_rel_dist = sqrt(dist2wpSqr);
80018656:	ee fc ff a4 	ld.w	r12,r7[-92]
8001865a:	f0 16 00 02 	mcall	r6[8]
8001865e:	14 98       	mov	r8,r10
80018660:	16 99       	mov	r9,r11
80018662:	10 9a       	mov	r10,r8
80018664:	12 9b       	mov	r11,r9
80018666:	f0 16 00 64 	mcall	r6[400]
8001866a:	14 98       	mov	r8,r10
8001866c:	16 99       	mov	r9,r11
8001866e:	10 9a       	mov	r10,r8
80018670:	12 9b       	mov	r11,r9
80018672:	f0 16 00 09 	mcall	r6[36]
80018676:	18 98       	mov	r8,r12
80018678:	ef 48 ff f4 	st.w	r7[-12],r8
	
	if (norm_rel_dist < 0.0005)
8001867c:	ee fc ff f4 	ld.w	r12,r7[-12]
80018680:	f0 16 00 02 	mcall	r6[8]
80018684:	30 05       	mov	r5,0
80018686:	e0 68 a9 fc 	mov	r8,43516
8001868a:	ea 18 d2 f1 	orh	r8,0xd2f1
8001868e:	e0 69 62 4d 	mov	r9,25165
80018692:	ea 19 3f 40 	orh	r9,0x3f40
80018696:	f0 16 00 1c 	mcall	r6[112]
8001869a:	18 98       	mov	r8,r12
8001869c:	58 08       	cp.w	r8,0
8001869e:	c0 20       	breq	800186a2 <set_speed_command+0x62>
800186a0:	30 15       	mov	r5,1
800186a2:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
800186a6:	c1 80       	breq	800186d6 <set_speed_command+0x96>
	{
		norm_rel_dist += 0.0005;
800186a8:	ee fc ff f4 	ld.w	r12,r7[-12]
800186ac:	f0 16 00 02 	mcall	r6[8]
800186b0:	e0 68 a9 fc 	mov	r8,43516
800186b4:	ea 18 d2 f1 	orh	r8,0xd2f1
800186b8:	e0 69 62 4d 	mov	r9,25165
800186bc:	ea 19 3f 40 	orh	r9,0x3f40
800186c0:	f0 16 00 05 	mcall	r6[20]
800186c4:	14 98       	mov	r8,r10
800186c6:	16 99       	mov	r9,r11
800186c8:	10 9a       	mov	r10,r8
800186ca:	12 9b       	mov	r11,r9
800186cc:	f0 16 00 09 	mcall	r6[36]
800186d0:	18 98       	mov	r8,r12
800186d2:	ef 48 ff f4 	st.w	r7[-12],r8
	

	
	// calculate dir_desired in local frame
	// vel = qe-1 * rel_pos * qe
	qtmp1 = quat_from_vector(rel_pos);
800186d6:	ee c8 00 20 	sub	r8,r7,32
800186da:	ee fb ff a8 	ld.w	r11,r7[-88]
800186de:	10 9c       	mov	r12,r8
800186e0:	fe b0 fc a8 	rcall	80018030 <quat_from_vector>
	//qtmp1.s= 0.0; qtmp1.v[0]=dir_desired[0]; qtmp1.v[1]=dir_desired[1]; qtmp1.v[2]=dir_desired[2];
	qtmp2 = quat_global_to_local(centralData->imu1.attitude.qe,qtmp1);
800186e4:	ec f8 00 00 	ld.w	r8,r6[0]
800186e8:	70 0b       	ld.w	r11,r8[0x0]
800186ea:	ee ca 00 30 	sub	r10,r7,48
800186ee:	20 4d       	sub	sp,16
800186f0:	1a 98       	mov	r8,sp
800186f2:	ee c9 00 20 	sub	r9,r7,32
800186f6:	20 08       	sub	r8,0
800186f8:	20 09       	sub	r9,0
800186fa:	72 0c       	ld.w	r12,r9[0x0]
800186fc:	91 0c       	st.w	r8[0x0],r12
800186fe:	72 1c       	ld.w	r12,r9[0x4]
80018700:	91 1c       	st.w	r8[0x4],r12
80018702:	72 2c       	ld.w	r12,r9[0x8]
80018704:	91 2c       	st.w	r8[0x8],r12
80018706:	72 39       	ld.w	r9,r9[0xc]
80018708:	91 39       	st.w	r8[0xc],r9
8001870a:	20 4d       	sub	sp,16
8001870c:	1a 98       	mov	r8,sp
8001870e:	16 99       	mov	r9,r11
80018710:	20 08       	sub	r8,0
80018712:	20 09       	sub	r9,0
80018714:	72 0b       	ld.w	r11,r9[0x0]
80018716:	91 0b       	st.w	r8[0x0],r11
80018718:	72 1b       	ld.w	r11,r9[0x4]
8001871a:	91 1b       	st.w	r8[0x4],r11
8001871c:	72 2b       	ld.w	r11,r9[0x8]
8001871e:	91 2b       	st.w	r8[0x8],r11
80018720:	72 39       	ld.w	r9,r9[0xc]
80018722:	91 39       	st.w	r8[0xc],r9
80018724:	14 9c       	mov	r12,r10
80018726:	fe b0 fd 99 	rcall	80018258 <quat_global_to_local>
8001872a:	2f 8d       	sub	sp,-32
	dir_desired_bf[0] = qtmp2.v[0]; dir_desired_bf[1] = qtmp2.v[1]; dir_desired_bf[2] = qtmp2.v[2];
8001872c:	ee f8 ff d4 	ld.w	r8,r7[-44]
80018730:	ef 48 ff c4 	st.w	r7[-60],r8
80018734:	ee f8 ff d8 	ld.w	r8,r7[-40]
80018738:	ef 48 ff c8 	st.w	r7[-56],r8
8001873c:	ee f8 ff dc 	ld.w	r8,r7[-36]
80018740:	ef 48 ff cc 	st.w	r7[-52],r8
	
	// experimental: Z-axis in velocity mode is in global frame...
	dir_desired_bf[2] = rel_pos[2];
80018744:	ee f8 ff a8 	ld.w	r8,r7[-88]
80018748:	2f 88       	sub	r8,-8
8001874a:	70 08       	ld.w	r8,r8[0x0]
8001874c:	ef 48 ff cc 	st.w	r7[-52],r8
	
	v_desired = f_min(V_CRUISE,(center_window_2(rel_heading) * DIST_2_VEL_GAIN * norm_rel_dist));
80018750:	ee fc ff fc 	ld.w	r12,r7[-4]
80018754:	c5 4e       	rcall	800183fc <center_window_2>
80018756:	18 98       	mov	r8,r12
80018758:	10 9c       	mov	r12,r8
8001875a:	f0 16 00 02 	mcall	r6[8]
8001875e:	e0 68 33 33 	mov	r8,13107
80018762:	ea 18 33 33 	orh	r8,0x3333
80018766:	e0 69 33 33 	mov	r9,13107
8001876a:	ea 19 3f d3 	orh	r9,0x3fd3
8001876e:	f0 16 00 03 	mcall	r6[12]
80018772:	14 98       	mov	r8,r10
80018774:	16 99       	mov	r9,r11
80018776:	10 92       	mov	r2,r8
80018778:	12 93       	mov	r3,r9
8001877a:	ee fc ff f4 	ld.w	r12,r7[-12]
8001877e:	f0 16 00 02 	mcall	r6[8]
80018782:	14 98       	mov	r8,r10
80018784:	16 99       	mov	r9,r11
80018786:	04 9a       	mov	r10,r2
80018788:	06 9b       	mov	r11,r3
8001878a:	f0 16 00 03 	mcall	r6[12]
8001878e:	14 98       	mov	r8,r10
80018790:	16 99       	mov	r9,r11
80018792:	10 9a       	mov	r10,r8
80018794:	12 9b       	mov	r11,r9
80018796:	f0 16 00 09 	mcall	r6[36]
8001879a:	18 98       	mov	r8,r12
8001879c:	10 9b       	mov	r11,r8
8001879e:	fc 1c 40 40 	movh	r12,0x4040
800187a2:	c0 ee       	rcall	800183be <f_min>
800187a4:	18 98       	mov	r8,r12
800187a6:	ef 48 ff f8 	st.w	r7[-8],r8
	
	if (v_desired *  f_abs(dir_desired_bf[Z]) > MAX_CLIMB_RATE * norm_rel_dist ) {
800187aa:	ee f8 ff cc 	ld.w	r8,r7[-52]
800187ae:	10 9c       	mov	r12,r8
800187b0:	fe b0 fd ea 	rcall	80018384 <f_abs>
800187b4:	18 99       	mov	r9,r12
800187b6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800187ba:	e5 a2 0a 98 	cop	cp0,cr10,cr9,cr8,0x44
800187be:	30 18       	mov	r8,1
800187c0:	ee f9 ff f4 	ld.w	r9,r7[-12]
800187c4:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
800187c8:	e0 8c 00 04 	brvs	800187d0 <set_speed_command+0x190>
800187cc:	e0 89 00 03 	brgt	800187d2 <set_speed_command+0x192>
800187d0:	30 08       	mov	r8,0
800187d2:	5c 58       	castu.b	r8
800187d4:	c0 f0       	breq	800187f2 <set_speed_command+0x1b2>
		v_desired = MAX_CLIMB_RATE * norm_rel_dist /f_abs(dir_desired_bf[Z]);
800187d6:	ee f8 ff cc 	ld.w	r8,r7[-52]
800187da:	10 9c       	mov	r12,r8
800187dc:	fe b0 fd d4 	rcall	80018384 <f_abs>
800187e0:	18 98       	mov	r8,r12
800187e2:	10 9b       	mov	r11,r8
800187e4:	ee fc ff f4 	ld.w	r12,r7[-12]
800187e8:	f0 16 00 08 	mcall	r6[32]
800187ec:	18 98       	mov	r8,r12
800187ee:	ef 48 ff f8 	st.w	r7[-8],r8
	}
	
	dir_desired_bf[X] = v_desired * dir_desired_bf[X] / norm_rel_dist;
800187f2:	ee f9 ff c4 	ld.w	r9,r7[-60]
800187f6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800187fa:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
800187fe:	ee fb ff f4 	ld.w	r11,r7[-12]
80018802:	10 9c       	mov	r12,r8
80018804:	f0 16 00 08 	mcall	r6[32]
80018808:	18 98       	mov	r8,r12
8001880a:	ef 48 ff c4 	st.w	r7[-60],r8
	dir_desired_bf[Y] = v_desired * dir_desired_bf[Y] / norm_rel_dist;
8001880e:	ee f9 ff c8 	ld.w	r9,r7[-56]
80018812:	ee f8 ff f8 	ld.w	r8,r7[-8]
80018816:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8001881a:	ee fb ff f4 	ld.w	r11,r7[-12]
8001881e:	10 9c       	mov	r12,r8
80018820:	f0 16 00 08 	mcall	r6[32]
80018824:	18 98       	mov	r8,r12
80018826:	ef 48 ff c8 	st.w	r7[-56],r8
	dir_desired_bf[Z] = v_desired * dir_desired_bf[Z] / norm_rel_dist;
8001882a:	ee f9 ff cc 	ld.w	r9,r7[-52]
8001882e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80018832:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80018836:	ee fb ff f4 	ld.w	r11,r7[-12]
8001883a:	10 9c       	mov	r12,r8
8001883c:	f0 16 00 08 	mcall	r6[32]
80018840:	18 98       	mov	r8,r12
80018842:	ef 48 ff cc 	st.w	r7[-52],r8
	//}else{
		//high_speed_nav(dir_desired_bf,centralData->imu1.attitude);
	//}
	
	
	for (i=0;i<3;i++)
80018846:	30 08       	mov	r8,0
80018848:	ef 68 ff f3 	st.b	r7[-13],r8
8001884c:	c1 58       	rjmp	80018876 <set_speed_command+0x236>
	{
		new_velocity[i] = dir_desired_bf[i];
8001884e:	ef 3a ff f3 	ld.ub	r10,r7[-13]
80018852:	ef 38 ff f3 	ld.ub	r8,r7[-13]
80018856:	a3 68       	lsl	r8,0x2
80018858:	ee 08 00 08 	add	r8,r7,r8
8001885c:	f0 f9 ff c4 	ld.w	r9,r8[-60]
80018860:	f4 08 15 02 	lsl	r8,r10,0x2
80018864:	ee 08 00 08 	add	r8,r7,r8
80018868:	f1 49 ff ac 	st.w	r8[-84],r9
	//}else{
		//high_speed_nav(dir_desired_bf,centralData->imu1.attitude);
	//}
	
	
	for (i=0;i<3;i++)
8001886c:	ef 38 ff f3 	ld.ub	r8,r7[-13]
80018870:	2f f8       	sub	r8,-1
80018872:	ef 68 ff f3 	st.b	r7[-13],r8
80018876:	ef 39 ff f3 	ld.ub	r9,r7[-13]
8001887a:	30 28       	mov	r8,2
8001887c:	f0 09 18 00 	cp.b	r9,r8
80018880:	fe 98 ff e7 	brls	8001884e <set_speed_command+0x20e>
	{
		new_velocity[i] = dir_desired_bf[i];
	}
	if (centralData->collision_avoidance)
80018884:	ec f8 00 00 	ld.w	r8,r6[0]
80018888:	70 08       	ld.w	r8,r8[0x0]
8001888a:	f1 38 10 bb 	ld.ub	r8,r8[4283]
8001888e:	58 08       	cp.w	r8,0
80018890:	c0 90       	breq	800188a2 <set_speed_command+0x262>
	{
		computeNewVelocity(dir_desired_bf,new_velocity);
80018892:	ee c9 00 54 	sub	r9,r7,84
80018896:	ee c8 00 3c 	sub	r8,r7,60
8001889a:	12 9b       	mov	r11,r9
8001889c:	10 9c       	mov	r12,r8
8001889e:	f0 16 01 93 	mcall	r6[1612]
	}

	rel_heading= atan2(new_velocity[Y],new_velocity[X]);
800188a2:	ee f8 ff ac 	ld.w	r8,r7[-84]
800188a6:	10 9c       	mov	r12,r8
800188a8:	f0 16 00 02 	mcall	r6[8]
800188ac:	14 92       	mov	r2,r10
800188ae:	16 93       	mov	r3,r11
800188b0:	ee f8 ff b0 	ld.w	r8,r7[-80]
800188b4:	10 9c       	mov	r12,r8
800188b6:	f0 16 00 02 	mcall	r6[8]
800188ba:	04 98       	mov	r8,r2
800188bc:	06 99       	mov	r9,r3
800188be:	f0 16 00 4e 	mcall	r6[312]
800188c2:	14 98       	mov	r8,r10
800188c4:	16 99       	mov	r9,r11
800188c6:	10 9a       	mov	r10,r8
800188c8:	12 9b       	mov	r11,r9
800188ca:	f0 16 00 09 	mcall	r6[36]
800188ce:	18 98       	mov	r8,r12
800188d0:	ef 48 ff fc 	st.w	r7[-4],r8

	centralData->controls_nav.tvel[X] = new_velocity[X];
800188d4:	ec f8 00 00 	ld.w	r8,r6[0]
800188d8:	70 08       	ld.w	r8,r8[0x0]
800188da:	ee f9 ff ac 	ld.w	r9,r7[-84]
800188de:	f1 49 01 84 	st.w	r8[388],r9
	centralData->controls_nav.tvel[Y] = new_velocity[Y];
800188e2:	ec f8 00 00 	ld.w	r8,r6[0]
800188e6:	70 08       	ld.w	r8,r8[0x0]
800188e8:	ee f9 ff b0 	ld.w	r9,r7[-80]
800188ec:	f1 49 01 88 	st.w	r8[392],r9
	centralData->controls_nav.tvel[Z] = new_velocity[Z];		
800188f0:	ec f8 00 00 	ld.w	r8,r6[0]
800188f4:	70 08       	ld.w	r8,r8[0x0]
800188f6:	ee f9 ff b4 	ld.w	r9,r7[-76]
800188fa:	f1 49 01 8c 	st.w	r8[396],r9
	centralData->controls_nav.rpy[YAW] = KP_YAW * rel_heading;
800188fe:	ec f8 00 00 	ld.w	r8,r6[0]
80018902:	70 05       	ld.w	r5,r8[0x0]
80018904:	ee fc ff fc 	ld.w	r12,r7[-4]
80018908:	f0 16 00 02 	mcall	r6[8]
8001890c:	e0 68 99 9a 	mov	r8,39322
80018910:	ea 18 99 99 	orh	r8,0x9999
80018914:	e0 69 99 99 	mov	r9,39321
80018918:	ea 19 3f c9 	orh	r9,0x3fc9
8001891c:	f0 16 00 03 	mcall	r6[12]
80018920:	14 98       	mov	r8,r10
80018922:	16 99       	mov	r9,r11
80018924:	10 9a       	mov	r10,r8
80018926:	12 9b       	mov	r11,r9
80018928:	f0 16 00 09 	mcall	r6[36]
8001892c:	18 98       	mov	r8,r12
8001892e:	eb 48 01 7c 	st.w	r5[380],r8

	//low_speed_nav(dir_desired_bf,centralData->imu1.attitude,norm_rel_dist);

}
80018932:	2e 9d       	sub	sp,-92
80018934:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
80018938:	80 01       	ld.sh	r1,r0[0x0]
8001893a:	84 d0       	ld.uh	r0,r2[0xa]

8001893c <low_speed_nav>:

void low_speed_nav(float dir_desired_bf[], Quat_Attitude_t attitude, float rel_distance)
{
8001893c:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
80018940:	1a 97       	mov	r7,sp
80018942:	20 4d       	sub	sp,16
80018944:	4f 06       	lddpc	r6,80018b04 <low_speed_nav+0x1c8>
80018946:	1e 26       	rsub	r6,pc
80018948:	ef 4c ff f4 	st.w	r7[-12],r12
8001894c:	ef 4b ff f0 	st.w	r7[-16],r11
	// dbg_print("Low speed nav\n");
	
	float yaw_angle_tolerance = PI/10.0;
80018950:	e0 68 d9 7c 	mov	r8,55676
80018954:	ea 18 3e a0 	orh	r8,0x3ea0
80018958:	ef 48 ff f8 	st.w	r7[-8],r8
	
	if ((f_abs(dir_desired_bf[X]) < 0.001 && f_abs(dir_desired_bf[Y]) < 0.001) || centralData->waypoint_hold_init || (rel_distance<=5.0))
8001895c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80018960:	70 08       	ld.w	r8,r8[0x0]
80018962:	10 9c       	mov	r12,r8
80018964:	fe b0 fd 10 	rcall	80018384 <f_abs>
80018968:	18 98       	mov	r8,r12
8001896a:	10 9c       	mov	r12,r8
8001896c:	f0 16 00 02 	mcall	r6[8]
80018970:	30 05       	mov	r5,0
80018972:	e0 68 a9 fc 	mov	r8,43516
80018976:	ea 18 d2 f1 	orh	r8,0xd2f1
8001897a:	e0 69 62 4d 	mov	r9,25165
8001897e:	ea 19 3f 50 	orh	r9,0x3f50
80018982:	f0 16 00 1c 	mcall	r6[112]
80018986:	18 98       	mov	r8,r12
80018988:	58 08       	cp.w	r8,0
8001898a:	c0 20       	breq	8001898e <low_speed_nav+0x52>
8001898c:	30 15       	mov	r5,1
8001898e:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
80018992:	c1 e0       	breq	800189ce <low_speed_nav+0x92>
80018994:	ee f8 ff f4 	ld.w	r8,r7[-12]
80018998:	2f c8       	sub	r8,-4
8001899a:	70 08       	ld.w	r8,r8[0x0]
8001899c:	10 9c       	mov	r12,r8
8001899e:	fe b0 fc f3 	rcall	80018384 <f_abs>
800189a2:	18 98       	mov	r8,r12
800189a4:	10 9c       	mov	r12,r8
800189a6:	f0 16 00 02 	mcall	r6[8]
800189aa:	30 05       	mov	r5,0
800189ac:	e0 68 a9 fc 	mov	r8,43516
800189b0:	ea 18 d2 f1 	orh	r8,0xd2f1
800189b4:	e0 69 62 4d 	mov	r9,25165
800189b8:	ea 19 3f 50 	orh	r9,0x3f50
800189bc:	f0 16 00 1c 	mcall	r6[112]
800189c0:	18 98       	mov	r8,r12
800189c2:	58 08       	cp.w	r8,0
800189c4:	c0 20       	breq	800189c8 <low_speed_nav+0x8c>
800189c6:	30 15       	mov	r5,1
800189c8:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
800189cc:	c1 61       	brne	800189f8 <low_speed_nav+0xbc>
800189ce:	ec f8 00 00 	ld.w	r8,r6[0]
800189d2:	70 08       	ld.w	r8,r8[0x0]
800189d4:	f1 38 10 b7 	ld.ub	r8,r8[4279]
800189d8:	58 08       	cp.w	r8,0
800189da:	c0 f1       	brne	800189f8 <low_speed_nav+0xbc>
800189dc:	30 18       	mov	r8,1
800189de:	ee fa ff f0 	ld.w	r10,r7[-16]
800189e2:	fc 19 40 a0 	movh	r9,0x40a0
800189e6:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
800189ea:	e0 8c 00 04 	brvs	800189f2 <low_speed_nav+0xb6>
800189ee:	e0 8a 00 03 	brle	800189f4 <low_speed_nav+0xb8>
800189f2:	30 08       	mov	r8,0
800189f4:	5c 58       	castu.b	r8
800189f6:	c1 90       	breq	80018a28 <low_speed_nav+0xec>
	{
		centralData->controls_nav.rpy[YAW] = 0.0;
800189f8:	ec f8 00 00 	ld.w	r8,r6[0]
800189fc:	70 08       	ld.w	r8,r8[0x0]
800189fe:	30 09       	mov	r9,0
80018a00:	f1 49 01 7c 	st.w	r8[380],r9
		centralData->controls_nav.tvel[X] = dir_desired_bf[X];
80018a04:	ec f8 00 00 	ld.w	r8,r6[0]
80018a08:	70 08       	ld.w	r8,r8[0x0]
80018a0a:	ee f9 ff f4 	ld.w	r9,r7[-12]
80018a0e:	72 09       	ld.w	r9,r9[0x0]
80018a10:	f1 49 01 84 	st.w	r8[388],r9
		centralData->controls_nav.tvel[Y] = dir_desired_bf[Y];
80018a14:	ec f8 00 00 	ld.w	r8,r6[0]
80018a18:	70 08       	ld.w	r8,r8[0x0]
80018a1a:	ee f9 ff f4 	ld.w	r9,r7[-12]
80018a1e:	2f c9       	sub	r9,-4
80018a20:	72 09       	ld.w	r9,r9[0x0]
80018a22:	f1 49 01 88 	st.w	r8[392],r9
{
	// dbg_print("Low speed nav\n");
	
	float yaw_angle_tolerance = PI/10.0;
	
	if ((f_abs(dir_desired_bf[X]) < 0.001 && f_abs(dir_desired_bf[Y]) < 0.001) || centralData->waypoint_hold_init || (rel_distance<=5.0))
80018a26:	c6 28       	rjmp	80018aea <low_speed_nav+0x1ae>
	{
		centralData->controls_nav.rpy[YAW] = 0.0;
		centralData->controls_nav.tvel[X] = dir_desired_bf[X];
		centralData->controls_nav.tvel[Y] = dir_desired_bf[Y];
	}else{
		float rel_heading = atan2(dir_desired_bf[Y],dir_desired_bf[X]);
80018a28:	ee f8 ff f4 	ld.w	r8,r7[-12]
80018a2c:	70 08       	ld.w	r8,r8[0x0]
80018a2e:	10 9c       	mov	r12,r8
80018a30:	f0 16 00 02 	mcall	r6[8]
80018a34:	14 92       	mov	r2,r10
80018a36:	16 93       	mov	r3,r11
80018a38:	ee f8 ff f4 	ld.w	r8,r7[-12]
80018a3c:	2f c8       	sub	r8,-4
80018a3e:	70 08       	ld.w	r8,r8[0x0]
80018a40:	10 9c       	mov	r12,r8
80018a42:	f0 16 00 02 	mcall	r6[8]
80018a46:	04 98       	mov	r8,r2
80018a48:	06 99       	mov	r9,r3
80018a4a:	f0 16 00 4e 	mcall	r6[312]
80018a4e:	14 98       	mov	r8,r10
80018a50:	16 99       	mov	r9,r11
80018a52:	10 9a       	mov	r10,r8
80018a54:	12 9b       	mov	r11,r9
80018a56:	f0 16 00 09 	mcall	r6[36]
80018a5a:	18 98       	mov	r8,r12
80018a5c:	ef 48 ff fc 	st.w	r7[-4],r8
		
		if (rel_heading >= yaw_angle_tolerance)
80018a60:	30 18       	mov	r8,1
80018a62:	ee fa ff fc 	ld.w	r10,r7[-4]
80018a66:	ee f9 ff f8 	ld.w	r9,r7[-8]
80018a6a:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80018a6e:	e0 8c 00 03 	brvs	80018a74 <low_speed_nav+0x138>
80018a72:	c0 24       	brge	80018a76 <low_speed_nav+0x13a>
80018a74:	30 08       	mov	r8,0
80018a76:	5c 58       	castu.b	r8
80018a78:	c0 e0       	breq	80018a94 <low_speed_nav+0x158>
		{
			centralData->controls_nav.tvel[X] = 0.0;
80018a7a:	ec f8 00 00 	ld.w	r8,r6[0]
80018a7e:	70 08       	ld.w	r8,r8[0x0]
80018a80:	30 09       	mov	r9,0
80018a82:	f1 49 01 84 	st.w	r8[388],r9
			centralData->controls_nav.tvel[Y] = 0.0;
80018a86:	ec f8 00 00 	ld.w	r8,r6[0]
80018a8a:	70 08       	ld.w	r8,r8[0x0]
80018a8c:	30 09       	mov	r9,0
80018a8e:	f1 49 01 88 	st.w	r8[392],r9
80018a92:	c1 28       	rjmp	80018ab6 <low_speed_nav+0x17a>
		}else{
			centralData->controls_nav.tvel[X] = dir_desired_bf[X];
80018a94:	ec f8 00 00 	ld.w	r8,r6[0]
80018a98:	70 08       	ld.w	r8,r8[0x0]
80018a9a:	ee f9 ff f4 	ld.w	r9,r7[-12]
80018a9e:	72 09       	ld.w	r9,r9[0x0]
80018aa0:	f1 49 01 84 	st.w	r8[388],r9
			centralData->controls_nav.tvel[Y] = dir_desired_bf[Y];
80018aa4:	ec f8 00 00 	ld.w	r8,r6[0]
80018aa8:	70 08       	ld.w	r8,r8[0x0]
80018aaa:	ee f9 ff f4 	ld.w	r9,r7[-12]
80018aae:	2f c9       	sub	r9,-4
80018ab0:	72 09       	ld.w	r9,r9[0x0]
80018ab2:	f1 49 01 88 	st.w	r8[392],r9
		}
		
		centralData->controls_nav.rpy[YAW] = KP_YAW * rel_heading;
80018ab6:	ec f8 00 00 	ld.w	r8,r6[0]
80018aba:	70 05       	ld.w	r5,r8[0x0]
80018abc:	ee fc ff fc 	ld.w	r12,r7[-4]
80018ac0:	f0 16 00 02 	mcall	r6[8]
80018ac4:	e0 68 99 9a 	mov	r8,39322
80018ac8:	ea 18 99 99 	orh	r8,0x9999
80018acc:	e0 69 99 99 	mov	r9,39321
80018ad0:	ea 19 3f c9 	orh	r9,0x3fc9
80018ad4:	f0 16 00 03 	mcall	r6[12]
80018ad8:	14 98       	mov	r8,r10
80018ada:	16 99       	mov	r9,r11
80018adc:	10 9a       	mov	r10,r8
80018ade:	12 9b       	mov	r11,r9
80018ae0:	f0 16 00 09 	mcall	r6[36]
80018ae4:	18 98       	mov	r8,r12
80018ae6:	eb 48 01 7c 	st.w	r5[380],r8
	}

	centralData->controls_nav.tvel[Z] = dir_desired_bf[Z];
80018aea:	ec f8 00 00 	ld.w	r8,r6[0]
80018aee:	70 08       	ld.w	r8,r8[0x0]
80018af0:	ee f9 ff f4 	ld.w	r9,r7[-12]
80018af4:	2f 89       	sub	r9,-8
80018af6:	72 09       	ld.w	r9,r9[0x0]
80018af8:	f1 49 01 8c 	st.w	r8[396],r9
}
80018afc:	2f cd       	sub	sp,-16
80018afe:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
80018b02:	00 00       	add	r0,r0
80018b04:	80 01       	ld.sh	r1,r0[0x0]
80018b06:	87 ca       	st.w	r3[0x30],r10

80018b08 <high_speed_nav>:

void high_speed_nav(float dir_desired_bf[], Quat_Attitude_t attitude)
{
80018b08:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
80018b0c:	1a 97       	mov	r7,sp
80018b0e:	20 1d       	sub	sp,4
80018b10:	4a 76       	lddpc	r6,80018bac <high_speed_nav+0xa4>
80018b12:	1e 26       	rsub	r6,pc
80018b14:	ef 4c ff fc 	st.w	r7[-4],r12
	//dbg_print("High speed nav\n");
	
	centralData->controls_nav.tvel[X] = dir_desired_bf[X];
80018b18:	ec f8 00 00 	ld.w	r8,r6[0]
80018b1c:	70 08       	ld.w	r8,r8[0x0]
80018b1e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80018b22:	72 09       	ld.w	r9,r9[0x0]
80018b24:	f1 49 01 84 	st.w	r8[388],r9
	centralData->controls_nav.tvel[Y] = dir_desired_bf[Y];
80018b28:	ec f8 00 00 	ld.w	r8,r6[0]
80018b2c:	70 08       	ld.w	r8,r8[0x0]
80018b2e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80018b32:	2f c9       	sub	r9,-4
80018b34:	72 09       	ld.w	r9,r9[0x0]
80018b36:	f1 49 01 88 	st.w	r8[392],r9
	centralData->controls_nav.tvel[Z] = dir_desired_bf[Z];
80018b3a:	ec f8 00 00 	ld.w	r8,r6[0]
80018b3e:	70 08       	ld.w	r8,r8[0x0]
80018b40:	ee f9 ff fc 	ld.w	r9,r7[-4]
80018b44:	2f 89       	sub	r9,-8
80018b46:	72 09       	ld.w	r9,r9[0x0]
80018b48:	f1 49 01 8c 	st.w	r8[396],r9
	centralData->controls_nav.rpy[YAW] = KP_YAW * atan2(centralData->position_estimator.vel_bf[Y], centralData->position_estimator.vel_bf[X]);
80018b4c:	ec f8 00 00 	ld.w	r8,r6[0]
80018b50:	70 05       	ld.w	r5,r8[0x0]
80018b52:	ec f8 00 00 	ld.w	r8,r6[0]
80018b56:	70 08       	ld.w	r8,r8[0x0]
80018b58:	f0 f8 0d 68 	ld.w	r8,r8[3432]
80018b5c:	10 9c       	mov	r12,r8
80018b5e:	f0 16 00 02 	mcall	r6[8]
80018b62:	14 92       	mov	r2,r10
80018b64:	16 93       	mov	r3,r11
80018b66:	ec f8 00 00 	ld.w	r8,r6[0]
80018b6a:	70 08       	ld.w	r8,r8[0x0]
80018b6c:	f0 f8 0d 6c 	ld.w	r8,r8[3436]
80018b70:	10 9c       	mov	r12,r8
80018b72:	f0 16 00 02 	mcall	r6[8]
80018b76:	04 98       	mov	r8,r2
80018b78:	06 99       	mov	r9,r3
80018b7a:	f0 16 00 4e 	mcall	r6[312]
80018b7e:	e0 68 99 9a 	mov	r8,39322
80018b82:	ea 18 99 99 	orh	r8,0x9999
80018b86:	e0 69 99 99 	mov	r9,39321
80018b8a:	ea 19 3f c9 	orh	r9,0x3fc9
80018b8e:	f0 16 00 03 	mcall	r6[12]
80018b92:	14 98       	mov	r8,r10
80018b94:	16 99       	mov	r9,r11
80018b96:	10 9a       	mov	r10,r8
80018b98:	12 9b       	mov	r11,r9
80018b9a:	f0 16 00 09 	mcall	r6[36]
80018b9e:	18 98       	mov	r8,r12
80018ba0:	eb 48 01 7c 	st.w	r5[380],r8
80018ba4:	2f fd       	sub	sp,-4
80018ba6:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
80018baa:	00 00       	add	r0,r0
80018bac:	80 01       	ld.sh	r1,r0[0x0]
80018bae:	89 96       	st.w	r4[0x24],r6

80018bb0 <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
80018bb0:	eb cd 40 c0 	pushm	r6-r7,lr
80018bb4:	1a 97       	mov	r7,sp
80018bb6:	20 6d       	sub	sp,24
80018bb8:	49 e6       	lddpc	r6,80018c30 <interpolate+0x80>
80018bba:	1e 26       	rsub	r6,pc
80018bbc:	ef 4c ff f8 	st.w	r7[-8],r12
80018bc0:	ef 4b ff f4 	st.w	r7[-12],r11
80018bc4:	ef 4a ff f0 	st.w	r7[-16],r10
80018bc8:	ef 49 ff ec 	st.w	r7[-20],r9
80018bcc:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
80018bd0:	ee f9 ff f4 	ld.w	r9,r7[-12]
80018bd4:	ee f8 ff f0 	ld.w	r8,r7[-16]
80018bd8:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
80018bdc:	c0 41       	brne	80018be4 <interpolate+0x34>
	{
		return y1;
80018bde:	ee f8 ff ec 	ld.w	r8,r7[-20]
80018be2:	c2 38       	rjmp	80018c28 <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
80018be4:	ee f9 ff e8 	ld.w	r9,r7[-24]
80018be8:	ee f8 ff ec 	ld.w	r8,r7[-20]
80018bec:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80018bf0:	ee fa ff f8 	ld.w	r10,r7[-8]
80018bf4:	ee f8 ff f4 	ld.w	r8,r7[-12]
80018bf8:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80018bfc:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80018c00:	ee fa ff f0 	ld.w	r10,r7[-16]
80018c04:	ee f9 ff f4 	ld.w	r9,r7[-12]
80018c08:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80018c0c:	12 9b       	mov	r11,r9
80018c0e:	10 9c       	mov	r12,r8
80018c10:	f0 16 00 08 	mcall	r6[32]
80018c14:	18 98       	mov	r8,r12
80018c16:	10 99       	mov	r9,r8
80018c18:	ee f8 ff ec 	ld.w	r8,r7[-20]
80018c1c:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80018c20:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
80018c24:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
80018c28:	10 9c       	mov	r12,r8
80018c2a:	2f ad       	sub	sp,-24
80018c2c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80018c30:	80 01       	ld.sh	r1,r0[0x0]
80018c32:	8a 3e       	ld.sh	lr,r5[0x6]

80018c34 <stabilise>:
 */ 

#include "stabilisation.h"

void stabilise(Stabiliser_t *stabiliser, float dt, float errors[]) 
{
80018c34:	eb cd 40 e0 	pushm	r5-r7,lr
80018c38:	1a 97       	mov	r7,sp
80018c3a:	20 4d       	sub	sp,16
80018c3c:	4a 66       	lddpc	r6,80018cd4 <stabilise+0xa0>
80018c3e:	1e 26       	rsub	r6,pc
80018c40:	ef 4c ff f8 	st.w	r7[-8],r12
80018c44:	ef 4b ff f4 	st.w	r7[-12],r11
80018c48:	ef 4a ff f0 	st.w	r7[-16],r10
	int i;
	for (i = 0; i < 3; i++) 
80018c4c:	30 08       	mov	r8,0
80018c4e:	ef 48 ff fc 	st.w	r7[-4],r8
80018c52:	c2 68       	rjmp	80018c9e <stabilise+0x6a>
	{
		stabiliser->output.rpy[i]=	pid_update_dt(&(stabiliser->rpy_controller[i]),  errors[i], dt);
80018c54:	ee f5 ff fc 	ld.w	r5,r7[-4]
80018c58:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018c5c:	a3 68       	lsl	r8,0x2
80018c5e:	ee f9 ff f0 	ld.w	r9,r7[-16]
80018c62:	f2 08 00 08 	add	r8,r9,r8
80018c66:	70 0b       	ld.w	r11,r8[0x0]
80018c68:	ee fa ff f8 	ld.w	r10,r7[-8]
80018c6c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80018c70:	12 98       	mov	r8,r9
80018c72:	a5 68       	lsl	r8,0x4
80018c74:	12 08       	add	r8,r9
80018c76:	a3 68       	lsl	r8,0x2
80018c78:	f4 08 00 08 	add	r8,r10,r8
80018c7c:	ee fa ff f4 	ld.w	r10,r7[-12]
80018c80:	10 9c       	mov	r12,r8
80018c82:	f0 16 01 17 	mcall	r6[1116]
80018c86:	18 9a       	mov	r10,r12
80018c88:	ee f8 ff f8 	ld.w	r8,r7[-8]
80018c8c:	ea c9 ff bc 	sub	r9,r5,-68
80018c90:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
#include "stabilisation.h"

void stabilise(Stabiliser_t *stabiliser, float dt, float errors[]) 
{
	int i;
	for (i = 0; i < 3; i++) 
80018c94:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018c98:	2f f8       	sub	r8,-1
80018c9a:	ef 48 ff fc 	st.w	r7[-4],r8
80018c9e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018ca2:	58 28       	cp.w	r8,2
80018ca4:	fe 9a ff d8 	brle	80018c54 <stabilise+0x20>
	{
		stabiliser->output.rpy[i]=	pid_update_dt(&(stabiliser->rpy_controller[i]),  errors[i], dt);
	}		
	stabiliser->output.thrust= pid_update_dt(&(stabiliser->thrust_controller),  errors[3], dt);
80018ca8:	ee f8 ff f0 	ld.w	r8,r7[-16]
80018cac:	2f 48       	sub	r8,-12
80018cae:	70 09       	ld.w	r9,r8[0x0]
80018cb0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80018cb4:	f0 c8 ff 34 	sub	r8,r8,-204
80018cb8:	ee fa ff f4 	ld.w	r10,r7[-12]
80018cbc:	12 9b       	mov	r11,r9
80018cbe:	10 9c       	mov	r12,r8
80018cc0:	f0 16 01 17 	mcall	r6[1116]
80018cc4:	18 99       	mov	r9,r12
80018cc6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80018cca:	f1 49 01 1c 	st.w	r8[284],r9

	//dbg_putfloat(stabiliser->output.thrust, 3); dbg_print("\n");
80018cce:	2f cd       	sub	sp,-16
80018cd0:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80018cd4:	80 01       	ld.sh	r1,r0[0x0]
80018cd6:	8a c2       	ld.uh	r2,r5[0x8]

80018cd8 <processData>:
adcifa_sequencer_conversion_opt_t adcifa_sequencer0_conversion_opt[SLOTS_PER_SEQUENCER];
			
			
			
__attribute__((__interrupt__))
static void processData() {
80018cd8:	eb cd 40 c0 	pushm	r6-r7,lr
80018cdc:	1a 97       	mov	r7,sp
80018cde:	20 2d       	sub	sp,8
80018ce0:	4f 96       	lddpc	r6,80018ec4 <processData+0x1ec>
80018ce2:	1e 26       	rsub	r6,pc
	int ch;
	int16_t value;

	if (sample_counter>=number_of_samples)  {
80018ce4:	ec f8 01 14 	ld.w	r8,r6[276]
80018ce8:	70 09       	ld.w	r9,r8[0x0]
80018cea:	ec f8 03 40 	ld.w	r8,r6[832]
80018cee:	70 08       	ld.w	r8,r8[0x0]
80018cf0:	10 39       	cp.w	r9,r8
80018cf2:	c2 15       	brlt	80018d34 <processData+0x5c>
		if (continuous_mode) {
80018cf4:	ec f8 03 14 	ld.w	r8,r6[788]
80018cf8:	11 88       	ld.ub	r8,r8[0x0]
80018cfa:	58 08       	cp.w	r8,0
80018cfc:	c0 e0       	breq	80018d18 <processData+0x40>
			sample_counter=0;
80018cfe:	ec f8 01 14 	ld.w	r8,r6[276]
80018d02:	30 09       	mov	r9,0
80018d04:	91 09       	st.w	r8[0x0],r9
			oversampling_counter=0;
80018d06:	ec f8 01 70 	ld.w	r8,r6[368]
80018d0a:	30 09       	mov	r9,0
80018d0c:	91 09       	st.w	r8[0x0],r9
			channel_index=0;
80018d0e:	ec f8 01 30 	ld.w	r8,r6[304]
80018d12:	30 09       	mov	r9,0
80018d14:	91 09       	st.w	r8[0x0],r9
		} else {
			adcifa_disable_interrupt(adcifa, ADC_INT_SEOS0);
			//adcifa_disable_interrupt(adcifa, ADC_INT_SEOS1);
			adcifa_stop_itimer(adcifa);
		}
		return;
80018d16:	cd 38       	rjmp	80018ebc <processData+0x1e4>
		if (continuous_mode) {
			sample_counter=0;
			oversampling_counter=0;
			channel_index=0;
		} else {
			adcifa_disable_interrupt(adcifa, ADC_INT_SEOS0);
80018d18:	ec f8 01 10 	ld.w	r8,r6[272]
80018d1c:	70 08       	ld.w	r8,r8[0x0]
80018d1e:	30 1b       	mov	r11,1
80018d20:	10 9c       	mov	r12,r8
80018d22:	f0 16 01 13 	mcall	r6[1100]
			//adcifa_disable_interrupt(adcifa, ADC_INT_SEOS1);
			adcifa_stop_itimer(adcifa);
80018d26:	ec f8 01 10 	ld.w	r8,r6[272]
80018d2a:	70 08       	ld.w	r8,r8[0x0]
80018d2c:	10 9c       	mov	r12,r8
80018d2e:	f0 16 00 f0 	mcall	r6[960]
		}
		return;
80018d32:	cc 58       	rjmp	80018ebc <processData+0x1e4>
	}
	

	if (((adcifa->sr&ADC_INT_SEOS0) ==0) 
80018d34:	ec f8 01 10 	ld.w	r8,r6[272]
80018d38:	70 08       	ld.w	r8,r8[0x0]
80018d3a:	70 28       	ld.w	r8,r8[0x8]
80018d3c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80018d40:	e0 80 00 bd 	breq	80018eba <processData+0x1e2>
	//|| ((adcifa->sr&ADC_INT_SEOS1) ==0) 
	) {return;}
		
	if (sample_counter>=0) {
80018d44:	ec f8 01 14 	ld.w	r8,r6[276]
80018d48:	70 08       	ld.w	r8,r8[0x0]
80018d4a:	58 08       	cp.w	r8,0
80018d4c:	c4 85       	brlt	80018ddc <processData+0x104>
		for (ch=0; ch<sequencer_item_count; ch++) {
80018d4e:	30 08       	mov	r8,0
80018d50:	ef 48 ff f8 	st.w	r7[-8],r8
80018d54:	c3 88       	rjmp	80018dc4 <processData+0xec>
			value=adcifa->resx[ch];
80018d56:	ec f8 01 10 	ld.w	r8,r6[272]
80018d5a:	70 08       	ld.w	r8,r8[0x0]
80018d5c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80018d60:	2d f9       	sub	r9,-33
80018d62:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80018d66:	ef 58 ff fe 	st.h	r7[-2],r8
			if (oversampling_counter<=0) {
80018d6a:	ec f8 01 70 	ld.w	r8,r6[368]
80018d6e:	70 08       	ld.w	r8,r8[0x0]
80018d70:	58 08       	cp.w	r8,0
80018d72:	e0 89 00 0c 	brgt	80018d8a <processData+0xb2>
				internal_buffer[channel_index]=  value ;
80018d76:	ec f8 01 30 	ld.w	r8,r6[304]
80018d7a:	70 09       	ld.w	r9,r8[0x0]
80018d7c:	ef 0a ff fe 	ld.sh	r10,r7[-2]
80018d80:	ec f8 02 08 	ld.w	r8,r6[520]
80018d84:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
80018d88:	c1 18       	rjmp	80018daa <processData+0xd2>
			}else {			
				internal_buffer[channel_index]+= value ;
80018d8a:	ec f8 01 30 	ld.w	r8,r6[304]
80018d8e:	70 08       	ld.w	r8,r8[0x0]
80018d90:	10 99       	mov	r9,r8
80018d92:	10 9a       	mov	r10,r8
80018d94:	ec f8 02 08 	ld.w	r8,r6[520]
80018d98:	f0 0a 03 2a 	ld.w	r10,r8[r10<<0x2]
80018d9c:	ef 08 ff fe 	ld.sh	r8,r7[-2]
80018da0:	10 0a       	add	r10,r8
80018da2:	ec f8 02 08 	ld.w	r8,r6[520]
80018da6:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
				//adci_buffer[ch][even_odd][sample_counter]+=value;
			}			
			channel_index++;
80018daa:	ec f8 01 30 	ld.w	r8,r6[304]
80018dae:	70 08       	ld.w	r8,r8[0x0]
80018db0:	f0 c9 ff ff 	sub	r9,r8,-1
80018db4:	ec f8 01 30 	ld.w	r8,r6[304]
80018db8:	91 09       	st.w	r8[0x0],r9
	if (((adcifa->sr&ADC_INT_SEOS0) ==0) 
	//|| ((adcifa->sr&ADC_INT_SEOS1) ==0) 
	) {return;}
		
	if (sample_counter>=0) {
		for (ch=0; ch<sequencer_item_count; ch++) {
80018dba:	ee f8 ff f8 	ld.w	r8,r7[-8]
80018dbe:	2f f8       	sub	r8,-1
80018dc0:	ef 48 ff f8 	st.w	r7[-8],r8
80018dc4:	ec f8 01 18 	ld.w	r8,r6[280]
80018dc8:	11 88       	ld.ub	r8,r8[0x0]
80018dca:	5c 58       	castu.b	r8
80018dcc:	f3 d8 b0 08 	bfexts	r9,r8,0x0,0x8
80018dd0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80018dd4:	10 39       	cp.w	r9,r8
80018dd6:	fe 99 ff c0 	brgt	80018d56 <processData+0x7e>
80018dda:	c0 a8       	rjmp	80018dee <processData+0x116>
				//adci_buffer[ch][even_odd][sample_counter]+=value;
			}			
			channel_index++;
		
		}
	}	else {sample_counter++; return;}
80018ddc:	ec f8 01 14 	ld.w	r8,r6[276]
80018de0:	70 08       	ld.w	r8,r8[0x0]
80018de2:	f0 c9 ff ff 	sub	r9,r8,-1
80018de6:	ec f8 01 14 	ld.w	r8,r6[276]
80018dea:	91 09       	st.w	r8[0x0],r9
80018dec:	c6 88       	rjmp	80018ebc <processData+0x1e4>
	//if (function_generator!=NULL) {
	//	DAC_set_value((*function_generator)(sampleCounter));
	//}
	if (channel_index>=channel_count) {
80018dee:	ec f8 01 ec 	ld.w	r8,r6[492]
80018df2:	11 88       	ld.ub	r8,r8[0x0]
80018df4:	5c 58       	castu.b	r8
80018df6:	f3 d8 b0 08 	bfexts	r9,r8,0x0,0x8
80018dfa:	ec f8 01 30 	ld.w	r8,r6[304]
80018dfe:	70 08       	ld.w	r8,r8[0x0]
80018e00:	10 39       	cp.w	r9,r8
80018e02:	e0 89 00 0e 	brgt	80018e1e <processData+0x146>
		oversampling_counter++;
80018e06:	ec f8 01 70 	ld.w	r8,r6[368]
80018e0a:	70 08       	ld.w	r8,r8[0x0]
80018e0c:	f0 c9 ff ff 	sub	r9,r8,-1
80018e10:	ec f8 01 70 	ld.w	r8,r6[368]
80018e14:	91 09       	st.w	r8[0x0],r9
		channel_index=0;
80018e16:	ec f8 01 30 	ld.w	r8,r6[304]
80018e1a:	30 09       	mov	r9,0
80018e1c:	91 09       	st.w	r8[0x0],r9
	}
	if (oversampling_counter>= oversampling) {
80018e1e:	ec f8 01 70 	ld.w	r8,r6[368]
80018e22:	70 09       	ld.w	r9,r8[0x0]
80018e24:	ec f8 03 3c 	ld.w	r8,r6[828]
80018e28:	70 08       	ld.w	r8,r8[0x0]
80018e2a:	10 39       	cp.w	r9,r8
80018e2c:	c4 85       	brlt	80018ebc <processData+0x1e4>
		oversampling_counter=0;
80018e2e:	ec f8 01 70 	ld.w	r8,r6[368]
80018e32:	30 09       	mov	r9,0
80018e34:	91 09       	st.w	r8[0x0],r9
		channel_index=0;
80018e36:	ec f8 01 30 	ld.w	r8,r6[304]
80018e3a:	30 09       	mov	r9,0
80018e3c:	91 09       	st.w	r8[0x0],r9
		for (ch=0; ch<channel_count; ch++) {
80018e3e:	30 08       	mov	r8,0
80018e40:	ef 48 ff f8 	st.w	r7[-8],r8
80018e44:	c2 78       	rjmp	80018e92 <processData+0x1ba>
			adci_buffer[ch + sample_counter*channel_count]=internal_buffer[ch] / oversampling_divider;
80018e46:	ec f8 02 4c 	ld.w	r8,r6[588]
80018e4a:	70 09       	ld.w	r9,r8[0x0]
80018e4c:	ec f8 01 ec 	ld.w	r8,r6[492]
80018e50:	11 88       	ld.ub	r8,r8[0x0]
80018e52:	5c 58       	castu.b	r8
80018e54:	f5 d8 b0 08 	bfexts	r10,r8,0x0,0x8
80018e58:	ec f8 01 14 	ld.w	r8,r6[276]
80018e5c:	70 08       	ld.w	r8,r8[0x0]
80018e5e:	b1 3a       	mul	r10,r8
80018e60:	ee f8 ff f8 	ld.w	r8,r7[-8]
80018e64:	f4 08 00 08 	add	r8,r10,r8
80018e68:	a1 78       	lsl	r8,0x1
80018e6a:	f2 08 00 0a 	add	r10,r9,r8
80018e6e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80018e72:	ec f8 02 08 	ld.w	r8,r6[520]
80018e76:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80018e7a:	ec f9 04 b0 	ld.w	r9,r6[1200]
80018e7e:	72 09       	ld.w	r9,r9[0x0]
80018e80:	f0 09 0c 08 	divs	r8,r8,r9
80018e84:	5c 88       	casts.h	r8
80018e86:	b4 08       	st.h	r10[0x0],r8
		channel_index=0;
	}
	if (oversampling_counter>= oversampling) {
		oversampling_counter=0;
		channel_index=0;
		for (ch=0; ch<channel_count; ch++) {
80018e88:	ee f8 ff f8 	ld.w	r8,r7[-8]
80018e8c:	2f f8       	sub	r8,-1
80018e8e:	ef 48 ff f8 	st.w	r7[-8],r8
80018e92:	ec f8 01 ec 	ld.w	r8,r6[492]
80018e96:	11 88       	ld.ub	r8,r8[0x0]
80018e98:	5c 58       	castu.b	r8
80018e9a:	f3 d8 b0 08 	bfexts	r9,r8,0x0,0x8
80018e9e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80018ea2:	10 39       	cp.w	r9,r8
80018ea4:	fe 99 ff d1 	brgt	80018e46 <processData+0x16e>
			adci_buffer[ch + sample_counter*channel_count]=internal_buffer[ch] / oversampling_divider;
		}
		sample_counter++;
80018ea8:	ec f8 01 14 	ld.w	r8,r6[276]
80018eac:	70 08       	ld.w	r8,r8[0x0]
80018eae:	f0 c9 ff ff 	sub	r9,r8,-1
80018eb2:	ec f8 01 14 	ld.w	r8,r6[276]
80018eb6:	91 09       	st.w	r8[0x0],r9
80018eb8:	c0 28       	rjmp	80018ebc <processData+0x1e4>
	}
	

	if (((adcifa->sr&ADC_INT_SEOS0) ==0) 
	//|| ((adcifa->sr&ADC_INT_SEOS1) ==0) 
	) {return;}
80018eba:	d7 03       	nop
	
	}		
	//DAC_set_value(even_odd*400);
	// acknowledge processing finished
	//adcifa->scr=ADC_INT_SEOS0 | ADC_INT_SEOS1;
}
80018ebc:	2f ed       	sub	sp,-8
80018ebe:	e3 cd 40 c0 	ldm	sp++,r6-r7,lr
80018ec2:	d6 03       	rete
80018ec4:	80 01       	ld.sh	r1,r0[0x0]
80018ec6:	8b 66       	st.w	r5[0x18],r6

80018ec8 <Init_ADCI>:


// Initializes ADC (configures Pins, starts Clock, sets defaults)
void Init_ADCI(uint32_t adc_frequency, uint8_t reference_source, int set_oversampling, int set_oversampling_divider){
80018ec8:	eb cd 40 c0 	pushm	r6-r7,lr
80018ecc:	1a 97       	mov	r7,sp
80018ece:	20 4d       	sub	sp,16
80018ed0:	4b 96       	lddpc	r6,80018fb4 <Init_ADCI+0xec>
80018ed2:	1e 26       	rsub	r6,pc
80018ed4:	ef 4c ff fc 	st.w	r7[-4],r12
80018ed8:	16 98       	mov	r8,r11
80018eda:	ef 4a ff f4 	st.w	r7[-12],r10
80018ede:	ef 49 ff f0 	st.w	r7[-16],r9
80018ee2:	ef 68 ff f8 	st.b	r7[-8],r8

		// Assign and enable GPIO pins to the ADC function.
		gpio_enable_module(ADCIFA_GPIO_MAP, sizeof(ADCIFA_GPIO_MAP) / sizeof(ADCIFA_GPIO_MAP[0]));
80018ee6:	31 3b       	mov	r11,19
80018ee8:	ec fc 08 c8 	ld.w	r12,r6[2248]
80018eec:	f0 16 00 88 	mcall	r6[544]

		adc_config_options.frequency=adc_frequency;
80018ef0:	ec f8 01 00 	ld.w	r8,r6[256]
80018ef4:	ee f9 ff fc 	ld.w	r9,r7[-4]
80018ef8:	91 09       	st.w	r8[0x0],r9
		adc_config_options.reference_source=reference_source;
80018efa:	ec f9 01 00 	ld.w	r9,r6[256]
80018efe:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80018f02:	b2 c8       	st.b	r9[0x4],r8

		// Get ADCIFA Factory Configuration
		adcifa_get_calibration_data(adcifa, &adc_config_options);
80018f04:	ec f8 01 10 	ld.w	r8,r6[272]
80018f08:	70 08       	ld.w	r8,r8[0x0]
80018f0a:	ec fb 01 00 	ld.w	r11,r6[256]
80018f0e:	10 9c       	mov	r12,r8
80018f10:	f0 16 01 fc 	mcall	r6[2032]
		if ((uint16_t)adc_config_options.offset_calibration_value == 0xFFFF){
80018f14:	ec f8 01 00 	ld.w	r8,r6[256]
80018f18:	90 68       	ld.sh	r8,r8[0xc]
80018f1a:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
80018f1e:	3f f8       	mov	r8,-1
80018f20:	f0 09 19 00 	cp.h	r9,r8
80018f24:	c1 51       	brne	80018f4e <Init_ADCI+0x86>
			// Set default calibration if Engineering samples and part is not programmed
			adc_config_options.offset_calibration_value = 0x3B;
80018f26:	ec f9 01 00 	ld.w	r9,r6[256]
80018f2a:	33 b8       	mov	r8,59
80018f2c:	b2 68       	st.h	r9[0xc],r8
			adc_config_options.gain_calibration_value = 0x4210;
80018f2e:	ec f9 01 00 	ld.w	r9,r6[256]
80018f32:	e0 68 42 10 	mov	r8,16912
80018f36:	b2 58       	st.h	r9[0xa],r8
			adc_config_options.sh0_calibration_value = 0x210;
80018f38:	ec f9 01 00 	ld.w	r9,r6[256]
80018f3c:	e0 68 02 10 	mov	r8,528
80018f40:	b2 78       	st.h	r9[0xe],r8
			adc_config_options.sh1_calibration_value = 0x210;
80018f42:	ec f9 01 00 	ld.w	r9,r6[256]
80018f46:	e0 68 02 10 	mov	r8,528
80018f4a:	f3 58 00 10 	st.h	r9[16],r8
		}
		adc_config_options.offset_calibration_value = 0x3B; // offset correction
80018f4e:	ec f9 01 00 	ld.w	r9,r6[256]
80018f52:	33 b8       	mov	r8,59
80018f54:	b2 68       	st.h	r9[0xc],r8

		// Configure ADCIFA core
		adcifa_configure(adcifa, &adc_config_options, FOSC0);
80018f56:	ec f8 01 10 	ld.w	r8,r6[272]
80018f5a:	70 08       	ld.w	r8,r8[0x0]
80018f5c:	e0 6a 24 00 	mov	r10,9216
80018f60:	ea 1a 00 f4 	orh	r10,0xf4
80018f64:	ec fb 01 00 	ld.w	r11,r6[256]
80018f68:	10 9c       	mov	r12,r8
80018f6a:	f0 16 02 18 	mcall	r6[2144]

		clear_adc_sequencer();
80018f6e:	f0 16 01 f4 	mcall	r6[2000]
		continuous_mode=false;
80018f72:	ec f9 03 14 	ld.w	r9,r6[788]
80018f76:	30 08       	mov	r8,0
80018f78:	b2 88       	st.b	r9[0x0],r8
		// Configure ADCIFA sequencer 1
		//adcifa_configure_sequencer(adcifa, 1, &adcifa_sequence_opt, adcifa_sequencer1_conversion_opt);
		
		adcifa_disable_interrupt(adcifa, 0xffffffff);
80018f7a:	ec f8 01 10 	ld.w	r8,r6[272]
80018f7e:	70 08       	ld.w	r8,r8[0x0]
80018f80:	3f fb       	mov	r11,-1
80018f82:	10 9c       	mov	r12,r8
80018f84:	f0 16 01 13 	mcall	r6[1100]
		INTC_register_interrupt( (__int_handler) &processData, AVR32_ADCIFA_SEQUENCER0_IRQ, AVR32_INTC_INT1);
80018f88:	fe c8 02 b0 	sub	r8,pc,688
80018f8c:	30 1a       	mov	r10,1
80018f8e:	e0 6b 04 80 	mov	r11,1152
80018f92:	10 9c       	mov	r12,r8
80018f94:	f0 16 00 3b 	mcall	r6[236]
		//INTC_register_interrupt( (__int_handler) &processData, AVR32_ADCIFA_SEQUENCER1_IRQ, AVR32_INTC_INT1);
		oversampling=set_oversampling;
80018f98:	ec f8 03 3c 	ld.w	r8,r6[828]
80018f9c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80018fa0:	91 09       	st.w	r8[0x0],r9
		oversampling_divider=set_oversampling_divider;
80018fa2:	ec f8 04 b0 	ld.w	r8,r6[1200]
80018fa6:	ee f9 ff f0 	ld.w	r9,r7[-16]
80018faa:	91 09       	st.w	r8[0x0],r9
//	int period_us=1000000/samplingrate;
}
80018fac:	2f cd       	sub	sp,-16
80018fae:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80018fb2:	00 00       	add	r0,r0
80018fb4:	80 01       	ld.sh	r1,r0[0x0]
80018fb6:	8d 56       	st.w	r6[0x14],r6

80018fb8 <clear_adc_sequencer>:
void clear_adc_sequencer() {
80018fb8:	eb cd 40 c0 	pushm	r6-r7,lr
80018fbc:	1a 97       	mov	r7,sp
80018fbe:	48 96       	lddpc	r6,80018fe0 <clear_adc_sequencer+0x28>
80018fc0:	1e 26       	rsub	r6,pc
	sequencer_item_count=0;
80018fc2:	ec f9 01 18 	ld.w	r9,r6[280]
80018fc6:	30 08       	mov	r8,0
80018fc8:	b2 88       	st.b	r9[0x0],r8
	adcifa_sequence_opt.convnb=sequencer_item_count;
80018fca:	ec f8 01 18 	ld.w	r8,r6[280]
80018fce:	11 88       	ld.ub	r8,r8[0x0]
80018fd0:	5c 58       	castu.b	r8
80018fd2:	5c 58       	castu.b	r8
80018fd4:	ec f9 02 94 	ld.w	r9,r6[660]
80018fd8:	b2 88       	st.b	r9[0x0],r8
}
80018fda:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80018fde:	00 00       	add	r0,r0
80018fe0:	80 01       	ld.sh	r1,r0[0x0]
80018fe2:	8e 44       	ld.sh	r4,r7[0x8]

80018fe4 <adc_sequencer_add>:

int8_t adc_sequencer_add(uint8_t input_p, uint8_t input_n, uint8_t gain) {
80018fe4:	eb cd 40 c0 	pushm	r6-r7,lr
80018fe8:	1a 97       	mov	r7,sp
80018fea:	20 3d       	sub	sp,12
80018fec:	4b 36       	lddpc	r6,800190b8 <adc_sequencer_add+0xd4>
80018fee:	1e 26       	rsub	r6,pc
80018ff0:	16 99       	mov	r9,r11
80018ff2:	14 98       	mov	r8,r10
80018ff4:	18 9a       	mov	r10,r12
80018ff6:	ef 6a ff fc 	st.b	r7[-4],r10
80018ffa:	ef 69 ff f8 	st.b	r7[-8],r9
80018ffe:	ef 68 ff f4 	st.b	r7[-12],r8
	
	if (sequencer_item_count<SLOTS_PER_SEQUENCER-1) {
80019002:	ec f8 01 18 	ld.w	r8,r6[280]
80019006:	11 88       	ld.ub	r8,r8[0x0]
80019008:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8001900c:	30 68       	mov	r8,6
8001900e:	f0 09 18 00 	cp.b	r9,r8
80019012:	e0 89 00 4c 	brgt	800190aa <adc_sequencer_add+0xc6>
		adcifa_sequencer0_conversion_opt[sequencer_item_count].channel_p=input_p;
80019016:	ec f8 01 18 	ld.w	r8,r6[280]
8001901a:	11 88       	ld.ub	r8,r8[0x0]
8001901c:	5c 58       	castu.b	r8
8001901e:	f3 d8 b0 08 	bfexts	r9,r8,0x0,0x8
80019022:	ec fa 02 18 	ld.w	r10,r6[536]
80019026:	12 98       	mov	r8,r9
80019028:	a1 78       	lsl	r8,0x1
8001902a:	12 08       	add	r8,r9
8001902c:	f4 08 00 09 	add	r9,r10,r8
80019030:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80019034:	b2 88       	st.b	r9[0x0],r8
		adcifa_sequencer0_conversion_opt[sequencer_item_count].channel_n=input_n;
80019036:	ec f8 01 18 	ld.w	r8,r6[280]
8001903a:	11 88       	ld.ub	r8,r8[0x0]
8001903c:	5c 58       	castu.b	r8
8001903e:	f3 d8 b0 08 	bfexts	r9,r8,0x0,0x8
80019042:	ec fa 02 18 	ld.w	r10,r6[536]
80019046:	12 98       	mov	r8,r9
80019048:	a1 78       	lsl	r8,0x1
8001904a:	12 08       	add	r8,r9
8001904c:	f4 08 00 08 	add	r8,r10,r8
80019050:	f0 c9 ff ff 	sub	r9,r8,-1
80019054:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80019058:	b2 88       	st.b	r9[0x0],r8
		adcifa_sequencer0_conversion_opt[sequencer_item_count].gain=gain;
8001905a:	ec f8 01 18 	ld.w	r8,r6[280]
8001905e:	11 88       	ld.ub	r8,r8[0x0]
80019060:	5c 58       	castu.b	r8
80019062:	f3 d8 b0 08 	bfexts	r9,r8,0x0,0x8
80019066:	ec fa 02 18 	ld.w	r10,r6[536]
8001906a:	12 98       	mov	r8,r9
8001906c:	a1 78       	lsl	r8,0x1
8001906e:	12 08       	add	r8,r9
80019070:	f4 08 00 08 	add	r8,r10,r8
80019074:	f0 c9 ff fe 	sub	r9,r8,-2
80019078:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8001907c:	b2 88       	st.b	r9[0x0],r8
		sequencer_item_count++;
8001907e:	ec f8 01 18 	ld.w	r8,r6[280]
80019082:	11 88       	ld.ub	r8,r8[0x0]
80019084:	5c 58       	castu.b	r8
80019086:	2f f8       	sub	r8,-1
80019088:	5c 58       	castu.b	r8
8001908a:	ec f9 01 18 	ld.w	r9,r6[280]
8001908e:	b2 88       	st.b	r9[0x0],r8
		adcifa_sequence_opt.convnb=sequencer_item_count;
80019090:	ec f8 01 18 	ld.w	r8,r6[280]
80019094:	11 88       	ld.ub	r8,r8[0x0]
80019096:	5c 58       	castu.b	r8
80019098:	5c 58       	castu.b	r8
8001909a:	ec f9 02 94 	ld.w	r9,r6[660]
8001909e:	b2 88       	st.b	r9[0x0],r8
		return sequencer_item_count;
800190a0:	ec f8 01 18 	ld.w	r8,r6[280]
800190a4:	11 88       	ld.ub	r8,r8[0x0]
800190a6:	5c 58       	castu.b	r8
800190a8:	c0 38       	rjmp	800190ae <adc_sequencer_add+0xca>
	} else {
		return -1;
800190aa:	e0 68 00 ff 	mov	r8,255
	}
}
800190ae:	10 9c       	mov	r12,r8
800190b0:	2f dd       	sub	sp,-12
800190b2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800190b6:	00 00       	add	r0,r0
800190b8:	80 01       	ld.sh	r1,r0[0x0]
800190ba:	8e 72       	ld.sh	r2,r7[0xe]

800190bc <ADCI_Start_Sampling>:

// starts sampling, captures one buffer length and then stops
void ADCI_Start_Sampling(int16_t *buffer, int8_t channels, int length, int samplingrate, bool continuous){
800190bc:	eb cd 40 c0 	pushm	r6-r7,lr
800190c0:	1a 97       	mov	r7,sp
800190c2:	20 6d       	sub	sp,24
800190c4:	4a d6       	lddpc	r6,80019178 <ADCI_Start_Sampling+0xbc>
800190c6:	1e 26       	rsub	r6,pc
800190c8:	ef 4c ff f8 	st.w	r7[-8],r12
800190cc:	ef 4a ff f0 	st.w	r7[-16],r10
800190d0:	ef 49 ff ec 	st.w	r7[-20],r9
800190d4:	16 99       	mov	r9,r11
800190d6:	ef 69 ff f4 	st.b	r7[-12],r9
800190da:	ef 68 ff e8 	st.b	r7[-24],r8

	// Configure ADCIFA sequencer 0
	adcifa_configure_sequencer(adcifa, 0, &adcifa_sequence_opt, adcifa_sequencer0_conversion_opt);
800190de:	ec f8 01 10 	ld.w	r8,r6[272]
800190e2:	70 08       	ld.w	r8,r8[0x0]
800190e4:	ec f9 02 18 	ld.w	r9,r6[536]
800190e8:	ec fa 02 94 	ld.w	r10,r6[660]
800190ec:	30 0b       	mov	r11,0
800190ee:	10 9c       	mov	r12,r8
800190f0:	f0 16 01 bb 	mcall	r6[1772]
	adci_buffer=buffer;
800190f4:	ec f8 02 4c 	ld.w	r8,r6[588]
800190f8:	ee f9 ff f8 	ld.w	r9,r7[-8]
800190fc:	91 09       	st.w	r8[0x0],r9
	
	int period_us=adc_config_options.frequency/(samplingrate*oversampling);	
800190fe:	ec f8 01 00 	ld.w	r8,r6[256]
80019102:	70 08       	ld.w	r8,r8[0x0]
80019104:	ec f9 03 3c 	ld.w	r9,r6[828]
80019108:	72 0a       	ld.w	r10,r9[0x0]
8001910a:	ee f9 ff ec 	ld.w	r9,r7[-20]
8001910e:	f4 09 02 49 	mul	r9,r10,r9
80019112:	f0 09 0d 08 	divu	r8,r8,r9
80019116:	ef 48 ff fc 	st.w	r7[-4],r8
	oversampling_counter=0;
8001911a:	ec f8 01 70 	ld.w	r8,r6[368]
8001911e:	30 09       	mov	r9,0
80019120:	91 09       	st.w	r8[0x0],r9
	sample_counter=-10;
80019122:	ec f8 01 14 	ld.w	r8,r6[276]
80019126:	3f 69       	mov	r9,-10
80019128:	91 09       	st.w	r8[0x0],r9
	number_of_samples=length;
8001912a:	ec f8 03 40 	ld.w	r8,r6[832]
8001912e:	ee f9 ff f0 	ld.w	r9,r7[-16]
80019132:	91 09       	st.w	r8[0x0],r9
	continuous_mode=continuous;
80019134:	ec f9 03 14 	ld.w	r9,r6[788]
80019138:	ef 38 ff e8 	ld.ub	r8,r7[-24]
8001913c:	b2 88       	st.b	r9[0x0],r8
	channel_count=channels;
8001913e:	ec f9 01 ec 	ld.w	r9,r6[492]
80019142:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80019146:	b2 88       	st.b	r9[0x0],r8
	channel_index=0;
80019148:	ec f8 01 30 	ld.w	r8,r6[304]
8001914c:	30 09       	mov	r9,0
8001914e:	91 09       	st.w	r8[0x0],r9
	
	adcifa_enable_interrupt(adcifa, ADC_INT_SEOS0);
80019150:	ec f8 01 10 	ld.w	r8,r6[272]
80019154:	70 08       	ld.w	r8,r8[0x0]
80019156:	30 1b       	mov	r11,1
80019158:	10 9c       	mov	r12,r8
8001915a:	f0 16 01 46 	mcall	r6[1304]
	//adcifa_enable_interrupt(adcifa, ADC_INT_SEOS1);
	adcifa_start_itimer(adcifa, period_us);
8001915e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80019162:	ec f8 01 10 	ld.w	r8,r6[272]
80019166:	70 08       	ld.w	r8,r8[0x0]
80019168:	12 9b       	mov	r11,r9
8001916a:	10 9c       	mov	r12,r8
8001916c:	f0 16 01 d7 	mcall	r6[1884]
}
80019170:	2f ad       	sub	sp,-24
80019172:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80019176:	00 00       	add	r0,r0
80019178:	80 01       	ld.sh	r1,r0[0x0]
8001917a:	8f 4a       	st.w	r7[0x10],r10

8001917c <ADCI_Stop_Sampling>:

// stops sampling immediately
void ADCI_Stop_Sampling(){
8001917c:	eb cd 40 c0 	pushm	r6-r7,lr
80019180:	1a 97       	mov	r7,sp
80019182:	48 66       	lddpc	r6,80019198 <ADCI_Stop_Sampling+0x1c>
80019184:	1e 26       	rsub	r6,pc
	adcifa_stop_itimer(adcifa);
80019186:	ec f8 01 10 	ld.w	r8,r6[272]
8001918a:	70 08       	ld.w	r8,r8[0x0]
8001918c:	10 9c       	mov	r12,r8
8001918e:	f0 16 00 f0 	mcall	r6[960]
	
}
80019192:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80019196:	00 00       	add	r0,r0
80019198:	80 01       	ld.sh	r1,r0[0x0]
8001919a:	90 08       	ld.sh	r8,r8[0x0]

8001919c <ADCI_Sampling_Complete>:

// Returns true if one-shot sampling has finished
Bool ADCI_Sampling_Complete(){
8001919c:	eb cd 40 c0 	pushm	r6-r7,lr
800191a0:	1a 97       	mov	r7,sp
800191a2:	48 86       	lddpc	r6,800191c0 <ADCI_Sampling_Complete+0x24>
800191a4:	1e 26       	rsub	r6,pc
	return (sample_counter>=number_of_samples);
800191a6:	ec f8 01 14 	ld.w	r8,r6[276]
800191aa:	70 0a       	ld.w	r10,r8[0x0]
800191ac:	ec f8 03 40 	ld.w	r8,r6[832]
800191b0:	70 09       	ld.w	r9,r8[0x0]
800191b2:	30 18       	mov	r8,1
800191b4:	12 3a       	cp.w	r10,r9
800191b6:	c0 24       	brge	800191ba <ADCI_Sampling_Complete+0x1e>
800191b8:	30 08       	mov	r8,0
}
800191ba:	10 9c       	mov	r12,r8
800191bc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800191c0:	80 01       	ld.sh	r1,r0[0x0]
800191c2:	90 28       	ld.sh	r8,r8[0x4]

800191c4 <ADCI_get_sample>:
//void set_DAC_generator_function(generatorfunction new_function_generator ) {
//	function_generator=new_function_generator;
	
//}

int16_t ADCI_get_sample(int channel, int sample) {
800191c4:	eb cd 40 c0 	pushm	r6-r7,lr
800191c8:	1a 97       	mov	r7,sp
800191ca:	20 2d       	sub	sp,8
800191cc:	48 f6       	lddpc	r6,80019208 <ADCI_get_sample+0x44>
800191ce:	1e 26       	rsub	r6,pc
800191d0:	ef 4c ff fc 	st.w	r7[-4],r12
800191d4:	ef 4b ff f8 	st.w	r7[-8],r11
	return adci_buffer[channel + channel_count*sample];
800191d8:	ec f8 02 4c 	ld.w	r8,r6[588]
800191dc:	70 09       	ld.w	r9,r8[0x0]
800191de:	ec f8 01 ec 	ld.w	r8,r6[492]
800191e2:	11 88       	ld.ub	r8,r8[0x0]
800191e4:	5c 58       	castu.b	r8
800191e6:	f5 d8 b0 08 	bfexts	r10,r8,0x0,0x8
800191ea:	ee f8 ff f8 	ld.w	r8,r7[-8]
800191ee:	b1 3a       	mul	r10,r8
800191f0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800191f4:	f4 08 00 08 	add	r8,r10,r8
800191f8:	a1 78       	lsl	r8,0x1
800191fa:	f2 08 00 08 	add	r8,r9,r8
800191fe:	90 08       	ld.sh	r8,r8[0x0]
}
80019200:	10 9c       	mov	r12,r8
80019202:	2f ed       	sub	sp,-8
80019204:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80019208:	80 01       	ld.sh	r1,r0[0x0]
8001920a:	90 52       	ld.sh	r2,r8[0xa]

8001920c <ADCI_get_buffer>:

int16_t* ADCI_get_buffer() {
8001920c:	eb cd 40 c0 	pushm	r6-r7,lr
80019210:	1a 97       	mov	r7,sp
80019212:	48 56       	lddpc	r6,80019224 <ADCI_get_buffer+0x18>
80019214:	1e 26       	rsub	r6,pc
	return adci_buffer;
80019216:	ec f8 02 4c 	ld.w	r8,r6[588]
8001921a:	70 08       	ld.w	r8,r8[0x0]
}
8001921c:	10 9c       	mov	r12,r8
8001921e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80019222:	00 00       	add	r0,r0
80019224:	80 01       	ld.sh	r1,r0[0x0]
80019226:	90 98       	ld.uh	r8,r8[0x2]

80019228 <ADCI_get_sampling_status>:
	
int ADCI_get_sampling_status() {
80019228:	eb cd 40 c0 	pushm	r6-r7,lr
8001922c:	1a 97       	mov	r7,sp
8001922e:	48 56       	lddpc	r6,80019240 <ADCI_get_sampling_status+0x18>
80019230:	1e 26       	rsub	r6,pc
	return sample_counter;
80019232:	ec f8 01 14 	ld.w	r8,r6[276]
80019236:	70 08       	ld.w	r8,r8[0x0]
}
80019238:	10 9c       	mov	r12,r8
8001923a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001923e:	00 00       	add	r0,r0
80019240:	80 01       	ld.sh	r1,r0[0x0]
80019242:	90 b4       	ld.uh	r4,r8[0x6]

80019244 <genclk_config_defaults>:
	uint32_t ctrl;
};

static inline void genclk_config_defaults(struct genclk_config *cfg,
		unsigned int id)
{
80019244:	eb cd 40 80 	pushm	r7,lr
80019248:	1a 97       	mov	r7,sp
8001924a:	20 2d       	sub	sp,8
8001924c:	ef 4c ff fc 	st.w	r7[-4],r12
80019250:	ef 4b ff f8 	st.w	r7[-8],r11
	cfg->ctrl = 0;
80019254:	ee f8 ff fc 	ld.w	r8,r7[-4]
80019258:	30 09       	mov	r9,0
8001925a:	91 09       	st.w	r8[0x0],r9
}
8001925c:	2f ed       	sub	sp,-8
8001925e:	e3 cd 80 80 	ldm	sp++,r7,pc

80019262 <genclk_config_set_source>:
	AVR32_SCIF.gcctrl[id] = cfg->ctrl;
}

static inline void genclk_config_set_source(struct genclk_config *cfg,
		enum genclk_source src)
{
80019262:	eb cd 40 80 	pushm	r7,lr
80019266:	1a 97       	mov	r7,sp
80019268:	20 2d       	sub	sp,8
8001926a:	ef 4c ff fc 	st.w	r7[-4],r12
8001926e:	ef 4b ff f8 	st.w	r7[-8],r11
	cfg->ctrl = (cfg->ctrl & ~AVR32_SCIF_GCCTRL_OSCSEL_MASK)
80019272:	ee f8 ff fc 	ld.w	r8,r7[-4]
80019276:	70 08       	ld.w	r8,r8[0x0]
80019278:	10 99       	mov	r9,r8
8001927a:	e0 19 f0 ff 	andl	r9,0xf0ff
			| (src << AVR32_SCIF_GCCTRL_OSCSEL);
8001927e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80019282:	a9 68       	lsl	r8,0x8
}

static inline void genclk_config_set_source(struct genclk_config *cfg,
		enum genclk_source src)
{
	cfg->ctrl = (cfg->ctrl & ~AVR32_SCIF_GCCTRL_OSCSEL_MASK)
80019284:	10 49       	or	r9,r8
80019286:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001928a:	91 09       	st.w	r8[0x0],r9
			| (src << AVR32_SCIF_GCCTRL_OSCSEL);
}
8001928c:	2f ed       	sub	sp,-8
8001928e:	e3 cd 80 80 	ldm	sp++,r7,pc

80019292 <genclk_config_set_divider>:

static inline void genclk_config_set_divider(struct genclk_config *cfg,
		unsigned int divider)
{
80019292:	eb cd 40 80 	pushm	r7,lr
80019296:	1a 97       	mov	r7,sp
80019298:	20 2d       	sub	sp,8
8001929a:	ef 4c ff fc 	st.w	r7[-4],r12
8001929e:	ef 4b ff f8 	st.w	r7[-8],r11
	Assert(divider > 0 && divider <= GENCLK_DIV_MAX);

	/* Clear all the bits we're about to modify */
	cfg->ctrl &= ~(AVR32_SCIF_GCCTRL_DIVEN_MASK
800192a2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800192a6:	70 08       	ld.w	r8,r8[0x0]
800192a8:	10 99       	mov	r9,r8
800192aa:	e4 19 ff 00 	andh	r9,0xff00
800192ae:	e0 19 ff fd 	andl	r9,0xfffd
800192b2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800192b6:	91 09       	st.w	r8[0x0],r9
			| AVR32_SCIF_GCCTRL_DIV_MASK);

	if (divider > 1) {
800192b8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800192bc:	58 18       	cp.w	r8,1
800192be:	e0 88 00 17 	brls	800192ec <genclk_config_set_divider+0x5a>
		cfg->ctrl |= 1U << AVR32_SCIF_GCCTRL_DIVEN;
800192c2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800192c6:	70 08       	ld.w	r8,r8[0x0]
800192c8:	10 99       	mov	r9,r8
800192ca:	a1 b9       	sbr	r9,0x1
800192cc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800192d0:	91 09       	st.w	r8[0x0],r9
		cfg->ctrl |= (((divider + 1) / 2) - 1) << AVR32_SCIF_GCCTRL_DIV;
800192d2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800192d6:	70 09       	ld.w	r9,r8[0x0]
800192d8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800192dc:	2f f8       	sub	r8,-1
800192de:	a1 98       	lsr	r8,0x1
800192e0:	20 18       	sub	r8,1
800192e2:	b1 68       	lsl	r8,0x10
800192e4:	10 49       	or	r9,r8
800192e6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800192ea:	91 09       	st.w	r8[0x0],r9
	}
}
800192ec:	2f ed       	sub	sp,-8
800192ee:	e3 cd 80 80 	ldm	sp++,r7,pc

800192f2 <genclk_enable>:

static inline void genclk_enable(const struct genclk_config *cfg,
		unsigned int id)
{
800192f2:	eb cd 40 80 	pushm	r7,lr
800192f6:	1a 97       	mov	r7,sp
800192f8:	20 2d       	sub	sp,8
800192fa:	ef 4c ff fc 	st.w	r7[-4],r12
800192fe:	ef 4b ff f8 	st.w	r7[-8],r11
	AVR32_SCIF.gcctrl[id] = cfg->ctrl | (1U << AVR32_SCIF_GCCTRL_CEN);
80019302:	fe 78 08 00 	mov	r8,-63488
80019306:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001930a:	ee fa ff fc 	ld.w	r10,r7[-4]
8001930e:	74 0a       	ld.w	r10,r10[0x0]
80019310:	a1 aa       	sbr	r10,0x0
80019312:	2e 79       	sub	r9,-25
80019314:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
}
80019318:	2f ed       	sub	sp,-8
8001931a:	e3 cd 80 80 	ldm	sp++,r7,pc

8001931e <genclk_disable>:

static inline void genclk_disable(unsigned int id)
{
8001931e:	eb cd 40 80 	pushm	r7,lr
80019322:	1a 97       	mov	r7,sp
80019324:	20 1d       	sub	sp,4
80019326:	ef 4c ff fc 	st.w	r7[-4],r12
	AVR32_SCIF.gcctrl[id] = 0;
8001932a:	fe 78 08 00 	mov	r8,-63488
8001932e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80019332:	2e 79       	sub	r9,-25
80019334:	30 0a       	mov	r10,0
80019336:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
}
8001933a:	2f fd       	sub	sp,-4
8001933c:	e3 cd 80 80 	ldm	sp++,r7,pc

80019340 <get_interrupt_counter>:
#define EXT_INT_LINES 1
eic_options_t eic_options[EXT_INT_LINES];  
 
 

int get_interrupt_counter(void) {
80019340:	eb cd 40 c0 	pushm	r6-r7,lr
80019344:	1a 97       	mov	r7,sp
80019346:	48 56       	lddpc	r6,80019358 <get_interrupt_counter+0x18>
80019348:	1e 26       	rsub	r6,pc
	return interrupt_counter;
8001934a:	ec f8 08 c4 	ld.w	r8,r6[2244]
8001934e:	70 08       	ld.w	r8,r8[0x0]
}
80019350:	10 9c       	mov	r12,r8
80019352:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80019356:	00 00       	add	r0,r0
80019358:	80 01       	ld.sh	r1,r0[0x0]
8001935a:	91 cc       	st.w	r8[0x30],r12

8001935c <processData>:


void processData(void) {
8001935c:	eb cd 40 c0 	pushm	r6-r7,lr
80019360:	1a 97       	mov	r7,sp
80019362:	20 3d       	sub	sp,12
80019364:	4b e6       	lddpc	r6,8001945c <processData+0x100>
80019366:	1e 26       	rsub	r6,pc
	int ch;
	int32_t value;
	if (sampleCounter>=ADC_BUFFER_SIZE) {
80019368:	ec f8 01 44 	ld.w	r8,r6[324]
8001936c:	70 08       	ld.w	r8,r8[0x0]
8001936e:	e0 48 03 ff 	cp.w	r8,1023
80019372:	e0 89 00 70 	brgt	80019452 <processData+0xf6>
		return;
	}	
	uint8_t* buffer =get_spi_in_buffer(ADC_SPI_INDEX);
80019376:	30 0c       	mov	r12,0
80019378:	f0 16 01 c5 	mcall	r6[1812]
8001937c:	18 98       	mov	r8,r12
8001937e:	ef 48 ff fc 	st.w	r7[-4],r8
	for (ch=0; ch<4; ch++) {
80019382:	30 08       	mov	r8,0
80019384:	ef 48 ff f4 	st.w	r7[-12],r8
80019388:	c4 48       	rjmp	80019410 <processData+0xb4>
		value=(buffer[3*ch]<<24) + (buffer[3*ch+1]<<16)+(buffer[3*ch+2]<<8);
8001938a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001938e:	12 98       	mov	r8,r9
80019390:	a1 78       	lsl	r8,0x1
80019392:	12 08       	add	r8,r9
80019394:	ee f9 ff fc 	ld.w	r9,r7[-4]
80019398:	f2 08 00 08 	add	r8,r9,r8
8001939c:	11 88       	ld.ub	r8,r8[0x0]
8001939e:	f0 0a 15 18 	lsl	r10,r8,0x18
800193a2:	ee f9 ff f4 	ld.w	r9,r7[-12]
800193a6:	12 98       	mov	r8,r9
800193a8:	a1 78       	lsl	r8,0x1
800193aa:	12 08       	add	r8,r9
800193ac:	2f f8       	sub	r8,-1
800193ae:	ee f9 ff fc 	ld.w	r9,r7[-4]
800193b2:	f2 08 00 08 	add	r8,r9,r8
800193b6:	11 88       	ld.ub	r8,r8[0x0]
800193b8:	b1 68       	lsl	r8,0x10
800193ba:	10 0a       	add	r10,r8
800193bc:	ee f9 ff f4 	ld.w	r9,r7[-12]
800193c0:	12 98       	mov	r8,r9
800193c2:	a1 78       	lsl	r8,0x1
800193c4:	12 08       	add	r8,r9
800193c6:	2f e8       	sub	r8,-2
800193c8:	ee f9 ff fc 	ld.w	r9,r7[-4]
800193cc:	f2 08 00 08 	add	r8,r9,r8
800193d0:	11 88       	ld.ub	r8,r8[0x0]
800193d2:	a9 68       	lsl	r8,0x8
800193d4:	f4 08 00 08 	add	r8,r10,r8
800193d8:	ef 48 ff f8 	st.w	r7[-8],r8
		adc_buffer[ch][sampleCounter]=(value/256);
800193dc:	ee fb ff f4 	ld.w	r11,r7[-12]
800193e0:	ec f8 01 44 	ld.w	r8,r6[324]
800193e4:	70 09       	ld.w	r9,r8[0x0]
800193e6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800193ea:	f0 ca ff 01 	sub	r10,r8,-255
800193ee:	58 08       	cp.w	r8,0
800193f0:	f4 08 17 50 	movlt	r8,r10
800193f4:	a9 48       	asr	r8,0x8
800193f6:	10 9a       	mov	r10,r8
800193f8:	ec f8 04 ac 	ld.w	r8,r6[1196]
800193fc:	ab 6b       	lsl	r11,0xa
800193fe:	f6 09 00 09 	add	r9,r11,r9
80019402:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	int32_t value;
	if (sampleCounter>=ADC_BUFFER_SIZE) {
		return;
	}	
	uint8_t* buffer =get_spi_in_buffer(ADC_SPI_INDEX);
	for (ch=0; ch<4; ch++) {
80019406:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001940a:	2f f8       	sub	r8,-1
8001940c:	ef 48 ff f4 	st.w	r7[-12],r8
80019410:	ee f8 ff f4 	ld.w	r8,r7[-12]
80019414:	58 38       	cp.w	r8,3
80019416:	fe 9a ff ba 	brle	8001938a <processData+0x2e>
		value=(buffer[3*ch]<<24) + (buffer[3*ch+1]<<16)+(buffer[3*ch+2]<<8);
		adc_buffer[ch][sampleCounter]=(value/256);
		
	}
	
	if (function_generator!=NULL) {
8001941a:	ec f8 02 60 	ld.w	r8,r6[608]
8001941e:	70 08       	ld.w	r8,r8[0x0]
80019420:	58 08       	cp.w	r8,0
80019422:	c0 f0       	breq	80019440 <processData+0xe4>
		DAC_set_value((*function_generator)(sampleCounter));
80019424:	ec f8 02 60 	ld.w	r8,r6[608]
80019428:	70 08       	ld.w	r8,r8[0x0]
8001942a:	ec f9 01 44 	ld.w	r9,r6[324]
8001942e:	72 09       	ld.w	r9,r9[0x0]
80019430:	12 9c       	mov	r12,r9
80019432:	5d 18       	icall	r8
80019434:	18 98       	mov	r8,r12
80019436:	5c 88       	casts.h	r8
80019438:	5c 78       	castu.h	r8
8001943a:	10 9c       	mov	r12,r8
8001943c:	f0 16 01 b3 	mcall	r6[1740]
	}		
	
	sampleCounter++;	
80019440:	ec f8 01 44 	ld.w	r8,r6[324]
80019444:	70 08       	ld.w	r8,r8[0x0]
80019446:	f0 c9 ff ff 	sub	r9,r8,-1
8001944a:	ec f8 01 44 	ld.w	r8,r6[324]
8001944e:	91 09       	st.w	r8[0x0],r9
80019450:	c0 28       	rjmp	80019454 <processData+0xf8>

void processData(void) {
	int ch;
	int32_t value;
	if (sampleCounter>=ADC_BUFFER_SIZE) {
		return;
80019452:	d7 03       	nop
		DAC_set_value((*function_generator)(sampleCounter));
	}		
	
	sampleCounter++;	
	
}  
80019454:	2f dd       	sub	sp,-12
80019456:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001945a:	00 00       	add	r0,r0
8001945c:	80 01       	ld.sh	r1,r0[0x0]
8001945e:	91 ea       	st.w	r8[0x38],r10

80019460 <set_DAC_generator_function>:

void set_DAC_generator_function(generatorfunction new_function_generator ) {
80019460:	eb cd 40 c0 	pushm	r6-r7,lr
80019464:	1a 97       	mov	r7,sp
80019466:	20 1d       	sub	sp,4
80019468:	48 66       	lddpc	r6,80019480 <set_DAC_generator_function+0x20>
8001946a:	1e 26       	rsub	r6,pc
8001946c:	ef 4c ff fc 	st.w	r7[-4],r12
	function_generator=new_function_generator;
80019470:	ec f8 02 60 	ld.w	r8,r6[608]
80019474:	ee f9 ff fc 	ld.w	r9,r7[-4]
80019478:	91 09       	st.w	r8[0x0],r9
	
}
8001947a:	2f fd       	sub	sp,-4
8001947c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80019480:	80 01       	ld.sh	r1,r0[0x0]
80019482:	92 ee       	ld.uh	lr,r9[0xc]

80019484 <get_sample>:

float get_sample(int channel, int sample) {
80019484:	eb cd 40 c0 	pushm	r6-r7,lr
80019488:	1a 97       	mov	r7,sp
8001948a:	20 2d       	sub	sp,8
8001948c:	48 c6       	lddpc	r6,800194bc <get_sample+0x38>
8001948e:	1e 26       	rsub	r6,pc
80019490:	ef 4c ff fc 	st.w	r7[-4],r12
80019494:	ef 4b ff f8 	st.w	r7[-8],r11
	return adc_buffer[channel][sample];
80019498:	ee fa ff fc 	ld.w	r10,r7[-4]
8001949c:	ee f9 ff f8 	ld.w	r9,r7[-8]
800194a0:	ec f8 04 ac 	ld.w	r8,r6[1196]
800194a4:	ab 6a       	lsl	r10,0xa
800194a6:	f4 09 00 09 	add	r9,r10,r9
800194aa:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800194ae:	e5 a6 08 08 	cop	cp0,cr8,cr0,cr8,0x4c
}
800194b2:	10 9c       	mov	r12,r8
800194b4:	2f ed       	sub	sp,-8
800194b6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800194ba:	00 00       	add	r0,r0
800194bc:	80 01       	ld.sh	r1,r0[0x0]
800194be:	93 12       	st.w	r9[0x4],r2

800194c0 <get_sampling_status>:

int get_sampling_status(void) {
800194c0:	eb cd 40 c0 	pushm	r6-r7,lr
800194c4:	1a 97       	mov	r7,sp
800194c6:	48 56       	lddpc	r6,800194d8 <get_sampling_status+0x18>
800194c8:	1e 26       	rsub	r6,pc
	return sampleCounter;
800194ca:	ec f8 01 44 	ld.w	r8,r6[324]
800194ce:	70 08       	ld.w	r8,r8[0x0]
}
800194d0:	10 9c       	mov	r12,r8
800194d2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800194d6:	00 00       	add	r0,r0
800194d8:	80 01       	ld.sh	r1,r0[0x0]
800194da:	93 4c       	st.w	r9[0x10],r12

800194dc <Init_ADC>:

// Initializes ADC (configures Pins, starts Clock, sets defaults)
void Init_ADC(void) {
800194dc:	eb cd 40 c0 	pushm	r6-r7,lr
800194e0:	1a 97       	mov	r7,sp
800194e2:	4b 96       	lddpc	r6,800195c4 <Init_ADC+0xe8>
800194e4:	1e 26       	rsub	r6,pc
	function_generator=NULL;
800194e6:	ec f8 02 60 	ld.w	r8,r6[608]
800194ea:	30 09       	mov	r9,0
800194ec:	91 09       	st.w	r8[0x0],r9
	// set mode to "high resolution"
	gpio_configure_pin(ADC_MODE0,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);	
800194ee:	30 3b       	mov	r11,3
800194f0:	32 3c       	mov	r12,35
800194f2:	f0 16 00 39 	mcall	r6[228]
	gpio_configure_pin(ADC_MODE1,GPIO_DIR_OUTPUT | GPIO_INIT_LOW);	
800194f6:	30 1b       	mov	r11,1
800194f8:	32 4c       	mov	r12,36
800194fa:	f0 16 00 39 	mcall	r6[228]
	// set Format to Fixed-position TDM via SPI
	gpio_configure_pin(ADC_FORMAT0,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);	
800194fe:	30 3b       	mov	r11,3
80019500:	32 2c       	mov	r12,34
80019502:	f0 16 00 39 	mcall	r6[228]
	gpio_configure_pin(ADC_FORMAT1,GPIO_DIR_OUTPUT | GPIO_INIT_LOW);	
80019506:	30 1b       	mov	r11,1
80019508:	32 1c       	mov	r12,33
8001950a:	f0 16 00 39 	mcall	r6[228]
	gpio_configure_pin(ADC_FORMAT2,GPIO_DIR_OUTPUT | GPIO_INIT_LOW);	
8001950e:	30 1b       	mov	r11,1
80019510:	32 0c       	mov	r12,32
80019512:	f0 16 00 39 	mcall	r6[228]
	
	// configure the four channels
	gpio_configure_pin(ADC_PWDN1,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);	
80019516:	30 3b       	mov	r11,3
80019518:	34 0c       	mov	r12,64
8001951a:	f0 16 00 39 	mcall	r6[228]
	gpio_configure_pin(ADC_PWDN2,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);	
8001951e:	30 3b       	mov	r11,3
80019520:	34 1c       	mov	r12,65
80019522:	f0 16 00 39 	mcall	r6[228]
	gpio_configure_pin(ADC_PWDN3,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);	
80019526:	30 3b       	mov	r11,3
80019528:	34 2c       	mov	r12,66
8001952a:	f0 16 00 39 	mcall	r6[228]
	gpio_configure_pin(ADC_PWDN4,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);	
8001952e:	30 3b       	mov	r11,3
80019530:	34 3c       	mov	r12,67
80019532:	f0 16 00 39 	mcall	r6[228]

	
	//gpio_configure_pin(AVR32_TC1_B0_0_0_PIN,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);	
	//gpio_configure_pin(AVR32_PIN_PC19, GPIO_DIR_OUTPUT| GPIO_INIT_HIGH);	

	ADC_Switch_Clock(true);	
80019536:	30 1c       	mov	r12,1
80019538:	f0 16 01 4f 	mcall	r6[1340]
	//tc_write_rc(tc, EXAMPLE_TC_CHANNEL_ID, 0x2);     // Set RC value.
	// Start the timer/counter.
	//tc_start(tc, EXAMPLE_TC_CHANNEL_ID);
	
	// Enable edge-triggered interrupt.
	eic_options[0].eic_mode   = EIC_MODE_EDGE_TRIGGERED;
8001953c:	ec f9 01 5c 	ld.w	r9,r6[348]
80019540:	30 08       	mov	r8,0
80019542:	b2 98       	st.b	r9[0x1],r8
	// Interrupt will trigger on falling edge.
	eic_options[0].eic_edge  = EIC_EDGE_FALLING_EDGE;
80019544:	ec f9 01 5c 	ld.w	r9,r6[348]
80019548:	30 08       	mov	r8,0
8001954a:	b2 a8       	st.b	r9[0x2],r8
	// Initialize in synchronous mode : interrupt is synchronized to the clock
	eic_options[0].eic_async  = EIC_SYNCH_MODE;
8001954c:	ec f9 01 5c 	ld.w	r9,r6[348]
80019550:	30 08       	mov	r8,0
80019552:	b2 d8       	st.b	r9[0x5],r8
	// Set the interrupt line number.
	eic_options[0].eic_line   = EXT_NMI;
80019554:	ec f9 01 5c 	ld.w	r9,r6[348]
80019558:	30 08       	mov	r8,0
8001955a:	b2 88       	st.b	r9[0x0],r8
	
	gpio_enable_module_pin(AVR32_EIC_EXTINT_0_1_PIN, AVR32_EIC_EXTINT_0_1_FUNCTION);
8001955c:	30 1b       	mov	r11,1
8001955e:	37 5c       	mov	r12,117
80019560:	f0 16 00 3c 	mcall	r6[240]
	
	//Disable_global_interrupt();
// Initialize interrupt vectors.
	
	eic_init(&AVR32_EIC, eic_options, 1);
80019564:	30 1a       	mov	r10,1
80019566:	ec fb 01 5c 	ld.w	r11,r6[348]
8001956a:	fe 7c 14 00 	mov	r12,-60416
8001956e:	f0 16 01 ab 	mcall	r6[1708]

	//INTC_init_interrupts();
	// initialise SPI0 interface
	initSPI(&AVR32_SPI0, ADC_SPI_INDEX);
80019572:	30 0b       	mov	r11,0
80019574:	fc 7c 18 00 	mov	r12,-190464
80019578:	f0 16 01 38 	mcall	r6[1248]
	spiInitDMA(0, 12);
8001957c:	30 cb       	mov	r11,12
8001957e:	30 0c       	mov	r12,0
80019580:	f0 16 01 9b 	mcall	r6[1644]
	setSPIcallBack(ADC_SPI_INDEX, &processData);
80019584:	ec fb 06 90 	ld.w	r11,r6[1680]
80019588:	30 0c       	mov	r12,0
8001958a:	f0 16 01 7d 	mcall	r6[1524]
	// Register the EIC interrupt handlers to the interrupt controller.
	//INTC_register_interrupt(&eic_int_handler1, AVR32_EIC_IRQ_1, AVR32_INTC_INT1);
	// Enable the chosen lines and their corresponding interrupt feature.
	eic_enable_line(&AVR32_EIC, eic_options[0].eic_line);
8001958e:	ec f8 01 5c 	ld.w	r8,r6[348]
80019592:	11 88       	ld.ub	r8,r8[0x0]
80019594:	10 9b       	mov	r11,r8
80019596:	fe 7c 14 00 	mov	r12,-60416
8001959a:	f0 16 01 cd 	mcall	r6[1844]
	eic_enable_interrupt_line(&AVR32_EIC, eic_options[0].eic_line);
8001959e:	ec f8 01 5c 	ld.w	r8,r6[348]
800195a2:	11 88       	ld.ub	r8,r8[0x0]
800195a4:	10 9b       	mov	r11,r8
800195a6:	fe 7c 14 00 	mov	r12,-60416
800195aa:	f0 16 01 77 	mcall	r6[1500]
	
	
	//Enable_global_interrupt();
	eic_clear_interrupt_line(&AVR32_EIC, EXT_NMI);
800195ae:	30 0b       	mov	r11,0
800195b0:	fe 7c 14 00 	mov	r12,-60416
800195b4:	f0 16 00 d2 	mcall	r6[840]
	
	// activate sync and clkdiv
	gpio_configure_pin(ADC_CLKDIV,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);	
800195b8:	30 3b       	mov	r11,3
800195ba:	32 5c       	mov	r12,37
800195bc:	f0 16 00 39 	mcall	r6[228]

}
800195c0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800195c4:	80 01       	ld.sh	r1,r0[0x0]
800195c6:	93 68       	st.w	r9[0x18],r8

800195c8 <ADC_Switch_Clock>:

// Enable/Disable the clock to the ADC
void ADC_Switch_Clock(Bool on_off) {
800195c8:	eb cd 40 c0 	pushm	r6-r7,lr
800195cc:	1a 97       	mov	r7,sp
800195ce:	20 1d       	sub	sp,4
800195d0:	49 56       	lddpc	r6,80019624 <ADC_Switch_Clock+0x5c>
800195d2:	1e 26       	rsub	r6,pc
800195d4:	18 98       	mov	r8,r12
800195d6:	ef 68 ff fc 	st.b	r7[-4],r8
	if (on_off==true) {
800195da:	ef 39 ff fc 	ld.ub	r9,r7[-4]
800195de:	30 18       	mov	r8,1
800195e0:	f0 09 18 00 	cp.b	r9,r8
800195e4:	c1 a1       	brne	80019618 <ADC_Switch_Clock+0x50>
		gpio_enable_module_pin(AVR32_SCIF_GCLK_1_1_PIN, AVR32_SCIF_GCLK_1_1_FUNCTION);	
800195e6:	30 1b       	mov	r11,1
800195e8:	35 4c       	mov	r12,84
800195ea:	f0 16 00 3c 	mcall	r6[240]

		gpio_configure_pin(ADC_CLKDIV,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);	
800195ee:	30 3b       	mov	r11,3
800195f0:	32 5c       	mov	r12,37
800195f2:	f0 16 00 39 	mcall	r6[228]
	
	
		//scif_gc_setup(AVR32_SCIF_GCLK_GCLK0PIN, SCIF_GCCTRL_CPUCLOCK, 1, 1);
		//scif_gc_enable(AVR32_SCIF_GCLK_GCLK0PIN);
		genclk_config_defaults(&gcfg, AVR32_SCIF_GCLK_GCLK1PIN);
800195f6:	30 ab       	mov	r11,10
800195f8:	ec fc 02 00 	ld.w	r12,r6[512]
800195fc:	c2 4e       	rcall	80019244 <genclk_config_defaults>
		genclk_config_set_source(&gcfg, GENCLK_SRC_PLL1);
800195fe:	30 6b       	mov	r11,6
80019600:	ec fc 02 00 	ld.w	r12,r6[512]
80019604:	c2 fe       	rcall	80019262 <genclk_config_set_source>
		genclk_config_set_divider(&gcfg, 2);
80019606:	30 2b       	mov	r11,2
80019608:	ec fc 02 00 	ld.w	r12,r6[512]
8001960c:	c4 3e       	rcall	80019292 <genclk_config_set_divider>
		genclk_enable(&gcfg, AVR32_SCIF_GCLK_GCLK1PIN);
8001960e:	30 ab       	mov	r11,10
80019610:	ec fc 02 00 	ld.w	r12,r6[512]
80019614:	c6 fe       	rcall	800192f2 <genclk_enable>
80019616:	c0 38       	rjmp	8001961c <ADC_Switch_Clock+0x54>
	} else {
		genclk_disable(AVR32_SCIF_GCLK_GCLK1PIN);
80019618:	30 ac       	mov	r12,10
8001961a:	c8 2e       	rcall	8001931e <genclk_disable>
		
	}
}
8001961c:	2f fd       	sub	sp,-4
8001961e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80019622:	00 00       	add	r0,r0
80019624:	80 01       	ld.sh	r1,r0[0x0]
80019626:	94 56       	ld.sh	r6,r10[0xa]

80019628 <ADC_Switch_Channel>:

// Switch the four input channels on or off
void ADC_Switch_Channel(int channel, Bool on_off){
80019628:	eb cd 40 80 	pushm	r7,lr
8001962c:	1a 97       	mov	r7,sp
8001962e:	20 2d       	sub	sp,8
80019630:	ef 4c ff fc 	st.w	r7[-4],r12
80019634:	16 98       	mov	r8,r11
80019636:	ef 68 ff f8 	st.b	r7[-8],r8
	
}
8001963a:	2f ed       	sub	sp,-8
8001963c:	e3 cd 80 80 	ldm	sp++,r7,pc

80019640 <ADC_Set_Mode>:

// configures the ADC mode (refer to datasheet for options)
void ADC_Set_Mode(int mode){};
80019640:	eb cd 40 80 	pushm	r7,lr
80019644:	1a 97       	mov	r7,sp
80019646:	20 1d       	sub	sp,4
80019648:	ef 4c ff fc 	st.w	r7[-4],r12
8001964c:	2f fd       	sub	sp,-4
8001964e:	e3 cd 80 80 	ldm	sp++,r7,pc

80019652 <ADC_Start_Oneshot>:

// enables continuous sampling  -- not implemented yet
//void ADC_Start_Sampling(void){}

// starts sampling, captures one buffer length and then stops
void ADC_Start_Oneshot(void){
80019652:	eb cd 40 c0 	pushm	r6-r7,lr
80019656:	1a 97       	mov	r7,sp
80019658:	48 46       	lddpc	r6,80019668 <ADC_Start_Oneshot+0x16>
8001965a:	1e 26       	rsub	r6,pc
	//Disable_global_interrupt();
	//eic_enable_interrupt_line(&AVR32_EIC, eic_options[0].eic_line);
	sampleCounter=0;
8001965c:	ec f8 01 44 	ld.w	r8,r6[324]
80019660:	30 09       	mov	r9,0
80019662:	91 09       	st.w	r8[0x0],r9
	//Enable_global_interrupt();
};
80019664:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80019668:	80 01       	ld.sh	r1,r0[0x0]
8001966a:	94 de       	ld.uh	lr,r10[0xa]

8001966c <ADC_Stop_Sampling>:

// stops sampling immediately
void ADC_Stop_Sampling(void){};
8001966c:	eb cd 40 80 	pushm	r7,lr
80019670:	1a 97       	mov	r7,sp
80019672:	e3 cd 80 80 	ldm	sp++,r7,pc

80019676 <Sampling_Complete>:

// Returns true if one-shot sampling has finished
Bool Sampling_Complete(void){};
80019676:	eb cd 40 80 	pushm	r7,lr
8001967a:	1a 97       	mov	r7,sp
8001967c:	e3 cd 80 80 	ldm	sp++,r7,pc

80019680 <eic_nmi_handler>:
__attribute__((__naked__))

void eic_nmi_handler( void )
{
//	int i=0;
	__asm__ __volatile__ (
80019680:	d7 f1       	pushm	r0-r12,lr
			/* Save registers not saved upon NMI exception. */
			"pushm   r0-r12, lr\n\t"
			);
	//interrupt_counter++;
	
	if (sampleCounter<ADC_BUFFER_SIZE) {
80019682:	ec f8 01 44 	ld.w	r8,r6[324]
80019686:	70 08       	ld.w	r8,r8[0x0]
80019688:	e0 48 03 ff 	cp.w	r8,1023
8001968c:	e0 89 00 06 	brgt	80019698 <eic_nmi_handler+0x18>
		spiTriggerDMA(0, 12);
80019690:	30 cb       	mov	r11,12
80019692:	30 0c       	mov	r12,0
80019694:	f0 16 01 7f 	mcall	r6[1532]
	} else {
		//eic_disable_interrupt_line(&AVR32_EIC,eic_options[0].eic_line);

	}
	eic_clear_interrupt_line(&AVR32_EIC, EXT_NMI);
80019698:	30 0b       	mov	r11,0
8001969a:	fe 7c 14 00 	mov	r12,-60416
8001969e:	f0 16 00 d2 	mcall	r6[840]
	__asm__ __volatile__ (
800196a2:	d7 f2       	popm	r0-r12,lr
800196a4:	d6 03       	rete
	...

800196a8 <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
800196a8:	eb cd 40 c0 	pushm	r6-r7,lr
800196ac:	1a 97       	mov	r7,sp
800196ae:	20 6d       	sub	sp,24
800196b0:	49 e6       	lddpc	r6,80019728 <interpolate+0x80>
800196b2:	1e 26       	rsub	r6,pc
800196b4:	ef 4c ff f8 	st.w	r7[-8],r12
800196b8:	ef 4b ff f4 	st.w	r7[-12],r11
800196bc:	ef 4a ff f0 	st.w	r7[-16],r10
800196c0:	ef 49 ff ec 	st.w	r7[-20],r9
800196c4:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
800196c8:	ee f9 ff f4 	ld.w	r9,r7[-12]
800196cc:	ee f8 ff f0 	ld.w	r8,r7[-16]
800196d0:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
800196d4:	c0 41       	brne	800196dc <interpolate+0x34>
	{
		return y1;
800196d6:	ee f8 ff ec 	ld.w	r8,r7[-20]
800196da:	c2 38       	rjmp	80019720 <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
800196dc:	ee f9 ff e8 	ld.w	r9,r7[-24]
800196e0:	ee f8 ff ec 	ld.w	r8,r7[-20]
800196e4:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
800196e8:	ee fa ff f8 	ld.w	r10,r7[-8]
800196ec:	ee f8 ff f4 	ld.w	r8,r7[-12]
800196f0:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
800196f4:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
800196f8:	ee fa ff f0 	ld.w	r10,r7[-16]
800196fc:	ee f9 ff f4 	ld.w	r9,r7[-12]
80019700:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80019704:	12 9b       	mov	r11,r9
80019706:	10 9c       	mov	r12,r8
80019708:	f0 16 00 08 	mcall	r6[32]
8001970c:	18 98       	mov	r8,r12
8001970e:	10 99       	mov	r9,r8
80019710:	ee f8 ff ec 	ld.w	r8,r7[-20]
80019714:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80019718:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
8001971c:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
80019720:	10 9c       	mov	r12,r8
80019722:	2f ad       	sub	sp,-24
80019724:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80019728:	80 01       	ld.sh	r1,r0[0x0]
8001972a:	95 36       	st.w	r10[0xc],r6

8001972c <init_adxl345_slow>:
uint8_t data_configuration[2] ={
DATA_SETTING_ADDRESS, FULL_RES | RANGE_16G};



void init_adxl345_slow(void) {
8001972c:	eb cd 40 c0 	pushm	r6-r7,lr
80019730:	1a 97       	mov	r7,sp
80019732:	48 f6       	lddpc	r6,8001976c <init_adxl345_slow+0x40>
80019734:	1e 26       	rsub	r6,pc
		.speed = 400000,
		.chip = ADXL_ALT_SLAVE_ADDRESS, 
		.smbus=false
	};

	twim_master_init(&AVR32_TWIM0, &twi_opt);
80019736:	ec fb 08 c0 	ld.w	r11,r6[2240]
8001973a:	fe 7c 38 00 	mov	r12,-51200
8001973e:	f0 16 00 69 	mcall	r6[420]
	twim_write(&AVR32_TWIM0, (uint8_t*)&default_configuration, 2, ADXL_ALT_SLAVE_ADDRESS, false);
80019742:	30 08       	mov	r8,0
80019744:	35 39       	mov	r9,83
80019746:	30 2a       	mov	r10,2
80019748:	ec fb 03 64 	ld.w	r11,r6[868]
8001974c:	fe 7c 38 00 	mov	r12,-51200
80019750:	f0 16 00 38 	mcall	r6[224]
	twim_write(&AVR32_TWIM0, (uint8_t*)&data_configuration, 2, ADXL_ALT_SLAVE_ADDRESS, false);
80019754:	30 08       	mov	r8,0
80019756:	35 39       	mov	r9,83
80019758:	30 2a       	mov	r10,2
8001975a:	ec fb 08 5c 	ld.w	r11,r6[2140]
8001975e:	fe 7c 38 00 	mov	r12,-51200
80019762:	f0 16 00 38 	mcall	r6[224]
}
80019766:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001976a:	00 00       	add	r0,r0
8001976c:	80 01       	ld.sh	r1,r0[0x0]
8001976e:	95 b8       	st.w	r10[0x2c],r8

80019770 <get_acc_data_slow>:


acc_data* get_acc_data_slow(void) {
80019770:	eb cd 40 c0 	pushm	r6-r7,lr
80019774:	1a 97       	mov	r7,sp
80019776:	20 2d       	sub	sp,8
80019778:	4a 76       	lddpc	r6,80019814 <get_acc_data_slow+0xa4>
8001977a:	1e 26       	rsub	r6,pc
	int i;
	uint8_t write_then_read_preamble=SENSOR_REG_ADDRESS;
8001977c:	33 28       	mov	r8,50
8001977e:	ef 68 ff fb 	st.b	r7[-5],r8
	twim_write(&AVR32_TWIM0, (uint8_t*) &write_then_read_preamble, 1, ADXL_ALT_SLAVE_ADDRESS, false);
80019782:	ee cb 00 05 	sub	r11,r7,5
80019786:	30 08       	mov	r8,0
80019788:	35 39       	mov	r9,83
8001978a:	30 1a       	mov	r10,1
8001978c:	fe 7c 38 00 	mov	r12,-51200
80019790:	f0 16 00 38 	mcall	r6[224]
	twim_read(&AVR32_TWIM0, (uint8_t*)&acc_outputs, 6, ADXL_ALT_SLAVE_ADDRESS, false);
80019794:	30 08       	mov	r8,0
80019796:	35 39       	mov	r9,83
80019798:	30 6a       	mov	r10,6
8001979a:	ec fb 01 e8 	ld.w	r11,r6[488]
8001979e:	fe 7c 38 00 	mov	r12,-51200
800197a2:	f0 16 00 62 	mcall	r6[392]
	
	for (i=0; i<3; i++) {
800197a6:	30 08       	mov	r8,0
800197a8:	ef 48 ff fc 	st.w	r7[-4],r8
800197ac:	c2 98       	rjmp	800197fe <get_acc_data_slow+0x8e>
		acc_outputs.axes[i]=(int16_t)(acc_outputs.raw_data[2*i])+(int16_t)(acc_outputs.raw_data[2*i+1]<<8);
800197ae:	ee fb ff fc 	ld.w	r11,r7[-4]
800197b2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800197b6:	a1 78       	lsl	r8,0x1
800197b8:	ec f9 01 e8 	ld.w	r9,r6[488]
800197bc:	f2 08 07 08 	ld.ub	r8,r9[r8]
800197c0:	5c 58       	castu.b	r8
800197c2:	10 99       	mov	r9,r8
800197c4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800197c8:	a1 78       	lsl	r8,0x1
800197ca:	2f f8       	sub	r8,-1
800197cc:	ec fa 01 e8 	ld.w	r10,r6[488]
800197d0:	f4 08 07 08 	ld.ub	r8,r10[r8]
800197d4:	5c 58       	castu.b	r8
800197d6:	a9 68       	lsl	r8,0x8
800197d8:	5c 88       	casts.h	r8
800197da:	f2 08 00 08 	add	r8,r9,r8
800197de:	5c 88       	casts.h	r8
800197e0:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
800197e4:	ec fa 01 e8 	ld.w	r10,r6[488]
800197e8:	f6 c8 ff fe 	sub	r8,r11,-2
800197ec:	a1 78       	lsl	r8,0x1
800197ee:	f4 08 00 08 	add	r8,r10,r8
800197f2:	b0 19       	st.h	r8[0x2],r9
	int i;
	uint8_t write_then_read_preamble=SENSOR_REG_ADDRESS;
	twim_write(&AVR32_TWIM0, (uint8_t*) &write_then_read_preamble, 1, ADXL_ALT_SLAVE_ADDRESS, false);
	twim_read(&AVR32_TWIM0, (uint8_t*)&acc_outputs, 6, ADXL_ALT_SLAVE_ADDRESS, false);
	
	for (i=0; i<3; i++) {
800197f4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800197f8:	2f f8       	sub	r8,-1
800197fa:	ef 48 ff fc 	st.w	r7[-4],r8
800197fe:	ee f8 ff fc 	ld.w	r8,r7[-4]
80019802:	58 28       	cp.w	r8,2
80019804:	fe 9a ff d5 	brle	800197ae <get_acc_data_slow+0x3e>
		acc_outputs.axes[i]=(int16_t)(acc_outputs.raw_data[2*i])+(int16_t)(acc_outputs.raw_data[2*i+1]<<8);
	}			
	return &acc_outputs;
80019808:	ec f8 01 e8 	ld.w	r8,r6[488]
8001980c:	10 9c       	mov	r12,r8
8001980e:	2f ed       	sub	sp,-8
80019810:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80019814:	80 01       	ld.sh	r1,r0[0x0]
80019816:	95 fe       	st.w	r10[0x3c],lr

80019818 <f_abs>:

	}
	return result;
}

static inline float f_abs(const float a){
80019818:	eb cd 40 80 	pushm	r7,lr
8001981c:	1a 97       	mov	r7,sp
8001981e:	20 1d       	sub	sp,4
80019820:	ef 4c ff fc 	st.w	r7[-4],r12
	if (a >= 0.0)
80019824:	30 18       	mov	r8,1
80019826:	ee fa ff fc 	ld.w	r10,r7[-4]
8001982a:	30 09       	mov	r9,0
8001982c:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80019830:	e0 8c 00 03 	brvs	80019836 <f_abs+0x1e>
80019834:	c0 24       	brge	80019838 <f_abs+0x20>
80019836:	30 08       	mov	r8,0
80019838:	5c 58       	castu.b	r8
8001983a:	c0 40       	breq	80019842 <f_abs+0x2a>
	{
		return a;
8001983c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80019840:	c0 58       	rjmp	8001984a <f_abs+0x32>
	}else{
		return -a;
80019842:	ee f8 ff fc 	ld.w	r8,r7[-4]
80019846:	ee 18 80 00 	eorh	r8,0x8000
	}
}
8001984a:	10 9c       	mov	r12,r8
8001984c:	2f fd       	sub	sp,-4
8001984e:	e3 cd 80 80 	ldm	sp++,r7,pc

80019852 <median_filter_3x>:
static float inline center_window_4(float x) {
	return 1.0/(1+SQR(SQR(x)));
}


static float inline median_filter_3x(float a, float b, float c) {
80019852:	eb cd 40 80 	pushm	r7,lr
80019856:	1a 97       	mov	r7,sp
80019858:	20 4d       	sub	sp,16
8001985a:	ef 4c ff f8 	st.w	r7[-8],r12
8001985e:	ef 4b ff f4 	st.w	r7[-12],r11
80019862:	ef 4a ff f0 	st.w	r7[-16],r10
	float middle;
	if ((a <= b) && (a <= c)) {
80019866:	30 18       	mov	r8,1
80019868:	ee fa ff f8 	ld.w	r10,r7[-8]
8001986c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80019870:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80019874:	e0 8c 00 04 	brvs	8001987c <median_filter_3x+0x2a>
80019878:	e0 8a 00 03 	brle	8001987e <median_filter_3x+0x2c>
8001987c:	30 08       	mov	r8,0
8001987e:	5c 58       	castu.b	r8
80019880:	c2 50       	breq	800198ca <median_filter_3x+0x78>
80019882:	30 18       	mov	r8,1
80019884:	ee fa ff f8 	ld.w	r10,r7[-8]
80019888:	ee f9 ff f0 	ld.w	r9,r7[-16]
8001988c:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80019890:	e0 8c 00 04 	brvs	80019898 <median_filter_3x+0x46>
80019894:	e0 8a 00 03 	brle	8001989a <median_filter_3x+0x48>
80019898:	30 08       	mov	r8,0
8001989a:	5c 58       	castu.b	r8
8001989c:	c1 70       	breq	800198ca <median_filter_3x+0x78>
		middle = (b <= c) ? b : c;
8001989e:	30 18       	mov	r8,1
800198a0:	ee fa ff f4 	ld.w	r10,r7[-12]
800198a4:	ee f9 ff f0 	ld.w	r9,r7[-16]
800198a8:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
800198ac:	e0 8c 00 04 	brvs	800198b4 <median_filter_3x+0x62>
800198b0:	e0 8a 00 03 	brle	800198b6 <median_filter_3x+0x64>
800198b4:	30 08       	mov	r8,0
800198b6:	5c 58       	castu.b	r8
800198b8:	c0 40       	breq	800198c0 <median_filter_3x+0x6e>
800198ba:	ee f8 ff f4 	ld.w	r8,r7[-12]
800198be:	c0 38       	rjmp	800198c4 <median_filter_3x+0x72>
800198c0:	ee f8 ff f0 	ld.w	r8,r7[-16]
800198c4:	ef 48 ff fc 	st.w	r7[-4],r8
}


static float inline median_filter_3x(float a, float b, float c) {
	float middle;
	if ((a <= b) && (a <= c)) {
800198c8:	c4 88       	rjmp	80019958 <median_filter_3x+0x106>
		middle = (b <= c) ? b : c;
	}
	else if ((b <= a) && (b <= c))
800198ca:	30 18       	mov	r8,1
800198cc:	ee fa ff f4 	ld.w	r10,r7[-12]
800198d0:	ee f9 ff f8 	ld.w	r9,r7[-8]
800198d4:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
800198d8:	e0 8c 00 04 	brvs	800198e0 <median_filter_3x+0x8e>
800198dc:	e0 8a 00 03 	brle	800198e2 <median_filter_3x+0x90>
800198e0:	30 08       	mov	r8,0
800198e2:	5c 58       	castu.b	r8
800198e4:	c2 50       	breq	8001992e <median_filter_3x+0xdc>
800198e6:	30 18       	mov	r8,1
800198e8:	ee fa ff f4 	ld.w	r10,r7[-12]
800198ec:	ee f9 ff f0 	ld.w	r9,r7[-16]
800198f0:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
800198f4:	e0 8c 00 04 	brvs	800198fc <median_filter_3x+0xaa>
800198f8:	e0 8a 00 03 	brle	800198fe <median_filter_3x+0xac>
800198fc:	30 08       	mov	r8,0
800198fe:	5c 58       	castu.b	r8
80019900:	c1 70       	breq	8001992e <median_filter_3x+0xdc>
	{
		middle = (a <= c) ? a : c;
80019902:	30 18       	mov	r8,1
80019904:	ee fa ff f8 	ld.w	r10,r7[-8]
80019908:	ee f9 ff f0 	ld.w	r9,r7[-16]
8001990c:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80019910:	e0 8c 00 04 	brvs	80019918 <median_filter_3x+0xc6>
80019914:	e0 8a 00 03 	brle	8001991a <median_filter_3x+0xc8>
80019918:	30 08       	mov	r8,0
8001991a:	5c 58       	castu.b	r8
8001991c:	c0 40       	breq	80019924 <median_filter_3x+0xd2>
8001991e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80019922:	c0 38       	rjmp	80019928 <median_filter_3x+0xd6>
80019924:	ee f8 ff f0 	ld.w	r8,r7[-16]
80019928:	ef 48 ff fc 	st.w	r7[-4],r8
static float inline median_filter_3x(float a, float b, float c) {
	float middle;
	if ((a <= b) && (a <= c)) {
		middle = (b <= c) ? b : c;
	}
	else if ((b <= a) && (b <= c))
8001992c:	c1 68       	rjmp	80019958 <median_filter_3x+0x106>
	{
		middle = (a <= c) ? a : c;
	} else {
	   middle = (a <= b) ? a : b;
8001992e:	30 18       	mov	r8,1
80019930:	ee fa ff f8 	ld.w	r10,r7[-8]
80019934:	ee f9 ff f4 	ld.w	r9,r7[-12]
80019938:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
8001993c:	e0 8c 00 04 	brvs	80019944 <median_filter_3x+0xf2>
80019940:	e0 8a 00 03 	brle	80019946 <median_filter_3x+0xf4>
80019944:	30 08       	mov	r8,0
80019946:	5c 58       	castu.b	r8
80019948:	c0 40       	breq	80019950 <median_filter_3x+0xfe>
8001994a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001994e:	c0 38       	rjmp	80019954 <median_filter_3x+0x102>
80019950:	ee f8 ff f4 	ld.w	r8,r7[-12]
80019954:	ef 48 ff fc 	st.w	r7[-4],r8
	}
	return middle;
80019958:	ee f8 ff fc 	ld.w	r8,r7[-4]

}
8001995c:	10 9c       	mov	r12,r8
8001995e:	2f cd       	sub	sp,-16
80019960:	e3 cd 80 80 	ldm	sp++,r7,pc

80019964 <interpolate>:


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
80019964:	eb cd 40 c0 	pushm	r6-r7,lr
80019968:	1a 97       	mov	r7,sp
8001996a:	20 6d       	sub	sp,24
8001996c:	49 e6       	lddpc	r6,800199e4 <interpolate+0x80>
8001996e:	1e 26       	rsub	r6,pc
80019970:	ef 4c ff f8 	st.w	r7[-8],r12
80019974:	ef 4b ff f4 	st.w	r7[-12],r11
80019978:	ef 4a ff f0 	st.w	r7[-16],r10
8001997c:	ef 49 ff ec 	st.w	r7[-20],r9
80019980:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
80019984:	ee f9 ff f4 	ld.w	r9,r7[-12]
80019988:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001998c:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
80019990:	c0 41       	brne	80019998 <interpolate+0x34>
	{
		return y1;
80019992:	ee f8 ff ec 	ld.w	r8,r7[-20]
80019996:	c2 38       	rjmp	800199dc <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
80019998:	ee f9 ff e8 	ld.w	r9,r7[-24]
8001999c:	ee f8 ff ec 	ld.w	r8,r7[-20]
800199a0:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
800199a4:	ee fa ff f8 	ld.w	r10,r7[-8]
800199a8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800199ac:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
800199b0:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
800199b4:	ee fa ff f0 	ld.w	r10,r7[-16]
800199b8:	ee f9 ff f4 	ld.w	r9,r7[-12]
800199bc:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
800199c0:	12 9b       	mov	r11,r9
800199c2:	10 9c       	mov	r12,r8
800199c4:	f0 16 00 08 	mcall	r6[32]
800199c8:	18 98       	mov	r8,r12
800199ca:	10 99       	mov	r9,r8
800199cc:	ee f8 ff ec 	ld.w	r8,r7[-20]
800199d0:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
800199d4:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
800199d8:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
800199dc:	10 9c       	mov	r12,r8
800199de:	2f ad       	sub	sp,-24
800199e0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800199e4:	80 01       	ld.sh	r1,r0[0x0]
800199e6:	97 f2       	st.w	r11[0x3c],r2

800199e8 <bmp085_read_int>:
#include <stdbool.h>
#include "print_util.h"

pressure_data pressure_outputs;

int16_t bmp085_read_int(unsigned char address) {
800199e8:	eb cd 40 c0 	pushm	r6-r7,lr
800199ec:	1a 97       	mov	r7,sp
800199ee:	20 2d       	sub	sp,8
800199f0:	48 f6       	lddpc	r6,80019a2c <bmp085_read_int+0x44>
800199f2:	1e 26       	rsub	r6,pc
800199f4:	18 98       	mov	r8,r12
800199f6:	ef 68 ff f8 	st.b	r7[-8],r8
	int16_t result;
	twim_write(&AVR32_TWIM0, (uint8_t*) &address, 1, BMP085_SLAVE_ADDRESS, false);
800199fa:	ee cb 00 08 	sub	r11,r7,8
800199fe:	30 08       	mov	r8,0
80019a00:	37 79       	mov	r9,119
80019a02:	30 1a       	mov	r10,1
80019a04:	fe 7c 38 00 	mov	r12,-51200
80019a08:	f0 16 00 38 	mcall	r6[224]
	twim_read(&AVR32_TWIM0, (uint8_t*)&(result), 2, BMP085_SLAVE_ADDRESS, false);
80019a0c:	ee cb 00 02 	sub	r11,r7,2
80019a10:	30 08       	mov	r8,0
80019a12:	37 79       	mov	r9,119
80019a14:	30 2a       	mov	r10,2
80019a16:	fe 7c 38 00 	mov	r12,-51200
80019a1a:	f0 16 00 62 	mcall	r6[392]
	return result;
80019a1e:	ef 08 ff fe 	ld.sh	r8,r7[-2]
}
80019a22:	10 9c       	mov	r12,r8
80019a24:	2f ed       	sub	sp,-8
80019a26:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80019a2a:	00 00       	add	r0,r0
80019a2c:	80 01       	ld.sh	r1,r0[0x0]
80019a2e:	98 76       	ld.sh	r6,r12[0xe]

80019a30 <init_bmp085>:

void init_bmp085(){
80019a30:	eb cd 40 c0 	pushm	r6-r7,lr
80019a34:	1a 97       	mov	r7,sp
80019a36:	20 1d       	sub	sp,4
80019a38:	49 36       	lddpc	r6,80019a84 <init_bmp085+0x54>
80019a3a:	1e 26       	rsub	r6,pc
	int i;
	pressure_outputs.altitude_offset=0.0;
80019a3c:	ec f8 00 4c 	ld.w	r8,r6[76]
80019a40:	30 09       	mov	r9,0
80019a42:	91 89       	st.w	r8[0x20],r9
	for (i=0; i<3; i++) pressure_outputs.last_altitudes[i]=0.0;
80019a44:	30 08       	mov	r8,0
80019a46:	ef 48 ff fc 	st.w	r7[-4],r8
80019a4a:	c0 e8       	rjmp	80019a66 <init_bmp085+0x36>
80019a4c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80019a50:	ec f8 00 4c 	ld.w	r8,r6[76]
80019a54:	2f c9       	sub	r9,-4
80019a56:	30 0a       	mov	r10,0
80019a58:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
80019a5c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80019a60:	2f f8       	sub	r8,-1
80019a62:	ef 48 ff fc 	st.w	r7[-4],r8
80019a66:	ee f8 ff fc 	ld.w	r8,r7[-4]
80019a6a:	58 28       	cp.w	r8,2
80019a6c:	fe 9a ff f0 	brle	80019a4c <init_bmp085+0x1c>
	pressure_outputs.vario_vz=0.0;
80019a70:	ec f8 00 4c 	ld.w	r8,r6[76]
80019a74:	30 09       	mov	r9,0
80019a76:	91 99       	st.w	r8[0x24],r9
	init_bmp085_slow();
80019a78:	f0 16 01 eb 	mcall	r6[1964]
}
80019a7c:	2f fd       	sub	sp,-4
80019a7e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80019a82:	00 00       	add	r0,r0
80019a84:	80 01       	ld.sh	r1,r0[0x0]
80019a86:	98 be       	ld.uh	lr,r12[0x6]
80019a88:	42 4d       	lddsp	sp,sp[0x90]
80019a8a:	50 38       	stdsp	sp[0xc],r8
80019a8c:	35 2f       	mov	pc,82
80019a8e:	31 38       	mov	r8,19
80019a90:	30 20       	mov	r0,2
80019a92:	70 72       	ld.w	r2,r8[0x1c]
80019a94:	65 73       	ld.w	r3,r2[0x5c]
80019a96:	73 75       	ld.w	r5,r9[0x5c]
80019a98:	72 65       	ld.w	r5,r9[0x18]
80019a9a:	20 73       	sub	r3,7
80019a9c:	65 6e       	ld.w	lr,r2[0x58]
80019a9e:	73 6f       	ld.w	pc,r9[0x58]
80019aa0:	72 20       	ld.w	r0,r9[0x8]
80019aa2:	66 6f       	ld.w	pc,r3[0x18]
80019aa4:	75 6e       	ld.w	lr,r10[0x58]
80019aa6:	64 20       	ld.w	r0,r2[0x8]
80019aa8:	28 30       	sub	r0,-125
80019aaa:	78 37       	ld.w	r7,r12[0xc]
80019aac:	37 29       	mov	r9,114
80019aae:	0a 00       	add	r0,r5
80019ab0:	42 4d       	lddsp	sp,sp[0x90]
80019ab2:	50 38       	stdsp	sp[0xc],r8
80019ab4:	35 2f       	mov	pc,82
80019ab6:	31 38       	mov	r8,19
80019ab8:	30 20       	mov	r0,2
80019aba:	70 72       	ld.w	r2,r8[0x1c]
80019abc:	65 73       	ld.w	r3,r2[0x5c]
80019abe:	73 75       	ld.w	r5,r9[0x5c]
80019ac0:	72 65       	ld.w	r5,r9[0x18]
80019ac2:	20 73       	sub	r3,7
80019ac4:	65 6e       	ld.w	lr,r2[0x58]
80019ac6:	73 6f       	ld.w	pc,r9[0x58]
80019ac8:	72 20       	ld.w	r0,r9[0x8]
80019aca:	6e 6f       	ld.w	pc,r7[0x18]
80019acc:	74 20       	ld.w	r0,r10[0x8]
80019ace:	72 65       	ld.w	r5,r9[0x18]
80019ad0:	73 70       	ld.w	r0,r9[0x5c]
80019ad2:	6f 6e       	ld.w	lr,r7[0x58]
80019ad4:	64 69       	ld.w	r9,r2[0x18]
80019ad6:	6e 67       	ld.w	r7,r7[0x18]
80019ad8:	20 28       	sub	r8,2
80019ada:	30 78       	mov	r8,7
80019adc:	37 37       	mov	r7,115
80019ade:	29 0a       	sub	r10,-112
	...

80019ae2 <init_bmp085_slow>:

  int16_t ac1, ac2, ac3, b1, b2, mb, mc, md;
  uint16_t ac4, ac5, ac6;


void init_bmp085_slow(){
80019ae2:	eb cd 40 c0 	pushm	r6-r7,lr
80019ae6:	1a 97       	mov	r7,sp
80019ae8:	4d 36       	lddpc	r6,80019c34 <init_bmp085_slow+0x152>
80019aea:	1e 26       	rsub	r6,pc
		.speed = 400000,
		.chip = BMP085_SLAVE_ADDRESS,
		.smbus=false
	};

	twim_master_init(&AVR32_TWIM0, &twi_opt);
80019aec:	ec fb 08 bc 	ld.w	r11,r6[2236]
80019af0:	fe 7c 38 00 	mov	r12,-51200
80019af4:	f0 16 00 69 	mcall	r6[420]

	if (twim_probe(&AVR32_TWIM0, BMP085_SLAVE_ADDRESS)==STATUS_OK) {
80019af8:	37 7b       	mov	r11,119
80019afa:	fe 7c 38 00 	mov	r12,-51200
80019afe:	f0 16 00 fe 	mcall	r6[1016]
80019b02:	18 98       	mov	r8,r12
80019b04:	58 08       	cp.w	r8,0
80019b06:	e0 81 00 8f 	brne	80019c24 <init_bmp085_slow+0x142>
		dbg_print("BMP85/180 pressure sensor found (0x77)\n");
80019b0a:	fe cc 00 82 	sub	r12,pc,130
80019b0e:	f0 16 00 01 	mcall	r6[4]
	} else {
		dbg_print("BMP85/180 pressure sensor not responding (0x77)\n");
		return;
	}
	ac1 = 408;
80019b12:	ec f9 03 10 	ld.w	r9,r6[784]
80019b16:	e0 68 01 98 	mov	r8,408
80019b1a:	b2 08       	st.h	r9[0x0],r8
	ac2 = -72;
80019b1c:	ec f9 02 e8 	ld.w	r9,r6[744]
80019b20:	3b 88       	mov	r8,-72
80019b22:	b2 08       	st.h	r9[0x0],r8
	ac3 = -14383;
80019b24:	ec f9 02 74 	ld.w	r9,r6[628]
80019b28:	fe 78 c7 d1 	mov	r8,-14383
80019b2c:	b2 08       	st.h	r9[0x0],r8
	ac4 = 32741;
80019b2e:	ec f9 02 cc 	ld.w	r9,r6[716]
80019b32:	e0 68 7f e5 	mov	r8,32741
80019b36:	b2 08       	st.h	r9[0x0],r8
	ac5 = 32757;
80019b38:	ec f9 02 ec 	ld.w	r9,r6[748]
80019b3c:	e0 68 7f f5 	mov	r8,32757
80019b40:	b2 08       	st.h	r9[0x0],r8
	ac6 = 23153;
80019b42:	ec f9 02 fc 	ld.w	r9,r6[764]
80019b46:	e0 68 5a 71 	mov	r8,23153
80019b4a:	b2 08       	st.h	r9[0x0],r8
	mc = -8711;
80019b4c:	ec f9 02 a8 	ld.w	r9,r6[680]
80019b50:	fe 78 dd f9 	mov	r8,-8711
80019b54:	b2 08       	st.h	r9[0x0],r8
	md = 2868;
80019b56:	ec f9 02 d4 	ld.w	r9,r6[724]
80019b5a:	e0 68 0b 34 	mov	r8,2868
80019b5e:	b2 08       	st.h	r9[0x0],r8
	b1 = 6190;
80019b60:	ec f9 03 04 	ld.w	r9,r6[772]
80019b64:	e0 68 18 2e 	mov	r8,6190
80019b68:	b2 08       	st.h	r9[0x0],r8
	b2 = 4;
80019b6a:	ec f9 03 20 	ld.w	r9,r6[800]
80019b6e:	30 48       	mov	r8,4
80019b70:	b2 08       	st.h	r9[0x0],r8

	
	ac1=bmp085_read_int(0xAA);
80019b72:	e0 6c 00 aa 	mov	r12,170
80019b76:	f0 16 00 43 	mcall	r6[268]
80019b7a:	18 98       	mov	r8,r12
80019b7c:	ec f9 03 10 	ld.w	r9,r6[784]
80019b80:	b2 08       	st.h	r9[0x0],r8
	ac2=bmp085_read_int(0xAC);
80019b82:	e0 6c 00 ac 	mov	r12,172
80019b86:	f0 16 00 43 	mcall	r6[268]
80019b8a:	18 98       	mov	r8,r12
80019b8c:	ec f9 02 e8 	ld.w	r9,r6[744]
80019b90:	b2 08       	st.h	r9[0x0],r8
	ac3=bmp085_read_int(0xAE);
80019b92:	e0 6c 00 ae 	mov	r12,174
80019b96:	f0 16 00 43 	mcall	r6[268]
80019b9a:	18 98       	mov	r8,r12
80019b9c:	ec f9 02 74 	ld.w	r9,r6[628]
80019ba0:	b2 08       	st.h	r9[0x0],r8
	ac4=bmp085_read_int(0xB0);
80019ba2:	e0 6c 00 b0 	mov	r12,176
80019ba6:	f0 16 00 43 	mcall	r6[268]
80019baa:	18 98       	mov	r8,r12
80019bac:	ec f9 02 cc 	ld.w	r9,r6[716]
80019bb0:	b2 08       	st.h	r9[0x0],r8
	ac5=bmp085_read_int(0xB2);
80019bb2:	e0 6c 00 b2 	mov	r12,178
80019bb6:	f0 16 00 43 	mcall	r6[268]
80019bba:	18 98       	mov	r8,r12
80019bbc:	ec f9 02 ec 	ld.w	r9,r6[748]
80019bc0:	b2 08       	st.h	r9[0x0],r8
	ac6=bmp085_read_int(0xB4);
80019bc2:	e0 6c 00 b4 	mov	r12,180
80019bc6:	f0 16 00 43 	mcall	r6[268]
80019bca:	18 98       	mov	r8,r12
80019bcc:	ec f9 02 fc 	ld.w	r9,r6[764]
80019bd0:	b2 08       	st.h	r9[0x0],r8
	b1=bmp085_read_int(0xB6);
80019bd2:	e0 6c 00 b6 	mov	r12,182
80019bd6:	f0 16 00 43 	mcall	r6[268]
80019bda:	18 98       	mov	r8,r12
80019bdc:	ec f9 03 04 	ld.w	r9,r6[772]
80019be0:	b2 08       	st.h	r9[0x0],r8
	b2=bmp085_read_int(0xB8);
80019be2:	e0 6c 00 b8 	mov	r12,184
80019be6:	f0 16 00 43 	mcall	r6[268]
80019bea:	18 98       	mov	r8,r12
80019bec:	ec f9 03 20 	ld.w	r9,r6[800]
80019bf0:	b2 08       	st.h	r9[0x0],r8
	mb=bmp085_read_int(0xBA);
80019bf2:	e0 6c 00 ba 	mov	r12,186
80019bf6:	f0 16 00 43 	mcall	r6[268]
80019bfa:	18 98       	mov	r8,r12
80019bfc:	ec f9 07 fc 	ld.w	r9,r6[2044]
80019c00:	b2 08       	st.h	r9[0x0],r8
	mc=bmp085_read_int(0xBC);
80019c02:	e0 6c 00 bc 	mov	r12,188
80019c06:	f0 16 00 43 	mcall	r6[268]
80019c0a:	18 98       	mov	r8,r12
80019c0c:	ec f9 02 a8 	ld.w	r9,r6[680]
80019c10:	b2 08       	st.h	r9[0x0],r8
	md=bmp085_read_int(0xBE);
80019c12:	e0 6c 00 be 	mov	r12,190
80019c16:	f0 16 00 43 	mcall	r6[268]
80019c1a:	18 98       	mov	r8,r12
80019c1c:	ec f9 02 d4 	ld.w	r9,r6[724]
80019c20:	b2 08       	st.h	r9[0x0],r8
80019c22:	c0 68       	rjmp	80019c2e <init_bmp085_slow+0x14c>
	twim_master_init(&AVR32_TWIM0, &twi_opt);

	if (twim_probe(&AVR32_TWIM0, BMP085_SLAVE_ADDRESS)==STATUS_OK) {
		dbg_print("BMP85/180 pressure sensor found (0x77)\n");
	} else {
		dbg_print("BMP85/180 pressure sensor not responding (0x77)\n");
80019c24:	fe cc 01 74 	sub	r12,pc,372
80019c28:	f0 16 00 01 	mcall	r6[4]
		return;
80019c2c:	d7 03       	nop
	mb=bmp085_read_int(0xBA);
	mc=bmp085_read_int(0xBC);
	md=bmp085_read_int(0xBE);
	
	
}
80019c2e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80019c32:	00 00       	add	r0,r0
80019c34:	80 01       	ld.sh	r1,r0[0x0]
80019c36:	99 6e       	st.w	r12[0x18],lr

80019c38 <get_pressure_data_slow>:

 


pressure_data* get_pressure_data_slow(float offset) {
80019c38:	eb cd 40 cc 	pushm	r2-r3,r6-r7,lr
80019c3c:	1a 97       	mov	r7,sp
80019c3e:	21 4d       	sub	sp,80
80019c40:	fe f6 06 2c 	ld.w	r6,pc[1580]
80019c44:	1e 26       	rsub	r6,pc
80019c46:	ef 4c ff b0 	st.w	r7[-80],r12
		int32_t UT, UP, B3, B5, B6, X1, X2, X3, p;
		uint32_t B4, B7;
			
		uint8_t start_address;
		
		uint8_t start_command_temp []={BMP085_CONTROL, BMP085_READTEMPCMD};
80019c4a:	ec f8 08 b8 	ld.w	r8,r6[2232]
80019c4e:	90 08       	ld.sh	r8,r8[0x0]
80019c50:	ef 58 ff b8 	st.h	r7[-72],r8
		uint8_t start_command_pressure []={BMP085_CONTROL, BMP085_READPRESSURECMD+ (BMP085_OVERSAMPLING_MODE << 6)};
80019c54:	ec f8 08 b4 	ld.w	r8,r6[2228]
80019c58:	90 08       	ld.sh	r8,r8[0x0]
80019c5a:	ef 58 ff b4 	st.h	r7[-76],r8
		int32_t sealevelPressure=101325;
80019c5e:	e0 78 8b cd 	mov	r8,101325
80019c62:	ef 48 ff f4 	st.w	r7[-12],r8
		float dt;
		// calibration: use datasheet numbers!

		switch (pressure_outputs.state) {
80019c66:	ec f8 00 4c 	ld.w	r8,r6[76]
80019c6a:	70 c8       	ld.w	r8,r8[0x30]
80019c6c:	58 18       	cp.w	r8,1
80019c6e:	c1 50       	breq	80019c98 <get_pressure_data_slow+0x60>
80019c70:	c0 53       	brcs	80019c7a <get_pressure_data_slow+0x42>
80019c72:	58 28       	cp.w	r8,2
80019c74:	c3 80       	breq	80019ce4 <get_pressure_data_slow+0xac>
80019c76:	e0 8f 02 e9 	bral	8001a248 <get_pressure_data_slow+0x610>
		case IDLE:
			twim_write(&AVR32_TWIM0, (uint8_t*) &start_command_temp, 2, BMP085_SLAVE_ADDRESS, false);
80019c7a:	ee cb 00 48 	sub	r11,r7,72
80019c7e:	30 08       	mov	r8,0
80019c80:	37 79       	mov	r9,119
80019c82:	30 2a       	mov	r10,2
80019c84:	fe 7c 38 00 	mov	r12,-51200
80019c88:	f0 16 00 38 	mcall	r6[224]
		    //delay_ms(7);
			pressure_outputs.state=GET_TEMP;
80019c8c:	ec f8 00 4c 	ld.w	r8,r6[76]
80019c90:	30 19       	mov	r9,1
80019c92:	91 c9       	st.w	r8[0x30],r9
			break;
80019c94:	e0 8f 02 da 	bral	8001a248 <get_pressure_data_slow+0x610>
		case GET_TEMP:
			start_address=BMP085_TEMPDATA;
80019c98:	3f 68       	mov	r8,-10
80019c9a:	ef 68 ff bb 	st.b	r7[-69],r8
			twim_write(&AVR32_TWIM0, (uint8_t*) &start_address, 1, BMP085_SLAVE_ADDRESS, false);
80019c9e:	ee cb 00 45 	sub	r11,r7,69
80019ca2:	30 08       	mov	r8,0
80019ca4:	37 79       	mov	r9,119
80019ca6:	30 1a       	mov	r10,1
80019ca8:	fe 7c 38 00 	mov	r12,-51200
80019cac:	f0 16 00 38 	mcall	r6[224]
			twim_read(&AVR32_TWIM0, (uint8_t*)&(pressure_outputs.raw_temperature), 2, BMP085_SLAVE_ADDRESS, false);
80019cb0:	ec f8 00 4c 	ld.w	r8,r6[76]
80019cb4:	f0 cb ff fd 	sub	r11,r8,-3
80019cb8:	30 08       	mov	r8,0
80019cba:	37 79       	mov	r9,119
80019cbc:	30 2a       	mov	r10,2
80019cbe:	fe 7c 38 00 	mov	r12,-51200
80019cc2:	f0 16 00 62 	mcall	r6[392]
		
			twim_write(&AVR32_TWIM0, (uint8_t*) &start_command_pressure, 2, BMP085_SLAVE_ADDRESS, false);
80019cc6:	ee cb 00 4c 	sub	r11,r7,76
80019cca:	30 08       	mov	r8,0
80019ccc:	37 79       	mov	r9,119
80019cce:	30 2a       	mov	r10,2
80019cd0:	fe 7c 38 00 	mov	r12,-51200
80019cd4:	f0 16 00 38 	mcall	r6[224]
			pressure_outputs.state=GET_PRESSURE;
80019cd8:	ec f8 00 4c 	ld.w	r8,r6[76]
80019cdc:	30 29       	mov	r9,2
80019cde:	91 c9       	st.w	r8[0x30],r9
			//delay_ms(15);
			break;
80019ce0:	e0 8f 02 b4 	bral	8001a248 <get_pressure_data_slow+0x610>
		case GET_PRESSURE:
			start_address=BMP085_PRESSUREDATA;
80019ce4:	3f 68       	mov	r8,-10
80019ce6:	ef 68 ff bb 	st.b	r7[-69],r8
			twim_write(&AVR32_TWIM0, (uint8_t*) &start_address, 1, BMP085_SLAVE_ADDRESS, false);
80019cea:	ee cb 00 45 	sub	r11,r7,69
80019cee:	30 08       	mov	r8,0
80019cf0:	37 79       	mov	r9,119
80019cf2:	30 1a       	mov	r10,1
80019cf4:	fe 7c 38 00 	mov	r12,-51200
80019cf8:	f0 16 00 38 	mcall	r6[224]
			twim_read(&AVR32_TWIM0, (uint8_t*)&(pressure_outputs.raw_pressure), 3, BMP085_SLAVE_ADDRESS, false);
80019cfc:	30 08       	mov	r8,0
80019cfe:	37 79       	mov	r9,119
80019d00:	30 3a       	mov	r10,3
80019d02:	ec fb 00 4c 	ld.w	r11,r6[76]
80019d06:	fe 7c 38 00 	mov	r12,-51200
80019d0a:	f0 16 00 62 	mcall	r6[392]
		
			UP= ((uint32_t)pressure_outputs.raw_pressure[0]<<16 |(uint32_t)pressure_outputs.raw_pressure[1]<<8 | (uint32_t)pressure_outputs.raw_pressure[2]) >> (8-BMP085_OVERSAMPLING_MODE);
80019d0e:	ec f8 00 4c 	ld.w	r8,r6[76]
80019d12:	11 88       	ld.ub	r8,r8[0x0]
80019d14:	f0 09 15 10 	lsl	r9,r8,0x10
80019d18:	ec f8 00 4c 	ld.w	r8,r6[76]
80019d1c:	11 98       	ld.ub	r8,r8[0x1]
80019d1e:	a9 68       	lsl	r8,0x8
80019d20:	10 49       	or	r9,r8
80019d22:	ec f8 00 4c 	ld.w	r8,r6[76]
80019d26:	11 a8       	ld.ub	r8,r8[0x2]
80019d28:	f3 e8 10 08 	or	r8,r9,r8
80019d2c:	a7 88       	lsr	r8,0x6
80019d2e:	ef 48 ff cc 	st.w	r7[-52],r8
 
			UT=pressure_outputs.raw_temperature[0]<<8 |pressure_outputs.raw_temperature[1];
80019d32:	ec f8 00 4c 	ld.w	r8,r6[76]
80019d36:	11 b8       	ld.ub	r8,r8[0x3]
80019d38:	f0 09 15 08 	lsl	r9,r8,0x8
80019d3c:	ec f8 00 4c 	ld.w	r8,r6[76]
80019d40:	11 c8       	ld.ub	r8,r8[0x4]
80019d42:	f3 e8 10 08 	or	r8,r9,r8
80019d46:	ef 48 ff c8 	st.w	r7[-56],r8
			// step 1
			X1 = (UT - (int32_t)ac6) * ((int32_t)ac5) / pow(2,15);
80019d4a:	ec f8 02 fc 	ld.w	r8,r6[764]
80019d4e:	90 08       	ld.sh	r8,r8[0x0]
80019d50:	5c 78       	castu.h	r8
80019d52:	ee f9 ff c8 	ld.w	r9,r7[-56]
80019d56:	10 19       	sub	r9,r8
80019d58:	ec f8 02 ec 	ld.w	r8,r6[748]
80019d5c:	90 08       	ld.sh	r8,r8[0x0]
80019d5e:	5c 78       	castu.h	r8
80019d60:	f2 08 02 48 	mul	r8,r9,r8
80019d64:	10 9c       	mov	r12,r8
80019d66:	f0 16 00 1a 	mcall	r6[104]
80019d6a:	30 08       	mov	r8,0
80019d6c:	fc 19 40 e0 	movh	r9,0x40e0
80019d70:	f0 16 00 0c 	mcall	r6[48]
80019d74:	14 98       	mov	r8,r10
80019d76:	16 99       	mov	r9,r11
80019d78:	10 9a       	mov	r10,r8
80019d7a:	12 9b       	mov	r11,r9
80019d7c:	f0 16 00 12 	mcall	r6[72]
80019d80:	18 98       	mov	r8,r12
80019d82:	ef 48 ff dc 	st.w	r7[-36],r8
			X2 = ((int32_t)mc * pow(2,11)) / (X1+(int32_t)md);
80019d86:	ec f8 02 a8 	ld.w	r8,r6[680]
80019d8a:	90 08       	ld.sh	r8,r8[0x0]
80019d8c:	10 9c       	mov	r12,r8
80019d8e:	f0 16 00 1a 	mcall	r6[104]
80019d92:	30 08       	mov	r8,0
80019d94:	fc 19 40 a0 	movh	r9,0x40a0
80019d98:	f0 16 00 03 	mcall	r6[12]
80019d9c:	14 98       	mov	r8,r10
80019d9e:	16 99       	mov	r9,r11
80019da0:	10 92       	mov	r2,r8
80019da2:	12 93       	mov	r3,r9
80019da4:	ec f8 02 d4 	ld.w	r8,r6[724]
80019da8:	90 08       	ld.sh	r8,r8[0x0]
80019daa:	10 99       	mov	r9,r8
80019dac:	ee f8 ff dc 	ld.w	r8,r7[-36]
80019db0:	f2 08 00 08 	add	r8,r9,r8
80019db4:	10 9c       	mov	r12,r8
80019db6:	f0 16 00 1a 	mcall	r6[104]
80019dba:	14 98       	mov	r8,r10
80019dbc:	16 99       	mov	r9,r11
80019dbe:	04 9a       	mov	r10,r2
80019dc0:	06 9b       	mov	r11,r3
80019dc2:	f0 16 00 0c 	mcall	r6[48]
80019dc6:	14 98       	mov	r8,r10
80019dc8:	16 99       	mov	r9,r11
80019dca:	10 9a       	mov	r10,r8
80019dcc:	12 9b       	mov	r11,r9
80019dce:	f0 16 00 12 	mcall	r6[72]
80019dd2:	18 98       	mov	r8,r12
80019dd4:	ef 48 ff e0 	st.w	r7[-32],r8
			B5 = X1 + X2;
80019dd8:	ee f9 ff dc 	ld.w	r9,r7[-36]
80019ddc:	ee f8 ff e0 	ld.w	r8,r7[-32]
80019de0:	f2 08 00 08 	add	r8,r9,r8
80019de4:	ef 48 ff d4 	st.w	r7[-44],r8
			pressure_outputs.temperature = (B5+8)/pow(2,4);
80019de8:	ee f8 ff d4 	ld.w	r8,r7[-44]
80019dec:	2f 88       	sub	r8,-8
80019dee:	10 9c       	mov	r12,r8
80019df0:	f0 16 00 1a 	mcall	r6[104]
80019df4:	30 08       	mov	r8,0
80019df6:	fc 19 40 30 	movh	r9,0x4030
80019dfa:	f0 16 00 0c 	mcall	r6[48]
80019dfe:	14 98       	mov	r8,r10
80019e00:	16 99       	mov	r9,r11
80019e02:	10 9a       	mov	r10,r8
80019e04:	12 9b       	mov	r11,r9
80019e06:	f0 16 00 09 	mcall	r6[36]
80019e0a:	18 99       	mov	r9,r12
80019e0c:	ec f8 00 4c 	ld.w	r8,r6[76]
80019e10:	91 39       	st.w	r8[0xc],r9
			pressure_outputs.temperature /= 10;
80019e12:	ec f8 00 4c 	ld.w	r8,r6[76]
80019e16:	70 38       	ld.w	r8,r8[0xc]
80019e18:	fc 1b 41 20 	movh	r11,0x4120
80019e1c:	10 9c       	mov	r12,r8
80019e1e:	f0 16 00 08 	mcall	r6[32]
80019e22:	18 98       	mov	r8,r12
80019e24:	10 99       	mov	r9,r8
80019e26:	ec f8 00 4c 	ld.w	r8,r6[76]
80019e2a:	91 39       	st.w	r8[0xc],r9
	
			// do pressure calcs
			B6 = B5 - 4000;
80019e2c:	ee f8 ff d4 	ld.w	r8,r7[-44]
80019e30:	f0 c8 0f a0 	sub	r8,r8,4000
80019e34:	ef 48 ff d8 	st.w	r7[-40],r8
			X1 = ((int32_t)b2 * ( (B6 * B6)>>12 )) >> 11;
80019e38:	ec f8 03 20 	ld.w	r8,r6[800]
80019e3c:	90 08       	ld.sh	r8,r8[0x0]
80019e3e:	10 99       	mov	r9,r8
80019e40:	ee fa ff d8 	ld.w	r10,r7[-40]
80019e44:	ee f8 ff d8 	ld.w	r8,r7[-40]
80019e48:	f4 08 02 48 	mul	r8,r10,r8
80019e4c:	ad 48       	asr	r8,0xc
80019e4e:	f2 08 02 48 	mul	r8,r9,r8
80019e52:	ab 58       	asr	r8,0xb
80019e54:	ef 48 ff dc 	st.w	r7[-36],r8
			X2 = ((int32_t)ac2 * B6) >> 11;
80019e58:	ec f8 02 e8 	ld.w	r8,r6[744]
80019e5c:	90 08       	ld.sh	r8,r8[0x0]
80019e5e:	10 99       	mov	r9,r8
80019e60:	ee f8 ff d8 	ld.w	r8,r7[-40]
80019e64:	f2 08 02 48 	mul	r8,r9,r8
80019e68:	ab 58       	asr	r8,0xb
80019e6a:	ef 48 ff e0 	st.w	r7[-32],r8
			X3 = X1 + X2;
80019e6e:	ee f9 ff dc 	ld.w	r9,r7[-36]
80019e72:	ee f8 ff e0 	ld.w	r8,r7[-32]
80019e76:	f2 08 00 08 	add	r8,r9,r8
80019e7a:	ef 48 ff e4 	st.w	r7[-28],r8
			B3 = ((((int32_t)ac1*4 + X3) << BMP085_OVERSAMPLING_MODE) + 2) / 4;
80019e7e:	ec f8 03 10 	ld.w	r8,r6[784]
80019e82:	90 08       	ld.sh	r8,r8[0x0]
80019e84:	f0 09 15 02 	lsl	r9,r8,0x2
80019e88:	ee f8 ff e4 	ld.w	r8,r7[-28]
80019e8c:	f2 08 00 08 	add	r8,r9,r8
80019e90:	a3 68       	lsl	r8,0x2
80019e92:	2f e8       	sub	r8,-2
80019e94:	f0 c9 ff fd 	sub	r9,r8,-3
80019e98:	58 08       	cp.w	r8,0
80019e9a:	f2 08 17 50 	movlt	r8,r9
80019e9e:	a3 48       	asr	r8,0x2
80019ea0:	ef 48 ff d0 	st.w	r7[-48],r8


			X1 = ((int32_t)ac3 * B6) >> 13;
80019ea4:	ec f8 02 74 	ld.w	r8,r6[628]
80019ea8:	90 08       	ld.sh	r8,r8[0x0]
80019eaa:	10 99       	mov	r9,r8
80019eac:	ee f8 ff d8 	ld.w	r8,r7[-40]
80019eb0:	f2 08 02 48 	mul	r8,r9,r8
80019eb4:	ad 58       	asr	r8,0xd
80019eb6:	ef 48 ff dc 	st.w	r7[-36],r8
			X2 = ((int32_t)b1 * ((B6 * B6) >> 12)) >> 16;
80019eba:	ec f8 03 04 	ld.w	r8,r6[772]
80019ebe:	90 08       	ld.sh	r8,r8[0x0]
80019ec0:	10 99       	mov	r9,r8
80019ec2:	ee fa ff d8 	ld.w	r10,r7[-40]
80019ec6:	ee f8 ff d8 	ld.w	r8,r7[-40]
80019eca:	f4 08 02 48 	mul	r8,r10,r8
80019ece:	ad 48       	asr	r8,0xc
80019ed0:	f2 08 02 48 	mul	r8,r9,r8
80019ed4:	b1 48       	asr	r8,0x10
80019ed6:	ef 48 ff e0 	st.w	r7[-32],r8
			X3 = ((X1 + X2) + 2) >> 2;
80019eda:	ee f9 ff dc 	ld.w	r9,r7[-36]
80019ede:	ee f8 ff e0 	ld.w	r8,r7[-32]
80019ee2:	f2 08 00 08 	add	r8,r9,r8
80019ee6:	2f e8       	sub	r8,-2
80019ee8:	a3 48       	asr	r8,0x2
80019eea:	ef 48 ff e4 	st.w	r7[-28],r8
			B4 = ((uint32_t)ac4 * (uint32_t)(X3 + 32768)) >> 15;
80019eee:	ec f8 02 cc 	ld.w	r8,r6[716]
80019ef2:	90 08       	ld.sh	r8,r8[0x0]
80019ef4:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
80019ef8:	ee f8 ff e4 	ld.w	r8,r7[-28]
80019efc:	f0 c8 80 00 	sub	r8,r8,-32768
80019f00:	f2 08 02 48 	mul	r8,r9,r8
80019f04:	af 98       	lsr	r8,0xf
80019f06:	ef 48 ff ec 	st.w	r7[-20],r8
			B7 = ((uint32_t)UP - B3) * (uint32_t)( 50000UL >> BMP085_OVERSAMPLING_MODE );
80019f0a:	ee f9 ff cc 	ld.w	r9,r7[-52]
80019f0e:	ee f8 ff d0 	ld.w	r8,r7[-48]
80019f12:	10 19       	sub	r9,r8
80019f14:	e0 68 30 d4 	mov	r8,12500
80019f18:	f2 08 02 48 	mul	r8,r9,r8
80019f1c:	ef 48 ff f0 	st.w	r7[-16],r8


			if (B7 < 0x80000000) {
80019f20:	ee f8 ff f0 	ld.w	r8,r7[-16]
80019f24:	58 08       	cp.w	r8,0
80019f26:	c0 b5       	brlt	80019f3c <get_pressure_data_slow+0x304>
				p = (B7 * 2) / B4;
80019f28:	ee f8 ff f0 	ld.w	r8,r7[-16]
80019f2c:	a1 78       	lsl	r8,0x1
80019f2e:	ee f9 ff ec 	ld.w	r9,r7[-20]
80019f32:	f0 09 0d 08 	divu	r8,r8,r9
80019f36:	ef 48 ff e8 	st.w	r7[-24],r8
80019f3a:	c0 a8       	rjmp	80019f4e <get_pressure_data_slow+0x316>
			} else {
				p = (B7 / B4) * 2;
80019f3c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80019f40:	ee f9 ff ec 	ld.w	r9,r7[-20]
80019f44:	f0 09 0d 08 	divu	r8,r8,r9
80019f48:	a1 78       	lsl	r8,0x1
80019f4a:	ef 48 ff e8 	st.w	r7[-24],r8
			}
			X1 = (p >> 8) * (p >> 8);
80019f4e:	ee f8 ff e8 	ld.w	r8,r7[-24]
80019f52:	f0 09 14 08 	asr	r9,r8,0x8
80019f56:	ee f8 ff e8 	ld.w	r8,r7[-24]
80019f5a:	a9 48       	asr	r8,0x8
80019f5c:	f2 08 02 48 	mul	r8,r9,r8
80019f60:	ef 48 ff dc 	st.w	r7[-36],r8
			X1 = (X1 * 3038) >> 16;
80019f64:	ee f9 ff dc 	ld.w	r9,r7[-36]
80019f68:	e0 68 0b de 	mov	r8,3038
80019f6c:	f2 08 02 48 	mul	r8,r9,r8
80019f70:	b1 48       	asr	r8,0x10
80019f72:	ef 48 ff dc 	st.w	r7[-36],r8
			X2 = (-7357 * p) >> 16;
80019f76:	ee f9 ff e8 	ld.w	r9,r7[-24]
80019f7a:	fe 78 e3 43 	mov	r8,-7357
80019f7e:	f2 08 02 48 	mul	r8,r9,r8
80019f82:	b1 48       	asr	r8,0x10
80019f84:	ef 48 ff e0 	st.w	r7[-32],r8

			p = p + ((X1 + X2 + (int32_t)3791)>>4);
80019f88:	ee f9 ff dc 	ld.w	r9,r7[-36]
80019f8c:	ee f8 ff e0 	ld.w	r8,r7[-32]
80019f90:	f2 08 00 08 	add	r8,r9,r8
80019f94:	f0 c8 f1 31 	sub	r8,r8,-3791
80019f98:	a5 48       	asr	r8,0x4
80019f9a:	ee f9 ff e8 	ld.w	r9,r7[-24]
80019f9e:	f2 08 00 08 	add	r8,r9,r8
80019fa2:	ef 48 ff e8 	st.w	r7[-24],r8

			pressure_outputs.pressure=p;
80019fa6:	ee f8 ff e8 	ld.w	r8,r7[-24]
80019faa:	e5 a6 09 08 	cop	cp0,cr9,cr0,cr8,0x4c
80019fae:	ec f8 00 4c 	ld.w	r8,r6[76]
80019fb2:	91 29       	st.w	r8[0x8],r9
		
			vertical_speed=pressure_outputs.altitude;
80019fb4:	ec f8 00 4c 	ld.w	r8,r6[76]
80019fb8:	70 78       	ld.w	r8,r8[0x1c]
80019fba:	ef 48 ff c4 	st.w	r7[-60],r8
			altitude=44330.0 * (1.0 - pow(pressure_outputs.pressure /sealevelPressure,0.190295)) + pressure_outputs.altitude_offset;
80019fbe:	ec f8 00 4c 	ld.w	r8,r6[76]
80019fc2:	70 28       	ld.w	r8,r8[0x8]
80019fc4:	ee f9 ff f4 	ld.w	r9,r7[-12]
80019fc8:	e5 a6 09 09 	cop	cp0,cr9,cr0,cr9,0x4c
80019fcc:	12 9b       	mov	r11,r9
80019fce:	10 9c       	mov	r12,r8
80019fd0:	f0 16 00 08 	mcall	r6[32]
80019fd4:	18 98       	mov	r8,r12
80019fd6:	10 9c       	mov	r12,r8
80019fd8:	f0 16 00 02 	mcall	r6[8]
80019fdc:	e0 68 d1 24 	mov	r8,53540
80019fe0:	ea 18 28 cb 	orh	r8,0x28cb
80019fe4:	e0 69 5b 96 	mov	r9,23446
80019fe8:	ea 19 3f c8 	orh	r9,0x3fc8
80019fec:	f0 16 01 aa 	mcall	r6[1704]
80019ff0:	14 98       	mov	r8,r10
80019ff2:	16 99       	mov	r9,r11
80019ff4:	30 0a       	mov	r10,0
80019ff6:	fc 1b 3f f0 	movh	r11,0x3ff0
80019ffa:	f0 16 00 11 	mcall	r6[68]
80019ffe:	14 98       	mov	r8,r10
8001a000:	16 99       	mov	r9,r11
8001a002:	10 9a       	mov	r10,r8
8001a004:	12 9b       	mov	r11,r9
8001a006:	30 08       	mov	r8,0
8001a008:	e0 69 a5 40 	mov	r9,42304
8001a00c:	ea 19 40 e5 	orh	r9,0x40e5
8001a010:	f0 16 00 03 	mcall	r6[12]
8001a014:	14 98       	mov	r8,r10
8001a016:	16 99       	mov	r9,r11
8001a018:	10 92       	mov	r2,r8
8001a01a:	12 93       	mov	r3,r9
8001a01c:	ec f8 00 4c 	ld.w	r8,r6[76]
8001a020:	70 88       	ld.w	r8,r8[0x20]
8001a022:	10 9c       	mov	r12,r8
8001a024:	f0 16 00 02 	mcall	r6[8]
8001a028:	14 98       	mov	r8,r10
8001a02a:	16 99       	mov	r9,r11
8001a02c:	04 9a       	mov	r10,r2
8001a02e:	06 9b       	mov	r11,r3
8001a030:	f0 16 00 05 	mcall	r6[20]
8001a034:	14 98       	mov	r8,r10
8001a036:	16 99       	mov	r9,r11
8001a038:	10 9a       	mov	r10,r8
8001a03a:	12 9b       	mov	r11,r9
8001a03c:	f0 16 00 09 	mcall	r6[36]
8001a040:	18 98       	mov	r8,r12
8001a042:	ef 48 ff c0 	st.w	r7[-64],r8
			
			for (i=0; i<2; i++) {
8001a046:	30 08       	mov	r8,0
8001a048:	ef 48 ff bc 	st.w	r7[-68],r8
8001a04c:	c1 68       	rjmp	8001a078 <get_pressure_data_slow+0x440>
				pressure_outputs.last_altitudes[i]=pressure_outputs.last_altitudes[i+1];
8001a04e:	ee f9 ff bc 	ld.w	r9,r7[-68]
8001a052:	ee f8 ff bc 	ld.w	r8,r7[-68]
8001a056:	f0 ca ff ff 	sub	r10,r8,-1
8001a05a:	ec f8 00 4c 	ld.w	r8,r6[76]
8001a05e:	2f ca       	sub	r10,-4
8001a060:	f0 0a 03 2a 	ld.w	r10,r8[r10<<0x2]
8001a064:	ec f8 00 4c 	ld.w	r8,r6[76]
8001a068:	2f c9       	sub	r9,-4
8001a06a:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
			pressure_outputs.pressure=p;
		
			vertical_speed=pressure_outputs.altitude;
			altitude=44330.0 * (1.0 - pow(pressure_outputs.pressure /sealevelPressure,0.190295)) + pressure_outputs.altitude_offset;
			
			for (i=0; i<2; i++) {
8001a06e:	ee f8 ff bc 	ld.w	r8,r7[-68]
8001a072:	2f f8       	sub	r8,-1
8001a074:	ef 48 ff bc 	st.w	r7[-68],r8
8001a078:	ee f8 ff bc 	ld.w	r8,r7[-68]
8001a07c:	58 18       	cp.w	r8,1
8001a07e:	fe 9a ff e8 	brle	8001a04e <get_pressure_data_slow+0x416>
				pressure_outputs.last_altitudes[i]=pressure_outputs.last_altitudes[i+1];
			}
			pressure_outputs.last_altitudes[2]=altitude;
8001a082:	ec f8 00 4c 	ld.w	r8,r6[76]
8001a086:	ee f9 ff c0 	ld.w	r9,r7[-64]
8001a08a:	91 69       	st.w	r8[0x18],r9
			altitude=median_filter_3x(pressure_outputs.last_altitudes[0], pressure_outputs.last_altitudes[1], pressure_outputs.last_altitudes[2]);
8001a08c:	ec f8 00 4c 	ld.w	r8,r6[76]
8001a090:	70 6a       	ld.w	r10,r8[0x18]
8001a092:	ec f8 00 4c 	ld.w	r8,r6[76]
8001a096:	70 59       	ld.w	r9,r8[0x14]
8001a098:	ec f8 00 4c 	ld.w	r8,r6[76]
8001a09c:	70 48       	ld.w	r8,r8[0x10]
8001a09e:	12 9b       	mov	r11,r9
8001a0a0:	10 9c       	mov	r12,r8
8001a0a2:	fe b0 fb d8 	rcall	80019852 <median_filter_3x>
8001a0a6:	18 98       	mov	r8,r12
8001a0a8:	ef 48 ff c0 	st.w	r7[-64],r8
			
			if (f_abs(altitude-pressure_outputs.altitude)<15.0) {
8001a0ac:	ec f8 00 4c 	ld.w	r8,r6[76]
8001a0b0:	70 78       	ld.w	r8,r8[0x1c]
8001a0b2:	ee f9 ff c0 	ld.w	r9,r7[-64]
8001a0b6:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8001a0ba:	10 9c       	mov	r12,r8
8001a0bc:	fe b0 fb ae 	rcall	80019818 <f_abs>
8001a0c0:	18 9a       	mov	r10,r12
8001a0c2:	30 18       	mov	r8,1
8001a0c4:	fc 19 41 70 	movh	r9,0x4170
8001a0c8:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
8001a0cc:	e0 8c 00 03 	brvs	8001a0d2 <get_pressure_data_slow+0x49a>
8001a0d0:	c0 25       	brlt	8001a0d4 <get_pressure_data_slow+0x49c>
8001a0d2:	30 08       	mov	r8,0
8001a0d4:	5c 58       	castu.b	r8
8001a0d6:	c3 40       	breq	8001a13e <get_pressure_data_slow+0x506>
				pressure_outputs.altitude = (BARO_ALT_LPF*pressure_outputs.altitude) + (1.0-BARO_ALT_LPF)*altitude;
8001a0d8:	ec f8 00 4c 	ld.w	r8,r6[76]
8001a0dc:	70 78       	ld.w	r8,r8[0x1c]
8001a0de:	10 9c       	mov	r12,r8
8001a0e0:	f0 16 00 02 	mcall	r6[8]
8001a0e4:	e0 68 66 66 	mov	r8,26214
8001a0e8:	ea 18 66 66 	orh	r8,0x6666
8001a0ec:	e0 69 66 66 	mov	r9,26214
8001a0f0:	ea 19 3f ee 	orh	r9,0x3fee
8001a0f4:	f0 16 00 03 	mcall	r6[12]
8001a0f8:	14 98       	mov	r8,r10
8001a0fa:	16 99       	mov	r9,r11
8001a0fc:	10 92       	mov	r2,r8
8001a0fe:	12 93       	mov	r3,r9
8001a100:	ee fc ff c0 	ld.w	r12,r7[-64]
8001a104:	f0 16 00 02 	mcall	r6[8]
8001a108:	e0 68 99 a0 	mov	r8,39328
8001a10c:	ea 18 99 99 	orh	r8,0x9999
8001a110:	e0 69 99 99 	mov	r9,39321
8001a114:	ea 19 3f a9 	orh	r9,0x3fa9
8001a118:	f0 16 00 03 	mcall	r6[12]
8001a11c:	14 98       	mov	r8,r10
8001a11e:	16 99       	mov	r9,r11
8001a120:	04 9a       	mov	r10,r2
8001a122:	06 9b       	mov	r11,r3
8001a124:	f0 16 00 05 	mcall	r6[20]
8001a128:	14 98       	mov	r8,r10
8001a12a:	16 99       	mov	r9,r11
8001a12c:	10 9a       	mov	r10,r8
8001a12e:	12 9b       	mov	r11,r9
8001a130:	f0 16 00 09 	mcall	r6[36]
8001a134:	18 99       	mov	r9,r12
8001a136:	ec f8 00 4c 	ld.w	r8,r6[76]
8001a13a:	91 79       	st.w	r8[0x1c],r9
8001a13c:	c0 68       	rjmp	8001a148 <get_pressure_data_slow+0x510>
			}else {
				pressure_outputs.altitude = altitude;
8001a13e:	ec f8 00 4c 	ld.w	r8,r6[76]
8001a142:	ee f9 ff c0 	ld.w	r9,r7[-64]
8001a146:	91 79       	st.w	r8[0x1c],r9
			}
			
			dt = (get_micros()-pressure_outputs.last_update)/1000000.0;
8001a148:	f0 16 00 27 	mcall	r6[156]
8001a14c:	18 99       	mov	r9,r12
8001a14e:	ec f8 00 4c 	ld.w	r8,r6[76]
8001a152:	70 a8       	ld.w	r8,r8[0x28]
8001a154:	f2 08 01 08 	sub	r8,r9,r8
8001a158:	10 9c       	mov	r12,r8
8001a15a:	f0 16 00 4d 	mcall	r6[308]
8001a15e:	30 08       	mov	r8,0
8001a160:	e0 69 84 80 	mov	r9,33920
8001a164:	ea 19 41 2e 	orh	r9,0x412e
8001a168:	f0 16 00 0c 	mcall	r6[48]
8001a16c:	14 98       	mov	r8,r10
8001a16e:	16 99       	mov	r9,r11
8001a170:	10 9a       	mov	r10,r8
8001a172:	12 9b       	mov	r11,r9
8001a174:	f0 16 00 09 	mcall	r6[36]
8001a178:	18 98       	mov	r8,r12
8001a17a:	ef 48 ff f8 	st.w	r7[-8],r8
			pressure_outputs.dt=dt;
8001a17e:	ec f8 00 4c 	ld.w	r8,r6[76]
8001a182:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001a186:	91 d9       	st.w	r8[0x34],r9
			vertical_speed=-(pressure_outputs.altitude-vertical_speed)/dt;
8001a188:	ec f8 00 4c 	ld.w	r8,r6[76]
8001a18c:	70 79       	ld.w	r9,r8[0x1c]
8001a18e:	ee f8 ff c4 	ld.w	r8,r7[-60]
8001a192:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8001a196:	ee 18 80 00 	eorh	r8,0x8000
8001a19a:	ee fb ff f8 	ld.w	r11,r7[-8]
8001a19e:	10 9c       	mov	r12,r8
8001a1a0:	f0 16 00 08 	mcall	r6[32]
8001a1a4:	18 98       	mov	r8,r12
8001a1a6:	ef 48 ff c4 	st.w	r7[-60],r8
			
			if (abs(vertical_speed)>20) vertical_speed=0.0;
8001a1aa:	ee f8 ff c4 	ld.w	r8,r7[-60]
8001a1ae:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8001a1b2:	ef 48 ff fc 	st.w	r7[-4],r8
8001a1b6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001a1ba:	5c 48       	abs	r8
8001a1bc:	ef 48 ff fc 	st.w	r7[-4],r8
8001a1c0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001a1c4:	59 48       	cp.w	r8,20
8001a1c6:	e0 8a 00 05 	brle	8001a1d0 <get_pressure_data_slow+0x598>
8001a1ca:	30 08       	mov	r8,0
8001a1cc:	ef 48 ff c4 	st.w	r7[-60],r8
			pressure_outputs.vario_vz=(VARIO_LPF)*pressure_outputs.vario_vz + (1.0-VARIO_LPF) * (vertical_speed);
8001a1d0:	ec f8 00 4c 	ld.w	r8,r6[76]
8001a1d4:	70 98       	ld.w	r8,r8[0x24]
8001a1d6:	10 9c       	mov	r12,r8
8001a1d8:	f0 16 00 02 	mcall	r6[8]
8001a1dc:	e0 68 66 66 	mov	r8,26214
8001a1e0:	ea 18 66 66 	orh	r8,0x6666
8001a1e4:	e0 69 66 66 	mov	r9,26214
8001a1e8:	ea 19 3f ee 	orh	r9,0x3fee
8001a1ec:	f0 16 00 03 	mcall	r6[12]
8001a1f0:	14 98       	mov	r8,r10
8001a1f2:	16 99       	mov	r9,r11
8001a1f4:	10 92       	mov	r2,r8
8001a1f6:	12 93       	mov	r3,r9
8001a1f8:	ee fc ff c4 	ld.w	r12,r7[-60]
8001a1fc:	f0 16 00 02 	mcall	r6[8]
8001a200:	e0 68 99 a0 	mov	r8,39328
8001a204:	ea 18 99 99 	orh	r8,0x9999
8001a208:	e0 69 99 99 	mov	r9,39321
8001a20c:	ea 19 3f a9 	orh	r9,0x3fa9
8001a210:	f0 16 00 03 	mcall	r6[12]
8001a214:	14 98       	mov	r8,r10
8001a216:	16 99       	mov	r9,r11
8001a218:	04 9a       	mov	r10,r2
8001a21a:	06 9b       	mov	r11,r3
8001a21c:	f0 16 00 05 	mcall	r6[20]
8001a220:	14 98       	mov	r8,r10
8001a222:	16 99       	mov	r9,r11
8001a224:	10 9a       	mov	r10,r8
8001a226:	12 9b       	mov	r11,r9
8001a228:	f0 16 00 09 	mcall	r6[36]
8001a22c:	18 99       	mov	r9,r12
8001a22e:	ec f8 00 4c 	ld.w	r8,r6[76]
8001a232:	91 99       	st.w	r8[0x24],r9
			
			pressure_outputs.last_update=get_micros();
8001a234:	f0 16 00 27 	mcall	r6[156]
8001a238:	18 99       	mov	r9,r12
8001a23a:	ec f8 00 4c 	ld.w	r8,r6[76]
8001a23e:	91 a9       	st.w	r8[0x28],r9
			pressure_outputs.state=IDLE;
8001a240:	ec f8 00 4c 	ld.w	r8,r6[76]
8001a244:	30 09       	mov	r9,0
8001a246:	91 c9       	st.w	r8[0x30],r9
			break;
			
		}
		pressure_outputs.last_state_update=get_micros();
8001a248:	f0 16 00 27 	mcall	r6[156]
8001a24c:	18 99       	mov	r9,r12
8001a24e:	ec f8 00 4c 	ld.w	r8,r6[76]
8001a252:	91 b9       	st.w	r8[0x2c],r9
		pressure_outputs.altitude_offset = offset;
8001a254:	ec f8 00 4c 	ld.w	r8,r6[76]
8001a258:	ee f9 ff b0 	ld.w	r9,r7[-80]
8001a25c:	91 89       	st.w	r8[0x20],r9
		
		return &pressure_outputs;
8001a25e:	ec f8 00 4c 	ld.w	r8,r6[76]
}
8001a262:	10 9c       	mov	r12,r8
8001a264:	2e cd       	sub	sp,-80
8001a266:	e3 cd 80 cc 	ldm	sp++,r2-r3,r6-r7,pc
8001a26a:	00 00       	add	r0,r0
8001a26c:	80 01       	ld.sh	r1,r0[0x0]
8001a26e:	9a c8       	ld.uh	r8,sp[0x8]

8001a270 <newValidBarometer>:

bool newValidBarometer(uint32_t *timePrevBarometer)
{
8001a270:	eb cd 40 c0 	pushm	r6-r7,lr
8001a274:	1a 97       	mov	r7,sp
8001a276:	20 1d       	sub	sp,4
8001a278:	48 d6       	lddpc	r6,8001a2ac <newValidBarometer+0x3c>
8001a27a:	1e 26       	rsub	r6,pc
8001a27c:	ef 4c ff fc 	st.w	r7[-4],r12
	if (*timePrevBarometer < pressure_outputs.last_update) 
8001a280:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001a284:	70 09       	ld.w	r9,r8[0x0]
8001a286:	ec f8 00 4c 	ld.w	r8,r6[76]
8001a28a:	70 a8       	ld.w	r8,r8[0x28]
8001a28c:	10 39       	cp.w	r9,r8
8001a28e:	c0 92       	brcc	8001a2a0 <newValidBarometer+0x30>
	{
		*timePrevBarometer = pressure_outputs.last_update;
8001a290:	ec f8 00 4c 	ld.w	r8,r6[76]
8001a294:	70 a9       	ld.w	r9,r8[0x28]
8001a296:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001a29a:	91 09       	st.w	r8[0x0],r9
		return true;
8001a29c:	30 18       	mov	r8,1
8001a29e:	c0 28       	rjmp	8001a2a2 <newValidBarometer+0x32>
	}else{
		return false;
8001a2a0:	30 08       	mov	r8,0
	}
	
8001a2a2:	10 9c       	mov	r12,r8
8001a2a4:	2f fd       	sub	sp,-4
8001a2a6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001a2aa:	00 00       	add	r0,r0
8001a2ac:	80 01       	ld.sh	r1,r0[0x0]
8001a2ae:	a0 fe       	st.b	r0[0x7],lr

8001a2b0 <init_hmc5883_slow>:
static volatile compass_data compass_outputs;




void init_hmc5883_slow() {
8001a2b0:	eb cd 40 c0 	pushm	r6-r7,lr
8001a2b4:	1a 97       	mov	r7,sp
8001a2b6:	48 a6       	lddpc	r6,8001a2dc <init_hmc5883_slow+0x2c>
8001a2b8:	1e 26       	rsub	r6,pc
	ConfRegA,
	(HMC_SAMPLE_AVG)<<5 | (HMC_RATE) <<2 | HMC_MODE,
	(HMC_RANGE) <<5,
	(HMC_MODE)
	};
	twim_master_init(&AVR32_TWIM0, &twi_opt);
8001a2ba:	ec fb 08 b0 	ld.w	r11,r6[2224]
8001a2be:	fe 7c 38 00 	mov	r12,-51200
8001a2c2:	f0 16 00 69 	mcall	r6[420]
	twim_write(&AVR32_TWIM0, (uint8_t*)&compass_default_configuration, 4, HMC5883_SLAVE_ADDRESS, false);
8001a2c6:	30 08       	mov	r8,0
8001a2c8:	31 e9       	mov	r9,30
8001a2ca:	30 4a       	mov	r10,4
8001a2cc:	ec fb 08 ac 	ld.w	r11,r6[2220]
8001a2d0:	fe 7c 38 00 	mov	r12,-51200
8001a2d4:	f0 16 00 38 	mcall	r6[224]
}
8001a2d8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001a2dc:	80 01       	ld.sh	r1,r0[0x0]
8001a2de:	a1 3c       	mul	r12,r0

8001a2e0 <get_compass_data_slow>:


compass_data* get_compass_data_slow() {
8001a2e0:	eb cd 40 c0 	pushm	r6-r7,lr
8001a2e4:	1a 97       	mov	r7,sp
8001a2e6:	20 2d       	sub	sp,8
8001a2e8:	49 e6       	lddpc	r6,8001a360 <get_compass_data_slow+0x80>
8001a2ea:	1e 26       	rsub	r6,pc
	int i;
	uint8_t start_address=DataRegBegin;
8001a2ec:	30 38       	mov	r8,3
8001a2ee:	ef 68 ff ff 	st.b	r7[-1],r8
	//twim_write(&AVR32_TWIM0, (uint8_t*) &start_address, 1, HMC5883_SLAVE_ADDRESS, false);
	//twim_read(&AVR32_TWIM0, (uint8_t*)&(compass_outputs.raw_data), 6, HMC5883_SLAVE_ADDRESS, false);
	
	for (i=0; i<3; i++) {
8001a2f2:	30 08       	mov	r8,0
8001a2f4:	ef 48 ff f8 	st.w	r7[-8],r8
8001a2f8:	c2 98       	rjmp	8001a34a <get_compass_data_slow+0x6a>
		compass_outputs.axes[i]=(int16_t)(compass_outputs.raw_data[2*i]<<8)+(int16_t)(compass_outputs.raw_data[2*i+1]);
8001a2fa:	ee fb ff f8 	ld.w	r11,r7[-8]
8001a2fe:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001a302:	a1 78       	lsl	r8,0x1
8001a304:	ec f9 02 5c 	ld.w	r9,r6[604]
8001a308:	f2 08 07 08 	ld.ub	r8,r9[r8]
8001a30c:	5c 58       	castu.b	r8
8001a30e:	a9 68       	lsl	r8,0x8
8001a310:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
8001a314:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001a318:	a1 78       	lsl	r8,0x1
8001a31a:	2f f8       	sub	r8,-1
8001a31c:	ec fa 02 5c 	ld.w	r10,r6[604]
8001a320:	f4 08 07 08 	ld.ub	r8,r10[r8]
8001a324:	5c 58       	castu.b	r8
8001a326:	f2 08 00 08 	add	r8,r9,r8
8001a32a:	5c 88       	casts.h	r8
8001a32c:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
8001a330:	ec fa 02 5c 	ld.w	r10,r6[604]
8001a334:	f6 c8 ff fe 	sub	r8,r11,-2
8001a338:	a1 78       	lsl	r8,0x1
8001a33a:	f4 08 00 08 	add	r8,r10,r8
8001a33e:	b0 19       	st.h	r8[0x2],r9
	int i;
	uint8_t start_address=DataRegBegin;
	//twim_write(&AVR32_TWIM0, (uint8_t*) &start_address, 1, HMC5883_SLAVE_ADDRESS, false);
	//twim_read(&AVR32_TWIM0, (uint8_t*)&(compass_outputs.raw_data), 6, HMC5883_SLAVE_ADDRESS, false);
	
	for (i=0; i<3; i++) {
8001a340:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001a344:	2f f8       	sub	r8,-1
8001a346:	ef 48 ff f8 	st.w	r7[-8],r8
8001a34a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001a34e:	58 28       	cp.w	r8,2
8001a350:	fe 9a ff d5 	brle	8001a2fa <get_compass_data_slow+0x1a>
		compass_outputs.axes[i]=(int16_t)(compass_outputs.raw_data[2*i]<<8)+(int16_t)(compass_outputs.raw_data[2*i+1]);
	}
	return &compass_outputs;
8001a354:	ec f8 02 5c 	ld.w	r8,r6[604]
8001a358:	10 9c       	mov	r12,r8
8001a35a:	2f ed       	sub	sp,-8
8001a35c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001a360:	80 01       	ld.sh	r1,r0[0x0]
8001a362:	a1 6e       	lsl	lr,0x0

8001a364 <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
8001a364:	eb cd 40 c0 	pushm	r6-r7,lr
8001a368:	1a 97       	mov	r7,sp
8001a36a:	20 6d       	sub	sp,24
8001a36c:	49 e6       	lddpc	r6,8001a3e4 <interpolate+0x80>
8001a36e:	1e 26       	rsub	r6,pc
8001a370:	ef 4c ff f8 	st.w	r7[-8],r12
8001a374:	ef 4b ff f4 	st.w	r7[-12],r11
8001a378:	ef 4a ff f0 	st.w	r7[-16],r10
8001a37c:	ef 49 ff ec 	st.w	r7[-20],r9
8001a380:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
8001a384:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001a388:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001a38c:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
8001a390:	c0 41       	brne	8001a398 <interpolate+0x34>
	{
		return y1;
8001a392:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001a396:	c2 38       	rjmp	8001a3dc <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
8001a398:	ee f9 ff e8 	ld.w	r9,r7[-24]
8001a39c:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001a3a0:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8001a3a4:	ee fa ff f8 	ld.w	r10,r7[-8]
8001a3a8:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001a3ac:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
8001a3b0:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8001a3b4:	ee fa ff f0 	ld.w	r10,r7[-16]
8001a3b8:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001a3bc:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8001a3c0:	12 9b       	mov	r11,r9
8001a3c2:	10 9c       	mov	r12,r8
8001a3c4:	f0 16 00 08 	mcall	r6[32]
8001a3c8:	18 98       	mov	r8,r12
8001a3ca:	10 99       	mov	r9,r8
8001a3cc:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001a3d0:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8001a3d4:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
8001a3d8:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
8001a3dc:	10 9c       	mov	r12,r8
8001a3de:	2f ad       	sub	sp,-24
8001a3e0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001a3e4:	80 01       	ld.sh	r1,r0[0x0]
8001a3e6:	a1 f2       	*unknown*

8001a3e8 <pdca_int_handler_dac>:
 U8 dac_channel_audio = DAC_AUDIO_CHANNEL;


__attribute__((__interrupt__))
static void pdca_int_handler_dac(void)
{
8001a3e8:	eb cd 40 c0 	pushm	r6-r7,lr
8001a3ec:	1a 97       	mov	r7,sp
8001a3ee:	49 a6       	lddpc	r6,8001a454 <pdca_int_handler_dac+0x6c>
8001a3f0:	1e 26       	rsub	r6,pc
	AVR32_PDCA.channel[PDCA_CHANNEL_DAC].isr;
8001a3f2:	fc 78 00 00 	mov	r8,-196608
8001a3f6:	f0 f8 01 2c 	ld.w	r8,r8[300]
	if (autoplay==0) {
8001a3fa:	ec f8 04 a8 	ld.w	r8,r6[1192]
8001a3fe:	70 08       	ld.w	r8,r8[0x0]
8001a400:	58 08       	cp.w	r8,0
8001a402:	c0 81       	brne	8001a412 <pdca_int_handler_dac+0x2a>
		pdca_disable(PDCA_CHANNEL_DAC);
8001a404:	30 4c       	mov	r12,4
8001a406:	f0 16 00 89 	mcall	r6[548]
	    pdca_disable_interrupt_transfer_complete(PDCA_CHANNEL_DAC);
8001a40a:	30 4c       	mov	r12,4
8001a40c:	f0 16 00 c9 	mcall	r6[804]
8001a410:	c1 f8       	rjmp	8001a44e <pdca_int_handler_dac+0x66>

	}	else {	
       // Set PDCA channel reload values with address where data to load are stored, and size of the data block to load.
       pdca_reload_channel(PDCA_CHANNEL_DAC, (char *)buffer+2*from, to-from);
8001a412:	ec f8 02 58 	ld.w	r8,r6[600]
8001a416:	90 08       	ld.sh	r8,r8[0x0]
8001a418:	5c 88       	casts.h	r8
8001a41a:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
8001a41e:	ec f8 01 6c 	ld.w	r8,r6[364]
8001a422:	90 08       	ld.sh	r8,r8[0x0]
8001a424:	5c 88       	casts.h	r8
8001a426:	5c 78       	castu.h	r8
8001a428:	f2 08 01 08 	sub	r8,r9,r8
8001a42c:	10 99       	mov	r9,r8
8001a42e:	ec f8 03 38 	ld.w	r8,r6[824]
8001a432:	70 0a       	ld.w	r10,r8[0x0]
8001a434:	ec f8 01 6c 	ld.w	r8,r6[364]
8001a438:	90 08       	ld.sh	r8,r8[0x0]
8001a43a:	5c 88       	casts.h	r8
8001a43c:	5c 78       	castu.h	r8
8001a43e:	a1 78       	lsl	r8,0x1
8001a440:	f4 08 00 08 	add	r8,r10,r8
8001a444:	12 9a       	mov	r10,r9
8001a446:	10 9b       	mov	r11,r8
8001a448:	30 4c       	mov	r12,4
8001a44a:	f0 16 00 f8 	mcall	r6[992]
	}	   
		
}
8001a44e:	e3 cd 40 c0 	ldm	sp++,r6-r7,lr
8001a452:	d6 03       	rete
8001a454:	80 01       	ld.sh	r1,r0[0x0]
8001a456:	a2 74       	st.h	r1[0xe],r4

8001a458 <init_pevc>:


void init_pevc(void)
{
8001a458:	eb cd 40 c0 	pushm	r6-r7,lr
8001a45c:	1a 97       	mov	r7,sp
8001a45e:	48 c6       	lddpc	r6,8001a48c <init_pevc+0x34>
8001a460:	1e 26       	rsub	r6,pc
  
  // PEVC Init.
  // Configuring the PEVC path: input is the generic clock, each clock cycle, the PEVC trigger a new DAC sample
  // The sinus samples are sent through the PDCA.  
  // a change on PEVC input pin0 event will trigger the PDCA channel 0/1 transfer
  pevc_channel_configure(ppevc,     AVR32_PEVC_ID_USER_DACIFB0_CHA, 
8001a462:	ec f8 03 74 	ld.w	r8,r6[884]
8001a466:	70 08       	ld.w	r8,r8[0x0]
8001a468:	ec f9 08 a8 	ld.w	r9,r6[2216]
8001a46c:	31 0a       	mov	r10,16
8001a46e:	30 2b       	mov	r11,2
8001a470:	10 9c       	mov	r12,r8
8001a472:	f0 16 01 9f 	mcall	r6[1660]
                                    AVR32_PEVC_ID_GEN_GCLK_0, 
                                    &PEVC_EVS_OPTIONS);
									  
  // Enable the PEVC channel 0.
  pevc_channels_enable(ppevc, 1<<AVR32_PEVC_ID_USER_DACIFB0_CHA);
8001a476:	ec f8 03 74 	ld.w	r8,r6[884]
8001a47a:	70 08       	ld.w	r8,r8[0x0]
8001a47c:	30 4a       	mov	r10,4
8001a47e:	30 0b       	mov	r11,0
8001a480:	10 9c       	mov	r12,r8
8001a482:	f0 16 01 37 	mcall	r6[1244]
}
8001a486:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001a48a:	00 00       	add	r0,r0
8001a48c:	80 01       	ld.sh	r1,r0[0x0]
8001a48e:	a2 e4       	st.b	r1[0x6],r4

8001a490 <init_gclk>:

void init_gclk(void)
{
8001a490:	eb cd 40 c0 	pushm	r6-r7,lr
8001a494:	1a 97       	mov	r7,sp
8001a496:	48 76       	lddpc	r6,8001a4b0 <init_gclk+0x20>
8001a498:	1e 26       	rsub	r6,pc
  // Setup Sampling Rate
 
  // Setup the generic clock for EVENT
  scif_gc_setup(AVR32_SCIF_GCLK_GCLK2_EVENT, 
8001a49a:	30 a9       	mov	r9,10
8001a49c:	30 1a       	mov	r10,1
8001a49e:	30 0b       	mov	r11,0
8001a4a0:	30 7c       	mov	r12,7
8001a4a2:	f0 16 01 fb 	mcall	r6[2028]
                SCIF_GCCTRL_SLOWCLOCK, 
                AVR32_SCIF_GC_DIV_CLOCK, 
                DAC_SAMPLE_CLOCK_DIVIDER);  
  // Now enable the generic clock
  scif_gc_enable(AVR32_SCIF_GCLK_GCLK2_EVENT);
8001a4a6:	30 7c       	mov	r12,7
8001a4a8:	f0 16 01 f0 	mcall	r6[1984]
}
8001a4ac:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001a4b0:	80 01       	ld.sh	r1,r0[0x0]
8001a4b2:	a3 1c       	ld.d	r12,--r1
8001a4b4:	65 72       	ld.w	r2,r2[0x5c]
8001a4b6:	72 6f       	ld.w	pc,r9[0x18]
8001a4b8:	72 20       	ld.w	r0,r9[0x8]
8001a4ba:	63 6f       	ld.w	pc,r1[0x58]
8001a4bc:	6e 66       	ld.w	r6,r7[0x18]
8001a4be:	69 67       	ld.w	r7,r4[0x58]
8001a4c0:	75 72       	ld.w	r2,r10[0x5c]
8001a4c2:	69 6e       	ld.w	lr,r4[0x58]
8001a4c4:	67 20       	ld.w	r0,r3[0x48]
8001a4c6:	44 41       	lddsp	r1,sp[0x110]
8001a4c8:	43 00       	lddsp	r0,sp[0xc0]
8001a4ca:	00 00       	add	r0,r0
8001a4cc:	65 72       	ld.w	r2,r2[0x5c]
8001a4ce:	72 6f       	ld.w	pc,r9[0x18]
8001a4d0:	72 20       	ld.w	r0,r9[0x8]
8001a4d2:	63 6f       	ld.w	pc,r1[0x58]
8001a4d4:	6e 66       	ld.w	r6,r7[0x18]
8001a4d6:	69 67       	ld.w	r7,r4[0x58]
8001a4d8:	75 72       	ld.w	r2,r10[0x5c]
8001a4da:	69 6e       	ld.w	lr,r4[0x58]
8001a4dc:	67 20       	ld.w	r0,r3[0x48]
8001a4de:	44 41       	lddsp	r1,sp[0x110]
8001a4e0:	43 20       	lddsp	r0,sp[0xc8]
8001a4e2:	63 68       	ld.w	r8,r1[0x58]
8001a4e4:	61 6e       	ld.w	lr,r0[0x58]
8001a4e6:	6e 65       	ld.w	r5,r7[0x18]
8001a4e8:	6c 00       	ld.w	r0,r6[0x0]

8001a4ea <Init_DAC>:



void Init_DAC(int trigger_mode) {
8001a4ea:	eb cd 40 c0 	pushm	r6-r7,lr
8001a4ee:	1a 97       	mov	r7,sp
8001a4f0:	20 6d       	sub	sp,24
8001a4f2:	4b 36       	lddpc	r6,8001a5bc <Init_DAC+0xd2>
8001a4f4:	1e 26       	rsub	r6,pc
8001a4f6:	ef 4c ff e8 	st.w	r7[-24],r12
                            .low_power                  = false,                          // Low Power Mode     
                            .dual                       = false,                          // Dual Mode
                            .prescaler_clock_hz         = DAC_PRESCALER_CLOCK,             // Prescaler Clock (Should be 500Khz)             
							.offset_calibration_value   = 0,
							.gain_calibration_value     = 1                 
};
8001a4fa:	ec f8 08 a4 	ld.w	r8,r6[2212]
8001a4fe:	ee ca 00 0c 	sub	r10,r7,12
8001a502:	10 9b       	mov	r11,r8
8001a504:	f6 e8 00 00 	ld.d	r8,r11[0]
8001a508:	f4 e9 00 00 	st.d	r10[0],r8
8001a50c:	76 28       	ld.w	r8,r11[0x8]
8001a50e:	95 28       	st.w	r10[0x8],r8
                                                .auto_refresh_mode    = true,                       // Auto Refresh Mode 
                                                .trigger_mode         = trigger_mode,               // Trigger selection
                                                .left_adjustment      = false,                      // Right Adjustment
                                                .data_shift           = 0,                          // Number of Data Shift 
                                                .data_round_enable    = false                       // Data Rouding Mode                                              };
};
8001a510:	ee f8 ff e8 	ld.w	r8,r7[-24]
8001a514:	5c 58       	castu.b	r8
8001a516:	30 19       	mov	r9,1
8001a518:	ef 69 ff ef 	st.b	r7[-17],r9
8001a51c:	ef 68 ff f0 	st.b	r7[-16],r8
8001a520:	30 08       	mov	r8,0
8001a522:	ef 68 ff f1 	st.b	r7[-15],r8
8001a526:	30 08       	mov	r8,0
8001a528:	ef 68 ff f2 	st.b	r7[-14],r8
8001a52c:	30 08       	mov	r8,0
8001a52e:	ef 68 ff f3 	st.b	r7[-13],r8

    // Assign and enable GPIO pins to the DAC function.
  gpio_enable_module(DACIFB_GPIO_MAP, sizeof(DACIFB_GPIO_MAP) / sizeof(DACIFB_GPIO_MAP[0]));
8001a532:	30 4b       	mov	r11,4
8001a534:	ec fc 08 a0 	ld.w	r12,r6[2208]
8001a538:	f0 16 00 88 	mcall	r6[544]

  // Get DACIFB Factory Configuration
  //dacifb_get_calibration_data(dacifb, &dacifb_opt, DAC_AUDIO_INSTANCE);
                              
  // configure DACIFB
  if (dacifb_configure(dacifb,
8001a53c:	ec f8 02 3c 	ld.w	r8,r6[572]
8001a540:	70 08       	ld.w	r8,r8[0x0]
8001a542:	ee c9 00 0c 	sub	r9,r7,12
8001a546:	e0 6a 24 00 	mov	r10,9216
8001a54a:	ea 1a 00 f4 	orh	r10,0xf4
8001a54e:	12 9b       	mov	r11,r9
8001a550:	10 9c       	mov	r12,r8
8001a552:	f0 16 01 6b 	mcall	r6[1452]
8001a556:	18 98       	mov	r8,r12
8001a558:	58 08       	cp.w	r8,0
8001a55a:	c0 61       	brne	8001a566 <Init_DAC+0x7c>
                   &dacifb_opt,
                   FOSC0) ==0) {
				dbg_print("error configuring DAC");
8001a55c:	fe cc 00 a8 	sub	r12,pc,168
8001a560:	f0 16 00 01 	mcall	r6[4]
				while (1);
8001a564:	c0 08       	rjmp	8001a564 <Init_DAC+0x7a>
  }
  
  // Enable the DACIFB channels.

  // configure channel DACIFB
  if (dacifb_configure_channel(dacifb,
8001a566:	ec f8 03 80 	ld.w	r8,r6[896]
8001a56a:	11 88       	ld.ub	r8,r8[0x0]
8001a56c:	10 9b       	mov	r11,r8
8001a56e:	ec f8 02 3c 	ld.w	r8,r6[572]
8001a572:	70 08       	ld.w	r8,r8[0x0]
8001a574:	ee ca 00 11 	sub	r10,r7,17
8001a578:	e0 69 4b 40 	mov	r9,19264
8001a57c:	ea 19 00 4c 	orh	r9,0x4c
8001a580:	10 9c       	mov	r12,r8
8001a582:	f0 16 01 ad 	mcall	r6[1716]
8001a586:	18 98       	mov	r8,r12
8001a588:	58 08       	cp.w	r8,0
8001a58a:	c0 61       	brne	8001a596 <Init_DAC+0xac>
                           dac_channel_audio,
                           &dacifb_channel_opt,
                           DAC_PRESCALER_CLOCK) ==0) {
				dbg_print("error configuring DAC channel");
8001a58c:	fe cc 00 c0 	sub	r12,pc,192
8001a590:	f0 16 00 01 	mcall	r6[4]
				while (1);
8001a594:	c0 08       	rjmp	8001a594 <Init_DAC+0xaa>
  }
  
  dacifb_start_channel(dacifb,
8001a596:	ec f8 03 80 	ld.w	r8,r6[896]
8001a59a:	11 88       	ld.ub	r8,r8[0x0]
8001a59c:	10 99       	mov	r9,r8
8001a59e:	ec f8 02 3c 	ld.w	r8,r6[572]
8001a5a2:	70 08       	ld.w	r8,r8[0x0]
8001a5a4:	e0 6a 24 00 	mov	r10,9216
8001a5a8:	ea 1a 00 f4 	orh	r10,0xf4
8001a5ac:	12 9b       	mov	r11,r9
8001a5ae:	10 9c       	mov	r12,r8
8001a5b0:	f0 16 01 43 	mcall	r6[1292]
                       dac_channel_audio,
                       FOSC0);


}
8001a5b4:	2f ad       	sub	sp,-24
8001a5b6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001a5ba:	00 00       	add	r0,r0
8001a5bc:	80 01       	ld.sh	r1,r0[0x0]
8001a5be:	a3 78       	lsl	r8,0x3

8001a5c0 <DAC_load_buffer>:

void DAC_load_buffer(uint16_t* samples, int from_sample, int to_sample, int repeat) {
8001a5c0:	eb cd 40 c0 	pushm	r6-r7,lr
8001a5c4:	1a 97       	mov	r7,sp
8001a5c6:	20 4d       	sub	sp,16
8001a5c8:	4a a6       	lddpc	r6,8001a670 <DAC_load_buffer+0xb0>
8001a5ca:	1e 26       	rsub	r6,pc
8001a5cc:	ef 4c ff fc 	st.w	r7[-4],r12
8001a5d0:	ef 4b ff f8 	st.w	r7[-8],r11
8001a5d4:	ef 4a ff f4 	st.w	r7[-12],r10
8001a5d8:	ef 49 ff f0 	st.w	r7[-16],r9
  // PDCA channel options
  buffer=samples;
8001a5dc:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001a5e0:	ec f8 03 38 	ld.w	r8,r6[824]
8001a5e4:	91 09       	st.w	r8[0x0],r9
  from=from_sample;
8001a5e6:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001a5ea:	5c 88       	casts.h	r8
8001a5ec:	ec f9 01 6c 	ld.w	r9,r6[364]
8001a5f0:	b2 08       	st.h	r9[0x0],r8
  to=to_sample;
8001a5f2:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001a5f6:	5c 88       	casts.h	r8
8001a5f8:	ec f9 02 58 	ld.w	r9,r6[600]
8001a5fc:	b2 08       	st.h	r9[0x0],r8
    .size = 0,                         // transfer counter
    .r_addr = NULL,                                // next memory address
    .r_size = 0,                                   // next transfer counter
    .transfer_size = PDCA_TRANSFER_SIZE_HALF_WORD  // select size of the transfer      
  };
  PDCA_OPTIONS.addr=(char *)samples + 2*from;
8001a5fe:	ec f8 01 6c 	ld.w	r8,r6[364]
8001a602:	90 08       	ld.sh	r8,r8[0x0]
8001a604:	5c 88       	casts.h	r8
8001a606:	5c 78       	castu.h	r8
8001a608:	a1 78       	lsl	r8,0x1
8001a60a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001a60e:	10 09       	add	r9,r8
8001a610:	ec f8 03 34 	ld.w	r8,r6[820]
8001a614:	91 09       	st.w	r8[0x0],r9
  PDCA_OPTIONS.size=to-from;
8001a616:	ec f8 02 58 	ld.w	r8,r6[600]
8001a61a:	90 08       	ld.sh	r8,r8[0x0]
8001a61c:	5c 88       	casts.h	r8
8001a61e:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
8001a622:	ec f8 01 6c 	ld.w	r8,r6[364]
8001a626:	90 08       	ld.sh	r8,r8[0x0]
8001a628:	5c 88       	casts.h	r8
8001a62a:	5c 78       	castu.h	r8
8001a62c:	f2 08 01 08 	sub	r8,r9,r8
8001a630:	10 99       	mov	r9,r8
8001a632:	ec f8 03 34 	ld.w	r8,r6[820]
8001a636:	91 19       	st.w	r8[0x4],r9

  // Initialize Event Controller
  init_pevc();
8001a638:	f0 16 01 d1 	mcall	r6[1860]
  // Initialize Generic Clock
  init_gclk();
8001a63c:	f0 16 01 c4 	mcall	r6[1808]

  // Init PDCA channel with the pdca_options.
  pdca_init_channel(PDCA_CHANNEL_DAC, &PDCA_OPTIONS); // init PDCA channel with options.
8001a640:	ec fb 03 34 	ld.w	r11,r6[820]
8001a644:	30 4c       	mov	r12,4
8001a646:	f0 16 00 af 	mcall	r6[700]

  autoplay=repeat;
8001a64a:	ec f8 04 a8 	ld.w	r8,r6[1192]
8001a64e:	ee f9 ff f0 	ld.w	r9,r7[-16]
8001a652:	91 09       	st.w	r8[0x0],r9
  //if (repeat==1) {
	  // TODO: for some reason having this interrupt tends to crash occasionally
      INTC_register_interrupt( (__int_handler) &pdca_int_handler_dac, AVR32_PDCA_IRQ_4, AVR32_INTC_INT0);
8001a654:	30 0a       	mov	r10,0
8001a656:	e0 6b 00 80 	mov	r11,128
8001a65a:	fe cc 02 72 	sub	r12,pc,626
8001a65e:	f0 16 00 3b 	mcall	r6[236]
	  pdca_enable_interrupt_transfer_complete(PDCA_CHANNEL_DAC);
8001a662:	30 4c       	mov	r12,4
8001a664:	f0 16 01 02 	mcall	r6[1032]
  //}  
} 
8001a668:	2f cd       	sub	sp,-16
8001a66a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001a66e:	00 00       	add	r0,r0
8001a670:	80 01       	ld.sh	r1,r0[0x0]
8001a672:	a4 4e       	st.h	r2[0x8],lr

8001a674 <DAC_play>:

void DAC_play() {
8001a674:	eb cd 40 c0 	pushm	r6-r7,lr
8001a678:	1a 97       	mov	r7,sp
8001a67a:	49 56       	lddpc	r6,8001a6cc <DAC_play+0x58>
8001a67c:	1e 26       	rsub	r6,pc
	//Disable_global_interrupt();
	pdca_disable(PDCA_CHANNEL_DAC);
8001a67e:	30 4c       	mov	r12,4
8001a680:	f0 16 00 89 	mcall	r6[548]
	pdca_reload_channel(PDCA_CHANNEL_DAC, (void *)buffer+2*from, to-from);
8001a684:	ec f8 02 58 	ld.w	r8,r6[600]
8001a688:	90 08       	ld.sh	r8,r8[0x0]
8001a68a:	5c 88       	casts.h	r8
8001a68c:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
8001a690:	ec f8 01 6c 	ld.w	r8,r6[364]
8001a694:	90 08       	ld.sh	r8,r8[0x0]
8001a696:	5c 88       	casts.h	r8
8001a698:	5c 78       	castu.h	r8
8001a69a:	f2 08 01 08 	sub	r8,r9,r8
8001a69e:	10 99       	mov	r9,r8
8001a6a0:	ec f8 03 38 	ld.w	r8,r6[824]
8001a6a4:	70 0a       	ld.w	r10,r8[0x0]
8001a6a6:	ec f8 01 6c 	ld.w	r8,r6[364]
8001a6aa:	90 08       	ld.sh	r8,r8[0x0]
8001a6ac:	5c 88       	casts.h	r8
8001a6ae:	5c 78       	castu.h	r8
8001a6b0:	a1 78       	lsl	r8,0x1
8001a6b2:	f4 08 00 08 	add	r8,r10,r8
8001a6b6:	12 9a       	mov	r10,r9
8001a6b8:	10 9b       	mov	r11,r8
8001a6ba:	30 4c       	mov	r12,4
8001a6bc:	f0 16 00 f8 	mcall	r6[992]
  // Enable now the transfer.
    //Enable_global_interrupt();
    pdca_enable(PDCA_CHANNEL_DAC);
8001a6c0:	30 4c       	mov	r12,4
8001a6c2:	f0 16 00 b8 	mcall	r6[736]

  
}
8001a6c6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001a6ca:	00 00       	add	r0,r0
8001a6cc:	80 01       	ld.sh	r1,r0[0x0]
8001a6ce:	a5 00       	ld.d	r0,r2

8001a6d0 <DAC_pause>:

void DAC_pause(void) {
8001a6d0:	eb cd 40 80 	pushm	r7,lr
8001a6d4:	1a 97       	mov	r7,sp

}
8001a6d6:	e3 cd 80 80 	ldm	sp++,r7,pc

8001a6da <DAC_resume>:

void DAC_resume(void) {
8001a6da:	eb cd 40 80 	pushm	r7,lr
8001a6de:	1a 97       	mov	r7,sp

}
8001a6e0:	e3 cd 80 80 	ldm	sp++,r7,pc

8001a6e4 <DAC_is_finished>:

int  DAC_is_finished(void) {
8001a6e4:	eb cd 40 80 	pushm	r7,lr
8001a6e8:	1a 97       	mov	r7,sp
	return 0;
8001a6ea:	30 08       	mov	r8,0
}
8001a6ec:	10 9c       	mov	r12,r8
8001a6ee:	e3 cd 80 80 	ldm	sp++,r7,pc

8001a6f2 <DAC_set_value>:

void DAC_set_value(int32_t output) {
8001a6f2:	eb cd 40 c0 	pushm	r6-r7,lr
8001a6f6:	1a 97       	mov	r7,sp
8001a6f8:	20 1d       	sub	sp,4
8001a6fa:	48 76       	lddpc	r6,8001a714 <DAC_set_value+0x22>
8001a6fc:	1e 26       	rsub	r6,pc
8001a6fe:	ef 4c ff fc 	st.w	r7[-4],r12
	dacifb->dr0 = (output); 
8001a702:	ec f8 02 3c 	ld.w	r8,r6[572]
8001a706:	70 08       	ld.w	r8,r8[0x0]
8001a708:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001a70c:	91 b9       	st.w	r8[0x2c],r9
}
8001a70e:	2f fd       	sub	sp,-4
8001a710:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001a714:	80 01       	ld.sh	r1,r0[0x0]
8001a716:	a5 80       	lsr	r0,0x4

8001a718 <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
8001a718:	eb cd 40 c0 	pushm	r6-r7,lr
8001a71c:	1a 97       	mov	r7,sp
8001a71e:	20 6d       	sub	sp,24
8001a720:	49 e6       	lddpc	r6,8001a798 <interpolate+0x80>
8001a722:	1e 26       	rsub	r6,pc
8001a724:	ef 4c ff f8 	st.w	r7[-8],r12
8001a728:	ef 4b ff f4 	st.w	r7[-12],r11
8001a72c:	ef 4a ff f0 	st.w	r7[-16],r10
8001a730:	ef 49 ff ec 	st.w	r7[-20],r9
8001a734:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
8001a738:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001a73c:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001a740:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
8001a744:	c0 41       	brne	8001a74c <interpolate+0x34>
	{
		return y1;
8001a746:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001a74a:	c2 38       	rjmp	8001a790 <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
8001a74c:	ee f9 ff e8 	ld.w	r9,r7[-24]
8001a750:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001a754:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8001a758:	ee fa ff f8 	ld.w	r10,r7[-8]
8001a75c:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001a760:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
8001a764:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8001a768:	ee fa ff f0 	ld.w	r10,r7[-16]
8001a76c:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001a770:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8001a774:	12 9b       	mov	r11,r9
8001a776:	10 9c       	mov	r12,r8
8001a778:	f0 16 00 08 	mcall	r6[32]
8001a77c:	18 98       	mov	r8,r12
8001a77e:	10 99       	mov	r9,r8
8001a780:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001a784:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8001a788:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
8001a78c:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
8001a790:	10 9c       	mov	r12,r8
8001a792:	2f ad       	sub	sp,-24
8001a794:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001a798:	80 01       	ld.sh	r1,r0[0x0]
8001a79a:	a5 a6       	sbr	r6,0x4

8001a79c <init_itg3200_slow>:
gyro_config default_configuration;
uint8_t read_preamble=SENSOR_REG_ADDRESS;



void init_itg3200_slow(void) {
8001a79c:	eb cd 40 c0 	pushm	r6-r7,lr
8001a7a0:	1a 97       	mov	r7,sp
8001a7a2:	48 a6       	lddpc	r6,8001a7c8 <init_itg3200_slow+0x2c>
8001a7a4:	1e 26       	rsub	r6,pc
		.speed = 400000,
		.chip = ITG3200_SLAVE_ADDRESS, 
		.smbus=false
	};

	twim_master_init(&AVR32_TWIM0, &twi_opt);
8001a7a6:	ec fb 08 9c 	ld.w	r11,r6[2204]
8001a7aa:	fe 7c 38 00 	mov	r12,-51200
8001a7ae:	f0 16 00 69 	mcall	r6[420]
	twim_write(&AVR32_TWIM0, (uint8_t*)&default_configuration, 4, ITG3200_SLAVE_ADDRESS, false);
8001a7b2:	30 08       	mov	r8,0
8001a7b4:	36 89       	mov	r9,104
8001a7b6:	30 4a       	mov	r10,4
8001a7b8:	ec fb 03 64 	ld.w	r11,r6[868]
8001a7bc:	fe 7c 38 00 	mov	r12,-51200
8001a7c0:	f0 16 00 38 	mcall	r6[224]
}
8001a7c4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001a7c8:	80 01       	ld.sh	r1,r0[0x0]
8001a7ca:	a6 28       	st.h	r3[0x4],r8

8001a7cc <get_gyro_data_slow>:


gyro_data* get_gyro_data_slow(void) {
8001a7cc:	eb cd 40 c0 	pushm	r6-r7,lr
8001a7d0:	1a 97       	mov	r7,sp
8001a7d2:	20 1d       	sub	sp,4
8001a7d4:	48 f6       	lddpc	r6,8001a810 <get_gyro_data_slow+0x44>
8001a7d6:	1e 26       	rsub	r6,pc
	uint8_t write_then_read_preamble=SENSOR_REG_ADDRESS;
8001a7d8:	31 b8       	mov	r8,27
8001a7da:	ef 68 ff ff 	st.b	r7[-1],r8
	twim_write(&AVR32_TWIM0, (uint8_t*) &write_then_read_preamble, 1, ITG3200_SLAVE_ADDRESS, false);
8001a7de:	ee cb 00 01 	sub	r11,r7,1
8001a7e2:	30 08       	mov	r8,0
8001a7e4:	36 89       	mov	r9,104
8001a7e6:	30 1a       	mov	r10,1
8001a7e8:	fe 7c 38 00 	mov	r12,-51200
8001a7ec:	f0 16 00 38 	mcall	r6[224]
	twim_read(&AVR32_TWIM0, (uint8_t*)&gyro_outputs, 8, ITG3200_SLAVE_ADDRESS, false);
8001a7f0:	ec fb 04 a4 	ld.w	r11,r6[1188]
8001a7f4:	30 08       	mov	r8,0
8001a7f6:	36 89       	mov	r9,104
8001a7f8:	30 8a       	mov	r10,8
8001a7fa:	fe 7c 38 00 	mov	r12,-51200
8001a7fe:	f0 16 00 62 	mcall	r6[392]
	
	
	return &gyro_outputs;
8001a802:	ec f8 04 a4 	ld.w	r8,r6[1188]
8001a806:	10 9c       	mov	r12,r8
8001a808:	2f fd       	sub	sp,-4
8001a80a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001a80e:	00 00       	add	r0,r0
8001a810:	80 01       	ld.sh	r1,r0[0x0]
8001a812:	a6 5a       	st.h	r3[0xa],r10

8001a814 <LED_Read_Display>:
//! Saved state of all LEDs.
static volatile U32 LED_State = (1 << LED_COUNT) - 1;


U32 LED_Read_Display(void)
{
8001a814:	eb cd 40 c0 	pushm	r6-r7,lr
8001a818:	1a 97       	mov	r7,sp
8001a81a:	48 56       	lddpc	r6,8001a82c <LED_Read_Display+0x18>
8001a81c:	1e 26       	rsub	r6,pc
  return LED_State;
8001a81e:	ec f8 00 e8 	ld.w	r8,r6[232]
8001a822:	70 08       	ld.w	r8,r8[0x0]
}
8001a824:	10 9c       	mov	r12,r8
8001a826:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001a82a:	00 00       	add	r0,r0
8001a82c:	80 01       	ld.sh	r1,r0[0x0]
8001a82e:	a6 a0       	st.b	r3[0x2],r0

8001a830 <LED_Display>:


void LED_Display(U32 leds)
{
8001a830:	eb cd 40 c0 	pushm	r6-r7,lr
8001a834:	1a 97       	mov	r7,sp
8001a836:	20 3d       	sub	sp,12
8001a838:	4a 96       	lddpc	r6,8001a8dc <LED_Display+0xac>
8001a83a:	1e 26       	rsub	r6,pc
8001a83c:	ef 4c ff f4 	st.w	r7[-12],r12
  // Use the LED descriptors to get the connections of a given LED to the MCU.
  tLED_DESCRIPTOR *led_descriptor;
  volatile avr32_gpio_port_t *led_gpio_port;

  // Make sure only existing LEDs are specified.
  leds &= (1 << LED_COUNT) - 1;
8001a840:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001a844:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
8001a848:	ef 48 ff f4 	st.w	r7[-12],r8

  // Update the saved state of all LEDs with the requested changes.
  LED_State = leds;
8001a84c:	ec f8 00 e8 	ld.w	r8,r6[232]
8001a850:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001a854:	91 09       	st.w	r8[0x0],r9

  // For all LEDs...
  for (led_descriptor = &LED_DESCRIPTOR[0];
8001a856:	ec f8 01 94 	ld.w	r8,r6[404]
8001a85a:	ef 48 ff f8 	st.w	r7[-8],r8
8001a85e:	c3 58       	rjmp	8001a8c8 <LED_Display+0x98>
       led_descriptor < LED_DESCRIPTOR + LED_COUNT;
       led_descriptor++)
  {
    // Set the LED to the requested state.
    led_gpio_port = &AVR32_GPIO.port[led_descriptor->GPIO.PORT];
8001a860:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001a864:	70 08       	ld.w	r8,r8[0x0]
8001a866:	a9 78       	lsl	r8,0x9
8001a868:	e0 28 e0 00 	sub	r8,57344
8001a86c:	ef 48 ff fc 	st.w	r7[-4],r8
    if (leds & 1)
8001a870:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001a874:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8001a878:	5c 58       	castu.b	r8
8001a87a:	c0 90       	breq	8001a88c <LED_Display+0x5c>
    {
      led_gpio_port->ovrc  = led_descriptor->GPIO.PIN_MASK;
8001a87c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001a880:	70 19       	ld.w	r9,r8[0x4]
8001a882:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001a886:	f1 49 00 58 	st.w	r8[88],r9
8001a88a:	c0 88       	rjmp	8001a89a <LED_Display+0x6a>
    }
    else
    {
      led_gpio_port->ovrs  = led_descriptor->GPIO.PIN_MASK;
8001a88c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001a890:	70 19       	ld.w	r9,r8[0x4]
8001a892:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001a896:	f1 49 00 54 	st.w	r8[84],r9
    }
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
8001a89a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001a89e:	70 19       	ld.w	r9,r8[0x4]
8001a8a0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001a8a4:	f1 49 00 44 	st.w	r8[68],r9
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
8001a8a8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001a8ac:	70 19       	ld.w	r9,r8[0x4]
8001a8ae:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001a8b2:	91 19       	st.w	r8[0x4],r9
    leds >>= 1;
8001a8b4:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001a8b8:	a1 98       	lsr	r8,0x1
8001a8ba:	ef 48 ff f4 	st.w	r7[-12],r8
  LED_State = leds;

  // For all LEDs...
  for (led_descriptor = &LED_DESCRIPTOR[0];
       led_descriptor < LED_DESCRIPTOR + LED_COUNT;
       led_descriptor++)
8001a8be:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001a8c2:	2f 08       	sub	r8,-16
8001a8c4:	ef 48 ff f8 	st.w	r7[-8],r8

  // Update the saved state of all LEDs with the requested changes.
  LED_State = leds;

  // For all LEDs...
  for (led_descriptor = &LED_DESCRIPTOR[0];
8001a8c8:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001a8cc:	ec f8 01 94 	ld.w	r8,r6[404]
8001a8d0:	2e 08       	sub	r8,-32
8001a8d2:	10 39       	cp.w	r9,r8
8001a8d4:	cc 63       	brcs	8001a860 <LED_Display+0x30>
    }
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
    leds >>= 1;
  }
}
8001a8d6:	2f dd       	sub	sp,-12
8001a8d8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001a8dc:	80 01       	ld.sh	r1,r0[0x0]
8001a8de:	a6 be       	st.b	r3[0x3],lr

8001a8e0 <LED_Read_Display_Mask>:


U32 LED_Read_Display_Mask(U32 mask)
{
8001a8e0:	eb cd 40 c0 	pushm	r6-r7,lr
8001a8e4:	1a 97       	mov	r7,sp
8001a8e6:	20 1d       	sub	sp,4
8001a8e8:	48 86       	lddpc	r6,8001a908 <LED_Read_Display_Mask+0x28>
8001a8ea:	1e 26       	rsub	r6,pc
8001a8ec:	ef 4c ff fc 	st.w	r7[-4],r12
  return Rd_bits(LED_State, mask);
8001a8f0:	ec f8 00 e8 	ld.w	r8,r6[232]
8001a8f4:	70 09       	ld.w	r9,r8[0x0]
8001a8f6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001a8fa:	f3 e8 00 08 	and	r8,r9,r8
}
8001a8fe:	10 9c       	mov	r12,r8
8001a900:	2f fd       	sub	sp,-4
8001a902:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001a906:	00 00       	add	r0,r0
8001a908:	80 01       	ld.sh	r1,r0[0x0]
8001a90a:	a7 6e       	lsl	lr,0x6

8001a90c <LED_Display_Mask>:


void LED_Display_Mask(U32 mask, U32 leds)
{
8001a90c:	eb cd 40 c0 	pushm	r6-r7,lr
8001a910:	1a 97       	mov	r7,sp
8001a912:	20 5d       	sub	sp,20
8001a914:	4b f6       	lddpc	r6,8001aa10 <LED_Display_Mask+0x104>
8001a916:	1e 26       	rsub	r6,pc
8001a918:	ef 4c ff f0 	st.w	r7[-16],r12
8001a91c:	ef 4b ff ec 	st.w	r7[-20],r11
  // Use the LED descriptors to get the connections of a given LED to the MCU.
  tLED_DESCRIPTOR *led_descriptor = &LED_DESCRIPTOR[0] - 1;
8001a920:	ec f8 01 94 	ld.w	r8,r6[404]
8001a924:	21 08       	sub	r8,16
8001a926:	ef 48 ff f4 	st.w	r7[-12],r8
  volatile avr32_gpio_port_t *led_gpio_port;
  U8 led_shift;

  // Make sure only existing LEDs are specified.
  mask &= (1 << LED_COUNT) - 1;
8001a92a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001a92e:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
8001a932:	ef 48 ff f0 	st.w	r7[-16],r8

  // Update the saved state of all LEDs with the requested changes.
  Wr_bits(LED_State, mask, leds);
8001a936:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001a93a:	f0 09 11 ff 	rsub	r9,r8,-1
8001a93e:	ec f8 00 e8 	ld.w	r8,r6[232]
8001a942:	70 08       	ld.w	r8,r8[0x0]
8001a944:	10 69       	and	r9,r8
8001a946:	ee fa ff ec 	ld.w	r10,r7[-20]
8001a94a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001a94e:	f5 e8 00 08 	and	r8,r10,r8
8001a952:	10 49       	or	r9,r8
8001a954:	ec f8 00 e8 	ld.w	r8,r6[232]
8001a958:	91 09       	st.w	r8[0x0],r9

  // While there are specified LEDs left to manage...
  while (mask)
8001a95a:	c5 38       	rjmp	8001aa00 <LED_Display_Mask+0xf4>
  {
    // Select the next specified LED and set it to the requested state.
    led_shift = 1 + ctz(mask);
8001a95c:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001a960:	5c 98       	brev	r8
8001a962:	f0 08 12 00 	clz	r8,r8
8001a966:	5c 58       	castu.b	r8
8001a968:	2f f8       	sub	r8,-1
8001a96a:	ef 68 ff ff 	st.b	r7[-1],r8
    led_descriptor += led_shift;
8001a96e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8001a972:	a5 68       	lsl	r8,0x4
8001a974:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001a978:	f2 08 00 08 	add	r8,r9,r8
8001a97c:	ef 48 ff f4 	st.w	r7[-12],r8
    led_gpio_port = &AVR32_GPIO.port[led_descriptor->GPIO.PORT];
8001a980:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001a984:	70 08       	ld.w	r8,r8[0x0]
8001a986:	a9 78       	lsl	r8,0x9
8001a988:	e0 28 e0 00 	sub	r8,57344
8001a98c:	ef 48 ff f8 	st.w	r7[-8],r8
    leds >>= led_shift - 1;
8001a990:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8001a994:	20 18       	sub	r8,1
8001a996:	ee f9 ff ec 	ld.w	r9,r7[-20]
8001a99a:	f2 08 0a 48 	lsr	r8,r9,r8
8001a99e:	ef 48 ff ec 	st.w	r7[-20],r8
    if (leds & 1)
8001a9a2:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001a9a6:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8001a9aa:	5c 58       	castu.b	r8
8001a9ac:	c0 90       	breq	8001a9be <LED_Display_Mask+0xb2>
    {
      led_gpio_port->ovrc  = led_descriptor->GPIO.PIN_MASK;
8001a9ae:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001a9b2:	70 19       	ld.w	r9,r8[0x4]
8001a9b4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001a9b8:	f1 49 00 58 	st.w	r8[88],r9
8001a9bc:	c0 88       	rjmp	8001a9cc <LED_Display_Mask+0xc0>
    }
    else
    {
      led_gpio_port->ovrs  = led_descriptor->GPIO.PIN_MASK;
8001a9be:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001a9c2:	70 19       	ld.w	r9,r8[0x4]
8001a9c4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001a9c8:	f1 49 00 54 	st.w	r8[84],r9
    }
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
8001a9cc:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001a9d0:	70 19       	ld.w	r9,r8[0x4]
8001a9d2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001a9d6:	f1 49 00 44 	st.w	r8[68],r9
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
8001a9da:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001a9de:	70 19       	ld.w	r9,r8[0x4]
8001a9e0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001a9e4:	91 19       	st.w	r8[0x4],r9
    leds >>= 1;
8001a9e6:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001a9ea:	a1 98       	lsr	r8,0x1
8001a9ec:	ef 48 ff ec 	st.w	r7[-20],r8
    mask >>= led_shift;
8001a9f0:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8001a9f4:	ee f9 ff f0 	ld.w	r9,r7[-16]
8001a9f8:	f2 08 0a 48 	lsr	r8,r9,r8
8001a9fc:	ef 48 ff f0 	st.w	r7[-16],r8

  // Update the saved state of all LEDs with the requested changes.
  Wr_bits(LED_State, mask, leds);

  // While there are specified LEDs left to manage...
  while (mask)
8001aa00:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001aa04:	58 08       	cp.w	r8,0
8001aa06:	ca b1       	brne	8001a95c <LED_Display_Mask+0x50>
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
    leds >>= 1;
    mask >>= led_shift;
  }
}
8001aa08:	2f bd       	sub	sp,-20
8001aa0a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001aa0e:	00 00       	add	r0,r0
8001aa10:	80 01       	ld.sh	r1,r0[0x0]
8001aa12:	a7 9a       	lsr	r10,0x7

8001aa14 <LED_Test>:


bool LED_Test(U32 leds)
{
8001aa14:	eb cd 40 c0 	pushm	r6-r7,lr
8001aa18:	1a 97       	mov	r7,sp
8001aa1a:	20 1d       	sub	sp,4
8001aa1c:	48 96       	lddpc	r6,8001aa40 <LED_Test+0x2c>
8001aa1e:	1e 26       	rsub	r6,pc
8001aa20:	ef 4c ff fc 	st.w	r7[-4],r12
  return Tst_bits(LED_State, leds);
8001aa24:	ec f8 00 e8 	ld.w	r8,r6[232]
8001aa28:	70 09       	ld.w	r9,r8[0x0]
8001aa2a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001aa2e:	f3 e8 00 08 	and	r8,r9,r8
8001aa32:	5f 18       	srne	r8
8001aa34:	5c 58       	castu.b	r8
}
8001aa36:	10 9c       	mov	r12,r8
8001aa38:	2f fd       	sub	sp,-4
8001aa3a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001aa3e:	00 00       	add	r0,r0
8001aa40:	80 01       	ld.sh	r1,r0[0x0]
8001aa42:	a8 a2       	st.b	r4[0x2],r2

8001aa44 <LED_Off>:


void LED_Off(U32 leds)
{
8001aa44:	eb cd 40 c0 	pushm	r6-r7,lr
8001aa48:	1a 97       	mov	r7,sp
8001aa4a:	20 4d       	sub	sp,16
8001aa4c:	4a b6       	lddpc	r6,8001aaf8 <LED_Off+0xb4>
8001aa4e:	1e 26       	rsub	r6,pc
8001aa50:	ef 4c ff f0 	st.w	r7[-16],r12
  // Use the LED descriptors to get the connections of a given LED to the MCU.
  tLED_DESCRIPTOR *led_descriptor = &LED_DESCRIPTOR[0] - 1;
8001aa54:	ec f8 01 94 	ld.w	r8,r6[404]
8001aa58:	21 08       	sub	r8,16
8001aa5a:	ef 48 ff f4 	st.w	r7[-12],r8
  volatile avr32_gpio_port_t *led_gpio_port;
  U8 led_shift;

  // Make sure only existing LEDs are specified.
  leds &= (1 << LED_COUNT) - 1;
8001aa5e:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001aa62:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
8001aa66:	ef 48 ff f0 	st.w	r7[-16],r8

  // Update the saved state of all LEDs with the requested changes.
  //Clr_bits(LED_State, leds);
  Set_bits(LED_State, leds);
8001aa6a:	ec f8 00 e8 	ld.w	r8,r6[232]
8001aa6e:	70 09       	ld.w	r9,r8[0x0]
8001aa70:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001aa74:	10 49       	or	r9,r8
8001aa76:	ec f8 00 e8 	ld.w	r8,r6[232]
8001aa7a:	91 09       	st.w	r8[0x0],r9
  // While there are specified LEDs left to manage...
  while (leds)
8001aa7c:	c3 78       	rjmp	8001aaea <LED_Off+0xa6>
  {
    // Select the next specified LED and turn it off.
    led_shift = 1 + ctz(leds);
8001aa7e:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001aa82:	5c 98       	brev	r8
8001aa84:	f0 08 12 00 	clz	r8,r8
8001aa88:	5c 58       	castu.b	r8
8001aa8a:	2f f8       	sub	r8,-1
8001aa8c:	ef 68 ff ff 	st.b	r7[-1],r8
    led_descriptor += led_shift;
8001aa90:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8001aa94:	a5 68       	lsl	r8,0x4
8001aa96:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001aa9a:	f2 08 00 08 	add	r8,r9,r8
8001aa9e:	ef 48 ff f4 	st.w	r7[-12],r8
    led_gpio_port = &AVR32_GPIO.port[led_descriptor->GPIO.PORT];
8001aaa2:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001aaa6:	70 08       	ld.w	r8,r8[0x0]
8001aaa8:	a9 78       	lsl	r8,0x9
8001aaaa:	e0 28 e0 00 	sub	r8,57344
8001aaae:	ef 48 ff f8 	st.w	r7[-8],r8
    led_gpio_port->ovrs  = led_descriptor->GPIO.PIN_MASK;
8001aab2:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001aab6:	70 19       	ld.w	r9,r8[0x4]
8001aab8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001aabc:	f1 49 00 54 	st.w	r8[84],r9
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
8001aac0:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001aac4:	70 19       	ld.w	r9,r8[0x4]
8001aac6:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001aaca:	f1 49 00 44 	st.w	r8[68],r9
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
8001aace:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001aad2:	70 19       	ld.w	r9,r8[0x4]
8001aad4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001aad8:	91 19       	st.w	r8[0x4],r9
    leds >>= led_shift;
8001aada:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8001aade:	ee f9 ff f0 	ld.w	r9,r7[-16]
8001aae2:	f2 08 0a 48 	lsr	r8,r9,r8
8001aae6:	ef 48 ff f0 	st.w	r7[-16],r8

  // Update the saved state of all LEDs with the requested changes.
  //Clr_bits(LED_State, leds);
  Set_bits(LED_State, leds);
  // While there are specified LEDs left to manage...
  while (leds)
8001aaea:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001aaee:	58 08       	cp.w	r8,0
8001aaf0:	cc 71       	brne	8001aa7e <LED_Off+0x3a>
    led_gpio_port->ovrs  = led_descriptor->GPIO.PIN_MASK;
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
    leds >>= led_shift;
  }
}
8001aaf2:	2f cd       	sub	sp,-16
8001aaf4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001aaf8:	80 01       	ld.sh	r1,r0[0x0]
8001aafa:	a8 d2       	st.b	r4[0x5],r2

8001aafc <LED_On>:


void LED_On(U32 leds)
{
8001aafc:	eb cd 40 c0 	pushm	r6-r7,lr
8001ab00:	1a 97       	mov	r7,sp
8001ab02:	20 4d       	sub	sp,16
8001ab04:	4a c6       	lddpc	r6,8001abb4 <LED_On+0xb8>
8001ab06:	1e 26       	rsub	r6,pc
8001ab08:	ef 4c ff f0 	st.w	r7[-16],r12
  // Use the LED descriptors to get the connections of a given LED to the MCU.
  tLED_DESCRIPTOR *led_descriptor = &LED_DESCRIPTOR[0] - 1;
8001ab0c:	ec f8 01 94 	ld.w	r8,r6[404]
8001ab10:	21 08       	sub	r8,16
8001ab12:	ef 48 ff f4 	st.w	r7[-12],r8
  volatile avr32_gpio_port_t *led_gpio_port;
  U8 led_shift;

  // Make sure only existing LEDs are specified.
  leds &= (1 << LED_COUNT) - 1;
8001ab16:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001ab1a:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
8001ab1e:	ef 48 ff f0 	st.w	r7[-16],r8

  // Update the saved state of all LEDs with the requested changes.
  //Set_bits(LED_State, leds);
  Clr_bits(LED_State, leds);
8001ab22:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001ab26:	f0 09 11 ff 	rsub	r9,r8,-1
8001ab2a:	ec f8 00 e8 	ld.w	r8,r6[232]
8001ab2e:	70 08       	ld.w	r8,r8[0x0]
8001ab30:	10 69       	and	r9,r8
8001ab32:	ec f8 00 e8 	ld.w	r8,r6[232]
8001ab36:	91 09       	st.w	r8[0x0],r9
  // While there are specified LEDs left to manage...
  while (leds)
8001ab38:	c3 78       	rjmp	8001aba6 <LED_On+0xaa>
  {
    // Select the next specified LED and turn it on.
    led_shift = 1 + ctz(leds);
8001ab3a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001ab3e:	5c 98       	brev	r8
8001ab40:	f0 08 12 00 	clz	r8,r8
8001ab44:	5c 58       	castu.b	r8
8001ab46:	2f f8       	sub	r8,-1
8001ab48:	ef 68 ff ff 	st.b	r7[-1],r8
    led_descriptor += led_shift;
8001ab4c:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8001ab50:	a5 68       	lsl	r8,0x4
8001ab52:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001ab56:	f2 08 00 08 	add	r8,r9,r8
8001ab5a:	ef 48 ff f4 	st.w	r7[-12],r8
    led_gpio_port = &AVR32_GPIO.port[led_descriptor->GPIO.PORT];
8001ab5e:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001ab62:	70 08       	ld.w	r8,r8[0x0]
8001ab64:	a9 78       	lsl	r8,0x9
8001ab66:	e0 28 e0 00 	sub	r8,57344
8001ab6a:	ef 48 ff f8 	st.w	r7[-8],r8
    led_gpio_port->ovrc  = led_descriptor->GPIO.PIN_MASK;
8001ab6e:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001ab72:	70 19       	ld.w	r9,r8[0x4]
8001ab74:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001ab78:	f1 49 00 58 	st.w	r8[88],r9
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
8001ab7c:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001ab80:	70 19       	ld.w	r9,r8[0x4]
8001ab82:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001ab86:	f1 49 00 44 	st.w	r8[68],r9
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
8001ab8a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001ab8e:	70 19       	ld.w	r9,r8[0x4]
8001ab90:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001ab94:	91 19       	st.w	r8[0x4],r9
    leds >>= led_shift;
8001ab96:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8001ab9a:	ee f9 ff f0 	ld.w	r9,r7[-16]
8001ab9e:	f2 08 0a 48 	lsr	r8,r9,r8
8001aba2:	ef 48 ff f0 	st.w	r7[-16],r8

  // Update the saved state of all LEDs with the requested changes.
  //Set_bits(LED_State, leds);
  Clr_bits(LED_State, leds);
  // While there are specified LEDs left to manage...
  while (leds)
8001aba6:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001abaa:	58 08       	cp.w	r8,0
8001abac:	cc 71       	brne	8001ab3a <LED_On+0x3e>
    led_gpio_port->ovrc  = led_descriptor->GPIO.PIN_MASK;
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
    leds >>= led_shift;
  }
}
8001abae:	2f cd       	sub	sp,-16
8001abb0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001abb4:	80 01       	ld.sh	r1,r0[0x0]
8001abb6:	a9 8a       	lsr	r10,0x8

8001abb8 <LED_Toggle>:


void LED_Toggle(U32 leds)
{
8001abb8:	eb cd 40 c0 	pushm	r6-r7,lr
8001abbc:	1a 97       	mov	r7,sp
8001abbe:	20 4d       	sub	sp,16
8001abc0:	4a b6       	lddpc	r6,8001ac6c <LED_Toggle+0xb4>
8001abc2:	1e 26       	rsub	r6,pc
8001abc4:	ef 4c ff f0 	st.w	r7[-16],r12
  // Use the LED descriptors to get the connections of a given LED to the MCU.
  tLED_DESCRIPTOR *led_descriptor = &LED_DESCRIPTOR[0] - 1;
8001abc8:	ec f8 01 94 	ld.w	r8,r6[404]
8001abcc:	21 08       	sub	r8,16
8001abce:	ef 48 ff f4 	st.w	r7[-12],r8
  volatile avr32_gpio_port_t *led_gpio_port;
  U8 led_shift;

  // Make sure only existing LEDs are specified.
  leds &= (1 << LED_COUNT) - 1;
8001abd2:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001abd6:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
8001abda:	ef 48 ff f0 	st.w	r7[-16],r8

  // Update the saved state of all LEDs with the requested changes.
  Tgl_bits(LED_State, leds);
8001abde:	ec f8 00 e8 	ld.w	r8,r6[232]
8001abe2:	70 09       	ld.w	r9,r8[0x0]
8001abe4:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001abe8:	10 59       	eor	r9,r8
8001abea:	ec f8 00 e8 	ld.w	r8,r6[232]
8001abee:	91 09       	st.w	r8[0x0],r9

  // While there are specified LEDs left to manage...
  while (leds)
8001abf0:	c3 78       	rjmp	8001ac5e <LED_Toggle+0xa6>
  {
    // Select the next specified LED and toggle it.
    led_shift = 1 + ctz(leds);
8001abf2:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001abf6:	5c 98       	brev	r8
8001abf8:	f0 08 12 00 	clz	r8,r8
8001abfc:	5c 58       	castu.b	r8
8001abfe:	2f f8       	sub	r8,-1
8001ac00:	ef 68 ff ff 	st.b	r7[-1],r8
    led_descriptor += led_shift;
8001ac04:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8001ac08:	a5 68       	lsl	r8,0x4
8001ac0a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001ac0e:	f2 08 00 08 	add	r8,r9,r8
8001ac12:	ef 48 ff f4 	st.w	r7[-12],r8
    led_gpio_port = &AVR32_GPIO.port[led_descriptor->GPIO.PORT];
8001ac16:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001ac1a:	70 08       	ld.w	r8,r8[0x0]
8001ac1c:	a9 78       	lsl	r8,0x9
8001ac1e:	e0 28 e0 00 	sub	r8,57344
8001ac22:	ef 48 ff f8 	st.w	r7[-8],r8
    led_gpio_port->ovrt  = led_descriptor->GPIO.PIN_MASK;
8001ac26:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001ac2a:	70 19       	ld.w	r9,r8[0x4]
8001ac2c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001ac30:	f1 49 00 5c 	st.w	r8[92],r9
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
8001ac34:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001ac38:	70 19       	ld.w	r9,r8[0x4]
8001ac3a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001ac3e:	f1 49 00 44 	st.w	r8[68],r9
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
8001ac42:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001ac46:	70 19       	ld.w	r9,r8[0x4]
8001ac48:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001ac4c:	91 19       	st.w	r8[0x4],r9
    leds >>= led_shift;
8001ac4e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8001ac52:	ee f9 ff f0 	ld.w	r9,r7[-16]
8001ac56:	f2 08 0a 48 	lsr	r8,r9,r8
8001ac5a:	ef 48 ff f0 	st.w	r7[-16],r8

  // Update the saved state of all LEDs with the requested changes.
  Tgl_bits(LED_State, leds);

  // While there are specified LEDs left to manage...
  while (leds)
8001ac5e:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001ac62:	58 08       	cp.w	r8,0
8001ac64:	cc 71       	brne	8001abf2 <LED_Toggle+0x3a>
    led_gpio_port->ovrt  = led_descriptor->GPIO.PIN_MASK;
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
    leds >>= led_shift;
  }
}
8001ac66:	2f cd       	sub	sp,-16
8001ac68:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001ac6c:	80 01       	ld.sh	r1,r0[0x0]
8001ac6e:	aa 46       	st.h	r5[0x8],r6

8001ac70 <LED_Read_Display_Field>:


U32 LED_Read_Display_Field(U32 field)
{
8001ac70:	eb cd 40 c0 	pushm	r6-r7,lr
8001ac74:	1a 97       	mov	r7,sp
8001ac76:	20 1d       	sub	sp,4
8001ac78:	48 b6       	lddpc	r6,8001aca4 <LED_Read_Display_Field+0x34>
8001ac7a:	1e 26       	rsub	r6,pc
8001ac7c:	ef 4c ff fc 	st.w	r7[-4],r12
  return Rd_bitfield(LED_State, field);
8001ac80:	ec f8 00 e8 	ld.w	r8,r6[232]
8001ac84:	70 09       	ld.w	r9,r8[0x0]
8001ac86:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001ac8a:	10 69       	and	r9,r8
8001ac8c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001ac90:	5c 98       	brev	r8
8001ac92:	f0 08 12 00 	clz	r8,r8
8001ac96:	f2 08 0a 48 	lsr	r8,r9,r8
}
8001ac9a:	10 9c       	mov	r12,r8
8001ac9c:	2f fd       	sub	sp,-4
8001ac9e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001aca2:	00 00       	add	r0,r0
8001aca4:	80 01       	ld.sh	r1,r0[0x0]
8001aca6:	aa fe       	st.b	r5[0x7],lr

8001aca8 <LED_Display_Field>:


void LED_Display_Field(U32 field, U32 leds)
{
8001aca8:	eb cd 40 c0 	pushm	r6-r7,lr
8001acac:	1a 97       	mov	r7,sp
8001acae:	20 2d       	sub	sp,8
8001acb0:	48 c6       	lddpc	r6,8001ace0 <LED_Display_Field+0x38>
8001acb2:	1e 26       	rsub	r6,pc
8001acb4:	ef 4c ff fc 	st.w	r7[-4],r12
8001acb8:	ef 4b ff f8 	st.w	r7[-8],r11
  // Move the bit-field to the appropriate position for the bit-mask.
  LED_Display_Mask(field, leds << ctz(field));
8001acbc:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001acc0:	5c 98       	brev	r8
8001acc2:	f0 08 12 00 	clz	r8,r8
8001acc6:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001acca:	f2 08 09 48 	lsl	r8,r9,r8
8001acce:	10 9b       	mov	r11,r8
8001acd0:	ee fc ff fc 	ld.w	r12,r7[-4]
8001acd4:	f0 16 01 7b 	mcall	r6[1516]
}
8001acd8:	2f ed       	sub	sp,-8
8001acda:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001acde:	00 00       	add	r0,r0
8001ace0:	80 01       	ld.sh	r1,r0[0x0]
8001ace2:	ab 36       	mul	r6,r5

8001ace4 <LED_Get_Intensity>:


U8 LED_Get_Intensity(U32 led)
{
8001ace4:	eb cd 40 80 	pushm	r7,lr
8001ace8:	1a 97       	mov	r7,sp
8001acea:	20 1d       	sub	sp,4
8001acec:	ef 4c ff fc 	st.w	r7[-4],r12
 // always return 0, UC3C don't have PWM connected to LED
 return 0;
8001acf0:	30 08       	mov	r8,0
}
8001acf2:	10 9c       	mov	r12,r8
8001acf4:	2f fd       	sub	sp,-4
8001acf6:	e3 cd 80 80 	ldm	sp++,r7,pc

8001acfa <LED_Set_Intensity>:


void LED_Set_Intensity(U32 leds, U8 intensity)
{
8001acfa:	eb cd 40 80 	pushm	r7,lr
8001acfe:	1a 97       	mov	r7,sp
8001ad00:	20 2d       	sub	sp,8
8001ad02:	ef 4c ff fc 	st.w	r7[-4],r12
8001ad06:	16 98       	mov	r8,r11
8001ad08:	ef 68 ff f8 	st.b	r7[-8],r8
 // always return, UC3C don't have PWM to modulate led intensity.
 return;
}
8001ad0c:	2f ed       	sub	sp,-8
8001ad0e:	e3 cd 80 80 	ldm	sp++,r7,pc
	...

8001ad14 <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
8001ad14:	eb cd 40 c0 	pushm	r6-r7,lr
8001ad18:	1a 97       	mov	r7,sp
8001ad1a:	20 6d       	sub	sp,24
8001ad1c:	49 e6       	lddpc	r6,8001ad94 <interpolate+0x80>
8001ad1e:	1e 26       	rsub	r6,pc
8001ad20:	ef 4c ff f8 	st.w	r7[-8],r12
8001ad24:	ef 4b ff f4 	st.w	r7[-12],r11
8001ad28:	ef 4a ff f0 	st.w	r7[-16],r10
8001ad2c:	ef 49 ff ec 	st.w	r7[-20],r9
8001ad30:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
8001ad34:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001ad38:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001ad3c:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
8001ad40:	c0 41       	brne	8001ad48 <interpolate+0x34>
	{
		return y1;
8001ad42:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001ad46:	c2 38       	rjmp	8001ad8c <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
8001ad48:	ee f9 ff e8 	ld.w	r9,r7[-24]
8001ad4c:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001ad50:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8001ad54:	ee fa ff f8 	ld.w	r10,r7[-8]
8001ad58:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001ad5c:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
8001ad60:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8001ad64:	ee fa ff f0 	ld.w	r10,r7[-16]
8001ad68:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001ad6c:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8001ad70:	12 9b       	mov	r11,r9
8001ad72:	10 9c       	mov	r12,r8
8001ad74:	f0 16 00 08 	mcall	r6[32]
8001ad78:	18 98       	mov	r8,r12
8001ad7a:	10 99       	mov	r9,r8
8001ad7c:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001ad80:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8001ad84:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
8001ad88:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
8001ad8c:	10 9c       	mov	r12,r8
8001ad8e:	2f ad       	sub	sp,-24
8001ad90:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001ad94:	80 01       	ld.sh	r1,r0[0x0]
8001ad96:	ab a2       	sbr	r2,0xa

8001ad98 <init_radar_modules>:
#include "i2c_driver_int.h"
#include "print_util.h"

radar_target main_target;

void init_radar_modules() {
8001ad98:	eb cd 40 c0 	pushm	r6-r7,lr
8001ad9c:	1a 97       	mov	r7,sp
8001ad9e:	48 66       	lddpc	r6,8001adb4 <init_radar_modules+0x1c>
8001ada0:	1e 26       	rsub	r6,pc
		.speed = 400000,
		.chip = 1,
		.smbus=false
	};

	twim_master_init(&AVR32_TWIM1, &twi_opt);
8001ada2:	ec fb 08 98 	ld.w	r11,r6[2200]
8001ada6:	fe 7c 3c 00 	mov	r12,-50176
8001adaa:	f0 16 00 69 	mcall	r6[420]
}
8001adae:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001adb2:	00 00       	add	r0,r0
8001adb4:	80 01       	ld.sh	r1,r0[0x0]
8001adb6:	ac 24       	st.h	r6[0x4],r4
8001adb8:	0a 00       	add	r0,r5

8001adba <read_radar>:


void read_radar() {
8001adba:	eb cd 40 c0 	pushm	r6-r7,lr
8001adbe:	1a 97       	mov	r7,sp
8001adc0:	20 1d       	sub	sp,4
8001adc2:	49 f6       	lddpc	r6,8001ae3c <read_radar+0x82>
8001adc4:	1e 26       	rsub	r6,pc
	uint8_t output = 0;
8001adc6:	30 08       	mov	r8,0
8001adc8:	ef 68 ff ff 	st.b	r7[-1],r8
//	uint8_t input [8];
	twim_write(&AVR32_TWIM1, (uint8_t*) &output, 1, 1, false);
8001adcc:	ee cb 00 01 	sub	r11,r7,1
8001add0:	30 08       	mov	r8,0
8001add2:	30 19       	mov	r9,1
8001add4:	30 1a       	mov	r10,1
8001add6:	fe 7c 3c 00 	mov	r12,-50176
8001adda:	f0 16 00 38 	mcall	r6[224]
	twim_read(&AVR32_TWIM1, (uint8_t*)&main_target, sizeof(main_target), 1, false);
8001adde:	ec fb 02 40 	ld.w	r11,r6[576]
8001ade2:	30 08       	mov	r8,0
8001ade4:	30 19       	mov	r9,1
8001ade6:	30 ca       	mov	r10,12
8001ade8:	fe 7c 3c 00 	mov	r12,-50176
8001adec:	f0 16 00 62 	mcall	r6[392]
	
	dbg_print_num(main_target.velocity*100.0,10);
8001adf0:	ec f8 02 40 	ld.w	r8,r6[576]
8001adf4:	70 08       	ld.w	r8,r8[0x0]
8001adf6:	10 9c       	mov	r12,r8
8001adf8:	f0 16 00 02 	mcall	r6[8]
8001adfc:	30 08       	mov	r8,0
8001adfe:	fc 19 40 59 	movh	r9,0x4059
8001ae02:	f0 16 00 03 	mcall	r6[12]
8001ae06:	14 98       	mov	r8,r10
8001ae08:	16 99       	mov	r9,r11
8001ae0a:	10 9a       	mov	r10,r8
8001ae0c:	12 9b       	mov	r11,r9
8001ae0e:	f0 16 00 12 	mcall	r6[72]
8001ae12:	18 98       	mov	r8,r12
8001ae14:	30 ab       	mov	r11,10
8001ae16:	10 9c       	mov	r12,r8
8001ae18:	f0 16 00 04 	mcall	r6[16]
	dbg_print_num(main_target.amplitude,10);
8001ae1c:	ec f8 02 40 	ld.w	r8,r6[576]
8001ae20:	70 18       	ld.w	r8,r8[0x4]
8001ae22:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8001ae26:	30 ab       	mov	r11,10
8001ae28:	10 9c       	mov	r12,r8
8001ae2a:	f0 16 00 04 	mcall	r6[16]
	dbg_print("\n");
8001ae2e:	fe cc 00 76 	sub	r12,pc,118
8001ae32:	f0 16 00 01 	mcall	r6[4]
	
}
8001ae36:	2f fd       	sub	sp,-4
8001ae38:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001ae3c:	80 01       	ld.sh	r1,r0[0x0]
8001ae3e:	ac 48       	st.h	r6[0x8],r8

8001ae40 <get_radar_main_target>:

radar_target* get_radar_main_target() {
8001ae40:	eb cd 40 c0 	pushm	r6-r7,lr
8001ae44:	1a 97       	mov	r7,sp
8001ae46:	48 46       	lddpc	r6,8001ae54 <get_radar_main_target+0x14>
8001ae48:	1e 26       	rsub	r6,pc
	return &main_target;
8001ae4a:	ec f8 02 40 	ld.w	r8,r6[576]
	
}
8001ae4e:	10 9c       	mov	r12,r8
8001ae50:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001ae54:	80 01       	ld.sh	r1,r0[0x0]
8001ae56:	ac cc       	st.b	r6[0x4],r12

8001ae58 <init_Servos>:
#define SERVO_PERIOD (SERVO_TIMER_FREQ/SERVO_REPEAT_FREQ)
#define SERVO_CENTER_DUTY_TICKS 1500//(SERVO_CENTER_DUTY_MICROSEC*SERVO_TIMER_FREQ/1000000)



void init_Servos(void){
8001ae58:	eb cd 40 c0 	pushm	r6-r7,lr
8001ae5c:	1a 97       	mov	r7,sp
8001ae5e:	20 1d       	sub	sp,4
8001ae60:	4c b6       	lddpc	r6,8001af8c <init_Servos+0x134>
8001ae62:	1e 26       	rsub	r6,pc
      int i;
	  // unlock registers
	  AVR32_PWM.wpcr = (AVR32_PWM_WPCR_WPKEY_KEY   << AVR32_PWM_WPCR_WPKEY) |
8001ae64:	fe 78 4c 00 	mov	r8,-46080
8001ae68:	e0 69 4d 04 	mov	r9,19716
8001ae6c:	ea 19 50 57 	orh	r9,0x5057
8001ae70:	f1 49 00 e4 	st.w	r8[228],r9
	          AVR32_PWM_WPCR_WPRG0_MASK                            |
	          (AVR32_PWM_WPCR_WPCMD_SWDIS << AVR32_PWM_WPCR_WPCMD);      
      AVR32_PWM.wpcr = (AVR32_PWM_WPCR_WPKEY_KEY   << AVR32_PWM_WPCR_WPKEY) |
8001ae74:	fe 78 4c 00 	mov	r8,-46080
8001ae78:	e0 69 4d 08 	mov	r9,19720
8001ae7c:	ea 19 50 57 	orh	r9,0x5057
8001ae80:	f1 49 00 e4 	st.w	r8[228],r9
	          AVR32_PWM_WPCR_WPRG1_MASK                            |
	          (AVR32_PWM_WPCR_WPCMD_SWDIS << AVR32_PWM_WPCR_WPCMD);      
      AVR32_PWM.wpcr = (AVR32_PWM_WPCR_WPKEY_KEY   << AVR32_PWM_WPCR_WPKEY) |
8001ae84:	fe 78 4c 00 	mov	r8,-46080
8001ae88:	e0 69 4d 10 	mov	r9,19728
8001ae8c:	ea 19 50 57 	orh	r9,0x5057
8001ae90:	f1 49 00 e4 	st.w	r8[228],r9
	          AVR32_PWM_WPCR_WPRG2_MASK                            |
	          (AVR32_PWM_WPCR_WPCMD_SWDIS << AVR32_PWM_WPCR_WPCMD);      
      AVR32_PWM.wpcr = (AVR32_PWM_WPCR_WPKEY_KEY   << AVR32_PWM_WPCR_WPKEY) |
8001ae94:	fe 78 4c 00 	mov	r8,-46080
8001ae98:	e0 69 4d 20 	mov	r9,19744
8001ae9c:	ea 19 50 57 	orh	r9,0x5057
8001aea0:	f1 49 00 e4 	st.w	r8[228],r9
	          AVR32_PWM_WPCR_WPRG3_MASK                            |
	          (AVR32_PWM_WPCR_WPCMD_SWDIS << AVR32_PWM_WPCR_WPCMD);      
    // clock setup  
	AVR32_PWM.clk =
8001aea4:	fe 78 4c 00 	mov	r8,-46080
8001aea8:	e0 69 06 01 	mov	r9,1537
8001aeac:	ea 19 06 01 	orh	r9,0x601
8001aeb0:	91 09       	st.w	r8[0x0],r9
    ( 6 <<AVR32_PWM_PREA_OFFSET) |  // /64
    ( 6 <<AVR32_PWM_PREB_OFFSET) |  // /64
    ( 0 <<AVR32_PWM_CLKSEL_OFFSET);

	// output override for low and high side
	AVR32_PWM.oov  = ( 0b1111 <<(AVR32_PWM_OOVH0_OFFSET+i))|( 0b1111 <<(AVR32_PWM_OOVL0_OFFSET+i)); 
8001aeb2:	fe 78 4c 00 	mov	r8,-46080
8001aeb6:	30 fa       	mov	r10,15
8001aeb8:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001aebc:	f4 09 09 4a 	lsl	r10,r10,r9
8001aec0:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001aec4:	2f 09       	sub	r9,-16
8001aec6:	30 fb       	mov	r11,15
8001aec8:	f6 09 09 49 	lsl	r9,r11,r9
8001aecc:	f5 e9 10 09 	or	r9,r10,r9
8001aed0:	f1 49 00 44 	st.w	r8[68],r9
	// output selection clear: dead time generator (0)
	AVR32_PWM.osc  = ( 0b1111 <<(AVR32_PWM_OOVH0_OFFSET+i))|( 0b1111 <<(AVR32_PWM_OOVL0_OFFSET+i)); 
8001aed4:	fe 78 4c 00 	mov	r8,-46080
8001aed8:	30 fa       	mov	r10,15
8001aeda:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001aede:	f4 09 09 4a 	lsl	r10,r10,r9
8001aee2:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001aee6:	2f 09       	sub	r9,-16
8001aee8:	30 fb       	mov	r11,15
8001aeea:	f6 09 09 49 	lsl	r9,r11,r9
8001aeee:	f5 e9 10 09 	or	r9,r10,r9
8001aef2:	f1 49 00 50 	st.w	r8[80],r9
	
	// set up channels: enable dead time insertion
	for (i=0; i<4; i++) {
8001aef6:	30 08       	mov	r8,0
8001aef8:	ef 48 ff fc 	st.w	r7[-4],r8
8001aefc:	c3 78       	rjmp	8001af6a <init_Servos+0x112>
		// enable dead time, set channel clock to CLKA
		AVR32_PWM.channel[i].cmr=AVR32_PWM_CMR0_DTE_MASK | 11;
8001aefe:	fe 79 4c 00 	mov	r9,-46080
8001af02:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001af06:	2f 08       	sub	r8,-16
8001af08:	a5 78       	lsl	r8,0x5
8001af0a:	f2 08 00 08 	add	r8,r9,r8
8001af0e:	e0 79 00 0b 	mov	r9,65547
8001af12:	91 09       	st.w	r8[0x0],r9
		AVR32_PWM.channel[i].cprd=10000;
8001af14:	fe 79 4c 00 	mov	r9,-46080
8001af18:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001af1c:	a5 78       	lsl	r8,0x5
8001af1e:	f2 08 00 08 	add	r8,r9,r8
8001af22:	f0 c8 fd f4 	sub	r8,r8,-524
8001af26:	e0 69 27 10 	mov	r9,10000
8001af2a:	91 09       	st.w	r8[0x0],r9
		AVR32_PWM.channel[i].cdty=4000;
8001af2c:	fe 79 4c 00 	mov	r9,-46080
8001af30:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001af34:	a5 78       	lsl	r8,0x5
8001af36:	f2 08 00 08 	add	r8,r9,r8
8001af3a:	f0 c8 fd fc 	sub	r8,r8,-516
8001af3e:	e0 69 0f a0 	mov	r9,4000
8001af42:	91 09       	st.w	r8[0x0],r9
		AVR32_PWM.channel[i].dt= 1000<<16 | 1000;
8001af44:	fe 79 4c 00 	mov	r9,-46080
8001af48:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001af4c:	a5 78       	lsl	r8,0x5
8001af4e:	f2 08 00 08 	add	r8,r9,r8
8001af52:	f0 c8 fd e8 	sub	r8,r8,-536
8001af56:	e0 69 03 e8 	mov	r9,1000
8001af5a:	ea 19 03 e8 	orh	r9,0x3e8
8001af5e:	91 09       	st.w	r8[0x0],r9
	AVR32_PWM.oov  = ( 0b1111 <<(AVR32_PWM_OOVH0_OFFSET+i))|( 0b1111 <<(AVR32_PWM_OOVL0_OFFSET+i)); 
	// output selection clear: dead time generator (0)
	AVR32_PWM.osc  = ( 0b1111 <<(AVR32_PWM_OOVH0_OFFSET+i))|( 0b1111 <<(AVR32_PWM_OOVL0_OFFSET+i)); 
	
	// set up channels: enable dead time insertion
	for (i=0; i<4; i++) {
8001af60:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001af64:	2f f8       	sub	r8,-1
8001af66:	ef 48 ff fc 	st.w	r7[-4],r8
8001af6a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001af6e:	58 38       	cp.w	r8,3
8001af70:	fe 9a ff c7 	brle	8001aefe <init_Servos+0xa6>
    {AVR32_PWM_PWML_3_0_PIN, AVR32_PWM_PWML_3_0_FUNCTION},
    {AVR32_PWM_PWMH_1_0_PIN, AVR32_PWM_PWMH_1_0_FUNCTION},
    {AVR32_PWM_PWMH_2_0_PIN, AVR32_PWM_PWMH_2_0_FUNCTION},
    {AVR32_PWM_PWMH_3_0_PIN, AVR32_PWM_PWMH_3_0_FUNCTION}
    };			
	gpio_enable_module(PWM_GPIO_MAP, sizeof(PWM_GPIO_MAP) / sizeof(PWM_GPIO_MAP[0]));
8001af74:	30 6b       	mov	r11,6
8001af76:	ec fc 08 94 	ld.w	r12,r6[2196]
8001af7a:	f0 16 00 88 	mcall	r6[544]
	// enable
	AVR32_PWM.ena=0b1111;
8001af7e:	fe 78 4c 00 	mov	r8,-46080
8001af82:	30 f9       	mov	r9,15
8001af84:	91 19       	st.w	r8[0x4],r9
	
	
}
8001af86:	2f fd       	sub	sp,-4
8001af88:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001af8c:	80 01       	ld.sh	r1,r0[0x0]
8001af8e:	ac e6       	st.b	r6[0x6],r6

8001af90 <set_servo>:

void set_servo(int channel, int val_a, int val_b){
8001af90:	eb cd 40 80 	pushm	r7,lr
8001af94:	1a 97       	mov	r7,sp
8001af96:	20 6d       	sub	sp,24
8001af98:	ef 4c ff f0 	st.w	r7[-16],r12
8001af9c:	ef 4b ff ec 	st.w	r7[-20],r11
8001afa0:	ef 4a ff e8 	st.w	r7[-24],r10
	int duty_a=val_a+SERVO_CENTER_DUTY_TICKS;
8001afa4:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001afa8:	f0 c8 fa 24 	sub	r8,r8,-1500
8001afac:	ef 48 ff f4 	st.w	r7[-12],r8
	int duty_b=val_b+SERVO_CENTER_DUTY_TICKS;
8001afb0:	ee f8 ff e8 	ld.w	r8,r7[-24]
8001afb4:	f0 c8 fa 24 	sub	r8,r8,-1500
8001afb8:	ef 48 ff f8 	st.w	r7[-8],r8
	int deadtime=(SERVO_PERIOD-duty_a-duty_b)/2;
8001afbc:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001afc0:	e0 69 13 88 	mov	r9,5000
8001afc4:	10 19       	sub	r9,r8
8001afc6:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001afca:	f2 08 01 08 	sub	r8,r9,r8
8001afce:	f0 09 16 1f 	lsr	r9,r8,0x1f
8001afd2:	f2 08 00 08 	add	r8,r9,r8
8001afd6:	a1 58       	asr	r8,0x1
8001afd8:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_PWM.channel[channel &0b11].cprdupd=SERVO_PERIOD;
8001afdc:	fe 79 4c 00 	mov	r9,-46080
8001afe0:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001afe4:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
8001afe8:	a5 78       	lsl	r8,0x5
8001afea:	f2 08 00 08 	add	r8,r9,r8
8001afee:	f0 c8 fd f0 	sub	r8,r8,-528
8001aff2:	e0 69 13 88 	mov	r9,5000
8001aff6:	91 09       	st.w	r8[0x0],r9
	AVR32_PWM.channel[channel &0b11].cdtyupd=duty_a+deadtime;
8001aff8:	fe 7a 4c 00 	mov	r10,-46080
8001affc:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001b000:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
8001b004:	ee fb ff f4 	ld.w	r11,r7[-12]
8001b008:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001b00c:	f6 09 00 09 	add	r9,r11,r9
8001b010:	a5 78       	lsl	r8,0x5
8001b012:	f4 08 00 08 	add	r8,r10,r8
8001b016:	f0 c8 fd f8 	sub	r8,r8,-520
8001b01a:	91 09       	st.w	r8[0x0],r9
	AVR32_PWM.channel[channel &0b11].dtupd= deadtime<<16 | deadtime;	
8001b01c:	fe 7a 4c 00 	mov	r10,-46080
8001b020:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001b024:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
8001b028:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001b02c:	f2 0b 15 10 	lsl	r11,r9,0x10
8001b030:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001b034:	f7 e9 10 09 	or	r9,r11,r9
8001b038:	a5 78       	lsl	r8,0x5
8001b03a:	f4 08 00 08 	add	r8,r10,r8
8001b03e:	f0 c8 fd e4 	sub	r8,r8,-540
8001b042:	91 09       	st.w	r8[0x0],r9
}
8001b044:	2f ad       	sub	sp,-24
8001b046:	e3 cd 80 80 	ldm	sp++,r7,pc

8001b04a <set_servos>:


void set_servos(servo_output *servo_outputs) {
8001b04a:	eb cd 40 c0 	pushm	r6-r7,lr
8001b04e:	1a 97       	mov	r7,sp
8001b050:	20 1d       	sub	sp,4
8001b052:	49 76       	lddpc	r6,8001b0ac <set_servos+0x62>
8001b054:	1e 26       	rsub	r6,pc
8001b056:	ef 4c ff fc 	st.w	r7[-4],r12
		set_servo(0, servo_outputs[0].value, servo_outputs[1].value);
		set_servo(1, servo_outputs[2].value, servo_outputs[3].value);
		set_servo(2, servo_outputs[4].value, servo_outputs[5].value);
		set_servo(3, servo_outputs[6].value, servo_outputs[7].value);
	#else
		set_servo(1, servo_outputs[0].value, servo_outputs[1].value);
8001b05a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001b05e:	2f 08       	sub	r8,-16
8001b060:	70 09       	ld.w	r9,r8[0x0]
8001b062:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001b066:	70 08       	ld.w	r8,r8[0x0]
8001b068:	12 9a       	mov	r10,r9
8001b06a:	10 9b       	mov	r11,r8
8001b06c:	30 1c       	mov	r12,1
8001b06e:	f0 16 00 b6 	mcall	r6[728]
		set_servo(2, servo_outputs[2].value, servo_outputs[3].value);
8001b072:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001b076:	2d 08       	sub	r8,-48
8001b078:	70 09       	ld.w	r9,r8[0x0]
8001b07a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001b07e:	2e 08       	sub	r8,-32
8001b080:	70 08       	ld.w	r8,r8[0x0]
8001b082:	12 9a       	mov	r10,r9
8001b084:	10 9b       	mov	r11,r8
8001b086:	30 2c       	mov	r12,2
8001b088:	f0 16 00 b6 	mcall	r6[728]
		set_servo(3, servo_outputs[4].value, servo_outputs[5].value);
8001b08c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001b090:	2b 08       	sub	r8,-80
8001b092:	70 09       	ld.w	r9,r8[0x0]
8001b094:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001b098:	2c 08       	sub	r8,-64
8001b09a:	70 08       	ld.w	r8,r8[0x0]
8001b09c:	12 9a       	mov	r10,r9
8001b09e:	10 9b       	mov	r11,r8
8001b0a0:	30 3c       	mov	r12,3
8001b0a2:	f0 16 00 b6 	mcall	r6[728]
	#endif
	
}
8001b0a6:	2f fd       	sub	sp,-4
8001b0a8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001b0ac:	80 01       	ld.sh	r1,r0[0x0]
8001b0ae:	ae d8       	st.b	r7[0x5],r8

8001b0b0 <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
8001b0b0:	eb cd 40 c0 	pushm	r6-r7,lr
8001b0b4:	1a 97       	mov	r7,sp
8001b0b6:	20 6d       	sub	sp,24
8001b0b8:	49 e6       	lddpc	r6,8001b130 <interpolate+0x80>
8001b0ba:	1e 26       	rsub	r6,pc
8001b0bc:	ef 4c ff f8 	st.w	r7[-8],r12
8001b0c0:	ef 4b ff f4 	st.w	r7[-12],r11
8001b0c4:	ef 4a ff f0 	st.w	r7[-16],r10
8001b0c8:	ef 49 ff ec 	st.w	r7[-20],r9
8001b0cc:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
8001b0d0:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001b0d4:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001b0d8:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
8001b0dc:	c0 41       	brne	8001b0e4 <interpolate+0x34>
	{
		return y1;
8001b0de:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001b0e2:	c2 38       	rjmp	8001b128 <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
8001b0e4:	ee f9 ff e8 	ld.w	r9,r7[-24]
8001b0e8:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001b0ec:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8001b0f0:	ee fa ff f8 	ld.w	r10,r7[-8]
8001b0f4:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001b0f8:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
8001b0fc:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8001b100:	ee fa ff f0 	ld.w	r10,r7[-16]
8001b104:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001b108:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8001b10c:	12 9b       	mov	r11,r9
8001b10e:	10 9c       	mov	r12,r8
8001b110:	f0 16 00 08 	mcall	r6[32]
8001b114:	18 98       	mov	r8,r12
8001b116:	10 99       	mov	r9,r8
8001b118:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001b11c:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8001b120:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
8001b124:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
8001b128:	10 9c       	mov	r12,r8
8001b12a:	2f ad       	sub	sp,-24
8001b12c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001b130:	80 01       	ld.sh	r1,r0[0x0]
8001b132:	af 3e       	mul	lr,r7

8001b134 <osc_get_rate>:
/**
 * \todo RC8M may run at either 8 MHz or 1 MHz. Currently, we assume
 * it's always running at 8 MHz.
 */
static inline uint32_t osc_get_rate(uint8_t id)
{
8001b134:	eb cd 40 80 	pushm	r7,lr
8001b138:	1a 97       	mov	r7,sp
8001b13a:	20 1d       	sub	sp,4
8001b13c:	18 98       	mov	r8,r12
8001b13e:	ef 68 ff fc 	st.b	r7[-4],r8
	switch (id) {
8001b142:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8001b146:	58 38       	cp.w	r8,3
8001b148:	c1 20       	breq	8001b16c <osc_get_rate+0x38>
8001b14a:	e0 89 00 07 	brgt	8001b158 <osc_get_rate+0x24>
8001b14e:	58 08       	cp.w	r8,0
8001b150:	c0 90       	breq	8001b162 <osc_get_rate+0x2e>
8001b152:	58 28       	cp.w	r8,2
8001b154:	c0 f0       	breq	8001b172 <osc_get_rate+0x3e>
8001b156:	c1 b8       	rjmp	8001b18c <osc_get_rate+0x58>
8001b158:	58 48       	cp.w	r8,4
8001b15a:	c1 10       	breq	8001b17c <osc_get_rate+0x48>
8001b15c:	58 58       	cp.w	r8,5
8001b15e:	c1 40       	breq	8001b186 <osc_get_rate+0x52>
8001b160:	c1 68       	rjmp	8001b18c <osc_get_rate+0x58>
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return BOARD_OSC0_HZ;
8001b162:	e0 68 24 00 	mov	r8,9216
8001b166:	ea 18 00 f4 	orh	r8,0xf4
8001b16a:	c1 28       	rjmp	8001b18e <osc_get_rate+0x5a>
		return BOARD_OSC1_HZ;
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		return BOARD_OSC32_HZ;
8001b16c:	e0 68 80 00 	mov	r8,32768
8001b170:	c0 f8       	rjmp	8001b18e <osc_get_rate+0x5a>
#endif

	case OSC_ID_RC8M:
		return OSC_RC8M_NOMINAL_HZ;
8001b172:	e0 68 12 00 	mov	r8,4608
8001b176:	ea 18 00 7a 	orh	r8,0x7a
8001b17a:	c0 a8       	rjmp	8001b18e <osc_get_rate+0x5a>

	case OSC_ID_RC120M:
		return OSC_RC120M_NOMINAL_HZ;
8001b17c:	e0 68 0e 00 	mov	r8,3584
8001b180:	ea 18 07 27 	orh	r8,0x727
8001b184:	c0 58       	rjmp	8001b18e <osc_get_rate+0x5a>

	case OSC_ID_RCSYS:
		return OSC_RCSYS_NOMINAL_HZ;
8001b186:	e0 78 c1 38 	mov	r8,115000
8001b18a:	c0 28       	rjmp	8001b18e <osc_get_rate+0x5a>

	default:
		/* unhandled_case(id); */
		return 0;
8001b18c:	30 08       	mov	r8,0
	}
}
8001b18e:	10 9c       	mov	r12,r8
8001b190:	2f fd       	sub	sp,-4
8001b192:	e3 cd 80 80 	ldm	sp++,r7,pc

8001b196 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern bool sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
8001b196:	eb cd 40 c0 	pushm	r6-r7,lr
8001b19a:	1a 97       	mov	r7,sp
8001b19c:	48 56       	lddpc	r6,8001b1b0 <sysclk_get_main_hz+0x1a>
8001b19e:	1e 26       	rsub	r6,pc
		return BOARD_OSC1_HZ;
#endif

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLL0:
		return pll_get_default_rate(0);
8001b1a0:	30 0c       	mov	r12,0
8001b1a2:	cc 9f       	rcall	8001b134 <osc_get_rate>
8001b1a4:	18 98       	mov	r8,r12
8001b1a6:	a3 68       	lsl	r8,0x2

	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
8001b1a8:	10 9c       	mov	r12,r8
8001b1aa:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001b1ae:	00 00       	add	r0,r0
8001b1b0:	80 01       	ld.sh	r1,r0[0x0]
8001b1b2:	b0 22       	st.h	r8[0x4],r2

8001b1b4 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
8001b1b4:	eb cd 40 c0 	pushm	r6-r7,lr
8001b1b8:	1a 97       	mov	r7,sp
8001b1ba:	48 46       	lddpc	r6,8001b1c8 <sysclk_get_cpu_hz+0x14>
8001b1bc:	1e 26       	rsub	r6,pc
	return sysclk_get_main_hz() >> CONFIG_SYSCLK_CPU_DIV;
8001b1be:	ce cf       	rcall	8001b196 <sysclk_get_main_hz>
8001b1c0:	18 98       	mov	r8,r12
}
8001b1c2:	10 9c       	mov	r12,r8
8001b1c4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001b1c8:	80 01       	ld.sh	r1,r0[0x0]
8001b1ca:	b0 40       	st.h	r8[0x8],r0

8001b1cc <spectrum_handler>:
Spektrum_Receiver_t spRec2;

int16_t channelCenter[16];


ISR(spectrum_handler, AVR32_USART1_IRQ, AVR32_INTC_INTLEV_INT1) {
8001b1cc:	eb cd 40 c0 	pushm	r6-r7,lr
8001b1d0:	1a 97       	mov	r7,sp
8001b1d2:	20 3d       	sub	sp,12
8001b1d4:	4c 36       	lddpc	r6,8001b2e0 <spectrum_handler+0x114>
8001b1d6:	1e 26       	rsub	r6,pc
	uint8_t c1, c2, i;
	uint16_t sw;
	uint32_t now =get_time_ticks() ;
8001b1d8:	f0 16 00 4b 	mcall	r6[300]
8001b1dc:	18 98       	mov	r8,r12
8001b1de:	ef 48 ff fc 	st.w	r7[-4],r8
	if (REMOTE_UART.csr & AVR32_USART_CSR_RXRDY_MASK) {
8001b1e2:	fc 78 14 00 	mov	r8,-191488
8001b1e6:	70 58       	ld.w	r8,r8[0x14]
8001b1e8:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8001b1ec:	5c 58       	castu.b	r8
8001b1ee:	c7 50       	breq	8001b2d8 <spectrum_handler+0x10c>
		spRec1.duration=now-spRec1.last_time;
8001b1f0:	ec f8 00 7c 	ld.w	r8,r6[124]
8001b1f4:	f0 f8 01 2c 	ld.w	r8,r8[300]
8001b1f8:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001b1fc:	10 19       	sub	r9,r8
8001b1fe:	ec f8 00 7c 	ld.w	r8,r6[124]
8001b202:	f1 49 01 30 	st.w	r8[304],r9
		spRec1.last_time=now;
8001b206:	ec f8 00 7c 	ld.w	r8,r6[124]
8001b20a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001b20e:	f1 49 01 2c 	st.w	r8[300],r9
//		putstring(STDOUT, "!");
		//receiveInterruptHandler(&spRec1.receiver);
		if ((spRec1.duration>2500)) {
8001b212:	ec f8 00 7c 	ld.w	r8,r6[124]
8001b216:	f0 f8 01 30 	ld.w	r8,r8[304]
8001b21a:	e0 48 09 c4 	cp.w	r8,2500
8001b21e:	e0 88 00 06 	brls	8001b22a <spectrum_handler+0x5e>
			buffer_clear(&spRec1.receiver);
8001b222:	ec fc 00 7c 	ld.w	r12,r6[124]
8001b226:	f0 16 01 fa 	mcall	r6[2024]
		}
		c1=(uint8_t)REMOTE_UART.rhr;
8001b22a:	fc 78 14 00 	mov	r8,-191488
8001b22e:	70 68       	ld.w	r8,r8[0x18]
8001b230:	ef 68 ff f7 	st.b	r7[-9],r8
		buffer_put(&spRec1.receiver, c1);
8001b234:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8001b238:	10 9b       	mov	r11,r8
8001b23a:	ec fc 00 7c 	ld.w	r12,r6[124]
8001b23e:	f0 16 00 4f 	mcall	r6[316]
		

		if (buffer_bytes_available(&spRec1.receiver)==16) {
8001b242:	ec fc 00 7c 	ld.w	r12,r6[124]
8001b246:	f0 16 00 2c 	mcall	r6[176]
8001b24a:	18 98       	mov	r8,r12
8001b24c:	59 08       	cp.w	r8,16
8001b24e:	c4 51       	brne	8001b2d8 <spectrum_handler+0x10c>
			//PORTC.OUT = _BV(5);
			//putstring(STDOUT, "!");
			for (i=0; i<8; i++) {
8001b250:	30 08       	mov	r8,0
8001b252:	ef 68 ff f9 	st.b	r7[-7],r8
8001b256:	c3 a8       	rjmp	8001b2ca <spectrum_handler+0xfe>
				c1=buffer_get(&spRec1.receiver);
8001b258:	ec fc 00 7c 	ld.w	r12,r6[124]
8001b25c:	f0 16 00 42 	mcall	r6[264]
8001b260:	18 98       	mov	r8,r12
8001b262:	ef 68 ff f7 	st.b	r7[-9],r8
				c2=buffer_get(&spRec1.receiver);
8001b266:	ec fc 00 7c 	ld.w	r12,r6[124]
8001b26a:	f0 16 00 42 	mcall	r6[264]
8001b26e:	18 98       	mov	r8,r12
8001b270:	ef 68 ff f8 	st.b	r7[-8],r8
				sw=((uint16_t)c1)*256 +((uint16_t)c2);
8001b274:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8001b278:	a9 68       	lsl	r8,0x8
8001b27a:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
8001b27e:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8001b282:	f2 08 00 08 	add	r8,r9,r8
8001b286:	ef 58 ff fa 	st.h	r7[-6],r8
				//if (c1 & 0x80==0)
				spRec1.channels[(c1 & 0x3c)>>2]=sw&0x3ff;
8001b28a:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8001b28e:	e2 18 00 3c 	andl	r8,0x3c,COH
8001b292:	f0 0a 14 02 	asr	r10,r8,0x2
8001b296:	ef 08 ff fa 	ld.sh	r8,r7[-6]
8001b29a:	f1 d8 c0 0a 	bfextu	r8,r8,0x0,0xa
8001b29e:	ec f9 00 7c 	ld.w	r9,r6[124]
8001b2a2:	f4 ca ff 7e 	sub	r10,r10,-130
8001b2a6:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
				//spRec1.channels[i]=sw&0x3ff;
				spRec1.valid=1;
8001b2aa:	ec f9 00 7c 	ld.w	r9,r6[124]
8001b2ae:	30 18       	mov	r8,1
8001b2b0:	f3 68 01 28 	st.b	r9[296],r8
				spRec1.last_update=now;
8001b2b4:	ec f8 00 7c 	ld.w	r8,r6[124]
8001b2b8:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001b2bc:	f1 49 01 24 	st.w	r8[292],r9
		

		if (buffer_bytes_available(&spRec1.receiver)==16) {
			//PORTC.OUT = _BV(5);
			//putstring(STDOUT, "!");
			for (i=0; i<8; i++) {
8001b2c0:	ef 38 ff f9 	ld.ub	r8,r7[-7]
8001b2c4:	2f f8       	sub	r8,-1
8001b2c6:	ef 68 ff f9 	st.b	r7[-7],r8
8001b2ca:	ef 39 ff f9 	ld.ub	r9,r7[-7]
8001b2ce:	30 78       	mov	r8,7
8001b2d0:	f0 09 18 00 	cp.b	r9,r8
8001b2d4:	fe 98 ff c2 	brls	8001b258 <spectrum_handler+0x8c>
				spRec1.valid=1;
				spRec1.last_update=now;
			}
		}
	}		
}
8001b2d8:	2f dd       	sub	sp,-12
8001b2da:	e3 cd 40 c0 	ldm	sp++,r6-r7,lr
8001b2de:	d6 03       	rete
8001b2e0:	80 01       	ld.sh	r1,r0[0x0]
8001b2e2:	b0 5a       	st.h	r8[0xa],r10

8001b2e4 <rc_init>:

void rc_init (void) {
8001b2e4:	eb cd 40 c0 	pushm	r6-r7,lr
8001b2e8:	1a 97       	mov	r7,sp
8001b2ea:	20 1d       	sub	sp,4
8001b2ec:	4a 96       	lddpc	r6,8001b390 <rc_init+0xac>
8001b2ee:	1e 26       	rsub	r6,pc
   {
    {AVR32_USART1_RXD_0_1_PIN, AVR32_USART1_RXD_0_1_FUNCTION}
   ,{AVR32_USART1_TXD_0_1_PIN, AVR32_USART1_TXD_0_1_FUNCTION}
   };
	int i;
	for (i=0; i<16; i++) {
8001b2f0:	30 08       	mov	r8,0
8001b2f2:	ef 48 ff fc 	st.w	r7[-4],r8
8001b2f6:	c2 18       	rjmp	8001b338 <rc_init+0x54>
		spRec1.channels[i]=500;
8001b2f8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001b2fc:	ec f9 00 7c 	ld.w	r9,r6[124]
8001b300:	f0 ca ff 7e 	sub	r10,r8,-130
8001b304:	e0 68 01 f4 	mov	r8,500
8001b308:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
		spRec2.channels[i]=500;
8001b30c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001b310:	ec f9 01 54 	ld.w	r9,r6[340]
8001b314:	f0 ca ff 7e 	sub	r10,r8,-130
8001b318:	e0 68 01 f4 	mov	r8,500
8001b31c:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
		channelCenter[i]=0;
8001b320:	ee fa ff fc 	ld.w	r10,r7[-4]
8001b324:	ec f9 02 98 	ld.w	r9,r6[664]
8001b328:	30 08       	mov	r8,0
8001b32a:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
   {
    {AVR32_USART1_RXD_0_1_PIN, AVR32_USART1_RXD_0_1_FUNCTION}
   ,{AVR32_USART1_TXD_0_1_PIN, AVR32_USART1_TXD_0_1_FUNCTION}
   };
	int i;
	for (i=0; i<16; i++) {
8001b32e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001b332:	2f f8       	sub	r8,-1
8001b334:	ef 48 ff fc 	st.w	r7[-4],r8
8001b338:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001b33c:	58 f8       	cp.w	r8,15
8001b33e:	fe 9a ff dd 	brle	8001b2f8 <rc_init+0x14>
		spRec1.channels[i]=500;
		spRec2.channels[i]=500;
		channelCenter[i]=0;
	}
	spRec1.channels[RC_THROTTLE]=0;
8001b342:	ec f9 00 7c 	ld.w	r9,r6[124]
8001b346:	30 08       	mov	r8,0
8001b348:	f3 58 01 04 	st.h	r9[260],r8
	spRec2.channels[RC_THROTTLE]=0;
8001b34c:	ec f9 01 54 	ld.w	r9,r6[340]
8001b350:	30 08       	mov	r8,0
8001b352:	f3 58 01 04 	st.h	r9[260],r8
	 // USART options.
	 
    // Assign GPIO pins to USART_0.
    gpio_enable_module(USART_GPIO_MAP,
8001b356:	30 2b       	mov	r11,2
8001b358:	ec fc 08 90 	ld.w	r12,r6[2192]
8001b35c:	f0 16 00 88 	mcall	r6[544]
                     sizeof(USART_GPIO_MAP) / sizeof(USART_GPIO_MAP[0]));
	
    // Initialize the USART in RS232 mode.
    usart_init_rs232( (&REMOTE_UART), &usart_opt, sysclk_get_cpu_hz());
8001b360:	c2 af       	rcall	8001b1b4 <sysclk_get_cpu_hz>
8001b362:	18 98       	mov	r8,r12
8001b364:	10 9a       	mov	r10,r8
8001b366:	ec fb 08 8c 	ld.w	r11,r6[2188]
8001b36a:	fc 7c 14 00 	mov	r12,-191488
8001b36e:	f0 16 00 60 	mcall	r6[384]
	INTC_register_interrupt( (__int_handler) &spectrum_handler, AVR32_USART1_IRQ, AVR32_INTC_INT1);
8001b372:	30 1a       	mov	r10,1
8001b374:	e0 6b 02 80 	mov	r11,640
8001b378:	fe cc 01 ac 	sub	r12,pc,428
8001b37c:	f0 16 00 3b 	mcall	r6[236]
	REMOTE_UART.ier=AVR32_USART_IER_RXRDY_MASK;
8001b380:	fc 78 14 00 	mov	r8,-191488
8001b384:	30 19       	mov	r9,1
8001b386:	91 29       	st.w	r8[0x8],r9
	//initUART_RX(&spRec1.receiver,  &USARTC1, USART_RXCINTLVL_LO_gc, BSEL_SPEKTRUM);
	//initUART_RX(&spRec2.receiver,  &USARTD0, USART_RXCINTLVL_LO_gc, BSEL_SPEKTRUM);

}
8001b388:	2f fd       	sub	sp,-4
8001b38a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001b38e:	00 00       	add	r0,r0
8001b390:	80 01       	ld.sh	r1,r0[0x0]
8001b392:	b1 72       	lsl	r2,0x11

8001b394 <rc_get_channel>:
/**/
int16_t rc_get_channel(uint8_t index) {
8001b394:	eb cd 40 c0 	pushm	r6-r7,lr
8001b398:	1a 97       	mov	r7,sp
8001b39a:	20 1d       	sub	sp,4
8001b39c:	48 b6       	lddpc	r6,8001b3c8 <rc_get_channel+0x34>
8001b39e:	1e 26       	rsub	r6,pc
8001b3a0:	18 98       	mov	r8,r12
8001b3a2:	ef 68 ff fc 	st.b	r7[-4],r8
	//if (checkReceiver1()<checkReceiver2()) {
		return spRec1.channels[index]-500;
8001b3a6:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8001b3aa:	ec f8 00 7c 	ld.w	r8,r6[124]
8001b3ae:	f2 c9 ff 7e 	sub	r9,r9,-130
8001b3b2:	f0 09 04 18 	ld.sh	r8,r8[r9<<0x1]
8001b3b6:	f0 c8 01 f4 	sub	r8,r8,500
8001b3ba:	5c 88       	casts.h	r8
8001b3bc:	5c 88       	casts.h	r8
	//} else {
	//	return spRec2.channels[index]-500;
	//}
}
8001b3be:	10 9c       	mov	r12,r8
8001b3c0:	2f fd       	sub	sp,-4
8001b3c2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001b3c6:	00 00       	add	r0,r0
8001b3c8:	80 01       	ld.sh	r1,r0[0x0]
8001b3ca:	b2 22       	st.h	r9[0x4],r2

8001b3cc <rc_get_channel_neutral>:

int16_t rc_get_channel_neutral(uint8_t index) {
8001b3cc:	eb cd 40 e0 	pushm	r5-r7,lr
8001b3d0:	1a 97       	mov	r7,sp
8001b3d2:	20 2d       	sub	sp,8
8001b3d4:	4a 36       	lddpc	r6,8001b460 <rc_get_channel_neutral+0x94>
8001b3d6:	1e 26       	rsub	r6,pc
8001b3d8:	18 98       	mov	r8,r12
8001b3da:	ef 68 ff f8 	st.b	r7[-8],r8
	int16_t value=rc_get_channel(index)-channelCenter[index];
8001b3de:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8001b3e2:	10 9c       	mov	r12,r8
8001b3e4:	f0 16 00 1b 	mcall	r6[108]
8001b3e8:	18 98       	mov	r8,r12
8001b3ea:	10 99       	mov	r9,r8
8001b3ec:	ef 3a ff f8 	ld.ub	r10,r7[-8]
8001b3f0:	ec f8 02 98 	ld.w	r8,r6[664]
8001b3f4:	f0 0a 04 18 	ld.sh	r8,r8[r10<<0x1]
8001b3f8:	f2 08 01 08 	sub	r8,r9,r8
8001b3fc:	5c 88       	casts.h	r8
8001b3fe:	ef 58 ff fe 	st.h	r7[-2],r8
	// clamp to dead zone
	if ((value>-DEADZONE)&&(value<DEADZONE)) value=0;
8001b402:	ef 08 ff fe 	ld.sh	r8,r7[-2]
8001b406:	10 9c       	mov	r12,r8
8001b408:	f0 16 00 1a 	mcall	r6[104]
8001b40c:	14 98       	mov	r8,r10
8001b40e:	16 99       	mov	r9,r11
8001b410:	30 05       	mov	r5,0
8001b412:	30 0a       	mov	r10,0
8001b414:	fc 1b c0 3e 	movh	r11,0xc03e
8001b418:	f0 16 00 1c 	mcall	r6[112]
8001b41c:	18 98       	mov	r8,r12
8001b41e:	58 08       	cp.w	r8,0
8001b420:	c0 20       	breq	8001b424 <rc_get_channel_neutral+0x58>
8001b422:	30 15       	mov	r5,1
8001b424:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
8001b428:	c1 60       	breq	8001b454 <rc_get_channel_neutral+0x88>
8001b42a:	ef 08 ff fe 	ld.sh	r8,r7[-2]
8001b42e:	10 9c       	mov	r12,r8
8001b430:	f0 16 00 1a 	mcall	r6[104]
8001b434:	30 05       	mov	r5,0
8001b436:	30 08       	mov	r8,0
8001b438:	fc 19 40 3e 	movh	r9,0x403e
8001b43c:	f0 16 00 1c 	mcall	r6[112]
8001b440:	18 98       	mov	r8,r12
8001b442:	58 08       	cp.w	r8,0
8001b444:	c0 20       	breq	8001b448 <rc_get_channel_neutral+0x7c>
8001b446:	30 15       	mov	r5,1
8001b448:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
8001b44c:	c0 40       	breq	8001b454 <rc_get_channel_neutral+0x88>
8001b44e:	30 08       	mov	r8,0
8001b450:	ef 58 ff fe 	st.h	r7[-2],r8
	return value;
8001b454:	ef 08 ff fe 	ld.sh	r8,r7[-2]
}
8001b458:	10 9c       	mov	r12,r8
8001b45a:	2f ed       	sub	sp,-8
8001b45c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8001b460:	80 01       	ld.sh	r1,r0[0x0]
8001b462:	b2 5a       	st.h	r9[0xa],r10

8001b464 <rc_center_channel>:

void rc_center_channel(uint8_t index){
8001b464:	eb cd 40 e0 	pushm	r5-r7,lr
8001b468:	1a 97       	mov	r7,sp
8001b46a:	20 1d       	sub	sp,4
8001b46c:	48 a6       	lddpc	r6,8001b494 <rc_center_channel+0x30>
8001b46e:	1e 26       	rsub	r6,pc
8001b470:	18 98       	mov	r8,r12
8001b472:	ef 68 ff fc 	st.b	r7[-4],r8
	channelCenter[index]=rc_get_channel(index);
8001b476:	ef 35 ff fc 	ld.ub	r5,r7[-4]
8001b47a:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8001b47e:	10 9c       	mov	r12,r8
8001b480:	f0 16 00 1b 	mcall	r6[108]
8001b484:	18 98       	mov	r8,r12
8001b486:	ec f9 02 98 	ld.w	r9,r6[664]
8001b48a:	f2 05 0a 18 	st.h	r9[r5<<0x1],r8
}
8001b48e:	2f fd       	sub	sp,-4
8001b490:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8001b494:	80 01       	ld.sh	r1,r0[0x0]
8001b496:	b2 f2       	st.b	r9[0x7],r2

8001b498 <checkReceiver1>:

int8_t checkReceiver1() {
8001b498:	eb cd 40 c0 	pushm	r6-r7,lr
8001b49c:	1a 97       	mov	r7,sp
8001b49e:	20 3d       	sub	sp,12
8001b4a0:	4b 56       	lddpc	r6,8001b574 <checkReceiver1+0xdc>
8001b4a2:	1e 26       	rsub	r6,pc
	int8_t i;
	uint32_t now = get_time_ticks();
8001b4a4:	f0 16 00 4b 	mcall	r6[300]
8001b4a8:	18 98       	mov	r8,r12
8001b4aa:	ef 48 ff f8 	st.w	r7[-8],r8
	uint32_t duration=now-spRec1.last_update;
8001b4ae:	ec f8 00 7c 	ld.w	r8,r6[124]
8001b4b2:	f0 f8 01 24 	ld.w	r8,r8[292]
8001b4b6:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001b4ba:	10 19       	sub	r9,r8
8001b4bc:	ef 49 ff fc 	st.w	r7[-4],r9
	if (spRec1.valid==0) return -2;
8001b4c0:	ec f8 00 7c 	ld.w	r8,r6[124]
8001b4c4:	f1 38 01 28 	ld.ub	r8,r8[296]
8001b4c8:	58 08       	cp.w	r8,0
8001b4ca:	c0 41       	brne	8001b4d2 <checkReceiver1+0x3a>
8001b4cc:	e0 68 00 fe 	mov	r8,254
8001b4d0:	c4 d8       	rjmp	8001b56a <checkReceiver1+0xd2>
	if (duration<100000) {
8001b4d2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001b4d6:	e0 58 86 9f 	cp.w	r8,99999
8001b4da:	e0 8b 00 04 	brhi	8001b4e2 <checkReceiver1+0x4a>
		return 1;
8001b4de:	30 18       	mov	r8,1
8001b4e0:	c4 58       	rjmp	8001b56a <checkReceiver1+0xd2>
	} else
	if (duration<1500000) {
8001b4e2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001b4e6:	e0 69 e3 5f 	mov	r9,58207
8001b4ea:	ea 19 00 16 	orh	r9,0x16
8001b4ee:	12 38       	cp.w	r8,r9
8001b4f0:	e0 8b 00 17 	brhi	8001b51e <checkReceiver1+0x86>
		spRec1.channels[RC_ROLL]=500;	
8001b4f4:	ec f9 00 7c 	ld.w	r9,r6[124]
8001b4f8:	e0 68 01 f4 	mov	r8,500
8001b4fc:	f3 58 01 06 	st.h	r9[262],r8
		spRec1.channels[RC_PITCH]=500;	
8001b500:	ec f9 00 7c 	ld.w	r9,r6[124]
8001b504:	e0 68 01 f4 	mov	r8,500
8001b508:	f3 58 01 08 	st.h	r9[264],r8
		spRec1.channels[RC_YAW]=500;	
8001b50c:	ec f9 00 7c 	ld.w	r9,r6[124]
8001b510:	e0 68 01 f4 	mov	r8,500
8001b514:	f3 58 01 0a 	st.h	r9[266],r8
		return -1; // brief drop out - hold pattern
8001b518:	e0 68 00 ff 	mov	r8,255
8001b51c:	c2 78       	rjmp	8001b56a <checkReceiver1+0xd2>
		
	} else {
		spRec1.valid = 0;
8001b51e:	ec f9 00 7c 	ld.w	r9,r6[124]
8001b522:	30 08       	mov	r8,0
8001b524:	f3 68 01 28 	st.b	r9[296],r8
		for (i=1; i<8; i++) {
8001b528:	30 18       	mov	r8,1
8001b52a:	ef 68 ff f7 	st.b	r7[-9],r8
8001b52e:	c1 08       	rjmp	8001b54e <checkReceiver1+0xb6>
			spRec1.channels[i]=500;			
8001b530:	ef 28 ff f7 	ld.sb	r8,r7[-9]
8001b534:	ec f9 00 7c 	ld.w	r9,r6[124]
8001b538:	f0 ca ff 7e 	sub	r10,r8,-130
8001b53c:	e0 68 01 f4 	mov	r8,500
8001b540:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
		spRec1.channels[RC_YAW]=500;	
		return -1; // brief drop out - hold pattern
		
	} else {
		spRec1.valid = 0;
		for (i=1; i<8; i++) {
8001b544:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8001b548:	2f f8       	sub	r8,-1
8001b54a:	ef 68 ff f7 	st.b	r7[-9],r8
8001b54e:	ef 39 ff f7 	ld.ub	r9,r7[-9]
8001b552:	30 78       	mov	r8,7
8001b554:	f0 09 18 00 	cp.b	r9,r8
8001b558:	fe 9a ff ec 	brle	8001b530 <checkReceiver1+0x98>
			spRec1.channels[i]=500;			
		}
		spRec1.channels[RC_THROTTLE]=0;
8001b55c:	ec f9 00 7c 	ld.w	r9,r6[124]
8001b560:	30 08       	mov	r8,0
8001b562:	f3 58 01 04 	st.h	r9[260],r8
		return -2; // fade - fail safe
8001b566:	e0 68 00 fe 	mov	r8,254

	}

}
8001b56a:	10 9c       	mov	r12,r8
8001b56c:	2f dd       	sub	sp,-12
8001b56e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001b572:	00 00       	add	r0,r0
8001b574:	80 01       	ld.sh	r1,r0[0x0]
8001b576:	b3 26       	st.d	r9++,r6

8001b578 <checkReceiver2>:

int8_t checkReceiver2(){
8001b578:	eb cd 40 c0 	pushm	r6-r7,lr
8001b57c:	1a 97       	mov	r7,sp
8001b57e:	20 3d       	sub	sp,12
8001b580:	4a 96       	lddpc	r6,8001b624 <checkReceiver2+0xac>
8001b582:	1e 26       	rsub	r6,pc
	int8_t i;
	uint32_t now = 0; //TCC0.CNT;
8001b584:	30 08       	mov	r8,0
8001b586:	ef 48 ff f8 	st.w	r7[-8],r8
	uint32_t duration = now - spRec2.last_update;
8001b58a:	ec f8 01 54 	ld.w	r8,r6[340]
8001b58e:	f0 f8 01 24 	ld.w	r8,r8[292]
8001b592:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001b596:	10 19       	sub	r9,r8
8001b598:	ef 49 ff fc 	st.w	r7[-4],r9
	if (spRec2.valid==0) return -2;
8001b59c:	ec f8 01 54 	ld.w	r8,r6[340]
8001b5a0:	f1 38 01 28 	ld.ub	r8,r8[296]
8001b5a4:	58 08       	cp.w	r8,0
8001b5a6:	c0 41       	brne	8001b5ae <checkReceiver2+0x36>
8001b5a8:	e0 68 00 fe 	mov	r8,254
8001b5ac:	c3 88       	rjmp	8001b61c <checkReceiver2+0xa4>
	if (duration < 200000) {
8001b5ae:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001b5b2:	e2 58 0d 3f 	cp.w	r8,199999
8001b5b6:	e0 8b 00 04 	brhi	8001b5be <checkReceiver2+0x46>
		return 1;
8001b5ba:	30 18       	mov	r8,1
8001b5bc:	c3 08       	rjmp	8001b61c <checkReceiver2+0xa4>
	} else if (duration < 500000) {
8001b5be:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001b5c2:	e6 58 a1 1f 	cp.w	r8,499999
8001b5c6:	e0 8b 00 05 	brhi	8001b5d0 <checkReceiver2+0x58>
		return -1; // brief drop out - hold pattern
8001b5ca:	e0 68 00 ff 	mov	r8,255
8001b5ce:	c2 78       	rjmp	8001b61c <checkReceiver2+0xa4>
	} else {
		spRec2.valid = 0;
8001b5d0:	ec f9 01 54 	ld.w	r9,r6[340]
8001b5d4:	30 08       	mov	r8,0
8001b5d6:	f3 68 01 28 	st.b	r9[296],r8
		for (i=1; i<8; i++) {
8001b5da:	30 18       	mov	r8,1
8001b5dc:	ef 68 ff f7 	st.b	r7[-9],r8
8001b5e0:	c1 08       	rjmp	8001b600 <checkReceiver2+0x88>
			spRec2.channels[i]=500;
8001b5e2:	ef 28 ff f7 	ld.sb	r8,r7[-9]
8001b5e6:	ec f9 01 54 	ld.w	r9,r6[340]
8001b5ea:	f0 ca ff 7e 	sub	r10,r8,-130
8001b5ee:	e0 68 01 f4 	mov	r8,500
8001b5f2:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
		return 1;
	} else if (duration < 500000) {
		return -1; // brief drop out - hold pattern
	} else {
		spRec2.valid = 0;
		for (i=1; i<8; i++) {
8001b5f6:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8001b5fa:	2f f8       	sub	r8,-1
8001b5fc:	ef 68 ff f7 	st.b	r7[-9],r8
8001b600:	ef 39 ff f7 	ld.ub	r9,r7[-9]
8001b604:	30 78       	mov	r8,7
8001b606:	f0 09 18 00 	cp.b	r9,r8
8001b60a:	fe 9a ff ec 	brle	8001b5e2 <checkReceiver2+0x6a>
			spRec2.channels[i]=500;
		}
		spRec2.channels[RC_THROTTLE]=0;
8001b60e:	ec f9 01 54 	ld.w	r9,r6[340]
8001b612:	30 08       	mov	r8,0
8001b614:	f3 58 01 04 	st.h	r9[260],r8
		return -2; // fade - fail safe
8001b618:	e0 68 00 fe 	mov	r8,254

	}

}
8001b61c:	10 9c       	mov	r12,r8
8001b61e:	2f dd       	sub	sp,-12
8001b620:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001b624:	80 01       	ld.sh	r1,r0[0x0]
8001b626:	b4 06       	st.h	r10[0x0],r6

8001b628 <rc_check_receivers>:

int8_t rc_check_receivers() {
8001b628:	eb cd 40 c0 	pushm	r6-r7,lr
8001b62c:	1a 97       	mov	r7,sp
8001b62e:	48 66       	lddpc	r6,8001b644 <rc_check_receivers+0x1c>
8001b630:	1e 26       	rsub	r6,pc
	return checkReceiver1();// + checkReceiver2();
8001b632:	f0 16 01 8e 	mcall	r6[1592]
8001b636:	18 98       	mov	r8,r12
8001b638:	5c 58       	castu.b	r8
8001b63a:	5c 58       	castu.b	r8
}
8001b63c:	10 9c       	mov	r12,r8
8001b63e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001b642:	00 00       	add	r0,r0
8001b644:	80 01       	ld.sh	r1,r0[0x0]
8001b646:	b4 b4       	st.b	r10[0x3],r4

8001b648 <sysclk_enable_pba_module>:
/**
 * \brief Enable a module clock derived from the PBA clock
 * \param index Index of the module clock in the PBAMASK register
 */
static inline void sysclk_enable_pba_module(unsigned int index)
{
8001b648:	eb cd 40 c0 	pushm	r6-r7,lr
8001b64c:	1a 97       	mov	r7,sp
8001b64e:	20 1d       	sub	sp,4
8001b650:	48 66       	lddpc	r6,8001b668 <sysclk_enable_pba_module+0x20>
8001b652:	1e 26       	rsub	r6,pc
8001b654:	ef 4c ff fc 	st.w	r7[-4],r12
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_PBA, index);
8001b658:	ee fb ff fc 	ld.w	r11,r7[-4]
8001b65c:	30 2c       	mov	r12,2
8001b65e:	f0 16 01 e9 	mcall	r6[1956]
}
8001b662:	2f fd       	sub	sp,-4
8001b664:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001b668:	80 01       	ld.sh	r1,r0[0x0]
8001b66a:	b4 d6       	st.b	r10[0x5],r6

8001b66c <spi_reset>:
 *
 * \param spi       Base address of the SPI instance.
 *
 */
static inline void spi_reset(volatile avr32_spi_t *spi)
{
8001b66c:	eb cd 40 80 	pushm	r7,lr
8001b670:	1a 97       	mov	r7,sp
8001b672:	20 1d       	sub	sp,4
8001b674:	ef 4c ff fc 	st.w	r7[-4],r12
	spi->cr = AVR32_SPI_CR_SWRST_MASK;
8001b678:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001b67c:	e0 69 00 80 	mov	r9,128
8001b680:	91 09       	st.w	r8[0x0],r9
}
8001b682:	2f fd       	sub	sp,-4
8001b684:	e3 cd 80 80 	ldm	sp++,r7,pc

8001b688 <spi_set_master_mode>:
/*! \brief Set Master Mode of the SPI.
 *
 * \param spi         Base address of the SPI instance.
 */
static inline void spi_set_master_mode(volatile avr32_spi_t *spi)
{
8001b688:	eb cd 40 80 	pushm	r7,lr
8001b68c:	1a 97       	mov	r7,sp
8001b68e:	20 1d       	sub	sp,4
8001b690:	ef 4c ff fc 	st.w	r7[-4],r12
	spi->MR.mstr = 1;
8001b694:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001b698:	72 18       	ld.w	r8,r9[0x4]
8001b69a:	30 1a       	mov	r10,1
8001b69c:	f1 da d0 01 	bfins	r8,r10,0x0,0x1
8001b6a0:	93 18       	st.w	r9[0x4],r8
}
8001b6a2:	2f fd       	sub	sp,-4
8001b6a4:	e3 cd 80 80 	ldm	sp++,r7,pc

8001b6a8 <spi_disable_modfault>:
/*! \brief Disable Modfault of the SPI.
 *
 * \param spi Base address of the SPI instance.
 */
static inline void spi_disable_modfault(volatile avr32_spi_t *spi)
{
8001b6a8:	eb cd 40 80 	pushm	r7,lr
8001b6ac:	1a 97       	mov	r7,sp
8001b6ae:	20 1d       	sub	sp,4
8001b6b0:	ef 4c ff fc 	st.w	r7[-4],r12
	spi->MR.modfdis = 1;
8001b6b4:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001b6b8:	72 18       	ld.w	r8,r9[0x4]
8001b6ba:	30 1a       	mov	r10,1
8001b6bc:	f1 da d0 81 	bfins	r8,r10,0x4,0x1
8001b6c0:	93 18       	st.w	r9[0x4],r8
}
8001b6c2:	2f fd       	sub	sp,-4
8001b6c4:	e3 cd 80 80 	ldm	sp++,r7,pc

8001b6c8 <spi_disable_loopback>:
/*! \brief Disable Loopback of the SPI.
 *
 * \param spi Base address of the SPI instance.
 */
static inline void spi_disable_loopback(volatile avr32_spi_t *spi)
{
8001b6c8:	eb cd 40 80 	pushm	r7,lr
8001b6cc:	1a 97       	mov	r7,sp
8001b6ce:	20 1d       	sub	sp,4
8001b6d0:	ef 4c ff fc 	st.w	r7[-4],r12
	spi->MR.llb = 0;
8001b6d4:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001b6d8:	72 18       	ld.w	r8,r9[0x4]
8001b6da:	30 0a       	mov	r10,0
8001b6dc:	f1 da d0 e1 	bfins	r8,r10,0x7,0x1
8001b6e0:	93 18       	st.w	r9[0x4],r8
}
8001b6e2:	2f fd       	sub	sp,-4
8001b6e4:	e3 cd 80 80 	ldm	sp++,r7,pc

8001b6e8 <spi_disable_chipselect_decoding>:
/*! \brief Disable Chip Select Decoding of the SPI.
 *
 * \param spi Base address of the SPI instance.
 */
static inline void spi_disable_chipselect_decoding(volatile avr32_spi_t *spi)
{
8001b6e8:	eb cd 40 80 	pushm	r7,lr
8001b6ec:	1a 97       	mov	r7,sp
8001b6ee:	20 1d       	sub	sp,4
8001b6f0:	ef 4c ff fc 	st.w	r7[-4],r12
	spi->MR.pcsdec = 0;
8001b6f4:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001b6f8:	72 18       	ld.w	r8,r9[0x4]
8001b6fa:	30 0a       	mov	r10,0
8001b6fc:	f1 da d0 41 	bfins	r8,r10,0x2,0x1
8001b700:	93 18       	st.w	r9[0x4],r8
}
8001b702:	2f fd       	sub	sp,-4
8001b704:	e3 cd 80 80 	ldm	sp++,r7,pc

8001b708 <spi_set_chipselect>:
 *
 * \param spi         Base address of the SPI instance.
 * \param chip_select Chip Select.
 */
static inline void spi_set_chipselect(volatile avr32_spi_t *spi,uint8_t chip_select)
{
8001b708:	eb cd 40 80 	pushm	r7,lr
8001b70c:	1a 97       	mov	r7,sp
8001b70e:	20 2d       	sub	sp,8
8001b710:	ef 4c ff fc 	st.w	r7[-4],r12
8001b714:	16 98       	mov	r8,r11
8001b716:	ef 68 ff f8 	st.b	r7[-8],r8
	spi->MR.pcs = chip_select;
8001b71a:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8001b71e:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8001b722:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
8001b726:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001b72a:	72 18       	ld.w	r8,r9[0x4]
8001b72c:	f1 da d2 04 	bfins	r8,r10,0x10,0x4
8001b730:	93 18       	st.w	r9[0x4],r8
}
8001b732:	2f ed       	sub	sp,-8
8001b734:	e3 cd 80 80 	ldm	sp++,r7,pc

8001b738 <spi_disable_variable_chipselect>:
/*! \brief Disable Variable Chip Select of the SPI.
 *
 * \param spi         Base address of the SPI instance.
 */
static inline void spi_disable_variable_chipselect(volatile avr32_spi_t *spi)
{
8001b738:	eb cd 40 80 	pushm	r7,lr
8001b73c:	1a 97       	mov	r7,sp
8001b73e:	20 1d       	sub	sp,4
8001b740:	ef 4c ff fc 	st.w	r7[-4],r12
	spi->MR.ps = 0;
8001b744:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001b748:	72 18       	ld.w	r8,r9[0x4]
8001b74a:	30 0a       	mov	r10,0
8001b74c:	f1 da d0 21 	bfins	r8,r10,0x1,0x1
8001b750:	93 18       	st.w	r9[0x4],r8
}
8001b752:	2f fd       	sub	sp,-4
8001b754:	e3 cd 80 80 	ldm	sp++,r7,pc

8001b758 <spi_set_delay>:
 *
 * \param spi         Base address of the SPI instance.
 * \param delay       Delay.
 */
static inline void spi_set_delay(volatile avr32_spi_t *spi,uint8_t delay)
{
8001b758:	eb cd 40 80 	pushm	r7,lr
8001b75c:	1a 97       	mov	r7,sp
8001b75e:	20 2d       	sub	sp,8
8001b760:	ef 4c ff fc 	st.w	r7[-4],r12
8001b764:	16 98       	mov	r8,r11
8001b766:	ef 68 ff f8 	st.b	r7[-8],r8
	spi->MR.dlybcs = delay;
8001b76a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001b76e:	72 18       	ld.w	r8,r9[0x4]
8001b770:	ef 3a ff f8 	ld.ub	r10,r7[-8]
8001b774:	f1 da d3 08 	bfins	r8,r10,0x18,0x8
8001b778:	93 18       	st.w	r9[0x4],r8
}
8001b77a:	2f ed       	sub	sp,-8
8001b77c:	e3 cd 80 80 	ldm	sp++,r7,pc

8001b780 <spi_master_init>:
 *
 * \param spi       Base address of the SPI instance.
 *
 */
static inline void spi_master_init(volatile avr32_spi_t *spi)
{
8001b780:	eb cd 40 c0 	pushm	r6-r7,lr
8001b784:	1a 97       	mov	r7,sp
8001b786:	20 1d       	sub	sp,4
8001b788:	49 86       	lddpc	r6,8001b7e8 <spi_master_init+0x68>
8001b78a:	1e 26       	rsub	r6,pc
8001b78c:	ef 4c ff fc 	st.w	r7[-4],r12
#ifdef AVR32_SPI
	sysclk_enable_pba_module(SYSCLK_SPI);	
#else
	if ((uint32_t)spi == AVR32_SPI0_ADDRESS)
8001b790:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001b794:	fc 58 18 00 	cp.w	r8,-190464
8001b798:	c0 41       	brne	8001b7a0 <spi_master_init+0x20>
	{
	sysclk_enable_pba_module(SYSCLK_SPI0);	
8001b79a:	30 3c       	mov	r12,3
8001b79c:	c5 6f       	rcall	8001b648 <sysclk_enable_pba_module>
8001b79e:	c0 88       	rjmp	8001b7ae <spi_master_init+0x2e>
	}
#ifdef AVR32_SPI1
	else if ((uint32_t)spi == AVR32_SPI1_ADDRESS)
8001b7a0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001b7a4:	fe 58 34 00 	cp.w	r8,-52224
8001b7a8:	c0 31       	brne	8001b7ae <spi_master_init+0x2e>
	{
	sysclk_enable_pba_module(SYSCLK_SPI1);	
8001b7aa:	30 bc       	mov	r12,11
8001b7ac:	c4 ef       	rcall	8001b648 <sysclk_enable_pba_module>
	}
#endif
#endif
  
  spi_reset(spi);
8001b7ae:	ee fc ff fc 	ld.w	r12,r7[-4]
8001b7b2:	c5 df       	rcall	8001b66c <spi_reset>
  spi_set_master_mode(spi);
8001b7b4:	ee fc ff fc 	ld.w	r12,r7[-4]
8001b7b8:	c6 8f       	rcall	8001b688 <spi_set_master_mode>
  spi_disable_modfault(spi);
8001b7ba:	ee fc ff fc 	ld.w	r12,r7[-4]
8001b7be:	c7 5f       	rcall	8001b6a8 <spi_disable_modfault>
  spi_disable_loopback(spi);
8001b7c0:	ee fc ff fc 	ld.w	r12,r7[-4]
8001b7c4:	c8 2f       	rcall	8001b6c8 <spi_disable_loopback>
  spi_set_chipselect(spi,(1 << AVR32_SPI_MR_PCS_SIZE) - 1);
8001b7c6:	30 fb       	mov	r11,15
8001b7c8:	ee fc ff fc 	ld.w	r12,r7[-4]
8001b7cc:	c9 ef       	rcall	8001b708 <spi_set_chipselect>
  spi_disable_variable_chipselect(spi);
8001b7ce:	ee fc ff fc 	ld.w	r12,r7[-4]
8001b7d2:	cb 3f       	rcall	8001b738 <spi_disable_variable_chipselect>
  spi_disable_chipselect_decoding(spi);
8001b7d4:	ee fc ff fc 	ld.w	r12,r7[-4]
8001b7d8:	c8 8f       	rcall	8001b6e8 <spi_disable_chipselect_decoding>
  spi_set_delay(spi,CONFIG_SPI_MASTER_DELAY_BCS);
8001b7da:	30 0b       	mov	r11,0
8001b7dc:	ee fc ff fc 	ld.w	r12,r7[-4]
8001b7e0:	cb cf       	rcall	8001b758 <spi_set_delay>
}
8001b7e2:	2f fd       	sub	sp,-4
8001b7e4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001b7e8:	80 01       	ld.sh	r1,r0[0x0]
8001b7ea:	b6 0e       	st.h	r11[0x0],lr

8001b7ec <spi_select_device>:
 * \param spi Base address of the SPI instance.
 * \param device SPI device
 *
 */
static inline void spi_select_device(volatile avr32_spi_t *spi, struct spi_device *device)
{
8001b7ec:	eb cd 40 c0 	pushm	r6-r7,lr
8001b7f0:	1a 97       	mov	r7,sp
8001b7f2:	20 2d       	sub	sp,8
8001b7f4:	48 96       	lddpc	r6,8001b818 <spi_select_device+0x2c>
8001b7f6:	1e 26       	rsub	r6,pc
8001b7f8:	ef 4c ff fc 	st.w	r7[-4],r12
8001b7fc:	ef 4b ff f8 	st.w	r7[-8],r11
	spi_selectChip(spi,device->id);
8001b800:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001b804:	11 88       	ld.ub	r8,r8[0x0]
8001b806:	10 9b       	mov	r11,r8
8001b808:	ee fc ff fc 	ld.w	r12,r7[-4]
8001b80c:	f0 16 01 f3 	mcall	r6[1996]
}
8001b810:	2f ed       	sub	sp,-8
8001b812:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001b816:	00 00       	add	r0,r0
8001b818:	80 01       	ld.sh	r1,r0[0x0]
8001b81a:	b6 7a       	st.h	r11[0xe],r10

8001b81c <spi_deselect_device>:
 * \param device SPI device
 *
 * \pre SPI device must be selected with spi_select_device() first
 */
static inline void spi_deselect_device(volatile avr32_spi_t *spi, struct spi_device *device)
{
8001b81c:	eb cd 40 c0 	pushm	r6-r7,lr
8001b820:	1a 97       	mov	r7,sp
8001b822:	20 2d       	sub	sp,8
8001b824:	48 96       	lddpc	r6,8001b848 <spi_deselect_device+0x2c>
8001b826:	1e 26       	rsub	r6,pc
8001b828:	ef 4c ff fc 	st.w	r7[-4],r12
8001b82c:	ef 4b ff f8 	st.w	r7[-8],r11
	spi_unselectChip(spi,device->id);
8001b830:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001b834:	11 88       	ld.ub	r8,r8[0x0]
8001b836:	10 9b       	mov	r11,r8
8001b838:	ee fc ff fc 	ld.w	r12,r7[-4]
8001b83c:	f0 16 01 3f 	mcall	r6[1276]
}
8001b840:	2f ed       	sub	sp,-8
8001b842:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001b846:	00 00       	add	r0,r0
8001b848:	80 01       	ld.sh	r1,r0[0x0]
8001b84a:	b6 aa       	st.b	r11[0x2],r10

8001b84c <get_spi_in_buffer>:
#include "led.h"


static volatile spi_buffer_t spi_buffers[SPI_NUMBER];

uint8_t* get_spi_in_buffer(int spi_index) {
8001b84c:	eb cd 40 c0 	pushm	r6-r7,lr
8001b850:	1a 97       	mov	r7,sp
8001b852:	20 1d       	sub	sp,4
8001b854:	48 96       	lddpc	r6,8001b878 <get_spi_in_buffer+0x2c>
8001b856:	1e 26       	rsub	r6,pc
8001b858:	ef 4c ff fc 	st.w	r7[-4],r12
	return spi_buffers[spi_index].SPIInBuffer;
8001b85c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001b860:	f0 08 10 54 	mul	r8,r8,84
8001b864:	f0 c9 ff dc 	sub	r9,r8,-36
8001b868:	ec f8 00 2c 	ld.w	r8,r6[44]
8001b86c:	f2 08 00 08 	add	r8,r9,r8
}
8001b870:	10 9c       	mov	r12,r8
8001b872:	2f fd       	sub	sp,-4
8001b874:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001b878:	80 01       	ld.sh	r1,r0[0x0]
8001b87a:	b6 da       	st.b	r11[0x5],r10

8001b87c <spi0_int_handler>:

/** interrupt handler
  * manages sending and receiving data
*/
__attribute__((__interrupt__))
void spi0_int_handler() {
8001b87c:	eb cd 40 c0 	pushm	r6-r7,lr
8001b880:	1a 97       	mov	r7,sp
8001b882:	48 56       	lddpc	r6,8001b894 <spi0_int_handler+0x18>
8001b884:	1e 26       	rsub	r6,pc
	//LED_On(LED1);
	spi_handler(0);
8001b886:	30 0c       	mov	r12,0
8001b888:	f0 16 01 1a 	mcall	r6[1128]
}
8001b88c:	e3 cd 40 c0 	ldm	sp++,r6-r7,lr
8001b890:	d6 03       	rete
8001b892:	00 00       	add	r0,r0
8001b894:	80 01       	ld.sh	r1,r0[0x0]
8001b896:	b7 08       	ld.d	r8,r11

8001b898 <spi1_int_handler>:

__attribute__((__interrupt__))
void spi1_int_handler() {
8001b898:	eb cd 40 c0 	pushm	r6-r7,lr
8001b89c:	1a 97       	mov	r7,sp
8001b89e:	48 56       	lddpc	r6,8001b8b0 <spi1_int_handler+0x18>
8001b8a0:	1e 26       	rsub	r6,pc
	spi_handler(1);
8001b8a2:	30 1c       	mov	r12,1
8001b8a4:	f0 16 01 1a 	mcall	r6[1128]
}
8001b8a8:	e3 cd 40 c0 	ldm	sp++,r6-r7,lr
8001b8ac:	d6 03       	rete
8001b8ae:	00 00       	add	r0,r0
8001b8b0:	80 01       	ld.sh	r1,r0[0x0]
8001b8b2:	b7 24       	st.d	r11++,r4

8001b8b4 <pdca_int_handler_spi0>:

/*! \brief The PDCA interrupt handler.
 */
__attribute__((__interrupt__))
static void pdca_int_handler_spi0(void)
{
8001b8b4:	eb cd 40 c0 	pushm	r6-r7,lr
8001b8b8:	1a 97       	mov	r7,sp
8001b8ba:	49 b6       	lddpc	r6,8001b924 <pdca_int_handler_spi0+0x70>
8001b8bc:	1e 26       	rsub	r6,pc
	AVR32_PDCA.channel[SPI0_DMA_CH_RECEIVE].isr;
8001b8be:	fc 78 00 00 	mov	r8,-196608
8001b8c2:	71 b8       	ld.w	r8,r8[0x6c]
	AVR32_PDCA.channel[SPI0_DMA_CH_TRANSMIT].isr;
8001b8c4:	fc 78 00 00 	mov	r8,-196608
8001b8c8:	70 b8       	ld.w	r8,r8[0x2c]
	pdca_disable(SPI0_DMA_CH_RECEIVE);
8001b8ca:	30 1c       	mov	r12,1
8001b8cc:	f0 16 00 89 	mcall	r6[548]
	pdca_disable(SPI0_DMA_CH_TRANSMIT);
8001b8d0:	30 0c       	mov	r12,0
8001b8d2:	f0 16 00 89 	mcall	r6[548]
	pdca_disable_interrupt_transfer_complete(SPI0_DMA_CH_RECEIVE);
8001b8d6:	30 1c       	mov	r12,1
8001b8d8:	f0 16 00 c9 	mcall	r6[804]
	spi_deselect_device(spi_buffers[0].spi, &spi_buffers[0].adc_spi);
8001b8dc:	ec f8 00 2c 	ld.w	r8,r6[44]
8001b8e0:	70 08       	ld.w	r8,r8[0x0]
8001b8e2:	ec f9 00 2c 	ld.w	r9,r6[44]
8001b8e6:	2b 09       	sub	r9,-80
8001b8e8:	12 9b       	mov	r11,r9
8001b8ea:	10 9c       	mov	r12,r8
8001b8ec:	c9 8f       	rcall	8001b81c <spi_deselect_device>
   // call callback function to process data, at end of transfer
   // to process data, and maybe add some more data
   spi_buffers[0].SPIinBufferTail=spi_buffers[0].transmission_in_progress;
8001b8ee:	ec f8 00 2c 	ld.w	r8,r6[44]
8001b8f2:	f1 38 00 4a 	ld.ub	r8,r8[74]
8001b8f6:	5c 58       	castu.b	r8
8001b8f8:	ec f9 00 2c 	ld.w	r9,r6[44]
8001b8fc:	f3 68 00 45 	st.b	r9[69],r8
   spi_buffers[0].transmission_in_progress=0;
8001b900:	ec f9 00 2c 	ld.w	r9,r6[44]
8001b904:	30 08       	mov	r8,0
8001b906:	f3 68 00 4a 	st.b	r9[74],r8
   //spi_buffers[0].traffic++;
   
   if ((spi_buffers[0].callbackFunction)) spi_buffers[0].callbackFunction();
8001b90a:	ec f8 00 2c 	ld.w	r8,r6[44]
8001b90e:	71 38       	ld.w	r8,r8[0x4c]
8001b910:	58 08       	cp.w	r8,0
8001b912:	c0 50       	breq	8001b91c <pdca_int_handler_spi0+0x68>
8001b914:	ec f8 00 2c 	ld.w	r8,r6[44]
8001b918:	71 38       	ld.w	r8,r8[0x4c]
8001b91a:	5d 18       	icall	r8
   
}
8001b91c:	e3 cd 40 c0 	ldm	sp++,r6-r7,lr
8001b920:	d6 03       	rete
8001b922:	00 00       	add	r0,r0
8001b924:	80 01       	ld.sh	r1,r0[0x0]
8001b926:	b7 40       	asr	r0,0x16

8001b928 <initSPI>:
/** initialises SPI interface
 *  this interface uses internal buffers and interrupts. 
 *  bytes in the outgoing buffer are sent automatically via interrupt
 */

void initSPI(volatile avr32_spi_t *spi, int spi_index){
8001b928:	eb cd 40 c0 	pushm	r6-r7,lr
8001b92c:	1a 97       	mov	r7,sp
8001b92e:	20 2d       	sub	sp,8
8001b930:	4e 16       	lddpc	r6,8001bab4 <initSPI+0x18c>
8001b932:	1e 26       	rsub	r6,pc
8001b934:	ef 4c ff fc 	st.w	r7[-4],r12
8001b938:	ef 4b ff f8 	st.w	r7[-8],r11
	// init SPI
	spi_buffers[spi_index].spi= spi;
8001b93c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001b940:	ec f9 00 2c 	ld.w	r9,r6[44]
8001b944:	f0 08 10 54 	mul	r8,r8,84
8001b948:	f2 08 00 08 	add	r8,r9,r8
8001b94c:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001b950:	91 09       	st.w	r8[0x0],r9
	
	spi_buffers[spi_index].adc_spi.id=0;
8001b952:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001b956:	ec f9 00 2c 	ld.w	r9,r6[44]
8001b95a:	f0 08 10 54 	mul	r8,r8,84
8001b95e:	f2 08 00 08 	add	r8,r9,r8
8001b962:	f0 c9 ff b0 	sub	r9,r8,-80
8001b966:	30 08       	mov	r8,0
8001b968:	b2 88       	st.b	r9[0x0],r8
	
	spi_master_init(spi_buffers[spi_index].spi);
8001b96a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001b96e:	ec f9 00 2c 	ld.w	r9,r6[44]
8001b972:	f0 08 10 54 	mul	r8,r8,84
8001b976:	f2 08 00 08 	add	r8,r9,r8
8001b97a:	70 08       	ld.w	r8,r8[0x0]
8001b97c:	10 9c       	mov	r12,r8
8001b97e:	c0 1f       	rcall	8001b780 <spi_master_init>
	spi_master_setup_device(spi_buffers[spi_index].spi, &spi_buffers[spi_index].adc_spi, SPI_MODE_0, 20000000, 0);
8001b980:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001b984:	f0 08 10 54 	mul	r8,r8,84
8001b988:	f0 c9 ff b0 	sub	r9,r8,-80
8001b98c:	ec f8 00 2c 	ld.w	r8,r6[44]
8001b990:	f2 08 00 0b 	add	r11,r9,r8
8001b994:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001b998:	ec f9 00 2c 	ld.w	r9,r6[44]
8001b99c:	f0 08 10 54 	mul	r8,r8,84
8001b9a0:	f2 08 00 08 	add	r8,r9,r8
8001b9a4:	70 0c       	ld.w	r12,r8[0x0]
8001b9a6:	30 08       	mov	r8,0
8001b9a8:	e0 69 2d 00 	mov	r9,11520
8001b9ac:	ea 19 01 31 	orh	r9,0x131
8001b9b0:	30 0a       	mov	r10,0
8001b9b2:	f0 16 01 60 	mcall	r6[1408]
	//spi_buffers[spi_index].spi->cr=AVR32_SPI_SWRST_MASK;
	
	//spi_buffers[spi_index].spi->mr=AVR32_SPI_MSTR_MASK;

	
	gpio_enable_module_pin(AVR32_SPI0_MOSI_0_0_PIN, AVR32_SPI0_MOSI_0_0_FUNCTION);
8001b9b6:	30 0b       	mov	r11,0
8001b9b8:	36 0c       	mov	r12,96
8001b9ba:	f0 16 00 3c 	mcall	r6[240]
	//gpio_configure_pin(AVR32_SPI0_MOSI_0_0_PIN, GPIO_DIR_OUTPUT | GPIO_INIT_LOW);
	gpio_enable_module_pin(AVR32_SPI0_MISO_0_0_PIN, AVR32_SPI0_MISO_0_0_FUNCTION);
8001b9be:	30 0b       	mov	r11,0
8001b9c0:	36 1c       	mov	r12,97
8001b9c2:	f0 16 00 3c 	mcall	r6[240]
	gpio_enable_module_pin(AVR32_SPI0_SCK_0_0_PIN, AVR32_SPI0_SCK_0_0_FUNCTION);
8001b9c6:	30 0b       	mov	r11,0
8001b9c8:	36 2c       	mov	r12,98
8001b9ca:	f0 16 00 3c 	mcall	r6[240]

	spi_buffers[spi_index].SPIinBufferHead=0;
8001b9ce:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001b9d2:	ec f9 00 2c 	ld.w	r9,r6[44]
8001b9d6:	f0 08 10 54 	mul	r8,r8,84
8001b9da:	f2 08 00 08 	add	r8,r9,r8
8001b9de:	f0 c9 ff bc 	sub	r9,r8,-68
8001b9e2:	30 08       	mov	r8,0
8001b9e4:	b2 88       	st.b	r9[0x0],r8
	spi_buffers[spi_index].SPIinBufferTail=0;
8001b9e6:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001b9ea:	ec f9 00 2c 	ld.w	r9,r6[44]
8001b9ee:	f0 08 10 54 	mul	r8,r8,84
8001b9f2:	f2 08 00 08 	add	r8,r9,r8
8001b9f6:	f0 c9 ff bc 	sub	r9,r8,-68
8001b9fa:	30 08       	mov	r8,0
8001b9fc:	b2 98       	st.b	r9[0x1],r8
	spi_buffers[spi_index].SPIoutBufferHead=0;
8001b9fe:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001ba02:	ec f9 00 2c 	ld.w	r9,r6[44]
8001ba06:	f0 08 10 54 	mul	r8,r8,84
8001ba0a:	f2 08 00 08 	add	r8,r9,r8
8001ba0e:	f0 c9 ff bc 	sub	r9,r8,-68
8001ba12:	30 08       	mov	r8,0
8001ba14:	b2 a8       	st.b	r9[0x2],r8
	spi_buffers[spi_index].SPIoutBufferTail=0;
8001ba16:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001ba1a:	ec f9 00 2c 	ld.w	r9,r6[44]
8001ba1e:	f0 08 10 54 	mul	r8,r8,84
8001ba22:	f2 08 00 08 	add	r8,r9,r8
8001ba26:	f0 c9 ff bc 	sub	r9,r8,-68
8001ba2a:	30 08       	mov	r8,0
8001ba2c:	b2 b8       	st.b	r9[0x3],r8
	spi_buffers[spi_index].spiReceiverOn=1;
8001ba2e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001ba32:	ec f9 00 2c 	ld.w	r9,r6[44]
8001ba36:	f0 08 10 54 	mul	r8,r8,84
8001ba3a:	f2 08 00 08 	add	r8,r9,r8
8001ba3e:	f0 c9 ff b8 	sub	r9,r8,-72
8001ba42:	30 18       	mov	r8,1
8001ba44:	b2 88       	st.b	r9[0x0],r8
	spi_buffers[spi_index].traffic=0;
8001ba46:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001ba4a:	ec f9 00 2c 	ld.w	r9,r6[44]
8001ba4e:	f0 08 10 54 	mul	r8,r8,84
8001ba52:	f2 08 00 08 	add	r8,r9,r8
8001ba56:	f0 c9 ff b8 	sub	r9,r8,-72
8001ba5a:	30 08       	mov	r8,0
8001ba5c:	b2 98       	st.b	r9[0x1],r8
	spi_buffers[spi_index].automatic=1;
8001ba5e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001ba62:	ec f9 00 2c 	ld.w	r9,r6[44]
8001ba66:	f0 08 10 54 	mul	r8,r8,84
8001ba6a:	f2 08 00 08 	add	r8,r9,r8
8001ba6e:	f0 c9 ff b8 	sub	r9,r8,-72
8001ba72:	30 18       	mov	r8,1
8001ba74:	b2 b8       	st.b	r9[0x3],r8
	spi_buffers[spi_index].callbackFunction=0;
8001ba76:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001ba7a:	ec f9 00 2c 	ld.w	r9,r6[44]
8001ba7e:	f0 08 10 54 	mul	r8,r8,84
8001ba82:	f2 08 00 08 	add	r8,r9,r8
8001ba86:	2b 48       	sub	r8,-76
8001ba88:	30 09       	mov	r9,0
8001ba8a:	91 09       	st.w	r8[0x0],r9
	spi_buffers[spi_index].transmission_in_progress=0;
8001ba8c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001ba90:	ec f9 00 2c 	ld.w	r9,r6[44]
8001ba94:	f0 08 10 54 	mul	r8,r8,84
8001ba98:	f2 08 00 08 	add	r8,r9,r8
8001ba9c:	f0 c9 ff b8 	sub	r9,r8,-72
8001baa0:	30 08       	mov	r8,0
8001baa2:	b2 a8       	st.b	r9[0x2],r8
    //INTC_register_interrupt(&spi0_int_handler, AVR32_SPI0_IRQ, AVR32_INTC_INT0);
	
    //INTC_register_interrupt(&spi1_int_handler, AVR32_SPI1_IRQ, AVR32_INTC_INT0);
	//spi_buffers[spi_index].spi->imr = AVR32_SPI_RDRF;

	enableSPI(spi_index);
8001baa4:	ee fc ff f8 	ld.w	r12,r7[-8]
8001baa8:	f0 16 01 a3 	mcall	r6[1676]
	//spi_buffers[spi_index].spi->cr=AVR32_SPI_SPIEN_MASK;	
}
8001baac:	2f ed       	sub	sp,-8
8001baae:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001bab2:	00 00       	add	r0,r0
8001bab4:	80 01       	ld.sh	r1,r0[0x0]
8001bab6:	b7 b6       	sbr	r6,0x17

8001bab8 <enableSPI>:

void enableSPI(int spi_index) {
8001bab8:	eb cd 40 c0 	pushm	r6-r7,lr
8001babc:	1a 97       	mov	r7,sp
8001babe:	20 1d       	sub	sp,4
8001bac0:	48 a6       	lddpc	r6,8001bae8 <enableSPI+0x30>
8001bac2:	1e 26       	rsub	r6,pc
8001bac4:	ef 4c ff fc 	st.w	r7[-4],r12
	spi_enable(spi_buffers[spi_index].spi);
8001bac8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001bacc:	ec f9 00 2c 	ld.w	r9,r6[44]
8001bad0:	f0 08 10 54 	mul	r8,r8,84
8001bad4:	f2 08 00 08 	add	r8,r9,r8
8001bad8:	70 08       	ld.w	r8,r8[0x0]
8001bada:	10 9c       	mov	r12,r8
8001badc:	f0 16 01 a5 	mcall	r6[1684]
}
8001bae0:	2f fd       	sub	sp,-4
8001bae2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001bae6:	00 00       	add	r0,r0
8001bae8:	80 01       	ld.sh	r1,r0[0x0]
8001baea:	b9 46       	asr	r6,0x18

8001baec <disableSPI>:

void disableSPI(int spi_index) {
8001baec:	eb cd 40 c0 	pushm	r6-r7,lr
8001baf0:	1a 97       	mov	r7,sp
8001baf2:	20 1d       	sub	sp,4
8001baf4:	48 a6       	lddpc	r6,8001bb1c <disableSPI+0x30>
8001baf6:	1e 26       	rsub	r6,pc
8001baf8:	ef 4c ff fc 	st.w	r7[-4],r12
	spi_disable(spi_buffers[spi_index].spi);
8001bafc:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001bb00:	ec f9 00 2c 	ld.w	r9,r6[44]
8001bb04:	f0 08 10 54 	mul	r8,r8,84
8001bb08:	f2 08 00 08 	add	r8,r9,r8
8001bb0c:	70 08       	ld.w	r8,r8[0x0]
8001bb0e:	10 9c       	mov	r12,r8
8001bb10:	f0 16 01 48 	mcall	r6[1312]
}
8001bb14:	2f fd       	sub	sp,-4
8001bb16:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001bb1a:	00 00       	add	r0,r0
8001bb1c:	80 01       	ld.sh	r1,r0[0x0]
8001bb1e:	b9 7a       	lsl	r10,0x19

8001bb20 <spiInitDMA>:


// initialise DMA for SPI transfers
  // PDCA channel options
  
void spiInitDMA(int spi_index, int block_size) {
8001bb20:	eb cd 40 c0 	pushm	r6-r7,lr
8001bb24:	1a 97       	mov	r7,sp
8001bb26:	20 2d       	sub	sp,8
8001bb28:	49 c6       	lddpc	r6,8001bb98 <spiInitDMA+0x78>
8001bb2a:	1e 26       	rsub	r6,pc
8001bb2c:	ef 4c ff fc 	st.w	r7[-4],r12
8001bb30:	ef 4b ff f8 	st.w	r7[-8],r11
    .size = 12,                               // transfer counter
    .r_addr = NULL,                           // next memory address
    .r_size = 0,                              // next transfer counter
    .transfer_size = PDCA_TRANSFER_SIZE_BYTE  // select size of the transfer
  };
  PDCA_TX_OPTIONS.addr=(void *) spi_buffers[spi_index].SPIOutBuffer;
8001bb34:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001bb38:	12 98       	mov	r8,r9
8001bb3a:	a1 78       	lsl	r8,0x1
8001bb3c:	12 08       	add	r8,r9
8001bb3e:	f0 09 15 03 	lsl	r9,r8,0x3
8001bb42:	10 19       	sub	r9,r8
8001bb44:	f2 c8 ff ff 	sub	r8,r9,-1
8001bb48:	f0 09 15 02 	lsl	r9,r8,0x2
8001bb4c:	ec f8 00 2c 	ld.w	r8,r6[44]
8001bb50:	10 09       	add	r9,r8
8001bb52:	ec f8 04 a0 	ld.w	r8,r6[1184]
8001bb56:	91 09       	st.w	r8[0x0],r9
  PDCA_RX_OPTIONS.addr=(void *) spi_buffers[spi_index].SPIInBuffer;
8001bb58:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001bb5c:	f0 08 10 54 	mul	r8,r8,84
8001bb60:	f0 c9 ff dc 	sub	r9,r8,-36
8001bb64:	ec f8 00 2c 	ld.w	r8,r6[44]
8001bb68:	10 09       	add	r9,r8
8001bb6a:	ec f8 04 9c 	ld.w	r8,r6[1180]
8001bb6e:	91 09       	st.w	r8[0x0],r9
  // Init PDCA channel with the pdca_options.
  pdca_init_channel(SPI0_DMA_CH_TRANSMIT, &PDCA_TX_OPTIONS); // init PDCA channel with options.
8001bb70:	ec fb 04 a0 	ld.w	r11,r6[1184]
8001bb74:	30 0c       	mov	r12,0
8001bb76:	f0 16 00 af 	mcall	r6[700]
  pdca_init_channel(SPI0_DMA_CH_RECEIVE, &PDCA_RX_OPTIONS); // init PDCA channel with options.
8001bb7a:	ec fb 04 9c 	ld.w	r11,r6[1180]
8001bb7e:	30 1c       	mov	r12,1
8001bb80:	f0 16 00 af 	mcall	r6[700]

  // Register PDCA IRQ interrupt.

  INTC_register_interrupt( (__int_handler) &pdca_int_handler_spi0, SPI0_DMA_IRQ, AVR32_INTC_INT0);
8001bb84:	30 0a       	mov	r10,0
8001bb86:	36 1b       	mov	r11,97
8001bb88:	fe cc 02 d4 	sub	r12,pc,724
8001bb8c:	f0 16 00 3b 	mcall	r6[236]
  
  
}
8001bb90:	2f ed       	sub	sp,-8
8001bb92:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001bb96:	00 00       	add	r0,r0
8001bb98:	80 01       	ld.sh	r1,r0[0x0]
8001bb9a:	b9 ae       	sbr	lr,0x18

8001bb9c <spiTriggerDMA>:

void spiTriggerDMA(int spi_index, int block_size){
8001bb9c:	eb cd 40 c0 	pushm	r6-r7,lr
8001bba0:	1a 97       	mov	r7,sp
8001bba2:	20 2d       	sub	sp,8
8001bba4:	4a 86       	lddpc	r6,8001bc44 <spiTriggerDMA+0xa8>
8001bba6:	1e 26       	rsub	r6,pc
8001bba8:	ef 4c ff fc 	st.w	r7[-4],r12
8001bbac:	ef 4b ff f8 	st.w	r7[-8],r11
	//spi_buffers[spi_index].transmission_in_progress=block_size;
	//spi_buffers[spi_index].SPIInBuffer[0]=42;
	//spi_buffers[spi_index].SPIInBuffer[3]=42;
	//spi_buffers[spi_index].SPIInBuffer[6]=42;
	//spi_buffers[spi_index].SPIInBuffer[9]=42;
	pdca_load_channel(SPI0_DMA_CH_TRANSMIT, (void *)spi_buffers[spi_index].SPIOutBuffer, block_size);
8001bbb0:	ee fa ff f8 	ld.w	r10,r7[-8]
8001bbb4:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001bbb8:	12 98       	mov	r8,r9
8001bbba:	a1 78       	lsl	r8,0x1
8001bbbc:	12 08       	add	r8,r9
8001bbbe:	f0 09 15 03 	lsl	r9,r8,0x3
8001bbc2:	10 19       	sub	r9,r8
8001bbc4:	f2 c8 ff ff 	sub	r8,r9,-1
8001bbc8:	f0 09 15 02 	lsl	r9,r8,0x2
8001bbcc:	ec f8 00 2c 	ld.w	r8,r6[44]
8001bbd0:	f2 08 00 08 	add	r8,r9,r8
8001bbd4:	10 9b       	mov	r11,r8
8001bbd6:	30 0c       	mov	r12,0
8001bbd8:	f0 16 01 04 	mcall	r6[1040]
	pdca_load_channel(SPI0_DMA_CH_RECEIVE,  (void *)(spi_buffers[spi_index].SPIInBuffer), block_size);
8001bbdc:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001bbe0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001bbe4:	f0 08 10 54 	mul	r8,r8,84
8001bbe8:	f0 ca ff dc 	sub	r10,r8,-36
8001bbec:	ec f8 00 2c 	ld.w	r8,r6[44]
8001bbf0:	f4 08 00 08 	add	r8,r10,r8
8001bbf4:	12 9a       	mov	r10,r9
8001bbf6:	10 9b       	mov	r11,r8
8001bbf8:	30 1c       	mov	r12,1
8001bbfa:	f0 16 01 04 	mcall	r6[1040]

	
	spi_select_device(spi_buffers[spi_index].spi, &spi_buffers[spi_index].adc_spi);
8001bbfe:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001bc02:	f0 08 10 54 	mul	r8,r8,84
8001bc06:	f0 c9 ff b0 	sub	r9,r8,-80
8001bc0a:	ec f8 00 2c 	ld.w	r8,r6[44]
8001bc0e:	10 09       	add	r9,r8
8001bc10:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001bc14:	ec fa 00 2c 	ld.w	r10,r6[44]
8001bc18:	f0 08 10 54 	mul	r8,r8,84
8001bc1c:	f4 08 00 08 	add	r8,r10,r8
8001bc20:	70 08       	ld.w	r8,r8[0x0]
8001bc22:	12 9b       	mov	r11,r9
8001bc24:	10 9c       	mov	r12,r8
8001bc26:	fe b0 fd e3 	rcall	8001b7ec <spi_select_device>
	// Enable pdca interrupt each time the reload counter reaches zero, i.e. each time
    // the whole block was received
	pdca_enable_interrupt_transfer_complete(SPI0_DMA_CH_RECEIVE);
8001bc2a:	30 1c       	mov	r12,1
8001bc2c:	f0 16 01 02 	mcall	r6[1032]
	
	pdca_enable(SPI0_DMA_CH_RECEIVE);
8001bc30:	30 1c       	mov	r12,1
8001bc32:	f0 16 00 b8 	mcall	r6[736]
	pdca_enable(SPI0_DMA_CH_TRANSMIT);
8001bc36:	30 0c       	mov	r12,0
8001bc38:	f0 16 00 b8 	mcall	r6[736]
    
}
8001bc3c:	2f ed       	sub	sp,-8
8001bc3e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001bc42:	00 00       	add	r0,r0
8001bc44:	80 01       	ld.sh	r1,r0[0x0]
8001bc46:	ba 2a       	st.h	sp[0x4],r10

8001bc48 <setSPIcallBack>:

/** specify a callback function, that gets called when the SPI buffer is empty
 */
void setSPIcallBack(int spi_index, functionpointer* functionPointer) {
8001bc48:	eb cd 40 c0 	pushm	r6-r7,lr
8001bc4c:	1a 97       	mov	r7,sp
8001bc4e:	20 2d       	sub	sp,8
8001bc50:	48 b6       	lddpc	r6,8001bc7c <setSPIcallBack+0x34>
8001bc52:	1e 26       	rsub	r6,pc
8001bc54:	ef 4c ff fc 	st.w	r7[-4],r12
8001bc58:	ef 4b ff f8 	st.w	r7[-8],r11
	spi_buffers[spi_index].callbackFunction=functionPointer;
8001bc5c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001bc60:	ec f9 00 2c 	ld.w	r9,r6[44]
8001bc64:	f0 08 10 54 	mul	r8,r8,84
8001bc68:	f2 08 00 08 	add	r8,r9,r8
8001bc6c:	2b 48       	sub	r8,-76
8001bc6e:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001bc72:	91 09       	st.w	r8[0x0],r9
}
8001bc74:	2f ed       	sub	sp,-8
8001bc76:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001bc7a:	00 00       	add	r0,r0
8001bc7c:	80 01       	ld.sh	r1,r0[0x0]
8001bc7e:	ba d6       	st.b	sp[0x5],r6

8001bc80 <pauseSPI>:

/** pauses sending 
  * be careful not to overfill the buffer - deadlock may occur  
  */
void pauseSPI(int spi_index){
8001bc80:	eb cd 40 c0 	pushm	r6-r7,lr
8001bc84:	1a 97       	mov	r7,sp
8001bc86:	20 1d       	sub	sp,4
8001bc88:	48 a6       	lddpc	r6,8001bcb0 <pauseSPI+0x30>
8001bc8a:	1e 26       	rsub	r6,pc
8001bc8c:	ef 4c ff fc 	st.w	r7[-4],r12
   spi_buffers[spi_index].automatic=0;
8001bc90:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001bc94:	ec f9 00 2c 	ld.w	r9,r6[44]
8001bc98:	f0 08 10 54 	mul	r8,r8,84
8001bc9c:	f2 08 00 08 	add	r8,r9,r8
8001bca0:	f0 c9 ff b8 	sub	r9,r8,-72
8001bca4:	30 08       	mov	r8,0
8001bca6:	b2 b8       	st.b	r9[0x3],r8
}
8001bca8:	2f fd       	sub	sp,-4
8001bcaa:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001bcae:	00 00       	add	r0,r0
8001bcb0:	80 01       	ld.sh	r1,r0[0x0]
8001bcb2:	bb 0e       	ld.d	lr,sp

8001bcb4 <resumeSPI>:

/** resumes automatic sending
 */
void resumeSPI(int spi_index){
8001bcb4:	eb cd 40 c0 	pushm	r6-r7,lr
8001bcb8:	1a 97       	mov	r7,sp
8001bcba:	20 1d       	sub	sp,4
8001bcbc:	48 c6       	lddpc	r6,8001bcec <resumeSPI+0x38>
8001bcbe:	1e 26       	rsub	r6,pc
8001bcc0:	ef 4c ff fc 	st.w	r7[-4],r12
  spi_buffers[spi_index].automatic=1;
8001bcc4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001bcc8:	ec f9 00 2c 	ld.w	r9,r6[44]
8001bccc:	f0 08 10 54 	mul	r8,r8,84
8001bcd0:	f2 08 00 08 	add	r8,r9,r8
8001bcd4:	f0 c9 ff b8 	sub	r9,r8,-72
8001bcd8:	30 18       	mov	r8,1
8001bcda:	b2 b8       	st.b	r9[0x3],r8
  startSPI(spi_index);
8001bcdc:	ee fc ff fc 	ld.w	r12,r7[-4]
8001bce0:	f0 16 00 e3 	mcall	r6[908]
}
8001bce4:	2f fd       	sub	sp,-4
8001bce6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001bcea:	00 00       	add	r0,r0
8001bcec:	80 01       	ld.sh	r1,r0[0x0]
8001bcee:	bb 42       	asr	r2,0x1a

8001bcf0 <activateReceiveSPI>:

void activateReceiveSPI(int spi_index){
8001bcf0:	eb cd 40 c0 	pushm	r6-r7,lr
8001bcf4:	1a 97       	mov	r7,sp
8001bcf6:	20 1d       	sub	sp,4
8001bcf8:	48 a6       	lddpc	r6,8001bd20 <activateReceiveSPI+0x30>
8001bcfa:	1e 26       	rsub	r6,pc
8001bcfc:	ef 4c ff fc 	st.w	r7[-4],r12

  spi_buffers[spi_index].spiReceiverOn=1;
8001bd00:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001bd04:	ec f9 00 2c 	ld.w	r9,r6[44]
8001bd08:	f0 08 10 54 	mul	r8,r8,84
8001bd0c:	f2 08 00 08 	add	r8,r9,r8
8001bd10:	f0 c9 ff b8 	sub	r9,r8,-72
8001bd14:	30 18       	mov	r8,1
8001bd16:	b2 88       	st.b	r9[0x0],r8
}
8001bd18:	2f fd       	sub	sp,-4
8001bd1a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001bd1e:	00 00       	add	r0,r0
8001bd20:	80 01       	ld.sh	r1,r0[0x0]
8001bd22:	bb 7e       	lsl	lr,0x1b

8001bd24 <deactivateReceiveSPI>:

void deactivateReceiveSPI(int spi_index){
8001bd24:	eb cd 40 c0 	pushm	r6-r7,lr
8001bd28:	1a 97       	mov	r7,sp
8001bd2a:	20 1d       	sub	sp,4
8001bd2c:	48 a6       	lddpc	r6,8001bd54 <deactivateReceiveSPI+0x30>
8001bd2e:	1e 26       	rsub	r6,pc
8001bd30:	ef 4c ff fc 	st.w	r7[-4],r12
  spi_buffers[spi_index].spiReceiverOn=0;
8001bd34:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001bd38:	ec f9 00 2c 	ld.w	r9,r6[44]
8001bd3c:	f0 08 10 54 	mul	r8,r8,84
8001bd40:	f2 08 00 08 	add	r8,r9,r8
8001bd44:	f0 c9 ff b8 	sub	r9,r8,-72
8001bd48:	30 08       	mov	r8,0
8001bd4a:	b2 88       	st.b	r9[0x0],r8
}
8001bd4c:	2f fd       	sub	sp,-4
8001bd4e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001bd52:	00 00       	add	r0,r0
8001bd54:	80 01       	ld.sh	r1,r0[0x0]
8001bd56:	bb b2       	sbr	r2,0x1b

8001bd58 <getTraffic>:
uint8_t getTraffic(int spi_index) {return spi_buffers[spi_index].traffic;}
8001bd58:	eb cd 40 c0 	pushm	r6-r7,lr
8001bd5c:	1a 97       	mov	r7,sp
8001bd5e:	20 1d       	sub	sp,4
8001bd60:	48 a6       	lddpc	r6,8001bd88 <getTraffic+0x30>
8001bd62:	1e 26       	rsub	r6,pc
8001bd64:	ef 4c ff fc 	st.w	r7[-4],r12
8001bd68:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001bd6c:	ec f9 00 2c 	ld.w	r9,r6[44]
8001bd70:	f0 08 10 54 	mul	r8,r8,84
8001bd74:	f2 08 00 08 	add	r8,r9,r8
8001bd78:	2b 88       	sub	r8,-72
8001bd7a:	11 98       	ld.ub	r8,r8[0x1]
8001bd7c:	5c 58       	castu.b	r8
8001bd7e:	10 9c       	mov	r12,r8
8001bd80:	2f fd       	sub	sp,-4
8001bd82:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001bd86:	00 00       	add	r0,r0
8001bd88:	80 01       	ld.sh	r1,r0[0x0]
8001bd8a:	bb e6       	*unknown*

8001bd8c <readSPI>:


/** reads one byte from the incoming SPI buffer
 */
uint8_t readSPI(int spi_index){
8001bd8c:	eb cd 40 c0 	pushm	r6-r7,lr
8001bd90:	1a 97       	mov	r7,sp
8001bd92:	20 2d       	sub	sp,8
8001bd94:	4a b6       	lddpc	r6,8001be40 <readSPI+0xb4>
8001bd96:	1e 26       	rsub	r6,pc
8001bd98:	ef 4c ff f8 	st.w	r7[-8],r12
  uint8_t byte;
  // if buffer empty, wait for incoming data
  while (spi_buffers[spi_index].SPIinBufferHead==spi_buffers[spi_index].SPIinBufferTail);
8001bd9c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001bda0:	ec f9 00 2c 	ld.w	r9,r6[44]
8001bda4:	f0 08 10 54 	mul	r8,r8,84
8001bda8:	f2 08 00 08 	add	r8,r9,r8
8001bdac:	2b c8       	sub	r8,-68
8001bdae:	11 88       	ld.ub	r8,r8[0x0]
8001bdb0:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8001bdb4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001bdb8:	ec fa 00 2c 	ld.w	r10,r6[44]
8001bdbc:	f0 08 10 54 	mul	r8,r8,84
8001bdc0:	f4 08 00 08 	add	r8,r10,r8
8001bdc4:	2b c8       	sub	r8,-68
8001bdc6:	11 98       	ld.ub	r8,r8[0x1]
8001bdc8:	5c 58       	castu.b	r8
8001bdca:	f0 09 18 00 	cp.b	r9,r8
8001bdce:	ce 70       	breq	8001bd9c <readSPI+0x10>
  byte=spi_buffers[spi_index].SPIInBuffer[spi_buffers[spi_index].SPIinBufferTail];
8001bdd0:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001bdd4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001bdd8:	ec fa 00 2c 	ld.w	r10,r6[44]
8001bddc:	f0 08 10 54 	mul	r8,r8,84
8001bde0:	f4 08 00 08 	add	r8,r10,r8
8001bde4:	2b c8       	sub	r8,-68
8001bde6:	11 98       	ld.ub	r8,r8[0x1]
8001bde8:	5c 58       	castu.b	r8
8001bdea:	ec fa 00 2c 	ld.w	r10,r6[44]
8001bdee:	f2 09 10 54 	mul	r9,r9,84
8001bdf2:	f4 09 00 09 	add	r9,r10,r9
8001bdf6:	f2 08 00 08 	add	r8,r9,r8
8001bdfa:	2d c8       	sub	r8,-36
8001bdfc:	11 88       	ld.ub	r8,r8[0x0]
8001bdfe:	ef 68 ff ff 	st.b	r7[-1],r8
  spi_buffers[spi_index].SPIinBufferTail=  (spi_buffers[spi_index].SPIinBufferTail+1)&SPI_BUFFER_MASK;
8001be02:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001be06:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001be0a:	ec fa 00 2c 	ld.w	r10,r6[44]
8001be0e:	f0 08 10 54 	mul	r8,r8,84
8001be12:	f4 08 00 08 	add	r8,r10,r8
8001be16:	2b c8       	sub	r8,-68
8001be18:	11 98       	ld.ub	r8,r8[0x1]
8001be1a:	5c 58       	castu.b	r8
8001be1c:	2f f8       	sub	r8,-1
8001be1e:	5c 58       	castu.b	r8
8001be20:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8001be24:	ec fa 00 2c 	ld.w	r10,r6[44]
8001be28:	f2 09 10 54 	mul	r9,r9,84
8001be2c:	f4 09 00 09 	add	r9,r10,r9
8001be30:	2b c9       	sub	r9,-68
8001be32:	b2 98       	st.b	r9[0x1],r8
  return byte;
8001be34:	ef 38 ff ff 	ld.ub	r8,r7[-1]

}
8001be38:	10 9c       	mov	r12,r8
8001be3a:	2f ed       	sub	sp,-8
8001be3c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001be40:	80 01       	ld.sh	r1,r0[0x0]
8001be42:	bc 1a       	st.h	lr[0x2],r10

8001be44 <clearSPIReadBuffer>:

void clearSPIReadBuffer(int spi_index){
8001be44:	eb cd 40 c0 	pushm	r6-r7,lr
8001be48:	1a 97       	mov	r7,sp
8001be4a:	20 1d       	sub	sp,4
8001be4c:	48 e6       	lddpc	r6,8001be84 <clearSPIReadBuffer+0x40>
8001be4e:	1e 26       	rsub	r6,pc
8001be50:	ef 4c ff fc 	st.w	r7[-4],r12
  spi_buffers[spi_index].SPIinBufferTail=spi_buffers[spi_index].SPIinBufferHead;
8001be54:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001be58:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001be5c:	ec fa 00 2c 	ld.w	r10,r6[44]
8001be60:	f0 08 10 54 	mul	r8,r8,84
8001be64:	f4 08 00 08 	add	r8,r10,r8
8001be68:	2b c8       	sub	r8,-68
8001be6a:	11 88       	ld.ub	r8,r8[0x0]
8001be6c:	5c 58       	castu.b	r8
8001be6e:	ec fa 00 2c 	ld.w	r10,r6[44]
8001be72:	f2 09 10 54 	mul	r9,r9,84
8001be76:	f4 09 00 09 	add	r9,r10,r9
8001be7a:	2b c9       	sub	r9,-68
8001be7c:	b2 98       	st.b	r9[0x1],r8
}
8001be7e:	2f fd       	sub	sp,-4
8001be80:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001be84:	80 01       	ld.sh	r1,r0[0x0]
8001be86:	bc d2       	st.b	lr[0x5],r2

8001be88 <writeSPI>:

/** writes one byte to the outgoing SPI buffer
 *  if buffer is full, this method blocks
 *  if sending is paused and buffer runs full, sending is automatically resumed!!
 */
void writeSPI(int spi_index, uint8_t value){
8001be88:	eb cd 40 c0 	pushm	r6-r7,lr
8001be8c:	1a 97       	mov	r7,sp
8001be8e:	20 3d       	sub	sp,12
8001be90:	4a b6       	lddpc	r6,8001bf3c <writeSPI+0xb4>
8001be92:	1e 26       	rsub	r6,pc
8001be94:	ef 4c ff f8 	st.w	r7[-8],r12
8001be98:	16 98       	mov	r8,r11
8001be9a:	ef 68 ff f4 	st.b	r7[-12],r8
  uint8_t newIndex;

  newIndex=(spi_buffers[spi_index].SPIoutBufferHead+1)&SPI_BUFFER_MASK;
8001be9e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001bea2:	ec f9 00 2c 	ld.w	r9,r6[44]
8001bea6:	f0 08 10 54 	mul	r8,r8,84
8001beaa:	f2 08 00 08 	add	r8,r9,r8
8001beae:	2b c8       	sub	r8,-68
8001beb0:	11 a8       	ld.ub	r8,r8[0x2]
8001beb2:	5c 58       	castu.b	r8
8001beb4:	2f f8       	sub	r8,-1
8001beb6:	5c 58       	castu.b	r8
8001beb8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8001bebc:	ef 68 ff ff 	st.b	r7[-1],r8
  // check if buffer is already full and wait
  //while (newIndex==spi_buffers[spi_index].SPIoutBufferTail) 
  //{
    //if (spi_buffers[spi_index].automatic==0) resumeSPI(spi_index);
  //}
  spi_buffers[spi_index].SPIOutBuffer[(spi_buffers[spi_index].SPIoutBufferHead)]=value;
8001bec0:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001bec4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001bec8:	ec fa 00 2c 	ld.w	r10,r6[44]
8001becc:	f0 08 10 54 	mul	r8,r8,84
8001bed0:	f4 08 00 08 	add	r8,r10,r8
8001bed4:	2b c8       	sub	r8,-68
8001bed6:	11 a8       	ld.ub	r8,r8[0x2]
8001bed8:	5c 58       	castu.b	r8
8001beda:	ec fa 00 2c 	ld.w	r10,r6[44]
8001bede:	f2 09 10 54 	mul	r9,r9,84
8001bee2:	f4 09 00 09 	add	r9,r10,r9
8001bee6:	f2 08 00 08 	add	r8,r9,r8
8001beea:	f0 c9 ff fc 	sub	r9,r8,-4
8001beee:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8001bef2:	b2 88       	st.b	r9[0x0],r8
  spi_buffers[spi_index].SPIoutBufferHead = newIndex;
8001bef4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001bef8:	ec f9 00 2c 	ld.w	r9,r6[44]
8001befc:	f0 08 10 54 	mul	r8,r8,84
8001bf00:	f2 08 00 08 	add	r8,r9,r8
8001bf04:	f0 c9 ff bc 	sub	r9,r8,-68
8001bf08:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8001bf0c:	b2 a8       	st.b	r9[0x2],r8


  if (spi_buffers[spi_index].automatic==1) startSPI(spi_index);
8001bf0e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001bf12:	ec f9 00 2c 	ld.w	r9,r6[44]
8001bf16:	f0 08 10 54 	mul	r8,r8,84
8001bf1a:	f2 08 00 08 	add	r8,r9,r8
8001bf1e:	2b 88       	sub	r8,-72
8001bf20:	11 b8       	ld.ub	r8,r8[0x3]
8001bf22:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8001bf26:	30 18       	mov	r8,1
8001bf28:	f0 09 18 00 	cp.b	r9,r8
8001bf2c:	c0 51       	brne	8001bf36 <writeSPI+0xae>
8001bf2e:	ee fc ff f8 	ld.w	r12,r7[-8]
8001bf32:	f0 16 00 e3 	mcall	r6[908]
}
8001bf36:	2f dd       	sub	sp,-12
8001bf38:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001bf3c:	80 01       	ld.sh	r1,r0[0x0]
8001bf3e:	bd 16       	ld.d	r6,--lr

8001bf40 <SPItransmit>:

void SPItransmit(int spi_index) {
8001bf40:	eb cd 40 c0 	pushm	r6-r7,lr
8001bf44:	1a 97       	mov	r7,sp
8001bf46:	20 1d       	sub	sp,4
8001bf48:	4d 66       	lddpc	r6,8001c0a0 <SPItransmit+0x160>
8001bf4a:	1e 26       	rsub	r6,pc
8001bf4c:	ef 4c ff fc 	st.w	r7[-4],r12
 if (spi_buffers[spi_index].SPIoutBufferHead!=spi_buffers[spi_index].SPIoutBufferTail) 
8001bf50:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001bf54:	ec f9 00 2c 	ld.w	r9,r6[44]
8001bf58:	f0 08 10 54 	mul	r8,r8,84
8001bf5c:	f2 08 00 08 	add	r8,r9,r8
8001bf60:	2b c8       	sub	r8,-68
8001bf62:	11 a8       	ld.ub	r8,r8[0x2]
8001bf64:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8001bf68:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001bf6c:	ec fa 00 2c 	ld.w	r10,r6[44]
8001bf70:	f0 08 10 54 	mul	r8,r8,84
8001bf74:	f4 08 00 08 	add	r8,r10,r8
8001bf78:	2b c8       	sub	r8,-68
8001bf7a:	11 b8       	ld.ub	r8,r8[0x3]
8001bf7c:	5c 58       	castu.b	r8
8001bf7e:	f0 09 18 00 	cp.b	r9,r8
8001bf82:	c4 90       	breq	8001c014 <SPItransmit+0xd4>
 {
    // read data from buffer and copy it to SPI unit
	spi_buffers[spi_index].spi->tdr = spi_buffers[spi_index].SPIOutBuffer[spi_buffers[spi_index].SPIoutBufferTail];
8001bf84:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001bf88:	ec f9 00 2c 	ld.w	r9,r6[44]
8001bf8c:	f0 08 10 54 	mul	r8,r8,84
8001bf90:	f2 08 00 08 	add	r8,r9,r8
8001bf94:	70 09       	ld.w	r9,r8[0x0]
8001bf96:	ee fa ff fc 	ld.w	r10,r7[-4]
8001bf9a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001bf9e:	ec fb 00 2c 	ld.w	r11,r6[44]
8001bfa2:	f0 08 10 54 	mul	r8,r8,84
8001bfa6:	f6 08 00 08 	add	r8,r11,r8
8001bfaa:	2b c8       	sub	r8,-68
8001bfac:	11 b8       	ld.ub	r8,r8[0x3]
8001bfae:	5c 58       	castu.b	r8
8001bfb0:	ec fb 00 2c 	ld.w	r11,r6[44]
8001bfb4:	f4 0a 10 54 	mul	r10,r10,84
8001bfb8:	f6 0a 00 0a 	add	r10,r11,r10
8001bfbc:	f4 08 00 08 	add	r8,r10,r8
8001bfc0:	2f c8       	sub	r8,-4
8001bfc2:	11 88       	ld.ub	r8,r8[0x0]
8001bfc4:	5c 58       	castu.b	r8
8001bfc6:	93 38       	st.w	r9[0xc],r8
    spi_buffers[spi_index].transmission_in_progress=1;    
8001bfc8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001bfcc:	ec f9 00 2c 	ld.w	r9,r6[44]
8001bfd0:	f0 08 10 54 	mul	r8,r8,84
8001bfd4:	f2 08 00 08 	add	r8,r9,r8
8001bfd8:	f0 c9 ff b8 	sub	r9,r8,-72
8001bfdc:	30 18       	mov	r8,1
8001bfde:	b2 a8       	st.b	r9[0x2],r8
    // update buffer index
    spi_buffers[spi_index].SPIoutBufferTail=  (spi_buffers[spi_index].SPIoutBufferTail+1)&SPI_BUFFER_MASK;
8001bfe0:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001bfe4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001bfe8:	ec fa 00 2c 	ld.w	r10,r6[44]
8001bfec:	f0 08 10 54 	mul	r8,r8,84
8001bff0:	f4 08 00 08 	add	r8,r10,r8
8001bff4:	2b c8       	sub	r8,-68
8001bff6:	11 b8       	ld.ub	r8,r8[0x3]
8001bff8:	5c 58       	castu.b	r8
8001bffa:	2f f8       	sub	r8,-1
8001bffc:	5c 58       	castu.b	r8
8001bffe:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8001c002:	ec fa 00 2c 	ld.w	r10,r6[44]
8001c006:	f2 09 10 54 	mul	r9,r9,84
8001c00a:	f4 09 00 09 	add	r9,r10,r9
8001c00e:	2b c9       	sub	r9,-68
8001c010:	b2 b8       	st.b	r9[0x3],r8
8001c012:	c4 38       	rjmp	8001c098 <SPItransmit+0x158>
	//spi_enable(spi_buffers[spi_index].spi);

  } else {
    spi_buffers[spi_index].SPIoutBufferTail=spi_buffers[spi_index].SPIoutBufferHead;
8001c014:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001c018:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001c01c:	ec fa 00 2c 	ld.w	r10,r6[44]
8001c020:	f0 08 10 54 	mul	r8,r8,84
8001c024:	f4 08 00 08 	add	r8,r10,r8
8001c028:	2b c8       	sub	r8,-68
8001c02a:	11 a8       	ld.ub	r8,r8[0x2]
8001c02c:	5c 58       	castu.b	r8
8001c02e:	ec fa 00 2c 	ld.w	r10,r6[44]
8001c032:	f2 09 10 54 	mul	r9,r9,84
8001c036:	f4 09 00 09 	add	r9,r10,r9
8001c03a:	2b c9       	sub	r9,-68
8001c03c:	b2 b8       	st.b	r9[0x3],r8
    //PORTB |= _BV(SPI_CS);	// pull chip select high to end transmission
	spi_deselect_device(spi_buffers[spi_index].spi, &spi_buffers[spi_index].adc_spi);
8001c03e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001c042:	f0 08 10 54 	mul	r8,r8,84
8001c046:	f0 c9 ff b0 	sub	r9,r8,-80
8001c04a:	ec f8 00 2c 	ld.w	r8,r6[44]
8001c04e:	10 09       	add	r9,r8
8001c050:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001c054:	ec fa 00 2c 	ld.w	r10,r6[44]
8001c058:	f0 08 10 54 	mul	r8,r8,84
8001c05c:	f4 08 00 08 	add	r8,r10,r8
8001c060:	70 08       	ld.w	r8,r8[0x0]
8001c062:	12 9b       	mov	r11,r9
8001c064:	10 9c       	mov	r12,r8
8001c066:	fe b0 fb db 	rcall	8001b81c <spi_deselect_device>
    spi_buffers[spi_index].transmission_in_progress=0;
8001c06a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001c06e:	ec f9 00 2c 	ld.w	r9,r6[44]
8001c072:	f0 08 10 54 	mul	r8,r8,84
8001c076:	f2 08 00 08 	add	r8,r9,r8
8001c07a:	f0 c9 ff b8 	sub	r9,r8,-72
8001c07e:	30 08       	mov	r8,0
8001c080:	b2 a8       	st.b	r9[0x2],r8
	spi_buffers[spi_index].spi->idr =AVR32_SPI_IER_RDRF_MASK | AVR32_SPI_IER_TDRE_MASK;
8001c082:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001c086:	ec f9 00 2c 	ld.w	r9,r6[44]
8001c08a:	f0 08 10 54 	mul	r8,r8,84
8001c08e:	f2 08 00 08 	add	r8,r9,r8
8001c092:	70 08       	ld.w	r8,r8[0x0]
8001c094:	30 39       	mov	r9,3
8001c096:	91 69       	st.w	r8[0x18],r9
    //SPCR&=~_BV(SPIE);
 }
}
8001c098:	2f fd       	sub	sp,-4
8001c09a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001c09e:	00 00       	add	r0,r0
8001c0a0:	80 01       	ld.sh	r1,r0[0x0]
8001c0a2:	bd ce       	cbr	lr,0x1c

8001c0a4 <startSPI>:

/** initiates SPI transmission by sending first byte
*/
void startSPI(int spi_index) {
8001c0a4:	eb cd 40 c0 	pushm	r6-r7,lr
8001c0a8:	1a 97       	mov	r7,sp
8001c0aa:	20 1d       	sub	sp,4
8001c0ac:	4a f6       	lddpc	r6,8001c168 <startSPI+0xc4>
8001c0ae:	1e 26       	rsub	r6,pc
8001c0b0:	ef 4c ff fc 	st.w	r7[-4],r12
  // check flag if transmission is in progress
  if ((spi_buffers[spi_index].transmission_in_progress==0)
8001c0b4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001c0b8:	ec f9 00 2c 	ld.w	r9,r6[44]
8001c0bc:	f0 08 10 54 	mul	r8,r8,84
8001c0c0:	f2 08 00 08 	add	r8,r9,r8
8001c0c4:	2b 88       	sub	r8,-72
8001c0c6:	11 a8       	ld.ub	r8,r8[0x2]
8001c0c8:	5c 58       	castu.b	r8
8001c0ca:	c4 c1       	brne	8001c162 <startSPI+0xbe>
	&&(spi_buffers[spi_index].SPIoutBufferHead!=spi_buffers[spi_index].SPIoutBufferTail)) {
8001c0cc:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001c0d0:	ec f9 00 2c 	ld.w	r9,r6[44]
8001c0d4:	f0 08 10 54 	mul	r8,r8,84
8001c0d8:	f2 08 00 08 	add	r8,r9,r8
8001c0dc:	2b c8       	sub	r8,-68
8001c0de:	11 a8       	ld.ub	r8,r8[0x2]
8001c0e0:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8001c0e4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001c0e8:	ec fa 00 2c 	ld.w	r10,r6[44]
8001c0ec:	f0 08 10 54 	mul	r8,r8,84
8001c0f0:	f4 08 00 08 	add	r8,r10,r8
8001c0f4:	2b c8       	sub	r8,-68
8001c0f6:	11 b8       	ld.ub	r8,r8[0x3]
8001c0f8:	5c 58       	castu.b	r8

/** initiates SPI transmission by sending first byte
*/
void startSPI(int spi_index) {
  // check flag if transmission is in progress
  if ((spi_buffers[spi_index].transmission_in_progress==0)
8001c0fa:	f0 09 18 00 	cp.b	r9,r8
8001c0fe:	c3 20       	breq	8001c162 <startSPI+0xbe>
	&&(spi_buffers[spi_index].SPIoutBufferHead!=spi_buffers[spi_index].SPIoutBufferTail)) {
    // if not, initiate transmission by sending first byte
    //!!!!PORTB &= ~_BV(SPI_CS);	// pull chip select low to start transmission
	spi_select_device(spi_buffers[spi_index].spi, &spi_buffers[spi_index].adc_spi);
8001c100:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001c104:	f0 08 10 54 	mul	r8,r8,84
8001c108:	f0 c9 ff b0 	sub	r9,r8,-80
8001c10c:	ec f8 00 2c 	ld.w	r8,r6[44]
8001c110:	10 09       	add	r9,r8
8001c112:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001c116:	ec fa 00 2c 	ld.w	r10,r6[44]
8001c11a:	f0 08 10 54 	mul	r8,r8,84
8001c11e:	f4 08 00 08 	add	r8,r10,r8
8001c122:	70 08       	ld.w	r8,r8[0x0]
8001c124:	12 9b       	mov	r11,r9
8001c126:	10 9c       	mov	r12,r8
8001c128:	fe b0 fb 62 	rcall	8001b7ec <spi_select_device>

    spi_buffers[spi_index].transmission_in_progress=1;
8001c12c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001c130:	ec f9 00 2c 	ld.w	r9,r6[44]
8001c134:	f0 08 10 54 	mul	r8,r8,84
8001c138:	f2 08 00 08 	add	r8,r9,r8
8001c13c:	f0 c9 ff b8 	sub	r9,r8,-72
8001c140:	30 18       	mov	r8,1
8001c142:	b2 a8       	st.b	r9[0x2],r8
    // activate interrupt to initiate transmission
    //!!!!SPCR|=_BV(SPIE);
 	spi_buffers[spi_index].spi->ier = AVR32_SPI_IER_RDRF_MASK | AVR32_SPI_IER_TDRE_MASK;
8001c144:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001c148:	ec f9 00 2c 	ld.w	r9,r6[44]
8001c14c:	f0 08 10 54 	mul	r8,r8,84
8001c150:	f2 08 00 08 	add	r8,r9,r8
8001c154:	70 08       	ld.w	r8,r8[0x0]
8001c156:	30 39       	mov	r9,3
8001c158:	91 59       	st.w	r8[0x14],r9

    SPItransmit(spi_index);
8001c15a:	ee fc ff fc 	ld.w	r12,r7[-4]
8001c15e:	f0 16 01 24 	mcall	r6[1168]
  }
}
8001c162:	2f fd       	sub	sp,-4
8001c164:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001c168:	80 01       	ld.sh	r1,r0[0x0]
8001c16a:	bf 32       	mul	r2,pc

8001c16c <SPITransferFinished>:

int8_t SPITransferFinished(int spi_index) {
8001c16c:	eb cd 40 c0 	pushm	r6-r7,lr
8001c170:	1a 97       	mov	r7,sp
8001c172:	20 1d       	sub	sp,4
8001c174:	49 16       	lddpc	r6,8001c1b8 <SPITransferFinished+0x4c>
8001c176:	1e 26       	rsub	r6,pc
8001c178:	ef 4c ff fc 	st.w	r7[-4],r12
	return (spi_buffers[spi_index].SPIoutBufferHead==spi_buffers[spi_index].SPIoutBufferTail);
8001c17c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001c180:	ec f9 00 2c 	ld.w	r9,r6[44]
8001c184:	f0 08 10 54 	mul	r8,r8,84
8001c188:	f2 08 00 08 	add	r8,r9,r8
8001c18c:	2b c8       	sub	r8,-68
8001c18e:	11 a8       	ld.ub	r8,r8[0x2]
8001c190:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8001c194:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001c198:	ec fa 00 2c 	ld.w	r10,r6[44]
8001c19c:	f0 08 10 54 	mul	r8,r8,84
8001c1a0:	f4 08 00 08 	add	r8,r10,r8
8001c1a4:	2b c8       	sub	r8,-68
8001c1a6:	11 b8       	ld.ub	r8,r8[0x3]
8001c1a8:	5c 58       	castu.b	r8
8001c1aa:	f0 09 18 00 	cp.b	r9,r8
8001c1ae:	5f 08       	sreq	r8
}
8001c1b0:	10 9c       	mov	r12,r8
8001c1b2:	2f fd       	sub	sp,-4
8001c1b4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001c1b8:	80 01       	ld.sh	r1,r0[0x0]
8001c1ba:	bf fa       	*unknown*

8001c1bc <SPIFlushBuffer>:

/** waits until whole buffer is written to SPI bus
 *  automatically resumes sending if SPI interface was paused */
void SPIFlushBuffer(int spi_index) {
8001c1bc:	eb cd 40 c0 	pushm	r6-r7,lr
8001c1c0:	1a 97       	mov	r7,sp
8001c1c2:	20 1d       	sub	sp,4
8001c1c4:	49 36       	lddpc	r6,8001c210 <SPIFlushBuffer+0x54>
8001c1c6:	1e 26       	rsub	r6,pc
8001c1c8:	ef 4c ff fc 	st.w	r7[-4],r12
 	resumeSPI(spi_index);
8001c1cc:	ee fc ff fc 	ld.w	r12,r7[-4]
8001c1d0:	f0 16 01 e5 	mcall	r6[1940]
	while (spi_buffers[spi_index].SPIoutBufferHead!=spi_buffers[spi_index].SPIoutBufferTail);
8001c1d4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001c1d8:	ec f9 00 2c 	ld.w	r9,r6[44]
8001c1dc:	f0 08 10 54 	mul	r8,r8,84
8001c1e0:	f2 08 00 08 	add	r8,r9,r8
8001c1e4:	2b c8       	sub	r8,-68
8001c1e6:	11 a8       	ld.ub	r8,r8[0x2]
8001c1e8:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8001c1ec:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001c1f0:	ec fa 00 2c 	ld.w	r10,r6[44]
8001c1f4:	f0 08 10 54 	mul	r8,r8,84
8001c1f8:	f4 08 00 08 	add	r8,r10,r8
8001c1fc:	2b c8       	sub	r8,-68
8001c1fe:	11 b8       	ld.ub	r8,r8[0x3]
8001c200:	5c 58       	castu.b	r8
8001c202:	f0 09 18 00 	cp.b	r9,r8
8001c206:	ce 71       	brne	8001c1d4 <SPIFlushBuffer+0x18>
}
8001c208:	2f fd       	sub	sp,-4
8001c20a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001c20e:	00 00       	add	r0,r0
8001c210:	80 01       	ld.sh	r1,r0[0x0]
8001c212:	c0 4a       	rjmp	8001be1a <readSPI+0x8e>

8001c214 <SPIBytesAvailable>:

/** returns the number of bytes in the incoming buffer
 */
uint8_t SPIBytesAvailable(int spi_index){
8001c214:	eb cd 40 c0 	pushm	r6-r7,lr
8001c218:	1a 97       	mov	r7,sp
8001c21a:	20 1d       	sub	sp,4
8001c21c:	49 36       	lddpc	r6,8001c268 <SPIBytesAvailable+0x54>
8001c21e:	1e 26       	rsub	r6,pc
8001c220:	ef 4c ff fc 	st.w	r7[-4],r12
  return (SPI_BUFFER_SIZE + spi_buffers[spi_index].SPIinBufferHead - spi_buffers[spi_index].SPIinBufferTail)&SPI_BUFFER_MASK;
8001c224:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001c228:	ec f9 00 2c 	ld.w	r9,r6[44]
8001c22c:	f0 08 10 54 	mul	r8,r8,84
8001c230:	f2 08 00 08 	add	r8,r9,r8
8001c234:	2b c8       	sub	r8,-68
8001c236:	11 88       	ld.ub	r8,r8[0x0]
8001c238:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8001c23c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001c240:	ec fa 00 2c 	ld.w	r10,r6[44]
8001c244:	f0 08 10 54 	mul	r8,r8,84
8001c248:	f4 08 00 08 	add	r8,r10,r8
8001c24c:	2b c8       	sub	r8,-68
8001c24e:	11 98       	ld.ub	r8,r8[0x1]
8001c250:	5c 58       	castu.b	r8
8001c252:	f2 08 01 08 	sub	r8,r9,r8
8001c256:	5c 58       	castu.b	r8
8001c258:	2e 08       	sub	r8,-32
8001c25a:	5c 58       	castu.b	r8
8001c25c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
}
8001c260:	10 9c       	mov	r12,r8
8001c262:	2f fd       	sub	sp,-4
8001c264:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001c268:	80 01       	ld.sh	r1,r0[0x0]
8001c26a:	c0 a2       	brcc	8001c27e <spi_handler+0x12>

8001c26c <spi_handler>:





void spi_handler(int spi_index) {
8001c26c:	eb cd 40 c0 	pushm	r6-r7,lr
8001c270:	1a 97       	mov	r7,sp
8001c272:	20 2d       	sub	sp,8
8001c274:	4d e6       	lddpc	r6,8001c3ec <spi_handler+0x180>
8001c276:	1e 26       	rsub	r6,pc
8001c278:	ef 4c ff f8 	st.w	r7[-8],r12
  uint8_t inData;
  uint8_t tmp;
  inData=spi_buffers[spi_index].spi->rdr;
8001c27c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001c280:	ec f9 00 2c 	ld.w	r9,r6[44]
8001c284:	f0 08 10 54 	mul	r8,r8,84
8001c288:	f2 08 00 08 	add	r8,r9,r8
8001c28c:	70 08       	ld.w	r8,r8[0x0]
8001c28e:	70 28       	ld.w	r8,r8[0x8]
8001c290:	ef 68 ff fe 	st.b	r7[-2],r8

  if ((spi_buffers[spi_index].spi->sr & AVR32_SPI_SR_TDRE_MASK)!=0) {
8001c294:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001c298:	ec f9 00 2c 	ld.w	r9,r6[44]
8001c29c:	f0 08 10 54 	mul	r8,r8,84
8001c2a0:	f2 08 00 08 	add	r8,r9,r8
8001c2a4:	70 08       	ld.w	r8,r8[0x0]
8001c2a6:	70 48       	ld.w	r8,r8[0x10]
8001c2a8:	e2 18 00 02 	andl	r8,0x2,COH
8001c2ac:	c0 50       	breq	8001c2b6 <spi_handler+0x4a>
	// initiate transfer if necessary
	SPItransmit(spi_index);
8001c2ae:	ee fc ff f8 	ld.w	r12,r7[-8]
8001c2b2:	f0 16 01 24 	mcall	r6[1168]
  }	
  // only process received data when receiver is activated
  if ((spi_buffers[spi_index].spiReceiverOn==1)&& ((spi_buffers[spi_index].spi->sr & AVR32_SPI_SR_RDRF_MASK)!=0)) {
8001c2b6:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001c2ba:	ec f9 00 2c 	ld.w	r9,r6[44]
8001c2be:	f0 08 10 54 	mul	r8,r8,84
8001c2c2:	f2 08 00 08 	add	r8,r9,r8
8001c2c6:	2b 88       	sub	r8,-72
8001c2c8:	11 88       	ld.ub	r8,r8[0x0]
8001c2ca:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8001c2ce:	30 18       	mov	r8,1
8001c2d0:	f0 09 18 00 	cp.b	r9,r8
8001c2d4:	e0 81 00 88 	brne	8001c3e4 <spi_handler+0x178>
8001c2d8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001c2dc:	ec f9 00 2c 	ld.w	r9,r6[44]
8001c2e0:	f0 08 10 54 	mul	r8,r8,84
8001c2e4:	f2 08 00 08 	add	r8,r9,r8
8001c2e8:	70 08       	ld.w	r8,r8[0x0]
8001c2ea:	70 48       	ld.w	r8,r8[0x10]
8001c2ec:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8001c2f0:	5c 58       	castu.b	r8
8001c2f2:	c7 90       	breq	8001c3e4 <spi_handler+0x178>
	 // read incoming data from SPI port
	spi_buffers[spi_index].traffic++;
8001c2f4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001c2f8:	ec fa 00 2c 	ld.w	r10,r6[44]
8001c2fc:	f0 09 10 54 	mul	r9,r8,84
8001c300:	f4 09 00 09 	add	r9,r10,r9
8001c304:	2b 89       	sub	r9,-72
8001c306:	13 99       	ld.ub	r9,r9[0x1]
8001c308:	5c 59       	castu.b	r9
8001c30a:	2f f9       	sub	r9,-1
8001c30c:	5c 59       	castu.b	r9
8001c30e:	ec fa 00 2c 	ld.w	r10,r6[44]
8001c312:	f0 08 10 54 	mul	r8,r8,84
8001c316:	f4 08 00 08 	add	r8,r10,r8
8001c31a:	f0 ca ff b8 	sub	r10,r8,-72
8001c31e:	12 98       	mov	r8,r9
8001c320:	b4 98       	st.b	r10[0x1],r8

    tmp=(spi_buffers[spi_index].SPIinBufferHead+1)&SPI_BUFFER_MASK;
8001c322:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001c326:	ec f9 00 2c 	ld.w	r9,r6[44]
8001c32a:	f0 08 10 54 	mul	r8,r8,84
8001c32e:	f2 08 00 08 	add	r8,r9,r8
8001c332:	2b c8       	sub	r8,-68
8001c334:	11 88       	ld.ub	r8,r8[0x0]
8001c336:	5c 58       	castu.b	r8
8001c338:	2f f8       	sub	r8,-1
8001c33a:	5c 58       	castu.b	r8
8001c33c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8001c340:	ef 68 ff ff 	st.b	r7[-1],r8
    
    if (tmp==spi_buffers[spi_index].SPIinBufferTail) {
8001c344:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001c348:	ec f9 00 2c 	ld.w	r9,r6[44]
8001c34c:	f0 08 10 54 	mul	r8,r8,84
8001c350:	f2 08 00 08 	add	r8,r9,r8
8001c354:	2b c8       	sub	r8,-68
8001c356:	11 98       	ld.ub	r8,r8[0x1]
8001c358:	5c 58       	castu.b	r8
8001c35a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8001c35e:	f0 09 18 00 	cp.b	r9,r8
8001c362:	c1 a1       	brne	8001c396 <spi_handler+0x12a>
      //error: receive buffer overflow!!
      // lose old incoming data at the end of the buffer
      spi_buffers[spi_index].SPIinBufferTail=(spi_buffers[spi_index].SPIinBufferTail+1)&SPI_BUFFER_MASK;
8001c364:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001c368:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001c36c:	ec fa 00 2c 	ld.w	r10,r6[44]
8001c370:	f0 08 10 54 	mul	r8,r8,84
8001c374:	f4 08 00 08 	add	r8,r10,r8
8001c378:	2b c8       	sub	r8,-68
8001c37a:	11 98       	ld.ub	r8,r8[0x1]
8001c37c:	5c 58       	castu.b	r8
8001c37e:	2f f8       	sub	r8,-1
8001c380:	5c 58       	castu.b	r8
8001c382:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8001c386:	ec fa 00 2c 	ld.w	r10,r6[44]
8001c38a:	f2 09 10 54 	mul	r9,r9,84
8001c38e:	f4 09 00 09 	add	r9,r10,r9
8001c392:	2b c9       	sub	r9,-68
8001c394:	b2 98       	st.b	r9[0x1],r8
    } 
    // store incoming data in buffer
    spi_buffers[spi_index].SPIInBuffer[spi_buffers[spi_index].SPIinBufferHead] = inData;
8001c396:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001c39a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001c39e:	ec fa 00 2c 	ld.w	r10,r6[44]
8001c3a2:	f0 08 10 54 	mul	r8,r8,84
8001c3a6:	f4 08 00 08 	add	r8,r10,r8
8001c3aa:	2b c8       	sub	r8,-68
8001c3ac:	11 88       	ld.ub	r8,r8[0x0]
8001c3ae:	5c 58       	castu.b	r8
8001c3b0:	ec fa 00 2c 	ld.w	r10,r6[44]
8001c3b4:	f2 09 10 54 	mul	r9,r9,84
8001c3b8:	f4 09 00 09 	add	r9,r10,r9
8001c3bc:	f2 08 00 08 	add	r8,r9,r8
8001c3c0:	f0 c9 ff dc 	sub	r9,r8,-36
8001c3c4:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8001c3c8:	b2 88       	st.b	r9[0x0],r8
    // move head pointer forward
    spi_buffers[spi_index].SPIinBufferHead=tmp;
8001c3ca:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001c3ce:	ec f9 00 2c 	ld.w	r9,r6[44]
8001c3d2:	f0 08 10 54 	mul	r8,r8,84
8001c3d6:	f2 08 00 08 	add	r8,r9,r8
8001c3da:	f0 c9 ff bc 	sub	r9,r8,-68
8001c3de:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8001c3e2:	b2 88       	st.b	r9[0x0],r8
  
  }
    
}
8001c3e4:	2f ed       	sub	sp,-8
8001c3e6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001c3ea:	00 00       	add	r0,r0
8001c3ec:	80 01       	ld.sh	r1,r0[0x0]
8001c3ee:	c0 fa       	rjmp	8001c00c <SPItransmit+0xcc>

8001c3f0 <osc_get_rate>:
/**
 * \todo RC8M may run at either 8 MHz or 1 MHz. Currently, we assume
 * it's always running at 8 MHz.
 */
static inline uint32_t osc_get_rate(uint8_t id)
{
8001c3f0:	eb cd 40 80 	pushm	r7,lr
8001c3f4:	1a 97       	mov	r7,sp
8001c3f6:	20 1d       	sub	sp,4
8001c3f8:	18 98       	mov	r8,r12
8001c3fa:	ef 68 ff fc 	st.b	r7[-4],r8
	switch (id) {
8001c3fe:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8001c402:	58 38       	cp.w	r8,3
8001c404:	c1 20       	breq	8001c428 <osc_get_rate+0x38>
8001c406:	e0 89 00 07 	brgt	8001c414 <osc_get_rate+0x24>
8001c40a:	58 08       	cp.w	r8,0
8001c40c:	c0 90       	breq	8001c41e <osc_get_rate+0x2e>
8001c40e:	58 28       	cp.w	r8,2
8001c410:	c0 f0       	breq	8001c42e <osc_get_rate+0x3e>
8001c412:	c1 b8       	rjmp	8001c448 <osc_get_rate+0x58>
8001c414:	58 48       	cp.w	r8,4
8001c416:	c1 10       	breq	8001c438 <osc_get_rate+0x48>
8001c418:	58 58       	cp.w	r8,5
8001c41a:	c1 40       	breq	8001c442 <osc_get_rate+0x52>
8001c41c:	c1 68       	rjmp	8001c448 <osc_get_rate+0x58>
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return BOARD_OSC0_HZ;
8001c41e:	e0 68 24 00 	mov	r8,9216
8001c422:	ea 18 00 f4 	orh	r8,0xf4
8001c426:	c1 28       	rjmp	8001c44a <osc_get_rate+0x5a>
		return BOARD_OSC1_HZ;
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		return BOARD_OSC32_HZ;
8001c428:	e0 68 80 00 	mov	r8,32768
8001c42c:	c0 f8       	rjmp	8001c44a <osc_get_rate+0x5a>
#endif

	case OSC_ID_RC8M:
		return OSC_RC8M_NOMINAL_HZ;
8001c42e:	e0 68 12 00 	mov	r8,4608
8001c432:	ea 18 00 7a 	orh	r8,0x7a
8001c436:	c0 a8       	rjmp	8001c44a <osc_get_rate+0x5a>

	case OSC_ID_RC120M:
		return OSC_RC120M_NOMINAL_HZ;
8001c438:	e0 68 0e 00 	mov	r8,3584
8001c43c:	ea 18 07 27 	orh	r8,0x727
8001c440:	c0 58       	rjmp	8001c44a <osc_get_rate+0x5a>

	case OSC_ID_RCSYS:
		return OSC_RCSYS_NOMINAL_HZ;
8001c442:	e0 78 c1 38 	mov	r8,115000
8001c446:	c0 28       	rjmp	8001c44a <osc_get_rate+0x5a>

	default:
		/* unhandled_case(id); */
		return 0;
8001c448:	30 08       	mov	r8,0
	}
}
8001c44a:	10 9c       	mov	r12,r8
8001c44c:	2f fd       	sub	sp,-4
8001c44e:	e3 cd 80 80 	ldm	sp++,r7,pc

8001c452 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern bool sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
8001c452:	eb cd 40 c0 	pushm	r6-r7,lr
8001c456:	1a 97       	mov	r7,sp
8001c458:	48 56       	lddpc	r6,8001c46c <sysclk_get_main_hz+0x1a>
8001c45a:	1e 26       	rsub	r6,pc
		return BOARD_OSC1_HZ;
#endif

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLL0:
		return pll_get_default_rate(0);
8001c45c:	30 0c       	mov	r12,0
8001c45e:	cc 9f       	rcall	8001c3f0 <osc_get_rate>
8001c460:	18 98       	mov	r8,r12
8001c462:	a3 68       	lsl	r8,0x2

	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
8001c464:	10 9c       	mov	r12,r8
8001c466:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001c46a:	00 00       	add	r0,r0
8001c46c:	80 01       	ld.sh	r1,r0[0x0]
8001c46e:	c2 de       	rcall	8001c0c8 <startSPI+0x24>

8001c470 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
8001c470:	eb cd 40 c0 	pushm	r6-r7,lr
8001c474:	1a 97       	mov	r7,sp
8001c476:	48 46       	lddpc	r6,8001c484 <sysclk_get_cpu_hz+0x14>
8001c478:	1e 26       	rsub	r6,pc
	return sysclk_get_main_hz() >> CONFIG_SYSCLK_CPU_DIV;
8001c47a:	ce cf       	rcall	8001c452 <sysclk_get_main_hz>
8001c47c:	18 98       	mov	r8,r12
}
8001c47e:	10 9c       	mov	r12,r8
8001c480:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001c484:	80 01       	ld.sh	r1,r0[0x0]
8001c486:	c2 fc       	rcall	8001c4e4 <uart_handler_0+0x5c>

8001c488 <uart_handler_0>:
				usart_opt[UID].uart_device.uart->idr=AVR32_USART_IDR_TXRDY_MASK;\
		}\
	}\
}			

ISR(uart_handler_0, usart_opt[0].uart_device.IRQ, AVR32_INTC_INTLEV_INT1) {\
8001c488:	eb cd 40 c0 	pushm	r6-r7,lr
8001c48c:	1a 97       	mov	r7,sp
8001c48e:	20 2d       	sub	sp,8
8001c490:	4b 26       	lddpc	r6,8001c558 <uart_handler_0+0xd0>
8001c492:	1e 26       	rsub	r6,pc
	uint8_t c1;\
	int csr=usart_opt[0].uart_device.uart->csr;\
8001c494:	ec f8 00 34 	ld.w	r8,r6[52]
8001c498:	70 18       	ld.w	r8,r8[0x4]
8001c49a:	70 58       	ld.w	r8,r8[0x14]
				usart_opt[UID].uart_device.uart->idr=AVR32_USART_IDR_TXRDY_MASK;\
		}\
	}\
}			

ISR(uart_handler_0, usart_opt[0].uart_device.IRQ, AVR32_INTC_INTLEV_INT1) {\
8001c49c:	ef 48 ff fc 	st.w	r7[-4],r8
	uint8_t c1;\
	int csr=usart_opt[0].uart_device.uart->csr;\
	if (csr & AVR32_USART_CSR_RXRDY_MASK) {\
8001c4a0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001c4a4:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8001c4a8:	5c 58       	castu.b	r8
8001c4aa:	c2 70       	breq	8001c4f8 <uart_handler_0+0x70>
		c1=(uint8_t)usart_opt[0].uart_device.uart->rhr;\
8001c4ac:	ec f8 00 34 	ld.w	r8,r6[52]
8001c4b0:	70 18       	ld.w	r8,r8[0x4]
8001c4b2:	70 68       	ld.w	r8,r8[0x18]
8001c4b4:	ef 68 ff fb 	st.b	r7[-5],r8
		if (usart_opt[0].uart_device.receive_stream==NULL) {\
8001c4b8:	ec f8 00 34 	ld.w	r8,r6[52]
8001c4bc:	f0 f8 02 14 	ld.w	r8,r8[532]
8001c4c0:	58 08       	cp.w	r8,0
8001c4c2:	c0 c1       	brne	8001c4da <uart_handler_0+0x52>
			buffer_put(&(usart_opt[0].uart_device.receive_buffer), c1);\
8001c4c4:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8001c4c8:	ec f8 00 34 	ld.w	r8,r6[52]
8001c4cc:	f0 c8 fe f1 	sub	r8,r8,-271
8001c4d0:	12 9b       	mov	r11,r9
8001c4d2:	10 9c       	mov	r12,r8
8001c4d4:	f0 16 00 4f 	mcall	r6[316]
8001c4d8:	c1 08       	rjmp	8001c4f8 <uart_handler_0+0x70>
		} else {\
			usart_opt[0].uart_device.receive_stream->put(usart_opt[0].uart_device.receive_stream->data, c1);\
8001c4da:	ec f8 00 34 	ld.w	r8,r6[52]
8001c4de:	f0 f8 02 14 	ld.w	r8,r8[532]
8001c4e2:	70 18       	ld.w	r8,r8[0x4]
8001c4e4:	ef 3a ff fb 	ld.ub	r10,r7[-5]
8001c4e8:	ec f9 00 34 	ld.w	r9,r6[52]
8001c4ec:	f2 f9 02 14 	ld.w	r9,r9[532]
8001c4f0:	72 59       	ld.w	r9,r9[0x14]
8001c4f2:	14 9b       	mov	r11,r10
8001c4f4:	12 9c       	mov	r12,r9
8001c4f6:	5d 18       	icall	r8
		}\
	}\
	if (csr & AVR32_USART_CSR_TXRDY_MASK) {\
8001c4f8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001c4fc:	e2 18 00 02 	andl	r8,0x2,COH
8001c500:	c2 80       	breq	8001c550 <uart_handler_0+0xc8>
		if (buffer_bytes_available(&(usart_opt[0].uart_device.transmit_buffer))>0) {\
8001c502:	ec f8 00 34 	ld.w	r8,r6[52]
8001c506:	2f 48       	sub	r8,-12
8001c508:	10 9c       	mov	r12,r8
8001c50a:	f0 16 00 2c 	mcall	r6[176]
8001c50e:	18 98       	mov	r8,r12
8001c510:	58 08       	cp.w	r8,0
8001c512:	e0 8a 00 11 	brle	8001c534 <uart_handler_0+0xac>
			c1=buffer_get(&(usart_opt[0].uart_device.transmit_buffer));\
8001c516:	ec f8 00 34 	ld.w	r8,r6[52]
8001c51a:	2f 48       	sub	r8,-12
8001c51c:	10 9c       	mov	r12,r8
8001c51e:	f0 16 00 42 	mcall	r6[264]
8001c522:	18 98       	mov	r8,r12
8001c524:	ef 68 ff fb 	st.b	r7[-5],r8
			usart_opt[0].uart_device.uart->thr=c1;\
8001c528:	ec f8 00 34 	ld.w	r8,r6[52]
8001c52c:	70 18       	ld.w	r8,r8[0x4]
8001c52e:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8001c532:	91 79       	st.w	r8[0x1c],r9
		}\
		if (buffer_bytes_available(&(usart_opt[0].uart_device.transmit_buffer))==0) {\
8001c534:	ec f8 00 34 	ld.w	r8,r6[52]
8001c538:	2f 48       	sub	r8,-12
8001c53a:	10 9c       	mov	r12,r8
8001c53c:	f0 16 00 2c 	mcall	r6[176]
8001c540:	18 98       	mov	r8,r12
8001c542:	58 08       	cp.w	r8,0
8001c544:	c0 61       	brne	8001c550 <uart_handler_0+0xc8>
				usart_opt[0].uart_device.uart->idr=AVR32_USART_IDR_TXRDY_MASK;\
8001c546:	ec f8 00 34 	ld.w	r8,r6[52]
8001c54a:	70 18       	ld.w	r8,r8[0x4]
8001c54c:	30 29       	mov	r9,2
8001c54e:	91 39       	st.w	r8[0xc],r9
				usart_opt[UID].uart_device.uart->idr=AVR32_USART_IDR_TXRDY_MASK;\
		}\
	}\
}			

ISR(uart_handler_0, usart_opt[0].uart_device.IRQ, AVR32_INTC_INTLEV_INT1) {\
8001c550:	2f ed       	sub	sp,-8
8001c552:	e3 cd 40 c0 	ldm	sp++,r6-r7,lr
8001c556:	d6 03       	rete
8001c558:	80 01       	ld.sh	r1,r0[0x0]
8001c55a:	c3 16       	brmi	8001c5bc <uart_handler_1+0x60>

8001c55c <uart_handler_1>:
	}\
}			

// define interrupt handlers using above macro
//UART_HANDLER(0);
UART_HANDLER(1);
8001c55c:	eb cd 40 c0 	pushm	r6-r7,lr
8001c560:	1a 97       	mov	r7,sp
8001c562:	20 2d       	sub	sp,8
8001c564:	4b 66       	lddpc	r6,8001c63c <uart_handler_1+0xe0>
8001c566:	1e 26       	rsub	r6,pc
8001c568:	ec f8 00 34 	ld.w	r8,r6[52]
8001c56c:	f0 f8 02 2c 	ld.w	r8,r8[556]
8001c570:	70 58       	ld.w	r8,r8[0x14]
8001c572:	ef 48 ff fc 	st.w	r7[-4],r8
8001c576:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001c57a:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8001c57e:	5c 58       	castu.b	r8
8001c580:	c2 80       	breq	8001c5d0 <uart_handler_1+0x74>
8001c582:	ec f8 00 34 	ld.w	r8,r6[52]
8001c586:	f0 f8 02 2c 	ld.w	r8,r8[556]
8001c58a:	70 68       	ld.w	r8,r8[0x18]
8001c58c:	ef 68 ff fb 	st.b	r7[-5],r8
8001c590:	ec f8 00 34 	ld.w	r8,r6[52]
8001c594:	f0 f8 04 3c 	ld.w	r8,r8[1084]
8001c598:	58 08       	cp.w	r8,0
8001c59a:	c0 c1       	brne	8001c5b2 <uart_handler_1+0x56>
8001c59c:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8001c5a0:	ec f8 00 34 	ld.w	r8,r6[52]
8001c5a4:	f0 c8 fc c9 	sub	r8,r8,-823
8001c5a8:	12 9b       	mov	r11,r9
8001c5aa:	10 9c       	mov	r12,r8
8001c5ac:	f0 16 00 4f 	mcall	r6[316]
8001c5b0:	c1 08       	rjmp	8001c5d0 <uart_handler_1+0x74>
8001c5b2:	ec f8 00 34 	ld.w	r8,r6[52]
8001c5b6:	f0 f8 04 3c 	ld.w	r8,r8[1084]
8001c5ba:	70 18       	ld.w	r8,r8[0x4]
8001c5bc:	ef 3a ff fb 	ld.ub	r10,r7[-5]
8001c5c0:	ec f9 00 34 	ld.w	r9,r6[52]
8001c5c4:	f2 f9 04 3c 	ld.w	r9,r9[1084]
8001c5c8:	72 59       	ld.w	r9,r9[0x14]
8001c5ca:	14 9b       	mov	r11,r10
8001c5cc:	12 9c       	mov	r12,r9
8001c5ce:	5d 18       	icall	r8
8001c5d0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001c5d4:	e2 18 00 02 	andl	r8,0x2,COH
8001c5d8:	c2 d0       	breq	8001c632 <uart_handler_1+0xd6>
8001c5da:	ec f8 00 34 	ld.w	r8,r6[52]
8001c5de:	f0 c8 fd cc 	sub	r8,r8,-564
8001c5e2:	10 9c       	mov	r12,r8
8001c5e4:	f0 16 00 2c 	mcall	r6[176]
8001c5e8:	18 98       	mov	r8,r12
8001c5ea:	58 08       	cp.w	r8,0
8001c5ec:	e0 8a 00 13 	brle	8001c612 <uart_handler_1+0xb6>
8001c5f0:	ec f8 00 34 	ld.w	r8,r6[52]
8001c5f4:	f0 c8 fd cc 	sub	r8,r8,-564
8001c5f8:	10 9c       	mov	r12,r8
8001c5fa:	f0 16 00 42 	mcall	r6[264]
8001c5fe:	18 98       	mov	r8,r12
8001c600:	ef 68 ff fb 	st.b	r7[-5],r8
8001c604:	ec f8 00 34 	ld.w	r8,r6[52]
8001c608:	f0 f8 02 2c 	ld.w	r8,r8[556]
8001c60c:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8001c610:	91 79       	st.w	r8[0x1c],r9
8001c612:	ec f8 00 34 	ld.w	r8,r6[52]
8001c616:	f0 c8 fd cc 	sub	r8,r8,-564
8001c61a:	10 9c       	mov	r12,r8
8001c61c:	f0 16 00 2c 	mcall	r6[176]
8001c620:	18 98       	mov	r8,r12
8001c622:	58 08       	cp.w	r8,0
8001c624:	c0 71       	brne	8001c632 <uart_handler_1+0xd6>
8001c626:	ec f8 00 34 	ld.w	r8,r6[52]
8001c62a:	f0 f8 02 2c 	ld.w	r8,r8[556]
8001c62e:	30 29       	mov	r9,2
8001c630:	91 39       	st.w	r8[0xc],r9
8001c632:	2f ed       	sub	sp,-8
8001c634:	e3 cd 40 c0 	ldm	sp++,r6-r7,lr
8001c638:	d6 03       	rete
8001c63a:	00 00       	add	r0,r0
8001c63c:	80 01       	ld.sh	r1,r0[0x0]
8001c63e:	c3 ea       	rjmp	8001c2ba <spi_handler+0x4e>

8001c640 <uart_handler_2>:
UART_HANDLER(2);
8001c640:	eb cd 40 c0 	pushm	r6-r7,lr
8001c644:	1a 97       	mov	r7,sp
8001c646:	20 2d       	sub	sp,8
8001c648:	4b 66       	lddpc	r6,8001c720 <uart_handler_2+0xe0>
8001c64a:	1e 26       	rsub	r6,pc
8001c64c:	ec f8 00 34 	ld.w	r8,r6[52]
8001c650:	f0 f8 04 54 	ld.w	r8,r8[1108]
8001c654:	70 58       	ld.w	r8,r8[0x14]
8001c656:	ef 48 ff fc 	st.w	r7[-4],r8
8001c65a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001c65e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8001c662:	5c 58       	castu.b	r8
8001c664:	c2 80       	breq	8001c6b4 <uart_handler_2+0x74>
8001c666:	ec f8 00 34 	ld.w	r8,r6[52]
8001c66a:	f0 f8 04 54 	ld.w	r8,r8[1108]
8001c66e:	70 68       	ld.w	r8,r8[0x18]
8001c670:	ef 68 ff fb 	st.b	r7[-5],r8
8001c674:	ec f8 00 34 	ld.w	r8,r6[52]
8001c678:	f0 f8 06 64 	ld.w	r8,r8[1636]
8001c67c:	58 08       	cp.w	r8,0
8001c67e:	c0 c1       	brne	8001c696 <uart_handler_2+0x56>
8001c680:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8001c684:	ec f8 00 34 	ld.w	r8,r6[52]
8001c688:	f0 c8 fa a1 	sub	r8,r8,-1375
8001c68c:	12 9b       	mov	r11,r9
8001c68e:	10 9c       	mov	r12,r8
8001c690:	f0 16 00 4f 	mcall	r6[316]
8001c694:	c1 08       	rjmp	8001c6b4 <uart_handler_2+0x74>
8001c696:	ec f8 00 34 	ld.w	r8,r6[52]
8001c69a:	f0 f8 06 64 	ld.w	r8,r8[1636]
8001c69e:	70 18       	ld.w	r8,r8[0x4]
8001c6a0:	ef 3a ff fb 	ld.ub	r10,r7[-5]
8001c6a4:	ec f9 00 34 	ld.w	r9,r6[52]
8001c6a8:	f2 f9 06 64 	ld.w	r9,r9[1636]
8001c6ac:	72 59       	ld.w	r9,r9[0x14]
8001c6ae:	14 9b       	mov	r11,r10
8001c6b0:	12 9c       	mov	r12,r9
8001c6b2:	5d 18       	icall	r8
8001c6b4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001c6b8:	e2 18 00 02 	andl	r8,0x2,COH
8001c6bc:	c2 d0       	breq	8001c716 <uart_handler_2+0xd6>
8001c6be:	ec f8 00 34 	ld.w	r8,r6[52]
8001c6c2:	f0 c8 fb a4 	sub	r8,r8,-1116
8001c6c6:	10 9c       	mov	r12,r8
8001c6c8:	f0 16 00 2c 	mcall	r6[176]
8001c6cc:	18 98       	mov	r8,r12
8001c6ce:	58 08       	cp.w	r8,0
8001c6d0:	e0 8a 00 13 	brle	8001c6f6 <uart_handler_2+0xb6>
8001c6d4:	ec f8 00 34 	ld.w	r8,r6[52]
8001c6d8:	f0 c8 fb a4 	sub	r8,r8,-1116
8001c6dc:	10 9c       	mov	r12,r8
8001c6de:	f0 16 00 42 	mcall	r6[264]
8001c6e2:	18 98       	mov	r8,r12
8001c6e4:	ef 68 ff fb 	st.b	r7[-5],r8
8001c6e8:	ec f8 00 34 	ld.w	r8,r6[52]
8001c6ec:	f0 f8 04 54 	ld.w	r8,r8[1108]
8001c6f0:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8001c6f4:	91 79       	st.w	r8[0x1c],r9
8001c6f6:	ec f8 00 34 	ld.w	r8,r6[52]
8001c6fa:	f0 c8 fb a4 	sub	r8,r8,-1116
8001c6fe:	10 9c       	mov	r12,r8
8001c700:	f0 16 00 2c 	mcall	r6[176]
8001c704:	18 98       	mov	r8,r12
8001c706:	58 08       	cp.w	r8,0
8001c708:	c0 71       	brne	8001c716 <uart_handler_2+0xd6>
8001c70a:	ec f8 00 34 	ld.w	r8,r6[52]
8001c70e:	f0 f8 04 54 	ld.w	r8,r8[1108]
8001c712:	30 29       	mov	r9,2
8001c714:	91 39       	st.w	r8[0xc],r9
8001c716:	2f ed       	sub	sp,-8
8001c718:	e3 cd 40 c0 	ldm	sp++,r6-r7,lr
8001c71c:	d6 03       	rete
8001c71e:	00 00       	add	r0,r0
8001c720:	80 01       	ld.sh	r1,r0[0x0]
8001c722:	c4 ce       	rcall	8001c3ba <spi_handler+0x14e>

8001c724 <uart_handler_3>:
UART_HANDLER(3);
8001c724:	eb cd 40 c0 	pushm	r6-r7,lr
8001c728:	1a 97       	mov	r7,sp
8001c72a:	20 2d       	sub	sp,8
8001c72c:	4b 66       	lddpc	r6,8001c804 <uart_handler_3+0xe0>
8001c72e:	1e 26       	rsub	r6,pc
8001c730:	ec f8 00 34 	ld.w	r8,r6[52]
8001c734:	f0 f8 06 7c 	ld.w	r8,r8[1660]
8001c738:	70 58       	ld.w	r8,r8[0x14]
8001c73a:	ef 48 ff fc 	st.w	r7[-4],r8
8001c73e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001c742:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8001c746:	5c 58       	castu.b	r8
8001c748:	c2 80       	breq	8001c798 <uart_handler_3+0x74>
8001c74a:	ec f8 00 34 	ld.w	r8,r6[52]
8001c74e:	f0 f8 06 7c 	ld.w	r8,r8[1660]
8001c752:	70 68       	ld.w	r8,r8[0x18]
8001c754:	ef 68 ff fb 	st.b	r7[-5],r8
8001c758:	ec f8 00 34 	ld.w	r8,r6[52]
8001c75c:	f0 f8 08 8c 	ld.w	r8,r8[2188]
8001c760:	58 08       	cp.w	r8,0
8001c762:	c0 c1       	brne	8001c77a <uart_handler_3+0x56>
8001c764:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8001c768:	ec f8 00 34 	ld.w	r8,r6[52]
8001c76c:	f0 c8 f8 79 	sub	r8,r8,-1927
8001c770:	12 9b       	mov	r11,r9
8001c772:	10 9c       	mov	r12,r8
8001c774:	f0 16 00 4f 	mcall	r6[316]
8001c778:	c1 08       	rjmp	8001c798 <uart_handler_3+0x74>
8001c77a:	ec f8 00 34 	ld.w	r8,r6[52]
8001c77e:	f0 f8 08 8c 	ld.w	r8,r8[2188]
8001c782:	70 18       	ld.w	r8,r8[0x4]
8001c784:	ef 3a ff fb 	ld.ub	r10,r7[-5]
8001c788:	ec f9 00 34 	ld.w	r9,r6[52]
8001c78c:	f2 f9 08 8c 	ld.w	r9,r9[2188]
8001c790:	72 59       	ld.w	r9,r9[0x14]
8001c792:	14 9b       	mov	r11,r10
8001c794:	12 9c       	mov	r12,r9
8001c796:	5d 18       	icall	r8
8001c798:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001c79c:	e2 18 00 02 	andl	r8,0x2,COH
8001c7a0:	c2 d0       	breq	8001c7fa <uart_handler_3+0xd6>
8001c7a2:	ec f8 00 34 	ld.w	r8,r6[52]
8001c7a6:	f0 c8 f9 7c 	sub	r8,r8,-1668
8001c7aa:	10 9c       	mov	r12,r8
8001c7ac:	f0 16 00 2c 	mcall	r6[176]
8001c7b0:	18 98       	mov	r8,r12
8001c7b2:	58 08       	cp.w	r8,0
8001c7b4:	e0 8a 00 13 	brle	8001c7da <uart_handler_3+0xb6>
8001c7b8:	ec f8 00 34 	ld.w	r8,r6[52]
8001c7bc:	f0 c8 f9 7c 	sub	r8,r8,-1668
8001c7c0:	10 9c       	mov	r12,r8
8001c7c2:	f0 16 00 42 	mcall	r6[264]
8001c7c6:	18 98       	mov	r8,r12
8001c7c8:	ef 68 ff fb 	st.b	r7[-5],r8
8001c7cc:	ec f8 00 34 	ld.w	r8,r6[52]
8001c7d0:	f0 f8 06 7c 	ld.w	r8,r8[1660]
8001c7d4:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8001c7d8:	91 79       	st.w	r8[0x1c],r9
8001c7da:	ec f8 00 34 	ld.w	r8,r6[52]
8001c7de:	f0 c8 f9 7c 	sub	r8,r8,-1668
8001c7e2:	10 9c       	mov	r12,r8
8001c7e4:	f0 16 00 2c 	mcall	r6[176]
8001c7e8:	18 98       	mov	r8,r12
8001c7ea:	58 08       	cp.w	r8,0
8001c7ec:	c0 71       	brne	8001c7fa <uart_handler_3+0xd6>
8001c7ee:	ec f8 00 34 	ld.w	r8,r6[52]
8001c7f2:	f0 f8 06 7c 	ld.w	r8,r8[1660]
8001c7f6:	30 29       	mov	r9,2
8001c7f8:	91 39       	st.w	r8[0xc],r9
8001c7fa:	2f ed       	sub	sp,-8
8001c7fc:	e3 cd 40 c0 	ldm	sp++,r6-r7,lr
8001c800:	d6 03       	rete
8001c802:	00 00       	add	r0,r0
8001c804:	80 01       	ld.sh	r1,r0[0x0]
8001c806:	c5 b2       	brcc	8001c8bc <uart_handler_4+0xb4>

8001c808 <uart_handler_4>:
UART_HANDLER(4);
8001c808:	eb cd 40 c0 	pushm	r6-r7,lr
8001c80c:	1a 97       	mov	r7,sp
8001c80e:	20 2d       	sub	sp,8
8001c810:	4b 66       	lddpc	r6,8001c8e8 <uart_handler_4+0xe0>
8001c812:	1e 26       	rsub	r6,pc
8001c814:	ec f8 00 34 	ld.w	r8,r6[52]
8001c818:	f0 f8 08 a4 	ld.w	r8,r8[2212]
8001c81c:	70 58       	ld.w	r8,r8[0x14]
8001c81e:	ef 48 ff fc 	st.w	r7[-4],r8
8001c822:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001c826:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8001c82a:	5c 58       	castu.b	r8
8001c82c:	c2 80       	breq	8001c87c <uart_handler_4+0x74>
8001c82e:	ec f8 00 34 	ld.w	r8,r6[52]
8001c832:	f0 f8 08 a4 	ld.w	r8,r8[2212]
8001c836:	70 68       	ld.w	r8,r8[0x18]
8001c838:	ef 68 ff fb 	st.b	r7[-5],r8
8001c83c:	ec f8 00 34 	ld.w	r8,r6[52]
8001c840:	f0 f8 0a b4 	ld.w	r8,r8[2740]
8001c844:	58 08       	cp.w	r8,0
8001c846:	c0 c1       	brne	8001c85e <uart_handler_4+0x56>
8001c848:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8001c84c:	ec f8 00 34 	ld.w	r8,r6[52]
8001c850:	f0 c8 f6 51 	sub	r8,r8,-2479
8001c854:	12 9b       	mov	r11,r9
8001c856:	10 9c       	mov	r12,r8
8001c858:	f0 16 00 4f 	mcall	r6[316]
8001c85c:	c1 08       	rjmp	8001c87c <uart_handler_4+0x74>
8001c85e:	ec f8 00 34 	ld.w	r8,r6[52]
8001c862:	f0 f8 0a b4 	ld.w	r8,r8[2740]
8001c866:	70 18       	ld.w	r8,r8[0x4]
8001c868:	ef 3a ff fb 	ld.ub	r10,r7[-5]
8001c86c:	ec f9 00 34 	ld.w	r9,r6[52]
8001c870:	f2 f9 0a b4 	ld.w	r9,r9[2740]
8001c874:	72 59       	ld.w	r9,r9[0x14]
8001c876:	14 9b       	mov	r11,r10
8001c878:	12 9c       	mov	r12,r9
8001c87a:	5d 18       	icall	r8
8001c87c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001c880:	e2 18 00 02 	andl	r8,0x2,COH
8001c884:	c2 d0       	breq	8001c8de <uart_handler_4+0xd6>
8001c886:	ec f8 00 34 	ld.w	r8,r6[52]
8001c88a:	f0 c8 f7 54 	sub	r8,r8,-2220
8001c88e:	10 9c       	mov	r12,r8
8001c890:	f0 16 00 2c 	mcall	r6[176]
8001c894:	18 98       	mov	r8,r12
8001c896:	58 08       	cp.w	r8,0
8001c898:	e0 8a 00 13 	brle	8001c8be <uart_handler_4+0xb6>
8001c89c:	ec f8 00 34 	ld.w	r8,r6[52]
8001c8a0:	f0 c8 f7 54 	sub	r8,r8,-2220
8001c8a4:	10 9c       	mov	r12,r8
8001c8a6:	f0 16 00 42 	mcall	r6[264]
8001c8aa:	18 98       	mov	r8,r12
8001c8ac:	ef 68 ff fb 	st.b	r7[-5],r8
8001c8b0:	ec f8 00 34 	ld.w	r8,r6[52]
8001c8b4:	f0 f8 08 a4 	ld.w	r8,r8[2212]
8001c8b8:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8001c8bc:	91 79       	st.w	r8[0x1c],r9
8001c8be:	ec f8 00 34 	ld.w	r8,r6[52]
8001c8c2:	f0 c8 f7 54 	sub	r8,r8,-2220
8001c8c6:	10 9c       	mov	r12,r8
8001c8c8:	f0 16 00 2c 	mcall	r6[176]
8001c8cc:	18 98       	mov	r8,r12
8001c8ce:	58 08       	cp.w	r8,0
8001c8d0:	c0 71       	brne	8001c8de <uart_handler_4+0xd6>
8001c8d2:	ec f8 00 34 	ld.w	r8,r6[52]
8001c8d6:	f0 f8 08 a4 	ld.w	r8,r8[2212]
8001c8da:	30 29       	mov	r9,2
8001c8dc:	91 39       	st.w	r8[0xc],r9
8001c8de:	2f ed       	sub	sp,-8
8001c8e0:	e3 cd 40 c0 	ldm	sp++,r6-r7,lr
8001c8e4:	d6 03       	rete
8001c8e6:	00 00       	add	r0,r0
8001c8e8:	80 01       	ld.sh	r1,r0[0x0]
8001c8ea:	c6 96       	brmi	8001c9bc <init_UART_int+0x30>

8001c8ec <register_UART_handler>:


void register_UART_handler(int UID) {
8001c8ec:	eb cd 40 c0 	pushm	r6-r7,lr
8001c8f0:	1a 97       	mov	r7,sp
8001c8f2:	20 1d       	sub	sp,4
8001c8f4:	4a 56       	lddpc	r6,8001c988 <register_UART_handler+0x9c>
8001c8f6:	1e 26       	rsub	r6,pc
8001c8f8:	ef 4c ff fc 	st.w	r7[-4],r12
	switch(UID) {
8001c8fc:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001c900:	58 28       	cp.w	r8,2
8001c902:	c2 00       	breq	8001c942 <register_UART_handler+0x56>
8001c904:	e0 89 00 07 	brgt	8001c912 <register_UART_handler+0x26>
8001c908:	58 08       	cp.w	r8,0
8001c90a:	c0 90       	breq	8001c91c <register_UART_handler+0x30>
8001c90c:	58 18       	cp.w	r8,1
8001c90e:	c0 f0       	breq	8001c92c <register_UART_handler+0x40>
8001c910:	c3 98       	rjmp	8001c982 <register_UART_handler+0x96>
8001c912:	58 38       	cp.w	r8,3
8001c914:	c2 20       	breq	8001c958 <register_UART_handler+0x6c>
8001c916:	58 48       	cp.w	r8,4
8001c918:	c2 b0       	breq	8001c96e <register_UART_handler+0x82>
8001c91a:	c3 48       	rjmp	8001c982 <register_UART_handler+0x96>
		case 0: 	INTC_register_interrupt( (__int_handler) &uart_handler_0, AVR32_USART0_IRQ, AVR32_INTC_INT1); break;
8001c91c:	30 1a       	mov	r10,1
8001c91e:	e0 6b 02 60 	mov	r11,608
8001c922:	fe cc 04 9a 	sub	r12,pc,1178
8001c926:	f0 16 00 3b 	mcall	r6[236]
8001c92a:	c2 c8       	rjmp	8001c982 <register_UART_handler+0x96>
		case 1: 	INTC_register_interrupt( (__int_handler) &uart_handler_1, usart_opt[1].uart_device.IRQ, AVR32_INTC_INT1); break;
8001c92c:	ec f8 00 34 	ld.w	r8,r6[52]
8001c930:	f0 f8 02 30 	ld.w	r8,r8[560]
8001c934:	30 1a       	mov	r10,1
8001c936:	10 9b       	mov	r11,r8
8001c938:	fe cc 03 dc 	sub	r12,pc,988
8001c93c:	f0 16 00 3b 	mcall	r6[236]
8001c940:	c2 18       	rjmp	8001c982 <register_UART_handler+0x96>
		case 2: 	INTC_register_interrupt( (__int_handler) &uart_handler_2, usart_opt[2].uart_device.IRQ, AVR32_INTC_INT1); break;
8001c942:	ec f8 00 34 	ld.w	r8,r6[52]
8001c946:	f0 f8 04 58 	ld.w	r8,r8[1112]
8001c94a:	30 1a       	mov	r10,1
8001c94c:	10 9b       	mov	r11,r8
8001c94e:	fe cc 03 0e 	sub	r12,pc,782
8001c952:	f0 16 00 3b 	mcall	r6[236]
8001c956:	c1 68       	rjmp	8001c982 <register_UART_handler+0x96>
		case 3: 	INTC_register_interrupt( (__int_handler) &uart_handler_3, usart_opt[3].uart_device.IRQ, AVR32_INTC_INT1); break;
8001c958:	ec f8 00 34 	ld.w	r8,r6[52]
8001c95c:	f0 f8 06 80 	ld.w	r8,r8[1664]
8001c960:	30 1a       	mov	r10,1
8001c962:	10 9b       	mov	r11,r8
8001c964:	fe cc 02 40 	sub	r12,pc,576
8001c968:	f0 16 00 3b 	mcall	r6[236]
8001c96c:	c0 b8       	rjmp	8001c982 <register_UART_handler+0x96>
		case 4: 	INTC_register_interrupt( (__int_handler) &uart_handler_4, usart_opt[4].uart_device.IRQ, AVR32_INTC_INT1); break;
8001c96e:	ec f8 00 34 	ld.w	r8,r6[52]
8001c972:	f0 f8 08 a8 	ld.w	r8,r8[2216]
8001c976:	30 1a       	mov	r10,1
8001c978:	10 9b       	mov	r11,r8
8001c97a:	fe cc 01 72 	sub	r12,pc,370
8001c97e:	f0 16 00 3b 	mcall	r6[236]

	}
	
}
8001c982:	2f fd       	sub	sp,-4
8001c984:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001c988:	80 01       	ld.sh	r1,r0[0x0]
8001c98a:	c7 7a       	rjmp	8001c678 <uart_handler_2+0x38>

8001c98c <init_UART_int>:

usart_config_t *init_UART_int(int UID) {
8001c98c:	eb cd 40 c0 	pushm	r6-r7,lr
8001c990:	1a 97       	mov	r7,sp
8001c992:	20 1d       	sub	sp,4
8001c994:	4e 16       	lddpc	r6,8001cb18 <init_UART_int+0x18c>
8001c996:	1e 26       	rsub	r6,pc
8001c998:	ef 4c ff fc 	st.w	r7[-4],r12
	if ((usart_opt[UID].mode&UART_IN) >0)  gpio_enable_module_pin(usart_opt[UID].rx_pin_map.pin, usart_opt[UID].rx_pin_map.function); 
8001c99c:	ee fa ff fc 	ld.w	r10,r7[-4]
8001c9a0:	ec f9 00 34 	ld.w	r9,r6[52]
8001c9a4:	e0 68 02 28 	mov	r8,552
8001c9a8:	f4 08 02 48 	mul	r8,r10,r8
8001c9ac:	f2 08 00 08 	add	r8,r9,r8
8001c9b0:	70 08       	ld.w	r8,r8[0x0]
8001c9b2:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8001c9b6:	58 08       	cp.w	r8,0
8001c9b8:	e0 8a 00 21 	brle	8001c9fa <init_UART_int+0x6e>
8001c9bc:	ee fa ff fc 	ld.w	r10,r7[-4]
8001c9c0:	ec f9 00 34 	ld.w	r9,r6[52]
8001c9c4:	e0 68 02 28 	mov	r8,552
8001c9c8:	f4 08 02 48 	mul	r8,r10,r8
8001c9cc:	f2 08 00 08 	add	r8,r9,r8
8001c9d0:	f0 c8 fd dc 	sub	r8,r8,-548
8001c9d4:	11 98       	ld.ub	r8,r8[0x1]
8001c9d6:	10 99       	mov	r9,r8
8001c9d8:	ee fb ff fc 	ld.w	r11,r7[-4]
8001c9dc:	ec fa 00 34 	ld.w	r10,r6[52]
8001c9e0:	e0 68 02 28 	mov	r8,552
8001c9e4:	f6 08 02 48 	mul	r8,r11,r8
8001c9e8:	f4 08 00 08 	add	r8,r10,r8
8001c9ec:	f0 c8 fd dc 	sub	r8,r8,-548
8001c9f0:	11 88       	ld.ub	r8,r8[0x0]
8001c9f2:	12 9b       	mov	r11,r9
8001c9f4:	10 9c       	mov	r12,r8
8001c9f6:	f0 16 00 3c 	mcall	r6[240]
	if ((usart_opt[UID].mode&UART_OUT)>0)  gpio_enable_module_pin(usart_opt[UID].tx_pin_map.pin, usart_opt[UID].tx_pin_map.function); 
8001c9fa:	ee fa ff fc 	ld.w	r10,r7[-4]
8001c9fe:	ec f9 00 34 	ld.w	r9,r6[52]
8001ca02:	e0 68 02 28 	mov	r8,552
8001ca06:	f4 08 02 48 	mul	r8,r10,r8
8001ca0a:	f2 08 00 08 	add	r8,r9,r8
8001ca0e:	70 08       	ld.w	r8,r8[0x0]
8001ca10:	e2 18 00 02 	andl	r8,0x2,COH
8001ca14:	58 08       	cp.w	r8,0
8001ca16:	e0 8a 00 21 	brle	8001ca58 <init_UART_int+0xcc>
8001ca1a:	ee fa ff fc 	ld.w	r10,r7[-4]
8001ca1e:	ec f9 00 34 	ld.w	r9,r6[52]
8001ca22:	e0 68 02 28 	mov	r8,552
8001ca26:	f4 08 02 48 	mul	r8,r10,r8
8001ca2a:	f2 08 00 08 	add	r8,r9,r8
8001ca2e:	f0 c8 fd dc 	sub	r8,r8,-548
8001ca32:	11 b8       	ld.ub	r8,r8[0x3]
8001ca34:	10 99       	mov	r9,r8
8001ca36:	ee fb ff fc 	ld.w	r11,r7[-4]
8001ca3a:	ec fa 00 34 	ld.w	r10,r6[52]
8001ca3e:	e0 68 02 28 	mov	r8,552
8001ca42:	f6 08 02 48 	mul	r8,r11,r8
8001ca46:	f4 08 00 08 	add	r8,r10,r8
8001ca4a:	f0 c8 fd dc 	sub	r8,r8,-548
8001ca4e:	11 a8       	ld.ub	r8,r8[0x2]
8001ca50:	12 9b       	mov	r11,r9
8001ca52:	10 9c       	mov	r12,r8
8001ca54:	f0 16 00 3c 	mcall	r6[240]

	usart_init_rs232( usart_opt[UID].uart_device.uart, &(usart_opt[UID].options), sysclk_get_cpu_hz()); 
8001ca58:	fe b0 fd 0c 	rcall	8001c470 <sysclk_get_cpu_hz>
8001ca5c:	18 98       	mov	r8,r12
8001ca5e:	10 9a       	mov	r10,r8
8001ca60:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001ca64:	e0 68 02 28 	mov	r8,552
8001ca68:	f2 08 02 48 	mul	r8,r9,r8
8001ca6c:	f0 c9 fd e8 	sub	r9,r8,-536
8001ca70:	ec f8 00 34 	ld.w	r8,r6[52]
8001ca74:	10 09       	add	r9,r8
8001ca76:	ee fc ff fc 	ld.w	r12,r7[-4]
8001ca7a:	ec f8 00 34 	ld.w	r8,r6[52]
8001ca7e:	e0 6b 00 8a 	mov	r11,138
8001ca82:	f8 0b 02 4b 	mul	r11,r12,r11
8001ca86:	2f fb       	sub	r11,-1
8001ca88:	f0 0b 03 28 	ld.w	r8,r8[r11<<0x2]
8001ca8c:	12 9b       	mov	r11,r9
8001ca8e:	10 9c       	mov	r12,r8
8001ca90:	f0 16 00 60 	mcall	r6[384]
	//usart_write_line(usart_opt[UID].uart_device.uart, "UART initialised");
	register_UART_handler(UID);
8001ca94:	ee fc ff fc 	ld.w	r12,r7[-4]
8001ca98:	f0 16 01 f1 	mcall	r6[1988]
	buffer_init(&usart_opt[UID].uart_device.transmit_buffer);
8001ca9c:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001caa0:	e0 68 02 28 	mov	r8,552
8001caa4:	f2 08 02 48 	mul	r8,r9,r8
8001caa8:	f0 c9 ff f4 	sub	r9,r8,-12
8001caac:	ec f8 00 34 	ld.w	r8,r6[52]
8001cab0:	f2 08 00 08 	add	r8,r9,r8
8001cab4:	10 9c       	mov	r12,r8
8001cab6:	f0 16 01 23 	mcall	r6[1164]
	buffer_init(&usart_opt[UID].uart_device.receive_buffer);
8001caba:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001cabe:	e0 68 02 28 	mov	r8,552
8001cac2:	f2 08 02 48 	mul	r8,r9,r8
8001cac6:	f0 c9 fe f4 	sub	r9,r8,-268
8001caca:	ec f8 00 34 	ld.w	r8,r6[52]
8001cace:	f2 08 00 08 	add	r8,r9,r8
8001cad2:	2f d8       	sub	r8,-3
8001cad4:	10 9c       	mov	r12,r8
8001cad6:	f0 16 01 23 	mcall	r6[1164]
	if (usart_opt[UID].mode&UART_IN >0) usart_opt[UID].uart_device.uart->ier=AVR32_USART_IER_RXRDY_MASK;
8001cada:	ee fa ff fc 	ld.w	r10,r7[-4]
8001cade:	ec f9 00 34 	ld.w	r9,r6[52]
8001cae2:	e0 68 02 28 	mov	r8,552
8001cae6:	f4 08 02 48 	mul	r8,r10,r8
8001caea:	f2 08 00 08 	add	r8,r9,r8
8001caee:	70 08       	ld.w	r8,r8[0x0]
8001caf0:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8001caf4:	5c 58       	castu.b	r8
8001caf6:	c0 e0       	breq	8001cb12 <init_UART_int+0x186>
8001caf8:	ee fa ff fc 	ld.w	r10,r7[-4]
8001cafc:	ec f8 00 34 	ld.w	r8,r6[52]
8001cb00:	e0 69 00 8a 	mov	r9,138
8001cb04:	f4 09 02 49 	mul	r9,r10,r9
8001cb08:	2f f9       	sub	r9,-1
8001cb0a:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8001cb0e:	30 19       	mov	r9,1
8001cb10:	91 29       	st.w	r8[0x8],r9
	//if (usart_opt[UID].mode&UART_OUT>0) usart_opt[UID].uart_device.uart->ier=AVR32_USART_IER_TXRDY_MASK;
} 
8001cb12:	2f fd       	sub	sp,-4
8001cb14:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001cb18:	80 01       	ld.sh	r1,r0[0x0]
8001cb1a:	c8 1a       	rjmp	8001c81c <uart_handler_4+0x14>

8001cb1c <uart_int_get_byte>:

/************************************************************************/
/* blocking operation to retrieve a received byte from uart             */
/************************************************************************/
char uart_int_get_byte(usart_config_t *usart_opt) {
8001cb1c:	eb cd 40 c0 	pushm	r6-r7,lr
8001cb20:	1a 97       	mov	r7,sp
8001cb22:	20 1d       	sub	sp,4
8001cb24:	48 86       	lddpc	r6,8001cb44 <uart_int_get_byte+0x28>
8001cb26:	1e 26       	rsub	r6,pc
8001cb28:	ef 4c ff fc 	st.w	r7[-4],r12
	return buffer_get(&(usart_opt->uart_device.receive_buffer));
8001cb2c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001cb30:	f0 c8 fe f1 	sub	r8,r8,-271
8001cb34:	10 9c       	mov	r12,r8
8001cb36:	f0 16 00 42 	mcall	r6[264]
8001cb3a:	18 98       	mov	r8,r12
}
8001cb3c:	10 9c       	mov	r12,r8
8001cb3e:	2f fd       	sub	sp,-4
8001cb40:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001cb44:	80 01       	ld.sh	r1,r0[0x0]
8001cb46:	c9 aa       	rjmp	8001c87a <uart_handler_4+0x72>

8001cb48 <uart_int_bytes_available>:

/************************************************************************/
/* returns number of received bytes in the receive buffer               */
/************************************************************************/
int uart_int_bytes_available(usart_config_t *usart_opt) {
8001cb48:	eb cd 40 c0 	pushm	r6-r7,lr
8001cb4c:	1a 97       	mov	r7,sp
8001cb4e:	20 1d       	sub	sp,4
8001cb50:	48 86       	lddpc	r6,8001cb70 <uart_int_bytes_available+0x28>
8001cb52:	1e 26       	rsub	r6,pc
8001cb54:	ef 4c ff fc 	st.w	r7[-4],r12
	return buffer_bytes_available(&(usart_opt->uart_device.receive_buffer));
8001cb58:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001cb5c:	f0 c8 fe f1 	sub	r8,r8,-271
8001cb60:	10 9c       	mov	r12,r8
8001cb62:	f0 16 00 2c 	mcall	r6[176]
8001cb66:	18 98       	mov	r8,r12
}
8001cb68:	10 9c       	mov	r12,r8
8001cb6a:	2f fd       	sub	sp,-4
8001cb6c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001cb70:	80 01       	ld.sh	r1,r0[0x0]
8001cb72:	c9 d6       	brmi	8001caac <init_UART_int+0x120>

8001cb74 <uart_int_send_byte>:

/************************************************************************/
/* non-blocking operation to append a byte to the uart send buffer      */
/* if buffer is full, the command has no effect  (returns -1).          */
/************************************************************************/
short uart_int_send_byte(usart_config_t *usart_opt, char data) {
8001cb74:	eb cd 40 c0 	pushm	r6-r7,lr
8001cb78:	1a 97       	mov	r7,sp
8001cb7a:	20 2d       	sub	sp,8
8001cb7c:	49 56       	lddpc	r6,8001cbd0 <uart_int_send_byte+0x5c>
8001cb7e:	1e 26       	rsub	r6,pc
8001cb80:	ef 4c ff fc 	st.w	r7[-4],r12
8001cb84:	16 98       	mov	r8,r11
8001cb86:	ef 68 ff f8 	st.b	r7[-8],r8
//	usart_write_line(usart_opt->uart_device.uart, "\ns");
	while (buffer_put(&(usart_opt->uart_device.transmit_buffer), data)<0);
8001cb8a:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8001cb8e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001cb92:	2f 48       	sub	r8,-12
8001cb94:	12 9b       	mov	r11,r9
8001cb96:	10 9c       	mov	r12,r8
8001cb98:	f0 16 00 4f 	mcall	r6[316]
8001cb9c:	18 98       	mov	r8,r12
8001cb9e:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8001cba2:	30 08       	mov	r8,0
8001cba4:	f0 09 18 00 	cp.b	r9,r8
8001cba8:	cf 15       	brlt	8001cb8a <uart_int_send_byte+0x16>
	if ((buffer_bytes_available(&(usart_opt->uart_device.transmit_buffer)) >= 1))//&&
8001cbaa:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001cbae:	2f 48       	sub	r8,-12
8001cbb0:	10 9c       	mov	r12,r8
8001cbb2:	f0 16 00 2c 	mcall	r6[176]
8001cbb6:	18 98       	mov	r8,r12
8001cbb8:	58 08       	cp.w	r8,0
8001cbba:	e0 8a 00 07 	brle	8001cbc8 <uart_int_send_byte+0x54>
//	  (usart_opt->uart_device.uart->csr & AVR32_USART_CSR_TXRDY_MASK)) 
	{ // if there is exactly one byte in the buffer (this one...), and transmitter ready
		 // kick-start transmission
//		usart_opt->uart_device.uart->thr='c';//buffer_get(&(usart_opt->uart_device.transmit_buffer));
		usart_opt->uart_device.uart->ier=AVR32_USART_IER_TXRDY_MASK;
8001cbbe:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001cbc2:	70 18       	ld.w	r8,r8[0x4]
8001cbc4:	30 29       	mov	r9,2
8001cbc6:	91 29       	st.w	r8[0x8],r9
	} 		
}
8001cbc8:	2f ed       	sub	sp,-8
8001cbca:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001cbce:	00 00       	add	r0,r0
8001cbd0:	80 01       	ld.sh	r1,r0[0x0]
8001cbd2:	ca 02       	brcc	8001cb12 <init_UART_int+0x186>

8001cbd4 <uart_int_flush>:


/** 
 * blocking operation to flush the uart buffer. Returns once the last byte has been passed to hardware for transmission.
 */
void uart_int_flush(usart_config_t *usart_opt) {
8001cbd4:	eb cd 40 c0 	pushm	r6-r7,lr
8001cbd8:	1a 97       	mov	r7,sp
8001cbda:	20 1d       	sub	sp,4
8001cbdc:	48 b6       	lddpc	r6,8001cc08 <uart_int_flush+0x34>
8001cbde:	1e 26       	rsub	r6,pc
8001cbe0:	ef 4c ff fc 	st.w	r7[-4],r12
	usart_opt->uart_device.uart->ier=AVR32_USART_IER_TXRDY_MASK;
8001cbe4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001cbe8:	70 18       	ld.w	r8,r8[0x4]
8001cbea:	30 29       	mov	r9,2
8001cbec:	91 29       	st.w	r8[0x8],r9
	while (!buffer_empty(&(usart_opt->uart_device.transmit_buffer)));
8001cbee:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001cbf2:	2f 48       	sub	r8,-12
8001cbf4:	10 9c       	mov	r12,r8
8001cbf6:	f0 16 01 15 	mcall	r6[1108]
8001cbfa:	18 98       	mov	r8,r12
8001cbfc:	5c 58       	castu.b	r8
8001cbfe:	cf 80       	breq	8001cbee <uart_int_flush+0x1a>
}
8001cc00:	2f fd       	sub	sp,-4
8001cc02:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001cc06:	00 00       	add	r0,r0
8001cc08:	80 01       	ld.sh	r1,r0[0x0]
8001cc0a:	ca 62       	brcc	8001cb56 <uart_int_bytes_available+0xe>

8001cc0c <uart_out_buffer_empty>:

int uart_out_buffer_empty(usart_config_t *usart_opt) {
8001cc0c:	eb cd 40 c0 	pushm	r6-r7,lr
8001cc10:	1a 97       	mov	r7,sp
8001cc12:	20 1d       	sub	sp,4
8001cc14:	48 96       	lddpc	r6,8001cc38 <uart_out_buffer_empty+0x2c>
8001cc16:	1e 26       	rsub	r6,pc
8001cc18:	ef 4c ff fc 	st.w	r7[-4],r12
	return buffer_empty(&(usart_opt->uart_device.transmit_buffer));
8001cc1c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001cc20:	2f 48       	sub	r8,-12
8001cc22:	10 9c       	mov	r12,r8
8001cc24:	f0 16 01 15 	mcall	r6[1108]
8001cc28:	18 98       	mov	r8,r12
8001cc2a:	5c 58       	castu.b	r8
8001cc2c:	5c 68       	casts.b	r8
}
8001cc2e:	10 9c       	mov	r12,r8
8001cc30:	2f fd       	sub	sp,-4
8001cc32:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001cc36:	00 00       	add	r0,r0
8001cc38:	80 01       	ld.sh	r1,r0[0x0]
8001cc3a:	ca 9a       	rjmp	8001c98c <init_UART_int>

8001cc3c <get_UART_handle>:

usart_config_t *get_UART_handle(int UID) {
8001cc3c:	eb cd 40 c0 	pushm	r6-r7,lr
8001cc40:	1a 97       	mov	r7,sp
8001cc42:	20 1d       	sub	sp,4
8001cc44:	48 96       	lddpc	r6,8001cc68 <get_UART_handle+0x2c>
8001cc46:	1e 26       	rsub	r6,pc
8001cc48:	ef 4c ff fc 	st.w	r7[-4],r12
	return &usart_opt[UID];
8001cc4c:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001cc50:	e0 68 02 28 	mov	r8,552
8001cc54:	b1 39       	mul	r9,r8
8001cc56:	ec f8 00 34 	ld.w	r8,r6[52]
8001cc5a:	f2 08 00 08 	add	r8,r9,r8
}
8001cc5e:	10 9c       	mov	r12,r8
8001cc60:	2f fd       	sub	sp,-4
8001cc62:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001cc66:	00 00       	add	r0,r0
8001cc68:	80 01       	ld.sh	r1,r0[0x0]
8001cc6a:	ca ca       	rjmp	8001c9c2 <init_UART_int+0x36>

8001cc6c <register_write_stream>:

void register_write_stream(usart_config_t *usart_opt, byte_stream_t *stream) {
8001cc6c:	eb cd 40 c0 	pushm	r6-r7,lr
8001cc70:	1a 97       	mov	r7,sp
8001cc72:	20 2d       	sub	sp,8
8001cc74:	49 16       	lddpc	r6,8001ccb8 <register_write_stream+0x4c>
8001cc76:	1e 26       	rsub	r6,pc
8001cc78:	ef 4c ff fc 	st.w	r7[-4],r12
8001cc7c:	ef 4b ff f8 	st.w	r7[-8],r11
	stream->get=NULL;
8001cc80:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001cc84:	30 09       	mov	r9,0
8001cc86:	91 09       	st.w	r8[0x0],r9
	//stream->get=&uart_int_get_byte;
	stream->put=&uart_int_send_byte;
8001cc88:	ec f9 05 c4 	ld.w	r9,r6[1476]
8001cc8c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001cc90:	91 19       	st.w	r8[0x4],r9
	stream->flush=&uart_int_flush;
8001cc92:	ec f9 06 78 	ld.w	r9,r6[1656]
8001cc96:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001cc9a:	91 29       	st.w	r8[0x8],r9
	stream->buffer_empty=&uart_out_buffer_empty;
8001cc9c:	ec f9 08 48 	ld.w	r9,r6[2120]
8001cca0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001cca4:	91 39       	st.w	r8[0xc],r9
	stream->data=usart_opt;
8001cca6:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001ccaa:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001ccae:	91 59       	st.w	r8[0x14],r9

}
8001ccb0:	2f ed       	sub	sp,-8
8001ccb2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001ccb6:	00 00       	add	r0,r0
8001ccb8:	80 01       	ld.sh	r1,r0[0x0]
8001ccba:	ca fa       	rjmp	8001ca18 <init_UART_int+0x8c>

8001ccbc <register_read_stream>:


void register_read_stream(usart_config_t *usart_opt,  byte_stream_t *stream) {
8001ccbc:	eb cd 40 80 	pushm	r7,lr
8001ccc0:	1a 97       	mov	r7,sp
8001ccc2:	20 2d       	sub	sp,8
8001ccc4:	ef 4c ff fc 	st.w	r7[-4],r12
8001ccc8:	ef 4b ff f8 	st.w	r7[-8],r11
	usart_opt->uart_device.receive_stream=stream;
8001cccc:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001ccd0:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001ccd4:	f1 49 02 14 	st.w	r8[532],r9
}
8001ccd8:	2f ed       	sub	sp,-8
8001ccda:	e3 cd 80 80 	ldm	sp++,r7,pc
	...

8001cce0 <init_scheduler>:
#include "scheduler.h"
#include "time_keeper.h"



void init_scheduler(task_set *ts) {
8001cce0:	eb cd 40 80 	pushm	r7,lr
8001cce4:	1a 97       	mov	r7,sp
8001cce6:	20 2d       	sub	sp,8
8001cce8:	ef 4c ff f8 	st.w	r7[-8],r12
	int i;
	for (i=0; i<ts->number_of_tasks; i++) {
8001ccec:	30 08       	mov	r8,0
8001ccee:	ef 48 ff fc 	st.w	r7[-4],r8
8001ccf2:	c2 18       	rjmp	8001cd34 <init_scheduler+0x54>
		ts->tasks[i].call_function=NULL;
8001ccf4:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001ccf8:	ee fa ff f8 	ld.w	r10,r7[-8]
8001ccfc:	12 98       	mov	r8,r9
8001ccfe:	a1 78       	lsl	r8,0x1
8001cd00:	12 08       	add	r8,r9
8001cd02:	2f f8       	sub	r8,-1
8001cd04:	a5 68       	lsl	r8,0x4
8001cd06:	f4 08 00 08 	add	r8,r10,r8
8001cd0a:	30 09       	mov	r9,0
8001cd0c:	91 09       	st.w	r8[0x0],r9
		ts->tasks[i].tasks=ts;
8001cd0e:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001cd12:	ee fa ff f8 	ld.w	r10,r7[-8]
8001cd16:	ee fb ff f8 	ld.w	r11,r7[-8]
8001cd1a:	12 98       	mov	r8,r9
8001cd1c:	a1 78       	lsl	r8,0x1
8001cd1e:	12 08       	add	r8,r9
8001cd20:	a5 68       	lsl	r8,0x4
8001cd22:	f6 08 00 08 	add	r8,r11,r8
8001cd26:	2f 48       	sub	r8,-12
8001cd28:	91 0a       	st.w	r8[0x0],r10



void init_scheduler(task_set *ts) {
	int i;
	for (i=0; i<ts->number_of_tasks; i++) {
8001cd2a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001cd2e:	2f f8       	sub	r8,-1
8001cd30:	ef 48 ff fc 	st.w	r7[-4],r8
8001cd34:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001cd38:	11 88       	ld.ub	r8,r8[0x0]
8001cd3a:	10 99       	mov	r9,r8
8001cd3c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001cd40:	10 39       	cp.w	r9,r8
8001cd42:	fe 99 ff d9 	brgt	8001ccf4 <init_scheduler+0x14>
		ts->tasks[i].call_function=NULL;
		ts->tasks[i].tasks=ts;
		//ts->tasks[i].run_mode=UNINITIALISED;
	}
	ts->running_task=-1;
8001cd46:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001cd4a:	3f f9       	mov	r9,-1
8001cd4c:	91 19       	st.w	r8[0x4],r9
	ts->current_schedule_slot=0;
8001cd4e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001cd52:	30 09       	mov	r9,0
8001cd54:	91 29       	st.w	r8[0x8],r9
}
8001cd56:	2f ed       	sub	sp,-8
8001cd58:	e3 cd 80 80 	ldm	sp++,r7,pc

8001cd5c <register_task>:

task_handle_t register_task(task_set *ts, int task_slot, unsigned long repeat_period, task_run_mode_t run_mode, function_pointer *call_function) {
8001cd5c:	eb cd 40 e0 	pushm	r5-r7,lr
8001cd60:	1a 97       	mov	r7,sp
8001cd62:	20 5d       	sub	sp,20
8001cd64:	4d f6       	lddpc	r6,8001cee0 <register_task+0x184>
8001cd66:	1e 26       	rsub	r6,pc
8001cd68:	ef 4c ff fc 	st.w	r7[-4],r12
8001cd6c:	ef 4b ff f8 	st.w	r7[-8],r11
8001cd70:	ef 4a ff f4 	st.w	r7[-12],r10
8001cd74:	ef 49 ff f0 	st.w	r7[-16],r9
8001cd78:	ef 48 ff ec 	st.w	r7[-20],r8
	if ((task_slot<0) || (task_slot>=ts->number_of_tasks)) {
8001cd7c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001cd80:	58 08       	cp.w	r8,0
8001cd82:	c0 a5       	brlt	8001cd96 <register_task+0x3a>
8001cd84:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001cd88:	11 88       	ld.ub	r8,r8[0x0]
8001cd8a:	10 99       	mov	r9,r8
8001cd8c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001cd90:	10 39       	cp.w	r9,r8
8001cd92:	e0 89 00 05 	brgt	8001cd9c <register_task+0x40>
		return -1;
8001cd96:	e0 68 00 ff 	mov	r8,255
8001cd9a:	c9 f8       	rjmp	8001ced8 <register_task+0x17c>
	}
	ts->tasks[task_slot].task_id=task_slot;
8001cd9c:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001cda0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001cda4:	f5 d8 b0 10 	bfexts	r10,r8,0x0,0x10
8001cda8:	ee fb ff fc 	ld.w	r11,r7[-4]
8001cdac:	12 98       	mov	r8,r9
8001cdae:	a1 78       	lsl	r8,0x1
8001cdb0:	12 08       	add	r8,r9
8001cdb2:	a1 78       	lsl	r8,0x1
8001cdb4:	2f f8       	sub	r8,-1
8001cdb6:	a3 78       	lsl	r8,0x3
8001cdb8:	f6 08 00 08 	add	r8,r11,r8
8001cdbc:	14 99       	mov	r9,r10
8001cdbe:	b0 69       	st.h	r8[0xc],r9
	ts->tasks[task_slot].call_function=call_function;
8001cdc0:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001cdc4:	ee fa ff ec 	ld.w	r10,r7[-20]
8001cdc8:	ee fb ff fc 	ld.w	r11,r7[-4]
8001cdcc:	12 98       	mov	r8,r9
8001cdce:	a1 78       	lsl	r8,0x1
8001cdd0:	12 08       	add	r8,r9
8001cdd2:	2f f8       	sub	r8,-1
8001cdd4:	a5 68       	lsl	r8,0x4
8001cdd6:	f6 08 00 08 	add	r8,r11,r8
8001cdda:	91 0a       	st.w	r8[0x0],r10
	ts->tasks[task_slot].run_mode=run_mode;
8001cddc:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001cde0:	ee fa ff fc 	ld.w	r10,r7[-4]
8001cde4:	12 98       	mov	r8,r9
8001cde6:	a1 78       	lsl	r8,0x1
8001cde8:	12 08       	add	r8,r9
8001cdea:	a5 68       	lsl	r8,0x4
8001cdec:	f4 08 00 08 	add	r8,r10,r8
8001cdf0:	2e 88       	sub	r8,-24
8001cdf2:	ee f9 ff f0 	ld.w	r9,r7[-16]
8001cdf6:	91 09       	st.w	r8[0x0],r9
	ts->tasks[task_slot].repeat_period=repeat_period;
8001cdf8:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001cdfc:	ee fa ff fc 	ld.w	r10,r7[-4]
8001ce00:	12 98       	mov	r8,r9
8001ce02:	a1 78       	lsl	r8,0x1
8001ce04:	12 08       	add	r8,r9
8001ce06:	a5 68       	lsl	r8,0x4
8001ce08:	f4 08 00 08 	add	r8,r10,r8
8001ce0c:	2e 08       	sub	r8,-32
8001ce0e:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001ce12:	91 09       	st.w	r8[0x0],r9
	ts->tasks[task_slot].next_run=GET_TIME;
8001ce14:	ee f5 ff f8 	ld.w	r5,r7[-8]
8001ce18:	f0 16 00 27 	mcall	r6[156]
8001ce1c:	18 99       	mov	r9,r12
8001ce1e:	ee fa ff fc 	ld.w	r10,r7[-4]
8001ce22:	0a 98       	mov	r8,r5
8001ce24:	a1 78       	lsl	r8,0x1
8001ce26:	0a 08       	add	r8,r5
8001ce28:	a5 68       	lsl	r8,0x4
8001ce2a:	f4 08 00 08 	add	r8,r10,r8
8001ce2e:	2d c8       	sub	r8,-36
8001ce30:	91 09       	st.w	r8[0x0],r9
	ts->tasks[task_slot].execution_time=0;
8001ce32:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001ce36:	ee fa ff fc 	ld.w	r10,r7[-4]
8001ce3a:	12 98       	mov	r8,r9
8001ce3c:	a1 78       	lsl	r8,0x1
8001ce3e:	12 08       	add	r8,r9
8001ce40:	a5 68       	lsl	r8,0x4
8001ce42:	f4 08 00 08 	add	r8,r10,r8
8001ce46:	2d 88       	sub	r8,-40
8001ce48:	30 09       	mov	r9,0
8001ce4a:	91 09       	st.w	r8[0x0],r9
	ts->tasks[task_slot].timing_mode=PERIODIC_ABSOLUTE;
8001ce4c:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001ce50:	ee fa ff fc 	ld.w	r10,r7[-4]
8001ce54:	12 98       	mov	r8,r9
8001ce56:	a1 78       	lsl	r8,0x1
8001ce58:	12 08       	add	r8,r9
8001ce5a:	2f f8       	sub	r8,-1
8001ce5c:	a5 68       	lsl	r8,0x4
8001ce5e:	f4 08 00 08 	add	r8,r10,r8
8001ce62:	2f 48       	sub	r8,-12
8001ce64:	30 09       	mov	r9,0
8001ce66:	91 09       	st.w	r8[0x0],r9
#ifdef SCHEDULER_PROFILING	
	ts->tasks[task_slot].delay_max=0;
8001ce68:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001ce6c:	ee fa ff fc 	ld.w	r10,r7[-4]
8001ce70:	12 98       	mov	r8,r9
8001ce72:	a1 78       	lsl	r8,0x1
8001ce74:	12 08       	add	r8,r9
8001ce76:	a5 68       	lsl	r8,0x4
8001ce78:	f4 08 00 08 	add	r8,r10,r8
8001ce7c:	2d 48       	sub	r8,-44
8001ce7e:	30 09       	mov	r9,0
8001ce80:	91 09       	st.w	r8[0x0],r9
	ts->tasks[task_slot].delay_avg=0;
8001ce82:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001ce86:	ee fa ff fc 	ld.w	r10,r7[-4]
8001ce8a:	f0 c9 ff ff 	sub	r9,r8,-1
8001ce8e:	12 98       	mov	r8,r9
8001ce90:	a1 78       	lsl	r8,0x1
8001ce92:	12 08       	add	r8,r9
8001ce94:	a5 68       	lsl	r8,0x4
8001ce96:	f4 08 00 08 	add	r8,r10,r8
8001ce9a:	30 09       	mov	r9,0
8001ce9c:	91 09       	st.w	r8[0x0],r9
	ts->tasks[task_slot].delay_var_squared=0;
8001ce9e:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001cea2:	ee fa ff fc 	ld.w	r10,r7[-4]
8001cea6:	12 98       	mov	r8,r9
8001cea8:	a1 78       	lsl	r8,0x1
8001ceaa:	12 08       	add	r8,r9
8001ceac:	a5 68       	lsl	r8,0x4
8001ceae:	f4 08 00 08 	add	r8,r10,r8
8001ceb2:	2c c8       	sub	r8,-52
8001ceb4:	30 09       	mov	r9,0
8001ceb6:	91 09       	st.w	r8[0x0],r9
	ts->tasks[task_slot].rt_violations=0;
8001ceb8:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001cebc:	ee fa ff fc 	ld.w	r10,r7[-4]
8001cec0:	12 98       	mov	r8,r9
8001cec2:	a1 78       	lsl	r8,0x1
8001cec4:	12 08       	add	r8,r9
8001cec6:	a5 68       	lsl	r8,0x4
8001cec8:	f4 08 00 08 	add	r8,r10,r8
8001cecc:	2c 88       	sub	r8,-56
8001cece:	30 09       	mov	r9,0
8001ced0:	91 09       	st.w	r8[0x0],r9
#endif
	return task_slot;
8001ced2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001ced6:	5c 58       	castu.b	r8
}
8001ced8:	10 9c       	mov	r12,r8
8001ceda:	2f bd       	sub	sp,-20
8001cedc:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8001cee0:	80 01       	ld.sh	r1,r0[0x0]
8001cee2:	cb ea       	rjmp	8001cc5e <get_UART_handle+0x22>

8001cee4 <add_task>:

bool add_task(task_set *ts, unsigned long repeat_period, task_run_mode_t run_mode, function_pointer *call_function, uint32_t task_id) {
8001cee4:	eb cd 40 c0 	pushm	r6-r7,lr
8001cee8:	1a 97       	mov	r7,sp
8001ceea:	20 6d       	sub	sp,24
8001ceec:	4a d6       	lddpc	r6,8001cfa0 <add_task+0xbc>
8001ceee:	1e 26       	rsub	r6,pc
8001cef0:	ef 4c ff f8 	st.w	r7[-8],r12
8001cef4:	ef 4b ff f4 	st.w	r7[-12],r11
8001cef8:	ef 4a ff f0 	st.w	r7[-16],r10
8001cefc:	ef 49 ff ec 	st.w	r7[-20],r9
8001cf00:	ef 48 ff e8 	st.w	r7[-24],r8
	int task_slot=0;
8001cf04:	30 08       	mov	r8,0
8001cf06:	ef 48 ff fc 	st.w	r7[-4],r8
	while ((task_slot < ts->number_of_tasks) && (ts->tasks[task_slot].call_function!=NULL)) task_slot++;
8001cf0a:	c0 68       	rjmp	8001cf16 <add_task+0x32>
8001cf0c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001cf10:	2f f8       	sub	r8,-1
8001cf12:	ef 48 ff fc 	st.w	r7[-4],r8
8001cf16:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001cf1a:	11 88       	ld.ub	r8,r8[0x0]
8001cf1c:	10 99       	mov	r9,r8
8001cf1e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001cf22:	10 39       	cp.w	r9,r8
8001cf24:	e0 8a 00 10 	brle	8001cf44 <add_task+0x60>
8001cf28:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001cf2c:	ee fa ff f8 	ld.w	r10,r7[-8]
8001cf30:	12 98       	mov	r8,r9
8001cf32:	a1 78       	lsl	r8,0x1
8001cf34:	12 08       	add	r8,r9
8001cf36:	2f f8       	sub	r8,-1
8001cf38:	a5 68       	lsl	r8,0x4
8001cf3a:	f4 08 00 08 	add	r8,r10,r8
8001cf3e:	70 08       	ld.w	r8,r8[0x0]
8001cf40:	58 08       	cp.w	r8,0
8001cf42:	ce 51       	brne	8001cf0c <add_task+0x28>
	if (task_slot >= ts->number_of_tasks) return false;
8001cf44:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001cf48:	11 88       	ld.ub	r8,r8[0x0]
8001cf4a:	10 99       	mov	r9,r8
8001cf4c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001cf50:	10 39       	cp.w	r9,r8
8001cf52:	e0 89 00 04 	brgt	8001cf5a <add_task+0x76>
8001cf56:	30 08       	mov	r8,0
8001cf58:	c2 08       	rjmp	8001cf98 <add_task+0xb4>
	register_task(ts,  task_slot,   repeat_period, run_mode,  call_function);
8001cf5a:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001cf5e:	ee f9 ff f0 	ld.w	r9,r7[-16]
8001cf62:	ee fa ff f4 	ld.w	r10,r7[-12]
8001cf66:	ee fb ff fc 	ld.w	r11,r7[-4]
8001cf6a:	ee fc ff f8 	ld.w	r12,r7[-8]
8001cf6e:	f0 16 00 59 	mcall	r6[356]
	ts->tasks[task_slot].task_id=task_id;
8001cf72:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001cf76:	ee f8 ff e8 	ld.w	r8,r7[-24]
8001cf7a:	f5 d8 b0 10 	bfexts	r10,r8,0x0,0x10
8001cf7e:	ee fb ff f8 	ld.w	r11,r7[-8]
8001cf82:	12 98       	mov	r8,r9
8001cf84:	a1 78       	lsl	r8,0x1
8001cf86:	12 08       	add	r8,r9
8001cf88:	a1 78       	lsl	r8,0x1
8001cf8a:	2f f8       	sub	r8,-1
8001cf8c:	a3 78       	lsl	r8,0x3
8001cf8e:	f6 08 00 08 	add	r8,r11,r8
8001cf92:	14 99       	mov	r9,r10
8001cf94:	b0 69       	st.h	r8[0xc],r9
	return true;
8001cf96:	30 18       	mov	r8,1
}
8001cf98:	10 9c       	mov	r12,r8
8001cf9a:	2f ad       	sub	sp,-24
8001cf9c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001cfa0:	80 01       	ld.sh	r1,r0[0x0]
8001cfa2:	cd 72       	brcc	8001cf50 <add_task+0x6c>

8001cfa4 <sort_taskset_by_period>:


void sort_taskset_by_period(task_set *ts){
8001cfa4:	eb cd 40 80 	pushm	r7,lr
8001cfa8:	1a 97       	mov	r7,sp
8001cfaa:	20 fd       	sub	sp,60
8001cfac:	ef 4c ff c4 	st.w	r7[-60],r12
	int i;
	bool sorted=false;
8001cfb0:	30 08       	mov	r8,0
8001cfb2:	ef 68 ff ff 	st.b	r7[-1],r8
	task_entry tmp;
	if (ts->number_of_tasks<2) return;
8001cfb6:	ee f8 ff c4 	ld.w	r8,r7[-60]
8001cfba:	11 89       	ld.ub	r9,r8[0x0]
8001cfbc:	30 18       	mov	r8,1
8001cfbe:	f0 09 18 00 	cp.b	r9,r8
8001cfc2:	e0 8b 01 1d 	brhi	8001d1fc <sort_taskset_by_period+0x258>
8001cfc6:	c2 39       	rjmp	8001d20c <sort_taskset_by_period+0x268>

	while (!sorted) {
		sorted=true;
8001cfc8:	30 18       	mov	r8,1
8001cfca:	ef 68 ff ff 	st.b	r7[-1],r8
		for (i=0; i<ts->number_of_tasks-1; i++) {
8001cfce:	30 08       	mov	r8,0
8001cfd0:	ef 48 ff f8 	st.w	r7[-8],r8
8001cfd4:	c0 99       	rjmp	8001d1e6 <sort_taskset_by_period+0x242>
			if ( ((ts->tasks[i].call_function==NULL)&&(ts->tasks[i+1].call_function!=NULL)) ||
8001cfd6:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001cfda:	ee fa ff c4 	ld.w	r10,r7[-60]
8001cfde:	12 98       	mov	r8,r9
8001cfe0:	a1 78       	lsl	r8,0x1
8001cfe2:	12 08       	add	r8,r9
8001cfe4:	2f f8       	sub	r8,-1
8001cfe6:	a5 68       	lsl	r8,0x4
8001cfe8:	f4 08 00 08 	add	r8,r10,r8
8001cfec:	70 08       	ld.w	r8,r8[0x0]
8001cfee:	58 08       	cp.w	r8,0
8001cff0:	c1 11       	brne	8001d012 <sort_taskset_by_period+0x6e>
8001cff2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001cff6:	f0 c9 ff ff 	sub	r9,r8,-1
8001cffa:	ee fa ff c4 	ld.w	r10,r7[-60]
8001cffe:	12 98       	mov	r8,r9
8001d000:	a1 78       	lsl	r8,0x1
8001d002:	12 08       	add	r8,r9
8001d004:	2f f8       	sub	r8,-1
8001d006:	a5 68       	lsl	r8,0x4
8001d008:	f4 08 00 08 	add	r8,r10,r8
8001d00c:	70 08       	ld.w	r8,r8[0x0]
8001d00e:	58 08       	cp.w	r8,0
8001d010:	c3 e1       	brne	8001d08c <sort_taskset_by_period+0xe8>
				((ts->tasks[i].call_function!=NULL)&&(ts->tasks[i+1].call_function!=NULL) &&
8001d012:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001d016:	ee fa ff c4 	ld.w	r10,r7[-60]
8001d01a:	12 98       	mov	r8,r9
8001d01c:	a1 78       	lsl	r8,0x1
8001d01e:	12 08       	add	r8,r9
8001d020:	2f f8       	sub	r8,-1
8001d022:	a5 68       	lsl	r8,0x4
8001d024:	f4 08 00 08 	add	r8,r10,r8
8001d028:	70 08       	ld.w	r8,r8[0x0]
	if (ts->number_of_tasks<2) return;

	while (!sorted) {
		sorted=true;
		for (i=0; i<ts->number_of_tasks-1; i++) {
			if ( ((ts->tasks[i].call_function==NULL)&&(ts->tasks[i+1].call_function!=NULL)) ||
8001d02a:	58 08       	cp.w	r8,0
8001d02c:	e0 80 00 d8 	breq	8001d1dc <sort_taskset_by_period+0x238>
				((ts->tasks[i].call_function!=NULL)&&(ts->tasks[i+1].call_function!=NULL) &&
8001d030:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001d034:	f0 c9 ff ff 	sub	r9,r8,-1
8001d038:	ee fa ff c4 	ld.w	r10,r7[-60]
8001d03c:	12 98       	mov	r8,r9
8001d03e:	a1 78       	lsl	r8,0x1
8001d040:	12 08       	add	r8,r9
8001d042:	2f f8       	sub	r8,-1
8001d044:	a5 68       	lsl	r8,0x4
8001d046:	f4 08 00 08 	add	r8,r10,r8
8001d04a:	70 08       	ld.w	r8,r8[0x0]
	if (ts->number_of_tasks<2) return;

	while (!sorted) {
		sorted=true;
		for (i=0; i<ts->number_of_tasks-1; i++) {
			if ( ((ts->tasks[i].call_function==NULL)&&(ts->tasks[i+1].call_function!=NULL)) ||
8001d04c:	58 08       	cp.w	r8,0
8001d04e:	e0 80 00 c7 	breq	8001d1dc <sort_taskset_by_period+0x238>
				((ts->tasks[i].call_function!=NULL)&&(ts->tasks[i+1].call_function!=NULL) &&
				(ts->tasks[i].repeat_period > ts->tasks[i+1].repeat_period))) {
8001d052:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001d056:	ee fa ff c4 	ld.w	r10,r7[-60]
8001d05a:	12 98       	mov	r8,r9
8001d05c:	a1 78       	lsl	r8,0x1
8001d05e:	12 08       	add	r8,r9
8001d060:	a5 68       	lsl	r8,0x4
8001d062:	f4 08 00 08 	add	r8,r10,r8
8001d066:	2e 08       	sub	r8,-32
8001d068:	70 0a       	ld.w	r10,r8[0x0]
8001d06a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001d06e:	f0 c9 ff ff 	sub	r9,r8,-1
8001d072:	ee fb ff c4 	ld.w	r11,r7[-60]
8001d076:	12 98       	mov	r8,r9
8001d078:	a1 78       	lsl	r8,0x1
8001d07a:	12 08       	add	r8,r9
8001d07c:	a5 68       	lsl	r8,0x4
8001d07e:	f6 08 00 08 	add	r8,r11,r8
8001d082:	2e 08       	sub	r8,-32
8001d084:	70 08       	ld.w	r8,r8[0x0]
	if (ts->number_of_tasks<2) return;

	while (!sorted) {
		sorted=true;
		for (i=0; i<ts->number_of_tasks-1; i++) {
			if ( ((ts->tasks[i].call_function==NULL)&&(ts->tasks[i+1].call_function!=NULL)) ||
8001d086:	10 3a       	cp.w	r10,r8
8001d088:	e0 88 00 aa 	brls	8001d1dc <sort_taskset_by_period+0x238>
				((ts->tasks[i].call_function!=NULL)&&(ts->tasks[i+1].call_function!=NULL) &&
				(ts->tasks[i].repeat_period > ts->tasks[i+1].repeat_period))) {
				tmp=ts->tasks[i];
8001d08c:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001d090:	ee fa ff c4 	ld.w	r10,r7[-60]
8001d094:	12 98       	mov	r8,r9
8001d096:	a1 78       	lsl	r8,0x1
8001d098:	12 08       	add	r8,r9
8001d09a:	a5 68       	lsl	r8,0x4
8001d09c:	f4 08 00 08 	add	r8,r10,r8
8001d0a0:	2f 48       	sub	r8,-12
8001d0a2:	ee cb 00 38 	sub	r11,r7,56
8001d0a6:	10 9a       	mov	r10,r8
8001d0a8:	f6 c8 00 00 	sub	r8,r11,0
8001d0ac:	f4 c9 00 00 	sub	r9,r10,0
8001d0b0:	72 0c       	ld.w	r12,r9[0x0]
8001d0b2:	91 0c       	st.w	r8[0x0],r12
8001d0b4:	72 1c       	ld.w	r12,r9[0x4]
8001d0b6:	91 1c       	st.w	r8[0x4],r12
8001d0b8:	72 2c       	ld.w	r12,r9[0x8]
8001d0ba:	91 2c       	st.w	r8[0x8],r12
8001d0bc:	72 39       	ld.w	r9,r9[0xc]
8001d0be:	91 39       	st.w	r8[0xc],r9
8001d0c0:	f6 c8 ff f0 	sub	r8,r11,-16
8001d0c4:	f4 c9 ff f0 	sub	r9,r10,-16
8001d0c8:	72 0c       	ld.w	r12,r9[0x0]
8001d0ca:	91 0c       	st.w	r8[0x0],r12
8001d0cc:	72 1c       	ld.w	r12,r9[0x4]
8001d0ce:	91 1c       	st.w	r8[0x4],r12
8001d0d0:	72 2c       	ld.w	r12,r9[0x8]
8001d0d2:	91 2c       	st.w	r8[0x8],r12
8001d0d4:	72 39       	ld.w	r9,r9[0xc]
8001d0d6:	91 39       	st.w	r8[0xc],r9
8001d0d8:	f6 c8 ff e0 	sub	r8,r11,-32
8001d0dc:	f4 c9 ff e0 	sub	r9,r10,-32
8001d0e0:	72 0a       	ld.w	r10,r9[0x0]
8001d0e2:	91 0a       	st.w	r8[0x0],r10
8001d0e4:	72 1a       	ld.w	r10,r9[0x4]
8001d0e6:	91 1a       	st.w	r8[0x4],r10
8001d0e8:	72 2a       	ld.w	r10,r9[0x8]
8001d0ea:	91 2a       	st.w	r8[0x8],r10
8001d0ec:	72 39       	ld.w	r9,r9[0xc]
8001d0ee:	91 39       	st.w	r8[0xc],r9
				ts->tasks[i]=ts->tasks[i+1];
8001d0f0:	ee fa ff f8 	ld.w	r10,r7[-8]
8001d0f4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001d0f8:	f0 c9 ff ff 	sub	r9,r8,-1
8001d0fc:	ee fb ff c4 	ld.w	r11,r7[-60]
8001d100:	14 98       	mov	r8,r10
8001d102:	a1 78       	lsl	r8,0x1
8001d104:	14 08       	add	r8,r10
8001d106:	a5 68       	lsl	r8,0x4
8001d108:	f6 08 00 08 	add	r8,r11,r8
8001d10c:	f0 ca ff f4 	sub	r10,r8,-12
8001d110:	ee fb ff c4 	ld.w	r11,r7[-60]
8001d114:	12 98       	mov	r8,r9
8001d116:	a1 78       	lsl	r8,0x1
8001d118:	12 08       	add	r8,r9
8001d11a:	a5 68       	lsl	r8,0x4
8001d11c:	f6 08 00 08 	add	r8,r11,r8
8001d120:	2f 48       	sub	r8,-12
8001d122:	14 9b       	mov	r11,r10
8001d124:	10 9a       	mov	r10,r8
8001d126:	f6 c8 00 00 	sub	r8,r11,0
8001d12a:	f4 c9 00 00 	sub	r9,r10,0
8001d12e:	72 0c       	ld.w	r12,r9[0x0]
8001d130:	91 0c       	st.w	r8[0x0],r12
8001d132:	72 1c       	ld.w	r12,r9[0x4]
8001d134:	91 1c       	st.w	r8[0x4],r12
8001d136:	72 2c       	ld.w	r12,r9[0x8]
8001d138:	91 2c       	st.w	r8[0x8],r12
8001d13a:	72 39       	ld.w	r9,r9[0xc]
8001d13c:	91 39       	st.w	r8[0xc],r9
8001d13e:	f6 c8 ff f0 	sub	r8,r11,-16
8001d142:	f4 c9 ff f0 	sub	r9,r10,-16
8001d146:	72 0c       	ld.w	r12,r9[0x0]
8001d148:	91 0c       	st.w	r8[0x0],r12
8001d14a:	72 1c       	ld.w	r12,r9[0x4]
8001d14c:	91 1c       	st.w	r8[0x4],r12
8001d14e:	72 2c       	ld.w	r12,r9[0x8]
8001d150:	91 2c       	st.w	r8[0x8],r12
8001d152:	72 39       	ld.w	r9,r9[0xc]
8001d154:	91 39       	st.w	r8[0xc],r9
8001d156:	f6 c8 ff e0 	sub	r8,r11,-32
8001d15a:	f4 c9 ff e0 	sub	r9,r10,-32
8001d15e:	72 0a       	ld.w	r10,r9[0x0]
8001d160:	91 0a       	st.w	r8[0x0],r10
8001d162:	72 1a       	ld.w	r10,r9[0x4]
8001d164:	91 1a       	st.w	r8[0x4],r10
8001d166:	72 2a       	ld.w	r10,r9[0x8]
8001d168:	91 2a       	st.w	r8[0x8],r10
8001d16a:	72 39       	ld.w	r9,r9[0xc]
8001d16c:	91 39       	st.w	r8[0xc],r9
				ts->tasks[i+1]=tmp;		
8001d16e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001d172:	f0 c9 ff ff 	sub	r9,r8,-1
8001d176:	ee fa ff c4 	ld.w	r10,r7[-60]
8001d17a:	12 98       	mov	r8,r9
8001d17c:	a1 78       	lsl	r8,0x1
8001d17e:	12 08       	add	r8,r9
8001d180:	a5 68       	lsl	r8,0x4
8001d182:	f4 08 00 08 	add	r8,r10,r8
8001d186:	2f 48       	sub	r8,-12
8001d188:	10 9b       	mov	r11,r8
8001d18a:	ee ca 00 38 	sub	r10,r7,56
8001d18e:	f6 c8 00 00 	sub	r8,r11,0
8001d192:	f4 c9 00 00 	sub	r9,r10,0
8001d196:	72 0c       	ld.w	r12,r9[0x0]
8001d198:	91 0c       	st.w	r8[0x0],r12
8001d19a:	72 1c       	ld.w	r12,r9[0x4]
8001d19c:	91 1c       	st.w	r8[0x4],r12
8001d19e:	72 2c       	ld.w	r12,r9[0x8]
8001d1a0:	91 2c       	st.w	r8[0x8],r12
8001d1a2:	72 39       	ld.w	r9,r9[0xc]
8001d1a4:	91 39       	st.w	r8[0xc],r9
8001d1a6:	f6 c8 ff f0 	sub	r8,r11,-16
8001d1aa:	f4 c9 ff f0 	sub	r9,r10,-16
8001d1ae:	72 0c       	ld.w	r12,r9[0x0]
8001d1b0:	91 0c       	st.w	r8[0x0],r12
8001d1b2:	72 1c       	ld.w	r12,r9[0x4]
8001d1b4:	91 1c       	st.w	r8[0x4],r12
8001d1b6:	72 2c       	ld.w	r12,r9[0x8]
8001d1b8:	91 2c       	st.w	r8[0x8],r12
8001d1ba:	72 39       	ld.w	r9,r9[0xc]
8001d1bc:	91 39       	st.w	r8[0xc],r9
8001d1be:	f6 c8 ff e0 	sub	r8,r11,-32
8001d1c2:	f4 c9 ff e0 	sub	r9,r10,-32
8001d1c6:	72 0a       	ld.w	r10,r9[0x0]
8001d1c8:	91 0a       	st.w	r8[0x0],r10
8001d1ca:	72 1a       	ld.w	r10,r9[0x4]
8001d1cc:	91 1a       	st.w	r8[0x4],r10
8001d1ce:	72 2a       	ld.w	r10,r9[0x8]
8001d1d0:	91 2a       	st.w	r8[0x8],r10
8001d1d2:	72 39       	ld.w	r9,r9[0xc]
8001d1d4:	91 39       	st.w	r8[0xc],r9
				sorted=false;
8001d1d6:	30 08       	mov	r8,0
8001d1d8:	ef 68 ff ff 	st.b	r7[-1],r8
	task_entry tmp;
	if (ts->number_of_tasks<2) return;

	while (!sorted) {
		sorted=true;
		for (i=0; i<ts->number_of_tasks-1; i++) {
8001d1dc:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001d1e0:	2f f8       	sub	r8,-1
8001d1e2:	ef 48 ff f8 	st.w	r7[-8],r8
8001d1e6:	ee f8 ff c4 	ld.w	r8,r7[-60]
8001d1ea:	11 88       	ld.ub	r8,r8[0x0]
8001d1ec:	f0 c9 00 01 	sub	r9,r8,1
8001d1f0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001d1f4:	10 39       	cp.w	r9,r8
8001d1f6:	fe 99 fe f0 	brgt	8001cfd6 <sort_taskset_by_period+0x32>
8001d1fa:	c0 28       	rjmp	8001d1fe <sort_taskset_by_period+0x25a>
	int i;
	bool sorted=false;
	task_entry tmp;
	if (ts->number_of_tasks<2) return;

	while (!sorted) {
8001d1fc:	d7 03       	nop
8001d1fe:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8001d202:	ec 18 00 01 	eorl	r8,0x1
8001d206:	5c 58       	castu.b	r8
8001d208:	fe 91 fe e0 	brne	8001cfc8 <sort_taskset_by_period+0x24>
				ts->tasks[i+1]=tmp;		
				sorted=false;
			}
		}
	}		
}
8001d20c:	2f 1d       	sub	sp,-60
8001d20e:	e3 cd 80 80 	ldm	sp++,r7,pc

8001d212 <run_scheduler_update>:

int run_scheduler_update(task_set *ts, uint8_t schedule_strategy) {
8001d212:	eb cd 40 e8 	pushm	r3,r5-r7,lr
8001d216:	1a 97       	mov	r7,sp
8001d218:	20 9d       	sub	sp,36
8001d21a:	fe f6 04 0a 	ld.w	r6,pc[1034]
8001d21e:	1e 26       	rsub	r6,pc
8001d220:	ef 4c ff e0 	st.w	r7[-32],r12
8001d224:	16 98       	mov	r8,r11
8001d226:	ef 68 ff dc 	st.b	r7[-36],r8
	int i;
	int realtime_violation=0;
8001d22a:	30 08       	mov	r8,0
8001d22c:	ef 48 ff e8 	st.w	r7[-24],r8
	function_pointer call_task;
	task_return_t treturn;
	for (i=ts->current_schedule_slot; i<ts->number_of_tasks; i++) {
8001d230:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001d234:	70 28       	ld.w	r8,r8[0x8]
8001d236:	ef 48 ff e4 	st.w	r7[-28],r8
8001d23a:	e0 8f 01 e5 	bral	8001d604 <run_scheduler_update+0x3f2>
		uint32_t current_time=GET_TIME;
8001d23e:	f0 16 00 27 	mcall	r6[156]
8001d242:	18 98       	mov	r8,r12
8001d244:	ef 48 ff f4 	st.w	r7[-12],r8
		if ((ts->tasks[i].call_function!=NULL)  && (ts->tasks[i].run_mode!=RUN_NEVER) &&(current_time >= ts->tasks[i].next_run)) {
8001d248:	ee f9 ff e4 	ld.w	r9,r7[-28]
8001d24c:	ee fa ff e0 	ld.w	r10,r7[-32]
8001d250:	12 98       	mov	r8,r9
8001d252:	a1 78       	lsl	r8,0x1
8001d254:	12 08       	add	r8,r9
8001d256:	2f f8       	sub	r8,-1
8001d258:	a5 68       	lsl	r8,0x4
8001d25a:	f4 08 00 08 	add	r8,r10,r8
8001d25e:	70 08       	ld.w	r8,r8[0x0]
8001d260:	58 08       	cp.w	r8,0
8001d262:	e0 80 01 cc 	breq	8001d5fa <run_scheduler_update+0x3e8>
8001d266:	ee f9 ff e4 	ld.w	r9,r7[-28]
8001d26a:	ee fa ff e0 	ld.w	r10,r7[-32]
8001d26e:	12 98       	mov	r8,r9
8001d270:	a1 78       	lsl	r8,0x1
8001d272:	12 08       	add	r8,r9
8001d274:	a5 68       	lsl	r8,0x4
8001d276:	f4 08 00 08 	add	r8,r10,r8
8001d27a:	2e 88       	sub	r8,-24
8001d27c:	70 08       	ld.w	r8,r8[0x0]
8001d27e:	58 08       	cp.w	r8,0
8001d280:	e0 80 01 bd 	breq	8001d5fa <run_scheduler_update+0x3e8>
8001d284:	ee f9 ff e4 	ld.w	r9,r7[-28]
8001d288:	ee fa ff e0 	ld.w	r10,r7[-32]
8001d28c:	12 98       	mov	r8,r9
8001d28e:	a1 78       	lsl	r8,0x1
8001d290:	12 08       	add	r8,r9
8001d292:	a5 68       	lsl	r8,0x4
8001d294:	f4 08 00 08 	add	r8,r10,r8
8001d298:	2d c8       	sub	r8,-36
8001d29a:	70 09       	ld.w	r9,r8[0x0]
8001d29c:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001d2a0:	10 39       	cp.w	r9,r8
8001d2a2:	e0 8b 01 ac 	brhi	8001d5fa <run_scheduler_update+0x3e8>
			uint32_t delay=current_time - (ts->tasks[i].next_run);
8001d2a6:	ee f9 ff e4 	ld.w	r9,r7[-28]
8001d2aa:	ee fa ff e0 	ld.w	r10,r7[-32]
8001d2ae:	12 98       	mov	r8,r9
8001d2b0:	a1 78       	lsl	r8,0x1
8001d2b2:	12 08       	add	r8,r9
8001d2b4:	a5 68       	lsl	r8,0x4
8001d2b6:	f4 08 00 08 	add	r8,r10,r8
8001d2ba:	2d c8       	sub	r8,-36
8001d2bc:	70 08       	ld.w	r8,r8[0x0]
8001d2be:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001d2c2:	10 19       	sub	r9,r8
8001d2c4:	ef 49 ff f8 	st.w	r7[-8],r9
			uint32_t task_start_time;

		    task_start_time=GET_TIME;
8001d2c8:	f0 16 00 27 	mcall	r6[156]
8001d2cc:	18 98       	mov	r8,r12
8001d2ce:	ef 48 ff fc 	st.w	r7[-4],r8
		    call_task=ts->tasks[i].call_function;
8001d2d2:	ee f9 ff e4 	ld.w	r9,r7[-28]
8001d2d6:	ee fa ff e0 	ld.w	r10,r7[-32]
8001d2da:	12 98       	mov	r8,r9
8001d2dc:	a1 78       	lsl	r8,0x1
8001d2de:	12 08       	add	r8,r9
8001d2e0:	2f f8       	sub	r8,-1
8001d2e2:	a5 68       	lsl	r8,0x4
8001d2e4:	f4 08 00 08 	add	r8,r10,r8
8001d2e8:	70 08       	ld.w	r8,r8[0x0]
8001d2ea:	ef 48 ff ec 	st.w	r7[-20],r8
		    //dbg_print_num(i, 16); dbg_print(" ");dbg_print_num(call_task, 16); dbg_print("\n");
		    treturn = call_task();
8001d2ee:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001d2f2:	5d 18       	icall	r8
8001d2f4:	18 98       	mov	r8,r12
8001d2f6:	ef 48 ff f0 	st.w	r7[-16],r8


			
			switch (ts->tasks[i].timing_mode) {
8001d2fa:	ee f9 ff e4 	ld.w	r9,r7[-28]
8001d2fe:	ee fa ff e0 	ld.w	r10,r7[-32]
8001d302:	12 98       	mov	r8,r9
8001d304:	a1 78       	lsl	r8,0x1
8001d306:	12 08       	add	r8,r9
8001d308:	2f f8       	sub	r8,-1
8001d30a:	a5 68       	lsl	r8,0x4
8001d30c:	f4 08 00 08 	add	r8,r10,r8
8001d310:	2f 48       	sub	r8,-12
8001d312:	70 08       	ld.w	r8,r8[0x0]
8001d314:	58 08       	cp.w	r8,0
8001d316:	c0 40       	breq	8001d31e <run_scheduler_update+0x10c>
8001d318:	58 18       	cp.w	r8,1
8001d31a:	c2 90       	breq	8001d36c <run_scheduler_update+0x15a>
8001d31c:	c4 58       	rjmp	8001d3a6 <run_scheduler_update+0x194>
				case PERIODIC_ABSOLUTE:
					ts->tasks[i].next_run += ts->tasks[i].repeat_period;
8001d31e:	ee f9 ff e4 	ld.w	r9,r7[-28]
8001d322:	ee fa ff e4 	ld.w	r10,r7[-28]
8001d326:	ee fb ff e0 	ld.w	r11,r7[-32]
8001d32a:	14 98       	mov	r8,r10
8001d32c:	a1 78       	lsl	r8,0x1
8001d32e:	14 08       	add	r8,r10
8001d330:	a5 68       	lsl	r8,0x4
8001d332:	f6 08 00 08 	add	r8,r11,r8
8001d336:	2d c8       	sub	r8,-36
8001d338:	70 0b       	ld.w	r11,r8[0x0]
8001d33a:	ee fa ff e4 	ld.w	r10,r7[-28]
8001d33e:	ee fc ff e0 	ld.w	r12,r7[-32]
8001d342:	14 98       	mov	r8,r10
8001d344:	a1 78       	lsl	r8,0x1
8001d346:	14 08       	add	r8,r10
8001d348:	a5 68       	lsl	r8,0x4
8001d34a:	f8 08 00 08 	add	r8,r12,r8
8001d34e:	2e 08       	sub	r8,-32
8001d350:	70 08       	ld.w	r8,r8[0x0]
8001d352:	f6 08 00 0a 	add	r10,r11,r8
8001d356:	ee fb ff e0 	ld.w	r11,r7[-32]
8001d35a:	12 98       	mov	r8,r9
8001d35c:	a1 78       	lsl	r8,0x1
8001d35e:	12 08       	add	r8,r9
8001d360:	a5 68       	lsl	r8,0x4
8001d362:	f6 08 00 08 	add	r8,r11,r8
8001d366:	2d c8       	sub	r8,-36
8001d368:	91 0a       	st.w	r8[0x0],r10
				break;
8001d36a:	c1 e8       	rjmp	8001d3a6 <run_scheduler_update+0x194>
				case PERIODIC_RELATIVE:
					ts->tasks[i].next_run = GET_TIME + ts->tasks[i].repeat_period;
8001d36c:	ee f5 ff e4 	ld.w	r5,r7[-28]
8001d370:	f0 16 00 27 	mcall	r6[156]
8001d374:	18 9a       	mov	r10,r12
8001d376:	ee f9 ff e4 	ld.w	r9,r7[-28]
8001d37a:	ee fb ff e0 	ld.w	r11,r7[-32]
8001d37e:	12 98       	mov	r8,r9
8001d380:	a1 78       	lsl	r8,0x1
8001d382:	12 08       	add	r8,r9
8001d384:	a5 68       	lsl	r8,0x4
8001d386:	f6 08 00 08 	add	r8,r11,r8
8001d38a:	2e 08       	sub	r8,-32
8001d38c:	70 08       	ld.w	r8,r8[0x0]
8001d38e:	f4 08 00 09 	add	r9,r10,r8
8001d392:	ee fa ff e0 	ld.w	r10,r7[-32]
8001d396:	0a 98       	mov	r8,r5
8001d398:	a1 78       	lsl	r8,0x1
8001d39a:	0a 08       	add	r8,r5
8001d39c:	a5 68       	lsl	r8,0x4
8001d39e:	f4 08 00 08 	add	r8,r10,r8
8001d3a2:	2d c8       	sub	r8,-36
8001d3a4:	91 09       	st.w	r8[0x0],r9
				break;
			}
			if (ts->tasks[i].run_mode==RUN_ONCE) ts->tasks[i].run_mode=RUN_NEVER;
8001d3a6:	ee f9 ff e4 	ld.w	r9,r7[-28]
8001d3aa:	ee fa ff e0 	ld.w	r10,r7[-32]
8001d3ae:	12 98       	mov	r8,r9
8001d3b0:	a1 78       	lsl	r8,0x1
8001d3b2:	12 08       	add	r8,r9
8001d3b4:	a5 68       	lsl	r8,0x4
8001d3b6:	f4 08 00 08 	add	r8,r10,r8
8001d3ba:	2e 88       	sub	r8,-24
8001d3bc:	70 08       	ld.w	r8,r8[0x0]
8001d3be:	58 18       	cp.w	r8,1
8001d3c0:	c0 e1       	brne	8001d3dc <run_scheduler_update+0x1ca>
8001d3c2:	ee f9 ff e4 	ld.w	r9,r7[-28]
8001d3c6:	ee fa ff e0 	ld.w	r10,r7[-32]
8001d3ca:	12 98       	mov	r8,r9
8001d3cc:	a1 78       	lsl	r8,0x1
8001d3ce:	12 08       	add	r8,r9
8001d3d0:	a5 68       	lsl	r8,0x4
8001d3d2:	f4 08 00 08 	add	r8,r10,r8
8001d3d6:	2e 88       	sub	r8,-24
8001d3d8:	30 09       	mov	r9,0
8001d3da:	91 09       	st.w	r8[0x0],r9
			if (ts->tasks[i].next_run < current_time) {
8001d3dc:	ee f9 ff e4 	ld.w	r9,r7[-28]
8001d3e0:	ee fa ff e0 	ld.w	r10,r7[-32]
8001d3e4:	12 98       	mov	r8,r9
8001d3e6:	a1 78       	lsl	r8,0x1
8001d3e8:	12 08       	add	r8,r9
8001d3ea:	a5 68       	lsl	r8,0x4
8001d3ec:	f4 08 00 08 	add	r8,r10,r8
8001d3f0:	2d c8       	sub	r8,-36
8001d3f2:	70 09       	ld.w	r9,r8[0x0]
8001d3f4:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001d3f8:	10 39       	cp.w	r9,r8
8001d3fa:	c3 92       	brcc	8001d46c <run_scheduler_update+0x25a>
				realtime_violation=-i; //realtime violation!!
8001d3fc:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001d400:	5c 38       	neg	r8
8001d402:	ef 48 ff e8 	st.w	r7[-24],r8
				ts->tasks[i].rt_violations++;
8001d406:	ee f9 ff e4 	ld.w	r9,r7[-28]
8001d40a:	ee fa ff e0 	ld.w	r10,r7[-32]
8001d40e:	12 98       	mov	r8,r9
8001d410:	a1 78       	lsl	r8,0x1
8001d412:	12 08       	add	r8,r9
8001d414:	a5 68       	lsl	r8,0x4
8001d416:	f4 08 00 08 	add	r8,r10,r8
8001d41a:	2c 88       	sub	r8,-56
8001d41c:	70 08       	ld.w	r8,r8[0x0]
8001d41e:	f0 ca ff ff 	sub	r10,r8,-1
8001d422:	ee fb ff e0 	ld.w	r11,r7[-32]
8001d426:	12 98       	mov	r8,r9
8001d428:	a1 78       	lsl	r8,0x1
8001d42a:	12 08       	add	r8,r9
8001d42c:	a5 68       	lsl	r8,0x4
8001d42e:	f6 08 00 08 	add	r8,r11,r8
8001d432:	2c 88       	sub	r8,-56
8001d434:	91 0a       	st.w	r8[0x0],r10
				ts->tasks[i].next_run=current_time + ts->tasks[i].repeat_period;
8001d436:	ee f9 ff e4 	ld.w	r9,r7[-28]
8001d43a:	ee fa ff e4 	ld.w	r10,r7[-28]
8001d43e:	ee fb ff e0 	ld.w	r11,r7[-32]
8001d442:	14 98       	mov	r8,r10
8001d444:	a1 78       	lsl	r8,0x1
8001d446:	14 08       	add	r8,r10
8001d448:	a5 68       	lsl	r8,0x4
8001d44a:	f6 08 00 08 	add	r8,r11,r8
8001d44e:	2e 08       	sub	r8,-32
8001d450:	70 0a       	ld.w	r10,r8[0x0]
8001d452:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001d456:	10 0a       	add	r10,r8
8001d458:	ee fb ff e0 	ld.w	r11,r7[-32]
8001d45c:	12 98       	mov	r8,r9
8001d45e:	a1 78       	lsl	r8,0x1
8001d460:	12 08       	add	r8,r9
8001d462:	a5 68       	lsl	r8,0x4
8001d464:	f6 08 00 08 	add	r8,r11,r8
8001d468:	2d c8       	sub	r8,-36
8001d46a:	91 0a       	st.w	r8[0x0],r10
			}
			
			
			ts->tasks[i].delay_avg= (7*ts->tasks[i].delay_avg + delay)/8;
8001d46c:	ee fc ff e4 	ld.w	r12,r7[-28]
8001d470:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001d474:	ee fa ff e0 	ld.w	r10,r7[-32]
8001d478:	f0 c9 ff ff 	sub	r9,r8,-1
8001d47c:	12 98       	mov	r8,r9
8001d47e:	a1 78       	lsl	r8,0x1
8001d480:	12 08       	add	r8,r9
8001d482:	a5 68       	lsl	r8,0x4
8001d484:	f4 08 00 08 	add	r8,r10,r8
8001d488:	70 09       	ld.w	r9,r8[0x0]
8001d48a:	12 98       	mov	r8,r9
8001d48c:	a3 78       	lsl	r8,0x3
8001d48e:	f0 09 01 09 	sub	r9,r8,r9
8001d492:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001d496:	f2 08 00 08 	add	r8,r9,r8
8001d49a:	f0 0a 16 03 	lsr	r10,r8,0x3
8001d49e:	ee fb ff e0 	ld.w	r11,r7[-32]
8001d4a2:	f8 c9 ff ff 	sub	r9,r12,-1
8001d4a6:	12 98       	mov	r8,r9
8001d4a8:	a1 78       	lsl	r8,0x1
8001d4aa:	12 08       	add	r8,r9
8001d4ac:	a5 68       	lsl	r8,0x4
8001d4ae:	f6 08 00 08 	add	r8,r11,r8
8001d4b2:	91 0a       	st.w	r8[0x0],r10
			if (delay>ts->tasks[i].delay_max) ts->tasks[i].delay_max=delay;
8001d4b4:	ee f9 ff e4 	ld.w	r9,r7[-28]
8001d4b8:	ee fa ff e0 	ld.w	r10,r7[-32]
8001d4bc:	12 98       	mov	r8,r9
8001d4be:	a1 78       	lsl	r8,0x1
8001d4c0:	12 08       	add	r8,r9
8001d4c2:	a5 68       	lsl	r8,0x4
8001d4c4:	f4 08 00 08 	add	r8,r10,r8
8001d4c8:	2d 48       	sub	r8,-44
8001d4ca:	70 09       	ld.w	r9,r8[0x0]
8001d4cc:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001d4d0:	10 39       	cp.w	r9,r8
8001d4d2:	c0 f2       	brcc	8001d4f0 <run_scheduler_update+0x2de>
8001d4d4:	ee f9 ff e4 	ld.w	r9,r7[-28]
8001d4d8:	ee fa ff e0 	ld.w	r10,r7[-32]
8001d4dc:	12 98       	mov	r8,r9
8001d4de:	a1 78       	lsl	r8,0x1
8001d4e0:	12 08       	add	r8,r9
8001d4e2:	a5 68       	lsl	r8,0x4
8001d4e4:	f4 08 00 08 	add	r8,r10,r8
8001d4e8:	2d 48       	sub	r8,-44
8001d4ea:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001d4ee:	91 09       	st.w	r8[0x0],r9
			
			ts->tasks[i].delay_var_squared=(15*ts->tasks[i].delay_var_squared+(delay - ts->tasks[i].delay_avg)*(delay - ts->tasks[i].delay_avg))/16;
8001d4f0:	ee f9 ff e4 	ld.w	r9,r7[-28]
8001d4f4:	ee fa ff e4 	ld.w	r10,r7[-28]
8001d4f8:	ee fb ff e0 	ld.w	r11,r7[-32]
8001d4fc:	14 98       	mov	r8,r10
8001d4fe:	a1 78       	lsl	r8,0x1
8001d500:	14 08       	add	r8,r10
8001d502:	a5 68       	lsl	r8,0x4
8001d504:	f6 08 00 08 	add	r8,r11,r8
8001d508:	2c c8       	sub	r8,-52
8001d50a:	70 0a       	ld.w	r10,r8[0x0]
8001d50c:	14 98       	mov	r8,r10
8001d50e:	a5 68       	lsl	r8,0x4
8001d510:	f0 0a 01 0b 	sub	r11,r8,r10
8001d514:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001d518:	ee fc ff e0 	ld.w	r12,r7[-32]
8001d51c:	f0 ca ff ff 	sub	r10,r8,-1
8001d520:	14 98       	mov	r8,r10
8001d522:	a1 78       	lsl	r8,0x1
8001d524:	14 08       	add	r8,r10
8001d526:	a5 68       	lsl	r8,0x4
8001d528:	f8 08 00 08 	add	r8,r12,r8
8001d52c:	70 08       	ld.w	r8,r8[0x0]
8001d52e:	ee fa ff f8 	ld.w	r10,r7[-8]
8001d532:	f4 08 01 0c 	sub	r12,r10,r8
8001d536:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001d53a:	ee fe ff e0 	ld.w	lr,r7[-32]
8001d53e:	f0 ca ff ff 	sub	r10,r8,-1
8001d542:	14 98       	mov	r8,r10
8001d544:	a1 78       	lsl	r8,0x1
8001d546:	14 08       	add	r8,r10
8001d548:	a5 68       	lsl	r8,0x4
8001d54a:	fc 08 00 08 	add	r8,lr,r8
8001d54e:	70 08       	ld.w	r8,r8[0x0]
8001d550:	ee fa ff f8 	ld.w	r10,r7[-8]
8001d554:	f4 08 01 08 	sub	r8,r10,r8
8001d558:	f8 08 02 48 	mul	r8,r12,r8
8001d55c:	f6 08 00 08 	add	r8,r11,r8
8001d560:	f0 0a 16 04 	lsr	r10,r8,0x4
8001d564:	ee fb ff e0 	ld.w	r11,r7[-32]
8001d568:	12 98       	mov	r8,r9
8001d56a:	a1 78       	lsl	r8,0x1
8001d56c:	12 08       	add	r8,r9
8001d56e:	a5 68       	lsl	r8,0x4
8001d570:	f6 08 00 08 	add	r8,r11,r8
8001d574:	2c c8       	sub	r8,-52
8001d576:	91 0a       	st.w	r8[0x0],r10
			
			ts->tasks[i].execution_time= (7*ts->tasks[i].execution_time + (GET_TIME-task_start_time))/8;
8001d578:	ee f5 ff e4 	ld.w	r5,r7[-28]
8001d57c:	ee f9 ff e4 	ld.w	r9,r7[-28]
8001d580:	ee fa ff e0 	ld.w	r10,r7[-32]
8001d584:	12 98       	mov	r8,r9
8001d586:	a1 78       	lsl	r8,0x1
8001d588:	12 08       	add	r8,r9
8001d58a:	a5 68       	lsl	r8,0x4
8001d58c:	f4 08 00 08 	add	r8,r10,r8
8001d590:	2d 88       	sub	r8,-40
8001d592:	70 09       	ld.w	r9,r8[0x0]
8001d594:	12 98       	mov	r8,r9
8001d596:	a3 78       	lsl	r8,0x3
8001d598:	f0 09 01 03 	sub	r3,r8,r9
8001d59c:	f0 16 00 27 	mcall	r6[156]
8001d5a0:	18 99       	mov	r9,r12
8001d5a2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001d5a6:	f2 08 01 08 	sub	r8,r9,r8
8001d5aa:	e6 08 00 08 	add	r8,r3,r8
8001d5ae:	f0 09 16 03 	lsr	r9,r8,0x3
8001d5b2:	ee fa ff e0 	ld.w	r10,r7[-32]
8001d5b6:	0a 98       	mov	r8,r5
8001d5b8:	a1 78       	lsl	r8,0x1
8001d5ba:	0a 08       	add	r8,r5
8001d5bc:	a5 68       	lsl	r8,0x4
8001d5be:	f4 08 00 08 	add	r8,r10,r8
8001d5c2:	2d 88       	sub	r8,-40
8001d5c4:	91 09       	st.w	r8[0x0],r9
						
			switch (schedule_strategy) {
8001d5c6:	ef 38 ff dc 	ld.ub	r8,r7[-36]
8001d5ca:	58 18       	cp.w	r8,1
8001d5cc:	c0 81       	brne	8001d5dc <run_scheduler_update+0x3ca>
			case FIXED_PRIORITY: 
				ts->current_schedule_slot=0;
8001d5ce:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001d5d2:	30 09       	mov	r9,0
8001d5d4:	91 29       	st.w	r8[0x8],r9
				return realtime_violation;
8001d5d6:	ee f8 ff e8 	ld.w	r8,r7[-24]
8001d5da:	c2 08       	rjmp	8001d61a <run_scheduler_update+0x408>
				
			default:
			case ROUND_ROBIN:
				// round robin scheme - scheduler will pick up where it left.
				if (i==ts->number_of_tasks) ts->current_schedule_slot=0;
8001d5dc:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001d5e0:	11 88       	ld.ub	r8,r8[0x0]
8001d5e2:	10 99       	mov	r9,r8
8001d5e4:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001d5e8:	10 39       	cp.w	r9,r8
8001d5ea:	c0 51       	brne	8001d5f4 <run_scheduler_update+0x3e2>
8001d5ec:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001d5f0:	30 09       	mov	r9,0
8001d5f2:	91 29       	st.w	r8[0x8],r9
				return realtime_violation;
8001d5f4:	ee f8 ff e8 	ld.w	r8,r7[-24]
8001d5f8:	c1 18       	rjmp	8001d61a <run_scheduler_update+0x408>
int run_scheduler_update(task_set *ts, uint8_t schedule_strategy) {
	int i;
	int realtime_violation=0;
	function_pointer call_task;
	task_return_t treturn;
	for (i=ts->current_schedule_slot; i<ts->number_of_tasks; i++) {
8001d5fa:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001d5fe:	2f f8       	sub	r8,-1
8001d600:	ef 48 ff e4 	st.w	r7[-28],r8
8001d604:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001d608:	11 88       	ld.ub	r8,r8[0x0]
8001d60a:	10 99       	mov	r9,r8
8001d60c:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001d610:	10 39       	cp.w	r9,r8
8001d612:	fe 99 fe 16 	brgt	8001d23e <run_scheduler_update+0x2c>
				return realtime_violation;
			}
			
		}
	}
	return realtime_violation;;
8001d616:	ee f8 ff e8 	ld.w	r8,r7[-24]
}
8001d61a:	10 9c       	mov	r12,r8
8001d61c:	2f 7d       	sub	sp,-36
8001d61e:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
8001d622:	00 00       	add	r0,r0
8001d624:	80 01       	ld.sh	r1,r0[0x0]
8001d626:	d0 a2       	popm	r4-r7,r10

8001d628 <get_task_by_id>:


task_entry* get_task_by_id(task_set *ts, uint16_t task_id){
8001d628:	eb cd 40 80 	pushm	r7,lr
8001d62c:	1a 97       	mov	r7,sp
8001d62e:	20 3d       	sub	sp,12
8001d630:	ef 4c ff f8 	st.w	r7[-8],r12
8001d634:	16 98       	mov	r8,r11
8001d636:	ef 58 ff f4 	st.h	r7[-12],r8
	int i=0;
8001d63a:	30 08       	mov	r8,0
8001d63c:	ef 48 ff fc 	st.w	r7[-4],r8
	for (i=0; i<ts->number_of_tasks; i++) {
8001d640:	30 08       	mov	r8,0
8001d642:	ef 48 ff fc 	st.w	r7[-4],r8
8001d646:	c2 58       	rjmp	8001d690 <get_task_by_id+0x68>
		if (ts->tasks[i].task_id==task_id) return &ts->tasks[i];
8001d648:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001d64c:	ee fa ff f8 	ld.w	r10,r7[-8]
8001d650:	12 98       	mov	r8,r9
8001d652:	a1 78       	lsl	r8,0x1
8001d654:	12 08       	add	r8,r9
8001d656:	a1 78       	lsl	r8,0x1
8001d658:	2f f8       	sub	r8,-1
8001d65a:	a3 78       	lsl	r8,0x3
8001d65c:	f4 08 00 08 	add	r8,r10,r8
8001d660:	90 68       	ld.sh	r8,r8[0xc]
8001d662:	ef 09 ff f4 	ld.sh	r9,r7[-12]
8001d666:	f0 09 19 00 	cp.h	r9,r8
8001d66a:	c0 e1       	brne	8001d686 <get_task_by_id+0x5e>
8001d66c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001d670:	f0 ca ff f4 	sub	r10,r8,-12
8001d674:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001d678:	12 98       	mov	r8,r9
8001d67a:	a1 78       	lsl	r8,0x1
8001d67c:	12 08       	add	r8,r9
8001d67e:	a5 68       	lsl	r8,0x4
8001d680:	f4 08 00 08 	add	r8,r10,r8
8001d684:	c1 08       	rjmp	8001d6a4 <get_task_by_id+0x7c>
}


task_entry* get_task_by_id(task_set *ts, uint16_t task_id){
	int i=0;
	for (i=0; i<ts->number_of_tasks; i++) {
8001d686:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001d68a:	2f f8       	sub	r8,-1
8001d68c:	ef 48 ff fc 	st.w	r7[-4],r8
8001d690:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001d694:	11 88       	ld.ub	r8,r8[0x0]
8001d696:	10 99       	mov	r9,r8
8001d698:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001d69c:	10 39       	cp.w	r9,r8
8001d69e:	fe 99 ff d5 	brgt	8001d648 <get_task_by_id+0x20>
		if (ts->tasks[i].task_id==task_id) return &ts->tasks[i];
	}
	return NULL;
8001d6a2:	30 08       	mov	r8,0
}
8001d6a4:	10 9c       	mov	r12,r8
8001d6a6:	2f dd       	sub	sp,-12
8001d6a8:	e3 cd 80 80 	ldm	sp++,r7,pc

8001d6ac <get_task_by_index>:

task_entry* get_task_by_index(task_set *ts, uint16_t task_index) {
8001d6ac:	eb cd 40 80 	pushm	r7,lr
8001d6b0:	1a 97       	mov	r7,sp
8001d6b2:	20 2d       	sub	sp,8
8001d6b4:	ef 4c ff fc 	st.w	r7[-4],r12
8001d6b8:	16 98       	mov	r8,r11
8001d6ba:	ef 58 ff f8 	st.h	r7[-8],r8
	if (task_index<ts->number_of_tasks) {
8001d6be:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001d6c2:	11 88       	ld.ub	r8,r8[0x0]
8001d6c4:	ef 09 ff f8 	ld.sh	r9,r7[-8]
8001d6c8:	f0 09 19 00 	cp.h	r9,r8
8001d6cc:	c0 e2       	brcc	8001d6e8 <get_task_by_index+0x3c>
		return &ts->tasks[task_index];
8001d6ce:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001d6d2:	f0 ca ff f4 	sub	r10,r8,-12
8001d6d6:	ef 19 ff f8 	ld.uh	r9,r7[-8]
8001d6da:	12 98       	mov	r8,r9
8001d6dc:	a1 78       	lsl	r8,0x1
8001d6de:	12 08       	add	r8,r9
8001d6e0:	a5 68       	lsl	r8,0x4
8001d6e2:	f4 08 00 08 	add	r8,r10,r8
8001d6e6:	c0 28       	rjmp	8001d6ea <get_task_by_index+0x3e>
	}
	return NULL;
8001d6e8:	30 08       	mov	r8,0
}
8001d6ea:	10 9c       	mov	r12,r8
8001d6ec:	2f ed       	sub	sp,-8
8001d6ee:	e3 cd 80 80 	ldm	sp++,r7,pc

8001d6f2 <change_run_mode>:

void change_run_mode(task_entry *te, task_run_mode_t new_run_mode) {
8001d6f2:	eb cd 40 80 	pushm	r7,lr
8001d6f6:	1a 97       	mov	r7,sp
8001d6f8:	20 2d       	sub	sp,8
8001d6fa:	ef 4c ff fc 	st.w	r7[-4],r12
8001d6fe:	ef 4b ff f8 	st.w	r7[-8],r11
	te->run_mode=new_run_mode;
8001d702:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001d706:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001d70a:	91 39       	st.w	r8[0xc],r9
}
8001d70c:	2f ed       	sub	sp,-8
8001d70e:	e3 cd 80 80 	ldm	sp++,r7,pc

8001d712 <change_task_period>:

void change_task_period(task_entry *te, unsigned long repeat_period) {
8001d712:	eb cd 40 c0 	pushm	r6-r7,lr
8001d716:	1a 97       	mov	r7,sp
8001d718:	20 2d       	sub	sp,8
8001d71a:	48 c6       	lddpc	r6,8001d748 <change_task_period+0x36>
8001d71c:	1e 26       	rsub	r6,pc
8001d71e:	ef 4c ff fc 	st.w	r7[-4],r12
8001d722:	ef 4b ff f8 	st.w	r7[-8],r11
	te->repeat_period=repeat_period;
8001d726:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001d72a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001d72e:	91 59       	st.w	r8[0x14],r9
	change_run_mode(te, RUN_REGULAR);
8001d730:	30 2b       	mov	r11,2
8001d732:	ee fc ff fc 	ld.w	r12,r7[-4]
8001d736:	f0 16 00 a2 	mcall	r6[648]
	run_task_now(te);
8001d73a:	ee fc ff fc 	ld.w	r12,r7[-4]
8001d73e:	f0 16 00 f6 	mcall	r6[984]
}
8001d742:	2f ed       	sub	sp,-8
8001d744:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001d748:	80 01       	ld.sh	r1,r0[0x0]
8001d74a:	d5 a0       	acall	0x5a

8001d74c <suspend_task>:

void suspend_task(task_entry *te, unsigned long delay) {
8001d74c:	eb cd 40 c0 	pushm	r6-r7,lr
8001d750:	1a 97       	mov	r7,sp
8001d752:	20 2d       	sub	sp,8
8001d754:	48 96       	lddpc	r6,8001d778 <suspend_task+0x2c>
8001d756:	1e 26       	rsub	r6,pc
8001d758:	ef 4c ff fc 	st.w	r7[-4],r12
8001d75c:	ef 4b ff f8 	st.w	r7[-8],r11
	te->next_run=GET_TIME + delay;
8001d760:	f0 16 00 27 	mcall	r6[156]
8001d764:	18 99       	mov	r9,r12
8001d766:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001d76a:	10 09       	add	r9,r8
8001d76c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001d770:	91 69       	st.w	r8[0x18],r9
}
8001d772:	2f ed       	sub	sp,-8
8001d774:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001d778:	80 01       	ld.sh	r1,r0[0x0]
8001d77a:	d5 da       	popm	r0-r3,r8-r11,lr

8001d77c <run_task_now>:

void run_task_now(task_entry *te) {
8001d77c:	eb cd 40 80 	pushm	r7,lr
8001d780:	1a 97       	mov	r7,sp
8001d782:	20 1d       	sub	sp,4
8001d784:	ef 4c ff fc 	st.w	r7[-4],r12
	if ((te->run_mode==RUN_NEVER)){
8001d788:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001d78c:	70 38       	ld.w	r8,r8[0xc]
8001d78e:	58 08       	cp.w	r8,0
8001d790:	c0 51       	brne	8001d79a <run_task_now+0x1e>
		te->run_mode=RUN_ONCE;
8001d792:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001d796:	30 19       	mov	r9,1
8001d798:	91 39       	st.w	r8[0xc],r9
		//te->next_run=GET_TIME;
	} 
}
8001d79a:	2f fd       	sub	sp,-4
8001d79c:	e3 cd 80 80 	ldm	sp++,r7,pc

8001d7a0 <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
8001d7a0:	eb cd 40 c0 	pushm	r6-r7,lr
8001d7a4:	1a 97       	mov	r7,sp
8001d7a6:	20 6d       	sub	sp,24
8001d7a8:	49 e6       	lddpc	r6,8001d820 <interpolate+0x80>
8001d7aa:	1e 26       	rsub	r6,pc
8001d7ac:	ef 4c ff f8 	st.w	r7[-8],r12
8001d7b0:	ef 4b ff f4 	st.w	r7[-12],r11
8001d7b4:	ef 4a ff f0 	st.w	r7[-16],r10
8001d7b8:	ef 49 ff ec 	st.w	r7[-20],r9
8001d7bc:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
8001d7c0:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001d7c4:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001d7c8:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
8001d7cc:	c0 41       	brne	8001d7d4 <interpolate+0x34>
	{
		return y1;
8001d7ce:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001d7d2:	c2 38       	rjmp	8001d818 <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
8001d7d4:	ee f9 ff e8 	ld.w	r9,r7[-24]
8001d7d8:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001d7dc:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8001d7e0:	ee fa ff f8 	ld.w	r10,r7[-8]
8001d7e4:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001d7e8:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
8001d7ec:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8001d7f0:	ee fa ff f0 	ld.w	r10,r7[-16]
8001d7f4:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001d7f8:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8001d7fc:	12 9b       	mov	r11,r9
8001d7fe:	10 9c       	mov	r12,r8
8001d800:	f0 16 00 08 	mcall	r6[32]
8001d804:	18 98       	mov	r8,r12
8001d806:	10 99       	mov	r9,r8
8001d808:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001d80c:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8001d810:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
8001d814:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
8001d818:	10 9c       	mov	r12,r8
8001d81a:	2f ad       	sub	sp,-24
8001d81c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001d820:	80 01       	ld.sh	r1,r0[0x0]
8001d822:	d6 2e       	*unknown*

8001d824 <mav_array_memcpy>:

/*
  like memcpy(), but if src is NULL, do a memset to zero
*/
static void mav_array_memcpy(void *dest, const void *src, size_t n)
{
8001d824:	eb cd 40 c0 	pushm	r6-r7,lr
8001d828:	1a 97       	mov	r7,sp
8001d82a:	20 3d       	sub	sp,12
8001d82c:	49 06       	lddpc	r6,8001d86c <mav_array_memcpy+0x48>
8001d82e:	1e 26       	rsub	r6,pc
8001d830:	ef 4c ff fc 	st.w	r7[-4],r12
8001d834:	ef 4b ff f8 	st.w	r7[-8],r11
8001d838:	ef 4a ff f4 	st.w	r7[-12],r10
	if (src == NULL) {
8001d83c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001d840:	58 08       	cp.w	r8,0
8001d842:	c0 91       	brne	8001d854 <mav_array_memcpy+0x30>
		memset(dest, 0, n);
8001d844:	ee fa ff f4 	ld.w	r10,r7[-12]
8001d848:	30 0b       	mov	r11,0
8001d84a:	ee fc ff fc 	ld.w	r12,r7[-4]
8001d84e:	f0 16 00 2f 	mcall	r6[188]
8001d852:	c0 98       	rjmp	8001d864 <mav_array_memcpy+0x40>
	} else {
		memcpy(dest, src, n);
8001d854:	ee fa ff f4 	ld.w	r10,r7[-12]
8001d858:	ee fb ff f8 	ld.w	r11,r7[-8]
8001d85c:	ee fc ff fc 	ld.w	r12,r7[-4]
8001d860:	f0 16 00 20 	mcall	r6[128]
	}
}
8001d864:	2f dd       	sub	sp,-12
8001d866:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001d86a:	00 00       	add	r0,r0
8001d86c:	80 01       	ld.sh	r1,r0[0x0]
8001d86e:	d6 b2       	popm	r0-r7,r10,r12,lr

8001d870 <init_gps_ubx>:
************************************************************************************
Initialization of the GPS with the type of platform
************************************************************************************
*/
void init_gps_ubx(enum GPS_Engine_Setting _engine_nav_setting)
{
8001d870:	eb cd 40 c0 	pushm	r6-r7,lr
8001d874:	1a 97       	mov	r7,sp
8001d876:	20 2d       	sub	sp,8
8001d878:	4a 26       	lddpc	r6,8001d900 <init_gps_ubx+0x90>
8001d87a:	1e 26       	rsub	r6,pc
8001d87c:	ef 4c ff f8 	st.w	r7[-8],r12
	centralData = get_central_data();
8001d880:	f0 16 00 31 	mcall	r6[196]
8001d884:	18 99       	mov	r9,r12
8001d886:	ec f8 00 00 	ld.w	r8,r6[0]
8001d88a:	91 09       	st.w	r8[0x0],r9
	
	//centralData->gps_stream_out.flush(centralData->gps_stream_out.data);
	
	uint8_t epoch = TIME_OF_WEEK;
8001d88c:	30 18       	mov	r8,1
8001d88e:	ef 68 ff ff 	st.b	r7[-1],r8
	idleTimeout = 1200;
8001d892:	ec f8 03 fc 	ld.w	r8,r6[1020]
8001d896:	e0 69 04 b0 	mov	r9,1200
8001d89a:	91 09       	st.w	r8[0x0],r9
	
	configure_gps();
8001d89c:	f0 16 01 78 	mcall	r6[1504]
	
	engine_nav_setting = _engine_nav_setting;
8001d8a0:	ec f8 01 bc 	ld.w	r8,r6[444]
8001d8a4:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001d8a8:	91 09       	st.w	r8[0x0],r9
	
	centralData->GPS_data.status = NO_FIX;
8001d8aa:	ec f8 00 00 	ld.w	r8,r6[0]
8001d8ae:	70 09       	ld.w	r9,r8[0x0]
8001d8b0:	30 18       	mov	r8,1
8001d8b2:	f3 68 0b 54 	st.b	r9[2900],r8
	centralData->GPS_data.num_sats = 0;
8001d8b6:	ec f8 00 00 	ld.w	r8,r6[0]
8001d8ba:	70 09       	ld.w	r9,r8[0x0]
8001d8bc:	30 08       	mov	r8,0
8001d8be:	f3 68 0b 48 	st.b	r9[2888],r8
	
	next_fix = false;
8001d8c2:	ec f9 01 c8 	ld.w	r9,r6[456]
8001d8c6:	30 08       	mov	r8,0
8001d8c8:	b2 88       	st.b	r9[0x0],r8
// 	new_data = false;
// 	valid_read = false;
	have_raw_velocity = false;
8001d8ca:	ec f9 03 94 	ld.w	r9,r6[916]
8001d8ce:	30 08       	mov	r8,0
8001d8d0:	b2 88       	st.b	r9[0x0],r8
	fix = false;
8001d8d2:	ec f9 06 30 	ld.w	r9,r6[1584]
8001d8d6:	30 08       	mov	r8,0
8001d8d8:	b2 88       	st.b	r9[0x0],r8
	
	last_fix_time = 0;
8001d8da:	ec f8 06 98 	ld.w	r8,r6[1688]
8001d8de:	30 09       	mov	r9,0
8001d8e0:	91 09       	st.w	r8[0x0],r9
	
	new_position = false;
8001d8e2:	ec f9 02 28 	ld.w	r9,r6[552]
8001d8e6:	30 08       	mov	r8,0
8001d8e8:	b2 88       	st.b	r9[0x0],r8
	new_speed = false;
8001d8ea:	ec f9 01 f4 	ld.w	r9,r6[500]
8001d8ee:	30 08       	mov	r8,0
8001d8f0:	b2 88       	st.b	r9[0x0],r8
	
	step = 0;
8001d8f2:	ec f9 00 50 	ld.w	r9,r6[80]
8001d8f6:	30 08       	mov	r8,0
8001d8f8:	b2 88       	st.b	r9[0x0],r8
	}
8001d8fa:	2f ed       	sub	sp,-8
8001d8fc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001d900:	80 01       	ld.sh	r1,r0[0x0]
8001d902:	d6 fe       	*unknown*
8001d904:	6c 61       	ld.w	r1,r6[0x18]
8001d906:	72 67       	ld.w	r7,r9[0x18]
8001d908:	65 20       	ld.w	r0,r2[0x48]
8001d90a:	70 61       	ld.w	r1,r8[0x18]
8001d90c:	79 6c       	ld.w	r12,r12[0x58]
8001d90e:	6f 61       	ld.w	r1,r7[0x58]
8001d910:	64 3a       	ld.w	r10,r2[0xc]
8001d912:	20 00       	sub	r0,0
8001d914:	0a 00       	add	r0,r5
8001d916:	00 00       	add	r0,r0
8001d918:	57 72       	stdsp	sp[0x1dc],r2
8001d91a:	6f 6e       	ld.w	lr,r7[0x58]
8001d91c:	67 20       	ld.w	r0,r3[0x48]
8001d91e:	50 6f       	stdsp	sp[0x18],pc
8001d920:	73 6c       	ld.w	r12,r9[0x58]
8001d922:	6c 68       	ld.w	r8,r6[0x18]
8001d924:	20 6d       	sub	sp,24
8001d926:	65 73       	ld.w	r3,r2[0x5c]
8001d928:	73 61       	ld.w	r1,r9[0x58]
8001d92a:	67 65       	ld.w	r5,r3[0x58]
8001d92c:	20 30       	sub	r0,3
8001d92e:	78 00       	ld.w	r0,r12[0x0]
8001d930:	20 4d       	sub	sp,16
8001d932:	73 67       	ld.w	r7,r9[0x58]
8001d934:	20 69       	sub	r9,6
8001d936:	64 3a       	ld.w	r10,r2[0xc]
8001d938:	20 30       	sub	r0,3
8001d93a:	78 00       	ld.w	r0,r12[0x0]
8001d93c:	20 52       	sub	r2,5
8001d93e:	65 63       	ld.w	r3,r2[0x58]
8001d940:	65 69       	ld.w	r9,r2[0x58]
8001d942:	76 65       	ld.w	r5,r11[0x18]
8001d944:	64 20       	ld.w	r0,r2[0x8]
8001d946:	73 69       	ld.w	r9,r9[0x58]
8001d948:	7a 65       	ld.w	r5,sp[0x18]
8001d94a:	3a 00       	mov	r0,-96
8001d94c:	20 73       	sub	r3,7
8001d94e:	68 6f       	ld.w	pc,r4[0x18]
8001d950:	75 6c       	ld.w	r12,r10[0x58]
8001d952:	64 20       	ld.w	r0,r2[0x8]
8001d954:	62 65       	ld.w	r5,r1[0x18]
8001d956:	3a 00       	mov	r0,-96
8001d958:	57 72       	stdsp	sp[0x1dc],r2
8001d95a:	6f 6e       	ld.w	lr,r7[0x58]
8001d95c:	67 20       	ld.w	r0,r3[0x48]
8001d95e:	4e 61       	lddpc	r1,8001daf4 <init_gps_ubx+0x284>
8001d960:	76 20       	ld.w	r0,r11[0x8]
8001d962:	53 74       	stdsp	sp[0xdc],r4
8001d964:	61 74       	ld.w	r4,r0[0x5c]
8001d966:	75 73       	ld.w	r3,r10[0x5c]
8001d968:	20 6d       	sub	sp,24
8001d96a:	65 73       	ld.w	r3,r2[0x5c]
8001d96c:	73 61       	ld.w	r1,r9[0x58]
8001d96e:	67 65       	ld.w	r5,r3[0x58]
8001d970:	20 30       	sub	r0,3
8001d972:	78 00       	ld.w	r0,r12[0x0]
8001d974:	57 72       	stdsp	sp[0x1dc],r2
8001d976:	6f 6e       	ld.w	lr,r7[0x58]
8001d978:	67 20       	ld.w	r0,r3[0x48]
8001d97a:	53 6f       	stdsp	sp[0xd8],pc
8001d97c:	6c 75       	ld.w	r5,r6[0x1c]
8001d97e:	74 69       	ld.w	r9,r10[0x18]
8001d980:	6f 6e       	ld.w	lr,r7[0x58]
8001d982:	20 6d       	sub	sp,24
8001d984:	65 73       	ld.w	r3,r2[0x5c]
8001d986:	73 61       	ld.w	r1,r9[0x58]
8001d988:	67 65       	ld.w	r5,r3[0x58]
8001d98a:	20 30       	sub	r0,3
8001d98c:	78 00       	ld.w	r0,r12[0x0]
8001d98e:	00 00       	add	r0,r0
8001d990:	57 72       	stdsp	sp[0x1dc],r2
8001d992:	6f 6e       	ld.w	lr,r7[0x58]
8001d994:	67 20       	ld.w	r0,r3[0x48]
8001d996:	56 65       	stdsp	sp[0x198],r5
8001d998:	6c 6e       	ld.w	lr,r6[0x18]
8001d99a:	65 64       	ld.w	r4,r2[0x58]
8001d99c:	20 6d       	sub	sp,24
8001d99e:	65 73       	ld.w	r3,r2[0x5c]
8001d9a0:	73 61       	ld.w	r1,r9[0x58]
8001d9a2:	67 65       	ld.w	r5,r3[0x58]
8001d9a4:	20 30       	sub	r0,3
8001d9a6:	78 00       	ld.w	r0,r12[0x0]
8001d9a8:	57 72       	stdsp	sp[0x1dc],r2
8001d9aa:	6f 6e       	ld.w	lr,r7[0x58]
8001d9ac:	67 20       	ld.w	r0,r3[0x48]
8001d9ae:	53 56       	stdsp	sp[0xd4],r6
8001d9b0:	20 49       	sub	r9,4
8001d9b2:	6e 66       	ld.w	r6,r7[0x18]
8001d9b4:	6f 20       	ld.w	r0,r7[0x48]
8001d9b6:	6d 65       	ld.w	r5,r6[0x58]
8001d9b8:	73 73       	ld.w	r3,r9[0x5c]
8001d9ba:	61 67       	ld.w	r7,r0[0x58]
8001d9bc:	65 20       	ld.w	r0,r2[0x48]
8001d9be:	30 78       	mov	r8,7
8001d9c0:	00 00       	add	r0,r0
8001d9c2:	00 00       	add	r0,r0
8001d9c4:	55 6e       	stdsp	sp[0x158],lr
8001d9c6:	65 78       	ld.w	r8,r2[0x5c]
8001d9c8:	70 65       	ld.w	r5,r8[0x18]
8001d9ca:	63 74       	ld.w	r4,r1[0x5c]
8001d9cc:	65 64       	ld.w	r4,r2[0x58]
8001d9ce:	20 4e       	sub	lr,4
8001d9d0:	41 56       	lddsp	r6,sp[0x54]
8001d9d2:	20 6d       	sub	sp,24
8001d9d4:	65 73       	ld.w	r3,r2[0x5c]
8001d9d6:	73 61       	ld.w	r1,r9[0x58]
8001d9d8:	67 65       	ld.w	r5,r3[0x58]
8001d9da:	2c 20       	sub	r0,-62
8001d9dc:	43 6c       	lddsp	r12,sp[0xd8]
8001d9de:	61 73       	ld.w	r3,r0[0x5c]
8001d9e0:	73 3a       	ld.w	r10,r9[0x4c]
8001d9e2:	20 30       	sub	r0,3
8001d9e4:	78 00       	ld.w	r0,r12[0x0]
8001d9e6:	00 00       	add	r0,r0
8001d9e8:	2c 20       	sub	r0,-62
8001d9ea:	6d 73       	ld.w	r3,r6[0x5c]
8001d9ec:	67 20       	ld.w	r0,r3[0x48]
8001d9ee:	69 64       	ld.w	r4,r4[0x58]
8001d9f0:	3a 20       	mov	r0,-94
8001d9f2:	30 78       	mov	r8,7
8001d9f4:	00 00       	add	r0,r0
8001d9f6:	00 00       	add	r0,r0
8001d9f8:	20 6f       	sub	pc,6
8001d9fa:	66 20       	ld.w	r0,r3[0x8]
8001d9fc:	73 69       	ld.w	r9,r9[0x58]
8001d9fe:	7a 65       	ld.w	r5,sp[0x18]
8001da00:	20 00       	sub	r0,0
8001da02:	00 00       	add	r0,r0
8001da04:	57 72       	stdsp	sp[0x1dc],r2
8001da06:	6f 6e       	ld.w	lr,r7[0x58]
8001da08:	67 20       	ld.w	r0,r3[0x48]
8001da0a:	4e 61       	lddpc	r1,8001dba0 <ubx_read+0x32>
8001da0c:	76 20       	ld.w	r0,r11[0x8]
8001da0e:	53 65       	stdsp	sp[0xd8],r5
8001da10:	74 74       	ld.w	r4,r10[0x1c]
8001da12:	69 6e       	ld.w	lr,r4[0x58]
8001da14:	67 73       	ld.w	r3,r3[0x5c]
8001da16:	20 6d       	sub	sp,24
8001da18:	65 73       	ld.w	r3,r2[0x5c]
8001da1a:	73 61       	ld.w	r1,r9[0x58]
8001da1c:	67 65       	ld.w	r5,r3[0x58]
8001da1e:	20 30       	sub	r0,3
8001da20:	78 00       	ld.w	r0,r12[0x0]
8001da22:	00 00       	add	r0,r0
8001da24:	57 72       	stdsp	sp[0x1dc],r2
8001da26:	6f 6e       	ld.w	lr,r7[0x58]
8001da28:	67 20       	ld.w	r0,r3[0x48]
8001da2a:	43 46       	lddsp	r6,sp[0xd0]
8001da2c:	47 20       	lddsp	r0,sp[0x1c8]
8001da2e:	52 61       	stdsp	sp[0x98],r1
8001da30:	74 65       	ld.w	r5,r10[0x18]
8001da32:	20 6d       	sub	sp,24
8001da34:	65 73       	ld.w	r3,r2[0x5c]
8001da36:	73 61       	ld.w	r1,r9[0x58]
8001da38:	67 65       	ld.w	r5,r3[0x58]
8001da3a:	20 30       	sub	r0,3
8001da3c:	78 00       	ld.w	r0,r12[0x0]
8001da3e:	00 00       	add	r0,r0
8001da40:	57 72       	stdsp	sp[0x1dc],r2
8001da42:	6f 6e       	ld.w	lr,r7[0x58]
8001da44:	67 20       	ld.w	r0,r3[0x48]
8001da46:	43 46       	lddsp	r6,sp[0xd0]
8001da48:	47 20       	lddsp	r0,sp[0x1c8]
8001da4a:	53 65       	stdsp	sp[0xd8],r5
8001da4c:	74 2f       	ld.w	pc,r10[0x8]
8001da4e:	67 65       	ld.w	r5,r3[0x58]
8001da50:	74 20       	ld.w	r0,r10[0x8]
8001da52:	6d 65       	ld.w	r5,r6[0x58]
8001da54:	73 73       	ld.w	r3,r9[0x5c]
8001da56:	61 67       	ld.w	r7,r0[0x58]
8001da58:	65 20       	ld.w	r0,r2[0x48]
8001da5a:	30 78       	mov	r8,7
8001da5c:	00 00       	add	r0,r0
8001da5e:	00 00       	add	r0,r0
8001da60:	55 6e       	stdsp	sp[0x158],lr
8001da62:	65 78       	ld.w	r8,r2[0x5c]
8001da64:	70 65       	ld.w	r5,r8[0x18]
8001da66:	63 74       	ld.w	r4,r1[0x5c]
8001da68:	65 64       	ld.w	r4,r2[0x58]
8001da6a:	20 43       	sub	r3,4
8001da6c:	46 47       	lddsp	r7,sp[0x190]
8001da6e:	20 6d       	sub	sp,24
8001da70:	65 73       	ld.w	r3,r2[0x5c]
8001da72:	73 61       	ld.w	r1,r9[0x58]
8001da74:	67 65       	ld.w	r5,r3[0x58]
8001da76:	2c 20       	sub	r0,-62
8001da78:	43 6c       	lddsp	r12,sp[0xd8]
8001da7a:	61 73       	ld.w	r3,r0[0x5c]
8001da7c:	73 3a       	ld.w	r10,r9[0x4c]
8001da7e:	20 30       	sub	r0,3
8001da80:	78 00       	ld.w	r0,r12[0x0]
8001da82:	00 00       	add	r0,r0
8001da84:	57 72       	stdsp	sp[0x1dc],r2
8001da86:	6f 6e       	ld.w	lr,r7[0x58]
8001da88:	67 20       	ld.w	r0,r3[0x48]
8001da8a:	4d 4f       	lddpc	pc,8001dbd8 <ubx_read+0x6a>
8001da8c:	4e 20       	lddpc	r0,8001dc14 <ubx_read+0xa6>
8001da8e:	52 58       	stdsp	sp[0x94],r8
8001da90:	52 20       	stdsp	sp[0x88],r0
8001da92:	6d 65       	ld.w	r5,r6[0x58]
8001da94:	73 73       	ld.w	r3,r9[0x5c]
8001da96:	61 67       	ld.w	r7,r0[0x58]
8001da98:	65 20       	ld.w	r0,r2[0x48]
8001da9a:	30 78       	mov	r8,7
8001da9c:	00 00       	add	r0,r0
8001da9e:	00 00       	add	r0,r0
8001daa0:	55 6e       	stdsp	sp[0x158],lr
8001daa2:	65 78       	ld.w	r8,r2[0x5c]
8001daa4:	70 65       	ld.w	r5,r8[0x18]
8001daa6:	63 74       	ld.w	r4,r1[0x5c]
8001daa8:	65 64       	ld.w	r4,r2[0x58]
8001daaa:	20 54       	sub	r4,5
8001daac:	49 4d       	lddpc	sp,8001dafc <init_gps_ubx+0x28c>
8001daae:	20 6d       	sub	sp,24
8001dab0:	65 73       	ld.w	r3,r2[0x5c]
8001dab2:	73 61       	ld.w	r1,r9[0x58]
8001dab4:	67 65       	ld.w	r5,r3[0x58]
8001dab6:	2c 20       	sub	r0,-62
8001dab8:	43 6c       	lddsp	r12,sp[0xd8]
8001daba:	61 73       	ld.w	r3,r0[0x5c]
8001dabc:	73 3a       	ld.w	r10,r9[0x4c]
8001dabe:	20 30       	sub	r0,3
8001dac0:	78 00       	ld.w	r0,r12[0x0]
8001dac2:	00 00       	add	r0,r0
8001dac4:	20 73       	sub	r3,7
8001dac6:	68 6f       	ld.w	pc,r4[0x18]
8001dac8:	75 6c       	ld.w	r12,r10[0x58]
8001daca:	64 20       	ld.w	r0,r2[0x8]
8001dacc:	62 65       	ld.w	r5,r1[0x18]
8001dace:	20 3a       	sub	r10,3
8001dad0:	00 00       	add	r0,r0
8001dad2:	00 00       	add	r0,r0
8001dad4:	57 72       	stdsp	sp[0x1dc],r2
8001dad6:	6f 6e       	ld.w	lr,r7[0x58]
8001dad8:	67 20       	ld.w	r0,r3[0x48]
8001dada:	54 49       	stdsp	sp[0x110],r9
8001dadc:	4d 20       	lddpc	r0,8001dc24 <ubx_read+0xb6>
8001dade:	54 50       	stdsp	sp[0x114],r0
8001dae0:	20 6d       	sub	sp,24
8001dae2:	65 73       	ld.w	r3,r2[0x5c]
8001dae4:	73 61       	ld.w	r1,r9[0x58]
8001dae6:	67 65       	ld.w	r5,r3[0x58]
8001dae8:	20 30       	sub	r0,3
8001daea:	78 00       	ld.w	r0,r12[0x0]
8001daec:	57 72       	stdsp	sp[0x1dc],r2
8001daee:	6f 6e       	ld.w	lr,r7[0x58]
8001daf0:	67 20       	ld.w	r0,r3[0x48]
8001daf2:	54 49       	stdsp	sp[0x110],r9
8001daf4:	4d 20       	lddpc	r0,8001dc3c <ubx_read+0xce>
8001daf6:	56 52       	stdsp	sp[0x194],r2
8001daf8:	46 59       	lddsp	r9,sp[0x194]
8001dafa:	20 6d       	sub	sp,24
8001dafc:	65 73       	ld.w	r3,r2[0x5c]
8001dafe:	73 61       	ld.w	r1,r9[0x58]
8001db00:	67 65       	ld.w	r5,r3[0x58]
8001db02:	20 30       	sub	r0,3
8001db04:	78 00       	ld.w	r0,r12[0x0]
8001db06:	00 00       	add	r0,r0
8001db08:	55 6e       	stdsp	sp[0x158],lr
8001db0a:	65 78       	ld.w	r8,r2[0x5c]
8001db0c:	70 65       	ld.w	r5,r8[0x18]
8001db0e:	63 74       	ld.w	r4,r1[0x5c]
8001db10:	65 64       	ld.w	r4,r2[0x58]
8001db12:	20 6d       	sub	sp,24
8001db14:	65 73       	ld.w	r3,r2[0x5c]
8001db16:	73 61       	ld.w	r1,r9[0x58]
8001db18:	67 65       	ld.w	r5,r3[0x58]
8001db1a:	2c 20       	sub	r0,-62
8001db1c:	43 6c       	lddsp	r12,sp[0xd8]
8001db1e:	61 73       	ld.w	r3,r0[0x5c]
8001db20:	73 3a       	ld.w	r10,r9[0x4c]
8001db22:	20 30       	sub	r0,3
8001db24:	78 00       	ld.w	r0,r12[0x0]
8001db26:	00 00       	add	r0,r0
8001db28:	62 61       	ld.w	r1,r1[0x18]
8001db2a:	64 20       	ld.w	r0,r2[0x8]
8001db2c:	63 6b       	ld.w	r11,r1[0x58]
8001db2e:	73 75       	ld.w	r5,r9[0x5c]
8001db30:	6d 5f       	ld.w	pc,r6[0x54]
8001db32:	61 20       	ld.w	r0,r0[0x48]
8001db34:	00 00       	add	r0,r0
8001db36:	00 00       	add	r0,r0
8001db38:	20 73       	sub	r3,7
8001db3a:	68 6f       	ld.w	pc,r4[0x18]
8001db3c:	75 6c       	ld.w	r12,r10[0x58]
8001db3e:	64 20       	ld.w	r0,r2[0x8]
8001db40:	62 65       	ld.w	r5,r1[0x18]
8001db42:	20 00       	sub	r0,0
8001db44:	20 63       	sub	r3,6
8001db46:	6c 61       	ld.w	r1,r6[0x18]
8001db48:	73 73       	ld.w	r3,r9[0x5c]
8001db4a:	20 3a       	sub	r10,3
8001db4c:	20 30       	sub	r0,3
8001db4e:	78 00       	ld.w	r0,r12[0x0]
8001db50:	20 6d       	sub	sp,24
8001db52:	73 67       	ld.w	r7,r9[0x58]
8001db54:	5f 69       	srmi	r9
8001db56:	64 20       	ld.w	r0,r2[0x8]
8001db58:	3a 20       	mov	r0,-94
8001db5a:	30 78       	mov	r8,7
8001db5c:	00 00       	add	r0,r0
8001db5e:	00 00       	add	r0,r0
8001db60:	62 61       	ld.w	r1,r1[0x18]
8001db62:	64 20       	ld.w	r0,r2[0x8]
8001db64:	63 6b       	ld.w	r11,r1[0x58]
8001db66:	73 75       	ld.w	r5,r9[0x5c]
8001db68:	6d 5f       	ld.w	pc,r6[0x54]
8001db6a:	62 20       	ld.w	r0,r1[0x8]
	...

8001db6e <ubx_read>:
re-processing it from the top, this is unavoidable. The parser
attempts to avoid this when possible.
************************************************************************************
*/
bool ubx_read(void)
{
8001db6e:	eb cd 40 c0 	pushm	r6-r7,lr
8001db72:	1a 97       	mov	r7,sp
8001db74:	20 2d       	sub	sp,8
8001db76:	fe f6 0c fa 	ld.w	r6,pc[3322]
8001db7a:	1e 26       	rsub	r6,pc
	uint8_t data;
	bool msg_ok = false;
8001db7c:	30 08       	mov	r8,0
8001db7e:	ef 68 ff fb 	st.b	r7[-5],r8
	//bool new_message = false;
	
	unsigned char * temporaryMessageForSwaping;
	
	while(buffer_bytes_available(&(centralData->gps_buffer)))
8001db82:	e0 8f 06 64 	bral	8001e84a <ubx_read+0xcdc>
	{
		data = buffer_get(&(centralData->gps_buffer));
8001db86:	ec f8 00 00 	ld.w	r8,r6[0]
8001db8a:	70 08       	ld.w	r8,r8[0x0]
8001db8c:	f0 c8 f6 2c 	sub	r8,r8,-2516
8001db90:	10 9c       	mov	r12,r8
8001db92:	f0 16 00 42 	mcall	r6[264]
8001db96:	18 98       	mov	r8,r12
8001db98:	ef 68 ff fa 	st.b	r7[-6],r8
		
// 		dbg_print(" 0x");
//  	dbg_print_num(data,16);
// 		dbg_print("\n");
		
		switch (step)
8001db9c:	ec f8 00 50 	ld.w	r8,r6[80]
8001dba0:	11 88       	ld.ub	r8,r8[0x0]
8001dba2:	58 88       	cp.w	r8,8
8001dba4:	e0 8b 06 53 	brhi	8001e84a <ubx_read+0xcdc>
8001dba8:	fe c9 ff f8 	sub	r9,pc,-8
8001dbac:	f2 08 00 2f 	add	pc,r9,r8<<0x2
8001dbb0:	e0 8f 00 26 	bral	8001dbfc <ubx_read+0x8e>
8001dbb4:	e0 8f 00 10 	bral	8001dbd4 <ubx_read+0x66>
8001dbb8:	e0 8f 00 38 	bral	8001dc28 <ubx_read+0xba>
8001dbbc:	e0 8f 00 50 	bral	8001dc5c <ubx_read+0xee>
8001dbc0:	e0 8f 00 74 	bral	8001dca8 <ubx_read+0x13a>
8001dbc4:	e0 8f 00 98 	bral	8001dcf4 <ubx_read+0x186>
8001dbc8:	e0 8f 05 68 	bral	8001e698 <ubx_read+0xb2a>
8001dbcc:	e0 8f 05 ac 	bral	8001e724 <ubx_read+0xbb6>
8001dbd0:	e0 8f 05 f0 	bral	8001e7b0 <ubx_read+0xc42>
			// chances of recovering from a mismatch and makes it less
			// likely that we will be fooled by the preamble appearing
			// as data in some other message.
			//
		case 1:
			if (data == UBX_PREAMBLE2)
8001dbd4:	ef 39 ff fa 	ld.ub	r9,r7[-6]
8001dbd8:	36 28       	mov	r8,98
8001dbda:	f0 09 18 00 	cp.b	r9,r8
8001dbde:	c0 b1       	brne	8001dbf4 <ubx_read+0x86>
			{
				step++;
8001dbe0:	ec f8 00 50 	ld.w	r8,r6[80]
8001dbe4:	11 88       	ld.ub	r8,r8[0x0]
8001dbe6:	2f f8       	sub	r8,-1
8001dbe8:	5c 58       	castu.b	r8
8001dbea:	ec f9 00 50 	ld.w	r9,r6[80]
8001dbee:	b2 88       	st.b	r9[0x0],r8
				break;
8001dbf0:	e0 8f 06 2d 	bral	8001e84a <ubx_read+0xcdc>
			}
			step = 0;
8001dbf4:	ec f9 00 50 	ld.w	r9,r6[80]
8001dbf8:	30 08       	mov	r8,0
8001dbfa:	b2 88       	st.b	r9[0x0],r8
		case 0:
			if (data == UBX_PREAMBLE1)
8001dbfc:	ef 39 ff fa 	ld.ub	r9,r7[-6]
8001dc00:	3b 58       	mov	r8,-75
8001dc02:	f0 09 18 00 	cp.b	r9,r8
8001dc06:	c0 b1       	brne	8001dc1c <ubx_read+0xae>
			{
				step++;
8001dc08:	ec f8 00 50 	ld.w	r8,r6[80]
8001dc0c:	11 88       	ld.ub	r8,r8[0x0]
8001dc0e:	2f f8       	sub	r8,-1
8001dc10:	5c 58       	castu.b	r8
8001dc12:	ec f9 00 50 	ld.w	r9,r6[80]
8001dc16:	b2 88       	st.b	r9[0x0],r8
				break;
8001dc18:	e0 8f 06 19 	bral	8001e84a <ubx_read+0xcdc>
			}
			step = 0;
8001dc1c:	ec f9 00 50 	ld.w	r9,r6[80]
8001dc20:	30 08       	mov	r8,0
8001dc22:	b2 88       	st.b	r9[0x0],r8
			break;
8001dc24:	e0 8f 06 13 	bral	8001e84a <ubx_read+0xcdc>
		//
		// We always collect the length so that we can avoid being
		// fooled by preamble bytes in messages.
		//
		case 2:
			step++;
8001dc28:	ec f8 00 50 	ld.w	r8,r6[80]
8001dc2c:	11 88       	ld.ub	r8,r8[0x0]
8001dc2e:	2f f8       	sub	r8,-1
8001dc30:	5c 58       	castu.b	r8
8001dc32:	ec f9 00 50 	ld.w	r9,r6[80]
8001dc36:	b2 88       	st.b	r9[0x0],r8
			ubxclass = data;
8001dc38:	ec f9 00 60 	ld.w	r9,r6[96]
8001dc3c:	ef 38 ff fa 	ld.ub	r8,r7[-6]
8001dc40:	b2 88       	st.b	r9[0x0],r8
			cksum_a = data;
8001dc42:	ec f9 00 ac 	ld.w	r9,r6[172]
8001dc46:	ef 38 ff fa 	ld.ub	r8,r7[-6]
8001dc4a:	b2 88       	st.b	r9[0x0],r8
			cksum_b = cksum_a; // reset the checksum accumulators
8001dc4c:	ec f8 00 ac 	ld.w	r8,r6[172]
8001dc50:	11 88       	ld.ub	r8,r8[0x0]
8001dc52:	ec f9 01 04 	ld.w	r9,r6[260]
8001dc56:	b2 88       	st.b	r9[0x0],r8
			break;
8001dc58:	e0 8f 05 f9 	bral	8001e84a <ubx_read+0xcdc>
		case 3:
			step++;
8001dc5c:	ec f8 00 50 	ld.w	r8,r6[80]
8001dc60:	11 88       	ld.ub	r8,r8[0x0]
8001dc62:	2f f8       	sub	r8,-1
8001dc64:	5c 58       	castu.b	r8
8001dc66:	ec f9 00 50 	ld.w	r9,r6[80]
8001dc6a:	b2 88       	st.b	r9[0x0],r8
			cksum_a += data;
8001dc6c:	ec f8 00 ac 	ld.w	r8,r6[172]
8001dc70:	11 88       	ld.ub	r8,r8[0x0]
8001dc72:	ef 39 ff fa 	ld.ub	r9,r7[-6]
8001dc76:	f2 08 00 08 	add	r8,r9,r8
8001dc7a:	5c 58       	castu.b	r8
8001dc7c:	ec f9 00 ac 	ld.w	r9,r6[172]
8001dc80:	b2 88       	st.b	r9[0x0],r8
			cksum_b += cksum_a; // checksum byte
8001dc82:	ec f8 01 04 	ld.w	r8,r6[260]
8001dc86:	11 89       	ld.ub	r9,r8[0x0]
8001dc88:	ec f8 00 ac 	ld.w	r8,r6[172]
8001dc8c:	11 88       	ld.ub	r8,r8[0x0]
8001dc8e:	f2 08 00 08 	add	r8,r9,r8
8001dc92:	5c 58       	castu.b	r8
8001dc94:	ec f9 01 04 	ld.w	r9,r6[260]
8001dc98:	b2 88       	st.b	r9[0x0],r8
			msg_id = data;
8001dc9a:	ec f9 00 5c 	ld.w	r9,r6[92]
8001dc9e:	ef 38 ff fa 	ld.ub	r8,r7[-6]
8001dca2:	b2 88       	st.b	r9[0x0],r8
			break;
8001dca4:	e0 8f 05 d3 	bral	8001e84a <ubx_read+0xcdc>
		case 4:
			step++;
8001dca8:	ec f8 00 50 	ld.w	r8,r6[80]
8001dcac:	11 88       	ld.ub	r8,r8[0x0]
8001dcae:	2f f8       	sub	r8,-1
8001dcb0:	5c 58       	castu.b	r8
8001dcb2:	ec f9 00 50 	ld.w	r9,r6[80]
8001dcb6:	b2 88       	st.b	r9[0x0],r8
			cksum_a += data;
8001dcb8:	ec f8 00 ac 	ld.w	r8,r6[172]
8001dcbc:	11 88       	ld.ub	r8,r8[0x0]
8001dcbe:	ef 39 ff fa 	ld.ub	r9,r7[-6]
8001dcc2:	f2 08 00 08 	add	r8,r9,r8
8001dcc6:	5c 58       	castu.b	r8
8001dcc8:	ec f9 00 ac 	ld.w	r9,r6[172]
8001dccc:	b2 88       	st.b	r9[0x0],r8
			cksum_b += cksum_a; // checksum byte
8001dcce:	ec f8 01 04 	ld.w	r8,r6[260]
8001dcd2:	11 89       	ld.ub	r9,r8[0x0]
8001dcd4:	ec f8 00 ac 	ld.w	r8,r6[172]
8001dcd8:	11 88       	ld.ub	r8,r8[0x0]
8001dcda:	f2 08 00 08 	add	r8,r9,r8
8001dcde:	5c 58       	castu.b	r8
8001dce0:	ec f9 01 04 	ld.w	r9,r6[260]
8001dce4:	b2 88       	st.b	r9[0x0],r8
			payload_length = data;
8001dce6:	ef 38 ff fa 	ld.ub	r8,r7[-6]
8001dcea:	ec f9 00 58 	ld.w	r9,r6[88]
8001dcee:	b2 08       	st.h	r9[0x0],r8
			break;
8001dcf0:	e0 8f 05 ad 	bral	8001e84a <ubx_read+0xcdc>
		case 5:
			step++;
8001dcf4:	ec f8 00 50 	ld.w	r8,r6[80]
8001dcf8:	11 88       	ld.ub	r8,r8[0x0]
8001dcfa:	2f f8       	sub	r8,-1
8001dcfc:	5c 58       	castu.b	r8
8001dcfe:	ec f9 00 50 	ld.w	r9,r6[80]
8001dd02:	b2 88       	st.b	r9[0x0],r8
			payload_length |= data<<8;
8001dd04:	ef 38 ff fa 	ld.ub	r8,r7[-6]
8001dd08:	a9 68       	lsl	r8,0x8
8001dd0a:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
8001dd0e:	ec f8 00 58 	ld.w	r8,r6[88]
8001dd12:	90 08       	ld.sh	r8,r8[0x0]
8001dd14:	5c 88       	casts.h	r8
8001dd16:	f3 e8 10 08 	or	r8,r9,r8
8001dd1a:	5c 88       	casts.h	r8
8001dd1c:	ec f9 00 58 	ld.w	r9,r6[88]
8001dd20:	b2 08       	st.h	r9[0x0],r8
			cksum_a += data;
8001dd22:	ec f8 00 ac 	ld.w	r8,r6[172]
8001dd26:	11 88       	ld.ub	r8,r8[0x0]
8001dd28:	ef 39 ff fa 	ld.ub	r9,r7[-6]
8001dd2c:	f2 08 00 08 	add	r8,r9,r8
8001dd30:	5c 58       	castu.b	r8
8001dd32:	ec f9 00 ac 	ld.w	r9,r6[172]
8001dd36:	b2 88       	st.b	r9[0x0],r8
			cksum_b += cksum_a; // checksum byte
8001dd38:	ec f8 01 04 	ld.w	r8,r6[260]
8001dd3c:	11 89       	ld.ub	r9,r8[0x0]
8001dd3e:	ec f8 00 ac 	ld.w	r8,r6[172]
8001dd42:	11 88       	ld.ub	r8,r8[0x0]
8001dd44:	f2 08 00 08 	add	r8,r9,r8
8001dd48:	5c 58       	castu.b	r8
8001dd4a:	ec f9 01 04 	ld.w	r9,r6[260]
8001dd4e:	b2 88       	st.b	r9[0x0],r8
// 			dbg_print(" large byte shifted");
// 			dbg_print_num(data<<8,10);
// 			dbg_print("\n");
			
			//payload_length |= (uint16_t)(data<<8);
			if (payload_length > 512)
8001dd50:	ec f8 00 58 	ld.w	r8,r6[88]
8001dd54:	90 09       	ld.sh	r9,r8[0x0]
8001dd56:	e0 68 02 00 	mov	r8,512
8001dd5a:	f0 09 19 00 	cp.h	r9,r8
8001dd5e:	e0 88 00 1b 	brls	8001dd94 <ubx_read+0x226>
			{
				// we assume very large payloads are line noise
				dbg_print("large payload: ");
8001dd62:	fe cc 04 5e 	sub	r12,pc,1118
8001dd66:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(payload_length,10);
8001dd6a:	ec f8 00 58 	ld.w	r8,r6[88]
8001dd6e:	90 08       	ld.sh	r8,r8[0x0]
8001dd70:	5c 78       	castu.h	r8
8001dd72:	30 ab       	mov	r11,10
8001dd74:	10 9c       	mov	r12,r8
8001dd76:	f0 16 00 04 	mcall	r6[16]
				dbg_print("\n");
8001dd7a:	fe cc 04 66 	sub	r12,pc,1126
8001dd7e:	f0 16 00 01 	mcall	r6[4]
				payload_length = 0;
8001dd82:	ec f9 00 58 	ld.w	r9,r6[88]
8001dd86:	30 08       	mov	r8,0
8001dd88:	b2 08       	st.h	r9[0x0],r8
				step = 0;
8001dd8a:	ec f9 00 50 	ld.w	r9,r6[80]
8001dd8e:	30 08       	mov	r8,0
8001dd90:	b2 88       	st.b	r9[0x0],r8
				goto reset;
8001dd92:	c0 5b       	rjmp	8001db9c <ubx_read+0x2e>
			}
			payload_counter = 0; // prepare to receive payload
8001dd94:	ec f9 01 ac 	ld.w	r9,r6[428]
8001dd98:	30 08       	mov	r8,0
8001dd9a:	b2 08       	st.h	r9[0x0],r8
			
			if(ubxclass == UBX_CLASS_NAV)
8001dd9c:	ec f8 00 60 	ld.w	r8,r6[96]
8001dda0:	11 89       	ld.ub	r9,r8[0x0]
8001dda2:	30 18       	mov	r8,1
8001dda4:	f0 09 18 00 	cp.b	r9,r8
8001dda8:	e0 81 01 c0 	brne	8001e128 <ubx_read+0x5ba>
			{
				switch(msg_id)
8001ddac:	ec f8 00 5c 	ld.w	r8,r6[92]
8001ddb0:	11 88       	ld.ub	r8,r8[0x0]
8001ddb2:	58 68       	cp.w	r8,6
8001ddb4:	e0 80 00 ab 	breq	8001df0a <ubx_read+0x39c>
8001ddb8:	e0 89 00 08 	brgt	8001ddc8 <ubx_read+0x25a>
8001ddbc:	58 28       	cp.w	r8,2
8001ddbe:	c0 e0       	breq	8001ddda <ubx_read+0x26c>
8001ddc0:	58 38       	cp.w	r8,3
8001ddc2:	c5 80       	breq	8001de72 <ubx_read+0x304>
8001ddc4:	e0 8f 01 84 	bral	8001e0cc <ubx_read+0x55e>
8001ddc8:	59 28       	cp.w	r8,18
8001ddca:	e0 80 00 eb 	breq	8001dfa0 <ubx_read+0x432>
8001ddce:	e0 48 00 30 	cp.w	r8,48
8001ddd2:	e0 80 01 32 	breq	8001e036 <ubx_read+0x4c8>
8001ddd6:	e0 8f 01 7b 	bral	8001e0cc <ubx_read+0x55e>
				{
				case MSG_NAV_POSLLH:
					if(payload_length == UBX_SIZE_NAV_POSLLH)
8001ddda:	ec f8 00 58 	ld.w	r8,r6[88]
8001ddde:	90 09       	ld.sh	r9,r8[0x0]
8001dde0:	31 c8       	mov	r8,28
8001dde2:	f0 09 19 00 	cp.h	r9,r8
8001dde6:	c1 21       	brne	8001de0a <ubx_read+0x29c>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentPosllhMessage;
8001dde8:	ec f9 07 7c 	ld.w	r9,r6[1916]
8001ddec:	ec f8 00 d0 	ld.w	r8,r6[208]
8001ddf0:	91 09       	st.w	r8[0x0],r9
						ubx_lastMessage = (unsigned char**)&ubx_lastPosllhMessage;
8001ddf2:	ec f9 03 50 	ld.w	r9,r6[848]
8001ddf6:	ec f8 00 dc 	ld.w	r8,r6[220]
8001ddfa:	91 09       	st.w	r8[0x0],r9
						ubx_validMessage = &ubx_numberOfValidPosllhMessage;
8001ddfc:	ec f8 00 f4 	ld.w	r8,r6[244]
8001de00:	ec f9 04 58 	ld.w	r9,r6[1112]
8001de04:	91 09       	st.w	r8[0x0],r9
						dbg_print_num(UBX_SIZE_NAV_POSLLH,10);
						dbg_print("\n");
						step = 0;
						goto reset;
					}
					break;
8001de06:	e0 8f 01 8f 	bral	8001e124 <ubx_read+0x5b6>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentPosllhMessage;
						ubx_lastMessage = (unsigned char**)&ubx_lastPosllhMessage;
						ubx_validMessage = &ubx_numberOfValidPosllhMessage;
					}else{
						dbg_print("Wrong Posllh message 0x");
8001de0a:	fe cc 04 f2 	sub	r12,pc,1266
8001de0e:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(ubxclass,16);
8001de12:	ec f8 00 60 	ld.w	r8,r6[96]
8001de16:	11 88       	ld.ub	r8,r8[0x0]
8001de18:	31 0b       	mov	r11,16
8001de1a:	10 9c       	mov	r12,r8
8001de1c:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Msg id: 0x");
8001de20:	fe cc 04 f0 	sub	r12,pc,1264
8001de24:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(msg_id,16);
8001de28:	ec f8 00 5c 	ld.w	r8,r6[92]
8001de2c:	11 88       	ld.ub	r8,r8[0x0]
8001de2e:	31 0b       	mov	r11,16
8001de30:	10 9c       	mov	r12,r8
8001de32:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Received size:");
8001de36:	fe cc 04 fa 	sub	r12,pc,1274
8001de3a:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(payload_length,10);
8001de3e:	ec f8 00 58 	ld.w	r8,r6[88]
8001de42:	90 08       	ld.sh	r8,r8[0x0]
8001de44:	5c 78       	castu.h	r8
8001de46:	30 ab       	mov	r11,10
8001de48:	10 9c       	mov	r12,r8
8001de4a:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" should be:");
8001de4e:	fe cc 05 02 	sub	r12,pc,1282
8001de52:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(UBX_SIZE_NAV_POSLLH,10);
8001de56:	30 ab       	mov	r11,10
8001de58:	31 cc       	mov	r12,28
8001de5a:	f0 16 00 04 	mcall	r6[16]
						dbg_print("\n");
8001de5e:	fe cc 05 4a 	sub	r12,pc,1354
8001de62:	f0 16 00 01 	mcall	r6[4]
						step = 0;
8001de66:	ec f9 00 50 	ld.w	r9,r6[80]
8001de6a:	30 08       	mov	r8,0
8001de6c:	b2 88       	st.b	r9[0x0],r8
						goto reset;
8001de6e:	fe 9f fe 97 	bral	8001db9c <ubx_read+0x2e>
					}
					break;
				case MSG_NAV_STATUS:
					if(payload_length == UBX_SIZE_NAV_STATUS)
8001de72:	ec f8 00 58 	ld.w	r8,r6[88]
8001de76:	90 09       	ld.sh	r9,r8[0x0]
8001de78:	31 08       	mov	r8,16
8001de7a:	f0 09 19 00 	cp.h	r9,r8
8001de7e:	c1 21       	brne	8001dea2 <ubx_read+0x334>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentStatusMessage;
8001de80:	ec f9 06 0c 	ld.w	r9,r6[1548]
8001de84:	ec f8 00 d0 	ld.w	r8,r6[208]
8001de88:	91 09       	st.w	r8[0x0],r9
						ubx_lastMessage = (unsigned char**)&ubx_lastStatusMessage;
8001de8a:	ec f9 03 54 	ld.w	r9,r6[852]
8001de8e:	ec f8 00 dc 	ld.w	r8,r6[220]
8001de92:	91 09       	st.w	r8[0x0],r9
						ubx_validMessage = &ubx_numberOfValidStatusMessage;
8001de94:	ec f8 00 f4 	ld.w	r8,r6[244]
8001de98:	ec f9 04 20 	ld.w	r9,r6[1056]
8001de9c:	91 09       	st.w	r8[0x0],r9
						dbg_print_num(UBX_SIZE_NAV_STATUS,10);
						dbg_print("\n");
						step = 0;
						goto reset;
					}
					break;
8001de9e:	e0 8f 01 43 	bral	8001e124 <ubx_read+0x5b6>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentStatusMessage;
						ubx_lastMessage = (unsigned char**)&ubx_lastStatusMessage;
						ubx_validMessage = &ubx_numberOfValidStatusMessage;
					}else{
						dbg_print("Wrong Nav Status message 0x");
8001dea2:	fe cc 05 4a 	sub	r12,pc,1354
8001dea6:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(ubxclass,16);
8001deaa:	ec f8 00 60 	ld.w	r8,r6[96]
8001deae:	11 88       	ld.ub	r8,r8[0x0]
8001deb0:	31 0b       	mov	r11,16
8001deb2:	10 9c       	mov	r12,r8
8001deb4:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Msg id: 0x");
8001deb8:	fe cc 05 88 	sub	r12,pc,1416
8001debc:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(msg_id,16);
8001dec0:	ec f8 00 5c 	ld.w	r8,r6[92]
8001dec4:	11 88       	ld.ub	r8,r8[0x0]
8001dec6:	31 0b       	mov	r11,16
8001dec8:	10 9c       	mov	r12,r8
8001deca:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Received size:");
8001dece:	fe cc 05 92 	sub	r12,pc,1426
8001ded2:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(payload_length,10);
8001ded6:	ec f8 00 58 	ld.w	r8,r6[88]
8001deda:	90 08       	ld.sh	r8,r8[0x0]
8001dedc:	5c 78       	castu.h	r8
8001dede:	30 ab       	mov	r11,10
8001dee0:	10 9c       	mov	r12,r8
8001dee2:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" should be:");
8001dee6:	fe cc 05 9a 	sub	r12,pc,1434
8001deea:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(UBX_SIZE_NAV_STATUS,10);
8001deee:	30 ab       	mov	r11,10
8001def0:	31 0c       	mov	r12,16
8001def2:	f0 16 00 04 	mcall	r6[16]
						dbg_print("\n");
8001def6:	fe cc 05 e2 	sub	r12,pc,1506
8001defa:	f0 16 00 01 	mcall	r6[4]
						step = 0;
8001defe:	ec f9 00 50 	ld.w	r9,r6[80]
8001df02:	30 08       	mov	r8,0
8001df04:	b2 88       	st.b	r9[0x0],r8
						goto reset;
8001df06:	fe 9f fe 4b 	bral	8001db9c <ubx_read+0x2e>
					}
					break;
				case MSG_NAV_SOL:
					if(payload_length == UBX_SIZE_NAV_SOL)
8001df0a:	ec f8 00 58 	ld.w	r8,r6[88]
8001df0e:	90 09       	ld.sh	r9,r8[0x0]
8001df10:	33 48       	mov	r8,52
8001df12:	f0 09 19 00 	cp.h	r9,r8
8001df16:	c1 11       	brne	8001df38 <ubx_read+0x3ca>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentSolutionMessage;
8001df18:	ec f9 07 bc 	ld.w	r9,r6[1980]
8001df1c:	ec f8 00 d0 	ld.w	r8,r6[208]
8001df20:	91 09       	st.w	r8[0x0],r9
						ubx_lastMessage = (unsigned char**)&ubx_lastSolutionMessage;
8001df22:	ec f9 03 bc 	ld.w	r9,r6[956]
8001df26:	ec f8 00 dc 	ld.w	r8,r6[220]
8001df2a:	91 09       	st.w	r8[0x0],r9
						ubx_validMessage = &ubx_numberOfValidSolutionMessage;;
8001df2c:	ec f8 00 f4 	ld.w	r8,r6[244]
8001df30:	ec f9 04 70 	ld.w	r9,r6[1136]
8001df34:	91 09       	st.w	r8[0x0],r9
						dbg_print_num(UBX_SIZE_NAV_SOL,10);
						dbg_print("\n");
						step = 0;
						goto reset;
					}
					break;
8001df36:	cf 78       	rjmp	8001e124 <ubx_read+0x5b6>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentSolutionMessage;
						ubx_lastMessage = (unsigned char**)&ubx_lastSolutionMessage;
						ubx_validMessage = &ubx_numberOfValidSolutionMessage;;
					}else{
						dbg_print("Wrong Solution message 0x");
8001df38:	fe cc 05 c4 	sub	r12,pc,1476
8001df3c:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(ubxclass,16);
8001df40:	ec f8 00 60 	ld.w	r8,r6[96]
8001df44:	11 88       	ld.ub	r8,r8[0x0]
8001df46:	31 0b       	mov	r11,16
8001df48:	10 9c       	mov	r12,r8
8001df4a:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Msg id: 0x");
8001df4e:	fe cc 06 1e 	sub	r12,pc,1566
8001df52:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(msg_id,16);
8001df56:	ec f8 00 5c 	ld.w	r8,r6[92]
8001df5a:	11 88       	ld.ub	r8,r8[0x0]
8001df5c:	31 0b       	mov	r11,16
8001df5e:	10 9c       	mov	r12,r8
8001df60:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Received size:");
8001df64:	fe cc 06 28 	sub	r12,pc,1576
8001df68:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(payload_length,10);
8001df6c:	ec f8 00 58 	ld.w	r8,r6[88]
8001df70:	90 08       	ld.sh	r8,r8[0x0]
8001df72:	5c 78       	castu.h	r8
8001df74:	30 ab       	mov	r11,10
8001df76:	10 9c       	mov	r12,r8
8001df78:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" should be:");
8001df7c:	fe cc 06 30 	sub	r12,pc,1584
8001df80:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(UBX_SIZE_NAV_SOL,10);
8001df84:	30 ab       	mov	r11,10
8001df86:	33 4c       	mov	r12,52
8001df88:	f0 16 00 04 	mcall	r6[16]
						dbg_print("\n");
8001df8c:	fe cc 06 78 	sub	r12,pc,1656
8001df90:	f0 16 00 01 	mcall	r6[4]
						step = 0;
8001df94:	ec f9 00 50 	ld.w	r9,r6[80]
8001df98:	30 08       	mov	r8,0
8001df9a:	b2 88       	st.b	r9[0x0],r8
						goto reset;
8001df9c:	fe 9f fe 00 	bral	8001db9c <ubx_read+0x2e>
					}
					break;
				case MSG_NAV_VELNED:
					if(payload_length == UBX_SIZE_NAV_VELNED)
8001dfa0:	ec f8 00 58 	ld.w	r8,r6[88]
8001dfa4:	90 09       	ld.sh	r9,r8[0x0]
8001dfa6:	32 48       	mov	r8,36
8001dfa8:	f0 09 19 00 	cp.h	r9,r8
8001dfac:	c1 11       	brne	8001dfce <ubx_read+0x460>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentVelnedMessage;
8001dfae:	ec f9 05 94 	ld.w	r9,r6[1428]
8001dfb2:	ec f8 00 d0 	ld.w	r8,r6[208]
8001dfb6:	91 09       	st.w	r8[0x0],r9
						ubx_lastMessage = (unsigned char**)&ubx_lastVelnedMessage;
8001dfb8:	ec f9 04 6c 	ld.w	r9,r6[1132]
8001dfbc:	ec f8 00 dc 	ld.w	r8,r6[220]
8001dfc0:	91 09       	st.w	r8[0x0],r9
						ubx_validMessage = &ubx_numberOfValidVelnedMessage;
8001dfc2:	ec f8 00 f4 	ld.w	r8,r6[244]
8001dfc6:	ec f9 04 7c 	ld.w	r9,r6[1148]
8001dfca:	91 09       	st.w	r8[0x0],r9
						dbg_print_num(UBX_SIZE_NAV_VELNED,10);
						dbg_print("\n");
						step = 0;
						goto reset;
					}
					break;
8001dfcc:	ca c8       	rjmp	8001e124 <ubx_read+0x5b6>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentVelnedMessage;
						ubx_lastMessage = (unsigned char**)&ubx_lastVelnedMessage;
						ubx_validMessage = &ubx_numberOfValidVelnedMessage;
					}else{
						dbg_print("Wrong Velned message 0x");
8001dfce:	fe cc 06 3e 	sub	r12,pc,1598
8001dfd2:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(ubxclass,16);
8001dfd6:	ec f8 00 60 	ld.w	r8,r6[96]
8001dfda:	11 88       	ld.ub	r8,r8[0x0]
8001dfdc:	31 0b       	mov	r11,16
8001dfde:	10 9c       	mov	r12,r8
8001dfe0:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Msg id: 0x");
8001dfe4:	fe cc 06 b4 	sub	r12,pc,1716
8001dfe8:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(msg_id,16);
8001dfec:	ec f8 00 5c 	ld.w	r8,r6[92]
8001dff0:	11 88       	ld.ub	r8,r8[0x0]
8001dff2:	31 0b       	mov	r11,16
8001dff4:	10 9c       	mov	r12,r8
8001dff6:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Received size:");
8001dffa:	fe cc 06 be 	sub	r12,pc,1726
8001dffe:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(payload_length,10);
8001e002:	ec f8 00 58 	ld.w	r8,r6[88]
8001e006:	90 08       	ld.sh	r8,r8[0x0]
8001e008:	5c 78       	castu.h	r8
8001e00a:	30 ab       	mov	r11,10
8001e00c:	10 9c       	mov	r12,r8
8001e00e:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" should be:");
8001e012:	fe cc 06 c6 	sub	r12,pc,1734
8001e016:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(UBX_SIZE_NAV_VELNED,10);
8001e01a:	30 ab       	mov	r11,10
8001e01c:	32 4c       	mov	r12,36
8001e01e:	f0 16 00 04 	mcall	r6[16]
						dbg_print("\n");
8001e022:	fe cc 07 0e 	sub	r12,pc,1806
8001e026:	f0 16 00 01 	mcall	r6[4]
						step = 0;
8001e02a:	ec f9 00 50 	ld.w	r9,r6[80]
8001e02e:	30 08       	mov	r8,0
8001e030:	b2 88       	st.b	r9[0x0],r8
						goto reset;
8001e032:	fe 9f fd b5 	bral	8001db9c <ubx_read+0x2e>
					}
					break;
				case MSG_NAV_SVINFO:
					if(payload_length == UBX_SIZE_NAV_SVINFO)
8001e036:	ec f8 00 58 	ld.w	r8,r6[88]
8001e03a:	90 09       	ld.sh	r9,r8[0x0]
8001e03c:	31 e8       	mov	r8,30
8001e03e:	f0 09 19 00 	cp.h	r9,r8
8001e042:	c1 11       	brne	8001e064 <ubx_read+0x4f6>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentSVInfoMessage;
8001e044:	ec f9 04 bc 	ld.w	r9,r6[1212]
8001e048:	ec f8 00 d0 	ld.w	r8,r6[208]
8001e04c:	91 09       	st.w	r8[0x0],r9
						ubx_lastMessage = (unsigned char**)&ubx_lastSVInfoMessage;
8001e04e:	ec f9 04 50 	ld.w	r9,r6[1104]
8001e052:	ec f8 00 dc 	ld.w	r8,r6[220]
8001e056:	91 09       	st.w	r8[0x0],r9
						ubx_validMessage = &ubx_numberOfValidSVInfoMessage;
8001e058:	ec f8 00 f4 	ld.w	r8,r6[244]
8001e05c:	ec f9 03 88 	ld.w	r9,r6[904]
8001e060:	91 09       	st.w	r8[0x0],r9
						dbg_print_num(UBX_SIZE_NAV_SVINFO,10);
						dbg_print("\n");
						step = 0;
						goto reset;
					}
					break;
8001e062:	c6 18       	rjmp	8001e124 <ubx_read+0x5b6>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentSVInfoMessage;
						ubx_lastMessage = (unsigned char**)&ubx_lastSVInfoMessage;
						ubx_validMessage = &ubx_numberOfValidSVInfoMessage;
					}else{
						dbg_print("Wrong SV Info message 0x");
8001e064:	fe cc 06 bc 	sub	r12,pc,1724
8001e068:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(ubxclass,16);
8001e06c:	ec f8 00 60 	ld.w	r8,r6[96]
8001e070:	11 88       	ld.ub	r8,r8[0x0]
8001e072:	31 0b       	mov	r11,16
8001e074:	10 9c       	mov	r12,r8
8001e076:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Msg id: 0x");
8001e07a:	fe cc 07 4a 	sub	r12,pc,1866
8001e07e:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(msg_id,16);
8001e082:	ec f8 00 5c 	ld.w	r8,r6[92]
8001e086:	11 88       	ld.ub	r8,r8[0x0]
8001e088:	31 0b       	mov	r11,16
8001e08a:	10 9c       	mov	r12,r8
8001e08c:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Received size:");
8001e090:	fe cc 07 54 	sub	r12,pc,1876
8001e094:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(payload_length,10);
8001e098:	ec f8 00 58 	ld.w	r8,r6[88]
8001e09c:	90 08       	ld.sh	r8,r8[0x0]
8001e09e:	5c 78       	castu.h	r8
8001e0a0:	30 ab       	mov	r11,10
8001e0a2:	10 9c       	mov	r12,r8
8001e0a4:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" should be:");
8001e0a8:	fe cc 07 5c 	sub	r12,pc,1884
8001e0ac:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(UBX_SIZE_NAV_SVINFO,10);
8001e0b0:	30 ab       	mov	r11,10
8001e0b2:	31 ec       	mov	r12,30
8001e0b4:	f0 16 00 04 	mcall	r6[16]
						dbg_print("\n");
8001e0b8:	fe cc 07 a4 	sub	r12,pc,1956
8001e0bc:	f0 16 00 01 	mcall	r6[4]
						step = 0;
8001e0c0:	ec f9 00 50 	ld.w	r9,r6[80]
8001e0c4:	30 08       	mov	r8,0
8001e0c6:	b2 88       	st.b	r9[0x0],r8
						goto reset;
8001e0c8:	fe 9f fd 6a 	bral	8001db9c <ubx_read+0x2e>
					}
					break;
				default:
					step = 0;
8001e0cc:	ec f9 00 50 	ld.w	r9,r6[80]
8001e0d0:	30 08       	mov	r8,0
8001e0d2:	b2 88       	st.b	r9[0x0],r8
					dbg_print("Unexpected NAV message, Class: 0x");
8001e0d4:	fe cc 07 10 	sub	r12,pc,1808
8001e0d8:	f0 16 00 01 	mcall	r6[4]
					dbg_print_num(ubxclass,16);
8001e0dc:	ec f8 00 60 	ld.w	r8,r6[96]
8001e0e0:	11 88       	ld.ub	r8,r8[0x0]
8001e0e2:	31 0b       	mov	r11,16
8001e0e4:	10 9c       	mov	r12,r8
8001e0e6:	f0 16 00 04 	mcall	r6[16]
					dbg_print(", msg id: 0x");
8001e0ea:	fe cc 07 02 	sub	r12,pc,1794
8001e0ee:	f0 16 00 01 	mcall	r6[4]
					dbg_print_num(msg_id,16);
8001e0f2:	ec f8 00 5c 	ld.w	r8,r6[92]
8001e0f6:	11 88       	ld.ub	r8,r8[0x0]
8001e0f8:	31 0b       	mov	r11,16
8001e0fa:	10 9c       	mov	r12,r8
8001e0fc:	f0 16 00 04 	mcall	r6[16]
					dbg_print(" of size ");
8001e100:	fe cc 07 08 	sub	r12,pc,1800
8001e104:	f0 16 00 01 	mcall	r6[4]
					dbg_print_num(payload_length,10);
8001e108:	ec f8 00 58 	ld.w	r8,r6[88]
8001e10c:	90 08       	ld.sh	r8,r8[0x0]
8001e10e:	5c 78       	castu.h	r8
8001e110:	30 ab       	mov	r11,10
8001e112:	10 9c       	mov	r12,r8
8001e114:	f0 16 00 04 	mcall	r6[16]
					dbg_print("\n");
8001e118:	fe cc 08 04 	sub	r12,pc,2052
8001e11c:	f0 16 00 01 	mcall	r6[4]
					goto reset;
8001e120:	fe 9f fd 3e 	bral	8001db9c <ubx_read+0x2e>
				dbg_print(" of size ");
				dbg_print_num(payload_length,10);
				dbg_print("\n");
				goto reset;	
			}		
			break;
8001e124:	e0 8f 03 93 	bral	8001e84a <ubx_read+0xcdc>
					dbg_print(" of size ");
					dbg_print_num(payload_length,10);
					dbg_print("\n");
					goto reset;
				}	
			}else if(ubxclass == UBX_CLASS_CFG)
8001e128:	ec f8 00 60 	ld.w	r8,r6[96]
8001e12c:	11 89       	ld.ub	r9,r8[0x0]
8001e12e:	30 68       	mov	r8,6
8001e130:	f0 09 18 00 	cp.b	r9,r8
8001e134:	e0 81 01 1d 	brne	8001e36e <ubx_read+0x800>
// 				dbg_print_num(msg_id,16);
// 				dbg_print("payload_length :");
// 				dbg_print_num(payload_length,10);
// 				dbg_print("\n");
				
				switch(msg_id)
8001e138:	ec f8 00 5c 	ld.w	r8,r6[92]
8001e13c:	11 88       	ld.ub	r8,r8[0x0]
8001e13e:	58 88       	cp.w	r8,8
8001e140:	c5 30       	breq	8001e1e6 <ubx_read+0x678>
8001e142:	e0 48 00 24 	cp.w	r8,36
8001e146:	c0 50       	breq	8001e150 <ubx_read+0x5e2>
8001e148:	58 18       	cp.w	r8,1
8001e14a:	e0 80 00 99 	breq	8001e27c <ubx_read+0x70e>
8001e14e:	ce 28       	rjmp	8001e312 <ubx_read+0x7a4>
				{			
				case MSG_CFG_NAV_SETTINGS:
					if(payload_length == UBX_SIZE_NAV_SETTINGS)
8001e150:	ec f8 00 58 	ld.w	r8,r6[88]
8001e154:	90 09       	ld.sh	r9,r8[0x0]
8001e156:	32 48       	mov	r8,36
8001e158:	f0 09 19 00 	cp.h	r9,r8
8001e15c:	c1 11       	brne	8001e17e <ubx_read+0x610>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentNavSettingsMessage;
8001e15e:	ec f9 05 68 	ld.w	r9,r6[1384]
8001e162:	ec f8 00 d0 	ld.w	r8,r6[208]
8001e166:	91 09       	st.w	r8[0x0],r9
						ubx_lastMessage = (unsigned char**)&ubx_lastNavSettingsMessage;
8001e168:	ec f9 04 64 	ld.w	r9,r6[1124]
8001e16c:	ec f8 00 dc 	ld.w	r8,r6[220]
8001e170:	91 09       	st.w	r8[0x0],r9
						ubx_validMessage = &ubx_numberOfValidNavSettingsMessage;
8001e172:	ec f8 00 f4 	ld.w	r8,r6[244]
8001e176:	ec f9 04 34 	ld.w	r9,r6[1076]
8001e17a:	91 09       	st.w	r8[0x0],r9
						dbg_print_num(UBX_SIZE_NAV_SETTINGS,10);
						dbg_print("\n");
						step = 0;
						goto reset;
					}
					break;		
8001e17c:	cf 78       	rjmp	8001e36a <ubx_read+0x7fc>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentNavSettingsMessage;
						ubx_lastMessage = (unsigned char**)&ubx_lastNavSettingsMessage;
						ubx_validMessage = &ubx_numberOfValidNavSettingsMessage;
					}else{
						dbg_print("Wrong Nav Settings message 0x");
8001e17e:	fe cc 07 7a 	sub	r12,pc,1914
8001e182:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(ubxclass,16);
8001e186:	ec f8 00 60 	ld.w	r8,r6[96]
8001e18a:	11 88       	ld.ub	r8,r8[0x0]
8001e18c:	31 0b       	mov	r11,16
8001e18e:	10 9c       	mov	r12,r8
8001e190:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Msg id: 0x");
8001e194:	fe cc 08 64 	sub	r12,pc,2148
8001e198:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(msg_id,16);
8001e19c:	ec f8 00 5c 	ld.w	r8,r6[92]
8001e1a0:	11 88       	ld.ub	r8,r8[0x0]
8001e1a2:	31 0b       	mov	r11,16
8001e1a4:	10 9c       	mov	r12,r8
8001e1a6:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Received size:");
8001e1aa:	fe cc 08 6e 	sub	r12,pc,2158
8001e1ae:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(payload_length,10);
8001e1b2:	ec f8 00 58 	ld.w	r8,r6[88]
8001e1b6:	90 08       	ld.sh	r8,r8[0x0]
8001e1b8:	5c 78       	castu.h	r8
8001e1ba:	30 ab       	mov	r11,10
8001e1bc:	10 9c       	mov	r12,r8
8001e1be:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" should be:");
8001e1c2:	fe cc 08 76 	sub	r12,pc,2166
8001e1c6:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(UBX_SIZE_NAV_SETTINGS,10);
8001e1ca:	30 ab       	mov	r11,10
8001e1cc:	32 4c       	mov	r12,36
8001e1ce:	f0 16 00 04 	mcall	r6[16]
						dbg_print("\n");
8001e1d2:	fe cc 08 be 	sub	r12,pc,2238
8001e1d6:	f0 16 00 01 	mcall	r6[4]
						step = 0;
8001e1da:	ec f9 00 50 	ld.w	r9,r6[80]
8001e1de:	30 08       	mov	r8,0
8001e1e0:	b2 88       	st.b	r9[0x0],r8
						goto reset;
8001e1e2:	fe 9f fc dd 	bral	8001db9c <ubx_read+0x2e>
					}
					break;		
				case MSG_CFG_RATE:
					if(payload_length == UBX_SIZE_CFG_RATE)
8001e1e6:	ec f8 00 58 	ld.w	r8,r6[88]
8001e1ea:	90 09       	ld.sh	r9,r8[0x0]
8001e1ec:	30 68       	mov	r8,6
8001e1ee:	f0 09 19 00 	cp.h	r9,r8
8001e1f2:	c1 11       	brne	8001e214 <ubx_read+0x6a6>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentCFGRateMessage;
8001e1f4:	ec f9 06 08 	ld.w	r9,r6[1544]
8001e1f8:	ec f8 00 d0 	ld.w	r8,r6[208]
8001e1fc:	91 09       	st.w	r8[0x0],r9
						ubx_lastMessage = (unsigned char**)&ubx_lastCFGRateMessage;
8001e1fe:	ec f9 08 50 	ld.w	r9,r6[2128]
8001e202:	ec f8 00 dc 	ld.w	r8,r6[220]
8001e206:	91 09       	st.w	r8[0x0],r9
						ubx_validMessage = &ubx_numberOfValidCFGRateMessage;
8001e208:	ec f8 00 f4 	ld.w	r8,r6[244]
8001e20c:	ec f9 06 c8 	ld.w	r9,r6[1736]
8001e210:	91 09       	st.w	r8[0x0],r9
						dbg_print_num(UBX_SIZE_CFG_RATE,10);
						dbg_print("\n");
						step = 0;
						goto reset;
					}
					break;
8001e212:	ca c8       	rjmp	8001e36a <ubx_read+0x7fc>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentCFGRateMessage;
						ubx_lastMessage = (unsigned char**)&ubx_lastCFGRateMessage;
						ubx_validMessage = &ubx_numberOfValidCFGRateMessage;
					}else{
						dbg_print("Wrong CFG Rate message 0x");
8001e214:	fe cc 07 f0 	sub	r12,pc,2032
8001e218:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(ubxclass,16);
8001e21c:	ec f8 00 60 	ld.w	r8,r6[96]
8001e220:	11 88       	ld.ub	r8,r8[0x0]
8001e222:	31 0b       	mov	r11,16
8001e224:	10 9c       	mov	r12,r8
8001e226:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Msg id: 0x");
8001e22a:	fe cc 08 fa 	sub	r12,pc,2298
8001e22e:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(msg_id,16);
8001e232:	ec f8 00 5c 	ld.w	r8,r6[92]
8001e236:	11 88       	ld.ub	r8,r8[0x0]
8001e238:	31 0b       	mov	r11,16
8001e23a:	10 9c       	mov	r12,r8
8001e23c:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Received size:");
8001e240:	fe cc 09 04 	sub	r12,pc,2308
8001e244:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(payload_length,10);
8001e248:	ec f8 00 58 	ld.w	r8,r6[88]
8001e24c:	90 08       	ld.sh	r8,r8[0x0]
8001e24e:	5c 78       	castu.h	r8
8001e250:	30 ab       	mov	r11,10
8001e252:	10 9c       	mov	r12,r8
8001e254:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" should be:");
8001e258:	fe cc 09 0c 	sub	r12,pc,2316
8001e25c:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(UBX_SIZE_CFG_RATE,10);
8001e260:	30 ab       	mov	r11,10
8001e262:	30 6c       	mov	r12,6
8001e264:	f0 16 00 04 	mcall	r6[16]
						dbg_print("\n");
8001e268:	fe cc 09 54 	sub	r12,pc,2388
8001e26c:	f0 16 00 01 	mcall	r6[4]
						step = 0;
8001e270:	ec f9 00 50 	ld.w	r9,r6[80]
8001e274:	30 08       	mov	r8,0
8001e276:	b2 88       	st.b	r9[0x0],r8
						goto reset;
8001e278:	fe 9f fc 92 	bral	8001db9c <ubx_read+0x2e>
					}
					break;
				case MSG_CFG_SET_RATE:
					if (payload_length == UBX_SIZE_CFG_GETSET_RATE)
8001e27c:	ec f8 00 58 	ld.w	r8,r6[88]
8001e280:	90 09       	ld.sh	r9,r8[0x0]
8001e282:	30 38       	mov	r8,3
8001e284:	f0 09 19 00 	cp.h	r9,r8
8001e288:	c1 11       	brne	8001e2aa <ubx_read+0x73c>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentCFGSetGetRateMessage;
8001e28a:	ec f9 06 28 	ld.w	r9,r6[1576]
8001e28e:	ec f8 00 d0 	ld.w	r8,r6[208]
8001e292:	91 09       	st.w	r8[0x0],r9
						ubx_lastMessage = (unsigned char**)&ubx_lastCFGSetGetRateMessage;
8001e294:	ec f9 03 cc 	ld.w	r9,r6[972]
8001e298:	ec f8 00 dc 	ld.w	r8,r6[220]
8001e29c:	91 09       	st.w	r8[0x0],r9
						ubx_validMessage = &ubx_numberOfValidCFGSetGetRateMessage;
8001e29e:	ec f8 00 f4 	ld.w	r8,r6[244]
8001e2a2:	ec f9 04 94 	ld.w	r9,r6[1172]
8001e2a6:	91 09       	st.w	r8[0x0],r9
						dbg_print_num(UBX_SIZE_CFG_GETSET_RATE,10);
						dbg_print("\n");
						step = 0;
						goto reset;
					}
					break;
8001e2a8:	c6 18       	rjmp	8001e36a <ubx_read+0x7fc>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentCFGSetGetRateMessage;
						ubx_lastMessage = (unsigned char**)&ubx_lastCFGSetGetRateMessage;
						ubx_validMessage = &ubx_numberOfValidCFGSetGetRateMessage;
					}else{
						dbg_print("Wrong CFG Set/get message 0x");
8001e2aa:	fe cc 08 6a 	sub	r12,pc,2154
8001e2ae:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(ubxclass,16);
8001e2b2:	ec f8 00 60 	ld.w	r8,r6[96]
8001e2b6:	11 88       	ld.ub	r8,r8[0x0]
8001e2b8:	31 0b       	mov	r11,16
8001e2ba:	10 9c       	mov	r12,r8
8001e2bc:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Msg id: 0x");
8001e2c0:	fe cc 09 90 	sub	r12,pc,2448
8001e2c4:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(msg_id,16);
8001e2c8:	ec f8 00 5c 	ld.w	r8,r6[92]
8001e2cc:	11 88       	ld.ub	r8,r8[0x0]
8001e2ce:	31 0b       	mov	r11,16
8001e2d0:	10 9c       	mov	r12,r8
8001e2d2:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Received size:");
8001e2d6:	fe cc 09 9a 	sub	r12,pc,2458
8001e2da:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(payload_length,10);
8001e2de:	ec f8 00 58 	ld.w	r8,r6[88]
8001e2e2:	90 08       	ld.sh	r8,r8[0x0]
8001e2e4:	5c 78       	castu.h	r8
8001e2e6:	30 ab       	mov	r11,10
8001e2e8:	10 9c       	mov	r12,r8
8001e2ea:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" should be:");
8001e2ee:	fe cc 09 a2 	sub	r12,pc,2466
8001e2f2:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(UBX_SIZE_CFG_GETSET_RATE,10);
8001e2f6:	30 ab       	mov	r11,10
8001e2f8:	30 3c       	mov	r12,3
8001e2fa:	f0 16 00 04 	mcall	r6[16]
						dbg_print("\n");
8001e2fe:	fe cc 09 ea 	sub	r12,pc,2538
8001e302:	f0 16 00 01 	mcall	r6[4]
						step = 0;
8001e306:	ec f9 00 50 	ld.w	r9,r6[80]
8001e30a:	30 08       	mov	r8,0
8001e30c:	b2 88       	st.b	r9[0x0],r8
						goto reset;
8001e30e:	fe 9f fc 47 	bral	8001db9c <ubx_read+0x2e>
					}
					break;
				default:
					step = 0;
8001e312:	ec f9 00 50 	ld.w	r9,r6[80]
8001e316:	30 08       	mov	r8,0
8001e318:	b2 88       	st.b	r9[0x0],r8
					dbg_print("Unexpected CFG message, Class: 0x");
8001e31a:	fe cc 08 ba 	sub	r12,pc,2234
8001e31e:	f0 16 00 01 	mcall	r6[4]
					dbg_print_num(ubxclass,16);
8001e322:	ec f8 00 60 	ld.w	r8,r6[96]
8001e326:	11 88       	ld.ub	r8,r8[0x0]
8001e328:	31 0b       	mov	r11,16
8001e32a:	10 9c       	mov	r12,r8
8001e32c:	f0 16 00 04 	mcall	r6[16]
					dbg_print(", msg id: 0x");
8001e330:	fe cc 09 48 	sub	r12,pc,2376
8001e334:	f0 16 00 01 	mcall	r6[4]
					dbg_print_num(msg_id,16);
8001e338:	ec f8 00 5c 	ld.w	r8,r6[92]
8001e33c:	11 88       	ld.ub	r8,r8[0x0]
8001e33e:	31 0b       	mov	r11,16
8001e340:	10 9c       	mov	r12,r8
8001e342:	f0 16 00 04 	mcall	r6[16]
					dbg_print(" of size ");
8001e346:	fe cc 09 4e 	sub	r12,pc,2382
8001e34a:	f0 16 00 01 	mcall	r6[4]
					dbg_print_num(payload_length,10);
8001e34e:	ec f8 00 58 	ld.w	r8,r6[88]
8001e352:	90 08       	ld.sh	r8,r8[0x0]
8001e354:	5c 78       	castu.h	r8
8001e356:	30 ab       	mov	r11,10
8001e358:	10 9c       	mov	r12,r8
8001e35a:	f0 16 00 04 	mcall	r6[16]
					dbg_print("\n");
8001e35e:	fe cc 0a 4a 	sub	r12,pc,2634
8001e362:	f0 16 00 01 	mcall	r6[4]
					goto reset;
8001e366:	fe 9f fc 1b 	bral	8001db9c <ubx_read+0x2e>
				dbg_print(" of size ");
				dbg_print_num(payload_length,10);
				dbg_print("\n");
				goto reset;	
			}		
			break;
8001e36a:	e0 8f 02 70 	bral	8001e84a <ubx_read+0xcdc>
					dbg_print(" of size ");
					dbg_print_num(payload_length,10);
					dbg_print("\n");
					goto reset;
				}
			} else if (ubxclass == UBX_CLASS_MON)
8001e36e:	ec f8 00 60 	ld.w	r8,r6[96]
8001e372:	11 89       	ld.ub	r9,r8[0x0]
8001e374:	30 a8       	mov	r8,10
8001e376:	f0 09 18 00 	cp.b	r9,r8
8001e37a:	e0 81 00 88 	brne	8001e48a <ubx_read+0x91c>
			{
 				switch (msg_id)
8001e37e:	ec f8 00 5c 	ld.w	r8,r6[92]
8001e382:	11 88       	ld.ub	r8,r8[0x0]
8001e384:	e0 48 00 21 	cp.w	r8,33
8001e388:	c4 d1       	brne	8001e422 <ubx_read+0x8b4>
 				{
 				case MSG_MON_RXR:
 					if(payload_length == UBX_SIZE_MON_RXR)
8001e38a:	ec f8 00 58 	ld.w	r8,r6[88]
8001e38e:	90 09       	ld.sh	r9,r8[0x0]
8001e390:	30 18       	mov	r8,1
8001e392:	f0 09 19 00 	cp.h	r9,r8
8001e396:	c1 21       	brne	8001e3ba <ubx_read+0x84c>
 					{
 						ubx_currentMessage = (unsigned char**)&ubx_currentMONRXRMessage;
8001e398:	ec f9 05 64 	ld.w	r9,r6[1380]
8001e39c:	ec f8 00 d0 	ld.w	r8,r6[208]
8001e3a0:	91 09       	st.w	r8[0x0],r9
						ubx_lastMessage = (unsigned char**)&ubx_lastMONRXRMessage;
8001e3a2:	ec f9 03 b8 	ld.w	r9,r6[952]
8001e3a6:	ec f8 00 dc 	ld.w	r8,r6[220]
8001e3aa:	91 09       	st.w	r8[0x0],r9
						ubx_validMessage = &ubx_numberOfValidMONRXRMessage;
8001e3ac:	ec f8 00 f4 	ld.w	r8,r6[244]
8001e3b0:	ec f9 04 78 	ld.w	r9,r6[1144]
8001e3b4:	91 09       	st.w	r8[0x0],r9
				dbg_print(" of size ");
				dbg_print_num(payload_length,10);
				dbg_print("\n");
				goto reset;	
			}		
			break;
8001e3b6:	e0 8f 02 4a 	bral	8001e84a <ubx_read+0xcdc>
 					{
 						ubx_currentMessage = (unsigned char**)&ubx_currentMONRXRMessage;
						ubx_lastMessage = (unsigned char**)&ubx_lastMONRXRMessage;
						ubx_validMessage = &ubx_numberOfValidMONRXRMessage;
 					}else{
 						dbg_print("Wrong MON RXR message 0x");
8001e3ba:	fe cc 09 36 	sub	r12,pc,2358
8001e3be:	f0 16 00 01 	mcall	r6[4]
 						dbg_print_num(ubxclass,16);
8001e3c2:	ec f8 00 60 	ld.w	r8,r6[96]
8001e3c6:	11 88       	ld.ub	r8,r8[0x0]
8001e3c8:	31 0b       	mov	r11,16
8001e3ca:	10 9c       	mov	r12,r8
8001e3cc:	f0 16 00 04 	mcall	r6[16]
 						dbg_print(" Msg id: 0x");
8001e3d0:	fe cc 0a a0 	sub	r12,pc,2720
8001e3d4:	f0 16 00 01 	mcall	r6[4]
 						dbg_print_num(msg_id,16);
8001e3d8:	ec f8 00 5c 	ld.w	r8,r6[92]
8001e3dc:	11 88       	ld.ub	r8,r8[0x0]
8001e3de:	31 0b       	mov	r11,16
8001e3e0:	10 9c       	mov	r12,r8
8001e3e2:	f0 16 00 04 	mcall	r6[16]
 						dbg_print(" Received size:");
8001e3e6:	fe cc 0a aa 	sub	r12,pc,2730
8001e3ea:	f0 16 00 01 	mcall	r6[4]
 						dbg_print_num(payload_length,10);
8001e3ee:	ec f8 00 58 	ld.w	r8,r6[88]
8001e3f2:	90 08       	ld.sh	r8,r8[0x0]
8001e3f4:	5c 78       	castu.h	r8
8001e3f6:	30 ab       	mov	r11,10
8001e3f8:	10 9c       	mov	r12,r8
8001e3fa:	f0 16 00 04 	mcall	r6[16]
 						dbg_print(" should be:");
8001e3fe:	fe cc 0a b2 	sub	r12,pc,2738
8001e402:	f0 16 00 01 	mcall	r6[4]
 						dbg_print_num(UBX_SIZE_MON_RXR,10);
8001e406:	30 ab       	mov	r11,10
8001e408:	30 1c       	mov	r12,1
8001e40a:	f0 16 00 04 	mcall	r6[16]
 						dbg_print("\n");
8001e40e:	fe cc 0a fa 	sub	r12,pc,2810
8001e412:	f0 16 00 01 	mcall	r6[4]
 						step = 0;
8001e416:	ec f9 00 50 	ld.w	r9,r6[80]
8001e41a:	30 08       	mov	r8,0
8001e41c:	b2 88       	st.b	r9[0x0],r8
 						goto reset;
8001e41e:	fe 9f fb bf 	bral	8001db9c <ubx_read+0x2e>
 					}
					break;
 				default:
 					step = 0;
8001e422:	ec f9 00 50 	ld.w	r9,r6[80]
8001e426:	30 08       	mov	r8,0
8001e428:	b2 88       	st.b	r9[0x0],r8
 					dbg_print("Unexpected TIM message, Class: 0x");
8001e42a:	fe cc 09 8a 	sub	r12,pc,2442
8001e42e:	f0 16 00 01 	mcall	r6[4]
 					dbg_print_num(ubxclass,16);
8001e432:	ec f8 00 60 	ld.w	r8,r6[96]
8001e436:	11 88       	ld.ub	r8,r8[0x0]
8001e438:	31 0b       	mov	r11,16
8001e43a:	10 9c       	mov	r12,r8
8001e43c:	f0 16 00 04 	mcall	r6[16]
 					dbg_print(", msg id: 0x");
8001e440:	fe cc 0a 58 	sub	r12,pc,2648
8001e444:	f0 16 00 01 	mcall	r6[4]
 					dbg_print_num(msg_id,16);
8001e448:	ec f8 00 5c 	ld.w	r8,r6[92]
8001e44c:	11 88       	ld.ub	r8,r8[0x0]
8001e44e:	31 0b       	mov	r11,16
8001e450:	10 9c       	mov	r12,r8
8001e452:	f0 16 00 04 	mcall	r6[16]
 					dbg_print(" of size ");
8001e456:	fe cc 0a 5e 	sub	r12,pc,2654
8001e45a:	f0 16 00 01 	mcall	r6[4]
 					dbg_print_num(payload_length,10);
8001e45e:	ec f8 00 58 	ld.w	r8,r6[88]
8001e462:	90 08       	ld.sh	r8,r8[0x0]
8001e464:	5c 78       	castu.h	r8
8001e466:	30 ab       	mov	r11,10
8001e468:	10 9c       	mov	r12,r8
8001e46a:	f0 16 00 04 	mcall	r6[16]
					dbg_print(" should be :");
8001e46e:	fe cc 09 aa 	sub	r12,pc,2474
8001e472:	f0 16 00 01 	mcall	r6[4]
					dbg_print_num(MSG_MON_RXR,16);
8001e476:	31 0b       	mov	r11,16
8001e478:	32 1c       	mov	r12,33
8001e47a:	f0 16 00 04 	mcall	r6[16]
 					dbg_print("\n");
8001e47e:	fe cc 0b 6a 	sub	r12,pc,2922
8001e482:	f0 16 00 01 	mcall	r6[4]
 					goto reset;
8001e486:	fe 9f fb 8b 	bral	8001db9c <ubx_read+0x2e>
 				}
				
			} else if(ubxclass == UBX_CLASS_TIM)
8001e48a:	ec f8 00 60 	ld.w	r8,r6[96]
8001e48e:	11 89       	ld.ub	r9,r8[0x0]
8001e490:	30 d8       	mov	r8,13
8001e492:	f0 09 18 00 	cp.b	r9,r8
8001e496:	e0 81 00 d5 	brne	8001e640 <ubx_read+0xad2>
			{
				switch(msg_id)
8001e49a:	ec f8 00 5c 	ld.w	r8,r6[92]
8001e49e:	11 88       	ld.ub	r8,r8[0x0]
8001e4a0:	58 18       	cp.w	r8,1
8001e4a2:	c0 40       	breq	8001e4aa <ubx_read+0x93c>
8001e4a4:	58 68       	cp.w	r8,6
8001e4a6:	c4 d0       	breq	8001e540 <ubx_read+0x9d2>
8001e4a8:	c9 78       	rjmp	8001e5d6 <ubx_read+0xa68>
				{
				case MSG_TIM_TP:
					if (payload_length == UBX_SIZE_TIM_TP)
8001e4aa:	ec f8 00 58 	ld.w	r8,r6[88]
8001e4ae:	90 09       	ld.sh	r9,r8[0x0]
8001e4b0:	31 08       	mov	r8,16
8001e4b2:	f0 09 19 00 	cp.h	r9,r8
8001e4b6:	c1 11       	brne	8001e4d8 <ubx_read+0x96a>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentTimTPMessage;
8001e4b8:	ec f9 08 00 	ld.w	r9,r6[2048]
8001e4bc:	ec f8 00 d0 	ld.w	r8,r6[208]
8001e4c0:	91 09       	st.w	r8[0x0],r9
						ubx_lastMessage = (unsigned char**)&ubx_lastTimTPMessage;
8001e4c2:	ec f9 03 f4 	ld.w	r9,r6[1012]
8001e4c6:	ec f8 00 dc 	ld.w	r8,r6[220]
8001e4ca:	91 09       	st.w	r8[0x0],r9
						ubx_validMessage = &ubx_numberOfValidTimTPMessage;
8001e4cc:	ec f8 00 f4 	ld.w	r8,r6[244]
8001e4d0:	ec f9 04 38 	ld.w	r9,r6[1080]
8001e4d4:	91 09       	st.w	r8[0x0],r9
						dbg_print_num(UBX_SIZE_TIM_TP,10);
						dbg_print("\n");
						step = 0;
						goto reset;
					}
					break;
8001e4d6:	cb 48       	rjmp	8001e63e <ubx_read+0xad0>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentTimTPMessage;
						ubx_lastMessage = (unsigned char**)&ubx_lastTimTPMessage;
						ubx_validMessage = &ubx_numberOfValidTimTPMessage;
					}else{
						dbg_print("Wrong TIM TP message 0x");
8001e4d8:	fe cc 0a 04 	sub	r12,pc,2564
8001e4dc:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(ubxclass,16);
8001e4e0:	ec f8 00 60 	ld.w	r8,r6[96]
8001e4e4:	11 88       	ld.ub	r8,r8[0x0]
8001e4e6:	31 0b       	mov	r11,16
8001e4e8:	10 9c       	mov	r12,r8
8001e4ea:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Msg id: 0x");
8001e4ee:	fe cc 0b be 	sub	r12,pc,3006
8001e4f2:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(msg_id,16);
8001e4f6:	ec f8 00 5c 	ld.w	r8,r6[92]
8001e4fa:	11 88       	ld.ub	r8,r8[0x0]
8001e4fc:	31 0b       	mov	r11,16
8001e4fe:	10 9c       	mov	r12,r8
8001e500:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Received size:");
8001e504:	fe cc 0b c8 	sub	r12,pc,3016
8001e508:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(payload_length,10);
8001e50c:	ec f8 00 58 	ld.w	r8,r6[88]
8001e510:	90 08       	ld.sh	r8,r8[0x0]
8001e512:	5c 78       	castu.h	r8
8001e514:	30 ab       	mov	r11,10
8001e516:	10 9c       	mov	r12,r8
8001e518:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" should be:");
8001e51c:	fe cc 0b d0 	sub	r12,pc,3024
8001e520:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(UBX_SIZE_TIM_TP,10);
8001e524:	30 ab       	mov	r11,10
8001e526:	31 0c       	mov	r12,16
8001e528:	f0 16 00 04 	mcall	r6[16]
						dbg_print("\n");
8001e52c:	fe cc 0c 18 	sub	r12,pc,3096
8001e530:	f0 16 00 01 	mcall	r6[4]
						step = 0;
8001e534:	ec f9 00 50 	ld.w	r9,r6[80]
8001e538:	30 08       	mov	r8,0
8001e53a:	b2 88       	st.b	r9[0x0],r8
						goto reset;
8001e53c:	fe 9f fb 30 	bral	8001db9c <ubx_read+0x2e>
					}
					break;
				case MSG_TIM_VRFY:
					if (payload_length == UBX_SIZE_TIM_VRFY)
8001e540:	ec f8 00 58 	ld.w	r8,r6[88]
8001e544:	90 09       	ld.sh	r9,r8[0x0]
8001e546:	31 48       	mov	r8,20
8001e548:	f0 09 19 00 	cp.h	r9,r8
8001e54c:	c1 11       	brne	8001e56e <ubx_read+0xa00>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentTimVRFYMessage;
8001e54e:	ec f9 08 6c 	ld.w	r9,r6[2156]
8001e552:	ec f8 00 d0 	ld.w	r8,r6[208]
8001e556:	91 09       	st.w	r8[0x0],r9
						ubx_lastMessage = (unsigned char**)&ubx_lastTimVRFYMessage;
8001e558:	ec f9 04 14 	ld.w	r9,r6[1044]
8001e55c:	ec f8 00 dc 	ld.w	r8,r6[220]
8001e560:	91 09       	st.w	r8[0x0],r9
						ubx_validMessage = &ubx_numberOfValidTimVRFYMessage;
8001e562:	ec f8 00 f4 	ld.w	r8,r6[244]
8001e566:	ec f9 04 40 	ld.w	r9,r6[1088]
8001e56a:	91 09       	st.w	r8[0x0],r9
						dbg_print_num(UBX_SIZE_TIM_VRFY,10);
						dbg_print("\n");
						step = 0;
						goto reset;
					}
					break;
8001e56c:	c6 98       	rjmp	8001e63e <ubx_read+0xad0>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentTimVRFYMessage;
						ubx_lastMessage = (unsigned char**)&ubx_lastTimVRFYMessage;
						ubx_validMessage = &ubx_numberOfValidTimVRFYMessage;
						}else{
						dbg_print("Wrong TIM VRFY message 0x");
8001e56e:	fe cc 0a 82 	sub	r12,pc,2690
8001e572:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(ubxclass,16);
8001e576:	ec f8 00 60 	ld.w	r8,r6[96]
8001e57a:	11 88       	ld.ub	r8,r8[0x0]
8001e57c:	31 0b       	mov	r11,16
8001e57e:	10 9c       	mov	r12,r8
8001e580:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Msg id: 0x");
8001e584:	fe cc 0c 54 	sub	r12,pc,3156
8001e588:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(msg_id,16);
8001e58c:	ec f8 00 5c 	ld.w	r8,r6[92]
8001e590:	11 88       	ld.ub	r8,r8[0x0]
8001e592:	31 0b       	mov	r11,16
8001e594:	10 9c       	mov	r12,r8
8001e596:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Received size:");
8001e59a:	fe cc 0c 5e 	sub	r12,pc,3166
8001e59e:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(payload_length,10);
8001e5a2:	ec f8 00 58 	ld.w	r8,r6[88]
8001e5a6:	90 08       	ld.sh	r8,r8[0x0]
8001e5a8:	5c 78       	castu.h	r8
8001e5aa:	30 ab       	mov	r11,10
8001e5ac:	10 9c       	mov	r12,r8
8001e5ae:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" should be:");
8001e5b2:	fe cc 0c 66 	sub	r12,pc,3174
8001e5b6:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(UBX_SIZE_TIM_VRFY,10);
8001e5ba:	30 ab       	mov	r11,10
8001e5bc:	31 4c       	mov	r12,20
8001e5be:	f0 16 00 04 	mcall	r6[16]
						dbg_print("\n");
8001e5c2:	fe cc 0c ae 	sub	r12,pc,3246
8001e5c6:	f0 16 00 01 	mcall	r6[4]
						step = 0;
8001e5ca:	ec f9 00 50 	ld.w	r9,r6[80]
8001e5ce:	30 08       	mov	r8,0
8001e5d0:	b2 88       	st.b	r9[0x0],r8
						goto reset;
8001e5d2:	fe 9f fa e5 	bral	8001db9c <ubx_read+0x2e>
					}
					break;
					
				default:
					step = 0;
8001e5d6:	ec f9 00 50 	ld.w	r9,r6[80]
8001e5da:	30 08       	mov	r8,0
8001e5dc:	b2 88       	st.b	r9[0x0],r8
					dbg_print("Unexpected TIM message, Class: 0x");
8001e5de:	fe cc 0b 3e 	sub	r12,pc,2878
8001e5e2:	f0 16 00 01 	mcall	r6[4]
					dbg_print_num(ubxclass,16);
8001e5e6:	ec f8 00 60 	ld.w	r8,r6[96]
8001e5ea:	11 88       	ld.ub	r8,r8[0x0]
8001e5ec:	31 0b       	mov	r11,16
8001e5ee:	10 9c       	mov	r12,r8
8001e5f0:	f0 16 00 04 	mcall	r6[16]
					dbg_print(", msg id: 0x");
8001e5f4:	fe cc 0c 0c 	sub	r12,pc,3084
8001e5f8:	f0 16 00 01 	mcall	r6[4]
					dbg_print_num(msg_id,16);
8001e5fc:	ec f8 00 5c 	ld.w	r8,r6[92]
8001e600:	11 88       	ld.ub	r8,r8[0x0]
8001e602:	31 0b       	mov	r11,16
8001e604:	10 9c       	mov	r12,r8
8001e606:	f0 16 00 04 	mcall	r6[16]
					dbg_print(" of size ");
8001e60a:	fe cc 0c 12 	sub	r12,pc,3090
8001e60e:	f0 16 00 01 	mcall	r6[4]
					dbg_print_num(payload_length,10);
8001e612:	ec f8 00 58 	ld.w	r8,r6[88]
8001e616:	90 08       	ld.sh	r8,r8[0x0]
8001e618:	5c 78       	castu.h	r8
8001e61a:	30 ab       	mov	r11,10
8001e61c:	10 9c       	mov	r12,r8
8001e61e:	f0 16 00 04 	mcall	r6[16]
					dbg_print(" should be :");
8001e622:	fe cc 0b 5e 	sub	r12,pc,2910
8001e626:	f0 16 00 01 	mcall	r6[4]
					dbg_print_num(MSG_TIM_TP,16);
8001e62a:	31 0b       	mov	r11,16
8001e62c:	30 1c       	mov	r12,1
8001e62e:	f0 16 00 04 	mcall	r6[16]
					dbg_print("\n");
8001e632:	fe cc 0d 1e 	sub	r12,pc,3358
8001e636:	f0 16 00 01 	mcall	r6[4]
					goto reset;
8001e63a:	fe 9f fa b1 	bral	8001db9c <ubx_read+0x2e>
				dbg_print(" of size ");
				dbg_print_num(payload_length,10);
				dbg_print("\n");
				goto reset;	
			}		
			break;
8001e63e:	c0 69       	rjmp	8001e84a <ubx_read+0xcdc>
					dbg_print_num(MSG_TIM_TP,16);
					dbg_print("\n");
					goto reset;
				}
			}else{
				step = 0;
8001e640:	ec f9 00 50 	ld.w	r9,r6[80]
8001e644:	30 08       	mov	r8,0
8001e646:	b2 88       	st.b	r9[0x0],r8
				dbg_print("Unexpected message, Class: 0x");
8001e648:	fe cc 0b 40 	sub	r12,pc,2880
8001e64c:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(ubxclass,16);
8001e650:	ec f8 00 60 	ld.w	r8,r6[96]
8001e654:	11 88       	ld.ub	r8,r8[0x0]
8001e656:	31 0b       	mov	r11,16
8001e658:	10 9c       	mov	r12,r8
8001e65a:	f0 16 00 04 	mcall	r6[16]
				dbg_print(", msg id: 0x");
8001e65e:	fe cc 0c 76 	sub	r12,pc,3190
8001e662:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(msg_id,16);
8001e666:	ec f8 00 5c 	ld.w	r8,r6[92]
8001e66a:	11 88       	ld.ub	r8,r8[0x0]
8001e66c:	31 0b       	mov	r11,16
8001e66e:	10 9c       	mov	r12,r8
8001e670:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" of size ");
8001e674:	fe cc 0c 7c 	sub	r12,pc,3196
8001e678:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(payload_length,10);
8001e67c:	ec f8 00 58 	ld.w	r8,r6[88]
8001e680:	90 08       	ld.sh	r8,r8[0x0]
8001e682:	5c 78       	castu.h	r8
8001e684:	30 ab       	mov	r11,10
8001e686:	10 9c       	mov	r12,r8
8001e688:	f0 16 00 04 	mcall	r6[16]
				dbg_print("\n");
8001e68c:	fe cc 0d 78 	sub	r12,pc,3448
8001e690:	f0 16 00 01 	mcall	r6[4]
				goto reset;	
8001e694:	fe 9f fa 84 	bral	8001db9c <ubx_read+0x2e>
			}		
			break;
		case 6:
			
			cksum_a += data;
8001e698:	ec f8 00 ac 	ld.w	r8,r6[172]
8001e69c:	11 88       	ld.ub	r8,r8[0x0]
8001e69e:	ef 39 ff fa 	ld.ub	r9,r7[-6]
8001e6a2:	f2 08 00 08 	add	r8,r9,r8
8001e6a6:	5c 58       	castu.b	r8
8001e6a8:	ec f9 00 ac 	ld.w	r9,r6[172]
8001e6ac:	b2 88       	st.b	r9[0x0],r8
			cksum_b += cksum_a; // checksum byte
8001e6ae:	ec f8 01 04 	ld.w	r8,r6[260]
8001e6b2:	11 89       	ld.ub	r9,r8[0x0]
8001e6b4:	ec f8 00 ac 	ld.w	r8,r6[172]
8001e6b8:	11 88       	ld.ub	r8,r8[0x0]
8001e6ba:	f2 08 00 08 	add	r8,r9,r8
8001e6be:	5c 58       	castu.b	r8
8001e6c0:	ec f9 01 04 	ld.w	r9,r6[260]
8001e6c4:	b2 88       	st.b	r9[0x0],r8
			
			#ifdef BIG_ENDIAN
				(*ubx_currentMessage)[payload_length - 1 - payload_counter] = data;
8001e6c6:	ec f8 00 d0 	ld.w	r8,r6[208]
8001e6ca:	70 08       	ld.w	r8,r8[0x0]
8001e6cc:	70 09       	ld.w	r9,r8[0x0]
8001e6ce:	ec f8 00 58 	ld.w	r8,r6[88]
8001e6d2:	90 08       	ld.sh	r8,r8[0x0]
8001e6d4:	5c 78       	castu.h	r8
8001e6d6:	f0 ca 00 01 	sub	r10,r8,1
8001e6da:	ec f8 01 ac 	ld.w	r8,r6[428]
8001e6de:	90 08       	ld.sh	r8,r8[0x0]
8001e6e0:	5c 78       	castu.h	r8
8001e6e2:	f4 08 01 08 	sub	r8,r10,r8
8001e6e6:	10 09       	add	r9,r8
8001e6e8:	ef 38 ff fa 	ld.ub	r8,r7[-6]
8001e6ec:	b2 88       	st.b	r9[0x0],r8
			#else
				(*ubx_currentMessage)[payload_counter] = data;
			#endif
			
			payload_counter++;
8001e6ee:	ec f8 01 ac 	ld.w	r8,r6[428]
8001e6f2:	90 08       	ld.sh	r8,r8[0x0]
8001e6f4:	2f f8       	sub	r8,-1
8001e6f6:	5c 88       	casts.h	r8
8001e6f8:	ec f9 01 ac 	ld.w	r9,r6[428]
8001e6fc:	b2 08       	st.h	r9[0x0],r8
			
			if (payload_counter == payload_length)
8001e6fe:	ec f8 01 ac 	ld.w	r8,r6[428]
8001e702:	90 09       	ld.sh	r9,r8[0x0]
8001e704:	ec f8 00 58 	ld.w	r8,r6[88]
8001e708:	90 08       	ld.sh	r8,r8[0x0]
8001e70a:	f0 09 19 00 	cp.h	r9,r8
8001e70e:	e0 81 00 9b 	brne	8001e844 <ubx_read+0xcd6>
			{
				step++;
8001e712:	ec f8 00 50 	ld.w	r8,r6[80]
8001e716:	11 88       	ld.ub	r8,r8[0x0]
8001e718:	2f f8       	sub	r8,-1
8001e71a:	5c 58       	castu.b	r8
8001e71c:	ec f9 00 50 	ld.w	r9,r6[80]
8001e720:	b2 88       	st.b	r9[0x0],r8
			}
			break;
8001e722:	c9 48       	rjmp	8001e84a <ubx_read+0xcdc>
		case 7:
			step++;
8001e724:	ec f8 00 50 	ld.w	r8,r6[80]
8001e728:	11 88       	ld.ub	r8,r8[0x0]
8001e72a:	2f f8       	sub	r8,-1
8001e72c:	5c 58       	castu.b	r8
8001e72e:	ec f9 00 50 	ld.w	r9,r6[80]
8001e732:	b2 88       	st.b	r9[0x0],r8
			if (cksum_a != data)
8001e734:	ec f8 00 ac 	ld.w	r8,r6[172]
8001e738:	11 88       	ld.ub	r8,r8[0x0]
8001e73a:	ef 39 ff fa 	ld.ub	r9,r7[-6]
8001e73e:	f0 09 18 00 	cp.b	r9,r8
8001e742:	e0 80 00 83 	breq	8001e848 <ubx_read+0xcda>
			{
				dbg_print("bad cksum_a ");
8001e746:	fe cc 0c 1e 	sub	r12,pc,3102
8001e74a:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(data,16);
8001e74e:	ef 38 ff fa 	ld.ub	r8,r7[-6]
8001e752:	31 0b       	mov	r11,16
8001e754:	10 9c       	mov	r12,r8
8001e756:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" should be ");
8001e75a:	fe cc 0c 22 	sub	r12,pc,3106
8001e75e:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(cksum_a,16);
8001e762:	ec f8 00 ac 	ld.w	r8,r6[172]
8001e766:	11 88       	ld.ub	r8,r8[0x0]
8001e768:	31 0b       	mov	r11,16
8001e76a:	10 9c       	mov	r12,r8
8001e76c:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" class : 0x");
8001e770:	fe cc 0c 2c 	sub	r12,pc,3116
8001e774:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(ubxclass,16);
8001e778:	ec f8 00 60 	ld.w	r8,r6[96]
8001e77c:	11 88       	ld.ub	r8,r8[0x0]
8001e77e:	31 0b       	mov	r11,16
8001e780:	10 9c       	mov	r12,r8
8001e782:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" msg_id : 0x");
8001e786:	fe cc 0c 36 	sub	r12,pc,3126
8001e78a:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(msg_id,16);
8001e78e:	ec f8 00 5c 	ld.w	r8,r6[92]
8001e792:	11 88       	ld.ub	r8,r8[0x0]
8001e794:	31 0b       	mov	r11,16
8001e796:	10 9c       	mov	r12,r8
8001e798:	f0 16 00 04 	mcall	r6[16]
				dbg_print("\n");
8001e79c:	fe cc 0e 88 	sub	r12,pc,3720
8001e7a0:	f0 16 00 01 	mcall	r6[4]
				step = 0;
8001e7a4:	ec f9 00 50 	ld.w	r9,r6[80]
8001e7a8:	30 08       	mov	r8,0
8001e7aa:	b2 88       	st.b	r9[0x0],r8
				goto reset;
8001e7ac:	fe 9f f9 f8 	bral	8001db9c <ubx_read+0x2e>
			}
			break;
		case 8:
			step=0;
8001e7b0:	ec f9 00 50 	ld.w	r9,r6[80]
8001e7b4:	30 08       	mov	r8,0
8001e7b6:	b2 88       	st.b	r9[0x0],r8
			if (cksum_b != data)
8001e7b8:	ec f8 01 04 	ld.w	r8,r6[260]
8001e7bc:	11 88       	ld.ub	r8,r8[0x0]
8001e7be:	ef 39 ff fa 	ld.ub	r9,r7[-6]
8001e7c2:	f0 09 18 00 	cp.b	r9,r8
8001e7c6:	c1 b0       	breq	8001e7fc <ubx_read+0xc8e>
			{
				dbg_print("bad cksum_b ");
8001e7c8:	fe cc 0c 68 	sub	r12,pc,3176
8001e7cc:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(data,16);
8001e7d0:	ef 38 ff fa 	ld.ub	r8,r7[-6]
8001e7d4:	31 0b       	mov	r11,16
8001e7d6:	10 9c       	mov	r12,r8
8001e7d8:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" should be ");
8001e7dc:	fe cc 0c a4 	sub	r12,pc,3236
8001e7e0:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(cksum_b,16);
8001e7e4:	ec f8 01 04 	ld.w	r8,r6[260]
8001e7e8:	11 88       	ld.ub	r8,r8[0x0]
8001e7ea:	31 0b       	mov	r11,16
8001e7ec:	10 9c       	mov	r12,r8
8001e7ee:	f0 16 00 04 	mcall	r6[16]
				dbg_print("\n");
8001e7f2:	fe cc 0e de 	sub	r12,pc,3806
8001e7f6:	f0 16 00 01 	mcall	r6[4]
				break;
8001e7fa:	c2 88       	rjmp	8001e84a <ubx_read+0xcdc>
			}
			++(*ubx_validMessage);
8001e7fc:	ec f8 00 f4 	ld.w	r8,r6[244]
8001e800:	70 08       	ld.w	r8,r8[0x0]
8001e802:	90 09       	ld.sh	r9,r8[0x0]
8001e804:	2f f9       	sub	r9,-1
8001e806:	5c 89       	casts.h	r9
8001e808:	b0 09       	st.h	r8[0x0],r9
			//dbg_print("Valid message");
			
			// swap message buffers, old message is discarded and becomes incoming buffer, new message become valid message (=old)
			temporaryMessageForSwaping = *ubx_currentMessage;
8001e80a:	ec f8 00 d0 	ld.w	r8,r6[208]
8001e80e:	70 08       	ld.w	r8,r8[0x0]
8001e810:	70 08       	ld.w	r8,r8[0x0]
8001e812:	ef 48 ff fc 	st.w	r7[-4],r8
			*ubx_currentMessage = *ubx_lastMessage;
8001e816:	ec f8 00 d0 	ld.w	r8,r6[208]
8001e81a:	70 08       	ld.w	r8,r8[0x0]
8001e81c:	ec f9 00 dc 	ld.w	r9,r6[220]
8001e820:	72 09       	ld.w	r9,r9[0x0]
8001e822:	72 09       	ld.w	r9,r9[0x0]
8001e824:	91 09       	st.w	r8[0x0],r9
			*ubx_lastMessage = temporaryMessageForSwaping;
8001e826:	ec f8 00 dc 	ld.w	r8,r6[220]
8001e82a:	70 08       	ld.w	r8,r8[0x0]
8001e82c:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001e830:	91 09       	st.w	r8[0x0],r9
			
			if (ubx_process_data())
8001e832:	f0 16 02 04 	mcall	r6[2064]
8001e836:	18 98       	mov	r8,r12
8001e838:	58 08       	cp.w	r8,0
8001e83a:	c0 80       	breq	8001e84a <ubx_read+0xcdc>
			{
				msg_ok = true;
8001e83c:	30 18       	mov	r8,1
8001e83e:	ef 68 ff fb 	st.b	r7[-5],r8
8001e842:	c0 48       	rjmp	8001e84a <ubx_read+0xcdc>
			
			if (payload_counter == payload_length)
			{
				step++;
			}
			break;
8001e844:	d7 03       	nop
8001e846:	c0 28       	rjmp	8001e84a <ubx_read+0xcdc>
				dbg_print_num(msg_id,16);
				dbg_print("\n");
				step = 0;
				goto reset;
			}
			break;
8001e848:	d7 03       	nop
	bool msg_ok = false;
	//bool new_message = false;
	
	unsigned char * temporaryMessageForSwaping;
	
	while(buffer_bytes_available(&(centralData->gps_buffer)))
8001e84a:	ec f8 00 00 	ld.w	r8,r6[0]
8001e84e:	70 08       	ld.w	r8,r8[0x0]
8001e850:	f0 c8 f6 2c 	sub	r8,r8,-2516
8001e854:	10 9c       	mov	r12,r8
8001e856:	f0 16 00 2c 	mcall	r6[176]
8001e85a:	18 98       	mov	r8,r12
8001e85c:	58 08       	cp.w	r8,0
8001e85e:	fe 91 f9 94 	brne	8001db86 <ubx_read+0x18>
				msg_ok = true;
			}
		}
		
	}
	return msg_ok;
8001e862:	ef 38 ff fb 	ld.ub	r8,r7[-5]
}
8001e866:	10 9c       	mov	r12,r8
8001e868:	2f ed       	sub	sp,-8
8001e86a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001e86e:	00 00       	add	r0,r0
8001e870:	80 01       	ld.sh	r1,r0[0x0]
8001e872:	d9 fe       	*unknown*
8001e874:	4d 53       	lddpc	r3,8001e9c8 <ubx_read+0xe5a>
8001e876:	47 5f       	lddsp	pc,sp[0x1d4]
8001e878:	4d 4f       	lddpc	pc,8001e9c8 <ubx_read+0xe5a>
8001e87a:	4e 20       	lddpc	r0,8001ea00 <ubx_read+0xe92>
8001e87c:	47 50       	lddsp	r0,sp[0x1d4]
8001e87e:	53 20       	stdsp	sp[0xc8],r0
8001e880:	61 77       	ld.w	r7,r0[0x5c]
8001e882:	61 6b       	ld.w	r11,r0[0x58]
8001e884:	65 0a       	ld.w	r10,r2[0x40]
8001e886:	00 00       	add	r0,r0
8001e888:	4d 53       	lddpc	r3,8001e9dc <ubx_read+0xe6e>
8001e88a:	47 5f       	lddsp	pc,sp[0x1d4]
8001e88c:	54 49       	stdsp	sp[0x110],r9
8001e88e:	4d 5f       	lddpc	pc,8001e9e0 <ubx_read+0xe72>
8001e890:	54 50       	stdsp	sp[0x114],r0
8001e892:	20 47       	sub	r7,4
8001e894:	50 53       	stdsp	sp[0x14],r3
8001e896:	20 61       	sub	r1,6
8001e898:	77 61       	ld.w	r1,r11[0x58]
8001e89a:	6b 65       	ld.w	r5,r5[0x58]
8001e89c:	0a 00       	add	r0,r5
8001e89e:	00 00       	add	r0,r0
8001e8a0:	4d 53       	lddpc	r3,8001e9f4 <ubx_read+0xe86>
8001e8a2:	47 5f       	lddsp	pc,sp[0x1d4]
8001e8a4:	54 49       	stdsp	sp[0x110],r9
8001e8a6:	4d 5f       	lddpc	pc,8001e9f8 <ubx_read+0xe8a>
8001e8a8:	56 52       	stdsp	sp[0x194],r2
8001e8aa:	46 59       	lddsp	r9,sp[0x194]
8001e8ac:	00 00       	add	r0,r0
8001e8ae:	00 00       	add	r0,r0
8001e8b0:	20 69       	sub	r9,6
8001e8b2:	74 6f       	ld.w	pc,r10[0x18]
8001e8b4:	77 20       	ld.w	r0,r11[0x48]
8001e8b6:	3a 00       	mov	r0,-96
8001e8b8:	20 66       	sub	r6,6
8001e8ba:	72 61       	ld.w	r1,r9[0x18]
8001e8bc:	63 20       	ld.w	r0,r1[0x48]
8001e8be:	3a 00       	mov	r0,-96
8001e8c0:	20 64       	sub	r4,6
8001e8c2:	65 6c       	ld.w	r12,r2[0x58]
8001e8c4:	74 61       	ld.w	r1,r10[0x18]
8001e8c6:	4d 73       	lddpc	r3,8001ea20 <ubx_read+0xeb2>
8001e8c8:	20 3a       	sub	r10,3
8001e8ca:	00 00       	add	r0,r0
8001e8cc:	20 64       	sub	r4,6
8001e8ce:	65 6c       	ld.w	r12,r2[0x58]
8001e8d0:	74 61       	ld.w	r1,r10[0x18]
8001e8d2:	4e 73       	lddpc	r3,8001ea6c <ubx_read+0xefe>
8001e8d4:	20 3a       	sub	r10,3
8001e8d6:	00 00       	add	r0,r0
8001e8d8:	47 6f       	lddsp	pc,sp[0x1d8]
8001e8da:	74 20       	ld.w	r0,r10[0x8]
8001e8dc:	65 6e       	ld.w	lr,r2[0x58]
8001e8de:	67 69       	ld.w	r9,r3[0x58]
8001e8e0:	6e 65       	ld.w	r5,r7[0x18]
8001e8e2:	20 73       	sub	r3,7
8001e8e4:	65 74       	ld.w	r4,r2[0x5c]
8001e8e6:	74 69       	ld.w	r9,r10[0x18]
8001e8e8:	6e 67       	ld.w	r7,r7[0x18]
8001e8ea:	73 20       	ld.w	r0,r9[0x48]
8001e8ec:	00 00       	add	r0,r0
8001e8ee:	00 00       	add	r0,r0
8001e8f0:	53 65       	stdsp	sp[0xd8],r5
8001e8f2:	6e 64       	ld.w	r4,r7[0x18]
8001e8f4:	20 4e       	sub	lr,4
8001e8f6:	61 76       	ld.w	r6,r0[0x5c]
8001e8f8:	20 73       	sub	r3,7
8001e8fa:	65 74       	ld.w	r4,r2[0x5c]
8001e8fc:	74 69       	ld.w	r9,r10[0x18]
8001e8fe:	6e 67       	ld.w	r7,r7[0x18]
8001e900:	73 00       	ld.w	r0,r9[0x40]
8001e902:	00 00       	add	r0,r0
8001e904:	4e 6f       	lddpc	pc,8001ea9c <ubx_read+0xf2e>
8001e906:	20 65       	sub	r5,6
8001e908:	6e 67       	ld.w	r7,r7[0x18]
8001e90a:	69 6e       	ld.w	lr,r4[0x58]
8001e90c:	65 20       	ld.w	r0,r2[0x48]
8001e90e:	73 65       	ld.w	r5,r9[0x58]
8001e910:	74 74       	ld.w	r4,r10[0x1c]
8001e912:	69 6e       	ld.w	lr,r4[0x58]
8001e914:	67 73       	ld.w	r3,r3[0x5c]
8001e916:	20 72       	sub	r2,7
8001e918:	65 63       	ld.w	r3,r2[0x58]
8001e91a:	65 69       	ld.w	r9,r2[0x58]
8001e91c:	76 65       	ld.w	r5,r11[0x18]
8001e91e:	64 20       	ld.w	r0,r2[0x8]
8001e920:	00 00       	add	r0,r0
8001e922:	00 00       	add	r0,r0
8001e924:	4d 65       	lddpc	r5,8001ea7c <ubx_read+0xf0e>
8001e926:	73 73       	ld.w	r3,r9[0x5c]
8001e928:	61 67       	ld.w	r7,r0[0x58]
8001e92a:	65 20       	ld.w	r0,r2[0x48]
8001e92c:	43 46       	lddsp	r6,sp[0xd0]
8001e92e:	47 20       	lddsp	r0,sp[0x1c8]
8001e930:	52 61       	stdsp	sp[0x98],r1
8001e932:	74 65       	ld.w	r5,r10[0x18]
8001e934:	20 30       	sub	r0,3
8001e936:	78 00       	ld.w	r0,r12[0x0]
8001e938:	55 6e       	stdsp	sp[0x158],lr
8001e93a:	65 78       	ld.w	r8,r2[0x5c]
8001e93c:	70 65       	ld.w	r5,r8[0x18]
8001e93e:	63 74       	ld.w	r4,r1[0x5c]
8001e940:	65 64       	ld.w	r4,r2[0x58]
8001e942:	20 6d       	sub	sp,24
8001e944:	65 73       	ld.w	r3,r2[0x5c]
8001e946:	73 61       	ld.w	r1,r9[0x58]
8001e948:	67 65       	ld.w	r5,r3[0x58]
8001e94a:	20 30       	sub	r0,3
8001e94c:	78 00       	ld.w	r0,r12[0x0]
8001e94e:	00 00       	add	r0,r0
8001e950:	30 32       	mov	r2,3
8001e952:	78 20       	ld.w	r0,r12[0x8]
8001e954:	30 78       	mov	r8,7
8001e956:	00 00       	add	r0,r0
8001e958:	30 32       	mov	r2,3
8001e95a:	78 0a       	ld.w	r10,r12[0x0]
8001e95c:	00 00       	add	r0,r0
8001e95e:	00 00       	add	r0,r0
8001e960:	44 69       	lddsp	r9,sp[0x118]
8001e962:	73 61       	ld.w	r1,r9[0x58]
8001e964:	62 6c       	ld.w	r12,r1[0x18]
8001e966:	69 6e       	ld.w	lr,r4[0x58]
8001e968:	67 20       	ld.w	r0,r3[0x48]
8001e96a:	6d 65       	ld.w	r5,r6[0x58]
8001e96c:	73 73       	ld.w	r3,r9[0x5c]
8001e96e:	61 67       	ld.w	r7,r0[0x58]
8001e970:	65 20       	ld.w	r0,r2[0x48]
8001e972:	30 78       	mov	r8,7
8001e974:	00 00       	add	r0,r0
8001e976:	00 00       	add	r0,r0
8001e978:	4d 53       	lddpc	r3,8001eacc <ubx_read+0xf5e>
8001e97a:	47 5f       	lddsp	pc,sp[0x1d4]
8001e97c:	4e 41       	lddpc	r1,8001eb0c <ubx_read+0xf9e>
8001e97e:	56 5f       	stdsp	sp[0x194],pc
8001e980:	50 4f       	stdsp	sp[0x10],pc
8001e982:	53 4c       	stdsp	sp[0xd0],r12
8001e984:	4c 48       	lddpc	r8,8001ea94 <ubx_read+0xf26>
8001e986:	00 00       	add	r0,r0
8001e988:	20 6c       	sub	r12,6
8001e98a:	6f 6e       	ld.w	lr,r7[0x58]
8001e98c:	67 69       	ld.w	r9,r3[0x58]
8001e98e:	74 75       	ld.w	r5,r10[0x1c]
8001e990:	64 65       	ld.w	r5,r2[0x18]
8001e992:	20 3a       	sub	r10,3
8001e994:	00 00       	add	r0,r0
8001e996:	00 00       	add	r0,r0
8001e998:	20 6c       	sub	r12,6
8001e99a:	61 74       	ld.w	r4,r0[0x5c]
8001e99c:	69 74       	ld.w	r4,r4[0x5c]
8001e99e:	75 64       	ld.w	r4,r10[0x58]
8001e9a0:	65 20       	ld.w	r0,r2[0x48]
8001e9a2:	3a 00       	mov	r0,-96
8001e9a4:	20 61       	sub	r1,6
8001e9a6:	6c 74       	ld.w	r4,r6[0x1c]
8001e9a8:	5f 65       	srmi	r5
8001e9aa:	6c 6c       	ld.w	r12,r6[0x18]
8001e9ac:	69 70       	ld.w	r0,r4[0x5c]
8001e9ae:	73 20       	ld.w	r0,r9[0x48]
8001e9b0:	3a 00       	mov	r0,-96
8001e9b2:	00 00       	add	r0,r0
8001e9b4:	20 61       	sub	r1,6
8001e9b6:	6c 74       	ld.w	r4,r6[0x1c]
8001e9b8:	5f 6d       	srmi	sp
8001e9ba:	73 6c       	ld.w	r12,r9[0x58]
8001e9bc:	20 3a       	sub	r10,3
8001e9be:	00 00       	add	r0,r0
8001e9c0:	20 68       	sub	r8,6
8001e9c2:	6f 72       	ld.w	r2,r7[0x5c]
8001e9c4:	7a 5f       	ld.w	pc,sp[0x14]
8001e9c6:	61 63       	ld.w	r3,r0[0x58]
8001e9c8:	63 20       	ld.w	r0,r1[0x48]
8001e9ca:	3a 00       	mov	r0,-96
8001e9cc:	20 76       	sub	r6,7
8001e9ce:	65 72       	ld.w	r2,r2[0x5c]
8001e9d0:	74 5f       	ld.w	pc,r10[0x14]
8001e9d2:	61 63       	ld.w	r3,r0[0x58]
8001e9d4:	63 20       	ld.w	r0,r1[0x48]
8001e9d6:	3a 00       	mov	r0,-96
8001e9d8:	4d 53       	lddpc	r3,8001eb2c <ubx_read+0xfbe>
8001e9da:	47 5f       	lddsp	pc,sp[0x1d4]
8001e9dc:	53 54       	stdsp	sp[0xd4],r4
8001e9de:	41 54       	lddsp	r4,sp[0x54]
8001e9e0:	55 53       	stdsp	sp[0x154],r3
8001e9e2:	20 66       	sub	r6,6
8001e9e4:	69 78       	ld.w	r8,r4[0x5c]
8001e9e6:	5f 74       	srpl	r4
8001e9e8:	79 70       	ld.w	r0,r12[0x5c]
8001e9ea:	65 20       	ld.w	r0,r2[0x48]
8001e9ec:	3d 20       	mov	r0,-46
8001e9ee:	30 78       	mov	r8,7
8001e9f0:	00 00       	add	r0,r0
8001e9f2:	00 00       	add	r0,r0
8001e9f4:	2c 20       	sub	r0,-62
8001e9f6:	75 70       	ld.w	r0,r10[0x5c]
8001e9f8:	74 69       	ld.w	r9,r10[0x18]
8001e9fa:	6d 65       	ld.w	r5,r6[0x58]
8001e9fc:	20 3d       	sub	sp,12
8001e9fe:	00 00       	add	r0,r0
8001ea00:	4d 53       	lddpc	r3,8001eb54 <ubx_process_data+0xe>
8001ea02:	47 5f       	lddsp	pc,sp[0x1d4]
8001ea04:	53 4f       	stdsp	sp[0xd0],pc
8001ea06:	4c 20       	lddpc	r0,8001eb0c <ubx_read+0xf9e>
8001ea08:	00 00       	add	r0,r0
8001ea0a:	00 00       	add	r0,r0
8001ea0c:	69 74       	ld.w	r4,r4[0x5c]
8001ea0e:	6f 77       	ld.w	r7,r7[0x5c]
8001ea10:	20 3a       	sub	r10,3
8001ea12:	00 00       	add	r0,r0
8001ea14:	20 77       	sub	r7,7
8001ea16:	65 65       	ld.w	r5,r2[0x58]
8001ea18:	6b 20       	ld.w	r0,r5[0x48]
8001ea1a:	3a 00       	mov	r0,-96
8001ea1c:	20 66       	sub	r6,6
8001ea1e:	69 78       	ld.w	r8,r4[0x5c]
8001ea20:	5f 74       	srpl	r4
8001ea22:	79 70       	ld.w	r0,r12[0x5c]
8001ea24:	65 20       	ld.w	r0,r2[0x48]
8001ea26:	3d 20       	mov	r0,-46
8001ea28:	30 78       	mov	r8,7
8001ea2a:	30 00       	mov	r0,0
8001ea2c:	20 70       	sub	r0,7
8001ea2e:	6f 73       	ld.w	r3,r7[0x5c]
8001ea30:	5f 61       	srmi	r1
8001ea32:	63 63       	ld.w	r3,r1[0x58]
8001ea34:	5f 33       	srlo	r3
8001ea36:	64 20       	ld.w	r0,r2[0x8]
8001ea38:	3a 00       	mov	r0,-96
8001ea3a:	00 00       	add	r0,r0
8001ea3c:	20 65       	sub	r5,6
8001ea3e:	63 65       	ld.w	r5,r1[0x58]
8001ea40:	66 78       	ld.w	r8,r3[0x1c]
8001ea42:	20 3a       	sub	r10,3
8001ea44:	00 00       	add	r0,r0
8001ea46:	00 00       	add	r0,r0
8001ea48:	20 65       	sub	r5,6
8001ea4a:	63 65       	ld.w	r5,r1[0x58]
8001ea4c:	66 79       	ld.w	r9,r3[0x1c]
8001ea4e:	20 3a       	sub	r10,3
8001ea50:	00 00       	add	r0,r0
8001ea52:	00 00       	add	r0,r0
8001ea54:	20 65       	sub	r5,6
8001ea56:	63 65       	ld.w	r5,r1[0x58]
8001ea58:	66 7a       	ld.w	r10,r3[0x1c]
8001ea5a:	20 3a       	sub	r10,3
8001ea5c:	00 00       	add	r0,r0
8001ea5e:	00 00       	add	r0,r0
8001ea60:	20 70       	sub	r0,7
8001ea62:	6f 73       	ld.w	r3,r7[0x5c]
8001ea64:	5f 44       	srge	r4
8001ea66:	4f 50       	lddpc	r0,8001ec38 <ubx_process_data+0xf2>
8001ea68:	20 3a       	sub	r10,3
8001ea6a:	00 00       	add	r0,r0
8001ea6c:	20 6e       	sub	lr,6
8001ea6e:	75 6d       	ld.w	sp,r10[0x58]
8001ea70:	20 73       	sub	r3,7
8001ea72:	61 74       	ld.w	r4,r0[0x5c]
8001ea74:	20 3a       	sub	r10,3
8001ea76:	00 00       	add	r0,r0
8001ea78:	4d 53       	lddpc	r3,8001ebcc <ubx_process_data+0x86>
8001ea7a:	47 5f       	lddsp	pc,sp[0x1d4]
8001ea7c:	4e 41       	lddpc	r1,8001ec0c <ubx_process_data+0xc6>
8001ea7e:	56 5f       	stdsp	sp[0x194],pc
8001ea80:	56 45       	stdsp	sp[0x190],r5
8001ea82:	4c 4e       	lddpc	lr,8001eb90 <ubx_process_data+0x4a>
8001ea84:	45 44       	lddsp	r4,sp[0x150]
8001ea86:	20 00       	sub	r0,0
8001ea88:	20 6e       	sub	lr,6
8001ea8a:	65 64       	ld.w	r4,r2[0x58]
8001ea8c:	5f 6e       	srmi	lr
8001ea8e:	6f 72       	ld.w	r2,r7[0x5c]
8001ea90:	74 68       	ld.w	r8,r10[0x18]
8001ea92:	20 3a       	sub	r10,3
8001ea94:	00 00       	add	r0,r0
8001ea96:	00 00       	add	r0,r0
8001ea98:	20 6e       	sub	lr,6
8001ea9a:	65 64       	ld.w	r4,r2[0x58]
8001ea9c:	5f 65       	srmi	r5
8001ea9e:	61 73       	ld.w	r3,r0[0x5c]
8001eaa0:	74 20       	ld.w	r0,r10[0x8]
8001eaa2:	3a 00       	mov	r0,-96
8001eaa4:	20 6e       	sub	lr,6
8001eaa6:	65 64       	ld.w	r4,r2[0x58]
8001eaa8:	5f 64       	srmi	r4
8001eaaa:	6f 77       	ld.w	r7,r7[0x5c]
8001eaac:	6e 20       	ld.w	r0,r7[0x8]
8001eaae:	3a 00       	mov	r0,-96
8001eab0:	20 73       	sub	r3,7
8001eab2:	70 65       	ld.w	r5,r8[0x18]
8001eab4:	65 64       	ld.w	r4,r2[0x58]
8001eab6:	5f 33       	srlo	r3
8001eab8:	64 20       	ld.w	r0,r2[0x8]
8001eaba:	3a 00       	mov	r0,-96
8001eabc:	20 68       	sub	r8,6
8001eabe:	65 61       	ld.w	r1,r2[0x58]
8001eac0:	64 69       	ld.w	r9,r2[0x18]
8001eac2:	6e 67       	ld.w	r7,r7[0x18]
8001eac4:	5f 32       	srlo	r2
8001eac6:	64 20       	ld.w	r0,r2[0x8]
8001eac8:	3a 00       	mov	r0,-96
8001eaca:	00 00       	add	r0,r0
8001eacc:	20 73       	sub	r3,7
8001eace:	70 65       	ld.w	r5,r8[0x18]
8001ead0:	65 64       	ld.w	r4,r2[0x58]
8001ead2:	5f 61       	srmi	r1
8001ead4:	63 63       	ld.w	r3,r1[0x58]
8001ead6:	75 72       	ld.w	r2,r10[0x5c]
8001ead8:	61 63       	ld.w	r3,r0[0x58]
8001eada:	79 20       	ld.w	r0,r12[0x48]
8001eadc:	3a 00       	mov	r0,-96
8001eade:	00 00       	add	r0,r0
8001eae0:	20 68       	sub	r8,6
8001eae2:	65 61       	ld.w	r1,r2[0x58]
8001eae4:	64 69       	ld.w	r9,r2[0x18]
8001eae6:	6e 67       	ld.w	r7,r7[0x18]
8001eae8:	5f 61       	srmi	r1
8001eaea:	63 63       	ld.w	r3,r1[0x58]
8001eaec:	75 72       	ld.w	r2,r10[0x5c]
8001eaee:	61 63       	ld.w	r3,r0[0x58]
8001eaf0:	79 20       	ld.w	r0,r12[0x48]
8001eaf2:	3a 00       	mov	r0,-96
8001eaf4:	4d 53       	lddpc	r3,8001ec48 <ubx_process_data+0x102>
8001eaf6:	47 5f       	lddsp	pc,sp[0x1d4]
8001eaf8:	4e 41       	lddpc	r1,8001ec88 <ubx_process_data+0x142>
8001eafa:	56 5f       	stdsp	sp[0x194],pc
8001eafc:	53 56       	stdsp	sp[0xd4],r6
8001eafe:	49 4e       	lddpc	lr,8001eb4c <ubx_process_data+0x6>
8001eb00:	46 4f       	lddsp	pc,sp[0x190]
8001eb02:	2c 20       	sub	r0,-62
8001eb04:	6e 75       	ld.w	r5,r7[0x1c]
8001eb06:	6d 43       	ld.w	r3,r6[0x50]
8001eb08:	68 61       	ld.w	r1,r4[0x18]
8001eb0a:	6e 6e       	ld.w	lr,r7[0x18]
8001eb0c:	65 6c       	ld.w	r12,r2[0x58]
8001eb0e:	3a 00       	mov	r0,-96
8001eb10:	55 6e       	stdsp	sp[0x158],lr
8001eb12:	65 78       	ld.w	r8,r2[0x5c]
8001eb14:	70 65       	ld.w	r5,r8[0x18]
8001eb16:	63 74       	ld.w	r4,r1[0x5c]
8001eb18:	65 64       	ld.w	r4,r2[0x58]
8001eb1a:	20 4e       	sub	lr,4
8001eb1c:	41 56       	lddsp	r6,sp[0x54]
8001eb1e:	20 6d       	sub	sp,24
8001eb20:	65 73       	ld.w	r3,r2[0x5c]
8001eb22:	73 61       	ld.w	r1,r9[0x58]
8001eb24:	67 65       	ld.w	r5,r3[0x58]
8001eb26:	20 30       	sub	r0,3
8001eb28:	78 00       	ld.w	r0,r12[0x0]
8001eb2a:	00 00       	add	r0,r0
8001eb2c:	44 69       	lddsp	r9,sp[0x118]
8001eb2e:	73 61       	ld.w	r1,r9[0x58]
8001eb30:	62 6c       	ld.w	r12,r1[0x18]
8001eb32:	69 6e       	ld.w	lr,r4[0x58]
8001eb34:	67 20       	ld.w	r0,r3[0x48]
8001eb36:	4e 41       	lddpc	r1,8001ecc4 <ubx_process_data+0x17e>
8001eb38:	56 20       	stdsp	sp[0x188],r0
8001eb3a:	6d 65       	ld.w	r5,r6[0x58]
8001eb3c:	73 73       	ld.w	r3,r9[0x5c]
8001eb3e:	61 67       	ld.w	r7,r0[0x58]
8001eb40:	65 20       	ld.w	r0,r2[0x48]
8001eb42:	30 78       	mov	r8,7
	...

8001eb46 <ubx_process_data>:
Process the new received message, class by class
return true if new position and velocity messages are received, false otherwise
************************************************************************************
*/
bool ubx_process_data(void)
{
8001eb46:	eb cd 40 e0 	pushm	r5-r7,lr
8001eb4a:	1a 97       	mov	r7,sp
8001eb4c:	20 ad       	sub	sp,40
8001eb4e:	fe f6 0a e6 	ld.w	r6,pc[2790]
8001eb52:	1e 26       	rsub	r6,pc
	ubx_nav_velned *gpsVelned;
	ubx_nav_SVInfo *gpsSVInfo;
	
	//dbg_print("ubx_process_data\n");
	
	if (ubxclass == UBX_CLASS_ACK)
8001eb54:	ec f8 00 60 	ld.w	r8,r6[96]
8001eb58:	11 89       	ld.ub	r9,r8[0x0]
8001eb5a:	30 58       	mov	r8,5
8001eb5c:	f0 09 18 00 	cp.b	r9,r8
8001eb60:	c0 f1       	brne	8001eb7e <ubx_process_data+0x38>
	{
		dbg_print_num(msg_id,10);
8001eb62:	ec f8 00 5c 	ld.w	r8,r6[92]
8001eb66:	11 88       	ld.ub	r8,r8[0x0]
8001eb68:	30 ab       	mov	r11,10
8001eb6a:	10 9c       	mov	r12,r8
8001eb6c:	f0 16 00 04 	mcall	r6[16]
		dbg_print("\n");
8001eb70:	fe cc 12 5c 	sub	r12,pc,4700
8001eb74:	f0 16 00 01 	mcall	r6[4]
		return false;
8001eb78:	30 08       	mov	r8,0
8001eb7a:	e0 8f 05 58 	bral	8001f62a <ubx_process_data+0xae4>
	}
 	if (ubxclass == UBX_CLASS_MON)
8001eb7e:	ec f8 00 60 	ld.w	r8,r6[96]
8001eb82:	11 89       	ld.ub	r9,r8[0x0]
8001eb84:	30 a8       	mov	r8,10
8001eb86:	f0 09 18 00 	cp.b	r9,r8
8001eb8a:	c1 11       	brne	8001ebac <ubx_process_data+0x66>
 	{
 		ubx_mon_rxr_struct *gpsRXR = ubx_GetMonRXR();
8001eb8c:	f0 16 02 0a 	mcall	r6[2088]
8001eb90:	18 98       	mov	r8,r12
8001eb92:	ef 48 ff ec 	st.w	r7[-20],r8
 		if (gpsRXR)
8001eb96:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001eb9a:	58 08       	cp.w	r8,0
8001eb9c:	c0 50       	breq	8001eba6 <ubx_process_data+0x60>
 		{
 			dbg_print("MSG_MON GPS awake\n");
8001eb9e:	fe cc 03 2a 	sub	r12,pc,810
8001eba2:	f0 16 00 01 	mcall	r6[4]
 		}
		 return false;
8001eba6:	30 08       	mov	r8,0
8001eba8:	e0 8f 05 41 	bral	8001f62a <ubx_process_data+0xae4>
 	}
	if (ubxclass == UBX_CLASS_TIM)
8001ebac:	ec f8 00 60 	ld.w	r8,r6[96]
8001ebb0:	11 89       	ld.ub	r9,r8[0x0]
8001ebb2:	30 d8       	mov	r8,13
8001ebb4:	f0 09 18 00 	cp.b	r9,r8
8001ebb8:	e0 81 00 89 	brne	8001ecca <ubx_process_data+0x184>
	{
		ubx_tim_tp *gpsTimTP = ubx_GetTimTP();
8001ebbc:	f0 16 01 41 	mcall	r6[1284]
8001ebc0:	18 98       	mov	r8,r12
8001ebc2:	ef 48 ff f0 	st.w	r7[-16],r8
		if (gpsTimTP)
8001ebc6:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001ebca:	58 08       	cp.w	r8,0
8001ebcc:	c2 40       	breq	8001ec14 <ubx_process_data+0xce>
		{
			loopTimTp = ++loopTimTp % numSkippedMsg;
8001ebce:	ec f8 01 e0 	ld.w	r8,r6[480]
8001ebd2:	11 88       	ld.ub	r8,r8[0x0]
8001ebd4:	2f f8       	sub	r8,-1
8001ebd6:	5c 58       	castu.b	r8
8001ebd8:	ec f9 01 e0 	ld.w	r9,r6[480]
8001ebdc:	b2 88       	st.b	r9[0x0],r8
8001ebde:	ec f8 01 e0 	ld.w	r8,r6[480]
8001ebe2:	11 88       	ld.ub	r8,r8[0x0]
8001ebe4:	ec f9 01 78 	ld.w	r9,r6[376]
8001ebe8:	13 89       	ld.ub	r9,r9[0x0]
8001ebea:	f0 09 0d 08 	divu	r8,r8,r9
8001ebee:	12 98       	mov	r8,r9
8001ebf0:	5c 58       	castu.b	r8
8001ebf2:	ec f9 01 e0 	ld.w	r9,r6[480]
8001ebf6:	b2 88       	st.b	r9[0x0],r8
			if((printNavOnDebug)&&(loopTimTp == 0))
8001ebf8:	ec f8 01 68 	ld.w	r8,r6[360]
8001ebfc:	11 88       	ld.ub	r8,r8[0x0]
8001ebfe:	58 08       	cp.w	r8,0
8001ec00:	c0 a0       	breq	8001ec14 <ubx_process_data+0xce>
8001ec02:	ec f8 01 e0 	ld.w	r8,r6[480]
8001ec06:	11 88       	ld.ub	r8,r8[0x0]
8001ec08:	58 08       	cp.w	r8,0
8001ec0a:	c0 51       	brne	8001ec14 <ubx_process_data+0xce>
			{
				dbg_print("MSG_TIM_TP GPS awake\n");
8001ec0c:	fe cc 03 84 	sub	r12,pc,900
8001ec10:	f0 16 00 01 	mcall	r6[4]
			}
		}
		ubx_tim_vrfy *gpsTimVrfy = ubx_GetTimVRFY();
8001ec14:	f0 16 02 0c 	mcall	r6[2096]
8001ec18:	18 98       	mov	r8,r12
8001ec1a:	ef 48 ff f4 	st.w	r7[-12],r8
		if (gpsTimVrfy)
8001ec1e:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001ec22:	58 08       	cp.w	r8,0
8001ec24:	c5 00       	breq	8001ecc4 <ubx_process_data+0x17e>
		{
			loopTimVrfy = ++loopTimVrfy % numSkippedMsg;
8001ec26:	ec f8 01 9c 	ld.w	r8,r6[412]
8001ec2a:	11 88       	ld.ub	r8,r8[0x0]
8001ec2c:	2f f8       	sub	r8,-1
8001ec2e:	5c 58       	castu.b	r8
8001ec30:	ec f9 01 9c 	ld.w	r9,r6[412]
8001ec34:	b2 88       	st.b	r9[0x0],r8
8001ec36:	ec f8 01 9c 	ld.w	r8,r6[412]
8001ec3a:	11 88       	ld.ub	r8,r8[0x0]
8001ec3c:	ec f9 01 78 	ld.w	r9,r6[376]
8001ec40:	13 89       	ld.ub	r9,r9[0x0]
8001ec42:	f0 09 0d 08 	divu	r8,r8,r9
8001ec46:	12 98       	mov	r8,r9
8001ec48:	5c 58       	castu.b	r8
8001ec4a:	ec f9 01 9c 	ld.w	r9,r6[412]
8001ec4e:	b2 88       	st.b	r9[0x0],r8
			if((printNavOnDebug)&&(loopTimVrfy == 0))
8001ec50:	ec f8 01 68 	ld.w	r8,r6[360]
8001ec54:	11 88       	ld.ub	r8,r8[0x0]
8001ec56:	58 08       	cp.w	r8,0
8001ec58:	c3 60       	breq	8001ecc4 <ubx_process_data+0x17e>
8001ec5a:	ec f8 01 9c 	ld.w	r8,r6[412]
8001ec5e:	11 88       	ld.ub	r8,r8[0x0]
8001ec60:	58 08       	cp.w	r8,0
8001ec62:	c3 11       	brne	8001ecc4 <ubx_process_data+0x17e>
			{
				dbg_print("MSG_TIM_VRFY");
8001ec64:	fe cc 03 c4 	sub	r12,pc,964
8001ec68:	f0 16 00 01 	mcall	r6[4]
				dbg_print(" itow :");
8001ec6c:	fe cc 03 bc 	sub	r12,pc,956
8001ec70:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsTimVrfy->itow,10);
8001ec74:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001ec78:	70 48       	ld.w	r8,r8[0x10]
8001ec7a:	30 ab       	mov	r11,10
8001ec7c:	10 9c       	mov	r12,r8
8001ec7e:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" frac :");
8001ec82:	fe cc 03 ca 	sub	r12,pc,970
8001ec86:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsTimVrfy->frac,10);
8001ec8a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001ec8e:	70 38       	ld.w	r8,r8[0xc]
8001ec90:	30 ab       	mov	r11,10
8001ec92:	10 9c       	mov	r12,r8
8001ec94:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" deltaMs :");
8001ec98:	fe cc 03 d8 	sub	r12,pc,984
8001ec9c:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsTimVrfy->deltaMs,10);
8001eca0:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001eca4:	70 28       	ld.w	r8,r8[0x8]
8001eca6:	30 ab       	mov	r11,10
8001eca8:	10 9c       	mov	r12,r8
8001ecaa:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" deltaNs :");
8001ecae:	fe cc 03 e2 	sub	r12,pc,994
8001ecb2:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsTimVrfy->deltaNs,10);
8001ecb6:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001ecba:	70 18       	ld.w	r8,r8[0x4]
8001ecbc:	30 ab       	mov	r11,10
8001ecbe:	10 9c       	mov	r12,r8
8001ecc0:	f0 16 00 04 	mcall	r6[16]
			}
			
		}
		return false;
8001ecc4:	30 08       	mov	r8,0
8001ecc6:	e0 8f 04 b2 	bral	8001f62a <ubx_process_data+0xae4>
	}
	 
	if (ubxclass == UBX_CLASS_CFG && msg_id == MSG_CFG_NAV_SETTINGS)
8001ecca:	ec f8 00 60 	ld.w	r8,r6[96]
8001ecce:	11 89       	ld.ub	r9,r8[0x0]
8001ecd0:	30 68       	mov	r8,6
8001ecd2:	f0 09 18 00 	cp.b	r9,r8
8001ecd6:	c5 b1       	brne	8001ed8c <ubx_process_data+0x246>
8001ecd8:	ec f8 00 5c 	ld.w	r8,r6[92]
8001ecdc:	11 89       	ld.ub	r9,r8[0x0]
8001ecde:	32 48       	mov	r8,36
8001ece0:	f0 09 18 00 	cp.b	r9,r8
8001ece4:	c5 41       	brne	8001ed8c <ubx_process_data+0x246>
	{
		ubx_cfg_nav_settings *gpsNavSettings = ubx_GetNavSettings();
8001ece6:	f0 16 01 e4 	mcall	r6[1936]
8001ecea:	18 98       	mov	r8,r12
8001ecec:	ef 48 ff f8 	st.w	r7[-8],r8
		- 5 Sea
		- 6 Airborne with <1g Acceleration
		- 7 Airborne with <2g Acceleration
		- 8 Airborne with <4g Acceleration
		*/
		if(gpsNavSettings)
8001ecf0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001ecf4:	58 08       	cp.w	r8,0
8001ecf6:	c1 20       	breq	8001ed1a <ubx_process_data+0x1d4>
		{
			
			dbg_print("Got engine settings ");
8001ecf8:	fe cc 04 20 	sub	r12,pc,1056
8001ecfc:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(gpsNavSettings->dynModel,16);
8001ed00:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001ed04:	f1 38 00 21 	ld.ub	r8,r8[33]
8001ed08:	31 0b       	mov	r11,16
8001ed0a:	10 9c       	mov	r12,r8
8001ed0c:	f0 16 00 04 	mcall	r6[16]
			dbg_print("\n");
8001ed10:	fe cc 13 fc 	sub	r12,pc,5116
8001ed14:	f0 16 00 01 	mcall	r6[4]
8001ed18:	c3 78       	rjmp	8001ed86 <ubx_process_data+0x240>
		
		}else{
			if (engine_nav_setting != GPS_ENGINE_NONE && !gpsNavSettings)
8001ed1a:	ec f8 01 bc 	ld.w	r8,r6[444]
8001ed1e:	70 08       	ld.w	r8,r8[0x0]
8001ed20:	5b f8       	cp.w	r8,-1
8001ed22:	c2 30       	breq	8001ed68 <ubx_process_data+0x222>
8001ed24:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001ed28:	58 08       	cp.w	r8,0
8001ed2a:	c1 f1       	brne	8001ed68 <ubx_process_data+0x222>
			{
				if(gpsNavSettings->dynModel != engine_nav_setting)
8001ed2c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001ed30:	f1 38 00 21 	ld.ub	r8,r8[33]
8001ed34:	10 99       	mov	r9,r8
8001ed36:	ec f8 01 bc 	ld.w	r8,r6[444]
8001ed3a:	70 08       	ld.w	r8,r8[0x0]
8001ed3c:	10 39       	cp.w	r9,r8
8001ed3e:	c1 50       	breq	8001ed68 <ubx_process_data+0x222>
				{
					nav_settings.dynModel = engine_nav_setting;
8001ed40:	ec f8 01 bc 	ld.w	r8,r6[444]
8001ed44:	70 08       	ld.w	r8,r8[0x0]
8001ed46:	5c 58       	castu.b	r8
8001ed48:	ec f9 03 78 	ld.w	r9,r6[888]
8001ed4c:	f3 68 00 21 	st.b	r9[33],r8
					dbg_print("Send Nav settings");
8001ed50:	fe cc 04 60 	sub	r12,pc,1120
8001ed54:	f0 16 00 01 	mcall	r6[4]
					ubx_send_message_nav_settings(UBX_CLASS_CFG,MSG_CFG_NAV_SETTINGS, &nav_settings,sizeof(nav_settings));
8001ed58:	ec f8 03 78 	ld.w	r8,r6[888]
8001ed5c:	32 49       	mov	r9,36
8001ed5e:	10 9a       	mov	r10,r8
8001ed60:	32 4b       	mov	r11,36
8001ed62:	30 6c       	mov	r12,6
8001ed64:	f0 16 00 f2 	mcall	r6[968]
				}				
			}
			dbg_print("No engine settings received ");
8001ed68:	fe cc 04 64 	sub	r12,pc,1124
8001ed6c:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(msg_id,16);
8001ed70:	ec f8 00 5c 	ld.w	r8,r6[92]
8001ed74:	11 88       	ld.ub	r8,r8[0x0]
8001ed76:	31 0b       	mov	r11,16
8001ed78:	10 9c       	mov	r12,r8
8001ed7a:	f0 16 00 04 	mcall	r6[16]
			dbg_print("\n");
8001ed7e:	fe cc 14 6a 	sub	r12,pc,5226
8001ed82:	f0 16 00 01 	mcall	r6[4]
		}
		return false;
8001ed86:	30 08       	mov	r8,0
8001ed88:	e0 8f 04 51 	bral	8001f62a <ubx_process_data+0xae4>
	}
	
	if (ubxclass == UBX_CLASS_CFG && msg_id == MSG_CFG_SET_RATE)
8001ed8c:	ec f8 00 60 	ld.w	r8,r6[96]
8001ed90:	11 89       	ld.ub	r9,r8[0x0]
8001ed92:	30 68       	mov	r8,6
8001ed94:	f0 09 18 00 	cp.b	r9,r8
8001ed98:	c3 11       	brne	8001edfa <ubx_process_data+0x2b4>
8001ed9a:	ec f8 00 5c 	ld.w	r8,r6[92]
8001ed9e:	11 89       	ld.ub	r9,r8[0x0]
8001eda0:	30 18       	mov	r8,1
8001eda2:	f0 09 18 00 	cp.b	r9,r8
8001eda6:	c2 a1       	brne	8001edfa <ubx_process_data+0x2b4>
	{
		ubx_cfg_msg_rate *gpsMsgRate;
		gpsMsgRate = ubx_GetMsgRate();
8001eda8:	f0 16 01 89 	mcall	r6[1572]
8001edac:	18 98       	mov	r8,r12
8001edae:	ef 48 ff fc 	st.w	r7[-4],r8
		
		if (gpsMsgRate)
8001edb2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001edb6:	58 08       	cp.w	r8,0
8001edb8:	c1 e0       	breq	8001edf4 <ubx_process_data+0x2ae>
		{
			dbg_print("Message CFG Rate 0x");
8001edba:	fe cc 04 96 	sub	r12,pc,1174
8001edbe:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(gpsMsgRate->msg_class,16);
8001edc2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001edc6:	11 a8       	ld.ub	r8,r8[0x2]
8001edc8:	31 0b       	mov	r11,16
8001edca:	10 9c       	mov	r12,r8
8001edcc:	f0 16 00 04 	mcall	r6[16]
			dbg_print_num(gpsMsgRate->msg_id_rate,16);
8001edd0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001edd4:	11 98       	ld.ub	r8,r8[0x1]
8001edd6:	31 0b       	mov	r11,16
8001edd8:	10 9c       	mov	r12,r8
8001edda:	f0 16 00 04 	mcall	r6[16]
			dbg_print_num(gpsMsgRate->rate,10);
8001edde:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001ede2:	11 88       	ld.ub	r8,r8[0x0]
8001ede4:	30 ab       	mov	r11,10
8001ede6:	10 9c       	mov	r12,r8
8001ede8:	f0 16 00 04 	mcall	r6[16]
			dbg_print("\n");
8001edec:	fe cc 14 d8 	sub	r12,pc,5336
8001edf0:	f0 16 00 01 	mcall	r6[4]
		}		
		return false;
8001edf4:	30 08       	mov	r8,0
8001edf6:	e0 8f 04 1a 	bral	8001f62a <ubx_process_data+0xae4>
	}
	
	if (ubxclass != UBX_CLASS_NAV)
8001edfa:	ec f8 00 60 	ld.w	r8,r6[96]
8001edfe:	11 89       	ld.ub	r9,r8[0x0]
8001ee00:	30 18       	mov	r8,1
8001ee02:	f0 09 18 00 	cp.b	r9,r8
8001ee06:	c5 10       	breq	8001eea8 <ubx_process_data+0x362>
	{
		dbg_print("Unexpected message 0x");
8001ee08:	fe cc 04 d0 	sub	r12,pc,1232
8001ee0c:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(ubxclass,16);
8001ee10:	ec f8 00 60 	ld.w	r8,r6[96]
8001ee14:	11 88       	ld.ub	r8,r8[0x0]
8001ee16:	31 0b       	mov	r11,16
8001ee18:	10 9c       	mov	r12,r8
8001ee1a:	f0 16 00 04 	mcall	r6[16]
		dbg_print("02x 0x");
8001ee1e:	fe cc 04 ce 	sub	r12,pc,1230
8001ee22:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(msg_id,10);
8001ee26:	ec f8 00 5c 	ld.w	r8,r6[92]
8001ee2a:	11 88       	ld.ub	r8,r8[0x0]
8001ee2c:	30 ab       	mov	r11,10
8001ee2e:	10 9c       	mov	r12,r8
8001ee30:	f0 16 00 04 	mcall	r6[16]
		dbg_print("02x\n");
8001ee34:	fe cc 04 dc 	sub	r12,pc,1244
8001ee38:	f0 16 00 01 	mcall	r6[4]
		if (++disable_counter == 0)
8001ee3c:	ec f8 01 7c 	ld.w	r8,r6[380]
8001ee40:	11 88       	ld.ub	r8,r8[0x0]
8001ee42:	2f f8       	sub	r8,-1
8001ee44:	5c 58       	castu.b	r8
8001ee46:	ec f9 01 7c 	ld.w	r9,r6[380]
8001ee4a:	b2 88       	st.b	r9[0x0],r8
8001ee4c:	ec f8 01 7c 	ld.w	r8,r6[380]
8001ee50:	11 88       	ld.ub	r8,r8[0x0]
8001ee52:	58 08       	cp.w	r8,0
8001ee54:	c2 71       	brne	8001eea2 <ubx_process_data+0x35c>
			// disable future sends of this message id, but
			// only do this every 256 messages, as some
			// message types can't be disabled and we don't
			// want to get into an ack war
			
			dbg_print("Disabling message 0x");
8001ee56:	fe cc 04 f6 	sub	r12,pc,1270
8001ee5a:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(ubxclass,16);
8001ee5e:	ec f8 00 60 	ld.w	r8,r6[96]
8001ee62:	11 88       	ld.ub	r8,r8[0x0]
8001ee64:	31 0b       	mov	r11,16
8001ee66:	10 9c       	mov	r12,r8
8001ee68:	f0 16 00 04 	mcall	r6[16]
			dbg_print("02x 0x");
8001ee6c:	fe cc 05 1c 	sub	r12,pc,1308
8001ee70:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(msg_id,16);
8001ee74:	ec f8 00 5c 	ld.w	r8,r6[92]
8001ee78:	11 88       	ld.ub	r8,r8[0x0]
8001ee7a:	31 0b       	mov	r11,16
8001ee7c:	10 9c       	mov	r12,r8
8001ee7e:	f0 16 00 04 	mcall	r6[16]
			dbg_print("02x\n");
8001ee82:	fe cc 05 2a 	sub	r12,pc,1322
8001ee86:	f0 16 00 01 	mcall	r6[4]
			ubx_configure_message_rate(ubxclass, msg_id, 0);
8001ee8a:	ec f8 00 5c 	ld.w	r8,r6[92]
8001ee8e:	11 88       	ld.ub	r8,r8[0x0]
8001ee90:	10 99       	mov	r9,r8
8001ee92:	ec f8 00 60 	ld.w	r8,r6[96]
8001ee96:	11 88       	ld.ub	r8,r8[0x0]
8001ee98:	30 0a       	mov	r10,0
8001ee9a:	12 9b       	mov	r11,r9
8001ee9c:	10 9c       	mov	r12,r8
8001ee9e:	f0 16 00 56 	mcall	r6[344]
		}
		return false;
8001eea2:	30 08       	mov	r8,0
8001eea4:	e0 8f 03 c3 	bral	8001f62a <ubx_process_data+0xae4>
	}
	
	// Class NAV:
	switch (msg_id)
8001eea8:	ec f8 00 5c 	ld.w	r8,r6[92]
8001eeac:	11 88       	ld.ub	r8,r8[0x0]
8001eeae:	58 68       	cp.w	r8,6
8001eeb0:	e0 80 01 6f 	breq	8001f18e <ubx_process_data+0x648>
8001eeb4:	e0 89 00 09 	brgt	8001eec6 <ubx_process_data+0x380>
8001eeb8:	58 28       	cp.w	r8,2
8001eeba:	c0 f0       	breq	8001eed8 <ubx_process_data+0x392>
8001eebc:	58 38       	cp.w	r8,3
8001eebe:	e0 80 01 01 	breq	8001f0c0 <ubx_process_data+0x57a>
8001eec2:	e0 8f 03 63 	bral	8001f588 <ubx_process_data+0xa42>
8001eec6:	59 28       	cp.w	r8,18
8001eec8:	e0 80 02 2c 	breq	8001f320 <ubx_process_data+0x7da>
8001eecc:	e0 48 00 30 	cp.w	r8,48
8001eed0:	e0 80 03 3e 	breq	8001f54c <ubx_process_data+0xa06>
8001eed4:	e0 8f 03 5a 	bral	8001f588 <ubx_process_data+0xa42>
	{
	case MSG_NAV_POSLLH:
		gpsPosllh = ubx_GetPosllh();
8001eed8:	f0 16 01 6a 	mcall	r6[1448]
8001eedc:	18 98       	mov	r8,r12
8001eede:	ef 48 ff d8 	st.w	r7[-40],r8
		if (gpsPosllh)
8001eee2:	ee f8 ff d8 	ld.w	r8,r7[-40]
8001eee6:	58 08       	cp.w	r8,0
8001eee8:	e0 80 03 85 	breq	8001f5f2 <ubx_process_data+0xaac>
		{
			loopPosllh = ++loopPosllh % numSkippedMsg;
8001eeec:	ec f8 01 d4 	ld.w	r8,r6[468]
8001eef0:	11 88       	ld.ub	r8,r8[0x0]
8001eef2:	2f f8       	sub	r8,-1
8001eef4:	5c 58       	castu.b	r8
8001eef6:	ec f9 01 d4 	ld.w	r9,r6[468]
8001eefa:	b2 88       	st.b	r9[0x0],r8
8001eefc:	ec f8 01 d4 	ld.w	r8,r6[468]
8001ef00:	11 88       	ld.ub	r8,r8[0x0]
8001ef02:	ec f9 01 78 	ld.w	r9,r6[376]
8001ef06:	13 89       	ld.ub	r9,r9[0x0]
8001ef08:	f0 09 0d 08 	divu	r8,r8,r9
8001ef0c:	12 98       	mov	r8,r9
8001ef0e:	5c 58       	castu.b	r8
8001ef10:	ec f9 01 d4 	ld.w	r9,r6[468]
8001ef14:	b2 88       	st.b	r9[0x0],r8
			if (printNavOnDebug && (loopPosllh == 0))
8001ef16:	ec f8 01 68 	ld.w	r8,r6[360]
8001ef1a:	11 88       	ld.ub	r8,r8[0x0]
8001ef1c:	58 08       	cp.w	r8,0
8001ef1e:	c5 b0       	breq	8001efd4 <ubx_process_data+0x48e>
8001ef20:	ec f8 01 d4 	ld.w	r8,r6[468]
8001ef24:	11 88       	ld.ub	r8,r8[0x0]
8001ef26:	58 08       	cp.w	r8,0
8001ef28:	c5 61       	brne	8001efd4 <ubx_process_data+0x48e>
			{
				dbg_print("MSG_NAV_POSLLH");
8001ef2a:	fe cc 05 b2 	sub	r12,pc,1458
8001ef2e:	f0 16 00 01 	mcall	r6[4]
				dbg_print(" itow :");
8001ef32:	fe cc 06 82 	sub	r12,pc,1666
8001ef36:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsPosllh->itow,10);
8001ef3a:	ee f8 ff d8 	ld.w	r8,r7[-40]
8001ef3e:	70 68       	ld.w	r8,r8[0x18]
8001ef40:	30 ab       	mov	r11,10
8001ef42:	10 9c       	mov	r12,r8
8001ef44:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" longitude :");
8001ef48:	fe cc 05 c0 	sub	r12,pc,1472
8001ef4c:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsPosllh->longitude,10);
8001ef50:	ee f8 ff d8 	ld.w	r8,r7[-40]
8001ef54:	70 58       	ld.w	r8,r8[0x14]
8001ef56:	30 ab       	mov	r11,10
8001ef58:	10 9c       	mov	r12,r8
8001ef5a:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" latitude :");
8001ef5e:	fe cc 05 c6 	sub	r12,pc,1478
8001ef62:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsPosllh->latitude,10);
8001ef66:	ee f8 ff d8 	ld.w	r8,r7[-40]
8001ef6a:	70 48       	ld.w	r8,r8[0x10]
8001ef6c:	30 ab       	mov	r11,10
8001ef6e:	10 9c       	mov	r12,r8
8001ef70:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" alt_ellips :");
8001ef74:	fe cc 05 d0 	sub	r12,pc,1488
8001ef78:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsPosllh->altitude_ellipsoid,10);
8001ef7c:	ee f8 ff d8 	ld.w	r8,r7[-40]
8001ef80:	70 38       	ld.w	r8,r8[0xc]
8001ef82:	30 ab       	mov	r11,10
8001ef84:	10 9c       	mov	r12,r8
8001ef86:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" alt_msl :");
8001ef8a:	fe cc 05 d6 	sub	r12,pc,1494
8001ef8e:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsPosllh->altitude_msl,10);
8001ef92:	ee f8 ff d8 	ld.w	r8,r7[-40]
8001ef96:	70 28       	ld.w	r8,r8[0x8]
8001ef98:	30 ab       	mov	r11,10
8001ef9a:	10 9c       	mov	r12,r8
8001ef9c:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" horz_acc :");
8001efa0:	fe cc 05 e0 	sub	r12,pc,1504
8001efa4:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsPosllh->horizontal_accuracy,10);
8001efa8:	ee f8 ff d8 	ld.w	r8,r7[-40]
8001efac:	70 18       	ld.w	r8,r8[0x4]
8001efae:	30 ab       	mov	r11,10
8001efb0:	10 9c       	mov	r12,r8
8001efb2:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" vert_acc :");
8001efb6:	fe cc 05 ea 	sub	r12,pc,1514
8001efba:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsPosllh->vertical_accuracy,10);
8001efbe:	ee f8 ff d8 	ld.w	r8,r7[-40]
8001efc2:	70 08       	ld.w	r8,r8[0x0]
8001efc4:	30 ab       	mov	r11,10
8001efc6:	10 9c       	mov	r12,r8
8001efc8:	f0 16 00 04 	mcall	r6[16]
				dbg_print("\n");
8001efcc:	fe cc 16 b8 	sub	r12,pc,5816
8001efd0:	f0 16 00 01 	mcall	r6[4]
			}
			
			centralData->GPS_data.timegps = gpsPosllh->itow;
8001efd4:	ec f8 00 00 	ld.w	r8,r6[0]
8001efd8:	70 08       	ld.w	r8,r8[0x0]
8001efda:	ee f9 ff d8 	ld.w	r9,r7[-40]
8001efde:	72 69       	ld.w	r9,r9[0x18]
8001efe0:	f1 49 0b 50 	st.w	r8[2896],r9
			centralData->GPS_data.longitude = gpsPosllh->longitude / 10000000.0;
8001efe4:	ec f8 00 00 	ld.w	r8,r6[0]
8001efe8:	70 05       	ld.w	r5,r8[0x0]
8001efea:	ee f8 ff d8 	ld.w	r8,r7[-40]
8001efee:	70 58       	ld.w	r8,r8[0x14]
8001eff0:	10 9c       	mov	r12,r8
8001eff2:	f0 16 00 1a 	mcall	r6[104]
8001eff6:	30 08       	mov	r8,0
8001eff8:	e0 69 12 d0 	mov	r9,4816
8001effc:	ea 19 41 63 	orh	r9,0x4163
8001f000:	f0 16 00 0c 	mcall	r6[48]
8001f004:	14 98       	mov	r8,r10
8001f006:	16 99       	mov	r9,r11
8001f008:	ea e9 0b 10 	st.d	r5[2832],r8
			centralData->GPS_data.latitude = gpsPosllh->latitude / 10000000.0;
8001f00c:	ec f8 00 00 	ld.w	r8,r6[0]
8001f010:	70 05       	ld.w	r5,r8[0x0]
8001f012:	ee f8 ff d8 	ld.w	r8,r7[-40]
8001f016:	70 48       	ld.w	r8,r8[0x10]
8001f018:	10 9c       	mov	r12,r8
8001f01a:	f0 16 00 1a 	mcall	r6[104]
8001f01e:	30 08       	mov	r8,0
8001f020:	e0 69 12 d0 	mov	r9,4816
8001f024:	ea 19 41 63 	orh	r9,0x4163
8001f028:	f0 16 00 0c 	mcall	r6[48]
8001f02c:	14 98       	mov	r8,r10
8001f02e:	16 99       	mov	r9,r11
8001f030:	ea e9 0b 08 	st.d	r5[2824],r8
			centralData->GPS_data.alt_elips = ((float)gpsPosllh->altitude_ellipsoid) / 1000.0;
8001f034:	ec f8 00 00 	ld.w	r8,r6[0]
8001f038:	70 05       	ld.w	r5,r8[0x0]
8001f03a:	ee f8 ff d8 	ld.w	r8,r7[-40]
8001f03e:	70 38       	ld.w	r8,r8[0xc]
8001f040:	e5 a6 08 08 	cop	cp0,cr8,cr0,cr8,0x4c
8001f044:	fc 1b 44 7a 	movh	r11,0x447a
8001f048:	10 9c       	mov	r12,r8
8001f04a:	f0 16 00 08 	mcall	r6[32]
8001f04e:	18 98       	mov	r8,r12
8001f050:	eb 48 0b 1c 	st.w	r5[2844],r8
			centralData->GPS_data.altitude = ((float)gpsPosllh->altitude_msl) / 1000.0;
8001f054:	ec f8 00 00 	ld.w	r8,r6[0]
8001f058:	70 05       	ld.w	r5,r8[0x0]
8001f05a:	ee f8 ff d8 	ld.w	r8,r7[-40]
8001f05e:	70 28       	ld.w	r8,r8[0x8]
8001f060:	e5 a6 08 08 	cop	cp0,cr8,cr0,cr8,0x4c
8001f064:	fc 1b 44 7a 	movh	r11,0x447a
8001f068:	10 9c       	mov	r12,r8
8001f06a:	f0 16 00 08 	mcall	r6[32]
8001f06e:	18 98       	mov	r8,r12
8001f070:	eb 48 0b 18 	st.w	r5[2840],r8
			centralData->GPS_data.horizontalAccuracy = ((float)gpsPosllh->horizontal_accuracy) / 1000.0;
8001f074:	ec f8 00 00 	ld.w	r8,r6[0]
8001f078:	70 05       	ld.w	r5,r8[0x0]
8001f07a:	ee f8 ff d8 	ld.w	r8,r7[-40]
8001f07e:	70 18       	ld.w	r8,r8[0x4]
8001f080:	e5 a4 08 08 	cop	cp0,cr8,cr0,cr8,0x48
8001f084:	fc 1b 44 7a 	movh	r11,0x447a
8001f088:	10 9c       	mov	r12,r8
8001f08a:	f0 16 00 08 	mcall	r6[32]
8001f08e:	18 98       	mov	r8,r12
8001f090:	eb 48 0b 38 	st.w	r5[2872],r8
			centralData->GPS_data.verticalAccuracy = ((float)gpsPosllh->vertical_accuracy) / 1000.0;
8001f094:	ec f8 00 00 	ld.w	r8,r6[0]
8001f098:	70 05       	ld.w	r5,r8[0x0]
8001f09a:	ee f8 ff d8 	ld.w	r8,r7[-40]
8001f09e:	70 08       	ld.w	r8,r8[0x0]
8001f0a0:	e5 a4 08 08 	cop	cp0,cr8,cr0,cr8,0x48
8001f0a4:	fc 1b 44 7a 	movh	r11,0x447a
8001f0a8:	10 9c       	mov	r12,r8
8001f0aa:	f0 16 00 08 	mcall	r6[32]
8001f0ae:	18 98       	mov	r8,r12
8001f0b0:	eb 48 0b 3c 	st.w	r5[2876],r8
			//centralData->GPS_data.status = next_fix;
			
			new_position = true;
8001f0b4:	ec f9 02 28 	ld.w	r9,r6[552]
8001f0b8:	30 18       	mov	r8,1
8001f0ba:	b2 88       	st.b	r9[0x0],r8
		}
		break;
8001f0bc:	e0 8f 02 a2 	bral	8001f600 <ubx_process_data+0xaba>
	case MSG_NAV_STATUS:
		gpsStatus = ubx_GetStatus();
8001f0c0:	f0 16 01 45 	mcall	r6[1300]
8001f0c4:	18 98       	mov	r8,r12
8001f0c6:	ef 48 ff dc 	st.w	r7[-36],r8
		
		if (gpsStatus)
8001f0ca:	ee f8 ff dc 	ld.w	r8,r7[-36]
8001f0ce:	58 08       	cp.w	r8,0
8001f0d0:	e0 80 02 93 	breq	8001f5f6 <ubx_process_data+0xab0>
		{
			loopStatus = ++loopStatus % numSkippedMsg;
8001f0d4:	ec f8 01 b0 	ld.w	r8,r6[432]
8001f0d8:	11 88       	ld.ub	r8,r8[0x0]
8001f0da:	2f f8       	sub	r8,-1
8001f0dc:	5c 58       	castu.b	r8
8001f0de:	ec f9 01 b0 	ld.w	r9,r6[432]
8001f0e2:	b2 88       	st.b	r9[0x0],r8
8001f0e4:	ec f8 01 b0 	ld.w	r8,r6[432]
8001f0e8:	11 88       	ld.ub	r8,r8[0x0]
8001f0ea:	ec f9 01 78 	ld.w	r9,r6[376]
8001f0ee:	13 89       	ld.ub	r9,r9[0x0]
8001f0f0:	f0 09 0d 08 	divu	r8,r8,r9
8001f0f4:	12 98       	mov	r8,r9
8001f0f6:	5c 58       	castu.b	r8
8001f0f8:	ec f9 01 b0 	ld.w	r9,r6[432]
8001f0fc:	b2 88       	st.b	r9[0x0],r8
			if (printNavOnDebug && (loopStatus == 0))
8001f0fe:	ec f8 01 68 	ld.w	r8,r6[360]
8001f102:	11 88       	ld.ub	r8,r8[0x0]
8001f104:	58 08       	cp.w	r8,0
8001f106:	c2 10       	breq	8001f148 <ubx_process_data+0x602>
8001f108:	ec f8 01 b0 	ld.w	r8,r6[432]
8001f10c:	11 88       	ld.ub	r8,r8[0x0]
8001f10e:	58 08       	cp.w	r8,0
8001f110:	c1 c1       	brne	8001f148 <ubx_process_data+0x602>
			{
				dbg_print("MSG_STATUS fix_type = 0x");
8001f112:	fe cc 07 3a 	sub	r12,pc,1850
8001f116:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsStatus->fix_type,16);
8001f11a:	ee f8 ff dc 	ld.w	r8,r7[-36]
8001f11e:	f1 38 00 0b 	ld.ub	r8,r8[11]
8001f122:	31 0b       	mov	r11,16
8001f124:	10 9c       	mov	r12,r8
8001f126:	f0 16 00 04 	mcall	r6[16]
//	 			dbg_print(" fix_status = 0x");
//	 			dbg_print_num(gpsStatus->fix_status,16);
				dbg_print(", uptime =");
8001f12a:	fe cc 07 36 	sub	r12,pc,1846
8001f12e:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsStatus->uptime,10);
8001f132:	ee f8 ff dc 	ld.w	r8,r7[-36]
8001f136:	70 08       	ld.w	r8,r8[0x0]
8001f138:	30 ab       	mov	r11,10
8001f13a:	10 9c       	mov	r12,r8
8001f13c:	f0 16 00 04 	mcall	r6[16]
				dbg_print("\n");
8001f140:	fe cc 18 2c 	sub	r12,pc,6188
8001f144:	f0 16 00 01 	mcall	r6[4]
			}		
		
			//next_fix = (gpsStatus->fix_status & NAV_STATUS_FIX_VALID) && (gpsStatus->fix_type == GPS_FIX_TYPE_3DFIX);
			next_fix = (gpsStatus->fix_type == GPS_FIX_TYPE_3DFIX);
8001f148:	ee f8 ff dc 	ld.w	r8,r7[-36]
8001f14c:	f1 39 00 0b 	ld.ub	r9,r8[11]
8001f150:	30 38       	mov	r8,3
8001f152:	f0 09 18 00 	cp.b	r9,r8
8001f156:	5f 08       	sreq	r8
8001f158:	5c 58       	castu.b	r8
8001f15a:	ec f9 01 c8 	ld.w	r9,r6[456]
8001f15e:	b2 88       	st.b	r9[0x0],r8
			if (!next_fix)
8001f160:	ec f8 01 c8 	ld.w	r8,r6[456]
8001f164:	11 88       	ld.ub	r8,r8[0x0]
8001f166:	ec 18 00 01 	eorl	r8,0x1
8001f16a:	5c 58       	castu.b	r8
8001f16c:	c0 90       	breq	8001f17e <ubx_process_data+0x638>
			{
				centralData->GPS_data.status = NO_FIX;
8001f16e:	ec f8 00 00 	ld.w	r8,r6[0]
8001f172:	70 09       	ld.w	r9,r8[0x0]
8001f174:	30 18       	mov	r8,1
8001f176:	f3 68 0b 54 	st.b	r9[2900],r8
			}else{
				centralData->GPS_data.status = GPS_OK;
			}
		}
		break;
8001f17a:	e0 8f 02 43 	bral	8001f600 <ubx_process_data+0xaba>
			next_fix = (gpsStatus->fix_type == GPS_FIX_TYPE_3DFIX);
			if (!next_fix)
			{
				centralData->GPS_data.status = NO_FIX;
			}else{
				centralData->GPS_data.status = GPS_OK;
8001f17e:	ec f8 00 00 	ld.w	r8,r6[0]
8001f182:	70 09       	ld.w	r9,r8[0x0]
8001f184:	30 28       	mov	r8,2
8001f186:	f3 68 0b 54 	st.b	r9[2900],r8
			}
		}
		break;
8001f18a:	e0 8f 02 3b 	bral	8001f600 <ubx_process_data+0xaba>
	case MSG_NAV_SOL:
		gpsSolution = ubx_GetSolution();
8001f18e:	f0 16 01 75 	mcall	r6[1492]
8001f192:	18 98       	mov	r8,r12
8001f194:	ef 48 ff e0 	st.w	r7[-32],r8
		
		if (gpsSolution)
8001f198:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001f19c:	58 08       	cp.w	r8,0
8001f19e:	e0 80 02 2e 	breq	8001f5fa <ubx_process_data+0xab4>
		{
			loopSolution = ++loopSolution % numSkippedMsg;
8001f1a2:	ec f8 01 a8 	ld.w	r8,r6[424]
8001f1a6:	11 88       	ld.ub	r8,r8[0x0]
8001f1a8:	2f f8       	sub	r8,-1
8001f1aa:	5c 58       	castu.b	r8
8001f1ac:	ec f9 01 a8 	ld.w	r9,r6[424]
8001f1b0:	b2 88       	st.b	r9[0x0],r8
8001f1b2:	ec f8 01 a8 	ld.w	r8,r6[424]
8001f1b6:	11 88       	ld.ub	r8,r8[0x0]
8001f1b8:	ec f9 01 78 	ld.w	r9,r6[376]
8001f1bc:	13 89       	ld.ub	r9,r9[0x0]
8001f1be:	f0 09 0d 08 	divu	r8,r8,r9
8001f1c2:	12 98       	mov	r8,r9
8001f1c4:	5c 58       	castu.b	r8
8001f1c6:	ec f9 01 a8 	ld.w	r9,r6[424]
8001f1ca:	b2 88       	st.b	r9[0x0],r8
			if (printNavOnDebug && (loopSolution == 0))
8001f1cc:	ec f8 01 68 	ld.w	r8,r6[360]
8001f1d0:	11 88       	ld.ub	r8,r8[0x0]
8001f1d2:	58 08       	cp.w	r8,0
8001f1d4:	c7 40       	breq	8001f2bc <ubx_process_data+0x776>
8001f1d6:	ec f8 01 a8 	ld.w	r8,r6[424]
8001f1da:	11 88       	ld.ub	r8,r8[0x0]
8001f1dc:	58 08       	cp.w	r8,0
8001f1de:	c6 f1       	brne	8001f2bc <ubx_process_data+0x776>
			{
				dbg_print("MSG_SOL ");
8001f1e0:	fe cc 07 e0 	sub	r12,pc,2016
8001f1e4:	f0 16 00 01 	mcall	r6[4]
				dbg_print("itow :");
8001f1e8:	fe cc 07 dc 	sub	r12,pc,2012
8001f1ec:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsSolution->itow,10);
8001f1f0:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001f1f4:	70 c8       	ld.w	r8,r8[0x30]
8001f1f6:	30 ab       	mov	r11,10
8001f1f8:	10 9c       	mov	r12,r8
8001f1fa:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" week :");
8001f1fe:	fe cc 07 ea 	sub	r12,pc,2026
8001f202:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsSolution->week,10);
8001f206:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001f20a:	f1 08 00 2a 	ld.sh	r8,r8[42]
8001f20e:	30 ab       	mov	r11,10
8001f210:	10 9c       	mov	r12,r8
8001f212:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" fix_type = 0x0");
8001f216:	fe cc 07 fa 	sub	r12,pc,2042
8001f21a:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsSolution->fix_type,16);
8001f21e:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001f222:	f1 38 00 29 	ld.ub	r8,r8[41]
8001f226:	31 0b       	mov	r11,16
8001f228:	10 9c       	mov	r12,r8
8001f22a:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" pos_acc_3d :");
8001f22e:	fe cc 08 02 	sub	r12,pc,2050
8001f232:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsSolution->position_accuracy_3d,10);
8001f236:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001f23a:	70 68       	ld.w	r8,r8[0x18]
8001f23c:	30 ab       	mov	r11,10
8001f23e:	10 9c       	mov	r12,r8
8001f240:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" ecefx :");
8001f244:	fe cc 08 08 	sub	r12,pc,2056
8001f248:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsSolution->ecef_x,10);
8001f24c:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001f250:	70 98       	ld.w	r8,r8[0x24]
8001f252:	30 ab       	mov	r11,10
8001f254:	10 9c       	mov	r12,r8
8001f256:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" ecefy :");
8001f25a:	fe cc 08 12 	sub	r12,pc,2066
8001f25e:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsSolution->ecef_y,10);
8001f262:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001f266:	70 88       	ld.w	r8,r8[0x20]
8001f268:	30 ab       	mov	r11,10
8001f26a:	10 9c       	mov	r12,r8
8001f26c:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" ecefz :");
8001f270:	fe cc 08 1c 	sub	r12,pc,2076
8001f274:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsSolution->ecef_z,10);
8001f278:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001f27c:	70 78       	ld.w	r8,r8[0x1c]
8001f27e:	30 ab       	mov	r11,10
8001f280:	10 9c       	mov	r12,r8
8001f282:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" pos_DOP :");
8001f286:	fe cc 08 26 	sub	r12,pc,2086
8001f28a:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsSolution->position_DOP,10);
8001f28e:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001f292:	90 38       	ld.sh	r8,r8[0x6]
8001f294:	5c 78       	castu.h	r8
8001f296:	30 ab       	mov	r11,10
8001f298:	10 9c       	mov	r12,r8
8001f29a:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" num sat :");
8001f29e:	fe cc 08 32 	sub	r12,pc,2098
8001f2a2:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsSolution->satellites,10);
8001f2a6:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001f2aa:	11 c8       	ld.ub	r8,r8[0x4]
8001f2ac:	30 ab       	mov	r11,10
8001f2ae:	10 9c       	mov	r12,r8
8001f2b0:	f0 16 00 04 	mcall	r6[16]
				dbg_print("\n");
8001f2b4:	fe cc 19 a0 	sub	r12,pc,6560
8001f2b8:	f0 16 00 01 	mcall	r6[4]
			}
			//next_fix = (gpsSolution->fix_status & NAV_STATUS_FIX_VALID) && (gpsSolution->fix_type == GPS_FIX_TYPE_3DFIX);
			next_fix = (gpsSolution->fix_type == GPS_FIX_TYPE_3DFIX);
8001f2bc:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001f2c0:	f1 39 00 29 	ld.ub	r9,r8[41]
8001f2c4:	30 38       	mov	r8,3
8001f2c6:	f0 09 18 00 	cp.b	r9,r8
8001f2ca:	5f 08       	sreq	r8
8001f2cc:	5c 58       	castu.b	r8
8001f2ce:	ec f9 01 c8 	ld.w	r9,r6[456]
8001f2d2:	b2 88       	st.b	r9[0x0],r8
			if (!next_fix)
8001f2d4:	ec f8 01 c8 	ld.w	r8,r6[456]
8001f2d8:	11 88       	ld.ub	r8,r8[0x0]
8001f2da:	ec 18 00 01 	eorl	r8,0x1
8001f2de:	5c 58       	castu.b	r8
8001f2e0:	c0 80       	breq	8001f2f0 <ubx_process_data+0x7aa>
			{
				centralData->GPS_data.status = NO_FIX;
8001f2e2:	ec f8 00 00 	ld.w	r8,r6[0]
8001f2e6:	70 09       	ld.w	r9,r8[0x0]
8001f2e8:	30 18       	mov	r8,1
8001f2ea:	f3 68 0b 54 	st.b	r9[2900],r8
8001f2ee:	c0 78       	rjmp	8001f2fc <ubx_process_data+0x7b6>
			}else{
				centralData->GPS_data.status = GPS_OK;
8001f2f0:	ec f8 00 00 	ld.w	r8,r6[0]
8001f2f4:	70 09       	ld.w	r9,r8[0x0]
8001f2f6:	30 28       	mov	r8,2
8001f2f8:	f3 68 0b 54 	st.b	r9[2900],r8
			}
		
			centralData->GPS_data.num_sats = gpsSolution->satellites;
8001f2fc:	ec f8 00 00 	ld.w	r8,r6[0]
8001f300:	70 09       	ld.w	r9,r8[0x0]
8001f302:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001f306:	11 c8       	ld.ub	r8,r8[0x4]
8001f308:	f3 68 0b 48 	st.b	r9[2888],r8
			centralData->GPS_data.hdop = gpsSolution->position_DOP;
8001f30c:	ec f8 00 00 	ld.w	r8,r6[0]
8001f310:	70 09       	ld.w	r9,r8[0x0]
8001f312:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001f316:	90 38       	ld.sh	r8,r8[0x6]
8001f318:	f3 58 0b 4a 	st.h	r9[2890],r8
		}
		break;
8001f31c:	e0 8f 01 72 	bral	8001f600 <ubx_process_data+0xaba>
	case MSG_NAV_VELNED:
		gpsVelned = ubx_GetVelned();
8001f320:	f0 16 01 55 	mcall	r6[1364]
8001f324:	18 98       	mov	r8,r12
8001f326:	ef 48 ff e4 	st.w	r7[-28],r8
		
		if (gpsVelned)
8001f32a:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001f32e:	58 08       	cp.w	r8,0
8001f330:	e0 80 01 67 	breq	8001f5fe <ubx_process_data+0xab8>
		{
			loopVelned = ++loopVelned % numSkippedMsg;
8001f334:	ec f8 01 b4 	ld.w	r8,r6[436]
8001f338:	11 88       	ld.ub	r8,r8[0x0]
8001f33a:	2f f8       	sub	r8,-1
8001f33c:	5c 58       	castu.b	r8
8001f33e:	ec f9 01 b4 	ld.w	r9,r6[436]
8001f342:	b2 88       	st.b	r9[0x0],r8
8001f344:	ec f8 01 b4 	ld.w	r8,r6[436]
8001f348:	11 88       	ld.ub	r8,r8[0x0]
8001f34a:	ec f9 01 78 	ld.w	r9,r6[376]
8001f34e:	13 89       	ld.ub	r9,r9[0x0]
8001f350:	f0 09 0d 08 	divu	r8,r8,r9
8001f354:	12 98       	mov	r8,r9
8001f356:	5c 58       	castu.b	r8
8001f358:	ec f9 01 b4 	ld.w	r9,r6[436]
8001f35c:	b2 88       	st.b	r9[0x0],r8
			if (printNavOnDebug && (loopVelned == 0))
8001f35e:	ec f8 01 68 	ld.w	r8,r6[360]
8001f362:	11 88       	ld.ub	r8,r8[0x0]
8001f364:	58 08       	cp.w	r8,0
8001f366:	c6 60       	breq	8001f432 <ubx_process_data+0x8ec>
8001f368:	ec f8 01 b4 	ld.w	r8,r6[436]
8001f36c:	11 88       	ld.ub	r8,r8[0x0]
8001f36e:	58 08       	cp.w	r8,0
8001f370:	c6 11       	brne	8001f432 <ubx_process_data+0x8ec>
			{
			
				dbg_print("MSG_NAV_VELNED ");
8001f372:	fe cc 08 fa 	sub	r12,pc,2298
8001f376:	f0 16 00 01 	mcall	r6[4]
		
				dbg_print("itow :");
8001f37a:	fe cc 09 6e 	sub	r12,pc,2414
8001f37e:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsVelned->itow,10);
8001f382:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001f386:	70 88       	ld.w	r8,r8[0x20]
8001f388:	30 ab       	mov	r11,10
8001f38a:	10 9c       	mov	r12,r8
8001f38c:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" ned_north :");
8001f390:	fe cc 09 08 	sub	r12,pc,2312
8001f394:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsVelned->ned_north,10);
8001f398:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001f39c:	70 78       	ld.w	r8,r8[0x1c]
8001f39e:	30 ab       	mov	r11,10
8001f3a0:	10 9c       	mov	r12,r8
8001f3a2:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" ned_east :");
8001f3a6:	fe cc 09 0e 	sub	r12,pc,2318
8001f3aa:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsVelned->ned_east,10);
8001f3ae:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001f3b2:	70 68       	ld.w	r8,r8[0x18]
8001f3b4:	30 ab       	mov	r11,10
8001f3b6:	10 9c       	mov	r12,r8
8001f3b8:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" ned_down :");
8001f3bc:	fe cc 09 18 	sub	r12,pc,2328
8001f3c0:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsVelned->ned_down,10);
8001f3c4:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001f3c8:	70 58       	ld.w	r8,r8[0x14]
8001f3ca:	30 ab       	mov	r11,10
8001f3cc:	10 9c       	mov	r12,r8
8001f3ce:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" speed_3d :");
8001f3d2:	fe cc 09 22 	sub	r12,pc,2338
8001f3d6:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsVelned->speed_3d,10);
8001f3da:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001f3de:	70 48       	ld.w	r8,r8[0x10]
8001f3e0:	30 ab       	mov	r11,10
8001f3e2:	10 9c       	mov	r12,r8
8001f3e4:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" heading_2d :");
8001f3e8:	fe cc 09 2c 	sub	r12,pc,2348
8001f3ec:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsVelned->heading_2d,10);
8001f3f0:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001f3f4:	70 28       	ld.w	r8,r8[0x8]
8001f3f6:	30 ab       	mov	r11,10
8001f3f8:	10 9c       	mov	r12,r8
8001f3fa:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" speed_accuracy :");
8001f3fe:	fe cc 09 32 	sub	r12,pc,2354
8001f402:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsVelned->speed_accuracy,10);
8001f406:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001f40a:	70 18       	ld.w	r8,r8[0x4]
8001f40c:	30 ab       	mov	r11,10
8001f40e:	10 9c       	mov	r12,r8
8001f410:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" heading_accuracy :");
8001f414:	fe cc 09 34 	sub	r12,pc,2356
8001f418:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsVelned->heading_accuracy,10);
8001f41c:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001f420:	70 08       	ld.w	r8,r8[0x0]
8001f422:	30 ab       	mov	r11,10
8001f424:	10 9c       	mov	r12,r8
8001f426:	f0 16 00 04 	mcall	r6[16]
				dbg_print("\n");
8001f42a:	fe cc 1b 16 	sub	r12,pc,6934
8001f42e:	f0 16 00 01 	mcall	r6[4]
			}
			centralData->GPS_data.timegps = gpsVelned->itow;
8001f432:	ec f8 00 00 	ld.w	r8,r6[0]
8001f436:	70 08       	ld.w	r8,r8[0x0]
8001f438:	ee f9 ff e4 	ld.w	r9,r7[-28]
8001f43c:	72 89       	ld.w	r9,r9[0x20]
8001f43e:	f1 49 0b 50 	st.w	r8[2896],r9
			centralData->GPS_data.speed        = ((float)gpsVelned->speed_3d)/100.; // m/s
8001f442:	ec f8 00 00 	ld.w	r8,r6[0]
8001f446:	70 05       	ld.w	r5,r8[0x0]
8001f448:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001f44c:	70 48       	ld.w	r8,r8[0x10]
8001f44e:	e5 a4 08 08 	cop	cp0,cr8,cr0,cr8,0x48
8001f452:	fc 1b 42 c8 	movh	r11,0x42c8
8001f456:	10 9c       	mov	r12,r8
8001f458:	f0 16 00 08 	mcall	r6[32]
8001f45c:	18 98       	mov	r8,r12
8001f45e:	eb 48 0b 20 	st.w	r5[2848],r8
			centralData->GPS_data.groundSpeed = ((float)gpsVelned->groundSpeed_2d) / 100.; // m/s
8001f462:	ec f8 00 00 	ld.w	r8,r6[0]
8001f466:	70 05       	ld.w	r5,r8[0x0]
8001f468:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001f46c:	70 38       	ld.w	r8,r8[0xc]
8001f46e:	e5 a4 08 08 	cop	cp0,cr8,cr0,cr8,0x48
8001f472:	fc 1b 42 c8 	movh	r11,0x42c8
8001f476:	10 9c       	mov	r12,r8
8001f478:	f0 16 00 08 	mcall	r6[32]
8001f47c:	18 98       	mov	r8,r12
8001f47e:	eb 48 0b 24 	st.w	r5[2852],r8
			centralData->GPS_data.course = ((float)gpsVelned->heading_2d) / 100000.; // Heading 2D deg * 100000 rescaled to deg * 100
8001f482:	ec f8 00 00 	ld.w	r8,r6[0]
8001f486:	70 05       	ld.w	r5,r8[0x0]
8001f488:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001f48c:	70 28       	ld.w	r8,r8[0x8]
8001f48e:	e5 a6 08 08 	cop	cp0,cr8,cr0,cr8,0x4c
8001f492:	e0 6b 50 00 	mov	r11,20480
8001f496:	ea 1b 47 c3 	orh	r11,0x47c3
8001f49a:	10 9c       	mov	r12,r8
8001f49c:	f0 16 00 08 	mcall	r6[32]
8001f4a0:	18 98       	mov	r8,r12
8001f4a2:	eb 48 0b 34 	st.w	r5[2868],r8
			have_raw_velocity = true;
8001f4a6:	ec f9 03 94 	ld.w	r9,r6[916]
8001f4aa:	30 18       	mov	r8,1
8001f4ac:	b2 88       	st.b	r9[0x0],r8
			centralData->GPS_data.northSpeed  = ((float)gpsVelned->ned_north) / 100.0;
8001f4ae:	ec f8 00 00 	ld.w	r8,r6[0]
8001f4b2:	70 05       	ld.w	r5,r8[0x0]
8001f4b4:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001f4b8:	70 78       	ld.w	r8,r8[0x1c]
8001f4ba:	e5 a6 08 08 	cop	cp0,cr8,cr0,cr8,0x4c
8001f4be:	fc 1b 42 c8 	movh	r11,0x42c8
8001f4c2:	10 9c       	mov	r12,r8
8001f4c4:	f0 16 00 08 	mcall	r6[32]
8001f4c8:	18 98       	mov	r8,r12
8001f4ca:	eb 48 0b 28 	st.w	r5[2856],r8
			centralData->GPS_data.eastSpeed   = ((float)gpsVelned->ned_east) / 100.;
8001f4ce:	ec f8 00 00 	ld.w	r8,r6[0]
8001f4d2:	70 05       	ld.w	r5,r8[0x0]
8001f4d4:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001f4d8:	70 68       	ld.w	r8,r8[0x18]
8001f4da:	e5 a6 08 08 	cop	cp0,cr8,cr0,cr8,0x4c
8001f4de:	fc 1b 42 c8 	movh	r11,0x42c8
8001f4e2:	10 9c       	mov	r12,r8
8001f4e4:	f0 16 00 08 	mcall	r6[32]
8001f4e8:	18 98       	mov	r8,r12
8001f4ea:	eb 48 0b 2c 	st.w	r5[2860],r8
			centralData->GPS_data.verticalSpeed   = ((float)gpsVelned->ned_down) / 100.;
8001f4ee:	ec f8 00 00 	ld.w	r8,r6[0]
8001f4f2:	70 05       	ld.w	r5,r8[0x0]
8001f4f4:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001f4f8:	70 58       	ld.w	r8,r8[0x14]
8001f4fa:	e5 a6 08 08 	cop	cp0,cr8,cr0,cr8,0x4c
8001f4fe:	fc 1b 42 c8 	movh	r11,0x42c8
8001f502:	10 9c       	mov	r12,r8
8001f504:	f0 16 00 08 	mcall	r6[32]
8001f508:	18 98       	mov	r8,r12
8001f50a:	eb 48 0b 30 	st.w	r5[2864],r8
			centralData->GPS_data.speedAccuracy = ((float)gpsVelned->speed_accuracy)/100.;
8001f50e:	ec f8 00 00 	ld.w	r8,r6[0]
8001f512:	70 05       	ld.w	r5,r8[0x0]
8001f514:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001f518:	70 18       	ld.w	r8,r8[0x4]
8001f51a:	e5 a4 08 08 	cop	cp0,cr8,cr0,cr8,0x48
8001f51e:	fc 1b 42 c8 	movh	r11,0x42c8
8001f522:	10 9c       	mov	r12,r8
8001f524:	f0 16 00 08 	mcall	r6[32]
8001f528:	18 98       	mov	r8,r12
8001f52a:	eb 48 0b 40 	st.w	r5[2880],r8
			centralData->GPS_data.headingAccuracy = gpsVelned->heading_accuracy;
8001f52e:	ec f8 00 00 	ld.w	r8,r6[0]
8001f532:	70 08       	ld.w	r8,r8[0x0]
8001f534:	ee f9 ff e4 	ld.w	r9,r7[-28]
8001f538:	72 09       	ld.w	r9,r9[0x0]
8001f53a:	e5 a4 09 09 	cop	cp0,cr9,cr0,cr9,0x48
8001f53e:	f1 49 0b 44 	st.w	r8[2884],r9
			new_speed = true;
8001f542:	ec f9 01 f4 	ld.w	r9,r6[500]
8001f546:	30 18       	mov	r8,1
8001f548:	b2 88       	st.b	r9[0x0],r8
		}
		break;
8001f54a:	c5 b8       	rjmp	8001f600 <ubx_process_data+0xaba>
	case MSG_NAV_SVINFO:
		gpsSVInfo = ubx_GetSVInfo();
8001f54c:	f0 16 01 c3 	mcall	r6[1804]
8001f550:	18 98       	mov	r8,r12
8001f552:	ef 48 ff e8 	st.w	r7[-24],r8
		
		if (gpsSVInfo)
8001f556:	ee f8 ff e8 	ld.w	r8,r7[-24]
8001f55a:	58 08       	cp.w	r8,0
8001f55c:	c1 60       	breq	8001f588 <ubx_process_data+0xa42>
		{
			if (printNavOnDebug)
8001f55e:	ec f8 01 68 	ld.w	r8,r6[360]
8001f562:	11 88       	ld.ub	r8,r8[0x0]
8001f564:	58 08       	cp.w	r8,0
8001f566:	c1 10       	breq	8001f588 <ubx_process_data+0xa42>
			{
				dbg_print("MSG_NAV_SVINFO, numChannel:");
8001f568:	fe cc 0a 74 	sub	r12,pc,2676
8001f56c:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsSVInfo->numCh,10);
8001f570:	ee f8 ff e8 	ld.w	r8,r7[-24]
8001f574:	f1 38 00 c3 	ld.ub	r8,r8[195]
8001f578:	30 ab       	mov	r11,10
8001f57a:	10 9c       	mov	r12,r8
8001f57c:	f0 16 00 04 	mcall	r6[16]
				dbg_print("\n");
8001f580:	fe cc 1c 6c 	sub	r12,pc,7276
8001f584:	f0 16 00 01 	mcall	r6[4]
			}
		}
		
		
	default:
		dbg_print("Unexpected NAV message 0x");
8001f588:	fe cc 0a 78 	sub	r12,pc,2680
8001f58c:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(msg_id,10);
8001f590:	ec f8 00 5c 	ld.w	r8,r6[92]
8001f594:	11 88       	ld.ub	r8,r8[0x0]
8001f596:	30 ab       	mov	r11,10
8001f598:	10 9c       	mov	r12,r8
8001f59a:	f0 16 00 04 	mcall	r6[16]
		dbg_print("\n");
8001f59e:	fe cc 1c 8a 	sub	r12,pc,7306
8001f5a2:	f0 16 00 01 	mcall	r6[4]
		
		if (++disable_counter == 0) {
8001f5a6:	ec f8 01 7c 	ld.w	r8,r6[380]
8001f5aa:	11 88       	ld.ub	r8,r8[0x0]
8001f5ac:	2f f8       	sub	r8,-1
8001f5ae:	5c 58       	castu.b	r8
8001f5b0:	ec f9 01 7c 	ld.w	r9,r6[380]
8001f5b4:	b2 88       	st.b	r9[0x0],r8
8001f5b6:	ec f8 01 7c 	ld.w	r8,r6[380]
8001f5ba:	11 88       	ld.ub	r8,r8[0x0]
8001f5bc:	58 08       	cp.w	r8,0
8001f5be:	c1 81       	brne	8001f5ee <ubx_process_data+0xaa8>
			//Debug("Disabling NAV message 0x%02x", (unsigned)_msg_id);
			dbg_print("Disabling NAV message 0x");
8001f5c0:	fe cc 0a 94 	sub	r12,pc,2708
8001f5c4:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(msg_id,16);
8001f5c8:	ec f8 00 5c 	ld.w	r8,r6[92]
8001f5cc:	11 88       	ld.ub	r8,r8[0x0]
8001f5ce:	31 0b       	mov	r11,16
8001f5d0:	10 9c       	mov	r12,r8
8001f5d2:	f0 16 00 04 	mcall	r6[16]
			dbg_print("\n");
8001f5d6:	fe cc 1c c2 	sub	r12,pc,7362
8001f5da:	f0 16 00 01 	mcall	r6[4]
			ubx_configure_message_rate(UBX_CLASS_NAV, msg_id, 0);
8001f5de:	ec f8 00 5c 	ld.w	r8,r6[92]
8001f5e2:	11 88       	ld.ub	r8,r8[0x0]
8001f5e4:	30 0a       	mov	r10,0
8001f5e6:	10 9b       	mov	r11,r8
8001f5e8:	30 1c       	mov	r12,1
8001f5ea:	f0 16 00 56 	mcall	r6[344]
		}
		return false;
8001f5ee:	30 08       	mov	r8,0
8001f5f0:	c1 d8       	rjmp	8001f62a <ubx_process_data+0xae4>
			centralData->GPS_data.verticalAccuracy = ((float)gpsPosllh->vertical_accuracy) / 1000.0;
			//centralData->GPS_data.status = next_fix;
			
			new_position = true;
		}
		break;
8001f5f2:	d7 03       	nop
8001f5f4:	c0 68       	rjmp	8001f600 <ubx_process_data+0xaba>
				centralData->GPS_data.status = NO_FIX;
			}else{
				centralData->GPS_data.status = GPS_OK;
			}
		}
		break;
8001f5f6:	d7 03       	nop
8001f5f8:	c0 48       	rjmp	8001f600 <ubx_process_data+0xaba>
			}
		
			centralData->GPS_data.num_sats = gpsSolution->satellites;
			centralData->GPS_data.hdop = gpsSolution->position_DOP;
		}
		break;
8001f5fa:	d7 03       	nop
8001f5fc:	c0 28       	rjmp	8001f600 <ubx_process_data+0xaba>
			centralData->GPS_data.verticalSpeed   = ((float)gpsVelned->ned_down) / 100.;
			centralData->GPS_data.speedAccuracy = ((float)gpsVelned->speed_accuracy)/100.;
			centralData->GPS_data.headingAccuracy = gpsVelned->heading_accuracy;
			new_speed = true;
		}
		break;
8001f5fe:	d7 03       	nop
		}
		return false;
	}
	// we only return true when we get new position and speed data
	// this ensures we don't use stale data
	if (new_position && new_speed) {
8001f600:	ec f8 02 28 	ld.w	r8,r6[552]
8001f604:	11 88       	ld.ub	r8,r8[0x0]
8001f606:	58 08       	cp.w	r8,0
8001f608:	c1 00       	breq	8001f628 <ubx_process_data+0xae2>
8001f60a:	ec f8 01 f4 	ld.w	r8,r6[500]
8001f60e:	11 88       	ld.ub	r8,r8[0x0]
8001f610:	58 08       	cp.w	r8,0
8001f612:	c0 b0       	breq	8001f628 <ubx_process_data+0xae2>
		new_speed = false;
8001f614:	ec f9 01 f4 	ld.w	r9,r6[500]
8001f618:	30 08       	mov	r8,0
8001f61a:	b2 88       	st.b	r9[0x0],r8
		new_position = false;
8001f61c:	ec f9 02 28 	ld.w	r9,r6[552]
8001f620:	30 08       	mov	r8,0
8001f622:	b2 88       	st.b	r9[0x0],r8
// 		if (fix_count == 100) {
// 			// ask for nav settings every 20 seconds
// 			dbg_print("Asking for engine setting\n");
// 			ubx_send_message(UBX_CLASS_CFG, MSG_CFG_NAV_SETTINGS, NULL, 0);
// 		}
		return true;
8001f624:	30 18       	mov	r8,1
8001f626:	c0 28       	rjmp	8001f62a <ubx_process_data+0xae4>
	}
	return false;
8001f628:	30 08       	mov	r8,0
}
8001f62a:	10 9c       	mov	r12,r8
8001f62c:	2f 6d       	sub	sp,-40
8001f62e:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8001f632:	00 00       	add	r0,r0
8001f634:	80 01       	ld.sh	r1,r0[0x0]
8001f636:	e9 d6       	*unknown*

8001f638 <update_checksum>:
************************************************************************************
Checksum update
************************************************************************************
*/
void update_checksum(uint8_t *data, uint8_t len, uint8_t *ck_a, uint8_t *ck_b)
{
8001f638:	eb cd 40 80 	pushm	r7,lr
8001f63c:	1a 97       	mov	r7,sp
8001f63e:	20 4d       	sub	sp,16
8001f640:	ef 4c ff fc 	st.w	r7[-4],r12
8001f644:	16 98       	mov	r8,r11
8001f646:	ef 4a ff f4 	st.w	r7[-12],r10
8001f64a:	ef 49 ff f0 	st.w	r7[-16],r9
8001f64e:	ef 68 ff f8 	st.b	r7[-8],r8
	while (len--) {
8001f652:	c1 e8       	rjmp	8001f68e <update_checksum+0x56>
		*ck_a += *data;
8001f654:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001f658:	11 89       	ld.ub	r9,r8[0x0]
8001f65a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001f65e:	11 88       	ld.ub	r8,r8[0x0]
8001f660:	f2 08 00 08 	add	r8,r9,r8
8001f664:	5c 58       	castu.b	r8
8001f666:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001f66a:	b2 88       	st.b	r9[0x0],r8
		*ck_b += *ck_a;
8001f66c:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001f670:	11 89       	ld.ub	r9,r8[0x0]
8001f672:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001f676:	11 88       	ld.ub	r8,r8[0x0]
8001f678:	f2 08 00 08 	add	r8,r9,r8
8001f67c:	5c 58       	castu.b	r8
8001f67e:	ee f9 ff f0 	ld.w	r9,r7[-16]
8001f682:	b2 88       	st.b	r9[0x0],r8
		data++;
8001f684:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001f688:	2f f8       	sub	r8,-1
8001f68a:	ef 48 ff fc 	st.w	r7[-4],r8
Checksum update
************************************************************************************
*/
void update_checksum(uint8_t *data, uint8_t len, uint8_t *ck_a, uint8_t *ck_b)
{
	while (len--) {
8001f68e:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8001f692:	30 08       	mov	r8,0
8001f694:	f0 09 18 00 	cp.b	r9,r8
8001f698:	5f 18       	srne	r8
8001f69a:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8001f69e:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8001f6a2:	20 18       	sub	r8,1
8001f6a4:	ef 68 ff f8 	st.b	r7[-8],r8
8001f6a8:	58 09       	cp.w	r9,0
8001f6aa:	cd 51       	brne	8001f654 <update_checksum+0x1c>
		*ck_a += *data;
		*ck_b += *ck_a;
		data++;
	}
}
8001f6ac:	2f cd       	sub	sp,-16
8001f6ae:	e3 cd 80 80 	ldm	sp++,r7,pc

8001f6b2 <endian_lower_bytes_uint16>:
To send the lower byte of an uint16_t in the Little Endian format
************************************************************************************
*/

uint8_t endian_lower_bytes_uint16(uint16_t bytes)
{
8001f6b2:	eb cd 40 80 	pushm	r7,lr
8001f6b6:	1a 97       	mov	r7,sp
8001f6b8:	20 1d       	sub	sp,4
8001f6ba:	18 98       	mov	r8,r12
8001f6bc:	ef 58 ff fc 	st.h	r7[-4],r8
	return (bytes & 0x00FF);
8001f6c0:	ef 08 ff fc 	ld.sh	r8,r7[-4]
8001f6c4:	5c 58       	castu.b	r8
}
8001f6c6:	10 9c       	mov	r12,r8
8001f6c8:	2f fd       	sub	sp,-4
8001f6ca:	e3 cd 80 80 	ldm	sp++,r7,pc

8001f6ce <endian_higher_bytes_uint16>:
************************************************************************************
To send the higher byte of an uint16_t in the Little Endian format
************************************************************************************
*/
uint8_t endian_higher_bytes_uint16(uint16_t bytes)
{
8001f6ce:	eb cd 40 80 	pushm	r7,lr
8001f6d2:	1a 97       	mov	r7,sp
8001f6d4:	20 1d       	sub	sp,4
8001f6d6:	18 98       	mov	r8,r12
8001f6d8:	ef 58 ff fc 	st.h	r7[-4],r8
	return (bytes & 0xFF00)>>8;
8001f6dc:	ef 18 ff fc 	ld.uh	r8,r7[-4]
8001f6e0:	a9 88       	lsr	r8,0x8
8001f6e2:	5c 88       	casts.h	r8
8001f6e4:	5c 58       	castu.b	r8
}
8001f6e6:	10 9c       	mov	r12,r8
8001f6e8:	2f fd       	sub	sp,-4
8001f6ea:	e3 cd 80 80 	ldm	sp++,r7,pc

8001f6ee <ubx_send_header>:
************************************************************************************
To send the UBX header of all messages
************************************************************************************
*/
void ubx_send_header(uint8_t msg_class, uint8_t _msg_id, uint8_t size)
{
8001f6ee:	eb cd 40 c0 	pushm	r6-r7,lr
8001f6f2:	1a 97       	mov	r7,sp
8001f6f4:	20 5d       	sub	sp,20
8001f6f6:	4b 76       	lddpc	r6,8001f7d0 <ubx_send_header+0xe2>
8001f6f8:	1e 26       	rsub	r6,pc
8001f6fa:	16 99       	mov	r9,r11
8001f6fc:	14 98       	mov	r8,r10
8001f6fe:	18 9a       	mov	r10,r12
8001f700:	ef 6a ff f4 	st.b	r7[-12],r10
8001f704:	ef 69 ff f0 	st.b	r7[-16],r9
8001f708:	ef 68 ff ec 	st.b	r7[-20],r8
	ubx_header header;
	header.preamble1		= UBX_PREAMBLE1;
8001f70c:	3b 58       	mov	r8,-75
8001f70e:	ef 68 ff ff 	st.b	r7[-1],r8
	header.preamble2		= UBX_PREAMBLE2;
8001f712:	36 28       	mov	r8,98
8001f714:	ef 68 ff fe 	st.b	r7[-2],r8
	header.msg_class		= msg_class;
8001f718:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8001f71c:	ef 68 ff fd 	st.b	r7[-3],r8
	header.msg_id_header    = _msg_id;
8001f720:	ef 38 ff f0 	ld.ub	r8,r7[-16]
8001f724:	ef 68 ff fc 	st.b	r7[-4],r8
	header.length			= size;
8001f728:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8001f72c:	ef 58 ff fa 	st.h	r7[-6],r8
	//centralData->gps_stream_out.put(centralData->gps_stream_out.data,header.msg_id_header);
	//
	//centralData->gps_stream_out.put(centralData->gps_stream_out.data,(uint8_t) (header.length & 0x0F));
	//centralData->gps_stream_out.put(centralData->gps_stream_out.data,(uint8_t) (header.length & 0xF0)>>8);
	
	putnum(&centralData->gps_stream_out,header.preamble1,16);
8001f730:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8001f734:	10 99       	mov	r9,r8
8001f736:	ec f8 00 00 	ld.w	r8,r6[0]
8001f73a:	70 08       	ld.w	r8,r8[0x0]
8001f73c:	f0 c8 f5 10 	sub	r8,r8,-2800
8001f740:	31 0a       	mov	r10,16
8001f742:	12 9b       	mov	r11,r9
8001f744:	10 9c       	mov	r12,r8
8001f746:	f0 16 00 26 	mcall	r6[152]
	putnum(&centralData->gps_stream_out,header.preamble2,16);
8001f74a:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8001f74e:	10 99       	mov	r9,r8
8001f750:	ec f8 00 00 	ld.w	r8,r6[0]
8001f754:	70 08       	ld.w	r8,r8[0x0]
8001f756:	f0 c8 f5 10 	sub	r8,r8,-2800
8001f75a:	31 0a       	mov	r10,16
8001f75c:	12 9b       	mov	r11,r9
8001f75e:	10 9c       	mov	r12,r8
8001f760:	f0 16 00 26 	mcall	r6[152]
	putnum(&centralData->gps_stream_out,header.msg_class,10);
8001f764:	ef 38 ff fd 	ld.ub	r8,r7[-3]
8001f768:	10 99       	mov	r9,r8
8001f76a:	ec f8 00 00 	ld.w	r8,r6[0]
8001f76e:	70 08       	ld.w	r8,r8[0x0]
8001f770:	f0 c8 f5 10 	sub	r8,r8,-2800
8001f774:	30 aa       	mov	r10,10
8001f776:	12 9b       	mov	r11,r9
8001f778:	10 9c       	mov	r12,r8
8001f77a:	f0 16 00 26 	mcall	r6[152]
	putnum(&centralData->gps_stream_out,header.msg_id_header,16);
8001f77e:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8001f782:	10 99       	mov	r9,r8
8001f784:	ec f8 00 00 	ld.w	r8,r6[0]
8001f788:	70 08       	ld.w	r8,r8[0x0]
8001f78a:	f0 c8 f5 10 	sub	r8,r8,-2800
8001f78e:	31 0a       	mov	r10,16
8001f790:	12 9b       	mov	r11,r9
8001f792:	10 9c       	mov	r12,r8
8001f794:	f0 16 00 26 	mcall	r6[152]
	
	putnum(&centralData->gps_stream_out,(uint8_t) (header.length & 0x0F),16);
8001f798:	ef 08 ff fa 	ld.sh	r8,r7[-6]
8001f79c:	5c 58       	castu.b	r8
8001f79e:	f3 d8 c0 04 	bfextu	r9,r8,0x0,0x4
8001f7a2:	ec f8 00 00 	ld.w	r8,r6[0]
8001f7a6:	70 08       	ld.w	r8,r8[0x0]
8001f7a8:	f0 c8 f5 10 	sub	r8,r8,-2800
8001f7ac:	31 0a       	mov	r10,16
8001f7ae:	12 9b       	mov	r11,r9
8001f7b0:	10 9c       	mov	r12,r8
8001f7b2:	f0 16 00 26 	mcall	r6[152]
	putnum(&centralData->gps_stream_out,(uint8_t) (header.length & 0xF0)>>8,16);
8001f7b6:	ec f8 00 00 	ld.w	r8,r6[0]
8001f7ba:	70 08       	ld.w	r8,r8[0x0]
8001f7bc:	f0 c8 f5 10 	sub	r8,r8,-2800
8001f7c0:	31 0a       	mov	r10,16
8001f7c2:	30 0b       	mov	r11,0
8001f7c4:	10 9c       	mov	r12,r8
8001f7c6:	f0 16 00 26 	mcall	r6[152]
	
}
8001f7ca:	2f bd       	sub	sp,-20
8001f7cc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f7d0:	80 01       	ld.sh	r1,r0[0x0]
8001f7d2:	f5 7c eb cd 	stcond	r10[-5171],r12

8001f7d4 <ubx_send_cksum>:
************************************************************************************
To send the checksum of every message
************************************************************************************
*/
void ubx_send_cksum(uint8_t ck_sum_a, uint8_t ck_sum_b)
{
8001f7d4:	eb cd 40 c0 	pushm	r6-r7,lr
8001f7d8:	1a 97       	mov	r7,sp
8001f7da:	20 2d       	sub	sp,8
8001f7dc:	49 26       	lddpc	r6,8001f824 <ubx_send_cksum+0x50>
8001f7de:	1e 26       	rsub	r6,pc
8001f7e0:	18 99       	mov	r9,r12
8001f7e2:	16 98       	mov	r8,r11
8001f7e4:	ef 69 ff fc 	st.b	r7[-4],r9
8001f7e8:	ef 68 ff f8 	st.b	r7[-8],r8
	//centralData->gps_stream_out.put(centralData->gps_stream_out.data,ck_sum_a);
	//centralData->gps_stream_out.put(centralData->gps_stream_out.data,ck_sum_b);
	
	putnum(&centralData->gps_stream_out,ck_sum_a,16);
8001f7ec:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8001f7f0:	ec f8 00 00 	ld.w	r8,r6[0]
8001f7f4:	70 08       	ld.w	r8,r8[0x0]
8001f7f6:	f0 c8 f5 10 	sub	r8,r8,-2800
8001f7fa:	31 0a       	mov	r10,16
8001f7fc:	12 9b       	mov	r11,r9
8001f7fe:	10 9c       	mov	r12,r8
8001f800:	f0 16 00 26 	mcall	r6[152]
	putnum(&centralData->gps_stream_out,ck_sum_b,16);
8001f804:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8001f808:	ec f8 00 00 	ld.w	r8,r6[0]
8001f80c:	70 08       	ld.w	r8,r8[0x0]
8001f80e:	f0 c8 f5 10 	sub	r8,r8,-2800
8001f812:	31 0a       	mov	r10,16
8001f814:	12 9b       	mov	r11,r9
8001f816:	10 9c       	mov	r12,r8
8001f818:	f0 16 00 26 	mcall	r6[152]
}
8001f81c:	2f ed       	sub	sp,-8
8001f81e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f822:	00 00       	add	r0,r0
8001f824:	80 01       	ld.sh	r1,r0[0x0]
8001f826:	f6 62 eb cd 	mov	r2,-594995

8001f828 <ubx_send_message>:
NOT USED ANYMORE
To send a message to the GPS
************************************************************************************
*/
void ubx_send_message(uint8_t msg_class, uint8_t _msg_id, void *msg, uint8_t size)
{
8001f828:	eb cd 40 c0 	pushm	r6-r7,lr
8001f82c:	1a 97       	mov	r7,sp
8001f82e:	20 6d       	sub	sp,24
8001f830:	4b 56       	lddpc	r6,8001f904 <ubx_send_message+0xdc>
8001f832:	1e 26       	rsub	r6,pc
8001f834:	ef 4a ff ec 	st.w	r7[-20],r10
8001f838:	12 98       	mov	r8,r9
8001f83a:	18 99       	mov	r9,r12
8001f83c:	ef 69 ff f4 	st.b	r7[-12],r9
8001f840:	16 99       	mov	r9,r11
8001f842:	ef 69 ff f0 	st.b	r7[-16],r9
8001f846:	ef 68 ff e8 	st.b	r7[-24],r8
	ubx_header header;
	uint8_t ck_a=0, ck_b=0;
8001f84a:	30 08       	mov	r8,0
8001f84c:	ef 68 ff f9 	st.b	r7[-7],r8
8001f850:	30 08       	mov	r8,0
8001f852:	ef 68 ff f8 	st.b	r7[-8],r8
	header.preamble1 = UBX_PREAMBLE1;
8001f856:	3b 58       	mov	r8,-75
8001f858:	ef 68 ff ff 	st.b	r7[-1],r8
	header.preamble2 = UBX_PREAMBLE2;
8001f85c:	36 28       	mov	r8,98
8001f85e:	ef 68 ff fe 	st.b	r7[-2],r8
	header.msg_class = msg_class;
8001f862:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8001f866:	ef 68 ff fd 	st.b	r7[-3],r8
	header.msg_id_header    = _msg_id;
8001f86a:	ef 38 ff f0 	ld.ub	r8,r7[-16]
8001f86e:	ef 68 ff fc 	st.b	r7[-4],r8
	header.length    = size;
8001f872:	ef 38 ff e8 	ld.ub	r8,r7[-24]
8001f876:	ef 58 ff fa 	st.h	r7[-6],r8
	
	update_checksum((uint8_t *)&header.msg_class, sizeof(header)-2, &ck_a, &ck_b);
8001f87a:	ee c9 00 08 	sub	r9,r7,8
8001f87e:	ee ca 00 07 	sub	r10,r7,7
8001f882:	ee c8 00 06 	sub	r8,r7,6
8001f886:	2f d8       	sub	r8,-3
8001f888:	30 4b       	mov	r11,4
8001f88a:	10 9c       	mov	r12,r8
8001f88c:	f0 16 00 33 	mcall	r6[204]
	update_checksum((uint8_t *)msg, size, &ck_a, &ck_b);
8001f890:	ef 3b ff e8 	ld.ub	r11,r7[-24]
8001f894:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001f898:	ee c9 00 08 	sub	r9,r7,8
8001f89c:	ee ca 00 07 	sub	r10,r7,7
8001f8a0:	10 9c       	mov	r12,r8
8001f8a2:	f0 16 00 33 	mcall	r6[204]
	
 	putstring(&(centralData->gps_stream_out),&header);
8001f8a6:	ee c9 00 06 	sub	r9,r7,6
8001f8aa:	ec f8 00 00 	ld.w	r8,r6[0]
8001f8ae:	70 08       	ld.w	r8,r8[0x0]
8001f8b0:	f0 c8 f5 10 	sub	r8,r8,-2800
8001f8b4:	12 9b       	mov	r11,r9
8001f8b6:	10 9c       	mov	r12,r8
8001f8b8:	f0 16 00 32 	mcall	r6[200]
 	putstring(&(centralData->gps_stream_out),(uint8_t *)msg);
8001f8bc:	ee f9 ff ec 	ld.w	r9,r7[-20]
8001f8c0:	ec f8 00 00 	ld.w	r8,r6[0]
8001f8c4:	70 08       	ld.w	r8,r8[0x0]
8001f8c6:	f0 c8 f5 10 	sub	r8,r8,-2800
8001f8ca:	12 9b       	mov	r11,r9
8001f8cc:	10 9c       	mov	r12,r8
8001f8ce:	f0 16 00 32 	mcall	r6[200]
 	putstring(&(centralData->gps_stream_out),&ck_a);
8001f8d2:	ec f8 00 00 	ld.w	r8,r6[0]
8001f8d6:	70 08       	ld.w	r8,r8[0x0]
8001f8d8:	f0 c8 f5 10 	sub	r8,r8,-2800
8001f8dc:	ee c9 00 07 	sub	r9,r7,7
8001f8e0:	12 9b       	mov	r11,r9
8001f8e2:	10 9c       	mov	r12,r8
8001f8e4:	f0 16 00 32 	mcall	r6[200]
 	putstring(&(centralData->gps_stream_out),&ck_b);
8001f8e8:	ec f8 00 00 	ld.w	r8,r6[0]
8001f8ec:	70 08       	ld.w	r8,r8[0x0]
8001f8ee:	f0 c8 f5 10 	sub	r8,r8,-2800
8001f8f2:	ee c9 00 08 	sub	r9,r7,8
8001f8f6:	12 9b       	mov	r11,r9
8001f8f8:	10 9c       	mov	r12,r8
8001f8fa:	f0 16 00 32 	mcall	r6[200]
	
	//centralData->gps_stream_out.flush(&(centralData->gps_stream_out.data));
}
8001f8fe:	2f ad       	sub	sp,-24
8001f900:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f904:	80 01       	ld.sh	r1,r0[0x0]
8001f906:	f6 b6       	*unknown*

8001f908 <ubx_send_message_CFG_nav_rate>:
Class:		0x06	UBX_CLASS_CFG
Msg_id:		0x08	MSG_CFG_RATE
************************************************************************************
*/
void ubx_send_message_CFG_nav_rate(uint8_t msg_class, uint8_t _msg_id, ubx_cfg_nav_rate_send msg, uint8_t size)
{
8001f908:	eb cd 40 e0 	pushm	r5-r7,lr
8001f90c:	1a 97       	mov	r7,sp
8001f90e:	20 4d       	sub	sp,16
8001f910:	4d d6       	lddpc	r6,8001fa84 <ubx_send_message_CFG_nav_rate+0x17c>
8001f912:	1e 26       	rsub	r6,pc
8001f914:	ee c5 ff f0 	sub	r5,r7,-16
8001f918:	16 99       	mov	r9,r11
8001f91a:	14 98       	mov	r8,r10
8001f91c:	18 9a       	mov	r10,r12
8001f91e:	ef 6a ff f8 	st.b	r7[-8],r10
8001f922:	ef 69 ff f4 	st.b	r7[-12],r9
8001f926:	ef 68 ff f0 	st.b	r7[-16],r8
	uint8_t ck_a=0, ck_b=0;
8001f92a:	30 08       	mov	r8,0
8001f92c:	ef 68 ff ff 	st.b	r7[-1],r8
8001f930:	30 08       	mov	r8,0
8001f932:	ef 68 ff fe 	st.b	r7[-2],r8
	
	update_checksum((uint8_t *)&msg_class, 1, &ck_a, &ck_b);
8001f936:	ee c9 00 02 	sub	r9,r7,2
8001f93a:	ee ca 00 01 	sub	r10,r7,1
8001f93e:	ee c8 00 08 	sub	r8,r7,8
8001f942:	30 1b       	mov	r11,1
8001f944:	10 9c       	mov	r12,r8
8001f946:	f0 16 00 33 	mcall	r6[204]
	update_checksum((uint8_t *)&_msg_id, 1, &ck_a, &ck_b);
8001f94a:	ee c9 00 02 	sub	r9,r7,2
8001f94e:	ee ca 00 01 	sub	r10,r7,1
8001f952:	ee c8 00 0c 	sub	r8,r7,12
8001f956:	30 1b       	mov	r11,1
8001f958:	10 9c       	mov	r12,r8
8001f95a:	f0 16 00 33 	mcall	r6[204]
	update_checksum((uint8_t *)&size, 1, &ck_a, &ck_b);
8001f95e:	ee c9 00 02 	sub	r9,r7,2
8001f962:	ee ca 00 01 	sub	r10,r7,1
8001f966:	ee c8 00 10 	sub	r8,r7,16
8001f96a:	30 1b       	mov	r11,1
8001f96c:	10 9c       	mov	r12,r8
8001f96e:	f0 16 00 33 	mcall	r6[204]

	//update_checksum((uint8_t *)&header.msg_class, sizeof(header)-2, &ck_a, &ck_b);
	update_checksum((uint8_t *)&msg, size, &ck_a, &ck_b);
8001f972:	ef 38 ff f0 	ld.ub	r8,r7[-16]
8001f976:	10 9b       	mov	r11,r8
8001f978:	0a 98       	mov	r8,r5
8001f97a:	ee c9 00 02 	sub	r9,r7,2
8001f97e:	ee ca 00 01 	sub	r10,r7,1
8001f982:	10 9c       	mov	r12,r8
8001f984:	f0 16 00 33 	mcall	r6[204]
	
	ubx_send_header(msg_class,_msg_id,size);
8001f988:	ef 38 ff f0 	ld.ub	r8,r7[-16]
8001f98c:	10 9a       	mov	r10,r8
8001f98e:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8001f992:	10 99       	mov	r9,r8
8001f994:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8001f998:	12 9b       	mov	r11,r9
8001f99a:	10 9c       	mov	r12,r8
8001f99c:	f0 16 00 b4 	mcall	r6[720]
	//centralData->gps_stream_out.put(centralData->gps_stream_out.data, endian_lower_bytes_uint16(msg.nav_rate));
	//centralData->gps_stream_out.put(centralData->gps_stream_out.data, endian_higher_bytes_uint16(msg.nav_rate));
	//centralData->gps_stream_out.put(centralData->gps_stream_out.data, endian_lower_bytes_uint16(msg.timeref));
	//centralData->gps_stream_out.put(centralData->gps_stream_out.data, endian_higher_bytes_uint16(msg.timeref));	
	
	putnum(&centralData->gps_stream_out, endian_lower_bytes_uint16(msg.measure_rate_ms),16);
8001f9a0:	8a 08       	ld.sh	r8,r5[0x0]
8001f9a2:	5c 78       	castu.h	r8
8001f9a4:	10 9c       	mov	r12,r8
8001f9a6:	f0 16 00 a1 	mcall	r6[644]
8001f9aa:	18 98       	mov	r8,r12
8001f9ac:	10 99       	mov	r9,r8
8001f9ae:	ec f8 00 00 	ld.w	r8,r6[0]
8001f9b2:	70 08       	ld.w	r8,r8[0x0]
8001f9b4:	f0 c8 f5 10 	sub	r8,r8,-2800
8001f9b8:	31 0a       	mov	r10,16
8001f9ba:	12 9b       	mov	r11,r9
8001f9bc:	10 9c       	mov	r12,r8
8001f9be:	f0 16 00 26 	mcall	r6[152]
	putnum(&centralData->gps_stream_out, endian_higher_bytes_uint16(msg.measure_rate_ms),16);
8001f9c2:	8a 08       	ld.sh	r8,r5[0x0]
8001f9c4:	5c 78       	castu.h	r8
8001f9c6:	10 9c       	mov	r12,r8
8001f9c8:	f0 16 00 a8 	mcall	r6[672]
8001f9cc:	18 98       	mov	r8,r12
8001f9ce:	10 99       	mov	r9,r8
8001f9d0:	ec f8 00 00 	ld.w	r8,r6[0]
8001f9d4:	70 08       	ld.w	r8,r8[0x0]
8001f9d6:	f0 c8 f5 10 	sub	r8,r8,-2800
8001f9da:	31 0a       	mov	r10,16
8001f9dc:	12 9b       	mov	r11,r9
8001f9de:	10 9c       	mov	r12,r8
8001f9e0:	f0 16 00 26 	mcall	r6[152]
	putnum(&centralData->gps_stream_out, endian_lower_bytes_uint16(msg.nav_rate),16);
8001f9e4:	8a 18       	ld.sh	r8,r5[0x2]
8001f9e6:	5c 78       	castu.h	r8
8001f9e8:	10 9c       	mov	r12,r8
8001f9ea:	f0 16 00 a1 	mcall	r6[644]
8001f9ee:	18 98       	mov	r8,r12
8001f9f0:	10 99       	mov	r9,r8
8001f9f2:	ec f8 00 00 	ld.w	r8,r6[0]
8001f9f6:	70 08       	ld.w	r8,r8[0x0]
8001f9f8:	f0 c8 f5 10 	sub	r8,r8,-2800
8001f9fc:	31 0a       	mov	r10,16
8001f9fe:	12 9b       	mov	r11,r9
8001fa00:	10 9c       	mov	r12,r8
8001fa02:	f0 16 00 26 	mcall	r6[152]
	putnum(&centralData->gps_stream_out, endian_higher_bytes_uint16(msg.nav_rate),16);
8001fa06:	8a 18       	ld.sh	r8,r5[0x2]
8001fa08:	5c 78       	castu.h	r8
8001fa0a:	10 9c       	mov	r12,r8
8001fa0c:	f0 16 00 a8 	mcall	r6[672]
8001fa10:	18 98       	mov	r8,r12
8001fa12:	10 99       	mov	r9,r8
8001fa14:	ec f8 00 00 	ld.w	r8,r6[0]
8001fa18:	70 08       	ld.w	r8,r8[0x0]
8001fa1a:	f0 c8 f5 10 	sub	r8,r8,-2800
8001fa1e:	31 0a       	mov	r10,16
8001fa20:	12 9b       	mov	r11,r9
8001fa22:	10 9c       	mov	r12,r8
8001fa24:	f0 16 00 26 	mcall	r6[152]
	putnum(&centralData->gps_stream_out, endian_lower_bytes_uint16(msg.timeref),16);
8001fa28:	8a 28       	ld.sh	r8,r5[0x4]
8001fa2a:	5c 78       	castu.h	r8
8001fa2c:	10 9c       	mov	r12,r8
8001fa2e:	f0 16 00 a1 	mcall	r6[644]
8001fa32:	18 98       	mov	r8,r12
8001fa34:	10 99       	mov	r9,r8
8001fa36:	ec f8 00 00 	ld.w	r8,r6[0]
8001fa3a:	70 08       	ld.w	r8,r8[0x0]
8001fa3c:	f0 c8 f5 10 	sub	r8,r8,-2800
8001fa40:	31 0a       	mov	r10,16
8001fa42:	12 9b       	mov	r11,r9
8001fa44:	10 9c       	mov	r12,r8
8001fa46:	f0 16 00 26 	mcall	r6[152]
	putnum(&centralData->gps_stream_out, endian_higher_bytes_uint16(msg.timeref),16);
8001fa4a:	8a 28       	ld.sh	r8,r5[0x4]
8001fa4c:	5c 78       	castu.h	r8
8001fa4e:	10 9c       	mov	r12,r8
8001fa50:	f0 16 00 a8 	mcall	r6[672]
8001fa54:	18 98       	mov	r8,r12
8001fa56:	10 99       	mov	r9,r8
8001fa58:	ec f8 00 00 	ld.w	r8,r6[0]
8001fa5c:	70 08       	ld.w	r8,r8[0x0]
8001fa5e:	f0 c8 f5 10 	sub	r8,r8,-2800
8001fa62:	31 0a       	mov	r10,16
8001fa64:	12 9b       	mov	r11,r9
8001fa66:	10 9c       	mov	r12,r8
8001fa68:	f0 16 00 26 	mcall	r6[152]
	
	ubx_send_cksum(ck_a,ck_b);
8001fa6c:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8001fa70:	10 99       	mov	r9,r8
8001fa72:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8001fa76:	12 9b       	mov	r11,r9
8001fa78:	10 9c       	mov	r12,r8
8001fa7a:	f0 16 00 b2 	mcall	r6[712]
	
	//centralData->gps_stream_out.flush(&(centralData->gps_stream_out.data));
}
8001fa7e:	2f cd       	sub	sp,-16
8001fa80:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8001fa84:	80 01       	ld.sh	r1,r0[0x0]
8001fa86:	f7 96       	*unknown*

8001fa88 <ubx_send_message_nav_settings>:
Class:		0x06	UBX_CLASS_CFG
Msg_id :	0x24	MSG_CFG_NAV_SETTINGS
************************************************************************************
*/
void ubx_send_message_nav_settings(uint8_t msg_class, uint8_t _msg_id, enum GPS_Engine_Setting *engine_settings, uint8_t size)
{
8001fa88:	eb cd 40 c0 	pushm	r6-r7,lr
8001fa8c:	1a 97       	mov	r7,sp
8001fa8e:	20 5d       	sub	sp,20
8001fa90:	4b 46       	lddpc	r6,8001fb60 <ubx_send_message_nav_settings+0xd8>
8001fa92:	1e 26       	rsub	r6,pc
8001fa94:	ef 4a ff f0 	st.w	r7[-16],r10
8001fa98:	12 98       	mov	r8,r9
8001fa9a:	18 99       	mov	r9,r12
8001fa9c:	ef 69 ff f8 	st.b	r7[-8],r9
8001faa0:	16 99       	mov	r9,r11
8001faa2:	ef 69 ff f4 	st.b	r7[-12],r9
8001faa6:	ef 68 ff ec 	st.b	r7[-20],r8
	uint8_t ck_a=0, ck_b=0;
8001faaa:	30 08       	mov	r8,0
8001faac:	ef 68 ff ff 	st.b	r7[-1],r8
8001fab0:	30 08       	mov	r8,0
8001fab2:	ef 68 ff fe 	st.b	r7[-2],r8
	
	update_checksum((uint8_t *)&msg_class, 1, &ck_a, &ck_b);
8001fab6:	ee c9 00 02 	sub	r9,r7,2
8001faba:	ee ca 00 01 	sub	r10,r7,1
8001fabe:	ee c8 00 08 	sub	r8,r7,8
8001fac2:	30 1b       	mov	r11,1
8001fac4:	10 9c       	mov	r12,r8
8001fac6:	f0 16 00 33 	mcall	r6[204]
	update_checksum((uint8_t *)&_msg_id, 1, &ck_a, &ck_b);
8001faca:	ee c9 00 02 	sub	r9,r7,2
8001face:	ee ca 00 01 	sub	r10,r7,1
8001fad2:	ee c8 00 0c 	sub	r8,r7,12
8001fad6:	30 1b       	mov	r11,1
8001fad8:	10 9c       	mov	r12,r8
8001fada:	f0 16 00 33 	mcall	r6[204]
	update_checksum((uint8_t *)&size, 1, &ck_a, &ck_b);
8001fade:	ee c9 00 02 	sub	r9,r7,2
8001fae2:	ee ca 00 01 	sub	r10,r7,1
8001fae6:	ee c8 00 14 	sub	r8,r7,20
8001faea:	30 1b       	mov	r11,1
8001faec:	10 9c       	mov	r12,r8
8001faee:	f0 16 00 33 	mcall	r6[204]

	//update_checksum((uint8_t *)&header.msg_class, sizeof(header)-2, &ck_a, &ck_b);
	
	
	ubx_send_header(msg_class,_msg_id,size);
8001faf2:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8001faf6:	10 9a       	mov	r10,r8
8001faf8:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8001fafc:	10 99       	mov	r9,r8
8001fafe:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8001fb02:	12 9b       	mov	r11,r9
8001fb04:	10 9c       	mov	r12,r8
8001fb06:	f0 16 00 b4 	mcall	r6[720]
	
	if (engine_settings != NULL)
8001fb0a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001fb0e:	58 08       	cp.w	r8,0
8001fb10:	c1 c0       	breq	8001fb48 <ubx_send_message_nav_settings+0xc0>
	{
		update_checksum((uint8_t *)engine_settings, size, &ck_a, &ck_b);
8001fb12:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8001fb16:	10 9b       	mov	r11,r8
8001fb18:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001fb1c:	ee c9 00 02 	sub	r9,r7,2
8001fb20:	ee ca 00 01 	sub	r10,r7,1
8001fb24:	10 9c       	mov	r12,r8
8001fb26:	f0 16 00 33 	mcall	r6[204]
		//centralData->gps_stream_out.put(centralData->gps_stream_out.data, (uint8_t) *engine_settings);
		putnum(&centralData->gps_stream_out, (uint8_t) *engine_settings,10);
8001fb2a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001fb2e:	70 08       	ld.w	r8,r8[0x0]
8001fb30:	5c 58       	castu.b	r8
8001fb32:	10 99       	mov	r9,r8
8001fb34:	ec f8 00 00 	ld.w	r8,r6[0]
8001fb38:	70 08       	ld.w	r8,r8[0x0]
8001fb3a:	f0 c8 f5 10 	sub	r8,r8,-2800
8001fb3e:	30 aa       	mov	r10,10
8001fb40:	12 9b       	mov	r11,r9
8001fb42:	10 9c       	mov	r12,r8
8001fb44:	f0 16 00 26 	mcall	r6[152]
	}
	
	ubx_send_cksum(ck_a,ck_b);
8001fb48:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8001fb4c:	10 99       	mov	r9,r8
8001fb4e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8001fb52:	12 9b       	mov	r11,r9
8001fb54:	10 9c       	mov	r12,r8
8001fb56:	f0 16 00 b2 	mcall	r6[712]
	
	//centralData->gps_stream_out.flush(&(centralData->gps_stream_out.data));
}
8001fb5a:	2f bd       	sub	sp,-20
8001fb5c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001fb60:	80 01       	ld.sh	r1,r0[0x0]
8001fb62:	f9 16 eb cd 	ld.uh	r6,r12[-5171]

8001fb64 <ubx_configure_message_rate>:
Class:		0x06	UBX_CLASS_CFG
Msg_id :	0x01	MSG_CFG_SET_RATE
************************************************************************************
*/
void ubx_configure_message_rate(uint8_t msg_class, uint8_t _msg_id, uint8_t rate)
{
8001fb64:	eb cd 40 c0 	pushm	r6-r7,lr
8001fb68:	1a 97       	mov	r7,sp
8001fb6a:	20 5d       	sub	sp,20
8001fb6c:	4c 16       	lddpc	r6,8001fc70 <ubx_configure_message_rate+0x10c>
8001fb6e:	1e 26       	rsub	r6,pc
8001fb70:	16 99       	mov	r9,r11
8001fb72:	14 98       	mov	r8,r10
8001fb74:	18 9a       	mov	r10,r12
8001fb76:	ef 6a ff f4 	st.b	r7[-12],r10
8001fb7a:	ef 69 ff f0 	st.b	r7[-16],r9
8001fb7e:	ef 68 ff ec 	st.b	r7[-20],r8
	uint8_t ck_a=0, ck_b=0;
8001fb82:	30 08       	mov	r8,0
8001fb84:	ef 68 ff ff 	st.b	r7[-1],r8
8001fb88:	30 08       	mov	r8,0
8001fb8a:	ef 68 ff fe 	st.b	r7[-2],r8
	ubx_cfg_msg_rate_send msg;
	msg.msg_class = msg_class;
8001fb8e:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8001fb92:	ef 68 ff fb 	st.b	r7[-5],r8
	msg.msg_id_rate    = _msg_id;
8001fb96:	ef 38 ff f0 	ld.ub	r8,r7[-16]
8001fb9a:	ef 68 ff fc 	st.b	r7[-4],r8
	msg.rate          = rate;
8001fb9e:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8001fba2:	ef 68 ff fd 	st.b	r7[-3],r8
	
	uint8_t size = sizeof(msg);
8001fba6:	30 38       	mov	r8,3
8001fba8:	ef 68 ff fa 	st.b	r7[-6],r8
	
	update_checksum((uint8_t *)&msg_class, 1, &ck_a, &ck_b);
8001fbac:	ee c9 00 02 	sub	r9,r7,2
8001fbb0:	ee ca 00 01 	sub	r10,r7,1
8001fbb4:	ee c8 00 0c 	sub	r8,r7,12
8001fbb8:	30 1b       	mov	r11,1
8001fbba:	10 9c       	mov	r12,r8
8001fbbc:	f0 16 00 33 	mcall	r6[204]
	update_checksum((uint8_t *)&_msg_id, 1, &ck_a, &ck_b);
8001fbc0:	ee c9 00 02 	sub	r9,r7,2
8001fbc4:	ee ca 00 01 	sub	r10,r7,1
8001fbc8:	ee c8 00 10 	sub	r8,r7,16
8001fbcc:	30 1b       	mov	r11,1
8001fbce:	10 9c       	mov	r12,r8
8001fbd0:	f0 16 00 33 	mcall	r6[204]
	update_checksum((uint8_t *)&size, 1, &ck_a, &ck_b);
8001fbd4:	ee c9 00 02 	sub	r9,r7,2
8001fbd8:	ee ca 00 01 	sub	r10,r7,1
8001fbdc:	ee c8 00 06 	sub	r8,r7,6
8001fbe0:	30 1b       	mov	r11,1
8001fbe2:	10 9c       	mov	r12,r8
8001fbe4:	f0 16 00 33 	mcall	r6[204]

	//update_checksum((uint8_t *)&header.msg_class, sizeof(header)-2, &ck_a, &ck_b);
	update_checksum((uint8_t *)&msg, size, &ck_a, &ck_b);
8001fbe8:	ef 38 ff fa 	ld.ub	r8,r7[-6]
8001fbec:	10 9b       	mov	r11,r8
8001fbee:	ee c9 00 02 	sub	r9,r7,2
8001fbf2:	ee ca 00 01 	sub	r10,r7,1
8001fbf6:	ee c8 00 05 	sub	r8,r7,5
8001fbfa:	10 9c       	mov	r12,r8
8001fbfc:	f0 16 00 33 	mcall	r6[204]
	
	ubx_send_header(UBX_CLASS_CFG,MSG_CFG_SET_RATE,sizeof(msg));
8001fc00:	30 3a       	mov	r10,3
8001fc02:	30 1b       	mov	r11,1
8001fc04:	30 6c       	mov	r12,6
8001fc06:	f0 16 00 b4 	mcall	r6[720]
	
	//centralData->gps_stream_out.put(centralData->gps_stream_out.data,msg.msg_class);
	//centralData->gps_stream_out.put(centralData->gps_stream_out.data,msg.msg_id_rate);
	//centralData->gps_stream_out.put(centralData->gps_stream_out.data,msg.rate);
	
	putnum(&centralData->gps_stream_out,msg.msg_class,16);
8001fc0a:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8001fc0e:	10 99       	mov	r9,r8
8001fc10:	ec f8 00 00 	ld.w	r8,r6[0]
8001fc14:	70 08       	ld.w	r8,r8[0x0]
8001fc16:	f0 c8 f5 10 	sub	r8,r8,-2800
8001fc1a:	31 0a       	mov	r10,16
8001fc1c:	12 9b       	mov	r11,r9
8001fc1e:	10 9c       	mov	r12,r8
8001fc20:	f0 16 00 26 	mcall	r6[152]
	putnum(&centralData->gps_stream_out,msg.msg_id_rate,16);
8001fc24:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8001fc28:	10 99       	mov	r9,r8
8001fc2a:	ec f8 00 00 	ld.w	r8,r6[0]
8001fc2e:	70 08       	ld.w	r8,r8[0x0]
8001fc30:	f0 c8 f5 10 	sub	r8,r8,-2800
8001fc34:	31 0a       	mov	r10,16
8001fc36:	12 9b       	mov	r11,r9
8001fc38:	10 9c       	mov	r12,r8
8001fc3a:	f0 16 00 26 	mcall	r6[152]
	putnum(&centralData->gps_stream_out,msg.rate,16);
8001fc3e:	ef 38 ff fd 	ld.ub	r8,r7[-3]
8001fc42:	10 99       	mov	r9,r8
8001fc44:	ec f8 00 00 	ld.w	r8,r6[0]
8001fc48:	70 08       	ld.w	r8,r8[0x0]
8001fc4a:	f0 c8 f5 10 	sub	r8,r8,-2800
8001fc4e:	31 0a       	mov	r10,16
8001fc50:	12 9b       	mov	r11,r9
8001fc52:	10 9c       	mov	r12,r8
8001fc54:	f0 16 00 26 	mcall	r6[152]
	
	ubx_send_cksum(ck_a,ck_b);
8001fc58:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8001fc5c:	10 99       	mov	r9,r8
8001fc5e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8001fc62:	12 9b       	mov	r11,r9
8001fc64:	10 9c       	mov	r12,r8
8001fc66:	f0 16 00 b2 	mcall	r6[712]
	//ubx_send_message(UBX_CLASS_CFG, MSG_CFG_SET_RATE, &msg, sizeof(msg));
	
	//centralData->gps_stream_out.flush(centralData->gps_stream_out.data);
}
8001fc6a:	2f bd       	sub	sp,-20
8001fc6c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001fc70:	80 01       	ld.sh	r1,r0[0x0]
8001fc72:	f9 f2 24 50 	ld.uhcc	r2,r12[0xa0]
8001fc76:	55 42       	stdsp	sp[0x150],r2
8001fc78:	58 2c       	cp.w	r12,2
8001fc7a:	34 31       	mov	r1,67
8001fc7c:	2c 31       	sub	r1,-61
8001fc7e:	2c 30       	sub	r0,-61
8001fc80:	30 30       	mov	r0,3
8001fc82:	33 2c       	mov	r12,50
8001fc84:	30 30       	mov	r0,3
8001fc86:	30 31       	mov	r1,3
8001fc88:	2c 33       	sub	r3,-61
8001fc8a:	38 34       	mov	r4,-125
8001fc8c:	30 30       	mov	r0,3
8001fc8e:	2c 30       	sub	r0,-61
8001fc90:	2a 32       	sub	r2,-93
8001fc92:	35 0d       	mov	sp,80
8001fc94:	0a 00       	add	r0,r5

8001fc96 <configure_gps>:
To configure the GPS in binary mode and the Navigation messages we want
The GPS and UART channel should already be configured in the good baudrate 38400U
************************************************************************************
*/
void configure_gps(void)
{
8001fc96:	eb cd 40 c0 	pushm	r6-r7,lr
8001fc9a:	1a 97       	mov	r7,sp
8001fc9c:	20 3d       	sub	sp,12
8001fc9e:	4a 66       	lddpc	r6,8001fd34 <configure_gps+0x9e>
8001fca0:	1e 26       	rsub	r6,pc
	ubx_cfg_nav_rate_send msg;
	const unsigned baudrates[4] = {9600U, 19200U, 38400U, 57600U};

	const char *set_binary = UBLOX_SET_BINARY;
8001fca2:	fe c8 00 2e 	sub	r8,pc,46
8001fca6:	ef 48 ff fc 	st.w	r7[-4],r8
// 	for (uint8_t i=0; i<4; i++)
// 	{
	
	//dbg_print("Set to binary mode ");
	//dbg_print(set_binary);
	putstring(&(centralData->gps_stream_out),set_binary);
8001fcaa:	ec f8 00 00 	ld.w	r8,r6[0]
8001fcae:	70 08       	ld.w	r8,r8[0x0]
8001fcb0:	f0 c8 f5 10 	sub	r8,r8,-2800
8001fcb4:	ee fb ff fc 	ld.w	r11,r7[-4]
8001fcb8:	10 9c       	mov	r12,r8
8001fcba:	f0 16 00 32 	mcall	r6[200]
	
	
	//_port->begin(38400U);

	// ask for navigation solutions every 200ms
	msg.measure_rate_ms = 200;		// ms
8001fcbe:	e0 68 00 c8 	mov	r8,200
8001fcc2:	ef 58 ff f6 	st.h	r7[-10],r8
	msg.nav_rate        = 1;		// constant equal to 1
8001fcc6:	30 18       	mov	r8,1
8001fcc8:	ef 58 ff f8 	st.h	r7[-8],r8
	msg.timeref         = 0;		// 0:UTC time, 1:GPS time
8001fccc:	30 08       	mov	r8,0
8001fcce:	ef 58 ff fa 	st.h	r7[-6],r8
	
	ubx_send_message_CFG_nav_rate(UBX_CLASS_CFG, MSG_CFG_RATE, msg, sizeof(msg));
8001fcd2:	20 2d       	sub	sp,8
8001fcd4:	1a 98       	mov	r8,sp
8001fcd6:	ee c9 00 0a 	sub	r9,r7,10
8001fcda:	30 6a       	mov	r10,6
8001fcdc:	12 9b       	mov	r11,r9
8001fcde:	10 9c       	mov	r12,r8
8001fce0:	f0 16 00 20 	mcall	r6[128]
8001fce4:	30 6a       	mov	r10,6
8001fce6:	30 8b       	mov	r11,8
8001fce8:	30 6c       	mov	r12,6
8001fcea:	f0 16 01 8f 	mcall	r6[1596]
8001fcee:	2f ed       	sub	sp,-8

	// ask for the messages we parse to be sent on every navigation solution
	//dbg_print("Set navigation messages\n");
	ubx_configure_message_rate(UBX_CLASS_NAV, MSG_NAV_POSLLH, 1);
8001fcf0:	30 1a       	mov	r10,1
8001fcf2:	30 2b       	mov	r11,2
8001fcf4:	30 1c       	mov	r12,1
8001fcf6:	f0 16 00 56 	mcall	r6[344]
	ubx_configure_message_rate(UBX_CLASS_NAV, MSG_NAV_STATUS, 1);
8001fcfa:	30 1a       	mov	r10,1
8001fcfc:	30 3b       	mov	r11,3
8001fcfe:	30 1c       	mov	r12,1
8001fd00:	f0 16 00 56 	mcall	r6[344]
	ubx_configure_message_rate(UBX_CLASS_NAV, MSG_NAV_SOL, 1);
8001fd04:	30 1a       	mov	r10,1
8001fd06:	30 6b       	mov	r11,6
8001fd08:	30 1c       	mov	r12,1
8001fd0a:	f0 16 00 56 	mcall	r6[344]
	ubx_configure_message_rate(UBX_CLASS_NAV, MSG_NAV_VELNED, 1);
8001fd0e:	30 1a       	mov	r10,1
8001fd10:	31 2b       	mov	r11,18
8001fd12:	30 1c       	mov	r12,1
8001fd14:	f0 16 00 56 	mcall	r6[344]
	ubx_configure_message_rate(UBX_CLASS_NAV, MSG_NAV_SVINFO, 1);
8001fd18:	30 1a       	mov	r10,1
8001fd1a:	33 0b       	mov	r11,48
8001fd1c:	30 1c       	mov	r12,1
8001fd1e:	f0 16 00 56 	mcall	r6[344]

	// ask for the current navigation settings
	//Debug("Asking for engine setting\n");
	//dbg_print("Asking for engine setting\n");
	ubx_send_message_nav_settings(UBX_CLASS_CFG, MSG_CFG_NAV_SETTINGS, NULL, 0);
8001fd22:	30 09       	mov	r9,0
8001fd24:	30 0a       	mov	r10,0
8001fd26:	32 4b       	mov	r11,36
8001fd28:	30 6c       	mov	r12,6
8001fd2a:	f0 16 00 f2 	mcall	r6[968]
}
8001fd2e:	2f dd       	sub	sp,-12
8001fd30:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001fd34:	80 01       	ld.sh	r1,r0[0x0]
8001fd36:	fb 24 eb cd 	ld.sb	r4,sp[-5171]

8001fd38 <gps_update>:
************************************************************************************
The function that needs to be called to get the GPS information
************************************************************************************
*/
void gps_update(void)
{
8001fd38:	eb cd 40 c0 	pushm	r6-r7,lr
8001fd3c:	1a 97       	mov	r7,sp
8001fd3e:	20 2d       	sub	sp,8
8001fd40:	fe f6 02 08 	ld.w	r6,pc[520]
8001fd44:	1e 26       	rsub	r6,pc
	bool result;
	uint32_t tnow;
	
	result = ubx_read();
8001fd46:	f0 16 01 96 	mcall	r6[1624]
8001fd4a:	18 98       	mov	r8,r12
8001fd4c:	ef 68 ff fb 	st.b	r7[-5],r8
	
	tnow = get_millis();
8001fd50:	f0 16 00 0f 	mcall	r6[60]
8001fd54:	18 98       	mov	r8,r12
8001fd56:	ef 48 ff fc 	st.w	r7[-4],r8
	
	if (! result)
8001fd5a:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8001fd5e:	ec 18 00 01 	eorl	r8,0x1
8001fd62:	5c 58       	castu.b	r8
8001fd64:	c1 f0       	breq	8001fda2 <gps_update+0x6a>
	{
		if ((tnow - idleTimer) > idleTimeout)
8001fd66:	ec f8 02 f4 	ld.w	r8,r6[756]
8001fd6a:	70 08       	ld.w	r8,r8[0x0]
8001fd6c:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001fd70:	10 19       	sub	r9,r8
8001fd72:	ec f8 03 fc 	ld.w	r8,r6[1020]
8001fd76:	70 08       	ld.w	r8,r8[0x0]
8001fd78:	10 39       	cp.w	r9,r8
8001fd7a:	e0 88 00 e3 	brls	8001ff40 <gps_update+0x208>
		{
			/*dbg_print("gps read timeout ");
			dbg_print_num(tnow,10);
			dbg_print("\n");
			*/
			centralData->GPS_data.status = NO_GPS;
8001fd7e:	ec f8 00 00 	ld.w	r8,r6[0]
8001fd82:	70 09       	ld.w	r9,r8[0x0]
8001fd84:	30 08       	mov	r8,0
8001fd86:	f3 68 0b 54 	st.b	r9[2900],r8
			
			init_gps_ubx(engine_nav_setting);
8001fd8a:	ec f8 01 bc 	ld.w	r8,r6[444]
8001fd8e:	70 08       	ld.w	r8,r8[0x0]
8001fd90:	10 9c       	mov	r12,r8
8001fd92:	f0 16 01 5d 	mcall	r6[1396]
			idleTimer = tnow;
8001fd96:	ec f8 02 f4 	ld.w	r8,r6[756]
8001fd9a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001fd9e:	91 09       	st.w	r8[0x0],r9
8001fda0:	cd 08       	rjmp	8001ff40 <gps_update+0x208>
		
// 		valid_read = true;
// 		new_data = true;

		// reset the idle timer
		idleTimer = tnow;
8001fda2:	ec f8 02 f4 	ld.w	r8,r6[756]
8001fda6:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001fdaa:	91 09       	st.w	r8[0x0],r9
		
		centralData->GPS_data.timeLastMsg = tnow;
8001fdac:	ec f8 00 00 	ld.w	r8,r6[0]
8001fdb0:	70 08       	ld.w	r8,r8[0x0]
8001fdb2:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001fdb6:	f1 49 0b 4c 	st.w	r8[2892],r9
		
		if(centralData->GPS_data.status == GPS_OK)
8001fdba:	ec f8 00 00 	ld.w	r8,r6[0]
8001fdbe:	70 08       	ld.w	r8,r8[0x0]
8001fdc0:	f1 39 0b 54 	ld.ub	r9,r8[2900]
8001fdc4:	30 28       	mov	r8,2
8001fdc6:	f0 09 18 00 	cp.b	r9,r8
8001fdca:	e0 81 00 9d 	brne	8001ff04 <gps_update+0x1cc>
		{
			// Check for horizontal accuracy
			if (centralData->GPS_data.horizontalAccuracy < UBX_POSITION_PRECISION)
8001fdce:	ec f8 00 00 	ld.w	r8,r6[0]
8001fdd2:	70 08       	ld.w	r8,r8[0x0]
8001fdd4:	f0 fa 0b 38 	ld.w	r10,r8[2872]
8001fdd8:	30 18       	mov	r8,1
8001fdda:	fc 19 41 a0 	movh	r9,0x41a0
8001fdde:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
8001fde2:	e0 8c 00 03 	brvs	8001fde8 <gps_update+0xb0>
8001fde6:	c0 25       	brlt	8001fdea <gps_update+0xb2>
8001fde8:	30 08       	mov	r8,0
8001fdea:	5c 58       	castu.b	r8
8001fdec:	c0 80       	breq	8001fdfc <gps_update+0xc4>
			{
				centralData->GPS_data.horizontalStatus = 1;
8001fdee:	ec f8 00 00 	ld.w	r8,r6[0]
8001fdf2:	70 09       	ld.w	r9,r8[0x0]
8001fdf4:	30 18       	mov	r8,1
8001fdf6:	f3 68 0b 55 	st.b	r9[2901],r8
8001fdfa:	c0 78       	rjmp	8001fe08 <gps_update+0xd0>
			}else{  
				centralData->GPS_data.horizontalStatus = 0;
8001fdfc:	ec f8 00 00 	ld.w	r8,r6[0]
8001fe00:	70 09       	ld.w	r9,r8[0x0]
8001fe02:	30 08       	mov	r8,0
8001fe04:	f3 68 0b 55 	st.b	r9[2901],r8
			}
			// Check for vertical accuracy
			if (centralData->GPS_data.verticalAccuracy < UBX_ALTITUDE_PRECISION)
8001fe08:	ec f8 00 00 	ld.w	r8,r6[0]
8001fe0c:	70 08       	ld.w	r8,r8[0x0]
8001fe0e:	f0 fa 0b 3c 	ld.w	r10,r8[2876]
8001fe12:	30 18       	mov	r8,1
8001fe14:	fc 19 41 a0 	movh	r9,0x41a0
8001fe18:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
8001fe1c:	e0 8c 00 03 	brvs	8001fe22 <gps_update+0xea>
8001fe20:	c0 25       	brlt	8001fe24 <gps_update+0xec>
8001fe22:	30 08       	mov	r8,0
8001fe24:	5c 58       	castu.b	r8
8001fe26:	c0 80       	breq	8001fe36 <gps_update+0xfe>
			{
				centralData->GPS_data.altitudeStatus = 1;
8001fe28:	ec f8 00 00 	ld.w	r8,r6[0]
8001fe2c:	70 09       	ld.w	r9,r8[0x0]
8001fe2e:	30 18       	mov	r8,1
8001fe30:	f3 68 0b 56 	st.b	r9[2902],r8
8001fe34:	c0 78       	rjmp	8001fe42 <gps_update+0x10a>
			}else{
				centralData->GPS_data.altitudeStatus = 0;
8001fe36:	ec f8 00 00 	ld.w	r8,r6[0]
8001fe3a:	70 09       	ld.w	r9,r8[0x0]
8001fe3c:	30 08       	mov	r8,0
8001fe3e:	f3 68 0b 56 	st.b	r9[2902],r8
			}
			// Check for speed accuracy
			if (centralData->GPS_data.speedAccuracy < UBX_SPEED_PRECISION)
8001fe42:	ec f8 00 00 	ld.w	r8,r6[0]
8001fe46:	70 08       	ld.w	r8,r8[0x0]
8001fe48:	f0 fa 0b 40 	ld.w	r10,r8[2880]
8001fe4c:	30 18       	mov	r8,1
8001fe4e:	fc 19 40 a0 	movh	r9,0x40a0
8001fe52:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
8001fe56:	e0 8c 00 03 	brvs	8001fe5c <gps_update+0x124>
8001fe5a:	c0 25       	brlt	8001fe5e <gps_update+0x126>
8001fe5c:	30 08       	mov	r8,0
8001fe5e:	5c 58       	castu.b	r8
8001fe60:	c0 80       	breq	8001fe70 <gps_update+0x138>
			{
				centralData->GPS_data.speedStatus = 1;
8001fe62:	ec f8 00 00 	ld.w	r8,r6[0]
8001fe66:	70 09       	ld.w	r9,r8[0x0]
8001fe68:	30 18       	mov	r8,1
8001fe6a:	f3 68 0b 57 	st.b	r9[2903],r8
8001fe6e:	c0 78       	rjmp	8001fe7c <gps_update+0x144>
			}else{
				centralData->GPS_data.speedStatus = 0;
8001fe70:	ec f8 00 00 	ld.w	r8,r6[0]
8001fe74:	70 09       	ld.w	r9,r8[0x0]
8001fe76:	30 08       	mov	r8,0
8001fe78:	f3 68 0b 57 	st.b	r9[2903],r8
			}
			// Check for heading accuracy
			if (centralData->GPS_data.headingAccuracy < UBX_HEADING_PRECISION)
8001fe7c:	ec f8 00 00 	ld.w	r8,r6[0]
8001fe80:	70 08       	ld.w	r8,r8[0x0]
8001fe82:	f0 fa 0b 44 	ld.w	r10,r8[2884]
8001fe86:	30 18       	mov	r8,1
8001fe88:	e0 69 96 80 	mov	r9,38528
8001fe8c:	ea 19 4a 98 	orh	r9,0x4a98
8001fe90:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
8001fe94:	e0 8c 00 03 	brvs	8001fe9a <gps_update+0x162>
8001fe98:	c0 25       	brlt	8001fe9c <gps_update+0x164>
8001fe9a:	30 08       	mov	r8,0
8001fe9c:	5c 58       	castu.b	r8
8001fe9e:	c0 80       	breq	8001feae <gps_update+0x176>
			{
				centralData->GPS_data.courseStatus = 1;
8001fea0:	ec f8 00 00 	ld.w	r8,r6[0]
8001fea4:	70 09       	ld.w	r9,r8[0x0]
8001fea6:	30 18       	mov	r8,1
8001fea8:	f3 68 0b 58 	st.b	r9[2904],r8
8001feac:	c0 78       	rjmp	8001feba <gps_update+0x182>
				}else{
				centralData->GPS_data.courseStatus = 0;
8001feae:	ec f8 00 00 	ld.w	r8,r6[0]
8001feb2:	70 09       	ld.w	r9,r8[0x0]
8001feb4:	30 08       	mov	r8,0
8001feb6:	f3 68 0b 58 	st.b	r9[2904],r8
			}
			
			centralData->GPS_data.accuracyStatus = centralData->GPS_data.horizontalStatus & centralData->GPS_data.altitudeStatus & centralData->GPS_data.speedStatus & centralData->GPS_data.courseStatus;
8001feba:	ec f8 00 00 	ld.w	r8,r6[0]
8001febe:	70 09       	ld.w	r9,r8[0x0]
8001fec0:	ec f8 00 00 	ld.w	r8,r6[0]
8001fec4:	70 08       	ld.w	r8,r8[0x0]
8001fec6:	f1 3a 0b 55 	ld.ub	r10,r8[2901]
8001feca:	ec f8 00 00 	ld.w	r8,r6[0]
8001fece:	70 08       	ld.w	r8,r8[0x0]
8001fed0:	f1 38 0b 56 	ld.ub	r8,r8[2902]
8001fed4:	f5 e8 00 08 	and	r8,r10,r8
8001fed8:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
8001fedc:	ec f8 00 00 	ld.w	r8,r6[0]
8001fee0:	70 08       	ld.w	r8,r8[0x0]
8001fee2:	f1 38 0b 57 	ld.ub	r8,r8[2903]
8001fee6:	f5 e8 00 08 	and	r8,r10,r8
8001feea:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
8001feee:	ec f8 00 00 	ld.w	r8,r6[0]
8001fef2:	70 08       	ld.w	r8,r8[0x0]
8001fef4:	f1 38 0b 58 	ld.ub	r8,r8[2904]
8001fef8:	f5 e8 00 08 	and	r8,r10,r8
8001fefc:	5c 58       	castu.b	r8
8001fefe:	f3 68 0b 59 	st.b	r9[2905],r8
8001ff02:	c1 f8       	rjmp	8001ff40 <gps_update+0x208>
// 				
// 				// no good way to get descent rate
// 				centralData->GPS_data.verticalSpeed = 0;
// 			}
		}else{
			centralData->GPS_data.horizontalStatus = 0;
8001ff04:	ec f8 00 00 	ld.w	r8,r6[0]
8001ff08:	70 09       	ld.w	r9,r8[0x0]
8001ff0a:	30 08       	mov	r8,0
8001ff0c:	f3 68 0b 55 	st.b	r9[2901],r8
			centralData->GPS_data.altitudeStatus = 0;
8001ff10:	ec f8 00 00 	ld.w	r8,r6[0]
8001ff14:	70 09       	ld.w	r9,r8[0x0]
8001ff16:	30 08       	mov	r8,0
8001ff18:	f3 68 0b 56 	st.b	r9[2902],r8
			centralData->GPS_data.speedStatus = 0;
8001ff1c:	ec f8 00 00 	ld.w	r8,r6[0]
8001ff20:	70 09       	ld.w	r9,r8[0x0]
8001ff22:	30 08       	mov	r8,0
8001ff24:	f3 68 0b 57 	st.b	r9[2903],r8
			centralData->GPS_data.courseStatus = 0;
8001ff28:	ec f8 00 00 	ld.w	r8,r6[0]
8001ff2c:	70 09       	ld.w	r9,r8[0x0]
8001ff2e:	30 08       	mov	r8,0
8001ff30:	f3 68 0b 58 	st.b	r9[2904],r8
			
			centralData->GPS_data.accuracyStatus = 0;
8001ff34:	ec f8 00 00 	ld.w	r8,r6[0]
8001ff38:	70 09       	ld.w	r9,r8[0x0]
8001ff3a:	30 08       	mov	r8,0
8001ff3c:	f3 68 0b 59 	st.b	r9[2905],r8
		}
	}
}
8001ff40:	2f ed       	sub	sp,-8
8001ff42:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001ff46:	00 00       	add	r0,r0
8001ff48:	80 01       	ld.sh	r1,r0[0x0]
8001ff4a:	fb c8       	*unknown*

8001ff4c <newValidGpsMsg>:
/*
* This function returns true if there is a new valid GPS message that arrived at time tnow
* false otherwise
*/
bool newValidGpsMsg(uint32_t *prevGpsMsgTime)
{
8001ff4c:	eb cd 40 c0 	pushm	r6-r7,lr
8001ff50:	1a 97       	mov	r7,sp
8001ff52:	20 1d       	sub	sp,4
8001ff54:	49 36       	lddpc	r6,8001ffa0 <newValidGpsMsg+0x54>
8001ff56:	1e 26       	rsub	r6,pc
8001ff58:	ef 4c ff fc 	st.w	r7[-4],r12
	
	
	if((*prevGpsMsgTime != centralData->GPS_data.timeLastMsg)&&(centralData->GPS_data.status == GPS_OK)//&&(centralData->GPS_data.accuracyStatus == 1)
8001ff5c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001ff60:	70 09       	ld.w	r9,r8[0x0]
8001ff62:	ec f8 00 00 	ld.w	r8,r6[0]
8001ff66:	70 08       	ld.w	r8,r8[0x0]
8001ff68:	f0 f8 0b 4c 	ld.w	r8,r8[2892]
8001ff6c:	10 39       	cp.w	r9,r8
8001ff6e:	c1 40       	breq	8001ff96 <newValidGpsMsg+0x4a>
8001ff70:	ec f8 00 00 	ld.w	r8,r6[0]
8001ff74:	70 08       	ld.w	r8,r8[0x0]
8001ff76:	f1 39 0b 54 	ld.ub	r9,r8[2900]
8001ff7a:	30 28       	mov	r8,2
8001ff7c:	f0 09 18 00 	cp.b	r9,r8
8001ff80:	c0 b1       	brne	8001ff96 <newValidGpsMsg+0x4a>
	)
	{
		*prevGpsMsgTime = centralData->GPS_data.timeLastMsg;
8001ff82:	ec f8 00 00 	ld.w	r8,r6[0]
8001ff86:	70 08       	ld.w	r8,r8[0x0]
8001ff88:	f0 f9 0b 4c 	ld.w	r9,r8[2892]
8001ff8c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001ff90:	91 09       	st.w	r8[0x0],r9
		return true;
8001ff92:	30 18       	mov	r8,1
8001ff94:	c0 28       	rjmp	8001ff98 <newValidGpsMsg+0x4c>
	}else{
		return false;
8001ff96:	30 08       	mov	r8,0
	}
	
	
}
8001ff98:	10 9c       	mov	r12,r8
8001ff9a:	2f fd       	sub	sp,-4
8001ff9c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001ffa0:	80 01       	ld.sh	r1,r0[0x0]
8001ffa2:	fd da       	*unknown*

8001ffa4 <ubx_GetPosllh>:
*	Warning: the values of the message must be read very quickly after the call to this function as buffer may be swapped in an interruption
*
*	@return A pointer to the last valid posllh message, or 0.
*/
ubx_nav_posllh * ubx_GetPosllh()
{
8001ffa4:	eb cd 40 c0 	pushm	r6-r7,lr
8001ffa8:	1a 97       	mov	r7,sp
8001ffaa:	48 86       	lddpc	r6,8001ffc8 <ubx_GetPosllh+0x24>
8001ffac:	1e 26       	rsub	r6,pc
	if (ubx_numberOfValidPosllhMessage)
8001ffae:	ec f8 04 58 	ld.w	r8,r6[1112]
8001ffb2:	90 08       	ld.sh	r8,r8[0x0]
8001ffb4:	58 08       	cp.w	r8,0
8001ffb6:	c0 50       	breq	8001ffc0 <ubx_GetPosllh+0x1c>
	return ubx_lastPosllhMessage;
8001ffb8:	ec f8 03 50 	ld.w	r8,r6[848]
8001ffbc:	70 08       	ld.w	r8,r8[0x0]
8001ffbe:	c0 28       	rjmp	8001ffc2 <ubx_GetPosllh+0x1e>
	else
	return 0;
8001ffc0:	30 08       	mov	r8,0
}
8001ffc2:	10 9c       	mov	r12,r8
8001ffc4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001ffc8:	80 01       	ld.sh	r1,r0[0x0]
8001ffca:	fe 30 eb cd 	sub	r0,-5171

8001ffcc <ubx_GetStatus>:
*	Warning: the values of the message must be read very quickly after the call to this function as buffer may be swapped in an interruption
*
*	@return A pointer to the last valid status message, or 0.
*/
ubx_nav_status * ubx_GetStatus()
{
8001ffcc:	eb cd 40 c0 	pushm	r6-r7,lr
8001ffd0:	1a 97       	mov	r7,sp
8001ffd2:	48 86       	lddpc	r6,8001fff0 <ubx_GetStatus+0x24>
8001ffd4:	1e 26       	rsub	r6,pc
	if (ubx_numberOfValidStatusMessage)
8001ffd6:	ec f8 04 20 	ld.w	r8,r6[1056]
8001ffda:	90 08       	ld.sh	r8,r8[0x0]
8001ffdc:	58 08       	cp.w	r8,0
8001ffde:	c0 50       	breq	8001ffe8 <ubx_GetStatus+0x1c>
	return ubx_lastStatusMessage;
8001ffe0:	ec f8 03 54 	ld.w	r8,r6[852]
8001ffe4:	70 08       	ld.w	r8,r8[0x0]
8001ffe6:	c0 28       	rjmp	8001ffea <ubx_GetStatus+0x1e>
	else
	return 0;
8001ffe8:	30 08       	mov	r8,0
}
8001ffea:	10 9c       	mov	r12,r8
8001ffec:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001fff0:	80 01       	ld.sh	r1,r0[0x0]
8001fff2:	fe 58 eb cd 	cp.w	r8,-5171

8001fff4 <ubx_GetSolution>:
*	Warning: the values of the message must be read very quickly after the call to this function as buffer may be swapped in an interruption
*
*	@return A pointer to the last valid velned message, or 0.
*/
ubx_nav_solution * ubx_GetSolution()
{
8001fff4:	eb cd 40 c0 	pushm	r6-r7,lr
8001fff8:	1a 97       	mov	r7,sp
8001fffa:	48 86       	lddpc	r6,80020018 <ubx_GetSolution+0x24>
8001fffc:	1e 26       	rsub	r6,pc
	if (ubx_numberOfValidSolutionMessage)
8001fffe:	ec f8 04 70 	ld.w	r8,r6[1136]
80020002:	90 08       	ld.sh	r8,r8[0x0]
80020004:	58 08       	cp.w	r8,0
80020006:	c0 50       	breq	80020010 <ubx_GetSolution+0x1c>
	return ubx_lastSolutionMessage;
80020008:	ec f8 03 bc 	ld.w	r8,r6[956]
8002000c:	70 08       	ld.w	r8,r8[0x0]
8002000e:	c0 28       	rjmp	80020012 <ubx_GetSolution+0x1e>
	else
	return 0;
80020010:	30 08       	mov	r8,0
}
80020012:	10 9c       	mov	r12,r8
80020014:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80020018:	80 01       	ld.sh	r1,r0[0x0]
8002001a:	fe 80 eb cd 	breq	7fffd7b4 <_estack+0x7ffed7b4>

8002001c <ubx_GetVelned>:
*	Warning: the values of the message must be read very quickly after the call to this function as buffer may be swapped in an interruption
*
*	@return A pointer to the last valid velned message, or 0.
*/
ubx_nav_velned * ubx_GetVelned()
{
8002001c:	eb cd 40 c0 	pushm	r6-r7,lr
80020020:	1a 97       	mov	r7,sp
80020022:	48 86       	lddpc	r6,80020040 <ubx_GetVelned+0x24>
80020024:	1e 26       	rsub	r6,pc
	if (ubx_numberOfValidVelnedMessage)
80020026:	ec f8 04 7c 	ld.w	r8,r6[1148]
8002002a:	90 08       	ld.sh	r8,r8[0x0]
8002002c:	58 08       	cp.w	r8,0
8002002e:	c0 50       	breq	80020038 <ubx_GetVelned+0x1c>
	return ubx_lastVelnedMessage;
80020030:	ec f8 04 6c 	ld.w	r8,r6[1132]
80020034:	70 08       	ld.w	r8,r8[0x0]
80020036:	c0 28       	rjmp	8002003a <ubx_GetVelned+0x1e>
	else
	return 0;
80020038:	30 08       	mov	r8,0
}
8002003a:	10 9c       	mov	r12,r8
8002003c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80020040:	80 01       	ld.sh	r1,r0[0x0]
80020042:	fe a8       	*unknown*

80020044 <ubx_GetSVInfo>:
*	Warning: the values of the message must be read very quickly after the call to this function as buffer may be swapped in an interruption
*
*	@return A pointer to the last valid status message, or 0.
*/
ubx_nav_SVInfo * ubx_GetSVInfo()
{
80020044:	eb cd 40 c0 	pushm	r6-r7,lr
80020048:	1a 97       	mov	r7,sp
8002004a:	48 86       	lddpc	r6,80020068 <ubx_GetSVInfo+0x24>
8002004c:	1e 26       	rsub	r6,pc
	if (ubx_numberOfValidSVInfoMessage)
8002004e:	ec f8 03 88 	ld.w	r8,r6[904]
80020052:	90 08       	ld.sh	r8,r8[0x0]
80020054:	58 08       	cp.w	r8,0
80020056:	c0 50       	breq	80020060 <ubx_GetSVInfo+0x1c>
	return ubx_lastSVInfoMessage;
80020058:	ec f8 04 50 	ld.w	r8,r6[1104]
8002005c:	70 08       	ld.w	r8,r8[0x0]
8002005e:	c0 28       	rjmp	80020062 <ubx_GetSVInfo+0x1e>
	else
	return 0;
80020060:	30 08       	mov	r8,0
}
80020062:	10 9c       	mov	r12,r8
80020064:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80020068:	80 01       	ld.sh	r1,r0[0x0]
8002006a:	fe d0 eb cd 	satsub.w	r0,pc,-5171

8002006c <ubx_GetNavSettings>:
*	Warning: the values of the message must be read very quickly after the call to this function as buffer may be swapped in an interruption
*
*	@return A pointer to the last valid status message, or 0.
*/
ubx_cfg_nav_settings * ubx_GetNavSettings()
{
8002006c:	eb cd 40 c0 	pushm	r6-r7,lr
80020070:	1a 97       	mov	r7,sp
80020072:	48 86       	lddpc	r6,80020090 <ubx_GetNavSettings+0x24>
80020074:	1e 26       	rsub	r6,pc
	if (ubx_numberOfValidNavSettingsMessage)
80020076:	ec f8 04 34 	ld.w	r8,r6[1076]
8002007a:	90 08       	ld.sh	r8,r8[0x0]
8002007c:	58 08       	cp.w	r8,0
8002007e:	c0 50       	breq	80020088 <ubx_GetNavSettings+0x1c>
	return ubx_lastNavSettingsMessage;
80020080:	ec f8 04 64 	ld.w	r8,r6[1124]
80020084:	70 08       	ld.w	r8,r8[0x0]
80020086:	c0 28       	rjmp	8002008a <ubx_GetNavSettings+0x1e>
	else
	return 0;
80020088:	30 08       	mov	r8,0
}
8002008a:	10 9c       	mov	r12,r8
8002008c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80020090:	80 01       	ld.sh	r1,r0[0x0]
80020092:	fe f8 eb cd 	ld.w	r8,pc[-5171]

80020094 <ubx_GetMsgRate>:
*	Warning: the values of the message must be read very quickly after the call to this function as buffer may be swapped in an interruption
*
*	@return A pointer to the last valid status message, or 0.
*/
ubx_cfg_msg_rate * ubx_GetMsgRate()
{
80020094:	eb cd 40 c0 	pushm	r6-r7,lr
80020098:	1a 97       	mov	r7,sp
8002009a:	48 86       	lddpc	r6,800200b8 <ubx_GetMsgRate+0x24>
8002009c:	1e 26       	rsub	r6,pc
	if (ubx_numberOfValidCFGSetGetRateMessage)
8002009e:	ec f8 04 94 	ld.w	r8,r6[1172]
800200a2:	90 08       	ld.sh	r8,r8[0x0]
800200a4:	58 08       	cp.w	r8,0
800200a6:	c0 50       	breq	800200b0 <ubx_GetMsgRate+0x1c>
	return ubx_lastCFGSetGetRateMessage;
800200a8:	ec f8 03 cc 	ld.w	r8,r6[972]
800200ac:	70 08       	ld.w	r8,r8[0x0]
800200ae:	c0 28       	rjmp	800200b2 <ubx_GetMsgRate+0x1e>
	else
	return 0;
800200b0:	30 08       	mov	r8,0
}
800200b2:	10 9c       	mov	r12,r8
800200b4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800200b8:	80 01       	ld.sh	r1,r0[0x0]
800200ba:	ff 20 eb cd 	ld.sb	r0,pc[-5171]

800200bc <ubx_GetMonRXR>:
*	Warning: the values of the message must be read very quickly after the call to this function as buffer may be swapped in an interruption
*
*	@return A pointer to the last valid status message, or 0.
*/
ubx_mon_rxr_struct * ubx_GetMonRXR()
{
800200bc:	eb cd 40 c0 	pushm	r6-r7,lr
800200c0:	1a 97       	mov	r7,sp
800200c2:	48 86       	lddpc	r6,800200e0 <ubx_GetMonRXR+0x24>
800200c4:	1e 26       	rsub	r6,pc
	if (ubx_numberOfValidMONRXRMessage)
800200c6:	ec f8 04 78 	ld.w	r8,r6[1144]
800200ca:	90 08       	ld.sh	r8,r8[0x0]
800200cc:	58 08       	cp.w	r8,0
800200ce:	c0 50       	breq	800200d8 <ubx_GetMonRXR+0x1c>
	return ubx_lastMONRXRMessage;
800200d0:	ec f8 03 b8 	ld.w	r8,r6[952]
800200d4:	70 08       	ld.w	r8,r8[0x0]
800200d6:	c0 28       	rjmp	800200da <ubx_GetMonRXR+0x1e>
	else
	return 0;
800200d8:	30 08       	mov	r8,0
}
800200da:	10 9c       	mov	r12,r8
800200dc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800200e0:	80 01       	ld.sh	r1,r0[0x0]
800200e2:	ff 48 eb cd 	st.w	pc[-5171],r8

800200e4 <ubx_GetTimTP>:
*	Warning: the values of the message must be read very quickly after the call to this function as buffer may be swapped in an interruption
*
*	@return A pointer to the last valid status message, or 0.
*/
ubx_tim_tp * ubx_GetTimTP()
{
800200e4:	eb cd 40 c0 	pushm	r6-r7,lr
800200e8:	1a 97       	mov	r7,sp
800200ea:	48 86       	lddpc	r6,80020108 <ubx_GetTimTP+0x24>
800200ec:	1e 26       	rsub	r6,pc
	if(ubx_numberOfValidTimTPMessage)
800200ee:	ec f8 04 38 	ld.w	r8,r6[1080]
800200f2:	90 08       	ld.sh	r8,r8[0x0]
800200f4:	58 08       	cp.w	r8,0
800200f6:	c0 50       	breq	80020100 <ubx_GetTimTP+0x1c>
	return ubx_lastTimTPMessage;
800200f8:	ec f8 03 f4 	ld.w	r8,r6[1012]
800200fc:	70 08       	ld.w	r8,r8[0x0]
800200fe:	c0 28       	rjmp	80020102 <ubx_GetTimTP+0x1e>
	else
	return 0;
80020100:	30 08       	mov	r8,0
}
80020102:	10 9c       	mov	r12,r8
80020104:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80020108:	80 01       	ld.sh	r1,r0[0x0]
8002010a:	ff 70 eb cd 	stcond	pc[-5171],r0

8002010c <ubx_GetTimVRFY>:
*	Warning: the values of the message must be read very quickly after the call to this function as buffer may be swapped in an interruption
*
*	@return A pointer to the last valid status message, or 0.
*/
ubx_tim_vrfy * ubx_GetTimVRFY()
{
8002010c:	eb cd 40 c0 	pushm	r6-r7,lr
80020110:	1a 97       	mov	r7,sp
80020112:	48 86       	lddpc	r6,80020130 <ubx_GetTimVRFY+0x24>
80020114:	1e 26       	rsub	r6,pc
	if(ubx_numberOfValidTimVRFYMessage)
80020116:	ec f8 04 40 	ld.w	r8,r6[1088]
8002011a:	90 08       	ld.sh	r8,r8[0x0]
8002011c:	58 08       	cp.w	r8,0
8002011e:	c0 50       	breq	80020128 <ubx_GetTimVRFY+0x1c>
	return ubx_lastTimVRFYMessage;
80020120:	ec f8 04 14 	ld.w	r8,r6[1044]
80020124:	70 08       	ld.w	r8,r8[0x0]
80020126:	c0 28       	rjmp	8002012a <ubx_GetTimVRFY+0x1e>
	else
	return 0;
80020128:	30 08       	mov	r8,0
}
8002012a:	10 9c       	mov	r12,r8
8002012c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80020130:	80 01       	ld.sh	r1,r0[0x0]
80020132:	ff 98       	*unknown*

80020134 <ToRad>:

float ToRad(float numdeg)
{
80020134:	eb cd 40 c0 	pushm	r6-r7,lr
80020138:	1a 97       	mov	r7,sp
8002013a:	20 1d       	sub	sp,4
8002013c:	49 46       	lddpc	r6,8002018c <ToRad+0x58>
8002013e:	1e 26       	rsub	r6,pc
80020140:	ef 4c ff fc 	st.w	r7[-4],r12
	return numdeg * DEG2RAD;
80020144:	ee fc ff fc 	ld.w	r12,r7[-4]
80020148:	f0 16 00 02 	mcall	r6[8]
8002014c:	e0 68 2d 18 	mov	r8,11544
80020150:	ea 18 54 44 	orh	r8,0x5444
80020154:	e0 69 21 fb 	mov	r9,8699
80020158:	ea 19 40 09 	orh	r9,0x4009
8002015c:	f0 16 00 03 	mcall	r6[12]
80020160:	14 98       	mov	r8,r10
80020162:	16 99       	mov	r9,r11
80020164:	10 9a       	mov	r10,r8
80020166:	12 9b       	mov	r11,r9
80020168:	30 08       	mov	r8,0
8002016a:	e0 69 80 00 	mov	r9,32768
8002016e:	ea 19 40 66 	orh	r9,0x4066
80020172:	f0 16 00 0c 	mcall	r6[48]
80020176:	14 98       	mov	r8,r10
80020178:	16 99       	mov	r9,r11
8002017a:	10 9a       	mov	r10,r8
8002017c:	12 9b       	mov	r11,r9
8002017e:	f0 16 00 09 	mcall	r6[36]
80020182:	18 98       	mov	r8,r12
80020184:	10 9c       	mov	r12,r8
80020186:	2f fd       	sub	sp,-4
80020188:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002018c:	80 01       	ld.sh	r1,r0[0x0]
8002018e:	ff c2       	*unknown*

80020190 <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
80020190:	eb cd 40 c0 	pushm	r6-r7,lr
80020194:	1a 97       	mov	r7,sp
80020196:	20 6d       	sub	sp,24
80020198:	49 e6       	lddpc	r6,80020210 <interpolate+0x80>
8002019a:	1e 26       	rsub	r6,pc
8002019c:	ef 4c ff f8 	st.w	r7[-8],r12
800201a0:	ef 4b ff f4 	st.w	r7[-12],r11
800201a4:	ef 4a ff f0 	st.w	r7[-16],r10
800201a8:	ef 49 ff ec 	st.w	r7[-20],r9
800201ac:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
800201b0:	ee f9 ff f4 	ld.w	r9,r7[-12]
800201b4:	ee f8 ff f0 	ld.w	r8,r7[-16]
800201b8:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
800201bc:	c0 41       	brne	800201c4 <interpolate+0x34>
	{
		return y1;
800201be:	ee f8 ff ec 	ld.w	r8,r7[-20]
800201c2:	c2 38       	rjmp	80020208 <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
800201c4:	ee f9 ff e8 	ld.w	r9,r7[-24]
800201c8:	ee f8 ff ec 	ld.w	r8,r7[-20]
800201cc:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
800201d0:	ee fa ff f8 	ld.w	r10,r7[-8]
800201d4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800201d8:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
800201dc:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
800201e0:	ee fa ff f0 	ld.w	r10,r7[-16]
800201e4:	ee f9 ff f4 	ld.w	r9,r7[-12]
800201e8:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
800201ec:	12 9b       	mov	r11,r9
800201ee:	10 9c       	mov	r12,r8
800201f0:	f0 16 00 08 	mcall	r6[32]
800201f4:	18 98       	mov	r8,r12
800201f6:	10 99       	mov	r9,r8
800201f8:	ee f8 ff ec 	ld.w	r8,r7[-20]
800201fc:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80020200:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
80020204:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
80020208:	10 9c       	mov	r12,r8
8002020a:	2f ad       	sub	sp,-24
8002020c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80020210:	80 02       	ld.sh	r2,r0[0x0]
80020212:	00 1e       	sub	lr,r0

80020214 <init_imu>:
#include "time_keeper.h"
#include "print_util.h"
#include "position_estimation.h"

int ic;
void init_imu (Imu_Data_t *imu1) {
80020214:	eb cd 40 c0 	pushm	r6-r7,lr
80020218:	1a 97       	mov	r7,sp
8002021a:	20 1d       	sub	sp,4
8002021c:	4d 36       	lddpc	r6,80020368 <init_imu+0x154>
8002021e:	1e 26       	rsub	r6,pc
80020220:	ef 4c ff fc 	st.w	r7[-4],r12
	
	
	init_itg3200_slow();	
80020224:	f0 16 02 10 	mcall	r6[2112]
	init_adxl345_slow();
80020228:	f0 16 01 68 	mcall	r6[1440]
	//init_lsm330();
	
	init_hmc5883_slow();
8002022c:	f0 16 01 e7 	mcall	r6[1948]

	//calibrate_Gyros(imu1);
	imu1->raw_scale[0] =  RAW_GYRO_X_SCALE;
80020230:	ee f8 ff fc 	ld.w	r8,r7[-4]
80020234:	e0 69 e0 00 	mov	r9,57344
80020238:	ea 19 46 44 	orh	r9,0x4644
8002023c:	f1 49 01 14 	st.w	r8[276],r9
	imu1->raw_scale[1] =  RAW_GYRO_Y_SCALE;
80020240:	ee f8 ff fc 	ld.w	r8,r7[-4]
80020244:	e0 69 e0 00 	mov	r9,57344
80020248:	ea 19 c6 44 	orh	r9,0xc644
8002024c:	f1 49 01 18 	st.w	r8[280],r9
	imu1->raw_scale[2] =  RAW_GYRO_Z_SCALE;
80020250:	ee f8 ff fc 	ld.w	r8,r7[-4]
80020254:	e0 69 e0 00 	mov	r9,57344
80020258:	ea 19 46 44 	orh	r9,0x4644
8002025c:	f1 49 01 1c 	st.w	r8[284],r9
	imu1->raw_scale[0+ACC_OFFSET] =  RAW_ACC_X_SCALE;
80020260:	ee f8 ff fc 	ld.w	r8,r7[-4]
80020264:	e0 69 75 6a 	mov	r9,30058
80020268:	ea 19 43 81 	orh	r9,0x4381
8002026c:	f1 49 01 20 	st.w	r8[288],r9
	imu1->raw_scale[1+ACC_OFFSET] =  RAW_ACC_Y_SCALE;
80020270:	ee f8 ff fc 	ld.w	r8,r7[-4]
80020274:	e0 69 7e 1e 	mov	r9,32286
80020278:	ea 19 43 81 	orh	r9,0x4381
8002027c:	f1 49 01 24 	st.w	r8[292],r9
	imu1->raw_scale[2+ACC_OFFSET] =  RAW_ACC_Z_SCALE;
80020280:	ee f8 ff fc 	ld.w	r8,r7[-4]
80020284:	e0 69 0a 9c 	mov	r9,2716
80020288:	ea 19 43 81 	orh	r9,0x4381
8002028c:	f1 49 01 28 	st.w	r8[296],r9
	imu1->raw_scale[0+COMPASS_OFFSET] =  RAW_MAG_X_SCALE;
80020290:	ee f8 ff fc 	ld.w	r8,r7[-4]
80020294:	e0 69 91 bc 	mov	r9,37308
80020298:	ea 19 44 04 	orh	r9,0x4404
8002029c:	f1 49 01 2c 	st.w	r8[300],r9
	imu1->raw_scale[1+COMPASS_OFFSET] =  RAW_MAG_Y_SCALE;
800202a0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800202a4:	e0 69 52 c7 	mov	r9,21191
800202a8:	ea 19 44 03 	orh	r9,0x4403
800202ac:	f1 49 01 30 	st.w	r8[304],r9
	imu1->raw_scale[2+COMPASS_OFFSET] =  RAW_MAG_Z_SCALE;
800202b0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800202b4:	e0 69 39 4b 	mov	r9,14667
800202b8:	ea 19 43 f9 	orh	r9,0x43f9
800202bc:	f1 49 01 34 	st.w	r8[308],r9
	
	imu1->raw_bias[0+GYRO_OFFSET]= 0.0;
800202c0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800202c4:	30 09       	mov	r9,0
800202c6:	f1 49 00 f0 	st.w	r8[240],r9
	imu1->raw_bias[1+GYRO_OFFSET]= 0.0;
800202ca:	ee f8 ff fc 	ld.w	r8,r7[-4]
800202ce:	30 09       	mov	r9,0
800202d0:	f1 49 00 f4 	st.w	r8[244],r9
	imu1->raw_bias[2+GYRO_OFFSET]= 0.0;
800202d4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800202d8:	30 09       	mov	r9,0
800202da:	f1 49 00 f8 	st.w	r8[248],r9
	//myquad
	// acceleration biais
	imu1->raw_bias[0+ACC_OFFSET]= ACC_BIAIS_X;
800202de:	ee f8 ff fc 	ld.w	r8,r7[-4]
800202e2:	fc 19 41 90 	movh	r9,0x4190
800202e6:	f1 49 00 fc 	st.w	r8[252],r9
	imu1->raw_bias[1+ACC_OFFSET]= ACC_BIAIS_Y;
800202ea:	ee f8 ff fc 	ld.w	r8,r7[-4]
800202ee:	fc 19 41 10 	movh	r9,0x4110
800202f2:	f1 49 01 00 	st.w	r8[256],r9
	imu1->raw_bias[2+ACC_OFFSET]= ACC_BIAIS_Z;
800202f6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800202fa:	fc 19 c1 80 	movh	r9,0xc180
800202fe:	f1 49 01 04 	st.w	r8[260],r9
	
	// magneto bias
	imu1->raw_bias[0+COMPASS_OFFSET]= MAG_BIAIS_X;
80020302:	ee f8 ff fc 	ld.w	r8,r7[-4]
80020306:	e0 69 c2 19 	mov	r9,49689
8002030a:	ea 19 43 03 	orh	r9,0x4303
8002030e:	f1 49 01 08 	st.w	r8[264],r9
	imu1->raw_bias[1+COMPASS_OFFSET]= MAG_BIAIS_Y;
80020312:	ee f8 ff fc 	ld.w	r8,r7[-4]
80020316:	e0 69 09 d5 	mov	r9,2517
8002031a:	ea 19 c1 d1 	orh	r9,0xc1d1
8002031e:	f1 49 01 0c 	st.w	r8[268],r9
	imu1->raw_bias[2+COMPASS_OFFSET]= MAG_BIAIS_Z;
80020322:	ee f8 ff fc 	ld.w	r8,r7[-4]
80020326:	e0 69 a8 8d 	mov	r9,43149
8002032a:	ea 19 42 74 	orh	r9,0x4274
8002032e:	f1 49 01 10 	st.w	r8[272],r9
	
	
	imu_last_update_init = false;
80020332:	ec f9 02 c4 	ld.w	r9,r6[708]
80020336:	30 08       	mov	r8,0
80020338:	b2 88       	st.b	r9[0x0],r8
	
	qfInit(&imu1->attitude, imu1->raw_scale, imu1->raw_bias);
8002033a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002033e:	f0 ca ff 10 	sub	r10,r8,-240
80020342:	ee f8 ff fc 	ld.w	r8,r7[-4]
80020346:	f0 c9 fe ec 	sub	r9,r8,-276
8002034a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002034e:	12 9b       	mov	r11,r9
80020350:	10 9c       	mov	r12,r8
80020352:	f0 16 01 e2 	mcall	r6[1928]
	imu1->attitude.calibration_level=OFF;
80020356:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002035a:	30 08       	mov	r8,0
8002035c:	f3 68 00 b8 	st.b	r9[184],r8
}
80020360:	2f fd       	sub	sp,-4
80020362:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80020366:	00 00       	add	r0,r0
80020368:	80 02       	ld.sh	r2,r0[0x0]
8002036a:	00 a2       	st.w	r0++,r2

8002036c <imu_get_raw_data>:


void imu_get_raw_data(Imu_Data_t *imu1) {
8002036c:	eb cd 40 c0 	pushm	r6-r7,lr
80020370:	1a 97       	mov	r7,sp
80020372:	20 5d       	sub	sp,20
80020374:	4b 66       	lddpc	r6,8002044c <imu_get_raw_data+0xe0>
80020376:	1e 26       	rsub	r6,pc
80020378:	ef 4c ff ec 	st.w	r7[-20],r12
	int i=0;
8002037c:	30 08       	mov	r8,0
8002037e:	ef 48 ff f0 	st.w	r7[-16],r8
	
	gyro_data* gyros=get_gyro_data_slow();
80020382:	f0 16 01 ce 	mcall	r6[1848]
80020386:	18 98       	mov	r8,r12
80020388:	ef 48 ff f4 	st.w	r7[-12],r8
	acc_data* accs=get_acc_data_slow();
8002038c:	f0 16 01 b9 	mcall	r6[1764]
80020390:	18 98       	mov	r8,r12
80020392:	ef 48 ff f8 	st.w	r7[-8],r8
	
//	lsm_gyro_data_t* gyros=lsm330_get_gyro_data();
//	lsm_acc_data_t* accs=lsm330_get_acc_data();
	compass_data* compass=get_compass_data_slow();
80020396:	f0 16 01 30 	mcall	r6[1216]
8002039a:	18 98       	mov	r8,r12
8002039c:	ef 48 ff fc 	st.w	r7[-4],r8


	imu1->raw_channels[GYRO_OFFSET+IMU_X]=(float)gyros->axes[RAW_GYRO_X];
800203a0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800203a4:	90 28       	ld.sh	r8,r8[0x4]
800203a6:	e5 a6 09 08 	cop	cp0,cr9,cr0,cr8,0x4c
800203aa:	ee f8 ff ec 	ld.w	r8,r7[-20]
800203ae:	f1 49 00 cc 	st.w	r8[204],r9
	imu1->raw_channels[GYRO_OFFSET+IMU_Y]=(float)gyros->axes[RAW_GYRO_Y];
800203b2:	ee f8 ff f4 	ld.w	r8,r7[-12]
800203b6:	90 18       	ld.sh	r8,r8[0x2]
800203b8:	e5 a6 09 08 	cop	cp0,cr9,cr0,cr8,0x4c
800203bc:	ee f8 ff ec 	ld.w	r8,r7[-20]
800203c0:	f1 49 00 d0 	st.w	r8[208],r9
	imu1->raw_channels[GYRO_OFFSET+IMU_Z]=(float)gyros->axes[RAW_GYRO_Z];
800203c4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800203c8:	90 38       	ld.sh	r8,r8[0x6]
800203ca:	e5 a6 09 08 	cop	cp0,cr9,cr0,cr8,0x4c
800203ce:	ee f8 ff ec 	ld.w	r8,r7[-20]
800203d2:	f1 49 00 d4 	st.w	r8[212],r9

	imu1->raw_channels[ACC_OFFSET+IMU_X]=(float)accs->axes[RAW_ACC_X];
800203d6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800203da:	90 38       	ld.sh	r8,r8[0x6]
800203dc:	e5 a6 09 08 	cop	cp0,cr9,cr0,cr8,0x4c
800203e0:	ee f8 ff ec 	ld.w	r8,r7[-20]
800203e4:	f1 49 00 d8 	st.w	r8[216],r9
	imu1->raw_channels[ACC_OFFSET+IMU_Y]=(float)accs->axes[RAW_ACC_Y];
800203e8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800203ec:	90 48       	ld.sh	r8,r8[0x8]
800203ee:	e5 a6 09 08 	cop	cp0,cr9,cr0,cr8,0x4c
800203f2:	ee f8 ff ec 	ld.w	r8,r7[-20]
800203f6:	f1 49 00 dc 	st.w	r8[220],r9
	imu1->raw_channels[ACC_OFFSET+IMU_Z]=(float)accs->axes[RAW_ACC_Z];
800203fa:	ee f8 ff f8 	ld.w	r8,r7[-8]
800203fe:	90 58       	ld.sh	r8,r8[0xa]
80020400:	e5 a6 09 08 	cop	cp0,cr9,cr0,cr8,0x4c
80020404:	ee f8 ff ec 	ld.w	r8,r7[-20]
80020408:	f1 49 00 e0 	st.w	r8[224],r9

	imu1->raw_channels[COMPASS_OFFSET+IMU_X]=(float)-compass->axes[RAW_COMPASS_X];
8002040c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80020410:	90 58       	ld.sh	r8,r8[0xa]
80020412:	5c 38       	neg	r8
80020414:	e5 a6 09 08 	cop	cp0,cr9,cr0,cr8,0x4c
80020418:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002041c:	f1 49 00 e4 	st.w	r8[228],r9
	imu1->raw_channels[COMPASS_OFFSET+IMU_Y]=(float)-compass->axes[RAW_COMPASS_Y];
80020420:	ee f8 ff fc 	ld.w	r8,r7[-4]
80020424:	90 38       	ld.sh	r8,r8[0x6]
80020426:	5c 38       	neg	r8
80020428:	e5 a6 09 08 	cop	cp0,cr9,cr0,cr8,0x4c
8002042c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80020430:	f1 49 00 e8 	st.w	r8[232],r9
	imu1->raw_channels[COMPASS_OFFSET+IMU_Z]=(float)compass->axes[RAW_COMPASS_Z];
80020434:	ee f8 ff fc 	ld.w	r8,r7[-4]
80020438:	90 48       	ld.sh	r8,r8[0x8]
8002043a:	e5 a6 09 08 	cop	cp0,cr9,cr0,cr8,0x4c
8002043e:	ee f8 ff ec 	ld.w	r8,r7[-20]
80020442:	f1 49 00 ec 	st.w	r8[236],r9
	
}
80020446:	2f bd       	sub	sp,-20
80020448:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002044c:	80 02       	ld.sh	r2,r0[0x0]
8002044e:	01 fa       	ld.ub	r10,r0[0x7]

80020450 <calibrate_Gyros>:

void calibrate_Gyros(Imu_Data_t *imu1) {
80020450:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
80020454:	1a 97       	mov	r7,sp
80020456:	20 3d       	sub	sp,12
80020458:	4e 86       	lddpc	r6,800205f8 <calibrate_Gyros+0x1a8>
8002045a:	1e 26       	rsub	r6,pc
8002045c:	ef 4c ff f4 	st.w	r7[-12],r12
	int i,j;
	imu_get_raw_data(imu1);
80020460:	ee fc ff f4 	ld.w	r12,r7[-12]
80020464:	f0 16 00 8c 	mcall	r6[560]
	for (j=0; j<3; j++) {
80020468:	30 08       	mov	r8,0
8002046a:	ef 48 ff fc 	st.w	r7[-4],r8
8002046e:	c1 48       	rjmp	80020496 <calibrate_Gyros+0x46>
		imu1->raw_bias[j]=(float)imu1->raw_channels[j];
80020470:	ee f9 ff fc 	ld.w	r9,r7[-4]
80020474:	ee fa ff fc 	ld.w	r10,r7[-4]
80020478:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002047c:	2c da       	sub	r10,-51
8002047e:	f0 0a 03 2a 	ld.w	r10,r8[r10<<0x2]
80020482:	ee f8 ff f4 	ld.w	r8,r7[-12]
80020486:	2c 49       	sub	r9,-60
80020488:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
}

void calibrate_Gyros(Imu_Data_t *imu1) {
	int i,j;
	imu_get_raw_data(imu1);
	for (j=0; j<3; j++) {
8002048c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80020490:	2f f8       	sub	r8,-1
80020492:	ef 48 ff fc 	st.w	r7[-4],r8
80020496:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002049a:	58 28       	cp.w	r8,2
8002049c:	fe 9a ff ea 	brle	80020470 <calibrate_Gyros+0x20>
		imu1->raw_bias[j]=(float)imu1->raw_channels[j];
	}
	
	for (i=0; i<100; i++) {
800204a0:	30 08       	mov	r8,0
800204a2:	ef 48 ff f8 	st.w	r7[-8],r8
800204a6:	c9 f8       	rjmp	800205e4 <calibrate_Gyros+0x194>
		imu_get_raw_data(imu1);
800204a8:	ee fc ff f4 	ld.w	r12,r7[-12]
800204ac:	f0 16 00 8c 	mcall	r6[560]

		//imu1->raw_bias[0+ACC_OFFSET]  = (0.9*imu1->raw_bias[0+ACC_OFFSET]+0.1*(float)imu1->raw_channels[0+ACC_OFFSET]);
		//imu1->raw_bias[1+ACC_OFFSET]  = (0.9*imu1->raw_bias[1+ACC_OFFSET]+0.1*(float)imu1->raw_channels[1+ACC_OFFSET]);
		//imu1->raw_bias[2+ACC_OFFSET]  = (0.9*imu1->raw_bias[2+ACC_OFFSET]+0.1*((float)imu1->raw_channels[2+ACC_OFFSET]-imu1->raw_scale[2+ACC_OFFSET]));
		for (j=0; j<3; j++) {
800204b0:	30 08       	mov	r8,0
800204b2:	ef 48 ff fc 	st.w	r7[-4],r8
800204b6:	c8 a8       	rjmp	800205ca <calibrate_Gyros+0x17a>
			imu1->raw_bias[j]=(0.9*imu1->raw_bias[j]+0.1*(float)imu1->raw_channels[j]);
800204b8:	ee f5 ff fc 	ld.w	r5,r7[-4]
800204bc:	ee f9 ff fc 	ld.w	r9,r7[-4]
800204c0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800204c4:	2c 49       	sub	r9,-60
800204c6:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800204ca:	10 9c       	mov	r12,r8
800204cc:	f0 16 00 02 	mcall	r6[8]
800204d0:	e0 68 cc cd 	mov	r8,52429
800204d4:	ea 18 cc cc 	orh	r8,0xcccc
800204d8:	e0 69 cc cc 	mov	r9,52428
800204dc:	ea 19 3f ec 	orh	r9,0x3fec
800204e0:	f0 16 00 03 	mcall	r6[12]
800204e4:	14 98       	mov	r8,r10
800204e6:	16 99       	mov	r9,r11
800204e8:	10 92       	mov	r2,r8
800204ea:	12 93       	mov	r3,r9
800204ec:	ee f9 ff fc 	ld.w	r9,r7[-4]
800204f0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800204f4:	2c d9       	sub	r9,-51
800204f6:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800204fa:	10 9c       	mov	r12,r8
800204fc:	f0 16 00 02 	mcall	r6[8]
80020500:	e0 68 99 9a 	mov	r8,39322
80020504:	ea 18 99 99 	orh	r8,0x9999
80020508:	e0 69 99 99 	mov	r9,39321
8002050c:	ea 19 3f b9 	orh	r9,0x3fb9
80020510:	f0 16 00 03 	mcall	r6[12]
80020514:	14 98       	mov	r8,r10
80020516:	16 99       	mov	r9,r11
80020518:	04 9a       	mov	r10,r2
8002051a:	06 9b       	mov	r11,r3
8002051c:	f0 16 00 05 	mcall	r6[20]
80020520:	14 98       	mov	r8,r10
80020522:	16 99       	mov	r9,r11
80020524:	10 9a       	mov	r10,r8
80020526:	12 9b       	mov	r11,r9
80020528:	f0 16 00 09 	mcall	r6[36]
8002052c:	18 9a       	mov	r10,r12
8002052e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80020532:	ea c9 ff c4 	sub	r9,r5,-60
80020536:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
			imu1->attitude.raw_mag_mean[j] = (1.0-MAG_LPF)*imu1->attitude.raw_mag_mean[j]+MAG_LPF*((float)imu1->raw_channels[j+COMPASS_OFFSET]);
8002053a:	ee f5 ff fc 	ld.w	r5,r7[-4]
8002053e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80020542:	ee f8 ff f4 	ld.w	r8,r7[-12]
80020546:	2d 59       	sub	r9,-43
80020548:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8002054c:	10 9c       	mov	r12,r8
8002054e:	f0 16 00 02 	mcall	r6[8]
80020552:	e0 68 cc cd 	mov	r8,52429
80020556:	ea 18 cc cc 	orh	r8,0xcccc
8002055a:	e0 69 cc cc 	mov	r9,52428
8002055e:	ea 19 3f ec 	orh	r9,0x3fec
80020562:	f0 16 00 03 	mcall	r6[12]
80020566:	14 98       	mov	r8,r10
80020568:	16 99       	mov	r9,r11
8002056a:	10 92       	mov	r2,r8
8002056c:	12 93       	mov	r3,r9
8002056e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80020572:	f0 c9 ff fa 	sub	r9,r8,-6
80020576:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002057a:	2c d9       	sub	r9,-51
8002057c:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80020580:	10 9c       	mov	r12,r8
80020582:	f0 16 00 02 	mcall	r6[8]
80020586:	e0 68 99 9a 	mov	r8,39322
8002058a:	ea 18 99 99 	orh	r8,0x9999
8002058e:	e0 69 99 99 	mov	r9,39321
80020592:	ea 19 3f b9 	orh	r9,0x3fb9
80020596:	f0 16 00 03 	mcall	r6[12]
8002059a:	14 98       	mov	r8,r10
8002059c:	16 99       	mov	r9,r11
8002059e:	04 9a       	mov	r10,r2
800205a0:	06 9b       	mov	r11,r3
800205a2:	f0 16 00 05 	mcall	r6[20]
800205a6:	14 98       	mov	r8,r10
800205a8:	16 99       	mov	r9,r11
800205aa:	10 9a       	mov	r10,r8
800205ac:	12 9b       	mov	r11,r9
800205ae:	f0 16 00 09 	mcall	r6[36]
800205b2:	18 9a       	mov	r10,r12
800205b4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800205b8:	ea c9 ff d5 	sub	r9,r5,-43
800205bc:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		imu_get_raw_data(imu1);

		//imu1->raw_bias[0+ACC_OFFSET]  = (0.9*imu1->raw_bias[0+ACC_OFFSET]+0.1*(float)imu1->raw_channels[0+ACC_OFFSET]);
		//imu1->raw_bias[1+ACC_OFFSET]  = (0.9*imu1->raw_bias[1+ACC_OFFSET]+0.1*(float)imu1->raw_channels[1+ACC_OFFSET]);
		//imu1->raw_bias[2+ACC_OFFSET]  = (0.9*imu1->raw_bias[2+ACC_OFFSET]+0.1*((float)imu1->raw_channels[2+ACC_OFFSET]-imu1->raw_scale[2+ACC_OFFSET]));
		for (j=0; j<3; j++) {
800205c0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800205c4:	2f f8       	sub	r8,-1
800205c6:	ef 48 ff fc 	st.w	r7[-4],r8
800205ca:	ee f8 ff fc 	ld.w	r8,r7[-4]
800205ce:	58 28       	cp.w	r8,2
800205d0:	fe 9a ff 74 	brle	800204b8 <calibrate_Gyros+0x68>
			imu1->raw_bias[j]=(0.9*imu1->raw_bias[j]+0.1*(float)imu1->raw_channels[j]);
			imu1->attitude.raw_mag_mean[j] = (1.0-MAG_LPF)*imu1->attitude.raw_mag_mean[j]+MAG_LPF*((float)imu1->raw_channels[j+COMPASS_OFFSET]);
		}
		delay_ms(4);
800205d4:	30 4c       	mov	r12,4
800205d6:	f0 16 00 f9 	mcall	r6[996]
	imu_get_raw_data(imu1);
	for (j=0; j<3; j++) {
		imu1->raw_bias[j]=(float)imu1->raw_channels[j];
	}
	
	for (i=0; i<100; i++) {
800205da:	ee f8 ff f8 	ld.w	r8,r7[-8]
800205de:	2f f8       	sub	r8,-1
800205e0:	ef 48 ff f8 	st.w	r7[-8],r8
800205e4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800205e8:	e0 48 00 63 	cp.w	r8,99
800205ec:	fe 9a ff 5e 	brle	800204a8 <calibrate_Gyros+0x58>
		}
		delay_ms(4);
	}


}
800205f0:	2f dd       	sub	sp,-12
800205f2:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
800205f6:	00 00       	add	r0,r0
800205f8:	80 02       	ld.sh	r2,r0[0x0]
800205fa:	02 de       	st.w	--r1,lr

800205fc <imu_update>:

void imu_update(Imu_Data_t *imu1, position_estimator_t *pos_est, pressure_data *barometer, gps_Data_type *gps){
800205fc:	eb cd 40 c0 	pushm	r6-r7,lr
80020600:	1a 97       	mov	r7,sp
80020602:	20 5d       	sub	sp,20
80020604:	4b 46       	lddpc	r6,800206d4 <imu_update+0xd8>
80020606:	1e 26       	rsub	r6,pc
80020608:	ef 4c ff f8 	st.w	r7[-8],r12
8002060c:	ef 4b ff f4 	st.w	r7[-12],r11
80020610:	ef 4a ff f0 	st.w	r7[-16],r10
80020614:	ef 49 ff ec 	st.w	r7[-20],r9
	uint32_t t=get_time_ticks();
80020618:	f0 16 00 4b 	mcall	r6[300]
8002061c:	18 98       	mov	r8,r12
8002061e:	ef 48 ff fc 	st.w	r7[-4],r8
	
	if (!imu_last_update_init)
80020622:	ec f8 02 c4 	ld.w	r8,r6[708]
80020626:	11 88       	ld.ub	r8,r8[0x0]
80020628:	ec 18 00 01 	eorl	r8,0x1
8002062c:	5c 58       	castu.b	r8
8002062e:	c0 c0       	breq	80020646 <imu_update+0x4a>
	{
		imu1->last_update = t;
80020630:	ee f8 ff f8 	ld.w	r8,r7[-8]
80020634:	ee f9 ff fc 	ld.w	r9,r7[-4]
80020638:	f1 49 01 38 	st.w	r8[312],r9
		imu_last_update_init = true;
8002063c:	ec f9 02 c4 	ld.w	r9,r6[708]
80020640:	30 18       	mov	r8,1
80020642:	b2 88       	st.b	r9[0x0],r8
80020644:	c4 48       	rjmp	800206cc <imu_update+0xd0>
	}else{
		imu1->dt=ticks_to_seconds(t - imu1->last_update);
80020646:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002064a:	f0 f8 01 38 	ld.w	r8,r8[312]
8002064e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80020652:	f2 08 01 08 	sub	r8,r9,r8
80020656:	10 9c       	mov	r12,r8
80020658:	f0 16 00 ae 	mcall	r6[696]
8002065c:	18 99       	mov	r9,r12
8002065e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80020662:	f1 49 01 40 	st.w	r8[320],r9
		imu1->last_update=t;
80020666:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002066a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002066e:	f1 49 01 38 	st.w	r8[312],r9
		qfilter(&imu1->attitude, &imu1->raw_channels, imu1->dt, false);
80020672:	ee f8 ff f8 	ld.w	r8,r7[-8]
80020676:	f0 fa 01 40 	ld.w	r10,r8[320]
8002067a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002067e:	f0 cb ff 34 	sub	r11,r8,-204
80020682:	ee f8 ff f8 	ld.w	r8,r7[-8]
80020686:	30 09       	mov	r9,0
80020688:	10 9c       	mov	r12,r8
8002068a:	f0 16 01 57 	mcall	r6[1372]
		if (imu1->attitude.calibration_level==OFF) {
8002068e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80020692:	f1 38 00 b8 	ld.ub	r8,r8[184]
80020696:	58 08       	cp.w	r8,0
80020698:	c1 a1       	brne	800206cc <imu_update+0xd0>
			position_integration(pos_est, &imu1->attitude, imu1->dt);
8002069a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002069e:	f0 f9 01 40 	ld.w	r9,r8[320]
800206a2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800206a6:	12 9a       	mov	r10,r9
800206a8:	10 9b       	mov	r11,r8
800206aa:	ee fc ff f4 	ld.w	r12,r7[-12]
800206ae:	f0 16 01 fe 	mcall	r6[2040]
			position_correction(pos_est, barometer, gps, imu1->dt);
800206b2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800206b6:	f0 f8 01 40 	ld.w	r8,r8[320]
800206ba:	10 99       	mov	r9,r8
800206bc:	ee fa ff ec 	ld.w	r10,r7[-20]
800206c0:	ee fb ff f0 	ld.w	r11,r7[-16]
800206c4:	ee fc ff f4 	ld.w	r12,r7[-12]
800206c8:	f0 16 01 de 	mcall	r6[1912]
		}
	}
}
800206cc:	2f bd       	sub	sp,-20
800206ce:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800206d2:	00 00       	add	r0,r0
800206d4:	80 02       	ld.sh	r2,r0[0x0]
800206d6:	04 8a       	andn	r10,r2

800206d8 <scalar_product>:
	return out;
}


float static inline scalar_product(const float u[], const float v[])
{
800206d8:	eb cd 40 80 	pushm	r7,lr
800206dc:	1a 97       	mov	r7,sp
800206de:	20 3d       	sub	sp,12
800206e0:	ef 4c ff f8 	st.w	r7[-8],r12
800206e4:	ef 4b ff f4 	st.w	r7[-12],r11
	float scp = (u[0]*v[0]+u[1]*v[1]+u[2]*v[2]);
800206e8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800206ec:	70 09       	ld.w	r9,r8[0x0]
800206ee:	ee f8 ff f4 	ld.w	r8,r7[-12]
800206f2:	70 08       	ld.w	r8,r8[0x0]
800206f4:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
800206f8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800206fc:	2f c8       	sub	r8,-4
800206fe:	70 0a       	ld.w	r10,r8[0x0]
80020700:	ee f8 ff f4 	ld.w	r8,r7[-12]
80020704:	2f c8       	sub	r8,-4
80020706:	70 08       	ld.w	r8,r8[0x0]
80020708:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8002070c:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80020710:	ee f8 ff f8 	ld.w	r8,r7[-8]
80020714:	2f 88       	sub	r8,-8
80020716:	70 0a       	ld.w	r10,r8[0x0]
80020718:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002071c:	2f 88       	sub	r8,-8
8002071e:	70 08       	ld.w	r8,r8[0x0]
80020720:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80020724:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80020728:	ef 48 ff fc 	st.w	r7[-4],r8
	return scp;
8002072c:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80020730:	10 9c       	mov	r12,r8
80020732:	2f dd       	sub	sp,-12
80020734:	e3 cd 80 80 	ldm	sp++,r7,pc

80020738 <quat_multi>:
	out[2] = u[0] * v[1] - u[1] * v[0];
}


UQuat_t static inline quat_multi(const UQuat_t q1, const UQuat_t q2)
{
80020738:	eb cd 40 e8 	pushm	r3,r5-r7,lr
8002073c:	1a 97       	mov	r7,sp
8002073e:	20 7d       	sub	sp,28
80020740:	4b d6       	lddpc	r6,80020834 <quat_multi+0xfc>
80020742:	1e 26       	rsub	r6,pc
80020744:	ee c8 ff ec 	sub	r8,r7,-20
80020748:	18 95       	mov	r5,r12
	float tmp[3];
	UQuat_t out;
	tmp[0] = q1.v[1] * q2.v[2] - q1.v[2]*q2.v[1];
8002074a:	70 2a       	ld.w	r10,r8[0x8]
8002074c:	70 79       	ld.w	r9,r8[0x1c]
8002074e:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
80020752:	70 3b       	ld.w	r11,r8[0xc]
80020754:	70 69       	ld.w	r9,r8[0x18]
80020756:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8002075a:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8002075e:	ef 49 ff f4 	st.w	r7[-12],r9
	tmp[1] = q1.v[2] * q2.v[0] - q1.v[0]*q2.v[2];
80020762:	70 3a       	ld.w	r10,r8[0xc]
80020764:	70 59       	ld.w	r9,r8[0x14]
80020766:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8002076a:	70 1b       	ld.w	r11,r8[0x4]
8002076c:	70 79       	ld.w	r9,r8[0x1c]
8002076e:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
80020772:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80020776:	ef 49 ff f8 	st.w	r7[-8],r9
	tmp[2] = q1.v[0] * q2.v[1] - q1.v[1]*q2.v[0];
8002077a:	70 1a       	ld.w	r10,r8[0x4]
8002077c:	70 69       	ld.w	r9,r8[0x18]
8002077e:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
80020782:	70 2b       	ld.w	r11,r8[0x8]
80020784:	70 59       	ld.w	r9,r8[0x14]
80020786:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8002078a:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8002078e:	ef 49 ff fc 	st.w	r7[-4],r9
	out.v[0] = q2.s*q1.v[0] + q1.s *q2.v[0] +tmp[0];
80020792:	70 4a       	ld.w	r10,r8[0x10]
80020794:	70 19       	ld.w	r9,r8[0x4]
80020796:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8002079a:	70 0b       	ld.w	r11,r8[0x0]
8002079c:	70 59       	ld.w	r9,r8[0x14]
8002079e:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
800207a2:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
800207a6:	ee f9 ff f4 	ld.w	r9,r7[-12]
800207aa:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
800207ae:	ef 49 ff e8 	st.w	r7[-24],r9
	out.v[1] = q2.s*q1.v[1] + q1.s *q2.v[1] +tmp[1];
800207b2:	70 4a       	ld.w	r10,r8[0x10]
800207b4:	70 29       	ld.w	r9,r8[0x8]
800207b6:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
800207ba:	70 0b       	ld.w	r11,r8[0x0]
800207bc:	70 69       	ld.w	r9,r8[0x18]
800207be:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
800207c2:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
800207c6:	ee f9 ff f8 	ld.w	r9,r7[-8]
800207ca:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
800207ce:	ef 49 ff ec 	st.w	r7[-20],r9
	out.v[2] = q2.s*q1.v[2] + q1.s *q2.v[2] +tmp[2];
800207d2:	70 4a       	ld.w	r10,r8[0x10]
800207d4:	70 39       	ld.w	r9,r8[0xc]
800207d6:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
800207da:	70 0b       	ld.w	r11,r8[0x0]
800207dc:	70 79       	ld.w	r9,r8[0x1c]
800207de:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
800207e2:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
800207e6:	ee f9 ff fc 	ld.w	r9,r7[-4]
800207ea:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
800207ee:	ef 49 ff f0 	st.w	r7[-16],r9
	out.s= q1.s*q2.s - scalar_product(q1.v, q2.v);
800207f2:	70 0a       	ld.w	r10,r8[0x0]
800207f4:	70 49       	ld.w	r9,r8[0x10]
800207f6:	e5 a2 03 a9 	cop	cp0,cr3,cr10,cr9,0x44
800207fa:	f0 c9 ff f0 	sub	r9,r8,-16
800207fe:	2f c9       	sub	r9,-4
80020800:	2f c8       	sub	r8,-4
80020802:	12 9b       	mov	r11,r9
80020804:	10 9c       	mov	r12,r8
80020806:	c6 9f       	rcall	800206d8 <scalar_product>
80020808:	18 98       	mov	r8,r12
8002080a:	e5 a1 08 38 	cop	cp0,cr8,cr3,cr8,0x42
8002080e:	ef 48 ff e4 	st.w	r7[-28],r8
	
	return out;
80020812:	0a 98       	mov	r8,r5
80020814:	ee c9 00 1c 	sub	r9,r7,28
80020818:	20 08       	sub	r8,0
8002081a:	20 09       	sub	r9,0
8002081c:	72 0a       	ld.w	r10,r9[0x0]
8002081e:	91 0a       	st.w	r8[0x0],r10
80020820:	72 1a       	ld.w	r10,r9[0x4]
80020822:	91 1a       	st.w	r8[0x4],r10
80020824:	72 2a       	ld.w	r10,r9[0x8]
80020826:	91 2a       	st.w	r8[0x8],r10
80020828:	72 39       	ld.w	r9,r9[0xc]
8002082a:	91 39       	st.w	r8[0xc],r9
}
8002082c:	0a 9c       	mov	r12,r5
8002082e:	2f 9d       	sub	sp,-28
80020830:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
80020834:	80 02       	ld.sh	r2,r0[0x0]
80020836:	05 c6       	ld.ub	r6,r2[0x4]

80020838 <quat_inv>:

UQuat_t static inline quat_inv(const UQuat_t q)
{
80020838:	eb cd 40 80 	pushm	r7,lr
8002083c:	1a 97       	mov	r7,sp
8002083e:	20 5d       	sub	sp,20
80020840:	ee c9 ff f8 	sub	r9,r7,-8
80020844:	18 9a       	mov	r10,r12
	int i;
	
	UQuat_t qinv;
	qinv.s = q.s;
80020846:	72 08       	ld.w	r8,r9[0x0]
80020848:	ef 48 ff ec 	st.w	r7[-20],r8
	for (i=0;i<3;i++)
8002084c:	30 08       	mov	r8,0
8002084e:	ef 48 ff fc 	st.w	r7[-4],r8
80020852:	c1 58       	rjmp	8002087c <quat_inv+0x44>
	{
		qinv.v[i] = -q.v[i];
80020854:	ee f8 ff fc 	ld.w	r8,r7[-4]
80020858:	ee fb ff fc 	ld.w	r11,r7[-4]
8002085c:	2f fb       	sub	r11,-1
8002085e:	f2 0b 03 2b 	ld.w	r11,r9[r11<<0x2]
80020862:	ee 1b 80 00 	eorh	r11,0x8000
80020866:	2f f8       	sub	r8,-1
80020868:	a3 68       	lsl	r8,0x2
8002086a:	ee 08 00 08 	add	r8,r7,r8
8002086e:	f1 4b ff ec 	st.w	r8[-20],r11
{
	int i;
	
	UQuat_t qinv;
	qinv.s = q.s;
	for (i=0;i<3;i++)
80020872:	ee f8 ff fc 	ld.w	r8,r7[-4]
80020876:	2f f8       	sub	r8,-1
80020878:	ef 48 ff fc 	st.w	r7[-4],r8
8002087c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80020880:	58 28       	cp.w	r8,2
80020882:	fe 9a ff e9 	brle	80020854 <quat_inv+0x1c>
	{
		qinv.v[i] = -q.v[i];
	}
	return qinv;
80020886:	14 98       	mov	r8,r10
80020888:	ee c9 00 14 	sub	r9,r7,20
8002088c:	20 08       	sub	r8,0
8002088e:	20 09       	sub	r9,0
80020890:	72 0b       	ld.w	r11,r9[0x0]
80020892:	91 0b       	st.w	r8[0x0],r11
80020894:	72 1b       	ld.w	r11,r9[0x4]
80020896:	91 1b       	st.w	r8[0x4],r11
80020898:	72 2b       	ld.w	r11,r9[0x8]
8002089a:	91 2b       	st.w	r8[0x8],r11
8002089c:	72 39       	ld.w	r9,r9[0xc]
8002089e:	91 39       	st.w	r8[0xc],r9
}
800208a0:	14 9c       	mov	r12,r10
800208a2:	2f bd       	sub	sp,-20
800208a4:	e3 cd 80 80 	ldm	sp++,r7,pc

800208a8 <quat_global_to_local>:

UQuat_t static inline quat_global_to_local(const UQuat_t qe, const UQuat_t qvect)
{
800208a8:	eb cd 40 e8 	pushm	r3,r5-r7,lr
800208ac:	1a 97       	mov	r7,sp
800208ae:	20 cd       	sub	sp,48
800208b0:	4b c6       	lddpc	r6,800209a0 <quat_global_to_local+0xf8>
800208b2:	1e 26       	rsub	r6,pc
800208b4:	ee c5 ff ec 	sub	r5,r7,-20
800208b8:	18 93       	mov	r3,r12
	UQuat_t qinv, qtmp;
	
	qinv = quat_inv(qe);
800208ba:	ee ca 00 10 	sub	r10,r7,16
800208be:	20 4d       	sub	sp,16
800208c0:	1a 98       	mov	r8,sp
800208c2:	0a 99       	mov	r9,r5
800208c4:	20 08       	sub	r8,0
800208c6:	20 09       	sub	r9,0
800208c8:	72 0b       	ld.w	r11,r9[0x0]
800208ca:	91 0b       	st.w	r8[0x0],r11
800208cc:	72 1b       	ld.w	r11,r9[0x4]
800208ce:	91 1b       	st.w	r8[0x4],r11
800208d0:	72 2b       	ld.w	r11,r9[0x8]
800208d2:	91 2b       	st.w	r8[0x8],r11
800208d4:	72 39       	ld.w	r9,r9[0xc]
800208d6:	91 39       	st.w	r8[0xc],r9
800208d8:	14 9c       	mov	r12,r10
800208da:	ca ff       	rcall	80020838 <quat_inv>
800208dc:	2f cd       	sub	sp,-16
	qtmp = quat_multi(qinv,qvect);
800208de:	ee ca 00 20 	sub	r10,r7,32
800208e2:	20 4d       	sub	sp,16
800208e4:	1a 98       	mov	r8,sp
800208e6:	ea c9 ff f0 	sub	r9,r5,-16
800208ea:	20 08       	sub	r8,0
800208ec:	20 09       	sub	r9,0
800208ee:	72 0b       	ld.w	r11,r9[0x0]
800208f0:	91 0b       	st.w	r8[0x0],r11
800208f2:	72 1b       	ld.w	r11,r9[0x4]
800208f4:	91 1b       	st.w	r8[0x4],r11
800208f6:	72 2b       	ld.w	r11,r9[0x8]
800208f8:	91 2b       	st.w	r8[0x8],r11
800208fa:	72 39       	ld.w	r9,r9[0xc]
800208fc:	91 39       	st.w	r8[0xc],r9
800208fe:	20 4d       	sub	sp,16
80020900:	1a 98       	mov	r8,sp
80020902:	ee c9 00 10 	sub	r9,r7,16
80020906:	20 08       	sub	r8,0
80020908:	20 09       	sub	r9,0
8002090a:	72 0b       	ld.w	r11,r9[0x0]
8002090c:	91 0b       	st.w	r8[0x0],r11
8002090e:	72 1b       	ld.w	r11,r9[0x4]
80020910:	91 1b       	st.w	r8[0x4],r11
80020912:	72 2b       	ld.w	r11,r9[0x8]
80020914:	91 2b       	st.w	r8[0x8],r11
80020916:	72 39       	ld.w	r9,r9[0xc]
80020918:	91 39       	st.w	r8[0xc],r9
8002091a:	14 9c       	mov	r12,r10
8002091c:	c0 ef       	rcall	80020738 <quat_multi>
8002091e:	2f 8d       	sub	sp,-32
	qtmp = quat_multi(qtmp,qe);
80020920:	ee ca 00 30 	sub	r10,r7,48
80020924:	20 4d       	sub	sp,16
80020926:	1a 98       	mov	r8,sp
80020928:	0a 99       	mov	r9,r5
8002092a:	20 08       	sub	r8,0
8002092c:	20 09       	sub	r9,0
8002092e:	72 0b       	ld.w	r11,r9[0x0]
80020930:	91 0b       	st.w	r8[0x0],r11
80020932:	72 1b       	ld.w	r11,r9[0x4]
80020934:	91 1b       	st.w	r8[0x4],r11
80020936:	72 2b       	ld.w	r11,r9[0x8]
80020938:	91 2b       	st.w	r8[0x8],r11
8002093a:	72 39       	ld.w	r9,r9[0xc]
8002093c:	91 39       	st.w	r8[0xc],r9
8002093e:	20 4d       	sub	sp,16
80020940:	1a 98       	mov	r8,sp
80020942:	ee c9 00 20 	sub	r9,r7,32
80020946:	20 08       	sub	r8,0
80020948:	20 09       	sub	r9,0
8002094a:	72 0b       	ld.w	r11,r9[0x0]
8002094c:	91 0b       	st.w	r8[0x0],r11
8002094e:	72 1b       	ld.w	r11,r9[0x4]
80020950:	91 1b       	st.w	r8[0x4],r11
80020952:	72 2b       	ld.w	r11,r9[0x8]
80020954:	91 2b       	st.w	r8[0x8],r11
80020956:	72 39       	ld.w	r9,r9[0xc]
80020958:	91 39       	st.w	r8[0xc],r9
8002095a:	14 9c       	mov	r12,r10
8002095c:	ce ee       	rcall	80020738 <quat_multi>
8002095e:	2f 8d       	sub	sp,-32
80020960:	ee c8 00 20 	sub	r8,r7,32
80020964:	ee c9 00 30 	sub	r9,r7,48
80020968:	20 08       	sub	r8,0
8002096a:	20 09       	sub	r9,0
8002096c:	72 0a       	ld.w	r10,r9[0x0]
8002096e:	91 0a       	st.w	r8[0x0],r10
80020970:	72 1a       	ld.w	r10,r9[0x4]
80020972:	91 1a       	st.w	r8[0x4],r10
80020974:	72 2a       	ld.w	r10,r9[0x8]
80020976:	91 2a       	st.w	r8[0x8],r10
80020978:	72 39       	ld.w	r9,r9[0xc]
8002097a:	91 39       	st.w	r8[0xc],r9

	return qtmp;
8002097c:	06 98       	mov	r8,r3
8002097e:	ee c9 00 20 	sub	r9,r7,32
80020982:	20 08       	sub	r8,0
80020984:	20 09       	sub	r9,0
80020986:	72 0a       	ld.w	r10,r9[0x0]
80020988:	91 0a       	st.w	r8[0x0],r10
8002098a:	72 1a       	ld.w	r10,r9[0x4]
8002098c:	91 1a       	st.w	r8[0x4],r10
8002098e:	72 2a       	ld.w	r10,r9[0x8]
80020990:	91 2a       	st.w	r8[0x8],r10
80020992:	72 39       	ld.w	r9,r9[0xc]
80020994:	91 39       	st.w	r8[0xc],r9
}
80020996:	06 9c       	mov	r12,r3
80020998:	2f 4d       	sub	sp,-48
8002099a:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
8002099e:	00 00       	add	r0,r0
800209a0:	80 02       	ld.sh	r2,r0[0x0]
800209a2:	07 36       	ld.ub	r6,r3++

800209a4 <quat_local_to_global>:

UQuat_t static inline quat_local_to_global(const UQuat_t qe, const UQuat_t qvect)
{
800209a4:	eb cd 40 e8 	pushm	r3,r5-r7,lr
800209a8:	1a 97       	mov	r7,sp
800209aa:	20 cd       	sub	sp,48
800209ac:	4b c6       	lddpc	r6,80020a9c <quat_local_to_global+0xf8>
800209ae:	1e 26       	rsub	r6,pc
800209b0:	ee c5 ff ec 	sub	r5,r7,-20
800209b4:	18 93       	mov	r3,r12
	UQuat_t qinv, qtmp;
	
	qinv = quat_inv(qe);
800209b6:	ee ca 00 10 	sub	r10,r7,16
800209ba:	20 4d       	sub	sp,16
800209bc:	1a 98       	mov	r8,sp
800209be:	0a 99       	mov	r9,r5
800209c0:	20 08       	sub	r8,0
800209c2:	20 09       	sub	r9,0
800209c4:	72 0b       	ld.w	r11,r9[0x0]
800209c6:	91 0b       	st.w	r8[0x0],r11
800209c8:	72 1b       	ld.w	r11,r9[0x4]
800209ca:	91 1b       	st.w	r8[0x4],r11
800209cc:	72 2b       	ld.w	r11,r9[0x8]
800209ce:	91 2b       	st.w	r8[0x8],r11
800209d0:	72 39       	ld.w	r9,r9[0xc]
800209d2:	91 39       	st.w	r8[0xc],r9
800209d4:	14 9c       	mov	r12,r10
800209d6:	c3 1f       	rcall	80020838 <quat_inv>
800209d8:	2f cd       	sub	sp,-16
	qtmp = quat_multi(qe, qvect);
800209da:	ee ca 00 20 	sub	r10,r7,32
800209de:	20 4d       	sub	sp,16
800209e0:	1a 98       	mov	r8,sp
800209e2:	ea c9 ff f0 	sub	r9,r5,-16
800209e6:	20 08       	sub	r8,0
800209e8:	20 09       	sub	r9,0
800209ea:	72 0b       	ld.w	r11,r9[0x0]
800209ec:	91 0b       	st.w	r8[0x0],r11
800209ee:	72 1b       	ld.w	r11,r9[0x4]
800209f0:	91 1b       	st.w	r8[0x4],r11
800209f2:	72 2b       	ld.w	r11,r9[0x8]
800209f4:	91 2b       	st.w	r8[0x8],r11
800209f6:	72 39       	ld.w	r9,r9[0xc]
800209f8:	91 39       	st.w	r8[0xc],r9
800209fa:	20 4d       	sub	sp,16
800209fc:	1a 98       	mov	r8,sp
800209fe:	0a 99       	mov	r9,r5
80020a00:	20 08       	sub	r8,0
80020a02:	20 09       	sub	r9,0
80020a04:	72 0b       	ld.w	r11,r9[0x0]
80020a06:	91 0b       	st.w	r8[0x0],r11
80020a08:	72 1b       	ld.w	r11,r9[0x4]
80020a0a:	91 1b       	st.w	r8[0x4],r11
80020a0c:	72 2b       	ld.w	r11,r9[0x8]
80020a0e:	91 2b       	st.w	r8[0x8],r11
80020a10:	72 39       	ld.w	r9,r9[0xc]
80020a12:	91 39       	st.w	r8[0xc],r9
80020a14:	14 9c       	mov	r12,r10
80020a16:	c9 1e       	rcall	80020738 <quat_multi>
80020a18:	2f 8d       	sub	sp,-32
	qtmp = quat_multi(qtmp, qinv);
80020a1a:	ee ca 00 30 	sub	r10,r7,48
80020a1e:	20 4d       	sub	sp,16
80020a20:	1a 98       	mov	r8,sp
80020a22:	ee c9 00 10 	sub	r9,r7,16
80020a26:	20 08       	sub	r8,0
80020a28:	20 09       	sub	r9,0
80020a2a:	72 0b       	ld.w	r11,r9[0x0]
80020a2c:	91 0b       	st.w	r8[0x0],r11
80020a2e:	72 1b       	ld.w	r11,r9[0x4]
80020a30:	91 1b       	st.w	r8[0x4],r11
80020a32:	72 2b       	ld.w	r11,r9[0x8]
80020a34:	91 2b       	st.w	r8[0x8],r11
80020a36:	72 39       	ld.w	r9,r9[0xc]
80020a38:	91 39       	st.w	r8[0xc],r9
80020a3a:	20 4d       	sub	sp,16
80020a3c:	1a 98       	mov	r8,sp
80020a3e:	ee c9 00 20 	sub	r9,r7,32
80020a42:	20 08       	sub	r8,0
80020a44:	20 09       	sub	r9,0
80020a46:	72 0b       	ld.w	r11,r9[0x0]
80020a48:	91 0b       	st.w	r8[0x0],r11
80020a4a:	72 1b       	ld.w	r11,r9[0x4]
80020a4c:	91 1b       	st.w	r8[0x4],r11
80020a4e:	72 2b       	ld.w	r11,r9[0x8]
80020a50:	91 2b       	st.w	r8[0x8],r11
80020a52:	72 39       	ld.w	r9,r9[0xc]
80020a54:	91 39       	st.w	r8[0xc],r9
80020a56:	14 9c       	mov	r12,r10
80020a58:	c7 0e       	rcall	80020738 <quat_multi>
80020a5a:	2f 8d       	sub	sp,-32
80020a5c:	ee c8 00 20 	sub	r8,r7,32
80020a60:	ee c9 00 30 	sub	r9,r7,48
80020a64:	20 08       	sub	r8,0
80020a66:	20 09       	sub	r9,0
80020a68:	72 0a       	ld.w	r10,r9[0x0]
80020a6a:	91 0a       	st.w	r8[0x0],r10
80020a6c:	72 1a       	ld.w	r10,r9[0x4]
80020a6e:	91 1a       	st.w	r8[0x4],r10
80020a70:	72 2a       	ld.w	r10,r9[0x8]
80020a72:	91 2a       	st.w	r8[0x8],r10
80020a74:	72 39       	ld.w	r9,r9[0xc]
80020a76:	91 39       	st.w	r8[0xc],r9
	
	return qtmp;
80020a78:	06 98       	mov	r8,r3
80020a7a:	ee c9 00 20 	sub	r9,r7,32
80020a7e:	20 08       	sub	r8,0
80020a80:	20 09       	sub	r9,0
80020a82:	72 0a       	ld.w	r10,r9[0x0]
80020a84:	91 0a       	st.w	r8[0x0],r10
80020a86:	72 1a       	ld.w	r10,r9[0x4]
80020a88:	91 1a       	st.w	r8[0x4],r10
80020a8a:	72 2a       	ld.w	r10,r9[0x8]
80020a8c:	91 2a       	st.w	r8[0x8],r10
80020a8e:	72 39       	ld.w	r9,r9[0xc]
80020a90:	91 39       	st.w	r8[0xc],r9
}
80020a92:	06 9c       	mov	r12,r3
80020a94:	2f 4d       	sub	sp,-48
80020a96:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
80020a9a:	00 00       	add	r0,r0
80020a9c:	80 02       	ld.sh	r2,r0[0x0]
80020a9e:	08 32       	cp.w	r2,r4

80020aa0 <fast_sqrt>:

// fast newton iteration for approximate square root
float static inline fast_sqrt(float input) {
80020aa0:	eb cd 40 c0 	pushm	r6-r7,lr
80020aa4:	1a 97       	mov	r7,sp
80020aa6:	20 2d       	sub	sp,8
80020aa8:	4b 26       	lddpc	r6,80020b70 <fast_sqrt+0xd0>
80020aaa:	1e 26       	rsub	r6,pc
80020aac:	ef 4c ff f8 	st.w	r7[-8],r12
	if (input<0) {
80020ab0:	30 18       	mov	r8,1
80020ab2:	ee fa ff f8 	ld.w	r10,r7[-8]
80020ab6:	30 09       	mov	r9,0
80020ab8:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80020abc:	e0 8c 00 03 	brvs	80020ac2 <fast_sqrt+0x22>
80020ac0:	c0 25       	brlt	80020ac4 <fast_sqrt+0x24>
80020ac2:	30 08       	mov	r8,0
80020ac4:	5c 58       	castu.b	r8
80020ac6:	c0 30       	breq	80020acc <fast_sqrt+0x2c>
		//dbg_print("negative root");
		return 0.0;
80020ac8:	30 08       	mov	r8,0
80020aca:	c4 f8       	rjmp	80020b68 <fast_sqrt+0xc8>
	}
	float result=1.0;
80020acc:	fc 18 3f 80 	movh	r8,0x3f80
80020ad0:	ef 48 ff fc 	st.w	r7[-4],r8
	result=0.5*(result+(input/result));
80020ad4:	ee fb ff fc 	ld.w	r11,r7[-4]
80020ad8:	ee fc ff f8 	ld.w	r12,r7[-8]
80020adc:	f0 16 00 08 	mcall	r6[32]
80020ae0:	18 98       	mov	r8,r12
80020ae2:	10 99       	mov	r9,r8
80020ae4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80020ae8:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80020aec:	fc 18 3f 00 	movh	r8,0x3f00
80020af0:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80020af4:	ef 48 ff fc 	st.w	r7[-4],r8
	result=0.5*(result+(input/result));
80020af8:	ee fb ff fc 	ld.w	r11,r7[-4]
80020afc:	ee fc ff f8 	ld.w	r12,r7[-8]
80020b00:	f0 16 00 08 	mcall	r6[32]
80020b04:	18 98       	mov	r8,r12
80020b06:	10 99       	mov	r9,r8
80020b08:	ee f8 ff fc 	ld.w	r8,r7[-4]
80020b0c:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80020b10:	fc 18 3f 00 	movh	r8,0x3f00
80020b14:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80020b18:	ef 48 ff fc 	st.w	r7[-4],r8
	result=0.5*(result+(input/result));
80020b1c:	ee fb ff fc 	ld.w	r11,r7[-4]
80020b20:	ee fc ff f8 	ld.w	r12,r7[-8]
80020b24:	f0 16 00 08 	mcall	r6[32]
80020b28:	18 98       	mov	r8,r12
80020b2a:	10 99       	mov	r9,r8
80020b2c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80020b30:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80020b34:	fc 18 3f 00 	movh	r8,0x3f00
80020b38:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80020b3c:	ef 48 ff fc 	st.w	r7[-4],r8
	result=0.5*(result+(input/result));
80020b40:	ee fb ff fc 	ld.w	r11,r7[-4]
80020b44:	ee fc ff f8 	ld.w	r12,r7[-8]
80020b48:	f0 16 00 08 	mcall	r6[32]
80020b4c:	18 98       	mov	r8,r12
80020b4e:	10 99       	mov	r9,r8
80020b50:	ee f8 ff fc 	ld.w	r8,r7[-4]
80020b54:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80020b58:	fc 18 3f 00 	movh	r8,0x3f00
80020b5c:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80020b60:	ef 48 ff fc 	st.w	r7[-4],r8
	return result;
80020b64:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80020b68:	10 9c       	mov	r12,r8
80020b6a:	2f ed       	sub	sp,-8
80020b6c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80020b70:	80 02       	ld.sh	r2,r0[0x0]
80020b72:	09 2e       	ld.uh	lr,r4++

80020b74 <quat_normalise>:
	{
		u[i] = v[i] / norm;
	}
}

static inline UQuat_t quat_normalise(const UQuat_t q) {
80020b74:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
80020b78:	1a 97       	mov	r7,sp
80020b7a:	20 6d       	sub	sp,24
80020b7c:	4b f6       	lddpc	r6,80020c78 <quat_normalise+0x104>
80020b7e:	1e 26       	rsub	r6,pc
80020b80:	ee c5 ff e8 	sub	r5,r7,-24
80020b84:	18 92       	mov	r2,r12
	UQuat_t result={.s=1.0, .v={0.0, 0.0, 0.0} };
80020b86:	fc 18 3f 80 	movh	r8,0x3f80
80020b8a:	ef 48 ff e8 	st.w	r7[-24],r8
80020b8e:	30 08       	mov	r8,0
80020b90:	ef 48 ff ec 	st.w	r7[-20],r8
80020b94:	30 08       	mov	r8,0
80020b96:	ef 48 ff f0 	st.w	r7[-16],r8
80020b9a:	30 08       	mov	r8,0
80020b9c:	ef 48 ff f4 	st.w	r7[-12],r8
	float snorm= SQR(q.s) + SQR(q.v[0]) + SQR(q.v[1]) + SQR(q.v[2]);
80020ba0:	6a 09       	ld.w	r9,r5[0x0]
80020ba2:	6a 08       	ld.w	r8,r5[0x0]
80020ba4:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80020ba8:	6a 1a       	ld.w	r10,r5[0x4]
80020baa:	6a 18       	ld.w	r8,r5[0x4]
80020bac:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80020bb0:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80020bb4:	6a 2a       	ld.w	r10,r5[0x8]
80020bb6:	6a 28       	ld.w	r8,r5[0x8]
80020bb8:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80020bbc:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80020bc0:	6a 3a       	ld.w	r10,r5[0xc]
80020bc2:	6a 38       	ld.w	r8,r5[0xc]
80020bc4:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80020bc8:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80020bcc:	ef 48 ff f8 	st.w	r7[-8],r8
	if (snorm >0.0000001) {
80020bd0:	ee fc ff f8 	ld.w	r12,r7[-8]
80020bd4:	f0 16 00 02 	mcall	r6[8]
80020bd8:	14 98       	mov	r8,r10
80020bda:	16 99       	mov	r9,r11
80020bdc:	30 03       	mov	r3,0
80020bde:	e0 6a af 48 	mov	r10,44872
80020be2:	ea 1a 9a bc 	orh	r10,0x9abc
80020be6:	e0 6b d7 f2 	mov	r11,55282
80020bea:	ea 1b 3e 7a 	orh	r11,0x3e7a
80020bee:	f0 16 00 1c 	mcall	r6[112]
80020bf2:	18 98       	mov	r8,r12
80020bf4:	58 08       	cp.w	r8,0
80020bf6:	c0 20       	breq	80020bfa <quat_normalise+0x86>
80020bf8:	30 13       	mov	r3,1
80020bfa:	f1 d3 c0 08 	bfextu	r8,r3,0x0,0x8
80020bfe:	c2 b0       	breq	80020c54 <quat_normalise+0xe0>
		float norm=fast_sqrt(snorm);
80020c00:	ee fc ff f8 	ld.w	r12,r7[-8]
80020c04:	c4 ef       	rcall	80020aa0 <fast_sqrt>
80020c06:	18 98       	mov	r8,r12
80020c08:	ef 48 ff fc 	st.w	r7[-4],r8
		result.s=q.s/norm;
80020c0c:	6a 08       	ld.w	r8,r5[0x0]
80020c0e:	ee fb ff fc 	ld.w	r11,r7[-4]
80020c12:	10 9c       	mov	r12,r8
80020c14:	f0 16 00 08 	mcall	r6[32]
80020c18:	18 98       	mov	r8,r12
80020c1a:	ef 48 ff e8 	st.w	r7[-24],r8
		result.v[0]=q.v[0]/norm;		result.v[1]=q.v[1]/norm;		result.v[2]=q.v[2]/norm;
80020c1e:	6a 18       	ld.w	r8,r5[0x4]
80020c20:	ee fb ff fc 	ld.w	r11,r7[-4]
80020c24:	10 9c       	mov	r12,r8
80020c26:	f0 16 00 08 	mcall	r6[32]
80020c2a:	18 98       	mov	r8,r12
80020c2c:	ef 48 ff ec 	st.w	r7[-20],r8
80020c30:	6a 28       	ld.w	r8,r5[0x8]
80020c32:	ee fb ff fc 	ld.w	r11,r7[-4]
80020c36:	10 9c       	mov	r12,r8
80020c38:	f0 16 00 08 	mcall	r6[32]
80020c3c:	18 98       	mov	r8,r12
80020c3e:	ef 48 ff f0 	st.w	r7[-16],r8
80020c42:	6a 38       	ld.w	r8,r5[0xc]
80020c44:	ee fb ff fc 	ld.w	r11,r7[-4]
80020c48:	10 9c       	mov	r12,r8
80020c4a:	f0 16 00 08 	mcall	r6[32]
80020c4e:	18 98       	mov	r8,r12
80020c50:	ef 48 ff f4 	st.w	r7[-12],r8

	}
	return result;
80020c54:	04 98       	mov	r8,r2
80020c56:	ee c9 00 18 	sub	r9,r7,24
80020c5a:	20 08       	sub	r8,0
80020c5c:	20 09       	sub	r9,0
80020c5e:	72 0a       	ld.w	r10,r9[0x0]
80020c60:	91 0a       	st.w	r8[0x0],r10
80020c62:	72 1a       	ld.w	r10,r9[0x4]
80020c64:	91 1a       	st.w	r8[0x4],r10
80020c66:	72 2a       	ld.w	r10,r9[0x8]
80020c68:	91 2a       	st.w	r8[0x8],r10
80020c6a:	72 39       	ld.w	r9,r9[0xc]
80020c6c:	91 39       	st.w	r8[0xc],r9
}
80020c6e:	04 9c       	mov	r12,r2
80020c70:	2f ad       	sub	sp,-24
80020c72:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
80020c76:	00 00       	add	r0,r0
80020c78:	80 02       	ld.sh	r2,r0[0x0]
80020c7a:	0a 02       	add	r2,r5

80020c7c <clip>:
		return b;
	}
}


static float inline clip(float input_value, float clip_value) {
80020c7c:	eb cd 40 80 	pushm	r7,lr
80020c80:	1a 97       	mov	r7,sp
80020c82:	20 2d       	sub	sp,8
80020c84:	ef 4c ff fc 	st.w	r7[-4],r12
80020c88:	ef 4b ff f8 	st.w	r7[-8],r11
	
	if (input_value>clip_value)  return clip_value;     
80020c8c:	30 18       	mov	r8,1
80020c8e:	ee fa ff fc 	ld.w	r10,r7[-4]
80020c92:	ee f9 ff f8 	ld.w	r9,r7[-8]
80020c96:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80020c9a:	e0 8c 00 04 	brvs	80020ca2 <clip+0x26>
80020c9e:	e0 89 00 03 	brgt	80020ca4 <clip+0x28>
80020ca2:	30 08       	mov	r8,0
80020ca4:	5c 58       	castu.b	r8
80020ca6:	c0 40       	breq	80020cae <clip+0x32>
80020ca8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80020cac:	c1 98       	rjmp	80020cde <clip+0x62>
	if (input_value<-clip_value) return -clip_value; 
80020cae:	ee f8 ff f8 	ld.w	r8,r7[-8]
80020cb2:	10 9a       	mov	r10,r8
80020cb4:	ee 1a 80 00 	eorh	r10,0x8000
80020cb8:	30 18       	mov	r8,1
80020cba:	ee f9 ff fc 	ld.w	r9,r7[-4]
80020cbe:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80020cc2:	e0 8c 00 04 	brvs	80020cca <clip+0x4e>
80020cc6:	e0 89 00 03 	brgt	80020ccc <clip+0x50>
80020cca:	30 08       	mov	r8,0
80020ccc:	5c 58       	castu.b	r8
80020cce:	c0 60       	breq	80020cda <clip+0x5e>
80020cd0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80020cd4:	ee 18 80 00 	eorh	r8,0x8000
80020cd8:	c0 38       	rjmp	80020cde <clip+0x62>
	return input_value;
80020cda:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80020cde:	10 9c       	mov	r12,r8
80020ce0:	2f ed       	sub	sp,-8
80020ce2:	e3 cd 80 80 	ldm	sp++,r7,pc

80020ce6 <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
80020ce6:	eb cd 40 c0 	pushm	r6-r7,lr
80020cea:	1a 97       	mov	r7,sp
80020cec:	20 6d       	sub	sp,24
80020cee:	49 f6       	lddpc	r6,80020d68 <interpolate+0x82>
80020cf0:	1e 26       	rsub	r6,pc
80020cf2:	ef 4c ff f8 	st.w	r7[-8],r12
80020cf6:	ef 4b ff f4 	st.w	r7[-12],r11
80020cfa:	ef 4a ff f0 	st.w	r7[-16],r10
80020cfe:	ef 49 ff ec 	st.w	r7[-20],r9
80020d02:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
80020d06:	ee f9 ff f4 	ld.w	r9,r7[-12]
80020d0a:	ee f8 ff f0 	ld.w	r8,r7[-16]
80020d0e:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
80020d12:	c0 41       	brne	80020d1a <interpolate+0x34>
	{
		return y1;
80020d14:	ee f8 ff ec 	ld.w	r8,r7[-20]
80020d18:	c2 38       	rjmp	80020d5e <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
80020d1a:	ee f9 ff e8 	ld.w	r9,r7[-24]
80020d1e:	ee f8 ff ec 	ld.w	r8,r7[-20]
80020d22:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80020d26:	ee fa ff f8 	ld.w	r10,r7[-8]
80020d2a:	ee f8 ff f4 	ld.w	r8,r7[-12]
80020d2e:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80020d32:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80020d36:	ee fa ff f0 	ld.w	r10,r7[-16]
80020d3a:	ee f9 ff f4 	ld.w	r9,r7[-12]
80020d3e:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80020d42:	12 9b       	mov	r11,r9
80020d44:	10 9c       	mov	r12,r8
80020d46:	f0 16 00 08 	mcall	r6[32]
80020d4a:	18 98       	mov	r8,r12
80020d4c:	10 99       	mov	r9,r8
80020d4e:	ee f8 ff ec 	ld.w	r8,r7[-20]
80020d52:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80020d56:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
80020d5a:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
80020d5e:	10 9c       	mov	r12,r8
80020d60:	2f ad       	sub	sp,-24
80020d62:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80020d66:	00 00       	add	r0,r0
80020d68:	80 02       	ld.sh	r2,r0[0x0]
80020d6a:	0b 74       	ld.ub	r4,--r5

80020d6c <mav_array_memcpy>:

/*
  like memcpy(), but if src is NULL, do a memset to zero
*/
static void mav_array_memcpy(void *dest, const void *src, size_t n)
{
80020d6c:	eb cd 40 c0 	pushm	r6-r7,lr
80020d70:	1a 97       	mov	r7,sp
80020d72:	20 3d       	sub	sp,12
80020d74:	49 06       	lddpc	r6,80020db4 <mav_array_memcpy+0x48>
80020d76:	1e 26       	rsub	r6,pc
80020d78:	ef 4c ff fc 	st.w	r7[-4],r12
80020d7c:	ef 4b ff f8 	st.w	r7[-8],r11
80020d80:	ef 4a ff f4 	st.w	r7[-12],r10
	if (src == NULL) {
80020d84:	ee f8 ff f8 	ld.w	r8,r7[-8]
80020d88:	58 08       	cp.w	r8,0
80020d8a:	c0 91       	brne	80020d9c <mav_array_memcpy+0x30>
		memset(dest, 0, n);
80020d8c:	ee fa ff f4 	ld.w	r10,r7[-12]
80020d90:	30 0b       	mov	r11,0
80020d92:	ee fc ff fc 	ld.w	r12,r7[-4]
80020d96:	f0 16 00 2f 	mcall	r6[188]
80020d9a:	c0 98       	rjmp	80020dac <mav_array_memcpy+0x40>
	} else {
		memcpy(dest, src, n);
80020d9c:	ee fa ff f4 	ld.w	r10,r7[-12]
80020da0:	ee fb ff f8 	ld.w	r11,r7[-8]
80020da4:	ee fc ff fc 	ld.w	r12,r7[-4]
80020da8:	f0 16 00 20 	mcall	r6[128]
	}
}
80020dac:	2f dd       	sub	sp,-12
80020dae:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80020db2:	00 00       	add	r0,r0
80020db4:	80 02       	ld.sh	r2,r0[0x0]
80020db6:	0b fa       	ld.ub	r10,r5[0x7]

80020db8 <init_simulation>:
#include "coord_conventions.h"
#include "position_estimation.h"
#include "central_data.h"
#include "maths.h"

void init_simulation(simulation_model_t *sim, Quat_Attitude_t *start_attitude) {
80020db8:	eb cd 40 c0 	pushm	r6-r7,lr
80020dbc:	1a 97       	mov	r7,sp
80020dbe:	20 3d       	sub	sp,12
80020dc0:	4b f6       	lddpc	r6,80020ebc <init_simulation+0x104>
80020dc2:	1e 26       	rsub	r6,pc
80020dc4:	ef 4c ff f8 	st.w	r7[-8],r12
80020dc8:	ef 4b ff f4 	st.w	r7[-12],r11
	int i;
	(*sim)=vehicle_model_parameters;
80020dcc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80020dd0:	ec f9 08 88 	ld.w	r9,r6[2184]
80020dd4:	e0 6a 01 94 	mov	r10,404
80020dd8:	12 9b       	mov	r11,r9
80020dda:	10 9c       	mov	r12,r8
80020ddc:	f0 16 00 20 	mcall	r6[128]
	for (i=0; i<3; i++) {
80020de0:	30 08       	mov	r8,0
80020de2:	ef 48 ff fc 	st.w	r7[-4],r8
80020de6:	c2 d8       	rjmp	80020e40 <init_simulation+0x88>
		sim->rates_bf[i]=0;
80020de8:	ee f9 ff fc 	ld.w	r9,r7[-4]
80020dec:	ee f8 ff f8 	ld.w	r8,r7[-8]
80020df0:	2f d9       	sub	r9,-3
80020df2:	30 0a       	mov	r10,0
80020df4:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		sim->torques_bf[i]=0;
80020df8:	ee f9 ff fc 	ld.w	r9,r7[-4]
80020dfc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80020e00:	30 0a       	mov	r10,0
80020e02:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		sim->lin_forces_bf[i]=0;
80020e06:	ee f9 ff fc 	ld.w	r9,r7[-4]
80020e0a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80020e0e:	2f a9       	sub	r9,-6
80020e10:	30 0a       	mov	r10,0
80020e12:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		sim->vel_bf[i]=0.0;
80020e16:	ee f9 ff fc 	ld.w	r9,r7[-4]
80020e1a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80020e1e:	2f 79       	sub	r9,-9
80020e20:	30 0a       	mov	r10,0
80020e22:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		sim->pos[i]=0.0;
80020e26:	ee f9 ff fc 	ld.w	r9,r7[-4]
80020e2a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80020e2e:	2f 19       	sub	r9,-15
80020e30:	30 0a       	mov	r10,0
80020e32:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
#include "maths.h"

void init_simulation(simulation_model_t *sim, Quat_Attitude_t *start_attitude) {
	int i;
	(*sim)=vehicle_model_parameters;
	for (i=0; i<3; i++) {
80020e36:	ee f8 ff fc 	ld.w	r8,r7[-4]
80020e3a:	2f f8       	sub	r8,-1
80020e3c:	ef 48 ff fc 	st.w	r7[-4],r8
80020e40:	ee f8 ff fc 	ld.w	r8,r7[-4]
80020e44:	58 28       	cp.w	r8,2
80020e46:	fe 9a ff d1 	brle	80020de8 <init_simulation+0x30>
		sim->pos[i]=0.0;
		
	}

	// set initial conditions to given attitude (including scalefactors and biases for simulated IMU)
	sim->attitude=*start_attitude;
80020e4a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80020e4e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80020e52:	2b 88       	sub	r8,-72
80020e54:	e0 6a 00 cc 	mov	r10,204
80020e58:	12 9b       	mov	r11,r9
80020e5a:	10 9c       	mov	r12,r8
80020e5c:	f0 16 00 20 	mcall	r6[128]

	for (i=0; i<ROTORCOUNT; i++) {
80020e60:	30 08       	mov	r8,0
80020e62:	ef 48 ff fc 	st.w	r7[-4],r8
80020e66:	c0 e8       	rjmp	80020e82 <init_simulation+0xca>
		sim->rotorspeeds[i]=0.0;			
80020e68:	ee f9 ff fc 	ld.w	r9,r7[-4]
80020e6c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80020e70:	2a f9       	sub	r9,-81
80020e72:	30 0a       	mov	r10,0
80020e74:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	}

	// set initial conditions to given attitude (including scalefactors and biases for simulated IMU)
	sim->attitude=*start_attitude;

	for (i=0; i<ROTORCOUNT; i++) {
80020e78:	ee f8 ff fc 	ld.w	r8,r7[-4]
80020e7c:	2f f8       	sub	r8,-1
80020e7e:	ef 48 ff fc 	st.w	r7[-4],r8
80020e82:	ee f8 ff fc 	ld.w	r8,r7[-4]
80020e86:	58 38       	cp.w	r8,3
80020e88:	fe 9a ff f0 	brle	80020e68 <init_simulation+0xb0>
		sim->rotorspeeds[i]=0.0;			
	}
	sim->last_update=get_time();
80020e8c:	f0 16 01 f9 	mcall	r6[2020]
80020e90:	14 98       	mov	r8,r10
80020e92:	16 99       	mov	r9,r11
80020e94:	10 9a       	mov	r10,r8
80020e96:	12 9b       	mov	r11,r9
80020e98:	f0 16 00 74 	mcall	r6[464]
80020e9c:	18 99       	mov	r9,r12
80020e9e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80020ea2:	f1 49 01 8c 	st.w	r8[396],r9
	sim->dt=0.01;
80020ea6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80020eaa:	e0 69 d7 0a 	mov	r9,55050
80020eae:	ea 19 3c 23 	orh	r9,0x3c23
80020eb2:	f1 49 01 90 	st.w	r8[400],r9
}
80020eb6:	2f dd       	sub	sp,-12
80020eb8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80020ebc:	80 02       	ld.sh	r2,r0[0x0]
80020ebe:	0c 46       	or	r6,r6

80020ec0 <lift_drag_base>:



// inverse function of mix_to_servos in stabilisation to recover torques and forces

static inline float lift_drag_base(simulation_model_t *sim, float rpm, float sqr_lat_airspeed, float axial_airspeed) {
80020ec0:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
80020ec4:	1a 97       	mov	r7,sp
80020ec6:	20 6d       	sub	sp,24
80020ec8:	4e 26       	lddpc	r6,80021050 <lift_drag_base+0x190>
80020eca:	1e 26       	rsub	r6,pc
80020ecc:	ef 4c ff f4 	st.w	r7[-12],r12
80020ed0:	ef 4b ff f0 	st.w	r7[-16],r11
80020ed4:	ef 4a ff ec 	st.w	r7[-20],r10
80020ed8:	ef 49 ff e8 	st.w	r7[-24],r9
	if (rpm < 0.1) return 0.0;
80020edc:	ee fc ff f0 	ld.w	r12,r7[-16]
80020ee0:	f0 16 00 02 	mcall	r6[8]
80020ee4:	30 05       	mov	r5,0
80020ee6:	e0 68 99 9a 	mov	r8,39322
80020eea:	ea 18 99 99 	orh	r8,0x9999
80020eee:	e0 69 99 99 	mov	r9,39321
80020ef2:	ea 19 3f b9 	orh	r9,0x3fb9
80020ef6:	f0 16 00 1c 	mcall	r6[112]
80020efa:	18 98       	mov	r8,r12
80020efc:	58 08       	cp.w	r8,0
80020efe:	c0 20       	breq	80020f02 <lift_drag_base+0x42>
80020f00:	30 15       	mov	r5,1
80020f02:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
80020f06:	c0 30       	breq	80020f0c <lift_drag_base+0x4c>
80020f08:	30 08       	mov	r8,0
80020f0a:	c9 f8       	rjmp	80021048 <lift_drag_base+0x188>
	float mean_vel=sim->rotor_diameter *PI * rpm/60.0;
80020f0c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80020f10:	f0 f8 01 68 	ld.w	r8,r8[360]
80020f14:	10 9c       	mov	r12,r8
80020f16:	f0 16 00 02 	mcall	r6[8]
80020f1a:	e0 68 2d 18 	mov	r8,11544
80020f1e:	ea 18 54 44 	orh	r8,0x5444
80020f22:	e0 69 21 fb 	mov	r9,8699
80020f26:	ea 19 40 09 	orh	r9,0x4009
80020f2a:	f0 16 00 03 	mcall	r6[12]
80020f2e:	14 98       	mov	r8,r10
80020f30:	16 99       	mov	r9,r11
80020f32:	10 92       	mov	r2,r8
80020f34:	12 93       	mov	r3,r9
80020f36:	ee fc ff f0 	ld.w	r12,r7[-16]
80020f3a:	f0 16 00 02 	mcall	r6[8]
80020f3e:	14 98       	mov	r8,r10
80020f40:	16 99       	mov	r9,r11
80020f42:	04 9a       	mov	r10,r2
80020f44:	06 9b       	mov	r11,r3
80020f46:	f0 16 00 03 	mcall	r6[12]
80020f4a:	14 98       	mov	r8,r10
80020f4c:	16 99       	mov	r9,r11
80020f4e:	10 9a       	mov	r10,r8
80020f50:	12 9b       	mov	r11,r9
80020f52:	30 08       	mov	r8,0
80020f54:	fc 19 40 4e 	movh	r9,0x404e
80020f58:	f0 16 00 0c 	mcall	r6[48]
80020f5c:	14 98       	mov	r8,r10
80020f5e:	16 99       	mov	r9,r11
80020f60:	10 9a       	mov	r10,r8
80020f62:	12 9b       	mov	r11,r9
80020f64:	f0 16 00 09 	mcall	r6[36]
80020f68:	18 98       	mov	r8,r12
80020f6a:	ef 48 ff f8 	st.w	r7[-8],r8
	float exit_vel=rpm/60.0 *sim -> rotor_pitch;           
80020f6e:	ee fc ff f0 	ld.w	r12,r7[-16]
80020f72:	f0 16 00 02 	mcall	r6[8]
80020f76:	30 08       	mov	r8,0
80020f78:	fc 19 40 4e 	movh	r9,0x404e
80020f7c:	f0 16 00 0c 	mcall	r6[48]
80020f80:	14 98       	mov	r8,r10
80020f82:	16 99       	mov	r9,r11
80020f84:	10 92       	mov	r2,r8
80020f86:	12 93       	mov	r3,r9
80020f88:	ee f8 ff f4 	ld.w	r8,r7[-12]
80020f8c:	f0 f8 01 70 	ld.w	r8,r8[368]
80020f90:	10 9c       	mov	r12,r8
80020f92:	f0 16 00 02 	mcall	r6[8]
80020f96:	14 98       	mov	r8,r10
80020f98:	16 99       	mov	r9,r11
80020f9a:	04 9a       	mov	r10,r2
80020f9c:	06 9b       	mov	r11,r3
80020f9e:	f0 16 00 03 	mcall	r6[12]
80020fa2:	14 98       	mov	r8,r10
80020fa4:	16 99       	mov	r9,r11
80020fa6:	10 9a       	mov	r10,r8
80020fa8:	12 9b       	mov	r11,r9
80020faa:	f0 16 00 09 	mcall	r6[36]
80020fae:	18 98       	mov	r8,r12
80020fb0:	ef 48 ff fc 	st.w	r7[-4],r8
	return (0.5*AIR_DENSITY*(mean_vel*mean_vel +sqr_lat_airspeed) * sim->rotor_foil_area  * (1.0-(axial_airspeed/exit_vel)));
80020fb4:	ee f9 ff f8 	ld.w	r9,r7[-8]
80020fb8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80020fbc:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80020fc0:	ee f8 ff ec 	ld.w	r8,r7[-20]
80020fc4:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80020fc8:	10 9c       	mov	r12,r8
80020fca:	f0 16 00 02 	mcall	r6[8]
80020fce:	e0 68 33 33 	mov	r8,13107
80020fd2:	ea 18 33 33 	orh	r8,0x3333
80020fd6:	e0 69 33 33 	mov	r9,13107
80020fda:	ea 19 3f e3 	orh	r9,0x3fe3
80020fde:	f0 16 00 03 	mcall	r6[12]
80020fe2:	14 98       	mov	r8,r10
80020fe4:	16 99       	mov	r9,r11
80020fe6:	10 92       	mov	r2,r8
80020fe8:	12 93       	mov	r3,r9
80020fea:	ee f8 ff f4 	ld.w	r8,r7[-12]
80020fee:	f0 f8 01 6c 	ld.w	r8,r8[364]
80020ff2:	10 9c       	mov	r12,r8
80020ff4:	f0 16 00 02 	mcall	r6[8]
80020ff8:	14 98       	mov	r8,r10
80020ffa:	16 99       	mov	r9,r11
80020ffc:	04 9a       	mov	r10,r2
80020ffe:	06 9b       	mov	r11,r3
80021000:	f0 16 00 03 	mcall	r6[12]
80021004:	14 98       	mov	r8,r10
80021006:	16 99       	mov	r9,r11
80021008:	10 92       	mov	r2,r8
8002100a:	12 93       	mov	r3,r9
8002100c:	ee fb ff fc 	ld.w	r11,r7[-4]
80021010:	ee fc ff e8 	ld.w	r12,r7[-24]
80021014:	f0 16 00 08 	mcall	r6[32]
80021018:	18 98       	mov	r8,r12
8002101a:	10 9c       	mov	r12,r8
8002101c:	f0 16 00 02 	mcall	r6[8]
80021020:	14 98       	mov	r8,r10
80021022:	16 99       	mov	r9,r11
80021024:	30 0a       	mov	r10,0
80021026:	fc 1b 3f f0 	movh	r11,0x3ff0
8002102a:	f0 16 00 11 	mcall	r6[68]
8002102e:	14 98       	mov	r8,r10
80021030:	16 99       	mov	r9,r11
80021032:	04 9a       	mov	r10,r2
80021034:	06 9b       	mov	r11,r3
80021036:	f0 16 00 03 	mcall	r6[12]
8002103a:	14 98       	mov	r8,r10
8002103c:	16 99       	mov	r9,r11
8002103e:	10 9a       	mov	r10,r8
80021040:	12 9b       	mov	r11,r9
80021042:	f0 16 00 09 	mcall	r6[36]
80021046:	18 98       	mov	r8,r12
}
80021048:	10 9c       	mov	r12,r8
8002104a:	2f ad       	sub	sp,-24
8002104c:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
80021050:	80 02       	ld.sh	r2,r0[0x0]
80021052:	0d 4e       	ld.w	lr,--r6

80021054 <forces_from_servos_diag_quad>:


void forces_from_servos_diag_quad(simulation_model_t *sim, servo_output *servos){
80021054:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
80021058:	1a 97       	mov	r7,sp
8002105a:	21 dd       	sub	sp,116
8002105c:	fe f6 04 54 	ld.w	r6,pc[1108]
80021060:	1e 26       	rsub	r6,pc
80021062:	ef 4c ff 90 	st.w	r7[-112],r12
80021066:	ef 4b ff 8c 	st.w	r7[-116],r11
	int i;
	float motor_command[4];
	float rotor_lifts[4], rotor_drags[4], rotor_inertia[4], rotor_lateral_drag[4];
	float ldb;
	
	float sqr_lateral_airspeed=SQR(sim->vel_bf[0]) + SQR(sim->vel_bf[1]*sim->vel_bf[1]);
8002106a:	ee f8 ff 90 	ld.w	r8,r7[-112]
8002106e:	70 99       	ld.w	r9,r8[0x24]
80021070:	ee f8 ff 90 	ld.w	r8,r7[-112]
80021074:	70 98       	ld.w	r8,r8[0x24]
80021076:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8002107a:	ee f8 ff 90 	ld.w	r8,r7[-112]
8002107e:	70 aa       	ld.w	r10,r8[0x28]
80021080:	ee f8 ff 90 	ld.w	r8,r7[-112]
80021084:	70 a8       	ld.w	r8,r8[0x28]
80021086:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
8002108a:	ee f8 ff 90 	ld.w	r8,r7[-112]
8002108e:	70 ab       	ld.w	r11,r8[0x28]
80021090:	ee f8 ff 90 	ld.w	r8,r7[-112]
80021094:	70 a8       	ld.w	r8,r8[0x28]
80021096:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
8002109a:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8002109e:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
800210a2:	ef 48 ff ec 	st.w	r7[-20],r8
	float lateral_airspeed=sqrt(sqr_lateral_airspeed);
800210a6:	ee fc ff ec 	ld.w	r12,r7[-20]
800210aa:	f0 16 00 02 	mcall	r6[8]
800210ae:	14 98       	mov	r8,r10
800210b0:	16 99       	mov	r9,r11
800210b2:	10 9a       	mov	r10,r8
800210b4:	12 9b       	mov	r11,r9
800210b6:	f0 16 00 64 	mcall	r6[400]
800210ba:	14 98       	mov	r8,r10
800210bc:	16 99       	mov	r9,r11
800210be:	10 9a       	mov	r10,r8
800210c0:	12 9b       	mov	r11,r9
800210c2:	f0 16 00 09 	mcall	r6[36]
800210c6:	18 98       	mov	r8,r12
800210c8:	ef 48 ff f0 	st.w	r7[-16],r8
	
	for (i=0; i<4; i++) {
800210cc:	30 08       	mov	r8,0
800210ce:	ef 48 ff e4 	st.w	r7[-28],r8
800210d2:	cb 28       	rjmp	80021236 <forces_from_servos_diag_quad+0x1e2>
		float old_rotor_speed;
		motor_command[i]=(float)servos[i].value/SERVO_SCALE - sim->rotor_rpm_offset;
800210d4:	ee f5 ff e4 	ld.w	r5,r7[-28]
800210d8:	ee f8 ff e4 	ld.w	r8,r7[-28]
800210dc:	a5 68       	lsl	r8,0x4
800210de:	ee f9 ff 8c 	ld.w	r9,r7[-116]
800210e2:	f2 08 00 08 	add	r8,r9,r8
800210e6:	70 08       	ld.w	r8,r8[0x0]
800210e8:	e5 a6 08 08 	cop	cp0,cr8,cr0,cr8,0x4c
800210ec:	fc 1b 43 fa 	movh	r11,0x43fa
800210f0:	10 9c       	mov	r12,r8
800210f2:	f0 16 00 08 	mcall	r6[32]
800210f6:	18 98       	mov	r8,r12
800210f8:	10 99       	mov	r9,r8
800210fa:	ee f8 ff 90 	ld.w	r8,r7[-112]
800210fe:	f0 f8 01 5c 	ld.w	r8,r8[348]
80021102:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80021106:	ea 08 15 02 	lsl	r8,r5,0x2
8002110a:	ee 08 00 08 	add	r8,r7,r8
8002110e:	f1 49 ff d4 	st.w	r8[-44],r9
		if (motor_command[i]<0.0) motor_command[i]=0;
80021112:	ee f8 ff e4 	ld.w	r8,r7[-28]
80021116:	a3 68       	lsl	r8,0x2
80021118:	ee 08 00 08 	add	r8,r7,r8
8002111c:	f0 fa ff d4 	ld.w	r10,r8[-44]
80021120:	30 18       	mov	r8,1
80021122:	30 09       	mov	r9,0
80021124:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80021128:	e0 8c 00 03 	brvs	8002112e <forces_from_servos_diag_quad+0xda>
8002112c:	c0 25       	brlt	80021130 <forces_from_servos_diag_quad+0xdc>
8002112e:	30 08       	mov	r8,0
80021130:	5c 58       	castu.b	r8
80021132:	c0 90       	breq	80021144 <forces_from_servos_diag_quad+0xf0>
80021134:	ee f8 ff e4 	ld.w	r8,r7[-28]
80021138:	a3 68       	lsl	r8,0x2
8002113a:	ee 08 00 08 	add	r8,r7,r8
8002113e:	30 09       	mov	r9,0
80021140:	f1 49 ff d4 	st.w	r8[-44],r9
		
		// temporarily save old rotor speeds
		old_rotor_speed=sim->rotorspeeds[i];
80021144:	ee f9 ff e4 	ld.w	r9,r7[-28]
80021148:	ee f8 ff 90 	ld.w	r8,r7[-112]
8002114c:	2a f9       	sub	r9,-81
8002114e:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80021152:	ef 48 ff fc 	st.w	r7[-4],r8
		// estimate rotor speeds by low-pass filtering
		//sim->rotorspeeds[i]=(sim->rotor_lpf) * sim->rotorspeeds[i] + (1.0-sim->rotor_lpf) * (motor_command[i] * sim->rotor_rpm_gain);
		sim->rotorspeeds[i]=(motor_command[i] * sim->rotor_rpm_gain);
80021156:	ee f9 ff e4 	ld.w	r9,r7[-28]
8002115a:	ee f8 ff e4 	ld.w	r8,r7[-28]
8002115e:	a3 68       	lsl	r8,0x2
80021160:	ee 08 00 08 	add	r8,r7,r8
80021164:	f0 fa ff d4 	ld.w	r10,r8[-44]
80021168:	ee f8 ff 90 	ld.w	r8,r7[-112]
8002116c:	f0 f8 01 58 	ld.w	r8,r8[344]
80021170:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
80021174:	ee f8 ff 90 	ld.w	r8,r7[-112]
80021178:	2a f9       	sub	r9,-81
8002117a:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		
		// calculate torque created by rotor inertia
		rotor_inertia[i]=(sim->rotorspeeds[i] - old_rotor_speed)/sim->dt * sim->rotor_momentum;
8002117e:	ee f5 ff e4 	ld.w	r5,r7[-28]
80021182:	ee f9 ff e4 	ld.w	r9,r7[-28]
80021186:	ee f8 ff 90 	ld.w	r8,r7[-112]
8002118a:	2a f9       	sub	r9,-81
8002118c:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80021190:	ee f8 ff fc 	ld.w	r8,r7[-4]
80021194:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80021198:	ee f9 ff 90 	ld.w	r9,r7[-112]
8002119c:	f2 f9 01 90 	ld.w	r9,r9[400]
800211a0:	12 9b       	mov	r11,r9
800211a2:	10 9c       	mov	r12,r8
800211a4:	f0 16 00 08 	mcall	r6[32]
800211a8:	18 98       	mov	r8,r12
800211aa:	10 99       	mov	r9,r8
800211ac:	ee f8 ff 90 	ld.w	r8,r7[-112]
800211b0:	f0 f8 01 84 	ld.w	r8,r8[388]
800211b4:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
800211b8:	ea 08 15 02 	lsl	r8,r5,0x2
800211bc:	ee 08 00 08 	add	r8,r7,r8
800211c0:	f1 49 ff a4 	st.w	r8[-92],r9
		
		ldb=lift_drag_base(sim, sim->rotorspeeds[i], sqr_lateral_airspeed, -sim->vel_bf[Z]);
800211c4:	ee f8 ff 90 	ld.w	r8,r7[-112]
800211c8:	70 b8       	ld.w	r8,r8[0x2c]
800211ca:	10 99       	mov	r9,r8
800211cc:	ee 19 80 00 	eorh	r9,0x8000
800211d0:	ee fa ff e4 	ld.w	r10,r7[-28]
800211d4:	ee f8 ff 90 	ld.w	r8,r7[-112]
800211d8:	2a fa       	sub	r10,-81
800211da:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
800211de:	ee fa ff ec 	ld.w	r10,r7[-20]
800211e2:	10 9b       	mov	r11,r8
800211e4:	ee fc ff 90 	ld.w	r12,r7[-112]
800211e8:	c6 ce       	rcall	80020ec0 <lift_drag_base>
800211ea:	18 98       	mov	r8,r12
800211ec:	ef 48 ff e8 	st.w	r7[-24],r8
		//ldb=lift_drag_base(sim, sim->rotorspeeds[i], sqr_lateral_airspeed, 0.0);
		
		rotor_lifts[i]=ldb * sim->rotor_cl;
800211f0:	ee f8 ff e4 	ld.w	r8,r7[-28]
800211f4:	ee f9 ff 90 	ld.w	r9,r7[-112]
800211f8:	f2 fa 01 64 	ld.w	r10,r9[356]
800211fc:	ee f9 ff e8 	ld.w	r9,r7[-24]
80021200:	e5 a2 09 a9 	cop	cp0,cr9,cr10,cr9,0x44
80021204:	a3 68       	lsl	r8,0x2
80021206:	ee 08 00 08 	add	r8,r7,r8
8002120a:	f1 49 ff c4 	st.w	r8[-60],r9
		rotor_drags[i]=ldb * sim->rotor_cd;
8002120e:	ee f8 ff e4 	ld.w	r8,r7[-28]
80021212:	ee f9 ff 90 	ld.w	r9,r7[-112]
80021216:	f2 fa 01 60 	ld.w	r10,r9[352]
8002121a:	ee f9 ff e8 	ld.w	r9,r7[-24]
8002121e:	e5 a2 09 a9 	cop	cp0,cr9,cr10,cr9,0x44
80021222:	a3 68       	lsl	r8,0x2
80021224:	ee 08 00 08 	add	r8,r7,r8
80021228:	f1 49 ff b4 	st.w	r8[-76],r9
	float ldb;
	
	float sqr_lateral_airspeed=SQR(sim->vel_bf[0]) + SQR(sim->vel_bf[1]*sim->vel_bf[1]);
	float lateral_airspeed=sqrt(sqr_lateral_airspeed);
	
	for (i=0; i<4; i++) {
8002122c:	ee f8 ff e4 	ld.w	r8,r7[-28]
80021230:	2f f8       	sub	r8,-1
80021232:	ef 48 ff e4 	st.w	r7[-28],r8
80021236:	ee f8 ff e4 	ld.w	r8,r7[-28]
8002123a:	58 38       	cp.w	r8,3
8002123c:	fe 9a ff 4c 	brle	800210d4 <forces_from_servos_diag_quad+0x80>
		
		rotor_lifts[i]=ldb * sim->rotor_cl;
		rotor_drags[i]=ldb * sim->rotor_cd;
	}
	
	float mpos_x=sim->rotor_arm_length / 1.4142;
80021240:	ee f8 ff 90 	ld.w	r8,r7[-112]
80021244:	f0 f8 01 88 	ld.w	r8,r8[392]
80021248:	10 9c       	mov	r12,r8
8002124a:	f0 16 00 02 	mcall	r6[8]
8002124e:	e0 68 0d 1b 	mov	r8,3355
80021252:	ea 18 2d e0 	orh	r8,0x2de0
80021256:	e0 69 a0 90 	mov	r9,41104
8002125a:	ea 19 3f f6 	orh	r9,0x3ff6
8002125e:	f0 16 00 0c 	mcall	r6[48]
80021262:	14 98       	mov	r8,r10
80021264:	16 99       	mov	r9,r11
80021266:	10 9a       	mov	r10,r8
80021268:	12 9b       	mov	r11,r9
8002126a:	f0 16 00 09 	mcall	r6[36]
8002126e:	18 98       	mov	r8,r12
80021270:	ef 48 ff f4 	st.w	r7[-12],r8
	float mpos_y=sim->rotor_arm_length / 1.4142;
80021274:	ee f8 ff 90 	ld.w	r8,r7[-112]
80021278:	f0 f8 01 88 	ld.w	r8,r8[392]
8002127c:	10 9c       	mov	r12,r8
8002127e:	f0 16 00 02 	mcall	r6[8]
80021282:	e0 68 0d 1b 	mov	r8,3355
80021286:	ea 18 2d e0 	orh	r8,0x2de0
8002128a:	e0 69 a0 90 	mov	r9,41104
8002128e:	ea 19 3f f6 	orh	r9,0x3ff6
80021292:	f0 16 00 0c 	mcall	r6[48]
80021296:	14 98       	mov	r8,r10
80021298:	16 99       	mov	r9,r11
8002129a:	10 9a       	mov	r10,r8
8002129c:	12 9b       	mov	r11,r9
8002129e:	f0 16 00 09 	mcall	r6[36]
800212a2:	18 98       	mov	r8,r12
800212a4:	ef 48 ff f8 	st.w	r7[-8],r8
	
	// torque around x axis (roll)
	sim->torques_bf[ROLL]  = ((rotor_lifts[M_FRONT_LEFT]  + rotor_lifts[M_REAR_LEFT]  ) 
800212a8:	ee f9 ff cc 	ld.w	r9,r7[-52]
800212ac:	ee f8 ff d0 	ld.w	r8,r7[-48]
800212b0:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
						    - (rotor_lifts[M_FRONT_RIGHT] + rotor_lifts[M_REAR_RIGHT] )) * mpos_y;;
800212b4:	ee fa ff c8 	ld.w	r10,r7[-56]
800212b8:	ee f8 ff c4 	ld.w	r8,r7[-60]
800212bc:	e5 a0 08 a8 	cop	cp0,cr8,cr10,cr8,0x40
	
	float mpos_x=sim->rotor_arm_length / 1.4142;
	float mpos_y=sim->rotor_arm_length / 1.4142;
	
	// torque around x axis (roll)
	sim->torques_bf[ROLL]  = ((rotor_lifts[M_FRONT_LEFT]  + rotor_lifts[M_REAR_LEFT]  ) 
800212c0:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
800212c4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800212c8:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
800212cc:	ee f8 ff 90 	ld.w	r8,r7[-112]
800212d0:	91 09       	st.w	r8[0x0],r9
						    - (rotor_lifts[M_FRONT_RIGHT] + rotor_lifts[M_REAR_RIGHT] )) * mpos_y;;

	// torque around y axis (pitch)
	sim->torques_bf[PITCH] = ((rotor_lifts[M_FRONT_LEFT]  + rotor_lifts[M_FRONT_RIGHT] )
800212d2:	ee f9 ff cc 	ld.w	r9,r7[-52]
800212d6:	ee f8 ff c8 	ld.w	r8,r7[-56]
800212da:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
							- (rotor_lifts[M_REAR_LEFT]   + rotor_lifts[M_REAR_RIGHT] ))*  mpos_x;
800212de:	ee fa ff d0 	ld.w	r10,r7[-48]
800212e2:	ee f8 ff c4 	ld.w	r8,r7[-60]
800212e6:	e5 a0 08 a8 	cop	cp0,cr8,cr10,cr8,0x40
	// torque around x axis (roll)
	sim->torques_bf[ROLL]  = ((rotor_lifts[M_FRONT_LEFT]  + rotor_lifts[M_REAR_LEFT]  ) 
						    - (rotor_lifts[M_FRONT_RIGHT] + rotor_lifts[M_REAR_RIGHT] )) * mpos_y;;

	// torque around y axis (pitch)
	sim->torques_bf[PITCH] = ((rotor_lifts[M_FRONT_LEFT]  + rotor_lifts[M_FRONT_RIGHT] )
800212ea:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
800212ee:	ee f8 ff f4 	ld.w	r8,r7[-12]
800212f2:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
800212f6:	ee f8 ff 90 	ld.w	r8,r7[-112]
800212fa:	91 19       	st.w	r8[0x4],r9
							- (rotor_lifts[M_REAR_LEFT]   + rotor_lifts[M_REAR_RIGHT] ))*  mpos_x;

	sim->torques_bf[YAW]   = (M_FL_DIR*(10.0*rotor_drags[M_FRONT_LEFT]+rotor_inertia[M_FRONT_LEFT])  + M_FR_DIR*(10.0*rotor_drags[M_FRONT_RIGHT]+rotor_inertia[M_FRONT_RIGHT])
800212fc:	ee f8 ff b8 	ld.w	r8,r7[-72]
80021300:	10 9c       	mov	r12,r8
80021302:	f0 16 00 02 	mcall	r6[8]
80021306:	30 08       	mov	r8,0
80021308:	fc 19 40 24 	movh	r9,0x4024
8002130c:	f0 16 00 03 	mcall	r6[12]
80021310:	14 98       	mov	r8,r10
80021312:	16 99       	mov	r9,r11
80021314:	10 92       	mov	r2,r8
80021316:	12 93       	mov	r3,r9
80021318:	ee f8 ff a8 	ld.w	r8,r7[-88]
							+ M_RL_DIR*(10.0*rotor_drags[M_REAR_LEFT] +rotor_inertia[M_REAR_LEFT])   + M_RR_DIR*(10.0*rotor_drags[M_REAR_RIGHT] +rotor_inertia[M_REAR_RIGHT] ))*  sim->rotor_diameter;
8002131c:	10 9c       	mov	r12,r8
8002131e:	f0 16 00 02 	mcall	r6[8]
80021322:	14 98       	mov	r8,r10
80021324:	16 99       	mov	r9,r11
80021326:	04 9a       	mov	r10,r2
80021328:	06 9b       	mov	r11,r3
8002132a:	f0 16 00 05 	mcall	r6[20]
8002132e:	14 98       	mov	r8,r10
80021330:	16 99       	mov	r9,r11
80021332:	10 92       	mov	r2,r8
80021334:	12 93       	mov	r3,r9

	// torque around y axis (pitch)
	sim->torques_bf[PITCH] = ((rotor_lifts[M_FRONT_LEFT]  + rotor_lifts[M_FRONT_RIGHT] )
							- (rotor_lifts[M_REAR_LEFT]   + rotor_lifts[M_REAR_RIGHT] ))*  mpos_x;

	sim->torques_bf[YAW]   = (M_FL_DIR*(10.0*rotor_drags[M_FRONT_LEFT]+rotor_inertia[M_FRONT_LEFT])  + M_FR_DIR*(10.0*rotor_drags[M_FRONT_RIGHT]+rotor_inertia[M_FRONT_RIGHT])
80021336:	ee f8 ff bc 	ld.w	r8,r7[-68]
8002133a:	10 9c       	mov	r12,r8
8002133c:	f0 16 00 02 	mcall	r6[8]
80021340:	30 08       	mov	r8,0
80021342:	fc 19 40 24 	movh	r9,0x4024
80021346:	f0 16 00 03 	mcall	r6[12]
8002134a:	14 98       	mov	r8,r10
8002134c:	16 99       	mov	r9,r11
8002134e:	10 90       	mov	r0,r8
80021350:	12 91       	mov	r1,r9
80021352:	ee f8 ff ac 	ld.w	r8,r7[-84]
80021356:	10 9c       	mov	r12,r8
80021358:	f0 16 00 02 	mcall	r6[8]
8002135c:	14 98       	mov	r8,r10
8002135e:	16 99       	mov	r9,r11
80021360:	00 9a       	mov	r10,r0
80021362:	02 9b       	mov	r11,r1
80021364:	f0 16 00 05 	mcall	r6[20]
80021368:	14 98       	mov	r8,r10
8002136a:	16 99       	mov	r9,r11
							+ M_RL_DIR*(10.0*rotor_drags[M_REAR_LEFT] +rotor_inertia[M_REAR_LEFT])   + M_RR_DIR*(10.0*rotor_drags[M_REAR_RIGHT] +rotor_inertia[M_REAR_RIGHT] ))*  sim->rotor_diameter;
8002136c:	04 9a       	mov	r10,r2
8002136e:	06 9b       	mov	r11,r3
80021370:	f0 16 00 11 	mcall	r6[68]
80021374:	14 98       	mov	r8,r10
80021376:	16 99       	mov	r9,r11
80021378:	10 92       	mov	r2,r8
8002137a:	12 93       	mov	r3,r9
8002137c:	ee f8 ff c0 	ld.w	r8,r7[-64]
80021380:	10 9c       	mov	r12,r8
80021382:	f0 16 00 02 	mcall	r6[8]
80021386:	30 08       	mov	r8,0
80021388:	fc 19 40 24 	movh	r9,0x4024
8002138c:	f0 16 00 03 	mcall	r6[12]
80021390:	14 98       	mov	r8,r10
80021392:	16 99       	mov	r9,r11
80021394:	10 90       	mov	r0,r8
80021396:	12 91       	mov	r1,r9
80021398:	ee f8 ff b0 	ld.w	r8,r7[-80]
8002139c:	10 9c       	mov	r12,r8
8002139e:	f0 16 00 02 	mcall	r6[8]
800213a2:	14 98       	mov	r8,r10
800213a4:	16 99       	mov	r9,r11
800213a6:	00 9a       	mov	r10,r0
800213a8:	02 9b       	mov	r11,r1
800213aa:	f0 16 00 05 	mcall	r6[20]
800213ae:	14 98       	mov	r8,r10
800213b0:	16 99       	mov	r9,r11
800213b2:	04 9a       	mov	r10,r2
800213b4:	06 9b       	mov	r11,r3
800213b6:	f0 16 00 05 	mcall	r6[20]
800213ba:	14 98       	mov	r8,r10
800213bc:	16 99       	mov	r9,r11
800213be:	10 92       	mov	r2,r8
800213c0:	12 93       	mov	r3,r9
800213c2:	ee f8 ff b4 	ld.w	r8,r7[-76]
800213c6:	10 9c       	mov	r12,r8
800213c8:	f0 16 00 02 	mcall	r6[8]
800213cc:	30 08       	mov	r8,0
800213ce:	fc 19 40 24 	movh	r9,0x4024
800213d2:	f0 16 00 03 	mcall	r6[12]
800213d6:	14 98       	mov	r8,r10
800213d8:	16 99       	mov	r9,r11
800213da:	10 90       	mov	r0,r8
800213dc:	12 91       	mov	r1,r9
800213de:	ee f8 ff a4 	ld.w	r8,r7[-92]
800213e2:	10 9c       	mov	r12,r8
800213e4:	f0 16 00 02 	mcall	r6[8]
800213e8:	14 98       	mov	r8,r10
800213ea:	16 99       	mov	r9,r11
800213ec:	00 9a       	mov	r10,r0
800213ee:	02 9b       	mov	r11,r1
800213f0:	f0 16 00 05 	mcall	r6[20]
800213f4:	14 98       	mov	r8,r10
800213f6:	16 99       	mov	r9,r11

	// torque around y axis (pitch)
	sim->torques_bf[PITCH] = ((rotor_lifts[M_FRONT_LEFT]  + rotor_lifts[M_FRONT_RIGHT] )
							- (rotor_lifts[M_REAR_LEFT]   + rotor_lifts[M_REAR_RIGHT] ))*  mpos_x;

	sim->torques_bf[YAW]   = (M_FL_DIR*(10.0*rotor_drags[M_FRONT_LEFT]+rotor_inertia[M_FRONT_LEFT])  + M_FR_DIR*(10.0*rotor_drags[M_FRONT_RIGHT]+rotor_inertia[M_FRONT_RIGHT])
800213f8:	04 9a       	mov	r10,r2
800213fa:	06 9b       	mov	r11,r3
800213fc:	f0 16 00 11 	mcall	r6[68]
80021400:	14 98       	mov	r8,r10
80021402:	16 99       	mov	r9,r11
80021404:	10 92       	mov	r2,r8
80021406:	12 93       	mov	r3,r9
80021408:	ee f8 ff 90 	ld.w	r8,r7[-112]
8002140c:	f0 f8 01 68 	ld.w	r8,r8[360]
80021410:	10 9c       	mov	r12,r8
80021412:	f0 16 00 02 	mcall	r6[8]
80021416:	14 98       	mov	r8,r10
80021418:	16 99       	mov	r9,r11
8002141a:	04 9a       	mov	r10,r2
8002141c:	06 9b       	mov	r11,r3
8002141e:	f0 16 00 03 	mcall	r6[12]
80021422:	14 98       	mov	r8,r10
80021424:	16 99       	mov	r9,r11
80021426:	10 9a       	mov	r10,r8
80021428:	12 9b       	mov	r11,r9
8002142a:	f0 16 00 09 	mcall	r6[36]
8002142e:	18 99       	mov	r9,r12
80021430:	ee f8 ff 90 	ld.w	r8,r7[-112]
80021434:	91 29       	st.w	r8[0x8],r9
							+ M_RL_DIR*(10.0*rotor_drags[M_REAR_LEFT] +rotor_inertia[M_REAR_LEFT])   + M_RR_DIR*(10.0*rotor_drags[M_REAR_RIGHT] +rotor_inertia[M_REAR_RIGHT] ))*  sim->rotor_diameter;
	

	
	sim->lin_forces_bf[X] = -sim->vel_bf[X]*lateral_airspeed* sim->vehicle_drag;  
80021436:	ee f8 ff 90 	ld.w	r8,r7[-112]
8002143a:	70 98       	ld.w	r8,r8[0x24]
8002143c:	10 99       	mov	r9,r8
8002143e:	ee 19 80 00 	eorh	r9,0x8000
80021442:	ee f8 ff f0 	ld.w	r8,r7[-16]
80021446:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8002144a:	ee f8 ff 90 	ld.w	r8,r7[-112]
8002144e:	f0 f8 01 78 	ld.w	r8,r8[376]
80021452:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80021456:	ee f8 ff 90 	ld.w	r8,r7[-112]
8002145a:	91 69       	st.w	r8[0x18],r9
	sim->lin_forces_bf[Y] = -sim->vel_bf[Y]*lateral_airspeed* sim->vehicle_drag;
8002145c:	ee f8 ff 90 	ld.w	r8,r7[-112]
80021460:	70 a8       	ld.w	r8,r8[0x28]
80021462:	10 99       	mov	r9,r8
80021464:	ee 19 80 00 	eorh	r9,0x8000
80021468:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002146c:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80021470:	ee f8 ff 90 	ld.w	r8,r7[-112]
80021474:	f0 f8 01 78 	ld.w	r8,r8[376]
80021478:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8002147c:	ee f8 ff 90 	ld.w	r8,r7[-112]
80021480:	91 79       	st.w	r8[0x1c],r9
	sim->lin_forces_bf[Z] = -(rotor_lifts[M_FRONT_LEFT]+ rotor_lifts[M_FRONT_RIGHT] +rotor_lifts[M_REAR_LEFT] +rotor_lifts[M_REAR_RIGHT]);
80021482:	ee f9 ff cc 	ld.w	r9,r7[-52]
80021486:	ee f8 ff c8 	ld.w	r8,r7[-56]
8002148a:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8002148e:	ee f8 ff d0 	ld.w	r8,r7[-48]
80021492:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80021496:	ee f8 ff c4 	ld.w	r8,r7[-60]
8002149a:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8002149e:	10 99       	mov	r9,r8
800214a0:	ee 19 80 00 	eorh	r9,0x8000
800214a4:	ee f8 ff 90 	ld.w	r8,r7[-112]
800214a8:	91 89       	st.w	r8[0x20],r9

}
800214aa:	2e 3d       	sub	sp,-116
800214ac:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
800214b0:	80 02       	ld.sh	r2,r0[0x0]
800214b2:	0e e4       	st.h	--r7,r4

800214b4 <forces_from_servos_cross_quad>:


void forces_from_servos_cross_quad(simulation_model_t *sim, servo_output *servos){
800214b4:	eb cd 40 80 	pushm	r7,lr
800214b8:	1a 97       	mov	r7,sp
800214ba:	20 7d       	sub	sp,28
800214bc:	ef 4c ff e8 	st.w	r7[-24],r12
800214c0:	ef 4b ff e4 	st.w	r7[-28],r11

	for (i=0; i<4; i++) {
		centralData->servos[i].value=SERVO_SCALE*motor_command[i];
	}
	*/
}
800214c4:	2f 9d       	sub	sp,-28
800214c6:	e3 cd 80 80 	ldm	sp++,r7,pc

800214ca <simu_update>:

void simu_update(simulation_model_t *sim, servo_output *servo_commands, Imu_Data_t *imu, position_estimator_t *pos_est) {
800214ca:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
800214ce:	1a 97       	mov	r7,sp
800214d0:	21 fd       	sub	sp,124
800214d2:	fe f6 0b 7a 	ld.w	r6,pc[2938]
800214d6:	1e 26       	rsub	r6,pc
800214d8:	ef 4c ff a0 	st.w	r7[-96],r12
800214dc:	ef 4b ff 9c 	st.w	r7[-100],r11
800214e0:	ef 4a ff 98 	st.w	r7[-104],r10
800214e4:	ef 49 ff 94 	st.w	r7[-108],r9
	int i;
	UQuat_t qtmp1, qvel_bf,  qed;
	const UQuat_t front = {.s=0.0, .v={1.0, 0.0, 0.0}};
800214e8:	30 08       	mov	r8,0
800214ea:	ef 48 ff b4 	st.w	r7[-76],r8
800214ee:	fc 18 3f 80 	movh	r8,0x3f80
800214f2:	ef 48 ff b8 	st.w	r7[-72],r8
800214f6:	30 08       	mov	r8,0
800214f8:	ef 48 ff bc 	st.w	r7[-68],r8
800214fc:	30 08       	mov	r8,0
800214fe:	ef 48 ff c0 	st.w	r7[-64],r8
	const UQuat_t up = {.s=0.0, .v={UPVECTOR_X, UPVECTOR_Y, UPVECTOR_Z}};
80021502:	30 08       	mov	r8,0
80021504:	ef 48 ff a4 	st.w	r7[-92],r8
80021508:	30 08       	mov	r8,0
8002150a:	ef 48 ff a8 	st.w	r7[-88],r8
8002150e:	30 08       	mov	r8,0
80021510:	ef 48 ff ac 	st.w	r7[-84],r8
80021514:	fc 18 bf 80 	movh	r8,0xbf80
80021518:	ef 48 ff b0 	st.w	r7[-80],r8
	
	central_data_t *central_data;
	uint32_t now=get_micros();
8002151c:	f0 16 00 27 	mcall	r6[156]
80021520:	18 98       	mov	r8,r12
80021522:	ef 48 ff fc 	st.w	r7[-4],r8
	sim->dt=(now - sim->last_update)/1000000.0;
80021526:	ee f8 ff a0 	ld.w	r8,r7[-96]
8002152a:	f0 f8 01 8c 	ld.w	r8,r8[396]
8002152e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80021532:	f2 08 01 08 	sub	r8,r9,r8
80021536:	10 9c       	mov	r12,r8
80021538:	f0 16 00 4d 	mcall	r6[308]
8002153c:	30 08       	mov	r8,0
8002153e:	e0 69 84 80 	mov	r9,33920
80021542:	ea 19 41 2e 	orh	r9,0x412e
80021546:	f0 16 00 0c 	mcall	r6[48]
8002154a:	14 98       	mov	r8,r10
8002154c:	16 99       	mov	r9,r11
8002154e:	10 9a       	mov	r10,r8
80021550:	12 9b       	mov	r11,r9
80021552:	f0 16 00 09 	mcall	r6[36]
80021556:	18 99       	mov	r9,r12
80021558:	ee f8 ff a0 	ld.w	r8,r7[-96]
8002155c:	f1 49 01 90 	st.w	r8[400],r9
	sim->last_update=now;
80021560:	ee f8 ff a0 	ld.w	r8,r7[-96]
80021564:	ee f9 ff fc 	ld.w	r9,r7[-4]
80021568:	f1 49 01 8c 	st.w	r8[396],r9
	central_data=get_central_data();
8002156c:	f0 16 00 31 	mcall	r6[196]
80021570:	18 98       	mov	r8,r12
80021572:	ef 48 ff f8 	st.w	r7[-8],r8
	// compute torques and forces based on servo commands
	#ifdef CONF_DIAG
	forces_from_servos_diag_quad(sim, servo_commands);
80021576:	ee fb ff 9c 	ld.w	r11,r7[-100]
8002157a:	ee fc ff a0 	ld.w	r12,r7[-96]
8002157e:	f0 16 01 dc 	mcall	r6[1904]
	forces_from_servos_cross_quad(sim, servo_commands);
	#endif
	
	// integrate torques to get simulated gyro rates (with some damping)
	//for (i=0; i<3; i++) {
	sim->rates_bf[0] = clip((1.0-0.1*sim->dt)*sim->rates_bf[0] + sim->dt * sim->torques_bf[0] /sim->roll_pitch_momentum, 10.0);
80021582:	ee f8 ff a0 	ld.w	r8,r7[-96]
80021586:	f0 f8 01 90 	ld.w	r8,r8[400]
8002158a:	10 9c       	mov	r12,r8
8002158c:	f0 16 00 02 	mcall	r6[8]
80021590:	e0 68 99 9a 	mov	r8,39322
80021594:	ea 18 99 99 	orh	r8,0x9999
80021598:	e0 69 99 99 	mov	r9,39321
8002159c:	ea 19 bf b9 	orh	r9,0xbfb9
800215a0:	f0 16 00 03 	mcall	r6[12]
800215a4:	14 98       	mov	r8,r10
800215a6:	16 99       	mov	r9,r11
800215a8:	10 9a       	mov	r10,r8
800215aa:	12 9b       	mov	r11,r9
800215ac:	30 08       	mov	r8,0
800215ae:	fc 19 3f f0 	movh	r9,0x3ff0
800215b2:	f0 16 00 05 	mcall	r6[20]
800215b6:	14 98       	mov	r8,r10
800215b8:	16 99       	mov	r9,r11
800215ba:	10 92       	mov	r2,r8
800215bc:	12 93       	mov	r3,r9
800215be:	ee f8 ff a0 	ld.w	r8,r7[-96]
800215c2:	70 38       	ld.w	r8,r8[0xc]
800215c4:	10 9c       	mov	r12,r8
800215c6:	f0 16 00 02 	mcall	r6[8]
800215ca:	14 98       	mov	r8,r10
800215cc:	16 99       	mov	r9,r11
800215ce:	04 9a       	mov	r10,r2
800215d0:	06 9b       	mov	r11,r3
800215d2:	f0 16 00 03 	mcall	r6[12]
800215d6:	14 98       	mov	r8,r10
800215d8:	16 99       	mov	r9,r11
800215da:	10 92       	mov	r2,r8
800215dc:	12 93       	mov	r3,r9
800215de:	ee f8 ff a0 	ld.w	r8,r7[-96]
800215e2:	f0 f9 01 90 	ld.w	r9,r8[400]
800215e6:	ee f8 ff a0 	ld.w	r8,r7[-96]
800215ea:	70 08       	ld.w	r8,r8[0x0]
800215ec:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
800215f0:	ee f9 ff a0 	ld.w	r9,r7[-96]
800215f4:	f2 f9 01 7c 	ld.w	r9,r9[380]
800215f8:	12 9b       	mov	r11,r9
800215fa:	10 9c       	mov	r12,r8
800215fc:	f0 16 00 08 	mcall	r6[32]
80021600:	18 98       	mov	r8,r12
80021602:	10 9c       	mov	r12,r8
80021604:	f0 16 00 02 	mcall	r6[8]
80021608:	14 98       	mov	r8,r10
8002160a:	16 99       	mov	r9,r11
8002160c:	04 9a       	mov	r10,r2
8002160e:	06 9b       	mov	r11,r3
80021610:	f0 16 00 05 	mcall	r6[20]
80021614:	14 98       	mov	r8,r10
80021616:	16 99       	mov	r9,r11
80021618:	10 9a       	mov	r10,r8
8002161a:	12 9b       	mov	r11,r9
8002161c:	f0 16 00 09 	mcall	r6[36]
80021620:	18 98       	mov	r8,r12
80021622:	fc 1b 41 20 	movh	r11,0x4120
80021626:	10 9c       	mov	r12,r8
80021628:	fe b0 fb 2a 	rcall	80020c7c <clip>
8002162c:	18 99       	mov	r9,r12
8002162e:	ee f8 ff a0 	ld.w	r8,r7[-96]
80021632:	91 39       	st.w	r8[0xc],r9
	sim->rates_bf[1] = clip((1.0-0.1*sim->dt)*sim->rates_bf[1] + sim->dt * sim->torques_bf[1] /sim->roll_pitch_momentum, 10.0);
80021634:	ee f8 ff a0 	ld.w	r8,r7[-96]
80021638:	f0 f8 01 90 	ld.w	r8,r8[400]
8002163c:	10 9c       	mov	r12,r8
8002163e:	f0 16 00 02 	mcall	r6[8]
80021642:	e0 68 99 9a 	mov	r8,39322
80021646:	ea 18 99 99 	orh	r8,0x9999
8002164a:	e0 69 99 99 	mov	r9,39321
8002164e:	ea 19 bf b9 	orh	r9,0xbfb9
80021652:	f0 16 00 03 	mcall	r6[12]
80021656:	14 98       	mov	r8,r10
80021658:	16 99       	mov	r9,r11
8002165a:	10 9a       	mov	r10,r8
8002165c:	12 9b       	mov	r11,r9
8002165e:	30 08       	mov	r8,0
80021660:	fc 19 3f f0 	movh	r9,0x3ff0
80021664:	f0 16 00 05 	mcall	r6[20]
80021668:	14 98       	mov	r8,r10
8002166a:	16 99       	mov	r9,r11
8002166c:	10 92       	mov	r2,r8
8002166e:	12 93       	mov	r3,r9
80021670:	ee f8 ff a0 	ld.w	r8,r7[-96]
80021674:	70 48       	ld.w	r8,r8[0x10]
80021676:	10 9c       	mov	r12,r8
80021678:	f0 16 00 02 	mcall	r6[8]
8002167c:	14 98       	mov	r8,r10
8002167e:	16 99       	mov	r9,r11
80021680:	04 9a       	mov	r10,r2
80021682:	06 9b       	mov	r11,r3
80021684:	f0 16 00 03 	mcall	r6[12]
80021688:	14 98       	mov	r8,r10
8002168a:	16 99       	mov	r9,r11
8002168c:	10 92       	mov	r2,r8
8002168e:	12 93       	mov	r3,r9
80021690:	ee f8 ff a0 	ld.w	r8,r7[-96]
80021694:	f0 f9 01 90 	ld.w	r9,r8[400]
80021698:	ee f8 ff a0 	ld.w	r8,r7[-96]
8002169c:	70 18       	ld.w	r8,r8[0x4]
8002169e:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
800216a2:	ee f9 ff a0 	ld.w	r9,r7[-96]
800216a6:	f2 f9 01 7c 	ld.w	r9,r9[380]
800216aa:	12 9b       	mov	r11,r9
800216ac:	10 9c       	mov	r12,r8
800216ae:	f0 16 00 08 	mcall	r6[32]
800216b2:	18 98       	mov	r8,r12
800216b4:	10 9c       	mov	r12,r8
800216b6:	f0 16 00 02 	mcall	r6[8]
800216ba:	14 98       	mov	r8,r10
800216bc:	16 99       	mov	r9,r11
800216be:	04 9a       	mov	r10,r2
800216c0:	06 9b       	mov	r11,r3
800216c2:	f0 16 00 05 	mcall	r6[20]
800216c6:	14 98       	mov	r8,r10
800216c8:	16 99       	mov	r9,r11
800216ca:	10 9a       	mov	r10,r8
800216cc:	12 9b       	mov	r11,r9
800216ce:	f0 16 00 09 	mcall	r6[36]
800216d2:	18 98       	mov	r8,r12
800216d4:	fc 1b 41 20 	movh	r11,0x4120
800216d8:	10 9c       	mov	r12,r8
800216da:	fe b0 fa d1 	rcall	80020c7c <clip>
800216de:	18 99       	mov	r9,r12
800216e0:	ee f8 ff a0 	ld.w	r8,r7[-96]
800216e4:	91 49       	st.w	r8[0x10],r9
	sim->rates_bf[2] = clip((1.0-0.1*sim->dt)*sim->rates_bf[2] + sim->dt * sim->torques_bf[2] /sim->yaw_momentum, 10.0);
800216e6:	ee f8 ff a0 	ld.w	r8,r7[-96]
800216ea:	f0 f8 01 90 	ld.w	r8,r8[400]
800216ee:	10 9c       	mov	r12,r8
800216f0:	f0 16 00 02 	mcall	r6[8]
800216f4:	e0 68 99 9a 	mov	r8,39322
800216f8:	ea 18 99 99 	orh	r8,0x9999
800216fc:	e0 69 99 99 	mov	r9,39321
80021700:	ea 19 bf b9 	orh	r9,0xbfb9
80021704:	f0 16 00 03 	mcall	r6[12]
80021708:	14 98       	mov	r8,r10
8002170a:	16 99       	mov	r9,r11
8002170c:	10 9a       	mov	r10,r8
8002170e:	12 9b       	mov	r11,r9
80021710:	30 08       	mov	r8,0
80021712:	fc 19 3f f0 	movh	r9,0x3ff0
80021716:	f0 16 00 05 	mcall	r6[20]
8002171a:	14 98       	mov	r8,r10
8002171c:	16 99       	mov	r9,r11
8002171e:	10 92       	mov	r2,r8
80021720:	12 93       	mov	r3,r9
80021722:	ee f8 ff a0 	ld.w	r8,r7[-96]
80021726:	70 58       	ld.w	r8,r8[0x14]
80021728:	10 9c       	mov	r12,r8
8002172a:	f0 16 00 02 	mcall	r6[8]
8002172e:	14 98       	mov	r8,r10
80021730:	16 99       	mov	r9,r11
80021732:	04 9a       	mov	r10,r2
80021734:	06 9b       	mov	r11,r3
80021736:	f0 16 00 03 	mcall	r6[12]
8002173a:	14 98       	mov	r8,r10
8002173c:	16 99       	mov	r9,r11
8002173e:	10 92       	mov	r2,r8
80021740:	12 93       	mov	r3,r9
80021742:	ee f8 ff a0 	ld.w	r8,r7[-96]
80021746:	f0 f9 01 90 	ld.w	r9,r8[400]
8002174a:	ee f8 ff a0 	ld.w	r8,r7[-96]
8002174e:	70 28       	ld.w	r8,r8[0x8]
80021750:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80021754:	ee f9 ff a0 	ld.w	r9,r7[-96]
80021758:	f2 f9 01 80 	ld.w	r9,r9[384]
8002175c:	12 9b       	mov	r11,r9
8002175e:	10 9c       	mov	r12,r8
80021760:	f0 16 00 08 	mcall	r6[32]
80021764:	18 98       	mov	r8,r12
80021766:	10 9c       	mov	r12,r8
80021768:	f0 16 00 02 	mcall	r6[8]
8002176c:	14 98       	mov	r8,r10
8002176e:	16 99       	mov	r9,r11
80021770:	04 9a       	mov	r10,r2
80021772:	06 9b       	mov	r11,r3
80021774:	f0 16 00 05 	mcall	r6[20]
80021778:	14 98       	mov	r8,r10
8002177a:	16 99       	mov	r9,r11
8002177c:	10 9a       	mov	r10,r8
8002177e:	12 9b       	mov	r11,r9
80021780:	f0 16 00 09 	mcall	r6[36]
80021784:	18 98       	mov	r8,r12
80021786:	fc 1b 41 20 	movh	r11,0x4120
8002178a:	10 9c       	mov	r12,r8
8002178c:	fe b0 fa 78 	rcall	80020c7c <clip>
80021790:	18 99       	mov	r9,r12
80021792:	ee f8 ff a0 	ld.w	r8,r7[-96]
80021796:	91 59       	st.w	r8[0x14],r9
	//}
	
	
	for (i=0; i<3; i++){
80021798:	30 08       	mov	r8,0
8002179a:	ef 48 ff f4 	st.w	r7[-12],r8
8002179e:	c1 58       	rjmp	800217c8 <simu_update+0x2fe>
			qtmp1.v[i] = sim->rates_bf[i];
800217a0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800217a4:	ee fa ff f4 	ld.w	r10,r7[-12]
800217a8:	ee f9 ff a0 	ld.w	r9,r7[-96]
800217ac:	2f da       	sub	r10,-3
800217ae:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
800217b2:	2f f8       	sub	r8,-1
800217b4:	a3 68       	lsl	r8,0x2
800217b6:	ee 08 00 08 	add	r8,r7,r8
800217ba:	f1 49 ff e4 	st.w	r8[-28],r9
	sim->rates_bf[1] = clip((1.0-0.1*sim->dt)*sim->rates_bf[1] + sim->dt * sim->torques_bf[1] /sim->roll_pitch_momentum, 10.0);
	sim->rates_bf[2] = clip((1.0-0.1*sim->dt)*sim->rates_bf[2] + sim->dt * sim->torques_bf[2] /sim->yaw_momentum, 10.0);
	//}
	
	
	for (i=0; i<3; i++){
800217be:	ee f8 ff f4 	ld.w	r8,r7[-12]
800217c2:	2f f8       	sub	r8,-1
800217c4:	ef 48 ff f4 	st.w	r7[-12],r8
800217c8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800217cc:	58 28       	cp.w	r8,2
800217ce:	fe 9a ff e9 	brle	800217a0 <simu_update+0x2d6>
			qtmp1.v[i] = sim->rates_bf[i];
	}
	qtmp1.s=0;
800217d2:	30 08       	mov	r8,0
800217d4:	ef 48 ff e4 	st.w	r7[-28],r8

	// apply step rotation 
	qed = quat_multi(sim->attitude.qe,qtmp1);
800217d8:	ee ca 00 3c 	sub	r10,r7,60
800217dc:	20 4d       	sub	sp,16
800217de:	1a 98       	mov	r8,sp
800217e0:	ee c9 00 1c 	sub	r9,r7,28
800217e4:	20 08       	sub	r8,0
800217e6:	20 09       	sub	r9,0
800217e8:	72 0b       	ld.w	r11,r9[0x0]
800217ea:	91 0b       	st.w	r8[0x0],r11
800217ec:	72 1b       	ld.w	r11,r9[0x4]
800217ee:	91 1b       	st.w	r8[0x4],r11
800217f0:	72 2b       	ld.w	r11,r9[0x8]
800217f2:	91 2b       	st.w	r8[0x8],r11
800217f4:	72 39       	ld.w	r9,r9[0xc]
800217f6:	91 39       	st.w	r8[0xc],r9
800217f8:	ee f9 ff a0 	ld.w	r9,r7[-96]
800217fc:	20 4d       	sub	sp,16
800217fe:	1a 98       	mov	r8,sp
80021800:	2b 89       	sub	r9,-72
80021802:	20 08       	sub	r8,0
80021804:	20 09       	sub	r9,0
80021806:	72 0b       	ld.w	r11,r9[0x0]
80021808:	91 0b       	st.w	r8[0x0],r11
8002180a:	72 1b       	ld.w	r11,r9[0x4]
8002180c:	91 1b       	st.w	r8[0x4],r11
8002180e:	72 2b       	ld.w	r11,r9[0x8]
80021810:	91 2b       	st.w	r8[0x8],r11
80021812:	72 39       	ld.w	r9,r9[0xc]
80021814:	91 39       	st.w	r8[0xc],r9
80021816:	14 9c       	mov	r12,r10
80021818:	fe b0 f7 90 	rcall	80020738 <quat_multi>
8002181c:	2f 8d       	sub	sp,-32

	sim->attitude.qe.s=sim->attitude.qe.s+qed.s*sim->dt;
8002181e:	ee f8 ff a0 	ld.w	r8,r7[-96]
80021822:	71 29       	ld.w	r9,r8[0x48]
80021824:	ee fa ff c4 	ld.w	r10,r7[-60]
80021828:	ee f8 ff a0 	ld.w	r8,r7[-96]
8002182c:	f0 f8 01 90 	ld.w	r8,r8[400]
80021830:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80021834:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80021838:	ee f8 ff a0 	ld.w	r8,r7[-96]
8002183c:	f1 49 00 48 	st.w	r8[72],r9
	sim->attitude.qe.v[0]+=qed.v[0]*sim->dt;
80021840:	ee f8 ff a0 	ld.w	r8,r7[-96]
80021844:	71 39       	ld.w	r9,r8[0x4c]
80021846:	ee fa ff c8 	ld.w	r10,r7[-56]
8002184a:	ee f8 ff a0 	ld.w	r8,r7[-96]
8002184e:	f0 f8 01 90 	ld.w	r8,r8[400]
80021852:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80021856:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8002185a:	ee f8 ff a0 	ld.w	r8,r7[-96]
8002185e:	f1 49 00 4c 	st.w	r8[76],r9
	sim->attitude.qe.v[1]+=qed.v[1]*sim->dt;
80021862:	ee f8 ff a0 	ld.w	r8,r7[-96]
80021866:	71 49       	ld.w	r9,r8[0x50]
80021868:	ee fa ff cc 	ld.w	r10,r7[-52]
8002186c:	ee f8 ff a0 	ld.w	r8,r7[-96]
80021870:	f0 f8 01 90 	ld.w	r8,r8[400]
80021874:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80021878:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8002187c:	ee f8 ff a0 	ld.w	r8,r7[-96]
80021880:	f1 49 00 50 	st.w	r8[80],r9
	sim->attitude.qe.v[2]+=qed.v[2]*sim->dt;
80021884:	ee f8 ff a0 	ld.w	r8,r7[-96]
80021888:	71 59       	ld.w	r9,r8[0x54]
8002188a:	ee fa ff d0 	ld.w	r10,r7[-48]
8002188e:	ee f8 ff a0 	ld.w	r8,r7[-96]
80021892:	f0 f8 01 90 	ld.w	r8,r8[400]
80021896:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8002189a:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8002189e:	ee f8 ff a0 	ld.w	r8,r7[-96]
800218a2:	f1 49 00 54 	st.w	r8[84],r9

	sim->attitude.qe = quat_normalise(sim->attitude.qe);
800218a6:	ee f5 ff a0 	ld.w	r5,r7[-96]
800218aa:	ee ca 00 7c 	sub	r10,r7,124
800218ae:	ee f9 ff a0 	ld.w	r9,r7[-96]
800218b2:	20 4d       	sub	sp,16
800218b4:	1a 98       	mov	r8,sp
800218b6:	2b 89       	sub	r9,-72
800218b8:	20 08       	sub	r8,0
800218ba:	20 09       	sub	r9,0
800218bc:	72 0b       	ld.w	r11,r9[0x0]
800218be:	91 0b       	st.w	r8[0x0],r11
800218c0:	72 1b       	ld.w	r11,r9[0x4]
800218c2:	91 1b       	st.w	r8[0x4],r11
800218c4:	72 2b       	ld.w	r11,r9[0x8]
800218c6:	91 2b       	st.w	r8[0x8],r11
800218c8:	72 39       	ld.w	r9,r9[0xc]
800218ca:	91 39       	st.w	r8[0xc],r9
800218cc:	14 9c       	mov	r12,r10
800218ce:	fe b0 f9 53 	rcall	80020b74 <quat_normalise>
800218d2:	2f cd       	sub	sp,-16
800218d4:	ea c8 ff b8 	sub	r8,r5,-72
800218d8:	ee c9 00 7c 	sub	r9,r7,124
800218dc:	20 08       	sub	r8,0
800218de:	20 09       	sub	r9,0
800218e0:	72 0a       	ld.w	r10,r9[0x0]
800218e2:	91 0a       	st.w	r8[0x0],r10
800218e4:	72 1a       	ld.w	r10,r9[0x4]
800218e6:	91 1a       	st.w	r8[0x4],r10
800218e8:	72 2a       	ld.w	r10,r9[0x8]
800218ea:	91 2a       	st.w	r8[0x8],r10
800218ec:	72 39       	ld.w	r9,r9[0xc]
800218ee:	91 39       	st.w	r8[0xc],r9
	sim->attitude.up_vec = quat_global_to_local(sim->attitude.qe, up);
800218f0:	ee f5 ff a0 	ld.w	r5,r7[-96]
800218f4:	ee ca 00 7c 	sub	r10,r7,124
800218f8:	20 4d       	sub	sp,16
800218fa:	1a 98       	mov	r8,sp
800218fc:	ee c9 00 5c 	sub	r9,r7,92
80021900:	20 08       	sub	r8,0
80021902:	20 09       	sub	r9,0
80021904:	72 0b       	ld.w	r11,r9[0x0]
80021906:	91 0b       	st.w	r8[0x0],r11
80021908:	72 1b       	ld.w	r11,r9[0x4]
8002190a:	91 1b       	st.w	r8[0x4],r11
8002190c:	72 2b       	ld.w	r11,r9[0x8]
8002190e:	91 2b       	st.w	r8[0x8],r11
80021910:	72 39       	ld.w	r9,r9[0xc]
80021912:	91 39       	st.w	r8[0xc],r9
80021914:	ee f9 ff a0 	ld.w	r9,r7[-96]
80021918:	20 4d       	sub	sp,16
8002191a:	1a 98       	mov	r8,sp
8002191c:	2b 89       	sub	r9,-72
8002191e:	20 08       	sub	r8,0
80021920:	20 09       	sub	r9,0
80021922:	72 0b       	ld.w	r11,r9[0x0]
80021924:	91 0b       	st.w	r8[0x0],r11
80021926:	72 1b       	ld.w	r11,r9[0x4]
80021928:	91 1b       	st.w	r8[0x4],r11
8002192a:	72 2b       	ld.w	r11,r9[0x8]
8002192c:	91 2b       	st.w	r8[0x8],r11
8002192e:	72 39       	ld.w	r9,r9[0xc]
80021930:	91 39       	st.w	r8[0xc],r9
80021932:	14 9c       	mov	r12,r10
80021934:	fe b0 f7 ba 	rcall	800208a8 <quat_global_to_local>
80021938:	2f 8d       	sub	sp,-32
8002193a:	ea c8 ff a8 	sub	r8,r5,-88
8002193e:	ee c9 00 7c 	sub	r9,r7,124
80021942:	20 08       	sub	r8,0
80021944:	20 09       	sub	r9,0
80021946:	72 0a       	ld.w	r10,r9[0x0]
80021948:	91 0a       	st.w	r8[0x0],r10
8002194a:	72 1a       	ld.w	r10,r9[0x4]
8002194c:	91 1a       	st.w	r8[0x4],r10
8002194e:	72 2a       	ld.w	r10,r9[0x8]
80021950:	91 2a       	st.w	r8[0x8],r10
80021952:	72 39       	ld.w	r9,r9[0xc]
80021954:	91 39       	st.w	r8[0xc],r9
	
	sim->attitude.north_vec=quat_global_to_local(sim->attitude.qe, front);	
80021956:	ee f5 ff a0 	ld.w	r5,r7[-96]
8002195a:	ee ca 00 7c 	sub	r10,r7,124
8002195e:	20 4d       	sub	sp,16
80021960:	1a 98       	mov	r8,sp
80021962:	ee c9 00 4c 	sub	r9,r7,76
80021966:	20 08       	sub	r8,0
80021968:	20 09       	sub	r9,0
8002196a:	72 0b       	ld.w	r11,r9[0x0]
8002196c:	91 0b       	st.w	r8[0x0],r11
8002196e:	72 1b       	ld.w	r11,r9[0x4]
80021970:	91 1b       	st.w	r8[0x4],r11
80021972:	72 2b       	ld.w	r11,r9[0x8]
80021974:	91 2b       	st.w	r8[0x8],r11
80021976:	72 39       	ld.w	r9,r9[0xc]
80021978:	91 39       	st.w	r8[0xc],r9
8002197a:	ee f9 ff a0 	ld.w	r9,r7[-96]
8002197e:	20 4d       	sub	sp,16
80021980:	1a 98       	mov	r8,sp
80021982:	2b 89       	sub	r9,-72
80021984:	20 08       	sub	r8,0
80021986:	20 09       	sub	r9,0
80021988:	72 0b       	ld.w	r11,r9[0x0]
8002198a:	91 0b       	st.w	r8[0x0],r11
8002198c:	72 1b       	ld.w	r11,r9[0x4]
8002198e:	91 1b       	st.w	r8[0x4],r11
80021990:	72 2b       	ld.w	r11,r9[0x8]
80021992:	91 2b       	st.w	r8[0x8],r11
80021994:	72 39       	ld.w	r9,r9[0xc]
80021996:	91 39       	st.w	r8[0xc],r9
80021998:	14 9c       	mov	r12,r10
8002199a:	fe b0 f7 87 	rcall	800208a8 <quat_global_to_local>
8002199e:	2f 8d       	sub	sp,-32
800219a0:	ea c8 ff 98 	sub	r8,r5,-104
800219a4:	ee c9 00 7c 	sub	r9,r7,124
800219a8:	20 08       	sub	r8,0
800219aa:	20 09       	sub	r9,0
800219ac:	72 0a       	ld.w	r10,r9[0x0]
800219ae:	91 0a       	st.w	r8[0x0],r10
800219b0:	72 1a       	ld.w	r10,r9[0x4]
800219b2:	91 1a       	st.w	r8[0x4],r10
800219b4:	72 2a       	ld.w	r10,r9[0x8]
800219b6:	91 2a       	st.w	r8[0x8],r10
800219b8:	72 39       	ld.w	r9,r9[0xc]
800219ba:	91 39       	st.w	r8[0xc],r9

	// velocity and position integration
	
	// check altitude - if it is lower than 0, clamp everything (this is in NED, assuming negative altitude)
	if (sim->localPosition.pos[Z] >0) {
800219bc:	ee f8 ff a0 	ld.w	r8,r7[-96]
800219c0:	f0 fa 01 1c 	ld.w	r10,r8[284]
800219c4:	30 18       	mov	r8,1
800219c6:	30 09       	mov	r9,0
800219c8:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
800219cc:	e0 8c 00 04 	brvs	800219d4 <simu_update+0x50a>
800219d0:	e0 89 00 03 	brgt	800219d6 <simu_update+0x50c>
800219d4:	30 08       	mov	r8,0
800219d6:	5c 58       	castu.b	r8
800219d8:	e0 80 00 85 	breq	80021ae2 <simu_update+0x618>
		sim->vel[Z]=0.0;
800219dc:	ee f8 ff a0 	ld.w	r8,r7[-96]
800219e0:	30 09       	mov	r9,0
800219e2:	91 e9       	st.w	r8[0x38],r9
		sim->localPosition.pos[Z]=0.0;
800219e4:	ee f8 ff a0 	ld.w	r8,r7[-96]
800219e8:	30 09       	mov	r9,0
800219ea:	f1 49 01 1c 	st.w	r8[284],r9

		// simulate "acceleration" caused by contact force with ground, compensating gravity
		for (i=0; i<3; i++) {
800219ee:	30 08       	mov	r8,0
800219f0:	ef 48 ff f4 	st.w	r7[-12],r8
800219f4:	c4 18       	rjmp	80021a76 <simu_update+0x5ac>
			sim->lin_forces_bf[i]+=sim->attitude.up_vec.v[i]*sim->total_mass *GRAVITY;
800219f6:	ee f5 ff f4 	ld.w	r5,r7[-12]
800219fa:	ee f9 ff f4 	ld.w	r9,r7[-12]
800219fe:	ee f8 ff a0 	ld.w	r8,r7[-96]
80021a02:	2f a9       	sub	r9,-6
80021a04:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80021a08:	10 9c       	mov	r12,r8
80021a0a:	f0 16 00 02 	mcall	r6[8]
80021a0e:	14 92       	mov	r2,r10
80021a10:	16 93       	mov	r3,r11
80021a12:	ee f9 ff f4 	ld.w	r9,r7[-12]
80021a16:	ee f8 ff a0 	ld.w	r8,r7[-96]
80021a1a:	2e 99       	sub	r9,-23
80021a1c:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80021a20:	ee f8 ff a0 	ld.w	r8,r7[-96]
80021a24:	f0 f8 01 74 	ld.w	r8,r8[372]
80021a28:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80021a2c:	10 9c       	mov	r12,r8
80021a2e:	f0 16 00 02 	mcall	r6[8]
80021a32:	e0 68 85 1f 	mov	r8,34079
80021a36:	ea 18 51 eb 	orh	r8,0x51eb
80021a3a:	e0 69 9e b8 	mov	r9,40632
80021a3e:	ea 19 40 23 	orh	r9,0x4023
80021a42:	f0 16 00 03 	mcall	r6[12]
80021a46:	14 98       	mov	r8,r10
80021a48:	16 99       	mov	r9,r11
80021a4a:	04 9a       	mov	r10,r2
80021a4c:	06 9b       	mov	r11,r3
80021a4e:	f0 16 00 05 	mcall	r6[20]
80021a52:	14 98       	mov	r8,r10
80021a54:	16 99       	mov	r9,r11
80021a56:	10 9a       	mov	r10,r8
80021a58:	12 9b       	mov	r11,r9
80021a5a:	f0 16 00 09 	mcall	r6[36]
80021a5e:	18 9a       	mov	r10,r12
80021a60:	ee f8 ff a0 	ld.w	r8,r7[-96]
80021a64:	ea c9 ff fa 	sub	r9,r5,-6
80021a68:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	if (sim->localPosition.pos[Z] >0) {
		sim->vel[Z]=0.0;
		sim->localPosition.pos[Z]=0.0;

		// simulate "acceleration" caused by contact force with ground, compensating gravity
		for (i=0; i<3; i++) {
80021a6c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80021a70:	2f f8       	sub	r8,-1
80021a72:	ef 48 ff f4 	st.w	r7[-12],r8
80021a76:	ee f8 ff f4 	ld.w	r8,r7[-12]
80021a7a:	58 28       	cp.w	r8,2
80021a7c:	fe 9a ff bd 	brle	800219f6 <simu_update+0x52c>
			sim->lin_forces_bf[i]+=sim->attitude.up_vec.v[i]*sim->total_mass *GRAVITY;
		}
				
		// slow down... (will make velocity slightly inconsistent until next update cycle, but shouldn't matter much)
		for (i=0; i<3; i++) {
80021a80:	30 08       	mov	r8,0
80021a82:	ef 48 ff f4 	st.w	r7[-12],r8
80021a86:	c2 98       	rjmp	80021ad8 <simu_update+0x60e>
			sim->vel_bf[i]=0.95*sim->vel_bf[i];
80021a88:	ee f5 ff f4 	ld.w	r5,r7[-12]
80021a8c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80021a90:	ee f8 ff a0 	ld.w	r8,r7[-96]
80021a94:	2f 79       	sub	r9,-9
80021a96:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80021a9a:	10 9c       	mov	r12,r8
80021a9c:	f0 16 00 02 	mcall	r6[8]
80021aa0:	e0 68 66 66 	mov	r8,26214
80021aa4:	ea 18 66 66 	orh	r8,0x6666
80021aa8:	e0 69 66 66 	mov	r9,26214
80021aac:	ea 19 3f ee 	orh	r9,0x3fee
80021ab0:	f0 16 00 03 	mcall	r6[12]
80021ab4:	14 98       	mov	r8,r10
80021ab6:	16 99       	mov	r9,r11
80021ab8:	10 9a       	mov	r10,r8
80021aba:	12 9b       	mov	r11,r9
80021abc:	f0 16 00 09 	mcall	r6[36]
80021ac0:	18 9a       	mov	r10,r12
80021ac2:	ee f8 ff a0 	ld.w	r8,r7[-96]
80021ac6:	ea c9 ff f7 	sub	r9,r5,-9
80021aca:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		for (i=0; i<3; i++) {
			sim->lin_forces_bf[i]+=sim->attitude.up_vec.v[i]*sim->total_mass *GRAVITY;
		}
				
		// slow down... (will make velocity slightly inconsistent until next update cycle, but shouldn't matter much)
		for (i=0; i<3; i++) {
80021ace:	ee f8 ff f4 	ld.w	r8,r7[-12]
80021ad2:	2f f8       	sub	r8,-1
80021ad4:	ef 48 ff f4 	st.w	r7[-12],r8
80021ad8:	ee f8 ff f4 	ld.w	r8,r7[-12]
80021adc:	58 28       	cp.w	r8,2
80021ade:	fe 9a ff d5 	brle	80021a88 <simu_update+0x5be>
			sim->vel_bf[i]=0.95*sim->vel_bf[i];
		}
	}
	
	for (i=0; i<3; i++){
80021ae2:	30 08       	mov	r8,0
80021ae4:	ef 48 ff f4 	st.w	r7[-12],r8
80021ae8:	c1 58       	rjmp	80021b12 <simu_update+0x648>
			qtmp1.v[i] = sim->vel[i];
80021aea:	ee f8 ff f4 	ld.w	r8,r7[-12]
80021aee:	ee fa ff f4 	ld.w	r10,r7[-12]
80021af2:	ee f9 ff a0 	ld.w	r9,r7[-96]
80021af6:	2f 4a       	sub	r10,-12
80021af8:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
80021afc:	2f f8       	sub	r8,-1
80021afe:	a3 68       	lsl	r8,0x2
80021b00:	ee 08 00 08 	add	r8,r7,r8
80021b04:	f1 49 ff e4 	st.w	r8[-28],r9
		for (i=0; i<3; i++) {
			sim->vel_bf[i]=0.95*sim->vel_bf[i];
		}
	}
	
	for (i=0; i<3; i++){
80021b08:	ee f8 ff f4 	ld.w	r8,r7[-12]
80021b0c:	2f f8       	sub	r8,-1
80021b0e:	ef 48 ff f4 	st.w	r7[-12],r8
80021b12:	ee f8 ff f4 	ld.w	r8,r7[-12]
80021b16:	58 28       	cp.w	r8,2
80021b18:	fe 9a ff e9 	brle	80021aea <simu_update+0x620>
			qtmp1.v[i] = sim->vel[i];
	}
	qtmp1.s=0.0;
80021b1c:	30 08       	mov	r8,0
80021b1e:	ef 48 ff e4 	st.w	r7[-28],r8
	qvel_bf=quat_global_to_local(sim->attitude.qe, qtmp1);
80021b22:	ee ca 00 7c 	sub	r10,r7,124
80021b26:	20 4d       	sub	sp,16
80021b28:	1a 98       	mov	r8,sp
80021b2a:	ee c9 00 1c 	sub	r9,r7,28
80021b2e:	20 08       	sub	r8,0
80021b30:	20 09       	sub	r9,0
80021b32:	72 0b       	ld.w	r11,r9[0x0]
80021b34:	91 0b       	st.w	r8[0x0],r11
80021b36:	72 1b       	ld.w	r11,r9[0x4]
80021b38:	91 1b       	st.w	r8[0x4],r11
80021b3a:	72 2b       	ld.w	r11,r9[0x8]
80021b3c:	91 2b       	st.w	r8[0x8],r11
80021b3e:	72 39       	ld.w	r9,r9[0xc]
80021b40:	91 39       	st.w	r8[0xc],r9
80021b42:	ee f9 ff a0 	ld.w	r9,r7[-96]
80021b46:	20 4d       	sub	sp,16
80021b48:	1a 98       	mov	r8,sp
80021b4a:	2b 89       	sub	r9,-72
80021b4c:	20 08       	sub	r8,0
80021b4e:	20 09       	sub	r9,0
80021b50:	72 0b       	ld.w	r11,r9[0x0]
80021b52:	91 0b       	st.w	r8[0x0],r11
80021b54:	72 1b       	ld.w	r11,r9[0x4]
80021b56:	91 1b       	st.w	r8[0x4],r11
80021b58:	72 2b       	ld.w	r11,r9[0x8]
80021b5a:	91 2b       	st.w	r8[0x8],r11
80021b5c:	72 39       	ld.w	r9,r9[0xc]
80021b5e:	91 39       	st.w	r8[0xc],r9
80021b60:	14 9c       	mov	r12,r10
80021b62:	fe b0 f6 a3 	rcall	800208a8 <quat_global_to_local>
80021b66:	2f 8d       	sub	sp,-32
80021b68:	ee c8 00 2c 	sub	r8,r7,44
80021b6c:	ee c9 00 7c 	sub	r9,r7,124
80021b70:	20 08       	sub	r8,0
80021b72:	20 09       	sub	r9,0
80021b74:	72 0a       	ld.w	r10,r9[0x0]
80021b76:	91 0a       	st.w	r8[0x0],r10
80021b78:	72 1a       	ld.w	r10,r9[0x4]
80021b7a:	91 1a       	st.w	r8[0x4],r10
80021b7c:	72 2a       	ld.w	r10,r9[0x8]
80021b7e:	91 2a       	st.w	r8[0x8],r10
80021b80:	72 39       	ld.w	r9,r9[0xc]
80021b82:	91 39       	st.w	r8[0xc],r9
	for (i=0; i<3; i++) {
80021b84:	30 08       	mov	r8,0
80021b86:	ef 48 ff f4 	st.w	r7[-12],r8
80021b8a:	c8 08       	rjmp	80021c8a <simu_update+0x7c0>
		sim->vel_bf[i]=qvel_bf.v[i];
80021b8c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80021b90:	ee f8 ff f4 	ld.w	r8,r7[-12]
80021b94:	2f f8       	sub	r8,-1
80021b96:	a3 68       	lsl	r8,0x2
80021b98:	ee 08 00 08 	add	r8,r7,r8
80021b9c:	f0 fa ff d4 	ld.w	r10,r8[-44]
80021ba0:	ee f8 ff a0 	ld.w	r8,r7[-96]
80021ba4:	2f 79       	sub	r9,-9
80021ba6:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		
		// following the convention in the IMU, this is the acceleration due to force, as measured
		sim->attitude.a[i]=sim->lin_forces_bf[i] / sim->total_mass;
80021baa:	ee f5 ff f4 	ld.w	r5,r7[-12]
80021bae:	ee f9 ff f4 	ld.w	r9,r7[-12]
80021bb2:	ee f8 ff a0 	ld.w	r8,r7[-96]
80021bb6:	2f a9       	sub	r9,-6
80021bb8:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80021bbc:	ee f9 ff a0 	ld.w	r9,r7[-96]
80021bc0:	f2 f9 01 74 	ld.w	r9,r9[372]
80021bc4:	12 9b       	mov	r11,r9
80021bc6:	10 9c       	mov	r12,r8
80021bc8:	f0 16 00 08 	mcall	r6[32]
80021bcc:	18 98       	mov	r8,r12
80021bce:	10 9a       	mov	r10,r8
80021bd0:	ee f8 ff a0 	ld.w	r8,r7[-96]
80021bd4:	ea c9 ff cd 	sub	r9,r5,-51
80021bd8:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		
		// this is the "clean" acceleration without gravity
		sim->attitude.acc_bf[i]=sim->attitude.a[i] - sim->attitude.up_vec.v[i] * GRAVITY;
80021bdc:	ee f5 ff f4 	ld.w	r5,r7[-12]
80021be0:	ee f9 ff f4 	ld.w	r9,r7[-12]
80021be4:	ee f8 ff a0 	ld.w	r8,r7[-96]
80021be8:	2c d9       	sub	r9,-51
80021bea:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80021bee:	10 9c       	mov	r12,r8
80021bf0:	f0 16 00 02 	mcall	r6[8]
80021bf4:	14 92       	mov	r2,r10
80021bf6:	16 93       	mov	r3,r11
80021bf8:	ee f9 ff f4 	ld.w	r9,r7[-12]
80021bfc:	ee f8 ff a0 	ld.w	r8,r7[-96]
80021c00:	2e 99       	sub	r9,-23
80021c02:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80021c06:	10 9c       	mov	r12,r8
80021c08:	f0 16 00 02 	mcall	r6[8]
80021c0c:	e0 68 85 1f 	mov	r8,34079
80021c10:	ea 18 51 eb 	orh	r8,0x51eb
80021c14:	e0 69 9e b8 	mov	r9,40632
80021c18:	ea 19 c0 23 	orh	r9,0xc023
80021c1c:	f0 16 00 03 	mcall	r6[12]
80021c20:	14 98       	mov	r8,r10
80021c22:	16 99       	mov	r9,r11
80021c24:	04 9a       	mov	r10,r2
80021c26:	06 9b       	mov	r11,r3
80021c28:	f0 16 00 05 	mcall	r6[20]
80021c2c:	14 98       	mov	r8,r10
80021c2e:	16 99       	mov	r9,r11
80021c30:	10 9a       	mov	r10,r8
80021c32:	12 9b       	mov	r11,r9
80021c34:	f0 16 00 09 	mcall	r6[36]
80021c38:	18 9a       	mov	r10,r12
80021c3a:	ee f8 ff a0 	ld.w	r8,r7[-96]
80021c3e:	ea c9 ff be 	sub	r9,r5,-66
80021c42:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		
		sim->vel_bf[i]=sim->vel_bf[i] + sim->attitude.acc_bf[i] * sim->dt;
80021c46:	ee f9 ff f4 	ld.w	r9,r7[-12]
80021c4a:	ee fa ff f4 	ld.w	r10,r7[-12]
80021c4e:	ee f8 ff a0 	ld.w	r8,r7[-96]
80021c52:	2f 7a       	sub	r10,-9
80021c54:	f0 0a 03 2a 	ld.w	r10,r8[r10<<0x2]
80021c58:	ee fb ff f4 	ld.w	r11,r7[-12]
80021c5c:	ee f8 ff a0 	ld.w	r8,r7[-96]
80021c60:	2b eb       	sub	r11,-66
80021c62:	f0 0b 03 2b 	ld.w	r11,r8[r11<<0x2]
80021c66:	ee f8 ff a0 	ld.w	r8,r7[-96]
80021c6a:	f0 f8 01 90 	ld.w	r8,r8[400]
80021c6e:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
80021c72:	e5 a0 0a a8 	cop	cp0,cr10,cr10,cr8,0x40
80021c76:	ee f8 ff a0 	ld.w	r8,r7[-96]
80021c7a:	2f 79       	sub	r9,-9
80021c7c:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	for (i=0; i<3; i++){
			qtmp1.v[i] = sim->vel[i];
	}
	qtmp1.s=0.0;
	qvel_bf=quat_global_to_local(sim->attitude.qe, qtmp1);
	for (i=0; i<3; i++) {
80021c80:	ee f8 ff f4 	ld.w	r8,r7[-12]
80021c84:	2f f8       	sub	r8,-1
80021c86:	ef 48 ff f4 	st.w	r7[-12],r8
80021c8a:	ee f8 ff f4 	ld.w	r8,r7[-12]
80021c8e:	58 28       	cp.w	r8,2
80021c90:	fe 9a ff 7e 	brle	80021b8c <simu_update+0x6c2>
		sim->vel_bf[i]=sim->vel_bf[i] + sim->attitude.acc_bf[i] * sim->dt;
	}
	
	// calculate velocity in global frame
	// vel = qe *vel_bf * qe-1
	qvel_bf.s= 0.0; qvel_bf.v[0]=sim->vel_bf[0]; qvel_bf.v[1]=sim->vel_bf[1]; qvel_bf.v[2]=sim->vel_bf[2];
80021c94:	30 08       	mov	r8,0
80021c96:	ef 48 ff d4 	st.w	r7[-44],r8
80021c9a:	ee f8 ff a0 	ld.w	r8,r7[-96]
80021c9e:	70 98       	ld.w	r8,r8[0x24]
80021ca0:	ef 48 ff d8 	st.w	r7[-40],r8
80021ca4:	ee f8 ff a0 	ld.w	r8,r7[-96]
80021ca8:	70 a8       	ld.w	r8,r8[0x28]
80021caa:	ef 48 ff dc 	st.w	r7[-36],r8
80021cae:	ee f8 ff a0 	ld.w	r8,r7[-96]
80021cb2:	70 b8       	ld.w	r8,r8[0x2c]
80021cb4:	ef 48 ff e0 	st.w	r7[-32],r8
	qtmp1 = quat_local_to_global(sim->attitude.qe, qvel_bf);
80021cb8:	ee ca 00 7c 	sub	r10,r7,124
80021cbc:	20 4d       	sub	sp,16
80021cbe:	1a 98       	mov	r8,sp
80021cc0:	ee c9 00 2c 	sub	r9,r7,44
80021cc4:	20 08       	sub	r8,0
80021cc6:	20 09       	sub	r9,0
80021cc8:	72 0b       	ld.w	r11,r9[0x0]
80021cca:	91 0b       	st.w	r8[0x0],r11
80021ccc:	72 1b       	ld.w	r11,r9[0x4]
80021cce:	91 1b       	st.w	r8[0x4],r11
80021cd0:	72 2b       	ld.w	r11,r9[0x8]
80021cd2:	91 2b       	st.w	r8[0x8],r11
80021cd4:	72 39       	ld.w	r9,r9[0xc]
80021cd6:	91 39       	st.w	r8[0xc],r9
80021cd8:	ee f9 ff a0 	ld.w	r9,r7[-96]
80021cdc:	20 4d       	sub	sp,16
80021cde:	1a 98       	mov	r8,sp
80021ce0:	2b 89       	sub	r9,-72
80021ce2:	20 08       	sub	r8,0
80021ce4:	20 09       	sub	r9,0
80021ce6:	72 0b       	ld.w	r11,r9[0x0]
80021ce8:	91 0b       	st.w	r8[0x0],r11
80021cea:	72 1b       	ld.w	r11,r9[0x4]
80021cec:	91 1b       	st.w	r8[0x4],r11
80021cee:	72 2b       	ld.w	r11,r9[0x8]
80021cf0:	91 2b       	st.w	r8[0x8],r11
80021cf2:	72 39       	ld.w	r9,r9[0xc]
80021cf4:	91 39       	st.w	r8[0xc],r9
80021cf6:	14 9c       	mov	r12,r10
80021cf8:	fe b0 f6 56 	rcall	800209a4 <quat_local_to_global>
80021cfc:	2f 8d       	sub	sp,-32
80021cfe:	ee c8 00 1c 	sub	r8,r7,28
80021d02:	ee c9 00 7c 	sub	r9,r7,124
80021d06:	20 08       	sub	r8,0
80021d08:	20 09       	sub	r9,0
80021d0a:	72 0a       	ld.w	r10,r9[0x0]
80021d0c:	91 0a       	st.w	r8[0x0],r10
80021d0e:	72 1a       	ld.w	r10,r9[0x4]
80021d10:	91 1a       	st.w	r8[0x4],r10
80021d12:	72 2a       	ld.w	r10,r9[0x8]
80021d14:	91 2a       	st.w	r8[0x8],r10
80021d16:	72 39       	ld.w	r9,r9[0xc]
80021d18:	91 39       	st.w	r8[0xc],r9
	sim->vel[0]=qtmp1.v[0]; sim->vel[1]=qtmp1.v[1]; sim->vel[2]=qtmp1.v[2];
80021d1a:	ee f9 ff e8 	ld.w	r9,r7[-24]
80021d1e:	ee f8 ff a0 	ld.w	r8,r7[-96]
80021d22:	91 c9       	st.w	r8[0x30],r9
80021d24:	ee f9 ff ec 	ld.w	r9,r7[-20]
80021d28:	ee f8 ff a0 	ld.w	r8,r7[-96]
80021d2c:	91 d9       	st.w	r8[0x34],r9
80021d2e:	ee f9 ff f0 	ld.w	r9,r7[-16]
80021d32:	ee f8 ff a0 	ld.w	r8,r7[-96]
80021d36:	91 e9       	st.w	r8[0x38],r9
	
	for (i=0; i<3; i++) {
80021d38:	30 08       	mov	r8,0
80021d3a:	ef 48 ff f4 	st.w	r7[-12],r8
80021d3e:	c2 38       	rjmp	80021d84 <simu_update+0x8ba>
		sim->localPosition.pos[i] =sim->localPosition.pos[i] + sim->vel[i] * sim->dt;
80021d40:	ee f9 ff f4 	ld.w	r9,r7[-12]
80021d44:	ee fa ff f4 	ld.w	r10,r7[-12]
80021d48:	ee f8 ff a0 	ld.w	r8,r7[-96]
80021d4c:	2b ba       	sub	r10,-69
80021d4e:	f0 0a 03 2a 	ld.w	r10,r8[r10<<0x2]
80021d52:	ee fb ff f4 	ld.w	r11,r7[-12]
80021d56:	ee f8 ff a0 	ld.w	r8,r7[-96]
80021d5a:	2f 4b       	sub	r11,-12
80021d5c:	f0 0b 03 2b 	ld.w	r11,r8[r11<<0x2]
80021d60:	ee f8 ff a0 	ld.w	r8,r7[-96]
80021d64:	f0 f8 01 90 	ld.w	r8,r8[400]
80021d68:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
80021d6c:	e5 a0 0a a8 	cop	cp0,cr10,cr10,cr8,0x40
80021d70:	ee f8 ff a0 	ld.w	r8,r7[-96]
80021d74:	2b b9       	sub	r9,-69
80021d76:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	// vel = qe *vel_bf * qe-1
	qvel_bf.s= 0.0; qvel_bf.v[0]=sim->vel_bf[0]; qvel_bf.v[1]=sim->vel_bf[1]; qvel_bf.v[2]=sim->vel_bf[2];
	qtmp1 = quat_local_to_global(sim->attitude.qe, qvel_bf);
	sim->vel[0]=qtmp1.v[0]; sim->vel[1]=qtmp1.v[1]; sim->vel[2]=qtmp1.v[2];
	
	for (i=0; i<3; i++) {
80021d7a:	ee f8 ff f4 	ld.w	r8,r7[-12]
80021d7e:	2f f8       	sub	r8,-1
80021d80:	ef 48 ff f4 	st.w	r7[-12],r8
80021d84:	ee f8 ff f4 	ld.w	r8,r7[-12]
80021d88:	58 28       	cp.w	r8,2
80021d8a:	fe 9a ff db 	brle	80021d40 <simu_update+0x876>



	// fill in simulated IMU values
	
	imu->raw_channels[GYRO_OFFSET+IMU_X]=sim->rates_bf[0] * imu->raw_scale[GYRO_OFFSET+IMU_X]+imu->raw_bias[GYRO_OFFSET+IMU_X];
80021d8e:	ee f8 ff a0 	ld.w	r8,r7[-96]
80021d92:	70 39       	ld.w	r9,r8[0xc]
80021d94:	ee f8 ff 98 	ld.w	r8,r7[-104]
80021d98:	f0 f8 01 14 	ld.w	r8,r8[276]
80021d9c:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80021da0:	ee f8 ff 98 	ld.w	r8,r7[-104]
80021da4:	f0 f8 00 f0 	ld.w	r8,r8[240]
80021da8:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80021dac:	ee f8 ff 98 	ld.w	r8,r7[-104]
80021db0:	f1 49 00 cc 	st.w	r8[204],r9
	imu->raw_channels[GYRO_OFFSET+IMU_Y]=sim->rates_bf[1] * imu->raw_scale[GYRO_OFFSET+IMU_Y]+imu->raw_bias[GYRO_OFFSET+IMU_Y];
80021db4:	ee f8 ff a0 	ld.w	r8,r7[-96]
80021db8:	70 49       	ld.w	r9,r8[0x10]
80021dba:	ee f8 ff 98 	ld.w	r8,r7[-104]
80021dbe:	f0 f8 01 18 	ld.w	r8,r8[280]
80021dc2:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80021dc6:	ee f8 ff 98 	ld.w	r8,r7[-104]
80021dca:	f0 f8 00 f4 	ld.w	r8,r8[244]
80021dce:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80021dd2:	ee f8 ff 98 	ld.w	r8,r7[-104]
80021dd6:	f1 49 00 d0 	st.w	r8[208],r9
	imu->raw_channels[GYRO_OFFSET+IMU_Z]=sim->rates_bf[2] * imu->raw_scale[GYRO_OFFSET+IMU_Z]+imu->raw_bias[GYRO_OFFSET+IMU_Z];
80021dda:	ee f8 ff a0 	ld.w	r8,r7[-96]
80021dde:	70 59       	ld.w	r9,r8[0x14]
80021de0:	ee f8 ff 98 	ld.w	r8,r7[-104]
80021de4:	f0 f8 01 1c 	ld.w	r8,r8[284]
80021de8:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80021dec:	ee f8 ff 98 	ld.w	r8,r7[-104]
80021df0:	f0 f8 00 f8 	ld.w	r8,r8[248]
80021df4:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80021df8:	ee f8 ff 98 	ld.w	r8,r7[-104]
80021dfc:	f1 49 00 d4 	st.w	r8[212],r9

	imu->raw_channels[ACC_OFFSET+IMU_X]=(sim->lin_forces_bf[0] / sim->total_mass / GRAVITY)*imu->raw_scale[ACC_OFFSET+IMU_X]+imu->raw_bias[ACC_OFFSET+IMU_X];
80021e00:	ee f8 ff a0 	ld.w	r8,r7[-96]
80021e04:	70 68       	ld.w	r8,r8[0x18]
80021e06:	ee f9 ff a0 	ld.w	r9,r7[-96]
80021e0a:	f2 f9 01 74 	ld.w	r9,r9[372]
80021e0e:	12 9b       	mov	r11,r9
80021e10:	10 9c       	mov	r12,r8
80021e12:	f0 16 00 08 	mcall	r6[32]
80021e16:	18 98       	mov	r8,r12
80021e18:	10 9c       	mov	r12,r8
80021e1a:	f0 16 00 02 	mcall	r6[8]
80021e1e:	e0 68 85 1f 	mov	r8,34079
80021e22:	ea 18 51 eb 	orh	r8,0x51eb
80021e26:	e0 69 9e b8 	mov	r9,40632
80021e2a:	ea 19 40 23 	orh	r9,0x4023
80021e2e:	f0 16 00 0c 	mcall	r6[48]
80021e32:	14 98       	mov	r8,r10
80021e34:	16 99       	mov	r9,r11
80021e36:	10 92       	mov	r2,r8
80021e38:	12 93       	mov	r3,r9
80021e3a:	ee f8 ff 98 	ld.w	r8,r7[-104]
80021e3e:	f0 f8 01 20 	ld.w	r8,r8[288]
80021e42:	10 9c       	mov	r12,r8
80021e44:	f0 16 00 02 	mcall	r6[8]
80021e48:	14 98       	mov	r8,r10
80021e4a:	16 99       	mov	r9,r11
80021e4c:	04 9a       	mov	r10,r2
80021e4e:	06 9b       	mov	r11,r3
80021e50:	f0 16 00 03 	mcall	r6[12]
80021e54:	14 98       	mov	r8,r10
80021e56:	16 99       	mov	r9,r11
80021e58:	10 92       	mov	r2,r8
80021e5a:	12 93       	mov	r3,r9
80021e5c:	ee f8 ff 98 	ld.w	r8,r7[-104]
80021e60:	f0 f8 00 fc 	ld.w	r8,r8[252]
80021e64:	10 9c       	mov	r12,r8
80021e66:	f0 16 00 02 	mcall	r6[8]
80021e6a:	14 98       	mov	r8,r10
80021e6c:	16 99       	mov	r9,r11
80021e6e:	04 9a       	mov	r10,r2
80021e70:	06 9b       	mov	r11,r3
80021e72:	f0 16 00 05 	mcall	r6[20]
80021e76:	14 98       	mov	r8,r10
80021e78:	16 99       	mov	r9,r11
80021e7a:	10 9a       	mov	r10,r8
80021e7c:	12 9b       	mov	r11,r9
80021e7e:	f0 16 00 09 	mcall	r6[36]
80021e82:	18 99       	mov	r9,r12
80021e84:	ee f8 ff 98 	ld.w	r8,r7[-104]
80021e88:	f1 49 00 d8 	st.w	r8[216],r9
	imu->raw_channels[ACC_OFFSET+IMU_Y]=(sim->lin_forces_bf[1] / sim->total_mass / GRAVITY)*imu->raw_scale[ACC_OFFSET+IMU_Y]+imu->raw_bias[ACC_OFFSET+IMU_Y];
80021e8c:	ee f8 ff a0 	ld.w	r8,r7[-96]
80021e90:	70 78       	ld.w	r8,r8[0x1c]
80021e92:	ee f9 ff a0 	ld.w	r9,r7[-96]
80021e96:	f2 f9 01 74 	ld.w	r9,r9[372]
80021e9a:	12 9b       	mov	r11,r9
80021e9c:	10 9c       	mov	r12,r8
80021e9e:	f0 16 00 08 	mcall	r6[32]
80021ea2:	18 98       	mov	r8,r12
80021ea4:	10 9c       	mov	r12,r8
80021ea6:	f0 16 00 02 	mcall	r6[8]
80021eaa:	e0 68 85 1f 	mov	r8,34079
80021eae:	ea 18 51 eb 	orh	r8,0x51eb
80021eb2:	e0 69 9e b8 	mov	r9,40632
80021eb6:	ea 19 40 23 	orh	r9,0x4023
80021eba:	f0 16 00 0c 	mcall	r6[48]
80021ebe:	14 98       	mov	r8,r10
80021ec0:	16 99       	mov	r9,r11
80021ec2:	10 92       	mov	r2,r8
80021ec4:	12 93       	mov	r3,r9
80021ec6:	ee f8 ff 98 	ld.w	r8,r7[-104]
80021eca:	f0 f8 01 24 	ld.w	r8,r8[292]
80021ece:	10 9c       	mov	r12,r8
80021ed0:	f0 16 00 02 	mcall	r6[8]
80021ed4:	14 98       	mov	r8,r10
80021ed6:	16 99       	mov	r9,r11
80021ed8:	04 9a       	mov	r10,r2
80021eda:	06 9b       	mov	r11,r3
80021edc:	f0 16 00 03 	mcall	r6[12]
80021ee0:	14 98       	mov	r8,r10
80021ee2:	16 99       	mov	r9,r11
80021ee4:	10 92       	mov	r2,r8
80021ee6:	12 93       	mov	r3,r9
80021ee8:	ee f8 ff 98 	ld.w	r8,r7[-104]
80021eec:	f0 f8 01 00 	ld.w	r8,r8[256]
80021ef0:	10 9c       	mov	r12,r8
80021ef2:	f0 16 00 02 	mcall	r6[8]
80021ef6:	14 98       	mov	r8,r10
80021ef8:	16 99       	mov	r9,r11
80021efa:	04 9a       	mov	r10,r2
80021efc:	06 9b       	mov	r11,r3
80021efe:	f0 16 00 05 	mcall	r6[20]
80021f02:	14 98       	mov	r8,r10
80021f04:	16 99       	mov	r9,r11
80021f06:	10 9a       	mov	r10,r8
80021f08:	12 9b       	mov	r11,r9
80021f0a:	f0 16 00 09 	mcall	r6[36]
80021f0e:	18 99       	mov	r9,r12
80021f10:	ee f8 ff 98 	ld.w	r8,r7[-104]
80021f14:	f1 49 00 dc 	st.w	r8[220],r9
	imu->raw_channels[ACC_OFFSET+IMU_Z]=(sim->lin_forces_bf[2] / sim->total_mass / GRAVITY)*imu->raw_scale[ACC_OFFSET+IMU_Z]+imu->raw_bias[ACC_OFFSET+IMU_Z];
80021f18:	ee f8 ff a0 	ld.w	r8,r7[-96]
80021f1c:	70 88       	ld.w	r8,r8[0x20]
80021f1e:	ee f9 ff a0 	ld.w	r9,r7[-96]
80021f22:	f2 f9 01 74 	ld.w	r9,r9[372]
80021f26:	12 9b       	mov	r11,r9
80021f28:	10 9c       	mov	r12,r8
80021f2a:	f0 16 00 08 	mcall	r6[32]
80021f2e:	18 98       	mov	r8,r12
80021f30:	10 9c       	mov	r12,r8
80021f32:	f0 16 00 02 	mcall	r6[8]
80021f36:	e0 68 85 1f 	mov	r8,34079
80021f3a:	ea 18 51 eb 	orh	r8,0x51eb
80021f3e:	e0 69 9e b8 	mov	r9,40632
80021f42:	ea 19 40 23 	orh	r9,0x4023
80021f46:	f0 16 00 0c 	mcall	r6[48]
80021f4a:	14 98       	mov	r8,r10
80021f4c:	16 99       	mov	r9,r11
80021f4e:	10 92       	mov	r2,r8
80021f50:	12 93       	mov	r3,r9
80021f52:	ee f8 ff 98 	ld.w	r8,r7[-104]
80021f56:	f0 f8 01 28 	ld.w	r8,r8[296]
80021f5a:	10 9c       	mov	r12,r8
80021f5c:	f0 16 00 02 	mcall	r6[8]
80021f60:	14 98       	mov	r8,r10
80021f62:	16 99       	mov	r9,r11
80021f64:	04 9a       	mov	r10,r2
80021f66:	06 9b       	mov	r11,r3
80021f68:	f0 16 00 03 	mcall	r6[12]
80021f6c:	14 98       	mov	r8,r10
80021f6e:	16 99       	mov	r9,r11
80021f70:	10 92       	mov	r2,r8
80021f72:	12 93       	mov	r3,r9
80021f74:	ee f8 ff 98 	ld.w	r8,r7[-104]
80021f78:	f0 f8 01 04 	ld.w	r8,r8[260]
80021f7c:	10 9c       	mov	r12,r8
80021f7e:	f0 16 00 02 	mcall	r6[8]
80021f82:	14 98       	mov	r8,r10
80021f84:	16 99       	mov	r9,r11
80021f86:	04 9a       	mov	r10,r2
80021f88:	06 9b       	mov	r11,r3
80021f8a:	f0 16 00 05 	mcall	r6[20]
80021f8e:	14 98       	mov	r8,r10
80021f90:	16 99       	mov	r9,r11
80021f92:	10 9a       	mov	r10,r8
80021f94:	12 9b       	mov	r11,r9
80021f96:	f0 16 00 09 	mcall	r6[36]
80021f9a:	18 99       	mov	r9,r12
80021f9c:	ee f8 ff 98 	ld.w	r8,r7[-104]
80021fa0:	f1 49 00 e0 	st.w	r8[224],r9
	// cheating... provide true upvector instead of simulated forces
	//imu->raw_channels[ACC_OFFSET+IMU_X]=sim->attitude.up_vec.v[0] *imu->raw_scale[ACC_OFFSET+IMU_X]+imu->raw_bias[ACC_OFFSET+IMU_X];
	//imu->raw_channels[ACC_OFFSET+IMU_Y]=sim->attitude.up_vec.v[1] *imu->raw_scale[ACC_OFFSET+IMU_Y]+imu->raw_bias[ACC_OFFSET+IMU_Y];
	//imu->raw_channels[ACC_OFFSET+IMU_Z]=sim->attitude.up_vec.v[2] *imu->raw_scale[ACC_OFFSET+IMU_Z]+imu->raw_bias[ACC_OFFSET+IMU_Z];
	
	imu->raw_channels[COMPASS_OFFSET+IMU_X]=(sim->attitude.north_vec.v[0] )*imu->raw_scale[COMPASS_OFFSET+IMU_X]+imu->raw_bias[COMPASS_OFFSET+IMU_X];
80021fa4:	ee f8 ff a0 	ld.w	r8,r7[-96]
80021fa8:	71 b9       	ld.w	r9,r8[0x6c]
80021faa:	ee f8 ff 98 	ld.w	r8,r7[-104]
80021fae:	f0 f8 01 2c 	ld.w	r8,r8[300]
80021fb2:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80021fb6:	ee f8 ff 98 	ld.w	r8,r7[-104]
80021fba:	f0 f8 01 08 	ld.w	r8,r8[264]
80021fbe:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80021fc2:	ee f8 ff 98 	ld.w	r8,r7[-104]
80021fc6:	f1 49 00 e4 	st.w	r8[228],r9
	imu->raw_channels[COMPASS_OFFSET+IMU_Y]=(sim->attitude.north_vec.v[1] )*imu->raw_scale[COMPASS_OFFSET+IMU_Y]+imu->raw_bias[COMPASS_OFFSET+IMU_Y];
80021fca:	ee f8 ff a0 	ld.w	r8,r7[-96]
80021fce:	71 c9       	ld.w	r9,r8[0x70]
80021fd0:	ee f8 ff 98 	ld.w	r8,r7[-104]
80021fd4:	f0 f8 01 30 	ld.w	r8,r8[304]
80021fd8:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80021fdc:	ee f8 ff 98 	ld.w	r8,r7[-104]
80021fe0:	f0 f8 01 0c 	ld.w	r8,r8[268]
80021fe4:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80021fe8:	ee f8 ff 98 	ld.w	r8,r7[-104]
80021fec:	f1 49 00 e8 	st.w	r8[232],r9
	imu->raw_channels[COMPASS_OFFSET+IMU_Z]=(sim->attitude.north_vec.v[2] )*imu->raw_scale[COMPASS_OFFSET+IMU_Z]+imu->raw_bias[COMPASS_OFFSET+IMU_Z];
80021ff0:	ee f8 ff a0 	ld.w	r8,r7[-96]
80021ff4:	71 d9       	ld.w	r9,r8[0x74]
80021ff6:	ee f8 ff 98 	ld.w	r8,r7[-104]
80021ffa:	f0 f8 01 34 	ld.w	r8,r8[308]
80021ffe:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80022002:	ee f8 ff 98 	ld.w	r8,r7[-104]
80022006:	f0 f8 01 10 	ld.w	r8,r8[272]
8002200a:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8002200e:	ee f8 ff 98 	ld.w	r8,r7[-104]
80022012:	f1 49 00 ec 	st.w	r8[236],r9
	
	
	//imu->dt=sim->dt;

	sim->localPosition.heading=get_yaw(sim->attitude.qe);
80022016:	ee f9 ff a0 	ld.w	r9,r7[-96]
8002201a:	20 4d       	sub	sp,16
8002201c:	1a 98       	mov	r8,sp
8002201e:	2b 89       	sub	r9,-72
80022020:	20 08       	sub	r8,0
80022022:	20 09       	sub	r9,0
80022024:	72 0a       	ld.w	r10,r9[0x0]
80022026:	91 0a       	st.w	r8[0x0],r10
80022028:	72 1a       	ld.w	r10,r9[0x4]
8002202a:	91 1a       	st.w	r8[0x4],r10
8002202c:	72 2a       	ld.w	r10,r9[0x8]
8002202e:	91 2a       	st.w	r8[0x8],r10
80022030:	72 39       	ld.w	r9,r9[0xc]
80022032:	91 39       	st.w	r8[0xc],r9
80022034:	f0 16 01 09 	mcall	r6[1060]
80022038:	2f cd       	sub	sp,-16
8002203a:	18 99       	mov	r9,r12
8002203c:	ee f8 ff a0 	ld.w	r8,r7[-96]
80022040:	f1 49 01 20 	st.w	r8[288],r9
	//pos_est->localPosition=sim->localPosition;
}
80022044:	2e 1d       	sub	sp,-124
80022046:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
8002204a:	00 00       	add	r0,r0
8002204c:	80 02       	ld.sh	r2,r0[0x0]
8002204e:	13 5a       	ld.sh	r10,--r9

80022050 <simulate_barometer>:

void simulate_barometer(simulation_model_t *sim, pressure_data *pressure) {
80022050:	eb cd 40 c0 	pushm	r6-r7,lr
80022054:	1a 97       	mov	r7,sp
80022056:	20 2d       	sub	sp,8
80022058:	49 36       	lddpc	r6,800220a4 <simulate_barometer+0x54>
8002205a:	1e 26       	rsub	r6,pc
8002205c:	ef 4c ff fc 	st.w	r7[-4],r12
80022060:	ef 4b ff f8 	st.w	r7[-8],r11

		pressure->altitude=sim->localPosition.origin.altitude - sim->localPosition.pos[Z];
80022064:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022068:	f0 f9 01 34 	ld.w	r9,r8[308]
8002206c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022070:	f0 f8 01 1c 	ld.w	r8,r8[284]
80022074:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80022078:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002207c:	91 79       	st.w	r8[0x1c],r9
		pressure->vario_vz=sim->vel[Z];
8002207e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022082:	70 e9       	ld.w	r9,r8[0x38]
80022084:	ee f8 ff f8 	ld.w	r8,r7[-8]
80022088:	91 99       	st.w	r8[0x24],r9
		pressure->last_update=get_millis();
8002208a:	f0 16 00 0f 	mcall	r6[60]
8002208e:	18 99       	mov	r9,r12
80022090:	ee f8 ff f8 	ld.w	r8,r7[-8]
80022094:	91 a9       	st.w	r8[0x28],r9
		pressure->altitude_offset=0;
80022096:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002209a:	30 09       	mov	r9,0
8002209c:	91 89       	st.w	r8[0x20],r9
		
	}
8002209e:	2f ed       	sub	sp,-8
800220a0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800220a4:	80 02       	ld.sh	r2,r0[0x0]
800220a6:	1e de       	st.w	--pc,lr

800220a8 <simulate_gps>:
	
void simulate_gps(simulation_model_t *sim, gps_Data_type *gps) {
800220a8:	eb cd 40 c0 	pushm	r6-r7,lr
800220ac:	1a 97       	mov	r7,sp
800220ae:	20 9d       	sub	sp,36
800220b0:	4a b6       	lddpc	r6,8002215c <simulate_gps+0xb4>
800220b2:	1e 26       	rsub	r6,pc
800220b4:	ef 4c ff e0 	st.w	r7[-32],r12
800220b8:	ef 4b ff dc 	st.w	r7[-36],r11
		global_position_t gpos=local_to_global_position(sim->localPosition);
800220bc:	ee cc 00 1c 	sub	r12,r7,28
800220c0:	ee f8 ff e0 	ld.w	r8,r7[-32]
800220c4:	20 cd       	sub	sp,48
800220c6:	1a 99       	mov	r9,sp
800220c8:	12 9b       	mov	r11,r9
800220ca:	f0 ca fe ec 	sub	r10,r8,-276
800220ce:	f6 c8 00 00 	sub	r8,r11,0
800220d2:	f4 c9 00 00 	sub	r9,r10,0
800220d6:	72 0e       	ld.w	lr,r9[0x0]
800220d8:	91 0e       	st.w	r8[0x0],lr
800220da:	72 1e       	ld.w	lr,r9[0x4]
800220dc:	91 1e       	st.w	r8[0x4],lr
800220de:	72 2e       	ld.w	lr,r9[0x8]
800220e0:	91 2e       	st.w	r8[0x8],lr
800220e2:	72 39       	ld.w	r9,r9[0xc]
800220e4:	91 39       	st.w	r8[0xc],r9
800220e6:	f6 c8 ff f0 	sub	r8,r11,-16
800220ea:	f4 c9 ff f0 	sub	r9,r10,-16
800220ee:	72 0e       	ld.w	lr,r9[0x0]
800220f0:	91 0e       	st.w	r8[0x0],lr
800220f2:	72 1e       	ld.w	lr,r9[0x4]
800220f4:	91 1e       	st.w	r8[0x4],lr
800220f6:	72 2e       	ld.w	lr,r9[0x8]
800220f8:	91 2e       	st.w	r8[0x8],lr
800220fa:	72 39       	ld.w	r9,r9[0xc]
800220fc:	91 39       	st.w	r8[0xc],r9
800220fe:	f6 c8 ff e0 	sub	r8,r11,-32
80022102:	f4 c9 ff e0 	sub	r9,r10,-32
80022106:	72 0a       	ld.w	r10,r9[0x0]
80022108:	91 0a       	st.w	r8[0x0],r10
8002210a:	72 1a       	ld.w	r10,r9[0x4]
8002210c:	91 1a       	st.w	r8[0x4],r10
8002210e:	72 2a       	ld.w	r10,r9[0x8]
80022110:	91 2a       	st.w	r8[0x8],r10
80022112:	72 39       	ld.w	r9,r9[0xc]
80022114:	91 39       	st.w	r8[0xc],r9
80022116:	f0 16 00 7f 	mcall	r6[508]
8002211a:	2f 4d       	sub	sp,-48
	
		gps->altitude=gpos.altitude;
8002211c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80022120:	ee f8 ff dc 	ld.w	r8,r7[-36]
80022124:	91 49       	st.w	r8[0x10],r9
		gps->latitude=gpos.latitude;
80022126:	ee e8 ff ec 	ld.d	r8,r7[-20]
8002212a:	ee fa ff dc 	ld.w	r10,r7[-36]
8002212e:	f4 e9 00 00 	st.d	r10[0],r8
		gps->longitude=gpos.longitude;
80022132:	ee e8 ff e4 	ld.d	r8,r7[-28]
80022136:	ee fa ff dc 	ld.w	r10,r7[-36]
8002213a:	f4 e9 00 08 	st.d	r10[8],r8
		gps->timeLastMsg=get_millis();
8002213e:	f0 16 00 0f 	mcall	r6[60]
80022142:	18 99       	mov	r9,r12
80022144:	ee f8 ff dc 	ld.w	r8,r7[-36]
80022148:	f1 49 00 44 	st.w	r8[68],r9
		gps->status=GPS_OK;
8002214c:	ee f9 ff dc 	ld.w	r9,r7[-36]
80022150:	30 28       	mov	r8,2
80022152:	f3 68 00 4c 	st.b	r9[76],r8
	

}
80022156:	2f 7d       	sub	sp,-36
80022158:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002215c:	80 02       	ld.sh	r2,r0[0x0]
8002215e:	1f 36       	ld.ub	r6,pc++

80022160 <buffer_full>:


#include "buffer.h"


int8_t buffer_full(Buffer_t * buffer) {
80022160:	eb cd 40 80 	pushm	r7,lr
80022164:	1a 97       	mov	r7,sp
80022166:	20 1d       	sub	sp,4
80022168:	ef 4c ff fc 	st.w	r7[-4],r12
	return (((buffer->BufferHead+1)&BUFFER_MASK) == buffer->BufferTail);
8002216c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022170:	f1 38 01 00 	ld.ub	r8,r8[256]
80022174:	2f f8       	sub	r8,-1
80022176:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8002217a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002217e:	f1 38 01 01 	ld.ub	r8,r8[257]
80022182:	10 39       	cp.w	r9,r8
80022184:	5f 08       	sreq	r8
}
80022186:	10 9c       	mov	r12,r8
80022188:	2f fd       	sub	sp,-4
8002218a:	e3 cd 80 80 	ldm	sp++,r7,pc

8002218e <buffer_put_lossy>:

void buffer_put_lossy(Buffer_t * buffer, uint8_t byte) {
8002218e:	eb cd 40 c0 	pushm	r6-r7,lr
80022192:	1a 97       	mov	r7,sp
80022194:	20 3d       	sub	sp,12
80022196:	4a 46       	lddpc	r6,80022224 <buffer_put_lossy+0x96>
80022198:	1e 26       	rsub	r6,pc
8002219a:	ef 4c ff f8 	st.w	r7[-8],r12
8002219e:	16 98       	mov	r8,r11
800221a0:	ef 68 ff f4 	st.b	r7[-12],r8
	uint8_t tmp;
	tmp=(buffer->BufferHead+1)&BUFFER_MASK;
800221a4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800221a8:	f1 38 01 00 	ld.ub	r8,r8[256]
800221ac:	2f f8       	sub	r8,-1
800221ae:	ef 68 ff ff 	st.b	r7[-1],r8

	if (tmp==buffer->BufferTail) {
800221b2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800221b6:	f1 38 01 01 	ld.ub	r8,r8[257]
800221ba:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800221be:	f0 09 18 00 	cp.b	r9,r8
800221c2:	c0 b1       	brne	800221d8 <buffer_put_lossy+0x4a>
		//error: receive buffer overflow!!
		// lose old incoming data at the end of the buffer
		buffer->BufferTail=(buffer->BufferTail+1)&BUFFER_MASK;
800221c4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800221c8:	f1 38 01 01 	ld.ub	r8,r8[257]
800221cc:	2f f8       	sub	r8,-1
800221ce:	5c 58       	castu.b	r8
800221d0:	ee f9 ff f8 	ld.w	r9,r7[-8]
800221d4:	f3 68 01 01 	st.b	r9[257],r8
	}
	// store incoming data in buffer
	buffer->Buffer[buffer->BufferHead] = byte;
800221d8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800221dc:	f1 38 01 00 	ld.ub	r8,r8[256]
800221e0:	10 99       	mov	r9,r8
800221e2:	ee fa ff f8 	ld.w	r10,r7[-8]
800221e6:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800221ea:	f4 09 0b 08 	st.b	r10[r9],r8
	buffer->BufferHead=tmp;
800221ee:	ee f9 ff f8 	ld.w	r9,r7[-8]
800221f2:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800221f6:	f3 68 01 00 	st.b	r9[256],r8
	if (buffer_full(buffer)) buffer->full =1; else buffer->full=0;
800221fa:	ee fc ff f8 	ld.w	r12,r7[-8]
800221fe:	f0 16 00 f1 	mcall	r6[964]
80022202:	18 98       	mov	r8,r12
80022204:	5c 58       	castu.b	r8
80022206:	c0 70       	breq	80022214 <buffer_put_lossy+0x86>
80022208:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002220c:	30 18       	mov	r8,1
8002220e:	f3 68 01 02 	st.b	r9[258],r8
80022212:	c0 68       	rjmp	8002221e <buffer_put_lossy+0x90>
80022214:	ee f9 ff f8 	ld.w	r9,r7[-8]
80022218:	30 08       	mov	r8,0
8002221a:	f3 68 01 02 	st.b	r9[258],r8
}
8002221e:	2f dd       	sub	sp,-12
80022220:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80022224:	80 02       	ld.sh	r2,r0[0x0]
80022226:	20 1c       	sub	r12,1

80022228 <buffer_put>:

int8_t buffer_put(Buffer_t * buffer, uint8_t byte) {
80022228:	eb cd 40 c0 	pushm	r6-r7,lr
8002222c:	1a 97       	mov	r7,sp
8002222e:	20 3d       	sub	sp,12
80022230:	4a 16       	lddpc	r6,800222b4 <buffer_put+0x8c>
80022232:	1e 26       	rsub	r6,pc
80022234:	ef 4c ff f8 	st.w	r7[-8],r12
80022238:	16 98       	mov	r8,r11
8002223a:	ef 68 ff f4 	st.b	r7[-12],r8
	uint8_t tmp;
	tmp=(buffer->BufferHead+1)&BUFFER_MASK;
8002223e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80022242:	f1 38 01 00 	ld.ub	r8,r8[256]
80022246:	2f f8       	sub	r8,-1
80022248:	ef 68 ff ff 	st.b	r7[-1],r8

	if (tmp==buffer->BufferTail) {
8002224c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80022250:	f1 38 01 01 	ld.ub	r8,r8[257]
80022254:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80022258:	f0 09 18 00 	cp.b	r9,r8
8002225c:	c0 51       	brne	80022266 <buffer_put+0x3e>
		//error: buffer full! return -1
		return -1;
8002225e:	e0 68 00 ff 	mov	r8,255
	}
	// store incoming data in buffer
	buffer->Buffer[buffer->BufferHead] = byte;
	buffer->BufferHead=tmp;
	if (buffer_full(buffer)) buffer->full =1; else buffer->full=0;
}
80022262:	10 9c       	mov	r12,r8
80022264:	c2 48       	rjmp	800222ac <buffer_put+0x84>
	if (tmp==buffer->BufferTail) {
		//error: buffer full! return -1
		return -1;
	}
	// store incoming data in buffer
	buffer->Buffer[buffer->BufferHead] = byte;
80022266:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002226a:	f1 38 01 00 	ld.ub	r8,r8[256]
8002226e:	10 99       	mov	r9,r8
80022270:	ee fa ff f8 	ld.w	r10,r7[-8]
80022274:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80022278:	f4 09 0b 08 	st.b	r10[r9],r8
	buffer->BufferHead=tmp;
8002227c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80022280:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80022284:	f3 68 01 00 	st.b	r9[256],r8
	if (buffer_full(buffer)) buffer->full =1; else buffer->full=0;
80022288:	ee fc ff f8 	ld.w	r12,r7[-8]
8002228c:	f0 16 00 f1 	mcall	r6[964]
80022290:	18 98       	mov	r8,r12
80022292:	5c 58       	castu.b	r8
80022294:	c0 70       	breq	800222a2 <buffer_put+0x7a>
80022296:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002229a:	30 18       	mov	r8,1
8002229c:	f3 68 01 02 	st.b	r9[258],r8
800222a0:	c0 68       	rjmp	800222ac <buffer_put+0x84>
800222a2:	ee f9 ff f8 	ld.w	r9,r7[-8]
800222a6:	30 08       	mov	r8,0
800222a8:	f3 68 01 02 	st.b	r9[258],r8
}
800222ac:	2f dd       	sub	sp,-12
800222ae:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800222b2:	00 00       	add	r0,r0
800222b4:	80 02       	ld.sh	r2,r0[0x0]
800222b6:	20 b6       	sub	r6,11

800222b8 <buffer_get>:


uint8_t buffer_get(Buffer_t * buffer) {
800222b8:	eb cd 40 80 	pushm	r7,lr
800222bc:	1a 97       	mov	r7,sp
800222be:	20 2d       	sub	sp,8
800222c0:	ef 4c ff f8 	st.w	r7[-8],r12
	uint8_t ret=0;
800222c4:	30 08       	mov	r8,0
800222c6:	ef 68 ff ff 	st.b	r7[-1],r8
	if (buffer->BufferHead!=buffer->BufferTail){
800222ca:	ee f8 ff f8 	ld.w	r8,r7[-8]
800222ce:	f1 39 01 00 	ld.ub	r9,r8[256]
800222d2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800222d6:	f1 38 01 01 	ld.ub	r8,r8[257]
800222da:	f0 09 18 00 	cp.b	r9,r8
800222de:	c1 a0       	breq	80022312 <buffer_get+0x5a>
		ret=buffer->Buffer[buffer->BufferTail];
800222e0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800222e4:	f1 38 01 01 	ld.ub	r8,r8[257]
800222e8:	ee f9 ff f8 	ld.w	r9,r7[-8]
800222ec:	f2 08 07 08 	ld.ub	r8,r9[r8]
800222f0:	ef 68 ff ff 	st.b	r7[-1],r8
		buffer->BufferTail=  (buffer->BufferTail+1)&BUFFER_MASK;
800222f4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800222f8:	f1 38 01 01 	ld.ub	r8,r8[257]
800222fc:	2f f8       	sub	r8,-1
800222fe:	5c 58       	castu.b	r8
80022300:	ee f9 ff f8 	ld.w	r9,r7[-8]
80022304:	f3 68 01 01 	st.b	r9[257],r8
		buffer->full=0;
80022308:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002230c:	30 08       	mov	r8,0
8002230e:	f3 68 01 02 	st.b	r9[258],r8
	}
	return ret;
80022312:	ef 38 ff ff 	ld.ub	r8,r7[-1]
}
80022316:	10 9c       	mov	r12,r8
80022318:	2f ed       	sub	sp,-8
8002231a:	e3 cd 80 80 	ldm	sp++,r7,pc

8002231e <buffer_empty>:


int8_t buffer_empty(Buffer_t * buffer) {
8002231e:	eb cd 40 80 	pushm	r7,lr
80022322:	1a 97       	mov	r7,sp
80022324:	20 1d       	sub	sp,4
80022326:	ef 4c ff fc 	st.w	r7[-4],r12
	return (buffer->BufferHead==buffer->BufferTail);
8002232a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002232e:	f1 39 01 00 	ld.ub	r9,r8[256]
80022332:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022336:	f1 38 01 01 	ld.ub	r8,r8[257]
8002233a:	f0 09 18 00 	cp.b	r9,r8
8002233e:	5f 08       	sreq	r8
}
80022340:	10 9c       	mov	r12,r8
80022342:	2f fd       	sub	sp,-4
80022344:	e3 cd 80 80 	ldm	sp++,r7,pc

80022348 <buffer_bytes_available>:

int buffer_bytes_available(Buffer_t * buffer) {
80022348:	eb cd 40 80 	pushm	r7,lr
8002234c:	1a 97       	mov	r7,sp
8002234e:	20 1d       	sub	sp,4
80022350:	ef 4c ff fc 	st.w	r7[-4],r12
	return (BUFFER_SIZE+buffer->BufferHead - buffer->BufferTail)&BUFFER_MASK;
80022354:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022358:	f1 38 01 00 	ld.ub	r8,r8[256]
8002235c:	f0 c9 ff 00 	sub	r9,r8,-256
80022360:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022364:	f1 38 01 01 	ld.ub	r8,r8[257]
80022368:	f2 08 01 08 	sub	r8,r9,r8
8002236c:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
}
80022370:	10 9c       	mov	r12,r8
80022372:	2f fd       	sub	sp,-4
80022374:	e3 cd 80 80 	ldm	sp++,r7,pc

80022378 <buffer_init>:

void buffer_init(Buffer_t * buffer) {
80022378:	eb cd 40 80 	pushm	r7,lr
8002237c:	1a 97       	mov	r7,sp
8002237e:	20 1d       	sub	sp,4
80022380:	ef 4c ff fc 	st.w	r7[-4],r12
	buffer->BufferHead=0;
80022384:	ee f9 ff fc 	ld.w	r9,r7[-4]
80022388:	30 08       	mov	r8,0
8002238a:	f3 68 01 00 	st.b	r9[256],r8
	buffer->BufferTail=0;
8002238e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80022392:	30 08       	mov	r8,0
80022394:	f3 68 01 01 	st.b	r9[257],r8
	buffer->full=0;
80022398:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002239c:	30 08       	mov	r8,0
8002239e:	f3 68 01 02 	st.b	r9[258],r8
}
800223a2:	2f fd       	sub	sp,-4
800223a4:	e3 cd 80 80 	ldm	sp++,r7,pc

800223a8 <buffer_clear>:

void buffer_clear(Buffer_t * buffer) {
800223a8:	eb cd 40 80 	pushm	r7,lr
800223ac:	1a 97       	mov	r7,sp
800223ae:	20 1d       	sub	sp,4
800223b0:	ef 4c ff fc 	st.w	r7[-4],r12
	buffer->BufferHead=0;
800223b4:	ee f9 ff fc 	ld.w	r9,r7[-4]
800223b8:	30 08       	mov	r8,0
800223ba:	f3 68 01 00 	st.b	r9[256],r8
	buffer->BufferTail=0;
800223be:	ee f9 ff fc 	ld.w	r9,r7[-4]
800223c2:	30 08       	mov	r8,0
800223c4:	f3 68 01 01 	st.b	r9[257],r8
	buffer->full=0;
800223c8:	ee f9 ff fc 	ld.w	r9,r7[-4]
800223cc:	30 08       	mov	r8,0
800223ce:	f3 68 01 02 	st.b	r9[258],r8
}
800223d2:	2f fd       	sub	sp,-4
800223d4:	e3 cd 80 80 	ldm	sp++,r7,pc

800223d8 <make_buffered_stream>:

void make_buffered_stream(Buffer_t *buffer, byte_stream_t *stream) {
800223d8:	eb cd 40 c0 	pushm	r6-r7,lr
800223dc:	1a 97       	mov	r7,sp
800223de:	20 2d       	sub	sp,8
800223e0:	49 16       	lddpc	r6,80022424 <make_buffered_stream+0x4c>
800223e2:	1e 26       	rsub	r6,pc
800223e4:	ef 4c ff fc 	st.w	r7[-4],r12
800223e8:	ef 4b ff f8 	st.w	r7[-8],r11
	stream->get=&buffer_get;
800223ec:	ec f9 01 08 	ld.w	r9,r6[264]
800223f0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800223f4:	91 09       	st.w	r8[0x0],r9
	stream->put=&buffer_put;
800223f6:	ec f9 01 3c 	ld.w	r9,r6[316]
800223fa:	ee f8 ff f8 	ld.w	r8,r7[-8]
800223fe:	91 19       	st.w	r8[0x4],r9
	stream->flush=NULL;
80022400:	ee f8 ff f8 	ld.w	r8,r7[-8]
80022404:	30 09       	mov	r9,0
80022406:	91 29       	st.w	r8[0x8],r9
	stream->data=buffer;
80022408:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002240c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80022410:	91 59       	st.w	r8[0x14],r9
	stream->bytes_available=&buffer_bytes_available;
80022412:	ec f9 00 b0 	ld.w	r9,r6[176]
80022416:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002241a:	91 49       	st.w	r8[0x10],r9
}
8002241c:	2f ed       	sub	sp,-8
8002241e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80022422:	00 00       	add	r0,r0
80022424:	80 02       	ld.sh	r2,r0[0x0]
80022426:	22 66       	sub	r6,38

80022428 <make_buffered_stream_lossy>:

void make_buffered_stream_lossy(Buffer_t *buffer, byte_stream_t *stream) {
80022428:	eb cd 40 c0 	pushm	r6-r7,lr
8002242c:	1a 97       	mov	r7,sp
8002242e:	20 2d       	sub	sp,8
80022430:	49 16       	lddpc	r6,80022474 <make_buffered_stream_lossy+0x4c>
80022432:	1e 26       	rsub	r6,pc
80022434:	ef 4c ff fc 	st.w	r7[-4],r12
80022438:	ef 4b ff f8 	st.w	r7[-8],r11
	stream->get=&buffer_get;
8002243c:	ec f9 01 08 	ld.w	r9,r6[264]
80022440:	ee f8 ff f8 	ld.w	r8,r7[-8]
80022444:	91 09       	st.w	r8[0x0],r9
	stream->put=&buffer_put_lossy;
80022446:	ec f9 04 e4 	ld.w	r9,r6[1252]
8002244a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002244e:	91 19       	st.w	r8[0x4],r9
	stream->flush=NULL;
80022450:	ee f8 ff f8 	ld.w	r8,r7[-8]
80022454:	30 09       	mov	r9,0
80022456:	91 29       	st.w	r8[0x8],r9
	stream->data=buffer;
80022458:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002245c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80022460:	91 59       	st.w	r8[0x14],r9
	stream->bytes_available=&buffer_bytes_available;
80022462:	ec f9 00 b0 	ld.w	r9,r6[176]
80022466:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002246a:	91 49       	st.w	r8[0x10],r9
}
8002246c:	2f ed       	sub	sp,-8
8002246e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80022472:	00 00       	add	r0,r0
80022474:	80 02       	ld.sh	r2,r0[0x0]
80022476:	22 b6       	sub	r6,43

80022478 <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
80022478:	eb cd 40 c0 	pushm	r6-r7,lr
8002247c:	1a 97       	mov	r7,sp
8002247e:	20 6d       	sub	sp,24
80022480:	49 e6       	lddpc	r6,800224f8 <interpolate+0x80>
80022482:	1e 26       	rsub	r6,pc
80022484:	ef 4c ff f8 	st.w	r7[-8],r12
80022488:	ef 4b ff f4 	st.w	r7[-12],r11
8002248c:	ef 4a ff f0 	st.w	r7[-16],r10
80022490:	ef 49 ff ec 	st.w	r7[-20],r9
80022494:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
80022498:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002249c:	ee f8 ff f0 	ld.w	r8,r7[-16]
800224a0:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
800224a4:	c0 41       	brne	800224ac <interpolate+0x34>
	{
		return y1;
800224a6:	ee f8 ff ec 	ld.w	r8,r7[-20]
800224aa:	c2 38       	rjmp	800224f0 <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
800224ac:	ee f9 ff e8 	ld.w	r9,r7[-24]
800224b0:	ee f8 ff ec 	ld.w	r8,r7[-20]
800224b4:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
800224b8:	ee fa ff f8 	ld.w	r10,r7[-8]
800224bc:	ee f8 ff f4 	ld.w	r8,r7[-12]
800224c0:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
800224c4:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
800224c8:	ee fa ff f0 	ld.w	r10,r7[-16]
800224cc:	ee f9 ff f4 	ld.w	r9,r7[-12]
800224d0:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
800224d4:	12 9b       	mov	r11,r9
800224d6:	10 9c       	mov	r12,r8
800224d8:	f0 16 00 08 	mcall	r6[32]
800224dc:	18 98       	mov	r8,r12
800224de:	10 99       	mov	r9,r8
800224e0:	ee f8 ff ec 	ld.w	r8,r7[-20]
800224e4:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
800224e8:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
800224ec:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
800224f0:	10 9c       	mov	r12,r8
800224f2:	2f ad       	sub	sp,-24
800224f4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800224f8:	80 02       	ld.sh	r2,r0[0x0]
800224fa:	23 06       	sub	r6,48

800224fc <local_to_global_position>:
#include <math.h>
#include "print_util.h"
#include "conf_platform.h"

// convert local NED coordinates to global GPS coordinates (relative to origin given in local coordinate frame)
global_position_t local_to_global_position(local_coordinates_t input){
800224fc:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
80022500:	1a 97       	mov	r7,sp
80022502:	20 8d       	sub	sp,32
80022504:	4d 96       	lddpc	r6,80022668 <local_to_global_position+0x16c>
80022506:	1e 26       	rsub	r6,pc
80022508:	ee c5 ff e0 	sub	r5,r7,-32
8002250c:	ef 4c ff e0 	st.w	r7[-32],r12
	global_position_t output;
	//output.latitude = input.origin.latitude  + rad_to_deg( input.pos[0] *2.0 / (PI * EARTH_RADIUS));
	//output.longitude= input.origin.longitude + rad_to_deg( input.pos[1] *2.0 / (PI * EARTH_RADIUS*cos(deg_to_rad(output.latitude))));
	output.latitude = input.origin.latitude  + rad_to_deg( input.pos[0] / EARTH_RADIUS);
80022510:	ea e2 00 18 	ld.d	r2,r5[24]
80022514:	6a 08       	ld.w	r8,r5[0x0]
80022516:	10 9c       	mov	r12,r8
80022518:	f0 16 00 02 	mcall	r6[8]
8002251c:	fc 18 40 00 	movh	r8,0x4000
80022520:	e0 69 54 a6 	mov	r9,21670
80022524:	ea 19 41 58 	orh	r9,0x4158
80022528:	f0 16 00 0c 	mcall	r6[48]
8002252c:	14 98       	mov	r8,r10
8002252e:	16 99       	mov	r9,r11
80022530:	10 9a       	mov	r10,r8
80022532:	12 9b       	mov	r11,r9
80022534:	30 08       	mov	r8,0
80022536:	e0 69 80 00 	mov	r9,32768
8002253a:	ea 19 40 66 	orh	r9,0x4066
8002253e:	f0 16 00 03 	mcall	r6[12]
80022542:	14 98       	mov	r8,r10
80022544:	16 99       	mov	r9,r11
80022546:	10 9a       	mov	r10,r8
80022548:	12 9b       	mov	r11,r9
8002254a:	e0 68 2d 18 	mov	r8,11544
8002254e:	ea 18 54 44 	orh	r8,0x5444
80022552:	e0 69 21 fb 	mov	r9,8699
80022556:	ea 19 40 09 	orh	r9,0x4009
8002255a:	f0 16 00 0c 	mcall	r6[48]
8002255e:	14 98       	mov	r8,r10
80022560:	16 99       	mov	r9,r11
80022562:	04 9a       	mov	r10,r2
80022564:	06 9b       	mov	r11,r3
80022566:	f0 16 00 05 	mcall	r6[20]
8002256a:	14 98       	mov	r8,r10
8002256c:	16 99       	mov	r9,r11
8002256e:	ee e9 ff ec 	st.d	r7[-20],r8
	output.longitude= input.origin.longitude + rad_to_deg( input.pos[1] / ( EARTH_RADIUS*cos(deg_to_rad(output.latitude))));
80022572:	ea e2 00 10 	ld.d	r2,r5[16]
80022576:	6a 18       	ld.w	r8,r5[0x4]
80022578:	10 9c       	mov	r12,r8
8002257a:	f0 16 00 02 	mcall	r6[8]
8002257e:	14 90       	mov	r0,r10
80022580:	16 91       	mov	r1,r11
80022582:	ee ea ff ec 	ld.d	r10,r7[-20]
80022586:	e0 68 2d 18 	mov	r8,11544
8002258a:	ea 18 54 44 	orh	r8,0x5444
8002258e:	e0 69 21 fb 	mov	r9,8699
80022592:	ea 19 40 09 	orh	r9,0x4009
80022596:	f0 16 00 03 	mcall	r6[12]
8002259a:	14 98       	mov	r8,r10
8002259c:	16 99       	mov	r9,r11
8002259e:	10 9a       	mov	r10,r8
800225a0:	12 9b       	mov	r11,r9
800225a2:	30 08       	mov	r8,0
800225a4:	e0 69 80 00 	mov	r9,32768
800225a8:	ea 19 40 66 	orh	r9,0x4066
800225ac:	f0 16 00 0c 	mcall	r6[48]
800225b0:	14 98       	mov	r8,r10
800225b2:	16 99       	mov	r9,r11
800225b4:	10 9a       	mov	r10,r8
800225b6:	12 9b       	mov	r11,r9
800225b8:	f0 16 00 b0 	mcall	r6[704]
800225bc:	fc 18 40 00 	movh	r8,0x4000
800225c0:	e0 69 54 a6 	mov	r9,21670
800225c4:	ea 19 41 58 	orh	r9,0x4158
800225c8:	f0 16 00 03 	mcall	r6[12]
800225cc:	14 98       	mov	r8,r10
800225ce:	16 99       	mov	r9,r11
800225d0:	00 9a       	mov	r10,r0
800225d2:	02 9b       	mov	r11,r1
800225d4:	f0 16 00 0c 	mcall	r6[48]
800225d8:	14 98       	mov	r8,r10
800225da:	16 99       	mov	r9,r11
800225dc:	10 9a       	mov	r10,r8
800225de:	12 9b       	mov	r11,r9
800225e0:	30 08       	mov	r8,0
800225e2:	e0 69 80 00 	mov	r9,32768
800225e6:	ea 19 40 66 	orh	r9,0x4066
800225ea:	f0 16 00 03 	mcall	r6[12]
800225ee:	14 98       	mov	r8,r10
800225f0:	16 99       	mov	r9,r11
800225f2:	10 9a       	mov	r10,r8
800225f4:	12 9b       	mov	r11,r9
800225f6:	e0 68 2d 18 	mov	r8,11544
800225fa:	ea 18 54 44 	orh	r8,0x5444
800225fe:	e0 69 21 fb 	mov	r9,8699
80022602:	ea 19 40 09 	orh	r9,0x4009
80022606:	f0 16 00 0c 	mcall	r6[48]
8002260a:	14 98       	mov	r8,r10
8002260c:	16 99       	mov	r9,r11
8002260e:	04 9a       	mov	r10,r2
80022610:	06 9b       	mov	r11,r3
80022612:	f0 16 00 05 	mcall	r6[20]
80022616:	14 98       	mov	r8,r10
80022618:	16 99       	mov	r9,r11
8002261a:	ee e9 ff e4 	st.d	r7[-28],r8
	output.altitude = -input.pos[2] + input.origin.altitude;
8002261e:	6a 89       	ld.w	r9,r5[0x20]
80022620:	6a 28       	ld.w	r8,r5[0x8]
80022622:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80022626:	ef 48 ff f4 	st.w	r7[-12],r8
	output.heading=input.heading;
8002262a:	6a 38       	ld.w	r8,r5[0xc]
8002262c:	ef 48 ff f8 	st.w	r7[-8],r8

	return output;
80022630:	ee fa ff e0 	ld.w	r10,r7[-32]
80022634:	ee cb 00 1c 	sub	r11,r7,28
80022638:	f4 c8 00 00 	sub	r8,r10,0
8002263c:	f6 c9 00 00 	sub	r9,r11,0
80022640:	72 0c       	ld.w	r12,r9[0x0]
80022642:	91 0c       	st.w	r8[0x0],r12
80022644:	72 1c       	ld.w	r12,r9[0x4]
80022646:	91 1c       	st.w	r8[0x4],r12
80022648:	72 2c       	ld.w	r12,r9[0x8]
8002264a:	91 2c       	st.w	r8[0x8],r12
8002264c:	72 39       	ld.w	r9,r9[0xc]
8002264e:	91 39       	st.w	r8[0xc],r9
80022650:	f6 e8 00 10 	ld.d	r8,r11[16]
80022654:	f4 e9 00 10 	st.d	r10[16],r8
80022658:	76 68       	ld.w	r8,r11[0x18]
8002265a:	95 68       	st.w	r10[0x18],r8
}
8002265c:	ee fc ff e0 	ld.w	r12,r7[-32]
80022660:	2f 8d       	sub	sp,-32
80022662:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
80022666:	00 00       	add	r0,r0
80022668:	80 02       	ld.sh	r2,r0[0x0]
8002266a:	23 8a       	sub	r10,56

8002266c <global_to_local_position>:

// convert a global position into a local coordinate frame around the given global origin
local_coordinates_t global_to_local_position(global_position_t position, global_position_t origin) {
8002266c:	eb cd 40 e8 	pushm	r3,r5-r7,lr
80022670:	1a 97       	mov	r7,sp
80022672:	20 ed       	sub	sp,56
80022674:	4f 16       	lddpc	r6,80022838 <global_to_local_position+0x1cc>
80022676:	1e 26       	rsub	r6,pc
80022678:	ee c5 ff ec 	sub	r5,r7,-20
8002267c:	18 93       	mov	r3,r12
	local_coordinates_t output;
	output.origin=origin;
8002267e:	ee ca 00 28 	sub	r10,r7,40
80022682:	ea cb ff e4 	sub	r11,r5,-28
80022686:	f4 c8 00 00 	sub	r8,r10,0
8002268a:	f6 c9 00 00 	sub	r9,r11,0
8002268e:	72 0c       	ld.w	r12,r9[0x0]
80022690:	91 0c       	st.w	r8[0x0],r12
80022692:	72 1c       	ld.w	r12,r9[0x4]
80022694:	91 1c       	st.w	r8[0x4],r12
80022696:	72 2c       	ld.w	r12,r9[0x8]
80022698:	91 2c       	st.w	r8[0x8],r12
8002269a:	72 39       	ld.w	r9,r9[0xc]
8002269c:	91 39       	st.w	r8[0xc],r9
8002269e:	f6 e8 00 10 	ld.d	r8,r11[16]
800226a2:	f4 e9 00 10 	st.d	r10[16],r8
800226a6:	76 68       	ld.w	r8,r11[0x18]
800226a8:	95 68       	st.w	r10[0x18],r8
	double small_radius=cos(deg_to_rad(position.latitude))*EARTH_RADIUS;
800226aa:	ea ea 00 08 	ld.d	r10,r5[8]
800226ae:	e0 68 2d 18 	mov	r8,11544
800226b2:	ea 18 54 44 	orh	r8,0x5444
800226b6:	e0 69 21 fb 	mov	r9,8699
800226ba:	ea 19 40 09 	orh	r9,0x4009
800226be:	f0 16 00 03 	mcall	r6[12]
800226c2:	14 98       	mov	r8,r10
800226c4:	16 99       	mov	r9,r11
800226c6:	10 9a       	mov	r10,r8
800226c8:	12 9b       	mov	r11,r9
800226ca:	30 08       	mov	r8,0
800226cc:	e0 69 80 00 	mov	r9,32768
800226d0:	ea 19 40 66 	orh	r9,0x4066
800226d4:	f0 16 00 0c 	mcall	r6[48]
800226d8:	14 98       	mov	r8,r10
800226da:	16 99       	mov	r9,r11
800226dc:	10 9a       	mov	r10,r8
800226de:	12 9b       	mov	r11,r9
800226e0:	f0 16 00 b0 	mcall	r6[704]
800226e4:	fc 18 40 00 	movh	r8,0x4000
800226e8:	e0 69 54 a6 	mov	r9,21670
800226ec:	ea 19 41 58 	orh	r9,0x4158
800226f0:	f0 16 00 03 	mcall	r6[12]
800226f4:	14 98       	mov	r8,r10
800226f6:	16 99       	mov	r9,r11
800226f8:	ee e9 ff f8 	st.d	r7[-8],r8
	output.pos[X]=  (float)(sin(deg_to_rad((position.latitude-origin.latitude)))*EARTH_RADIUS);
800226fc:	ea ea 00 08 	ld.d	r10,r5[8]
80022700:	ea e8 00 24 	ld.d	r8,r5[36]
80022704:	f0 16 00 11 	mcall	r6[68]
80022708:	14 98       	mov	r8,r10
8002270a:	16 99       	mov	r9,r11
8002270c:	10 9a       	mov	r10,r8
8002270e:	12 9b       	mov	r11,r9
80022710:	e0 68 2d 18 	mov	r8,11544
80022714:	ea 18 54 44 	orh	r8,0x5444
80022718:	e0 69 21 fb 	mov	r9,8699
8002271c:	ea 19 40 09 	orh	r9,0x4009
80022720:	f0 16 00 03 	mcall	r6[12]
80022724:	14 98       	mov	r8,r10
80022726:	16 99       	mov	r9,r11
80022728:	10 9a       	mov	r10,r8
8002272a:	12 9b       	mov	r11,r9
8002272c:	30 08       	mov	r8,0
8002272e:	e0 69 80 00 	mov	r9,32768
80022732:	ea 19 40 66 	orh	r9,0x4066
80022736:	f0 16 00 0c 	mcall	r6[48]
8002273a:	14 98       	mov	r8,r10
8002273c:	16 99       	mov	r9,r11
8002273e:	10 9a       	mov	r10,r8
80022740:	12 9b       	mov	r11,r9
80022742:	f0 16 00 ad 	mcall	r6[692]
80022746:	fc 18 40 00 	movh	r8,0x4000
8002274a:	e0 69 54 a6 	mov	r9,21670
8002274e:	ea 19 41 58 	orh	r9,0x4158
80022752:	f0 16 00 03 	mcall	r6[12]
80022756:	14 98       	mov	r8,r10
80022758:	16 99       	mov	r9,r11
8002275a:	10 9a       	mov	r10,r8
8002275c:	12 9b       	mov	r11,r9
8002275e:	f0 16 00 09 	mcall	r6[36]
80022762:	18 98       	mov	r8,r12
80022764:	ef 48 ff c8 	st.w	r7[-56],r8
	output.pos[Y]=  (float)(sin(deg_to_rad((position.longitude-origin.longitude)))*small_radius);
80022768:	ea ea 00 00 	ld.d	r10,r5[0]
8002276c:	ea e8 00 1c 	ld.d	r8,r5[28]
80022770:	f0 16 00 11 	mcall	r6[68]
80022774:	14 98       	mov	r8,r10
80022776:	16 99       	mov	r9,r11
80022778:	10 9a       	mov	r10,r8
8002277a:	12 9b       	mov	r11,r9
8002277c:	e0 68 2d 18 	mov	r8,11544
80022780:	ea 18 54 44 	orh	r8,0x5444
80022784:	e0 69 21 fb 	mov	r9,8699
80022788:	ea 19 40 09 	orh	r9,0x4009
8002278c:	f0 16 00 03 	mcall	r6[12]
80022790:	14 98       	mov	r8,r10
80022792:	16 99       	mov	r9,r11
80022794:	10 9a       	mov	r10,r8
80022796:	12 9b       	mov	r11,r9
80022798:	30 08       	mov	r8,0
8002279a:	e0 69 80 00 	mov	r9,32768
8002279e:	ea 19 40 66 	orh	r9,0x4066
800227a2:	f0 16 00 0c 	mcall	r6[48]
800227a6:	14 98       	mov	r8,r10
800227a8:	16 99       	mov	r9,r11
800227aa:	10 9a       	mov	r10,r8
800227ac:	12 9b       	mov	r11,r9
800227ae:	f0 16 00 ad 	mcall	r6[692]
800227b2:	ee e8 ff f8 	ld.d	r8,r7[-8]
800227b6:	f0 16 00 03 	mcall	r6[12]
800227ba:	14 98       	mov	r8,r10
800227bc:	16 99       	mov	r9,r11
800227be:	10 9a       	mov	r10,r8
800227c0:	12 9b       	mov	r11,r9
800227c2:	f0 16 00 09 	mcall	r6[36]
800227c6:	18 98       	mov	r8,r12
800227c8:	ef 48 ff cc 	st.w	r7[-52],r8
	output.pos[Z]=  (float)(-(position.altitude - origin.altitude));
800227cc:	6a 49       	ld.w	r9,r5[0x10]
800227ce:	6a b8       	ld.w	r8,r5[0x2c]
800227d0:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
800227d4:	ee 18 80 00 	eorh	r8,0x8000
800227d8:	ef 48 ff d0 	st.w	r7[-48],r8
	output.heading=position.heading;
800227dc:	6a 58       	ld.w	r8,r5[0x14]
800227de:	ef 48 ff d4 	st.w	r7[-44],r8
	//dbg_print_num(deg_to_rad((position.longitude-origin.longitude))*10000000,10);
	//dbg_print(", sin_long:");
	//dbg_print_num(sin(deg_to_rad((position.longitude-origin.longitude)))*small_radius*10000000,10);
	//dbg_print("\n");
	
	return output;
800227e2:	06 9b       	mov	r11,r3
800227e4:	ee ca 00 38 	sub	r10,r7,56
800227e8:	f6 c8 00 00 	sub	r8,r11,0
800227ec:	f4 c9 00 00 	sub	r9,r10,0
800227f0:	72 0c       	ld.w	r12,r9[0x0]
800227f2:	91 0c       	st.w	r8[0x0],r12
800227f4:	72 1c       	ld.w	r12,r9[0x4]
800227f6:	91 1c       	st.w	r8[0x4],r12
800227f8:	72 2c       	ld.w	r12,r9[0x8]
800227fa:	91 2c       	st.w	r8[0x8],r12
800227fc:	72 39       	ld.w	r9,r9[0xc]
800227fe:	91 39       	st.w	r8[0xc],r9
80022800:	f6 c8 ff f0 	sub	r8,r11,-16
80022804:	f4 c9 ff f0 	sub	r9,r10,-16
80022808:	72 0c       	ld.w	r12,r9[0x0]
8002280a:	91 0c       	st.w	r8[0x0],r12
8002280c:	72 1c       	ld.w	r12,r9[0x4]
8002280e:	91 1c       	st.w	r8[0x4],r12
80022810:	72 2c       	ld.w	r12,r9[0x8]
80022812:	91 2c       	st.w	r8[0x8],r12
80022814:	72 39       	ld.w	r9,r9[0xc]
80022816:	91 39       	st.w	r8[0xc],r9
80022818:	f6 c8 ff e0 	sub	r8,r11,-32
8002281c:	f4 c9 ff e0 	sub	r9,r10,-32
80022820:	72 0a       	ld.w	r10,r9[0x0]
80022822:	91 0a       	st.w	r8[0x0],r10
80022824:	72 1a       	ld.w	r10,r9[0x4]
80022826:	91 1a       	st.w	r8[0x4],r10
80022828:	72 2a       	ld.w	r10,r9[0x8]
8002282a:	91 2a       	st.w	r8[0x8],r10
8002282c:	72 39       	ld.w	r9,r9[0xc]
8002282e:	91 39       	st.w	r8[0xc],r9
}
80022830:	06 9c       	mov	r12,r3
80022832:	2f 2d       	sub	sp,-56
80022834:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
80022838:	80 02       	ld.sh	r2,r0[0x0]
8002283a:	24 fa       	sub	r10,79

8002283c <Quat_to_Aero>:

Aero_Attitude_t Quat_to_Aero(UQuat_t qe) {
8002283c:	eb cd 40 ee 	pushm	r1-r3,r5-r7,lr
80022840:	1a 97       	mov	r7,sp
80022842:	20 3d       	sub	sp,12
80022844:	4d 06       	lddpc	r6,80022984 <Quat_to_Aero+0x148>
80022846:	1e 26       	rsub	r6,pc
80022848:	ee c5 ff e4 	sub	r5,r7,-28
8002284c:	18 91       	mov	r1,r12
	Aero_Attitude_t aero;

	aero.rpy[0]= atan2(2*(qe.s*qe.v[0] + qe.v[1]*qe.v[2]) , (qe.s*qe.s - qe.v[0]*qe.v[0] - qe.v[1]*qe.v[1] + qe.v[2]*qe.v[2])); 
8002284e:	6a 09       	ld.w	r9,r5[0x0]
80022850:	6a 08       	ld.w	r8,r5[0x0]
80022852:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80022856:	6a 1a       	ld.w	r10,r5[0x4]
80022858:	6a 18       	ld.w	r8,r5[0x4]
8002285a:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8002285e:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80022862:	6a 2a       	ld.w	r10,r5[0x8]
80022864:	6a 28       	ld.w	r8,r5[0x8]
80022866:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8002286a:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8002286e:	6a 3a       	ld.w	r10,r5[0xc]
80022870:	6a 38       	ld.w	r8,r5[0xc]
80022872:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80022876:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8002287a:	10 9c       	mov	r12,r8
8002287c:	f0 16 00 02 	mcall	r6[8]
80022880:	14 92       	mov	r2,r10
80022882:	16 93       	mov	r3,r11
80022884:	6a 09       	ld.w	r9,r5[0x0]
80022886:	6a 18       	ld.w	r8,r5[0x4]
80022888:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8002288c:	6a 2a       	ld.w	r10,r5[0x8]
8002288e:	6a 38       	ld.w	r8,r5[0xc]
80022890:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80022894:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80022898:	e5 a0 08 88 	cop	cp0,cr8,cr8,cr8,0x40
8002289c:	10 9c       	mov	r12,r8
8002289e:	f0 16 00 02 	mcall	r6[8]
800228a2:	04 98       	mov	r8,r2
800228a4:	06 99       	mov	r9,r3
800228a6:	f0 16 00 4e 	mcall	r6[312]
800228aa:	14 98       	mov	r8,r10
800228ac:	16 99       	mov	r9,r11
800228ae:	10 9a       	mov	r10,r8
800228b0:	12 9b       	mov	r11,r9
800228b2:	f0 16 00 09 	mcall	r6[36]
800228b6:	18 98       	mov	r8,r12
800228b8:	ef 48 ff f4 	st.w	r7[-12],r8
	aero.rpy[1]=-asin(2*(qe.v[0]*qe.v[2] - qe.s*qe.v[1]));
800228bc:	6a 19       	ld.w	r9,r5[0x4]
800228be:	6a 38       	ld.w	r8,r5[0xc]
800228c0:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
800228c4:	6a 0a       	ld.w	r10,r5[0x0]
800228c6:	6a 28       	ld.w	r8,r5[0x8]
800228c8:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
800228cc:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
800228d0:	fc 18 c0 00 	movh	r8,0xc000
800228d4:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
800228d8:	10 9c       	mov	r12,r8
800228da:	f0 16 00 02 	mcall	r6[8]
800228de:	14 98       	mov	r8,r10
800228e0:	16 99       	mov	r9,r11
800228e2:	10 9a       	mov	r10,r8
800228e4:	12 9b       	mov	r11,r9
800228e6:	f0 16 01 74 	mcall	r6[1488]
800228ea:	14 98       	mov	r8,r10
800228ec:	16 99       	mov	r9,r11
800228ee:	10 9a       	mov	r10,r8
800228f0:	12 9b       	mov	r11,r9
800228f2:	f0 16 00 09 	mcall	r6[36]
800228f6:	18 98       	mov	r8,r12
800228f8:	ef 48 ff f8 	st.w	r7[-8],r8
	aero.rpy[2]= atan2(2*(qe.s*qe.v[2] + qe.v[0]*qe.v[1]) , (qe.s*qe.s + qe.v[0]*qe.v[0] - qe.v[1]*qe.v[1] - qe.v[2]*qe.v[2]));
800228fc:	6a 09       	ld.w	r9,r5[0x0]
800228fe:	6a 08       	ld.w	r8,r5[0x0]
80022900:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80022904:	6a 1a       	ld.w	r10,r5[0x4]
80022906:	6a 18       	ld.w	r8,r5[0x4]
80022908:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8002290c:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80022910:	6a 2a       	ld.w	r10,r5[0x8]
80022912:	6a 28       	ld.w	r8,r5[0x8]
80022914:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80022918:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8002291c:	6a 3a       	ld.w	r10,r5[0xc]
8002291e:	6a 38       	ld.w	r8,r5[0xc]
80022920:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80022924:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80022928:	10 9c       	mov	r12,r8
8002292a:	f0 16 00 02 	mcall	r6[8]
8002292e:	14 92       	mov	r2,r10
80022930:	16 93       	mov	r3,r11
80022932:	6a 09       	ld.w	r9,r5[0x0]
80022934:	6a 38       	ld.w	r8,r5[0xc]
80022936:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8002293a:	6a 1a       	ld.w	r10,r5[0x4]
8002293c:	6a 28       	ld.w	r8,r5[0x8]
8002293e:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80022942:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80022946:	e5 a0 08 88 	cop	cp0,cr8,cr8,cr8,0x40
8002294a:	10 9c       	mov	r12,r8
8002294c:	f0 16 00 02 	mcall	r6[8]
80022950:	04 98       	mov	r8,r2
80022952:	06 99       	mov	r9,r3
80022954:	f0 16 00 4e 	mcall	r6[312]
80022958:	14 98       	mov	r8,r10
8002295a:	16 99       	mov	r9,r11
8002295c:	10 9a       	mov	r10,r8
8002295e:	12 9b       	mov	r11,r9
80022960:	f0 16 00 09 	mcall	r6[36]
80022964:	18 98       	mov	r8,r12
80022966:	ef 48 ff fc 	st.w	r7[-4],r8
	
	return aero;
8002296a:	02 9a       	mov	r10,r1
8002296c:	ee cb 00 0c 	sub	r11,r7,12
80022970:	f6 e8 00 00 	ld.d	r8,r11[0]
80022974:	f4 e9 00 00 	st.d	r10[0],r8
80022978:	76 28       	ld.w	r8,r11[0x8]
8002297a:	95 28       	st.w	r10[0x8],r8
}
8002297c:	02 9c       	mov	r12,r1
8002297e:	2f dd       	sub	sp,-12
80022980:	e3 cd 80 ee 	ldm	sp++,r1-r3,r5-r7,pc
80022984:	80 02       	ld.sh	r2,r0[0x0]
80022986:	26 ca       	sub	r10,108

80022988 <get_yaw>:

float get_yaw(UQuat_t qe) {
80022988:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
8002298c:	1a 97       	mov	r7,sp
8002298e:	49 f6       	lddpc	r6,80022a08 <get_yaw+0x80>
80022990:	1e 26       	rsub	r6,pc
80022992:	ee c5 ff e8 	sub	r5,r7,-24
	return  atan2(2*(qe.s*qe.v[2] + qe.v[0]*qe.v[1]) , (qe.s*qe.s + qe.v[0]*qe.v[0] - qe.v[1]*qe.v[1] - qe.v[2]*qe.v[2]));
80022996:	6a 09       	ld.w	r9,r5[0x0]
80022998:	6a 08       	ld.w	r8,r5[0x0]
8002299a:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8002299e:	6a 1a       	ld.w	r10,r5[0x4]
800229a0:	6a 18       	ld.w	r8,r5[0x4]
800229a2:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
800229a6:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
800229aa:	6a 2a       	ld.w	r10,r5[0x8]
800229ac:	6a 28       	ld.w	r8,r5[0x8]
800229ae:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
800229b2:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
800229b6:	6a 3a       	ld.w	r10,r5[0xc]
800229b8:	6a 38       	ld.w	r8,r5[0xc]
800229ba:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
800229be:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
800229c2:	10 9c       	mov	r12,r8
800229c4:	f0 16 00 02 	mcall	r6[8]
800229c8:	14 92       	mov	r2,r10
800229ca:	16 93       	mov	r3,r11
800229cc:	6a 09       	ld.w	r9,r5[0x0]
800229ce:	6a 38       	ld.w	r8,r5[0xc]
800229d0:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
800229d4:	6a 1a       	ld.w	r10,r5[0x4]
800229d6:	6a 28       	ld.w	r8,r5[0x8]
800229d8:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
800229dc:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
800229e0:	e5 a0 08 88 	cop	cp0,cr8,cr8,cr8,0x40
800229e4:	10 9c       	mov	r12,r8
800229e6:	f0 16 00 02 	mcall	r6[8]
800229ea:	04 98       	mov	r8,r2
800229ec:	06 99       	mov	r9,r3
800229ee:	f0 16 00 4e 	mcall	r6[312]
800229f2:	14 98       	mov	r8,r10
800229f4:	16 99       	mov	r9,r11
800229f6:	10 9a       	mov	r10,r8
800229f8:	12 9b       	mov	r11,r9
800229fa:	f0 16 00 09 	mcall	r6[36]
800229fe:	18 98       	mov	r8,r12
}
80022a00:	10 9c       	mov	r12,r8
80022a02:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
80022a06:	00 00       	add	r0,r0
80022a08:	80 02       	ld.sh	r2,r0[0x0]
80022a0a:	28 14       	sub	r4,-127

80022a0c <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
80022a0c:	eb cd 40 c0 	pushm	r6-r7,lr
80022a10:	1a 97       	mov	r7,sp
80022a12:	20 6d       	sub	sp,24
80022a14:	49 e6       	lddpc	r6,80022a8c <interpolate+0x80>
80022a16:	1e 26       	rsub	r6,pc
80022a18:	ef 4c ff f8 	st.w	r7[-8],r12
80022a1c:	ef 4b ff f4 	st.w	r7[-12],r11
80022a20:	ef 4a ff f0 	st.w	r7[-16],r10
80022a24:	ef 49 ff ec 	st.w	r7[-20],r9
80022a28:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
80022a2c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80022a30:	ee f8 ff f0 	ld.w	r8,r7[-16]
80022a34:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
80022a38:	c0 41       	brne	80022a40 <interpolate+0x34>
	{
		return y1;
80022a3a:	ee f8 ff ec 	ld.w	r8,r7[-20]
80022a3e:	c2 38       	rjmp	80022a84 <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
80022a40:	ee f9 ff e8 	ld.w	r9,r7[-24]
80022a44:	ee f8 ff ec 	ld.w	r8,r7[-20]
80022a48:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80022a4c:	ee fa ff f8 	ld.w	r10,r7[-8]
80022a50:	ee f8 ff f4 	ld.w	r8,r7[-12]
80022a54:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80022a58:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80022a5c:	ee fa ff f0 	ld.w	r10,r7[-16]
80022a60:	ee f9 ff f4 	ld.w	r9,r7[-12]
80022a64:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80022a68:	12 9b       	mov	r11,r9
80022a6a:	10 9c       	mov	r12,r8
80022a6c:	f0 16 00 08 	mcall	r6[32]
80022a70:	18 98       	mov	r8,r12
80022a72:	10 99       	mov	r9,r8
80022a74:	ee f8 ff ec 	ld.w	r8,r7[-20]
80022a78:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80022a7c:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
80022a80:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
80022a84:	10 9c       	mov	r12,r8
80022a86:	2f ad       	sub	sp,-24
80022a88:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80022a8c:	80 02       	ld.sh	r2,r0[0x0]
80022a8e:	28 9a       	sub	r10,-119

80022a90 <dbg_print_init>:

/**
 * \brief some utilities for printing strings and numbers 
 */
void dbg_print_init(byte_stream_t* debug_stream)
{
80022a90:	eb cd 40 c0 	pushm	r6-r7,lr
80022a94:	1a 97       	mov	r7,sp
80022a96:	20 1d       	sub	sp,4
80022a98:	48 66       	lddpc	r6,80022ab0 <dbg_print_init+0x20>
80022a9a:	1e 26       	rsub	r6,pc
80022a9c:	ef 4c ff fc 	st.w	r7[-4],r12
	deb_stream=debug_stream;
80022aa0:	ec f8 01 8c 	ld.w	r8,r6[396]
80022aa4:	ee f9 ff fc 	ld.w	r9,r7[-4]
80022aa8:	91 09       	st.w	r8[0x0],r9
}
80022aaa:	2f fd       	sub	sp,-4
80022aac:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80022ab0:	80 02       	ld.sh	r2,r0[0x0]
80022ab2:	29 1e       	sub	lr,-111

80022ab4 <putstring>:

void putstring(byte_stream_t *out_stream, const char* s) {
80022ab4:	eb cd 40 80 	pushm	r7,lr
80022ab8:	1a 97       	mov	r7,sp
80022aba:	20 2d       	sub	sp,8
80022abc:	ef 4c ff fc 	st.w	r7[-4],r12
80022ac0:	ef 4b ff f8 	st.w	r7[-8],r11
	if ((out_stream==NULL) || (out_stream->put==NULL)) return;
80022ac4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022ac8:	58 08       	cp.w	r8,0
80022aca:	c2 10       	breq	80022b0c <putstring+0x58>
80022acc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022ad0:	70 18       	ld.w	r8,r8[0x4]
80022ad2:	58 08       	cp.w	r8,0
80022ad4:	c1 51       	brne	80022afe <putstring+0x4a>
80022ad6:	c1 c8       	rjmp	80022b0e <putstring+0x5a>
	while (*s != 0) {
		out_stream->put(out_stream->data, *s);
80022ad8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022adc:	70 18       	ld.w	r8,r8[0x4]
80022ade:	ee f9 ff f8 	ld.w	r9,r7[-8]
80022ae2:	13 89       	ld.ub	r9,r9[0x0]
80022ae4:	12 9a       	mov	r10,r9
80022ae6:	ee f9 ff fc 	ld.w	r9,r7[-4]
80022aea:	72 59       	ld.w	r9,r9[0x14]
80022aec:	14 9b       	mov	r11,r10
80022aee:	12 9c       	mov	r12,r9
80022af0:	5d 18       	icall	r8
		s++;
80022af2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80022af6:	2f f8       	sub	r8,-1
80022af8:	ef 48 ff f8 	st.w	r7[-8],r8
80022afc:	c0 28       	rjmp	80022b00 <putstring+0x4c>
	deb_stream=debug_stream;
}

void putstring(byte_stream_t *out_stream, const char* s) {
	if ((out_stream==NULL) || (out_stream->put==NULL)) return;
	while (*s != 0) {
80022afe:	d7 03       	nop
80022b00:	ee f8 ff f8 	ld.w	r8,r7[-8]
80022b04:	11 88       	ld.ub	r8,r8[0x0]
80022b06:	58 08       	cp.w	r8,0
80022b08:	ce 81       	brne	80022ad8 <putstring+0x24>
80022b0a:	c0 28       	rjmp	80022b0e <putstring+0x5a>
{
	deb_stream=debug_stream;
}

void putstring(byte_stream_t *out_stream, const char* s) {
	if ((out_stream==NULL) || (out_stream->put==NULL)) return;
80022b0c:	d7 03       	nop
	while (*s != 0) {
		out_stream->put(out_stream->data, *s);
		s++;
	}
}
80022b0e:	2f ed       	sub	sp,-8
80022b10:	e3 cd 80 80 	ldm	sp++,r7,pc

80022b14 <putdigit>:

static const char alphabet[36] = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";

void putdigit(byte_stream_t *out_stream, unsigned c){
80022b14:	eb cd 40 c0 	pushm	r6-r7,lr
80022b18:	1a 97       	mov	r7,sp
80022b1a:	20 2d       	sub	sp,8
80022b1c:	49 76       	lddpc	r6,80022b78 <putdigit+0x64>
80022b1e:	1e 26       	rsub	r6,pc
80022b20:	ef 4c ff fc 	st.w	r7[-4],r12
80022b24:	ef 4b ff f8 	st.w	r7[-8],r11
if ((out_stream==NULL) || (out_stream->put==NULL)) return;
80022b28:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022b2c:	58 08       	cp.w	r8,0
80022b2e:	c1 d0       	breq	80022b68 <putdigit+0x54>
80022b30:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022b34:	70 18       	ld.w	r8,r8[0x4]
80022b36:	58 08       	cp.w	r8,0
80022b38:	c1 a0       	breq	80022b6c <putdigit+0x58>
	
if (c > 35)
80022b3a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80022b3e:	e0 48 00 23 	cp.w	r8,35
80022b42:	e0 8b 00 17 	brhi	80022b70 <putdigit+0x5c>
    return;
  out_stream->put(out_stream->data,  alphabet[c]);
80022b46:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022b4a:	70 18       	ld.w	r8,r8[0x4]
80022b4c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80022b50:	ec fa 08 84 	ld.w	r10,r6[2180]
80022b54:	f4 09 07 09 	ld.ub	r9,r10[r9]
80022b58:	12 9a       	mov	r10,r9
80022b5a:	ee f9 ff fc 	ld.w	r9,r7[-4]
80022b5e:	72 59       	ld.w	r9,r9[0x14]
80022b60:	14 9b       	mov	r11,r10
80022b62:	12 9c       	mov	r12,r9
80022b64:	5d 18       	icall	r8
80022b66:	c0 68       	rjmp	80022b72 <putdigit+0x5e>
}

static const char alphabet[36] = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";

void putdigit(byte_stream_t *out_stream, unsigned c){
if ((out_stream==NULL) || (out_stream->put==NULL)) return;
80022b68:	d7 03       	nop
80022b6a:	c0 48       	rjmp	80022b72 <putdigit+0x5e>
80022b6c:	d7 03       	nop
80022b6e:	c0 28       	rjmp	80022b72 <putdigit+0x5e>
	
if (c > 35)
    return;
80022b70:	d7 03       	nop
  out_stream->put(out_stream->data,  alphabet[c]);
}
80022b72:	2f ed       	sub	sp,-8
80022b74:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80022b78:	80 02       	ld.sh	r2,r0[0x0]
80022b7a:	29 a2       	sub	r2,-102

80022b7c <putnum>:


/*
  Outputs numbers with less than 10 digits
*/
void putnum(byte_stream_t *out_stream, long c, char base){
80022b7c:	eb cd 40 c0 	pushm	r6-r7,lr
80022b80:	1a 97       	mov	r7,sp
80022b82:	20 7d       	sub	sp,28
80022b84:	4b 96       	lddpc	r6,80022c68 <putnum+0xec>
80022b86:	1e 26       	rsub	r6,pc
80022b88:	ef 4c ff ec 	st.w	r7[-20],r12
80022b8c:	ef 4b ff e8 	st.w	r7[-24],r11
80022b90:	14 98       	mov	r8,r10
80022b92:	ef 68 ff e4 	st.b	r7[-28],r8
  char storage[MAX_DIGITS];
  long i = MAX_DIGITS;
80022b96:	30 a8       	mov	r8,10
80022b98:	ef 48 ff fc 	st.w	r7[-4],r8
  if ((out_stream==NULL) || (out_stream->put==NULL)) return;
80022b9c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80022ba0:	58 08       	cp.w	r8,0
80022ba2:	c5 d0       	breq	80022c5c <putnum+0xe0>
80022ba4:	ee f8 ff ec 	ld.w	r8,r7[-20]
80022ba8:	70 18       	ld.w	r8,r8[0x4]
80022baa:	58 08       	cp.w	r8,0
80022bac:	c5 a0       	breq	80022c60 <putnum+0xe4>
  /* Take Care of the sign */
  if(c < 0){
80022bae:	ee f8 ff e8 	ld.w	r8,r7[-24]
80022bb2:	58 08       	cp.w	r8,0
80022bb4:	c1 04       	brge	80022bd4 <putnum+0x58>
    out_stream->put(out_stream->data,   '-');
80022bb6:	ee f8 ff ec 	ld.w	r8,r7[-20]
80022bba:	70 18       	ld.w	r8,r8[0x4]
80022bbc:	ee f9 ff ec 	ld.w	r9,r7[-20]
80022bc0:	72 59       	ld.w	r9,r9[0x14]
80022bc2:	32 db       	mov	r11,45
80022bc4:	12 9c       	mov	r12,r9
80022bc6:	5d 18       	icall	r8
    c = c*-1;
80022bc8:	ee f8 ff e8 	ld.w	r8,r7[-24]
80022bcc:	5c 38       	neg	r8
80022bce:	ef 48 ff e8 	st.w	r7[-24],r8
80022bd2:	c0 a8       	rjmp	80022be6 <putnum+0x6a>
  } else {
	  out_stream->put(out_stream->data,  ' ');
80022bd4:	ee f8 ff ec 	ld.w	r8,r7[-20]
80022bd8:	70 18       	ld.w	r8,r8[0x4]
80022bda:	ee f9 ff ec 	ld.w	r9,r7[-20]
80022bde:	72 59       	ld.w	r9,r9[0x14]
80022be0:	32 0b       	mov	r11,32
80022be2:	12 9c       	mov	r12,r9
80022be4:	5d 18       	icall	r8
    
  }

  do{
    i--;
80022be6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022bea:	20 18       	sub	r8,1
80022bec:	ef 48 ff fc 	st.w	r7[-4],r8
    storage[i] = c % base;
80022bf0:	ee fa ff fc 	ld.w	r10,r7[-4]
80022bf4:	ef 39 ff e4 	ld.ub	r9,r7[-28]
80022bf8:	ee f8 ff e8 	ld.w	r8,r7[-24]
80022bfc:	f0 09 0c 08 	divs	r8,r8,r9
80022c00:	12 98       	mov	r8,r9
80022c02:	5c 58       	castu.b	r8
80022c04:	ee 0a 00 09 	add	r9,r7,r10
80022c08:	f3 68 ff f0 	st.b	r9[-16],r8
    c = c / base;
80022c0c:	ef 39 ff e4 	ld.ub	r9,r7[-28]
80022c10:	ee f8 ff e8 	ld.w	r8,r7[-24]
80022c14:	f0 09 0c 08 	divs	r8,r8,r9
80022c18:	ef 48 ff e8 	st.w	r7[-24],r8
  }while((i >= 0) 
  && (c > 0)
  );
80022c1c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022c20:	58 08       	cp.w	r8,0
80022c22:	c1 75       	brlt	80022c50 <putnum+0xd4>
80022c24:	ee f8 ff e8 	ld.w	r8,r7[-24]
80022c28:	58 08       	cp.w	r8,0
80022c2a:	fe 99 ff de 	brgt	80022be6 <putnum+0x6a>
  /* i is the index of the last digit calculated */

  /* Hence, there is no need to initialize i */
  for( ; i<MAX_DIGITS; i++){
80022c2e:	c1 18       	rjmp	80022c50 <putnum+0xd4>
     putdigit(out_stream, storage[i]);
80022c30:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022c34:	ee 08 00 08 	add	r8,r7,r8
80022c38:	f1 38 ff f0 	ld.ub	r8,r8[-16]
80022c3c:	10 9b       	mov	r11,r8
80022c3e:	ee fc ff ec 	ld.w	r12,r7[-20]
80022c42:	f0 16 00 a7 	mcall	r6[668]
  && (c > 0)
  );
  /* i is the index of the last digit calculated */

  /* Hence, there is no need to initialize i */
  for( ; i<MAX_DIGITS; i++){
80022c46:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022c4a:	2f f8       	sub	r8,-1
80022c4c:	ef 48 ff fc 	st.w	r7[-4],r8
80022c50:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022c54:	58 98       	cp.w	r8,9
80022c56:	fe 9a ff ed 	brle	80022c30 <putnum+0xb4>
80022c5a:	c0 48       	rjmp	80022c62 <putnum+0xe6>
  Outputs numbers with less than 10 digits
*/
void putnum(byte_stream_t *out_stream, long c, char base){
  char storage[MAX_DIGITS];
  long i = MAX_DIGITS;
  if ((out_stream==NULL) || (out_stream->put==NULL)) return;
80022c5c:	d7 03       	nop
80022c5e:	c0 28       	rjmp	80022c62 <putnum+0xe6>
80022c60:	d7 03       	nop
  /* Hence, there is no need to initialize i */
  for( ; i<MAX_DIGITS; i++){
     putdigit(out_stream, storage[i]);
  }

}
80022c62:	2f 9d       	sub	sp,-28
80022c64:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80022c68:	80 02       	ld.sh	r2,r0[0x0]
80022c6a:	2a 0a       	sub	r10,-96

80022c6c <putnum_tight>:

void putnum_tight(byte_stream_t *out_stream, long c, char base){
80022c6c:	eb cd 40 c0 	pushm	r6-r7,lr
80022c70:	1a 97       	mov	r7,sp
80022c72:	20 7d       	sub	sp,28
80022c74:	4b 46       	lddpc	r6,80022d44 <putnum_tight+0xd8>
80022c76:	1e 26       	rsub	r6,pc
80022c78:	ef 4c ff ec 	st.w	r7[-20],r12
80022c7c:	ef 4b ff e8 	st.w	r7[-24],r11
80022c80:	14 98       	mov	r8,r10
80022c82:	ef 68 ff e4 	st.b	r7[-28],r8
  char storage[MAX_DIGITS];
  long i = MAX_DIGITS;
80022c86:	30 a8       	mov	r8,10
80022c88:	ef 48 ff fc 	st.w	r7[-4],r8
  if ((out_stream==NULL) || (out_stream->put==NULL)) return;
80022c8c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80022c90:	58 08       	cp.w	r8,0
80022c92:	c5 30       	breq	80022d38 <putnum_tight+0xcc>
80022c94:	ee f8 ff ec 	ld.w	r8,r7[-20]
80022c98:	70 18       	ld.w	r8,r8[0x4]
80022c9a:	58 08       	cp.w	r8,0
80022c9c:	c5 00       	breq	80022d3c <putnum_tight+0xd0>
  /* Take Care of the sign */
  if(c < 0){
80022c9e:	ee f8 ff e8 	ld.w	r8,r7[-24]
80022ca2:	58 08       	cp.w	r8,0
80022ca4:	c0 f4       	brge	80022cc2 <putnum_tight+0x56>
    out_stream->put(out_stream->data,   '-');
80022ca6:	ee f8 ff ec 	ld.w	r8,r7[-20]
80022caa:	70 18       	ld.w	r8,r8[0x4]
80022cac:	ee f9 ff ec 	ld.w	r9,r7[-20]
80022cb0:	72 59       	ld.w	r9,r9[0x14]
80022cb2:	32 db       	mov	r11,45
80022cb4:	12 9c       	mov	r12,r9
80022cb6:	5d 18       	icall	r8
    c = c*-1;
80022cb8:	ee f8 ff e8 	ld.w	r8,r7[-24]
80022cbc:	5c 38       	neg	r8
80022cbe:	ef 48 ff e8 	st.w	r7[-24],r8
  } else {
    
  }

  do{
    i--;
80022cc2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022cc6:	20 18       	sub	r8,1
80022cc8:	ef 48 ff fc 	st.w	r7[-4],r8
    storage[i] = c % base;
80022ccc:	ee fa ff fc 	ld.w	r10,r7[-4]
80022cd0:	ef 39 ff e4 	ld.ub	r9,r7[-28]
80022cd4:	ee f8 ff e8 	ld.w	r8,r7[-24]
80022cd8:	f0 09 0c 08 	divs	r8,r8,r9
80022cdc:	12 98       	mov	r8,r9
80022cde:	5c 58       	castu.b	r8
80022ce0:	ee 0a 00 09 	add	r9,r7,r10
80022ce4:	f3 68 ff f0 	st.b	r9[-16],r8
    c = c / base;
80022ce8:	ef 39 ff e4 	ld.ub	r9,r7[-28]
80022cec:	ee f8 ff e8 	ld.w	r8,r7[-24]
80022cf0:	f0 09 0c 08 	divs	r8,r8,r9
80022cf4:	ef 48 ff e8 	st.w	r7[-24],r8
  }while((i >= 0) 
  && (c > 0)
  );
80022cf8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022cfc:	58 08       	cp.w	r8,0
80022cfe:	c1 75       	brlt	80022d2c <putnum_tight+0xc0>
80022d00:	ee f8 ff e8 	ld.w	r8,r7[-24]
80022d04:	58 08       	cp.w	r8,0
80022d06:	fe 99 ff de 	brgt	80022cc2 <putnum_tight+0x56>
  /* i is the index of the last digit calculated */

  /* Hence, there is no need to initialize i */
  for( ; i<MAX_DIGITS; i++){
80022d0a:	c1 18       	rjmp	80022d2c <putnum_tight+0xc0>
     putdigit(out_stream, storage[i]);
80022d0c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022d10:	ee 08 00 08 	add	r8,r7,r8
80022d14:	f1 38 ff f0 	ld.ub	r8,r8[-16]
80022d18:	10 9b       	mov	r11,r8
80022d1a:	ee fc ff ec 	ld.w	r12,r7[-20]
80022d1e:	f0 16 00 a7 	mcall	r6[668]
  && (c > 0)
  );
  /* i is the index of the last digit calculated */

  /* Hence, there is no need to initialize i */
  for( ; i<MAX_DIGITS; i++){
80022d22:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022d26:	2f f8       	sub	r8,-1
80022d28:	ef 48 ff fc 	st.w	r7[-4],r8
80022d2c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022d30:	58 98       	cp.w	r8,9
80022d32:	fe 9a ff ed 	brle	80022d0c <putnum_tight+0xa0>
80022d36:	c0 48       	rjmp	80022d3e <putnum_tight+0xd2>
}

void putnum_tight(byte_stream_t *out_stream, long c, char base){
  char storage[MAX_DIGITS];
  long i = MAX_DIGITS;
  if ((out_stream==NULL) || (out_stream->put==NULL)) return;
80022d38:	d7 03       	nop
80022d3a:	c0 28       	rjmp	80022d3e <putnum_tight+0xd2>
80022d3c:	d7 03       	nop
  /* Hence, there is no need to initialize i */
  for( ; i<MAX_DIGITS; i++){
     putdigit(out_stream, storage[i]);
  }

}
80022d3e:	2f 9d       	sub	sp,-28
80022d40:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80022d44:	80 02       	ld.sh	r2,r0[0x0]
80022d46:	2a fa       	sub	r10,-81
80022d48:	2d 00       	sub	r0,-48
80022d4a:	00 00       	add	r0,r0
80022d4c:	2e 00       	sub	r0,-32

80022d4e <putfloat>:

void putfloat(byte_stream_t *out_stream, float c, int after_digits){
80022d4e:	eb cd 40 c0 	pushm	r6-r7,lr
80022d52:	1a 97       	mov	r7,sp
80022d54:	20 8d       	sub	sp,32
80022d56:	4b d6       	lddpc	r6,80022e48 <putfloat+0xfa>
80022d58:	1e 26       	rsub	r6,pc
80022d5a:	ef 4c ff e8 	st.w	r7[-24],r12
80022d5e:	ef 4b ff e4 	st.w	r7[-28],r11
80022d62:	ef 4a ff e0 	st.w	r7[-32],r10
	int i;
	float num=c;
80022d66:	ee f8 ff e4 	ld.w	r8,r7[-28]
80022d6a:	ef 48 ff f0 	st.w	r7[-16],r8
	if (c<0) {
80022d6e:	30 18       	mov	r8,1
80022d70:	ee fa ff e4 	ld.w	r10,r7[-28]
80022d74:	30 09       	mov	r9,0
80022d76:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80022d7a:	e0 8c 00 03 	brvs	80022d80 <putfloat+0x32>
80022d7e:	c0 25       	brlt	80022d82 <putfloat+0x34>
80022d80:	30 08       	mov	r8,0
80022d82:	5c 58       	castu.b	r8
80022d84:	c0 d0       	breq	80022d9e <putfloat+0x50>
		putstring(out_stream, "-");
80022d86:	fe cb 00 3e 	sub	r11,pc,62
80022d8a:	ee fc ff e8 	ld.w	r12,r7[-24]
80022d8e:	f0 16 00 32 	mcall	r6[200]
		num=-c;
80022d92:	ee f8 ff e4 	ld.w	r8,r7[-28]
80022d96:	ee 18 80 00 	eorh	r8,0x8000
80022d9a:	ef 48 ff f0 	st.w	r7[-16],r8
	}
	int whole=abs((int)num);
80022d9e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80022da2:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80022da6:	ef 48 ff fc 	st.w	r7[-4],r8
80022daa:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022dae:	5c 48       	abs	r8
80022db0:	ef 48 ff fc 	st.w	r7[-4],r8
80022db4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022db8:	ef 48 ff f4 	st.w	r7[-12],r8
	float after=(num-(float)whole);
80022dbc:	ee f8 ff f4 	ld.w	r8,r7[-12]
80022dc0:	e5 a6 08 08 	cop	cp0,cr8,cr0,cr8,0x4c
80022dc4:	ee f9 ff f0 	ld.w	r9,r7[-16]
80022dc8:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80022dcc:	ef 48 ff f8 	st.w	r7[-8],r8

	putnum_tight(out_stream, whole, 10);
80022dd0:	30 aa       	mov	r10,10
80022dd2:	ee fb ff f4 	ld.w	r11,r7[-12]
80022dd6:	ee fc ff e8 	ld.w	r12,r7[-24]
80022dda:	f0 16 01 3a 	mcall	r6[1256]
	putstring(out_stream, "."); 
80022dde:	fe cb 00 92 	sub	r11,pc,146
80022de2:	ee fc ff e8 	ld.w	r12,r7[-24]
80022de6:	f0 16 00 32 	mcall	r6[200]
	
	for (i=0; i<after_digits; i++) 
80022dea:	30 08       	mov	r8,0
80022dec:	ef 48 ff ec 	st.w	r7[-20],r8
80022df0:	c2 38       	rjmp	80022e36 <putfloat+0xe8>
	{
		after*=10;
80022df2:	ee f9 ff f8 	ld.w	r9,r7[-8]
80022df6:	fc 18 41 20 	movh	r8,0x4120
80022dfa:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80022dfe:	ef 48 ff f8 	st.w	r7[-8],r8
		putdigit(out_stream, (int)after);
80022e02:	ee f8 ff f8 	ld.w	r8,r7[-8]
80022e06:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80022e0a:	10 9b       	mov	r11,r8
80022e0c:	ee fc ff e8 	ld.w	r12,r7[-24]
80022e10:	f0 16 00 a7 	mcall	r6[668]
		after=after-(int)after;
80022e14:	ee f8 ff f8 	ld.w	r8,r7[-8]
80022e18:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80022e1c:	e5 a6 08 08 	cop	cp0,cr8,cr0,cr8,0x4c
80022e20:	ee f9 ff f8 	ld.w	r9,r7[-8]
80022e24:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80022e28:	ef 48 ff f8 	st.w	r7[-8],r8
	float after=(num-(float)whole);

	putnum_tight(out_stream, whole, 10);
	putstring(out_stream, "."); 
	
	for (i=0; i<after_digits; i++) 
80022e2c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80022e30:	2f f8       	sub	r8,-1
80022e32:	ef 48 ff ec 	st.w	r7[-20],r8
80022e36:	ee f9 ff ec 	ld.w	r9,r7[-20]
80022e3a:	ee f8 ff e0 	ld.w	r8,r7[-32]
80022e3e:	10 39       	cp.w	r9,r8
80022e40:	cd 95       	brlt	80022df2 <putfloat+0xa4>
		after*=10;
		putdigit(out_stream, (int)after);
		after=after-(int)after;
	}
	
}
80022e42:	2f 8d       	sub	sp,-32
80022e44:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80022e48:	80 02       	ld.sh	r2,r0[0x0]
80022e4a:	2b dc       	sub	r12,-67
80022e4c:	28 00       	sub	r0,-128
80022e4e:	00 00       	add	r0,r0
80022e50:	2c 20       	sub	r0,-62
80022e52:	00 00       	add	r0,r0
80022e54:	29 20       	sub	r0,-110
	...

80022e58 <print_vector>:


void print_vector(byte_stream_t *out_stream, float v[], int after_digits) {
80022e58:	eb cd 40 c0 	pushm	r6-r7,lr
80022e5c:	1a 97       	mov	r7,sp
80022e5e:	20 4d       	sub	sp,16
80022e60:	4a 06       	lddpc	r6,80022ee0 <print_vector+0x88>
80022e62:	1e 26       	rsub	r6,pc
80022e64:	ef 4c ff f8 	st.w	r7[-8],r12
80022e68:	ef 4b ff f4 	st.w	r7[-12],r11
80022e6c:	ef 4a ff f0 	st.w	r7[-16],r10
	int i;
	putstring(out_stream, "(");
80022e70:	fe cb 00 24 	sub	r11,pc,36
80022e74:	ee fc ff f8 	ld.w	r12,r7[-8]
80022e78:	f0 16 00 32 	mcall	r6[200]
	for (i=0; i<3; i++) {
80022e7c:	30 08       	mov	r8,0
80022e7e:	ef 48 ff fc 	st.w	r7[-4],r8
80022e82:	c2 08       	rjmp	80022ec2 <print_vector+0x6a>
		putfloat(out_stream, v[i], after_digits);
80022e84:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022e88:	a3 68       	lsl	r8,0x2
80022e8a:	ee f9 ff f4 	ld.w	r9,r7[-12]
80022e8e:	f2 08 00 08 	add	r8,r9,r8
80022e92:	70 08       	ld.w	r8,r8[0x0]
80022e94:	ee fa ff f0 	ld.w	r10,r7[-16]
80022e98:	10 9b       	mov	r11,r8
80022e9a:	ee fc ff f8 	ld.w	r12,r7[-8]
80022e9e:	f0 16 00 ca 	mcall	r6[808]
		if (i<2) putstring(out_stream, ", ");
80022ea2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022ea6:	58 18       	cp.w	r8,1
80022ea8:	e0 89 00 08 	brgt	80022eb8 <print_vector+0x60>
80022eac:	fe cb 00 5c 	sub	r11,pc,92
80022eb0:	ee fc ff f8 	ld.w	r12,r7[-8]
80022eb4:	f0 16 00 32 	mcall	r6[200]


void print_vector(byte_stream_t *out_stream, float v[], int after_digits) {
	int i;
	putstring(out_stream, "(");
	for (i=0; i<3; i++) {
80022eb8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022ebc:	2f f8       	sub	r8,-1
80022ebe:	ef 48 ff fc 	st.w	r7[-4],r8
80022ec2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022ec6:	58 28       	cp.w	r8,2
80022ec8:	fe 9a ff de 	brle	80022e84 <print_vector+0x2c>
		putfloat(out_stream, v[i], after_digits);
		if (i<2) putstring(out_stream, ", ");

	}
	putstring(out_stream, ") ");
80022ecc:	fe cb 00 78 	sub	r11,pc,120
80022ed0:	ee fc ff f8 	ld.w	r12,r7[-8]
80022ed4:	f0 16 00 32 	mcall	r6[200]

}
80022ed8:	2f cd       	sub	sp,-16
80022eda:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80022ede:	00 00       	add	r0,r0
80022ee0:	80 02       	ld.sh	r2,r0[0x0]
80022ee2:	2c e6       	sub	r6,-50

80022ee4 <print_quaternion>:

void print_quaternion(byte_stream_t *out_stream, UQuat_t *quat, int after_digits) {
80022ee4:	eb cd 40 c0 	pushm	r6-r7,lr
80022ee8:	1a 97       	mov	r7,sp
80022eea:	20 3d       	sub	sp,12
80022eec:	49 96       	lddpc	r6,80022f50 <print_quaternion+0x6c>
80022eee:	1e 26       	rsub	r6,pc
80022ef0:	ef 4c ff fc 	st.w	r7[-4],r12
80022ef4:	ef 4b ff f8 	st.w	r7[-8],r11
80022ef8:	ef 4a ff f4 	st.w	r7[-12],r10
	putstring(out_stream, "(");
80022efc:	fe cb 00 b0 	sub	r11,pc,176
80022f00:	ee fc ff fc 	ld.w	r12,r7[-4]
80022f04:	f0 16 00 32 	mcall	r6[200]
	putfloat(out_stream, quat->s, after_digits);
80022f08:	ee f8 ff f8 	ld.w	r8,r7[-8]
80022f0c:	70 08       	ld.w	r8,r8[0x0]
80022f0e:	ee fa ff f4 	ld.w	r10,r7[-12]
80022f12:	10 9b       	mov	r11,r8
80022f14:	ee fc ff fc 	ld.w	r12,r7[-4]
80022f18:	f0 16 00 ca 	mcall	r6[808]
	putstring(out_stream, ", ");
80022f1c:	fe cb 00 cc 	sub	r11,pc,204
80022f20:	ee fc ff fc 	ld.w	r12,r7[-4]
80022f24:	f0 16 00 32 	mcall	r6[200]
	print_vector(out_stream, quat->v, after_digits);
80022f28:	ee f8 ff f8 	ld.w	r8,r7[-8]
80022f2c:	2f c8       	sub	r8,-4
80022f2e:	ee fa ff f4 	ld.w	r10,r7[-12]
80022f32:	10 9b       	mov	r11,r8
80022f34:	ee fc ff fc 	ld.w	r12,r7[-4]
80022f38:	f0 16 00 e7 	mcall	r6[924]
	putstring(out_stream, ") ");
80022f3c:	fe cb 00 e8 	sub	r11,pc,232
80022f40:	ee fc ff fc 	ld.w	r12,r7[-4]
80022f44:	f0 16 00 32 	mcall	r6[200]
}
80022f48:	2f dd       	sub	sp,-12
80022f4a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80022f4e:	00 00       	add	r0,r0
80022f50:	80 02       	ld.sh	r2,r0[0x0]
80022f52:	2d 72       	sub	r2,-41

80022f54 <dbg_print>:

void dbg_print(const char* s) {
80022f54:	eb cd 40 c0 	pushm	r6-r7,lr
80022f58:	1a 97       	mov	r7,sp
80022f5a:	20 1d       	sub	sp,4
80022f5c:	48 86       	lddpc	r6,80022f7c <dbg_print+0x28>
80022f5e:	1e 26       	rsub	r6,pc
80022f60:	ef 4c ff fc 	st.w	r7[-4],r12
	putstring(deb_stream, s);
80022f64:	ec f8 01 8c 	ld.w	r8,r6[396]
80022f68:	70 08       	ld.w	r8,r8[0x0]
80022f6a:	ee fb ff fc 	ld.w	r11,r7[-4]
80022f6e:	10 9c       	mov	r12,r8
80022f70:	f0 16 00 32 	mcall	r6[200]

}
80022f74:	2f fd       	sub	sp,-4
80022f76:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80022f7a:	00 00       	add	r0,r0
80022f7c:	80 02       	ld.sh	r2,r0[0x0]
80022f7e:	2d e2       	sub	r2,-34

80022f80 <dbg_print_num>:

void dbg_print_num(long c, char base) {
80022f80:	eb cd 40 c0 	pushm	r6-r7,lr
80022f84:	1a 97       	mov	r7,sp
80022f86:	20 2d       	sub	sp,8
80022f88:	48 b6       	lddpc	r6,80022fb4 <dbg_print_num+0x34>
80022f8a:	1e 26       	rsub	r6,pc
80022f8c:	ef 4c ff fc 	st.w	r7[-4],r12
80022f90:	16 98       	mov	r8,r11
80022f92:	ef 68 ff f8 	st.b	r7[-8],r8
	putnum(deb_stream, c, base);
80022f96:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80022f9a:	ec f8 01 8c 	ld.w	r8,r6[396]
80022f9e:	70 08       	ld.w	r8,r8[0x0]
80022fa0:	12 9a       	mov	r10,r9
80022fa2:	ee fb ff fc 	ld.w	r11,r7[-4]
80022fa6:	10 9c       	mov	r12,r8
80022fa8:	f0 16 00 26 	mcall	r6[152]

}
80022fac:	2f ed       	sub	sp,-8
80022fae:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80022fb2:	00 00       	add	r0,r0
80022fb4:	80 02       	ld.sh	r2,r0[0x0]
80022fb6:	2e 0e       	sub	lr,-32

80022fb8 <dbg_putfloat>:

void dbg_putfloat(float c, int after_digits) {
80022fb8:	eb cd 40 c0 	pushm	r6-r7,lr
80022fbc:	1a 97       	mov	r7,sp
80022fbe:	20 2d       	sub	sp,8
80022fc0:	48 a6       	lddpc	r6,80022fe8 <dbg_putfloat+0x30>
80022fc2:	1e 26       	rsub	r6,pc
80022fc4:	ef 4c ff fc 	st.w	r7[-4],r12
80022fc8:	ef 4b ff f8 	st.w	r7[-8],r11
	putfloat(deb_stream, c, after_digits);
80022fcc:	ec f8 01 8c 	ld.w	r8,r6[396]
80022fd0:	70 08       	ld.w	r8,r8[0x0]
80022fd2:	ee fa ff f8 	ld.w	r10,r7[-8]
80022fd6:	ee fb ff fc 	ld.w	r11,r7[-4]
80022fda:	10 9c       	mov	r12,r8
80022fdc:	f0 16 00 ca 	mcall	r6[808]
}
80022fe0:	2f ed       	sub	sp,-8
80022fe2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80022fe6:	00 00       	add	r0,r0
80022fe8:	80 02       	ld.sh	r2,r0[0x0]
80022fea:	2e 46       	sub	r6,-28

80022fec <dbg_print_vector>:

void dbg_print_vector(float v[], int after_digits) {
80022fec:	eb cd 40 c0 	pushm	r6-r7,lr
80022ff0:	1a 97       	mov	r7,sp
80022ff2:	20 2d       	sub	sp,8
80022ff4:	48 a6       	lddpc	r6,8002301c <dbg_print_vector+0x30>
80022ff6:	1e 26       	rsub	r6,pc
80022ff8:	ef 4c ff fc 	st.w	r7[-4],r12
80022ffc:	ef 4b ff f8 	st.w	r7[-8],r11
	print_vector(deb_stream, v, after_digits);
80023000:	ec f8 01 8c 	ld.w	r8,r6[396]
80023004:	70 08       	ld.w	r8,r8[0x0]
80023006:	ee fa ff f8 	ld.w	r10,r7[-8]
8002300a:	ee fb ff fc 	ld.w	r11,r7[-4]
8002300e:	10 9c       	mov	r12,r8
80023010:	f0 16 00 e7 	mcall	r6[924]
}
80023014:	2f ed       	sub	sp,-8
80023016:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002301a:	00 00       	add	r0,r0
8002301c:	80 02       	ld.sh	r2,r0[0x0]
8002301e:	2e 7a       	sub	r10,-25

80023020 <dbg_print_quaternion>:

void dbg_print_quaternion(UQuat_t *quat, int after_digits) {
80023020:	eb cd 40 c0 	pushm	r6-r7,lr
80023024:	1a 97       	mov	r7,sp
80023026:	20 2d       	sub	sp,8
80023028:	48 a6       	lddpc	r6,80023050 <dbg_print_quaternion+0x30>
8002302a:	1e 26       	rsub	r6,pc
8002302c:	ef 4c ff fc 	st.w	r7[-4],r12
80023030:	ef 4b ff f8 	st.w	r7[-8],r11
	print_quaternion(deb_stream, quat, after_digits);
80023034:	ec f8 01 8c 	ld.w	r8,r6[396]
80023038:	70 08       	ld.w	r8,r8[0x0]
8002303a:	ee fa ff f8 	ld.w	r10,r7[-8]
8002303e:	ee fb ff fc 	ld.w	r11,r7[-4]
80023042:	10 9c       	mov	r12,r8
80023044:	f0 16 01 91 	mcall	r6[1604]
}
80023048:	2f ed       	sub	sp,-8
8002304a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002304e:	00 00       	add	r0,r0
80023050:	80 02       	ld.sh	r2,r0[0x0]
80023052:	2e ae       	sub	lr,-22
80023054:	0a 00       	add	r0,r5

80023056 <dbg_log_value>:


void dbg_log_value(const char* msg, long value, char base) {
80023056:	eb cd 40 c0 	pushm	r6-r7,lr
8002305a:	1a 97       	mov	r7,sp
8002305c:	20 3d       	sub	sp,12
8002305e:	49 26       	lddpc	r6,800230a4 <dbg_log_value+0x4e>
80023060:	1e 26       	rsub	r6,pc
80023062:	ef 4c ff fc 	st.w	r7[-4],r12
80023066:	ef 4b ff f8 	st.w	r7[-8],r11
8002306a:	14 98       	mov	r8,r10
8002306c:	ef 68 ff f4 	st.b	r7[-12],r8
	dbg_print(msg);
80023070:	ee fc ff fc 	ld.w	r12,r7[-4]
80023074:	f0 16 00 01 	mcall	r6[4]
	if (base>1) {
80023078:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8002307c:	30 18       	mov	r8,1
8002307e:	f0 09 18 00 	cp.b	r9,r8
80023082:	e0 88 00 09 	brls	80023094 <dbg_log_value+0x3e>
		dbg_print_num(value, base);
80023086:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8002308a:	10 9b       	mov	r11,r8
8002308c:	ee fc ff f8 	ld.w	r12,r7[-8]
80023090:	f0 16 00 04 	mcall	r6[16]
	}
	dbg_print("\n");
80023094:	fe cc 00 40 	sub	r12,pc,64
80023098:	f0 16 00 01 	mcall	r6[4]

}
8002309c:	2f dd       	sub	sp,-12
8002309e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800230a2:	00 00       	add	r0,r0
800230a4:	80 02       	ld.sh	r2,r0[0x0]
800230a6:	2e e4       	sub	r4,-18

800230a8 <adcifa_get_calibration_data>:
#include "compiler.h"
#include "adcifa.h"

void adcifa_get_calibration_data(volatile avr32_adcifa_t * adcifa,
                                 adcifa_opt_t * p_adcifa_opt)
{
800230a8:	eb cd 40 80 	pushm	r7,lr
800230ac:	1a 97       	mov	r7,sp
800230ae:	20 6d       	sub	sp,24
800230b0:	ef 4c ff ec 	st.w	r7[-20],r12
800230b4:	ef 4b ff e8 	st.w	r7[-24],r11
	// Get Offset Calibration
	signed int adc_ocal = (( *(volatile signed int*)(AVR32_FLASHC_FACTORY_PAGE_ADDRESS + AVR32_FLASHC_FROW_OCAL_WORD)) &  AVR32_FLASHC_FROW_OCAL_MASK) >> AVR32_FLASHC_FROW_OCAL_OFFSET;
800230b8:	e0 68 02 04 	mov	r8,516
800230bc:	ea 18 80 80 	orh	r8,0x8080
800230c0:	70 08       	ld.w	r8,r8[0x0]
800230c2:	e6 18 3f 00 	andh	r8,0x3f00,COH
800230c6:	b9 48       	asr	r8,0x18
800230c8:	ef 48 ff f0 	st.w	r7[-16],r8
	// Get Gain Calibration
	signed int adc_gcal = (( *(volatile signed int *)(AVR32_FLASHC_FACTORY_PAGE_ADDRESS + AVR32_FLASHC_FROW_GCAL_WORD)) &  AVR32_FLASHC_FROW_GCAL_MASK) >> AVR32_FLASHC_FROW_GCAL_OFFSET;
800230cc:	e0 68 02 04 	mov	r8,516
800230d0:	ea 18 80 80 	orh	r8,0x8080
800230d4:	70 08       	ld.w	r8,r8[0x0]
800230d6:	f1 d8 c0 0f 	bfextu	r8,r8,0x0,0xf
800230da:	ef 48 ff f4 	st.w	r7[-12],r8
	//  Get S/H Calibration
	signed int adc_gain0 = (( *(volatile signed int *)(AVR32_FLASHC_FACTORY_PAGE_ADDRESS + AVR32_FLASHC_FROW_GAIN0_WORD)) &  AVR32_FLASHC_FROW_GAIN0_MASK) >> AVR32_FLASHC_FROW_GAIN0_OFFSET;
800230de:	e0 68 02 08 	mov	r8,520
800230e2:	ea 18 80 80 	orh	r8,0x8080
800230e6:	70 08       	ld.w	r8,r8[0x0]
800230e8:	f1 d8 c0 0a 	bfextu	r8,r8,0x0,0xa
800230ec:	ef 48 ff f8 	st.w	r7[-8],r8
	signed int adc_gain1 = (( *(volatile signed int *)(AVR32_FLASHC_FACTORY_PAGE_ADDRESS + AVR32_FLASHC_FROW_GAIN1_WORD)) &  AVR32_FLASHC_FROW_GAIN1_MASK) >> AVR32_FLASHC_FROW_GAIN1_OFFSET;
800230f0:	e0 68 02 08 	mov	r8,520
800230f4:	ea 18 80 80 	orh	r8,0x8080
800230f8:	70 08       	ld.w	r8,r8[0x0]
800230fa:	e6 18 03 ff 	andh	r8,0x3ff,COH
800230fe:	b1 48       	asr	r8,0x10
80023100:	ef 48 ff fc 	st.w	r7[-4],r8

	// Get ADC Offset Calibration
	p_adcifa_opt->offset_calibration_value = adc_ocal;
80023104:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023108:	5c 88       	casts.h	r8
8002310a:	ee f9 ff e8 	ld.w	r9,r7[-24]
8002310e:	b2 68       	st.h	r9[0xc],r8

	// Get ADC Gain Calibration
	p_adcifa_opt->gain_calibration_value = adc_gcal ;
80023110:	ee f8 ff f4 	ld.w	r8,r7[-12]
80023114:	5c 88       	casts.h	r8
80023116:	ee f9 ff e8 	ld.w	r9,r7[-24]
8002311a:	b2 58       	st.h	r9[0xa],r8

	// Get Sample & Hold Gain Calibration for Seq 0
	p_adcifa_opt->sh0_calibration_value = adc_gain0;
8002311c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80023120:	5c 88       	casts.h	r8
80023122:	ee f9 ff e8 	ld.w	r9,r7[-24]
80023126:	b2 78       	st.h	r9[0xe],r8

	// Get Sample & Hold Gain Calibration for Seq 1
	p_adcifa_opt->sh1_calibration_value = adc_gain1;
80023128:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002312c:	5c 88       	casts.h	r8
8002312e:	ee f9 ff e8 	ld.w	r9,r7[-24]
80023132:	f3 58 00 10 	st.h	r9[16],r8
}
80023136:	2f ad       	sub	sp,-24
80023138:	e3 cd 80 80 	ldm	sp++,r7,pc

8002313c <adcifa_configure>:


U8 adcifa_configure(volatile avr32_adcifa_t * adcifa,
                    adcifa_opt_t * p_adcifa_opt,
                    U32 pb_hz)
{
8002313c:	eb cd 40 80 	pushm	r7,lr
80023140:	1a 97       	mov	r7,sp
80023142:	20 3d       	sub	sp,12
80023144:	ef 4c ff fc 	st.w	r7[-4],r12
80023148:	ef 4b ff f8 	st.w	r7[-8],r11
8002314c:	ef 4a ff f4 	st.w	r7[-12],r10

	// Sanity Check
	Assert( adcifa!=NULL );

	// Set the ADC configuration
	AVR32_ADCIFA.cfg = (p_adcifa_opt->sleep_mode_enable << AVR32_ADCIFA_CFG_SLEEP)
80023150:	fc 7a 24 00 	mov	r10,-187392
80023154:	ee f8 ff f8 	ld.w	r8,r7[-8]
80023158:	f1 38 00 08 	ld.ub	r8,r8[8]
8002315c:	f0 09 15 02 	lsl	r9,r8,0x2
	                    | (p_adcifa_opt->single_sequencer_mode << AVR32_ADCIFA_CFG_SSMQ)
80023160:	ee f8 ff f8 	ld.w	r8,r7[-8]
80023164:	11 e8       	ld.ub	r8,r8[0x6]
80023166:	a3 78       	lsl	r8,0x3
	                    | (p_adcifa_opt->free_running_mode_enable << AVR32_ADCIFA_CFG_FRM)
80023168:	10 49       	or	r9,r8
8002316a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002316e:	11 f8       	ld.ub	r8,r8[0x7]
80023170:	a5 68       	lsl	r8,0x4
	                    | (p_adcifa_opt->reference_source << AVR32_ADCIFA_CFG_RS)
80023172:	10 49       	or	r9,r8
80023174:	ee f8 ff f8 	ld.w	r8,r7[-8]
80023178:	11 c8       	ld.ub	r8,r8[0x4]
8002317a:	a5 78       	lsl	r8,0x5
	                    | (p_adcifa_opt->sample_and_hold_disable << AVR32_ADCIFA_CFG_SHD)
8002317c:	10 49       	or	r9,r8
8002317e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80023182:	11 d8       	ld.ub	r8,r8[0x5]
80023184:	a7 78       	lsl	r8,0x7
	                    | (((ADCIFA_START_UP_TIME * (p_adcifa_opt->frequency/1000))/32000) << AVR32_ADCIFA_CFG_SUT);
80023186:	f3 e8 10 08 	or	r8,r9,r8

	// Sanity Check
	Assert( adcifa!=NULL );

	// Set the ADC configuration
	AVR32_ADCIFA.cfg = (p_adcifa_opt->sleep_mode_enable << AVR32_ADCIFA_CFG_SLEEP)
8002318a:	10 9b       	mov	r11,r8
	                    | (p_adcifa_opt->single_sequencer_mode << AVR32_ADCIFA_CFG_SSMQ)
	                    | (p_adcifa_opt->free_running_mode_enable << AVR32_ADCIFA_CFG_FRM)
	                    | (p_adcifa_opt->reference_source << AVR32_ADCIFA_CFG_RS)
	                    | (p_adcifa_opt->sample_and_hold_disable << AVR32_ADCIFA_CFG_SHD)
	                    | (((ADCIFA_START_UP_TIME * (p_adcifa_opt->frequency/1000))/32000) << AVR32_ADCIFA_CFG_SUT);
8002318c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80023190:	70 09       	ld.w	r9,r8[0x0]
80023192:	e0 68 4d d3 	mov	r8,19923
80023196:	ea 18 10 62 	orh	r8,0x1062
8002319a:	f2 08 06 48 	mulu.d	r8,r9,r8
8002319e:	a7 89       	lsr	r9,0x6
800231a0:	e0 68 03 e8 	mov	r8,1000
800231a4:	b1 39       	mul	r9,r8
800231a6:	e0 68 4d d3 	mov	r8,19923
800231aa:	ea 18 10 62 	orh	r8,0x1062
800231ae:	f2 08 06 48 	mulu.d	r8,r9,r8
800231b2:	f2 08 16 0b 	lsr	r8,r9,0xb
800231b6:	b1 68       	lsl	r8,0x10

	// Sanity Check
	Assert( adcifa!=NULL );

	// Set the ADC configuration
	AVR32_ADCIFA.cfg = (p_adcifa_opt->sleep_mode_enable << AVR32_ADCIFA_CFG_SLEEP)
800231b8:	f7 e8 10 08 	or	r8,r11,r8
800231bc:	95 18       	st.w	r10[0x4],r8
	                    | (p_adcifa_opt->reference_source << AVR32_ADCIFA_CFG_RS)
	                    | (p_adcifa_opt->sample_and_hold_disable << AVR32_ADCIFA_CFG_SHD)
	                    | (((ADCIFA_START_UP_TIME * (p_adcifa_opt->frequency/1000))/32000) << AVR32_ADCIFA_CFG_SUT);

	// Configure Clock  (rounded up)
	adcifa->ckdiv = (((pb_hz / (2*p_adcifa_opt->frequency))-1) << AVR32_ADCIFA_CKDIV_CNT_OFFSET) & AVR32_ADCIFA_CKDIV_CNT_MASK;
800231be:	ee f8 ff f8 	ld.w	r8,r7[-8]
800231c2:	70 08       	ld.w	r8,r8[0x0]
800231c4:	f0 09 15 01 	lsl	r9,r8,0x1
800231c8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800231cc:	f0 09 0d 08 	divu	r8,r8,r9
800231d0:	20 18       	sub	r8,1
800231d2:	f3 d8 c0 09 	bfextu	r9,r8,0x0,0x9
800231d6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800231da:	f1 49 00 44 	st.w	r8[68],r9

	// Set ADC Offset Calibration
	ADCIFA_set_offset_calibration(p_adcifa_opt->offset_calibration_value);
800231de:	fc 78 24 00 	mov	r8,-187392
800231e2:	fc 79 24 00 	mov	r9,-187392
800231e6:	73 aa       	ld.w	r10,r9[0x68]
800231e8:	ee f9 ff f8 	ld.w	r9,r7[-8]
800231ec:	92 69       	ld.sh	r9,r9[0xc]
800231ee:	b9 69       	lsl	r9,0x18
800231f0:	e6 19 3f 00 	andh	r9,0x3f00,COH
800231f4:	f5 e9 10 09 	or	r9,r10,r9
800231f8:	f1 49 00 68 	st.w	r8[104],r9

	// Set ADC Gain Calibration
	ADCIFA_set_gain_calibration(p_adcifa_opt->gain_calibration_value);
800231fc:	fc 78 24 00 	mov	r8,-187392
80023200:	fc 79 24 00 	mov	r9,-187392
80023204:	73 aa       	ld.w	r10,r9[0x68]
80023206:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002320a:	92 59       	ld.sh	r9,r9[0xa]
8002320c:	f3 d9 c0 0f 	bfextu	r9,r9,0x0,0xf
80023210:	f5 e9 10 09 	or	r9,r10,r9
80023214:	f1 49 00 68 	st.w	r8[104],r9

	// Set Sample & Hold Gain Calibration for seq 0
	ADCIFA_set_sh0_gain_calibration(p_adcifa_opt->sh0_calibration_value);
80023218:	fc 78 24 00 	mov	r8,-187392
8002321c:	fc 79 24 00 	mov	r9,-187392
80023220:	73 ba       	ld.w	r10,r9[0x6c]
80023222:	ee f9 ff f8 	ld.w	r9,r7[-8]
80023226:	92 79       	ld.sh	r9,r9[0xe]
80023228:	f3 d9 c0 0a 	bfextu	r9,r9,0x0,0xa
8002322c:	f5 e9 10 09 	or	r9,r10,r9
80023230:	f1 49 00 6c 	st.w	r8[108],r9

	// Set Sample & Hold Gain Calibration for seq 1
	ADCIFA_set_sh1_gain_calibration(p_adcifa_opt->sh1_calibration_value);
80023234:	fc 78 24 00 	mov	r8,-187392
80023238:	fc 79 24 00 	mov	r9,-187392
8002323c:	73 ba       	ld.w	r10,r9[0x6c]
8002323e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80023242:	f3 09 00 10 	ld.sh	r9,r9[16]
80023246:	b1 69       	lsl	r9,0x10
80023248:	e6 19 03 ff 	andh	r9,0x3ff,COH
8002324c:	f5 e9 10 09 	or	r9,r10,r9
80023250:	f1 49 00 6c 	st.w	r8[108],r9

	// Enable ADCIFA
	ADCIFA_enable();
80023254:	fc 78 24 00 	mov	r8,-187392
80023258:	fc 79 24 00 	mov	r9,-187392
8002325c:	72 19       	ld.w	r9,r9[0x4]
8002325e:	a1 a9       	sbr	r9,0x0
80023260:	91 19       	st.w	r8[0x4],r9
80023262:	c0 28       	rjmp	80023266 <adcifa_configure+0x12a>

	// Wait Startup Time
	while (1) {
		if (ADCIFA_is_startup_time()) break;
	}
80023264:	d7 03       	nop
	// Enable ADCIFA
	ADCIFA_enable();

	// Wait Startup Time
	while (1) {
		if (ADCIFA_is_startup_time()) break;
80023266:	fc 78 24 00 	mov	r8,-187392
8002326a:	70 28       	ld.w	r8,r8[0x8]
8002326c:	e2 18 40 00 	andl	r8,0x4000,COH
80023270:	cf a0       	breq	80023264 <adcifa_configure+0x128>
	}

	return ADCIFA_CONFIGURATION_ACCEPTED;
80023272:	30 18       	mov	r8,1
}
80023274:	10 9c       	mov	r12,r8
80023276:	2f dd       	sub	sp,-12
80023278:	e3 cd 80 80 	ldm	sp++,r7,pc

8002327c <adcifa_configure_sequencer>:

U8 adcifa_configure_sequencer(volatile avr32_adcifa_t * adcifa,
                              U8 sequencer,
                              adcifa_sequencer_opt_t * p_adcifa_sequencer_opt,
                              adcifa_sequencer_conversion_opt_t * p_adcifa_sequencer_conversion_opt)
{
8002327c:	eb cd 40 80 	pushm	r7,lr
80023280:	1a 97       	mov	r7,sp
80023282:	20 bd       	sub	sp,44
80023284:	ef 4c ff e0 	st.w	r7[-32],r12
80023288:	16 98       	mov	r8,r11
8002328a:	ef 4a ff d8 	st.w	r7[-40],r10
8002328e:	ef 49 ff d4 	st.w	r7[-44],r9
80023292:	ef 68 ff dc 	st.b	r7[-36],r8
	U8 g[8]={0};
80023296:	30 08       	mov	r8,0
80023298:	30 09       	mov	r9,0
8002329a:	ee e9 ff f4 	st.d	r7[-12],r8
	U8 mp[8]={0};
8002329e:	30 08       	mov	r8,0
800232a0:	30 09       	mov	r9,0
800232a2:	ee e9 ff ec 	st.d	r7[-20],r8
	U8 mn[8]={0};
800232a6:	30 08       	mov	r8,0
800232a8:	30 09       	mov	r9,0
800232aa:	ee e9 ff e4 	st.d	r7[-28],r8
	U8 i;
	// Sanity Check
	Assert( adcifa!=NULL );

	// Switch case with sequencer
	switch (sequencer) {
800232ae:	ef 38 ff dc 	ld.ub	r8,r7[-36]
800232b2:	58 08       	cp.w	r8,0
800232b4:	c0 60       	breq	800232c0 <adcifa_configure_sequencer+0x44>
800232b6:	58 18       	cp.w	r8,1
800232b8:	e0 80 00 ed 	breq	80023492 <adcifa_configure_sequencer+0x216>
800232bc:	e0 8f 01 d7 	bral	8002366a <adcifa_configure_sequencer+0x3ee>
		// Sequencer 0
	case 0:
		// Configure Sequencer 0
		ADCIFA_configure_sequencer_0((p_adcifa_sequencer_opt->convnb-1),
800232c0:	fc 78 24 00 	mov	r8,-187392
800232c4:	ee f9 ff d8 	ld.w	r9,r7[-40]
800232c8:	13 89       	ld.ub	r9,r9[0x0]
800232ca:	20 19       	sub	r9,1
800232cc:	f2 0a 15 10 	lsl	r10,r9,0x10
800232d0:	ee f9 ff d8 	ld.w	r9,r7[-40]
800232d4:	13 99       	ld.ub	r9,r9[0x1]
800232d6:	ad 69       	lsl	r9,0xc
800232d8:	12 4a       	or	r10,r9
800232da:	ee f9 ff d8 	ld.w	r9,r7[-40]
800232de:	13 a9       	ld.ub	r9,r9[0x2]
800232e0:	a9 69       	lsl	r9,0x8
800232e2:	12 4a       	or	r10,r9
800232e4:	ee f9 ff d8 	ld.w	r9,r7[-40]
800232e8:	13 b9       	ld.ub	r9,r9[0x3]
800232ea:	a3 69       	lsl	r9,0x2
800232ec:	12 4a       	or	r10,r9
800232ee:	ee f9 ff d8 	ld.w	r9,r7[-40]
800232f2:	13 c9       	ld.ub	r9,r9[0x4]
800232f4:	a3 79       	lsl	r9,0x3
800232f6:	12 4a       	or	r10,r9
800232f8:	ee f9 ff d8 	ld.w	r9,r7[-40]
800232fc:	13 d9       	ld.ub	r9,r9[0x5]
800232fe:	a1 79       	lsl	r9,0x1
80023300:	12 4a       	or	r10,r9
80023302:	ee f9 ff d8 	ld.w	r9,r7[-40]
80023306:	13 e9       	ld.ub	r9,r9[0x6]
80023308:	f5 e9 10 09 	or	r9,r10,r9
8002330c:	91 59       	st.w	r8[0x14],r9
		                             (p_adcifa_sequencer_opt->sh_mode),
#endif
		                             (p_adcifa_sequencer_opt->half_word_adjustment),
		                             (p_adcifa_sequencer_opt->software_acknowledge));
		// Configure Gain for Sequencer 0
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++)
8002330e:	30 08       	mov	r8,0
80023310:	ef 68 ff ff 	st.b	r7[-1],r8
80023314:	c1 68       	rjmp	80023340 <adcifa_configure_sequencer+0xc4>
			g[i] = p_adcifa_sequencer_conversion_opt[i].gain;
80023316:	ef 3a ff ff 	ld.ub	r10,r7[-1]
8002331a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8002331e:	12 98       	mov	r8,r9
80023320:	a1 78       	lsl	r8,0x1
80023322:	12 08       	add	r8,r9
80023324:	ee f9 ff d4 	ld.w	r9,r7[-44]
80023328:	f2 08 00 08 	add	r8,r9,r8
8002332c:	11 a8       	ld.ub	r8,r8[0x2]
8002332e:	ee 0a 00 09 	add	r9,r7,r10
80023332:	f3 68 ff f4 	st.b	r9[-12],r8
		                             (p_adcifa_sequencer_opt->sh_mode),
#endif
		                             (p_adcifa_sequencer_opt->half_word_adjustment),
		                             (p_adcifa_sequencer_opt->software_acknowledge));
		// Configure Gain for Sequencer 0
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++)
80023336:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8002333a:	2f f8       	sub	r8,-1
8002333c:	ef 68 ff ff 	st.b	r7[-1],r8
80023340:	ee f8 ff d8 	ld.w	r8,r7[-40]
80023344:	11 88       	ld.ub	r8,r8[0x0]
80023346:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8002334a:	f0 09 18 00 	cp.b	r9,r8
8002334e:	ce 43       	brcs	80023316 <adcifa_configure_sequencer+0x9a>
			g[i] = p_adcifa_sequencer_conversion_opt[i].gain;
		ADCIFA_configure_sh0gain(g[7], g[6], g[5], g[4], g[3], g[2], g[1], g[0]);
80023350:	fc 78 24 00 	mov	r8,-187392
80023354:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80023358:	f2 0a 15 1c 	lsl	r10,r9,0x1c
8002335c:	ef 39 ff fa 	ld.ub	r9,r7[-6]
80023360:	b9 69       	lsl	r9,0x18
80023362:	12 4a       	or	r10,r9
80023364:	ef 39 ff f9 	ld.ub	r9,r7[-7]
80023368:	b5 69       	lsl	r9,0x14
8002336a:	12 4a       	or	r10,r9
8002336c:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80023370:	b1 69       	lsl	r9,0x10
80023372:	12 4a       	or	r10,r9
80023374:	ef 39 ff f7 	ld.ub	r9,r7[-9]
80023378:	ad 69       	lsl	r9,0xc
8002337a:	12 4a       	or	r10,r9
8002337c:	ef 39 ff f6 	ld.ub	r9,r7[-10]
80023380:	a9 69       	lsl	r9,0x8
80023382:	12 4a       	or	r10,r9
80023384:	ef 39 ff f5 	ld.ub	r9,r7[-11]
80023388:	a5 69       	lsl	r9,0x4
8002338a:	12 4a       	or	r10,r9
8002338c:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80023390:	f5 e9 10 09 	or	r9,r10,r9
80023394:	91 79       	st.w	r8[0x1c],r9

		// Configure Mux for Sequencer 0
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
80023396:	30 08       	mov	r8,0
80023398:	ef 68 ff ff 	st.b	r7[-1],r8
8002339c:	c2 68       	rjmp	800233e8 <adcifa_configure_sequencer+0x16c>
			mp[i] = p_adcifa_sequencer_conversion_opt[i].channel_p;
8002339e:	ef 3a ff ff 	ld.ub	r10,r7[-1]
800233a2:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800233a6:	12 98       	mov	r8,r9
800233a8:	a1 78       	lsl	r8,0x1
800233aa:	12 08       	add	r8,r9
800233ac:	ee f9 ff d4 	ld.w	r9,r7[-44]
800233b0:	f2 08 00 08 	add	r8,r9,r8
800233b4:	11 88       	ld.ub	r8,r8[0x0]
800233b6:	ee 0a 00 09 	add	r9,r7,r10
800233ba:	f3 68 ff ec 	st.b	r9[-20],r8
			mn[i] = p_adcifa_sequencer_conversion_opt[i].channel_n;
800233be:	ef 3a ff ff 	ld.ub	r10,r7[-1]
800233c2:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800233c6:	12 98       	mov	r8,r9
800233c8:	a1 78       	lsl	r8,0x1
800233ca:	12 08       	add	r8,r9
800233cc:	ee f9 ff d4 	ld.w	r9,r7[-44]
800233d0:	f2 08 00 08 	add	r8,r9,r8
800233d4:	11 98       	ld.ub	r8,r8[0x1]
800233d6:	ee 0a 00 09 	add	r9,r7,r10
800233da:	f3 68 ff e4 	st.b	r9[-28],r8
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++)
			g[i] = p_adcifa_sequencer_conversion_opt[i].gain;
		ADCIFA_configure_sh0gain(g[7], g[6], g[5], g[4], g[3], g[2], g[1], g[0]);

		// Configure Mux for Sequencer 0
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
800233de:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800233e2:	2f f8       	sub	r8,-1
800233e4:	ef 68 ff ff 	st.b	r7[-1],r8
800233e8:	ee f8 ff d8 	ld.w	r8,r7[-40]
800233ec:	11 88       	ld.ub	r8,r8[0x0]
800233ee:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800233f2:	f0 09 18 00 	cp.b	r9,r8
800233f6:	cd 43       	brcs	8002339e <adcifa_configure_sequencer+0x122>
			mp[i] = p_adcifa_sequencer_conversion_opt[i].channel_p;
			mn[i] = p_adcifa_sequencer_conversion_opt[i].channel_n;
		}
		ADCIFA_configure_muxsel0p(mp[7], mp[6], mp[5], mp[4], mp[3], mp[2], mp[1], mp[0]);
800233f8:	fc 78 24 00 	mov	r8,-187392
800233fc:	ef 39 ff f3 	ld.ub	r9,r7[-13]
80023400:	f2 0a 15 18 	lsl	r10,r9,0x18
80023404:	ef 39 ff f2 	ld.ub	r9,r7[-14]
80023408:	b1 69       	lsl	r9,0x10
8002340a:	12 4a       	or	r10,r9
8002340c:	ef 39 ff f1 	ld.ub	r9,r7[-15]
80023410:	a9 69       	lsl	r9,0x8
80023412:	12 4a       	or	r10,r9
80023414:	ef 39 ff f0 	ld.ub	r9,r7[-16]
80023418:	f5 e9 10 09 	or	r9,r10,r9
8002341c:	91 b9       	st.w	r8[0x2c],r9
8002341e:	fc 78 24 00 	mov	r8,-187392
80023422:	ef 39 ff ef 	ld.ub	r9,r7[-17]
80023426:	f2 0a 15 18 	lsl	r10,r9,0x18
8002342a:	ef 39 ff ee 	ld.ub	r9,r7[-18]
8002342e:	b1 69       	lsl	r9,0x10
80023430:	12 4a       	or	r10,r9
80023432:	ef 39 ff ed 	ld.ub	r9,r7[-19]
80023436:	a9 69       	lsl	r9,0x8
80023438:	12 4a       	or	r10,r9
8002343a:	ef 39 ff ec 	ld.ub	r9,r7[-20]
8002343e:	f5 e9 10 09 	or	r9,r10,r9
80023442:	91 99       	st.w	r8[0x24],r9
		ADCIFA_configure_muxsel0n(mn[7], mn[6], mn[5], mn[4], mn[3], mn[2], mn[1], mn[0]);
80023444:	fc 78 24 00 	mov	r8,-187392
80023448:	ef 39 ff eb 	ld.ub	r9,r7[-21]
8002344c:	f2 0a 15 18 	lsl	r10,r9,0x18
80023450:	ef 39 ff ea 	ld.ub	r9,r7[-22]
80023454:	b1 69       	lsl	r9,0x10
80023456:	12 4a       	or	r10,r9
80023458:	ef 39 ff e9 	ld.ub	r9,r7[-23]
8002345c:	a9 69       	lsl	r9,0x8
8002345e:	12 4a       	or	r10,r9
80023460:	ef 39 ff e8 	ld.ub	r9,r7[-24]
80023464:	f5 e9 10 09 	or	r9,r10,r9
80023468:	91 f9       	st.w	r8[0x3c],r9
8002346a:	fc 78 24 00 	mov	r8,-187392
8002346e:	ef 39 ff e7 	ld.ub	r9,r7[-25]
80023472:	f2 0a 15 18 	lsl	r10,r9,0x18
80023476:	ef 39 ff e6 	ld.ub	r9,r7[-26]
8002347a:	b1 69       	lsl	r9,0x10
8002347c:	12 4a       	or	r10,r9
8002347e:	ef 39 ff e5 	ld.ub	r9,r7[-27]
80023482:	a9 69       	lsl	r9,0x8
80023484:	12 4a       	or	r10,r9
80023486:	ef 39 ff e4 	ld.ub	r9,r7[-28]
8002348a:	f5 e9 10 09 	or	r9,r10,r9
8002348e:	91 d9       	st.w	r8[0x34],r9
		break;
80023490:	ce d8       	rjmp	8002366a <adcifa_configure_sequencer+0x3ee>
		// Sequencer 1
	case 1:
		// Configure Sequencer 1
		ADCIFA_configure_sequencer_1((p_adcifa_sequencer_opt->convnb-1),
80023492:	fc 78 24 00 	mov	r8,-187392
80023496:	ee f9 ff d8 	ld.w	r9,r7[-40]
8002349a:	13 89       	ld.ub	r9,r9[0x0]
8002349c:	20 19       	sub	r9,1
8002349e:	f2 0a 15 10 	lsl	r10,r9,0x10
800234a2:	ee f9 ff d8 	ld.w	r9,r7[-40]
800234a6:	13 99       	ld.ub	r9,r9[0x1]
800234a8:	ad 69       	lsl	r9,0xc
800234aa:	12 4a       	or	r10,r9
800234ac:	ee f9 ff d8 	ld.w	r9,r7[-40]
800234b0:	13 a9       	ld.ub	r9,r9[0x2]
800234b2:	a9 69       	lsl	r9,0x8
800234b4:	12 4a       	or	r10,r9
800234b6:	ee f9 ff d8 	ld.w	r9,r7[-40]
800234ba:	13 b9       	ld.ub	r9,r9[0x3]
800234bc:	a3 69       	lsl	r9,0x2
800234be:	12 4a       	or	r10,r9
800234c0:	ee f9 ff d8 	ld.w	r9,r7[-40]
800234c4:	13 c9       	ld.ub	r9,r9[0x4]
800234c6:	a3 79       	lsl	r9,0x3
800234c8:	12 4a       	or	r10,r9
800234ca:	ee f9 ff d8 	ld.w	r9,r7[-40]
800234ce:	13 d9       	ld.ub	r9,r9[0x5]
800234d0:	a1 79       	lsl	r9,0x1
800234d2:	f5 e9 10 09 	or	r9,r10,r9
800234d6:	12 9a       	mov	r10,r9
800234d8:	a5 aa       	sbr	r10,0x4
800234da:	ee f9 ff d8 	ld.w	r9,r7[-40]
800234de:	13 e9       	ld.ub	r9,r9[0x6]
800234e0:	f5 e9 10 09 	or	r9,r10,r9
800234e4:	91 69       	st.w	r8[0x18],r9
#endif
		                             (p_adcifa_sequencer_opt->half_word_adjustment),
		                             (p_adcifa_sequencer_opt->software_acknowledge));

		// Configure Gain for Sequencer 1
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++)
800234e6:	30 08       	mov	r8,0
800234e8:	ef 68 ff ff 	st.b	r7[-1],r8
800234ec:	c1 68       	rjmp	80023518 <adcifa_configure_sequencer+0x29c>
			g[i] = p_adcifa_sequencer_conversion_opt[i].gain;
800234ee:	ef 3a ff ff 	ld.ub	r10,r7[-1]
800234f2:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800234f6:	12 98       	mov	r8,r9
800234f8:	a1 78       	lsl	r8,0x1
800234fa:	12 08       	add	r8,r9
800234fc:	ee f9 ff d4 	ld.w	r9,r7[-44]
80023500:	f2 08 00 08 	add	r8,r9,r8
80023504:	11 a8       	ld.ub	r8,r8[0x2]
80023506:	ee 0a 00 09 	add	r9,r7,r10
8002350a:	f3 68 ff f4 	st.b	r9[-12],r8
#endif
		                             (p_adcifa_sequencer_opt->half_word_adjustment),
		                             (p_adcifa_sequencer_opt->software_acknowledge));

		// Configure Gain for Sequencer 1
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++)
8002350e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80023512:	2f f8       	sub	r8,-1
80023514:	ef 68 ff ff 	st.b	r7[-1],r8
80023518:	ee f8 ff d8 	ld.w	r8,r7[-40]
8002351c:	11 88       	ld.ub	r8,r8[0x0]
8002351e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80023522:	f0 09 18 00 	cp.b	r9,r8
80023526:	ce 43       	brcs	800234ee <adcifa_configure_sequencer+0x272>
			g[i] = p_adcifa_sequencer_conversion_opt[i].gain;
		ADCIFA_configure_sh1gain(g[7], g[6], g[5], g[4], g[3], g[2], g[1], g[0]);
80023528:	fc 78 24 00 	mov	r8,-187392
8002352c:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80023530:	f2 0a 15 1c 	lsl	r10,r9,0x1c
80023534:	ef 39 ff fa 	ld.ub	r9,r7[-6]
80023538:	b9 69       	lsl	r9,0x18
8002353a:	12 4a       	or	r10,r9
8002353c:	ef 39 ff f9 	ld.ub	r9,r7[-7]
80023540:	b5 69       	lsl	r9,0x14
80023542:	12 4a       	or	r10,r9
80023544:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80023548:	b1 69       	lsl	r9,0x10
8002354a:	12 4a       	or	r10,r9
8002354c:	ef 39 ff f7 	ld.ub	r9,r7[-9]
80023550:	ad 69       	lsl	r9,0xc
80023552:	12 4a       	or	r10,r9
80023554:	ef 39 ff f6 	ld.ub	r9,r7[-10]
80023558:	a9 69       	lsl	r9,0x8
8002355a:	12 4a       	or	r10,r9
8002355c:	ef 39 ff f5 	ld.ub	r9,r7[-11]
80023560:	a5 69       	lsl	r9,0x4
80023562:	12 4a       	or	r10,r9
80023564:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80023568:	f5 e9 10 09 	or	r9,r10,r9
8002356c:	91 89       	st.w	r8[0x20],r9

		// Configure Mux for Sequencer 1
		for (i = 0 ; i < p_adcifa_sequencer_opt->convnb; i++) {
8002356e:	30 08       	mov	r8,0
80023570:	ef 68 ff ff 	st.b	r7[-1],r8
80023574:	c2 68       	rjmp	800235c0 <adcifa_configure_sequencer+0x344>
			mp[i] = p_adcifa_sequencer_conversion_opt[i].channel_p;
80023576:	ef 3a ff ff 	ld.ub	r10,r7[-1]
8002357a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8002357e:	12 98       	mov	r8,r9
80023580:	a1 78       	lsl	r8,0x1
80023582:	12 08       	add	r8,r9
80023584:	ee f9 ff d4 	ld.w	r9,r7[-44]
80023588:	f2 08 00 08 	add	r8,r9,r8
8002358c:	11 88       	ld.ub	r8,r8[0x0]
8002358e:	ee 0a 00 09 	add	r9,r7,r10
80023592:	f3 68 ff ec 	st.b	r9[-20],r8
			mn[i] = p_adcifa_sequencer_conversion_opt[i].channel_n;
80023596:	ef 3a ff ff 	ld.ub	r10,r7[-1]
8002359a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8002359e:	12 98       	mov	r8,r9
800235a0:	a1 78       	lsl	r8,0x1
800235a2:	12 08       	add	r8,r9
800235a4:	ee f9 ff d4 	ld.w	r9,r7[-44]
800235a8:	f2 08 00 08 	add	r8,r9,r8
800235ac:	11 98       	ld.ub	r8,r8[0x1]
800235ae:	ee 0a 00 09 	add	r9,r7,r10
800235b2:	f3 68 ff e4 	st.b	r9[-28],r8
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++)
			g[i] = p_adcifa_sequencer_conversion_opt[i].gain;
		ADCIFA_configure_sh1gain(g[7], g[6], g[5], g[4], g[3], g[2], g[1], g[0]);

		// Configure Mux for Sequencer 1
		for (i = 0 ; i < p_adcifa_sequencer_opt->convnb; i++) {
800235b6:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800235ba:	2f f8       	sub	r8,-1
800235bc:	ef 68 ff ff 	st.b	r7[-1],r8
800235c0:	ee f8 ff d8 	ld.w	r8,r7[-40]
800235c4:	11 88       	ld.ub	r8,r8[0x0]
800235c6:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800235ca:	f0 09 18 00 	cp.b	r9,r8
800235ce:	cd 43       	brcs	80023576 <adcifa_configure_sequencer+0x2fa>
			mp[i] = p_adcifa_sequencer_conversion_opt[i].channel_p;
			mn[i] = p_adcifa_sequencer_conversion_opt[i].channel_n;
		}
		ADCIFA_configure_muxsel1p(mp[7], mp[6], mp[5], mp[4], mp[3], mp[2], mp[1], mp[0]);
800235d0:	fc 78 24 00 	mov	r8,-187392
800235d4:	ef 39 ff f3 	ld.ub	r9,r7[-13]
800235d8:	f2 0a 15 18 	lsl	r10,r9,0x18
800235dc:	ef 39 ff f2 	ld.ub	r9,r7[-14]
800235e0:	b1 69       	lsl	r9,0x10
800235e2:	12 4a       	or	r10,r9
800235e4:	ef 39 ff f1 	ld.ub	r9,r7[-15]
800235e8:	a9 69       	lsl	r9,0x8
800235ea:	12 4a       	or	r10,r9
800235ec:	ef 39 ff f0 	ld.ub	r9,r7[-16]
800235f0:	f5 e9 10 09 	or	r9,r10,r9
800235f4:	91 c9       	st.w	r8[0x30],r9
800235f6:	fc 78 24 00 	mov	r8,-187392
800235fa:	ef 39 ff ef 	ld.ub	r9,r7[-17]
800235fe:	f2 0a 15 18 	lsl	r10,r9,0x18
80023602:	ef 39 ff ee 	ld.ub	r9,r7[-18]
80023606:	b1 69       	lsl	r9,0x10
80023608:	12 4a       	or	r10,r9
8002360a:	ef 39 ff ed 	ld.ub	r9,r7[-19]
8002360e:	a9 69       	lsl	r9,0x8
80023610:	12 4a       	or	r10,r9
80023612:	ef 39 ff ec 	ld.ub	r9,r7[-20]
80023616:	f5 e9 10 09 	or	r9,r10,r9
8002361a:	91 a9       	st.w	r8[0x28],r9
		ADCIFA_configure_muxsel1n(mn[7], mn[6], mn[5], mn[4], mn[3], mn[2], mn[1], mn[0]);
8002361c:	fc 78 24 00 	mov	r8,-187392
80023620:	ef 39 ff eb 	ld.ub	r9,r7[-21]
80023624:	f2 0a 15 18 	lsl	r10,r9,0x18
80023628:	ef 39 ff ea 	ld.ub	r9,r7[-22]
8002362c:	b1 69       	lsl	r9,0x10
8002362e:	12 4a       	or	r10,r9
80023630:	ef 39 ff e9 	ld.ub	r9,r7[-23]
80023634:	a9 69       	lsl	r9,0x8
80023636:	12 4a       	or	r10,r9
80023638:	ef 39 ff e8 	ld.ub	r9,r7[-24]
8002363c:	f5 e9 10 09 	or	r9,r10,r9
80023640:	f1 49 00 40 	st.w	r8[64],r9
80023644:	fc 78 24 00 	mov	r8,-187392
80023648:	ef 39 ff e7 	ld.ub	r9,r7[-25]
8002364c:	f2 0a 15 18 	lsl	r10,r9,0x18
80023650:	ef 39 ff e6 	ld.ub	r9,r7[-26]
80023654:	b1 69       	lsl	r9,0x10
80023656:	12 4a       	or	r10,r9
80023658:	ef 39 ff e5 	ld.ub	r9,r7[-27]
8002365c:	a9 69       	lsl	r9,0x8
8002365e:	12 4a       	or	r10,r9
80023660:	ef 39 ff e4 	ld.ub	r9,r7[-28]
80023664:	f5 e9 10 09 	or	r9,r10,r9
80023668:	91 e9       	st.w	r8[0x38],r9
		break;
	default:
		break;
	}
	return ADCIFA_CONFIGURATION_ACCEPTED;
8002366a:	30 18       	mov	r8,1
}
8002366c:	10 9c       	mov	r12,r8
8002366e:	2f 5d       	sub	sp,-44
80023670:	e3 cd 80 80 	ldm	sp++,r7,pc

80023674 <adcifa_configure_window_monitor>:

void adcifa_configure_window_monitor( volatile avr32_adcifa_t * adcifa,
                                      U8 sequencer,
                                      adcifa_window_monitor_opt_t * adc_window_monitor_opt )
{
80023674:	eb cd 40 80 	pushm	r7,lr
80023678:	1a 97       	mov	r7,sp
8002367a:	20 4d       	sub	sp,16
8002367c:	ef 4c ff f8 	st.w	r7[-8],r12
80023680:	16 98       	mov	r8,r11
80023682:	ef 4a ff f0 	st.w	r7[-16],r10
80023686:	ef 68 ff f4 	st.b	r7[-12],r8
	switch (sequencer) {
8002368a:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8002368e:	58 08       	cp.w	r8,0
80023690:	c0 40       	breq	80023698 <adcifa_configure_window_monitor+0x24>
80023692:	58 18       	cp.w	r8,1
80023694:	c3 d0       	breq	8002370e <adcifa_configure_window_monitor+0x9a>
80023696:	c7 68       	rjmp	80023782 <adcifa_configure_window_monitor+0x10e>
	int temp;
	case 0:
		// Configure sequencer 0
		temp = adcifa->imr & AVR32_ADCIFA_WM0_MASK;
80023698:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002369c:	71 e8       	ld.w	r8,r8[0x78]
8002369e:	e2 18 04 00 	andl	r8,0x400,COH
800236a2:	ef 48 ff fc 	st.w	r7[-4],r8
		adcifa->idr = temp;         // disable interrupt if it was enabled
800236a6:	ee f9 ff fc 	ld.w	r9,r7[-4]
800236aa:	ee f8 ff f8 	ld.w	r8,r7[-8]
800236ae:	f1 49 00 74 	st.w	r8[116],r9
		adcifa->wcfg0 = (adc_window_monitor_opt->source_index << AVR32_ADCIFA_WCFG0_SRC_OFFSET)
800236b2:	ee f8 ff f0 	ld.w	r8,r7[-16]
800236b6:	11 98       	ld.ub	r8,r8[0x1]
800236b8:	f0 09 15 1b 	lsl	r9,r8,0x1b
		              | (adc_window_monitor_opt->high_threshold << AVR32_ADCIFA_WCFG0_HT_OFFSET)
800236bc:	ee f8 ff f0 	ld.w	r8,r7[-16]
800236c0:	90 28       	ld.sh	r8,r8[0x4]
800236c2:	5c 78       	castu.h	r8
800236c4:	ad 68       	lsl	r8,0xc
		              | (adc_window_monitor_opt->low_threshold << AVR32_ADCIFA_WCFG0_LT_OFFSET);
800236c6:	10 49       	or	r9,r8
800236c8:	ee f8 ff f0 	ld.w	r8,r7[-16]
800236cc:	90 18       	ld.sh	r8,r8[0x2]
800236ce:	5c 78       	castu.h	r8
	int temp;
	case 0:
		// Configure sequencer 0
		temp = adcifa->imr & AVR32_ADCIFA_WM0_MASK;
		adcifa->idr = temp;         // disable interrupt if it was enabled
		adcifa->wcfg0 = (adc_window_monitor_opt->source_index << AVR32_ADCIFA_WCFG0_SRC_OFFSET)
800236d0:	f3 e8 10 08 	or	r8,r9,r8
800236d4:	10 99       	mov	r9,r8
800236d6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800236da:	f1 49 00 58 	st.w	r8[88],r9
		              | (adc_window_monitor_opt->high_threshold << AVR32_ADCIFA_WCFG0_HT_OFFSET)
		              | (adc_window_monitor_opt->low_threshold << AVR32_ADCIFA_WCFG0_LT_OFFSET);
		// Clear any pending interrupt before setting new mode
		adcifa->scr = AVR32_ADCIFA_WM0_MASK;
800236de:	ee f8 ff f8 	ld.w	r8,r7[-8]
800236e2:	e0 69 04 00 	mov	r9,1024
800236e6:	91 39       	st.w	r8[0xc],r9
		adcifa->wcfg0 |= (adc_window_monitor_opt->mode << AVR32_ADCIFA_WCFG0_WM_OFFSET);
800236e8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800236ec:	71 69       	ld.w	r9,r8[0x58]
800236ee:	ee f8 ff f0 	ld.w	r8,r7[-16]
800236f2:	11 88       	ld.ub	r8,r8[0x0]
800236f4:	b9 68       	lsl	r8,0x18
800236f6:	10 49       	or	r9,r8
800236f8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800236fc:	f1 49 00 58 	st.w	r8[88],r9
		adcifa->ier = temp;         // enable interrupt if it was enabled
80023700:	ee f9 ff fc 	ld.w	r9,r7[-4]
80023704:	ee f8 ff f8 	ld.w	r8,r7[-8]
80023708:	f1 49 00 70 	st.w	r8[112],r9
		break;
8002370c:	c3 b8       	rjmp	80023782 <adcifa_configure_window_monitor+0x10e>
	case 1:
		// Configure sequencer 1
		temp = adcifa->imr & AVR32_ADCIFA_WM1_MASK;
8002370e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80023712:	71 e8       	ld.w	r8,r8[0x78]
80023714:	e2 18 08 00 	andl	r8,0x800,COH
80023718:	ef 48 ff fc 	st.w	r7[-4],r8
		adcifa->idr = temp;         // disable interrupt if it was enabled
8002371c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80023720:	ee f8 ff f8 	ld.w	r8,r7[-8]
80023724:	f1 49 00 74 	st.w	r8[116],r9
		adcifa->wcfg1 = (adc_window_monitor_opt->source_index << AVR32_ADCIFA_WCFG1_SRC_OFFSET)
80023728:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002372c:	11 98       	ld.ub	r8,r8[0x1]
8002372e:	f0 09 15 1b 	lsl	r9,r8,0x1b
		              | (adc_window_monitor_opt->high_threshold << AVR32_ADCIFA_WCFG1_HT_OFFSET)
80023732:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023736:	90 28       	ld.sh	r8,r8[0x4]
80023738:	5c 78       	castu.h	r8
8002373a:	ad 68       	lsl	r8,0xc
		              | (adc_window_monitor_opt->low_threshold << AVR32_ADCIFA_WCFG1_LT_OFFSET);
8002373c:	10 49       	or	r9,r8
8002373e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023742:	90 18       	ld.sh	r8,r8[0x2]
80023744:	5c 78       	castu.h	r8
		break;
	case 1:
		// Configure sequencer 1
		temp = adcifa->imr & AVR32_ADCIFA_WM1_MASK;
		adcifa->idr = temp;         // disable interrupt if it was enabled
		adcifa->wcfg1 = (adc_window_monitor_opt->source_index << AVR32_ADCIFA_WCFG1_SRC_OFFSET)
80023746:	f3 e8 10 08 	or	r8,r9,r8
8002374a:	10 99       	mov	r9,r8
8002374c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80023750:	f1 49 00 5c 	st.w	r8[92],r9
		              | (adc_window_monitor_opt->high_threshold << AVR32_ADCIFA_WCFG1_HT_OFFSET)
		              | (adc_window_monitor_opt->low_threshold << AVR32_ADCIFA_WCFG1_LT_OFFSET);
		// Clear any pending interrupt before setting new mode
		adcifa->scr = AVR32_ADCIFA_WM1_MASK;
80023754:	ee f8 ff f8 	ld.w	r8,r7[-8]
80023758:	e0 69 08 00 	mov	r9,2048
8002375c:	91 39       	st.w	r8[0xc],r9
		adcifa->wcfg1 |= (adc_window_monitor_opt->mode << AVR32_ADCIFA_WCFG1_WM_OFFSET);
8002375e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80023762:	71 79       	ld.w	r9,r8[0x5c]
80023764:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023768:	11 88       	ld.ub	r8,r8[0x0]
8002376a:	b9 68       	lsl	r8,0x18
8002376c:	10 49       	or	r9,r8
8002376e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80023772:	f1 49 00 5c 	st.w	r8[92],r9
		adcifa->ier = temp;         // enable interrupt if it was enabled
80023776:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002377a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002377e:	f1 49 00 70 	st.w	r8[112],r9
		break;
	default:
		break;
	}
}
80023782:	2f cd       	sub	sp,-16
80023784:	e3 cd 80 80 	ldm	sp++,r7,pc

80023788 <adcifa_start_sequencer>:


void adcifa_start_sequencer(volatile avr32_adcifa_t * adcifa, U8 sequencer)
{
80023788:	eb cd 40 80 	pushm	r7,lr
8002378c:	1a 97       	mov	r7,sp
8002378e:	20 2d       	sub	sp,8
80023790:	ef 4c ff fc 	st.w	r7[-4],r12
80023794:	16 98       	mov	r8,r11
80023796:	ef 68 ff f8 	st.b	r7[-8],r8
	// Sanity Check
	Assert( adcifa!=NULL );

	// Switch Sequencer
	switch (sequencer) {
8002379a:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8002379e:	58 18       	cp.w	r8,1
800237a0:	c0 a0       	breq	800237b4 <adcifa_start_sequencer+0x2c>
800237a2:	58 38       	cp.w	r8,3
800237a4:	c0 d0       	breq	800237be <adcifa_start_sequencer+0x36>
800237a6:	58 08       	cp.w	r8,0
800237a8:	c0 f1       	brne	800237c6 <adcifa_start_sequencer+0x3e>
	case ADCIFA_SEQ0:
		ADCIFA_softsoc_sequencer(AVR32_ADCIFA_CR_SOC0_MASK);
800237aa:	fc 78 24 00 	mov	r8,-187392
800237ae:	30 19       	mov	r9,1
800237b0:	91 09       	st.w	r8[0x0],r9
		break;
800237b2:	c0 a8       	rjmp	800237c6 <adcifa_start_sequencer+0x3e>
	case ADCIFA_SEQ1:
		ADCIFA_softsoc_sequencer(AVR32_ADCIFA_CR_SOC1_MASK);
800237b4:	fc 78 24 00 	mov	r8,-187392
800237b8:	30 29       	mov	r9,2
800237ba:	91 09       	st.w	r8[0x0],r9
		break;
800237bc:	c0 58       	rjmp	800237c6 <adcifa_start_sequencer+0x3e>
	case ADCIFA_SEQ0_SEQ1:
		ADCIFA_softsoc_sequencer(AVR32_ADCIFA_CR_SOC0_MASK | AVR32_ADCIFA_CR_SOC1_MASK);
800237be:	fc 78 24 00 	mov	r8,-187392
800237c2:	30 39       	mov	r9,3
800237c4:	91 09       	st.w	r8[0x0],r9
		break;
	default:
		break;
	}
}
800237c6:	2f ed       	sub	sp,-8
800237c8:	e3 cd 80 80 	ldm	sp++,r7,pc

800237cc <adcifa_check_eoc>:


bool adcifa_check_eoc(volatile avr32_adcifa_t * adcifa, U8 sequencer)
{
800237cc:	eb cd 40 80 	pushm	r7,lr
800237d0:	1a 97       	mov	r7,sp
800237d2:	20 2d       	sub	sp,8
800237d4:	ef 4c ff fc 	st.w	r7[-4],r12
800237d8:	16 98       	mov	r8,r11
800237da:	ef 68 ff f8 	st.b	r7[-8],r8
	// Sanity Check
	Assert( adcifa!=NULL );

	// get SR register : EOC bit for channel
	switch (sequencer) {
800237de:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800237e2:	58 08       	cp.w	r8,0
800237e4:	c0 40       	breq	800237ec <adcifa_check_eoc+0x20>
800237e6:	58 18       	cp.w	r8,1
800237e8:	c0 a0       	breq	800237fc <adcifa_check_eoc+0x30>
800237ea:	c1 18       	rjmp	8002380c <adcifa_check_eoc+0x40>
	case 0:
		return ((ADCIFA_is_eoc_sequencer_0()) ? true : false);
800237ec:	fc 78 24 00 	mov	r8,-187392
800237f0:	70 28       	ld.w	r8,r8[0x8]
800237f2:	e2 18 00 02 	andl	r8,0x2,COH
800237f6:	5f 18       	srne	r8
800237f8:	5c 58       	castu.b	r8
800237fa:	c0 a8       	rjmp	8002380e <adcifa_check_eoc+0x42>
	case 1:
		return ((ADCIFA_is_eoc_sequencer_1()) ? true : false);
800237fc:	fc 78 24 00 	mov	r8,-187392
80023800:	70 28       	ld.w	r8,r8[0x8]
80023802:	e2 18 00 20 	andl	r8,0x20,COH
80023806:	5f 18       	srne	r8
80023808:	5c 58       	castu.b	r8
8002380a:	c0 28       	rjmp	8002380e <adcifa_check_eoc+0x42>
	default:
		break;
	}
	return false;
8002380c:	30 08       	mov	r8,0
}
8002380e:	10 9c       	mov	r12,r8
80023810:	2f ed       	sub	sp,-8
80023812:	e3 cd 80 80 	ldm	sp++,r7,pc

80023816 <adcifa_check_eos>:

bool adcifa_check_eos(volatile avr32_adcifa_t * adcifa, U8 sequencer)
{
80023816:	eb cd 40 80 	pushm	r7,lr
8002381a:	1a 97       	mov	r7,sp
8002381c:	20 2d       	sub	sp,8
8002381e:	ef 4c ff fc 	st.w	r7[-4],r12
80023822:	16 98       	mov	r8,r11
80023824:	ef 68 ff f8 	st.b	r7[-8],r8
	// Sanity Check
	Assert( adcifa!=NULL );

	// get SR register : EOS bit for channel
	switch (sequencer) {
80023828:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8002382c:	58 08       	cp.w	r8,0
8002382e:	c0 40       	breq	80023836 <adcifa_check_eos+0x20>
80023830:	58 18       	cp.w	r8,1
80023832:	c0 90       	breq	80023844 <adcifa_check_eos+0x2e>
80023834:	c1 08       	rjmp	80023854 <adcifa_check_eos+0x3e>
	case 0:
		return ((ADCIFA_is_eos_sequencer_0()) ? true : false);
80023836:	fc 78 24 00 	mov	r8,-187392
8002383a:	70 28       	ld.w	r8,r8[0x8]
8002383c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80023840:	5c 58       	castu.b	r8
80023842:	c0 a8       	rjmp	80023856 <adcifa_check_eos+0x40>
	case 1:
		return ((ADCIFA_is_eos_sequencer_1()) ? true : false);
80023844:	fc 78 24 00 	mov	r8,-187392
80023848:	70 28       	ld.w	r8,r8[0x8]
8002384a:	e2 18 00 10 	andl	r8,0x10,COH
8002384e:	5f 18       	srne	r8
80023850:	5c 58       	castu.b	r8
80023852:	c0 28       	rjmp	80023856 <adcifa_check_eos+0x40>
	default:
		break;
	}
	return false;
80023854:	30 08       	mov	r8,0
}
80023856:	10 9c       	mov	r12,r8
80023858:	2f ed       	sub	sp,-8
8002385a:	e3 cd 80 80 	ldm	sp++,r7,pc

8002385e <adcifa_get_values_from_sequencer>:

U8 adcifa_get_values_from_sequencer(volatile avr32_adcifa_t * adcifa,
                                    U8 sequencer,
                                    adcifa_sequencer_opt_t * p_adcifa_sequencer_opt,
                                    S16* adcifa_values)
{
8002385e:	eb cd 40 c0 	pushm	r6-r7,lr
80023862:	1a 97       	mov	r7,sp
80023864:	20 5d       	sub	sp,20
80023866:	4b 46       	lddpc	r6,80023934 <adcifa_get_values_from_sequencer+0xd6>
80023868:	1e 26       	rsub	r6,pc
8002386a:	ef 4c ff f8 	st.w	r7[-8],r12
8002386e:	16 98       	mov	r8,r11
80023870:	ef 4a ff f0 	st.w	r7[-16],r10
80023874:	ef 49 ff ec 	st.w	r7[-20],r9
80023878:	ef 68 ff f4 	st.b	r7[-12],r8
	U8 i;
	// Sanity Check
	Assert( adcifa!=NULL );

	// wait for end of sequence
	if(adcifa_check_eos(adcifa, sequencer) != true)
8002387c:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80023880:	10 9b       	mov	r11,r8
80023882:	ee fc ff f8 	ld.w	r12,r7[-8]
80023886:	f0 16 01 2e 	mcall	r6[1208]
8002388a:	18 98       	mov	r8,r12
8002388c:	ec 18 00 01 	eorl	r8,0x1
80023890:	5c 58       	castu.b	r8
80023892:	c0 30       	breq	80023898 <adcifa_get_values_from_sequencer+0x3a>
		return ADCIFA_STATUS_NOT_COMPLETED;
80023894:	30 38       	mov	r8,3
80023896:	c4 b8       	rjmp	8002392c <adcifa_get_values_from_sequencer+0xce>

	switch (sequencer) {
80023898:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8002389c:	58 08       	cp.w	r8,0
8002389e:	c0 40       	breq	800238a6 <adcifa_get_values_from_sequencer+0x48>
800238a0:	58 18       	cp.w	r8,1
800238a2:	c2 30       	breq	800238e8 <adcifa_get_values_from_sequencer+0x8a>
800238a4:	c4 38       	rjmp	8002392a <adcifa_get_values_from_sequencer+0xcc>
	case 0:
		// Read values from Sequencer 0
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
800238a6:	30 08       	mov	r8,0
800238a8:	ef 68 ff ff 	st.b	r7[-1],r8
800238ac:	c1 58       	rjmp	800238d6 <adcifa_get_values_from_sequencer+0x78>
			adcifa_values[i] = ADCIFA_read_resx_sequencer_0(i);
800238ae:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800238b2:	a1 78       	lsl	r8,0x1
800238b4:	ee f9 ff ec 	ld.w	r9,r7[-20]
800238b8:	10 09       	add	r9,r8
800238ba:	fc 78 24 00 	mov	r8,-187392
800238be:	ef 3a ff ff 	ld.ub	r10,r7[-1]
800238c2:	2d fa       	sub	r10,-33
800238c4:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
800238c8:	5c 88       	casts.h	r8
800238ca:	b2 08       	st.h	r9[0x0],r8
		return ADCIFA_STATUS_NOT_COMPLETED;

	switch (sequencer) {
	case 0:
		// Read values from Sequencer 0
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
800238cc:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800238d0:	2f f8       	sub	r8,-1
800238d2:	ef 68 ff ff 	st.b	r7[-1],r8
800238d6:	ee f8 ff f0 	ld.w	r8,r7[-16]
800238da:	11 88       	ld.ub	r8,r8[0x0]
800238dc:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800238e0:	f0 09 18 00 	cp.b	r9,r8
800238e4:	ce 53       	brcs	800238ae <adcifa_get_values_from_sequencer+0x50>
			adcifa_values[i] = ADCIFA_read_resx_sequencer_0(i);
		}
		break;
800238e6:	c2 28       	rjmp	8002392a <adcifa_get_values_from_sequencer+0xcc>
	case 1:
		// Read values from Sequencer 1
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
800238e8:	30 08       	mov	r8,0
800238ea:	ef 68 ff ff 	st.b	r7[-1],r8
800238ee:	c1 68       	rjmp	8002391a <adcifa_get_values_from_sequencer+0xbc>
			adcifa_values[i] = ADCIFA_read_resx_sequencer_1(i);
800238f0:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800238f4:	a1 78       	lsl	r8,0x1
800238f6:	ee f9 ff ec 	ld.w	r9,r7[-20]
800238fa:	10 09       	add	r9,r8
800238fc:	fc 78 24 00 	mov	r8,-187392
80023900:	ef 3a ff ff 	ld.ub	r10,r7[-1]
80023904:	2f 8a       	sub	r10,-8
80023906:	2d fa       	sub	r10,-33
80023908:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
8002390c:	5c 88       	casts.h	r8
8002390e:	b2 08       	st.h	r9[0x0],r8
			adcifa_values[i] = ADCIFA_read_resx_sequencer_0(i);
		}
		break;
	case 1:
		// Read values from Sequencer 1
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
80023910:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80023914:	2f f8       	sub	r8,-1
80023916:	ef 68 ff ff 	st.b	r7[-1],r8
8002391a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002391e:	11 88       	ld.ub	r8,r8[0x0]
80023920:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80023924:	f0 09 18 00 	cp.b	r9,r8
80023928:	ce 43       	brcs	800238f0 <adcifa_get_values_from_sequencer+0x92>
		break;
	default:
		break;
	}

	return ADCIFA_STATUS_COMPLETED;
8002392a:	30 28       	mov	r8,2
}
8002392c:	10 9c       	mov	r12,r8
8002392e:	2f bd       	sub	sp,-20
80023930:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80023934:	80 02       	ld.sh	r2,r0[0x0]
80023936:	36 ec       	mov	r12,110

80023938 <adcifa_start_itimer>:

void adcifa_start_itimer(volatile avr32_adcifa_t * adcifa,
                         uint32_t timer_count)
{
80023938:	eb cd 40 80 	pushm	r7,lr
8002393c:	1a 97       	mov	r7,sp
8002393e:	20 2d       	sub	sp,8
80023940:	ef 4c ff fc 	st.w	r7[-4],r12
80023944:	ef 4b ff f8 	st.w	r7[-8],r11
	adcifa->itimer = timer_count;
80023948:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002394c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80023950:	f1 49 00 48 	st.w	r8[72],r9
	adcifa->cr = AVR32_ADCIFA_CR_TSTART_MASK;
80023954:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023958:	30 89       	mov	r9,8
8002395a:	91 09       	st.w	r8[0x0],r9
}
8002395c:	2f ed       	sub	sp,-8
8002395e:	e3 cd 80 80 	ldm	sp++,r7,pc

80023962 <adcifa_stop_itimer>:

void adcifa_stop_itimer(volatile avr32_adcifa_t * adcifa)
{
80023962:	eb cd 40 80 	pushm	r7,lr
80023966:	1a 97       	mov	r7,sp
80023968:	20 1d       	sub	sp,4
8002396a:	ef 4c ff fc 	st.w	r7[-4],r12
	adcifa->cr = AVR32_ADCIFA_CR_TSTOP_MASK;
8002396e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023972:	30 49       	mov	r9,4
80023974:	91 09       	st.w	r8[0x0],r9
}
80023976:	2f fd       	sub	sp,-4
80023978:	e3 cd 80 80 	ldm	sp++,r7,pc

8002397c <adcifa_enable_interrupt>:

void adcifa_enable_interrupt(volatile avr32_adcifa_t * adcifa,
                             uint32_t interrupt_flags)
{
8002397c:	eb cd 40 80 	pushm	r7,lr
80023980:	1a 97       	mov	r7,sp
80023982:	20 2d       	sub	sp,8
80023984:	ef 4c ff fc 	st.w	r7[-4],r12
80023988:	ef 4b ff f8 	st.w	r7[-8],r11
	adcifa->ier = interrupt_flags;   // Interrupt Enable Register
8002398c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023990:	ee f9 ff f8 	ld.w	r9,r7[-8]
80023994:	f1 49 00 70 	st.w	r8[112],r9
}
80023998:	2f ed       	sub	sp,-8
8002399a:	e3 cd 80 80 	ldm	sp++,r7,pc

8002399e <adcifa_disable_interrupt>:

void adcifa_disable_interrupt(volatile avr32_adcifa_t * adcifa,
                              uint32_t interrupt_flags)
{
8002399e:	eb cd 40 80 	pushm	r7,lr
800239a2:	1a 97       	mov	r7,sp
800239a4:	20 2d       	sub	sp,8
800239a6:	ef 4c ff fc 	st.w	r7[-4],r12
800239aa:	ef 4b ff f8 	st.w	r7[-8],r11
	adcifa->idr = interrupt_flags;   // Interrupt Disable Register
800239ae:	ee f8 ff fc 	ld.w	r8,r7[-4]
800239b2:	ee f9 ff f8 	ld.w	r9,r7[-8]
800239b6:	f1 49 00 74 	st.w	r8[116],r9
}
800239ba:	2f ed       	sub	sp,-8
800239bc:	e3 cd 80 80 	ldm	sp++,r7,pc

800239c0 <adcifa_clear_interrupt>:

void adcifa_clear_interrupt(volatile avr32_adcifa_t * adcifa,
                            uint32_t interrupt_flags)
{
800239c0:	eb cd 40 80 	pushm	r7,lr
800239c4:	1a 97       	mov	r7,sp
800239c6:	20 2d       	sub	sp,8
800239c8:	ef 4c ff fc 	st.w	r7[-4],r12
800239cc:	ef 4b ff f8 	st.w	r7[-8],r11
	adcifa->scr = interrupt_flags;   // Status Clear Register
800239d0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800239d4:	ee f9 ff f8 	ld.w	r9,r7[-8]
800239d8:	91 39       	st.w	r8[0xc],r9
}
800239da:	2f ed       	sub	sp,-8
800239dc:	e3 cd 80 80 	ldm	sp++,r7,pc

800239e0 <ast_is_busy>:
#include <avr32/io.h>
#include "compiler.h"
#include "ast.h"

static int ast_is_busy(volatile avr32_ast_t *ast)
{
800239e0:	eb cd 40 80 	pushm	r7,lr
800239e4:	1a 97       	mov	r7,sp
800239e6:	20 1d       	sub	sp,4
800239e8:	ef 4c ff fc 	st.w	r7[-4],r12
	return (ast->sr & AVR32_AST_SR_BUSY_MASK) != 0;
800239ec:	ee f8 ff fc 	ld.w	r8,r7[-4]
800239f0:	70 28       	ld.w	r8,r8[0x8]
800239f2:	e6 18 01 00 	andh	r8,0x100,COH
800239f6:	5f 18       	srne	r8
}
800239f8:	10 9c       	mov	r12,r8
800239fa:	2f fd       	sub	sp,-4
800239fc:	e3 cd 80 80 	ldm	sp++,r7,pc

80023a00 <ast_is_clkbusy>:

static int ast_is_clkbusy(volatile avr32_ast_t *ast)
{
80023a00:	eb cd 40 80 	pushm	r7,lr
80023a04:	1a 97       	mov	r7,sp
80023a06:	20 1d       	sub	sp,4
80023a08:	ef 4c ff fc 	st.w	r7[-4],r12
	return (ast->sr & AVR32_AST_SR_CLKBUSY_MASK) != 0;
80023a0c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023a10:	70 28       	ld.w	r8,r8[0x8]
80023a12:	e6 18 10 00 	andh	r8,0x1000,COH
80023a16:	5f 18       	srne	r8
}
80023a18:	10 9c       	mov	r12,r8
80023a1a:	2f fd       	sub	sp,-4
80023a1c:	e3 cd 80 80 	ldm	sp++,r7,pc

80023a20 <ast_init_calendar>:

int ast_init_calendar(volatile avr32_ast_t *ast,
                      unsigned char osc_type,
                      unsigned char psel,
                      ast_calendar_t ast_calendar)
{
80023a20:	eb cd 40 c0 	pushm	r6-r7,lr
80023a24:	1a 97       	mov	r7,sp
80023a26:	20 4d       	sub	sp,16
80023a28:	49 a6       	lddpc	r6,80023a90 <ast_init_calendar+0x70>
80023a2a:	1e 26       	rsub	r6,pc
80023a2c:	ef 4c ff fc 	st.w	r7[-4],r12
80023a30:	14 98       	mov	r8,r10
80023a32:	ef 49 ff f0 	st.w	r7[-16],r9
80023a36:	16 99       	mov	r9,r11
80023a38:	ef 69 ff f8 	st.b	r7[-8],r9
80023a3c:	ef 68 ff f4 	st.b	r7[-12],r8

	while (ast_is_clkbusy(ast));
80023a40:	ee fc ff fc 	ld.w	r12,r7[-4]
80023a44:	cd ef       	rcall	80023a00 <ast_is_clkbusy>
80023a46:	18 98       	mov	r8,r12
80023a48:	58 08       	cp.w	r8,0
80023a4a:	cf b1       	brne	80023a40 <ast_init_calendar+0x20>
	ast->clock = AVR32_AST_CLOCK_CEN_MASK |
		osc_type << AVR32_AST_CLOCK_CSSEL_OFFSET;
80023a4c:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80023a50:	a9 68       	lsl	r8,0x8
                      unsigned char psel,
                      ast_calendar_t ast_calendar)
{

	while (ast_is_clkbusy(ast));
	ast->clock = AVR32_AST_CLOCK_CEN_MASK |
80023a52:	a1 a8       	sbr	r8,0x0
80023a54:	10 99       	mov	r9,r8
80023a56:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023a5a:	f1 49 00 40 	st.w	r8[64],r9
		osc_type << AVR32_AST_CLOCK_CSSEL_OFFSET;

	// Set the new AST configuration
	ast->cr =   AST_MODE_CALENDAR << AVR32_AST_CR_CAL_OFFSET |
		psel << AVR32_AST_CR_PSEL_OFFSET ;
80023a5e:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80023a62:	b1 68       	lsl	r8,0x10
	while (ast_is_clkbusy(ast));
	ast->clock = AVR32_AST_CLOCK_CEN_MASK |
		osc_type << AVR32_AST_CLOCK_CSSEL_OFFSET;

	// Set the new AST configuration
	ast->cr =   AST_MODE_CALENDAR << AVR32_AST_CR_CAL_OFFSET |
80023a64:	a3 a8       	sbr	r8,0x2
80023a66:	10 99       	mov	r9,r8
80023a68:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023a6c:	91 09       	st.w	r8[0x0],r9
		psel << AVR32_AST_CR_PSEL_OFFSET ;

	// Wait until the ast CTRL register is up-to-date
	while (ast_is_busy(ast));
80023a6e:	ee fc ff fc 	ld.w	r12,r7[-4]
80023a72:	cb 7f       	rcall	800239e0 <ast_is_busy>
80023a74:	18 98       	mov	r8,r12
80023a76:	58 08       	cp.w	r8,0
80023a78:	cf b1       	brne	80023a6e <ast_init_calendar+0x4e>

	// Set the calendar
	ast_set_calendar_value(ast, ast_calendar);
80023a7a:	ee fb ff f0 	ld.w	r11,r7[-16]
80023a7e:	ee fc ff fc 	ld.w	r12,r7[-4]
80023a82:	f0 16 01 bd 	mcall	r6[1780]

	return 1;
80023a86:	30 18       	mov	r8,1
}
80023a88:	10 9c       	mov	r12,r8
80023a8a:	2f cd       	sub	sp,-16
80023a8c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80023a90:	80 02       	ld.sh	r2,r0[0x0]
80023a92:	38 ae       	mov	lr,-118

80023a94 <ast_init_counter>:

int ast_init_counter(volatile avr32_ast_t *ast,
                     unsigned char osc_type,
                     unsigned char psel,
                     unsigned long ast_counter)
{
80023a94:	eb cd 40 c0 	pushm	r6-r7,lr
80023a98:	1a 97       	mov	r7,sp
80023a9a:	20 4d       	sub	sp,16
80023a9c:	49 46       	lddpc	r6,80023aec <ast_init_counter+0x58>
80023a9e:	1e 26       	rsub	r6,pc
80023aa0:	ef 4c ff fc 	st.w	r7[-4],r12
80023aa4:	14 98       	mov	r8,r10
80023aa6:	ef 49 ff f0 	st.w	r7[-16],r9
80023aaa:	16 99       	mov	r9,r11
80023aac:	ef 69 ff f8 	st.b	r7[-8],r9
80023ab0:	ef 68 ff f4 	st.b	r7[-12],r8

//	while (ast_is_clkbusy(ast));
	ast->clock = AVR32_AST_CLOCK_CEN_MASK |
		osc_type << AVR32_AST_CLOCK_CSSEL_OFFSET;
80023ab4:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80023ab8:	a9 68       	lsl	r8,0x8
                     unsigned char psel,
                     unsigned long ast_counter)
{

//	while (ast_is_clkbusy(ast));
	ast->clock = AVR32_AST_CLOCK_CEN_MASK |
80023aba:	a1 a8       	sbr	r8,0x0
80023abc:	10 99       	mov	r9,r8
80023abe:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023ac2:	f1 49 00 40 	st.w	r8[64],r9
		osc_type << AVR32_AST_CLOCK_CSSEL_OFFSET;

	// Set the new AST configuration
	ast->cr =   AST_MODE_COUNTER << AVR32_AST_CR_CAL_OFFSET |
80023ac6:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80023aca:	b1 68       	lsl	r8,0x10
80023acc:	10 99       	mov	r9,r8
80023ace:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023ad2:	91 09       	st.w	r8[0x0],r9

	// Wait until the ast CTRL register is up-to-date
//	while (ast_is_busy(ast));

	// Set the calendar
	ast_set_counter_value(ast, ast_counter);
80023ad4:	ee fb ff f0 	ld.w	r11,r7[-16]
80023ad8:	ee fc ff fc 	ld.w	r12,r7[-4]
80023adc:	f0 16 02 11 	mcall	r6[2116]

	return 1;
80023ae0:	30 18       	mov	r8,1
}
80023ae2:	10 9c       	mov	r12,r8
80023ae4:	2f cd       	sub	sp,-16
80023ae6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80023aea:	00 00       	add	r0,r0
80023aec:	80 02       	ld.sh	r2,r0[0x0]
80023aee:	39 22       	mov	r2,-110

80023af0 <ast_enable>:


void ast_enable(volatile avr32_ast_t *ast)
{
80023af0:	eb cd 40 c0 	pushm	r6-r7,lr
80023af4:	1a 97       	mov	r7,sp
80023af6:	20 1d       	sub	sp,4
80023af8:	48 e6       	lddpc	r6,80023b30 <ast_enable+0x40>
80023afa:	1e 26       	rsub	r6,pc
80023afc:	ef 4c ff fc 	st.w	r7[-4],r12
	// Wait until the ast CTRL register is up-to-date
	while (ast_is_busy(ast));
80023b00:	ee fc ff fc 	ld.w	r12,r7[-4]
80023b04:	c6 ef       	rcall	800239e0 <ast_is_busy>
80023b06:	18 98       	mov	r8,r12
80023b08:	58 08       	cp.w	r8,0
80023b0a:	cf b1       	brne	80023b00 <ast_enable+0x10>
	// Enable the RTC
	ast->cr |= AVR32_AST_CR_EN_MASK;
80023b0c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023b10:	70 08       	ld.w	r8,r8[0x0]
80023b12:	10 99       	mov	r9,r8
80023b14:	a1 a9       	sbr	r9,0x0
80023b16:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023b1a:	91 09       	st.w	r8[0x0],r9
	// Wait until write is done
	while (ast_is_busy(ast));
80023b1c:	ee fc ff fc 	ld.w	r12,r7[-4]
80023b20:	c6 0f       	rcall	800239e0 <ast_is_busy>
80023b22:	18 98       	mov	r8,r12
80023b24:	58 08       	cp.w	r8,0
80023b26:	cf b1       	brne	80023b1c <ast_enable+0x2c>
}
80023b28:	2f fd       	sub	sp,-4
80023b2a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80023b2e:	00 00       	add	r0,r0
80023b30:	80 02       	ld.sh	r2,r0[0x0]
80023b32:	39 7e       	mov	lr,-105

80023b34 <ast_set_calendar_value>:

void ast_set_calendar_value(volatile avr32_ast_t *ast,
                            ast_calendar_t ast_calendar)
{
80023b34:	eb cd 40 c0 	pushm	r6-r7,lr
80023b38:	1a 97       	mov	r7,sp
80023b3a:	20 2d       	sub	sp,8
80023b3c:	48 e6       	lddpc	r6,80023b74 <ast_set_calendar_value+0x40>
80023b3e:	1e 26       	rsub	r6,pc
80023b40:	ef 4c ff fc 	st.w	r7[-4],r12
80023b44:	ef 4b ff f8 	st.w	r7[-8],r11
	// Wait until we can write into the VAL register
	while (ast_is_busy(ast));
80023b48:	ee fc ff fc 	ld.w	r12,r7[-4]
80023b4c:	c4 af       	rcall	800239e0 <ast_is_busy>
80023b4e:	18 98       	mov	r8,r12
80023b50:	58 08       	cp.w	r8,0
80023b52:	cf b1       	brne	80023b48 <ast_set_calendar_value+0x14>
	// Set the new val value
	ast->calv = ast_calendar.field;
80023b54:	ee f9 ff f8 	ld.w	r9,r7[-8]
80023b58:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023b5c:	f1 49 00 54 	st.w	r8[84],r9
	// Wait until write is done
	while (ast_is_busy(ast));
80023b60:	ee fc ff fc 	ld.w	r12,r7[-4]
80023b64:	c3 ef       	rcall	800239e0 <ast_is_busy>
80023b66:	18 98       	mov	r8,r12
80023b68:	58 08       	cp.w	r8,0
80023b6a:	cf b1       	brne	80023b60 <ast_set_calendar_value+0x2c>
}
80023b6c:	2f ed       	sub	sp,-8
80023b6e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80023b72:	00 00       	add	r0,r0
80023b74:	80 02       	ld.sh	r2,r0[0x0]
80023b76:	39 c2       	mov	r2,-100

80023b78 <ast_set_counter_value>:

void ast_set_counter_value(volatile avr32_ast_t *ast, unsigned long ast_counter)
{
80023b78:	eb cd 40 c0 	pushm	r6-r7,lr
80023b7c:	1a 97       	mov	r7,sp
80023b7e:	20 2d       	sub	sp,8
80023b80:	48 d6       	lddpc	r6,80023bb4 <ast_set_counter_value+0x3c>
80023b82:	1e 26       	rsub	r6,pc
80023b84:	ef 4c ff fc 	st.w	r7[-4],r12
80023b88:	ef 4b ff f8 	st.w	r7[-8],r11
	// Wait until we can write into the VAL register
	while (ast_is_busy(ast));
80023b8c:	ee fc ff fc 	ld.w	r12,r7[-4]
80023b90:	c2 8f       	rcall	800239e0 <ast_is_busy>
80023b92:	18 98       	mov	r8,r12
80023b94:	58 08       	cp.w	r8,0
80023b96:	cf b1       	brne	80023b8c <ast_set_counter_value+0x14>
	// Set the new val value
	ast->cv = ast_counter;
80023b98:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023b9c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80023ba0:	91 19       	st.w	r8[0x4],r9
	// Wait until write is done
	while (ast_is_busy(ast));
80023ba2:	ee fc ff fc 	ld.w	r12,r7[-4]
80023ba6:	c1 df       	rcall	800239e0 <ast_is_busy>
80023ba8:	18 98       	mov	r8,r12
80023baa:	58 08       	cp.w	r8,0
80023bac:	cf b1       	brne	80023ba2 <ast_set_counter_value+0x2a>
}
80023bae:	2f ed       	sub	sp,-8
80023bb0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80023bb4:	80 02       	ld.sh	r2,r0[0x0]
80023bb6:	3a 06       	mov	r6,-96

80023bb8 <ast_get_calendar_value>:


ast_calendar_t ast_get_calendar_value(volatile avr32_ast_t *ast)
{
80023bb8:	eb cd 40 80 	pushm	r7,lr
80023bbc:	1a 97       	mov	r7,sp
80023bbe:	20 2d       	sub	sp,8
80023bc0:	ef 4c ff f8 	st.w	r7[-8],r12
	ast_calendar_t ast_calendar;
	ast_calendar.field = ast->calv;
80023bc4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80023bc8:	71 58       	ld.w	r8,r8[0x54]
80023bca:	ef 48 ff fc 	st.w	r7[-4],r8
	return ast_calendar;
80023bce:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80023bd2:	10 9c       	mov	r12,r8
80023bd4:	2f ed       	sub	sp,-8
80023bd6:	e3 cd 80 80 	ldm	sp++,r7,pc

80023bda <ast_get_counter_value>:


unsigned long ast_get_counter_value(volatile avr32_ast_t *ast)
{
80023bda:	eb cd 40 80 	pushm	r7,lr
80023bde:	1a 97       	mov	r7,sp
80023be0:	20 1d       	sub	sp,4
80023be2:	ef 4c ff fc 	st.w	r7[-4],r12
	return ast->cv;
80023be6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023bea:	70 18       	ld.w	r8,r8[0x4]
}
80023bec:	10 9c       	mov	r12,r8
80023bee:	2f fd       	sub	sp,-4
80023bf0:	e3 cd 80 80 	ldm	sp++,r7,pc

80023bf4 <ast_set_alarm0_value>:

void ast_set_alarm0_value(volatile avr32_ast_t *ast, U32 alarm_value)
{
80023bf4:	eb cd 40 80 	pushm	r7,lr
80023bf8:	1a 97       	mov	r7,sp
80023bfa:	20 2d       	sub	sp,8
80023bfc:	ef 4c ff fc 	st.w	r7[-4],r12
80023c00:	ef 4b ff f8 	st.w	r7[-8],r11
	// Set the new val value
	ast->ar0 = alarm_value;
80023c04:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023c08:	ee f9 ff f8 	ld.w	r9,r7[-8]
80023c0c:	91 89       	st.w	r8[0x20],r9
}
80023c0e:	2f ed       	sub	sp,-8
80023c10:	e3 cd 80 80 	ldm	sp++,r7,pc

80023c14 <ast_set_alarm1_value>:


void ast_set_alarm1_value(volatile avr32_ast_t *ast, U32 alarm_value)
{
80023c14:	eb cd 40 80 	pushm	r7,lr
80023c18:	1a 97       	mov	r7,sp
80023c1a:	20 2d       	sub	sp,8
80023c1c:	ef 4c ff fc 	st.w	r7[-4],r12
80023c20:	ef 4b ff f8 	st.w	r7[-8],r11
	// Set the new val value
	ast->ar1 = alarm_value;
80023c24:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023c28:	ee f9 ff f8 	ld.w	r9,r7[-8]
80023c2c:	91 99       	st.w	r8[0x24],r9
}
80023c2e:	2f ed       	sub	sp,-8
80023c30:	e3 cd 80 80 	ldm	sp++,r7,pc

80023c34 <ast_enable_alarm0>:


void ast_enable_alarm0(volatile avr32_ast_t *ast)
{
80023c34:	eb cd 40 c0 	pushm	r6-r7,lr
80023c38:	1a 97       	mov	r7,sp
80023c3a:	20 1d       	sub	sp,4
80023c3c:	48 e6       	lddpc	r6,80023c74 <ast_enable_alarm0+0x40>
80023c3e:	1e 26       	rsub	r6,pc
80023c40:	ef 4c ff fc 	st.w	r7[-4],r12
	// Wait until the ast CTRL register is up-to-date
	while (ast_is_busy(ast));
80023c44:	ee fc ff fc 	ld.w	r12,r7[-4]
80023c48:	cc ce       	rcall	800239e0 <ast_is_busy>
80023c4a:	18 98       	mov	r8,r12
80023c4c:	58 08       	cp.w	r8,0
80023c4e:	cf b1       	brne	80023c44 <ast_enable_alarm0+0x10>
	// Enable the RTC
	ast->eve |= AVR32_AST_EVE_ALARM0_MASK;
80023c50:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023c54:	71 28       	ld.w	r8,r8[0x48]
80023c56:	10 99       	mov	r9,r8
80023c58:	a9 a9       	sbr	r9,0x8
80023c5a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023c5e:	f1 49 00 48 	st.w	r8[72],r9
	// Wait until write is done
	while (ast_is_busy(ast));
80023c62:	ee fc ff fc 	ld.w	r12,r7[-4]
80023c66:	cb de       	rcall	800239e0 <ast_is_busy>
80023c68:	18 98       	mov	r8,r12
80023c6a:	58 08       	cp.w	r8,0
80023c6c:	cf b1       	brne	80023c62 <ast_enable_alarm0+0x2e>
}
80023c6e:	2f fd       	sub	sp,-4
80023c70:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80023c74:	80 02       	ld.sh	r2,r0[0x0]
80023c76:	3a c2       	mov	r2,-84

80023c78 <ast_disable_alarm0>:


void ast_disable_alarm0(volatile avr32_ast_t *ast)
{
80023c78:	eb cd 40 c0 	pushm	r6-r7,lr
80023c7c:	1a 97       	mov	r7,sp
80023c7e:	20 1d       	sub	sp,4
80023c80:	48 e6       	lddpc	r6,80023cb8 <ast_disable_alarm0+0x40>
80023c82:	1e 26       	rsub	r6,pc
80023c84:	ef 4c ff fc 	st.w	r7[-4],r12
	// Wait until the ast CTRL register is up-to-date
	while (ast_is_busy(ast));
80023c88:	ee fc ff fc 	ld.w	r12,r7[-4]
80023c8c:	ca ae       	rcall	800239e0 <ast_is_busy>
80023c8e:	18 98       	mov	r8,r12
80023c90:	58 08       	cp.w	r8,0
80023c92:	cf b1       	brne	80023c88 <ast_disable_alarm0+0x10>
	// Enable the RTC
	ast->evd |= AVR32_AST_EVE_ALARM0_MASK;
80023c94:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023c98:	71 38       	ld.w	r8,r8[0x4c]
80023c9a:	10 99       	mov	r9,r8
80023c9c:	a9 a9       	sbr	r9,0x8
80023c9e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023ca2:	f1 49 00 4c 	st.w	r8[76],r9
	// Wait until write is done
	while (ast_is_busy(ast));
80023ca6:	ee fc ff fc 	ld.w	r12,r7[-4]
80023caa:	c9 be       	rcall	800239e0 <ast_is_busy>
80023cac:	18 98       	mov	r8,r12
80023cae:	58 08       	cp.w	r8,0
80023cb0:	cf b1       	brne	80023ca6 <ast_disable_alarm0+0x2e>
}
80023cb2:	2f fd       	sub	sp,-4
80023cb4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80023cb8:	80 02       	ld.sh	r2,r0[0x0]
80023cba:	3b 06       	mov	r6,-80

80023cbc <ast_enable_alarm1>:


void ast_enable_alarm1(volatile avr32_ast_t *ast)
{
80023cbc:	eb cd 40 c0 	pushm	r6-r7,lr
80023cc0:	1a 97       	mov	r7,sp
80023cc2:	20 1d       	sub	sp,4
80023cc4:	48 e6       	lddpc	r6,80023cfc <ast_enable_alarm1+0x40>
80023cc6:	1e 26       	rsub	r6,pc
80023cc8:	ef 4c ff fc 	st.w	r7[-4],r12
	// Wait until the ast CTRL register is up-to-date
	while (ast_is_busy(ast));
80023ccc:	ee fc ff fc 	ld.w	r12,r7[-4]
80023cd0:	c8 8e       	rcall	800239e0 <ast_is_busy>
80023cd2:	18 98       	mov	r8,r12
80023cd4:	58 08       	cp.w	r8,0
80023cd6:	cf b1       	brne	80023ccc <ast_enable_alarm1+0x10>
	// Enable the RTC
	ast->eve |= AVR32_AST_EVE_ALARM1_MASK;
80023cd8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023cdc:	71 28       	ld.w	r8,r8[0x48]
80023cde:	10 99       	mov	r9,r8
80023ce0:	a9 b9       	sbr	r9,0x9
80023ce2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023ce6:	f1 49 00 48 	st.w	r8[72],r9
	// Wait until write is done
	while (ast_is_busy(ast));
80023cea:	ee fc ff fc 	ld.w	r12,r7[-4]
80023cee:	c7 9e       	rcall	800239e0 <ast_is_busy>
80023cf0:	18 98       	mov	r8,r12
80023cf2:	58 08       	cp.w	r8,0
80023cf4:	cf b1       	brne	80023cea <ast_enable_alarm1+0x2e>
}
80023cf6:	2f fd       	sub	sp,-4
80023cf8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80023cfc:	80 02       	ld.sh	r2,r0[0x0]
80023cfe:	3b 4a       	mov	r10,-76

80023d00 <ast_disable_alarm1>:


void ast_disable_alarm1(volatile avr32_ast_t *ast)
{
80023d00:	eb cd 40 c0 	pushm	r6-r7,lr
80023d04:	1a 97       	mov	r7,sp
80023d06:	20 1d       	sub	sp,4
80023d08:	48 e6       	lddpc	r6,80023d40 <ast_disable_alarm1+0x40>
80023d0a:	1e 26       	rsub	r6,pc
80023d0c:	ef 4c ff fc 	st.w	r7[-4],r12
	// Wait until the ast CTRL register is up-to-date
	while (ast_is_busy(ast));
80023d10:	ee fc ff fc 	ld.w	r12,r7[-4]
80023d14:	c6 6e       	rcall	800239e0 <ast_is_busy>
80023d16:	18 98       	mov	r8,r12
80023d18:	58 08       	cp.w	r8,0
80023d1a:	cf b1       	brne	80023d10 <ast_disable_alarm1+0x10>
	// Enable the RTC
	ast->evd |= AVR32_AST_EVE_ALARM1_MASK;
80023d1c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023d20:	71 38       	ld.w	r8,r8[0x4c]
80023d22:	10 99       	mov	r9,r8
80023d24:	a9 b9       	sbr	r9,0x9
80023d26:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023d2a:	f1 49 00 4c 	st.w	r8[76],r9
	// Wait until write is done
	while (ast_is_busy(ast));
80023d2e:	ee fc ff fc 	ld.w	r12,r7[-4]
80023d32:	c5 7e       	rcall	800239e0 <ast_is_busy>
80023d34:	18 98       	mov	r8,r12
80023d36:	58 08       	cp.w	r8,0
80023d38:	cf b1       	brne	80023d2e <ast_disable_alarm1+0x2e>
}
80023d3a:	2f fd       	sub	sp,-4
80023d3c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80023d40:	80 02       	ld.sh	r2,r0[0x0]
80023d42:	3b 8e       	mov	lr,-72

80023d44 <ast_set_periodic0_value>:


void ast_set_periodic0_value(volatile avr32_ast_t *ast, avr32_ast_pir0_t pir)
{
80023d44:	eb cd 40 80 	pushm	r7,lr
80023d48:	1a 97       	mov	r7,sp
80023d4a:	20 2d       	sub	sp,8
80023d4c:	ef 4c ff fc 	st.w	r7[-4],r12
80023d50:	ef 4b ff f8 	st.w	r7[-8],r11
	// Set the new val value
	ast->PIR0 = pir;
80023d54:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023d58:	ee f9 ff f8 	ld.w	r9,r7[-8]
80023d5c:	91 c9       	st.w	r8[0x30],r9
}
80023d5e:	2f ed       	sub	sp,-8
80023d60:	e3 cd 80 80 	ldm	sp++,r7,pc

80023d64 <ast_set_periodic1_value>:


void ast_set_periodic1_value(volatile avr32_ast_t *ast, avr32_ast_pir1_t pir)
{
80023d64:	eb cd 40 80 	pushm	r7,lr
80023d68:	1a 97       	mov	r7,sp
80023d6a:	20 2d       	sub	sp,8
80023d6c:	ef 4c ff fc 	st.w	r7[-4],r12
80023d70:	ef 4b ff f8 	st.w	r7[-8],r11
	// Set the new val value
	ast->PIR1 = pir;
80023d74:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023d78:	ee f9 ff f8 	ld.w	r9,r7[-8]
80023d7c:	91 d9       	st.w	r8[0x34],r9
}
80023d7e:	2f ed       	sub	sp,-8
80023d80:	e3 cd 80 80 	ldm	sp++,r7,pc

80023d84 <ast_enable_periodic0>:


void ast_enable_periodic0(volatile avr32_ast_t *ast)
{
80023d84:	eb cd 40 c0 	pushm	r6-r7,lr
80023d88:	1a 97       	mov	r7,sp
80023d8a:	20 1d       	sub	sp,4
80023d8c:	48 e6       	lddpc	r6,80023dc4 <ast_enable_periodic0+0x40>
80023d8e:	1e 26       	rsub	r6,pc
80023d90:	ef 4c ff fc 	st.w	r7[-4],r12
	// Wait until the ast CTRL register is up-to-date
	while (ast_is_busy(ast));
80023d94:	ee fc ff fc 	ld.w	r12,r7[-4]
80023d98:	c2 4e       	rcall	800239e0 <ast_is_busy>
80023d9a:	18 98       	mov	r8,r12
80023d9c:	58 08       	cp.w	r8,0
80023d9e:	cf b1       	brne	80023d94 <ast_enable_periodic0+0x10>
	// Enable the RTC
	ast->eve |= AVR32_AST_EVE_PER0_MASK;
80023da0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023da4:	71 28       	ld.w	r8,r8[0x48]
80023da6:	10 99       	mov	r9,r8
80023da8:	b1 a9       	sbr	r9,0x10
80023daa:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023dae:	f1 49 00 48 	st.w	r8[72],r9
	// Wait until write is done
	while (ast_is_busy(ast));
80023db2:	ee fc ff fc 	ld.w	r12,r7[-4]
80023db6:	c1 5e       	rcall	800239e0 <ast_is_busy>
80023db8:	18 98       	mov	r8,r12
80023dba:	58 08       	cp.w	r8,0
80023dbc:	cf b1       	brne	80023db2 <ast_enable_periodic0+0x2e>
}
80023dbe:	2f fd       	sub	sp,-4
80023dc0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80023dc4:	80 02       	ld.sh	r2,r0[0x0]
80023dc6:	3c 12       	mov	r2,-63

80023dc8 <ast_disable_periodic0>:


void ast_disable_periodic0(volatile avr32_ast_t *ast)
{
80023dc8:	eb cd 40 c0 	pushm	r6-r7,lr
80023dcc:	1a 97       	mov	r7,sp
80023dce:	20 1d       	sub	sp,4
80023dd0:	48 f6       	lddpc	r6,80023e0c <ast_disable_periodic0+0x44>
80023dd2:	1e 26       	rsub	r6,pc
80023dd4:	ef 4c ff fc 	st.w	r7[-4],r12
	// Wait until the ast CTRL register is up-to-date
	while (ast_is_busy(ast));
80023dd8:	ee fc ff fc 	ld.w	r12,r7[-4]
80023ddc:	c0 2e       	rcall	800239e0 <ast_is_busy>
80023dde:	18 98       	mov	r8,r12
80023de0:	58 08       	cp.w	r8,0
80023de2:	cf b1       	brne	80023dd8 <ast_disable_periodic0+0x10>
	// Enable the RTC
	ast->evd |= AVR32_AST_EVE_PER0_MASK;
80023de4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023de8:	71 38       	ld.w	r8,r8[0x4c]
80023dea:	10 99       	mov	r9,r8
80023dec:	b1 a9       	sbr	r9,0x10
80023dee:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023df2:	f1 49 00 4c 	st.w	r8[76],r9
	// Wait until write is done
	while (ast_is_busy(ast));
80023df6:	ee fc ff fc 	ld.w	r12,r7[-4]
80023dfa:	fe b0 fd f3 	rcall	800239e0 <ast_is_busy>
80023dfe:	18 98       	mov	r8,r12
80023e00:	58 08       	cp.w	r8,0
80023e02:	cf a1       	brne	80023df6 <ast_disable_periodic0+0x2e>
}
80023e04:	2f fd       	sub	sp,-4
80023e06:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80023e0a:	00 00       	add	r0,r0
80023e0c:	80 02       	ld.sh	r2,r0[0x0]
80023e0e:	3c 56       	mov	r6,-59

80023e10 <ast_enable_periodic1>:


void ast_enable_periodic1(volatile avr32_ast_t *ast)
{
80023e10:	eb cd 40 c0 	pushm	r6-r7,lr
80023e14:	1a 97       	mov	r7,sp
80023e16:	20 1d       	sub	sp,4
80023e18:	48 f6       	lddpc	r6,80023e54 <ast_enable_periodic1+0x44>
80023e1a:	1e 26       	rsub	r6,pc
80023e1c:	ef 4c ff fc 	st.w	r7[-4],r12
	// Wait until the ast CTRL register is up-to-date
	while (ast_is_busy(ast));
80023e20:	ee fc ff fc 	ld.w	r12,r7[-4]
80023e24:	fe b0 fd de 	rcall	800239e0 <ast_is_busy>
80023e28:	18 98       	mov	r8,r12
80023e2a:	58 08       	cp.w	r8,0
80023e2c:	cf a1       	brne	80023e20 <ast_enable_periodic1+0x10>
	// Enable the RTC
	ast->eve |= AVR32_AST_EVE_PER1_MASK;
80023e2e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023e32:	71 28       	ld.w	r8,r8[0x48]
80023e34:	10 99       	mov	r9,r8
80023e36:	b1 b9       	sbr	r9,0x11
80023e38:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023e3c:	f1 49 00 48 	st.w	r8[72],r9
	// Wait until write is done
	while (ast_is_busy(ast));
80023e40:	ee fc ff fc 	ld.w	r12,r7[-4]
80023e44:	fe b0 fd ce 	rcall	800239e0 <ast_is_busy>
80023e48:	18 98       	mov	r8,r12
80023e4a:	58 08       	cp.w	r8,0
80023e4c:	cf a1       	brne	80023e40 <ast_enable_periodic1+0x30>
}
80023e4e:	2f fd       	sub	sp,-4
80023e50:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80023e54:	80 02       	ld.sh	r2,r0[0x0]
80023e56:	3c 9e       	mov	lr,-55

80023e58 <ast_disable_periodic1>:


void ast_disable_periodic1(volatile avr32_ast_t *ast)
{
80023e58:	eb cd 40 c0 	pushm	r6-r7,lr
80023e5c:	1a 97       	mov	r7,sp
80023e5e:	20 1d       	sub	sp,4
80023e60:	48 f6       	lddpc	r6,80023e9c <ast_disable_periodic1+0x44>
80023e62:	1e 26       	rsub	r6,pc
80023e64:	ef 4c ff fc 	st.w	r7[-4],r12
	// Wait until the ast CTRL register is up-to-date
	while (ast_is_busy(ast));
80023e68:	ee fc ff fc 	ld.w	r12,r7[-4]
80023e6c:	fe b0 fd ba 	rcall	800239e0 <ast_is_busy>
80023e70:	18 98       	mov	r8,r12
80023e72:	58 08       	cp.w	r8,0
80023e74:	cf a1       	brne	80023e68 <ast_disable_periodic1+0x10>
	// Enable the RTC
	ast->evd |= AVR32_AST_EVE_PER0_MASK;
80023e76:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023e7a:	71 38       	ld.w	r8,r8[0x4c]
80023e7c:	10 99       	mov	r9,r8
80023e7e:	b1 a9       	sbr	r9,0x10
80023e80:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023e84:	f1 49 00 4c 	st.w	r8[76],r9
	// Wait until write is done
	while (ast_is_busy(ast));
80023e88:	ee fc ff fc 	ld.w	r12,r7[-4]
80023e8c:	fe b0 fd aa 	rcall	800239e0 <ast_is_busy>
80023e90:	18 98       	mov	r8,r12
80023e92:	58 08       	cp.w	r8,0
80023e94:	cf a1       	brne	80023e88 <ast_disable_periodic1+0x30>
}
80023e96:	2f fd       	sub	sp,-4
80023e98:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80023e9c:	80 02       	ld.sh	r2,r0[0x0]
80023e9e:	3c e6       	mov	r6,-50

80023ea0 <dacifb_us_delay>:
 *
 * \param us Number of microseconds to wait.
 * \param hsb_mhz_up Rounded-up HSB frequency in MHz.
 */
static void dacifb_us_delay(us, hsb_mhz_up)
{
80023ea0:	eb cd 40 cc 	pushm	r2-r3,r6-r7,lr
80023ea4:	1a 97       	mov	r7,sp
80023ea6:	20 cd       	sub	sp,48
80023ea8:	4d 46       	lddpc	r6,80023ff8 <dacifb_us_delay+0x158>
80023eaa:	1e 26       	rsub	r6,pc
80023eac:	ef 4c ff d4 	st.w	r7[-44],r12
80023eb0:	ef 4b ff d0 	st.w	r7[-48],r11
	t_cpu_time timer;
    cpu_set_timeout( cpu_us_2_cy(us, hsb_mhz_up), &timer ); // timeout in 10 ms
80023eb4:	ee fa ff d0 	ld.w	r10,r7[-48]
80023eb8:	ee fb ff d4 	ld.w	r11,r7[-44]
80023ebc:	ef 4b ff e8 	st.w	r7[-24],r11
80023ec0:	ef 4a ff e4 	st.w	r7[-28],r10
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
80023ec4:	ee f2 ff e8 	ld.w	r2,r7[-24]
80023ec8:	30 03       	mov	r3,0
80023eca:	ee f8 ff e4 	ld.w	r8,r7[-28]
80023ece:	30 09       	mov	r9,0
80023ed0:	e6 08 02 4a 	mul	r10,r3,r8
80023ed4:	f2 02 02 4b 	mul	r11,r9,r2
80023ed8:	16 0a       	add	r10,r11
80023eda:	e4 08 06 48 	mulu.d	r8,r2,r8
80023ede:	12 0a       	add	r10,r9
80023ee0:	14 99       	mov	r9,r10
80023ee2:	ee 7a 42 3f 	mov	r10,999999
80023ee6:	30 0b       	mov	r11,0
80023ee8:	f0 0a 00 0a 	add	r10,r8,r10
80023eec:	f2 0b 00 4b 	adc	r11,r9,r11
80023ef0:	ee 78 42 40 	mov	r8,1000000
80023ef4:	30 09       	mov	r9,0
80023ef6:	f0 16 00 f7 	mcall	r6[988]
80023efa:	14 98       	mov	r8,r10
80023efc:	16 99       	mov	r9,r11
80023efe:	ef 48 ff f0 	st.w	r7[-16],r8
80023f02:	ee c8 00 28 	sub	r8,r7,40
80023f06:	ef 48 ff ec 	st.w	r7[-20],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80023f0a:	e1 b8 00 42 	mfsr	r8,0x108
80023f0e:	10 99       	mov	r9,r8
80023f10:	ee f8 ff ec 	ld.w	r8,r7[-20]
80023f14:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80023f16:	ee f8 ff ec 	ld.w	r8,r7[-20]
80023f1a:	70 09       	ld.w	r9,r8[0x0]
80023f1c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023f20:	10 09       	add	r9,r8
80023f22:	ee f8 ff ec 	ld.w	r8,r7[-20]
80023f26:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80023f28:	ee f9 ff ec 	ld.w	r9,r7[-20]
80023f2c:	30 08       	mov	r8,0
80023f2e:	f3 68 00 08 	st.b	r9[8],r8
80023f32:	ee c8 00 28 	sub	r8,r7,40
80023f36:	ef 48 ff f4 	st.w	r7[-12],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80023f3a:	e1 b8 00 42 	mfsr	r8,0x108
80023f3e:	ef 48 ff f8 	st.w	r7[-8],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80023f42:	ee f8 ff f4 	ld.w	r8,r7[-12]
80023f46:	f1 39 00 08 	ld.ub	r9,r8[8]
80023f4a:	30 28       	mov	r8,2
80023f4c:	f0 09 18 00 	cp.b	r9,r8
80023f50:	c0 31       	brne	80023f56 <dacifb_us_delay+0xb6>
    return false;
80023f52:	30 08       	mov	r8,0
80023f54:	c4 38       	rjmp	80023fda <dacifb_us_delay+0x13a>

  // Test if the timeout as already occured.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80023f56:	ee f8 ff f4 	ld.w	r8,r7[-12]
80023f5a:	f1 39 00 08 	ld.ub	r9,r8[8]
80023f5e:	30 18       	mov	r8,1
80023f60:	f0 09 18 00 	cp.b	r9,r8
80023f64:	c0 31       	brne	80023f6a <dacifb_us_delay+0xca>
    return true;
80023f66:	30 18       	mov	r8,1
80023f68:	c3 98       	rjmp	80023fda <dacifb_us_delay+0x13a>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80023f6a:	ee f8 ff f4 	ld.w	r8,r7[-12]
80023f6e:	70 09       	ld.w	r9,r8[0x0]
80023f70:	ee f8 ff f4 	ld.w	r8,r7[-12]
80023f74:	70 18       	ld.w	r8,r8[0x4]
80023f76:	10 39       	cp.w	r9,r8
80023f78:	e0 88 00 1a 	brls	80023fac <dacifb_us_delay+0x10c>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80023f7c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80023f80:	70 08       	ld.w	r8,r8[0x0]
80023f82:	ee f9 ff f8 	ld.w	r9,r7[-8]
80023f86:	10 39       	cp.w	r9,r8
80023f88:	c1 02       	brcc	80023fa8 <dacifb_us_delay+0x108>
80023f8a:	ee f8 ff f4 	ld.w	r8,r7[-12]
80023f8e:	70 18       	ld.w	r8,r8[0x4]
80023f90:	ee f9 ff f8 	ld.w	r9,r7[-8]
80023f94:	10 39       	cp.w	r9,r8
80023f96:	e0 88 00 09 	brls	80023fa8 <dacifb_us_delay+0x108>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80023f9a:	ee f9 ff f4 	ld.w	r9,r7[-12]
80023f9e:	30 18       	mov	r8,1
80023fa0:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80023fa4:	30 18       	mov	r8,1
80023fa6:	c1 a8       	rjmp	80023fda <dacifb_us_delay+0x13a>
    }
    return false;
80023fa8:	30 08       	mov	r8,0
80023faa:	c1 88       	rjmp	80023fda <dacifb_us_delay+0x13a>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80023fac:	ee f8 ff f4 	ld.w	r8,r7[-12]
80023fb0:	70 08       	ld.w	r8,r8[0x0]
80023fb2:	ee f9 ff f8 	ld.w	r9,r7[-8]
80023fb6:	10 39       	cp.w	r9,r8
80023fb8:	c0 93       	brcs	80023fca <dacifb_us_delay+0x12a>
80023fba:	ee f8 ff f4 	ld.w	r8,r7[-12]
80023fbe:	70 18       	ld.w	r8,r8[0x4]
80023fc0:	ee f9 ff f8 	ld.w	r9,r7[-8]
80023fc4:	10 39       	cp.w	r9,r8
80023fc6:	e0 88 00 09 	brls	80023fd8 <dacifb_us_delay+0x138>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80023fca:	ee f9 ff f4 	ld.w	r9,r7[-12]
80023fce:	30 18       	mov	r8,1
80023fd0:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80023fd4:	30 18       	mov	r8,1
80023fd6:	c0 28       	rjmp	80023fda <dacifb_us_delay+0x13a>
    }
    return false;
80023fd8:	30 08       	mov	r8,0
    while(! cpu_is_timeout(&timer) );
80023fda:	58 08       	cp.w	r8,0
80023fdc:	ca b0       	breq	80023f32 <dacifb_us_delay+0x92>
80023fde:	ee c8 00 28 	sub	r8,r7,40
80023fe2:	ef 48 ff fc 	st.w	r7[-4],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void cpu_stop_timeout(t_cpu_time *cpu_time)
{
  cpu_time->timer_state = CPU_TIMER_STATE_STOPPED;
80023fe6:	ee f9 ff fc 	ld.w	r9,r7[-4]
80023fea:	30 28       	mov	r8,2
80023fec:	f3 68 00 08 	st.b	r9[8],r8
    cpu_stop_timeout(&timer);
}
80023ff0:	2f 4d       	sub	sp,-48
80023ff2:	e3 cd 80 cc 	ldm	sp++,r2-r3,r6-r7,pc
80023ff6:	00 00       	add	r0,r0
80023ff8:	80 02       	ld.sh	r2,r0[0x0]
80023ffa:	3d 2e       	mov	lr,-46

80023ffc <dacifb_get_calibration_data>:
 */

void dacifb_get_calibration_data( volatile avr32_dacifb_t * dacifb,
                                dacifb_opt_t * p_dacifb_opt,
                                U8 instance)
{
80023ffc:	eb cd 40 80 	pushm	r7,lr
80024000:	1a 97       	mov	r7,sp
80024002:	20 5d       	sub	sp,20
80024004:	ef 4c ff f4 	st.w	r7[-12],r12
80024008:	ef 4b ff f0 	st.w	r7[-16],r11
8002400c:	14 98       	mov	r8,r10
8002400e:	ef 68 ff ec 	st.b	r7[-20],r8
  {
    p_dacifb_opt->offset_calibration_value = ((*calibration_data >> 16) & 0x000000FF);
    p_dacifb_opt->gain_calibration_value = ((*calibration_data >> 24) & 0x000000FF);    
  }
#else
  unsigned int* calibration_data_0 = (unsigned int*)AVR32_FLASHC_CALIBRATION_FOURTH_WORD_ADDRESS;
80024012:	e0 68 02 0c 	mov	r8,524
80024016:	ea 18 80 80 	orh	r8,0x8080
8002401a:	ef 48 ff f8 	st.w	r7[-8],r8
  unsigned int* calibration_data_1 = (unsigned int*)AVR32_FLASHC_CALIBRATION_FIVETH_WORD_ADDRESS;
8002401e:	e0 68 02 14 	mov	r8,532
80024022:	ea 18 80 80 	orh	r8,0x8080
80024026:	ef 48 ff fc 	st.w	r7[-4],r8
  if (instance == 0)
8002402a:	ef 39 ff ec 	ld.ub	r9,r7[-20]
8002402e:	30 08       	mov	r8,0
80024030:	f0 09 18 00 	cp.b	r9,r8
80024034:	c1 71       	brne	80024062 <dacifb_get_calibration_data+0x66>
  {
    p_dacifb_opt->offset_calibration_value = (*calibration_data_0 & 0x000001FF);
80024036:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002403a:	70 08       	ld.w	r8,r8[0x0]
8002403c:	5c 88       	casts.h	r8
8002403e:	5c 88       	casts.h	r8
80024040:	f1 d8 c0 09 	bfextu	r8,r8,0x0,0x9
80024044:	ee f9 ff f0 	ld.w	r9,r7[-16]
80024048:	b2 28       	st.h	r9[0x4],r8
    p_dacifb_opt->gain_calibration_value = ((*calibration_data_0 >> 16) & 0x000000FF);  
8002404a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002404e:	70 08       	ld.w	r8,r8[0x0]
80024050:	b1 88       	lsr	r8,0x10
80024052:	5c 88       	casts.h	r8
80024054:	5c 88       	casts.h	r8
80024056:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
8002405a:	ee f9 ff f0 	ld.w	r9,r7[-16]
8002405e:	b2 18       	st.h	r9[0x2],r8
80024060:	c1 68       	rjmp	8002408c <dacifb_get_calibration_data+0x90>
  }
  else
  {
    p_dacifb_opt->offset_calibration_value = ((*calibration_data_1) & 0x000001FF);
80024062:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024066:	70 08       	ld.w	r8,r8[0x0]
80024068:	5c 88       	casts.h	r8
8002406a:	5c 88       	casts.h	r8
8002406c:	f1 d8 c0 09 	bfextu	r8,r8,0x0,0x9
80024070:	ee f9 ff f0 	ld.w	r9,r7[-16]
80024074:	b2 28       	st.h	r9[0x4],r8
    p_dacifb_opt->gain_calibration_value = ((*calibration_data_1 >> 16) & 0x000000FF);    
80024076:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002407a:	70 08       	ld.w	r8,r8[0x0]
8002407c:	b1 88       	lsr	r8,0x10
8002407e:	5c 88       	casts.h	r8
80024080:	5c 88       	casts.h	r8
80024082:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
80024086:	ee f9 ff f0 	ld.w	r9,r7[-16]
8002408a:	b2 18       	st.h	r9[0x2],r8
  }
#endif  
}
8002408c:	2f bd       	sub	sp,-20
8002408e:	e3 cd 80 80 	ldm	sp++,r7,pc

80024092 <dacifb_configure>:

U8 dacifb_configure(volatile avr32_dacifb_t * dacifb,
                           dacifb_opt_t * p_dacifb_opt,
                           U32 pb_hz)
{
80024092:	eb cd 40 80 	pushm	r7,lr
80024096:	1a 97       	mov	r7,sp
80024098:	20 5d       	sub	sp,20
8002409a:	ef 4c ff f4 	st.w	r7[-12],r12
8002409e:	ef 4b ff f0 	st.w	r7[-16],r11
800240a2:	ef 4a ff ec 	st.w	r7[-20],r10
  U32 prescaler = 0;
800240a6:	30 08       	mov	r8,0
800240a8:	ef 48 ff f8 	st.w	r7[-8],r8
  U32 counter = 0;
800240ac:	30 08       	mov	r8,0
800240ae:	ef 48 ff fc 	st.w	r7[-4],r8
  
  Assert( dacifb!=NULL );
  
  // Calibration of DAC
  dacifb->goc = (((p_dacifb_opt->offset_calibration_value<<AVR32_DACIFB_GOC_OCR_OFFSET)&AVR32_DACIFB_GOC_OCR_MASK)|
800240b2:	ee f8 ff f0 	ld.w	r8,r7[-16]
800240b6:	90 28       	ld.sh	r8,r8[0x4]
800240b8:	5c 78       	castu.h	r8
800240ba:	f3 d8 c0 09 	bfextu	r9,r8,0x0,0x9
                 ((p_dacifb_opt->gain_calibration_value<<AVR32_DACIFB_GOC_GCR_OFFSET)&AVR32_DACIFB_GOC_GCR_MASK));
800240be:	ee f8 ff f0 	ld.w	r8,r7[-16]
800240c2:	90 18       	ld.sh	r8,r8[0x2]
800240c4:	5c 78       	castu.h	r8
800240c6:	b1 68       	lsl	r8,0x10
800240c8:	e6 18 01 ff 	andh	r8,0x1ff,COH
  U32 counter = 0;
  
  Assert( dacifb!=NULL );
  
  // Calibration of DAC
  dacifb->goc = (((p_dacifb_opt->offset_calibration_value<<AVR32_DACIFB_GOC_OCR_OFFSET)&AVR32_DACIFB_GOC_OCR_MASK)|
800240cc:	f3 e8 10 08 	or	r8,r9,r8
800240d0:	10 99       	mov	r9,r8
800240d2:	ee f8 ff f4 	ld.w	r8,r7[-12]
800240d6:	91 d9       	st.w	r8[0x34],r9
                 ((p_dacifb_opt->gain_calibration_value<<AVR32_DACIFB_GOC_GCR_OFFSET)&AVR32_DACIFB_GOC_GCR_MASK));
  
  // Compute PRESC field
  prescaler = 31 - clz(pb_hz/p_dacifb_opt->prescaler_clock_hz);  
800240d8:	ee f8 ff f0 	ld.w	r8,r7[-16]
800240dc:	70 29       	ld.w	r9,r8[0x8]
800240de:	ee f8 ff ec 	ld.w	r8,r7[-20]
800240e2:	f0 09 0d 08 	divu	r8,r8,r9
800240e6:	f0 08 12 00 	clz	r8,r8
800240ea:	f0 08 11 1f 	rsub	r8,r8,31
800240ee:	ef 48 ff f8 	st.w	r7[-8],r8

  // Check PRESC value
  if (prescaler > (1<<AVR32_DACIFB_TCR_PRESC_SIZE))
800240f2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800240f6:	58 88       	cp.w	r8,8
800240f8:	e0 88 00 04 	brls	80024100 <dacifb_configure+0x6e>
    return DACIFB_CONFIGURATION_REFUSED;
800240fc:	30 08       	mov	r8,0
800240fe:	c6 d8       	rjmp	800241d8 <dacifb_configure+0x146>

  // Update prescaler_clock_hz value
  p_dacifb_opt->prescaler_clock_hz = pb_hz / (1<<prescaler);
80024100:	ee f8 ff f8 	ld.w	r8,r7[-8]
80024104:	ee f9 ff ec 	ld.w	r9,r7[-20]
80024108:	f2 08 0a 49 	lsr	r9,r9,r8
8002410c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80024110:	91 29       	st.w	r8[0x8],r9
    
  // Compute CHI field  ( minimum value of 2us) 
  counter = (p_dacifb_opt->prescaler_clock_hz/DACIFB_CHI_MIN_VALUE);
80024112:	ee f8 ff f0 	ld.w	r8,r7[-16]
80024116:	70 29       	ld.w	r9,r8[0x8]
80024118:	e0 68 de 83 	mov	r8,56963
8002411c:	ea 18 43 1b 	orh	r8,0x431b
80024120:	f2 08 06 48 	mulu.d	r8,r9,r8
80024124:	f2 08 16 11 	lsr	r8,r9,0x11
80024128:	ef 48 ff fc 	st.w	r7[-4],r8
  
  // Check CHI value
  if (counter > (1<<AVR32_DACIFB_TCR_CHI_SIZE))
8002412c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024130:	e0 48 00 80 	cp.w	r8,128
80024134:	e0 88 00 04 	brls	8002413c <dacifb_configure+0xaa>
    return DACIFB_CONFIGURATION_REFUSED;
80024138:	30 08       	mov	r8,0
8002413a:	c4 f8       	rjmp	800241d8 <dacifb_configure+0x146>
  
  
  // Sampling Rate Frequency
  dacifb->tcr |= ( ((prescaler<<AVR32_DACIFB_TCR_PRESC_OFFSET)&AVR32_DACIFB_TCR_PRESC_MASK)|
8002413c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80024140:	70 39       	ld.w	r9,r8[0xc]
80024142:	ee f8 ff f8 	ld.w	r8,r7[-8]
80024146:	b9 68       	lsl	r8,0x18
80024148:	10 9a       	mov	r10,r8
8002414a:	e6 1a 07 00 	andh	r10,0x700,COH
                  ((counter<<AVR32_DACIFB_TCR_CHI_OFFSET)&AVR32_DACIFB_TCR_CHI_MASK) );
8002414e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024152:	b1 68       	lsl	r8,0x10
80024154:	e6 18 00 7f 	andh	r8,0x7f,COH
  if (counter > (1<<AVR32_DACIFB_TCR_CHI_SIZE))
    return DACIFB_CONFIGURATION_REFUSED;
  
  
  // Sampling Rate Frequency
  dacifb->tcr |= ( ((prescaler<<AVR32_DACIFB_TCR_PRESC_OFFSET)&AVR32_DACIFB_TCR_PRESC_MASK)|
80024158:	f5 e8 10 08 	or	r8,r10,r8
8002415c:	10 49       	or	r9,r8
8002415e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80024162:	91 39       	st.w	r8[0xc],r9
                  ((counter<<AVR32_DACIFB_TCR_CHI_OFFSET)&AVR32_DACIFB_TCR_CHI_MASK) );
  
  // Channel Selection
  dacifb->cfr |= ((p_dacifb_opt->channel_selection<<AVR32_DACIFB_CFR_CHC_OFFSET)&AVR32_DACIFB_CFR_CHC_MASK);
80024164:	ee f8 ff f4 	ld.w	r8,r7[-12]
80024168:	70 19       	ld.w	r9,r8[0x4]
8002416a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002416e:	11 98       	ld.ub	r8,r8[0x1]
80024170:	b9 68       	lsl	r8,0x18
80024172:	e6 18 03 00 	andh	r8,0x300,COH
80024176:	10 49       	or	r9,r8
80024178:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002417c:	91 19       	st.w	r8[0x4],r9
    
  // Reference Selection
  dacifb->cfr |= ((p_dacifb_opt->reference <<AVR32_DACIFB_CFR_REF_OFFSET)&AVR32_DACIFB_CFR_REF_MASK);
8002417e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80024182:	70 19       	ld.w	r9,r8[0x4]
80024184:	ee f8 ff f0 	ld.w	r8,r7[-16]
80024188:	11 88       	ld.ub	r8,r8[0x0]
8002418a:	a9 68       	lsl	r8,0x8
8002418c:	e2 18 01 00 	andl	r8,0x100,COH
80024190:	10 49       	or	r9,r8
80024192:	ee f8 ff f4 	ld.w	r8,r7[-12]
80024196:	91 19       	st.w	r8[0x4],r9

  // Dual Data
  dacifb->cfr |= ((p_dacifb_opt->dual<<AVR32_DACIFB_CFR_DDA_OFFSET)&AVR32_DACIFB_CFR_DDA_MASK);
80024198:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002419c:	70 19       	ld.w	r9,r8[0x4]
8002419e:	ee f8 ff f0 	ld.w	r8,r7[-16]
800241a2:	11 f8       	ld.ub	r8,r8[0x7]
800241a4:	a1 78       	lsl	r8,0x1
800241a6:	e2 18 00 02 	andl	r8,0x2,COH
800241aa:	10 49       	or	r9,r8
800241ac:	ee f8 ff f4 	ld.w	r8,r7[-12]
800241b0:	91 19       	st.w	r8[0x4],r9
  
  // Low Power Mode
  dacifb->cfr |= ((p_dacifb_opt->low_power <<AVR32_DACIFB_CFR_LP_OFFSET)&AVR32_DACIFB_CFR_LP_MASK);
800241b2:	ee f8 ff f4 	ld.w	r8,r7[-12]
800241b6:	70 19       	ld.w	r9,r8[0x4]
800241b8:	ee f8 ff f0 	ld.w	r8,r7[-16]
800241bc:	11 e8       	ld.ub	r8,r8[0x6]
800241be:	10 49       	or	r9,r8
800241c0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800241c4:	91 19       	st.w	r8[0x4],r9
  
  // Enable DAC
  dacifb->cr |= AVR32_DACIFB_CR_EN_MASK;
800241c6:	ee f8 ff f4 	ld.w	r8,r7[-12]
800241ca:	70 08       	ld.w	r8,r8[0x0]
800241cc:	10 99       	mov	r9,r8
800241ce:	a1 a9       	sbr	r9,0x0
800241d0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800241d4:	91 09       	st.w	r8[0x0],r9
  
  return DACIFB_CONFIGURATION_ACCEPTED;
800241d6:	30 18       	mov	r8,1
}
800241d8:	10 9c       	mov	r12,r8
800241da:	2f bd       	sub	sp,-20
800241dc:	e3 cd 80 80 	ldm	sp++,r7,pc

800241e0 <dacifb_configure_channel>:

U8 dacifb_configure_channel( volatile avr32_dacifb_t * dacifb,
                             U8 channel,
                             dacifb_channel_opt_t * p_dacifb_channel_opt,
                             U32 prescaler_clock_hz)
{
800241e0:	eb cd 40 80 	pushm	r7,lr
800241e4:	1a 97       	mov	r7,sp
800241e6:	20 7d       	sub	sp,28
800241e8:	ef 4c ff f0 	st.w	r7[-16],r12
800241ec:	16 98       	mov	r8,r11
800241ee:	ef 4a ff e8 	st.w	r7[-24],r10
800241f2:	ef 49 ff e4 	st.w	r7[-28],r9
800241f6:	ef 68 ff ec 	st.b	r7[-20],r8
  U32 prescaler_min = 0;
800241fa:	30 08       	mov	r8,0
800241fc:	ef 48 ff f4 	st.w	r7[-12],r8
  U32 prescaler_max = 0;
80024200:	30 08       	mov	r8,0
80024202:	ef 48 ff f8 	st.w	r7[-8],r8
  U32 prescaler = 0;
80024206:	30 08       	mov	r8,0
80024208:	ef 48 ff fc 	st.w	r7[-4],r8
  
  Assert( dacifb!=NULL );
  
  // Auto-refresh Mode
  if (p_dacifb_channel_opt->auto_refresh_mode == true)
8002420c:	ee f8 ff e8 	ld.w	r8,r7[-24]
80024210:	11 88       	ld.ub	r8,r8[0x0]
80024212:	58 08       	cp.w	r8,0
80024214:	c2 40       	breq	8002425c <dacifb_configure_channel+0x7c>
  {
    switch(channel)
80024216:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8002421a:	58 28       	cp.w	r8,2
8002421c:	c0 e0       	breq	80024238 <dacifb_configure_channel+0x58>
8002421e:	58 38       	cp.w	r8,3
80024220:	c1 50       	breq	8002424a <dacifb_configure_channel+0x6a>
80024222:	58 18       	cp.w	r8,1
80024224:	c1 c1       	brne	8002425c <dacifb_configure_channel+0x7c>
    {
      case DACIFB_CHANNEL_SELECTION_A:
           dacifb->cr |= (AVR32_DACIFB_CR_ARAE_MASK);      
80024226:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002422a:	70 08       	ld.w	r8,r8[0x0]
8002422c:	10 99       	mov	r9,r8
8002422e:	bb a9       	sbr	r9,0x1a
80024230:	ee f8 ff f0 	ld.w	r8,r7[-16]
80024234:	91 09       	st.w	r8[0x0],r9
        break;
80024236:	c1 38       	rjmp	8002425c <dacifb_configure_channel+0x7c>
      case DACIFB_CHANNEL_SELECTION_B:
           dacifb->cr |= (AVR32_DACIFB_CR_ARBE_MASK );
80024238:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002423c:	70 08       	ld.w	r8,r8[0x0]
8002423e:	10 99       	mov	r9,r8
80024240:	bb b9       	sbr	r9,0x1b
80024242:	ee f8 ff f0 	ld.w	r8,r7[-16]
80024246:	91 09       	st.w	r8[0x0],r9
        break;  
80024248:	c0 a8       	rjmp	8002425c <dacifb_configure_channel+0x7c>
      case DACIFB_CHANNEL_SELECTION_AB:
           dacifb->cr |= (AVR32_DACIFB_CR_ARAE_MASK)|(AVR32_DACIFB_CR_ARBE_MASK );
8002424a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002424e:	70 08       	ld.w	r8,r8[0x0]
80024250:	10 99       	mov	r9,r8
80024252:	ea 19 0c 00 	orh	r9,0xc00
80024256:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002425a:	91 09       	st.w	r8[0x0],r9
        break;  
    }
  }
  
  // Compute CHRA/CHRB fields  ( min value of 25us) 
  prescaler_min = 31 - clz(prescaler_clock_hz/DACIFB_CHRx_MIN_VALUE); 
8002425c:	ee f9 ff e4 	ld.w	r9,r7[-28]
80024260:	e0 68 17 59 	mov	r8,5977
80024264:	ea 18 d1 b7 	orh	r8,0xd1b7
80024268:	f2 08 06 48 	mulu.d	r8,r9,r8
8002426c:	f2 08 16 0f 	lsr	r8,r9,0xf
80024270:	f0 08 12 00 	clz	r8,r8
80024274:	f0 08 11 1f 	rsub	r8,r8,31
80024278:	ef 48 ff f4 	st.w	r7[-12],r8
  if (prescaler_min > 0) prescaler_min --;
8002427c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80024280:	58 08       	cp.w	r8,0
80024282:	c0 60       	breq	8002428e <dacifb_configure_channel+0xae>
80024284:	ee f8 ff f4 	ld.w	r8,r7[-12]
80024288:	20 18       	sub	r8,1
8002428a:	ef 48 ff f4 	st.w	r7[-12],r8
  
  // Check CHRA/CHRB fields
  if ( (prescaler_min > (1<<AVR32_DACIFB_TCR_CHRA_SIZE)) ||
8002428e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80024292:	59 08       	cp.w	r8,16
80024294:	e0 8b 00 07 	brhi	800242a2 <dacifb_configure_channel+0xc2>
80024298:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002429c:	59 08       	cp.w	r8,16
8002429e:	e0 88 00 05 	brls	800242a8 <dacifb_configure_channel+0xc8>
       (prescaler_min > (1<<AVR32_DACIFB_TCR_CHRB_SIZE))  )
    return DACIFB_CONFIGURATION_REFUSED;
800242a2:	30 08       	mov	r8,0
800242a4:	e0 8f 01 87 	bral	800245b2 <dacifb_configure_channel+0x3d2>
  
  // Compute CHRA/CHRB fields  ( max value of 35us) 
  prescaler_max = 31 - clz(prescaler_clock_hz/DACIFB_CHRx_MAX_VALUE); 
800242a8:	ee f9 ff e4 	ld.w	r9,r7[-28]
800242ac:	e0 68 27 59 	mov	r8,10073
800242b0:	ea 18 fb a9 	orh	r8,0xfba9
800242b4:	f2 08 06 48 	mulu.d	r8,r9,r8
800242b8:	f2 08 16 0f 	lsr	r8,r9,0xf
800242bc:	f0 08 12 00 	clz	r8,r8
800242c0:	f0 08 11 1f 	rsub	r8,r8,31
800242c4:	ef 48 ff f8 	st.w	r7[-8],r8
  if (prescaler_max > 0) prescaler_max --;
800242c8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800242cc:	58 08       	cp.w	r8,0
800242ce:	c0 60       	breq	800242da <dacifb_configure_channel+0xfa>
800242d0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800242d4:	20 18       	sub	r8,1
800242d6:	ef 48 ff f8 	st.w	r7[-8],r8
  
  // Check CHRA/CHRB fields
  if ( (prescaler_max > (1<<AVR32_DACIFB_TCR_CHRA_SIZE)) ||
800242da:	ee f8 ff f8 	ld.w	r8,r7[-8]
800242de:	59 08       	cp.w	r8,16
800242e0:	e0 8b 00 07 	brhi	800242ee <dacifb_configure_channel+0x10e>
800242e4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800242e8:	59 08       	cp.w	r8,16
800242ea:	e0 88 00 04 	brls	800242f2 <dacifb_configure_channel+0x112>
       (prescaler_max > (1<<AVR32_DACIFB_TCR_CHRB_SIZE))  )
    return DACIFB_CONFIGURATION_REFUSED;      
800242ee:	30 08       	mov	r8,0
800242f0:	c6 19       	rjmp	800245b2 <dacifb_configure_channel+0x3d2>
      
  // Find value for CHRA/CHRB in the range min/max values 25us/35us and stop if it is not possible.
  prescaler = 0;
800242f2:	30 08       	mov	r8,0
800242f4:	ef 48 ff fc 	st.w	r7[-4],r8
  while ((prescaler<<1) < prescaler_min)
800242f8:	c0 68       	rjmp	80024304 <dacifb_configure_channel+0x124>
  {
      prescaler++;
800242fa:	ee f8 ff fc 	ld.w	r8,r7[-4]
800242fe:	2f f8       	sub	r8,-1
80024300:	ef 48 ff fc 	st.w	r7[-4],r8
       (prescaler_max > (1<<AVR32_DACIFB_TCR_CHRB_SIZE))  )
    return DACIFB_CONFIGURATION_REFUSED;      
      
  // Find value for CHRA/CHRB in the range min/max values 25us/35us and stop if it is not possible.
  prescaler = 0;
  while ((prescaler<<1) < prescaler_min)
80024304:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024308:	f0 09 15 01 	lsl	r9,r8,0x1
8002430c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80024310:	10 39       	cp.w	r9,r8
80024312:	cf 43       	brcs	800242fa <dacifb_configure_channel+0x11a>
  {
      prescaler++;
  } 
  // If value found is out of range, configuration refused 
  if ((prescaler<<1) > prescaler_max)  
80024314:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024318:	f0 09 15 01 	lsl	r9,r8,0x1
8002431c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80024320:	10 39       	cp.w	r9,r8
80024322:	e0 88 00 04 	brls	8002432a <dacifb_configure_channel+0x14a>
    return DACIFB_CONFIGURATION_REFUSED;    
80024326:	30 08       	mov	r8,0
80024328:	c4 59       	rjmp	800245b2 <dacifb_configure_channel+0x3d2>
    
  // Refresh Time 
  switch(channel)
8002432a:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8002432e:	58 28       	cp.w	r8,2
80024330:	c1 10       	breq	80024352 <dacifb_configure_channel+0x172>
80024332:	58 38       	cp.w	r8,3
80024334:	c1 c0       	breq	8002436c <dacifb_configure_channel+0x18c>
80024336:	58 18       	cp.w	r8,1
80024338:	c2 c1       	brne	80024390 <dacifb_configure_channel+0x1b0>
  {
    case DACIFB_CHANNEL_SELECTION_A:
         dacifb->tcr |= ((prescaler<<AVR32_DACIFB_TCR_CHRA_OFFSET)&AVR32_DACIFB_TCR_CHRA_MASK);      
8002433a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002433e:	70 39       	ld.w	r9,r8[0xc]
80024340:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024344:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80024348:	10 49       	or	r9,r8
8002434a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002434e:	91 39       	st.w	r8[0xc],r9
      break;
80024350:	c2 08       	rjmp	80024390 <dacifb_configure_channel+0x1b0>
    case DACIFB_CHANNEL_SELECTION_B:
         dacifb->tcr |= ((prescaler<<AVR32_DACIFB_TCR_CHRB_OFFSET)&AVR32_DACIFB_TCR_CHRB_MASK);
80024352:	ee f8 ff f0 	ld.w	r8,r7[-16]
80024356:	70 39       	ld.w	r9,r8[0xc]
80024358:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002435c:	a9 68       	lsl	r8,0x8
8002435e:	e2 18 0f 00 	andl	r8,0xf00,COH
80024362:	10 49       	or	r9,r8
80024364:	ee f8 ff f0 	ld.w	r8,r7[-16]
80024368:	91 39       	st.w	r8[0xc],r9
      break;  
8002436a:	c1 38       	rjmp	80024390 <dacifb_configure_channel+0x1b0>
    case DACIFB_CHANNEL_SELECTION_AB:
         dacifb->tcr |= ( ((prescaler<<AVR32_DACIFB_TCR_CHRA_OFFSET)&AVR32_DACIFB_TCR_CHRA_MASK) |
8002436c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80024370:	70 39       	ld.w	r9,r8[0xc]
80024372:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024376:	f5 d8 c0 04 	bfextu	r10,r8,0x0,0x4
                          ((prescaler<<AVR32_DACIFB_TCR_CHRB_OFFSET)&AVR32_DACIFB_TCR_CHRB_MASK) );
8002437a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002437e:	a9 68       	lsl	r8,0x8
80024380:	e2 18 0f 00 	andl	r8,0xf00,COH
      break;
    case DACIFB_CHANNEL_SELECTION_B:
         dacifb->tcr |= ((prescaler<<AVR32_DACIFB_TCR_CHRB_OFFSET)&AVR32_DACIFB_TCR_CHRB_MASK);
      break;  
    case DACIFB_CHANNEL_SELECTION_AB:
         dacifb->tcr |= ( ((prescaler<<AVR32_DACIFB_TCR_CHRA_OFFSET)&AVR32_DACIFB_TCR_CHRA_MASK) |
80024384:	f5 e8 10 08 	or	r8,r10,r8
80024388:	10 49       	or	r9,r8
8002438a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002438e:	91 39       	st.w	r8[0xc],r9
                          ((prescaler<<AVR32_DACIFB_TCR_CHRB_OFFSET)&AVR32_DACIFB_TCR_CHRB_MASK) );
      break;
  }

  // Trigger Mode
  switch(channel)
80024390:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80024394:	58 28       	cp.w	r8,2
80024396:	c3 30       	breq	800243fc <dacifb_configure_channel+0x21c>
80024398:	58 38       	cp.w	r8,3
8002439a:	c5 e0       	breq	80024456 <dacifb_configure_channel+0x276>
8002439c:	58 18       	cp.w	r8,1
8002439e:	e0 81 00 8f 	brne	800244bc <dacifb_configure_channel+0x2dc>
  {
    case DACIFB_CHANNEL_SELECTION_A:
         if (p_dacifb_channel_opt->trigger_mode!=DACIFB_TRIGGER_MODE_MANUAL)
800243a2:	ee f8 ff e8 	ld.w	r8,r7[-24]
800243a6:	11 98       	ld.ub	r8,r8[0x1]
800243a8:	58 08       	cp.w	r8,0
800243aa:	c0 90       	breq	800243bc <dacifb_configure_channel+0x1dc>
         {
             dacifb->cfr |= (AVR32_DACIFB_CFR_AAE_MASK);
800243ac:	ee f8 ff f0 	ld.w	r8,r7[-16]
800243b0:	70 18       	ld.w	r8,r8[0x4]
800243b2:	10 99       	mov	r9,r8
800243b4:	b1 a9       	sbr	r9,0x10
800243b6:	ee f8 ff f0 	ld.w	r8,r7[-16]
800243ba:	91 19       	st.w	r8[0x4],r9
         }
         if (p_dacifb_channel_opt->trigger_mode==DACIFB_TRIGGER_MODE_EVENT)
800243bc:	ee f8 ff e8 	ld.w	r8,r7[-24]
800243c0:	11 99       	ld.ub	r9,r8[0x1]
800243c2:	30 28       	mov	r8,2
800243c4:	f0 09 18 00 	cp.b	r9,r8
800243c8:	c0 a1       	brne	800243dc <dacifb_configure_channel+0x1fc>
         {
           dacifb->ecr |= (AVR32_DACIFB_ECR_ESLA_MASK);
800243ca:	ee f8 ff f0 	ld.w	r8,r7[-16]
800243ce:	70 28       	ld.w	r8,r8[0x8]
800243d0:	10 99       	mov	r9,r8
800243d2:	a1 a9       	sbr	r9,0x0
800243d4:	ee f8 ff f0 	ld.w	r8,r7[-16]
800243d8:	91 29       	st.w	r8[0x8],r9
         }
         else if (p_dacifb_channel_opt->trigger_mode==DACIFB_TRIGGER_MODE_TIMER)
         {
           dacifb->cr |= (AVR32_DACIFB_CR_TRAE_MASK);
         }
      break;
800243da:	c7 18       	rjmp	800244bc <dacifb_configure_channel+0x2dc>
         }
         if (p_dacifb_channel_opt->trigger_mode==DACIFB_TRIGGER_MODE_EVENT)
         {
           dacifb->ecr |= (AVR32_DACIFB_ECR_ESLA_MASK);
         }
         else if (p_dacifb_channel_opt->trigger_mode==DACIFB_TRIGGER_MODE_TIMER)
800243dc:	ee f8 ff e8 	ld.w	r8,r7[-24]
800243e0:	11 99       	ld.ub	r9,r8[0x1]
800243e2:	30 18       	mov	r8,1
800243e4:	f0 09 18 00 	cp.b	r9,r8
800243e8:	c6 71       	brne	800244b6 <dacifb_configure_channel+0x2d6>
         {
           dacifb->cr |= (AVR32_DACIFB_CR_TRAE_MASK);
800243ea:	ee f8 ff f0 	ld.w	r8,r7[-16]
800243ee:	70 08       	ld.w	r8,r8[0x0]
800243f0:	10 99       	mov	r9,r8
800243f2:	b9 a9       	sbr	r9,0x18
800243f4:	ee f8 ff f0 	ld.w	r8,r7[-16]
800243f8:	91 09       	st.w	r8[0x0],r9
         }
      break;
800243fa:	c6 18       	rjmp	800244bc <dacifb_configure_channel+0x2dc>
    case DACIFB_CHANNEL_SELECTION_B:
         if (p_dacifb_channel_opt->trigger_mode!=DACIFB_TRIGGER_MODE_MANUAL)
800243fc:	ee f8 ff e8 	ld.w	r8,r7[-24]
80024400:	11 98       	ld.ub	r8,r8[0x1]
80024402:	58 08       	cp.w	r8,0
80024404:	c0 90       	breq	80024416 <dacifb_configure_channel+0x236>
         {
             dacifb->cfr |= (AVR32_DACIFB_CFR_ABE_MASK);
80024406:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002440a:	70 18       	ld.w	r8,r8[0x4]
8002440c:	10 99       	mov	r9,r8
8002440e:	b1 b9       	sbr	r9,0x11
80024410:	ee f8 ff f0 	ld.w	r8,r7[-16]
80024414:	91 19       	st.w	r8[0x4],r9
         }
         if (p_dacifb_channel_opt->trigger_mode==DACIFB_TRIGGER_MODE_EVENT)
80024416:	ee f8 ff e8 	ld.w	r8,r7[-24]
8002441a:	11 99       	ld.ub	r9,r8[0x1]
8002441c:	30 28       	mov	r8,2
8002441e:	f0 09 18 00 	cp.b	r9,r8
80024422:	c0 a1       	brne	80024436 <dacifb_configure_channel+0x256>
         {
           dacifb->ecr |= (AVR32_DACIFB_ECR_ESLB_MASK);
80024424:	ee f8 ff f0 	ld.w	r8,r7[-16]
80024428:	70 28       	ld.w	r8,r8[0x8]
8002442a:	10 99       	mov	r9,r8
8002442c:	a9 a9       	sbr	r9,0x8
8002442e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80024432:	91 29       	st.w	r8[0x8],r9
         }
         else if (p_dacifb_channel_opt->trigger_mode==DACIFB_TRIGGER_MODE_TIMER)
         {
           dacifb->cr |= (AVR32_DACIFB_CR_TRBE_MASK);
         }
      break;    
80024434:	c4 48       	rjmp	800244bc <dacifb_configure_channel+0x2dc>
         }
         if (p_dacifb_channel_opt->trigger_mode==DACIFB_TRIGGER_MODE_EVENT)
         {
           dacifb->ecr |= (AVR32_DACIFB_ECR_ESLB_MASK);
         }
         else if (p_dacifb_channel_opt->trigger_mode==DACIFB_TRIGGER_MODE_TIMER)
80024436:	ee f8 ff e8 	ld.w	r8,r7[-24]
8002443a:	11 99       	ld.ub	r9,r8[0x1]
8002443c:	30 18       	mov	r8,1
8002443e:	f0 09 18 00 	cp.b	r9,r8
80024442:	c3 c1       	brne	800244ba <dacifb_configure_channel+0x2da>
         {
           dacifb->cr |= (AVR32_DACIFB_CR_TRBE_MASK);
80024444:	ee f8 ff f0 	ld.w	r8,r7[-16]
80024448:	70 08       	ld.w	r8,r8[0x0]
8002444a:	10 99       	mov	r9,r8
8002444c:	b9 b9       	sbr	r9,0x19
8002444e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80024452:	91 09       	st.w	r8[0x0],r9
         }
      break;    
80024454:	c3 48       	rjmp	800244bc <dacifb_configure_channel+0x2dc>
    case DACIFB_CHANNEL_SELECTION_AB:
         if (p_dacifb_channel_opt->trigger_mode!=DACIFB_TRIGGER_MODE_MANUAL)
80024456:	ee f8 ff e8 	ld.w	r8,r7[-24]
8002445a:	11 98       	ld.ub	r8,r8[0x1]
8002445c:	58 08       	cp.w	r8,0
8002445e:	c0 a0       	breq	80024472 <dacifb_configure_channel+0x292>
         {
             dacifb->cfr |= (AVR32_DACIFB_CFR_AAE_MASK)|(AVR32_DACIFB_CFR_ABE_MASK);
80024460:	ee f8 ff f0 	ld.w	r8,r7[-16]
80024464:	70 18       	ld.w	r8,r8[0x4]
80024466:	10 99       	mov	r9,r8
80024468:	ea 19 00 03 	orh	r9,0x3
8002446c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80024470:	91 19       	st.w	r8[0x4],r9
         }
         if (p_dacifb_channel_opt->trigger_mode==DACIFB_TRIGGER_MODE_EVENT)
80024472:	ee f8 ff e8 	ld.w	r8,r7[-24]
80024476:	11 99       	ld.ub	r9,r8[0x1]
80024478:	30 28       	mov	r8,2
8002447a:	f0 09 18 00 	cp.b	r9,r8
8002447e:	c0 b1       	brne	80024494 <dacifb_configure_channel+0x2b4>
         {
           dacifb->ecr |= (AVR32_DACIFB_ECR_ESLA_MASK)|(AVR32_DACIFB_ECR_ESLB_MASK);
80024480:	ee f8 ff f0 	ld.w	r8,r7[-16]
80024484:	70 28       	ld.w	r8,r8[0x8]
80024486:	10 99       	mov	r9,r8
80024488:	e8 19 01 01 	orl	r9,0x101
8002448c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80024490:	91 29       	st.w	r8[0x8],r9
80024492:	c1 58       	rjmp	800244bc <dacifb_configure_channel+0x2dc>
         }
         else if (p_dacifb_channel_opt->trigger_mode==DACIFB_TRIGGER_MODE_TIMER)
80024494:	ee f8 ff e8 	ld.w	r8,r7[-24]
80024498:	11 99       	ld.ub	r9,r8[0x1]
8002449a:	30 18       	mov	r8,1
8002449c:	f0 09 18 00 	cp.b	r9,r8
800244a0:	c0 e1       	brne	800244bc <dacifb_configure_channel+0x2dc>
         {
           dacifb->cr  |= (AVR32_DACIFB_CR_TRAE_MASK)|(AVR32_DACIFB_CR_TRBE_MASK);
800244a2:	ee f8 ff f0 	ld.w	r8,r7[-16]
800244a6:	70 08       	ld.w	r8,r8[0x0]
800244a8:	10 99       	mov	r9,r8
800244aa:	ea 19 03 00 	orh	r9,0x300
800244ae:	ee f8 ff f0 	ld.w	r8,r7[-16]
800244b2:	91 09       	st.w	r8[0x0],r9
800244b4:	c0 48       	rjmp	800244bc <dacifb_configure_channel+0x2dc>
         }
         else if (p_dacifb_channel_opt->trigger_mode==DACIFB_TRIGGER_MODE_TIMER)
         {
           dacifb->cr |= (AVR32_DACIFB_CR_TRAE_MASK);
         }
      break;
800244b6:	d7 03       	nop
800244b8:	c0 28       	rjmp	800244bc <dacifb_configure_channel+0x2dc>
         }
         else if (p_dacifb_channel_opt->trigger_mode==DACIFB_TRIGGER_MODE_TIMER)
         {
           dacifb->cr |= (AVR32_DACIFB_CR_TRBE_MASK);
         }
      break;    
800244ba:	d7 03       	nop
      break;  
  }
  
  
  // Left Adjust/ Shift Value / Data Rounding
  switch(channel)
800244bc:	ef 38 ff ec 	ld.ub	r8,r7[-20]
800244c0:	58 28       	cp.w	r8,2
800244c2:	c2 20       	breq	80024506 <dacifb_configure_channel+0x326>
800244c4:	58 38       	cp.w	r8,3
800244c6:	c3 d0       	breq	80024540 <dacifb_configure_channel+0x360>
800244c8:	58 18       	cp.w	r8,1
800244ca:	c7 31       	brne	800245b0 <dacifb_configure_channel+0x3d0>
  {
    case DACIFB_CHANNEL_SELECTION_A:
         dacifb->drca |= (((p_dacifb_channel_opt->left_adjustment<<AVR32_DACIFB_DRCA_DSD_OFFSET)&AVR32_DACIFB_DRCA_DSD_MASK) |
800244cc:	ee f8 ff f0 	ld.w	r8,r7[-16]
800244d0:	70 99       	ld.w	r9,r8[0x24]
800244d2:	ee f8 ff e8 	ld.w	r8,r7[-24]
800244d6:	11 a8       	ld.ub	r8,r8[0x2]
800244d8:	ab 78       	lsl	r8,0xb
800244da:	10 9a       	mov	r10,r8
800244dc:	e2 1a 08 00 	andl	r10,0x800,COH
                         ((p_dacifb_channel_opt->data_shift<<AVR32_DACIFB_DRCA_DSV_OFFSET)&AVR32_DACIFB_DRCA_DSV_MASK) |
800244e0:	ee f8 ff e8 	ld.w	r8,r7[-24]
800244e4:	11 b8       	ld.ub	r8,r8[0x3]
800244e6:	a9 68       	lsl	r8,0x8
800244e8:	e2 18 07 00 	andl	r8,0x700,COH
800244ec:	10 4a       	or	r10,r8
                         ((p_dacifb_channel_opt->data_round_enable<<AVR32_DACIFB_DRCA_DRN_OFFSET)&AVR32_DACIFB_DRCA_DRN_MASK));      
800244ee:	ee f8 ff e8 	ld.w	r8,r7[-24]
800244f2:	11 c8       	ld.ub	r8,r8[0x4]
800244f4:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
  
  // Left Adjust/ Shift Value / Data Rounding
  switch(channel)
  {
    case DACIFB_CHANNEL_SELECTION_A:
         dacifb->drca |= (((p_dacifb_channel_opt->left_adjustment<<AVR32_DACIFB_DRCA_DSD_OFFSET)&AVR32_DACIFB_DRCA_DSD_MASK) |
800244f8:	f5 e8 10 08 	or	r8,r10,r8
800244fc:	10 49       	or	r9,r8
800244fe:	ee f8 ff f0 	ld.w	r8,r7[-16]
80024502:	91 99       	st.w	r8[0x24],r9
                         ((p_dacifb_channel_opt->data_shift<<AVR32_DACIFB_DRCA_DSV_OFFSET)&AVR32_DACIFB_DRCA_DSV_MASK) |
                         ((p_dacifb_channel_opt->data_round_enable<<AVR32_DACIFB_DRCA_DRN_OFFSET)&AVR32_DACIFB_DRCA_DRN_MASK));      
      break;
80024504:	c5 68       	rjmp	800245b0 <dacifb_configure_channel+0x3d0>
    case DACIFB_CHANNEL_SELECTION_B:
         dacifb->drcb |= (((p_dacifb_channel_opt->left_adjustment<<AVR32_DACIFB_DRCB_DSD_OFFSET)&AVR32_DACIFB_DRCB_DSD_MASK) |
80024506:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002450a:	70 a9       	ld.w	r9,r8[0x28]
8002450c:	ee f8 ff e8 	ld.w	r8,r7[-24]
80024510:	11 a8       	ld.ub	r8,r8[0x2]
80024512:	ab 78       	lsl	r8,0xb
80024514:	10 9a       	mov	r10,r8
80024516:	e2 1a 08 00 	andl	r10,0x800,COH
                         ((p_dacifb_channel_opt->data_shift<<AVR32_DACIFB_DRCB_DSV_OFFSET)&AVR32_DACIFB_DRCB_DSV_MASK) |
8002451a:	ee f8 ff e8 	ld.w	r8,r7[-24]
8002451e:	11 b8       	ld.ub	r8,r8[0x3]
80024520:	a9 68       	lsl	r8,0x8
80024522:	e2 18 07 00 	andl	r8,0x700,COH
80024526:	10 4a       	or	r10,r8
                         ((p_dacifb_channel_opt->data_round_enable<<AVR32_DACIFB_DRCB_DRN_OFFSET)&AVR32_DACIFB_DRCB_DRN_MASK));  
80024528:	ee f8 ff e8 	ld.w	r8,r7[-24]
8002452c:	11 c8       	ld.ub	r8,r8[0x4]
8002452e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
         dacifb->drca |= (((p_dacifb_channel_opt->left_adjustment<<AVR32_DACIFB_DRCA_DSD_OFFSET)&AVR32_DACIFB_DRCA_DSD_MASK) |
                         ((p_dacifb_channel_opt->data_shift<<AVR32_DACIFB_DRCA_DSV_OFFSET)&AVR32_DACIFB_DRCA_DSV_MASK) |
                         ((p_dacifb_channel_opt->data_round_enable<<AVR32_DACIFB_DRCA_DRN_OFFSET)&AVR32_DACIFB_DRCA_DRN_MASK));      
      break;
    case DACIFB_CHANNEL_SELECTION_B:
         dacifb->drcb |= (((p_dacifb_channel_opt->left_adjustment<<AVR32_DACIFB_DRCB_DSD_OFFSET)&AVR32_DACIFB_DRCB_DSD_MASK) |
80024532:	f5 e8 10 08 	or	r8,r10,r8
80024536:	10 49       	or	r9,r8
80024538:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002453c:	91 a9       	st.w	r8[0x28],r9
                         ((p_dacifb_channel_opt->data_shift<<AVR32_DACIFB_DRCB_DSV_OFFSET)&AVR32_DACIFB_DRCB_DSV_MASK) |
                         ((p_dacifb_channel_opt->data_round_enable<<AVR32_DACIFB_DRCB_DRN_OFFSET)&AVR32_DACIFB_DRCB_DRN_MASK));  
      break;    
8002453e:	c3 98       	rjmp	800245b0 <dacifb_configure_channel+0x3d0>
    case DACIFB_CHANNEL_SELECTION_AB:
         dacifb->drca |= (((p_dacifb_channel_opt->left_adjustment<<AVR32_DACIFB_DRCA_DSD_OFFSET)&AVR32_DACIFB_DRCA_DSD_MASK) |
80024540:	ee f8 ff f0 	ld.w	r8,r7[-16]
80024544:	70 99       	ld.w	r9,r8[0x24]
80024546:	ee f8 ff e8 	ld.w	r8,r7[-24]
8002454a:	11 a8       	ld.ub	r8,r8[0x2]
8002454c:	ab 78       	lsl	r8,0xb
8002454e:	10 9a       	mov	r10,r8
80024550:	e2 1a 08 00 	andl	r10,0x800,COH
                         ((p_dacifb_channel_opt->data_shift<<AVR32_DACIFB_DRCA_DSV_OFFSET)&AVR32_DACIFB_DRCA_DSV_MASK) |
80024554:	ee f8 ff e8 	ld.w	r8,r7[-24]
80024558:	11 b8       	ld.ub	r8,r8[0x3]
8002455a:	a9 68       	lsl	r8,0x8
8002455c:	e2 18 07 00 	andl	r8,0x700,COH
80024560:	10 4a       	or	r10,r8
                         ((p_dacifb_channel_opt->data_round_enable<<AVR32_DACIFB_DRCA_DRN_OFFSET)&AVR32_DACIFB_DRCA_DRN_MASK));   
80024562:	ee f8 ff e8 	ld.w	r8,r7[-24]
80024566:	11 c8       	ld.ub	r8,r8[0x4]
80024568:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
         dacifb->drcb |= (((p_dacifb_channel_opt->left_adjustment<<AVR32_DACIFB_DRCB_DSD_OFFSET)&AVR32_DACIFB_DRCB_DSD_MASK) |
                         ((p_dacifb_channel_opt->data_shift<<AVR32_DACIFB_DRCB_DSV_OFFSET)&AVR32_DACIFB_DRCB_DSV_MASK) |
                         ((p_dacifb_channel_opt->data_round_enable<<AVR32_DACIFB_DRCB_DRN_OFFSET)&AVR32_DACIFB_DRCB_DRN_MASK));  
      break;    
    case DACIFB_CHANNEL_SELECTION_AB:
         dacifb->drca |= (((p_dacifb_channel_opt->left_adjustment<<AVR32_DACIFB_DRCA_DSD_OFFSET)&AVR32_DACIFB_DRCA_DSD_MASK) |
8002456c:	f5 e8 10 08 	or	r8,r10,r8
80024570:	10 49       	or	r9,r8
80024572:	ee f8 ff f0 	ld.w	r8,r7[-16]
80024576:	91 99       	st.w	r8[0x24],r9
                         ((p_dacifb_channel_opt->data_shift<<AVR32_DACIFB_DRCA_DSV_OFFSET)&AVR32_DACIFB_DRCA_DSV_MASK) |
                         ((p_dacifb_channel_opt->data_round_enable<<AVR32_DACIFB_DRCA_DRN_OFFSET)&AVR32_DACIFB_DRCA_DRN_MASK));   
         dacifb->drcb |= (((p_dacifb_channel_opt->left_adjustment<<AVR32_DACIFB_DRCB_DSD_OFFSET)&AVR32_DACIFB_DRCB_DSD_MASK) |
80024578:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002457c:	70 a9       	ld.w	r9,r8[0x28]
8002457e:	ee f8 ff e8 	ld.w	r8,r7[-24]
80024582:	11 a8       	ld.ub	r8,r8[0x2]
80024584:	ab 78       	lsl	r8,0xb
80024586:	10 9a       	mov	r10,r8
80024588:	e2 1a 08 00 	andl	r10,0x800,COH
                         ((p_dacifb_channel_opt->data_shift<<AVR32_DACIFB_DRCB_DSV_OFFSET)&AVR32_DACIFB_DRCB_DSV_MASK) |
8002458c:	ee f8 ff e8 	ld.w	r8,r7[-24]
80024590:	11 b8       	ld.ub	r8,r8[0x3]
80024592:	a9 68       	lsl	r8,0x8
80024594:	e2 18 07 00 	andl	r8,0x700,COH
80024598:	10 4a       	or	r10,r8
                         ((p_dacifb_channel_opt->data_round_enable<<AVR32_DACIFB_DRCB_DRN_OFFSET)&AVR32_DACIFB_DRCB_DRN_MASK));  
8002459a:	ee f8 ff e8 	ld.w	r8,r7[-24]
8002459e:	11 c8       	ld.ub	r8,r8[0x4]
800245a0:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
      break;    
    case DACIFB_CHANNEL_SELECTION_AB:
         dacifb->drca |= (((p_dacifb_channel_opt->left_adjustment<<AVR32_DACIFB_DRCA_DSD_OFFSET)&AVR32_DACIFB_DRCA_DSD_MASK) |
                         ((p_dacifb_channel_opt->data_shift<<AVR32_DACIFB_DRCA_DSV_OFFSET)&AVR32_DACIFB_DRCA_DSV_MASK) |
                         ((p_dacifb_channel_opt->data_round_enable<<AVR32_DACIFB_DRCA_DRN_OFFSET)&AVR32_DACIFB_DRCA_DRN_MASK));   
         dacifb->drcb |= (((p_dacifb_channel_opt->left_adjustment<<AVR32_DACIFB_DRCB_DSD_OFFSET)&AVR32_DACIFB_DRCB_DSD_MASK) |
800245a4:	f5 e8 10 08 	or	r8,r10,r8
800245a8:	10 49       	or	r9,r8
800245aa:	ee f8 ff f0 	ld.w	r8,r7[-16]
800245ae:	91 a9       	st.w	r8[0x28],r9
                         ((p_dacifb_channel_opt->data_shift<<AVR32_DACIFB_DRCB_DSV_OFFSET)&AVR32_DACIFB_DRCB_DSV_MASK) |
                         ((p_dacifb_channel_opt->data_round_enable<<AVR32_DACIFB_DRCB_DRN_OFFSET)&AVR32_DACIFB_DRCB_DRN_MASK));  
      break;   
  }
  return DACIFB_CONFIGURATION_ACCEPTED;
800245b0:	30 18       	mov	r8,1
}
800245b2:	10 9c       	mov	r12,r8
800245b4:	2f 9d       	sub	sp,-28
800245b6:	e3 cd 80 80 	ldm	sp++,r7,pc

800245ba <dacifb_start_channel>:

void dacifb_start_channel(volatile avr32_dacifb_t * dacifb, 
                          U8 channel,
                          U32 cpu_hz)
{
800245ba:	eb cd 40 c0 	pushm	r6-r7,lr
800245be:	1a 97       	mov	r7,sp
800245c0:	20 3d       	sub	sp,12
800245c2:	49 b6       	lddpc	r6,8002462c <dacifb_start_channel+0x72>
800245c4:	1e 26       	rsub	r6,pc
800245c6:	ef 4c ff fc 	st.w	r7[-4],r12
800245ca:	16 98       	mov	r8,r11
800245cc:	ef 4a ff f4 	st.w	r7[-12],r10
800245d0:	ef 68 ff f8 	st.b	r7[-8],r8
  Assert( dacifb!=NULL );
  
  // Wait 2us
  dacifb_us_delay(2,cpu_hz);
800245d4:	ee fb ff f4 	ld.w	r11,r7[-12]
800245d8:	30 2c       	mov	r12,2
800245da:	fe b0 fc 63 	rcall	80023ea0 <dacifb_us_delay>
  
  switch(channel)
800245de:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800245e2:	58 28       	cp.w	r8,2
800245e4:	c0 e0       	breq	80024600 <dacifb_start_channel+0x46>
800245e6:	58 38       	cp.w	r8,3
800245e8:	c1 50       	breq	80024612 <dacifb_start_channel+0x58>
800245ea:	58 18       	cp.w	r8,1
800245ec:	c1 c1       	brne	80024624 <dacifb_start_channel+0x6a>
  {
    case DACIFB_CHANNEL_SELECTION_A:
         dacifb->cr |= (AVR32_DACIFB_CR_AOE_MASK);      
800245ee:	ee f8 ff fc 	ld.w	r8,r7[-4]
800245f2:	70 08       	ld.w	r8,r8[0x0]
800245f4:	10 99       	mov	r9,r8
800245f6:	b1 a9       	sbr	r9,0x10
800245f8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800245fc:	91 09       	st.w	r8[0x0],r9
      break;
800245fe:	c1 38       	rjmp	80024624 <dacifb_start_channel+0x6a>
    case DACIFB_CHANNEL_SELECTION_B:
         dacifb->cr |= (AVR32_DACIFB_CR_BOE_MASK );
80024600:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024604:	70 08       	ld.w	r8,r8[0x0]
80024606:	10 99       	mov	r9,r8
80024608:	b1 b9       	sbr	r9,0x11
8002460a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002460e:	91 09       	st.w	r8[0x0],r9
      break;
80024610:	c0 a8       	rjmp	80024624 <dacifb_start_channel+0x6a>
    case DACIFB_CHANNEL_SELECTION_AB:
         dacifb->cr |= (AVR32_DACIFB_CR_AOE_MASK | AVR32_DACIFB_CR_BOE_MASK );
80024612:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024616:	70 08       	ld.w	r8,r8[0x0]
80024618:	10 99       	mov	r9,r8
8002461a:	ea 19 00 03 	orh	r9,0x3
8002461e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024622:	91 09       	st.w	r8[0x0],r9
      break;    
  }
  
}
80024624:	2f dd       	sub	sp,-12
80024626:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002462a:	00 00       	add	r0,r0
8002462c:	80 02       	ld.sh	r2,r0[0x0]
8002462e:	44 48       	lddsp	r8,sp[0x110]

80024630 <dacifb_check_eoc>:


bool dacifb_check_eoc(volatile avr32_dacifb_t * dacifb, 
                      U8 channel)
{
80024630:	eb cd 40 80 	pushm	r7,lr
80024634:	1a 97       	mov	r7,sp
80024636:	20 2d       	sub	sp,8
80024638:	ef 4c ff fc 	st.w	r7[-4],r12
8002463c:	16 98       	mov	r8,r11
8002463e:	ef 68 ff f8 	st.b	r7[-8],r8
  Assert( dacifb!=NULL );
     
  // get SR register : EOC bit for channel
  return ((((dacifb->sr)&(channel<<AVR32_DACIFB_SR_DEA_OFFSET))==(channel<<AVR32_DACIFB_SR_DEA_OFFSET))? DACIFB_STATUS_COMPLETED : DACIFB_STATUS_NOT_COMPLETED);
80024642:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024646:	70 78       	ld.w	r8,r8[0x1c]
80024648:	30 18       	mov	r8,1
}
8002464a:	10 9c       	mov	r12,r8
8002464c:	2f ed       	sub	sp,-8
8002464e:	e3 cd 80 80 	ldm	sp++,r7,pc

80024652 <dacifb_set_value>:

void dacifb_set_value(volatile avr32_dacifb_t * dacifb, 
                      U8 channel,
                      bool dual,
                      U32 value)
{
80024652:	eb cd 40 80 	pushm	r7,lr
80024656:	1a 97       	mov	r7,sp
80024658:	20 4d       	sub	sp,16
8002465a:	ef 4c ff fc 	st.w	r7[-4],r12
8002465e:	14 98       	mov	r8,r10
80024660:	ef 49 ff f0 	st.w	r7[-16],r9
80024664:	16 99       	mov	r9,r11
80024666:	ef 69 ff f8 	st.b	r7[-8],r9
8002466a:	ef 68 ff f4 	st.b	r7[-12],r8
  Assert( dacifb != NULL );

  // Set new conversion value
  switch(channel)
8002466e:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80024672:	58 28       	cp.w	r8,2
80024674:	c0 b0       	breq	8002468a <dacifb_set_value+0x38>
80024676:	58 38       	cp.w	r8,3
80024678:	c0 f0       	breq	80024696 <dacifb_set_value+0x44>
8002467a:	58 18       	cp.w	r8,1
8002467c:	c2 01       	brne	800246bc <dacifb_set_value+0x6a>
  {
    case DACIFB_CHANNEL_SELECTION_A:
         dacifb->dr0 = (value);      
8002467e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024682:	ee f9 ff f0 	ld.w	r9,r7[-16]
80024686:	91 b9       	st.w	r8[0x2c],r9
      break;
80024688:	c1 a8       	rjmp	800246bc <dacifb_set_value+0x6a>
    case DACIFB_CHANNEL_SELECTION_B:
         dacifb->dr1 = (value);
8002468a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002468e:	ee f9 ff f0 	ld.w	r9,r7[-16]
80024692:	91 c9       	st.w	r8[0x30],r9
      break;
80024694:	c1 48       	rjmp	800246bc <dacifb_set_value+0x6a>
    case DACIFB_CHANNEL_SELECTION_AB:
       if(dual==true)
80024696:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8002469a:	30 08       	mov	r8,0
8002469c:	f0 09 18 00 	cp.b	r9,r8
800246a0:	c0 70       	breq	800246ae <dacifb_set_value+0x5c>
       {
         dacifb->dr0 = value;
800246a2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800246a6:	ee f9 ff f0 	ld.w	r9,r7[-16]
800246aa:	91 b9       	st.w	r8[0x2c],r9
800246ac:	c0 88       	rjmp	800246bc <dacifb_set_value+0x6a>
       }
       else
       {
           dacifb->dr0 = ((value&0x00FF) | ( (value&0xFF00>>16)<<16));
800246ae:	ee f8 ff f0 	ld.w	r8,r7[-16]
800246b2:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800246b6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800246ba:	91 b9       	st.w	r8[0x2c],r9
       }
      break;    
  }
}
800246bc:	2f cd       	sub	sp,-16
800246be:	e3 cd 80 80 	ldm	sp++,r7,pc

800246c2 <dacifb_reload_timer>:

void dacifb_reload_timer(volatile avr32_dacifb_t * dacifb,
                         U8 channel,
                         U8 timer_us,
                         U32 prescaler_clock_hz)
{
800246c2:	eb cd 40 80 	pushm	r7,lr
800246c6:	1a 97       	mov	r7,sp
800246c8:	20 5d       	sub	sp,20
800246ca:	ef 4c ff f8 	st.w	r7[-8],r12
800246ce:	14 98       	mov	r8,r10
800246d0:	ef 49 ff ec 	st.w	r7[-20],r9
800246d4:	16 99       	mov	r9,r11
800246d6:	ef 69 ff f4 	st.b	r7[-12],r9
800246da:	ef 68 ff f0 	st.b	r7[-16],r8
    U32 timer;
    
    Assert( dacifb != NULL ); 
    
    timer = ( (timer_us * prescaler_clock_hz)/1000000);
800246de:	ef 39 ff f0 	ld.ub	r9,r7[-16]
800246e2:	ee f8 ff ec 	ld.w	r8,r7[-20]
800246e6:	b1 39       	mul	r9,r8
800246e8:	e0 68 de 83 	mov	r8,56963
800246ec:	ea 18 43 1b 	orh	r8,0x431b
800246f0:	f2 08 06 48 	mulu.d	r8,r9,r8
800246f4:	f2 08 16 12 	lsr	r8,r9,0x12
800246f8:	ef 48 ff fc 	st.w	r7[-4],r8
    // Reload Timer Valuie
    switch(channel)
800246fc:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80024700:	58 28       	cp.w	r8,2
80024702:	c0 f0       	breq	80024720 <dacifb_reload_timer+0x5e>
80024704:	58 38       	cp.w	r8,3
80024706:	c1 70       	breq	80024734 <dacifb_reload_timer+0x72>
80024708:	58 18       	cp.w	r8,1
8002470a:	c2 71       	brne	80024758 <dacifb_reload_timer+0x96>
    {
      case DACIFB_CHANNEL_SELECTION_A:
           dacifb->tra = (AVR32_DACIFB_TRA_TRL_MASK)|((timer<<AVR32_DACIFB_TRA_TCD_OFFSET)&AVR32_DACIFB_TRA_TCD_MASK);      
8002470c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024710:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
80024714:	10 99       	mov	r9,r8
80024716:	bf b9       	sbr	r9,0x1f
80024718:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002471c:	91 e9       	st.w	r8[0x38],r9
        break;
8002471e:	c1 d8       	rjmp	80024758 <dacifb_reload_timer+0x96>
      case DACIFB_CHANNEL_SELECTION_B:
           dacifb->trb = (AVR32_DACIFB_TRB_TRL_MASK)|((timer<<AVR32_DACIFB_TRB_TCD_OFFSET)&AVR32_DACIFB_TRB_TCD_MASK);  
80024720:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024724:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
80024728:	10 99       	mov	r9,r8
8002472a:	bf b9       	sbr	r9,0x1f
8002472c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80024730:	91 f9       	st.w	r8[0x3c],r9
        break;
80024732:	c1 38       	rjmp	80024758 <dacifb_reload_timer+0x96>
      case DACIFB_CHANNEL_SELECTION_AB:
           dacifb->tra = (AVR32_DACIFB_TRA_TRL_MASK)|((timer<<AVR32_DACIFB_TRA_TCD_OFFSET)&AVR32_DACIFB_TRA_TCD_MASK); 
80024734:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024738:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
8002473c:	10 99       	mov	r9,r8
8002473e:	bf b9       	sbr	r9,0x1f
80024740:	ee f8 ff f8 	ld.w	r8,r7[-8]
80024744:	91 e9       	st.w	r8[0x38],r9
           dacifb->trb = (AVR32_DACIFB_TRB_TRL_MASK)|((timer<<AVR32_DACIFB_TRB_TCD_OFFSET)&AVR32_DACIFB_TRB_TCD_MASK); 
80024746:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002474a:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
8002474e:	10 99       	mov	r9,r8
80024750:	bf b9       	sbr	r9,0x1f
80024752:	ee f8 ff f8 	ld.w	r8,r7[-8]
80024756:	91 f9       	st.w	r8[0x3c],r9
        break;    
    }    
}
80024758:	2f bd       	sub	sp,-20
8002475a:	e3 cd 80 80 	ldm	sp++,r7,pc
	...

80024760 <cpu_irq_save>:
#endif

typedef uint32_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
80024760:	eb cd 40 80 	pushm	r7,lr
80024764:	1a 97       	mov	r7,sp
80024766:	20 1d       	sub	sp,4
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80024768:	e1 b8 00 00 	mfsr	r8,0x0
8002476c:	ef 48 ff fc 	st.w	r7[-4],r8
	cpu_irq_disable();
80024770:	d3 03       	ssrf	0x10

	return flags;
80024772:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80024776:	10 9c       	mov	r12,r8
80024778:	2f fd       	sub	sp,-4
8002477a:	e3 cd 80 80 	ldm	sp++,r7,pc

8002477e <cpu_irq_restore>:
{
	return !(flags & AVR32_SR_GM_MASK);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
8002477e:	eb cd 40 80 	pushm	r7,lr
80024782:	1a 97       	mov	r7,sp
80024784:	20 1d       	sub	sp,4
80024786:	ef 4c ff fc 	st.w	r7[-4],r12
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
8002478a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002478e:	e3 b8 00 00 	mtsr	0x0,r8
#endif
	barrier();
}
80024792:	2f fd       	sub	sp,-4
80024794:	e3 cd 80 80 	ldm	sp++,r7,pc

80024798 <eic_init>:
#include "eic.h"



void eic_init(volatile avr32_eic_t *eic, const eic_options_t *opt, uint32_t nb_lines)
{
80024798:	eb cd 40 80 	pushm	r7,lr
8002479c:	1a 97       	mov	r7,sp
8002479e:	20 4d       	sub	sp,16
800247a0:	ef 4c ff f8 	st.w	r7[-8],r12
800247a4:	ef 4b ff f4 	st.w	r7[-12],r11
800247a8:	ef 4a ff f0 	st.w	r7[-16],r10
	int i;
	for (i = 0; i < nb_lines; i++)
800247ac:	30 08       	mov	r8,0
800247ae:	ef 48 ff fc 	st.w	r7[-4],r8
800247b2:	c2 89       	rjmp	80024a02 <eic_init+0x26a>
	{
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
800247b4:	ee f9 ff fc 	ld.w	r9,r7[-4]
800247b8:	12 98       	mov	r8,r9
800247ba:	a1 78       	lsl	r8,0x1
800247bc:	12 08       	add	r8,r9
800247be:	a1 78       	lsl	r8,0x1
800247c0:	ee f9 ff f4 	ld.w	r9,r7[-12]
800247c4:	f2 08 00 08 	add	r8,r9,r8
800247c8:	11 99       	ld.ub	r9,r8[0x1]
800247ca:	30 18       	mov	r8,1
800247cc:	f0 09 18 00 	cp.b	r9,r8
800247d0:	c1 51       	brne	800247fa <eic_init+0x62>
			? (eic->mode | (1 << opt[i].eic_line))
800247d2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800247d6:	70 5a       	ld.w	r10,r8[0x14]
800247d8:	ee f9 ff fc 	ld.w	r9,r7[-4]
800247dc:	12 98       	mov	r8,r9
800247de:	a1 78       	lsl	r8,0x1
800247e0:	12 08       	add	r8,r9
800247e2:	a1 78       	lsl	r8,0x1
800247e4:	ee f9 ff f4 	ld.w	r9,r7[-12]
800247e8:	f2 08 00 08 	add	r8,r9,r8
800247ec:	11 88       	ld.ub	r8,r8[0x0]
800247ee:	30 19       	mov	r9,1
800247f0:	f2 08 09 48 	lsl	r8,r9,r8
{
	int i;
	for (i = 0; i < nb_lines; i++)
	{
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
800247f4:	f5 e8 10 08 	or	r8,r10,r8
800247f8:	c1 58       	rjmp	80024822 <eic_init+0x8a>
			? (eic->mode | (1 << opt[i].eic_line))
			: (eic->mode & ~(1 << opt[i].eic_line));
800247fa:	ee f8 ff f8 	ld.w	r8,r7[-8]
800247fe:	70 5a       	ld.w	r10,r8[0x14]
80024800:	ee f9 ff fc 	ld.w	r9,r7[-4]
80024804:	12 98       	mov	r8,r9
80024806:	a1 78       	lsl	r8,0x1
80024808:	12 08       	add	r8,r9
8002480a:	a1 78       	lsl	r8,0x1
8002480c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80024810:	f2 08 00 08 	add	r8,r9,r8
80024814:	11 88       	ld.ub	r8,r8[0x0]
80024816:	30 19       	mov	r9,1
80024818:	f2 08 09 48 	lsl	r8,r9,r8
8002481c:	5c d8       	com	r8
{
	int i;
	for (i = 0; i < nb_lines; i++)
	{
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
8002481e:	f5 e8 00 08 	and	r8,r10,r8
80024822:	ee f9 ff f8 	ld.w	r9,r7[-8]
80024826:	93 58       	st.w	r9[0x14],r8
			? (eic->mode | (1 << opt[i].eic_line))
			: (eic->mode & ~(1 << opt[i].eic_line));
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
80024828:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002482c:	12 98       	mov	r8,r9
8002482e:	a1 78       	lsl	r8,0x1
80024830:	12 08       	add	r8,r9
80024832:	a1 78       	lsl	r8,0x1
80024834:	ee f9 ff f4 	ld.w	r9,r7[-12]
80024838:	f2 08 00 08 	add	r8,r9,r8
8002483c:	11 a9       	ld.ub	r9,r8[0x2]
8002483e:	30 18       	mov	r8,1
80024840:	f0 09 18 00 	cp.b	r9,r8
80024844:	c1 51       	brne	8002486e <eic_init+0xd6>
			? (eic->edge | (1 << opt[i].eic_line))
80024846:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002484a:	70 6a       	ld.w	r10,r8[0x18]
8002484c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80024850:	12 98       	mov	r8,r9
80024852:	a1 78       	lsl	r8,0x1
80024854:	12 08       	add	r8,r9
80024856:	a1 78       	lsl	r8,0x1
80024858:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002485c:	f2 08 00 08 	add	r8,r9,r8
80024860:	11 88       	ld.ub	r8,r8[0x0]
80024862:	30 19       	mov	r9,1
80024864:	f2 08 09 48 	lsl	r8,r9,r8
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
			? (eic->mode | (1 << opt[i].eic_line))
			: (eic->mode & ~(1 << opt[i].eic_line));
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
80024868:	f5 e8 10 08 	or	r8,r10,r8
8002486c:	c1 58       	rjmp	80024896 <eic_init+0xfe>
			? (eic->edge | (1 << opt[i].eic_line))
			: (eic->edge & ~(1 << opt[i].eic_line));
8002486e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80024872:	70 6a       	ld.w	r10,r8[0x18]
80024874:	ee f9 ff fc 	ld.w	r9,r7[-4]
80024878:	12 98       	mov	r8,r9
8002487a:	a1 78       	lsl	r8,0x1
8002487c:	12 08       	add	r8,r9
8002487e:	a1 78       	lsl	r8,0x1
80024880:	ee f9 ff f4 	ld.w	r9,r7[-12]
80024884:	f2 08 00 08 	add	r8,r9,r8
80024888:	11 88       	ld.ub	r8,r8[0x0]
8002488a:	30 19       	mov	r9,1
8002488c:	f2 08 09 48 	lsl	r8,r9,r8
80024890:	5c d8       	com	r8
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
			? (eic->mode | (1 << opt[i].eic_line))
			: (eic->mode & ~(1 << opt[i].eic_line));
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
80024892:	f5 e8 00 08 	and	r8,r10,r8
80024896:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002489a:	93 68       	st.w	r9[0x18],r8
			? (eic->edge | (1 << opt[i].eic_line))
			: (eic->edge & ~(1 << opt[i].eic_line));
		// Set up level
		eic->level = (opt[i].eic_level == 1)
8002489c:	ee f9 ff fc 	ld.w	r9,r7[-4]
800248a0:	12 98       	mov	r8,r9
800248a2:	a1 78       	lsl	r8,0x1
800248a4:	12 08       	add	r8,r9
800248a6:	a1 78       	lsl	r8,0x1
800248a8:	ee f9 ff f4 	ld.w	r9,r7[-12]
800248ac:	f2 08 00 08 	add	r8,r9,r8
800248b0:	11 b9       	ld.ub	r9,r8[0x3]
800248b2:	30 18       	mov	r8,1
800248b4:	f0 09 18 00 	cp.b	r9,r8
800248b8:	c1 51       	brne	800248e2 <eic_init+0x14a>
			? (eic->level | (1 << opt[i].eic_line))
800248ba:	ee f8 ff f8 	ld.w	r8,r7[-8]
800248be:	70 7a       	ld.w	r10,r8[0x1c]
800248c0:	ee f9 ff fc 	ld.w	r9,r7[-4]
800248c4:	12 98       	mov	r8,r9
800248c6:	a1 78       	lsl	r8,0x1
800248c8:	12 08       	add	r8,r9
800248ca:	a1 78       	lsl	r8,0x1
800248cc:	ee f9 ff f4 	ld.w	r9,r7[-12]
800248d0:	f2 08 00 08 	add	r8,r9,r8
800248d4:	11 88       	ld.ub	r8,r8[0x0]
800248d6:	30 19       	mov	r9,1
800248d8:	f2 08 09 48 	lsl	r8,r9,r8
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
			? (eic->edge | (1 << opt[i].eic_line))
			: (eic->edge & ~(1 << opt[i].eic_line));
		// Set up level
		eic->level = (opt[i].eic_level == 1)
800248dc:	f5 e8 10 08 	or	r8,r10,r8
800248e0:	c1 58       	rjmp	8002490a <eic_init+0x172>
			? (eic->level | (1 << opt[i].eic_line))
			: (eic->level & ~(1 << opt[i].eic_line));
800248e2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800248e6:	70 7a       	ld.w	r10,r8[0x1c]
800248e8:	ee f9 ff fc 	ld.w	r9,r7[-4]
800248ec:	12 98       	mov	r8,r9
800248ee:	a1 78       	lsl	r8,0x1
800248f0:	12 08       	add	r8,r9
800248f2:	a1 78       	lsl	r8,0x1
800248f4:	ee f9 ff f4 	ld.w	r9,r7[-12]
800248f8:	f2 08 00 08 	add	r8,r9,r8
800248fc:	11 88       	ld.ub	r8,r8[0x0]
800248fe:	30 19       	mov	r9,1
80024900:	f2 08 09 48 	lsl	r8,r9,r8
80024904:	5c d8       	com	r8
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
			? (eic->edge | (1 << opt[i].eic_line))
			: (eic->edge & ~(1 << opt[i].eic_line));
		// Set up level
		eic->level = (opt[i].eic_level == 1)
80024906:	f5 e8 00 08 	and	r8,r10,r8
8002490a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002490e:	93 78       	st.w	r9[0x1c],r8
			? (eic->level | (1 << opt[i].eic_line))
			: (eic->level & ~(1 << opt[i].eic_line));
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
80024910:	ee f9 ff fc 	ld.w	r9,r7[-4]
80024914:	12 98       	mov	r8,r9
80024916:	a1 78       	lsl	r8,0x1
80024918:	12 08       	add	r8,r9
8002491a:	a1 78       	lsl	r8,0x1
8002491c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80024920:	f2 08 00 08 	add	r8,r9,r8
80024924:	11 c9       	ld.ub	r9,r8[0x4]
80024926:	30 18       	mov	r8,1
80024928:	f0 09 18 00 	cp.b	r9,r8
8002492c:	c1 51       	brne	80024956 <eic_init+0x1be>
			? (eic->filter | (1 << opt[i].eic_line))
8002492e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80024932:	70 8a       	ld.w	r10,r8[0x20]
80024934:	ee f9 ff fc 	ld.w	r9,r7[-4]
80024938:	12 98       	mov	r8,r9
8002493a:	a1 78       	lsl	r8,0x1
8002493c:	12 08       	add	r8,r9
8002493e:	a1 78       	lsl	r8,0x1
80024940:	ee f9 ff f4 	ld.w	r9,r7[-12]
80024944:	f2 08 00 08 	add	r8,r9,r8
80024948:	11 88       	ld.ub	r8,r8[0x0]
8002494a:	30 19       	mov	r9,1
8002494c:	f2 08 09 48 	lsl	r8,r9,r8
		// Set up level
		eic->level = (opt[i].eic_level == 1)
			? (eic->level | (1 << opt[i].eic_line))
			: (eic->level & ~(1 << opt[i].eic_line));
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
80024950:	f5 e8 10 08 	or	r8,r10,r8
80024954:	c1 58       	rjmp	8002497e <eic_init+0x1e6>
			? (eic->filter | (1 << opt[i].eic_line))
			: (eic->filter & ~(1 << opt[i].eic_line));
80024956:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002495a:	70 8a       	ld.w	r10,r8[0x20]
8002495c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80024960:	12 98       	mov	r8,r9
80024962:	a1 78       	lsl	r8,0x1
80024964:	12 08       	add	r8,r9
80024966:	a1 78       	lsl	r8,0x1
80024968:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002496c:	f2 08 00 08 	add	r8,r9,r8
80024970:	11 88       	ld.ub	r8,r8[0x0]
80024972:	30 19       	mov	r9,1
80024974:	f2 08 09 48 	lsl	r8,r9,r8
80024978:	5c d8       	com	r8
		// Set up level
		eic->level = (opt[i].eic_level == 1)
			? (eic->level | (1 << opt[i].eic_line))
			: (eic->level & ~(1 << opt[i].eic_line));
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
8002497a:	f5 e8 00 08 	and	r8,r10,r8
8002497e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80024982:	93 88       	st.w	r9[0x20],r8
			? (eic->filter | (1 << opt[i].eic_line))
			: (eic->filter & ~(1 << opt[i].eic_line));
		// Set up which mode is used : asynchronous mode/ synchronous mode
		eic->async = (opt[i].eic_async == 1)
80024984:	ee f9 ff fc 	ld.w	r9,r7[-4]
80024988:	12 98       	mov	r8,r9
8002498a:	a1 78       	lsl	r8,0x1
8002498c:	12 08       	add	r8,r9
8002498e:	a1 78       	lsl	r8,0x1
80024990:	ee f9 ff f4 	ld.w	r9,r7[-12]
80024994:	f2 08 00 08 	add	r8,r9,r8
80024998:	11 d9       	ld.ub	r9,r8[0x5]
8002499a:	30 18       	mov	r8,1
8002499c:	f0 09 18 00 	cp.b	r9,r8
800249a0:	c1 51       	brne	800249ca <eic_init+0x232>
			? (eic->async | (1 << opt[i].eic_line))
800249a2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800249a6:	70 aa       	ld.w	r10,r8[0x28]
800249a8:	ee f9 ff fc 	ld.w	r9,r7[-4]
800249ac:	12 98       	mov	r8,r9
800249ae:	a1 78       	lsl	r8,0x1
800249b0:	12 08       	add	r8,r9
800249b2:	a1 78       	lsl	r8,0x1
800249b4:	ee f9 ff f4 	ld.w	r9,r7[-12]
800249b8:	f2 08 00 08 	add	r8,r9,r8
800249bc:	11 88       	ld.ub	r8,r8[0x0]
800249be:	30 19       	mov	r9,1
800249c0:	f2 08 09 48 	lsl	r8,r9,r8
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
			? (eic->filter | (1 << opt[i].eic_line))
			: (eic->filter & ~(1 << opt[i].eic_line));
		// Set up which mode is used : asynchronous mode/ synchronous mode
		eic->async = (opt[i].eic_async == 1)
800249c4:	f5 e8 10 08 	or	r8,r10,r8
800249c8:	c1 58       	rjmp	800249f2 <eic_init+0x25a>
			? (eic->async | (1 << opt[i].eic_line))
			: (eic->async & ~(1 << opt[i].eic_line));
800249ca:	ee f8 ff f8 	ld.w	r8,r7[-8]
800249ce:	70 aa       	ld.w	r10,r8[0x28]
800249d0:	ee f9 ff fc 	ld.w	r9,r7[-4]
800249d4:	12 98       	mov	r8,r9
800249d6:	a1 78       	lsl	r8,0x1
800249d8:	12 08       	add	r8,r9
800249da:	a1 78       	lsl	r8,0x1
800249dc:	ee f9 ff f4 	ld.w	r9,r7[-12]
800249e0:	f2 08 00 08 	add	r8,r9,r8
800249e4:	11 88       	ld.ub	r8,r8[0x0]
800249e6:	30 19       	mov	r9,1
800249e8:	f2 08 09 48 	lsl	r8,r9,r8
800249ec:	5c d8       	com	r8
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
			? (eic->filter | (1 << opt[i].eic_line))
			: (eic->filter & ~(1 << opt[i].eic_line));
		// Set up which mode is used : asynchronous mode/ synchronous mode
		eic->async = (opt[i].eic_async == 1)
800249ee:	f5 e8 00 08 	and	r8,r10,r8
800249f2:	ee f9 ff f8 	ld.w	r9,r7[-8]
800249f6:	93 a8       	st.w	r9[0x28],r8


void eic_init(volatile avr32_eic_t *eic, const eic_options_t *opt, uint32_t nb_lines)
{
	int i;
	for (i = 0; i < nb_lines; i++)
800249f8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800249fc:	2f f8       	sub	r8,-1
800249fe:	ef 48 ff fc 	st.w	r7[-4],r8
80024a02:	ee f9 ff fc 	ld.w	r9,r7[-4]
80024a06:	ee f8 ff f0 	ld.w	r8,r7[-16]
80024a0a:	10 39       	cp.w	r9,r8
80024a0c:	fe 93 fe d4 	brlo	800247b4 <eic_init+0x1c>
		// Set up which mode is used : asynchronous mode/ synchronous mode
		eic->async = (opt[i].eic_async == 1)
			? (eic->async | (1 << opt[i].eic_line))
			: (eic->async & ~(1 << opt[i].eic_line));
	}
}
80024a10:	2f cd       	sub	sp,-16
80024a12:	e3 cd 80 80 	ldm	sp++,r7,pc

80024a16 <eic_enable_lines>:

void eic_enable_lines(volatile avr32_eic_t *eic, uint32_t mask_lines)
{
80024a16:	eb cd 40 80 	pushm	r7,lr
80024a1a:	1a 97       	mov	r7,sp
80024a1c:	20 2d       	sub	sp,8
80024a1e:	ef 4c ff fc 	st.w	r7[-4],r12
80024a22:	ef 4b ff f8 	st.w	r7[-8],r11
	eic->en = mask_lines;
80024a26:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024a2a:	ee f9 ff f8 	ld.w	r9,r7[-8]
80024a2e:	91 c9       	st.w	r8[0x30],r9
}
80024a30:	2f ed       	sub	sp,-8
80024a32:	e3 cd 80 80 	ldm	sp++,r7,pc

80024a36 <eic_enable_line>:

void eic_enable_line(volatile avr32_eic_t *eic, uint32_t line_number)
{
80024a36:	eb cd 40 80 	pushm	r7,lr
80024a3a:	1a 97       	mov	r7,sp
80024a3c:	20 2d       	sub	sp,8
80024a3e:	ef 4c ff fc 	st.w	r7[-4],r12
80024a42:	ef 4b ff f8 	st.w	r7[-8],r11
	// Enable line line_number
	eic->en = 1 << line_number;
80024a46:	ee f8 ff f8 	ld.w	r8,r7[-8]
80024a4a:	30 19       	mov	r9,1
80024a4c:	f2 08 09 48 	lsl	r8,r9,r8
80024a50:	10 99       	mov	r9,r8
80024a52:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024a56:	91 c9       	st.w	r8[0x30],r9
}
80024a58:	2f ed       	sub	sp,-8
80024a5a:	e3 cd 80 80 	ldm	sp++,r7,pc

80024a5e <eic_disable_lines>:

void eic_disable_lines(volatile avr32_eic_t *eic, uint32_t mask_lines)
{
80024a5e:	eb cd 40 80 	pushm	r7,lr
80024a62:	1a 97       	mov	r7,sp
80024a64:	20 2d       	sub	sp,8
80024a66:	ef 4c ff fc 	st.w	r7[-4],r12
80024a6a:	ef 4b ff f8 	st.w	r7[-8],r11
	eic->dis = mask_lines;
80024a6e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024a72:	ee f9 ff f8 	ld.w	r9,r7[-8]
80024a76:	91 d9       	st.w	r8[0x34],r9
}
80024a78:	2f ed       	sub	sp,-8
80024a7a:	e3 cd 80 80 	ldm	sp++,r7,pc

80024a7e <eic_disable_line>:

void eic_disable_line(volatile avr32_eic_t *eic, uint32_t line_number)
{
80024a7e:	eb cd 40 80 	pushm	r7,lr
80024a82:	1a 97       	mov	r7,sp
80024a84:	20 2d       	sub	sp,8
80024a86:	ef 4c ff fc 	st.w	r7[-4],r12
80024a8a:	ef 4b ff f8 	st.w	r7[-8],r11
	// Disable line line_number
	eic->dis = 1 << line_number;
80024a8e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80024a92:	30 19       	mov	r9,1
80024a94:	f2 08 09 48 	lsl	r8,r9,r8
80024a98:	10 99       	mov	r9,r8
80024a9a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024a9e:	91 d9       	st.w	r8[0x34],r9
}
80024aa0:	2f ed       	sub	sp,-8
80024aa2:	e3 cd 80 80 	ldm	sp++,r7,pc

80024aa6 <eic_is_line_enabled>:

bool eic_is_line_enabled(volatile avr32_eic_t *eic, uint32_t line_number)
{
80024aa6:	eb cd 40 80 	pushm	r7,lr
80024aaa:	1a 97       	mov	r7,sp
80024aac:	20 2d       	sub	sp,8
80024aae:	ef 4c ff fc 	st.w	r7[-4],r12
80024ab2:	ef 4b ff f8 	st.w	r7[-8],r11
	return (eic->ctrl & (1 << line_number)) != 0;
80024ab6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024aba:	70 e9       	ld.w	r9,r8[0x38]
80024abc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80024ac0:	30 1a       	mov	r10,1
80024ac2:	f4 08 09 48 	lsl	r8,r10,r8
80024ac6:	f3 e8 00 08 	and	r8,r9,r8
80024aca:	5f 18       	srne	r8
80024acc:	5c 58       	castu.b	r8
}
80024ace:	10 9c       	mov	r12,r8
80024ad0:	2f ed       	sub	sp,-8
80024ad2:	e3 cd 80 80 	ldm	sp++,r7,pc

80024ad6 <eic_enable_interrupt_lines>:

void eic_enable_interrupt_lines(volatile avr32_eic_t *eic, uint32_t mask_lines)
{
80024ad6:	eb cd 40 80 	pushm	r7,lr
80024ada:	1a 97       	mov	r7,sp
80024adc:	20 2d       	sub	sp,8
80024ade:	ef 4c ff fc 	st.w	r7[-4],r12
80024ae2:	ef 4b ff f8 	st.w	r7[-8],r11
	eic->ier = mask_lines;
80024ae6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024aea:	ee f9 ff f8 	ld.w	r9,r7[-8]
80024aee:	91 09       	st.w	r8[0x0],r9
}
80024af0:	2f ed       	sub	sp,-8
80024af2:	e3 cd 80 80 	ldm	sp++,r7,pc

80024af6 <eic_enable_interrupt_line>:

void eic_enable_interrupt_line(volatile avr32_eic_t *eic, uint32_t line_number)
{
80024af6:	eb cd 40 80 	pushm	r7,lr
80024afa:	1a 97       	mov	r7,sp
80024afc:	20 2d       	sub	sp,8
80024afe:	ef 4c ff fc 	st.w	r7[-4],r12
80024b02:	ef 4b ff f8 	st.w	r7[-8],r11
	// Enable line line_number
	eic->ier = 1 << line_number;
80024b06:	ee f8 ff f8 	ld.w	r8,r7[-8]
80024b0a:	30 19       	mov	r9,1
80024b0c:	f2 08 09 48 	lsl	r8,r9,r8
80024b10:	10 99       	mov	r9,r8
80024b12:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024b16:	91 09       	st.w	r8[0x0],r9
}
80024b18:	2f ed       	sub	sp,-8
80024b1a:	e3 cd 80 80 	ldm	sp++,r7,pc

80024b1e <eic_disable_interrupt_lines>:

void eic_disable_interrupt_lines(volatile avr32_eic_t *eic, uint32_t mask_lines)
{
80024b1e:	eb cd 40 c0 	pushm	r6-r7,lr
80024b22:	1a 97       	mov	r7,sp
80024b24:	20 3d       	sub	sp,12
80024b26:	48 d6       	lddpc	r6,80024b58 <eic_disable_interrupt_lines+0x3a>
80024b28:	1e 26       	rsub	r6,pc
80024b2a:	ef 4c ff f8 	st.w	r7[-8],r12
80024b2e:	ef 4b ff f4 	st.w	r7[-12],r11
	irqflags_t flags;
	flags = cpu_irq_save();
80024b32:	c1 7e       	rcall	80024760 <cpu_irq_save>
80024b34:	18 98       	mov	r8,r12
80024b36:	ef 48 ff fc 	st.w	r7[-4],r8
	eic->idr = mask_lines;
80024b3a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80024b3e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80024b42:	91 19       	st.w	r8[0x4],r9
	eic->imr;
80024b44:	ee f8 ff f8 	ld.w	r8,r7[-8]
80024b48:	70 28       	ld.w	r8,r8[0x8]
	cpu_irq_restore(flags);
80024b4a:	ee fc ff fc 	ld.w	r12,r7[-4]
80024b4e:	c1 8e       	rcall	8002477e <cpu_irq_restore>
}
80024b50:	2f dd       	sub	sp,-12
80024b52:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80024b56:	00 00       	add	r0,r0
80024b58:	80 02       	ld.sh	r2,r0[0x0]
80024b5a:	49 ac       	lddpc	r12,80024bc0 <eic_is_interrupt_line_enabled+0x1c>

80024b5c <eic_disable_interrupt_line>:

void eic_disable_interrupt_line(volatile avr32_eic_t *eic, uint32_t line_number)
{
80024b5c:	eb cd 40 c0 	pushm	r6-r7,lr
80024b60:	1a 97       	mov	r7,sp
80024b62:	20 3d       	sub	sp,12
80024b64:	48 f6       	lddpc	r6,80024ba0 <eic_disable_interrupt_line+0x44>
80024b66:	1e 26       	rsub	r6,pc
80024b68:	ef 4c ff f8 	st.w	r7[-8],r12
80024b6c:	ef 4b ff f4 	st.w	r7[-12],r11
	irqflags_t flags;
	flags = cpu_irq_save();
80024b70:	fe b0 fd f8 	rcall	80024760 <cpu_irq_save>
80024b74:	18 98       	mov	r8,r12
80024b76:	ef 48 ff fc 	st.w	r7[-4],r8
	eic->idr = 1 << line_number;
80024b7a:	ee f8 ff f4 	ld.w	r8,r7[-12]
80024b7e:	30 19       	mov	r9,1
80024b80:	f2 08 09 48 	lsl	r8,r9,r8
80024b84:	10 99       	mov	r9,r8
80024b86:	ee f8 ff f8 	ld.w	r8,r7[-8]
80024b8a:	91 19       	st.w	r8[0x4],r9
	eic->imr;
80024b8c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80024b90:	70 28       	ld.w	r8,r8[0x8]
	cpu_irq_restore(flags);
80024b92:	ee fc ff fc 	ld.w	r12,r7[-4]
80024b96:	fe b0 fd f4 	rcall	8002477e <cpu_irq_restore>
}
80024b9a:	2f dd       	sub	sp,-12
80024b9c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80024ba0:	80 02       	ld.sh	r2,r0[0x0]
80024ba2:	49 ea       	lddpc	r10,80024c18 <eic_clear_interrupt_line+0x4>

80024ba4 <eic_is_interrupt_line_enabled>:

bool eic_is_interrupt_line_enabled(volatile avr32_eic_t *eic, uint32_t line_number)
{
80024ba4:	eb cd 40 80 	pushm	r7,lr
80024ba8:	1a 97       	mov	r7,sp
80024baa:	20 2d       	sub	sp,8
80024bac:	ef 4c ff fc 	st.w	r7[-4],r12
80024bb0:	ef 4b ff f8 	st.w	r7[-8],r11
	return (eic->imr & (1 << line_number)) != 0;
80024bb4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024bb8:	70 29       	ld.w	r9,r8[0x8]
80024bba:	ee f8 ff f8 	ld.w	r8,r7[-8]
80024bbe:	30 1a       	mov	r10,1
80024bc0:	f4 08 09 48 	lsl	r8,r10,r8
80024bc4:	f3 e8 00 08 	and	r8,r9,r8
80024bc8:	5f 18       	srne	r8
80024bca:	5c 58       	castu.b	r8
}
80024bcc:	10 9c       	mov	r12,r8
80024bce:	2f ed       	sub	sp,-8
80024bd0:	e3 cd 80 80 	ldm	sp++,r7,pc

80024bd4 <eic_clear_interrupt_lines>:

void eic_clear_interrupt_lines(volatile avr32_eic_t *eic, uint32_t mask_lines)
{
80024bd4:	eb cd 40 c0 	pushm	r6-r7,lr
80024bd8:	1a 97       	mov	r7,sp
80024bda:	20 3d       	sub	sp,12
80024bdc:	48 d6       	lddpc	r6,80024c10 <eic_clear_interrupt_lines+0x3c>
80024bde:	1e 26       	rsub	r6,pc
80024be0:	ef 4c ff f8 	st.w	r7[-8],r12
80024be4:	ef 4b ff f4 	st.w	r7[-12],r11
	irqflags_t flags;
	flags = cpu_irq_save();
80024be8:	fe b0 fd bc 	rcall	80024760 <cpu_irq_save>
80024bec:	18 98       	mov	r8,r12
80024bee:	ef 48 ff fc 	st.w	r7[-4],r8
	eic->icr = mask_lines;
80024bf2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80024bf6:	ee f9 ff f4 	ld.w	r9,r7[-12]
80024bfa:	91 49       	st.w	r8[0x10],r9
	eic->isr;
80024bfc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80024c00:	70 38       	ld.w	r8,r8[0xc]
	cpu_irq_restore(flags);
80024c02:	ee fc ff fc 	ld.w	r12,r7[-4]
80024c06:	fe b0 fd bc 	rcall	8002477e <cpu_irq_restore>
}
80024c0a:	2f dd       	sub	sp,-12
80024c0c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80024c10:	80 02       	ld.sh	r2,r0[0x0]
80024c12:	4a 62       	lddpc	r2,80024ca8 <flashc_get_flash_size+0x1c>

80024c14 <eic_clear_interrupt_line>:

void eic_clear_interrupt_line(volatile avr32_eic_t *eic, uint32_t line_number)
{
80024c14:	eb cd 40 c0 	pushm	r6-r7,lr
80024c18:	1a 97       	mov	r7,sp
80024c1a:	20 3d       	sub	sp,12
80024c1c:	48 f6       	lddpc	r6,80024c58 <eic_clear_interrupt_line+0x44>
80024c1e:	1e 26       	rsub	r6,pc
80024c20:	ef 4c ff f8 	st.w	r7[-8],r12
80024c24:	ef 4b ff f4 	st.w	r7[-12],r11
	irqflags_t flags;
	flags = cpu_irq_save();
80024c28:	fe b0 fd 9c 	rcall	80024760 <cpu_irq_save>
80024c2c:	18 98       	mov	r8,r12
80024c2e:	ef 48 ff fc 	st.w	r7[-4],r8
	eic->icr = 1 << line_number;
80024c32:	ee f8 ff f4 	ld.w	r8,r7[-12]
80024c36:	30 19       	mov	r9,1
80024c38:	f2 08 09 48 	lsl	r8,r9,r8
80024c3c:	10 99       	mov	r9,r8
80024c3e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80024c42:	91 49       	st.w	r8[0x10],r9
	eic->isr;
80024c44:	ee f8 ff f8 	ld.w	r8,r7[-8]
80024c48:	70 38       	ld.w	r8,r8[0xc]
	cpu_irq_restore(flags);
80024c4a:	ee fc ff fc 	ld.w	r12,r7[-4]
80024c4e:	fe b0 fd 98 	rcall	8002477e <cpu_irq_restore>
}
80024c52:	2f dd       	sub	sp,-12
80024c54:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80024c58:	80 02       	ld.sh	r2,r0[0x0]
80024c5a:	4a a2       	lddpc	r2,80024d00 <flashc_get_page_region+0x14>

80024c5c <eic_is_interrupt_line_pending>:

bool eic_is_interrupt_line_pending(volatile avr32_eic_t *eic, uint32_t line_number)
{
80024c5c:	eb cd 40 80 	pushm	r7,lr
80024c60:	1a 97       	mov	r7,sp
80024c62:	20 2d       	sub	sp,8
80024c64:	ef 4c ff fc 	st.w	r7[-4],r12
80024c68:	ef 4b ff f8 	st.w	r7[-8],r11
	return (eic->isr & (1 << line_number)) != 0;
80024c6c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024c70:	70 39       	ld.w	r9,r8[0xc]
80024c72:	ee f8 ff f8 	ld.w	r8,r7[-8]
80024c76:	30 1a       	mov	r10,1
80024c78:	f4 08 09 48 	lsl	r8,r10,r8
80024c7c:	f3 e8 00 08 	and	r8,r9,r8
80024c80:	5f 18       	srne	r8
80024c82:	5c 58       	castu.b	r8
}
80024c84:	10 9c       	mov	r12,r8
80024c86:	2f ed       	sub	sp,-8
80024c88:	e3 cd 80 80 	ldm	sp++,r7,pc

80024c8c <flashc_get_flash_size>:
 */
//! @{


unsigned int flashc_get_flash_size(void)
{
80024c8c:	eb cd 40 c0 	pushm	r6-r7,lr
80024c90:	1a 97       	mov	r7,sp
80024c92:	48 86       	lddpc	r6,80024cb0 <flashc_get_flash_size+0x24>
80024c94:	1e 26       	rsub	r6,pc
     512 << 10,
     768 << 10,
    1024 << 10,
    2048 << 10      
  };
  return FLASH_SIZE[(AVR32_FLASHC.pr & AVR32_FLASHC_PR_FSZ_MASK) >> AVR32_FLASHC_PR_FSZ_OFFSET];
80024c96:	fe 68 00 00 	mov	r8,-131072
80024c9a:	70 38       	ld.w	r8,r8[0xc]
80024c9c:	f3 d8 c0 04 	bfextu	r9,r8,0x0,0x4
80024ca0:	ec f8 08 80 	ld.w	r8,r6[2176]
80024ca4:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
     768 << 10,
    1024 << 10
  };
  return FLASH_SIZE[(AVR32_FLASHC.fsr & AVR32_FLASHC_FSR_FSZ_MASK) >> AVR32_FLASHC_FSR_FSZ_OFFSET];
#endif  
}
80024ca8:	10 9c       	mov	r12,r8
80024caa:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80024cae:	00 00       	add	r0,r0
80024cb0:	80 02       	ld.sh	r2,r0[0x0]
80024cb2:	4b 18       	lddpc	r8,80024d74 <flashc_set_wait_state+0x8>

80024cb4 <flashc_get_page_count>:


unsigned int flashc_get_page_count(void)
{
80024cb4:	eb cd 40 c0 	pushm	r6-r7,lr
80024cb8:	1a 97       	mov	r7,sp
80024cba:	48 56       	lddpc	r6,80024ccc <flashc_get_page_count+0x18>
80024cbc:	1e 26       	rsub	r6,pc
  return flashc_get_flash_size() / AVR32_FLASHC_PAGE_SIZE;
80024cbe:	f0 16 00 bc 	mcall	r6[752]
80024cc2:	18 98       	mov	r8,r12
80024cc4:	a9 98       	lsr	r8,0x9
}
80024cc6:	10 9c       	mov	r12,r8
80024cc8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80024ccc:	80 02       	ld.sh	r2,r0[0x0]
80024cce:	4b 40       	lddpc	r0,80024d9c <flashc_set_wait_state+0x30>

80024cd0 <flashc_get_page_count_per_region>:


unsigned int flashc_get_page_count_per_region(void)
{
80024cd0:	eb cd 40 c0 	pushm	r6-r7,lr
80024cd4:	1a 97       	mov	r7,sp
80024cd6:	48 56       	lddpc	r6,80024ce8 <flashc_get_page_count_per_region+0x18>
80024cd8:	1e 26       	rsub	r6,pc
  return flashc_get_page_count() / AVR32_FLASHC_REGIONS;
80024cda:	f0 16 00 fb 	mcall	r6[1004]
80024cde:	18 98       	mov	r8,r12
80024ce0:	a5 88       	lsr	r8,0x4
}
80024ce2:	10 9c       	mov	r12,r8
80024ce4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80024ce8:	80 02       	ld.sh	r2,r0[0x0]
80024cea:	4b 5c       	lddpc	r12,80024dbc <flashc_set_bus_freq+0xa>

80024cec <flashc_get_page_region>:


unsigned int flashc_get_page_region(int page_number)
{
80024cec:	eb cd 40 e0 	pushm	r5-r7,lr
80024cf0:	1a 97       	mov	r7,sp
80024cf2:	20 1d       	sub	sp,4
80024cf4:	48 c6       	lddpc	r6,80024d24 <flashc_get_page_region+0x38>
80024cf6:	1e 26       	rsub	r6,pc
80024cf8:	ef 4c ff fc 	st.w	r7[-4],r12
  return ((page_number >= 0) ? page_number : flashc_get_page_number()) / flashc_get_page_count_per_region();
80024cfc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024d00:	58 08       	cp.w	r8,0
80024d02:	c0 45       	brlt	80024d0a <flashc_get_page_region+0x1e>
80024d04:	ee f5 ff fc 	ld.w	r5,r7[-4]
80024d08:	c0 58       	rjmp	80024d12 <flashc_get_page_region+0x26>
80024d0a:	f0 16 01 80 	mcall	r6[1536]
80024d0e:	18 98       	mov	r8,r12
80024d10:	10 95       	mov	r5,r8
80024d12:	f0 16 01 0a 	mcall	r6[1064]
80024d16:	18 98       	mov	r8,r12
80024d18:	ea 08 0d 08 	divu	r8,r5,r8
}
80024d1c:	10 9c       	mov	r12,r8
80024d1e:	2f fd       	sub	sp,-4
80024d20:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80024d24:	80 02       	ld.sh	r2,r0[0x0]
80024d26:	4b 7a       	lddpc	r10,80024e00 <flashc_is_ready_int_enabled+0x14>

80024d28 <flashc_get_region_first_page_number>:


unsigned int flashc_get_region_first_page_number(unsigned int region)
{
80024d28:	eb cd 40 c0 	pushm	r6-r7,lr
80024d2c:	1a 97       	mov	r7,sp
80024d2e:	20 1d       	sub	sp,4
80024d30:	48 86       	lddpc	r6,80024d50 <flashc_get_region_first_page_number+0x28>
80024d32:	1e 26       	rsub	r6,pc
80024d34:	ef 4c ff fc 	st.w	r7[-4],r12
  return region * flashc_get_page_count_per_region();
80024d38:	f0 16 01 0a 	mcall	r6[1064]
80024d3c:	18 99       	mov	r9,r12
80024d3e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024d42:	f2 08 02 48 	mul	r8,r9,r8
}
80024d46:	10 9c       	mov	r12,r8
80024d48:	2f fd       	sub	sp,-4
80024d4a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80024d4e:	00 00       	add	r0,r0
80024d50:	80 02       	ld.sh	r2,r0[0x0]
80024d52:	4b b6       	lddpc	r6,80024e3c <flashc_enable_ready_int+0x38>

80024d54 <flashc_get_wait_state>:
 */
//! @{


unsigned int flashc_get_wait_state(void)
{
80024d54:	eb cd 40 80 	pushm	r7,lr
80024d58:	1a 97       	mov	r7,sp
  return (AVR32_FLASHC.fcr & AVR32_FLASHC_FCR_FWS_MASK) >> AVR32_FLASHC_FCR_FWS_OFFSET;
80024d5a:	fe 68 00 00 	mov	r8,-131072
80024d5e:	70 08       	ld.w	r8,r8[0x0]
80024d60:	e2 18 00 40 	andl	r8,0x40,COH
80024d64:	a7 88       	lsr	r8,0x6
}
80024d66:	10 9c       	mov	r12,r8
80024d68:	e3 cd 80 80 	ldm	sp++,r7,pc

80024d6c <flashc_set_wait_state>:


void flashc_set_wait_state(unsigned int wait_state)
{
80024d6c:	eb cd 40 80 	pushm	r7,lr
80024d70:	1a 97       	mov	r7,sp
80024d72:	20 2d       	sub	sp,8
80024d74:	ef 4c ff f8 	st.w	r7[-8],r12
  u_avr32_flashc_fcr_t u_avr32_flashc_fcr = {AVR32_FLASHC.fcr};
80024d78:	fe 68 00 00 	mov	r8,-131072
80024d7c:	70 08       	ld.w	r8,r8[0x0]
80024d7e:	30 09       	mov	r9,0
80024d80:	ef 49 ff fc 	st.w	r7[-4],r9
80024d84:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_flashc_fcr.FCR.fws = wait_state;
80024d88:	ee f8 ff f8 	ld.w	r8,r7[-8]
80024d8c:	5c 58       	castu.b	r8
80024d8e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80024d92:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80024d96:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024d9a:	f1 d9 d0 c1 	bfins	r8,r9,0x6,0x1
80024d9e:	ef 48 ff fc 	st.w	r7[-4],r8
  AVR32_FLASHC.fcr = u_avr32_flashc_fcr.fcr;
80024da2:	fe 68 00 00 	mov	r8,-131072
80024da6:	ee f9 ff fc 	ld.w	r9,r7[-4]
80024daa:	91 09       	st.w	r8[0x0],r9
}
80024dac:	2f ed       	sub	sp,-8
80024dae:	e3 cd 80 80 	ldm	sp++,r7,pc

80024db2 <flashc_set_bus_freq>:


void flashc_set_bus_freq(unsigned int cpu_f_hz)
{
80024db2:	eb cd 40 c0 	pushm	r6-r7,lr
80024db6:	1a 97       	mov	r7,sp
80024db8:	20 1d       	sub	sp,4
80024dba:	48 c6       	lddpc	r6,80024de8 <flashc_set_bus_freq+0x36>
80024dbc:	1e 26       	rsub	r6,pc
80024dbe:	ef 4c ff fc 	st.w	r7[-4],r12
  if(cpu_f_hz >= AVR32_FLASHC_FWS_0_MAX_FREQ)
80024dc2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024dc6:	e0 69 8a 3f 	mov	r9,35391
80024dca:	ea 19 01 f7 	orh	r9,0x1f7
80024dce:	12 38       	cp.w	r8,r9
80024dd0:	e0 88 00 06 	brls	80024ddc <flashc_set_bus_freq+0x2a>
  {
    // Set 1 WS.
    flashc_set_wait_state(1);
80024dd4:	30 1c       	mov	r12,1
80024dd6:	f0 16 00 91 	mcall	r6[580]
80024dda:	c0 48       	rjmp	80024de2 <flashc_set_bus_freq+0x30>
  }
  else
  {
    // Set 0 WS.
    flashc_set_wait_state(0);
80024ddc:	30 0c       	mov	r12,0
80024dde:	f0 16 00 91 	mcall	r6[580]
  }
}
80024de2:	2f fd       	sub	sp,-4
80024de4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80024de8:	80 02       	ld.sh	r2,r0[0x0]
80024dea:	4c 40       	lddpc	r0,80024ef8 <flashc_is_ready+0x6>

80024dec <flashc_is_ready_int_enabled>:

bool flashc_is_ready_int_enabled(void)
{
80024dec:	eb cd 40 80 	pushm	r7,lr
80024df0:	1a 97       	mov	r7,sp
  return ((AVR32_FLASHC.fcr & AVR32_FLASHC_FCR_FRDY_MASK) != 0);
80024df2:	fe 68 00 00 	mov	r8,-131072
80024df6:	70 08       	ld.w	r8,r8[0x0]
80024df8:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80024dfc:	5c 58       	castu.b	r8
}
80024dfe:	10 9c       	mov	r12,r8
80024e00:	e3 cd 80 80 	ldm	sp++,r7,pc

80024e04 <flashc_enable_ready_int>:


void flashc_enable_ready_int(bool enable)
{
80024e04:	eb cd 40 80 	pushm	r7,lr
80024e08:	1a 97       	mov	r7,sp
80024e0a:	20 2d       	sub	sp,8
80024e0c:	18 98       	mov	r8,r12
80024e0e:	ef 68 ff f8 	st.b	r7[-8],r8
  u_avr32_flashc_fcr_t u_avr32_flashc_fcr = {AVR32_FLASHC.fcr};
80024e12:	fe 68 00 00 	mov	r8,-131072
80024e16:	70 08       	ld.w	r8,r8[0x0]
80024e18:	30 09       	mov	r9,0
80024e1a:	ef 49 ff fc 	st.w	r7[-4],r9
80024e1e:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_flashc_fcr.FCR.frdy = (enable != false);
80024e22:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024e26:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80024e2a:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
80024e2e:	ef 48 ff fc 	st.w	r7[-4],r8
  AVR32_FLASHC.fcr = u_avr32_flashc_fcr.fcr;
80024e32:	fe 68 00 00 	mov	r8,-131072
80024e36:	ee f9 ff fc 	ld.w	r9,r7[-4]
80024e3a:	91 09       	st.w	r8[0x0],r9
}
80024e3c:	2f ed       	sub	sp,-8
80024e3e:	e3 cd 80 80 	ldm	sp++,r7,pc

80024e42 <flashc_is_lock_error_int_enabled>:


bool flashc_is_lock_error_int_enabled(void)
{
80024e42:	eb cd 40 80 	pushm	r7,lr
80024e46:	1a 97       	mov	r7,sp
  return ((AVR32_FLASHC.fcr & AVR32_FLASHC_FCR_LOCKE_MASK) != 0);
80024e48:	fe 68 00 00 	mov	r8,-131072
80024e4c:	70 08       	ld.w	r8,r8[0x0]
80024e4e:	e2 18 00 04 	andl	r8,0x4,COH
80024e52:	5f 18       	srne	r8
80024e54:	5c 58       	castu.b	r8
}
80024e56:	10 9c       	mov	r12,r8
80024e58:	e3 cd 80 80 	ldm	sp++,r7,pc

80024e5c <flashc_enable_lock_error_int>:


void flashc_enable_lock_error_int(bool enable)
{
80024e5c:	eb cd 40 80 	pushm	r7,lr
80024e60:	1a 97       	mov	r7,sp
80024e62:	20 2d       	sub	sp,8
80024e64:	18 98       	mov	r8,r12
80024e66:	ef 68 ff f8 	st.b	r7[-8],r8
  u_avr32_flashc_fcr_t u_avr32_flashc_fcr = {AVR32_FLASHC.fcr};
80024e6a:	fe 68 00 00 	mov	r8,-131072
80024e6e:	70 08       	ld.w	r8,r8[0x0]
80024e70:	30 09       	mov	r9,0
80024e72:	ef 49 ff fc 	st.w	r7[-4],r9
80024e76:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_flashc_fcr.FCR.locke = (enable != false);
80024e7a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024e7e:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80024e82:	f1 d9 d0 41 	bfins	r8,r9,0x2,0x1
80024e86:	ef 48 ff fc 	st.w	r7[-4],r8
  AVR32_FLASHC.fcr = u_avr32_flashc_fcr.fcr;
80024e8a:	fe 68 00 00 	mov	r8,-131072
80024e8e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80024e92:	91 09       	st.w	r8[0x0],r9
}
80024e94:	2f ed       	sub	sp,-8
80024e96:	e3 cd 80 80 	ldm	sp++,r7,pc

80024e9a <flashc_is_prog_error_int_enabled>:


bool flashc_is_prog_error_int_enabled(void)
{
80024e9a:	eb cd 40 80 	pushm	r7,lr
80024e9e:	1a 97       	mov	r7,sp
  return ((AVR32_FLASHC.fcr & AVR32_FLASHC_FCR_PROGE_MASK) != 0);
80024ea0:	fe 68 00 00 	mov	r8,-131072
80024ea4:	70 08       	ld.w	r8,r8[0x0]
80024ea6:	e2 18 00 08 	andl	r8,0x8,COH
80024eaa:	5f 18       	srne	r8
80024eac:	5c 58       	castu.b	r8
}
80024eae:	10 9c       	mov	r12,r8
80024eb0:	e3 cd 80 80 	ldm	sp++,r7,pc

80024eb4 <flashc_enable_prog_error_int>:


void flashc_enable_prog_error_int(bool enable)
{
80024eb4:	eb cd 40 80 	pushm	r7,lr
80024eb8:	1a 97       	mov	r7,sp
80024eba:	20 2d       	sub	sp,8
80024ebc:	18 98       	mov	r8,r12
80024ebe:	ef 68 ff f8 	st.b	r7[-8],r8
  u_avr32_flashc_fcr_t u_avr32_flashc_fcr = {AVR32_FLASHC.fcr};
80024ec2:	fe 68 00 00 	mov	r8,-131072
80024ec6:	70 08       	ld.w	r8,r8[0x0]
80024ec8:	30 09       	mov	r9,0
80024eca:	ef 49 ff fc 	st.w	r7[-4],r9
80024ece:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_flashc_fcr.FCR.proge = (enable != false);
80024ed2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024ed6:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80024eda:	f1 d9 d0 61 	bfins	r8,r9,0x3,0x1
80024ede:	ef 48 ff fc 	st.w	r7[-4],r8
  AVR32_FLASHC.fcr = u_avr32_flashc_fcr.fcr;
80024ee2:	fe 68 00 00 	mov	r8,-131072
80024ee6:	ee f9 ff fc 	ld.w	r9,r7[-4]
80024eea:	91 09       	st.w	r8[0x0],r9
}
80024eec:	2f ed       	sub	sp,-8
80024eee:	e3 cd 80 80 	ldm	sp++,r7,pc

80024ef2 <flashc_is_ready>:
 */
//! @{


bool flashc_is_ready(void)
{
80024ef2:	eb cd 40 80 	pushm	r7,lr
80024ef6:	1a 97       	mov	r7,sp
  return ((AVR32_FLASHC.fsr & AVR32_FLASHC_FSR_FRDY_MASK) != 0);
80024ef8:	fe 68 00 00 	mov	r8,-131072
80024efc:	70 28       	ld.w	r8,r8[0x8]
80024efe:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80024f02:	5c 58       	castu.b	r8
}
80024f04:	10 9c       	mov	r12,r8
80024f06:	e3 cd 80 80 	ldm	sp++,r7,pc

80024f0a <flashc_default_wait_until_ready>:


void flashc_default_wait_until_ready(void)
{
80024f0a:	eb cd 40 c0 	pushm	r6-r7,lr
80024f0e:	1a 97       	mov	r7,sp
80024f10:	48 66       	lddpc	r6,80024f28 <flashc_default_wait_until_ready+0x1e>
80024f12:	1e 26       	rsub	r6,pc
  while (!flashc_is_ready());
80024f14:	f0 16 01 a2 	mcall	r6[1672]
80024f18:	18 98       	mov	r8,r12
80024f1a:	ec 18 00 01 	eorl	r8,0x1
80024f1e:	5c 58       	castu.b	r8
80024f20:	cf a1       	brne	80024f14 <flashc_default_wait_until_ready+0xa>
}
80024f22:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80024f26:	00 00       	add	r0,r0
80024f28:	80 02       	ld.sh	r2,r0[0x0]
80024f2a:	4d 96       	lddpc	r6,8002508c <flashc_is_security_bit_active+0x10>

80024f2c <flashc_get_error_status>:
 *          Flash Status Register (FSR). This function is therefore not part of
 *          the driver's API which instead presents \ref flashc_is_lock_error
 *          and \ref flashc_is_programming_error.
 */
static unsigned int flashc_get_error_status(void)
{
80024f2c:	eb cd 40 80 	pushm	r7,lr
80024f30:	1a 97       	mov	r7,sp
  return AVR32_FLASHC.fsr & (AVR32_FLASHC_FSR_LOCKE_MASK |
80024f32:	fe 68 00 00 	mov	r8,-131072
80024f36:	70 28       	ld.w	r8,r8[0x8]
80024f38:	e2 18 00 0c 	andl	r8,0xc,COH
                             AVR32_FLASHC_FSR_PROGE_MASK);
}
80024f3c:	10 9c       	mov	r12,r8
80024f3e:	e3 cd 80 80 	ldm	sp++,r7,pc

80024f42 <flashc_is_lock_error>:
//! by a function.
static unsigned int flashc_error_status = 0;


bool flashc_is_lock_error(void)
{
80024f42:	eb cd 40 c0 	pushm	r6-r7,lr
80024f46:	1a 97       	mov	r7,sp
80024f48:	48 66       	lddpc	r6,80024f60 <flashc_is_lock_error+0x1e>
80024f4a:	1e 26       	rsub	r6,pc
  return ((flashc_error_status & AVR32_FLASHC_FSR_LOCKE_MASK) != 0);
80024f4c:	ec f8 00 54 	ld.w	r8,r6[84]
80024f50:	70 08       	ld.w	r8,r8[0x0]
80024f52:	e2 18 00 04 	andl	r8,0x4,COH
80024f56:	5f 18       	srne	r8
80024f58:	5c 58       	castu.b	r8
}
80024f5a:	10 9c       	mov	r12,r8
80024f5c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80024f60:	80 02       	ld.sh	r2,r0[0x0]
80024f62:	4d ce       	lddpc	lr,800250d0 <flashc_get_bootloader_protected_size+0x20>

80024f64 <flashc_is_programming_error>:


bool flashc_is_programming_error(void)
{
80024f64:	eb cd 40 c0 	pushm	r6-r7,lr
80024f68:	1a 97       	mov	r7,sp
80024f6a:	48 76       	lddpc	r6,80024f84 <flashc_is_programming_error+0x20>
80024f6c:	1e 26       	rsub	r6,pc
  return ((flashc_error_status & AVR32_FLASHC_FSR_PROGE_MASK) != 0);
80024f6e:	ec f8 00 54 	ld.w	r8,r6[84]
80024f72:	70 08       	ld.w	r8,r8[0x0]
80024f74:	e2 18 00 08 	andl	r8,0x8,COH
80024f78:	5f 18       	srne	r8
80024f7a:	5c 58       	castu.b	r8
}
80024f7c:	10 9c       	mov	r12,r8
80024f7e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80024f82:	00 00       	add	r0,r0
80024f84:	80 02       	ld.sh	r2,r0[0x0]
80024f86:	4d f0       	lddpc	r0,80025100 <flashc_set_bootloader_protected_size+0xc>

80024f88 <flashc_get_command>:
 */
//! @{


unsigned int flashc_get_command(void)
{
80024f88:	eb cd 40 80 	pushm	r7,lr
80024f8c:	1a 97       	mov	r7,sp
  return (AVR32_FLASHC.fcmd & AVR32_FLASHC_FCMD_CMD_MASK) >> AVR32_FLASHC_FCMD_CMD_OFFSET;
80024f8e:	fe 68 00 00 	mov	r8,-131072
80024f92:	70 18       	ld.w	r8,r8[0x4]
80024f94:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
}
80024f98:	10 9c       	mov	r12,r8
80024f9a:	e3 cd 80 80 	ldm	sp++,r7,pc

80024f9e <flashc_get_page_number>:


unsigned int flashc_get_page_number(void)
{
80024f9e:	eb cd 40 80 	pushm	r7,lr
80024fa2:	1a 97       	mov	r7,sp
  return (AVR32_FLASHC.fcmd & AVR32_FLASHC_FCMD_PAGEN_MASK) >> AVR32_FLASHC_FCMD_PAGEN_OFFSET;
80024fa4:	fe 68 00 00 	mov	r8,-131072
80024fa8:	70 18       	ld.w	r8,r8[0x4]
80024faa:	e4 18 00 ff 	andh	r8,0xff
80024fae:	e0 18 ff 00 	andl	r8,0xff00
80024fb2:	a9 88       	lsr	r8,0x8
}
80024fb4:	10 9c       	mov	r12,r8
80024fb6:	e3 cd 80 80 	ldm	sp++,r7,pc

80024fba <flashc_issue_command>:


void flashc_issue_command(unsigned int command, int page_number)
{
80024fba:	eb cd 40 c0 	pushm	r6-r7,lr
80024fbe:	1a 97       	mov	r7,sp
80024fc0:	20 3d       	sub	sp,12
80024fc2:	4a 06       	lddpc	r6,80025040 <flashc_issue_command+0x86>
80024fc4:	1e 26       	rsub	r6,pc
80024fc6:	ef 4c ff f8 	st.w	r7[-8],r12
80024fca:	ef 4b ff f4 	st.w	r7[-12],r11
  u_avr32_flashc_fcmd_t u_avr32_flashc_fcmd;
  flashc_wait_until_ready();
80024fce:	ec f8 04 80 	ld.w	r8,r6[1152]
80024fd2:	70 08       	ld.w	r8,r8[0x0]
80024fd4:	5d 18       	icall	r8
  u_avr32_flashc_fcmd.fcmd = AVR32_FLASHC.fcmd;
80024fd6:	fe 68 00 00 	mov	r8,-131072
80024fda:	70 18       	ld.w	r8,r8[0x4]
80024fdc:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_flashc_fcmd.FCMD.cmd = command;
80024fe0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80024fe4:	5c 58       	castu.b	r8
80024fe6:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
80024fea:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80024fee:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024ff2:	f1 d9 d0 06 	bfins	r8,r9,0x0,0x6
80024ff6:	ef 48 ff fc 	st.w	r7[-4],r8
  if (page_number >= 0) u_avr32_flashc_fcmd.FCMD.pagen = page_number;
80024ffa:	ee f8 ff f4 	ld.w	r8,r7[-12]
80024ffe:	58 08       	cp.w	r8,0
80025000:	c0 b5       	brlt	80025016 <flashc_issue_command+0x5c>
80025002:	ee f8 ff f4 	ld.w	r8,r7[-12]
80025006:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
8002500a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002500e:	f1 d9 d1 10 	bfins	r8,r9,0x8,0x10
80025012:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_flashc_fcmd.FCMD.key = AVR32_FLASHC_FCMD_KEY_KEY;
80025016:	3a 58       	mov	r8,-91
80025018:	ef 68 ff fc 	st.b	r7[-4],r8
  AVR32_FLASHC.fcmd = u_avr32_flashc_fcmd.fcmd;
8002501c:	fe 68 00 00 	mov	r8,-131072
80025020:	ee f9 ff fc 	ld.w	r9,r7[-4]
80025024:	91 19       	st.w	r8[0x4],r9
  flashc_error_status = flashc_get_error_status();
80025026:	c8 3f       	rcall	80024f2c <flashc_get_error_status>
80025028:	18 99       	mov	r9,r12
8002502a:	ec f8 00 54 	ld.w	r8,r6[84]
8002502e:	91 09       	st.w	r8[0x0],r9
  flashc_wait_until_ready();
80025030:	ec f8 04 80 	ld.w	r8,r6[1152]
80025034:	70 08       	ld.w	r8,r8[0x0]
80025036:	5d 18       	icall	r8
}
80025038:	2f dd       	sub	sp,-12
8002503a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002503e:	00 00       	add	r0,r0
80025040:	80 02       	ld.sh	r2,r0[0x0]
80025042:	4e 48       	lddpc	r8,800251d0 <flashc_lock_external_privileged_fetch+0x1c>

80025044 <flashc_no_operation>:
 */
//! @{


void flashc_no_operation(void)
{
80025044:	eb cd 40 c0 	pushm	r6-r7,lr
80025048:	1a 97       	mov	r7,sp
8002504a:	48 56       	lddpc	r6,8002505c <flashc_no_operation+0x18>
8002504c:	1e 26       	rsub	r6,pc
  flashc_issue_command(AVR32_FLASHC_FCMD_CMD_NOP, -1);
8002504e:	3f fb       	mov	r11,-1
80025050:	30 0c       	mov	r12,0
80025052:	f0 16 00 28 	mcall	r6[160]
}
80025056:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002505a:	00 00       	add	r0,r0
8002505c:	80 02       	ld.sh	r2,r0[0x0]
8002505e:	4e d0       	lddpc	r0,80025210 <flashc_is_page_region_locked+0x2c>

80025060 <flashc_erase_all>:


void flashc_erase_all(void)
{
80025060:	eb cd 40 c0 	pushm	r6-r7,lr
80025064:	1a 97       	mov	r7,sp
80025066:	48 56       	lddpc	r6,80025078 <flashc_erase_all+0x18>
80025068:	1e 26       	rsub	r6,pc
  flashc_issue_command(AVR32_FLASHC_FCMD_CMD_EA, -1);
8002506a:	3f fb       	mov	r11,-1
8002506c:	30 6c       	mov	r12,6
8002506e:	f0 16 00 28 	mcall	r6[160]
}
80025072:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80025076:	00 00       	add	r0,r0
80025078:	80 02       	ld.sh	r2,r0[0x0]
8002507a:	4e ec       	lddpc	r12,80025230 <flashc_is_region_locked+0x1c>

8002507c <flashc_is_security_bit_active>:
 */
//! @{


bool flashc_is_security_bit_active(void)
{
8002507c:	eb cd 40 80 	pushm	r7,lr
80025080:	1a 97       	mov	r7,sp
  return ((AVR32_FLASHC.fsr & AVR32_FLASHC_FSR_SECURITY_MASK) != 0);
80025082:	fe 68 00 00 	mov	r8,-131072
80025086:	70 28       	ld.w	r8,r8[0x8]
80025088:	e2 18 00 10 	andl	r8,0x10,COH
8002508c:	5f 18       	srne	r8
8002508e:	5c 58       	castu.b	r8
}
80025090:	10 9c       	mov	r12,r8
80025092:	e3 cd 80 80 	ldm	sp++,r7,pc

80025096 <flashc_activate_security_bit>:


void flashc_activate_security_bit(void)
{
80025096:	eb cd 40 c0 	pushm	r6-r7,lr
8002509a:	1a 97       	mov	r7,sp
8002509c:	48 46       	lddpc	r6,800250ac <flashc_activate_security_bit+0x16>
8002509e:	1e 26       	rsub	r6,pc
  flashc_issue_command(AVR32_FLASHC_FCMD_CMD_SSB, -1);
800250a0:	3f fb       	mov	r11,-1
800250a2:	30 9c       	mov	r12,9
800250a4:	f0 16 00 28 	mcall	r6[160]
}
800250a8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800250ac:	80 02       	ld.sh	r2,r0[0x0]
800250ae:	4f 22       	lddpc	r2,80025274 <flashc_lock_page_region+0x2e>

800250b0 <flashc_get_bootloader_protected_size>:


unsigned int flashc_get_bootloader_protected_size(void)
{
800250b0:	eb cd 40 c0 	pushm	r6-r7,lr
800250b4:	1a 97       	mov	r7,sp
800250b6:	20 1d       	sub	sp,4
800250b8:	48 e6       	lddpc	r6,800250f0 <flashc_get_bootloader_protected_size+0x40>
800250ba:	1e 26       	rsub	r6,pc
  unsigned int bootprot = (1 << AVR32_FLASHC_FGPFRLO_BOOTPROT_SIZE) - 1 -
                          flashc_read_gp_fuse_bitfield(AVR32_FLASHC_FGPFRLO_BOOTPROT_OFFSET,
                                                       AVR32_FLASHC_FGPFRLO_BOOTPROT_SIZE);
800250bc:	30 3b       	mov	r11,3
800250be:	31 1c       	mov	r12,17
800250c0:	f0 16 01 21 	mcall	r6[1156]
800250c4:	14 98       	mov	r8,r10
800250c6:	16 99       	mov	r9,r11
800250c8:	f0 08 11 07 	rsub	r8,r8,7
800250cc:	ef 48 ff fc 	st.w	r7[-4],r8
  return (bootprot) ? AVR32_FLASHC_PAGE_SIZE << bootprot : 0;
800250d0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800250d4:	58 08       	cp.w	r8,0
800250d6:	c0 80       	breq	800250e6 <flashc_get_bootloader_protected_size+0x36>
800250d8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800250dc:	e0 69 02 00 	mov	r9,512
800250e0:	f2 08 09 48 	lsl	r8,r9,r8
800250e4:	c0 28       	rjmp	800250e8 <flashc_get_bootloader_protected_size+0x38>
800250e6:	30 08       	mov	r8,0
}
800250e8:	10 9c       	mov	r12,r8
800250ea:	2f fd       	sub	sp,-4
800250ec:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800250f0:	80 02       	ld.sh	r2,r0[0x0]
800250f2:	4f 3e       	lddpc	lr,800252bc <flashc_lock_all_regions>

800250f4 <flashc_set_bootloader_protected_size>:


unsigned int flashc_set_bootloader_protected_size(unsigned int bootprot_size)
{
800250f4:	eb cd 40 c0 	pushm	r6-r7,lr
800250f8:	1a 97       	mov	r7,sp
800250fa:	20 7d       	sub	sp,28
800250fc:	4a 46       	lddpc	r6,8002518c <flashc_set_bootloader_protected_size+0x98>
800250fe:	1e 26       	rsub	r6,pc
80025100:	ef 4c ff e4 	st.w	r7[-28],r12
  flashc_set_gp_fuse_bitfield(AVR32_FLASHC_FGPFRLO_BOOTPROT_OFFSET,
80025104:	ee fa ff e4 	ld.w	r10,r7[-28]
80025108:	58 0a       	cp.w	r10,0
8002510a:	c3 40       	breq	80025172 <flashc_set_bootloader_protected_size+0x7e>
                              AVR32_FLASHC_FGPFRLO_BOOTPROT_SIZE,
                              (1 << AVR32_FLASHC_FGPFRLO_BOOTPROT_SIZE) - 1 -
                              ((bootprot_size) ?
                               32 - clz((((min(max(bootprot_size, AVR32_FLASHC_PAGE_SIZE << 1),
8002510c:	ee fa ff e4 	ld.w	r10,r7[-28]
80025110:	ef 4a ff f8 	st.w	r7[-8],r10
80025114:	e0 6a 04 00 	mov	r10,1024
80025118:	ef 4a ff fc 	st.w	r7[-4],r10
8002511c:	ee fa ff f8 	ld.w	r10,r7[-8]
80025120:	ee fb ff fc 	ld.w	r11,r7[-4]
80025124:	f4 0b 0c 4a 	max	r10,r10,r11
80025128:	ef 4a ff f4 	st.w	r7[-12],r10
8002512c:	ee fa ff f4 	ld.w	r10,r7[-12]
80025130:	ef 4a ff ec 	st.w	r7[-20],r10
80025134:	e0 7a 00 00 	mov	r10,65536
80025138:	ef 4a ff f0 	st.w	r7[-16],r10
8002513c:	ee fa ff ec 	ld.w	r10,r7[-20]
80025140:	ee fb ff f0 	ld.w	r11,r7[-16]
80025144:	f4 0b 0d 4a 	min	r10,r10,r11
80025148:	ef 4a ff e8 	st.w	r7[-24],r10
8002514c:	ee fa ff e8 	ld.w	r10,r7[-24]
80025150:	f4 ca fe 01 	sub	r10,r10,-511
80025154:	f4 cb fe 01 	sub	r11,r10,-511
80025158:	58 0a       	cp.w	r10,0
8002515a:	f6 0a 17 50 	movlt	r10,r11
8002515e:	a9 5a       	asr	r10,0x9
80025160:	a1 7a       	lsl	r10,0x1
80025162:	20 1a       	sub	r10,1
}


unsigned int flashc_set_bootloader_protected_size(unsigned int bootprot_size)
{
  flashc_set_gp_fuse_bitfield(AVR32_FLASHC_FGPFRLO_BOOTPROT_OFFSET,
80025164:	f4 0a 12 00 	clz	r10,r10
80025168:	21 8a       	sub	r10,24
8002516a:	14 98       	mov	r8,r10
8002516c:	bf 5a       	asr	r10,0x1f
8002516e:	14 99       	mov	r9,r10
80025170:	c0 38       	rjmp	80025176 <flashc_set_bootloader_protected_size+0x82>
80025172:	30 78       	mov	r8,7
80025174:	30 09       	mov	r9,0
80025176:	30 3b       	mov	r11,3
80025178:	31 1c       	mov	r12,17
8002517a:	f0 16 01 4d 	mcall	r6[1332]
                                               AVR32_FLASHC_PAGE_SIZE <<
                                               ((1 << AVR32_FLASHC_FGPFRLO_BOOTPROT_SIZE) - 1)) +
                                           AVR32_FLASHC_PAGE_SIZE - 1) /
                                          AVR32_FLASHC_PAGE_SIZE) << 1) - 1) - 1 :
                               0));
  return flashc_get_bootloader_protected_size();
8002517e:	f0 16 01 5e 	mcall	r6[1400]
80025182:	18 98       	mov	r8,r12
}
80025184:	10 9c       	mov	r12,r8
80025186:	2f 9d       	sub	sp,-28
80025188:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002518c:	80 02       	ld.sh	r2,r0[0x0]
8002518e:	4f 82       	lddpc	r2,8002536c <flashc_read_gp_fuse_bit+0x48>

80025190 <flashc_is_external_privileged_fetch_locked>:


bool flashc_is_external_privileged_fetch_locked(void)
{
80025190:	eb cd 40 c0 	pushm	r6-r7,lr
80025194:	1a 97       	mov	r7,sp
80025196:	48 76       	lddpc	r6,800251b0 <flashc_is_external_privileged_fetch_locked+0x20>
80025198:	1e 26       	rsub	r6,pc
  return (!flashc_read_gp_fuse_bit(AVR32_FLASHC_FGPFRLO_EPFL_OFFSET));
8002519a:	31 0c       	mov	r12,16
8002519c:	f0 16 00 ea 	mcall	r6[936]
800251a0:	18 98       	mov	r8,r12
800251a2:	ec 18 00 01 	eorl	r8,0x1
800251a6:	5c 58       	castu.b	r8
800251a8:	5c 58       	castu.b	r8
}
800251aa:	10 9c       	mov	r12,r8
800251ac:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800251b0:	80 02       	ld.sh	r2,r0[0x0]
800251b2:	50 1c       	stdsp	sp[0x4],r12

800251b4 <flashc_lock_external_privileged_fetch>:


void flashc_lock_external_privileged_fetch(bool lock)
{
800251b4:	eb cd 40 c0 	pushm	r6-r7,lr
800251b8:	1a 97       	mov	r7,sp
800251ba:	20 1d       	sub	sp,4
800251bc:	48 96       	lddpc	r6,800251e0 <flashc_lock_external_privileged_fetch+0x2c>
800251be:	1e 26       	rsub	r6,pc
800251c0:	18 98       	mov	r8,r12
800251c2:	ef 68 ff fc 	st.b	r7[-4],r8
  flashc_set_gp_fuse_bit(AVR32_FLASHC_FGPFRLO_EPFL_OFFSET, !lock);
800251c6:	ef 38 ff fc 	ld.ub	r8,r7[-4]
800251ca:	ec 18 00 01 	eorl	r8,0x1
800251ce:	5c 58       	castu.b	r8
800251d0:	5c 58       	castu.b	r8
800251d2:	10 9b       	mov	r11,r8
800251d4:	31 0c       	mov	r12,16
800251d6:	f0 16 01 11 	mcall	r6[1092]
}
800251da:	2f fd       	sub	sp,-4
800251dc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800251e0:	80 02       	ld.sh	r2,r0[0x0]
800251e2:	50 42       	stdsp	sp[0x10],r2

800251e4 <flashc_is_page_region_locked>:


bool flashc_is_page_region_locked(int page_number)
{
800251e4:	eb cd 40 c0 	pushm	r6-r7,lr
800251e8:	1a 97       	mov	r7,sp
800251ea:	20 1d       	sub	sp,4
800251ec:	48 96       	lddpc	r6,80025210 <flashc_is_page_region_locked+0x2c>
800251ee:	1e 26       	rsub	r6,pc
800251f0:	ef 4c ff fc 	st.w	r7[-4],r12
  return flashc_is_region_locked(flashc_get_page_region(page_number));
800251f4:	ee fc ff fc 	ld.w	r12,r7[-4]
800251f8:	f0 16 01 87 	mcall	r6[1564]
800251fc:	18 98       	mov	r8,r12
800251fe:	10 9c       	mov	r12,r8
80025200:	f0 16 01 36 	mcall	r6[1240]
80025204:	18 98       	mov	r8,r12
}
80025206:	10 9c       	mov	r12,r8
80025208:	2f fd       	sub	sp,-4
8002520a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002520e:	00 00       	add	r0,r0
80025210:	80 02       	ld.sh	r2,r0[0x0]
80025212:	50 72       	stdsp	sp[0x1c],r2

80025214 <flashc_is_region_locked>:


bool flashc_is_region_locked(unsigned int region)
{
80025214:	eb cd 40 80 	pushm	r7,lr
80025218:	1a 97       	mov	r7,sp
8002521a:	20 1d       	sub	sp,4
8002521c:	ef 4c ff fc 	st.w	r7[-4],r12
  return ((AVR32_FLASHC.fsr & AVR32_FLASHC_FSR_LOCK0_MASK << (region & (AVR32_FLASHC_REGIONS - 1))) != 0);
80025220:	fe 68 00 00 	mov	r8,-131072
80025224:	70 29       	ld.w	r9,r8[0x8]
80025226:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002522a:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8002522e:	e0 7a 00 00 	mov	r10,65536
80025232:	f4 08 09 48 	lsl	r8,r10,r8
80025236:	f3 e8 00 08 	and	r8,r9,r8
8002523a:	5f 18       	srne	r8
8002523c:	5c 58       	castu.b	r8
}
8002523e:	10 9c       	mov	r12,r8
80025240:	2f fd       	sub	sp,-4
80025242:	e3 cd 80 80 	ldm	sp++,r7,pc

80025246 <flashc_lock_page_region>:


void flashc_lock_page_region(int page_number, bool lock)
{
80025246:	eb cd 40 c0 	pushm	r6-r7,lr
8002524a:	1a 97       	mov	r7,sp
8002524c:	20 2d       	sub	sp,8
8002524e:	48 d6       	lddpc	r6,80025280 <flashc_lock_page_region+0x3a>
80025250:	1e 26       	rsub	r6,pc
80025252:	ef 4c ff fc 	st.w	r7[-4],r12
80025256:	16 98       	mov	r8,r11
80025258:	ef 68 ff f8 	st.b	r7[-8],r8
  flashc_issue_command((lock) ? AVR32_FLASHC_FCMD_CMD_LP : AVR32_FLASHC_FCMD_CMD_UP, page_number);
8002525c:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80025260:	30 08       	mov	r8,0
80025262:	f0 09 18 00 	cp.b	r9,r8
80025266:	c0 30       	breq	8002526c <flashc_lock_page_region+0x26>
80025268:	30 48       	mov	r8,4
8002526a:	c0 28       	rjmp	8002526e <flashc_lock_page_region+0x28>
8002526c:	30 58       	mov	r8,5
8002526e:	ee fb ff fc 	ld.w	r11,r7[-4]
80025272:	10 9c       	mov	r12,r8
80025274:	f0 16 00 28 	mcall	r6[160]
}
80025278:	2f ed       	sub	sp,-8
8002527a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002527e:	00 00       	add	r0,r0
80025280:	80 02       	ld.sh	r2,r0[0x0]
80025282:	50 d4       	stdsp	sp[0x34],r4

80025284 <flashc_lock_region>:


void flashc_lock_region(unsigned int region, bool lock)
{
80025284:	eb cd 40 e0 	pushm	r5-r7,lr
80025288:	1a 97       	mov	r7,sp
8002528a:	20 2d       	sub	sp,8
8002528c:	48 b6       	lddpc	r6,800252b8 <flashc_lock_region+0x34>
8002528e:	1e 26       	rsub	r6,pc
80025290:	ef 4c ff fc 	st.w	r7[-4],r12
80025294:	16 98       	mov	r8,r11
80025296:	ef 68 ff f8 	st.b	r7[-8],r8
  flashc_lock_page_region(flashc_get_region_first_page_number(region), lock);
8002529a:	ef 35 ff f8 	ld.ub	r5,r7[-8]
8002529e:	ee fc ff fc 	ld.w	r12,r7[-4]
800252a2:	f0 16 01 6e 	mcall	r6[1464]
800252a6:	18 98       	mov	r8,r12
800252a8:	0a 9b       	mov	r11,r5
800252aa:	10 9c       	mov	r12,r8
800252ac:	f0 16 01 ee 	mcall	r6[1976]
}
800252b0:	2f ed       	sub	sp,-8
800252b2:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800252b6:	00 00       	add	r0,r0
800252b8:	80 02       	ld.sh	r2,r0[0x0]
800252ba:	51 12       	stdsp	sp[0x44],r2

800252bc <flashc_lock_all_regions>:


void flashc_lock_all_regions(bool lock)
{
800252bc:	eb cd 40 c0 	pushm	r6-r7,lr
800252c0:	1a 97       	mov	r7,sp
800252c2:	20 3d       	sub	sp,12
800252c4:	49 76       	lddpc	r6,80025320 <flashc_lock_all_regions+0x64>
800252c6:	1e 26       	rsub	r6,pc
800252c8:	18 98       	mov	r8,r12
800252ca:	ef 68 ff f4 	st.b	r7[-12],r8
  unsigned int error_status = 0;
800252ce:	30 08       	mov	r8,0
800252d0:	ef 48 ff f8 	st.w	r7[-8],r8
  unsigned int region = AVR32_FLASHC_REGIONS;
800252d4:	31 08       	mov	r8,16
800252d6:	ef 48 ff fc 	st.w	r7[-4],r8
  while (region)
800252da:	c1 68       	rjmp	80025306 <flashc_lock_all_regions+0x4a>
  {
    flashc_lock_region(--region, lock);
800252dc:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800252e0:	ee f9 ff fc 	ld.w	r9,r7[-4]
800252e4:	20 19       	sub	r9,1
800252e6:	ef 49 ff fc 	st.w	r7[-4],r9
800252ea:	10 9b       	mov	r11,r8
800252ec:	ee fc ff fc 	ld.w	r12,r7[-4]
800252f0:	f0 16 01 4e 	mcall	r6[1336]
    error_status |= flashc_error_status;
800252f4:	ec f8 00 54 	ld.w	r8,r6[84]
800252f8:	70 08       	ld.w	r8,r8[0x0]
800252fa:	ee f9 ff f8 	ld.w	r9,r7[-8]
800252fe:	f3 e8 10 08 	or	r8,r9,r8
80025302:	ef 48 ff f8 	st.w	r7[-8],r8

void flashc_lock_all_regions(bool lock)
{
  unsigned int error_status = 0;
  unsigned int region = AVR32_FLASHC_REGIONS;
  while (region)
80025306:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002530a:	58 08       	cp.w	r8,0
8002530c:	ce 81       	brne	800252dc <flashc_lock_all_regions+0x20>
  {
    flashc_lock_region(--region, lock);
    error_status |= flashc_error_status;
  }
  flashc_error_status = error_status;
8002530e:	ec f8 00 54 	ld.w	r8,r6[84]
80025312:	ee f9 ff f8 	ld.w	r9,r7[-8]
80025316:	91 09       	st.w	r8[0x0],r9
}
80025318:	2f dd       	sub	sp,-12
8002531a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002531e:	00 00       	add	r0,r0
80025320:	80 02       	ld.sh	r2,r0[0x0]
80025322:	51 4a       	stdsp	sp[0x50],r10

80025324 <flashc_read_gp_fuse_bit>:
 */
//! @{


bool flashc_read_gp_fuse_bit(unsigned int gp_fuse_bit)
{
80025324:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
80025328:	1a 97       	mov	r7,sp
8002532a:	20 1d       	sub	sp,4
8002532c:	49 66       	lddpc	r6,80025384 <flashc_read_gp_fuse_bit+0x60>
8002532e:	1e 26       	rsub	r6,pc
80025330:	ef 4c ff fc 	st.w	r7[-4],r12
  return ((flashc_read_all_gp_fuses() & 1ULL << (gp_fuse_bit & 0x3F)) != 0);
80025334:	f0 16 00 70 	mcall	r6[448]
80025338:	14 98       	mov	r8,r10
8002533a:	16 99       	mov	r9,r11
8002533c:	ee fa ff fc 	ld.w	r10,r7[-4]
80025340:	f5 da c0 06 	bfextu	r10,r10,0x0,0x6
80025344:	14 9b       	mov	r11,r10
80025346:	e2 1b 00 20 	andl	r11,0x20,COH
8002534a:	30 0c       	mov	r12,0
8002534c:	f2 05 15 01 	lsl	r5,r9,0x1
80025350:	14 9e       	mov	lr,r10
80025352:	ee 1e ff ff 	eorh	lr,0xffff
80025356:	ec 1e ff ff 	eorl	lr,0xffff
8002535a:	ea 0e 09 4e 	lsl	lr,r5,lr
8002535e:	f0 0a 0a 42 	lsr	r2,r8,r10
80025362:	fd e2 10 02 	or	r2,lr,r2
80025366:	f2 0a 0a 43 	lsr	r3,r9,r10
8002536a:	58 0b       	cp.w	r11,0
8002536c:	e6 02 17 10 	movne	r2,r3
80025370:	f8 03 17 10 	movne	r3,r12
80025374:	04 98       	mov	r8,r2
80025376:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002537a:	5c 58       	castu.b	r8
}
8002537c:	10 9c       	mov	r12,r8
8002537e:	2f fd       	sub	sp,-4
80025380:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
80025384:	80 02       	ld.sh	r2,r0[0x0]
80025386:	51 b2       	stdsp	sp[0x6c],r2

80025388 <flashc_read_gp_fuse_bitfield>:


U64 flashc_read_gp_fuse_bitfield(unsigned int pos, unsigned int width)
{
80025388:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
8002538c:	1a 97       	mov	r7,sp
8002538e:	20 5d       	sub	sp,20
80025390:	4b 16       	lddpc	r6,80025454 <flashc_read_gp_fuse_bitfield+0xcc>
80025392:	1e 26       	rsub	r6,pc
80025394:	ef 4c ff f0 	st.w	r7[-16],r12
80025398:	ef 4b ff ec 	st.w	r7[-20],r11
  return flashc_read_all_gp_fuses() >> (pos & 0x3F) & ((1ULL << min(width, 64)) - 1);
8002539c:	f0 16 00 70 	mcall	r6[448]
800253a0:	14 98       	mov	r8,r10
800253a2:	16 99       	mov	r9,r11
800253a4:	ee fa ff f0 	ld.w	r10,r7[-16]
800253a8:	f5 da c0 06 	bfextu	r10,r10,0x0,0x6
800253ac:	14 9b       	mov	r11,r10
800253ae:	e2 1b 00 20 	andl	r11,0x20,COH
800253b2:	30 0c       	mov	r12,0
800253b4:	f2 05 15 01 	lsl	r5,r9,0x1
800253b8:	14 9e       	mov	lr,r10
800253ba:	ee 1e ff ff 	eorh	lr,0xffff
800253be:	ec 1e ff ff 	eorl	lr,0xffff
800253c2:	ea 0e 09 4e 	lsl	lr,r5,lr
800253c6:	f0 0a 0a 42 	lsr	r2,r8,r10
800253ca:	fd e2 10 02 	or	r2,lr,r2
800253ce:	f2 0a 0a 43 	lsr	r3,r9,r10
800253d2:	58 0b       	cp.w	r11,0
800253d4:	e6 02 17 10 	movne	r2,r3
800253d8:	f8 03 17 10 	movne	r3,r12
800253dc:	ee f8 ff ec 	ld.w	r8,r7[-20]
800253e0:	ef 48 ff f8 	st.w	r7[-8],r8
800253e4:	34 08       	mov	r8,64
800253e6:	ef 48 ff fc 	st.w	r7[-4],r8
800253ea:	ee f8 ff f8 	ld.w	r8,r7[-8]
800253ee:	ee f9 ff fc 	ld.w	r9,r7[-4]
800253f2:	f0 09 0d 48 	min	r8,r8,r9
800253f6:	ef 48 ff f4 	st.w	r7[-12],r8
800253fa:	ee f8 ff f4 	ld.w	r8,r7[-12]
800253fe:	10 99       	mov	r9,r8
80025400:	e2 19 00 20 	andl	r9,0x20,COH
80025404:	30 0a       	mov	r10,0
80025406:	30 1b       	mov	r11,1
80025408:	f6 0c 16 01 	lsr	r12,r11,0x1
8002540c:	10 9b       	mov	r11,r8
8002540e:	ee 1b ff ff 	eorh	r11,0xffff
80025412:	ec 1b ff ff 	eorl	r11,0xffff
80025416:	f8 0b 0a 4b 	lsr	r11,r12,r11
8002541a:	30 0c       	mov	r12,0
8002541c:	f8 08 09 41 	lsl	r1,r12,r8
80025420:	f7 e1 10 01 	or	r1,r11,r1
80025424:	30 1b       	mov	r11,1
80025426:	f6 08 09 40 	lsl	r0,r11,r8
8002542a:	58 09       	cp.w	r9,0
8002542c:	e0 01 17 10 	movne	r1,r0
80025430:	f4 00 17 10 	movne	r0,r10
80025434:	3f f8       	mov	r8,-1
80025436:	3f f9       	mov	r9,-1
80025438:	e0 08 00 0a 	add	r10,r0,r8
8002543c:	e2 09 00 4b 	adc	r11,r1,r9
80025440:	e5 ea 00 08 	and	r8,r2,r10
80025444:	e7 eb 00 09 	and	r9,r3,r11
}
80025448:	10 9a       	mov	r10,r8
8002544a:	12 9b       	mov	r11,r9
8002544c:	2f bd       	sub	sp,-20
8002544e:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
80025452:	00 00       	add	r0,r0
80025454:	80 02       	ld.sh	r2,r0[0x0]
80025456:	52 16       	stdsp	sp[0x84],r6

80025458 <flashc_read_gp_fuse_byte>:


U8 flashc_read_gp_fuse_byte(unsigned int gp_fuse_byte)
{
80025458:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
8002545c:	1a 97       	mov	r7,sp
8002545e:	20 1d       	sub	sp,4
80025460:	49 66       	lddpc	r6,800254b8 <flashc_read_gp_fuse_byte+0x60>
80025462:	1e 26       	rsub	r6,pc
80025464:	ef 4c ff fc 	st.w	r7[-4],r12
  return flashc_read_all_gp_fuses() >> ((gp_fuse_byte & 0x07) << 3);
80025468:	f0 16 00 70 	mcall	r6[448]
8002546c:	14 98       	mov	r8,r10
8002546e:	16 99       	mov	r9,r11
80025470:	ee fa ff fc 	ld.w	r10,r7[-4]
80025474:	f5 da c0 03 	bfextu	r10,r10,0x0,0x3
80025478:	a3 7a       	lsl	r10,0x3
8002547a:	14 9b       	mov	r11,r10
8002547c:	e2 1b 00 20 	andl	r11,0x20,COH
80025480:	30 0c       	mov	r12,0
80025482:	f2 05 15 01 	lsl	r5,r9,0x1
80025486:	14 9e       	mov	lr,r10
80025488:	ee 1e ff ff 	eorh	lr,0xffff
8002548c:	ec 1e ff ff 	eorl	lr,0xffff
80025490:	ea 0e 09 4e 	lsl	lr,r5,lr
80025494:	f0 0a 0a 42 	lsr	r2,r8,r10
80025498:	fd e2 10 02 	or	r2,lr,r2
8002549c:	f2 0a 0a 43 	lsr	r3,r9,r10
800254a0:	58 0b       	cp.w	r11,0
800254a2:	e6 02 17 10 	movne	r2,r3
800254a6:	f8 03 17 10 	movne	r3,r12
800254aa:	f1 d2 c0 08 	bfextu	r8,r2,0x0,0x8
}
800254ae:	10 9c       	mov	r12,r8
800254b0:	2f fd       	sub	sp,-4
800254b2:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
800254b6:	00 00       	add	r0,r0
800254b8:	80 02       	ld.sh	r2,r0[0x0]
800254ba:	52 e6       	stdsp	sp[0xb8],r6

800254bc <flashc_read_all_gp_fuses>:


U64 flashc_read_all_gp_fuses(void)
{
800254bc:	eb cd 40 8c 	pushm	r2-r3,r7,lr
800254c0:	1a 97       	mov	r7,sp
  return AVR32_FLASHC.fgpfrlo | (U64)AVR32_FLASHC.fgpfrhi << 32;
800254c2:	fe 6c 00 00 	mov	r12,-131072
800254c6:	78 6c       	ld.w	r12,r12[0x18]
800254c8:	18 9a       	mov	r10,r12
800254ca:	30 0b       	mov	r11,0
800254cc:	fe 6c 00 00 	mov	r12,-131072
800254d0:	78 5c       	ld.w	r12,r12[0x14]
800254d2:	18 92       	mov	r2,r12
800254d4:	30 03       	mov	r3,0
800254d6:	e4 09 15 00 	lsl	r9,r2,0x0
800254da:	30 08       	mov	r8,0
800254dc:	f5 e8 10 02 	or	r2,r10,r8
800254e0:	f7 e9 10 03 	or	r3,r11,r9
800254e4:	04 98       	mov	r8,r2
800254e6:	06 99       	mov	r9,r3
}
800254e8:	10 9a       	mov	r10,r8
800254ea:	12 9b       	mov	r11,r9
800254ec:	e3 cd 80 8c 	ldm	sp++,r2-r3,r7,pc

800254f0 <flashc_erase_gp_fuse_bit>:


bool flashc_erase_gp_fuse_bit(unsigned int gp_fuse_bit, bool check)
{
800254f0:	eb cd 40 c0 	pushm	r6-r7,lr
800254f4:	1a 97       	mov	r7,sp
800254f6:	20 2d       	sub	sp,8
800254f8:	49 06       	lddpc	r6,80025538 <flashc_erase_gp_fuse_bit+0x48>
800254fa:	1e 26       	rsub	r6,pc
800254fc:	ef 4c ff fc 	st.w	r7[-4],r12
80025500:	16 98       	mov	r8,r11
80025502:	ef 68 ff f8 	st.b	r7[-8],r8
  flashc_issue_command(AVR32_FLASHC_FCMD_CMD_EGPB, gp_fuse_bit & 0x3F);
80025506:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002550a:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
8002550e:	10 9b       	mov	r11,r8
80025510:	30 8c       	mov	r12,8
80025512:	f0 16 00 28 	mcall	r6[160]
  return (check) ? flashc_read_gp_fuse_bit(gp_fuse_bit) : true;
80025516:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8002551a:	30 08       	mov	r8,0
8002551c:	f0 09 18 00 	cp.b	r9,r8
80025520:	c0 70       	breq	8002552e <flashc_erase_gp_fuse_bit+0x3e>
80025522:	ee fc ff fc 	ld.w	r12,r7[-4]
80025526:	f0 16 00 ea 	mcall	r6[936]
8002552a:	18 98       	mov	r8,r12
8002552c:	c0 28       	rjmp	80025530 <flashc_erase_gp_fuse_bit+0x40>
8002552e:	30 18       	mov	r8,1
}
80025530:	10 9c       	mov	r12,r8
80025532:	2f ed       	sub	sp,-8
80025534:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80025538:	80 02       	ld.sh	r2,r0[0x0]
8002553a:	53 7e       	stdsp	sp[0xdc],lr

8002553c <flashc_erase_gp_fuse_bitfield>:


bool flashc_erase_gp_fuse_bitfield(unsigned int pos, unsigned int width, bool check)
{
8002553c:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
80025540:	1a 97       	mov	r7,sp
80025542:	20 8d       	sub	sp,32
80025544:	4c 36       	lddpc	r6,80025650 <flashc_erase_gp_fuse_bitfield+0x114>
80025546:	1e 26       	rsub	r6,pc
80025548:	ef 4c ff e8 	st.w	r7[-24],r12
8002554c:	ef 4b ff e4 	st.w	r7[-28],r11
80025550:	14 98       	mov	r8,r10
80025552:	ef 68 ff e0 	st.b	r7[-32],r8
  unsigned int error_status = 0;
80025556:	30 08       	mov	r8,0
80025558:	ef 48 ff ec 	st.w	r7[-20],r8
  unsigned int gp_fuse_bit;
  pos &= 0x3F;
8002555c:	ee f8 ff e8 	ld.w	r8,r7[-24]
80025560:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
80025564:	ef 48 ff e8 	st.w	r7[-24],r8
  width = min(width, 64);
80025568:	ee f8 ff e4 	ld.w	r8,r7[-28]
8002556c:	ef 48 ff f8 	st.w	r7[-8],r8
80025570:	34 08       	mov	r8,64
80025572:	ef 48 ff fc 	st.w	r7[-4],r8
80025576:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002557a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002557e:	f0 09 0d 48 	min	r8,r8,r9
80025582:	ef 48 ff f4 	st.w	r7[-12],r8
80025586:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002558a:	ef 48 ff e4 	st.w	r7[-28],r8
  for (gp_fuse_bit = pos; gp_fuse_bit < pos + width; gp_fuse_bit++)
8002558e:	ee f8 ff e8 	ld.w	r8,r7[-24]
80025592:	ef 48 ff f0 	st.w	r7[-16],r8
80025596:	c1 48       	rjmp	800255be <flashc_erase_gp_fuse_bitfield+0x82>
  {
    flashc_erase_gp_fuse_bit(gp_fuse_bit, false);
80025598:	30 0b       	mov	r11,0
8002559a:	ee fc ff f0 	ld.w	r12,r7[-16]
8002559e:	f0 16 00 e1 	mcall	r6[900]
    error_status |= flashc_error_status;
800255a2:	ec f8 00 54 	ld.w	r8,r6[84]
800255a6:	70 08       	ld.w	r8,r8[0x0]
800255a8:	ee f9 ff ec 	ld.w	r9,r7[-20]
800255ac:	f3 e8 10 08 	or	r8,r9,r8
800255b0:	ef 48 ff ec 	st.w	r7[-20],r8
{
  unsigned int error_status = 0;
  unsigned int gp_fuse_bit;
  pos &= 0x3F;
  width = min(width, 64);
  for (gp_fuse_bit = pos; gp_fuse_bit < pos + width; gp_fuse_bit++)
800255b4:	ee f8 ff f0 	ld.w	r8,r7[-16]
800255b8:	2f f8       	sub	r8,-1
800255ba:	ef 48 ff f0 	st.w	r7[-16],r8
800255be:	ee f9 ff e8 	ld.w	r9,r7[-24]
800255c2:	ee f8 ff e4 	ld.w	r8,r7[-28]
800255c6:	10 09       	add	r9,r8
800255c8:	ee f8 ff f0 	ld.w	r8,r7[-16]
800255cc:	10 39       	cp.w	r9,r8
800255ce:	fe 9b ff e5 	brhi	80025598 <flashc_erase_gp_fuse_bitfield+0x5c>
  {
    flashc_erase_gp_fuse_bit(gp_fuse_bit, false);
    error_status |= flashc_error_status;
  }
  flashc_error_status = error_status;
800255d2:	ec f8 00 54 	ld.w	r8,r6[84]
800255d6:	ee f9 ff ec 	ld.w	r9,r7[-20]
800255da:	91 09       	st.w	r8[0x0],r9
  return (check) ? (flashc_read_gp_fuse_bitfield(pos, width) == (1ULL << width) - 1) : true;
800255dc:	ef 39 ff e0 	ld.ub	r9,r7[-32]
800255e0:	30 08       	mov	r8,0
800255e2:	f0 09 18 00 	cp.b	r9,r8
800255e6:	c3 00       	breq	80025646 <flashc_erase_gp_fuse_bitfield+0x10a>
800255e8:	ee fb ff e4 	ld.w	r11,r7[-28]
800255ec:	ee fc ff e8 	ld.w	r12,r7[-24]
800255f0:	f0 16 01 21 	mcall	r6[1156]
800255f4:	ee f8 ff e4 	ld.w	r8,r7[-28]
800255f8:	10 99       	mov	r9,r8
800255fa:	e2 19 00 20 	andl	r9,0x20,COH
800255fe:	30 0c       	mov	r12,0
80025600:	30 1e       	mov	lr,1
80025602:	fc 05 16 01 	lsr	r5,lr,0x1
80025606:	10 9e       	mov	lr,r8
80025608:	ee 1e ff ff 	eorh	lr,0xffff
8002560c:	ec 1e ff ff 	eorl	lr,0xffff
80025610:	ea 0e 0a 4e 	lsr	lr,r5,lr
80025614:	30 05       	mov	r5,0
80025616:	ea 08 09 43 	lsl	r3,r5,r8
8002561a:	fd e3 10 03 	or	r3,lr,r3
8002561e:	30 1e       	mov	lr,1
80025620:	fc 08 09 42 	lsl	r2,lr,r8
80025624:	58 09       	cp.w	r9,0
80025626:	e4 03 17 10 	movne	r3,r2
8002562a:	f8 02 17 10 	movne	r2,r12
8002562e:	3f f8       	mov	r8,-1
80025630:	3f f9       	mov	r9,-1
80025632:	e4 08 00 08 	add	r8,r2,r8
80025636:	e6 09 00 49 	adc	r9,r3,r9
8002563a:	10 3a       	cp.w	r10,r8
8002563c:	f2 0b 13 00 	cpc	r11,r9
80025640:	5f 08       	sreq	r8
80025642:	5c 58       	castu.b	r8
80025644:	c0 28       	rjmp	80025648 <flashc_erase_gp_fuse_bitfield+0x10c>
80025646:	30 18       	mov	r8,1
}
80025648:	10 9c       	mov	r12,r8
8002564a:	2f 8d       	sub	sp,-32
8002564c:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
80025650:	80 02       	ld.sh	r2,r0[0x0]
80025652:	53 ca       	stdsp	sp[0xf0],r10

80025654 <flashc_erase_gp_fuse_byte>:


bool flashc_erase_gp_fuse_byte(unsigned int gp_fuse_byte, bool check)
{
80025654:	eb cd 40 c0 	pushm	r6-r7,lr
80025658:	1a 97       	mov	r7,sp
8002565a:	20 6d       	sub	sp,24
8002565c:	4b 26       	lddpc	r6,80025724 <flashc_erase_gp_fuse_byte+0xd0>
8002565e:	1e 26       	rsub	r6,pc
80025660:	ef 4c ff ec 	st.w	r7[-20],r12
80025664:	16 98       	mov	r8,r11
80025666:	ef 68 ff e8 	st.b	r7[-24],r8
  unsigned int error_status;
  unsigned int current_gp_fuse_byte;
  U64 value = flashc_read_all_gp_fuses();
8002566a:	f0 16 00 70 	mcall	r6[448]
8002566e:	14 98       	mov	r8,r10
80025670:	16 99       	mov	r9,r11
80025672:	ee e9 ff f8 	st.d	r7[-8],r8
  flashc_erase_all_gp_fuses(false);
80025676:	30 0c       	mov	r12,0
80025678:	f0 16 00 c6 	mcall	r6[792]
  error_status = flashc_error_status;
8002567c:	ec f8 00 54 	ld.w	r8,r6[84]
80025680:	70 08       	ld.w	r8,r8[0x0]
80025682:	ef 48 ff f0 	st.w	r7[-16],r8
  for (current_gp_fuse_byte = 0; current_gp_fuse_byte < 8; current_gp_fuse_byte++, value >>= 8)
80025686:	30 08       	mov	r8,0
80025688:	ef 48 ff f4 	st.w	r7[-12],r8
8002568c:	c2 b8       	rjmp	800256e2 <flashc_erase_gp_fuse_byte+0x8e>
  {
    if (current_gp_fuse_byte != gp_fuse_byte)
8002568e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80025692:	ee f8 ff ec 	ld.w	r8,r7[-20]
80025696:	10 39       	cp.w	r9,r8
80025698:	c1 10       	breq	800256ba <flashc_erase_gp_fuse_byte+0x66>
    {
      flashc_write_gp_fuse_byte(current_gp_fuse_byte, value);
8002569a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8002569e:	10 9b       	mov	r11,r8
800256a0:	ee fc ff f4 	ld.w	r12,r7[-12]
800256a4:	f0 16 00 83 	mcall	r6[524]
      error_status |= flashc_error_status;
800256a8:	ec f8 00 54 	ld.w	r8,r6[84]
800256ac:	70 08       	ld.w	r8,r8[0x0]
800256ae:	ee f9 ff f0 	ld.w	r9,r7[-16]
800256b2:	f3 e8 10 08 	or	r8,r9,r8
800256b6:	ef 48 ff f0 	st.w	r7[-16],r8
  unsigned int error_status;
  unsigned int current_gp_fuse_byte;
  U64 value = flashc_read_all_gp_fuses();
  flashc_erase_all_gp_fuses(false);
  error_status = flashc_error_status;
  for (current_gp_fuse_byte = 0; current_gp_fuse_byte < 8; current_gp_fuse_byte++, value >>= 8)
800256ba:	ee f8 ff f4 	ld.w	r8,r7[-12]
800256be:	2f f8       	sub	r8,-1
800256c0:	ef 48 ff f4 	st.w	r7[-12],r8
800256c4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800256c8:	b9 68       	lsl	r8,0x18
800256ca:	ee f9 ff fc 	ld.w	r9,r7[-4]
800256ce:	a9 89       	lsr	r9,0x8
800256d0:	f3 e8 10 08 	or	r8,r9,r8
800256d4:	ef 48 ff fc 	st.w	r7[-4],r8
800256d8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800256dc:	a9 88       	lsr	r8,0x8
800256de:	ef 48 ff f8 	st.w	r7[-8],r8
800256e2:	ee f8 ff f4 	ld.w	r8,r7[-12]
800256e6:	58 78       	cp.w	r8,7
800256e8:	fe 98 ff d3 	brls	8002568e <flashc_erase_gp_fuse_byte+0x3a>
    {
      flashc_write_gp_fuse_byte(current_gp_fuse_byte, value);
      error_status |= flashc_error_status;
    }
  }
  flashc_error_status = error_status;
800256ec:	ec f8 00 54 	ld.w	r8,r6[84]
800256f0:	ee f9 ff f0 	ld.w	r9,r7[-16]
800256f4:	91 09       	st.w	r8[0x0],r9
  return (check) ? (flashc_read_gp_fuse_byte(gp_fuse_byte) == 0xFF) : true;
800256f6:	ef 39 ff e8 	ld.ub	r9,r7[-24]
800256fa:	30 08       	mov	r8,0
800256fc:	f0 09 18 00 	cp.b	r9,r8
80025700:	c0 d0       	breq	8002571a <flashc_erase_gp_fuse_byte+0xc6>
80025702:	ee fc ff ec 	ld.w	r12,r7[-20]
80025706:	f0 16 02 16 	mcall	r6[2136]
8002570a:	18 98       	mov	r8,r12
8002570c:	10 99       	mov	r9,r8
8002570e:	3f f8       	mov	r8,-1
80025710:	f0 09 18 00 	cp.b	r9,r8
80025714:	5f 08       	sreq	r8
80025716:	5c 58       	castu.b	r8
80025718:	c0 28       	rjmp	8002571c <flashc_erase_gp_fuse_byte+0xc8>
8002571a:	30 18       	mov	r8,1
}
8002571c:	10 9c       	mov	r12,r8
8002571e:	2f ad       	sub	sp,-24
80025720:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80025724:	80 02       	ld.sh	r2,r0[0x0]
80025726:	54 e2       	stdsp	sp[0x138],r2

80025728 <flashc_erase_all_gp_fuses>:


bool flashc_erase_all_gp_fuses(bool check)
{
80025728:	eb cd 40 c0 	pushm	r6-r7,lr
8002572c:	1a 97       	mov	r7,sp
8002572e:	20 1d       	sub	sp,4
80025730:	48 f6       	lddpc	r6,8002576c <flashc_erase_all_gp_fuses+0x44>
80025732:	1e 26       	rsub	r6,pc
80025734:	18 98       	mov	r8,r12
80025736:	ef 68 ff fc 	st.b	r7[-4],r8
  flashc_issue_command(AVR32_FLASHC_FCMD_CMD_EAGPF, -1);
8002573a:	3f fb       	mov	r11,-1
8002573c:	30 bc       	mov	r12,11
8002573e:	f0 16 00 28 	mcall	r6[160]
  return (check) ? (flashc_read_all_gp_fuses() == 0xFFFFFFFFFFFFFFFFULL) : true;
80025742:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80025746:	30 08       	mov	r8,0
80025748:	f0 09 18 00 	cp.b	r9,r8
8002574c:	c0 b0       	breq	80025762 <flashc_erase_all_gp_fuses+0x3a>
8002574e:	f0 16 00 70 	mcall	r6[448]
80025752:	14 98       	mov	r8,r10
80025754:	16 99       	mov	r9,r11
80025756:	f3 e8 00 08 	and	r8,r9,r8
8002575a:	5b f8       	cp.w	r8,-1
8002575c:	5f 08       	sreq	r8
8002575e:	5c 58       	castu.b	r8
80025760:	c0 28       	rjmp	80025764 <flashc_erase_all_gp_fuses+0x3c>
80025762:	30 18       	mov	r8,1
}
80025764:	10 9c       	mov	r12,r8
80025766:	2f fd       	sub	sp,-4
80025768:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002576c:	80 02       	ld.sh	r2,r0[0x0]
8002576e:	55 b6       	stdsp	sp[0x16c],r6

80025770 <flashc_write_gp_fuse_bit>:


void flashc_write_gp_fuse_bit(unsigned int gp_fuse_bit, bool value)
{
80025770:	eb cd 40 c0 	pushm	r6-r7,lr
80025774:	1a 97       	mov	r7,sp
80025776:	20 2d       	sub	sp,8
80025778:	48 c6       	lddpc	r6,800257a8 <flashc_write_gp_fuse_bit+0x38>
8002577a:	1e 26       	rsub	r6,pc
8002577c:	ef 4c ff fc 	st.w	r7[-4],r12
80025780:	16 98       	mov	r8,r11
80025782:	ef 68 ff f8 	st.b	r7[-8],r8
  if (!value)
80025786:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8002578a:	ec 18 00 01 	eorl	r8,0x1
8002578e:	5c 58       	castu.b	r8
80025790:	c0 90       	breq	800257a2 <flashc_write_gp_fuse_bit+0x32>
    flashc_issue_command(AVR32_FLASHC_FCMD_CMD_WGPB, gp_fuse_bit & 0x3F);
80025792:	ee f8 ff fc 	ld.w	r8,r7[-4]
80025796:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
8002579a:	10 9b       	mov	r11,r8
8002579c:	30 7c       	mov	r12,7
8002579e:	f0 16 00 28 	mcall	r6[160]
}
800257a2:	2f ed       	sub	sp,-8
800257a4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800257a8:	80 02       	ld.sh	r2,r0[0x0]
800257aa:	55 fe       	stdsp	sp[0x17c],lr

800257ac <flashc_write_gp_fuse_bitfield>:


void flashc_write_gp_fuse_bitfield(unsigned int pos, unsigned int width, U64 value)
{
800257ac:	eb cd 40 c0 	pushm	r6-r7,lr
800257b0:	1a 97       	mov	r7,sp
800257b2:	20 9d       	sub	sp,36
800257b4:	4b 16       	lddpc	r6,80025878 <flashc_write_gp_fuse_bitfield+0xcc>
800257b6:	1e 26       	rsub	r6,pc
800257b8:	ef 4c ff e8 	st.w	r7[-24],r12
800257bc:	ef 4b ff e4 	st.w	r7[-28],r11
800257c0:	ee e9 ff dc 	st.d	r7[-36],r8
  unsigned int error_status = 0;
800257c4:	30 08       	mov	r8,0
800257c6:	ef 48 ff ec 	st.w	r7[-20],r8
  unsigned int gp_fuse_bit;
  pos &= 0x3F;
800257ca:	ee f8 ff e8 	ld.w	r8,r7[-24]
800257ce:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
800257d2:	ef 48 ff e8 	st.w	r7[-24],r8
  width = min(width, 64);
800257d6:	ee f8 ff e4 	ld.w	r8,r7[-28]
800257da:	ef 48 ff f8 	st.w	r7[-8],r8
800257de:	34 08       	mov	r8,64
800257e0:	ef 48 ff fc 	st.w	r7[-4],r8
800257e4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800257e8:	ee f9 ff fc 	ld.w	r9,r7[-4]
800257ec:	f0 09 0d 48 	min	r8,r8,r9
800257f0:	ef 48 ff f4 	st.w	r7[-12],r8
800257f4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800257f8:	ef 48 ff e4 	st.w	r7[-28],r8
  for (gp_fuse_bit = pos; gp_fuse_bit < pos + width; gp_fuse_bit++, value >>= 1)
800257fc:	ee f8 ff e8 	ld.w	r8,r7[-24]
80025800:	ef 48 ff f0 	st.w	r7[-16],r8
80025804:	c2 88       	rjmp	80025854 <flashc_write_gp_fuse_bitfield+0xa8>
  {
    flashc_write_gp_fuse_bit(gp_fuse_bit, value & 0x01);
80025806:	ee f8 ff e0 	ld.w	r8,r7[-32]
8002580a:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002580e:	5c 58       	castu.b	r8
80025810:	10 9b       	mov	r11,r8
80025812:	ee fc ff f0 	ld.w	r12,r7[-16]
80025816:	f0 16 00 d1 	mcall	r6[836]
    error_status |= flashc_error_status;
8002581a:	ec f8 00 54 	ld.w	r8,r6[84]
8002581e:	70 08       	ld.w	r8,r8[0x0]
80025820:	ee f9 ff ec 	ld.w	r9,r7[-20]
80025824:	f3 e8 10 08 	or	r8,r9,r8
80025828:	ef 48 ff ec 	st.w	r7[-20],r8
{
  unsigned int error_status = 0;
  unsigned int gp_fuse_bit;
  pos &= 0x3F;
  width = min(width, 64);
  for (gp_fuse_bit = pos; gp_fuse_bit < pos + width; gp_fuse_bit++, value >>= 1)
8002582c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80025830:	2f f8       	sub	r8,-1
80025832:	ef 48 ff f0 	st.w	r7[-16],r8
80025836:	ee f8 ff dc 	ld.w	r8,r7[-36]
8002583a:	bf 78       	lsl	r8,0x1f
8002583c:	ee f9 ff e0 	ld.w	r9,r7[-32]
80025840:	a1 99       	lsr	r9,0x1
80025842:	f3 e8 10 08 	or	r8,r9,r8
80025846:	ef 48 ff e0 	st.w	r7[-32],r8
8002584a:	ee f8 ff dc 	ld.w	r8,r7[-36]
8002584e:	a1 98       	lsr	r8,0x1
80025850:	ef 48 ff dc 	st.w	r7[-36],r8
80025854:	ee f9 ff e8 	ld.w	r9,r7[-24]
80025858:	ee f8 ff e4 	ld.w	r8,r7[-28]
8002585c:	10 09       	add	r9,r8
8002585e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80025862:	10 39       	cp.w	r9,r8
80025864:	fe 9b ff d1 	brhi	80025806 <flashc_write_gp_fuse_bitfield+0x5a>
  {
    flashc_write_gp_fuse_bit(gp_fuse_bit, value & 0x01);
    error_status |= flashc_error_status;
  }
  flashc_error_status = error_status;
80025868:	ec f8 00 54 	ld.w	r8,r6[84]
8002586c:	ee f9 ff ec 	ld.w	r9,r7[-20]
80025870:	91 09       	st.w	r8[0x0],r9
}
80025872:	2f 7d       	sub	sp,-36
80025874:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80025878:	80 02       	ld.sh	r2,r0[0x0]
8002587a:	56 3a       	stdsp	sp[0x18c],r10

8002587c <flashc_write_gp_fuse_byte>:


void flashc_write_gp_fuse_byte(unsigned int gp_fuse_byte, U8 value)
{
8002587c:	eb cd 40 c0 	pushm	r6-r7,lr
80025880:	1a 97       	mov	r7,sp
80025882:	20 2d       	sub	sp,8
80025884:	48 c6       	lddpc	r6,800258b4 <flashc_write_gp_fuse_byte+0x38>
80025886:	1e 26       	rsub	r6,pc
80025888:	ef 4c ff fc 	st.w	r7[-4],r12
8002588c:	16 98       	mov	r8,r11
8002588e:	ef 68 ff f8 	st.b	r7[-8],r8
  flashc_issue_command(AVR32_FLASHC_FCMD_CMD_PGPFB, (gp_fuse_byte & 0x07) | value << 3);
80025892:	ee f8 ff fc 	ld.w	r8,r7[-4]
80025896:	f3 d8 c0 03 	bfextu	r9,r8,0x0,0x3
8002589a:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8002589e:	a3 78       	lsl	r8,0x3
800258a0:	f3 e8 10 08 	or	r8,r9,r8
800258a4:	10 9b       	mov	r11,r8
800258a6:	30 ac       	mov	r12,10
800258a8:	f0 16 00 28 	mcall	r6[160]
}
800258ac:	2f ed       	sub	sp,-8
800258ae:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800258b2:	00 00       	add	r0,r0
800258b4:	80 02       	ld.sh	r2,r0[0x0]
800258b6:	57 0a       	stdsp	sp[0x1c0],r10

800258b8 <flashc_write_all_gp_fuses>:


void flashc_write_all_gp_fuses(U64 value)
{
800258b8:	eb cd 40 c0 	pushm	r6-r7,lr
800258bc:	1a 97       	mov	r7,sp
800258be:	20 4d       	sub	sp,16
800258c0:	49 e6       	lddpc	r6,80025938 <flashc_write_all_gp_fuses+0x80>
800258c2:	1e 26       	rsub	r6,pc
800258c4:	ee eb ff f0 	st.d	r7[-16],r10
  unsigned int error_status = 0;
800258c8:	30 08       	mov	r8,0
800258ca:	ef 48 ff f8 	st.w	r7[-8],r8
  unsigned int gp_fuse_byte;
  for (gp_fuse_byte = 0; gp_fuse_byte < 8; gp_fuse_byte++, value >>= 8)
800258ce:	30 08       	mov	r8,0
800258d0:	ef 48 ff fc 	st.w	r7[-4],r8
800258d4:	c2 58       	rjmp	8002591e <flashc_write_all_gp_fuses+0x66>
  {
    flashc_write_gp_fuse_byte(gp_fuse_byte, value);
800258d6:	ef 38 ff f7 	ld.ub	r8,r7[-9]
800258da:	10 9b       	mov	r11,r8
800258dc:	ee fc ff fc 	ld.w	r12,r7[-4]
800258e0:	f0 16 00 83 	mcall	r6[524]
    error_status |= flashc_error_status;
800258e4:	ec f8 00 54 	ld.w	r8,r6[84]
800258e8:	70 08       	ld.w	r8,r8[0x0]
800258ea:	ee f9 ff f8 	ld.w	r9,r7[-8]
800258ee:	f3 e8 10 08 	or	r8,r9,r8
800258f2:	ef 48 ff f8 	st.w	r7[-8],r8

void flashc_write_all_gp_fuses(U64 value)
{
  unsigned int error_status = 0;
  unsigned int gp_fuse_byte;
  for (gp_fuse_byte = 0; gp_fuse_byte < 8; gp_fuse_byte++, value >>= 8)
800258f6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800258fa:	2f f8       	sub	r8,-1
800258fc:	ef 48 ff fc 	st.w	r7[-4],r8
80025900:	ee f8 ff f0 	ld.w	r8,r7[-16]
80025904:	b9 68       	lsl	r8,0x18
80025906:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002590a:	a9 89       	lsr	r9,0x8
8002590c:	f3 e8 10 08 	or	r8,r9,r8
80025910:	ef 48 ff f4 	st.w	r7[-12],r8
80025914:	ee f8 ff f0 	ld.w	r8,r7[-16]
80025918:	a9 88       	lsr	r8,0x8
8002591a:	ef 48 ff f0 	st.w	r7[-16],r8
8002591e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80025922:	58 78       	cp.w	r8,7
80025924:	fe 98 ff d9 	brls	800258d6 <flashc_write_all_gp_fuses+0x1e>
  {
    flashc_write_gp_fuse_byte(gp_fuse_byte, value);
    error_status |= flashc_error_status;
  }
  flashc_error_status = error_status;
80025928:	ec f8 00 54 	ld.w	r8,r6[84]
8002592c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80025930:	91 09       	st.w	r8[0x0],r9
}
80025932:	2f cd       	sub	sp,-16
80025934:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80025938:	80 02       	ld.sh	r2,r0[0x0]
8002593a:	57 46       	stdsp	sp[0x1d0],r6

8002593c <flashc_set_gp_fuse_bit>:


void flashc_set_gp_fuse_bit(unsigned int gp_fuse_bit, bool value)
{
8002593c:	eb cd 40 c0 	pushm	r6-r7,lr
80025940:	1a 97       	mov	r7,sp
80025942:	20 2d       	sub	sp,8
80025944:	48 e6       	lddpc	r6,8002597c <flashc_set_gp_fuse_bit+0x40>
80025946:	1e 26       	rsub	r6,pc
80025948:	ef 4c ff fc 	st.w	r7[-4],r12
8002594c:	16 98       	mov	r8,r11
8002594e:	ef 68 ff f8 	st.b	r7[-8],r8
  if (value)
80025952:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80025956:	30 08       	mov	r8,0
80025958:	f0 09 18 00 	cp.b	r9,r8
8002595c:	c0 70       	breq	8002596a <flashc_set_gp_fuse_bit+0x2e>
    flashc_erase_gp_fuse_bit(gp_fuse_bit, false);
8002595e:	30 0b       	mov	r11,0
80025960:	ee fc ff fc 	ld.w	r12,r7[-4]
80025964:	f0 16 00 e1 	mcall	r6[900]
80025968:	c0 68       	rjmp	80025974 <flashc_set_gp_fuse_bit+0x38>
  else
    flashc_write_gp_fuse_bit(gp_fuse_bit, false);
8002596a:	30 0b       	mov	r11,0
8002596c:	ee fc ff fc 	ld.w	r12,r7[-4]
80025970:	f0 16 00 d1 	mcall	r6[836]
}
80025974:	2f ed       	sub	sp,-8
80025976:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002597a:	00 00       	add	r0,r0
8002597c:	80 02       	ld.sh	r2,r0[0x0]
8002597e:	57 ca       	stdsp	sp[0x1f0],r10

80025980 <flashc_set_gp_fuse_bitfield>:


void flashc_set_gp_fuse_bitfield(unsigned int pos, unsigned int width, U64 value)
{
80025980:	eb cd 40 c0 	pushm	r6-r7,lr
80025984:	1a 97       	mov	r7,sp
80025986:	20 9d       	sub	sp,36
80025988:	4b 16       	lddpc	r6,80025a4c <flashc_set_gp_fuse_bitfield+0xcc>
8002598a:	1e 26       	rsub	r6,pc
8002598c:	ef 4c ff e8 	st.w	r7[-24],r12
80025990:	ef 4b ff e4 	st.w	r7[-28],r11
80025994:	ee e9 ff dc 	st.d	r7[-36],r8
  unsigned int error_status = 0;
80025998:	30 08       	mov	r8,0
8002599a:	ef 48 ff ec 	st.w	r7[-20],r8
  unsigned int gp_fuse_bit;
  pos &= 0x3F;
8002599e:	ee f8 ff e8 	ld.w	r8,r7[-24]
800259a2:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
800259a6:	ef 48 ff e8 	st.w	r7[-24],r8
  width = min(width, 64);
800259aa:	ee f8 ff e4 	ld.w	r8,r7[-28]
800259ae:	ef 48 ff f8 	st.w	r7[-8],r8
800259b2:	34 08       	mov	r8,64
800259b4:	ef 48 ff fc 	st.w	r7[-4],r8
800259b8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800259bc:	ee f9 ff fc 	ld.w	r9,r7[-4]
800259c0:	f0 09 0d 48 	min	r8,r8,r9
800259c4:	ef 48 ff f4 	st.w	r7[-12],r8
800259c8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800259cc:	ef 48 ff e4 	st.w	r7[-28],r8
  for (gp_fuse_bit = pos; gp_fuse_bit < pos + width; gp_fuse_bit++, value >>= 1)
800259d0:	ee f8 ff e8 	ld.w	r8,r7[-24]
800259d4:	ef 48 ff f0 	st.w	r7[-16],r8
800259d8:	c2 88       	rjmp	80025a28 <flashc_set_gp_fuse_bitfield+0xa8>
  {
    flashc_set_gp_fuse_bit(gp_fuse_bit, value & 0x01);
800259da:	ee f8 ff e0 	ld.w	r8,r7[-32]
800259de:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800259e2:	5c 58       	castu.b	r8
800259e4:	10 9b       	mov	r11,r8
800259e6:	ee fc ff f0 	ld.w	r12,r7[-16]
800259ea:	f0 16 01 11 	mcall	r6[1092]
    error_status |= flashc_error_status;
800259ee:	ec f8 00 54 	ld.w	r8,r6[84]
800259f2:	70 08       	ld.w	r8,r8[0x0]
800259f4:	ee f9 ff ec 	ld.w	r9,r7[-20]
800259f8:	f3 e8 10 08 	or	r8,r9,r8
800259fc:	ef 48 ff ec 	st.w	r7[-20],r8
{
  unsigned int error_status = 0;
  unsigned int gp_fuse_bit;
  pos &= 0x3F;
  width = min(width, 64);
  for (gp_fuse_bit = pos; gp_fuse_bit < pos + width; gp_fuse_bit++, value >>= 1)
80025a00:	ee f8 ff f0 	ld.w	r8,r7[-16]
80025a04:	2f f8       	sub	r8,-1
80025a06:	ef 48 ff f0 	st.w	r7[-16],r8
80025a0a:	ee f8 ff dc 	ld.w	r8,r7[-36]
80025a0e:	bf 78       	lsl	r8,0x1f
80025a10:	ee f9 ff e0 	ld.w	r9,r7[-32]
80025a14:	a1 99       	lsr	r9,0x1
80025a16:	f3 e8 10 08 	or	r8,r9,r8
80025a1a:	ef 48 ff e0 	st.w	r7[-32],r8
80025a1e:	ee f8 ff dc 	ld.w	r8,r7[-36]
80025a22:	a1 98       	lsr	r8,0x1
80025a24:	ef 48 ff dc 	st.w	r7[-36],r8
80025a28:	ee f9 ff e8 	ld.w	r9,r7[-24]
80025a2c:	ee f8 ff e4 	ld.w	r8,r7[-28]
80025a30:	10 09       	add	r9,r8
80025a32:	ee f8 ff f0 	ld.w	r8,r7[-16]
80025a36:	10 39       	cp.w	r9,r8
80025a38:	fe 9b ff d1 	brhi	800259da <flashc_set_gp_fuse_bitfield+0x5a>
  {
    flashc_set_gp_fuse_bit(gp_fuse_bit, value & 0x01);
    error_status |= flashc_error_status;
  }
  flashc_error_status = error_status;
80025a3c:	ec f8 00 54 	ld.w	r8,r6[84]
80025a40:	ee f9 ff ec 	ld.w	r9,r7[-20]
80025a44:	91 09       	st.w	r8[0x0],r9
}
80025a46:	2f 7d       	sub	sp,-36
80025a48:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80025a4c:	80 02       	ld.sh	r2,r0[0x0]
80025a4e:	58 0e       	cp.w	lr,0

80025a50 <flashc_set_gp_fuse_byte>:


void flashc_set_gp_fuse_byte(unsigned int gp_fuse_byte, U8 value)
{
80025a50:	eb cd 40 c0 	pushm	r6-r7,lr
80025a54:	1a 97       	mov	r7,sp
80025a56:	20 3d       	sub	sp,12
80025a58:	49 c6       	lddpc	r6,80025ac8 <flashc_set_gp_fuse_byte+0x78>
80025a5a:	1e 26       	rsub	r6,pc
80025a5c:	ef 4c ff f8 	st.w	r7[-8],r12
80025a60:	16 98       	mov	r8,r11
80025a62:	ef 68 ff f4 	st.b	r7[-12],r8
  unsigned int error_status;
  switch (value)
80025a66:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80025a6a:	58 08       	cp.w	r8,0
80025a6c:	c0 a0       	breq	80025a80 <flashc_set_gp_fuse_byte+0x30>
80025a6e:	e0 48 00 ff 	cp.w	r8,255
80025a72:	c0 d1       	brne	80025a8c <flashc_set_gp_fuse_byte+0x3c>
  {
  case 0xFF:
    flashc_erase_gp_fuse_byte(gp_fuse_byte, false);
80025a74:	30 0b       	mov	r11,0
80025a76:	ee fc ff f8 	ld.w	r12,r7[-8]
80025a7a:	f0 16 01 07 	mcall	r6[1052]
    break;
80025a7e:	c2 18       	rjmp	80025ac0 <flashc_set_gp_fuse_byte+0x70>
  case 0x00:
    flashc_write_gp_fuse_byte(gp_fuse_byte, 0x00);
80025a80:	30 0b       	mov	r11,0
80025a82:	ee fc ff f8 	ld.w	r12,r7[-8]
80025a86:	f0 16 00 83 	mcall	r6[524]
    break;
80025a8a:	c1 b8       	rjmp	80025ac0 <flashc_set_gp_fuse_byte+0x70>
  default:
    flashc_erase_gp_fuse_byte(gp_fuse_byte, false);
80025a8c:	30 0b       	mov	r11,0
80025a8e:	ee fc ff f8 	ld.w	r12,r7[-8]
80025a92:	f0 16 01 07 	mcall	r6[1052]
    error_status = flashc_error_status;
80025a96:	ec f8 00 54 	ld.w	r8,r6[84]
80025a9a:	70 08       	ld.w	r8,r8[0x0]
80025a9c:	ef 48 ff fc 	st.w	r7[-4],r8
    flashc_write_gp_fuse_byte(gp_fuse_byte, value);
80025aa0:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80025aa4:	10 9b       	mov	r11,r8
80025aa6:	ee fc ff f8 	ld.w	r12,r7[-8]
80025aaa:	f0 16 00 83 	mcall	r6[524]
    flashc_error_status |= error_status;
80025aae:	ec f8 00 54 	ld.w	r8,r6[84]
80025ab2:	70 09       	ld.w	r9,r8[0x0]
80025ab4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80025ab8:	10 49       	or	r9,r8
80025aba:	ec f8 00 54 	ld.w	r8,r6[84]
80025abe:	91 09       	st.w	r8[0x0],r9
  }
}
80025ac0:	2f dd       	sub	sp,-12
80025ac2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80025ac6:	00 00       	add	r0,r0
80025ac8:	80 02       	ld.sh	r2,r0[0x0]
80025aca:	58 de       	cp.w	lr,13

80025acc <flashc_set_all_gp_fuses>:


void flashc_set_all_gp_fuses(U64 value)
{
80025acc:	eb cd 40 c0 	pushm	r6-r7,lr
80025ad0:	1a 97       	mov	r7,sp
80025ad2:	20 3d       	sub	sp,12
80025ad4:	49 86       	lddpc	r6,80025b34 <flashc_set_all_gp_fuses+0x68>
80025ad6:	1e 26       	rsub	r6,pc
80025ad8:	ee eb ff f4 	st.d	r7[-12],r10
  unsigned int error_status;
  switch (value)
80025adc:	ee e8 ff f4 	ld.d	r8,r7[-12]
80025ae0:	58 08       	cp.w	r8,0
80025ae2:	5c 29       	cpc	r9
80025ae4:	c0 b0       	breq	80025afa <flashc_set_all_gp_fuses+0x2e>
80025ae6:	3f fa       	mov	r10,-1
80025ae8:	3f fb       	mov	r11,-1
80025aea:	14 38       	cp.w	r8,r10
80025aec:	f6 09 13 00 	cpc	r9,r11
80025af0:	c0 a1       	brne	80025b04 <flashc_set_all_gp_fuses+0x38>
  {
  case 0xFFFFFFFFFFFFFFFFULL:
    flashc_erase_all_gp_fuses(false);
80025af2:	30 0c       	mov	r12,0
80025af4:	f0 16 00 c6 	mcall	r6[792]
    break;
80025af8:	c1 b8       	rjmp	80025b2e <flashc_set_all_gp_fuses+0x62>
  case 0x0000000000000000ULL:
    flashc_write_all_gp_fuses(0x0000000000000000ULL);
80025afa:	30 0a       	mov	r10,0
80025afc:	30 0b       	mov	r11,0
80025afe:	f0 16 00 e9 	mcall	r6[932]
    break;
80025b02:	c1 68       	rjmp	80025b2e <flashc_set_all_gp_fuses+0x62>
  default:
    flashc_erase_all_gp_fuses(false);
80025b04:	30 0c       	mov	r12,0
80025b06:	f0 16 00 c6 	mcall	r6[792]
    error_status = flashc_error_status;
80025b0a:	ec f8 00 54 	ld.w	r8,r6[84]
80025b0e:	70 08       	ld.w	r8,r8[0x0]
80025b10:	ef 48 ff fc 	st.w	r7[-4],r8
    flashc_write_all_gp_fuses(value);
80025b14:	ee ea ff f4 	ld.d	r10,r7[-12]
80025b18:	f0 16 00 e9 	mcall	r6[932]
    flashc_error_status |= error_status;
80025b1c:	ec f8 00 54 	ld.w	r8,r6[84]
80025b20:	70 09       	ld.w	r9,r8[0x0]
80025b22:	ee f8 ff fc 	ld.w	r8,r7[-4]
80025b26:	10 49       	or	r9,r8
80025b28:	ec f8 00 54 	ld.w	r8,r6[84]
80025b2c:	91 09       	st.w	r8[0x0],r9
  }
}
80025b2e:	2f dd       	sub	sp,-12
80025b30:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80025b34:	80 02       	ld.sh	r2,r0[0x0]
80025b36:	59 5a       	cp.w	r10,21

80025b38 <flashc_clear_page_buffer>:
 */
//! @{


void flashc_clear_page_buffer(void)
{
80025b38:	eb cd 40 c0 	pushm	r6-r7,lr
80025b3c:	1a 97       	mov	r7,sp
80025b3e:	48 56       	lddpc	r6,80025b50 <flashc_clear_page_buffer+0x18>
80025b40:	1e 26       	rsub	r6,pc
  flashc_issue_command(AVR32_FLASHC_FCMD_CMD_CPB, -1);
80025b42:	3f fb       	mov	r11,-1
80025b44:	30 3c       	mov	r12,3
80025b46:	f0 16 00 28 	mcall	r6[160]
}
80025b4a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80025b4e:	00 00       	add	r0,r0
80025b50:	80 02       	ld.sh	r2,r0[0x0]
80025b52:	59 c4       	cp.w	r4,28

80025b54 <flashc_is_page_erased>:


bool flashc_is_page_erased(void)
{
80025b54:	eb cd 40 80 	pushm	r7,lr
80025b58:	1a 97       	mov	r7,sp
  return ((AVR32_FLASHC.fsr & AVR32_FLASHC_FSR_QPRR_MASK) != 0);
80025b5a:	fe 68 00 00 	mov	r8,-131072
80025b5e:	70 28       	ld.w	r8,r8[0x8]
80025b60:	e2 18 00 20 	andl	r8,0x20,COH
80025b64:	5f 18       	srne	r8
80025b66:	5c 58       	castu.b	r8
}
80025b68:	10 9c       	mov	r12,r8
80025b6a:	e3 cd 80 80 	ldm	sp++,r7,pc

80025b6e <flashc_quick_page_read>:


bool flashc_quick_page_read(int page_number)
{
80025b6e:	eb cd 40 c0 	pushm	r6-r7,lr
80025b72:	1a 97       	mov	r7,sp
80025b74:	20 1d       	sub	sp,4
80025b76:	48 96       	lddpc	r6,80025b98 <flashc_quick_page_read+0x2a>
80025b78:	1e 26       	rsub	r6,pc
80025b7a:	ef 4c ff fc 	st.w	r7[-4],r12
  flashc_issue_command(AVR32_FLASHC_FCMD_CMD_QPR, page_number);
80025b7e:	ee fb ff fc 	ld.w	r11,r7[-4]
80025b82:	30 cc       	mov	r12,12
80025b84:	f0 16 00 28 	mcall	r6[160]
  return flashc_is_page_erased();
80025b88:	f0 16 00 d7 	mcall	r6[860]
80025b8c:	18 98       	mov	r8,r12
}
80025b8e:	10 9c       	mov	r12,r8
80025b90:	2f fd       	sub	sp,-4
80025b92:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80025b96:	00 00       	add	r0,r0
80025b98:	80 02       	ld.sh	r2,r0[0x0]
80025b9a:	59 fc       	cp.w	r12,31

80025b9c <flashc_erase_page>:


bool flashc_erase_page(int page_number, bool check)
{
80025b9c:	eb cd 40 c0 	pushm	r6-r7,lr
80025ba0:	1a 97       	mov	r7,sp
80025ba2:	20 4d       	sub	sp,16
80025ba4:	49 86       	lddpc	r6,80025c04 <flashc_erase_page+0x68>
80025ba6:	1e 26       	rsub	r6,pc
80025ba8:	ef 4c ff f4 	st.w	r7[-12],r12
80025bac:	16 98       	mov	r8,r11
80025bae:	ef 68 ff f0 	st.b	r7[-16],r8
  bool page_erased = true;
80025bb2:	30 18       	mov	r8,1
80025bb4:	ef 68 ff fb 	st.b	r7[-5],r8
  flashc_issue_command(AVR32_FLASHC_FCMD_CMD_EP, page_number);
80025bb8:	ee fb ff f4 	ld.w	r11,r7[-12]
80025bbc:	30 2c       	mov	r12,2
80025bbe:	f0 16 00 28 	mcall	r6[160]
  if (check)
80025bc2:	ef 39 ff f0 	ld.ub	r9,r7[-16]
80025bc6:	30 08       	mov	r8,0
80025bc8:	f0 09 18 00 	cp.b	r9,r8
80025bcc:	c1 50       	breq	80025bf6 <flashc_erase_page+0x5a>
  {
    unsigned int error_status = flashc_error_status;
80025bce:	ec f8 00 54 	ld.w	r8,r6[84]
80025bd2:	70 08       	ld.w	r8,r8[0x0]
80025bd4:	ef 48 ff fc 	st.w	r7[-4],r8
    page_erased = flashc_quick_page_read(-1);
80025bd8:	3f fc       	mov	r12,-1
80025bda:	f0 16 01 6d 	mcall	r6[1460]
80025bde:	18 98       	mov	r8,r12
80025be0:	ef 68 ff fb 	st.b	r7[-5],r8
    flashc_error_status |= error_status;
80025be4:	ec f8 00 54 	ld.w	r8,r6[84]
80025be8:	70 09       	ld.w	r9,r8[0x0]
80025bea:	ee f8 ff fc 	ld.w	r8,r7[-4]
80025bee:	10 49       	or	r9,r8
80025bf0:	ec f8 00 54 	ld.w	r8,r6[84]
80025bf4:	91 09       	st.w	r8[0x0],r9
  }
  return page_erased;
80025bf6:	ef 38 ff fb 	ld.ub	r8,r7[-5]
}
80025bfa:	10 9c       	mov	r12,r8
80025bfc:	2f cd       	sub	sp,-16
80025bfe:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80025c02:	00 00       	add	r0,r0
80025c04:	80 02       	ld.sh	r2,r0[0x0]
80025c06:	5a 2a       	cp.w	r10,-30

80025c08 <flashc_erase_all_pages>:


bool flashc_erase_all_pages(bool check)
{
80025c08:	eb cd 40 e0 	pushm	r5-r7,lr
80025c0c:	1a 97       	mov	r7,sp
80025c0e:	20 4d       	sub	sp,16
80025c10:	49 f6       	lddpc	r6,80025c8c <flashc_erase_all_pages+0x84>
80025c12:	1e 26       	rsub	r6,pc
80025c14:	18 98       	mov	r8,r12
80025c16:	ef 68 ff f0 	st.b	r7[-16],r8
  bool all_pages_erased = true;
80025c1a:	30 18       	mov	r8,1
80025c1c:	ef 68 ff f7 	st.b	r7[-9],r8
  unsigned int error_status = 0;
80025c20:	30 08       	mov	r8,0
80025c22:	ef 48 ff f8 	st.w	r7[-8],r8
  unsigned int page_number = flashc_get_page_count();
80025c26:	f0 16 00 fb 	mcall	r6[1004]
80025c2a:	18 98       	mov	r8,r12
80025c2c:	ef 48 ff fc 	st.w	r7[-4],r8
  while (page_number)
80025c30:	c1 f8       	rjmp	80025c6e <flashc_erase_all_pages+0x66>
  {
    all_pages_erased &= flashc_erase_page(--page_number, check);
80025c32:	ef 35 ff f7 	ld.ub	r5,r7[-9]
80025c36:	ef 39 ff f0 	ld.ub	r9,r7[-16]
80025c3a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80025c3e:	20 18       	sub	r8,1
80025c40:	ef 48 ff fc 	st.w	r7[-4],r8
80025c44:	ee f8 ff fc 	ld.w	r8,r7[-4]
80025c48:	12 9b       	mov	r11,r9
80025c4a:	10 9c       	mov	r12,r8
80025c4c:	f0 16 00 99 	mcall	r6[612]
80025c50:	18 98       	mov	r8,r12
80025c52:	eb e8 00 08 	and	r8,r5,r8
80025c56:	5f 18       	srne	r8
80025c58:	ef 68 ff f7 	st.b	r7[-9],r8
    error_status |= flashc_error_status;
80025c5c:	ec f8 00 54 	ld.w	r8,r6[84]
80025c60:	70 08       	ld.w	r8,r8[0x0]
80025c62:	ee f9 ff f8 	ld.w	r9,r7[-8]
80025c66:	f3 e8 10 08 	or	r8,r9,r8
80025c6a:	ef 48 ff f8 	st.w	r7[-8],r8
bool flashc_erase_all_pages(bool check)
{
  bool all_pages_erased = true;
  unsigned int error_status = 0;
  unsigned int page_number = flashc_get_page_count();
  while (page_number)
80025c6e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80025c72:	58 08       	cp.w	r8,0
80025c74:	cd f1       	brne	80025c32 <flashc_erase_all_pages+0x2a>
  {
    all_pages_erased &= flashc_erase_page(--page_number, check);
    error_status |= flashc_error_status;
  }
  flashc_error_status = error_status;
80025c76:	ec f8 00 54 	ld.w	r8,r6[84]
80025c7a:	ee f9 ff f8 	ld.w	r9,r7[-8]
80025c7e:	91 09       	st.w	r8[0x0],r9
  return all_pages_erased;
80025c80:	ef 38 ff f7 	ld.ub	r8,r7[-9]
}
80025c84:	10 9c       	mov	r12,r8
80025c86:	2f cd       	sub	sp,-16
80025c88:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80025c8c:	80 02       	ld.sh	r2,r0[0x0]
80025c8e:	5a 96       	cp.w	r6,-23

80025c90 <flashc_write_page>:


void flashc_write_page(int page_number)
{
80025c90:	eb cd 40 c0 	pushm	r6-r7,lr
80025c94:	1a 97       	mov	r7,sp
80025c96:	20 1d       	sub	sp,4
80025c98:	48 66       	lddpc	r6,80025cb0 <flashc_write_page+0x20>
80025c9a:	1e 26       	rsub	r6,pc
80025c9c:	ef 4c ff fc 	st.w	r7[-4],r12
  flashc_issue_command(AVR32_FLASHC_FCMD_CMD_WP, page_number);
80025ca0:	ee fb ff fc 	ld.w	r11,r7[-4]
80025ca4:	30 1c       	mov	r12,1
80025ca6:	f0 16 00 28 	mcall	r6[160]
}
80025caa:	2f fd       	sub	sp,-4
80025cac:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80025cb0:	80 02       	ld.sh	r2,r0[0x0]
80025cb2:	5b 1e       	cp.w	lr,-15

80025cb4 <flashc_quick_user_page_read>:


bool flashc_quick_user_page_read(void)
{
80025cb4:	eb cd 40 c0 	pushm	r6-r7,lr
80025cb8:	1a 97       	mov	r7,sp
80025cba:	48 76       	lddpc	r6,80025cd4 <flashc_quick_user_page_read+0x20>
80025cbc:	1e 26       	rsub	r6,pc
  flashc_issue_command(AVR32_FLASHC_FCMD_CMD_QPRUP, -1);
80025cbe:	3f fb       	mov	r11,-1
80025cc0:	30 fc       	mov	r12,15
80025cc2:	f0 16 00 28 	mcall	r6[160]
  return flashc_is_page_erased();
80025cc6:	f0 16 00 d7 	mcall	r6[860]
80025cca:	18 98       	mov	r8,r12
}
80025ccc:	10 9c       	mov	r12,r8
80025cce:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80025cd2:	00 00       	add	r0,r0
80025cd4:	80 02       	ld.sh	r2,r0[0x0]
80025cd6:	5b 40       	cp.w	r0,-12

80025cd8 <flashc_erase_user_page>:


bool flashc_erase_user_page(bool check)
{
80025cd8:	eb cd 40 c0 	pushm	r6-r7,lr
80025cdc:	1a 97       	mov	r7,sp
80025cde:	20 1d       	sub	sp,4
80025ce0:	48 c6       	lddpc	r6,80025d10 <flashc_erase_user_page+0x38>
80025ce2:	1e 26       	rsub	r6,pc
80025ce4:	18 98       	mov	r8,r12
80025ce6:	ef 68 ff fc 	st.b	r7[-4],r8
  flashc_issue_command(AVR32_FLASHC_FCMD_CMD_EUP, -1);
80025cea:	3f fb       	mov	r11,-1
80025cec:	30 ec       	mov	r12,14
80025cee:	f0 16 00 28 	mcall	r6[160]
  return (check) ? flashc_quick_user_page_read() : true;
80025cf2:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80025cf6:	30 08       	mov	r8,0
80025cf8:	f0 09 18 00 	cp.b	r9,r8
80025cfc:	c0 50       	breq	80025d06 <flashc_erase_user_page+0x2e>
80025cfe:	f0 16 02 0d 	mcall	r6[2100]
80025d02:	18 98       	mov	r8,r12
80025d04:	c0 28       	rjmp	80025d08 <flashc_erase_user_page+0x30>
80025d06:	30 18       	mov	r8,1
}
80025d08:	10 9c       	mov	r12,r8
80025d0a:	2f fd       	sub	sp,-4
80025d0c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80025d10:	80 02       	ld.sh	r2,r0[0x0]
80025d12:	5b 66       	cp.w	r6,-10

80025d14 <flashc_write_user_page>:


void flashc_write_user_page(void)
{
80025d14:	eb cd 40 c0 	pushm	r6-r7,lr
80025d18:	1a 97       	mov	r7,sp
80025d1a:	48 56       	lddpc	r6,80025d2c <flashc_write_user_page+0x18>
80025d1c:	1e 26       	rsub	r6,pc
  flashc_issue_command(AVR32_FLASHC_FCMD_CMD_WUP, -1);
80025d1e:	3f fb       	mov	r11,-1
80025d20:	30 dc       	mov	r12,13
80025d22:	f0 16 00 28 	mcall	r6[160]
}
80025d26:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80025d2a:	00 00       	add	r0,r0
80025d2c:	80 02       	ld.sh	r2,r0[0x0]
80025d2e:	5b a0       	cp.w	r0,-6

80025d30 <flashc_memset8>:


volatile void *flashc_memset8(volatile void *dst, U8 src, size_t nbytes, bool erase)
{
80025d30:	eb cd 40 c0 	pushm	r6-r7,lr
80025d34:	1a 97       	mov	r7,sp
80025d36:	20 4d       	sub	sp,16
80025d38:	49 26       	lddpc	r6,80025d80 <flashc_memset8+0x50>
80025d3a:	1e 26       	rsub	r6,pc
80025d3c:	ef 4c ff fc 	st.w	r7[-4],r12
80025d40:	ef 4a ff f4 	st.w	r7[-12],r10
80025d44:	12 98       	mov	r8,r9
80025d46:	16 99       	mov	r9,r11
80025d48:	ef 69 ff f8 	st.b	r7[-8],r9
80025d4c:	ef 68 ff f0 	st.b	r7[-16],r8
  return flashc_memset16(dst, src | (U16)src << 8, nbytes, erase);
80025d50:	ef 39 ff f0 	ld.ub	r9,r7[-16]
80025d54:	ef 3a ff f8 	ld.ub	r10,r7[-8]
80025d58:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80025d5c:	a9 68       	lsl	r8,0x8
80025d5e:	5c 88       	casts.h	r8
80025d60:	f5 e8 10 08 	or	r8,r10,r8
80025d64:	5c 88       	casts.h	r8
80025d66:	5c 78       	castu.h	r8
80025d68:	ee fa ff f4 	ld.w	r10,r7[-12]
80025d6c:	10 9b       	mov	r11,r8
80025d6e:	ee fc ff fc 	ld.w	r12,r7[-4]
80025d72:	f0 16 01 79 	mcall	r6[1508]
80025d76:	18 98       	mov	r8,r12
}
80025d78:	10 9c       	mov	r12,r8
80025d7a:	2f cd       	sub	sp,-16
80025d7c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80025d80:	80 02       	ld.sh	r2,r0[0x0]
80025d82:	5b be       	cp.w	lr,-5

80025d84 <flashc_memset16>:


volatile void *flashc_memset16(volatile void *dst, U16 src, size_t nbytes, bool erase)
{
80025d84:	eb cd 40 c0 	pushm	r6-r7,lr
80025d88:	1a 97       	mov	r7,sp
80025d8a:	20 4d       	sub	sp,16
80025d8c:	49 16       	lddpc	r6,80025dd0 <flashc_memset16+0x4c>
80025d8e:	1e 26       	rsub	r6,pc
80025d90:	ef 4c ff fc 	st.w	r7[-4],r12
80025d94:	ef 4a ff f4 	st.w	r7[-12],r10
80025d98:	12 98       	mov	r8,r9
80025d9a:	16 99       	mov	r9,r11
80025d9c:	ef 59 ff f8 	st.h	r7[-8],r9
80025da0:	ef 68 ff f0 	st.b	r7[-16],r8
  return flashc_memset32(dst, src | (U32)src << 16, nbytes, erase);
80025da4:	ef 39 ff f0 	ld.ub	r9,r7[-16]
80025da8:	ef 1a ff f8 	ld.uh	r10,r7[-8]
80025dac:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80025db0:	b1 68       	lsl	r8,0x10
80025db2:	f5 e8 10 08 	or	r8,r10,r8
80025db6:	ee fa ff f4 	ld.w	r10,r7[-12]
80025dba:	10 9b       	mov	r11,r8
80025dbc:	ee fc ff fc 	ld.w	r12,r7[-4]
80025dc0:	f0 16 01 b5 	mcall	r6[1748]
80025dc4:	18 98       	mov	r8,r12
}
80025dc6:	10 9c       	mov	r12,r8
80025dc8:	2f cd       	sub	sp,-16
80025dca:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80025dce:	00 00       	add	r0,r0
80025dd0:	80 02       	ld.sh	r2,r0[0x0]
80025dd2:	5c 12       	scr	r2

80025dd4 <flashc_memset32>:


volatile void *flashc_memset32(volatile void *dst, U32 src, size_t nbytes, bool erase)
{
80025dd4:	eb cd 40 cf 	pushm	r0-r3,r6-r7,lr
80025dd8:	1a 97       	mov	r7,sp
80025dda:	20 6d       	sub	sp,24
80025ddc:	49 56       	lddpc	r6,80025e30 <flashc_memset32+0x5c>
80025dde:	1e 26       	rsub	r6,pc
80025de0:	ef 4c ff fc 	st.w	r7[-4],r12
80025de4:	ef 4b ff f8 	st.w	r7[-8],r11
80025de8:	ef 4a ff f4 	st.w	r7[-12],r10
80025dec:	12 98       	mov	r8,r9
80025dee:	ef 68 ff f0 	st.b	r7[-16],r8
  return flashc_memset64(dst, src | (U64)src << 32, nbytes, erase);
80025df2:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80025df6:	ee f0 ff f8 	ld.w	r0,r7[-8]
80025dfa:	30 01       	mov	r1,0
80025dfc:	ee f9 ff f8 	ld.w	r9,r7[-8]
80025e00:	ef 49 ff ec 	st.w	r7[-20],r9
80025e04:	30 09       	mov	r9,0
80025e06:	ef 49 ff e8 	st.w	r7[-24],r9
80025e0a:	ee f3 ff ec 	ld.w	r3,r7[-20]
80025e0e:	a1 63       	lsl	r3,0x0
80025e10:	30 02       	mov	r2,0
80025e12:	e1 e2 10 0a 	or	r10,r0,r2
80025e16:	e3 e3 10 0b 	or	r11,r1,r3
80025e1a:	ee f9 ff f4 	ld.w	r9,r7[-12]
80025e1e:	ee fc ff fc 	ld.w	r12,r7[-4]
80025e22:	f0 16 01 99 	mcall	r6[1636]
80025e26:	18 98       	mov	r8,r12
}
80025e28:	10 9c       	mov	r12,r8
80025e2a:	2f ad       	sub	sp,-24
80025e2c:	e3 cd 80 cf 	ldm	sp++,r0-r3,r6-r7,pc
80025e30:	80 02       	ld.sh	r2,r0[0x0]
80025e32:	5c 62       	casts.b	r2

80025e34 <flashc_memset64>:


volatile void *flashc_memset64(volatile void *dst, U64 src, size_t nbytes, bool erase)
{
80025e34:	eb cd 40 c0 	pushm	r6-r7,lr
80025e38:	1a 97       	mov	r7,sp
80025e3a:	21 bd       	sub	sp,108
80025e3c:	fe f6 04 14 	ld.w	r6,pc[1044]
80025e40:	1e 26       	rsub	r6,pc
80025e42:	ef 4c ff a4 	st.w	r7[-92],r12
80025e46:	ee eb ff 9c 	st.d	r7[-100],r10
80025e4a:	ef 49 ff 98 	st.w	r7[-104],r9
80025e4e:	ef 68 ff 94 	st.b	r7[-108],r8
  // Use aggregated pointers to have several alignments available for a same address.
  UnionCVPtr flash_array_end;
  UnionVPtr dest;
  Union64 source = {0};
80025e52:	30 08       	mov	r8,0
80025e54:	30 09       	mov	r9,0
80025e56:	ee e9 ff d8 	st.d	r7[-40],r8
  StructCVPtr dest_end;
  UnionCVPtr flash_page_source_end;
  bool incomplete_flash_page_end;
  Union64 flash_dword;
  UnionVPtr tmp;
  unsigned int error_status = 0;
80025e5a:	30 08       	mov	r8,0
80025e5c:	ef 48 ff ec 	st.w	r7[-20],r8
  unsigned int i;

  // Reformat arguments.
  flash_array_end.u8ptr = AVR32_FLASH + flashc_get_flash_size();
80025e60:	f0 16 00 bc 	mcall	r6[752]
80025e64:	18 99       	mov	r9,r12
80025e66:	fc 18 80 00 	movh	r8,0x8000
80025e6a:	f2 08 00 08 	add	r8,r9,r8
80025e6e:	ef 48 ff e4 	st.w	r7[-28],r8
  dest.u8ptr = dst;
80025e72:	ee f8 ff a4 	ld.w	r8,r7[-92]
80025e76:	ef 48 ff e0 	st.w	r7[-32],r8
  for (i = (Get_align((U32)dest.u8ptr, sizeof(U64)) - 1) & (sizeof(U64) - 1);
80025e7a:	ee f8 ff e0 	ld.w	r8,r7[-32]
80025e7e:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80025e82:	20 18       	sub	r8,1
80025e84:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80025e88:	ef 48 ff f0 	st.w	r7[-16],r8
80025e8c:	c1 f8       	rjmp	80025eca <flashc_memset64+0x96>
       src; i = (i - 1) & (sizeof(U64) - 1))
  {
    source.u8[i] = src;
80025e8e:	ee f9 ff f0 	ld.w	r9,r7[-16]
80025e92:	ef 38 ff a3 	ld.ub	r8,r7[-93]
80025e96:	ee 09 00 09 	add	r9,r7,r9
80025e9a:	f3 68 ff d8 	st.b	r9[-40],r8
    src >>= 8;
80025e9e:	ee f8 ff 9c 	ld.w	r8,r7[-100]
80025ea2:	b9 68       	lsl	r8,0x18
80025ea4:	ee f9 ff a0 	ld.w	r9,r7[-96]
80025ea8:	a9 89       	lsr	r9,0x8
80025eaa:	f3 e8 10 08 	or	r8,r9,r8
80025eae:	ef 48 ff a0 	st.w	r7[-96],r8
80025eb2:	ee f8 ff 9c 	ld.w	r8,r7[-100]
80025eb6:	a9 88       	lsr	r8,0x8
80025eb8:	ef 48 ff 9c 	st.w	r7[-100],r8

  // Reformat arguments.
  flash_array_end.u8ptr = AVR32_FLASH + flashc_get_flash_size();
  dest.u8ptr = dst;
  for (i = (Get_align((U32)dest.u8ptr, sizeof(U64)) - 1) & (sizeof(U64) - 1);
       src; i = (i - 1) & (sizeof(U64) - 1))
80025ebc:	ee f8 ff f0 	ld.w	r8,r7[-16]
80025ec0:	20 18       	sub	r8,1
80025ec2:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80025ec6:	ef 48 ff f0 	st.w	r7[-16],r8
  unsigned int i;

  // Reformat arguments.
  flash_array_end.u8ptr = AVR32_FLASH + flashc_get_flash_size();
  dest.u8ptr = dst;
  for (i = (Get_align((U32)dest.u8ptr, sizeof(U64)) - 1) & (sizeof(U64) - 1);
80025eca:	ee e8 ff 9c 	ld.d	r8,r7[-100]
80025ece:	58 08       	cp.w	r8,0
80025ed0:	5c 29       	cpc	r9
80025ed2:	cd e1       	brne	80025e8e <flashc_memset64+0x5a>
       src; i = (i - 1) & (sizeof(U64) - 1))
  {
    source.u8[i] = src;
    src >>= 8;
  }
  dest_end.u8ptr = dest.u8ptr + nbytes;
80025ed4:	ee f9 ff e0 	ld.w	r9,r7[-32]
80025ed8:	ee f8 ff 98 	ld.w	r8,r7[-104]
80025edc:	f2 08 00 08 	add	r8,r9,r8
80025ee0:	ef 48 ff d4 	st.w	r7[-44],r8

  // If destination is outside flash, go to next flash page if any.
  if (dest.u8ptr < AVR32_FLASH)
80025ee4:	ee f8 ff e0 	ld.w	r8,r7[-32]
80025ee8:	e0 69 ff ff 	mov	r9,65535
80025eec:	ea 19 7f ff 	orh	r9,0x7fff
80025ef0:	12 38       	cp.w	r8,r9
80025ef2:	e0 8b 00 07 	brhi	80025f00 <flashc_memset64+0xcc>
  {
    dest.u8ptr = AVR32_FLASH;
80025ef6:	fc 18 80 00 	movh	r8,0x8000
80025efa:	ef 48 ff e0 	st.w	r7[-32],r8
80025efe:	c1 58       	rjmp	80025f28 <flashc_memset64+0xf4>
  }
  else if (flash_array_end.u8ptr <= dest.u8ptr && dest.u8ptr < AVR32_FLASHC_USER_PAGE)
80025f00:	ee f9 ff e4 	ld.w	r9,r7[-28]
80025f04:	ee f8 ff e0 	ld.w	r8,r7[-32]
80025f08:	10 39       	cp.w	r9,r8
80025f0a:	e0 8b 00 0f 	brhi	80025f28 <flashc_memset64+0xf4>
80025f0e:	ee f8 ff e0 	ld.w	r8,r7[-32]
80025f12:	e0 69 ff ff 	mov	r9,65535
80025f16:	ea 19 80 7f 	orh	r9,0x807f
80025f1a:	12 38       	cp.w	r8,r9
80025f1c:	e0 8b 00 06 	brhi	80025f28 <flashc_memset64+0xf4>
  {
    dest.u8ptr = AVR32_FLASHC_USER_PAGE;
80025f20:	fc 18 80 80 	movh	r8,0x8080
80025f24:	ef 48 ff e0 	st.w	r7[-32],r8
  }

  // If end of destination is outside flash, move it to the end of the previous flash page if any.
  if (dest_end.u8ptr > AVR32_FLASHC_USER_PAGE + AVR32_FLASHC_USER_PAGE_SIZE)
80025f28:	ee f8 ff d4 	ld.w	r8,r7[-44]
80025f2c:	e0 69 02 00 	mov	r9,512
80025f30:	ea 19 80 80 	orh	r9,0x8080
80025f34:	12 38       	cp.w	r8,r9
80025f36:	e0 88 00 09 	brls	80025f48 <flashc_memset64+0x114>
  {
    dest_end.u8ptr = AVR32_FLASHC_USER_PAGE + AVR32_FLASHC_USER_PAGE_SIZE;
80025f3a:	e0 68 02 00 	mov	r8,512
80025f3e:	ea 18 80 80 	orh	r8,0x8080
80025f42:	ef 48 ff d4 	st.w	r7[-44],r8
80025f46:	c1 38       	rjmp	80025f6c <flashc_memset64+0x138>
  }
  else if (AVR32_FLASHC_USER_PAGE >= dest_end.u8ptr && dest_end.u8ptr > flash_array_end.u8ptr)
80025f48:	ee f8 ff d4 	ld.w	r8,r7[-44]
80025f4c:	fc 19 80 80 	movh	r9,0x8080
80025f50:	12 38       	cp.w	r8,r9
80025f52:	e0 8b 00 0d 	brhi	80025f6c <flashc_memset64+0x138>
80025f56:	ee f9 ff d4 	ld.w	r9,r7[-44]
80025f5a:	ee f8 ff e4 	ld.w	r8,r7[-28]
80025f5e:	10 39       	cp.w	r9,r8
80025f60:	e0 88 00 06 	brls	80025f6c <flashc_memset64+0x138>
  {
    dest_end.u8ptr = flash_array_end.u8ptr;
80025f64:	ee f8 ff e4 	ld.w	r8,r7[-28]
80025f68:	ef 48 ff d4 	st.w	r7[-44],r8
  }

  // Align each end of destination pointer with its natural boundary.
  dest_end.u16ptr = (U16 *)Align_down((U32)dest_end.u8ptr, sizeof(U16));
80025f6c:	ee f8 ff d4 	ld.w	r8,r7[-44]
80025f70:	a1 c8       	cbr	r8,0x0
80025f72:	ef 48 ff cc 	st.w	r7[-52],r8
  dest_end.u32ptr = (U32 *)Align_down((U32)dest_end.u16ptr, sizeof(U32));
80025f76:	ee f8 ff cc 	ld.w	r8,r7[-52]
80025f7a:	e0 18 ff fc 	andl	r8,0xfffc
80025f7e:	ef 48 ff c4 	st.w	r7[-60],r8
  dest_end.u64ptr = (U64 *)Align_down((U32)dest_end.u32ptr, sizeof(U64));
80025f82:	ee f8 ff c4 	ld.w	r8,r7[-60]
80025f86:	e0 18 ff f8 	andl	r8,0xfff8
80025f8a:	ef 48 ff bc 	st.w	r7[-68],r8

  // While end of destination is not reached...
  while (dest.u8ptr < dest_end.u8ptr)
80025f8e:	c4 f9       	rjmp	8002622c <flashc_memset64+0x3f8>
  {
    // Clear the page buffer in order to prepare data for a flash page write.
    flashc_clear_page_buffer();
80025f90:	f0 16 01 1d 	mcall	r6[1140]
    error_status |= flashc_error_status;
80025f94:	ec f8 00 54 	ld.w	r8,r6[84]
80025f98:	70 08       	ld.w	r8,r8[0x0]
80025f9a:	ee f9 ff ec 	ld.w	r9,r7[-20]
80025f9e:	f3 e8 10 08 	or	r8,r9,r8
80025fa2:	ef 48 ff ec 	st.w	r7[-20],r8

    // Determine where the source data will end in the current flash page.
    flash_page_source_end.u64ptr =
      (U64 *)min((U32)dest_end.u64ptr,
80025fa6:	ee f8 ff bc 	ld.w	r8,r7[-68]
80025faa:	ef 48 ff f8 	st.w	r7[-8],r8
80025fae:	ee f8 ff e0 	ld.w	r8,r7[-32]
80025fb2:	e0 18 fe 00 	andl	r8,0xfe00
80025fb6:	f0 c8 fe 00 	sub	r8,r8,-512
80025fba:	ef 48 ff fc 	st.w	r7[-4],r8
80025fbe:	ee f8 ff f8 	ld.w	r8,r7[-8]
80025fc2:	ee f9 ff fc 	ld.w	r9,r7[-4]
80025fc6:	f0 09 0d 48 	min	r8,r8,r9
80025fca:	ef 48 ff f4 	st.w	r7[-12],r8
80025fce:	ee f8 ff f4 	ld.w	r8,r7[-12]
    // Clear the page buffer in order to prepare data for a flash page write.
    flashc_clear_page_buffer();
    error_status |= flashc_error_status;

    // Determine where the source data will end in the current flash page.
    flash_page_source_end.u64ptr =
80025fd2:	ef 48 ff b4 	st.w	r7[-76],r8
      (U64 *)min((U32)dest_end.u64ptr,
                 Align_down((U32)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE) + AVR32_FLASHC_PAGE_SIZE);

    // Determine if the current destination page has an incomplete end.
    incomplete_flash_page_end = (Align_down((U32)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE) >=
80025fd6:	ee f8 ff e0 	ld.w	r8,r7[-32]
80025fda:	10 9a       	mov	r10,r8
80025fdc:	e0 1a fe 00 	andl	r10,0xfe00
                                 Align_down((U32)dest_end.u8ptr, AVR32_FLASHC_PAGE_SIZE));
80025fe0:	ee f8 ff d4 	ld.w	r8,r7[-44]
80025fe4:	10 99       	mov	r9,r8
80025fe6:	e0 19 fe 00 	andl	r9,0xfe00
    flash_page_source_end.u64ptr =
      (U64 *)min((U32)dest_end.u64ptr,
                 Align_down((U32)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE) + AVR32_FLASHC_PAGE_SIZE);

    // Determine if the current destination page has an incomplete end.
    incomplete_flash_page_end = (Align_down((U32)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE) >=
80025fea:	30 18       	mov	r8,1
80025fec:	12 3a       	cp.w	r10,r9
80025fee:	c0 22       	brcc	80025ff2 <flashc_memset64+0x1be>
80025ff0:	30 08       	mov	r8,0
80025ff2:	ef 68 ff eb 	st.b	r7[-21],r8
                                 Align_down((U32)dest_end.u8ptr, AVR32_FLASHC_PAGE_SIZE));

    // Use a flash double-word buffer to manage unaligned accesses.
    flash_dword.u64 = source.u64;
80025ff6:	ee e8 ff d8 	ld.d	r8,r7[-40]
80025ffa:	ee e9 ff ac 	st.d	r7[-84],r8

    // If destination does not point to the beginning of the current flash page...
    if (!Test_align((U32)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE))
80025ffe:	ee f8 ff e0 	ld.w	r8,r7[-32]
80026002:	f1 d8 c0 09 	bfextu	r8,r8,0x0,0x9
80026006:	c5 b0       	breq	800260bc <flashc_memset64+0x288>
    {
      // Fill the beginning of the page buffer with the current flash page data.
      // This is required by the hardware, even if page erase is not requested,
      // in order to be able to write successfully to erased parts of flash
      // pages that have already been written to.
      for (tmp.u8ptr = (U8 *)Align_down((U32)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE);
80026008:	ee f8 ff e0 	ld.w	r8,r7[-32]
8002600c:	e0 18 fe 00 	andl	r8,0xfe00
80026010:	ef 48 ff a8 	st.w	r7[-88],r8
80026014:	c0 e8       	rjmp	80026030 <flashc_memset64+0x1fc>
           tmp.u64ptr < (U64 *)Align_down((U32)dest.u8ptr, sizeof(U64));
           tmp.u64ptr++)
        *tmp.u64ptr = *tmp.u64ptr;
80026016:	ee fa ff a8 	ld.w	r10,r7[-88]
8002601a:	ee f8 ff a8 	ld.w	r8,r7[-88]
8002601e:	f0 e8 00 00 	ld.d	r8,r8[0]
80026022:	f4 e9 00 00 	st.d	r10[0],r8
      // This is required by the hardware, even if page erase is not requested,
      // in order to be able to write successfully to erased parts of flash
      // pages that have already been written to.
      for (tmp.u8ptr = (U8 *)Align_down((U32)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE);
           tmp.u64ptr < (U64 *)Align_down((U32)dest.u8ptr, sizeof(U64));
           tmp.u64ptr++)
80026026:	ee f8 ff a8 	ld.w	r8,r7[-88]
8002602a:	2f 88       	sub	r8,-8
8002602c:	ef 48 ff a8 	st.w	r7[-88],r8
      // Fill the beginning of the page buffer with the current flash page data.
      // This is required by the hardware, even if page erase is not requested,
      // in order to be able to write successfully to erased parts of flash
      // pages that have already been written to.
      for (tmp.u8ptr = (U8 *)Align_down((U32)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE);
           tmp.u64ptr < (U64 *)Align_down((U32)dest.u8ptr, sizeof(U64));
80026030:	ee f9 ff a8 	ld.w	r9,r7[-88]
80026034:	ee f8 ff e0 	ld.w	r8,r7[-32]
80026038:	e0 18 ff f8 	andl	r8,0xfff8
    {
      // Fill the beginning of the page buffer with the current flash page data.
      // This is required by the hardware, even if page erase is not requested,
      // in order to be able to write successfully to erased parts of flash
      // pages that have already been written to.
      for (tmp.u8ptr = (U8 *)Align_down((U32)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE);
8002603c:	10 39       	cp.w	r9,r8
8002603e:	ce c3       	brcs	80026016 <flashc_memset64+0x1e2>
           tmp.u64ptr < (U64 *)Align_down((U32)dest.u8ptr, sizeof(U64));
           tmp.u64ptr++)
        *tmp.u64ptr = *tmp.u64ptr;

      // If destination is not 64-bit aligned...
      if (!Test_align((U32)dest.u8ptr, sizeof(U64)))
80026040:	ee f8 ff e0 	ld.w	r8,r7[-32]
80026044:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80026048:	c3 a0       	breq	800260bc <flashc_memset64+0x288>
        // Fill the beginning of the flash double-word buffer with the current
        // flash page data.
        // This is required by the hardware, even if page erase is not
        // requested, in order to be able to write successfully to erased parts
        // of flash pages that have already been written to.
        for (i = 0; i < Get_align((U32)dest.u8ptr, sizeof(U64)); i++)
8002604a:	30 08       	mov	r8,0
8002604c:	ef 48 ff f0 	st.w	r7[-16],r8
80026050:	c1 38       	rjmp	80026076 <flashc_memset64+0x242>
          flash_dword.u8[i] = *tmp.u8ptr++;
80026052:	ee fa ff f0 	ld.w	r10,r7[-16]
80026056:	ee f8 ff a8 	ld.w	r8,r7[-88]
8002605a:	11 89       	ld.ub	r9,r8[0x0]
8002605c:	5c 59       	castu.b	r9
8002605e:	ee 0a 00 0a 	add	r10,r7,r10
80026062:	f5 69 ff ac 	st.b	r10[-84],r9
80026066:	2f f8       	sub	r8,-1
80026068:	ef 48 ff a8 	st.w	r7[-88],r8
        // Fill the beginning of the flash double-word buffer with the current
        // flash page data.
        // This is required by the hardware, even if page erase is not
        // requested, in order to be able to write successfully to erased parts
        // of flash pages that have already been written to.
        for (i = 0; i < Get_align((U32)dest.u8ptr, sizeof(U64)); i++)
8002606c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80026070:	2f f8       	sub	r8,-1
80026072:	ef 48 ff f0 	st.w	r7[-16],r8
80026076:	ee f8 ff e0 	ld.w	r8,r7[-32]
8002607a:	f3 d8 c0 03 	bfextu	r9,r8,0x0,0x3
8002607e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80026082:	10 39       	cp.w	r9,r8
80026084:	fe 9b ff e7 	brhi	80026052 <flashc_memset64+0x21e>
          flash_dword.u8[i] = *tmp.u8ptr++;

        // Align the destination pointer with its 64-bit boundary.
        dest.u64ptr = (U64 *)Align_down((U32)dest.u8ptr, sizeof(U64));
80026088:	ee f8 ff e0 	ld.w	r8,r7[-32]
8002608c:	e0 18 ff f8 	andl	r8,0xfff8
80026090:	ef 48 ff e0 	st.w	r7[-32],r8

        // If the current destination double-word is not the last one...
        if (dest.u64ptr < dest_end.u64ptr)
80026094:	ee f9 ff e0 	ld.w	r9,r7[-32]
80026098:	ee f8 ff bc 	ld.w	r8,r7[-68]
8002609c:	10 39       	cp.w	r9,r8
8002609e:	c0 f2       	brcc	800260bc <flashc_memset64+0x288>
        {
          // Write the flash double-word buffer to the page buffer and reinitialize it.
          *dest.u64ptr++ = flash_dword.u64;
800260a0:	ee fa ff e0 	ld.w	r10,r7[-32]
800260a4:	ee e8 ff ac 	ld.d	r8,r7[-84]
800260a8:	f4 e9 00 00 	st.d	r10[0],r8
800260ac:	f4 c8 ff f8 	sub	r8,r10,-8
800260b0:	ef 48 ff e0 	st.w	r7[-32],r8
          flash_dword.u64 = source.u64;
800260b4:	ee e8 ff d8 	ld.d	r8,r7[-40]
800260b8:	ee e9 ff ac 	st.d	r7[-84],r8
        }
      }
    }

    // Write the source data to the page buffer with 64-bit alignment.
    for (i = flash_page_source_end.u64ptr - dest.u64ptr; i; i--)
800260bc:	ee f8 ff b4 	ld.w	r8,r7[-76]
800260c0:	10 99       	mov	r9,r8
800260c2:	ee f8 ff e0 	ld.w	r8,r7[-32]
800260c6:	f2 08 01 08 	sub	r8,r9,r8
800260ca:	a3 58       	asr	r8,0x3
800260cc:	ef 48 ff f0 	st.w	r7[-16],r8
800260d0:	c1 08       	rjmp	800260f0 <flashc_memset64+0x2bc>
      *dest.u64ptr++ = source.u64;
800260d2:	ee fa ff e0 	ld.w	r10,r7[-32]
800260d6:	ee e8 ff d8 	ld.d	r8,r7[-40]
800260da:	f4 e9 00 00 	st.d	r10[0],r8
800260de:	f4 c8 ff f8 	sub	r8,r10,-8
800260e2:	ef 48 ff e0 	st.w	r7[-32],r8
        }
      }
    }

    // Write the source data to the page buffer with 64-bit alignment.
    for (i = flash_page_source_end.u64ptr - dest.u64ptr; i; i--)
800260e6:	ee f8 ff f0 	ld.w	r8,r7[-16]
800260ea:	20 18       	sub	r8,1
800260ec:	ef 48 ff f0 	st.w	r7[-16],r8
800260f0:	ee f8 ff f0 	ld.w	r8,r7[-16]
800260f4:	58 08       	cp.w	r8,0
800260f6:	ce e1       	brne	800260d2 <flashc_memset64+0x29e>
      *dest.u64ptr++ = source.u64;

    // If the current destination page has an incomplete end...
    if (incomplete_flash_page_end)
800260f8:	ef 39 ff eb 	ld.ub	r9,r7[-21]
800260fc:	30 08       	mov	r8,0
800260fe:	f0 09 18 00 	cp.b	r9,r8
80026102:	c4 70       	breq	80026190 <flashc_memset64+0x35c>
    {
      // This is required by the hardware, even if page erase is not requested,
      // in order to be able to write successfully to erased parts of flash
      // pages that have already been written to.
      {
        tmp.u8ptr = (volatile U8 *)dest_end.u8ptr;
80026104:	ee f8 ff d4 	ld.w	r8,r7[-44]
80026108:	ef 48 ff a8 	st.w	r7[-88],r8

        // If end of destination is not 64-bit aligned...
        if (!Test_align((U32)dest_end.u8ptr, sizeof(U64)))
8002610c:	ee f8 ff d4 	ld.w	r8,r7[-44]
80026110:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80026114:	c3 80       	breq	80026184 <flashc_memset64+0x350>
        {
          // Fill the end of the flash double-word buffer with the current flash page data.
          for (i = Get_align((U32)dest_end.u8ptr, sizeof(U64)); i < sizeof(U64); i++)
80026116:	ee f8 ff d4 	ld.w	r8,r7[-44]
8002611a:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
8002611e:	ef 48 ff f0 	st.w	r7[-16],r8
80026122:	c1 38       	rjmp	80026148 <flashc_memset64+0x314>
            flash_dword.u8[i] = *tmp.u8ptr++;
80026124:	ee fa ff f0 	ld.w	r10,r7[-16]
80026128:	ee f8 ff a8 	ld.w	r8,r7[-88]
8002612c:	11 89       	ld.ub	r9,r8[0x0]
8002612e:	5c 59       	castu.b	r9
80026130:	ee 0a 00 0a 	add	r10,r7,r10
80026134:	f5 69 ff ac 	st.b	r10[-84],r9
80026138:	2f f8       	sub	r8,-1
8002613a:	ef 48 ff a8 	st.w	r7[-88],r8

        // If end of destination is not 64-bit aligned...
        if (!Test_align((U32)dest_end.u8ptr, sizeof(U64)))
        {
          // Fill the end of the flash double-word buffer with the current flash page data.
          for (i = Get_align((U32)dest_end.u8ptr, sizeof(U64)); i < sizeof(U64); i++)
8002613e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80026142:	2f f8       	sub	r8,-1
80026144:	ef 48 ff f0 	st.w	r7[-16],r8
80026148:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002614c:	58 78       	cp.w	r8,7
8002614e:	fe 98 ff eb 	brls	80026124 <flashc_memset64+0x2f0>
            flash_dword.u8[i] = *tmp.u8ptr++;

          // Write the flash double-word buffer to the page buffer.
          *dest.u64ptr++ = flash_dword.u64;
80026152:	ee fa ff e0 	ld.w	r10,r7[-32]
80026156:	ee e8 ff ac 	ld.d	r8,r7[-84]
8002615a:	f4 e9 00 00 	st.d	r10[0],r8
8002615e:	f4 c8 ff f8 	sub	r8,r10,-8
80026162:	ef 48 ff e0 	st.w	r7[-32],r8
        }

        // Fill the end of the page buffer with the current flash page data.
        for (; !Test_align((U32)tmp.u64ptr, AVR32_FLASHC_PAGE_SIZE); tmp.u64ptr++)
80026166:	c1 08       	rjmp	80026186 <flashc_memset64+0x352>
          *tmp.u64ptr = *tmp.u64ptr;
80026168:	ee fa ff a8 	ld.w	r10,r7[-88]
8002616c:	ee f8 ff a8 	ld.w	r8,r7[-88]
80026170:	f0 e8 00 00 	ld.d	r8,r8[0]
80026174:	f4 e9 00 00 	st.d	r10[0],r8
          // Write the flash double-word buffer to the page buffer.
          *dest.u64ptr++ = flash_dword.u64;
        }

        // Fill the end of the page buffer with the current flash page data.
        for (; !Test_align((U32)tmp.u64ptr, AVR32_FLASHC_PAGE_SIZE); tmp.u64ptr++)
80026178:	ee f8 ff a8 	ld.w	r8,r7[-88]
8002617c:	2f 88       	sub	r8,-8
8002617e:	ef 48 ff a8 	st.w	r7[-88],r8
80026182:	c0 28       	rjmp	80026186 <flashc_memset64+0x352>
80026184:	d7 03       	nop
80026186:	ee f8 ff a8 	ld.w	r8,r7[-88]
8002618a:	f1 d8 c0 09 	bfextu	r8,r8,0x0,0x9
8002618e:	ce d1       	brne	80026168 <flashc_memset64+0x334>
          *tmp.u64ptr = *tmp.u64ptr;
      }
    }

    // If the current flash page is in the flash array...
    if (dest.u8ptr <= AVR32_FLASHC_USER_PAGE)
80026190:	ee f8 ff e0 	ld.w	r8,r7[-32]
80026194:	fc 19 80 80 	movh	r9,0x8080
80026198:	12 38       	cp.w	r8,r9
8002619a:	e0 8b 00 2c 	brhi	800261f2 <flashc_memset64+0x3be>
    {
      // Erase the current page if requested and write it from the page buffer.
      if (erase)
8002619e:	ef 39 ff 94 	ld.ub	r9,r7[-108]
800261a2:	30 08       	mov	r8,0
800261a4:	f0 09 18 00 	cp.b	r9,r8
800261a8:	c0 e0       	breq	800261c4 <flashc_memset64+0x390>
      {
        flashc_erase_page(-1, false);
800261aa:	30 0b       	mov	r11,0
800261ac:	3f fc       	mov	r12,-1
800261ae:	f0 16 00 99 	mcall	r6[612]
        error_status |= flashc_error_status;
800261b2:	ec f8 00 54 	ld.w	r8,r6[84]
800261b6:	70 08       	ld.w	r8,r8[0x0]
800261b8:	ee f9 ff ec 	ld.w	r9,r7[-20]
800261bc:	f3 e8 10 08 	or	r8,r9,r8
800261c0:	ef 48 ff ec 	st.w	r7[-20],r8
      }
      flashc_write_page(-1);
800261c4:	3f fc       	mov	r12,-1
800261c6:	f0 16 00 ed 	mcall	r6[948]
      error_status |= flashc_error_status;
800261ca:	ec f8 00 54 	ld.w	r8,r6[84]
800261ce:	70 08       	ld.w	r8,r8[0x0]
800261d0:	ee f9 ff ec 	ld.w	r9,r7[-20]
800261d4:	f3 e8 10 08 	or	r8,r9,r8
800261d8:	ef 48 ff ec 	st.w	r7[-20],r8

      // If the end of the flash array is reached, go to the User page.
      if (dest.u8ptr >= flash_array_end.u8ptr)
800261dc:	ee f9 ff e0 	ld.w	r9,r7[-32]
800261e0:	ee f8 ff e4 	ld.w	r8,r7[-28]
800261e4:	10 39       	cp.w	r9,r8
800261e6:	c2 33       	brcs	8002622c <flashc_memset64+0x3f8>
        dest.u8ptr = AVR32_FLASHC_USER_PAGE;
800261e8:	fc 18 80 80 	movh	r8,0x8080
800261ec:	ef 48 ff e0 	st.w	r7[-32],r8
800261f0:	c1 e8       	rjmp	8002622c <flashc_memset64+0x3f8>
    }
    // If the current flash page is the User page...
    else
    {
      // Erase the User page if requested and write it from the page buffer.
      if (erase)
800261f2:	ef 39 ff 94 	ld.ub	r9,r7[-108]
800261f6:	30 08       	mov	r8,0
800261f8:	f0 09 18 00 	cp.b	r9,r8
800261fc:	c0 d0       	breq	80026216 <flashc_memset64+0x3e2>
      {
        flashc_erase_user_page(false);
800261fe:	30 0c       	mov	r12,0
80026200:	f0 16 01 22 	mcall	r6[1160]
        error_status |= flashc_error_status;
80026204:	ec f8 00 54 	ld.w	r8,r6[84]
80026208:	70 08       	ld.w	r8,r8[0x0]
8002620a:	ee f9 ff ec 	ld.w	r9,r7[-20]
8002620e:	f3 e8 10 08 	or	r8,r9,r8
80026212:	ef 48 ff ec 	st.w	r7[-20],r8
      }
      flashc_write_user_page();
80026216:	f0 16 00 ec 	mcall	r6[944]
      error_status |= flashc_error_status;
8002621a:	ec f8 00 54 	ld.w	r8,r6[84]
8002621e:	70 08       	ld.w	r8,r8[0x0]
80026220:	ee f9 ff ec 	ld.w	r9,r7[-20]
80026224:	f3 e8 10 08 	or	r8,r9,r8
80026228:	ef 48 ff ec 	st.w	r7[-20],r8
  dest_end.u16ptr = (U16 *)Align_down((U32)dest_end.u8ptr, sizeof(U16));
  dest_end.u32ptr = (U32 *)Align_down((U32)dest_end.u16ptr, sizeof(U32));
  dest_end.u64ptr = (U64 *)Align_down((U32)dest_end.u32ptr, sizeof(U64));

  // While end of destination is not reached...
  while (dest.u8ptr < dest_end.u8ptr)
8002622c:	ee f9 ff e0 	ld.w	r9,r7[-32]
80026230:	ee f8 ff d4 	ld.w	r8,r7[-44]
80026234:	10 39       	cp.w	r9,r8
80026236:	fe 93 fe ad 	brlo	80025f90 <flashc_memset64+0x15c>
      error_status |= flashc_error_status;
    }
  }

  // Update the FLASHC error status.
  flashc_error_status = error_status;
8002623a:	ec f8 00 54 	ld.w	r8,r6[84]
8002623e:	ee f9 ff ec 	ld.w	r9,r7[-20]
80026242:	91 09       	st.w	r8[0x0],r9

  // Return the initial destination pointer as the standard memset function does.
  return dst;
80026244:	ee f8 ff a4 	ld.w	r8,r7[-92]
}
80026248:	10 9c       	mov	r12,r8
8002624a:	2e 5d       	sub	sp,-108
8002624c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80026250:	80 02       	ld.sh	r2,r0[0x0]
80026252:	5c c4       	swap.bh	r4

80026254 <flashc_memcpy>:


volatile void *flashc_memcpy(volatile void *dst, const void *src, size_t nbytes, bool erase)
{
80026254:	eb cd 40 c0 	pushm	r6-r7,lr
80026258:	1a 97       	mov	r7,sp
8002625a:	21 ad       	sub	sp,104
8002625c:	fe f6 05 80 	ld.w	r6,pc[1408]
80026260:	1e 26       	rsub	r6,pc
80026262:	ef 4c ff a4 	st.w	r7[-92],r12
80026266:	ef 4b ff a0 	st.w	r7[-96],r11
8002626a:	ef 4a ff 9c 	st.w	r7[-100],r10
8002626e:	12 98       	mov	r8,r9
80026270:	ef 68 ff 98 	st.b	r7[-104],r8
  UnionCPtr source;
  StructCVPtr dest_end;
  UnionCVPtr flash_page_source_end;
  bool incomplete_flash_page_end;
  Union64 flash_dword;
  bool flash_dword_pending = false;
80026274:	30 08       	mov	r8,0
80026276:	ef 68 ff e7 	st.b	r7[-25],r8
  UnionVPtr tmp;
  unsigned int error_status = 0;
8002627a:	30 08       	mov	r8,0
8002627c:	ef 48 ff e8 	st.w	r7[-24],r8
  unsigned int i, j;

  // Reformat arguments.
  flash_array_end.u8ptr = AVR32_FLASH + flashc_get_flash_size();
80026280:	f0 16 00 bc 	mcall	r6[752]
80026284:	18 99       	mov	r9,r12
80026286:	fc 18 80 00 	movh	r8,0x8000
8002628a:	f2 08 00 08 	add	r8,r9,r8
8002628e:	ef 48 ff e0 	st.w	r7[-32],r8
  dest.u8ptr = dst;
80026292:	ee f8 ff a4 	ld.w	r8,r7[-92]
80026296:	ef 48 ff dc 	st.w	r7[-36],r8
  source.u8ptr = src;
8002629a:	ee f8 ff a0 	ld.w	r8,r7[-96]
8002629e:	ef 48 ff d8 	st.w	r7[-40],r8
  dest_end.u8ptr = dest.u8ptr + nbytes;
800262a2:	ee f9 ff dc 	ld.w	r9,r7[-36]
800262a6:	ee f8 ff 9c 	ld.w	r8,r7[-100]
800262aa:	f2 08 00 08 	add	r8,r9,r8
800262ae:	ef 48 ff d4 	st.w	r7[-44],r8

  // If destination is outside flash, go to next flash page if any.
  if (dest.u8ptr < AVR32_FLASH)
800262b2:	ee f8 ff dc 	ld.w	r8,r7[-36]
800262b6:	e0 6a ff ff 	mov	r10,65535
800262ba:	ea 1a 7f ff 	orh	r10,0x7fff
800262be:	14 38       	cp.w	r8,r10
800262c0:	e0 8b 00 13 	brhi	800262e6 <flashc_memcpy+0x92>
  {
    source.u8ptr += AVR32_FLASH - dest.u8ptr;
800262c4:	ee f9 ff d8 	ld.w	r9,r7[-40]
800262c8:	ee f8 ff dc 	ld.w	r8,r7[-36]
800262cc:	fc 1a 80 00 	movh	r10,0x8000
800262d0:	f4 08 01 08 	sub	r8,r10,r8
800262d4:	f2 08 00 08 	add	r8,r9,r8
800262d8:	ef 48 ff d8 	st.w	r7[-40],r8
    dest.u8ptr = AVR32_FLASH;
800262dc:	fc 18 80 00 	movh	r8,0x8000
800262e0:	ef 48 ff dc 	st.w	r7[-36],r8
800262e4:	c2 18       	rjmp	80026326 <flashc_memcpy+0xd2>
  }
  else if (flash_array_end.u8ptr <= dest.u8ptr && dest.u8ptr < AVR32_FLASHC_USER_PAGE)
800262e6:	ee f9 ff e0 	ld.w	r9,r7[-32]
800262ea:	ee f8 ff dc 	ld.w	r8,r7[-36]
800262ee:	10 39       	cp.w	r9,r8
800262f0:	e0 8b 00 1b 	brhi	80026326 <flashc_memcpy+0xd2>
800262f4:	ee f8 ff dc 	ld.w	r8,r7[-36]
800262f8:	e0 69 ff ff 	mov	r9,65535
800262fc:	ea 19 80 7f 	orh	r9,0x807f
80026300:	12 38       	cp.w	r8,r9
80026302:	e0 8b 00 12 	brhi	80026326 <flashc_memcpy+0xd2>
  {
    source.u8ptr += AVR32_FLASHC_USER_PAGE - dest.u8ptr;
80026306:	ee f9 ff d8 	ld.w	r9,r7[-40]
8002630a:	ee f8 ff dc 	ld.w	r8,r7[-36]
8002630e:	fc 1a 80 80 	movh	r10,0x8080
80026312:	f4 08 01 08 	sub	r8,r10,r8
80026316:	f2 08 00 08 	add	r8,r9,r8
8002631a:	ef 48 ff d8 	st.w	r7[-40],r8
    dest.u8ptr = AVR32_FLASHC_USER_PAGE;
8002631e:	fc 18 80 80 	movh	r8,0x8080
80026322:	ef 48 ff dc 	st.w	r7[-36],r8
  }

  // If end of destination is outside flash, move it to the end of the previous flash page if any.
  if (dest_end.u8ptr > AVR32_FLASHC_USER_PAGE + AVR32_FLASHC_USER_PAGE_SIZE)
80026326:	ee f8 ff d4 	ld.w	r8,r7[-44]
8002632a:	e0 69 02 00 	mov	r9,512
8002632e:	ea 19 80 80 	orh	r9,0x8080
80026332:	12 38       	cp.w	r8,r9
80026334:	e0 88 00 09 	brls	80026346 <flashc_memcpy+0xf2>
  {
    dest_end.u8ptr = AVR32_FLASHC_USER_PAGE + AVR32_FLASHC_USER_PAGE_SIZE;
80026338:	e0 68 02 00 	mov	r8,512
8002633c:	ea 18 80 80 	orh	r8,0x8080
80026340:	ef 48 ff d4 	st.w	r7[-44],r8
80026344:	c1 38       	rjmp	8002636a <flashc_memcpy+0x116>
  }
  else if (AVR32_FLASHC_USER_PAGE >= dest_end.u8ptr && dest_end.u8ptr > flash_array_end.u8ptr)
80026346:	ee f8 ff d4 	ld.w	r8,r7[-44]
8002634a:	fc 1a 80 80 	movh	r10,0x8080
8002634e:	14 38       	cp.w	r8,r10
80026350:	e0 8b 00 0d 	brhi	8002636a <flashc_memcpy+0x116>
80026354:	ee f9 ff d4 	ld.w	r9,r7[-44]
80026358:	ee f8 ff e0 	ld.w	r8,r7[-32]
8002635c:	10 39       	cp.w	r9,r8
8002635e:	e0 88 00 06 	brls	8002636a <flashc_memcpy+0x116>
  {
    dest_end.u8ptr = flash_array_end.u8ptr;
80026362:	ee f8 ff e0 	ld.w	r8,r7[-32]
80026366:	ef 48 ff d4 	st.w	r7[-44],r8
  }

  // Align each end of destination pointer with its natural boundary.
  dest_end.u16ptr = (U16 *)Align_down((U32)dest_end.u8ptr, sizeof(U16));
8002636a:	ee f8 ff d4 	ld.w	r8,r7[-44]
8002636e:	a1 c8       	cbr	r8,0x0
80026370:	ef 48 ff cc 	st.w	r7[-52],r8
  dest_end.u32ptr = (U32 *)Align_down((U32)dest_end.u16ptr, sizeof(U32));
80026374:	ee f8 ff cc 	ld.w	r8,r7[-52]
80026378:	e0 18 ff fc 	andl	r8,0xfffc
8002637c:	ef 48 ff c4 	st.w	r7[-60],r8
  dest_end.u64ptr = (U64 *)Align_down((U32)dest_end.u32ptr, sizeof(U64));
80026380:	ee f8 ff c4 	ld.w	r8,r7[-60]
80026384:	e0 18 ff f8 	andl	r8,0xfff8
80026388:	ef 48 ff bc 	st.w	r7[-68],r8

  // While end of destination is not reached...
  while (dest.u8ptr < dest_end.u8ptr)
8002638c:	e0 8f 02 16 	bral	800267b8 <flashc_memcpy+0x564>
  {
    // Clear the page buffer in order to prepare data for a flash page write.
    flashc_clear_page_buffer();
80026390:	f0 16 01 1d 	mcall	r6[1140]
    error_status |= flashc_error_status;
80026394:	ec f8 00 54 	ld.w	r8,r6[84]
80026398:	70 08       	ld.w	r8,r8[0x0]
8002639a:	ee f9 ff e8 	ld.w	r9,r7[-24]
8002639e:	f3 e8 10 08 	or	r8,r9,r8
800263a2:	ef 48 ff e8 	st.w	r7[-24],r8

    // Determine where the source data will end in the current flash page.
    flash_page_source_end.u64ptr =
      (U64 *)min((U32)dest_end.u64ptr,
800263a6:	ee f8 ff bc 	ld.w	r8,r7[-68]
800263aa:	ef 48 ff f8 	st.w	r7[-8],r8
800263ae:	ee f8 ff dc 	ld.w	r8,r7[-36]
800263b2:	e0 18 fe 00 	andl	r8,0xfe00
800263b6:	f0 c8 fe 00 	sub	r8,r8,-512
800263ba:	ef 48 ff fc 	st.w	r7[-4],r8
800263be:	ee f8 ff f8 	ld.w	r8,r7[-8]
800263c2:	ee f9 ff fc 	ld.w	r9,r7[-4]
800263c6:	f0 09 0d 48 	min	r8,r8,r9
800263ca:	ef 48 ff f4 	st.w	r7[-12],r8
800263ce:	ee f8 ff f4 	ld.w	r8,r7[-12]
    // Clear the page buffer in order to prepare data for a flash page write.
    flashc_clear_page_buffer();
    error_status |= flashc_error_status;

    // Determine where the source data will end in the current flash page.
    flash_page_source_end.u64ptr =
800263d2:	ef 48 ff b4 	st.w	r7[-76],r8
      (U64 *)min((U32)dest_end.u64ptr,
                 Align_down((U32)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE) + AVR32_FLASHC_PAGE_SIZE);

    // Determine if the current destination page has an incomplete end.
    incomplete_flash_page_end = (Align_down((U32)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE) >=
800263d6:	ee f8 ff dc 	ld.w	r8,r7[-36]
800263da:	10 9a       	mov	r10,r8
800263dc:	e0 1a fe 00 	andl	r10,0xfe00
                                 Align_down((U32)dest_end.u8ptr, AVR32_FLASHC_PAGE_SIZE));
800263e0:	ee f8 ff d4 	ld.w	r8,r7[-44]
800263e4:	10 99       	mov	r9,r8
800263e6:	e0 19 fe 00 	andl	r9,0xfe00
    flash_page_source_end.u64ptr =
      (U64 *)min((U32)dest_end.u64ptr,
                 Align_down((U32)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE) + AVR32_FLASHC_PAGE_SIZE);

    // Determine if the current destination page has an incomplete end.
    incomplete_flash_page_end = (Align_down((U32)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE) >=
800263ea:	30 18       	mov	r8,1
800263ec:	12 3a       	cp.w	r10,r9
800263ee:	c0 22       	brcc	800263f2 <flashc_memcpy+0x19e>
800263f0:	30 08       	mov	r8,0
800263f2:	ef 68 ff e6 	st.b	r7[-26],r8
                                 Align_down((U32)dest_end.u8ptr, AVR32_FLASHC_PAGE_SIZE));

    // If destination does not point to the beginning of the current flash page...
    if (!Test_align((U32)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE))
800263f6:	ee f8 ff dc 	ld.w	r8,r7[-36]
800263fa:	f1 d8 c0 09 	bfextu	r8,r8,0x0,0x9
800263fe:	c7 20       	breq	800264e2 <flashc_memcpy+0x28e>
    {
      // Fill the beginning of the page buffer with the current flash page data.
      // This is required by the hardware, even if page erase is not requested,
      // in order to be able to write successfully to erased parts of flash
      // pages that have already been written to.
      for (tmp.u8ptr = (U8 *)Align_down((U32)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE);
80026400:	ee f8 ff dc 	ld.w	r8,r7[-36]
80026404:	e0 18 fe 00 	andl	r8,0xfe00
80026408:	ef 48 ff a8 	st.w	r7[-88],r8
8002640c:	c0 e8       	rjmp	80026428 <flashc_memcpy+0x1d4>
           tmp.u64ptr < (U64 *)Align_down((U32)dest.u8ptr, sizeof(U64));
           tmp.u64ptr++)
        *tmp.u64ptr = *tmp.u64ptr;
8002640e:	ee fa ff a8 	ld.w	r10,r7[-88]
80026412:	ee f8 ff a8 	ld.w	r8,r7[-88]
80026416:	f0 e8 00 00 	ld.d	r8,r8[0]
8002641a:	f4 e9 00 00 	st.d	r10[0],r8
      // This is required by the hardware, even if page erase is not requested,
      // in order to be able to write successfully to erased parts of flash
      // pages that have already been written to.
      for (tmp.u8ptr = (U8 *)Align_down((U32)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE);
           tmp.u64ptr < (U64 *)Align_down((U32)dest.u8ptr, sizeof(U64));
           tmp.u64ptr++)
8002641e:	ee f8 ff a8 	ld.w	r8,r7[-88]
80026422:	2f 88       	sub	r8,-8
80026424:	ef 48 ff a8 	st.w	r7[-88],r8
      // Fill the beginning of the page buffer with the current flash page data.
      // This is required by the hardware, even if page erase is not requested,
      // in order to be able to write successfully to erased parts of flash
      // pages that have already been written to.
      for (tmp.u8ptr = (U8 *)Align_down((U32)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE);
           tmp.u64ptr < (U64 *)Align_down((U32)dest.u8ptr, sizeof(U64));
80026428:	ee f9 ff a8 	ld.w	r9,r7[-88]
8002642c:	ee f8 ff dc 	ld.w	r8,r7[-36]
80026430:	e0 18 ff f8 	andl	r8,0xfff8
    {
      // Fill the beginning of the page buffer with the current flash page data.
      // This is required by the hardware, even if page erase is not requested,
      // in order to be able to write successfully to erased parts of flash
      // pages that have already been written to.
      for (tmp.u8ptr = (U8 *)Align_down((U32)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE);
80026434:	10 39       	cp.w	r9,r8
80026436:	ce c3       	brcs	8002640e <flashc_memcpy+0x1ba>
           tmp.u64ptr < (U64 *)Align_down((U32)dest.u8ptr, sizeof(U64));
           tmp.u64ptr++)
        *tmp.u64ptr = *tmp.u64ptr;

      // If destination is not 64-bit aligned...
      if (!Test_align((U32)dest.u8ptr, sizeof(U64)))
80026438:	ee f8 ff dc 	ld.w	r8,r7[-36]
8002643c:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80026440:	c5 10       	breq	800264e2 <flashc_memcpy+0x28e>
        // Fill the beginning of the flash double-word buffer with the current
        // flash page data.
        // This is required by the hardware, even if page erase is not
        // requested, in order to be able to write successfully to erased parts
        // of flash pages that have already been written to.
        for (i = 0; i < Get_align((U32)dest.u8ptr, sizeof(U64)); i++)
80026442:	30 08       	mov	r8,0
80026444:	ef 48 ff ec 	st.w	r7[-20],r8
80026448:	c1 38       	rjmp	8002646e <flashc_memcpy+0x21a>
          flash_dword.u8[i] = *tmp.u8ptr++;
8002644a:	ee fa ff ec 	ld.w	r10,r7[-20]
8002644e:	ee f8 ff a8 	ld.w	r8,r7[-88]
80026452:	11 89       	ld.ub	r9,r8[0x0]
80026454:	5c 59       	castu.b	r9
80026456:	ee 0a 00 0a 	add	r10,r7,r10
8002645a:	f5 69 ff ac 	st.b	r10[-84],r9
8002645e:	2f f8       	sub	r8,-1
80026460:	ef 48 ff a8 	st.w	r7[-88],r8
        // Fill the beginning of the flash double-word buffer with the current
        // flash page data.
        // This is required by the hardware, even if page erase is not
        // requested, in order to be able to write successfully to erased parts
        // of flash pages that have already been written to.
        for (i = 0; i < Get_align((U32)dest.u8ptr, sizeof(U64)); i++)
80026464:	ee f8 ff ec 	ld.w	r8,r7[-20]
80026468:	2f f8       	sub	r8,-1
8002646a:	ef 48 ff ec 	st.w	r7[-20],r8
8002646e:	ee f8 ff dc 	ld.w	r8,r7[-36]
80026472:	f3 d8 c0 03 	bfextu	r9,r8,0x0,0x3
80026476:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002647a:	10 39       	cp.w	r9,r8
8002647c:	fe 9b ff e7 	brhi	8002644a <flashc_memcpy+0x1f6>
          flash_dword.u8[i] = *tmp.u8ptr++;

        // Fill the end of the flash double-word buffer with the source data.
        for (; i < sizeof(U64); i++)
80026480:	c1 28       	rjmp	800264a4 <flashc_memcpy+0x250>
          flash_dword.u8[i] = *source.u8ptr++;
80026482:	ee fa ff ec 	ld.w	r10,r7[-20]
80026486:	ee f8 ff d8 	ld.w	r8,r7[-40]
8002648a:	11 89       	ld.ub	r9,r8[0x0]
8002648c:	ee 0a 00 0a 	add	r10,r7,r10
80026490:	f5 69 ff ac 	st.b	r10[-84],r9
80026494:	2f f8       	sub	r8,-1
80026496:	ef 48 ff d8 	st.w	r7[-40],r8
        // of flash pages that have already been written to.
        for (i = 0; i < Get_align((U32)dest.u8ptr, sizeof(U64)); i++)
          flash_dword.u8[i] = *tmp.u8ptr++;

        // Fill the end of the flash double-word buffer with the source data.
        for (; i < sizeof(U64); i++)
8002649a:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002649e:	2f f8       	sub	r8,-1
800264a0:	ef 48 ff ec 	st.w	r7[-20],r8
800264a4:	ee f8 ff ec 	ld.w	r8,r7[-20]
800264a8:	58 78       	cp.w	r8,7
800264aa:	fe 98 ff ec 	brls	80026482 <flashc_memcpy+0x22e>
          flash_dword.u8[i] = *source.u8ptr++;

        // Align the destination pointer with its 64-bit boundary.
        dest.u64ptr = (U64 *)Align_down((U32)dest.u8ptr, sizeof(U64));
800264ae:	ee f8 ff dc 	ld.w	r8,r7[-36]
800264b2:	e0 18 ff f8 	andl	r8,0xfff8
800264b6:	ef 48 ff dc 	st.w	r7[-36],r8

        // If the current destination double-word is not the last one...
        if (dest.u64ptr < dest_end.u64ptr)
800264ba:	ee f9 ff dc 	ld.w	r9,r7[-36]
800264be:	ee f8 ff bc 	ld.w	r8,r7[-68]
800264c2:	10 39       	cp.w	r9,r8
800264c4:	c0 c2       	brcc	800264dc <flashc_memcpy+0x288>
        {
          // Write the flash double-word buffer to the page buffer.
          *dest.u64ptr++ = flash_dword.u64;
800264c6:	ee fa ff dc 	ld.w	r10,r7[-36]
800264ca:	ee e8 ff ac 	ld.d	r8,r7[-84]
800264ce:	f4 e9 00 00 	st.d	r10[0],r8
800264d2:	f4 c8 ff f8 	sub	r8,r10,-8
800264d6:	ef 48 ff dc 	st.w	r7[-36],r8
800264da:	c0 48       	rjmp	800264e2 <flashc_memcpy+0x28e>
        }
        // If the current destination double-word is the last one, the flash
        // double-word buffer must be kept for later.
        else flash_dword_pending = true;
800264dc:	30 18       	mov	r8,1
800264de:	ef 68 ff e7 	st.b	r7[-25],r8
      }
    }

    // Read the source data with the maximal possible alignment and write it to
    // the page buffer with 64-bit alignment.
    switch (Get_align((U32)source.u8ptr, sizeof(U32)))
800264e2:	ee f8 ff d8 	ld.w	r8,r7[-40]
800264e6:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
800264ea:	c0 40       	breq	800264f2 <flashc_memcpy+0x29e>
800264ec:	58 28       	cp.w	r8,2
800264ee:	c2 70       	breq	8002653c <flashc_memcpy+0x2e8>
800264f0:	c6 18       	rjmp	800265b2 <flashc_memcpy+0x35e>
    {
    case 0:
      for (i = flash_page_source_end.u64ptr - dest.u64ptr; i; i--)
800264f2:	ee f8 ff b4 	ld.w	r8,r7[-76]
800264f6:	10 99       	mov	r9,r8
800264f8:	ee f8 ff dc 	ld.w	r8,r7[-36]
800264fc:	f2 08 01 08 	sub	r8,r9,r8
80026500:	a3 58       	asr	r8,0x3
80026502:	ef 48 ff ec 	st.w	r7[-20],r8
80026506:	c1 68       	rjmp	80026532 <flashc_memcpy+0x2de>
        *dest.u64ptr++ = *source.u64ptr++;
80026508:	ee fb ff dc 	ld.w	r11,r7[-36]
8002650c:	ee fa ff d8 	ld.w	r10,r7[-40]
80026510:	f4 e8 00 00 	ld.d	r8,r10[0]
80026514:	f6 e9 00 00 	st.d	r11[0],r8
80026518:	f6 c8 ff f8 	sub	r8,r11,-8
8002651c:	ef 48 ff dc 	st.w	r7[-36],r8
80026520:	f4 c8 ff f8 	sub	r8,r10,-8
80026524:	ef 48 ff d8 	st.w	r7[-40],r8
    // Read the source data with the maximal possible alignment and write it to
    // the page buffer with 64-bit alignment.
    switch (Get_align((U32)source.u8ptr, sizeof(U32)))
    {
    case 0:
      for (i = flash_page_source_end.u64ptr - dest.u64ptr; i; i--)
80026528:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002652c:	20 18       	sub	r8,1
8002652e:	ef 48 ff ec 	st.w	r7[-20],r8
80026532:	ee f8 ff ec 	ld.w	r8,r7[-20]
80026536:	58 08       	cp.w	r8,0
80026538:	ce 81       	brne	80026508 <flashc_memcpy+0x2b4>
        *dest.u64ptr++ = *source.u64ptr++;
      break;
8002653a:	c7 48       	rjmp	80026622 <flashc_memcpy+0x3ce>

    case sizeof(U16):
      for (i = flash_page_source_end.u64ptr - dest.u64ptr; i; i--)
8002653c:	ee f8 ff b4 	ld.w	r8,r7[-76]
80026540:	10 99       	mov	r9,r8
80026542:	ee f8 ff dc 	ld.w	r8,r7[-36]
80026546:	f2 08 01 08 	sub	r8,r9,r8
8002654a:	a3 58       	asr	r8,0x3
8002654c:	ef 48 ff ec 	st.w	r7[-20],r8
80026550:	c2 c8       	rjmp	800265a8 <flashc_memcpy+0x354>
      {
        for (j = 0; j < sizeof(U64) / sizeof(U16); j++) flash_dword.u16[j] = *source.u16ptr++;
80026552:	30 08       	mov	r8,0
80026554:	ef 48 ff f0 	st.w	r7[-16],r8
80026558:	c1 48       	rjmp	80026580 <flashc_memcpy+0x32c>
8002655a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002655e:	ee f9 ff d8 	ld.w	r9,r7[-40]
80026562:	92 0a       	ld.sh	r10,r9[0x0]
80026564:	a1 78       	lsl	r8,0x1
80026566:	ee 08 00 08 	add	r8,r7,r8
8002656a:	f1 5a ff ac 	st.h	r8[-84],r10
8002656e:	f2 c8 ff fe 	sub	r8,r9,-2
80026572:	ef 48 ff d8 	st.w	r7[-40],r8
80026576:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002657a:	2f f8       	sub	r8,-1
8002657c:	ef 48 ff f0 	st.w	r7[-16],r8
80026580:	ee f8 ff f0 	ld.w	r8,r7[-16]
80026584:	58 38       	cp.w	r8,3
80026586:	fe 98 ff ea 	brls	8002655a <flashc_memcpy+0x306>
        *dest.u64ptr++ = flash_dword.u64;
8002658a:	ee fa ff dc 	ld.w	r10,r7[-36]
8002658e:	ee e8 ff ac 	ld.d	r8,r7[-84]
80026592:	f4 e9 00 00 	st.d	r10[0],r8
80026596:	f4 c8 ff f8 	sub	r8,r10,-8
8002659a:	ef 48 ff dc 	st.w	r7[-36],r8
      for (i = flash_page_source_end.u64ptr - dest.u64ptr; i; i--)
        *dest.u64ptr++ = *source.u64ptr++;
      break;

    case sizeof(U16):
      for (i = flash_page_source_end.u64ptr - dest.u64ptr; i; i--)
8002659e:	ee f8 ff ec 	ld.w	r8,r7[-20]
800265a2:	20 18       	sub	r8,1
800265a4:	ef 48 ff ec 	st.w	r7[-20],r8
800265a8:	ee f8 ff ec 	ld.w	r8,r7[-20]
800265ac:	58 08       	cp.w	r8,0
800265ae:	cd 21       	brne	80026552 <flashc_memcpy+0x2fe>
      {
        for (j = 0; j < sizeof(U64) / sizeof(U16); j++) flash_dword.u16[j] = *source.u16ptr++;
        *dest.u64ptr++ = flash_dword.u64;
      }
      break;
800265b0:	c3 98       	rjmp	80026622 <flashc_memcpy+0x3ce>

    default:
      for (i = flash_page_source_end.u64ptr - dest.u64ptr; i; i--)
800265b2:	ee f8 ff b4 	ld.w	r8,r7[-76]
800265b6:	10 99       	mov	r9,r8
800265b8:	ee f8 ff dc 	ld.w	r8,r7[-36]
800265bc:	f2 08 01 08 	sub	r8,r9,r8
800265c0:	a3 58       	asr	r8,0x3
800265c2:	ef 48 ff ec 	st.w	r7[-20],r8
800265c6:	c2 a8       	rjmp	8002661a <flashc_memcpy+0x3c6>
      {
        for (j = 0; j < sizeof(U64); j++) flash_dword.u8[j] = *source.u8ptr++;
800265c8:	30 08       	mov	r8,0
800265ca:	ef 48 ff f0 	st.w	r7[-16],r8
800265ce:	c1 28       	rjmp	800265f2 <flashc_memcpy+0x39e>
800265d0:	ee fa ff f0 	ld.w	r10,r7[-16]
800265d4:	ee f8 ff d8 	ld.w	r8,r7[-40]
800265d8:	11 89       	ld.ub	r9,r8[0x0]
800265da:	ee 0a 00 0a 	add	r10,r7,r10
800265de:	f5 69 ff ac 	st.b	r10[-84],r9
800265e2:	2f f8       	sub	r8,-1
800265e4:	ef 48 ff d8 	st.w	r7[-40],r8
800265e8:	ee f8 ff f0 	ld.w	r8,r7[-16]
800265ec:	2f f8       	sub	r8,-1
800265ee:	ef 48 ff f0 	st.w	r7[-16],r8
800265f2:	ee f8 ff f0 	ld.w	r8,r7[-16]
800265f6:	58 78       	cp.w	r8,7
800265f8:	fe 98 ff ec 	brls	800265d0 <flashc_memcpy+0x37c>
        *dest.u64ptr++ = flash_dword.u64;
800265fc:	ee fa ff dc 	ld.w	r10,r7[-36]
80026600:	ee e8 ff ac 	ld.d	r8,r7[-84]
80026604:	f4 e9 00 00 	st.d	r10[0],r8
80026608:	f4 c8 ff f8 	sub	r8,r10,-8
8002660c:	ef 48 ff dc 	st.w	r7[-36],r8
        *dest.u64ptr++ = flash_dword.u64;
      }
      break;

    default:
      for (i = flash_page_source_end.u64ptr - dest.u64ptr; i; i--)
80026610:	ee f8 ff ec 	ld.w	r8,r7[-20]
80026614:	20 18       	sub	r8,1
80026616:	ef 48 ff ec 	st.w	r7[-20],r8
8002661a:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002661e:	58 08       	cp.w	r8,0
80026620:	cd 41       	brne	800265c8 <flashc_memcpy+0x374>
        *dest.u64ptr++ = flash_dword.u64;
      }
    }

    // If the current destination page has an incomplete end...
    if (incomplete_flash_page_end)
80026622:	ef 39 ff e6 	ld.ub	r9,r7[-26]
80026626:	30 08       	mov	r8,0
80026628:	f0 09 18 00 	cp.b	r9,r8
8002662c:	c6 c0       	breq	80026704 <flashc_memcpy+0x4b0>
    {
      // If the flash double-word buffer is in use, do not initialize it.
      if (flash_dword_pending) i = Get_align((U32)dest_end.u8ptr, sizeof(U64));
8002662e:	ef 39 ff e7 	ld.ub	r9,r7[-25]
80026632:	30 08       	mov	r8,0
80026634:	f0 09 18 00 	cp.b	r9,r8
80026638:	c0 80       	breq	80026648 <flashc_memcpy+0x3f4>
8002663a:	ee f8 ff d4 	ld.w	r8,r7[-44]
8002663e:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80026642:	ef 48 ff ec 	st.w	r7[-20],r8
80026646:	c1 f8       	rjmp	80026684 <flashc_memcpy+0x430>
      // If the flash double-word buffer is free...
      else
      {
        // Fill the beginning of the flash double-word buffer with the source data.
        for (i = 0; i < Get_align((U32)dest_end.u8ptr, sizeof(U64)); i++)
80026648:	30 08       	mov	r8,0
8002664a:	ef 48 ff ec 	st.w	r7[-20],r8
8002664e:	c1 28       	rjmp	80026672 <flashc_memcpy+0x41e>
          flash_dword.u8[i] = *source.u8ptr++;
80026650:	ee fa ff ec 	ld.w	r10,r7[-20]
80026654:	ee f8 ff d8 	ld.w	r8,r7[-40]
80026658:	11 89       	ld.ub	r9,r8[0x0]
8002665a:	ee 0a 00 0a 	add	r10,r7,r10
8002665e:	f5 69 ff ac 	st.b	r10[-84],r9
80026662:	2f f8       	sub	r8,-1
80026664:	ef 48 ff d8 	st.w	r7[-40],r8
      if (flash_dword_pending) i = Get_align((U32)dest_end.u8ptr, sizeof(U64));
      // If the flash double-word buffer is free...
      else
      {
        // Fill the beginning of the flash double-word buffer with the source data.
        for (i = 0; i < Get_align((U32)dest_end.u8ptr, sizeof(U64)); i++)
80026668:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002666c:	2f f8       	sub	r8,-1
8002666e:	ef 48 ff ec 	st.w	r7[-20],r8
80026672:	ee f8 ff d4 	ld.w	r8,r7[-44]
80026676:	f3 d8 c0 03 	bfextu	r9,r8,0x0,0x3
8002667a:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002667e:	10 39       	cp.w	r9,r8
80026680:	fe 9b ff e8 	brhi	80026650 <flashc_memcpy+0x3fc>

      // This is required by the hardware, even if page erase is not requested,
      // in order to be able to write successfully to erased parts of flash
      // pages that have already been written to.
      {
        tmp.u8ptr = (volatile U8 *)dest_end.u8ptr;
80026684:	ee f8 ff d4 	ld.w	r8,r7[-44]
80026688:	ef 48 ff a8 	st.w	r7[-88],r8

        // If end of destination is not 64-bit aligned...
        if (!Test_align((U32)dest_end.u8ptr, sizeof(U64)))
8002668c:	ee f8 ff d4 	ld.w	r8,r7[-44]
80026690:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80026694:	c3 20       	breq	800266f8 <flashc_memcpy+0x4a4>
        {
          // Fill the end of the flash double-word buffer with the current flash page data.
          for (; i < sizeof(U64); i++)
80026696:	c1 38       	rjmp	800266bc <flashc_memcpy+0x468>
            flash_dword.u8[i] = *tmp.u8ptr++;
80026698:	ee fa ff ec 	ld.w	r10,r7[-20]
8002669c:	ee f8 ff a8 	ld.w	r8,r7[-88]
800266a0:	11 89       	ld.ub	r9,r8[0x0]
800266a2:	5c 59       	castu.b	r9
800266a4:	ee 0a 00 0a 	add	r10,r7,r10
800266a8:	f5 69 ff ac 	st.b	r10[-84],r9
800266ac:	2f f8       	sub	r8,-1
800266ae:	ef 48 ff a8 	st.w	r7[-88],r8

        // If end of destination is not 64-bit aligned...
        if (!Test_align((U32)dest_end.u8ptr, sizeof(U64)))
        {
          // Fill the end of the flash double-word buffer with the current flash page data.
          for (; i < sizeof(U64); i++)
800266b2:	ee f8 ff ec 	ld.w	r8,r7[-20]
800266b6:	2f f8       	sub	r8,-1
800266b8:	ef 48 ff ec 	st.w	r7[-20],r8
800266bc:	ee f8 ff ec 	ld.w	r8,r7[-20]
800266c0:	58 78       	cp.w	r8,7
800266c2:	fe 98 ff eb 	brls	80026698 <flashc_memcpy+0x444>
            flash_dword.u8[i] = *tmp.u8ptr++;

          // Write the flash double-word buffer to the page buffer.
          *dest.u64ptr++ = flash_dword.u64;
800266c6:	ee fa ff dc 	ld.w	r10,r7[-36]
800266ca:	ee e8 ff ac 	ld.d	r8,r7[-84]
800266ce:	f4 e9 00 00 	st.d	r10[0],r8
800266d2:	f4 c8 ff f8 	sub	r8,r10,-8
800266d6:	ef 48 ff dc 	st.w	r7[-36],r8
        }

        // Fill the end of the page buffer with the current flash page data.
        for (; !Test_align((U32)tmp.u64ptr, AVR32_FLASHC_PAGE_SIZE); tmp.u64ptr++)
800266da:	c1 08       	rjmp	800266fa <flashc_memcpy+0x4a6>
          *tmp.u64ptr = *tmp.u64ptr;
800266dc:	ee fa ff a8 	ld.w	r10,r7[-88]
800266e0:	ee f8 ff a8 	ld.w	r8,r7[-88]
800266e4:	f0 e8 00 00 	ld.d	r8,r8[0]
800266e8:	f4 e9 00 00 	st.d	r10[0],r8
          // Write the flash double-word buffer to the page buffer.
          *dest.u64ptr++ = flash_dword.u64;
        }

        // Fill the end of the page buffer with the current flash page data.
        for (; !Test_align((U32)tmp.u64ptr, AVR32_FLASHC_PAGE_SIZE); tmp.u64ptr++)
800266ec:	ee f8 ff a8 	ld.w	r8,r7[-88]
800266f0:	2f 88       	sub	r8,-8
800266f2:	ef 48 ff a8 	st.w	r7[-88],r8
800266f6:	c0 28       	rjmp	800266fa <flashc_memcpy+0x4a6>
800266f8:	d7 03       	nop
800266fa:	ee f8 ff a8 	ld.w	r8,r7[-88]
800266fe:	f1 d8 c0 09 	bfextu	r8,r8,0x0,0x9
80026702:	ce d1       	brne	800266dc <flashc_memcpy+0x488>
          *tmp.u64ptr = *tmp.u64ptr;
      }
    }

    // If the current flash page is in the flash array...
    if (dest.u8ptr <= AVR32_FLASHC_USER_PAGE)
80026704:	ee f8 ff dc 	ld.w	r8,r7[-36]
80026708:	fc 19 80 80 	movh	r9,0x8080
8002670c:	12 38       	cp.w	r8,r9
8002670e:	e0 8b 00 38 	brhi	8002677e <flashc_memcpy+0x52a>
    {
      // Erase the current page if requested and write it from the page buffer.
      if (erase)
80026712:	ef 39 ff 98 	ld.ub	r9,r7[-104]
80026716:	30 08       	mov	r8,0
80026718:	f0 09 18 00 	cp.b	r9,r8
8002671c:	c0 e0       	breq	80026738 <flashc_memcpy+0x4e4>
      {
        flashc_erase_page(-1, false);
8002671e:	30 0b       	mov	r11,0
80026720:	3f fc       	mov	r12,-1
80026722:	f0 16 00 99 	mcall	r6[612]
        error_status |= flashc_error_status;
80026726:	ec f8 00 54 	ld.w	r8,r6[84]
8002672a:	70 08       	ld.w	r8,r8[0x0]
8002672c:	ee f9 ff e8 	ld.w	r9,r7[-24]
80026730:	f3 e8 10 08 	or	r8,r9,r8
80026734:	ef 48 ff e8 	st.w	r7[-24],r8
      }
      flashc_write_page(-1);
80026738:	3f fc       	mov	r12,-1
8002673a:	f0 16 00 ed 	mcall	r6[948]
      error_status |= flashc_error_status;
8002673e:	ec f8 00 54 	ld.w	r8,r6[84]
80026742:	70 08       	ld.w	r8,r8[0x0]
80026744:	ee f9 ff e8 	ld.w	r9,r7[-24]
80026748:	f3 e8 10 08 	or	r8,r9,r8
8002674c:	ef 48 ff e8 	st.w	r7[-24],r8

      // If the end of the flash array is reached, go to the User page.
      if (dest.u8ptr >= flash_array_end.u8ptr)
80026750:	ee f9 ff dc 	ld.w	r9,r7[-36]
80026754:	ee f8 ff e0 	ld.w	r8,r7[-32]
80026758:	10 39       	cp.w	r9,r8
8002675a:	c2 f3       	brcs	800267b8 <flashc_memcpy+0x564>
      {
        source.u8ptr += AVR32_FLASHC_USER_PAGE - dest.u8ptr;
8002675c:	ee f9 ff d8 	ld.w	r9,r7[-40]
80026760:	ee f8 ff dc 	ld.w	r8,r7[-36]
80026764:	fc 1a 80 80 	movh	r10,0x8080
80026768:	f4 08 01 08 	sub	r8,r10,r8
8002676c:	f2 08 00 08 	add	r8,r9,r8
80026770:	ef 48 ff d8 	st.w	r7[-40],r8
        dest.u8ptr = AVR32_FLASHC_USER_PAGE;
80026774:	fc 18 80 80 	movh	r8,0x8080
80026778:	ef 48 ff dc 	st.w	r7[-36],r8
8002677c:	c1 e8       	rjmp	800267b8 <flashc_memcpy+0x564>
    }
    // If the current flash page is the User page...
    else
    {
      // Erase the User page if requested and write it from the page buffer.
      if (erase)
8002677e:	ef 39 ff 98 	ld.ub	r9,r7[-104]
80026782:	30 08       	mov	r8,0
80026784:	f0 09 18 00 	cp.b	r9,r8
80026788:	c0 d0       	breq	800267a2 <flashc_memcpy+0x54e>
      {
        flashc_erase_user_page(false);
8002678a:	30 0c       	mov	r12,0
8002678c:	f0 16 01 22 	mcall	r6[1160]
        error_status |= flashc_error_status;
80026790:	ec f8 00 54 	ld.w	r8,r6[84]
80026794:	70 08       	ld.w	r8,r8[0x0]
80026796:	ee f9 ff e8 	ld.w	r9,r7[-24]
8002679a:	f3 e8 10 08 	or	r8,r9,r8
8002679e:	ef 48 ff e8 	st.w	r7[-24],r8
      }
      flashc_write_user_page();
800267a2:	f0 16 00 ec 	mcall	r6[944]
      error_status |= flashc_error_status;
800267a6:	ec f8 00 54 	ld.w	r8,r6[84]
800267aa:	70 08       	ld.w	r8,r8[0x0]
800267ac:	ee f9 ff e8 	ld.w	r9,r7[-24]
800267b0:	f3 e8 10 08 	or	r8,r9,r8
800267b4:	ef 48 ff e8 	st.w	r7[-24],r8
  dest_end.u16ptr = (U16 *)Align_down((U32)dest_end.u8ptr, sizeof(U16));
  dest_end.u32ptr = (U32 *)Align_down((U32)dest_end.u16ptr, sizeof(U32));
  dest_end.u64ptr = (U64 *)Align_down((U32)dest_end.u32ptr, sizeof(U64));

  // While end of destination is not reached...
  while (dest.u8ptr < dest_end.u8ptr)
800267b8:	ee f9 ff dc 	ld.w	r9,r7[-36]
800267bc:	ee f8 ff d4 	ld.w	r8,r7[-44]
800267c0:	10 39       	cp.w	r9,r8
800267c2:	fe 93 fd e7 	brlo	80026390 <flashc_memcpy+0x13c>
      error_status |= flashc_error_status;
    }
  }

  // Update the FLASHC error status.
  flashc_error_status = error_status;
800267c6:	ec f8 00 54 	ld.w	r8,r6[84]
800267ca:	ee f9 ff e8 	ld.w	r9,r7[-24]
800267ce:	91 09       	st.w	r8[0x0],r9

  // Return the initial destination pointer as the standard memcpy function does.
  return dst;
800267d0:	ee f8 ff a4 	ld.w	r8,r7[-92]
}
800267d4:	10 9c       	mov	r12,r8
800267d6:	2e 6d       	sub	sp,-104
800267d8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800267dc:	80 02       	ld.sh	r2,r0[0x0]
800267de:	60 e4       	ld.w	r4,r0[0x38]

800267e0 <flashc_set_flash_waitstate_and_readmode>:


#if UC3C
void flashc_set_flash_waitstate_and_readmode(unsigned long cpu_f_hz)
{
800267e0:	eb cd 40 c0 	pushm	r6-r7,lr
800267e4:	1a 97       	mov	r7,sp
800267e6:	20 1d       	sub	sp,4
800267e8:	49 76       	lddpc	r6,80026844 <flashc_set_flash_waitstate_and_readmode+0x64>
800267ea:	1e 26       	rsub	r6,pc
800267ec:	ef 4c ff fc 	st.w	r7[-4],r12
  #define AVR32_FLASHC_HSEN_FWS_0_MAX_FREQ      33000000
  #define AVR32_FLASHC_HSEN_FWS_1_MAX_FREQ      72000000
  // These defines are missing from or wrong in the toolchain header files uc3cxxx.h
  // Put a Bugzilla 

  if(cpu_f_hz > AVR32_FLASHC_HSEN_FWS_0_MAX_FREQ)    // > 33MHz
800267f0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800267f4:	e0 69 8a 40 	mov	r9,35392
800267f8:	ea 19 01 f7 	orh	r9,0x1f7
800267fc:	12 38       	cp.w	r8,r9
800267fe:	e0 88 00 18 	brls	8002682e <flashc_set_flash_waitstate_and_readmode+0x4e>
  {
    // Set a wait-state
    flashc_set_wait_state(1);
80026802:	30 1c       	mov	r12,1
80026804:	f0 16 00 91 	mcall	r6[580]
    if(cpu_f_hz <= AVR32_FLASHC_FWS_1_MAX_FREQ) // <= 66MHz and >33Mhz
80026808:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002680c:	e0 69 14 80 	mov	r9,5248
80026810:	ea 19 03 ef 	orh	r9,0x3ef
80026814:	12 38       	cp.w	r8,r9
80026816:	e0 8b 00 07 	brhi	80026824 <flashc_set_flash_waitstate_and_readmode+0x44>
    {
      // Disable the high-speed read mode.      
      flashc_issue_command(AVR32_FLASHC_FCMD_CMD_HSDIS, -1);
8002681a:	3f fb       	mov	r11,-1
8002681c:	31 1c       	mov	r12,17
8002681e:	f0 16 00 28 	mcall	r6[160]
80026822:	c0 d8       	rjmp	8002683c <flashc_set_flash_waitstate_and_readmode+0x5c>
    }
    else // > 66Mhz
    {
      // Enable the high-speed read mode.
      flashc_issue_command(AVR32_FLASHC_FCMD_CMD_HSEN, -1);                     
80026824:	3f fb       	mov	r11,-1
80026826:	31 0c       	mov	r12,16
80026828:	f0 16 00 28 	mcall	r6[160]
8002682c:	c0 88       	rjmp	8002683c <flashc_set_flash_waitstate_and_readmode+0x5c>
    }
  }
  else  // <= 33 MHz    
  {
    // Disable wait-state
    flashc_set_wait_state(0);
8002682e:	30 0c       	mov	r12,0
80026830:	f0 16 00 91 	mcall	r6[580]

    // Disable the high-speed read mode.
    flashc_issue_command(AVR32_FLASHC_FCMD_CMD_HSDIS, -1);
80026834:	3f fb       	mov	r11,-1
80026836:	31 1c       	mov	r12,17
80026838:	f0 16 00 28 	mcall	r6[160]
    
  }
}
8002683c:	2f fd       	sub	sp,-4
8002683e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80026842:	00 00       	add	r0,r0
80026844:	80 02       	ld.sh	r2,r0[0x0]
80026846:	66 6e       	ld.w	lr,r3[0x18]

80026848 <gpio_enable_module>:
 */
//! @{


int gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
80026848:	eb cd 40 c0 	pushm	r6-r7,lr
8002684c:	1a 97       	mov	r7,sp
8002684e:	20 4d       	sub	sp,16
80026850:	49 b6       	lddpc	r6,800268bc <gpio_enable_module+0x74>
80026852:	1e 26       	rsub	r6,pc
80026854:	ef 4c ff f4 	st.w	r7[-12],r12
80026858:	ef 4b ff f0 	st.w	r7[-16],r11
  int status = GPIO_SUCCESS;
8002685c:	30 08       	mov	r8,0
8002685e:	ef 48 ff f8 	st.w	r7[-8],r8
  uint32_t i;

  for (i = 0; i < size; i++)
80026862:	30 08       	mov	r8,0
80026864:	ef 48 ff fc 	st.w	r7[-4],r8
80026868:	c1 d8       	rjmp	800268a2 <gpio_enable_module+0x5a>
  {
    status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
8002686a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002686e:	11 98       	ld.ub	r8,r8[0x1]
80026870:	10 99       	mov	r9,r8
80026872:	ee f8 ff f4 	ld.w	r8,r7[-12]
80026876:	11 88       	ld.ub	r8,r8[0x0]
80026878:	12 9b       	mov	r11,r9
8002687a:	10 9c       	mov	r12,r8
8002687c:	f0 16 00 3c 	mcall	r6[240]
80026880:	18 98       	mov	r8,r12
80026882:	ee f9 ff f8 	ld.w	r9,r7[-8]
80026886:	f3 e8 10 08 	or	r8,r9,r8
8002688a:	ef 48 ff f8 	st.w	r7[-8],r8
    gpiomap++;
8002688e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80026892:	2f e8       	sub	r8,-2
80026894:	ef 48 ff f4 	st.w	r7[-12],r8
int gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
  int status = GPIO_SUCCESS;
  uint32_t i;

  for (i = 0; i < size; i++)
80026898:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002689c:	2f f8       	sub	r8,-1
8002689e:	ef 48 ff fc 	st.w	r7[-4],r8
800268a2:	ee f9 ff fc 	ld.w	r9,r7[-4]
800268a6:	ee f8 ff f0 	ld.w	r8,r7[-16]
800268aa:	10 39       	cp.w	r9,r8
800268ac:	cd f3       	brcs	8002686a <gpio_enable_module+0x22>
  {
    status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
    gpiomap++;
  }

  return status;
800268ae:	ee f8 ff f8 	ld.w	r8,r7[-8]
}
800268b2:	10 9c       	mov	r12,r8
800268b4:	2f cd       	sub	sp,-16
800268b6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800268ba:	00 00       	add	r0,r0
800268bc:	80 02       	ld.sh	r2,r0[0x0]
800268be:	66 d6       	ld.w	r6,r3[0x34]

800268c0 <gpio_enable_module_pin>:


int gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
800268c0:	eb cd 40 c0 	pushm	r6-r7,lr
800268c4:	1a 97       	mov	r7,sp
800268c6:	20 3d       	sub	sp,12
800268c8:	fe f6 02 94 	ld.w	r6,pc[660]
800268cc:	1e 26       	rsub	r6,pc
800268ce:	ef 4c ff f8 	st.w	r7[-8],r12
800268d2:	ef 4b ff f4 	st.w	r7[-12],r11
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
800268d6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800268da:	a5 98       	lsr	r8,0x5
800268dc:	a9 78       	lsl	r8,0x9
800268de:	e0 28 e0 00 	sub	r8,57344
800268e2:	ef 48 ff fc 	st.w	r7[-4],r8

  // Enable the correct function.
  switch (function)
800268e6:	ee f8 ff f4 	ld.w	r8,r7[-12]
800268ea:	58 78       	cp.w	r8,7
800268ec:	e0 8b 01 26 	brhi	80026b38 <gpio_enable_module_pin+0x278>
800268f0:	fe c9 ff f8 	sub	r9,pc,-8
800268f4:	f2 08 00 2f 	add	pc,r9,r8<<0x2
800268f8:	e0 8f 00 10 	bral	80026918 <gpio_enable_module_pin+0x58>
800268fc:	e0 8f 00 30 	bral	8002695c <gpio_enable_module_pin+0x9c>
80026900:	e0 8f 00 50 	bral	800269a0 <gpio_enable_module_pin+0xe0>
80026904:	e0 8f 00 70 	bral	800269e4 <gpio_enable_module_pin+0x124>
80026908:	e0 8f 00 90 	bral	80026a28 <gpio_enable_module_pin+0x168>
8002690c:	e0 8f 00 b0 	bral	80026a6c <gpio_enable_module_pin+0x1ac>
80026910:	e0 8f 00 d0 	bral	80026ab0 <gpio_enable_module_pin+0x1f0>
80026914:	e0 8f 00 f0 	bral	80026af4 <gpio_enable_module_pin+0x234>
  {
  case 0: // A function.
    gpio_port->pmr0c = 1 << (pin & 0x1F);
80026918:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002691c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026920:	30 19       	mov	r9,1
80026922:	f2 08 09 48 	lsl	r8,r9,r8
80026926:	10 99       	mov	r9,r8
80026928:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002692c:	91 69       	st.w	r8[0x18],r9
    gpio_port->pmr1c = 1 << (pin & 0x1F);
8002692e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026932:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026936:	30 19       	mov	r9,1
80026938:	f2 08 09 48 	lsl	r8,r9,r8
8002693c:	10 99       	mov	r9,r8
8002693e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026942:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
    gpio_port->pmr2c = 1 << (pin & 0x1F);
80026944:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026948:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8002694c:	30 19       	mov	r9,1
8002694e:	f2 08 09 48 	lsl	r8,r9,r8
80026952:	10 99       	mov	r9,r8
80026954:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026958:	91 e9       	st.w	r8[0x38],r9
#endif
    break;
8002695a:	cf 18       	rjmp	80026b3c <gpio_enable_module_pin+0x27c>

  case 1: // B function.
    gpio_port->pmr0s = 1 << (pin & 0x1F);
8002695c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026960:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026964:	30 19       	mov	r9,1
80026966:	f2 08 09 48 	lsl	r8,r9,r8
8002696a:	10 99       	mov	r9,r8
8002696c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026970:	91 59       	st.w	r8[0x14],r9
    gpio_port->pmr1c = 1 << (pin & 0x1F);
80026972:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026976:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8002697a:	30 19       	mov	r9,1
8002697c:	f2 08 09 48 	lsl	r8,r9,r8
80026980:	10 99       	mov	r9,r8
80026982:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026986:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
    gpio_port->pmr2c = 1 << (pin & 0x1F);
80026988:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002698c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026990:	30 19       	mov	r9,1
80026992:	f2 08 09 48 	lsl	r8,r9,r8
80026996:	10 99       	mov	r9,r8
80026998:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002699c:	91 e9       	st.w	r8[0x38],r9
#endif
    break;
8002699e:	cc f8       	rjmp	80026b3c <gpio_enable_module_pin+0x27c>

  case 2: // C function.
    gpio_port->pmr0c = 1 << (pin & 0x1F);
800269a0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800269a4:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800269a8:	30 19       	mov	r9,1
800269aa:	f2 08 09 48 	lsl	r8,r9,r8
800269ae:	10 99       	mov	r9,r8
800269b0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800269b4:	91 69       	st.w	r8[0x18],r9
    gpio_port->pmr1s = 1 << (pin & 0x1F);
800269b6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800269ba:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800269be:	30 19       	mov	r9,1
800269c0:	f2 08 09 48 	lsl	r8,r9,r8
800269c4:	10 99       	mov	r9,r8
800269c6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800269ca:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
    gpio_port->pmr2c = 1 << (pin & 0x1F);
800269cc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800269d0:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800269d4:	30 19       	mov	r9,1
800269d6:	f2 08 09 48 	lsl	r8,r9,r8
800269da:	10 99       	mov	r9,r8
800269dc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800269e0:	91 e9       	st.w	r8[0x38],r9
#endif
    break;
800269e2:	ca d8       	rjmp	80026b3c <gpio_enable_module_pin+0x27c>

  case 3: // D function.
    gpio_port->pmr0s = 1 << (pin & 0x1F);
800269e4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800269e8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800269ec:	30 19       	mov	r9,1
800269ee:	f2 08 09 48 	lsl	r8,r9,r8
800269f2:	10 99       	mov	r9,r8
800269f4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800269f8:	91 59       	st.w	r8[0x14],r9
    gpio_port->pmr1s = 1 << (pin & 0x1F);
800269fa:	ee f8 ff f8 	ld.w	r8,r7[-8]
800269fe:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026a02:	30 19       	mov	r9,1
80026a04:	f2 08 09 48 	lsl	r8,r9,r8
80026a08:	10 99       	mov	r9,r8
80026a0a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026a0e:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
    gpio_port->pmr2c = 1 << (pin & 0x1F);
80026a10:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026a14:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026a18:	30 19       	mov	r9,1
80026a1a:	f2 08 09 48 	lsl	r8,r9,r8
80026a1e:	10 99       	mov	r9,r8
80026a20:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026a24:	91 e9       	st.w	r8[0x38],r9
#endif
    break;
80026a26:	c8 b8       	rjmp	80026b3c <gpio_enable_module_pin+0x27c>

#if (AVR32_GPIO_H_VERSION >= 210)
  case 4: // E function.
    gpio_port->pmr0c = 1 << (pin & 0x1F);
80026a28:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026a2c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026a30:	30 19       	mov	r9,1
80026a32:	f2 08 09 48 	lsl	r8,r9,r8
80026a36:	10 99       	mov	r9,r8
80026a38:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026a3c:	91 69       	st.w	r8[0x18],r9
    gpio_port->pmr1c = 1 << (pin & 0x1F);
80026a3e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026a42:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026a46:	30 19       	mov	r9,1
80026a48:	f2 08 09 48 	lsl	r8,r9,r8
80026a4c:	10 99       	mov	r9,r8
80026a4e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026a52:	91 a9       	st.w	r8[0x28],r9
    gpio_port->pmr2s = 1 << (pin & 0x1F);
80026a54:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026a58:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026a5c:	30 19       	mov	r9,1
80026a5e:	f2 08 09 48 	lsl	r8,r9,r8
80026a62:	10 99       	mov	r9,r8
80026a64:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026a68:	91 d9       	st.w	r8[0x34],r9
    break;
80026a6a:	c6 98       	rjmp	80026b3c <gpio_enable_module_pin+0x27c>
    
  case 5: // F function.
    gpio_port->pmr0s = 1 << (pin & 0x1F);
80026a6c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026a70:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026a74:	30 19       	mov	r9,1
80026a76:	f2 08 09 48 	lsl	r8,r9,r8
80026a7a:	10 99       	mov	r9,r8
80026a7c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026a80:	91 59       	st.w	r8[0x14],r9
    gpio_port->pmr1c = 1 << (pin & 0x1F);
80026a82:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026a86:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026a8a:	30 19       	mov	r9,1
80026a8c:	f2 08 09 48 	lsl	r8,r9,r8
80026a90:	10 99       	mov	r9,r8
80026a92:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026a96:	91 a9       	st.w	r8[0x28],r9
    gpio_port->pmr2s = 1 << (pin & 0x1F);
80026a98:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026a9c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026aa0:	30 19       	mov	r9,1
80026aa2:	f2 08 09 48 	lsl	r8,r9,r8
80026aa6:	10 99       	mov	r9,r8
80026aa8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026aac:	91 d9       	st.w	r8[0x34],r9
    break;
80026aae:	c4 78       	rjmp	80026b3c <gpio_enable_module_pin+0x27c>
    
  case 6: // G function.
    gpio_port->pmr0c = 1 << (pin & 0x1F);
80026ab0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026ab4:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026ab8:	30 19       	mov	r9,1
80026aba:	f2 08 09 48 	lsl	r8,r9,r8
80026abe:	10 99       	mov	r9,r8
80026ac0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026ac4:	91 69       	st.w	r8[0x18],r9
    gpio_port->pmr1s = 1 << (pin & 0x1F);
80026ac6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026aca:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026ace:	30 19       	mov	r9,1
80026ad0:	f2 08 09 48 	lsl	r8,r9,r8
80026ad4:	10 99       	mov	r9,r8
80026ad6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026ada:	91 99       	st.w	r8[0x24],r9
    gpio_port->pmr2s = 1 << (pin & 0x1F);
80026adc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026ae0:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026ae4:	30 19       	mov	r9,1
80026ae6:	f2 08 09 48 	lsl	r8,r9,r8
80026aea:	10 99       	mov	r9,r8
80026aec:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026af0:	91 d9       	st.w	r8[0x34],r9
    break;
80026af2:	c2 58       	rjmp	80026b3c <gpio_enable_module_pin+0x27c>
    
  case 7: // H function.
    gpio_port->pmr0s = 1 << (pin & 0x1F);
80026af4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026af8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026afc:	30 19       	mov	r9,1
80026afe:	f2 08 09 48 	lsl	r8,r9,r8
80026b02:	10 99       	mov	r9,r8
80026b04:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026b08:	91 59       	st.w	r8[0x14],r9
    gpio_port->pmr1s = 1 << (pin & 0x1F);
80026b0a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026b0e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026b12:	30 19       	mov	r9,1
80026b14:	f2 08 09 48 	lsl	r8,r9,r8
80026b18:	10 99       	mov	r9,r8
80026b1a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026b1e:	91 99       	st.w	r8[0x24],r9
    gpio_port->pmr2s = 1 << (pin & 0x1F);
80026b20:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026b24:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026b28:	30 19       	mov	r9,1
80026b2a:	f2 08 09 48 	lsl	r8,r9,r8
80026b2e:	10 99       	mov	r9,r8
80026b30:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026b34:	91 d9       	st.w	r8[0x34],r9
    break;
80026b36:	c0 38       	rjmp	80026b3c <gpio_enable_module_pin+0x27c>
#endif

  default:
    return GPIO_INVALID_ARGUMENT;
80026b38:	30 18       	mov	r8,1
80026b3a:	c0 d8       	rjmp	80026b54 <gpio_enable_module_pin+0x294>
  }

  // Disable GPIO control.
  gpio_port->gperc = 1 << (pin & 0x1F);
80026b3c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026b40:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026b44:	30 19       	mov	r9,1
80026b46:	f2 08 09 48 	lsl	r8,r9,r8
80026b4a:	10 99       	mov	r9,r8
80026b4c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026b50:	91 29       	st.w	r8[0x8],r9

  return GPIO_SUCCESS;
80026b52:	30 08       	mov	r8,0
}
80026b54:	10 9c       	mov	r12,r8
80026b56:	2f dd       	sub	sp,-12
80026b58:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80026b5c:	80 02       	ld.sh	r2,r0[0x0]
80026b5e:	67 50       	ld.w	r0,r3[0x54]

80026b60 <gpio_enable_gpio>:


void gpio_enable_gpio(const gpio_map_t gpiomap, uint32_t size)
{
80026b60:	eb cd 40 c0 	pushm	r6-r7,lr
80026b64:	1a 97       	mov	r7,sp
80026b66:	20 3d       	sub	sp,12
80026b68:	49 26       	lddpc	r6,80026bb0 <gpio_enable_gpio+0x50>
80026b6a:	1e 26       	rsub	r6,pc
80026b6c:	ef 4c ff f8 	st.w	r7[-8],r12
80026b70:	ef 4b ff f4 	st.w	r7[-12],r11
  uint32_t i;

  for (i = 0; i < size; i++)
80026b74:	30 08       	mov	r8,0
80026b76:	ef 48 ff fc 	st.w	r7[-4],r8
80026b7a:	c1 18       	rjmp	80026b9c <gpio_enable_gpio+0x3c>
  {
    gpio_enable_gpio_pin(gpiomap->pin);
80026b7c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026b80:	11 88       	ld.ub	r8,r8[0x0]
80026b82:	10 9c       	mov	r12,r8
80026b84:	f0 16 01 4a 	mcall	r6[1320]
    gpiomap++;
80026b88:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026b8c:	2f e8       	sub	r8,-2
80026b8e:	ef 48 ff f8 	st.w	r7[-8],r8

void gpio_enable_gpio(const gpio_map_t gpiomap, uint32_t size)
{
  uint32_t i;

  for (i = 0; i < size; i++)
80026b92:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026b96:	2f f8       	sub	r8,-1
80026b98:	ef 48 ff fc 	st.w	r7[-4],r8
80026b9c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80026ba0:	ee f8 ff f4 	ld.w	r8,r7[-12]
80026ba4:	10 39       	cp.w	r9,r8
80026ba6:	ce b3       	brcs	80026b7c <gpio_enable_gpio+0x1c>
  {
    gpio_enable_gpio_pin(gpiomap->pin);
    gpiomap++;
  }
}
80026ba8:	2f dd       	sub	sp,-12
80026baa:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80026bae:	00 00       	add	r0,r0
80026bb0:	80 02       	ld.sh	r2,r0[0x0]
80026bb2:	69 ee       	ld.w	lr,r4[0x78]

80026bb4 <gpio_enable_gpio_pin>:


void gpio_enable_gpio_pin(uint32_t pin)
{
80026bb4:	eb cd 40 80 	pushm	r7,lr
80026bb8:	1a 97       	mov	r7,sp
80026bba:	20 2d       	sub	sp,8
80026bbc:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80026bc0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026bc4:	a5 98       	lsr	r8,0x5
80026bc6:	a9 78       	lsl	r8,0x9
80026bc8:	e0 28 e0 00 	sub	r8,57344
80026bcc:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->oderc = 1 << (pin & 0x1F);
80026bd0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026bd4:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026bd8:	30 19       	mov	r9,1
80026bda:	f2 08 09 48 	lsl	r8,r9,r8
80026bde:	10 99       	mov	r9,r8
80026be0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026be4:	f1 49 00 48 	st.w	r8[72],r9
  gpio_port->gpers = 1 << (pin & 0x1F);
80026be8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026bec:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026bf0:	30 19       	mov	r9,1
80026bf2:	f2 08 09 48 	lsl	r8,r9,r8
80026bf6:	10 99       	mov	r9,r8
80026bf8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026bfc:	91 19       	st.w	r8[0x4],r9
}
80026bfe:	2f ed       	sub	sp,-8
80026c00:	e3 cd 80 80 	ldm	sp++,r7,pc

80026c04 <gpio_enable_pin_pull_up>:

#endif


void gpio_enable_pin_pull_up(uint32_t pin)
{
80026c04:	eb cd 40 80 	pushm	r7,lr
80026c08:	1a 97       	mov	r7,sp
80026c0a:	20 2d       	sub	sp,8
80026c0c:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80026c10:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026c14:	a5 98       	lsr	r8,0x5
80026c16:	a9 78       	lsl	r8,0x9
80026c18:	e0 28 e0 00 	sub	r8,57344
80026c1c:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->puers = 1 << (pin & 0x1F);
80026c20:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026c24:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026c28:	30 19       	mov	r9,1
80026c2a:	f2 08 09 48 	lsl	r8,r9,r8
80026c2e:	10 99       	mov	r9,r8
80026c30:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026c34:	f1 49 00 74 	st.w	r8[116],r9
#if defined(AVR32_GPIO_200_H_INCLUDED) || defined(AVR32_GPIO_210_H_INCLUDED) || defined(AVR32_GPIO_212_H_INCLUDED)
  gpio_port->pderc = 1 << (pin & 0x1F);
80026c38:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026c3c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026c40:	30 19       	mov	r9,1
80026c42:	f2 08 09 48 	lsl	r8,r9,r8
80026c46:	10 99       	mov	r9,r8
80026c48:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026c4c:	f1 49 00 88 	st.w	r8[136],r9
#endif
}
80026c50:	2f ed       	sub	sp,-8
80026c52:	e3 cd 80 80 	ldm	sp++,r7,pc

80026c56 <gpio_disable_pin_pull_up>:


void gpio_disable_pin_pull_up(uint32_t pin)
{
80026c56:	eb cd 40 80 	pushm	r7,lr
80026c5a:	1a 97       	mov	r7,sp
80026c5c:	20 2d       	sub	sp,8
80026c5e:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80026c62:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026c66:	a5 98       	lsr	r8,0x5
80026c68:	a9 78       	lsl	r8,0x9
80026c6a:	e0 28 e0 00 	sub	r8,57344
80026c6e:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->puerc = 1 << (pin & 0x1F);
80026c72:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026c76:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026c7a:	30 19       	mov	r9,1
80026c7c:	f2 08 09 48 	lsl	r8,r9,r8
80026c80:	10 99       	mov	r9,r8
80026c82:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026c86:	f1 49 00 78 	st.w	r8[120],r9
}
80026c8a:	2f ed       	sub	sp,-8
80026c8c:	e3 cd 80 80 	ldm	sp++,r7,pc

80026c90 <gpio_enable_pin_pull_down>:
/*! \brief Enables the pull-down resistor of a pin.
 *
 * \param pin The pin number.
 */
void gpio_enable_pin_pull_down(uint32_t pin)
{
80026c90:	eb cd 40 80 	pushm	r7,lr
80026c94:	1a 97       	mov	r7,sp
80026c96:	20 2d       	sub	sp,8
80026c98:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80026c9c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026ca0:	a5 98       	lsr	r8,0x5
80026ca2:	a9 78       	lsl	r8,0x9
80026ca4:	e0 28 e0 00 	sub	r8,57344
80026ca8:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->puerc = 1 << (pin & 0x1F);
80026cac:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026cb0:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026cb4:	30 19       	mov	r9,1
80026cb6:	f2 08 09 48 	lsl	r8,r9,r8
80026cba:	10 99       	mov	r9,r8
80026cbc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026cc0:	f1 49 00 78 	st.w	r8[120],r9
  gpio_port->pders = 1 << (pin & 0x1F);
80026cc4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026cc8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026ccc:	30 19       	mov	r9,1
80026cce:	f2 08 09 48 	lsl	r8,r9,r8
80026cd2:	10 99       	mov	r9,r8
80026cd4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026cd8:	f1 49 00 84 	st.w	r8[132],r9
}
80026cdc:	2f ed       	sub	sp,-8
80026cde:	e3 cd 80 80 	ldm	sp++,r7,pc

80026ce2 <gpio_disable_pin_pull_down>:
/*! \brief Disables the pull-down resistor of a pin.
 *
 * \param pin The pin number.
 */
void gpio_disable_pin_pull_down(uint32_t pin)
{
80026ce2:	eb cd 40 80 	pushm	r7,lr
80026ce6:	1a 97       	mov	r7,sp
80026ce8:	20 2d       	sub	sp,8
80026cea:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80026cee:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026cf2:	a5 98       	lsr	r8,0x5
80026cf4:	a9 78       	lsl	r8,0x9
80026cf6:	e0 28 e0 00 	sub	r8,57344
80026cfa:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->pderc = 1 << (pin & 0x1F);
80026cfe:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026d02:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026d06:	30 19       	mov	r9,1
80026d08:	f2 08 09 48 	lsl	r8,r9,r8
80026d0c:	10 99       	mov	r9,r8
80026d0e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026d12:	f1 49 00 88 	st.w	r8[136],r9
}
80026d16:	2f ed       	sub	sp,-8
80026d18:	e3 cd 80 80 	ldm	sp++,r7,pc

80026d1c <gpio_enable_pin_buskeeper>:
/*! \brief Enables the buskeeper functionality on a pin.
 *
 * \param pin The pin number.
 */
void gpio_enable_pin_buskeeper(uint32_t pin)
{
80026d1c:	eb cd 40 80 	pushm	r7,lr
80026d20:	1a 97       	mov	r7,sp
80026d22:	20 2d       	sub	sp,8
80026d24:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80026d28:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026d2c:	a5 98       	lsr	r8,0x5
80026d2e:	a9 78       	lsl	r8,0x9
80026d30:	e0 28 e0 00 	sub	r8,57344
80026d34:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->puers = 1 << (pin & 0x1F);
80026d38:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026d3c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026d40:	30 19       	mov	r9,1
80026d42:	f2 08 09 48 	lsl	r8,r9,r8
80026d46:	10 99       	mov	r9,r8
80026d48:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026d4c:	f1 49 00 74 	st.w	r8[116],r9
  gpio_port->pders = 1 << (pin & 0x1F);
80026d50:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026d54:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026d58:	30 19       	mov	r9,1
80026d5a:	f2 08 09 48 	lsl	r8,r9,r8
80026d5e:	10 99       	mov	r9,r8
80026d60:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026d64:	f1 49 00 84 	st.w	r8[132],r9
}
80026d68:	2f ed       	sub	sp,-8
80026d6a:	e3 cd 80 80 	ldm	sp++,r7,pc

80026d6e <gpio_disable_pin_buskeeper>:
/*! \brief Disables the buskeeper functionality on a pin.
 *
 * \param pin The pin number.
 */
void gpio_disable_pin_buskeeper(uint32_t pin)
{
80026d6e:	eb cd 40 80 	pushm	r7,lr
80026d72:	1a 97       	mov	r7,sp
80026d74:	20 2d       	sub	sp,8
80026d76:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80026d7a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026d7e:	a5 98       	lsr	r8,0x5
80026d80:	a9 78       	lsl	r8,0x9
80026d82:	e0 28 e0 00 	sub	r8,57344
80026d86:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->puerc = 1 << (pin & 0x1F);
80026d8a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026d8e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026d92:	30 19       	mov	r9,1
80026d94:	f2 08 09 48 	lsl	r8,r9,r8
80026d98:	10 99       	mov	r9,r8
80026d9a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026d9e:	f1 49 00 78 	st.w	r8[120],r9
  gpio_port->pderc = 1 << (pin & 0x1F);
80026da2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026da6:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026daa:	30 19       	mov	r9,1
80026dac:	f2 08 09 48 	lsl	r8,r9,r8
80026db0:	10 99       	mov	r9,r8
80026db2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026db6:	f1 49 00 88 	st.w	r8[136],r9
}
80026dba:	2f ed       	sub	sp,-8
80026dbc:	e3 cd 80 80 	ldm	sp++,r7,pc

80026dc0 <gpio_configure_pin>:

#endif

void gpio_configure_pin(uint32_t pin, uint32_t flags)
{  
80026dc0:	eb cd 40 80 	pushm	r7,lr
80026dc4:	1a 97       	mov	r7,sp
80026dc6:	20 3d       	sub	sp,12
80026dc8:	ef 4c ff f8 	st.w	r7[-8],r12
80026dcc:	ef 4b ff f4 	st.w	r7[-12],r11
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];  
80026dd0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026dd4:	a5 98       	lsr	r8,0x5
80026dd6:	a9 78       	lsl	r8,0x9
80026dd8:	e0 28 e0 00 	sub	r8,57344
80026ddc:	ef 48 ff fc 	st.w	r7[-4],r8

  /* Both pull-up and pull-down set means buskeeper */
#if defined(AVR32_GPIO_200_H_INCLUDED) || defined(AVR32_GPIO_210_H_INCLUDED) || defined(AVR32_GPIO_212_H_INCLUDED)
    if (flags & GPIO_PULL_DOWN)
80026de0:	ee f8 ff f4 	ld.w	r8,r7[-12]
80026de4:	e2 18 00 08 	andl	r8,0x8,COH
80026de8:	c0 e0       	breq	80026e04 <gpio_configure_pin+0x44>
            gpio_port->pders = 1 << (pin & 0x1F);
80026dea:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026dee:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026df2:	30 19       	mov	r9,1
80026df4:	f2 08 09 48 	lsl	r8,r9,r8
80026df8:	10 99       	mov	r9,r8
80026dfa:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026dfe:	f1 49 00 84 	st.w	r8[132],r9
80026e02:	c0 d8       	rjmp	80026e1c <gpio_configure_pin+0x5c>
    else
            gpio_port->pderc = 1 << (pin & 0x1F);
80026e04:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026e08:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026e0c:	30 19       	mov	r9,1
80026e0e:	f2 08 09 48 	lsl	r8,r9,r8
80026e12:	10 99       	mov	r9,r8
80026e14:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026e18:	f1 49 00 88 	st.w	r8[136],r9
#endif    
    if (flags & GPIO_PULL_UP)
80026e1c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80026e20:	e2 18 00 04 	andl	r8,0x4,COH
80026e24:	c0 e0       	breq	80026e40 <gpio_configure_pin+0x80>
            gpio_port->puers = 1 << (pin & 0x1F);
80026e26:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026e2a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026e2e:	30 19       	mov	r9,1
80026e30:	f2 08 09 48 	lsl	r8,r9,r8
80026e34:	10 99       	mov	r9,r8
80026e36:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026e3a:	f1 49 00 74 	st.w	r8[116],r9
80026e3e:	c0 d8       	rjmp	80026e58 <gpio_configure_pin+0x98>
    else
            gpio_port->puerc = 1 << (pin & 0x1F);
80026e40:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026e44:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026e48:	30 19       	mov	r9,1
80026e4a:	f2 08 09 48 	lsl	r8,r9,r8
80026e4e:	10 99       	mov	r9,r8
80026e50:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026e54:	f1 49 00 78 	st.w	r8[120],r9

    /* Enable open-drain mode if requested */
#if defined(AVR32_GPIO_200_H_INCLUDED) || defined(AVR32_GPIO_210_H_INCLUDED) || defined(AVR32_GPIO_212_H_INCLUDED)
            if (flags & GPIO_OPEN_DRAIN)
80026e58:	ee f8 ff f4 	ld.w	r8,r7[-12]
80026e5c:	e2 18 00 40 	andl	r8,0x40,COH
80026e60:	c0 e0       	breq	80026e7c <gpio_configure_pin+0xbc>
                    gpio_port->odmers = 1 << (pin & 0x1F);
80026e62:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026e66:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026e6a:	30 19       	mov	r9,1
80026e6c:	f2 08 09 48 	lsl	r8,r9,r8
80026e70:	10 99       	mov	r9,r8
80026e72:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026e76:	f1 49 00 e4 	st.w	r8[228],r9
80026e7a:	c0 d8       	rjmp	80026e94 <gpio_configure_pin+0xd4>
            else
                    gpio_port->odmerc = 1 << (pin & 0x1F);            
80026e7c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026e80:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026e84:	30 19       	mov	r9,1
80026e86:	f2 08 09 48 	lsl	r8,r9,r8
80026e8a:	10 99       	mov	r9,r8
80026e8c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026e90:	f1 49 00 e8 	st.w	r8[232],r9

            if (flags & GPIO_OPEN_DRAIN)
80026e94:	ee f8 ff f4 	ld.w	r8,r7[-12]
80026e98:	e2 18 00 40 	andl	r8,0x40,COH
80026e9c:	c0 e0       	breq	80026eb8 <gpio_configure_pin+0xf8>
                    gpio_port->pders = 1 << (pin & 0x1F);
80026e9e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026ea2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026ea6:	30 19       	mov	r9,1
80026ea8:	f2 08 09 48 	lsl	r8,r9,r8
80026eac:	10 99       	mov	r9,r8
80026eae:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026eb2:	f1 49 00 84 	st.w	r8[132],r9
80026eb6:	c0 d8       	rjmp	80026ed0 <gpio_configure_pin+0x110>
            else
                    gpio_port->pderc = 1 << (pin & 0x1F);
80026eb8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026ebc:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026ec0:	30 19       	mov	r9,1
80026ec2:	f2 08 09 48 	lsl	r8,r9,r8
80026ec6:	10 99       	mov	r9,r8
80026ec8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026ecc:	f1 49 00 88 	st.w	r8[136],r9
#endif 
            
#if defined(AVR32_GPIO_200_H_INCLUDED) || defined(AVR32_GPIO_210_H_INCLUDED) || defined(AVR32_GPIO_212_H_INCLUDED) 
            /* Select drive strength */
            if (flags & GPIO_DRIVE_LOW)
80026ed0:	ee f8 ff f4 	ld.w	r8,r7[-12]
80026ed4:	e2 18 00 10 	andl	r8,0x10,COH
80026ed8:	c0 e0       	breq	80026ef4 <gpio_configure_pin+0x134>
                    gpio_port->odcr0s = 1 << (pin & 0x1F);
80026eda:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026ede:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026ee2:	30 19       	mov	r9,1
80026ee4:	f2 08 09 48 	lsl	r8,r9,r8
80026ee8:	10 99       	mov	r9,r8
80026eea:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026eee:	f1 49 01 04 	st.w	r8[260],r9
80026ef2:	c0 d8       	rjmp	80026f0c <gpio_configure_pin+0x14c>
            else
                    gpio_port->odcr0c = 1 << (pin & 0x1F);
80026ef4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026ef8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026efc:	30 19       	mov	r9,1
80026efe:	f2 08 09 48 	lsl	r8,r9,r8
80026f02:	10 99       	mov	r9,r8
80026f04:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026f08:	f1 49 01 08 	st.w	r8[264],r9
            if (flags & GPIO_DRIVE_HIGH)
80026f0c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80026f10:	e2 18 00 20 	andl	r8,0x20,COH
80026f14:	c0 e0       	breq	80026f30 <gpio_configure_pin+0x170>
                    gpio_port->odcr1s = 1 << (pin & 0x1F);
80026f16:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026f1a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026f1e:	30 19       	mov	r9,1
80026f20:	f2 08 09 48 	lsl	r8,r9,r8
80026f24:	10 99       	mov	r9,r8
80026f26:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026f2a:	f1 49 01 14 	st.w	r8[276],r9
80026f2e:	c0 d8       	rjmp	80026f48 <gpio_configure_pin+0x188>
            else
                    gpio_port->odcr1c = 1 << (pin & 0x1F);
80026f30:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026f34:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026f38:	30 19       	mov	r9,1
80026f3a:	f2 08 09 48 	lsl	r8,r9,r8
80026f3e:	10 99       	mov	r9,r8
80026f40:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026f44:	f1 49 01 18 	st.w	r8[280],r9
#endif

    /* Select interrupt level for group */
    if (flags & GPIO_INTERRUPT) {
80026f48:	ee f8 ff f4 	ld.w	r8,r7[-12]
80026f4c:	e2 18 00 80 	andl	r8,0x80,COH
80026f50:	c5 a0       	breq	80027004 <gpio_configure_pin+0x244>
            if (flags & GPIO_BOTHEDGES)
80026f52:	ee f8 ff f4 	ld.w	r8,r7[-12]
80026f56:	e2 18 01 80 	andl	r8,0x180,COH
80026f5a:	c1 a0       	breq	80026f8e <gpio_configure_pin+0x1ce>
            {
                   gpio_port->imr0c = 1 << (pin & 0x1F);
80026f5c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026f60:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026f64:	30 19       	mov	r9,1
80026f66:	f2 08 09 48 	lsl	r8,r9,r8
80026f6a:	10 99       	mov	r9,r8
80026f6c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026f70:	f1 49 00 a8 	st.w	r8[168],r9
                   gpio_port->imr1c = 1 << (pin & 0x1F);
80026f74:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026f78:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026f7c:	30 19       	mov	r9,1
80026f7e:	f2 08 09 48 	lsl	r8,r9,r8
80026f82:	10 99       	mov	r9,r8
80026f84:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026f88:	f1 49 00 b8 	st.w	r8[184],r9
80026f8c:	c3 c8       	rjmp	80027004 <gpio_configure_pin+0x244>
            }
            else if (flags & GPIO_RISING)
80026f8e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80026f92:	e2 18 02 80 	andl	r8,0x280,COH
80026f96:	c1 a0       	breq	80026fca <gpio_configure_pin+0x20a>
            {
                   gpio_port->imr0s = 1 << (pin & 0x1F);
80026f98:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026f9c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026fa0:	30 19       	mov	r9,1
80026fa2:	f2 08 09 48 	lsl	r8,r9,r8
80026fa6:	10 99       	mov	r9,r8
80026fa8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026fac:	f1 49 00 a4 	st.w	r8[164],r9
                   gpio_port->imr1c = 1 << (pin & 0x1F);
80026fb0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026fb4:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026fb8:	30 19       	mov	r9,1
80026fba:	f2 08 09 48 	lsl	r8,r9,r8
80026fbe:	10 99       	mov	r9,r8
80026fc0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026fc4:	f1 49 00 b8 	st.w	r8[184],r9
80026fc8:	c1 e8       	rjmp	80027004 <gpio_configure_pin+0x244>
            }
            else if (flags & GPIO_FALLING)
80026fca:	ee f8 ff f4 	ld.w	r8,r7[-12]
80026fce:	e2 18 03 80 	andl	r8,0x380,COH
80026fd2:	c1 90       	breq	80027004 <gpio_configure_pin+0x244>
            {
                   gpio_port->imr0c = 1 << (pin & 0x1F);
80026fd4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026fd8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026fdc:	30 19       	mov	r9,1
80026fde:	f2 08 09 48 	lsl	r8,r9,r8
80026fe2:	10 99       	mov	r9,r8
80026fe4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026fe8:	f1 49 00 a8 	st.w	r8[168],r9
                   gpio_port->imr1s = 1 << (pin & 0x1F);
80026fec:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026ff0:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026ff4:	30 19       	mov	r9,1
80026ff6:	f2 08 09 48 	lsl	r8,r9,r8
80026ffa:	10 99       	mov	r9,r8
80026ffc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027000:	f1 49 00 b4 	st.w	r8[180],r9
            }
    }

    /* Select direction and initial pin state */
    if (flags & GPIO_DIR_OUTPUT) {
80027004:	ee f8 ff f4 	ld.w	r8,r7[-12]
80027008:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002700c:	5c 58       	castu.b	r8
8002700e:	c2 c0       	breq	80027066 <gpio_configure_pin+0x2a6>
            if (flags & GPIO_INIT_HIGH)
80027010:	ee f8 ff f4 	ld.w	r8,r7[-12]
80027014:	e2 18 00 02 	andl	r8,0x2,COH
80027018:	c0 e0       	breq	80027034 <gpio_configure_pin+0x274>
                    gpio_port->ovrs = 1 << (pin & 0x1F);
8002701a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002701e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027022:	30 19       	mov	r9,1
80027024:	f2 08 09 48 	lsl	r8,r9,r8
80027028:	10 99       	mov	r9,r8
8002702a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002702e:	f1 49 00 54 	st.w	r8[84],r9
80027032:	c0 d8       	rjmp	8002704c <gpio_configure_pin+0x28c>
            else
                    gpio_port->ovrc = 1 << (pin & 0x1F);
80027034:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027038:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8002703c:	30 19       	mov	r9,1
8002703e:	f2 08 09 48 	lsl	r8,r9,r8
80027042:	10 99       	mov	r9,r8
80027044:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027048:	f1 49 00 58 	st.w	r8[88],r9
            gpio_port->oders = 1 << (pin & 0x1F);
8002704c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027050:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027054:	30 19       	mov	r9,1
80027056:	f2 08 09 48 	lsl	r8,r9,r8
8002705a:	10 99       	mov	r9,r8
8002705c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027060:	f1 49 00 44 	st.w	r8[68],r9
80027064:	c0 d8       	rjmp	8002707e <gpio_configure_pin+0x2be>
    } else {
            gpio_port->oderc = 1 << (pin & 0x1F);
80027066:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002706a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8002706e:	30 19       	mov	r9,1
80027070:	f2 08 09 48 	lsl	r8,r9,r8
80027074:	10 99       	mov	r9,r8
80027076:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002707a:	f1 49 00 48 	st.w	r8[72],r9
    }

    /* Enable GPIO */
    gpio_port->gpers = 1 << (pin & 0x1F);
8002707e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027082:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027086:	30 19       	mov	r9,1
80027088:	f2 08 09 48 	lsl	r8,r9,r8
8002708c:	10 99       	mov	r9,r8
8002708e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027092:	91 19       	st.w	r8[0x4],r9
}
80027094:	2f dd       	sub	sp,-12
80027096:	e3 cd 80 80 	ldm	sp++,r7,pc

8002709a <gpio_configure_group>:

void gpio_configure_group(uint32_t port, uint32_t mask, uint32_t flags)
{  
8002709a:	eb cd 40 80 	pushm	r7,lr
8002709e:	1a 97       	mov	r7,sp
800270a0:	20 4d       	sub	sp,16
800270a2:	ef 4c ff f8 	st.w	r7[-8],r12
800270a6:	ef 4b ff f4 	st.w	r7[-12],r11
800270aa:	ef 4a ff f0 	st.w	r7[-16],r10
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[port];  
800270ae:	ee f8 ff f8 	ld.w	r8,r7[-8]
800270b2:	a9 78       	lsl	r8,0x9
800270b4:	e0 28 e0 00 	sub	r8,57344
800270b8:	ef 48 ff fc 	st.w	r7[-4],r8

  /* Both pull-up and pull-down set means buskeeper */
#if defined(AVR32_GPIO_200_H_INCLUDED) || defined(AVR32_GPIO_210_H_INCLUDED) || defined(AVR32_GPIO_212_H_INCLUDED)  
    if (flags & GPIO_PULL_DOWN)
800270bc:	ee f8 ff f0 	ld.w	r8,r7[-16]
800270c0:	e2 18 00 08 	andl	r8,0x8,COH
800270c4:	c0 80       	breq	800270d4 <gpio_configure_group+0x3a>
            gpio_port->pders = mask;
800270c6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800270ca:	ee f9 ff f4 	ld.w	r9,r7[-12]
800270ce:	f1 49 00 84 	st.w	r8[132],r9
800270d2:	c0 78       	rjmp	800270e0 <gpio_configure_group+0x46>
    else
            gpio_port->pderc = mask;
800270d4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800270d8:	ee f9 ff f4 	ld.w	r9,r7[-12]
800270dc:	f1 49 00 88 	st.w	r8[136],r9
#endif    
    if (flags & GPIO_PULL_UP)
800270e0:	ee f8 ff f0 	ld.w	r8,r7[-16]
800270e4:	e2 18 00 04 	andl	r8,0x4,COH
800270e8:	c0 80       	breq	800270f8 <gpio_configure_group+0x5e>
            gpio_port->puers = mask;
800270ea:	ee f8 ff fc 	ld.w	r8,r7[-4]
800270ee:	ee f9 ff f4 	ld.w	r9,r7[-12]
800270f2:	f1 49 00 74 	st.w	r8[116],r9
800270f6:	c0 78       	rjmp	80027104 <gpio_configure_group+0x6a>
    else
            gpio_port->puerc = mask;
800270f8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800270fc:	ee f9 ff f4 	ld.w	r9,r7[-12]
80027100:	f1 49 00 78 	st.w	r8[120],r9

    /* Enable open-drain mode if requested */
#if defined(AVR32_GPIO_200_H_INCLUDED) || defined(AVR32_GPIO_210_H_INCLUDED) || defined(AVR32_GPIO_212_H_INCLUDED)  
            if (flags & GPIO_OPEN_DRAIN)
80027104:	ee f8 ff f0 	ld.w	r8,r7[-16]
80027108:	e2 18 00 40 	andl	r8,0x40,COH
8002710c:	c0 80       	breq	8002711c <gpio_configure_group+0x82>
                    gpio_port->odmers = mask;
8002710e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027112:	ee f9 ff f4 	ld.w	r9,r7[-12]
80027116:	f1 49 00 e4 	st.w	r8[228],r9
8002711a:	c0 78       	rjmp	80027128 <gpio_configure_group+0x8e>
            else
                    gpio_port->odmerc = mask;            
8002711c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027120:	ee f9 ff f4 	ld.w	r9,r7[-12]
80027124:	f1 49 00 e8 	st.w	r8[232],r9

            if (flags & GPIO_OPEN_DRAIN)
80027128:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002712c:	e2 18 00 40 	andl	r8,0x40,COH
80027130:	c0 80       	breq	80027140 <gpio_configure_group+0xa6>
                    gpio_port->pders = mask;
80027132:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027136:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002713a:	f1 49 00 84 	st.w	r8[132],r9
8002713e:	c0 78       	rjmp	8002714c <gpio_configure_group+0xb2>
            else
                    gpio_port->pderc = mask;
80027140:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027144:	ee f9 ff f4 	ld.w	r9,r7[-12]
80027148:	f1 49 00 88 	st.w	r8[136],r9
#endif 
            
#if defined(AVR32_GPIO_200_H_INCLUDED) || defined(AVR32_GPIO_210_H_INCLUDED) || defined(AVR32_GPIO_212_H_INCLUDED) 
            /* Select drive strength */
            if (flags & GPIO_DRIVE_LOW)
8002714c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80027150:	e2 18 00 10 	andl	r8,0x10,COH
80027154:	c0 80       	breq	80027164 <gpio_configure_group+0xca>
                    gpio_port->odcr0s = mask;
80027156:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002715a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002715e:	f1 49 01 04 	st.w	r8[260],r9
80027162:	c0 78       	rjmp	80027170 <gpio_configure_group+0xd6>
            else
                    gpio_port->odcr0c = mask;
80027164:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027168:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002716c:	f1 49 01 08 	st.w	r8[264],r9
            if (flags & GPIO_DRIVE_HIGH)
80027170:	ee f8 ff f0 	ld.w	r8,r7[-16]
80027174:	e2 18 00 20 	andl	r8,0x20,COH
80027178:	c0 80       	breq	80027188 <gpio_configure_group+0xee>
                    gpio_port->odcr1s = mask;
8002717a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002717e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80027182:	f1 49 01 14 	st.w	r8[276],r9
80027186:	c0 78       	rjmp	80027194 <gpio_configure_group+0xfa>
            else
                    gpio_port->odcr1c = mask;
80027188:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002718c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80027190:	f1 49 01 18 	st.w	r8[280],r9
#endif

    /* Select interrupt level for group */
    if (flags & GPIO_INTERRUPT) {
80027194:	ee f8 ff f0 	ld.w	r8,r7[-16]
80027198:	e2 18 00 80 	andl	r8,0x80,COH
8002719c:	c3 60       	breq	80027208 <gpio_configure_group+0x16e>
            if (flags & GPIO_BOTHEDGES)
8002719e:	ee f8 ff f0 	ld.w	r8,r7[-16]
800271a2:	e2 18 01 80 	andl	r8,0x180,COH
800271a6:	c0 e0       	breq	800271c2 <gpio_configure_group+0x128>
            {
                   gpio_port->imr0c = mask;
800271a8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800271ac:	ee f9 ff f4 	ld.w	r9,r7[-12]
800271b0:	f1 49 00 a8 	st.w	r8[168],r9
                   gpio_port->imr1c = mask;
800271b4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800271b8:	ee f9 ff f4 	ld.w	r9,r7[-12]
800271bc:	f1 49 00 b8 	st.w	r8[184],r9
800271c0:	c2 48       	rjmp	80027208 <gpio_configure_group+0x16e>
            }
            else if (flags & GPIO_RISING)
800271c2:	ee f8 ff f0 	ld.w	r8,r7[-16]
800271c6:	e2 18 02 80 	andl	r8,0x280,COH
800271ca:	c0 e0       	breq	800271e6 <gpio_configure_group+0x14c>
            {
                   gpio_port->imr0s = mask;
800271cc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800271d0:	ee f9 ff f4 	ld.w	r9,r7[-12]
800271d4:	f1 49 00 a4 	st.w	r8[164],r9
                   gpio_port->imr1c = mask;
800271d8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800271dc:	ee f9 ff f4 	ld.w	r9,r7[-12]
800271e0:	f1 49 00 b8 	st.w	r8[184],r9
800271e4:	c1 28       	rjmp	80027208 <gpio_configure_group+0x16e>
            }
            else if (flags & GPIO_FALLING)
800271e6:	ee f8 ff f0 	ld.w	r8,r7[-16]
800271ea:	e2 18 03 80 	andl	r8,0x380,COH
800271ee:	c0 d0       	breq	80027208 <gpio_configure_group+0x16e>
            {
                   gpio_port->imr0c = mask;
800271f0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800271f4:	ee f9 ff f4 	ld.w	r9,r7[-12]
800271f8:	f1 49 00 a8 	st.w	r8[168],r9
                   gpio_port->imr1s = mask;
800271fc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027200:	ee f9 ff f4 	ld.w	r9,r7[-12]
80027204:	f1 49 00 b4 	st.w	r8[180],r9
            }
    }

    /* Select direction and initial pin state */
    if (flags & GPIO_DIR_OUTPUT) {
80027208:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002720c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80027210:	5c 58       	castu.b	r8
80027212:	c1 a0       	breq	80027246 <gpio_configure_group+0x1ac>
            if (flags & GPIO_INIT_HIGH)
80027214:	ee f8 ff f0 	ld.w	r8,r7[-16]
80027218:	e2 18 00 02 	andl	r8,0x2,COH
8002721c:	c0 80       	breq	8002722c <gpio_configure_group+0x192>
                    gpio_port->ovrs = mask;
8002721e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027222:	ee f9 ff f4 	ld.w	r9,r7[-12]
80027226:	f1 49 00 54 	st.w	r8[84],r9
8002722a:	c0 78       	rjmp	80027238 <gpio_configure_group+0x19e>
            else
                    gpio_port->ovrc = mask;
8002722c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027230:	ee f9 ff f4 	ld.w	r9,r7[-12]
80027234:	f1 49 00 58 	st.w	r8[88],r9
            gpio_port->oders = mask;
80027238:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002723c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80027240:	f1 49 00 44 	st.w	r8[68],r9
80027244:	c0 78       	rjmp	80027252 <gpio_configure_group+0x1b8>
    } else {
            gpio_port->oderc = mask;
80027246:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002724a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002724e:	f1 49 00 48 	st.w	r8[72],r9
    }
    
    /* Enable GPIO */
    gpio_port->gpers = mask;
80027252:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027256:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002725a:	91 19       	st.w	r8[0x4],r9
}
8002725c:	2f cd       	sub	sp,-16
8002725e:	e3 cd 80 80 	ldm	sp++,r7,pc

80027262 <gpio_get_pin_value>:

int gpio_get_pin_value(uint32_t pin)
{
80027262:	eb cd 40 80 	pushm	r7,lr
80027266:	1a 97       	mov	r7,sp
80027268:	20 2d       	sub	sp,8
8002726a:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
8002726e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027272:	a5 98       	lsr	r8,0x5
80027274:	a9 78       	lsl	r8,0x9
80027276:	e0 28 e0 00 	sub	r8,57344
8002727a:	ef 48 ff fc 	st.w	r7[-4],r8
  return (gpio_port->pvr >> (pin & 0x1F)) & 1;
8002727e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027282:	71 89       	ld.w	r9,r8[0x60]
80027284:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027288:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8002728c:	f2 08 0a 48 	lsr	r8,r9,r8
80027290:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
}
80027294:	10 9c       	mov	r12,r8
80027296:	2f ed       	sub	sp,-8
80027298:	e3 cd 80 80 	ldm	sp++,r7,pc

8002729c <gpio_get_gpio_pin_output_value>:


int gpio_get_gpio_pin_output_value(uint32_t pin)
{
8002729c:	eb cd 40 80 	pushm	r7,lr
800272a0:	1a 97       	mov	r7,sp
800272a2:	20 2d       	sub	sp,8
800272a4:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
800272a8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800272ac:	a5 98       	lsr	r8,0x5
800272ae:	a9 78       	lsl	r8,0x9
800272b0:	e0 28 e0 00 	sub	r8,57344
800272b4:	ef 48 ff fc 	st.w	r7[-4],r8
  return (gpio_port->ovr >> (pin & 0x1F)) & 1;
800272b8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800272bc:	71 49       	ld.w	r9,r8[0x50]
800272be:	ee f8 ff f8 	ld.w	r8,r7[-8]
800272c2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800272c6:	f2 08 0a 48 	lsr	r8,r9,r8
800272ca:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
}
800272ce:	10 9c       	mov	r12,r8
800272d0:	2f ed       	sub	sp,-8
800272d2:	e3 cd 80 80 	ldm	sp++,r7,pc

800272d6 <gpio_get_gpio_open_drain_pin_output_value>:


int gpio_get_gpio_open_drain_pin_output_value(uint32_t pin)
{
800272d6:	eb cd 40 80 	pushm	r7,lr
800272da:	1a 97       	mov	r7,sp
800272dc:	20 2d       	sub	sp,8
800272de:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
800272e2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800272e6:	a5 98       	lsr	r8,0x5
800272e8:	a9 78       	lsl	r8,0x9
800272ea:	e0 28 e0 00 	sub	r8,57344
800272ee:	ef 48 ff fc 	st.w	r7[-4],r8
  return ((gpio_port->oder >> (pin & 0x1F)) & 1) ^ 1;
800272f2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800272f6:	71 09       	ld.w	r9,r8[0x40]
800272f8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800272fc:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027300:	f2 08 0a 48 	lsr	r8,r9,r8
80027304:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80027308:	5f 08       	sreq	r8
}
8002730a:	10 9c       	mov	r12,r8
8002730c:	2f ed       	sub	sp,-8
8002730e:	e3 cd 80 80 	ldm	sp++,r7,pc

80027312 <gpio_set_gpio_pin>:


void gpio_set_gpio_pin(uint32_t pin)
{
80027312:	eb cd 40 80 	pushm	r7,lr
80027316:	1a 97       	mov	r7,sp
80027318:	20 2d       	sub	sp,8
8002731a:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
8002731e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027322:	a5 98       	lsr	r8,0x5
80027324:	a9 78       	lsl	r8,0x9
80027326:	e0 28 e0 00 	sub	r8,57344
8002732a:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->ovrs  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 1.
8002732e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027332:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027336:	30 19       	mov	r9,1
80027338:	f2 08 09 48 	lsl	r8,r9,r8
8002733c:	10 99       	mov	r9,r8
8002733e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027342:	f1 49 00 54 	st.w	r8[84],r9
  gpio_port->oders = 1 << (pin & 0x1F); // The GPIO output driver is enabled for that pin.
80027346:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002734a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8002734e:	30 19       	mov	r9,1
80027350:	f2 08 09 48 	lsl	r8,r9,r8
80027354:	10 99       	mov	r9,r8
80027356:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002735a:	f1 49 00 44 	st.w	r8[68],r9
  gpio_port->gpers = 1 << (pin & 0x1F); // The GPIO module controls that pin.
8002735e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027362:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027366:	30 19       	mov	r9,1
80027368:	f2 08 09 48 	lsl	r8,r9,r8
8002736c:	10 99       	mov	r9,r8
8002736e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027372:	91 19       	st.w	r8[0x4],r9
}
80027374:	2f ed       	sub	sp,-8
80027376:	e3 cd 80 80 	ldm	sp++,r7,pc

8002737a <gpio_set_pin_high>:

void gpio_set_pin_high(uint32_t pin)
{
8002737a:	eb cd 40 80 	pushm	r7,lr
8002737e:	1a 97       	mov	r7,sp
80027380:	20 2d       	sub	sp,8
80027382:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80027386:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002738a:	a5 98       	lsr	r8,0x5
8002738c:	a9 78       	lsl	r8,0x9
8002738e:	e0 28 e0 00 	sub	r8,57344
80027392:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->ovrs  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 1.
80027396:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002739a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8002739e:	30 19       	mov	r9,1
800273a0:	f2 08 09 48 	lsl	r8,r9,r8
800273a4:	10 99       	mov	r9,r8
800273a6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800273aa:	f1 49 00 54 	st.w	r8[84],r9
}
800273ae:	2f ed       	sub	sp,-8
800273b0:	e3 cd 80 80 	ldm	sp++,r7,pc

800273b4 <gpio_set_group_high>:

void gpio_set_group_high(uint32_t port, uint32_t mask)
{
800273b4:	eb cd 40 80 	pushm	r7,lr
800273b8:	1a 97       	mov	r7,sp
800273ba:	20 3d       	sub	sp,12
800273bc:	ef 4c ff f8 	st.w	r7[-8],r12
800273c0:	ef 4b ff f4 	st.w	r7[-12],r11
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[port];
800273c4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800273c8:	a9 78       	lsl	r8,0x9
800273ca:	e0 28 e0 00 	sub	r8,57344
800273ce:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->ovrs  = mask; // Value to be driven on the I/O group: 1.
800273d2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800273d6:	ee f9 ff f4 	ld.w	r9,r7[-12]
800273da:	f1 49 00 54 	st.w	r8[84],r9
}
800273de:	2f dd       	sub	sp,-12
800273e0:	e3 cd 80 80 	ldm	sp++,r7,pc

800273e4 <gpio_set_pin_low>:


void gpio_set_pin_low(uint32_t pin)
{
800273e4:	eb cd 40 80 	pushm	r7,lr
800273e8:	1a 97       	mov	r7,sp
800273ea:	20 2d       	sub	sp,8
800273ec:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
800273f0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800273f4:	a5 98       	lsr	r8,0x5
800273f6:	a9 78       	lsl	r8,0x9
800273f8:	e0 28 e0 00 	sub	r8,57344
800273fc:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->ovrc  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 0.
80027400:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027404:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027408:	30 19       	mov	r9,1
8002740a:	f2 08 09 48 	lsl	r8,r9,r8
8002740e:	10 99       	mov	r9,r8
80027410:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027414:	f1 49 00 58 	st.w	r8[88],r9
}
80027418:	2f ed       	sub	sp,-8
8002741a:	e3 cd 80 80 	ldm	sp++,r7,pc

8002741e <gpio_clr_gpio_pin>:

void gpio_clr_gpio_pin(uint32_t pin)
{
8002741e:	eb cd 40 80 	pushm	r7,lr
80027422:	1a 97       	mov	r7,sp
80027424:	20 2d       	sub	sp,8
80027426:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
8002742a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002742e:	a5 98       	lsr	r8,0x5
80027430:	a9 78       	lsl	r8,0x9
80027432:	e0 28 e0 00 	sub	r8,57344
80027436:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->ovrc  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 0.
8002743a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002743e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027442:	30 19       	mov	r9,1
80027444:	f2 08 09 48 	lsl	r8,r9,r8
80027448:	10 99       	mov	r9,r8
8002744a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002744e:	f1 49 00 58 	st.w	r8[88],r9
  gpio_port->oders = 1 << (pin & 0x1F); // The GPIO output driver is enabled for that pin.
80027452:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027456:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8002745a:	30 19       	mov	r9,1
8002745c:	f2 08 09 48 	lsl	r8,r9,r8
80027460:	10 99       	mov	r9,r8
80027462:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027466:	f1 49 00 44 	st.w	r8[68],r9
  gpio_port->gpers = 1 << (pin & 0x1F); // The GPIO module controls that pin.  
8002746a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002746e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027472:	30 19       	mov	r9,1
80027474:	f2 08 09 48 	lsl	r8,r9,r8
80027478:	10 99       	mov	r9,r8
8002747a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002747e:	91 19       	st.w	r8[0x4],r9
}
80027480:	2f ed       	sub	sp,-8
80027482:	e3 cd 80 80 	ldm	sp++,r7,pc

80027486 <gpio_set_group_low>:

void gpio_set_group_low(uint32_t port, uint32_t mask)
{
80027486:	eb cd 40 80 	pushm	r7,lr
8002748a:	1a 97       	mov	r7,sp
8002748c:	20 3d       	sub	sp,12
8002748e:	ef 4c ff f8 	st.w	r7[-8],r12
80027492:	ef 4b ff f4 	st.w	r7[-12],r11
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[port];
80027496:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002749a:	a9 78       	lsl	r8,0x9
8002749c:	e0 28 e0 00 	sub	r8,57344
800274a0:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->ovrc  = mask; // Value to be driven on the I/O group: 0.
800274a4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800274a8:	ee f9 ff f4 	ld.w	r9,r7[-12]
800274ac:	f1 49 00 58 	st.w	r8[88],r9
}
800274b0:	2f dd       	sub	sp,-12
800274b2:	e3 cd 80 80 	ldm	sp++,r7,pc

800274b6 <gpio_tgl_gpio_pin>:

void gpio_tgl_gpio_pin(uint32_t pin)
{
800274b6:	eb cd 40 80 	pushm	r7,lr
800274ba:	1a 97       	mov	r7,sp
800274bc:	20 2d       	sub	sp,8
800274be:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
800274c2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800274c6:	a5 98       	lsr	r8,0x5
800274c8:	a9 78       	lsl	r8,0x9
800274ca:	e0 28 e0 00 	sub	r8,57344
800274ce:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->ovrt  = 1 << (pin & 0x1F); // Toggle the I/O line.
800274d2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800274d6:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800274da:	30 19       	mov	r9,1
800274dc:	f2 08 09 48 	lsl	r8,r9,r8
800274e0:	10 99       	mov	r9,r8
800274e2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800274e6:	f1 49 00 5c 	st.w	r8[92],r9
  gpio_port->oders = 1 << (pin & 0x1F); // The GPIO output driver is enabled for that pin.
800274ea:	ee f8 ff f8 	ld.w	r8,r7[-8]
800274ee:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800274f2:	30 19       	mov	r9,1
800274f4:	f2 08 09 48 	lsl	r8,r9,r8
800274f8:	10 99       	mov	r9,r8
800274fa:	ee f8 ff fc 	ld.w	r8,r7[-4]
800274fe:	f1 49 00 44 	st.w	r8[68],r9
  gpio_port->gpers = 1 << (pin & 0x1F); // The GPIO module controls that pin.
80027502:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027506:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8002750a:	30 19       	mov	r9,1
8002750c:	f2 08 09 48 	lsl	r8,r9,r8
80027510:	10 99       	mov	r9,r8
80027512:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027516:	91 19       	st.w	r8[0x4],r9
}
80027518:	2f ed       	sub	sp,-8
8002751a:	e3 cd 80 80 	ldm	sp++,r7,pc

8002751e <gpio_toggle_pin>:

void gpio_toggle_pin(uint32_t pin)
{
8002751e:	eb cd 40 80 	pushm	r7,lr
80027522:	1a 97       	mov	r7,sp
80027524:	20 2d       	sub	sp,8
80027526:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
8002752a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002752e:	a5 98       	lsr	r8,0x5
80027530:	a9 78       	lsl	r8,0x9
80027532:	e0 28 e0 00 	sub	r8,57344
80027536:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->ovrt  = 1 << (pin & 0x1F); // Toggle the I/O line.
8002753a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002753e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027542:	30 19       	mov	r9,1
80027544:	f2 08 09 48 	lsl	r8,r9,r8
80027548:	10 99       	mov	r9,r8
8002754a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002754e:	f1 49 00 5c 	st.w	r8[92],r9
}
80027552:	2f ed       	sub	sp,-8
80027554:	e3 cd 80 80 	ldm	sp++,r7,pc

80027558 <gpio_toggle_group>:

void gpio_toggle_group(uint32_t port, uint32_t mask)
{
80027558:	eb cd 40 80 	pushm	r7,lr
8002755c:	1a 97       	mov	r7,sp
8002755e:	20 3d       	sub	sp,12
80027560:	ef 4c ff f8 	st.w	r7[-8],r12
80027564:	ef 4b ff f4 	st.w	r7[-12],r11
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[port];
80027568:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002756c:	a9 78       	lsl	r8,0x9
8002756e:	e0 28 e0 00 	sub	r8,57344
80027572:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->ovrt  = mask; // Toggle the I/O port.
80027576:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002757a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002757e:	f1 49 00 5c 	st.w	r8[92],r9
}
80027582:	2f dd       	sub	sp,-12
80027584:	e3 cd 80 80 	ldm	sp++,r7,pc

80027588 <gpio_set_gpio_open_drain_pin>:

void gpio_set_gpio_open_drain_pin(uint32_t pin)
{
80027588:	eb cd 40 80 	pushm	r7,lr
8002758c:	1a 97       	mov	r7,sp
8002758e:	20 2d       	sub	sp,8
80027590:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80027594:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027598:	a5 98       	lsr	r8,0x5
8002759a:	a9 78       	lsl	r8,0x9
8002759c:	e0 28 e0 00 	sub	r8,57344
800275a0:	ef 48 ff fc 	st.w	r7[-4],r8

  gpio_port->oderc = 1 << (pin & 0x1F); // The GPIO output driver is disabled for that pin.
800275a4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800275a8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800275ac:	30 19       	mov	r9,1
800275ae:	f2 08 09 48 	lsl	r8,r9,r8
800275b2:	10 99       	mov	r9,r8
800275b4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800275b8:	f1 49 00 48 	st.w	r8[72],r9
  gpio_port->gpers = 1 << (pin & 0x1F); // The GPIO module controls that pin.
800275bc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800275c0:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800275c4:	30 19       	mov	r9,1
800275c6:	f2 08 09 48 	lsl	r8,r9,r8
800275ca:	10 99       	mov	r9,r8
800275cc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800275d0:	91 19       	st.w	r8[0x4],r9
}
800275d2:	2f ed       	sub	sp,-8
800275d4:	e3 cd 80 80 	ldm	sp++,r7,pc

800275d8 <gpio_clr_gpio_open_drain_pin>:


void gpio_clr_gpio_open_drain_pin(uint32_t pin)
{
800275d8:	eb cd 40 80 	pushm	r7,lr
800275dc:	1a 97       	mov	r7,sp
800275de:	20 2d       	sub	sp,8
800275e0:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
800275e4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800275e8:	a5 98       	lsr	r8,0x5
800275ea:	a9 78       	lsl	r8,0x9
800275ec:	e0 28 e0 00 	sub	r8,57344
800275f0:	ef 48 ff fc 	st.w	r7[-4],r8

  gpio_port->ovrc  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 0.
800275f4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800275f8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800275fc:	30 19       	mov	r9,1
800275fe:	f2 08 09 48 	lsl	r8,r9,r8
80027602:	10 99       	mov	r9,r8
80027604:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027608:	f1 49 00 58 	st.w	r8[88],r9
  gpio_port->oders = 1 << (pin & 0x1F); // The GPIO output driver is enabled for that pin.
8002760c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027610:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027614:	30 19       	mov	r9,1
80027616:	f2 08 09 48 	lsl	r8,r9,r8
8002761a:	10 99       	mov	r9,r8
8002761c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027620:	f1 49 00 44 	st.w	r8[68],r9
  gpio_port->gpers = 1 << (pin & 0x1F); // The GPIO module controls that pin.
80027624:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027628:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8002762c:	30 19       	mov	r9,1
8002762e:	f2 08 09 48 	lsl	r8,r9,r8
80027632:	10 99       	mov	r9,r8
80027634:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027638:	91 19       	st.w	r8[0x4],r9
}
8002763a:	2f ed       	sub	sp,-8
8002763c:	e3 cd 80 80 	ldm	sp++,r7,pc

80027640 <gpio_tgl_gpio_open_drain_pin>:


void gpio_tgl_gpio_open_drain_pin(uint32_t pin)
{
80027640:	eb cd 40 80 	pushm	r7,lr
80027644:	1a 97       	mov	r7,sp
80027646:	20 2d       	sub	sp,8
80027648:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
8002764c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027650:	a5 98       	lsr	r8,0x5
80027652:	a9 78       	lsl	r8,0x9
80027654:	e0 28 e0 00 	sub	r8,57344
80027658:	ef 48 ff fc 	st.w	r7[-4],r8

  gpio_port->ovrc  = 1 << (pin & 0x1F); // Value to be driven on the I/O line if the GPIO output driver is enabled: 0.
8002765c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027660:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027664:	30 19       	mov	r9,1
80027666:	f2 08 09 48 	lsl	r8,r9,r8
8002766a:	10 99       	mov	r9,r8
8002766c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027670:	f1 49 00 58 	st.w	r8[88],r9
  gpio_port->odert = 1 << (pin & 0x1F); // The GPIO output driver is toggled for that pin.
80027674:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027678:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8002767c:	30 19       	mov	r9,1
8002767e:	f2 08 09 48 	lsl	r8,r9,r8
80027682:	10 99       	mov	r9,r8
80027684:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027688:	f1 49 00 4c 	st.w	r8[76],r9
  gpio_port->gpers = 1 << (pin & 0x1F); // The GPIO module controls that pin.
8002768c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027690:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027694:	30 19       	mov	r9,1
80027696:	f2 08 09 48 	lsl	r8,r9,r8
8002769a:	10 99       	mov	r9,r8
8002769c:	ee f8 ff fc 	ld.w	r8,r7[-4]
800276a0:	91 19       	st.w	r8[0x4],r9
}
800276a2:	2f ed       	sub	sp,-8
800276a4:	e3 cd 80 80 	ldm	sp++,r7,pc

800276a8 <gpio_enable_pin_glitch_filter>:


void gpio_enable_pin_glitch_filter(uint32_t pin)
{
800276a8:	eb cd 40 80 	pushm	r7,lr
800276ac:	1a 97       	mov	r7,sp
800276ae:	20 2d       	sub	sp,8
800276b0:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
800276b4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800276b8:	a5 98       	lsr	r8,0x5
800276ba:	a9 78       	lsl	r8,0x9
800276bc:	e0 28 e0 00 	sub	r8,57344
800276c0:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->gfers = 1 << (pin & 0x1F);
800276c4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800276c8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800276cc:	30 19       	mov	r9,1
800276ce:	f2 08 09 48 	lsl	r8,r9,r8
800276d2:	10 99       	mov	r9,r8
800276d4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800276d8:	f1 49 00 c4 	st.w	r8[196],r9
}
800276dc:	2f ed       	sub	sp,-8
800276de:	e3 cd 80 80 	ldm	sp++,r7,pc

800276e2 <gpio_disable_pin_glitch_filter>:


void gpio_disable_pin_glitch_filter(uint32_t pin)
{
800276e2:	eb cd 40 80 	pushm	r7,lr
800276e6:	1a 97       	mov	r7,sp
800276e8:	20 2d       	sub	sp,8
800276ea:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
800276ee:	ee f8 ff f8 	ld.w	r8,r7[-8]
800276f2:	a5 98       	lsr	r8,0x5
800276f4:	a9 78       	lsl	r8,0x9
800276f6:	e0 28 e0 00 	sub	r8,57344
800276fa:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->gferc = 1 << (pin & 0x1F);
800276fe:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027702:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027706:	30 19       	mov	r9,1
80027708:	f2 08 09 48 	lsl	r8,r9,r8
8002770c:	10 99       	mov	r9,r8
8002770e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027712:	f1 49 00 c8 	st.w	r8[200],r9
}
80027716:	2f ed       	sub	sp,-8
80027718:	e3 cd 80 80 	ldm	sp++,r7,pc

8002771c <gpio_configure_edge_detector>:
 *             or \ref GPIO_FALLING_EDGE).
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
static int gpio_configure_edge_detector(uint32_t pin, uint32_t mode)
{
8002771c:	eb cd 40 80 	pushm	r7,lr
80027720:	1a 97       	mov	r7,sp
80027722:	20 3d       	sub	sp,12
80027724:	ef 4c ff f8 	st.w	r7[-8],r12
80027728:	ef 4b ff f4 	st.w	r7[-12],r11
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
8002772c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027730:	a5 98       	lsr	r8,0x5
80027732:	a9 78       	lsl	r8,0x9
80027734:	e0 28 e0 00 	sub	r8,57344
80027738:	ef 48 ff fc 	st.w	r7[-4],r8
  
  // Configure the edge detector.
  switch (mode)
8002773c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80027740:	58 18       	cp.w	r8,1
80027742:	c1 e0       	breq	8002777e <gpio_configure_edge_detector+0x62>
80027744:	c0 43       	brcs	8002774c <gpio_configure_edge_detector+0x30>
80027746:	58 28       	cp.w	r8,2
80027748:	c3 40       	breq	800277b0 <gpio_configure_edge_detector+0x94>
8002774a:	c4 c8       	rjmp	800277e2 <gpio_configure_edge_detector+0xc6>
  {
  case GPIO_PIN_CHANGE:
    gpio_port->imr0c = 1 << (pin & 0x1F);
8002774c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027750:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027754:	30 19       	mov	r9,1
80027756:	f2 08 09 48 	lsl	r8,r9,r8
8002775a:	10 99       	mov	r9,r8
8002775c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027760:	f1 49 00 a8 	st.w	r8[168],r9
    gpio_port->imr1c = 1 << (pin & 0x1F);
80027764:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027768:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8002776c:	30 19       	mov	r9,1
8002776e:	f2 08 09 48 	lsl	r8,r9,r8
80027772:	10 99       	mov	r9,r8
80027774:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027778:	f1 49 00 b8 	st.w	r8[184],r9
    break;
8002777c:	c3 58       	rjmp	800277e6 <gpio_configure_edge_detector+0xca>

  case GPIO_RISING_EDGE:
    gpio_port->imr0s = 1 << (pin & 0x1F);
8002777e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027782:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027786:	30 19       	mov	r9,1
80027788:	f2 08 09 48 	lsl	r8,r9,r8
8002778c:	10 99       	mov	r9,r8
8002778e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027792:	f1 49 00 a4 	st.w	r8[164],r9
    gpio_port->imr1c = 1 << (pin & 0x1F);
80027796:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002779a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8002779e:	30 19       	mov	r9,1
800277a0:	f2 08 09 48 	lsl	r8,r9,r8
800277a4:	10 99       	mov	r9,r8
800277a6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800277aa:	f1 49 00 b8 	st.w	r8[184],r9
    break;
800277ae:	c1 c8       	rjmp	800277e6 <gpio_configure_edge_detector+0xca>

  case GPIO_FALLING_EDGE:
    gpio_port->imr0c = 1 << (pin & 0x1F);
800277b0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800277b4:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800277b8:	30 19       	mov	r9,1
800277ba:	f2 08 09 48 	lsl	r8,r9,r8
800277be:	10 99       	mov	r9,r8
800277c0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800277c4:	f1 49 00 a8 	st.w	r8[168],r9
    gpio_port->imr1s = 1 << (pin & 0x1F);
800277c8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800277cc:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800277d0:	30 19       	mov	r9,1
800277d2:	f2 08 09 48 	lsl	r8,r9,r8
800277d6:	10 99       	mov	r9,r8
800277d8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800277dc:	f1 49 00 b4 	st.w	r8[180],r9
    break;
800277e0:	c0 38       	rjmp	800277e6 <gpio_configure_edge_detector+0xca>

  default:
    return GPIO_INVALID_ARGUMENT;
800277e2:	30 18       	mov	r8,1
800277e4:	c0 28       	rjmp	800277e8 <gpio_configure_edge_detector+0xcc>
  }

  return GPIO_SUCCESS;
800277e6:	30 08       	mov	r8,0
}
800277e8:	10 9c       	mov	r12,r8
800277ea:	2f dd       	sub	sp,-12
800277ec:	e3 cd 80 80 	ldm	sp++,r7,pc

800277f0 <gpio_enable_pin_interrupt>:


int gpio_enable_pin_interrupt(uint32_t pin, uint32_t mode)
{
800277f0:	eb cd 40 c0 	pushm	r6-r7,lr
800277f4:	1a 97       	mov	r7,sp
800277f6:	20 3d       	sub	sp,12
800277f8:	49 b6       	lddpc	r6,80027864 <gpio_enable_pin_interrupt+0x74>
800277fa:	1e 26       	rsub	r6,pc
800277fc:	ef 4c ff f8 	st.w	r7[-8],r12
80027800:	ef 4b ff f4 	st.w	r7[-12],r11
  volatile avr32_gpio_port_t  *gpio_port = &GPIO.port[pin >> 5];
80027804:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027808:	a5 98       	lsr	r8,0x5
8002780a:	a9 78       	lsl	r8,0x9
8002780c:	e0 28 e0 00 	sub	r8,57344
80027810:	ef 48 ff fc 	st.w	r7[-4],r8

  // Enable the glitch filter.
  gpio_port->gfers = 1 << (pin & 0x1F);
80027814:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027818:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8002781c:	30 19       	mov	r9,1
8002781e:	f2 08 09 48 	lsl	r8,r9,r8
80027822:	10 99       	mov	r9,r8
80027824:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027828:	f1 49 00 c4 	st.w	r8[196],r9

  // Configure the edge detector.
  if(GPIO_INVALID_ARGUMENT == gpio_configure_edge_detector(pin, mode))
8002782c:	ee fb ff f4 	ld.w	r11,r7[-12]
80027830:	ee fc ff f8 	ld.w	r12,r7[-8]
80027834:	c7 4f       	rcall	8002771c <gpio_configure_edge_detector>
80027836:	18 98       	mov	r8,r12
80027838:	58 18       	cp.w	r8,1
8002783a:	c0 31       	brne	80027840 <gpio_enable_pin_interrupt+0x50>
    return(GPIO_INVALID_ARGUMENT);
8002783c:	30 18       	mov	r8,1
8002783e:	c0 e8       	rjmp	8002785a <gpio_enable_pin_interrupt+0x6a>

  // Enable interrupt.
  gpio_port->iers = 1 << (pin & 0x1F);
80027840:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027844:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027848:	30 19       	mov	r9,1
8002784a:	f2 08 09 48 	lsl	r8,r9,r8
8002784e:	10 99       	mov	r9,r8
80027850:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027854:	f1 49 00 94 	st.w	r8[148],r9

  return GPIO_SUCCESS;
80027858:	30 08       	mov	r8,0
}
8002785a:	10 9c       	mov	r12,r8
8002785c:	2f dd       	sub	sp,-12
8002785e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80027862:	00 00       	add	r0,r0
80027864:	80 02       	ld.sh	r2,r0[0x0]
80027866:	76 7e       	ld.w	lr,r11[0x1c]

80027868 <gpio_disable_pin_interrupt>:


void gpio_disable_pin_interrupt(uint32_t pin)
{
80027868:	eb cd 40 80 	pushm	r7,lr
8002786c:	1a 97       	mov	r7,sp
8002786e:	20 2d       	sub	sp,8
80027870:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80027874:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027878:	a5 98       	lsr	r8,0x5
8002787a:	a9 78       	lsl	r8,0x9
8002787c:	e0 28 e0 00 	sub	r8,57344
80027880:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->ierc = 1 << (pin & 0x1F);
80027884:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027888:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8002788c:	30 19       	mov	r9,1
8002788e:	f2 08 09 48 	lsl	r8,r9,r8
80027892:	10 99       	mov	r9,r8
80027894:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027898:	f1 49 00 98 	st.w	r8[152],r9
}
8002789c:	2f ed       	sub	sp,-8
8002789e:	e3 cd 80 80 	ldm	sp++,r7,pc

800278a2 <gpio_get_pin_interrupt_flag>:


int gpio_get_pin_interrupt_flag(uint32_t pin)
{
800278a2:	eb cd 40 80 	pushm	r7,lr
800278a6:	1a 97       	mov	r7,sp
800278a8:	20 2d       	sub	sp,8
800278aa:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
800278ae:	ee f8 ff f8 	ld.w	r8,r7[-8]
800278b2:	a5 98       	lsr	r8,0x5
800278b4:	a9 78       	lsl	r8,0x9
800278b6:	e0 28 e0 00 	sub	r8,57344
800278ba:	ef 48 ff fc 	st.w	r7[-4],r8
  return (gpio_port->ifr >> (pin & 0x1F)) & 1;
800278be:	ee f8 ff fc 	ld.w	r8,r7[-4]
800278c2:	f0 f9 00 d0 	ld.w	r9,r8[208]
800278c6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800278ca:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800278ce:	f2 08 0a 48 	lsr	r8,r9,r8
800278d2:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
}
800278d6:	10 9c       	mov	r12,r8
800278d8:	2f ed       	sub	sp,-8
800278da:	e3 cd 80 80 	ldm	sp++,r7,pc

800278de <gpio_clear_pin_interrupt_flag>:


void gpio_clear_pin_interrupt_flag(uint32_t pin)
{
800278de:	eb cd 40 80 	pushm	r7,lr
800278e2:	1a 97       	mov	r7,sp
800278e4:	20 2d       	sub	sp,8
800278e6:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
800278ea:	ee f8 ff f8 	ld.w	r8,r7[-8]
800278ee:	a5 98       	lsr	r8,0x5
800278f0:	a9 78       	lsl	r8,0x9
800278f2:	e0 28 e0 00 	sub	r8,57344
800278f6:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->ifrc = 1 << (pin & 0x1F);

  // Restore interrupt enable register.
  gpio_port->ier = gpio_ier;
#else
  gpio_port->ifrc = 1 << (pin & 0x1F);
800278fa:	ee f8 ff f8 	ld.w	r8,r7[-8]
800278fe:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027902:	30 19       	mov	r9,1
80027904:	f2 08 09 48 	lsl	r8,r9,r8
80027908:	10 99       	mov	r9,r8
8002790a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002790e:	f1 49 00 d8 	st.w	r8[216],r9
#endif
}
80027912:	2f ed       	sub	sp,-8
80027914:	e3 cd 80 80 	ldm	sp++,r7,pc

80027918 <_unhandled_interrupt>:
__attribute__((__interrupt__))
#elif (defined __ICCAVR32__)
__interrupt
#endif
static void _unhandled_interrupt(void)
{
80027918:	eb cd 40 c0 	pushm	r6-r7,lr
8002791c:	1a 97       	mov	r7,sp
  // Catch unregistered interrupts.
  while (true);
8002791e:	c0 08       	rjmp	8002791e <_unhandled_interrupt+0x6>

80027920 <_get_interrupt_handler>:
 * \return Interrupt handler to execute.
 *
 * \note Taken and adapted from Newlib.
 */
__int_handler _get_interrupt_handler(unsigned int int_level)
{
80027920:	eb cd 40 c0 	pushm	r6-r7,lr
80027924:	1a 97       	mov	r7,sp
80027926:	20 3d       	sub	sp,12
80027928:	49 a6       	lddpc	r6,80027990 <_get_interrupt_handler+0x70>
8002792a:	1e 26       	rsub	r6,pc
8002792c:	ef 4c ff f4 	st.w	r7[-12],r12
  // ICR3 is mapped first, ICR0 last.
  // Code in exception.S puts int_level in R12 which is used by AVR32-GCC to
  // pass a single argument to a function.
  unsigned int int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
80027930:	fe 78 00 00 	mov	r8,-65536
80027934:	ee f9 ff f4 	ld.w	r9,r7[-12]
80027938:	f2 09 11 03 	rsub	r9,r9,3
8002793c:	28 09       	sub	r9,-128
8002793e:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80027942:	ef 48 ff f8 	st.w	r7[-8],r8
  unsigned int int_req = AVR32_INTC.irr[int_grp];
80027946:	fe 78 00 00 	mov	r8,-65536
8002794a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002794e:	2c 09       	sub	r9,-64
80027950:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80027954:	ef 48 ff fc 	st.w	r7[-4],r8
  // exception.S will provide the interrupt handler with a clean interrupt stack
  // frame, with nothing more pushed onto the stack. The interrupt handler must
  // manage the `rete' instruction, what can be done thanks to pure assembly,
  // inline assembly or the `__attribute__((__interrupt__))' C function
  // attribute.
  return (int_req) ? _int_handler_table[int_grp]._int_line_handler_table[32 - clz(int_req) - 1] : NULL;
80027958:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002795c:	58 08       	cp.w	r8,0
8002795e:	c1 40       	breq	80027986 <_get_interrupt_handler+0x66>
80027960:	ee f9 ff f8 	ld.w	r9,r7[-8]
80027964:	ec f8 02 54 	ld.w	r8,r6[596]
80027968:	a1 79       	lsl	r9,0x1
8002796a:	2f f9       	sub	r9,-1
8002796c:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80027970:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027974:	f0 08 12 00 	clz	r8,r8
80027978:	f0 08 11 1f 	rsub	r8,r8,31
8002797c:	a3 68       	lsl	r8,0x2
8002797e:	f2 08 00 08 	add	r8,r9,r8
80027982:	70 08       	ld.w	r8,r8[0x0]
80027984:	c0 28       	rjmp	80027988 <_get_interrupt_handler+0x68>
80027986:	30 08       	mov	r8,0
}
80027988:	10 9c       	mov	r12,r8
8002798a:	2f dd       	sub	sp,-12
8002798c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80027990:	80 02       	ld.sh	r2,r0[0x0]
80027992:	77 ae       	ld.w	lr,r11[0x68]

80027994 <INTC_init_evba>:

//! Init EVBA address. This sequence might also be done in the utils/startup/startup_uc3.S file.
static __inline__ void INTC_init_evba(void)
{
80027994:	eb cd 40 c0 	pushm	r6-r7,lr
80027998:	1a 97       	mov	r7,sp
8002799a:	48 56       	lddpc	r6,800279ac <INTC_init_evba+0x18>
8002799c:	1e 26       	rsub	r6,pc
  Set_system_register(AVR32_EVBA, (int)&_evba );
8002799e:	ec f8 07 64 	ld.w	r8,r6[1892]
800279a2:	e3 b8 00 01 	mtsr	0x4,r8
}
800279a6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800279aa:	00 00       	add	r0,r0
800279ac:	80 02       	ld.sh	r2,r0[0x0]
800279ae:	78 20       	ld.w	r0,r12[0x8]

800279b0 <INTC_init_interrupts>:

void INTC_init_interrupts(void)
{
800279b0:	eb cd 40 c0 	pushm	r6-r7,lr
800279b4:	1a 97       	mov	r7,sp
800279b6:	20 2d       	sub	sp,8
800279b8:	4a 16       	lddpc	r6,80027a3c <INTC_init_interrupts+0x8c>
800279ba:	1e 26       	rsub	r6,pc
  unsigned int int_grp, int_req;

  INTC_init_evba();
800279bc:	ce cf       	rcall	80027994 <INTC_init_evba>

  // For all interrupt groups,
  for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
800279be:	30 08       	mov	r8,0
800279c0:	ef 48 ff f8 	st.w	r7[-8],r8
800279c4:	c3 38       	rjmp	80027a2a <INTC_init_interrupts+0x7a>
  {
    // For all interrupt request lines of each group,
    for (int_req = 0; int_req < _int_handler_table[int_grp].num_irqs; int_req++)
800279c6:	30 08       	mov	r8,0
800279c8:	ef 48 ff fc 	st.w	r7[-4],r8
800279cc:	c1 68       	rjmp	800279f8 <INTC_init_interrupts+0x48>
    {
      // Assign _unhandled_interrupt as default interrupt handler.
      _int_handler_table[int_grp]._int_line_handler_table[int_req] = &_unhandled_interrupt;
800279ce:	ee f9 ff f8 	ld.w	r9,r7[-8]
800279d2:	ec f8 02 54 	ld.w	r8,r6[596]
800279d6:	a1 79       	lsl	r9,0x1
800279d8:	2f f9       	sub	r9,-1
800279da:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
800279de:	ee f8 ff fc 	ld.w	r8,r7[-4]
800279e2:	a3 68       	lsl	r8,0x2
800279e4:	f2 08 00 08 	add	r8,r9,r8
800279e8:	fe c9 00 d0 	sub	r9,pc,208
800279ec:	91 09       	st.w	r8[0x0],r9

  // For all interrupt groups,
  for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
  {
    // For all interrupt request lines of each group,
    for (int_req = 0; int_req < _int_handler_table[int_grp].num_irqs; int_req++)
800279ee:	ee f8 ff fc 	ld.w	r8,r7[-4]
800279f2:	2f f8       	sub	r8,-1
800279f4:	ef 48 ff fc 	st.w	r7[-4],r8
800279f8:	ee f9 ff f8 	ld.w	r9,r7[-8]
800279fc:	ec f8 02 54 	ld.w	r8,r6[596]
80027a00:	f0 09 03 39 	ld.w	r9,r8[r9<<0x3]
80027a04:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027a08:	10 39       	cp.w	r9,r8
80027a0a:	fe 9b ff e2 	brhi	800279ce <INTC_init_interrupts+0x1e>
    }

    // Set the interrupt group priority register to its default value.
    // By default, all interrupt groups are linked to the interrupt priority
    // level 0 and to the interrupt vector _int0.
    AVR32_INTC.ipr[int_grp] = ipr_val[AVR32_INTC_INT0];
80027a0e:	fe 78 00 00 	mov	r8,-65536
80027a12:	ee f9 ff f8 	ld.w	r9,r7[-8]
80027a16:	ec fa 03 ac 	ld.w	r10,r6[940]
80027a1a:	74 0a       	ld.w	r10,r10[0x0]
80027a1c:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
  unsigned int int_grp, int_req;

  INTC_init_evba();

  // For all interrupt groups,
  for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
80027a20:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027a24:	2f f8       	sub	r8,-1
80027a26:	ef 48 ff f8 	st.w	r7[-8],r8
80027a2a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027a2e:	e0 48 00 2e 	cp.w	r8,46
80027a32:	fe 98 ff ca 	brls	800279c6 <INTC_init_interrupts+0x16>
    // Set the interrupt group priority register to its default value.
    // By default, all interrupt groups are linked to the interrupt priority
    // level 0 and to the interrupt vector _int0.
    AVR32_INTC.ipr[int_grp] = ipr_val[AVR32_INTC_INT0];
  }
}
80027a36:	2f ed       	sub	sp,-8
80027a38:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80027a3c:	80 02       	ld.sh	r2,r0[0x0]
80027a3e:	78 3e       	ld.w	lr,r12[0xc]

80027a40 <INTC_register_interrupt>:


void INTC_register_interrupt(__int_handler handler, unsigned int irq, unsigned int int_level)
{
80027a40:	eb cd 40 c0 	pushm	r6-r7,lr
80027a44:	1a 97       	mov	r7,sp
80027a46:	20 4d       	sub	sp,16
80027a48:	49 86       	lddpc	r6,80027aa8 <INTC_register_interrupt+0x68>
80027a4a:	1e 26       	rsub	r6,pc
80027a4c:	ef 4c ff f8 	st.w	r7[-8],r12
80027a50:	ef 4b ff f4 	st.w	r7[-12],r11
80027a54:	ef 4a ff f0 	st.w	r7[-16],r10
  // Determine the group of the IRQ.
  unsigned int int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;
80027a58:	ee f8 ff f4 	ld.w	r8,r7[-12]
80027a5c:	a5 98       	lsr	r8,0x5
80027a5e:	ef 48 ff fc 	st.w	r7[-4],r8

  // Store in _int_line_handler_table_x the pointer to the interrupt handler, so
  // that _get_interrupt_handler can retrieve it when the interrupt is vectored.
  _int_handler_table[int_grp]._int_line_handler_table[irq % AVR32_INTC_MAX_NUM_IRQS_PER_GRP] = handler;
80027a62:	ee f9 ff fc 	ld.w	r9,r7[-4]
80027a66:	ec f8 02 54 	ld.w	r8,r6[596]
80027a6a:	a1 79       	lsl	r9,0x1
80027a6c:	2f f9       	sub	r9,-1
80027a6e:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80027a72:	ee f8 ff f4 	ld.w	r8,r7[-12]
80027a76:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027a7a:	a3 68       	lsl	r8,0x2
80027a7c:	f2 08 00 08 	add	r8,r9,r8
80027a80:	ee f9 ff f8 	ld.w	r9,r7[-8]
80027a84:	91 09       	st.w	r8[0x0],r9
  // Program the corresponding IPRX register to set the interrupt priority level
  // and the interrupt vector offset that will be fetched by the core interrupt
  // system.
  // NOTE: The _intx functions are intermediate assembly functions between the
  // core interrupt system and the user interrupt handler.
  AVR32_INTC.ipr[int_grp] = ipr_val[int_level & (AVR32_INTC_IPR_INTLEVEL_MASK >> AVR32_INTC_IPR_INTLEVEL_OFFSET)];
80027a86:	fe 78 00 00 	mov	r8,-65536
80027a8a:	ee f9 ff fc 	ld.w	r9,r7[-4]
80027a8e:	ee fa ff f0 	ld.w	r10,r7[-16]
80027a92:	f7 da c0 02 	bfextu	r11,r10,0x0,0x2
80027a96:	ec fa 03 ac 	ld.w	r10,r6[940]
80027a9a:	f4 0b 03 2a 	ld.w	r10,r10[r11<<0x2]
80027a9e:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
}
80027aa2:	2f cd       	sub	sp,-16
80027aa4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80027aa8:	80 02       	ld.sh	r2,r0[0x0]
80027aaa:	78 ce       	ld.w	lr,r12[0x30]

80027aac <cpu_irq_is_enabled_flags>:

	return flags;
}

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
80027aac:	eb cd 40 80 	pushm	r7,lr
80027ab0:	1a 97       	mov	r7,sp
80027ab2:	20 1d       	sub	sp,4
80027ab4:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
80027ab8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027abc:	e6 18 00 01 	andh	r8,0x1,COH
80027ac0:	5f 08       	sreq	r8
80027ac2:	5c 58       	castu.b	r8
}
80027ac4:	10 9c       	mov	r12,r8
80027ac6:	2f fd       	sub	sp,-4
80027ac8:	e3 cd 80 80 	ldm	sp++,r7,pc

80027acc <pdca_get_handler>:
#include "compiler.h"
#include "pdca.h"


volatile avr32_pdca_channel_t *pdca_get_handler(unsigned int pdca_ch_number)
{
80027acc:	eb cd 40 80 	pushm	r7,lr
80027ad0:	1a 97       	mov	r7,sp
80027ad2:	20 2d       	sub	sp,8
80027ad4:	ef 4c ff f8 	st.w	r7[-8],r12
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = &AVR32_PDCA.channel[pdca_ch_number];
80027ad8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027adc:	a7 68       	lsl	r8,0x6
80027ade:	e2 38 00 00 	sub	r8,196608
80027ae2:	ef 48 ff fc 	st.w	r7[-4],r8

  if (pdca_ch_number >= AVR32_PDCA_CHANNEL_LENGTH)
80027ae6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027aea:	58 f8       	cp.w	r8,15
80027aec:	e0 88 00 04 	brls	80027af4 <pdca_get_handler+0x28>
    return (volatile avr32_pdca_channel_t *)PDCA_INVALID_ARGUMENT;
80027af0:	3f f8       	mov	r8,-1
80027af2:	c0 38       	rjmp	80027af8 <pdca_get_handler+0x2c>

  return pdca_channel;
80027af4:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80027af8:	10 9c       	mov	r12,r8
80027afa:	2f ed       	sub	sp,-8
80027afc:	e3 cd 80 80 	ldm	sp++,r7,pc

80027b00 <pdca_init_channel>:


int pdca_init_channel(unsigned int pdca_ch_number, const pdca_channel_options_t *opt)
{
80027b00:	eb cd 40 c0 	pushm	r6-r7,lr
80027b04:	1a 97       	mov	r7,sp
80027b06:	20 4d       	sub	sp,16
80027b08:	4b 26       	lddpc	r6,80027bd0 <pdca_init_channel+0xd0>
80027b0a:	1e 26       	rsub	r6,pc
80027b0c:	ef 4c ff f4 	st.w	r7[-12],r12
80027b10:	ef 4b ff f0 	st.w	r7[-16],r11
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);
80027b14:	ee fc ff f4 	ld.w	r12,r7[-12]
80027b18:	f0 16 00 25 	mcall	r6[148]
80027b1c:	18 98       	mov	r8,r12
80027b1e:	ef 48 ff f8 	st.w	r7[-8],r8

  pdca_disable_interrupt_transfer_complete(pdca_ch_number); // disable channel interrupt
80027b22:	ee fc ff f4 	ld.w	r12,r7[-12]
80027b26:	f0 16 00 c9 	mcall	r6[804]
  pdca_disable_interrupt_reload_counter_zero(pdca_ch_number); // disable channel interrupt
80027b2a:	ee fc ff f4 	ld.w	r12,r7[-12]
80027b2e:	f0 16 01 f8 	mcall	r6[2016]

  bool global_interrupt_enabled = cpu_irq_is_enabled();
80027b32:	e1 b8 00 00 	mfsr	r8,0x0
80027b36:	10 9c       	mov	r12,r8
80027b38:	cb af       	rcall	80027aac <cpu_irq_is_enabled_flags>
80027b3a:	18 98       	mov	r8,r12
80027b3c:	ef 68 ff ff 	st.b	r7[-1],r8

  if (global_interrupt_enabled) cpu_irq_disable();
80027b40:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80027b44:	30 08       	mov	r8,0
80027b46:	f0 09 18 00 	cp.b	r9,r8
80027b4a:	c0 20       	breq	80027b4e <pdca_init_channel+0x4e>
80027b4c:	d3 03       	ssrf	0x10
  pdca_channel->mar = (unsigned long)opt->addr;
80027b4e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80027b52:	70 08       	ld.w	r8,r8[0x0]
80027b54:	10 99       	mov	r9,r8
80027b56:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027b5a:	91 09       	st.w	r8[0x0],r9
  pdca_channel->tcr = opt->size;
80027b5c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80027b60:	70 19       	ld.w	r9,r8[0x4]
80027b62:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027b66:	91 29       	st.w	r8[0x8],r9
  pdca_channel->psr = opt->pid;
80027b68:	ee f8 ff f0 	ld.w	r8,r7[-16]
80027b6c:	70 49       	ld.w	r9,r8[0x10]
80027b6e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027b72:	91 19       	st.w	r8[0x4],r9
  pdca_channel->marr = (unsigned long)opt->r_addr;
80027b74:	ee f8 ff f0 	ld.w	r8,r7[-16]
80027b78:	70 28       	ld.w	r8,r8[0x8]
80027b7a:	10 99       	mov	r9,r8
80027b7c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027b80:	91 39       	st.w	r8[0xc],r9
  pdca_channel->tcrr = opt->r_size;
80027b82:	ee f8 ff f0 	ld.w	r8,r7[-16]
80027b86:	70 39       	ld.w	r9,r8[0xc]
80027b88:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027b8c:	91 49       	st.w	r8[0x10],r9
  pdca_channel->mr =
#if (AVR32_PDCA_H_VERSION >= 120)
opt->etrig << AVR32_PDCA_ETRIG_OFFSET |
80027b8e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80027b92:	f1 38 00 18 	ld.ub	r8,r8[24]
80027b96:	a3 68       	lsl	r8,0x2
  pdca_channel->mar = (unsigned long)opt->addr;
  pdca_channel->tcr = opt->size;
  pdca_channel->psr = opt->pid;
  pdca_channel->marr = (unsigned long)opt->r_addr;
  pdca_channel->tcrr = opt->r_size;
  pdca_channel->mr =
80027b98:	10 99       	mov	r9,r8
80027b9a:	ee f8 ff f0 	ld.w	r8,r7[-16]
80027b9e:	70 58       	ld.w	r8,r8[0x14]
#if (AVR32_PDCA_H_VERSION >= 120)
opt->etrig << AVR32_PDCA_ETRIG_OFFSET |
80027ba0:	10 49       	or	r9,r8
  pdca_channel->mar = (unsigned long)opt->addr;
  pdca_channel->tcr = opt->size;
  pdca_channel->psr = opt->pid;
  pdca_channel->marr = (unsigned long)opt->r_addr;
  pdca_channel->tcrr = opt->r_size;
  pdca_channel->mr =
80027ba2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027ba6:	91 69       	st.w	r8[0x18],r9
#if (AVR32_PDCA_H_VERSION >= 120)
opt->etrig << AVR32_PDCA_ETRIG_OFFSET |
#endif
                     opt->transfer_size << AVR32_PDCA_SIZE_OFFSET;
  pdca_channel->cr = AVR32_PDCA_ECLR_MASK;
80027ba8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027bac:	e0 69 01 00 	mov	r9,256
80027bb0:	91 59       	st.w	r8[0x14],r9
  pdca_channel->isr;
80027bb2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027bb6:	70 b8       	ld.w	r8,r8[0x2c]
  if (global_interrupt_enabled) cpu_irq_enable();
80027bb8:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80027bbc:	30 08       	mov	r8,0
80027bbe:	f0 09 18 00 	cp.b	r9,r8
80027bc2:	c0 20       	breq	80027bc6 <pdca_init_channel+0xc6>
80027bc4:	d5 03       	csrf	0x10

  return PDCA_SUCCESS;
80027bc6:	30 08       	mov	r8,0
}
80027bc8:	10 9c       	mov	r12,r8
80027bca:	2f cd       	sub	sp,-16
80027bcc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80027bd0:	80 02       	ld.sh	r2,r0[0x0]
80027bd2:	79 8e       	ld.w	lr,r12[0x60]

80027bd4 <pdca_get_channel_status>:


unsigned int pdca_get_channel_status(unsigned int pdca_ch_number)
{
80027bd4:	eb cd 40 c0 	pushm	r6-r7,lr
80027bd8:	1a 97       	mov	r7,sp
80027bda:	20 2d       	sub	sp,8
80027bdc:	48 a6       	lddpc	r6,80027c04 <pdca_get_channel_status+0x30>
80027bde:	1e 26       	rsub	r6,pc
80027be0:	ef 4c ff f8 	st.w	r7[-8],r12
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);
80027be4:	ee fc ff f8 	ld.w	r12,r7[-8]
80027be8:	f0 16 00 25 	mcall	r6[148]
80027bec:	18 98       	mov	r8,r12
80027bee:	ef 48 ff fc 	st.w	r7[-4],r8

  return (pdca_channel->sr & AVR32_PDCA_TEN_MASK) != 0;
80027bf2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027bf6:	70 78       	ld.w	r8,r8[0x1c]
80027bf8:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
}
80027bfc:	10 9c       	mov	r12,r8
80027bfe:	2f ed       	sub	sp,-8
80027c00:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80027c04:	80 02       	ld.sh	r2,r0[0x0]
80027c06:	7a 62       	ld.w	r2,sp[0x18]

80027c08 <pdca_disable>:


void pdca_disable(unsigned int pdca_ch_number)
{
80027c08:	eb cd 40 c0 	pushm	r6-r7,lr
80027c0c:	1a 97       	mov	r7,sp
80027c0e:	20 2d       	sub	sp,8
80027c10:	48 96       	lddpc	r6,80027c34 <pdca_disable+0x2c>
80027c12:	1e 26       	rsub	r6,pc
80027c14:	ef 4c ff f8 	st.w	r7[-8],r12
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);
80027c18:	ee fc ff f8 	ld.w	r12,r7[-8]
80027c1c:	f0 16 00 25 	mcall	r6[148]
80027c20:	18 98       	mov	r8,r12
80027c22:	ef 48 ff fc 	st.w	r7[-4],r8

  // Disable transfer
  pdca_channel->cr = AVR32_PDCA_TDIS_MASK;
80027c26:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027c2a:	30 29       	mov	r9,2
80027c2c:	91 59       	st.w	r8[0x14],r9

}
80027c2e:	2f ed       	sub	sp,-8
80027c30:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80027c34:	80 02       	ld.sh	r2,r0[0x0]
80027c36:	7a 96       	ld.w	r6,sp[0x24]

80027c38 <pdca_enable>:


void pdca_enable(unsigned int pdca_ch_number)
{
80027c38:	eb cd 40 c0 	pushm	r6-r7,lr
80027c3c:	1a 97       	mov	r7,sp
80027c3e:	20 2d       	sub	sp,8
80027c40:	48 96       	lddpc	r6,80027c64 <pdca_enable+0x2c>
80027c42:	1e 26       	rsub	r6,pc
80027c44:	ef 4c ff f8 	st.w	r7[-8],r12
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);
80027c48:	ee fc ff f8 	ld.w	r12,r7[-8]
80027c4c:	f0 16 00 25 	mcall	r6[148]
80027c50:	18 98       	mov	r8,r12
80027c52:	ef 48 ff fc 	st.w	r7[-4],r8

  // Enable transfer
  pdca_channel->cr = AVR32_PDCA_TEN_MASK;
80027c56:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027c5a:	30 19       	mov	r9,1
80027c5c:	91 59       	st.w	r8[0x14],r9
}
80027c5e:	2f ed       	sub	sp,-8
80027c60:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80027c64:	80 02       	ld.sh	r2,r0[0x0]
80027c66:	7a c6       	ld.w	r6,sp[0x30]

80027c68 <pdca_get_load_size>:


unsigned int pdca_get_load_size(unsigned int pdca_ch_number)
{
80027c68:	eb cd 40 c0 	pushm	r6-r7,lr
80027c6c:	1a 97       	mov	r7,sp
80027c6e:	20 2d       	sub	sp,8
80027c70:	48 96       	lddpc	r6,80027c94 <pdca_get_load_size+0x2c>
80027c72:	1e 26       	rsub	r6,pc
80027c74:	ef 4c ff f8 	st.w	r7[-8],r12
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);
80027c78:	ee fc ff f8 	ld.w	r12,r7[-8]
80027c7c:	f0 16 00 25 	mcall	r6[148]
80027c80:	18 98       	mov	r8,r12
80027c82:	ef 48 ff fc 	st.w	r7[-4],r8

  return pdca_channel->tcr;
80027c86:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027c8a:	70 28       	ld.w	r8,r8[0x8]
}
80027c8c:	10 9c       	mov	r12,r8
80027c8e:	2f ed       	sub	sp,-8
80027c90:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80027c94:	80 02       	ld.sh	r2,r0[0x0]
80027c96:	7a f6       	ld.w	r6,sp[0x3c]

80027c98 <pdca_load_channel>:


void pdca_load_channel(unsigned int pdca_ch_number, volatile void *addr, unsigned int size)
{
80027c98:	eb cd 40 c0 	pushm	r6-r7,lr
80027c9c:	1a 97       	mov	r7,sp
80027c9e:	20 5d       	sub	sp,20
80027ca0:	49 d6       	lddpc	r6,80027d14 <pdca_load_channel+0x7c>
80027ca2:	1e 26       	rsub	r6,pc
80027ca4:	ef 4c ff f4 	st.w	r7[-12],r12
80027ca8:	ef 4b ff f0 	st.w	r7[-16],r11
80027cac:	ef 4a ff ec 	st.w	r7[-20],r10
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);
80027cb0:	ee fc ff f4 	ld.w	r12,r7[-12]
80027cb4:	f0 16 00 25 	mcall	r6[148]
80027cb8:	18 98       	mov	r8,r12
80027cba:	ef 48 ff f8 	st.w	r7[-8],r8

  bool global_interrupt_enabled = cpu_irq_is_enabled();
80027cbe:	e1 b8 00 00 	mfsr	r8,0x0
80027cc2:	10 9c       	mov	r12,r8
80027cc4:	cf 4e       	rcall	80027aac <cpu_irq_is_enabled_flags>
80027cc6:	18 98       	mov	r8,r12
80027cc8:	ef 68 ff ff 	st.b	r7[-1],r8

  if (global_interrupt_enabled) cpu_irq_disable();
80027ccc:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80027cd0:	30 08       	mov	r8,0
80027cd2:	f0 09 18 00 	cp.b	r9,r8
80027cd6:	c0 20       	breq	80027cda <pdca_load_channel+0x42>
80027cd8:	d3 03       	ssrf	0x10
  pdca_channel->mar = (unsigned long)addr;
80027cda:	ee f9 ff f0 	ld.w	r9,r7[-16]
80027cde:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027ce2:	91 09       	st.w	r8[0x0],r9
  pdca_channel->tcr = size;
80027ce4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027ce8:	ee f9 ff ec 	ld.w	r9,r7[-20]
80027cec:	91 29       	st.w	r8[0x8],r9
  pdca_channel->cr = AVR32_PDCA_ECLR_MASK;
80027cee:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027cf2:	e0 69 01 00 	mov	r9,256
80027cf6:	91 59       	st.w	r8[0x14],r9
  pdca_channel->isr;
80027cf8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027cfc:	70 b8       	ld.w	r8,r8[0x2c]
  if (global_interrupt_enabled) cpu_irq_enable();
80027cfe:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80027d02:	30 08       	mov	r8,0
80027d04:	f0 09 18 00 	cp.b	r9,r8
80027d08:	c0 20       	breq	80027d0c <pdca_load_channel+0x74>
80027d0a:	d5 03       	csrf	0x10
}
80027d0c:	2f bd       	sub	sp,-20
80027d0e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80027d12:	00 00       	add	r0,r0
80027d14:	80 02       	ld.sh	r2,r0[0x0]
80027d16:	7b 26       	ld.w	r6,sp[0x48]

80027d18 <pdca_get_reload_size>:


unsigned int pdca_get_reload_size(unsigned int pdca_ch_number)
{
80027d18:	eb cd 40 c0 	pushm	r6-r7,lr
80027d1c:	1a 97       	mov	r7,sp
80027d1e:	20 2d       	sub	sp,8
80027d20:	48 96       	lddpc	r6,80027d44 <pdca_get_reload_size+0x2c>
80027d22:	1e 26       	rsub	r6,pc
80027d24:	ef 4c ff f8 	st.w	r7[-8],r12
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);
80027d28:	ee fc ff f8 	ld.w	r12,r7[-8]
80027d2c:	f0 16 00 25 	mcall	r6[148]
80027d30:	18 98       	mov	r8,r12
80027d32:	ef 48 ff fc 	st.w	r7[-4],r8

  return pdca_channel->tcrr;
80027d36:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027d3a:	70 48       	ld.w	r8,r8[0x10]
}
80027d3c:	10 9c       	mov	r12,r8
80027d3e:	2f ed       	sub	sp,-8
80027d40:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80027d44:	80 02       	ld.sh	r2,r0[0x0]
80027d46:	7b a6       	ld.w	r6,sp[0x68]

80027d48 <pdca_reload_channel>:


void pdca_reload_channel(unsigned int pdca_ch_number, volatile void *addr, unsigned int size)
{
80027d48:	eb cd 40 c0 	pushm	r6-r7,lr
80027d4c:	1a 97       	mov	r7,sp
80027d4e:	20 5d       	sub	sp,20
80027d50:	49 d6       	lddpc	r6,80027dc4 <pdca_reload_channel+0x7c>
80027d52:	1e 26       	rsub	r6,pc
80027d54:	ef 4c ff f4 	st.w	r7[-12],r12
80027d58:	ef 4b ff f0 	st.w	r7[-16],r11
80027d5c:	ef 4a ff ec 	st.w	r7[-20],r10
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);
80027d60:	ee fc ff f4 	ld.w	r12,r7[-12]
80027d64:	f0 16 00 25 	mcall	r6[148]
80027d68:	18 98       	mov	r8,r12
80027d6a:	ef 48 ff f8 	st.w	r7[-8],r8

  bool global_interrupt_enabled = cpu_irq_is_enabled();
80027d6e:	e1 b8 00 00 	mfsr	r8,0x0
80027d72:	10 9c       	mov	r12,r8
80027d74:	c9 ce       	rcall	80027aac <cpu_irq_is_enabled_flags>
80027d76:	18 98       	mov	r8,r12
80027d78:	ef 68 ff ff 	st.b	r7[-1],r8

  if (global_interrupt_enabled) cpu_irq_disable();
80027d7c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80027d80:	30 08       	mov	r8,0
80027d82:	f0 09 18 00 	cp.b	r9,r8
80027d86:	c0 20       	breq	80027d8a <pdca_reload_channel+0x42>
80027d88:	d3 03       	ssrf	0x10
  // set up next memory address
  pdca_channel->marr = (unsigned long)addr;
80027d8a:	ee f9 ff f0 	ld.w	r9,r7[-16]
80027d8e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027d92:	91 39       	st.w	r8[0xc],r9
  // set up next memory size
  pdca_channel->tcrr = size;
80027d94:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027d98:	ee f9 ff ec 	ld.w	r9,r7[-20]
80027d9c:	91 49       	st.w	r8[0x10],r9
  pdca_channel->cr = AVR32_PDCA_ECLR_MASK;
80027d9e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027da2:	e0 69 01 00 	mov	r9,256
80027da6:	91 59       	st.w	r8[0x14],r9
  pdca_channel->isr;
80027da8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027dac:	70 b8       	ld.w	r8,r8[0x2c]
  if (global_interrupt_enabled) cpu_irq_enable();
80027dae:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80027db2:	30 08       	mov	r8,0
80027db4:	f0 09 18 00 	cp.b	r9,r8
80027db8:	c0 20       	breq	80027dbc <pdca_reload_channel+0x74>
80027dba:	d5 03       	csrf	0x10
}
80027dbc:	2f bd       	sub	sp,-20
80027dbe:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80027dc2:	00 00       	add	r0,r0
80027dc4:	80 02       	ld.sh	r2,r0[0x0]
80027dc6:	7b d6       	ld.w	r6,sp[0x74]

80027dc8 <pdca_set_peripheral_select>:


void pdca_set_peripheral_select(unsigned int pdca_ch_number, unsigned int pid)
{
80027dc8:	eb cd 40 c0 	pushm	r6-r7,lr
80027dcc:	1a 97       	mov	r7,sp
80027dce:	20 3d       	sub	sp,12
80027dd0:	48 b6       	lddpc	r6,80027dfc <pdca_set_peripheral_select+0x34>
80027dd2:	1e 26       	rsub	r6,pc
80027dd4:	ef 4c ff f8 	st.w	r7[-8],r12
80027dd8:	ef 4b ff f4 	st.w	r7[-12],r11
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);
80027ddc:	ee fc ff f8 	ld.w	r12,r7[-8]
80027de0:	f0 16 00 25 	mcall	r6[148]
80027de4:	18 98       	mov	r8,r12
80027de6:	ef 48 ff fc 	st.w	r7[-4],r8

  pdca_channel->psr = pid;
80027dea:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027dee:	ee f9 ff f4 	ld.w	r9,r7[-12]
80027df2:	91 19       	st.w	r8[0x4],r9
}
80027df4:	2f dd       	sub	sp,-12
80027df6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80027dfa:	00 00       	add	r0,r0
80027dfc:	80 02       	ld.sh	r2,r0[0x0]
80027dfe:	7c 56       	ld.w	r6,lr[0x14]

80027e00 <pdca_set_transfer_size>:


void pdca_set_transfer_size(unsigned int pdca_ch_number, unsigned int transfer_size)
{
80027e00:	eb cd 40 c0 	pushm	r6-r7,lr
80027e04:	1a 97       	mov	r7,sp
80027e06:	20 3d       	sub	sp,12
80027e08:	48 e6       	lddpc	r6,80027e40 <pdca_set_transfer_size+0x40>
80027e0a:	1e 26       	rsub	r6,pc
80027e0c:	ef 4c ff f8 	st.w	r7[-8],r12
80027e10:	ef 4b ff f4 	st.w	r7[-12],r11
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);
80027e14:	ee fc ff f8 	ld.w	r12,r7[-8]
80027e18:	f0 16 00 25 	mcall	r6[148]
80027e1c:	18 98       	mov	r8,r12
80027e1e:	ef 48 ff fc 	st.w	r7[-4],r8

  pdca_channel->mr = (pdca_channel->mr & ~AVR32_PDCA_SIZE_MASK) |
80027e22:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027e26:	70 68       	ld.w	r8,r8[0x18]
80027e28:	10 99       	mov	r9,r8
80027e2a:	e0 19 ff fc 	andl	r9,0xfffc
80027e2e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80027e32:	10 49       	or	r9,r8
80027e34:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027e38:	91 69       	st.w	r8[0x18],r9
                     transfer_size << AVR32_PDCA_SIZE_OFFSET;
}
80027e3a:	2f dd       	sub	sp,-12
80027e3c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80027e40:	80 02       	ld.sh	r2,r0[0x0]
80027e42:	7c 8e       	ld.w	lr,lr[0x20]

80027e44 <pdca_disable_event_trigger>:

#if (AVR32_PDCA_H_VERSION >= 120)


void pdca_disable_event_trigger(unsigned int pdca_ch_number)
{
80027e44:	eb cd 40 c0 	pushm	r6-r7,lr
80027e48:	1a 97       	mov	r7,sp
80027e4a:	20 2d       	sub	sp,8
80027e4c:	48 b6       	lddpc	r6,80027e78 <pdca_disable_event_trigger+0x34>
80027e4e:	1e 26       	rsub	r6,pc
80027e50:	ef 4c ff f8 	st.w	r7[-8],r12
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);
80027e54:	ee fc ff f8 	ld.w	r12,r7[-8]
80027e58:	f0 16 00 25 	mcall	r6[148]
80027e5c:	18 98       	mov	r8,r12
80027e5e:	ef 48 ff fc 	st.w	r7[-4],r8

  pdca_channel->mr &= ~AVR32_PDCA_ETRIG_MASK;
80027e62:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027e66:	70 68       	ld.w	r8,r8[0x18]
80027e68:	10 99       	mov	r9,r8
80027e6a:	a3 c9       	cbr	r9,0x2
80027e6c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027e70:	91 69       	st.w	r8[0x18],r9
}
80027e72:	2f ed       	sub	sp,-8
80027e74:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80027e78:	80 02       	ld.sh	r2,r0[0x0]
80027e7a:	7c d2       	ld.w	r2,lr[0x34]

80027e7c <pdca_enable_event_trigger>:


void pdca_enable_event_trigger(unsigned int pdca_ch_number)
{
80027e7c:	eb cd 40 c0 	pushm	r6-r7,lr
80027e80:	1a 97       	mov	r7,sp
80027e82:	20 2d       	sub	sp,8
80027e84:	48 b6       	lddpc	r6,80027eb0 <pdca_enable_event_trigger+0x34>
80027e86:	1e 26       	rsub	r6,pc
80027e88:	ef 4c ff f8 	st.w	r7[-8],r12
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);
80027e8c:	ee fc ff f8 	ld.w	r12,r7[-8]
80027e90:	f0 16 00 25 	mcall	r6[148]
80027e94:	18 98       	mov	r8,r12
80027e96:	ef 48 ff fc 	st.w	r7[-4],r8

  pdca_channel->mr |= AVR32_PDCA_ETRIG_MASK;
80027e9a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027e9e:	70 68       	ld.w	r8,r8[0x18]
80027ea0:	10 99       	mov	r9,r8
80027ea2:	a3 a9       	sbr	r9,0x2
80027ea4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027ea8:	91 69       	st.w	r8[0x18],r9
}
80027eaa:	2f ed       	sub	sp,-8
80027eac:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80027eb0:	80 02       	ld.sh	r2,r0[0x0]
80027eb2:	7d 0a       	ld.w	r10,lr[0x40]

80027eb4 <pdca_disable_interrupt_transfer_error>:

#endif


void pdca_disable_interrupt_transfer_error(unsigned int pdca_ch_number)
{
80027eb4:	eb cd 40 c0 	pushm	r6-r7,lr
80027eb8:	1a 97       	mov	r7,sp
80027eba:	20 3d       	sub	sp,12
80027ebc:	49 66       	lddpc	r6,80027f14 <pdca_disable_interrupt_transfer_error+0x60>
80027ebe:	1e 26       	rsub	r6,pc
80027ec0:	ef 4c ff f4 	st.w	r7[-12],r12
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);
80027ec4:	ee fc ff f4 	ld.w	r12,r7[-12]
80027ec8:	f0 16 00 25 	mcall	r6[148]
80027ecc:	18 98       	mov	r8,r12
80027ece:	ef 48 ff f8 	st.w	r7[-8],r8

  bool global_interrupt_enabled = cpu_irq_is_enabled();
80027ed2:	e1 b8 00 00 	mfsr	r8,0x0
80027ed6:	10 9c       	mov	r12,r8
80027ed8:	fe b0 fd ea 	rcall	80027aac <cpu_irq_is_enabled_flags>
80027edc:	18 98       	mov	r8,r12
80027ede:	ef 68 ff ff 	st.b	r7[-1],r8

  if (global_interrupt_enabled) cpu_irq_disable();
80027ee2:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80027ee6:	30 08       	mov	r8,0
80027ee8:	f0 09 18 00 	cp.b	r9,r8
80027eec:	c0 20       	breq	80027ef0 <pdca_disable_interrupt_transfer_error+0x3c>
80027eee:	d3 03       	ssrf	0x10
  pdca_channel->idr = AVR32_PDCA_TERR_MASK;
80027ef0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027ef4:	30 49       	mov	r9,4
80027ef6:	91 99       	st.w	r8[0x24],r9
  pdca_channel->isr;
80027ef8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027efc:	70 b8       	ld.w	r8,r8[0x2c]
  if (global_interrupt_enabled) cpu_irq_enable();
80027efe:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80027f02:	30 08       	mov	r8,0
80027f04:	f0 09 18 00 	cp.b	r9,r8
80027f08:	c0 20       	breq	80027f0c <pdca_disable_interrupt_transfer_error+0x58>
80027f0a:	d5 03       	csrf	0x10
}
80027f0c:	2f dd       	sub	sp,-12
80027f0e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80027f12:	00 00       	add	r0,r0
80027f14:	80 02       	ld.sh	r2,r0[0x0]
80027f16:	7d 42       	ld.w	r2,lr[0x50]

80027f18 <pdca_enable_interrupt_transfer_error>:


void pdca_enable_interrupt_transfer_error(unsigned int pdca_ch_number)
{
80027f18:	eb cd 40 c0 	pushm	r6-r7,lr
80027f1c:	1a 97       	mov	r7,sp
80027f1e:	20 2d       	sub	sp,8
80027f20:	48 96       	lddpc	r6,80027f44 <pdca_enable_interrupt_transfer_error+0x2c>
80027f22:	1e 26       	rsub	r6,pc
80027f24:	ef 4c ff f8 	st.w	r7[-8],r12
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);
80027f28:	ee fc ff f8 	ld.w	r12,r7[-8]
80027f2c:	f0 16 00 25 	mcall	r6[148]
80027f30:	18 98       	mov	r8,r12
80027f32:	ef 48 ff fc 	st.w	r7[-4],r8

  pdca_channel->ier = AVR32_PDCA_TERR_MASK;
80027f36:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027f3a:	30 49       	mov	r9,4
80027f3c:	91 89       	st.w	r8[0x20],r9
}
80027f3e:	2f ed       	sub	sp,-8
80027f40:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80027f44:	80 02       	ld.sh	r2,r0[0x0]
80027f46:	7d a6       	ld.w	r6,lr[0x68]

80027f48 <pdca_disable_interrupt_transfer_complete>:


void pdca_disable_interrupt_transfer_complete(unsigned int pdca_ch_number)
{
80027f48:	eb cd 40 c0 	pushm	r6-r7,lr
80027f4c:	1a 97       	mov	r7,sp
80027f4e:	20 3d       	sub	sp,12
80027f50:	49 66       	lddpc	r6,80027fa8 <pdca_disable_interrupt_transfer_complete+0x60>
80027f52:	1e 26       	rsub	r6,pc
80027f54:	ef 4c ff f4 	st.w	r7[-12],r12
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);
80027f58:	ee fc ff f4 	ld.w	r12,r7[-12]
80027f5c:	f0 16 00 25 	mcall	r6[148]
80027f60:	18 98       	mov	r8,r12
80027f62:	ef 48 ff f8 	st.w	r7[-8],r8

  bool global_interrupt_enabled = cpu_irq_is_enabled();
80027f66:	e1 b8 00 00 	mfsr	r8,0x0
80027f6a:	10 9c       	mov	r12,r8
80027f6c:	fe b0 fd a0 	rcall	80027aac <cpu_irq_is_enabled_flags>
80027f70:	18 98       	mov	r8,r12
80027f72:	ef 68 ff ff 	st.b	r7[-1],r8

  if (global_interrupt_enabled) cpu_irq_disable();
80027f76:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80027f7a:	30 08       	mov	r8,0
80027f7c:	f0 09 18 00 	cp.b	r9,r8
80027f80:	c0 20       	breq	80027f84 <pdca_disable_interrupt_transfer_complete+0x3c>
80027f82:	d3 03       	ssrf	0x10
  pdca_channel->idr = AVR32_PDCA_TRC_MASK;
80027f84:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027f88:	30 29       	mov	r9,2
80027f8a:	91 99       	st.w	r8[0x24],r9
  pdca_channel->isr;
80027f8c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027f90:	70 b8       	ld.w	r8,r8[0x2c]
  if (global_interrupt_enabled) cpu_irq_enable();
80027f92:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80027f96:	30 08       	mov	r8,0
80027f98:	f0 09 18 00 	cp.b	r9,r8
80027f9c:	c0 20       	breq	80027fa0 <pdca_disable_interrupt_transfer_complete+0x58>
80027f9e:	d5 03       	csrf	0x10
}
80027fa0:	2f dd       	sub	sp,-12
80027fa2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80027fa6:	00 00       	add	r0,r0
80027fa8:	80 02       	ld.sh	r2,r0[0x0]
80027faa:	7d d6       	ld.w	r6,lr[0x74]

80027fac <pdca_enable_interrupt_transfer_complete>:


void pdca_enable_interrupt_transfer_complete(unsigned int pdca_ch_number)
{
80027fac:	eb cd 40 c0 	pushm	r6-r7,lr
80027fb0:	1a 97       	mov	r7,sp
80027fb2:	20 2d       	sub	sp,8
80027fb4:	48 96       	lddpc	r6,80027fd8 <pdca_enable_interrupt_transfer_complete+0x2c>
80027fb6:	1e 26       	rsub	r6,pc
80027fb8:	ef 4c ff f8 	st.w	r7[-8],r12
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);
80027fbc:	ee fc ff f8 	ld.w	r12,r7[-8]
80027fc0:	f0 16 00 25 	mcall	r6[148]
80027fc4:	18 98       	mov	r8,r12
80027fc6:	ef 48 ff fc 	st.w	r7[-4],r8

  pdca_channel->ier = AVR32_PDCA_TRC_MASK;
80027fca:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027fce:	30 29       	mov	r9,2
80027fd0:	91 89       	st.w	r8[0x20],r9
}
80027fd2:	2f ed       	sub	sp,-8
80027fd4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80027fd8:	80 02       	ld.sh	r2,r0[0x0]
80027fda:	7e 3a       	ld.w	r10,pc[0xc]

80027fdc <pdca_disable_interrupt_reload_counter_zero>:


void pdca_disable_interrupt_reload_counter_zero(unsigned int pdca_ch_number)
{
80027fdc:	eb cd 40 c0 	pushm	r6-r7,lr
80027fe0:	1a 97       	mov	r7,sp
80027fe2:	20 3d       	sub	sp,12
80027fe4:	49 66       	lddpc	r6,8002803c <pdca_disable_interrupt_reload_counter_zero+0x60>
80027fe6:	1e 26       	rsub	r6,pc
80027fe8:	ef 4c ff f4 	st.w	r7[-12],r12
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);
80027fec:	ee fc ff f4 	ld.w	r12,r7[-12]
80027ff0:	f0 16 00 25 	mcall	r6[148]
80027ff4:	18 98       	mov	r8,r12
80027ff6:	ef 48 ff f8 	st.w	r7[-8],r8

  bool global_interrupt_enabled = cpu_irq_is_enabled();
80027ffa:	e1 b8 00 00 	mfsr	r8,0x0
80027ffe:	10 9c       	mov	r12,r8
80028000:	fe b0 fd 56 	rcall	80027aac <cpu_irq_is_enabled_flags>
80028004:	18 98       	mov	r8,r12
80028006:	ef 68 ff ff 	st.b	r7[-1],r8

  if (global_interrupt_enabled) cpu_irq_disable();
8002800a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8002800e:	30 08       	mov	r8,0
80028010:	f0 09 18 00 	cp.b	r9,r8
80028014:	c0 20       	breq	80028018 <pdca_disable_interrupt_reload_counter_zero+0x3c>
80028016:	d3 03       	ssrf	0x10
  pdca_channel->idr = AVR32_PDCA_RCZ_MASK;
80028018:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002801c:	30 19       	mov	r9,1
8002801e:	91 99       	st.w	r8[0x24],r9
  pdca_channel->isr;
80028020:	ee f8 ff f8 	ld.w	r8,r7[-8]
80028024:	70 b8       	ld.w	r8,r8[0x2c]
  if (global_interrupt_enabled) cpu_irq_enable();
80028026:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8002802a:	30 08       	mov	r8,0
8002802c:	f0 09 18 00 	cp.b	r9,r8
80028030:	c0 20       	breq	80028034 <pdca_disable_interrupt_reload_counter_zero+0x58>
80028032:	d5 03       	csrf	0x10
}
80028034:	2f dd       	sub	sp,-12
80028036:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002803a:	00 00       	add	r0,r0
8002803c:	80 02       	ld.sh	r2,r0[0x0]
8002803e:	7e 6a       	ld.w	r10,pc[0x18]

80028040 <pdca_enable_interrupt_reload_counter_zero>:


void pdca_enable_interrupt_reload_counter_zero(unsigned int pdca_ch_number)
{
80028040:	eb cd 40 c0 	pushm	r6-r7,lr
80028044:	1a 97       	mov	r7,sp
80028046:	20 2d       	sub	sp,8
80028048:	48 96       	lddpc	r6,8002806c <pdca_enable_interrupt_reload_counter_zero+0x2c>
8002804a:	1e 26       	rsub	r6,pc
8002804c:	ef 4c ff f8 	st.w	r7[-8],r12
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);
80028050:	ee fc ff f8 	ld.w	r12,r7[-8]
80028054:	f0 16 00 25 	mcall	r6[148]
80028058:	18 98       	mov	r8,r12
8002805a:	ef 48 ff fc 	st.w	r7[-4],r8

  pdca_channel->ier = AVR32_PDCA_RCZ_MASK;
8002805e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028062:	30 19       	mov	r9,1
80028064:	91 89       	st.w	r8[0x20],r9
}
80028066:	2f ed       	sub	sp,-8
80028068:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002806c:	80 02       	ld.sh	r2,r0[0x0]
8002806e:	7e ce       	ld.w	lr,pc[0x30]

80028070 <pdca_get_transfer_status>:


unsigned long pdca_get_transfer_status(unsigned int pdca_ch_number)
{
80028070:	eb cd 40 c0 	pushm	r6-r7,lr
80028074:	1a 97       	mov	r7,sp
80028076:	20 2d       	sub	sp,8
80028078:	48 96       	lddpc	r6,8002809c <pdca_get_transfer_status+0x2c>
8002807a:	1e 26       	rsub	r6,pc
8002807c:	ef 4c ff f8 	st.w	r7[-8],r12
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);
80028080:	ee fc ff f8 	ld.w	r12,r7[-8]
80028084:	f0 16 00 25 	mcall	r6[148]
80028088:	18 98       	mov	r8,r12
8002808a:	ef 48 ff fc 	st.w	r7[-4],r8

  return pdca_channel->isr;
8002808e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028092:	70 b8       	ld.w	r8,r8[0x2c]
}
80028094:	10 9c       	mov	r12,r8
80028096:	2f ed       	sub	sp,-8
80028098:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002809c:	80 02       	ld.sh	r2,r0[0x0]
8002809e:	7e fe       	ld.w	lr,pc[0x3c]

800280a0 <pevc_channel_configure>:
// See comment header in pevc.h
bool pevc_channel_configure( volatile avr32_pevc_t *pevc,
                             unsigned short int chan_id,
                             unsigned short int gen_id,
                             const pevc_evs_opt_t *pevs )
{
800280a0:	eb cd 40 80 	pushm	r7,lr
800280a4:	1a 97       	mov	r7,sp
800280a6:	20 4d       	sub	sp,16
800280a8:	ef 4c ff fc 	st.w	r7[-4],r12
800280ac:	14 98       	mov	r8,r10
800280ae:	ef 49 ff f0 	st.w	r7[-16],r9
800280b2:	16 99       	mov	r9,r11
800280b4:	ef 59 ff f8 	st.h	r7[-8],r9
800280b8:	ef 58 ff f4 	st.h	r7[-12],r8
  if( NULL != pevc )
800280bc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800280c0:	58 08       	cp.w	r8,0
800280c2:	c6 90       	breq	80028194 <pevc_channel_configure+0xf4>
  {
    if(( gen_id < PEVC_NUMBER_OF_EVENT_GENERATORS )
800280c4:	ef 09 ff f4 	ld.sh	r9,r7[-12]
800280c8:	32 18       	mov	r8,33
800280ca:	f0 09 19 00 	cp.h	r9,r8
800280ce:	e0 8b 00 61 	brhi	80028190 <pevc_channel_configure+0xf0>
800280d2:	ef 09 ff f8 	ld.sh	r9,r7[-8]
800280d6:	31 58       	mov	r8,21
800280d8:	f0 09 19 00 	cp.h	r9,r8
800280dc:	e0 8b 00 5a 	brhi	80028190 <pevc_channel_configure+0xf0>
    && ( chan_id < PEVC_NUMBER_OF_EVENT_USERS ))
    {
      // Connect the generator gen_id to the channel.
      pevc->CHMX[chan_id].evmx = gen_id;
800280e0:	ef 1a ff f8 	ld.uh	r10,r7[-8]
800280e4:	ef 08 ff f4 	ld.sh	r8,r7[-12]
800280e8:	5c 58       	castu.b	r8
800280ea:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
800280ee:	f7 d8 c0 08 	bfextu	r11,r8,0x0,0x8
800280f2:	ee f9 ff fc 	ld.w	r9,r7[-4]
800280f6:	2c 0a       	sub	r10,-64
800280f8:	f2 0a 03 28 	ld.w	r8,r9[r10<<0x2]
800280fc:	f1 db d0 06 	bfins	r8,r11,0x0,0x6
80028100:	f2 0a 09 28 	st.w	r9[r10<<0x2],r8

      // Configure the event shaper for the channel.
      if( NULL != pevs )
80028104:	ee f8 ff f0 	ld.w	r8,r7[-16]
80028108:	58 08       	cp.w	r8,0
8002810a:	c4 10       	breq	8002818c <pevc_channel_configure+0xec>
      {
        pevc->igfdr = pevs->igfdr;  // Only one divider for all EVS channels.
8002810c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80028110:	11 88       	ld.ub	r8,r8[0x0]
80028112:	10 99       	mov	r9,r8
80028114:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028118:	91 29       	st.w	r8[0x8],r9
        pevc->EVS[gen_id].igf = pevs->igf;
8002811a:	ef 1a ff f4 	ld.uh	r10,r7[-12]
8002811e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80028122:	70 18       	ld.w	r8,r8[0x4]
80028124:	5c 58       	castu.b	r8
80028126:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002812a:	f7 d8 c0 08 	bfextu	r11,r8,0x0,0x8
8002812e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80028132:	28 0a       	sub	r10,-128
80028134:	f2 0a 03 28 	ld.w	r8,r9[r10<<0x2]
80028138:	f1 db d0 41 	bfins	r8,r11,0x2,0x1
8002813c:	f2 0a 09 28 	st.w	r9[r10<<0x2],r8
        pevc->EVS[gen_id].evf = pevs->evf;
80028140:	ef 1a ff f4 	ld.uh	r10,r7[-12]
80028144:	ee f8 ff f0 	ld.w	r8,r7[-16]
80028148:	70 28       	ld.w	r8,r8[0x8]
8002814a:	5c 58       	castu.b	r8
8002814c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80028150:	f7 d8 c0 08 	bfextu	r11,r8,0x0,0x8
80028154:	ee f9 ff fc 	ld.w	r9,r7[-4]
80028158:	28 0a       	sub	r10,-128
8002815a:	f2 0a 03 28 	ld.w	r8,r9[r10<<0x2]
8002815e:	f1 db d0 21 	bfins	r8,r11,0x1,0x1
80028162:	f2 0a 09 28 	st.w	r9[r10<<0x2],r8
        pevc->EVS[gen_id].evr = pevs->evr;
80028166:	ef 1a ff f4 	ld.uh	r10,r7[-12]
8002816a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002816e:	70 38       	ld.w	r8,r8[0xc]
80028170:	5c 58       	castu.b	r8
80028172:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80028176:	f7 d8 c0 08 	bfextu	r11,r8,0x0,0x8
8002817a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002817e:	28 0a       	sub	r10,-128
80028180:	f2 0a 03 28 	ld.w	r8,r9[r10<<0x2]
80028184:	f1 db d0 01 	bfins	r8,r11,0x0,0x1
80028188:	f2 0a 09 28 	st.w	r9[r10<<0x2],r8
      }
      return( PASS );
8002818c:	30 08       	mov	r8,0
8002818e:	c0 48       	rjmp	80028196 <pevc_channel_configure+0xf6>
    }
    else return( FAIL );
80028190:	30 18       	mov	r8,1
80028192:	c0 28       	rjmp	80028196 <pevc_channel_configure+0xf6>
  }
  else
    return( FAIL );
80028194:	30 18       	mov	r8,1
}
80028196:	10 9c       	mov	r12,r8
80028198:	2f cd       	sub	sp,-16
8002819a:	e3 cd 80 80 	ldm	sp++,r7,pc

8002819e <pevc_igfd_set>:


// See comment header in pevc.h
void pevc_igfd_set( volatile avr32_pevc_t *pevc, unsigned char igfd )
{
8002819e:	eb cd 40 80 	pushm	r7,lr
800281a2:	1a 97       	mov	r7,sp
800281a4:	20 2d       	sub	sp,8
800281a6:	ef 4c ff fc 	st.w	r7[-4],r12
800281aa:	16 98       	mov	r8,r11
800281ac:	ef 68 ff f8 	st.b	r7[-8],r8
  Assert( NULL != pevc );
  PEVC_IGFD_SET(pevc, igfd);
800281b0:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800281b4:	f3 d8 c0 04 	bfextu	r9,r8,0x0,0x4
800281b8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800281bc:	91 29       	st.w	r8[0x8],r9
}
800281be:	2f ed       	sub	sp,-8
800281c0:	e3 cd 80 80 	ldm	sp++,r7,pc

800281c4 <pevc_channels_enable>:
/**                                                                          **/
/******************************************************************************/

// See comment header in pevc.h
void pevc_channels_enable( volatile avr32_pevc_t *pevc, unsigned long long int chan_mask )
{
800281c4:	eb cd 40 80 	pushm	r7,lr
800281c8:	1a 97       	mov	r7,sp
800281ca:	20 3d       	sub	sp,12
800281cc:	ef 4c ff fc 	st.w	r7[-4],r12
800281d0:	ee eb ff f4 	st.d	r7[-12],r10
  Assert( NULL != pevc );
  PEVC_CHANNELS_ENABLE(pevc, chan_mask);
800281d4:	ee e8 ff f4 	ld.d	r8,r7[-12]
800281d8:	fc 1a 80 00 	movh	r10,0x8000
800281dc:	30 0b       	mov	r11,0
800281de:	14 38       	cp.w	r8,r10
800281e0:	f6 09 13 00 	cpc	r9,r11
800281e4:	e0 8b 00 08 	brhi	800281f4 <pevc_channels_enable+0x30>
800281e8:	ee f9 ff f8 	ld.w	r9,r7[-8]
800281ec:	ee f8 ff fc 	ld.w	r8,r7[-4]
800281f0:	91 89       	st.w	r8[0x20],r9
800281f2:	c0 68       	rjmp	800281fe <pevc_channels_enable+0x3a>
800281f4:	ee f9 ff f8 	ld.w	r9,r7[-8]
800281f8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800281fc:	91 99       	st.w	r8[0x24],r9
}
800281fe:	2f dd       	sub	sp,-12
80028200:	e3 cd 80 80 	ldm	sp++,r7,pc

80028204 <pevc_channels_disable>:

// See comment header in pevc.h
void pevc_channels_disable( volatile avr32_pevc_t *pevc, unsigned long long int chan_mask )
{
80028204:	eb cd 40 80 	pushm	r7,lr
80028208:	1a 97       	mov	r7,sp
8002820a:	20 3d       	sub	sp,12
8002820c:	ef 4c ff fc 	st.w	r7[-4],r12
80028210:	ee eb ff f4 	st.d	r7[-12],r10
  Assert( NULL != pevc );
  PEVC_CHANNELS_DISABLE(pevc, chan_mask);
80028214:	ee e8 ff f4 	ld.d	r8,r7[-12]
80028218:	fc 1a 80 00 	movh	r10,0x8000
8002821c:	30 0b       	mov	r11,0
8002821e:	14 38       	cp.w	r8,r10
80028220:	f6 09 13 00 	cpc	r9,r11
80028224:	e0 8b 00 08 	brhi	80028234 <pevc_channels_disable+0x30>
80028228:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002822c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028230:	91 c9       	st.w	r8[0x30],r9
80028232:	c0 68       	rjmp	8002823e <pevc_channels_disable+0x3a>
80028234:	ee f9 ff f8 	ld.w	r9,r7[-8]
80028238:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002823c:	91 d9       	st.w	r8[0x34],r9
}
8002823e:	2f dd       	sub	sp,-12
80028240:	e3 cd 80 80 	ldm	sp++,r7,pc

80028244 <pevc_get_channel_status>:

// See comment header in pevc.h
bool pevc_get_channel_status( volatile avr32_pevc_t *pevc, unsigned short int chan_id )
{
80028244:	eb cd 40 80 	pushm	r7,lr
80028248:	1a 97       	mov	r7,sp
8002824a:	20 2d       	sub	sp,8
8002824c:	ef 4c ff fc 	st.w	r7[-4],r12
80028250:	16 98       	mov	r8,r11
80028252:	ef 58 ff f8 	st.h	r7[-8],r8
  Assert( NULL != pevc );
  Assert( chan_id < PEVC_NUMBER_OF_EVENT_USERS );
  if(chan_id<32)
80028256:	ef 09 ff f8 	ld.sh	r9,r7[-8]
8002825a:	31 f8       	mov	r8,31
8002825c:	f0 09 19 00 	cp.h	r9,r8
80028260:	e0 8b 00 12 	brhi	80028284 <pevc_get_channel_status+0x40>
    return( ((pevc->chsr0) & (1 << chan_id))>>chan_id );
80028264:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028268:	70 49       	ld.w	r9,r8[0x10]
8002826a:	ef 18 ff f8 	ld.uh	r8,r7[-8]
8002826e:	30 1a       	mov	r10,1
80028270:	f4 08 09 48 	lsl	r8,r10,r8
80028274:	10 69       	and	r9,r8
80028276:	ef 18 ff f8 	ld.uh	r8,r7[-8]
8002827a:	f2 08 0a 48 	lsr	r8,r9,r8
8002827e:	5f 18       	srne	r8
80028280:	5c 58       	castu.b	r8
80028282:	c1 28       	rjmp	800282a6 <pevc_get_channel_status+0x62>
  else
    return( ((pevc->chsr1) & (1 << (chan_id-32)))>>(chan_id-32) );
80028284:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028288:	70 59       	ld.w	r9,r8[0x14]
8002828a:	ef 18 ff f8 	ld.uh	r8,r7[-8]
8002828e:	22 08       	sub	r8,32
80028290:	30 1a       	mov	r10,1
80028292:	f4 08 09 48 	lsl	r8,r10,r8
80028296:	10 69       	and	r9,r8
80028298:	ef 18 ff f8 	ld.uh	r8,r7[-8]
8002829c:	22 08       	sub	r8,32
8002829e:	f2 08 0a 48 	lsr	r8,r9,r8
800282a2:	5f 18       	srne	r8
800282a4:	5c 58       	castu.b	r8
}
800282a6:	10 9c       	mov	r12,r8
800282a8:	2f ed       	sub	sp,-8
800282aa:	e3 cd 80 80 	ldm	sp++,r7,pc

800282ae <pevc_get_channel_state>:
/**                                                                          **/
/******************************************************************************/

// See comment header in pevc.h
bool pevc_get_channel_state(volatile avr32_pevc_t *pevc, unsigned short int chan_id)
{
800282ae:	eb cd 40 80 	pushm	r7,lr
800282b2:	1a 97       	mov	r7,sp
800282b4:	20 2d       	sub	sp,8
800282b6:	ef 4c ff fc 	st.w	r7[-4],r12
800282ba:	16 98       	mov	r8,r11
800282bc:	ef 58 ff f8 	st.h	r7[-8],r8
  Assert( NULL != pevc );
  Assert( chan_id < PEVC_NUMBER_OF_EVENT_USERS );
  if(chan_id<32)
800282c0:	ef 09 ff f8 	ld.sh	r9,r7[-8]
800282c4:	31 f8       	mov	r8,31
800282c6:	f0 09 19 00 	cp.h	r9,r8
800282ca:	e0 8b 00 12 	brhi	800282ee <pevc_get_channel_state+0x40>
    return( ((pevc->busy0) & (1 << chan_id))>>chan_id );
800282ce:	ee f8 ff fc 	ld.w	r8,r7[-4]
800282d2:	71 49       	ld.w	r9,r8[0x50]
800282d4:	ef 18 ff f8 	ld.uh	r8,r7[-8]
800282d8:	30 1a       	mov	r10,1
800282da:	f4 08 09 48 	lsl	r8,r10,r8
800282de:	10 69       	and	r9,r8
800282e0:	ef 18 ff f8 	ld.uh	r8,r7[-8]
800282e4:	f2 08 0a 48 	lsr	r8,r9,r8
800282e8:	5f 18       	srne	r8
800282ea:	5c 58       	castu.b	r8
800282ec:	c1 28       	rjmp	80028310 <pevc_get_channel_state+0x62>
  else
    return( ((pevc->busy1) & (1 << (chan_id-32)))>>(chan_id-32) );
800282ee:	ee f8 ff fc 	ld.w	r8,r7[-4]
800282f2:	71 59       	ld.w	r9,r8[0x54]
800282f4:	ef 18 ff f8 	ld.uh	r8,r7[-8]
800282f8:	22 08       	sub	r8,32
800282fa:	30 1a       	mov	r10,1
800282fc:	f4 08 09 48 	lsl	r8,r10,r8
80028300:	10 69       	and	r9,r8
80028302:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80028306:	22 08       	sub	r8,32
80028308:	f2 08 0a 48 	lsr	r8,r9,r8
8002830c:	5f 18       	srne	r8
8002830e:	5c 58       	castu.b	r8
}
80028310:	10 9c       	mov	r12,r8
80028312:	2f ed       	sub	sp,-8
80028314:	e3 cd 80 80 	ldm	sp++,r7,pc

80028318 <pevc_channel_sev_enable>:
/**                                                                          **/
/******************************************************************************/

// See comment header in pevc.h
void pevc_channel_sev_enable( volatile avr32_pevc_t *pevc, unsigned short int chan_id )
{
80028318:	eb cd 40 80 	pushm	r7,lr
8002831c:	1a 97       	mov	r7,sp
8002831e:	20 2d       	sub	sp,8
80028320:	ef 4c ff fc 	st.w	r7[-4],r12
80028324:	16 98       	mov	r8,r11
80028326:	ef 58 ff f8 	st.h	r7[-8],r8
  Assert( NULL != pevc );
  Assert( chan_id < PEVC_NUMBER_OF_EVENT_USERS );
  pevc->CHMX[chan_id].smx = ENABLE;
8002832a:	ef 18 ff f8 	ld.uh	r8,r7[-8]
8002832e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80028332:	f0 ca ff c0 	sub	r10,r8,-64
80028336:	f2 0a 03 28 	ld.w	r8,r9[r10<<0x2]
8002833a:	30 1b       	mov	r11,1
8002833c:	f1 db d1 01 	bfins	r8,r11,0x8,0x1
80028340:	f2 0a 09 28 	st.w	r9[r10<<0x2],r8
}
80028344:	2f ed       	sub	sp,-8
80028346:	e3 cd 80 80 	ldm	sp++,r7,pc

8002834a <pevc_channels_trigger_sev>:

// See comment header in pevc.h
void pevc_channels_trigger_sev(volatile avr32_pevc_t *pevc, unsigned long long int chan_mask)
{
8002834a:	eb cd 40 80 	pushm	r7,lr
8002834e:	1a 97       	mov	r7,sp
80028350:	20 3d       	sub	sp,12
80028352:	ef 4c ff fc 	st.w	r7[-4],r12
80028356:	ee eb ff f4 	st.d	r7[-12],r10
  Assert( NULL != pevc );
  PEVC_CHANNELS_TRIGGER_SEV(pevc, chan_mask);
8002835a:	ee e8 ff f4 	ld.d	r8,r7[-12]
8002835e:	fc 1a 80 00 	movh	r10,0x8000
80028362:	30 0b       	mov	r11,0
80028364:	14 38       	cp.w	r8,r10
80028366:	f6 09 13 00 	cpc	r9,r11
8002836a:	e0 8b 00 09 	brhi	8002837c <pevc_channels_trigger_sev+0x32>
8002836e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80028372:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028376:	f1 49 00 40 	st.w	r8[64],r9
8002837a:	c0 78       	rjmp	80028388 <pevc_channels_trigger_sev+0x3e>
8002837c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80028380:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028384:	f1 49 00 44 	st.w	r8[68],r9
}
80028388:	2f dd       	sub	sp,-12
8002838a:	e3 cd 80 80 	ldm	sp++,r7,pc

8002838e <pevc_channel_sev_disable>:

// See comment header in pevc.h
void pevc_channel_sev_disable( volatile avr32_pevc_t *pevc, unsigned short int chan_id )
{
8002838e:	eb cd 40 80 	pushm	r7,lr
80028392:	1a 97       	mov	r7,sp
80028394:	20 2d       	sub	sp,8
80028396:	ef 4c ff fc 	st.w	r7[-4],r12
8002839a:	16 98       	mov	r8,r11
8002839c:	ef 58 ff f8 	st.h	r7[-8],r8
  Assert( NULL != pevc );
  Assert( chan_id < PEVC_NUMBER_OF_EVENT_USERS );
  pevc->CHMX[chan_id].smx = DISABLE;
800283a0:	ef 18 ff f8 	ld.uh	r8,r7[-8]
800283a4:	ee f9 ff fc 	ld.w	r9,r7[-4]
800283a8:	f0 ca ff c0 	sub	r10,r8,-64
800283ac:	f2 0a 03 28 	ld.w	r8,r9[r10<<0x2]
800283b0:	30 0b       	mov	r11,0
800283b2:	f1 db d1 01 	bfins	r8,r11,0x8,0x1
800283b6:	f2 0a 09 28 	st.w	r9[r10<<0x2],r8
}
800283ba:	2f ed       	sub	sp,-8
800283bc:	e3 cd 80 80 	ldm	sp++,r7,pc

800283c0 <pevc_channels_enable_trigger_interrupt>:
/**                                                                          **/
/******************************************************************************/

// See comment header in pevc.h
void pevc_channels_enable_trigger_interrupt( volatile avr32_pevc_t *pevc, unsigned long long int chan_mask)
{
800283c0:	eb cd 40 80 	pushm	r7,lr
800283c4:	1a 97       	mov	r7,sp
800283c6:	20 3d       	sub	sp,12
800283c8:	ef 4c ff fc 	st.w	r7[-4],r12
800283cc:	ee eb ff f4 	st.d	r7[-12],r10
  Assert( NULL != pevc );
  PEVC_CHANNELS_ENABLE_TRIGGER_INTERRUPT(pevc, chan_mask);
800283d0:	ee e8 ff f4 	ld.d	r8,r7[-12]
800283d4:	fc 1a 80 00 	movh	r10,0x8000
800283d8:	30 0b       	mov	r11,0
800283da:	14 38       	cp.w	r8,r10
800283dc:	f6 09 13 00 	cpc	r9,r11
800283e0:	e0 8b 00 09 	brhi	800283f2 <pevc_channels_enable_trigger_interrupt+0x32>
800283e4:	ee f9 ff f8 	ld.w	r9,r7[-8]
800283e8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800283ec:	f1 49 00 90 	st.w	r8[144],r9
800283f0:	c0 78       	rjmp	800283fe <pevc_channels_enable_trigger_interrupt+0x3e>
800283f2:	ee f9 ff f8 	ld.w	r9,r7[-8]
800283f6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800283fa:	f1 49 00 94 	st.w	r8[148],r9
}
800283fe:	2f dd       	sub	sp,-12
80028400:	e3 cd 80 80 	ldm	sp++,r7,pc

80028404 <pevc_channels_disable_trigger_interrupt>:

// See comment header in pevc.h
void pevc_channels_disable_trigger_interrupt( volatile avr32_pevc_t *pevc, unsigned long long int chan_mask)
{
80028404:	eb cd 40 80 	pushm	r7,lr
80028408:	1a 97       	mov	r7,sp
8002840a:	20 3d       	sub	sp,12
8002840c:	ef 4c ff fc 	st.w	r7[-4],r12
80028410:	ee eb ff f4 	st.d	r7[-12],r10
  Assert( NULL != pevc );
  PEVC_CHANNELS_DISABLE_TRIGGER_INTERRUPT(pevc, chan_mask);
80028414:	ee e8 ff f4 	ld.d	r8,r7[-12]
80028418:	fc 1a 80 00 	movh	r10,0x8000
8002841c:	30 0b       	mov	r11,0
8002841e:	14 38       	cp.w	r8,r10
80028420:	f6 09 13 00 	cpc	r9,r11
80028424:	e0 8b 00 09 	brhi	80028436 <pevc_channels_disable_trigger_interrupt+0x32>
80028428:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002842c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028430:	f1 49 00 a0 	st.w	r8[160],r9
80028434:	c0 78       	rjmp	80028442 <pevc_channels_disable_trigger_interrupt+0x3e>
80028436:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002843a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002843e:	f1 49 00 a4 	st.w	r8[164],r9
}
80028442:	2f dd       	sub	sp,-12
80028444:	e3 cd 80 80 	ldm	sp++,r7,pc

80028448 <pevc_channel_is_trigger_interrupt_enabled>:

// See comment header in pevc.h
bool pevc_channel_is_trigger_interrupt_enabled( volatile avr32_pevc_t *pevc, unsigned short int chan_id)
{
80028448:	eb cd 40 80 	pushm	r7,lr
8002844c:	1a 97       	mov	r7,sp
8002844e:	20 2d       	sub	sp,8
80028450:	ef 4c ff fc 	st.w	r7[-4],r12
80028454:	16 98       	mov	r8,r11
80028456:	ef 58 ff f8 	st.h	r7[-8],r8
  Assert( NULL != pevc );
  Assert( chan_id < PEVC_NUMBER_OF_EVENT_USERS );
  if(chan_id<32)
8002845a:	ef 09 ff f8 	ld.sh	r9,r7[-8]
8002845e:	31 f8       	mov	r8,31
80028460:	f0 09 19 00 	cp.h	r9,r8
80028464:	e0 8b 00 13 	brhi	8002848a <pevc_channel_is_trigger_interrupt_enabled+0x42>
    return( ((pevc->trimr0) & (1 << chan_id))>>chan_id );
80028468:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002846c:	f0 f9 00 80 	ld.w	r9,r8[128]
80028470:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80028474:	30 1a       	mov	r10,1
80028476:	f4 08 09 48 	lsl	r8,r10,r8
8002847a:	10 69       	and	r9,r8
8002847c:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80028480:	f2 08 0a 48 	lsr	r8,r9,r8
80028484:	5f 18       	srne	r8
80028486:	5c 58       	castu.b	r8
80028488:	c1 38       	rjmp	800284ae <pevc_channel_is_trigger_interrupt_enabled+0x66>
  else
    return( ((pevc->trimr1) & (1 << (chan_id-32)))>>(chan_id-32) );
8002848a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002848e:	f0 f9 00 84 	ld.w	r9,r8[132]
80028492:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80028496:	22 08       	sub	r8,32
80028498:	30 1a       	mov	r10,1
8002849a:	f4 08 09 48 	lsl	r8,r10,r8
8002849e:	10 69       	and	r9,r8
800284a0:	ef 18 ff f8 	ld.uh	r8,r7[-8]
800284a4:	22 08       	sub	r8,32
800284a6:	f2 08 0a 48 	lsr	r8,r9,r8
800284aa:	5f 18       	srne	r8
800284ac:	5c 58       	castu.b	r8
}
800284ae:	10 9c       	mov	r12,r8
800284b0:	2f ed       	sub	sp,-8
800284b2:	e3 cd 80 80 	ldm	sp++,r7,pc

800284b6 <pevc_channel_is_trigger_interrupt_raised>:

// See comment header in pevc.h
bool pevc_channel_is_trigger_interrupt_raised( volatile avr32_pevc_t *pevc, unsigned short int chan_id)
{
800284b6:	eb cd 40 80 	pushm	r7,lr
800284ba:	1a 97       	mov	r7,sp
800284bc:	20 2d       	sub	sp,8
800284be:	ef 4c ff fc 	st.w	r7[-4],r12
800284c2:	16 98       	mov	r8,r11
800284c4:	ef 58 ff f8 	st.h	r7[-8],r8
  Assert( NULL != pevc );
  Assert( chan_id < PEVC_NUMBER_OF_EVENT_USERS );
  if(chan_id<32)
800284c8:	ef 09 ff f8 	ld.sh	r9,r7[-8]
800284cc:	31 f8       	mov	r8,31
800284ce:	f0 09 19 00 	cp.h	r9,r8
800284d2:	e0 8b 00 12 	brhi	800284f6 <pevc_channel_is_trigger_interrupt_raised+0x40>
    return( ((pevc->trsr0) & (1 << chan_id))>>chan_id );
800284d6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800284da:	71 89       	ld.w	r9,r8[0x60]
800284dc:	ef 18 ff f8 	ld.uh	r8,r7[-8]
800284e0:	30 1a       	mov	r10,1
800284e2:	f4 08 09 48 	lsl	r8,r10,r8
800284e6:	10 69       	and	r9,r8
800284e8:	ef 18 ff f8 	ld.uh	r8,r7[-8]
800284ec:	f2 08 0a 48 	lsr	r8,r9,r8
800284f0:	5f 18       	srne	r8
800284f2:	5c 58       	castu.b	r8
800284f4:	c1 28       	rjmp	80028518 <pevc_channel_is_trigger_interrupt_raised+0x62>
  else
    return( ((pevc->trsr1) & (1 << (chan_id-32)))>>(chan_id-32) );
800284f6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800284fa:	71 99       	ld.w	r9,r8[0x64]
800284fc:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80028500:	22 08       	sub	r8,32
80028502:	30 1a       	mov	r10,1
80028504:	f4 08 09 48 	lsl	r8,r10,r8
80028508:	10 69       	and	r9,r8
8002850a:	ef 18 ff f8 	ld.uh	r8,r7[-8]
8002850e:	22 08       	sub	r8,32
80028510:	f2 08 0a 48 	lsr	r8,r9,r8
80028514:	5f 18       	srne	r8
80028516:	5c 58       	castu.b	r8
}
80028518:	10 9c       	mov	r12,r8
8002851a:	2f ed       	sub	sp,-8
8002851c:	e3 cd 80 80 	ldm	sp++,r7,pc

80028520 <pevc_channel_clear_trigger_interrupt>:

// See comment header in pevc.h
void pevc_channel_clear_trigger_interrupt( volatile avr32_pevc_t *pevc, unsigned short int chan_id)
{
80028520:	eb cd 40 80 	pushm	r7,lr
80028524:	1a 97       	mov	r7,sp
80028526:	20 2d       	sub	sp,8
80028528:	ef 4c ff fc 	st.w	r7[-4],r12
8002852c:	16 98       	mov	r8,r11
8002852e:	ef 58 ff f8 	st.h	r7[-8],r8
  Assert( NULL != pevc );
  Assert( chan_id < PEVC_NUMBER_OF_EVENT_USERS );
  if(chan_id<32)
80028532:	ef 09 ff f8 	ld.sh	r9,r7[-8]
80028536:	31 f8       	mov	r8,31
80028538:	f0 09 19 00 	cp.h	r9,r8
8002853c:	e0 8b 00 0d 	brhi	80028556 <pevc_channel_clear_trigger_interrupt+0x36>
    pevc->trscr0 = (1 << chan_id);
80028540:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80028544:	30 19       	mov	r9,1
80028546:	f2 08 09 48 	lsl	r8,r9,r8
8002854a:	10 99       	mov	r9,r8
8002854c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028550:	f1 49 00 70 	st.w	r8[112],r9
80028554:	c0 c8       	rjmp	8002856c <pevc_channel_clear_trigger_interrupt+0x4c>
  else
    pevc->trscr1 = (1 << (chan_id-32));
80028556:	ef 18 ff f8 	ld.uh	r8,r7[-8]
8002855a:	22 08       	sub	r8,32
8002855c:	30 19       	mov	r9,1
8002855e:	f2 08 09 48 	lsl	r8,r9,r8
80028562:	10 99       	mov	r9,r8
80028564:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028568:	f1 49 00 74 	st.w	r8[116],r9
}
8002856c:	2f ed       	sub	sp,-8
8002856e:	e3 cd 80 80 	ldm	sp++,r7,pc

80028572 <pevc_channels_enable_overrun_interrupt>:
/**                                                                          **/
/******************************************************************************/

// See comment header in pevc.h
void pevc_channels_enable_overrun_interrupt( volatile avr32_pevc_t *pevc, unsigned long long int chan_mask)
{
80028572:	eb cd 40 80 	pushm	r7,lr
80028576:	1a 97       	mov	r7,sp
80028578:	20 3d       	sub	sp,12
8002857a:	ef 4c ff fc 	st.w	r7[-4],r12
8002857e:	ee eb ff f4 	st.d	r7[-12],r10
  Assert( NULL != pevc );
  PEVC_CHANNELS_ENABLE_OVERRUN_INTERRUPT(pevc, chan_mask);
80028582:	ee e8 ff f4 	ld.d	r8,r7[-12]
80028586:	fc 1a 80 00 	movh	r10,0x8000
8002858a:	30 0b       	mov	r11,0
8002858c:	14 38       	cp.w	r8,r10
8002858e:	f6 09 13 00 	cpc	r9,r11
80028592:	e0 8b 00 09 	brhi	800285a4 <pevc_channels_enable_overrun_interrupt+0x32>
80028596:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002859a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002859e:	f1 49 00 e0 	st.w	r8[224],r9
800285a2:	c0 78       	rjmp	800285b0 <pevc_channels_enable_overrun_interrupt+0x3e>
800285a4:	ee f9 ff f8 	ld.w	r9,r7[-8]
800285a8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800285ac:	f1 49 00 e4 	st.w	r8[228],r9
}
800285b0:	2f dd       	sub	sp,-12
800285b2:	e3 cd 80 80 	ldm	sp++,r7,pc

800285b6 <pevc_channels_disable_overrun_interrupt>:

// See comment header in pevc.h
void pevc_channels_disable_overrun_interrupt( volatile avr32_pevc_t *pevc, unsigned long long int chan_mask)
{
800285b6:	eb cd 40 80 	pushm	r7,lr
800285ba:	1a 97       	mov	r7,sp
800285bc:	20 3d       	sub	sp,12
800285be:	ef 4c ff fc 	st.w	r7[-4],r12
800285c2:	ee eb ff f4 	st.d	r7[-12],r10
  Assert( NULL != pevc );
  PEVC_CHANNELS_DISABLE_OVERRUN_INTERRUPT(pevc, chan_mask);
800285c6:	ee e8 ff f4 	ld.d	r8,r7[-12]
800285ca:	fc 1a 80 00 	movh	r10,0x8000
800285ce:	30 0b       	mov	r11,0
800285d0:	14 38       	cp.w	r8,r10
800285d2:	f6 09 13 00 	cpc	r9,r11
800285d6:	e0 8b 00 09 	brhi	800285e8 <pevc_channels_disable_overrun_interrupt+0x32>
800285da:	ee f9 ff f8 	ld.w	r9,r7[-8]
800285de:	ee f8 ff fc 	ld.w	r8,r7[-4]
800285e2:	f1 49 00 f0 	st.w	r8[240],r9
800285e6:	c0 78       	rjmp	800285f4 <pevc_channels_disable_overrun_interrupt+0x3e>
800285e8:	ee f9 ff f8 	ld.w	r9,r7[-8]
800285ec:	ee f8 ff fc 	ld.w	r8,r7[-4]
800285f0:	f1 49 00 f4 	st.w	r8[244],r9
}
800285f4:	2f dd       	sub	sp,-12
800285f6:	e3 cd 80 80 	ldm	sp++,r7,pc

800285fa <pevc_channel_is_overrun_interrupt_enabled>:

// See comment header in pevc.h
bool pevc_channel_is_overrun_interrupt_enabled( volatile avr32_pevc_t *pevc, unsigned short int chan_id)
{
800285fa:	eb cd 40 80 	pushm	r7,lr
800285fe:	1a 97       	mov	r7,sp
80028600:	20 2d       	sub	sp,8
80028602:	ef 4c ff fc 	st.w	r7[-4],r12
80028606:	16 98       	mov	r8,r11
80028608:	ef 58 ff f8 	st.h	r7[-8],r8
  Assert( NULL != pevc );
  Assert( chan_id < PEVC_NUMBER_OF_EVENT_USERS );
  if(chan_id<32)
8002860c:	ef 09 ff f8 	ld.sh	r9,r7[-8]
80028610:	31 f8       	mov	r8,31
80028612:	f0 09 19 00 	cp.h	r9,r8
80028616:	e0 8b 00 13 	brhi	8002863c <pevc_channel_is_overrun_interrupt_enabled+0x42>
    return( ((pevc->ovimr0) & (1 << chan_id))>>chan_id );
8002861a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002861e:	f0 f9 00 d0 	ld.w	r9,r8[208]
80028622:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80028626:	30 1a       	mov	r10,1
80028628:	f4 08 09 48 	lsl	r8,r10,r8
8002862c:	10 69       	and	r9,r8
8002862e:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80028632:	f2 08 0a 48 	lsr	r8,r9,r8
80028636:	5f 18       	srne	r8
80028638:	5c 58       	castu.b	r8
8002863a:	c1 38       	rjmp	80028660 <pevc_channel_is_overrun_interrupt_enabled+0x66>
  else
    return( ((pevc->ovimr1) & (1 << (chan_id-32)))>>(chan_id-32) );
8002863c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028640:	f0 f9 00 d4 	ld.w	r9,r8[212]
80028644:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80028648:	22 08       	sub	r8,32
8002864a:	30 1a       	mov	r10,1
8002864c:	f4 08 09 48 	lsl	r8,r10,r8
80028650:	10 69       	and	r9,r8
80028652:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80028656:	22 08       	sub	r8,32
80028658:	f2 08 0a 48 	lsr	r8,r9,r8
8002865c:	5f 18       	srne	r8
8002865e:	5c 58       	castu.b	r8
}
80028660:	10 9c       	mov	r12,r8
80028662:	2f ed       	sub	sp,-8
80028664:	e3 cd 80 80 	ldm	sp++,r7,pc

80028668 <pevc_channel_is_overrun_interrupt_raised>:

// See comment header in pevc.h
bool pevc_channel_is_overrun_interrupt_raised( volatile avr32_pevc_t *pevc, unsigned short int chan_id)
{
80028668:	eb cd 40 80 	pushm	r7,lr
8002866c:	1a 97       	mov	r7,sp
8002866e:	20 2d       	sub	sp,8
80028670:	ef 4c ff fc 	st.w	r7[-4],r12
80028674:	16 98       	mov	r8,r11
80028676:	ef 58 ff f8 	st.h	r7[-8],r8
  Assert( NULL != pevc );
  Assert( chan_id < PEVC_NUMBER_OF_EVENT_USERS );
  if(chan_id<32)
8002867a:	ef 09 ff f8 	ld.sh	r9,r7[-8]
8002867e:	31 f8       	mov	r8,31
80028680:	f0 09 19 00 	cp.h	r9,r8
80028684:	e0 8b 00 13 	brhi	800286aa <pevc_channel_is_overrun_interrupt_raised+0x42>
    return( ((pevc->ovsr0) & (1 << chan_id))>>chan_id );
80028688:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002868c:	f0 f9 00 b0 	ld.w	r9,r8[176]
80028690:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80028694:	30 1a       	mov	r10,1
80028696:	f4 08 09 48 	lsl	r8,r10,r8
8002869a:	10 69       	and	r9,r8
8002869c:	ef 18 ff f8 	ld.uh	r8,r7[-8]
800286a0:	f2 08 0a 48 	lsr	r8,r9,r8
800286a4:	5f 18       	srne	r8
800286a6:	5c 58       	castu.b	r8
800286a8:	c1 38       	rjmp	800286ce <pevc_channel_is_overrun_interrupt_raised+0x66>
  else
    return( ((pevc->ovsr1) & (1 << (chan_id-32)))>>(chan_id-32) );
800286aa:	ee f8 ff fc 	ld.w	r8,r7[-4]
800286ae:	f0 f9 00 b4 	ld.w	r9,r8[180]
800286b2:	ef 18 ff f8 	ld.uh	r8,r7[-8]
800286b6:	22 08       	sub	r8,32
800286b8:	30 1a       	mov	r10,1
800286ba:	f4 08 09 48 	lsl	r8,r10,r8
800286be:	10 69       	and	r9,r8
800286c0:	ef 18 ff f8 	ld.uh	r8,r7[-8]
800286c4:	22 08       	sub	r8,32
800286c6:	f2 08 0a 48 	lsr	r8,r9,r8
800286ca:	5f 18       	srne	r8
800286cc:	5c 58       	castu.b	r8
}
800286ce:	10 9c       	mov	r12,r8
800286d0:	2f ed       	sub	sp,-8
800286d2:	e3 cd 80 80 	ldm	sp++,r7,pc

800286d6 <pevc_channel_clear_overrun_interrupt>:

// See comment header in pevc.h
void pevc_channel_clear_overrun_interrupt( volatile avr32_pevc_t *pevc, unsigned short int chan_id)
{
800286d6:	eb cd 40 80 	pushm	r7,lr
800286da:	1a 97       	mov	r7,sp
800286dc:	20 2d       	sub	sp,8
800286de:	ef 4c ff fc 	st.w	r7[-4],r12
800286e2:	16 98       	mov	r8,r11
800286e4:	ef 58 ff f8 	st.h	r7[-8],r8
  Assert( NULL != pevc );
  Assert( chan_id < PEVC_NUMBER_OF_EVENT_USERS );
  if(chan_id<32)
800286e8:	ef 09 ff f8 	ld.sh	r9,r7[-8]
800286ec:	31 f8       	mov	r8,31
800286ee:	f0 09 19 00 	cp.h	r9,r8
800286f2:	e0 8b 00 0d 	brhi	8002870c <pevc_channel_clear_overrun_interrupt+0x36>
    pevc->ovscr0 = (1 << chan_id);
800286f6:	ef 18 ff f8 	ld.uh	r8,r7[-8]
800286fa:	30 19       	mov	r9,1
800286fc:	f2 08 09 48 	lsl	r8,r9,r8
80028700:	10 99       	mov	r9,r8
80028702:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028706:	f1 49 00 c0 	st.w	r8[192],r9
8002870a:	c0 c8       	rjmp	80028722 <pevc_channel_clear_overrun_interrupt+0x4c>
  else
    pevc->ovscr1 = (1 << (chan_id-32));
8002870c:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80028710:	22 08       	sub	r8,32
80028712:	30 19       	mov	r9,1
80028714:	f2 08 09 48 	lsl	r8,r9,r8
80028718:	10 99       	mov	r9,r8
8002871a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002871e:	f1 49 00 c4 	st.w	r8[196],r9
}
80028722:	2f ed       	sub	sp,-8
80028724:	e3 cd 80 80 	ldm	sp++,r7,pc

80028728 <cpu_irq_is_enabled_flags>:

	return flags;
}

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
80028728:	eb cd 40 80 	pushm	r7,lr
8002872c:	1a 97       	mov	r7,sp
8002872e:	20 1d       	sub	sp,4
80028730:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
80028734:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028738:	e6 18 00 01 	andh	r8,0x1,COH
8002873c:	5f 08       	sreq	r8
8002873e:	5c 58       	castu.b	r8
}
80028740:	10 9c       	mov	r12,r8
80028742:	2f fd       	sub	sp,-4
80028744:	e3 cd 80 80 	ldm	sp++,r7,pc

80028748 <scif_pclksr_statushigh_wait>:
 * \return Status.
 *   \retval 0   Status is high.
 *   \retval <0  SCIF_POLL_TIMEOUT Timeout expired before the status was high.
 */
static long int scif_pclksr_statushigh_wait(unsigned long statusMask)
{
80028748:	eb cd 40 80 	pushm	r7,lr
8002874c:	1a 97       	mov	r7,sp
8002874e:	20 2d       	sub	sp,8
80028750:	ef 4c ff f8 	st.w	r7[-8],r12
  unsigned int  timeout = SCIF_POLL_TIMEOUT;
80028754:	e0 78 86 a0 	mov	r8,100000
80028758:	ef 48 ff fc 	st.w	r7[-4],r8
  
  while(!(AVR32_SCIF.pclksr & statusMask))
8002875c:	c0 c8       	rjmp	80028774 <scif_pclksr_statushigh_wait+0x2c>
  {
    if(--timeout == 0)
8002875e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028762:	20 18       	sub	r8,1
80028764:	ef 48 ff fc 	st.w	r7[-4],r8
80028768:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002876c:	58 08       	cp.w	r8,0
8002876e:	c0 31       	brne	80028774 <scif_pclksr_statushigh_wait+0x2c>
      return -1;
80028770:	3f f8       	mov	r8,-1
80028772:	c0 a8       	rjmp	80028786 <scif_pclksr_statushigh_wait+0x3e>
 */
static long int scif_pclksr_statushigh_wait(unsigned long statusMask)
{
  unsigned int  timeout = SCIF_POLL_TIMEOUT;
  
  while(!(AVR32_SCIF.pclksr & statusMask))
80028774:	fe 78 08 00 	mov	r8,-63488
80028778:	70 59       	ld.w	r9,r8[0x14]
8002877a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002877e:	f3 e8 00 08 	and	r8,r9,r8
80028782:	ce e0       	breq	8002875e <scif_pclksr_statushigh_wait+0x16>
  {
    if(--timeout == 0)
      return -1;
  }
  return PASS;
80028784:	30 08       	mov	r8,0
}
80028786:	10 9c       	mov	r12,r8
80028788:	2f ed       	sub	sp,-8
8002878a:	e3 cd 80 80 	ldm	sp++,r7,pc

8002878e <scif_read_gplp>:

unsigned long scif_read_gplp(unsigned long gplp)
{
8002878e:	eb cd 40 80 	pushm	r7,lr
80028792:	1a 97       	mov	r7,sp
80028794:	20 1d       	sub	sp,4
80028796:	ef 4c ff fc 	st.w	r7[-4],r12
  return AVR32_SCIF.gplp[gplp];
8002879a:	fe 78 08 00 	mov	r8,-63488
8002879e:	ee f9 ff fc 	ld.w	r9,r7[-4]
800287a2:	2e 99       	sub	r9,-23
800287a4:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
}
800287a8:	10 9c       	mov	r12,r8
800287aa:	2f fd       	sub	sp,-4
800287ac:	e3 cd 80 80 	ldm	sp++,r7,pc

800287b0 <scif_write_gplp>:


void scif_write_gplp(int gplp, unsigned long value)
{
800287b0:	eb cd 40 80 	pushm	r7,lr
800287b4:	1a 97       	mov	r7,sp
800287b6:	20 2d       	sub	sp,8
800287b8:	ef 4c ff fc 	st.w	r7[-4],r12
800287bc:	ef 4b ff f8 	st.w	r7[-8],r11
  SCIF_UNLOCK(AVR32_SCIF_GPLP + 4*gplp); 
800287c0:	fe 78 08 00 	mov	r8,-63488
800287c4:	ee f9 ff fc 	ld.w	r9,r7[-4]
800287c8:	2e 99       	sub	r9,-23
800287ca:	a3 69       	lsl	r9,0x2
800287cc:	ea 19 aa 00 	orh	r9,0xaa00
800287d0:	91 69       	st.w	r8[0x18],r9
  AVR32_SCIF.gplp[gplp] = value;
800287d2:	fe 78 08 00 	mov	r8,-63488
800287d6:	ee f9 ff fc 	ld.w	r9,r7[-4]
800287da:	2e 99       	sub	r9,-23
800287dc:	ee fa ff f8 	ld.w	r10,r7[-8]
800287e0:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
}
800287e4:	2f ed       	sub	sp,-8
800287e6:	e3 cd 80 80 	ldm	sp++,r7,pc

800287ea <scif_start_osc>:
/**
 ** OSC0/OSC1 Functions
 **/

long int scif_start_osc(scif_osc_t osc, const scif_osc_opt_t *opt, bool wait_for_ready)
{
800287ea:	eb cd 40 c0 	pushm	r6-r7,lr
800287ee:	1a 97       	mov	r7,sp
800287f0:	20 6d       	sub	sp,24
800287f2:	4c c6       	lddpc	r6,80028920 <scif_start_osc+0x136>
800287f4:	1e 26       	rsub	r6,pc
800287f6:	ef 4c ff f0 	st.w	r7[-16],r12
800287fa:	ef 4b ff ec 	st.w	r7[-20],r11
800287fe:	14 98       	mov	r8,r10
80028800:	ef 68 ff e8 	st.b	r7[-24],r8
      return -1;
    }  
  }
#endif  // AVR32SFW_INPUT_CHECK
  // Read Register
  u_avr32_scif_oscctrl.OSCCTRL[osc] = AVR32_SCIF.OSCCTRL[osc] ;
80028804:	ee f8 ff f0 	ld.w	r8,r7[-16]
80028808:	fe 79 08 00 	mov	r9,-63488
8002880c:	ee fa ff f0 	ld.w	r10,r7[-16]
80028810:	a3 68       	lsl	r8,0x2
80028812:	ee 08 00 08 	add	r8,r7,r8
80028816:	2f 7a       	sub	r10,-9
80028818:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
8002881c:	f1 49 ff f4 	st.w	r8[-12],r9
  // Modify: Configure & start OSC0.
  u_avr32_scif_oscctrl.OSCCTRL[osc].mode = opt->mode;
80028820:	ee f9 ff f0 	ld.w	r9,r7[-16]
80028824:	ee f8 ff ec 	ld.w	r8,r7[-20]
80028828:	70 18       	ld.w	r8,r8[0x4]
8002882a:	5c 58       	castu.b	r8
8002882c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80028830:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
80028834:	f2 08 15 02 	lsl	r8,r9,0x2
80028838:	ee 08 00 08 	add	r8,r7,r8
8002883c:	f0 f9 ff f4 	ld.w	r9,r8[-12]
80028840:	f3 da d0 01 	bfins	r9,r10,0x0,0x1
80028844:	f1 49 ff f4 	st.w	r8[-12],r9
  u_avr32_scif_oscctrl.OSCCTRL[osc].gain = opt->gain;
80028848:	ee f9 ff f0 	ld.w	r9,r7[-16]
8002884c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80028850:	f1 38 00 09 	ld.ub	r8,r8[9]
80028854:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
80028858:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
8002885c:	f2 08 15 02 	lsl	r8,r9,0x2
80028860:	ee 08 00 08 	add	r8,r7,r8
80028864:	f0 f9 ff f4 	ld.w	r9,r8[-12]
80028868:	f3 da d0 22 	bfins	r9,r10,0x1,0x2
8002886c:	f1 49 ff f4 	st.w	r8[-12],r9
  u_avr32_scif_oscctrl.OSCCTRL[osc].startup = opt->startup;
80028870:	ee f9 ff f0 	ld.w	r9,r7[-16]
80028874:	ee f8 ff ec 	ld.w	r8,r7[-20]
80028878:	f1 38 00 08 	ld.ub	r8,r8[8]
8002887c:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80028880:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
80028884:	f2 08 15 02 	lsl	r8,r9,0x2
80028888:	ee 08 00 08 	add	r8,r7,r8
8002888c:	f0 f9 ff f4 	ld.w	r9,r8[-12]
80028890:	f3 da d1 04 	bfins	r9,r10,0x8,0x4
80028894:	f1 49 ff f4 	st.w	r8[-12],r9
  u_avr32_scif_oscctrl.OSCCTRL[osc].oscen = ENABLE;
80028898:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002889c:	a3 68       	lsl	r8,0x2
8002889e:	ee 08 00 08 	add	r8,r7,r8
800288a2:	f0 f9 ff f4 	ld.w	r9,r8[-12]
800288a6:	30 1a       	mov	r10,1
800288a8:	f3 da d2 01 	bfins	r9,r10,0x10,0x1
800288ac:	f1 49 ff f4 	st.w	r8[-12],r9
  AVR32_ENTER_CRITICAL_REGION( );
800288b0:	e1 b8 00 00 	mfsr	r8,0x0
800288b4:	10 9c       	mov	r12,r8
800288b6:	c3 9f       	rcall	80028728 <cpu_irq_is_enabled_flags>
800288b8:	18 98       	mov	r8,r12
800288ba:	ef 68 ff ff 	st.b	r7[-1],r8
800288be:	d3 03       	ssrf	0x10
  // Unlock the write-protected OSCCTRL0 register
  SCIF_UNLOCK(AVR32_SCIF_OSCCTRL + 4*osc);    
800288c0:	fe 78 08 00 	mov	r8,-63488
800288c4:	ee f9 ff f0 	ld.w	r9,r7[-16]
800288c8:	2f 79       	sub	r9,-9
800288ca:	a3 69       	lsl	r9,0x2
800288cc:	ea 19 aa 00 	orh	r9,0xaa00
800288d0:	91 69       	st.w	r8[0x18],r9
  // Write Back
  AVR32_SCIF.OSCCTRL[osc] = u_avr32_scif_oscctrl.OSCCTRL[osc];
800288d2:	fe 79 08 00 	mov	r9,-63488
800288d6:	ee fa ff f0 	ld.w	r10,r7[-16]
800288da:	ee f8 ff f0 	ld.w	r8,r7[-16]
800288de:	2f 7a       	sub	r10,-9
800288e0:	a3 68       	lsl	r8,0x2
800288e2:	ee 08 00 08 	add	r8,r7,r8
800288e6:	f0 f8 ff f4 	ld.w	r8,r8[-12]
800288ea:	f2 0a 09 28 	st.w	r9[r10<<0x2],r8
  AVR32_LEAVE_CRITICAL_REGION( );
800288ee:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800288f2:	30 08       	mov	r8,0
800288f4:	f0 09 18 00 	cp.b	r9,r8
800288f8:	c0 20       	breq	800288fc <scif_start_osc+0x112>
800288fa:	d5 03       	csrf	0x10

  if(true == wait_for_ready)
800288fc:	ef 39 ff e8 	ld.ub	r9,r7[-24]
80028900:	30 08       	mov	r8,0
80028902:	f0 09 18 00 	cp.b	r9,r8
80028906:	c0 80       	breq	80028916 <scif_start_osc+0x12c>
  {
    // Wait until OSC0 is stable and ready to be used.
    if(scif_pclksr_statushigh_wait(AVR32_SCIF_PCLKSR_OSC0RDY_MASK))
80028908:	30 1c       	mov	r12,1
8002890a:	c1 ff       	rcall	80028748 <scif_pclksr_statushigh_wait>
8002890c:	18 98       	mov	r8,r12
8002890e:	58 08       	cp.w	r8,0
80028910:	c0 30       	breq	80028916 <scif_start_osc+0x12c>
      return -1;
80028912:	3f f8       	mov	r8,-1
80028914:	c0 28       	rjmp	80028918 <scif_start_osc+0x12e>
  }
  return PASS;
80028916:	30 08       	mov	r8,0
}
80028918:	10 9c       	mov	r12,r8
8002891a:	2f ad       	sub	sp,-24
8002891c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80028920:	80 02       	ld.sh	r2,r0[0x0]
80028922:	86 78       	ld.sh	r8,r3[0xe]

80028924 <scif_is_osc_ready>:


bool scif_is_osc_ready(scif_osc_t osc)
{
80028924:	eb cd 40 80 	pushm	r7,lr
80028928:	1a 97       	mov	r7,sp
8002892a:	20 1d       	sub	sp,4
8002892c:	ef 4c ff fc 	st.w	r7[-4],r12
  if (osc == SCIF_OSC0)
80028930:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028934:	58 08       	cp.w	r8,0
80028936:	c0 81       	brne	80028946 <scif_is_osc_ready+0x22>
  {
    return((AVR32_SCIF.pclksr & AVR32_SCIF_PCLKSR_OSC0RDY_MASK)>>AVR32_SCIF_PCLKSR_OSC0RDY_OFFSET);
80028938:	fe 78 08 00 	mov	r8,-63488
8002893c:	70 58       	ld.w	r8,r8[0x14]
8002893e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80028942:	5c 58       	castu.b	r8
80028944:	c0 98       	rjmp	80028956 <scif_is_osc_ready+0x32>
  }
  else
  {
    return((AVR32_SCIF.pclksr & AVR32_SCIF_PCLKSR_OSC1RDY_MASK)>>AVR32_SCIF_PCLKSR_OSC1RDY_OFFSET);  
80028946:	fe 78 08 00 	mov	r8,-63488
8002894a:	70 58       	ld.w	r8,r8[0x14]
8002894c:	e2 18 00 02 	andl	r8,0x2,COH
80028950:	a1 98       	lsr	r8,0x1
80028952:	5f 18       	srne	r8
80028954:	5c 58       	castu.b	r8
  }
}
80028956:	10 9c       	mov	r12,r8
80028958:	2f fd       	sub	sp,-4
8002895a:	e3 cd 80 80 	ldm	sp++,r7,pc

8002895e <scif_stop_osc>:


long int scif_stop_osc(scif_osc_t osc)
{
8002895e:	eb cd 40 c0 	pushm	r6-r7,lr
80028962:	1a 97       	mov	r7,sp
80028964:	20 3d       	sub	sp,12
80028966:	49 d6       	lddpc	r6,800289d8 <scif_stop_osc+0x7a>
80028968:	1e 26       	rsub	r6,pc
8002896a:	ef 4c ff f4 	st.w	r7[-12],r12

  unsigned long temp;

  temp = AVR32_SCIF.oscctrl[osc];
8002896e:	fe 78 08 00 	mov	r8,-63488
80028972:	ee f9 ff f4 	ld.w	r9,r7[-12]
80028976:	2f 79       	sub	r9,-9
80028978:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8002897c:	ef 48 ff f8 	st.w	r7[-8],r8
  temp &= ~AVR32_SCIF_OSCCTRL_OSCEN_MASK;
80028980:	ee f8 ff f8 	ld.w	r8,r7[-8]
80028984:	b1 c8       	cbr	r8,0x10
80028986:	ef 48 ff f8 	st.w	r7[-8],r8
  AVR32_ENTER_CRITICAL_REGION( );
8002898a:	e1 b8 00 00 	mfsr	r8,0x0
8002898e:	10 9c       	mov	r12,r8
80028990:	cc ce       	rcall	80028728 <cpu_irq_is_enabled_flags>
80028992:	18 98       	mov	r8,r12
80028994:	ef 68 ff ff 	st.b	r7[-1],r8
80028998:	d3 03       	ssrf	0x10
  // Unlock the write-protected OSCCTRL0 register
  SCIF_UNLOCK(AVR32_SCIF_OSCCTRL + 4*osc);
8002899a:	fe 78 08 00 	mov	r8,-63488
8002899e:	ee f9 ff f4 	ld.w	r9,r7[-12]
800289a2:	2f 79       	sub	r9,-9
800289a4:	a3 69       	lsl	r9,0x2
800289a6:	ea 19 aa 00 	orh	r9,0xaa00
800289aa:	91 69       	st.w	r8[0x18],r9
  // Stop OSC0.
  AVR32_SCIF.oscctrl[osc] = temp;
800289ac:	fe 78 08 00 	mov	r8,-63488
800289b0:	ee f9 ff f4 	ld.w	r9,r7[-12]
800289b4:	2f 79       	sub	r9,-9
800289b6:	ee fa ff f8 	ld.w	r10,r7[-8]
800289ba:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
  AVR32_LEAVE_CRITICAL_REGION( );
800289be:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800289c2:	30 08       	mov	r8,0
800289c4:	f0 09 18 00 	cp.b	r9,r8
800289c8:	c0 20       	breq	800289cc <scif_stop_osc+0x6e>
800289ca:	d5 03       	csrf	0x10
      
  return PASS;
800289cc:	30 08       	mov	r8,0
}
800289ce:	10 9c       	mov	r12,r8
800289d0:	2f dd       	sub	sp,-12
800289d2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800289d6:	00 00       	add	r0,r0
800289d8:	80 02       	ld.sh	r2,r0[0x0]
800289da:	87 ec       	st.w	r3[0x38],r12

800289dc <scif_configure_osc_crystalmode>:


long int scif_configure_osc_crystalmode(scif_osc_t osc, unsigned int fcrystal)
{
800289dc:	eb cd 40 c0 	pushm	r6-r7,lr
800289e0:	1a 97       	mov	r7,sp
800289e2:	20 5d       	sub	sp,20
800289e4:	4d 46       	lddpc	r6,80028b34 <scif_configure_osc_crystalmode+0x158>
800289e6:	1e 26       	rsub	r6,pc
800289e8:	ef 4c ff f0 	st.w	r7[-16],r12
800289ec:	ef 4b ff ec 	st.w	r7[-20],r11
  u_avr32_scif_oscctrl_t   u_avr32_scif_oscctrl;
  
  if (osc == SCIF_OSC0)
800289f0:	ee f8 ff f0 	ld.w	r8,r7[-16]
800289f4:	58 08       	cp.w	r8,0
800289f6:	c4 e1       	brne	80028a92 <scif_configure_osc_crystalmode+0xb6>
  {    
    // Read Register
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC0] = AVR32_SCIF.OSCCTRL[SCIF_OSC0] ;    
800289f8:	fe 78 08 00 	mov	r8,-63488
800289fc:	70 98       	ld.w	r8,r8[0x24]
800289fe:	ef 48 ff f4 	st.w	r7[-12],r8
    // Modify : Configure the oscillator mode to crystal and set the gain according to the
    // cyrstal frequency.
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC0].mode = SCIF_OSC_MODE_2PIN_CRYSTAL;
80028a02:	ee f8 ff f4 	ld.w	r8,r7[-12]
80028a06:	30 19       	mov	r9,1
80028a08:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
80028a0c:	ef 48 ff f4 	st.w	r7[-12],r8
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC0].gain = (fcrystal <  900000) ? AVR32_SCIF_OSCCTRL0_GAIN_G0 :
80028a10:	ee f8 ff ec 	ld.w	r8,r7[-20]
80028a14:	ec 58 bb 9f 	cp.w	r8,899999
80028a18:	e0 88 00 1b 	brls	80028a4e <scif_configure_osc_crystalmode+0x72>
80028a1c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80028a20:	e0 69 c6 bf 	mov	r9,50879
80028a24:	ea 19 00 2d 	orh	r9,0x2d
80028a28:	12 38       	cp.w	r8,r9
80028a2a:	e0 88 00 0f 	brls	80028a48 <scif_configure_osc_crystalmode+0x6c>
80028a2e:	ee f8 ff ec 	ld.w	r8,r7[-20]
80028a32:	e0 69 11 ff 	mov	r9,4607
80028a36:	ea 19 00 7a 	orh	r9,0x7a
80028a3a:	12 38       	cp.w	r8,r9
80028a3c:	e0 8b 00 04 	brhi	80028a44 <scif_configure_osc_crystalmode+0x68>
80028a40:	30 28       	mov	r8,2
80028a42:	c0 28       	rjmp	80028a46 <scif_configure_osc_crystalmode+0x6a>
80028a44:	30 38       	mov	r8,3
80028a46:	c0 28       	rjmp	80028a4a <scif_configure_osc_crystalmode+0x6e>
80028a48:	30 18       	mov	r8,1
80028a4a:	10 99       	mov	r9,r8
80028a4c:	c0 28       	rjmp	80028a50 <scif_configure_osc_crystalmode+0x74>
80028a4e:	30 09       	mov	r9,0
80028a50:	ee f8 ff f4 	ld.w	r8,r7[-12]
80028a54:	f1 d9 d0 22 	bfins	r8,r9,0x1,0x2
80028a58:	ef 48 ff f4 	st.w	r7[-12],r8
                                                   (fcrystal < 3000000) ? AVR32_SCIF_OSCCTRL0_GAIN_G1 :
                                                   (fcrystal < 8000000) ? AVR32_SCIF_OSCCTRL0_GAIN_G2 :
                                                                          AVR32_SCIF_OSCCTRL0_GAIN_G3;
    AVR32_ENTER_CRITICAL_REGION( );
80028a5c:	e1 b8 00 00 	mfsr	r8,0x0
80028a60:	10 9c       	mov	r12,r8
80028a62:	c6 3e       	rcall	80028728 <cpu_irq_is_enabled_flags>
80028a64:	18 98       	mov	r8,r12
80028a66:	ef 68 ff fe 	st.b	r7[-2],r8
80028a6a:	d3 03       	ssrf	0x10
    // Unlock the write-protected OSCCTRL0 register
    SCIF_UNLOCK(AVR32_SCIF_OSCCTRL);
80028a6c:	fe 78 08 00 	mov	r8,-63488
80028a70:	32 49       	mov	r9,36
80028a72:	ea 19 aa 00 	orh	r9,0xaa00
80028a76:	91 69       	st.w	r8[0x18],r9
    // Write Back
    AVR32_SCIF.OSCCTRL[SCIF_OSC0] = u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC0];
80028a78:	fe 78 08 00 	mov	r8,-63488
80028a7c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80028a80:	91 99       	st.w	r8[0x24],r9
    AVR32_LEAVE_CRITICAL_REGION( );
80028a82:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80028a86:	30 08       	mov	r8,0
80028a88:	f0 09 18 00 	cp.b	r9,r8
80028a8c:	c4 f0       	breq	80028b2a <scif_configure_osc_crystalmode+0x14e>
80028a8e:	d5 03       	csrf	0x10
80028a90:	c4 d8       	rjmp	80028b2a <scif_configure_osc_crystalmode+0x14e>
  }
  else
  { 
    // Read Register
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC1] = AVR32_SCIF.OSCCTRL[SCIF_OSC1] ;    
80028a92:	fe 78 08 00 	mov	r8,-63488
80028a96:	70 a8       	ld.w	r8,r8[0x28]
80028a98:	ef 48 ff f8 	st.w	r7[-8],r8
    // Modify : Configure the oscillator mode to crystal and set the gain according to the
    // cyrstal frequency.
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC1].mode = SCIF_OSC_MODE_2PIN_CRYSTAL;
80028a9c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80028aa0:	30 19       	mov	r9,1
80028aa2:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
80028aa6:	ef 48 ff f8 	st.w	r7[-8],r8
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC1].gain = (fcrystal <  900000) ? AVR32_SCIF_OSCCTRL1_GAIN_G0 :
80028aaa:	ee f8 ff ec 	ld.w	r8,r7[-20]
80028aae:	ec 58 bb 9f 	cp.w	r8,899999
80028ab2:	e0 88 00 1b 	brls	80028ae8 <scif_configure_osc_crystalmode+0x10c>
80028ab6:	ee f8 ff ec 	ld.w	r8,r7[-20]
80028aba:	e0 69 c6 bf 	mov	r9,50879
80028abe:	ea 19 00 2d 	orh	r9,0x2d
80028ac2:	12 38       	cp.w	r8,r9
80028ac4:	e0 88 00 0f 	brls	80028ae2 <scif_configure_osc_crystalmode+0x106>
80028ac8:	ee f8 ff ec 	ld.w	r8,r7[-20]
80028acc:	e0 69 11 ff 	mov	r9,4607
80028ad0:	ea 19 00 7a 	orh	r9,0x7a
80028ad4:	12 38       	cp.w	r8,r9
80028ad6:	e0 8b 00 04 	brhi	80028ade <scif_configure_osc_crystalmode+0x102>
80028ada:	30 28       	mov	r8,2
80028adc:	c0 28       	rjmp	80028ae0 <scif_configure_osc_crystalmode+0x104>
80028ade:	30 38       	mov	r8,3
80028ae0:	c0 28       	rjmp	80028ae4 <scif_configure_osc_crystalmode+0x108>
80028ae2:	30 18       	mov	r8,1
80028ae4:	10 99       	mov	r9,r8
80028ae6:	c0 28       	rjmp	80028aea <scif_configure_osc_crystalmode+0x10e>
80028ae8:	30 09       	mov	r9,0
80028aea:	ee f8 ff f8 	ld.w	r8,r7[-8]
80028aee:	f1 d9 d0 22 	bfins	r8,r9,0x1,0x2
80028af2:	ef 48 ff f8 	st.w	r7[-8],r8
                                                   (fcrystal < 3000000) ? AVR32_SCIF_OSCCTRL1_GAIN_G1 :
                                                   (fcrystal < 8000000) ? AVR32_SCIF_OSCCTRL1_GAIN_G2 :
                                                                          AVR32_SCIF_OSCCTRL1_GAIN_G3;
    AVR32_ENTER_CRITICAL_REGION( );
80028af6:	e1 b8 00 00 	mfsr	r8,0x0
80028afa:	10 9c       	mov	r12,r8
80028afc:	c1 6e       	rcall	80028728 <cpu_irq_is_enabled_flags>
80028afe:	18 98       	mov	r8,r12
80028b00:	ef 68 ff ff 	st.b	r7[-1],r8
80028b04:	d3 03       	ssrf	0x10
    // Unlock the write-protected OSCCTRL1 register
    SCIF_UNLOCK(AVR32_SCIF_OSCCTRL + 4);
80028b06:	fe 78 08 00 	mov	r8,-63488
80028b0a:	32 89       	mov	r9,40
80028b0c:	ea 19 aa 00 	orh	r9,0xaa00
80028b10:	91 69       	st.w	r8[0x18],r9
    // Write Back
    AVR32_SCIF.OSCCTRL[SCIF_OSC1] = u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC1];
80028b12:	fe 78 08 00 	mov	r8,-63488
80028b16:	ee f9 ff f8 	ld.w	r9,r7[-8]
80028b1a:	91 a9       	st.w	r8[0x28],r9
    AVR32_LEAVE_CRITICAL_REGION( );
80028b1c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80028b20:	30 08       	mov	r8,0
80028b22:	f0 09 18 00 	cp.b	r9,r8
80028b26:	c0 20       	breq	80028b2a <scif_configure_osc_crystalmode+0x14e>
80028b28:	d5 03       	csrf	0x10
  }

  return PASS;
80028b2a:	30 08       	mov	r8,0
}
80028b2c:	10 9c       	mov	r12,r8
80028b2e:	2f bd       	sub	sp,-20
80028b30:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80028b34:	80 02       	ld.sh	r2,r0[0x0]
80028b36:	88 6a       	ld.sh	r10,r4[0xc]

80028b38 <scif_configure_osc_extmode>:

long int scif_configure_osc_extmode(scif_osc_t osc)
{
80028b38:	eb cd 40 c0 	pushm	r6-r7,lr
80028b3c:	1a 97       	mov	r7,sp
80028b3e:	20 4d       	sub	sp,16
80028b40:	4a 56       	lddpc	r6,80028bd4 <scif_configure_osc_extmode+0x9c>
80028b42:	1e 26       	rsub	r6,pc
80028b44:	ef 4c ff f0 	st.w	r7[-16],r12
  u_avr32_scif_oscctrl_t   u_avr32_scif_oscctrl;
  
      // Read Register
    u_avr32_scif_oscctrl.OSCCTRL[osc] = AVR32_SCIF.OSCCTRL[osc] ;
80028b48:	ee f8 ff f0 	ld.w	r8,r7[-16]
80028b4c:	fe 79 08 00 	mov	r9,-63488
80028b50:	ee fa ff f0 	ld.w	r10,r7[-16]
80028b54:	a3 68       	lsl	r8,0x2
80028b56:	ee 08 00 08 	add	r8,r7,r8
80028b5a:	2f 7a       	sub	r10,-9
80028b5c:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
80028b60:	f1 49 ff f4 	st.w	r8[-12],r9
    // Modify : Configure the oscillator mode to crystal and set the gain according to the
    // cyrstal frequency.
    u_avr32_scif_oscctrl.OSCCTRL[osc].mode = SCIF_OSC_MODE_EXT_CLK;
80028b64:	ee f8 ff f0 	ld.w	r8,r7[-16]
80028b68:	a3 68       	lsl	r8,0x2
80028b6a:	ee 08 00 08 	add	r8,r7,r8
80028b6e:	f0 f9 ff f4 	ld.w	r9,r8[-12]
80028b72:	30 0a       	mov	r10,0
80028b74:	f3 da d0 01 	bfins	r9,r10,0x0,0x1
80028b78:	f1 49 ff f4 	st.w	r8[-12],r9
    AVR32_ENTER_CRITICAL_REGION( );
80028b7c:	e1 b8 00 00 	mfsr	r8,0x0
80028b80:	10 9c       	mov	r12,r8
80028b82:	fe b0 fd d3 	rcall	80028728 <cpu_irq_is_enabled_flags>
80028b86:	18 98       	mov	r8,r12
80028b88:	ef 68 ff ff 	st.b	r7[-1],r8
80028b8c:	d3 03       	ssrf	0x10
    // Unlock the write-protected OSCCTRL0 register
    SCIF_UNLOCK(AVR32_SCIF_OSCCTRL + 4*osc);
80028b8e:	fe 78 08 00 	mov	r8,-63488
80028b92:	ee f9 ff f0 	ld.w	r9,r7[-16]
80028b96:	2f 79       	sub	r9,-9
80028b98:	a3 69       	lsl	r9,0x2
80028b9a:	ea 19 aa 00 	orh	r9,0xaa00
80028b9e:	91 69       	st.w	r8[0x18],r9
    // Write Back
    AVR32_SCIF.OSCCTRL[osc] = u_avr32_scif_oscctrl.OSCCTRL[osc];
80028ba0:	fe 79 08 00 	mov	r9,-63488
80028ba4:	ee fa ff f0 	ld.w	r10,r7[-16]
80028ba8:	ee f8 ff f0 	ld.w	r8,r7[-16]
80028bac:	2f 7a       	sub	r10,-9
80028bae:	a3 68       	lsl	r8,0x2
80028bb0:	ee 08 00 08 	add	r8,r7,r8
80028bb4:	f0 f8 ff f4 	ld.w	r8,r8[-12]
80028bb8:	f2 0a 09 28 	st.w	r9[r10<<0x2],r8
    AVR32_LEAVE_CRITICAL_REGION( );
80028bbc:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80028bc0:	30 08       	mov	r8,0
80028bc2:	f0 09 18 00 	cp.b	r9,r8
80028bc6:	c0 20       	breq	80028bca <scif_configure_osc_extmode+0x92>
80028bc8:	d5 03       	csrf	0x10

  return PASS;
80028bca:	30 08       	mov	r8,0
}
80028bcc:	10 9c       	mov	r12,r8
80028bce:	2f cd       	sub	sp,-16
80028bd0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80028bd4:	80 02       	ld.sh	r2,r0[0x0]
80028bd6:	89 c6       	st.w	r4[0x30],r6

80028bd8 <scif_enable_osc>:

long int scif_enable_osc(scif_osc_t osc, unsigned int startup, bool wait_for_ready)
{
80028bd8:	eb cd 40 c0 	pushm	r6-r7,lr
80028bdc:	1a 97       	mov	r7,sp
80028bde:	20 6d       	sub	sp,24
80028be0:	4b 86       	lddpc	r6,80028cc0 <scif_enable_osc+0xe8>
80028be2:	1e 26       	rsub	r6,pc
80028be4:	ef 4c ff f0 	st.w	r7[-16],r12
80028be8:	ef 4b ff ec 	st.w	r7[-20],r11
80028bec:	14 98       	mov	r8,r10
80028bee:	ef 68 ff e8 	st.b	r7[-24],r8

  u_avr32_scif_oscctrl_t   u_avr32_scif_oscctrl;

  // Read Register
  u_avr32_scif_oscctrl.OSCCTRL[osc] = AVR32_SCIF.OSCCTRL[osc] ;      
80028bf2:	ee f8 ff f0 	ld.w	r8,r7[-16]
80028bf6:	fe 79 08 00 	mov	r9,-63488
80028bfa:	ee fa ff f0 	ld.w	r10,r7[-16]
80028bfe:	a3 68       	lsl	r8,0x2
80028c00:	ee 08 00 08 	add	r8,r7,r8
80028c04:	2f 7a       	sub	r10,-9
80028c06:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
80028c0a:	f1 49 ff f4 	st.w	r8[-12],r9
  // Modify: Configure the oscillator startup and enable the osc.
  u_avr32_scif_oscctrl.OSCCTRL[osc].startup = startup;
80028c0e:	ee f9 ff f0 	ld.w	r9,r7[-16]
80028c12:	ee f8 ff ec 	ld.w	r8,r7[-20]
80028c16:	5c 58       	castu.b	r8
80028c18:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80028c1c:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
80028c20:	f2 08 15 02 	lsl	r8,r9,0x2
80028c24:	ee 08 00 08 	add	r8,r7,r8
80028c28:	f0 f9 ff f4 	ld.w	r9,r8[-12]
80028c2c:	f3 da d1 04 	bfins	r9,r10,0x8,0x4
80028c30:	f1 49 ff f4 	st.w	r8[-12],r9
  u_avr32_scif_oscctrl.OSCCTRL[osc].oscen = ENABLE;
80028c34:	ee f8 ff f0 	ld.w	r8,r7[-16]
80028c38:	a3 68       	lsl	r8,0x2
80028c3a:	ee 08 00 08 	add	r8,r7,r8
80028c3e:	f0 f9 ff f4 	ld.w	r9,r8[-12]
80028c42:	30 1a       	mov	r10,1
80028c44:	f3 da d2 01 	bfins	r9,r10,0x10,0x1
80028c48:	f1 49 ff f4 	st.w	r8[-12],r9
  AVR32_ENTER_CRITICAL_REGION( );
80028c4c:	e1 b8 00 00 	mfsr	r8,0x0
80028c50:	10 9c       	mov	r12,r8
80028c52:	fe b0 fd 6b 	rcall	80028728 <cpu_irq_is_enabled_flags>
80028c56:	18 98       	mov	r8,r12
80028c58:	ef 68 ff ff 	st.b	r7[-1],r8
80028c5c:	d3 03       	ssrf	0x10
  // Unlock the write-protected OSCCTRL0 register
  SCIF_UNLOCK(AVR32_SCIF_OSCCTRL + 4*osc);
80028c5e:	fe 78 08 00 	mov	r8,-63488
80028c62:	ee f9 ff f0 	ld.w	r9,r7[-16]
80028c66:	2f 79       	sub	r9,-9
80028c68:	a3 69       	lsl	r9,0x2
80028c6a:	ea 19 aa 00 	orh	r9,0xaa00
80028c6e:	91 69       	st.w	r8[0x18],r9
  // Write Back
  AVR32_SCIF.OSCCTRL[osc] = u_avr32_scif_oscctrl.OSCCTRL[osc];
80028c70:	fe 79 08 00 	mov	r9,-63488
80028c74:	ee fa ff f0 	ld.w	r10,r7[-16]
80028c78:	ee f8 ff f0 	ld.w	r8,r7[-16]
80028c7c:	2f 7a       	sub	r10,-9
80028c7e:	a3 68       	lsl	r8,0x2
80028c80:	ee 08 00 08 	add	r8,r7,r8
80028c84:	f0 f8 ff f4 	ld.w	r8,r8[-12]
80028c88:	f2 0a 09 28 	st.w	r9[r10<<0x2],r8
  AVR32_LEAVE_CRITICAL_REGION( );
80028c8c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80028c90:	30 08       	mov	r8,0
80028c92:	f0 09 18 00 	cp.b	r9,r8
80028c96:	c0 20       	breq	80028c9a <scif_enable_osc+0xc2>
80028c98:	d5 03       	csrf	0x10

  if(true == wait_for_ready)
80028c9a:	ef 39 ff e8 	ld.ub	r9,r7[-24]
80028c9e:	30 08       	mov	r8,0
80028ca0:	f0 09 18 00 	cp.b	r9,r8
80028ca4:	c0 90       	breq	80028cb6 <scif_enable_osc+0xde>
  {
    // Wait until OSC0 is stable and ready to be used.
    if(scif_pclksr_statushigh_wait(AVR32_SCIF_PCLKSR_OSC0RDY_MASK))
80028ca6:	30 1c       	mov	r12,1
80028ca8:	fe b0 fd 50 	rcall	80028748 <scif_pclksr_statushigh_wait>
80028cac:	18 98       	mov	r8,r12
80028cae:	58 08       	cp.w	r8,0
80028cb0:	c0 30       	breq	80028cb6 <scif_enable_osc+0xde>
      return -1;
80028cb2:	3f f8       	mov	r8,-1
80028cb4:	c0 28       	rjmp	80028cb8 <scif_enable_osc+0xe0>
  }
      
  return PASS;
80028cb6:	30 08       	mov	r8,0
}
80028cb8:	10 9c       	mov	r12,r8
80028cba:	2f ad       	sub	sp,-24
80028cbc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80028cc0:	80 02       	ld.sh	r2,r0[0x0]
80028cc2:	8a 66       	ld.sh	r6,r5[0xc]

80028cc4 <scif_enable_extosc>:

long int scif_enable_extosc(scif_osc_t osc)
{
80028cc4:	eb cd 40 c0 	pushm	r6-r7,lr
80028cc8:	1a 97       	mov	r7,sp
80028cca:	20 4d       	sub	sp,16
80028ccc:	4a 56       	lddpc	r6,80028d60 <scif_enable_extosc+0x9c>
80028cce:	1e 26       	rsub	r6,pc
80028cd0:	ef 4c ff f0 	st.w	r7[-16],r12

  u_avr32_scif_oscctrl_t   u_avr32_scif_oscctrl;

  // Read Register
  u_avr32_scif_oscctrl.OSCCTRL[osc] = AVR32_SCIF.OSCCTRL[osc] ;    
80028cd4:	ee f8 ff f0 	ld.w	r8,r7[-16]
80028cd8:	fe 79 08 00 	mov	r9,-63488
80028cdc:	ee fa ff f0 	ld.w	r10,r7[-16]
80028ce0:	a3 68       	lsl	r8,0x2
80028ce2:	ee 08 00 08 	add	r8,r7,r8
80028ce6:	2f 7a       	sub	r10,-9
80028ce8:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
80028cec:	f1 49 ff f4 	st.w	r8[-12],r9
  // Modify : Enable the osc.
  u_avr32_scif_oscctrl.OSCCTRL[osc].oscen = ENABLE;
80028cf0:	ee f8 ff f0 	ld.w	r8,r7[-16]
80028cf4:	a3 68       	lsl	r8,0x2
80028cf6:	ee 08 00 08 	add	r8,r7,r8
80028cfa:	f0 f9 ff f4 	ld.w	r9,r8[-12]
80028cfe:	30 1a       	mov	r10,1
80028d00:	f3 da d2 01 	bfins	r9,r10,0x10,0x1
80028d04:	f1 49 ff f4 	st.w	r8[-12],r9
  AVR32_ENTER_CRITICAL_REGION( );
80028d08:	e1 b8 00 00 	mfsr	r8,0x0
80028d0c:	10 9c       	mov	r12,r8
80028d0e:	fe b0 fd 0d 	rcall	80028728 <cpu_irq_is_enabled_flags>
80028d12:	18 98       	mov	r8,r12
80028d14:	ef 68 ff ff 	st.b	r7[-1],r8
80028d18:	d3 03       	ssrf	0x10
  // Unlock the write-protected OSCCTRL0 register
  SCIF_UNLOCK(AVR32_SCIF_OSCCTRL + 4*osc);
80028d1a:	fe 78 08 00 	mov	r8,-63488
80028d1e:	ee f9 ff f0 	ld.w	r9,r7[-16]
80028d22:	2f 79       	sub	r9,-9
80028d24:	a3 69       	lsl	r9,0x2
80028d26:	ea 19 aa 00 	orh	r9,0xaa00
80028d2a:	91 69       	st.w	r8[0x18],r9
  // Write Back
  AVR32_SCIF.OSCCTRL[osc] = u_avr32_scif_oscctrl.OSCCTRL[osc];
80028d2c:	fe 79 08 00 	mov	r9,-63488
80028d30:	ee fa ff f0 	ld.w	r10,r7[-16]
80028d34:	ee f8 ff f0 	ld.w	r8,r7[-16]
80028d38:	2f 7a       	sub	r10,-9
80028d3a:	a3 68       	lsl	r8,0x2
80028d3c:	ee 08 00 08 	add	r8,r7,r8
80028d40:	f0 f8 ff f4 	ld.w	r8,r8[-12]
80028d44:	f2 0a 09 28 	st.w	r9[r10<<0x2],r8
  AVR32_LEAVE_CRITICAL_REGION( );
80028d48:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80028d4c:	30 08       	mov	r8,0
80028d4e:	f0 09 18 00 	cp.b	r9,r8
80028d52:	c0 20       	breq	80028d56 <scif_enable_extosc+0x92>
80028d54:	d5 03       	csrf	0x10
  
  return PASS;
80028d56:	30 08       	mov	r8,0
}
80028d58:	10 9c       	mov	r12,r8
80028d5a:	2f cd       	sub	sp,-16
80028d5c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80028d60:	80 02       	ld.sh	r2,r0[0x0]
80028d62:	8b 52       	st.w	r5[0x14],r2

80028d64 <scif_pll_setup>:

/**
 ** PLL0/PLL1 Functions
 **/
long int scif_pll_setup(scif_pll_t pll, const scif_pll_opt_t opt)
{
80028d64:	eb cd 40 c0 	pushm	r6-r7,lr
80028d68:	1a 97       	mov	r7,sp
80028d6a:	20 4d       	sub	sp,16
80028d6c:	4d 46       	lddpc	r6,80028ebc <scif_pll_setup+0x158>
80028d6e:	1e 26       	rsub	r6,pc
80028d70:	ee c8 ff f4 	sub	r8,r7,-12
80028d74:	ef 4c ff f0 	st.w	r7[-16],r12

  u_avr32_scif_pll_t   u_avr32_scif_pll;

  // Read Register
  u_avr32_scif_pll.PLL[pll] = AVR32_SCIF.PLL[pll] ;
80028d78:	ee f9 ff f0 	ld.w	r9,r7[-16]
80028d7c:	fe 7a 08 00 	mov	r10,-63488
80028d80:	ee fb ff f0 	ld.w	r11,r7[-16]
80028d84:	a3 69       	lsl	r9,0x2
80028d86:	ee 09 00 09 	add	r9,r7,r9
80028d8a:	2f 9b       	sub	r11,-7
80028d8c:	f4 0b 03 2a 	ld.w	r10,r10[r11<<0x2]
80028d90:	f3 4a ff f4 	st.w	r9[-12],r10
  // Modify Configuration 
  u_avr32_scif_pll.PLL[pll].pllosc  = opt.osc;
80028d94:	ee fa ff f0 	ld.w	r10,r7[-16]
80028d98:	f1 39 00 10 	ld.ub	r9,r8[16]
80028d9c:	f3 d9 c0 02 	bfextu	r9,r9,0x0,0x2
80028da0:	f7 d9 c0 08 	bfextu	r11,r9,0x0,0x8
80028da4:	f4 09 15 02 	lsl	r9,r10,0x2
80028da8:	ee 09 00 09 	add	r9,r7,r9
80028dac:	f2 fa ff f4 	ld.w	r10,r9[-12]
80028db0:	f5 db d0 22 	bfins	r10,r11,0x1,0x2
80028db4:	f3 4a ff f4 	st.w	r9[-12],r10
  u_avr32_scif_pll.PLL[pll].pllopt  = opt.pll_freq | (opt.pll_div2 << 1) | (opt.pll_wbwdisable << 2);
80028db8:	ee fc ff f0 	ld.w	r12,r7[-16]
80028dbc:	11 89       	ld.ub	r9,r8[0x0]
80028dbe:	12 9a       	mov	r10,r9
80028dc0:	11 a9       	ld.ub	r9,r8[0x2]
80028dc2:	a1 79       	lsl	r9,0x1
80028dc4:	5c 59       	castu.b	r9
80028dc6:	f5 e9 10 09 	or	r9,r10,r9
80028dca:	f5 d9 c0 08 	bfextu	r10,r9,0x0,0x8
80028dce:	11 99       	ld.ub	r9,r8[0x1]
80028dd0:	a3 69       	lsl	r9,0x2
80028dd2:	5c 59       	castu.b	r9
80028dd4:	f5 e9 10 09 	or	r9,r10,r9
80028dd8:	5c 59       	castu.b	r9
80028dda:	5c 59       	castu.b	r9
80028ddc:	f3 d9 c0 03 	bfextu	r9,r9,0x0,0x3
80028de0:	f7 d9 c0 08 	bfextu	r11,r9,0x0,0x8
80028de4:	f8 09 15 02 	lsl	r9,r12,0x2
80028de8:	ee 09 00 09 	add	r9,r7,r9
80028dec:	f2 fa ff f4 	ld.w	r10,r9[-12]
80028df0:	f5 db d0 63 	bfins	r10,r11,0x3,0x3
80028df4:	f3 4a ff f4 	st.w	r9[-12],r10
  u_avr32_scif_pll.PLL[pll].plldiv   = opt.div;
80028df8:	ee fa ff f0 	ld.w	r10,r7[-16]
80028dfc:	70 29       	ld.w	r9,r8[0x8]
80028dfe:	5c 59       	castu.b	r9
80028e00:	f3 d9 c0 04 	bfextu	r9,r9,0x0,0x4
80028e04:	f7 d9 c0 08 	bfextu	r11,r9,0x0,0x8
80028e08:	f4 09 15 02 	lsl	r9,r10,0x2
80028e0c:	ee 09 00 09 	add	r9,r7,r9
80028e10:	f2 fa ff f4 	ld.w	r10,r9[-12]
80028e14:	f5 db d1 04 	bfins	r10,r11,0x8,0x4
80028e18:	f3 4a ff f4 	st.w	r9[-12],r10
  u_avr32_scif_pll.PLL[pll].pllmul  = opt.mul;
80028e1c:	ee fa ff f0 	ld.w	r10,r7[-16]
80028e20:	70 19       	ld.w	r9,r8[0x4]
80028e22:	5c 59       	castu.b	r9
80028e24:	f3 d9 c0 04 	bfextu	r9,r9,0x0,0x4
80028e28:	f7 d9 c0 08 	bfextu	r11,r9,0x0,0x8
80028e2c:	f4 09 15 02 	lsl	r9,r10,0x2
80028e30:	ee 09 00 09 	add	r9,r7,r9
80028e34:	f2 fa ff f4 	ld.w	r10,r9[-12]
80028e38:	f5 db d2 04 	bfins	r10,r11,0x10,0x4
80028e3c:	f3 4a ff f4 	st.w	r9[-12],r10
  u_avr32_scif_pll.PLL[pll].pllcount= opt.lockcount;
80028e40:	ee f9 ff f0 	ld.w	r9,r7[-16]
80028e44:	70 38       	ld.w	r8,r8[0xc]
80028e46:	5c 58       	castu.b	r8
80028e48:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
80028e4c:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
80028e50:	f2 08 15 02 	lsl	r8,r9,0x2
80028e54:	ee 08 00 08 	add	r8,r7,r8
80028e58:	f0 f9 ff f4 	ld.w	r9,r8[-12]
80028e5c:	f3 da d3 06 	bfins	r9,r10,0x18,0x6
80028e60:	f1 49 ff f4 	st.w	r8[-12],r9
  AVR32_ENTER_CRITICAL_REGION( );
80028e64:	e1 b8 00 00 	mfsr	r8,0x0
80028e68:	10 9c       	mov	r12,r8
80028e6a:	fe b0 fc 5f 	rcall	80028728 <cpu_irq_is_enabled_flags>
80028e6e:	18 98       	mov	r8,r12
80028e70:	ef 68 ff ff 	st.b	r7[-1],r8
80028e74:	d3 03       	ssrf	0x10
  // Unlock the write-protected PLL0 register
  SCIF_UNLOCK(AVR32_SCIF_PLL + 4*pll); 
80028e76:	fe 78 08 00 	mov	r8,-63488
80028e7a:	ee f9 ff f0 	ld.w	r9,r7[-16]
80028e7e:	2f 99       	sub	r9,-7
80028e80:	a3 69       	lsl	r9,0x2
80028e82:	ea 19 aa 00 	orh	r9,0xaa00
80028e86:	91 69       	st.w	r8[0x18],r9
  // Write Back
  AVR32_SCIF.PLL[pll] = u_avr32_scif_pll.PLL[pll];
80028e88:	fe 79 08 00 	mov	r9,-63488
80028e8c:	ee fa ff f0 	ld.w	r10,r7[-16]
80028e90:	ee f8 ff f0 	ld.w	r8,r7[-16]
80028e94:	2f 9a       	sub	r10,-7
80028e96:	a3 68       	lsl	r8,0x2
80028e98:	ee 08 00 08 	add	r8,r7,r8
80028e9c:	f0 f8 ff f4 	ld.w	r8,r8[-12]
80028ea0:	f2 0a 09 28 	st.w	r9[r10<<0x2],r8
  AVR32_LEAVE_CRITICAL_REGION( );
80028ea4:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80028ea8:	30 08       	mov	r8,0
80028eaa:	f0 09 18 00 	cp.b	r9,r8
80028eae:	c0 20       	breq	80028eb2 <scif_pll_setup+0x14e>
80028eb0:	d5 03       	csrf	0x10

  return PASS;
80028eb2:	30 08       	mov	r8,0
}
80028eb4:	10 9c       	mov	r12,r8
80028eb6:	2f cd       	sub	sp,-16
80028eb8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80028ebc:	80 02       	ld.sh	r2,r0[0x0]
80028ebe:	8b f2       	st.w	r5[0x3c],r2

80028ec0 <scif_pll_enable>:

long int scif_pll_enable(scif_pll_t pll)
{
80028ec0:	eb cd 40 c0 	pushm	r6-r7,lr
80028ec4:	1a 97       	mov	r7,sp
80028ec6:	20 4d       	sub	sp,16
80028ec8:	4a 56       	lddpc	r6,80028f5c <scif_pll_enable+0x9c>
80028eca:	1e 26       	rsub	r6,pc
80028ecc:	ef 4c ff f0 	st.w	r7[-16],r12

  u_avr32_scif_pll_t   u_avr32_scif_pll;
  
    // Read Register
    u_avr32_scif_pll.PLL[pll] = AVR32_SCIF.PLL[pll] ;
80028ed0:	ee f8 ff f0 	ld.w	r8,r7[-16]
80028ed4:	fe 79 08 00 	mov	r9,-63488
80028ed8:	ee fa ff f0 	ld.w	r10,r7[-16]
80028edc:	a3 68       	lsl	r8,0x2
80028ede:	ee 08 00 08 	add	r8,r7,r8
80028ee2:	2f 9a       	sub	r10,-7
80028ee4:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
80028ee8:	f1 49 ff f4 	st.w	r8[-12],r9
    // Modify Configuration 
    u_avr32_scif_pll.PLL[pll].pllen = ENABLE;
80028eec:	ee f8 ff f0 	ld.w	r8,r7[-16]
80028ef0:	a3 68       	lsl	r8,0x2
80028ef2:	ee 08 00 08 	add	r8,r7,r8
80028ef6:	f0 f9 ff f4 	ld.w	r9,r8[-12]
80028efa:	30 1a       	mov	r10,1
80028efc:	f3 da d0 01 	bfins	r9,r10,0x0,0x1
80028f00:	f1 49 ff f4 	st.w	r8[-12],r9
    AVR32_ENTER_CRITICAL_REGION( );
80028f04:	e1 b8 00 00 	mfsr	r8,0x0
80028f08:	10 9c       	mov	r12,r8
80028f0a:	fe b0 fc 0f 	rcall	80028728 <cpu_irq_is_enabled_flags>
80028f0e:	18 98       	mov	r8,r12
80028f10:	ef 68 ff ff 	st.b	r7[-1],r8
80028f14:	d3 03       	ssrf	0x10
    // Unlock the write-protected PLL0 register
    SCIF_UNLOCK(AVR32_SCIF_PLL + 4*pll); 
80028f16:	fe 78 08 00 	mov	r8,-63488
80028f1a:	ee f9 ff f0 	ld.w	r9,r7[-16]
80028f1e:	2f 99       	sub	r9,-7
80028f20:	a3 69       	lsl	r9,0x2
80028f22:	ea 19 aa 00 	orh	r9,0xaa00
80028f26:	91 69       	st.w	r8[0x18],r9
    // Write Back
    AVR32_SCIF.PLL[pll] = u_avr32_scif_pll.PLL[pll];
80028f28:	fe 79 08 00 	mov	r9,-63488
80028f2c:	ee fa ff f0 	ld.w	r10,r7[-16]
80028f30:	ee f8 ff f0 	ld.w	r8,r7[-16]
80028f34:	2f 9a       	sub	r10,-7
80028f36:	a3 68       	lsl	r8,0x2
80028f38:	ee 08 00 08 	add	r8,r7,r8
80028f3c:	f0 f8 ff f4 	ld.w	r8,r8[-12]
80028f40:	f2 0a 09 28 	st.w	r9[r10<<0x2],r8
    AVR32_LEAVE_CRITICAL_REGION( );
80028f44:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80028f48:	30 08       	mov	r8,0
80028f4a:	f0 09 18 00 	cp.b	r9,r8
80028f4e:	c0 20       	breq	80028f52 <scif_pll_enable+0x92>
80028f50:	d5 03       	csrf	0x10
  
  return PASS;
80028f52:	30 08       	mov	r8,0
}
80028f54:	10 9c       	mov	r12,r8
80028f56:	2f cd       	sub	sp,-16
80028f58:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80028f5c:	80 02       	ld.sh	r2,r0[0x0]
80028f5e:	8d 4e       	st.w	r6[0x10],lr

80028f60 <scif_pll_disable>:

long int scif_pll_disable(scif_pll_t pll)
{
80028f60:	eb cd 40 c0 	pushm	r6-r7,lr
80028f64:	1a 97       	mov	r7,sp
80028f66:	20 4d       	sub	sp,16
80028f68:	4a 56       	lddpc	r6,80028ffc <scif_pll_disable+0x9c>
80028f6a:	1e 26       	rsub	r6,pc
80028f6c:	ef 4c ff f0 	st.w	r7[-16],r12

  u_avr32_scif_pll_t   u_avr32_scif_pll;

  // Read Register
  u_avr32_scif_pll.PLL[pll] = AVR32_SCIF.PLL[pll] ;
80028f70:	ee f8 ff f0 	ld.w	r8,r7[-16]
80028f74:	fe 79 08 00 	mov	r9,-63488
80028f78:	ee fa ff f0 	ld.w	r10,r7[-16]
80028f7c:	a3 68       	lsl	r8,0x2
80028f7e:	ee 08 00 08 	add	r8,r7,r8
80028f82:	2f 9a       	sub	r10,-7
80028f84:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
80028f88:	f1 49 ff f4 	st.w	r8[-12],r9
  // Modify Configuration 
  u_avr32_scif_pll.PLL[pll].pllen = DISABLE;
80028f8c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80028f90:	a3 68       	lsl	r8,0x2
80028f92:	ee 08 00 08 	add	r8,r7,r8
80028f96:	f0 f9 ff f4 	ld.w	r9,r8[-12]
80028f9a:	30 0a       	mov	r10,0
80028f9c:	f3 da d0 01 	bfins	r9,r10,0x0,0x1
80028fa0:	f1 49 ff f4 	st.w	r8[-12],r9
  AVR32_ENTER_CRITICAL_REGION( );
80028fa4:	e1 b8 00 00 	mfsr	r8,0x0
80028fa8:	10 9c       	mov	r12,r8
80028faa:	fe b0 fb bf 	rcall	80028728 <cpu_irq_is_enabled_flags>
80028fae:	18 98       	mov	r8,r12
80028fb0:	ef 68 ff ff 	st.b	r7[-1],r8
80028fb4:	d3 03       	ssrf	0x10
  // Unlock the write-protected PLL0 register
  SCIF_UNLOCK(AVR32_SCIF_PLL + 4*pll); 
80028fb6:	fe 78 08 00 	mov	r8,-63488
80028fba:	ee f9 ff f0 	ld.w	r9,r7[-16]
80028fbe:	2f 99       	sub	r9,-7
80028fc0:	a3 69       	lsl	r9,0x2
80028fc2:	ea 19 aa 00 	orh	r9,0xaa00
80028fc6:	91 69       	st.w	r8[0x18],r9
  // Write Back
  AVR32_SCIF.PLL[pll] = u_avr32_scif_pll.PLL[pll];
80028fc8:	fe 79 08 00 	mov	r9,-63488
80028fcc:	ee fa ff f0 	ld.w	r10,r7[-16]
80028fd0:	ee f8 ff f0 	ld.w	r8,r7[-16]
80028fd4:	2f 9a       	sub	r10,-7
80028fd6:	a3 68       	lsl	r8,0x2
80028fd8:	ee 08 00 08 	add	r8,r7,r8
80028fdc:	f0 f8 ff f4 	ld.w	r8,r8[-12]
80028fe0:	f2 0a 09 28 	st.w	r9[r10<<0x2],r8
  AVR32_LEAVE_CRITICAL_REGION( );
80028fe4:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80028fe8:	30 08       	mov	r8,0
80028fea:	f0 09 18 00 	cp.b	r9,r8
80028fee:	c0 20       	breq	80028ff2 <scif_pll_disable+0x92>
80028ff0:	d5 03       	csrf	0x10

  return PASS;
80028ff2:	30 08       	mov	r8,0
}
80028ff4:	10 9c       	mov	r12,r8
80028ff6:	2f cd       	sub	sp,-16
80028ff8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80028ffc:	80 02       	ld.sh	r2,r0[0x0]
80028ffe:	8d ee       	st.w	r6[0x38],lr

80029000 <scif_wait_for_pll_locked>:

long int scif_wait_for_pll_locked(scif_pll_t pll)
{
80029000:	eb cd 40 80 	pushm	r7,lr
80029004:	1a 97       	mov	r7,sp
80029006:	20 1d       	sub	sp,4
80029008:	ef 4c ff fc 	st.w	r7[-4],r12
  
  if (pll == SCIF_PLL0)
8002900c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029010:	58 08       	cp.w	r8,0
80029012:	c0 81       	brne	80029022 <scif_wait_for_pll_locked+0x22>
  { 
      // Wait until PLL0 is stable and ready to be used.
      while(!(AVR32_SCIF.pclksr & AVR32_SCIF_PCLKSR_PLL0_LOCK_MASK));
80029014:	fe 78 08 00 	mov	r8,-63488
80029018:	70 58       	ld.w	r8,r8[0x14]
8002901a:	e2 18 00 10 	andl	r8,0x10,COH
8002901e:	cf b0       	breq	80029014 <scif_wait_for_pll_locked+0x14>
80029020:	c0 78       	rjmp	8002902e <scif_wait_for_pll_locked+0x2e>
  }
  else
  {
      // Wait until PLL1 is stable and ready to be used.
      while(!(AVR32_SCIF.pclksr & AVR32_SCIF_PCLKSR_PLL1_LOCK_MASK));
80029022:	fe 78 08 00 	mov	r8,-63488
80029026:	70 58       	ld.w	r8,r8[0x14]
80029028:	e2 18 00 20 	andl	r8,0x20,COH
8002902c:	cf b0       	breq	80029022 <scif_wait_for_pll_locked+0x22>
  }
  
  return PASS;
8002902e:	30 08       	mov	r8,0
}
80029030:	10 9c       	mov	r12,r8
80029032:	2f fd       	sub	sp,-4
80029034:	e3 cd 80 80 	ldm	sp++,r7,pc

80029038 <scif_start_osc32>:
/**
 ** OSC32 Functions
 **/

long int scif_start_osc32(const scif_osc32_opt_t *opt, bool wait_for_ready)
{
80029038:	eb cd 40 c0 	pushm	r6-r7,lr
8002903c:	1a 97       	mov	r7,sp
8002903e:	20 4d       	sub	sp,16
80029040:	4a f6       	lddpc	r6,800290fc <scif_start_osc32+0xc4>
80029042:	1e 26       	rsub	r6,pc
80029044:	ef 4c ff f4 	st.w	r7[-12],r12
80029048:	16 98       	mov	r8,r11
8002904a:	ef 68 ff f0 	st.b	r7[-16],r8
    return -1;
  }
#endif  // AVR32SFW_INPUT_CHECK

  // Read Register
  u_avr32_scif_oscctrl32.oscctrl32 = AVR32_SCIF.oscctrl32 ;  
8002904e:	fe 78 08 00 	mov	r8,-63488
80029052:	71 38       	ld.w	r8,r8[0x4c]
80029054:	ef 48 ff f8 	st.w	r7[-8],r8
  
  // Modify : Configure & start OSC32.
  u_avr32_scif_oscctrl32.OSCCTRL32.mode = opt->mode;
80029058:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002905c:	70 18       	ld.w	r8,r8[0x4]
8002905e:	5c 58       	castu.b	r8
80029060:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
80029064:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80029068:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002906c:	f1 d9 d1 02 	bfins	r8,r9,0x8,0x2
80029070:	ef 48 ff f8 	st.w	r7[-8],r8
  u_avr32_scif_oscctrl32.OSCCTRL32.startup = opt->startup;
80029074:	ee f8 ff f4 	ld.w	r8,r7[-12]
80029078:	f1 38 00 08 	ld.ub	r8,r8[8]
8002907c:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80029080:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80029084:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029088:	f1 d9 d2 03 	bfins	r8,r9,0x10,0x3
8002908c:	ef 48 ff f8 	st.w	r7[-8],r8
  u_avr32_scif_oscctrl32.OSCCTRL32.osc32en = ENABLE;
80029090:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029094:	30 19       	mov	r9,1
80029096:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
8002909a:	ef 48 ff f8 	st.w	r7[-8],r8
  
  AVR32_ENTER_CRITICAL_REGION( );
8002909e:	e1 b8 00 00 	mfsr	r8,0x0
800290a2:	10 9c       	mov	r12,r8
800290a4:	fe b0 fb 42 	rcall	80028728 <cpu_irq_is_enabled_flags>
800290a8:	18 98       	mov	r8,r12
800290aa:	ef 68 ff ff 	st.b	r7[-1],r8
800290ae:	d3 03       	ssrf	0x10
  // Unlock the write-protected OSCCTRL32 register
  SCIF_UNLOCK(AVR32_SCIF_OSCCTRL32);
800290b0:	fe 78 08 00 	mov	r8,-63488
800290b4:	34 c9       	mov	r9,76
800290b6:	ea 19 aa 00 	orh	r9,0xaa00
800290ba:	91 69       	st.w	r8[0x18],r9
  
  // Write Back
  AVR32_SCIF.oscctrl32 = u_avr32_scif_oscctrl32.oscctrl32;
800290bc:	fe 78 08 00 	mov	r8,-63488
800290c0:	ee f9 ff f8 	ld.w	r9,r7[-8]
800290c4:	f1 49 00 4c 	st.w	r8[76],r9
  AVR32_LEAVE_CRITICAL_REGION( );
800290c8:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800290cc:	30 08       	mov	r8,0
800290ce:	f0 09 18 00 	cp.b	r9,r8
800290d2:	c0 20       	breq	800290d6 <scif_start_osc32+0x9e>
800290d4:	d5 03       	csrf	0x10

  if(true == wait_for_ready)
800290d6:	ef 39 ff f0 	ld.ub	r9,r7[-16]
800290da:	30 08       	mov	r8,0
800290dc:	f0 09 18 00 	cp.b	r9,r8
800290e0:	c0 90       	breq	800290f2 <scif_start_osc32+0xba>
  {
    // Wait until OSC32 is stable and ready to be used.
    if(scif_pclksr_statushigh_wait(AVR32_SCIF_PCLKSR_OSC32RDY_MASK))
800290e2:	30 4c       	mov	r12,4
800290e4:	fe b0 fb 32 	rcall	80028748 <scif_pclksr_statushigh_wait>
800290e8:	18 98       	mov	r8,r12
800290ea:	58 08       	cp.w	r8,0
800290ec:	c0 30       	breq	800290f2 <scif_start_osc32+0xba>
      return -1;
800290ee:	3f f8       	mov	r8,-1
800290f0:	c0 28       	rjmp	800290f4 <scif_start_osc32+0xbc>
  }
  
  return PASS;
800290f2:	30 08       	mov	r8,0
}
800290f4:	10 9c       	mov	r12,r8
800290f6:	2f cd       	sub	sp,-16
800290f8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800290fc:	80 02       	ld.sh	r2,r0[0x0]
800290fe:	8e c6       	ld.uh	r6,r7[0x8]

80029100 <scif_stop_osc32>:


long scif_stop_osc32()
{
80029100:	eb cd 40 c0 	pushm	r6-r7,lr
80029104:	1a 97       	mov	r7,sp
80029106:	20 2d       	sub	sp,8
80029108:	49 76       	lddpc	r6,80029164 <scif_stop_osc32+0x64>
8002910a:	1e 26       	rsub	r6,pc
  unsigned long temp = AVR32_SCIF.oscctrl32;
8002910c:	fe 78 08 00 	mov	r8,-63488
80029110:	71 38       	ld.w	r8,r8[0x4c]
80029112:	ef 48 ff f8 	st.w	r7[-8],r8
  temp &= ~AVR32_SCIF_OSCCTRL32_OSC32EN_MASK;
80029116:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002911a:	a1 c8       	cbr	r8,0x0
8002911c:	ef 48 ff f8 	st.w	r7[-8],r8

  AVR32_ENTER_CRITICAL_REGION( );
80029120:	e1 b8 00 00 	mfsr	r8,0x0
80029124:	10 9c       	mov	r12,r8
80029126:	fe b0 fb 01 	rcall	80028728 <cpu_irq_is_enabled_flags>
8002912a:	18 98       	mov	r8,r12
8002912c:	ef 68 ff ff 	st.b	r7[-1],r8
80029130:	d3 03       	ssrf	0x10
  // Unlock the write-protected OSCCTRL32 register
  SCIF_UNLOCK(AVR32_SCIF_OSCCTRL32);
80029132:	fe 78 08 00 	mov	r8,-63488
80029136:	34 c9       	mov	r9,76
80029138:	ea 19 aa 00 	orh	r9,0xaa00
8002913c:	91 69       	st.w	r8[0x18],r9
  
  // Stop OSC32.
  AVR32_SCIF.oscctrl32 = temp;
8002913e:	fe 78 08 00 	mov	r8,-63488
80029142:	ee f9 ff f8 	ld.w	r9,r7[-8]
80029146:	f1 49 00 4c 	st.w	r8[76],r9
  AVR32_LEAVE_CRITICAL_REGION( );
8002914a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8002914e:	30 08       	mov	r8,0
80029150:	f0 09 18 00 	cp.b	r9,r8
80029154:	c0 20       	breq	80029158 <scif_stop_osc32+0x58>
80029156:	d5 03       	csrf	0x10

  return PASS;
80029158:	30 08       	mov	r8,0
}
8002915a:	10 9c       	mov	r12,r8
8002915c:	2f ed       	sub	sp,-8
8002915e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80029162:	00 00       	add	r0,r0
80029164:	80 02       	ld.sh	r2,r0[0x0]
80029166:	8f 8e       	st.w	r7[0x20],lr

80029168 <scif_start_rc8M>:
/**
 ** 8MHz RCosc Functions
 **/

void scif_start_rc8M(void)
{
80029168:	eb cd 40 c0 	pushm	r6-r7,lr
8002916c:	1a 97       	mov	r7,sp
8002916e:	20 2d       	sub	sp,8
80029170:	49 66       	lddpc	r6,800291c8 <scif_start_rc8M+0x60>
80029172:	1e 26       	rsub	r6,pc
  unsigned int* calibration_bits = (unsigned int*)0x80800200;
80029174:	e0 68 02 00 	mov	r8,512
80029178:	ea 18 80 80 	orh	r8,0x8080
8002917c:	ef 48 ff f8 	st.w	r7[-8],r8
  AVR32_ENTER_CRITICAL_REGION( );
80029180:	e1 b8 00 00 	mfsr	r8,0x0
80029184:	10 9c       	mov	r12,r8
80029186:	fe b0 fa d1 	rcall	80028728 <cpu_irq_is_enabled_flags>
8002918a:	18 98       	mov	r8,r12
8002918c:	ef 68 ff ff 	st.b	r7[-1],r8
80029190:	d3 03       	ssrf	0x10
  // Unlock the write-protected RC8MCR register
  SCIF_UNLOCK(AVR32_SCIF_RCCR8);
80029192:	fe 78 08 00 	mov	r8,-63488
80029196:	34 89       	mov	r9,72
80029198:	ea 19 aa 00 	orh	r9,0xaa00
8002919c:	91 69       	st.w	r8[0x18],r9
  AVR32_SCIF.rccr8 = AVR32_SCIF_RCCR8_RCOSC8_EN_MASK | ((*calibration_bits)&AVR32_SCIF_RCCR8_CALIB_MASK);
8002919e:	fe 78 08 00 	mov	r8,-63488
800291a2:	ee f9 ff f8 	ld.w	r9,r7[-8]
800291a6:	72 09       	ld.w	r9,r9[0x0]
800291a8:	f3 d9 c0 08 	bfextu	r9,r9,0x0,0x8
800291ac:	b9 a9       	sbr	r9,0x18
800291ae:	f1 49 00 48 	st.w	r8[72],r9
  AVR32_LEAVE_CRITICAL_REGION( );
800291b2:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800291b6:	30 08       	mov	r8,0
800291b8:	f0 09 18 00 	cp.b	r9,r8
800291bc:	c0 20       	breq	800291c0 <scif_start_rc8M+0x58>
800291be:	d5 03       	csrf	0x10
}
800291c0:	2f ed       	sub	sp,-8
800291c2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800291c6:	00 00       	add	r0,r0
800291c8:	80 02       	ld.sh	r2,r0[0x0]
800291ca:	8f f6       	st.w	r7[0x3c],r6

800291cc <scif_stop_rc8M>:

void scif_stop_rc8M(void)
{
800291cc:	eb cd 40 c0 	pushm	r6-r7,lr
800291d0:	1a 97       	mov	r7,sp
800291d2:	20 2d       	sub	sp,8
800291d4:	49 66       	lddpc	r6,8002922c <scif_stop_rc8M+0x60>
800291d6:	1e 26       	rsub	r6,pc
  unsigned long temp = AVR32_SCIF.rccr8;
800291d8:	fe 78 08 00 	mov	r8,-63488
800291dc:	71 28       	ld.w	r8,r8[0x48]
800291de:	ef 48 ff f8 	st.w	r7[-8],r8
  
  AVR32_ENTER_CRITICAL_REGION( );
800291e2:	e1 b8 00 00 	mfsr	r8,0x0
800291e6:	10 9c       	mov	r12,r8
800291e8:	fe b0 fa a0 	rcall	80028728 <cpu_irq_is_enabled_flags>
800291ec:	18 98       	mov	r8,r12
800291ee:	ef 68 ff ff 	st.b	r7[-1],r8
800291f2:	d3 03       	ssrf	0x10
  // Unlock the write-protected RC8MCR register
  SCIF_UNLOCK(AVR32_SCIF_RCCR8);
800291f4:	fe 78 08 00 	mov	r8,-63488
800291f8:	34 89       	mov	r9,72
800291fa:	ea 19 aa 00 	orh	r9,0xaa00
800291fe:	91 69       	st.w	r8[0x18],r9
  temp &= ~AVR32_SCIF_RCCR8_RCOSC8_EN_MASK;
80029200:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029204:	b9 c8       	cbr	r8,0x18
80029206:	ef 48 ff f8 	st.w	r7[-8],r8
  AVR32_SCIF.rccr8 = temp;
8002920a:	fe 78 08 00 	mov	r8,-63488
8002920e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80029212:	f1 49 00 48 	st.w	r8[72],r9
  AVR32_LEAVE_CRITICAL_REGION( );
80029216:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8002921a:	30 08       	mov	r8,0
8002921c:	f0 09 18 00 	cp.b	r9,r8
80029220:	c0 20       	breq	80029224 <scif_stop_rc8M+0x58>
80029222:	d5 03       	csrf	0x10
}
80029224:	2f ed       	sub	sp,-8
80029226:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002922a:	00 00       	add	r0,r0
8002922c:	80 02       	ld.sh	r2,r0[0x0]
8002922e:	90 5a       	ld.sh	r10,r8[0xa]

80029230 <scif_start_rc120M>:
/**
 ** 120MHz RCosc Functions
 **/

void scif_start_rc120M(void)
{
80029230:	eb cd 40 c0 	pushm	r6-r7,lr
80029234:	1a 97       	mov	r7,sp
80029236:	20 1d       	sub	sp,4
80029238:	49 06       	lddpc	r6,80029278 <scif_start_rc120M+0x48>
8002923a:	1e 26       	rsub	r6,pc
  AVR32_ENTER_CRITICAL_REGION( );
8002923c:	e1 b8 00 00 	mfsr	r8,0x0
80029240:	10 9c       	mov	r12,r8
80029242:	fe b0 fa 73 	rcall	80028728 <cpu_irq_is_enabled_flags>
80029246:	18 98       	mov	r8,r12
80029248:	ef 68 ff ff 	st.b	r7[-1],r8
8002924c:	d3 03       	ssrf	0x10
  // Unlock the write-protected RC120MCR register
  SCIF_UNLOCK(AVR32_SCIF_RC120MCR);
8002924e:	fe 78 08 00 	mov	r8,-63488
80029252:	35 89       	mov	r9,88
80029254:	ea 19 aa 00 	orh	r9,0xaa00
80029258:	91 69       	st.w	r8[0x18],r9
  AVR32_SCIF.rc120mcr = AVR32_SCIF_RC120MCR_EN_MASK;
8002925a:	fe 78 08 00 	mov	r8,-63488
8002925e:	30 19       	mov	r9,1
80029260:	f1 49 00 58 	st.w	r8[88],r9
  AVR32_LEAVE_CRITICAL_REGION( );
80029264:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80029268:	30 08       	mov	r8,0
8002926a:	f0 09 18 00 	cp.b	r9,r8
8002926e:	c0 20       	breq	80029272 <scif_start_rc120M+0x42>
80029270:	d5 03       	csrf	0x10
}
80029272:	2f fd       	sub	sp,-4
80029274:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80029278:	80 02       	ld.sh	r2,r0[0x0]
8002927a:	90 be       	ld.uh	lr,r8[0x6]

8002927c <scif_stop_rc120M>:

void scif_stop_rc120M(void)
{
8002927c:	eb cd 40 c0 	pushm	r6-r7,lr
80029280:	1a 97       	mov	r7,sp
80029282:	20 2d       	sub	sp,8
80029284:	49 66       	lddpc	r6,800292dc <scif_stop_rc120M+0x60>
80029286:	1e 26       	rsub	r6,pc
  unsigned long temp = AVR32_SCIF.rc120mcr;
80029288:	fe 78 08 00 	mov	r8,-63488
8002928c:	71 68       	ld.w	r8,r8[0x58]
8002928e:	ef 48 ff f8 	st.w	r7[-8],r8

  AVR32_ENTER_CRITICAL_REGION( );
80029292:	e1 b8 00 00 	mfsr	r8,0x0
80029296:	10 9c       	mov	r12,r8
80029298:	fe b0 fa 48 	rcall	80028728 <cpu_irq_is_enabled_flags>
8002929c:	18 98       	mov	r8,r12
8002929e:	ef 68 ff ff 	st.b	r7[-1],r8
800292a2:	d3 03       	ssrf	0x10
  // Unlock the write-protected RC120MCR register
  SCIF_UNLOCK(AVR32_SCIF_RC120MCR);
800292a4:	fe 78 08 00 	mov	r8,-63488
800292a8:	35 89       	mov	r9,88
800292aa:	ea 19 aa 00 	orh	r9,0xaa00
800292ae:	91 69       	st.w	r8[0x18],r9
  temp &= ~AVR32_SCIF_RC120MCR_EN_MASK;
800292b0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800292b4:	a1 c8       	cbr	r8,0x0
800292b6:	ef 48 ff f8 	st.w	r7[-8],r8
  AVR32_SCIF.rc120mcr = temp;
800292ba:	fe 78 08 00 	mov	r8,-63488
800292be:	ee f9 ff f8 	ld.w	r9,r7[-8]
800292c2:	f1 49 00 58 	st.w	r8[88],r9
  AVR32_LEAVE_CRITICAL_REGION( );
800292c6:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800292ca:	30 08       	mov	r8,0
800292cc:	f0 09 18 00 	cp.b	r9,r8
800292d0:	c0 20       	breq	800292d4 <scif_stop_rc120M+0x58>
800292d2:	d5 03       	csrf	0x10
}
800292d4:	2f ed       	sub	sp,-8
800292d6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800292da:	00 00       	add	r0,r0
800292dc:	80 02       	ld.sh	r2,r0[0x0]
800292de:	91 0a       	st.w	r8[0x0],r10

800292e0 <scif_start_gclk>:
/**
 ** Generic Clock Functions
 **/

long int scif_start_gclk(unsigned int gclk, const scif_gclk_opt_t *opt)
{
800292e0:	eb cd 40 80 	pushm	r7,lr
800292e4:	1a 97       	mov	r7,sp
800292e6:	20 2d       	sub	sp,8
800292e8:	ef 4c ff fc 	st.w	r7[-4],r12
800292ec:	ef 4b ff f8 	st.w	r7[-8],r11
    return -1;
  }
#endif  // AVR32SFW_INPUT_CHECK

  // If the generic clock is already enabled, return an error.
  if(AVR32_SCIF.gcctrl[gclk] & AVR32_SCIF_GCCTRL_CEN_MASK)
800292f0:	fe 78 08 00 	mov	r8,-63488
800292f4:	ee f9 ff fc 	ld.w	r9,r7[-4]
800292f8:	2e 79       	sub	r9,-25
800292fa:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800292fe:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80029302:	5c 58       	castu.b	r8
80029304:	c0 30       	breq	8002930a <scif_start_gclk+0x2a>
    return -1;
80029306:	3f f8       	mov	r8,-1
80029308:	c2 08       	rjmp	80029348 <scif_start_gclk+0x68>

  // Configure & start the generic clock.
  AVR32_SCIF.gcctrl[gclk] = ((opt->divider << AVR32_SCIF_GCCTRL_DIV_OFFSET)&AVR32_SCIF_GCCTRL_DIV_MASK)
8002930a:	fe 78 08 00 	mov	r8,-63488
8002930e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80029312:	ee fa ff f8 	ld.w	r10,r7[-8]
80029316:	74 1a       	ld.w	r10,r10[0x4]
80029318:	b1 6a       	lsl	r10,0x10
8002931a:	14 9b       	mov	r11,r10
8002931c:	e6 1b 00 ff 	andh	r11,0xff,COH
                            |((opt->diven << AVR32_SCIF_GCCTRL_DIVEN_OFFSET)&AVR32_SCIF_GCCTRL_DIVEN_MASK)
80029320:	ee fa ff f8 	ld.w	r10,r7[-8]
80029324:	74 2a       	ld.w	r10,r10[0x8]
80029326:	a1 7a       	lsl	r10,0x1
80029328:	e2 1a 00 02 	andl	r10,0x2,COH
                            |((opt->clock_source << AVR32_SCIF_GCCTRL_OSCSEL_OFFSET)&AVR32_SCIF_GCCTRL_OSCSEL_MASK)
8002932c:	14 4b       	or	r11,r10
8002932e:	ee fa ff f8 	ld.w	r10,r7[-8]
80029332:	74 0a       	ld.w	r10,r10[0x0]
80029334:	a9 6a       	lsl	r10,0x8
80029336:	e2 1a 0f 00 	andl	r10,0xf00,COH
                            |(AVR32_SCIF_GCCTRL_CEN_MASK);
8002933a:	f7 ea 10 0a 	or	r10,r11,r10
  // If the generic clock is already enabled, return an error.
  if(AVR32_SCIF.gcctrl[gclk] & AVR32_SCIF_GCCTRL_CEN_MASK)
    return -1;

  // Configure & start the generic clock.
  AVR32_SCIF.gcctrl[gclk] = ((opt->divider << AVR32_SCIF_GCCTRL_DIV_OFFSET)&AVR32_SCIF_GCCTRL_DIV_MASK)
8002933e:	a1 aa       	sbr	r10,0x0
80029340:	2e 79       	sub	r9,-25
80029342:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
                            |((opt->diven << AVR32_SCIF_GCCTRL_DIVEN_OFFSET)&AVR32_SCIF_GCCTRL_DIVEN_MASK)
                            |((opt->clock_source << AVR32_SCIF_GCCTRL_OSCSEL_OFFSET)&AVR32_SCIF_GCCTRL_OSCSEL_MASK)
                            |(AVR32_SCIF_GCCTRL_CEN_MASK);

  return PASS;
80029346:	30 08       	mov	r8,0
}
80029348:	10 9c       	mov	r12,r8
8002934a:	2f ed       	sub	sp,-8
8002934c:	e3 cd 80 80 	ldm	sp++,r7,pc

80029350 <scif_stop_gclk>:


long int scif_stop_gclk(unsigned int gclk)
{
80029350:	eb cd 40 80 	pushm	r7,lr
80029354:	1a 97       	mov	r7,sp
80029356:	20 2d       	sub	sp,8
80029358:	ef 4c ff f8 	st.w	r7[-8],r12
  unsigned int  timeout = SCIF_POLL_TIMEOUT;
8002935c:	e0 78 86 a0 	mov	r8,100000
80029360:	ef 48 ff fc 	st.w	r7[-4],r8
    return -1;
  }
#endif  // AVR32SFW_INPUT_CHECK

  // Stop the generic clock.
  AVR32_SCIF.gcctrl[gclk] &= ~AVR32_SCIF_GCCTRL_CEN_MASK;
80029364:	fe 78 08 00 	mov	r8,-63488
80029368:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002936c:	fe 7a 08 00 	mov	r10,-63488
80029370:	ee fb ff f8 	ld.w	r11,r7[-8]
80029374:	2e 7b       	sub	r11,-25
80029376:	f4 0b 03 2a 	ld.w	r10,r10[r11<<0x2]
8002937a:	a1 ca       	cbr	r10,0x0
8002937c:	2e 79       	sub	r9,-25
8002937e:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
  
  // Wait until the generic clock is actually stopped.
  while(AVR32_SCIF.gcctrl[gclk] & AVR32_SCIF_GCCTRL_CEN_MASK)
80029382:	c0 c8       	rjmp	8002939a <scif_stop_gclk+0x4a>
  {
    if(--timeout == 0)
80029384:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029388:	20 18       	sub	r8,1
8002938a:	ef 48 ff fc 	st.w	r7[-4],r8
8002938e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029392:	58 08       	cp.w	r8,0
80029394:	c0 31       	brne	8002939a <scif_stop_gclk+0x4a>
      return -1;
80029396:	3f f8       	mov	r8,-1
80029398:	c0 d8       	rjmp	800293b2 <scif_stop_gclk+0x62>

  // Stop the generic clock.
  AVR32_SCIF.gcctrl[gclk] &= ~AVR32_SCIF_GCCTRL_CEN_MASK;
  
  // Wait until the generic clock is actually stopped.
  while(AVR32_SCIF.gcctrl[gclk] & AVR32_SCIF_GCCTRL_CEN_MASK)
8002939a:	fe 78 08 00 	mov	r8,-63488
8002939e:	ee f9 ff f8 	ld.w	r9,r7[-8]
800293a2:	2e 79       	sub	r9,-25
800293a4:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800293a8:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800293ac:	5c 58       	castu.b	r8
800293ae:	ce b1       	brne	80029384 <scif_stop_gclk+0x34>
  {
    if(--timeout == 0)
      return -1;
  }
  
  return PASS;
800293b0:	30 08       	mov	r8,0
}
800293b2:	10 9c       	mov	r12,r8
800293b4:	2f ed       	sub	sp,-8
800293b6:	e3 cd 80 80 	ldm	sp++,r7,pc

800293ba <scif_gc_setup>:


long int scif_gc_setup(unsigned int gclk, scif_gcctrl_oscsel_t clk_src, unsigned int diven, unsigned int divfactor)
{
800293ba:	eb cd 40 c0 	pushm	r6-r7,lr
800293be:	1a 97       	mov	r7,sp
800293c0:	20 5d       	sub	sp,20
800293c2:	4a f6       	lddpc	r6,8002947c <scif_gc_setup+0xc2>
800293c4:	1e 26       	rsub	r6,pc
800293c6:	ef 4c ff f8 	st.w	r7[-8],r12
800293ca:	ef 4b ff f4 	st.w	r7[-12],r11
800293ce:	ef 4a ff f0 	st.w	r7[-16],r10
800293d2:	ef 49 ff ec 	st.w	r7[-20],r9
  int restart_gc = false;
800293d6:	30 08       	mov	r8,0
800293d8:	ef 48 ff fc 	st.w	r7[-4],r8
  
  
  // Change the division factor to conform to the equation: fgclk = fsrc/divfactor = fsrc/(2*(div+1))
  divfactor = (divfactor>>1) -1;
800293dc:	ee f8 ff ec 	ld.w	r8,r7[-20]
800293e0:	a1 98       	lsr	r8,0x1
800293e2:	20 18       	sub	r8,1
800293e4:	ef 48 ff ec 	st.w	r7[-20],r8
      return -1;
  }
#endif  // AVR32SFW_INPUT_CHECK

  // If the generic clock is already enabled, disable it before changing its setup.
  if(AVR32_SCIF.gcctrl[gclk] & AVR32_SCIF_GCCTRL_CEN_MASK)
800293e8:	fe 78 08 00 	mov	r8,-63488
800293ec:	ee f9 ff f8 	ld.w	r9,r7[-8]
800293f0:	2e 79       	sub	r9,-25
800293f2:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800293f6:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800293fa:	5c 58       	castu.b	r8
800293fc:	c0 d0       	breq	80029416 <scif_gc_setup+0x5c>
  {
    restart_gc = true;
800293fe:	30 18       	mov	r8,1
80029400:	ef 48 ff fc 	st.w	r7[-4],r8
    if(scif_stop_gclk(gclk) < 0)
80029404:	ee fc ff f8 	ld.w	r12,r7[-8]
80029408:	f0 16 02 13 	mcall	r6[2124]
8002940c:	18 98       	mov	r8,r12
8002940e:	58 08       	cp.w	r8,0
80029410:	c0 34       	brge	80029416 <scif_gc_setup+0x5c>
      return -1;  // Could not stop the generic clock.
80029412:	3f f8       	mov	r8,-1
80029414:	c2 f8       	rjmp	80029472 <scif_gc_setup+0xb8>
  }

  // Setup the generic clock.
  AVR32_SCIF.gcctrl[gclk] = ((divfactor << AVR32_SCIF_GCCTRL_DIV_OFFSET)&AVR32_SCIF_GCCTRL_DIV_MASK)
80029416:	fe 78 08 00 	mov	r8,-63488
8002941a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002941e:	ee fa ff ec 	ld.w	r10,r7[-20]
80029422:	b1 6a       	lsl	r10,0x10
80029424:	14 9b       	mov	r11,r10
80029426:	e6 1b 00 ff 	andh	r11,0xff,COH
                            |((diven << AVR32_SCIF_GCCTRL_DIVEN_OFFSET)&AVR32_SCIF_GCCTRL_DIVEN_MASK)
8002942a:	ee fa ff f0 	ld.w	r10,r7[-16]
8002942e:	a1 7a       	lsl	r10,0x1
80029430:	e2 1a 00 02 	andl	r10,0x2,COH
                            |((clk_src << AVR32_SCIF_GCCTRL_OSCSEL_OFFSET)&AVR32_SCIF_GCCTRL_OSCSEL_MASK);
80029434:	14 4b       	or	r11,r10
80029436:	ee fa ff f4 	ld.w	r10,r7[-12]
8002943a:	a9 6a       	lsl	r10,0x8
8002943c:	e2 1a 0f 00 	andl	r10,0xf00,COH
    if(scif_stop_gclk(gclk) < 0)
      return -1;  // Could not stop the generic clock.
  }

  // Setup the generic clock.
  AVR32_SCIF.gcctrl[gclk] = ((divfactor << AVR32_SCIF_GCCTRL_DIV_OFFSET)&AVR32_SCIF_GCCTRL_DIV_MASK)
80029440:	f7 ea 10 0a 	or	r10,r11,r10
80029444:	2e 79       	sub	r9,-25
80029446:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
                            |((diven << AVR32_SCIF_GCCTRL_DIVEN_OFFSET)&AVR32_SCIF_GCCTRL_DIVEN_MASK)
                            |((clk_src << AVR32_SCIF_GCCTRL_OSCSEL_OFFSET)&AVR32_SCIF_GCCTRL_OSCSEL_MASK);
                            
  // Restart the gc if it previously was enabled.
  if(true == restart_gc)
8002944a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002944e:	58 18       	cp.w	r8,1
80029450:	c1 01       	brne	80029470 <scif_gc_setup+0xb6>
    AVR32_SCIF.gcctrl[gclk] |= AVR32_SCIF_GCCTRL_CEN_MASK ;
80029452:	fe 78 08 00 	mov	r8,-63488
80029456:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002945a:	fe 7a 08 00 	mov	r10,-63488
8002945e:	ee fb ff f8 	ld.w	r11,r7[-8]
80029462:	2e 7b       	sub	r11,-25
80029464:	f4 0b 03 2a 	ld.w	r10,r10[r11<<0x2]
80029468:	a1 aa       	sbr	r10,0x0
8002946a:	2e 79       	sub	r9,-25
8002946c:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10

  return PASS;
80029470:	30 08       	mov	r8,0
}
80029472:	10 9c       	mov	r12,r8
80029474:	2f bd       	sub	sp,-20
80029476:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002947a:	00 00       	add	r0,r0
8002947c:	80 02       	ld.sh	r2,r0[0x0]
8002947e:	92 48       	ld.sh	r8,r9[0x8]

80029480 <scif_gc_enable>:


long int scif_gc_enable(unsigned int gclk)
{
80029480:	eb cd 40 80 	pushm	r7,lr
80029484:	1a 97       	mov	r7,sp
80029486:	20 1d       	sub	sp,4
80029488:	ef 4c ff fc 	st.w	r7[-4],r12
    return -1;
  }
#endif  // AVR32SFW_INPUT_CHECK

  // If the generic clock is already enabled, do nothing.
  if(!(AVR32_SCIF.gcctrl[gclk] & AVR32_SCIF_GCCTRL_CEN_MASK))
8002948c:	fe 78 08 00 	mov	r8,-63488
80029490:	ee f9 ff fc 	ld.w	r9,r7[-4]
80029494:	2e 79       	sub	r9,-25
80029496:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8002949a:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002949e:	c1 01       	brne	800294be <scif_gc_enable+0x3e>
    AVR32_SCIF.gcctrl[gclk] |= AVR32_SCIF_GCCTRL_CEN_MASK;
800294a0:	fe 78 08 00 	mov	r8,-63488
800294a4:	ee f9 ff fc 	ld.w	r9,r7[-4]
800294a8:	fe 7a 08 00 	mov	r10,-63488
800294ac:	ee fb ff fc 	ld.w	r11,r7[-4]
800294b0:	2e 7b       	sub	r11,-25
800294b2:	f4 0b 03 2a 	ld.w	r10,r10[r11<<0x2]
800294b6:	a1 aa       	sbr	r10,0x0
800294b8:	2e 79       	sub	r9,-25
800294ba:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
    
  return PASS;
800294be:	30 08       	mov	r8,0

}
800294c0:	10 9c       	mov	r12,r8
800294c2:	2f fd       	sub	sp,-4
800294c4:	e3 cd 80 80 	ldm	sp++,r7,pc

800294c8 <scif_bod18_enable_irq>:

void scif_bod18_enable_irq(void)
{
800294c8:	eb cd 40 80 	pushm	r7,lr
800294cc:	1a 97       	mov	r7,sp
  AVR32_SCIF.ier = AVR32_SCIF_IER_BODDET_MASK ;
800294ce:	fe 78 08 00 	mov	r8,-63488
800294d2:	34 09       	mov	r9,64
800294d4:	91 09       	st.w	r8[0x0],r9
}
800294d6:	e3 cd 80 80 	ldm	sp++,r7,pc

800294da <scif_bod18_disable_irq>:

void scif_bod18_disable_irq(void)
{
800294da:	eb cd 40 c0 	pushm	r6-r7,lr
800294de:	1a 97       	mov	r7,sp
800294e0:	20 1d       	sub	sp,4
800294e2:	49 26       	lddpc	r6,80029528 <scif_bod18_disable_irq+0x4e>
800294e4:	1e 26       	rsub	r6,pc
  bool global_interrupt_enabled = Is_global_interrupt_enabled();
800294e6:	e1 b8 00 00 	mfsr	r8,0x0
800294ea:	10 9c       	mov	r12,r8
800294ec:	fe b0 f9 1e 	rcall	80028728 <cpu_irq_is_enabled_flags>
800294f0:	18 98       	mov	r8,r12
800294f2:	ef 68 ff ff 	st.b	r7[-1],r8

  if (global_interrupt_enabled) Disable_global_interrupt();
800294f6:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800294fa:	30 08       	mov	r8,0
800294fc:	f0 09 18 00 	cp.b	r9,r8
80029500:	c0 20       	breq	80029504 <scif_bod18_disable_irq+0x2a>
80029502:	d3 03       	ssrf	0x10
  AVR32_SCIF.idr = AVR32_SCIF_IDR_BODDET_MASK;
80029504:	fe 78 08 00 	mov	r8,-63488
80029508:	34 09       	mov	r9,64
8002950a:	91 19       	st.w	r8[0x4],r9
  AVR32_SCIF.isr;
8002950c:	fe 78 08 00 	mov	r8,-63488
80029510:	70 38       	ld.w	r8,r8[0xc]
  if (global_interrupt_enabled) Enable_global_interrupt();
80029512:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80029516:	30 08       	mov	r8,0
80029518:	f0 09 18 00 	cp.b	r9,r8
8002951c:	c0 20       	breq	80029520 <scif_bod18_disable_irq+0x46>
8002951e:	d5 03       	csrf	0x10
}
80029520:	2f fd       	sub	sp,-4
80029522:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80029526:	00 00       	add	r0,r0
80029528:	80 02       	ld.sh	r2,r0[0x0]
8002952a:	93 68       	st.w	r9[0x18],r8

8002952c <scif_bod18_clear_irq>:

void scif_bod18_clear_irq(void)
{
8002952c:	eb cd 40 80 	pushm	r7,lr
80029530:	1a 97       	mov	r7,sp
  AVR32_SCIF.icr = AVR32_SCIF_ICR_BODDET_MASK;
80029532:	fe 78 08 00 	mov	r8,-63488
80029536:	34 09       	mov	r9,64
80029538:	91 49       	st.w	r8[0x10],r9
}
8002953a:	e3 cd 80 80 	ldm	sp++,r7,pc

8002953e <scif_bod18_get_irq_status>:

unsigned long scif_bod18_get_irq_status(void)
{
8002953e:	eb cd 40 80 	pushm	r7,lr
80029542:	1a 97       	mov	r7,sp
  return ((AVR32_SCIF.isr & AVR32_SCIF_ISR_BODDET_MASK) != 0);
80029544:	fe 78 08 00 	mov	r8,-63488
80029548:	70 38       	ld.w	r8,r8[0xc]
8002954a:	e2 18 00 40 	andl	r8,0x40,COH
8002954e:	5f 18       	srne	r8
}
80029550:	10 9c       	mov	r12,r8
80029552:	e3 cd 80 80 	ldm	sp++,r7,pc

80029556 <scif_bod18_get_irq_enable_bit>:

unsigned long scif_bod18_get_irq_enable_bit(void)
{
80029556:	eb cd 40 80 	pushm	r7,lr
8002955a:	1a 97       	mov	r7,sp
  return ((AVR32_SCIF.imr & AVR32_SCIF_IMR_BODDET_MASK) != 0);
8002955c:	fe 78 08 00 	mov	r8,-63488
80029560:	70 28       	ld.w	r8,r8[0x8]
80029562:	e2 18 00 40 	andl	r8,0x40,COH
80029566:	5f 18       	srne	r8
}
80029568:	10 9c       	mov	r12,r8
8002956a:	e3 cd 80 80 	ldm	sp++,r7,pc

8002956e <scif_bod18_get_level>:

unsigned long scif_bod18_get_level(void)
{
8002956e:	eb cd 40 80 	pushm	r7,lr
80029572:	1a 97       	mov	r7,sp
  return (AVR32_SCIF.bod & AVR32_SCIF_BOD_LEVEL_MASK) >> AVR32_SCIF_BOD_LEVEL_OFFSET;
80029574:	fe 78 08 00 	mov	r8,-63488
80029578:	70 b8       	ld.w	r8,r8[0x2c]
8002957a:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
}
8002957e:	10 9c       	mov	r12,r8
80029580:	e3 cd 80 80 	ldm	sp++,r7,pc

80029584 <scif_bod33_enable_irq>:

void scif_bod33_enable_irq(void)
{
80029584:	eb cd 40 80 	pushm	r7,lr
80029588:	1a 97       	mov	r7,sp
  AVR32_SCIF.ier = AVR32_SCIF_IER_BOD33DET_MASK ;
8002958a:	fe 78 08 00 	mov	r8,-63488
8002958e:	e0 69 00 80 	mov	r9,128
80029592:	91 09       	st.w	r8[0x0],r9
}
80029594:	e3 cd 80 80 	ldm	sp++,r7,pc

80029598 <scif_bod33_disable_irq>:

void scif_bod33_disable_irq(void)
{
80029598:	eb cd 40 c0 	pushm	r6-r7,lr
8002959c:	1a 97       	mov	r7,sp
8002959e:	20 1d       	sub	sp,4
800295a0:	49 26       	lddpc	r6,800295e8 <scif_bod33_disable_irq+0x50>
800295a2:	1e 26       	rsub	r6,pc
   bool global_interrupt_enabled = Is_global_interrupt_enabled();
800295a4:	e1 b8 00 00 	mfsr	r8,0x0
800295a8:	10 9c       	mov	r12,r8
800295aa:	fe b0 f8 bf 	rcall	80028728 <cpu_irq_is_enabled_flags>
800295ae:	18 98       	mov	r8,r12
800295b0:	ef 68 ff ff 	st.b	r7[-1],r8

  if (global_interrupt_enabled) Disable_global_interrupt();
800295b4:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800295b8:	30 08       	mov	r8,0
800295ba:	f0 09 18 00 	cp.b	r9,r8
800295be:	c0 20       	breq	800295c2 <scif_bod33_disable_irq+0x2a>
800295c0:	d3 03       	ssrf	0x10
  AVR32_SCIF.idr = AVR32_SCIF_IDR_BOD33DET_MASK;
800295c2:	fe 78 08 00 	mov	r8,-63488
800295c6:	e0 69 00 80 	mov	r9,128
800295ca:	91 19       	st.w	r8[0x4],r9
  AVR32_SCIF.isr;
800295cc:	fe 78 08 00 	mov	r8,-63488
800295d0:	70 38       	ld.w	r8,r8[0xc]
  if (global_interrupt_enabled) Enable_global_interrupt();
800295d2:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800295d6:	30 08       	mov	r8,0
800295d8:	f0 09 18 00 	cp.b	r9,r8
800295dc:	c0 20       	breq	800295e0 <scif_bod33_disable_irq+0x48>
800295de:	d5 03       	csrf	0x10
}
800295e0:	2f fd       	sub	sp,-4
800295e2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800295e6:	00 00       	add	r0,r0
800295e8:	80 02       	ld.sh	r2,r0[0x0]
800295ea:	94 26       	ld.sh	r6,r10[0x4]

800295ec <scif_bod33_clear_irq>:
 
void scif_bod33_clear_irq(void)
{
800295ec:	eb cd 40 80 	pushm	r7,lr
800295f0:	1a 97       	mov	r7,sp
  AVR32_SCIF.icr = AVR32_SCIF_ICR_BOD33DET_MASK;
800295f2:	fe 78 08 00 	mov	r8,-63488
800295f6:	e0 69 00 80 	mov	r9,128
800295fa:	91 49       	st.w	r8[0x10],r9
}
800295fc:	e3 cd 80 80 	ldm	sp++,r7,pc

80029600 <scif_bod33_get_irq_status>:
 
unsigned long scif_bod33_get_irq_status(void)
{
80029600:	eb cd 40 80 	pushm	r7,lr
80029604:	1a 97       	mov	r7,sp
  return ((AVR32_SCIF.isr & AVR32_SCIF_ISR_BOD33DET_MASK) != 0);
80029606:	fe 78 08 00 	mov	r8,-63488
8002960a:	70 38       	ld.w	r8,r8[0xc]
8002960c:	e2 18 00 80 	andl	r8,0x80,COH
80029610:	5f 18       	srne	r8
}
80029612:	10 9c       	mov	r12,r8
80029614:	e3 cd 80 80 	ldm	sp++,r7,pc

80029618 <scif_bod33_get_irq_enable_bit>:
 
unsigned long scif_bod33_get_irq_enable_bit(void)
{
80029618:	eb cd 40 80 	pushm	r7,lr
8002961c:	1a 97       	mov	r7,sp
  return ((AVR32_SCIF.imr & AVR32_SCIF_IMR_BOD33DET_MASK) != 0);
8002961e:	fe 78 08 00 	mov	r8,-63488
80029622:	70 28       	ld.w	r8,r8[0x8]
80029624:	e2 18 00 80 	andl	r8,0x80,COH
80029628:	5f 18       	srne	r8
}
8002962a:	10 9c       	mov	r12,r8
8002962c:	e3 cd 80 80 	ldm	sp++,r7,pc

80029630 <scif_bod33_get_level>:
 
unsigned long scif_bod33_get_level(void)
{
80029630:	eb cd 40 80 	pushm	r7,lr
80029634:	1a 97       	mov	r7,sp
  return (AVR32_SCIF.bod33 & AVR32_SCIF_BOD33_LEVEL_MASK) >> AVR32_SCIF_BOD33_LEVEL_OFFSET;
80029636:	fe 78 08 00 	mov	r8,-63488
8002963a:	70 d8       	ld.w	r8,r8[0x34]
8002963c:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
}
80029640:	10 9c       	mov	r12,r8
80029642:	e3 cd 80 80 	ldm	sp++,r7,pc

80029646 <scif_bod50_enable_irq>:

void scif_bod50_enable_irq(void)
{
80029646:	eb cd 40 80 	pushm	r7,lr
8002964a:	1a 97       	mov	r7,sp
  AVR32_SCIF.ier = AVR32_SCIF_IER_BOD50DET_MASK ;
8002964c:	fe 78 08 00 	mov	r8,-63488
80029650:	e0 69 01 00 	mov	r9,256
80029654:	91 09       	st.w	r8[0x0],r9
}
80029656:	e3 cd 80 80 	ldm	sp++,r7,pc

8002965a <scif_bod50_disable_irq>:

void scif_bod50_disable_irq(void)
{
8002965a:	eb cd 40 c0 	pushm	r6-r7,lr
8002965e:	1a 97       	mov	r7,sp
80029660:	20 1d       	sub	sp,4
80029662:	49 26       	lddpc	r6,800296a8 <scif_bod50_disable_irq+0x4e>
80029664:	1e 26       	rsub	r6,pc
   bool global_interrupt_enabled = Is_global_interrupt_enabled();
80029666:	e1 b8 00 00 	mfsr	r8,0x0
8002966a:	10 9c       	mov	r12,r8
8002966c:	fe b0 f8 5e 	rcall	80028728 <cpu_irq_is_enabled_flags>
80029670:	18 98       	mov	r8,r12
80029672:	ef 68 ff ff 	st.b	r7[-1],r8

  if (global_interrupt_enabled) Disable_global_interrupt();
80029676:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8002967a:	30 08       	mov	r8,0
8002967c:	f0 09 18 00 	cp.b	r9,r8
80029680:	c0 20       	breq	80029684 <scif_bod50_disable_irq+0x2a>
80029682:	d3 03       	ssrf	0x10
  AVR32_SCIF.idr = AVR32_SCIF_IDR_BOD50DET_MASK;
80029684:	fe 78 08 00 	mov	r8,-63488
80029688:	e0 69 01 00 	mov	r9,256
8002968c:	91 19       	st.w	r8[0x4],r9
  AVR32_SCIF.isr;
8002968e:	fe 78 08 00 	mov	r8,-63488
80029692:	70 38       	ld.w	r8,r8[0xc]
  if (global_interrupt_enabled) Enable_global_interrupt();
80029694:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80029698:	30 08       	mov	r8,0
8002969a:	f0 09 18 00 	cp.b	r9,r8
8002969e:	c0 20       	breq	800296a2 <scif_bod50_disable_irq+0x48>
800296a0:	d5 03       	csrf	0x10
}
800296a2:	2f fd       	sub	sp,-4
800296a4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800296a8:	80 02       	ld.sh	r2,r0[0x0]
800296aa:	94 e8       	ld.uh	r8,r10[0xc]

800296ac <scif_bod50_clear_irq>:
 
void scif_bod50_clear_irq(void)
{
800296ac:	eb cd 40 80 	pushm	r7,lr
800296b0:	1a 97       	mov	r7,sp
  AVR32_SCIF.icr = AVR32_SCIF_ICR_BOD50DET_MASK;
800296b2:	fe 78 08 00 	mov	r8,-63488
800296b6:	e0 69 01 00 	mov	r9,256
800296ba:	91 49       	st.w	r8[0x10],r9
}
800296bc:	e3 cd 80 80 	ldm	sp++,r7,pc

800296c0 <scif_bod50_get_irq_status>:
 
unsigned long scif_bod50_get_irq_status(void)
{
800296c0:	eb cd 40 80 	pushm	r7,lr
800296c4:	1a 97       	mov	r7,sp
  return ((AVR32_SCIF.isr & AVR32_SCIF_ISR_BOD50DET_MASK) != 0);
800296c6:	fe 78 08 00 	mov	r8,-63488
800296ca:	70 38       	ld.w	r8,r8[0xc]
800296cc:	e2 18 01 00 	andl	r8,0x100,COH
800296d0:	5f 18       	srne	r8
}
800296d2:	10 9c       	mov	r12,r8
800296d4:	e3 cd 80 80 	ldm	sp++,r7,pc

800296d8 <scif_bod50_get_irq_enable_bit>:
 
unsigned long scif_bod50_get_irq_enable_bit(void)
{
800296d8:	eb cd 40 80 	pushm	r7,lr
800296dc:	1a 97       	mov	r7,sp
  return ((AVR32_SCIF.imr & AVR32_SCIF_IMR_BOD50DET_MASK) != 0);
800296de:	fe 78 08 00 	mov	r8,-63488
800296e2:	70 28       	ld.w	r8,r8[0x8]
800296e4:	e2 18 01 00 	andl	r8,0x100,COH
800296e8:	5f 18       	srne	r8
}
800296ea:	10 9c       	mov	r12,r8
800296ec:	e3 cd 80 80 	ldm	sp++,r7,pc

800296f0 <scif_bod50_get_level>:
 
unsigned long scif_bod50_get_level(void)
{
800296f0:	eb cd 40 80 	pushm	r7,lr
800296f4:	1a 97       	mov	r7,sp
  return (AVR32_SCIF.bod50 & AVR32_SCIF_BOD50_LEVEL_MASK) >> AVR32_SCIF_BOD50_LEVEL_OFFSET;
800296f6:	fe 78 08 00 	mov	r8,-63488
800296fa:	70 e8       	ld.w	r8,r8[0x38]
800296fc:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
}
80029700:	10 9c       	mov	r12,r8
80029702:	e3 cd 80 80 	ldm	sp++,r7,pc
	...

80029708 <getBaudDiv>:

#endif


int16_t getBaudDiv(const unsigned int baudrate, uint32_t pba_hz)
{
80029708:	eb cd 40 80 	pushm	r7,lr
8002970c:	1a 97       	mov	r7,sp
8002970e:	20 3d       	sub	sp,12
80029710:	ef 4c ff f8 	st.w	r7[-8],r12
80029714:	ef 4b ff f4 	st.w	r7[-12],r11
  int baudDiv = (pba_hz + baudrate / 2) / baudrate;
80029718:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002971c:	f0 09 16 01 	lsr	r9,r8,0x1
80029720:	ee f8 ff f4 	ld.w	r8,r7[-12]
80029724:	f2 08 00 08 	add	r8,r9,r8
80029728:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002972c:	f0 09 0d 08 	divu	r8,r8,r9
80029730:	ef 48 ff fc 	st.w	r7[-4],r8

  if (baudDiv <= 0 || baudDiv > 255) {
80029734:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029738:	58 08       	cp.w	r8,0
8002973a:	e0 8a 00 08 	brle	8002974a <getBaudDiv+0x42>
8002973e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029742:	e0 48 00 ff 	cp.w	r8,255
80029746:	e0 8a 00 04 	brle	8002974e <getBaudDiv+0x46>
    return -1;
8002974a:	3f f8       	mov	r8,-1
8002974c:	c0 48       	rjmp	80029754 <getBaudDiv+0x4c>
  }

  return baudDiv;
8002974e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029752:	5c 88       	casts.h	r8
}
80029754:	10 9c       	mov	r12,r8
80029756:	2f dd       	sub	sp,-12
80029758:	e3 cd 80 80 	ldm	sp++,r7,pc

8002975c <spi_initSlave>:

spi_status_t spi_initSlave(volatile avr32_spi_t *spi,
                           unsigned char bits,
                           unsigned char spi_mode)
{
8002975c:	eb cd 40 80 	pushm	r7,lr
80029760:	1a 97       	mov	r7,sp
80029762:	20 3d       	sub	sp,12
80029764:	ef 4c ff fc 	st.w	r7[-4],r12
80029768:	16 99       	mov	r9,r11
8002976a:	14 98       	mov	r8,r10
8002976c:	ef 69 ff f8 	st.b	r7[-8],r9
80029770:	ef 68 ff f4 	st.b	r7[-12],r8
  if (spi_mode > 3 ||
80029774:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80029778:	30 38       	mov	r8,3
8002977a:	f0 09 18 00 	cp.b	r9,r8
8002977e:	e0 8b 00 10 	brhi	8002979e <spi_initSlave+0x42>
80029782:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80029786:	30 78       	mov	r8,7
80029788:	f0 09 18 00 	cp.b	r9,r8
8002978c:	e0 88 00 09 	brls	8002979e <spi_initSlave+0x42>
80029790:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80029794:	31 08       	mov	r8,16
80029796:	f0 09 18 00 	cp.b	r9,r8
8002979a:	e0 88 00 04 	brls	800297a2 <spi_initSlave+0x46>
      bits < 8 || bits > 16) {
    return SPI_ERROR_ARGUMENT;
8002979e:	30 28       	mov	r8,2
800297a0:	c1 f8       	rjmp	800297de <spi_initSlave+0x82>
  }

  // Reset.
  spi->cr = AVR32_SPI_CR_SWRST_MASK;
800297a2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800297a6:	e0 69 00 80 	mov	r9,128
800297aa:	91 09       	st.w	r8[0x0],r9

  // Will use CSR0 offsets; these are the same for CSR0 to CSR3.
  spi->csr0 = ((spi_mode >> 1) << AVR32_SPI_CSR0_CPOL_OFFSET) |
800297ac:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800297b0:	a1 98       	lsr	r8,0x1
800297b2:	5c 58       	castu.b	r8
800297b4:	10 99       	mov	r9,r8
              (((spi_mode & 0x1) ^ 0x1) << AVR32_SPI_CSR0_NCPHA_OFFSET) |
800297b6:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800297ba:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800297be:	c0 31       	brne	800297c4 <spi_initSlave+0x68>
800297c0:	30 28       	mov	r8,2
800297c2:	c0 28       	rjmp	800297c6 <spi_initSlave+0x6a>
800297c4:	30 08       	mov	r8,0
800297c6:	10 49       	or	r9,r8
              ((bits - 8) << AVR32_SPI_CSR0_BITS_OFFSET);
800297c8:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800297cc:	20 88       	sub	r8,8
800297ce:	a5 68       	lsl	r8,0x4

  // Reset.
  spi->cr = AVR32_SPI_CR_SWRST_MASK;

  // Will use CSR0 offsets; these are the same for CSR0 to CSR3.
  spi->csr0 = ((spi_mode >> 1) << AVR32_SPI_CSR0_CPOL_OFFSET) |
800297d0:	f3 e8 10 08 	or	r8,r9,r8
800297d4:	10 99       	mov	r9,r8
800297d6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800297da:	91 c9       	st.w	r8[0x30],r9
              (((spi_mode & 0x1) ^ 0x1) << AVR32_SPI_CSR0_NCPHA_OFFSET) |
              ((bits - 8) << AVR32_SPI_CSR0_BITS_OFFSET);

  return SPI_OK;
800297dc:	30 08       	mov	r8,0
}
800297de:	10 9c       	mov	r12,r8
800297e0:	2f dd       	sub	sp,-12
800297e2:	e3 cd 80 80 	ldm	sp++,r7,pc

800297e6 <spi_initTest>:


spi_status_t spi_initTest(volatile avr32_spi_t *spi)
{
800297e6:	eb cd 40 80 	pushm	r7,lr
800297ea:	1a 97       	mov	r7,sp
800297ec:	20 1d       	sub	sp,4
800297ee:	ef 4c ff fc 	st.w	r7[-4],r12
  // Reset.
  spi->cr = AVR32_SPI_CR_SWRST_MASK;
800297f2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800297f6:	e0 69 00 80 	mov	r9,128
800297fa:	91 09       	st.w	r8[0x0],r9
  spi->mr |= AVR32_SPI_MR_MSTR_MASK | // Master Mode.
800297fc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029800:	70 18       	ld.w	r8,r8[0x4]
80029802:	10 99       	mov	r9,r8
80029804:	e8 19 00 81 	orl	r9,0x81
80029808:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002980c:	91 19       	st.w	r8[0x4],r9
             AVR32_SPI_MR_LLB_MASK;   // Local Loopback.

  return SPI_OK;
8002980e:	30 08       	mov	r8,0
}
80029810:	10 9c       	mov	r12,r8
80029812:	2f fd       	sub	sp,-4
80029814:	e3 cd 80 80 	ldm	sp++,r7,pc

80029818 <spi_initMaster>:


spi_status_t spi_initMaster(volatile avr32_spi_t *spi, const spi_options_t *options)
{
80029818:	eb cd 40 80 	pushm	r7,lr
8002981c:	1a 97       	mov	r7,sp
8002981e:	20 3d       	sub	sp,12
80029820:	ef 4c ff f8 	st.w	r7[-8],r12
80029824:	ef 4b ff f4 	st.w	r7[-12],r11
  u_avr32_spi_mr_t u_avr32_spi_mr;

  if (options->modfdis > 1) {
80029828:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002982c:	f1 39 00 0d 	ld.ub	r9,r8[13]
80029830:	30 18       	mov	r8,1
80029832:	f0 09 18 00 	cp.b	r9,r8
80029836:	e0 88 00 04 	brls	8002983e <spi_initMaster+0x26>
    return SPI_ERROR_ARGUMENT;
8002983a:	30 28       	mov	r8,2
8002983c:	c3 48       	rjmp	800298a4 <spi_initMaster+0x8c>
  }

  // Reset.
  spi->cr = AVR32_SPI_CR_SWRST_MASK;
8002983e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029842:	e0 69 00 80 	mov	r9,128
80029846:	91 09       	st.w	r8[0x0],r9

  // Master Mode.
  u_avr32_spi_mr.mr = spi->mr;
80029848:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002984c:	70 18       	ld.w	r8,r8[0x4]
8002984e:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_spi_mr.MR.mstr = 1;
80029852:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029856:	30 19       	mov	r9,1
80029858:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
8002985c:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_spi_mr.MR.modfdis = options->modfdis;
80029860:	ee f8 ff f4 	ld.w	r8,r7[-12]
80029864:	f1 38 00 0d 	ld.ub	r8,r8[13]
80029868:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002986c:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80029870:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029874:	f1 d9 d0 81 	bfins	r8,r9,0x4,0x1
80029878:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_spi_mr.MR.llb = 0;
8002987c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029880:	30 09       	mov	r9,0
80029882:	f1 d9 d0 e1 	bfins	r8,r9,0x7,0x1
80029886:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_spi_mr.MR.pcs = (1 << AVR32_SPI_MR_PCS_SIZE) - 1;
8002988a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002988e:	30 f9       	mov	r9,15
80029890:	f1 d9 d2 04 	bfins	r8,r9,0x10,0x4
80029894:	ef 48 ff fc 	st.w	r7[-4],r8
  spi->mr = u_avr32_spi_mr.mr;
80029898:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002989c:	ee f8 ff f8 	ld.w	r8,r7[-8]
800298a0:	91 19       	st.w	r8[0x4],r9

  return SPI_OK;
800298a2:	30 08       	mov	r8,0
}
800298a4:	10 9c       	mov	r12,r8
800298a6:	2f dd       	sub	sp,-12
800298a8:	e3 cd 80 80 	ldm	sp++,r7,pc

800298ac <spi_selectionMode>:

spi_status_t spi_selectionMode(volatile avr32_spi_t *spi,
                               unsigned char variable_ps,
                               unsigned char pcs_decode,
                               unsigned char delay)
{
800298ac:	eb cd 40 80 	pushm	r7,lr
800298b0:	1a 97       	mov	r7,sp
800298b2:	20 5d       	sub	sp,20
800298b4:	ef 4c ff f8 	st.w	r7[-8],r12
800298b8:	12 98       	mov	r8,r9
800298ba:	16 99       	mov	r9,r11
800298bc:	ef 69 ff f4 	st.b	r7[-12],r9
800298c0:	14 99       	mov	r9,r10
800298c2:	ef 69 ff f0 	st.b	r7[-16],r9
800298c6:	ef 68 ff ec 	st.b	r7[-20],r8
  u_avr32_spi_mr_t u_avr32_spi_mr;

  if (variable_ps > 1 ||
800298ca:	ef 39 ff f4 	ld.ub	r9,r7[-12]
800298ce:	30 18       	mov	r8,1
800298d0:	f0 09 18 00 	cp.b	r9,r8
800298d4:	e0 8b 00 09 	brhi	800298e6 <spi_selectionMode+0x3a>
800298d8:	ef 39 ff f0 	ld.ub	r9,r7[-16]
800298dc:	30 18       	mov	r8,1
800298de:	f0 09 18 00 	cp.b	r9,r8
800298e2:	e0 88 00 04 	brls	800298ea <spi_selectionMode+0x3e>
      pcs_decode > 1) {
    return SPI_ERROR_ARGUMENT;
800298e6:	30 28       	mov	r8,2
800298e8:	c2 88       	rjmp	80029938 <spi_selectionMode+0x8c>
  }

  u_avr32_spi_mr.mr = spi->mr;
800298ea:	ee f8 ff f8 	ld.w	r8,r7[-8]
800298ee:	70 18       	ld.w	r8,r8[0x4]
800298f0:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_spi_mr.MR.ps = variable_ps;
800298f4:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800298f8:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800298fc:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80029900:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029904:	f1 d9 d0 21 	bfins	r8,r9,0x1,0x1
80029908:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_spi_mr.MR.pcsdec = pcs_decode;
8002990c:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80029910:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80029914:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80029918:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002991c:	f1 d9 d0 41 	bfins	r8,r9,0x2,0x1
80029920:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_spi_mr.MR.dlybcs = delay;
80029924:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80029928:	ef 68 ff fc 	st.b	r7[-4],r8
  spi->mr = u_avr32_spi_mr.mr;
8002992c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80029930:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029934:	91 19       	st.w	r8[0x4],r9

  return SPI_OK;
80029936:	30 08       	mov	r8,0
}
80029938:	10 9c       	mov	r12,r8
8002993a:	2f bd       	sub	sp,-20
8002993c:	e3 cd 80 80 	ldm	sp++,r7,pc

80029940 <spi_selectChip>:


spi_status_t spi_selectChip(volatile avr32_spi_t *spi, unsigned char chip)
{
80029940:	eb cd 40 80 	pushm	r7,lr
80029944:	1a 97       	mov	r7,sp
80029946:	20 2d       	sub	sp,8
80029948:	ef 4c ff fc 	st.w	r7[-4],r12
8002994c:	16 98       	mov	r8,r11
8002994e:	ef 68 ff f8 	st.b	r7[-8],r8
#ifdef FREERTOS_USED
  while (pdFALSE == xSemaphoreTake(xSPIMutex, 20));
#endif

  // Assert all lines; no peripheral is selected.
  spi->mr |= AVR32_SPI_MR_PCS_MASK;
80029952:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029956:	70 18       	ld.w	r8,r8[0x4]
80029958:	10 99       	mov	r9,r8
8002995a:	ea 19 00 0f 	orh	r9,0xf
8002995e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029962:	91 19       	st.w	r8[0x4],r9

  if (spi->mr & AVR32_SPI_MR_PCSDEC_MASK) {
80029964:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029968:	70 18       	ld.w	r8,r8[0x4]
8002996a:	e2 18 00 04 	andl	r8,0x4,COH
8002996e:	c1 90       	breq	800299a0 <spi_selectChip+0x60>
    // The signal is decoded; allow up to 15 chips.
    if (chip > 14) {
80029970:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80029974:	30 e8       	mov	r8,14
80029976:	f0 09 18 00 	cp.b	r9,r8
8002997a:	e0 88 00 04 	brls	80029982 <spi_selectChip+0x42>
      return SPI_ERROR_ARGUMENT;
8002997e:	30 28       	mov	r8,2
80029980:	c2 88       	rjmp	800299d0 <spi_selectChip+0x90>
    }

    spi->mr &= ~AVR32_SPI_MR_PCS_MASK | (chip << AVR32_SPI_MR_PCS_OFFSET);
80029982:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029986:	70 19       	ld.w	r9,r8[0x4]
80029988:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8002998c:	b1 68       	lsl	r8,0x10
8002998e:	ea 18 ff f0 	orh	r8,0xfff0
80029992:	e8 18 ff ff 	orl	r8,0xffff
80029996:	10 69       	and	r9,r8
80029998:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002999c:	91 19       	st.w	r8[0x4],r9
8002999e:	c1 88       	rjmp	800299ce <spi_selectChip+0x8e>
  } else {
    if (chip > 3) {
800299a0:	ef 39 ff f8 	ld.ub	r9,r7[-8]
800299a4:	30 38       	mov	r8,3
800299a6:	f0 09 18 00 	cp.b	r9,r8
800299aa:	e0 88 00 04 	brls	800299b2 <spi_selectChip+0x72>
      return SPI_ERROR_ARGUMENT;
800299ae:	30 28       	mov	r8,2
800299b0:	c1 08       	rjmp	800299d0 <spi_selectChip+0x90>
    }

    spi->mr &= ~(1 << (AVR32_SPI_MR_PCS_OFFSET + chip));
800299b2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800299b6:	70 19       	ld.w	r9,r8[0x4]
800299b8:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800299bc:	2f 08       	sub	r8,-16
800299be:	30 1a       	mov	r10,1
800299c0:	f4 08 09 48 	lsl	r8,r10,r8
800299c4:	5c d8       	com	r8
800299c6:	10 69       	and	r9,r8
800299c8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800299cc:	91 19       	st.w	r8[0x4],r9
  }

  return SPI_OK;
800299ce:	30 08       	mov	r8,0
}
800299d0:	10 9c       	mov	r12,r8
800299d2:	2f ed       	sub	sp,-8
800299d4:	e3 cd 80 80 	ldm	sp++,r7,pc

800299d8 <spi_unselectChip>:


spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, unsigned char chip)
{
800299d8:	eb cd 40 80 	pushm	r7,lr
800299dc:	1a 97       	mov	r7,sp
800299de:	20 3d       	sub	sp,12
800299e0:	ef 4c ff f8 	st.w	r7[-8],r12
800299e4:	16 98       	mov	r8,r11
800299e6:	ef 68 ff f4 	st.b	r7[-12],r8
  unsigned int timeout = SPI_TIMEOUT;
800299ea:	e0 68 3a 98 	mov	r8,15000
800299ee:	ef 48 ff fc 	st.w	r7[-4],r8

  while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
800299f2:	c0 f8       	rjmp	80029a10 <spi_unselectChip+0x38>
    if (!timeout--) {
800299f4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800299f8:	58 08       	cp.w	r8,0
800299fa:	5f 08       	sreq	r8
800299fc:	5c 58       	castu.b	r8
800299fe:	ee f9 ff fc 	ld.w	r9,r7[-4]
80029a02:	20 19       	sub	r9,1
80029a04:	ef 49 ff fc 	st.w	r7[-4],r9
80029a08:	58 08       	cp.w	r8,0
80029a0a:	c0 30       	breq	80029a10 <spi_unselectChip+0x38>
      return SPI_ERROR_TIMEOUT;
80029a0c:	30 18       	mov	r8,1
80029a0e:	c1 68       	rjmp	80029a3a <spi_unselectChip+0x62>

spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, unsigned char chip)
{
  unsigned int timeout = SPI_TIMEOUT;

  while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
80029a10:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029a14:	70 48       	ld.w	r8,r8[0x10]
80029a16:	e2 18 02 00 	andl	r8,0x200,COH
80029a1a:	ce d0       	breq	800299f4 <spi_unselectChip+0x1c>
      return SPI_ERROR_TIMEOUT;
    }
  }

  // Assert all lines; no peripheral is selected.
  spi->mr |= AVR32_SPI_MR_PCS_MASK;
80029a1c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029a20:	70 18       	ld.w	r8,r8[0x4]
80029a22:	10 99       	mov	r9,r8
80029a24:	ea 19 00 0f 	orh	r9,0xf
80029a28:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029a2c:	91 19       	st.w	r8[0x4],r9

  // Last transfer, so deassert the current NPCS if CSAAT is set.
  spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
80029a2e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029a32:	fc 19 01 00 	movh	r9,0x100
80029a36:	91 09       	st.w	r8[0x0],r9

#ifdef FREERTOS_USED
  xSemaphoreGive(xSPIMutex);
#endif

  return SPI_OK;
80029a38:	30 08       	mov	r8,0
}
80029a3a:	10 9c       	mov	r12,r8
80029a3c:	2f dd       	sub	sp,-12
80029a3e:	e3 cd 80 80 	ldm	sp++,r7,pc

80029a42 <spi_setupChipReg>:


spi_status_t spi_setupChipReg(volatile avr32_spi_t *spi,
                              const spi_options_t *options,
                              uint32_t pba_hz)
{
80029a42:	eb cd 40 c0 	pushm	r6-r7,lr
80029a46:	1a 97       	mov	r7,sp
80029a48:	20 5d       	sub	sp,20
80029a4a:	4e 06       	lddpc	r6,80029bc8 <spi_setupChipReg+0x186>
80029a4c:	1e 26       	rsub	r6,pc
80029a4e:	ef 4c ff f4 	st.w	r7[-12],r12
80029a52:	ef 4b ff f0 	st.w	r7[-16],r11
80029a56:	ef 4a ff ec 	st.w	r7[-20],r10
  u_avr32_spi_csr_t u_avr32_spi_csr;

  if (options->spi_mode > 3 ||
80029a5a:	ee f8 ff f0 	ld.w	r8,r7[-16]
80029a5e:	f1 39 00 0c 	ld.ub	r9,r8[12]
80029a62:	30 38       	mov	r8,3
80029a64:	f0 09 18 00 	cp.b	r9,r8
80029a68:	e0 8b 00 1d 	brhi	80029aa2 <spi_setupChipReg+0x60>
      options->stay_act > 1 ||
80029a6c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80029a70:	f1 39 00 0b 	ld.ub	r9,r8[11]
                              const spi_options_t *options,
                              uint32_t pba_hz)
{
  u_avr32_spi_csr_t u_avr32_spi_csr;

  if (options->spi_mode > 3 ||
80029a74:	30 18       	mov	r8,1
80029a76:	f0 09 18 00 	cp.b	r9,r8
80029a7a:	e0 8b 00 14 	brhi	80029aa2 <spi_setupChipReg+0x60>
      options->stay_act > 1 ||
      options->bits < 8 || options->bits > 16) {
80029a7e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80029a82:	f1 39 00 08 	ld.ub	r9,r8[8]
                              const spi_options_t *options,
                              uint32_t pba_hz)
{
  u_avr32_spi_csr_t u_avr32_spi_csr;

  if (options->spi_mode > 3 ||
80029a86:	30 78       	mov	r8,7
80029a88:	f0 09 18 00 	cp.b	r9,r8
80029a8c:	e0 88 00 0b 	brls	80029aa2 <spi_setupChipReg+0x60>
      options->stay_act > 1 ||
      options->bits < 8 || options->bits > 16) {
80029a90:	ee f8 ff f0 	ld.w	r8,r7[-16]
80029a94:	f1 39 00 08 	ld.ub	r9,r8[8]
                              const spi_options_t *options,
                              uint32_t pba_hz)
{
  u_avr32_spi_csr_t u_avr32_spi_csr;

  if (options->spi_mode > 3 ||
80029a98:	31 08       	mov	r8,16
80029a9a:	f0 09 18 00 	cp.b	r9,r8
80029a9e:	e0 88 00 04 	brls	80029aa6 <spi_setupChipReg+0x64>
      options->stay_act > 1 ||
      options->bits < 8 || options->bits > 16) {
    return SPI_ERROR_ARGUMENT;
80029aa2:	30 28       	mov	r8,2
80029aa4:	c8 d8       	rjmp	80029bbe <spi_setupChipReg+0x17c>
  }

  int baudDiv = getBaudDiv(options->baudrate, pba_hz);
80029aa6:	ee f8 ff f0 	ld.w	r8,r7[-16]
80029aaa:	70 18       	ld.w	r8,r8[0x4]
80029aac:	ee fb ff ec 	ld.w	r11,r7[-20]
80029ab0:	10 9c       	mov	r12,r8
80029ab2:	f0 16 01 18 	mcall	r6[1120]
80029ab6:	18 98       	mov	r8,r12
80029ab8:	ef 48 ff fc 	st.w	r7[-4],r8

  if (baudDiv < 0) {
80029abc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029ac0:	58 08       	cp.w	r8,0
80029ac2:	c0 34       	brge	80029ac8 <spi_setupChipReg+0x86>
    return SPI_ERROR_ARGUMENT;
80029ac4:	30 28       	mov	r8,2
80029ac6:	c7 c8       	rjmp	80029bbe <spi_setupChipReg+0x17c>
  }

  // Will use CSR0 offsets; these are the same for CSR0 to CSR3.
  u_avr32_spi_csr.csr = 0;
80029ac8:	30 08       	mov	r8,0
80029aca:	ef 48 ff f8 	st.w	r7[-8],r8
  u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
80029ace:	ee f8 ff f0 	ld.w	r8,r7[-16]
80029ad2:	f1 38 00 0c 	ld.ub	r8,r8[12]
80029ad6:	a1 98       	lsr	r8,0x1
80029ad8:	5c 58       	castu.b	r8
80029ada:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80029ade:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80029ae2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029ae6:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
80029aea:	ef 48 ff f8 	st.w	r7[-8],r8
  u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
80029aee:	ee f8 ff f0 	ld.w	r8,r7[-16]
80029af2:	f1 38 00 0c 	ld.ub	r8,r8[12]
80029af6:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80029afa:	5f 08       	sreq	r8
80029afc:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80029b00:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029b04:	f1 d9 d0 21 	bfins	r8,r9,0x1,0x1
80029b08:	ef 48 ff f8 	st.w	r7[-8],r8
  u_avr32_spi_csr.CSR.csaat  = options->stay_act;
80029b0c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80029b10:	f1 38 00 0b 	ld.ub	r8,r8[11]
80029b14:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80029b18:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80029b1c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029b20:	f1 d9 d0 61 	bfins	r8,r9,0x3,0x1
80029b24:	ef 48 ff f8 	st.w	r7[-8],r8
  u_avr32_spi_csr.CSR.bits   = options->bits - 8;
80029b28:	ee f8 ff f0 	ld.w	r8,r7[-16]
80029b2c:	f1 38 00 08 	ld.ub	r8,r8[8]
80029b30:	20 88       	sub	r8,8
80029b32:	5c 58       	castu.b	r8
80029b34:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80029b38:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80029b3c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029b40:	f1 d9 d0 84 	bfins	r8,r9,0x4,0x4
80029b44:	ef 48 ff f8 	st.w	r7[-8],r8
  u_avr32_spi_csr.CSR.scbr   = baudDiv;
80029b48:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029b4c:	5c 58       	castu.b	r8
80029b4e:	ef 68 ff fa 	st.b	r7[-6],r8
  u_avr32_spi_csr.CSR.dlybs  = options->spck_delay;
80029b52:	ee f8 ff f0 	ld.w	r8,r7[-16]
80029b56:	f1 38 00 09 	ld.ub	r8,r8[9]
80029b5a:	ef 68 ff f9 	st.b	r7[-7],r8
  u_avr32_spi_csr.CSR.dlybct = options->trans_delay;
80029b5e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80029b62:	f1 38 00 0a 	ld.ub	r8,r8[10]
80029b66:	ef 68 ff f8 	st.b	r7[-8],r8

  switch(options->reg) {
80029b6a:	ee f8 ff f0 	ld.w	r8,r7[-16]
80029b6e:	11 88       	ld.ub	r8,r8[0x0]
80029b70:	58 18       	cp.w	r8,1
80029b72:	c1 10       	breq	80029b94 <spi_setupChipReg+0x152>
80029b74:	e0 89 00 05 	brgt	80029b7e <spi_setupChipReg+0x13c>
80029b78:	58 08       	cp.w	r8,0
80029b7a:	c0 70       	breq	80029b88 <spi_setupChipReg+0x146>
80029b7c:	c1 e8       	rjmp	80029bb8 <spi_setupChipReg+0x176>
80029b7e:	58 28       	cp.w	r8,2
80029b80:	c1 00       	breq	80029ba0 <spi_setupChipReg+0x15e>
80029b82:	58 38       	cp.w	r8,3
80029b84:	c1 40       	breq	80029bac <spi_setupChipReg+0x16a>
80029b86:	c1 98       	rjmp	80029bb8 <spi_setupChipReg+0x176>
    case 0:
      spi->csr0 = u_avr32_spi_csr.csr;
80029b88:	ee f9 ff f8 	ld.w	r9,r7[-8]
80029b8c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80029b90:	91 c9       	st.w	r8[0x30],r9
      break;
80029b92:	c1 58       	rjmp	80029bbc <spi_setupChipReg+0x17a>
    case 1:
      spi->csr1 = u_avr32_spi_csr.csr;
80029b94:	ee f9 ff f8 	ld.w	r9,r7[-8]
80029b98:	ee f8 ff f4 	ld.w	r8,r7[-12]
80029b9c:	91 d9       	st.w	r8[0x34],r9
      break;
80029b9e:	c0 f8       	rjmp	80029bbc <spi_setupChipReg+0x17a>
    case 2:
      spi->csr2 = u_avr32_spi_csr.csr;
80029ba0:	ee f9 ff f8 	ld.w	r9,r7[-8]
80029ba4:	ee f8 ff f4 	ld.w	r8,r7[-12]
80029ba8:	91 e9       	st.w	r8[0x38],r9
      break;
80029baa:	c0 98       	rjmp	80029bbc <spi_setupChipReg+0x17a>
    case 3:
      spi->csr3 = u_avr32_spi_csr.csr;
80029bac:	ee f9 ff f8 	ld.w	r9,r7[-8]
80029bb0:	ee f8 ff f4 	ld.w	r8,r7[-12]
80029bb4:	91 f9       	st.w	r8[0x3c],r9
      break;
80029bb6:	c0 38       	rjmp	80029bbc <spi_setupChipReg+0x17a>
    default:
      return SPI_ERROR_ARGUMENT;
80029bb8:	30 28       	mov	r8,2
80029bba:	c0 28       	rjmp	80029bbe <spi_setupChipReg+0x17c>
      while(1);
    }
  }
#endif

  return SPI_OK;
80029bbc:	30 08       	mov	r8,0
}
80029bbe:	10 9c       	mov	r12,r8
80029bc0:	2f bd       	sub	sp,-20
80029bc2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80029bc6:	00 00       	add	r0,r0
80029bc8:	80 02       	ld.sh	r2,r0[0x0]
80029bca:	98 d0       	ld.uh	r0,r12[0xa]

80029bcc <spi_enable>:


void spi_enable(volatile avr32_spi_t *spi)
{
80029bcc:	eb cd 40 80 	pushm	r7,lr
80029bd0:	1a 97       	mov	r7,sp
80029bd2:	20 1d       	sub	sp,4
80029bd4:	ef 4c ff fc 	st.w	r7[-4],r12
  spi->cr = AVR32_SPI_CR_SPIEN_MASK;
80029bd8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029bdc:	30 19       	mov	r9,1
80029bde:	91 09       	st.w	r8[0x0],r9
}
80029be0:	2f fd       	sub	sp,-4
80029be2:	e3 cd 80 80 	ldm	sp++,r7,pc

80029be6 <spi_disable>:


void spi_disable(volatile avr32_spi_t *spi)
{
80029be6:	eb cd 40 80 	pushm	r7,lr
80029bea:	1a 97       	mov	r7,sp
80029bec:	20 1d       	sub	sp,4
80029bee:	ef 4c ff fc 	st.w	r7[-4],r12
  spi->cr = AVR32_SPI_CR_SPIDIS_MASK;
80029bf2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029bf6:	30 29       	mov	r9,2
80029bf8:	91 09       	st.w	r8[0x0],r9
}
80029bfa:	2f fd       	sub	sp,-4
80029bfc:	e3 cd 80 80 	ldm	sp++,r7,pc

80029c00 <spi_is_enabled>:


int spi_is_enabled(volatile avr32_spi_t *spi)
{
80029c00:	eb cd 40 80 	pushm	r7,lr
80029c04:	1a 97       	mov	r7,sp
80029c06:	20 1d       	sub	sp,4
80029c08:	ef 4c ff fc 	st.w	r7[-4],r12
  return (spi->sr & AVR32_SPI_SR_SPIENS_MASK) != 0;
80029c0c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029c10:	70 48       	ld.w	r8,r8[0x10]
80029c12:	e6 18 00 01 	andh	r8,0x1,COH
80029c16:	5f 18       	srne	r8
}
80029c18:	10 9c       	mov	r12,r8
80029c1a:	2f fd       	sub	sp,-4
80029c1c:	e3 cd 80 80 	ldm	sp++,r7,pc

80029c20 <spi_writeRegisterEmptyCheck>:

unsigned char spi_writeRegisterEmptyCheck(volatile avr32_spi_t *spi)
{
80029c20:	eb cd 40 80 	pushm	r7,lr
80029c24:	1a 97       	mov	r7,sp
80029c26:	20 1d       	sub	sp,4
80029c28:	ef 4c ff fc 	st.w	r7[-4],r12
  return ((spi->sr & AVR32_SPI_SR_TDRE_MASK) != 0);
80029c2c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029c30:	70 48       	ld.w	r8,r8[0x10]
80029c32:	e2 18 00 02 	andl	r8,0x2,COH
80029c36:	5f 18       	srne	r8
}
80029c38:	10 9c       	mov	r12,r8
80029c3a:	2f fd       	sub	sp,-4
80029c3c:	e3 cd 80 80 	ldm	sp++,r7,pc

80029c40 <spi_write>:


spi_status_t spi_write(volatile avr32_spi_t *spi, uint16_t data)
{
80029c40:	eb cd 40 80 	pushm	r7,lr
80029c44:	1a 97       	mov	r7,sp
80029c46:	20 3d       	sub	sp,12
80029c48:	ef 4c ff f8 	st.w	r7[-8],r12
80029c4c:	16 98       	mov	r8,r11
80029c4e:	ef 58 ff f4 	st.h	r7[-12],r8
  unsigned int timeout = SPI_TIMEOUT;
80029c52:	e0 68 3a 98 	mov	r8,15000
80029c56:	ef 48 ff fc 	st.w	r7[-4],r8

  while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
80029c5a:	c0 f8       	rjmp	80029c78 <spi_write+0x38>
    if (!timeout--) {
80029c5c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029c60:	58 08       	cp.w	r8,0
80029c62:	5f 08       	sreq	r8
80029c64:	5c 58       	castu.b	r8
80029c66:	ee f9 ff fc 	ld.w	r9,r7[-4]
80029c6a:	20 19       	sub	r9,1
80029c6c:	ef 49 ff fc 	st.w	r7[-4],r9
80029c70:	58 08       	cp.w	r8,0
80029c72:	c0 30       	breq	80029c78 <spi_write+0x38>
      return SPI_ERROR_TIMEOUT;
80029c74:	30 18       	mov	r8,1
80029c76:	c0 d8       	rjmp	80029c90 <spi_write+0x50>

spi_status_t spi_write(volatile avr32_spi_t *spi, uint16_t data)
{
  unsigned int timeout = SPI_TIMEOUT;

  while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
80029c78:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029c7c:	70 48       	ld.w	r8,r8[0x10]
80029c7e:	e2 18 00 02 	andl	r8,0x2,COH
80029c82:	ce d0       	breq	80029c5c <spi_write+0x1c>
    if (!timeout--) {
      return SPI_ERROR_TIMEOUT;
    }
  }

  spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
80029c84:	ef 19 ff f4 	ld.uh	r9,r7[-12]
80029c88:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029c8c:	91 39       	st.w	r8[0xc],r9

  return SPI_OK;
80029c8e:	30 08       	mov	r8,0
}
80029c90:	10 9c       	mov	r12,r8
80029c92:	2f dd       	sub	sp,-12
80029c94:	e3 cd 80 80 	ldm	sp++,r7,pc

80029c98 <spi_variableSlaveWrite>:


spi_status_t spi_variableSlaveWrite(volatile avr32_spi_t *spi, uint16_t data,
                                    uint8_t pcs, uint8_t lastxfer)
{
80029c98:	eb cd 40 80 	pushm	r7,lr
80029c9c:	1a 97       	mov	r7,sp
80029c9e:	20 5d       	sub	sp,20
80029ca0:	ef 4c ff f8 	st.w	r7[-8],r12
80029ca4:	12 98       	mov	r8,r9
80029ca6:	16 99       	mov	r9,r11
80029ca8:	ef 59 ff f4 	st.h	r7[-12],r9
80029cac:	14 99       	mov	r9,r10
80029cae:	ef 69 ff f0 	st.b	r7[-16],r9
80029cb2:	ef 68 ff ec 	st.b	r7[-20],r8
  unsigned int timeout = SPI_TIMEOUT;
80029cb6:	e0 68 3a 98 	mov	r8,15000
80029cba:	ef 48 ff fc 	st.w	r7[-4],r8

  if (pcs > 14 || lastxfer > 1) {
80029cbe:	ef 39 ff f0 	ld.ub	r9,r7[-16]
80029cc2:	30 e8       	mov	r8,14
80029cc4:	f0 09 18 00 	cp.b	r9,r8
80029cc8:	e0 8b 00 09 	brhi	80029cda <spi_variableSlaveWrite+0x42>
80029ccc:	ef 39 ff ec 	ld.ub	r9,r7[-20]
80029cd0:	30 18       	mov	r8,1
80029cd2:	f0 09 18 00 	cp.b	r9,r8
80029cd6:	e0 88 00 12 	brls	80029cfa <spi_variableSlaveWrite+0x62>
    return SPI_ERROR_ARGUMENT;
80029cda:	30 28       	mov	r8,2
80029cdc:	c2 68       	rjmp	80029d28 <spi_variableSlaveWrite+0x90>
  }

  while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
    if (!timeout--) {
80029cde:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029ce2:	58 08       	cp.w	r8,0
80029ce4:	5f 08       	sreq	r8
80029ce6:	5c 58       	castu.b	r8
80029ce8:	ee f9 ff fc 	ld.w	r9,r7[-4]
80029cec:	20 19       	sub	r9,1
80029cee:	ef 49 ff fc 	st.w	r7[-4],r9
80029cf2:	58 08       	cp.w	r8,0
80029cf4:	c0 40       	breq	80029cfc <spi_variableSlaveWrite+0x64>
      return SPI_ERROR_TIMEOUT;
80029cf6:	30 18       	mov	r8,1
80029cf8:	c1 88       	rjmp	80029d28 <spi_variableSlaveWrite+0x90>

  if (pcs > 14 || lastxfer > 1) {
    return SPI_ERROR_ARGUMENT;
  }

  while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
80029cfa:	d7 03       	nop
80029cfc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029d00:	70 48       	ld.w	r8,r8[0x10]
80029d02:	e2 18 00 02 	andl	r8,0x2,COH
80029d06:	ce c0       	breq	80029cde <spi_variableSlaveWrite+0x46>
    if (!timeout--) {
      return SPI_ERROR_TIMEOUT;
    }
  }

  spi->tdr = (data << AVR32_SPI_TDR_TD_OFFSET) |
80029d08:	ef 19 ff f4 	ld.uh	r9,r7[-12]
             (pcs << AVR32_SPI_TDR_PCS_OFFSET) |
80029d0c:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80029d10:	b1 68       	lsl	r8,0x10
80029d12:	10 49       	or	r9,r8
             (lastxfer << AVR32_SPI_TDR_LASTXFER_OFFSET);
80029d14:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80029d18:	b9 68       	lsl	r8,0x18
    if (!timeout--) {
      return SPI_ERROR_TIMEOUT;
    }
  }

  spi->tdr = (data << AVR32_SPI_TDR_TD_OFFSET) |
80029d1a:	f3 e8 10 08 	or	r8,r9,r8
80029d1e:	10 99       	mov	r9,r8
80029d20:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029d24:	91 39       	st.w	r8[0xc],r9
             (pcs << AVR32_SPI_TDR_PCS_OFFSET) |
             (lastxfer << AVR32_SPI_TDR_LASTXFER_OFFSET);

  return SPI_OK;
80029d26:	30 08       	mov	r8,0
}
80029d28:	10 9c       	mov	r12,r8
80029d2a:	2f bd       	sub	sp,-20
80029d2c:	e3 cd 80 80 	ldm	sp++,r7,pc

80029d30 <spi_writeEndCheck>:


unsigned char spi_writeEndCheck(volatile avr32_spi_t *spi)
{
80029d30:	eb cd 40 80 	pushm	r7,lr
80029d34:	1a 97       	mov	r7,sp
80029d36:	20 1d       	sub	sp,4
80029d38:	ef 4c ff fc 	st.w	r7[-4],r12
  return ((spi->sr & AVR32_SPI_SR_TXEMPTY_MASK) != 0);
80029d3c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029d40:	70 48       	ld.w	r8,r8[0x10]
80029d42:	e2 18 02 00 	andl	r8,0x200,COH
80029d46:	5f 18       	srne	r8
}
80029d48:	10 9c       	mov	r12,r8
80029d4a:	2f fd       	sub	sp,-4
80029d4c:	e3 cd 80 80 	ldm	sp++,r7,pc

80029d50 <spi_readRegisterFullCheck>:


unsigned char spi_readRegisterFullCheck(volatile avr32_spi_t *spi)
{
80029d50:	eb cd 40 80 	pushm	r7,lr
80029d54:	1a 97       	mov	r7,sp
80029d56:	20 1d       	sub	sp,4
80029d58:	ef 4c ff fc 	st.w	r7[-4],r12
  return ((spi->sr & AVR32_SPI_SR_RDRF_MASK) != 0);
80029d5c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029d60:	70 48       	ld.w	r8,r8[0x10]
80029d62:	5c 58       	castu.b	r8
80029d64:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
}
80029d68:	10 9c       	mov	r12,r8
80029d6a:	2f fd       	sub	sp,-4
80029d6c:	e3 cd 80 80 	ldm	sp++,r7,pc

80029d70 <spi_read>:


spi_status_t spi_read(volatile avr32_spi_t *spi, unsigned short *data)
{
80029d70:	eb cd 40 80 	pushm	r7,lr
80029d74:	1a 97       	mov	r7,sp
80029d76:	20 3d       	sub	sp,12
80029d78:	ef 4c ff f8 	st.w	r7[-8],r12
80029d7c:	ef 4b ff f4 	st.w	r7[-12],r11
  unsigned int timeout = SPI_TIMEOUT;
80029d80:	e0 68 3a 98 	mov	r8,15000
80029d84:	ef 48 ff fc 	st.w	r7[-4],r8

  while ((spi->sr & (AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) !=
80029d88:	c0 f8       	rjmp	80029da6 <spi_read+0x36>
         (AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) {
    if (!timeout--) {
80029d8a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029d8e:	58 08       	cp.w	r8,0
80029d90:	5f 08       	sreq	r8
80029d92:	5c 58       	castu.b	r8
80029d94:	ee f9 ff fc 	ld.w	r9,r7[-4]
80029d98:	20 19       	sub	r9,1
80029d9a:	ef 49 ff fc 	st.w	r7[-4],r9
80029d9e:	58 08       	cp.w	r8,0
80029da0:	c0 30       	breq	80029da6 <spi_read+0x36>
      return SPI_ERROR_TIMEOUT;
80029da2:	30 18       	mov	r8,1
80029da4:	c1 18       	rjmp	80029dc6 <spi_read+0x56>

spi_status_t spi_read(volatile avr32_spi_t *spi, unsigned short *data)
{
  unsigned int timeout = SPI_TIMEOUT;

  while ((spi->sr & (AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) !=
80029da6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029daa:	70 48       	ld.w	r8,r8[0x10]
80029dac:	e2 18 02 01 	andl	r8,0x201,COH
80029db0:	e0 48 02 01 	cp.w	r8,513
80029db4:	ce b1       	brne	80029d8a <spi_read+0x1a>
    if (!timeout--) {
      return SPI_ERROR_TIMEOUT;
    }
  }

  *data = spi->rdr >> AVR32_SPI_RDR_RD_OFFSET;
80029db6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029dba:	70 28       	ld.w	r8,r8[0x8]
80029dbc:	5c 88       	casts.h	r8
80029dbe:	ee f9 ff f4 	ld.w	r9,r7[-12]
80029dc2:	b2 08       	st.h	r9[0x0],r8

  return SPI_OK;
80029dc4:	30 08       	mov	r8,0
}
80029dc6:	10 9c       	mov	r12,r8
80029dc8:	2f dd       	sub	sp,-12
80029dca:	e3 cd 80 80 	ldm	sp++,r7,pc

80029dce <spi_getStatus>:


unsigned char spi_getStatus(volatile avr32_spi_t *spi)
{
80029dce:	eb cd 40 80 	pushm	r7,lr
80029dd2:	1a 97       	mov	r7,sp
80029dd4:	20 3d       	sub	sp,12
80029dd6:	ef 4c ff f4 	st.w	r7[-12],r12
  spi_status_t ret = SPI_OK;
80029dda:	30 08       	mov	r8,0
80029ddc:	ef 48 ff f8 	st.w	r7[-8],r8
  unsigned long sr = spi->sr;
80029de0:	ee f8 ff f4 	ld.w	r8,r7[-12]
80029de4:	70 48       	ld.w	r8,r8[0x10]
80029de6:	ef 48 ff fc 	st.w	r7[-4],r8

  if (sr & AVR32_SPI_SR_OVRES_MASK) {
80029dea:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029dee:	e2 18 00 08 	andl	r8,0x8,COH
80029df2:	c0 40       	breq	80029dfa <spi_getStatus+0x2c>
    ret = SPI_ERROR_OVERRUN;
80029df4:	30 38       	mov	r8,3
80029df6:	ef 48 ff f8 	st.w	r7[-8],r8
  }

  if (sr & AVR32_SPI_SR_MODF_MASK) {
80029dfa:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029dfe:	e2 18 00 04 	andl	r8,0x4,COH
80029e02:	c0 60       	breq	80029e0e <spi_getStatus+0x40>
    ret += SPI_ERROR_MODE_FAULT;
80029e04:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029e08:	2f c8       	sub	r8,-4
80029e0a:	ef 48 ff f8 	st.w	r7[-8],r8
  }

  if (ret == (SPI_ERROR_OVERRUN + SPI_ERROR_MODE_FAULT)) {
80029e0e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029e12:	58 78       	cp.w	r8,7
80029e14:	c0 31       	brne	80029e1a <spi_getStatus+0x4c>
    return SPI_ERROR_OVERRUN_AND_MODE_FAULT;
80029e16:	30 58       	mov	r8,5
80029e18:	c0 b8       	rjmp	80029e2e <spi_getStatus+0x60>
  }
  else if (ret > 0) {
80029e1a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029e1e:	58 08       	cp.w	r8,0
80029e20:	e0 8a 00 06 	brle	80029e2c <spi_getStatus+0x5e>
    return ret;
80029e24:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029e28:	5c 58       	castu.b	r8
80029e2a:	c0 28       	rjmp	80029e2e <spi_getStatus+0x60>
  } else {
    return SPI_OK;
80029e2c:	30 08       	mov	r8,0
  }
}
80029e2e:	10 9c       	mov	r12,r8
80029e30:	2f dd       	sub	sp,-12
80029e32:	e3 cd 80 80 	ldm	sp++,r7,pc
	...

80029e38 <cpu_irq_save>:
#endif

typedef uint32_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
80029e38:	eb cd 40 80 	pushm	r7,lr
80029e3c:	1a 97       	mov	r7,sp
80029e3e:	20 1d       	sub	sp,4
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80029e40:	e1 b8 00 00 	mfsr	r8,0x0
80029e44:	ef 48 ff fc 	st.w	r7[-4],r8
	cpu_irq_disable();
80029e48:	d3 03       	ssrf	0x10

	return flags;
80029e4a:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80029e4e:	10 9c       	mov	r12,r8
80029e50:	2f fd       	sub	sp,-4
80029e52:	e3 cd 80 80 	ldm	sp++,r7,pc

80029e56 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
80029e56:	eb cd 40 80 	pushm	r7,lr
80029e5a:	1a 97       	mov	r7,sp
80029e5c:	20 1d       	sub	sp,4
80029e5e:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
80029e62:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029e66:	e6 18 00 01 	andh	r8,0x1,COH
80029e6a:	5f 08       	sreq	r8
80029e6c:	5c 58       	castu.b	r8
}
80029e6e:	10 9c       	mov	r12,r8
80029e70:	2f fd       	sub	sp,-4
80029e72:	e3 cd 80 80 	ldm	sp++,r7,pc

80029e76 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
80029e76:	eb cd 40 80 	pushm	r7,lr
80029e7a:	1a 97       	mov	r7,sp
80029e7c:	20 1d       	sub	sp,4
80029e7e:	ef 4c ff fc 	st.w	r7[-4],r12
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80029e82:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029e86:	e3 b8 00 00 	mtsr	0x0,r8
#endif
	barrier();
}
80029e8a:	2f fd       	sub	sp,-4
80029e8c:	e3 cd 80 80 	ldm	sp++,r7,pc

80029e90 <twim_master_interrupt_handler>:
/** 
 * \internal  
 * \brief TWI interrupt handler.
 */
ISR(twim_master_interrupt_handler,CONF_TWIM_IRQ_GROUP,CONF_TWIM_IRQ_LEVEL)
{
80029e90:	eb cd 40 c0 	pushm	r6-r7,lr
80029e94:	1a 97       	mov	r7,sp
80029e96:	20 1d       	sub	sp,4
80029e98:	4d 96       	lddpc	r6,80029ffc <twim_master_interrupt_handler+0x16c>
80029e9a:	1e 26       	rsub	r6,pc
	// get masked status register value
	uint32_t status = twim_inst->sr & twim_it_mask;
80029e9c:	ec f8 00 40 	ld.w	r8,r6[64]
80029ea0:	70 08       	ld.w	r8,r8[0x0]
80029ea2:	70 79       	ld.w	r9,r8[0x1c]
80029ea4:	ec f8 00 fc 	ld.w	r8,r6[252]
80029ea8:	70 08       	ld.w	r8,r8[0x0]
80029eaa:	f3 e8 00 08 	and	r8,r9,r8
80029eae:	ef 48 ff fc 	st.w	r7[-4],r8
	// this is a NACK
	if (status & AVR32_TWIM_SR_STD_MASK) {
80029eb2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029eb6:	e2 18 07 00 	andl	r8,0x700,COH
80029eba:	c2 30       	breq	80029f00 <twim_master_interrupt_handler+0x70>
		//if we get a nak, clear the valid bit in cmdr, 
		//otherwise the command will be resent.
		transfer_status =(status & AVR32_TWIM_IER_NAK_MASK) ? 
80029ebc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029ec0:	e2 18 03 00 	andl	r8,0x300,COH
80029ec4:	c0 30       	breq	80029eca <twim_master_interrupt_handler+0x3a>
80029ec6:	3f c8       	mov	r8,-4
80029ec8:	c0 28       	rjmp	80029ecc <twim_master_interrupt_handler+0x3c>
80029eca:	3f e8       	mov	r8,-2
80029ecc:	ec f9 00 78 	ld.w	r9,r6[120]
80029ed0:	93 08       	st.w	r9[0x0],r8
							TWI_RECEIVE_NACK : TWI_ARBITRATION_LOST;
		twim_inst->CMDR.valid = 0;
80029ed2:	ec f8 00 40 	ld.w	r8,r6[64]
80029ed6:	70 09       	ld.w	r9,r8[0x0]
80029ed8:	72 38       	ld.w	r8,r9[0xc]
80029eda:	30 0a       	mov	r10,0
80029edc:	f1 da d1 e1 	bfins	r8,r10,0xf,0x1
80029ee0:	93 38       	st.w	r9[0xc],r8
		twim_inst->scr = ~0UL;
80029ee2:	ec f8 00 40 	ld.w	r8,r6[64]
80029ee6:	70 08       	ld.w	r8,r8[0x0]
80029ee8:	3f f9       	mov	r9,-1
80029eea:	91 b9       	st.w	r8[0x2c],r9
		twim_inst->idr = ~0UL;
80029eec:	ec f8 00 40 	ld.w	r8,r6[64]
80029ef0:	70 08       	ld.w	r8,r8[0x0]
80029ef2:	3f f9       	mov	r9,-1
80029ef4:	91 99       	st.w	r8[0x24],r9
		twim_next = false;
80029ef6:	ec f9 00 b4 	ld.w	r9,r6[180]
80029efa:	30 08       	mov	r8,0
80029efc:	b2 88       	st.b	r9[0x0],r8
80029efe:	c7 a8       	rjmp	80029ff2 <twim_master_interrupt_handler+0x162>
	}
	// this is a RXRDY
	else if (status & AVR32_TWIM_SR_RXRDY_MASK) {
80029f00:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029f04:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80029f08:	5c 58       	castu.b	r8
80029f0a:	c2 d0       	breq	80029f64 <twim_master_interrupt_handler+0xd4>
		// get data from Receive Holding Register
		*twim_rx_data = twim_inst->rhr;
80029f0c:	ec f8 00 b8 	ld.w	r8,r6[184]
80029f10:	70 09       	ld.w	r9,r8[0x0]
80029f12:	ec f8 00 40 	ld.w	r8,r6[64]
80029f16:	70 08       	ld.w	r8,r8[0x0]
80029f18:	70 58       	ld.w	r8,r8[0x14]
80029f1a:	5c 58       	castu.b	r8
80029f1c:	b2 88       	st.b	r9[0x0],r8
		twim_rx_data++;
80029f1e:	ec f8 00 b8 	ld.w	r8,r6[184]
80029f22:	70 08       	ld.w	r8,r8[0x0]
80029f24:	f0 c9 ff ff 	sub	r9,r8,-1
80029f28:	ec f8 00 b8 	ld.w	r8,r6[184]
80029f2c:	91 09       	st.w	r8[0x0],r9
		// decrease recieved bytes number
		twim_rx_nb_bytes--;
80029f2e:	ec f8 01 40 	ld.w	r8,r6[320]
80029f32:	70 08       	ld.w	r8,r8[0x0]
80029f34:	f0 c9 00 01 	sub	r9,r8,1
80029f38:	ec f8 01 40 	ld.w	r8,r6[320]
80029f3c:	91 09       	st.w	r8[0x0],r9
		// receive complete
		if (twim_rx_nb_bytes == 0) {
80029f3e:	ec f8 01 40 	ld.w	r8,r6[320]
80029f42:	70 08       	ld.w	r8,r8[0x0]
80029f44:	58 08       	cp.w	r8,0
80029f46:	c5 61       	brne	80029ff2 <twim_master_interrupt_handler+0x162>
			// finish the receive operation
			twim_inst->idr = AVR32_TWIM_IDR_RXRDY_MASK;
80029f48:	ec f8 00 40 	ld.w	r8,r6[64]
80029f4c:	70 08       	ld.w	r8,r8[0x0]
80029f4e:	30 19       	mov	r9,1
80029f50:	91 99       	st.w	r8[0x24],r9
			// set busy to false
			twim_next = false;
80029f52:	ec f9 00 b4 	ld.w	r9,r6[180]
80029f56:	30 08       	mov	r8,0
80029f58:	b2 88       	st.b	r9[0x0],r8
			transfer_status=true;
80029f5a:	ec f8 00 78 	ld.w	r8,r6[120]
80029f5e:	30 19       	mov	r9,1
80029f60:	91 09       	st.w	r8[0x0],r9
80029f62:	c4 88       	rjmp	80029ff2 <twim_master_interrupt_handler+0x162>
			
		}
	}
	// this is a TXRDY
	else if (status & AVR32_TWIM_SR_TXRDY_MASK) {
80029f64:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029f68:	e2 18 00 02 	andl	r8,0x2,COH
80029f6c:	c4 30       	breq	80029ff2 <twim_master_interrupt_handler+0x162>
		// no more bytes to transmit
		if (twim_tx_nb_bytes == 0) {
80029f6e:	ec f8 00 84 	ld.w	r8,r6[132]
80029f72:	70 08       	ld.w	r8,r8[0x0]
80029f74:	58 08       	cp.w	r8,0
80029f76:	c0 b1       	brne	80029f8c <twim_master_interrupt_handler+0xfc>
			// finish the receive operation
			twim_inst->idr = AVR32_TWIM_IDR_TXRDY_MASK;
80029f78:	ec f8 00 40 	ld.w	r8,r6[64]
80029f7c:	70 08       	ld.w	r8,r8[0x0]
80029f7e:	30 29       	mov	r9,2
80029f80:	91 99       	st.w	r8[0x24],r9
			// set busy to false
			twim_next = false;
80029f82:	ec f9 00 b4 	ld.w	r9,r6[180]
80029f86:	30 08       	mov	r8,0
80029f88:	b2 88       	st.b	r9[0x0],r8
80029f8a:	c3 48       	rjmp	80029ff2 <twim_master_interrupt_handler+0x162>
		} else {
			// put the byte in the Transmit Holding Register
			twim_inst->thr = *twim_tx_data++;
80029f8c:	ec f8 00 40 	ld.w	r8,r6[64]
80029f90:	70 0a       	ld.w	r10,r8[0x0]
80029f92:	ec f8 00 90 	ld.w	r8,r6[144]
80029f96:	70 08       	ld.w	r8,r8[0x0]
80029f98:	11 89       	ld.ub	r9,r8[0x0]
80029f9a:	5c 59       	castu.b	r9
80029f9c:	95 69       	st.w	r10[0x18],r9
80029f9e:	f0 c9 ff ff 	sub	r9,r8,-1
80029fa2:	ec f8 00 90 	ld.w	r8,r6[144]
80029fa6:	91 09       	st.w	r8[0x0],r9
			// decrease transmited bytes number
			twim_tx_nb_bytes--;
80029fa8:	ec f8 00 84 	ld.w	r8,r6[132]
80029fac:	70 08       	ld.w	r8,r8[0x0]
80029fae:	f0 c9 00 01 	sub	r9,r8,1
80029fb2:	ec f8 00 84 	ld.w	r8,r6[132]
80029fb6:	91 09       	st.w	r8[0x0],r9
			if (twim_tx_nb_bytes == 0) {
80029fb8:	ec f8 00 84 	ld.w	r8,r6[132]
80029fbc:	70 08       	ld.w	r8,r8[0x0]
80029fbe:	58 08       	cp.w	r8,0
80029fc0:	c1 91       	brne	80029ff2 <twim_master_interrupt_handler+0x162>
				// Check for next transfer
				if(twim_next) {
80029fc2:	ec f8 00 b4 	ld.w	r8,r6[180]
80029fc6:	11 88       	ld.ub	r8,r8[0x0]
80029fc8:	5c 58       	castu.b	r8
80029fca:	c1 40       	breq	80029ff2 <twim_master_interrupt_handler+0x162>
					twim_next = false;
80029fcc:	ec f9 00 b4 	ld.w	r9,r6[180]
80029fd0:	30 08       	mov	r8,0
80029fd2:	b2 88       	st.b	r9[0x0],r8
					twim_tx_nb_bytes = twim_package->length;
80029fd4:	ec f8 01 e4 	ld.w	r8,r6[484]
80029fd8:	70 08       	ld.w	r8,r8[0x0]
80029fda:	70 49       	ld.w	r9,r8[0x10]
80029fdc:	ec f8 00 84 	ld.w	r8,r6[132]
80029fe0:	91 09       	st.w	r8[0x0],r9
					twim_tx_data = twim_package->buffer;
80029fe2:	ec f8 01 e4 	ld.w	r8,r6[484]
80029fe6:	70 08       	ld.w	r8,r8[0x0]
80029fe8:	70 38       	ld.w	r8,r8[0xc]
80029fea:	10 99       	mov	r9,r8
80029fec:	ec f8 00 90 	ld.w	r8,r6[144]
80029ff0:	91 09       	st.w	r8[0x0],r9
				}
			}
		}
	}
	return;
}
80029ff2:	2f fd       	sub	sp,-4
80029ff4:	e3 cd 40 c0 	ldm	sp++,r6-r7,lr
80029ff8:	d6 03       	rete
80029ffa:	00 00       	add	r0,r0
80029ffc:	80 02       	ld.sh	r2,r0[0x0]
80029ffe:	9d 1e       	st.w	lr[0x4],lr

8002a000 <twim_master_interrupt_handler2>:
/** 
 * \internal  
 * \brief TWI interrupt handler.
 */
ISR(twim_master_interrupt_handler2,AVR32_TWIM1_GROUP,CONF_TWIM_IRQ_LEVEL)
{
8002a000:	eb cd 40 c0 	pushm	r6-r7,lr
8002a004:	1a 97       	mov	r7,sp
8002a006:	20 1d       	sub	sp,4
8002a008:	4d 76       	lddpc	r6,8002a164 <twim_master_interrupt_handler2+0x164>
8002a00a:	1e 26       	rsub	r6,pc
	// get masked status register value
	uint32_t status = twim_inst->sr & twim_it_mask;
8002a00c:	ec f8 00 40 	ld.w	r8,r6[64]
8002a010:	70 08       	ld.w	r8,r8[0x0]
8002a012:	70 79       	ld.w	r9,r8[0x1c]
8002a014:	ec f8 00 fc 	ld.w	r8,r6[252]
8002a018:	70 08       	ld.w	r8,r8[0x0]
8002a01a:	f3 e8 00 08 	and	r8,r9,r8
8002a01e:	ef 48 ff fc 	st.w	r7[-4],r8
	// this is a NACK
	if (status & AVR32_TWIM_SR_STD_MASK) {
8002a022:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a026:	e2 18 07 00 	andl	r8,0x700,COH
8002a02a:	c2 30       	breq	8002a070 <twim_master_interrupt_handler2+0x70>
		//if we get a nak, clear the valid bit in cmdr, 
		//otherwise the command will be resent.
		transfer_status =(status & AVR32_TWIM_IER_NAK_MASK) ? 
8002a02c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a030:	e2 18 03 00 	andl	r8,0x300,COH
8002a034:	c0 30       	breq	8002a03a <twim_master_interrupt_handler2+0x3a>
8002a036:	3f c8       	mov	r8,-4
8002a038:	c0 28       	rjmp	8002a03c <twim_master_interrupt_handler2+0x3c>
8002a03a:	3f e8       	mov	r8,-2
8002a03c:	ec f9 00 78 	ld.w	r9,r6[120]
8002a040:	93 08       	st.w	r9[0x0],r8
							TWI_RECEIVE_NACK : TWI_ARBITRATION_LOST;
		twim_inst->CMDR.valid = 0;
8002a042:	ec f8 00 40 	ld.w	r8,r6[64]
8002a046:	70 09       	ld.w	r9,r8[0x0]
8002a048:	72 38       	ld.w	r8,r9[0xc]
8002a04a:	30 0a       	mov	r10,0
8002a04c:	f1 da d1 e1 	bfins	r8,r10,0xf,0x1
8002a050:	93 38       	st.w	r9[0xc],r8
		twim_inst->scr = ~0UL;
8002a052:	ec f8 00 40 	ld.w	r8,r6[64]
8002a056:	70 08       	ld.w	r8,r8[0x0]
8002a058:	3f f9       	mov	r9,-1
8002a05a:	91 b9       	st.w	r8[0x2c],r9
		twim_inst->idr = ~0UL;
8002a05c:	ec f8 00 40 	ld.w	r8,r6[64]
8002a060:	70 08       	ld.w	r8,r8[0x0]
8002a062:	3f f9       	mov	r9,-1
8002a064:	91 99       	st.w	r8[0x24],r9
		twim_next = false;
8002a066:	ec f9 00 b4 	ld.w	r9,r6[180]
8002a06a:	30 08       	mov	r8,0
8002a06c:	b2 88       	st.b	r9[0x0],r8
8002a06e:	c7 68       	rjmp	8002a15a <twim_master_interrupt_handler2+0x15a>
	}
	// this is a RXRDY
	else if (status & AVR32_TWIM_SR_RXRDY_MASK) {
8002a070:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a074:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002a078:	5c 58       	castu.b	r8
8002a07a:	c2 90       	breq	8002a0cc <twim_master_interrupt_handler2+0xcc>
		// get data from Receive Holding Register
		*twim_rx_data = twim_inst->rhr;
8002a07c:	ec f8 00 b8 	ld.w	r8,r6[184]
8002a080:	70 09       	ld.w	r9,r8[0x0]
8002a082:	ec f8 00 40 	ld.w	r8,r6[64]
8002a086:	70 08       	ld.w	r8,r8[0x0]
8002a088:	70 58       	ld.w	r8,r8[0x14]
8002a08a:	5c 58       	castu.b	r8
8002a08c:	b2 88       	st.b	r9[0x0],r8
		twim_rx_data++;
8002a08e:	ec f8 00 b8 	ld.w	r8,r6[184]
8002a092:	70 08       	ld.w	r8,r8[0x0]
8002a094:	f0 c9 ff ff 	sub	r9,r8,-1
8002a098:	ec f8 00 b8 	ld.w	r8,r6[184]
8002a09c:	91 09       	st.w	r8[0x0],r9
		// decrease recieved bytes number
		twim_rx_nb_bytes--;
8002a09e:	ec f8 01 40 	ld.w	r8,r6[320]
8002a0a2:	70 08       	ld.w	r8,r8[0x0]
8002a0a4:	f0 c9 00 01 	sub	r9,r8,1
8002a0a8:	ec f8 01 40 	ld.w	r8,r6[320]
8002a0ac:	91 09       	st.w	r8[0x0],r9
		// receive complete
		if (twim_rx_nb_bytes == 0) {
8002a0ae:	ec f8 01 40 	ld.w	r8,r6[320]
8002a0b2:	70 08       	ld.w	r8,r8[0x0]
8002a0b4:	58 08       	cp.w	r8,0
8002a0b6:	c5 21       	brne	8002a15a <twim_master_interrupt_handler2+0x15a>
			// finish the receive operation
			twim_inst->idr = AVR32_TWIM_IDR_RXRDY_MASK;
8002a0b8:	ec f8 00 40 	ld.w	r8,r6[64]
8002a0bc:	70 08       	ld.w	r8,r8[0x0]
8002a0be:	30 19       	mov	r9,1
8002a0c0:	91 99       	st.w	r8[0x24],r9
			// set busy to false
			twim_next = false;
8002a0c2:	ec f9 00 b4 	ld.w	r9,r6[180]
8002a0c6:	30 08       	mov	r8,0
8002a0c8:	b2 88       	st.b	r9[0x0],r8
8002a0ca:	c4 88       	rjmp	8002a15a <twim_master_interrupt_handler2+0x15a>
		}
	}
	// this is a TXRDY
	else if (status & AVR32_TWIM_SR_TXRDY_MASK) {
8002a0cc:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a0d0:	e2 18 00 02 	andl	r8,0x2,COH
8002a0d4:	c4 30       	breq	8002a15a <twim_master_interrupt_handler2+0x15a>
		// no more bytes to transmit
		if (twim_tx_nb_bytes == 0) {
8002a0d6:	ec f8 00 84 	ld.w	r8,r6[132]
8002a0da:	70 08       	ld.w	r8,r8[0x0]
8002a0dc:	58 08       	cp.w	r8,0
8002a0de:	c0 b1       	brne	8002a0f4 <twim_master_interrupt_handler2+0xf4>
			// finish the receive operation
			twim_inst->idr = AVR32_TWIM_IDR_TXRDY_MASK;
8002a0e0:	ec f8 00 40 	ld.w	r8,r6[64]
8002a0e4:	70 08       	ld.w	r8,r8[0x0]
8002a0e6:	30 29       	mov	r9,2
8002a0e8:	91 99       	st.w	r8[0x24],r9
			// set busy to false
			twim_next = false;
8002a0ea:	ec f9 00 b4 	ld.w	r9,r6[180]
8002a0ee:	30 08       	mov	r8,0
8002a0f0:	b2 88       	st.b	r9[0x0],r8
8002a0f2:	c3 48       	rjmp	8002a15a <twim_master_interrupt_handler2+0x15a>
		} else {
			// put the byte in the Transmit Holding Register
			twim_inst->thr = *twim_tx_data++;
8002a0f4:	ec f8 00 40 	ld.w	r8,r6[64]
8002a0f8:	70 0a       	ld.w	r10,r8[0x0]
8002a0fa:	ec f8 00 90 	ld.w	r8,r6[144]
8002a0fe:	70 08       	ld.w	r8,r8[0x0]
8002a100:	11 89       	ld.ub	r9,r8[0x0]
8002a102:	5c 59       	castu.b	r9
8002a104:	95 69       	st.w	r10[0x18],r9
8002a106:	f0 c9 ff ff 	sub	r9,r8,-1
8002a10a:	ec f8 00 90 	ld.w	r8,r6[144]
8002a10e:	91 09       	st.w	r8[0x0],r9
			// decrease transmited bytes number
			twim_tx_nb_bytes--;
8002a110:	ec f8 00 84 	ld.w	r8,r6[132]
8002a114:	70 08       	ld.w	r8,r8[0x0]
8002a116:	f0 c9 00 01 	sub	r9,r8,1
8002a11a:	ec f8 00 84 	ld.w	r8,r6[132]
8002a11e:	91 09       	st.w	r8[0x0],r9
			if (twim_tx_nb_bytes == 0) {
8002a120:	ec f8 00 84 	ld.w	r8,r6[132]
8002a124:	70 08       	ld.w	r8,r8[0x0]
8002a126:	58 08       	cp.w	r8,0
8002a128:	c1 91       	brne	8002a15a <twim_master_interrupt_handler2+0x15a>
				// Check for next transfer
				if(twim_next) {
8002a12a:	ec f8 00 b4 	ld.w	r8,r6[180]
8002a12e:	11 88       	ld.ub	r8,r8[0x0]
8002a130:	5c 58       	castu.b	r8
8002a132:	c1 40       	breq	8002a15a <twim_master_interrupt_handler2+0x15a>
					twim_next = false;
8002a134:	ec f9 00 b4 	ld.w	r9,r6[180]
8002a138:	30 08       	mov	r8,0
8002a13a:	b2 88       	st.b	r9[0x0],r8
					twim_tx_nb_bytes = twim_package->length;
8002a13c:	ec f8 01 e4 	ld.w	r8,r6[484]
8002a140:	70 08       	ld.w	r8,r8[0x0]
8002a142:	70 49       	ld.w	r9,r8[0x10]
8002a144:	ec f8 00 84 	ld.w	r8,r6[132]
8002a148:	91 09       	st.w	r8[0x0],r9
					twim_tx_data = twim_package->buffer;
8002a14a:	ec f8 01 e4 	ld.w	r8,r6[484]
8002a14e:	70 08       	ld.w	r8,r8[0x0]
8002a150:	70 38       	ld.w	r8,r8[0xc]
8002a152:	10 99       	mov	r9,r8
8002a154:	ec f8 00 90 	ld.w	r8,r6[144]
8002a158:	91 09       	st.w	r8[0x0],r9
				}
			}
		}
	}
	return;
}
8002a15a:	2f fd       	sub	sp,-4
8002a15c:	e3 cd 40 c0 	ldm	sp++,r6-r7,lr
8002a160:	d6 03       	rete
8002a162:	00 00       	add	r0,r0
8002a164:	80 02       	ld.sh	r2,r0[0x0]
8002a166:	9e 8e       	ld.uh	lr,pc[0x0]

8002a168 <twim_set_speed>:
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arg resulting in wrong CWGR Exponential
 */
status_code_t twim_set_speed (volatile avr32_twim_t *twim, uint32_t speed,
		uint32_t pba_hz)
{
8002a168:	eb cd 40 80 	pushm	r7,lr
8002a16c:	1a 97       	mov	r7,sp
8002a16e:	20 5d       	sub	sp,20
8002a170:	ef 4c ff f4 	st.w	r7[-12],r12
8002a174:	ef 4b ff f0 	st.w	r7[-16],r11
8002a178:	ef 4a ff ec 	st.w	r7[-20],r10
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
8002a17c:	30 08       	mov	r8,0
8002a17e:	ef 68 ff ff 	st.b	r7[-1],r8
	f_prescaled = (pba_hz / speed / 2);
8002a182:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002a186:	ee f9 ff f0 	ld.w	r9,r7[-16]
8002a18a:	f0 09 0d 08 	divu	r8,r8,r9
8002a18e:	a1 98       	lsr	r8,0x1
8002a190:	ef 48 ff f8 	st.w	r7[-8],r8
	// f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
8002a194:	c0 b8       	rjmp	8002a1aa <twim_set_speed+0x42>
		// increase clock divider
		cwgr_exp++;
8002a196:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8002a19a:	2f f8       	sub	r8,-1
8002a19c:	ef 68 ff ff 	st.b	r7[-1],r8
		// divide f_prescaled value
		f_prescaled /= 2;
8002a1a0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a1a4:	a1 98       	lsr	r8,0x1
8002a1a6:	ef 48 ff f8 	st.w	r7[-8],r8
{
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (pba_hz / speed / 2);
	// f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
8002a1aa:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a1ae:	e0 48 00 ff 	cp.w	r8,255
8002a1b2:	e0 88 00 09 	brls	8002a1c4 <twim_set_speed+0x5c>
8002a1b6:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8002a1ba:	30 78       	mov	r8,7
8002a1bc:	f0 09 18 00 	cp.b	r9,r8
8002a1c0:	fe 98 ff eb 	brls	8002a196 <twim_set_speed+0x2e>
		// increase clock divider
		cwgr_exp++;
		// divide f_prescaled value
		f_prescaled /= 2;
	}
	if (cwgr_exp > 0x7) {
8002a1c4:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8002a1c8:	30 78       	mov	r8,7
8002a1ca:	f0 09 18 00 	cp.b	r9,r8
8002a1ce:	e0 88 00 04 	brls	8002a1d6 <twim_set_speed+0x6e>
		return ERR_INVALID_ARG;
8002a1d2:	3f 88       	mov	r8,-8
8002a1d4:	c1 a8       	rjmp	8002a208 <twim_set_speed+0xa0>
	}
	// set clock waveform generator register
	twim->cwgr = ((f_prescaled/2) << AVR32_TWIM_CWGR_LOW_OFFSET)
8002a1d6:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a1da:	f0 09 16 01 	lsr	r9,r8,0x1
			| ((f_prescaled - f_prescaled/2) << AVR32_TWIM_CWGR_HIGH_OFFSET)
8002a1de:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a1e2:	a1 98       	lsr	r8,0x1
8002a1e4:	ee fa ff f8 	ld.w	r10,r7[-8]
8002a1e8:	f4 08 01 08 	sub	r8,r10,r8
8002a1ec:	a9 68       	lsl	r8,0x8
			| (cwgr_exp << AVR32_TWIM_CWGR_EXP_OFFSET)
8002a1ee:	10 49       	or	r9,r8
8002a1f0:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8002a1f4:	bd 68       	lsl	r8,0x1c
			| (0     << AVR32_TWIM_CWGR_DATA_OFFSET)
			| (f_prescaled << AVR32_TWIM_CWGR_STASTO_OFFSET);
8002a1f6:	10 49       	or	r9,r8
8002a1f8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a1fc:	b1 68       	lsl	r8,0x10
	}
	if (cwgr_exp > 0x7) {
		return ERR_INVALID_ARG;
	}
	// set clock waveform generator register
	twim->cwgr = ((f_prescaled/2) << AVR32_TWIM_CWGR_LOW_OFFSET)
8002a1fe:	10 49       	or	r9,r8
8002a200:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002a204:	91 19       	st.w	r8[0x4],r9
			| ((f_prescaled - f_prescaled/2) << AVR32_TWIM_CWGR_HIGH_OFFSET)
			| (cwgr_exp << AVR32_TWIM_CWGR_EXP_OFFSET)
			| (0     << AVR32_TWIM_CWGR_DATA_OFFSET)
			| (f_prescaled << AVR32_TWIM_CWGR_STASTO_OFFSET);
	return STATUS_OK;
8002a206:	30 08       	mov	r8,0
}
8002a208:	10 9c       	mov	r12,r8
8002a20a:	2f bd       	sub	sp,-20
8002a20c:	e3 cd 80 80 	ldm	sp++,r7,pc

8002a210 <twim_master_init>:
 * \retval ERR_INVALID_ARG  Invalid arg resulting in wrong CWGR Exponential
 * \retval ERR_IO_ERROR     NACK is received or Bus Arbitration lost
 */
status_code_t twim_master_init (volatile avr32_twim_t *twim,
		const twim_options_t *opt)
{
8002a210:	eb cd 40 c0 	pushm	r6-r7,lr
8002a214:	1a 97       	mov	r7,sp
8002a216:	20 4d       	sub	sp,16
8002a218:	4c 06       	lddpc	r6,8002a318 <twim_master_init+0x108>
8002a21a:	1e 26       	rsub	r6,pc
8002a21c:	ef 4c ff f4 	st.w	r7[-12],r12
8002a220:	ef 4b ff f0 	st.w	r7[-16],r11
	bool global_interrupt_enabled = cpu_irq_is_enabled ();
8002a224:	e1 b8 00 00 	mfsr	r8,0x0
8002a228:	10 9c       	mov	r12,r8
8002a22a:	c1 6e       	rcall	80029e56 <cpu_irq_is_enabled_flags>
8002a22c:	18 98       	mov	r8,r12
8002a22e:	ef 68 ff fb 	st.b	r7[-5],r8
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
8002a232:	ec f8 00 78 	ld.w	r8,r6[120]
8002a236:	30 09       	mov	r9,0
8002a238:	91 09       	st.w	r8[0x0],r9
	// Disable TWI interrupts
	if (global_interrupt_enabled) {
8002a23a:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8002a23e:	30 08       	mov	r8,0
8002a240:	f0 09 18 00 	cp.b	r9,r8
8002a244:	c0 20       	breq	8002a248 <twim_master_init+0x38>
		cpu_irq_disable ();
8002a246:	d3 03       	ssrf	0x10
	}
	twim->idr = ~0UL;
8002a248:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002a24c:	3f f9       	mov	r9,-1
8002a24e:	91 99       	st.w	r8[0x24],r9
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
8002a250:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002a254:	30 19       	mov	r9,1
8002a256:	91 09       	st.w	r8[0x0],r9
	// Reset TWI
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
8002a258:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002a25c:	e0 69 00 80 	mov	r9,128
8002a260:	91 09       	st.w	r8[0x0],r9
	if (global_interrupt_enabled) {
8002a262:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8002a266:	30 08       	mov	r8,0
8002a268:	f0 09 18 00 	cp.b	r9,r8
8002a26c:	c0 20       	breq	8002a270 <twim_master_init+0x60>
		cpu_irq_enable ();
8002a26e:	d5 03       	csrf	0x10
	}
	// Clear SR
	twim->scr = ~0UL;
8002a270:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002a274:	3f f9       	mov	r9,-1
8002a276:	91 b9       	st.w	r8[0x2c],r9
	
	// register Register twim_master_interrupt_handler interrupt on level CONF_TWIM_IRQ_LEVEL
	irqflags_t flags = cpu_irq_save();
8002a278:	fe b0 fd e0 	rcall	80029e38 <cpu_irq_save>
8002a27c:	18 98       	mov	r8,r12
8002a27e:	ef 48 ff fc 	st.w	r7[-4],r8
	irq_register_handler(twim_master_interrupt_handler,
8002a282:	30 1a       	mov	r10,1
8002a284:	e0 6b 03 20 	mov	r11,800
8002a288:	fe cc 03 f8 	sub	r12,pc,1016
8002a28c:	f0 16 00 3b 	mcall	r6[236]
			CONF_TWIM_IRQ_LINE, CONF_TWIM_IRQ_LEVEL);
	irq_register_handler(twim_master_interrupt_handler2,
8002a290:	30 1a       	mov	r10,1
8002a292:	e0 6b 03 40 	mov	r11,832
8002a296:	fe cc 02 96 	sub	r12,pc,662
8002a29a:	f0 16 00 3b 	mcall	r6[236]
	AVR32_TWIM1_IRQ , CONF_TWIM_IRQ_LEVEL);
	cpu_irq_restore(flags);
8002a29e:	ee fc ff fc 	ld.w	r12,r7[-4]
8002a2a2:	fe b0 fd ea 	rcall	80029e76 <cpu_irq_restore>
	
	if (opt->smbus) {
8002a2a6:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002a2aa:	f1 38 00 0c 	ld.ub	r8,r8[12]
8002a2ae:	58 08       	cp.w	r8,0
8002a2b0:	c0 90       	breq	8002a2c2 <twim_master_init+0xb2>
		// Enable SMBUS Transfer
		twim->cr = AVR32_TWIM_CR_SMEN_MASK;
8002a2b2:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002a2b6:	31 09       	mov	r9,16
8002a2b8:	91 09       	st.w	r8[0x0],r9
		twim->smbtr = (uint32_t) -1;
8002a2ba:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002a2be:	3f f9       	mov	r9,-1
8002a2c0:	91 29       	st.w	r8[0x8],r9
	}
	// Select the speed
	if (twim_set_speed (twim, opt->speed, opt->pba_hz) == 
8002a2c2:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002a2c6:	70 09       	ld.w	r9,r8[0x0]
8002a2c8:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002a2cc:	70 18       	ld.w	r8,r8[0x4]
8002a2ce:	12 9a       	mov	r10,r9
8002a2d0:	10 9b       	mov	r11,r8
8002a2d2:	ee fc ff f4 	ld.w	r12,r7[-12]
8002a2d6:	f0 16 00 94 	mcall	r6[592]
8002a2da:	18 98       	mov	r8,r12
8002a2dc:	5b 88       	cp.w	r8,-8
8002a2de:	c0 31       	brne	8002a2e4 <twim_master_init+0xd4>
			ERR_INVALID_ARG) {
		return ERR_INVALID_ARG;
8002a2e0:	3f 88       	mov	r8,-8
8002a2e2:	c1 68       	rjmp	8002a30e <twim_master_init+0xfe>
	}
	// Probe the component
	twim_probe (twim, opt->chip);
8002a2e4:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002a2e8:	70 28       	ld.w	r8,r8[0x8]
8002a2ea:	10 9b       	mov	r11,r8
8002a2ec:	ee fc ff f4 	ld.w	r12,r7[-12]
8002a2f0:	f0 16 00 fe 	mcall	r6[1016]
	//Check for nack and abitration
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
8002a2f4:	ec f8 00 78 	ld.w	r8,r6[120]
8002a2f8:	70 08       	ld.w	r8,r8[0x0]
		return ERR_INVALID_ARG;
	}
	// Probe the component
	twim_probe (twim, opt->chip);
	//Check for nack and abitration
	if (transfer_status == TWI_RECEIVE_NACK
8002a2fa:	5b c8       	cp.w	r8,-4
8002a2fc:	c0 60       	breq	8002a308 <twim_master_init+0xf8>
			|| transfer_status == TWI_ARBITRATION_LOST) {
8002a2fe:	ec f8 00 78 	ld.w	r8,r6[120]
8002a302:	70 08       	ld.w	r8,r8[0x0]
		return ERR_INVALID_ARG;
	}
	// Probe the component
	twim_probe (twim, opt->chip);
	//Check for nack and abitration
	if (transfer_status == TWI_RECEIVE_NACK
8002a304:	5b e8       	cp.w	r8,-2
8002a306:	c0 31       	brne	8002a30c <twim_master_init+0xfc>
			|| transfer_status == TWI_ARBITRATION_LOST) {
		return ERR_IO_ERROR;
8002a308:	3f f8       	mov	r8,-1
8002a30a:	c0 28       	rjmp	8002a30e <twim_master_init+0xfe>
	}
	return STATUS_OK;
8002a30c:	30 08       	mov	r8,0
}
8002a30e:	10 9c       	mov	r12,r8
8002a310:	2f cd       	sub	sp,-16
8002a312:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002a316:	00 00       	add	r0,r0
8002a318:	80 02       	ld.sh	r2,r0[0x0]
8002a31a:	a0 9e       	st.b	r0[0x1],lr

8002a31c <twim_disable_interrupt>:
 * \brief Disable the TWI interrupts and clear its status register
 *
 * \param twim         Base address of the TWIM (i.e. &AVR32_TWI).
 */
void twim_disable_interrupt (volatile avr32_twim_t *twim)
{
8002a31c:	eb cd 40 c0 	pushm	r6-r7,lr
8002a320:	1a 97       	mov	r7,sp
8002a322:	20 2d       	sub	sp,8
8002a324:	48 f6       	lddpc	r6,8002a360 <twim_disable_interrupt+0x44>
8002a326:	1e 26       	rsub	r6,pc
8002a328:	ef 4c ff f8 	st.w	r7[-8],r12
	bool global_interrupt_enabled = cpu_irq_is_enabled ();
8002a32c:	e1 b8 00 00 	mfsr	r8,0x0
8002a330:	10 9c       	mov	r12,r8
8002a332:	fe b0 fd 92 	rcall	80029e56 <cpu_irq_is_enabled_flags>
8002a336:	18 98       	mov	r8,r12
8002a338:	ef 68 ff ff 	st.b	r7[-1],r8
	if (global_interrupt_enabled) {
8002a33c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8002a340:	30 08       	mov	r8,0
8002a342:	f0 09 18 00 	cp.b	r9,r8
8002a346:	c0 20       	breq	8002a34a <twim_disable_interrupt+0x2e>
		cpu_irq_disable ();
8002a348:	d3 03       	ssrf	0x10
	}
	// Clear the interrupt flags
	twim->idr = ~0UL;
8002a34a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a34e:	3f f9       	mov	r9,-1
8002a350:	91 99       	st.w	r8[0x24],r9
	// Clear the status flags
	twim->scr = ~0UL;
8002a352:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a356:	3f f9       	mov	r9,-1
8002a358:	91 b9       	st.w	r8[0x2c],r9
}
8002a35a:	2f ed       	sub	sp,-8
8002a35c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002a360:	80 02       	ld.sh	r2,r0[0x0]
8002a362:	a1 aa       	sbr	r10,0x0

8002a364 <twim_probe>:
 * \param chip_addr       Address of the chip which is searched for
 * \retval STATUS_OK      Slave Found
 * \retval ERR_IO_ERROR   ANAK received or Bus Arbitration lost
 */
status_code_t twim_probe (volatile avr32_twim_t *twim, uint32_t chip_addr)
{
8002a364:	eb cd 40 c0 	pushm	r6-r7,lr
8002a368:	1a 97       	mov	r7,sp
8002a36a:	20 3d       	sub	sp,12
8002a36c:	48 c6       	lddpc	r6,8002a39c <twim_probe+0x38>
8002a36e:	1e 26       	rsub	r6,pc
8002a370:	ef 4c ff f8 	st.w	r7[-8],r12
8002a374:	ef 4b ff f4 	st.w	r7[-12],r11
	uint8_t data[1] = { 0 };
8002a378:	30 08       	mov	r8,0
8002a37a:	ef 68 ff fc 	st.b	r7[-4],r8
	return (twim_write (twim,data,0,chip_addr,0));
8002a37e:	ee cb 00 04 	sub	r11,r7,4
8002a382:	30 08       	mov	r8,0
8002a384:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002a388:	30 0a       	mov	r10,0
8002a38a:	ee fc ff f8 	ld.w	r12,r7[-8]
8002a38e:	f0 16 00 38 	mcall	r6[224]
8002a392:	18 98       	mov	r8,r12
}
8002a394:	10 9c       	mov	r12,r8
8002a396:	2f dd       	sub	sp,-12
8002a398:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002a39c:	80 02       	ld.sh	r2,r0[0x0]
8002a39e:	a1 f2       	*unknown*

8002a3a0 <twim_read_packet>:
 * \retval STATUS_OK      If all bytes were read successfully
 * \retval ERR_IO_ERROR   NACK received or Bus Arbitration lost
 */
status_code_t twim_read_packet (volatile avr32_twim_t *twim,
		const twim_package_t *package)
{
8002a3a0:	eb cd 40 c0 	pushm	r6-r7,lr
8002a3a4:	1a 97       	mov	r7,sp
8002a3a6:	20 2d       	sub	sp,8
8002a3a8:	4e 76       	lddpc	r6,8002a544 <twim_read_packet+0x1a4>
8002a3aa:	1e 26       	rsub	r6,pc
8002a3ac:	ef 4c ff fc 	st.w	r7[-4],r12
8002a3b0:	ef 4b ff f8 	st.w	r7[-8],r11
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
8002a3b4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a3b8:	30 29       	mov	r9,2
8002a3ba:	91 09       	st.w	r8[0x0],r9
	// Set pointer to TWIM instance for IT
	twim_inst = twim;
8002a3bc:	ec f8 00 40 	ld.w	r8,r6[64]
8002a3c0:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002a3c4:	91 09       	st.w	r8[0x0],r9
	// Disable the TWIM interrupts
	twim_disable_interrupt (twim_inst);
8002a3c6:	ec f8 00 40 	ld.w	r8,r6[64]
8002a3ca:	70 08       	ld.w	r8,r8[0x0]
8002a3cc:	10 9c       	mov	r12,r8
8002a3ce:	f0 16 00 77 	mcall	r6[476]
	// get a pointer to applicative data
	twim_rx_data = package->buffer;
8002a3d2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a3d6:	70 38       	ld.w	r8,r8[0xc]
8002a3d8:	10 99       	mov	r9,r8
8002a3da:	ec f8 00 b8 	ld.w	r8,r6[184]
8002a3de:	91 09       	st.w	r8[0x0],r9
	// get a copy of nb bytes to read
	twim_rx_nb_bytes = package->length;
8002a3e0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a3e4:	70 49       	ld.w	r9,r8[0x10]
8002a3e6:	ec f8 01 40 	ld.w	r8,r6[320]
8002a3ea:	91 09       	st.w	r8[0x0],r9
	// Set next write transfer to false
	twim_next = false;
8002a3ec:	ec f9 00 b4 	ld.w	r9,r6[180]
8002a3f0:	30 08       	mov	r8,0
8002a3f2:	b2 88       	st.b	r9[0x0],r8
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
8002a3f4:	ec f8 00 78 	ld.w	r8,r6[120]
8002a3f8:	30 09       	mov	r9,0
8002a3fa:	91 09       	st.w	r8[0x0],r9
	//check if internal address access is performed
	if (package->addr_length) {
8002a3fc:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a400:	f1 38 00 08 	ld.ub	r8,r8[8]
8002a404:	58 08       	cp.w	r8,0
8002a406:	c5 60       	breq	8002a4b2 <twim_read_packet+0x112>
		// Reset the TWIM module to clear the THR register
		twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
8002a408:	ec f8 00 40 	ld.w	r8,r6[64]
8002a40c:	70 08       	ld.w	r8,r8[0x0]
8002a40e:	30 19       	mov	r9,1
8002a410:	91 09       	st.w	r8[0x0],r9
		twim_inst->cr = AVR32_TWIM_CR_SWRST_MASK;
8002a412:	ec f8 00 40 	ld.w	r8,r6[64]
8002a416:	70 08       	ld.w	r8,r8[0x0]
8002a418:	e0 69 00 80 	mov	r9,128
8002a41c:	91 09       	st.w	r8[0x0],r9
		twim_inst->cr = AVR32_TWIM_CR_MDIS_MASK;
8002a41e:	ec f8 00 40 	ld.w	r8,r6[64]
8002a422:	70 08       	ld.w	r8,r8[0x0]
8002a424:	30 29       	mov	r9,2
8002a426:	91 09       	st.w	r8[0x0],r9
		// selection of first valid byte of the address
		twim_tx_data = (uint8_t *) (&(package->addr));
8002a428:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a42c:	2f c8       	sub	r8,-4
8002a42e:	10 99       	mov	r9,r8
8002a430:	ec f8 00 90 	ld.w	r8,r6[144]
8002a434:	91 09       	st.w	r8[0x0],r9
		twim_tx_data += (4 - package->addr_length);
8002a436:	ec f8 00 90 	ld.w	r8,r6[144]
8002a43a:	70 09       	ld.w	r9,r8[0x0]
8002a43c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a440:	f1 38 00 08 	ld.ub	r8,r8[8]
8002a444:	f0 08 11 04 	rsub	r8,r8,4
8002a448:	10 09       	add	r9,r8
8002a44a:	ec f8 00 90 	ld.w	r8,r6[144]
8002a44e:	91 09       	st.w	r8[0x0],r9
		// set the number of bytes to transmit
		twim_tx_nb_bytes = package->addr_length;
8002a450:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a454:	f1 38 00 08 	ld.ub	r8,r8[8]
8002a458:	10 99       	mov	r9,r8
8002a45a:	ec f8 00 84 	ld.w	r8,r6[132]
8002a45e:	91 09       	st.w	r8[0x0],r9
		// mask NACK, TXRDY and RXRDY interrupts
		twim_it_mask = AVR32_TWIM_IER_STD_MASK | 
8002a460:	ec f8 00 fc 	ld.w	r8,r6[252]
8002a464:	e0 69 07 03 	mov	r9,1795
8002a468:	91 09       	st.w	r8[0x0],r9
				AVR32_TWIM_IER_TXRDY_MASK | AVR32_TWIM_IER_RXRDY_MASK;
		// Set the command register to initiate the transfer
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8002a46a:	ec f8 00 40 	ld.w	r8,r6[64]
8002a46e:	70 08       	ld.w	r8,r8[0x0]
				| (package->addr_length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
8002a470:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002a474:	72 09       	ld.w	r9,r9[0x0]
		twim_tx_nb_bytes = package->addr_length;
		// mask NACK, TXRDY and RXRDY interrupts
		twim_it_mask = AVR32_TWIM_IER_STD_MASK | 
				AVR32_TWIM_IER_TXRDY_MASK | AVR32_TWIM_IER_RXRDY_MASK;
		// Set the command register to initiate the transfer
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8002a476:	f2 0a 15 01 	lsl	r10,r9,0x1
				| (package->addr_length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
8002a47a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002a47e:	f3 39 00 08 	ld.ub	r9,r9[8]
8002a482:	b1 69       	lsl	r9,0x10
				| (AVR32_TWIM_CMDR_VALID_MASK)
8002a484:	f5 e9 10 09 	or	r9,r10,r9
		twim_tx_nb_bytes = package->addr_length;
		// mask NACK, TXRDY and RXRDY interrupts
		twim_it_mask = AVR32_TWIM_IER_STD_MASK | 
				AVR32_TWIM_IER_TXRDY_MASK | AVR32_TWIM_IER_RXRDY_MASK;
		// Set the command register to initiate the transfer
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8002a488:	e8 19 a0 00 	orl	r9,0xa000
8002a48c:	91 39       	st.w	r8[0xc],r9
				| (package->addr_length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
				| (AVR32_TWIM_CMDR_START_MASK)
				| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
		// set the next command register to followup with the previous command
		twim_inst->ncmdr = ((package->chip) << AVR32_TWIM_CMDR_SADR_OFFSET)
8002a48e:	ec f8 00 40 	ld.w	r8,r6[64]
8002a492:	70 08       	ld.w	r8,r8[0x0]
8002a494:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002a498:	72 09       	ld.w	r9,r9[0x0]
8002a49a:	f2 0a 15 01 	lsl	r10,r9,0x1
				| (package->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
8002a49e:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002a4a2:	72 49       	ld.w	r9,r9[0x10]
				| (AVR32_TWIM_CMDR_VALID_MASK)
				| (AVR32_TWIM_CMDR_START_MASK)
				| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
		// set the next command register to followup with the previous command
		twim_inst->ncmdr = ((package->chip) << AVR32_TWIM_CMDR_SADR_OFFSET)
				| (package->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
8002a4a4:	b1 69       	lsl	r9,0x10
				| (AVR32_TWIM_CMDR_VALID_MASK)
8002a4a6:	f5 e9 10 09 	or	r9,r10,r9
				| (package->addr_length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
				| (AVR32_TWIM_CMDR_START_MASK)
				| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
		// set the next command register to followup with the previous command
		twim_inst->ncmdr = ((package->chip) << AVR32_TWIM_CMDR_SADR_OFFSET)
8002a4aa:	e8 19 e0 01 	orl	r9,0xe001
8002a4ae:	91 49       	st.w	r8[0x10],r9
8002a4b0:	c1 b8       	rjmp	8002a4e6 <twim_read_packet+0x146>
				| (AVR32_TWIM_CMDR_VALID_MASK)
				| (AVR32_TWIM_CMDR_START_MASK)
				| (AVR32_TWIM_CMDR_STOP_MASK)
				| (AVR32_TWIM_CMDR_READ_MASK);
	} else {
		twim_tx_nb_bytes = 0;
8002a4b2:	ec f8 00 84 	ld.w	r8,r6[132]
8002a4b6:	30 09       	mov	r9,0
8002a4b8:	91 09       	st.w	r8[0x0],r9
		// mask NACK and RXRDY interrupts
		twim_it_mask = AVR32_TWIM_IER_STD_MASK | AVR32_TWIM_IER_RXRDY_MASK;
8002a4ba:	ec f8 00 fc 	ld.w	r8,r6[252]
8002a4be:	e0 69 07 01 	mov	r9,1793
8002a4c2:	91 09       	st.w	r8[0x0],r9
		// Set the command register to initiate the transfer
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8002a4c4:	ec f8 00 40 	ld.w	r8,r6[64]
8002a4c8:	70 08       	ld.w	r8,r8[0x0]
				| (package->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
8002a4ca:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002a4ce:	72 09       	ld.w	r9,r9[0x0]
	} else {
		twim_tx_nb_bytes = 0;
		// mask NACK and RXRDY interrupts
		twim_it_mask = AVR32_TWIM_IER_STD_MASK | AVR32_TWIM_IER_RXRDY_MASK;
		// Set the command register to initiate the transfer
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8002a4d0:	f2 0a 15 01 	lsl	r10,r9,0x1
				| (package->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
8002a4d4:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002a4d8:	72 49       	ld.w	r9,r9[0x10]
		twim_tx_nb_bytes = 0;
		// mask NACK and RXRDY interrupts
		twim_it_mask = AVR32_TWIM_IER_STD_MASK | AVR32_TWIM_IER_RXRDY_MASK;
		// Set the command register to initiate the transfer
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
				| (package->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
8002a4da:	b1 69       	lsl	r9,0x10
				| (AVR32_TWIM_CMDR_VALID_MASK)
8002a4dc:	f5 e9 10 09 	or	r9,r10,r9
	} else {
		twim_tx_nb_bytes = 0;
		// mask NACK and RXRDY interrupts
		twim_it_mask = AVR32_TWIM_IER_STD_MASK | AVR32_TWIM_IER_RXRDY_MASK;
		// Set the command register to initiate the transfer
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8002a4e0:	e8 19 e0 01 	orl	r9,0xe001
8002a4e4:	91 39       	st.w	r8[0xc],r9
				| (AVR32_TWIM_CMDR_START_MASK)
				| (AVR32_TWIM_CMDR_STOP_MASK)
				| (AVR32_TWIM_CMDR_READ_MASK);
	}
	// update IMR through IER
	twim_inst->ier = twim_it_mask;
8002a4e6:	ec f8 00 40 	ld.w	r8,r6[64]
8002a4ea:	70 08       	ld.w	r8,r8[0x0]
8002a4ec:	ec f9 00 fc 	ld.w	r9,r6[252]
8002a4f0:	72 09       	ld.w	r9,r9[0x0]
8002a4f2:	91 89       	st.w	r8[0x20],r9
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
8002a4f4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a4f8:	30 19       	mov	r9,1
8002a4fa:	91 09       	st.w	r8[0x0],r9
	// Enable all interrupts
	cpu_irq_enable ();
8002a4fc:	d5 03       	csrf	0x10
	// get data
	while (!(transfer_status) && !(twim_status ())) {
8002a4fe:	c0 38       	rjmp	8002a504 <twim_read_packet+0x164>
		cpu_relax();
8002a500:	fe cf ff fc 	sub	pc,pc,-4
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
	// Enable all interrupts
	cpu_irq_enable ();
	// get data
	while (!(transfer_status) && !(twim_status ())) {
8002a504:	ec f8 00 78 	ld.w	r8,r6[120]
8002a508:	70 08       	ld.w	r8,r8[0x0]
8002a50a:	58 08       	cp.w	r8,0
8002a50c:	c0 61       	brne	8002a518 <twim_read_packet+0x178>
8002a50e:	f0 16 00 68 	mcall	r6[416]
8002a512:	18 98       	mov	r8,r12
8002a514:	58 08       	cp.w	r8,0
8002a516:	cf 50       	breq	8002a500 <twim_read_packet+0x160>
		cpu_relax();
	}
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
8002a518:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a51c:	30 29       	mov	r9,2
8002a51e:	91 09       	st.w	r8[0x0],r9
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
8002a520:	ec f8 00 78 	ld.w	r8,r6[120]
8002a524:	70 08       	ld.w	r8,r8[0x0]
	while (!(transfer_status) && !(twim_status ())) {
		cpu_relax();
	}
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
	if (transfer_status == TWI_RECEIVE_NACK
8002a526:	5b c8       	cp.w	r8,-4
8002a528:	c0 60       	breq	8002a534 <twim_read_packet+0x194>
			|| transfer_status == TWI_ARBITRATION_LOST) {
8002a52a:	ec f8 00 78 	ld.w	r8,r6[120]
8002a52e:	70 08       	ld.w	r8,r8[0x0]
	while (!(transfer_status) && !(twim_status ())) {
		cpu_relax();
	}
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
	if (transfer_status == TWI_RECEIVE_NACK
8002a530:	5b e8       	cp.w	r8,-2
8002a532:	c0 31       	brne	8002a538 <twim_read_packet+0x198>
			|| transfer_status == TWI_ARBITRATION_LOST) {
		return ERR_IO_ERROR;
8002a534:	3f f8       	mov	r8,-1
8002a536:	c0 28       	rjmp	8002a53a <twim_read_packet+0x19a>
	}
	return STATUS_OK;
8002a538:	30 08       	mov	r8,0
}
8002a53a:	10 9c       	mov	r12,r8
8002a53c:	2f ed       	sub	sp,-8
8002a53e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002a542:	00 00       	add	r0,r0
8002a544:	80 02       	ld.sh	r2,r0[0x0]
8002a546:	a2 2e       	st.h	r1[0x4],lr

8002a548 <twim_read>:
 * \retval STATUS_OK      If all bytes were read successfully
 * \retval ERR_IO_ERROR   NACK received or Bus Arbitration lost
 */
status_code_t twim_read (volatile avr32_twim_t *twim, uint8_t *buffer,
		uint32_t nbytes, uint32_t saddr, bool tenbit)
{
8002a548:	eb cd 40 c0 	pushm	r6-r7,lr
8002a54c:	1a 97       	mov	r7,sp
8002a54e:	20 5d       	sub	sp,20
8002a550:	4c c6       	lddpc	r6,8002a680 <twim_read+0x138>
8002a552:	1e 26       	rsub	r6,pc
8002a554:	ef 4c ff fc 	st.w	r7[-4],r12
8002a558:	ef 4b ff f8 	st.w	r7[-8],r11
8002a55c:	ef 4a ff f4 	st.w	r7[-12],r10
8002a560:	ef 49 ff f0 	st.w	r7[-16],r9
8002a564:	ef 68 ff ec 	st.b	r7[-20],r8
	// Reset the TWIM module to clear the THR register
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
8002a568:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a56c:	30 19       	mov	r9,1
8002a56e:	91 09       	st.w	r8[0x0],r9
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
8002a570:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a574:	e0 69 00 80 	mov	r9,128
8002a578:	91 09       	st.w	r8[0x0],r9
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
8002a57a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a57e:	30 29       	mov	r9,2
8002a580:	91 09       	st.w	r8[0x0],r9
	// Set pointer to TWIM instance for IT
	twim_inst = twim;
8002a582:	ec f8 00 40 	ld.w	r8,r6[64]
8002a586:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002a58a:	91 09       	st.w	r8[0x0],r9
	// Disable the TWIM interrupts
	twim_disable_interrupt (twim_inst);
8002a58c:	ec f8 00 40 	ld.w	r8,r6[64]
8002a590:	70 08       	ld.w	r8,r8[0x0]
8002a592:	10 9c       	mov	r12,r8
8002a594:	f0 16 00 77 	mcall	r6[476]
	// get a pointer to applicative data
	twim_rx_data = buffer;
8002a598:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002a59c:	ec f8 00 b8 	ld.w	r8,r6[184]
8002a5a0:	91 09       	st.w	r8[0x0],r9
	// get a copy of nb bytes to read
	twim_rx_nb_bytes = nbytes;
8002a5a2:	ec f8 01 40 	ld.w	r8,r6[320]
8002a5a6:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002a5aa:	91 09       	st.w	r8[0x0],r9
	// Set next transfer to false
	twim_next = false;
8002a5ac:	ec f9 00 b4 	ld.w	r9,r6[180]
8002a5b0:	30 08       	mov	r8,0
8002a5b2:	b2 88       	st.b	r9[0x0],r8
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
8002a5b4:	ec f8 00 78 	ld.w	r8,r6[120]
8002a5b8:	30 09       	mov	r9,0
8002a5ba:	91 09       	st.w	r8[0x0],r9
	//tenbit need special handling
	if (tenbit)	{
8002a5bc:	ef 39 ff ec 	ld.ub	r9,r7[-20]
8002a5c0:	30 08       	mov	r8,0
8002a5c2:	f0 09 18 00 	cp.b	r9,r8
8002a5c6:	c1 a0       	breq	8002a5fa <twim_read+0xb2>
		twim_inst->cmdr = (saddr << AVR32_TWIM_CMDR_SADR_OFFSET)
8002a5c8:	ec f8 00 40 	ld.w	r8,r6[64]
8002a5cc:	70 08       	ld.w	r8,r8[0x0]
8002a5ce:	ee f9 ff f0 	ld.w	r9,r7[-16]
8002a5d2:	a1 79       	lsl	r9,0x1
8002a5d4:	e8 19 a8 00 	orl	r9,0xa800
8002a5d8:	91 39       	st.w	r8[0xc],r9
				| (AVR32_TWIM_CMDR_START_MASK)
				| (0 << AVR32_TWIM_CMDR_STOP_OFFSET)
				| (AVR32_TWIM_CMDR_TENBIT_MASK)
				| (0 << AVR32_TWIM_CMDR_READ_OFFSET);

		twim_inst->ncmdr = (saddr << AVR32_TWIM_CMDR_SADR_OFFSET)
8002a5da:	ec f8 00 40 	ld.w	r8,r6[64]
8002a5de:	70 08       	ld.w	r8,r8[0x0]
8002a5e0:	ee f9 ff f0 	ld.w	r9,r7[-16]
8002a5e4:	f2 0a 15 01 	lsl	r10,r9,0x1
				| (nbytes << AVR32_TWIM_CMDR_NBYTES_OFFSET)
8002a5e8:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002a5ec:	b1 69       	lsl	r9,0x10
				| (AVR32_TWIM_CMDR_VALID_MASK)
8002a5ee:	f5 e9 10 09 	or	r9,r10,r9
				| (AVR32_TWIM_CMDR_START_MASK)
				| (0 << AVR32_TWIM_CMDR_STOP_OFFSET)
				| (AVR32_TWIM_CMDR_TENBIT_MASK)
				| (0 << AVR32_TWIM_CMDR_READ_OFFSET);

		twim_inst->ncmdr = (saddr << AVR32_TWIM_CMDR_SADR_OFFSET)
8002a5f2:	e8 19 f8 01 	orl	r9,0xf801
8002a5f6:	91 49       	st.w	r8[0x10],r9
8002a5f8:	c1 08       	rjmp	8002a618 <twim_read+0xd0>
				| (AVR32_TWIM_CMDR_STOP_MASK)
				| (AVR32_TWIM_CMDR_TENBIT_MASK)
				| (AVR32_TWIM_CMDR_REPSAME_MASK)
				| (AVR32_TWIM_CMDR_READ_MASK);
	} else {
		twim_inst->cmdr = (saddr << AVR32_TWIM_CMDR_SADR_OFFSET)
8002a5fa:	ec f8 00 40 	ld.w	r8,r6[64]
8002a5fe:	70 08       	ld.w	r8,r8[0x0]
8002a600:	ee f9 ff f0 	ld.w	r9,r7[-16]
8002a604:	f2 0a 15 01 	lsl	r10,r9,0x1
				| (nbytes << AVR32_TWIM_CMDR_NBYTES_OFFSET)
8002a608:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002a60c:	b1 69       	lsl	r9,0x10
				| (AVR32_TWIM_CMDR_VALID_MASK)
8002a60e:	f5 e9 10 09 	or	r9,r10,r9
				| (AVR32_TWIM_CMDR_STOP_MASK)
				| (AVR32_TWIM_CMDR_TENBIT_MASK)
				| (AVR32_TWIM_CMDR_REPSAME_MASK)
				| (AVR32_TWIM_CMDR_READ_MASK);
	} else {
		twim_inst->cmdr = (saddr << AVR32_TWIM_CMDR_SADR_OFFSET)
8002a612:	e8 19 e0 01 	orl	r9,0xe001
8002a616:	91 39       	st.w	r8[0xc],r9
				| (AVR32_TWIM_CMDR_STOP_MASK)
				| (0 << AVR32_TWIM_CMDR_TENBIT_OFFSET)
				| (AVR32_TWIM_CMDR_READ_MASK);
	}
	// mask NACK and RXRDY interrupts
	twim_it_mask = AVR32_TWIM_IER_STD_MASK | AVR32_TWIM_IER_RXRDY_MASK;
8002a618:	ec f8 00 fc 	ld.w	r8,r6[252]
8002a61c:	e0 69 07 01 	mov	r9,1793
8002a620:	91 09       	st.w	r8[0x0],r9
	// update IMR through IER
	twim_inst->ier = twim_it_mask;
8002a622:	ec f8 00 40 	ld.w	r8,r6[64]
8002a626:	70 08       	ld.w	r8,r8[0x0]
8002a628:	ec f9 00 fc 	ld.w	r9,r6[252]
8002a62c:	72 09       	ld.w	r9,r9[0x0]
8002a62e:	91 89       	st.w	r8[0x20],r9
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
8002a630:	ec f8 00 40 	ld.w	r8,r6[64]
8002a634:	70 08       	ld.w	r8,r8[0x0]
8002a636:	30 19       	mov	r9,1
8002a638:	91 09       	st.w	r8[0x0],r9
	// Enable all interrupts
	cpu_irq_enable ();
8002a63a:	d5 03       	csrf	0x10
	// get data
	while (!(transfer_status) && !(twim_status ())) {
8002a63c:	c0 38       	rjmp	8002a642 <twim_read+0xfa>
		cpu_relax();
8002a63e:	fe cf ff fc 	sub	pc,pc,-4
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
	// Enable all interrupts
	cpu_irq_enable ();
	// get data
	while (!(transfer_status) && !(twim_status ())) {
8002a642:	ec f8 00 78 	ld.w	r8,r6[120]
8002a646:	70 08       	ld.w	r8,r8[0x0]
8002a648:	58 08       	cp.w	r8,0
8002a64a:	c0 61       	brne	8002a656 <twim_read+0x10e>
8002a64c:	f0 16 00 68 	mcall	r6[416]
8002a650:	18 98       	mov	r8,r12
8002a652:	58 08       	cp.w	r8,0
8002a654:	cf 50       	breq	8002a63e <twim_read+0xf6>
		cpu_relax();
	}
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
8002a656:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a65a:	30 29       	mov	r9,2
8002a65c:	91 09       	st.w	r8[0x0],r9
	//Check for nack
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
8002a65e:	ec f8 00 78 	ld.w	r8,r6[120]
8002a662:	70 08       	ld.w	r8,r8[0x0]
		cpu_relax();
	}
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
	//Check for nack
	if (transfer_status == TWI_RECEIVE_NACK
8002a664:	5b c8       	cp.w	r8,-4
8002a666:	c0 60       	breq	8002a672 <twim_read+0x12a>
			|| transfer_status == TWI_ARBITRATION_LOST) {
8002a668:	ec f8 00 78 	ld.w	r8,r6[120]
8002a66c:	70 08       	ld.w	r8,r8[0x0]
		cpu_relax();
	}
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
	//Check for nack
	if (transfer_status == TWI_RECEIVE_NACK
8002a66e:	5b e8       	cp.w	r8,-2
8002a670:	c0 31       	brne	8002a676 <twim_read+0x12e>
			|| transfer_status == TWI_ARBITRATION_LOST) {
		return ERR_IO_ERROR;
8002a672:	3f f8       	mov	r8,-1
8002a674:	c0 28       	rjmp	8002a678 <twim_read+0x130>
	}
	return STATUS_OK;
8002a676:	30 08       	mov	r8,0
}
8002a678:	10 9c       	mov	r12,r8
8002a67a:	2f bd       	sub	sp,-20
8002a67c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002a680:	80 02       	ld.sh	r2,r0[0x0]
8002a682:	a3 d6       	cbr	r6,0x3

8002a684 <twim_write_packet>:
 * \retval STATUS_OK      If all bytes were send successfully
 * \retval ERR_IO_ERROR   NACK received or Bus Arbitration lost
 */
status_code_t twim_write_packet (volatile avr32_twim_t *twim,
		const twim_package_t *package)
{
8002a684:	eb cd 40 c0 	pushm	r6-r7,lr
8002a688:	1a 97       	mov	r7,sp
8002a68a:	20 2d       	sub	sp,8
8002a68c:	4f 16       	lddpc	r6,8002a850 <twim_write_packet+0x1cc>
8002a68e:	1e 26       	rsub	r6,pc
8002a690:	ef 4c ff fc 	st.w	r7[-4],r12
8002a694:	ef 4b ff f8 	st.w	r7[-8],r11
	// Reset the TWIM module to clear the THR register
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
8002a698:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a69c:	30 19       	mov	r9,1
8002a69e:	91 09       	st.w	r8[0x0],r9
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
8002a6a0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a6a4:	e0 69 00 80 	mov	r9,128
8002a6a8:	91 09       	st.w	r8[0x0],r9
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
8002a6aa:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a6ae:	30 29       	mov	r9,2
8002a6b0:	91 09       	st.w	r8[0x0],r9
	// Set pointer to TWIM instance for IT
	twim_inst = twim;
8002a6b2:	ec f8 00 40 	ld.w	r8,r6[64]
8002a6b6:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002a6ba:	91 09       	st.w	r8[0x0],r9
	// Disable the TWIM interrupts
	twim_disable_interrupt (twim_inst);
8002a6bc:	ec f8 00 40 	ld.w	r8,r6[64]
8002a6c0:	70 08       	ld.w	r8,r8[0x0]
8002a6c2:	10 9c       	mov	r12,r8
8002a6c4:	f0 16 00 77 	mcall	r6[476]
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
8002a6c8:	ec f8 00 78 	ld.w	r8,r6[120]
8002a6cc:	30 09       	mov	r9,0
8002a6ce:	91 09       	st.w	r8[0x0],r9
	// mask NACK and TXRDY interrupts
	twim_it_mask = AVR32_TWIM_IER_STD_MASK | AVR32_TWIM_IER_TXRDY_MASK;
8002a6d0:	ec f8 00 fc 	ld.w	r8,r6[252]
8002a6d4:	e0 69 07 02 	mov	r9,1794
8002a6d8:	91 09       	st.w	r8[0x0],r9
	// Set next transfer to false
	twim_next = false;
8002a6da:	ec f9 00 b4 	ld.w	r9,r6[180]
8002a6de:	30 08       	mov	r8,0
8002a6e0:	b2 88       	st.b	r9[0x0],r8
	//check if internal address access is performed
	if (package->addr_length) {
8002a6e2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a6e6:	f1 38 00 08 	ld.ub	r8,r8[8]
8002a6ea:	58 08       	cp.w	r8,0
8002a6ec:	c6 40       	breq	8002a7b4 <twim_write_packet+0x130>
		// selection of first valid byte of the address
		twim_tx_data = (uint8_t *) (&(package->addr));
8002a6ee:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a6f2:	2f c8       	sub	r8,-4
8002a6f4:	10 99       	mov	r9,r8
8002a6f6:	ec f8 00 90 	ld.w	r8,r6[144]
8002a6fa:	91 09       	st.w	r8[0x0],r9
		twim_tx_data += (4 - package->addr_length);
8002a6fc:	ec f8 00 90 	ld.w	r8,r6[144]
8002a700:	70 09       	ld.w	r9,r8[0x0]
8002a702:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a706:	f1 38 00 08 	ld.ub	r8,r8[8]
8002a70a:	f0 08 11 04 	rsub	r8,r8,4
8002a70e:	10 09       	add	r9,r8
8002a710:	ec f8 00 90 	ld.w	r8,r6[144]
8002a714:	91 09       	st.w	r8[0x0],r9
		// set the number of bytes to transmit
		twim_tx_nb_bytes = package->addr_length;
8002a716:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a71a:	f1 38 00 08 	ld.ub	r8,r8[8]
8002a71e:	10 99       	mov	r9,r8
8002a720:	ec f8 00 84 	ld.w	r8,r6[132]
8002a724:	91 09       	st.w	r8[0x0],r9
		// Initiate the transfer to send the internal address
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8002a726:	ec f8 00 40 	ld.w	r8,r6[64]
8002a72a:	70 08       	ld.w	r8,r8[0x0]
				| (package->addr_length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
8002a72c:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002a730:	72 09       	ld.w	r9,r9[0x0]
		twim_tx_data = (uint8_t *) (&(package->addr));
		twim_tx_data += (4 - package->addr_length);
		// set the number of bytes to transmit
		twim_tx_nb_bytes = package->addr_length;
		// Initiate the transfer to send the internal address
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8002a732:	f2 0a 15 01 	lsl	r10,r9,0x1
				| (package->addr_length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
8002a736:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002a73a:	f3 39 00 08 	ld.ub	r9,r9[8]
8002a73e:	b1 69       	lsl	r9,0x10
				| (AVR32_TWIM_CMDR_VALID_MASK)
8002a740:	f5 e9 10 09 	or	r9,r10,r9
		twim_tx_data = (uint8_t *) (&(package->addr));
		twim_tx_data += (4 - package->addr_length);
		// set the number of bytes to transmit
		twim_tx_nb_bytes = package->addr_length;
		// Initiate the transfer to send the internal address
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8002a744:	e8 19 a0 00 	orl	r9,0xa000
8002a748:	91 39       	st.w	r8[0xc],r9
				| (AVR32_TWIM_CMDR_VALID_MASK)
				| (AVR32_TWIM_CMDR_START_MASK)
				| (0 << AVR32_TWIM_CMDR_STOP_OFFSET)
				| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
		// set next transfer to true
		twim_next = true;
8002a74a:	ec f9 00 b4 	ld.w	r9,r6[180]
8002a74e:	30 18       	mov	r8,1
8002a750:	b2 88       	st.b	r9[0x0],r8
		// Set the number of bytes & address for next transfer
		twim_package = package;
8002a752:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002a756:	ec f8 01 e4 	ld.w	r8,r6[484]
8002a75a:	91 09       	st.w	r8[0x0],r9
		// set the next command register to followup with the previous command
		twim_inst->ncmdr = ((package->chip) << AVR32_TWIM_CMDR_SADR_OFFSET)
8002a75c:	ec f8 00 40 	ld.w	r8,r6[64]
8002a760:	70 08       	ld.w	r8,r8[0x0]
8002a762:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002a766:	72 09       	ld.w	r9,r9[0x0]
8002a768:	f2 0a 15 01 	lsl	r10,r9,0x1
				| (package->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
8002a76c:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002a770:	72 49       	ld.w	r9,r9[0x10]
		twim_next = true;
		// Set the number of bytes & address for next transfer
		twim_package = package;
		// set the next command register to followup with the previous command
		twim_inst->ncmdr = ((package->chip) << AVR32_TWIM_CMDR_SADR_OFFSET)
				| (package->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
8002a772:	b1 69       	lsl	r9,0x10
				| (AVR32_TWIM_CMDR_VALID_MASK)
8002a774:	f5 e9 10 09 	or	r9,r10,r9
		// set next transfer to true
		twim_next = true;
		// Set the number of bytes & address for next transfer
		twim_package = package;
		// set the next command register to followup with the previous command
		twim_inst->ncmdr = ((package->chip) << AVR32_TWIM_CMDR_SADR_OFFSET)
8002a778:	e8 19 e0 00 	orl	r9,0xe000
8002a77c:	91 49       	st.w	r8[0x10],r9
				| (AVR32_TWIM_CMDR_VALID_MASK)
				| (AVR32_TWIM_CMDR_START_MASK)
				| (AVR32_TWIM_CMDR_STOP_MASK)
				| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
		// update IMR through IER
		twim_inst->ier = twim_it_mask;
8002a77e:	ec f8 00 40 	ld.w	r8,r6[64]
8002a782:	70 08       	ld.w	r8,r8[0x0]
8002a784:	ec f9 00 fc 	ld.w	r9,r6[252]
8002a788:	72 09       	ld.w	r9,r9[0x0]
8002a78a:	91 89       	st.w	r8[0x20],r9
		// Enable master transfer
		twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
8002a78c:	ec f8 00 40 	ld.w	r8,r6[64]
8002a790:	70 08       	ld.w	r8,r8[0x0]
8002a792:	30 19       	mov	r9,1
8002a794:	91 09       	st.w	r8[0x0],r9
		// Enable all interrupts
		cpu_irq_enable ();
8002a796:	d5 03       	csrf	0x10
		// wait until Busy to be false
		while (!(transfer_status) && !(twim_status ())) {
8002a798:	c0 38       	rjmp	8002a79e <twim_write_packet+0x11a>
		cpu_relax();
8002a79a:	fe cf ff fc 	sub	pc,pc,-4
		// Enable master transfer
		twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
		// Enable all interrupts
		cpu_irq_enable ();
		// wait until Busy to be false
		while (!(transfer_status) && !(twim_status ())) {
8002a79e:	ec f8 00 78 	ld.w	r8,r6[120]
8002a7a2:	70 08       	ld.w	r8,r8[0x0]
8002a7a4:	58 08       	cp.w	r8,0
8002a7a6:	c3 f1       	brne	8002a824 <twim_write_packet+0x1a0>
8002a7a8:	f0 16 00 68 	mcall	r6[416]
8002a7ac:	18 98       	mov	r8,r12
8002a7ae:	58 08       	cp.w	r8,0
8002a7b0:	cf 50       	breq	8002a79a <twim_write_packet+0x116>
8002a7b2:	c3 98       	rjmp	8002a824 <twim_write_packet+0x1a0>
		cpu_relax();
		}
	} else {
	// get a pointer to applicative data
	twim_tx_data = package->buffer;
8002a7b4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a7b8:	70 38       	ld.w	r8,r8[0xc]
8002a7ba:	10 99       	mov	r9,r8
8002a7bc:	ec f8 00 90 	ld.w	r8,r6[144]
8002a7c0:	91 09       	st.w	r8[0x0],r9
	// get a copy of nb bytes to write
	twim_tx_nb_bytes = package->length;
8002a7c2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a7c6:	70 49       	ld.w	r9,r8[0x10]
8002a7c8:	ec f8 00 84 	ld.w	r8,r6[132]
8002a7cc:	91 09       	st.w	r8[0x0],r9
	// initiate the transfer to send the data
	twim->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
			| (package->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
			| (AVR32_TWIM_CMDR_VALID_MASK)
8002a7ce:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a7d2:	70 08       	ld.w	r8,r8[0x0]
	// get a pointer to applicative data
	twim_tx_data = package->buffer;
	// get a copy of nb bytes to write
	twim_tx_nb_bytes = package->length;
	// initiate the transfer to send the data
	twim->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8002a7d4:	f0 09 15 01 	lsl	r9,r8,0x1
			| (package->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
			| (AVR32_TWIM_CMDR_VALID_MASK)
8002a7d8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a7dc:	70 48       	ld.w	r8,r8[0x10]
	twim_tx_data = package->buffer;
	// get a copy of nb bytes to write
	twim_tx_nb_bytes = package->length;
	// initiate the transfer to send the data
	twim->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
			| (package->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
8002a7de:	b1 68       	lsl	r8,0x10
			| (AVR32_TWIM_CMDR_VALID_MASK)
8002a7e0:	f3 e8 10 08 	or	r8,r9,r8
	// get a pointer to applicative data
	twim_tx_data = package->buffer;
	// get a copy of nb bytes to write
	twim_tx_nb_bytes = package->length;
	// initiate the transfer to send the data
	twim->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8002a7e4:	10 99       	mov	r9,r8
8002a7e6:	e8 19 e0 00 	orl	r9,0xe000
8002a7ea:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a7ee:	91 39       	st.w	r8[0xc],r9
			| (AVR32_TWIM_CMDR_VALID_MASK)
			| (AVR32_TWIM_CMDR_START_MASK)
			| (AVR32_TWIM_CMDR_STOP_MASK) 
			| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
	// update IMR through IER
	twim_inst->ier = twim_it_mask;
8002a7f0:	ec f8 00 40 	ld.w	r8,r6[64]
8002a7f4:	70 08       	ld.w	r8,r8[0x0]
8002a7f6:	ec f9 00 fc 	ld.w	r9,r6[252]
8002a7fa:	72 09       	ld.w	r9,r9[0x0]
8002a7fc:	91 89       	st.w	r8[0x20],r9
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
8002a7fe:	ec f8 00 40 	ld.w	r8,r6[64]
8002a802:	70 08       	ld.w	r8,r8[0x0]
8002a804:	30 19       	mov	r9,1
8002a806:	91 09       	st.w	r8[0x0],r9
	// Enable all interrupts
	cpu_irq_enable ();
8002a808:	d5 03       	csrf	0x10
	// send data
	while (!(transfer_status) && !(twim_status ())) {
8002a80a:	c0 38       	rjmp	8002a810 <twim_write_packet+0x18c>
		cpu_relax();
8002a80c:	fe cf ff fc 	sub	pc,pc,-4
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
	// Enable all interrupts
	cpu_irq_enable ();
	// send data
	while (!(transfer_status) && !(twim_status ())) {
8002a810:	ec f8 00 78 	ld.w	r8,r6[120]
8002a814:	70 08       	ld.w	r8,r8[0x0]
8002a816:	58 08       	cp.w	r8,0
8002a818:	c0 61       	brne	8002a824 <twim_write_packet+0x1a0>
8002a81a:	f0 16 00 68 	mcall	r6[416]
8002a81e:	18 98       	mov	r8,r12
8002a820:	58 08       	cp.w	r8,0
8002a822:	cf 50       	breq	8002a80c <twim_write_packet+0x188>
		cpu_relax();
	}}
#if AVR32_TWIM_H_VERSION > 101	//Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
8002a824:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a828:	30 29       	mov	r9,2
8002a82a:	91 09       	st.w	r8[0x0],r9
#endif
	// Check for nack
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
8002a82c:	ec f8 00 78 	ld.w	r8,r6[120]
8002a830:	70 08       	ld.w	r8,r8[0x0]
#if AVR32_TWIM_H_VERSION > 101	//Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	// Check for nack
	if (transfer_status == TWI_RECEIVE_NACK
8002a832:	5b c8       	cp.w	r8,-4
8002a834:	c0 60       	breq	8002a840 <twim_write_packet+0x1bc>
			|| transfer_status == TWI_ARBITRATION_LOST) {
8002a836:	ec f8 00 78 	ld.w	r8,r6[120]
8002a83a:	70 08       	ld.w	r8,r8[0x0]
#if AVR32_TWIM_H_VERSION > 101	//Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	// Check for nack
	if (transfer_status == TWI_RECEIVE_NACK
8002a83c:	5b e8       	cp.w	r8,-2
8002a83e:	c0 31       	brne	8002a844 <twim_write_packet+0x1c0>
			|| transfer_status == TWI_ARBITRATION_LOST) {
		return ERR_IO_ERROR;
8002a840:	3f f8       	mov	r8,-1
8002a842:	c0 28       	rjmp	8002a846 <twim_write_packet+0x1c2>
	}
	return STATUS_OK;
8002a844:	30 08       	mov	r8,0
}
8002a846:	10 9c       	mov	r12,r8
8002a848:	2f ed       	sub	sp,-8
8002a84a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002a84e:	00 00       	add	r0,r0
8002a850:	80 02       	ld.sh	r2,r0[0x0]
8002a852:	a5 12       	ld.d	r2,--r2

8002a854 <twim_write>:
 * \retval STATUS_OK      If all bytes were send successfully
 * \retval ERR_IO_ERROR   NACK received or Bus Arbitration lost
 */
status_code_t twim_write (volatile avr32_twim_t *twim, uint8_t const *buffer,
		uint32_t nbytes, uint32_t saddr, bool tenbit)
{
8002a854:	eb cd 40 c0 	pushm	r6-r7,lr
8002a858:	1a 97       	mov	r7,sp
8002a85a:	20 5d       	sub	sp,20
8002a85c:	4b f6       	lddpc	r6,8002a958 <twim_write+0x104>
8002a85e:	1e 26       	rsub	r6,pc
8002a860:	ef 4c ff fc 	st.w	r7[-4],r12
8002a864:	ef 4b ff f8 	st.w	r7[-8],r11
8002a868:	ef 4a ff f4 	st.w	r7[-12],r10
8002a86c:	ef 49 ff f0 	st.w	r7[-16],r9
8002a870:	ef 68 ff ec 	st.b	r7[-20],r8
	// Reset the TWIM module to clear the THR register
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
8002a874:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a878:	30 19       	mov	r9,1
8002a87a:	91 09       	st.w	r8[0x0],r9
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
8002a87c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a880:	e0 69 00 80 	mov	r9,128
8002a884:	91 09       	st.w	r8[0x0],r9
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
8002a886:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a88a:	30 29       	mov	r9,2
8002a88c:	91 09       	st.w	r8[0x0],r9
	// Set pointer to TWIM instance for IT
	twim_inst = twim;
8002a88e:	ec f8 00 40 	ld.w	r8,r6[64]
8002a892:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002a896:	91 09       	st.w	r8[0x0],r9
	// Disable the TWIM interrupts
	twim_disable_interrupt (twim_inst);
8002a898:	ec f8 00 40 	ld.w	r8,r6[64]
8002a89c:	70 08       	ld.w	r8,r8[0x0]
8002a89e:	10 9c       	mov	r12,r8
8002a8a0:	f0 16 00 77 	mcall	r6[476]
	// get a pointer to applicative data
	twim_tx_data = buffer;
8002a8a4:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002a8a8:	ec f8 00 90 	ld.w	r8,r6[144]
8002a8ac:	91 09       	st.w	r8[0x0],r9
	// set the number of bytes to transmit
	twim_tx_nb_bytes = nbytes;
8002a8ae:	ec f8 00 84 	ld.w	r8,r6[132]
8002a8b2:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002a8b6:	91 09       	st.w	r8[0x0],r9
	// Set next transfer to false
	twim_next = false;
8002a8b8:	ec f9 00 b4 	ld.w	r9,r6[180]
8002a8bc:	30 08       	mov	r8,0
8002a8be:	b2 88       	st.b	r9[0x0],r8
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
8002a8c0:	ec f8 00 78 	ld.w	r8,r6[120]
8002a8c4:	30 09       	mov	r9,0
8002a8c6:	91 09       	st.w	r8[0x0],r9
	// set the command to start the transfer
	twim_inst->cmdr = (saddr << AVR32_TWIM_CMDR_SADR_OFFSET)
8002a8c8:	ec f8 00 40 	ld.w	r8,r6[64]
8002a8cc:	70 08       	ld.w	r8,r8[0x0]
8002a8ce:	ee f9 ff f0 	ld.w	r9,r7[-16]
8002a8d2:	f2 0a 15 01 	lsl	r10,r9,0x1
			| (nbytes << AVR32_TWIM_CMDR_NBYTES_OFFSET)
8002a8d6:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002a8da:	b1 69       	lsl	r9,0x10
			| (AVR32_TWIM_CMDR_VALID_MASK)
8002a8dc:	12 4a       	or	r10,r9
			| (AVR32_TWIM_CMDR_START_MASK)
			| (AVR32_TWIM_CMDR_STOP_MASK)
			| ((tenbit ? 1 : 0) << AVR32_TWIM_CMDR_TENBIT_OFFSET)
8002a8de:	ef 39 ff ec 	ld.ub	r9,r7[-20]
8002a8e2:	ab 79       	lsl	r9,0xb
	// Set next transfer to false
	twim_next = false;
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
	// set the command to start the transfer
	twim_inst->cmdr = (saddr << AVR32_TWIM_CMDR_SADR_OFFSET)
8002a8e4:	f5 e9 10 09 	or	r9,r10,r9
8002a8e8:	e8 19 e0 00 	orl	r9,0xe000
8002a8ec:	91 39       	st.w	r8[0xc],r9
			| (AVR32_TWIM_CMDR_START_MASK)
			| (AVR32_TWIM_CMDR_STOP_MASK)
			| ((tenbit ? 1 : 0) << AVR32_TWIM_CMDR_TENBIT_OFFSET)
			| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
	// mask NACK and TXRDY interrupts
	twim_it_mask = AVR32_TWIM_IER_NAK_MASK | AVR32_TWIM_IER_TXRDY_MASK;
8002a8ee:	ec f8 00 fc 	ld.w	r8,r6[252]
8002a8f2:	e0 69 03 02 	mov	r9,770
8002a8f6:	91 09       	st.w	r8[0x0],r9
	// update IMR through IER
	twim_inst->ier = twim_it_mask;
8002a8f8:	ec f8 00 40 	ld.w	r8,r6[64]
8002a8fc:	70 08       	ld.w	r8,r8[0x0]
8002a8fe:	ec f9 00 fc 	ld.w	r9,r6[252]
8002a902:	72 09       	ld.w	r9,r9[0x0]
8002a904:	91 89       	st.w	r8[0x20],r9
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
8002a906:	ec f8 00 40 	ld.w	r8,r6[64]
8002a90a:	70 08       	ld.w	r8,r8[0x0]
8002a90c:	30 19       	mov	r9,1
8002a90e:	91 09       	st.w	r8[0x0],r9
	// Enable all interrupts
	cpu_irq_enable ();
8002a910:	d5 03       	csrf	0x10
	// send data
	while (!(transfer_status) && !(twim_status ())) {
8002a912:	c0 38       	rjmp	8002a918 <twim_write+0xc4>
		cpu_relax();
8002a914:	fe cf ff fc 	sub	pc,pc,-4
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
	// Enable all interrupts
	cpu_irq_enable ();
	// send data
	while (!(transfer_status) && !(twim_status ())) {
8002a918:	ec f8 00 78 	ld.w	r8,r6[120]
8002a91c:	70 08       	ld.w	r8,r8[0x0]
8002a91e:	58 08       	cp.w	r8,0
8002a920:	c0 61       	brne	8002a92c <twim_write+0xd8>
8002a922:	f0 16 00 68 	mcall	r6[416]
8002a926:	18 98       	mov	r8,r12
8002a928:	58 08       	cp.w	r8,0
8002a92a:	cf 50       	breq	8002a914 <twim_write+0xc0>
		cpu_relax();
	}
#if AVR32_TWIM_H_VERSION > 101	// Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
8002a92c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a930:	30 29       	mov	r9,2
8002a932:	91 09       	st.w	r8[0x0],r9
#endif
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
8002a934:	ec f8 00 78 	ld.w	r8,r6[120]
8002a938:	70 08       	ld.w	r8,r8[0x0]
	}
#if AVR32_TWIM_H_VERSION > 101	// Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	if (transfer_status == TWI_RECEIVE_NACK
8002a93a:	5b c8       	cp.w	r8,-4
8002a93c:	c0 60       	breq	8002a948 <twim_write+0xf4>
			|| transfer_status == TWI_ARBITRATION_LOST) {
8002a93e:	ec f8 00 78 	ld.w	r8,r6[120]
8002a942:	70 08       	ld.w	r8,r8[0x0]
	}
#if AVR32_TWIM_H_VERSION > 101	// Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	if (transfer_status == TWI_RECEIVE_NACK
8002a944:	5b e8       	cp.w	r8,-2
8002a946:	c0 31       	brne	8002a94c <twim_write+0xf8>
			|| transfer_status == TWI_ARBITRATION_LOST) {
		return ERR_IO_ERROR;
8002a948:	3f f8       	mov	r8,-1
8002a94a:	c0 28       	rjmp	8002a94e <twim_write+0xfa>
	}
	return STATUS_OK;
8002a94c:	30 08       	mov	r8,0
}
8002a94e:	10 9c       	mov	r12,r8
8002a950:	2f bd       	sub	sp,-20
8002a952:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002a956:	00 00       	add	r0,r0
8002a958:	80 02       	ld.sh	r2,r0[0x0]
8002a95a:	a6 e2       	st.b	r3[0x6],r2

8002a95c <twim_chained_transfer>:
 * \retval ERR_IO_ERROR   NACK received or Bus Arbitration lost
 */
status_code_t twim_chained_transfer (volatile avr32_twim_t *twim,
		volatile twim_transfer_t *first,
		volatile twim_transfer_t *second, bool tenbit)
{
8002a95c:	eb cd 40 c0 	pushm	r6-r7,lr
8002a960:	1a 97       	mov	r7,sp
8002a962:	20 4d       	sub	sp,16
8002a964:	fe f6 03 4c 	ld.w	r6,pc[844]
8002a968:	1e 26       	rsub	r6,pc
8002a96a:	ef 4c ff fc 	st.w	r7[-4],r12
8002a96e:	ef 4b ff f8 	st.w	r7[-8],r11
8002a972:	ef 4a ff f4 	st.w	r7[-12],r10
8002a976:	12 98       	mov	r8,r9
8002a978:	ef 68 ff f0 	st.b	r7[-16],r8
	// Reset the TWIM module to clear the THR register
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
8002a97c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a980:	30 19       	mov	r9,1
8002a982:	91 09       	st.w	r8[0x0],r9
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
8002a984:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a988:	e0 69 00 80 	mov	r9,128
8002a98c:	91 09       	st.w	r8[0x0],r9
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
8002a98e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a992:	30 29       	mov	r9,2
8002a994:	91 09       	st.w	r8[0x0],r9
	// Set pointer to TWIM instance for IT
	twim_inst = twim;
8002a996:	ec f8 00 40 	ld.w	r8,r6[64]
8002a99a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002a99e:	91 09       	st.w	r8[0x0],r9
	// Disable the TWIM interrupts
	twim_disable_interrupt (twim_inst);
8002a9a0:	ec f8 00 40 	ld.w	r8,r6[64]
8002a9a4:	70 08       	ld.w	r8,r8[0x0]
8002a9a6:	10 9c       	mov	r12,r8
8002a9a8:	f0 16 00 77 	mcall	r6[476]
	// Set next transfer to false
	twim_next = false;
8002a9ac:	ec f9 00 b4 	ld.w	r9,r6[180]
8002a9b0:	30 08       	mov	r8,0
8002a9b2:	b2 88       	st.b	r9[0x0],r8
	transfer_status = TWI_SUCCESS;
8002a9b4:	ec f8 00 78 	ld.w	r8,r6[120]
8002a9b8:	30 09       	mov	r9,0
8002a9ba:	91 09       	st.w	r8[0x0],r9
	if (tenbit && first->read) {
8002a9bc:	ef 39 ff f0 	ld.ub	r9,r7[-16]
8002a9c0:	30 08       	mov	r8,0
8002a9c2:	f0 09 18 00 	cp.b	r9,r8
8002a9c6:	c3 00       	breq	8002aa26 <twim_chained_transfer+0xca>
8002a9c8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a9cc:	f1 38 00 0c 	ld.ub	r8,r8[12]
8002a9d0:	5c 58       	castu.b	r8
8002a9d2:	c2 a0       	breq	8002aa26 <twim_chained_transfer+0xca>
		twim->cmdr = (first->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
				| (0 << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
8002a9d4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a9d8:	70 08       	ld.w	r8,r8[0x0]
	twim_disable_interrupt (twim_inst);
	// Set next transfer to false
	twim_next = false;
	transfer_status = TWI_SUCCESS;
	if (tenbit && first->read) {
		twim->cmdr = (first->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8002a9da:	a1 78       	lsl	r8,0x1
8002a9dc:	10 99       	mov	r9,r8
8002a9de:	e8 19 a8 00 	orl	r9,0xa800
8002a9e2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a9e6:	91 39       	st.w	r8[0xc],r9
				| (AVR32_TWIM_CMDR_TENBIT_MASK)
				| (0 << AVR32_TWIM_CMDR_READ_OFFSET);

		twim->ncmdr = (first->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
				| (first->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
8002a9e8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a9ec:	70 08       	ld.w	r8,r8[0x0]
				| (AVR32_TWIM_CMDR_START_MASK)
				| (0 << AVR32_TWIM_CMDR_STOP_OFFSET)
				| (AVR32_TWIM_CMDR_TENBIT_MASK)
				| (0 << AVR32_TWIM_CMDR_READ_OFFSET);

		twim->ncmdr = (first->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8002a9ee:	f0 09 15 01 	lsl	r9,r8,0x1
				| (first->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
8002a9f2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a9f6:	70 28       	ld.w	r8,r8[0x8]
				| (0 << AVR32_TWIM_CMDR_STOP_OFFSET)
				| (AVR32_TWIM_CMDR_TENBIT_MASK)
				| (0 << AVR32_TWIM_CMDR_READ_OFFSET);

		twim->ncmdr = (first->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
				| (first->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
8002a9f8:	b1 68       	lsl	r8,0x10
				| (AVR32_TWIM_CMDR_VALID_MASK)
8002a9fa:	f3 e8 10 08 	or	r8,r9,r8
				| (AVR32_TWIM_CMDR_START_MASK)
				| (0 << AVR32_TWIM_CMDR_STOP_OFFSET)
				| (AVR32_TWIM_CMDR_TENBIT_MASK)
				| (0 << AVR32_TWIM_CMDR_READ_OFFSET);

		twim->ncmdr = (first->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8002a9fe:	10 99       	mov	r9,r8
8002aa00:	e8 19 b8 01 	orl	r9,0xb801
8002aa04:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002aa08:	91 49       	st.w	r8[0x10],r9
				| (AVR32_TWIM_CMDR_START_MASK)
				| (0 << AVR32_TWIM_CMDR_STOP_OFFSET)
				| (AVR32_TWIM_CMDR_TENBIT_MASK)
				| (AVR32_TWIM_CMDR_REPSAME_MASK)
				| (AVR32_TWIM_CMDR_READ_MASK);
		while (!(twim->sr & AVR32_TWIM_SR_CCOMP_MASK)) {
8002aa0a:	c0 38       	rjmp	8002aa10 <twim_chained_transfer+0xb4>
			cpu_relax();
8002aa0c:	fe cf ff fc 	sub	pc,pc,-4
				| (AVR32_TWIM_CMDR_START_MASK)
				| (0 << AVR32_TWIM_CMDR_STOP_OFFSET)
				| (AVR32_TWIM_CMDR_TENBIT_MASK)
				| (AVR32_TWIM_CMDR_REPSAME_MASK)
				| (AVR32_TWIM_CMDR_READ_MASK);
		while (!(twim->sr & AVR32_TWIM_SR_CCOMP_MASK)) {
8002aa10:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002aa14:	70 78       	ld.w	r8,r8[0x1c]
8002aa16:	e2 18 00 08 	andl	r8,0x8,COH
8002aa1a:	cf 90       	breq	8002aa0c <twim_chained_transfer+0xb0>
			cpu_relax();
		}
		twim->scr = AVR32_TWIM_SR_CCOMP_MASK;
8002aa1c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002aa20:	30 89       	mov	r9,8
8002aa22:	91 b9       	st.w	r8[0x2c],r9
	// Disable the TWIM interrupts
	twim_disable_interrupt (twim_inst);
	// Set next transfer to false
	twim_next = false;
	transfer_status = TWI_SUCCESS;
	if (tenbit && first->read) {
8002aa24:	c1 c8       	rjmp	8002aa5c <twim_chained_transfer+0x100>
		}
		twim->scr = AVR32_TWIM_SR_CCOMP_MASK;
	} else {
		twim->cmdr = (first->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
				| (first->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
8002aa26:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002aa2a:	70 08       	ld.w	r8,r8[0x0]
		while (!(twim->sr & AVR32_TWIM_SR_CCOMP_MASK)) {
			cpu_relax();
		}
		twim->scr = AVR32_TWIM_SR_CCOMP_MASK;
	} else {
		twim->cmdr = (first->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8002aa2c:	f0 09 15 01 	lsl	r9,r8,0x1
				| (first->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
8002aa30:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002aa34:	70 28       	ld.w	r8,r8[0x8]
			cpu_relax();
		}
		twim->scr = AVR32_TWIM_SR_CCOMP_MASK;
	} else {
		twim->cmdr = (first->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
				| (first->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
8002aa36:	b1 68       	lsl	r8,0x10
				| (AVR32_TWIM_CMDR_VALID_MASK)
8002aa38:	10 49       	or	r9,r8
				| (AVR32_TWIM_CMDR_START_MASK)
				| (0 << AVR32_TWIM_CMDR_STOP_OFFSET)
				| ((tenbit ? 1 : 0) << AVR32_TWIM_CMDR_TENBIT_OFFSET)
8002aa3a:	ef 38 ff f0 	ld.ub	r8,r7[-16]
8002aa3e:	ab 78       	lsl	r8,0xb
		while (!(twim->sr & AVR32_TWIM_SR_CCOMP_MASK)) {
			cpu_relax();
		}
		twim->scr = AVR32_TWIM_SR_CCOMP_MASK;
	} else {
		twim->cmdr = (first->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8002aa40:	10 49       	or	r9,r8
				| (first->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
				| (AVR32_TWIM_CMDR_START_MASK)
				| (0 << AVR32_TWIM_CMDR_STOP_OFFSET)
				| ((tenbit ? 1 : 0) << AVR32_TWIM_CMDR_TENBIT_OFFSET)
				| ((first->read ? 1 : 0) << AVR32_TWIM_CMDR_READ_OFFSET);
8002aa42:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002aa46:	f1 38 00 0c 	ld.ub	r8,r8[12]
8002aa4a:	5c 58       	castu.b	r8
		while (!(twim->sr & AVR32_TWIM_SR_CCOMP_MASK)) {
			cpu_relax();
		}
		twim->scr = AVR32_TWIM_SR_CCOMP_MASK;
	} else {
		twim->cmdr = (first->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8002aa4c:	f3 e8 10 08 	or	r8,r9,r8
8002aa50:	10 99       	mov	r9,r8
8002aa52:	e8 19 a0 00 	orl	r9,0xa000
8002aa56:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002aa5a:	91 39       	st.w	r8[0xc],r9
				| ((first->read ? 1 : 0) << AVR32_TWIM_CMDR_READ_OFFSET);
	}

	twim->ncmdr = (second->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
			| (second->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
			| (AVR32_TWIM_CMDR_VALID_MASK)
8002aa5c:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002aa60:	70 08       	ld.w	r8,r8[0x0]
				| (0 << AVR32_TWIM_CMDR_STOP_OFFSET)
				| ((tenbit ? 1 : 0) << AVR32_TWIM_CMDR_TENBIT_OFFSET)
				| ((first->read ? 1 : 0) << AVR32_TWIM_CMDR_READ_OFFSET);
	}

	twim->ncmdr = (second->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8002aa62:	f0 09 15 01 	lsl	r9,r8,0x1
			| (second->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
			| (AVR32_TWIM_CMDR_VALID_MASK)
8002aa66:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002aa6a:	70 28       	ld.w	r8,r8[0x8]
				| ((tenbit ? 1 : 0) << AVR32_TWIM_CMDR_TENBIT_OFFSET)
				| ((first->read ? 1 : 0) << AVR32_TWIM_CMDR_READ_OFFSET);
	}

	twim->ncmdr = (second->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
			| (second->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
8002aa6c:	b1 68       	lsl	r8,0x10
			| (AVR32_TWIM_CMDR_VALID_MASK)
8002aa6e:	10 49       	or	r9,r8
			| (AVR32_TWIM_CMDR_START_MASK)
			| (AVR32_TWIM_CMDR_STOP_MASK)
			| ((tenbit ? 1 : 0) << AVR32_TWIM_CMDR_TENBIT_OFFSET)
8002aa70:	ef 38 ff f0 	ld.ub	r8,r7[-16]
8002aa74:	ab 78       	lsl	r8,0xb
				| (0 << AVR32_TWIM_CMDR_STOP_OFFSET)
				| ((tenbit ? 1 : 0) << AVR32_TWIM_CMDR_TENBIT_OFFSET)
				| ((first->read ? 1 : 0) << AVR32_TWIM_CMDR_READ_OFFSET);
	}

	twim->ncmdr = (second->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8002aa76:	f3 e8 10 0a 	or	r10,r9,r8
			| (second->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
			| (AVR32_TWIM_CMDR_VALID_MASK)
			| (AVR32_TWIM_CMDR_START_MASK)
			| (AVR32_TWIM_CMDR_STOP_MASK)
			| ((tenbit ? 1 : 0) << AVR32_TWIM_CMDR_TENBIT_OFFSET)
			| (((tenbit && second->read) ? 1 : 0) 
8002aa7a:	ef 39 ff f0 	ld.ub	r9,r7[-16]
8002aa7e:	30 08       	mov	r8,0
8002aa80:	f0 09 18 00 	cp.b	r9,r8
8002aa84:	c0 90       	breq	8002aa96 <twim_chained_transfer+0x13a>
8002aa86:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002aa8a:	f1 38 00 0c 	ld.ub	r8,r8[12]
8002aa8e:	5c 58       	castu.b	r8
8002aa90:	c0 30       	breq	8002aa96 <twim_chained_transfer+0x13a>
8002aa92:	30 18       	mov	r8,1
8002aa94:	c0 28       	rjmp	8002aa98 <twim_chained_transfer+0x13c>
8002aa96:	30 08       	mov	r8,0
8002aa98:	ad 68       	lsl	r8,0xc
				| (0 << AVR32_TWIM_CMDR_STOP_OFFSET)
				| ((tenbit ? 1 : 0) << AVR32_TWIM_CMDR_TENBIT_OFFSET)
				| ((first->read ? 1 : 0) << AVR32_TWIM_CMDR_READ_OFFSET);
	}

	twim->ncmdr = (second->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8002aa9a:	f5 e8 10 09 	or	r9,r10,r8
			| (AVR32_TWIM_CMDR_START_MASK)
			| (AVR32_TWIM_CMDR_STOP_MASK)
			| ((tenbit ? 1 : 0) << AVR32_TWIM_CMDR_TENBIT_OFFSET)
			| (((tenbit && second->read) ? 1 : 0) 
			<< AVR32_TWIM_CMDR_REPSAME_OFFSET)
			| ((second->read ? 1 : 0) << AVR32_TWIM_CMDR_READ_OFFSET);
8002aa9e:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002aaa2:	f1 38 00 0c 	ld.ub	r8,r8[12]
8002aaa6:	5c 58       	castu.b	r8
				| (0 << AVR32_TWIM_CMDR_STOP_OFFSET)
				| ((tenbit ? 1 : 0) << AVR32_TWIM_CMDR_TENBIT_OFFSET)
				| ((first->read ? 1 : 0) << AVR32_TWIM_CMDR_READ_OFFSET);
	}

	twim->ncmdr = (second->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8002aaa8:	f3 e8 10 08 	or	r8,r9,r8
8002aaac:	10 99       	mov	r9,r8
8002aaae:	e8 19 e0 00 	orl	r9,0xe000
8002aab2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002aab6:	91 49       	st.w	r8[0x10],r9
			| ((tenbit ? 1 : 0) << AVR32_TWIM_CMDR_TENBIT_OFFSET)
			| (((tenbit && second->read) ? 1 : 0) 
			<< AVR32_TWIM_CMDR_REPSAME_OFFSET)
			| ((second->read ? 1 : 0) << AVR32_TWIM_CMDR_READ_OFFSET);

	if (first->read) {
8002aab8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002aabc:	f1 38 00 0c 	ld.ub	r8,r8[12]
8002aac0:	5c 58       	castu.b	r8
8002aac2:	c3 80       	breq	8002ab32 <twim_chained_transfer+0x1d6>
		// get a pointer to applicative data
		twim_rx_data = first->buffer;
8002aac4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002aac8:	70 18       	ld.w	r8,r8[0x4]
8002aaca:	10 99       	mov	r9,r8
8002aacc:	ec f8 00 b8 	ld.w	r8,r6[184]
8002aad0:	91 09       	st.w	r8[0x0],r9
		// get data
		while (!(twim->sr & AVR32_TWIM_SR_CCOMP_MASK)) {
8002aad2:	c1 58       	rjmp	8002aafc <twim_chained_transfer+0x1a0>
			if (twim->sr & AVR32_TWIM_SR_RXRDY_MASK) {
8002aad4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002aad8:	70 78       	ld.w	r8,r8[0x1c]
8002aada:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002aade:	5c 58       	castu.b	r8
8002aae0:	c0 e0       	breq	8002aafc <twim_chained_transfer+0x1a0>
				*twim_rx_data++ = twim->rhr;
8002aae2:	ec f8 00 b8 	ld.w	r8,r6[184]
8002aae6:	70 08       	ld.w	r8,r8[0x0]
8002aae8:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002aaec:	72 59       	ld.w	r9,r9[0x14]
8002aaee:	5c 59       	castu.b	r9
8002aaf0:	b0 89       	st.b	r8[0x0],r9
8002aaf2:	f0 c9 ff ff 	sub	r9,r8,-1
8002aaf6:	ec f8 00 b8 	ld.w	r8,r6[184]
8002aafa:	91 09       	st.w	r8[0x0],r9

	if (first->read) {
		// get a pointer to applicative data
		twim_rx_data = first->buffer;
		// get data
		while (!(twim->sr & AVR32_TWIM_SR_CCOMP_MASK)) {
8002aafc:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ab00:	70 78       	ld.w	r8,r8[0x1c]
8002ab02:	e2 18 00 08 	andl	r8,0x8,COH
8002ab06:	ce 70       	breq	8002aad4 <twim_chained_transfer+0x178>
			if (twim->sr & AVR32_TWIM_SR_RXRDY_MASK) {
				*twim_rx_data++ = twim->rhr;
			}
		}
		if (twim->sr & AVR32_TWIM_SR_RXRDY_MASK) {
8002ab08:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ab0c:	70 78       	ld.w	r8,r8[0x1c]
8002ab0e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002ab12:	5c 58       	castu.b	r8
8002ab14:	c4 40       	breq	8002ab9c <twim_chained_transfer+0x240>
			*twim_rx_data++ = twim->rhr;
8002ab16:	ec f8 00 b8 	ld.w	r8,r6[184]
8002ab1a:	70 08       	ld.w	r8,r8[0x0]
8002ab1c:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002ab20:	72 59       	ld.w	r9,r9[0x14]
8002ab22:	5c 59       	castu.b	r9
8002ab24:	b0 89       	st.b	r8[0x0],r9
8002ab26:	f0 c9 ff ff 	sub	r9,r8,-1
8002ab2a:	ec f8 00 b8 	ld.w	r8,r6[184]
8002ab2e:	91 09       	st.w	r8[0x0],r9
8002ab30:	c3 68       	rjmp	8002ab9c <twim_chained_transfer+0x240>
		}
	} else {
		// get a pointer to applicative data
		twim_tx_data = first->buffer;
8002ab32:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ab36:	70 18       	ld.w	r8,r8[0x4]
8002ab38:	10 99       	mov	r9,r8
8002ab3a:	ec f8 00 90 	ld.w	r8,r6[144]
8002ab3e:	91 09       	st.w	r8[0x0],r9
		twim_tx_nb_bytes = first->length;
8002ab40:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ab44:	70 29       	ld.w	r9,r8[0x8]
8002ab46:	ec f8 00 84 	ld.w	r8,r6[132]
8002ab4a:	91 09       	st.w	r8[0x0],r9
		// send data
		while (!(twim->sr & AVR32_TWIM_SR_CCOMP_MASK)) {
8002ab4c:	c2 28       	rjmp	8002ab90 <twim_chained_transfer+0x234>
			if ((twim_tx_nb_bytes > 0) &&
8002ab4e:	ec f8 00 84 	ld.w	r8,r6[132]
8002ab52:	70 08       	ld.w	r8,r8[0x0]
8002ab54:	58 08       	cp.w	r8,0
8002ab56:	c1 d0       	breq	8002ab90 <twim_chained_transfer+0x234>
					(twim->sr & AVR32_TWIM_SR_TXRDY_MASK)) {
8002ab58:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ab5c:	70 78       	ld.w	r8,r8[0x1c]
8002ab5e:	e2 18 00 02 	andl	r8,0x2,COH
		// get a pointer to applicative data
		twim_tx_data = first->buffer;
		twim_tx_nb_bytes = first->length;
		// send data
		while (!(twim->sr & AVR32_TWIM_SR_CCOMP_MASK)) {
			if ((twim_tx_nb_bytes > 0) &&
8002ab62:	c1 70       	breq	8002ab90 <twim_chained_transfer+0x234>
					(twim->sr & AVR32_TWIM_SR_TXRDY_MASK)) {
				twim->thr = *twim_tx_data++;
8002ab64:	ec f8 00 90 	ld.w	r8,r6[144]
8002ab68:	70 08       	ld.w	r8,r8[0x0]
8002ab6a:	11 89       	ld.ub	r9,r8[0x0]
8002ab6c:	5c 59       	castu.b	r9
8002ab6e:	12 9a       	mov	r10,r9
8002ab70:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002ab74:	93 6a       	st.w	r9[0x18],r10
8002ab76:	f0 c9 ff ff 	sub	r9,r8,-1
8002ab7a:	ec f8 00 90 	ld.w	r8,r6[144]
8002ab7e:	91 09       	st.w	r8[0x0],r9
				twim_tx_nb_bytes--;
8002ab80:	ec f8 00 84 	ld.w	r8,r6[132]
8002ab84:	70 08       	ld.w	r8,r8[0x0]
8002ab86:	f0 c9 00 01 	sub	r9,r8,1
8002ab8a:	ec f8 00 84 	ld.w	r8,r6[132]
8002ab8e:	91 09       	st.w	r8[0x0],r9
	} else {
		// get a pointer to applicative data
		twim_tx_data = first->buffer;
		twim_tx_nb_bytes = first->length;
		// send data
		while (!(twim->sr & AVR32_TWIM_SR_CCOMP_MASK)) {
8002ab90:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ab94:	70 78       	ld.w	r8,r8[0x1c]
8002ab96:	e2 18 00 08 	andl	r8,0x8,COH
8002ab9a:	cd a0       	breq	8002ab4e <twim_chained_transfer+0x1f2>
				twim_tx_nb_bytes--;
			}
		}
	}

	twim->scr = AVR32_TWIM_SR_CCOMP_MASK;
8002ab9c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002aba0:	30 89       	mov	r9,8
8002aba2:	91 b9       	st.w	r8[0x2c],r9

	if (second->read) {
8002aba4:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002aba8:	f1 38 00 0c 	ld.ub	r8,r8[12]
8002abac:	5c 58       	castu.b	r8
8002abae:	c2 40       	breq	8002abf6 <twim_chained_transfer+0x29a>
		// get a pointer to applicative data
		twim_rx_data = second->buffer;
8002abb0:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002abb4:	70 18       	ld.w	r8,r8[0x4]
8002abb6:	10 99       	mov	r9,r8
8002abb8:	ec f8 00 b8 	ld.w	r8,r6[184]
8002abbc:	91 09       	st.w	r8[0x0],r9
		// get data
		while (!(twim->sr & AVR32_TWIM_SR_IDLE_MASK)) {
8002abbe:	c1 58       	rjmp	8002abe8 <twim_chained_transfer+0x28c>
			if (twim->sr & AVR32_TWIM_SR_RXRDY_MASK) {
8002abc0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002abc4:	70 78       	ld.w	r8,r8[0x1c]
8002abc6:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002abca:	5c 58       	castu.b	r8
8002abcc:	c0 e0       	breq	8002abe8 <twim_chained_transfer+0x28c>
				*twim_rx_data++ = twim->rhr;
8002abce:	ec f8 00 b8 	ld.w	r8,r6[184]
8002abd2:	70 08       	ld.w	r8,r8[0x0]
8002abd4:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002abd8:	72 59       	ld.w	r9,r9[0x14]
8002abda:	5c 59       	castu.b	r9
8002abdc:	b0 89       	st.b	r8[0x0],r9
8002abde:	f0 c9 ff ff 	sub	r9,r8,-1
8002abe2:	ec f8 00 b8 	ld.w	r8,r6[184]
8002abe6:	91 09       	st.w	r8[0x0],r9

	if (second->read) {
		// get a pointer to applicative data
		twim_rx_data = second->buffer;
		// get data
		while (!(twim->sr & AVR32_TWIM_SR_IDLE_MASK)) {
8002abe8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002abec:	70 78       	ld.w	r8,r8[0x1c]
8002abee:	e2 18 00 10 	andl	r8,0x10,COH
8002abf2:	ce 70       	breq	8002abc0 <twim_chained_transfer+0x264>
8002abf4:	c3 68       	rjmp	8002ac60 <twim_chained_transfer+0x304>
				*twim_rx_data++ = twim->rhr;
			}
		}
	} else {
		// get a pointer to applicative data
		twim_tx_data = second->buffer;
8002abf6:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002abfa:	70 18       	ld.w	r8,r8[0x4]
8002abfc:	10 99       	mov	r9,r8
8002abfe:	ec f8 00 90 	ld.w	r8,r6[144]
8002ac02:	91 09       	st.w	r8[0x0],r9
		
		twim_tx_nb_bytes = second->length;
8002ac04:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002ac08:	70 29       	ld.w	r9,r8[0x8]
8002ac0a:	ec f8 00 84 	ld.w	r8,r6[132]
8002ac0e:	91 09       	st.w	r8[0x0],r9
		// send data
		while (!(twim->sr & AVR32_TWIM_SR_IDLE_MASK)) {
8002ac10:	c2 28       	rjmp	8002ac54 <twim_chained_transfer+0x2f8>
			if ((twim_tx_nb_bytes > 0) && 
8002ac12:	ec f8 00 84 	ld.w	r8,r6[132]
8002ac16:	70 08       	ld.w	r8,r8[0x0]
8002ac18:	58 08       	cp.w	r8,0
8002ac1a:	c1 d0       	breq	8002ac54 <twim_chained_transfer+0x2f8>
					(twim->sr & AVR32_TWIM_SR_TXRDY_MASK)) {
8002ac1c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ac20:	70 78       	ld.w	r8,r8[0x1c]
8002ac22:	e2 18 00 02 	andl	r8,0x2,COH
		twim_tx_data = second->buffer;
		
		twim_tx_nb_bytes = second->length;
		// send data
		while (!(twim->sr & AVR32_TWIM_SR_IDLE_MASK)) {
			if ((twim_tx_nb_bytes > 0) && 
8002ac26:	c1 70       	breq	8002ac54 <twim_chained_transfer+0x2f8>
					(twim->sr & AVR32_TWIM_SR_TXRDY_MASK)) {
			twim->thr = *twim_tx_data++;
8002ac28:	ec f8 00 90 	ld.w	r8,r6[144]
8002ac2c:	70 08       	ld.w	r8,r8[0x0]
8002ac2e:	11 89       	ld.ub	r9,r8[0x0]
8002ac30:	5c 59       	castu.b	r9
8002ac32:	12 9a       	mov	r10,r9
8002ac34:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002ac38:	93 6a       	st.w	r9[0x18],r10
8002ac3a:	f0 c9 ff ff 	sub	r9,r8,-1
8002ac3e:	ec f8 00 90 	ld.w	r8,r6[144]
8002ac42:	91 09       	st.w	r8[0x0],r9
			twim_tx_nb_bytes--;
8002ac44:	ec f8 00 84 	ld.w	r8,r6[132]
8002ac48:	70 08       	ld.w	r8,r8[0x0]
8002ac4a:	f0 c9 00 01 	sub	r9,r8,1
8002ac4e:	ec f8 00 84 	ld.w	r8,r6[132]
8002ac52:	91 09       	st.w	r8[0x0],r9
		// get a pointer to applicative data
		twim_tx_data = second->buffer;
		
		twim_tx_nb_bytes = second->length;
		// send data
		while (!(twim->sr & AVR32_TWIM_SR_IDLE_MASK)) {
8002ac54:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ac58:	70 78       	ld.w	r8,r8[0x1c]
8002ac5a:	e2 18 00 10 	andl	r8,0x10,COH
8002ac5e:	cd a0       	breq	8002ac12 <twim_chained_transfer+0x2b6>
			twim_tx_nb_bytes--;
			}
		}
	}

	if (twim->sr & AVR32_TWIM_SR_ARBLST_MASK) {
8002ac60:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ac64:	70 78       	ld.w	r8,r8[0x1c]
8002ac66:	e2 18 04 00 	andl	r8,0x400,COH
8002ac6a:	c0 80       	breq	8002ac7a <twim_chained_transfer+0x31e>
		twim->scr = AVR32_TWIM_SCR_ARBLST_MASK;
8002ac6c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ac70:	e0 69 04 00 	mov	r9,1024
8002ac74:	91 b9       	st.w	r8[0x2c],r9
		return ERR_IO_ERROR;
8002ac76:	3f f8       	mov	r8,-1
8002ac78:	c1 88       	rjmp	8002aca8 <twim_chained_transfer+0x34c>
	}

	if (twim->sr & AVR32_TWIM_SR_NAK_MASK) {
8002ac7a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ac7e:	70 78       	ld.w	r8,r8[0x1c]
8002ac80:	e2 18 03 00 	andl	r8,0x300,COH
8002ac84:	c1 10       	breq	8002aca6 <twim_chained_transfer+0x34a>
		twim->cmdr = twim->cmdr ^ AVR32_TWIM_CMDR_VALID_MASK;
8002ac86:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ac8a:	70 38       	ld.w	r8,r8[0xc]
8002ac8c:	10 99       	mov	r9,r8
8002ac8e:	ec 19 80 00 	eorl	r9,0x8000
8002ac92:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ac96:	91 39       	st.w	r8[0xc],r9
		twim->scr = AVR32_TWIM_SCR_NAK_MASK;
8002ac98:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ac9c:	e0 69 03 00 	mov	r9,768
8002aca0:	91 b9       	st.w	r8[0x2c],r9
		return ERR_IO_ERROR;
8002aca2:	3f f8       	mov	r8,-1
8002aca4:	c0 28       	rjmp	8002aca8 <twim_chained_transfer+0x34c>
	}
	return STATUS_OK;
8002aca6:	30 08       	mov	r8,0
}
8002aca8:	10 9c       	mov	r12,r8
8002acaa:	2f cd       	sub	sp,-16
8002acac:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002acb0:	80 02       	ld.sh	r2,r0[0x0]
8002acb2:	a7 ec       	*unknown*

8002acb4 <twim_status>:

/**
 * \brief Information about the current status of the TWI Bus
 */
uint8_t twim_status ( void )
{
8002acb4:	eb cd 40 c0 	pushm	r6-r7,lr
8002acb8:	1a 97       	mov	r7,sp
8002acba:	20 1d       	sub	sp,4
8002acbc:	48 a6       	lddpc	r6,8002ace4 <twim_status+0x30>
8002acbe:	1e 26       	rsub	r6,pc
	uint32_t status = twim_inst->sr;
8002acc0:	ec f8 00 40 	ld.w	r8,r6[64]
8002acc4:	70 08       	ld.w	r8,r8[0x0]
8002acc6:	70 78       	ld.w	r8,r8[0x1c]
8002acc8:	ef 48 ff fc 	st.w	r7[-4],r8
	if ((status & AVR32_TWIM_SR_IDLE_MASK)
8002accc:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002acd0:	e2 18 00 10 	andl	r8,0x10,COH
8002acd4:	c0 30       	breq	8002acda <twim_status+0x26>
#if AVR32_TWIM_H_VERSION > 101 ||(status&AVR32_TWIM_SR_BUSFREE_MASK)
#endif 
		) {
		return 1;
8002acd6:	30 18       	mov	r8,1
8002acd8:	c0 28       	rjmp	8002acdc <twim_status+0x28>
	} else {
		return 0;
8002acda:	30 08       	mov	r8,0
	}
}
8002acdc:	10 9c       	mov	r12,r8
8002acde:	2f fd       	sub	sp,-4
8002ace0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002ace4:	80 02       	ld.sh	r2,r0[0x0]
8002ace6:	ab 42       	asr	r2,0xa

8002ace8 <cpu_irq_is_enabled_flags>:

	return flags;
}

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
8002ace8:	eb cd 40 80 	pushm	r7,lr
8002acec:	1a 97       	mov	r7,sp
8002acee:	20 1d       	sub	sp,4
8002acf0:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
8002acf4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002acf8:	e6 18 00 01 	andh	r8,0x1,COH
8002acfc:	5f 08       	sreq	r8
8002acfe:	5c 58       	castu.b	r8
}
8002ad00:	10 9c       	mov	r12,r8
8002ad02:	2f fd       	sub	sp,-4
8002ad04:	e3 cd 80 80 	ldm	sp++,r7,pc

8002ad08 <usart_set_async_baudrate>:
 *
 * \retval USART_SUCCESS        Baud rate successfully initialized.
 * \retval USART_INVALID_INPUT  Baud rate set point is out of range for the given input clock frequency.
 */
static int usart_set_async_baudrate(volatile avr32_usart_t *usart, unsigned int baudrate, unsigned long pba_hz)
{
8002ad08:	eb cd 40 80 	pushm	r7,lr
8002ad0c:	1a 97       	mov	r7,sp
8002ad0e:	20 7d       	sub	sp,28
8002ad10:	ef 4c ff ec 	st.w	r7[-20],r12
8002ad14:	ef 4b ff e8 	st.w	r7[-24],r11
8002ad18:	ef 4a ff e4 	st.w	r7[-28],r10
  unsigned int over = (pba_hz >= 16 * baudrate) ? 16 : 8;
8002ad1c:	ee f8 ff e8 	ld.w	r8,r7[-24]
8002ad20:	f0 09 15 04 	lsl	r9,r8,0x4
8002ad24:	ee f8 ff e4 	ld.w	r8,r7[-28]
8002ad28:	10 39       	cp.w	r9,r8
8002ad2a:	e0 8b 00 04 	brhi	8002ad32 <usart_set_async_baudrate+0x2a>
8002ad2e:	31 08       	mov	r8,16
8002ad30:	c0 28       	rjmp	8002ad34 <usart_set_async_baudrate+0x2c>
8002ad32:	30 88       	mov	r8,8
8002ad34:	ef 48 ff f0 	st.w	r7[-16],r8
  unsigned int cd_fp = ((1 << AVR32_USART_BRGR_FP_SIZE) * pba_hz + (over * baudrate) / 2) / (over * baudrate);
8002ad38:	ee f8 ff e4 	ld.w	r8,r7[-28]
8002ad3c:	f0 09 15 03 	lsl	r9,r8,0x3
8002ad40:	ee fa ff f0 	ld.w	r10,r7[-16]
8002ad44:	ee f8 ff e8 	ld.w	r8,r7[-24]
8002ad48:	f4 08 02 48 	mul	r8,r10,r8
8002ad4c:	a1 98       	lsr	r8,0x1
8002ad4e:	f2 08 00 08 	add	r8,r9,r8
8002ad52:	ee fa ff f0 	ld.w	r10,r7[-16]
8002ad56:	ee f9 ff e8 	ld.w	r9,r7[-24]
8002ad5a:	f4 09 02 49 	mul	r9,r10,r9
8002ad5e:	f0 09 0d 08 	divu	r8,r8,r9
8002ad62:	ef 48 ff f4 	st.w	r7[-12],r8
  unsigned int cd = cd_fp >> AVR32_USART_BRGR_FP_SIZE;
8002ad66:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002ad6a:	a3 98       	lsr	r8,0x3
8002ad6c:	ef 48 ff f8 	st.w	r7[-8],r8
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);
8002ad70:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002ad74:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
8002ad78:	ef 48 ff fc 	st.w	r7[-4],r8

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
8002ad7c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ad80:	58 08       	cp.w	r8,0
8002ad82:	c0 70       	breq	8002ad90 <usart_set_async_baudrate+0x88>
8002ad84:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ad88:	e0 48 ff ff 	cp.w	r8,65535
8002ad8c:	e0 88 00 04 	brls	8002ad94 <usart_set_async_baudrate+0x8c>
    return USART_INVALID_INPUT;
8002ad90:	30 18       	mov	r8,1
8002ad92:	c2 08       	rjmp	8002add2 <usart_set_async_baudrate+0xca>

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
8002ad94:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002ad98:	70 18       	ld.w	r8,r8[0x4]
8002ad9a:	10 99       	mov	r9,r8
8002ad9c:	e4 19 ff f7 	andh	r9,0xfff7
8002ada0:	e0 19 fe cf 	andl	r9,0xfecf
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
    return USART_INVALID_INPUT;

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
8002ada4:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002ada8:	59 08       	cp.w	r8,16
8002adaa:	c0 40       	breq	8002adb2 <usart_set_async_baudrate+0xaa>
8002adac:	e8 68 00 00 	mov	r8,524288
8002adb0:	c0 28       	rjmp	8002adb4 <usart_set_async_baudrate+0xac>
8002adb2:	30 08       	mov	r8,0
8002adb4:	10 49       	or	r9,r8
8002adb6:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002adba:	91 19       	st.w	r8[0x4],r9
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
              ((over == 16) ? AVR32_USART_MR_OVER_X16 : AVR32_USART_MR_OVER_X8) << AVR32_USART_MR_OVER_OFFSET;

  usart->brgr = cd << AVR32_USART_BRGR_CD_OFFSET |
                fp << AVR32_USART_BRGR_FP_OFFSET;
8002adbc:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002adc0:	f0 09 15 10 	lsl	r9,r8,0x10
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
              ((over == 16) ? AVR32_USART_MR_OVER_X16 : AVR32_USART_MR_OVER_X8) << AVR32_USART_MR_OVER_OFFSET;

  usart->brgr = cd << AVR32_USART_BRGR_CD_OFFSET |
8002adc4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002adc8:	10 49       	or	r9,r8
8002adca:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002adce:	91 89       	st.w	r8[0x20],r9
                fp << AVR32_USART_BRGR_FP_OFFSET;

  return USART_SUCCESS;
8002add0:	30 08       	mov	r8,0
}
8002add2:	10 9c       	mov	r12,r8
8002add4:	2f 9d       	sub	sp,-28
8002add6:	e3 cd 80 80 	ldm	sp++,r7,pc

8002adda <usart_set_sync_master_baudrate>:
 *
 * \retval USART_SUCCESS        Baud rate successfully initialized.
 * \retval USART_INVALID_INPUT  Baud rate set point is out of range for the given input clock frequency.
 */
static int usart_set_sync_master_baudrate(volatile avr32_usart_t *usart, unsigned int baudrate, unsigned long pba_hz)
{
8002adda:	eb cd 40 80 	pushm	r7,lr
8002adde:	1a 97       	mov	r7,sp
8002ade0:	20 4d       	sub	sp,16
8002ade2:	ef 4c ff f8 	st.w	r7[-8],r12
8002ade6:	ef 4b ff f4 	st.w	r7[-12],r11
8002adea:	ef 4a ff f0 	st.w	r7[-16],r10
  unsigned int cd = (pba_hz + baudrate / 2) / baudrate;
8002adee:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002adf2:	f0 09 16 01 	lsr	r9,r8,0x1
8002adf6:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002adfa:	f2 08 00 08 	add	r8,r9,r8
8002adfe:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002ae02:	f0 09 0d 08 	divu	r8,r8,r9
8002ae06:	ef 48 ff fc 	st.w	r7[-4],r8

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
8002ae0a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ae0e:	58 08       	cp.w	r8,0
8002ae10:	c0 70       	breq	8002ae1e <usart_set_sync_master_baudrate+0x44>
8002ae12:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ae16:	e0 48 ff ff 	cp.w	r8,65535
8002ae1a:	e0 88 00 04 	brls	8002ae22 <usart_set_sync_master_baudrate+0x48>
    return USART_INVALID_INPUT;
8002ae1e:	30 18       	mov	r8,1
8002ae20:	c1 18       	rjmp	8002ae42 <usart_set_sync_master_baudrate+0x68>

  usart->mr = (usart->mr & ~AVR32_USART_MR_USCLKS_MASK) |
8002ae22:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ae26:	70 18       	ld.w	r8,r8[0x4]
8002ae28:	e0 18 fe cf 	andl	r8,0xfecf
8002ae2c:	10 99       	mov	r9,r8
8002ae2e:	a9 a9       	sbr	r9,0x8
8002ae30:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ae34:	91 19       	st.w	r8[0x4],r9
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
              AVR32_USART_MR_SYNC_MASK;

  usart->brgr = cd << AVR32_USART_BRGR_CD_OFFSET;
8002ae36:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ae3a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002ae3e:	91 89       	st.w	r8[0x20],r9

  return USART_SUCCESS;
8002ae40:	30 08       	mov	r8,0
}
8002ae42:	10 9c       	mov	r12,r8
8002ae44:	2f cd       	sub	sp,-16
8002ae46:	e3 cd 80 80 	ldm	sp++,r7,pc

8002ae4a <usart_set_sync_slave_baudrate>:
 * \param usart Base address of the USART instance.
 *
 * \retval USART_SUCCESS  Baud rate successfully initialized.
 */
static int usart_set_sync_slave_baudrate(volatile avr32_usart_t *usart)
{
8002ae4a:	eb cd 40 80 	pushm	r7,lr
8002ae4e:	1a 97       	mov	r7,sp
8002ae50:	20 1d       	sub	sp,4
8002ae52:	ef 4c ff fc 	st.w	r7[-4],r12
  usart->mr = (usart->mr & ~AVR32_USART_MR_USCLKS_MASK) |
8002ae56:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ae5a:	70 18       	ld.w	r8,r8[0x4]
8002ae5c:	10 99       	mov	r9,r8
8002ae5e:	e8 19 01 30 	orl	r9,0x130
8002ae62:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ae66:	91 19       	st.w	r8[0x4],r9
              AVR32_USART_MR_USCLKS_SCK << AVR32_USART_MR_USCLKS_OFFSET |
              AVR32_USART_MR_SYNC_MASK;

  return USART_SUCCESS;
8002ae68:	30 08       	mov	r8,0
}
8002ae6a:	10 9c       	mov	r12,r8
8002ae6c:	2f fd       	sub	sp,-4
8002ae6e:	e3 cd 80 80 	ldm	sp++,r7,pc

8002ae72 <usart_set_iso7816_clock>:
 *
 * \retval USART_SUCCESS        ISO7816 clock successfully initialized.
 * \retval USART_INVALID_INPUT  ISO7816 clock set point is out of range for the given input clock frequency.
 */
static int usart_set_iso7816_clock(volatile avr32_usart_t *usart, unsigned int clock, unsigned long pba_hz)
{
8002ae72:	eb cd 40 80 	pushm	r7,lr
8002ae76:	1a 97       	mov	r7,sp
8002ae78:	20 4d       	sub	sp,16
8002ae7a:	ef 4c ff f8 	st.w	r7[-8],r12
8002ae7e:	ef 4b ff f4 	st.w	r7[-12],r11
8002ae82:	ef 4a ff f0 	st.w	r7[-16],r10
  unsigned int cd = (pba_hz + clock / 2) / clock;
8002ae86:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002ae8a:	f0 09 16 01 	lsr	r9,r8,0x1
8002ae8e:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002ae92:	f2 08 00 08 	add	r8,r9,r8
8002ae96:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002ae9a:	f0 09 0d 08 	divu	r8,r8,r9
8002ae9e:	ef 48 ff fc 	st.w	r7[-4],r8

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
8002aea2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002aea6:	58 08       	cp.w	r8,0
8002aea8:	c0 70       	breq	8002aeb6 <usart_set_iso7816_clock+0x44>
8002aeaa:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002aeae:	e0 48 ff ff 	cp.w	r8,65535
8002aeb2:	e0 88 00 04 	brls	8002aeba <usart_set_iso7816_clock+0x48>
    return USART_INVALID_INPUT;
8002aeb6:	30 18       	mov	r8,1
8002aeb8:	c1 28       	rjmp	8002aedc <usart_set_iso7816_clock+0x6a>

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
8002aeba:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002aebe:	70 18       	ld.w	r8,r8[0x4]
8002aec0:	10 99       	mov	r9,r8
8002aec2:	e4 19 ff f7 	andh	r9,0xfff7
8002aec6:	e0 19 fe cf 	andl	r9,0xfecf
8002aeca:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002aece:	91 19       	st.w	r8[0x4],r9
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
              AVR32_USART_MR_OVER_X16 << AVR32_USART_MR_OVER_OFFSET;

  usart->brgr = cd << AVR32_USART_BRGR_CD_OFFSET;
8002aed0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002aed4:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002aed8:	91 89       	st.w	r8[0x20],r9

  return USART_SUCCESS;
8002aeda:	30 08       	mov	r8,0
}
8002aedc:	10 9c       	mov	r12,r8
8002aede:	2f cd       	sub	sp,-16
8002aee0:	e3 cd 80 80 	ldm	sp++,r7,pc

8002aee4 <usart_set_spi_master_baudrate>:
 *
 * \retval USART_SUCCESS        Baud rate successfully initialized.
 * \retval USART_INVALID_INPUT  Baud rate set point is out of range for the given input clock frequency.
 */
static int usart_set_spi_master_baudrate(volatile avr32_usart_t *usart, unsigned int baudrate, unsigned long pba_hz)
{
8002aee4:	eb cd 40 80 	pushm	r7,lr
8002aee8:	1a 97       	mov	r7,sp
8002aeea:	20 4d       	sub	sp,16
8002aeec:	ef 4c ff f8 	st.w	r7[-8],r12
8002aef0:	ef 4b ff f4 	st.w	r7[-12],r11
8002aef4:	ef 4a ff f0 	st.w	r7[-16],r10
  unsigned int cd = (pba_hz + baudrate / 2) / baudrate;
8002aef8:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002aefc:	f0 09 16 01 	lsr	r9,r8,0x1
8002af00:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002af04:	f2 08 00 08 	add	r8,r9,r8
8002af08:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002af0c:	f0 09 0d 08 	divu	r8,r8,r9
8002af10:	ef 48 ff fc 	st.w	r7[-4],r8

  if (cd < 4 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
8002af14:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002af18:	58 38       	cp.w	r8,3
8002af1a:	e0 88 00 08 	brls	8002af2a <usart_set_spi_master_baudrate+0x46>
8002af1e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002af22:	e0 48 ff ff 	cp.w	r8,65535
8002af26:	e0 88 00 04 	brls	8002af2e <usart_set_spi_master_baudrate+0x4a>
    return USART_INVALID_INPUT;
8002af2a:	30 18       	mov	r8,1
8002af2c:	c1 08       	rjmp	8002af4c <usart_set_spi_master_baudrate+0x68>

  usart->mr = (usart->mr & ~AVR32_USART_MR_USCLKS_MASK) |
8002af2e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002af32:	70 18       	ld.w	r8,r8[0x4]
8002af34:	10 99       	mov	r9,r8
8002af36:	e0 19 ff cf 	andl	r9,0xffcf
8002af3a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002af3e:	91 19       	st.w	r8[0x4],r9
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET;

  usart->brgr = cd << AVR32_USART_BRGR_CD_OFFSET;
8002af40:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002af44:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002af48:	91 89       	st.w	r8[0x20],r9

  return USART_SUCCESS;
8002af4a:	30 08       	mov	r8,0
}
8002af4c:	10 9c       	mov	r12,r8
8002af4e:	2f cd       	sub	sp,-16
8002af50:	e3 cd 80 80 	ldm	sp++,r7,pc

8002af54 <usart_set_spi_slave_baudrate>:
 * \param usart Base address of the USART instance.
 *
 * \retval USART_SUCCESS  Baud rate successfully initialized.
 */
static int usart_set_spi_slave_baudrate(volatile avr32_usart_t *usart)
{
8002af54:	eb cd 40 80 	pushm	r7,lr
8002af58:	1a 97       	mov	r7,sp
8002af5a:	20 1d       	sub	sp,4
8002af5c:	ef 4c ff fc 	st.w	r7[-4],r12
  usart->mr = (usart->mr & ~AVR32_USART_MR_USCLKS_MASK) |
8002af60:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002af64:	70 18       	ld.w	r8,r8[0x4]
8002af66:	10 99       	mov	r9,r8
8002af68:	e8 19 00 30 	orl	r9,0x30
8002af6c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002af70:	91 19       	st.w	r8[0x4],r9
              AVR32_USART_MR_USCLKS_SCK << AVR32_USART_MR_USCLKS_OFFSET;

  return USART_SUCCESS;
8002af72:	30 08       	mov	r8,0
}
8002af74:	10 9c       	mov	r12,r8
8002af76:	2f fd       	sub	sp,-4
8002af78:	e3 cd 80 80 	ldm	sp++,r7,pc

8002af7c <usart_reset>:
 */
//! @{


void usart_reset(volatile avr32_usart_t *usart)
{
8002af7c:	eb cd 40 c0 	pushm	r6-r7,lr
8002af80:	1a 97       	mov	r7,sp
8002af82:	20 2d       	sub	sp,8
8002af84:	49 a6       	lddpc	r6,8002afec <usart_reset+0x70>
8002af86:	1e 26       	rsub	r6,pc
8002af88:	ef 4c ff f8 	st.w	r7[-8],r12
  bool global_interrupt_enabled = cpu_irq_is_enabled();
8002af8c:	e1 b8 00 00 	mfsr	r8,0x0
8002af90:	10 9c       	mov	r12,r8
8002af92:	ca be       	rcall	8002ace8 <cpu_irq_is_enabled_flags>
8002af94:	18 98       	mov	r8,r12
8002af96:	ef 68 ff ff 	st.b	r7[-1],r8

  // Disable all USART interrupts.
  // Interrupts needed should be set explicitly on every reset.
  if (global_interrupt_enabled) cpu_irq_disable();
8002af9a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8002af9e:	30 08       	mov	r8,0
8002afa0:	f0 09 18 00 	cp.b	r9,r8
8002afa4:	c0 20       	breq	8002afa8 <usart_reset+0x2c>
8002afa6:	d3 03       	ssrf	0x10
  usart->idr = 0xFFFFFFFF;
8002afa8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002afac:	3f f9       	mov	r9,-1
8002afae:	91 39       	st.w	r8[0xc],r9
  usart->csr;
8002afb0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002afb4:	70 58       	ld.w	r8,r8[0x14]
  if (global_interrupt_enabled) cpu_irq_enable();
8002afb6:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8002afba:	30 08       	mov	r8,0
8002afbc:	f0 09 18 00 	cp.b	r9,r8
8002afc0:	c0 20       	breq	8002afc4 <usart_reset+0x48>
8002afc2:	d5 03       	csrf	0x10

  // Reset mode and other registers that could cause unpredictable behavior after reset.
  usart->mr = 0;
8002afc4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002afc8:	30 09       	mov	r9,0
8002afca:	91 19       	st.w	r8[0x4],r9
  usart->rtor = 0;
8002afcc:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002afd0:	30 09       	mov	r9,0
8002afd2:	91 99       	st.w	r8[0x24],r9
  usart->ttgr = 0;
8002afd4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002afd8:	30 09       	mov	r9,0
8002afda:	91 a9       	st.w	r8[0x28],r9

  // Shutdown TX and RX (will be re-enabled when setup has successfully completed),
  // reset status bits and turn off DTR and RTS.
  usart->cr = AVR32_USART_CR_RSTRX_MASK   |
8002afdc:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002afe0:	ea 69 61 0c 	mov	r9,680204
8002afe4:	91 09       	st.w	r8[0x0],r9
#ifndef AVR32_USART_440_H_INCLUDED
// Note: Modem Signal Management DTR-DSR-DCD-RI are not included in USART rev.440.
              AVR32_USART_CR_DTRDIS_MASK  |
#endif
              AVR32_USART_CR_RTSDIS_MASK;
}
8002afe6:	2f ed       	sub	sp,-8
8002afe8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002afec:	80 02       	ld.sh	r2,r0[0x0]
8002afee:	ae 0a       	st.h	r7[0x0],r10

8002aff0 <usart_init_rs232>:


int usart_init_rs232(volatile avr32_usart_t *usart, const usart_options_t *opt, long pba_hz)
{
8002aff0:	eb cd 40 c0 	pushm	r6-r7,lr
8002aff4:	1a 97       	mov	r7,sp
8002aff6:	20 3d       	sub	sp,12
8002aff8:	4d 86       	lddpc	r6,8002b158 <usart_init_rs232+0x168>
8002affa:	1e 26       	rsub	r6,pc
8002affc:	ef 4c ff fc 	st.w	r7[-4],r12
8002b000:	ef 4b ff f8 	st.w	r7[-8],r11
8002b004:	ef 4a ff f4 	st.w	r7[-12],r10
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);
8002b008:	ee fc ff fc 	ld.w	r12,r7[-4]
8002b00c:	f0 16 00 4a 	mcall	r6[296]

  // Check input values.
  if (!opt || // Null pointer.
8002b010:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b014:	58 08       	cp.w	r8,0
8002b016:	c3 80       	breq	8002b086 <usart_init_rs232+0x96>
      opt->charlength < 5 || opt->charlength > 9 ||
8002b018:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b01c:	11 c9       	ld.ub	r9,r8[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002b01e:	30 48       	mov	r8,4
8002b020:	f0 09 18 00 	cp.b	r9,r8
8002b024:	e0 88 00 31 	brls	8002b086 <usart_init_rs232+0x96>
      opt->charlength < 5 || opt->charlength > 9 ||
8002b028:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b02c:	11 c9       	ld.ub	r9,r8[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002b02e:	30 98       	mov	r8,9
8002b030:	f0 09 18 00 	cp.b	r9,r8
8002b034:	e0 8b 00 29 	brhi	8002b086 <usart_init_rs232+0x96>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
8002b038:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b03c:	11 d9       	ld.ub	r9,r8[0x5]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002b03e:	30 78       	mov	r8,7
8002b040:	f0 09 18 00 	cp.b	r9,r8
8002b044:	e0 8b 00 21 	brhi	8002b086 <usart_init_rs232+0x96>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
8002b048:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b04c:	90 39       	ld.sh	r9,r8[0x6]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002b04e:	e0 68 01 01 	mov	r8,257
8002b052:	f0 09 19 00 	cp.h	r9,r8
8002b056:	e0 8b 00 18 	brhi	8002b086 <usart_init_rs232+0x96>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
8002b05a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b05e:	f1 39 00 08 	ld.ub	r9,r8[8]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002b062:	30 38       	mov	r8,3
8002b064:	f0 09 18 00 	cp.b	r9,r8
8002b068:	e0 8b 00 0f 	brhi	8002b086 <usart_init_rs232+0x96>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
8002b06c:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002b070:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b074:	70 08       	ld.w	r8,r8[0x0]
8002b076:	12 9a       	mov	r10,r9
8002b078:	10 9b       	mov	r11,r8
8002b07a:	ee fc ff fc 	ld.w	r12,r7[-4]
8002b07e:	c4 5e       	rcall	8002ad08 <usart_set_async_baudrate>
8002b080:	18 98       	mov	r8,r12
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002b082:	58 18       	cp.w	r8,1
8002b084:	c0 31       	brne	8002b08a <usart_init_rs232+0x9a>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
    return USART_INVALID_INPUT;
8002b086:	30 18       	mov	r8,1
8002b088:	c6 48       	rjmp	8002b150 <usart_init_rs232+0x160>

  if (opt->charlength == 9)
8002b08a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b08e:	11 c9       	ld.ub	r9,r8[0x4]
8002b090:	30 98       	mov	r8,9
8002b092:	f0 09 18 00 	cp.b	r9,r8
8002b096:	c0 a1       	brne	8002b0aa <usart_init_rs232+0xba>
  {
    // Character length set to 9 bits. MODE9 dominates CHRL.
    usart->mr |= AVR32_USART_MR_MODE9_MASK;
8002b098:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b09c:	70 18       	ld.w	r8,r8[0x4]
8002b09e:	10 99       	mov	r9,r8
8002b0a0:	b1 b9       	sbr	r9,0x11
8002b0a2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b0a6:	91 19       	st.w	r8[0x4],r9
8002b0a8:	c0 d8       	rjmp	8002b0c2 <usart_init_rs232+0xd2>
  }
  else
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
8002b0aa:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b0ae:	70 19       	ld.w	r9,r8[0x4]
8002b0b0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b0b4:	11 c8       	ld.ub	r8,r8[0x4]
8002b0b6:	20 58       	sub	r8,5
8002b0b8:	a7 68       	lsl	r8,0x6
8002b0ba:	10 49       	or	r9,r8
8002b0bc:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b0c0:	91 19       	st.w	r8[0x4],r9
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
8002b0c2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b0c6:	70 19       	ld.w	r9,r8[0x4]
8002b0c8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b0cc:	11 d8       	ld.ub	r8,r8[0x5]
8002b0ce:	f0 0a 15 09 	lsl	r10,r8,0x9
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;
8002b0d2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b0d6:	f1 38 00 08 	ld.ub	r8,r8[8]
8002b0da:	af 68       	lsl	r8,0xe
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
8002b0dc:	f5 e8 10 08 	or	r8,r10,r8
8002b0e0:	10 49       	or	r9,r8
8002b0e2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b0e6:	91 19       	st.w	r8[0x4],r9
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;

  if (opt->stopbits > USART_2_STOPBITS)
8002b0e8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b0ec:	90 39       	ld.sh	r9,r8[0x6]
8002b0ee:	30 28       	mov	r8,2
8002b0f0:	f0 09 19 00 	cp.h	r9,r8
8002b0f4:	e0 88 00 14 	brls	8002b11c <usart_init_rs232+0x12c>
  {
    // Set two stop bits
    usart->mr |= AVR32_USART_MR_NBSTOP_2 << AVR32_USART_MR_NBSTOP_OFFSET;
8002b0f8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b0fc:	70 18       	ld.w	r8,r8[0x4]
8002b0fe:	10 99       	mov	r9,r8
8002b100:	ad b9       	sbr	r9,0xd
8002b102:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b106:	91 19       	st.w	r8[0x4],r9
    // and a timeguard period gives the rest.
    usart->ttgr = opt->stopbits - USART_2_STOPBITS;
8002b108:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b10c:	90 38       	ld.sh	r8,r8[0x6]
8002b10e:	5c 78       	castu.h	r8
8002b110:	20 28       	sub	r8,2
8002b112:	10 99       	mov	r9,r8
8002b114:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b118:	91 a9       	st.w	r8[0x28],r9
8002b11a:	c0 d8       	rjmp	8002b134 <usart_init_rs232+0x144>
  }
  else
    // Insert 1, 1.5 or 2 stop bits.
    usart->mr |= opt->stopbits << AVR32_USART_MR_NBSTOP_OFFSET;
8002b11c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b120:	70 19       	ld.w	r9,r8[0x4]
8002b122:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b126:	90 38       	ld.sh	r8,r8[0x6]
8002b128:	5c 78       	castu.h	r8
8002b12a:	ad 68       	lsl	r8,0xc
8002b12c:	10 49       	or	r9,r8
8002b12e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b132:	91 19       	st.w	r8[0x4],r9

  // Set normal mode.
  usart->mr = (usart->mr & ~AVR32_USART_MR_MODE_MASK) |
8002b134:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b138:	70 18       	ld.w	r8,r8[0x4]
8002b13a:	10 99       	mov	r9,r8
8002b13c:	e0 19 ff f0 	andl	r9,0xfff0
8002b140:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b144:	91 19       	st.w	r8[0x4],r9
              AVR32_USART_MR_MODE_NORMAL << AVR32_USART_MR_MODE_OFFSET;

  // Setup complete; enable communication.
  // Enable input and output.
  usart->cr = AVR32_USART_CR_RXEN_MASK |
8002b146:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b14a:	35 09       	mov	r9,80
8002b14c:	91 09       	st.w	r8[0x0],r9
              AVR32_USART_CR_TXEN_MASK;

  return USART_SUCCESS;
8002b14e:	30 08       	mov	r8,0
}
8002b150:	10 9c       	mov	r12,r8
8002b152:	2f dd       	sub	sp,-12
8002b154:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002b158:	80 02       	ld.sh	r2,r0[0x0]
8002b15a:	ae 7e       	st.h	r7[0xe],lr

8002b15c <usart_init_rs232_tx_only>:


int usart_init_rs232_tx_only(volatile avr32_usart_t *usart, const usart_options_t *opt, long pba_hz)
{
8002b15c:	eb cd 40 c0 	pushm	r6-r7,lr
8002b160:	1a 97       	mov	r7,sp
8002b162:	20 3d       	sub	sp,12
8002b164:	4d c6       	lddpc	r6,8002b2d4 <usart_init_rs232_tx_only+0x178>
8002b166:	1e 26       	rsub	r6,pc
8002b168:	ef 4c ff fc 	st.w	r7[-4],r12
8002b16c:	ef 4b ff f8 	st.w	r7[-8],r11
8002b170:	ef 4a ff f4 	st.w	r7[-12],r10
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);
8002b174:	ee fc ff fc 	ld.w	r12,r7[-4]
8002b178:	f0 16 00 4a 	mcall	r6[296]

  // Check input values.
  if (!opt || // Null pointer.
8002b17c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b180:	58 08       	cp.w	r8,0
8002b182:	c4 00       	breq	8002b202 <usart_init_rs232_tx_only+0xa6>
      opt->charlength < 5 || opt->charlength > 9 ||
8002b184:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b188:	11 c9       	ld.ub	r9,r8[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002b18a:	30 48       	mov	r8,4
8002b18c:	f0 09 18 00 	cp.b	r9,r8
8002b190:	e0 88 00 39 	brls	8002b202 <usart_init_rs232_tx_only+0xa6>
      opt->charlength < 5 || opt->charlength > 9 ||
8002b194:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b198:	11 c9       	ld.ub	r9,r8[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002b19a:	30 98       	mov	r8,9
8002b19c:	f0 09 18 00 	cp.b	r9,r8
8002b1a0:	e0 8b 00 31 	brhi	8002b202 <usart_init_rs232_tx_only+0xa6>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
8002b1a4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b1a8:	11 d9       	ld.ub	r9,r8[0x5]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002b1aa:	30 78       	mov	r8,7
8002b1ac:	f0 09 18 00 	cp.b	r9,r8
8002b1b0:	e0 8b 00 29 	brhi	8002b202 <usart_init_rs232_tx_only+0xa6>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits == 1 || opt->stopbits > 2 + 255 ||
8002b1b4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b1b8:	90 39       	ld.sh	r9,r8[0x6]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002b1ba:	30 18       	mov	r8,1
8002b1bc:	f0 09 19 00 	cp.h	r9,r8
8002b1c0:	c2 10       	breq	8002b202 <usart_init_rs232_tx_only+0xa6>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits == 1 || opt->stopbits > 2 + 255 ||
8002b1c2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b1c6:	90 39       	ld.sh	r9,r8[0x6]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002b1c8:	e0 68 01 01 	mov	r8,257
8002b1cc:	f0 09 19 00 	cp.h	r9,r8
8002b1d0:	e0 8b 00 19 	brhi	8002b202 <usart_init_rs232_tx_only+0xa6>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits == 1 || opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
8002b1d4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b1d8:	f1 39 00 08 	ld.ub	r9,r8[8]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002b1dc:	30 38       	mov	r8,3
8002b1de:	f0 09 18 00 	cp.b	r9,r8
8002b1e2:	e0 8b 00 10 	brhi	8002b202 <usart_init_rs232_tx_only+0xa6>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits == 1 || opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_sync_master_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
8002b1e6:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002b1ea:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b1ee:	70 08       	ld.w	r8,r8[0x0]
8002b1f0:	12 9a       	mov	r10,r9
8002b1f2:	10 9b       	mov	r11,r8
8002b1f4:	ee fc ff fc 	ld.w	r12,r7[-4]
8002b1f8:	fe b0 fd f1 	rcall	8002adda <usart_set_sync_master_baudrate>
8002b1fc:	18 98       	mov	r8,r12
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002b1fe:	58 18       	cp.w	r8,1
8002b200:	c0 31       	brne	8002b206 <usart_init_rs232_tx_only+0xaa>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits == 1 || opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_sync_master_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
    return USART_INVALID_INPUT;
8002b202:	30 18       	mov	r8,1
8002b204:	c6 48       	rjmp	8002b2cc <usart_init_rs232_tx_only+0x170>

  if (opt->charlength == 9)
8002b206:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b20a:	11 c9       	ld.ub	r9,r8[0x4]
8002b20c:	30 98       	mov	r8,9
8002b20e:	f0 09 18 00 	cp.b	r9,r8
8002b212:	c0 a1       	brne	8002b226 <usart_init_rs232_tx_only+0xca>
  {
    // Character length set to 9 bits. MODE9 dominates CHRL.
    usart->mr |= AVR32_USART_MR_MODE9_MASK;
8002b214:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b218:	70 18       	ld.w	r8,r8[0x4]
8002b21a:	10 99       	mov	r9,r8
8002b21c:	b1 b9       	sbr	r9,0x11
8002b21e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b222:	91 19       	st.w	r8[0x4],r9
8002b224:	c0 d8       	rjmp	8002b23e <usart_init_rs232_tx_only+0xe2>
  }
  else
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
8002b226:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b22a:	70 19       	ld.w	r9,r8[0x4]
8002b22c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b230:	11 c8       	ld.ub	r8,r8[0x4]
8002b232:	20 58       	sub	r8,5
8002b234:	a7 68       	lsl	r8,0x6
8002b236:	10 49       	or	r9,r8
8002b238:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b23c:	91 19       	st.w	r8[0x4],r9
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
8002b23e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b242:	70 19       	ld.w	r9,r8[0x4]
8002b244:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b248:	11 d8       	ld.ub	r8,r8[0x5]
8002b24a:	f0 0a 15 09 	lsl	r10,r8,0x9
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;
8002b24e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b252:	f1 38 00 08 	ld.ub	r8,r8[8]
8002b256:	af 68       	lsl	r8,0xe
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
8002b258:	f5 e8 10 08 	or	r8,r10,r8
8002b25c:	10 49       	or	r9,r8
8002b25e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b262:	91 19       	st.w	r8[0x4],r9
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;

  if (opt->stopbits > USART_2_STOPBITS)
8002b264:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b268:	90 39       	ld.sh	r9,r8[0x6]
8002b26a:	30 28       	mov	r8,2
8002b26c:	f0 09 19 00 	cp.h	r9,r8
8002b270:	e0 88 00 14 	brls	8002b298 <usart_init_rs232_tx_only+0x13c>
  {
    // Set two stop bits
    usart->mr |= AVR32_USART_MR_NBSTOP_2 << AVR32_USART_MR_NBSTOP_OFFSET;
8002b274:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b278:	70 18       	ld.w	r8,r8[0x4]
8002b27a:	10 99       	mov	r9,r8
8002b27c:	ad b9       	sbr	r9,0xd
8002b27e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b282:	91 19       	st.w	r8[0x4],r9
    // and a timeguard period gives the rest.
    usart->ttgr = opt->stopbits - USART_2_STOPBITS;
8002b284:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b288:	90 38       	ld.sh	r8,r8[0x6]
8002b28a:	5c 78       	castu.h	r8
8002b28c:	20 28       	sub	r8,2
8002b28e:	10 99       	mov	r9,r8
8002b290:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b294:	91 a9       	st.w	r8[0x28],r9
8002b296:	c0 d8       	rjmp	8002b2b0 <usart_init_rs232_tx_only+0x154>
  }
  else
    // Insert 1 or 2 stop bits.
    usart->mr |= opt->stopbits << AVR32_USART_MR_NBSTOP_OFFSET;
8002b298:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b29c:	70 19       	ld.w	r9,r8[0x4]
8002b29e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b2a2:	90 38       	ld.sh	r8,r8[0x6]
8002b2a4:	5c 78       	castu.h	r8
8002b2a6:	ad 68       	lsl	r8,0xc
8002b2a8:	10 49       	or	r9,r8
8002b2aa:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b2ae:	91 19       	st.w	r8[0x4],r9

  // Set normal mode.
  usart->mr = (usart->mr & ~AVR32_USART_MR_MODE_MASK) |
8002b2b0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b2b4:	70 18       	ld.w	r8,r8[0x4]
8002b2b6:	10 99       	mov	r9,r8
8002b2b8:	e0 19 ff f0 	andl	r9,0xfff0
8002b2bc:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b2c0:	91 19       	st.w	r8[0x4],r9
              AVR32_USART_MR_MODE_NORMAL << AVR32_USART_MR_MODE_OFFSET;

  // Setup complete; enable communication.
  // Enable only output as input is not possible in synchronous mode without
  // transferring clock.
  usart->cr = AVR32_USART_CR_TXEN_MASK;
8002b2c2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b2c6:	34 09       	mov	r9,64
8002b2c8:	91 09       	st.w	r8[0x0],r9

  return USART_SUCCESS;
8002b2ca:	30 08       	mov	r8,0
}
8002b2cc:	10 9c       	mov	r12,r8
8002b2ce:	2f dd       	sub	sp,-12
8002b2d0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002b2d4:	80 02       	ld.sh	r2,r0[0x0]
8002b2d6:	af ea       	*unknown*

8002b2d8 <usart_init_hw_handshaking>:


int usart_init_hw_handshaking(volatile avr32_usart_t *usart, const usart_options_t *opt, long pba_hz)
{
8002b2d8:	eb cd 40 c0 	pushm	r6-r7,lr
8002b2dc:	1a 97       	mov	r7,sp
8002b2de:	20 3d       	sub	sp,12
8002b2e0:	49 26       	lddpc	r6,8002b328 <usart_init_hw_handshaking+0x50>
8002b2e2:	1e 26       	rsub	r6,pc
8002b2e4:	ef 4c ff fc 	st.w	r7[-4],r12
8002b2e8:	ef 4b ff f8 	st.w	r7[-8],r11
8002b2ec:	ef 4a ff f4 	st.w	r7[-12],r10
  // First: Setup standard RS232.
  if (usart_init_rs232(usart, opt, pba_hz) == USART_INVALID_INPUT)
8002b2f0:	ee fa ff f4 	ld.w	r10,r7[-12]
8002b2f4:	ee fb ff f8 	ld.w	r11,r7[-8]
8002b2f8:	ee fc ff fc 	ld.w	r12,r7[-4]
8002b2fc:	f0 16 00 60 	mcall	r6[384]
8002b300:	18 98       	mov	r8,r12
8002b302:	58 18       	cp.w	r8,1
8002b304:	c0 31       	brne	8002b30a <usart_init_hw_handshaking+0x32>
    return USART_INVALID_INPUT;
8002b306:	30 18       	mov	r8,1
8002b308:	c0 c8       	rjmp	8002b320 <usart_init_hw_handshaking+0x48>

  // Set hardware handshaking mode.
  usart->mr = (usart->mr & ~AVR32_USART_MR_MODE_MASK) |
8002b30a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b30e:	70 18       	ld.w	r8,r8[0x4]
8002b310:	e0 18 ff f0 	andl	r8,0xfff0
8002b314:	10 99       	mov	r9,r8
8002b316:	a1 b9       	sbr	r9,0x1
8002b318:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b31c:	91 19       	st.w	r8[0x4],r9
              AVR32_USART_MR_MODE_HARDWARE << AVR32_USART_MR_MODE_OFFSET;

  return USART_SUCCESS;
8002b31e:	30 08       	mov	r8,0
}
8002b320:	10 9c       	mov	r12,r8
8002b322:	2f dd       	sub	sp,-12
8002b324:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002b328:	80 02       	ld.sh	r2,r0[0x0]
8002b32a:	b1 66       	lsl	r6,0x10

8002b32c <usart_init_modem>:


int usart_init_modem(volatile avr32_usart_t *usart, const usart_options_t *opt, long pba_hz)
{
8002b32c:	eb cd 40 c0 	pushm	r6-r7,lr
8002b330:	1a 97       	mov	r7,sp
8002b332:	20 3d       	sub	sp,12
8002b334:	49 36       	lddpc	r6,8002b380 <usart_init_modem+0x54>
8002b336:	1e 26       	rsub	r6,pc
8002b338:	ef 4c ff fc 	st.w	r7[-4],r12
8002b33c:	ef 4b ff f8 	st.w	r7[-8],r11
8002b340:	ef 4a ff f4 	st.w	r7[-12],r10
  // First: Setup standard RS232.
  if (usart_init_rs232(usart, opt, pba_hz) == USART_INVALID_INPUT)
8002b344:	ee fa ff f4 	ld.w	r10,r7[-12]
8002b348:	ee fb ff f8 	ld.w	r11,r7[-8]
8002b34c:	ee fc ff fc 	ld.w	r12,r7[-4]
8002b350:	f0 16 00 60 	mcall	r6[384]
8002b354:	18 98       	mov	r8,r12
8002b356:	58 18       	cp.w	r8,1
8002b358:	c0 31       	brne	8002b35e <usart_init_modem+0x32>
    return USART_INVALID_INPUT;
8002b35a:	30 18       	mov	r8,1
8002b35c:	c0 d8       	rjmp	8002b376 <usart_init_modem+0x4a>

  // Set modem mode.
  usart->mr = (usart->mr & ~AVR32_USART_MR_MODE_MASK) |
8002b35e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b362:	70 18       	ld.w	r8,r8[0x4]
8002b364:	e0 18 ff f0 	andl	r8,0xfff0
8002b368:	10 99       	mov	r9,r8
8002b36a:	e8 19 00 03 	orl	r9,0x3
8002b36e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b372:	91 19       	st.w	r8[0x4],r9
              AVR32_USART_MR_MODE_MODEM << AVR32_USART_MR_MODE_OFFSET;

  return USART_SUCCESS;
8002b374:	30 08       	mov	r8,0
}
8002b376:	10 9c       	mov	r12,r8
8002b378:	2f dd       	sub	sp,-12
8002b37a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002b37e:	00 00       	add	r0,r0
8002b380:	80 02       	ld.sh	r2,r0[0x0]
8002b382:	b1 ba       	sbr	r10,0x11

8002b384 <usart_init_sync_master>:


int usart_init_sync_master(volatile avr32_usart_t *usart, const usart_options_t *opt, long pba_hz)
{
8002b384:	eb cd 40 c0 	pushm	r6-r7,lr
8002b388:	1a 97       	mov	r7,sp
8002b38a:	20 3d       	sub	sp,12
8002b38c:	4d e6       	lddpc	r6,8002b504 <usart_init_sync_master+0x180>
8002b38e:	1e 26       	rsub	r6,pc
8002b390:	ef 4c ff fc 	st.w	r7[-4],r12
8002b394:	ef 4b ff f8 	st.w	r7[-8],r11
8002b398:	ef 4a ff f4 	st.w	r7[-12],r10
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);
8002b39c:	ee fc ff fc 	ld.w	r12,r7[-4]
8002b3a0:	f0 16 00 4a 	mcall	r6[296]

  // Check input values.
  if (!opt || // Null pointer.
8002b3a4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b3a8:	58 08       	cp.w	r8,0
8002b3aa:	c4 00       	breq	8002b42a <usart_init_sync_master+0xa6>
      opt->charlength < 5 || opt->charlength > 9 ||
8002b3ac:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b3b0:	11 c9       	ld.ub	r9,r8[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002b3b2:	30 48       	mov	r8,4
8002b3b4:	f0 09 18 00 	cp.b	r9,r8
8002b3b8:	e0 88 00 39 	brls	8002b42a <usart_init_sync_master+0xa6>
      opt->charlength < 5 || opt->charlength > 9 ||
8002b3bc:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b3c0:	11 c9       	ld.ub	r9,r8[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002b3c2:	30 98       	mov	r8,9
8002b3c4:	f0 09 18 00 	cp.b	r9,r8
8002b3c8:	e0 8b 00 31 	brhi	8002b42a <usart_init_sync_master+0xa6>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
8002b3cc:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b3d0:	11 d9       	ld.ub	r9,r8[0x5]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002b3d2:	30 78       	mov	r8,7
8002b3d4:	f0 09 18 00 	cp.b	r9,r8
8002b3d8:	e0 8b 00 29 	brhi	8002b42a <usart_init_sync_master+0xa6>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits == 1 || opt->stopbits > 2 + 255 ||
8002b3dc:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b3e0:	90 39       	ld.sh	r9,r8[0x6]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002b3e2:	30 18       	mov	r8,1
8002b3e4:	f0 09 19 00 	cp.h	r9,r8
8002b3e8:	c2 10       	breq	8002b42a <usart_init_sync_master+0xa6>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits == 1 || opt->stopbits > 2 + 255 ||
8002b3ea:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b3ee:	90 39       	ld.sh	r9,r8[0x6]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002b3f0:	e0 68 01 01 	mov	r8,257
8002b3f4:	f0 09 19 00 	cp.h	r9,r8
8002b3f8:	e0 8b 00 19 	brhi	8002b42a <usart_init_sync_master+0xa6>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits == 1 || opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
8002b3fc:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b400:	f1 39 00 08 	ld.ub	r9,r8[8]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002b404:	30 38       	mov	r8,3
8002b406:	f0 09 18 00 	cp.b	r9,r8
8002b40a:	e0 8b 00 10 	brhi	8002b42a <usart_init_sync_master+0xa6>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits == 1 || opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_sync_master_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
8002b40e:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002b412:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b416:	70 08       	ld.w	r8,r8[0x0]
8002b418:	12 9a       	mov	r10,r9
8002b41a:	10 9b       	mov	r11,r8
8002b41c:	ee fc ff fc 	ld.w	r12,r7[-4]
8002b420:	fe b0 fc dd 	rcall	8002adda <usart_set_sync_master_baudrate>
8002b424:	18 98       	mov	r8,r12
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002b426:	58 18       	cp.w	r8,1
8002b428:	c0 31       	brne	8002b42e <usart_init_sync_master+0xaa>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits == 1 || opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_sync_master_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
    return USART_INVALID_INPUT;
8002b42a:	30 18       	mov	r8,1
8002b42c:	c6 78       	rjmp	8002b4fa <usart_init_sync_master+0x176>

  if (opt->charlength == 9)
8002b42e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b432:	11 c9       	ld.ub	r9,r8[0x4]
8002b434:	30 98       	mov	r8,9
8002b436:	f0 09 18 00 	cp.b	r9,r8
8002b43a:	c0 a1       	brne	8002b44e <usart_init_sync_master+0xca>
  {
    // Character length set to 9 bits. MODE9 dominates CHRL.
    usart->mr |= AVR32_USART_MR_MODE9_MASK;
8002b43c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b440:	70 18       	ld.w	r8,r8[0x4]
8002b442:	10 99       	mov	r9,r8
8002b444:	b1 b9       	sbr	r9,0x11
8002b446:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b44a:	91 19       	st.w	r8[0x4],r9
8002b44c:	c0 d8       	rjmp	8002b466 <usart_init_sync_master+0xe2>
  }
  else
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
8002b44e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b452:	70 19       	ld.w	r9,r8[0x4]
8002b454:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b458:	11 c8       	ld.ub	r8,r8[0x4]
8002b45a:	20 58       	sub	r8,5
8002b45c:	a7 68       	lsl	r8,0x6
8002b45e:	10 49       	or	r9,r8
8002b460:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b464:	91 19       	st.w	r8[0x4],r9
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
8002b466:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b46a:	70 19       	ld.w	r9,r8[0x4]
8002b46c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b470:	11 d8       	ld.ub	r8,r8[0x5]
8002b472:	f0 0a 15 09 	lsl	r10,r8,0x9
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;
8002b476:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b47a:	f1 38 00 08 	ld.ub	r8,r8[8]
8002b47e:	af 68       	lsl	r8,0xe
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
8002b480:	f5 e8 10 08 	or	r8,r10,r8
8002b484:	10 49       	or	r9,r8
8002b486:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b48a:	91 19       	st.w	r8[0x4],r9
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;

  if (opt->stopbits > USART_2_STOPBITS)
8002b48c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b490:	90 39       	ld.sh	r9,r8[0x6]
8002b492:	30 28       	mov	r8,2
8002b494:	f0 09 19 00 	cp.h	r9,r8
8002b498:	e0 88 00 14 	brls	8002b4c0 <usart_init_sync_master+0x13c>
  {
    // Set two stop bits
    usart->mr |= AVR32_USART_MR_NBSTOP_2 << AVR32_USART_MR_NBSTOP_OFFSET;
8002b49c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b4a0:	70 18       	ld.w	r8,r8[0x4]
8002b4a2:	10 99       	mov	r9,r8
8002b4a4:	ad b9       	sbr	r9,0xd
8002b4a6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b4aa:	91 19       	st.w	r8[0x4],r9
    // and a timeguard period gives the rest.
    usart->ttgr = opt->stopbits - USART_2_STOPBITS;
8002b4ac:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b4b0:	90 38       	ld.sh	r8,r8[0x6]
8002b4b2:	5c 78       	castu.h	r8
8002b4b4:	20 28       	sub	r8,2
8002b4b6:	10 99       	mov	r9,r8
8002b4b8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b4bc:	91 a9       	st.w	r8[0x28],r9
8002b4be:	c0 d8       	rjmp	8002b4d8 <usart_init_sync_master+0x154>
  }
  else
    // Insert 1 or 2 stop bits.
    usart->mr |= opt->stopbits << AVR32_USART_MR_NBSTOP_OFFSET;
8002b4c0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b4c4:	70 19       	ld.w	r9,r8[0x4]
8002b4c6:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b4ca:	90 38       	ld.sh	r8,r8[0x6]
8002b4cc:	5c 78       	castu.h	r8
8002b4ce:	ad 68       	lsl	r8,0xc
8002b4d0:	10 49       	or	r9,r8
8002b4d2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b4d6:	91 19       	st.w	r8[0x4],r9

  // Set normal mode.
  usart->mr = (usart->mr & ~AVR32_USART_MR_MODE_MASK) |
8002b4d8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b4dc:	70 18       	ld.w	r8,r8[0x4]
8002b4de:	e4 18 ff fb 	andh	r8,0xfffb
8002b4e2:	e0 18 ff f0 	andl	r8,0xfff0
8002b4e6:	10 99       	mov	r9,r8
8002b4e8:	b3 a9       	sbr	r9,0x12
8002b4ea:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b4ee:	91 19       	st.w	r8[0x4],r9
              AVR32_USART_MR_MODE_NORMAL << AVR32_USART_MR_MODE_OFFSET |
              AVR32_USART_MR_CLKO_MASK;

  // Setup complete; enable communication.
  // Enable input and output.
  usart->cr = AVR32_USART_CR_RXEN_MASK |
8002b4f0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b4f4:	35 09       	mov	r9,80
8002b4f6:	91 09       	st.w	r8[0x0],r9
              AVR32_USART_CR_TXEN_MASK;

  return USART_SUCCESS;
8002b4f8:	30 08       	mov	r8,0
}
8002b4fa:	10 9c       	mov	r12,r8
8002b4fc:	2f dd       	sub	sp,-12
8002b4fe:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002b502:	00 00       	add	r0,r0
8002b504:	80 02       	ld.sh	r2,r0[0x0]
8002b506:	b2 12       	st.h	r9[0x2],r2

8002b508 <usart_init_sync_slave>:


int usart_init_sync_slave(volatile avr32_usart_t *usart, const usart_options_t *opt, long pba_hz)
{
8002b508:	eb cd 40 c0 	pushm	r6-r7,lr
8002b50c:	1a 97       	mov	r7,sp
8002b50e:	20 3d       	sub	sp,12
8002b510:	4d 96       	lddpc	r6,8002b674 <usart_init_sync_slave+0x16c>
8002b512:	1e 26       	rsub	r6,pc
8002b514:	ef 4c ff fc 	st.w	r7[-4],r12
8002b518:	ef 4b ff f8 	st.w	r7[-8],r11
8002b51c:	ef 4a ff f4 	st.w	r7[-12],r10
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);
8002b520:	ee fc ff fc 	ld.w	r12,r7[-4]
8002b524:	f0 16 00 4a 	mcall	r6[296]

  // Check input values.
  if (!opt || // Null pointer.
8002b528:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b52c:	58 08       	cp.w	r8,0
8002b52e:	c3 90       	breq	8002b5a0 <usart_init_sync_slave+0x98>
      opt->charlength < 5 || opt->charlength > 9 ||
8002b530:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b534:	11 c9       	ld.ub	r9,r8[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002b536:	30 48       	mov	r8,4
8002b538:	f0 09 18 00 	cp.b	r9,r8
8002b53c:	e0 88 00 32 	brls	8002b5a0 <usart_init_sync_slave+0x98>
      opt->charlength < 5 || opt->charlength > 9 ||
8002b540:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b544:	11 c9       	ld.ub	r9,r8[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002b546:	30 98       	mov	r8,9
8002b548:	f0 09 18 00 	cp.b	r9,r8
8002b54c:	e0 8b 00 2a 	brhi	8002b5a0 <usart_init_sync_slave+0x98>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
8002b550:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b554:	11 d9       	ld.ub	r9,r8[0x5]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002b556:	30 78       	mov	r8,7
8002b558:	f0 09 18 00 	cp.b	r9,r8
8002b55c:	e0 8b 00 22 	brhi	8002b5a0 <usart_init_sync_slave+0x98>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits == 1 || opt->stopbits > 2 + 255 ||
8002b560:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b564:	90 39       	ld.sh	r9,r8[0x6]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002b566:	30 18       	mov	r8,1
8002b568:	f0 09 19 00 	cp.h	r9,r8
8002b56c:	c1 a0       	breq	8002b5a0 <usart_init_sync_slave+0x98>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits == 1 || opt->stopbits > 2 + 255 ||
8002b56e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b572:	90 39       	ld.sh	r9,r8[0x6]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002b574:	e0 68 01 01 	mov	r8,257
8002b578:	f0 09 19 00 	cp.h	r9,r8
8002b57c:	e0 8b 00 12 	brhi	8002b5a0 <usart_init_sync_slave+0x98>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits == 1 || opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
8002b580:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b584:	f1 39 00 08 	ld.ub	r9,r8[8]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002b588:	30 38       	mov	r8,3
8002b58a:	f0 09 18 00 	cp.b	r9,r8
8002b58e:	e0 8b 00 09 	brhi	8002b5a0 <usart_init_sync_slave+0x98>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits == 1 || opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_sync_slave_baudrate(usart) == USART_INVALID_INPUT)
8002b592:	ee fc ff fc 	ld.w	r12,r7[-4]
8002b596:	fe b0 fc 5a 	rcall	8002ae4a <usart_set_sync_slave_baudrate>
8002b59a:	18 98       	mov	r8,r12
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002b59c:	58 18       	cp.w	r8,1
8002b59e:	c0 31       	brne	8002b5a4 <usart_init_sync_slave+0x9c>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits == 1 || opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_sync_slave_baudrate(usart) == USART_INVALID_INPUT)
    return USART_INVALID_INPUT;
8002b5a0:	30 18       	mov	r8,1
8002b5a2:	c6 48       	rjmp	8002b66a <usart_init_sync_slave+0x162>

  if (opt->charlength == 9)
8002b5a4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b5a8:	11 c9       	ld.ub	r9,r8[0x4]
8002b5aa:	30 98       	mov	r8,9
8002b5ac:	f0 09 18 00 	cp.b	r9,r8
8002b5b0:	c0 a1       	brne	8002b5c4 <usart_init_sync_slave+0xbc>
  {
    // Character length set to 9 bits. MODE9 dominates CHRL.
    usart->mr |= AVR32_USART_MR_MODE9_MASK;
8002b5b2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b5b6:	70 18       	ld.w	r8,r8[0x4]
8002b5b8:	10 99       	mov	r9,r8
8002b5ba:	b1 b9       	sbr	r9,0x11
8002b5bc:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b5c0:	91 19       	st.w	r8[0x4],r9
8002b5c2:	c0 d8       	rjmp	8002b5dc <usart_init_sync_slave+0xd4>
  }
  else
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
8002b5c4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b5c8:	70 19       	ld.w	r9,r8[0x4]
8002b5ca:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b5ce:	11 c8       	ld.ub	r8,r8[0x4]
8002b5d0:	20 58       	sub	r8,5
8002b5d2:	a7 68       	lsl	r8,0x6
8002b5d4:	10 49       	or	r9,r8
8002b5d6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b5da:	91 19       	st.w	r8[0x4],r9
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
8002b5dc:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b5e0:	70 19       	ld.w	r9,r8[0x4]
8002b5e2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b5e6:	11 d8       	ld.ub	r8,r8[0x5]
8002b5e8:	f0 0a 15 09 	lsl	r10,r8,0x9
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;
8002b5ec:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b5f0:	f1 38 00 08 	ld.ub	r8,r8[8]
8002b5f4:	af 68       	lsl	r8,0xe
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
8002b5f6:	f5 e8 10 08 	or	r8,r10,r8
8002b5fa:	10 49       	or	r9,r8
8002b5fc:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b600:	91 19       	st.w	r8[0x4],r9
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;

  if (opt->stopbits > USART_2_STOPBITS)
8002b602:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b606:	90 39       	ld.sh	r9,r8[0x6]
8002b608:	30 28       	mov	r8,2
8002b60a:	f0 09 19 00 	cp.h	r9,r8
8002b60e:	e0 88 00 14 	brls	8002b636 <usart_init_sync_slave+0x12e>
  {
    // Set two stop bits
    usart->mr |= AVR32_USART_MR_NBSTOP_2 << AVR32_USART_MR_NBSTOP_OFFSET;
8002b612:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b616:	70 18       	ld.w	r8,r8[0x4]
8002b618:	10 99       	mov	r9,r8
8002b61a:	ad b9       	sbr	r9,0xd
8002b61c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b620:	91 19       	st.w	r8[0x4],r9
    // and a timeguard period gives the rest.
    usart->ttgr = opt->stopbits - USART_2_STOPBITS;
8002b622:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b626:	90 38       	ld.sh	r8,r8[0x6]
8002b628:	5c 78       	castu.h	r8
8002b62a:	20 28       	sub	r8,2
8002b62c:	10 99       	mov	r9,r8
8002b62e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b632:	91 a9       	st.w	r8[0x28],r9
8002b634:	c0 d8       	rjmp	8002b64e <usart_init_sync_slave+0x146>
  }
  else
    // Insert 1 or 2 stop bits.
    usart->mr |= opt->stopbits << AVR32_USART_MR_NBSTOP_OFFSET;
8002b636:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b63a:	70 19       	ld.w	r9,r8[0x4]
8002b63c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b640:	90 38       	ld.sh	r8,r8[0x6]
8002b642:	5c 78       	castu.h	r8
8002b644:	ad 68       	lsl	r8,0xc
8002b646:	10 49       	or	r9,r8
8002b648:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b64c:	91 19       	st.w	r8[0x4],r9

  // Set normal mode.
  usart->mr = (usart->mr & ~AVR32_USART_MR_MODE_MASK) |
8002b64e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b652:	70 18       	ld.w	r8,r8[0x4]
8002b654:	10 99       	mov	r9,r8
8002b656:	e0 19 ff f0 	andl	r9,0xfff0
8002b65a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b65e:	91 19       	st.w	r8[0x4],r9
              AVR32_USART_MR_MODE_NORMAL << AVR32_USART_MR_MODE_OFFSET;

  // Setup complete; enable communication.
  // Enable input and output.
  usart->cr = AVR32_USART_CR_RXEN_MASK |
8002b660:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b664:	35 09       	mov	r9,80
8002b666:	91 09       	st.w	r8[0x0],r9
              AVR32_USART_CR_TXEN_MASK;

  return USART_SUCCESS;
8002b668:	30 08       	mov	r8,0
}
8002b66a:	10 9c       	mov	r12,r8
8002b66c:	2f dd       	sub	sp,-12
8002b66e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002b672:	00 00       	add	r0,r0
8002b674:	80 02       	ld.sh	r2,r0[0x0]
8002b676:	b3 96       	lsr	r6,0x13

8002b678 <usart_init_rs485>:


int usart_init_rs485(volatile avr32_usart_t *usart, const usart_options_t *opt, long pba_hz)
{
8002b678:	eb cd 40 c0 	pushm	r6-r7,lr
8002b67c:	1a 97       	mov	r7,sp
8002b67e:	20 3d       	sub	sp,12
8002b680:	49 26       	lddpc	r6,8002b6c8 <usart_init_rs485+0x50>
8002b682:	1e 26       	rsub	r6,pc
8002b684:	ef 4c ff fc 	st.w	r7[-4],r12
8002b688:	ef 4b ff f8 	st.w	r7[-8],r11
8002b68c:	ef 4a ff f4 	st.w	r7[-12],r10
  // First: Setup standard RS232.
  if (usart_init_rs232(usart, opt, pba_hz) == USART_INVALID_INPUT)
8002b690:	ee fa ff f4 	ld.w	r10,r7[-12]
8002b694:	ee fb ff f8 	ld.w	r11,r7[-8]
8002b698:	ee fc ff fc 	ld.w	r12,r7[-4]
8002b69c:	f0 16 00 60 	mcall	r6[384]
8002b6a0:	18 98       	mov	r8,r12
8002b6a2:	58 18       	cp.w	r8,1
8002b6a4:	c0 31       	brne	8002b6aa <usart_init_rs485+0x32>
    return USART_INVALID_INPUT;
8002b6a6:	30 18       	mov	r8,1
8002b6a8:	c0 c8       	rjmp	8002b6c0 <usart_init_rs485+0x48>

  // Set RS485 mode.
  usart->mr = (usart->mr & ~AVR32_USART_MR_MODE_MASK) |
8002b6aa:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b6ae:	70 18       	ld.w	r8,r8[0x4]
8002b6b0:	e0 18 ff f0 	andl	r8,0xfff0
8002b6b4:	10 99       	mov	r9,r8
8002b6b6:	a1 a9       	sbr	r9,0x0
8002b6b8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b6bc:	91 19       	st.w	r8[0x4],r9
              AVR32_USART_MR_MODE_RS485 << AVR32_USART_MR_MODE_OFFSET;

  return USART_SUCCESS;
8002b6be:	30 08       	mov	r8,0
}
8002b6c0:	10 9c       	mov	r12,r8
8002b6c2:	2f dd       	sub	sp,-12
8002b6c4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002b6c8:	80 02       	ld.sh	r2,r0[0x0]
8002b6ca:	b5 06       	ld.d	r6,r10

8002b6cc <usart_init_IrDA>:


int usart_init_IrDA(volatile avr32_usart_t *usart, const usart_options_t *opt,
                    long pba_hz, unsigned char irda_filter)
{
8002b6cc:	eb cd 40 c0 	pushm	r6-r7,lr
8002b6d0:	1a 97       	mov	r7,sp
8002b6d2:	20 4d       	sub	sp,16
8002b6d4:	49 96       	lddpc	r6,8002b738 <usart_init_IrDA+0x6c>
8002b6d6:	1e 26       	rsub	r6,pc
8002b6d8:	ef 4c ff fc 	st.w	r7[-4],r12
8002b6dc:	ef 4b ff f8 	st.w	r7[-8],r11
8002b6e0:	ef 4a ff f4 	st.w	r7[-12],r10
8002b6e4:	12 98       	mov	r8,r9
8002b6e6:	ef 68 ff f0 	st.b	r7[-16],r8
  // First: Setup standard RS232.
  if (usart_init_rs232(usart, opt, pba_hz) == USART_INVALID_INPUT)
8002b6ea:	ee fa ff f4 	ld.w	r10,r7[-12]
8002b6ee:	ee fb ff f8 	ld.w	r11,r7[-8]
8002b6f2:	ee fc ff fc 	ld.w	r12,r7[-4]
8002b6f6:	f0 16 00 60 	mcall	r6[384]
8002b6fa:	18 98       	mov	r8,r12
8002b6fc:	58 18       	cp.w	r8,1
8002b6fe:	c0 31       	brne	8002b704 <usart_init_IrDA+0x38>
    return USART_INVALID_INPUT;
8002b700:	30 18       	mov	r8,1
8002b702:	c1 78       	rjmp	8002b730 <usart_init_IrDA+0x64>

  // Set IrDA filter.
  usart->ifr = irda_filter;
8002b704:	ef 39 ff f0 	ld.ub	r9,r7[-16]
8002b708:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b70c:	f1 49 00 4c 	st.w	r8[76],r9

  // Set IrDA mode and activate filtering of input.
  usart->mr = (usart->mr & ~AVR32_USART_MR_MODE_MASK) |
8002b710:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b714:	70 18       	ld.w	r8,r8[0x4]
8002b716:	e4 18 ef ff 	andh	r8,0xefff
8002b71a:	e0 18 ff f0 	andl	r8,0xfff0
8002b71e:	10 99       	mov	r9,r8
8002b720:	ea 19 10 00 	orh	r9,0x1000
8002b724:	e8 19 00 08 	orl	r9,0x8
8002b728:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b72c:	91 19       	st.w	r8[0x4],r9
              AVR32_USART_MODE_IRDA << AVR32_USART_MR_MODE_OFFSET |
              AVR32_USART_MR_FILTER_MASK;

  return USART_SUCCESS;
8002b72e:	30 08       	mov	r8,0
}
8002b730:	10 9c       	mov	r12,r8
8002b732:	2f cd       	sub	sp,-16
8002b734:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002b738:	80 02       	ld.sh	r2,r0[0x0]
8002b73a:	b5 5a       	asr	r10,0x15

8002b73c <usart_init_iso7816>:


int usart_init_iso7816(volatile avr32_usart_t *usart, const usart_iso7816_options_t *opt, int t, long pba_hz)
{
8002b73c:	eb cd 40 c0 	pushm	r6-r7,lr
8002b740:	1a 97       	mov	r7,sp
8002b742:	20 5d       	sub	sp,20
8002b744:	4c 46       	lddpc	r6,8002b854 <usart_init_iso7816+0x118>
8002b746:	1e 26       	rsub	r6,pc
8002b748:	ef 4c ff f8 	st.w	r7[-8],r12
8002b74c:	ef 4b ff f4 	st.w	r7[-12],r11
8002b750:	ef 4a ff f0 	st.w	r7[-16],r10
8002b754:	ef 49 ff ec 	st.w	r7[-20],r9
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);
8002b758:	ee fc ff f8 	ld.w	r12,r7[-8]
8002b75c:	f0 16 00 4a 	mcall	r6[296]

  // Check input values.
  if (!opt || // Null pointer.
8002b760:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002b764:	58 08       	cp.w	r8,0
8002b766:	c0 90       	breq	8002b778 <usart_init_iso7816+0x3c>
      opt->paritytype > 1)
8002b768:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002b76c:	11 e9       	ld.ub	r9,r8[0x6]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002b76e:	30 18       	mov	r8,1
8002b770:	f0 09 18 00 	cp.b	r9,r8
8002b774:	e0 88 00 04 	brls	8002b77c <usart_init_iso7816+0x40>
      opt->paritytype > 1)
    return USART_INVALID_INPUT;
8002b778:	30 18       	mov	r8,1
8002b77a:	c6 98       	rjmp	8002b84c <usart_init_iso7816+0x110>

  if (t == 0)
8002b77c:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002b780:	58 08       	cp.w	r8,0
8002b782:	c0 c1       	brne	8002b79a <usart_init_iso7816+0x5e>
  {
    // Set USART mode to ISO7816, T=0.
    // The T=0 protocol always uses 2 stop bits.
    usart->mr = AVR32_USART_MR_MODE_ISO7816_T0 << AVR32_USART_MR_MODE_OFFSET |
8002b784:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002b788:	70 58       	ld.w	r8,r8[0x14]
                AVR32_USART_MR_NBSTOP_2 << AVR32_USART_MR_NBSTOP_OFFSET |
                opt->bit_order << AVR32_USART_MR_MSBF_OFFSET; // Allow MSBF in T=0.
8002b78a:	b1 68       	lsl	r8,0x10

  if (t == 0)
  {
    // Set USART mode to ISO7816, T=0.
    // The T=0 protocol always uses 2 stop bits.
    usart->mr = AVR32_USART_MR_MODE_ISO7816_T0 << AVR32_USART_MR_MODE_OFFSET |
8002b78c:	e8 18 20 04 	orl	r8,0x2004
8002b790:	10 99       	mov	r9,r8
8002b792:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b796:	91 19       	st.w	r8[0x4],r9
8002b798:	c1 98       	rjmp	8002b7ca <usart_init_iso7816+0x8e>
                AVR32_USART_MR_NBSTOP_2 << AVR32_USART_MR_NBSTOP_OFFSET |
                opt->bit_order << AVR32_USART_MR_MSBF_OFFSET; // Allow MSBF in T=0.
  }
  else if (t == 1)
8002b79a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002b79e:	58 18       	cp.w	r8,1
8002b7a0:	c1 31       	brne	8002b7c6 <usart_init_iso7816+0x8a>
  {
    // Only LSB first in the T=1 protocol.
    // max_iterations field is only used in T=0 mode.
    if (opt->bit_order != 0 ||
8002b7a2:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002b7a6:	70 58       	ld.w	r8,r8[0x14]
8002b7a8:	58 08       	cp.w	r8,0
8002b7aa:	c0 71       	brne	8002b7b8 <usart_init_iso7816+0x7c>
        opt->max_iterations != 0)
8002b7ac:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002b7b0:	f1 38 00 10 	ld.ub	r8,r8[16]
  }
  else if (t == 1)
  {
    // Only LSB first in the T=1 protocol.
    // max_iterations field is only used in T=0 mode.
    if (opt->bit_order != 0 ||
8002b7b4:	58 08       	cp.w	r8,0
8002b7b6:	c0 30       	breq	8002b7bc <usart_init_iso7816+0x80>
        opt->max_iterations != 0)
      return USART_INVALID_INPUT;
8002b7b8:	30 18       	mov	r8,1
8002b7ba:	c4 98       	rjmp	8002b84c <usart_init_iso7816+0x110>

    // Set USART mode to ISO7816, T=1.
    // The T=1 protocol always uses 1 stop bit.
    usart->mr = AVR32_USART_MR_MODE_ISO7816_T1 << AVR32_USART_MR_MODE_OFFSET |
8002b7bc:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b7c0:	30 69       	mov	r9,6
8002b7c2:	91 19       	st.w	r8[0x4],r9
8002b7c4:	c0 38       	rjmp	8002b7ca <usart_init_iso7816+0x8e>
                AVR32_USART_MR_NBSTOP_1 << AVR32_USART_MR_NBSTOP_OFFSET;
  }
  else
    return USART_INVALID_INPUT;
8002b7c6:	30 18       	mov	r8,1
8002b7c8:	c4 28       	rjmp	8002b84c <usart_init_iso7816+0x110>

  if (usart_set_iso7816_clock(usart, opt->iso7816_hz, pba_hz) == USART_INVALID_INPUT)
8002b7ca:	ee f9 ff ec 	ld.w	r9,r7[-20]
8002b7ce:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002b7d2:	70 08       	ld.w	r8,r8[0x0]
8002b7d4:	12 9a       	mov	r10,r9
8002b7d6:	10 9b       	mov	r11,r8
8002b7d8:	ee fc ff f8 	ld.w	r12,r7[-8]
8002b7dc:	fe b0 fb 4b 	rcall	8002ae72 <usart_set_iso7816_clock>
8002b7e0:	18 98       	mov	r8,r12
8002b7e2:	58 18       	cp.w	r8,1
8002b7e4:	c0 31       	brne	8002b7ea <usart_init_iso7816+0xae>
    return USART_INVALID_INPUT;
8002b7e6:	30 18       	mov	r8,1
8002b7e8:	c3 28       	rjmp	8002b84c <usart_init_iso7816+0x110>

  // Set FIDI register: bit rate = selected clock/FI_DI_ratio/16.
  usart->fidi = opt->fidi_ratio;
8002b7ea:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002b7ee:	90 28       	ld.sh	r8,r8[0x4]
8002b7f0:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
8002b7f4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b7f8:	f1 49 00 40 	st.w	r8[64],r9

  // Set ISO7816 spesific options in the MODE register.
  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
8002b7fc:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b800:	70 19       	ld.w	r9,r8[0x4]
8002b802:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002b806:	11 e8       	ld.ub	r8,r8[0x6]
8002b808:	a9 78       	lsl	r8,0x9
               AVR32_USART_MR_CLKO_MASK | // Enable clock output.
8002b80a:	10 9a       	mov	r10,r8
8002b80c:	b3 aa       	sbr	r10,0x12
               opt->inhibit_nack << AVR32_USART_MR_INACK_OFFSET |
8002b80e:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002b812:	70 28       	ld.w	r8,r8[0x8]
8002b814:	b5 68       	lsl	r8,0x14
8002b816:	10 4a       	or	r10,r8
               opt->dis_suc_nack << AVR32_USART_MR_DSNACK_OFFSET |
8002b818:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002b81c:	70 38       	ld.w	r8,r8[0xc]
8002b81e:	b5 78       	lsl	r8,0x15
8002b820:	10 4a       	or	r10,r8
               opt->max_iterations << AVR32_USART_MR_MAX_ITERATION_OFFSET;
8002b822:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002b826:	f1 38 00 10 	ld.ub	r8,r8[16]
8002b82a:	b9 68       	lsl	r8,0x18

  // Set FIDI register: bit rate = selected clock/FI_DI_ratio/16.
  usart->fidi = opt->fidi_ratio;

  // Set ISO7816 spesific options in the MODE register.
  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
8002b82c:	f5 e8 10 08 	or	r8,r10,r8
8002b830:	10 49       	or	r9,r8
8002b832:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b836:	91 19       	st.w	r8[0x4],r9
8002b838:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b83c:	ef 48 ff fc 	st.w	r7[-4],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void usart_iso7816_enable_receiver(volatile avr32_usart_t *usart)
{
  usart->cr = AVR32_USART_CR_TXDIS_MASK | AVR32_USART_CR_RXEN_MASK;
8002b840:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b844:	e0 69 00 90 	mov	r9,144
8002b848:	91 09       	st.w	r8[0x0],r9
               opt->max_iterations << AVR32_USART_MR_MAX_ITERATION_OFFSET;

  // Setup complete; enable the receiver by default.
  usart_iso7816_enable_receiver(usart);

  return USART_SUCCESS;
8002b84a:	30 08       	mov	r8,0
}
8002b84c:	10 9c       	mov	r12,r8
8002b84e:	2f bd       	sub	sp,-20
8002b850:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002b854:	80 02       	ld.sh	r2,r0[0x0]
8002b856:	b5 ca       	cbr	r10,0x14

8002b858 <usart_init_lin_master>:
    defined(AVR32_USART_440_H_INCLUDED) || \
    defined(AVR32_USART_602_H_INCLUDED)


int usart_init_lin_master(volatile avr32_usart_t *usart, unsigned long baudrate, long pba_hz)
{
8002b858:	eb cd 40 c0 	pushm	r6-r7,lr
8002b85c:	1a 97       	mov	r7,sp
8002b85e:	20 3d       	sub	sp,12
8002b860:	49 66       	lddpc	r6,8002b8b8 <usart_init_lin_master+0x60>
8002b862:	1e 26       	rsub	r6,pc
8002b864:	ef 4c ff fc 	st.w	r7[-4],r12
8002b868:	ef 4b ff f8 	st.w	r7[-8],r11
8002b86c:	ef 4a ff f4 	st.w	r7[-12],r10
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);
8002b870:	ee fc ff fc 	ld.w	r12,r7[-4]
8002b874:	f0 16 00 4a 	mcall	r6[296]

  // Check input values.
  if (usart_set_async_baudrate(usart, baudrate, pba_hz) == USART_INVALID_INPUT)
8002b878:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002b87c:	10 9a       	mov	r10,r8
8002b87e:	ee fb ff f8 	ld.w	r11,r7[-8]
8002b882:	ee fc ff fc 	ld.w	r12,r7[-4]
8002b886:	fe b0 fa 41 	rcall	8002ad08 <usart_set_async_baudrate>
8002b88a:	18 98       	mov	r8,r12
8002b88c:	58 18       	cp.w	r8,1
8002b88e:	c0 31       	brne	8002b894 <usart_init_lin_master+0x3c>
    return USART_INVALID_INPUT;
8002b890:	30 18       	mov	r8,1
8002b892:	c0 f8       	rjmp	8002b8b0 <usart_init_lin_master+0x58>

  usart->mr |= AVR32_USART_MR_MODE_LIN_MASTER << AVR32_USART_MR_MODE_OFFSET;  // LIN master mode.
8002b894:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b898:	70 18       	ld.w	r8,r8[0x4]
8002b89a:	10 99       	mov	r9,r8
8002b89c:	e8 19 00 0a 	orl	r9,0xa
8002b8a0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b8a4:	91 19       	st.w	r8[0x4],r9

  // Setup complete; enable communication.
  // Enable input and output.
  usart->cr = AVR32_USART_CR_RXEN_MASK |
8002b8a6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b8aa:	35 09       	mov	r9,80
8002b8ac:	91 09       	st.w	r8[0x0],r9
              AVR32_USART_CR_TXEN_MASK;

  return USART_SUCCESS;
8002b8ae:	30 08       	mov	r8,0
}
8002b8b0:	10 9c       	mov	r12,r8
8002b8b2:	2f dd       	sub	sp,-12
8002b8b4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002b8b8:	80 02       	ld.sh	r2,r0[0x0]
8002b8ba:	b6 e6       	st.b	r11[0x6],r6

8002b8bc <usart_init_lin_slave>:


int usart_init_lin_slave(volatile avr32_usart_t *usart, unsigned long baudrate, long pba_hz)
{
8002b8bc:	eb cd 40 c0 	pushm	r6-r7,lr
8002b8c0:	1a 97       	mov	r7,sp
8002b8c2:	20 3d       	sub	sp,12
8002b8c4:	49 66       	lddpc	r6,8002b91c <usart_init_lin_slave+0x60>
8002b8c6:	1e 26       	rsub	r6,pc
8002b8c8:	ef 4c ff fc 	st.w	r7[-4],r12
8002b8cc:	ef 4b ff f8 	st.w	r7[-8],r11
8002b8d0:	ef 4a ff f4 	st.w	r7[-12],r10
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);
8002b8d4:	ee fc ff fc 	ld.w	r12,r7[-4]
8002b8d8:	f0 16 00 4a 	mcall	r6[296]

  // Check input values.
  if (usart_set_async_baudrate(usart, baudrate, pba_hz) == USART_INVALID_INPUT)
8002b8dc:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002b8e0:	10 9a       	mov	r10,r8
8002b8e2:	ee fb ff f8 	ld.w	r11,r7[-8]
8002b8e6:	ee fc ff fc 	ld.w	r12,r7[-4]
8002b8ea:	fe b0 fa 0f 	rcall	8002ad08 <usart_set_async_baudrate>
8002b8ee:	18 98       	mov	r8,r12
8002b8f0:	58 18       	cp.w	r8,1
8002b8f2:	c0 31       	brne	8002b8f8 <usart_init_lin_slave+0x3c>
    return USART_INVALID_INPUT;
8002b8f4:	30 18       	mov	r8,1
8002b8f6:	c0 f8       	rjmp	8002b914 <usart_init_lin_slave+0x58>

  usart->mr |= AVR32_USART_MR_MODE_LIN_SLAVE << AVR32_USART_MR_MODE_OFFSET; // LIN slave mode.
8002b8f8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b8fc:	70 18       	ld.w	r8,r8[0x4]
8002b8fe:	10 99       	mov	r9,r8
8002b900:	e8 19 00 0b 	orl	r9,0xb
8002b904:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b908:	91 19       	st.w	r8[0x4],r9

  // Setup complete; enable communication.
  // Enable input and output.
  usart->cr = AVR32_USART_CR_RXEN_MASK |
8002b90a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b90e:	35 09       	mov	r9,80
8002b910:	91 09       	st.w	r8[0x0],r9
              AVR32_USART_CR_TXEN_MASK;

  return USART_SUCCESS;
8002b912:	30 08       	mov	r8,0
}
8002b914:	10 9c       	mov	r12,r8
8002b916:	2f dd       	sub	sp,-12
8002b918:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002b91c:	80 02       	ld.sh	r2,r0[0x0]
8002b91e:	b7 4a       	asr	r10,0x16

8002b920 <usart_init_spi_master>:


int usart_init_spi_master(volatile avr32_usart_t *usart, const usart_spi_options_t *opt, long pba_hz)
{
8002b920:	eb cd 40 c0 	pushm	r6-r7,lr
8002b924:	1a 97       	mov	r7,sp
8002b926:	20 3d       	sub	sp,12
8002b928:	4c 46       	lddpc	r6,8002ba38 <usart_init_spi_master+0x118>
8002b92a:	1e 26       	rsub	r6,pc
8002b92c:	ef 4c ff fc 	st.w	r7[-4],r12
8002b930:	ef 4b ff f8 	st.w	r7[-8],r11
8002b934:	ef 4a ff f4 	st.w	r7[-12],r10
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);
8002b938:	ee fc ff fc 	ld.w	r12,r7[-4]
8002b93c:	f0 16 00 4a 	mcall	r6[296]

  // Check input values.
  if (!opt || // Null pointer.
8002b940:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b944:	58 08       	cp.w	r8,0
8002b946:	c2 f0       	breq	8002b9a4 <usart_init_spi_master+0x84>
      opt->charlength < 5 || opt->charlength > 9 ||
8002b948:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b94c:	11 c9       	ld.ub	r9,r8[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002b94e:	30 48       	mov	r8,4
8002b950:	f0 09 18 00 	cp.b	r9,r8
8002b954:	e0 88 00 28 	brls	8002b9a4 <usart_init_spi_master+0x84>
      opt->charlength < 5 || opt->charlength > 9 ||
8002b958:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b95c:	11 c9       	ld.ub	r9,r8[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002b95e:	30 98       	mov	r8,9
8002b960:	f0 09 18 00 	cp.b	r9,r8
8002b964:	e0 8b 00 20 	brhi	8002b9a4 <usart_init_spi_master+0x84>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->spimode > 3 ||
8002b968:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b96c:	11 d9       	ld.ub	r9,r8[0x5]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002b96e:	30 38       	mov	r8,3
8002b970:	f0 09 18 00 	cp.b	r9,r8
8002b974:	e0 8b 00 18 	brhi	8002b9a4 <usart_init_spi_master+0x84>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->spimode > 3 ||
      opt->channelmode > 3 ||
8002b978:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b97c:	11 e9       	ld.ub	r9,r8[0x6]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002b97e:	30 38       	mov	r8,3
8002b980:	f0 09 18 00 	cp.b	r9,r8
8002b984:	e0 8b 00 10 	brhi	8002b9a4 <usart_init_spi_master+0x84>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->spimode > 3 ||
      opt->channelmode > 3 ||
      usart_set_spi_master_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
8002b988:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002b98c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b990:	70 08       	ld.w	r8,r8[0x0]
8002b992:	12 9a       	mov	r10,r9
8002b994:	10 9b       	mov	r11,r8
8002b996:	ee fc ff fc 	ld.w	r12,r7[-4]
8002b99a:	fe b0 fa a5 	rcall	8002aee4 <usart_set_spi_master_baudrate>
8002b99e:	18 98       	mov	r8,r12
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002b9a0:	58 18       	cp.w	r8,1
8002b9a2:	c0 31       	brne	8002b9a8 <usart_init_spi_master+0x88>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->spimode > 3 ||
      opt->channelmode > 3 ||
      usart_set_spi_master_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
    return USART_INVALID_INPUT;
8002b9a4:	30 18       	mov	r8,1
8002b9a6:	c4 48       	rjmp	8002ba2e <usart_init_spi_master+0x10e>

  if (opt->charlength == 9)
8002b9a8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b9ac:	11 c9       	ld.ub	r9,r8[0x4]
8002b9ae:	30 98       	mov	r8,9
8002b9b0:	f0 09 18 00 	cp.b	r9,r8
8002b9b4:	c0 a1       	brne	8002b9c8 <usart_init_spi_master+0xa8>
  {
    // Character length set to 9 bits. MODE9 dominates CHRL.
    usart->mr |= AVR32_USART_MR_MODE9_MASK;
8002b9b6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b9ba:	70 18       	ld.w	r8,r8[0x4]
8002b9bc:	10 99       	mov	r9,r8
8002b9be:	b1 b9       	sbr	r9,0x11
8002b9c0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b9c4:	91 19       	st.w	r8[0x4],r9
8002b9c6:	c0 d8       	rjmp	8002b9e0 <usart_init_spi_master+0xc0>
  }
  else
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
8002b9c8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b9cc:	70 19       	ld.w	r9,r8[0x4]
8002b9ce:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b9d2:	11 c8       	ld.ub	r8,r8[0x4]
8002b9d4:	20 58       	sub	r8,5
8002b9d6:	a7 68       	lsl	r8,0x6
8002b9d8:	10 49       	or	r9,r8
8002b9da:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b9de:	91 19       	st.w	r8[0x4],r9
  }

  usart->mr |= AVR32_USART_MR_MODE_SPI_MASTER << AVR32_USART_MR_MODE_OFFSET | // SPI master mode.
8002b9e0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b9e4:	70 19       	ld.w	r9,r8[0x4]
               ((opt->spimode & 0x1) ^ 0x1) << AVR32_USART_MR_SYNC_OFFSET |   // SPI clock phase.
8002b9e6:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b9ea:	11 d8       	ld.ub	r8,r8[0x5]
8002b9ec:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002b9f0:	c0 41       	brne	8002b9f8 <usart_init_spi_master+0xd8>
8002b9f2:	e0 68 01 0e 	mov	r8,270
8002b9f6:	c0 28       	rjmp	8002b9fa <usart_init_spi_master+0xda>
8002b9f8:	30 e8       	mov	r8,14
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET |             // Channel mode.
8002b9fa:	ee fa ff f8 	ld.w	r10,r7[-8]
8002b9fe:	15 ea       	ld.ub	r10,r10[0x6]
8002ba00:	af 6a       	lsl	r10,0xe
8002ba02:	f1 ea 10 0a 	or	r10,r8,r10
               (opt->spimode >> 1) << AVR32_USART_MR_MSBF_OFFSET |            // SPI clock polarity.
8002ba06:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ba0a:	11 d8       	ld.ub	r8,r8[0x5]
8002ba0c:	a1 98       	lsr	r8,0x1
8002ba0e:	5c 58       	castu.b	r8
8002ba10:	b1 68       	lsl	r8,0x10
8002ba12:	f5 e8 10 08 	or	r8,r10,r8
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
  }

  usart->mr |= AVR32_USART_MR_MODE_SPI_MASTER << AVR32_USART_MR_MODE_OFFSET | // SPI master mode.
8002ba16:	f3 e8 10 08 	or	r8,r9,r8
8002ba1a:	10 99       	mov	r9,r8
8002ba1c:	b3 a9       	sbr	r9,0x12
8002ba1e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ba22:	91 19       	st.w	r8[0x4],r9
               (opt->spimode >> 1) << AVR32_USART_MR_MSBF_OFFSET |            // SPI clock polarity.
               AVR32_USART_MR_CLKO_MASK;                                      // Drive SCK pin.

  // Setup complete; enable communication.
  // Enable input and output.
  usart->cr = AVR32_USART_CR_RXEN_MASK |
8002ba24:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ba28:	35 09       	mov	r9,80
8002ba2a:	91 09       	st.w	r8[0x0],r9
              AVR32_USART_CR_TXEN_MASK;

  return USART_SUCCESS;
8002ba2c:	30 08       	mov	r8,0
}
8002ba2e:	10 9c       	mov	r12,r8
8002ba30:	2f dd       	sub	sp,-12
8002ba32:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002ba36:	00 00       	add	r0,r0
8002ba38:	80 02       	ld.sh	r2,r0[0x0]
8002ba3a:	b7 ae       	sbr	lr,0x16

8002ba3c <usart_init_spi_slave>:


int usart_init_spi_slave(volatile avr32_usart_t *usart, const usart_spi_options_t *opt, long pba_hz)
{
8002ba3c:	eb cd 40 c0 	pushm	r6-r7,lr
8002ba40:	1a 97       	mov	r7,sp
8002ba42:	20 3d       	sub	sp,12
8002ba44:	4b f6       	lddpc	r6,8002bb40 <usart_init_spi_slave+0x104>
8002ba46:	1e 26       	rsub	r6,pc
8002ba48:	ef 4c ff fc 	st.w	r7[-4],r12
8002ba4c:	ef 4b ff f8 	st.w	r7[-8],r11
8002ba50:	ef 4a ff f4 	st.w	r7[-12],r10
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);
8002ba54:	ee fc ff fc 	ld.w	r12,r7[-4]
8002ba58:	f0 16 00 4a 	mcall	r6[296]

  // Check input values.
  if (!opt || // Null pointer.
8002ba5c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ba60:	58 08       	cp.w	r8,0
8002ba62:	c2 80       	breq	8002bab2 <usart_init_spi_slave+0x76>
      opt->charlength < 5 || opt->charlength > 9 ||
8002ba64:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ba68:	11 c9       	ld.ub	r9,r8[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002ba6a:	30 48       	mov	r8,4
8002ba6c:	f0 09 18 00 	cp.b	r9,r8
8002ba70:	e0 88 00 21 	brls	8002bab2 <usart_init_spi_slave+0x76>
      opt->charlength < 5 || opt->charlength > 9 ||
8002ba74:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ba78:	11 c9       	ld.ub	r9,r8[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002ba7a:	30 98       	mov	r8,9
8002ba7c:	f0 09 18 00 	cp.b	r9,r8
8002ba80:	e0 8b 00 19 	brhi	8002bab2 <usart_init_spi_slave+0x76>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->spimode > 3 ||
8002ba84:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ba88:	11 d9       	ld.ub	r9,r8[0x5]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002ba8a:	30 38       	mov	r8,3
8002ba8c:	f0 09 18 00 	cp.b	r9,r8
8002ba90:	e0 8b 00 11 	brhi	8002bab2 <usart_init_spi_slave+0x76>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->spimode > 3 ||
      opt->channelmode > 3 ||
8002ba94:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ba98:	11 e9       	ld.ub	r9,r8[0x6]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002ba9a:	30 38       	mov	r8,3
8002ba9c:	f0 09 18 00 	cp.b	r9,r8
8002baa0:	e0 8b 00 09 	brhi	8002bab2 <usart_init_spi_slave+0x76>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->spimode > 3 ||
      opt->channelmode > 3 ||
      usart_set_spi_slave_baudrate(usart) == USART_INVALID_INPUT)
8002baa4:	ee fc ff fc 	ld.w	r12,r7[-4]
8002baa8:	fe b0 fa 56 	rcall	8002af54 <usart_set_spi_slave_baudrate>
8002baac:	18 98       	mov	r8,r12
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002baae:	58 18       	cp.w	r8,1
8002bab0:	c0 31       	brne	8002bab6 <usart_init_spi_slave+0x7a>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->spimode > 3 ||
      opt->channelmode > 3 ||
      usart_set_spi_slave_baudrate(usart) == USART_INVALID_INPUT)
    return USART_INVALID_INPUT;
8002bab2:	30 18       	mov	r8,1
8002bab4:	c4 18       	rjmp	8002bb36 <usart_init_spi_slave+0xfa>

  if (opt->charlength == 9)
8002bab6:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002baba:	11 c9       	ld.ub	r9,r8[0x4]
8002babc:	30 98       	mov	r8,9
8002babe:	f0 09 18 00 	cp.b	r9,r8
8002bac2:	c0 a1       	brne	8002bad6 <usart_init_spi_slave+0x9a>
  {
    // Character length set to 9 bits. MODE9 dominates CHRL.
    usart->mr |= AVR32_USART_MR_MODE9_MASK;
8002bac4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002bac8:	70 18       	ld.w	r8,r8[0x4]
8002baca:	10 99       	mov	r9,r8
8002bacc:	b1 b9       	sbr	r9,0x11
8002bace:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002bad2:	91 19       	st.w	r8[0x4],r9
8002bad4:	c0 d8       	rjmp	8002baee <usart_init_spi_slave+0xb2>
  }
  else
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
8002bad6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002bada:	70 19       	ld.w	r9,r8[0x4]
8002badc:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002bae0:	11 c8       	ld.ub	r8,r8[0x4]
8002bae2:	20 58       	sub	r8,5
8002bae4:	a7 68       	lsl	r8,0x6
8002bae6:	10 49       	or	r9,r8
8002bae8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002baec:	91 19       	st.w	r8[0x4],r9
  }

  usart->mr |= AVR32_USART_MR_MODE_SPI_SLAVE << AVR32_USART_MR_MODE_OFFSET |  // SPI slave mode.
8002baee:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002baf2:	70 19       	ld.w	r9,r8[0x4]
               ((opt->spimode & 0x1) ^ 0x1) << AVR32_USART_MR_SYNC_OFFSET |   // SPI clock phase.
8002baf4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002baf8:	11 d8       	ld.ub	r8,r8[0x5]
8002bafa:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002bafe:	c0 41       	brne	8002bb06 <usart_init_spi_slave+0xca>
8002bb00:	e0 68 01 0f 	mov	r8,271
8002bb04:	c0 28       	rjmp	8002bb08 <usart_init_spi_slave+0xcc>
8002bb06:	30 f8       	mov	r8,15
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET |             // Channel mode.
8002bb08:	ee fa ff f8 	ld.w	r10,r7[-8]
8002bb0c:	15 ea       	ld.ub	r10,r10[0x6]
8002bb0e:	af 6a       	lsl	r10,0xe
8002bb10:	f1 ea 10 0a 	or	r10,r8,r10
               (opt->spimode >> 1) << AVR32_USART_MR_MSBF_OFFSET;             // SPI clock polarity.
8002bb14:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002bb18:	11 d8       	ld.ub	r8,r8[0x5]
8002bb1a:	a1 98       	lsr	r8,0x1
8002bb1c:	5c 58       	castu.b	r8
8002bb1e:	b1 68       	lsl	r8,0x10
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
  }

  usart->mr |= AVR32_USART_MR_MODE_SPI_SLAVE << AVR32_USART_MR_MODE_OFFSET |  // SPI slave mode.
8002bb20:	f5 e8 10 08 	or	r8,r10,r8
8002bb24:	10 49       	or	r9,r8
8002bb26:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002bb2a:	91 19       	st.w	r8[0x4],r9
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET |             // Channel mode.
               (opt->spimode >> 1) << AVR32_USART_MR_MSBF_OFFSET;             // SPI clock polarity.

  // Setup complete; enable communication.
  // Enable input and output.
  usart->cr = AVR32_USART_CR_RXEN_MASK |
8002bb2c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002bb30:	35 09       	mov	r9,80
8002bb32:	91 09       	st.w	r8[0x0],r9
              AVR32_USART_CR_TXEN_MASK;

  return USART_SUCCESS;
8002bb34:	30 08       	mov	r8,0
}
8002bb36:	10 9c       	mov	r12,r8
8002bb38:	2f dd       	sub	sp,-12
8002bb3a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002bb3e:	00 00       	add	r0,r0
8002bb40:	80 02       	ld.sh	r2,r0[0x0]
8002bb42:	b8 ca       	st.b	r12[0x4],r10

8002bb44 <usart_spi_selectChip>:
 */
//! @{


int usart_spi_selectChip(volatile avr32_usart_t *usart)
{
8002bb44:	eb cd 40 80 	pushm	r7,lr
8002bb48:	1a 97       	mov	r7,sp
8002bb4a:	20 1d       	sub	sp,4
8002bb4c:	ef 4c ff fc 	st.w	r7[-4],r12
  // Force the SPI chip select.
  usart->cr = AVR32_USART_CR_RTSEN_MASK;
8002bb50:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002bb54:	e4 69 00 00 	mov	r9,262144
8002bb58:	91 09       	st.w	r8[0x0],r9

  return USART_SUCCESS;
8002bb5a:	30 08       	mov	r8,0
}
8002bb5c:	10 9c       	mov	r12,r8
8002bb5e:	2f fd       	sub	sp,-4
8002bb60:	e3 cd 80 80 	ldm	sp++,r7,pc

8002bb64 <usart_spi_unselectChip>:


int usart_spi_unselectChip(volatile avr32_usart_t *usart)
{
8002bb64:	eb cd 40 80 	pushm	r7,lr
8002bb68:	1a 97       	mov	r7,sp
8002bb6a:	20 3d       	sub	sp,12
8002bb6c:	ef 4c ff f4 	st.w	r7[-12],r12
  int timeout = USART_DEFAULT_TIMEOUT;
8002bb70:	e0 68 27 10 	mov	r8,10000
8002bb74:	ef 48 ff f8 	st.w	r7[-8],r8

  do
  {
    if (!timeout--) return USART_FAILURE;
8002bb78:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002bb7c:	58 08       	cp.w	r8,0
8002bb7e:	5f 08       	sreq	r8
8002bb80:	5c 58       	castu.b	r8
8002bb82:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002bb86:	20 19       	sub	r9,1
8002bb88:	ef 49 ff f8 	st.w	r7[-8],r9
8002bb8c:	58 08       	cp.w	r8,0
8002bb8e:	c0 30       	breq	8002bb94 <usart_spi_unselectChip+0x30>
8002bb90:	3f f8       	mov	r8,-1
8002bb92:	c1 38       	rjmp	8002bbb8 <usart_spi_unselectChip+0x54>
8002bb94:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002bb98:	ef 48 ff fc 	st.w	r7[-4],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int usart_tx_empty(volatile avr32_usart_t *usart)
{
  return (usart->csr & AVR32_USART_CSR_TXEMPTY_MASK) != 0;
8002bb9c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002bba0:	70 58       	ld.w	r8,r8[0x14]
8002bba2:	e2 18 02 00 	andl	r8,0x200,COH
8002bba6:	5f 18       	srne	r8
  } while (!usart_tx_empty(usart));
8002bba8:	58 08       	cp.w	r8,0
8002bbaa:	ce 70       	breq	8002bb78 <usart_spi_unselectChip+0x14>

  // Release the SPI chip select.
  usart->cr = AVR32_USART_CR_RTSDIS_MASK;
8002bbac:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002bbb0:	e8 69 00 00 	mov	r9,524288
8002bbb4:	91 09       	st.w	r8[0x0],r9

  return USART_SUCCESS;
8002bbb6:	30 08       	mov	r8,0
}
8002bbb8:	10 9c       	mov	r12,r8
8002bbba:	2f dd       	sub	sp,-12
8002bbbc:	e3 cd 80 80 	ldm	sp++,r7,pc

8002bbc0 <usart_send_address>:
 */
//! @{


int usart_send_address(volatile avr32_usart_t *usart, int address)
{
8002bbc0:	eb cd 40 c0 	pushm	r6-r7,lr
8002bbc4:	1a 97       	mov	r7,sp
8002bbc6:	20 5d       	sub	sp,20
8002bbc8:	49 96       	lddpc	r6,8002bc2c <usart_send_address+0x6c>
8002bbca:	1e 26       	rsub	r6,pc
8002bbcc:	ef 4c ff f0 	st.w	r7[-16],r12
8002bbd0:	ef 4b ff ec 	st.w	r7[-20],r11
8002bbd4:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002bbd8:	ef 48 ff f4 	st.w	r7[-12],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ int usart_mode_is_multidrop(volatile avr32_usart_t *usart)
{
  return ((usart->mr >> AVR32_USART_MR_PAR_OFFSET) & AVR32_USART_MR_PAR_MULTI) == AVR32_USART_MR_PAR_MULTI;
8002bbdc:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002bbe0:	70 18       	ld.w	r8,r8[0x4]
8002bbe2:	a9 98       	lsr	r8,0x9
8002bbe4:	e2 18 00 06 	andl	r8,0x6,COH
8002bbe8:	58 68       	cp.w	r8,6
8002bbea:	5f 08       	sreq	r8


int usart_send_address(volatile avr32_usart_t *usart, int address)
{
  // Check if USART is in multidrop / RS485 mode.
  if (!usart_mode_is_multidrop(usart)) return USART_MODE_FAULT;
8002bbec:	58 08       	cp.w	r8,0
8002bbee:	c0 31       	brne	8002bbf4 <usart_send_address+0x34>
8002bbf0:	30 58       	mov	r8,5
8002bbf2:	c1 88       	rjmp	8002bc22 <usart_send_address+0x62>

  // Prepare to send an address.
  usart->cr = AVR32_USART_CR_SENDA_MASK;
8002bbf4:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002bbf8:	e0 69 10 00 	mov	r9,4096
8002bbfc:	91 09       	st.w	r8[0x0],r9
8002bbfe:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002bc02:	ef 48 ff fc 	st.w	r7[-4],r8
8002bc06:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002bc0a:	ef 48 ff f8 	st.w	r7[-8],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void usart_bw_write_char(volatile avr32_usart_t *usart, int c)
{
  while (usart_write_char(usart, c) != USART_SUCCESS);
8002bc0e:	ee fb ff f8 	ld.w	r11,r7[-8]
8002bc12:	ee fc ff fc 	ld.w	r12,r7[-4]
8002bc16:	f0 16 01 0c 	mcall	r6[1072]
8002bc1a:	18 98       	mov	r8,r12
8002bc1c:	58 08       	cp.w	r8,0
8002bc1e:	cf 81       	brne	8002bc0e <usart_send_address+0x4e>

  // Write the address to TX.
  usart_bw_write_char(usart, address);

  return USART_SUCCESS;
8002bc20:	30 08       	mov	r8,0
}
8002bc22:	10 9c       	mov	r12,r8
8002bc24:	2f bd       	sub	sp,-20
8002bc26:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002bc2a:	00 00       	add	r0,r0
8002bc2c:	80 02       	ld.sh	r2,r0[0x0]
8002bc2e:	ba 4e       	st.h	sp[0x8],lr

8002bc30 <usart_write_char>:


int usart_write_char(volatile avr32_usart_t *usart, int c)
{
8002bc30:	eb cd 40 80 	pushm	r7,lr
8002bc34:	1a 97       	mov	r7,sp
8002bc36:	20 3d       	sub	sp,12
8002bc38:	ef 4c ff f8 	st.w	r7[-8],r12
8002bc3c:	ef 4b ff f4 	st.w	r7[-12],r11
8002bc40:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002bc44:	ef 48 ff fc 	st.w	r7[-4],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int usart_tx_ready(volatile avr32_usart_t *usart)
{
  return (usart->csr & AVR32_USART_CSR_TXRDY_MASK) != 0;
8002bc48:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002bc4c:	70 58       	ld.w	r8,r8[0x14]
8002bc4e:	e2 18 00 02 	andl	r8,0x2,COH
8002bc52:	5f 18       	srne	r8
  if (usart_tx_ready(usart))
8002bc54:	58 08       	cp.w	r8,0
8002bc56:	c0 a0       	breq	8002bc6a <usart_write_char+0x3a>
  {
    usart->thr = (c << AVR32_USART_THR_TXCHR_OFFSET) & AVR32_USART_THR_TXCHR_MASK;
8002bc58:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002bc5c:	f3 d8 c0 09 	bfextu	r9,r8,0x0,0x9
8002bc60:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002bc64:	91 79       	st.w	r8[0x1c],r9
    return USART_SUCCESS;
8002bc66:	30 08       	mov	r8,0
8002bc68:	c0 28       	rjmp	8002bc6c <usart_write_char+0x3c>
  }
  else
    return USART_TX_BUSY;
8002bc6a:	30 28       	mov	r8,2
}
8002bc6c:	10 9c       	mov	r12,r8
8002bc6e:	2f dd       	sub	sp,-12
8002bc70:	e3 cd 80 80 	ldm	sp++,r7,pc

8002bc74 <usart_putchar>:


int usart_putchar(volatile avr32_usart_t *usart, int c)
{
8002bc74:	eb cd 40 c0 	pushm	r6-r7,lr
8002bc78:	1a 97       	mov	r7,sp
8002bc7a:	20 3d       	sub	sp,12
8002bc7c:	49 36       	lddpc	r6,8002bcc8 <usart_putchar+0x54>
8002bc7e:	1e 26       	rsub	r6,pc
8002bc80:	ef 4c ff f8 	st.w	r7[-8],r12
8002bc84:	ef 4b ff f4 	st.w	r7[-12],r11
  int timeout = USART_DEFAULT_TIMEOUT;
8002bc88:	e0 68 27 10 	mov	r8,10000
8002bc8c:	ef 48 ff fc 	st.w	r7[-4],r8

  do
  {
    if (!timeout--) return USART_FAILURE;
8002bc90:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002bc94:	58 08       	cp.w	r8,0
8002bc96:	5f 08       	sreq	r8
8002bc98:	5c 58       	castu.b	r8
8002bc9a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002bc9e:	20 19       	sub	r9,1
8002bca0:	ef 49 ff fc 	st.w	r7[-4],r9
8002bca4:	58 08       	cp.w	r8,0
8002bca6:	c0 30       	breq	8002bcac <usart_putchar+0x38>
8002bca8:	3f f8       	mov	r8,-1
8002bcaa:	c0 b8       	rjmp	8002bcc0 <usart_putchar+0x4c>
  } while (usart_write_char(usart, c) != USART_SUCCESS);
8002bcac:	ee fb ff f4 	ld.w	r11,r7[-12]
8002bcb0:	ee fc ff f8 	ld.w	r12,r7[-8]
8002bcb4:	f0 16 01 0c 	mcall	r6[1072]
8002bcb8:	18 98       	mov	r8,r12
8002bcba:	58 08       	cp.w	r8,0
8002bcbc:	ce a1       	brne	8002bc90 <usart_putchar+0x1c>

  return USART_SUCCESS;
8002bcbe:	30 08       	mov	r8,0
}
8002bcc0:	10 9c       	mov	r12,r8
8002bcc2:	2f dd       	sub	sp,-12
8002bcc4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002bcc8:	80 02       	ld.sh	r2,r0[0x0]
8002bcca:	bb 02       	ld.d	r2,sp

8002bccc <usart_read_char>:


int usart_read_char(volatile avr32_usart_t *usart, int *c)
{
8002bccc:	eb cd 40 80 	pushm	r7,lr
8002bcd0:	1a 97       	mov	r7,sp
8002bcd2:	20 3d       	sub	sp,12
8002bcd4:	ef 4c ff f8 	st.w	r7[-8],r12
8002bcd8:	ef 4b ff f4 	st.w	r7[-12],r11
  // Check for errors: frame, parity and overrun. In RS485 mode, a parity error
  // would mean that an address char has been received.
  if (usart->csr & (AVR32_USART_CSR_OVRE_MASK |
8002bcdc:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002bce0:	70 58       	ld.w	r8,r8[0x14]
8002bce2:	e2 18 00 e0 	andl	r8,0xe0,COH
8002bce6:	c0 30       	breq	8002bcec <usart_read_char+0x20>
                    AVR32_USART_CSR_FRAME_MASK |
                    AVR32_USART_CSR_PARE_MASK))
    return USART_RX_ERROR;
8002bce8:	30 48       	mov	r8,4
8002bcea:	c1 68       	rjmp	8002bd16 <usart_read_char+0x4a>
8002bcec:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002bcf0:	ef 48 ff fc 	st.w	r7[-4],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int usart_test_hit(volatile avr32_usart_t *usart)
{
  return (usart->csr & AVR32_USART_CSR_RXRDY_MASK) != 0;
8002bcf4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002bcf8:	70 58       	ld.w	r8,r8[0x14]
8002bcfa:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1

  // No error; if we really did receive a char, read it and return SUCCESS.
  if (usart_test_hit(usart))
8002bcfe:	c0 b0       	breq	8002bd14 <usart_read_char+0x48>
  {
    *c = (usart->rhr & AVR32_USART_RHR_RXCHR_MASK) >> AVR32_USART_RHR_RXCHR_OFFSET;
8002bd00:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002bd04:	70 68       	ld.w	r8,r8[0x18]
8002bd06:	f3 d8 c0 09 	bfextu	r9,r8,0x0,0x9
8002bd0a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002bd0e:	91 09       	st.w	r8[0x0],r9
    return USART_SUCCESS;
8002bd10:	30 08       	mov	r8,0
8002bd12:	c0 28       	rjmp	8002bd16 <usart_read_char+0x4a>
  }
  else
    return USART_RX_EMPTY;
8002bd14:	30 38       	mov	r8,3
}
8002bd16:	10 9c       	mov	r12,r8
8002bd18:	2f dd       	sub	sp,-12
8002bd1a:	e3 cd 80 80 	ldm	sp++,r7,pc

8002bd1e <usart_getchar>:


int usart_getchar(volatile avr32_usart_t *usart)
{
8002bd1e:	eb cd 40 c0 	pushm	r6-r7,lr
8002bd22:	1a 97       	mov	r7,sp
8002bd24:	20 3d       	sub	sp,12
8002bd26:	49 06       	lddpc	r6,8002bd64 <usart_getchar+0x46>
8002bd28:	1e 26       	rsub	r6,pc
8002bd2a:	ef 4c ff f4 	st.w	r7[-12],r12
  int c, ret;

  while ((ret = usart_read_char(usart, &c)) == USART_RX_EMPTY);
8002bd2e:	ee c8 00 08 	sub	r8,r7,8
8002bd32:	10 9b       	mov	r11,r8
8002bd34:	ee fc ff f4 	ld.w	r12,r7[-12]
8002bd38:	f0 16 01 f2 	mcall	r6[1992]
8002bd3c:	18 98       	mov	r8,r12
8002bd3e:	ef 48 ff fc 	st.w	r7[-4],r8
8002bd42:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002bd46:	58 38       	cp.w	r8,3
8002bd48:	cf 30       	breq	8002bd2e <usart_getchar+0x10>

  if (ret == USART_RX_ERROR)
8002bd4a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002bd4e:	58 48       	cp.w	r8,4
8002bd50:	c0 31       	brne	8002bd56 <usart_getchar+0x38>
    return USART_FAILURE;
8002bd52:	3f f8       	mov	r8,-1
8002bd54:	c0 38       	rjmp	8002bd5a <usart_getchar+0x3c>

  return c;
8002bd56:	ee f8 ff f8 	ld.w	r8,r7[-8]
}
8002bd5a:	10 9c       	mov	r12,r8
8002bd5c:	2f dd       	sub	sp,-12
8002bd5e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002bd62:	00 00       	add	r0,r0
8002bd64:	80 02       	ld.sh	r2,r0[0x0]
8002bd66:	bb ac       	sbr	r12,0x1a

8002bd68 <usart_write_line>:


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
8002bd68:	eb cd 40 c0 	pushm	r6-r7,lr
8002bd6c:	1a 97       	mov	r7,sp
8002bd6e:	20 2d       	sub	sp,8
8002bd70:	48 e6       	lddpc	r6,8002bda8 <usart_write_line+0x40>
8002bd72:	1e 26       	rsub	r6,pc
8002bd74:	ef 4c ff fc 	st.w	r7[-4],r12
8002bd78:	ef 4b ff f8 	st.w	r7[-8],r11
  while (*string != '\0')
8002bd7c:	c0 e8       	rjmp	8002bd98 <usart_write_line+0x30>
    usart_putchar(usart, *string++);
8002bd7e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002bd82:	11 88       	ld.ub	r8,r8[0x0]
8002bd84:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002bd88:	2f f9       	sub	r9,-1
8002bd8a:	ef 49 ff f8 	st.w	r7[-8],r9
8002bd8e:	10 9b       	mov	r11,r8
8002bd90:	ee fc ff fc 	ld.w	r12,r7[-4]
8002bd94:	f0 16 00 9a 	mcall	r6[616]
}


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
  while (*string != '\0')
8002bd98:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002bd9c:	11 88       	ld.ub	r8,r8[0x0]
8002bd9e:	58 08       	cp.w	r8,0
8002bda0:	ce f1       	brne	8002bd7e <usart_write_line+0x16>
    usart_putchar(usart, *string++);
}
8002bda2:	2f ed       	sub	sp,-8
8002bda4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002bda8:	80 02       	ld.sh	r2,r0[0x0]
8002bdaa:	bb f6       	*unknown*
8002bdac:	45 72       	lddsp	r2,sp[0x15c]
8002bdae:	72 6f       	ld.w	pc,r9[0x18]
8002bdb0:	72 21       	ld.w	r1,r9[0x8]
8002bdb2:	21 21       	sub	r1,18
8002bdb4:	0d 0a       	ld.w	r10,r6++
	...

8002bdb8 <usart_get_echo_line>:


int usart_get_echo_line(volatile avr32_usart_t *usart)
{
8002bdb8:	eb cd 40 c0 	pushm	r6-r7,lr
8002bdbc:	1a 97       	mov	r7,sp
8002bdbe:	20 3d       	sub	sp,12
8002bdc0:	49 e6       	lddpc	r6,8002be38 <usart_get_echo_line+0x80>
8002bdc2:	1e 26       	rsub	r6,pc
8002bdc4:	ef 4c ff f4 	st.w	r7[-12],r12
  int rx_char;
  int retval = USART_SUCCESS;
8002bdc8:	30 08       	mov	r8,0
8002bdca:	ef 48 ff fc 	st.w	r7[-4],r8
8002bdce:	c0 28       	rjmp	8002bdd2 <usart_get_echo_line+0x1a>
    if (rx_char == '\r')
    { // Add a LF and consider this as the end of the line.
      usart_putchar(usart, '\n');
      break;
    }
  }
8002bdd0:	d7 03       	nop
  int rx_char;
  int retval = USART_SUCCESS;

  while (1)
  {
    rx_char = usart_getchar(usart);
8002bdd2:	ee fc ff f4 	ld.w	r12,r7[-12]
8002bdd6:	f0 16 01 bf 	mcall	r6[1788]
8002bdda:	18 98       	mov	r8,r12
8002bddc:	ef 48 ff f8 	st.w	r7[-8],r8
    if (rx_char == USART_FAILURE)
8002bde0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002bde4:	5b f8       	cp.w	r8,-1
8002bde6:	c0 b1       	brne	8002bdfc <usart_get_echo_line+0x44>
    {
      usart_write_line(usart, "Error!!!\r\n");
8002bde8:	fe cb 00 3c 	sub	r11,pc,60
8002bdec:	ee fc ff f4 	ld.w	r12,r7[-12]
8002bdf0:	f0 16 01 52 	mcall	r6[1352]
      retval = USART_FAILURE;
8002bdf4:	3f f8       	mov	r8,-1
8002bdf6:	ef 48 ff fc 	st.w	r7[-4],r8
      break;
8002bdfa:	c1 98       	rjmp	8002be2c <usart_get_echo_line+0x74>
    }
    if (rx_char == '\x03')
8002bdfc:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002be00:	58 38       	cp.w	r8,3
8002be02:	c0 51       	brne	8002be0c <usart_get_echo_line+0x54>
    {
      retval = USART_FAILURE;
8002be04:	3f f8       	mov	r8,-1
8002be06:	ef 48 ff fc 	st.w	r7[-4],r8
      break;
8002be0a:	c1 18       	rjmp	8002be2c <usart_get_echo_line+0x74>
    }
    usart_putchar(usart, rx_char);
8002be0c:	ee fb ff f8 	ld.w	r11,r7[-8]
8002be10:	ee fc ff f4 	ld.w	r12,r7[-12]
8002be14:	f0 16 00 9a 	mcall	r6[616]
    if (rx_char == '\r')
8002be18:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002be1c:	58 d8       	cp.w	r8,13
8002be1e:	cd 91       	brne	8002bdd0 <usart_get_echo_line+0x18>
    { // Add a LF and consider this as the end of the line.
      usart_putchar(usart, '\n');
8002be20:	30 ab       	mov	r11,10
8002be22:	ee fc ff f4 	ld.w	r12,r7[-12]
8002be26:	f0 16 00 9a 	mcall	r6[616]
      break;
8002be2a:	d7 03       	nop
    }
  }

  return retval;
8002be2c:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8002be30:	10 9c       	mov	r12,r8
8002be32:	2f dd       	sub	sp,-12
8002be34:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002be38:	80 02       	ld.sh	r2,r0[0x0]
8002be3a:	bc 46       	st.h	lr[0x8],r6

8002be3c <delay_init>:
#endif

//_____ D E C L A R A T I O N S ____________________________________________

void delay_init(unsigned long fcpu_hz)
{
8002be3c:	eb cd 40 c0 	pushm	r6-r7,lr
8002be40:	1a 97       	mov	r7,sp
8002be42:	20 1d       	sub	sp,4
8002be44:	48 66       	lddpc	r6,8002be5c <delay_init+0x20>
8002be46:	1e 26       	rsub	r6,pc
8002be48:	ef 4c ff fc 	st.w	r7[-4],r12
#ifndef FREERTOS_USED
  s_fcpu_hz = fcpu_hz;
8002be4c:	ec f8 04 98 	ld.w	r8,r6[1176]
8002be50:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002be54:	91 09       	st.w	r8[0x0],r9
#endif
}
8002be56:	2f fd       	sub	sp,-4
8002be58:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002be5c:	80 02       	ld.sh	r2,r0[0x0]
8002be5e:	bc ca       	st.b	lr[0x4],r10

8002be60 <delay_ms>:


void delay_ms(unsigned long delay)
{
8002be60:	eb cd 40 c0 	pushm	r6-r7,lr
8002be64:	1a 97       	mov	r7,sp
8002be66:	20 cd       	sub	sp,48
8002be68:	4d 36       	lddpc	r6,8002bfb4 <delay_ms+0x154>
8002be6a:	1e 26       	rsub	r6,pc
8002be6c:	ef 4c ff d0 	st.w	r7[-48],r12
#if (defined FREERTOS_USED)
  vTaskDelay( (portTickType)TASK_DELAY_MS(delay) );
#elif (defined NUTOS_USED)
  NutSleep(delay);
#else
  cpu_delay_ms(delay, s_fcpu_hz);
8002be70:	ec fc 04 98 	ld.w	r12,r6[1176]
8002be74:	78 0c       	ld.w	r12,r12[0x0]
8002be76:	ee fe ff d0 	ld.w	lr,r7[-48]
8002be7a:	ef 4e ff e4 	st.w	r7[-28],lr
8002be7e:	ef 4c ff e0 	st.w	r7[-32],r12
8002be82:	ee fc ff e4 	ld.w	r12,r7[-28]
8002be86:	ef 4c ff ec 	st.w	r7[-20],r12
8002be8a:	ee fc ff e0 	ld.w	r12,r7[-32]
8002be8e:	ef 4c ff e8 	st.w	r7[-24],r12
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
8002be92:	ee fa ff ec 	ld.w	r10,r7[-20]
8002be96:	30 0b       	mov	r11,0
8002be98:	ee f8 ff e8 	ld.w	r8,r7[-24]
8002be9c:	30 09       	mov	r9,0
8002be9e:	f6 08 02 4c 	mul	r12,r11,r8
8002bea2:	f2 0a 02 4e 	mul	lr,r9,r10
8002bea6:	1c 0c       	add	r12,lr
8002bea8:	f4 08 06 48 	mulu.d	r8,r10,r8
8002beac:	12 0c       	add	r12,r9
8002beae:	18 99       	mov	r9,r12
8002beb0:	e0 6a 03 e7 	mov	r10,999
8002beb4:	30 0b       	mov	r11,0
8002beb6:	f0 0a 00 0a 	add	r10,r8,r10
8002beba:	f2 0b 00 4b 	adc	r11,r9,r11
8002bebe:	e0 68 03 e8 	mov	r8,1000
8002bec2:	30 09       	mov	r9,0
8002bec4:	f0 16 00 f7 	mcall	r6[988]
8002bec8:	14 98       	mov	r8,r10
8002beca:	16 99       	mov	r9,r11
__attribute__((__always_inline__))
#endif
static inline void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
8002becc:	ef 48 ff f4 	st.w	r7[-12],r8
8002bed0:	ee c8 00 2c 	sub	r8,r7,44
8002bed4:	ef 48 ff f0 	st.w	r7[-16],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8002bed8:	e1 b8 00 42 	mfsr	r8,0x108
8002bedc:	10 99       	mov	r9,r8
8002bede:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002bee2:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8002bee4:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002bee8:	70 09       	ld.w	r9,r8[0x0]
8002beea:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002beee:	10 09       	add	r9,r8
8002bef0:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002bef4:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
8002bef6:	ee f9 ff f0 	ld.w	r9,r7[-16]
8002befa:	30 08       	mov	r8,0
8002befc:	f3 68 00 08 	st.b	r9[8],r8
8002bf00:	ee c8 00 2c 	sub	r8,r7,44
8002bf04:	ef 48 ff f8 	st.w	r7[-8],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8002bf08:	e1 b8 00 42 	mfsr	r8,0x108
8002bf0c:	ef 48 ff fc 	st.w	r7[-4],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
8002bf10:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002bf14:	f1 39 00 08 	ld.ub	r9,r8[8]
8002bf18:	30 28       	mov	r8,2
8002bf1a:	f0 09 18 00 	cp.b	r9,r8
8002bf1e:	c0 31       	brne	8002bf24 <delay_ms+0xc4>
    return false;
8002bf20:	30 08       	mov	r8,0
8002bf22:	c4 38       	rjmp	8002bfa8 <delay_ms+0x148>

  // Test if the timeout as already occured.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
8002bf24:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002bf28:	f1 39 00 08 	ld.ub	r9,r8[8]
8002bf2c:	30 18       	mov	r8,1
8002bf2e:	f0 09 18 00 	cp.b	r9,r8
8002bf32:	c0 31       	brne	8002bf38 <delay_ms+0xd8>
    return true;
8002bf34:	30 18       	mov	r8,1
8002bf36:	c3 98       	rjmp	8002bfa8 <delay_ms+0x148>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8002bf38:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002bf3c:	70 09       	ld.w	r9,r8[0x0]
8002bf3e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002bf42:	70 18       	ld.w	r8,r8[0x4]
8002bf44:	10 39       	cp.w	r9,r8
8002bf46:	e0 88 00 1a 	brls	8002bf7a <delay_ms+0x11a>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8002bf4a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002bf4e:	70 08       	ld.w	r8,r8[0x0]
8002bf50:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002bf54:	10 39       	cp.w	r9,r8
8002bf56:	c1 02       	brcc	8002bf76 <delay_ms+0x116>
8002bf58:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002bf5c:	70 18       	ld.w	r8,r8[0x4]
8002bf5e:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002bf62:	10 39       	cp.w	r9,r8
8002bf64:	e0 88 00 09 	brls	8002bf76 <delay_ms+0x116>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8002bf68:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002bf6c:	30 18       	mov	r8,1
8002bf6e:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8002bf72:	30 18       	mov	r8,1
8002bf74:	c1 a8       	rjmp	8002bfa8 <delay_ms+0x148>
    }
    return false;
8002bf76:	30 08       	mov	r8,0
8002bf78:	c1 88       	rjmp	8002bfa8 <delay_ms+0x148>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8002bf7a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002bf7e:	70 08       	ld.w	r8,r8[0x0]
8002bf80:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002bf84:	10 39       	cp.w	r9,r8
8002bf86:	c0 93       	brcs	8002bf98 <delay_ms+0x138>
8002bf88:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002bf8c:	70 18       	ld.w	r8,r8[0x4]
8002bf8e:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002bf92:	10 39       	cp.w	r9,r8
8002bf94:	e0 88 00 09 	brls	8002bfa6 <delay_ms+0x146>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8002bf98:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002bf9c:	30 18       	mov	r8,1
8002bf9e:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8002bfa2:	30 18       	mov	r8,1
8002bfa4:	c0 28       	rjmp	8002bfa8 <delay_ms+0x148>
    }
    return false;
8002bfa6:	30 08       	mov	r8,0
#endif
static inline void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
8002bfa8:	58 08       	cp.w	r8,0
8002bfaa:	ca b0       	breq	8002bf00 <delay_ms+0xa0>
#endif
}
8002bfac:	2f 4d       	sub	sp,-48
8002bfae:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002bfb2:	00 00       	add	r0,r0
8002bfb4:	80 02       	ld.sh	r2,r0[0x0]
8002bfb6:	bc ee       	st.b	lr[0x6],lr

8002bfb8 <_stext>:

  .global _stext
  .type _stext, @function
_stext:
  // Set initial stack pointer.
  lda.w   sp, _estack
8002bfb8:	48 dd       	lddpc	sp,8002bfec <udata_clear_loop_end+0x4>

  // Set up EVBA so interrupts can be enabled.
  lda.w   r0, _evba
8002bfba:	fe c0 a7 ba 	sub	r0,pc,-22598
  mtsr    AVR32_EVBA, r0
8002bfbe:	e3 b0 00 01 	mtsr	0x4,r0

  // Enable the exception processing.
  csrf    AVR32_SR_EM_OFFSET

  // Load initialized data having a global lifetime from the data LMA.
  lda.w   r0, _data
8002bfc2:	d5 53       	csrf	0x15
  lda.w   r1, _edata
8002bfc4:	48 b0       	lddpc	r0,8002bff0 <udata_clear_loop_end+0x8>
  cp      r0, r1
8002bfc6:	48 c1       	lddpc	r1,8002bff4 <udata_clear_loop_end+0xc>
  brhs    idata_load_loop_end
8002bfc8:	02 30       	cp.w	r0,r1
  lda.w   r2, _data_lma
8002bfca:	c0 62       	brcc	8002bfd6 <idata_load_loop_end>
idata_load_loop:
  ld.d    r4, r2++
8002bfcc:	48 b2       	lddpc	r2,8002bff8 <udata_clear_loop_end+0x10>

8002bfce <idata_load_loop>:
  st.d    r0++, r4
8002bfce:	a5 05       	ld.d	r4,r2++
  cp      r0, r1
8002bfd0:	a1 24       	st.d	r0++,r4
  brlo    idata_load_loop
8002bfd2:	02 30       	cp.w	r0,r1
idata_load_loop_end:

  // Clear uninitialized data having a global lifetime in the blank static storage section.
  lda.w   r0, __bss_start
8002bfd4:	cf d3       	brcs	8002bfce <idata_load_loop>

8002bfd6 <idata_load_loop_end>:
  lda.w   r1, _end
8002bfd6:	48 a0       	lddpc	r0,8002bffc <udata_clear_loop_end+0x14>
  cp      r0, r1
8002bfd8:	48 a1       	lddpc	r1,8002c000 <udata_clear_loop_end+0x18>
  brhs    udata_clear_loop_end
8002bfda:	02 30       	cp.w	r0,r1
  mov     r2, 0
8002bfdc:	c0 62       	brcc	8002bfe8 <udata_clear_loop_end>
  mov     r3, 0
8002bfde:	30 02       	mov	r2,0
udata_clear_loop:
  st.d    r0++, r2
8002bfe0:	30 03       	mov	r3,0

8002bfe2 <udata_clear_loop>:
  cp      r0, r1
8002bfe2:	a1 22       	st.d	r0++,r2
  brlo    udata_clear_loop
8002bfe4:	02 30       	cp.w	r0,r1
  // Safety: Set the default "return" @ to the exit routine address.
  lda.w   lr, exit
#endif

  // Start the show.
  lda.w   pc, main
8002bfe6:	cf e3       	brcs	8002bfe2 <udata_clear_loop>

8002bfe8 <udata_clear_loop_end>:
8002bfe8:	fe cf e6 ec 	sub	pc,pc,-6420
8002bfec:	00 01       	add	r1,r0
8002bfee:	00 00       	add	r0,r0
8002bff0:	00 00       	add	r0,r0
8002bff2:	00 04       	add	r4,r0
8002bff4:	00 00       	add	r0,r0
8002bff6:	24 40       	sub	r0,68
8002bff8:	80 03       	ld.sh	r3,r0[0x0]
8002bffa:	20 48       	sub	r8,4
8002bffc:	00 00       	add	r0,r0
8002bffe:	24 40       	sub	r0,68
8002c000:	00 00       	add	r0,r0
8002c002:	96 e8       	ld.uh	r8,r11[0xc]

8002c004 <board_init>:
8002c004:	eb cd 40 c0 	pushm	r6-r7,lr
#if defined (CONF_BOARD_AT45DBX)
#define AT45DBX_MEM_CNT             1
#endif

void board_init(void)
{
8002c008:	1a 97       	mov	r7,sp
8002c00a:	48 76       	lddpc	r6,8002c024 <board_init+0x20>
8002c00c:	1e 26       	rsub	r6,pc
		sizeof(AT45DBX_SPI_GPIO_MAP) / sizeof(AT45DBX_SPI_GPIO_MAP[0]));
#endif

	// Configure the pins connected to LEDs as output and set their default
	// initial state to high (LEDs off).        
	gpio_configure_pin(LED0_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_LOW);
8002c00e:	30 1b       	mov	r11,1
8002c010:	32 0c       	mov	r12,32
8002c012:	f0 16 00 39 	mcall	r6[228]
	gpio_configure_pin(LED1_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_LOW);
8002c016:	30 1b       	mov	r11,1
8002c018:	32 1c       	mov	r12,33
8002c01a:	f0 16 00 39 	mcall	r6[228]
  };

  // TWI gpio pins cofiguration
  gpio_enable_module(TWI_GPIO_MAP, sizeof(TWI_GPIO_MAP) / sizeof(TWI_GPIO_MAP[0]));
#endif
}
8002c01e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002c022:	00 00       	add	r0,r0
8002c024:	80 02       	ld.sh	r2,r0[0x0]
8002c026:	be 90       	st.b	pc[0x1],r0

8002c028 <cpu_irq_save>:
#endif

typedef uint32_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
8002c028:	eb cd 40 80 	pushm	r7,lr
8002c02c:	1a 97       	mov	r7,sp
8002c02e:	20 1d       	sub	sp,4
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8002c030:	e1 b8 00 00 	mfsr	r8,0x0
8002c034:	ef 48 ff fc 	st.w	r7[-4],r8
	cpu_irq_disable();
8002c038:	d3 03       	ssrf	0x10

	return flags;
8002c03a:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8002c03e:	10 9c       	mov	r12,r8
8002c040:	2f fd       	sub	sp,-4
8002c042:	e3 cd 80 80 	ldm	sp++,r7,pc

8002c046 <cpu_irq_restore>:
{
	return !(flags & AVR32_SR_GM_MASK);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
8002c046:	eb cd 40 80 	pushm	r7,lr
8002c04a:	1a 97       	mov	r7,sp
8002c04c:	20 1d       	sub	sp,4
8002c04e:	ef 4c ff fc 	st.w	r7[-4],r12
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
8002c052:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c056:	e3 b8 00 00 	mtsr	0x0,r8
#endif
	barrier();
}
8002c05a:	2f fd       	sub	sp,-4
8002c05c:	e3 cd 80 80 	ldm	sp++,r7,pc

8002c060 <osc_priv_enable_osc0>:
 */
#include <osc.h>

#ifdef BOARD_OSC0_HZ
void osc_priv_enable_osc0(void)
{
8002c060:	eb cd 40 c0 	pushm	r6-r7,lr
8002c064:	1a 97       	mov	r7,sp
8002c066:	20 1d       	sub	sp,4
8002c068:	48 c6       	lddpc	r6,8002c098 <osc_priv_enable_osc0+0x38>
8002c06a:	1e 26       	rsub	r6,pc
	irqflags_t flags;

	flags = cpu_irq_save();
8002c06c:	cd ef       	rcall	8002c028 <cpu_irq_save>
8002c06e:	18 98       	mov	r8,r12
8002c070:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_SCIF.unlock = 0xaa000000 | AVR32_SCIF_OSCCTRL;
8002c074:	fe 78 08 00 	mov	r8,-63488
8002c078:	32 49       	mov	r9,36
8002c07a:	ea 19 aa 00 	orh	r9,0xaa00
8002c07e:	91 69       	st.w	r8[0x18],r9
	AVR32_SCIF.oscctrl[0] =
8002c080:	fe 78 08 00 	mov	r8,-63488
8002c084:	e0 79 0c 07 	mov	r9,68615
8002c088:	91 99       	st.w	r8[0x24],r9
			(OSC0_STARTUP_VALUE << AVR32_SCIF_OSCCTRL_STARTUP)
			| (OSC0_GAIN_VALUE << AVR32_SCIF_OSCCTRL_GAIN)
			| (OSC0_MODE_VALUE << AVR32_SCIF_OSCCTRL_MODE)
			| (1U << AVR32_SCIF_OSCCTRL_OSCEN);
	cpu_irq_restore(flags);
8002c08a:	ee fc ff fc 	ld.w	r12,r7[-4]
8002c08e:	cd cf       	rcall	8002c046 <cpu_irq_restore>
}
8002c090:	2f fd       	sub	sp,-4
8002c092:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002c096:	00 00       	add	r0,r0
8002c098:	80 02       	ld.sh	r2,r0[0x0]
8002c09a:	be ee       	st.b	pc[0x6],lr

8002c09c <osc_priv_disable_osc0>:

void osc_priv_disable_osc0(void)
{
8002c09c:	eb cd 40 c0 	pushm	r6-r7,lr
8002c0a0:	1a 97       	mov	r7,sp
8002c0a2:	20 1d       	sub	sp,4
8002c0a4:	48 b6       	lddpc	r6,8002c0d0 <osc_priv_disable_osc0+0x34>
8002c0a6:	1e 26       	rsub	r6,pc
	irqflags_t flags;

	flags = cpu_irq_save();
8002c0a8:	cc 0f       	rcall	8002c028 <cpu_irq_save>
8002c0aa:	18 98       	mov	r8,r12
8002c0ac:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_SCIF.unlock = 0xaa000000 | AVR32_SCIF_OSCCTRL;
8002c0b0:	fe 78 08 00 	mov	r8,-63488
8002c0b4:	32 49       	mov	r9,36
8002c0b6:	ea 19 aa 00 	orh	r9,0xaa00
8002c0ba:	91 69       	st.w	r8[0x18],r9
	AVR32_SCIF.oscctrl[0] = 0;
8002c0bc:	fe 78 08 00 	mov	r8,-63488
8002c0c0:	30 09       	mov	r9,0
8002c0c2:	91 99       	st.w	r8[0x24],r9
	cpu_irq_restore(flags);
8002c0c4:	ee fc ff fc 	ld.w	r12,r7[-4]
8002c0c8:	cb ff       	rcall	8002c046 <cpu_irq_restore>
}
8002c0ca:	2f fd       	sub	sp,-4
8002c0cc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002c0d0:	80 02       	ld.sh	r2,r0[0x0]
8002c0d2:	bf 2a       	st.d	pc++,r10

8002c0d4 <osc_priv_enable_osc32>:
}
#endif /* BOARD_OSC0_HZ */

#ifdef BOARD_OSC32_HZ
void osc_priv_enable_osc32(void)
{
8002c0d4:	eb cd 40 c0 	pushm	r6-r7,lr
8002c0d8:	1a 97       	mov	r7,sp
8002c0da:	20 1d       	sub	sp,4
8002c0dc:	48 c6       	lddpc	r6,8002c10c <osc_priv_enable_osc32+0x38>
8002c0de:	1e 26       	rsub	r6,pc
	irqflags_t flags;

	flags = cpu_irq_save();
8002c0e0:	ca 4f       	rcall	8002c028 <cpu_irq_save>
8002c0e2:	18 98       	mov	r8,r12
8002c0e4:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_SCIF.unlock = 0xaa000000 | AVR32_SCIF_OSCCTRL32;
8002c0e8:	fe 78 08 00 	mov	r8,-63488
8002c0ec:	34 c9       	mov	r9,76
8002c0ee:	ea 19 aa 00 	orh	r9,0xaa00
8002c0f2:	91 69       	st.w	r8[0x18],r9
	AVR32_SCIF.oscctrl32 =
8002c0f4:	fe 78 08 00 	mov	r8,-63488
8002c0f8:	e2 69 01 01 	mov	r9,131329
8002c0fc:	f1 49 00 4c 	st.w	r8[76],r9
			(OSC32_STARTUP_VALUE << AVR32_SCIF_OSCCTRL32_STARTUP)
			| (OSC32_MODE_VALUE << AVR32_SCIF_OSCCTRL32_MODE)
			| (1U << AVR32_SCIF_OSCCTRL32_OSC32EN);
	cpu_irq_restore(flags);
8002c100:	ee fc ff fc 	ld.w	r12,r7[-4]
8002c104:	ca 1f       	rcall	8002c046 <cpu_irq_restore>
}
8002c106:	2f fd       	sub	sp,-4
8002c108:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002c10c:	80 02       	ld.sh	r2,r0[0x0]
8002c10e:	bf 62       	lsl	r2,0x1e

8002c110 <osc_priv_disable_osc32>:

void osc_priv_disable_osc32(void)
{
8002c110:	eb cd 40 c0 	pushm	r6-r7,lr
8002c114:	1a 97       	mov	r7,sp
8002c116:	20 1d       	sub	sp,4
8002c118:	48 c6       	lddpc	r6,8002c148 <osc_priv_disable_osc32+0x38>
8002c11a:	1e 26       	rsub	r6,pc
	irqflags_t flags;

	flags = cpu_irq_save();
8002c11c:	c8 6f       	rcall	8002c028 <cpu_irq_save>
8002c11e:	18 98       	mov	r8,r12
8002c120:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_SCIF.unlock = 0xaa000000 | AVR32_SCIF_OSCCTRL32;
8002c124:	fe 78 08 00 	mov	r8,-63488
8002c128:	34 c9       	mov	r9,76
8002c12a:	ea 19 aa 00 	orh	r9,0xaa00
8002c12e:	91 69       	st.w	r8[0x18],r9
	AVR32_SCIF.oscctrl32 = 0;
8002c130:	fe 78 08 00 	mov	r8,-63488
8002c134:	30 09       	mov	r9,0
8002c136:	f1 49 00 4c 	st.w	r8[76],r9
	cpu_irq_restore(flags);
8002c13a:	ee fc ff fc 	ld.w	r12,r7[-4]
8002c13e:	c8 4f       	rcall	8002c046 <cpu_irq_restore>
}
8002c140:	2f fd       	sub	sp,-4
8002c142:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002c146:	00 00       	add	r0,r0
8002c148:	80 02       	ld.sh	r2,r0[0x0]
8002c14a:	bf 9e       	lsr	lr,0x1f

8002c14c <osc_priv_enable_rc8m>:
#endif /* BOARD_OSC0_HZ */

void osc_priv_enable_rc8m(void)
{
8002c14c:	eb cd 40 c0 	pushm	r6-r7,lr
8002c150:	1a 97       	mov	r7,sp
8002c152:	20 3d       	sub	sp,12
8002c154:	49 d6       	lddpc	r6,8002c1c8 <osc_priv_enable_rc8m+0x7c>
8002c156:	1e 26       	rsub	r6,pc
	irqflags_t flags;
	uint32_t   rccr8;
    uint32_t* calibration_bits = (uint32_t*)0x80800200;
8002c158:	e0 68 02 00 	mov	r8,512
8002c15c:	ea 18 80 80 	orh	r8,0x8080
8002c160:	ef 48 ff fc 	st.w	r7[-4],r8
	/* Wait for the CALIB field to be updated from fuses after reset */
	while (!(AVR32_SCIF.rccr8 & AVR32_SCIF_RCCR8_FCD_MASK)) {
8002c164:	fe 78 08 00 	mov	r8,-63488
8002c168:	71 28       	ld.w	r8,r8[0x48]
8002c16a:	e6 18 00 01 	andh	r8,0x1,COH
8002c16e:	cf b0       	breq	8002c164 <osc_priv_enable_rc8m+0x18>
		/* Do nothing */
	}

	/* Enable the oscillator without touching the CALIB and FCD fields */
	flags = cpu_irq_save();
8002c170:	c5 cf       	rcall	8002c028 <cpu_irq_save>
8002c172:	18 98       	mov	r8,r12
8002c174:	ef 48 ff f4 	st.w	r7[-12],r8
	rccr8 = AVR32_SCIF.rccr8;
8002c178:	fe 78 08 00 	mov	r8,-63488
8002c17c:	71 28       	ld.w	r8,r8[0x48]
8002c17e:	ef 48 ff f8 	st.w	r7[-8],r8
	rccr8 &= AVR32_SCIF_RCCR8_FCD_MASK | ((*calibration_bits)&AVR32_SCIF_RCCR8_CALIB_MASK);
8002c182:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c186:	70 08       	ld.w	r8,r8[0x0]
8002c188:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
8002c18c:	b1 a8       	sbr	r8,0x10
8002c18e:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002c192:	f3 e8 00 08 	and	r8,r9,r8
8002c196:	ef 48 ff f8 	st.w	r7[-8],r8
	rccr8 |= 1U << AVR32_SCIF_RCOSC8_EN;
8002c19a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c19e:	b9 a8       	sbr	r8,0x18
8002c1a0:	ef 48 ff f8 	st.w	r7[-8],r8
	AVR32_SCIF.unlock = 0xaa000000 | AVR32_SCIF_RCCR8;
8002c1a4:	fe 78 08 00 	mov	r8,-63488
8002c1a8:	34 89       	mov	r9,72
8002c1aa:	ea 19 aa 00 	orh	r9,0xaa00
8002c1ae:	91 69       	st.w	r8[0x18],r9
	AVR32_SCIF.rccr8 = rccr8;
8002c1b0:	fe 78 08 00 	mov	r8,-63488
8002c1b4:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002c1b8:	f1 49 00 48 	st.w	r8[72],r9
	cpu_irq_restore(flags);
8002c1bc:	ee fc ff f4 	ld.w	r12,r7[-12]
8002c1c0:	c4 3f       	rcall	8002c046 <cpu_irq_restore>
}
8002c1c2:	2f dd       	sub	sp,-12
8002c1c4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002c1c8:	80 02       	ld.sh	r2,r0[0x0]
8002c1ca:	bf da       	cbr	r10,0x1f

8002c1cc <osc_priv_disable_rc8m>:

void osc_priv_disable_rc8m(void)
{
8002c1cc:	eb cd 40 c0 	pushm	r6-r7,lr
8002c1d0:	1a 97       	mov	r7,sp
8002c1d2:	20 2d       	sub	sp,8
8002c1d4:	49 36       	lddpc	r6,8002c220 <osc_priv_disable_rc8m+0x54>
8002c1d6:	1e 26       	rsub	r6,pc
	irqflags_t flags;
	uint32_t   rccr8;

	/* Disable the oscillator without touching the CALIB and FCD fields */
	flags = cpu_irq_save();
8002c1d8:	c2 8f       	rcall	8002c028 <cpu_irq_save>
8002c1da:	18 98       	mov	r8,r12
8002c1dc:	ef 48 ff f8 	st.w	r7[-8],r8
	rccr8 = AVR32_SCIF.rccr8;
8002c1e0:	fe 78 08 00 	mov	r8,-63488
8002c1e4:	71 28       	ld.w	r8,r8[0x48]
8002c1e6:	ef 48 ff fc 	st.w	r7[-4],r8
	rccr8 &= AVR32_SCIF_RCCR8_FCD_MASK | AVR32_SCIF_RCCR8_CALIB_MASK;
8002c1ea:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c1ee:	e4 18 00 01 	andh	r8,0x1
8002c1f2:	e0 18 00 ff 	andl	r8,0xff
8002c1f6:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_SCIF.unlock = 0xaa000000 | AVR32_SCIF_RCCR8;
8002c1fa:	fe 78 08 00 	mov	r8,-63488
8002c1fe:	34 89       	mov	r9,72
8002c200:	ea 19 aa 00 	orh	r9,0xaa00
8002c204:	91 69       	st.w	r8[0x18],r9
	AVR32_SCIF.rccr8 = rccr8;
8002c206:	fe 78 08 00 	mov	r8,-63488
8002c20a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002c20e:	f1 49 00 48 	st.w	r8[72],r9
	cpu_irq_restore(flags);
8002c212:	ee fc ff f8 	ld.w	r12,r7[-8]
8002c216:	c1 8f       	rcall	8002c046 <cpu_irq_restore>
}
8002c218:	2f ed       	sub	sp,-8
8002c21a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002c21e:	00 00       	add	r0,r0
8002c220:	80 02       	ld.sh	r2,r0[0x0]
8002c222:	c0 5a       	rjmp	8002be2c <usart_get_echo_line+0x74>

8002c224 <osc_priv_enable_rc120m>:

void osc_priv_enable_rc120m(void)
{
8002c224:	eb cd 40 c0 	pushm	r6-r7,lr
8002c228:	1a 97       	mov	r7,sp
8002c22a:	20 1d       	sub	sp,4
8002c22c:	48 c6       	lddpc	r6,8002c25c <osc_priv_enable_rc120m+0x38>
8002c22e:	1e 26       	rsub	r6,pc
	irqflags_t flags;

	flags = cpu_irq_save();
8002c230:	cf ce       	rcall	8002c028 <cpu_irq_save>
8002c232:	18 98       	mov	r8,r12
8002c234:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_SCIF.unlock = 0xaa000000 | AVR32_SCIF_RC120MCR;
8002c238:	fe 78 08 00 	mov	r8,-63488
8002c23c:	35 89       	mov	r9,88
8002c23e:	ea 19 aa 00 	orh	r9,0xaa00
8002c242:	91 69       	st.w	r8[0x18],r9
	AVR32_SCIF.rc120mcr = 1U << AVR32_SCIF_RC120MCR_EN;
8002c244:	fe 78 08 00 	mov	r8,-63488
8002c248:	30 19       	mov	r9,1
8002c24a:	f1 49 00 58 	st.w	r8[88],r9
	cpu_irq_restore(flags);
8002c24e:	ee fc ff fc 	ld.w	r12,r7[-4]
8002c252:	cf ae       	rcall	8002c046 <cpu_irq_restore>
}
8002c254:	2f fd       	sub	sp,-4
8002c256:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002c25a:	00 00       	add	r0,r0
8002c25c:	80 02       	ld.sh	r2,r0[0x0]
8002c25e:	c0 b2       	brcc	8002c274 <osc_priv_disable_rc120m+0x14>

8002c260 <osc_priv_disable_rc120m>:

void osc_priv_disable_rc120m(void)
{
8002c260:	eb cd 40 c0 	pushm	r6-r7,lr
8002c264:	1a 97       	mov	r7,sp
8002c266:	20 1d       	sub	sp,4
8002c268:	48 c6       	lddpc	r6,8002c298 <osc_priv_disable_rc120m+0x38>
8002c26a:	1e 26       	rsub	r6,pc
	irqflags_t flags;

	flags = cpu_irq_save();
8002c26c:	cd ee       	rcall	8002c028 <cpu_irq_save>
8002c26e:	18 98       	mov	r8,r12
8002c270:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_SCIF.unlock = 0xaa000000 | AVR32_SCIF_RC120MCR;
8002c274:	fe 78 08 00 	mov	r8,-63488
8002c278:	35 89       	mov	r9,88
8002c27a:	ea 19 aa 00 	orh	r9,0xaa00
8002c27e:	91 69       	st.w	r8[0x18],r9
	AVR32_SCIF.rc120mcr = 0;
8002c280:	fe 78 08 00 	mov	r8,-63488
8002c284:	30 09       	mov	r9,0
8002c286:	f1 49 00 58 	st.w	r8[88],r9
	cpu_irq_restore(flags);
8002c28a:	ee fc ff fc 	ld.w	r12,r7[-4]
8002c28e:	cd ce       	rcall	8002c046 <cpu_irq_restore>
}
8002c290:	2f fd       	sub	sp,-4
8002c292:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002c296:	00 00       	add	r0,r0
8002c298:	80 02       	ld.sh	r2,r0[0x0]
8002c29a:	c0 ee       	rcall	8002beb6 <delay_ms+0x56>

8002c29c <cpu_irq_save>:
#endif

typedef uint32_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
8002c29c:	eb cd 40 80 	pushm	r7,lr
8002c2a0:	1a 97       	mov	r7,sp
8002c2a2:	20 1d       	sub	sp,4
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8002c2a4:	e1 b8 00 00 	mfsr	r8,0x0
8002c2a8:	ef 48 ff fc 	st.w	r7[-4],r8
	cpu_irq_disable();
8002c2ac:	d3 03       	ssrf	0x10

	return flags;
8002c2ae:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8002c2b2:	10 9c       	mov	r12,r8
8002c2b4:	2f fd       	sub	sp,-4
8002c2b6:	e3 cd 80 80 	ldm	sp++,r7,pc

8002c2ba <cpu_irq_restore>:
{
	return !(flags & AVR32_SR_GM_MASK);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
8002c2ba:	eb cd 40 80 	pushm	r7,lr
8002c2be:	1a 97       	mov	r7,sp
8002c2c0:	20 1d       	sub	sp,4
8002c2c2:	ef 4c ff fc 	st.w	r7[-4],r12
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
8002c2c6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c2ca:	e3 b8 00 00 	mtsr	0x0,r8
#endif
	barrier();
}
8002c2ce:	2f fd       	sub	sp,-4
8002c2d0:	e3 cd 80 80 	ldm	sp++,r7,pc

8002c2d4 <pll_config_write>:
#include <avr32/io.h>
#include <compiler.h>
#include <pll.h>

void pll_config_write(const struct pll_config *cfg, unsigned int pll_id)
{
8002c2d4:	eb cd 40 c0 	pushm	r6-r7,lr
8002c2d8:	1a 97       	mov	r7,sp
8002c2da:	20 3d       	sub	sp,12
8002c2dc:	49 26       	lddpc	r6,8002c324 <pll_config_write+0x50>
8002c2de:	1e 26       	rsub	r6,pc
8002c2e0:	ef 4c ff f8 	st.w	r7[-8],r12
8002c2e4:	ef 4b ff f4 	st.w	r7[-12],r11
	irqflags_t flags;

	Assert(pll_id < NR_PLLS);

	flags = cpu_irq_save();
8002c2e8:	cd af       	rcall	8002c29c <cpu_irq_save>
8002c2ea:	18 98       	mov	r8,r12
8002c2ec:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_SCIF.unlock = 0xaa000000 | (AVR32_SCIF_PLL + (4 * pll_id));
8002c2f0:	fe 78 08 00 	mov	r8,-63488
8002c2f4:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002c2f8:	2f 99       	sub	r9,-7
8002c2fa:	a3 69       	lsl	r9,0x2
8002c2fc:	ea 19 aa 00 	orh	r9,0xaa00
8002c300:	91 69       	st.w	r8[0x18],r9
	AVR32_SCIF.pll[pll_id] = cfg->ctrl;
8002c302:	fe 78 08 00 	mov	r8,-63488
8002c306:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002c30a:	ee fa ff f8 	ld.w	r10,r7[-8]
8002c30e:	74 0a       	ld.w	r10,r10[0x0]
8002c310:	2f 99       	sub	r9,-7
8002c312:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	cpu_irq_restore(flags);
8002c316:	ee fc ff fc 	ld.w	r12,r7[-4]
8002c31a:	cd 0f       	rcall	8002c2ba <cpu_irq_restore>
}
8002c31c:	2f dd       	sub	sp,-12
8002c31e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002c322:	00 00       	add	r0,r0
8002c324:	80 02       	ld.sh	r2,r0[0x0]
8002c326:	c1 62       	brcc	8002c352 <pll_enable+0x2a>

8002c328 <pll_enable>:

void pll_enable(const struct pll_config *cfg, unsigned int pll_id)
{
8002c328:	eb cd 40 c0 	pushm	r6-r7,lr
8002c32c:	1a 97       	mov	r7,sp
8002c32e:	20 3d       	sub	sp,12
8002c330:	49 26       	lddpc	r6,8002c378 <pll_enable+0x50>
8002c332:	1e 26       	rsub	r6,pc
8002c334:	ef 4c ff f8 	st.w	r7[-8],r12
8002c338:	ef 4b ff f4 	st.w	r7[-12],r11
	irqflags_t flags;

	Assert(pll_id < NR_PLLS);

	flags = cpu_irq_save();
8002c33c:	cb 0f       	rcall	8002c29c <cpu_irq_save>
8002c33e:	18 98       	mov	r8,r12
8002c340:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_SCIF.unlock = 0xaa000000 | (AVR32_SCIF_PLL + (4 * pll_id));
8002c344:	fe 78 08 00 	mov	r8,-63488
8002c348:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002c34c:	2f 99       	sub	r9,-7
8002c34e:	a3 69       	lsl	r9,0x2
8002c350:	ea 19 aa 00 	orh	r9,0xaa00
8002c354:	91 69       	st.w	r8[0x18],r9
	AVR32_SCIF.pll[pll_id] = cfg->ctrl | (1U << AVR32_SCIF_PLLEN);
8002c356:	fe 78 08 00 	mov	r8,-63488
8002c35a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002c35e:	ee fa ff f8 	ld.w	r10,r7[-8]
8002c362:	74 0a       	ld.w	r10,r10[0x0]
8002c364:	a1 aa       	sbr	r10,0x0
8002c366:	2f 99       	sub	r9,-7
8002c368:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	cpu_irq_restore(flags);
8002c36c:	ee fc ff fc 	ld.w	r12,r7[-4]
8002c370:	ca 5f       	rcall	8002c2ba <cpu_irq_restore>
}
8002c372:	2f dd       	sub	sp,-12
8002c374:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002c378:	80 02       	ld.sh	r2,r0[0x0]
8002c37a:	c1 b6       	brmi	8002c3b0 <pll_disable+0x34>

8002c37c <pll_disable>:

void pll_disable(unsigned int pll_id)
{
8002c37c:	eb cd 40 c0 	pushm	r6-r7,lr
8002c380:	1a 97       	mov	r7,sp
8002c382:	20 2d       	sub	sp,8
8002c384:	49 06       	lddpc	r6,8002c3c4 <pll_disable+0x48>
8002c386:	1e 26       	rsub	r6,pc
8002c388:	ef 4c ff f8 	st.w	r7[-8],r12
	irqflags_t flags;

	Assert(pll_id < NR_PLLS);

	flags = cpu_irq_save();
8002c38c:	c8 8f       	rcall	8002c29c <cpu_irq_save>
8002c38e:	18 98       	mov	r8,r12
8002c390:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_SCIF.unlock = 0xaa000000 | (AVR32_SCIF_PLL + (4 * pll_id));
8002c394:	fe 78 08 00 	mov	r8,-63488
8002c398:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002c39c:	2f 99       	sub	r9,-7
8002c39e:	a3 69       	lsl	r9,0x2
8002c3a0:	ea 19 aa 00 	orh	r9,0xaa00
8002c3a4:	91 69       	st.w	r8[0x18],r9
	AVR32_SCIF.pll[pll_id] = 0;
8002c3a6:	fe 78 08 00 	mov	r8,-63488
8002c3aa:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002c3ae:	2f 99       	sub	r9,-7
8002c3b0:	30 0a       	mov	r10,0
8002c3b2:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	cpu_irq_restore(flags);
8002c3b6:	ee fc ff fc 	ld.w	r12,r7[-4]
8002c3ba:	c8 0f       	rcall	8002c2ba <cpu_irq_restore>
}
8002c3bc:	2f ed       	sub	sp,-8
8002c3be:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002c3c2:	00 00       	add	r0,r0
8002c3c4:	80 02       	ld.sh	r2,r0[0x0]
8002c3c6:	c2 0a       	rjmp	8002c006 <board_init+0x2>

8002c3c8 <cpu_irq_save>:
#endif

typedef uint32_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
8002c3c8:	eb cd 40 80 	pushm	r7,lr
8002c3cc:	1a 97       	mov	r7,sp
8002c3ce:	20 1d       	sub	sp,4
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8002c3d0:	e1 b8 00 00 	mfsr	r8,0x0
8002c3d4:	ef 48 ff fc 	st.w	r7[-4],r8
	cpu_irq_disable();
8002c3d8:	d3 03       	ssrf	0x10

	return flags;
8002c3da:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8002c3de:	10 9c       	mov	r12,r8
8002c3e0:	2f fd       	sub	sp,-4
8002c3e2:	e3 cd 80 80 	ldm	sp++,r7,pc

8002c3e6 <cpu_irq_restore>:
{
	return !(flags & AVR32_SR_GM_MASK);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
8002c3e6:	eb cd 40 80 	pushm	r7,lr
8002c3ea:	1a 97       	mov	r7,sp
8002c3ec:	20 1d       	sub	sp,4
8002c3ee:	ef 4c ff fc 	st.w	r7[-4],r12
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
8002c3f2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c3f6:	e3 b8 00 00 	mtsr	0x0,r8
#endif
	barrier();
}
8002c3fa:	2f fd       	sub	sp,-4
8002c3fc:	e3 cd 80 80 	ldm	sp++,r7,pc

8002c400 <osc_enable>:
extern void osc_priv_enable_rc120m(void);
extern void osc_priv_disable_rc120m(void);
extern bool osc_priv_rc120m_is_ready(void);

static inline void osc_enable(uint8_t id)
{
8002c400:	eb cd 40 c0 	pushm	r6-r7,lr
8002c404:	1a 97       	mov	r7,sp
8002c406:	20 1d       	sub	sp,4
8002c408:	49 16       	lddpc	r6,8002c44c <osc_enable+0x4c>
8002c40a:	1e 26       	rsub	r6,pc
8002c40c:	18 98       	mov	r8,r12
8002c40e:	ef 68 ff fc 	st.b	r7[-4],r8
	switch (id) {
8002c412:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8002c416:	58 28       	cp.w	r8,2
8002c418:	c1 10       	breq	8002c43a <osc_enable+0x3a>
8002c41a:	e0 89 00 05 	brgt	8002c424 <osc_enable+0x24>
8002c41e:	58 08       	cp.w	r8,0
8002c420:	c0 70       	breq	8002c42e <osc_enable+0x2e>
8002c422:	c1 18       	rjmp	8002c444 <osc_enable+0x44>
8002c424:	58 38       	cp.w	r8,3
8002c426:	c0 70       	breq	8002c434 <osc_enable+0x34>
8002c428:	58 48       	cp.w	r8,4
8002c42a:	c0 b0       	breq	8002c440 <osc_enable+0x40>
8002c42c:	c0 c8       	rjmp	8002c444 <osc_enable+0x44>
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		osc_priv_enable_osc0();
8002c42e:	f0 16 01 db 	mcall	r6[1900]
		break;
8002c432:	c0 98       	rjmp	8002c444 <osc_enable+0x44>
		break;
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		osc_priv_enable_osc32();
8002c434:	f0 16 01 d2 	mcall	r6[1864]
		break;
8002c438:	c0 68       	rjmp	8002c444 <osc_enable+0x44>
#endif

	case OSC_ID_RC8M:
		osc_priv_enable_rc8m();
8002c43a:	f0 16 01 63 	mcall	r6[1420]
		break;
8002c43e:	c0 38       	rjmp	8002c444 <osc_enable+0x44>

	case OSC_ID_RC120M:
		osc_priv_enable_rc120m();
8002c440:	f0 16 01 90 	mcall	r6[1600]

	default:
		/* unhandled_case(id); */
		break;
	}
}
8002c444:	2f fd       	sub	sp,-4
8002c446:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002c44a:	00 00       	add	r0,r0
8002c44c:	80 02       	ld.sh	r2,r0[0x0]
8002c44e:	c2 8e       	rcall	8002c09e <osc_priv_disable_osc0+0x2>

8002c450 <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint8_t id)
{
8002c450:	eb cd 40 80 	pushm	r7,lr
8002c454:	1a 97       	mov	r7,sp
8002c456:	20 1d       	sub	sp,4
8002c458:	18 98       	mov	r8,r12
8002c45a:	ef 68 ff fc 	st.b	r7[-4],r8
	switch (id) {
8002c45e:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8002c462:	58 38       	cp.w	r8,3
8002c464:	c1 50       	breq	8002c48e <osc_is_ready+0x3e>
8002c466:	e0 89 00 07 	brgt	8002c474 <osc_is_ready+0x24>
8002c46a:	58 08       	cp.w	r8,0
8002c46c:	c0 90       	breq	8002c47e <osc_is_ready+0x2e>
8002c46e:	58 28       	cp.w	r8,2
8002c470:	c1 70       	breq	8002c49e <osc_is_ready+0x4e>
8002c472:	c2 88       	rjmp	8002c4c2 <osc_is_ready+0x72>
8002c474:	58 48       	cp.w	r8,4
8002c476:	c1 c0       	breq	8002c4ae <osc_is_ready+0x5e>
8002c478:	58 58       	cp.w	r8,5
8002c47a:	c2 20       	breq	8002c4be <osc_is_ready+0x6e>
8002c47c:	c2 38       	rjmp	8002c4c2 <osc_is_ready+0x72>
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return !!(AVR32_SCIF.pclksr & (1 << AVR32_SCIF_OSC0RDY));
8002c47e:	fe 78 08 00 	mov	r8,-63488
8002c482:	70 58       	ld.w	r8,r8[0x14]
8002c484:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002c488:	5f 18       	srne	r8
8002c48a:	5c 58       	castu.b	r8
8002c48c:	c1 c8       	rjmp	8002c4c4 <osc_is_ready+0x74>
		return !!(AVR32_SCIF.pclksr & (1 << AVR32_SCIF_OSC1RDY));
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		return !!(AVR32_SCIF.pclksr & (1 << AVR32_SCIF_OSC32RDY));
8002c48e:	fe 78 08 00 	mov	r8,-63488
8002c492:	70 58       	ld.w	r8,r8[0x14]
8002c494:	e2 18 00 04 	andl	r8,0x4,COH
8002c498:	5f 18       	srne	r8
8002c49a:	5c 58       	castu.b	r8
8002c49c:	c1 48       	rjmp	8002c4c4 <osc_is_ready+0x74>
#endif

	case OSC_ID_RC8M:
		return !!(AVR32_SCIF.pclksr & (1U << AVR32_SCIF_RCOSC8MRDY));
8002c49e:	fe 78 08 00 	mov	r8,-63488
8002c4a2:	70 58       	ld.w	r8,r8[0x14]
8002c4a4:	e2 18 00 08 	andl	r8,0x8,COH
8002c4a8:	5f 18       	srne	r8
8002c4aa:	5c 58       	castu.b	r8
8002c4ac:	c0 c8       	rjmp	8002c4c4 <osc_is_ready+0x74>

	case OSC_ID_RC120M:
		return !!(AVR32_SCIF.rc120mcr & (1 << AVR32_SCIF_RC120MCR_EN));
8002c4ae:	fe 78 08 00 	mov	r8,-63488
8002c4b2:	71 68       	ld.w	r8,r8[0x58]
8002c4b4:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002c4b8:	5f 18       	srne	r8
8002c4ba:	5c 58       	castu.b	r8
8002c4bc:	c0 48       	rjmp	8002c4c4 <osc_is_ready+0x74>

	case OSC_ID_RCSYS:
		/* RCSYS is always ready */
		return true;
8002c4be:	30 18       	mov	r8,1
8002c4c0:	c0 28       	rjmp	8002c4c4 <osc_is_ready+0x74>

	default:
		/* unhandled_case(id); */
		return false;
8002c4c2:	30 08       	mov	r8,0
	}
}
8002c4c4:	10 9c       	mov	r12,r8
8002c4c6:	2f fd       	sub	sp,-4
8002c4c8:	e3 cd 80 80 	ldm	sp++,r7,pc

8002c4cc <osc_get_rate>:
/**
 * \todo RC8M may run at either 8 MHz or 1 MHz. Currently, we assume
 * it's always running at 8 MHz.
 */
static inline uint32_t osc_get_rate(uint8_t id)
{
8002c4cc:	eb cd 40 80 	pushm	r7,lr
8002c4d0:	1a 97       	mov	r7,sp
8002c4d2:	20 1d       	sub	sp,4
8002c4d4:	18 98       	mov	r8,r12
8002c4d6:	ef 68 ff fc 	st.b	r7[-4],r8
	switch (id) {
8002c4da:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8002c4de:	58 38       	cp.w	r8,3
8002c4e0:	c1 20       	breq	8002c504 <osc_get_rate+0x38>
8002c4e2:	e0 89 00 07 	brgt	8002c4f0 <osc_get_rate+0x24>
8002c4e6:	58 08       	cp.w	r8,0
8002c4e8:	c0 90       	breq	8002c4fa <osc_get_rate+0x2e>
8002c4ea:	58 28       	cp.w	r8,2
8002c4ec:	c0 f0       	breq	8002c50a <osc_get_rate+0x3e>
8002c4ee:	c1 b8       	rjmp	8002c524 <osc_get_rate+0x58>
8002c4f0:	58 48       	cp.w	r8,4
8002c4f2:	c1 10       	breq	8002c514 <osc_get_rate+0x48>
8002c4f4:	58 58       	cp.w	r8,5
8002c4f6:	c1 40       	breq	8002c51e <osc_get_rate+0x52>
8002c4f8:	c1 68       	rjmp	8002c524 <osc_get_rate+0x58>
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return BOARD_OSC0_HZ;
8002c4fa:	e0 68 24 00 	mov	r8,9216
8002c4fe:	ea 18 00 f4 	orh	r8,0xf4
8002c502:	c1 28       	rjmp	8002c526 <osc_get_rate+0x5a>
		return BOARD_OSC1_HZ;
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		return BOARD_OSC32_HZ;
8002c504:	e0 68 80 00 	mov	r8,32768
8002c508:	c0 f8       	rjmp	8002c526 <osc_get_rate+0x5a>
#endif

	case OSC_ID_RC8M:
		return OSC_RC8M_NOMINAL_HZ;
8002c50a:	e0 68 12 00 	mov	r8,4608
8002c50e:	ea 18 00 7a 	orh	r8,0x7a
8002c512:	c0 a8       	rjmp	8002c526 <osc_get_rate+0x5a>

	case OSC_ID_RC120M:
		return OSC_RC120M_NOMINAL_HZ;
8002c514:	e0 68 0e 00 	mov	r8,3584
8002c518:	ea 18 07 27 	orh	r8,0x727
8002c51c:	c0 58       	rjmp	8002c526 <osc_get_rate+0x5a>

	case OSC_ID_RCSYS:
		return OSC_RCSYS_NOMINAL_HZ;
8002c51e:	e0 78 c1 38 	mov	r8,115000
8002c522:	c0 28       	rjmp	8002c526 <osc_get_rate+0x5a>

	default:
		/* unhandled_case(id); */
		return 0;
8002c524:	30 08       	mov	r8,0
	}
}
8002c526:	10 9c       	mov	r12,r8
8002c528:	2f fd       	sub	sp,-4
8002c52a:	e3 cd 80 80 	ldm	sp++,r7,pc

8002c52e <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
8002c52e:	eb cd 40 c0 	pushm	r6-r7,lr
8002c532:	1a 97       	mov	r7,sp
8002c534:	20 1d       	sub	sp,4
8002c536:	48 96       	lddpc	r6,8002c558 <osc_wait_ready+0x2a>
8002c538:	1e 26       	rsub	r6,pc
8002c53a:	18 98       	mov	r8,r12
8002c53c:	ef 68 ff fc 	st.b	r7[-4],r8
	while (!osc_is_ready(id)) {
8002c540:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8002c544:	10 9c       	mov	r12,r8
8002c546:	c8 5f       	rcall	8002c450 <osc_is_ready>
8002c548:	18 98       	mov	r8,r12
8002c54a:	ec 18 00 01 	eorl	r8,0x1
8002c54e:	5c 58       	castu.b	r8
8002c550:	cf 81       	brne	8002c540 <osc_wait_ready+0x12>
		/* Do nothing */
	}
}
8002c552:	2f fd       	sub	sp,-4
8002c554:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002c558:	80 02       	ld.sh	r2,r0[0x0]
8002c55a:	c3 bc       	rcall	8002c5d0 <pll_config_init+0x44>

8002c55c <pll_config_set_option>:
			* CONFIG_PLL##pll_id##_MUL)                            \
			/ CONFIG_PLL##pll_id##_DIV)

static inline void pll_config_set_option(struct pll_config *cfg,
		unsigned int option)
{
8002c55c:	eb cd 40 80 	pushm	r7,lr
8002c560:	1a 97       	mov	r7,sp
8002c562:	20 2d       	sub	sp,8
8002c564:	ef 4c ff fc 	st.w	r7[-4],r12
8002c568:	ef 4b ff f8 	st.w	r7[-8],r11
	Assert(option < PLL_NR_OPTIONS);

	cfg->ctrl |= 1U << (AVR32_SCIF_PLLOPT + option);
8002c56c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c570:	70 09       	ld.w	r9,r8[0x0]
8002c572:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c576:	2f d8       	sub	r8,-3
8002c578:	30 1a       	mov	r10,1
8002c57a:	f4 08 09 48 	lsl	r8,r10,r8
8002c57e:	10 49       	or	r9,r8
8002c580:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c584:	91 09       	st.w	r8[0x0],r9
}
8002c586:	2f ed       	sub	sp,-8
8002c588:	e3 cd 80 80 	ldm	sp++,r7,pc

8002c58c <pll_config_init>:
 * The PLL options #PLL_OPT_VCO_RANGE_LOW and #PLL_OPT_OUTPUT_DIV will
 * be set automatically based on the calculated target frequency.
 */
static inline void pll_config_init(struct pll_config *cfg,
		enum pll_source src, unsigned int div, unsigned int mul)
{
8002c58c:	eb cd 40 c0 	pushm	r6-r7,lr
8002c590:	1a 97       	mov	r7,sp
8002c592:	20 5d       	sub	sp,20
8002c594:	4b 46       	lddpc	r6,8002c664 <pll_config_init+0xd8>
8002c596:	1e 26       	rsub	r6,pc
8002c598:	ef 4c ff f8 	st.w	r7[-8],r12
8002c59c:	ef 4b ff f4 	st.w	r7[-12],r11
8002c5a0:	ef 4a ff f0 	st.w	r7[-16],r10
8002c5a4:	ef 49 ff ec 	st.w	r7[-20],r9
	uint32_t vco_hz;

	Assert(src < PLL_NR_SOURCES);

	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(src) * mul;
8002c5a8:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002c5ac:	5c 58       	castu.b	r8
8002c5ae:	10 9c       	mov	r12,r8
8002c5b0:	c8 ef       	rcall	8002c4cc <osc_get_rate>
8002c5b2:	18 99       	mov	r9,r12
8002c5b4:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002c5b8:	f2 08 02 48 	mul	r8,r9,r8
8002c5bc:	ef 48 ff fc 	st.w	r7[-4],r8
	vco_hz /= div;
8002c5c0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c5c4:	ee f9 ff f0 	ld.w	r9,r7[-16]
8002c5c8:	f0 09 0d 08 	divu	r8,r8,r9
8002c5cc:	ef 48 ff fc 	st.w	r7[-4],r8
	Assert(vco_hz >= PLL_MIN_HZ);
	Assert(vco_hz <= PLL_MAX_HZ);

	cfg->ctrl = 0;
8002c5d0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c5d4:	30 09       	mov	r9,0
8002c5d6:	91 09       	st.w	r8[0x0],r9

	/* Bring the internal VCO frequency up to the minimum value */
	if ((vco_hz < PLL_MIN_HZ * 2) && (mul <= 8)) {
8002c5d8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c5dc:	e0 69 b3 ff 	mov	r9,46079
8002c5e0:	ea 19 04 c4 	orh	r9,0x4c4
8002c5e4:	12 38       	cp.w	r8,r9
8002c5e6:	e0 8b 00 15 	brhi	8002c610 <pll_config_init+0x84>
8002c5ea:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002c5ee:	58 88       	cp.w	r8,8
8002c5f0:	e0 8b 00 10 	brhi	8002c610 <pll_config_init+0x84>
		mul *= 2;
8002c5f4:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002c5f8:	a1 78       	lsl	r8,0x1
8002c5fa:	ef 48 ff ec 	st.w	r7[-20],r8
		vco_hz *= 2;
8002c5fe:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c602:	a1 78       	lsl	r8,0x1
8002c604:	ef 48 ff fc 	st.w	r7[-4],r8
		pll_config_set_option(cfg, PLL_OPT_OUTPUT_DIV);
8002c608:	30 1b       	mov	r11,1
8002c60a:	ee fc ff f8 	ld.w	r12,r7[-8]
8002c60e:	ca 7f       	rcall	8002c55c <pll_config_set_option>
	}

	/* Set VCO frequency range according to calculated value */
	if (vco_hz < PLL_VCO_LOW_THRESHOLD)
8002c610:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c614:	e0 69 fe 7f 	mov	r9,65151
8002c618:	ea 19 0a 21 	orh	r9,0xa21
8002c61c:	12 38       	cp.w	r8,r9
8002c61e:	e0 8b 00 06 	brhi	8002c62a <pll_config_init+0x9e>
		pll_config_set_option(cfg, PLL_OPT_VCO_RANGE_LOW);
8002c622:	30 0b       	mov	r11,0
8002c624:	ee fc ff f8 	ld.w	r12,r7[-8]
8002c628:	c9 af       	rcall	8002c55c <pll_config_set_option>

	Assert(mul > 2 && mul <= 16);
	Assert(div > 0 && div <= 15);

	cfg->ctrl |= ((mul - 1) << AVR32_SCIF_PLLMUL)
8002c62a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c62e:	70 09       	ld.w	r9,r8[0x0]
8002c630:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002c634:	20 18       	sub	r8,1
8002c636:	f0 0a 15 10 	lsl	r10,r8,0x10
		| (div << AVR32_SCIF_PLLDIV)
8002c63a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002c63e:	a9 68       	lsl	r8,0x8
		| (PLL_MAX_STARTUP_CYCLES << AVR32_SCIF_PLLCOUNT)
8002c640:	10 4a       	or	r10,r8
		| (src << AVR32_SCIF_PLLOSC);
8002c642:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002c646:	a1 78       	lsl	r8,0x1
		pll_config_set_option(cfg, PLL_OPT_VCO_RANGE_LOW);

	Assert(mul > 2 && mul <= 16);
	Assert(div > 0 && div <= 15);

	cfg->ctrl |= ((mul - 1) << AVR32_SCIF_PLLMUL)
8002c648:	f5 e8 10 08 	or	r8,r10,r8
8002c64c:	f3 e8 10 08 	or	r8,r9,r8
8002c650:	10 99       	mov	r9,r8
8002c652:	ea 19 3f 00 	orh	r9,0x3f00
8002c656:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c65a:	91 09       	st.w	r8[0x0],r9
		| (div << AVR32_SCIF_PLLDIV)
		| (PLL_MAX_STARTUP_CYCLES << AVR32_SCIF_PLLCOUNT)
		| (src << AVR32_SCIF_PLLOSC);
}
8002c65c:	2f bd       	sub	sp,-20
8002c65e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002c662:	00 00       	add	r0,r0
8002c664:	80 02       	ld.sh	r2,r0[0x0]
8002c666:	c4 1a       	rjmp	8002c2e8 <pll_config_write+0x14>

8002c668 <pll_is_locked>:
extern void pll_config_write(const struct pll_config *cfg, unsigned int pll_id);
extern void pll_enable(const struct pll_config *cfg, unsigned int pll_id);
extern void pll_disable(unsigned int pll_id);

static inline bool pll_is_locked(unsigned int pll_id)
{
8002c668:	eb cd 40 80 	pushm	r7,lr
8002c66c:	1a 97       	mov	r7,sp
8002c66e:	20 1d       	sub	sp,4
8002c670:	ef 4c ff fc 	st.w	r7[-4],r12
	Assert(pll_id < NR_PLLS);

	return !!(AVR32_SCIF.pclksr & (1U << (AVR32_SCIF_PLL0_LOCK + pll_id)));
8002c674:	fe 78 08 00 	mov	r8,-63488
8002c678:	70 59       	ld.w	r9,r8[0x14]
8002c67a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c67e:	2f c8       	sub	r8,-4
8002c680:	30 1a       	mov	r10,1
8002c682:	f4 08 09 48 	lsl	r8,r10,r8
8002c686:	f3 e8 00 08 	and	r8,r9,r8
8002c68a:	5f 18       	srne	r8
8002c68c:	5c 58       	castu.b	r8
}
8002c68e:	10 9c       	mov	r12,r8
8002c690:	2f fd       	sub	sp,-4
8002c692:	e3 cd 80 80 	ldm	sp++,r7,pc

8002c696 <pll_enable_source_sync>:

static inline void pll_enable_source_sync(enum pll_source src)
{
8002c696:	eb cd 40 c0 	pushm	r6-r7,lr
8002c69a:	1a 97       	mov	r7,sp
8002c69c:	20 1d       	sub	sp,4
8002c69e:	49 06       	lddpc	r6,8002c6dc <pll_enable_source_sync+0x46>
8002c6a0:	1e 26       	rsub	r6,pc
8002c6a2:	ef 4c ff fc 	st.w	r7[-4],r12
	switch (src) {
8002c6a6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c6aa:	58 18       	cp.w	r8,1
8002c6ac:	e0 88 00 05 	brls	8002c6b6 <pll_enable_source_sync+0x20>
8002c6b0:	58 28       	cp.w	r8,2
8002c6b2:	c0 d0       	breq	8002c6cc <pll_enable_source_sync+0x36>
8002c6b4:	c1 08       	rjmp	8002c6d4 <pll_enable_source_sync+0x3e>
	case PLL_SRC_OSC0: /* Fall through */
	case PLL_SRC_OSC1:
		osc_enable(src);
8002c6b6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c6ba:	5c 58       	castu.b	r8
8002c6bc:	10 9c       	mov	r12,r8
8002c6be:	ca 1e       	rcall	8002c400 <osc_enable>
		osc_wait_ready(src);
8002c6c0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c6c4:	5c 58       	castu.b	r8
8002c6c6:	10 9c       	mov	r12,r8
8002c6c8:	c3 3f       	rcall	8002c52e <osc_wait_ready>
		break;
8002c6ca:	c0 58       	rjmp	8002c6d4 <pll_enable_source_sync+0x3e>

	case PLL_SRC_RC8M:
		osc_enable(OSC_ID_RC8M);
8002c6cc:	30 2c       	mov	r12,2
8002c6ce:	c9 9e       	rcall	8002c400 <osc_enable>
		osc_wait_ready(OSC_ID_RC8M);
8002c6d0:	30 2c       	mov	r12,2
8002c6d2:	c2 ef       	rcall	8002c52e <osc_wait_ready>

	default:
		// unhandled_case(src);
		break;
	}
}
8002c6d4:	2f fd       	sub	sp,-4
8002c6d6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002c6da:	00 00       	add	r0,r0
8002c6dc:	80 02       	ld.sh	r2,r0[0x0]
8002c6de:	c5 24       	brge	8002c782 <genclk_config_set_divider+0x24>

8002c6e0 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
8002c6e0:	eb cd 40 c0 	pushm	r6-r7,lr
8002c6e4:	1a 97       	mov	r7,sp
8002c6e6:	20 1d       	sub	sp,4
8002c6e8:	48 96       	lddpc	r6,8002c70c <pll_wait_for_lock+0x2c>
8002c6ea:	1e 26       	rsub	r6,pc
8002c6ec:	ef 4c ff fc 	st.w	r7[-4],r12
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
8002c6f0:	ee fc ff fc 	ld.w	r12,r7[-4]
8002c6f4:	cb af       	rcall	8002c668 <pll_is_locked>
8002c6f6:	18 98       	mov	r8,r12
8002c6f8:	ec 18 00 01 	eorl	r8,0x1
8002c6fc:	5c 58       	castu.b	r8
8002c6fe:	cf 91       	brne	8002c6f0 <pll_wait_for_lock+0x10>
		/* Do nothing */
	}

	return 0;
8002c700:	30 08       	mov	r8,0
}
8002c702:	10 9c       	mov	r12,r8
8002c704:	2f fd       	sub	sp,-4
8002c706:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002c70a:	00 00       	add	r0,r0
8002c70c:	80 02       	ld.sh	r2,r0[0x0]
8002c70e:	c5 6e       	rcall	8002c3ba <pll_disable+0x3e>

8002c710 <genclk_config_defaults>:
	uint32_t ctrl;
};

static inline void genclk_config_defaults(struct genclk_config *cfg,
		unsigned int id)
{
8002c710:	eb cd 40 80 	pushm	r7,lr
8002c714:	1a 97       	mov	r7,sp
8002c716:	20 2d       	sub	sp,8
8002c718:	ef 4c ff fc 	st.w	r7[-4],r12
8002c71c:	ef 4b ff f8 	st.w	r7[-8],r11
	cfg->ctrl = 0;
8002c720:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c724:	30 09       	mov	r9,0
8002c726:	91 09       	st.w	r8[0x0],r9
}
8002c728:	2f ed       	sub	sp,-8
8002c72a:	e3 cd 80 80 	ldm	sp++,r7,pc

8002c72e <genclk_config_set_source>:
	AVR32_SCIF.gcctrl[id] = cfg->ctrl;
}

static inline void genclk_config_set_source(struct genclk_config *cfg,
		enum genclk_source src)
{
8002c72e:	eb cd 40 80 	pushm	r7,lr
8002c732:	1a 97       	mov	r7,sp
8002c734:	20 2d       	sub	sp,8
8002c736:	ef 4c ff fc 	st.w	r7[-4],r12
8002c73a:	ef 4b ff f8 	st.w	r7[-8],r11
	cfg->ctrl = (cfg->ctrl & ~AVR32_SCIF_GCCTRL_OSCSEL_MASK)
8002c73e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c742:	70 08       	ld.w	r8,r8[0x0]
8002c744:	10 99       	mov	r9,r8
8002c746:	e0 19 f0 ff 	andl	r9,0xf0ff
			| (src << AVR32_SCIF_GCCTRL_OSCSEL);
8002c74a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c74e:	a9 68       	lsl	r8,0x8
}

static inline void genclk_config_set_source(struct genclk_config *cfg,
		enum genclk_source src)
{
	cfg->ctrl = (cfg->ctrl & ~AVR32_SCIF_GCCTRL_OSCSEL_MASK)
8002c750:	10 49       	or	r9,r8
8002c752:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c756:	91 09       	st.w	r8[0x0],r9
			| (src << AVR32_SCIF_GCCTRL_OSCSEL);
}
8002c758:	2f ed       	sub	sp,-8
8002c75a:	e3 cd 80 80 	ldm	sp++,r7,pc

8002c75e <genclk_config_set_divider>:

static inline void genclk_config_set_divider(struct genclk_config *cfg,
		unsigned int divider)
{
8002c75e:	eb cd 40 80 	pushm	r7,lr
8002c762:	1a 97       	mov	r7,sp
8002c764:	20 2d       	sub	sp,8
8002c766:	ef 4c ff fc 	st.w	r7[-4],r12
8002c76a:	ef 4b ff f8 	st.w	r7[-8],r11
	Assert(divider > 0 && divider <= GENCLK_DIV_MAX);

	/* Clear all the bits we're about to modify */
	cfg->ctrl &= ~(AVR32_SCIF_GCCTRL_DIVEN_MASK
8002c76e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c772:	70 08       	ld.w	r8,r8[0x0]
8002c774:	10 99       	mov	r9,r8
8002c776:	e4 19 ff 00 	andh	r9,0xff00
8002c77a:	e0 19 ff fd 	andl	r9,0xfffd
8002c77e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c782:	91 09       	st.w	r8[0x0],r9
			| AVR32_SCIF_GCCTRL_DIV_MASK);

	if (divider > 1) {
8002c784:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c788:	58 18       	cp.w	r8,1
8002c78a:	e0 88 00 17 	brls	8002c7b8 <genclk_config_set_divider+0x5a>
		cfg->ctrl |= 1U << AVR32_SCIF_GCCTRL_DIVEN;
8002c78e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c792:	70 08       	ld.w	r8,r8[0x0]
8002c794:	10 99       	mov	r9,r8
8002c796:	a1 b9       	sbr	r9,0x1
8002c798:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c79c:	91 09       	st.w	r8[0x0],r9
		cfg->ctrl |= (((divider + 1) / 2) - 1) << AVR32_SCIF_GCCTRL_DIV;
8002c79e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c7a2:	70 09       	ld.w	r9,r8[0x0]
8002c7a4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c7a8:	2f f8       	sub	r8,-1
8002c7aa:	a1 98       	lsr	r8,0x1
8002c7ac:	20 18       	sub	r8,1
8002c7ae:	b1 68       	lsl	r8,0x10
8002c7b0:	10 49       	or	r9,r8
8002c7b2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c7b6:	91 09       	st.w	r8[0x0],r9
	}
}
8002c7b8:	2f ed       	sub	sp,-8
8002c7ba:	e3 cd 80 80 	ldm	sp++,r7,pc

8002c7be <genclk_enable>:

static inline void genclk_enable(const struct genclk_config *cfg,
		unsigned int id)
{
8002c7be:	eb cd 40 80 	pushm	r7,lr
8002c7c2:	1a 97       	mov	r7,sp
8002c7c4:	20 2d       	sub	sp,8
8002c7c6:	ef 4c ff fc 	st.w	r7[-4],r12
8002c7ca:	ef 4b ff f8 	st.w	r7[-8],r11
	AVR32_SCIF.gcctrl[id] = cfg->ctrl | (1U << AVR32_SCIF_GCCTRL_CEN);
8002c7ce:	fe 78 08 00 	mov	r8,-63488
8002c7d2:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002c7d6:	ee fa ff fc 	ld.w	r10,r7[-4]
8002c7da:	74 0a       	ld.w	r10,r10[0x0]
8002c7dc:	a1 aa       	sbr	r10,0x0
8002c7de:	2e 79       	sub	r9,-25
8002c7e0:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
}
8002c7e4:	2f ed       	sub	sp,-8
8002c7e6:	e3 cd 80 80 	ldm	sp++,r7,pc

8002c7ea <genclk_disable>:

static inline void genclk_disable(unsigned int id)
{
8002c7ea:	eb cd 40 80 	pushm	r7,lr
8002c7ee:	1a 97       	mov	r7,sp
8002c7f0:	20 1d       	sub	sp,4
8002c7f2:	ef 4c ff fc 	st.w	r7[-4],r12
	AVR32_SCIF.gcctrl[id] = 0;
8002c7f6:	fe 78 08 00 	mov	r8,-63488
8002c7fa:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002c7fe:	2e 79       	sub	r9,-25
8002c800:	30 0a       	mov	r10,0
8002c802:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
}
8002c806:	2f fd       	sub	sp,-4
8002c808:	e3 cd 80 80 	ldm	sp++,r7,pc

8002c80c <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern bool sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
8002c80c:	eb cd 40 c0 	pushm	r6-r7,lr
8002c810:	1a 97       	mov	r7,sp
8002c812:	48 56       	lddpc	r6,8002c824 <sysclk_get_main_hz+0x18>
8002c814:	1e 26       	rsub	r6,pc
		return BOARD_OSC1_HZ;
#endif

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLL0:
		return pll_get_default_rate(0);
8002c816:	30 0c       	mov	r12,0
8002c818:	c5 ae       	rcall	8002c4cc <osc_get_rate>
8002c81a:	18 98       	mov	r8,r12
8002c81c:	a3 68       	lsl	r8,0x2

	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
8002c81e:	10 9c       	mov	r12,r8
8002c820:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002c824:	80 02       	ld.sh	r2,r0[0x0]
8002c826:	c6 98       	rjmp	8002c8f8 <sysclk_priv_disable_module+0x50>

8002c828 <sysclk_priv_enable_module>:
 * \param bus_id Bus index, given by the \c AVR32_PM_CLK_GRP_xxx definitions.
 * \param module_index Index of the module to be enabled. This is the
 * bit number in the corresponding xxxMASK register.
 */
void sysclk_priv_enable_module(unsigned int bus_id, unsigned int module_index)
{
8002c828:	eb cd 40 c0 	pushm	r6-r7,lr
8002c82c:	1a 97       	mov	r7,sp
8002c82e:	20 4d       	sub	sp,16
8002c830:	49 d6       	lddpc	r6,8002c8a4 <sysclk_priv_enable_module+0x7c>
8002c832:	1e 26       	rsub	r6,pc
8002c834:	ef 4c ff f4 	st.w	r7[-12],r12
8002c838:	ef 4b ff f0 	st.w	r7[-16],r11
	irqflags_t flags;
	uint32_t   mask;

	flags = cpu_irq_save();
8002c83c:	fe b0 fd c6 	rcall	8002c3c8 <cpu_irq_save>
8002c840:	18 98       	mov	r8,r12
8002c842:	ef 48 ff f8 	st.w	r7[-8],r8

	/* Enable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
8002c846:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002c84a:	a3 68       	lsl	r8,0x2
8002c84c:	e0 28 fb e0 	sub	r8,64480
8002c850:	70 08       	ld.w	r8,r8[0x0]
8002c852:	ef 48 ff fc 	st.w	r7[-4],r8
	mask |= 1U << module_index;
8002c856:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002c85a:	30 19       	mov	r9,1
8002c85c:	f2 08 09 48 	lsl	r8,r9,r8
8002c860:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002c864:	f3 e8 10 08 	or	r8,r9,r8
8002c868:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_PM.unlock = 0xaa000020 + (4 * bus_id);
8002c86c:	fe 78 04 00 	mov	r8,-64512
8002c870:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002c874:	f2 0a 15 02 	lsl	r10,r9,0x2
8002c878:	32 09       	mov	r9,32
8002c87a:	ea 19 aa 00 	orh	r9,0xaa00
8002c87e:	f4 09 00 09 	add	r9,r10,r9
8002c882:	f1 49 00 58 	st.w	r8[88],r9
	*(&AVR32_PM.cpumask + bus_id) = mask;
8002c886:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002c88a:	a3 68       	lsl	r8,0x2
8002c88c:	e0 28 fb e0 	sub	r8,64480
8002c890:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002c894:	91 09       	st.w	r8[0x0],r9

	cpu_irq_restore(flags);
8002c896:	ee fc ff f8 	ld.w	r12,r7[-8]
8002c89a:	fe b0 fd a6 	rcall	8002c3e6 <cpu_irq_restore>
}
8002c89e:	2f cd       	sub	sp,-16
8002c8a0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002c8a4:	80 02       	ld.sh	r2,r0[0x0]
8002c8a6:	c6 b6       	brmi	8002c97c <sysclk_set_prescalers+0x50>

8002c8a8 <sysclk_priv_disable_module>:
 * \param bus_id Bus index, given by the \c AVR32_PM_CLK_GRP_xxx definitions.
 * \param module_index Index of the module to be disabled. This is the
 * bit number in the corresponding xxxMASK register.
 */
void sysclk_priv_disable_module(unsigned int bus_id, unsigned int module_index)
{
8002c8a8:	eb cd 40 c0 	pushm	r6-r7,lr
8002c8ac:	1a 97       	mov	r7,sp
8002c8ae:	20 4d       	sub	sp,16
8002c8b0:	49 e6       	lddpc	r6,8002c928 <sysclk_priv_disable_module+0x80>
8002c8b2:	1e 26       	rsub	r6,pc
8002c8b4:	ef 4c ff f4 	st.w	r7[-12],r12
8002c8b8:	ef 4b ff f0 	st.w	r7[-16],r11
	irqflags_t flags;
	uint32_t   mask;

	flags = cpu_irq_save();
8002c8bc:	fe b0 fd 86 	rcall	8002c3c8 <cpu_irq_save>
8002c8c0:	18 98       	mov	r8,r12
8002c8c2:	ef 48 ff f8 	st.w	r7[-8],r8

	/* Disable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
8002c8c6:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002c8ca:	a3 68       	lsl	r8,0x2
8002c8cc:	e0 28 fb e0 	sub	r8,64480
8002c8d0:	70 08       	ld.w	r8,r8[0x0]
8002c8d2:	ef 48 ff fc 	st.w	r7[-4],r8
	mask &= ~(1U << module_index);
8002c8d6:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002c8da:	30 19       	mov	r9,1
8002c8dc:	f2 08 09 48 	lsl	r8,r9,r8
8002c8e0:	5c d8       	com	r8
8002c8e2:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002c8e6:	f3 e8 00 08 	and	r8,r9,r8
8002c8ea:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_PM.unlock = 0xaa000020 + (4 * bus_id);
8002c8ee:	fe 78 04 00 	mov	r8,-64512
8002c8f2:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002c8f6:	f2 0a 15 02 	lsl	r10,r9,0x2
8002c8fa:	32 09       	mov	r9,32
8002c8fc:	ea 19 aa 00 	orh	r9,0xaa00
8002c900:	f4 09 00 09 	add	r9,r10,r9
8002c904:	f1 49 00 58 	st.w	r8[88],r9
	*(&AVR32_PM.cpumask + bus_id) = mask;
8002c908:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002c90c:	a3 68       	lsl	r8,0x2
8002c90e:	e0 28 fb e0 	sub	r8,64480
8002c912:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002c916:	91 09       	st.w	r8[0x0],r9

	cpu_irq_restore(flags);
8002c918:	ee fc ff f8 	ld.w	r12,r7[-8]
8002c91c:	fe b0 fd 65 	rcall	8002c3e6 <cpu_irq_restore>
}
8002c920:	2f cd       	sub	sp,-16
8002c922:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002c926:	00 00       	add	r0,r0
8002c928:	80 02       	ld.sh	r2,r0[0x0]
8002c92a:	c7 36       	brmi	8002ca10 <sysclk_set_prescalers+0xe4>

8002c92c <sysclk_set_prescalers>:
 * \param pbc_shift The PBC clock will be divided by \f$2^{pbc\_shift}\f$
 */
void sysclk_set_prescalers(unsigned int cpu_shift,
		unsigned int pba_shift, unsigned int pbb_shift,
		unsigned int pbc_shift)
{
8002c92c:	eb cd 40 c0 	pushm	r6-r7,lr
8002c930:	1a 97       	mov	r7,sp
8002c932:	20 9d       	sub	sp,36
8002c934:	4b f6       	lddpc	r6,8002ca30 <sysclk_set_prescalers+0x104>
8002c936:	1e 26       	rsub	r6,pc
8002c938:	ef 4c ff e8 	st.w	r7[-24],r12
8002c93c:	ef 4b ff e4 	st.w	r7[-28],r11
8002c940:	ef 4a ff e0 	st.w	r7[-32],r10
8002c944:	ef 49 ff dc 	st.w	r7[-36],r9
	irqflags_t flags;
	uint32_t   cpu_cksel = 0;
8002c948:	30 08       	mov	r8,0
8002c94a:	ef 48 ff f0 	st.w	r7[-16],r8
	uint32_t   pba_cksel = 0;
8002c94e:	30 08       	mov	r8,0
8002c950:	ef 48 ff f4 	st.w	r7[-12],r8
	uint32_t   pbb_cksel = 0;
8002c954:	30 08       	mov	r8,0
8002c956:	ef 48 ff f8 	st.w	r7[-8],r8
	uint32_t   pbc_cksel = 0;
8002c95a:	30 08       	mov	r8,0
8002c95c:	ef 48 ff fc 	st.w	r7[-4],r8

	Assert(cpu_shift <= pba_shift);
	Assert(cpu_shift <= pbb_shift);

	if (cpu_shift > 0)
8002c960:	ee f8 ff e8 	ld.w	r8,r7[-24]
8002c964:	58 08       	cp.w	r8,0
8002c966:	c0 80       	breq	8002c976 <sysclk_set_prescalers+0x4a>
		cpu_cksel = ((cpu_shift - 1) << AVR32_PM_CPUSEL)
8002c968:	ee f8 ff e8 	ld.w	r8,r7[-24]
8002c96c:	20 18       	sub	r8,1
8002c96e:	a5 68       	lsl	r8,0x4
8002c970:	a7 b8       	sbr	r8,0x7
8002c972:	ef 48 ff f0 	st.w	r7[-16],r8
				| (1U << AVR32_PM_CPUDIV);

	if (pba_shift > 0)
8002c976:	ee f8 ff e4 	ld.w	r8,r7[-28]
8002c97a:	58 08       	cp.w	r8,0
8002c97c:	c0 80       	breq	8002c98c <sysclk_set_prescalers+0x60>
		pba_cksel = ((pba_shift - 1) << AVR32_PM_PBASEL)
8002c97e:	ee f8 ff e4 	ld.w	r8,r7[-28]
8002c982:	20 18       	sub	r8,1
8002c984:	ad 68       	lsl	r8,0xc
8002c986:	a7 b8       	sbr	r8,0x7
8002c988:	ef 48 ff f4 	st.w	r7[-12],r8
				| (1U << AVR32_PM_PBADIV);

	if (pbb_shift > 0)
8002c98c:	ee f8 ff e0 	ld.w	r8,r7[-32]
8002c990:	58 08       	cp.w	r8,0
8002c992:	c0 80       	breq	8002c9a2 <sysclk_set_prescalers+0x76>
		pbb_cksel = ((pbb_shift - 1) << AVR32_PM_PBBSEL)
8002c994:	ee f8 ff e0 	ld.w	r8,r7[-32]
8002c998:	20 18       	sub	r8,1
8002c99a:	b1 68       	lsl	r8,0x10
8002c99c:	a7 b8       	sbr	r8,0x7
8002c99e:	ef 48 ff f8 	st.w	r7[-8],r8
				| (1U << AVR32_PM_PBBDIV);

	if (pbc_shift > 0)
8002c9a2:	ee f8 ff dc 	ld.w	r8,r7[-36]
8002c9a6:	58 08       	cp.w	r8,0
8002c9a8:	c0 80       	breq	8002c9b8 <sysclk_set_prescalers+0x8c>
		pbc_cksel = ((pbc_shift - 1) << AVR32_PM_PBCSEL)
8002c9aa:	ee f8 ff dc 	ld.w	r8,r7[-36]
8002c9ae:	20 18       	sub	r8,1
8002c9b0:	b5 68       	lsl	r8,0x14
8002c9b2:	a7 b8       	sbr	r8,0x7
8002c9b4:	ef 48 ff fc 	st.w	r7[-4],r8
				| (1U << AVR32_PM_PBCDIV);

	flags = cpu_irq_save();
8002c9b8:	fe b0 fd 08 	rcall	8002c3c8 <cpu_irq_save>
8002c9bc:	18 98       	mov	r8,r12
8002c9be:	ef 48 ff ec 	st.w	r7[-20],r8
	AVR32_PM.unlock = 0xaa000000 | AVR32_PM_CPUSEL;
8002c9c2:	fe 78 04 00 	mov	r8,-64512
8002c9c6:	30 49       	mov	r9,4
8002c9c8:	ea 19 aa 00 	orh	r9,0xaa00
8002c9cc:	f1 49 00 58 	st.w	r8[88],r9
	AVR32_PM.cpusel = cpu_cksel;
8002c9d0:	fe 78 04 00 	mov	r8,-64512
8002c9d4:	ee f9 ff f0 	ld.w	r9,r7[-16]
8002c9d8:	91 19       	st.w	r8[0x4],r9
	AVR32_PM.unlock = 0xaa000000 | AVR32_PM_PBASEL;
8002c9da:	fe 78 04 00 	mov	r8,-64512
8002c9de:	30 c9       	mov	r9,12
8002c9e0:	ea 19 aa 00 	orh	r9,0xaa00
8002c9e4:	f1 49 00 58 	st.w	r8[88],r9
	AVR32_PM.pbasel = pba_cksel;
8002c9e8:	fe 78 04 00 	mov	r8,-64512
8002c9ec:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002c9f0:	91 39       	st.w	r8[0xc],r9
	AVR32_PM.unlock = 0xaa000000 | AVR32_PM_PBBSEL;
8002c9f2:	fe 78 04 00 	mov	r8,-64512
8002c9f6:	31 09       	mov	r9,16
8002c9f8:	ea 19 aa 00 	orh	r9,0xaa00
8002c9fc:	f1 49 00 58 	st.w	r8[88],r9
	AVR32_PM.pbbsel = pbb_cksel;
8002ca00:	fe 78 04 00 	mov	r8,-64512
8002ca04:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002ca08:	91 49       	st.w	r8[0x10],r9
	AVR32_PM.unlock = 0xaa000000 | AVR32_PM_PBCSEL;
8002ca0a:	fe 78 04 00 	mov	r8,-64512
8002ca0e:	31 49       	mov	r9,20
8002ca10:	ea 19 aa 00 	orh	r9,0xaa00
8002ca14:	f1 49 00 58 	st.w	r8[88],r9
	AVR32_PM.pbbsel = pbc_cksel;
8002ca18:	fe 78 04 00 	mov	r8,-64512
8002ca1c:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002ca20:	91 49       	st.w	r8[0x10],r9
	cpu_irq_restore(flags);
8002ca22:	ee fc ff ec 	ld.w	r12,r7[-20]
8002ca26:	fe b0 fc e0 	rcall	8002c3e6 <cpu_irq_restore>
}
8002ca2a:	2f 7d       	sub	sp,-36
8002ca2c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002ca30:	80 02       	ld.sh	r2,r0[0x0]
8002ca32:	c7 ba       	rjmp	8002c728 <genclk_config_defaults+0x18>

8002ca34 <sysclk_set_source>:
 *
 * \param src The new system clock source. Must be one of the constants
 * from the <em>System Clock Sources</em> section.
 */
void sysclk_set_source(uint_fast8_t src)
{
8002ca34:	eb cd 40 c0 	pushm	r6-r7,lr
8002ca38:	1a 97       	mov	r7,sp
8002ca3a:	20 2d       	sub	sp,8
8002ca3c:	48 e6       	lddpc	r6,8002ca74 <sysclk_set_source+0x40>
8002ca3e:	1e 26       	rsub	r6,pc
8002ca40:	ef 4c ff f8 	st.w	r7[-8],r12
	irqflags_t flags;

	Assert(src <= SYSCLK_SRC_RC8M);

	flags = cpu_irq_save();
8002ca44:	fe b0 fc c2 	rcall	8002c3c8 <cpu_irq_save>
8002ca48:	18 98       	mov	r8,r12
8002ca4a:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_PM.unlock = 0xaa000000 | AVR32_PM_MCCTRL;
8002ca4e:	fe 78 04 00 	mov	r8,-64512
8002ca52:	fc 19 aa 00 	movh	r9,0xaa00
8002ca56:	f1 49 00 58 	st.w	r8[88],r9
	AVR32_PM.mcctrl = src;
8002ca5a:	fe 78 04 00 	mov	r8,-64512
8002ca5e:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002ca62:	91 09       	st.w	r8[0x0],r9
	cpu_irq_restore(flags);
8002ca64:	ee fc ff fc 	ld.w	r12,r7[-4]
8002ca68:	fe b0 fc bf 	rcall	8002c3e6 <cpu_irq_restore>
}
8002ca6c:	2f ed       	sub	sp,-8
8002ca6e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002ca72:	00 00       	add	r0,r0
8002ca74:	80 02       	ld.sh	r2,r0[0x0]
8002ca76:	c8 c2       	brcc	8002c98e <sysclk_set_prescalers+0x62>

8002ca78 <sysclk_enable_usb>:
 * \pre The USB generick clock must be configurated to 48MHz.
 * CONFIG_USBCLK_SOURCE and CONFIG_USBCLK_DIV must be defined with proper
 * configuration. The selected clock source must also be configured.
 */
void sysclk_enable_usb(void)
{
8002ca78:	eb cd 40 c0 	pushm	r6-r7,lr
8002ca7c:	1a 97       	mov	r7,sp
8002ca7e:	20 3d       	sub	sp,12
8002ca80:	49 66       	lddpc	r6,8002cad8 <sysclk_enable_usb+0x60>
8002ca82:	1e 26       	rsub	r6,pc
	struct genclk_config gcfg;

	genclk_config_defaults(&gcfg, AVR32_USBC_GCLK_NUM);
8002ca84:	ee c8 00 04 	sub	r8,r7,4
8002ca88:	30 0b       	mov	r11,0
8002ca8a:	10 9c       	mov	r12,r8
8002ca8c:	c4 2e       	rcall	8002c710 <genclk_config_defaults>
#endif

#ifdef CONFIG_PLL1_SOURCE
	case USBCLK_SRC_PLL1: {
		struct pll_config pllcfg;
		pll_enable_source_sync(CONFIG_PLL1_SOURCE);
8002ca8e:	30 0c       	mov	r12,0
8002ca90:	c0 3e       	rcall	8002c696 <pll_enable_source_sync>
		pll_config_defaults(&pllcfg, 1);
8002ca92:	ee c8 00 0c 	sub	r8,r7,12
8002ca96:	30 39       	mov	r9,3
8002ca98:	30 1a       	mov	r10,1
8002ca9a:	30 0b       	mov	r11,0
8002ca9c:	10 9c       	mov	r12,r8
8002ca9e:	fe b0 fd 77 	rcall	8002c58c <pll_config_init>
		pll_enable(&pllcfg, 1);
8002caa2:	ee c8 00 0c 	sub	r8,r7,12
8002caa6:	30 1b       	mov	r11,1
8002caa8:	10 9c       	mov	r12,r8
8002caaa:	f0 16 00 a3 	mcall	r6[652]
		pll_wait_for_lock(1);
8002caae:	30 1c       	mov	r12,1
8002cab0:	c1 8e       	rcall	8002c6e0 <pll_wait_for_lock>
		genclk_config_set_source(&gcfg, GENCLK_SRC_PLL1);
8002cab2:	ee c8 00 04 	sub	r8,r7,4
8002cab6:	30 6b       	mov	r11,6
8002cab8:	10 9c       	mov	r12,r8
8002caba:	c3 ae       	rcall	8002c72e <genclk_config_set_source>
	default:
		/* unhandled_case(CONFIG_USBCLK_SOURCE); */
		break;
	}

	genclk_config_set_divider(&gcfg, CONFIG_USBCLK_DIV);
8002cabc:	ee c8 00 04 	sub	r8,r7,4
8002cac0:	30 1b       	mov	r11,1
8002cac2:	10 9c       	mov	r12,r8
8002cac4:	c4 de       	rcall	8002c75e <genclk_config_set_divider>
	genclk_enable(&gcfg, AVR32_USBC_GCLK_NUM);
8002cac6:	ee c8 00 04 	sub	r8,r7,4
8002caca:	30 0b       	mov	r11,0
8002cacc:	10 9c       	mov	r12,r8
8002cace:	c7 8e       	rcall	8002c7be <genclk_enable>
}
8002cad0:	2f dd       	sub	sp,-12
8002cad2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002cad6:	00 00       	add	r0,r0
8002cad8:	80 02       	ld.sh	r2,r0[0x0]
8002cada:	c9 06       	brmi	8002c9fa <sysclk_set_prescalers+0xce>

8002cadc <sysclk_disable_usb>:

/**
 * \brief Disable the USB generic clock
 */
void sysclk_disable_usb(void)
{
8002cadc:	eb cd 40 c0 	pushm	r6-r7,lr
8002cae0:	1a 97       	mov	r7,sp
8002cae2:	48 46       	lddpc	r6,8002caf0 <sysclk_disable_usb+0x14>
8002cae4:	1e 26       	rsub	r6,pc
   genclk_disable(AVR32_USBC_GCLK_NUM);
8002cae6:	30 0c       	mov	r12,0
8002cae8:	c8 1e       	rcall	8002c7ea <genclk_disable>
}
8002caea:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002caee:	00 00       	add	r0,r0
8002caf0:	80 02       	ld.sh	r2,r0[0x0]
8002caf2:	c9 68       	rjmp	8002cc1e <spi_set_chipselect_delay_bct+0x1a>

8002caf4 <sysclk_init>:
#endif // CONFIG_USBCLK_SOURCE


void sysclk_init(void)
{
8002caf4:	eb cd 40 c0 	pushm	r6-r7,lr
8002caf8:	1a 97       	mov	r7,sp
8002cafa:	20 2d       	sub	sp,8
8002cafc:	49 b6       	lddpc	r6,8002cb68 <sysclk_init+0x74>
8002cafe:	1e 26       	rsub	r6,pc

#ifdef CONFIG_PLL0_SOURCE

		struct pll_config pllcfg;

		pll_enable_source_sync(CONFIG_PLL0_SOURCE);
8002cb00:	30 0c       	mov	r12,0
8002cb02:	fe b0 fd ca 	rcall	8002c696 <pll_enable_source_sync>
		pll_config_defaults(&pllcfg, 0);
8002cb06:	ee c8 00 04 	sub	r8,r7,4
8002cb0a:	30 49       	mov	r9,4
8002cb0c:	30 1a       	mov	r10,1
8002cb0e:	30 0b       	mov	r11,0
8002cb10:	10 9c       	mov	r12,r8
8002cb12:	fe b0 fd 3d 	rcall	8002c58c <pll_config_init>
		pll_enable(&pllcfg, 0);
8002cb16:	ee c8 00 04 	sub	r8,r7,4
8002cb1a:	30 0b       	mov	r11,0
8002cb1c:	10 9c       	mov	r12,r8
8002cb1e:	f0 16 00 a3 	mcall	r6[652]
		pll_wait_for_lock(0);
8002cb22:	30 0c       	mov	r12,0
8002cb24:	fe b0 fd de 	rcall	8002c6e0 <pll_wait_for_lock>

#ifdef CONFIG_PLL1_SOURCE
	
		struct pll_config pllcfg1;

		pll_enable_source_sync(CONFIG_PLL1_SOURCE);
8002cb28:	30 0c       	mov	r12,0
8002cb2a:	fe b0 fd b6 	rcall	8002c696 <pll_enable_source_sync>
		pll_config_defaults(&pllcfg1, 1);
8002cb2e:	ee c8 00 08 	sub	r8,r7,8
8002cb32:	30 39       	mov	r9,3
8002cb34:	30 1a       	mov	r10,1
8002cb36:	30 0b       	mov	r11,0
8002cb38:	10 9c       	mov	r12,r8
8002cb3a:	fe b0 fd 29 	rcall	8002c58c <pll_config_init>
		pll_enable(&pllcfg1, 1);
8002cb3e:	ee c8 00 08 	sub	r8,r7,8
8002cb42:	30 1b       	mov	r11,1
8002cb44:	10 9c       	mov	r12,r8
8002cb46:	f0 16 00 a3 	mcall	r6[652]
		pll_wait_for_lock(1);
8002cb4a:	30 1c       	mov	r12,1
8002cb4c:	fe b0 fd ca 	rcall	8002c6e0 <pll_wait_for_lock>


	case SYSCLK_SRC_PLL0: {

		// Set a flash wait state depending on the new cpu frequency.
		flash_set_bus_freq(sysclk_get_main_hz());
8002cb50:	c5 ee       	rcall	8002c80c <sysclk_get_main_hz>
8002cb52:	18 98       	mov	r8,r12
8002cb54:	10 9c       	mov	r12,r8
8002cb56:	f0 16 01 56 	mcall	r6[1368]
		sysclk_set_source(SYSCLK_SRC_PLL0);
8002cb5a:	30 3c       	mov	r12,3
8002cb5c:	f0 16 01 be 	mcall	r6[1784]

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = true;
#endif
}
8002cb60:	2f ed       	sub	sp,-8
8002cb62:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002cb66:	00 00       	add	r0,r0
8002cb68:	80 02       	ld.sh	r2,r0[0x0]
8002cb6a:	c9 82       	brcc	8002ca9a <sysclk_enable_usb+0x22>

8002cb6c <osc_get_rate>:
/**
 * \todo RC8M may run at either 8 MHz or 1 MHz. Currently, we assume
 * it's always running at 8 MHz.
 */
static inline uint32_t osc_get_rate(uint8_t id)
{
8002cb6c:	eb cd 40 80 	pushm	r7,lr
8002cb70:	1a 97       	mov	r7,sp
8002cb72:	20 1d       	sub	sp,4
8002cb74:	18 98       	mov	r8,r12
8002cb76:	ef 68 ff fc 	st.b	r7[-4],r8
	switch (id) {
8002cb7a:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8002cb7e:	58 38       	cp.w	r8,3
8002cb80:	c1 20       	breq	8002cba4 <osc_get_rate+0x38>
8002cb82:	e0 89 00 07 	brgt	8002cb90 <osc_get_rate+0x24>
8002cb86:	58 08       	cp.w	r8,0
8002cb88:	c0 90       	breq	8002cb9a <osc_get_rate+0x2e>
8002cb8a:	58 28       	cp.w	r8,2
8002cb8c:	c0 f0       	breq	8002cbaa <osc_get_rate+0x3e>
8002cb8e:	c1 b8       	rjmp	8002cbc4 <osc_get_rate+0x58>
8002cb90:	58 48       	cp.w	r8,4
8002cb92:	c1 10       	breq	8002cbb4 <osc_get_rate+0x48>
8002cb94:	58 58       	cp.w	r8,5
8002cb96:	c1 40       	breq	8002cbbe <osc_get_rate+0x52>
8002cb98:	c1 68       	rjmp	8002cbc4 <osc_get_rate+0x58>
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return BOARD_OSC0_HZ;
8002cb9a:	e0 68 24 00 	mov	r8,9216
8002cb9e:	ea 18 00 f4 	orh	r8,0xf4
8002cba2:	c1 28       	rjmp	8002cbc6 <osc_get_rate+0x5a>
		return BOARD_OSC1_HZ;
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		return BOARD_OSC32_HZ;
8002cba4:	e0 68 80 00 	mov	r8,32768
8002cba8:	c0 f8       	rjmp	8002cbc6 <osc_get_rate+0x5a>
#endif

	case OSC_ID_RC8M:
		return OSC_RC8M_NOMINAL_HZ;
8002cbaa:	e0 68 12 00 	mov	r8,4608
8002cbae:	ea 18 00 7a 	orh	r8,0x7a
8002cbb2:	c0 a8       	rjmp	8002cbc6 <osc_get_rate+0x5a>

	case OSC_ID_RC120M:
		return OSC_RC120M_NOMINAL_HZ;
8002cbb4:	e0 68 0e 00 	mov	r8,3584
8002cbb8:	ea 18 07 27 	orh	r8,0x727
8002cbbc:	c0 58       	rjmp	8002cbc6 <osc_get_rate+0x5a>

	case OSC_ID_RCSYS:
		return OSC_RCSYS_NOMINAL_HZ;
8002cbbe:	e0 78 c1 38 	mov	r8,115000
8002cbc2:	c0 28       	rjmp	8002cbc6 <osc_get_rate+0x5a>

	default:
		/* unhandled_case(id); */
		return 0;
8002cbc4:	30 08       	mov	r8,0
	}
}
8002cbc6:	10 9c       	mov	r12,r8
8002cbc8:	2f fd       	sub	sp,-4
8002cbca:	e3 cd 80 80 	ldm	sp++,r7,pc

8002cbce <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern bool sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
8002cbce:	eb cd 40 c0 	pushm	r6-r7,lr
8002cbd2:	1a 97       	mov	r7,sp
8002cbd4:	48 56       	lddpc	r6,8002cbe8 <sysclk_get_main_hz+0x1a>
8002cbd6:	1e 26       	rsub	r6,pc
		return BOARD_OSC1_HZ;
#endif

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLL0:
		return pll_get_default_rate(0);
8002cbd8:	30 0c       	mov	r12,0
8002cbda:	cc 9f       	rcall	8002cb6c <osc_get_rate>
8002cbdc:	18 98       	mov	r8,r12
8002cbde:	a3 68       	lsl	r8,0x2

	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
8002cbe0:	10 9c       	mov	r12,r8
8002cbe2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002cbe6:	00 00       	add	r0,r0
8002cbe8:	80 02       	ld.sh	r2,r0[0x0]
8002cbea:	ca 5a       	rjmp	8002c934 <sysclk_set_prescalers+0x8>

8002cbec <sysclk_get_pba_hz>:
 * \brief Return the current rate in Hz of the Peripheral Bus A clock
 *
 * \return Frequency of the Peripheral Bus A clock, in Hz.
 */
static inline uint32_t sysclk_get_pba_hz(void)
{
8002cbec:	eb cd 40 c0 	pushm	r6-r7,lr
8002cbf0:	1a 97       	mov	r7,sp
8002cbf2:	48 46       	lddpc	r6,8002cc00 <sysclk_get_pba_hz+0x14>
8002cbf4:	1e 26       	rsub	r6,pc
	return sysclk_get_main_hz() >> CONFIG_SYSCLK_PBA_DIV;
8002cbf6:	ce cf       	rcall	8002cbce <sysclk_get_main_hz>
8002cbf8:	18 98       	mov	r8,r12
}
8002cbfa:	10 9c       	mov	r12,r8
8002cbfc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002cc00:	80 02       	ld.sh	r2,r0[0x0]
8002cc02:	ca 78       	rjmp	8002cd50 <spi_set_bits_per_transfer+0x4c>

8002cc04 <spi_set_chipselect_delay_bct>:
 * \param delay       Delay.
 */

static inline void spi_set_chipselect_delay_bct(volatile avr32_spi_t *spi,
                        uint8_t chip_select, uint8_t delay)
{
8002cc04:	eb cd 40 80 	pushm	r7,lr
8002cc08:	1a 97       	mov	r7,sp
8002cc0a:	20 3d       	sub	sp,12
8002cc0c:	ef 4c ff fc 	st.w	r7[-4],r12
8002cc10:	16 99       	mov	r9,r11
8002cc12:	14 98       	mov	r8,r10
8002cc14:	ef 69 ff f8 	st.b	r7[-8],r9
8002cc18:	ef 68 ff f4 	st.b	r7[-12],r8
  Assert(chip_select>3);
  switch(chip_select) {
8002cc1c:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8002cc20:	58 18       	cp.w	r8,1
8002cc22:	c1 40       	breq	8002cc4a <spi_set_chipselect_delay_bct+0x46>
8002cc24:	e0 89 00 05 	brgt	8002cc2e <spi_set_chipselect_delay_bct+0x2a>
8002cc28:	58 08       	cp.w	r8,0
8002cc2a:	c0 70       	breq	8002cc38 <spi_set_chipselect_delay_bct+0x34>
8002cc2c:	c2 98       	rjmp	8002cc7e <spi_set_chipselect_delay_bct+0x7a>
8002cc2e:	58 28       	cp.w	r8,2
8002cc30:	c1 60       	breq	8002cc5c <spi_set_chipselect_delay_bct+0x58>
8002cc32:	58 38       	cp.w	r8,3
8002cc34:	c1 d0       	breq	8002cc6e <spi_set_chipselect_delay_bct+0x6a>
8002cc36:	c2 48       	rjmp	8002cc7e <spi_set_chipselect_delay_bct+0x7a>
    case 0:
      spi->CSR0.dlybct = delay;
8002cc38:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002cc3c:	72 c8       	ld.w	r8,r9[0x30]
8002cc3e:	ef 3a ff f4 	ld.ub	r10,r7[-12]
8002cc42:	f1 da d3 08 	bfins	r8,r10,0x18,0x8
8002cc46:	93 c8       	st.w	r9[0x30],r8
      break;
8002cc48:	c1 b8       	rjmp	8002cc7e <spi_set_chipselect_delay_bct+0x7a>
    case 1:
      spi->CSR1.dlybct  = delay;
8002cc4a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002cc4e:	72 d8       	ld.w	r8,r9[0x34]
8002cc50:	ef 3a ff f4 	ld.ub	r10,r7[-12]
8002cc54:	f1 da d3 08 	bfins	r8,r10,0x18,0x8
8002cc58:	93 d8       	st.w	r9[0x34],r8
      break;
8002cc5a:	c1 28       	rjmp	8002cc7e <spi_set_chipselect_delay_bct+0x7a>
    case 2:
      spi->CSR2.dlybct  = delay;
8002cc5c:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002cc60:	72 e8       	ld.w	r8,r9[0x38]
8002cc62:	ef 3a ff f4 	ld.ub	r10,r7[-12]
8002cc66:	f1 da d3 08 	bfins	r8,r10,0x18,0x8
8002cc6a:	93 e8       	st.w	r9[0x38],r8
      break;
8002cc6c:	c0 98       	rjmp	8002cc7e <spi_set_chipselect_delay_bct+0x7a>
    case 3:
      spi->CSR3.dlybct  = delay;
8002cc6e:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002cc72:	72 f8       	ld.w	r8,r9[0x3c]
8002cc74:	ef 3a ff f4 	ld.ub	r10,r7[-12]
8002cc78:	f1 da d3 08 	bfins	r8,r10,0x18,0x8
8002cc7c:	93 f8       	st.w	r9[0x3c],r8
      break;
  }
}
8002cc7e:	2f dd       	sub	sp,-12
8002cc80:	e3 cd 80 80 	ldm	sp++,r7,pc

8002cc84 <spi_set_chipselect_delay_bs>:
 * \param chip_select Chip Select.
 * \param delay       Delay.
 */
static inline void spi_set_chipselect_delay_bs(volatile avr32_spi_t *spi,
                        uint8_t chip_select, uint8_t delay)
{
8002cc84:	eb cd 40 80 	pushm	r7,lr
8002cc88:	1a 97       	mov	r7,sp
8002cc8a:	20 3d       	sub	sp,12
8002cc8c:	ef 4c ff fc 	st.w	r7[-4],r12
8002cc90:	16 99       	mov	r9,r11
8002cc92:	14 98       	mov	r8,r10
8002cc94:	ef 69 ff f8 	st.b	r7[-8],r9
8002cc98:	ef 68 ff f4 	st.b	r7[-12],r8
  Assert(chip_select>3);
  switch(chip_select) {
8002cc9c:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8002cca0:	58 18       	cp.w	r8,1
8002cca2:	c1 40       	breq	8002ccca <spi_set_chipselect_delay_bs+0x46>
8002cca4:	e0 89 00 05 	brgt	8002ccae <spi_set_chipselect_delay_bs+0x2a>
8002cca8:	58 08       	cp.w	r8,0
8002ccaa:	c0 70       	breq	8002ccb8 <spi_set_chipselect_delay_bs+0x34>
8002ccac:	c2 98       	rjmp	8002ccfe <spi_set_chipselect_delay_bs+0x7a>
8002ccae:	58 28       	cp.w	r8,2
8002ccb0:	c1 60       	breq	8002ccdc <spi_set_chipselect_delay_bs+0x58>
8002ccb2:	58 38       	cp.w	r8,3
8002ccb4:	c1 d0       	breq	8002ccee <spi_set_chipselect_delay_bs+0x6a>
8002ccb6:	c2 48       	rjmp	8002ccfe <spi_set_chipselect_delay_bs+0x7a>
    case 0:
      spi->CSR0.dlybs = delay;
8002ccb8:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002ccbc:	72 c8       	ld.w	r8,r9[0x30]
8002ccbe:	ef 3a ff f4 	ld.ub	r10,r7[-12]
8002ccc2:	f1 da d2 08 	bfins	r8,r10,0x10,0x8
8002ccc6:	93 c8       	st.w	r9[0x30],r8
      break;
8002ccc8:	c1 b8       	rjmp	8002ccfe <spi_set_chipselect_delay_bs+0x7a>
    case 1:
      spi->CSR1.dlybs  = delay;
8002ccca:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002ccce:	72 d8       	ld.w	r8,r9[0x34]
8002ccd0:	ef 3a ff f4 	ld.ub	r10,r7[-12]
8002ccd4:	f1 da d2 08 	bfins	r8,r10,0x10,0x8
8002ccd8:	93 d8       	st.w	r9[0x34],r8
      break;
8002ccda:	c1 28       	rjmp	8002ccfe <spi_set_chipselect_delay_bs+0x7a>
    case 2:
      spi->CSR2.dlybs  = delay;
8002ccdc:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002cce0:	72 e8       	ld.w	r8,r9[0x38]
8002cce2:	ef 3a ff f4 	ld.ub	r10,r7[-12]
8002cce6:	f1 da d2 08 	bfins	r8,r10,0x10,0x8
8002ccea:	93 e8       	st.w	r9[0x38],r8
      break;
8002ccec:	c0 98       	rjmp	8002ccfe <spi_set_chipselect_delay_bs+0x7a>
    case 3:
      spi->CSR3.dlybs  = delay;
8002ccee:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002ccf2:	72 f8       	ld.w	r8,r9[0x3c]
8002ccf4:	ef 3a ff f4 	ld.ub	r10,r7[-12]
8002ccf8:	f1 da d2 08 	bfins	r8,r10,0x10,0x8
8002ccfc:	93 f8       	st.w	r9[0x3c],r8
      break;
  }
}
8002ccfe:	2f dd       	sub	sp,-12
8002cd00:	e3 cd 80 80 	ldm	sp++,r7,pc

8002cd04 <spi_set_bits_per_transfer>:
 * \param chip_select Chip Select.
 * \param len         Bits per Transfer [8...16].
 */
static inline void spi_set_bits_per_transfer(volatile avr32_spi_t *spi, uint8_t chip_select,
                        uint8_t len)
{
8002cd04:	eb cd 40 80 	pushm	r7,lr
8002cd08:	1a 97       	mov	r7,sp
8002cd0a:	20 3d       	sub	sp,12
8002cd0c:	ef 4c ff fc 	st.w	r7[-4],r12
8002cd10:	16 99       	mov	r9,r11
8002cd12:	14 98       	mov	r8,r10
8002cd14:	ef 69 ff f8 	st.b	r7[-8],r9
8002cd18:	ef 68 ff f4 	st.b	r7[-12],r8
  Assert((len>8)&&(len<16));
  switch(chip_select) {
8002cd1c:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8002cd20:	58 18       	cp.w	r8,1
8002cd22:	c1 a0       	breq	8002cd56 <spi_set_bits_per_transfer+0x52>
8002cd24:	e0 89 00 05 	brgt	8002cd2e <spi_set_bits_per_transfer+0x2a>
8002cd28:	58 08       	cp.w	r8,0
8002cd2a:	c0 70       	breq	8002cd38 <spi_set_bits_per_transfer+0x34>
8002cd2c:	c4 18       	rjmp	8002cdae <spi_set_bits_per_transfer+0xaa>
8002cd2e:	58 28       	cp.w	r8,2
8002cd30:	c2 20       	breq	8002cd74 <spi_set_bits_per_transfer+0x70>
8002cd32:	58 38       	cp.w	r8,3
8002cd34:	c2 f0       	breq	8002cd92 <spi_set_bits_per_transfer+0x8e>
8002cd36:	c3 c8       	rjmp	8002cdae <spi_set_bits_per_transfer+0xaa>
    case 0:
      spi->CSR0.bits = len - 8;
8002cd38:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8002cd3c:	20 88       	sub	r8,8
8002cd3e:	5c 58       	castu.b	r8
8002cd40:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8002cd44:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
8002cd48:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002cd4c:	72 c8       	ld.w	r8,r9[0x30]
8002cd4e:	f1 da d0 84 	bfins	r8,r10,0x4,0x4
8002cd52:	93 c8       	st.w	r9[0x30],r8
      break;
8002cd54:	c2 d8       	rjmp	8002cdae <spi_set_bits_per_transfer+0xaa>
    case 1:
      spi->CSR1.bits  = len - 8;
8002cd56:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8002cd5a:	20 88       	sub	r8,8
8002cd5c:	5c 58       	castu.b	r8
8002cd5e:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8002cd62:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
8002cd66:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002cd6a:	72 d8       	ld.w	r8,r9[0x34]
8002cd6c:	f1 da d0 84 	bfins	r8,r10,0x4,0x4
8002cd70:	93 d8       	st.w	r9[0x34],r8
      break;
8002cd72:	c1 e8       	rjmp	8002cdae <spi_set_bits_per_transfer+0xaa>
    case 2:
      spi->CSR2.bits  = len - 8;
8002cd74:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8002cd78:	20 88       	sub	r8,8
8002cd7a:	5c 58       	castu.b	r8
8002cd7c:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8002cd80:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
8002cd84:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002cd88:	72 e8       	ld.w	r8,r9[0x38]
8002cd8a:	f1 da d0 84 	bfins	r8,r10,0x4,0x4
8002cd8e:	93 e8       	st.w	r9[0x38],r8
      break;
8002cd90:	c0 f8       	rjmp	8002cdae <spi_set_bits_per_transfer+0xaa>
    case 3:
      spi->CSR3.bits  = len - 8;
8002cd92:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8002cd96:	20 88       	sub	r8,8
8002cd98:	5c 58       	castu.b	r8
8002cd9a:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8002cd9e:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
8002cda2:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002cda6:	72 f8       	ld.w	r8,r9[0x3c]
8002cda8:	f1 da d0 84 	bfins	r8,r10,0x4,0x4
8002cdac:	93 f8       	st.w	r9[0x3c],r8
      break;
  }
}
8002cdae:	2f dd       	sub	sp,-12
8002cdb0:	e3 cd 80 80 	ldm	sp++,r7,pc

8002cdb4 <spi_set_baudrate_register>:
 * \param chip_select Chip Select.
 * \param scbr        Baudrate Register.
 */
static inline void spi_set_baudrate_register(volatile avr32_spi_t *spi,uint8_t chip_select,
                        uint8_t scbr)
{
8002cdb4:	eb cd 40 80 	pushm	r7,lr
8002cdb8:	1a 97       	mov	r7,sp
8002cdba:	20 3d       	sub	sp,12
8002cdbc:	ef 4c ff fc 	st.w	r7[-4],r12
8002cdc0:	16 99       	mov	r9,r11
8002cdc2:	14 98       	mov	r8,r10
8002cdc4:	ef 69 ff f8 	st.b	r7[-8],r9
8002cdc8:	ef 68 ff f4 	st.b	r7[-12],r8
  switch(chip_select) {
8002cdcc:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8002cdd0:	58 18       	cp.w	r8,1
8002cdd2:	c1 40       	breq	8002cdfa <spi_set_baudrate_register+0x46>
8002cdd4:	e0 89 00 05 	brgt	8002cdde <spi_set_baudrate_register+0x2a>
8002cdd8:	58 08       	cp.w	r8,0
8002cdda:	c0 70       	breq	8002cde8 <spi_set_baudrate_register+0x34>
8002cddc:	c2 98       	rjmp	8002ce2e <spi_set_baudrate_register+0x7a>
8002cdde:	58 28       	cp.w	r8,2
8002cde0:	c1 60       	breq	8002ce0c <spi_set_baudrate_register+0x58>
8002cde2:	58 38       	cp.w	r8,3
8002cde4:	c1 d0       	breq	8002ce1e <spi_set_baudrate_register+0x6a>
8002cde6:	c2 48       	rjmp	8002ce2e <spi_set_baudrate_register+0x7a>
    case 0:
      spi->CSR0.scbr = scbr;
8002cde8:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002cdec:	72 c8       	ld.w	r8,r9[0x30]
8002cdee:	ef 3a ff f4 	ld.ub	r10,r7[-12]
8002cdf2:	f1 da d1 08 	bfins	r8,r10,0x8,0x8
8002cdf6:	93 c8       	st.w	r9[0x30],r8
      break;
8002cdf8:	c1 b8       	rjmp	8002ce2e <spi_set_baudrate_register+0x7a>
    case 1:
      spi->CSR1.scbr  = scbr;
8002cdfa:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002cdfe:	72 d8       	ld.w	r8,r9[0x34]
8002ce00:	ef 3a ff f4 	ld.ub	r10,r7[-12]
8002ce04:	f1 da d1 08 	bfins	r8,r10,0x8,0x8
8002ce08:	93 d8       	st.w	r9[0x34],r8
      break;
8002ce0a:	c1 28       	rjmp	8002ce2e <spi_set_baudrate_register+0x7a>
    case 2:
      spi->CSR2.scbr  = scbr;
8002ce0c:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002ce10:	72 e8       	ld.w	r8,r9[0x38]
8002ce12:	ef 3a ff f4 	ld.ub	r10,r7[-12]
8002ce16:	f1 da d1 08 	bfins	r8,r10,0x8,0x8
8002ce1a:	93 e8       	st.w	r9[0x38],r8
      break;
8002ce1c:	c0 98       	rjmp	8002ce2e <spi_set_baudrate_register+0x7a>
    case 3:
      spi->CSR3.scbr  = scbr;
8002ce1e:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002ce22:	72 f8       	ld.w	r8,r9[0x3c]
8002ce24:	ef 3a ff f4 	ld.ub	r10,r7[-12]
8002ce28:	f1 da d1 08 	bfins	r8,r10,0x8,0x8
8002ce2c:	93 f8       	st.w	r9[0x3c],r8
      break;
  }
}
8002ce2e:	2f dd       	sub	sp,-12
8002ce30:	e3 cd 80 80 	ldm	sp++,r7,pc

8002ce34 <spi_enable_active_mode>:
 *
 * \param spi         Base address of the SPI instance.
 * \param chip_select Chip Select.
 */
static inline void spi_enable_active_mode(volatile avr32_spi_t *spi,uint8_t chip_select)
{
8002ce34:	eb cd 40 80 	pushm	r7,lr
8002ce38:	1a 97       	mov	r7,sp
8002ce3a:	20 2d       	sub	sp,8
8002ce3c:	ef 4c ff fc 	st.w	r7[-4],r12
8002ce40:	16 98       	mov	r8,r11
8002ce42:	ef 68 ff f8 	st.b	r7[-8],r8
  switch(chip_select) {
8002ce46:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8002ce4a:	58 18       	cp.w	r8,1
8002ce4c:	c1 30       	breq	8002ce72 <spi_enable_active_mode+0x3e>
8002ce4e:	e0 89 00 05 	brgt	8002ce58 <spi_enable_active_mode+0x24>
8002ce52:	58 08       	cp.w	r8,0
8002ce54:	c0 70       	breq	8002ce62 <spi_enable_active_mode+0x2e>
8002ce56:	c2 58       	rjmp	8002cea0 <spi_enable_active_mode+0x6c>
8002ce58:	58 28       	cp.w	r8,2
8002ce5a:	c1 40       	breq	8002ce82 <spi_enable_active_mode+0x4e>
8002ce5c:	58 38       	cp.w	r8,3
8002ce5e:	c1 a0       	breq	8002ce92 <spi_enable_active_mode+0x5e>
8002ce60:	c2 08       	rjmp	8002cea0 <spi_enable_active_mode+0x6c>
    case 0:
      spi->CSR0.csaat = 1;
8002ce62:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002ce66:	72 c8       	ld.w	r8,r9[0x30]
8002ce68:	30 1a       	mov	r10,1
8002ce6a:	f1 da d0 61 	bfins	r8,r10,0x3,0x1
8002ce6e:	93 c8       	st.w	r9[0x30],r8
      break;
8002ce70:	c1 88       	rjmp	8002cea0 <spi_enable_active_mode+0x6c>
    case 1:
      spi->CSR1.csaat  = 1;
8002ce72:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002ce76:	72 d8       	ld.w	r8,r9[0x34]
8002ce78:	30 1a       	mov	r10,1
8002ce7a:	f1 da d0 61 	bfins	r8,r10,0x3,0x1
8002ce7e:	93 d8       	st.w	r9[0x34],r8
      break;
8002ce80:	c1 08       	rjmp	8002cea0 <spi_enable_active_mode+0x6c>
    case 2:
      spi->CSR2.csaat  = 1;
8002ce82:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002ce86:	72 e8       	ld.w	r8,r9[0x38]
8002ce88:	30 1a       	mov	r10,1
8002ce8a:	f1 da d0 61 	bfins	r8,r10,0x3,0x1
8002ce8e:	93 e8       	st.w	r9[0x38],r8
      break;
8002ce90:	c0 88       	rjmp	8002cea0 <spi_enable_active_mode+0x6c>
    case 3:
      spi->CSR3.csaat  = 1;
8002ce92:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002ce96:	72 f8       	ld.w	r8,r9[0x3c]
8002ce98:	30 1a       	mov	r10,1
8002ce9a:	f1 da d0 61 	bfins	r8,r10,0x3,0x1
8002ce9e:	93 f8       	st.w	r9[0x3c],r8
      break;
  }
}
8002cea0:	2f ed       	sub	sp,-8
8002cea2:	e3 cd 80 80 	ldm	sp++,r7,pc

8002cea6 <spi_set_mode>:
 * \param chip_select Chip Select.
 * \param flags       SPI Mode.
 */
static inline void spi_set_mode(volatile avr32_spi_t *spi,uint8_t chip_select,
                        uint8_t flags)
{
8002cea6:	eb cd 40 80 	pushm	r7,lr
8002ceaa:	1a 97       	mov	r7,sp
8002ceac:	20 3d       	sub	sp,12
8002ceae:	ef 4c ff fc 	st.w	r7[-4],r12
8002ceb2:	16 99       	mov	r9,r11
8002ceb4:	14 98       	mov	r8,r10
8002ceb6:	ef 69 ff f8 	st.b	r7[-8],r9
8002ceba:	ef 68 ff f4 	st.b	r7[-12],r8
  switch(chip_select) {
8002cebe:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8002cec2:	58 18       	cp.w	r8,1
8002cec4:	c2 70       	breq	8002cf12 <spi_set_mode+0x6c>
8002cec6:	e0 89 00 05 	brgt	8002ced0 <spi_set_mode+0x2a>
8002ceca:	58 08       	cp.w	r8,0
8002cecc:	c0 70       	breq	8002ceda <spi_set_mode+0x34>
8002cece:	c7 58       	rjmp	8002cfb8 <spi_set_mode+0x112>
8002ced0:	58 28       	cp.w	r8,2
8002ced2:	c3 c0       	breq	8002cf4a <spi_set_mode+0xa4>
8002ced4:	58 38       	cp.w	r8,3
8002ced6:	c5 60       	breq	8002cf82 <spi_set_mode+0xdc>
8002ced8:	c7 08       	rjmp	8002cfb8 <spi_set_mode+0x112>
    case 0:
      spi->CSR0.cpol = flags >> 1;
8002ceda:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8002cede:	a1 98       	lsr	r8,0x1
8002cee0:	5c 58       	castu.b	r8
8002cee2:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002cee6:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
8002ceea:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002ceee:	72 c8       	ld.w	r8,r9[0x30]
8002cef0:	f1 da d0 01 	bfins	r8,r10,0x0,0x1
8002cef4:	93 c8       	st.w	r9[0x30],r8
      spi->CSR0.ncpha = (flags & 0x1) ^ 0x1;
8002cef6:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8002cefa:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002cefe:	5f 08       	sreq	r8
8002cf00:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
8002cf04:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002cf08:	72 c8       	ld.w	r8,r9[0x30]
8002cf0a:	f1 da d0 21 	bfins	r8,r10,0x1,0x1
8002cf0e:	93 c8       	st.w	r9[0x30],r8
      break;
8002cf10:	c5 48       	rjmp	8002cfb8 <spi_set_mode+0x112>
    case 1:
      spi->CSR1.cpol  = flags >> 1;
8002cf12:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8002cf16:	a1 98       	lsr	r8,0x1
8002cf18:	5c 58       	castu.b	r8
8002cf1a:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002cf1e:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
8002cf22:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002cf26:	72 d8       	ld.w	r8,r9[0x34]
8002cf28:	f1 da d0 01 	bfins	r8,r10,0x0,0x1
8002cf2c:	93 d8       	st.w	r9[0x34],r8
      spi->CSR1.ncpha = (flags & 0x1) ^ 0x1;
8002cf2e:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8002cf32:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002cf36:	5f 08       	sreq	r8
8002cf38:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
8002cf3c:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002cf40:	72 d8       	ld.w	r8,r9[0x34]
8002cf42:	f1 da d0 21 	bfins	r8,r10,0x1,0x1
8002cf46:	93 d8       	st.w	r9[0x34],r8
      break;
8002cf48:	c3 88       	rjmp	8002cfb8 <spi_set_mode+0x112>
    case 2:
      spi->CSR2.cpol  = flags >> 1;
8002cf4a:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8002cf4e:	a1 98       	lsr	r8,0x1
8002cf50:	5c 58       	castu.b	r8
8002cf52:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002cf56:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
8002cf5a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002cf5e:	72 e8       	ld.w	r8,r9[0x38]
8002cf60:	f1 da d0 01 	bfins	r8,r10,0x0,0x1
8002cf64:	93 e8       	st.w	r9[0x38],r8
      spi->CSR2.ncpha = (flags & 0x1) ^ 0x1;
8002cf66:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8002cf6a:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002cf6e:	5f 08       	sreq	r8
8002cf70:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
8002cf74:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002cf78:	72 e8       	ld.w	r8,r9[0x38]
8002cf7a:	f1 da d0 21 	bfins	r8,r10,0x1,0x1
8002cf7e:	93 e8       	st.w	r9[0x38],r8
      break;
8002cf80:	c1 c8       	rjmp	8002cfb8 <spi_set_mode+0x112>
    case 3:
      spi->CSR3.cpol  = flags >> 1;
8002cf82:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8002cf86:	a1 98       	lsr	r8,0x1
8002cf88:	5c 58       	castu.b	r8
8002cf8a:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002cf8e:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
8002cf92:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002cf96:	72 f8       	ld.w	r8,r9[0x3c]
8002cf98:	f1 da d0 01 	bfins	r8,r10,0x0,0x1
8002cf9c:	93 f8       	st.w	r9[0x3c],r8
      spi->CSR3.ncpha = (flags & 0x1) ^ 0x1;
8002cf9e:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8002cfa2:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002cfa6:	5f 08       	sreq	r8
8002cfa8:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
8002cfac:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002cfb0:	72 f8       	ld.w	r8,r9[0x3c]
8002cfb2:	f1 da d0 21 	bfins	r8,r10,0x1,0x1
8002cfb6:	93 f8       	st.w	r9[0x3c],r8
      break;
  }
}
8002cfb8:	2f dd       	sub	sp,-12
8002cfba:	e3 cd 80 80 	ldm	sp++,r7,pc

8002cfbe <spi_put>:
 * \param spi Base address of the SPI instance.
 * \param data The data byte to be loaded 
 *
 */
static inline void spi_put(volatile avr32_spi_t *spi, uint16_t data)
{
8002cfbe:	eb cd 40 80 	pushm	r7,lr
8002cfc2:	1a 97       	mov	r7,sp
8002cfc4:	20 2d       	sub	sp,8
8002cfc6:	ef 4c ff fc 	st.w	r7[-4],r12
8002cfca:	16 98       	mov	r8,r11
8002cfcc:	ef 58 ff f8 	st.h	r7[-8],r8
	spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
8002cfd0:	ef 19 ff f8 	ld.uh	r9,r7[-8]
8002cfd4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002cfd8:	91 39       	st.w	r8[0xc],r9
}
8002cfda:	2f ed       	sub	sp,-8
8002cfdc:	e3 cd 80 80 	ldm	sp++,r7,pc

8002cfe0 <spi_get>:
 * \param spi Base address of the SPI instance.
 * \return The data byte 
 *
 */
static inline uint16_t spi_get(volatile avr32_spi_t *spi)
{
8002cfe0:	eb cd 40 80 	pushm	r7,lr
8002cfe4:	1a 97       	mov	r7,sp
8002cfe6:	20 1d       	sub	sp,4
8002cfe8:	ef 4c ff fc 	st.w	r7[-4],r12
	return (spi->rdr >> AVR32_SPI_RDR_RD_OFFSET);
8002cfec:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002cff0:	70 28       	ld.w	r8,r8[0x8]
8002cff2:	5c 88       	casts.h	r8
}
8002cff4:	10 9c       	mov	r12,r8
8002cff6:	2f fd       	sub	sp,-4
8002cff8:	e3 cd 80 80 	ldm	sp++,r7,pc

8002cffc <spi_is_tx_ready>:
 * \return Status.
 *   \retval 1  All transmissions complete.
 *   \retval 0  Transmissions not complete.
 */
static inline bool spi_is_tx_ready(volatile avr32_spi_t *spi)
{
8002cffc:	eb cd 40 80 	pushm	r7,lr
8002d000:	1a 97       	mov	r7,sp
8002d002:	20 1d       	sub	sp,4
8002d004:	ef 4c ff fc 	st.w	r7[-4],r12
  return (spi->sr & AVR32_SPI_SR_TDRE_MASK) != 0;
8002d008:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002d00c:	70 48       	ld.w	r8,r8[0x10]
8002d00e:	e2 18 00 02 	andl	r8,0x2,COH
8002d012:	5f 18       	srne	r8
8002d014:	5c 58       	castu.b	r8
}
8002d016:	10 9c       	mov	r12,r8
8002d018:	2f fd       	sub	sp,-4
8002d01a:	e3 cd 80 80 	ldm	sp++,r7,pc

8002d01e <spi_is_rx_ready>:
 * \param spi Base address of the SPI instance.
 *
 * \return \c 1 if the SPI Receiver is ready, otherwise \c 0.
 */
static inline bool spi_is_rx_ready(volatile avr32_spi_t *spi)
{
8002d01e:	eb cd 40 80 	pushm	r7,lr
8002d022:	1a 97       	mov	r7,sp
8002d024:	20 1d       	sub	sp,4
8002d026:	ef 4c ff fc 	st.w	r7[-4],r12
  return (spi->sr & (AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) ==
8002d02a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002d02e:	70 48       	ld.w	r8,r8[0x10]
8002d030:	e2 18 02 01 	andl	r8,0x201,COH
8002d034:	e0 48 02 01 	cp.w	r8,513
8002d038:	5f 08       	sreq	r8
8002d03a:	5c 58       	castu.b	r8
         (AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK);
}
8002d03c:	10 9c       	mov	r12,r8
8002d03e:	2f fd       	sub	sp,-4
8002d040:	e3 cd 80 80 	ldm	sp++,r7,pc

8002d044 <spi_write_single>:
 * \param spi    Base address of the SPI instance.
 * \param data   Data to write
 *
 */
static inline void spi_write_single(volatile avr32_spi_t *spi, uint8_t data)
{
8002d044:	eb cd 40 c0 	pushm	r6-r7,lr
8002d048:	1a 97       	mov	r7,sp
8002d04a:	20 2d       	sub	sp,8
8002d04c:	48 86       	lddpc	r6,8002d06c <spi_write_single+0x28>
8002d04e:	1e 26       	rsub	r6,pc
8002d050:	ef 4c ff fc 	st.w	r7[-4],r12
8002d054:	16 98       	mov	r8,r11
8002d056:	ef 68 ff f8 	st.b	r7[-8],r8
	spi_put(spi,(uint16_t)data);
8002d05a:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8002d05e:	10 9b       	mov	r11,r8
8002d060:	ee fc ff fc 	ld.w	r12,r7[-4]
8002d064:	ca df       	rcall	8002cfbe <spi_put>
}
8002d066:	2f ed       	sub	sp,-8
8002d068:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002d06c:	80 02       	ld.sh	r2,r0[0x0]
8002d06e:	ce d2       	brcc	8002d048 <spi_write_single+0x4>

8002d070 <spi_read_single>:
 * \param spi    Base address of the SPI instance.
 * \param data   Data to read
 *
 */
static inline void spi_read_single(volatile avr32_spi_t *spi, uint8_t *data)
{
8002d070:	eb cd 40 c0 	pushm	r6-r7,lr
8002d074:	1a 97       	mov	r7,sp
8002d076:	20 2d       	sub	sp,8
8002d078:	48 96       	lddpc	r6,8002d09c <spi_read_single+0x2c>
8002d07a:	1e 26       	rsub	r6,pc
8002d07c:	ef 4c ff fc 	st.w	r7[-4],r12
8002d080:	ef 4b ff f8 	st.w	r7[-8],r11
	*data = (uint8_t)spi_get(spi);
8002d084:	ee fc ff fc 	ld.w	r12,r7[-4]
8002d088:	ca cf       	rcall	8002cfe0 <spi_get>
8002d08a:	18 98       	mov	r8,r12
8002d08c:	5c 88       	casts.h	r8
8002d08e:	5c 58       	castu.b	r8
8002d090:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002d094:	b2 88       	st.b	r9[0x0],r8
}
8002d096:	2f ed       	sub	sp,-8
8002d098:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002d09c:	80 02       	ld.sh	r2,r0[0x0]
8002d09e:	ce fe       	rcall	8002ce7c <spi_enable_active_mode+0x48>

8002d0a0 <spi_master_setup_device>:


void spi_master_setup_device(volatile avr32_spi_t *spi, struct spi_device *device, 
     spi_flags_t flags, uint32_t baud_rate,
     board_spi_select_id_t sel_id)
{
8002d0a0:	eb cd 40 c0 	pushm	r6-r7,lr
8002d0a4:	1a 97       	mov	r7,sp
8002d0a6:	20 5d       	sub	sp,20
8002d0a8:	4a 76       	lddpc	r6,8002d144 <spi_master_setup_device+0xa4>
8002d0aa:	1e 26       	rsub	r6,pc
8002d0ac:	ef 4c ff fc 	st.w	r7[-4],r12
8002d0b0:	ef 4b ff f8 	st.w	r7[-8],r11
8002d0b4:	ef 49 ff f0 	st.w	r7[-16],r9
8002d0b8:	14 99       	mov	r9,r10
8002d0ba:	ef 69 ff f4 	st.b	r7[-12],r9
8002d0be:	ef 68 ff ec 	st.b	r7[-20],r8
  spi_set_chipselect_delay_bct(spi,device->id,CONFIG_SPI_MASTER_DELAY_BCT);
8002d0c2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002d0c6:	11 88       	ld.ub	r8,r8[0x0]
8002d0c8:	30 0a       	mov	r10,0
8002d0ca:	10 9b       	mov	r11,r8
8002d0cc:	ee fc ff fc 	ld.w	r12,r7[-4]
8002d0d0:	fe b0 fd 9a 	rcall	8002cc04 <spi_set_chipselect_delay_bct>
  spi_set_chipselect_delay_bs(spi,device->id,CONFIG_SPI_MASTER_DELAY_BS);
8002d0d4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002d0d8:	11 88       	ld.ub	r8,r8[0x0]
8002d0da:	30 0a       	mov	r10,0
8002d0dc:	10 9b       	mov	r11,r8
8002d0de:	ee fc ff fc 	ld.w	r12,r7[-4]
8002d0e2:	fe b0 fd d1 	rcall	8002cc84 <spi_set_chipselect_delay_bs>
  spi_set_bits_per_transfer(spi,device->id,CONFIG_SPI_MASTER_BITS_PER_TRANSFER);
8002d0e6:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002d0ea:	11 88       	ld.ub	r8,r8[0x0]
8002d0ec:	30 8a       	mov	r10,8
8002d0ee:	10 9b       	mov	r11,r8
8002d0f0:	ee fc ff fc 	ld.w	r12,r7[-4]
8002d0f4:	c0 8e       	rcall	8002cd04 <spi_set_bits_per_transfer>
  spi_set_baudrate_register(spi,device->id,getBaudDiv(baud_rate, sysclk_get_pba_hz()));
8002d0f6:	fe b0 fd 7b 	rcall	8002cbec <sysclk_get_pba_hz>
8002d0fa:	18 98       	mov	r8,r12
8002d0fc:	10 9b       	mov	r11,r8
8002d0fe:	ee fc ff f0 	ld.w	r12,r7[-16]
8002d102:	f0 16 01 18 	mcall	r6[1120]
8002d106:	18 98       	mov	r8,r12
8002d108:	5c 58       	castu.b	r8
8002d10a:	10 99       	mov	r9,r8
8002d10c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002d110:	11 88       	ld.ub	r8,r8[0x0]
8002d112:	12 9a       	mov	r10,r9
8002d114:	10 9b       	mov	r11,r8
8002d116:	ee fc ff fc 	ld.w	r12,r7[-4]
8002d11a:	c4 de       	rcall	8002cdb4 <spi_set_baudrate_register>
  spi_enable_active_mode(spi,device->id);
8002d11c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002d120:	11 88       	ld.ub	r8,r8[0x0]
8002d122:	10 9b       	mov	r11,r8
8002d124:	ee fc ff fc 	ld.w	r12,r7[-4]
8002d128:	c8 6e       	rcall	8002ce34 <spi_enable_active_mode>
  spi_set_mode(spi,device->id,flags);
8002d12a:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8002d12e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002d132:	11 88       	ld.ub	r8,r8[0x0]
8002d134:	12 9a       	mov	r10,r9
8002d136:	10 9b       	mov	r11,r8
8002d138:	ee fc ff fc 	ld.w	r12,r7[-4]
8002d13c:	cb 5e       	rcall	8002cea6 <spi_set_mode>
    {
      while(1);
    }
  }
#endif
}
8002d13e:	2f bd       	sub	sp,-20
8002d140:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002d144:	80 02       	ld.sh	r2,r0[0x0]
8002d146:	cf 2e       	rcall	8002cf2a <spi_set_mode+0x84>

8002d148 <spi_read_packet>:

status_code_t spi_read_packet(volatile avr32_spi_t *spi,uint8_t *data, size_t len)
{
8002d148:	eb cd 40 c0 	pushm	r6-r7,lr
8002d14c:	1a 97       	mov	r7,sp
8002d14e:	20 6d       	sub	sp,24
8002d150:	4b 66       	lddpc	r6,8002d228 <spi_read_packet+0xe0>
8002d152:	1e 26       	rsub	r6,pc
8002d154:	ef 4c ff f0 	st.w	r7[-16],r12
8002d158:	ef 4b ff ec 	st.w	r7[-20],r11
8002d15c:	ef 4a ff e8 	st.w	r7[-24],r10
  unsigned int timeout = SPI_TIMEOUT;
8002d160:	e0 68 3a 98 	mov	r8,15000
8002d164:	ef 48 ff f8 	st.w	r7[-8],r8
  uint8_t val;  
  size_t i=0;  
8002d168:	30 08       	mov	r8,0
8002d16a:	ef 48 ff fc 	st.w	r7[-4],r8
  while(len) {
8002d16e:	c5 48       	rjmp	8002d216 <spi_read_packet+0xce>
  	 timeout = SPI_TIMEOUT;
8002d170:	e0 68 3a 98 	mov	r8,15000
8002d174:	ef 48 ff f8 	st.w	r7[-8],r8
     while (!spi_is_tx_ready(spi)) {
8002d178:	c0 f8       	rjmp	8002d196 <spi_read_packet+0x4e>
       if (!timeout--) {
8002d17a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002d17e:	58 08       	cp.w	r8,0
8002d180:	5f 08       	sreq	r8
8002d182:	5c 58       	castu.b	r8
8002d184:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002d188:	20 19       	sub	r9,1
8002d18a:	ef 49 ff f8 	st.w	r7[-8],r9
8002d18e:	58 08       	cp.w	r8,0
8002d190:	c0 30       	breq	8002d196 <spi_read_packet+0x4e>
         return ERR_TIMEOUT;
8002d192:	3f d8       	mov	r8,-3
8002d194:	c4 68       	rjmp	8002d220 <spi_read_packet+0xd8>
  unsigned int timeout = SPI_TIMEOUT;
  uint8_t val;  
  size_t i=0;  
  while(len) {
  	 timeout = SPI_TIMEOUT;
     while (!spi_is_tx_ready(spi)) {
8002d196:	ee fc ff f0 	ld.w	r12,r7[-16]
8002d19a:	c3 1f       	rcall	8002cffc <spi_is_tx_ready>
8002d19c:	18 98       	mov	r8,r12
8002d19e:	ec 18 00 01 	eorl	r8,0x1
8002d1a2:	5c 58       	castu.b	r8
8002d1a4:	ce b1       	brne	8002d17a <spi_read_packet+0x32>
       if (!timeout--) {
         return ERR_TIMEOUT;
       }
     }
     spi_write_single(spi,CONFIG_SPI_MASTER_DUMMY);
8002d1a6:	e0 6b 00 ff 	mov	r11,255
8002d1aa:	ee fc ff f0 	ld.w	r12,r7[-16]
8002d1ae:	c4 bf       	rcall	8002d044 <spi_write_single>
     timeout = SPI_TIMEOUT;
8002d1b0:	e0 68 3a 98 	mov	r8,15000
8002d1b4:	ef 48 ff f8 	st.w	r7[-8],r8
     while (!spi_is_rx_ready(spi)) {
8002d1b8:	c0 f8       	rjmp	8002d1d6 <spi_read_packet+0x8e>
       if (!timeout--) {
8002d1ba:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002d1be:	58 08       	cp.w	r8,0
8002d1c0:	5f 08       	sreq	r8
8002d1c2:	5c 58       	castu.b	r8
8002d1c4:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002d1c8:	20 19       	sub	r9,1
8002d1ca:	ef 49 ff f8 	st.w	r7[-8],r9
8002d1ce:	58 08       	cp.w	r8,0
8002d1d0:	c0 30       	breq	8002d1d6 <spi_read_packet+0x8e>
         return ERR_TIMEOUT;
8002d1d2:	3f d8       	mov	r8,-3
8002d1d4:	c2 68       	rjmp	8002d220 <spi_read_packet+0xd8>
         return ERR_TIMEOUT;
       }
     }
     spi_write_single(spi,CONFIG_SPI_MASTER_DUMMY);
     timeout = SPI_TIMEOUT;
     while (!spi_is_rx_ready(spi)) {
8002d1d6:	ee fc ff f0 	ld.w	r12,r7[-16]
8002d1da:	c2 2f       	rcall	8002d01e <spi_is_rx_ready>
8002d1dc:	18 98       	mov	r8,r12
8002d1de:	ec 18 00 01 	eorl	r8,0x1
8002d1e2:	5c 58       	castu.b	r8
8002d1e4:	ce b1       	brne	8002d1ba <spi_read_packet+0x72>
       if (!timeout--) {
         return ERR_TIMEOUT;
       }
     }
     spi_read_single(spi,&val);
8002d1e6:	ee c8 00 09 	sub	r8,r7,9
8002d1ea:	10 9b       	mov	r11,r8
8002d1ec:	ee fc ff f0 	ld.w	r12,r7[-16]
8002d1f0:	c4 0f       	rcall	8002d070 <spi_read_single>
     data[i] = val;
8002d1f2:	ee f9 ff ec 	ld.w	r9,r7[-20]
8002d1f6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002d1fa:	10 09       	add	r9,r8
8002d1fc:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8002d200:	b2 88       	st.b	r9[0x0],r8
     i++;
8002d202:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002d206:	2f f8       	sub	r8,-1
8002d208:	ef 48 ff fc 	st.w	r7[-4],r8
     len--;
8002d20c:	ee f8 ff e8 	ld.w	r8,r7[-24]
8002d210:	20 18       	sub	r8,1
8002d212:	ef 48 ff e8 	st.w	r7[-24],r8
status_code_t spi_read_packet(volatile avr32_spi_t *spi,uint8_t *data, size_t len)
{
  unsigned int timeout = SPI_TIMEOUT;
  uint8_t val;  
  size_t i=0;  
  while(len) {
8002d216:	ee f8 ff e8 	ld.w	r8,r7[-24]
8002d21a:	58 08       	cp.w	r8,0
8002d21c:	ca a1       	brne	8002d170 <spi_read_packet+0x28>
     spi_read_single(spi,&val);
     data[i] = val;
     i++;
     len--;
  }
  return STATUS_OK;
8002d21e:	30 08       	mov	r8,0
}
8002d220:	10 9c       	mov	r12,r8
8002d222:	2f ad       	sub	sp,-24
8002d224:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002d228:	80 02       	ld.sh	r2,r0[0x0]
8002d22a:	cf d6       	brmi	8002d224 <spi_read_packet+0xdc>

8002d22c <spi_write_packet>:

status_code_t spi_write_packet(volatile avr32_spi_t *spi, const uint8_t *data, size_t len)
{
8002d22c:	eb cd 40 c0 	pushm	r6-r7,lr
8002d230:	1a 97       	mov	r7,sp
8002d232:	20 6d       	sub	sp,24
8002d234:	4a 76       	lddpc	r6,8002d2d0 <spi_write_packet+0xa4>
8002d236:	1e 26       	rsub	r6,pc
8002d238:	ef 4c ff f0 	st.w	r7[-16],r12
8002d23c:	ef 4b ff ec 	st.w	r7[-20],r11
8002d240:	ef 4a ff e8 	st.w	r7[-24],r10
  unsigned int timeout = SPI_TIMEOUT;
8002d244:	e0 68 3a 98 	mov	r8,15000
8002d248:	ef 48 ff f4 	st.w	r7[-12],r8
  size_t i=0;
8002d24c:	30 08       	mov	r8,0
8002d24e:	ef 48 ff f8 	st.w	r7[-8],r8
  uint8_t val;
  while(len) {
8002d252:	c3 58       	rjmp	8002d2bc <spi_write_packet+0x90>
     timeout = SPI_TIMEOUT;
8002d254:	e0 68 3a 98 	mov	r8,15000
8002d258:	ef 48 ff f4 	st.w	r7[-12],r8
     while (!spi_is_tx_ready(spi)) {
8002d25c:	c0 f8       	rjmp	8002d27a <spi_write_packet+0x4e>
       if (!timeout--) {
8002d25e:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d262:	58 08       	cp.w	r8,0
8002d264:	5f 08       	sreq	r8
8002d266:	5c 58       	castu.b	r8
8002d268:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002d26c:	20 19       	sub	r9,1
8002d26e:	ef 49 ff f4 	st.w	r7[-12],r9
8002d272:	58 08       	cp.w	r8,0
8002d274:	c0 30       	breq	8002d27a <spi_write_packet+0x4e>
         return ERR_TIMEOUT;
8002d276:	3f d8       	mov	r8,-3
8002d278:	c2 78       	rjmp	8002d2c6 <spi_write_packet+0x9a>
  unsigned int timeout = SPI_TIMEOUT;
  size_t i=0;
  uint8_t val;
  while(len) {
     timeout = SPI_TIMEOUT;
     while (!spi_is_tx_ready(spi)) {
8002d27a:	ee fc ff f0 	ld.w	r12,r7[-16]
8002d27e:	cb fe       	rcall	8002cffc <spi_is_tx_ready>
8002d280:	18 98       	mov	r8,r12
8002d282:	ec 18 00 01 	eorl	r8,0x1
8002d286:	5c 58       	castu.b	r8
8002d288:	ce b1       	brne	8002d25e <spi_write_packet+0x32>
       if (!timeout--) {
         return ERR_TIMEOUT;
       }
     }
     val = data[i];     
8002d28a:	ee f9 ff ec 	ld.w	r9,r7[-20]
8002d28e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002d292:	f2 08 00 08 	add	r8,r9,r8
8002d296:	11 88       	ld.ub	r8,r8[0x0]
8002d298:	ef 68 ff ff 	st.b	r7[-1],r8
     spi_write_single(spi,val);
8002d29c:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8002d2a0:	10 9b       	mov	r11,r8
8002d2a2:	ee fc ff f0 	ld.w	r12,r7[-16]
8002d2a6:	cc fe       	rcall	8002d044 <spi_write_single>
     i++;
8002d2a8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002d2ac:	2f f8       	sub	r8,-1
8002d2ae:	ef 48 ff f8 	st.w	r7[-8],r8
     len--;
8002d2b2:	ee f8 ff e8 	ld.w	r8,r7[-24]
8002d2b6:	20 18       	sub	r8,1
8002d2b8:	ef 48 ff e8 	st.w	r7[-24],r8
status_code_t spi_write_packet(volatile avr32_spi_t *spi, const uint8_t *data, size_t len)
{
  unsigned int timeout = SPI_TIMEOUT;
  size_t i=0;
  uint8_t val;
  while(len) {
8002d2bc:	ee f8 ff e8 	ld.w	r8,r7[-24]
8002d2c0:	58 08       	cp.w	r8,0
8002d2c2:	cc 91       	brne	8002d254 <spi_write_packet+0x28>
     val = data[i];     
     spi_write_single(spi,val);
     i++;
     len--;
  }
  return STATUS_OK;
8002d2c4:	30 08       	mov	r8,0
}
8002d2c6:	10 9c       	mov	r12,r8
8002d2c8:	2f ad       	sub	sp,-24
8002d2ca:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002d2ce:	00 00       	add	r0,r0
8002d2d0:	80 02       	ld.sh	r2,r0[0x0]
8002d2d2:	d0 ba       	popm	r0-r7,r10

8002d2d4 <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
8002d2d4:	eb cd 40 c0 	pushm	r6-r7,lr
8002d2d8:	1a 97       	mov	r7,sp
8002d2da:	20 6d       	sub	sp,24
8002d2dc:	49 e6       	lddpc	r6,8002d354 <interpolate+0x80>
8002d2de:	1e 26       	rsub	r6,pc
8002d2e0:	ef 4c ff f8 	st.w	r7[-8],r12
8002d2e4:	ef 4b ff f4 	st.w	r7[-12],r11
8002d2e8:	ef 4a ff f0 	st.w	r7[-16],r10
8002d2ec:	ef 49 ff ec 	st.w	r7[-20],r9
8002d2f0:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
8002d2f4:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002d2f8:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002d2fc:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
8002d300:	c0 41       	brne	8002d308 <interpolate+0x34>
	{
		return y1;
8002d302:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002d306:	c2 38       	rjmp	8002d34c <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
8002d308:	ee f9 ff e8 	ld.w	r9,r7[-24]
8002d30c:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002d310:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8002d314:	ee fa ff f8 	ld.w	r10,r7[-8]
8002d318:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d31c:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
8002d320:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8002d324:	ee fa ff f0 	ld.w	r10,r7[-16]
8002d328:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002d32c:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8002d330:	12 9b       	mov	r11,r9
8002d332:	10 9c       	mov	r12,r8
8002d334:	f0 16 00 08 	mcall	r6[32]
8002d338:	18 98       	mov	r8,r12
8002d33a:	10 99       	mov	r9,r8
8002d33c:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002d340:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8002d344:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
8002d348:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
8002d34c:	10 9c       	mov	r12,r8
8002d34e:	2f ad       	sub	sp,-24
8002d350:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002d354:	80 02       	ld.sh	r2,r0[0x0]
8002d356:	d1 62       	popm	r4-r9,r11

8002d358 <mav_array_memcpy>:

/*
  like memcpy(), but if src is NULL, do a memset to zero
*/
static void mav_array_memcpy(void *dest, const void *src, size_t n)
{
8002d358:	eb cd 40 c0 	pushm	r6-r7,lr
8002d35c:	1a 97       	mov	r7,sp
8002d35e:	20 3d       	sub	sp,12
8002d360:	49 06       	lddpc	r6,8002d3a0 <mav_array_memcpy+0x48>
8002d362:	1e 26       	rsub	r6,pc
8002d364:	ef 4c ff fc 	st.w	r7[-4],r12
8002d368:	ef 4b ff f8 	st.w	r7[-8],r11
8002d36c:	ef 4a ff f4 	st.w	r7[-12],r10
	if (src == NULL) {
8002d370:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002d374:	58 08       	cp.w	r8,0
8002d376:	c0 91       	brne	8002d388 <mav_array_memcpy+0x30>
		memset(dest, 0, n);
8002d378:	ee fa ff f4 	ld.w	r10,r7[-12]
8002d37c:	30 0b       	mov	r11,0
8002d37e:	ee fc ff fc 	ld.w	r12,r7[-4]
8002d382:	f0 16 00 2f 	mcall	r6[188]
8002d386:	c0 98       	rjmp	8002d398 <mav_array_memcpy+0x40>
	} else {
		memcpy(dest, src, n);
8002d388:	ee fa ff f4 	ld.w	r10,r7[-12]
8002d38c:	ee fb ff f8 	ld.w	r11,r7[-8]
8002d390:	ee fc ff fc 	ld.w	r12,r7[-4]
8002d394:	f0 16 00 20 	mcall	r6[128]
	}
}
8002d398:	2f dd       	sub	sp,-12
8002d39a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002d39e:	00 00       	add	r0,r0
8002d3a0:	80 02       	ld.sh	r2,r0[0x0]
8002d3a2:	d1 e6       	*unknown*

8002d3a4 <osc_get_rate>:
/**
 * \todo RC8M may run at either 8 MHz or 1 MHz. Currently, we assume
 * it's always running at 8 MHz.
 */
static inline uint32_t osc_get_rate(uint8_t id)
{
8002d3a4:	eb cd 40 80 	pushm	r7,lr
8002d3a8:	1a 97       	mov	r7,sp
8002d3aa:	20 1d       	sub	sp,4
8002d3ac:	18 98       	mov	r8,r12
8002d3ae:	ef 68 ff fc 	st.b	r7[-4],r8
	switch (id) {
8002d3b2:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8002d3b6:	58 38       	cp.w	r8,3
8002d3b8:	c1 20       	breq	8002d3dc <osc_get_rate+0x38>
8002d3ba:	e0 89 00 07 	brgt	8002d3c8 <osc_get_rate+0x24>
8002d3be:	58 08       	cp.w	r8,0
8002d3c0:	c0 90       	breq	8002d3d2 <osc_get_rate+0x2e>
8002d3c2:	58 28       	cp.w	r8,2
8002d3c4:	c0 f0       	breq	8002d3e2 <osc_get_rate+0x3e>
8002d3c6:	c1 b8       	rjmp	8002d3fc <osc_get_rate+0x58>
8002d3c8:	58 48       	cp.w	r8,4
8002d3ca:	c1 10       	breq	8002d3ec <osc_get_rate+0x48>
8002d3cc:	58 58       	cp.w	r8,5
8002d3ce:	c1 40       	breq	8002d3f6 <osc_get_rate+0x52>
8002d3d0:	c1 68       	rjmp	8002d3fc <osc_get_rate+0x58>
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return BOARD_OSC0_HZ;
8002d3d2:	e0 68 24 00 	mov	r8,9216
8002d3d6:	ea 18 00 f4 	orh	r8,0xf4
8002d3da:	c1 28       	rjmp	8002d3fe <osc_get_rate+0x5a>
		return BOARD_OSC1_HZ;
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		return BOARD_OSC32_HZ;
8002d3dc:	e0 68 80 00 	mov	r8,32768
8002d3e0:	c0 f8       	rjmp	8002d3fe <osc_get_rate+0x5a>
#endif

	case OSC_ID_RC8M:
		return OSC_RC8M_NOMINAL_HZ;
8002d3e2:	e0 68 12 00 	mov	r8,4608
8002d3e6:	ea 18 00 7a 	orh	r8,0x7a
8002d3ea:	c0 a8       	rjmp	8002d3fe <osc_get_rate+0x5a>

	case OSC_ID_RC120M:
		return OSC_RC120M_NOMINAL_HZ;
8002d3ec:	e0 68 0e 00 	mov	r8,3584
8002d3f0:	ea 18 07 27 	orh	r8,0x727
8002d3f4:	c0 58       	rjmp	8002d3fe <osc_get_rate+0x5a>

	case OSC_ID_RCSYS:
		return OSC_RCSYS_NOMINAL_HZ;
8002d3f6:	e0 78 c1 38 	mov	r8,115000
8002d3fa:	c0 28       	rjmp	8002d3fe <osc_get_rate+0x5a>

	default:
		/* unhandled_case(id); */
		return 0;
8002d3fc:	30 08       	mov	r8,0
	}
}
8002d3fe:	10 9c       	mov	r12,r8
8002d400:	2f fd       	sub	sp,-4
8002d402:	e3 cd 80 80 	ldm	sp++,r7,pc

8002d406 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern bool sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
8002d406:	eb cd 40 c0 	pushm	r6-r7,lr
8002d40a:	1a 97       	mov	r7,sp
8002d40c:	48 56       	lddpc	r6,8002d420 <sysclk_get_main_hz+0x1a>
8002d40e:	1e 26       	rsub	r6,pc
		return BOARD_OSC1_HZ;
#endif

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLL0:
		return pll_get_default_rate(0);
8002d410:	30 0c       	mov	r12,0
8002d412:	cc 9f       	rcall	8002d3a4 <osc_get_rate>
8002d414:	18 98       	mov	r8,r12
8002d416:	a3 68       	lsl	r8,0x2

	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
8002d418:	10 9c       	mov	r12,r8
8002d41a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002d41e:	00 00       	add	r0,r0
8002d420:	80 02       	ld.sh	r2,r0[0x0]
8002d422:	d2 92       	popm	r0-r3,r10,r12

8002d424 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
8002d424:	eb cd 40 c0 	pushm	r6-r7,lr
8002d428:	1a 97       	mov	r7,sp
8002d42a:	48 46       	lddpc	r6,8002d438 <sysclk_get_cpu_hz+0x14>
8002d42c:	1e 26       	rsub	r6,pc
	return sysclk_get_main_hz() >> CONFIG_SYSCLK_CPU_DIV;
8002d42e:	ce cf       	rcall	8002d406 <sysclk_get_main_hz>
8002d430:	18 98       	mov	r8,r12
}
8002d432:	10 9c       	mov	r12,r8
8002d434:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002d438:	80 02       	ld.sh	r2,r0[0x0]
8002d43a:	d2 b0       	acall	0x2b

8002d43c <sleepmgr_init>:
 * Sets all lock counts to 0, except the very last one, which is set to 1. This
 * is done to simplify the algorithm for finding the deepest allowable sleep
 * mode in \ref sleepmgr_enter_sleep.
 */
static inline void sleepmgr_init(void)
{
8002d43c:	eb cd 40 c0 	pushm	r6-r7,lr
8002d440:	1a 97       	mov	r7,sp
8002d442:	20 1d       	sub	sp,4
8002d444:	49 06       	lddpc	r6,8002d484 <sleepmgr_init+0x48>
8002d446:	1e 26       	rsub	r6,pc
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
8002d448:	30 08       	mov	r8,0
8002d44a:	ef 68 ff ff 	st.b	r7[-1],r8
8002d44e:	c0 d8       	rjmp	8002d468 <sleepmgr_init+0x2c>
		sleepmgr_locks[i] = 0;
8002d450:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8002d454:	ec fa 03 d0 	ld.w	r10,r6[976]
8002d458:	30 08       	mov	r8,0
8002d45a:	f4 09 0b 08 	st.b	r10[r9],r8
static inline void sleepmgr_init(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
8002d45e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8002d462:	2f f8       	sub	r8,-1
8002d464:	ef 68 ff ff 	st.b	r7[-1],r8
8002d468:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8002d46c:	30 58       	mov	r8,5
8002d46e:	f0 09 18 00 	cp.b	r9,r8
8002d472:	fe 98 ff ef 	brls	8002d450 <sleepmgr_init+0x14>
		sleepmgr_locks[i] = 0;
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
8002d476:	ec f9 03 d0 	ld.w	r9,r6[976]
8002d47a:	30 18       	mov	r8,1
8002d47c:	b2 e8       	st.b	r9[0x6],r8
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
8002d47e:	2f fd       	sub	sp,-4
8002d480:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002d484:	80 02       	ld.sh	r2,r0[0x0]
8002d486:	d2 ca       	popm	r8-r10,r12
8002d488:	42 6f       	lddsp	pc,sp[0x98]
8002d48a:	61 72       	ld.w	r2,r0[0x5c]
8002d48c:	64 20       	ld.w	r0,r2[0x8]
8002d48e:	69 6e       	ld.w	lr,r4[0x58]
8002d490:	69 74       	ld.w	r4,r4[0x5c]
8002d492:	69 61       	ld.w	r1,r4[0x58]
8002d494:	6c 69       	ld.w	r9,r6[0x18]
8002d496:	73 65       	ld.w	r5,r9[0x58]
8002d498:	64 2e       	ld.w	lr,r2[0x8]
8002d49a:	0a 00       	add	r0,r5

8002d49c <initialise_board>:
#include "bmp085.h"
#include "analog_monitor.h"

//static volatile board_hardware_t board_hardware;

void initialise_board(central_data_t *centralData) {
8002d49c:	eb cd 40 e0 	pushm	r5-r7,lr
8002d4a0:	1a 97       	mov	r7,sp
8002d4a2:	20 3d       	sub	sp,12
8002d4a4:	4f 66       	lddpc	r6,8002d67c <initialise_board+0x1e0>
8002d4a6:	1e 26       	rsub	r6,pc
8002d4a8:	ef 4c ff f4 	st.w	r7[-12],r12
	int i;
	enum GPS_Engine_Setting engine_nav_settings = GPS_ENGINE_AIRBORNE_4G;
8002d4ac:	30 88       	mov	r8,8
8002d4ae:	ef 48 ff fc 	st.w	r7[-4],r8

	irq_initialize_vectors();
8002d4b2:	f0 16 01 12 	mcall	r6[1096]
	cpu_irq_enable();
8002d4b6:	d5 03       	csrf	0x10
	Disable_global_interrupt();
8002d4b8:	d3 03       	ssrf	0x10
		
	// Initialize the sleep manager
	sleepmgr_init();
8002d4ba:	cc 1f       	rcall	8002d43c <sleepmgr_init>
	sysclk_init();
8002d4bc:	f0 16 01 42 	mcall	r6[1288]
	board_init();
8002d4c0:	f0 16 01 9d 	mcall	r6[1652]
	delay_init(sysclk_get_cpu_hz());
8002d4c4:	cb 0f       	rcall	8002d424 <sysclk_get_cpu_hz>
8002d4c6:	18 98       	mov	r8,r12
8002d4c8:	10 9c       	mov	r12,r8
8002d4ca:	f0 16 01 af 	mcall	r6[1724]
	init_time_keeper();
8002d4ce:	f0 16 01 f5 	mcall	r6[2004]
		
	INTC_init_interrupts();
8002d4d2:	f0 16 01 12 	mcall	r6[1096]
		
		
	if (init_i2c(0)!=STATUS_OK) {
8002d4d6:	30 0c       	mov	r12,0
8002d4d8:	f0 16 00 da 	mcall	r6[872]
8002d4dc:	18 98       	mov	r8,r12
8002d4de:	58 08       	cp.w	r8,0
8002d4e0:	c0 20       	breq	8002d4e4 <initialise_board+0x48>
		//putstring(STDOUT, "Error initialising I2C\n");
		while (1==1);
8002d4e2:	c0 08       	rjmp	8002d4e2 <initialise_board+0x46>
		} else {
		//putstring(STDOUT, "initialised I2C.\n");
	};
	if (init_i2c(1)!=STATUS_OK) {
8002d4e4:	30 1c       	mov	r12,1
8002d4e6:	f0 16 00 da 	mcall	r6[872]
8002d4ea:	18 98       	mov	r8,r12
8002d4ec:	58 08       	cp.w	r8,0
8002d4ee:	c0 20       	breq	8002d4f2 <initialise_board+0x56>
		//putstring(STDOUT, "Error initialising I2C\n");
		while (1==1);
8002d4f0:	c0 08       	rjmp	8002d4f0 <initialise_board+0x54>
		} else {
		//putstring(STDOUT, "initialised I2C.\n");
	};

	LED_Off(LED1);
8002d4f2:	30 2c       	mov	r12,2
8002d4f4:	f0 16 01 61 	mcall	r6[1412]
	// Configure the pins connected to LEDs as output and set their default
	// initial state to high (LEDs off).
	//gpio_configure_pin(LED0_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_LOW);
	//gpio_configure_pin(LED1_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_LOW);

	init_Servos();
8002d4f8:	f0 16 02 1c 	mcall	r6[2160]
	set_servos(&servo_failsafe);
8002d4fc:	ec fc 08 7c 	ld.w	r12,r6[2172]
8002d500:	f0 16 00 a0 	mcall	r6[640]
	
		
	init_UART_int(0);
8002d504:	30 0c       	mov	r12,0
8002d506:	f0 16 00 9c 	mcall	r6[624]
	register_write_stream(get_UART_handle(0), &(centralData->xbee_out_stream));
8002d50a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d50e:	f0 c5 f6 8c 	sub	r5,r8,-2420
8002d512:	30 0c       	mov	r12,0
8002d514:	f0 16 00 61 	mcall	r6[388]
8002d518:	18 98       	mov	r8,r12
8002d51a:	0a 9b       	mov	r11,r5
8002d51c:	10 9c       	mov	r12,r8
8002d51e:	f0 16 00 cb 	mcall	r6[812]
				
		
	init_UART_int(3);
8002d522:	30 3c       	mov	r12,3
8002d524:	f0 16 00 9c 	mcall	r6[624]
	make_buffered_stream(&(centralData->gps_buffer), &(centralData->gps_stream_in));
8002d528:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d52c:	f0 c9 f5 28 	sub	r9,r8,-2776
8002d530:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d534:	f0 c8 f6 2c 	sub	r8,r8,-2516
8002d538:	12 9b       	mov	r11,r9
8002d53a:	10 9c       	mov	r12,r8
8002d53c:	f0 16 01 64 	mcall	r6[1424]
	register_read_stream(get_UART_handle(3), &(centralData->gps_stream_in));
8002d540:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d544:	f0 c5 f5 28 	sub	r5,r8,-2776
8002d548:	30 3c       	mov	r12,3
8002d54a:	f0 16 00 61 	mcall	r6[388]
8002d54e:	18 98       	mov	r8,r12
8002d550:	0a 9b       	mov	r11,r5
8002d552:	10 9c       	mov	r12,r8
8002d554:	f0 16 00 b7 	mcall	r6[732]
	register_write_stream(get_UART_handle(3), &(centralData->gps_stream_out));
8002d558:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d55c:	f0 c5 f5 10 	sub	r5,r8,-2800
8002d560:	30 3c       	mov	r12,3
8002d562:	f0 16 00 61 	mcall	r6[388]
8002d566:	18 98       	mov	r8,r12
8002d568:	0a 9b       	mov	r11,r5
8002d56a:	10 9c       	mov	r12,r8
8002d56c:	f0 16 00 cb 	mcall	r6[812]
		
	init_UART_int(4);
8002d570:	30 4c       	mov	r12,4
8002d572:	f0 16 00 9c 	mcall	r6[624]
	register_write_stream(get_UART_handle(4), &(centralData->wired_out_stream));
8002d576:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d57a:	f0 c5 f6 5c 	sub	r5,r8,-2468
8002d57e:	30 4c       	mov	r12,4
8002d580:	f0 16 00 61 	mcall	r6[388]
8002d584:	18 98       	mov	r8,r12
8002d586:	0a 9b       	mov	r11,r5
8002d588:	10 9c       	mov	r12,r8
8002d58a:	f0 16 00 cb 	mcall	r6[812]


	make_buffered_stream_lossy(&(centralData->xbee_in_buffer), &(centralData->xbee_in_stream));
8002d58e:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d592:	f0 c9 f6 74 	sub	r9,r8,-2444
8002d596:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d59a:	f0 c8 f8 94 	sub	r8,r8,-1900
8002d59e:	12 9b       	mov	r11,r9
8002d5a0:	10 9c       	mov	r12,r8
8002d5a2:	f0 16 00 e8 	mcall	r6[928]
	make_buffered_stream_lossy(&(centralData->wired_in_buffer), &(centralData->wired_in_stream));
8002d5a6:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d5aa:	f0 c9 f6 44 	sub	r9,r8,-2492
8002d5ae:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d5b2:	f0 c8 f7 91 	sub	r8,r8,-2159
8002d5b6:	12 9b       	mov	r11,r9
8002d5b8:	10 9c       	mov	r12,r8
8002d5ba:	f0 16 00 e8 	mcall	r6[928]
	register_read_stream(get_UART_handle(4), &(centralData->wired_in_stream));
8002d5be:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d5c2:	f0 c5 f6 44 	sub	r5,r8,-2492
8002d5c6:	30 4c       	mov	r12,4
8002d5c8:	f0 16 00 61 	mcall	r6[388]
8002d5cc:	18 98       	mov	r8,r12
8002d5ce:	0a 9b       	mov	r11,r5
8002d5d0:	10 9c       	mov	r12,r8
8002d5d2:	f0 16 00 b7 	mcall	r6[732]
	register_read_stream(get_UART_handle(0), &(centralData->xbee_in_stream));
8002d5d6:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d5da:	f0 c5 f6 74 	sub	r5,r8,-2444
8002d5de:	30 0c       	mov	r12,0
8002d5e0:	f0 16 00 61 	mcall	r6[388]
8002d5e4:	18 98       	mov	r8,r12
8002d5e6:	0a 9b       	mov	r11,r5
8002d5e8:	10 9c       	mov	r12,r8
8002d5ea:	f0 16 00 b7 	mcall	r6[732]

		
	// connect abstracted aliases to hardware ports


	centralData->telemetry_down_stream=&(centralData->xbee_out_stream);
8002d5ee:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d5f2:	f0 c9 f6 8c 	sub	r9,r8,-2420
8002d5f6:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d5fa:	f1 49 0d fc 	st.w	r8[3580],r9
	centralData->telemetry_up_stream=&(centralData->xbee_in_stream);
8002d5fe:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d602:	f0 c9 f6 74 	sub	r9,r8,-2444
8002d606:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d60a:	f1 49 0e 00 	st.w	r8[3584],r9
	centralData->debug_out_stream=&(centralData->wired_out_stream);
8002d60e:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d612:	f0 c9 f6 5c 	sub	r9,r8,-2468
8002d616:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d61a:	f1 49 0e 04 	st.w	r8[3588],r9
	centralData->debug_in_stream=&(centralData->wired_in_stream);
8002d61e:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d622:	f0 c9 f6 44 	sub	r9,r8,-2492
8002d626:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d62a:	f1 49 0e 08 	st.w	r8[3592],r9
	centralData->telemetry_up_stream  =&(centralData->wired_in_stream);		
	centralData->debug_out_stream     =&(centralData->xbee_out_stream);
	centralData->debug_in_stream      =&(centralData->xbee_in_stream);
*/

	init_analog_monitor();
8002d62e:	f0 16 01 ba 	mcall	r6[1768]
	// init mavlink
	init_mavlink(centralData->telemetry_down_stream, centralData->telemetry_up_stream, MAVLINK_SYS_ID);
8002d632:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d636:	f0 f9 0e 00 	ld.w	r9,r8[3584]
8002d63a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d63e:	f0 f8 0d fc 	ld.w	r8,r8[3580]
8002d642:	32 ca       	mov	r10,44
8002d644:	12 9b       	mov	r11,r9
8002d646:	10 9c       	mov	r12,r8
8002d648:	f0 16 01 c8 	mcall	r6[1824]
		
	// init debug output
	dbg_print_init(centralData->debug_out_stream);
8002d64c:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d650:	f0 f8 0e 04 	ld.w	r8,r8[3588]
8002d654:	10 9c       	mov	r12,r8
8002d656:	f0 16 01 5b 	mcall	r6[1388]
		
	init_imu(&(centralData->imu1));
8002d65a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d65e:	10 9c       	mov	r12,r8
8002d660:	f0 16 01 67 	mcall	r6[1436]
	init_bmp085();
8002d664:	f0 16 01 e3 	mcall	r6[1932]

	rc_init();
8002d668:	f0 16 01 31 	mcall	r6[1220]


	Enable_global_interrupt();
8002d66c:	d5 03       	csrf	0x10
	dbg_print("Board initialised.\n");
8002d66e:	fe cc 01 e6 	sub	r12,pc,486
8002d672:	f0 16 00 01 	mcall	r6[4]
}
8002d676:	2f dd       	sub	sp,-12
8002d678:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8002d67c:	80 02       	ld.sh	r2,r0[0x0]
8002d67e:	d3 2a       	popm	r4-r7,r11-r12

8002d680 <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
8002d680:	eb cd 40 c0 	pushm	r6-r7,lr
8002d684:	1a 97       	mov	r7,sp
8002d686:	20 6d       	sub	sp,24
8002d688:	49 e6       	lddpc	r6,8002d700 <interpolate+0x80>
8002d68a:	1e 26       	rsub	r6,pc
8002d68c:	ef 4c ff f8 	st.w	r7[-8],r12
8002d690:	ef 4b ff f4 	st.w	r7[-12],r11
8002d694:	ef 4a ff f0 	st.w	r7[-16],r10
8002d698:	ef 49 ff ec 	st.w	r7[-20],r9
8002d69c:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
8002d6a0:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002d6a4:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002d6a8:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
8002d6ac:	c0 41       	brne	8002d6b4 <interpolate+0x34>
	{
		return y1;
8002d6ae:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002d6b2:	c2 38       	rjmp	8002d6f8 <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
8002d6b4:	ee f9 ff e8 	ld.w	r9,r7[-24]
8002d6b8:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002d6bc:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8002d6c0:	ee fa ff f8 	ld.w	r10,r7[-8]
8002d6c4:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d6c8:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
8002d6cc:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8002d6d0:	ee fa ff f0 	ld.w	r10,r7[-16]
8002d6d4:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002d6d8:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8002d6dc:	12 9b       	mov	r11,r9
8002d6de:	10 9c       	mov	r12,r8
8002d6e0:	f0 16 00 08 	mcall	r6[32]
8002d6e4:	18 98       	mov	r8,r12
8002d6e6:	10 99       	mov	r9,r8
8002d6e8:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002d6ec:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8002d6f0:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
8002d6f4:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
8002d6f8:	10 9c       	mov	r12,r8
8002d6fa:	2f ad       	sub	sp,-24
8002d6fc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002d700:	80 02       	ld.sh	r2,r0[0x0]
8002d702:	d5 0e       	*unknown*

8002d704 <mav_array_memcpy>:

/*
  like memcpy(), but if src is NULL, do a memset to zero
*/
static void mav_array_memcpy(void *dest, const void *src, size_t n)
{
8002d704:	eb cd 40 c0 	pushm	r6-r7,lr
8002d708:	1a 97       	mov	r7,sp
8002d70a:	20 3d       	sub	sp,12
8002d70c:	49 06       	lddpc	r6,8002d74c <mav_array_memcpy+0x48>
8002d70e:	1e 26       	rsub	r6,pc
8002d710:	ef 4c ff fc 	st.w	r7[-4],r12
8002d714:	ef 4b ff f8 	st.w	r7[-8],r11
8002d718:	ef 4a ff f4 	st.w	r7[-12],r10
	if (src == NULL) {
8002d71c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002d720:	58 08       	cp.w	r8,0
8002d722:	c0 91       	brne	8002d734 <mav_array_memcpy+0x30>
		memset(dest, 0, n);
8002d724:	ee fa ff f4 	ld.w	r10,r7[-12]
8002d728:	30 0b       	mov	r11,0
8002d72a:	ee fc ff fc 	ld.w	r12,r7[-4]
8002d72e:	f0 16 00 2f 	mcall	r6[188]
8002d732:	c0 98       	rjmp	8002d744 <mav_array_memcpy+0x40>
	} else {
		memcpy(dest, src, n);
8002d734:	ee fa ff f4 	ld.w	r10,r7[-12]
8002d738:	ee fb ff f8 	ld.w	r11,r7[-8]
8002d73c:	ee fc ff fc 	ld.w	r12,r7[-4]
8002d740:	f0 16 00 20 	mcall	r6[128]
	}
}
8002d744:	2f dd       	sub	sp,-12
8002d746:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002d74a:	00 00       	add	r0,r0
8002d74c:	80 02       	ld.sh	r2,r0[0x0]
8002d74e:	d5 92       	popm	r0-r3,r10-r11,lr
8002d750:	44 65       	lddsp	r5,sp[0x118]
8002d752:	62 75       	ld.w	r5,r1[0x1c]
8002d754:	67 20       	ld.w	r0,r3[0x48]
8002d756:	73 74       	ld.w	r4,r9[0x5c]
8002d758:	72 65       	ld.w	r5,r9[0x18]
8002d75a:	61 6d       	ld.w	sp,r0[0x58]
8002d75c:	20 69       	sub	r9,6
8002d75e:	6e 69       	ld.w	r9,r7[0x18]
8002d760:	74 69       	ld.w	r9,r10[0x18]
8002d762:	61 6c       	ld.w	r12,r0[0x58]
8002d764:	69 73       	ld.w	r3,r4[0x5c]
8002d766:	65 64       	ld.w	r4,r2[0x58]
8002d768:	0a 00       	add	r0,r5

8002d76a <initialisation>:
#include "orca.h"
//#include "flashvault.h"

central_data_t *centralData;

void initialisation() {
8002d76a:	eb cd 40 c0 	pushm	r6-r7,lr
8002d76e:	1a 97       	mov	r7,sp
8002d770:	20 2d       	sub	sp,8
8002d772:	4e 26       	lddpc	r6,8002d8f8 <initialisation+0x18e>
8002d774:	1e 26       	rsub	r6,pc
	int i;
	enum GPS_Engine_Setting engine_nav_settings = GPS_ENGINE_AIRBORNE_4G;
8002d776:	30 88       	mov	r8,8
8002d778:	ef 48 ff fc 	st.w	r7[-4],r8

	centralData = get_central_data();
8002d77c:	f0 16 00 31 	mcall	r6[196]
8002d780:	18 99       	mov	r9,r12
8002d782:	ec f8 00 00 	ld.w	r8,r6[0]
8002d786:	91 09       	st.w	r8[0x0],r9
	initialise_board(centralData);
8002d788:	ec f8 00 00 	ld.w	r8,r6[0]
8002d78c:	70 08       	ld.w	r8,r8[0x0]
8002d78e:	10 9c       	mov	r12,r8
8002d790:	f0 16 02 19 	mcall	r6[2148]
	initialise_central_data();
8002d794:	f0 16 01 b1 	mcall	r6[1732]
	

	init_radar_modules();
8002d798:	f0 16 01 62 	mcall	r6[1416]
	dbg_print("Debug stream initialised\n");
8002d79c:	fe cc 00 4c 	sub	r12,pc,76
8002d7a0:	f0 16 00 01 	mcall	r6[4]

	//init_gps_ubx(engine_nav_settings);
	
	set_servos(&servo_failsafe);
8002d7a4:	ec fc 08 78 	ld.w	r12,r6[2168]
8002d7a8:	f0 16 00 a0 	mcall	r6[640]

	init_onboard_parameters();
8002d7ac:	f0 16 01 e0 	mcall	r6[1920]
	init_mavlink_actions();
8002d7b0:	f0 16 01 d0 	mcall	r6[1856]
	init_pos_integration(&centralData->position_estimator, &centralData->pressure, &centralData->GPS_data);
8002d7b4:	ec f8 00 00 	ld.w	r8,r6[0]
8002d7b8:	70 08       	ld.w	r8,r8[0x0]
8002d7ba:	f0 ca f4 f8 	sub	r10,r8,-2824
8002d7be:	ec f8 00 00 	ld.w	r8,r6[0]
8002d7c2:	70 08       	ld.w	r8,r8[0x0]
8002d7c4:	f0 c9 ef 3c 	sub	r9,r8,-4292
8002d7c8:	ec f8 00 00 	ld.w	r8,r6[0]
8002d7cc:	70 08       	ld.w	r8,r8[0x0]
8002d7ce:	f0 c8 f2 c4 	sub	r8,r8,-3388
8002d7d2:	12 9b       	mov	r11,r9
8002d7d4:	10 9c       	mov	r12,r8
8002d7d6:	f0 16 01 69 	mcall	r6[1444]
	
	centralData->imu1.attitude.calibration_level=LEVELING;	
8002d7da:	ec f8 00 00 	ld.w	r8,r6[0]
8002d7de:	70 09       	ld.w	r9,r8[0x0]
8002d7e0:	30 18       	mov	r8,1
8002d7e2:	f3 68 00 b8 	st.b	r9[184],r8
	centralData->mav_state = MAV_STATE_CALIBRATING;
8002d7e6:	ec f8 00 00 	ld.w	r8,r6[0]
8002d7ea:	70 09       	ld.w	r9,r8[0x0]
8002d7ec:	30 28       	mov	r8,2
8002d7ee:	f3 68 10 bd 	st.b	r9[4285],r8
	centralData->mav_mode = MAV_MODE_PREFLIGHT;
8002d7f2:	ec f8 00 00 	ld.w	r8,r6[0]
8002d7f6:	70 09       	ld.w	r9,r8[0x0]
8002d7f8:	30 08       	mov	r8,0
8002d7fa:	f3 68 10 bc 	st.b	r9[4284],r8

//	calibrate_Gyros(&centralData->imu1);
	for (i=400; i>0; i--) {
8002d7fe:	e0 68 01 90 	mov	r8,400
8002d802:	ef 48 ff f8 	st.w	r7[-8],r8
8002d806:	c2 68       	rjmp	8002d852 <initialisation+0xe8>
		imu_get_raw_data(&(centralData->imu1));
8002d808:	ec f8 00 00 	ld.w	r8,r6[0]
8002d80c:	70 08       	ld.w	r8,r8[0x0]
8002d80e:	10 9c       	mov	r12,r8
8002d810:	f0 16 00 8c 	mcall	r6[560]
		imu_update(&(centralData->imu1), &centralData->position_estimator, &centralData->pressure, &centralData->GPS_data);	
8002d814:	ec f8 00 00 	ld.w	r8,r6[0]
8002d818:	70 08       	ld.w	r8,r8[0x0]
8002d81a:	f0 c9 f4 f8 	sub	r9,r8,-2824
8002d81e:	ec f8 00 00 	ld.w	r8,r6[0]
8002d822:	70 08       	ld.w	r8,r8[0x0]
8002d824:	f0 ca ef 3c 	sub	r10,r8,-4292
8002d828:	ec f8 00 00 	ld.w	r8,r6[0]
8002d82c:	70 08       	ld.w	r8,r8[0x0]
8002d82e:	f0 cb f2 c4 	sub	r11,r8,-3388
8002d832:	ec f8 00 00 	ld.w	r8,r6[0]
8002d836:	70 08       	ld.w	r8,r8[0x0]
8002d838:	10 9c       	mov	r12,r8
8002d83a:	f0 16 00 8d 	mcall	r6[564]
		mavlink_protocol_update();	
8002d83e:	f0 16 00 d8 	mcall	r6[864]
		delay_ms(5);
8002d842:	30 5c       	mov	r12,5
8002d844:	f0 16 00 f9 	mcall	r6[996]
	centralData->imu1.attitude.calibration_level=LEVELING;	
	centralData->mav_state = MAV_STATE_CALIBRATING;
	centralData->mav_mode = MAV_MODE_PREFLIGHT;

//	calibrate_Gyros(&centralData->imu1);
	for (i=400; i>0; i--) {
8002d848:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002d84c:	20 18       	sub	r8,1
8002d84e:	ef 48 ff f8 	st.w	r7[-8],r8
8002d852:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002d856:	58 08       	cp.w	r8,0
8002d858:	e0 8c 00 04 	brvs	8002d860 <initialisation+0xf6>
8002d85c:	fe 99 ff d6 	brgt	8002d808 <initialisation+0x9e>
	for (i=100; i>0; i--) {
		imu_update(&(centralData->imu1), &centralData->position_estimator, &centralData->pressure, &centralData->GPS_data);	
		mavlink_protocol_update();			
		delay_ms(5);
	}*/
	centralData->imu1.attitude.calibration_level=OFF;
8002d860:	ec f8 00 00 	ld.w	r8,r6[0]
8002d864:	70 09       	ld.w	r9,r8[0x0]
8002d866:	30 08       	mov	r8,0
8002d868:	f3 68 00 b8 	st.b	r9[184],r8
	//reset position estimate
	for (i=0; i<3; i++) {
8002d86c:	30 08       	mov	r8,0
8002d86e:	ef 48 ff f8 	st.w	r7[-8],r8
8002d872:	c2 48       	rjmp	8002d8ba <initialisation+0x150>
		// clean acceleration estimate without gravity:
		centralData->position_estimator.vel_bf[i]=0.0;
8002d874:	ec f8 00 00 	ld.w	r8,r6[0]
8002d878:	70 08       	ld.w	r8,r8[0x0]
8002d87a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002d87e:	f2 c9 fc a6 	sub	r9,r9,-858
8002d882:	30 0a       	mov	r10,0
8002d884:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		centralData->position_estimator.vel[i]=0.0;
8002d888:	ec f8 00 00 	ld.w	r8,r6[0]
8002d88c:	70 08       	ld.w	r8,r8[0x0]
8002d88e:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002d892:	f2 c9 fc a3 	sub	r9,r9,-861
8002d896:	30 0a       	mov	r10,0
8002d898:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		centralData->position_estimator.localPosition.pos[i]=0.0;
8002d89c:	ec f8 00 00 	ld.w	r8,r6[0]
8002d8a0:	70 08       	ld.w	r8,r8[0x0]
8002d8a2:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002d8a6:	f2 c9 fc 99 	sub	r9,r9,-871
8002d8aa:	30 0a       	mov	r10,0
8002d8ac:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		mavlink_protocol_update();			
		delay_ms(5);
	}*/
	centralData->imu1.attitude.calibration_level=OFF;
	//reset position estimate
	for (i=0; i<3; i++) {
8002d8b0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002d8b4:	2f f8       	sub	r8,-1
8002d8b6:	ef 48 ff f8 	st.w	r7[-8],r8
8002d8ba:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002d8be:	58 28       	cp.w	r8,2
8002d8c0:	fe 9a ff da 	brle	8002d874 <initialisation+0x10a>
		// clean acceleration estimate without gravity:
		centralData->position_estimator.vel_bf[i]=0.0;
		centralData->position_estimator.vel[i]=0.0;
		centralData->position_estimator.localPosition.pos[i]=0.0;
	}
	centralData->mav_state = MAV_STATE_STANDBY;
8002d8c4:	ec f8 00 00 	ld.w	r8,r6[0]
8002d8c8:	70 09       	ld.w	r9,r8[0x0]
8002d8ca:	30 38       	mov	r8,3
8002d8cc:	f3 68 10 bd 	st.b	r9[4285],r8
	centralData->mav_mode = MAV_MODE_MANUAL_DISARMED;
8002d8d0:	ec f8 00 00 	ld.w	r8,r6[0]
8002d8d4:	70 09       	ld.w	r9,r8[0x0]
8002d8d6:	34 08       	mov	r8,64
8002d8d8:	f3 68 10 bc 	st.b	r9[4284],r8
	init_nav();
8002d8dc:	f0 16 01 b8 	mcall	r6[1760]
	init_waypoint_handler();
8002d8e0:	f0 16 01 53 	mcall	r6[1356]
	//e_init();
	
	init_neighbors();
8002d8e4:	f0 16 01 84 	mcall	r6[1552]
	init_orca();
8002d8e8:	f0 16 02 02 	mcall	r6[2056]
	
	LED_On(LED1);
8002d8ec:	30 2c       	mov	r12,2
8002d8ee:	f0 16 01 3c 	mcall	r6[1264]
}
8002d8f2:	2f ed       	sub	sp,-8
8002d8f4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002d8f8:	80 02       	ld.sh	r2,r0[0x0]
8002d8fa:	d5 f8       	*unknown*

8002d8fc <main>:



void main (void)
{
8002d8fc:	eb cd 40 c0 	pushm	r6-r7,lr
8002d900:	1a 97       	mov	r7,sp
8002d902:	48 b6       	lddpc	r6,8002d92c <main+0x30>
8002d904:	1e 26       	rsub	r6,pc
	
	initialisation();
8002d906:	f0 16 01 d4 	mcall	r6[1872]
	
	create_tasks();
8002d90a:	f0 16 02 0f 	mcall	r6[2108]
	
	// turn on simulation mode: 1: simulation mode, 0: reality
	centralData->simulation_mode = 1;
8002d90e:	ec f8 00 00 	ld.w	r8,r6[0]
8002d912:	70 08       	ld.w	r8,r8[0x0]
8002d914:	30 19       	mov	r9,1
8002d916:	f1 49 10 c0 	st.w	r8[4288],r9
	// main loop
	
	while (1==1) {
		
		//run_scheduler_update(get_main_taskset(), FIXED_PRIORITY);
		run_scheduler_update(get_main_taskset(), ROUND_ROBIN);
8002d91a:	f0 16 00 fa 	mcall	r6[1000]
8002d91e:	18 98       	mov	r8,r12
8002d920:	30 0b       	mov	r11,0
8002d922:	10 9c       	mov	r12,r8
8002d924:	f0 16 00 e4 	mcall	r6[912]
		
		//LED_On(LED1);

		
	}		
8002d928:	cf 9b       	rjmp	8002d91a <main+0x1e>
8002d92a:	00 00       	add	r0,r0
8002d92c:	80 02       	ld.sh	r2,r0[0x0]
8002d92e:	d7 88       	*unknown*

8002d930 <cos>:
8002d930:	d4 21       	pushm	r4-r7,lr
8002d932:	20 4d       	sub	sp,16
8002d934:	e0 6e 21 fb 	mov	lr,8699
8002d938:	ea 1e 3f e9 	orh	lr,0x3fe9
8002d93c:	14 98       	mov	r8,r10
8002d93e:	16 99       	mov	r9,r11
8002d940:	16 95       	mov	r5,r11
8002d942:	14 96       	mov	r6,r10
8002d944:	16 97       	mov	r7,r11
8002d946:	16 94       	mov	r4,r11
8002d948:	f9 db c0 1f 	bfextu	r12,r11,0x0,0x1f
8002d94c:	1c 3c       	cp.w	r12,lr
8002d94e:	e0 89 00 05 	brgt	8002d958 <cos+0x28>
8002d952:	30 08       	mov	r8,0
8002d954:	30 09       	mov	r9,0
8002d956:	c1 a8       	rjmp	8002d98a <cos+0x5a>
8002d958:	e0 65 ff ff 	mov	r5,65535
8002d95c:	ea 15 7f ef 	orh	r5,0x7fef
8002d960:	0a 3c       	cp.w	r12,r5
8002d962:	e0 8a 00 05 	brle	8002d96c <cos+0x3c>
8002d966:	e0 a0 17 bd 	rcall	800308e0 <__avr32_f64_sub>
8002d96a:	c2 68       	rjmp	8002d9b6 <cos+0x86>
8002d96c:	1a 9c       	mov	r12,sp
8002d96e:	e0 a0 0b 47 	rcall	8002effc <__ieee754_rem_pio2>
8002d972:	f9 dc c0 02 	bfextu	r12,r12,0x0,0x2
8002d976:	58 1c       	cp.w	r12,1
8002d978:	c0 c0       	breq	8002d990 <cos+0x60>
8002d97a:	58 2c       	cp.w	r12,2
8002d97c:	c1 10       	breq	8002d99e <cos+0x6e>
8002d97e:	fa e8 00 08 	ld.d	r8,sp[8]
8002d982:	fa ea 00 00 	ld.d	r10,sp[0]
8002d986:	58 0c       	cp.w	r12,0
8002d988:	c1 41       	brne	8002d9b0 <cos+0x80>
8002d98a:	e0 a0 0e 37 	rcall	8002f5f8 <__kernel_cos>
8002d98e:	c1 48       	rjmp	8002d9b6 <cos+0x86>
8002d990:	fa e8 00 08 	ld.d	r8,sp[8]
8002d994:	fa ea 00 00 	ld.d	r10,sp[0]
8002d998:	e0 a0 12 94 	rcall	8002fec0 <__kernel_sin>
8002d99c:	c0 78       	rjmp	8002d9aa <cos+0x7a>
8002d99e:	fa e8 00 08 	ld.d	r8,sp[8]
8002d9a2:	fa ea 00 00 	ld.d	r10,sp[0]
8002d9a6:	e0 a0 0e 29 	rcall	8002f5f8 <__kernel_cos>
8002d9aa:	ee 1b 80 00 	eorh	r11,0x8000
8002d9ae:	c0 48       	rjmp	8002d9b6 <cos+0x86>
8002d9b0:	30 1c       	mov	r12,1
8002d9b2:	e0 a0 12 87 	rcall	8002fec0 <__kernel_sin>
8002d9b6:	2f cd       	sub	sp,-16
8002d9b8:	d8 22       	popm	r4-r7,pc
8002d9ba:	d7 03       	nop

8002d9bc <sin>:
8002d9bc:	d4 21       	pushm	r4-r7,lr
8002d9be:	20 4d       	sub	sp,16
8002d9c0:	e0 6e 21 fb 	mov	lr,8699
8002d9c4:	ea 1e 3f e9 	orh	lr,0x3fe9
8002d9c8:	14 98       	mov	r8,r10
8002d9ca:	16 99       	mov	r9,r11
8002d9cc:	16 95       	mov	r5,r11
8002d9ce:	14 96       	mov	r6,r10
8002d9d0:	16 97       	mov	r7,r11
8002d9d2:	16 94       	mov	r4,r11
8002d9d4:	f9 db c0 1f 	bfextu	r12,r11,0x0,0x1f
8002d9d8:	1c 3c       	cp.w	r12,lr
8002d9da:	e0 89 00 06 	brgt	8002d9e6 <sin+0x2a>
8002d9de:	30 0c       	mov	r12,0
8002d9e0:	30 08       	mov	r8,0
8002d9e2:	30 09       	mov	r9,0
8002d9e4:	c1 b8       	rjmp	8002da1a <sin+0x5e>
8002d9e6:	e0 65 ff ff 	mov	r5,65535
8002d9ea:	ea 15 7f ef 	orh	r5,0x7fef
8002d9ee:	0a 3c       	cp.w	r12,r5
8002d9f0:	e0 8a 00 05 	brle	8002d9fa <sin+0x3e>
8002d9f4:	e0 a0 17 76 	rcall	800308e0 <__avr32_f64_sub>
8002d9f8:	c2 78       	rjmp	8002da46 <sin+0x8a>
8002d9fa:	1a 9c       	mov	r12,sp
8002d9fc:	e0 a0 0b 00 	rcall	8002effc <__ieee754_rem_pio2>
8002da00:	f9 dc c0 02 	bfextu	r12,r12,0x0,0x2
8002da04:	58 1c       	cp.w	r12,1
8002da06:	c0 d0       	breq	8002da20 <sin+0x64>
8002da08:	58 2c       	cp.w	r12,2
8002da0a:	c1 20       	breq	8002da2e <sin+0x72>
8002da0c:	fa e8 00 08 	ld.d	r8,sp[8]
8002da10:	fa ea 00 00 	ld.d	r10,sp[0]
8002da14:	58 0c       	cp.w	r12,0
8002da16:	c1 41       	brne	8002da3e <sin+0x82>
8002da18:	30 1c       	mov	r12,1
8002da1a:	e0 a0 12 53 	rcall	8002fec0 <__kernel_sin>
8002da1e:	c1 48       	rjmp	8002da46 <sin+0x8a>
8002da20:	fa e8 00 08 	ld.d	r8,sp[8]
8002da24:	fa ea 00 00 	ld.d	r10,sp[0]
8002da28:	e0 a0 0d e8 	rcall	8002f5f8 <__kernel_cos>
8002da2c:	c0 d8       	rjmp	8002da46 <sin+0x8a>
8002da2e:	30 1c       	mov	r12,1
8002da30:	fa e8 00 08 	ld.d	r8,sp[8]
8002da34:	fa ea 00 00 	ld.d	r10,sp[0]
8002da38:	e0 a0 12 44 	rcall	8002fec0 <__kernel_sin>
8002da3c:	c0 38       	rjmp	8002da42 <sin+0x86>
8002da3e:	e0 a0 0d dd 	rcall	8002f5f8 <__kernel_cos>
8002da42:	ee 1b 80 00 	eorh	r11,0x8000
8002da46:	2f cd       	sub	sp,-16
8002da48:	d8 22       	popm	r4-r7,pc
8002da4a:	d7 03       	nop

8002da4c <asin>:
8002da4c:	d4 31       	pushm	r0-r7,lr
8002da4e:	20 9d       	sub	sp,36
8002da50:	4a 17       	lddpc	r7,8002dad4 <asin+0x88>
8002da52:	14 94       	mov	r4,r10
8002da54:	16 95       	mov	r5,r11
8002da56:	cf 3d       	rcall	8002de3c <__ieee754_asin>
8002da58:	6e 08       	ld.w	r8,r7[0x0]
8002da5a:	14 92       	mov	r2,r10
8002da5c:	16 93       	mov	r3,r11
8002da5e:	5b f8       	cp.w	r8,-1
8002da60:	c3 50       	breq	8002daca <asin+0x7e>
8002da62:	08 9a       	mov	r10,r4
8002da64:	0a 9b       	mov	r11,r5
8002da66:	e0 a0 15 37 	rcall	800304d4 <__isnand>
8002da6a:	18 96       	mov	r6,r12
8002da6c:	c2 f1       	brne	8002daca <asin+0x7e>
8002da6e:	08 9a       	mov	r10,r4
8002da70:	0a 9b       	mov	r11,r5
8002da72:	e0 a0 14 95 	rcall	8003039c <fabs>
8002da76:	14 98       	mov	r8,r10
8002da78:	16 99       	mov	r9,r11
8002da7a:	30 0a       	mov	r10,0
8002da7c:	fc 1b 3f f0 	movh	r11,0x3ff0
8002da80:	e0 a0 19 56 	rcall	80030d2c <__avr32_f64_cmp_lt>
8002da84:	c2 30       	breq	8002daca <asin+0x7e>
8002da86:	30 18       	mov	r8,1
8002da88:	50 08       	stdsp	sp[0x0],r8
8002da8a:	49 48       	lddpc	r8,8002dad8 <asin+0x8c>
8002da8c:	50 86       	stdsp	sp[0x20],r6
8002da8e:	50 18       	stdsp	sp[0x4],r8
8002da90:	fa e5 00 08 	st.d	sp[8],r4
8002da94:	fa e5 00 10 	st.d	sp[16],r4
8002da98:	49 1c       	lddpc	r12,8002dadc <asin+0x90>
8002da9a:	e0 a0 15 2c 	rcall	800304f2 <nan>
8002da9e:	fa eb 00 18 	st.d	sp[24],r10
8002daa2:	6e 08       	ld.w	r8,r7[0x0]
8002daa4:	58 28       	cp.w	r8,2
8002daa6:	c0 50       	breq	8002dab0 <asin+0x64>
8002daa8:	1a 9c       	mov	r12,sp
8002daaa:	e0 a0 15 23 	rcall	800304f0 <matherr>
8002daae:	c0 51       	brne	8002dab8 <asin+0x6c>
8002dab0:	e0 a0 1d 56 	rcall	8003155c <__errno>
8002dab4:	32 18       	mov	r8,33
8002dab6:	99 08       	st.w	r12[0x0],r8
8002dab8:	40 88       	lddsp	r8,sp[0x20]
8002daba:	58 08       	cp.w	r8,0
8002dabc:	c0 50       	breq	8002dac6 <asin+0x7a>
8002dabe:	e0 a0 1d 4f 	rcall	8003155c <__errno>
8002dac2:	40 88       	lddsp	r8,sp[0x20]
8002dac4:	99 08       	st.w	r12[0x0],r8
8002dac6:	fa e2 00 18 	ld.d	r2,sp[24]
8002daca:	04 9a       	mov	r10,r2
8002dacc:	06 9b       	mov	r11,r3
8002dace:	2f 7d       	sub	sp,-36
8002dad0:	d8 32       	popm	r0-r7,pc
8002dad2:	d7 03       	nop
8002dad4:	00 00       	add	r0,r0
8002dad6:	23 44       	sub	r4,52
8002dad8:	80 03       	ld.sh	r3,r0[0x0]
8002dada:	1d 74       	ld.ub	r4,--lr
8002dadc:	80 03       	ld.sh	r3,r0[0x0]
8002dade:	1d 78       	ld.ub	r8,--lr

8002dae0 <atan2>:
8002dae0:	d4 01       	pushm	lr
8002dae2:	e0 a0 04 25 	rcall	8002e32c <__ieee754_atan2>
8002dae6:	d8 02       	popm	pc

8002dae8 <pow>:
8002dae8:	d4 31       	pushm	r0-r7,lr
8002daea:	20 cd       	sub	sp,48
8002daec:	10 94       	mov	r4,r8
8002daee:	14 92       	mov	r2,r10
8002daf0:	16 93       	mov	r3,r11
8002daf2:	12 95       	mov	r5,r9
8002daf4:	e0 a0 05 32 	rcall	8002e558 <__ieee754_pow>
8002daf8:	4b f6       	lddpc	r6,8002dbf4 <pow+0x10c>
8002dafa:	14 90       	mov	r0,r10
8002dafc:	16 91       	mov	r1,r11
8002dafe:	6c 08       	ld.w	r8,r6[0x0]
8002db00:	5b f8       	cp.w	r8,-1
8002db02:	e0 80 01 46 	breq	8002dd8e <pow+0x2a6>
8002db06:	08 9a       	mov	r10,r4
8002db08:	0a 9b       	mov	r11,r5
8002db0a:	e0 a0 14 e5 	rcall	800304d4 <__isnand>
8002db0e:	50 2c       	stdsp	sp[0x8],r12
8002db10:	e0 81 01 3f 	brne	8002dd8e <pow+0x2a6>
8002db14:	04 9a       	mov	r10,r2
8002db16:	06 9b       	mov	r11,r3
8002db18:	e0 a0 14 de 	rcall	800304d4 <__isnand>
8002db1c:	18 97       	mov	r7,r12
8002db1e:	c2 40       	breq	8002db66 <pow+0x7e>
8002db20:	30 08       	mov	r8,0
8002db22:	30 09       	mov	r9,0
8002db24:	08 9a       	mov	r10,r4
8002db26:	0a 9b       	mov	r11,r5
8002db28:	e0 a0 18 bb 	rcall	80030c9e <__avr32_f64_cmp_eq>
8002db2c:	e0 80 01 31 	breq	8002dd8e <pow+0x2a6>
8002db30:	30 18       	mov	r8,1
8002db32:	50 38       	stdsp	sp[0xc],r8
8002db34:	4b 18       	lddpc	r8,8002dbf8 <pow+0x110>
8002db36:	40 2c       	lddsp	r12,sp[0x8]
8002db38:	50 48       	stdsp	sp[0x10],r8
8002db3a:	fc 19 3f f0 	movh	r9,0x3ff0
8002db3e:	30 08       	mov	r8,0
8002db40:	fa e3 00 14 	st.d	sp[20],r2
8002db44:	fa e5 00 1c 	st.d	sp[28],r4
8002db48:	50 bc       	stdsp	sp[0x2c],r12
8002db4a:	fa e9 00 24 	st.d	sp[36],r8
8002db4e:	6c 0a       	ld.w	r10,r6[0x0]
8002db50:	5b fa       	cp.w	r10,-1
8002db52:	5f 0b       	sreq	r11
8002db54:	58 2a       	cp.w	r10,2
8002db56:	5f 0a       	sreq	r10
8002db58:	f5 eb 10 0b 	or	r11,r10,r11
8002db5c:	f8 0b 18 00 	cp.b	r11,r12
8002db60:	e0 81 01 0e 	brne	8002dd7c <pow+0x294>
8002db64:	c8 08       	rjmp	8002dc64 <pow+0x17c>
8002db66:	30 08       	mov	r8,0
8002db68:	30 09       	mov	r9,0
8002db6a:	04 9a       	mov	r10,r2
8002db6c:	06 9b       	mov	r11,r3
8002db6e:	e0 a0 18 98 	rcall	80030c9e <__avr32_f64_cmp_eq>
8002db72:	c4 50       	breq	8002dbfc <pow+0x114>
8002db74:	30 08       	mov	r8,0
8002db76:	30 09       	mov	r9,0
8002db78:	08 9a       	mov	r10,r4
8002db7a:	0a 9b       	mov	r11,r5
8002db7c:	e0 a0 18 91 	rcall	80030c9e <__avr32_f64_cmp_eq>
8002db80:	c1 70       	breq	8002dbae <pow+0xc6>
8002db82:	30 18       	mov	r8,1
8002db84:	50 38       	stdsp	sp[0xc],r8
8002db86:	49 d8       	lddpc	r8,8002dbf8 <pow+0x110>
8002db88:	30 09       	mov	r9,0
8002db8a:	50 48       	stdsp	sp[0x10],r8
8002db8c:	50 b7       	stdsp	sp[0x2c],r7
8002db8e:	30 08       	mov	r8,0
8002db90:	fa e3 00 14 	st.d	sp[20],r2
8002db94:	fa e9 00 24 	st.d	sp[36],r8
8002db98:	fa e5 00 1c 	st.d	sp[28],r4
8002db9c:	6c 08       	ld.w	r8,r6[0x0]
8002db9e:	58 08       	cp.w	r8,0
8002dba0:	c6 20       	breq	8002dc64 <pow+0x17c>
8002dba2:	30 08       	mov	r8,0
8002dba4:	fc 19 3f f0 	movh	r9,0x3ff0
8002dba8:	fa e9 00 24 	st.d	sp[36],r8
8002dbac:	ce 88       	rjmp	8002dd7c <pow+0x294>
8002dbae:	08 9a       	mov	r10,r4
8002dbb0:	0a 9b       	mov	r11,r5
8002dbb2:	e0 a0 13 f9 	rcall	800303a4 <finite>
8002dbb6:	e0 80 00 ec 	breq	8002dd8e <pow+0x2a6>
8002dbba:	30 08       	mov	r8,0
8002dbbc:	30 09       	mov	r9,0
8002dbbe:	08 9a       	mov	r10,r4
8002dbc0:	0a 9b       	mov	r11,r5
8002dbc2:	e0 a0 18 b5 	rcall	80030d2c <__avr32_f64_cmp_lt>
8002dbc6:	e0 80 00 e4 	breq	8002dd8e <pow+0x2a6>
8002dbca:	30 18       	mov	r8,1
8002dbcc:	50 b7       	stdsp	sp[0x2c],r7
8002dbce:	50 38       	stdsp	sp[0xc],r8
8002dbd0:	fa e3 00 14 	st.d	sp[20],r2
8002dbd4:	48 98       	lddpc	r8,8002dbf8 <pow+0x110>
8002dbd6:	fa e5 00 1c 	st.d	sp[28],r4
8002dbda:	50 48       	stdsp	sp[0x10],r8
8002dbdc:	6c 08       	ld.w	r8,r6[0x0]
8002dbde:	58 08       	cp.w	r8,0
8002dbe0:	c3 30       	breq	8002dc46 <pow+0x15e>
8002dbe2:	30 0a       	mov	r10,0
8002dbe4:	f0 6b 00 00 	mov	r11,-1048576
8002dbe8:	fa eb 00 24 	st.d	sp[36],r10
8002dbec:	58 28       	cp.w	r8,2
8002dbee:	c4 10       	breq	8002dc70 <pow+0x188>
8002dbf0:	c3 a8       	rjmp	8002dc64 <pow+0x17c>
8002dbf2:	d7 03       	nop
8002dbf4:	00 00       	add	r0,r0
8002dbf6:	23 44       	sub	r4,52
8002dbf8:	80 03       	ld.sh	r3,r0[0x0]
8002dbfa:	1d 7c       	ld.ub	r12,--lr
8002dbfc:	00 9a       	mov	r10,r0
8002dbfe:	02 9b       	mov	r11,r1
8002dc00:	e0 a0 13 d2 	rcall	800303a4 <finite>
8002dc04:	18 97       	mov	r7,r12
8002dc06:	e0 81 00 8f 	brne	8002dd24 <pow+0x23c>
8002dc0a:	04 9a       	mov	r10,r2
8002dc0c:	06 9b       	mov	r11,r3
8002dc0e:	e0 a0 13 cb 	rcall	800303a4 <finite>
8002dc12:	e0 80 00 89 	breq	8002dd24 <pow+0x23c>
8002dc16:	08 9a       	mov	r10,r4
8002dc18:	0a 9b       	mov	r11,r5
8002dc1a:	e0 a0 13 c5 	rcall	800303a4 <finite>
8002dc1e:	e0 80 00 83 	breq	8002dd24 <pow+0x23c>
8002dc22:	00 9a       	mov	r10,r0
8002dc24:	02 9b       	mov	r11,r1
8002dc26:	e0 a0 14 57 	rcall	800304d4 <__isnand>
8002dc2a:	4b e8       	lddpc	r8,8002dd20 <pow+0x238>
8002dc2c:	58 0c       	cp.w	r12,0
8002dc2e:	c2 50       	breq	8002dc78 <pow+0x190>
8002dc30:	50 48       	stdsp	sp[0x10],r8
8002dc32:	50 b7       	stdsp	sp[0x2c],r7
8002dc34:	30 18       	mov	r8,1
8002dc36:	fa e3 00 14 	st.d	sp[20],r2
8002dc3a:	fa e5 00 1c 	st.d	sp[28],r4
8002dc3e:	50 38       	stdsp	sp[0xc],r8
8002dc40:	6c 07       	ld.w	r7,r6[0x0]
8002dc42:	58 07       	cp.w	r7,0
8002dc44:	c0 61       	brne	8002dc50 <pow+0x168>
8002dc46:	30 08       	mov	r8,0
8002dc48:	30 09       	mov	r9,0
8002dc4a:	fa e9 00 24 	st.d	sp[36],r8
8002dc4e:	c0 b8       	rjmp	8002dc64 <pow+0x17c>
8002dc50:	30 08       	mov	r8,0
8002dc52:	30 09       	mov	r9,0
8002dc54:	10 9a       	mov	r10,r8
8002dc56:	12 9b       	mov	r11,r9
8002dc58:	e0 a0 18 9e 	rcall	80030d94 <__avr32_f64_div>
8002dc5c:	fa eb 00 24 	st.d	sp[36],r10
8002dc60:	58 27       	cp.w	r7,2
8002dc62:	c0 70       	breq	8002dc70 <pow+0x188>
8002dc64:	fa cc ff f4 	sub	r12,sp,-12
8002dc68:	e0 a0 14 44 	rcall	800304f0 <matherr>
8002dc6c:	e0 81 00 88 	brne	8002dd7c <pow+0x294>
8002dc70:	e0 a0 1c 76 	rcall	8003155c <__errno>
8002dc74:	32 18       	mov	r8,33
8002dc76:	c8 28       	rjmp	8002dd7a <pow+0x292>
8002dc78:	50 48       	stdsp	sp[0x10],r8
8002dc7a:	50 bc       	stdsp	sp[0x2c],r12
8002dc7c:	30 38       	mov	r8,3
8002dc7e:	fa e3 00 14 	st.d	sp[20],r2
8002dc82:	50 38       	stdsp	sp[0xc],r8
8002dc84:	fa e5 00 1c 	st.d	sp[28],r4
8002dc88:	6c 08       	ld.w	r8,r6[0x0]
8002dc8a:	58 08       	cp.w	r8,0
8002dc8c:	c2 81       	brne	8002dcdc <pow+0x1f4>
8002dc8e:	fc 18 e0 00 	movh	r8,0xe000
8002dc92:	e0 69 ff ff 	mov	r9,65535
8002dc96:	ea 19 47 ef 	orh	r9,0x47ef
8002dc9a:	04 9a       	mov	r10,r2
8002dc9c:	fa e9 00 24 	st.d	sp[36],r8
8002dca0:	06 9b       	mov	r11,r3
8002dca2:	30 08       	mov	r8,0
8002dca4:	30 09       	mov	r9,0
8002dca6:	e0 a0 18 43 	rcall	80030d2c <__avr32_f64_cmp_lt>
8002dcaa:	c5 c0       	breq	8002dd62 <pow+0x27a>
8002dcac:	fc 19 3f e0 	movh	r9,0x3fe0
8002dcb0:	30 08       	mov	r8,0
8002dcb2:	08 9a       	mov	r10,r4
8002dcb4:	0a 9b       	mov	r11,r5
8002dcb6:	e0 a0 15 29 	rcall	80030708 <__avr32_f64_mul>
8002dcba:	16 99       	mov	r9,r11
8002dcbc:	50 0a       	stdsp	sp[0x0],r10
8002dcbe:	50 19       	stdsp	sp[0x4],r9
8002dcc0:	e0 a0 14 1e 	rcall	800304fc <rint>
8002dcc4:	40 19       	lddsp	r9,sp[0x4]
8002dcc6:	40 08       	lddsp	r8,sp[0x0]
8002dcc8:	e0 a0 17 eb 	rcall	80030c9e <__avr32_f64_cmp_eq>
8002dccc:	c4 b1       	brne	8002dd62 <pow+0x27a>
8002dcce:	fc 18 e0 00 	movh	r8,0xe000
8002dcd2:	e0 69 ff ff 	mov	r9,65535
8002dcd6:	ea 19 c7 ef 	orh	r9,0xc7ef
8002dcda:	c4 28       	rjmp	8002dd5e <pow+0x276>
8002dcdc:	30 08       	mov	r8,0
8002dcde:	fc 19 7f f0 	movh	r9,0x7ff0
8002dce2:	04 9a       	mov	r10,r2
8002dce4:	fa e9 00 24 	st.d	sp[36],r8
8002dce8:	06 9b       	mov	r11,r3
8002dcea:	30 08       	mov	r8,0
8002dcec:	30 09       	mov	r9,0
8002dcee:	e0 a0 18 1f 	rcall	80030d2c <__avr32_f64_cmp_lt>
8002dcf2:	c3 80       	breq	8002dd62 <pow+0x27a>
8002dcf4:	fc 19 3f e0 	movh	r9,0x3fe0
8002dcf8:	30 08       	mov	r8,0
8002dcfa:	08 9a       	mov	r10,r4
8002dcfc:	0a 9b       	mov	r11,r5
8002dcfe:	e0 a0 15 05 	rcall	80030708 <__avr32_f64_mul>
8002dd02:	16 99       	mov	r9,r11
8002dd04:	50 0a       	stdsp	sp[0x0],r10
8002dd06:	50 19       	stdsp	sp[0x4],r9
8002dd08:	e0 a0 13 fa 	rcall	800304fc <rint>
8002dd0c:	40 19       	lddsp	r9,sp[0x4]
8002dd0e:	40 08       	lddsp	r8,sp[0x0]
8002dd10:	e0 a0 17 c7 	rcall	80030c9e <__avr32_f64_cmp_eq>
8002dd14:	c2 71       	brne	8002dd62 <pow+0x27a>
8002dd16:	30 08       	mov	r8,0
8002dd18:	f0 69 00 00 	mov	r9,-1048576
8002dd1c:	c2 18       	rjmp	8002dd5e <pow+0x276>
8002dd1e:	d7 03       	nop
8002dd20:	80 03       	ld.sh	r3,r0[0x0]
8002dd22:	1d 7c       	ld.ub	r12,--lr
8002dd24:	30 08       	mov	r8,0
8002dd26:	30 09       	mov	r9,0
8002dd28:	00 9a       	mov	r10,r0
8002dd2a:	02 9b       	mov	r11,r1
8002dd2c:	e0 a0 17 b9 	rcall	80030c9e <__avr32_f64_cmp_eq>
8002dd30:	c2 f0       	breq	8002dd8e <pow+0x2a6>
8002dd32:	04 9a       	mov	r10,r2
8002dd34:	06 9b       	mov	r11,r3
8002dd36:	e0 a0 13 37 	rcall	800303a4 <finite>
8002dd3a:	c2 a0       	breq	8002dd8e <pow+0x2a6>
8002dd3c:	08 9a       	mov	r10,r4
8002dd3e:	0a 9b       	mov	r11,r5
8002dd40:	e0 a0 13 32 	rcall	800303a4 <finite>
8002dd44:	c2 50       	breq	8002dd8e <pow+0x2a6>
8002dd46:	30 48       	mov	r8,4
8002dd48:	50 38       	stdsp	sp[0xc],r8
8002dd4a:	49 48       	lddpc	r8,8002dd98 <pow+0x2b0>
8002dd4c:	50 48       	stdsp	sp[0x10],r8
8002dd4e:	30 08       	mov	r8,0
8002dd50:	fa e3 00 14 	st.d	sp[20],r2
8002dd54:	50 b8       	stdsp	sp[0x2c],r8
8002dd56:	fa e5 00 1c 	st.d	sp[28],r4
8002dd5a:	30 08       	mov	r8,0
8002dd5c:	30 09       	mov	r9,0
8002dd5e:	fa e9 00 24 	st.d	sp[36],r8
8002dd62:	48 f8       	lddpc	r8,8002dd9c <pow+0x2b4>
8002dd64:	70 08       	ld.w	r8,r8[0x0]
8002dd66:	58 28       	cp.w	r8,2
8002dd68:	c0 60       	breq	8002dd74 <pow+0x28c>
8002dd6a:	fa cc ff f4 	sub	r12,sp,-12
8002dd6e:	e0 a0 13 c1 	rcall	800304f0 <matherr>
8002dd72:	c0 51       	brne	8002dd7c <pow+0x294>
8002dd74:	e0 a0 1b f4 	rcall	8003155c <__errno>
8002dd78:	32 28       	mov	r8,34
8002dd7a:	99 08       	st.w	r12[0x0],r8
8002dd7c:	40 b8       	lddsp	r8,sp[0x2c]
8002dd7e:	58 08       	cp.w	r8,0
8002dd80:	c0 50       	breq	8002dd8a <pow+0x2a2>
8002dd82:	e0 a0 1b ed 	rcall	8003155c <__errno>
8002dd86:	40 b8       	lddsp	r8,sp[0x2c]
8002dd88:	99 08       	st.w	r12[0x0],r8
8002dd8a:	fa e0 00 24 	ld.d	r0,sp[36]
8002dd8e:	00 9a       	mov	r10,r0
8002dd90:	02 9b       	mov	r11,r1
8002dd92:	2f 4d       	sub	sp,-48
8002dd94:	d8 32       	popm	r0-r7,pc
8002dd96:	d7 03       	nop
8002dd98:	80 03       	ld.sh	r3,r0[0x0]
8002dd9a:	1d 7c       	ld.ub	r12,--lr
8002dd9c:	00 00       	add	r0,r0
8002dd9e:	23 44       	sub	r4,52

8002dda0 <sqrt>:
8002dda0:	d4 31       	pushm	r0-r7,lr
8002dda2:	20 9d       	sub	sp,36
8002dda4:	4a 47       	lddpc	r7,8002de34 <sqrt+0x94>
8002dda6:	14 94       	mov	r4,r10
8002dda8:	16 95       	mov	r5,r11
8002ddaa:	e0 a0 0b 61 	rcall	8002f46c <__ieee754_sqrt>
8002ddae:	6e 08       	ld.w	r8,r7[0x0]
8002ddb0:	14 92       	mov	r2,r10
8002ddb2:	16 93       	mov	r3,r11
8002ddb4:	5b f8       	cp.w	r8,-1
8002ddb6:	c3 a0       	breq	8002de2a <sqrt+0x8a>
8002ddb8:	08 9a       	mov	r10,r4
8002ddba:	0a 9b       	mov	r11,r5
8002ddbc:	e0 a0 13 8c 	rcall	800304d4 <__isnand>
8002ddc0:	18 96       	mov	r6,r12
8002ddc2:	c3 41       	brne	8002de2a <sqrt+0x8a>
8002ddc4:	30 08       	mov	r8,0
8002ddc6:	30 09       	mov	r9,0
8002ddc8:	08 9a       	mov	r10,r4
8002ddca:	0a 9b       	mov	r11,r5
8002ddcc:	e0 a0 17 b0 	rcall	80030d2c <__avr32_f64_cmp_lt>
8002ddd0:	c2 d0       	breq	8002de2a <sqrt+0x8a>
8002ddd2:	30 18       	mov	r8,1
8002ddd4:	50 86       	stdsp	sp[0x20],r6
8002ddd6:	50 08       	stdsp	sp[0x0],r8
8002ddd8:	fa e5 00 08 	st.d	sp[8],r4
8002dddc:	49 78       	lddpc	r8,8002de38 <sqrt+0x98>
8002ddde:	fa e5 00 10 	st.d	sp[16],r4
8002dde2:	50 18       	stdsp	sp[0x4],r8
8002dde4:	6e 07       	ld.w	r7,r7[0x0]
8002dde6:	58 07       	cp.w	r7,0
8002dde8:	c0 61       	brne	8002ddf4 <sqrt+0x54>
8002ddea:	30 08       	mov	r8,0
8002ddec:	30 09       	mov	r9,0
8002ddee:	fa e9 00 18 	st.d	sp[24],r8
8002ddf2:	c0 b8       	rjmp	8002de08 <sqrt+0x68>
8002ddf4:	30 08       	mov	r8,0
8002ddf6:	30 09       	mov	r9,0
8002ddf8:	10 9a       	mov	r10,r8
8002ddfa:	12 9b       	mov	r11,r9
8002ddfc:	e0 a0 17 cc 	rcall	80030d94 <__avr32_f64_div>
8002de00:	fa eb 00 18 	st.d	sp[24],r10
8002de04:	58 27       	cp.w	r7,2
8002de06:	c0 50       	breq	8002de10 <sqrt+0x70>
8002de08:	1a 9c       	mov	r12,sp
8002de0a:	e0 a0 13 73 	rcall	800304f0 <matherr>
8002de0e:	c0 51       	brne	8002de18 <sqrt+0x78>
8002de10:	e0 a0 1b a6 	rcall	8003155c <__errno>
8002de14:	32 18       	mov	r8,33
8002de16:	99 08       	st.w	r12[0x0],r8
8002de18:	40 88       	lddsp	r8,sp[0x20]
8002de1a:	58 08       	cp.w	r8,0
8002de1c:	c0 50       	breq	8002de26 <sqrt+0x86>
8002de1e:	e0 a0 1b 9f 	rcall	8003155c <__errno>
8002de22:	40 88       	lddsp	r8,sp[0x20]
8002de24:	99 08       	st.w	r12[0x0],r8
8002de26:	fa e2 00 18 	ld.d	r2,sp[24]
8002de2a:	04 9a       	mov	r10,r2
8002de2c:	06 9b       	mov	r11,r3
8002de2e:	2f 7d       	sub	sp,-36
8002de30:	d8 32       	popm	r0-r7,pc
8002de32:	d7 03       	nop
8002de34:	00 00       	add	r0,r0
8002de36:	23 44       	sub	r4,52
8002de38:	80 03       	ld.sh	r3,r0[0x0]
8002de3a:	1d 80       	ld.ub	r0,lr[0x0]

8002de3c <__ieee754_asin>:
8002de3c:	d4 31       	pushm	r0-r7,lr
8002de3e:	20 5d       	sub	sp,20
8002de40:	50 0b       	stdsp	sp[0x0],r11
8002de42:	16 96       	mov	r6,r11
8002de44:	14 97       	mov	r7,r10
8002de46:	eb db c0 1f 	bfextu	r5,r11,0x0,0x1f
8002de4a:	e0 68 ff ff 	mov	r8,65535
8002de4e:	ea 18 3f ef 	orh	r8,0x3fef
8002de52:	10 35       	cp.w	r5,r8
8002de54:	e0 8a 00 32 	brle	8002deb8 <__ieee754_asin+0x7c>
8002de58:	fc 1a c0 10 	movh	r10,0xc010
8002de5c:	14 05       	add	r5,r10
8002de5e:	0e 45       	or	r5,r7
8002de60:	c1 f1       	brne	8002de9e <__ieee754_asin+0x62>
8002de62:	e0 68 2d 18 	mov	r8,11544
8002de66:	ea 18 54 44 	orh	r8,0x5444
8002de6a:	e0 69 21 fb 	mov	r9,8699
8002de6e:	ea 19 3f f9 	orh	r9,0x3ff9
8002de72:	0e 9a       	mov	r10,r7
8002de74:	e0 a0 14 4a 	rcall	80030708 <__avr32_f64_mul>
8002de78:	e0 68 5c 07 	mov	r8,23559
8002de7c:	ea 18 33 14 	orh	r8,0x3314
8002de80:	14 94       	mov	r4,r10
8002de82:	16 95       	mov	r5,r11
8002de84:	e0 69 a6 26 	mov	r9,42534
8002de88:	ea 19 3c 91 	orh	r9,0x3c91
8002de8c:	0c 9b       	mov	r11,r6
8002de8e:	0e 9a       	mov	r10,r7
8002de90:	e0 a0 14 3c 	rcall	80030708 <__avr32_f64_mul>
8002de94:	14 98       	mov	r8,r10
8002de96:	16 99       	mov	r9,r11
8002de98:	08 9a       	mov	r10,r4
8002de9a:	0a 9b       	mov	r11,r5
8002de9c:	ce 48       	rjmp	8002e064 <__ieee754_asin+0x228>
8002de9e:	0c 99       	mov	r9,r6
8002dea0:	0e 98       	mov	r8,r7
8002dea2:	0e 9a       	mov	r10,r7
8002dea4:	e0 a0 15 1e 	rcall	800308e0 <__avr32_f64_sub>
8002dea8:	14 98       	mov	r8,r10
8002deaa:	16 99       	mov	r9,r11
8002deac:	e0 a0 17 74 	rcall	80030d94 <__avr32_f64_div>
8002deb0:	16 96       	mov	r6,r11
8002deb2:	14 97       	mov	r7,r10
8002deb4:	e0 8f 02 37 	bral	8002e322 <__ieee754_asin+0x4e6>
8002deb8:	e0 68 ff ff 	mov	r8,65535
8002debc:	ea 18 3f df 	orh	r8,0x3fdf
8002dec0:	10 35       	cp.w	r5,r8
8002dec2:	e0 89 00 d4 	brgt	8002e06a <__ieee754_asin+0x22e>
8002dec6:	e0 68 ff ff 	mov	r8,65535
8002deca:	ea 18 3e 3f 	orh	r8,0x3e3f
8002dece:	10 35       	cp.w	r5,r8
8002ded0:	e0 89 00 17 	brgt	8002defe <__ieee754_asin+0xc2>
8002ded4:	e0 68 75 9c 	mov	r8,30108
8002ded8:	ea 18 88 00 	orh	r8,0x8800
8002dedc:	e0 69 e4 3c 	mov	r9,58428
8002dee0:	ea 19 7e 37 	orh	r9,0x7e37
8002dee4:	e0 a0 15 cc 	rcall	80030a7c <__avr32_f64_add>
8002dee8:	14 98       	mov	r8,r10
8002deea:	16 99       	mov	r9,r11
8002deec:	30 0a       	mov	r10,0
8002deee:	fc 1b 3f f0 	movh	r11,0x3ff0
8002def2:	e0 a0 17 1d 	rcall	80030d2c <__avr32_f64_cmp_lt>
8002def6:	e0 80 00 ba 	breq	8002e06a <__ieee754_asin+0x22e>
8002defa:	e0 8f 02 14 	bral	8002e322 <__ieee754_asin+0x4e6>
8002defe:	16 99       	mov	r9,r11
8002df00:	14 98       	mov	r8,r10
8002df02:	e0 a0 14 03 	rcall	80030708 <__avr32_f64_mul>
8002df06:	e0 68 f7 09 	mov	r8,63241
8002df0a:	ea 18 0d fd 	orh	r8,0xdfd
8002df0e:	14 94       	mov	r4,r10
8002df10:	16 95       	mov	r5,r11
8002df12:	e0 69 3d e1 	mov	r9,15841
8002df16:	ea 19 3f 02 	orh	r9,0x3f02
8002df1a:	e0 a0 13 f7 	rcall	80030708 <__avr32_f64_mul>
8002df1e:	e0 68 b2 88 	mov	r8,45704
8002df22:	ea 18 75 01 	orh	r8,0x7501
8002df26:	e0 69 ef e0 	mov	r9,61408
8002df2a:	ea 19 3f 49 	orh	r9,0x3f49
8002df2e:	e0 a0 15 a7 	rcall	80030a7c <__avr32_f64_add>
8002df32:	14 98       	mov	r8,r10
8002df34:	16 99       	mov	r9,r11
8002df36:	08 9a       	mov	r10,r4
8002df38:	0a 9b       	mov	r11,r5
8002df3a:	e0 a0 13 e7 	rcall	80030708 <__avr32_f64_mul>
8002df3e:	e0 68 8f 3b 	mov	r8,36667
8002df42:	ea 18 b5 68 	orh	r8,0xb568
8002df46:	e0 69 82 28 	mov	r9,33320
8002df4a:	ea 19 3f a4 	orh	r9,0x3fa4
8002df4e:	e0 a0 14 c9 	rcall	800308e0 <__avr32_f64_sub>
8002df52:	14 98       	mov	r8,r10
8002df54:	16 99       	mov	r9,r11
8002df56:	08 9a       	mov	r10,r4
8002df58:	0a 9b       	mov	r11,r5
8002df5a:	e0 a0 13 d7 	rcall	80030708 <__avr32_f64_mul>
8002df5e:	e0 68 44 55 	mov	r8,17493
8002df62:	ea 18 0e 88 	orh	r8,0xe88
8002df66:	e0 69 c1 55 	mov	r9,49493
8002df6a:	ea 19 3f c9 	orh	r9,0x3fc9
8002df6e:	e0 a0 15 87 	rcall	80030a7c <__avr32_f64_add>
8002df72:	14 98       	mov	r8,r10
8002df74:	16 99       	mov	r9,r11
8002df76:	08 9a       	mov	r10,r4
8002df78:	0a 9b       	mov	r11,r5
8002df7a:	e0 a0 13 c7 	rcall	80030708 <__avr32_f64_mul>
8002df7e:	e0 68 6f 7d 	mov	r8,28541
8002df82:	ea 18 03 eb 	orh	r8,0x3eb
8002df86:	e0 69 d6 12 	mov	r9,54802
8002df8a:	ea 19 3f d4 	orh	r9,0x3fd4
8002df8e:	e0 a0 14 a9 	rcall	800308e0 <__avr32_f64_sub>
8002df92:	14 98       	mov	r8,r10
8002df94:	16 99       	mov	r9,r11
8002df96:	08 9a       	mov	r10,r4
8002df98:	0a 9b       	mov	r11,r5
8002df9a:	e0 a0 13 b7 	rcall	80030708 <__avr32_f64_mul>
8002df9e:	e0 68 55 55 	mov	r8,21845
8002dfa2:	ea 18 55 55 	orh	r8,0x5555
8002dfa6:	e0 69 55 55 	mov	r9,21845
8002dfaa:	ea 19 3f c5 	orh	r9,0x3fc5
8002dfae:	e0 a0 15 67 	rcall	80030a7c <__avr32_f64_add>
8002dfb2:	14 98       	mov	r8,r10
8002dfb4:	16 99       	mov	r9,r11
8002dfb6:	08 9a       	mov	r10,r4
8002dfb8:	0a 9b       	mov	r11,r5
8002dfba:	e0 a0 13 a7 	rcall	80030708 <__avr32_f64_mul>
8002dfbe:	e0 68 92 82 	mov	r8,37506
8002dfc2:	ea 18 b1 2e 	orh	r8,0xb12e
8002dfc6:	14 92       	mov	r2,r10
8002dfc8:	16 93       	mov	r3,r11
8002dfca:	e0 69 b8 c5 	mov	r9,47301
8002dfce:	ea 19 3f b3 	orh	r9,0x3fb3
8002dfd2:	08 9a       	mov	r10,r4
8002dfd4:	0a 9b       	mov	r11,r5
8002dfd6:	e0 a0 13 99 	rcall	80030708 <__avr32_f64_mul>
8002dfda:	e0 68 01 59 	mov	r8,345
8002dfde:	ea 18 1b 8d 	orh	r8,0x1b8d
8002dfe2:	e0 69 06 6c 	mov	r9,1644
8002dfe6:	ea 19 3f e6 	orh	r9,0x3fe6
8002dfea:	e0 a0 14 7b 	rcall	800308e0 <__avr32_f64_sub>
8002dfee:	14 98       	mov	r8,r10
8002dff0:	16 99       	mov	r9,r11
8002dff2:	08 9a       	mov	r10,r4
8002dff4:	0a 9b       	mov	r11,r5
8002dff6:	e0 a0 13 89 	rcall	80030708 <__avr32_f64_mul>
8002dffa:	e0 68 8a c8 	mov	r8,35528
8002dffe:	ea 18 9c 59 	orh	r8,0x9c59
8002e002:	e0 69 2a e5 	mov	r9,10981
8002e006:	ea 19 40 00 	orh	r9,0x4000
8002e00a:	e0 a0 15 39 	rcall	80030a7c <__avr32_f64_add>
8002e00e:	14 98       	mov	r8,r10
8002e010:	16 99       	mov	r9,r11
8002e012:	08 9a       	mov	r10,r4
8002e014:	0a 9b       	mov	r11,r5
8002e016:	e0 a0 13 79 	rcall	80030708 <__avr32_f64_mul>
8002e01a:	e0 68 2d 4b 	mov	r8,11595
8002e01e:	ea 18 1c 8a 	orh	r8,0x1c8a
8002e022:	e0 69 3a 27 	mov	r9,14887
8002e026:	ea 19 40 03 	orh	r9,0x4003
8002e02a:	e0 a0 14 5b 	rcall	800308e0 <__avr32_f64_sub>
8002e02e:	14 98       	mov	r8,r10
8002e030:	16 99       	mov	r9,r11
8002e032:	08 9a       	mov	r10,r4
8002e034:	0a 9b       	mov	r11,r5
8002e036:	e0 a0 13 69 	rcall	80030708 <__avr32_f64_mul>
8002e03a:	30 08       	mov	r8,0
8002e03c:	fc 19 3f f0 	movh	r9,0x3ff0
8002e040:	e0 a0 15 1e 	rcall	80030a7c <__avr32_f64_add>
8002e044:	14 98       	mov	r8,r10
8002e046:	16 99       	mov	r9,r11
8002e048:	04 9a       	mov	r10,r2
8002e04a:	06 9b       	mov	r11,r3
8002e04c:	e0 a0 16 a4 	rcall	80030d94 <__avr32_f64_div>
8002e050:	14 98       	mov	r8,r10
8002e052:	16 99       	mov	r9,r11
8002e054:	0e 9a       	mov	r10,r7
8002e056:	0c 9b       	mov	r11,r6
8002e058:	e0 a0 13 58 	rcall	80030708 <__avr32_f64_mul>
8002e05c:	14 98       	mov	r8,r10
8002e05e:	16 99       	mov	r9,r11
8002e060:	0e 9a       	mov	r10,r7
8002e062:	0c 9b       	mov	r11,r6
8002e064:	e0 a0 15 0c 	rcall	80030a7c <__avr32_f64_add>
8002e068:	c2 4b       	rjmp	8002deb0 <__ieee754_asin+0x74>
8002e06a:	0c 9b       	mov	r11,r6
8002e06c:	0e 9a       	mov	r10,r7
8002e06e:	e0 a0 11 97 	rcall	8003039c <fabs>
8002e072:	14 98       	mov	r8,r10
8002e074:	16 99       	mov	r9,r11
8002e076:	30 0a       	mov	r10,0
8002e078:	fc 1b 3f f0 	movh	r11,0x3ff0
8002e07c:	e0 a0 14 32 	rcall	800308e0 <__avr32_f64_sub>
8002e080:	30 08       	mov	r8,0
8002e082:	fc 19 3f e0 	movh	r9,0x3fe0
8002e086:	e0 a0 13 41 	rcall	80030708 <__avr32_f64_mul>
8002e08a:	e0 68 f7 09 	mov	r8,63241
8002e08e:	ea 18 0d fd 	orh	r8,0xdfd
8002e092:	16 97       	mov	r7,r11
8002e094:	14 96       	mov	r6,r10
8002e096:	e0 69 3d e1 	mov	r9,15841
8002e09a:	ea 19 3f 02 	orh	r9,0x3f02
8002e09e:	e0 a0 13 35 	rcall	80030708 <__avr32_f64_mul>
8002e0a2:	e0 68 b2 88 	mov	r8,45704
8002e0a6:	ea 18 75 01 	orh	r8,0x7501
8002e0aa:	e0 69 ef e0 	mov	r9,61408
8002e0ae:	ea 19 3f 49 	orh	r9,0x3f49
8002e0b2:	e0 a0 14 e5 	rcall	80030a7c <__avr32_f64_add>
8002e0b6:	14 98       	mov	r8,r10
8002e0b8:	16 99       	mov	r9,r11
8002e0ba:	0c 9a       	mov	r10,r6
8002e0bc:	0e 9b       	mov	r11,r7
8002e0be:	e0 a0 13 25 	rcall	80030708 <__avr32_f64_mul>
8002e0c2:	e0 68 8f 3b 	mov	r8,36667
8002e0c6:	ea 18 b5 68 	orh	r8,0xb568
8002e0ca:	e0 69 82 28 	mov	r9,33320
8002e0ce:	ea 19 3f a4 	orh	r9,0x3fa4
8002e0d2:	e0 a0 14 07 	rcall	800308e0 <__avr32_f64_sub>
8002e0d6:	14 98       	mov	r8,r10
8002e0d8:	16 99       	mov	r9,r11
8002e0da:	0c 9a       	mov	r10,r6
8002e0dc:	0e 9b       	mov	r11,r7
8002e0de:	e0 a0 13 15 	rcall	80030708 <__avr32_f64_mul>
8002e0e2:	e0 68 44 55 	mov	r8,17493
8002e0e6:	ea 18 0e 88 	orh	r8,0xe88
8002e0ea:	e0 69 c1 55 	mov	r9,49493
8002e0ee:	ea 19 3f c9 	orh	r9,0x3fc9
8002e0f2:	e0 a0 14 c5 	rcall	80030a7c <__avr32_f64_add>
8002e0f6:	14 98       	mov	r8,r10
8002e0f8:	16 99       	mov	r9,r11
8002e0fa:	0c 9a       	mov	r10,r6
8002e0fc:	0e 9b       	mov	r11,r7
8002e0fe:	e0 a0 13 05 	rcall	80030708 <__avr32_f64_mul>
8002e102:	e0 68 6f 7d 	mov	r8,28541
8002e106:	ea 18 03 eb 	orh	r8,0x3eb
8002e10a:	e0 69 d6 12 	mov	r9,54802
8002e10e:	ea 19 3f d4 	orh	r9,0x3fd4
8002e112:	e0 a0 13 e7 	rcall	800308e0 <__avr32_f64_sub>
8002e116:	14 98       	mov	r8,r10
8002e118:	16 99       	mov	r9,r11
8002e11a:	0c 9a       	mov	r10,r6
8002e11c:	0e 9b       	mov	r11,r7
8002e11e:	e0 a0 12 f5 	rcall	80030708 <__avr32_f64_mul>
8002e122:	e0 68 55 55 	mov	r8,21845
8002e126:	ea 18 55 55 	orh	r8,0x5555
8002e12a:	e0 69 55 55 	mov	r9,21845
8002e12e:	ea 19 3f c5 	orh	r9,0x3fc5
8002e132:	e0 a0 14 a5 	rcall	80030a7c <__avr32_f64_add>
8002e136:	14 98       	mov	r8,r10
8002e138:	16 99       	mov	r9,r11
8002e13a:	0c 9a       	mov	r10,r6
8002e13c:	0e 9b       	mov	r11,r7
8002e13e:	e0 a0 12 e5 	rcall	80030708 <__avr32_f64_mul>
8002e142:	e0 68 92 82 	mov	r8,37506
8002e146:	ea 18 b1 2e 	orh	r8,0xb12e
8002e14a:	e0 69 b8 c5 	mov	r9,47301
8002e14e:	ea 19 3f b3 	orh	r9,0x3fb3
8002e152:	14 90       	mov	r0,r10
8002e154:	16 91       	mov	r1,r11
8002e156:	0c 9a       	mov	r10,r6
8002e158:	0e 9b       	mov	r11,r7
8002e15a:	e0 a0 12 d7 	rcall	80030708 <__avr32_f64_mul>
8002e15e:	e0 68 01 59 	mov	r8,345
8002e162:	ea 18 1b 8d 	orh	r8,0x1b8d
8002e166:	e0 69 06 6c 	mov	r9,1644
8002e16a:	ea 19 3f e6 	orh	r9,0x3fe6
8002e16e:	e0 a0 13 b9 	rcall	800308e0 <__avr32_f64_sub>
8002e172:	14 98       	mov	r8,r10
8002e174:	16 99       	mov	r9,r11
8002e176:	0c 9a       	mov	r10,r6
8002e178:	0e 9b       	mov	r11,r7
8002e17a:	e0 a0 12 c7 	rcall	80030708 <__avr32_f64_mul>
8002e17e:	e0 68 8a c8 	mov	r8,35528
8002e182:	ea 18 9c 59 	orh	r8,0x9c59
8002e186:	e0 69 2a e5 	mov	r9,10981
8002e18a:	ea 19 40 00 	orh	r9,0x4000
8002e18e:	e0 a0 14 77 	rcall	80030a7c <__avr32_f64_add>
8002e192:	14 98       	mov	r8,r10
8002e194:	16 99       	mov	r9,r11
8002e196:	0c 9a       	mov	r10,r6
8002e198:	0e 9b       	mov	r11,r7
8002e19a:	e0 a0 12 b7 	rcall	80030708 <__avr32_f64_mul>
8002e19e:	e0 68 2d 4b 	mov	r8,11595
8002e1a2:	ea 18 1c 8a 	orh	r8,0x1c8a
8002e1a6:	e0 69 3a 27 	mov	r9,14887
8002e1aa:	ea 19 40 03 	orh	r9,0x4003
8002e1ae:	e0 a0 13 99 	rcall	800308e0 <__avr32_f64_sub>
8002e1b2:	14 98       	mov	r8,r10
8002e1b4:	16 99       	mov	r9,r11
8002e1b6:	0c 9a       	mov	r10,r6
8002e1b8:	0e 9b       	mov	r11,r7
8002e1ba:	e0 a0 12 a7 	rcall	80030708 <__avr32_f64_mul>
8002e1be:	30 08       	mov	r8,0
8002e1c0:	fc 19 3f f0 	movh	r9,0x3ff0
8002e1c4:	e0 a0 14 5c 	rcall	80030a7c <__avr32_f64_add>
8002e1c8:	fa eb 00 04 	st.d	sp[4],r10
8002e1cc:	0c 9a       	mov	r10,r6
8002e1ce:	0e 9b       	mov	r11,r7
8002e1d0:	e0 a0 09 4e 	rcall	8002f46c <__ieee754_sqrt>
8002e1d4:	e0 68 33 32 	mov	r8,13106
8002e1d8:	ea 18 3f ef 	orh	r8,0x3fef
8002e1dc:	14 92       	mov	r2,r10
8002e1de:	16 93       	mov	r3,r11
8002e1e0:	10 35       	cp.w	r5,r8
8002e1e2:	e0 8a 00 2d 	brle	8002e23c <__ieee754_asin+0x400>
8002e1e6:	fa e8 00 04 	ld.d	r8,sp[4]
8002e1ea:	00 9a       	mov	r10,r0
8002e1ec:	02 9b       	mov	r11,r1
8002e1ee:	e0 a0 15 d3 	rcall	80030d94 <__avr32_f64_div>
8002e1f2:	14 98       	mov	r8,r10
8002e1f4:	16 99       	mov	r9,r11
8002e1f6:	04 9a       	mov	r10,r2
8002e1f8:	06 9b       	mov	r11,r3
8002e1fa:	e0 a0 12 87 	rcall	80030708 <__avr32_f64_mul>
8002e1fe:	14 98       	mov	r8,r10
8002e200:	16 99       	mov	r9,r11
8002e202:	04 9a       	mov	r10,r2
8002e204:	06 9b       	mov	r11,r3
8002e206:	e0 a0 14 3b 	rcall	80030a7c <__avr32_f64_add>
8002e20a:	14 98       	mov	r8,r10
8002e20c:	16 99       	mov	r9,r11
8002e20e:	e0 a0 14 37 	rcall	80030a7c <__avr32_f64_add>
8002e212:	e0 68 5c 07 	mov	r8,23559
8002e216:	ea 18 33 14 	orh	r8,0x3314
8002e21a:	e0 69 a6 26 	mov	r9,42534
8002e21e:	ea 19 3c 91 	orh	r9,0x3c91
8002e222:	e0 a0 13 5f 	rcall	800308e0 <__avr32_f64_sub>
8002e226:	14 98       	mov	r8,r10
8002e228:	16 99       	mov	r9,r11
8002e22a:	e0 6a 2d 18 	mov	r10,11544
8002e22e:	ea 1a 54 44 	orh	r10,0x5444
8002e232:	e0 6b 21 fb 	mov	r11,8699
8002e236:	ea 1b 3f f9 	orh	r11,0x3ff9
8002e23a:	c6 98       	rjmp	8002e30c <__ieee754_asin+0x4d0>
8002e23c:	14 98       	mov	r8,r10
8002e23e:	06 99       	mov	r9,r3
8002e240:	e0 a0 14 1e 	rcall	80030a7c <__avr32_f64_add>
8002e244:	fa e8 00 04 	ld.d	r8,sp[4]
8002e248:	fa eb 00 0c 	st.d	sp[12],r10
8002e24c:	00 9a       	mov	r10,r0
8002e24e:	02 9b       	mov	r11,r1
8002e250:	e0 a0 15 a2 	rcall	80030d94 <__avr32_f64_div>
8002e254:	14 98       	mov	r8,r10
8002e256:	16 99       	mov	r9,r11
8002e258:	fa ea 00 0c 	ld.d	r10,sp[12]
8002e25c:	e0 a0 12 56 	rcall	80030708 <__avr32_f64_mul>
8002e260:	30 04       	mov	r4,0
8002e262:	14 90       	mov	r0,r10
8002e264:	16 91       	mov	r1,r11
8002e266:	08 98       	mov	r8,r4
8002e268:	06 99       	mov	r9,r3
8002e26a:	08 9a       	mov	r10,r4
8002e26c:	06 9b       	mov	r11,r3
8002e26e:	e0 a0 12 4d 	rcall	80030708 <__avr32_f64_mul>
8002e272:	14 98       	mov	r8,r10
8002e274:	16 99       	mov	r9,r11
8002e276:	0c 9a       	mov	r10,r6
8002e278:	0e 9b       	mov	r11,r7
8002e27a:	e0 a0 13 33 	rcall	800308e0 <__avr32_f64_sub>
8002e27e:	08 98       	mov	r8,r4
8002e280:	16 97       	mov	r7,r11
8002e282:	14 96       	mov	r6,r10
8002e284:	06 99       	mov	r9,r3
8002e286:	04 9a       	mov	r10,r2
8002e288:	06 9b       	mov	r11,r3
8002e28a:	e0 a0 13 f9 	rcall	80030a7c <__avr32_f64_add>
8002e28e:	14 98       	mov	r8,r10
8002e290:	16 99       	mov	r9,r11
8002e292:	0c 9a       	mov	r10,r6
8002e294:	0e 9b       	mov	r11,r7
8002e296:	e0 a0 15 7f 	rcall	80030d94 <__avr32_f64_div>
8002e29a:	30 08       	mov	r8,0
8002e29c:	fc 19 c0 00 	movh	r9,0xc000
8002e2a0:	e0 a0 12 34 	rcall	80030708 <__avr32_f64_mul>
8002e2a4:	e0 68 5c 07 	mov	r8,23559
8002e2a8:	ea 18 33 14 	orh	r8,0x3314
8002e2ac:	e0 69 a6 26 	mov	r9,42534
8002e2b0:	ea 19 3c 91 	orh	r9,0x3c91
8002e2b4:	e0 a0 13 e4 	rcall	80030a7c <__avr32_f64_add>
8002e2b8:	14 98       	mov	r8,r10
8002e2ba:	16 99       	mov	r9,r11
8002e2bc:	00 9a       	mov	r10,r0
8002e2be:	02 9b       	mov	r11,r1
8002e2c0:	e0 a0 13 10 	rcall	800308e0 <__avr32_f64_sub>
8002e2c4:	30 08       	mov	r8,0
8002e2c6:	16 97       	mov	r7,r11
8002e2c8:	14 96       	mov	r6,r10
8002e2ca:	fc 19 c0 00 	movh	r9,0xc000
8002e2ce:	08 9a       	mov	r10,r4
8002e2d0:	06 9b       	mov	r11,r3
8002e2d2:	e0 a0 12 1b 	rcall	80030708 <__avr32_f64_mul>
8002e2d6:	e0 68 2d 18 	mov	r8,11544
8002e2da:	ea 18 54 44 	orh	r8,0x5444
8002e2de:	e0 69 21 fb 	mov	r9,8699
8002e2e2:	ea 19 3f e9 	orh	r9,0x3fe9
8002e2e6:	e0 a0 13 cb 	rcall	80030a7c <__avr32_f64_add>
8002e2ea:	14 98       	mov	r8,r10
8002e2ec:	16 99       	mov	r9,r11
8002e2ee:	0c 9a       	mov	r10,r6
8002e2f0:	0e 9b       	mov	r11,r7
8002e2f2:	e0 a0 12 f7 	rcall	800308e0 <__avr32_f64_sub>
8002e2f6:	06 95       	mov	r5,r3
8002e2f8:	14 98       	mov	r8,r10
8002e2fa:	16 99       	mov	r9,r11
8002e2fc:	e0 6a 2d 18 	mov	r10,11544
8002e300:	ea 1a 54 44 	orh	r10,0x5444
8002e304:	e0 6b 21 fb 	mov	r11,8699
8002e308:	ea 1b 3f e9 	orh	r11,0x3fe9
8002e30c:	e0 a0 12 ea 	rcall	800308e0 <__avr32_f64_sub>
8002e310:	40 08       	lddsp	r8,sp[0x0]
8002e312:	16 96       	mov	r6,r11
8002e314:	14 97       	mov	r7,r10
8002e316:	ee 16 80 00 	eorh	r6,0x8000
8002e31a:	58 08       	cp.w	r8,0
8002e31c:	e0 8a 00 03 	brle	8002e322 <__ieee754_asin+0x4e6>
8002e320:	16 96       	mov	r6,r11
8002e322:	0c 9b       	mov	r11,r6
8002e324:	0e 9a       	mov	r10,r7
8002e326:	2f bd       	sub	sp,-20
8002e328:	d8 32       	popm	r0-r7,pc
8002e32a:	d7 03       	nop

8002e32c <__ieee754_atan2>:
8002e32c:	d4 31       	pushm	r0-r7,lr
8002e32e:	20 2d       	sub	sp,8
8002e330:	50 0b       	stdsp	sp[0x0],r11
8002e332:	10 96       	mov	r6,r8
8002e334:	10 92       	mov	r2,r8
8002e336:	fd d9 c0 1f 	bfextu	lr,r9,0x0,0x1f
8002e33a:	5c 38       	neg	r8
8002e33c:	14 94       	mov	r4,r10
8002e33e:	0c 48       	or	r8,r6
8002e340:	16 95       	mov	r5,r11
8002e342:	12 93       	mov	r3,r9
8002e344:	14 90       	mov	r0,r10
8002e346:	16 91       	mov	r1,r11
8002e348:	12 9c       	mov	r12,r9
8002e34a:	fd e8 13 f8 	or	r8,lr,r8>>0x1f
8002e34e:	fc 17 7f f0 	movh	r7,0x7ff0
8002e352:	0e 38       	cp.w	r8,r7
8002e354:	e0 8b 00 0e 	brhi	8002e370 <__ieee754_atan2+0x44>
8002e358:	f1 db c0 1f 	bfextu	r8,r11,0x0,0x1f
8002e35c:	f4 07 11 00 	rsub	r7,r10,0
8002e360:	fc 10 7f f0 	movh	r0,0x7ff0
8002e364:	14 47       	or	r7,r10
8002e366:	f1 e7 13 f7 	or	r7,r8,r7>>0x1f
8002e36a:	00 37       	cp.w	r7,r0
8002e36c:	e0 88 00 09 	brls	8002e37e <__ieee754_atan2+0x52>
8002e370:	04 98       	mov	r8,r2
8002e372:	06 99       	mov	r9,r3
8002e374:	08 9a       	mov	r10,r4
8002e376:	0a 9b       	mov	r11,r5
8002e378:	e0 a0 13 82 	rcall	80030a7c <__avr32_f64_add>
8002e37c:	ce 88       	rjmp	8002e54c <__ieee754_atan2+0x220>
8002e37e:	fc 17 c0 10 	movh	r7,0xc010
8002e382:	f8 07 00 07 	add	r7,r12,r7
8002e386:	0c 47       	or	r7,r6
8002e388:	c0 41       	brne	8002e390 <__ieee754_atan2+0x64>
8002e38a:	e0 a0 0e 65 	rcall	80030054 <atan>
8002e38e:	cd f8       	rjmp	8002e54c <__ieee754_atan2+0x220>
8002e390:	f8 07 14 1e 	asr	r7,r12,0x1e
8002e394:	f1 ea 10 09 	or	r9,r8,r10
8002e398:	e2 17 00 02 	andl	r7,0x2,COH
8002e39c:	ef eb 13 f7 	or	r7,r7,r11>>0x1f
8002e3a0:	58 09       	cp.w	r9,0
8002e3a2:	c0 71       	brne	8002e3b0 <__ieee754_atan2+0x84>
8002e3a4:	58 27       	cp.w	r7,2
8002e3a6:	c5 10       	breq	8002e448 <__ieee754_atan2+0x11c>
8002e3a8:	e0 8a 00 d4 	brle	8002e550 <__ieee754_atan2+0x224>
8002e3ac:	58 37       	cp.w	r7,3
8002e3ae:	c5 60       	breq	8002e45a <__ieee754_atan2+0x12e>
8002e3b0:	fd e6 10 06 	or	r6,lr,r6
8002e3b4:	c6 00       	breq	8002e474 <__ieee754_atan2+0x148>
8002e3b6:	fc 19 7f f0 	movh	r9,0x7ff0
8002e3ba:	12 3e       	cp.w	lr,r9
8002e3bc:	c5 81       	brne	8002e46c <__ieee754_atan2+0x140>
8002e3be:	12 38       	cp.w	r8,r9
8002e3c0:	c3 11       	brne	8002e422 <__ieee754_atan2+0xf6>
8002e3c2:	58 17       	cp.w	r7,1
8002e3c4:	c0 b0       	breq	8002e3da <__ieee754_atan2+0xae>
8002e3c6:	e0 89 00 05 	brgt	8002e3d0 <__ieee754_atan2+0xa4>
8002e3ca:	58 07       	cp.w	r7,0
8002e3cc:	c1 00       	breq	8002e3ec <__ieee754_atan2+0xc0>
8002e3ce:	c5 38       	rjmp	8002e474 <__ieee754_atan2+0x148>
8002e3d0:	58 27       	cp.w	r7,2
8002e3d2:	c1 60       	breq	8002e3fe <__ieee754_atan2+0xd2>
8002e3d4:	58 37       	cp.w	r7,3
8002e3d6:	c4 f1       	brne	8002e474 <__ieee754_atan2+0x148>
8002e3d8:	c1 c8       	rjmp	8002e410 <__ieee754_atan2+0xe4>
8002e3da:	e0 64 2d 18 	mov	r4,11544
8002e3de:	ea 14 54 44 	orh	r4,0x5444
8002e3e2:	e0 65 21 fb 	mov	r5,8699
8002e3e6:	ea 15 bf e9 	orh	r5,0xbfe9
8002e3ea:	cb 38       	rjmp	8002e550 <__ieee754_atan2+0x224>
8002e3ec:	e0 64 2d 18 	mov	r4,11544
8002e3f0:	ea 14 54 44 	orh	r4,0x5444
8002e3f4:	e0 65 21 fb 	mov	r5,8699
8002e3f8:	ea 15 3f e9 	orh	r5,0x3fe9
8002e3fc:	ca a8       	rjmp	8002e550 <__ieee754_atan2+0x224>
8002e3fe:	e0 64 21 d2 	mov	r4,8658
8002e402:	ea 14 7f 33 	orh	r4,0x7f33
8002e406:	e0 65 d9 7c 	mov	r5,55676
8002e40a:	ea 15 40 02 	orh	r5,0x4002
8002e40e:	ca 18       	rjmp	8002e550 <__ieee754_atan2+0x224>
8002e410:	e0 64 21 d2 	mov	r4,8658
8002e414:	ea 14 7f 33 	orh	r4,0x7f33
8002e418:	e0 65 d9 7c 	mov	r5,55676
8002e41c:	ea 15 c0 02 	orh	r5,0xc002
8002e420:	c9 88       	rjmp	8002e550 <__ieee754_atan2+0x224>
8002e422:	58 17       	cp.w	r7,1
8002e424:	c0 b0       	breq	8002e43a <__ieee754_atan2+0x10e>
8002e426:	e0 89 00 05 	brgt	8002e430 <__ieee754_atan2+0x104>
8002e42a:	58 07       	cp.w	r7,0
8002e42c:	c0 b0       	breq	8002e442 <__ieee754_atan2+0x116>
8002e42e:	c1 f8       	rjmp	8002e46c <__ieee754_atan2+0x140>
8002e430:	58 27       	cp.w	r7,2
8002e432:	c0 b0       	breq	8002e448 <__ieee754_atan2+0x11c>
8002e434:	58 37       	cp.w	r7,3
8002e436:	c1 b1       	brne	8002e46c <__ieee754_atan2+0x140>
8002e438:	c1 18       	rjmp	8002e45a <__ieee754_atan2+0x12e>
8002e43a:	30 04       	mov	r4,0
8002e43c:	fc 15 80 00 	movh	r5,0x8000
8002e440:	c8 88       	rjmp	8002e550 <__ieee754_atan2+0x224>
8002e442:	30 04       	mov	r4,0
8002e444:	30 05       	mov	r5,0
8002e446:	c8 58       	rjmp	8002e550 <__ieee754_atan2+0x224>
8002e448:	e0 64 2d 18 	mov	r4,11544
8002e44c:	ea 14 54 44 	orh	r4,0x5444
8002e450:	e0 65 21 fb 	mov	r5,8699
8002e454:	ea 15 40 09 	orh	r5,0x4009
8002e458:	c7 c8       	rjmp	8002e550 <__ieee754_atan2+0x224>
8002e45a:	e0 64 2d 18 	mov	r4,11544
8002e45e:	ea 14 54 44 	orh	r4,0x5444
8002e462:	e0 65 21 fb 	mov	r5,8699
8002e466:	ea 15 c0 09 	orh	r5,0xc009
8002e46a:	c7 38       	rjmp	8002e550 <__ieee754_atan2+0x224>
8002e46c:	fc 10 7f f0 	movh	r0,0x7ff0
8002e470:	00 38       	cp.w	r8,r0
8002e472:	c1 51       	brne	8002e49c <__ieee754_atan2+0x170>
8002e474:	58 01       	cp.w	r1,0
8002e476:	c0 a5       	brlt	8002e48a <__ieee754_atan2+0x15e>
8002e478:	e0 64 2d 18 	mov	r4,11544
8002e47c:	ea 14 54 44 	orh	r4,0x5444
8002e480:	e0 65 21 fb 	mov	r5,8699
8002e484:	ea 15 3f f9 	orh	r5,0x3ff9
8002e488:	c6 48       	rjmp	8002e550 <__ieee754_atan2+0x224>
8002e48a:	e0 64 2d 18 	mov	r4,11544
8002e48e:	ea 14 54 44 	orh	r4,0x5444
8002e492:	e0 65 21 fb 	mov	r5,8699
8002e496:	ea 15 bf f9 	orh	r5,0xbff9
8002e49a:	c5 b8       	rjmp	8002e550 <__ieee754_atan2+0x224>
8002e49c:	1c 18       	sub	r8,lr
8002e49e:	b5 48       	asr	r8,0x14
8002e4a0:	e0 48 00 3c 	cp.w	r8,60
8002e4a4:	e0 8a 00 0b 	brle	8002e4ba <__ieee754_atan2+0x18e>
8002e4a8:	e0 6a 2d 18 	mov	r10,11544
8002e4ac:	ea 1a 54 44 	orh	r10,0x5444
8002e4b0:	e0 6b 21 fb 	mov	r11,8699
8002e4b4:	ea 1b 3f f9 	orh	r11,0x3ff9
8002e4b8:	c1 48       	rjmp	8002e4e0 <__ieee754_atan2+0x1b4>
8002e4ba:	fe 58 ff c4 	cp.w	r8,-60
8002e4be:	5f 58       	srlt	r8
8002e4c0:	f1 ec 03 fc 	and	r12,r8,r12>>0x1f
8002e4c4:	c0 40       	breq	8002e4cc <__ieee754_atan2+0x1a0>
8002e4c6:	30 0a       	mov	r10,0
8002e4c8:	30 0b       	mov	r11,0
8002e4ca:	c0 b8       	rjmp	8002e4e0 <__ieee754_atan2+0x1b4>
8002e4cc:	04 98       	mov	r8,r2
8002e4ce:	06 99       	mov	r9,r3
8002e4d0:	08 9a       	mov	r10,r4
8002e4d2:	0a 9b       	mov	r11,r5
8002e4d4:	e0 a0 14 60 	rcall	80030d94 <__avr32_f64_div>
8002e4d8:	e0 a0 0f 62 	rcall	8003039c <fabs>
8002e4dc:	e0 a0 0d bc 	rcall	80030054 <atan>
8002e4e0:	58 17       	cp.w	r7,1
8002e4e2:	c0 60       	breq	8002e4ee <__ieee754_atan2+0x1c2>
8002e4e4:	58 27       	cp.w	r7,2
8002e4e6:	c0 a0       	breq	8002e4fa <__ieee754_atan2+0x1ce>
8002e4e8:	58 07       	cp.w	r7,0
8002e4ea:	c1 d1       	brne	8002e524 <__ieee754_atan2+0x1f8>
8002e4ec:	c3 08       	rjmp	8002e54c <__ieee754_atan2+0x220>
8002e4ee:	fc 18 80 00 	movh	r8,0x8000
8002e4f2:	14 94       	mov	r4,r10
8002e4f4:	f6 08 00 05 	add	r5,r11,r8
8002e4f8:	c2 c8       	rjmp	8002e550 <__ieee754_atan2+0x224>
8002e4fa:	e0 68 5c 07 	mov	r8,23559
8002e4fe:	ea 18 33 14 	orh	r8,0x3314
8002e502:	e0 69 a6 26 	mov	r9,42534
8002e506:	ea 19 3c a1 	orh	r9,0x3ca1
8002e50a:	e0 a0 11 eb 	rcall	800308e0 <__avr32_f64_sub>
8002e50e:	14 98       	mov	r8,r10
8002e510:	16 99       	mov	r9,r11
8002e512:	e0 6a 2d 18 	mov	r10,11544
8002e516:	ea 1a 54 44 	orh	r10,0x5444
8002e51a:	e0 6b 21 fb 	mov	r11,8699
8002e51e:	ea 1b 40 09 	orh	r11,0x4009
8002e522:	c1 38       	rjmp	8002e548 <__ieee754_atan2+0x21c>
8002e524:	e0 68 5c 07 	mov	r8,23559
8002e528:	ea 18 33 14 	orh	r8,0x3314
8002e52c:	e0 69 a6 26 	mov	r9,42534
8002e530:	ea 19 3c a1 	orh	r9,0x3ca1
8002e534:	e0 a0 11 d6 	rcall	800308e0 <__avr32_f64_sub>
8002e538:	e0 68 2d 18 	mov	r8,11544
8002e53c:	ea 18 54 44 	orh	r8,0x5444
8002e540:	e0 69 21 fb 	mov	r9,8699
8002e544:	ea 19 40 09 	orh	r9,0x4009
8002e548:	e0 a0 11 cc 	rcall	800308e0 <__avr32_f64_sub>
8002e54c:	14 94       	mov	r4,r10
8002e54e:	16 95       	mov	r5,r11
8002e550:	08 9a       	mov	r10,r4
8002e552:	0a 9b       	mov	r11,r5
8002e554:	2f ed       	sub	sp,-8
8002e556:	d8 32       	popm	r0-r7,pc

8002e558 <__ieee754_pow>:
8002e558:	d4 31       	pushm	r0-r7,lr
8002e55a:	20 ed       	sub	sp,56
8002e55c:	10 94       	mov	r4,r8
8002e55e:	12 95       	mov	r5,r9
8002e560:	50 7b       	stdsp	sp[0x1c],r11
8002e562:	fa e5 00 0c 	st.d	sp[12],r4
8002e566:	12 97       	mov	r7,r9
8002e568:	10 96       	mov	r6,r8
8002e56a:	40 31       	lddsp	r1,sp[0xc]
8002e56c:	40 49       	lddsp	r9,sp[0x10]
8002e56e:	e5 d1 c0 1f 	bfextu	r2,r1,0x0,0x1f
8002e572:	16 90       	mov	r0,r11
8002e574:	14 93       	mov	r3,r10
8002e576:	14 98       	mov	r8,r10
8002e578:	e5 e9 10 0c 	or	r12,r2,r9
8002e57c:	e0 80 05 33 	breq	8002efe2 <__ieee754_pow+0xa8a>
8002e580:	50 1b       	stdsp	sp[0x4],r11
8002e582:	16 9e       	mov	lr,r11
8002e584:	e9 db c0 1f 	bfextu	r4,r11,0x0,0x1f
8002e588:	fc 1c 7f f0 	movh	r12,0x7ff0
8002e58c:	18 34       	cp.w	r4,r12
8002e58e:	e0 89 00 1a 	brgt	8002e5c2 <__ieee754_pow+0x6a>
8002e592:	5f 05       	sreq	r5
8002e594:	50 55       	stdsp	sp[0x14],r5
8002e596:	30 0c       	mov	r12,0
8002e598:	58 0a       	cp.w	r10,0
8002e59a:	5f 15       	srne	r5
8002e59c:	40 5e       	lddsp	lr,sp[0x14]
8002e59e:	fd e5 00 05 	and	r5,lr,r5
8002e5a2:	f8 05 18 00 	cp.b	r5,r12
8002e5a6:	c0 e1       	brne	8002e5c2 <__ieee754_pow+0x6a>
8002e5a8:	fc 1c 7f f0 	movh	r12,0x7ff0
8002e5ac:	18 32       	cp.w	r2,r12
8002e5ae:	e0 89 00 0a 	brgt	8002e5c2 <__ieee754_pow+0x6a>
8002e5b2:	5f 0c       	sreq	r12
8002e5b4:	58 09       	cp.w	r9,0
8002e5b6:	5f 1e       	srne	lr
8002e5b8:	f9 ee 00 0e 	and	lr,r12,lr
8002e5bc:	ea 0e 18 00 	cp.b	lr,r5
8002e5c0:	c0 d0       	breq	8002e5da <__ieee754_pow+0x82>
8002e5c2:	fc 19 c0 10 	movh	r9,0xc010
8002e5c6:	12 04       	add	r4,r9
8002e5c8:	e9 e8 10 08 	or	r8,r4,r8
8002e5cc:	e0 80 05 0b 	breq	8002efe2 <__ieee754_pow+0xa8a>
8002e5d0:	4d 6c       	lddpc	r12,8002e728 <__ieee754_pow+0x1d0>
8002e5d2:	e0 a0 0f 90 	rcall	800304f2 <nan>
8002e5d6:	e0 8f 05 03 	bral	8002efdc <__ieee754_pow+0xa84>
8002e5da:	58 0b       	cp.w	r11,0
8002e5dc:	c3 64       	brge	8002e648 <__ieee754_pow+0xf0>
8002e5de:	e0 6b ff ff 	mov	r11,65535
8002e5e2:	ea 1b 43 3f 	orh	r11,0x433f
8002e5e6:	16 32       	cp.w	r2,r11
8002e5e8:	e0 8a 00 04 	brle	8002e5f0 <__ieee754_pow+0x98>
8002e5ec:	30 25       	mov	r5,2
8002e5ee:	c2 e8       	rjmp	8002e64a <__ieee754_pow+0xf2>
8002e5f0:	e0 6a ff ff 	mov	r10,65535
8002e5f4:	ea 1a 3f ef 	orh	r10,0x3fef
8002e5f8:	14 32       	cp.w	r2,r10
8002e5fa:	e0 8a 00 27 	brle	8002e648 <__ieee754_pow+0xf0>
8002e5fe:	e4 0a 14 14 	asr	r10,r2,0x14
8002e602:	f4 ca 03 ff 	sub	r10,r10,1023
8002e606:	59 4a       	cp.w	r10,20
8002e608:	e0 8a 00 0f 	brle	8002e626 <__ieee754_pow+0xce>
8002e60c:	f4 0a 11 34 	rsub	r10,r10,52
8002e610:	f2 0a 0a 45 	lsr	r5,r9,r10
8002e614:	ea 0a 09 4a 	lsl	r10,r5,r10
8002e618:	12 3a       	cp.w	r10,r9
8002e61a:	c1 71       	brne	8002e648 <__ieee754_pow+0xf0>
8002e61c:	eb d5 c0 01 	bfextu	r5,r5,0x0,0x1
8002e620:	ea 05 11 02 	rsub	r5,r5,2
8002e624:	c1 38       	rjmp	8002e64a <__ieee754_pow+0xf2>
8002e626:	40 49       	lddsp	r9,sp[0x10]
8002e628:	58 09       	cp.w	r9,0
8002e62a:	c5 01       	brne	8002e6ca <__ieee754_pow+0x172>
8002e62c:	f4 0a 11 14 	rsub	r10,r10,20
8002e630:	e4 0a 08 45 	asr	r5,r2,r10
8002e634:	ea 0a 09 4a 	lsl	r10,r5,r10
8002e638:	04 3a       	cp.w	r10,r2
8002e63a:	e0 81 04 de 	brne	8002eff6 <__ieee754_pow+0xa9e>
8002e63e:	eb d5 c0 01 	bfextu	r5,r5,0x0,0x1
8002e642:	ea 05 11 02 	rsub	r5,r5,2
8002e646:	c0 48       	rjmp	8002e64e <__ieee754_pow+0xf6>
8002e648:	30 05       	mov	r5,0
8002e64a:	58 09       	cp.w	r9,0
8002e64c:	c4 01       	brne	8002e6cc <__ieee754_pow+0x174>
8002e64e:	58 0c       	cp.w	r12,0
8002e650:	c1 90       	breq	8002e682 <__ieee754_pow+0x12a>
8002e652:	fc 19 c0 10 	movh	r9,0xc010
8002e656:	e8 09 00 09 	add	r9,r4,r9
8002e65a:	f3 e8 10 08 	or	r8,r9,r8
8002e65e:	e0 80 04 c2 	breq	8002efe2 <__ieee754_pow+0xa8a>
8002e662:	e0 68 ff ff 	mov	r8,65535
8002e666:	ea 18 3f ef 	orh	r8,0x3fef
8002e66a:	10 34       	cp.w	r4,r8
8002e66c:	e0 8a 00 07 	brle	8002e67a <__ieee754_pow+0x122>
8002e670:	58 01       	cp.w	r1,0
8002e672:	e0 84 04 be 	brge	8002efee <__ieee754_pow+0xa96>
8002e676:	e0 8f 04 ba 	bral	8002efea <__ieee754_pow+0xa92>
8002e67a:	58 01       	cp.w	r1,0
8002e67c:	e0 84 04 b7 	brge	8002efea <__ieee754_pow+0xa92>
8002e680:	c5 98       	rjmp	8002e732 <__ieee754_pow+0x1da>
8002e682:	fc 1e 3f f0 	movh	lr,0x3ff0
8002e686:	1c 32       	cp.w	r2,lr
8002e688:	c0 d1       	brne	8002e6a2 <__ieee754_pow+0x14a>
8002e68a:	58 01       	cp.w	r1,0
8002e68c:	c0 55       	brlt	8002e696 <__ieee754_pow+0x13e>
8002e68e:	00 97       	mov	r7,r0
8002e690:	06 96       	mov	r6,r3
8002e692:	e0 8f 04 ae 	bral	8002efee <__ieee754_pow+0xa96>
8002e696:	00 99       	mov	r9,r0
8002e698:	06 98       	mov	r8,r3
8002e69a:	30 0a       	mov	r10,0
8002e69c:	fc 1b 3f f0 	movh	r11,0x3ff0
8002e6a0:	c5 c8       	rjmp	8002e758 <__ieee754_pow+0x200>
8002e6a2:	fc 1c 40 00 	movh	r12,0x4000
8002e6a6:	18 31       	cp.w	r1,r12
8002e6a8:	c0 41       	brne	8002e6b0 <__ieee754_pow+0x158>
8002e6aa:	00 99       	mov	r9,r0
8002e6ac:	06 98       	mov	r8,r3
8002e6ae:	c8 68       	rjmp	8002e7ba <__ieee754_pow+0x262>
8002e6b0:	fc 1b 3f e0 	movh	r11,0x3fe0
8002e6b4:	16 31       	cp.w	r1,r11
8002e6b6:	c0 b1       	brne	8002e6cc <__ieee754_pow+0x174>
8002e6b8:	40 1a       	lddsp	r10,sp[0x4]
8002e6ba:	58 0a       	cp.w	r10,0
8002e6bc:	c0 85       	brlt	8002e6cc <__ieee754_pow+0x174>
8002e6be:	00 9b       	mov	r11,r0
8002e6c0:	06 9a       	mov	r10,r3
8002e6c2:	e0 a0 06 d5 	rcall	8002f46c <__ieee754_sqrt>
8002e6c6:	e0 8f 04 8b 	bral	8002efdc <__ieee754_pow+0xa84>
8002e6ca:	30 05       	mov	r5,0
8002e6cc:	50 08       	stdsp	sp[0x0],r8
8002e6ce:	00 9b       	mov	r11,r0
8002e6d0:	06 9a       	mov	r10,r3
8002e6d2:	e0 a0 0e 65 	rcall	8003039c <fabs>
8002e6d6:	40 08       	lddsp	r8,sp[0x0]
8002e6d8:	58 08       	cp.w	r8,0
8002e6da:	c3 01       	brne	8002e73a <__ieee754_pow+0x1e2>
8002e6dc:	58 04       	cp.w	r4,0
8002e6de:	5f 09       	sreq	r9
8002e6e0:	40 5e       	lddsp	lr,sp[0x14]
8002e6e2:	fd e9 10 09 	or	r9,lr,r9
8002e6e6:	f0 09 18 00 	cp.b	r9,r8
8002e6ea:	c0 51       	brne	8002e6f4 <__ieee754_pow+0x19c>
8002e6ec:	fc 1c 3f f0 	movh	r12,0x3ff0
8002e6f0:	18 34       	cp.w	r4,r12
8002e6f2:	c2 41       	brne	8002e73a <__ieee754_pow+0x1e2>
8002e6f4:	58 01       	cp.w	r1,0
8002e6f6:	c0 84       	brge	8002e706 <__ieee754_pow+0x1ae>
8002e6f8:	16 99       	mov	r9,r11
8002e6fa:	14 98       	mov	r8,r10
8002e6fc:	fc 1b 3f f0 	movh	r11,0x3ff0
8002e700:	30 0a       	mov	r10,0
8002e702:	e0 a0 13 49 	rcall	80030d94 <__avr32_f64_div>
8002e706:	16 97       	mov	r7,r11
8002e708:	14 96       	mov	r6,r10
8002e70a:	40 1b       	lddsp	r11,sp[0x4]
8002e70c:	58 0b       	cp.w	r11,0
8002e70e:	e0 84 04 70 	brge	8002efee <__ieee754_pow+0xa96>
8002e712:	fc 18 c0 10 	movh	r8,0xc010
8002e716:	10 04       	add	r4,r8
8002e718:	eb e4 10 04 	or	r4,r5,r4
8002e71c:	c0 81       	brne	8002e72c <__ieee754_pow+0x1d4>
8002e71e:	0e 9b       	mov	r11,r7
8002e720:	0e 99       	mov	r9,r7
8002e722:	0c 98       	mov	r8,r6
8002e724:	c1 68       	rjmp	8002e750 <__ieee754_pow+0x1f8>
8002e726:	d7 03       	nop
8002e728:	80 03       	ld.sh	r3,r0[0x0]
8002e72a:	1d 78       	ld.ub	r8,--lr
8002e72c:	58 15       	cp.w	r5,1
8002e72e:	e0 81 04 60 	brne	8002efee <__ieee754_pow+0xa96>
8002e732:	ee 17 80 00 	eorh	r7,0x8000
8002e736:	e0 8f 04 5c 	bral	8002efee <__ieee754_pow+0xa96>
8002e73a:	40 78       	lddsp	r8,sp[0x1c]
8002e73c:	bf 98       	lsr	r8,0x1f
8002e73e:	20 18       	sub	r8,1
8002e740:	50 d8       	stdsp	sp[0x34],r8
8002e742:	eb e8 10 08 	or	r8,r5,r8
8002e746:	c0 d1       	brne	8002e760 <__ieee754_pow+0x208>
8002e748:	00 99       	mov	r9,r0
8002e74a:	06 98       	mov	r8,r3
8002e74c:	06 9a       	mov	r10,r3
8002e74e:	00 9b       	mov	r11,r0
8002e750:	e0 a0 10 c8 	rcall	800308e0 <__avr32_f64_sub>
8002e754:	14 98       	mov	r8,r10
8002e756:	16 99       	mov	r9,r11
8002e758:	e0 a0 13 1e 	rcall	80030d94 <__avr32_f64_div>
8002e75c:	e0 8f 04 40 	bral	8002efdc <__ieee754_pow+0xa84>
8002e760:	fc 19 41 e0 	movh	r9,0x41e0
8002e764:	12 32       	cp.w	r2,r9
8002e766:	e0 8a 00 9f 	brle	8002e8a4 <__ieee754_pow+0x34c>
8002e76a:	fc 18 43 f0 	movh	r8,0x43f0
8002e76e:	10 32       	cp.w	r2,r8
8002e770:	e0 8a 00 0a 	brle	8002e784 <__ieee754_pow+0x22c>
8002e774:	e0 65 ff ff 	mov	r5,65535
8002e778:	ea 15 3f ef 	orh	r5,0x3fef
8002e77c:	0a 34       	cp.w	r4,r5
8002e77e:	e0 89 00 13 	brgt	8002e7a4 <__ieee754_pow+0x24c>
8002e782:	c0 88       	rjmp	8002e792 <__ieee754_pow+0x23a>
8002e784:	e0 60 ff fe 	mov	r0,65534
8002e788:	ea 10 3f ef 	orh	r0,0x3fef
8002e78c:	00 34       	cp.w	r4,r0
8002e78e:	e0 89 00 06 	brgt	8002e79a <__ieee754_pow+0x242>
8002e792:	58 01       	cp.w	r1,0
8002e794:	e0 84 04 2b 	brge	8002efea <__ieee754_pow+0xa92>
8002e798:	c0 98       	rjmp	8002e7aa <__ieee754_pow+0x252>
8002e79a:	fc 1e 3f f0 	movh	lr,0x3ff0
8002e79e:	1c 34       	cp.w	r4,lr
8002e7a0:	e0 8a 00 11 	brle	8002e7c2 <__ieee754_pow+0x26a>
8002e7a4:	58 01       	cp.w	r1,0
8002e7a6:	e0 8a 04 22 	brle	8002efea <__ieee754_pow+0xa92>
8002e7aa:	e0 68 75 9c 	mov	r8,30108
8002e7ae:	ea 18 88 00 	orh	r8,0x8800
8002e7b2:	e0 69 e4 3c 	mov	r9,58428
8002e7b6:	ea 19 7e 37 	orh	r9,0x7e37
8002e7ba:	10 9a       	mov	r10,r8
8002e7bc:	12 9b       	mov	r11,r9
8002e7be:	e0 8f 04 0d 	bral	8002efd8 <__ieee754_pow+0xa80>
8002e7c2:	30 08       	mov	r8,0
8002e7c4:	fc 19 3f f0 	movh	r9,0x3ff0
8002e7c8:	e0 a0 10 8c 	rcall	800308e0 <__avr32_f64_sub>
8002e7cc:	fc 18 60 00 	movh	r8,0x6000
8002e7d0:	14 92       	mov	r2,r10
8002e7d2:	16 93       	mov	r3,r11
8002e7d4:	e0 69 15 47 	mov	r9,5447
8002e7d8:	ea 19 3f f7 	orh	r9,0x3ff7
8002e7dc:	e0 a0 0f 96 	rcall	80030708 <__avr32_f64_mul>
8002e7e0:	e0 68 df 44 	mov	r8,57156
8002e7e4:	ea 18 f8 5d 	orh	r8,0xf85d
8002e7e8:	fa eb 00 0c 	st.d	sp[12],r10
8002e7ec:	e0 69 ae 0b 	mov	r9,44555
8002e7f0:	ea 19 3e 54 	orh	r9,0x3e54
8002e7f4:	04 9a       	mov	r10,r2
8002e7f6:	06 9b       	mov	r11,r3
8002e7f8:	e0 a0 0f 88 	rcall	80030708 <__avr32_f64_mul>
8002e7fc:	04 98       	mov	r8,r2
8002e7fe:	fa eb 00 04 	st.d	sp[4],r10
8002e802:	06 99       	mov	r9,r3
8002e804:	04 9a       	mov	r10,r2
8002e806:	06 9b       	mov	r11,r3
8002e808:	e0 a0 0f 80 	rcall	80030708 <__avr32_f64_mul>
8002e80c:	30 08       	mov	r8,0
8002e80e:	14 90       	mov	r0,r10
8002e810:	16 91       	mov	r1,r11
8002e812:	fc 19 bf d0 	movh	r9,0xbfd0
8002e816:	04 9a       	mov	r10,r2
8002e818:	06 9b       	mov	r11,r3
8002e81a:	e0 a0 0f 77 	rcall	80030708 <__avr32_f64_mul>
8002e81e:	e0 68 55 55 	mov	r8,21845
8002e822:	ea 18 55 55 	orh	r8,0x5555
8002e826:	e0 69 55 55 	mov	r9,21845
8002e82a:	ea 19 3f d5 	orh	r9,0x3fd5
8002e82e:	e0 a0 11 27 	rcall	80030a7c <__avr32_f64_add>
8002e832:	14 98       	mov	r8,r10
8002e834:	16 99       	mov	r9,r11
8002e836:	04 9a       	mov	r10,r2
8002e838:	06 9b       	mov	r11,r3
8002e83a:	e0 a0 0f 67 	rcall	80030708 <__avr32_f64_mul>
8002e83e:	14 98       	mov	r8,r10
8002e840:	16 99       	mov	r9,r11
8002e842:	30 0a       	mov	r10,0
8002e844:	fc 1b 3f e0 	movh	r11,0x3fe0
8002e848:	e0 a0 10 4c 	rcall	800308e0 <__avr32_f64_sub>
8002e84c:	14 98       	mov	r8,r10
8002e84e:	16 99       	mov	r9,r11
8002e850:	00 9a       	mov	r10,r0
8002e852:	02 9b       	mov	r11,r1
8002e854:	e0 a0 0f 5a 	rcall	80030708 <__avr32_f64_mul>
8002e858:	e0 68 82 fe 	mov	r8,33534
8002e85c:	ea 18 65 2b 	orh	r8,0x652b
8002e860:	e0 69 15 47 	mov	r9,5447
8002e864:	ea 19 bf f7 	orh	r9,0xbff7
8002e868:	e0 a0 0f 50 	rcall	80030708 <__avr32_f64_mul>
8002e86c:	14 98       	mov	r8,r10
8002e86e:	16 99       	mov	r9,r11
8002e870:	fa ea 00 04 	ld.d	r10,sp[4]
8002e874:	e0 a0 11 04 	rcall	80030a7c <__avr32_f64_add>
8002e878:	16 91       	mov	r1,r11
8002e87a:	14 98       	mov	r8,r10
8002e87c:	14 90       	mov	r0,r10
8002e87e:	02 99       	mov	r9,r1
8002e880:	fa ea 00 0c 	ld.d	r10,sp[12]
8002e884:	e0 a0 10 fc 	rcall	80030a7c <__avr32_f64_add>
8002e888:	fa e8 00 0c 	ld.d	r8,sp[12]
8002e88c:	16 93       	mov	r3,r11
8002e88e:	30 02       	mov	r2,0
8002e890:	06 9b       	mov	r11,r3
8002e892:	04 9a       	mov	r10,r2
8002e894:	e0 a0 10 26 	rcall	800308e0 <__avr32_f64_sub>
8002e898:	14 98       	mov	r8,r10
8002e89a:	16 99       	mov	r9,r11
8002e89c:	00 9a       	mov	r10,r0
8002e89e:	02 9b       	mov	r11,r1
8002e8a0:	e0 8f 01 c6 	bral	8002ec2c <__ieee754_pow+0x6d4>
8002e8a4:	ee 54 ff ff 	cp.w	r4,1048575
8002e8a8:	e0 8a 00 04 	brle	8002e8b0 <__ieee754_pow+0x358>
8002e8ac:	30 0c       	mov	r12,0
8002e8ae:	c0 98       	rjmp	8002e8c0 <__ieee754_pow+0x368>
8002e8b0:	fc 19 43 40 	movh	r9,0x4340
8002e8b4:	30 08       	mov	r8,0
8002e8b6:	e0 a0 0f 29 	rcall	80030708 <__avr32_f64_mul>
8002e8ba:	3c bc       	mov	r12,-53
8002e8bc:	16 99       	mov	r9,r11
8002e8be:	12 94       	mov	r4,r9
8002e8c0:	f1 d4 c0 14 	bfextu	r8,r4,0x0,0x14
8002e8c4:	f8 cc 03 ff 	sub	r12,r12,1023
8002e8c8:	b5 44       	asr	r4,0x14
8002e8ca:	10 93       	mov	r3,r8
8002e8cc:	08 0c       	add	r12,r4
8002e8ce:	ea 13 3f f0 	orh	r3,0x3ff0
8002e8d2:	e2 58 98 8e 	cp.w	r8,235662
8002e8d6:	e0 8a 00 0c 	brle	8002e8ee <__ieee754_pow+0x396>
8002e8da:	ea 58 b6 79 	cp.w	r8,767609
8002e8de:	e0 89 00 04 	brgt	8002e8e6 <__ieee754_pow+0x38e>
8002e8e2:	30 14       	mov	r4,1
8002e8e4:	c0 68       	rjmp	8002e8f0 <__ieee754_pow+0x398>
8002e8e6:	f0 68 00 00 	mov	r8,-1048576
8002e8ea:	2f fc       	sub	r12,-1
8002e8ec:	10 03       	add	r3,r8
8002e8ee:	30 04       	mov	r4,0
8002e8f0:	14 98       	mov	r8,r10
8002e8f2:	06 99       	mov	r9,r3
8002e8f4:	4d ea       	lddpc	r10,8002ea6c <__ieee754_pow+0x514>
8002e8f6:	50 0c       	stdsp	sp[0x0],r12
8002e8f8:	f4 04 02 30 	ld.d	r0,r10[r4<<0x3]
8002e8fc:	fa e9 00 14 	st.d	sp[20],r8
8002e900:	fa e1 00 1c 	st.d	sp[28],r0
8002e904:	00 98       	mov	r8,r0
8002e906:	02 99       	mov	r9,r1
8002e908:	fa ea 00 14 	ld.d	r10,sp[20]
8002e90c:	e0 a0 0f ea 	rcall	800308e0 <__avr32_f64_sub>
8002e910:	fa e8 00 1c 	ld.d	r8,sp[28]
8002e914:	fa eb 00 24 	st.d	sp[36],r10
8002e918:	fa ea 00 14 	ld.d	r10,sp[20]
8002e91c:	e0 a0 10 b0 	rcall	80030a7c <__avr32_f64_add>
8002e920:	14 98       	mov	r8,r10
8002e922:	16 99       	mov	r9,r11
8002e924:	30 0a       	mov	r10,0
8002e926:	fc 1b 3f f0 	movh	r11,0x3ff0
8002e92a:	e0 a0 12 35 	rcall	80030d94 <__avr32_f64_div>
8002e92e:	14 98       	mov	r8,r10
8002e930:	16 99       	mov	r9,r11
8002e932:	fa eb 00 2c 	st.d	sp[44],r10
8002e936:	fa ea 00 24 	ld.d	r10,sp[36]
8002e93a:	e0 a0 0e e7 	rcall	80030708 <__avr32_f64_mul>
8002e93e:	30 09       	mov	r9,0
8002e940:	fa eb 00 0c 	st.d	sp[12],r10
8002e944:	fa eb 00 04 	st.d	sp[4],r10
8002e948:	a1 53       	asr	r3,0x1
8002e94a:	30 0a       	mov	r10,0
8002e94c:	bd b3       	sbr	r3,0x1d
8002e94e:	e8 08 15 12 	lsl	r8,r4,0x12
8002e952:	f8 28 00 00 	sub	r8,-524288
8002e956:	f0 03 00 0b 	add	r11,r8,r3
8002e95a:	50 49       	stdsp	sp[0x10],r9
8002e95c:	14 92       	mov	r2,r10
8002e95e:	fa e0 00 0c 	ld.d	r0,sp[12]
8002e962:	16 93       	mov	r3,r11
8002e964:	14 98       	mov	r8,r10
8002e966:	16 99       	mov	r9,r11
8002e968:	00 9a       	mov	r10,r0
8002e96a:	02 9b       	mov	r11,r1
8002e96c:	e0 a0 0e ce 	rcall	80030708 <__avr32_f64_mul>
8002e970:	14 98       	mov	r8,r10
8002e972:	16 99       	mov	r9,r11
8002e974:	fa ea 00 24 	ld.d	r10,sp[36]
8002e978:	e0 a0 0f b4 	rcall	800308e0 <__avr32_f64_sub>
8002e97c:	fa e8 00 1c 	ld.d	r8,sp[28]
8002e980:	fa eb 00 24 	st.d	sp[36],r10
8002e984:	04 9a       	mov	r10,r2
8002e986:	06 9b       	mov	r11,r3
8002e988:	e0 a0 0f ac 	rcall	800308e0 <__avr32_f64_sub>
8002e98c:	14 98       	mov	r8,r10
8002e98e:	16 99       	mov	r9,r11
8002e990:	fa ea 00 14 	ld.d	r10,sp[20]
8002e994:	e0 a0 0f a6 	rcall	800308e0 <__avr32_f64_sub>
8002e998:	14 98       	mov	r8,r10
8002e99a:	16 99       	mov	r9,r11
8002e99c:	00 9a       	mov	r10,r0
8002e99e:	02 9b       	mov	r11,r1
8002e9a0:	e0 a0 0e b4 	rcall	80030708 <__avr32_f64_mul>
8002e9a4:	14 98       	mov	r8,r10
8002e9a6:	16 99       	mov	r9,r11
8002e9a8:	fa ea 00 24 	ld.d	r10,sp[36]
8002e9ac:	e0 a0 0f 9a 	rcall	800308e0 <__avr32_f64_sub>
8002e9b0:	14 98       	mov	r8,r10
8002e9b2:	16 99       	mov	r9,r11
8002e9b4:	fa ea 00 2c 	ld.d	r10,sp[44]
8002e9b8:	e0 a0 0e a8 	rcall	80030708 <__avr32_f64_mul>
8002e9bc:	fa e8 00 04 	ld.d	r8,sp[4]
8002e9c0:	fa eb 00 14 	st.d	sp[20],r10
8002e9c4:	10 9a       	mov	r10,r8
8002e9c6:	12 9b       	mov	r11,r9
8002e9c8:	e0 a0 0e a0 	rcall	80030708 <__avr32_f64_mul>
8002e9cc:	16 93       	mov	r3,r11
8002e9ce:	14 92       	mov	r2,r10
8002e9d0:	06 99       	mov	r9,r3
8002e9d2:	14 98       	mov	r8,r10
8002e9d4:	e0 a0 0e 9a 	rcall	80030708 <__avr32_f64_mul>
8002e9d8:	e0 68 4e ef 	mov	r8,20207
8002e9dc:	ea 18 4a 45 	orh	r8,0x4a45
8002e9e0:	fa eb 00 1c 	st.d	sp[28],r10
8002e9e4:	e0 69 7e 28 	mov	r9,32296
8002e9e8:	ea 19 3f ca 	orh	r9,0x3fca
8002e9ec:	04 9a       	mov	r10,r2
8002e9ee:	06 9b       	mov	r11,r3
8002e9f0:	e0 a0 0e 8c 	rcall	80030708 <__avr32_f64_mul>
8002e9f4:	e0 68 db 65 	mov	r8,56165
8002e9f8:	ea 18 93 c9 	orh	r8,0x93c9
8002e9fc:	e0 69 86 4a 	mov	r9,34378
8002ea00:	ea 19 3f cd 	orh	r9,0x3fcd
8002ea04:	e0 a0 10 3c 	rcall	80030a7c <__avr32_f64_add>
8002ea08:	14 98       	mov	r8,r10
8002ea0a:	16 99       	mov	r9,r11
8002ea0c:	04 9a       	mov	r10,r2
8002ea0e:	06 9b       	mov	r11,r3
8002ea10:	e0 a0 0e 7c 	rcall	80030708 <__avr32_f64_mul>
8002ea14:	e0 68 41 01 	mov	r8,16641
8002ea18:	ea 18 a9 1d 	orh	r8,0xa91d
8002ea1c:	e0 69 74 60 	mov	r9,29792
8002ea20:	ea 19 3f d1 	orh	r9,0x3fd1
8002ea24:	e0 a0 10 2c 	rcall	80030a7c <__avr32_f64_add>
8002ea28:	14 98       	mov	r8,r10
8002ea2a:	16 99       	mov	r9,r11
8002ea2c:	04 9a       	mov	r10,r2
8002ea2e:	06 9b       	mov	r11,r3
8002ea30:	e0 a0 0e 6c 	rcall	80030708 <__avr32_f64_mul>
8002ea34:	e0 68 26 4d 	mov	r8,9805
8002ea38:	ea 18 51 8f 	orh	r8,0x518f
8002ea3c:	e0 69 55 55 	mov	r9,21845
8002ea40:	ea 19 3f d5 	orh	r9,0x3fd5
8002ea44:	e0 a0 10 1c 	rcall	80030a7c <__avr32_f64_add>
8002ea48:	14 98       	mov	r8,r10
8002ea4a:	16 99       	mov	r9,r11
8002ea4c:	04 9a       	mov	r10,r2
8002ea4e:	06 9b       	mov	r11,r3
8002ea50:	e0 a0 0e 5c 	rcall	80030708 <__avr32_f64_mul>
8002ea54:	e0 68 ab ff 	mov	r8,44031
8002ea58:	ea 18 db 6f 	orh	r8,0xdb6f
8002ea5c:	e0 69 6d b6 	mov	r9,28086
8002ea60:	ea 19 3f db 	orh	r9,0x3fdb
8002ea64:	e0 a0 10 0c 	rcall	80030a7c <__avr32_f64_add>
8002ea68:	c0 48       	rjmp	8002ea70 <__ieee754_pow+0x518>
8002ea6a:	d7 03       	nop
8002ea6c:	80 03       	ld.sh	r3,r0[0x0]
8002ea6e:	1d a8       	ld.ub	r8,lr[0x2]
8002ea70:	14 98       	mov	r8,r10
8002ea72:	16 99       	mov	r9,r11
8002ea74:	04 9a       	mov	r10,r2
8002ea76:	06 9b       	mov	r11,r3
8002ea78:	e0 a0 0e 48 	rcall	80030708 <__avr32_f64_mul>
8002ea7c:	e0 68 33 03 	mov	r8,13059
8002ea80:	ea 18 33 33 	orh	r8,0x3333
8002ea84:	e0 69 33 33 	mov	r9,13107
8002ea88:	ea 19 3f e3 	orh	r9,0x3fe3
8002ea8c:	e0 a0 0f f8 	rcall	80030a7c <__avr32_f64_add>
8002ea90:	14 98       	mov	r8,r10
8002ea92:	16 99       	mov	r9,r11
8002ea94:	fa ea 00 1c 	ld.d	r10,sp[28]
8002ea98:	e0 a0 0e 38 	rcall	80030708 <__avr32_f64_mul>
8002ea9c:	fa e8 00 04 	ld.d	r8,sp[4]
8002eaa0:	14 92       	mov	r2,r10
8002eaa2:	16 93       	mov	r3,r11
8002eaa4:	00 9a       	mov	r10,r0
8002eaa6:	02 9b       	mov	r11,r1
8002eaa8:	e0 a0 0f ea 	rcall	80030a7c <__avr32_f64_add>
8002eaac:	14 98       	mov	r8,r10
8002eaae:	16 99       	mov	r9,r11
8002eab0:	fa ea 00 14 	ld.d	r10,sp[20]
8002eab4:	e0 a0 0e 2a 	rcall	80030708 <__avr32_f64_mul>
8002eab8:	14 98       	mov	r8,r10
8002eaba:	16 99       	mov	r9,r11
8002eabc:	04 9a       	mov	r10,r2
8002eabe:	06 9b       	mov	r11,r3
8002eac0:	e0 a0 0f de 	rcall	80030a7c <__avr32_f64_add>
8002eac4:	00 98       	mov	r8,r0
8002eac6:	fa eb 00 1c 	st.d	sp[28],r10
8002eaca:	02 99       	mov	r9,r1
8002eacc:	00 9a       	mov	r10,r0
8002eace:	02 9b       	mov	r11,r1
8002ead0:	e0 a0 0e 1c 	rcall	80030708 <__avr32_f64_mul>
8002ead4:	30 08       	mov	r8,0
8002ead6:	fc 19 40 08 	movh	r9,0x4008
8002eada:	fa eb 00 2c 	st.d	sp[44],r10
8002eade:	e0 a0 0f cf 	rcall	80030a7c <__avr32_f64_add>
8002eae2:	fa e8 00 1c 	ld.d	r8,sp[28]
8002eae6:	e0 a0 0f cb 	rcall	80030a7c <__avr32_f64_add>
8002eaea:	40 48       	lddsp	r8,sp[0x10]
8002eaec:	16 93       	mov	r3,r11
8002eaee:	10 92       	mov	r2,r8
8002eaf0:	06 99       	mov	r9,r3
8002eaf2:	00 9a       	mov	r10,r0
8002eaf4:	02 9b       	mov	r11,r1
8002eaf6:	e0 a0 0e 09 	rcall	80030708 <__avr32_f64_mul>
8002eafa:	04 98       	mov	r8,r2
8002eafc:	06 99       	mov	r9,r3
8002eafe:	fa eb 00 24 	st.d	sp[36],r10
8002eb02:	fa ea 00 14 	ld.d	r10,sp[20]
8002eb06:	e0 a0 0e 01 	rcall	80030708 <__avr32_f64_mul>
8002eb0a:	30 08       	mov	r8,0
8002eb0c:	14 90       	mov	r0,r10
8002eb0e:	16 91       	mov	r1,r11
8002eb10:	04 9a       	mov	r10,r2
8002eb12:	06 9b       	mov	r11,r3
8002eb14:	fc 19 40 08 	movh	r9,0x4008
8002eb18:	e0 a0 0e e4 	rcall	800308e0 <__avr32_f64_sub>
8002eb1c:	fa e8 00 2c 	ld.d	r8,sp[44]
8002eb20:	e0 a0 0e e0 	rcall	800308e0 <__avr32_f64_sub>
8002eb24:	14 98       	mov	r8,r10
8002eb26:	16 99       	mov	r9,r11
8002eb28:	fa ea 00 1c 	ld.d	r10,sp[28]
8002eb2c:	e0 a0 0e da 	rcall	800308e0 <__avr32_f64_sub>
8002eb30:	fa e8 00 04 	ld.d	r8,sp[4]
8002eb34:	e0 a0 0d ea 	rcall	80030708 <__avr32_f64_mul>
8002eb38:	14 98       	mov	r8,r10
8002eb3a:	16 99       	mov	r9,r11
8002eb3c:	00 9a       	mov	r10,r0
8002eb3e:	02 9b       	mov	r11,r1
8002eb40:	e0 a0 0f 9e 	rcall	80030a7c <__avr32_f64_add>
8002eb44:	16 91       	mov	r1,r11
8002eb46:	14 90       	mov	r0,r10
8002eb48:	14 98       	mov	r8,r10
8002eb4a:	02 99       	mov	r9,r1
8002eb4c:	fa ea 00 24 	ld.d	r10,sp[36]
8002eb50:	e0 a0 0f 96 	rcall	80030a7c <__avr32_f64_add>
8002eb54:	40 4e       	lddsp	lr,sp[0x10]
8002eb56:	16 93       	mov	r3,r11
8002eb58:	1c 92       	mov	r2,lr
8002eb5a:	1c 9a       	mov	r10,lr
8002eb5c:	fc 18 e0 00 	movh	r8,0xe000
8002eb60:	e0 69 c7 09 	mov	r9,50953
8002eb64:	ea 19 3f ee 	orh	r9,0x3fee
8002eb68:	06 9b       	mov	r11,r3
8002eb6a:	e0 a0 0d cf 	rcall	80030708 <__avr32_f64_mul>
8002eb6e:	e0 68 01 f5 	mov	r8,501
8002eb72:	ea 18 14 5b 	orh	r8,0x145b
8002eb76:	fa eb 00 14 	st.d	sp[20],r10
8002eb7a:	e0 69 2f e0 	mov	r9,12256
8002eb7e:	ea 19 be 3e 	orh	r9,0xbe3e
8002eb82:	04 9a       	mov	r10,r2
8002eb84:	06 9b       	mov	r11,r3
8002eb86:	e0 a0 0d c1 	rcall	80030708 <__avr32_f64_mul>
8002eb8a:	fa e8 00 24 	ld.d	r8,sp[36]
8002eb8e:	fa eb 00 04 	st.d	sp[4],r10
8002eb92:	04 9a       	mov	r10,r2
8002eb94:	06 9b       	mov	r11,r3
8002eb96:	e0 a0 0e a5 	rcall	800308e0 <__avr32_f64_sub>
8002eb9a:	14 98       	mov	r8,r10
8002eb9c:	16 99       	mov	r9,r11
8002eb9e:	00 9a       	mov	r10,r0
8002eba0:	02 9b       	mov	r11,r1
8002eba2:	e0 a0 0e 9f 	rcall	800308e0 <__avr32_f64_sub>
8002eba6:	e0 68 03 fd 	mov	r8,1021
8002ebaa:	ea 18 dc 3a 	orh	r8,0xdc3a
8002ebae:	e0 69 c7 09 	mov	r9,50953
8002ebb2:	ea 19 3f ee 	orh	r9,0x3fee
8002ebb6:	e0 a0 0d a9 	rcall	80030708 <__avr32_f64_mul>
8002ebba:	14 98       	mov	r8,r10
8002ebbc:	16 99       	mov	r9,r11
8002ebbe:	fa ea 00 04 	ld.d	r10,sp[4]
8002ebc2:	e0 a0 0f 5d 	rcall	80030a7c <__avr32_f64_add>
8002ebc6:	4a 18       	lddpc	r8,8002ec48 <__ieee754_pow+0x6f0>
8002ebc8:	f0 04 02 38 	ld.d	r8,r8[r4<<0x3]
8002ebcc:	e0 a0 0f 58 	rcall	80030a7c <__avr32_f64_add>
8002ebd0:	40 0c       	lddsp	r12,sp[0x0]
8002ebd2:	fa eb 00 1c 	st.d	sp[28],r10
8002ebd6:	e0 a0 0f f4 	rcall	80030bbe <__avr32_s32_to_f64>
8002ebda:	49 d8       	lddpc	r8,8002ec4c <__ieee754_pow+0x6f4>
8002ebdc:	14 90       	mov	r0,r10
8002ebde:	16 91       	mov	r1,r11
8002ebe0:	f0 04 02 3a 	ld.d	r10,r8[r4<<0x3]
8002ebe4:	fa e8 00 1c 	ld.d	r8,sp[28]
8002ebe8:	fa eb 00 04 	st.d	sp[4],r10
8002ebec:	fa ea 00 14 	ld.d	r10,sp[20]
8002ebf0:	e0 a0 0f 46 	rcall	80030a7c <__avr32_f64_add>
8002ebf4:	fa e8 00 04 	ld.d	r8,sp[4]
8002ebf8:	e0 a0 0f 42 	rcall	80030a7c <__avr32_f64_add>
8002ebfc:	00 98       	mov	r8,r0
8002ebfe:	02 99       	mov	r9,r1
8002ec00:	e0 a0 0f 3e 	rcall	80030a7c <__avr32_f64_add>
8002ec04:	00 98       	mov	r8,r0
8002ec06:	02 99       	mov	r9,r1
8002ec08:	40 4a       	lddsp	r10,sp[0x10]
8002ec0a:	16 93       	mov	r3,r11
8002ec0c:	14 92       	mov	r2,r10
8002ec0e:	06 9b       	mov	r11,r3
8002ec10:	e0 a0 0e 68 	rcall	800308e0 <__avr32_f64_sub>
8002ec14:	fa e8 00 04 	ld.d	r8,sp[4]
8002ec18:	e0 a0 0e 64 	rcall	800308e0 <__avr32_f64_sub>
8002ec1c:	fa e8 00 14 	ld.d	r8,sp[20]
8002ec20:	e0 a0 0e 60 	rcall	800308e0 <__avr32_f64_sub>
8002ec24:	14 98       	mov	r8,r10
8002ec26:	16 99       	mov	r9,r11
8002ec28:	fa ea 00 1c 	ld.d	r10,sp[28]
8002ec2c:	e0 a0 0e 5a 	rcall	800308e0 <__avr32_f64_sub>
8002ec30:	20 15       	sub	r5,1
8002ec32:	40 d9       	lddsp	r9,sp[0x34]
8002ec34:	14 90       	mov	r0,r10
8002ec36:	16 91       	mov	r1,r11
8002ec38:	12 45       	or	r5,r9
8002ec3a:	c0 b0       	breq	8002ec50 <__ieee754_pow+0x6f8>
8002ec3c:	30 04       	mov	r4,0
8002ec3e:	fc 15 3f f0 	movh	r5,0x3ff0
8002ec42:	fa e5 00 0c 	st.d	sp[12],r4
8002ec46:	c0 a8       	rjmp	8002ec5a <__ieee754_pow+0x702>
8002ec48:	80 03       	ld.sh	r3,r0[0x0]
8002ec4a:	1d 98       	ld.ub	r8,lr[0x1]
8002ec4c:	80 03       	ld.sh	r3,r0[0x0]
8002ec4e:	1d 88       	ld.ub	r8,lr[0x0]
8002ec50:	30 0a       	mov	r10,0
8002ec52:	fc 1b bf f0 	movh	r11,0xbff0
8002ec56:	fa eb 00 0c 	st.d	sp[12],r10
8002ec5a:	0e 99       	mov	r9,r7
8002ec5c:	30 08       	mov	r8,0
8002ec5e:	0e 9b       	mov	r11,r7
8002ec60:	fa e9 00 04 	st.d	sp[4],r8
8002ec64:	0c 9a       	mov	r10,r6
8002ec66:	e0 a0 0e 3d 	rcall	800308e0 <__avr32_f64_sub>
8002ec6a:	04 98       	mov	r8,r2
8002ec6c:	06 99       	mov	r9,r3
8002ec6e:	e0 a0 0d 4d 	rcall	80030708 <__avr32_f64_mul>
8002ec72:	00 98       	mov	r8,r0
8002ec74:	14 94       	mov	r4,r10
8002ec76:	16 95       	mov	r5,r11
8002ec78:	02 99       	mov	r9,r1
8002ec7a:	0e 9b       	mov	r11,r7
8002ec7c:	0c 9a       	mov	r10,r6
8002ec7e:	e0 a0 0d 45 	rcall	80030708 <__avr32_f64_mul>
8002ec82:	14 98       	mov	r8,r10
8002ec84:	16 99       	mov	r9,r11
8002ec86:	08 9a       	mov	r10,r4
8002ec88:	0a 9b       	mov	r11,r5
8002ec8a:	e0 a0 0e f9 	rcall	80030a7c <__avr32_f64_add>
8002ec8e:	04 98       	mov	r8,r2
8002ec90:	06 99       	mov	r9,r3
8002ec92:	14 90       	mov	r0,r10
8002ec94:	16 91       	mov	r1,r11
8002ec96:	fa ea 00 04 	ld.d	r10,sp[4]
8002ec9a:	e0 a0 0d 37 	rcall	80030708 <__avr32_f64_mul>
8002ec9e:	14 94       	mov	r4,r10
8002eca0:	16 95       	mov	r5,r11
8002eca2:	08 98       	mov	r8,r4
8002eca4:	00 9a       	mov	r10,r0
8002eca6:	02 9b       	mov	r11,r1
8002eca8:	0a 99       	mov	r9,r5
8002ecaa:	fa e5 00 04 	st.d	sp[4],r4
8002ecae:	e0 a0 0e e7 	rcall	80030a7c <__avr32_f64_add>
8002ecb2:	e0 6e ff ff 	mov	lr,65535
8002ecb6:	ea 1e 40 8f 	orh	lr,0x408f
8002ecba:	16 93       	mov	r3,r11
8002ecbc:	14 92       	mov	r2,r10
8002ecbe:	06 97       	mov	r7,r3
8002ecc0:	06 98       	mov	r8,r3
8002ecc2:	1c 33       	cp.w	r3,lr
8002ecc4:	e0 8a 00 36 	brle	8002ed30 <__ieee754_pow+0x7d8>
8002ecc8:	fc 1a bf 70 	movh	r10,0xbf70
8002eccc:	14 08       	add	r8,r10
8002ecce:	f1 e2 10 09 	or	r9,r8,r2
8002ecd2:	c1 a1       	brne	8002ed06 <__ieee754_pow+0x7ae>
8002ecd4:	e0 68 82 fe 	mov	r8,33534
8002ecd8:	ea 18 65 2b 	orh	r8,0x652b
8002ecdc:	e0 69 15 47 	mov	r9,5447
8002ece0:	ea 19 3c 97 	orh	r9,0x3c97
8002ece4:	00 9a       	mov	r10,r0
8002ece6:	02 9b       	mov	r11,r1
8002ece8:	e0 a0 0e ca 	rcall	80030a7c <__avr32_f64_add>
8002ecec:	08 98       	mov	r8,r4
8002ecee:	fa eb 00 14 	st.d	sp[20],r10
8002ecf2:	0a 99       	mov	r9,r5
8002ecf4:	04 9a       	mov	r10,r2
8002ecf6:	06 9b       	mov	r11,r3
8002ecf8:	e0 a0 0d f4 	rcall	800308e0 <__avr32_f64_sub>
8002ecfc:	fa e8 00 14 	ld.d	r8,sp[20]
8002ed00:	e0 a0 10 16 	rcall	80030d2c <__avr32_f64_cmp_lt>
8002ed04:	c4 40       	breq	8002ed8c <__ieee754_pow+0x834>
8002ed06:	e0 68 75 9c 	mov	r8,30108
8002ed0a:	ea 18 88 00 	orh	r8,0x8800
8002ed0e:	e0 69 e4 3c 	mov	r9,58428
8002ed12:	ea 19 7e 37 	orh	r9,0x7e37
8002ed16:	fa ea 00 0c 	ld.d	r10,sp[12]
8002ed1a:	e0 a0 0c f7 	rcall	80030708 <__avr32_f64_mul>
8002ed1e:	e0 68 75 9c 	mov	r8,30108
8002ed22:	ea 18 88 00 	orh	r8,0x8800
8002ed26:	e0 69 e4 3c 	mov	r9,58428
8002ed2a:	ea 19 7e 37 	orh	r9,0x7e37
8002ed2e:	c5 59       	rjmp	8002efd8 <__ieee754_pow+0xa80>
8002ed30:	f9 d3 c0 1f 	bfextu	r12,r3,0x0,0x1f
8002ed34:	e0 6e cb ff 	mov	lr,52223
8002ed38:	ea 1e 40 90 	orh	lr,0x4090
8002ed3c:	1c 3c       	cp.w	r12,lr
8002ed3e:	e0 8a 00 27 	brle	8002ed8c <__ieee754_pow+0x834>
8002ed42:	e0 6c 34 00 	mov	r12,13312
8002ed46:	ea 1c 3f 6f 	orh	r12,0x3f6f
8002ed4a:	18 08       	add	r8,r12
8002ed4c:	14 48       	or	r8,r10
8002ed4e:	c0 a1       	brne	8002ed62 <__ieee754_pow+0x80a>
8002ed50:	08 98       	mov	r8,r4
8002ed52:	0a 99       	mov	r9,r5
8002ed54:	e0 a0 0d c6 	rcall	800308e0 <__avr32_f64_sub>
8002ed58:	00 98       	mov	r8,r0
8002ed5a:	02 99       	mov	r9,r1
8002ed5c:	e0 a0 0f b4 	rcall	80030cc4 <__avr32_f64_cmp_ge>
8002ed60:	c1 60       	breq	8002ed8c <__ieee754_pow+0x834>
8002ed62:	e0 68 f3 59 	mov	r8,62297
8002ed66:	ea 18 c2 f8 	orh	r8,0xc2f8
8002ed6a:	e0 69 6e 1f 	mov	r9,28191
8002ed6e:	ea 19 01 a5 	orh	r9,0x1a5
8002ed72:	fa ea 00 0c 	ld.d	r10,sp[12]
8002ed76:	e0 a0 0c c9 	rcall	80030708 <__avr32_f64_mul>
8002ed7a:	e0 68 f3 59 	mov	r8,62297
8002ed7e:	ea 18 c2 f8 	orh	r8,0xc2f8
8002ed82:	e0 69 6e 1f 	mov	r9,28191
8002ed86:	ea 19 01 a5 	orh	r9,0x1a5
8002ed8a:	c2 79       	rjmp	8002efd8 <__ieee754_pow+0xa80>
8002ed8c:	f1 d7 c0 1f 	bfextu	r8,r7,0x0,0x1f
8002ed90:	fc 1c 3f e0 	movh	r12,0x3fe0
8002ed94:	18 38       	cp.w	r8,r12
8002ed96:	e0 89 00 04 	brgt	8002ed9e <__ieee754_pow+0x846>
8002ed9a:	30 06       	mov	r6,0
8002ed9c:	c2 78       	rjmp	8002edea <__ieee754_pow+0x892>
8002ed9e:	fc 19 00 10 	movh	r9,0x10
8002eda2:	b5 48       	asr	r8,0x14
8002eda4:	f0 c8 03 fe 	sub	r8,r8,1022
8002eda8:	f2 08 08 48 	asr	r8,r9,r8
8002edac:	0e 08       	add	r8,r7
8002edae:	f3 d8 c0 14 	bfextu	r9,r8,0x0,0x14
8002edb2:	b5 a9       	sbr	r9,0x14
8002edb4:	f9 d8 c2 8b 	bfextu	r12,r8,0x14,0xb
8002edb8:	30 0a       	mov	r10,0
8002edba:	f8 cc 03 ff 	sub	r12,r12,1023
8002edbe:	f8 06 11 14 	rsub	r6,r12,20
8002edc2:	f2 06 08 46 	asr	r6,r9,r6
8002edc6:	ee 79 ff ff 	mov	r9,1048575
8002edca:	f2 0c 08 4c 	asr	r12,r9,r12
8002edce:	5c dc       	com	r12
8002edd0:	f9 e8 00 0b 	and	r11,r12,r8
8002edd4:	58 07       	cp.w	r7,0
8002edd6:	fb b6 05 00 	rsublt	r6,0
8002edda:	14 98       	mov	r8,r10
8002eddc:	16 99       	mov	r9,r11
8002edde:	08 9a       	mov	r10,r4
8002ede0:	0a 9b       	mov	r11,r5
8002ede2:	e0 a0 0d 7f 	rcall	800308e0 <__avr32_f64_sub>
8002ede6:	fa eb 00 04 	st.d	sp[4],r10
8002edea:	fa e8 00 04 	ld.d	r8,sp[4]
8002edee:	00 9a       	mov	r10,r0
8002edf0:	02 9b       	mov	r11,r1
8002edf2:	e0 a0 0e 45 	rcall	80030a7c <__avr32_f64_add>
8002edf6:	30 04       	mov	r4,0
8002edf8:	16 95       	mov	r5,r11
8002edfa:	30 08       	mov	r8,0
8002edfc:	e0 69 2e 43 	mov	r9,11843
8002ee00:	ea 19 3f e6 	orh	r9,0x3fe6
8002ee04:	08 9a       	mov	r10,r4
8002ee06:	0a 9b       	mov	r11,r5
8002ee08:	e0 a0 0c 80 	rcall	80030708 <__avr32_f64_mul>
8002ee0c:	fa e8 00 04 	ld.d	r8,sp[4]
8002ee10:	fa eb 00 14 	st.d	sp[20],r10
8002ee14:	08 9a       	mov	r10,r4
8002ee16:	0a 9b       	mov	r11,r5
8002ee18:	e0 a0 0d 64 	rcall	800308e0 <__avr32_f64_sub>
8002ee1c:	14 98       	mov	r8,r10
8002ee1e:	16 99       	mov	r9,r11
8002ee20:	00 9a       	mov	r10,r0
8002ee22:	02 9b       	mov	r11,r1
8002ee24:	e0 a0 0d 5e 	rcall	800308e0 <__avr32_f64_sub>
8002ee28:	e0 68 39 ef 	mov	r8,14831
8002ee2c:	ea 18 fe fa 	orh	r8,0xfefa
8002ee30:	e0 69 2e 42 	mov	r9,11842
8002ee34:	ea 19 3f e6 	orh	r9,0x3fe6
8002ee38:	e0 a0 0c 68 	rcall	80030708 <__avr32_f64_mul>
8002ee3c:	e0 68 6c 39 	mov	r8,27705
8002ee40:	ea 18 0c a8 	orh	r8,0xca8
8002ee44:	14 92       	mov	r2,r10
8002ee46:	16 93       	mov	r3,r11
8002ee48:	08 9a       	mov	r10,r4
8002ee4a:	0a 9b       	mov	r11,r5
8002ee4c:	e0 69 5c 61 	mov	r9,23649
8002ee50:	ea 19 be 20 	orh	r9,0xbe20
8002ee54:	e0 a0 0c 5a 	rcall	80030708 <__avr32_f64_mul>
8002ee58:	14 98       	mov	r8,r10
8002ee5a:	16 99       	mov	r9,r11
8002ee5c:	04 9a       	mov	r10,r2
8002ee5e:	06 9b       	mov	r11,r3
8002ee60:	e0 a0 0e 0e 	rcall	80030a7c <__avr32_f64_add>
8002ee64:	16 93       	mov	r3,r11
8002ee66:	14 92       	mov	r2,r10
8002ee68:	14 98       	mov	r8,r10
8002ee6a:	06 99       	mov	r9,r3
8002ee6c:	fa ea 00 14 	ld.d	r10,sp[20]
8002ee70:	e0 a0 0e 06 	rcall	80030a7c <__avr32_f64_add>
8002ee74:	fa e8 00 14 	ld.d	r8,sp[20]
8002ee78:	14 94       	mov	r4,r10
8002ee7a:	16 95       	mov	r5,r11
8002ee7c:	e0 a0 0d 32 	rcall	800308e0 <__avr32_f64_sub>
8002ee80:	14 98       	mov	r8,r10
8002ee82:	16 99       	mov	r9,r11
8002ee84:	04 9a       	mov	r10,r2
8002ee86:	06 9b       	mov	r11,r3
8002ee88:	e0 a0 0d 2c 	rcall	800308e0 <__avr32_f64_sub>
8002ee8c:	08 98       	mov	r8,r4
8002ee8e:	fa eb 00 04 	st.d	sp[4],r10
8002ee92:	0a 99       	mov	r9,r5
8002ee94:	08 9a       	mov	r10,r4
8002ee96:	0a 9b       	mov	r11,r5
8002ee98:	e0 a0 0c 38 	rcall	80030708 <__avr32_f64_mul>
8002ee9c:	e0 68 a4 d0 	mov	r8,42192
8002eea0:	ea 18 72 be 	orh	r8,0x72be
8002eea4:	14 92       	mov	r2,r10
8002eea6:	16 93       	mov	r3,r11
8002eea8:	e0 69 37 69 	mov	r9,14185
8002eeac:	ea 19 3e 66 	orh	r9,0x3e66
8002eeb0:	e0 a0 0c 2c 	rcall	80030708 <__avr32_f64_mul>
8002eeb4:	e0 68 6b f1 	mov	r8,27633
8002eeb8:	ea 18 c5 d2 	orh	r8,0xc5d2
8002eebc:	e0 69 bd 41 	mov	r9,48449
8002eec0:	ea 19 3e bb 	orh	r9,0x3ebb
8002eec4:	e0 a0 0d 0e 	rcall	800308e0 <__avr32_f64_sub>
8002eec8:	14 98       	mov	r8,r10
8002eeca:	16 99       	mov	r9,r11
8002eecc:	04 9a       	mov	r10,r2
8002eece:	06 9b       	mov	r11,r3
8002eed0:	e0 a0 0c 1c 	rcall	80030708 <__avr32_f64_mul>
8002eed4:	e0 68 de 2c 	mov	r8,56876
8002eed8:	ea 18 af 25 	orh	r8,0xaf25
8002eedc:	e0 69 56 6a 	mov	r9,22122
8002eee0:	ea 19 3f 11 	orh	r9,0x3f11
8002eee4:	e0 a0 0d cc 	rcall	80030a7c <__avr32_f64_add>
8002eee8:	14 98       	mov	r8,r10
8002eeea:	16 99       	mov	r9,r11
8002eeec:	04 9a       	mov	r10,r2
8002eeee:	06 9b       	mov	r11,r3
8002eef0:	e0 a0 0c 0c 	rcall	80030708 <__avr32_f64_mul>
8002eef4:	e0 68 bd 93 	mov	r8,48531
8002eef8:	ea 18 16 be 	orh	r8,0x16be
8002eefc:	e0 69 c1 6c 	mov	r9,49516
8002ef00:	ea 19 3f 66 	orh	r9,0x3f66
8002ef04:	e0 a0 0c ee 	rcall	800308e0 <__avr32_f64_sub>
8002ef08:	14 98       	mov	r8,r10
8002ef0a:	16 99       	mov	r9,r11
8002ef0c:	04 9a       	mov	r10,r2
8002ef0e:	06 9b       	mov	r11,r3
8002ef10:	e0 a0 0b fc 	rcall	80030708 <__avr32_f64_mul>
8002ef14:	e0 68 55 3e 	mov	r8,21822
8002ef18:	ea 18 55 55 	orh	r8,0x5555
8002ef1c:	e0 69 55 55 	mov	r9,21845
8002ef20:	ea 19 3f c5 	orh	r9,0x3fc5
8002ef24:	e0 a0 0d ac 	rcall	80030a7c <__avr32_f64_add>
8002ef28:	14 98       	mov	r8,r10
8002ef2a:	16 99       	mov	r9,r11
8002ef2c:	04 9a       	mov	r10,r2
8002ef2e:	06 9b       	mov	r11,r3
8002ef30:	e0 a0 0b ec 	rcall	80030708 <__avr32_f64_mul>
8002ef34:	14 98       	mov	r8,r10
8002ef36:	16 99       	mov	r9,r11
8002ef38:	08 9a       	mov	r10,r4
8002ef3a:	0a 9b       	mov	r11,r5
8002ef3c:	e0 a0 0c d2 	rcall	800308e0 <__avr32_f64_sub>
8002ef40:	16 93       	mov	r3,r11
8002ef42:	14 92       	mov	r2,r10
8002ef44:	14 98       	mov	r8,r10
8002ef46:	06 99       	mov	r9,r3
8002ef48:	08 9a       	mov	r10,r4
8002ef4a:	0a 9b       	mov	r11,r5
8002ef4c:	e0 a0 0b de 	rcall	80030708 <__avr32_f64_mul>
8002ef50:	30 08       	mov	r8,0
8002ef52:	14 90       	mov	r0,r10
8002ef54:	16 91       	mov	r1,r11
8002ef56:	04 9a       	mov	r10,r2
8002ef58:	06 9b       	mov	r11,r3
8002ef5a:	fc 19 40 00 	movh	r9,0x4000
8002ef5e:	e0 a0 0c c1 	rcall	800308e0 <__avr32_f64_sub>
8002ef62:	14 98       	mov	r8,r10
8002ef64:	16 99       	mov	r9,r11
8002ef66:	00 9a       	mov	r10,r0
8002ef68:	02 9b       	mov	r11,r1
8002ef6a:	e0 a0 0f 15 	rcall	80030d94 <__avr32_f64_div>
8002ef6e:	fa e8 00 04 	ld.d	r8,sp[4]
8002ef72:	14 92       	mov	r2,r10
8002ef74:	16 93       	mov	r3,r11
8002ef76:	08 9a       	mov	r10,r4
8002ef78:	0a 9b       	mov	r11,r5
8002ef7a:	e0 a0 0b c7 	rcall	80030708 <__avr32_f64_mul>
8002ef7e:	14 98       	mov	r8,r10
8002ef80:	16 99       	mov	r9,r11
8002ef82:	fa ea 00 04 	ld.d	r10,sp[4]
8002ef86:	e0 a0 0d 7b 	rcall	80030a7c <__avr32_f64_add>
8002ef8a:	14 98       	mov	r8,r10
8002ef8c:	16 99       	mov	r9,r11
8002ef8e:	04 9a       	mov	r10,r2
8002ef90:	06 9b       	mov	r11,r3
8002ef92:	e0 a0 0c a7 	rcall	800308e0 <__avr32_f64_sub>
8002ef96:	08 98       	mov	r8,r4
8002ef98:	0a 99       	mov	r9,r5
8002ef9a:	e0 a0 0c a3 	rcall	800308e0 <__avr32_f64_sub>
8002ef9e:	14 98       	mov	r8,r10
8002efa0:	16 99       	mov	r9,r11
8002efa2:	30 0a       	mov	r10,0
8002efa4:	fc 1b 3f f0 	movh	r11,0x3ff0
8002efa8:	e0 a0 0c 9c 	rcall	800308e0 <__avr32_f64_sub>
8002efac:	ec 0c 15 14 	lsl	r12,r6,0x14
8002efb0:	16 95       	mov	r5,r11
8002efb2:	14 94       	mov	r4,r10
8002efb4:	f8 05 00 08 	add	r8,r12,r5
8002efb8:	f0 09 14 14 	asr	r9,r8,0x14
8002efbc:	58 09       	cp.w	r9,0
8002efbe:	e0 89 00 08 	brgt	8002efce <__ieee754_pow+0xa76>
8002efc2:	0c 9c       	mov	r12,r6
8002efc4:	e0 a0 0b 28 	rcall	80030614 <scalbn>
8002efc8:	14 98       	mov	r8,r10
8002efca:	16 99       	mov	r9,r11
8002efcc:	c0 48       	rjmp	8002efd4 <__ieee754_pow+0xa7c>
8002efce:	10 95       	mov	r5,r8
8002efd0:	14 98       	mov	r8,r10
8002efd2:	0a 99       	mov	r9,r5
8002efd4:	fa ea 00 0c 	ld.d	r10,sp[12]
8002efd8:	e0 a0 0b 98 	rcall	80030708 <__avr32_f64_mul>
8002efdc:	16 97       	mov	r7,r11
8002efde:	14 96       	mov	r6,r10
8002efe0:	c0 78       	rjmp	8002efee <__ieee754_pow+0xa96>
8002efe2:	fc 17 3f f0 	movh	r7,0x3ff0
8002efe6:	30 06       	mov	r6,0
8002efe8:	c0 38       	rjmp	8002efee <__ieee754_pow+0xa96>
8002efea:	30 07       	mov	r7,0
8002efec:	0e 96       	mov	r6,r7
8002efee:	0e 9b       	mov	r11,r7
8002eff0:	0c 9a       	mov	r10,r6
8002eff2:	2f 2d       	sub	sp,-56
8002eff4:	d8 32       	popm	r0-r7,pc
8002eff6:	30 05       	mov	r5,0
8002eff8:	fe 9f fb 2b 	bral	8002e64e <__ieee754_pow+0xf6>

8002effc <__ieee754_rem_pio2>:
8002effc:	d4 31       	pushm	r0-r7,lr
8002effe:	20 ad       	sub	sp,40
8002f000:	50 3b       	stdsp	sp[0xc],r11
8002f002:	18 96       	mov	r6,r12
8002f004:	14 98       	mov	r8,r10
8002f006:	16 99       	mov	r9,r11
8002f008:	14 92       	mov	r2,r10
8002f00a:	16 93       	mov	r3,r11
8002f00c:	eb db c0 1f 	bfextu	r5,r11,0x0,0x1f
8002f010:	e0 6c 21 fb 	mov	r12,8699
8002f014:	ea 1c 3f e9 	orh	r12,0x3fe9
8002f018:	18 35       	cp.w	r5,r12
8002f01a:	e0 89 00 0b 	brgt	8002f030 <__ieee754_rem_pio2+0x34>
8002f01e:	ec e9 00 00 	st.d	r6[0],r8
8002f022:	30 07       	mov	r7,0
8002f024:	30 08       	mov	r8,0
8002f026:	30 09       	mov	r9,0
8002f028:	ec e9 00 08 	st.d	r6[8],r8
8002f02c:	e0 8f 02 1a 	bral	8002f460 <__ieee754_rem_pio2+0x464>
8002f030:	e0 6c d9 7b 	mov	r12,55675
8002f034:	ea 1c 40 02 	orh	r12,0x4002
8002f038:	18 35       	cp.w	r5,r12
8002f03a:	e0 89 00 b6 	brgt	8002f1a6 <__ieee754_rem_pio2+0x1aa>
8002f03e:	58 0b       	cp.w	r11,0
8002f040:	e0 8a 00 59 	brle	8002f0f2 <__ieee754_rem_pio2+0xf6>
8002f044:	fc 18 54 40 	movh	r8,0x5440
8002f048:	e0 69 21 fb 	mov	r9,8699
8002f04c:	ea 19 3f f9 	orh	r9,0x3ff9
8002f050:	e0 a0 0c 48 	rcall	800308e0 <__avr32_f64_sub>
8002f054:	e0 68 21 fb 	mov	r8,8699
8002f058:	ea 18 3f f9 	orh	r8,0x3ff9
8002f05c:	14 92       	mov	r2,r10
8002f05e:	16 93       	mov	r3,r11
8002f060:	10 35       	cp.w	r5,r8
8002f062:	c1 e0       	breq	8002f09e <__ieee754_rem_pio2+0xa2>
8002f064:	e0 68 63 31 	mov	r8,25393
8002f068:	ea 18 1a 62 	orh	r8,0x1a62
8002f06c:	e0 69 b4 61 	mov	r9,46177
8002f070:	ea 19 3d d0 	orh	r9,0x3dd0
8002f074:	e0 a0 0c 36 	rcall	800308e0 <__avr32_f64_sub>
8002f078:	14 94       	mov	r4,r10
8002f07a:	16 95       	mov	r5,r11
8002f07c:	08 98       	mov	r8,r4
8002f07e:	0a 99       	mov	r9,r5
8002f080:	04 9a       	mov	r10,r2
8002f082:	06 9b       	mov	r11,r3
8002f084:	ec e5 00 00 	st.d	r6[0],r4
8002f088:	e0 a0 0c 2c 	rcall	800308e0 <__avr32_f64_sub>
8002f08c:	e0 68 63 31 	mov	r8,25393
8002f090:	ea 18 1a 62 	orh	r8,0x1a62
8002f094:	e0 69 b4 61 	mov	r9,46177
8002f098:	ea 19 3d d0 	orh	r9,0x3dd0
8002f09c:	c2 78       	rjmp	8002f0ea <__ieee754_rem_pio2+0xee>
8002f09e:	fc 18 1a 60 	movh	r8,0x1a60
8002f0a2:	e0 69 b4 61 	mov	r9,46177
8002f0a6:	ea 19 3d d0 	orh	r9,0x3dd0
8002f0aa:	e0 a0 0c 1b 	rcall	800308e0 <__avr32_f64_sub>
8002f0ae:	e0 68 70 73 	mov	r8,28787
8002f0b2:	ea 18 2e 03 	orh	r8,0x2e03
8002f0b6:	14 94       	mov	r4,r10
8002f0b8:	16 95       	mov	r5,r11
8002f0ba:	e0 69 19 8a 	mov	r9,6538
8002f0be:	ea 19 3b a3 	orh	r9,0x3ba3
8002f0c2:	e0 a0 0c 0f 	rcall	800308e0 <__avr32_f64_sub>
8002f0c6:	14 92       	mov	r2,r10
8002f0c8:	16 93       	mov	r3,r11
8002f0ca:	04 98       	mov	r8,r2
8002f0cc:	06 99       	mov	r9,r3
8002f0ce:	08 9a       	mov	r10,r4
8002f0d0:	0a 9b       	mov	r11,r5
8002f0d2:	ec e3 00 00 	st.d	r6[0],r2
8002f0d6:	e0 a0 0c 05 	rcall	800308e0 <__avr32_f64_sub>
8002f0da:	e0 68 70 73 	mov	r8,28787
8002f0de:	ea 18 2e 03 	orh	r8,0x2e03
8002f0e2:	e0 69 19 8a 	mov	r9,6538
8002f0e6:	ea 19 3b a3 	orh	r9,0x3ba3
8002f0ea:	30 17       	mov	r7,1
8002f0ec:	e0 a0 0b fa 	rcall	800308e0 <__avr32_f64_sub>
8002f0f0:	c3 08       	rjmp	8002f150 <__ieee754_rem_pio2+0x154>
8002f0f2:	fc 18 54 40 	movh	r8,0x5440
8002f0f6:	e0 69 21 fb 	mov	r9,8699
8002f0fa:	ea 19 3f f9 	orh	r9,0x3ff9
8002f0fe:	e0 a0 0c bf 	rcall	80030a7c <__avr32_f64_add>
8002f102:	e0 6c 21 fb 	mov	r12,8699
8002f106:	ea 1c 3f f9 	orh	r12,0x3ff9
8002f10a:	14 92       	mov	r2,r10
8002f10c:	16 93       	mov	r3,r11
8002f10e:	18 35       	cp.w	r5,r12
8002f110:	c2 40       	breq	8002f158 <__ieee754_rem_pio2+0x15c>
8002f112:	e0 68 63 31 	mov	r8,25393
8002f116:	ea 18 1a 62 	orh	r8,0x1a62
8002f11a:	e0 69 b4 61 	mov	r9,46177
8002f11e:	ea 19 3d d0 	orh	r9,0x3dd0
8002f122:	e0 a0 0c ad 	rcall	80030a7c <__avr32_f64_add>
8002f126:	14 94       	mov	r4,r10
8002f128:	16 95       	mov	r5,r11
8002f12a:	08 98       	mov	r8,r4
8002f12c:	0a 99       	mov	r9,r5
8002f12e:	04 9a       	mov	r10,r2
8002f130:	06 9b       	mov	r11,r3
8002f132:	ec e5 00 00 	st.d	r6[0],r4
8002f136:	e0 a0 0b d5 	rcall	800308e0 <__avr32_f64_sub>
8002f13a:	e0 68 63 31 	mov	r8,25393
8002f13e:	ea 18 1a 62 	orh	r8,0x1a62
8002f142:	e0 69 b4 61 	mov	r9,46177
8002f146:	ea 19 3d d0 	orh	r9,0x3dd0
8002f14a:	3f f7       	mov	r7,-1
8002f14c:	e0 a0 0c 98 	rcall	80030a7c <__avr32_f64_add>
8002f150:	ec eb 00 08 	st.d	r6[8],r10
8002f154:	e0 8f 01 86 	bral	8002f460 <__ieee754_rem_pio2+0x464>
8002f158:	fc 18 1a 60 	movh	r8,0x1a60
8002f15c:	e0 69 b4 61 	mov	r9,46177
8002f160:	ea 19 3d d0 	orh	r9,0x3dd0
8002f164:	e0 a0 0c 8c 	rcall	80030a7c <__avr32_f64_add>
8002f168:	e0 68 70 73 	mov	r8,28787
8002f16c:	ea 18 2e 03 	orh	r8,0x2e03
8002f170:	14 94       	mov	r4,r10
8002f172:	16 95       	mov	r5,r11
8002f174:	e0 69 19 8a 	mov	r9,6538
8002f178:	ea 19 3b a3 	orh	r9,0x3ba3
8002f17c:	e0 a0 0c 80 	rcall	80030a7c <__avr32_f64_add>
8002f180:	14 92       	mov	r2,r10
8002f182:	16 93       	mov	r3,r11
8002f184:	04 98       	mov	r8,r2
8002f186:	06 99       	mov	r9,r3
8002f188:	08 9a       	mov	r10,r4
8002f18a:	0a 9b       	mov	r11,r5
8002f18c:	ec e3 00 00 	st.d	r6[0],r2
8002f190:	e0 a0 0b a8 	rcall	800308e0 <__avr32_f64_sub>
8002f194:	e0 68 70 73 	mov	r8,28787
8002f198:	ea 18 2e 03 	orh	r8,0x2e03
8002f19c:	e0 69 19 8a 	mov	r9,6538
8002f1a0:	ea 19 3b a3 	orh	r9,0x3ba3
8002f1a4:	cd 3b       	rjmp	8002f14a <__ieee754_rem_pio2+0x14e>
8002f1a6:	e0 6c 21 fb 	mov	r12,8699
8002f1aa:	ea 1c 41 39 	orh	r12,0x4139
8002f1ae:	18 35       	cp.w	r5,r12
8002f1b0:	e0 89 00 f4 	brgt	8002f398 <__ieee754_rem_pio2+0x39c>
8002f1b4:	e0 a0 08 f4 	rcall	8003039c <fabs>
8002f1b8:	e0 68 c8 83 	mov	r8,51331
8002f1bc:	ea 18 6d c9 	orh	r8,0x6dc9
8002f1c0:	14 92       	mov	r2,r10
8002f1c2:	16 93       	mov	r3,r11
8002f1c4:	e0 69 5f 30 	mov	r9,24368
8002f1c8:	ea 19 3f e4 	orh	r9,0x3fe4
8002f1cc:	e0 a0 0a 9e 	rcall	80030708 <__avr32_f64_mul>
8002f1d0:	30 08       	mov	r8,0
8002f1d2:	fc 19 3f e0 	movh	r9,0x3fe0
8002f1d6:	e0 a0 0c 53 	rcall	80030a7c <__avr32_f64_add>
8002f1da:	e0 a0 0c db 	rcall	80030b90 <__avr32_f64_to_s32>
8002f1de:	18 97       	mov	r7,r12
8002f1e0:	e0 a0 0c ef 	rcall	80030bbe <__avr32_s32_to_f64>
8002f1e4:	fc 18 54 40 	movh	r8,0x5440
8002f1e8:	e0 69 21 fb 	mov	r9,8699
8002f1ec:	ea 19 bf f9 	orh	r9,0xbff9
8002f1f0:	fa eb 00 04 	st.d	sp[4],r10
8002f1f4:	e0 a0 0a 8a 	rcall	80030708 <__avr32_f64_mul>
8002f1f8:	14 98       	mov	r8,r10
8002f1fa:	16 99       	mov	r9,r11
8002f1fc:	04 9a       	mov	r10,r2
8002f1fe:	06 9b       	mov	r11,r3
8002f200:	e0 a0 0c 3e 	rcall	80030a7c <__avr32_f64_add>
8002f204:	e0 68 63 31 	mov	r8,25393
8002f208:	ea 18 1a 62 	orh	r8,0x1a62
8002f20c:	14 92       	mov	r2,r10
8002f20e:	16 93       	mov	r3,r11
8002f210:	e0 69 b4 61 	mov	r9,46177
8002f214:	ea 19 3d d0 	orh	r9,0x3dd0
8002f218:	fa ea 00 04 	ld.d	r10,sp[4]
8002f21c:	e0 a0 0a 76 	rcall	80030708 <__avr32_f64_mul>
8002f220:	14 90       	mov	r0,r10
8002f222:	16 91       	mov	r1,r11
8002f224:	59 f7       	cp.w	r7,31
8002f226:	e0 89 00 0a 	brgt	8002f23a <__ieee754_rem_pio2+0x23e>
8002f22a:	ee c9 00 01 	sub	r9,r7,1
8002f22e:	4d a8       	lddpc	r8,8002f394 <__ieee754_rem_pio2+0x398>
8002f230:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8002f234:	10 35       	cp.w	r5,r8
8002f236:	e0 81 00 8b 	brne	8002f34c <__ieee754_rem_pio2+0x350>
8002f23a:	00 98       	mov	r8,r0
8002f23c:	02 99       	mov	r9,r1
8002f23e:	04 9a       	mov	r10,r2
8002f240:	06 9b       	mov	r11,r3
8002f242:	e0 a0 0b 4f 	rcall	800308e0 <__avr32_f64_sub>
8002f246:	ec eb 00 00 	st.d	r6[0],r10
8002f24a:	ea 0c 14 14 	asr	r12,r5,0x14
8002f24e:	f7 db c2 8b 	bfextu	r11,r11,0x14,0xb
8002f252:	f8 0b 01 0b 	sub	r11,r12,r11
8002f256:	59 0b       	cp.w	r11,16
8002f258:	e0 8a 00 82 	brle	8002f35c <__ieee754_rem_pio2+0x360>
8002f25c:	50 0c       	stdsp	sp[0x0],r12
8002f25e:	fc 18 1a 60 	movh	r8,0x1a60
8002f262:	e0 69 b4 61 	mov	r9,46177
8002f266:	ea 19 3d d0 	orh	r9,0x3dd0
8002f26a:	fa ea 00 04 	ld.d	r10,sp[4]
8002f26e:	e0 a0 0a 4d 	rcall	80030708 <__avr32_f64_mul>
8002f272:	16 91       	mov	r1,r11
8002f274:	14 90       	mov	r0,r10
8002f276:	14 98       	mov	r8,r10
8002f278:	02 99       	mov	r9,r1
8002f27a:	04 9a       	mov	r10,r2
8002f27c:	06 9b       	mov	r11,r3
8002f27e:	e0 a0 0b 31 	rcall	800308e0 <__avr32_f64_sub>
8002f282:	16 95       	mov	r5,r11
8002f284:	14 98       	mov	r8,r10
8002f286:	14 94       	mov	r4,r10
8002f288:	0a 99       	mov	r9,r5
8002f28a:	04 9a       	mov	r10,r2
8002f28c:	06 9b       	mov	r11,r3
8002f28e:	e0 a0 0b 29 	rcall	800308e0 <__avr32_f64_sub>
8002f292:	00 98       	mov	r8,r0
8002f294:	02 99       	mov	r9,r1
8002f296:	e0 a0 0b 25 	rcall	800308e0 <__avr32_f64_sub>
8002f29a:	e0 68 70 73 	mov	r8,28787
8002f29e:	ea 18 2e 03 	orh	r8,0x2e03
8002f2a2:	14 92       	mov	r2,r10
8002f2a4:	16 93       	mov	r3,r11
8002f2a6:	e0 69 19 8a 	mov	r9,6538
8002f2aa:	ea 19 3b a3 	orh	r9,0x3ba3
8002f2ae:	fa ea 00 04 	ld.d	r10,sp[4]
8002f2b2:	e0 a0 0a 2b 	rcall	80030708 <__avr32_f64_mul>
8002f2b6:	04 98       	mov	r8,r2
8002f2b8:	06 99       	mov	r9,r3
8002f2ba:	e0 a0 0b 13 	rcall	800308e0 <__avr32_f64_sub>
8002f2be:	16 91       	mov	r1,r11
8002f2c0:	14 98       	mov	r8,r10
8002f2c2:	14 90       	mov	r0,r10
8002f2c4:	02 99       	mov	r9,r1
8002f2c6:	08 9a       	mov	r10,r4
8002f2c8:	0a 9b       	mov	r11,r5
8002f2ca:	e0 a0 0b 0b 	rcall	800308e0 <__avr32_f64_sub>
8002f2ce:	ec eb 00 00 	st.d	r6[0],r10
8002f2d2:	40 0c       	lddsp	r12,sp[0x0]
8002f2d4:	f7 db c2 8b 	bfextu	r11,r11,0x14,0xb
8002f2d8:	16 1c       	sub	r12,r11
8002f2da:	e0 4c 00 31 	cp.w	r12,49
8002f2de:	e0 89 00 05 	brgt	8002f2e8 <__ieee754_rem_pio2+0x2ec>
8002f2e2:	08 92       	mov	r2,r4
8002f2e4:	0a 93       	mov	r3,r5
8002f2e6:	c3 b8       	rjmp	8002f35c <__ieee754_rem_pio2+0x360>
8002f2e8:	fc 18 2e 00 	movh	r8,0x2e00
8002f2ec:	e0 69 19 8a 	mov	r9,6538
8002f2f0:	ea 19 3b a3 	orh	r9,0x3ba3
8002f2f4:	fa ea 00 04 	ld.d	r10,sp[4]
8002f2f8:	e0 a0 0a 08 	rcall	80030708 <__avr32_f64_mul>
8002f2fc:	16 91       	mov	r1,r11
8002f2fe:	14 90       	mov	r0,r10
8002f300:	14 98       	mov	r8,r10
8002f302:	02 99       	mov	r9,r1
8002f304:	08 9a       	mov	r10,r4
8002f306:	0a 9b       	mov	r11,r5
8002f308:	e0 a0 0a ec 	rcall	800308e0 <__avr32_f64_sub>
8002f30c:	14 98       	mov	r8,r10
8002f30e:	16 93       	mov	r3,r11
8002f310:	14 92       	mov	r2,r10
8002f312:	06 99       	mov	r9,r3
8002f314:	08 9a       	mov	r10,r4
8002f316:	0a 9b       	mov	r11,r5
8002f318:	e0 a0 0a e4 	rcall	800308e0 <__avr32_f64_sub>
8002f31c:	00 98       	mov	r8,r0
8002f31e:	02 99       	mov	r9,r1
8002f320:	e0 a0 0a e0 	rcall	800308e0 <__avr32_f64_sub>
8002f324:	e0 68 49 c1 	mov	r8,18881
8002f328:	ea 18 25 20 	orh	r8,0x2520
8002f32c:	14 94       	mov	r4,r10
8002f32e:	16 95       	mov	r5,r11
8002f330:	e0 69 83 9a 	mov	r9,33690
8002f334:	ea 19 39 7b 	orh	r9,0x397b
8002f338:	fa ea 00 04 	ld.d	r10,sp[4]
8002f33c:	e0 a0 09 e6 	rcall	80030708 <__avr32_f64_mul>
8002f340:	08 98       	mov	r8,r4
8002f342:	0a 99       	mov	r9,r5
8002f344:	e0 a0 0a ce 	rcall	800308e0 <__avr32_f64_sub>
8002f348:	14 90       	mov	r0,r10
8002f34a:	16 91       	mov	r1,r11
8002f34c:	00 98       	mov	r8,r0
8002f34e:	02 99       	mov	r9,r1
8002f350:	04 9a       	mov	r10,r2
8002f352:	06 9b       	mov	r11,r3
8002f354:	e0 a0 0a c6 	rcall	800308e0 <__avr32_f64_sub>
8002f358:	ec eb 00 00 	st.d	r6[0],r10
8002f35c:	ec e8 00 00 	ld.d	r8,r6[0]
8002f360:	04 9a       	mov	r10,r2
8002f362:	06 9b       	mov	r11,r3
8002f364:	e0 a0 0a be 	rcall	800308e0 <__avr32_f64_sub>
8002f368:	00 98       	mov	r8,r0
8002f36a:	ec c5 ff f8 	sub	r5,r6,-8
8002f36e:	02 99       	mov	r9,r1
8002f370:	e0 a0 0a b8 	rcall	800308e0 <__avr32_f64_sub>
8002f374:	ea eb 00 00 	st.d	r5[0],r10
8002f378:	40 38       	lddsp	r8,sp[0xc]
8002f37a:	58 08       	cp.w	r8,0
8002f37c:	c7 24       	brge	8002f460 <__ieee754_rem_pio2+0x464>
8002f37e:	6c 08       	ld.w	r8,r6[0x0]
8002f380:	ee 18 80 00 	eorh	r8,0x8000
8002f384:	8d 08       	st.w	r6[0x0],r8
8002f386:	5c 37       	neg	r7
8002f388:	6a 08       	ld.w	r8,r5[0x0]
8002f38a:	ee 18 80 00 	eorh	r8,0x8000
8002f38e:	8b 08       	st.w	r5[0x0],r8
8002f390:	c6 88       	rjmp	8002f460 <__ieee754_rem_pio2+0x464>
8002f392:	d7 03       	nop
8002f394:	80 03       	ld.sh	r3,r0[0x0]
8002f396:	1d b8       	ld.ub	r8,lr[0x3]
8002f398:	e0 6c ff ff 	mov	r12,65535
8002f39c:	ea 1c 7f ef 	orh	r12,0x7fef
8002f3a0:	18 35       	cp.w	r5,r12
8002f3a2:	e0 8a 00 08 	brle	8002f3b2 <__ieee754_rem_pio2+0x3b6>
8002f3a6:	30 07       	mov	r7,0
8002f3a8:	e0 a0 0a 9c 	rcall	800308e0 <__avr32_f64_sub>
8002f3ac:	ec eb 00 00 	st.d	r6[0],r10
8002f3b0:	cd 0a       	rjmp	8002f150 <__ieee754_rem_pio2+0x154>
8002f3b2:	ea 03 14 14 	asr	r3,r5,0x14
8002f3b6:	e6 c3 04 16 	sub	r3,r3,1046
8002f3ba:	e6 08 15 14 	lsl	r8,r3,0x14
8002f3be:	ea 08 01 01 	sub	r1,r5,r8
8002f3c2:	02 9b       	mov	r11,r1
8002f3c4:	e0 a0 0b e6 	rcall	80030b90 <__avr32_f64_to_s32>
8002f3c8:	e0 a0 0b fb 	rcall	80030bbe <__avr32_s32_to_f64>
8002f3cc:	14 94       	mov	r4,r10
8002f3ce:	16 95       	mov	r5,r11
8002f3d0:	08 98       	mov	r8,r4
8002f3d2:	0a 99       	mov	r9,r5
8002f3d4:	fa e5 00 10 	st.d	sp[16],r4
8002f3d8:	02 9b       	mov	r11,r1
8002f3da:	04 9a       	mov	r10,r2
8002f3dc:	e0 a0 0a 82 	rcall	800308e0 <__avr32_f64_sub>
8002f3e0:	30 08       	mov	r8,0
8002f3e2:	fc 19 41 70 	movh	r9,0x4170
8002f3e6:	e0 a0 09 91 	rcall	80030708 <__avr32_f64_mul>
8002f3ea:	14 90       	mov	r0,r10
8002f3ec:	16 91       	mov	r1,r11
8002f3ee:	e0 a0 0b d1 	rcall	80030b90 <__avr32_f64_to_s32>
8002f3f2:	e0 a0 0b e6 	rcall	80030bbe <__avr32_s32_to_f64>
8002f3f6:	16 95       	mov	r5,r11
8002f3f8:	14 94       	mov	r4,r10
8002f3fa:	0a 99       	mov	r9,r5
8002f3fc:	08 98       	mov	r8,r4
8002f3fe:	fa e5 00 18 	st.d	sp[24],r4
8002f402:	00 9a       	mov	r10,r0
8002f404:	02 9b       	mov	r11,r1
8002f406:	e0 a0 0a 6d 	rcall	800308e0 <__avr32_f64_sub>
8002f40a:	30 08       	mov	r8,0
8002f40c:	fc 19 41 70 	movh	r9,0x4170
8002f410:	30 35       	mov	r5,3
8002f412:	e0 a0 09 7b 	rcall	80030708 <__avr32_f64_mul>
8002f416:	fa c7 ff d8 	sub	r7,sp,-40
8002f41a:	af 2b       	st.d	--r7,r10
8002f41c:	ee ea 00 00 	ld.d	r10,r7[0]
8002f420:	0a 91       	mov	r1,r5
8002f422:	20 87       	sub	r7,8
8002f424:	20 15       	sub	r5,1
8002f426:	30 08       	mov	r8,0
8002f428:	30 09       	mov	r9,0
8002f42a:	e0 a0 0c 3a 	rcall	80030c9e <__avr32_f64_cmp_eq>
8002f42e:	cf 71       	brne	8002f41c <__ieee754_rem_pio2+0x420>
8002f430:	48 e8       	lddpc	r8,8002f468 <__ieee754_rem_pio2+0x46c>
8002f432:	02 99       	mov	r9,r1
8002f434:	1a d8       	st.w	--sp,r8
8002f436:	06 9a       	mov	r10,r3
8002f438:	30 28       	mov	r8,2
8002f43a:	fa cc ff ec 	sub	r12,sp,-20
8002f43e:	0c 9b       	mov	r11,r6
8002f440:	cd 0d       	rcall	8002f7e0 <__kernel_rem_pio2>
8002f442:	2f fd       	sub	sp,-4
8002f444:	18 97       	mov	r7,r12
8002f446:	40 38       	lddsp	r8,sp[0xc]
8002f448:	58 08       	cp.w	r8,0
8002f44a:	c0 b4       	brge	8002f460 <__ieee754_rem_pio2+0x464>
8002f44c:	6c 08       	ld.w	r8,r6[0x0]
8002f44e:	ee 18 80 00 	eorh	r8,0x8000
8002f452:	8d 08       	st.w	r6[0x0],r8
8002f454:	5c 37       	neg	r7
8002f456:	2f 86       	sub	r6,-8
8002f458:	6c 08       	ld.w	r8,r6[0x0]
8002f45a:	ee 18 80 00 	eorh	r8,0x8000
8002f45e:	8d 08       	st.w	r6[0x0],r8
8002f460:	0e 9c       	mov	r12,r7
8002f462:	2f 6d       	sub	sp,-40
8002f464:	d8 32       	popm	r0-r7,pc
8002f466:	d7 03       	nop
8002f468:	80 03       	ld.sh	r3,r0[0x0]
8002f46a:	1e 38       	cp.w	r8,pc

8002f46c <__ieee754_sqrt>:
8002f46c:	d4 31       	pushm	r0-r7,lr
8002f46e:	fc 1e 7f f0 	movh	lr,0x7ff0
8002f472:	16 9c       	mov	r12,r11
8002f474:	14 96       	mov	r6,r10
8002f476:	16 97       	mov	r7,r11
8002f478:	14 94       	mov	r4,r10
8002f47a:	16 95       	mov	r5,r11
8002f47c:	16 99       	mov	r9,r11
8002f47e:	14 98       	mov	r8,r10
8002f480:	e6 1c 7f f0 	andh	r12,0x7ff0,COH
8002f484:	1c 3c       	cp.w	r12,lr
8002f486:	c0 c1       	brne	8002f49e <__ieee754_sqrt+0x32>
8002f488:	14 98       	mov	r8,r10
8002f48a:	16 99       	mov	r9,r11
8002f48c:	e0 a0 09 3e 	rcall	80030708 <__avr32_f64_mul>
8002f490:	14 98       	mov	r8,r10
8002f492:	16 99       	mov	r9,r11
8002f494:	0c 9a       	mov	r10,r6
8002f496:	0e 9b       	mov	r11,r7
8002f498:	e0 a0 0a f2 	rcall	80030a7c <__avr32_f64_add>
8002f49c:	c1 38       	rjmp	8002f4c2 <__ieee754_sqrt+0x56>
8002f49e:	58 0b       	cp.w	r11,0
8002f4a0:	e0 89 00 14 	brgt	8002f4c8 <__ieee754_sqrt+0x5c>
8002f4a4:	f9 db c0 1f 	bfextu	r12,r11,0x0,0x1f
8002f4a8:	14 4c       	or	r12,r10
8002f4aa:	e0 80 00 a3 	breq	8002f5f0 <__ieee754_sqrt+0x184>
8002f4ae:	58 0b       	cp.w	r11,0
8002f4b0:	c0 c0       	breq	8002f4c8 <__ieee754_sqrt+0x5c>
8002f4b2:	14 98       	mov	r8,r10
8002f4b4:	16 99       	mov	r9,r11
8002f4b6:	e0 a0 0a 15 	rcall	800308e0 <__avr32_f64_sub>
8002f4ba:	14 98       	mov	r8,r10
8002f4bc:	16 99       	mov	r9,r11
8002f4be:	e0 a0 0c 6b 	rcall	80030d94 <__avr32_f64_div>
8002f4c2:	14 96       	mov	r6,r10
8002f4c4:	16 97       	mov	r7,r11
8002f4c6:	c9 58       	rjmp	8002f5f0 <__ieee754_sqrt+0x184>
8002f4c8:	f2 0a 14 14 	asr	r10,r9,0x14
8002f4cc:	c0 60       	breq	8002f4d8 <__ieee754_sqrt+0x6c>
8002f4ce:	c1 88       	rjmp	8002f4fe <__ieee754_sqrt+0x92>
8002f4d0:	f0 09 16 0b 	lsr	r9,r8,0xb
8002f4d4:	21 5a       	sub	r10,21
8002f4d6:	b5 78       	lsl	r8,0x15
8002f4d8:	58 09       	cp.w	r9,0
8002f4da:	cf b0       	breq	8002f4d0 <__ieee754_sqrt+0x64>
8002f4dc:	30 0b       	mov	r11,0
8002f4de:	c0 38       	rjmp	8002f4e4 <__ieee754_sqrt+0x78>
8002f4e0:	a1 79       	lsl	r9,0x1
8002f4e2:	2f fb       	sub	r11,-1
8002f4e4:	ed b9 00 14 	bld	r9,0x14
8002f4e8:	cf c1       	brne	8002f4e0 <__ieee754_sqrt+0x74>
8002f4ea:	2f fa       	sub	r10,-1
8002f4ec:	f6 0c 11 20 	rsub	r12,r11,32
8002f4f0:	16 1a       	sub	r10,r11
8002f4f2:	f0 0c 0a 4c 	lsr	r12,r8,r12
8002f4f6:	f0 0b 09 48 	lsl	r8,r8,r11
8002f4fa:	f9 e9 10 09 	or	r9,r12,r9
8002f4fe:	f3 d9 c0 14 	bfextu	r9,r9,0x0,0x14
8002f502:	f4 c6 03 ff 	sub	r6,r10,1023
8002f506:	b5 a9       	sbr	r9,0x14
8002f508:	ed b6 00 00 	bld	r6,0x0
8002f50c:	c0 61       	brne	8002f518 <__ieee754_sqrt+0xac>
8002f50e:	f0 0a 16 1f 	lsr	r10,r8,0x1f
8002f512:	a1 78       	lsl	r8,0x1
8002f514:	f4 09 00 19 	add	r9,r10,r9<<0x1
8002f518:	30 07       	mov	r7,0
8002f51a:	f0 0a 15 01 	lsl	r10,r8,0x1
8002f51e:	0e 9c       	mov	r12,r7
8002f520:	bf 98       	lsr	r8,0x1f
8002f522:	fc 1b 00 20 	movh	r11,0x20
8002f526:	f0 09 00 18 	add	r8,r8,r9<<0x1
8002f52a:	0e 99       	mov	r9,r7
8002f52c:	f2 0b 00 0e 	add	lr,r9,r11
8002f530:	2f f7       	sub	r7,-1
8002f532:	10 3e       	cp.w	lr,r8
8002f534:	f1 de ea 18 	suble	r8,r8,lr
8002f538:	f9 db ea 0c 	addle	r12,r12,r11
8002f53c:	fd db ea 09 	addle	r9,lr,r11
8002f540:	f4 0e 16 1f 	lsr	lr,r10,0x1f
8002f544:	a1 9b       	lsr	r11,0x1
8002f546:	fc 08 00 18 	add	r8,lr,r8<<0x1
8002f54a:	a1 7a       	lsl	r10,0x1
8002f54c:	59 67       	cp.w	r7,22
8002f54e:	ce f1       	brne	8002f52c <__ieee754_sqrt+0xc0>
8002f550:	30 07       	mov	r7,0
8002f552:	fc 15 80 00 	movh	r5,0x8000
8002f556:	0e 9b       	mov	r11,r7
8002f558:	0e 94       	mov	r4,r7
8002f55a:	0e 92       	mov	r2,r7
8002f55c:	ea 04 00 0e 	add	lr,r5,r4
8002f560:	10 39       	cp.w	r9,r8
8002f562:	c0 95       	brlt	8002f574 <__ieee754_sqrt+0x108>
8002f564:	5f 03       	sreq	r3
8002f566:	14 3e       	cp.w	lr,r10
8002f568:	5f 81       	srls	r1
8002f56a:	e3 e3 00 03 	and	r3,r1,r3
8002f56e:	e4 03 18 00 	cp.b	r3,r2
8002f572:	c1 70       	breq	8002f5a0 <__ieee754_sqrt+0x134>
8002f574:	1c 93       	mov	r3,lr
8002f576:	fc 05 00 04 	add	r4,lr,r5
8002f57a:	e6 13 80 00 	andh	r3,0x8000,COH
8002f57e:	fc 11 80 00 	movh	r1,0x8000
8002f582:	02 33       	cp.w	r3,r1
8002f584:	c0 61       	brne	8002f590 <__ieee754_sqrt+0x124>
8002f586:	58 04       	cp.w	r4,0
8002f588:	c0 45       	brlt	8002f590 <__ieee754_sqrt+0x124>
8002f58a:	f2 c3 ff ff 	sub	r3,r9,-1
8002f58e:	c0 28       	rjmp	8002f592 <__ieee754_sqrt+0x126>
8002f590:	12 93       	mov	r3,r9
8002f592:	12 18       	sub	r8,r9
8002f594:	0a 0b       	add	r11,r5
8002f596:	1c 3a       	cp.w	r10,lr
8002f598:	f7 b8 03 01 	sublo	r8,1
8002f59c:	06 99       	mov	r9,r3
8002f59e:	1c 1a       	sub	r10,lr
8002f5a0:	f4 0e 16 1f 	lsr	lr,r10,0x1f
8002f5a4:	a1 95       	lsr	r5,0x1
8002f5a6:	2f f7       	sub	r7,-1
8002f5a8:	fc 08 00 18 	add	r8,lr,r8<<0x1
8002f5ac:	a1 7a       	lsl	r10,0x1
8002f5ae:	e0 47 00 20 	cp.w	r7,32
8002f5b2:	cd 51       	brne	8002f55c <__ieee754_sqrt+0xf0>
8002f5b4:	14 48       	or	r8,r10
8002f5b6:	c0 a0       	breq	8002f5ca <__ieee754_sqrt+0x15e>
8002f5b8:	f1 db c0 01 	bfextu	r8,r11,0x0,0x1
8002f5bc:	5b fb       	cp.w	r11,-1
8002f5be:	f7 bc 00 ff 	subeq	r12,-1
8002f5c2:	f9 bb 00 00 	moveq	r11,0
8002f5c6:	f1 db e1 0b 	addne	r11,r8,r11
8002f5ca:	a1 9b       	lsr	r11,0x1
8002f5cc:	16 99       	mov	r9,r11
8002f5ce:	bf b9       	sbr	r9,0x1f
8002f5d0:	ec 0a 14 01 	asr	r10,r6,0x1
8002f5d4:	f8 08 14 01 	asr	r8,r12,0x1
8002f5d8:	b5 6a       	lsl	r10,0x14
8002f5da:	f9 dc c0 01 	bfextu	r12,r12,0x0,0x1
8002f5de:	f2 0b 17 10 	movne	r11,r9
8002f5e2:	fc 19 3f e0 	movh	r9,0x3fe0
8002f5e6:	16 96       	mov	r6,r11
8002f5e8:	12 0a       	add	r10,r9
8002f5ea:	f4 08 00 08 	add	r8,r10,r8
8002f5ee:	10 97       	mov	r7,r8
8002f5f0:	0c 9a       	mov	r10,r6
8002f5f2:	0e 9b       	mov	r11,r7
8002f5f4:	d8 32       	popm	r0-r7,pc
8002f5f6:	d7 03       	nop

8002f5f8 <__kernel_cos>:
8002f5f8:	d4 31       	pushm	r0-r7,lr
8002f5fa:	20 6d       	sub	sp,24
8002f5fc:	fa e9 00 08 	st.d	sp[8],r8
8002f600:	14 92       	mov	r2,r10
8002f602:	16 93       	mov	r3,r11
8002f604:	14 96       	mov	r6,r10
8002f606:	ef db c0 1f 	bfextu	r7,r11,0x0,0x1f
8002f60a:	e0 69 ff ff 	mov	r9,65535
8002f60e:	ea 19 3e 3f 	orh	r9,0x3e3f
8002f612:	12 37       	cp.w	r7,r9
8002f614:	e0 89 00 09 	brgt	8002f626 <__kernel_cos+0x2e>
8002f618:	e0 a0 0a bc 	rcall	80030b90 <__avr32_f64_to_s32>
8002f61c:	c0 51       	brne	8002f626 <__kernel_cos+0x2e>
8002f61e:	30 0a       	mov	r10,0
8002f620:	fc 1b 3f f0 	movh	r11,0x3ff0
8002f624:	cd b8       	rjmp	8002f7da <__kernel_cos+0x1e2>
8002f626:	04 98       	mov	r8,r2
8002f628:	06 99       	mov	r9,r3
8002f62a:	04 9a       	mov	r10,r2
8002f62c:	06 9b       	mov	r11,r3
8002f62e:	e0 a0 08 6d 	rcall	80030708 <__avr32_f64_mul>
8002f632:	e0 68 38 d4 	mov	r8,14548
8002f636:	ea 18 be 88 	orh	r8,0xbe88
8002f63a:	14 94       	mov	r4,r10
8002f63c:	16 95       	mov	r5,r11
8002f63e:	e0 69 fa e9 	mov	r9,64233
8002f642:	ea 19 bd a8 	orh	r9,0xbda8
8002f646:	e0 a0 08 61 	rcall	80030708 <__avr32_f64_mul>
8002f64a:	e0 68 b1 c4 	mov	r8,45508
8002f64e:	ea 18 bd b4 	orh	r8,0xbdb4
8002f652:	e0 69 ee 9e 	mov	r9,61086
8002f656:	ea 19 3e 21 	orh	r9,0x3e21
8002f65a:	e0 a0 0a 11 	rcall	80030a7c <__avr32_f64_add>
8002f65e:	14 98       	mov	r8,r10
8002f660:	16 99       	mov	r9,r11
8002f662:	08 9a       	mov	r10,r4
8002f664:	0a 9b       	mov	r11,r5
8002f666:	e0 a0 08 51 	rcall	80030708 <__avr32_f64_mul>
8002f66a:	e0 68 52 ad 	mov	r8,21165
8002f66e:	ea 18 80 9c 	orh	r8,0x809c
8002f672:	e0 69 7e 4f 	mov	r9,32335
8002f676:	ea 19 3e 92 	orh	r9,0x3e92
8002f67a:	e0 a0 09 33 	rcall	800308e0 <__avr32_f64_sub>
8002f67e:	14 98       	mov	r8,r10
8002f680:	16 99       	mov	r9,r11
8002f682:	08 9a       	mov	r10,r4
8002f684:	0a 9b       	mov	r11,r5
8002f686:	e0 a0 08 41 	rcall	80030708 <__avr32_f64_mul>
8002f68a:	e0 68 15 90 	mov	r8,5520
8002f68e:	ea 18 19 cb 	orh	r8,0x19cb
8002f692:	e0 69 01 a0 	mov	r9,416
8002f696:	ea 19 3e fa 	orh	r9,0x3efa
8002f69a:	e0 a0 09 f1 	rcall	80030a7c <__avr32_f64_add>
8002f69e:	14 98       	mov	r8,r10
8002f6a0:	16 99       	mov	r9,r11
8002f6a2:	08 9a       	mov	r10,r4
8002f6a4:	0a 9b       	mov	r11,r5
8002f6a6:	e0 a0 08 31 	rcall	80030708 <__avr32_f64_mul>
8002f6aa:	e0 68 51 77 	mov	r8,20855
8002f6ae:	ea 18 16 c1 	orh	r8,0x16c1
8002f6b2:	e0 69 c1 6c 	mov	r9,49516
8002f6b6:	ea 19 3f 56 	orh	r9,0x3f56
8002f6ba:	e0 a0 09 13 	rcall	800308e0 <__avr32_f64_sub>
8002f6be:	14 98       	mov	r8,r10
8002f6c0:	16 99       	mov	r9,r11
8002f6c2:	08 9a       	mov	r10,r4
8002f6c4:	0a 9b       	mov	r11,r5
8002f6c6:	e0 a0 08 21 	rcall	80030708 <__avr32_f64_mul>
8002f6ca:	e0 68 55 4c 	mov	r8,21836
8002f6ce:	ea 18 55 55 	orh	r8,0x5555
8002f6d2:	e0 69 55 55 	mov	r9,21845
8002f6d6:	ea 19 3f a5 	orh	r9,0x3fa5
8002f6da:	e0 a0 09 d1 	rcall	80030a7c <__avr32_f64_add>
8002f6de:	14 98       	mov	r8,r10
8002f6e0:	16 99       	mov	r9,r11
8002f6e2:	08 9a       	mov	r10,r4
8002f6e4:	0a 9b       	mov	r11,r5
8002f6e6:	e0 a0 08 11 	rcall	80030708 <__avr32_f64_mul>
8002f6ea:	fa eb 00 00 	st.d	sp[0],r10
8002f6ee:	e0 68 33 32 	mov	r8,13106
8002f6f2:	ea 18 3f d3 	orh	r8,0x3fd3
8002f6f6:	10 37       	cp.w	r7,r8
8002f6f8:	e0 89 00 2b 	brgt	8002f74e <__kernel_cos+0x156>
8002f6fc:	30 08       	mov	r8,0
8002f6fe:	fc 19 3f e0 	movh	r9,0x3fe0
8002f702:	08 9a       	mov	r10,r4
8002f704:	0a 9b       	mov	r11,r5
8002f706:	e0 a0 08 01 	rcall	80030708 <__avr32_f64_mul>
8002f70a:	fa e8 00 00 	ld.d	r8,sp[0]
8002f70e:	14 90       	mov	r0,r10
8002f710:	16 91       	mov	r1,r11
8002f712:	08 9a       	mov	r10,r4
8002f714:	0a 9b       	mov	r11,r5
8002f716:	e0 a0 07 f9 	rcall	80030708 <__avr32_f64_mul>
8002f71a:	fa e8 00 08 	ld.d	r8,sp[8]
8002f71e:	16 97       	mov	r7,r11
8002f720:	14 96       	mov	r6,r10
8002f722:	06 9b       	mov	r11,r3
8002f724:	04 9a       	mov	r10,r2
8002f726:	e0 a0 07 f1 	rcall	80030708 <__avr32_f64_mul>
8002f72a:	14 98       	mov	r8,r10
8002f72c:	16 99       	mov	r9,r11
8002f72e:	0c 9a       	mov	r10,r6
8002f730:	0e 9b       	mov	r11,r7
8002f732:	e0 a0 08 d7 	rcall	800308e0 <__avr32_f64_sub>
8002f736:	14 98       	mov	r8,r10
8002f738:	16 99       	mov	r9,r11
8002f73a:	00 9a       	mov	r10,r0
8002f73c:	02 9b       	mov	r11,r1
8002f73e:	e0 a0 08 d1 	rcall	800308e0 <__avr32_f64_sub>
8002f742:	14 98       	mov	r8,r10
8002f744:	16 99       	mov	r9,r11
8002f746:	30 0a       	mov	r10,0
8002f748:	fc 1b 3f f0 	movh	r11,0x3ff0
8002f74c:	c4 58       	rjmp	8002f7d6 <__kernel_cos+0x1de>
8002f74e:	fc 19 3f e9 	movh	r9,0x3fe9
8002f752:	12 37       	cp.w	r7,r9
8002f754:	e0 8a 00 06 	brle	8002f760 <__kernel_cos+0x168>
8002f758:	30 06       	mov	r6,0
8002f75a:	fc 17 3f d2 	movh	r7,0x3fd2
8002f75e:	c0 88       	rjmp	8002f76e <__kernel_cos+0x176>
8002f760:	fc 1a ff e0 	movh	r10,0xffe0
8002f764:	30 08       	mov	r8,0
8002f766:	ee 0a 00 09 	add	r9,r7,r10
8002f76a:	10 96       	mov	r6,r8
8002f76c:	12 97       	mov	r7,r9
8002f76e:	0c 98       	mov	r8,r6
8002f770:	0e 99       	mov	r9,r7
8002f772:	30 0a       	mov	r10,0
8002f774:	fc 1b 3f f0 	movh	r11,0x3ff0
8002f778:	e0 a0 08 b4 	rcall	800308e0 <__avr32_f64_sub>
8002f77c:	30 08       	mov	r8,0
8002f77e:	fa eb 00 10 	st.d	sp[16],r10
8002f782:	fc 19 3f e0 	movh	r9,0x3fe0
8002f786:	08 9a       	mov	r10,r4
8002f788:	0a 9b       	mov	r11,r5
8002f78a:	e0 a0 07 bf 	rcall	80030708 <__avr32_f64_mul>
8002f78e:	0c 98       	mov	r8,r6
8002f790:	0e 99       	mov	r9,r7
8002f792:	e0 a0 08 a7 	rcall	800308e0 <__avr32_f64_sub>
8002f796:	fa e8 00 00 	ld.d	r8,sp[0]
8002f79a:	14 90       	mov	r0,r10
8002f79c:	16 91       	mov	r1,r11
8002f79e:	08 9a       	mov	r10,r4
8002f7a0:	0a 9b       	mov	r11,r5
8002f7a2:	e0 a0 07 b3 	rcall	80030708 <__avr32_f64_mul>
8002f7a6:	fa e8 00 08 	ld.d	r8,sp[8]
8002f7aa:	16 97       	mov	r7,r11
8002f7ac:	14 96       	mov	r6,r10
8002f7ae:	06 9b       	mov	r11,r3
8002f7b0:	04 9a       	mov	r10,r2
8002f7b2:	e0 a0 07 ab 	rcall	80030708 <__avr32_f64_mul>
8002f7b6:	14 98       	mov	r8,r10
8002f7b8:	16 99       	mov	r9,r11
8002f7ba:	0c 9a       	mov	r10,r6
8002f7bc:	0e 9b       	mov	r11,r7
8002f7be:	e0 a0 08 91 	rcall	800308e0 <__avr32_f64_sub>
8002f7c2:	14 98       	mov	r8,r10
8002f7c4:	16 99       	mov	r9,r11
8002f7c6:	00 9a       	mov	r10,r0
8002f7c8:	02 9b       	mov	r11,r1
8002f7ca:	e0 a0 08 8b 	rcall	800308e0 <__avr32_f64_sub>
8002f7ce:	14 98       	mov	r8,r10
8002f7d0:	16 99       	mov	r9,r11
8002f7d2:	fa ea 00 10 	ld.d	r10,sp[16]
8002f7d6:	e0 a0 08 85 	rcall	800308e0 <__avr32_f64_sub>
8002f7da:	2f ad       	sub	sp,-24
8002f7dc:	d8 32       	popm	r0-r7,pc
8002f7de:	d7 03       	nop

8002f7e0 <__kernel_rem_pio2>:
8002f7e0:	d4 31       	pushm	r0-r7,lr
8002f7e2:	fa cd 02 70 	sub	sp,sp,624
8002f7e6:	50 b9       	stdsp	sp[0x2c],r9
8002f7e8:	fa f9 02 94 	ld.w	r9,sp[660]
8002f7ec:	50 68       	stdsp	sp[0x18],r8
8002f7ee:	50 c9       	stdsp	sp[0x30],r9
8002f7f0:	16 94       	mov	r4,r11
8002f7f2:	40 b8       	lddsp	r8,sp[0x2c]
8002f7f4:	4b e9       	lddpc	r9,8002f8ec <__kernel_rem_pio2+0x10c>
8002f7f6:	20 18       	sub	r8,1
8002f7f8:	40 6b       	lddsp	r11,sp[0x18]
8002f7fa:	f2 0b 03 29 	ld.w	r9,r9[r11<<0x2]
8002f7fe:	50 58       	stdsp	sp[0x14],r8
8002f800:	50 39       	stdsp	sp[0xc],r9
8002f802:	30 08       	mov	r8,0
8002f804:	f4 c9 00 03 	sub	r9,r10,3
8002f808:	10 97       	mov	r7,r8
8002f80a:	31 83       	mov	r3,24
8002f80c:	f2 03 0c 02 	divs	r2,r9,r3
8002f810:	f0 02 0c 48 	max	r8,r8,r2
8002f814:	40 59       	lddsp	r9,sp[0x14]
8002f816:	10 96       	mov	r6,r8
8002f818:	10 93       	mov	r3,r8
8002f81a:	50 78       	stdsp	sp[0x1c],r8
8002f81c:	40 31       	lddsp	r1,sp[0xc]
8002f81e:	5c d6       	com	r6
8002f820:	12 13       	sub	r3,r9
8002f822:	ec 06 00 16 	add	r6,r6,r6<<0x1
8002f826:	40 c8       	lddsp	r8,sp[0x30]
8002f828:	50 ac       	stdsp	sp[0x28],r12
8002f82a:	12 01       	add	r1,r9
8002f82c:	f4 06 00 36 	add	r6,r10,r6<<0x3
8002f830:	fa c2 fe 80 	sub	r2,sp,-384
8002f834:	f0 03 00 25 	add	r5,r8,r3<<0x2
8002f838:	c0 d8       	rjmp	8002f852 <__kernel_rem_pio2+0x72>
8002f83a:	ee 03 00 08 	add	r8,r7,r3
8002f83e:	c0 47       	brpl	8002f846 <__kernel_rem_pio2+0x66>
8002f840:	30 0a       	mov	r10,0
8002f842:	30 0b       	mov	r11,0
8002f844:	c0 48       	rjmp	8002f84c <__kernel_rem_pio2+0x6c>
8002f846:	6a 0c       	ld.w	r12,r5[0x0]
8002f848:	e0 a0 09 bb 	rcall	80030bbe <__avr32_s32_to_f64>
8002f84c:	a5 2a       	st.d	r2++,r10
8002f84e:	2f f7       	sub	r7,-1
8002f850:	2f c5       	sub	r5,-4
8002f852:	02 37       	cp.w	r7,r1
8002f854:	fe 9a ff f3 	brle	8002f83a <__kernel_rem_pio2+0x5a>
8002f858:	fa c0 ff c0 	sub	r0,sp,-64
8002f85c:	40 53       	lddsp	r3,sp[0x14]
8002f85e:	30 02       	mov	r2,0
8002f860:	fa cc fe 80 	sub	r12,sp,-384
8002f864:	0c 95       	mov	r5,r6
8002f866:	c1 b8       	rjmp	8002f89c <__kernel_rem_pio2+0xbc>
8002f868:	ee e8 00 00 	ld.d	r8,r7[0]
8002f86c:	50 0c       	stdsp	sp[0x0],r12
8002f86e:	20 87       	sub	r7,8
8002f870:	a3 0b       	ld.d	r10,r1++
8002f872:	e0 a0 07 4b 	rcall	80030708 <__avr32_f64_mul>
8002f876:	14 98       	mov	r8,r10
8002f878:	16 99       	mov	r9,r11
8002f87a:	fa ea 00 04 	ld.d	r10,sp[4]
8002f87e:	e0 a0 08 ff 	rcall	80030a7c <__avr32_f64_add>
8002f882:	2f f6       	sub	r6,-1
8002f884:	fa eb 00 04 	st.d	sp[4],r10
8002f888:	40 0c       	lddsp	r12,sp[0x0]
8002f88a:	40 5b       	lddsp	r11,sp[0x14]
8002f88c:	16 36       	cp.w	r6,r11
8002f88e:	fe 9a ff ed 	brle	8002f868 <__kernel_rem_pio2+0x88>
8002f892:	fa e8 00 04 	ld.d	r8,sp[4]
8002f896:	2f f2       	sub	r2,-1
8002f898:	a1 28       	st.d	r0++,r8
8002f89a:	2f f3       	sub	r3,-1
8002f89c:	40 38       	lddsp	r8,sp[0xc]
8002f89e:	10 32       	cp.w	r2,r8
8002f8a0:	e0 89 00 0b 	brgt	8002f8b6 <__kernel_rem_pio2+0xd6>
8002f8a4:	30 0a       	mov	r10,0
8002f8a6:	30 0b       	mov	r11,0
8002f8a8:	40 a1       	lddsp	r1,sp[0x28]
8002f8aa:	f8 03 00 37 	add	r7,r12,r3<<0x3
8002f8ae:	fa eb 00 04 	st.d	sp[4],r10
8002f8b2:	30 06       	mov	r6,0
8002f8b4:	ce bb       	rjmp	8002f88a <__kernel_rem_pio2+0xaa>
8002f8b6:	40 38       	lddsp	r8,sp[0xc]
8002f8b8:	fa ca fd e0 	sub	r10,sp,-544
8002f8bc:	20 18       	sub	r8,1
8002f8be:	0a 96       	mov	r6,r5
8002f8c0:	f4 08 00 2a 	add	r10,r10,r8<<0x2
8002f8c4:	40 37       	lddsp	r7,sp[0xc]
8002f8c6:	50 fa       	stdsp	sp[0x3c],r10
8002f8c8:	50 e4       	stdsp	sp[0x38],r4
8002f8ca:	fa c9 fd 90 	sub	r9,sp,-624
8002f8ce:	f2 07 00 38 	add	r8,r9,r7<<0x3
8002f8d2:	ee c5 00 01 	sub	r5,r7,1
8002f8d6:	f0 e2 fd d0 	ld.d	r2,r8[-560]
8002f8da:	fa c1 fd e0 	sub	r1,sp,-544
8002f8de:	fa c8 ff c0 	sub	r8,sp,-64
8002f8e2:	50 11       	stdsp	sp[0x4],r1
8002f8e4:	f0 05 00 34 	add	r4,r8,r5<<0x3
8002f8e8:	0e 90       	mov	r0,r7
8002f8ea:	c2 58       	rjmp	8002f934 <__kernel_rem_pio2+0x154>
8002f8ec:	80 03       	ld.sh	r3,r0[0x0]
8002f8ee:	1f 40       	ld.w	r0,--pc
8002f8f0:	e0 a0 07 0c 	rcall	80030708 <__avr32_f64_mul>
8002f8f4:	e0 a0 09 4e 	rcall	80030b90 <__avr32_f64_to_s32>
8002f8f8:	e0 a0 09 63 	rcall	80030bbe <__avr32_s32_to_f64>
8002f8fc:	30 08       	mov	r8,0
8002f8fe:	fc 19 c1 70 	movh	r9,0xc170
8002f902:	fa eb 00 20 	st.d	sp[32],r10
8002f906:	e0 a0 07 01 	rcall	80030708 <__avr32_f64_mul>
8002f90a:	14 98       	mov	r8,r10
8002f90c:	16 99       	mov	r9,r11
8002f90e:	04 9a       	mov	r10,r2
8002f910:	06 9b       	mov	r11,r3
8002f912:	e0 a0 08 b5 	rcall	80030a7c <__avr32_f64_add>
8002f916:	e0 a0 09 3d 	rcall	80030b90 <__avr32_f64_to_s32>
8002f91a:	40 1a       	lddsp	r10,sp[0x4]
8002f91c:	14 ac       	st.w	r10++,r12
8002f91e:	e8 e8 00 00 	ld.d	r8,r4[0]
8002f922:	50 1a       	stdsp	sp[0x4],r10
8002f924:	20 10       	sub	r0,1
8002f926:	fa ea 00 20 	ld.d	r10,sp[32]
8002f92a:	20 84       	sub	r4,8
8002f92c:	e0 a0 08 a8 	rcall	80030a7c <__avr32_f64_add>
8002f930:	14 92       	mov	r2,r10
8002f932:	16 93       	mov	r3,r11
8002f934:	30 08       	mov	r8,0
8002f936:	fc 19 3e 70 	movh	r9,0x3e70
8002f93a:	04 9a       	mov	r10,r2
8002f93c:	06 9b       	mov	r11,r3
8002f93e:	58 00       	cp.w	r0,0
8002f940:	fe 99 ff d8 	brgt	8002f8f0 <__kernel_rem_pio2+0x110>
8002f944:	0c 9c       	mov	r12,r6
8002f946:	e0 a0 06 67 	rcall	80030614 <scalbn>
8002f94a:	30 08       	mov	r8,0
8002f94c:	fc 19 3f c0 	movh	r9,0x3fc0
8002f950:	14 92       	mov	r2,r10
8002f952:	16 93       	mov	r3,r11
8002f954:	e0 a0 06 da 	rcall	80030708 <__avr32_f64_mul>
8002f958:	e0 a0 05 2e 	rcall	800303b4 <floor>
8002f95c:	30 08       	mov	r8,0
8002f95e:	fc 19 c0 20 	movh	r9,0xc020
8002f962:	e0 a0 06 d3 	rcall	80030708 <__avr32_f64_mul>
8002f966:	14 98       	mov	r8,r10
8002f968:	16 99       	mov	r9,r11
8002f96a:	04 9a       	mov	r10,r2
8002f96c:	06 9b       	mov	r11,r3
8002f96e:	e0 a0 08 87 	rcall	80030a7c <__avr32_f64_add>
8002f972:	14 92       	mov	r2,r10
8002f974:	16 93       	mov	r3,r11
8002f976:	e0 a0 09 0d 	rcall	80030b90 <__avr32_f64_to_s32>
8002f97a:	18 90       	mov	r0,r12
8002f97c:	e0 a0 09 21 	rcall	80030bbe <__avr32_s32_to_f64>
8002f980:	14 98       	mov	r8,r10
8002f982:	16 99       	mov	r9,r11
8002f984:	04 9a       	mov	r10,r2
8002f986:	06 9b       	mov	r11,r3
8002f988:	e0 a0 07 ac 	rcall	800308e0 <__avr32_f64_sub>
8002f98c:	fa eb 00 04 	st.d	sp[4],r10
8002f990:	58 06       	cp.w	r6,0
8002f992:	e0 8a 00 18 	brle	8002f9c2 <__kernel_rem_pio2+0x1e2>
8002f996:	fa c8 fd 90 	sub	r8,sp,-624
8002f99a:	ec 0b 11 18 	rsub	r11,r6,24
8002f99e:	f0 05 00 29 	add	r9,r8,r5<<0x2
8002f9a2:	ec 0c 11 17 	rsub	r12,r6,23
8002f9a6:	f2 fa ff b0 	ld.w	r10,r9[-80]
8002f9aa:	f4 0b 08 48 	asr	r8,r10,r11
8002f9ae:	f0 0b 09 4b 	lsl	r11,r8,r11
8002f9b2:	10 00       	add	r0,r8
8002f9b4:	f4 0b 01 0b 	sub	r11,r10,r11
8002f9b8:	f3 4b ff b0 	st.w	r9[-80],r11
8002f9bc:	f6 0c 08 44 	asr	r4,r11,r12
8002f9c0:	c1 58       	rjmp	8002f9ea <__kernel_rem_pio2+0x20a>
8002f9c2:	58 06       	cp.w	r6,0
8002f9c4:	c0 91       	brne	8002f9d6 <__kernel_rem_pio2+0x1f6>
8002f9c6:	fa cb fd 90 	sub	r11,sp,-624
8002f9ca:	f6 05 00 28 	add	r8,r11,r5<<0x2
8002f9ce:	f0 f4 ff b0 	ld.w	r4,r8[-80]
8002f9d2:	b7 54       	asr	r4,0x17
8002f9d4:	c0 b8       	rjmp	8002f9ea <__kernel_rem_pio2+0x20a>
8002f9d6:	30 08       	mov	r8,0
8002f9d8:	fc 19 3f e0 	movh	r9,0x3fe0
8002f9dc:	e0 a0 09 74 	rcall	80030cc4 <__avr32_f64_cmp_ge>
8002f9e0:	c0 31       	brne	8002f9e6 <__kernel_rem_pio2+0x206>
8002f9e2:	30 04       	mov	r4,0
8002f9e4:	c5 58       	rjmp	8002fa8e <__kernel_rem_pio2+0x2ae>
8002f9e6:	30 24       	mov	r4,2
8002f9e8:	c0 48       	rjmp	8002f9f0 <__kernel_rem_pio2+0x210>
8002f9ea:	58 04       	cp.w	r4,0
8002f9ec:	e0 8a 00 51 	brle	8002fa8e <__kernel_rem_pio2+0x2ae>
8002f9f0:	30 08       	mov	r8,0
8002f9f2:	2f f0       	sub	r0,-1
8002f9f4:	10 93       	mov	r3,r8
8002f9f6:	c1 48       	rjmp	8002fa1e <__kernel_rem_pio2+0x23e>
8002f9f8:	62 09       	ld.w	r9,r1[0x0]
8002f9fa:	58 03       	cp.w	r3,0
8002f9fc:	c0 81       	brne	8002fa0c <__kernel_rem_pio2+0x22c>
8002f9fe:	58 09       	cp.w	r9,0
8002fa00:	c0 d0       	breq	8002fa1a <__kernel_rem_pio2+0x23a>
8002fa02:	fc 1a 01 00 	movh	r10,0x100
8002fa06:	12 1a       	sub	r10,r9
8002fa08:	83 0a       	st.w	r1[0x0],r10
8002fa0a:	c0 78       	rjmp	8002fa18 <__kernel_rem_pio2+0x238>
8002fa0c:	e0 6b ff ff 	mov	r11,65535
8002fa10:	ea 1b 00 ff 	orh	r11,0xff
8002fa14:	12 1b       	sub	r11,r9
8002fa16:	83 0b       	st.w	r1[0x0],r11
8002fa18:	30 13       	mov	r3,1
8002fa1a:	2f f8       	sub	r8,-1
8002fa1c:	2f c1       	sub	r1,-4
8002fa1e:	0e 38       	cp.w	r8,r7
8002fa20:	ce c5       	brlt	8002f9f8 <__kernel_rem_pio2+0x218>
8002fa22:	58 06       	cp.w	r6,0
8002fa24:	e0 8a 00 1a 	brle	8002fa58 <__kernel_rem_pio2+0x278>
8002fa28:	58 16       	cp.w	r6,1
8002fa2a:	c0 40       	breq	8002fa32 <__kernel_rem_pio2+0x252>
8002fa2c:	58 26       	cp.w	r6,2
8002fa2e:	c1 51       	brne	8002fa58 <__kernel_rem_pio2+0x278>
8002fa30:	c0 a8       	rjmp	8002fa44 <__kernel_rem_pio2+0x264>
8002fa32:	fa ca fd 90 	sub	r10,sp,-624
8002fa36:	f4 05 00 28 	add	r8,r10,r5<<0x2
8002fa3a:	f0 f9 ff b0 	ld.w	r9,r8[-80]
8002fa3e:	f3 d9 c0 17 	bfextu	r9,r9,0x0,0x17
8002fa42:	c0 98       	rjmp	8002fa54 <__kernel_rem_pio2+0x274>
8002fa44:	fa c9 fd 90 	sub	r9,sp,-624
8002fa48:	f2 05 00 28 	add	r8,r9,r5<<0x2
8002fa4c:	f0 f9 ff b0 	ld.w	r9,r8[-80]
8002fa50:	f3 d9 c0 16 	bfextu	r9,r9,0x0,0x16
8002fa54:	f1 49 ff b0 	st.w	r8[-80],r9
8002fa58:	58 24       	cp.w	r4,2
8002fa5a:	c1 a1       	brne	8002fa8e <__kernel_rem_pio2+0x2ae>
8002fa5c:	fa e8 00 04 	ld.d	r8,sp[4]
8002fa60:	30 0a       	mov	r10,0
8002fa62:	fc 1b 3f f0 	movh	r11,0x3ff0
8002fa66:	e0 a0 07 3d 	rcall	800308e0 <__avr32_f64_sub>
8002fa6a:	fa eb 00 04 	st.d	sp[4],r10
8002fa6e:	58 03       	cp.w	r3,0
8002fa70:	c0 f0       	breq	8002fa8e <__kernel_rem_pio2+0x2ae>
8002fa72:	0c 9c       	mov	r12,r6
8002fa74:	30 0a       	mov	r10,0
8002fa76:	fc 1b 3f f0 	movh	r11,0x3ff0
8002fa7a:	e0 a0 05 cd 	rcall	80030614 <scalbn>
8002fa7e:	14 98       	mov	r8,r10
8002fa80:	16 99       	mov	r9,r11
8002fa82:	fa ea 00 04 	ld.d	r10,sp[4]
8002fa86:	e0 a0 07 2d 	rcall	800308e0 <__avr32_f64_sub>
8002fa8a:	fa eb 00 04 	st.d	sp[4],r10
8002fa8e:	30 08       	mov	r8,0
8002fa90:	30 09       	mov	r9,0
8002fa92:	fa ea 00 04 	ld.d	r10,sp[4]
8002fa96:	e0 a0 09 04 	rcall	80030c9e <__avr32_f64_cmp_eq>
8002fa9a:	c6 40       	breq	8002fb62 <__kernel_rem_pio2+0x382>
8002fa9c:	fa c8 fd e0 	sub	r8,sp,-544
8002faa0:	f0 05 00 29 	add	r9,r8,r5<<0x2
8002faa4:	30 08       	mov	r8,0
8002faa6:	c0 58       	rjmp	8002fab0 <__kernel_rem_pio2+0x2d0>
8002faa8:	72 0a       	ld.w	r10,r9[0x0]
8002faaa:	20 15       	sub	r5,1
8002faac:	14 48       	or	r8,r10
8002faae:	20 49       	sub	r9,4
8002fab0:	40 3b       	lddsp	r11,sp[0xc]
8002fab2:	16 35       	cp.w	r5,r11
8002fab4:	cf a4       	brge	8002faa8 <__kernel_rem_pio2+0x2c8>
8002fab6:	58 08       	cp.w	r8,0
8002fab8:	c5 b1       	brne	8002fb6e <__kernel_rem_pio2+0x38e>
8002faba:	40 f9       	lddsp	r9,sp[0x3c]
8002fabc:	30 18       	mov	r8,1
8002fabe:	c0 28       	rjmp	8002fac2 <__kernel_rem_pio2+0x2e2>
8002fac0:	2f f8       	sub	r8,-1
8002fac2:	72 0a       	ld.w	r10,r9[0x0]
8002fac4:	20 49       	sub	r9,4
8002fac6:	58 0a       	cp.w	r10,0
8002fac8:	cf c0       	breq	8002fac0 <__kernel_rem_pio2+0x2e0>
8002faca:	0e 08       	add	r8,r7
8002facc:	40 ba       	lddsp	r10,sp[0x2c]
8002face:	50 d8       	stdsp	sp[0x34],r8
8002fad0:	ee 0a 00 02 	add	r2,r7,r10
8002fad4:	fa c8 fe 80 	sub	r8,sp,-384
8002fad8:	04 91       	mov	r1,r2
8002fada:	ee c5 ff ff 	sub	r5,r7,-1
8002fade:	40 73       	lddsp	r3,sp[0x1c]
8002fae0:	40 c9       	lddsp	r9,sp[0x30]
8002fae2:	2f f3       	sub	r3,-1
8002fae4:	fa cb ff c0 	sub	r11,sp,-64
8002fae8:	0e 03       	add	r3,r7
8002faea:	f6 05 00 3b 	add	r11,r11,r5<<0x3
8002faee:	f2 03 00 23 	add	r3,r9,r3<<0x2
8002faf2:	50 8b       	stdsp	sp[0x20],r11
8002faf4:	f0 02 00 32 	add	r2,r8,r2<<0x3
8002faf8:	0c 94       	mov	r4,r6
8002fafa:	c2 d8       	rjmp	8002fb54 <__kernel_rem_pio2+0x374>
8002fafc:	66 0c       	ld.w	r12,r3[0x0]
8002fafe:	e0 a0 08 60 	rcall	80030bbe <__avr32_s32_to_f64>
8002fb02:	30 08       	mov	r8,0
8002fb04:	e4 eb 00 00 	st.d	r2[0],r10
8002fb08:	30 09       	mov	r9,0
8002fb0a:	fa ca fe 80 	sub	r10,sp,-384
8002fb0e:	40 a0       	lddsp	r0,sp[0x28]
8002fb10:	f4 01 00 37 	add	r7,r10,r1<<0x3
8002fb14:	30 06       	mov	r6,0
8002fb16:	fa e9 00 04 	st.d	sp[4],r8
8002fb1a:	c1 08       	rjmp	8002fb3a <__kernel_rem_pio2+0x35a>
8002fb1c:	ee e8 00 00 	ld.d	r8,r7[0]
8002fb20:	a1 0b       	ld.d	r10,r0++
8002fb22:	20 87       	sub	r7,8
8002fb24:	e0 a0 05 f2 	rcall	80030708 <__avr32_f64_mul>
8002fb28:	2f f6       	sub	r6,-1
8002fb2a:	14 98       	mov	r8,r10
8002fb2c:	16 99       	mov	r9,r11
8002fb2e:	fa ea 00 04 	ld.d	r10,sp[4]
8002fb32:	e0 a0 07 a5 	rcall	80030a7c <__avr32_f64_add>
8002fb36:	fa eb 00 04 	st.d	sp[4],r10
8002fb3a:	40 58       	lddsp	r8,sp[0x14]
8002fb3c:	10 36       	cp.w	r6,r8
8002fb3e:	fe 9a ff ef 	brle	8002fb1c <__kernel_rem_pio2+0x33c>
8002fb42:	40 89       	lddsp	r9,sp[0x20]
8002fb44:	fa ea 00 04 	ld.d	r10,sp[4]
8002fb48:	2f f5       	sub	r5,-1
8002fb4a:	b3 2a       	st.d	r9++,r10
8002fb4c:	2f c3       	sub	r3,-4
8002fb4e:	50 89       	stdsp	sp[0x20],r9
8002fb50:	2f 82       	sub	r2,-8
8002fb52:	2f f1       	sub	r1,-1
8002fb54:	40 d8       	lddsp	r8,sp[0x34]
8002fb56:	10 35       	cp.w	r5,r8
8002fb58:	fe 9a ff d2 	brle	8002fafc <__kernel_rem_pio2+0x31c>
8002fb5c:	08 96       	mov	r6,r4
8002fb5e:	10 97       	mov	r7,r8
8002fb60:	cb 5a       	rjmp	8002f8ca <__kernel_rem_pio2+0xea>
8002fb62:	50 50       	stdsp	sp[0x14],r0
8002fb64:	08 95       	mov	r5,r4
8002fb66:	40 e4       	lddsp	r4,sp[0x38]
8002fb68:	58 0c       	cp.w	r12,0
8002fb6a:	c1 30       	breq	8002fb90 <__kernel_rem_pio2+0x3b0>
8002fb6c:	c0 48       	rjmp	8002fb74 <__kernel_rem_pio2+0x394>
8002fb6e:	08 95       	mov	r5,r4
8002fb70:	50 50       	stdsp	sp[0x14],r0
8002fb72:	40 e4       	lddsp	r4,sp[0x38]
8002fb74:	20 17       	sub	r7,1
8002fb76:	fa c8 fd e0 	sub	r8,sp,-544
8002fb7a:	21 86       	sub	r6,24
8002fb7c:	f0 07 00 28 	add	r8,r8,r7<<0x2
8002fb80:	c0 38       	rjmp	8002fb86 <__kernel_rem_pio2+0x3a6>
8002fb82:	20 17       	sub	r7,1
8002fb84:	21 86       	sub	r6,24
8002fb86:	70 09       	ld.w	r9,r8[0x0]
8002fb88:	20 48       	sub	r8,4
8002fb8a:	58 09       	cp.w	r9,0
8002fb8c:	cf b0       	breq	8002fb82 <__kernel_rem_pio2+0x3a2>
8002fb8e:	c4 48       	rjmp	8002fc16 <__kernel_rem_pio2+0x436>
8002fb90:	fa ea 00 04 	ld.d	r10,sp[4]
8002fb94:	ec 0c 11 00 	rsub	r12,r6,0
8002fb98:	e0 a0 05 3e 	rcall	80030614 <scalbn>
8002fb9c:	30 08       	mov	r8,0
8002fb9e:	14 90       	mov	r0,r10
8002fba0:	16 91       	mov	r1,r11
8002fba2:	fc 19 41 70 	movh	r9,0x4170
8002fba6:	ee 03 15 02 	lsl	r3,r7,0x2
8002fbaa:	e0 a0 08 8d 	rcall	80030cc4 <__avr32_f64_cmp_ge>
8002fbae:	c2 a0       	breq	8002fc02 <__kernel_rem_pio2+0x422>
8002fbb0:	30 08       	mov	r8,0
8002fbb2:	fc 19 3e 70 	movh	r9,0x3e70
8002fbb6:	00 9a       	mov	r10,r0
8002fbb8:	02 9b       	mov	r11,r1
8002fbba:	e0 a0 05 a7 	rcall	80030708 <__avr32_f64_mul>
8002fbbe:	e0 a0 07 e9 	rcall	80030b90 <__avr32_f64_to_s32>
8002fbc2:	e0 a0 07 fe 	rcall	80030bbe <__avr32_s32_to_f64>
8002fbc6:	30 08       	mov	r8,0
8002fbc8:	fc 19 c1 70 	movh	r9,0xc170
8002fbcc:	fa eb 00 04 	st.d	sp[4],r10
8002fbd0:	e0 a0 05 9c 	rcall	80030708 <__avr32_f64_mul>
8002fbd4:	16 99       	mov	r9,r11
8002fbd6:	14 98       	mov	r8,r10
8002fbd8:	02 9b       	mov	r11,r1
8002fbda:	00 9a       	mov	r10,r0
8002fbdc:	e0 a0 07 50 	rcall	80030a7c <__avr32_f64_add>
8002fbe0:	e0 a0 07 d8 	rcall	80030b90 <__avr32_f64_to_s32>
8002fbe4:	fa cb fd 90 	sub	r11,sp,-624
8002fbe8:	f6 03 00 03 	add	r3,r11,r3
8002fbec:	2f f7       	sub	r7,-1
8002fbee:	e7 4c ff b0 	st.w	r3[-80],r12
8002fbf2:	fa c9 fd 90 	sub	r9,sp,-624
8002fbf6:	fa ea 00 04 	ld.d	r10,sp[4]
8002fbfa:	2e 86       	sub	r6,-24
8002fbfc:	f2 07 00 23 	add	r3,r9,r7<<0x2
8002fc00:	c0 78       	rjmp	8002fc0e <__kernel_rem_pio2+0x42e>
8002fc02:	fa c8 fd 90 	sub	r8,sp,-624
8002fc06:	00 9a       	mov	r10,r0
8002fc08:	f0 03 00 03 	add	r3,r8,r3
8002fc0c:	02 9b       	mov	r11,r1
8002fc0e:	e0 a0 07 c1 	rcall	80030b90 <__avr32_f64_to_s32>
8002fc12:	e7 4c ff b0 	st.w	r3[-80],r12
8002fc16:	0c 9c       	mov	r12,r6
8002fc18:	30 0a       	mov	r10,0
8002fc1a:	fc 1b 3f f0 	movh	r11,0x3ff0
8002fc1e:	fa c3 fd e0 	sub	r3,sp,-544
8002fc22:	e0 a0 04 f9 	rcall	80030614 <scalbn>
8002fc26:	fa c2 ff c0 	sub	r2,sp,-64
8002fc2a:	0e 96       	mov	r6,r7
8002fc2c:	14 90       	mov	r0,r10
8002fc2e:	16 91       	mov	r1,r11
8002fc30:	e6 07 00 23 	add	r3,r3,r7<<0x2
8002fc34:	e4 07 00 32 	add	r2,r2,r7<<0x3
8002fc38:	c1 88       	rjmp	8002fc68 <__kernel_rem_pio2+0x488>
8002fc3a:	66 0c       	ld.w	r12,r3[0x0]
8002fc3c:	e0 a0 07 c1 	rcall	80030bbe <__avr32_s32_to_f64>
8002fc40:	14 98       	mov	r8,r10
8002fc42:	16 99       	mov	r9,r11
8002fc44:	00 9a       	mov	r10,r0
8002fc46:	02 9b       	mov	r11,r1
8002fc48:	e0 a0 05 60 	rcall	80030708 <__avr32_f64_mul>
8002fc4c:	30 08       	mov	r8,0
8002fc4e:	e4 eb 00 00 	st.d	r2[0],r10
8002fc52:	fc 19 3e 70 	movh	r9,0x3e70
8002fc56:	00 9a       	mov	r10,r0
8002fc58:	02 9b       	mov	r11,r1
8002fc5a:	20 16       	sub	r6,1
8002fc5c:	e0 a0 05 56 	rcall	80030708 <__avr32_f64_mul>
8002fc60:	20 43       	sub	r3,4
8002fc62:	20 82       	sub	r2,8
8002fc64:	14 90       	mov	r0,r10
8002fc66:	16 91       	mov	r1,r11
8002fc68:	58 06       	cp.w	r6,0
8002fc6a:	ce 84       	brge	8002fc3a <__kernel_rem_pio2+0x45a>
8002fc6c:	fa cc ff 20 	sub	r12,sp,-224
8002fc70:	0a 91       	mov	r1,r5
8002fc72:	0e 93       	mov	r3,r7
8002fc74:	30 02       	mov	r2,0
8002fc76:	18 96       	mov	r6,r12
8002fc78:	0e 95       	mov	r5,r7
8002fc7a:	c1 c8       	rjmp	8002fcb2 <__kernel_rem_pio2+0x4d2>
8002fc7c:	ad 09       	ld.d	r8,r6++
8002fc7e:	2f f7       	sub	r7,-1
8002fc80:	a1 0b       	ld.d	r10,r0++
8002fc82:	e0 a0 05 43 	rcall	80030708 <__avr32_f64_mul>
8002fc86:	14 98       	mov	r8,r10
8002fc88:	16 99       	mov	r9,r11
8002fc8a:	fa ea 00 04 	ld.d	r10,sp[4]
8002fc8e:	e0 a0 06 f7 	rcall	80030a7c <__avr32_f64_add>
8002fc92:	fa eb 00 04 	st.d	sp[4],r10
8002fc96:	40 3b       	lddsp	r11,sp[0xc]
8002fc98:	16 37       	cp.w	r7,r11
8002fc9a:	e0 89 00 05 	brgt	8002fca4 <__kernel_rem_pio2+0x4c4>
8002fc9e:	04 37       	cp.w	r7,r2
8002fca0:	fe 9a ff ee 	brle	8002fc7c <__kernel_rem_pio2+0x49c>
8002fca4:	06 96       	mov	r6,r3
8002fca6:	fa e8 00 04 	ld.d	r8,sp[4]
8002fcaa:	40 73       	lddsp	r3,sp[0x1c]
8002fcac:	ad 28       	st.d	r6++,r8
8002fcae:	20 13       	sub	r3,1
8002fcb0:	2f f2       	sub	r2,-1
8002fcb2:	58 03       	cp.w	r3,0
8002fcb4:	c0 f5       	brlt	8002fcd2 <__kernel_rem_pio2+0x4f2>
8002fcb6:	fa c8 ff c0 	sub	r8,sp,-64
8002fcba:	30 0a       	mov	r10,0
8002fcbc:	f0 03 00 3c 	add	r12,r8,r3<<0x3
8002fcc0:	30 0b       	mov	r11,0
8002fcc2:	50 73       	stdsp	sp[0x1c],r3
8002fcc4:	4d 00       	lddpc	r0,8002fe04 <__kernel_rem_pio2+0x624>
8002fcc6:	0c 93       	mov	r3,r6
8002fcc8:	fa eb 00 04 	st.d	sp[4],r10
8002fccc:	30 07       	mov	r7,0
8002fcce:	18 96       	mov	r6,r12
8002fcd0:	ce 3b       	rjmp	8002fc96 <__kernel_rem_pio2+0x4b6>
8002fcd2:	0a 97       	mov	r7,r5
8002fcd4:	40 6a       	lddsp	r10,sp[0x18]
8002fcd6:	02 95       	mov	r5,r1
8002fcd8:	58 2a       	cp.w	r10,2
8002fcda:	e0 89 00 07 	brgt	8002fce8 <__kernel_rem_pio2+0x508>
8002fcde:	58 1a       	cp.w	r10,1
8002fce0:	c1 14       	brge	8002fd02 <__kernel_rem_pio2+0x522>
8002fce2:	58 0a       	cp.w	r10,0
8002fce4:	c1 70       	breq	8002fd12 <__kernel_rem_pio2+0x532>
8002fce6:	ce 68       	rjmp	8002feb2 <__kernel_rem_pio2+0x6d2>
8002fce8:	40 69       	lddsp	r9,sp[0x18]
8002fcea:	58 39       	cp.w	r9,3
8002fcec:	e0 81 00 e3 	brne	8002feb2 <__kernel_rem_pio2+0x6d2>
8002fcf0:	ee c6 00 01 	sub	r6,r7,1
8002fcf4:	fa c8 ff 20 	sub	r8,sp,-224
8002fcf8:	0e 92       	mov	r2,r7
8002fcfa:	f0 06 00 36 	add	r6,r8,r6<<0x3
8002fcfe:	0c 93       	mov	r3,r6
8002fd00:	c7 d8       	rjmp	8002fdfa <__kernel_rem_pio2+0x61a>
8002fd02:	fa c6 ff 20 	sub	r6,sp,-224
8002fd06:	30 0c       	mov	r12,0
8002fd08:	ec 07 00 36 	add	r6,r6,r7<<0x3
8002fd0c:	0e 93       	mov	r3,r7
8002fd0e:	18 9a       	mov	r10,r12
8002fd10:	c2 98       	rjmp	8002fd62 <__kernel_rem_pio2+0x582>
8002fd12:	40 6c       	lddsp	r12,sp[0x18]
8002fd14:	0e 96       	mov	r6,r7
8002fd16:	fa c8 ff 20 	sub	r8,sp,-224
8002fd1a:	18 9a       	mov	r10,r12
8002fd1c:	f0 07 00 37 	add	r7,r8,r7<<0x3
8002fd20:	c0 a8       	rjmp	8002fd34 <__kernel_rem_pio2+0x554>
8002fd22:	ee e8 00 00 	ld.d	r8,r7[0]
8002fd26:	18 9b       	mov	r11,r12
8002fd28:	20 87       	sub	r7,8
8002fd2a:	06 9a       	mov	r10,r3
8002fd2c:	20 16       	sub	r6,1
8002fd2e:	e0 a0 06 a7 	rcall	80030a7c <__avr32_f64_add>
8002fd32:	16 9c       	mov	r12,r11
8002fd34:	14 93       	mov	r3,r10
8002fd36:	58 06       	cp.w	r6,0
8002fd38:	cf 54       	brge	8002fd22 <__kernel_rem_pio2+0x542>
8002fd3a:	18 98       	mov	r8,r12
8002fd3c:	ee 18 80 00 	eorh	r8,0x8000
8002fd40:	58 05       	cp.w	r5,0
8002fd42:	f0 0c 17 10 	movne	r12,r8
8002fd46:	14 98       	mov	r8,r10
8002fd48:	18 99       	mov	r9,r12
8002fd4a:	e8 e9 00 00 	st.d	r4[0],r8
8002fd4e:	cb 28       	rjmp	8002feb2 <__kernel_rem_pio2+0x6d2>
8002fd50:	ec e8 00 00 	ld.d	r8,r6[0]
8002fd54:	18 9b       	mov	r11,r12
8002fd56:	04 9a       	mov	r10,r2
8002fd58:	20 13       	sub	r3,1
8002fd5a:	e0 a0 06 91 	rcall	80030a7c <__avr32_f64_add>
8002fd5e:	20 86       	sub	r6,8
8002fd60:	16 9c       	mov	r12,r11
8002fd62:	14 92       	mov	r2,r10
8002fd64:	58 03       	cp.w	r3,0
8002fd66:	cf 54       	brge	8002fd50 <__kernel_rem_pio2+0x570>
8002fd68:	18 9b       	mov	r11,r12
8002fd6a:	18 98       	mov	r8,r12
8002fd6c:	ee 18 80 00 	eorh	r8,0x8000
8002fd70:	58 05       	cp.w	r5,0
8002fd72:	f0 0c 17 10 	movne	r12,r8
8002fd76:	18 93       	mov	r3,r12
8002fd78:	14 92       	mov	r2,r10
8002fd7a:	16 99       	mov	r9,r11
8002fd7c:	e8 e3 00 00 	st.d	r4[0],r2
8002fd80:	14 98       	mov	r8,r10
8002fd82:	fa c3 ff 18 	sub	r3,sp,-232
8002fd86:	fa ea 00 e0 	ld.d	r10,sp[224]
8002fd8a:	30 16       	mov	r6,1
8002fd8c:	e0 a0 05 aa 	rcall	800308e0 <__avr32_f64_sub>
8002fd90:	c0 78       	rjmp	8002fd9e <__kernel_rem_pio2+0x5be>
8002fd92:	2f f6       	sub	r6,-1
8002fd94:	a7 09       	ld.d	r8,r3++
8002fd96:	18 9b       	mov	r11,r12
8002fd98:	04 9a       	mov	r10,r2
8002fd9a:	e0 a0 06 71 	rcall	80030a7c <__avr32_f64_add>
8002fd9e:	16 9c       	mov	r12,r11
8002fda0:	14 92       	mov	r2,r10
8002fda2:	0e 36       	cp.w	r6,r7
8002fda4:	fe 9a ff f7 	brle	8002fd92 <__kernel_rem_pio2+0x5b2>
8002fda8:	16 98       	mov	r8,r11
8002fdaa:	ee 18 80 00 	eorh	r8,0x8000
8002fdae:	58 05       	cp.w	r5,0
8002fdb0:	f0 0c 17 10 	movne	r12,r8
8002fdb4:	14 98       	mov	r8,r10
8002fdb6:	18 99       	mov	r9,r12
8002fdb8:	e8 e9 00 08 	st.d	r4[8],r8
8002fdbc:	c7 b8       	rjmp	8002feb2 <__kernel_rem_pio2+0x6d2>
8002fdbe:	e6 e0 00 00 	ld.d	r0,r3[0]
8002fdc2:	e6 e8 00 08 	ld.d	r8,r3[8]
8002fdc6:	00 9a       	mov	r10,r0
8002fdc8:	02 9b       	mov	r11,r1
8002fdca:	e0 a0 06 59 	rcall	80030a7c <__avr32_f64_add>
8002fdce:	fa eb 00 0c 	st.d	sp[12],r10
8002fdd2:	14 98       	mov	r8,r10
8002fdd4:	16 99       	mov	r9,r11
8002fdd6:	00 9a       	mov	r10,r0
8002fdd8:	02 9b       	mov	r11,r1
8002fdda:	e0 a0 05 83 	rcall	800308e0 <__avr32_f64_sub>
8002fdde:	14 98       	mov	r8,r10
8002fde0:	16 99       	mov	r9,r11
8002fde2:	e6 ea 00 08 	ld.d	r10,r3[8]
8002fde6:	e0 a0 06 4b 	rcall	80030a7c <__avr32_f64_add>
8002fdea:	fa e8 00 0c 	ld.d	r8,sp[12]
8002fdee:	e6 eb 00 08 	st.d	r3[8],r10
8002fdf2:	e6 e9 00 00 	st.d	r3[0],r8
8002fdf6:	20 12       	sub	r2,1
8002fdf8:	20 83       	sub	r3,8
8002fdfa:	58 02       	cp.w	r2,0
8002fdfc:	fe 99 ff e1 	brgt	8002fdbe <__kernel_rem_pio2+0x5de>
8002fe00:	0e 93       	mov	r3,r7
8002fe02:	c2 18       	rjmp	8002fe44 <__kernel_rem_pio2+0x664>
8002fe04:	80 03       	ld.sh	r3,r0[0x0]
8002fe06:	1f 50       	ld.sh	r0,--pc
8002fe08:	ec e0 00 00 	ld.d	r0,r6[0]
8002fe0c:	ec e8 00 08 	ld.d	r8,r6[8]
8002fe10:	00 9a       	mov	r10,r0
8002fe12:	02 9b       	mov	r11,r1
8002fe14:	e0 a0 06 34 	rcall	80030a7c <__avr32_f64_add>
8002fe18:	fa eb 00 0c 	st.d	sp[12],r10
8002fe1c:	14 98       	mov	r8,r10
8002fe1e:	16 99       	mov	r9,r11
8002fe20:	00 9a       	mov	r10,r0
8002fe22:	02 9b       	mov	r11,r1
8002fe24:	e0 a0 05 5e 	rcall	800308e0 <__avr32_f64_sub>
8002fe28:	14 98       	mov	r8,r10
8002fe2a:	16 99       	mov	r9,r11
8002fe2c:	ec ea 00 08 	ld.d	r10,r6[8]
8002fe30:	e0 a0 06 26 	rcall	80030a7c <__avr32_f64_add>
8002fe34:	fa e8 00 0c 	ld.d	r8,sp[12]
8002fe38:	ec eb 00 08 	st.d	r6[8],r10
8002fe3c:	ec e9 00 00 	st.d	r6[0],r8
8002fe40:	20 13       	sub	r3,1
8002fe42:	20 86       	sub	r6,8
8002fe44:	58 13       	cp.w	r3,1
8002fe46:	fe 99 ff e1 	brgt	8002fe08 <__kernel_rem_pio2+0x628>
8002fe4a:	0e 96       	mov	r6,r7
8002fe4c:	fa c8 ff 20 	sub	r8,sp,-224
8002fe50:	30 0c       	mov	r12,0
8002fe52:	f0 07 00 37 	add	r7,r8,r7<<0x3
8002fe56:	18 9a       	mov	r10,r12
8002fe58:	c0 a8       	rjmp	8002fe6c <__kernel_rem_pio2+0x68c>
8002fe5a:	ee e8 00 00 	ld.d	r8,r7[0]
8002fe5e:	18 9b       	mov	r11,r12
8002fe60:	20 87       	sub	r7,8
8002fe62:	06 9a       	mov	r10,r3
8002fe64:	20 16       	sub	r6,1
8002fe66:	e0 a0 06 0b 	rcall	80030a7c <__avr32_f64_add>
8002fe6a:	16 9c       	mov	r12,r11
8002fe6c:	14 93       	mov	r3,r10
8002fe6e:	58 16       	cp.w	r6,1
8002fe70:	fe 99 ff f5 	brgt	8002fe5a <__kernel_rem_pio2+0x67a>
8002fe74:	58 05       	cp.w	r5,0
8002fe76:	c0 e1       	brne	8002fe92 <__kernel_rem_pio2+0x6b2>
8002fe78:	fa e8 00 e0 	ld.d	r8,sp[224]
8002fe7c:	e8 e9 00 00 	st.d	r4[0],r8
8002fe80:	fa e8 00 e8 	ld.d	r8,sp[232]
8002fe84:	e8 e9 00 08 	st.d	r4[8],r8
8002fe88:	18 99       	mov	r9,r12
8002fe8a:	14 98       	mov	r8,r10
8002fe8c:	e8 e9 00 10 	st.d	r4[16],r8
8002fe90:	c1 18       	rjmp	8002feb2 <__kernel_rem_pio2+0x6d2>
8002fe92:	89 5a       	st.w	r4[0x14],r10
8002fe94:	ee 1c 80 00 	eorh	r12,0x8000
8002fe98:	89 4c       	st.w	r4[0x10],r12
8002fe9a:	43 88       	lddsp	r8,sp[0xe0]
8002fe9c:	ee 18 80 00 	eorh	r8,0x8000
8002fea0:	89 08       	st.w	r4[0x0],r8
8002fea2:	43 98       	lddsp	r8,sp[0xe4]
8002fea4:	89 18       	st.w	r4[0x4],r8
8002fea6:	43 a8       	lddsp	r8,sp[0xe8]
8002fea8:	ee 18 80 00 	eorh	r8,0x8000
8002feac:	89 28       	st.w	r4[0x8],r8
8002feae:	43 b8       	lddsp	r8,sp[0xec]
8002feb0:	89 38       	st.w	r4[0xc],r8
8002feb2:	40 58       	lddsp	r8,sp[0x14]
8002feb4:	f9 d8 c0 03 	bfextu	r12,r8,0x0,0x3
8002feb8:	fe 3d fd 90 	sub	sp,-624
8002febc:	d8 32       	popm	r0-r7,pc
8002febe:	d7 03       	nop

8002fec0 <__kernel_sin>:
8002fec0:	d4 31       	pushm	r0-r7,lr
8002fec2:	20 4d       	sub	sp,16
8002fec4:	fa e9 00 08 	st.d	sp[8],r8
8002fec8:	50 0c       	stdsp	sp[0x0],r12
8002feca:	14 96       	mov	r6,r10
8002fecc:	16 97       	mov	r7,r11
8002fece:	f1 db c0 1f 	bfextu	r8,r11,0x0,0x1f
8002fed2:	e0 69 ff ff 	mov	r9,65535
8002fed6:	ea 19 3e 3f 	orh	r9,0x3e3f
8002feda:	12 38       	cp.w	r8,r9
8002fedc:	e0 89 00 06 	brgt	8002fee8 <__kernel_sin+0x28>
8002fee0:	e0 a0 06 58 	rcall	80030b90 <__avr32_f64_to_s32>
8002fee4:	e0 80 00 b3 	breq	8003004a <__kernel_sin+0x18a>
8002fee8:	0c 98       	mov	r8,r6
8002feea:	0e 99       	mov	r9,r7
8002feec:	0c 9a       	mov	r10,r6
8002feee:	0e 9b       	mov	r11,r7
8002fef0:	e0 a0 04 0c 	rcall	80030708 <__avr32_f64_mul>
8002fef4:	0c 98       	mov	r8,r6
8002fef6:	14 94       	mov	r4,r10
8002fef8:	16 95       	mov	r5,r11
8002fefa:	0e 99       	mov	r9,r7
8002fefc:	e0 a0 04 06 	rcall	80030708 <__avr32_f64_mul>
8002ff00:	e0 68 d5 7c 	mov	r8,54652
8002ff04:	ea 18 5a cf 	orh	r8,0x5acf
8002ff08:	e0 69 d9 3a 	mov	r9,55610
8002ff0c:	ea 19 3d e5 	orh	r9,0x3de5
8002ff10:	14 90       	mov	r0,r10
8002ff12:	16 91       	mov	r1,r11
8002ff14:	08 9a       	mov	r10,r4
8002ff16:	0a 9b       	mov	r11,r5
8002ff18:	e0 a0 03 f8 	rcall	80030708 <__avr32_f64_mul>
8002ff1c:	e0 68 9c eb 	mov	r8,40171
8002ff20:	ea 18 8a 2b 	orh	r8,0x8a2b
8002ff24:	e0 69 e5 e6 	mov	r9,58854
8002ff28:	ea 19 3e 5a 	orh	r9,0x3e5a
8002ff2c:	e0 a0 04 da 	rcall	800308e0 <__avr32_f64_sub>
8002ff30:	14 98       	mov	r8,r10
8002ff32:	16 99       	mov	r9,r11
8002ff34:	08 9a       	mov	r10,r4
8002ff36:	0a 9b       	mov	r11,r5
8002ff38:	e0 a0 03 e8 	rcall	80030708 <__avr32_f64_mul>
8002ff3c:	e0 68 fe 7d 	mov	r8,65149
8002ff40:	ea 18 57 b1 	orh	r8,0x57b1
8002ff44:	e0 69 1d e3 	mov	r9,7651
8002ff48:	ea 19 3e c7 	orh	r9,0x3ec7
8002ff4c:	e0 a0 05 98 	rcall	80030a7c <__avr32_f64_add>
8002ff50:	14 98       	mov	r8,r10
8002ff52:	16 99       	mov	r9,r11
8002ff54:	08 9a       	mov	r10,r4
8002ff56:	0a 9b       	mov	r11,r5
8002ff58:	e0 a0 03 d8 	rcall	80030708 <__avr32_f64_mul>
8002ff5c:	e0 68 61 d5 	mov	r8,25045
8002ff60:	ea 18 19 c1 	orh	r8,0x19c1
8002ff64:	e0 69 01 a0 	mov	r9,416
8002ff68:	ea 19 3f 2a 	orh	r9,0x3f2a
8002ff6c:	e0 a0 04 ba 	rcall	800308e0 <__avr32_f64_sub>
8002ff70:	14 98       	mov	r8,r10
8002ff72:	16 99       	mov	r9,r11
8002ff74:	08 9a       	mov	r10,r4
8002ff76:	0a 9b       	mov	r11,r5
8002ff78:	e0 a0 03 c8 	rcall	80030708 <__avr32_f64_mul>
8002ff7c:	e0 68 f8 a6 	mov	r8,63654
8002ff80:	ea 18 11 10 	orh	r8,0x1110
8002ff84:	e0 69 11 11 	mov	r9,4369
8002ff88:	ea 19 3f 81 	orh	r9,0x3f81
8002ff8c:	e0 a0 05 78 	rcall	80030a7c <__avr32_f64_add>
8002ff90:	40 08       	lddsp	r8,sp[0x0]
8002ff92:	14 92       	mov	r2,r10
8002ff94:	16 93       	mov	r3,r11
8002ff96:	58 08       	cp.w	r8,0
8002ff98:	c1 e1       	brne	8002ffd4 <__kernel_sin+0x114>
8002ff9a:	14 98       	mov	r8,r10
8002ff9c:	06 99       	mov	r9,r3
8002ff9e:	08 9a       	mov	r10,r4
8002ffa0:	0a 9b       	mov	r11,r5
8002ffa2:	e0 a0 03 b3 	rcall	80030708 <__avr32_f64_mul>
8002ffa6:	e0 68 55 49 	mov	r8,21833
8002ffaa:	ea 18 55 55 	orh	r8,0x5555
8002ffae:	e0 69 55 55 	mov	r9,21845
8002ffb2:	ea 19 3f c5 	orh	r9,0x3fc5
8002ffb6:	e0 a0 04 95 	rcall	800308e0 <__avr32_f64_sub>
8002ffba:	14 98       	mov	r8,r10
8002ffbc:	16 99       	mov	r9,r11
8002ffbe:	00 9a       	mov	r10,r0
8002ffc0:	02 9b       	mov	r11,r1
8002ffc2:	e0 a0 03 a3 	rcall	80030708 <__avr32_f64_mul>
8002ffc6:	14 98       	mov	r8,r10
8002ffc8:	16 99       	mov	r9,r11
8002ffca:	0c 9a       	mov	r10,r6
8002ffcc:	0e 9b       	mov	r11,r7
8002ffce:	e0 a0 05 57 	rcall	80030a7c <__avr32_f64_add>
8002ffd2:	c3 a8       	rjmp	80030046 <__kernel_sin+0x186>
8002ffd4:	30 08       	mov	r8,0
8002ffd6:	fc 19 3f e0 	movh	r9,0x3fe0
8002ffda:	fa ea 00 08 	ld.d	r10,sp[8]
8002ffde:	e0 a0 03 95 	rcall	80030708 <__avr32_f64_mul>
8002ffe2:	04 98       	mov	r8,r2
8002ffe4:	fa eb 00 00 	st.d	sp[0],r10
8002ffe8:	06 99       	mov	r9,r3
8002ffea:	00 9a       	mov	r10,r0
8002ffec:	02 9b       	mov	r11,r1
8002ffee:	e0 a0 03 8d 	rcall	80030708 <__avr32_f64_mul>
8002fff2:	14 98       	mov	r8,r10
8002fff4:	16 99       	mov	r9,r11
8002fff6:	fa ea 00 00 	ld.d	r10,sp[0]
8002fffa:	e0 a0 04 73 	rcall	800308e0 <__avr32_f64_sub>
8002fffe:	14 98       	mov	r8,r10
80030000:	16 99       	mov	r9,r11
80030002:	08 9a       	mov	r10,r4
80030004:	0a 9b       	mov	r11,r5
80030006:	e0 a0 03 81 	rcall	80030708 <__avr32_f64_mul>
8003000a:	fa e8 00 08 	ld.d	r8,sp[8]
8003000e:	e0 a0 04 69 	rcall	800308e0 <__avr32_f64_sub>
80030012:	e0 68 55 49 	mov	r8,21833
80030016:	ea 18 55 55 	orh	r8,0x5555
8003001a:	14 94       	mov	r4,r10
8003001c:	16 95       	mov	r5,r11
8003001e:	e0 69 55 55 	mov	r9,21845
80030022:	ea 19 3f c5 	orh	r9,0x3fc5
80030026:	00 9a       	mov	r10,r0
80030028:	02 9b       	mov	r11,r1
8003002a:	e0 a0 03 6f 	rcall	80030708 <__avr32_f64_mul>
8003002e:	14 98       	mov	r8,r10
80030030:	16 99       	mov	r9,r11
80030032:	08 9a       	mov	r10,r4
80030034:	0a 9b       	mov	r11,r5
80030036:	e0 a0 05 23 	rcall	80030a7c <__avr32_f64_add>
8003003a:	14 98       	mov	r8,r10
8003003c:	16 99       	mov	r9,r11
8003003e:	0c 9a       	mov	r10,r6
80030040:	0e 9b       	mov	r11,r7
80030042:	e0 a0 04 4f 	rcall	800308e0 <__avr32_f64_sub>
80030046:	14 96       	mov	r6,r10
80030048:	16 97       	mov	r7,r11
8003004a:	0c 9a       	mov	r10,r6
8003004c:	0e 9b       	mov	r11,r7
8003004e:	2f cd       	sub	sp,-16
80030050:	d8 32       	popm	r0-r7,pc
80030052:	d7 03       	nop

80030054 <atan>:
80030054:	d4 31       	pushm	r0-r7,lr
80030056:	20 1d       	sub	sp,4
80030058:	50 0b       	stdsp	sp[0x0],r11
8003005a:	16 96       	mov	r6,r11
8003005c:	14 97       	mov	r7,r10
8003005e:	e7 db c0 1f 	bfextu	r3,r11,0x0,0x1f
80030062:	e0 68 ff ff 	mov	r8,65535
80030066:	ea 18 44 0f 	orh	r8,0x440f
8003006a:	10 33       	cp.w	r3,r8
8003006c:	e0 8a 00 24 	brle	800300b4 <atan+0x60>
80030070:	fc 1c 7f f0 	movh	r12,0x7ff0
80030074:	18 33       	cp.w	r3,r12
80030076:	e0 89 00 08 	brgt	80030086 <atan+0x32>
8003007a:	5f 0c       	sreq	r12
8003007c:	58 0a       	cp.w	r10,0
8003007e:	5f 18       	srne	r8
80030080:	f9 e8 00 08 	and	r8,r12,r8
80030084:	c0 80       	breq	80030094 <atan+0x40>
80030086:	0c 9b       	mov	r11,r6
80030088:	0e 9a       	mov	r10,r7
8003008a:	0c 99       	mov	r9,r6
8003008c:	0e 98       	mov	r8,r7
8003008e:	e0 a0 04 f7 	rcall	80030a7c <__avr32_f64_add>
80030092:	c5 99       	rjmp	80030344 <atan+0x2f0>
80030094:	e0 68 21 fb 	mov	r8,8699
80030098:	ea 18 bf f9 	orh	r8,0xbff9
8003009c:	e0 66 21 fb 	mov	r6,8699
800300a0:	ea 16 3f f9 	orh	r6,0x3ff9
800300a4:	e0 67 2d 18 	mov	r7,11544
800300a8:	ea 17 54 44 	orh	r7,0x5444
800300ac:	58 0b       	cp.w	r11,0
800300ae:	f0 06 17 a0 	movle	r6,r8
800300b2:	c6 d9       	rjmp	8003038c <atan+0x338>
800300b4:	e0 68 ff ff 	mov	r8,65535
800300b8:	ea 18 3f db 	orh	r8,0x3fdb
800300bc:	10 33       	cp.w	r3,r8
800300be:	e0 89 00 1d 	brgt	800300f8 <atan+0xa4>
800300c2:	e0 6c ff ff 	mov	r12,65535
800300c6:	ea 1c 3e 1f 	orh	r12,0x3e1f
800300ca:	18 33       	cp.w	r3,r12
800300cc:	e0 89 00 73 	brgt	800301b2 <atan+0x15e>
800300d0:	e0 68 75 9c 	mov	r8,30108
800300d4:	ea 18 88 00 	orh	r8,0x8800
800300d8:	e0 69 e4 3c 	mov	r9,58428
800300dc:	ea 19 7e 37 	orh	r9,0x7e37
800300e0:	0c 9b       	mov	r11,r6
800300e2:	e0 a0 04 cd 	rcall	80030a7c <__avr32_f64_add>
800300e6:	14 98       	mov	r8,r10
800300e8:	16 99       	mov	r9,r11
800300ea:	30 0a       	mov	r10,0
800300ec:	fc 1b 3f f0 	movh	r11,0x3ff0
800300f0:	e0 a0 06 1e 	rcall	80030d2c <__avr32_f64_cmp_lt>
800300f4:	c5 f0       	breq	800301b2 <atan+0x15e>
800300f6:	c4 b9       	rjmp	8003038c <atan+0x338>
800300f8:	0c 9b       	mov	r11,r6
800300fa:	c5 1d       	rcall	8003039c <fabs>
800300fc:	e0 68 ff ff 	mov	r8,65535
80030100:	ea 18 3f f2 	orh	r8,0x3ff2
80030104:	14 94       	mov	r4,r10
80030106:	16 95       	mov	r5,r11
80030108:	10 33       	cp.w	r3,r8
8003010a:	e0 89 00 33 	brgt	80030170 <atan+0x11c>
8003010e:	e0 6c ff ff 	mov	r12,65535
80030112:	ea 1c 3f e5 	orh	r12,0x3fe5
80030116:	18 33       	cp.w	r3,r12
80030118:	e0 89 00 14 	brgt	80030140 <atan+0xec>
8003011c:	0a 99       	mov	r9,r5
8003011e:	14 98       	mov	r8,r10
80030120:	e0 a0 04 ae 	rcall	80030a7c <__avr32_f64_add>
80030124:	30 08       	mov	r8,0
80030126:	fc 19 3f f0 	movh	r9,0x3ff0
8003012a:	e0 a0 03 db 	rcall	800308e0 <__avr32_f64_sub>
8003012e:	30 08       	mov	r8,0
80030130:	14 96       	mov	r6,r10
80030132:	16 97       	mov	r7,r11
80030134:	08 9a       	mov	r10,r4
80030136:	0a 9b       	mov	r11,r5
80030138:	fc 19 40 00 	movh	r9,0x4000
8003013c:	30 05       	mov	r5,0
8003013e:	c0 e8       	rjmp	8003015a <atan+0x106>
80030140:	30 08       	mov	r8,0
80030142:	fc 19 3f f0 	movh	r9,0x3ff0
80030146:	e0 a0 03 cd 	rcall	800308e0 <__avr32_f64_sub>
8003014a:	30 08       	mov	r8,0
8003014c:	14 96       	mov	r6,r10
8003014e:	16 97       	mov	r7,r11
80030150:	08 9a       	mov	r10,r4
80030152:	0a 9b       	mov	r11,r5
80030154:	fc 19 3f f0 	movh	r9,0x3ff0
80030158:	30 15       	mov	r5,1
8003015a:	e0 a0 04 91 	rcall	80030a7c <__avr32_f64_add>
8003015e:	14 98       	mov	r8,r10
80030160:	16 99       	mov	r9,r11
80030162:	0c 9a       	mov	r10,r6
80030164:	0e 9b       	mov	r11,r7
80030166:	e0 a0 06 17 	rcall	80030d94 <__avr32_f64_div>
8003016a:	16 96       	mov	r6,r11
8003016c:	14 97       	mov	r7,r10
8003016e:	c2 38       	rjmp	800301b4 <atan+0x160>
80030170:	e0 68 7f ff 	mov	r8,32767
80030174:	ea 18 40 03 	orh	r8,0x4003
80030178:	10 33       	cp.w	r3,r8
8003017a:	e0 89 00 15 	brgt	800301a4 <atan+0x150>
8003017e:	30 08       	mov	r8,0
80030180:	fc 19 3f f8 	movh	r9,0x3ff8
80030184:	e0 a0 03 ae 	rcall	800308e0 <__avr32_f64_sub>
80030188:	30 08       	mov	r8,0
8003018a:	16 97       	mov	r7,r11
8003018c:	fc 19 3f f8 	movh	r9,0x3ff8
80030190:	0a 9b       	mov	r11,r5
80030192:	14 96       	mov	r6,r10
80030194:	08 9a       	mov	r10,r4
80030196:	e0 a0 02 b9 	rcall	80030708 <__avr32_f64_mul>
8003019a:	30 08       	mov	r8,0
8003019c:	fc 19 3f f0 	movh	r9,0x3ff0
800301a0:	30 25       	mov	r5,2
800301a2:	cd cb       	rjmp	8003015a <atan+0x106>
800301a4:	14 98       	mov	r8,r10
800301a6:	0a 99       	mov	r9,r5
800301a8:	30 0a       	mov	r10,0
800301aa:	fc 1b bf f0 	movh	r11,0xbff0
800301ae:	30 35       	mov	r5,3
800301b0:	cd bb       	rjmp	80030166 <atan+0x112>
800301b2:	3f f5       	mov	r5,-1
800301b4:	0c 99       	mov	r9,r6
800301b6:	0e 98       	mov	r8,r7
800301b8:	0c 9b       	mov	r11,r6
800301ba:	0e 9a       	mov	r10,r7
800301bc:	e0 a0 02 a6 	rcall	80030708 <__avr32_f64_mul>
800301c0:	16 91       	mov	r1,r11
800301c2:	14 90       	mov	r0,r10
800301c4:	02 99       	mov	r9,r1
800301c6:	14 98       	mov	r8,r10
800301c8:	e0 a0 02 a0 	rcall	80030708 <__avr32_f64_mul>
800301cc:	e0 68 da 11 	mov	r8,55825
800301d0:	ea 18 e3 22 	orh	r8,0xe322
800301d4:	14 92       	mov	r2,r10
800301d6:	16 93       	mov	r3,r11
800301d8:	e0 69 ad 3a 	mov	r9,44346
800301dc:	ea 19 3f 90 	orh	r9,0x3f90
800301e0:	e0 a0 02 94 	rcall	80030708 <__avr32_f64_mul>
800301e4:	e0 68 0d eb 	mov	r8,3563
800301e8:	ea 18 24 76 	orh	r8,0x2476
800301ec:	e0 69 7b 4b 	mov	r9,31563
800301f0:	ea 19 3f a9 	orh	r9,0x3fa9
800301f4:	e0 a0 04 44 	rcall	80030a7c <__avr32_f64_add>
800301f8:	14 98       	mov	r8,r10
800301fa:	16 99       	mov	r9,r11
800301fc:	04 9a       	mov	r10,r2
800301fe:	06 9b       	mov	r11,r3
80030200:	e0 a0 02 84 	rcall	80030708 <__avr32_f64_mul>
80030204:	e0 68 3d 51 	mov	r8,15697
80030208:	ea 18 a0 d0 	orh	r8,0xa0d0
8003020c:	e0 69 0d 66 	mov	r9,3430
80030210:	ea 19 3f b1 	orh	r9,0x3fb1
80030214:	e0 a0 04 34 	rcall	80030a7c <__avr32_f64_add>
80030218:	14 98       	mov	r8,r10
8003021a:	16 99       	mov	r9,r11
8003021c:	04 9a       	mov	r10,r2
8003021e:	06 9b       	mov	r11,r3
80030220:	e0 a0 02 74 	rcall	80030708 <__avr32_f64_mul>
80030224:	e0 68 20 6e 	mov	r8,8302
80030228:	ea 18 c5 4c 	orh	r8,0xc54c
8003022c:	e0 69 45 cd 	mov	r9,17869
80030230:	ea 19 3f b7 	orh	r9,0x3fb7
80030234:	e0 a0 04 24 	rcall	80030a7c <__avr32_f64_add>
80030238:	14 98       	mov	r8,r10
8003023a:	16 99       	mov	r9,r11
8003023c:	04 9a       	mov	r10,r2
8003023e:	06 9b       	mov	r11,r3
80030240:	e0 a0 02 64 	rcall	80030708 <__avr32_f64_mul>
80030244:	e0 68 83 ff 	mov	r8,33791
80030248:	ea 18 92 00 	orh	r8,0x9200
8003024c:	e0 69 49 24 	mov	r9,18724
80030250:	ea 19 3f c2 	orh	r9,0x3fc2
80030254:	e0 a0 04 14 	rcall	80030a7c <__avr32_f64_add>
80030258:	14 98       	mov	r8,r10
8003025a:	16 99       	mov	r9,r11
8003025c:	04 9a       	mov	r10,r2
8003025e:	06 9b       	mov	r11,r3
80030260:	e0 a0 02 54 	rcall	80030708 <__avr32_f64_mul>
80030264:	e0 68 55 0d 	mov	r8,21773
80030268:	ea 18 55 55 	orh	r8,0x5555
8003026c:	e0 69 55 55 	mov	r9,21845
80030270:	ea 19 3f d5 	orh	r9,0x3fd5
80030274:	e0 a0 04 04 	rcall	80030a7c <__avr32_f64_add>
80030278:	14 98       	mov	r8,r10
8003027a:	16 99       	mov	r9,r11
8003027c:	00 9a       	mov	r10,r0
8003027e:	02 9b       	mov	r11,r1
80030280:	e0 a0 02 44 	rcall	80030708 <__avr32_f64_mul>
80030284:	e0 68 6c 2f 	mov	r8,27695
80030288:	ea 18 2c 6a 	orh	r8,0x2c6a
8003028c:	e0 69 b4 44 	mov	r9,46148
80030290:	ea 19 bf a2 	orh	r9,0xbfa2
80030294:	14 90       	mov	r0,r10
80030296:	16 91       	mov	r1,r11
80030298:	04 9a       	mov	r10,r2
8003029a:	06 9b       	mov	r11,r3
8003029c:	e0 a0 02 36 	rcall	80030708 <__avr32_f64_mul>
800302a0:	e0 68 fd 9a 	mov	r8,64922
800302a4:	ea 18 52 de 	orh	r8,0x52de
800302a8:	e0 69 de 2d 	mov	r9,56877
800302ac:	ea 19 3f ad 	orh	r9,0x3fad
800302b0:	e0 a0 03 18 	rcall	800308e0 <__avr32_f64_sub>
800302b4:	14 98       	mov	r8,r10
800302b6:	16 99       	mov	r9,r11
800302b8:	04 9a       	mov	r10,r2
800302ba:	06 9b       	mov	r11,r3
800302bc:	e0 a0 02 26 	rcall	80030708 <__avr32_f64_mul>
800302c0:	e0 68 9a 6d 	mov	r8,39533
800302c4:	ea 18 af 74 	orh	r8,0xaf74
800302c8:	e0 69 b0 f2 	mov	r9,45298
800302cc:	ea 19 3f b3 	orh	r9,0x3fb3
800302d0:	e0 a0 03 08 	rcall	800308e0 <__avr32_f64_sub>
800302d4:	14 98       	mov	r8,r10
800302d6:	16 99       	mov	r9,r11
800302d8:	04 9a       	mov	r10,r2
800302da:	06 9b       	mov	r11,r3
800302dc:	e0 a0 02 16 	rcall	80030708 <__avr32_f64_mul>
800302e0:	e0 68 16 71 	mov	r8,5745
800302e4:	ea 18 fe 23 	orh	r8,0xfe23
800302e8:	e0 69 71 c6 	mov	r9,29126
800302ec:	ea 19 3f bc 	orh	r9,0x3fbc
800302f0:	e0 a0 02 f8 	rcall	800308e0 <__avr32_f64_sub>
800302f4:	14 98       	mov	r8,r10
800302f6:	16 99       	mov	r9,r11
800302f8:	04 9a       	mov	r10,r2
800302fa:	06 9b       	mov	r11,r3
800302fc:	e0 a0 02 06 	rcall	80030708 <__avr32_f64_mul>
80030300:	e0 68 eb c4 	mov	r8,60356
80030304:	ea 18 99 98 	orh	r8,0x9998
80030308:	e0 69 99 99 	mov	r9,39321
8003030c:	ea 19 3f c9 	orh	r9,0x3fc9
80030310:	e0 a0 02 e8 	rcall	800308e0 <__avr32_f64_sub>
80030314:	14 98       	mov	r8,r10
80030316:	16 99       	mov	r9,r11
80030318:	04 9a       	mov	r10,r2
8003031a:	06 9b       	mov	r11,r3
8003031c:	cf 6d       	rcall	80030708 <__avr32_f64_mul>
8003031e:	14 98       	mov	r8,r10
80030320:	16 99       	mov	r9,r11
80030322:	5b f5       	cp.w	r5,-1
80030324:	c1 31       	brne	8003034a <atan+0x2f6>
80030326:	00 9a       	mov	r10,r0
80030328:	02 9b       	mov	r11,r1
8003032a:	e0 a0 03 a9 	rcall	80030a7c <__avr32_f64_add>
8003032e:	14 98       	mov	r8,r10
80030330:	16 99       	mov	r9,r11
80030332:	0e 9a       	mov	r10,r7
80030334:	0c 9b       	mov	r11,r6
80030336:	ce 9d       	rcall	80030708 <__avr32_f64_mul>
80030338:	14 98       	mov	r8,r10
8003033a:	16 99       	mov	r9,r11
8003033c:	0e 9a       	mov	r10,r7
8003033e:	0c 9b       	mov	r11,r6
80030340:	e0 a0 02 d0 	rcall	800308e0 <__avr32_f64_sub>
80030344:	16 96       	mov	r6,r11
80030346:	14 97       	mov	r7,r10
80030348:	c2 28       	rjmp	8003038c <atan+0x338>
8003034a:	00 9a       	mov	r10,r0
8003034c:	02 9b       	mov	r11,r1
8003034e:	e0 a0 03 97 	rcall	80030a7c <__avr32_f64_add>
80030352:	14 98       	mov	r8,r10
80030354:	16 99       	mov	r9,r11
80030356:	0e 9a       	mov	r10,r7
80030358:	0c 9b       	mov	r11,r6
8003035a:	cd 7d       	rcall	80030708 <__avr32_f64_mul>
8003035c:	48 e8       	lddpc	r8,80030394 <atan+0x340>
8003035e:	f0 05 02 38 	ld.d	r8,r8[r5<<0x3]
80030362:	e0 a0 02 bf 	rcall	800308e0 <__avr32_f64_sub>
80030366:	0c 99       	mov	r9,r6
80030368:	0e 98       	mov	r8,r7
8003036a:	e0 a0 02 bb 	rcall	800308e0 <__avr32_f64_sub>
8003036e:	14 98       	mov	r8,r10
80030370:	16 99       	mov	r9,r11
80030372:	48 aa       	lddpc	r10,80030398 <atan+0x344>
80030374:	f4 05 02 3a 	ld.d	r10,r10[r5<<0x3]
80030378:	e0 a0 02 b4 	rcall	800308e0 <__avr32_f64_sub>
8003037c:	40 0c       	lddsp	r12,sp[0x0]
8003037e:	16 96       	mov	r6,r11
80030380:	14 97       	mov	r7,r10
80030382:	ee 16 80 00 	eorh	r6,0x8000
80030386:	58 0c       	cp.w	r12,0
80030388:	c0 25       	brlt	8003038c <atan+0x338>
8003038a:	16 96       	mov	r6,r11
8003038c:	0c 9b       	mov	r11,r6
8003038e:	0e 9a       	mov	r10,r7
80030390:	2f fd       	sub	sp,-4
80030392:	d8 32       	popm	r0-r7,pc
80030394:	80 03       	ld.sh	r3,r0[0x0]
80030396:	1f 90       	ld.ub	r0,pc[0x1]
80030398:	80 03       	ld.sh	r3,r0[0x0]
8003039a:	1f b0       	ld.ub	r0,pc[0x3]

8003039c <fabs>:
8003039c:	f3 db c0 1f 	bfextu	r9,r11,0x0,0x1f
800303a0:	12 9b       	mov	r11,r9
800303a2:	5e fc       	retal	r12

800303a4 <finite>:
800303a4:	f7 db c0 1f 	bfextu	r11,r11,0x0,0x1f
800303a8:	fc 18 80 10 	movh	r8,0x8010
800303ac:	f6 08 00 0c 	add	r12,r11,r8
800303b0:	bf 9c       	lsr	r12,0x1f
800303b2:	5e fc       	retal	r12

800303b4 <floor>:
800303b4:	d4 31       	pushm	r0-r7,lr
800303b6:	e9 db c2 8b 	bfextu	r4,r11,0x14,0xb
800303ba:	14 98       	mov	r8,r10
800303bc:	16 99       	mov	r9,r11
800303be:	14 92       	mov	r2,r10
800303c0:	16 93       	mov	r3,r11
800303c2:	16 97       	mov	r7,r11
800303c4:	14 91       	mov	r1,r10
800303c6:	14 96       	mov	r6,r10
800303c8:	e8 c5 03 ff 	sub	r5,r4,1023
800303cc:	59 35       	cp.w	r5,19
800303ce:	e0 89 00 48 	brgt	8003045e <floor+0xaa>
800303d2:	58 05       	cp.w	r5,0
800303d4:	c2 04       	brge	80030414 <floor+0x60>
800303d6:	e0 68 75 9c 	mov	r8,30108
800303da:	ea 18 88 00 	orh	r8,0x8800
800303de:	e0 69 e4 3c 	mov	r9,58428
800303e2:	ea 19 7e 37 	orh	r9,0x7e37
800303e6:	e0 a0 03 4b 	rcall	80030a7c <__avr32_f64_add>
800303ea:	14 98       	mov	r8,r10
800303ec:	16 99       	mov	r9,r11
800303ee:	30 0a       	mov	r10,0
800303f0:	30 0b       	mov	r11,0
800303f2:	e0 a0 04 9d 	rcall	80030d2c <__avr32_f64_cmp_lt>
800303f6:	c6 a0       	breq	800304ca <floor+0x116>
800303f8:	58 03       	cp.w	r3,0
800303fa:	c0 45       	brlt	80030402 <floor+0x4e>
800303fc:	30 06       	mov	r6,0
800303fe:	0c 97       	mov	r7,r6
80030400:	c6 58       	rjmp	800304ca <floor+0x116>
80030402:	f1 d3 c0 1f 	bfextu	r8,r3,0x0,0x1f
80030406:	f1 e2 10 06 	or	r6,r8,r2
8003040a:	fc 18 bf f0 	movh	r8,0xbff0
8003040e:	f0 07 17 10 	movne	r7,r8
80030412:	c2 48       	rjmp	8003045a <floor+0xa6>
80030414:	ee 74 ff ff 	mov	r4,1048575
80030418:	e8 05 08 44 	asr	r4,r4,r5
8003041c:	e9 eb 00 0c 	and	r12,r4,r11
80030420:	f9 ea 10 01 	or	r1,r12,r10
80030424:	c5 50       	breq	800304ce <floor+0x11a>
80030426:	e0 68 75 9c 	mov	r8,30108
8003042a:	ea 18 88 00 	orh	r8,0x8800
8003042e:	e0 69 e4 3c 	mov	r9,58428
80030432:	ea 19 7e 37 	orh	r9,0x7e37
80030436:	e0 a0 03 23 	rcall	80030a7c <__avr32_f64_add>
8003043a:	14 98       	mov	r8,r10
8003043c:	16 99       	mov	r9,r11
8003043e:	30 0a       	mov	r10,0
80030440:	30 0b       	mov	r11,0
80030442:	e0 a0 04 75 	rcall	80030d2c <__avr32_f64_cmp_lt>
80030446:	c4 20       	breq	800304ca <floor+0x116>
80030448:	58 03       	cp.w	r3,0
8003044a:	c0 64       	brge	80030456 <floor+0xa2>
8003044c:	fc 18 00 10 	movh	r8,0x10
80030450:	f0 05 08 45 	asr	r5,r8,r5
80030454:	0a 07       	add	r7,r5
80030456:	5c d4       	com	r4
80030458:	08 67       	and	r7,r4
8003045a:	30 06       	mov	r6,0
8003045c:	c3 78       	rjmp	800304ca <floor+0x116>
8003045e:	e0 45 00 33 	cp.w	r5,51
80030462:	e0 8a 00 0a 	brle	80030476 <floor+0xc2>
80030466:	e0 45 04 00 	cp.w	r5,1024
8003046a:	c3 21       	brne	800304ce <floor+0x11a>
8003046c:	e0 a0 03 08 	rcall	80030a7c <__avr32_f64_add>
80030470:	14 98       	mov	r8,r10
80030472:	16 99       	mov	r9,r11
80030474:	c2 d8       	rjmp	800304ce <floor+0x11a>
80030476:	3f fc       	mov	r12,-1
80030478:	e8 c4 04 13 	sub	r4,r4,1043
8003047c:	f8 04 0a 44 	lsr	r4,r12,r4
80030480:	e9 ea 00 0c 	and	r12,r4,r10
80030484:	c2 50       	breq	800304ce <floor+0x11a>
80030486:	e0 68 75 9c 	mov	r8,30108
8003048a:	ea 18 88 00 	orh	r8,0x8800
8003048e:	e0 69 e4 3c 	mov	r9,58428
80030492:	ea 19 7e 37 	orh	r9,0x7e37
80030496:	e0 a0 02 f3 	rcall	80030a7c <__avr32_f64_add>
8003049a:	14 98       	mov	r8,r10
8003049c:	16 99       	mov	r9,r11
8003049e:	30 0a       	mov	r10,0
800304a0:	30 0b       	mov	r11,0
800304a2:	e0 a0 04 45 	rcall	80030d2c <__avr32_f64_cmp_lt>
800304a6:	c1 20       	breq	800304ca <floor+0x116>
800304a8:	58 03       	cp.w	r3,0
800304aa:	c0 e4       	brge	800304c6 <floor+0x112>
800304ac:	59 45       	cp.w	r5,20
800304ae:	c0 31       	brne	800304b4 <floor+0x100>
800304b0:	2f f7       	sub	r7,-1
800304b2:	c0 a8       	rjmp	800304c6 <floor+0x112>
800304b4:	30 18       	mov	r8,1
800304b6:	ea 05 11 34 	rsub	r5,r5,52
800304ba:	f0 05 09 45 	lsl	r5,r8,r5
800304be:	0a 06       	add	r6,r5
800304c0:	04 36       	cp.w	r6,r2
800304c2:	e7 d8 e3 07 	addcs	r7,r3,r8
800304c6:	5c d4       	com	r4
800304c8:	08 66       	and	r6,r4
800304ca:	0e 99       	mov	r9,r7
800304cc:	0c 98       	mov	r8,r6
800304ce:	10 9a       	mov	r10,r8
800304d0:	12 9b       	mov	r11,r9
800304d2:	d8 32       	popm	r0-r7,pc

800304d4 <__isnand>:
800304d4:	14 98       	mov	r8,r10
800304d6:	f5 db c0 1f 	bfextu	r10,r11,0x0,0x1f
800304da:	f0 0c 11 00 	rsub	r12,r8,0
800304de:	10 4c       	or	r12,r8
800304e0:	fc 18 7f f0 	movh	r8,0x7ff0
800304e4:	f5 ec 13 fc 	or	r12,r10,r12>>0x1f
800304e8:	f0 0c 01 0c 	sub	r12,r8,r12
800304ec:	bf 9c       	lsr	r12,0x1f
800304ee:	5e fc       	retal	r12

800304f0 <matherr>:
800304f0:	5e fd       	retal	0

800304f2 <nan>:
800304f2:	30 0a       	mov	r10,0
800304f4:	fc 1b 7f f8 	movh	r11,0x7ff8
800304f8:	5e fc       	retal	r12
800304fa:	d7 03       	nop

800304fc <rint>:
800304fc:	d4 21       	pushm	r4-r7,lr
800304fe:	20 2d       	sub	sp,8
80030500:	ed db c2 8b 	bfextu	r6,r11,0x14,0xb
80030504:	14 94       	mov	r4,r10
80030506:	16 95       	mov	r5,r11
80030508:	14 98       	mov	r8,r10
8003050a:	16 9e       	mov	lr,r11
8003050c:	16 9c       	mov	r12,r11
8003050e:	f6 07 16 1f 	lsr	r7,r11,0x1f
80030512:	ec c9 03 ff 	sub	r9,r6,1023
80030516:	59 39       	cp.w	r9,19
80030518:	e0 89 00 49 	brgt	800305aa <rint+0xae>
8003051c:	58 09       	cp.w	r9,0
8003051e:	c2 b4       	brge	80030574 <rint+0x78>
80030520:	f3 db c0 1f 	bfextu	r9,r11,0x0,0x1f
80030524:	14 49       	or	r9,r10
80030526:	c7 10       	breq	80030608 <rint+0x10c>
80030528:	fd db c0 14 	bfextu	lr,r11,0x0,0x14
8003052c:	4b 9c       	lddpc	r12,80030610 <rint+0x114>
8003052e:	fd e4 10 08 	or	r8,lr,r4
80030532:	16 99       	mov	r9,r11
80030534:	f0 0e 11 00 	rsub	lr,r8,0
80030538:	e6 19 ff fe 	andh	r9,0xfffe,COH
8003053c:	fd e8 10 08 	or	r8,lr,r8
80030540:	ad 88       	lsr	r8,0xc
80030542:	e6 18 00 08 	andh	r8,0x8,COH
80030546:	f1 e9 10 0b 	or	r11,r8,r9
8003054a:	f8 07 02 34 	ld.d	r4,r12[r7<<0x3]
8003054e:	14 98       	mov	r8,r10
80030550:	16 99       	mov	r9,r11
80030552:	08 9a       	mov	r10,r4
80030554:	0a 9b       	mov	r11,r5
80030556:	e0 a0 02 93 	rcall	80030a7c <__avr32_f64_add>
8003055a:	08 98       	mov	r8,r4
8003055c:	fa eb 00 00 	st.d	sp[0],r10
80030560:	0a 99       	mov	r9,r5
80030562:	fa ea 00 00 	ld.d	r10,sp[0]
80030566:	cb dd       	rcall	800308e0 <__avr32_f64_sub>
80030568:	f7 db c0 1f 	bfextu	r11,r11,0x0,0x1f
8003056c:	14 94       	mov	r4,r10
8003056e:	f7 e7 11 f5 	or	r5,r11,r7<<0x1f
80030572:	c4 b8       	rjmp	80030608 <rint+0x10c>
80030574:	ee 7a ff ff 	mov	r10,1048575
80030578:	f4 09 08 4a 	asr	r10,r10,r9
8003057c:	f5 eb 00 0b 	and	r11,r10,r11
80030580:	08 4b       	or	r11,r4
80030582:	c4 30       	breq	80030608 <rint+0x10c>
80030584:	a1 9a       	lsr	r10,0x1
80030586:	f5 e5 00 0b 	and	r11,r10,r5
8003058a:	08 4b       	or	r11,r4
8003058c:	c0 31       	brne	80030592 <rint+0x96>
8003058e:	16 98       	mov	r8,r11
80030590:	c2 b8       	rjmp	800305e6 <rint+0xea>
80030592:	59 39       	cp.w	r9,19
80030594:	c0 41       	brne	8003059c <rint+0xa0>
80030596:	fc 18 40 00 	movh	r8,0x4000
8003059a:	c2 68       	rjmp	800305e6 <rint+0xea>
8003059c:	14 8c       	andn	r12,r10
8003059e:	e2 6a 00 00 	mov	r10,131072
800305a2:	f4 09 08 49 	asr	r9,r10,r9
800305a6:	12 4c       	or	r12,r9
800305a8:	c1 f8       	rjmp	800305e6 <rint+0xea>
800305aa:	e0 49 00 33 	cp.w	r9,51
800305ae:	e0 8a 00 0a 	brle	800305c2 <rint+0xc6>
800305b2:	e0 49 04 00 	cp.w	r9,1024
800305b6:	c2 91       	brne	80030608 <rint+0x10c>
800305b8:	14 98       	mov	r8,r10
800305ba:	16 99       	mov	r9,r11
800305bc:	e0 a0 02 60 	rcall	80030a7c <__avr32_f64_add>
800305c0:	c2 28       	rjmp	80030604 <rint+0x108>
800305c2:	ec c6 04 13 	sub	r6,r6,1043
800305c6:	3f f9       	mov	r9,-1
800305c8:	f2 06 0a 49 	lsr	r9,r9,r6
800305cc:	f3 ea 00 0a 	and	r10,r9,r10
800305d0:	c1 c0       	breq	80030608 <rint+0x10c>
800305d2:	a1 99       	lsr	r9,0x1
800305d4:	f3 e4 00 0a 	and	r10,r9,r4
800305d8:	c0 70       	breq	800305e6 <rint+0xea>
800305da:	12 88       	andn	r8,r9
800305dc:	fc 19 40 00 	movh	r9,0x4000
800305e0:	f2 06 08 46 	asr	r6,r9,r6
800305e4:	0c 48       	or	r8,r6
800305e6:	48 ba       	lddpc	r10,80030610 <rint+0x114>
800305e8:	18 99       	mov	r9,r12
800305ea:	f4 07 02 36 	ld.d	r6,r10[r7<<0x3]
800305ee:	0c 9a       	mov	r10,r6
800305f0:	0e 9b       	mov	r11,r7
800305f2:	e0 a0 02 45 	rcall	80030a7c <__avr32_f64_add>
800305f6:	0c 98       	mov	r8,r6
800305f8:	fa eb 00 00 	st.d	sp[0],r10
800305fc:	0e 99       	mov	r9,r7
800305fe:	fa ea 00 00 	ld.d	r10,sp[0]
80030602:	c6 fd       	rcall	800308e0 <__avr32_f64_sub>
80030604:	14 94       	mov	r4,r10
80030606:	16 95       	mov	r5,r11
80030608:	08 9a       	mov	r10,r4
8003060a:	0a 9b       	mov	r11,r5
8003060c:	2f ed       	sub	sp,-8
8003060e:	d8 22       	popm	r4-r7,pc
80030610:	80 03       	ld.sh	r3,r0[0x0]
80030612:	1f d0       	ld.ub	r0,pc[0x5]

80030614 <scalbn>:
80030614:	d4 21       	pushm	r4-r7,lr
80030616:	18 97       	mov	r7,r12
80030618:	14 98       	mov	r8,r10
8003061a:	16 99       	mov	r9,r11
8003061c:	14 94       	mov	r4,r10
8003061e:	16 95       	mov	r5,r11
80030620:	14 96       	mov	r6,r10
80030622:	16 9c       	mov	r12,r11
80030624:	fd db c2 8b 	bfextu	lr,r11,0x14,0xb
80030628:	c1 11       	brne	8003064a <scalbn+0x36>
8003062a:	f9 db c0 1f 	bfextu	r12,r11,0x0,0x1f
8003062e:	14 4c       	or	r12,r10
80030630:	c5 c0       	breq	800306e8 <scalbn+0xd4>
80030632:	30 08       	mov	r8,0
80030634:	fc 19 43 50 	movh	r9,0x4350
80030638:	c6 8c       	rcall	80030708 <__avr32_f64_mul>
8003063a:	16 99       	mov	r9,r11
8003063c:	14 98       	mov	r8,r10
8003063e:	14 94       	mov	r4,r10
80030640:	12 95       	mov	r5,r9
80030642:	fe 57 3c b0 	cp.w	r7,-50000
80030646:	c0 84       	brge	80030656 <scalbn+0x42>
80030648:	c3 a8       	rjmp	800306bc <scalbn+0xa8>
8003064a:	e0 4e 07 ff 	cp.w	lr,2047
8003064e:	c0 81       	brne	8003065e <scalbn+0x4a>
80030650:	e0 a0 02 16 	rcall	80030a7c <__avr32_f64_add>
80030654:	c4 88       	rjmp	800306e4 <scalbn+0xd0>
80030656:	fd d9 c2 8b 	bfextu	lr,r9,0x14,0xb
8003065a:	12 9c       	mov	r12,r9
8003065c:	23 6e       	sub	lr,54
8003065e:	0e 0e       	add	lr,r7
80030660:	e0 4e 07 fe 	cp.w	lr,2046
80030664:	e0 89 00 11 	brgt	80030686 <scalbn+0x72>
80030668:	58 0e       	cp.w	lr,0
8003066a:	e0 8a 00 07 	brle	80030678 <scalbn+0x64>
8003066e:	e4 1c 80 0f 	andh	r12,0x800f
80030672:	f9 ee 11 49 	or	r9,r12,lr<<0x14
80030676:	c3 98       	rjmp	800306e8 <scalbn+0xd4>
80030678:	fe 5e ff cb 	cp.w	lr,-53
8003067c:	c2 94       	brge	800306ce <scalbn+0xba>
8003067e:	e0 47 c3 50 	cp.w	r7,50000
80030682:	e0 8a 00 14 	brle	800306aa <scalbn+0x96>
80030686:	e0 6a 75 9c 	mov	r10,30108
8003068a:	ea 1a 88 00 	orh	r10,0x8800
8003068e:	e0 6b e4 3c 	mov	r11,58428
80030692:	ea 1b 7e 37 	orh	r11,0x7e37
80030696:	c2 dc       	rcall	800306f0 <copysign>
80030698:	e0 68 75 9c 	mov	r8,30108
8003069c:	ea 18 88 00 	orh	r8,0x8800
800306a0:	e0 69 e4 3c 	mov	r9,58428
800306a4:	ea 19 7e 37 	orh	r9,0x7e37
800306a8:	c1 d8       	rjmp	800306e2 <scalbn+0xce>
800306aa:	e0 6a f3 59 	mov	r10,62297
800306ae:	ea 1a c2 f8 	orh	r10,0xc2f8
800306b2:	e0 6b 6e 1f 	mov	r11,28191
800306b6:	ea 1b 01 a5 	orh	r11,0x1a5
800306ba:	c1 bc       	rcall	800306f0 <copysign>
800306bc:	e0 68 f3 59 	mov	r8,62297
800306c0:	ea 18 c2 f8 	orh	r8,0xc2f8
800306c4:	e0 69 6e 1f 	mov	r9,28191
800306c8:	ea 19 01 a5 	orh	r9,0x1a5
800306cc:	c0 b8       	rjmp	800306e2 <scalbn+0xce>
800306ce:	2c ae       	sub	lr,-54
800306d0:	e4 1c 80 0f 	andh	r12,0x800f
800306d4:	f9 ee 11 49 	or	r9,r12,lr<<0x14
800306d8:	10 9a       	mov	r10,r8
800306da:	12 9b       	mov	r11,r9
800306dc:	30 08       	mov	r8,0
800306de:	fc 19 3c 90 	movh	r9,0x3c90
800306e2:	c1 3c       	rcall	80030708 <__avr32_f64_mul>
800306e4:	14 98       	mov	r8,r10
800306e6:	16 99       	mov	r9,r11
800306e8:	10 9a       	mov	r10,r8
800306ea:	12 9b       	mov	r11,r9
800306ec:	d8 22       	popm	r4-r7,pc
800306ee:	d7 03       	nop

800306f0 <copysign>:
800306f0:	d4 21       	pushm	r4-r7,lr
800306f2:	e6 19 80 00 	andh	r9,0x8000,COH
800306f6:	16 95       	mov	r5,r11
800306f8:	14 94       	mov	r4,r10
800306fa:	14 96       	mov	r6,r10
800306fc:	f7 db c0 1f 	bfextu	r11,r11,0x0,0x1f
80030700:	f3 eb 10 0b 	or	r11,r9,r11
80030704:	16 97       	mov	r7,r11
80030706:	d8 22       	popm	r4-r7,pc

80030708 <__avr32_f64_mul>:
80030708:	f5 eb 10 1c 	or	r12,r10,r11<<0x1
8003070c:	e0 80 00 dc 	breq	800308c4 <__avr32_f64_mul_op1_zero>
80030710:	d4 21       	pushm	r4-r7,lr
80030712:	f7 e9 20 0e 	eor	lr,r11,r9
80030716:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
8003071a:	30 15       	mov	r5,1
8003071c:	c4 30       	breq	800307a2 <__avr32_f64_mul_op1_subnormal>
8003071e:	ab 6b       	lsl	r11,0xa
80030720:	f7 ea 13 6b 	or	r11,r11,r10>>0x16
80030724:	ab 6a       	lsl	r10,0xa
80030726:	f7 d5 d3 c2 	bfins	r11,r5,0x1e,0x2
8003072a:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
8003072e:	c5 c0       	breq	800307e6 <__avr32_f64_mul_op2_subnormal>
80030730:	a1 78       	lsl	r8,0x1
80030732:	5c f9       	rol	r9
80030734:	f3 d5 d2 ab 	bfins	r9,r5,0x15,0xb
80030738:	e0 47 07 ff 	cp.w	r7,2047
8003073c:	c7 70       	breq	8003082a <__avr32_f64_mul_op_nan_or_inf>
8003073e:	e0 46 07 ff 	cp.w	r6,2047
80030742:	c7 40       	breq	8003082a <__avr32_f64_mul_op_nan_or_inf>
80030744:	ee 06 00 0c 	add	r12,r7,r6
80030748:	e0 2c 03 fe 	sub	r12,1022
8003074c:	f6 08 06 44 	mulu.d	r4,r11,r8
80030750:	f4 09 07 44 	macu.d	r4,r10,r9
80030754:	f4 08 06 46 	mulu.d	r6,r10,r8
80030758:	f6 09 06 4a 	mulu.d	r10,r11,r9
8003075c:	08 07       	add	r7,r4
8003075e:	f4 05 00 4a 	adc	r10,r10,r5
80030762:	5c 0b       	acr	r11
80030764:	ed bb 00 14 	bld	r11,0x14
80030768:	c0 50       	breq	80030772 <__avr32_f64_mul+0x6a>
8003076a:	a1 77       	lsl	r7,0x1
8003076c:	5c fa       	rol	r10
8003076e:	5c fb       	rol	r11
80030770:	20 1c       	sub	r12,1
80030772:	58 0c       	cp.w	r12,0
80030774:	e0 8a 00 6f 	brle	80030852 <__avr32_f64_mul_res_subnormal>
80030778:	e0 4c 07 ff 	cp.w	r12,2047
8003077c:	e0 84 00 9c 	brge	800308b4 <__avr32_f64_mul_res_inf>
80030780:	f7 dc d2 8b 	bfins	r11,r12,0x14,0xb
80030784:	ed ea 11 f6 	or	r6,r6,r10<<0x1f
80030788:	ef e6 12 17 	or	r7,r7,r6>>0x1
8003078c:	ee 17 80 00 	eorh	r7,0x8000
80030790:	f1 b7 04 20 	satu	r7,0x1
80030794:	0e 0a       	add	r10,r7
80030796:	5c 0b       	acr	r11
80030798:	ed be 00 1f 	bld	lr,0x1f
8003079c:	ef bb 00 1f 	bst	r11,0x1f
800307a0:	d8 22       	popm	r4-r7,pc

800307a2 <__avr32_f64_mul_op1_subnormal>:
800307a2:	e4 1b 00 0f 	andh	r11,0xf
800307a6:	f4 0c 12 00 	clz	r12,r10
800307aa:	f6 06 12 00 	clz	r6,r11
800307ae:	f7 bc 03 e1 	sublo	r12,-31
800307b2:	f8 06 17 30 	movlo	r6,r12
800307b6:	f7 b6 02 01 	subhs	r6,1
800307ba:	e0 46 00 20 	cp.w	r6,32
800307be:	c0 d4       	brge	800307d8 <__avr32_f64_mul_op1_subnormal+0x36>
800307c0:	ec 0c 11 20 	rsub	r12,r6,32
800307c4:	f6 06 09 4b 	lsl	r11,r11,r6
800307c8:	f4 0c 0a 4c 	lsr	r12,r10,r12
800307cc:	18 4b       	or	r11,r12
800307ce:	f4 06 09 4a 	lsl	r10,r10,r6
800307d2:	20 b6       	sub	r6,11
800307d4:	0c 17       	sub	r7,r6
800307d6:	ca ab       	rjmp	8003072a <__avr32_f64_mul+0x22>
800307d8:	f4 06 09 4b 	lsl	r11,r10,r6
800307dc:	c6 40       	breq	800308a4 <__avr32_f64_mul_res_zero>
800307de:	30 0a       	mov	r10,0
800307e0:	20 b6       	sub	r6,11
800307e2:	0c 17       	sub	r7,r6
800307e4:	ca 3b       	rjmp	8003072a <__avr32_f64_mul+0x22>

800307e6 <__avr32_f64_mul_op2_subnormal>:
800307e6:	e4 19 00 0f 	andh	r9,0xf
800307ea:	f0 0c 12 00 	clz	r12,r8
800307ee:	f2 05 12 00 	clz	r5,r9
800307f2:	f7 bc 03 ea 	sublo	r12,-22
800307f6:	f8 05 17 30 	movlo	r5,r12
800307fa:	f7 b5 02 0a 	subhs	r5,10
800307fe:	e0 45 00 20 	cp.w	r5,32
80030802:	c0 d4       	brge	8003081c <__avr32_f64_mul_op2_subnormal+0x36>
80030804:	ea 0c 11 20 	rsub	r12,r5,32
80030808:	f2 05 09 49 	lsl	r9,r9,r5
8003080c:	f0 0c 0a 4c 	lsr	r12,r8,r12
80030810:	18 49       	or	r9,r12
80030812:	f0 05 09 48 	lsl	r8,r8,r5
80030816:	20 25       	sub	r5,2
80030818:	0a 16       	sub	r6,r5
8003081a:	c8 fb       	rjmp	80030738 <__avr32_f64_mul+0x30>
8003081c:	f0 05 09 49 	lsl	r9,r8,r5
80030820:	c4 20       	breq	800308a4 <__avr32_f64_mul_res_zero>
80030822:	30 08       	mov	r8,0
80030824:	20 25       	sub	r5,2
80030826:	0a 16       	sub	r6,r5
80030828:	c8 8b       	rjmp	80030738 <__avr32_f64_mul+0x30>

8003082a <__avr32_f64_mul_op_nan_or_inf>:
8003082a:	e4 19 00 0f 	andh	r9,0xf
8003082e:	e4 1b 00 0f 	andh	r11,0xf
80030832:	14 4b       	or	r11,r10
80030834:	10 49       	or	r9,r8
80030836:	e0 47 07 ff 	cp.w	r7,2047
8003083a:	c0 91       	brne	8003084c <__avr32_f64_mul_op1_not_naninf>
8003083c:	58 0b       	cp.w	r11,0
8003083e:	c3 81       	brne	800308ae <__avr32_f64_mul_res_nan>
80030840:	e0 46 07 ff 	cp.w	r6,2047
80030844:	c3 81       	brne	800308b4 <__avr32_f64_mul_res_inf>
80030846:	58 09       	cp.w	r9,0
80030848:	c3 60       	breq	800308b4 <__avr32_f64_mul_res_inf>
8003084a:	c3 28       	rjmp	800308ae <__avr32_f64_mul_res_nan>

8003084c <__avr32_f64_mul_op1_not_naninf>:
8003084c:	58 09       	cp.w	r9,0
8003084e:	c3 30       	breq	800308b4 <__avr32_f64_mul_res_inf>
80030850:	c2 f8       	rjmp	800308ae <__avr32_f64_mul_res_nan>

80030852 <__avr32_f64_mul_res_subnormal>:
80030852:	5c 3c       	neg	r12
80030854:	2f fc       	sub	r12,-1
80030856:	f1 bc 04 c0 	satu	r12,0x6
8003085a:	e0 4c 00 20 	cp.w	r12,32
8003085e:	c1 14       	brge	80030880 <__avr32_f64_mul_res_subnormal+0x2e>
80030860:	f8 08 11 20 	rsub	r8,r12,32
80030864:	0e 46       	or	r6,r7
80030866:	ee 0c 0a 47 	lsr	r7,r7,r12
8003086a:	f4 08 09 49 	lsl	r9,r10,r8
8003086e:	12 47       	or	r7,r9
80030870:	f4 0c 0a 4a 	lsr	r10,r10,r12
80030874:	f6 08 09 49 	lsl	r9,r11,r8
80030878:	12 4a       	or	r10,r9
8003087a:	f6 0c 0a 4b 	lsr	r11,r11,r12
8003087e:	c8 3b       	rjmp	80030784 <__avr32_f64_mul+0x7c>
80030880:	f8 08 11 20 	rsub	r8,r12,32
80030884:	f9 b9 00 00 	moveq	r9,0
80030888:	c0 30       	breq	8003088e <__avr32_f64_mul_res_subnormal+0x3c>
8003088a:	f6 08 09 49 	lsl	r9,r11,r8
8003088e:	0e 46       	or	r6,r7
80030890:	ed ea 10 16 	or	r6,r6,r10<<0x1
80030894:	f4 0c 0a 4a 	lsr	r10,r10,r12
80030898:	f3 ea 10 07 	or	r7,r9,r10
8003089c:	f6 0c 0a 4a 	lsr	r10,r11,r12
800308a0:	30 0b       	mov	r11,0
800308a2:	c7 1b       	rjmp	80030784 <__avr32_f64_mul+0x7c>

800308a4 <__avr32_f64_mul_res_zero>:
800308a4:	1c 9b       	mov	r11,lr
800308a6:	e6 1b 80 00 	andh	r11,0x8000,COH
800308aa:	30 0a       	mov	r10,0
800308ac:	d8 22       	popm	r4-r7,pc

800308ae <__avr32_f64_mul_res_nan>:
800308ae:	3f fb       	mov	r11,-1
800308b0:	3f fa       	mov	r10,-1
800308b2:	d8 22       	popm	r4-r7,pc

800308b4 <__avr32_f64_mul_res_inf>:
800308b4:	f0 6b 00 00 	mov	r11,-1048576
800308b8:	ed be 00 1f 	bld	lr,0x1f
800308bc:	ef bb 00 1f 	bst	r11,0x1f
800308c0:	30 0a       	mov	r10,0
800308c2:	d8 22       	popm	r4-r7,pc

800308c4 <__avr32_f64_mul_op1_zero>:
800308c4:	f7 e9 20 0b 	eor	r11,r11,r9
800308c8:	e6 1b 80 00 	andh	r11,0x8000,COH
800308cc:	f9 d9 c2 8b 	bfextu	r12,r9,0x14,0xb
800308d0:	e0 4c 07 ff 	cp.w	r12,2047
800308d4:	5e 1c       	retne	r12
800308d6:	3f fa       	mov	r10,-1
800308d8:	3f fb       	mov	r11,-1
800308da:	5e fc       	retal	r12

800308dc <__avr32_f64_sub_from_add>:
800308dc:	ee 19 80 00 	eorh	r9,0x8000

800308e0 <__avr32_f64_sub>:
800308e0:	f7 e9 20 0c 	eor	r12,r11,r9
800308e4:	e0 86 00 ca 	brmi	80030a78 <__avr32_f64_add_from_sub>
800308e8:	eb cd 40 e0 	pushm	r5-r7,lr
800308ec:	16 9c       	mov	r12,r11
800308ee:	e6 1c 80 00 	andh	r12,0x8000,COH
800308f2:	bf db       	cbr	r11,0x1f
800308f4:	bf d9       	cbr	r9,0x1f
800308f6:	10 3a       	cp.w	r10,r8
800308f8:	f2 0b 13 00 	cpc	r11,r9
800308fc:	c0 92       	brcc	8003090e <__avr32_f64_sub+0x2e>
800308fe:	16 97       	mov	r7,r11
80030900:	12 9b       	mov	r11,r9
80030902:	0e 99       	mov	r9,r7
80030904:	14 97       	mov	r7,r10
80030906:	10 9a       	mov	r10,r8
80030908:	0e 98       	mov	r8,r7
8003090a:	ee 1c 80 00 	eorh	r12,0x8000
8003090e:	f6 07 16 14 	lsr	r7,r11,0x14
80030912:	ab 7b       	lsl	r11,0xb
80030914:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
80030918:	ab 7a       	lsl	r10,0xb
8003091a:	bf bb       	sbr	r11,0x1f
8003091c:	f2 06 16 14 	lsr	r6,r9,0x14
80030920:	c4 40       	breq	800309a8 <__avr32_f64_sub_opL_subnormal>
80030922:	ab 79       	lsl	r9,0xb
80030924:	f3 e8 13 59 	or	r9,r9,r8>>0x15
80030928:	ab 78       	lsl	r8,0xb
8003092a:	bf b9       	sbr	r9,0x1f

8003092c <__avr32_f64_sub_opL_subnormal_done>:
8003092c:	e0 47 07 ff 	cp.w	r7,2047
80030930:	c4 f0       	breq	800309ce <__avr32_f64_sub_opH_nan_or_inf>
80030932:	0e 26       	rsub	r6,r7
80030934:	c1 20       	breq	80030958 <__avr32_f64_sub_shift_done>
80030936:	ec 05 11 20 	rsub	r5,r6,32
8003093a:	e0 46 00 20 	cp.w	r6,32
8003093e:	c7 c2       	brcc	80030a36 <__avr32_f64_sub_longshift>
80030940:	f0 05 09 4e 	lsl	lr,r8,r5
80030944:	f2 05 09 45 	lsl	r5,r9,r5
80030948:	f0 06 0a 48 	lsr	r8,r8,r6
8003094c:	f2 06 0a 49 	lsr	r9,r9,r6
80030950:	0a 48       	or	r8,r5
80030952:	58 0e       	cp.w	lr,0
80030954:	5f 1e       	srne	lr
80030956:	1c 48       	or	r8,lr

80030958 <__avr32_f64_sub_shift_done>:
80030958:	10 1a       	sub	r10,r8
8003095a:	f6 09 01 4b 	sbc	r11,r11,r9
8003095e:	f6 06 12 00 	clz	r6,r11
80030962:	c0 e0       	breq	8003097e <__avr32_f64_sub_longnormalize_done>
80030964:	c7 83       	brcs	80030a54 <__avr32_f64_sub_longnormalize>
80030966:	ec 0e 11 20 	rsub	lr,r6,32
8003096a:	f6 06 09 4b 	lsl	r11,r11,r6
8003096e:	f4 0e 0a 4e 	lsr	lr,r10,lr
80030972:	1c 4b       	or	r11,lr
80030974:	f4 06 09 4a 	lsl	r10,r10,r6
80030978:	0c 17       	sub	r7,r6
8003097a:	e0 8a 00 39 	brle	800309ec <__avr32_f64_sub_subnormal_result>

8003097e <__avr32_f64_sub_longnormalize_done>:
8003097e:	f4 09 15 15 	lsl	r9,r10,0x15
80030982:	ab 9a       	lsr	r10,0xb
80030984:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
80030988:	ab 9b       	lsr	r11,0xb
8003098a:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
8003098e:	18 4b       	or	r11,r12

80030990 <__avr32_f64_sub_round>:
80030990:	fc 17 80 00 	movh	r7,0x8000
80030994:	ed ba 00 00 	bld	r10,0x0
80030998:	f7 b7 01 ff 	subne	r7,-1
8003099c:	0e 39       	cp.w	r9,r7
8003099e:	5f 29       	srhs	r9
800309a0:	12 0a       	add	r10,r9
800309a2:	5c 0b       	acr	r11
800309a4:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800309a8 <__avr32_f64_sub_opL_subnormal>:
800309a8:	ab 79       	lsl	r9,0xb
800309aa:	f3 e8 13 59 	or	r9,r9,r8>>0x15
800309ae:	ab 78       	lsl	r8,0xb
800309b0:	f3 e8 10 0e 	or	lr,r9,r8
800309b4:	f9 b6 01 01 	movne	r6,1
800309b8:	ee 0e 11 00 	rsub	lr,r7,0
800309bc:	f9 b7 00 01 	moveq	r7,1
800309c0:	ef bb 00 1f 	bst	r11,0x1f
800309c4:	f7 ea 10 0e 	or	lr,r11,r10
800309c8:	f9 b7 00 00 	moveq	r7,0
800309cc:	cb 0b       	rjmp	8003092c <__avr32_f64_sub_opL_subnormal_done>

800309ce <__avr32_f64_sub_opH_nan_or_inf>:
800309ce:	bf db       	cbr	r11,0x1f
800309d0:	f7 ea 10 0e 	or	lr,r11,r10
800309d4:	c0 81       	brne	800309e4 <__avr32_f64_sub_return_nan>
800309d6:	e0 46 07 ff 	cp.w	r6,2047
800309da:	c0 50       	breq	800309e4 <__avr32_f64_sub_return_nan>
800309dc:	f9 e7 11 4b 	or	r11,r12,r7<<0x14
800309e0:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800309e4 <__avr32_f64_sub_return_nan>:
800309e4:	3f fa       	mov	r10,-1
800309e6:	3f fb       	mov	r11,-1
800309e8:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800309ec <__avr32_f64_sub_subnormal_result>:
800309ec:	5c 37       	neg	r7
800309ee:	2f f7       	sub	r7,-1
800309f0:	f1 b7 04 c0 	satu	r7,0x6
800309f4:	e0 47 00 20 	cp.w	r7,32
800309f8:	c1 14       	brge	80030a1a <__avr32_f64_sub_subnormal_result+0x2e>
800309fa:	ee 08 11 20 	rsub	r8,r7,32
800309fe:	f4 08 09 49 	lsl	r9,r10,r8
80030a02:	5f 16       	srne	r6
80030a04:	f4 07 0a 4a 	lsr	r10,r10,r7
80030a08:	0c 4a       	or	r10,r6
80030a0a:	f6 08 09 49 	lsl	r9,r11,r8
80030a0e:	f5 e9 10 0a 	or	r10,r10,r9
80030a12:	f4 07 0a 4b 	lsr	r11,r10,r7
80030a16:	30 07       	mov	r7,0
80030a18:	cb 3b       	rjmp	8003097e <__avr32_f64_sub_longnormalize_done>
80030a1a:	ee 08 11 40 	rsub	r8,r7,64
80030a1e:	f6 08 09 49 	lsl	r9,r11,r8
80030a22:	14 49       	or	r9,r10
80030a24:	5f 16       	srne	r6
80030a26:	f6 07 0a 4a 	lsr	r10,r11,r7
80030a2a:	0c 4a       	or	r10,r6
80030a2c:	30 0b       	mov	r11,0
80030a2e:	30 07       	mov	r7,0
80030a30:	ca 7b       	rjmp	8003097e <__avr32_f64_sub_longnormalize_done>
80030a32:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80030a36 <__avr32_f64_sub_longshift>:
80030a36:	f1 b6 04 c0 	satu	r6,0x6
80030a3a:	f0 0e 17 00 	moveq	lr,r8
80030a3e:	c0 40       	breq	80030a46 <__avr32_f64_sub_longshift+0x10>
80030a40:	f2 05 09 4e 	lsl	lr,r9,r5
80030a44:	10 4e       	or	lr,r8
80030a46:	f2 06 0a 48 	lsr	r8,r9,r6
80030a4a:	30 09       	mov	r9,0
80030a4c:	58 0e       	cp.w	lr,0
80030a4e:	5f 1e       	srne	lr
80030a50:	1c 48       	or	r8,lr
80030a52:	c8 3b       	rjmp	80030958 <__avr32_f64_sub_shift_done>

80030a54 <__avr32_f64_sub_longnormalize>:
80030a54:	f4 06 12 00 	clz	r6,r10
80030a58:	f9 b7 03 00 	movlo	r7,0
80030a5c:	f9 b6 03 00 	movlo	r6,0
80030a60:	f9 bc 03 00 	movlo	r12,0
80030a64:	f7 b6 02 e0 	subhs	r6,-32
80030a68:	f4 06 09 4b 	lsl	r11,r10,r6
80030a6c:	30 0a       	mov	r10,0
80030a6e:	0c 17       	sub	r7,r6
80030a70:	fe 9a ff be 	brle	800309ec <__avr32_f64_sub_subnormal_result>
80030a74:	c8 5b       	rjmp	8003097e <__avr32_f64_sub_longnormalize_done>
80030a76:	d7 03       	nop

80030a78 <__avr32_f64_add_from_sub>:
80030a78:	ee 19 80 00 	eorh	r9,0x8000

80030a7c <__avr32_f64_add>:
80030a7c:	f7 e9 20 0c 	eor	r12,r11,r9
80030a80:	fe 96 ff 2e 	brmi	800308dc <__avr32_f64_sub_from_add>
80030a84:	eb cd 40 e0 	pushm	r5-r7,lr
80030a88:	16 9c       	mov	r12,r11
80030a8a:	e6 1c 80 00 	andh	r12,0x8000,COH
80030a8e:	bf db       	cbr	r11,0x1f
80030a90:	bf d9       	cbr	r9,0x1f
80030a92:	12 3b       	cp.w	r11,r9
80030a94:	c0 72       	brcc	80030aa2 <__avr32_f64_add+0x26>
80030a96:	16 97       	mov	r7,r11
80030a98:	12 9b       	mov	r11,r9
80030a9a:	0e 99       	mov	r9,r7
80030a9c:	14 97       	mov	r7,r10
80030a9e:	10 9a       	mov	r10,r8
80030aa0:	0e 98       	mov	r8,r7
80030aa2:	30 0e       	mov	lr,0
80030aa4:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
80030aa8:	f7 db c0 14 	bfextu	r11,r11,0x0,0x14
80030aac:	b5 ab       	sbr	r11,0x14
80030aae:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
80030ab2:	c6 20       	breq	80030b76 <__avr32_f64_add_op2_subnormal>
80030ab4:	f3 d9 c0 14 	bfextu	r9,r9,0x0,0x14
80030ab8:	b5 a9       	sbr	r9,0x14
80030aba:	e0 47 07 ff 	cp.w	r7,2047
80030abe:	c2 80       	breq	80030b0e <__avr32_f64_add_opH_nan_or_inf>
80030ac0:	0e 26       	rsub	r6,r7
80030ac2:	c1 20       	breq	80030ae6 <__avr32_f64_add_shift_done>
80030ac4:	e0 46 00 36 	cp.w	r6,54
80030ac8:	c1 52       	brcc	80030af2 <__avr32_f64_add_res_of_done>
80030aca:	ec 05 11 20 	rsub	r5,r6,32
80030ace:	e0 46 00 20 	cp.w	r6,32
80030ad2:	c3 52       	brcc	80030b3c <__avr32_f64_add_longshift>
80030ad4:	f0 05 09 4e 	lsl	lr,r8,r5
80030ad8:	f2 05 09 45 	lsl	r5,r9,r5
80030adc:	f0 06 0a 48 	lsr	r8,r8,r6
80030ae0:	f2 06 0a 49 	lsr	r9,r9,r6
80030ae4:	0a 48       	or	r8,r5

80030ae6 <__avr32_f64_add_shift_done>:
80030ae6:	10 0a       	add	r10,r8
80030ae8:	f6 09 00 4b 	adc	r11,r11,r9
80030aec:	ed bb 00 15 	bld	r11,0x15
80030af0:	c3 40       	breq	80030b58 <__avr32_f64_add_res_of>

80030af2 <__avr32_f64_add_res_of_done>:
80030af2:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
80030af6:	18 4b       	or	r11,r12

80030af8 <__avr32_f64_add_round>:
80030af8:	f9 da c0 01 	bfextu	r12,r10,0x0,0x1
80030afc:	18 4e       	or	lr,r12
80030afe:	ee 1e 80 00 	eorh	lr,0x8000
80030b02:	f1 be 04 20 	satu	lr,0x1
80030b06:	1c 0a       	add	r10,lr
80030b08:	5c 0b       	acr	r11
80030b0a:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80030b0e <__avr32_f64_add_opH_nan_or_inf>:
80030b0e:	b5 cb       	cbr	r11,0x14
80030b10:	f7 ea 10 0e 	or	lr,r11,r10
80030b14:	c1 01       	brne	80030b34 <__avr32_f64_add_return_nan>
80030b16:	e0 46 07 ff 	cp.w	r6,2047
80030b1a:	c0 30       	breq	80030b20 <__avr32_f64_add_opL_nan_or_inf>
80030b1c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80030b20 <__avr32_f64_add_opL_nan_or_inf>:
80030b20:	b5 c9       	cbr	r9,0x14
80030b22:	f3 e8 10 0e 	or	lr,r9,r8
80030b26:	c0 71       	brne	80030b34 <__avr32_f64_add_return_nan>
80030b28:	30 0a       	mov	r10,0
80030b2a:	fc 1b 7f f0 	movh	r11,0x7ff0
80030b2e:	18 4b       	or	r11,r12
80030b30:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80030b34 <__avr32_f64_add_return_nan>:
80030b34:	3f fa       	mov	r10,-1
80030b36:	3f fb       	mov	r11,-1
80030b38:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80030b3c <__avr32_f64_add_longshift>:
80030b3c:	f1 b6 04 c0 	satu	r6,0x6
80030b40:	f0 0e 17 00 	moveq	lr,r8
80030b44:	c0 60       	breq	80030b50 <__avr32_f64_add_longshift+0x14>
80030b46:	f2 05 09 4e 	lsl	lr,r9,r5
80030b4a:	58 08       	cp.w	r8,0
80030b4c:	5f 18       	srne	r8
80030b4e:	10 4e       	or	lr,r8
80030b50:	f2 06 0a 48 	lsr	r8,r9,r6
80030b54:	30 09       	mov	r9,0
80030b56:	cc 8b       	rjmp	80030ae6 <__avr32_f64_add_shift_done>

80030b58 <__avr32_f64_add_res_of>:
80030b58:	fd ee 10 1e 	or	lr,lr,lr<<0x1
80030b5c:	a1 9b       	lsr	r11,0x1
80030b5e:	5d 0a       	ror	r10
80030b60:	5d 0e       	ror	lr
80030b62:	2f f7       	sub	r7,-1
80030b64:	e0 47 07 ff 	cp.w	r7,2047
80030b68:	f9 ba 00 00 	moveq	r10,0
80030b6c:	f9 bb 00 00 	moveq	r11,0
80030b70:	f9 be 00 00 	moveq	lr,0
80030b74:	cb fb       	rjmp	80030af2 <__avr32_f64_add_res_of_done>

80030b76 <__avr32_f64_add_op2_subnormal>:
80030b76:	30 16       	mov	r6,1
80030b78:	58 07       	cp.w	r7,0
80030b7a:	ca 01       	brne	80030aba <__avr32_f64_add+0x3e>
80030b7c:	b5 cb       	cbr	r11,0x14
80030b7e:	10 0a       	add	r10,r8
80030b80:	f6 09 00 4b 	adc	r11,r11,r9
80030b84:	18 4b       	or	r11,r12
80030b86:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80030b8a:	d7 03       	nop

80030b8c <__avr32_f64_to_u32>:
80030b8c:	58 0b       	cp.w	r11,0
80030b8e:	5e 6d       	retmi	0

80030b90 <__avr32_f64_to_s32>:
80030b90:	f6 0c 15 01 	lsl	r12,r11,0x1
80030b94:	b5 9c       	lsr	r12,0x15
80030b96:	e0 2c 03 ff 	sub	r12,1023
80030b9a:	5e 3d       	retlo	0
80030b9c:	f8 0c 11 1f 	rsub	r12,r12,31
80030ba0:	16 99       	mov	r9,r11
80030ba2:	ab 7b       	lsl	r11,0xb
80030ba4:	bf bb       	sbr	r11,0x1f
80030ba6:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
80030baa:	f6 0c 0a 4b 	lsr	r11,r11,r12
80030bae:	a1 79       	lsl	r9,0x1
80030bb0:	5e 2b       	reths	r11
80030bb2:	5c 3b       	neg	r11
80030bb4:	5e fb       	retal	r11

80030bb6 <__avr32_u32_to_f64>:
80030bb6:	f8 cb 00 00 	sub	r11,r12,0
80030bba:	30 0c       	mov	r12,0
80030bbc:	c0 38       	rjmp	80030bc2 <__avr32_s32_to_f64+0x4>

80030bbe <__avr32_s32_to_f64>:
80030bbe:	18 9b       	mov	r11,r12
80030bc0:	5c 4b       	abs	r11
80030bc2:	30 0a       	mov	r10,0
80030bc4:	5e 0b       	reteq	r11
80030bc6:	d4 01       	pushm	lr
80030bc8:	e0 69 04 1e 	mov	r9,1054
80030bcc:	f6 08 12 00 	clz	r8,r11
80030bd0:	c1 70       	breq	80030bfe <__avr32_s32_to_f64+0x40>
80030bd2:	c0 c3       	brcs	80030bea <__avr32_s32_to_f64+0x2c>
80030bd4:	f0 0e 11 20 	rsub	lr,r8,32
80030bd8:	f6 08 09 4b 	lsl	r11,r11,r8
80030bdc:	f4 0e 0a 4e 	lsr	lr,r10,lr
80030be0:	1c 4b       	or	r11,lr
80030be2:	f4 08 09 4a 	lsl	r10,r10,r8
80030be6:	10 19       	sub	r9,r8
80030be8:	c0 b8       	rjmp	80030bfe <__avr32_s32_to_f64+0x40>
80030bea:	f4 08 12 00 	clz	r8,r10
80030bee:	f9 b8 03 00 	movlo	r8,0
80030bf2:	f7 b8 02 e0 	subhs	r8,-32
80030bf6:	f4 08 09 4b 	lsl	r11,r10,r8
80030bfa:	30 0a       	mov	r10,0
80030bfc:	10 19       	sub	r9,r8
80030bfe:	58 09       	cp.w	r9,0
80030c00:	e0 89 00 30 	brgt	80030c60 <__avr32_s32_to_f64+0xa2>
80030c04:	5c 39       	neg	r9
80030c06:	2f f9       	sub	r9,-1
80030c08:	e0 49 00 36 	cp.w	r9,54
80030c0c:	c0 43       	brcs	80030c14 <__avr32_s32_to_f64+0x56>
80030c0e:	30 0b       	mov	r11,0
80030c10:	30 0a       	mov	r10,0
80030c12:	c2 68       	rjmp	80030c5e <__avr32_s32_to_f64+0xa0>
80030c14:	2f 69       	sub	r9,-10
80030c16:	f2 08 11 20 	rsub	r8,r9,32
80030c1a:	e0 49 00 20 	cp.w	r9,32
80030c1e:	c0 b2       	brcc	80030c34 <__avr32_s32_to_f64+0x76>
80030c20:	f4 08 09 4e 	lsl	lr,r10,r8
80030c24:	f6 08 09 48 	lsl	r8,r11,r8
80030c28:	f4 09 0a 4a 	lsr	r10,r10,r9
80030c2c:	f6 09 0a 4b 	lsr	r11,r11,r9
80030c30:	10 4b       	or	r11,r8
80030c32:	c0 88       	rjmp	80030c42 <__avr32_s32_to_f64+0x84>
80030c34:	f6 08 09 4e 	lsl	lr,r11,r8
80030c38:	14 4e       	or	lr,r10
80030c3a:	16 9a       	mov	r10,r11
80030c3c:	30 0b       	mov	r11,0
80030c3e:	f4 09 0a 4a 	lsr	r10,r10,r9
80030c42:	ed ba 00 00 	bld	r10,0x0
80030c46:	c0 92       	brcc	80030c58 <__avr32_s32_to_f64+0x9a>
80030c48:	1c 7e       	tst	lr,lr
80030c4a:	c0 41       	brne	80030c52 <__avr32_s32_to_f64+0x94>
80030c4c:	ed ba 00 01 	bld	r10,0x1
80030c50:	c0 42       	brcc	80030c58 <__avr32_s32_to_f64+0x9a>
80030c52:	2f fa       	sub	r10,-1
80030c54:	f7 bb 02 ff 	subhs	r11,-1
80030c58:	5c fc       	rol	r12
80030c5a:	5d 0b       	ror	r11
80030c5c:	5d 0a       	ror	r10
80030c5e:	d8 02       	popm	pc
80030c60:	e0 68 03 ff 	mov	r8,1023
80030c64:	ed ba 00 0b 	bld	r10,0xb
80030c68:	f7 b8 00 ff 	subeq	r8,-1
80030c6c:	10 0a       	add	r10,r8
80030c6e:	5c 0b       	acr	r11
80030c70:	f7 b9 03 fe 	sublo	r9,-2
80030c74:	e0 49 07 ff 	cp.w	r9,2047
80030c78:	c0 55       	brlt	80030c82 <__avr32_s32_to_f64+0xc4>
80030c7a:	30 0a       	mov	r10,0
80030c7c:	fc 1b ff e0 	movh	r11,0xffe0
80030c80:	c0 c8       	rjmp	80030c98 <__floatsidf_return_op1>
80030c82:	ed bb 00 1f 	bld	r11,0x1f
80030c86:	f7 b9 01 01 	subne	r9,1
80030c8a:	ab 9a       	lsr	r10,0xb
80030c8c:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
80030c90:	a1 7b       	lsl	r11,0x1
80030c92:	ab 9b       	lsr	r11,0xb
80030c94:	f7 e9 11 5b 	or	r11,r11,r9<<0x15

80030c98 <__floatsidf_return_op1>:
80030c98:	a1 7c       	lsl	r12,0x1
80030c9a:	5d 0b       	ror	r11
80030c9c:	d8 02       	popm	pc

80030c9e <__avr32_f64_cmp_eq>:
80030c9e:	10 3a       	cp.w	r10,r8
80030ca0:	f2 0b 13 00 	cpc	r11,r9
80030ca4:	c0 80       	breq	80030cb4 <__avr32_f64_cmp_eq+0x16>
80030ca6:	a1 7b       	lsl	r11,0x1
80030ca8:	a1 79       	lsl	r9,0x1
80030caa:	14 4b       	or	r11,r10
80030cac:	12 4b       	or	r11,r9
80030cae:	10 4b       	or	r11,r8
80030cb0:	5e 0f       	reteq	1
80030cb2:	5e fd       	retal	0
80030cb4:	a1 7b       	lsl	r11,0x1
80030cb6:	fc 1c ff e0 	movh	r12,0xffe0
80030cba:	58 0a       	cp.w	r10,0
80030cbc:	f8 0b 13 00 	cpc	r11,r12
80030cc0:	5e 8f       	retls	1
80030cc2:	5e fd       	retal	0

80030cc4 <__avr32_f64_cmp_ge>:
80030cc4:	1a de       	st.w	--sp,lr
80030cc6:	1a d7       	st.w	--sp,r7
80030cc8:	a1 7b       	lsl	r11,0x1
80030cca:	5f 3c       	srlo	r12
80030ccc:	a1 79       	lsl	r9,0x1
80030cce:	5f 37       	srlo	r7
80030cd0:	5c fc       	rol	r12
80030cd2:	fc 1e ff e0 	movh	lr,0xffe0
80030cd6:	58 0a       	cp.w	r10,0
80030cd8:	fc 0b 13 00 	cpc	r11,lr
80030cdc:	e0 8b 00 1d 	brhi	80030d16 <__avr32_f64_cmp_ge+0x52>
80030ce0:	58 08       	cp.w	r8,0
80030ce2:	fc 09 13 00 	cpc	r9,lr
80030ce6:	e0 8b 00 18 	brhi	80030d16 <__avr32_f64_cmp_ge+0x52>
80030cea:	58 0b       	cp.w	r11,0
80030cec:	f5 ba 00 00 	subfeq	r10,0
80030cf0:	c1 50       	breq	80030d1a <__avr32_f64_cmp_ge+0x56>
80030cf2:	1b 07       	ld.w	r7,sp++
80030cf4:	1b 0e       	ld.w	lr,sp++
80030cf6:	58 3c       	cp.w	r12,3
80030cf8:	c0 a0       	breq	80030d0c <__avr32_f64_cmp_ge+0x48>
80030cfa:	58 1c       	cp.w	r12,1
80030cfc:	c0 33       	brcs	80030d02 <__avr32_f64_cmp_ge+0x3e>
80030cfe:	5e 0f       	reteq	1
80030d00:	5e 1d       	retne	0
80030d02:	10 3a       	cp.w	r10,r8
80030d04:	f2 0b 13 00 	cpc	r11,r9
80030d08:	5e 2f       	reths	1
80030d0a:	5e 3d       	retlo	0
80030d0c:	14 38       	cp.w	r8,r10
80030d0e:	f6 09 13 00 	cpc	r9,r11
80030d12:	5e 2f       	reths	1
80030d14:	5e 3d       	retlo	0
80030d16:	1b 07       	ld.w	r7,sp++
80030d18:	d8 0a       	popm	pc,r12=0
80030d1a:	58 17       	cp.w	r7,1
80030d1c:	5f 0c       	sreq	r12
80030d1e:	58 09       	cp.w	r9,0
80030d20:	f5 b8 00 00 	subfeq	r8,0
80030d24:	1b 07       	ld.w	r7,sp++
80030d26:	1b 0e       	ld.w	lr,sp++
80030d28:	5e 0f       	reteq	1
80030d2a:	5e fc       	retal	r12

80030d2c <__avr32_f64_cmp_lt>:
80030d2c:	1a de       	st.w	--sp,lr
80030d2e:	1a d7       	st.w	--sp,r7
80030d30:	a1 7b       	lsl	r11,0x1
80030d32:	5f 3c       	srlo	r12
80030d34:	a1 79       	lsl	r9,0x1
80030d36:	5f 37       	srlo	r7
80030d38:	5c fc       	rol	r12
80030d3a:	fc 1e ff e0 	movh	lr,0xffe0
80030d3e:	58 0a       	cp.w	r10,0
80030d40:	fc 0b 13 00 	cpc	r11,lr
80030d44:	e0 8b 00 1d 	brhi	80030d7e <__avr32_f64_cmp_lt+0x52>
80030d48:	58 08       	cp.w	r8,0
80030d4a:	fc 09 13 00 	cpc	r9,lr
80030d4e:	e0 8b 00 18 	brhi	80030d7e <__avr32_f64_cmp_lt+0x52>
80030d52:	58 0b       	cp.w	r11,0
80030d54:	f5 ba 00 00 	subfeq	r10,0
80030d58:	c1 50       	breq	80030d82 <__avr32_f64_cmp_lt+0x56>
80030d5a:	1b 07       	ld.w	r7,sp++
80030d5c:	1b 0e       	ld.w	lr,sp++
80030d5e:	58 3c       	cp.w	r12,3
80030d60:	c0 a0       	breq	80030d74 <__avr32_f64_cmp_lt+0x48>
80030d62:	58 1c       	cp.w	r12,1
80030d64:	c0 33       	brcs	80030d6a <__avr32_f64_cmp_lt+0x3e>
80030d66:	5e 0d       	reteq	0
80030d68:	5e 1f       	retne	1
80030d6a:	10 3a       	cp.w	r10,r8
80030d6c:	f2 0b 13 00 	cpc	r11,r9
80030d70:	5e 2d       	reths	0
80030d72:	5e 3f       	retlo	1
80030d74:	14 38       	cp.w	r8,r10
80030d76:	f6 09 13 00 	cpc	r9,r11
80030d7a:	5e 2d       	reths	0
80030d7c:	5e 3f       	retlo	1
80030d7e:	1b 07       	ld.w	r7,sp++
80030d80:	d8 0a       	popm	pc,r12=0
80030d82:	58 17       	cp.w	r7,1
80030d84:	5f 1c       	srne	r12
80030d86:	58 09       	cp.w	r9,0
80030d88:	f5 b8 00 00 	subfeq	r8,0
80030d8c:	1b 07       	ld.w	r7,sp++
80030d8e:	1b 0e       	ld.w	lr,sp++
80030d90:	5e 0d       	reteq	0
80030d92:	5e fc       	retal	r12

80030d94 <__avr32_f64_div>:
80030d94:	eb cd 40 ff 	pushm	r0-r7,lr
80030d98:	f7 e9 20 0e 	eor	lr,r11,r9
80030d9c:	f6 07 16 14 	lsr	r7,r11,0x14
80030da0:	a9 7b       	lsl	r11,0x9
80030da2:	f7 ea 13 7b 	or	r11,r11,r10>>0x17
80030da6:	a9 7a       	lsl	r10,0x9
80030da8:	bd bb       	sbr	r11,0x1d
80030daa:	e4 1b 3f ff 	andh	r11,0x3fff
80030dae:	ab d7       	cbr	r7,0xb
80030db0:	e0 80 00 cc 	breq	80030f48 <__avr32_f64_div_round_subnormal+0x54>
80030db4:	e0 47 07 ff 	cp.w	r7,2047
80030db8:	e0 84 00 b5 	brge	80030f22 <__avr32_f64_div_round_subnormal+0x2e>
80030dbc:	f2 06 16 14 	lsr	r6,r9,0x14
80030dc0:	a9 79       	lsl	r9,0x9
80030dc2:	f3 e8 13 79 	or	r9,r9,r8>>0x17
80030dc6:	a9 78       	lsl	r8,0x9
80030dc8:	bd b9       	sbr	r9,0x1d
80030dca:	e4 19 3f ff 	andh	r9,0x3fff
80030dce:	ab d6       	cbr	r6,0xb
80030dd0:	e0 80 00 e2 	breq	80030f94 <__avr32_f64_div_round_subnormal+0xa0>
80030dd4:	e0 46 07 ff 	cp.w	r6,2047
80030dd8:	e0 84 00 b2 	brge	80030f3c <__avr32_f64_div_round_subnormal+0x48>
80030ddc:	0c 17       	sub	r7,r6
80030dde:	fe 37 fc 01 	sub	r7,-1023
80030de2:	fc 1c 80 00 	movh	r12,0x8000
80030de6:	f8 03 16 01 	lsr	r3,r12,0x1
80030dea:	e9 d9 c3 62 	bfextu	r4,r9,0x1b,0x2
80030dee:	5c d4       	com	r4
80030df0:	e7 d4 d3 82 	bfins	r3,r4,0x1c,0x2
80030df4:	e6 09 06 44 	mulu.d	r4,r3,r9
80030df8:	f8 05 01 25 	sub	r5,r12,r5<<0x2
80030dfc:	e6 05 06 44 	mulu.d	r4,r3,r5
80030e00:	ea 03 15 02 	lsl	r3,r5,0x2
80030e04:	e6 09 06 44 	mulu.d	r4,r3,r9
80030e08:	f8 05 01 25 	sub	r5,r12,r5<<0x2
80030e0c:	e6 05 06 44 	mulu.d	r4,r3,r5
80030e10:	ea 03 15 02 	lsl	r3,r5,0x2
80030e14:	e6 09 06 44 	mulu.d	r4,r3,r9
80030e18:	f8 05 01 25 	sub	r5,r12,r5<<0x2
80030e1c:	e6 05 06 44 	mulu.d	r4,r3,r5
80030e20:	ea 03 15 02 	lsl	r3,r5,0x2
80030e24:	e6 08 06 40 	mulu.d	r0,r3,r8
80030e28:	e4 09 07 40 	macu.d	r0,r2,r9
80030e2c:	e6 09 06 44 	mulu.d	r4,r3,r9
80030e30:	02 04       	add	r4,r1
80030e32:	5c 05       	acr	r5
80030e34:	a3 65       	lsl	r5,0x2
80030e36:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
80030e3a:	a3 64       	lsl	r4,0x2
80030e3c:	5c 34       	neg	r4
80030e3e:	f8 05 01 45 	sbc	r5,r12,r5
80030e42:	e6 04 06 40 	mulu.d	r0,r3,r4
80030e46:	e4 05 07 40 	macu.d	r0,r2,r5
80030e4a:	e6 05 06 44 	mulu.d	r4,r3,r5
80030e4e:	02 04       	add	r4,r1
80030e50:	5c 05       	acr	r5
80030e52:	ea 03 15 02 	lsl	r3,r5,0x2
80030e56:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
80030e5a:	e8 02 15 02 	lsl	r2,r4,0x2
80030e5e:	e6 08 06 40 	mulu.d	r0,r3,r8
80030e62:	e4 09 07 40 	macu.d	r0,r2,r9
80030e66:	e6 09 06 44 	mulu.d	r4,r3,r9
80030e6a:	02 04       	add	r4,r1
80030e6c:	5c 05       	acr	r5
80030e6e:	a3 65       	lsl	r5,0x2
80030e70:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
80030e74:	a3 64       	lsl	r4,0x2
80030e76:	5c 34       	neg	r4
80030e78:	f8 05 01 45 	sbc	r5,r12,r5
80030e7c:	e6 04 06 40 	mulu.d	r0,r3,r4
80030e80:	e4 05 07 40 	macu.d	r0,r2,r5
80030e84:	e6 05 06 44 	mulu.d	r4,r3,r5
80030e88:	02 04       	add	r4,r1
80030e8a:	5c 05       	acr	r5
80030e8c:	ea 03 15 02 	lsl	r3,r5,0x2
80030e90:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
80030e94:	e8 02 15 02 	lsl	r2,r4,0x2
80030e98:	e6 0a 06 40 	mulu.d	r0,r3,r10
80030e9c:	e4 0b 07 40 	macu.d	r0,r2,r11
80030ea0:	e6 0b 06 42 	mulu.d	r2,r3,r11
80030ea4:	02 02       	add	r2,r1
80030ea6:	5c 03       	acr	r3
80030ea8:	ed b3 00 1c 	bld	r3,0x1c
80030eac:	c0 90       	breq	80030ebe <__avr32_f64_div+0x12a>
80030eae:	a1 72       	lsl	r2,0x1
80030eb0:	5c f3       	rol	r3
80030eb2:	20 17       	sub	r7,1
80030eb4:	a3 9a       	lsr	r10,0x3
80030eb6:	f5 eb 11 da 	or	r10,r10,r11<<0x1d
80030eba:	a3 9b       	lsr	r11,0x3
80030ebc:	c0 58       	rjmp	80030ec6 <__avr32_f64_div+0x132>
80030ebe:	a5 8a       	lsr	r10,0x4
80030ec0:	f5 eb 11 ca 	or	r10,r10,r11<<0x1c
80030ec4:	a5 8b       	lsr	r11,0x4
80030ec6:	58 07       	cp.w	r7,0
80030ec8:	e0 8a 00 8b 	brle	80030fde <__avr32_f64_div_res_subnormal>
80030ecc:	e0 12 ff 00 	andl	r2,0xff00
80030ed0:	e8 12 00 80 	orl	r2,0x80
80030ed4:	e6 08 06 40 	mulu.d	r0,r3,r8
80030ed8:	e4 09 07 40 	macu.d	r0,r2,r9
80030edc:	e4 08 06 44 	mulu.d	r4,r2,r8
80030ee0:	e6 09 06 48 	mulu.d	r8,r3,r9
80030ee4:	00 05       	add	r5,r0
80030ee6:	f0 01 00 48 	adc	r8,r8,r1
80030eea:	5c 09       	acr	r9
80030eec:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
80030ef0:	58 04       	cp.w	r4,0
80030ef2:	5c 25       	cpc	r5

80030ef4 <__avr32_f64_div_round_subnormal>:
80030ef4:	f4 08 13 00 	cpc	r8,r10
80030ef8:	f6 09 13 00 	cpc	r9,r11
80030efc:	5f 36       	srlo	r6
80030efe:	f8 06 17 00 	moveq	r6,r12
80030f02:	e4 0a 16 08 	lsr	r10,r2,0x8
80030f06:	f5 e3 11 8a 	or	r10,r10,r3<<0x18
80030f0a:	e6 0b 16 08 	lsr	r11,r3,0x8
80030f0e:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
80030f12:	ed be 00 1f 	bld	lr,0x1f
80030f16:	ef bb 00 1f 	bst	r11,0x1f
80030f1a:	0c 0a       	add	r10,r6
80030f1c:	5c 0b       	acr	r11
80030f1e:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
80030f22:	e4 1b 00 0f 	andh	r11,0xf
80030f26:	14 4b       	or	r11,r10
80030f28:	e0 81 00 a7 	brne	80031076 <__avr32_f64_div_res_subnormal+0x98>
80030f2c:	f2 06 16 14 	lsr	r6,r9,0x14
80030f30:	ab d6       	cbr	r6,0xb
80030f32:	e0 46 07 ff 	cp.w	r6,2047
80030f36:	e0 81 00 a4 	brne	8003107e <__avr32_f64_div_res_subnormal+0xa0>
80030f3a:	c9 e8       	rjmp	80031076 <__avr32_f64_div_res_subnormal+0x98>
80030f3c:	e4 19 00 0f 	andh	r9,0xf
80030f40:	10 49       	or	r9,r8
80030f42:	e0 81 00 9a 	brne	80031076 <__avr32_f64_div_res_subnormal+0x98>
80030f46:	c9 28       	rjmp	8003106a <__avr32_f64_div_res_subnormal+0x8c>
80030f48:	a3 7b       	lsl	r11,0x3
80030f4a:	f7 ea 13 db 	or	r11,r11,r10>>0x1d
80030f4e:	a3 7a       	lsl	r10,0x3
80030f50:	f5 eb 10 04 	or	r4,r10,r11
80030f54:	e0 80 00 a0 	breq	80031094 <__avr32_f64_div_op1_zero>
80030f58:	f6 04 12 00 	clz	r4,r11
80030f5c:	c1 70       	breq	80030f8a <__avr32_f64_div_round_subnormal+0x96>
80030f5e:	c0 c3       	brcs	80030f76 <__avr32_f64_div_round_subnormal+0x82>
80030f60:	e8 05 11 20 	rsub	r5,r4,32
80030f64:	f6 04 09 4b 	lsl	r11,r11,r4
80030f68:	f4 05 0a 45 	lsr	r5,r10,r5
80030f6c:	0a 4b       	or	r11,r5
80030f6e:	f4 04 09 4a 	lsl	r10,r10,r4
80030f72:	08 17       	sub	r7,r4
80030f74:	c0 b8       	rjmp	80030f8a <__avr32_f64_div_round_subnormal+0x96>
80030f76:	f4 04 12 00 	clz	r4,r10
80030f7a:	f9 b4 03 00 	movlo	r4,0
80030f7e:	f7 b4 02 e0 	subhs	r4,-32
80030f82:	f4 04 09 4b 	lsl	r11,r10,r4
80030f86:	30 0a       	mov	r10,0
80030f88:	08 17       	sub	r7,r4
80030f8a:	a3 8a       	lsr	r10,0x2
80030f8c:	f5 eb 11 ea 	or	r10,r10,r11<<0x1e
80030f90:	a3 8b       	lsr	r11,0x2
80030f92:	c1 1b       	rjmp	80030db4 <__avr32_f64_div+0x20>
80030f94:	a3 79       	lsl	r9,0x3
80030f96:	f3 e8 13 d9 	or	r9,r9,r8>>0x1d
80030f9a:	a3 78       	lsl	r8,0x3
80030f9c:	f3 e8 10 04 	or	r4,r9,r8
80030fa0:	c6 f0       	breq	8003107e <__avr32_f64_div_res_subnormal+0xa0>
80030fa2:	f2 04 12 00 	clz	r4,r9
80030fa6:	c1 70       	breq	80030fd4 <__avr32_f64_div_round_subnormal+0xe0>
80030fa8:	c0 c3       	brcs	80030fc0 <__avr32_f64_div_round_subnormal+0xcc>
80030faa:	e8 05 11 20 	rsub	r5,r4,32
80030fae:	f2 04 09 49 	lsl	r9,r9,r4
80030fb2:	f0 05 0a 45 	lsr	r5,r8,r5
80030fb6:	0a 49       	or	r9,r5
80030fb8:	f0 04 09 48 	lsl	r8,r8,r4
80030fbc:	08 16       	sub	r6,r4
80030fbe:	c0 b8       	rjmp	80030fd4 <__avr32_f64_div_round_subnormal+0xe0>
80030fc0:	f0 04 12 00 	clz	r4,r8
80030fc4:	f9 b4 03 00 	movlo	r4,0
80030fc8:	f7 b4 02 e0 	subhs	r4,-32
80030fcc:	f0 04 09 49 	lsl	r9,r8,r4
80030fd0:	30 08       	mov	r8,0
80030fd2:	08 16       	sub	r6,r4
80030fd4:	a3 88       	lsr	r8,0x2
80030fd6:	f1 e9 11 e8 	or	r8,r8,r9<<0x1e
80030fda:	a3 89       	lsr	r9,0x2
80030fdc:	cf ca       	rjmp	80030dd4 <__avr32_f64_div+0x40>

80030fde <__avr32_f64_div_res_subnormal>:
80030fde:	5c 37       	neg	r7
80030fe0:	2f f7       	sub	r7,-1
80030fe2:	f1 b7 04 c0 	satu	r7,0x6
80030fe6:	e0 47 00 20 	cp.w	r7,32
80030fea:	c1 54       	brge	80031014 <__avr32_f64_div_res_subnormal+0x36>
80030fec:	ee 06 11 20 	rsub	r6,r7,32
80030ff0:	e4 07 0a 42 	lsr	r2,r2,r7
80030ff4:	e6 06 09 4c 	lsl	r12,r3,r6
80030ff8:	18 42       	or	r2,r12
80030ffa:	e6 07 0a 43 	lsr	r3,r3,r7
80030ffe:	f4 06 09 41 	lsl	r1,r10,r6
80031002:	f4 07 0a 4a 	lsr	r10,r10,r7
80031006:	f6 06 09 4c 	lsl	r12,r11,r6
8003100a:	18 4a       	or	r10,r12
8003100c:	f6 07 0a 4b 	lsr	r11,r11,r7
80031010:	30 00       	mov	r0,0
80031012:	c1 58       	rjmp	8003103c <__avr32_f64_div_res_subnormal+0x5e>
80031014:	ee 06 11 20 	rsub	r6,r7,32
80031018:	f9 b0 00 00 	moveq	r0,0
8003101c:	f9 bc 00 00 	moveq	r12,0
80031020:	c0 50       	breq	8003102a <__avr32_f64_div_res_subnormal+0x4c>
80031022:	f4 06 09 40 	lsl	r0,r10,r6
80031026:	f6 06 09 4c 	lsl	r12,r11,r6
8003102a:	e6 07 0a 42 	lsr	r2,r3,r7
8003102e:	30 03       	mov	r3,0
80031030:	f4 07 0a 41 	lsr	r1,r10,r7
80031034:	18 41       	or	r1,r12
80031036:	f6 07 0a 4a 	lsr	r10,r11,r7
8003103a:	30 0b       	mov	r11,0
8003103c:	e0 12 ff 00 	andl	r2,0xff00
80031040:	e8 12 00 80 	orl	r2,0x80
80031044:	e6 08 06 46 	mulu.d	r6,r3,r8
80031048:	e4 09 07 46 	macu.d	r6,r2,r9
8003104c:	e4 08 06 44 	mulu.d	r4,r2,r8
80031050:	e6 09 06 48 	mulu.d	r8,r3,r9
80031054:	0c 05       	add	r5,r6
80031056:	f0 07 00 48 	adc	r8,r8,r7
8003105a:	5c 09       	acr	r9
8003105c:	30 07       	mov	r7,0
8003105e:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
80031062:	00 34       	cp.w	r4,r0
80031064:	e2 05 13 00 	cpc	r5,r1
80031068:	c4 6b       	rjmp	80030ef4 <__avr32_f64_div_round_subnormal>
8003106a:	1c 9b       	mov	r11,lr
8003106c:	e6 1b 80 00 	andh	r11,0x8000,COH
80031070:	30 0a       	mov	r10,0
80031072:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
80031076:	3f fb       	mov	r11,-1
80031078:	30 0a       	mov	r10,0
8003107a:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
8003107e:	f5 eb 10 04 	or	r4,r10,r11
80031082:	c0 90       	breq	80031094 <__avr32_f64_div_op1_zero>
80031084:	1c 9b       	mov	r11,lr
80031086:	e6 1b 80 00 	andh	r11,0x8000,COH
8003108a:	ea 1b 7f f0 	orh	r11,0x7ff0
8003108e:	30 0a       	mov	r10,0
80031090:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc

80031094 <__avr32_f64_div_op1_zero>:
80031094:	f1 e9 10 15 	or	r5,r8,r9<<0x1
80031098:	ce f0       	breq	80031076 <__avr32_f64_div_res_subnormal+0x98>
8003109a:	e9 d9 c2 8b 	bfextu	r4,r9,0x14,0xb
8003109e:	e0 44 07 ff 	cp.w	r4,2047
800310a2:	ce 41       	brne	8003106a <__avr32_f64_div_res_subnormal+0x8c>
800310a4:	f1 e9 10 c5 	or	r5,r8,r9<<0xc
800310a8:	ce 10       	breq	8003106a <__avr32_f64_div_res_subnormal+0x8c>
800310aa:	ce 6b       	rjmp	80031076 <__avr32_f64_div_res_subnormal+0x98>

800310ac <__avr32_f32_div>:
800310ac:	f7 ec 20 08 	eor	r8,r11,r12
800310b0:	a1 7c       	lsl	r12,0x1
800310b2:	a1 7b       	lsl	r11,0x1
800310b4:	c7 a0       	breq	800311a8 <__divsf_return_op1+0x16>
800310b6:	18 7c       	tst	r12,r12
800310b8:	f9 b9 00 00 	moveq	r9,0
800310bc:	c0 90       	breq	800310ce <__avr32_f32_div+0x22>
800310be:	f8 09 16 18 	lsr	r9,r12,0x18
800310c2:	c7 e0       	breq	800311be <__divsf_return_op1+0x2c>
800310c4:	e0 49 00 ff 	cp.w	r9,255
800310c8:	c6 82       	brcc	80031198 <__divsf_return_op1+0x6>
800310ca:	a7 7c       	lsl	r12,0x7
800310cc:	bf bc       	sbr	r12,0x1f
800310ce:	f6 0a 16 18 	lsr	r10,r11,0x18
800310d2:	c7 e0       	breq	800311ce <__divsf_return_op1+0x3c>
800310d4:	e0 4a 00 ff 	cp.w	r10,255
800310d8:	c6 62       	brcc	800311a4 <__divsf_return_op1+0x12>
800310da:	a7 7b       	lsl	r11,0x7
800310dc:	bf bb       	sbr	r11,0x1f
800310de:	58 09       	cp.w	r9,0
800310e0:	f5 bc 00 00 	subfeq	r12,0
800310e4:	5e 0d       	reteq	0
800310e6:	1a d5       	st.w	--sp,r5
800310e8:	bb 27       	st.d	--sp,r6
800310ea:	14 19       	sub	r9,r10
800310ec:	28 19       	sub	r9,-127
800310ee:	fc 1a 80 00 	movh	r10,0x8000
800310f2:	a3 8c       	lsr	r12,0x2
800310f4:	f6 05 16 02 	lsr	r5,r11,0x2
800310f8:	f4 0b 16 01 	lsr	r11,r10,0x1
800310fc:	ed d5 c3 62 	bfextu	r6,r5,0x1b,0x2
80031100:	5c d6       	com	r6
80031102:	f7 d6 d3 82 	bfins	r11,r6,0x1c,0x2
80031106:	f6 05 06 46 	mulu.d	r6,r11,r5
8003110a:	f4 07 01 27 	sub	r7,r10,r7<<0x2
8003110e:	f6 07 06 46 	mulu.d	r6,r11,r7
80031112:	ee 0b 15 02 	lsl	r11,r7,0x2
80031116:	f6 05 06 46 	mulu.d	r6,r11,r5
8003111a:	f4 07 01 27 	sub	r7,r10,r7<<0x2
8003111e:	f6 07 06 46 	mulu.d	r6,r11,r7
80031122:	ee 0b 15 02 	lsl	r11,r7,0x2
80031126:	f6 05 06 46 	mulu.d	r6,r11,r5
8003112a:	f4 07 01 27 	sub	r7,r10,r7<<0x2
8003112e:	f6 07 06 46 	mulu.d	r6,r11,r7
80031132:	ee 0b 15 02 	lsl	r11,r7,0x2
80031136:	f6 05 06 46 	mulu.d	r6,r11,r5
8003113a:	f4 07 01 27 	sub	r7,r10,r7<<0x2
8003113e:	f6 07 06 46 	mulu.d	r6,r11,r7
80031142:	ee 0b 15 02 	lsl	r11,r7,0x2
80031146:	f6 0c 06 46 	mulu.d	r6,r11,r12
8003114a:	a5 8c       	lsr	r12,0x4
8003114c:	ed b7 00 1c 	bld	r7,0x1c
80031150:	c0 40       	breq	80031158 <__avr32_f32_div+0xac>
80031152:	a1 77       	lsl	r7,0x1
80031154:	20 19       	sub	r9,1
80031156:	a1 7c       	lsl	r12,0x1
80031158:	58 09       	cp.w	r9,0
8003115a:	e0 8a 00 42 	brle	800311de <__avr32_f32_div_res_subnormal>
8003115e:	e0 17 ff e0 	andl	r7,0xffe0
80031162:	e8 17 00 10 	orl	r7,0x10
80031166:	ea 07 06 4a 	mulu.d	r10,r5,r7
8003116a:	eb d7 c0 a1 	bfextu	r5,r7,0x5,0x1
8003116e:	58 0a       	cp.w	r10,0

80031170 <__avr32_f32_div_round_subnormal>:
80031170:	f8 0b 13 00 	cpc	r11,r12
80031174:	5f 3b       	srlo	r11
80031176:	ea 0b 17 00 	moveq	r11,r5
8003117a:	ee 0c 16 05 	lsr	r12,r7,0x5
8003117e:	f9 d9 d2 e8 	bfins	r12,r9,0x17,0x8
80031182:	bb 07       	ld.d	r6,sp++
80031184:	1b 05       	ld.w	r5,sp++
80031186:	ed b8 00 1f 	bld	r8,0x1f
8003118a:	ef bc 00 1f 	bst	r12,0x1f
8003118e:	16 0c       	add	r12,r11
80031190:	5e fc       	retal	r12

80031192 <__divsf_return_op1>:
80031192:	a1 78       	lsl	r8,0x1
80031194:	5d 0c       	ror	r12
80031196:	5e fc       	retal	r12
80031198:	5e 1e       	retne	-1
8003119a:	fc 19 ff 00 	movh	r9,0xff00
8003119e:	12 3b       	cp.w	r11,r9
800311a0:	cf 93       	brcs	80031192 <__divsf_return_op1>
800311a2:	5e fe       	retal	-1
800311a4:	5e 0d       	reteq	0
800311a6:	5e fe       	retal	-1
800311a8:	18 7c       	tst	r12,r12
800311aa:	5e 0e       	reteq	-1
800311ac:	f8 09 16 18 	lsr	r9,r12,0x18
800311b0:	c0 70       	breq	800311be <__divsf_return_op1+0x2c>
800311b2:	e0 49 00 ff 	cp.w	r9,255
800311b6:	cf 12       	brcc	80031198 <__divsf_return_op1+0x6>
800311b8:	fc 1c ff 00 	movh	r12,0xff00
800311bc:	ce bb       	rjmp	80031192 <__divsf_return_op1>
800311be:	a7 7c       	lsl	r12,0x7
800311c0:	f8 09 12 00 	clz	r9,r12
800311c4:	f8 09 09 4c 	lsl	r12,r12,r9
800311c8:	f2 09 11 01 	rsub	r9,r9,1
800311cc:	c8 1b       	rjmp	800310ce <__avr32_f32_div+0x22>
800311ce:	a7 7b       	lsl	r11,0x7
800311d0:	f6 0a 12 00 	clz	r10,r11
800311d4:	f6 0a 09 4b 	lsl	r11,r11,r10
800311d8:	f4 0a 11 01 	rsub	r10,r10,1
800311dc:	c8 5b       	rjmp	800310e6 <__avr32_f32_div+0x3a>

800311de <__avr32_f32_div_res_subnormal>:
800311de:	5c 39       	neg	r9
800311e0:	2f f9       	sub	r9,-1
800311e2:	f1 b9 04 a0 	satu	r9,0x5
800311e6:	f2 0a 11 20 	rsub	r10,r9,32
800311ea:	ee 09 0a 47 	lsr	r7,r7,r9
800311ee:	f8 0a 09 46 	lsl	r6,r12,r10
800311f2:	f8 09 0a 4c 	lsr	r12,r12,r9
800311f6:	e0 17 ff e0 	andl	r7,0xffe0
800311fa:	e8 17 00 10 	orl	r7,0x10
800311fe:	ea 07 06 4a 	mulu.d	r10,r5,r7
80031202:	30 09       	mov	r9,0
80031204:	eb d7 c0 a1 	bfextu	r5,r7,0x5,0x1
80031208:	0c 3a       	cp.w	r10,r6
8003120a:	cb 3b       	rjmp	80031170 <__avr32_f32_div_round_subnormal>

8003120c <__avr32_f32_to_f64>:
8003120c:	f8 0b 15 01 	lsl	r11,r12,0x1
80031210:	f9 ba 00 00 	moveq	r10,0
80031214:	5e 0b       	reteq	r11
80031216:	f3 db c3 08 	bfextu	r9,r11,0x18,0x8
8003121a:	e0 49 00 ff 	cp.w	r9,255
8003121e:	c1 e0       	breq	8003125a <__extendsfdf_return_op1+0x6>
80031220:	a7 7b       	lsl	r11,0x7
80031222:	30 0a       	mov	r10,0
80031224:	58 09       	cp.w	r9,0
80031226:	f7 b9 00 ff 	subeq	r9,-1
8003122a:	5f 18       	srne	r8
8003122c:	f7 e8 11 fb 	or	r11,r11,r8<<0x1f
80031230:	fe 39 fc 80 	sub	r9,-896
80031234:	f6 08 12 00 	clz	r8,r11
80031238:	10 19       	sub	r9,r8
8003123a:	f6 08 09 4b 	lsl	r11,r11,r8
8003123e:	ed bb 00 1f 	bld	r11,0x1f
80031242:	f7 b9 01 01 	subne	r9,1
80031246:	ab 9a       	lsr	r10,0xb
80031248:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
8003124c:	a1 7b       	lsl	r11,0x1
8003124e:	ab 9b       	lsr	r11,0xb
80031250:	f7 e9 11 5b 	or	r11,r11,r9<<0x15

80031254 <__extendsfdf_return_op1>:
80031254:	a1 7c       	lsl	r12,0x1
80031256:	5d 0b       	ror	r11
80031258:	5e fb       	retal	r11
8003125a:	fc 1a ff e0 	movh	r10,0xffe0
8003125e:	a9 6b       	lsl	r11,0x8
80031260:	f9 bb 01 ff 	movne	r11,-1
80031264:	f4 0b 17 00 	moveq	r11,r10
80031268:	30 0a       	mov	r10,0
8003126a:	cf 5b       	rjmp	80031254 <__extendsfdf_return_op1>

8003126c <__avr32_f64_to_f32>:
8003126c:	f6 09 15 01 	lsl	r9,r11,0x1
80031270:	b5 99       	lsr	r9,0x15
80031272:	5e 0d       	reteq	0
80031274:	f6 08 15 0a 	lsl	r8,r11,0xa
80031278:	f1 ea 13 6c 	or	r12,r8,r10>>0x16
8003127c:	ab 6a       	lsl	r10,0xa
8003127e:	5c 3a       	neg	r10
80031280:	5c fc       	rol	r12
80031282:	e0 49 07 ff 	cp.w	r9,2047
80031286:	c1 a0       	breq	800312ba <__truncdfsf_return_op1+0x6>
80031288:	e0 29 03 80 	sub	r9,896
8003128c:	bf bc       	sbr	r12,0x1f
8003128e:	58 09       	cp.w	r9,0
80031290:	e0 8a 00 1a 	brle	800312c4 <__truncdfsf_return_op1+0x10>
80031294:	37 fa       	mov	r10,127
80031296:	ed bc 00 08 	bld	r12,0x8
8003129a:	f7 ba 00 ff 	subeq	r10,-1
8003129e:	14 0c       	add	r12,r10
800312a0:	f7 b9 03 fe 	sublo	r9,-2
800312a4:	ed bc 00 1f 	bld	r12,0x1f
800312a8:	f7 b9 01 01 	subne	r9,1
800312ac:	f8 0c 16 07 	lsr	r12,r12,0x7
800312b0:	f9 d9 d3 08 	bfins	r12,r9,0x18,0x8

800312b4 <__truncdfsf_return_op1>:
800312b4:	a1 7b       	lsl	r11,0x1
800312b6:	5d 0c       	ror	r12
800312b8:	5e fc       	retal	r12
800312ba:	bf dc       	cbr	r12,0x1f
800312bc:	5e 1e       	retne	-1
800312be:	fc 1c 7f 80 	movh	r12,0x7f80
800312c2:	5e fc       	retal	r12
800312c4:	f2 09 11 01 	rsub	r9,r9,1
800312c8:	59 99       	cp.w	r9,25
800312ca:	f9 bc 02 00 	movhs	r12,0
800312ce:	c1 32       	brcc	800312f4 <__truncdfsf_return_op1+0x40>
800312d0:	f2 0a 11 20 	rsub	r10,r9,32
800312d4:	f8 0a 09 4a 	lsl	r10,r12,r10
800312d8:	5f 1a       	srne	r10
800312da:	f8 09 0a 4c 	lsr	r12,r12,r9
800312de:	14 4c       	or	r12,r10
800312e0:	37 fa       	mov	r10,127
800312e2:	ed bc 00 08 	bld	r12,0x8
800312e6:	f7 ba 00 ff 	subeq	r10,-1
800312ea:	14 0c       	add	r12,r10
800312ec:	f8 0c 16 07 	lsr	r12,r12,0x7
800312f0:	a1 7b       	lsl	r11,0x1
800312f2:	5d 0c       	ror	r12
800312f4:	5e fc       	retal	r12

800312f6 <__avr32_udiv64>:
800312f6:	d4 31       	pushm	r0-r7,lr
800312f8:	1a 97       	mov	r7,sp
800312fa:	20 3d       	sub	sp,12
800312fc:	10 9c       	mov	r12,r8
800312fe:	12 9e       	mov	lr,r9
80031300:	14 93       	mov	r3,r10
80031302:	58 09       	cp.w	r9,0
80031304:	e0 81 00 bd 	brne	8003147e <__avr32_udiv64+0x188>
80031308:	16 38       	cp.w	r8,r11
8003130a:	e0 88 00 40 	brls	8003138a <__avr32_udiv64+0x94>
8003130e:	f0 08 12 00 	clz	r8,r8
80031312:	c0 d0       	breq	8003132c <__avr32_udiv64+0x36>
80031314:	f6 08 09 4b 	lsl	r11,r11,r8
80031318:	f0 09 11 20 	rsub	r9,r8,32
8003131c:	f8 08 09 4c 	lsl	r12,r12,r8
80031320:	f4 09 0a 49 	lsr	r9,r10,r9
80031324:	f4 08 09 43 	lsl	r3,r10,r8
80031328:	f3 eb 10 0b 	or	r11,r9,r11
8003132c:	f8 0e 16 10 	lsr	lr,r12,0x10
80031330:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
80031334:	f6 0e 0d 00 	divu	r0,r11,lr
80031338:	e6 0b 16 10 	lsr	r11,r3,0x10
8003133c:	00 99       	mov	r9,r0
8003133e:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80031342:	e0 0a 02 48 	mul	r8,r0,r10
80031346:	10 3b       	cp.w	r11,r8
80031348:	c0 a2       	brcc	8003135c <__avr32_udiv64+0x66>
8003134a:	20 19       	sub	r9,1
8003134c:	18 0b       	add	r11,r12
8003134e:	18 3b       	cp.w	r11,r12
80031350:	c0 63       	brcs	8003135c <__avr32_udiv64+0x66>
80031352:	10 3b       	cp.w	r11,r8
80031354:	f7 b9 03 01 	sublo	r9,1
80031358:	f7 dc e3 0b 	addcs	r11,r11,r12
8003135c:	f6 08 01 01 	sub	r1,r11,r8
80031360:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
80031364:	e2 0e 0d 00 	divu	r0,r1,lr
80031368:	e7 e1 11 03 	or	r3,r3,r1<<0x10
8003136c:	00 98       	mov	r8,r0
8003136e:	e0 0a 02 4a 	mul	r10,r0,r10
80031372:	14 33       	cp.w	r3,r10
80031374:	c0 82       	brcc	80031384 <__avr32_udiv64+0x8e>
80031376:	20 18       	sub	r8,1
80031378:	18 03       	add	r3,r12
8003137a:	18 33       	cp.w	r3,r12
8003137c:	c0 43       	brcs	80031384 <__avr32_udiv64+0x8e>
8003137e:	14 33       	cp.w	r3,r10
80031380:	f7 b8 03 01 	sublo	r8,1
80031384:	f1 e9 11 08 	or	r8,r8,r9<<0x10
80031388:	cd f8       	rjmp	80031546 <__avr32_udiv64+0x250>
8003138a:	58 08       	cp.w	r8,0
8003138c:	c0 51       	brne	80031396 <__avr32_udiv64+0xa0>
8003138e:	30 19       	mov	r9,1
80031390:	f2 08 0d 08 	divu	r8,r9,r8
80031394:	10 9c       	mov	r12,r8
80031396:	f8 06 12 00 	clz	r6,r12
8003139a:	c0 41       	brne	800313a2 <__avr32_udiv64+0xac>
8003139c:	18 1b       	sub	r11,r12
8003139e:	30 19       	mov	r9,1
800313a0:	c4 08       	rjmp	80031420 <__avr32_udiv64+0x12a>
800313a2:	ec 01 11 20 	rsub	r1,r6,32
800313a6:	f4 01 0a 49 	lsr	r9,r10,r1
800313aa:	f8 06 09 4c 	lsl	r12,r12,r6
800313ae:	f6 06 09 48 	lsl	r8,r11,r6
800313b2:	f6 01 0a 41 	lsr	r1,r11,r1
800313b6:	f3 e8 10 08 	or	r8,r9,r8
800313ba:	f8 03 16 10 	lsr	r3,r12,0x10
800313be:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
800313c2:	e2 03 0d 00 	divu	r0,r1,r3
800313c6:	f0 0b 16 10 	lsr	r11,r8,0x10
800313ca:	00 9e       	mov	lr,r0
800313cc:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
800313d0:	e0 05 02 49 	mul	r9,r0,r5
800313d4:	12 3b       	cp.w	r11,r9
800313d6:	c0 a2       	brcc	800313ea <__avr32_udiv64+0xf4>
800313d8:	20 1e       	sub	lr,1
800313da:	18 0b       	add	r11,r12
800313dc:	18 3b       	cp.w	r11,r12
800313de:	c0 63       	brcs	800313ea <__avr32_udiv64+0xf4>
800313e0:	12 3b       	cp.w	r11,r9
800313e2:	f7 be 03 01 	sublo	lr,1
800313e6:	f7 dc e3 0b 	addcs	r11,r11,r12
800313ea:	12 1b       	sub	r11,r9
800313ec:	f1 d8 c0 10 	bfextu	r8,r8,0x0,0x10
800313f0:	f6 03 0d 02 	divu	r2,r11,r3
800313f4:	f1 e3 11 08 	or	r8,r8,r3<<0x10
800313f8:	04 99       	mov	r9,r2
800313fa:	e4 05 02 4b 	mul	r11,r2,r5
800313fe:	16 38       	cp.w	r8,r11
80031400:	c0 a2       	brcc	80031414 <__avr32_udiv64+0x11e>
80031402:	20 19       	sub	r9,1
80031404:	18 08       	add	r8,r12
80031406:	18 38       	cp.w	r8,r12
80031408:	c0 63       	brcs	80031414 <__avr32_udiv64+0x11e>
8003140a:	16 38       	cp.w	r8,r11
8003140c:	f7 b9 03 01 	sublo	r9,1
80031410:	f1 dc e3 08 	addcs	r8,r8,r12
80031414:	f4 06 09 43 	lsl	r3,r10,r6
80031418:	f0 0b 01 0b 	sub	r11,r8,r11
8003141c:	f3 ee 11 09 	or	r9,r9,lr<<0x10
80031420:	f8 06 16 10 	lsr	r6,r12,0x10
80031424:	fd dc c0 10 	bfextu	lr,r12,0x0,0x10
80031428:	f6 06 0d 00 	divu	r0,r11,r6
8003142c:	e6 0b 16 10 	lsr	r11,r3,0x10
80031430:	00 9a       	mov	r10,r0
80031432:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80031436:	e0 0e 02 48 	mul	r8,r0,lr
8003143a:	10 3b       	cp.w	r11,r8
8003143c:	c0 a2       	brcc	80031450 <__avr32_udiv64+0x15a>
8003143e:	20 1a       	sub	r10,1
80031440:	18 0b       	add	r11,r12
80031442:	18 3b       	cp.w	r11,r12
80031444:	c0 63       	brcs	80031450 <__avr32_udiv64+0x15a>
80031446:	10 3b       	cp.w	r11,r8
80031448:	f7 ba 03 01 	sublo	r10,1
8003144c:	f7 dc e3 0b 	addcs	r11,r11,r12
80031450:	f6 08 01 01 	sub	r1,r11,r8
80031454:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
80031458:	e2 06 0d 00 	divu	r0,r1,r6
8003145c:	e7 e1 11 03 	or	r3,r3,r1<<0x10
80031460:	00 98       	mov	r8,r0
80031462:	e0 0e 02 4b 	mul	r11,r0,lr
80031466:	16 33       	cp.w	r3,r11
80031468:	c0 82       	brcc	80031478 <__avr32_udiv64+0x182>
8003146a:	20 18       	sub	r8,1
8003146c:	18 03       	add	r3,r12
8003146e:	18 33       	cp.w	r3,r12
80031470:	c0 43       	brcs	80031478 <__avr32_udiv64+0x182>
80031472:	16 33       	cp.w	r3,r11
80031474:	f7 b8 03 01 	sublo	r8,1
80031478:	f1 ea 11 08 	or	r8,r8,r10<<0x10
8003147c:	c6 98       	rjmp	8003154e <__avr32_udiv64+0x258>
8003147e:	16 39       	cp.w	r9,r11
80031480:	e0 8b 00 65 	brhi	8003154a <__avr32_udiv64+0x254>
80031484:	f2 09 12 00 	clz	r9,r9
80031488:	c0 b1       	brne	8003149e <__avr32_udiv64+0x1a8>
8003148a:	10 3a       	cp.w	r10,r8
8003148c:	5f 2a       	srhs	r10
8003148e:	1c 3b       	cp.w	r11,lr
80031490:	5f b8       	srhi	r8
80031492:	10 4a       	or	r10,r8
80031494:	f2 0a 18 00 	cp.b	r10,r9
80031498:	c5 90       	breq	8003154a <__avr32_udiv64+0x254>
8003149a:	30 18       	mov	r8,1
8003149c:	c5 98       	rjmp	8003154e <__avr32_udiv64+0x258>
8003149e:	f0 09 09 46 	lsl	r6,r8,r9
800314a2:	f2 03 11 20 	rsub	r3,r9,32
800314a6:	fc 09 09 4e 	lsl	lr,lr,r9
800314aa:	f0 03 0a 48 	lsr	r8,r8,r3
800314ae:	f6 09 09 4c 	lsl	r12,r11,r9
800314b2:	f4 03 0a 42 	lsr	r2,r10,r3
800314b6:	ef 46 ff f4 	st.w	r7[-12],r6
800314ba:	f6 03 0a 43 	lsr	r3,r11,r3
800314be:	18 42       	or	r2,r12
800314c0:	f1 ee 10 0c 	or	r12,r8,lr
800314c4:	f8 01 16 10 	lsr	r1,r12,0x10
800314c8:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
800314cc:	e6 01 0d 04 	divu	r4,r3,r1
800314d0:	e4 03 16 10 	lsr	r3,r2,0x10
800314d4:	08 9e       	mov	lr,r4
800314d6:	e7 e5 11 03 	or	r3,r3,r5<<0x10
800314da:	e8 06 02 48 	mul	r8,r4,r6
800314de:	10 33       	cp.w	r3,r8
800314e0:	c0 a2       	brcc	800314f4 <__avr32_udiv64+0x1fe>
800314e2:	20 1e       	sub	lr,1
800314e4:	18 03       	add	r3,r12
800314e6:	18 33       	cp.w	r3,r12
800314e8:	c0 63       	brcs	800314f4 <__avr32_udiv64+0x1fe>
800314ea:	10 33       	cp.w	r3,r8
800314ec:	f7 be 03 01 	sublo	lr,1
800314f0:	e7 dc e3 03 	addcs	r3,r3,r12
800314f4:	10 13       	sub	r3,r8
800314f6:	f7 d2 c0 10 	bfextu	r11,r2,0x0,0x10
800314fa:	e6 01 0d 00 	divu	r0,r3,r1
800314fe:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80031502:	00 98       	mov	r8,r0
80031504:	e0 06 02 46 	mul	r6,r0,r6
80031508:	0c 3b       	cp.w	r11,r6
8003150a:	c0 a2       	brcc	8003151e <__avr32_udiv64+0x228>
8003150c:	20 18       	sub	r8,1
8003150e:	18 0b       	add	r11,r12
80031510:	18 3b       	cp.w	r11,r12
80031512:	c0 63       	brcs	8003151e <__avr32_udiv64+0x228>
80031514:	0c 3b       	cp.w	r11,r6
80031516:	f7 dc e3 0b 	addcs	r11,r11,r12
8003151a:	f7 b8 03 01 	sublo	r8,1
8003151e:	f1 ee 11 08 	or	r8,r8,lr<<0x10
80031522:	ee f4 ff f4 	ld.w	r4,r7[-12]
80031526:	0c 1b       	sub	r11,r6
80031528:	f0 04 06 42 	mulu.d	r2,r8,r4
8003152c:	06 95       	mov	r5,r3
8003152e:	16 35       	cp.w	r5,r11
80031530:	e0 8b 00 0a 	brhi	80031544 <__avr32_udiv64+0x24e>
80031534:	5f 0b       	sreq	r11
80031536:	f4 09 09 49 	lsl	r9,r10,r9
8003153a:	12 32       	cp.w	r2,r9
8003153c:	5f b9       	srhi	r9
8003153e:	f7 e9 00 09 	and	r9,r11,r9
80031542:	c0 60       	breq	8003154e <__avr32_udiv64+0x258>
80031544:	20 18       	sub	r8,1
80031546:	30 09       	mov	r9,0
80031548:	c0 38       	rjmp	8003154e <__avr32_udiv64+0x258>
8003154a:	30 09       	mov	r9,0
8003154c:	12 98       	mov	r8,r9
8003154e:	10 9a       	mov	r10,r8
80031550:	12 93       	mov	r3,r9
80031552:	10 92       	mov	r2,r8
80031554:	12 9b       	mov	r11,r9
80031556:	2f dd       	sub	sp,-12
80031558:	d8 32       	popm	r0-r7,pc
8003155a:	d7 03       	nop

8003155c <__errno>:
8003155c:	48 28       	lddpc	r8,80031564 <__errno+0x8>
8003155e:	70 0c       	ld.w	r12,r8[0x0]
80031560:	2f 4c       	sub	r12,-12
80031562:	5e fc       	retal	r12
80031564:	00 00       	add	r0,r0
80031566:	24 38       	sub	r8,67

80031568 <memcpy>:
80031568:	58 8a       	cp.w	r10,8
8003156a:	c2 f5       	brlt	800315c8 <memcpy+0x60>
8003156c:	f9 eb 10 09 	or	r9,r12,r11
80031570:	e2 19 00 03 	andl	r9,0x3,COH
80031574:	e0 81 00 97 	brne	800316a2 <memcpy+0x13a>
80031578:	e0 4a 00 20 	cp.w	r10,32
8003157c:	c3 b4       	brge	800315f2 <memcpy+0x8a>
8003157e:	f4 08 14 02 	asr	r8,r10,0x2
80031582:	f0 09 11 08 	rsub	r9,r8,8
80031586:	fe 09 00 2f 	add	pc,pc,r9<<0x2
8003158a:	76 69       	ld.w	r9,r11[0x18]
8003158c:	99 69       	st.w	r12[0x18],r9
8003158e:	76 59       	ld.w	r9,r11[0x14]
80031590:	99 59       	st.w	r12[0x14],r9
80031592:	76 49       	ld.w	r9,r11[0x10]
80031594:	99 49       	st.w	r12[0x10],r9
80031596:	76 39       	ld.w	r9,r11[0xc]
80031598:	99 39       	st.w	r12[0xc],r9
8003159a:	76 29       	ld.w	r9,r11[0x8]
8003159c:	99 29       	st.w	r12[0x8],r9
8003159e:	76 19       	ld.w	r9,r11[0x4]
800315a0:	99 19       	st.w	r12[0x4],r9
800315a2:	76 09       	ld.w	r9,r11[0x0]
800315a4:	99 09       	st.w	r12[0x0],r9
800315a6:	f6 08 00 2b 	add	r11,r11,r8<<0x2
800315aa:	f8 08 00 28 	add	r8,r12,r8<<0x2
800315ae:	e0 1a 00 03 	andl	r10,0x3
800315b2:	f4 0a 11 04 	rsub	r10,r10,4
800315b6:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
800315ba:	17 a9       	ld.ub	r9,r11[0x2]
800315bc:	b0 a9       	st.b	r8[0x2],r9
800315be:	17 99       	ld.ub	r9,r11[0x1]
800315c0:	b0 99       	st.b	r8[0x1],r9
800315c2:	17 89       	ld.ub	r9,r11[0x0]
800315c4:	b0 89       	st.b	r8[0x0],r9
800315c6:	5e fc       	retal	r12
800315c8:	f4 0a 11 09 	rsub	r10,r10,9
800315cc:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
800315d0:	17 f9       	ld.ub	r9,r11[0x7]
800315d2:	b8 f9       	st.b	r12[0x7],r9
800315d4:	17 e9       	ld.ub	r9,r11[0x6]
800315d6:	b8 e9       	st.b	r12[0x6],r9
800315d8:	17 d9       	ld.ub	r9,r11[0x5]
800315da:	b8 d9       	st.b	r12[0x5],r9
800315dc:	17 c9       	ld.ub	r9,r11[0x4]
800315de:	b8 c9       	st.b	r12[0x4],r9
800315e0:	17 b9       	ld.ub	r9,r11[0x3]
800315e2:	b8 b9       	st.b	r12[0x3],r9
800315e4:	17 a9       	ld.ub	r9,r11[0x2]
800315e6:	b8 a9       	st.b	r12[0x2],r9
800315e8:	17 99       	ld.ub	r9,r11[0x1]
800315ea:	b8 99       	st.b	r12[0x1],r9
800315ec:	17 89       	ld.ub	r9,r11[0x0]
800315ee:	b8 89       	st.b	r12[0x0],r9
800315f0:	5e fc       	retal	r12
800315f2:	eb cd 40 c0 	pushm	r6-r7,lr
800315f6:	18 99       	mov	r9,r12
800315f8:	22 0a       	sub	r10,32
800315fa:	b7 07       	ld.d	r6,r11++
800315fc:	b3 26       	st.d	r9++,r6
800315fe:	b7 07       	ld.d	r6,r11++
80031600:	b3 26       	st.d	r9++,r6
80031602:	b7 07       	ld.d	r6,r11++
80031604:	b3 26       	st.d	r9++,r6
80031606:	b7 07       	ld.d	r6,r11++
80031608:	b3 26       	st.d	r9++,r6
8003160a:	22 0a       	sub	r10,32
8003160c:	cf 74       	brge	800315fa <memcpy+0x92>
8003160e:	2f 0a       	sub	r10,-16
80031610:	c0 65       	brlt	8003161c <memcpy+0xb4>
80031612:	b7 07       	ld.d	r6,r11++
80031614:	b3 26       	st.d	r9++,r6
80031616:	b7 07       	ld.d	r6,r11++
80031618:	b3 26       	st.d	r9++,r6
8003161a:	21 0a       	sub	r10,16
8003161c:	5c 3a       	neg	r10
8003161e:	fe 0a 00 3f 	add	pc,pc,r10<<0x3
80031622:	d7 03       	nop
80031624:	d7 03       	nop
80031626:	f7 36 00 0e 	ld.ub	r6,r11[14]
8003162a:	f3 66 00 0e 	st.b	r9[14],r6
8003162e:	f7 36 00 0d 	ld.ub	r6,r11[13]
80031632:	f3 66 00 0d 	st.b	r9[13],r6
80031636:	f7 36 00 0c 	ld.ub	r6,r11[12]
8003163a:	f3 66 00 0c 	st.b	r9[12],r6
8003163e:	f7 36 00 0b 	ld.ub	r6,r11[11]
80031642:	f3 66 00 0b 	st.b	r9[11],r6
80031646:	f7 36 00 0a 	ld.ub	r6,r11[10]
8003164a:	f3 66 00 0a 	st.b	r9[10],r6
8003164e:	f7 36 00 09 	ld.ub	r6,r11[9]
80031652:	f3 66 00 09 	st.b	r9[9],r6
80031656:	f7 36 00 08 	ld.ub	r6,r11[8]
8003165a:	f3 66 00 08 	st.b	r9[8],r6
8003165e:	f7 36 00 07 	ld.ub	r6,r11[7]
80031662:	f3 66 00 07 	st.b	r9[7],r6
80031666:	f7 36 00 06 	ld.ub	r6,r11[6]
8003166a:	f3 66 00 06 	st.b	r9[6],r6
8003166e:	f7 36 00 05 	ld.ub	r6,r11[5]
80031672:	f3 66 00 05 	st.b	r9[5],r6
80031676:	f7 36 00 04 	ld.ub	r6,r11[4]
8003167a:	f3 66 00 04 	st.b	r9[4],r6
8003167e:	f7 36 00 03 	ld.ub	r6,r11[3]
80031682:	f3 66 00 03 	st.b	r9[3],r6
80031686:	f7 36 00 02 	ld.ub	r6,r11[2]
8003168a:	f3 66 00 02 	st.b	r9[2],r6
8003168e:	f7 36 00 01 	ld.ub	r6,r11[1]
80031692:	f3 66 00 01 	st.b	r9[1],r6
80031696:	f7 36 00 00 	ld.ub	r6,r11[0]
8003169a:	f3 66 00 00 	st.b	r9[0],r6
8003169e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800316a2:	20 1a       	sub	r10,1
800316a4:	f6 0a 07 09 	ld.ub	r9,r11[r10]
800316a8:	f8 0a 0b 09 	st.b	r12[r10],r9
800316ac:	cf b1       	brne	800316a2 <memcpy+0x13a>
800316ae:	5e fc       	retal	r12

800316b0 <memset>:
800316b0:	18 98       	mov	r8,r12
800316b2:	c0 38       	rjmp	800316b8 <memset+0x8>
800316b4:	10 cb       	st.b	r8++,r11
800316b6:	20 1a       	sub	r10,1
800316b8:	58 0a       	cp.w	r10,0
800316ba:	cf d1       	brne	800316b4 <memset+0x4>
800316bc:	5e fc       	retal	r12

800316be <strcpy>:
800316be:	30 08       	mov	r8,0
800316c0:	f6 08 07 09 	ld.ub	r9,r11[r8]
800316c4:	f8 08 0b 09 	st.b	r12[r8],r9
800316c8:	2f f8       	sub	r8,-1
800316ca:	58 09       	cp.w	r9,0
800316cc:	cf a1       	brne	800316c0 <strcpy+0x2>
800316ce:	5e fc       	retal	r12

800316d0 <strlen>:
800316d0:	30 09       	mov	r9,0
800316d2:	18 98       	mov	r8,r12
800316d4:	c0 28       	rjmp	800316d8 <strlen+0x8>
800316d6:	2f f8       	sub	r8,-1
800316d8:	11 8a       	ld.ub	r10,r8[0x0]
800316da:	f2 0a 18 00 	cp.b	r10,r9
800316de:	cf c1       	brne	800316d6 <strlen+0x6>
800316e0:	f0 0c 01 0c 	sub	r12,r8,r12
800316e4:	5e fc       	retal	r12

Disassembly of section .exception:

80031800 <_evba>:
_evba:

        .org  0x000
        // Unrecoverable Exception.
_handle_Unrecoverable_Exception:
        rjmp $
80031800:	c0 08       	rjmp	80031800 <_evba>
	...

80031804 <_handle_TLB_Multiple_Hit>:

        .org  0x004
        // TLB Multiple Hit.
_handle_TLB_Multiple_Hit:
        rjmp $
80031804:	c0 08       	rjmp	80031804 <_handle_TLB_Multiple_Hit>
	...

80031808 <_handle_Bus_Error_Data_Fetch>:

        .org  0x008
        // Bus Error Data Fetch.
_handle_Bus_Error_Data_Fetch:
        rjmp $
80031808:	c0 08       	rjmp	80031808 <_handle_Bus_Error_Data_Fetch>
	...

8003180c <_handle_Bus_Error_Instruction_Fetch>:

        .org  0x00C
         // Bus Error Instruction Fetch.
_handle_Bus_Error_Instruction_Fetch:
        rjmp $
8003180c:	c0 08       	rjmp	8003180c <_handle_Bus_Error_Instruction_Fetch>
	...

80031810 <_handle_NMI>:

        .org  0x010
        // NMI.
_handle_NMI:
		lda.w   pc, eic_nmi_handler
80031810:	4c ff       	lddpc	pc,8003194c <ipr_val+0x10>
	...

80031814 <_handle_Instruction_Address>:
        .org  0x014
        // Instruction Address.
_handle_Instruction_Address:
        rjmp $
80031814:	c0 08       	rjmp	80031814 <_handle_Instruction_Address>
	...

80031818 <_handle_ITLB_Protection>:

        .org  0x018
        // ITLB Protection.
_handle_ITLB_Protection:
        rjmp $
80031818:	c0 08       	rjmp	80031818 <_handle_ITLB_Protection>
	...

8003181c <_handle_Breakpoint>:

        .org  0x01C
        // Breakpoint.
_handle_Breakpoint:
        rjmp $
8003181c:	c0 08       	rjmp	8003181c <_handle_Breakpoint>
	...

80031820 <_handle_Illegal_Opcode>:

        .org  0x020
        // Illegal Opcode.
_handle_Illegal_Opcode:
        rjmp $
80031820:	c0 08       	rjmp	80031820 <_handle_Illegal_Opcode>
	...

80031824 <_handle_Unimplemented_Instruction>:

        .org  0x024
        // Unimplemented Instruction.
_handle_Unimplemented_Instruction:
        rjmp $
80031824:	c0 08       	rjmp	80031824 <_handle_Unimplemented_Instruction>
	...

80031828 <_handle_Privilege_Violation>:

        .org  0x028
        // Privilege Violation.
_handle_Privilege_Violation:
        rjmp $
80031828:	c0 08       	rjmp	80031828 <_handle_Privilege_Violation>
	...

8003182c <_handle_Floating_Point>:

        .org  0x02C
        // Floating-Point: UNUSED IN AVR32UC and AVR32AP.
_handle_Floating_Point:
        rjmp $
8003182c:	c0 08       	rjmp	8003182c <_handle_Floating_Point>
	...

80031830 <_handle_Coprocessor_Absent>:

        .org  0x030
        // Coprocessor Absent: UNUSED IN AVR32UC.
_handle_Coprocessor_Absent:
        rjmp $
80031830:	c0 08       	rjmp	80031830 <_handle_Coprocessor_Absent>
	...

80031834 <_handle_Data_Address_Read>:

        .org  0x034
        // Data Address (Read).
_handle_Data_Address_Read:
        rjmp $
80031834:	c0 08       	rjmp	80031834 <_handle_Data_Address_Read>
	...

80031838 <_handle_Data_Address_Write>:

        .org  0x038
        // Data Address (Write).
_handle_Data_Address_Write:
        rjmp $
80031838:	c0 08       	rjmp	80031838 <_handle_Data_Address_Write>
	...

8003183c <_handle_DTLB_Protection_Read>:

        .org  0x03C
        // DTLB Protection (Read).
_handle_DTLB_Protection_Read:
        rjmp $
8003183c:	c0 08       	rjmp	8003183c <_handle_DTLB_Protection_Read>
	...

80031840 <_handle_DTLB_Protection_Write>:

        .org  0x040
        // DTLB Protection (Write).
_handle_DTLB_Protection_Write:
        rjmp $
80031840:	c0 08       	rjmp	80031840 <_handle_DTLB_Protection_Write>
	...

80031844 <_handle_DTLB_Modified>:

        .org  0x044
        // DTLB Modified: UNUSED IN AVR32UC.
_handle_DTLB_Modified:
        rjmp $
80031844:	c0 08       	rjmp	80031844 <_handle_DTLB_Modified>
	...

80031850 <_handle_ITLB_Miss>:

        .org  0x050
        // ITLB Miss.
_handle_ITLB_Miss:
        rjmp $
80031850:	c0 08       	rjmp	80031850 <_handle_ITLB_Miss>
	...

80031860 <_handle_DTLB_Miss_Read>:

        .org  0x060
        // DTLB Miss (Read).
_handle_DTLB_Miss_Read:
        rjmp $
80031860:	c0 08       	rjmp	80031860 <_handle_DTLB_Miss_Read>
	...

80031870 <_handle_DTLB_Miss_Write>:

        .org  0x070
        // DTLB Miss (Write).
_handle_DTLB_Miss_Write:
        rjmp $
80031870:	c0 08       	rjmp	80031870 <_handle_DTLB_Miss_Write>
	...

80031900 <_handle_Supervisor_Call>:

        .org  0x100
        // Supervisor Call.
_handle_Supervisor_Call:
        rjmp $
80031900:	c0 08       	rjmp	80031900 <_handle_Supervisor_Call>
80031902:	d7 03       	nop

80031904 <_int0>:
  // CPU upon interrupt entry. No other register is saved by hardware.
#elif __AVR32_AP__
  // PC and SR are automatically saved in respectively RAR_INTx and RSR_INTx by
  // the CPU upon interrupt entry. No other register is saved by hardware.
  pushm   r8-r12, lr
#endif
80031904:	30 0c       	mov	r12,0
80031906:	fe b0 b0 0d 	rcall	80027920 <_get_interrupt_handler>
8003190a:	58 0c       	cp.w	r12,0
8003190c:	f8 0f 17 10 	movne	pc,r12
80031910:	d6 03       	rete

80031912 <_int1>:
80031912:	30 1c       	mov	r12,1
80031914:	fe b0 b0 06 	rcall	80027920 <_get_interrupt_handler>
80031918:	58 0c       	cp.w	r12,0
8003191a:	f8 0f 17 10 	movne	pc,r12
8003191e:	d6 03       	rete

80031920 <_int2>:
80031920:	30 2c       	mov	r12,2
80031922:	fe b0 af ff 	rcall	80027920 <_get_interrupt_handler>
80031926:	58 0c       	cp.w	r12,0
80031928:	f8 0f 17 10 	movne	pc,r12
8003192c:	d6 03       	rete

8003192e <_int3>:
8003192e:	30 3c       	mov	r12,3
80031930:	fe b0 af f8 	rcall	80027920 <_get_interrupt_handler>
80031934:	58 0c       	cp.w	r12,0
80031936:	f8 0f 17 10 	movne	pc,r12
8003193a:	d6 03       	rete

8003193c <ipr_val>:
8003193c:	00 00 01 04 40 00 01 12 80 00 01 20 c0 00 01 2e     ....@...... ....
8003194c:	80 01 96 80 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
8003195c:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
8003196c:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
8003197c:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
8003198c:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
8003199c:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
800319ac:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
800319bc:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
800319cc:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
800319dc:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
800319ec:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
800319fc:	d7 03 d7 03                                         ....
